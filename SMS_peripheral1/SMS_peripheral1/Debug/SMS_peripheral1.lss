
SMS_peripheral1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00010600  10008000  10008000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000000ac  10018600  10018600  00018600  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00002ea0  100186ac  100186ac  000186ac  2**2
                  ALLOC
  3 .stack        00001804  1001b54c  1001b54c  000186ac  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000186ac  2**0
                  CONTENTS, READONLY
  5 .comment      000000b4  00000000  00000000  000186d4  2**0
                  CONTENTS, READONLY
  6 .debug_info   00050e78  00000000  00000000  00018788  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000058ff  00000000  00000000  00069600  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000b986  00000000  00000000  0006eeff  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000d68  00000000  00000000  0007a885  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000de0  00000000  00000000  0007b5ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00028e7a  00000000  00000000  0007c3cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00018dbf  00000000  00000000  000a5247  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    001472e4  00000000  00000000  000be006  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00002fb8  00000000  00000000  002052ec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

10008000 <app_entry>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void app_entry(void)
{
10008000:	b510      	push	{r4, lr}

    /* Initialize the relocate segment */
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
10008002:	4b18      	ldr	r3, [pc, #96]	; (10008064 <app_entry+0x64>)
10008004:	4a18      	ldr	r2, [pc, #96]	; (10008068 <app_entry+0x68>)
10008006:	429a      	cmp	r2, r3
10008008:	d003      	beq.n	10008012 <app_entry+0x12>
        for (; pDest < &_erelocate;) {
1000800a:	4b18      	ldr	r3, [pc, #96]	; (1000806c <app_entry+0x6c>)
1000800c:	4a15      	ldr	r2, [pc, #84]	; (10008064 <app_entry+0x64>)
1000800e:	429a      	cmp	r2, r3
10008010:	d304      	bcc.n	1000801c <app_entry+0x1c>
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
10008012:	4b17      	ldr	r3, [pc, #92]	; (10008070 <app_entry+0x70>)
10008014:	4a17      	ldr	r2, [pc, #92]	; (10008074 <app_entry+0x74>)
10008016:	429a      	cmp	r2, r3
10008018:	d310      	bcc.n	1000803c <app_entry+0x3c>
1000801a:	e01e      	b.n	1000805a <app_entry+0x5a>
1000801c:	4b16      	ldr	r3, [pc, #88]	; (10008078 <app_entry+0x78>)
1000801e:	4a13      	ldr	r2, [pc, #76]	; (1000806c <app_entry+0x6c>)
10008020:	3203      	adds	r2, #3
10008022:	1ad2      	subs	r2, r2, r3
10008024:	0892      	lsrs	r2, r2, #2
10008026:	3201      	adds	r2, #1
10008028:	0092      	lsls	r2, r2, #2
    /* Initialize the relocate segment */
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
        for (; pDest < &_erelocate;) {
1000802a:	2300      	movs	r3, #0
            *pDest++ = *pSrc++;
1000802c:	480d      	ldr	r0, [pc, #52]	; (10008064 <app_entry+0x64>)
1000802e:	490e      	ldr	r1, [pc, #56]	; (10008068 <app_entry+0x68>)
10008030:	58cc      	ldr	r4, [r1, r3]
10008032:	50c4      	str	r4, [r0, r3]
10008034:	3304      	adds	r3, #4
    /* Initialize the relocate segment */
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
        for (; pDest < &_erelocate;) {
10008036:	4293      	cmp	r3, r2
10008038:	d1fa      	bne.n	10008030 <app_entry+0x30>
1000803a:	e7ea      	b.n	10008012 <app_entry+0x12>
1000803c:	4b0f      	ldr	r3, [pc, #60]	; (1000807c <app_entry+0x7c>)
1000803e:	490c      	ldr	r1, [pc, #48]	; (10008070 <app_entry+0x70>)
10008040:	3103      	adds	r1, #3
10008042:	1ac9      	subs	r1, r1, r3
10008044:	0889      	lsrs	r1, r1, #2
10008046:	3101      	adds	r1, #1
10008048:	0089      	lsls	r1, r1, #2
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
1000804a:	2300      	movs	r3, #0
        *pDest++ = 0;
1000804c:	4c09      	ldr	r4, [pc, #36]	; (10008074 <app_entry+0x74>)
1000804e:	2000      	movs	r0, #0
10008050:	191a      	adds	r2, r3, r4
10008052:	6010      	str	r0, [r2, #0]
10008054:	3304      	adds	r3, #4
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
10008056:	428b      	cmp	r3, r1
10008058:	d1fa      	bne.n	10008050 <app_entry+0x50>
        *pDest++ = 0;
    }

    /* Initialize the C library */
    __libc_init_array();
1000805a:	4b09      	ldr	r3, [pc, #36]	; (10008080 <app_entry+0x80>)
1000805c:	4798      	blx	r3

    /* Branch to main function */
    main();
1000805e:	4b09      	ldr	r3, [pc, #36]	; (10008084 <app_entry+0x84>)
10008060:	4798      	blx	r3

    /* return to BLE OS*/
    return;
}
10008062:	bd10      	pop	{r4, pc}
10008064:	10018600 	.word	0x10018600
10008068:	10018600 	.word	0x10018600
1000806c:	100186ac 	.word	0x100186ac
10008070:	1001b54c 	.word	0x1001b54c
10008074:	100186ac 	.word	0x100186ac
10008078:	10018604 	.word	0x10018604
1000807c:	100186b0 	.word	0x100186b0
10008080:	100151a9 	.word	0x100151a9
10008084:	1000f981 	.word	0x1000f981

10008088 <__do_global_dtors_aux>:
10008088:	b510      	push	{r4, lr}
1000808a:	4c06      	ldr	r4, [pc, #24]	; (100080a4 <__do_global_dtors_aux+0x1c>)
1000808c:	7823      	ldrb	r3, [r4, #0]
1000808e:	2b00      	cmp	r3, #0
10008090:	d107      	bne.n	100080a2 <__do_global_dtors_aux+0x1a>
10008092:	4b05      	ldr	r3, [pc, #20]	; (100080a8 <__do_global_dtors_aux+0x20>)
10008094:	2b00      	cmp	r3, #0
10008096:	d002      	beq.n	1000809e <__do_global_dtors_aux+0x16>
10008098:	4804      	ldr	r0, [pc, #16]	; (100080ac <__do_global_dtors_aux+0x24>)
1000809a:	e000      	b.n	1000809e <__do_global_dtors_aux+0x16>
1000809c:	bf00      	nop
1000809e:	2301      	movs	r3, #1
100080a0:	7023      	strb	r3, [r4, #0]
100080a2:	bd10      	pop	{r4, pc}
100080a4:	100186ac 	.word	0x100186ac
100080a8:	00000000 	.word	0x00000000
100080ac:	10018600 	.word	0x10018600

100080b0 <frame_dummy>:
100080b0:	4b08      	ldr	r3, [pc, #32]	; (100080d4 <frame_dummy+0x24>)
100080b2:	b510      	push	{r4, lr}
100080b4:	2b00      	cmp	r3, #0
100080b6:	d003      	beq.n	100080c0 <frame_dummy+0x10>
100080b8:	4907      	ldr	r1, [pc, #28]	; (100080d8 <frame_dummy+0x28>)
100080ba:	4808      	ldr	r0, [pc, #32]	; (100080dc <frame_dummy+0x2c>)
100080bc:	e000      	b.n	100080c0 <frame_dummy+0x10>
100080be:	bf00      	nop
100080c0:	4807      	ldr	r0, [pc, #28]	; (100080e0 <frame_dummy+0x30>)
100080c2:	6803      	ldr	r3, [r0, #0]
100080c4:	2b00      	cmp	r3, #0
100080c6:	d100      	bne.n	100080ca <frame_dummy+0x1a>
100080c8:	bd10      	pop	{r4, pc}
100080ca:	4b06      	ldr	r3, [pc, #24]	; (100080e4 <frame_dummy+0x34>)
100080cc:	2b00      	cmp	r3, #0
100080ce:	d0fb      	beq.n	100080c8 <frame_dummy+0x18>
100080d0:	4798      	blx	r3
100080d2:	e7f9      	b.n	100080c8 <frame_dummy+0x18>
100080d4:	00000000 	.word	0x00000000
100080d8:	100186b0 	.word	0x100186b0
100080dc:	10018600 	.word	0x10018600
100080e0:	10018600 	.word	0x10018600
100080e4:	00000000 	.word	0x00000000

100080e8 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
100080e8:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_clock_get_value();
100080ea:	4b09      	ldr	r3, [pc, #36]	; (10008110 <delay_init+0x28>)
100080ec:	4798      	blx	r3
100080ee:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
100080f0:	4c08      	ldr	r4, [pc, #32]	; (10008114 <delay_init+0x2c>)
100080f2:	21fa      	movs	r1, #250	; 0xfa
100080f4:	0089      	lsls	r1, r1, #2
100080f6:	47a0      	blx	r4
100080f8:	4b07      	ldr	r3, [pc, #28]	; (10008118 <delay_init+0x30>)
100080fa:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
100080fc:	4907      	ldr	r1, [pc, #28]	; (1000811c <delay_init+0x34>)
100080fe:	0028      	movs	r0, r5
10008100:	47a0      	blx	r4
10008102:	4b07      	ldr	r3, [pc, #28]	; (10008120 <delay_init+0x38>)
10008104:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
10008106:	2205      	movs	r2, #5
10008108:	4b06      	ldr	r3, [pc, #24]	; (10008124 <delay_init+0x3c>)
1000810a:	601a      	str	r2, [r3, #0]
}
1000810c:	bd70      	pop	{r4, r5, r6, pc}
1000810e:	46c0      	nop			; (mov r8, r8)
10008110:	1000c809 	.word	0x1000c809
10008114:	10013135 	.word	0x10013135
10008118:	10018604 	.word	0x10018604
1000811c:	000f4240 	.word	0x000f4240
10008120:	10018600 	.word	0x10018600
10008124:	e000e010 	.word	0xe000e010

10008128 <delay_cycles_ms>:
 * \brief Delay loop to delay at least n number of milliseconds
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(uint32_t n)
{
10008128:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
1000812a:	4b08      	ldr	r3, [pc, #32]	; (1000814c <delay_cycles_ms+0x24>)
1000812c:	681c      	ldr	r4, [r3, #0]
 * \param n Number of cycles
 */
static inline void delay_cycles(const uint32_t n)
{
    if(n > 0) {
        SysTick->LOAD = n;
1000812e:	4a08      	ldr	r2, [pc, #32]	; (10008150 <delay_cycles_ms+0x28>)
        SysTick->VAL = 0;
10008130:	2500      	movs	r5, #0
        while(!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
10008132:	2180      	movs	r1, #128	; 0x80
10008134:	0249      	lsls	r1, r1, #9
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(uint32_t n)
{
	while (n--) {
10008136:	e006      	b.n	10008146 <delay_cycles_ms+0x1e>
 *
 * \param n Number of cycles
 */
static inline void delay_cycles(const uint32_t n)
{
    if(n > 0) {
10008138:	2c00      	cmp	r4, #0
1000813a:	d004      	beq.n	10008146 <delay_cycles_ms+0x1e>
        SysTick->LOAD = n;
1000813c:	6054      	str	r4, [r2, #4]
        SysTick->VAL = 0;
1000813e:	6095      	str	r5, [r2, #8]
        while(!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
10008140:	6813      	ldr	r3, [r2, #0]
10008142:	420b      	tst	r3, r1
10008144:	d0fc      	beq.n	10008140 <delay_cycles_ms+0x18>
10008146:	3801      	subs	r0, #1
10008148:	d2f6      	bcs.n	10008138 <delay_cycles_ms+0x10>
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
	}
}
1000814a:	bd30      	pop	{r4, r5, pc}
1000814c:	10018604 	.word	0x10018604
10008150:	e000e010 	.word	0xe000e010

10008154 <aon_sleep_timer_get_config_defaults>:
 * \param[out]  config  Pointer to a AON Sleep Timer module configuration structure to set
 */
void aon_sleep_timer_get_config_defaults(struct aon_sleep_timer_config *config)
{
	/* Default configuration values */
	config->wakeup = AON_SLEEP_TIMER_WAKEUP_ARM;
10008154:	2301      	movs	r3, #1
10008156:	7003      	strb	r3, [r0, #0]
	config->mode = AON_SLEEP_TIMER_SINGLE_MODE;
10008158:	7043      	strb	r3, [r0, #1]
	config->counter = 32000;
1000815a:	23fa      	movs	r3, #250	; 0xfa
1000815c:	01db      	lsls	r3, r3, #7
1000815e:	6043      	str	r3, [r0, #4]
}
10008160:	4770      	bx	lr
10008162:	46c0      	nop			; (mov r8, r8)

10008164 <aon_sleep_timer_disable>:
 */
void aon_sleep_timer_disable(void)
{
	uint32_t regval;

	AON_SLEEP_TIMER0->SINGLE_COUNT_DURATION.reg = 0;
10008164:	4b06      	ldr	r3, [pc, #24]	; (10008180 <aon_sleep_timer_disable+0x1c>)
10008166:	2200      	movs	r2, #0
10008168:	605a      	str	r2, [r3, #4]
	regval = AON_SLEEP_TIMER0->CONTROL.reg;
1000816a:	681a      	ldr	r2, [r3, #0]
	regval &= ~AON_SLEEP_TIMER_CONTROL_RELOAD_ENABLE;
	regval &= ~AON_SLEEP_TIMER_CONTROL_SINGLE_COUNT_ENABLE;
1000816c:	2103      	movs	r1, #3
1000816e:	438a      	bics	r2, r1
	AON_SLEEP_TIMER0->CONTROL.reg = regval;
10008170:	601a      	str	r2, [r3, #0]

	while (AON_SLEEP_TIMER0->CONTROL.reg & (1 << 14)) {
10008172:	0019      	movs	r1, r3
10008174:	2280      	movs	r2, #128	; 0x80
10008176:	01d2      	lsls	r2, r2, #7
10008178:	680b      	ldr	r3, [r1, #0]
1000817a:	4213      	tst	r3, r2
1000817c:	d1fc      	bne.n	10008178 <aon_sleep_timer_disable+0x14>
	}
}
1000817e:	4770      	bx	lr
10008180:	4000d000 	.word	0x4000d000

10008184 <aon_sleep_timer_clear_interrup>:
 * This flag will be cleared automatically once the IRQ
 * has been seen on the sleep clock.
 */
void aon_sleep_timer_clear_interrup(void)
{
	AON_SLEEP_TIMER0->CONTROL.reg |= AON_SLEEP_TIMER_CONTROL_IRQ_CLEAR;
10008184:	4a02      	ldr	r2, [pc, #8]	; (10008190 <aon_sleep_timer_clear_interrup+0xc>)
10008186:	6811      	ldr	r1, [r2, #0]
10008188:	2310      	movs	r3, #16
1000818a:	430b      	orrs	r3, r1
1000818c:	6013      	str	r3, [r2, #0]
}
1000818e:	4770      	bx	lr
10008190:	4000d000 	.word	0x4000d000

10008194 <aon_sleep_timer_isr_handler>:
 *
 * Timer ISR handler.
 *
 */
static void aon_sleep_timer_isr_handler(void)
{
10008194:	b510      	push	{r4, lr}
	aon_sleep_timer_clear_interrup();
10008196:	4b04      	ldr	r3, [pc, #16]	; (100081a8 <aon_sleep_timer_isr_handler+0x14>)
10008198:	4798      	blx	r3

	if (aon_sleep_timer_callback) {
1000819a:	4b04      	ldr	r3, [pc, #16]	; (100081ac <aon_sleep_timer_isr_handler+0x18>)
1000819c:	681b      	ldr	r3, [r3, #0]
1000819e:	2b00      	cmp	r3, #0
100081a0:	d000      	beq.n	100081a4 <aon_sleep_timer_isr_handler+0x10>
		aon_sleep_timer_callback();
100081a2:	4798      	blx	r3
	}
}
100081a4:	bd10      	pop	{r4, pc}
100081a6:	46c0      	nop			; (mov r8, r8)
100081a8:	10008185 	.word	0x10008185
100081ac:	100186c8 	.word	0x100186c8

100081b0 <aon_sleep_timer_register_callback>:
 *
 * \param[in]     callback_func Pointer to callback function
 */
void aon_sleep_timer_register_callback(aon_sleep_timer_callback_t fun)
{
	aon_sleep_timer_callback = fun;
100081b0:	4b01      	ldr	r3, [pc, #4]	; (100081b8 <aon_sleep_timer_register_callback+0x8>)
100081b2:	6018      	str	r0, [r3, #0]
}
100081b4:	4770      	bx	lr
100081b6:	46c0      	nop			; (mov r8, r8)
100081b8:	100186c8 	.word	0x100186c8

100081bc <aon_sleep_timer_unregister_callback>:
 * Unregisters and disable a callback function implemented by the user.
 *
 */
void aon_sleep_timer_unregister_callback(void)
{
	aon_sleep_timer_callback = NULL;
100081bc:	2200      	movs	r2, #0
100081be:	4b01      	ldr	r3, [pc, #4]	; (100081c4 <aon_sleep_timer_unregister_callback+0x8>)
100081c0:	601a      	str	r2, [r3, #0]
}
100081c2:	4770      	bx	lr
100081c4:	100186c8 	.word	0x100186c8

100081c8 <aon_sleep_timer_init>:
 *
 * \param[in]     config       Pointer to the AON Sleep Timer configuration options struct
 *
 */
void aon_sleep_timer_init(const struct aon_sleep_timer_config *config)
{
100081c8:	b5f0      	push	{r4, r5, r6, r7, lr}
100081ca:	b083      	sub	sp, #12
	uint32_t aon_st_ctrl = 0;

	AON_PWR_SEQ0->AON_ST_WAKEUP_CTRL.reg = AON_PWR_SEQ_AON_ST_WAKEUP_CTRL_RESETVALUE;
100081cc:	2200      	movs	r2, #0
100081ce:	4b2b      	ldr	r3, [pc, #172]	; (1000827c <aon_sleep_timer_init+0xb4>)
100081d0:	731a      	strb	r2, [r3, #12]
	if (config->wakeup == AON_SLEEP_TIMER_WAKEUP_ARM_BLE) {
100081d2:	7803      	ldrb	r3, [r0, #0]
100081d4:	2b02      	cmp	r3, #2
100081d6:	d105      	bne.n	100081e4 <aon_sleep_timer_init+0x1c>
		AON_PWR_SEQ0->AON_ST_WAKEUP_CTRL.reg |=
100081d8:	4a28      	ldr	r2, [pc, #160]	; (1000827c <aon_sleep_timer_init+0xb4>)
100081da:	7b11      	ldrb	r1, [r2, #12]
100081dc:	3301      	adds	r3, #1
100081de:	430b      	orrs	r3, r1
100081e0:	7313      	strb	r3, [r2, #12]
100081e2:	e005      	b.n	100081f0 <aon_sleep_timer_init+0x28>
				AON_PWR_SEQ_AON_ST_WAKEUP_CTRL_ARM_ENABLE |
				AON_PWR_SEQ_AON_ST_WAKEUP_CTRL_BLE_ENABLE;
	} else if (config->wakeup == AON_SLEEP_TIMER_WAKEUP_ARM) {
100081e4:	2b01      	cmp	r3, #1
100081e6:	d103      	bne.n	100081f0 <aon_sleep_timer_init+0x28>
		AON_PWR_SEQ0->AON_ST_WAKEUP_CTRL.reg |=
100081e8:	4a24      	ldr	r2, [pc, #144]	; (1000827c <aon_sleep_timer_init+0xb4>)
100081ea:	7b11      	ldrb	r1, [r2, #12]
100081ec:	430b      	orrs	r3, r1
100081ee:	7313      	strb	r3, [r2, #12]
				AON_PWR_SEQ_AON_ST_WAKEUP_CTRL_ARM_ENABLE;
	}

	aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
100081f0:	4b23      	ldr	r3, [pc, #140]	; (10008280 <aon_sleep_timer_init+0xb8>)
100081f2:	681a      	ldr	r2, [r3, #0]
	while (aon_st_ctrl & ((1UL << 31) - 1)) {
100081f4:	0053      	lsls	r3, r2, #1
100081f6:	d01f      	beq.n	10008238 <aon_sleep_timer_init+0x70>
		AON_SLEEP_TIMER0->CONTROL.reg = 0;
100081f8:	4d21      	ldr	r5, [pc, #132]	; (10008280 <aon_sleep_timer_init+0xb8>)
100081fa:	2700      	movs	r7, #0

static void delay_cycle(uint32_t cycles)
{
	volatile uint32_t i = 0;

	for (i = 0; i < cycles*100; i++) {
100081fc:	262c      	movs	r6, #44	; 0x2c
100081fe:	36ff      	adds	r6, #255	; 0xff
10008200:	2180      	movs	r1, #128	; 0x80
10008202:	01c9      	lsls	r1, r1, #7
				AON_PWR_SEQ_AON_ST_WAKEUP_CTRL_ARM_ENABLE;
	}

	aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
	while (aon_st_ctrl & ((1UL << 31) - 1)) {
		AON_SLEEP_TIMER0->CONTROL.reg = 0;
10008204:	602f      	str	r7, [r5, #0]

static aon_sleep_timer_callback_t aon_sleep_timer_callback = NULL;

static void delay_cycle(uint32_t cycles)
{
	volatile uint32_t i = 0;
10008206:	9701      	str	r7, [sp, #4]

	for (i = 0; i < cycles*100; i++) {
10008208:	9701      	str	r7, [sp, #4]
1000820a:	9b01      	ldr	r3, [sp, #4]
1000820c:	42b3      	cmp	r3, r6
1000820e:	d806      	bhi.n	1000821e <aon_sleep_timer_init+0x56>
		asm volatile ("nop");
10008210:	46c0      	nop			; (mov r8, r8)

static void delay_cycle(uint32_t cycles)
{
	volatile uint32_t i = 0;

	for (i = 0; i < cycles*100; i++) {
10008212:	9b01      	ldr	r3, [sp, #4]
10008214:	3301      	adds	r3, #1
10008216:	9301      	str	r3, [sp, #4]
10008218:	9b01      	ldr	r3, [sp, #4]
1000821a:	42b3      	cmp	r3, r6
1000821c:	d9f8      	bls.n	10008210 <aon_sleep_timer_init+0x48>
1000821e:	7844      	ldrb	r4, [r0, #1]
10008220:	000b      	movs	r3, r1
10008222:	2c00      	cmp	r4, #0
10008224:	d103      	bne.n	1000822e <aon_sleep_timer_init+0x66>
10008226:	2380      	movs	r3, #128	; 0x80
10008228:	009b      	lsls	r3, r3, #2
1000822a:	e000      	b.n	1000822e <aon_sleep_timer_init+0x66>
	while (aon_st_ctrl & ((1UL << 31) - 1)) {
		AON_SLEEP_TIMER0->CONTROL.reg = 0;
		delay_cycle(3);
		while (aon_st_ctrl & ((config->mode == AON_SLEEP_TIMER_RELOAD_MODE) ?
				(1 << 9) : (1 << 14))) {
			aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
1000822c:	682a      	ldr	r2, [r5, #0]

	aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
	while (aon_st_ctrl & ((1UL << 31) - 1)) {
		AON_SLEEP_TIMER0->CONTROL.reg = 0;
		delay_cycle(3);
		while (aon_st_ctrl & ((config->mode == AON_SLEEP_TIMER_RELOAD_MODE) ?
1000822e:	4213      	tst	r3, r2
10008230:	d1fc      	bne.n	1000822c <aon_sleep_timer_init+0x64>
				(1 << 9) : (1 << 14))) {
			aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
		}
		aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
10008232:	682a      	ldr	r2, [r5, #0]
		AON_PWR_SEQ0->AON_ST_WAKEUP_CTRL.reg |=
				AON_PWR_SEQ_AON_ST_WAKEUP_CTRL_ARM_ENABLE;
	}

	aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
	while (aon_st_ctrl & ((1UL << 31) - 1)) {
10008234:	0053      	lsls	r3, r2, #1
10008236:	d1e5      	bne.n	10008204 <aon_sleep_timer_init+0x3c>
			aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
		}
		aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
	}

	if (config->mode == AON_SLEEP_TIMER_RELOAD_MODE) {
10008238:	7843      	ldrb	r3, [r0, #1]
1000823a:	2b00      	cmp	r3, #0
1000823c:	d105      	bne.n	1000824a <aon_sleep_timer_init+0x82>
		/* Reload counter will start here */
		AON_SLEEP_TIMER0->SINGLE_COUNT_DURATION.reg = config->counter;
1000823e:	4b10      	ldr	r3, [pc, #64]	; (10008280 <aon_sleep_timer_init+0xb8>)
10008240:	6842      	ldr	r2, [r0, #4]
10008242:	605a      	str	r2, [r3, #4]
		AON_SLEEP_TIMER0->CONTROL.reg = AON_SLEEP_TIMER_CONTROL_RELOAD_ENABLE;
10008244:	2201      	movs	r2, #1
10008246:	601a      	str	r2, [r3, #0]
10008248:	e004      	b.n	10008254 <aon_sleep_timer_init+0x8c>
	} else {
		/* Single counter will start here */
		AON_SLEEP_TIMER0->SINGLE_COUNT_DURATION.reg = config->counter;
1000824a:	4b0d      	ldr	r3, [pc, #52]	; (10008280 <aon_sleep_timer_init+0xb8>)
1000824c:	6842      	ldr	r2, [r0, #4]
1000824e:	605a      	str	r2, [r3, #4]
		AON_SLEEP_TIMER0->CONTROL.reg = AON_SLEEP_TIMER_CONTROL_SINGLE_COUNT_ENABLE;
10008250:	2202      	movs	r2, #2
10008252:	601a      	str	r2, [r3, #0]
	}

	if (config->mode == AON_SLEEP_TIMER_SINGLE_MODE) {
10008254:	7843      	ldrb	r3, [r0, #1]
10008256:	2b01      	cmp	r3, #1
10008258:	d109      	bne.n	1000826e <aon_sleep_timer_init+0xa6>
		while ((AON_SLEEP_TIMER0->CONTROL.reg &
1000825a:	4909      	ldr	r1, [pc, #36]	; (10008280 <aon_sleep_timer_init+0xb8>)
1000825c:	22e0      	movs	r2, #224	; 0xe0
1000825e:	01d2      	lsls	r2, r2, #7
10008260:	680b      	ldr	r3, [r1, #0]
10008262:	4013      	ands	r3, r2
10008264:	4293      	cmp	r3, r2
10008266:	d1fb      	bne.n	10008260 <aon_sleep_timer_init+0x98>
				AON_SLEEP_TIMER_CONTROL_SLP_TIMER_SINGLE_COUNT_ENABLE_DLY_Msk)
				!= AON_SLEEP_TIMER_CONTROL_SLP_TIMER_SINGLE_COUNT_ENABLE_DLY_Msk) {
		}
		AON_SLEEP_TIMER0->CONTROL.reg = 0;
10008268:	2200      	movs	r2, #0
1000826a:	4b05      	ldr	r3, [pc, #20]	; (10008280 <aon_sleep_timer_init+0xb8>)
1000826c:	601a      	str	r2, [r3, #0]
	}

	system_register_isr(RAM_ISR_TABLE_AON_SLEEP_TIMER_INDEX, (uint32_t)aon_sleep_timer_isr_handler);
1000826e:	4905      	ldr	r1, [pc, #20]	; (10008284 <aon_sleep_timer_init+0xbc>)
10008270:	202b      	movs	r0, #43	; 0x2b
10008272:	4b05      	ldr	r3, [pc, #20]	; (10008288 <aon_sleep_timer_init+0xc0>)
10008274:	4798      	blx	r3
}
10008276:	b003      	add	sp, #12
10008278:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000827a:	46c0      	nop			; (mov r8, r8)
1000827c:	4000e000 	.word	0x4000e000
10008280:	4000d000 	.word	0x4000d000
10008284:	10008195 	.word	0x10008195
10008288:	1000d345 	.word	0x1000d345

1000828c <_i2c_master_read_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
1000828c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000828e:	465f      	mov	r7, fp
10008290:	4656      	mov	r6, sl
10008292:	464d      	mov	r5, r9
10008294:	4644      	mov	r4, r8
10008296:	b4f0      	push	{r4, r5, r6, r7}
10008298:	4683      	mov	fp, r0
1000829a:	4688      	mov	r8, r1
	Assert(config);
	
	uint16_t counter = 0;
	uint32_t status  = 0;
	I2c *const i2c_module    = (module->hw);
	uint16_t length = packet->data_length;
1000829c:	884f      	ldrh	r7, [r1, #2]

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
1000829e:	2017      	movs	r0, #23
	uint16_t counter = 0;
	uint32_t status  = 0;
	I2c *const i2c_module    = (module->hw);
	uint16_t length = packet->data_length;

	if (length == 0) {
100082a0:	2f00      	cmp	r7, #0
100082a2:	d035      	beq.n	10008310 <_i2c_master_read_packet+0x84>
	Assert(module->hw);
	Assert(config);
	
	uint16_t counter = 0;
	uint32_t status  = 0;
	I2c *const i2c_module    = (module->hw);
100082a4:	465b      	mov	r3, fp
100082a6:	681d      	ldr	r5, [r3, #0]
 *
 * \param[in]  i2c_module  Pointer to software module structure
 */
static inline void i2c_wait_for_idle(I2c *const i2c_module)
{
	while (i2c_module->I2C_STATUS.bit.I2C_ACTIVE) {
100082a8:	2228      	movs	r2, #40	; 0x28
100082aa:	5cab      	ldrb	r3, [r5, r2]
100082ac:	07db      	lsls	r3, r3, #31
100082ae:	d4fc      	bmi.n	100082aa <_i2c_master_read_packet+0x1e>
	}

	i2c_wait_for_idle(i2c_module);

	/* Flush the FIFO */
	i2c_module->I2C_FLUSH.reg = 1;
100082b0:	2301      	movs	r3, #1
100082b2:	2234      	movs	r2, #52	; 0x34
100082b4:	54ab      	strb	r3, [r5, r2]

	/* Enable I2C on bus (start condition). */
	i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_1;
100082b6:	3a14      	subs	r2, #20
100082b8:	54ab      	strb	r3, [r5, r2]
	/* Address I2C slave in case of Master mode enabled. */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 |
100082ba:	4643      	mov	r3, r8
100082bc:	881b      	ldrh	r3, [r3, #0]
100082be:	005b      	lsls	r3, r3, #1
100082c0:	2202      	movs	r2, #2
100082c2:	32ff      	adds	r2, #255	; 0xff
100082c4:	4313      	orrs	r3, r2
100082c6:	b29b      	uxth	r3, r3
100082c8:	802b      	strh	r3, [r5, #0]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(config);
	
	uint16_t counter = 0;
100082ca:	2600      	movs	r6, #0
	/* Address I2C slave in case of Master mode enabled. */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 |
			(packet->address << 1) | I2C_TRANSFER_READ;
	do {
		status = i2c_module->RECEIVE_STATUS.reg;
		if (status & I2C_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY)
100082cc:	2301      	movs	r3, #1
100082ce:	469a      	mov	sl, r3
			packet->data[counter++] = i2c_module->RECEIVE_DATA.reg;
            printf("counter %d", (counter-1));
100082d0:	4b12      	ldr	r3, [pc, #72]	; (1000831c <_i2c_master_read_packet+0x90>)
100082d2:	4699      	mov	r9, r3
	i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_1;
	/* Address I2C slave in case of Master mode enabled. */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 |
			(packet->address << 1) | I2C_TRANSFER_READ;
	do {
		status = i2c_module->RECEIVE_STATUS.reg;
100082d4:	7b2c      	ldrb	r4, [r5, #12]
100082d6:	b2e4      	uxtb	r4, r4
		if (status & I2C_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY)
100082d8:	4653      	mov	r3, sl
100082da:	4223      	tst	r3, r4
100082dc:	d005      	beq.n	100082ea <_i2c_master_read_packet+0x5e>
			packet->data[counter++] = i2c_module->RECEIVE_DATA.reg;
100082de:	1c73      	adds	r3, r6, #1
100082e0:	792a      	ldrb	r2, [r5, #4]
100082e2:	4641      	mov	r1, r8
100082e4:	6849      	ldr	r1, [r1, #4]
100082e6:	558a      	strb	r2, [r1, r6]
100082e8:	b29e      	uxth	r6, r3
            printf("counter %d", (counter-1));
100082ea:	1e71      	subs	r1, r6, #1
100082ec:	480c      	ldr	r0, [pc, #48]	; (10008320 <_i2c_master_read_packet+0x94>)
100082ee:	47c8      	blx	r9
	} while (counter < length); 
100082f0:	42be      	cmp	r6, r7
100082f2:	d3ef      	bcc.n	100082d4 <_i2c_master_read_packet+0x48>

	/* Now check whether the core has sent the data out and free the bus. */
	while (!(status & I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY)) {
100082f4:	06e3      	lsls	r3, r4, #27
100082f6:	d403      	bmi.n	10008300 <_i2c_master_read_packet+0x74>
100082f8:	2210      	movs	r2, #16
		status = i2c_module->TRANSMIT_STATUS.reg;
100082fa:	7a2b      	ldrb	r3, [r5, #8]
			packet->data[counter++] = i2c_module->RECEIVE_DATA.reg;
            printf("counter %d", (counter-1));
	} while (counter < length); 

	/* Now check whether the core has sent the data out and free the bus. */
	while (!(status & I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY)) {
100082fc:	4213      	tst	r3, r2
100082fe:	d0fc      	beq.n	100082fa <_i2c_master_read_packet+0x6e>
		status = i2c_module->TRANSMIT_STATUS.reg;
	}

	/* Send stop condition. */
	if (!module->no_stop) {
10008300:	465b      	mov	r3, fp
10008302:	795b      	ldrb	r3, [r3, #5]
		i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_0;
	}

	return STATUS_OK;
10008304:	2000      	movs	r0, #0
	while (!(status & I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY)) {
		status = i2c_module->TRANSMIT_STATUS.reg;
	}

	/* Send stop condition. */
	if (!module->no_stop) {
10008306:	2b00      	cmp	r3, #0
10008308:	d102      	bne.n	10008310 <_i2c_master_read_packet+0x84>
		i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_0;
1000830a:	2200      	movs	r2, #0
1000830c:	3320      	adds	r3, #32
1000830e:	54ea      	strb	r2, [r5, r3]
	}

	return STATUS_OK;
}
10008310:	bc3c      	pop	{r2, r3, r4, r5}
10008312:	4690      	mov	r8, r2
10008314:	4699      	mov	r9, r3
10008316:	46a2      	mov	sl, r4
10008318:	46ab      	mov	fp, r5
1000831a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000831c:	10015381 	.word	0x10015381
10008320:	100163e0 	.word	0x100163e0

10008324 <_i2c_master_write_packet>:
 * \retval STATUS_OK                    The packet was write successfully
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
10008324:	b5f0      	push	{r4, r5, r6, r7, lr}
10008326:	464f      	mov	r7, r9
10008328:	4646      	mov	r6, r8
1000832a:	b4c0      	push	{r6, r7}
1000832c:	b083      	sub	sp, #12
1000832e:	4681      	mov	r9, r0
10008330:	000e      	movs	r6, r1
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(packet);
	
	I2c *const i2c_module = (module->hw);
10008332:	6807      	ldr	r7, [r0, #0]
	volatile uint16_t counter = 0;
10008334:	2200      	movs	r2, #0
10008336:	466b      	mov	r3, sp
10008338:	80da      	strh	r2, [r3, #6]
	uint32_t status  = 0;

	uint16_t length = packet->data_length;
1000833a:	884b      	ldrh	r3, [r1, #2]
1000833c:	4698      	mov	r8, r3
1000833e:	3228      	adds	r2, #40	; 0x28
10008340:	5cbb      	ldrb	r3, [r7, r2]
10008342:	07db      	lsls	r3, r3, #31
10008344:	d4fc      	bmi.n	10008340 <_i2c_master_write_packet+0x1c>

	i2c_wait_for_idle(i2c_module);

	/* Flush the FIFO */
	i2c_module->I2C_FLUSH.reg = 1;
10008346:	2301      	movs	r3, #1
10008348:	2234      	movs	r2, #52	; 0x34
1000834a:	54bb      	strb	r3, [r7, r2]

	/* Enable I2C on bus (start condition) */
	i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_1;
1000834c:	3a14      	subs	r2, #20
1000834e:	54bb      	strb	r3, [r7, r2]

	/* Address I2C slave in case of Master mode enabled */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 | 
10008350:	8833      	ldrh	r3, [r6, #0]
10008352:	005b      	lsls	r3, r3, #1
10008354:	32e0      	adds	r2, #224	; 0xe0
10008356:	4313      	orrs	r3, r2
10008358:	b29b      	uxth	r3, r3
1000835a:	803b      	strh	r3, [r7, #0]
			((packet->address) << 1) | I2C_TRANSFER_WRITE;
	do {
		status = i2c_module->TRANSMIT_STATUS.reg;
		if (status & I2C_TRANSMIT_STATUS_TX_FIFO_NOT_FULL_Msk) {
			i2c_module->TRANSMIT_DATA.reg = packet->data[counter++];
1000835c:	466b      	mov	r3, sp
1000835e:	1d9d      	adds	r5, r3, #6

	/* Address I2C slave in case of Master mode enabled */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 | 
			((packet->address) << 1) | I2C_TRANSFER_WRITE;
	do {
		status = i2c_module->TRANSMIT_STATUS.reg;
10008360:	7a3c      	ldrb	r4, [r7, #8]
10008362:	b2e4      	uxtb	r4, r4
		if (status & I2C_TRANSMIT_STATUS_TX_FIFO_NOT_FULL_Msk) {
10008364:	07e3      	lsls	r3, r4, #31
10008366:	d50c      	bpl.n	10008382 <_i2c_master_write_packet+0x5e>
			i2c_module->TRANSMIT_DATA.reg = packet->data[counter++];
10008368:	882b      	ldrh	r3, [r5, #0]
1000836a:	b29b      	uxth	r3, r3
1000836c:	1c5a      	adds	r2, r3, #1
1000836e:	b292      	uxth	r2, r2
10008370:	802a      	strh	r2, [r5, #0]
10008372:	6872      	ldr	r2, [r6, #4]
10008374:	5cd3      	ldrb	r3, [r2, r3]
10008376:	803b      	strh	r3, [r7, #0]
            printf("\r\ncounter %d",(counter-1));
10008378:	8829      	ldrh	r1, [r5, #0]
1000837a:	3901      	subs	r1, #1
1000837c:	480c      	ldr	r0, [pc, #48]	; (100083b0 <_i2c_master_write_packet+0x8c>)
1000837e:	4b0d      	ldr	r3, [pc, #52]	; (100083b4 <_i2c_master_write_packet+0x90>)
10008380:	4798      	blx	r3
            //printf(".");
		}
	} while (counter < length); 
10008382:	882b      	ldrh	r3, [r5, #0]
10008384:	b29b      	uxth	r3, r3
10008386:	4598      	cmp	r8, r3
10008388:	d8ea      	bhi.n	10008360 <_i2c_master_write_packet+0x3c>

	/* Now check whether the core has sent the data out and free the bus */
	while (!(status & I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY)) {
1000838a:	06e3      	lsls	r3, r4, #27
1000838c:	d403      	bmi.n	10008396 <_i2c_master_write_packet+0x72>
1000838e:	2210      	movs	r2, #16
			status = i2c_module->TRANSMIT_STATUS.reg;
10008390:	7a3b      	ldrb	r3, [r7, #8]
            //printf(".");
		}
	} while (counter < length); 

	/* Now check whether the core has sent the data out and free the bus */
	while (!(status & I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY)) {
10008392:	4213      	tst	r3, r2
10008394:	d0fc      	beq.n	10008390 <_i2c_master_write_packet+0x6c>
			status = i2c_module->TRANSMIT_STATUS.reg;
	}

	/* Send stop condition */
	if (!module->no_stop) {
10008396:	464b      	mov	r3, r9
10008398:	795b      	ldrb	r3, [r3, #5]
1000839a:	2b00      	cmp	r3, #0
1000839c:	d102      	bne.n	100083a4 <_i2c_master_write_packet+0x80>
		i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_0;
1000839e:	2200      	movs	r2, #0
100083a0:	3320      	adds	r3, #32
100083a2:	54fa      	strb	r2, [r7, r3]
	}

	return STATUS_OK;
}
100083a4:	2000      	movs	r0, #0
100083a6:	b003      	add	sp, #12
100083a8:	bc0c      	pop	{r2, r3}
100083aa:	4690      	mov	r8, r2
100083ac:	4699      	mov	r9, r3
100083ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
100083b0:	100163ec 	.word	0x100163ec
100083b4:	10015381 	.word	0x10015381

100083b8 <i2c_master_get_config_defaults>:
		struct i2c_master_config *const config)
{
	/* Sanity check */
	Assert(config);
	
	config->clock_source    = I2C_CLK_INPUT_3;
100083b8:	2303      	movs	r3, #3
100083ba:	7003      	strb	r3, [r0, #0]
	config->clock_divider   = 0x10;
100083bc:	330d      	adds	r3, #13
100083be:	8043      	strh	r3, [r0, #2]
	config->pin_number_pad0 = PIN_LP_GPIO_8;
100083c0:	3b08      	subs	r3, #8
100083c2:	6043      	str	r3, [r0, #4]
	config->pin_number_pad1 = PIN_LP_GPIO_9;
100083c4:	3301      	adds	r3, #1
100083c6:	60c3      	str	r3, [r0, #12]
	config->pinmux_sel_pad0 = MUX_LP_GPIO_8_I2C0_SDA;
100083c8:	3b07      	subs	r3, #7
100083ca:	6083      	str	r3, [r0, #8]
	config->pinmux_sel_pad1 = MUX_LP_GPIO_9_I2C0_SCL;
100083cc:	6103      	str	r3, [r0, #16]
}
100083ce:	4770      	bx	lr

100083d0 <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		I2c *const hw,
		const struct i2c_master_config *const config)
{
100083d0:	b570      	push	{r4, r5, r6, lr}
100083d2:	0004      	movs	r4, r0
100083d4:	0015      	movs	r5, r2
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(config);
	
	module->hw = hw;
100083d6:	6001      	str	r1, [r0, #0]

	/* Sanity check arguments. */
	if ((module == NULL) || (config == NULL))
100083d8:	2800      	cmp	r0, #0
100083da:	d026      	beq.n	1000842a <i2c_master_init+0x5a>
100083dc:	2a00      	cmp	r2, #0
100083de:	d026      	beq.n	1000842e <i2c_master_init+0x5e>
100083e0:	2228      	movs	r2, #40	; 0x28
100083e2:	5c8b      	ldrb	r3, [r1, r2]
100083e4:	07db      	lsls	r3, r3, #31
100083e6:	d4fc      	bmi.n	100083e2 <i2c_master_init+0x12>
 *
 */
static inline void i2c_disable(I2c *const i2c_module)
{
	i2c_wait_for_idle(i2c_module);
	i2c_module->I2C_MODULE_ENABLE.reg = 0;
100083e8:	2300      	movs	r3, #0
100083ea:	750b      	strb	r3, [r1, #20]
		return STATUS_ERR_INVALID_ARG;

	i2c_disable(module->hw);
	if (module->hw == I2C0) {
100083ec:	6823      	ldr	r3, [r4, #0]
100083ee:	4a11      	ldr	r2, [pc, #68]	; (10008434 <i2c_master_init+0x64>)
100083f0:	4293      	cmp	r3, r2
100083f2:	d103      	bne.n	100083fc <i2c_master_init+0x2c>
		system_peripheral_reset(PERIPHERAL_I2C0_CORE);
100083f4:	2003      	movs	r0, #3
100083f6:	4b10      	ldr	r3, [pc, #64]	; (10008438 <i2c_master_init+0x68>)
100083f8:	4798      	blx	r3
100083fa:	e006      	b.n	1000840a <i2c_master_init+0x3a>
	} else if (module->hw == I2C1) {
		system_peripheral_reset(PERIPHERAL_I2C1_CORE);
	} else {
		return STATUS_ERR_INVALID_ARG;
100083fc:	2017      	movs	r0, #23
		return STATUS_ERR_INVALID_ARG;

	i2c_disable(module->hw);
	if (module->hw == I2C0) {
		system_peripheral_reset(PERIPHERAL_I2C0_CORE);
	} else if (module->hw == I2C1) {
100083fe:	4a0f      	ldr	r2, [pc, #60]	; (1000843c <i2c_master_init+0x6c>)
10008400:	4293      	cmp	r3, r2
10008402:	d115      	bne.n	10008430 <i2c_master_init+0x60>
		system_peripheral_reset(PERIPHERAL_I2C1_CORE);
10008404:	3002      	adds	r0, #2
10008406:	4b0c      	ldr	r3, [pc, #48]	; (10008438 <i2c_master_init+0x68>)
10008408:	4798      	blx	r3
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(config);

	I2c *const i2c_module = (module->hw);
1000840a:	6824      	ldr	r4, [r4, #0]

	/* Set the pinmux for this i2c module. */
	gpio_pinmux_cofiguration(config->pin_number_pad0, (uint16_t)(config->pinmux_sel_pad0));
1000840c:	8929      	ldrh	r1, [r5, #8]
1000840e:	7928      	ldrb	r0, [r5, #4]
10008410:	4e0b      	ldr	r6, [pc, #44]	; (10008440 <i2c_master_init+0x70>)
10008412:	47b0      	blx	r6
	gpio_pinmux_cofiguration(config->pin_number_pad1, (uint16_t)(config->pinmux_sel_pad1));
10008414:	8a29      	ldrh	r1, [r5, #16]
10008416:	7b28      	ldrb	r0, [r5, #12]
10008418:	47b0      	blx	r6
	/* Set clock. */
	i2c_module->CLOCK_SOURCE_SELECT.reg = config->clock_source;
1000841a:	782b      	ldrb	r3, [r5, #0]
1000841c:	7423      	strb	r3, [r4, #16]
	i2c_module->I2C_CLK_DIVIDER.reg = I2C_CLK_DIVIDER_I2C_DIVIDE_RATIO(config->clock_divider);
1000841e:	886b      	ldrh	r3, [r5, #2]
10008420:	8323      	strh	r3, [r4, #24]
	/* Enable master mode. */
	i2c_module->I2C_MASTER_MODE.reg = I2C_MASTER_MODE_MASTER_ENABLE_1;
10008422:	2301      	movs	r3, #1
10008424:	7723      	strb	r3, [r4, #28]
#endif

	/* Set config and return status. */
	_i2c_master_set_config(module, config);

	return STATUS_OK;
10008426:	2000      	movs	r0, #0
10008428:	e002      	b.n	10008430 <i2c_master_init+0x60>
	
	module->hw = hw;

	/* Sanity check arguments. */
	if ((module == NULL) || (config == NULL))
		return STATUS_ERR_INVALID_ARG;
1000842a:	2017      	movs	r0, #23
1000842c:	e000      	b.n	10008430 <i2c_master_init+0x60>
1000842e:	2017      	movs	r0, #23

	/* Set config and return status. */
	_i2c_master_set_config(module, config);

	return STATUS_OK;
}
10008430:	bd70      	pop	{r4, r5, r6, pc}
10008432:	46c0      	nop			; (mov r8, r8)
10008434:	40003000 	.word	0x40003000
10008438:	1000cedd 	.word	0x1000cedd
1000843c:	40003400 	.word	0x40003400
10008440:	1000c465 	.word	0x1000c465

10008444 <i2c_master_read_packet_wait>:
 * \retval STATUS_BUSY                  If module has a pending request.
 */
enum status_code i2c_master_read_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
10008444:	b510      	push	{r4, lr}
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL))
10008446:	2800      	cmp	r0, #0
10008448:	d008      	beq.n	1000845c <i2c_master_read_packet_wait+0x18>
		return STATUS_ERR_INVALID_ARG;
1000844a:	2317      	movs	r3, #23
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL))
1000844c:	2900      	cmp	r1, #0
1000844e:	d006      	beq.n	1000845e <i2c_master_read_packet_wait+0x1a>
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->no_stop = false;
10008450:	2300      	movs	r3, #0
10008452:	7143      	strb	r3, [r0, #5]

	return _i2c_master_read_packet(module, packet);
10008454:	4b03      	ldr	r3, [pc, #12]	; (10008464 <i2c_master_read_packet_wait+0x20>)
10008456:	4798      	blx	r3
10008458:	0003      	movs	r3, r0
1000845a:	e000      	b.n	1000845e <i2c_master_read_packet_wait+0x1a>
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL))
		return STATUS_ERR_INVALID_ARG;
1000845c:	2317      	movs	r3, #23
#endif

	module->no_stop = false;

	return _i2c_master_read_packet(module, packet);
}
1000845e:	0018      	movs	r0, r3
10008460:	bd10      	pop	{r4, pc}
10008462:	46c0      	nop			; (mov r8, r8)
10008464:	1000828d 	.word	0x1000828d

10008468 <i2c_master_write_packet_wait>:
 * \retval STATUS_BUSY                  If module has a pending request.
 */
enum status_code i2c_master_write_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
10008468:	b510      	push	{r4, lr}
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if ((module == NULL) || (packet == NULL)) {
1000846a:	2800      	cmp	r0, #0
1000846c:	d008      	beq.n	10008480 <i2c_master_write_packet_wait+0x18>
		return STATUS_ERR_INVALID_ARG;
1000846e:	2317      	movs	r3, #23
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if ((module == NULL) || (packet == NULL)) {
10008470:	2900      	cmp	r1, #0
10008472:	d006      	beq.n	10008482 <i2c_master_write_packet_wait+0x1a>
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->no_stop = false;
10008474:	2300      	movs	r3, #0
10008476:	7143      	strb	r3, [r0, #5]

	return _i2c_master_write_packet(module, packet);
10008478:	4b03      	ldr	r3, [pc, #12]	; (10008488 <i2c_master_write_packet_wait+0x20>)
1000847a:	4798      	blx	r3
1000847c:	0003      	movs	r3, r0
1000847e:	e000      	b.n	10008482 <i2c_master_write_packet_wait+0x1a>
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if ((module == NULL) || (packet == NULL)) {
		return STATUS_ERR_INVALID_ARG;
10008480:	2317      	movs	r3, #23
#endif

	module->no_stop = false;

	return _i2c_master_write_packet(module, packet);
}
10008482:	0018      	movs	r0, r3
10008484:	bd10      	pop	{r4, pc}
10008486:	46c0      	nop			; (mov r8, r8)
10008488:	10008325 	.word	0x10008325

1000848c <i2c_master_write_packet_wait_no_stop>:
 * \retval STATUS_BUSY                  If module has a pending request.
 */
enum status_code i2c_master_write_packet_wait_no_stop(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
1000848c:	b510      	push	{r4, lr}
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL)) {
1000848e:	2800      	cmp	r0, #0
10008490:	d008      	beq.n	100084a4 <i2c_master_write_packet_wait_no_stop+0x18>
		return STATUS_ERR_INVALID_ARG;
10008492:	2317      	movs	r3, #23
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL)) {
10008494:	2900      	cmp	r1, #0
10008496:	d006      	beq.n	100084a6 <i2c_master_write_packet_wait_no_stop+0x1a>
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->no_stop = true;
10008498:	3b16      	subs	r3, #22
1000849a:	7143      	strb	r3, [r0, #5]

	return _i2c_master_write_packet(module, packet);
1000849c:	4b03      	ldr	r3, [pc, #12]	; (100084ac <i2c_master_write_packet_wait_no_stop+0x20>)
1000849e:	4798      	blx	r3
100084a0:	0003      	movs	r3, r0
100084a2:	e000      	b.n	100084a6 <i2c_master_write_packet_wait_no_stop+0x1a>
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL)) {
		return STATUS_ERR_INVALID_ARG;
100084a4:	2317      	movs	r3, #23
#endif

	module->no_stop = true;

	return _i2c_master_write_packet(module, packet);
}
100084a6:	0018      	movs	r0, r3
100084a8:	bd10      	pop	{r4, pc}
100084aa:	46c0      	nop			; (mov r8, r8)
100084ac:	10008325 	.word	0x10008325

100084b0 <set_int_enable>:
 *  interrupt is used.
 *  @param[in]  enable      1 to enable interrupt.
 *  @return     0 if successful.
 */
static int set_int_enable(unsigned char enable)
{
100084b0:	b510      	push	{r4, lr}
100084b2:	b082      	sub	sp, #8
    unsigned char tmp;

    if (st.chip_cfg.dmp_on) {
100084b4:	2324      	movs	r3, #36	; 0x24
100084b6:	4a25      	ldr	r2, [pc, #148]	; (1000854c <set_int_enable+0x9c>)
100084b8:	5cd3      	ldrb	r3, [r2, r3]
100084ba:	2b00      	cmp	r3, #0
100084bc:	d019      	beq.n	100084f2 <set_int_enable+0x42>
        if (enable)
100084be:	2800      	cmp	r0, #0
100084c0:	d003      	beq.n	100084ca <set_int_enable+0x1a>
            tmp = BIT_DMP_INT_EN;
100084c2:	2202      	movs	r2, #2
100084c4:	466b      	mov	r3, sp
100084c6:	71da      	strb	r2, [r3, #7]
100084c8:	e002      	b.n	100084d0 <set_int_enable+0x20>
        else
            tmp = 0x00;
100084ca:	2200      	movs	r2, #0
100084cc:	466b      	mov	r3, sp
100084ce:	71da      	strb	r2, [r3, #7]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
100084d0:	4b1e      	ldr	r3, [pc, #120]	; (1000854c <set_int_enable+0x9c>)
100084d2:	681a      	ldr	r2, [r3, #0]
100084d4:	7c51      	ldrb	r1, [r2, #17]
100084d6:	685b      	ldr	r3, [r3, #4]
100084d8:	7818      	ldrb	r0, [r3, #0]
100084da:	466b      	mov	r3, sp
100084dc:	3307      	adds	r3, #7
100084de:	2201      	movs	r2, #1
100084e0:	4c1b      	ldr	r4, [pc, #108]	; (10008550 <set_int_enable+0xa0>)
100084e2:	47a0      	blx	r4
100084e4:	2800      	cmp	r0, #0
100084e6:	d127      	bne.n	10008538 <set_int_enable+0x88>
            return -1;
        st.chip_cfg.int_enable = tmp;
100084e8:	466b      	mov	r3, sp
100084ea:	79da      	ldrb	r2, [r3, #7]
100084ec:	4b17      	ldr	r3, [pc, #92]	; (1000854c <set_int_enable+0x9c>)
100084ee:	745a      	strb	r2, [r3, #17]
100084f0:	e02a      	b.n	10008548 <set_int_enable+0x98>
    } else {
        if (!st.chip_cfg.sensors)
100084f2:	4b16      	ldr	r3, [pc, #88]	; (1000854c <set_int_enable+0x9c>)
100084f4:	7a9b      	ldrb	r3, [r3, #10]
100084f6:	2b00      	cmp	r3, #0
100084f8:	d021      	beq.n	1000853e <set_int_enable+0x8e>
            return -1;
        if (enable && st.chip_cfg.int_enable)
100084fa:	2800      	cmp	r0, #0
100084fc:	d008      	beq.n	10008510 <set_int_enable+0x60>
100084fe:	4b13      	ldr	r3, [pc, #76]	; (1000854c <set_int_enable+0x9c>)
10008500:	7c5b      	ldrb	r3, [r3, #17]
            return 0;
10008502:	2000      	movs	r0, #0
            return -1;
        st.chip_cfg.int_enable = tmp;
    } else {
        if (!st.chip_cfg.sensors)
            return -1;
        if (enable && st.chip_cfg.int_enable)
10008504:	2b00      	cmp	r3, #0
10008506:	d11f      	bne.n	10008548 <set_int_enable+0x98>
            return 0;
        if (enable)
            tmp = BIT_DATA_RDY_EN;
10008508:	2201      	movs	r2, #1
1000850a:	466b      	mov	r3, sp
1000850c:	71da      	strb	r2, [r3, #7]
1000850e:	e002      	b.n	10008516 <set_int_enable+0x66>
        else
            tmp = 0x00;
10008510:	2200      	movs	r2, #0
10008512:	466b      	mov	r3, sp
10008514:	71da      	strb	r2, [r3, #7]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
10008516:	4b0d      	ldr	r3, [pc, #52]	; (1000854c <set_int_enable+0x9c>)
10008518:	681a      	ldr	r2, [r3, #0]
1000851a:	7c51      	ldrb	r1, [r2, #17]
1000851c:	685b      	ldr	r3, [r3, #4]
1000851e:	7818      	ldrb	r0, [r3, #0]
10008520:	466b      	mov	r3, sp
10008522:	3307      	adds	r3, #7
10008524:	2201      	movs	r2, #1
10008526:	4c0a      	ldr	r4, [pc, #40]	; (10008550 <set_int_enable+0xa0>)
10008528:	47a0      	blx	r4
1000852a:	2800      	cmp	r0, #0
1000852c:	d10a      	bne.n	10008544 <set_int_enable+0x94>
            return -1;
        st.chip_cfg.int_enable = tmp;
1000852e:	466b      	mov	r3, sp
10008530:	79da      	ldrb	r2, [r3, #7]
10008532:	4b06      	ldr	r3, [pc, #24]	; (1000854c <set_int_enable+0x9c>)
10008534:	745a      	strb	r2, [r3, #17]
10008536:	e007      	b.n	10008548 <set_int_enable+0x98>
        if (enable)
            tmp = BIT_DMP_INT_EN;
        else
            tmp = 0x00;
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
            return -1;
10008538:	2001      	movs	r0, #1
1000853a:	4240      	negs	r0, r0
1000853c:	e004      	b.n	10008548 <set_int_enable+0x98>
        st.chip_cfg.int_enable = tmp;
    } else {
        if (!st.chip_cfg.sensors)
            return -1;
1000853e:	2001      	movs	r0, #1
10008540:	4240      	negs	r0, r0
10008542:	e001      	b.n	10008548 <set_int_enable+0x98>
        if (enable)
            tmp = BIT_DATA_RDY_EN;
        else
            tmp = 0x00;
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
            return -1;
10008544:	2001      	movs	r0, #1
10008546:	4240      	negs	r0, r0
        st.chip_cfg.int_enable = tmp;
    }
    return 0;
}
10008548:	b002      	add	sp, #8
1000854a:	bd10      	pop	{r4, pc}
1000854c:	10018608 	.word	0x10018608
10008550:	1000aab9 	.word	0x1000aab9

10008554 <mpu_get_temperature>:
 *  @param[out] data        Data in q16 format.
 *  @param[out] timestamp   Timestamp in milliseconds. Null if not needed.
 *  @return     0 if successful.
 */
int mpu_get_temperature(long *data, unsigned long *timestamp)
{
10008554:	b5f0      	push	{r4, r5, r6, r7, lr}
10008556:	b085      	sub	sp, #20
10008558:	0007      	movs	r7, r0
1000855a:	000e      	movs	r6, r1
    unsigned char tmp[2];
    short raw;

    if (!(st.chip_cfg.sensors))
1000855c:	4b21      	ldr	r3, [pc, #132]	; (100085e4 <mpu_get_temperature+0x90>)
1000855e:	7a9b      	ldrb	r3, [r3, #10]
10008560:	2b00      	cmp	r3, #0
10008562:	d035      	beq.n	100085d0 <mpu_get_temperature+0x7c>
        return -1;

    if (i2c_read(st.hw->addr, st.reg->temp, 2, tmp))
10008564:	4b1f      	ldr	r3, [pc, #124]	; (100085e4 <mpu_get_temperature+0x90>)
10008566:	681a      	ldr	r2, [r3, #0]
10008568:	7c11      	ldrb	r1, [r2, #16]
1000856a:	685b      	ldr	r3, [r3, #4]
1000856c:	7818      	ldrb	r0, [r3, #0]
1000856e:	ab03      	add	r3, sp, #12
10008570:	2202      	movs	r2, #2
10008572:	4c1d      	ldr	r4, [pc, #116]	; (100085e8 <mpu_get_temperature+0x94>)
10008574:	47a0      	blx	r4
10008576:	9001      	str	r0, [sp, #4]
10008578:	2800      	cmp	r0, #0
1000857a:	d12d      	bne.n	100085d8 <mpu_get_temperature+0x84>
        return -1;
    raw = (tmp[0] << 8) | tmp[1];
1000857c:	ab03      	add	r3, sp, #12
1000857e:	781c      	ldrb	r4, [r3, #0]
10008580:	0224      	lsls	r4, r4, #8
10008582:	785b      	ldrb	r3, [r3, #1]
10008584:	431c      	orrs	r4, r3
10008586:	b224      	sxth	r4, r4
    if (timestamp)
10008588:	2e00      	cmp	r6, #0
1000858a:	d002      	beq.n	10008592 <mpu_get_temperature+0x3e>
        get_ms(timestamp);
1000858c:	0030      	movs	r0, r6
1000858e:	4b17      	ldr	r3, [pc, #92]	; (100085ec <mpu_get_temperature+0x98>)
10008590:	4798      	blx	r3

    data[0] = (long)((35 + ((raw - (float)st.hw->temp_offset) / st.hw->temp_sens)) * 65536L);
10008592:	4b14      	ldr	r3, [pc, #80]	; (100085e4 <mpu_get_temperature+0x90>)
10008594:	685d      	ldr	r5, [r3, #4]
10008596:	4e16      	ldr	r6, [pc, #88]	; (100085f0 <mpu_get_temperature+0x9c>)
10008598:	0020      	movs	r0, r4
1000859a:	47b0      	blx	r6
1000859c:	1c04      	adds	r4, r0, #0
1000859e:	2308      	movs	r3, #8
100085a0:	5ee8      	ldrsh	r0, [r5, r3]
100085a2:	47b0      	blx	r6
100085a4:	1c01      	adds	r1, r0, #0
100085a6:	1c20      	adds	r0, r4, #0
100085a8:	4b12      	ldr	r3, [pc, #72]	; (100085f4 <mpu_get_temperature+0xa0>)
100085aa:	4798      	blx	r3
100085ac:	1c04      	adds	r4, r0, #0
100085ae:	88e8      	ldrh	r0, [r5, #6]
100085b0:	47b0      	blx	r6
100085b2:	1c01      	adds	r1, r0, #0
100085b4:	1c20      	adds	r0, r4, #0
100085b6:	4b10      	ldr	r3, [pc, #64]	; (100085f8 <mpu_get_temperature+0xa4>)
100085b8:	4798      	blx	r3
100085ba:	4910      	ldr	r1, [pc, #64]	; (100085fc <mpu_get_temperature+0xa8>)
100085bc:	4b10      	ldr	r3, [pc, #64]	; (10008600 <mpu_get_temperature+0xac>)
100085be:	4798      	blx	r3
100085c0:	218f      	movs	r1, #143	; 0x8f
100085c2:	05c9      	lsls	r1, r1, #23
100085c4:	4b0f      	ldr	r3, [pc, #60]	; (10008604 <mpu_get_temperature+0xb0>)
100085c6:	4798      	blx	r3
100085c8:	4b0f      	ldr	r3, [pc, #60]	; (10008608 <mpu_get_temperature+0xb4>)
100085ca:	4798      	blx	r3
100085cc:	6038      	str	r0, [r7, #0]
    return 0;
100085ce:	e006      	b.n	100085de <mpu_get_temperature+0x8a>
{
    unsigned char tmp[2];
    short raw;

    if (!(st.chip_cfg.sensors))
        return -1;
100085d0:	2301      	movs	r3, #1
100085d2:	425b      	negs	r3, r3
100085d4:	9301      	str	r3, [sp, #4]
100085d6:	e002      	b.n	100085de <mpu_get_temperature+0x8a>

    if (i2c_read(st.hw->addr, st.reg->temp, 2, tmp))
        return -1;
100085d8:	2301      	movs	r3, #1
100085da:	425b      	negs	r3, r3
100085dc:	9301      	str	r3, [sp, #4]
    if (timestamp)
        get_ms(timestamp);

    data[0] = (long)((35 + ((raw - (float)st.hw->temp_offset) / st.hw->temp_sens)) * 65536L);
    return 0;
}
100085de:	9801      	ldr	r0, [sp, #4]
100085e0:	b005      	add	sp, #20
100085e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
100085e4:	10018608 	.word	0x10018608
100085e8:	1000ab59 	.word	0x1000ab59
100085ec:	1000b661 	.word	0x1000b661
100085f0:	100141cd 	.word	0x100141cd
100085f4:	10013e7d 	.word	0x10013e7d
100085f8:	100138c1 	.word	0x100138c1
100085fc:	420c0000 	.word	0x420c0000
10008600:	100135d5 	.word	0x100135d5
10008604:	10013c55 	.word	0x10013c55
10008608:	10014189 	.word	0x10014189

1000860c <mpu_reset_fifo>:
/**
 *  @brief  Reset FIFO read/write pointers.
 *  @return 0 if successful.
 */
int mpu_reset_fifo(void)
{
1000860c:	b510      	push	{r4, lr}
1000860e:	b082      	sub	sp, #8
    unsigned char data;

    if (!(st.chip_cfg.sensors))
10008610:	4b79      	ldr	r3, [pc, #484]	; (100087f8 <mpu_reset_fifo+0x1ec>)
10008612:	7a9b      	ldrb	r3, [r3, #10]
10008614:	2b00      	cmp	r3, #0
10008616:	d100      	bne.n	1000861a <mpu_reset_fifo+0xe>
10008618:	e0ce      	b.n	100087b8 <mpu_reset_fifo+0x1ac>
        return -1;

    data = 0;
1000861a:	466b      	mov	r3, sp
1000861c:	3307      	adds	r3, #7
1000861e:	2200      	movs	r2, #0
10008620:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
10008622:	4a75      	ldr	r2, [pc, #468]	; (100087f8 <mpu_reset_fifo+0x1ec>)
10008624:	6811      	ldr	r1, [r2, #0]
10008626:	7c49      	ldrb	r1, [r1, #17]
10008628:	6852      	ldr	r2, [r2, #4]
1000862a:	7810      	ldrb	r0, [r2, #0]
1000862c:	2201      	movs	r2, #1
1000862e:	4c73      	ldr	r4, [pc, #460]	; (100087fc <mpu_reset_fifo+0x1f0>)
10008630:	47a0      	blx	r4
10008632:	2800      	cmp	r0, #0
10008634:	d000      	beq.n	10008638 <mpu_reset_fifo+0x2c>
10008636:	e0c2      	b.n	100087be <mpu_reset_fifo+0x1b2>
        return -1;
    if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
10008638:	4b6f      	ldr	r3, [pc, #444]	; (100087f8 <mpu_reset_fifo+0x1ec>)
1000863a:	681a      	ldr	r2, [r3, #0]
1000863c:	7951      	ldrb	r1, [r2, #5]
1000863e:	685b      	ldr	r3, [r3, #4]
10008640:	7818      	ldrb	r0, [r3, #0]
10008642:	466b      	mov	r3, sp
10008644:	3307      	adds	r3, #7
10008646:	2201      	movs	r2, #1
10008648:	4c6c      	ldr	r4, [pc, #432]	; (100087fc <mpu_reset_fifo+0x1f0>)
1000864a:	47a0      	blx	r4
1000864c:	2800      	cmp	r0, #0
1000864e:	d000      	beq.n	10008652 <mpu_reset_fifo+0x46>
10008650:	e0b8      	b.n	100087c4 <mpu_reset_fifo+0x1b8>
        return -1;
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
10008652:	4b69      	ldr	r3, [pc, #420]	; (100087f8 <mpu_reset_fifo+0x1ec>)
10008654:	681a      	ldr	r2, [r3, #0]
10008656:	7911      	ldrb	r1, [r2, #4]
10008658:	685b      	ldr	r3, [r3, #4]
1000865a:	7818      	ldrb	r0, [r3, #0]
1000865c:	466b      	mov	r3, sp
1000865e:	3307      	adds	r3, #7
10008660:	2201      	movs	r2, #1
10008662:	4c66      	ldr	r4, [pc, #408]	; (100087fc <mpu_reset_fifo+0x1f0>)
10008664:	47a0      	blx	r4
10008666:	2800      	cmp	r0, #0
10008668:	d000      	beq.n	1000866c <mpu_reset_fifo+0x60>
1000866a:	e0ae      	b.n	100087ca <mpu_reset_fifo+0x1be>
        return -1;

    if (st.chip_cfg.dmp_on) {
1000866c:	2324      	movs	r3, #36	; 0x24
1000866e:	4a62      	ldr	r2, [pc, #392]	; (100087f8 <mpu_reset_fifo+0x1ec>)
10008670:	5cd3      	ldrb	r3, [r2, r3]
10008672:	2b00      	cmp	r3, #0
10008674:	d04f      	beq.n	10008716 <mpu_reset_fifo+0x10a>
        data = BIT_FIFO_RST | BIT_DMP_RST;
10008676:	466b      	mov	r3, sp
10008678:	3307      	adds	r3, #7
1000867a:	220c      	movs	r2, #12
1000867c:	701a      	strb	r2, [r3, #0]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
1000867e:	4a5e      	ldr	r2, [pc, #376]	; (100087f8 <mpu_reset_fifo+0x1ec>)
10008680:	6811      	ldr	r1, [r2, #0]
10008682:	7909      	ldrb	r1, [r1, #4]
10008684:	6852      	ldr	r2, [r2, #4]
10008686:	7810      	ldrb	r0, [r2, #0]
10008688:	2201      	movs	r2, #1
1000868a:	4c5c      	ldr	r4, [pc, #368]	; (100087fc <mpu_reset_fifo+0x1f0>)
1000868c:	47a0      	blx	r4
1000868e:	2800      	cmp	r0, #0
10008690:	d000      	beq.n	10008694 <mpu_reset_fifo+0x88>
10008692:	e09d      	b.n	100087d0 <mpu_reset_fifo+0x1c4>
            return -1;
        delay_ms(50);
10008694:	3032      	adds	r0, #50	; 0x32
10008696:	4b5a      	ldr	r3, [pc, #360]	; (10008800 <mpu_reset_fifo+0x1f4>)
10008698:	4798      	blx	r3
        data = BIT_DMP_EN | BIT_FIFO_EN;
1000869a:	22c0      	movs	r2, #192	; 0xc0
1000869c:	466b      	mov	r3, sp
1000869e:	71da      	strb	r2, [r3, #7]
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
100086a0:	4b55      	ldr	r3, [pc, #340]	; (100087f8 <mpu_reset_fifo+0x1ec>)
100086a2:	7a9b      	ldrb	r3, [r3, #10]
100086a4:	07db      	lsls	r3, r3, #31
100086a6:	d502      	bpl.n	100086ae <mpu_reset_fifo+0xa2>
            data |= BIT_AUX_IF_EN;
100086a8:	3220      	adds	r2, #32
100086aa:	466b      	mov	r3, sp
100086ac:	71da      	strb	r2, [r3, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
100086ae:	4b52      	ldr	r3, [pc, #328]	; (100087f8 <mpu_reset_fifo+0x1ec>)
100086b0:	681a      	ldr	r2, [r3, #0]
100086b2:	7911      	ldrb	r1, [r2, #4]
100086b4:	685b      	ldr	r3, [r3, #4]
100086b6:	7818      	ldrb	r0, [r3, #0]
100086b8:	466b      	mov	r3, sp
100086ba:	3307      	adds	r3, #7
100086bc:	2201      	movs	r2, #1
100086be:	4c4f      	ldr	r4, [pc, #316]	; (100087fc <mpu_reset_fifo+0x1f0>)
100086c0:	47a0      	blx	r4
100086c2:	2800      	cmp	r0, #0
100086c4:	d000      	beq.n	100086c8 <mpu_reset_fifo+0xbc>
100086c6:	e086      	b.n	100087d6 <mpu_reset_fifo+0x1ca>
            return -1;
        if (st.chip_cfg.int_enable)
100086c8:	4b4b      	ldr	r3, [pc, #300]	; (100087f8 <mpu_reset_fifo+0x1ec>)
100086ca:	7c5b      	ldrb	r3, [r3, #17]
100086cc:	2b00      	cmp	r3, #0
100086ce:	d003      	beq.n	100086d8 <mpu_reset_fifo+0xcc>
            data = BIT_DMP_INT_EN;
100086d0:	2202      	movs	r2, #2
100086d2:	466b      	mov	r3, sp
100086d4:	71da      	strb	r2, [r3, #7]
100086d6:	e002      	b.n	100086de <mpu_reset_fifo+0xd2>
        else
            data = 0;
100086d8:	2200      	movs	r2, #0
100086da:	466b      	mov	r3, sp
100086dc:	71da      	strb	r2, [r3, #7]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
100086de:	4b46      	ldr	r3, [pc, #280]	; (100087f8 <mpu_reset_fifo+0x1ec>)
100086e0:	681a      	ldr	r2, [r3, #0]
100086e2:	7c51      	ldrb	r1, [r2, #17]
100086e4:	685b      	ldr	r3, [r3, #4]
100086e6:	7818      	ldrb	r0, [r3, #0]
100086e8:	466b      	mov	r3, sp
100086ea:	3307      	adds	r3, #7
100086ec:	2201      	movs	r2, #1
100086ee:	4c43      	ldr	r4, [pc, #268]	; (100087fc <mpu_reset_fifo+0x1f0>)
100086f0:	47a0      	blx	r4
100086f2:	2800      	cmp	r0, #0
100086f4:	d172      	bne.n	100087dc <mpu_reset_fifo+0x1d0>
            return -1;
        data = 0;
100086f6:	466b      	mov	r3, sp
100086f8:	3307      	adds	r3, #7
100086fa:	2200      	movs	r2, #0
100086fc:	701a      	strb	r2, [r3, #0]
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
100086fe:	4a3e      	ldr	r2, [pc, #248]	; (100087f8 <mpu_reset_fifo+0x1ec>)
10008700:	6811      	ldr	r1, [r2, #0]
10008702:	7949      	ldrb	r1, [r1, #5]
10008704:	6852      	ldr	r2, [r2, #4]
10008706:	7810      	ldrb	r0, [r2, #0]
10008708:	2201      	movs	r2, #1
1000870a:	4c3c      	ldr	r4, [pc, #240]	; (100087fc <mpu_reset_fifo+0x1f0>)
1000870c:	47a0      	blx	r4
1000870e:	1e43      	subs	r3, r0, #1
10008710:	4198      	sbcs	r0, r3
10008712:	4240      	negs	r0, r0
10008714:	e06d      	b.n	100087f2 <mpu_reset_fifo+0x1e6>
            return -1;
    } else {
        data = BIT_FIFO_RST;
10008716:	466b      	mov	r3, sp
10008718:	3307      	adds	r3, #7
1000871a:	2204      	movs	r2, #4
1000871c:	701a      	strb	r2, [r3, #0]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
1000871e:	4a36      	ldr	r2, [pc, #216]	; (100087f8 <mpu_reset_fifo+0x1ec>)
10008720:	6811      	ldr	r1, [r2, #0]
10008722:	7909      	ldrb	r1, [r1, #4]
10008724:	6852      	ldr	r2, [r2, #4]
10008726:	7810      	ldrb	r0, [r2, #0]
10008728:	2201      	movs	r2, #1
1000872a:	4c34      	ldr	r4, [pc, #208]	; (100087fc <mpu_reset_fifo+0x1f0>)
1000872c:	47a0      	blx	r4
1000872e:	2800      	cmp	r0, #0
10008730:	d157      	bne.n	100087e2 <mpu_reset_fifo+0x1d6>
            return -1;
        if (st.chip_cfg.bypass_mode || !(st.chip_cfg.sensors & INV_XYZ_COMPASS))
10008732:	4b31      	ldr	r3, [pc, #196]	; (100087f8 <mpu_reset_fifo+0x1ec>)
10008734:	7c9b      	ldrb	r3, [r3, #18]
10008736:	2b00      	cmp	r3, #0
10008738:	d103      	bne.n	10008742 <mpu_reset_fifo+0x136>
1000873a:	4b2f      	ldr	r3, [pc, #188]	; (100087f8 <mpu_reset_fifo+0x1ec>)
1000873c:	7a9b      	ldrb	r3, [r3, #10]
1000873e:	07db      	lsls	r3, r3, #31
10008740:	d403      	bmi.n	1000874a <mpu_reset_fifo+0x13e>
            data = BIT_FIFO_EN;
10008742:	2240      	movs	r2, #64	; 0x40
10008744:	466b      	mov	r3, sp
10008746:	71da      	strb	r2, [r3, #7]
10008748:	e002      	b.n	10008750 <mpu_reset_fifo+0x144>
        else
            data = BIT_FIFO_EN | BIT_AUX_IF_EN;
1000874a:	2260      	movs	r2, #96	; 0x60
1000874c:	466b      	mov	r3, sp
1000874e:	71da      	strb	r2, [r3, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
10008750:	4b29      	ldr	r3, [pc, #164]	; (100087f8 <mpu_reset_fifo+0x1ec>)
10008752:	681a      	ldr	r2, [r3, #0]
10008754:	7911      	ldrb	r1, [r2, #4]
10008756:	685b      	ldr	r3, [r3, #4]
10008758:	7818      	ldrb	r0, [r3, #0]
1000875a:	466b      	mov	r3, sp
1000875c:	3307      	adds	r3, #7
1000875e:	2201      	movs	r2, #1
10008760:	4c26      	ldr	r4, [pc, #152]	; (100087fc <mpu_reset_fifo+0x1f0>)
10008762:	47a0      	blx	r4
10008764:	2800      	cmp	r0, #0
10008766:	d13f      	bne.n	100087e8 <mpu_reset_fifo+0x1dc>
            return -1;
        delay_ms(50);
10008768:	3032      	adds	r0, #50	; 0x32
1000876a:	4b25      	ldr	r3, [pc, #148]	; (10008800 <mpu_reset_fifo+0x1f4>)
1000876c:	4798      	blx	r3
        if (st.chip_cfg.int_enable)
1000876e:	4b22      	ldr	r3, [pc, #136]	; (100087f8 <mpu_reset_fifo+0x1ec>)
10008770:	7c5b      	ldrb	r3, [r3, #17]
10008772:	2b00      	cmp	r3, #0
10008774:	d003      	beq.n	1000877e <mpu_reset_fifo+0x172>
            data = BIT_DATA_RDY_EN;
10008776:	2201      	movs	r2, #1
10008778:	466b      	mov	r3, sp
1000877a:	71da      	strb	r2, [r3, #7]
1000877c:	e002      	b.n	10008784 <mpu_reset_fifo+0x178>
        else
            data = 0;
1000877e:	2200      	movs	r2, #0
10008780:	466b      	mov	r3, sp
10008782:	71da      	strb	r2, [r3, #7]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
10008784:	4b1c      	ldr	r3, [pc, #112]	; (100087f8 <mpu_reset_fifo+0x1ec>)
10008786:	681a      	ldr	r2, [r3, #0]
10008788:	7c51      	ldrb	r1, [r2, #17]
1000878a:	685b      	ldr	r3, [r3, #4]
1000878c:	7818      	ldrb	r0, [r3, #0]
1000878e:	466b      	mov	r3, sp
10008790:	3307      	adds	r3, #7
10008792:	2201      	movs	r2, #1
10008794:	4c19      	ldr	r4, [pc, #100]	; (100087fc <mpu_reset_fifo+0x1f0>)
10008796:	47a0      	blx	r4
10008798:	2800      	cmp	r0, #0
1000879a:	d128      	bne.n	100087ee <mpu_reset_fifo+0x1e2>
            return -1;
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &st.chip_cfg.fifo_enable))
1000879c:	4a16      	ldr	r2, [pc, #88]	; (100087f8 <mpu_reset_fifo+0x1ec>)
1000879e:	0013      	movs	r3, r2
100087a0:	3310      	adds	r3, #16
100087a2:	6811      	ldr	r1, [r2, #0]
100087a4:	7949      	ldrb	r1, [r1, #5]
100087a6:	6852      	ldr	r2, [r2, #4]
100087a8:	7810      	ldrb	r0, [r2, #0]
100087aa:	2201      	movs	r2, #1
100087ac:	4c13      	ldr	r4, [pc, #76]	; (100087fc <mpu_reset_fifo+0x1f0>)
100087ae:	47a0      	blx	r4
100087b0:	1e43      	subs	r3, r0, #1
100087b2:	4198      	sbcs	r0, r3
100087b4:	4240      	negs	r0, r0
100087b6:	e01c      	b.n	100087f2 <mpu_reset_fifo+0x1e6>
int mpu_reset_fifo(void)
{
    unsigned char data;

    if (!(st.chip_cfg.sensors))
        return -1;
100087b8:	2001      	movs	r0, #1
100087ba:	4240      	negs	r0, r0
100087bc:	e019      	b.n	100087f2 <mpu_reset_fifo+0x1e6>

    data = 0;
    if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
        return -1;
100087be:	2001      	movs	r0, #1
100087c0:	4240      	negs	r0, r0
100087c2:	e016      	b.n	100087f2 <mpu_reset_fifo+0x1e6>
    if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
        return -1;
100087c4:	2001      	movs	r0, #1
100087c6:	4240      	negs	r0, r0
100087c8:	e013      	b.n	100087f2 <mpu_reset_fifo+0x1e6>
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
        return -1;
100087ca:	2001      	movs	r0, #1
100087cc:	4240      	negs	r0, r0
100087ce:	e010      	b.n	100087f2 <mpu_reset_fifo+0x1e6>

    if (st.chip_cfg.dmp_on) {
        data = BIT_FIFO_RST | BIT_DMP_RST;
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
            return -1;
100087d0:	2001      	movs	r0, #1
100087d2:	4240      	negs	r0, r0
100087d4:	e00d      	b.n	100087f2 <mpu_reset_fifo+0x1e6>
        delay_ms(50);
        data = BIT_DMP_EN | BIT_FIFO_EN;
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
            data |= BIT_AUX_IF_EN;
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
            return -1;
100087d6:	2001      	movs	r0, #1
100087d8:	4240      	negs	r0, r0
100087da:	e00a      	b.n	100087f2 <mpu_reset_fifo+0x1e6>
        if (st.chip_cfg.int_enable)
            data = BIT_DMP_INT_EN;
        else
            data = 0;
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
            return -1;
100087dc:	2001      	movs	r0, #1
100087de:	4240      	negs	r0, r0
100087e0:	e007      	b.n	100087f2 <mpu_reset_fifo+0x1e6>
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
            return -1;
    } else {
        data = BIT_FIFO_RST;
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
            return -1;
100087e2:	2001      	movs	r0, #1
100087e4:	4240      	negs	r0, r0
100087e6:	e004      	b.n	100087f2 <mpu_reset_fifo+0x1e6>
        if (st.chip_cfg.bypass_mode || !(st.chip_cfg.sensors & INV_XYZ_COMPASS))
            data = BIT_FIFO_EN;
        else
            data = BIT_FIFO_EN | BIT_AUX_IF_EN;
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
            return -1;
100087e8:	2001      	movs	r0, #1
100087ea:	4240      	negs	r0, r0
100087ec:	e001      	b.n	100087f2 <mpu_reset_fifo+0x1e6>
        if (st.chip_cfg.int_enable)
            data = BIT_DATA_RDY_EN;
        else
            data = 0;
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
            return -1;
100087ee:	2001      	movs	r0, #1
100087f0:	4240      	negs	r0, r0
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &st.chip_cfg.fifo_enable))
            return -1;
    }
    return 0;
}
100087f2:	b002      	add	sp, #8
100087f4:	bd10      	pop	{r4, pc}
100087f6:	46c0      	nop			; (mov r8, r8)
100087f8:	10018608 	.word	0x10018608
100087fc:	1000aab9 	.word	0x1000aab9
10008800:	10008129 	.word	0x10008129

10008804 <mpu_set_gyro_fsr>:
 *  @brief      Set the gyro full-scale range.
 *  @param[in]  fsr Desired full-scale range.
 *  @return     0 if successful.
 */
int mpu_set_gyro_fsr(unsigned short fsr)
{
10008804:	b510      	push	{r4, lr}
10008806:	b082      	sub	sp, #8
    unsigned char data;

    if (!(st.chip_cfg.sensors))
10008808:	4b24      	ldr	r3, [pc, #144]	; (1000889c <mpu_set_gyro_fsr+0x98>)
1000880a:	7a9b      	ldrb	r3, [r3, #10]
1000880c:	2b00      	cmp	r3, #0
1000880e:	d03b      	beq.n	10008888 <mpu_set_gyro_fsr+0x84>
        return -1;

    switch (fsr) {
10008810:	23fa      	movs	r3, #250	; 0xfa
10008812:	005b      	lsls	r3, r3, #1
10008814:	4298      	cmp	r0, r3
10008816:	d010      	beq.n	1000883a <mpu_set_gyro_fsr+0x36>
10008818:	d802      	bhi.n	10008820 <mpu_set_gyro_fsr+0x1c>
1000881a:	28fa      	cmp	r0, #250	; 0xfa
1000881c:	d009      	beq.n	10008832 <mpu_set_gyro_fsr+0x2e>
1000881e:	e036      	b.n	1000888e <mpu_set_gyro_fsr+0x8a>
10008820:	23fa      	movs	r3, #250	; 0xfa
10008822:	009b      	lsls	r3, r3, #2
10008824:	4298      	cmp	r0, r3
10008826:	d00c      	beq.n	10008842 <mpu_set_gyro_fsr+0x3e>
10008828:	23fa      	movs	r3, #250	; 0xfa
1000882a:	00db      	lsls	r3, r3, #3
1000882c:	4298      	cmp	r0, r3
1000882e:	d00c      	beq.n	1000884a <mpu_set_gyro_fsr+0x46>
10008830:	e02d      	b.n	1000888e <mpu_set_gyro_fsr+0x8a>
    case 250:
        data = INV_FSR_250DPS << 3;
10008832:	2200      	movs	r2, #0
10008834:	466b      	mov	r3, sp
10008836:	71da      	strb	r2, [r3, #7]
        break;
10008838:	e00a      	b.n	10008850 <mpu_set_gyro_fsr+0x4c>
    case 500:
        data = INV_FSR_500DPS << 3;
1000883a:	2208      	movs	r2, #8
1000883c:	466b      	mov	r3, sp
1000883e:	71da      	strb	r2, [r3, #7]
        break;
10008840:	e006      	b.n	10008850 <mpu_set_gyro_fsr+0x4c>
    case 1000:
        data = INV_FSR_1000DPS << 3;
10008842:	2210      	movs	r2, #16
10008844:	466b      	mov	r3, sp
10008846:	71da      	strb	r2, [r3, #7]
        break;
10008848:	e002      	b.n	10008850 <mpu_set_gyro_fsr+0x4c>
    case 2000:
        data = INV_FSR_2000DPS << 3;
1000884a:	2218      	movs	r2, #24
1000884c:	466b      	mov	r3, sp
1000884e:	71da      	strb	r2, [r3, #7]
        break;
    default:
        return -1;
    }

    if (st.chip_cfg.gyro_fsr == (data >> 3))
10008850:	466b      	mov	r3, sp
10008852:	3307      	adds	r3, #7
10008854:	781b      	ldrb	r3, [r3, #0]
10008856:	4a11      	ldr	r2, [pc, #68]	; (1000889c <mpu_set_gyro_fsr+0x98>)
10008858:	7a12      	ldrb	r2, [r2, #8]
1000885a:	08db      	lsrs	r3, r3, #3
        return 0;
1000885c:	2000      	movs	r0, #0
        break;
    default:
        return -1;
    }

    if (st.chip_cfg.gyro_fsr == (data >> 3))
1000885e:	429a      	cmp	r2, r3
10008860:	d01a      	beq.n	10008898 <mpu_set_gyro_fsr+0x94>
        return 0;
    if (i2c_write(st.hw->addr, st.reg->gyro_cfg, 1, &data))
10008862:	4b0e      	ldr	r3, [pc, #56]	; (1000889c <mpu_set_gyro_fsr+0x98>)
10008864:	681a      	ldr	r2, [r3, #0]
10008866:	7991      	ldrb	r1, [r2, #6]
10008868:	685b      	ldr	r3, [r3, #4]
1000886a:	7818      	ldrb	r0, [r3, #0]
1000886c:	466b      	mov	r3, sp
1000886e:	3307      	adds	r3, #7
10008870:	2201      	movs	r2, #1
10008872:	4c0b      	ldr	r4, [pc, #44]	; (100088a0 <mpu_set_gyro_fsr+0x9c>)
10008874:	47a0      	blx	r4
10008876:	2800      	cmp	r0, #0
10008878:	d10c      	bne.n	10008894 <mpu_set_gyro_fsr+0x90>
        return -1;
    st.chip_cfg.gyro_fsr = data >> 3;
1000887a:	466b      	mov	r3, sp
1000887c:	3307      	adds	r3, #7
1000887e:	781b      	ldrb	r3, [r3, #0]
10008880:	08db      	lsrs	r3, r3, #3
10008882:	4a06      	ldr	r2, [pc, #24]	; (1000889c <mpu_set_gyro_fsr+0x98>)
10008884:	7213      	strb	r3, [r2, #8]
    return 0;
10008886:	e007      	b.n	10008898 <mpu_set_gyro_fsr+0x94>
int mpu_set_gyro_fsr(unsigned short fsr)
{
    unsigned char data;

    if (!(st.chip_cfg.sensors))
        return -1;
10008888:	2001      	movs	r0, #1
1000888a:	4240      	negs	r0, r0
1000888c:	e004      	b.n	10008898 <mpu_set_gyro_fsr+0x94>
        break;
    case 2000:
        data = INV_FSR_2000DPS << 3;
        break;
    default:
        return -1;
1000888e:	2001      	movs	r0, #1
10008890:	4240      	negs	r0, r0
10008892:	e001      	b.n	10008898 <mpu_set_gyro_fsr+0x94>
    }

    if (st.chip_cfg.gyro_fsr == (data >> 3))
        return 0;
    if (i2c_write(st.hw->addr, st.reg->gyro_cfg, 1, &data))
        return -1;
10008894:	2001      	movs	r0, #1
10008896:	4240      	negs	r0, r0
    st.chip_cfg.gyro_fsr = data >> 3;
    return 0;
}
10008898:	b002      	add	sp, #8
1000889a:	bd10      	pop	{r4, pc}
1000889c:	10018608 	.word	0x10018608
100088a0:	1000aab9 	.word	0x1000aab9

100088a4 <mpu_get_accel_fsr>:
 *  @param[out] fsr Current full-scale range.
 *  @return     0 if successful.
 */
int mpu_get_accel_fsr(unsigned char *fsr)
{
    switch (st.chip_cfg.accel_fsr) {
100088a4:	4b11      	ldr	r3, [pc, #68]	; (100088ec <mpu_get_accel_fsr+0x48>)
100088a6:	7a5b      	ldrb	r3, [r3, #9]
100088a8:	2b01      	cmp	r3, #1
100088aa:	d009      	beq.n	100088c0 <mpu_get_accel_fsr+0x1c>
100088ac:	2b00      	cmp	r3, #0
100088ae:	d004      	beq.n	100088ba <mpu_get_accel_fsr+0x16>
100088b0:	2b02      	cmp	r3, #2
100088b2:	d008      	beq.n	100088c6 <mpu_get_accel_fsr+0x22>
100088b4:	2b03      	cmp	r3, #3
100088b6:	d009      	beq.n	100088cc <mpu_get_accel_fsr+0x28>
100088b8:	e014      	b.n	100088e4 <mpu_get_accel_fsr+0x40>
    case INV_FSR_2G:
        fsr[0] = 2;
100088ba:	2302      	movs	r3, #2
100088bc:	7003      	strb	r3, [r0, #0]
        break;
100088be:	e007      	b.n	100088d0 <mpu_get_accel_fsr+0x2c>
    case INV_FSR_4G:
        fsr[0] = 4;
100088c0:	2304      	movs	r3, #4
100088c2:	7003      	strb	r3, [r0, #0]
        break;
100088c4:	e004      	b.n	100088d0 <mpu_get_accel_fsr+0x2c>
    case INV_FSR_8G:
        fsr[0] = 8;
100088c6:	2308      	movs	r3, #8
100088c8:	7003      	strb	r3, [r0, #0]
        break;
100088ca:	e001      	b.n	100088d0 <mpu_get_accel_fsr+0x2c>
    case INV_FSR_16G:
        fsr[0] = 16;
100088cc:	2310      	movs	r3, #16
100088ce:	7003      	strb	r3, [r0, #0]
        break;
    default:
        return -1;
    }
    if (st.chip_cfg.accel_half)
100088d0:	4b06      	ldr	r3, [pc, #24]	; (100088ec <mpu_get_accel_fsr+0x48>)
100088d2:	7cda      	ldrb	r2, [r3, #19]
        fsr[0] <<= 1;
    return 0;
100088d4:	2300      	movs	r3, #0
        fsr[0] = 16;
        break;
    default:
        return -1;
    }
    if (st.chip_cfg.accel_half)
100088d6:	2a00      	cmp	r2, #0
100088d8:	d006      	beq.n	100088e8 <mpu_get_accel_fsr+0x44>
        fsr[0] <<= 1;
100088da:	7803      	ldrb	r3, [r0, #0]
100088dc:	005b      	lsls	r3, r3, #1
100088de:	7003      	strb	r3, [r0, #0]
    return 0;
100088e0:	2300      	movs	r3, #0
100088e2:	e001      	b.n	100088e8 <mpu_get_accel_fsr+0x44>
        break;
    case INV_FSR_16G:
        fsr[0] = 16;
        break;
    default:
        return -1;
100088e4:	2301      	movs	r3, #1
100088e6:	425b      	negs	r3, r3
    }
    if (st.chip_cfg.accel_half)
        fsr[0] <<= 1;
    return 0;
}
100088e8:	0018      	movs	r0, r3
100088ea:	4770      	bx	lr
100088ec:	10018608 	.word	0x10018608

100088f0 <mpu_set_accel_fsr>:
 *  @brief      Set the accel full-scale range.
 *  @param[in]  fsr Desired full-scale range.
 *  @return     0 if successful.
 */
int mpu_set_accel_fsr(unsigned char fsr)
{
100088f0:	b510      	push	{r4, lr}
100088f2:	b082      	sub	sp, #8
    unsigned char data;

    if (!(st.chip_cfg.sensors))
100088f4:	4b21      	ldr	r3, [pc, #132]	; (1000897c <mpu_set_accel_fsr+0x8c>)
100088f6:	7a9b      	ldrb	r3, [r3, #10]
100088f8:	2b00      	cmp	r3, #0
100088fa:	d035      	beq.n	10008968 <mpu_set_accel_fsr+0x78>
        return -1;

    switch (fsr) {
100088fc:	2804      	cmp	r0, #4
100088fe:	d00c      	beq.n	1000891a <mpu_set_accel_fsr+0x2a>
10008900:	d802      	bhi.n	10008908 <mpu_set_accel_fsr+0x18>
10008902:	2802      	cmp	r0, #2
10008904:	d005      	beq.n	10008912 <mpu_set_accel_fsr+0x22>
10008906:	e032      	b.n	1000896e <mpu_set_accel_fsr+0x7e>
10008908:	2808      	cmp	r0, #8
1000890a:	d00a      	beq.n	10008922 <mpu_set_accel_fsr+0x32>
1000890c:	2810      	cmp	r0, #16
1000890e:	d00c      	beq.n	1000892a <mpu_set_accel_fsr+0x3a>
10008910:	e02d      	b.n	1000896e <mpu_set_accel_fsr+0x7e>
    case 2:
        data = INV_FSR_2G << 3;
10008912:	2200      	movs	r2, #0
10008914:	466b      	mov	r3, sp
10008916:	71da      	strb	r2, [r3, #7]
        break;
10008918:	e00a      	b.n	10008930 <mpu_set_accel_fsr+0x40>
    case 4:
        data = INV_FSR_4G << 3;
1000891a:	2208      	movs	r2, #8
1000891c:	466b      	mov	r3, sp
1000891e:	71da      	strb	r2, [r3, #7]
        break;
10008920:	e006      	b.n	10008930 <mpu_set_accel_fsr+0x40>
    case 8:
        data = INV_FSR_8G << 3;
10008922:	2210      	movs	r2, #16
10008924:	466b      	mov	r3, sp
10008926:	71da      	strb	r2, [r3, #7]
        break;
10008928:	e002      	b.n	10008930 <mpu_set_accel_fsr+0x40>
    case 16:
        data = INV_FSR_16G << 3;
1000892a:	2218      	movs	r2, #24
1000892c:	466b      	mov	r3, sp
1000892e:	71da      	strb	r2, [r3, #7]
        break;
    default:
        return -1;
    }

    if (st.chip_cfg.accel_fsr == (data >> 3))
10008930:	466b      	mov	r3, sp
10008932:	3307      	adds	r3, #7
10008934:	781b      	ldrb	r3, [r3, #0]
10008936:	4a11      	ldr	r2, [pc, #68]	; (1000897c <mpu_set_accel_fsr+0x8c>)
10008938:	7a52      	ldrb	r2, [r2, #9]
1000893a:	08db      	lsrs	r3, r3, #3
        return 0;
1000893c:	2000      	movs	r0, #0
        break;
    default:
        return -1;
    }

    if (st.chip_cfg.accel_fsr == (data >> 3))
1000893e:	429a      	cmp	r2, r3
10008940:	d01a      	beq.n	10008978 <mpu_set_accel_fsr+0x88>
        return 0;
    if (i2c_write(st.hw->addr, st.reg->accel_cfg, 1, &data))
10008942:	4b0e      	ldr	r3, [pc, #56]	; (1000897c <mpu_set_accel_fsr+0x8c>)
10008944:	681a      	ldr	r2, [r3, #0]
10008946:	79d1      	ldrb	r1, [r2, #7]
10008948:	685b      	ldr	r3, [r3, #4]
1000894a:	7818      	ldrb	r0, [r3, #0]
1000894c:	466b      	mov	r3, sp
1000894e:	3307      	adds	r3, #7
10008950:	2201      	movs	r2, #1
10008952:	4c0b      	ldr	r4, [pc, #44]	; (10008980 <mpu_set_accel_fsr+0x90>)
10008954:	47a0      	blx	r4
10008956:	2800      	cmp	r0, #0
10008958:	d10c      	bne.n	10008974 <mpu_set_accel_fsr+0x84>
        return -1;
    st.chip_cfg.accel_fsr = data >> 3;
1000895a:	466b      	mov	r3, sp
1000895c:	3307      	adds	r3, #7
1000895e:	781b      	ldrb	r3, [r3, #0]
10008960:	08db      	lsrs	r3, r3, #3
10008962:	4a06      	ldr	r2, [pc, #24]	; (1000897c <mpu_set_accel_fsr+0x8c>)
10008964:	7253      	strb	r3, [r2, #9]
    return 0;
10008966:	e007      	b.n	10008978 <mpu_set_accel_fsr+0x88>
int mpu_set_accel_fsr(unsigned char fsr)
{
    unsigned char data;

    if (!(st.chip_cfg.sensors))
        return -1;
10008968:	2001      	movs	r0, #1
1000896a:	4240      	negs	r0, r0
1000896c:	e004      	b.n	10008978 <mpu_set_accel_fsr+0x88>
        break;
    case 16:
        data = INV_FSR_16G << 3;
        break;
    default:
        return -1;
1000896e:	2001      	movs	r0, #1
10008970:	4240      	negs	r0, r0
10008972:	e001      	b.n	10008978 <mpu_set_accel_fsr+0x88>
    }

    if (st.chip_cfg.accel_fsr == (data >> 3))
        return 0;
    if (i2c_write(st.hw->addr, st.reg->accel_cfg, 1, &data))
        return -1;
10008974:	2001      	movs	r0, #1
10008976:	4240      	negs	r0, r0
    st.chip_cfg.accel_fsr = data >> 3;
    return 0;
}
10008978:	b002      	add	sp, #8
1000897a:	bd10      	pop	{r4, pc}
1000897c:	10018608 	.word	0x10018608
10008980:	1000aab9 	.word	0x1000aab9

10008984 <mpu_set_lpf>:
 *  The following LPF settings are supported: 188, 98, 42, 20, 10, 5.
 *  @param[in]  lpf Desired LPF setting.
 *  @return     0 if successful.
 */
int mpu_set_lpf(unsigned short lpf)
{
10008984:	b510      	push	{r4, lr}
10008986:	b082      	sub	sp, #8
    unsigned char data;

    if (!(st.chip_cfg.sensors))
10008988:	4b2b      	ldr	r3, [pc, #172]	; (10008a38 <mpu_set_lpf+0xb4>)
1000898a:	7a9b      	ldrb	r3, [r3, #10]
1000898c:	2b00      	cmp	r3, #0
1000898e:	d049      	beq.n	10008a24 <mpu_set_lpf+0xa0>
        return -1;

    if (lpf >= 188)
10008990:	28bb      	cmp	r0, #187	; 0xbb
10008992:	d903      	bls.n	1000899c <mpu_set_lpf+0x18>
        data = INV_FILTER_188HZ;
10008994:	2201      	movs	r2, #1
10008996:	466b      	mov	r3, sp
10008998:	71da      	strb	r2, [r3, #7]
1000899a:	e01a      	b.n	100089d2 <mpu_set_lpf+0x4e>
    else if (lpf >= 98)
1000899c:	2861      	cmp	r0, #97	; 0x61
1000899e:	d903      	bls.n	100089a8 <mpu_set_lpf+0x24>
        data = INV_FILTER_98HZ;
100089a0:	2202      	movs	r2, #2
100089a2:	466b      	mov	r3, sp
100089a4:	71da      	strb	r2, [r3, #7]
100089a6:	e014      	b.n	100089d2 <mpu_set_lpf+0x4e>
    else if (lpf >= 42)
100089a8:	2829      	cmp	r0, #41	; 0x29
100089aa:	d903      	bls.n	100089b4 <mpu_set_lpf+0x30>
        data = INV_FILTER_42HZ;
100089ac:	2203      	movs	r2, #3
100089ae:	466b      	mov	r3, sp
100089b0:	71da      	strb	r2, [r3, #7]
100089b2:	e00e      	b.n	100089d2 <mpu_set_lpf+0x4e>
    else if (lpf >= 20)
100089b4:	2813      	cmp	r0, #19
100089b6:	d903      	bls.n	100089c0 <mpu_set_lpf+0x3c>
        data = INV_FILTER_20HZ;
100089b8:	2204      	movs	r2, #4
100089ba:	466b      	mov	r3, sp
100089bc:	71da      	strb	r2, [r3, #7]
100089be:	e008      	b.n	100089d2 <mpu_set_lpf+0x4e>
    else if (lpf >= 10)
100089c0:	2809      	cmp	r0, #9
100089c2:	d903      	bls.n	100089cc <mpu_set_lpf+0x48>
        data = INV_FILTER_10HZ;
100089c4:	2205      	movs	r2, #5
100089c6:	466b      	mov	r3, sp
100089c8:	71da      	strb	r2, [r3, #7]
100089ca:	e002      	b.n	100089d2 <mpu_set_lpf+0x4e>
    else
        data = INV_FILTER_5HZ;
100089cc:	2206      	movs	r2, #6
100089ce:	466b      	mov	r3, sp
100089d0:	71da      	strb	r2, [r3, #7]

    if (st.chip_cfg.lpf == data)
100089d2:	4b19      	ldr	r3, [pc, #100]	; (10008a38 <mpu_set_lpf+0xb4>)
100089d4:	7ada      	ldrb	r2, [r3, #11]
100089d6:	466b      	mov	r3, sp
100089d8:	3307      	adds	r3, #7
100089da:	781b      	ldrb	r3, [r3, #0]
        return 0;
100089dc:	2000      	movs	r0, #0
    else if (lpf >= 10)
        data = INV_FILTER_10HZ;
    else
        data = INV_FILTER_5HZ;

    if (st.chip_cfg.lpf == data)
100089de:	429a      	cmp	r2, r3
100089e0:	d028      	beq.n	10008a34 <mpu_set_lpf+0xb0>
        return 0;
    if (i2c_write(st.hw->addr, st.reg->lpf, 1, &data))
100089e2:	4b15      	ldr	r3, [pc, #84]	; (10008a38 <mpu_set_lpf+0xb4>)
100089e4:	681a      	ldr	r2, [r3, #0]
100089e6:	7891      	ldrb	r1, [r2, #2]
100089e8:	685b      	ldr	r3, [r3, #4]
100089ea:	7818      	ldrb	r0, [r3, #0]
100089ec:	466b      	mov	r3, sp
100089ee:	3307      	adds	r3, #7
100089f0:	2201      	movs	r2, #1
100089f2:	4c12      	ldr	r4, [pc, #72]	; (10008a3c <mpu_set_lpf+0xb8>)
100089f4:	47a0      	blx	r4
100089f6:	2800      	cmp	r0, #0
100089f8:	d117      	bne.n	10008a2a <mpu_set_lpf+0xa6>
        return -1;
#ifdef MPU6500
    data = BIT_FIFO_SIZE_1024 | data;
100089fa:	466b      	mov	r3, sp
100089fc:	3307      	adds	r3, #7
100089fe:	7819      	ldrb	r1, [r3, #0]
10008a00:	2240      	movs	r2, #64	; 0x40
10008a02:	430a      	orrs	r2, r1
10008a04:	701a      	strb	r2, [r3, #0]

    if (i2c_write(st.hw->addr, st.reg->accel_cfg2, 1, &data))
10008a06:	4a0c      	ldr	r2, [pc, #48]	; (10008a38 <mpu_set_lpf+0xb4>)
10008a08:	6811      	ldr	r1, [r2, #0]
10008a0a:	7a09      	ldrb	r1, [r1, #8]
10008a0c:	6852      	ldr	r2, [r2, #4]
10008a0e:	7810      	ldrb	r0, [r2, #0]
10008a10:	2201      	movs	r2, #1
10008a12:	4c0a      	ldr	r4, [pc, #40]	; (10008a3c <mpu_set_lpf+0xb8>)
10008a14:	47a0      	blx	r4
10008a16:	2800      	cmp	r0, #0
10008a18:	d10a      	bne.n	10008a30 <mpu_set_lpf+0xac>
            return -1;
#endif
    st.chip_cfg.lpf = data;
10008a1a:	466b      	mov	r3, sp
10008a1c:	79da      	ldrb	r2, [r3, #7]
10008a1e:	4b06      	ldr	r3, [pc, #24]	; (10008a38 <mpu_set_lpf+0xb4>)
10008a20:	72da      	strb	r2, [r3, #11]
    return 0;
10008a22:	e007      	b.n	10008a34 <mpu_set_lpf+0xb0>
int mpu_set_lpf(unsigned short lpf)
{
    unsigned char data;

    if (!(st.chip_cfg.sensors))
        return -1;
10008a24:	2001      	movs	r0, #1
10008a26:	4240      	negs	r0, r0
10008a28:	e004      	b.n	10008a34 <mpu_set_lpf+0xb0>
        data = INV_FILTER_5HZ;

    if (st.chip_cfg.lpf == data)
        return 0;
    if (i2c_write(st.hw->addr, st.reg->lpf, 1, &data))
        return -1;
10008a2a:	2001      	movs	r0, #1
10008a2c:	4240      	negs	r0, r0
10008a2e:	e001      	b.n	10008a34 <mpu_set_lpf+0xb0>
#ifdef MPU6500
    data = BIT_FIFO_SIZE_1024 | data;

    if (i2c_write(st.hw->addr, st.reg->accel_cfg2, 1, &data))
            return -1;
10008a30:	2001      	movs	r0, #1
10008a32:	4240      	negs	r0, r0
#endif
    st.chip_cfg.lpf = data;
    return 0;
}
10008a34:	b002      	add	sp, #8
10008a36:	bd10      	pop	{r4, pc}
10008a38:	10018608 	.word	0x10018608
10008a3c:	1000aab9 	.word	0x1000aab9

10008a40 <mpu_get_sample_rate>:
 *  @param[out] rate    Current sampling rate (Hz).
 *  @return     0 if successful.
 */
int mpu_get_sample_rate(unsigned short *rate)
{
    if (st.chip_cfg.dmp_on)
10008a40:	2324      	movs	r3, #36	; 0x24
10008a42:	4a05      	ldr	r2, [pc, #20]	; (10008a58 <mpu_get_sample_rate+0x18>)
10008a44:	5cd3      	ldrb	r3, [r2, r3]
10008a46:	2b00      	cmp	r3, #0
10008a48:	d103      	bne.n	10008a52 <mpu_get_sample_rate+0x12>
        return -1;
    else
        rate[0] = st.chip_cfg.sample_rate;
10008a4a:	89d3      	ldrh	r3, [r2, #14]
10008a4c:	8003      	strh	r3, [r0, #0]
    return 0;
10008a4e:	2000      	movs	r0, #0
10008a50:	e001      	b.n	10008a56 <mpu_get_sample_rate+0x16>
 *  @return     0 if successful.
 */
int mpu_get_sample_rate(unsigned short *rate)
{
    if (st.chip_cfg.dmp_on)
        return -1;
10008a52:	2001      	movs	r0, #1
10008a54:	4240      	negs	r0, r0
    else
        rate[0] = st.chip_cfg.sample_rate;
    return 0;
}
10008a56:	4770      	bx	lr
10008a58:	10018608 	.word	0x10018608

10008a5c <mpu_set_compass_sample_rate>:
 *  mpu_get_compass_sample_rate to check the actual setting.
 *  @param[in]  rate    Desired compass sampling rate (Hz).
 *  @return     0 if successful.
 */
int mpu_set_compass_sample_rate(unsigned short rate)
{
10008a5c:	b530      	push	{r4, r5, lr}
10008a5e:	b083      	sub	sp, #12
10008a60:	1e01      	subs	r1, r0, #0
#ifdef AK89xx_SECONDARY
    unsigned char div;
    if (!rate || rate > st.chip_cfg.sample_rate || rate > MAX_COMPASS_SAMPLE_RATE)
10008a62:	d020      	beq.n	10008aa6 <mpu_set_compass_sample_rate+0x4a>
10008a64:	4b17      	ldr	r3, [pc, #92]	; (10008ac4 <mpu_set_compass_sample_rate+0x68>)
10008a66:	89d8      	ldrh	r0, [r3, #14]
10008a68:	4281      	cmp	r1, r0
10008a6a:	d81f      	bhi.n	10008aac <mpu_set_compass_sample_rate+0x50>
10008a6c:	2964      	cmp	r1, #100	; 0x64
10008a6e:	d820      	bhi.n	10008ab2 <mpu_set_compass_sample_rate+0x56>
        return -1;

    div = st.chip_cfg.sample_rate / rate - 1;
10008a70:	466b      	mov	r3, sp
10008a72:	1ddc      	adds	r4, r3, #7
10008a74:	4b14      	ldr	r3, [pc, #80]	; (10008ac8 <mpu_set_compass_sample_rate+0x6c>)
10008a76:	4798      	blx	r3
10008a78:	3801      	subs	r0, #1
10008a7a:	7020      	strb	r0, [r4, #0]
    if (i2c_write(st.hw->addr, st.reg->s4_ctrl, 1, &div))
10008a7c:	4b11      	ldr	r3, [pc, #68]	; (10008ac4 <mpu_set_compass_sample_rate+0x68>)
10008a7e:	2224      	movs	r2, #36	; 0x24
10008a80:	6819      	ldr	r1, [r3, #0]
10008a82:	5c89      	ldrb	r1, [r1, r2]
10008a84:	685b      	ldr	r3, [r3, #4]
10008a86:	7818      	ldrb	r0, [r3, #0]
10008a88:	0023      	movs	r3, r4
10008a8a:	3a23      	subs	r2, #35	; 0x23
10008a8c:	4c0f      	ldr	r4, [pc, #60]	; (10008acc <mpu_set_compass_sample_rate+0x70>)
10008a8e:	47a0      	blx	r4
10008a90:	1e04      	subs	r4, r0, #0
10008a92:	d111      	bne.n	10008ab8 <mpu_set_compass_sample_rate+0x5c>
        return -1;
    st.chip_cfg.compass_sample_rate = st.chip_cfg.sample_rate / (div + 1);
10008a94:	4d0b      	ldr	r5, [pc, #44]	; (10008ac4 <mpu_set_compass_sample_rate+0x68>)
10008a96:	89e8      	ldrh	r0, [r5, #14]
10008a98:	466b      	mov	r3, sp
10008a9a:	79d9      	ldrb	r1, [r3, #7]
10008a9c:	3101      	adds	r1, #1
10008a9e:	4b0c      	ldr	r3, [pc, #48]	; (10008ad0 <mpu_set_compass_sample_rate+0x74>)
10008aa0:	4798      	blx	r3
10008aa2:	8528      	strh	r0, [r5, #40]	; 0x28
    return 0;
10008aa4:	e00a      	b.n	10008abc <mpu_set_compass_sample_rate+0x60>
int mpu_set_compass_sample_rate(unsigned short rate)
{
#ifdef AK89xx_SECONDARY
    unsigned char div;
    if (!rate || rate > st.chip_cfg.sample_rate || rate > MAX_COMPASS_SAMPLE_RATE)
        return -1;
10008aa6:	2401      	movs	r4, #1
10008aa8:	4264      	negs	r4, r4
10008aaa:	e007      	b.n	10008abc <mpu_set_compass_sample_rate+0x60>
10008aac:	2401      	movs	r4, #1
10008aae:	4264      	negs	r4, r4
10008ab0:	e004      	b.n	10008abc <mpu_set_compass_sample_rate+0x60>
10008ab2:	2401      	movs	r4, #1
10008ab4:	4264      	negs	r4, r4
10008ab6:	e001      	b.n	10008abc <mpu_set_compass_sample_rate+0x60>

    div = st.chip_cfg.sample_rate / rate - 1;
    if (i2c_write(st.hw->addr, st.reg->s4_ctrl, 1, &div))
        return -1;
10008ab8:	2401      	movs	r4, #1
10008aba:	4264      	negs	r4, r4
    st.chip_cfg.compass_sample_rate = st.chip_cfg.sample_rate / (div + 1);
    return 0;
#else
    return -1;
#endif
}
10008abc:	0020      	movs	r0, r4
10008abe:	b003      	add	sp, #12
10008ac0:	bd30      	pop	{r4, r5, pc}
10008ac2:	46c0      	nop			; (mov r8, r8)
10008ac4:	10018608 	.word	0x10018608
10008ac8:	10013135 	.word	0x10013135
10008acc:	1000aab9 	.word	0x1000aab9
10008ad0:	10013249 	.word	0x10013249

10008ad4 <mpu_configure_fifo>:
 *  \n INV_XYZ_ACCEL
 *  @param[in]  sensors Mask of sensors to push to FIFO.
 *  @return     0 if successful.
 */
int mpu_configure_fifo(unsigned char sensors)
{
10008ad4:	b570      	push	{r4, r5, r6, lr}
    int result = 0;

    /* Compass data isn't going into the FIFO. Stop trying. */
    sensors &= ~INV_XYZ_COMPASS;

    if (st.chip_cfg.dmp_on)
10008ad6:	2324      	movs	r3, #36	; 0x24
10008ad8:	4a16      	ldr	r2, [pc, #88]	; (10008b34 <mpu_configure_fifo+0x60>)
10008ada:	5cd3      	ldrb	r3, [r2, r3]
        return 0;
10008adc:	2400      	movs	r4, #0
    int result = 0;

    /* Compass data isn't going into the FIFO. Stop trying. */
    sensors &= ~INV_XYZ_COMPASS;

    if (st.chip_cfg.dmp_on)
10008ade:	2b00      	cmp	r3, #0
10008ae0:	d126      	bne.n	10008b30 <mpu_configure_fifo+0x5c>
        return 0;
    else {
        if (!(st.chip_cfg.sensors))
10008ae2:	7a94      	ldrb	r4, [r2, #10]
10008ae4:	2c00      	cmp	r4, #0
10008ae6:	d015      	beq.n	10008b14 <mpu_configure_fifo+0x40>
{
    unsigned char prev;
    int result = 0;

    /* Compass data isn't going into the FIFO. Stop trying. */
    sensors &= ~INV_XYZ_COMPASS;
10008ae8:	2301      	movs	r3, #1
10008aea:	4398      	bics	r0, r3
    if (st.chip_cfg.dmp_on)
        return 0;
    else {
        if (!(st.chip_cfg.sensors))
            return -1;
        prev = st.chip_cfg.fifo_enable;
10008aec:	7c15      	ldrb	r5, [r2, #16]
        st.chip_cfg.fifo_enable = sensors & st.chip_cfg.sensors;
10008aee:	4004      	ands	r4, r0
10008af0:	7414      	strb	r4, [r2, #16]
        if (st.chip_cfg.fifo_enable != sensors)
10008af2:	1b04      	subs	r4, r0, r4
10008af4:	1e63      	subs	r3, r4, #1
10008af6:	419c      	sbcs	r4, r3
10008af8:	4264      	negs	r4, r4
             * asleep.
             */
            result = -1;
        else
            result = 0;
        if (sensors || st.chip_cfg.lp_accel_mode)
10008afa:	2800      	cmp	r0, #0
10008afc:	d10d      	bne.n	10008b1a <mpu_configure_fifo+0x46>
10008afe:	7d13      	ldrb	r3, [r2, #20]
10008b00:	2b00      	cmp	r3, #0
10008b02:	d112      	bne.n	10008b2a <mpu_configure_fifo+0x56>
            set_int_enable(1);
        else
            set_int_enable(0);
10008b04:	4b0c      	ldr	r3, [pc, #48]	; (10008b38 <mpu_configure_fifo+0x64>)
10008b06:	4798      	blx	r3
10008b08:	e012      	b.n	10008b30 <mpu_configure_fifo+0x5c>
        if (sensors) {
            if (mpu_reset_fifo()) {
                st.chip_cfg.fifo_enable = prev;
10008b0a:	4b0a      	ldr	r3, [pc, #40]	; (10008b34 <mpu_configure_fifo+0x60>)
10008b0c:	741d      	strb	r5, [r3, #16]
                return -1;
10008b0e:	2401      	movs	r4, #1
10008b10:	4264      	negs	r4, r4
10008b12:	e00d      	b.n	10008b30 <mpu_configure_fifo+0x5c>

    if (st.chip_cfg.dmp_on)
        return 0;
    else {
        if (!(st.chip_cfg.sensors))
            return -1;
10008b14:	2401      	movs	r4, #1
10008b16:	4264      	negs	r4, r4
10008b18:	e00a      	b.n	10008b30 <mpu_configure_fifo+0x5c>
             */
            result = -1;
        else
            result = 0;
        if (sensors || st.chip_cfg.lp_accel_mode)
            set_int_enable(1);
10008b1a:	2001      	movs	r0, #1
10008b1c:	4b06      	ldr	r3, [pc, #24]	; (10008b38 <mpu_configure_fifo+0x64>)
10008b1e:	4798      	blx	r3
        else
            set_int_enable(0);
        if (sensors) {
            if (mpu_reset_fifo()) {
10008b20:	4b06      	ldr	r3, [pc, #24]	; (10008b3c <mpu_configure_fifo+0x68>)
10008b22:	4798      	blx	r3
10008b24:	2800      	cmp	r0, #0
10008b26:	d003      	beq.n	10008b30 <mpu_configure_fifo+0x5c>
10008b28:	e7ef      	b.n	10008b0a <mpu_configure_fifo+0x36>
             */
            result = -1;
        else
            result = 0;
        if (sensors || st.chip_cfg.lp_accel_mode)
            set_int_enable(1);
10008b2a:	2001      	movs	r0, #1
10008b2c:	4b02      	ldr	r3, [pc, #8]	; (10008b38 <mpu_configure_fifo+0x64>)
10008b2e:	4798      	blx	r3
            }
        }
    }

    return result;
}
10008b30:	0020      	movs	r0, r4
10008b32:	bd70      	pop	{r4, r5, r6, pc}
10008b34:	10018608 	.word	0x10018608
10008b38:	100084b1 	.word	0x100084b1
10008b3c:	1000860d 	.word	0x1000860d

10008b40 <mpu_read_fifo>:
 *  @param[out] more        Number of remaining packets.
 *  @return     0 if successful.
 */
int mpu_read_fifo(short *gyro, short *accel, unsigned long *timestamp,
        unsigned char *sensors, unsigned char *more)
{
10008b40:	b5f0      	push	{r4, r5, r6, r7, lr}
10008b42:	464f      	mov	r7, r9
10008b44:	b480      	push	{r7}
10008b46:	b088      	sub	sp, #32
10008b48:	9001      	str	r0, [sp, #4]
10008b4a:	9103      	str	r1, [sp, #12]
10008b4c:	9202      	str	r2, [sp, #8]
10008b4e:	001e      	movs	r6, r3
    /* Assumes maximum packet size is gyro (6) + accel (6). */
    unsigned char data[MAX_PACKET_LENGTH];
    unsigned char packet_size = 0;
    unsigned short fifo_count, index = 0;

    if (st.chip_cfg.dmp_on)
10008b50:	2324      	movs	r3, #36	; 0x24
10008b52:	4a69      	ldr	r2, [pc, #420]	; (10008cf8 <mpu_read_fifo+0x1b8>)
10008b54:	5cd3      	ldrb	r3, [r2, r3]
10008b56:	2b00      	cmp	r3, #0
10008b58:	d000      	beq.n	10008b5c <mpu_read_fifo+0x1c>
10008b5a:	e0b6      	b.n	10008cca <mpu_read_fifo+0x18a>
        return -1;

    sensors[0] = 0;
10008b5c:	7033      	strb	r3, [r6, #0]
    if (!st.chip_cfg.sensors)
10008b5e:	7a93      	ldrb	r3, [r2, #10]
10008b60:	2b00      	cmp	r3, #0
10008b62:	d100      	bne.n	10008b66 <mpu_read_fifo+0x26>
10008b64:	e0b4      	b.n	10008cd0 <mpu_read_fifo+0x190>
        return -1;
    if (!st.chip_cfg.fifo_enable)
10008b66:	7c13      	ldrb	r3, [r2, #16]
10008b68:	2b00      	cmp	r3, #0
10008b6a:	d100      	bne.n	10008b6e <mpu_read_fifo+0x2e>
10008b6c:	e0b3      	b.n	10008cd6 <mpu_read_fifo+0x196>
        return -1;

    if (st.chip_cfg.fifo_enable & INV_X_GYRO)
10008b6e:	065a      	lsls	r2, r3, #25
        packet_size += 2;
10008b70:	0fd2      	lsrs	r2, r2, #31
10008b72:	0055      	lsls	r5, r2, #1
    if (st.chip_cfg.fifo_enable & INV_Y_GYRO)
10008b74:	069a      	lsls	r2, r3, #26
10008b76:	d501      	bpl.n	10008b7c <mpu_read_fifo+0x3c>
        packet_size += 2;
10008b78:	1caa      	adds	r2, r5, #2
10008b7a:	b2d5      	uxtb	r5, r2
    if (st.chip_cfg.fifo_enable & INV_Z_GYRO)
10008b7c:	06da      	lsls	r2, r3, #27
10008b7e:	d501      	bpl.n	10008b84 <mpu_read_fifo+0x44>
        packet_size += 2;
10008b80:	1caa      	adds	r2, r5, #2
10008b82:	b2d5      	uxtb	r5, r2
    if (st.chip_cfg.fifo_enable & INV_XYZ_ACCEL)
10008b84:	071b      	lsls	r3, r3, #28
10008b86:	d501      	bpl.n	10008b8c <mpu_read_fifo+0x4c>
        packet_size += 6;
10008b88:	1dab      	adds	r3, r5, #6
10008b8a:	b2dd      	uxtb	r5, r3

    if (i2c_read(st.hw->addr, st.reg->fifo_count_h, 2, data))
10008b8c:	4b5a      	ldr	r3, [pc, #360]	; (10008cf8 <mpu_read_fifo+0x1b8>)
10008b8e:	681a      	ldr	r2, [r3, #0]
10008b90:	7b11      	ldrb	r1, [r2, #12]
10008b92:	685b      	ldr	r3, [r3, #4]
10008b94:	7818      	ldrb	r0, [r3, #0]
10008b96:	ab05      	add	r3, sp, #20
10008b98:	2202      	movs	r2, #2
10008b9a:	4c58      	ldr	r4, [pc, #352]	; (10008cfc <mpu_read_fifo+0x1bc>)
10008b9c:	47a0      	blx	r4
10008b9e:	1e04      	subs	r4, r0, #0
10008ba0:	d000      	beq.n	10008ba4 <mpu_read_fifo+0x64>
10008ba2:	e09b      	b.n	10008cdc <mpu_read_fifo+0x19c>
        return -1;
    fifo_count = (data[0] << 8) | data[1];
10008ba4:	aa05      	add	r2, sp, #20
10008ba6:	7813      	ldrb	r3, [r2, #0]
10008ba8:	021b      	lsls	r3, r3, #8
10008baa:	7852      	ldrb	r2, [r2, #1]
10008bac:	431a      	orrs	r2, r3
10008bae:	4691      	mov	r9, r2
    if (fifo_count < packet_size)
10008bb0:	b2af      	uxth	r7, r5
10008bb2:	42ba      	cmp	r2, r7
10008bb4:	d200      	bcs.n	10008bb8 <mpu_read_fifo+0x78>
10008bb6:	e099      	b.n	10008cec <mpu_read_fifo+0x1ac>
        return 0;
//    log_i("FIFO count: %hd\n", fifo_count);
    if (fifo_count > (st.hw->max_fifo >> 1)) {
10008bb8:	4b4f      	ldr	r3, [pc, #316]	; (10008cf8 <mpu_read_fifo+0x1b8>)
10008bba:	685a      	ldr	r2, [r3, #4]
10008bbc:	8853      	ldrh	r3, [r2, #2]
10008bbe:	085b      	lsrs	r3, r3, #1
10008bc0:	4599      	cmp	r9, r3
10008bc2:	d913      	bls.n	10008bec <mpu_read_fifo+0xac>
        /* FIFO is 50% full, better check overflow bit. */
        if (i2c_read(st.hw->addr, st.reg->int_status, 1, data))
10008bc4:	4b4c      	ldr	r3, [pc, #304]	; (10008cf8 <mpu_read_fifo+0x1b8>)
10008bc6:	681b      	ldr	r3, [r3, #0]
10008bc8:	7cd9      	ldrb	r1, [r3, #19]
10008bca:	7810      	ldrb	r0, [r2, #0]
10008bcc:	ab05      	add	r3, sp, #20
10008bce:	2201      	movs	r2, #1
10008bd0:	4c4a      	ldr	r4, [pc, #296]	; (10008cfc <mpu_read_fifo+0x1bc>)
10008bd2:	47a0      	blx	r4
10008bd4:	2800      	cmp	r0, #0
10008bd6:	d000      	beq.n	10008bda <mpu_read_fifo+0x9a>
10008bd8:	e083      	b.n	10008ce2 <mpu_read_fifo+0x1a2>
            return -1;
        if (data[0] & BIT_FIFO_OVERFLOW) {
10008bda:	ab05      	add	r3, sp, #20
10008bdc:	781b      	ldrb	r3, [r3, #0]
10008bde:	06db      	lsls	r3, r3, #27
10008be0:	d504      	bpl.n	10008bec <mpu_read_fifo+0xac>
            mpu_reset_fifo();
10008be2:	4b47      	ldr	r3, [pc, #284]	; (10008d00 <mpu_read_fifo+0x1c0>)
10008be4:	4798      	blx	r3
            return -2;
10008be6:	2402      	movs	r4, #2
10008be8:	4264      	negs	r4, r4
10008bea:	e07f      	b.n	10008cec <mpu_read_fifo+0x1ac>
        }
    }
    get_ms((unsigned long*)timestamp);
10008bec:	9802      	ldr	r0, [sp, #8]
10008bee:	4b45      	ldr	r3, [pc, #276]	; (10008d04 <mpu_read_fifo+0x1c4>)
10008bf0:	4798      	blx	r3

    if (i2c_read(st.hw->addr, st.reg->fifo_r_w, packet_size, data))
10008bf2:	4b41      	ldr	r3, [pc, #260]	; (10008cf8 <mpu_read_fifo+0x1b8>)
10008bf4:	681a      	ldr	r2, [r3, #0]
10008bf6:	7b51      	ldrb	r1, [r2, #13]
10008bf8:	685b      	ldr	r3, [r3, #4]
10008bfa:	7818      	ldrb	r0, [r3, #0]
10008bfc:	ab05      	add	r3, sp, #20
10008bfe:	002a      	movs	r2, r5
10008c00:	4c3e      	ldr	r4, [pc, #248]	; (10008cfc <mpu_read_fifo+0x1bc>)
10008c02:	47a0      	blx	r4
10008c04:	1e04      	subs	r4, r0, #0
10008c06:	d16f      	bne.n	10008ce8 <mpu_read_fifo+0x1a8>
        return -1;
    more[0] = fifo_count / packet_size - 1;
10008c08:	0029      	movs	r1, r5
10008c0a:	4648      	mov	r0, r9
10008c0c:	4b3e      	ldr	r3, [pc, #248]	; (10008d08 <mpu_read_fifo+0x1c8>)
10008c0e:	4798      	blx	r3
10008c10:	3801      	subs	r0, #1
10008c12:	9b0e      	ldr	r3, [sp, #56]	; 0x38
10008c14:	7018      	strb	r0, [r3, #0]
    sensors[0] = 0;
10008c16:	2300      	movs	r3, #0
10008c18:	7033      	strb	r3, [r6, #0]

    if ((index != packet_size) && st.chip_cfg.fifo_enable & INV_XYZ_ACCEL) {
10008c1a:	2d00      	cmp	r5, #0
10008c1c:	d01a      	beq.n	10008c54 <mpu_read_fifo+0x114>
10008c1e:	4b36      	ldr	r3, [pc, #216]	; (10008cf8 <mpu_read_fifo+0x1b8>)
10008c20:	7c1a      	ldrb	r2, [r3, #16]
        unsigned char *sensors, unsigned char *more)
{
    /* Assumes maximum packet size is gyro (6) + accel (6). */
    unsigned char data[MAX_PACKET_LENGTH];
    unsigned char packet_size = 0;
    unsigned short fifo_count, index = 0;
10008c22:	2300      	movs	r3, #0
    if (i2c_read(st.hw->addr, st.reg->fifo_r_w, packet_size, data))
        return -1;
    more[0] = fifo_count / packet_size - 1;
    sensors[0] = 0;

    if ((index != packet_size) && st.chip_cfg.fifo_enable & INV_XYZ_ACCEL) {
10008c24:	0712      	lsls	r2, r2, #28
10008c26:	d515      	bpl.n	10008c54 <mpu_read_fifo+0x114>
        accel[0] = (data[index+0] << 8) | data[index+1];
10008c28:	ab05      	add	r3, sp, #20
10008c2a:	781a      	ldrb	r2, [r3, #0]
10008c2c:	0212      	lsls	r2, r2, #8
10008c2e:	7859      	ldrb	r1, [r3, #1]
10008c30:	430a      	orrs	r2, r1
10008c32:	9803      	ldr	r0, [sp, #12]
10008c34:	8002      	strh	r2, [r0, #0]
        accel[1] = (data[index+2] << 8) | data[index+3];
10008c36:	789a      	ldrb	r2, [r3, #2]
10008c38:	0212      	lsls	r2, r2, #8
10008c3a:	78d9      	ldrb	r1, [r3, #3]
10008c3c:	430a      	orrs	r2, r1
10008c3e:	8042      	strh	r2, [r0, #2]
        accel[2] = (data[index+4] << 8) | data[index+5];
10008c40:	791a      	ldrb	r2, [r3, #4]
10008c42:	0212      	lsls	r2, r2, #8
10008c44:	795b      	ldrb	r3, [r3, #5]
10008c46:	4313      	orrs	r3, r2
10008c48:	8083      	strh	r3, [r0, #4]
        sensors[0] |= INV_XYZ_ACCEL;
10008c4a:	7832      	ldrb	r2, [r6, #0]
10008c4c:	2308      	movs	r3, #8
10008c4e:	4313      	orrs	r3, r2
10008c50:	7033      	strb	r3, [r6, #0]
        index += 6;
10008c52:	2306      	movs	r3, #6
    }
    if ((index != packet_size) && st.chip_cfg.fifo_enable & INV_X_GYRO) {
10008c54:	42bb      	cmp	r3, r7
10008c56:	d049      	beq.n	10008cec <mpu_read_fifo+0x1ac>
10008c58:	4a27      	ldr	r2, [pc, #156]	; (10008cf8 <mpu_read_fifo+0x1b8>)
10008c5a:	7c12      	ldrb	r2, [r2, #16]
10008c5c:	0652      	lsls	r2, r2, #25
10008c5e:	d50f      	bpl.n	10008c80 <mpu_read_fifo+0x140>
        gyro[0] = (data[index+0] << 8) | data[index+1];
10008c60:	a905      	add	r1, sp, #20
10008c62:	5cca      	ldrb	r2, [r1, r3]
10008c64:	0212      	lsls	r2, r2, #8
10008c66:	18c9      	adds	r1, r1, r3
10008c68:	7849      	ldrb	r1, [r1, #1]
10008c6a:	430a      	orrs	r2, r1
10008c6c:	9901      	ldr	r1, [sp, #4]
10008c6e:	800a      	strh	r2, [r1, #0]
        sensors[0] |= INV_X_GYRO;
10008c70:	7831      	ldrb	r1, [r6, #0]
10008c72:	2240      	movs	r2, #64	; 0x40
10008c74:	430a      	orrs	r2, r1
10008c76:	7032      	strb	r2, [r6, #0]
        index += 2;
10008c78:	3302      	adds	r3, #2
10008c7a:	b29b      	uxth	r3, r3
    }
    if ((index != packet_size) && st.chip_cfg.fifo_enable & INV_Y_GYRO) {
10008c7c:	429f      	cmp	r7, r3
10008c7e:	d035      	beq.n	10008cec <mpu_read_fifo+0x1ac>
10008c80:	4a1d      	ldr	r2, [pc, #116]	; (10008cf8 <mpu_read_fifo+0x1b8>)
10008c82:	7c12      	ldrb	r2, [r2, #16]
10008c84:	0692      	lsls	r2, r2, #26
10008c86:	d50f      	bpl.n	10008ca8 <mpu_read_fifo+0x168>
        gyro[1] = (data[index+0] << 8) | data[index+1];
10008c88:	a905      	add	r1, sp, #20
10008c8a:	5cca      	ldrb	r2, [r1, r3]
10008c8c:	0212      	lsls	r2, r2, #8
10008c8e:	18c9      	adds	r1, r1, r3
10008c90:	7849      	ldrb	r1, [r1, #1]
10008c92:	430a      	orrs	r2, r1
10008c94:	9901      	ldr	r1, [sp, #4]
10008c96:	804a      	strh	r2, [r1, #2]
        sensors[0] |= INV_Y_GYRO;
10008c98:	7831      	ldrb	r1, [r6, #0]
10008c9a:	2220      	movs	r2, #32
10008c9c:	430a      	orrs	r2, r1
10008c9e:	7032      	strb	r2, [r6, #0]
        index += 2;
10008ca0:	3302      	adds	r3, #2
10008ca2:	b29b      	uxth	r3, r3
    }
    if ((index != packet_size) && st.chip_cfg.fifo_enable & INV_Z_GYRO) {
10008ca4:	429f      	cmp	r7, r3
10008ca6:	d021      	beq.n	10008cec <mpu_read_fifo+0x1ac>
10008ca8:	4a13      	ldr	r2, [pc, #76]	; (10008cf8 <mpu_read_fifo+0x1b8>)
10008caa:	7c12      	ldrb	r2, [r2, #16]
10008cac:	06d2      	lsls	r2, r2, #27
10008cae:	d51d      	bpl.n	10008cec <mpu_read_fifo+0x1ac>
        gyro[2] = (data[index+0] << 8) | data[index+1];
10008cb0:	a905      	add	r1, sp, #20
10008cb2:	5cca      	ldrb	r2, [r1, r3]
10008cb4:	0212      	lsls	r2, r2, #8
10008cb6:	18cb      	adds	r3, r1, r3
10008cb8:	785b      	ldrb	r3, [r3, #1]
10008cba:	4313      	orrs	r3, r2
10008cbc:	9a01      	ldr	r2, [sp, #4]
10008cbe:	8093      	strh	r3, [r2, #4]
        sensors[0] |= INV_Z_GYRO;
10008cc0:	7832      	ldrb	r2, [r6, #0]
10008cc2:	2310      	movs	r3, #16
10008cc4:	4313      	orrs	r3, r2
10008cc6:	7033      	strb	r3, [r6, #0]
10008cc8:	e010      	b.n	10008cec <mpu_read_fifo+0x1ac>
    unsigned char data[MAX_PACKET_LENGTH];
    unsigned char packet_size = 0;
    unsigned short fifo_count, index = 0;

    if (st.chip_cfg.dmp_on)
        return -1;
10008cca:	2401      	movs	r4, #1
10008ccc:	4264      	negs	r4, r4
10008cce:	e00d      	b.n	10008cec <mpu_read_fifo+0x1ac>

    sensors[0] = 0;
    if (!st.chip_cfg.sensors)
        return -1;
10008cd0:	2401      	movs	r4, #1
10008cd2:	4264      	negs	r4, r4
10008cd4:	e00a      	b.n	10008cec <mpu_read_fifo+0x1ac>
    if (!st.chip_cfg.fifo_enable)
        return -1;
10008cd6:	2401      	movs	r4, #1
10008cd8:	4264      	negs	r4, r4
10008cda:	e007      	b.n	10008cec <mpu_read_fifo+0x1ac>
        packet_size += 2;
    if (st.chip_cfg.fifo_enable & INV_XYZ_ACCEL)
        packet_size += 6;

    if (i2c_read(st.hw->addr, st.reg->fifo_count_h, 2, data))
        return -1;
10008cdc:	2401      	movs	r4, #1
10008cde:	4264      	negs	r4, r4
10008ce0:	e004      	b.n	10008cec <mpu_read_fifo+0x1ac>
        return 0;
//    log_i("FIFO count: %hd\n", fifo_count);
    if (fifo_count > (st.hw->max_fifo >> 1)) {
        /* FIFO is 50% full, better check overflow bit. */
        if (i2c_read(st.hw->addr, st.reg->int_status, 1, data))
            return -1;
10008ce2:	2401      	movs	r4, #1
10008ce4:	4264      	negs	r4, r4
10008ce6:	e001      	b.n	10008cec <mpu_read_fifo+0x1ac>
        }
    }
    get_ms((unsigned long*)timestamp);

    if (i2c_read(st.hw->addr, st.reg->fifo_r_w, packet_size, data))
        return -1;
10008ce8:	2401      	movs	r4, #1
10008cea:	4264      	negs	r4, r4
        sensors[0] |= INV_Z_GYRO;
        index += 2;
    }

    return 0;
}
10008cec:	0020      	movs	r0, r4
10008cee:	b008      	add	sp, #32
10008cf0:	bc04      	pop	{r2}
10008cf2:	4691      	mov	r9, r2
10008cf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
10008cf6:	46c0      	nop			; (mov r8, r8)
10008cf8:	10018608 	.word	0x10018608
10008cfc:	1000ab59 	.word	0x1000ab59
10008d00:	1000860d 	.word	0x1000860d
10008d04:	1000b661 	.word	0x1000b661
10008d08:	10013249 	.word	0x10013249

10008d0c <mpu_set_bypass>:
 *  @brief      Set device to bypass mode.
 *  @param[in]  bypass_on   1 to enable bypass mode.
 *  @return     0 if successful.
 */
int mpu_set_bypass(unsigned char bypass_on)
{
10008d0c:	b530      	push	{r4, r5, lr}
10008d0e:	b083      	sub	sp, #12
10008d10:	0004      	movs	r4, r0
    unsigned char tmp;

    if (st.chip_cfg.bypass_mode == bypass_on)
10008d12:	4b59      	ldr	r3, [pc, #356]	; (10008e78 <mpu_set_bypass+0x16c>)
10008d14:	7c9b      	ldrb	r3, [r3, #18]
10008d16:	4283      	cmp	r3, r0
10008d18:	d100      	bne.n	10008d1c <mpu_set_bypass+0x10>
10008d1a:	e097      	b.n	10008e4c <mpu_set_bypass+0x140>
        return 0;

    if (bypass_on) {
10008d1c:	2800      	cmp	r0, #0
10008d1e:	d042      	beq.n	10008da6 <mpu_set_bypass+0x9a>
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
10008d20:	4b55      	ldr	r3, [pc, #340]	; (10008e78 <mpu_set_bypass+0x16c>)
10008d22:	681a      	ldr	r2, [r3, #0]
10008d24:	7911      	ldrb	r1, [r2, #4]
10008d26:	685b      	ldr	r3, [r3, #4]
10008d28:	7818      	ldrb	r0, [r3, #0]
10008d2a:	466b      	mov	r3, sp
10008d2c:	3307      	adds	r3, #7
10008d2e:	2201      	movs	r2, #1
10008d30:	4d52      	ldr	r5, [pc, #328]	; (10008e7c <mpu_set_bypass+0x170>)
10008d32:	47a8      	blx	r5
10008d34:	2800      	cmp	r0, #0
10008d36:	d000      	beq.n	10008d3a <mpu_set_bypass+0x2e>
10008d38:	e08a      	b.n	10008e50 <mpu_set_bypass+0x144>
            return -1;
        tmp &= ~BIT_AUX_IF_EN;
10008d3a:	466b      	mov	r3, sp
10008d3c:	3307      	adds	r3, #7
10008d3e:	781a      	ldrb	r2, [r3, #0]
10008d40:	2120      	movs	r1, #32
10008d42:	438a      	bics	r2, r1
10008d44:	701a      	strb	r2, [r3, #0]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
10008d46:	4a4c      	ldr	r2, [pc, #304]	; (10008e78 <mpu_set_bypass+0x16c>)
10008d48:	6811      	ldr	r1, [r2, #0]
10008d4a:	7909      	ldrb	r1, [r1, #4]
10008d4c:	6852      	ldr	r2, [r2, #4]
10008d4e:	7810      	ldrb	r0, [r2, #0]
10008d50:	2201      	movs	r2, #1
10008d52:	4d4b      	ldr	r5, [pc, #300]	; (10008e80 <mpu_set_bypass+0x174>)
10008d54:	47a8      	blx	r5
10008d56:	2800      	cmp	r0, #0
10008d58:	d17d      	bne.n	10008e56 <mpu_set_bypass+0x14a>
            return -1;
        delay_ms(3);
10008d5a:	3003      	adds	r0, #3
10008d5c:	4b49      	ldr	r3, [pc, #292]	; (10008e84 <mpu_set_bypass+0x178>)
10008d5e:	4798      	blx	r3
        tmp = BIT_BYPASS_EN;
10008d60:	2202      	movs	r2, #2
10008d62:	466b      	mov	r3, sp
10008d64:	71da      	strb	r2, [r3, #7]
        if (st.chip_cfg.active_low_int)
10008d66:	2322      	movs	r3, #34	; 0x22
10008d68:	4a43      	ldr	r2, [pc, #268]	; (10008e78 <mpu_set_bypass+0x16c>)
10008d6a:	5cd3      	ldrb	r3, [r2, r3]
10008d6c:	2b00      	cmp	r3, #0
10008d6e:	d002      	beq.n	10008d76 <mpu_set_bypass+0x6a>
            tmp |= BIT_ACTL;
10008d70:	2282      	movs	r2, #130	; 0x82
10008d72:	466b      	mov	r3, sp
10008d74:	71da      	strb	r2, [r3, #7]
        if (st.chip_cfg.latched_int)
10008d76:	2323      	movs	r3, #35	; 0x23
10008d78:	4a3f      	ldr	r2, [pc, #252]	; (10008e78 <mpu_set_bypass+0x16c>)
10008d7a:	5cd3      	ldrb	r3, [r2, r3]
10008d7c:	2b00      	cmp	r3, #0
10008d7e:	d005      	beq.n	10008d8c <mpu_set_bypass+0x80>
            tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
10008d80:	466b      	mov	r3, sp
10008d82:	1dda      	adds	r2, r3, #7
10008d84:	79d9      	ldrb	r1, [r3, #7]
10008d86:	2330      	movs	r3, #48	; 0x30
10008d88:	430b      	orrs	r3, r1
10008d8a:	7013      	strb	r3, [r2, #0]
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
10008d8c:	4b3a      	ldr	r3, [pc, #232]	; (10008e78 <mpu_set_bypass+0x16c>)
10008d8e:	681a      	ldr	r2, [r3, #0]
10008d90:	7dd1      	ldrb	r1, [r2, #23]
10008d92:	685b      	ldr	r3, [r3, #4]
10008d94:	7818      	ldrb	r0, [r3, #0]
10008d96:	466b      	mov	r3, sp
10008d98:	3307      	adds	r3, #7
10008d9a:	2201      	movs	r2, #1
10008d9c:	4d38      	ldr	r5, [pc, #224]	; (10008e80 <mpu_set_bypass+0x174>)
10008d9e:	47a8      	blx	r5
10008da0:	2800      	cmp	r0, #0
10008da2:	d04f      	beq.n	10008e44 <mpu_set_bypass+0x138>
10008da4:	e05a      	b.n	10008e5c <mpu_set_bypass+0x150>
            return -1;
    } else {
        /* Enable I2C master mode if compass is being used. */
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
10008da6:	4b34      	ldr	r3, [pc, #208]	; (10008e78 <mpu_set_bypass+0x16c>)
10008da8:	681a      	ldr	r2, [r3, #0]
10008daa:	7911      	ldrb	r1, [r2, #4]
10008dac:	685b      	ldr	r3, [r3, #4]
10008dae:	7818      	ldrb	r0, [r3, #0]
10008db0:	466b      	mov	r3, sp
10008db2:	3307      	adds	r3, #7
10008db4:	2201      	movs	r2, #1
10008db6:	4d31      	ldr	r5, [pc, #196]	; (10008e7c <mpu_set_bypass+0x170>)
10008db8:	47a8      	blx	r5
10008dba:	2800      	cmp	r0, #0
10008dbc:	d151      	bne.n	10008e62 <mpu_set_bypass+0x156>
            return -1;
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
10008dbe:	4b2e      	ldr	r3, [pc, #184]	; (10008e78 <mpu_set_bypass+0x16c>)
10008dc0:	7a9b      	ldrb	r3, [r3, #10]
10008dc2:	07db      	lsls	r3, r3, #31
10008dc4:	d506      	bpl.n	10008dd4 <mpu_set_bypass+0xc8>
            tmp |= BIT_AUX_IF_EN;
10008dc6:	466b      	mov	r3, sp
10008dc8:	1dda      	adds	r2, r3, #7
10008dca:	79d9      	ldrb	r1, [r3, #7]
10008dcc:	2320      	movs	r3, #32
10008dce:	430b      	orrs	r3, r1
10008dd0:	7013      	strb	r3, [r2, #0]
10008dd2:	e005      	b.n	10008de0 <mpu_set_bypass+0xd4>
        else
            tmp &= ~BIT_AUX_IF_EN;
10008dd4:	466b      	mov	r3, sp
10008dd6:	1dda      	adds	r2, r3, #7
10008dd8:	79db      	ldrb	r3, [r3, #7]
10008dda:	2120      	movs	r1, #32
10008ddc:	438b      	bics	r3, r1
10008dde:	7013      	strb	r3, [r2, #0]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
10008de0:	4b25      	ldr	r3, [pc, #148]	; (10008e78 <mpu_set_bypass+0x16c>)
10008de2:	681a      	ldr	r2, [r3, #0]
10008de4:	7911      	ldrb	r1, [r2, #4]
10008de6:	685b      	ldr	r3, [r3, #4]
10008de8:	7818      	ldrb	r0, [r3, #0]
10008dea:	466b      	mov	r3, sp
10008dec:	3307      	adds	r3, #7
10008dee:	2201      	movs	r2, #1
10008df0:	4d23      	ldr	r5, [pc, #140]	; (10008e80 <mpu_set_bypass+0x174>)
10008df2:	47a8      	blx	r5
10008df4:	2800      	cmp	r0, #0
10008df6:	d137      	bne.n	10008e68 <mpu_set_bypass+0x15c>
            return -1;
        delay_ms(3);
10008df8:	3003      	adds	r0, #3
10008dfa:	4b22      	ldr	r3, [pc, #136]	; (10008e84 <mpu_set_bypass+0x178>)
10008dfc:	4798      	blx	r3
        if (st.chip_cfg.active_low_int)
10008dfe:	2322      	movs	r3, #34	; 0x22
10008e00:	4a1d      	ldr	r2, [pc, #116]	; (10008e78 <mpu_set_bypass+0x16c>)
10008e02:	5cd3      	ldrb	r3, [r2, r3]
10008e04:	2b00      	cmp	r3, #0
10008e06:	d003      	beq.n	10008e10 <mpu_set_bypass+0x104>
            tmp = BIT_ACTL;
10008e08:	2280      	movs	r2, #128	; 0x80
10008e0a:	466b      	mov	r3, sp
10008e0c:	71da      	strb	r2, [r3, #7]
10008e0e:	e002      	b.n	10008e16 <mpu_set_bypass+0x10a>
        else
            tmp = 0;
10008e10:	2200      	movs	r2, #0
10008e12:	466b      	mov	r3, sp
10008e14:	71da      	strb	r2, [r3, #7]
        if (st.chip_cfg.latched_int)
10008e16:	2323      	movs	r3, #35	; 0x23
10008e18:	4a17      	ldr	r2, [pc, #92]	; (10008e78 <mpu_set_bypass+0x16c>)
10008e1a:	5cd3      	ldrb	r3, [r2, r3]
10008e1c:	2b00      	cmp	r3, #0
10008e1e:	d005      	beq.n	10008e2c <mpu_set_bypass+0x120>
            tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
10008e20:	466b      	mov	r3, sp
10008e22:	1dda      	adds	r2, r3, #7
10008e24:	79d9      	ldrb	r1, [r3, #7]
10008e26:	2330      	movs	r3, #48	; 0x30
10008e28:	430b      	orrs	r3, r1
10008e2a:	7013      	strb	r3, [r2, #0]
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
10008e2c:	4b12      	ldr	r3, [pc, #72]	; (10008e78 <mpu_set_bypass+0x16c>)
10008e2e:	681a      	ldr	r2, [r3, #0]
10008e30:	7dd1      	ldrb	r1, [r2, #23]
10008e32:	685b      	ldr	r3, [r3, #4]
10008e34:	7818      	ldrb	r0, [r3, #0]
10008e36:	466b      	mov	r3, sp
10008e38:	3307      	adds	r3, #7
10008e3a:	2201      	movs	r2, #1
10008e3c:	4d10      	ldr	r5, [pc, #64]	; (10008e80 <mpu_set_bypass+0x174>)
10008e3e:	47a8      	blx	r5
10008e40:	2800      	cmp	r0, #0
10008e42:	d114      	bne.n	10008e6e <mpu_set_bypass+0x162>
            return -1;
    }
    st.chip_cfg.bypass_mode = bypass_on;
10008e44:	4b0c      	ldr	r3, [pc, #48]	; (10008e78 <mpu_set_bypass+0x16c>)
10008e46:	749c      	strb	r4, [r3, #18]
    return 0;
10008e48:	2000      	movs	r0, #0
10008e4a:	e012      	b.n	10008e72 <mpu_set_bypass+0x166>
int mpu_set_bypass(unsigned char bypass_on)
{
    unsigned char tmp;

    if (st.chip_cfg.bypass_mode == bypass_on)
        return 0;
10008e4c:	2000      	movs	r0, #0
10008e4e:	e010      	b.n	10008e72 <mpu_set_bypass+0x166>

    if (bypass_on) {
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
            return -1;
10008e50:	2001      	movs	r0, #1
10008e52:	4240      	negs	r0, r0
10008e54:	e00d      	b.n	10008e72 <mpu_set_bypass+0x166>
        tmp &= ~BIT_AUX_IF_EN;
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
            return -1;
10008e56:	2001      	movs	r0, #1
10008e58:	4240      	negs	r0, r0
10008e5a:	e00a      	b.n	10008e72 <mpu_set_bypass+0x166>
        if (st.chip_cfg.active_low_int)
            tmp |= BIT_ACTL;
        if (st.chip_cfg.latched_int)
            tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
            return -1;
10008e5c:	2001      	movs	r0, #1
10008e5e:	4240      	negs	r0, r0
10008e60:	e007      	b.n	10008e72 <mpu_set_bypass+0x166>
    } else {
        /* Enable I2C master mode if compass is being used. */
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
            return -1;
10008e62:	2001      	movs	r0, #1
10008e64:	4240      	negs	r0, r0
10008e66:	e004      	b.n	10008e72 <mpu_set_bypass+0x166>
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
            tmp |= BIT_AUX_IF_EN;
        else
            tmp &= ~BIT_AUX_IF_EN;
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
            return -1;
10008e68:	2001      	movs	r0, #1
10008e6a:	4240      	negs	r0, r0
10008e6c:	e001      	b.n	10008e72 <mpu_set_bypass+0x166>
        else
            tmp = 0;
        if (st.chip_cfg.latched_int)
            tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
            return -1;
10008e6e:	2001      	movs	r0, #1
10008e70:	4240      	negs	r0, r0
    }
    st.chip_cfg.bypass_mode = bypass_on;
    return 0;
}
10008e72:	b003      	add	sp, #12
10008e74:	bd30      	pop	{r4, r5, pc}
10008e76:	46c0      	nop			; (mov r8, r8)
10008e78:	10018608 	.word	0x10018608
10008e7c:	1000ab59 	.word	0x1000ab59
10008e80:	1000aab9 	.word	0x1000aab9
10008e84:	10008129 	.word	0x10008129

10008e88 <mpu_set_int_latched>:
 *  Any MPU register will clear the interrupt.
 *  @param[in]  enable  1 to enable, 0 to disable.
 *  @return     0 if successful.
 */
int mpu_set_int_latched(unsigned char enable)
{
10008e88:	b530      	push	{r4, r5, lr}
10008e8a:	b083      	sub	sp, #12
10008e8c:	0004      	movs	r4, r0
    unsigned char tmp;
    if (st.chip_cfg.latched_int == enable)
10008e8e:	2323      	movs	r3, #35	; 0x23
10008e90:	4a1c      	ldr	r2, [pc, #112]	; (10008f04 <mpu_set_int_latched+0x7c>)
10008e92:	5cd3      	ldrb	r3, [r2, r3]
10008e94:	4283      	cmp	r3, r0
10008e96:	d02e      	beq.n	10008ef6 <mpu_set_int_latched+0x6e>
        return 0;

    if (enable)
10008e98:	2800      	cmp	r0, #0
10008e9a:	d003      	beq.n	10008ea4 <mpu_set_int_latched+0x1c>
        tmp = BIT_LATCH_EN | BIT_ANY_RD_CLR;
10008e9c:	2230      	movs	r2, #48	; 0x30
10008e9e:	466b      	mov	r3, sp
10008ea0:	71da      	strb	r2, [r3, #7]
10008ea2:	e002      	b.n	10008eaa <mpu_set_int_latched+0x22>
    else
        tmp = 0;
10008ea4:	2200      	movs	r2, #0
10008ea6:	466b      	mov	r3, sp
10008ea8:	71da      	strb	r2, [r3, #7]
    if (st.chip_cfg.bypass_mode)
10008eaa:	4b16      	ldr	r3, [pc, #88]	; (10008f04 <mpu_set_int_latched+0x7c>)
10008eac:	7c9b      	ldrb	r3, [r3, #18]
10008eae:	2b00      	cmp	r3, #0
10008eb0:	d005      	beq.n	10008ebe <mpu_set_int_latched+0x36>
        tmp |= BIT_BYPASS_EN;
10008eb2:	466b      	mov	r3, sp
10008eb4:	1dda      	adds	r2, r3, #7
10008eb6:	79d9      	ldrb	r1, [r3, #7]
10008eb8:	2302      	movs	r3, #2
10008eba:	430b      	orrs	r3, r1
10008ebc:	7013      	strb	r3, [r2, #0]
    if (st.chip_cfg.active_low_int)
10008ebe:	2322      	movs	r3, #34	; 0x22
10008ec0:	4a10      	ldr	r2, [pc, #64]	; (10008f04 <mpu_set_int_latched+0x7c>)
10008ec2:	5cd3      	ldrb	r3, [r2, r3]
10008ec4:	2b00      	cmp	r3, #0
10008ec6:	d006      	beq.n	10008ed6 <mpu_set_int_latched+0x4e>
        tmp |= BIT_ACTL;
10008ec8:	466b      	mov	r3, sp
10008eca:	1dda      	adds	r2, r3, #7
10008ecc:	79db      	ldrb	r3, [r3, #7]
10008ece:	2180      	movs	r1, #128	; 0x80
10008ed0:	4249      	negs	r1, r1
10008ed2:	430b      	orrs	r3, r1
10008ed4:	7013      	strb	r3, [r2, #0]
    if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
10008ed6:	4b0b      	ldr	r3, [pc, #44]	; (10008f04 <mpu_set_int_latched+0x7c>)
10008ed8:	681a      	ldr	r2, [r3, #0]
10008eda:	7dd1      	ldrb	r1, [r2, #23]
10008edc:	685b      	ldr	r3, [r3, #4]
10008ede:	7818      	ldrb	r0, [r3, #0]
10008ee0:	466b      	mov	r3, sp
10008ee2:	3307      	adds	r3, #7
10008ee4:	2201      	movs	r2, #1
10008ee6:	4d08      	ldr	r5, [pc, #32]	; (10008f08 <mpu_set_int_latched+0x80>)
10008ee8:	47a8      	blx	r5
10008eea:	2800      	cmp	r0, #0
10008eec:	d105      	bne.n	10008efa <mpu_set_int_latched+0x72>
        return -1;
    st.chip_cfg.latched_int = enable;
10008eee:	2323      	movs	r3, #35	; 0x23
10008ef0:	4a04      	ldr	r2, [pc, #16]	; (10008f04 <mpu_set_int_latched+0x7c>)
10008ef2:	54d4      	strb	r4, [r2, r3]
    return 0;
10008ef4:	e003      	b.n	10008efe <mpu_set_int_latched+0x76>
 */
int mpu_set_int_latched(unsigned char enable)
{
    unsigned char tmp;
    if (st.chip_cfg.latched_int == enable)
        return 0;
10008ef6:	2000      	movs	r0, #0
10008ef8:	e001      	b.n	10008efe <mpu_set_int_latched+0x76>
    if (st.chip_cfg.bypass_mode)
        tmp |= BIT_BYPASS_EN;
    if (st.chip_cfg.active_low_int)
        tmp |= BIT_ACTL;
    if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
        return -1;
10008efa:	2001      	movs	r0, #1
10008efc:	4240      	negs	r0, r0
    st.chip_cfg.latched_int = enable;
    return 0;
}
10008efe:	b003      	add	sp, #12
10008f00:	bd30      	pop	{r4, r5, pc}
10008f02:	46c0      	nop			; (mov r8, r8)
10008f04:	10018608 	.word	0x10018608
10008f08:	1000aab9 	.word	0x1000aab9

10008f0c <mpu_lp_accel_mode>:
 *  @param[in]  rate        Minimum sampling rate, or zero to disable LP
 *                          accel mode.
 *  @return     0 if successful.
 */
int mpu_lp_accel_mode(unsigned short rate)
{
10008f0c:	b510      	push	{r4, lr}
10008f0e:	b082      	sub	sp, #8
10008f10:	1e04      	subs	r4, r0, #0
    unsigned char tmp[2];

    if (rate > 40)
10008f12:	2c28      	cmp	r4, #40	; 0x28
10008f14:	d878      	bhi.n	10009008 <mpu_lp_accel_mode+0xfc>
        return -1;

    if (!rate) {
10008f16:	2800      	cmp	r0, #0
10008f18:	d115      	bne.n	10008f46 <mpu_lp_accel_mode+0x3a>
        mpu_set_int_latched(0);
10008f1a:	2000      	movs	r0, #0
10008f1c:	4b44      	ldr	r3, [pc, #272]	; (10009030 <mpu_lp_accel_mode+0x124>)
10008f1e:	4798      	blx	r3
        tmp[0] = 0;
10008f20:	ab01      	add	r3, sp, #4
10008f22:	2200      	movs	r2, #0
10008f24:	701a      	strb	r2, [r3, #0]
        tmp[1] = BIT_STBY_XYZG;
10008f26:	3207      	adds	r2, #7
10008f28:	705a      	strb	r2, [r3, #1]
        if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
10008f2a:	4a42      	ldr	r2, [pc, #264]	; (10009034 <mpu_lp_accel_mode+0x128>)
10008f2c:	6811      	ldr	r1, [r2, #0]
10008f2e:	7d49      	ldrb	r1, [r1, #21]
10008f30:	6852      	ldr	r2, [r2, #4]
10008f32:	7810      	ldrb	r0, [r2, #0]
10008f34:	2202      	movs	r2, #2
10008f36:	4c40      	ldr	r4, [pc, #256]	; (10009038 <mpu_lp_accel_mode+0x12c>)
10008f38:	47a0      	blx	r4
10008f3a:	1e04      	subs	r4, r0, #0
10008f3c:	d167      	bne.n	1000900e <mpu_lp_accel_mode+0x102>
            return -1;
        st.chip_cfg.lp_accel_mode = 0;
10008f3e:	2200      	movs	r2, #0
10008f40:	4b3c      	ldr	r3, [pc, #240]	; (10009034 <mpu_lp_accel_mode+0x128>)
10008f42:	751a      	strb	r2, [r3, #20]
        return 0;
10008f44:	e071      	b.n	1000902a <mpu_lp_accel_mode+0x11e>
     * it gets a chance to deassert the interrupt pin; therefore, we shift this
     * responsibility over to the MCU.
     *
     * Any register read will clear the interrupt.
     */
    mpu_set_int_latched(1);
10008f46:	2001      	movs	r0, #1
10008f48:	4b39      	ldr	r3, [pc, #228]	; (10009030 <mpu_lp_accel_mode+0x124>)
10008f4a:	4798      	blx	r3
    tmp[1] = (tmp[1] << 6) | BIT_STBY_XYZG;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
        return -1;
#elif defined MPU6500
    /* Set wake frequency. */
    if (rate == 1)
10008f4c:	2c01      	cmp	r4, #1
10008f4e:	d103      	bne.n	10008f58 <mpu_lp_accel_mode+0x4c>
        tmp[0] = INV_LPA_1_25HZ;
10008f50:	2202      	movs	r2, #2
10008f52:	ab01      	add	r3, sp, #4
10008f54:	701a      	strb	r2, [r3, #0]
10008f56:	e01a      	b.n	10008f8e <mpu_lp_accel_mode+0x82>
    else if (rate == 2)
10008f58:	2c02      	cmp	r4, #2
10008f5a:	d103      	bne.n	10008f64 <mpu_lp_accel_mode+0x58>
        tmp[0] = INV_LPA_2_5HZ;
10008f5c:	2203      	movs	r2, #3
10008f5e:	ab01      	add	r3, sp, #4
10008f60:	701a      	strb	r2, [r3, #0]
10008f62:	e014      	b.n	10008f8e <mpu_lp_accel_mode+0x82>
    else if (rate <= 5)
10008f64:	2c05      	cmp	r4, #5
10008f66:	d803      	bhi.n	10008f70 <mpu_lp_accel_mode+0x64>
        tmp[0] = INV_LPA_5HZ;
10008f68:	2204      	movs	r2, #4
10008f6a:	ab01      	add	r3, sp, #4
10008f6c:	701a      	strb	r2, [r3, #0]
10008f6e:	e00e      	b.n	10008f8e <mpu_lp_accel_mode+0x82>
    else if (rate <= 10)
10008f70:	2c0a      	cmp	r4, #10
10008f72:	d803      	bhi.n	10008f7c <mpu_lp_accel_mode+0x70>
        tmp[0] = INV_LPA_10HZ;
10008f74:	2205      	movs	r2, #5
10008f76:	ab01      	add	r3, sp, #4
10008f78:	701a      	strb	r2, [r3, #0]
10008f7a:	e008      	b.n	10008f8e <mpu_lp_accel_mode+0x82>
    else if (rate <= 20)
10008f7c:	2c14      	cmp	r4, #20
10008f7e:	d803      	bhi.n	10008f88 <mpu_lp_accel_mode+0x7c>
        tmp[0] = INV_LPA_20HZ;
10008f80:	2206      	movs	r2, #6
10008f82:	ab01      	add	r3, sp, #4
10008f84:	701a      	strb	r2, [r3, #0]
10008f86:	e002      	b.n	10008f8e <mpu_lp_accel_mode+0x82>
    else if (rate <= 40)
        tmp[0] = INV_LPA_40HZ;
10008f88:	2207      	movs	r2, #7
10008f8a:	ab01      	add	r3, sp, #4
10008f8c:	701a      	strb	r2, [r3, #0]
        tmp[0] = INV_LPA_160HZ;
    else if (rate <= 320)
        tmp[0] = INV_LPA_320HZ;
    else
        tmp[0] = INV_LPA_640HZ;
    if (i2c_write(st.hw->addr, st.reg->lp_accel_odr, 1, tmp))
10008f8e:	4b29      	ldr	r3, [pc, #164]	; (10009034 <mpu_lp_accel_mode+0x128>)
10008f90:	681a      	ldr	r2, [r3, #0]
10008f92:	7a51      	ldrb	r1, [r2, #9]
10008f94:	685b      	ldr	r3, [r3, #4]
10008f96:	7818      	ldrb	r0, [r3, #0]
10008f98:	ab01      	add	r3, sp, #4
10008f9a:	2201      	movs	r2, #1
10008f9c:	4c26      	ldr	r4, [pc, #152]	; (10009038 <mpu_lp_accel_mode+0x12c>)
10008f9e:	47a0      	blx	r4
10008fa0:	2800      	cmp	r0, #0
10008fa2:	d137      	bne.n	10009014 <mpu_lp_accel_mode+0x108>
        return -1;
    /* Enable LP ACCEL mode, ACCEL_FCHOICE_B=1*/
    if (i2c_read(st.hw->addr, st.reg->accel_cfg2, 1, tmp))
10008fa4:	4b23      	ldr	r3, [pc, #140]	; (10009034 <mpu_lp_accel_mode+0x128>)
10008fa6:	681a      	ldr	r2, [r3, #0]
10008fa8:	7a11      	ldrb	r1, [r2, #8]
10008faa:	685b      	ldr	r3, [r3, #4]
10008fac:	7818      	ldrb	r0, [r3, #0]
10008fae:	ab01      	add	r3, sp, #4
10008fb0:	2201      	movs	r2, #1
10008fb2:	4c22      	ldr	r4, [pc, #136]	; (1000903c <mpu_lp_accel_mode+0x130>)
10008fb4:	47a0      	blx	r4
10008fb6:	2800      	cmp	r0, #0
10008fb8:	d12f      	bne.n	1000901a <mpu_lp_accel_mode+0x10e>
       	return -1;

    tmp[0] = BIT_ACCL_FC_B | tmp[0];
10008fba:	ab01      	add	r3, sp, #4
10008fbc:	7819      	ldrb	r1, [r3, #0]
10008fbe:	2208      	movs	r2, #8
10008fc0:	430a      	orrs	r2, r1
10008fc2:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->accel_cfg2, 1, tmp))
10008fc4:	4a1b      	ldr	r2, [pc, #108]	; (10009034 <mpu_lp_accel_mode+0x128>)
10008fc6:	6811      	ldr	r1, [r2, #0]
10008fc8:	7a09      	ldrb	r1, [r1, #8]
10008fca:	6852      	ldr	r2, [r2, #4]
10008fcc:	7810      	ldrb	r0, [r2, #0]
10008fce:	2201      	movs	r2, #1
10008fd0:	4c19      	ldr	r4, [pc, #100]	; (10009038 <mpu_lp_accel_mode+0x12c>)
10008fd2:	47a0      	blx	r4
10008fd4:	2800      	cmp	r0, #0
10008fd6:	d123      	bne.n	10009020 <mpu_lp_accel_mode+0x114>
    	return -1;
    tmp[0] = BIT_LPA_CYCLE;
10008fd8:	ab01      	add	r3, sp, #4
10008fda:	2220      	movs	r2, #32
10008fdc:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, tmp))
10008fde:	4a15      	ldr	r2, [pc, #84]	; (10009034 <mpu_lp_accel_mode+0x128>)
10008fe0:	6811      	ldr	r1, [r2, #0]
10008fe2:	7d49      	ldrb	r1, [r1, #21]
10008fe4:	6852      	ldr	r2, [r2, #4]
10008fe6:	7810      	ldrb	r0, [r2, #0]
10008fe8:	2201      	movs	r2, #1
10008fea:	4c13      	ldr	r4, [pc, #76]	; (10009038 <mpu_lp_accel_mode+0x12c>)
10008fec:	47a0      	blx	r4
10008fee:	1e04      	subs	r4, r0, #0
10008ff0:	d119      	bne.n	10009026 <mpu_lp_accel_mode+0x11a>
        return -1;
#endif
    st.chip_cfg.sensors = INV_XYZ_ACCEL;
10008ff2:	4b10      	ldr	r3, [pc, #64]	; (10009034 <mpu_lp_accel_mode+0x128>)
10008ff4:	2208      	movs	r2, #8
10008ff6:	729a      	strb	r2, [r3, #10]
    st.chip_cfg.clk_src = 0;
10008ff8:	2200      	movs	r2, #0
10008ffa:	731a      	strb	r2, [r3, #12]
    st.chip_cfg.lp_accel_mode = 1;
10008ffc:	3201      	adds	r2, #1
10008ffe:	751a      	strb	r2, [r3, #20]
    mpu_configure_fifo(0);
10009000:	2000      	movs	r0, #0
10009002:	4b0f      	ldr	r3, [pc, #60]	; (10009040 <mpu_lp_accel_mode+0x134>)
10009004:	4798      	blx	r3

    return 0;
10009006:	e010      	b.n	1000902a <mpu_lp_accel_mode+0x11e>
int mpu_lp_accel_mode(unsigned short rate)
{
    unsigned char tmp[2];

    if (rate > 40)
        return -1;
10009008:	2401      	movs	r4, #1
1000900a:	4264      	negs	r4, r4
1000900c:	e00d      	b.n	1000902a <mpu_lp_accel_mode+0x11e>
    if (!rate) {
        mpu_set_int_latched(0);
        tmp[0] = 0;
        tmp[1] = BIT_STBY_XYZG;
        if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
            return -1;
1000900e:	2401      	movs	r4, #1
10009010:	4264      	negs	r4, r4
10009012:	e00a      	b.n	1000902a <mpu_lp_accel_mode+0x11e>
    else if (rate <= 320)
        tmp[0] = INV_LPA_320HZ;
    else
        tmp[0] = INV_LPA_640HZ;
    if (i2c_write(st.hw->addr, st.reg->lp_accel_odr, 1, tmp))
        return -1;
10009014:	2401      	movs	r4, #1
10009016:	4264      	negs	r4, r4
10009018:	e007      	b.n	1000902a <mpu_lp_accel_mode+0x11e>
    /* Enable LP ACCEL mode, ACCEL_FCHOICE_B=1*/
    if (i2c_read(st.hw->addr, st.reg->accel_cfg2, 1, tmp))
       	return -1;
1000901a:	2401      	movs	r4, #1
1000901c:	4264      	negs	r4, r4
1000901e:	e004      	b.n	1000902a <mpu_lp_accel_mode+0x11e>

    tmp[0] = BIT_ACCL_FC_B | tmp[0];
    if (i2c_write(st.hw->addr, st.reg->accel_cfg2, 1, tmp))
    	return -1;
10009020:	2401      	movs	r4, #1
10009022:	4264      	negs	r4, r4
10009024:	e001      	b.n	1000902a <mpu_lp_accel_mode+0x11e>
    tmp[0] = BIT_LPA_CYCLE;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, tmp))
        return -1;
10009026:	2401      	movs	r4, #1
10009028:	4264      	negs	r4, r4
    st.chip_cfg.clk_src = 0;
    st.chip_cfg.lp_accel_mode = 1;
    mpu_configure_fifo(0);

    return 0;
}
1000902a:	0020      	movs	r0, r4
1000902c:	b002      	add	sp, #8
1000902e:	bd10      	pop	{r4, pc}
10009030:	10008e89 	.word	0x10008e89
10009034:	10018608 	.word	0x10018608
10009038:	1000aab9 	.word	0x1000aab9
1000903c:	1000ab59 	.word	0x1000ab59
10009040:	10008ad5 	.word	0x10008ad5

10009044 <mpu_set_sample_rate>:
 *  Sampling rate must be between 4Hz and 1kHz.
 *  @param[in]  rate    Desired sampling rate (Hz).
 *  @return     0 if successful.
 */
int mpu_set_sample_rate(unsigned short rate)
{
10009044:	b530      	push	{r4, r5, lr}
10009046:	b083      	sub	sp, #12
10009048:	0004      	movs	r4, r0
    unsigned char data;

    if (!(st.chip_cfg.sensors))
1000904a:	4b2c      	ldr	r3, [pc, #176]	; (100090fc <mpu_set_sample_rate+0xb8>)
1000904c:	7a9b      	ldrb	r3, [r3, #10]
1000904e:	2b00      	cmp	r3, #0
10009050:	d048      	beq.n	100090e4 <mpu_set_sample_rate+0xa0>
        return -1;

    if (st.chip_cfg.dmp_on)
10009052:	2324      	movs	r3, #36	; 0x24
10009054:	4a29      	ldr	r2, [pc, #164]	; (100090fc <mpu_set_sample_rate+0xb8>)
10009056:	5cd3      	ldrb	r3, [r2, r3]
10009058:	2b00      	cmp	r3, #0
1000905a:	d146      	bne.n	100090ea <mpu_set_sample_rate+0xa6>
        return -1;
    else {
        if (st.chip_cfg.lp_accel_mode) {
1000905c:	7d13      	ldrb	r3, [r2, #20]
1000905e:	2b00      	cmp	r3, #0
10009060:	d00a      	beq.n	10009078 <mpu_set_sample_rate+0x34>
            if (rate && (rate <= 40)) {
10009062:	1e43      	subs	r3, r0, #1
10009064:	b29b      	uxth	r3, r3
10009066:	2b27      	cmp	r3, #39	; 0x27
10009068:	d803      	bhi.n	10009072 <mpu_set_sample_rate+0x2e>
                /* Just stay in low-power accel mode. */
                mpu_lp_accel_mode(rate);
1000906a:	4b25      	ldr	r3, [pc, #148]	; (10009100 <mpu_set_sample_rate+0xbc>)
1000906c:	4798      	blx	r3
                return 0;
1000906e:	2400      	movs	r4, #0
10009070:	e040      	b.n	100090f4 <mpu_set_sample_rate+0xb0>
            }
            /* Requested rate exceeds the allowed frequencies in LP accel mode,
             * switch back to full-power mode.
             */
            mpu_lp_accel_mode(0);
10009072:	2000      	movs	r0, #0
10009074:	4b22      	ldr	r3, [pc, #136]	; (10009100 <mpu_set_sample_rate+0xbc>)
10009076:	4798      	blx	r3
        }
        if (rate < 4)
            rate = 4;
10009078:	2104      	movs	r1, #4
            /* Requested rate exceeds the allowed frequencies in LP accel mode,
             * switch back to full-power mode.
             */
            mpu_lp_accel_mode(0);
        }
        if (rate < 4)
1000907a:	2c03      	cmp	r4, #3
1000907c:	d907      	bls.n	1000908e <mpu_set_sample_rate+0x4a>
1000907e:	1c21      	adds	r1, r4, #0
10009080:	23fa      	movs	r3, #250	; 0xfa
10009082:	009b      	lsls	r3, r3, #2
10009084:	429c      	cmp	r4, r3
10009086:	d901      	bls.n	1000908c <mpu_set_sample_rate+0x48>
10009088:	4b1e      	ldr	r3, [pc, #120]	; (10009104 <mpu_set_sample_rate+0xc0>)
1000908a:	8819      	ldrh	r1, [r3, #0]
1000908c:	b289      	uxth	r1, r1
            rate = 4;
        else if (rate > 1000)
            rate = 1000;

        data = 1000 / rate - 1;
1000908e:	466b      	mov	r3, sp
10009090:	1ddc      	adds	r4, r3, #7
10009092:	20fa      	movs	r0, #250	; 0xfa
10009094:	0080      	lsls	r0, r0, #2
10009096:	4b1c      	ldr	r3, [pc, #112]	; (10009108 <mpu_set_sample_rate+0xc4>)
10009098:	4798      	blx	r3
1000909a:	3801      	subs	r0, #1
1000909c:	7020      	strb	r0, [r4, #0]
        if (i2c_write(st.hw->addr, st.reg->rate_div, 1, &data))
1000909e:	4b17      	ldr	r3, [pc, #92]	; (100090fc <mpu_set_sample_rate+0xb8>)
100090a0:	681a      	ldr	r2, [r3, #0]
100090a2:	7851      	ldrb	r1, [r2, #1]
100090a4:	685b      	ldr	r3, [r3, #4]
100090a6:	7818      	ldrb	r0, [r3, #0]
100090a8:	0023      	movs	r3, r4
100090aa:	2201      	movs	r2, #1
100090ac:	4c17      	ldr	r4, [pc, #92]	; (1000910c <mpu_set_sample_rate+0xc8>)
100090ae:	47a0      	blx	r4
100090b0:	1e04      	subs	r4, r0, #0
100090b2:	d11d      	bne.n	100090f0 <mpu_set_sample_rate+0xac>
            return -1;

        st.chip_cfg.sample_rate = 1000 / (1 + data);
100090b4:	4d11      	ldr	r5, [pc, #68]	; (100090fc <mpu_set_sample_rate+0xb8>)
100090b6:	466b      	mov	r3, sp
100090b8:	79d9      	ldrb	r1, [r3, #7]
100090ba:	3101      	adds	r1, #1
100090bc:	20fa      	movs	r0, #250	; 0xfa
100090be:	0080      	lsls	r0, r0, #2
100090c0:	4b11      	ldr	r3, [pc, #68]	; (10009108 <mpu_set_sample_rate+0xc4>)
100090c2:	4798      	blx	r3
100090c4:	81e8      	strh	r0, [r5, #14]

#ifdef AK89xx_SECONDARY
        mpu_set_compass_sample_rate(min(st.chip_cfg.compass_sample_rate, MAX_COMPASS_SAMPLE_RATE));
100090c6:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
100090c8:	1c18      	adds	r0, r3, #0
100090ca:	b29b      	uxth	r3, r3
100090cc:	2b64      	cmp	r3, #100	; 0x64
100090ce:	d900      	bls.n	100090d2 <mpu_set_sample_rate+0x8e>
100090d0:	2064      	movs	r0, #100	; 0x64
100090d2:	b280      	uxth	r0, r0
100090d4:	4b0e      	ldr	r3, [pc, #56]	; (10009110 <mpu_set_sample_rate+0xcc>)
100090d6:	4798      	blx	r3
#endif

        /* Automatically set LPF to 1/2 sampling rate. */
        mpu_set_lpf(st.chip_cfg.sample_rate >> 1);
100090d8:	4b08      	ldr	r3, [pc, #32]	; (100090fc <mpu_set_sample_rate+0xb8>)
100090da:	89d8      	ldrh	r0, [r3, #14]
100090dc:	0840      	lsrs	r0, r0, #1
100090de:	4b0d      	ldr	r3, [pc, #52]	; (10009114 <mpu_set_sample_rate+0xd0>)
100090e0:	4798      	blx	r3
        return 0;
100090e2:	e007      	b.n	100090f4 <mpu_set_sample_rate+0xb0>
int mpu_set_sample_rate(unsigned short rate)
{
    unsigned char data;

    if (!(st.chip_cfg.sensors))
        return -1;
100090e4:	2401      	movs	r4, #1
100090e6:	4264      	negs	r4, r4
100090e8:	e004      	b.n	100090f4 <mpu_set_sample_rate+0xb0>

    if (st.chip_cfg.dmp_on)
        return -1;
100090ea:	2401      	movs	r4, #1
100090ec:	4264      	negs	r4, r4
100090ee:	e001      	b.n	100090f4 <mpu_set_sample_rate+0xb0>
        else if (rate > 1000)
            rate = 1000;

        data = 1000 / rate - 1;
        if (i2c_write(st.hw->addr, st.reg->rate_div, 1, &data))
            return -1;
100090f0:	2401      	movs	r4, #1
100090f2:	4264      	negs	r4, r4

        /* Automatically set LPF to 1/2 sampling rate. */
        mpu_set_lpf(st.chip_cfg.sample_rate >> 1);
        return 0;
    }
}
100090f4:	0020      	movs	r0, r4
100090f6:	b003      	add	sp, #12
100090f8:	bd30      	pop	{r4, r5, pc}
100090fa:	46c0      	nop			; (mov r8, r8)
100090fc:	10018608 	.word	0x10018608
10009100:	10008f0d 	.word	0x10008f0d
10009104:	100163fa 	.word	0x100163fa
10009108:	10013249 	.word	0x10013249
1000910c:	1000aab9 	.word	0x1000aab9
10009110:	10008a5d 	.word	0x10008a5d
10009114:	10008985 	.word	0x10008985

10009118 <mpu_set_sensors>:
 *  \n INV_XYZ_COMPASS
 *  @param[in]  sensors    Mask of sensors to wake.
 *  @return     0 if successful.
 */
int mpu_set_sensors(unsigned char sensors)
{
10009118:	b530      	push	{r4, r5, lr}
1000911a:	b083      	sub	sp, #12
1000911c:	0004      	movs	r4, r0
    unsigned char data;
#ifdef AK89xx_SECONDARY
    unsigned char user_ctrl;
#endif

    if (sensors & INV_XYZ_GYRO)
1000911e:	2370      	movs	r3, #112	; 0x70
10009120:	4203      	tst	r3, r0
10009122:	d003      	beq.n	1000912c <mpu_set_sensors+0x14>
        data = INV_CLK_PLL;
10009124:	2201      	movs	r2, #1
10009126:	466b      	mov	r3, sp
10009128:	71da      	strb	r2, [r3, #7]
1000912a:	e015      	b.n	10009158 <mpu_set_sensors+0x40>
    else if (sensors)
1000912c:	2800      	cmp	r0, #0
1000912e:	d003      	beq.n	10009138 <mpu_set_sensors+0x20>
        data = 0;
10009130:	2200      	movs	r2, #0
10009132:	466b      	mov	r3, sp
10009134:	71da      	strb	r2, [r3, #7]
10009136:	e00f      	b.n	10009158 <mpu_set_sensors+0x40>
    else
        data = BIT_SLEEP;
10009138:	466b      	mov	r3, sp
1000913a:	3307      	adds	r3, #7
1000913c:	2240      	movs	r2, #64	; 0x40
1000913e:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, &data)) {
10009140:	4a6a      	ldr	r2, [pc, #424]	; (100092ec <mpu_set_sensors+0x1d4>)
10009142:	6811      	ldr	r1, [r2, #0]
10009144:	7d49      	ldrb	r1, [r1, #21]
10009146:	6852      	ldr	r2, [r2, #4]
10009148:	7810      	ldrb	r0, [r2, #0]
1000914a:	2201      	movs	r2, #1
1000914c:	4d68      	ldr	r5, [pc, #416]	; (100092f0 <mpu_set_sensors+0x1d8>)
1000914e:	47a8      	blx	r5
10009150:	2800      	cmp	r0, #0
10009152:	d100      	bne.n	10009156 <mpu_set_sensors+0x3e>
10009154:	e0b2      	b.n	100092bc <mpu_set_sensors+0x1a4>
10009156:	e00b      	b.n	10009170 <mpu_set_sensors+0x58>
10009158:	4b64      	ldr	r3, [pc, #400]	; (100092ec <mpu_set_sensors+0x1d4>)
1000915a:	681a      	ldr	r2, [r3, #0]
1000915c:	7d51      	ldrb	r1, [r2, #21]
1000915e:	685b      	ldr	r3, [r3, #4]
10009160:	7818      	ldrb	r0, [r3, #0]
10009162:	466b      	mov	r3, sp
10009164:	3307      	adds	r3, #7
10009166:	2201      	movs	r2, #1
10009168:	4d61      	ldr	r5, [pc, #388]	; (100092f0 <mpu_set_sensors+0x1d8>)
1000916a:	47a8      	blx	r5
1000916c:	2800      	cmp	r0, #0
1000916e:	d005      	beq.n	1000917c <mpu_set_sensors+0x64>
        st.chip_cfg.sensors = 0;
10009170:	2200      	movs	r2, #0
10009172:	4b5e      	ldr	r3, [pc, #376]	; (100092ec <mpu_set_sensors+0x1d4>)
10009174:	729a      	strb	r2, [r3, #10]
        return -1;
10009176:	2501      	movs	r5, #1
10009178:	426d      	negs	r5, r5
1000917a:	e0b4      	b.n	100092e6 <mpu_set_sensors+0x1ce>
    }
    st.chip_cfg.clk_src = data & ~BIT_SLEEP;
1000917c:	466b      	mov	r3, sp
1000917e:	1dda      	adds	r2, r3, #7
10009180:	79db      	ldrb	r3, [r3, #7]
10009182:	2140      	movs	r1, #64	; 0x40
10009184:	438b      	bics	r3, r1
10009186:	4959      	ldr	r1, [pc, #356]	; (100092ec <mpu_set_sensors+0x1d4>)
10009188:	730b      	strb	r3, [r1, #12]

    data = 0;
1000918a:	2300      	movs	r3, #0
1000918c:	7013      	strb	r3, [r2, #0]
    if (!(sensors & INV_X_GYRO))
1000918e:	0663      	lsls	r3, r4, #25
10009190:	d402      	bmi.n	10009198 <mpu_set_sensors+0x80>
        data |= BIT_STBY_XG;
10009192:	2204      	movs	r2, #4
10009194:	466b      	mov	r3, sp
10009196:	71da      	strb	r2, [r3, #7]
    if (!(sensors & INV_Y_GYRO))
10009198:	06a3      	lsls	r3, r4, #26
1000919a:	d405      	bmi.n	100091a8 <mpu_set_sensors+0x90>
        data |= BIT_STBY_YG;
1000919c:	466b      	mov	r3, sp
1000919e:	1dda      	adds	r2, r3, #7
100091a0:	79d9      	ldrb	r1, [r3, #7]
100091a2:	2302      	movs	r3, #2
100091a4:	430b      	orrs	r3, r1
100091a6:	7013      	strb	r3, [r2, #0]
    if (!(sensors & INV_Z_GYRO))
100091a8:	06e3      	lsls	r3, r4, #27
100091aa:	d405      	bmi.n	100091b8 <mpu_set_sensors+0xa0>
        data |= BIT_STBY_ZG;
100091ac:	466b      	mov	r3, sp
100091ae:	1dda      	adds	r2, r3, #7
100091b0:	79d9      	ldrb	r1, [r3, #7]
100091b2:	2301      	movs	r3, #1
100091b4:	430b      	orrs	r3, r1
100091b6:	7013      	strb	r3, [r2, #0]
    if (!(sensors & INV_XYZ_ACCEL))
100091b8:	0723      	lsls	r3, r4, #28
100091ba:	d405      	bmi.n	100091c8 <mpu_set_sensors+0xb0>
        data |= BIT_STBY_XYZA;
100091bc:	466b      	mov	r3, sp
100091be:	1dda      	adds	r2, r3, #7
100091c0:	79d9      	ldrb	r1, [r3, #7]
100091c2:	2338      	movs	r3, #56	; 0x38
100091c4:	430b      	orrs	r3, r1
100091c6:	7013      	strb	r3, [r2, #0]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_2, 1, &data)) {
100091c8:	4b48      	ldr	r3, [pc, #288]	; (100092ec <mpu_set_sensors+0x1d4>)
100091ca:	681a      	ldr	r2, [r3, #0]
100091cc:	7d91      	ldrb	r1, [r2, #22]
100091ce:	685b      	ldr	r3, [r3, #4]
100091d0:	7818      	ldrb	r0, [r3, #0]
100091d2:	466b      	mov	r3, sp
100091d4:	3307      	adds	r3, #7
100091d6:	2201      	movs	r2, #1
100091d8:	4d45      	ldr	r5, [pc, #276]	; (100092f0 <mpu_set_sensors+0x1d8>)
100091da:	47a8      	blx	r5
100091dc:	2800      	cmp	r0, #0
100091de:	d005      	beq.n	100091ec <mpu_set_sensors+0xd4>
        st.chip_cfg.sensors = 0;
100091e0:	2200      	movs	r2, #0
100091e2:	4b42      	ldr	r3, [pc, #264]	; (100092ec <mpu_set_sensors+0x1d4>)
100091e4:	729a      	strb	r2, [r3, #10]
        return -1;
100091e6:	2501      	movs	r5, #1
100091e8:	426d      	negs	r5, r5
100091ea:	e07c      	b.n	100092e6 <mpu_set_sensors+0x1ce>
    }

    if (sensors && (sensors != INV_XYZ_ACCEL))
100091ec:	2308      	movs	r3, #8
100091ee:	0022      	movs	r2, r4
100091f0:	439a      	bics	r2, r3
100091f2:	d06b      	beq.n	100092cc <mpu_set_sensors+0x1b4>
        /* Latched interrupts only used in LP accel mode. */
        mpu_set_int_latched(0);
100091f4:	2000      	movs	r0, #0
100091f6:	4b3f      	ldr	r3, [pc, #252]	; (100092f4 <mpu_set_sensors+0x1dc>)
100091f8:	4798      	blx	r3
    if (sensors & INV_XYZ_COMPASS)
        mpu_set_bypass(1);
    else
        mpu_set_bypass(0);
#else
    if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
100091fa:	4b3c      	ldr	r3, [pc, #240]	; (100092ec <mpu_set_sensors+0x1d4>)
100091fc:	681a      	ldr	r2, [r3, #0]
100091fe:	7911      	ldrb	r1, [r2, #4]
10009200:	685b      	ldr	r3, [r3, #4]
10009202:	7818      	ldrb	r0, [r3, #0]
10009204:	466b      	mov	r3, sp
10009206:	3306      	adds	r3, #6
10009208:	2201      	movs	r2, #1
1000920a:	4d3b      	ldr	r5, [pc, #236]	; (100092f8 <mpu_set_sensors+0x1e0>)
1000920c:	47a8      	blx	r5
1000920e:	2800      	cmp	r0, #0
10009210:	d148      	bne.n	100092a4 <mpu_set_sensors+0x18c>
        return -1;
    /* Handle AKM power management. */
    if (sensors & INV_XYZ_COMPASS) {
10009212:	07e3      	lsls	r3, r4, #31
10009214:	d509      	bpl.n	1000922a <mpu_set_sensors+0x112>
        data = AKM_SINGLE_MEASUREMENT;
10009216:	2211      	movs	r2, #17
10009218:	466b      	mov	r3, sp
1000921a:	71da      	strb	r2, [r3, #7]
        user_ctrl |= BIT_AUX_IF_EN;
1000921c:	466b      	mov	r3, sp
1000921e:	1d9a      	adds	r2, r3, #6
10009220:	7999      	ldrb	r1, [r3, #6]
10009222:	2320      	movs	r3, #32
10009224:	430b      	orrs	r3, r1
10009226:	7013      	strb	r3, [r2, #0]
10009228:	e008      	b.n	1000923c <mpu_set_sensors+0x124>
    } else {
        data = AKM_POWER_DOWN;
1000922a:	2210      	movs	r2, #16
1000922c:	466b      	mov	r3, sp
1000922e:	71da      	strb	r2, [r3, #7]
        user_ctrl &= ~BIT_AUX_IF_EN;
10009230:	466b      	mov	r3, sp
10009232:	1d9a      	adds	r2, r3, #6
10009234:	799b      	ldrb	r3, [r3, #6]
10009236:	2120      	movs	r1, #32
10009238:	438b      	bics	r3, r1
1000923a:	7013      	strb	r3, [r2, #0]
    }
    if (st.chip_cfg.dmp_on)
1000923c:	2324      	movs	r3, #36	; 0x24
1000923e:	4a2b      	ldr	r2, [pc, #172]	; (100092ec <mpu_set_sensors+0x1d4>)
10009240:	5cd3      	ldrb	r3, [r2, r3]
10009242:	2b00      	cmp	r3, #0
10009244:	d007      	beq.n	10009256 <mpu_set_sensors+0x13e>
        user_ctrl |= BIT_DMP_EN;
10009246:	466b      	mov	r3, sp
10009248:	1d9a      	adds	r2, r3, #6
1000924a:	799b      	ldrb	r3, [r3, #6]
1000924c:	2180      	movs	r1, #128	; 0x80
1000924e:	4249      	negs	r1, r1
10009250:	430b      	orrs	r3, r1
10009252:	7013      	strb	r3, [r2, #0]
10009254:	e005      	b.n	10009262 <mpu_set_sensors+0x14a>
    else
        user_ctrl &= ~BIT_DMP_EN;
10009256:	466b      	mov	r3, sp
10009258:	1d9a      	adds	r2, r3, #6
1000925a:	799b      	ldrb	r3, [r3, #6]
1000925c:	217f      	movs	r1, #127	; 0x7f
1000925e:	400b      	ands	r3, r1
10009260:	7013      	strb	r3, [r2, #0]
    if (i2c_write(st.hw->addr, st.reg->s1_do, 1, &data))
10009262:	4b22      	ldr	r3, [pc, #136]	; (100092ec <mpu_set_sensors+0x1d4>)
10009264:	2226      	movs	r2, #38	; 0x26
10009266:	6819      	ldr	r1, [r3, #0]
10009268:	5c89      	ldrb	r1, [r1, r2]
1000926a:	685b      	ldr	r3, [r3, #4]
1000926c:	7818      	ldrb	r0, [r3, #0]
1000926e:	466b      	mov	r3, sp
10009270:	3307      	adds	r3, #7
10009272:	3a25      	subs	r2, #37	; 0x25
10009274:	4d1e      	ldr	r5, [pc, #120]	; (100092f0 <mpu_set_sensors+0x1d8>)
10009276:	47a8      	blx	r5
10009278:	2800      	cmp	r0, #0
1000927a:	d116      	bne.n	100092aa <mpu_set_sensors+0x192>
        return -1;
    /* Enable/disable I2C master mode. */
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
1000927c:	4b1b      	ldr	r3, [pc, #108]	; (100092ec <mpu_set_sensors+0x1d4>)
1000927e:	681a      	ldr	r2, [r3, #0]
10009280:	7911      	ldrb	r1, [r2, #4]
10009282:	685b      	ldr	r3, [r3, #4]
10009284:	7818      	ldrb	r0, [r3, #0]
10009286:	466b      	mov	r3, sp
10009288:	3306      	adds	r3, #6
1000928a:	2201      	movs	r2, #1
1000928c:	4d18      	ldr	r5, [pc, #96]	; (100092f0 <mpu_set_sensors+0x1d8>)
1000928e:	47a8      	blx	r5
10009290:	1e05      	subs	r5, r0, #0
10009292:	d10d      	bne.n	100092b0 <mpu_set_sensors+0x198>
        return -1;
#endif
#endif

    st.chip_cfg.sensors = sensors;
10009294:	4b15      	ldr	r3, [pc, #84]	; (100092ec <mpu_set_sensors+0x1d4>)
10009296:	729c      	strb	r4, [r3, #10]
    st.chip_cfg.lp_accel_mode = 0;
10009298:	2200      	movs	r2, #0
1000929a:	751a      	strb	r2, [r3, #20]
    delay_ms(50);
1000929c:	2032      	movs	r0, #50	; 0x32
1000929e:	4b17      	ldr	r3, [pc, #92]	; (100092fc <mpu_set_sensors+0x1e4>)
100092a0:	4798      	blx	r3
    return 0;
100092a2:	e020      	b.n	100092e6 <mpu_set_sensors+0x1ce>
        mpu_set_bypass(1);
    else
        mpu_set_bypass(0);
#else
    if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
        return -1;
100092a4:	2501      	movs	r5, #1
100092a6:	426d      	negs	r5, r5
100092a8:	e01d      	b.n	100092e6 <mpu_set_sensors+0x1ce>
    if (st.chip_cfg.dmp_on)
        user_ctrl |= BIT_DMP_EN;
    else
        user_ctrl &= ~BIT_DMP_EN;
    if (i2c_write(st.hw->addr, st.reg->s1_do, 1, &data))
        return -1;
100092aa:	2501      	movs	r5, #1
100092ac:	426d      	negs	r5, r5
100092ae:	e01a      	b.n	100092e6 <mpu_set_sensors+0x1ce>
    /* Enable/disable I2C master mode. */
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
        return -1;
100092b0:	2501      	movs	r5, #1
100092b2:	426d      	negs	r5, r5
100092b4:	e017      	b.n	100092e6 <mpu_set_sensors+0x1ce>
        mpu_set_bypass(1);
    else
        mpu_set_bypass(0);
#else
    if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
        return -1;
100092b6:	2501      	movs	r5, #1
100092b8:	426d      	negs	r5, r5
100092ba:	e014      	b.n	100092e6 <mpu_set_sensors+0x1ce>
        data = BIT_SLEEP;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, &data)) {
        st.chip_cfg.sensors = 0;
        return -1;
    }
    st.chip_cfg.clk_src = data & ~BIT_SLEEP;
100092bc:	466b      	mov	r3, sp
100092be:	3307      	adds	r3, #7
100092c0:	781b      	ldrb	r3, [r3, #0]
100092c2:	2240      	movs	r2, #64	; 0x40
100092c4:	4393      	bics	r3, r2
100092c6:	4a09      	ldr	r2, [pc, #36]	; (100092ec <mpu_set_sensors+0x1d4>)
100092c8:	7313      	strb	r3, [r2, #12]
100092ca:	e762      	b.n	10009192 <mpu_set_sensors+0x7a>
    if (sensors & INV_XYZ_COMPASS)
        mpu_set_bypass(1);
    else
        mpu_set_bypass(0);
#else
    if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
100092cc:	4b07      	ldr	r3, [pc, #28]	; (100092ec <mpu_set_sensors+0x1d4>)
100092ce:	681a      	ldr	r2, [r3, #0]
100092d0:	7911      	ldrb	r1, [r2, #4]
100092d2:	685b      	ldr	r3, [r3, #4]
100092d4:	7818      	ldrb	r0, [r3, #0]
100092d6:	466b      	mov	r3, sp
100092d8:	3306      	adds	r3, #6
100092da:	2201      	movs	r2, #1
100092dc:	4d06      	ldr	r5, [pc, #24]	; (100092f8 <mpu_set_sensors+0x1e0>)
100092de:	47a8      	blx	r5
100092e0:	2800      	cmp	r0, #0
100092e2:	d0a2      	beq.n	1000922a <mpu_set_sensors+0x112>
100092e4:	e7e7      	b.n	100092b6 <mpu_set_sensors+0x19e>

    st.chip_cfg.sensors = sensors;
    st.chip_cfg.lp_accel_mode = 0;
    delay_ms(50);
    return 0;
}
100092e6:	0028      	movs	r0, r5
100092e8:	b003      	add	sp, #12
100092ea:	bd30      	pop	{r4, r5, pc}
100092ec:	10018608 	.word	0x10018608
100092f0:	1000aab9 	.word	0x1000aab9
100092f4:	10008e89 	.word	0x10008e89
100092f8:	1000ab59 	.word	0x1000ab59
100092fc:	10008129 	.word	0x10008129

10009300 <mpu_init>:
 *  Data ready interrupt: Disabled, active low, unlatched.
 *  @param[in]  int_param   Platform-specific parameters to interrupt API.
 *  @return     0 if successful.
 */
int mpu_init(struct int_param_s *int_param)
{
10009300:	b530      	push	{r4, r5, lr}
10009302:	b085      	sub	sp, #20
    unsigned char data[6];

    /* Reset device. */
    data[0] = BIT_RESET;
10009304:	ab02      	add	r3, sp, #8
10009306:	2280      	movs	r2, #128	; 0x80
10009308:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
1000930a:	4ab9      	ldr	r2, [pc, #740]	; (100095f0 <mpu_init+0x2f0>)
1000930c:	6811      	ldr	r1, [r2, #0]
1000930e:	7d49      	ldrb	r1, [r1, #21]
10009310:	6852      	ldr	r2, [r2, #4]
10009312:	7810      	ldrb	r0, [r2, #0]
10009314:	2201      	movs	r2, #1
10009316:	4cb7      	ldr	r4, [pc, #732]	; (100095f4 <mpu_init+0x2f4>)
10009318:	47a0      	blx	r4
1000931a:	2800      	cmp	r0, #0
1000931c:	d000      	beq.n	10009320 <mpu_init+0x20>
1000931e:	e149      	b.n	100095b4 <mpu_init+0x2b4>
        return -1;
    delay_ms(100);
10009320:	3064      	adds	r0, #100	; 0x64
10009322:	4bb5      	ldr	r3, [pc, #724]	; (100095f8 <mpu_init+0x2f8>)
10009324:	4798      	blx	r3

    /* Wake up chip. */
    data[0] = 0x00;
10009326:	ab02      	add	r3, sp, #8
10009328:	2200      	movs	r2, #0
1000932a:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
1000932c:	4ab0      	ldr	r2, [pc, #704]	; (100095f0 <mpu_init+0x2f0>)
1000932e:	6811      	ldr	r1, [r2, #0]
10009330:	7d49      	ldrb	r1, [r1, #21]
10009332:	6852      	ldr	r2, [r2, #4]
10009334:	7810      	ldrb	r0, [r2, #0]
10009336:	2201      	movs	r2, #1
10009338:	4cae      	ldr	r4, [pc, #696]	; (100095f4 <mpu_init+0x2f4>)
1000933a:	47a0      	blx	r4
1000933c:	2800      	cmp	r0, #0
1000933e:	d000      	beq.n	10009342 <mpu_init+0x42>
10009340:	e13b      	b.n	100095ba <mpu_init+0x2ba>
        return -1;

   st.chip_cfg.accel_half = 0;
10009342:	4aab      	ldr	r2, [pc, #684]	; (100095f0 <mpu_init+0x2f0>)
10009344:	2300      	movs	r3, #0
10009346:	74d3      	strb	r3, [r2, #19]

#ifdef MPU6500
    /* MPU6500 shares 4kB of memory between the DMP and the FIFO. Since the
     * first 3kB are needed by the DMP, we'll use the last 1kB for the FIFO.
     */
    data[0] = BIT_FIFO_SIZE_1024;
10009348:	ab02      	add	r3, sp, #8
1000934a:	2140      	movs	r1, #64	; 0x40
1000934c:	7019      	strb	r1, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->accel_cfg2, 1, data))
1000934e:	6811      	ldr	r1, [r2, #0]
10009350:	7a09      	ldrb	r1, [r1, #8]
10009352:	6852      	ldr	r2, [r2, #4]
10009354:	7810      	ldrb	r0, [r2, #0]
10009356:	2201      	movs	r2, #1
10009358:	4ca6      	ldr	r4, [pc, #664]	; (100095f4 <mpu_init+0x2f4>)
1000935a:	47a0      	blx	r4
1000935c:	2800      	cmp	r0, #0
1000935e:	d000      	beq.n	10009362 <mpu_init+0x62>
10009360:	e12e      	b.n	100095c0 <mpu_init+0x2c0>
        return -1;
#endif

    /* Set to invalid values to ensure no I2C writes are skipped. */
    st.chip_cfg.sensors = 0xFF;
10009362:	4ca3      	ldr	r4, [pc, #652]	; (100095f0 <mpu_init+0x2f0>)
10009364:	23ff      	movs	r3, #255	; 0xff
10009366:	72a3      	strb	r3, [r4, #10]
    st.chip_cfg.gyro_fsr = 0xFF;
10009368:	7223      	strb	r3, [r4, #8]
    st.chip_cfg.accel_fsr = 0xFF;
1000936a:	7263      	strb	r3, [r4, #9]
    st.chip_cfg.lpf = 0xFF;
1000936c:	72e3      	strb	r3, [r4, #11]
    st.chip_cfg.sample_rate = 0xFFFF;
1000936e:	2201      	movs	r2, #1
10009370:	4252      	negs	r2, r2
10009372:	81e2      	strh	r2, [r4, #14]
    st.chip_cfg.fifo_enable = 0xFF;
10009374:	7423      	strb	r3, [r4, #16]
    st.chip_cfg.bypass_mode = 0xFF;
10009376:	74a3      	strb	r3, [r4, #18]
#ifdef AK89xx_SECONDARY
    st.chip_cfg.compass_sample_rate = 0xFFFF;
10009378:	8522      	strh	r2, [r4, #40]	; 0x28
#endif
    /* mpu_set_sensors always preserves this setting. */
    st.chip_cfg.clk_src = INV_CLK_PLL;
1000937a:	3bfe      	subs	r3, #254	; 0xfe
1000937c:	7323      	strb	r3, [r4, #12]
    /* Handled in next call to mpu_set_bypass. */
    st.chip_cfg.active_low_int = 0; // --> interrupt active high!!
1000937e:	2500      	movs	r5, #0
10009380:	3321      	adds	r3, #33	; 0x21
10009382:	54e5      	strb	r5, [r4, r3]
    st.chip_cfg.latched_int = 0;
10009384:	3301      	adds	r3, #1
10009386:	54e5      	strb	r5, [r4, r3]
    st.chip_cfg.int_motion_only = 0;
10009388:	7565      	strb	r5, [r4, #21]
    st.chip_cfg.lp_accel_mode = 0;
1000938a:	7525      	strb	r5, [r4, #20]
    memset(&st.chip_cfg.cache, 0, sizeof(st.chip_cfg.cache));
1000938c:	0020      	movs	r0, r4
1000938e:	3016      	adds	r0, #22
10009390:	320d      	adds	r2, #13
10009392:	2100      	movs	r1, #0
10009394:	4b99      	ldr	r3, [pc, #612]	; (100095fc <mpu_init+0x2fc>)
10009396:	4798      	blx	r3
    st.chip_cfg.dmp_on = 0;
10009398:	2324      	movs	r3, #36	; 0x24
1000939a:	54e5      	strb	r5, [r4, r3]
    st.chip_cfg.dmp_loaded = 0;
1000939c:	3301      	adds	r3, #1
1000939e:	54e5      	strb	r5, [r4, r3]
    st.chip_cfg.dmp_sample_rate = 0;
100093a0:	84e5      	strh	r5, [r4, #38]	; 0x26

    if (mpu_set_gyro_fsr(2000))
100093a2:	20fa      	movs	r0, #250	; 0xfa
100093a4:	00c0      	lsls	r0, r0, #3
100093a6:	4b96      	ldr	r3, [pc, #600]	; (10009600 <mpu_init+0x300>)
100093a8:	4798      	blx	r3
100093aa:	2800      	cmp	r0, #0
100093ac:	d000      	beq.n	100093b0 <mpu_init+0xb0>
100093ae:	e10a      	b.n	100095c6 <mpu_init+0x2c6>
        return -1;
    if (mpu_set_accel_fsr(2))
100093b0:	3002      	adds	r0, #2
100093b2:	4b94      	ldr	r3, [pc, #592]	; (10009604 <mpu_init+0x304>)
100093b4:	4798      	blx	r3
100093b6:	2800      	cmp	r0, #0
100093b8:	d000      	beq.n	100093bc <mpu_init+0xbc>
100093ba:	e107      	b.n	100095cc <mpu_init+0x2cc>
        return -1;
    if (mpu_set_lpf(42))
100093bc:	302a      	adds	r0, #42	; 0x2a
100093be:	4b92      	ldr	r3, [pc, #584]	; (10009608 <mpu_init+0x308>)
100093c0:	4798      	blx	r3
100093c2:	2800      	cmp	r0, #0
100093c4:	d000      	beq.n	100093c8 <mpu_init+0xc8>
100093c6:	e104      	b.n	100095d2 <mpu_init+0x2d2>
        return -1;
    if (mpu_set_sample_rate(50))
100093c8:	3032      	adds	r0, #50	; 0x32
100093ca:	4b90      	ldr	r3, [pc, #576]	; (1000960c <mpu_init+0x30c>)
100093cc:	4798      	blx	r3
100093ce:	2800      	cmp	r0, #0
100093d0:	d000      	beq.n	100093d4 <mpu_init+0xd4>
100093d2:	e101      	b.n	100095d8 <mpu_init+0x2d8>
        return -1;
    if (mpu_configure_fifo(0))
100093d4:	4b8e      	ldr	r3, [pc, #568]	; (10009610 <mpu_init+0x310>)
100093d6:	4798      	blx	r3
100093d8:	2800      	cmp	r0, #0
100093da:	d000      	beq.n	100093de <mpu_init+0xde>
100093dc:	e0ff      	b.n	100095de <mpu_init+0x2de>
/* This initialization is similar to the one in ak8975.c. */
static int setup_compass(void)
{
    unsigned char data[4], akm_addr;

    mpu_set_bypass(1);
100093de:	3001      	adds	r0, #1
100093e0:	4b8c      	ldr	r3, [pc, #560]	; (10009614 <mpu_init+0x314>)
100093e2:	4798      	blx	r3

    /* Find compass. Possible addresses range from 0x0C to 0x0F. */
    for (akm_addr = 0x0C; akm_addr <= 0x0F; akm_addr++) {
100093e4:	240c      	movs	r4, #12
        int result;
        result = i2c_read(akm_addr, AKM_REG_WHOAMI, 1, data);
100093e6:	4d8c      	ldr	r5, [pc, #560]	; (10009618 <mpu_init+0x318>)
100093e8:	ab01      	add	r3, sp, #4
100093ea:	2201      	movs	r2, #1
100093ec:	2100      	movs	r1, #0
100093ee:	0020      	movs	r0, r4
100093f0:	47a8      	blx	r5
        if (!result && (data[0] == AKM_WHOAMI))
100093f2:	2800      	cmp	r0, #0
100093f4:	d103      	bne.n	100093fe <mpu_init+0xfe>
100093f6:	466b      	mov	r3, sp
100093f8:	791b      	ldrb	r3, [r3, #4]
100093fa:	2b48      	cmp	r3, #72	; 0x48
100093fc:	d004      	beq.n	10009408 <mpu_init+0x108>
    unsigned char data[4], akm_addr;

    mpu_set_bypass(1);

    /* Find compass. Possible addresses range from 0x0C to 0x0F. */
    for (akm_addr = 0x0C; akm_addr <= 0x0F; akm_addr++) {
100093fe:	3401      	adds	r4, #1
10009400:	b2e4      	uxtb	r4, r4
10009402:	2c10      	cmp	r4, #16
10009404:	d1f0      	bne.n	100093e8 <mpu_init+0xe8>
10009406:	e001      	b.n	1000940c <mpu_init+0x10c>
        result = i2c_read(akm_addr, AKM_REG_WHOAMI, 1, data);
        if (!result && (data[0] == AKM_WHOAMI))
            break;
    }

    if (akm_addr > 0x0F) {
10009408:	2c0f      	cmp	r4, #15
1000940a:	d905      	bls.n	10009418 <mpu_init+0x118>
        /* TODO: Handle this case in all compass-related functions. */
        log_e("Compass not found.\n");
1000940c:	4883      	ldr	r0, [pc, #524]	; (1000961c <mpu_init+0x31c>)
1000940e:	4c84      	ldr	r4, [pc, #528]	; (10009620 <mpu_init+0x320>)
10009410:	47a0      	blx	r4
10009412:	4884      	ldr	r0, [pc, #528]	; (10009624 <mpu_init+0x324>)
10009414:	47a0      	blx	r4
10009416:	e0c4      	b.n	100095a2 <mpu_init+0x2a2>
        return -1;
    }

    st.chip_cfg.compass_addr = akm_addr;
10009418:	232a      	movs	r3, #42	; 0x2a
1000941a:	4a75      	ldr	r2, [pc, #468]	; (100095f0 <mpu_init+0x2f0>)
1000941c:	54d4      	strb	r4, [r2, r3]

    data[0] = AKM_POWER_DOWN;
1000941e:	ab01      	add	r3, sp, #4
10009420:	2210      	movs	r2, #16
10009422:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
10009424:	3a0f      	subs	r2, #15
10009426:	210a      	movs	r1, #10
10009428:	0020      	movs	r0, r4
1000942a:	4c72      	ldr	r4, [pc, #456]	; (100095f4 <mpu_init+0x2f4>)
1000942c:	47a0      	blx	r4
1000942e:	2800      	cmp	r0, #0
10009430:	d000      	beq.n	10009434 <mpu_init+0x134>
10009432:	e0b6      	b.n	100095a2 <mpu_init+0x2a2>
        return -1;
    delay_ms(1);
10009434:	3001      	adds	r0, #1
10009436:	4b70      	ldr	r3, [pc, #448]	; (100095f8 <mpu_init+0x2f8>)
10009438:	4798      	blx	r3

    data[0] = AKM_FUSE_ROM_ACCESS;
1000943a:	ab01      	add	r3, sp, #4
1000943c:	221f      	movs	r2, #31
1000943e:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
10009440:	320b      	adds	r2, #11
10009442:	496b      	ldr	r1, [pc, #428]	; (100095f0 <mpu_init+0x2f0>)
10009444:	5c88      	ldrb	r0, [r1, r2]
10009446:	3a29      	subs	r2, #41	; 0x29
10009448:	210a      	movs	r1, #10
1000944a:	4c6a      	ldr	r4, [pc, #424]	; (100095f4 <mpu_init+0x2f4>)
1000944c:	47a0      	blx	r4
1000944e:	2800      	cmp	r0, #0
10009450:	d000      	beq.n	10009454 <mpu_init+0x154>
10009452:	e0a6      	b.n	100095a2 <mpu_init+0x2a2>
        return -1;
    delay_ms(1);
10009454:	3001      	adds	r0, #1
10009456:	4b68      	ldr	r3, [pc, #416]	; (100095f8 <mpu_init+0x2f8>)
10009458:	4798      	blx	r3

    /* Get sensitivity adjustment data from fuse ROM. */
    if (i2c_read(st.chip_cfg.compass_addr, AKM_REG_ASAX, 3, data))
1000945a:	232a      	movs	r3, #42	; 0x2a
1000945c:	4a64      	ldr	r2, [pc, #400]	; (100095f0 <mpu_init+0x2f0>)
1000945e:	5cd0      	ldrb	r0, [r2, r3]
10009460:	ab01      	add	r3, sp, #4
10009462:	2203      	movs	r2, #3
10009464:	2110      	movs	r1, #16
10009466:	4c6c      	ldr	r4, [pc, #432]	; (10009618 <mpu_init+0x318>)
10009468:	47a0      	blx	r4
1000946a:	2800      	cmp	r0, #0
1000946c:	d000      	beq.n	10009470 <mpu_init+0x170>
1000946e:	e098      	b.n	100095a2 <mpu_init+0x2a2>
        return -1;
    st.chip_cfg.mag_sens_adj[0] = (long)data[0] + 128;
10009470:	4a5f      	ldr	r2, [pc, #380]	; (100095f0 <mpu_init+0x2f0>)
10009472:	ab01      	add	r3, sp, #4
10009474:	7819      	ldrb	r1, [r3, #0]
10009476:	3180      	adds	r1, #128	; 0x80
10009478:	8591      	strh	r1, [r2, #44]	; 0x2c
    st.chip_cfg.mag_sens_adj[1] = (long)data[1] + 128;
1000947a:	7859      	ldrb	r1, [r3, #1]
1000947c:	3180      	adds	r1, #128	; 0x80
1000947e:	85d1      	strh	r1, [r2, #46]	; 0x2e
    st.chip_cfg.mag_sens_adj[2] = (long)data[2] + 128;
10009480:	7899      	ldrb	r1, [r3, #2]
10009482:	3180      	adds	r1, #128	; 0x80
10009484:	8611      	strh	r1, [r2, #48]	; 0x30

    data[0] = AKM_POWER_DOWN;
10009486:	2110      	movs	r1, #16
10009488:	7019      	strb	r1, [r3, #0]
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
1000948a:	311a      	adds	r1, #26
1000948c:	5c50      	ldrb	r0, [r2, r1]
1000948e:	2201      	movs	r2, #1
10009490:	3920      	subs	r1, #32
10009492:	4c58      	ldr	r4, [pc, #352]	; (100095f4 <mpu_init+0x2f4>)
10009494:	47a0      	blx	r4
10009496:	2800      	cmp	r0, #0
10009498:	d000      	beq.n	1000949c <mpu_init+0x19c>
1000949a:	e082      	b.n	100095a2 <mpu_init+0x2a2>
        return -1;
    delay_ms(1);
1000949c:	3001      	adds	r0, #1
1000949e:	4b56      	ldr	r3, [pc, #344]	; (100095f8 <mpu_init+0x2f8>)
100094a0:	4798      	blx	r3

    mpu_set_bypass(0);
100094a2:	2000      	movs	r0, #0
100094a4:	4b5b      	ldr	r3, [pc, #364]	; (10009614 <mpu_init+0x314>)
100094a6:	4798      	blx	r3

    /* Set up master mode, master clock, and ES bit. */
    data[0] = 0x40;
100094a8:	ab01      	add	r3, sp, #4
100094aa:	2240      	movs	r2, #64	; 0x40
100094ac:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->i2c_mst, 1, data))
100094ae:	4a50      	ldr	r2, [pc, #320]	; (100095f0 <mpu_init+0x2f0>)
100094b0:	6811      	ldr	r1, [r2, #0]
100094b2:	7e89      	ldrb	r1, [r1, #26]
100094b4:	6852      	ldr	r2, [r2, #4]
100094b6:	7810      	ldrb	r0, [r2, #0]
100094b8:	2201      	movs	r2, #1
100094ba:	4c4e      	ldr	r4, [pc, #312]	; (100095f4 <mpu_init+0x2f4>)
100094bc:	47a0      	blx	r4
100094be:	2800      	cmp	r0, #0
100094c0:	d16f      	bne.n	100095a2 <mpu_init+0x2a2>
        return -1;

    /* Slave 0 reads from AKM data registers. */
    data[0] = BIT_I2C_READ | st.chip_cfg.compass_addr;
100094c2:	ab01      	add	r3, sp, #4
100094c4:	4a4a      	ldr	r2, [pc, #296]	; (100095f0 <mpu_init+0x2f0>)
100094c6:	212a      	movs	r1, #42	; 0x2a
100094c8:	5c51      	ldrb	r1, [r2, r1]
100094ca:	3880      	subs	r0, #128	; 0x80
100094cc:	4301      	orrs	r1, r0
100094ce:	7019      	strb	r1, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->s0_addr, 1, data))
100094d0:	6811      	ldr	r1, [r2, #0]
100094d2:	7f89      	ldrb	r1, [r1, #30]
100094d4:	6852      	ldr	r2, [r2, #4]
100094d6:	7810      	ldrb	r0, [r2, #0]
100094d8:	2201      	movs	r2, #1
100094da:	4c46      	ldr	r4, [pc, #280]	; (100095f4 <mpu_init+0x2f4>)
100094dc:	47a0      	blx	r4
100094de:	2800      	cmp	r0, #0
100094e0:	d15f      	bne.n	100095a2 <mpu_init+0x2a2>
        return -1;

    /* Compass reads start at this register. */
    data[0] = AKM_REG_ST1;
100094e2:	ab01      	add	r3, sp, #4
100094e4:	2202      	movs	r2, #2
100094e6:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->s0_reg, 1, data))
100094e8:	4a41      	ldr	r2, [pc, #260]	; (100095f0 <mpu_init+0x2f0>)
100094ea:	6811      	ldr	r1, [r2, #0]
100094ec:	7fc9      	ldrb	r1, [r1, #31]
100094ee:	6852      	ldr	r2, [r2, #4]
100094f0:	7810      	ldrb	r0, [r2, #0]
100094f2:	2201      	movs	r2, #1
100094f4:	4c3f      	ldr	r4, [pc, #252]	; (100095f4 <mpu_init+0x2f4>)
100094f6:	47a0      	blx	r4
100094f8:	2800      	cmp	r0, #0
100094fa:	d152      	bne.n	100095a2 <mpu_init+0x2a2>
        return -1;

    /* Enable slave 0, 8-byte reads. */
    data[0] = BIT_SLAVE_EN | 8;
100094fc:	ab01      	add	r3, sp, #4
100094fe:	2288      	movs	r2, #136	; 0x88
10009500:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->s0_ctrl, 1, data))
10009502:	4a3b      	ldr	r2, [pc, #236]	; (100095f0 <mpu_init+0x2f0>)
10009504:	2120      	movs	r1, #32
10009506:	6810      	ldr	r0, [r2, #0]
10009508:	5c41      	ldrb	r1, [r0, r1]
1000950a:	6852      	ldr	r2, [r2, #4]
1000950c:	7810      	ldrb	r0, [r2, #0]
1000950e:	2201      	movs	r2, #1
10009510:	4c38      	ldr	r4, [pc, #224]	; (100095f4 <mpu_init+0x2f4>)
10009512:	47a0      	blx	r4
10009514:	2800      	cmp	r0, #0
10009516:	d144      	bne.n	100095a2 <mpu_init+0x2a2>
        return -1;

    /* Slave 1 changes AKM measurement mode. */
    data[0] = st.chip_cfg.compass_addr;
10009518:	ab01      	add	r3, sp, #4
1000951a:	4a35      	ldr	r2, [pc, #212]	; (100095f0 <mpu_init+0x2f0>)
1000951c:	212a      	movs	r1, #42	; 0x2a
1000951e:	5c51      	ldrb	r1, [r2, r1]
10009520:	7019      	strb	r1, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->s1_addr, 1, data))
10009522:	2121      	movs	r1, #33	; 0x21
10009524:	6810      	ldr	r0, [r2, #0]
10009526:	5c41      	ldrb	r1, [r0, r1]
10009528:	6852      	ldr	r2, [r2, #4]
1000952a:	7810      	ldrb	r0, [r2, #0]
1000952c:	2201      	movs	r2, #1
1000952e:	4c31      	ldr	r4, [pc, #196]	; (100095f4 <mpu_init+0x2f4>)
10009530:	47a0      	blx	r4
10009532:	2800      	cmp	r0, #0
10009534:	d135      	bne.n	100095a2 <mpu_init+0x2a2>
        return -1;

    /* AKM measurement mode register. */
    data[0] = AKM_REG_CNTL;
10009536:	ab01      	add	r3, sp, #4
10009538:	220a      	movs	r2, #10
1000953a:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->s1_reg, 1, data))
1000953c:	4a2c      	ldr	r2, [pc, #176]	; (100095f0 <mpu_init+0x2f0>)
1000953e:	2122      	movs	r1, #34	; 0x22
10009540:	6810      	ldr	r0, [r2, #0]
10009542:	5c41      	ldrb	r1, [r0, r1]
10009544:	6852      	ldr	r2, [r2, #4]
10009546:	7810      	ldrb	r0, [r2, #0]
10009548:	2201      	movs	r2, #1
1000954a:	4c2a      	ldr	r4, [pc, #168]	; (100095f4 <mpu_init+0x2f4>)
1000954c:	47a0      	blx	r4
1000954e:	2800      	cmp	r0, #0
10009550:	d127      	bne.n	100095a2 <mpu_init+0x2a2>
        return -1;

    /* Enable slave 1, 1-byte writes. */
    data[0] = BIT_SLAVE_EN | 1;
10009552:	ab01      	add	r3, sp, #4
10009554:	2281      	movs	r2, #129	; 0x81
10009556:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->s1_ctrl, 1, data))
10009558:	4a25      	ldr	r2, [pc, #148]	; (100095f0 <mpu_init+0x2f0>)
1000955a:	2123      	movs	r1, #35	; 0x23
1000955c:	6810      	ldr	r0, [r2, #0]
1000955e:	5c41      	ldrb	r1, [r0, r1]
10009560:	6852      	ldr	r2, [r2, #4]
10009562:	7810      	ldrb	r0, [r2, #0]
10009564:	2201      	movs	r2, #1
10009566:	4c23      	ldr	r4, [pc, #140]	; (100095f4 <mpu_init+0x2f4>)
10009568:	47a0      	blx	r4
1000956a:	2800      	cmp	r0, #0
1000956c:	d119      	bne.n	100095a2 <mpu_init+0x2a2>
        return -1;

    /* Set slave 1 data. */
    data[0] = AKM_SINGLE_MEASUREMENT;
1000956e:	ab01      	add	r3, sp, #4
10009570:	2211      	movs	r2, #17
10009572:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->s1_do, 1, data))
10009574:	4a1e      	ldr	r2, [pc, #120]	; (100095f0 <mpu_init+0x2f0>)
10009576:	2126      	movs	r1, #38	; 0x26
10009578:	6810      	ldr	r0, [r2, #0]
1000957a:	5c41      	ldrb	r1, [r0, r1]
1000957c:	6852      	ldr	r2, [r2, #4]
1000957e:	7810      	ldrb	r0, [r2, #0]
10009580:	2201      	movs	r2, #1
10009582:	4c1c      	ldr	r4, [pc, #112]	; (100095f4 <mpu_init+0x2f4>)
10009584:	47a0      	blx	r4
10009586:	2800      	cmp	r0, #0
10009588:	d10b      	bne.n	100095a2 <mpu_init+0x2a2>
        return -1;

    /* Trigger slave 0 and slave 1 actions at each sample. */
    data[0] = 0x03;
1000958a:	ab01      	add	r3, sp, #4
1000958c:	2203      	movs	r2, #3
1000958e:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->i2c_delay_ctrl, 1, data))
10009590:	4a17      	ldr	r2, [pc, #92]	; (100095f0 <mpu_init+0x2f0>)
10009592:	2127      	movs	r1, #39	; 0x27
10009594:	6810      	ldr	r0, [r2, #0]
10009596:	5c41      	ldrb	r1, [r0, r1]
10009598:	6852      	ldr	r2, [r2, #4]
1000959a:	7810      	ldrb	r0, [r2, #0]
1000959c:	2201      	movs	r2, #1
1000959e:	4c15      	ldr	r4, [pc, #84]	; (100095f4 <mpu_init+0x2f4>)
100095a0:	47a0      	blx	r4
    //if (int_param)
        //reg_int_cb(int_param);

#ifdef AK89xx_SECONDARY
    setup_compass();
    if (mpu_set_compass_sample_rate(10))
100095a2:	200a      	movs	r0, #10
100095a4:	4b20      	ldr	r3, [pc, #128]	; (10009628 <mpu_init+0x328>)
100095a6:	4798      	blx	r3
100095a8:	1e04      	subs	r4, r0, #0
100095aa:	d11b      	bne.n	100095e4 <mpu_init+0x2e4>
    /* Already disabled by setup_compass. */
    if (mpu_set_bypass(0))
        return -1;
#endif

    mpu_set_sensors(0);
100095ac:	2000      	movs	r0, #0
100095ae:	4b1f      	ldr	r3, [pc, #124]	; (1000962c <mpu_init+0x32c>)
100095b0:	4798      	blx	r3
    return 0;
100095b2:	e019      	b.n	100095e8 <mpu_init+0x2e8>
    unsigned char data[6];

    /* Reset device. */
    data[0] = BIT_RESET;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
        return -1;
100095b4:	2401      	movs	r4, #1
100095b6:	4264      	negs	r4, r4
100095b8:	e016      	b.n	100095e8 <mpu_init+0x2e8>
    delay_ms(100);

    /* Wake up chip. */
    data[0] = 0x00;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
        return -1;
100095ba:	2401      	movs	r4, #1
100095bc:	4264      	negs	r4, r4
100095be:	e013      	b.n	100095e8 <mpu_init+0x2e8>
    /* MPU6500 shares 4kB of memory between the DMP and the FIFO. Since the
     * first 3kB are needed by the DMP, we'll use the last 1kB for the FIFO.
     */
    data[0] = BIT_FIFO_SIZE_1024;
    if (i2c_write(st.hw->addr, st.reg->accel_cfg2, 1, data))
        return -1;
100095c0:	2401      	movs	r4, #1
100095c2:	4264      	negs	r4, r4
100095c4:	e010      	b.n	100095e8 <mpu_init+0x2e8>
    st.chip_cfg.dmp_on = 0;
    st.chip_cfg.dmp_loaded = 0;
    st.chip_cfg.dmp_sample_rate = 0;

    if (mpu_set_gyro_fsr(2000))
        return -1;
100095c6:	2401      	movs	r4, #1
100095c8:	4264      	negs	r4, r4
100095ca:	e00d      	b.n	100095e8 <mpu_init+0x2e8>
    if (mpu_set_accel_fsr(2))
        return -1;
100095cc:	2401      	movs	r4, #1
100095ce:	4264      	negs	r4, r4
100095d0:	e00a      	b.n	100095e8 <mpu_init+0x2e8>
    if (mpu_set_lpf(42))
        return -1;
100095d2:	2401      	movs	r4, #1
100095d4:	4264      	negs	r4, r4
100095d6:	e007      	b.n	100095e8 <mpu_init+0x2e8>
    if (mpu_set_sample_rate(50))
        return -1;
100095d8:	2401      	movs	r4, #1
100095da:	4264      	negs	r4, r4
100095dc:	e004      	b.n	100095e8 <mpu_init+0x2e8>
    if (mpu_configure_fifo(0))
        return -1;
100095de:	2401      	movs	r4, #1
100095e0:	4264      	negs	r4, r4
100095e2:	e001      	b.n	100095e8 <mpu_init+0x2e8>
        //reg_int_cb(int_param);

#ifdef AK89xx_SECONDARY
    setup_compass();
    if (mpu_set_compass_sample_rate(10))
        return -1;
100095e4:	2401      	movs	r4, #1
100095e6:	4264      	negs	r4, r4
        return -1;
#endif

    mpu_set_sensors(0);
    return 0;
}
100095e8:	0020      	movs	r0, r4
100095ea:	b005      	add	sp, #20
100095ec:	bd30      	pop	{r4, r5, pc}
100095ee:	46c0      	nop			; (mov r8, r8)
100095f0:	10018608 	.word	0x10018608
100095f4:	1000aab9 	.word	0x1000aab9
100095f8:	10008129 	.word	0x10008129
100095fc:	10015239 	.word	0x10015239
10009600:	10008805 	.word	0x10008805
10009604:	100088f1 	.word	0x100088f1
10009608:	10008985 	.word	0x10008985
1000960c:	10009045 	.word	0x10009045
10009610:	10008ad5 	.word	0x10008ad5
10009614:	10008d0d 	.word	0x10008d0d
10009618:	1000ab59 	.word	0x1000ab59
1000961c:	10016660 	.word	0x10016660
10009620:	100154a1 	.word	0x100154a1
10009624:	100164d0 	.word	0x100164d0
10009628:	10008a5d 	.word	0x10008a5d
1000962c:	10009119 	.word	0x10009119

10009630 <mpu_write_mem>:
 *  @param[in]  data        Bytes to write to memory.
 *  @return     0 if successful.
 */
int mpu_write_mem(unsigned short mem_addr, unsigned short length,
        unsigned char *data)
{
10009630:	b570      	push	{r4, r5, r6, lr}
10009632:	b082      	sub	sp, #8
10009634:	000c      	movs	r4, r1
10009636:	1e15      	subs	r5, r2, #0
    unsigned char tmp[2];

    if (!data)
10009638:	d025      	beq.n	10009686 <mpu_write_mem+0x56>
        return -1;
    if (!st.chip_cfg.sensors)
1000963a:	4b19      	ldr	r3, [pc, #100]	; (100096a0 <mpu_write_mem+0x70>)
1000963c:	7a9b      	ldrb	r3, [r3, #10]
1000963e:	2b00      	cmp	r3, #0
10009640:	d024      	beq.n	1000968c <mpu_write_mem+0x5c>
        return -1;

    tmp[0] = (unsigned char)(mem_addr >> 8);
10009642:	ab01      	add	r3, sp, #4
10009644:	0a02      	lsrs	r2, r0, #8
10009646:	701a      	strb	r2, [r3, #0]
    tmp[1] = (unsigned char)(mem_addr & 0xFF);
10009648:	b2c0      	uxtb	r0, r0
1000964a:	7058      	strb	r0, [r3, #1]

    /* Check bank boundaries. */
    if (tmp[1] + length > st.hw->bank_size)
1000964c:	4b14      	ldr	r3, [pc, #80]	; (100096a0 <mpu_write_mem+0x70>)
1000964e:	685b      	ldr	r3, [r3, #4]
10009650:	1840      	adds	r0, r0, r1
10009652:	895a      	ldrh	r2, [r3, #10]
10009654:	4290      	cmp	r0, r2
10009656:	dc1c      	bgt.n	10009692 <mpu_write_mem+0x62>
        return -1;

    if (i2c_write(st.hw->addr, st.reg->bank_sel, 2, tmp))
10009658:	4a11      	ldr	r2, [pc, #68]	; (100096a0 <mpu_write_mem+0x70>)
1000965a:	6812      	ldr	r2, [r2, #0]
1000965c:	7ed1      	ldrb	r1, [r2, #27]
1000965e:	7818      	ldrb	r0, [r3, #0]
10009660:	ab01      	add	r3, sp, #4
10009662:	2202      	movs	r2, #2
10009664:	4e0f      	ldr	r6, [pc, #60]	; (100096a4 <mpu_write_mem+0x74>)
10009666:	47b0      	blx	r6
10009668:	2800      	cmp	r0, #0
1000966a:	d115      	bne.n	10009698 <mpu_write_mem+0x68>
        return -1;
    if (i2c_write(st.hw->addr, st.reg->mem_r_w, length, data))
1000966c:	b2e2      	uxtb	r2, r4
1000966e:	4b0c      	ldr	r3, [pc, #48]	; (100096a0 <mpu_write_mem+0x70>)
10009670:	6819      	ldr	r1, [r3, #0]
10009672:	7e09      	ldrb	r1, [r1, #24]
10009674:	685b      	ldr	r3, [r3, #4]
10009676:	7818      	ldrb	r0, [r3, #0]
10009678:	002b      	movs	r3, r5
1000967a:	4c0a      	ldr	r4, [pc, #40]	; (100096a4 <mpu_write_mem+0x74>)
1000967c:	47a0      	blx	r4
1000967e:	1e43      	subs	r3, r0, #1
10009680:	4198      	sbcs	r0, r3
10009682:	4240      	negs	r0, r0
10009684:	e00a      	b.n	1000969c <mpu_write_mem+0x6c>
        unsigned char *data)
{
    unsigned char tmp[2];

    if (!data)
        return -1;
10009686:	2001      	movs	r0, #1
10009688:	4240      	negs	r0, r0
1000968a:	e007      	b.n	1000969c <mpu_write_mem+0x6c>
    if (!st.chip_cfg.sensors)
        return -1;
1000968c:	2001      	movs	r0, #1
1000968e:	4240      	negs	r0, r0
10009690:	e004      	b.n	1000969c <mpu_write_mem+0x6c>
    tmp[0] = (unsigned char)(mem_addr >> 8);
    tmp[1] = (unsigned char)(mem_addr & 0xFF);

    /* Check bank boundaries. */
    if (tmp[1] + length > st.hw->bank_size)
        return -1;
10009692:	2001      	movs	r0, #1
10009694:	4240      	negs	r0, r0
10009696:	e001      	b.n	1000969c <mpu_write_mem+0x6c>

    if (i2c_write(st.hw->addr, st.reg->bank_sel, 2, tmp))
        return -1;
10009698:	2001      	movs	r0, #1
1000969a:	4240      	negs	r0, r0
    if (i2c_write(st.hw->addr, st.reg->mem_r_w, length, data))
        return -1;
    return 0;
}
1000969c:	b002      	add	sp, #8
1000969e:	bd70      	pop	{r4, r5, r6, pc}
100096a0:	10018608 	.word	0x10018608
100096a4:	1000aab9 	.word	0x1000aab9

100096a8 <mpu_set_dmp_state>:
 *  @brief      Enable/disable DMP support.
 *  @param[in]  enable  1 to turn on the DMP.
 *  @return     0 if successful.
 */
int mpu_set_dmp_state(unsigned char enable)
{
100096a8:	b570      	push	{r4, r5, r6, lr}
100096aa:	b082      	sub	sp, #8
    unsigned char tmp;
    if (st.chip_cfg.dmp_on == enable)
100096ac:	2324      	movs	r3, #36	; 0x24
100096ae:	4a21      	ldr	r2, [pc, #132]	; (10009734 <mpu_set_dmp_state+0x8c>)
100096b0:	5cd3      	ldrb	r3, [r2, r3]
100096b2:	4283      	cmp	r3, r0
100096b4:	d037      	beq.n	10009726 <mpu_set_dmp_state+0x7e>
        return 0;

    if (enable) {
100096b6:	2800      	cmp	r0, #0
100096b8:	d020      	beq.n	100096fc <mpu_set_dmp_state+0x54>
        if (!st.chip_cfg.dmp_loaded)
100096ba:	2325      	movs	r3, #37	; 0x25
100096bc:	5cd3      	ldrb	r3, [r2, r3]
100096be:	2b00      	cmp	r3, #0
100096c0:	d033      	beq.n	1000972a <mpu_set_dmp_state+0x82>
            return -1;
        /* Disable data ready interrupt. */
        set_int_enable(0);
100096c2:	2000      	movs	r0, #0
100096c4:	4d1c      	ldr	r5, [pc, #112]	; (10009738 <mpu_set_dmp_state+0x90>)
100096c6:	47a8      	blx	r5
        /* Disable bypass mode. */
        mpu_set_bypass(0);
100096c8:	2000      	movs	r0, #0
100096ca:	4b1c      	ldr	r3, [pc, #112]	; (1000973c <mpu_set_dmp_state+0x94>)
100096cc:	4798      	blx	r3
        /* Keep constant sample rate, FIFO rate controlled by DMP. */
        mpu_set_sample_rate(st.chip_cfg.dmp_sample_rate);
100096ce:	4c19      	ldr	r4, [pc, #100]	; (10009734 <mpu_set_dmp_state+0x8c>)
100096d0:	8ce0      	ldrh	r0, [r4, #38]	; 0x26
100096d2:	4b1b      	ldr	r3, [pc, #108]	; (10009740 <mpu_set_dmp_state+0x98>)
100096d4:	4798      	blx	r3
        /* Remove FIFO elements. */
        tmp = 0;
100096d6:	466b      	mov	r3, sp
100096d8:	3307      	adds	r3, #7
100096da:	2200      	movs	r2, #0
100096dc:	701a      	strb	r2, [r3, #0]
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
100096de:	6862      	ldr	r2, [r4, #4]
100096e0:	7810      	ldrb	r0, [r2, #0]
100096e2:	2201      	movs	r2, #1
100096e4:	2123      	movs	r1, #35	; 0x23
100096e6:	4e17      	ldr	r6, [pc, #92]	; (10009744 <mpu_set_dmp_state+0x9c>)
100096e8:	47b0      	blx	r6
        st.chip_cfg.dmp_on = 1;
100096ea:	2201      	movs	r2, #1
100096ec:	2324      	movs	r3, #36	; 0x24
100096ee:	54e2      	strb	r2, [r4, r3]
        /* Enable DMP interrupt. */
        set_int_enable(1);
100096f0:	2001      	movs	r0, #1
100096f2:	47a8      	blx	r5
        mpu_reset_fifo();
100096f4:	4b14      	ldr	r3, [pc, #80]	; (10009748 <mpu_set_dmp_state+0xa0>)
100096f6:	4798      	blx	r3
        tmp = st.chip_cfg.fifo_enable;
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
        st.chip_cfg.dmp_on = 0;
        mpu_reset_fifo();
    }
    return 0;
100096f8:	2000      	movs	r0, #0
100096fa:	e018      	b.n	1000972e <mpu_set_dmp_state+0x86>
        /* Enable DMP interrupt. */
        set_int_enable(1);
        mpu_reset_fifo();
    } else {
        /* Disable DMP interrupt. */
        set_int_enable(0);
100096fc:	2000      	movs	r0, #0
100096fe:	4b0e      	ldr	r3, [pc, #56]	; (10009738 <mpu_set_dmp_state+0x90>)
10009700:	4798      	blx	r3
        /* Restore FIFO settings. */
        tmp = st.chip_cfg.fifo_enable;
10009702:	466b      	mov	r3, sp
10009704:	3307      	adds	r3, #7
10009706:	4c0b      	ldr	r4, [pc, #44]	; (10009734 <mpu_set_dmp_state+0x8c>)
10009708:	7c22      	ldrb	r2, [r4, #16]
1000970a:	701a      	strb	r2, [r3, #0]
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
1000970c:	6862      	ldr	r2, [r4, #4]
1000970e:	7810      	ldrb	r0, [r2, #0]
10009710:	2201      	movs	r2, #1
10009712:	2123      	movs	r1, #35	; 0x23
10009714:	4d0b      	ldr	r5, [pc, #44]	; (10009744 <mpu_set_dmp_state+0x9c>)
10009716:	47a8      	blx	r5
        st.chip_cfg.dmp_on = 0;
10009718:	2200      	movs	r2, #0
1000971a:	2324      	movs	r3, #36	; 0x24
1000971c:	54e2      	strb	r2, [r4, r3]
        mpu_reset_fifo();
1000971e:	4b0a      	ldr	r3, [pc, #40]	; (10009748 <mpu_set_dmp_state+0xa0>)
10009720:	4798      	blx	r3
    }
    return 0;
10009722:	2000      	movs	r0, #0
10009724:	e003      	b.n	1000972e <mpu_set_dmp_state+0x86>
 */
int mpu_set_dmp_state(unsigned char enable)
{
    unsigned char tmp;
    if (st.chip_cfg.dmp_on == enable)
        return 0;
10009726:	2000      	movs	r0, #0
10009728:	e001      	b.n	1000972e <mpu_set_dmp_state+0x86>

    if (enable) {
        if (!st.chip_cfg.dmp_loaded)
            return -1;
1000972a:	2001      	movs	r0, #1
1000972c:	4240      	negs	r0, r0
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
        st.chip_cfg.dmp_on = 0;
        mpu_reset_fifo();
    }
    return 0;
}
1000972e:	b002      	add	sp, #8
10009730:	bd70      	pop	{r4, r5, r6, pc}
10009732:	46c0      	nop			; (mov r8, r8)
10009734:	10018608 	.word	0x10018608
10009738:	100084b1 	.word	0x100084b1
1000973c:	10008d0d 	.word	0x10008d0d
10009740:	10009045 	.word	0x10009045
10009744:	1000aab9 	.word	0x1000aab9
10009748:	1000860d 	.word	0x1000860d

1000974c <mpu_get_compass_reg>:
 *  @param[out] data        Raw data in hardware units.
 *  @param[out] timestamp   Timestamp in milliseconds. Null if not needed.
 *  @return     0 if successful.
 */
int mpu_get_compass_reg(short *data, unsigned long *timestamp)
{
1000974c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000974e:	b085      	sub	sp, #20
10009750:	0006      	movs	r6, r0
10009752:	000d      	movs	r5, r1
#ifdef AK89xx_SECONDARY
    unsigned char tmp[9];

    if (!(st.chip_cfg.sensors & INV_XYZ_COMPASS))
10009754:	4b29      	ldr	r3, [pc, #164]	; (100097fc <mpu_get_compass_reg+0xb0>)
10009756:	7a9b      	ldrb	r3, [r3, #10]
10009758:	07db      	lsls	r3, r3, #31
1000975a:	d540      	bpl.n	100097de <mpu_get_compass_reg+0x92>
        return -1;
    tmp[8] = AKM_SINGLE_MEASUREMENT;
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, tmp+8))
        return -1;
#else
    if (i2c_read(st.hw->addr, st.reg->raw_compass, 8, tmp))
1000975c:	4b27      	ldr	r3, [pc, #156]	; (100097fc <mpu_get_compass_reg+0xb0>)
1000975e:	2228      	movs	r2, #40	; 0x28
10009760:	6819      	ldr	r1, [r3, #0]
10009762:	5c89      	ldrb	r1, [r1, r2]
10009764:	685b      	ldr	r3, [r3, #4]
10009766:	7818      	ldrb	r0, [r3, #0]
10009768:	ab01      	add	r3, sp, #4
1000976a:	3a20      	subs	r2, #32
1000976c:	4c24      	ldr	r4, [pc, #144]	; (10009800 <mpu_get_compass_reg+0xb4>)
1000976e:	47a0      	blx	r4
10009770:	1e04      	subs	r4, r0, #0
10009772:	d137      	bne.n	100097e4 <mpu_get_compass_reg+0x98>
        return -2;
    if ((tmp[7] & AKM_OVERFLOW) || (tmp[7] & AKM_DATA_ERROR))
        return -3;
#elif defined AK8963_SECONDARY
    /* AK8963 doesn't have the data read error bit. */
    if (!(tmp[0] & AKM_DATA_READY) || (tmp[0] & AKM_DATA_OVERRUN))
10009774:	ab01      	add	r3, sp, #4
10009776:	781b      	ldrb	r3, [r3, #0]
10009778:	2203      	movs	r2, #3
1000977a:	4013      	ands	r3, r2
1000977c:	2b01      	cmp	r3, #1
1000977e:	d134      	bne.n	100097ea <mpu_get_compass_reg+0x9e>
        return -2;
    if (tmp[7] & AKM_OVERFLOW)
10009780:	ab01      	add	r3, sp, #4
10009782:	79db      	ldrb	r3, [r3, #7]
10009784:	2b7f      	cmp	r3, #127	; 0x7f
10009786:	d833      	bhi.n	100097f0 <mpu_get_compass_reg+0xa4>
        return -3;
#endif
    data[0] = (tmp[2] << 8) | tmp[1];
10009788:	a801      	add	r0, sp, #4
1000978a:	7881      	ldrb	r1, [r0, #2]
1000978c:	0209      	lsls	r1, r1, #8
1000978e:	7843      	ldrb	r3, [r0, #1]
10009790:	4319      	orrs	r1, r3
10009792:	b209      	sxth	r1, r1
10009794:	8031      	strh	r1, [r6, #0]
    data[1] = (tmp[4] << 8) | tmp[3];
10009796:	7902      	ldrb	r2, [r0, #4]
10009798:	0212      	lsls	r2, r2, #8
1000979a:	78c3      	ldrb	r3, [r0, #3]
1000979c:	431a      	orrs	r2, r3
1000979e:	b212      	sxth	r2, r2
100097a0:	8072      	strh	r2, [r6, #2]
    data[2] = (tmp[6] << 8) | tmp[5];
100097a2:	7983      	ldrb	r3, [r0, #6]
100097a4:	021b      	lsls	r3, r3, #8
100097a6:	7940      	ldrb	r0, [r0, #5]
100097a8:	4303      	orrs	r3, r0
100097aa:	b21b      	sxth	r3, r3
100097ac:	469c      	mov	ip, r3
100097ae:	80b3      	strh	r3, [r6, #4]

    data[0] = ((long)data[0] * st.chip_cfg.mag_sens_adj[0]) >> 8;
100097b0:	4812      	ldr	r0, [pc, #72]	; (100097fc <mpu_get_compass_reg+0xb0>)
100097b2:	232c      	movs	r3, #44	; 0x2c
100097b4:	5ec7      	ldrsh	r7, [r0, r3]
100097b6:	4379      	muls	r1, r7
100097b8:	1209      	asrs	r1, r1, #8
100097ba:	8031      	strh	r1, [r6, #0]
    data[1] = ((long)data[1] * st.chip_cfg.mag_sens_adj[1]) >> 8;
100097bc:	232e      	movs	r3, #46	; 0x2e
100097be:	5ec1      	ldrsh	r1, [r0, r3]
100097c0:	434a      	muls	r2, r1
100097c2:	1212      	asrs	r2, r2, #8
100097c4:	8072      	strh	r2, [r6, #2]
    data[2] = ((long)data[2] * st.chip_cfg.mag_sens_adj[2]) >> 8;
100097c6:	2330      	movs	r3, #48	; 0x30
100097c8:	5ec2      	ldrsh	r2, [r0, r3]
100097ca:	4663      	mov	r3, ip
100097cc:	4353      	muls	r3, r2
100097ce:	121b      	asrs	r3, r3, #8
100097d0:	80b3      	strh	r3, [r6, #4]

    if (timestamp)
100097d2:	2d00      	cmp	r5, #0
100097d4:	d00e      	beq.n	100097f4 <mpu_get_compass_reg+0xa8>
        get_ms(timestamp);
100097d6:	0028      	movs	r0, r5
100097d8:	4b0a      	ldr	r3, [pc, #40]	; (10009804 <mpu_get_compass_reg+0xb8>)
100097da:	4798      	blx	r3
100097dc:	e00a      	b.n	100097f4 <mpu_get_compass_reg+0xa8>
{
#ifdef AK89xx_SECONDARY
    unsigned char tmp[9];

    if (!(st.chip_cfg.sensors & INV_XYZ_COMPASS))
        return -1;
100097de:	2401      	movs	r4, #1
100097e0:	4264      	negs	r4, r4
100097e2:	e007      	b.n	100097f4 <mpu_get_compass_reg+0xa8>
    tmp[8] = AKM_SINGLE_MEASUREMENT;
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, tmp+8))
        return -1;
#else
    if (i2c_read(st.hw->addr, st.reg->raw_compass, 8, tmp))
        return -1;
100097e4:	2401      	movs	r4, #1
100097e6:	4264      	negs	r4, r4
100097e8:	e004      	b.n	100097f4 <mpu_get_compass_reg+0xa8>
    if ((tmp[7] & AKM_OVERFLOW) || (tmp[7] & AKM_DATA_ERROR))
        return -3;
#elif defined AK8963_SECONDARY
    /* AK8963 doesn't have the data read error bit. */
    if (!(tmp[0] & AKM_DATA_READY) || (tmp[0] & AKM_DATA_OVERRUN))
        return -2;
100097ea:	2402      	movs	r4, #2
100097ec:	4264      	negs	r4, r4
100097ee:	e001      	b.n	100097f4 <mpu_get_compass_reg+0xa8>
    if (tmp[7] & AKM_OVERFLOW)
        return -3;
100097f0:	2403      	movs	r4, #3
100097f2:	4264      	negs	r4, r4
        get_ms(timestamp);
    return 0;
#else
    return -1;
#endif
}
100097f4:	0020      	movs	r0, r4
100097f6:	b005      	add	sp, #20
100097f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
100097fa:	46c0      	nop			; (mov r8, r8)
100097fc:	10018608 	.word	0x10018608
10009800:	1000ab59 	.word	0x1000ab59
10009804:	1000b661 	.word	0x1000b661

10009808 <mpu_get_compass_fsr>:
 *  @return     0 if successful.
 */
int mpu_get_compass_fsr(unsigned short *fsr)
{
#ifdef AK89xx_SECONDARY
    fsr[0] = st.hw->compass_fsr;
10009808:	4b02      	ldr	r3, [pc, #8]	; (10009814 <mpu_get_compass_fsr+0xc>)
1000980a:	685b      	ldr	r3, [r3, #4]
1000980c:	899b      	ldrh	r3, [r3, #12]
1000980e:	8003      	strh	r3, [r0, #0]
    return 0;
#else
    return -1;
#endif
}
10009810:	2000      	movs	r0, #0
10009812:	4770      	bx	lr
10009814:	10018608 	.word	0x10018608

10009818 <dmp_set_fifo_rate>:
 *  Only used when DMP is on.
 *  @param[in]  rate    Desired fifo rate (Hz).
 *  @return     0 if successful.
 */
int dmp_set_fifo_rate(unsigned short rate)
{
10009818:	b510      	push	{r4, lr}
1000981a:	b086      	sub	sp, #24
1000981c:	0004      	movs	r4, r0
    const unsigned char regs_end[12] = {DINAFE, DINAF2, DINAAB,
1000981e:	220c      	movs	r2, #12
10009820:	4915      	ldr	r1, [pc, #84]	; (10009878 <dmp_set_fifo_rate+0x60>)
10009822:	3110      	adds	r1, #16
10009824:	a803      	add	r0, sp, #12
10009826:	4b15      	ldr	r3, [pc, #84]	; (1000987c <dmp_set_fifo_rate+0x64>)
10009828:	4798      	blx	r3
        0xc4, DINAAA, DINAF1, DINADF, DINADF, 0xBB, 0xAF, DINADF, DINADF};
    unsigned short div;
    unsigned char tmp[8];

    if (rate > DMP_SAMPLE_RATE)
1000982a:	2cc8      	cmp	r4, #200	; 0xc8
1000982c:	d819      	bhi.n	10009862 <dmp_set_fifo_rate+0x4a>
        return -1;
    div = DMP_SAMPLE_RATE / rate - 1;
1000982e:	0021      	movs	r1, r4
10009830:	20c8      	movs	r0, #200	; 0xc8
10009832:	4b13      	ldr	r3, [pc, #76]	; (10009880 <dmp_set_fifo_rate+0x68>)
10009834:	4798      	blx	r3
10009836:	3801      	subs	r0, #1
10009838:	b280      	uxth	r0, r0
    tmp[0] = (unsigned char)((div >> 8) & 0xFF);
1000983a:	aa01      	add	r2, sp, #4
1000983c:	0a03      	lsrs	r3, r0, #8
1000983e:	7013      	strb	r3, [r2, #0]
    tmp[1] = (unsigned char)(div & 0xFF);
10009840:	7050      	strb	r0, [r2, #1]
    if (mpu_write_mem(D_0_22, 2, tmp))
10009842:	2102      	movs	r1, #2
10009844:	480f      	ldr	r0, [pc, #60]	; (10009884 <dmp_set_fifo_rate+0x6c>)
10009846:	4b10      	ldr	r3, [pc, #64]	; (10009888 <dmp_set_fifo_rate+0x70>)
10009848:	4798      	blx	r3
1000984a:	2800      	cmp	r0, #0
1000984c:	d10c      	bne.n	10009868 <dmp_set_fifo_rate+0x50>
        return -1;
    if (mpu_write_mem(CFG_6, 12, (unsigned char*)regs_end))
1000984e:	aa03      	add	r2, sp, #12
10009850:	210c      	movs	r1, #12
10009852:	480e      	ldr	r0, [pc, #56]	; (1000988c <dmp_set_fifo_rate+0x74>)
10009854:	4b0c      	ldr	r3, [pc, #48]	; (10009888 <dmp_set_fifo_rate+0x70>)
10009856:	4798      	blx	r3
10009858:	2800      	cmp	r0, #0
1000985a:	d108      	bne.n	1000986e <dmp_set_fifo_rate+0x56>
        return -1;

    dmp.fifo_rate = rate;
1000985c:	4b0c      	ldr	r3, [pc, #48]	; (10009890 <dmp_set_fifo_rate+0x78>)
1000985e:	819c      	strh	r4, [r3, #12]
    return 0;
10009860:	e007      	b.n	10009872 <dmp_set_fifo_rate+0x5a>
        0xc4, DINAAA, DINAF1, DINADF, DINADF, 0xBB, 0xAF, DINADF, DINADF};
    unsigned short div;
    unsigned char tmp[8];

    if (rate > DMP_SAMPLE_RATE)
        return -1;
10009862:	2001      	movs	r0, #1
10009864:	4240      	negs	r0, r0
10009866:	e004      	b.n	10009872 <dmp_set_fifo_rate+0x5a>
    div = DMP_SAMPLE_RATE / rate - 1;
    tmp[0] = (unsigned char)((div >> 8) & 0xFF);
    tmp[1] = (unsigned char)(div & 0xFF);
    if (mpu_write_mem(D_0_22, 2, tmp))
        return -1;
10009868:	2001      	movs	r0, #1
1000986a:	4240      	negs	r0, r0
1000986c:	e001      	b.n	10009872 <dmp_set_fifo_rate+0x5a>
    if (mpu_write_mem(CFG_6, 12, (unsigned char*)regs_end))
        return -1;
1000986e:	2001      	movs	r0, #1
10009870:	4240      	negs	r0, r0

    dmp.fifo_rate = rate;
    return 0;
}
10009872:	b006      	add	sp, #24
10009874:	bd10      	pop	{r4, pc}
10009876:	46c0      	nop			; (mov r8, r8)
10009878:	100168ac 	.word	0x100168ac
1000987c:	10015227 	.word	0x10015227
10009880:	10013249 	.word	0x10013249
10009884:	00000216 	.word	0x00000216
10009888:	10009631 	.word	0x10009631
1000988c:	00000ac1 	.word	0x00000ac1
10009890:	100186cc 	.word	0x100186cc

10009894 <dmp_set_tap_thresh>:
 *  @param[in]  axis    1, 2, and 4 for XYZ accel, respectively.
 *  @param[in]  thresh  Tap threshold, in mg/ms.
 *  @return     0 if successful.
 */
int dmp_set_tap_thresh(unsigned char axis, unsigned short thresh)
{
10009894:	b5f0      	push	{r4, r5, r6, r7, lr}
10009896:	4647      	mov	r7, r8
10009898:	b480      	push	{r7}
1000989a:	b082      	sub	sp, #8
1000989c:	0004      	movs	r4, r0
    unsigned char tmp[4], accel_fsr;
    float scaled_thresh;
    unsigned short dmp_thresh, dmp_thresh_2;
    if (!(axis & TAP_XYZ) || thresh > 1600)
1000989e:	0743      	lsls	r3, r0, #29
100098a0:	d100      	bne.n	100098a4 <dmp_set_tap_thresh+0x10>
100098a2:	e09c      	b.n	100099de <dmp_set_tap_thresh+0x14a>
100098a4:	23c8      	movs	r3, #200	; 0xc8
100098a6:	00db      	lsls	r3, r3, #3
100098a8:	4299      	cmp	r1, r3
100098aa:	d900      	bls.n	100098ae <dmp_set_tap_thresh+0x1a>
100098ac:	e09a      	b.n	100099e4 <dmp_set_tap_thresh+0x150>
        return -1;

    scaled_thresh = (float)thresh / DMP_SAMPLE_RATE;
100098ae:	0008      	movs	r0, r1
100098b0:	4b58      	ldr	r3, [pc, #352]	; (10009a14 <dmp_set_tap_thresh+0x180>)
100098b2:	4798      	blx	r3
100098b4:	4958      	ldr	r1, [pc, #352]	; (10009a18 <dmp_set_tap_thresh+0x184>)
100098b6:	4b59      	ldr	r3, [pc, #356]	; (10009a1c <dmp_set_tap_thresh+0x188>)
100098b8:	4798      	blx	r3
100098ba:	1c06      	adds	r6, r0, #0

    mpu_get_accel_fsr(&accel_fsr);
100098bc:	466b      	mov	r3, sp
100098be:	1cdd      	adds	r5, r3, #3
100098c0:	0028      	movs	r0, r5
100098c2:	4b57      	ldr	r3, [pc, #348]	; (10009a20 <dmp_set_tap_thresh+0x18c>)
100098c4:	4798      	blx	r3
    switch (accel_fsr) {
100098c6:	782b      	ldrb	r3, [r5, #0]
100098c8:	2b04      	cmp	r3, #4
100098ca:	d019      	beq.n	10009900 <dmp_set_tap_thresh+0x6c>
100098cc:	b2da      	uxtb	r2, r3
100098ce:	2a04      	cmp	r2, #4
100098d0:	d802      	bhi.n	100098d8 <dmp_set_tap_thresh+0x44>
100098d2:	2b02      	cmp	r3, #2
100098d4:	d005      	beq.n	100098e2 <dmp_set_tap_thresh+0x4e>
100098d6:	e088      	b.n	100099ea <dmp_set_tap_thresh+0x156>
100098d8:	2b08      	cmp	r3, #8
100098da:	d020      	beq.n	1000991e <dmp_set_tap_thresh+0x8a>
100098dc:	2b10      	cmp	r3, #16
100098de:	d02d      	beq.n	1000993c <dmp_set_tap_thresh+0xa8>
100098e0:	e083      	b.n	100099ea <dmp_set_tap_thresh+0x156>
    case 2:
        dmp_thresh = (unsigned short)(scaled_thresh * 16384);
100098e2:	4b50      	ldr	r3, [pc, #320]	; (10009a24 <dmp_set_tap_thresh+0x190>)
100098e4:	4698      	mov	r8, r3
100098e6:	218d      	movs	r1, #141	; 0x8d
100098e8:	05c9      	lsls	r1, r1, #23
100098ea:	1c30      	adds	r0, r6, #0
100098ec:	4798      	blx	r3
100098ee:	4f4e      	ldr	r7, [pc, #312]	; (10009a28 <dmp_set_tap_thresh+0x194>)
100098f0:	47b8      	blx	r7
100098f2:	b285      	uxth	r5, r0
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 12288);
100098f4:	494d      	ldr	r1, [pc, #308]	; (10009a2c <dmp_set_tap_thresh+0x198>)
100098f6:	1c30      	adds	r0, r6, #0
100098f8:	47c0      	blx	r8
100098fa:	47b8      	blx	r7
100098fc:	b280      	uxth	r0, r0
        break;
100098fe:	e02b      	b.n	10009958 <dmp_set_tap_thresh+0xc4>
    case 4:
        dmp_thresh = (unsigned short)(scaled_thresh * 8192);
10009900:	4b48      	ldr	r3, [pc, #288]	; (10009a24 <dmp_set_tap_thresh+0x190>)
10009902:	4698      	mov	r8, r3
10009904:	218c      	movs	r1, #140	; 0x8c
10009906:	05c9      	lsls	r1, r1, #23
10009908:	1c30      	adds	r0, r6, #0
1000990a:	4798      	blx	r3
1000990c:	4f46      	ldr	r7, [pc, #280]	; (10009a28 <dmp_set_tap_thresh+0x194>)
1000990e:	47b8      	blx	r7
10009910:	b285      	uxth	r5, r0
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 6144);
10009912:	4947      	ldr	r1, [pc, #284]	; (10009a30 <dmp_set_tap_thresh+0x19c>)
10009914:	1c30      	adds	r0, r6, #0
10009916:	47c0      	blx	r8
10009918:	47b8      	blx	r7
1000991a:	b280      	uxth	r0, r0
        break;
1000991c:	e01c      	b.n	10009958 <dmp_set_tap_thresh+0xc4>
    case 8:
        dmp_thresh = (unsigned short)(scaled_thresh * 4096);
1000991e:	4b41      	ldr	r3, [pc, #260]	; (10009a24 <dmp_set_tap_thresh+0x190>)
10009920:	4698      	mov	r8, r3
10009922:	218b      	movs	r1, #139	; 0x8b
10009924:	05c9      	lsls	r1, r1, #23
10009926:	1c30      	adds	r0, r6, #0
10009928:	4798      	blx	r3
1000992a:	4f3f      	ldr	r7, [pc, #252]	; (10009a28 <dmp_set_tap_thresh+0x194>)
1000992c:	47b8      	blx	r7
1000992e:	b285      	uxth	r5, r0
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 3072);
10009930:	4940      	ldr	r1, [pc, #256]	; (10009a34 <dmp_set_tap_thresh+0x1a0>)
10009932:	1c30      	adds	r0, r6, #0
10009934:	47c0      	blx	r8
10009936:	47b8      	blx	r7
10009938:	b280      	uxth	r0, r0
        break;
1000993a:	e00d      	b.n	10009958 <dmp_set_tap_thresh+0xc4>
    case 16:
        dmp_thresh = (unsigned short)(scaled_thresh * 2048);
1000993c:	4b39      	ldr	r3, [pc, #228]	; (10009a24 <dmp_set_tap_thresh+0x190>)
1000993e:	4698      	mov	r8, r3
10009940:	218a      	movs	r1, #138	; 0x8a
10009942:	05c9      	lsls	r1, r1, #23
10009944:	1c30      	adds	r0, r6, #0
10009946:	4798      	blx	r3
10009948:	4f37      	ldr	r7, [pc, #220]	; (10009a28 <dmp_set_tap_thresh+0x194>)
1000994a:	47b8      	blx	r7
1000994c:	b285      	uxth	r5, r0
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 1536);
1000994e:	493a      	ldr	r1, [pc, #232]	; (10009a38 <dmp_set_tap_thresh+0x1a4>)
10009950:	1c30      	adds	r0, r6, #0
10009952:	47c0      	blx	r8
10009954:	47b8      	blx	r7
10009956:	b280      	uxth	r0, r0
        break;
    default:
        return -1;
    }
    tmp[0] = (unsigned char)(dmp_thresh >> 8);
10009958:	ab01      	add	r3, sp, #4
1000995a:	0a2a      	lsrs	r2, r5, #8
1000995c:	701a      	strb	r2, [r3, #0]
    tmp[1] = (unsigned char)(dmp_thresh & 0xFF);
1000995e:	705d      	strb	r5, [r3, #1]
    tmp[2] = (unsigned char)(dmp_thresh_2 >> 8);
10009960:	0a02      	lsrs	r2, r0, #8
10009962:	709a      	strb	r2, [r3, #2]
    tmp[3] = (unsigned char)(dmp_thresh_2 & 0xFF);
10009964:	70d8      	strb	r0, [r3, #3]

    if (axis & TAP_X) {
10009966:	07e3      	lsls	r3, r4, #31
10009968:	d510      	bpl.n	1000998c <dmp_set_tap_thresh+0xf8>
        if (mpu_write_mem(DMP_TAP_THX, 2, tmp))
1000996a:	aa01      	add	r2, sp, #4
1000996c:	2102      	movs	r1, #2
1000996e:	20ea      	movs	r0, #234	; 0xea
10009970:	0040      	lsls	r0, r0, #1
10009972:	4b32      	ldr	r3, [pc, #200]	; (10009a3c <dmp_set_tap_thresh+0x1a8>)
10009974:	4798      	blx	r3
10009976:	2800      	cmp	r0, #0
10009978:	d13a      	bne.n	100099f0 <dmp_set_tap_thresh+0x15c>
            return -1;
        if (mpu_write_mem(D_1_36, 2, tmp+2))
1000997a:	466b      	mov	r3, sp
1000997c:	1d9a      	adds	r2, r3, #6
1000997e:	2102      	movs	r1, #2
10009980:	3025      	adds	r0, #37	; 0x25
10009982:	30ff      	adds	r0, #255	; 0xff
10009984:	4b2d      	ldr	r3, [pc, #180]	; (10009a3c <dmp_set_tap_thresh+0x1a8>)
10009986:	4798      	blx	r3
10009988:	2800      	cmp	r0, #0
1000998a:	d134      	bne.n	100099f6 <dmp_set_tap_thresh+0x162>
            return -1;
    }
    if (axis & TAP_Y) {
1000998c:	07a3      	lsls	r3, r4, #30
1000998e:	d510      	bpl.n	100099b2 <dmp_set_tap_thresh+0x11e>
        if (mpu_write_mem(DMP_TAP_THY, 2, tmp))
10009990:	aa01      	add	r2, sp, #4
10009992:	2102      	movs	r1, #2
10009994:	20ec      	movs	r0, #236	; 0xec
10009996:	0040      	lsls	r0, r0, #1
10009998:	4b28      	ldr	r3, [pc, #160]	; (10009a3c <dmp_set_tap_thresh+0x1a8>)
1000999a:	4798      	blx	r3
1000999c:	2800      	cmp	r0, #0
1000999e:	d12d      	bne.n	100099fc <dmp_set_tap_thresh+0x168>
            return -1;
        if (mpu_write_mem(D_1_40, 2, tmp+2))
100099a0:	466b      	mov	r3, sp
100099a2:	1d9a      	adds	r2, r3, #6
100099a4:	2102      	movs	r1, #2
100099a6:	3029      	adds	r0, #41	; 0x29
100099a8:	30ff      	adds	r0, #255	; 0xff
100099aa:	4b24      	ldr	r3, [pc, #144]	; (10009a3c <dmp_set_tap_thresh+0x1a8>)
100099ac:	4798      	blx	r3
100099ae:	2800      	cmp	r0, #0
100099b0:	d127      	bne.n	10009a02 <dmp_set_tap_thresh+0x16e>
        if (mpu_write_mem(DMP_TAP_THZ, 2, tmp))
            return -1;
        if (mpu_write_mem(D_1_44, 2, tmp+2))
            return -1;
    }
    return 0;
100099b2:	2000      	movs	r0, #0
        if (mpu_write_mem(DMP_TAP_THY, 2, tmp))
            return -1;
        if (mpu_write_mem(D_1_40, 2, tmp+2))
            return -1;
    }
    if (axis & TAP_Z) {
100099b4:	0763      	lsls	r3, r4, #29
100099b6:	d529      	bpl.n	10009a0c <dmp_set_tap_thresh+0x178>
        if (mpu_write_mem(DMP_TAP_THZ, 2, tmp))
100099b8:	aa01      	add	r2, sp, #4
100099ba:	2102      	movs	r1, #2
100099bc:	30dd      	adds	r0, #221	; 0xdd
100099be:	30ff      	adds	r0, #255	; 0xff
100099c0:	4b1e      	ldr	r3, [pc, #120]	; (10009a3c <dmp_set_tap_thresh+0x1a8>)
100099c2:	4798      	blx	r3
100099c4:	2800      	cmp	r0, #0
100099c6:	d11f      	bne.n	10009a08 <dmp_set_tap_thresh+0x174>
            return -1;
        if (mpu_write_mem(D_1_44, 2, tmp+2))
100099c8:	466b      	mov	r3, sp
100099ca:	1d9a      	adds	r2, r3, #6
100099cc:	2102      	movs	r1, #2
100099ce:	302d      	adds	r0, #45	; 0x2d
100099d0:	30ff      	adds	r0, #255	; 0xff
100099d2:	4b1a      	ldr	r3, [pc, #104]	; (10009a3c <dmp_set_tap_thresh+0x1a8>)
100099d4:	4798      	blx	r3
100099d6:	1e43      	subs	r3, r0, #1
100099d8:	4198      	sbcs	r0, r3
100099da:	4240      	negs	r0, r0
100099dc:	e016      	b.n	10009a0c <dmp_set_tap_thresh+0x178>
{
    unsigned char tmp[4], accel_fsr;
    float scaled_thresh;
    unsigned short dmp_thresh, dmp_thresh_2;
    if (!(axis & TAP_XYZ) || thresh > 1600)
        return -1;
100099de:	2001      	movs	r0, #1
100099e0:	4240      	negs	r0, r0
100099e2:	e013      	b.n	10009a0c <dmp_set_tap_thresh+0x178>
100099e4:	2001      	movs	r0, #1
100099e6:	4240      	negs	r0, r0
100099e8:	e010      	b.n	10009a0c <dmp_set_tap_thresh+0x178>
        dmp_thresh = (unsigned short)(scaled_thresh * 2048);
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 1536);
        break;
    default:
        return -1;
100099ea:	2001      	movs	r0, #1
100099ec:	4240      	negs	r0, r0
100099ee:	e00d      	b.n	10009a0c <dmp_set_tap_thresh+0x178>
    tmp[2] = (unsigned char)(dmp_thresh_2 >> 8);
    tmp[3] = (unsigned char)(dmp_thresh_2 & 0xFF);

    if (axis & TAP_X) {
        if (mpu_write_mem(DMP_TAP_THX, 2, tmp))
            return -1;
100099f0:	2001      	movs	r0, #1
100099f2:	4240      	negs	r0, r0
100099f4:	e00a      	b.n	10009a0c <dmp_set_tap_thresh+0x178>
        if (mpu_write_mem(D_1_36, 2, tmp+2))
            return -1;
100099f6:	2001      	movs	r0, #1
100099f8:	4240      	negs	r0, r0
100099fa:	e007      	b.n	10009a0c <dmp_set_tap_thresh+0x178>
    }
    if (axis & TAP_Y) {
        if (mpu_write_mem(DMP_TAP_THY, 2, tmp))
            return -1;
100099fc:	2001      	movs	r0, #1
100099fe:	4240      	negs	r0, r0
10009a00:	e004      	b.n	10009a0c <dmp_set_tap_thresh+0x178>
        if (mpu_write_mem(D_1_40, 2, tmp+2))
            return -1;
10009a02:	2001      	movs	r0, #1
10009a04:	4240      	negs	r0, r0
10009a06:	e001      	b.n	10009a0c <dmp_set_tap_thresh+0x178>
    }
    if (axis & TAP_Z) {
        if (mpu_write_mem(DMP_TAP_THZ, 2, tmp))
            return -1;
10009a08:	2001      	movs	r0, #1
10009a0a:	4240      	negs	r0, r0
        if (mpu_write_mem(D_1_44, 2, tmp+2))
            return -1;
    }
    return 0;
}
10009a0c:	b002      	add	sp, #8
10009a0e:	bc04      	pop	{r2}
10009a10:	4690      	mov	r8, r2
10009a12:	bdf0      	pop	{r4, r5, r6, r7, pc}
10009a14:	1001425d 	.word	0x1001425d
10009a18:	43480000 	.word	0x43480000
10009a1c:	100138c1 	.word	0x100138c1
10009a20:	100088a5 	.word	0x100088a5
10009a24:	10013c55 	.word	0x10013c55
10009a28:	10013569 	.word	0x10013569
10009a2c:	46400000 	.word	0x46400000
10009a30:	45c00000 	.word	0x45c00000
10009a34:	45400000 	.word	0x45400000
10009a38:	44c00000 	.word	0x44c00000
10009a3c:	10009631 	.word	0x10009631

10009a40 <dmp_set_tap_axes>:
 *  @brief      Set which axes will register a tap.
 *  @param[in]  axis    1, 2, and 4 for XYZ, respectively.
 *  @return     0 if successful.
 */
int dmp_set_tap_axes(unsigned char axis)
{
10009a40:	b500      	push	{lr}
10009a42:	b083      	sub	sp, #12
    unsigned char tmp = 0;

    if (axis & TAP_X)
10009a44:	07c3      	lsls	r3, r0, #31
10009a46:	d403      	bmi.n	10009a50 <dmp_set_tap_axes+0x10>
 *  @param[in]  axis    1, 2, and 4 for XYZ, respectively.
 *  @return     0 if successful.
 */
int dmp_set_tap_axes(unsigned char axis)
{
    unsigned char tmp = 0;
10009a48:	2200      	movs	r2, #0
10009a4a:	466b      	mov	r3, sp
10009a4c:	71da      	strb	r2, [r3, #7]
10009a4e:	e002      	b.n	10009a56 <dmp_set_tap_axes+0x16>

    if (axis & TAP_X)
        tmp |= 0x30;
10009a50:	2230      	movs	r2, #48	; 0x30
10009a52:	466b      	mov	r3, sp
10009a54:	71da      	strb	r2, [r3, #7]
    if (axis & TAP_Y)
10009a56:	0783      	lsls	r3, r0, #30
10009a58:	d505      	bpl.n	10009a66 <dmp_set_tap_axes+0x26>
        tmp |= 0x0C;
10009a5a:	466b      	mov	r3, sp
10009a5c:	1dda      	adds	r2, r3, #7
10009a5e:	79d9      	ldrb	r1, [r3, #7]
10009a60:	230c      	movs	r3, #12
10009a62:	430b      	orrs	r3, r1
10009a64:	7013      	strb	r3, [r2, #0]
    if (axis & TAP_Z)
10009a66:	0743      	lsls	r3, r0, #29
10009a68:	d505      	bpl.n	10009a76 <dmp_set_tap_axes+0x36>
        tmp |= 0x03;
10009a6a:	466b      	mov	r3, sp
10009a6c:	1dda      	adds	r2, r3, #7
10009a6e:	79d9      	ldrb	r1, [r3, #7]
10009a70:	2303      	movs	r3, #3
10009a72:	430b      	orrs	r3, r1
10009a74:	7013      	strb	r3, [r2, #0]
    return mpu_write_mem(D_1_72, 1, &tmp);
10009a76:	466b      	mov	r3, sp
10009a78:	1dda      	adds	r2, r3, #7
10009a7a:	2101      	movs	r1, #1
10009a7c:	20a4      	movs	r0, #164	; 0xa4
10009a7e:	0040      	lsls	r0, r0, #1
10009a80:	4b01      	ldr	r3, [pc, #4]	; (10009a88 <dmp_set_tap_axes+0x48>)
10009a82:	4798      	blx	r3
}
10009a84:	b003      	add	sp, #12
10009a86:	bd00      	pop	{pc}
10009a88:	10009631 	.word	0x10009631

10009a8c <dmp_set_tap_count>:
 *  @brief      Set minimum number of taps needed for an interrupt.
 *  @param[in]  min_taps    Minimum consecutive taps (1-4).
 *  @return     0 if successful.
 */
int dmp_set_tap_count(unsigned char min_taps)
{
10009a8c:	b500      	push	{lr}
10009a8e:	b083      	sub	sp, #12
    unsigned char tmp;

    if (min_taps < 1)
        min_taps = 1;
10009a90:	2301      	movs	r3, #1
 */
int dmp_set_tap_count(unsigned char min_taps)
{
    unsigned char tmp;

    if (min_taps < 1)
10009a92:	2800      	cmp	r0, #0
10009a94:	d004      	beq.n	10009aa0 <dmp_set_tap_count+0x14>
10009a96:	1c03      	adds	r3, r0, #0
10009a98:	2804      	cmp	r0, #4
10009a9a:	d900      	bls.n	10009a9e <dmp_set_tap_count+0x12>
10009a9c:	2304      	movs	r3, #4
10009a9e:	b2db      	uxtb	r3, r3
        min_taps = 1;
    else if (min_taps > 4)
        min_taps = 4;

    tmp = min_taps - 1;
10009aa0:	466a      	mov	r2, sp
10009aa2:	3207      	adds	r2, #7
10009aa4:	3b01      	subs	r3, #1
10009aa6:	7013      	strb	r3, [r2, #0]
    return mpu_write_mem(D_1_79, 1, &tmp);
10009aa8:	2101      	movs	r1, #1
10009aaa:	2050      	movs	r0, #80	; 0x50
10009aac:	30ff      	adds	r0, #255	; 0xff
10009aae:	4b02      	ldr	r3, [pc, #8]	; (10009ab8 <dmp_set_tap_count+0x2c>)
10009ab0:	4798      	blx	r3
}
10009ab2:	b003      	add	sp, #12
10009ab4:	bd00      	pop	{pc}
10009ab6:	46c0      	nop			; (mov r8, r8)
10009ab8:	10009631 	.word	0x10009631

10009abc <dmp_set_tap_time>:
 *  @brief      Set length between valid taps.
 *  @param[in]  time    Milliseconds between taps.
 *  @return     0 if successful.
 */
int dmp_set_tap_time(unsigned short time)
{
10009abc:	b500      	push	{lr}
10009abe:	b083      	sub	sp, #12
    unsigned short dmp_time;
    unsigned char tmp[2];

    dmp_time = time / (1000 / DMP_SAMPLE_RATE);
10009ac0:	2105      	movs	r1, #5
10009ac2:	4b07      	ldr	r3, [pc, #28]	; (10009ae0 <dmp_set_tap_time+0x24>)
10009ac4:	4798      	blx	r3
10009ac6:	b280      	uxth	r0, r0
    tmp[0] = (unsigned char)(dmp_time >> 8);
10009ac8:	aa01      	add	r2, sp, #4
10009aca:	0a03      	lsrs	r3, r0, #8
10009acc:	7013      	strb	r3, [r2, #0]
    tmp[1] = (unsigned char)(dmp_time & 0xFF);
10009ace:	7050      	strb	r0, [r2, #1]
    return mpu_write_mem(DMP_TAPW_MIN, 2, tmp);
10009ad0:	2102      	movs	r1, #2
10009ad2:	20ef      	movs	r0, #239	; 0xef
10009ad4:	0040      	lsls	r0, r0, #1
10009ad6:	4b03      	ldr	r3, [pc, #12]	; (10009ae4 <dmp_set_tap_time+0x28>)
10009ad8:	4798      	blx	r3
}
10009ada:	b003      	add	sp, #12
10009adc:	bd00      	pop	{pc}
10009ade:	46c0      	nop			; (mov r8, r8)
10009ae0:	10013135 	.word	0x10013135
10009ae4:	10009631 	.word	0x10009631

10009ae8 <dmp_set_tap_time_multi>:
 *  @brief      Set max time between taps to register as a multi-tap.
 *  @param[in]  time    Max milliseconds between taps.
 *  @return     0 if successful.
 */
int dmp_set_tap_time_multi(unsigned short time)
{
10009ae8:	b500      	push	{lr}
10009aea:	b083      	sub	sp, #12
    unsigned short dmp_time;
    unsigned char tmp[2];

    dmp_time = time / (1000 / DMP_SAMPLE_RATE);
10009aec:	2105      	movs	r1, #5
10009aee:	4b07      	ldr	r3, [pc, #28]	; (10009b0c <dmp_set_tap_time_multi+0x24>)
10009af0:	4798      	blx	r3
10009af2:	b280      	uxth	r0, r0
    tmp[0] = (unsigned char)(dmp_time >> 8);
10009af4:	aa01      	add	r2, sp, #4
10009af6:	0a03      	lsrs	r3, r0, #8
10009af8:	7013      	strb	r3, [r2, #0]
    tmp[1] = (unsigned char)(dmp_time & 0xFF);
10009afa:	7050      	strb	r0, [r2, #1]
    return mpu_write_mem(D_1_218, 2, tmp);
10009afc:	2102      	movs	r1, #2
10009afe:	20ed      	movs	r0, #237	; 0xed
10009b00:	0040      	lsls	r0, r0, #1
10009b02:	4b03      	ldr	r3, [pc, #12]	; (10009b10 <dmp_set_tap_time_multi+0x28>)
10009b04:	4798      	blx	r3
}
10009b06:	b003      	add	sp, #12
10009b08:	bd00      	pop	{pc}
10009b0a:	46c0      	nop			; (mov r8, r8)
10009b0c:	10013135 	.word	0x10013135
10009b10:	10009631 	.word	0x10009631

10009b14 <dmp_set_shake_reject_thresh>:
 *  @param[in]  sf      Gyro scale factor.
 *  @param[in]  thresh  Gyro threshold in dps.
 *  @return     0 if successful.
 */
int dmp_set_shake_reject_thresh(long sf, unsigned short thresh)
{
10009b14:	b510      	push	{r4, lr}
10009b16:	b082      	sub	sp, #8
10009b18:	000c      	movs	r4, r1
    unsigned char tmp[4];
    long thresh_scaled = sf / 1000 * thresh;
10009b1a:	21fa      	movs	r1, #250	; 0xfa
10009b1c:	0089      	lsls	r1, r1, #2
10009b1e:	4b09      	ldr	r3, [pc, #36]	; (10009b44 <dmp_set_shake_reject_thresh+0x30>)
10009b20:	4798      	blx	r3
10009b22:	4360      	muls	r0, r4
    tmp[0] = (unsigned char)(((long)thresh_scaled >> 24) & 0xFF);
10009b24:	aa01      	add	r2, sp, #4
10009b26:	1603      	asrs	r3, r0, #24
10009b28:	7013      	strb	r3, [r2, #0]
    tmp[1] = (unsigned char)(((long)thresh_scaled >> 16) & 0xFF);
10009b2a:	1403      	asrs	r3, r0, #16
10009b2c:	7053      	strb	r3, [r2, #1]
    tmp[2] = (unsigned char)(((long)thresh_scaled >> 8) & 0xFF);
10009b2e:	1203      	asrs	r3, r0, #8
10009b30:	7093      	strb	r3, [r2, #2]
    tmp[3] = (unsigned char)((long)thresh_scaled & 0xFF);
10009b32:	70d0      	strb	r0, [r2, #3]
    return mpu_write_mem(D_1_92, 4, tmp);
10009b34:	2104      	movs	r1, #4
10009b36:	20ae      	movs	r0, #174	; 0xae
10009b38:	0040      	lsls	r0, r0, #1
10009b3a:	4b03      	ldr	r3, [pc, #12]	; (10009b48 <dmp_set_shake_reject_thresh+0x34>)
10009b3c:	4798      	blx	r3
}
10009b3e:	b002      	add	sp, #8
10009b40:	bd10      	pop	{r4, pc}
10009b42:	46c0      	nop			; (mov r8, r8)
10009b44:	10013249 	.word	0x10013249
10009b48:	10009631 	.word	0x10009631

10009b4c <dmp_set_shake_reject_time>:
 *  60 ms is added to this parameter.
 *  @param[in]  time    Time in milliseconds.
 *  @return     0 if successful.
 */
int dmp_set_shake_reject_time(unsigned short time)
{
10009b4c:	b500      	push	{lr}
10009b4e:	b083      	sub	sp, #12
    unsigned char tmp[2];

    time /= (1000 / DMP_SAMPLE_RATE);
10009b50:	2105      	movs	r1, #5
10009b52:	4b07      	ldr	r3, [pc, #28]	; (10009b70 <dmp_set_shake_reject_time+0x24>)
10009b54:	4798      	blx	r3
10009b56:	b280      	uxth	r0, r0
    tmp[0] = time >> 8;
10009b58:	aa01      	add	r2, sp, #4
10009b5a:	0a03      	lsrs	r3, r0, #8
10009b5c:	7013      	strb	r3, [r2, #0]
    tmp[1] = time & 0xFF;
10009b5e:	7050      	strb	r0, [r2, #1]
    return mpu_write_mem(D_1_90,2,tmp);
10009b60:	2102      	movs	r1, #2
10009b62:	20ad      	movs	r0, #173	; 0xad
10009b64:	0040      	lsls	r0, r0, #1
10009b66:	4b03      	ldr	r3, [pc, #12]	; (10009b74 <dmp_set_shake_reject_time+0x28>)
10009b68:	4798      	blx	r3
}
10009b6a:	b003      	add	sp, #12
10009b6c:	bd00      	pop	{pc}
10009b6e:	46c0      	nop			; (mov r8, r8)
10009b70:	10013135 	.word	0x10013135
10009b74:	10009631 	.word	0x10009631

10009b78 <dmp_set_shake_reject_timeout>:
 *  60 ms is added to this parameter.
 *  @param[in]  time    Time in milliseconds.
 *  @return     0 if successful.
 */
int dmp_set_shake_reject_timeout(unsigned short time)
{
10009b78:	b500      	push	{lr}
10009b7a:	b083      	sub	sp, #12
    unsigned char tmp[2];

    time /= (1000 / DMP_SAMPLE_RATE);
10009b7c:	2105      	movs	r1, #5
10009b7e:	4b07      	ldr	r3, [pc, #28]	; (10009b9c <dmp_set_shake_reject_timeout+0x24>)
10009b80:	4798      	blx	r3
10009b82:	b280      	uxth	r0, r0
    tmp[0] = time >> 8;
10009b84:	aa01      	add	r2, sp, #4
10009b86:	0a03      	lsrs	r3, r0, #8
10009b88:	7013      	strb	r3, [r2, #0]
    tmp[1] = time & 0xFF;
10009b8a:	7050      	strb	r0, [r2, #1]
    return mpu_write_mem(D_1_88,2,tmp);
10009b8c:	2102      	movs	r1, #2
10009b8e:	20ac      	movs	r0, #172	; 0xac
10009b90:	0040      	lsls	r0, r0, #1
10009b92:	4b03      	ldr	r3, [pc, #12]	; (10009ba0 <dmp_set_shake_reject_timeout+0x28>)
10009b94:	4798      	blx	r3
}
10009b96:	b003      	add	sp, #12
10009b98:	bd00      	pop	{pc}
10009b9a:	46c0      	nop			; (mov r8, r8)
10009b9c:	10013135 	.word	0x10013135
10009ba0:	10009631 	.word	0x10009631

10009ba4 <dmp_enable_gyro_cal>:
 *  subtracted from the gyro output.
 *  @param[in]  enable  1 to enable gyro calibration.
 *  @return     0 if successful.
 */
int dmp_enable_gyro_cal(unsigned char enable)
{
10009ba4:	b500      	push	{lr}
10009ba6:	b085      	sub	sp, #20
    if (enable) {
10009ba8:	2800      	cmp	r0, #0
10009baa:	d00c      	beq.n	10009bc6 <dmp_enable_gyro_cal+0x22>
        unsigned char regs[9] = {0xb8, 0xaa, 0xb3, 0x8d, 0xb4, 0x98, 0x0d, 0x35, 0x5d};
10009bac:	2209      	movs	r2, #9
10009bae:	490d      	ldr	r1, [pc, #52]	; (10009be4 <dmp_enable_gyro_cal+0x40>)
10009bb0:	311c      	adds	r1, #28
10009bb2:	a801      	add	r0, sp, #4
10009bb4:	4b0c      	ldr	r3, [pc, #48]	; (10009be8 <dmp_enable_gyro_cal+0x44>)
10009bb6:	4798      	blx	r3
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
10009bb8:	aa01      	add	r2, sp, #4
10009bba:	2109      	movs	r1, #9
10009bbc:	2097      	movs	r0, #151	; 0x97
10009bbe:	00c0      	lsls	r0, r0, #3
10009bc0:	4b0a      	ldr	r3, [pc, #40]	; (10009bec <dmp_enable_gyro_cal+0x48>)
10009bc2:	4798      	blx	r3
10009bc4:	e00b      	b.n	10009bde <dmp_enable_gyro_cal+0x3a>
    } else {
        unsigned char regs[9] = {0xb8, 0xaa, 0xaa, 0xaa, 0xb0, 0x88, 0xc3, 0xc5, 0xc7};
10009bc6:	2209      	movs	r2, #9
10009bc8:	4906      	ldr	r1, [pc, #24]	; (10009be4 <dmp_enable_gyro_cal+0x40>)
10009bca:	3128      	adds	r1, #40	; 0x28
10009bcc:	a801      	add	r0, sp, #4
10009bce:	4b06      	ldr	r3, [pc, #24]	; (10009be8 <dmp_enable_gyro_cal+0x44>)
10009bd0:	4798      	blx	r3
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
10009bd2:	aa01      	add	r2, sp, #4
10009bd4:	2109      	movs	r1, #9
10009bd6:	2097      	movs	r0, #151	; 0x97
10009bd8:	00c0      	lsls	r0, r0, #3
10009bda:	4b04      	ldr	r3, [pc, #16]	; (10009bec <dmp_enable_gyro_cal+0x48>)
10009bdc:	4798      	blx	r3
    }
}
10009bde:	b005      	add	sp, #20
10009be0:	bd00      	pop	{pc}
10009be2:	46c0      	nop			; (mov r8, r8)
10009be4:	100168ac 	.word	0x100168ac
10009be8:	10015227 	.word	0x10015227
10009bec:	10009631 	.word	0x10009631

10009bf0 <dmp_enable_lp_quat>:
 *  exclusive.
 *  @param[in]  enable  1 to enable 3-axis quaternion.
 *  @return     0 if successful.
 */
int dmp_enable_lp_quat(unsigned char enable)
{
10009bf0:	b500      	push	{lr}
10009bf2:	b083      	sub	sp, #12
    unsigned char regs[4];
    if (enable) {
10009bf4:	2800      	cmp	r0, #0
10009bf6:	d009      	beq.n	10009c0c <dmp_enable_lp_quat+0x1c>
        regs[0] = DINBC0;
10009bf8:	ab01      	add	r3, sp, #4
10009bfa:	22c0      	movs	r2, #192	; 0xc0
10009bfc:	701a      	strb	r2, [r3, #0]
        regs[1] = DINBC2;
10009bfe:	3202      	adds	r2, #2
10009c00:	705a      	strb	r2, [r3, #1]
        regs[2] = DINBC4;
10009c02:	3202      	adds	r2, #2
10009c04:	709a      	strb	r2, [r3, #2]
        regs[3] = DINBC6;
10009c06:	3202      	adds	r2, #2
10009c08:	70da      	strb	r2, [r3, #3]
10009c0a:	e001      	b.n	10009c10 <dmp_enable_lp_quat+0x20>
    }
    else
        memset(regs, 0x8B, 4);
10009c0c:	4b05      	ldr	r3, [pc, #20]	; (10009c24 <dmp_enable_lp_quat+0x34>)
10009c0e:	9301      	str	r3, [sp, #4]

    mpu_write_mem(CFG_LP_QUAT, 4, regs);
10009c10:	aa01      	add	r2, sp, #4
10009c12:	2104      	movs	r1, #4
10009c14:	4804      	ldr	r0, [pc, #16]	; (10009c28 <dmp_enable_lp_quat+0x38>)
10009c16:	4b05      	ldr	r3, [pc, #20]	; (10009c2c <dmp_enable_lp_quat+0x3c>)
10009c18:	4798      	blx	r3

    return mpu_reset_fifo();
10009c1a:	4b05      	ldr	r3, [pc, #20]	; (10009c30 <dmp_enable_lp_quat+0x40>)
10009c1c:	4798      	blx	r3
}
10009c1e:	b003      	add	sp, #12
10009c20:	bd00      	pop	{pc}
10009c22:	46c0      	nop			; (mov r8, r8)
10009c24:	8b8b8b8b 	.word	0x8b8b8b8b
10009c28:	00000a98 	.word	0x00000a98
10009c2c:	10009631 	.word	0x10009631
10009c30:	1000860d 	.word	0x1000860d

10009c34 <dmp_enable_6x_lp_quat>:
 *  exclusive.
 *  @param[in]   enable  1 to enable 6-axis quaternion.
 *  @return      0 if successful.
 */
int dmp_enable_6x_lp_quat(unsigned char enable)
{
10009c34:	b500      	push	{lr}
10009c36:	b083      	sub	sp, #12
    unsigned char regs[4];
    if (enable) {
10009c38:	2800      	cmp	r0, #0
10009c3a:	d009      	beq.n	10009c50 <dmp_enable_6x_lp_quat+0x1c>
        regs[0] = DINA20;
10009c3c:	ab01      	add	r3, sp, #4
10009c3e:	2220      	movs	r2, #32
10009c40:	701a      	strb	r2, [r3, #0]
        regs[1] = DINA28;
10009c42:	3208      	adds	r2, #8
10009c44:	705a      	strb	r2, [r3, #1]
        regs[2] = DINA30;
10009c46:	3208      	adds	r2, #8
10009c48:	709a      	strb	r2, [r3, #2]
        regs[3] = DINA38;
10009c4a:	3208      	adds	r2, #8
10009c4c:	70da      	strb	r2, [r3, #3]
10009c4e:	e001      	b.n	10009c54 <dmp_enable_6x_lp_quat+0x20>
    } else
        memset(regs, 0xA3, 4);
10009c50:	4b05      	ldr	r3, [pc, #20]	; (10009c68 <dmp_enable_6x_lp_quat+0x34>)
10009c52:	9301      	str	r3, [sp, #4]

    mpu_write_mem(CFG_8, 4, regs);
10009c54:	aa01      	add	r2, sp, #4
10009c56:	2104      	movs	r1, #4
10009c58:	4804      	ldr	r0, [pc, #16]	; (10009c6c <dmp_enable_6x_lp_quat+0x38>)
10009c5a:	4b05      	ldr	r3, [pc, #20]	; (10009c70 <dmp_enable_6x_lp_quat+0x3c>)
10009c5c:	4798      	blx	r3

    return mpu_reset_fifo();
10009c5e:	4b05      	ldr	r3, [pc, #20]	; (10009c74 <dmp_enable_6x_lp_quat+0x40>)
10009c60:	4798      	blx	r3
}
10009c62:	b003      	add	sp, #12
10009c64:	bd00      	pop	{pc}
10009c66:	46c0      	nop			; (mov r8, r8)
10009c68:	a3a3a3a3 	.word	0xa3a3a3a3
10009c6c:	00000a9e 	.word	0x00000a9e
10009c70:	10009631 	.word	0x10009631
10009c74:	1000860d 	.word	0x1000860d

10009c78 <dmp_enable_feature>:
 *  mutually exclusive.
 *  @param[in]  mask    Mask of features to enable.
 *  @return     0 if successful.
 */
int dmp_enable_feature(unsigned short mask)
{
10009c78:	b5f0      	push	{r4, r5, r6, r7, lr}
10009c7a:	b085      	sub	sp, #20
10009c7c:	0004      	movs	r4, r0

    /* TODO: All of these settings can probably be integrated into the default
     * DMP image.
     */
    /* Set integration scale factor. */
    tmp[0] = (unsigned char)((GYRO_SF >> 24) & 0xFF);
10009c7e:	ad01      	add	r5, sp, #4
10009c80:	2302      	movs	r3, #2
10009c82:	702b      	strb	r3, [r5, #0]
    tmp[1] = (unsigned char)((GYRO_SF >> 16) & 0xFF);
10009c84:	33c8      	adds	r3, #200	; 0xc8
10009c86:	706b      	strb	r3, [r5, #1]
    tmp[2] = (unsigned char)((GYRO_SF >> 8) & 0xFF);
10009c88:	3319      	adds	r3, #25
10009c8a:	70ab      	strb	r3, [r5, #2]
    tmp[3] = (unsigned char)(GYRO_SF & 0xFF);
10009c8c:	3bda      	subs	r3, #218	; 0xda
10009c8e:	70eb      	strb	r3, [r5, #3]
    mpu_write_mem(D_0_104, 4, tmp);
10009c90:	002a      	movs	r2, r5
10009c92:	2104      	movs	r1, #4
10009c94:	2068      	movs	r0, #104	; 0x68
10009c96:	4b6a      	ldr	r3, [pc, #424]	; (10009e40 <dmp_enable_feature+0x1c8>)
10009c98:	4798      	blx	r3

    /* Send sensor data to the FIFO. */
    tmp[0] = 0xA3;
10009c9a:	23a3      	movs	r3, #163	; 0xa3
10009c9c:	702b      	strb	r3, [r5, #0]
10009c9e:	2740      	movs	r7, #64	; 0x40
10009ca0:	4027      	ands	r7, r4
    if (mask & DMP_FEATURE_SEND_RAW_ACCEL) {
10009ca2:	d007      	beq.n	10009cb4 <dmp_enable_feature+0x3c>
        tmp[1] = 0xC0;
10009ca4:	ab01      	add	r3, sp, #4
10009ca6:	22c0      	movs	r2, #192	; 0xc0
10009ca8:	705a      	strb	r2, [r3, #1]
        tmp[2] = 0xC8;
10009caa:	3208      	adds	r2, #8
10009cac:	709a      	strb	r2, [r3, #2]
        tmp[3] = 0xC2;
10009cae:	3a06      	subs	r2, #6
10009cb0:	70da      	strb	r2, [r3, #3]
10009cb2:	e004      	b.n	10009cbe <dmp_enable_feature+0x46>
    } else {
        tmp[1] = 0xA3;
10009cb4:	ab01      	add	r3, sp, #4
10009cb6:	22a3      	movs	r2, #163	; 0xa3
10009cb8:	705a      	strb	r2, [r3, #1]
        tmp[2] = 0xA3;
10009cba:	709a      	strb	r2, [r3, #2]
        tmp[3] = 0xA3;
10009cbc:	70da      	strb	r2, [r3, #3]
10009cbe:	25c0      	movs	r5, #192	; 0xc0
10009cc0:	006d      	lsls	r5, r5, #1
10009cc2:	4025      	ands	r5, r4
    }
    if (mask & DMP_FEATURE_SEND_ANY_GYRO) {
10009cc4:	d007      	beq.n	10009cd6 <dmp_enable_feature+0x5e>
        tmp[4] = 0xC4;
10009cc6:	ab01      	add	r3, sp, #4
10009cc8:	22c4      	movs	r2, #196	; 0xc4
10009cca:	711a      	strb	r2, [r3, #4]
        tmp[5] = 0xCC;
10009ccc:	3208      	adds	r2, #8
10009cce:	715a      	strb	r2, [r3, #5]
        tmp[6] = 0xC6;
10009cd0:	3a06      	subs	r2, #6
10009cd2:	719a      	strb	r2, [r3, #6]
10009cd4:	e004      	b.n	10009ce0 <dmp_enable_feature+0x68>
    } else {
        tmp[4] = 0xA3;
10009cd6:	ab01      	add	r3, sp, #4
10009cd8:	22a3      	movs	r2, #163	; 0xa3
10009cda:	711a      	strb	r2, [r3, #4]
        tmp[5] = 0xA3;
10009cdc:	715a      	strb	r2, [r3, #5]
        tmp[6] = 0xA3;
10009cde:	719a      	strb	r2, [r3, #6]
    }
    tmp[7] = 0xA3;
10009ce0:	aa01      	add	r2, sp, #4
10009ce2:	23a3      	movs	r3, #163	; 0xa3
10009ce4:	71d3      	strb	r3, [r2, #7]
    tmp[8] = 0xA3;
10009ce6:	7213      	strb	r3, [r2, #8]
    tmp[9] = 0xA3;
10009ce8:	7253      	strb	r3, [r2, #9]
    mpu_write_mem(CFG_15,10,tmp);
10009cea:	210a      	movs	r1, #10
10009cec:	4855      	ldr	r0, [pc, #340]	; (10009e44 <dmp_enable_feature+0x1cc>)
10009cee:	4b54      	ldr	r3, [pc, #336]	; (10009e40 <dmp_enable_feature+0x1c8>)
10009cf0:	4798      	blx	r3
10009cf2:	2603      	movs	r6, #3
10009cf4:	4026      	ands	r6, r4

    /* Send gesture data to the FIFO. */
    if (mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
10009cf6:	d003      	beq.n	10009d00 <dmp_enable_feature+0x88>
        tmp[0] = DINA20;
10009cf8:	2220      	movs	r2, #32
10009cfa:	ab01      	add	r3, sp, #4
10009cfc:	701a      	strb	r2, [r3, #0]
10009cfe:	e002      	b.n	10009d06 <dmp_enable_feature+0x8e>
    else
        tmp[0] = 0xD8;
10009d00:	22d8      	movs	r2, #216	; 0xd8
10009d02:	ab01      	add	r3, sp, #4
10009d04:	701a      	strb	r2, [r3, #0]
    mpu_write_mem(CFG_27,1,tmp);
10009d06:	aa01      	add	r2, sp, #4
10009d08:	2101      	movs	r1, #1
10009d0a:	484f      	ldr	r0, [pc, #316]	; (10009e48 <dmp_enable_feature+0x1d0>)
10009d0c:	4b4c      	ldr	r3, [pc, #304]	; (10009e40 <dmp_enable_feature+0x1c8>)
10009d0e:	4798      	blx	r3

    if (mask & DMP_FEATURE_GYRO_CAL)
10009d10:	06a3      	lsls	r3, r4, #26
10009d12:	d503      	bpl.n	10009d1c <dmp_enable_feature+0xa4>
        dmp_enable_gyro_cal(1);
10009d14:	2001      	movs	r0, #1
10009d16:	4b4d      	ldr	r3, [pc, #308]	; (10009e4c <dmp_enable_feature+0x1d4>)
10009d18:	4798      	blx	r3
10009d1a:	e002      	b.n	10009d22 <dmp_enable_feature+0xaa>
    else
        dmp_enable_gyro_cal(0);
10009d1c:	2000      	movs	r0, #0
10009d1e:	4b4b      	ldr	r3, [pc, #300]	; (10009e4c <dmp_enable_feature+0x1d4>)
10009d20:	4798      	blx	r3

    if (mask & DMP_FEATURE_SEND_ANY_GYRO) {
10009d22:	2d00      	cmp	r5, #0
10009d24:	d019      	beq.n	10009d5a <dmp_enable_feature+0xe2>
        if (mask & DMP_FEATURE_SEND_CAL_GYRO) {
10009d26:	05e3      	lsls	r3, r4, #23
10009d28:	d509      	bpl.n	10009d3e <dmp_enable_feature+0xc6>
            tmp[0] = 0xB2;
10009d2a:	ab01      	add	r3, sp, #4
10009d2c:	22b2      	movs	r2, #178	; 0xb2
10009d2e:	701a      	strb	r2, [r3, #0]
            tmp[1] = 0x8B;
10009d30:	3a27      	subs	r2, #39	; 0x27
10009d32:	705a      	strb	r2, [r3, #1]
            tmp[2] = 0xB6;
10009d34:	322b      	adds	r2, #43	; 0x2b
10009d36:	709a      	strb	r2, [r3, #2]
            tmp[3] = 0x9B;
10009d38:	3a1b      	subs	r2, #27
10009d3a:	70da      	strb	r2, [r3, #3]
10009d3c:	e008      	b.n	10009d50 <dmp_enable_feature+0xd8>
        } else {
            tmp[0] = DINAC0;
10009d3e:	ab01      	add	r3, sp, #4
10009d40:	22b0      	movs	r2, #176	; 0xb0
10009d42:	701a      	strb	r2, [r3, #0]
            tmp[1] = DINA80;
10009d44:	3a30      	subs	r2, #48	; 0x30
10009d46:	705a      	strb	r2, [r3, #1]
            tmp[2] = DINAC2;
10009d48:	3234      	adds	r2, #52	; 0x34
10009d4a:	709a      	strb	r2, [r3, #2]
            tmp[3] = DINA90;
10009d4c:	3a24      	subs	r2, #36	; 0x24
10009d4e:	70da      	strb	r2, [r3, #3]
        }
        mpu_write_mem(CFG_GYRO_RAW_DATA, 4, tmp);
10009d50:	aa01      	add	r2, sp, #4
10009d52:	2104      	movs	r1, #4
10009d54:	483e      	ldr	r0, [pc, #248]	; (10009e50 <dmp_enable_feature+0x1d8>)
10009d56:	4b3a      	ldr	r3, [pc, #232]	; (10009e40 <dmp_enable_feature+0x1c8>)
10009d58:	4798      	blx	r3
    }

    if (mask & DMP_FEATURE_TAP) {
10009d5a:	07e3      	lsls	r3, r4, #31
10009d5c:	d523      	bpl.n	10009da6 <dmp_enable_feature+0x12e>
        /* Enable tap. */
        tmp[0] = 0xF8;
10009d5e:	aa01      	add	r2, sp, #4
10009d60:	23f8      	movs	r3, #248	; 0xf8
10009d62:	7013      	strb	r3, [r2, #0]
        mpu_write_mem(CFG_20, 1, tmp);
10009d64:	2101      	movs	r1, #1
10009d66:	208b      	movs	r0, #139	; 0x8b
10009d68:	0100      	lsls	r0, r0, #4
10009d6a:	4b35      	ldr	r3, [pc, #212]	; (10009e40 <dmp_enable_feature+0x1c8>)
10009d6c:	4798      	blx	r3
        dmp_set_tap_thresh(TAP_XYZ, 250);
10009d6e:	21fa      	movs	r1, #250	; 0xfa
10009d70:	2007      	movs	r0, #7
10009d72:	4b38      	ldr	r3, [pc, #224]	; (10009e54 <dmp_enable_feature+0x1dc>)
10009d74:	4798      	blx	r3
        dmp_set_tap_axes(TAP_XYZ);
10009d76:	2007      	movs	r0, #7
10009d78:	4b37      	ldr	r3, [pc, #220]	; (10009e58 <dmp_enable_feature+0x1e0>)
10009d7a:	4798      	blx	r3
        dmp_set_tap_count(1);
10009d7c:	2001      	movs	r0, #1
10009d7e:	4b37      	ldr	r3, [pc, #220]	; (10009e5c <dmp_enable_feature+0x1e4>)
10009d80:	4798      	blx	r3
        dmp_set_tap_time(100);
10009d82:	2064      	movs	r0, #100	; 0x64
10009d84:	4b36      	ldr	r3, [pc, #216]	; (10009e60 <dmp_enable_feature+0x1e8>)
10009d86:	4798      	blx	r3
        dmp_set_tap_time_multi(500);
10009d88:	20fa      	movs	r0, #250	; 0xfa
10009d8a:	0040      	lsls	r0, r0, #1
10009d8c:	4b35      	ldr	r3, [pc, #212]	; (10009e64 <dmp_enable_feature+0x1ec>)
10009d8e:	4798      	blx	r3

        dmp_set_shake_reject_thresh(GYRO_SF, 200);
10009d90:	21c8      	movs	r1, #200	; 0xc8
10009d92:	4835      	ldr	r0, [pc, #212]	; (10009e68 <dmp_enable_feature+0x1f0>)
10009d94:	4b35      	ldr	r3, [pc, #212]	; (10009e6c <dmp_enable_feature+0x1f4>)
10009d96:	4798      	blx	r3
        dmp_set_shake_reject_time(40);
10009d98:	2028      	movs	r0, #40	; 0x28
10009d9a:	4b35      	ldr	r3, [pc, #212]	; (10009e70 <dmp_enable_feature+0x1f8>)
10009d9c:	4798      	blx	r3
        dmp_set_shake_reject_timeout(10);
10009d9e:	200a      	movs	r0, #10
10009da0:	4b34      	ldr	r3, [pc, #208]	; (10009e74 <dmp_enable_feature+0x1fc>)
10009da2:	4798      	blx	r3
10009da4:	e007      	b.n	10009db6 <dmp_enable_feature+0x13e>
    } else {
        tmp[0] = 0xD8;
10009da6:	aa01      	add	r2, sp, #4
10009da8:	23d8      	movs	r3, #216	; 0xd8
10009daa:	7013      	strb	r3, [r2, #0]
        mpu_write_mem(CFG_20, 1, tmp);
10009dac:	2101      	movs	r1, #1
10009dae:	208b      	movs	r0, #139	; 0x8b
10009db0:	0100      	lsls	r0, r0, #4
10009db2:	4b23      	ldr	r3, [pc, #140]	; (10009e40 <dmp_enable_feature+0x1c8>)
10009db4:	4798      	blx	r3
    }

    if (mask & DMP_FEATURE_ANDROID_ORIENT) {
10009db6:	07a3      	lsls	r3, r4, #30
10009db8:	d503      	bpl.n	10009dc2 <dmp_enable_feature+0x14a>
        tmp[0] = 0xD9;
10009dba:	22d9      	movs	r2, #217	; 0xd9
10009dbc:	ab01      	add	r3, sp, #4
10009dbe:	701a      	strb	r2, [r3, #0]
10009dc0:	e002      	b.n	10009dc8 <dmp_enable_feature+0x150>
    } else
        tmp[0] = 0xD8;
10009dc2:	22d8      	movs	r2, #216	; 0xd8
10009dc4:	ab01      	add	r3, sp, #4
10009dc6:	701a      	strb	r2, [r3, #0]
    mpu_write_mem(CFG_ANDROID_ORIENT_INT, 1, tmp);
10009dc8:	aa01      	add	r2, sp, #4
10009dca:	2101      	movs	r1, #1
10009dcc:	482a      	ldr	r0, [pc, #168]	; (10009e78 <dmp_enable_feature+0x200>)
10009dce:	4b1c      	ldr	r3, [pc, #112]	; (10009e40 <dmp_enable_feature+0x1c8>)
10009dd0:	4798      	blx	r3

    if (mask & DMP_FEATURE_LP_QUAT)
10009dd2:	0763      	lsls	r3, r4, #29
10009dd4:	d503      	bpl.n	10009dde <dmp_enable_feature+0x166>
        dmp_enable_lp_quat(1);
10009dd6:	2001      	movs	r0, #1
10009dd8:	4b28      	ldr	r3, [pc, #160]	; (10009e7c <dmp_enable_feature+0x204>)
10009dda:	4798      	blx	r3
10009ddc:	e002      	b.n	10009de4 <dmp_enable_feature+0x16c>
    else
        dmp_enable_lp_quat(0);
10009dde:	2000      	movs	r0, #0
10009de0:	4b26      	ldr	r3, [pc, #152]	; (10009e7c <dmp_enable_feature+0x204>)
10009de2:	4798      	blx	r3

    if (mask & DMP_FEATURE_6X_LP_QUAT)
10009de4:	06e3      	lsls	r3, r4, #27
10009de6:	d503      	bpl.n	10009df0 <dmp_enable_feature+0x178>
        dmp_enable_6x_lp_quat(1);
10009de8:	2001      	movs	r0, #1
10009dea:	4b25      	ldr	r3, [pc, #148]	; (10009e80 <dmp_enable_feature+0x208>)
10009dec:	4798      	blx	r3
10009dee:	e002      	b.n	10009df6 <dmp_enable_feature+0x17e>
    else
        dmp_enable_6x_lp_quat(0);
10009df0:	2000      	movs	r0, #0
10009df2:	4b23      	ldr	r3, [pc, #140]	; (10009e80 <dmp_enable_feature+0x208>)
10009df4:	4798      	blx	r3

    /* Pedometer is always enabled. */
    dmp.feature_mask = mask | DMP_FEATURE_PEDOMETER;
10009df6:	2308      	movs	r3, #8
10009df8:	4323      	orrs	r3, r4
10009dfa:	4a22      	ldr	r2, [pc, #136]	; (10009e84 <dmp_enable_feature+0x20c>)
10009dfc:	8153      	strh	r3, [r2, #10]
    mpu_reset_fifo();
10009dfe:	4b22      	ldr	r3, [pc, #136]	; (10009e88 <dmp_enable_feature+0x210>)
10009e00:	4798      	blx	r3

    dmp.packet_length = 0;
    if (mask & DMP_FEATURE_SEND_RAW_ACCEL)
10009e02:	2f00      	cmp	r7, #0
10009e04:	d103      	bne.n	10009e0e <dmp_enable_feature+0x196>

    /* Pedometer is always enabled. */
    dmp.feature_mask = mask | DMP_FEATURE_PEDOMETER;
    mpu_reset_fifo();

    dmp.packet_length = 0;
10009e06:	2200      	movs	r2, #0
10009e08:	4b1e      	ldr	r3, [pc, #120]	; (10009e84 <dmp_enable_feature+0x20c>)
10009e0a:	739a      	strb	r2, [r3, #14]
10009e0c:	e002      	b.n	10009e14 <dmp_enable_feature+0x19c>
    if (mask & DMP_FEATURE_SEND_RAW_ACCEL)
        dmp.packet_length += 6;
10009e0e:	2206      	movs	r2, #6
10009e10:	4b1c      	ldr	r3, [pc, #112]	; (10009e84 <dmp_enable_feature+0x20c>)
10009e12:	739a      	strb	r2, [r3, #14]
    if (mask & DMP_FEATURE_SEND_ANY_GYRO)
10009e14:	2d00      	cmp	r5, #0
10009e16:	d003      	beq.n	10009e20 <dmp_enable_feature+0x1a8>
        dmp.packet_length += 6;
10009e18:	4a1a      	ldr	r2, [pc, #104]	; (10009e84 <dmp_enable_feature+0x20c>)
10009e1a:	7b93      	ldrb	r3, [r2, #14]
10009e1c:	3306      	adds	r3, #6
10009e1e:	7393      	strb	r3, [r2, #14]
    if (mask & (DMP_FEATURE_LP_QUAT | DMP_FEATURE_6X_LP_QUAT))
10009e20:	2314      	movs	r3, #20
10009e22:	4223      	tst	r3, r4
10009e24:	d003      	beq.n	10009e2e <dmp_enable_feature+0x1b6>
        dmp.packet_length += 16;
10009e26:	4a17      	ldr	r2, [pc, #92]	; (10009e84 <dmp_enable_feature+0x20c>)
10009e28:	7b93      	ldrb	r3, [r2, #14]
10009e2a:	3310      	adds	r3, #16
10009e2c:	7393      	strb	r3, [r2, #14]
    if (mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
10009e2e:	2e00      	cmp	r6, #0
10009e30:	d003      	beq.n	10009e3a <dmp_enable_feature+0x1c2>
        dmp.packet_length += 4;
10009e32:	4a14      	ldr	r2, [pc, #80]	; (10009e84 <dmp_enable_feature+0x20c>)
10009e34:	7b93      	ldrb	r3, [r2, #14]
10009e36:	3304      	adds	r3, #4
10009e38:	7393      	strb	r3, [r2, #14]

    return 0;
}
10009e3a:	2000      	movs	r0, #0
10009e3c:	b005      	add	sp, #20
10009e3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10009e40:	10009631 	.word	0x10009631
10009e44:	00000aa7 	.word	0x00000aa7
10009e48:	00000ab6 	.word	0x00000ab6
10009e4c:	10009ba5 	.word	0x10009ba5
10009e50:	00000aa2 	.word	0x00000aa2
10009e54:	10009895 	.word	0x10009895
10009e58:	10009a41 	.word	0x10009a41
10009e5c:	10009a8d 	.word	0x10009a8d
10009e60:	10009abd 	.word	0x10009abd
10009e64:	10009ae9 	.word	0x10009ae9
10009e68:	02cae309 	.word	0x02cae309
10009e6c:	10009b15 	.word	0x10009b15
10009e70:	10009b4d 	.word	0x10009b4d
10009e74:	10009b79 	.word	0x10009b79
10009e78:	0000073d 	.word	0x0000073d
10009e7c:	10009bf1 	.word	0x10009bf1
10009e80:	10009c35 	.word	0x10009c35
10009e84:	100186cc 	.word	0x100186cc
10009e88:	1000860d 	.word	0x1000860d

10009e8c <sms_ble_pair_request_fn>:
    return AT_BLE_SUCCESS;
}

/* AT_BLE_PAIR_REQUEST (#10) */
at_ble_status_t sms_ble_pair_request_fn(void *params)
{
10009e8c:	b510      	push	{r4, lr}
10009e8e:	b082      	sub	sp, #8
    at_ble_pair_request_t *request = (at_ble_pair_request_t *)params;
    DBG_LOG_DEV("[sms_ble_pair_request_fn]\tPairing request... Bnew %d, BLE 0x%02x, T1 %d, T2 %d", button_instance.current_state, ble_current_state, timer1_current_mode, timer2_current_mode);
10009e90:	4809      	ldr	r0, [pc, #36]	; (10009eb8 <sms_ble_pair_request_fn+0x2c>)
10009e92:	4b0a      	ldr	r3, [pc, #40]	; (10009ebc <sms_ble_pair_request_fn+0x30>)
10009e94:	4798      	blx	r3
10009e96:	4b0a      	ldr	r3, [pc, #40]	; (10009ec0 <sms_ble_pair_request_fn+0x34>)
10009e98:	781a      	ldrb	r2, [r3, #0]
10009e9a:	b2d2      	uxtb	r2, r2
10009e9c:	4b09      	ldr	r3, [pc, #36]	; (10009ec4 <sms_ble_pair_request_fn+0x38>)
10009e9e:	781b      	ldrb	r3, [r3, #0]
10009ea0:	b2db      	uxtb	r3, r3
10009ea2:	4909      	ldr	r1, [pc, #36]	; (10009ec8 <sms_ble_pair_request_fn+0x3c>)
10009ea4:	7808      	ldrb	r0, [r1, #0]
10009ea6:	4909      	ldr	r1, [pc, #36]	; (10009ecc <sms_ble_pair_request_fn+0x40>)
10009ea8:	7849      	ldrb	r1, [r1, #1]
10009eaa:	9000      	str	r0, [sp, #0]
10009eac:	4808      	ldr	r0, [pc, #32]	; (10009ed0 <sms_ble_pair_request_fn+0x44>)
10009eae:	4c09      	ldr	r4, [pc, #36]	; (10009ed4 <sms_ble_pair_request_fn+0x48>)
10009eb0:	47a0      	blx	r4
    //DBG_LOG_DEV("- conn handle: 0x%04x\r\n- peer features: 0x%02x", request->handle, request->peer_features);
    return AT_BLE_SUCCESS;
}
10009eb2:	2000      	movs	r0, #0
10009eb4:	b002      	add	sp, #8
10009eb6:	bd10      	pop	{r4, pc}
10009eb8:	10016660 	.word	0x10016660
10009ebc:	100154a1 	.word	0x100154a1
10009ec0:	1001a330 	.word	0x1001a330
10009ec4:	1001a184 	.word	0x1001a184
10009ec8:	1001a331 	.word	0x1001a331
10009ecc:	1001a220 	.word	0x1001a220
10009ed0:	100168f8 	.word	0x100168f8
10009ed4:	10015381 	.word	0x10015381

10009ed8 <sms_ble_notification_confirmed_fn>:

/* AT_BLE_NOTIFICATION_CONFIRMED (#29) */
at_ble_status_t sms_ble_notification_confirmed_fn(void *params)
{
10009ed8:	b510      	push	{r4, lr}
    
    at_ble_cmd_complete_event_t *notification_status = (at_ble_cmd_complete_event_t *)params;
    //button_instance.current_state = sms_button_get_state();
    //DBG_LOG_DEV("[sms_ble_notification_confirmed_fn]\tNotification sent... Bnew %d, BLE 0x%02x, T1 %d, T2 %d", button_instance.current_state, ble_current_state, timer1_current_mode, timer2_current_mode);
    //DBG_LOG_DEV("- conn handle: 0x%04x\r\n- operation: 0x%02x\r\n- status: 0x%02x", notification_status->conn_handle, notification_status->operation, notification_status->status);
    sms_dualtimer_stop(DUALTIMER_TIMER2);
10009eda:	2001      	movs	r0, #1
10009edc:	4b08      	ldr	r3, [pc, #32]	; (10009f00 <sms_ble_notification_confirmed_fn+0x28>)
10009ede:	4798      	blx	r3
    timer2_current_mode = TIMER2_MODE_NONE;
10009ee0:	2200      	movs	r2, #0
10009ee2:	4b08      	ldr	r3, [pc, #32]	; (10009f04 <sms_ble_notification_confirmed_fn+0x2c>)
10009ee4:	701a      	strb	r2, [r3, #0]
    ble_current_state = BLE_STATE_PAIRED;
10009ee6:	3222      	adds	r2, #34	; 0x22
10009ee8:	4b07      	ldr	r3, [pc, #28]	; (10009f08 <sms_ble_notification_confirmed_fn+0x30>)
10009eea:	701a      	strb	r2, [r3, #0]
    //DBG_LOG_CONT_DEV(" done!");

    //gpio_pin_set_output_level(dbg_pin, DBG_PIN_LOW);
    
    //DBG_LOG_DEV("Timer1 current mode: %d", timer1_current_mode);
    if(timer1_current_mode == TIMER1_MODE_NONE) {
10009eec:	4b07      	ldr	r3, [pc, #28]	; (10009f0c <sms_ble_notification_confirmed_fn+0x34>)
10009eee:	781b      	ldrb	r3, [r3, #0]
10009ef0:	2b00      	cmp	r3, #0
10009ef2:	d102      	bne.n	10009efa <sms_ble_notification_confirmed_fn+0x22>
        ulp_ready = true;
10009ef4:	3a21      	subs	r2, #33	; 0x21
10009ef6:	4b06      	ldr	r3, [pc, #24]	; (10009f10 <sms_ble_notification_confirmed_fn+0x38>)
10009ef8:	701a      	strb	r2, [r3, #0]
    }
    return AT_BLE_SUCCESS;
}
10009efa:	2000      	movs	r0, #0
10009efc:	bd10      	pop	{r4, pc}
10009efe:	46c0      	nop			; (mov r8, r8)
10009f00:	1000b719 	.word	0x1000b719
10009f04:	1001a331 	.word	0x1001a331
10009f08:	1001a330 	.word	0x1001a330
10009f0c:	1001a184 	.word	0x1001a184
10009f10:	1001a219 	.word	0x1001a219

10009f14 <sms_ble_indication_confirmed_fn>:

/* AT_BLE_INDICATION_CONFIRMED (#30) */
at_ble_status_t sms_ble_indication_confirmed_fn(void *params)
{
10009f14:	b510      	push	{r4, lr}
    
    at_ble_indication_confirmed_t *indication_status = (at_ble_indication_confirmed_t *)params;
    //button_instance.current_state = sms_button_get_state();
    //DBG_LOG_DEV("[sms_ble_indication_confirmed]\tIndication confirmed... Bnew %d, BLE 0x%02x, T1 %d, T2 %d", button_instance.current_state, ble_current_state, timer1_current_mode, timer2_current_mode);
    //DBG_LOG_DEV("- conn handle: 0x%04x\r\n- char handle: 0x%04x\r\n- status: 0x%02x", indication_status->conn_handle, indication_status->char_handle, indication_status->status);
    sms_dualtimer_stop(DUALTIMER_TIMER2);
10009f16:	2001      	movs	r0, #1
10009f18:	4b08      	ldr	r3, [pc, #32]	; (10009f3c <sms_ble_indication_confirmed_fn+0x28>)
10009f1a:	4798      	blx	r3
    timer2_current_mode = TIMER2_MODE_NONE;
10009f1c:	2200      	movs	r2, #0
10009f1e:	4b08      	ldr	r3, [pc, #32]	; (10009f40 <sms_ble_indication_confirmed_fn+0x2c>)
10009f20:	701a      	strb	r2, [r3, #0]
    ble_current_state = BLE_STATE_PAIRED;
10009f22:	3222      	adds	r2, #34	; 0x22
10009f24:	4b07      	ldr	r3, [pc, #28]	; (10009f44 <sms_ble_indication_confirmed_fn+0x30>)
10009f26:	701a      	strb	r2, [r3, #0]
    //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
    //sms_sensors_toggle_interrupt(SMS_EXTINT_ENABLE);
    
    //gpio_pin_set_output_level(dbg_pin, DBG_PIN_LOW);
    
    if(timer1_current_mode == TIMER1_MODE_NONE) {
10009f28:	4b07      	ldr	r3, [pc, #28]	; (10009f48 <sms_ble_indication_confirmed_fn+0x34>)
10009f2a:	781b      	ldrb	r3, [r3, #0]
10009f2c:	2b00      	cmp	r3, #0
10009f2e:	d102      	bne.n	10009f36 <sms_ble_indication_confirmed_fn+0x22>
        ulp_ready = true;
10009f30:	3a21      	subs	r2, #33	; 0x21
10009f32:	4b06      	ldr	r3, [pc, #24]	; (10009f4c <sms_ble_indication_confirmed_fn+0x38>)
10009f34:	701a      	strb	r2, [r3, #0]
    }        
    return AT_BLE_SUCCESS;
}
10009f36:	2000      	movs	r0, #0
10009f38:	bd10      	pop	{r4, pc}
10009f3a:	46c0      	nop			; (mov r8, r8)
10009f3c:	1000b719 	.word	0x1000b719
10009f40:	1001a331 	.word	0x1001a331
10009f44:	1001a330 	.word	0x1001a330
10009f48:	1001a184 	.word	0x1001a184
10009f4c:	1001a219 	.word	0x1001a219

10009f50 <sms_ble_startup>:
#include <stdio.h>
//#include <stdlib.h>
#include "sms_peripheral1.h"

void sms_ble_startup(void)
{
10009f50:	b510      	push	{r4, lr}
    //sms_button_toggle_interrupt(SMS_BTN_INT_DISABLE, SMS_BTN_INT_DISABLE);
    timer2_current_mode = TIMER2_MODE_LED_STARTUP;
10009f52:	2202      	movs	r2, #2
10009f54:	4b02      	ldr	r3, [pc, #8]	; (10009f60 <sms_ble_startup+0x10>)
10009f56:	701a      	strb	r2, [r3, #0]
    sms_led_blink_start(SMS_LED_0_PIN);
10009f58:	2016      	movs	r0, #22
10009f5a:	4b02      	ldr	r3, [pc, #8]	; (10009f64 <sms_ble_startup+0x14>)
10009f5c:	4798      	blx	r3
}
10009f5e:	bd10      	pop	{r4, pc}
10009f60:	1001a331 	.word	0x1001a331
10009f64:	1000af71 	.word	0x1000af71

10009f68 <sms_ble_power_down>:

void sms_ble_power_down(void)
{
10009f68:	b510      	push	{r4, lr}
    sms_monitor_get_states("[sms_ble_power_down]");
10009f6a:	482c      	ldr	r0, [pc, #176]	; (1000a01c <sms_ble_power_down+0xb4>)
10009f6c:	4b2c      	ldr	r3, [pc, #176]	; (1000a020 <sms_ble_power_down+0xb8>)
10009f6e:	4798      	blx	r3
    if(ble_current_state == BLE_STATE_POWEROFF) {
10009f70:	4b2c      	ldr	r3, [pc, #176]	; (1000a024 <sms_ble_power_down+0xbc>)
10009f72:	781b      	ldrb	r3, [r3, #0]
10009f74:	2b00      	cmp	r3, #0
10009f76:	d105      	bne.n	10009f84 <sms_ble_power_down+0x1c>
        /* If already power off state, then go back sleeping */
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        ulp_ready = true;
10009f78:	2201      	movs	r2, #1
10009f7a:	4b2b      	ldr	r3, [pc, #172]	; (1000a028 <sms_ble_power_down+0xc0>)
10009f7c:	701a      	strb	r2, [r3, #0]
        release_sleep_lock();
10009f7e:	4b2b      	ldr	r3, [pc, #172]	; (1000a02c <sms_ble_power_down+0xc4>)
10009f80:	4798      	blx	r3
10009f82:	e049      	b.n	1000a018 <sms_ble_power_down+0xb0>
    }
    else {
        /* Disable button interrupts */
        //sms_button_toggle_interrupt(SMS_BTN_INT_DISABLE, SMS_BTN_INT_DISABLE);        
        /* Disconnect if necessary from BLE network */
        switch(ble_current_state) {
10009f84:	4b27      	ldr	r3, [pc, #156]	; (1000a024 <sms_ble_power_down+0xbc>)
10009f86:	781b      	ldrb	r3, [r3, #0]
10009f88:	b2db      	uxtb	r3, r3
10009f8a:	2b21      	cmp	r3, #33	; 0x21
10009f8c:	d030      	beq.n	10009ff0 <sms_ble_power_down+0x88>
10009f8e:	d802      	bhi.n	10009f96 <sms_ble_power_down+0x2e>
10009f90:	2b20      	cmp	r3, #32
10009f92:	d005      	beq.n	10009fa0 <sms_ble_power_down+0x38>
10009f94:	e037      	b.n	1000a006 <sms_ble_power_down+0x9e>
10009f96:	2b22      	cmp	r3, #34	; 0x22
10009f98:	d017      	beq.n	10009fca <sms_ble_power_down+0x62>
10009f9a:	2b23      	cmp	r3, #35	; 0x23
10009f9c:	d01b      	beq.n	10009fd6 <sms_ble_power_down+0x6e>
10009f9e:	e032      	b.n	1000a006 <sms_ble_power_down+0x9e>
            case BLE_STATE_ADVERTISING:
            DBG_LOG_DEV("[sms_ble_power_down]\tStopping command received during advertisement. Stopping... ");
10009fa0:	4823      	ldr	r0, [pc, #140]	; (1000a030 <sms_ble_power_down+0xc8>)
10009fa2:	4b24      	ldr	r3, [pc, #144]	; (1000a034 <sms_ble_power_down+0xcc>)
10009fa4:	4798      	blx	r3
10009fa6:	4824      	ldr	r0, [pc, #144]	; (1000a038 <sms_ble_power_down+0xd0>)
10009fa8:	4b24      	ldr	r3, [pc, #144]	; (1000a03c <sms_ble_power_down+0xd4>)
10009faa:	4798      	blx	r3
            if(at_ble_adv_stop() != AT_BLE_SUCCESS) {
10009fac:	4b24      	ldr	r3, [pc, #144]	; (1000a040 <sms_ble_power_down+0xd8>)
10009fae:	4798      	blx	r3
10009fb0:	2800      	cmp	r0, #0
10009fb2:	d003      	beq.n	10009fbc <sms_ble_power_down+0x54>
                DBG_LOG_CONT_DEV("failed!!!");
10009fb4:	4823      	ldr	r0, [pc, #140]	; (1000a044 <sms_ble_power_down+0xdc>)
10009fb6:	4b21      	ldr	r3, [pc, #132]	; (1000a03c <sms_ble_power_down+0xd4>)
10009fb8:	4798      	blx	r3
10009fba:	e024      	b.n	1000a006 <sms_ble_power_down+0x9e>
                //#pragma TBD: manage adv_stop failure
            }
            else {
                DBG_LOG_CONT_DEV("done!");
10009fbc:	4822      	ldr	r0, [pc, #136]	; (1000a048 <sms_ble_power_down+0xe0>)
10009fbe:	4b1f      	ldr	r3, [pc, #124]	; (1000a03c <sms_ble_power_down+0xd4>)
10009fc0:	4798      	blx	r3
                ble_current_state = BLE_STATE_DISCONNECTED;
10009fc2:	2211      	movs	r2, #17
10009fc4:	4b17      	ldr	r3, [pc, #92]	; (1000a024 <sms_ble_power_down+0xbc>)
10009fc6:	701a      	strb	r2, [r3, #0]
10009fc8:	e01d      	b.n	1000a006 <sms_ble_power_down+0x9e>
            }
            break;
            
            case BLE_STATE_PAIRED:
            DBG_LOG_DEV("[sms_ble_power_down]\t\tDevice paired... disabling interrupts & switching down sensors");
10009fca:	4819      	ldr	r0, [pc, #100]	; (1000a030 <sms_ble_power_down+0xc8>)
10009fcc:	4b19      	ldr	r3, [pc, #100]	; (1000a034 <sms_ble_power_down+0xcc>)
10009fce:	4798      	blx	r3
10009fd0:	481e      	ldr	r0, [pc, #120]	; (1000a04c <sms_ble_power_down+0xe4>)
10009fd2:	4b1a      	ldr	r3, [pc, #104]	; (1000a03c <sms_ble_power_down+0xd4>)
10009fd4:	4798      	blx	r3
            
            case BLE_STATE_INDICATING:
            DBG_LOG_DEV("[sms_ble_power_down]\t\tCurrently indicating");
10009fd6:	4816      	ldr	r0, [pc, #88]	; (1000a030 <sms_ble_power_down+0xc8>)
10009fd8:	4b16      	ldr	r3, [pc, #88]	; (1000a034 <sms_ble_power_down+0xcc>)
10009fda:	4798      	blx	r3
10009fdc:	481c      	ldr	r0, [pc, #112]	; (1000a050 <sms_ble_power_down+0xe8>)
10009fde:	4b17      	ldr	r3, [pc, #92]	; (1000a03c <sms_ble_power_down+0xd4>)
10009fe0:	4798      	blx	r3
            pressure_device.state = PRESSURE_STATE_OFF;
10009fe2:	2100      	movs	r1, #0
10009fe4:	2328      	movs	r3, #40	; 0x28
10009fe6:	4a1b      	ldr	r2, [pc, #108]	; (1000a054 <sms_ble_power_down+0xec>)
10009fe8:	54d1      	strb	r1, [r2, r3]
            sms_sensors_interrupt_toggle(false, false);
10009fea:	2000      	movs	r0, #0
10009fec:	4b1a      	ldr	r3, [pc, #104]	; (1000a058 <sms_ble_power_down+0xf0>)
10009fee:	4798      	blx	r3
            //#pragma TBD: switch-off sensors to save current
            //sms_sensors_switch(false);
            
            case BLE_STATE_CONNECTED:
            DBG_LOG_DEV("[sms_ble_power_down]\t\tDevice connected... disconnecting");
10009ff0:	480f      	ldr	r0, [pc, #60]	; (1000a030 <sms_ble_power_down+0xc8>)
10009ff2:	4b10      	ldr	r3, [pc, #64]	; (1000a034 <sms_ble_power_down+0xcc>)
10009ff4:	4798      	blx	r3
10009ff6:	4819      	ldr	r0, [pc, #100]	; (1000a05c <sms_ble_power_down+0xf4>)
10009ff8:	4b10      	ldr	r3, [pc, #64]	; (1000a03c <sms_ble_power_down+0xd4>)
10009ffa:	4798      	blx	r3
            at_ble_disconnect(sms_connection_handle, AT_BLE_TERMINATED_BY_USER);
10009ffc:	4b18      	ldr	r3, [pc, #96]	; (1000a060 <sms_ble_power_down+0xf8>)
10009ffe:	8818      	ldrh	r0, [r3, #0]
1000a000:	2113      	movs	r1, #19
1000a002:	4b18      	ldr	r3, [pc, #96]	; (1000a064 <sms_ble_power_down+0xfc>)
1000a004:	4798      	blx	r3
            
            default:
            break;
        }
        
        ble_current_state = BLE_STATE_DISCONNECTED;
1000a006:	2211      	movs	r2, #17
1000a008:	4b06      	ldr	r3, [pc, #24]	; (1000a024 <sms_ble_power_down+0xbc>)
1000a00a:	701a      	strb	r2, [r3, #0]
        timer2_current_mode = TIMER2_MODE_LED_SHUTDOWN;
1000a00c:	3a0e      	subs	r2, #14
1000a00e:	4b16      	ldr	r3, [pc, #88]	; (1000a068 <sms_ble_power_down+0x100>)
1000a010:	701a      	strb	r2, [r3, #0]
        sms_led_blink_start(SMS_LED_0_PIN);
1000a012:	2016      	movs	r0, #22
1000a014:	4b15      	ldr	r3, [pc, #84]	; (1000a06c <sms_ble_power_down+0x104>)
1000a016:	4798      	blx	r3
    }
}
1000a018:	bd10      	pop	{r4, pc}
1000a01a:	46c0      	nop			; (mov r8, r8)
1000a01c:	10016948 	.word	0x10016948
1000a020:	1000a9e9 	.word	0x1000a9e9
1000a024:	1001a330 	.word	0x1001a330
1000a028:	1001a219 	.word	0x1001a219
1000a02c:	1000f701 	.word	0x1000f701
1000a030:	10016660 	.word	0x10016660
1000a034:	100154a1 	.word	0x100154a1
1000a038:	10016960 	.word	0x10016960
1000a03c:	10015381 	.word	0x10015381
1000a040:	10010a3d 	.word	0x10010a3d
1000a044:	100169b4 	.word	0x100169b4
1000a048:	100169c0 	.word	0x100169c0
1000a04c:	100169c8 	.word	0x100169c8
1000a050:	10016a20 	.word	0x10016a20
1000a054:	1001a294 	.word	0x1001a294
1000a058:	1000b409 	.word	0x1000b409
1000a05c:	10016a4c 	.word	0x10016a4c
1000a060:	1001a21a 	.word	0x1001a21a
1000a064:	10010a69 	.word	0x10010a69
1000a068:	1001a331 	.word	0x1001a331
1000a06c:	1000af71 	.word	0x1000af71

1000a070 <sms_ble_adv_report_fn>:
    return AT_BLE_FAILURE;
}

/* AT_BLE_ADV_REPORT (#3) */
at_ble_status_t sms_ble_adv_report_fn(void *params)
{
1000a070:	b510      	push	{r4, lr}
    at_ble_adv_report_t *adv_report = (at_ble_adv_report_t *)params;
    ble_current_state = BLE_STATE_DISCONNECTED;
1000a072:	2211      	movs	r2, #17
1000a074:	4b05      	ldr	r3, [pc, #20]	; (1000a08c <sms_ble_adv_report_fn+0x1c>)
1000a076:	701a      	strb	r2, [r3, #0]
    DBG_LOG_DEV("[sms_ble_adv_report_fn]\tAdvertisement timeout...");
1000a078:	4805      	ldr	r0, [pc, #20]	; (1000a090 <sms_ble_adv_report_fn+0x20>)
1000a07a:	4b06      	ldr	r3, [pc, #24]	; (1000a094 <sms_ble_adv_report_fn+0x24>)
1000a07c:	4798      	blx	r3
1000a07e:	4806      	ldr	r0, [pc, #24]	; (1000a098 <sms_ble_adv_report_fn+0x28>)
1000a080:	4b06      	ldr	r3, [pc, #24]	; (1000a09c <sms_ble_adv_report_fn+0x2c>)
1000a082:	4798      	blx	r3
    //DBG_LOG_DEV("- status: 0x%02x", adv_report->status);
    sms_ble_power_down();
1000a084:	4b06      	ldr	r3, [pc, #24]	; (1000a0a0 <sms_ble_adv_report_fn+0x30>)
1000a086:	4798      	blx	r3
    return AT_BLE_SUCCESS;
}
1000a088:	2000      	movs	r0, #0
1000a08a:	bd10      	pop	{r4, pc}
1000a08c:	1001a330 	.word	0x1001a330
1000a090:	10016660 	.word	0x10016660
1000a094:	100154a1 	.word	0x100154a1
1000a098:	10016a84 	.word	0x10016a84
1000a09c:	10015381 	.word	0x10015381
1000a0a0:	10009f69 	.word	0x10009f69

1000a0a4 <sms_ble_connected_fn>:

/* AT_BLE_CONNECTED (#5) */
at_ble_status_t sms_ble_connected_fn(void *params)
{
1000a0a4:	b510      	push	{r4, lr}
    if(ble_current_state == BLE_STATE_ADVERTISING) {
1000a0a6:	4b0a      	ldr	r3, [pc, #40]	; (1000a0d0 <sms_ble_connected_fn+0x2c>)
1000a0a8:	781b      	ldrb	r3, [r3, #0]
1000a0aa:	2b20      	cmp	r3, #32
1000a0ac:	d10c      	bne.n	1000a0c8 <sms_ble_connected_fn+0x24>
        at_ble_connected_t *connected = (at_ble_connected_t *)params;
        sms_ble_conn_handle = connected->handle;
1000a0ae:	8902      	ldrh	r2, [r0, #8]
1000a0b0:	4b08      	ldr	r3, [pc, #32]	; (1000a0d4 <sms_ble_connected_fn+0x30>)
1000a0b2:	801a      	strh	r2, [r3, #0]
        ble_current_state = BLE_STATE_CONNECTED;
1000a0b4:	2221      	movs	r2, #33	; 0x21
1000a0b6:	4b06      	ldr	r3, [pc, #24]	; (1000a0d0 <sms_ble_connected_fn+0x2c>)
1000a0b8:	701a      	strb	r2, [r3, #0]
        DBG_LOG_DEV("[sms_ble_connected_fn]\t\tDevices connected...");
1000a0ba:	4807      	ldr	r0, [pc, #28]	; (1000a0d8 <sms_ble_connected_fn+0x34>)
1000a0bc:	4b07      	ldr	r3, [pc, #28]	; (1000a0dc <sms_ble_connected_fn+0x38>)
1000a0be:	4798      	blx	r3
1000a0c0:	4807      	ldr	r0, [pc, #28]	; (1000a0e0 <sms_ble_connected_fn+0x3c>)
1000a0c2:	4b08      	ldr	r3, [pc, #32]	; (1000a0e4 <sms_ble_connected_fn+0x40>)
1000a0c4:	4798      	blx	r3
1000a0c6:	e001      	b.n	1000a0cc <sms_ble_connected_fn+0x28>
        //for(uint8_t i = 0; i < AT_BLE_ADDR_LEN; i++) {
            //DBG_LOG_CONT_DEV("%02x",connected->peer_addr.addr[AT_BLE_ADDR_LEN - (i+1)]);
        //}            
    }
    else {
        sms_ble_power_down();
1000a0c8:	4b07      	ldr	r3, [pc, #28]	; (1000a0e8 <sms_ble_connected_fn+0x44>)
1000a0ca:	4798      	blx	r3
    }    
    return AT_BLE_SUCCESS;
}
1000a0cc:	2000      	movs	r0, #0
1000a0ce:	bd10      	pop	{r4, pc}
1000a0d0:	1001a330 	.word	0x1001a330
1000a0d4:	1001a326 	.word	0x1001a326
1000a0d8:	10016660 	.word	0x10016660
1000a0dc:	100154a1 	.word	0x100154a1
1000a0e0:	10016ab8 	.word	0x10016ab8
1000a0e4:	10015381 	.word	0x10015381
1000a0e8:	10009f69 	.word	0x10009f69

1000a0ec <sms_ble_paired_fn>:
    return AT_BLE_SUCCESS;
}

/* AT_BLE_PAIR_DONE (#9) */
at_ble_status_t sms_ble_paired_fn(void *params)
{
1000a0ec:	b510      	push	{r4, lr}
    if(ble_current_state == BLE_STATE_CONNECTED) {
1000a0ee:	4b09      	ldr	r3, [pc, #36]	; (1000a114 <sms_ble_paired_fn+0x28>)
1000a0f0:	781b      	ldrb	r3, [r3, #0]
1000a0f2:	2b21      	cmp	r3, #33	; 0x21
1000a0f4:	d10a      	bne.n	1000a10c <sms_ble_paired_fn+0x20>
        ble_current_state = BLE_STATE_PAIRED;
1000a0f6:	2222      	movs	r2, #34	; 0x22
1000a0f8:	4b06      	ldr	r3, [pc, #24]	; (1000a114 <sms_ble_paired_fn+0x28>)
1000a0fa:	701a      	strb	r2, [r3, #0]
        at_ble_pair_done_t *pair_status = (at_ble_pair_done_t *)params;
        sms_monitor_get_states("[sms_ble_paired_fn]");
1000a0fc:	4806      	ldr	r0, [pc, #24]	; (1000a118 <sms_ble_paired_fn+0x2c>)
1000a0fe:	4b07      	ldr	r3, [pc, #28]	; (1000a11c <sms_ble_paired_fn+0x30>)
1000a100:	4798      	blx	r3
        //DBG_LOG_DEV("- conn handle: 0x%04x\r\n- authorization: 0x%02x\r\n- status: 0x%02x", pair_status->handle, pair_status->auth, pair_status->status);
        sms_sensors_switch(true, true); // ! Release sleep lock & enable buttons interrupt after reset done!
1000a102:	2101      	movs	r1, #1
1000a104:	2001      	movs	r0, #1
1000a106:	4b06      	ldr	r3, [pc, #24]	; (1000a120 <sms_ble_paired_fn+0x34>)
1000a108:	4798      	blx	r3
1000a10a:	e001      	b.n	1000a110 <sms_ble_paired_fn+0x24>
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
    }
    else {
        sms_ble_power_down();
1000a10c:	4b05      	ldr	r3, [pc, #20]	; (1000a124 <sms_ble_paired_fn+0x38>)
1000a10e:	4798      	blx	r3
    }        
    return AT_BLE_SUCCESS;
}
1000a110:	2000      	movs	r0, #0
1000a112:	bd10      	pop	{r4, pc}
1000a114:	1001a330 	.word	0x1001a330
1000a118:	10016ae8 	.word	0x10016ae8
1000a11c:	1000a9e9 	.word	0x1000a9e9
1000a120:	1000b495 	.word	0x1000b495
1000a124:	10009f69 	.word	0x10009f69

1000a128 <sms_ble_advertise>:
        sms_led_blink_start(SMS_LED_0_PIN);
    }
}

at_ble_status_t sms_ble_advertise(void)
{
1000a128:	b510      	push	{r4, lr}
1000a12a:	b084      	sub	sp, #16
    at_ble_status_t status = AT_BLE_FAILURE;
    ble_current_state = BLE_STATE_ADVERTISING;
1000a12c:	2220      	movs	r2, #32
1000a12e:	4b17      	ldr	r3, [pc, #92]	; (1000a18c <sms_ble_advertise+0x64>)
1000a130:	701a      	strb	r2, [r3, #0]

    /* Set the advertisement data */
    if((status = ble_advertisement_data_set()) != AT_BLE_SUCCESS) {
1000a132:	4b17      	ldr	r3, [pc, #92]	; (1000a190 <sms_ble_advertise+0x68>)
1000a134:	4798      	blx	r3
1000a136:	1e04      	subs	r4, r0, #0
1000a138:	d007      	beq.n	1000a14a <sms_ble_advertise+0x22>
        DBG_LOG("[sms_ble_advertise]\tAdvertisement data set failed!");
1000a13a:	4816      	ldr	r0, [pc, #88]	; (1000a194 <sms_ble_advertise+0x6c>)
1000a13c:	4b16      	ldr	r3, [pc, #88]	; (1000a198 <sms_ble_advertise+0x70>)
1000a13e:	4798      	blx	r3
1000a140:	4816      	ldr	r0, [pc, #88]	; (1000a19c <sms_ble_advertise+0x74>)
1000a142:	4b17      	ldr	r3, [pc, #92]	; (1000a1a0 <sms_ble_advertise+0x78>)
1000a144:	4798      	blx	r3
        return status;
1000a146:	0020      	movs	r0, r4
1000a148:	e01e      	b.n	1000a188 <sms_ble_advertise+0x60>
    }

    /* Start of advertisement */
    if((status = at_ble_adv_start(AT_BLE_ADV_TYPE_UNDIRECTED, AT_BLE_ADV_GEN_DISCOVERABLE, NULL, AT_BLE_ADV_FP_ANY, APP_FAST_ADV, APP_ADV_TIMEOUT, 0)) == AT_BLE_SUCCESS)
1000a14a:	2300      	movs	r3, #0
1000a14c:	9302      	str	r3, [sp, #8]
1000a14e:	4b15      	ldr	r3, [pc, #84]	; (1000a1a4 <sms_ble_advertise+0x7c>)
1000a150:	9301      	str	r3, [sp, #4]
1000a152:	23c8      	movs	r3, #200	; 0xc8
1000a154:	00db      	lsls	r3, r3, #3
1000a156:	9300      	str	r3, [sp, #0]
1000a158:	2300      	movs	r3, #0
1000a15a:	2200      	movs	r2, #0
1000a15c:	2101      	movs	r1, #1
1000a15e:	2000      	movs	r0, #0
1000a160:	4c11      	ldr	r4, [pc, #68]	; (1000a1a8 <sms_ble_advertise+0x80>)
1000a162:	47a0      	blx	r4
1000a164:	1e04      	subs	r4, r0, #0
1000a166:	d107      	bne.n	1000a178 <sms_ble_advertise+0x50>
    {
        DBG_LOG_DEV("[sms_ble_advertise]\t\tBLE Started Advertisement");
1000a168:	480a      	ldr	r0, [pc, #40]	; (1000a194 <sms_ble_advertise+0x6c>)
1000a16a:	4b0b      	ldr	r3, [pc, #44]	; (1000a198 <sms_ble_advertise+0x70>)
1000a16c:	4798      	blx	r3
1000a16e:	480f      	ldr	r0, [pc, #60]	; (1000a1ac <sms_ble_advertise+0x84>)
1000a170:	4b0b      	ldr	r3, [pc, #44]	; (1000a1a0 <sms_ble_advertise+0x78>)
1000a172:	4798      	blx	r3
        return AT_BLE_SUCCESS;
1000a174:	2000      	movs	r0, #0
1000a176:	e007      	b.n	1000a188 <sms_ble_advertise+0x60>
    } 
    else {
        DBG_LOG("[sms_service_advertise]\tBLE Advertisement start failed: reason 0x%x", status);
1000a178:	4806      	ldr	r0, [pc, #24]	; (1000a194 <sms_ble_advertise+0x6c>)
1000a17a:	4b07      	ldr	r3, [pc, #28]	; (1000a198 <sms_ble_advertise+0x70>)
1000a17c:	4798      	blx	r3
1000a17e:	0021      	movs	r1, r4
1000a180:	480b      	ldr	r0, [pc, #44]	; (1000a1b0 <sms_ble_advertise+0x88>)
1000a182:	4b07      	ldr	r3, [pc, #28]	; (1000a1a0 <sms_ble_advertise+0x78>)
1000a184:	4798      	blx	r3
    }
    return AT_BLE_FAILURE;
1000a186:	20e2      	movs	r0, #226	; 0xe2
}
1000a188:	b004      	add	sp, #16
1000a18a:	bd10      	pop	{r4, pc}
1000a18c:	1001a330 	.word	0x1001a330
1000a190:	1000ed49 	.word	0x1000ed49
1000a194:	10016660 	.word	0x10016660
1000a198:	100154a1 	.word	0x100154a1
1000a19c:	10016afc 	.word	0x10016afc
1000a1a0:	10015381 	.word	0x10015381
1000a1a4:	0000028f 	.word	0x0000028f
1000a1a8:	10010901 	.word	0x10010901
1000a1ac:	10016b30 	.word	0x10016b30
1000a1b0:	10016b60 	.word	0x10016b60

1000a1b4 <sms_ble_disconnected_fn>:
    return AT_BLE_SUCCESS;
}

/* AT_BLE_DISCONNECTED (#6) */
at_ble_status_t sms_ble_disconnected_fn(void *params)
{
1000a1b4:	b530      	push	{r4, r5, lr}
1000a1b6:	b083      	sub	sp, #12
1000a1b8:	0005      	movs	r5, r0
    at_ble_disconnected_t *disconnect = (at_ble_disconnected_t *)params;
    if(ble_current_state == BLE_STATE_PAIRED) {
1000a1ba:	4b1c      	ldr	r3, [pc, #112]	; (1000a22c <sms_ble_disconnected_fn+0x78>)
1000a1bc:	781b      	ldrb	r3, [r3, #0]
1000a1be:	2b22      	cmp	r3, #34	; 0x22
1000a1c0:	d10a      	bne.n	1000a1d8 <sms_ble_disconnected_fn+0x24>
        pressure_device.state = PRESSURE_STATE_OFF;
1000a1c2:	2100      	movs	r1, #0
1000a1c4:	3306      	adds	r3, #6
1000a1c6:	4a1a      	ldr	r2, [pc, #104]	; (1000a230 <sms_ble_disconnected_fn+0x7c>)
1000a1c8:	54d1      	strb	r1, [r2, r3]
        sms_sensors_interrupt_toggle(false, false);
1000a1ca:	2000      	movs	r0, #0
1000a1cc:	4b19      	ldr	r3, [pc, #100]	; (1000a234 <sms_ble_disconnected_fn+0x80>)
1000a1ce:	4798      	blx	r3
        sms_sensors_switch(false, false);
1000a1d0:	2100      	movs	r1, #0
1000a1d2:	2000      	movs	r0, #0
1000a1d4:	4b18      	ldr	r3, [pc, #96]	; (1000a238 <sms_ble_disconnected_fn+0x84>)
1000a1d6:	4798      	blx	r3
    }
    ble_current_state = BLE_STATE_DISCONNECTED;
1000a1d8:	4c14      	ldr	r4, [pc, #80]	; (1000a22c <sms_ble_disconnected_fn+0x78>)
1000a1da:	2311      	movs	r3, #17
1000a1dc:	7023      	strb	r3, [r4, #0]
    DBG_LOG_DEV("[sms_ble_disconnected_fn]\tPeer disconnected... Bnew %d, BLE 0x%02x, T1 %d, T2 %d", button_instance.current_state, ble_current_state, timer1_current_mode, timer2_current_mode);
1000a1de:	4817      	ldr	r0, [pc, #92]	; (1000a23c <sms_ble_disconnected_fn+0x88>)
1000a1e0:	4b17      	ldr	r3, [pc, #92]	; (1000a240 <sms_ble_disconnected_fn+0x8c>)
1000a1e2:	4798      	blx	r3
1000a1e4:	7822      	ldrb	r2, [r4, #0]
1000a1e6:	b2d2      	uxtb	r2, r2
1000a1e8:	4b16      	ldr	r3, [pc, #88]	; (1000a244 <sms_ble_disconnected_fn+0x90>)
1000a1ea:	781b      	ldrb	r3, [r3, #0]
1000a1ec:	b2db      	uxtb	r3, r3
1000a1ee:	4916      	ldr	r1, [pc, #88]	; (1000a248 <sms_ble_disconnected_fn+0x94>)
1000a1f0:	7808      	ldrb	r0, [r1, #0]
1000a1f2:	4916      	ldr	r1, [pc, #88]	; (1000a24c <sms_ble_disconnected_fn+0x98>)
1000a1f4:	7849      	ldrb	r1, [r1, #1]
1000a1f6:	9000      	str	r0, [sp, #0]
1000a1f8:	4815      	ldr	r0, [pc, #84]	; (1000a250 <sms_ble_disconnected_fn+0x9c>)
1000a1fa:	4c16      	ldr	r4, [pc, #88]	; (1000a254 <sms_ble_disconnected_fn+0xa0>)
1000a1fc:	47a0      	blx	r4
    //DBG_LOG_DEV("- conn handle: 0x%04x\r\n- reason: 0x%02x", disconnect->handle, disconnect->reason);
    switch(disconnect->reason) {
1000a1fe:	78ab      	ldrb	r3, [r5, #2]
1000a200:	2b1a      	cmp	r3, #26
1000a202:	d00b      	beq.n	1000a21c <sms_ble_disconnected_fn+0x68>
1000a204:	b2da      	uxtb	r2, r3
1000a206:	2a1a      	cmp	r2, #26
1000a208:	d804      	bhi.n	1000a214 <sms_ble_disconnected_fn+0x60>
1000a20a:	2b05      	cmp	r3, #5
1000a20c:	d006      	beq.n	1000a21c <sms_ble_disconnected_fn+0x68>
1000a20e:	2b08      	cmp	r3, #8
1000a210:	d107      	bne.n	1000a222 <sms_ble_disconnected_fn+0x6e>
1000a212:	e003      	b.n	1000a21c <sms_ble_disconnected_fn+0x68>
1000a214:	2b29      	cmp	r3, #41	; 0x29
1000a216:	d001      	beq.n	1000a21c <sms_ble_disconnected_fn+0x68>
1000a218:	2b3b      	cmp	r3, #59	; 0x3b
1000a21a:	d102      	bne.n	1000a222 <sms_ble_disconnected_fn+0x6e>
        case AT_BLE_AUTH_FAILURE: //0x05
        case AT_BLE_SUPERVISION_TIMEOUT: //0x08
        case AT_BLE_UNSUPPORTED_REMOTE_FEATURE: // 0x1A
        case AT_BLE_PAIRING_WITH_UNIT_KEY_NOT_SUP: // 0x29
        case AT_BLE_UNACCEPTABLE_INTERVAL: // 0x3B
        sms_ble_advertise();
1000a21c:	4b0e      	ldr	r3, [pc, #56]	; (1000a258 <sms_ble_disconnected_fn+0xa4>)
1000a21e:	4798      	blx	r3
        break;
1000a220:	e001      	b.n	1000a226 <sms_ble_disconnected_fn+0x72>
        case AT_BLE_TERMINATED_BY_USER: // 0x13
        case AT_BLE_REMOTE_DEV_TERM_LOW_RESOURCES: //0x14
        case AT_BLE_REMOTE_DEV_POWER_OFF: //0x15
        case AT_BLE_CON_TERM_BY_LOCAL_HOST: //0x16
        default:
        sms_ble_power_down();
1000a222:	4b0e      	ldr	r3, [pc, #56]	; (1000a25c <sms_ble_disconnected_fn+0xa8>)
1000a224:	4798      	blx	r3
        break;
    }
    
    return AT_BLE_SUCCESS;
}
1000a226:	2000      	movs	r0, #0
1000a228:	b003      	add	sp, #12
1000a22a:	bd30      	pop	{r4, r5, pc}
1000a22c:	1001a330 	.word	0x1001a330
1000a230:	1001a294 	.word	0x1001a294
1000a234:	1000b409 	.word	0x1000b409
1000a238:	1000b495 	.word	0x1000b495
1000a23c:	10016660 	.word	0x10016660
1000a240:	100154a1 	.word	0x100154a1
1000a244:	1001a184 	.word	0x1001a184
1000a248:	1001a331 	.word	0x1001a331
1000a24c:	1001a220 	.word	0x1001a220
1000a250:	10016ba4 	.word	0x10016ba4
1000a254:	10015381 	.word	0x10015381
1000a258:	1000a129 	.word	0x1000a129
1000a25c:	10009f69 	.word	0x10009f69

1000a260 <sms_ble_send_characteristic>:
    NULL, //ble_characteristic_write_cmd_cmp
    NULL //ble_read_authorize_request_handler
};

at_ble_status_t sms_ble_send_characteristic(enum sms_ble_char_type ch)
{
1000a260:	b570      	push	{r4, r5, r6, lr}
1000a262:	b086      	sub	sp, #24
    at_ble_status_t status = AT_BLE_SUCCESS;
    at_ble_handle_t val_handle = 0;
    uint8_t length = 0;
    uint8_t char_size = 0;
    uint8_t send_val[BLE_CHAR_SIZE_MAX];
    ble_current_state = BLE_STATE_INDICATING;
1000a264:	2223      	movs	r2, #35	; 0x23
1000a266:	4b5e      	ldr	r3, [pc, #376]	; (1000a3e0 <sms_ble_send_characteristic+0x180>)
1000a268:	701a      	strb	r2, [r3, #0]

    
    sms_ble_send_cnt++;
1000a26a:	4a5e      	ldr	r2, [pc, #376]	; (1000a3e4 <sms_ble_send_characteristic+0x184>)
1000a26c:	8813      	ldrh	r3, [r2, #0]
1000a26e:	3301      	adds	r3, #1
1000a270:	8013      	strh	r3, [r2, #0]
    
    switch(ch) {
1000a272:	2801      	cmp	r0, #1
1000a274:	d015      	beq.n	1000a2a2 <sms_ble_send_characteristic+0x42>
1000a276:	2800      	cmp	r0, #0
1000a278:	d004      	beq.n	1000a284 <sms_ble_send_characteristic+0x24>
1000a27a:	2802      	cmp	r0, #2
1000a27c:	d022      	beq.n	1000a2c4 <sms_ble_send_characteristic+0x64>
1000a27e:	2803      	cmp	r0, #3
1000a280:	d036      	beq.n	1000a2f0 <sms_ble_send_characteristic+0x90>
1000a282:	e08e      	b.n	1000a3a2 <sms_ble_send_characteristic+0x142>
        case BLE_CHAR_BTN0:
        btn0_instance.char_value = ((btn0_instance.char_value >= 0x7f) ? 0 : (btn0_instance.char_value + 1));
1000a284:	4b58      	ldr	r3, [pc, #352]	; (1000a3e8 <sms_ble_send_characteristic+0x188>)
1000a286:	78da      	ldrb	r2, [r3, #3]
1000a288:	2300      	movs	r3, #0
1000a28a:	2a7e      	cmp	r2, #126	; 0x7e
1000a28c:	d801      	bhi.n	1000a292 <sms_ble_send_characteristic+0x32>
1000a28e:	3201      	adds	r2, #1
1000a290:	b2d3      	uxtb	r3, r2
1000a292:	4a55      	ldr	r2, [pc, #340]	; (1000a3e8 <sms_ble_send_characteristic+0x188>)
1000a294:	70d3      	strb	r3, [r2, #3]
        send_val[0] = btn0_instance.char_value;
1000a296:	aa01      	add	r2, sp, #4
1000a298:	7013      	strb	r3, [r2, #0]
        val_handle = button_instance.service_handler.serv_chars.char_val_handle;
1000a29a:	4b54      	ldr	r3, [pc, #336]	; (1000a3ec <sms_ble_send_characteristic+0x18c>)
1000a29c:	8b1d      	ldrh	r5, [r3, #24]
        length = BLE_CHAR_SIZE_BUTTON;
1000a29e:	2201      	movs	r2, #1
        break;
1000a2a0:	e081      	b.n	1000a3a6 <sms_ble_send_characteristic+0x146>
        
        case BLE_CHAR_BTN1:
        btn1_instance.char_value = ((btn1_instance.char_value >= 0xff) ? 0 : (btn1_instance.char_value + 1));
1000a2a2:	4b53      	ldr	r3, [pc, #332]	; (1000a3f0 <sms_ble_send_characteristic+0x190>)
1000a2a4:	78db      	ldrb	r3, [r3, #3]
1000a2a6:	2bff      	cmp	r3, #255	; 0xff
1000a2a8:	d002      	beq.n	1000a2b0 <sms_ble_send_characteristic+0x50>
1000a2aa:	3301      	adds	r3, #1
1000a2ac:	b2db      	uxtb	r3, r3
1000a2ae:	e000      	b.n	1000a2b2 <sms_ble_send_characteristic+0x52>
1000a2b0:	2300      	movs	r3, #0
1000a2b2:	4a4f      	ldr	r2, [pc, #316]	; (1000a3f0 <sms_ble_send_characteristic+0x190>)
1000a2b4:	70d3      	strb	r3, [r2, #3]
        send_val[0] = btn1_instance.char_value + 0x80;
1000a2b6:	3b80      	subs	r3, #128	; 0x80
1000a2b8:	aa01      	add	r2, sp, #4
1000a2ba:	7013      	strb	r3, [r2, #0]
        val_handle = button_instance.service_handler.serv_chars.char_val_handle;
1000a2bc:	4b4b      	ldr	r3, [pc, #300]	; (1000a3ec <sms_ble_send_characteristic+0x18c>)
1000a2be:	8b1d      	ldrh	r5, [r3, #24]
        length = BLE_CHAR_SIZE_BUTTON;
1000a2c0:	2201      	movs	r2, #1
        break;
1000a2c2:	e070      	b.n	1000a3a6 <sms_ble_send_characteristic+0x146>
        
        case BLE_CHAR_PRESS:
        send_val[0] = (uint8_t)(pressure_device.hal.temperature & 0xff);
1000a2c4:	494b      	ldr	r1, [pc, #300]	; (1000a3f4 <sms_ble_send_characteristic+0x194>)
1000a2c6:	6a0a      	ldr	r2, [r1, #32]
1000a2c8:	ab01      	add	r3, sp, #4
1000a2ca:	701a      	strb	r2, [r3, #0]
        send_val[1] = (uint8_t)((pressure_device.hal.temperature >> 8) & 0xff);
1000a2cc:	1210      	asrs	r0, r2, #8
1000a2ce:	7058      	strb	r0, [r3, #1]
        send_val[2] = (uint8_t)((pressure_device.hal.temperature >> 16) & 0xff);
1000a2d0:	1410      	asrs	r0, r2, #16
1000a2d2:	7098      	strb	r0, [r3, #2]
        send_val[3] = (uint8_t)((pressure_device.hal.temperature >> 24) & 0xff);
1000a2d4:	1612      	asrs	r2, r2, #24
1000a2d6:	70da      	strb	r2, [r3, #3]
        send_val[4] = (uint8_t)(pressure_device.hal.pressure & 0xff);
1000a2d8:	69ca      	ldr	r2, [r1, #28]
1000a2da:	711a      	strb	r2, [r3, #4]
        send_val[5] = (uint8_t)((pressure_device.hal.pressure >> 8) & 0xff);
1000a2dc:	1210      	asrs	r0, r2, #8
1000a2de:	7158      	strb	r0, [r3, #5]
        send_val[6] = (uint8_t)((pressure_device.hal.pressure >> 16) & 0xff);
1000a2e0:	1410      	asrs	r0, r2, #16
1000a2e2:	7198      	strb	r0, [r3, #6]
        send_val[7] = (uint8_t)((pressure_device.hal.pressure >> 24) & 0xff);
1000a2e4:	1612      	asrs	r2, r2, #24
1000a2e6:	71da      	strb	r2, [r3, #7]
        val_handle = pressure_device.service_handler.serv_chars.char_val_handle;
1000a2e8:	2340      	movs	r3, #64	; 0x40
1000a2ea:	5acd      	ldrh	r5, [r1, r3]
        length = BLE_CHAR_SIZE_PRESSURE;
1000a2ec:	2208      	movs	r2, #8
        break;
1000a2ee:	e05a      	b.n	1000a3a6 <sms_ble_send_characteristic+0x146>
        
        case BLE_CHAR_MPU:
        send_val[0] = (uint8_t)(mpu_device.hal.accel[0] & 0xff);
1000a2f0:	4a41      	ldr	r2, [pc, #260]	; (1000a3f8 <sms_ble_send_characteristic+0x198>)
1000a2f2:	2312      	movs	r3, #18
1000a2f4:	5ed1      	ldrsh	r1, [r2, r3]
1000a2f6:	ab01      	add	r3, sp, #4
1000a2f8:	7019      	strb	r1, [r3, #0]
        send_val[1] = (uint8_t)((mpu_device.hal.accel[0] >> 8) & 0xff);
1000a2fa:	1209      	asrs	r1, r1, #8
1000a2fc:	7059      	strb	r1, [r3, #1]
        send_val[2] = (uint8_t)(mpu_device.hal.accel[1] & 0xff);
1000a2fe:	2014      	movs	r0, #20
1000a300:	5e11      	ldrsh	r1, [r2, r0]
1000a302:	7099      	strb	r1, [r3, #2]
        send_val[3] = (uint8_t)((mpu_device.hal.accel[1] >> 8) & 0xff);
1000a304:	1209      	asrs	r1, r1, #8
1000a306:	70d9      	strb	r1, [r3, #3]
        send_val[4] = (uint8_t)(mpu_device.hal.accel[2] & 0xff);
1000a308:	2016      	movs	r0, #22
1000a30a:	5e11      	ldrsh	r1, [r2, r0]
1000a30c:	7119      	strb	r1, [r3, #4]
        send_val[5] = (uint8_t)((mpu_device.hal.accel[2] >> 8) & 0xff);
1000a30e:	1209      	asrs	r1, r1, #8
1000a310:	7159      	strb	r1, [r3, #5]
        send_val[6] = (uint8_t)(mpu_device.hal.gyro[0] & 0xff);
1000a312:	200c      	movs	r0, #12
1000a314:	5e11      	ldrsh	r1, [r2, r0]
1000a316:	7199      	strb	r1, [r3, #6]
        send_val[7] = (uint8_t)((mpu_device.hal.gyro[0] >> 8) & 0xff);
1000a318:	1209      	asrs	r1, r1, #8
1000a31a:	71d9      	strb	r1, [r3, #7]
        send_val[8] = (uint8_t)(mpu_device.hal.gyro[1] & 0xff);
1000a31c:	200e      	movs	r0, #14
1000a31e:	5e11      	ldrsh	r1, [r2, r0]
1000a320:	7219      	strb	r1, [r3, #8]
        send_val[9] = (uint8_t)((mpu_device.hal.gyro[1] >> 8) & 0xff);
1000a322:	1209      	asrs	r1, r1, #8
1000a324:	7259      	strb	r1, [r3, #9]
        send_val[10] = (uint8_t)(mpu_device.hal.gyro[2] & 0xff);
1000a326:	2010      	movs	r0, #16
1000a328:	5e11      	ldrsh	r1, [r2, r0]
1000a32a:	7299      	strb	r1, [r3, #10]
        send_val[11] = (uint8_t)((mpu_device.hal.gyro[2] >> 8) & 0xff);
1000a32c:	1209      	asrs	r1, r1, #8
1000a32e:	72d9      	strb	r1, [r3, #11]
        val_handle = mpu_device.service_handler.serv_chars.char_val_handle;
1000a330:	2348      	movs	r3, #72	; 0x48
1000a332:	5ad5      	ldrh	r5, [r2, r3]
        length = BLE_CHAR_SIZE_MPU_G_A;
        
        if(mpu_device.new_compass) {
1000a334:	3b1a      	subs	r3, #26
1000a336:	5cd3      	ldrb	r3, [r2, r3]
1000a338:	2b00      	cmp	r3, #0
1000a33a:	d014      	beq.n	1000a366 <sms_ble_send_characteristic+0x106>
            send_val[12] = (uint8_t)(mpu_device.hal.compass[0] & 0xff);
1000a33c:	2318      	movs	r3, #24
1000a33e:	5ed1      	ldrsh	r1, [r2, r3]
1000a340:	ab01      	add	r3, sp, #4
1000a342:	7319      	strb	r1, [r3, #12]
            send_val[13] = (uint8_t)((mpu_device.hal.compass[0] >> 8) & 0xff);
1000a344:	1209      	asrs	r1, r1, #8
1000a346:	7359      	strb	r1, [r3, #13]
            send_val[14] = (uint8_t)(mpu_device.hal.compass[1] & 0xff);
1000a348:	201a      	movs	r0, #26
1000a34a:	5e11      	ldrsh	r1, [r2, r0]
1000a34c:	7399      	strb	r1, [r3, #14]
            send_val[15] = (uint8_t)((mpu_device.hal.compass[1] >> 8) & 0xff);
1000a34e:	1209      	asrs	r1, r1, #8
1000a350:	73d9      	strb	r1, [r3, #15]
            send_val[16] = (uint8_t)(mpu_device.hal.compass[2] & 0xff);
1000a352:	201c      	movs	r0, #28
1000a354:	5e11      	ldrsh	r1, [r2, r0]
1000a356:	7419      	strb	r1, [r3, #16]
            send_val[17] = (uint8_t)((mpu_device.hal.compass[2] >> 8) & 0xff);
1000a358:	1209      	asrs	r1, r1, #8
1000a35a:	7459      	strb	r1, [r3, #17]
            length = BLE_CHAR_SIZE_MPU_G_A_C;
            mpu_device.new_compass = false;
1000a35c:	2100      	movs	r1, #0
1000a35e:	232e      	movs	r3, #46	; 0x2e
1000a360:	54d1      	strb	r1, [r2, r3]
            send_val[13] = (uint8_t)((mpu_device.hal.compass[0] >> 8) & 0xff);
            send_val[14] = (uint8_t)(mpu_device.hal.compass[1] & 0xff);
            send_val[15] = (uint8_t)((mpu_device.hal.compass[1] >> 8) & 0xff);
            send_val[16] = (uint8_t)(mpu_device.hal.compass[2] & 0xff);
            send_val[17] = (uint8_t)((mpu_device.hal.compass[2] >> 8) & 0xff);
            length = BLE_CHAR_SIZE_MPU_G_A_C;
1000a362:	2212      	movs	r2, #18
1000a364:	e008      	b.n	1000a378 <sms_ble_send_characteristic+0x118>
            mpu_device.new_compass = false;
        }
        else {
            for(uint8_t i = 0; i < 6; i++) {
                send_val[12+i] = 0;
1000a366:	ab01      	add	r3, sp, #4
1000a368:	2200      	movs	r2, #0
1000a36a:	731a      	strb	r2, [r3, #12]
1000a36c:	735a      	strb	r2, [r3, #13]
1000a36e:	739a      	strb	r2, [r3, #14]
1000a370:	73da      	strb	r2, [r3, #15]
1000a372:	741a      	strb	r2, [r3, #16]
1000a374:	745a      	strb	r2, [r3, #17]
        send_val[8] = (uint8_t)(mpu_device.hal.gyro[1] & 0xff);
        send_val[9] = (uint8_t)((mpu_device.hal.gyro[1] >> 8) & 0xff);
        send_val[10] = (uint8_t)(mpu_device.hal.gyro[2] & 0xff);
        send_val[11] = (uint8_t)((mpu_device.hal.gyro[2] >> 8) & 0xff);
        val_handle = mpu_device.service_handler.serv_chars.char_val_handle;
        length = BLE_CHAR_SIZE_MPU_G_A;
1000a376:	320c      	adds	r2, #12
            for(uint8_t i = 0; i < 6; i++) {
                send_val[12+i] = 0;
            }
        }
        
        if(mpu_device.new_temp) {
1000a378:	232f      	movs	r3, #47	; 0x2f
1000a37a:	491f      	ldr	r1, [pc, #124]	; (1000a3f8 <sms_ble_send_characteristic+0x198>)
1000a37c:	5ccb      	ldrb	r3, [r1, r3]
1000a37e:	2b00      	cmp	r3, #0
1000a380:	d00a      	beq.n	1000a398 <sms_ble_send_characteristic+0x138>
            send_val[18] = (uint8_t)(mpu_device.hal.temperature & 0xff);
1000a382:	000a      	movs	r2, r1
1000a384:	6a0b      	ldr	r3, [r1, #32]
1000a386:	a901      	add	r1, sp, #4
1000a388:	748b      	strb	r3, [r1, #18]
            send_val[19] = (uint8_t)((mpu_device.hal.temperature >> 8) & 0xff);
1000a38a:	121b      	asrs	r3, r3, #8
1000a38c:	74cb      	strb	r3, [r1, #19]
            length = BLE_CHAR_SIZE_MPU_G_A_C_T;
            mpu_device.new_temp = false;
1000a38e:	2100      	movs	r1, #0
1000a390:	232f      	movs	r3, #47	; 0x2f
1000a392:	54d1      	strb	r1, [r2, r3]
        }
        
        if(mpu_device.new_temp) {
            send_val[18] = (uint8_t)(mpu_device.hal.temperature & 0xff);
            send_val[19] = (uint8_t)((mpu_device.hal.temperature >> 8) & 0xff);
            length = BLE_CHAR_SIZE_MPU_G_A_C_T;
1000a394:	2214      	movs	r2, #20
1000a396:	e006      	b.n	1000a3a6 <sms_ble_send_characteristic+0x146>
            mpu_device.new_temp = false;
        }
        else {
            for(uint8_t i = 0; i < 2; i++) {
                send_val[18+i] = 0;
1000a398:	ab01      	add	r3, sp, #4
1000a39a:	2100      	movs	r1, #0
1000a39c:	7499      	strb	r1, [r3, #18]
1000a39e:	74d9      	strb	r1, [r3, #19]
1000a3a0:	e001      	b.n	1000a3a6 <sms_ble_send_characteristic+0x146>

at_ble_status_t sms_ble_send_characteristic(enum sms_ble_char_type ch)
{
    at_ble_status_t status = AT_BLE_SUCCESS;
    at_ble_handle_t val_handle = 0;
    uint8_t length = 0;
1000a3a2:	2200      	movs	r2, #0
};

at_ble_status_t sms_ble_send_characteristic(enum sms_ble_char_type ch)
{
    at_ble_status_t status = AT_BLE_SUCCESS;
    at_ble_handle_t val_handle = 0;
1000a3a4:	2500      	movs	r5, #0
    
    //DBG_LOG_DEV("Sending: ");
    //for(int i = 0; i < 20; i += 2) {
        //DBG_LOG_CONT_DEV("0x%02x%02x ", send_val[i], send_val[i+1]);
    //}
    status = at_ble_characteristic_value_set(val_handle, send_val, (length * sizeof(uint8_t)));
1000a3a6:	b292      	uxth	r2, r2
1000a3a8:	a901      	add	r1, sp, #4
1000a3aa:	0028      	movs	r0, r5
1000a3ac:	4b13      	ldr	r3, [pc, #76]	; (1000a3fc <sms_ble_send_characteristic+0x19c>)
1000a3ae:	4798      	blx	r3
1000a3b0:	1e04      	subs	r4, r0, #0
    if(status == AT_BLE_SUCCESS) {
1000a3b2:	d111      	bne.n	1000a3d8 <sms_ble_send_characteristic+0x178>
        //for(uint8_t i = 0; i < AT_BLE_UUID_128_LEN; i++) {
        //DBG_LOG_CONT_DEV("%02x", sms_button_service_handler.serv_uuid.uuid[(i)]);
        //}
        //DBG_LOG_DEV("- char value handle: 0x%04x\r\n- char value: 0x%02x", sms_button_service_handler.serv_chars.char_val_handle, send_val);
        
        printf("\r\ncnt: %d", sms_ble_send_cnt);
1000a3b4:	4b0b      	ldr	r3, [pc, #44]	; (1000a3e4 <sms_ble_send_characteristic+0x184>)
1000a3b6:	8819      	ldrh	r1, [r3, #0]
1000a3b8:	4811      	ldr	r0, [pc, #68]	; (1000a400 <sms_ble_send_characteristic+0x1a0>)
1000a3ba:	4b12      	ldr	r3, [pc, #72]	; (1000a404 <sms_ble_send_characteristic+0x1a4>)
1000a3bc:	4798      	blx	r3
        gpio_pin_set_output_level(DBG_PIN_1, DBG_PIN_HIGH);
1000a3be:	2101      	movs	r1, #1
1000a3c0:	2002      	movs	r0, #2
1000a3c2:	4e11      	ldr	r6, [pc, #68]	; (1000a408 <sms_ble_send_characteristic+0x1a8>)
1000a3c4:	47b0      	blx	r6
#   if SMS_SENDING_WITH_ACK == true
        sms_ble_ind_retry = 0;
        status = at_ble_indication_send(sms_connection_handle, val_handle);
#   else
        status = at_ble_notification_send(sms_connection_handle, val_handle);
1000a3c6:	4b11      	ldr	r3, [pc, #68]	; (1000a40c <sms_ble_send_characteristic+0x1ac>)
1000a3c8:	8818      	ldrh	r0, [r3, #0]
1000a3ca:	0029      	movs	r1, r5
1000a3cc:	4b10      	ldr	r3, [pc, #64]	; (1000a410 <sms_ble_send_characteristic+0x1b0>)
1000a3ce:	4798      	blx	r3
1000a3d0:	0004      	movs	r4, r0
#   endif
        gpio_pin_set_output_level(DBG_PIN_1, DBG_PIN_LOW);
1000a3d2:	2100      	movs	r1, #0
1000a3d4:	2002      	movs	r0, #2
1000a3d6:	47b0      	blx	r6
        else {
            //#pragma TBD: handle sending error...
        }
    }
    return status;
}
1000a3d8:	0020      	movs	r0, r4
1000a3da:	b006      	add	sp, #24
1000a3dc:	bd70      	pop	{r4, r5, r6, pc}
1000a3de:	46c0      	nop			; (mov r8, r8)
1000a3e0:	1001a330 	.word	0x1001a330
1000a3e4:	1001a34c 	.word	0x1001a34c
1000a3e8:	1001a180 	.word	0x1001a180
1000a3ec:	1001a220 	.word	0x1001a220
1000a3f0:	1001a21c 	.word	0x1001a21c
1000a3f4:	1001a294 	.word	0x1001a294
1000a3f8:	1001a188 	.word	0x1001a188
1000a3fc:	100111e5 	.word	0x100111e5
1000a400:	10016bf8 	.word	0x10016bf8
1000a404:	10015381 	.word	0x10015381
1000a408:	1000c3d9 	.word	0x1000c3d9
1000a40c:	1001a21a 	.word	0x1001a21a
1000a410:	10011385 	.word	0x10011385

1000a414 <sms_ble_primary_service_define>:


at_ble_status_t sms_ble_primary_service_define(gatt_service_handler_t *service)
{
1000a414:	b510      	push	{r4, lr}
1000a416:	b082      	sub	sp, #8
    //DBG_LOG_DEV("[sms_ble_primary_service_define]\n\r  defining primary service\r\n- uuid: 0x%02x\r\n- handle: 0x%02x\r\n- char uuid: 0x%02x%02x\r\n- char init value: %d", (unsigned int)service->serv_uuid.uuid, service->serv_handle, service->serv_chars.uuid.uuid[1], service->serv_chars.uuid.uuid[0], service->serv_chars.value_init_len);
    return(at_ble_primary_service_define(&service->serv_uuid, &service->serv_handle, NULL, 0, &service->serv_chars, 1));
1000a418:	0001      	movs	r1, r0
1000a41a:	3112      	adds	r1, #18
1000a41c:	2301      	movs	r3, #1
1000a41e:	9301      	str	r3, [sp, #4]
1000a420:	0003      	movs	r3, r0
1000a422:	3314      	adds	r3, #20
1000a424:	9300      	str	r3, [sp, #0]
1000a426:	2300      	movs	r3, #0
1000a428:	2200      	movs	r2, #0
1000a42a:	4c02      	ldr	r4, [pc, #8]	; (1000a434 <sms_ble_primary_service_define+0x20>)
1000a42c:	47a0      	blx	r4
}
1000a42e:	b002      	add	sp, #8
1000a430:	bd10      	pop	{r4, pc}
1000a432:	46c0      	nop			; (mov r8, r8)
1000a434:	100111c5 	.word	0x100111c5

1000a438 <sms_ble_service_init>:


void sms_ble_service_init(enum sms_ble_serv_type type, gatt_service_handler_t *service, uint8_t *value)
{
1000a438:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a43a:	464f      	mov	r7, r9
1000a43c:	4646      	mov	r6, r8
1000a43e:	b4c0      	push	{r6, r7}
1000a440:	b083      	sub	sp, #12
1000a442:	4694      	mov	ip, r2
    at_ble_handle_t handle = 0;
    uint8_t uuid[16] = {0};
    uint8_t char_size = 0;
    switch(type) {
1000a444:	2801      	cmp	r0, #1
1000a446:	d010      	beq.n	1000a46a <sms_ble_service_init+0x32>
1000a448:	2800      	cmp	r0, #0
1000a44a:	d002      	beq.n	1000a452 <sms_ble_service_init+0x1a>
1000a44c:	2802      	cmp	r0, #2
1000a44e:	d019      	beq.n	1000a484 <sms_ble_service_init+0x4c>
1000a450:	e025      	b.n	1000a49e <sms_ble_service_init+0x66>
        uuid[9] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_3 >> 8) & 0xFF);
        uuid[10] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_3 >> 16) & 0xFF);
        uuid[11] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_3 >> 24) & 0xFF);
        uuid[12] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_4) & 0xFF);
        uuid[13] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_4 >> 8) & 0xFF);
        uuid[14] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_4 >> 16) & 0xFF);
1000a452:	24bb      	movs	r4, #187	; 0xbb
        uuid[6] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 16) & 0xFF);
        uuid[7] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 24) & 0xFF);
        uuid[8] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_3) & 0xFF);
        uuid[9] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_3 >> 8) & 0xFF);
        uuid[10] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_3 >> 16) & 0xFF);
        uuid[11] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_3 >> 24) & 0xFF);
1000a454:	2550      	movs	r5, #80	; 0x50
        uuid[5] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 8) & 0xFF);
        uuid[6] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 16) & 0xFF);
        uuid[7] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 24) & 0xFF);
        uuid[8] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_3) & 0xFF);
        uuid[9] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_3 >> 8) & 0xFF);
        uuid[10] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_3 >> 16) & 0xFF);
1000a456:	2630      	movs	r6, #48	; 0x30
        uuid[2] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[4] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2) & 0xFF);
        uuid[5] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 8) & 0xFF);
        uuid[6] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 16) & 0xFF);
        uuid[7] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 24) & 0xFF);
1000a458:	275a      	movs	r7, #90	; 0x5a
        uuid[1] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[4] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2) & 0xFF);
        uuid[5] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 8) & 0xFF);
        uuid[6] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 16) & 0xFF);
1000a45a:	20be      	movs	r0, #190	; 0xbe
        case BLE_SERV_BUTTON:
        handle = 1;
        uuid[0] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 24) & 0xFF);
1000a45c:	231c      	movs	r3, #28
1000a45e:	4698      	mov	r8, r3
    switch(type) {
        case BLE_SERV_BUTTON:
        handle = 1;
        uuid[0] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 16) & 0xFF);
1000a460:	333b      	adds	r3, #59	; 0x3b
1000a462:	4699      	mov	r9, r3
        uuid[11] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_3 >> 24) & 0xFF);
        uuid[12] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_4) & 0xFF);
        uuid[13] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_4 >> 8) & 0xFF);
        uuid[14] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_4 >> 16) & 0xFF);
        uuid[15] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_4 >> 24) & 0xFF);
        char_size = 1;
1000a464:	3b56      	subs	r3, #86	; 0x56
1000a466:	9301      	str	r3, [sp, #4]
1000a468:	e022      	b.n	1000a4b0 <sms_ble_service_init+0x78>
        uuid[9] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_3 >> 8) & 0xFF);
        uuid[10] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_3 >> 16) & 0xFF);
        uuid[11] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_3 >> 24) & 0xFF);
        uuid[12] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4) & 0xFF);
        uuid[13] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 8) & 0xFF);
        uuid[14] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 16) & 0xFF);
1000a46a:	24ee      	movs	r4, #238	; 0xee
        uuid[6] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 16) & 0xFF);
        uuid[7] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 24) & 0xFF);
        uuid[8] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_3) & 0xFF);
        uuid[9] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_3 >> 8) & 0xFF);
        uuid[10] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_3 >> 16) & 0xFF);
        uuid[11] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_3 >> 24) & 0xFF);
1000a46c:	2550      	movs	r5, #80	; 0x50
        uuid[5] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 8) & 0xFF);
        uuid[6] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 16) & 0xFF);
        uuid[7] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 24) & 0xFF);
        uuid[8] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_3) & 0xFF);
        uuid[9] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_3 >> 8) & 0xFF);
        uuid[10] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_3 >> 16) & 0xFF);
1000a46e:	2630      	movs	r6, #48	; 0x30
        uuid[2] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[4] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2) & 0xFF);
        uuid[5] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 8) & 0xFF);
        uuid[6] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 16) & 0xFF);
        uuid[7] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 24) & 0xFF);
1000a470:	275a      	movs	r7, #90	; 0x5a
        uuid[1] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[4] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2) & 0xFF);
        uuid[5] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 8) & 0xFF);
        uuid[6] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 16) & 0xFF);
1000a472:	20be      	movs	r0, #190	; 0xbe
        case BLE_SERV_PRESSURE:
        handle = 2;
        uuid[0] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 24) & 0xFF);
1000a474:	231c      	movs	r3, #28
1000a476:	4698      	mov	r8, r3
        
        case BLE_SERV_PRESSURE:
        handle = 2;
        uuid[0] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 16) & 0xFF);
1000a478:	333b      	adds	r3, #59	; 0x3b
1000a47a:	4699      	mov	r9, r3
        uuid[11] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_3 >> 24) & 0xFF);
        uuid[12] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4) & 0xFF);
        uuid[13] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 8) & 0xFF);
        uuid[14] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 16) & 0xFF);
        uuid[15] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 24) & 0xFF);
        char_size = 8;
1000a47c:	3b4f      	subs	r3, #79	; 0x4f
1000a47e:	9301      	str	r3, [sp, #4]
        uuid[15] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_4 >> 24) & 0xFF);
        char_size = 1;
        break;
        
        case BLE_SERV_PRESSURE:
        handle = 2;
1000a480:	3b06      	subs	r3, #6
        uuid[12] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4) & 0xFF);
        uuid[13] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 8) & 0xFF);
        uuid[14] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 16) & 0xFF);
        uuid[15] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 24) & 0xFF);
        char_size = 8;
        break;
1000a482:	e015      	b.n	1000a4b0 <sms_ble_service_init+0x78>
        uuid[9] = (uint8_t) ((SMS_MPU_SERVICE_UUID_3 >> 8) & 0xFF);
        uuid[10] = (uint8_t) ((SMS_MPU_SERVICE_UUID_3 >> 16) & 0xFF);
        uuid[11] = (uint8_t) ((SMS_MPU_SERVICE_UUID_3 >> 24) & 0xFF);
        uuid[12] = (uint8_t) ((SMS_MPU_SERVICE_UUID_4) & 0xFF);
        uuid[13] = (uint8_t) ((SMS_MPU_SERVICE_UUID_4 >> 8) & 0xFF);
        uuid[14] = (uint8_t) ((SMS_MPU_SERVICE_UUID_4 >> 16) & 0xFF);
1000a484:	2411      	movs	r4, #17
        uuid[6] = (uint8_t) ((SMS_MPU_SERVICE_UUID_2 >> 16) & 0xFF);
        uuid[7] = (uint8_t) ((SMS_MPU_SERVICE_UUID_2 >> 24) & 0xFF);
        uuid[8] = (uint8_t) ((SMS_MPU_SERVICE_UUID_3) & 0xFF);
        uuid[9] = (uint8_t) ((SMS_MPU_SERVICE_UUID_3 >> 8) & 0xFF);
        uuid[10] = (uint8_t) ((SMS_MPU_SERVICE_UUID_3 >> 16) & 0xFF);
        uuid[11] = (uint8_t) ((SMS_MPU_SERVICE_UUID_3 >> 24) & 0xFF);
1000a486:	2550      	movs	r5, #80	; 0x50
        uuid[5] = (uint8_t) ((SMS_MPU_SERVICE_UUID_2 >> 8) & 0xFF);
        uuid[6] = (uint8_t) ((SMS_MPU_SERVICE_UUID_2 >> 16) & 0xFF);
        uuid[7] = (uint8_t) ((SMS_MPU_SERVICE_UUID_2 >> 24) & 0xFF);
        uuid[8] = (uint8_t) ((SMS_MPU_SERVICE_UUID_3) & 0xFF);
        uuid[9] = (uint8_t) ((SMS_MPU_SERVICE_UUID_3 >> 8) & 0xFF);
        uuid[10] = (uint8_t) ((SMS_MPU_SERVICE_UUID_3 >> 16) & 0xFF);
1000a488:	2630      	movs	r6, #48	; 0x30
        uuid[2] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[4] = (uint8_t) ((SMS_MPU_SERVICE_UUID_2) & 0xFF);
        uuid[5] = (uint8_t) ((SMS_MPU_SERVICE_UUID_2 >> 8) & 0xFF);
        uuid[6] = (uint8_t) ((SMS_MPU_SERVICE_UUID_2 >> 16) & 0xFF);
        uuid[7] = (uint8_t) ((SMS_MPU_SERVICE_UUID_2 >> 24) & 0xFF);
1000a48a:	275a      	movs	r7, #90	; 0x5a
        uuid[1] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[4] = (uint8_t) ((SMS_MPU_SERVICE_UUID_2) & 0xFF);
        uuid[5] = (uint8_t) ((SMS_MPU_SERVICE_UUID_2 >> 8) & 0xFF);
        uuid[6] = (uint8_t) ((SMS_MPU_SERVICE_UUID_2 >> 16) & 0xFF);
1000a48c:	20be      	movs	r0, #190	; 0xbe
        case BLE_SERV_MPU:
        handle = 3;
        uuid[0] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 24) & 0xFF);
1000a48e:	231c      	movs	r3, #28
1000a490:	4698      	mov	r8, r3
        
        case BLE_SERV_MPU:
        handle = 3;
        uuid[0] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 16) & 0xFF);
1000a492:	333b      	adds	r3, #59	; 0x3b
1000a494:	4699      	mov	r9, r3
        uuid[11] = (uint8_t) ((SMS_MPU_SERVICE_UUID_3 >> 24) & 0xFF);
        uuid[12] = (uint8_t) ((SMS_MPU_SERVICE_UUID_4) & 0xFF);
        uuid[13] = (uint8_t) ((SMS_MPU_SERVICE_UUID_4 >> 8) & 0xFF);
        uuid[14] = (uint8_t) ((SMS_MPU_SERVICE_UUID_4 >> 16) & 0xFF);
        uuid[15] = (uint8_t) ((SMS_MPU_SERVICE_UUID_4 >> 24) & 0xFF);
        char_size = 20;
1000a496:	3b43      	subs	r3, #67	; 0x43
1000a498:	9301      	str	r3, [sp, #4]
        uuid[15] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 24) & 0xFF);
        char_size = 8;
        break;
        
        case BLE_SERV_MPU:
        handle = 3;
1000a49a:	3b11      	subs	r3, #17
        uuid[12] = (uint8_t) ((SMS_MPU_SERVICE_UUID_4) & 0xFF);
        uuid[13] = (uint8_t) ((SMS_MPU_SERVICE_UUID_4 >> 8) & 0xFF);
        uuid[14] = (uint8_t) ((SMS_MPU_SERVICE_UUID_4 >> 16) & 0xFF);
        uuid[15] = (uint8_t) ((SMS_MPU_SERVICE_UUID_4 >> 24) & 0xFF);
        char_size = 20;
        break;
1000a49c:	e008      	b.n	1000a4b0 <sms_ble_service_init+0x78>


void sms_ble_service_init(enum sms_ble_serv_type type, gatt_service_handler_t *service, uint8_t *value)
{
    at_ble_handle_t handle = 0;
    uint8_t uuid[16] = {0};
1000a49e:	2400      	movs	r4, #0
1000a4a0:	2500      	movs	r5, #0
1000a4a2:	2600      	movs	r6, #0
1000a4a4:	2700      	movs	r7, #0
1000a4a6:	2000      	movs	r0, #0
1000a4a8:	2300      	movs	r3, #0
1000a4aa:	4698      	mov	r8, r3
1000a4ac:	4699      	mov	r9, r3
    uint8_t char_size = 0;
1000a4ae:	9301      	str	r3, [sp, #4]
        
        default:
        break;
    }
    //SMS button service characteristic
    service->serv_handle = handle;
1000a4b0:	824b      	strh	r3, [r1, #18]
    service->serv_uuid.type = AT_BLE_UUID_128;
1000a4b2:	2302      	movs	r3, #2
1000a4b4:	700b      	strb	r3, [r1, #0]
    service->serv_uuid.uuid[0] = uuid[0];
1000a4b6:	2300      	movs	r3, #0
1000a4b8:	704b      	strb	r3, [r1, #1]
    service->serv_uuid.uuid[1] = uuid[1];
1000a4ba:	708b      	strb	r3, [r1, #2]
    service->serv_uuid.uuid[2] = uuid[2];
1000a4bc:	464a      	mov	r2, r9
1000a4be:	70ca      	strb	r2, [r1, #3]
    service->serv_uuid.uuid[3] = uuid[3];
1000a4c0:	4642      	mov	r2, r8
1000a4c2:	710a      	strb	r2, [r1, #4]
    service->serv_uuid.uuid[4] = uuid[4];
1000a4c4:	714b      	strb	r3, [r1, #5]
    service->serv_uuid.uuid[5] = uuid[5];
1000a4c6:	718b      	strb	r3, [r1, #6]
    service->serv_uuid.uuid[6] = uuid[6];
1000a4c8:	71c8      	strb	r0, [r1, #7]
    service->serv_uuid.uuid[7] = uuid[7];
1000a4ca:	720f      	strb	r7, [r1, #8]
    service->serv_uuid.uuid[8] = uuid[8];
1000a4cc:	724b      	strb	r3, [r1, #9]
    service->serv_uuid.uuid[9] = uuid[9];
1000a4ce:	728b      	strb	r3, [r1, #10]
    service->serv_uuid.uuid[10] = uuid[10];
1000a4d0:	72ce      	strb	r6, [r1, #11]
    service->serv_uuid.uuid[11] = uuid[11];
1000a4d2:	730d      	strb	r5, [r1, #12]
    service->serv_uuid.uuid[12] = uuid[12];
1000a4d4:	734b      	strb	r3, [r1, #13]
    service->serv_uuid.uuid[13] = uuid[13];
1000a4d6:	738b      	strb	r3, [r1, #14]
    service->serv_uuid.uuid[14] = uuid[14];
1000a4d8:	73cc      	strb	r4, [r1, #15]
    service->serv_uuid.uuid[15] = uuid[15];
1000a4da:	740c      	strb	r4, [r1, #16]
    
    #   if SMS_SENDING_WITH_ACK == true
    service->serv_chars.properties = (AT_BLE_CHAR_READ | AT_BLE_CHAR_INDICATE); // properties
    #   else
    service->serv_chars.properties = (AT_BLE_CHAR_READ | AT_BLE_CHAR_NOTIFY); // properties
1000a4dc:	2412      	movs	r4, #18
1000a4de:	850c      	strh	r4, [r1, #40]	; 0x28
    #   endif
    service->serv_chars.init_value = value; // value
1000a4e0:	4662      	mov	r2, ip
1000a4e2:	62ca      	str	r2, [r1, #44]	; 0x2c
    service->serv_chars.value_init_len = char_size * sizeof(uint8_t);
1000a4e4:	466a      	mov	r2, sp
1000a4e6:	8892      	ldrh	r2, [r2, #4]
1000a4e8:	860a      	strh	r2, [r1, #48]	; 0x30
    service->serv_chars.value_max_len = char_size * sizeof(uint8_t);
1000a4ea:	864a      	strh	r2, [r1, #50]	; 0x32
    service->serv_chars.value_permissions = (AT_BLE_ATTR_READABLE_NO_AUTHN_NO_AUTHR | AT_BLE_ATTR_WRITABLE_NO_AUTHN_NO_AUTHR); // permissions
1000a4ec:	2011      	movs	r0, #17
1000a4ee:	2234      	movs	r2, #52	; 0x34
1000a4f0:	5488      	strb	r0, [r1, r2]
    service->serv_chars.user_desc = NULL; //user defined name
1000a4f2:	638b      	str	r3, [r1, #56]	; 0x38
    service->serv_chars.user_desc_len = 0;
1000a4f4:	2200      	movs	r2, #0
1000a4f6:	878b      	strh	r3, [r1, #60]	; 0x3c
    service->serv_chars.user_desc_max_len = 0;
1000a4f8:	87cb      	strh	r3, [r1, #62]	; 0x3e
    service->serv_chars.user_desc_permissions = AT_BLE_ATTR_NO_PERMISSIONS; // user description permissions
1000a4fa:	3033      	adds	r0, #51	; 0x33
1000a4fc:	540a      	strb	r2, [r1, r0]
    service->serv_chars.client_config_permissions = AT_BLE_ATTR_NO_PERMISSIONS; // client config permissions
1000a4fe:	3001      	adds	r0, #1
1000a500:	540a      	strb	r2, [r1, r0]
    service->serv_chars.server_config_permissions = AT_BLE_ATTR_NO_PERMISSIONS; // server config permissions
1000a502:	3001      	adds	r0, #1
1000a504:	540a      	strb	r2, [r1, r0]
    service->serv_chars.user_desc_handle = 0; // user description handles
1000a506:	2248      	movs	r2, #72	; 0x48
1000a508:	528b      	strh	r3, [r1, r2]
    service->serv_chars.client_config_handle = 0; // client config handles
1000a50a:	3202      	adds	r2, #2
1000a50c:	528b      	strh	r3, [r1, r2]
    service->serv_chars.server_config_handle = 0; // server config handles
1000a50e:	3202      	adds	r2, #2
1000a510:	528b      	strh	r3, [r1, r2]
    
    service->serv_chars.presentation_format = NULL; //presentation format
1000a512:	640b      	str	r3, [r1, #64]	; 0x40
1000a514:	b003      	add	sp, #12
1000a516:	bc0c      	pop	{r2, r3}
1000a518:	4690      	mov	r8, r2
1000a51a:	4699      	mov	r9, r3
1000a51c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a51e:	46c0      	nop			; (mov r8, r8)

1000a520 <sms_button_bt0_callback>:
        gpio_disable_callback(btn1_instance.gpio_pin);
    }
}
/* Callbacks --> sending interrupt message to platform */
void sms_button_bt0_callback(void)
{
1000a520:	b510      	push	{r4, lr}
    //gpio_disable_callback(SMS_BTN_0_PIN);
    sms_current_interrupt.int_on = true;
1000a522:	4b06      	ldr	r3, [pc, #24]	; (1000a53c <sms_button_bt0_callback+0x1c>)
1000a524:	2201      	movs	r2, #1
1000a526:	705a      	strb	r2, [r3, #1]
    sms_current_interrupt.source = INT_BTN0;
1000a528:	701a      	strb	r2, [r3, #0]
    send_plf_int_msg_ind(btn0_instance.gpio_pin, GPIO_CALLBACK_RISING, NULL, 0);
1000a52a:	4b05      	ldr	r3, [pc, #20]	; (1000a540 <sms_button_bt0_callback+0x20>)
1000a52c:	7858      	ldrb	r0, [r3, #1]
1000a52e:	2300      	movs	r3, #0
1000a530:	2200      	movs	r2, #0
1000a532:	2102      	movs	r1, #2
1000a534:	4c03      	ldr	r4, [pc, #12]	; (1000a544 <sms_button_bt0_callback+0x24>)
1000a536:	47a0      	blx	r4
}
1000a538:	bd10      	pop	{r4, pc}
1000a53a:	46c0      	nop			; (mov r8, r8)
1000a53c:	1001a318 	.word	0x1001a318
1000a540:	1001a180 	.word	0x1001a180
1000a544:	1000f435 	.word	0x1000f435

1000a548 <sms_button_bt1_callback>:
void sms_button_bt1_callback(void)
{
1000a548:	b510      	push	{r4, lr}
    //gpio_disable_callback(SMS_BTN_1_PIN);
    sms_current_interrupt.int_on = true;
1000a54a:	4b06      	ldr	r3, [pc, #24]	; (1000a564 <sms_button_bt1_callback+0x1c>)
1000a54c:	2201      	movs	r2, #1
1000a54e:	705a      	strb	r2, [r3, #1]
    sms_current_interrupt.source = INT_BTN1;
1000a550:	3201      	adds	r2, #1
1000a552:	701a      	strb	r2, [r3, #0]
    send_plf_int_msg_ind(btn1_instance.gpio_pin, GPIO_CALLBACK_RISING, NULL, 0);
1000a554:	4b04      	ldr	r3, [pc, #16]	; (1000a568 <sms_button_bt1_callback+0x20>)
1000a556:	7858      	ldrb	r0, [r3, #1]
1000a558:	2300      	movs	r3, #0
1000a55a:	2200      	movs	r2, #0
1000a55c:	2102      	movs	r1, #2
1000a55e:	4c03      	ldr	r4, [pc, #12]	; (1000a56c <sms_button_bt1_callback+0x24>)
1000a560:	47a0      	blx	r4
}
1000a562:	bd10      	pop	{r4, pc}
1000a564:	1001a318 	.word	0x1001a318
1000a568:	1001a21c 	.word	0x1001a21c
1000a56c:	1000f435 	.word	0x1000f435

1000a570 <sms_button_configure_gpio>:
/* Callback functions --> doing things                                  */
/************************************************************************/

/* Initialize gpio for button inputs */
void sms_button_configure_gpio(void)
{
1000a570:	b510      	push	{r4, lr}
1000a572:	b082      	sub	sp, #8
    struct gpio_config config_gpio_pin;

    /* Button0 @ PIN_AO_GPIO_0 */
    gpio_get_config_defaults(&config_gpio_pin);
1000a574:	ac01      	add	r4, sp, #4
1000a576:	0020      	movs	r0, r4
1000a578:	4b20      	ldr	r3, [pc, #128]	; (1000a5fc <sms_button_configure_gpio+0x8c>)
1000a57a:	4798      	blx	r3
    config_gpio_pin.direction = GPIO_PIN_DIR_INPUT;
1000a57c:	2300      	movs	r3, #0
1000a57e:	7023      	strb	r3, [r4, #0]
    config_gpio_pin.input_pull = GPIO_PIN_PULL_DOWN;
1000a580:	3302      	adds	r3, #2
1000a582:	7063      	strb	r3, [r4, #1]
    config_gpio_pin.aon_wakeup = true;
1000a584:	3b01      	subs	r3, #1
1000a586:	70e3      	strb	r3, [r4, #3]
    if(gpio_pin_set_config(btn0_instance.gpio_pin, &config_gpio_pin) != STATUS_OK) {
1000a588:	4b1d      	ldr	r3, [pc, #116]	; (1000a600 <sms_button_configure_gpio+0x90>)
1000a58a:	7858      	ldrb	r0, [r3, #1]
1000a58c:	0021      	movs	r1, r4
1000a58e:	4b1d      	ldr	r3, [pc, #116]	; (1000a604 <sms_button_configure_gpio+0x94>)
1000a590:	4798      	blx	r3
1000a592:	2800      	cmp	r0, #0
1000a594:	d005      	beq.n	1000a5a2 <sms_button_configure_gpio+0x32>
        DBG_LOG_DEV("[sms_button_configure]\tproblem while setting up button0");
1000a596:	481c      	ldr	r0, [pc, #112]	; (1000a608 <sms_button_configure_gpio+0x98>)
1000a598:	4b1c      	ldr	r3, [pc, #112]	; (1000a60c <sms_button_configure_gpio+0x9c>)
1000a59a:	4798      	blx	r3
1000a59c:	481c      	ldr	r0, [pc, #112]	; (1000a610 <sms_button_configure_gpio+0xa0>)
1000a59e:	4b1d      	ldr	r3, [pc, #116]	; (1000a614 <sms_button_configure_gpio+0xa4>)
1000a5a0:	4798      	blx	r3
    }
    
    /* Button1 @ PIN_AO_GPIO_2 */
    gpio_get_config_defaults(&config_gpio_pin);
1000a5a2:	ac01      	add	r4, sp, #4
1000a5a4:	0020      	movs	r0, r4
1000a5a6:	4b15      	ldr	r3, [pc, #84]	; (1000a5fc <sms_button_configure_gpio+0x8c>)
1000a5a8:	4798      	blx	r3
    config_gpio_pin.direction = GPIO_PIN_DIR_INPUT;
1000a5aa:	2300      	movs	r3, #0
1000a5ac:	7023      	strb	r3, [r4, #0]
    config_gpio_pin.input_pull = GPIO_PIN_PULL_DOWN;
1000a5ae:	3302      	adds	r3, #2
1000a5b0:	7063      	strb	r3, [r4, #1]
    config_gpio_pin.aon_wakeup = true;
1000a5b2:	3b01      	subs	r3, #1
1000a5b4:	70e3      	strb	r3, [r4, #3]
    if(gpio_pin_set_config(btn1_instance.gpio_pin, &config_gpio_pin) != STATUS_OK) {
1000a5b6:	4b18      	ldr	r3, [pc, #96]	; (1000a618 <sms_button_configure_gpio+0xa8>)
1000a5b8:	7858      	ldrb	r0, [r3, #1]
1000a5ba:	0021      	movs	r1, r4
1000a5bc:	4b11      	ldr	r3, [pc, #68]	; (1000a604 <sms_button_configure_gpio+0x94>)
1000a5be:	4798      	blx	r3
1000a5c0:	2800      	cmp	r0, #0
1000a5c2:	d005      	beq.n	1000a5d0 <sms_button_configure_gpio+0x60>
        DBG_LOG("[sms_button_configure]\tProblem while setting up button1");
1000a5c4:	4810      	ldr	r0, [pc, #64]	; (1000a608 <sms_button_configure_gpio+0x98>)
1000a5c6:	4b11      	ldr	r3, [pc, #68]	; (1000a60c <sms_button_configure_gpio+0x9c>)
1000a5c8:	4798      	blx	r3
1000a5ca:	4814      	ldr	r0, [pc, #80]	; (1000a61c <sms_button_configure_gpio+0xac>)
1000a5cc:	4b11      	ldr	r3, [pc, #68]	; (1000a614 <sms_button_configure_gpio+0xa4>)
1000a5ce:	4798      	blx	r3
    }

    /* Button 0 on SAMB11 XPLAINED */
    gpio_get_config_defaults(&config_gpio_pin);
1000a5d0:	ac01      	add	r4, sp, #4
1000a5d2:	0020      	movs	r0, r4
1000a5d4:	4b09      	ldr	r3, [pc, #36]	; (1000a5fc <sms_button_configure_gpio+0x8c>)
1000a5d6:	4798      	blx	r3
    config_gpio_pin.direction = GPIO_PIN_DIR_INPUT;
1000a5d8:	2300      	movs	r3, #0
1000a5da:	7023      	strb	r3, [r4, #0]
    config_gpio_pin.input_pull = GPIO_PIN_PULL_NONE;
1000a5dc:	7063      	strb	r3, [r4, #1]
    if(gpio_pin_set_config(BUTTON_0_PIN, &config_gpio_pin) != STATUS_OK) {
1000a5de:	0021      	movs	r1, r4
1000a5e0:	2017      	movs	r0, #23
1000a5e2:	4b08      	ldr	r3, [pc, #32]	; (1000a604 <sms_button_configure_gpio+0x94>)
1000a5e4:	4798      	blx	r3
1000a5e6:	2800      	cmp	r0, #0
1000a5e8:	d005      	beq.n	1000a5f6 <sms_button_configure_gpio+0x86>
        DBG_LOG("[sms_button_configure]\tProblem while setting up XPLAINED user button");
1000a5ea:	4807      	ldr	r0, [pc, #28]	; (1000a608 <sms_button_configure_gpio+0x98>)
1000a5ec:	4b07      	ldr	r3, [pc, #28]	; (1000a60c <sms_button_configure_gpio+0x9c>)
1000a5ee:	4798      	blx	r3
1000a5f0:	480b      	ldr	r0, [pc, #44]	; (1000a620 <sms_button_configure_gpio+0xb0>)
1000a5f2:	4b08      	ldr	r3, [pc, #32]	; (1000a614 <sms_button_configure_gpio+0xa4>)
1000a5f4:	4798      	blx	r3
    }
}
1000a5f6:	b002      	add	sp, #8
1000a5f8:	bd10      	pop	{r4, pc}
1000a5fa:	46c0      	nop			; (mov r8, r8)
1000a5fc:	1000c171 	.word	0x1000c171
1000a600:	1001a180 	.word	0x1001a180
1000a604:	1000c181 	.word	0x1000c181
1000a608:	10016660 	.word	0x10016660
1000a60c:	100154a1 	.word	0x100154a1
1000a610:	10016c78 	.word	0x10016c78
1000a614:	10015381 	.word	0x10015381
1000a618:	1001a21c 	.word	0x1001a21c
1000a61c:	10016cb0 	.word	0x10016cb0
1000a620:	10016ce8 	.word	0x10016ce8

1000a624 <sms_button_register_callbacks>:

/* Register button input callbacks */
void sms_button_register_callbacks(void)
{
1000a624:	b510      	push	{r4, lr}
    /* Button0 callback */
    gpio_register_callback(btn0_instance.gpio_pin, sms_button_bt0_callback, GPIO_CALLBACK_RISING);
1000a626:	4b06      	ldr	r3, [pc, #24]	; (1000a640 <sms_button_register_callbacks+0x1c>)
1000a628:	7858      	ldrb	r0, [r3, #1]
1000a62a:	2202      	movs	r2, #2
1000a62c:	4905      	ldr	r1, [pc, #20]	; (1000a644 <sms_button_register_callbacks+0x20>)
1000a62e:	4c06      	ldr	r4, [pc, #24]	; (1000a648 <sms_button_register_callbacks+0x24>)
1000a630:	47a0      	blx	r4
    //gpio_enable_callback(SMS_BTN_0_PIN);
    
    /* Button1 callback */
    gpio_register_callback(btn1_instance.gpio_pin, sms_button_bt1_callback, GPIO_CALLBACK_RISING);
1000a632:	4b06      	ldr	r3, [pc, #24]	; (1000a64c <sms_button_register_callbacks+0x28>)
1000a634:	7858      	ldrb	r0, [r3, #1]
1000a636:	2202      	movs	r2, #2
1000a638:	4905      	ldr	r1, [pc, #20]	; (1000a650 <sms_button_register_callbacks+0x2c>)
1000a63a:	47a0      	blx	r4
    //gpio_enable_callback(SMS_BTN_1_PIN);
    
    /* User button callback */
}
1000a63c:	bd10      	pop	{r4, pc}
1000a63e:	46c0      	nop			; (mov r8, r8)
1000a640:	1001a180 	.word	0x1001a180
1000a644:	1000a521 	.word	0x1000a521
1000a648:	1000c5b1 	.word	0x1000c5b1
1000a64c:	1001a21c 	.word	0x1001a21c
1000a650:	1000a549 	.word	0x1000a549

1000a654 <sms_button_get_state>:
    gpio_disable_callback(SMS_BTN_1_PIN);
}

/* Get current buttons state */
enum sms_button_state sms_button_get_state(void)
{
1000a654:	b570      	push	{r4, r5, r6, lr}
    bool b0 = gpio_pin_get_input_level(SMS_BTN_0_PIN);
1000a656:	201f      	movs	r0, #31
1000a658:	4d0c      	ldr	r5, [pc, #48]	; (1000a68c <sms_button_get_state+0x38>)
1000a65a:	47a8      	blx	r5
1000a65c:	0004      	movs	r4, r0
    bool b1 = gpio_pin_get_input_level(SMS_BTN_1_PIN);
1000a65e:	201d      	movs	r0, #29
1000a660:	47a8      	blx	r5
1000a662:	0005      	movs	r5, r0
1000a664:	0006      	movs	r6, r0
    DBG_LOG("[sms_button_get_state]\t\tButton state: %d %d", b1, b0);
1000a666:	480a      	ldr	r0, [pc, #40]	; (1000a690 <sms_button_get_state+0x3c>)
1000a668:	4b0a      	ldr	r3, [pc, #40]	; (1000a694 <sms_button_get_state+0x40>)
1000a66a:	4798      	blx	r3
1000a66c:	0022      	movs	r2, r4
1000a66e:	0029      	movs	r1, r5
1000a670:	4809      	ldr	r0, [pc, #36]	; (1000a698 <sms_button_get_state+0x44>)
1000a672:	4b0a      	ldr	r3, [pc, #40]	; (1000a69c <sms_button_get_state+0x48>)
1000a674:	4798      	blx	r3
    if(b0 && b1) return BUTTON_STATE_BOTH;
1000a676:	2c00      	cmp	r4, #0
1000a678:	d004      	beq.n	1000a684 <sms_button_get_state+0x30>
1000a67a:	2003      	movs	r0, #3
1000a67c:	2d00      	cmp	r5, #0
1000a67e:	d104      	bne.n	1000a68a <sms_button_get_state+0x36>
    else if(b0 && !b1) return BUTTON_STATE_B0;
1000a680:	3802      	subs	r0, #2
1000a682:	e002      	b.n	1000a68a <sms_button_get_state+0x36>
    else if(!b0 && b1) return BUTTON_STATE_B1;
    else return BUTTON_STATE_NONE;
1000a684:	1e70      	subs	r0, r6, #1
1000a686:	4186      	sbcs	r6, r0
1000a688:	0070      	lsls	r0, r6, #1
}
1000a68a:	bd70      	pop	{r4, r5, r6, pc}
1000a68c:	1000c339 	.word	0x1000c339
1000a690:	10016660 	.word	0x10016660
1000a694:	100154a1 	.word	0x100154a1
1000a698:	10016d30 	.word	0x10016d30
1000a69c:	10015381 	.word	0x10015381

1000a6a0 <sms_button_fn>:
/************************************************************************/
/* Callback functions --> doing things                                  */
/************************************************************************/
/* BUTTON_0 */
int sms_button_fn(enum sms_btn_ids btn)
{
1000a6a0:	b570      	push	{r4, r5, r6, lr}
1000a6a2:	0005      	movs	r5, r0
    button_instance.previous_state = button_instance.current_state;
1000a6a4:	4c78      	ldr	r4, [pc, #480]	; (1000a888 <sms_button_fn+0x1e8>)
1000a6a6:	7863      	ldrb	r3, [r4, #1]
1000a6a8:	7023      	strb	r3, [r4, #0]
    button_instance.current_state = sms_button_get_state();
1000a6aa:	4b78      	ldr	r3, [pc, #480]	; (1000a88c <sms_button_fn+0x1ec>)
1000a6ac:	4798      	blx	r3
1000a6ae:	7060      	strb	r0, [r4, #1]
    
    if(btn == SMS_BTN_0) sms_monitor_get_states("[sms_button_fn]-0");
1000a6b0:	2d00      	cmp	r5, #0
1000a6b2:	d103      	bne.n	1000a6bc <sms_button_fn+0x1c>
1000a6b4:	4876      	ldr	r0, [pc, #472]	; (1000a890 <sms_button_fn+0x1f0>)
1000a6b6:	4b77      	ldr	r3, [pc, #476]	; (1000a894 <sms_button_fn+0x1f4>)
1000a6b8:	4798      	blx	r3
1000a6ba:	e005      	b.n	1000a6c8 <sms_button_fn+0x28>
    else if(btn == SMS_BTN_1) sms_monitor_get_states("[sms_button_fn]-1");
1000a6bc:	2d01      	cmp	r5, #1
1000a6be:	d000      	beq.n	1000a6c2 <sms_button_fn+0x22>
1000a6c0:	e0d4      	b.n	1000a86c <sms_button_fn+0x1cc>
1000a6c2:	4875      	ldr	r0, [pc, #468]	; (1000a898 <sms_button_fn+0x1f8>)
1000a6c4:	4b73      	ldr	r3, [pc, #460]	; (1000a894 <sms_button_fn+0x1f4>)
1000a6c6:	4798      	blx	r3
    else return -1;
    
    switch(button_instance.current_state) {
1000a6c8:	4b6f      	ldr	r3, [pc, #444]	; (1000a888 <sms_button_fn+0x1e8>)
1000a6ca:	785b      	ldrb	r3, [r3, #1]
1000a6cc:	2b01      	cmp	r3, #1
1000a6ce:	d008      	beq.n	1000a6e2 <sms_button_fn+0x42>
1000a6d0:	2b00      	cmp	r3, #0
1000a6d2:	d100      	bne.n	1000a6d6 <sms_button_fn+0x36>
1000a6d4:	e0c5      	b.n	1000a862 <sms_button_fn+0x1c2>
1000a6d6:	2b02      	cmp	r3, #2
1000a6d8:	d04b      	beq.n	1000a772 <sms_button_fn+0xd2>
1000a6da:	2b03      	cmp	r3, #3
1000a6dc:	d100      	bne.n	1000a6e0 <sms_button_fn+0x40>
1000a6de:	e08f      	b.n	1000a800 <sms_button_fn+0x160>
1000a6e0:	e0c7      	b.n	1000a872 <sms_button_fn+0x1d2>
        // --- current state ---
        case BUTTON_STATE_B0:
        switch(ble_current_state) {
1000a6e2:	4b6e      	ldr	r3, [pc, #440]	; (1000a89c <sms_button_fn+0x1fc>)
1000a6e4:	781b      	ldrb	r3, [r3, #0]
1000a6e6:	b2db      	uxtb	r3, r3
1000a6e8:	2b00      	cmp	r3, #0
1000a6ea:	d003      	beq.n	1000a6f4 <sms_button_fn+0x54>
1000a6ec:	3b22      	subs	r3, #34	; 0x22
1000a6ee:	2b01      	cmp	r3, #1
1000a6f0:	d836      	bhi.n	1000a760 <sms_button_fn+0xc0>
1000a6f2:	e00e      	b.n	1000a712 <sms_button_fn+0x72>
            case BLE_STATE_POWEROFF:
            timer1_current_mode = TIMER1_MODE_STARTUP;
1000a6f4:	2201      	movs	r2, #1
1000a6f6:	4b6a      	ldr	r3, [pc, #424]	; (1000a8a0 <sms_button_fn+0x200>)
1000a6f8:	701a      	strb	r2, [r3, #0]
            timer2_current_mode = TIMER2_MODE_NONE;
1000a6fa:	2300      	movs	r3, #0
1000a6fc:	4a69      	ldr	r2, [pc, #420]	; (1000a8a4 <sms_button_fn+0x204>)
1000a6fe:	7013      	strb	r3, [r2, #0]
            sms_btn_cnt = 0;
1000a700:	4a69      	ldr	r2, [pc, #420]	; (1000a8a8 <sms_button_fn+0x208>)
1000a702:	7013      	strb	r3, [r2, #0]
            //ulp_ready = false;
            sms_dualtimer_start(TIMER_UNIT_MS, SMS_BTN_STARTUP_MS, DUALTIMER_TIMER1);
1000a704:	2200      	movs	r2, #0
1000a706:	21fa      	movs	r1, #250	; 0xfa
1000a708:	2001      	movs	r0, #1
1000a70a:	4b68      	ldr	r3, [pc, #416]	; (1000a8ac <sms_button_fn+0x20c>)
1000a70c:	4798      	blx	r3
        ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
1000a70e:	2000      	movs	r0, #0
            timer1_current_mode = TIMER1_MODE_STARTUP;
            timer2_current_mode = TIMER2_MODE_NONE;
            sms_btn_cnt = 0;
            //ulp_ready = false;
            sms_dualtimer_start(TIMER_UNIT_MS, SMS_BTN_STARTUP_MS, DUALTIMER_TIMER1);
            break;
1000a710:	e0b9      	b.n	1000a886 <sms_button_fn+0x1e6>
            
            case BLE_STATE_PAIRED:
            case BLE_STATE_INDICATING:
            if(pressure_device.state == PRESSURE_STATE_STDBY) {
1000a712:	2328      	movs	r3, #40	; 0x28
1000a714:	4a66      	ldr	r2, [pc, #408]	; (1000a8b0 <sms_button_fn+0x210>)
1000a716:	5cd3      	ldrb	r3, [r2, r3]
1000a718:	2b01      	cmp	r3, #1
1000a71a:	d109      	bne.n	1000a730 <sms_button_fn+0x90>
                DBG_LOG_DEV("[sms_button_fn]\t\tStarting sensors (B0)");
1000a71c:	4865      	ldr	r0, [pc, #404]	; (1000a8b4 <sms_button_fn+0x214>)
1000a71e:	4b66      	ldr	r3, [pc, #408]	; (1000a8b8 <sms_button_fn+0x218>)
1000a720:	4798      	blx	r3
1000a722:	4866      	ldr	r0, [pc, #408]	; (1000a8bc <sms_button_fn+0x21c>)
1000a724:	4b66      	ldr	r3, [pc, #408]	; (1000a8c0 <sms_button_fn+0x220>)
1000a726:	4798      	blx	r3
                sms_sensors_interrupt_toggle(false, true);
1000a728:	2101      	movs	r1, #1
1000a72a:	2000      	movs	r0, #0
1000a72c:	4b65      	ldr	r3, [pc, #404]	; (1000a8c4 <sms_button_fn+0x224>)
1000a72e:	4798      	blx	r3
            }
            timer1_current_mode = TIMER1_MODE_NONE;
1000a730:	2300      	movs	r3, #0
1000a732:	4a5b      	ldr	r2, [pc, #364]	; (1000a8a0 <sms_button_fn+0x200>)
1000a734:	7013      	strb	r3, [r2, #0]
            timer2_current_mode = TIMER2_MODE_NONE;
1000a736:	4a5b      	ldr	r2, [pc, #364]	; (1000a8a4 <sms_button_fn+0x204>)
1000a738:	7013      	strb	r3, [r2, #0]
            if(btn == btn0_instance.id) sms_ble_send_characteristic(BLE_CHAR_BTN0);
1000a73a:	4b63      	ldr	r3, [pc, #396]	; (1000a8c8 <sms_button_fn+0x228>)
1000a73c:	781b      	ldrb	r3, [r3, #0]
1000a73e:	42ab      	cmp	r3, r5
1000a740:	d104      	bne.n	1000a74c <sms_button_fn+0xac>
1000a742:	2000      	movs	r0, #0
1000a744:	4b61      	ldr	r3, [pc, #388]	; (1000a8cc <sms_button_fn+0x22c>)
1000a746:	4798      	blx	r3
        ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
1000a748:	2000      	movs	r0, #0
1000a74a:	e09c      	b.n	1000a886 <sms_button_fn+0x1e6>
                sms_sensors_interrupt_toggle(false, true);
            }
            timer1_current_mode = TIMER1_MODE_NONE;
            timer2_current_mode = TIMER2_MODE_NONE;
            if(btn == btn0_instance.id) sms_ble_send_characteristic(BLE_CHAR_BTN0);
            else if(btn == btn1_instance.id) sms_ble_send_characteristic(BLE_CHAR_BTN1);
1000a74c:	4b60      	ldr	r3, [pc, #384]	; (1000a8d0 <sms_button_fn+0x230>)
1000a74e:	781b      	ldrb	r3, [r3, #0]
1000a750:	42ab      	cmp	r3, r5
1000a752:	d000      	beq.n	1000a756 <sms_button_fn+0xb6>
1000a754:	e08f      	b.n	1000a876 <sms_button_fn+0x1d6>
1000a756:	2001      	movs	r0, #1
1000a758:	4b5c      	ldr	r3, [pc, #368]	; (1000a8cc <sms_button_fn+0x22c>)
1000a75a:	4798      	blx	r3
        ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
1000a75c:	2000      	movs	r0, #0
1000a75e:	e092      	b.n	1000a886 <sms_button_fn+0x1e6>
            
            case BLE_STATE_DISCONNECTED:
            case BLE_STATE_ADVERTISING:
            case BLE_STATE_CONNECTED:
            default:
            DBG_LOG_DEV("[sms_button_fn]\t\t\tNot used states...");
1000a760:	4854      	ldr	r0, [pc, #336]	; (1000a8b4 <sms_button_fn+0x214>)
1000a762:	4b55      	ldr	r3, [pc, #340]	; (1000a8b8 <sms_button_fn+0x218>)
1000a764:	4798      	blx	r3
1000a766:	485b      	ldr	r0, [pc, #364]	; (1000a8d4 <sms_button_fn+0x234>)
1000a768:	4b55      	ldr	r3, [pc, #340]	; (1000a8c0 <sms_button_fn+0x220>)
1000a76a:	4798      	blx	r3
            return -1;
1000a76c:	2001      	movs	r0, #1
1000a76e:	4240      	negs	r0, r0
1000a770:	e089      	b.n	1000a886 <sms_button_fn+0x1e6>
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        break;
        
        // --- current state ---
        case BUTTON_STATE_B1:
        switch(ble_current_state) {
1000a772:	4b4a      	ldr	r3, [pc, #296]	; (1000a89c <sms_button_fn+0x1fc>)
1000a774:	781b      	ldrb	r3, [r3, #0]
1000a776:	b2db      	uxtb	r3, r3
1000a778:	2b22      	cmp	r3, #34	; 0x22
1000a77a:	d012      	beq.n	1000a7a2 <sms_button_fn+0x102>
1000a77c:	2b23      	cmp	r3, #35	; 0x23
1000a77e:	d036      	beq.n	1000a7ee <sms_button_fn+0x14e>
1000a780:	2b00      	cmp	r3, #0
1000a782:	d17b      	bne.n	1000a87c <sms_button_fn+0x1dc>
            case BLE_STATE_POWEROFF:
            timer1_current_mode = TIMER1_MODE_STARTUP;
1000a784:	2201      	movs	r2, #1
1000a786:	4b46      	ldr	r3, [pc, #280]	; (1000a8a0 <sms_button_fn+0x200>)
1000a788:	701a      	strb	r2, [r3, #0]
            timer2_current_mode = TIMER2_MODE_NONE;
1000a78a:	2300      	movs	r3, #0
1000a78c:	4a45      	ldr	r2, [pc, #276]	; (1000a8a4 <sms_button_fn+0x204>)
1000a78e:	7013      	strb	r3, [r2, #0]
            sms_btn_cnt = 0;
1000a790:	4a45      	ldr	r2, [pc, #276]	; (1000a8a8 <sms_button_fn+0x208>)
1000a792:	7013      	strb	r3, [r2, #0]
            //ulp_ready = false;
            sms_dualtimer_start(TIMER_UNIT_MS, SMS_BTN_STARTUP_MS, DUALTIMER_TIMER1);
1000a794:	2200      	movs	r2, #0
1000a796:	21fa      	movs	r1, #250	; 0xfa
1000a798:	2001      	movs	r0, #1
1000a79a:	4b44      	ldr	r3, [pc, #272]	; (1000a8ac <sms_button_fn+0x20c>)
1000a79c:	4798      	blx	r3
        ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
1000a79e:	2000      	movs	r0, #0
            timer1_current_mode = TIMER1_MODE_STARTUP;
            timer2_current_mode = TIMER2_MODE_NONE;
            sms_btn_cnt = 0;
            //ulp_ready = false;
            sms_dualtimer_start(TIMER_UNIT_MS, SMS_BTN_STARTUP_MS, DUALTIMER_TIMER1);
            break;
1000a7a0:	e071      	b.n	1000a886 <sms_button_fn+0x1e6>
            
            case BLE_STATE_PAIRED:
            if(pressure_device.state == PRESSURE_STATE_STDBY) {
1000a7a2:	2328      	movs	r3, #40	; 0x28
1000a7a4:	4a42      	ldr	r2, [pc, #264]	; (1000a8b0 <sms_button_fn+0x210>)
1000a7a6:	5cd3      	ldrb	r3, [r2, r3]
1000a7a8:	2b01      	cmp	r3, #1
1000a7aa:	d109      	bne.n	1000a7c0 <sms_button_fn+0x120>
                DBG_LOG_DEV("[sms_button_fn]\t\tStarting sensors (B1)");
1000a7ac:	4841      	ldr	r0, [pc, #260]	; (1000a8b4 <sms_button_fn+0x214>)
1000a7ae:	4b42      	ldr	r3, [pc, #264]	; (1000a8b8 <sms_button_fn+0x218>)
1000a7b0:	4798      	blx	r3
1000a7b2:	4849      	ldr	r0, [pc, #292]	; (1000a8d8 <sms_button_fn+0x238>)
1000a7b4:	4b42      	ldr	r3, [pc, #264]	; (1000a8c0 <sms_button_fn+0x220>)
1000a7b6:	4798      	blx	r3
                sms_sensors_interrupt_toggle(false, true);
1000a7b8:	2101      	movs	r1, #1
1000a7ba:	2000      	movs	r0, #0
1000a7bc:	4b41      	ldr	r3, [pc, #260]	; (1000a8c4 <sms_button_fn+0x224>)
1000a7be:	4798      	blx	r3
            }
            timer1_current_mode = TIMER1_MODE_NONE;
1000a7c0:	2300      	movs	r3, #0
1000a7c2:	4a37      	ldr	r2, [pc, #220]	; (1000a8a0 <sms_button_fn+0x200>)
1000a7c4:	7013      	strb	r3, [r2, #0]
            timer2_current_mode = TIMER2_MODE_NONE;
1000a7c6:	4a37      	ldr	r2, [pc, #220]	; (1000a8a4 <sms_button_fn+0x204>)
1000a7c8:	7013      	strb	r3, [r2, #0]
            //sms_ble_ind_retry = 0;
            if(btn == btn0_instance.id) sms_ble_send_characteristic(BLE_CHAR_BTN0);
1000a7ca:	4b3f      	ldr	r3, [pc, #252]	; (1000a8c8 <sms_button_fn+0x228>)
1000a7cc:	781b      	ldrb	r3, [r3, #0]
1000a7ce:	42ab      	cmp	r3, r5
1000a7d0:	d104      	bne.n	1000a7dc <sms_button_fn+0x13c>
1000a7d2:	2000      	movs	r0, #0
1000a7d4:	4b3d      	ldr	r3, [pc, #244]	; (1000a8cc <sms_button_fn+0x22c>)
1000a7d6:	4798      	blx	r3
        ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
1000a7d8:	2000      	movs	r0, #0
1000a7da:	e054      	b.n	1000a886 <sms_button_fn+0x1e6>
            }
            timer1_current_mode = TIMER1_MODE_NONE;
            timer2_current_mode = TIMER2_MODE_NONE;
            //sms_ble_ind_retry = 0;
            if(btn == btn0_instance.id) sms_ble_send_characteristic(BLE_CHAR_BTN0);
            else if(btn == btn1_instance.id) sms_ble_send_characteristic(BLE_CHAR_BTN1);
1000a7dc:	4b3c      	ldr	r3, [pc, #240]	; (1000a8d0 <sms_button_fn+0x230>)
1000a7de:	781b      	ldrb	r3, [r3, #0]
1000a7e0:	42ab      	cmp	r3, r5
1000a7e2:	d14e      	bne.n	1000a882 <sms_button_fn+0x1e2>
1000a7e4:	2001      	movs	r0, #1
1000a7e6:	4b39      	ldr	r3, [pc, #228]	; (1000a8cc <sms_button_fn+0x22c>)
1000a7e8:	4798      	blx	r3
        ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
1000a7ea:	2000      	movs	r0, #0
1000a7ec:	e04b      	b.n	1000a886 <sms_button_fn+0x1e6>
            else if(btn == btn1_instance.id) sms_ble_send_characteristic(BLE_CHAR_BTN1);
            else return -1;
            break;
            
            case BLE_STATE_INDICATING:
            DBG_LOG_DEV("[sms_button_fn]\tStill indicating...");
1000a7ee:	4831      	ldr	r0, [pc, #196]	; (1000a8b4 <sms_button_fn+0x214>)
1000a7f0:	4b31      	ldr	r3, [pc, #196]	; (1000a8b8 <sms_button_fn+0x218>)
1000a7f2:	4798      	blx	r3
1000a7f4:	4839      	ldr	r0, [pc, #228]	; (1000a8dc <sms_button_fn+0x23c>)
1000a7f6:	4b32      	ldr	r3, [pc, #200]	; (1000a8c0 <sms_button_fn+0x220>)
1000a7f8:	4798      	blx	r3
            return -1;
1000a7fa:	2001      	movs	r0, #1
1000a7fc:	4240      	negs	r0, r0
1000a7fe:	e042      	b.n	1000a886 <sms_button_fn+0x1e6>
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        break;
        
        // --- current state ---
        case BUTTON_STATE_BOTH:
        if(ble_current_state == BLE_STATE_POWEROFF) {
1000a800:	4b26      	ldr	r3, [pc, #152]	; (1000a89c <sms_button_fn+0x1fc>)
1000a802:	781b      	ldrb	r3, [r3, #0]
1000a804:	2b00      	cmp	r3, #0
1000a806:	d108      	bne.n	1000a81a <sms_button_fn+0x17a>
            timer1_current_mode = TIMER1_MODE_NONE;
1000a808:	4a25      	ldr	r2, [pc, #148]	; (1000a8a0 <sms_button_fn+0x200>)
1000a80a:	7013      	strb	r3, [r2, #0]
            timer2_current_mode = TIMER2_MODE_NONE;
1000a80c:	4a25      	ldr	r2, [pc, #148]	; (1000a8a4 <sms_button_fn+0x204>)
1000a80e:	7013      	strb	r3, [r2, #0]
            ulp_ready = true;
1000a810:	2201      	movs	r2, #1
1000a812:	4b33      	ldr	r3, [pc, #204]	; (1000a8e0 <sms_button_fn+0x240>)
1000a814:	701a      	strb	r2, [r3, #0]
        ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
1000a816:	2000      	movs	r0, #0
1000a818:	e035      	b.n	1000a886 <sms_button_fn+0x1e6>
            ulp_ready = true;
            //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
            //release_sleep_lock();
        }
        else {
            if((ble_current_state == BLE_STATE_PAIRED) || (ble_current_state == BLE_STATE_INDICATING)) {
1000a81a:	4b20      	ldr	r3, [pc, #128]	; (1000a89c <sms_button_fn+0x1fc>)
1000a81c:	781b      	ldrb	r3, [r3, #0]
1000a81e:	2b22      	cmp	r3, #34	; 0x22
1000a820:	d003      	beq.n	1000a82a <sms_button_fn+0x18a>
1000a822:	4b1e      	ldr	r3, [pc, #120]	; (1000a89c <sms_button_fn+0x1fc>)
1000a824:	781b      	ldrb	r3, [r3, #0]
1000a826:	2b23      	cmp	r3, #35	; 0x23
1000a828:	d104      	bne.n	1000a834 <sms_button_fn+0x194>
                pressure_device.state = PRESSURE_STATE_STDBY;
1000a82a:	2101      	movs	r1, #1
1000a82c:	2328      	movs	r3, #40	; 0x28
1000a82e:	4a20      	ldr	r2, [pc, #128]	; (1000a8b0 <sms_button_fn+0x210>)
1000a830:	54d1      	strb	r1, [r2, r3]
1000a832:	e003      	b.n	1000a83c <sms_button_fn+0x19c>
            }
            else {
                pressure_device.state = PRESSURE_STATE_OFF;
1000a834:	2100      	movs	r1, #0
1000a836:	2328      	movs	r3, #40	; 0x28
1000a838:	4a1d      	ldr	r2, [pc, #116]	; (1000a8b0 <sms_button_fn+0x210>)
1000a83a:	54d1      	strb	r1, [r2, r3]
            }
            sms_sensors_interrupt_toggle(false, false);
1000a83c:	2100      	movs	r1, #0
1000a83e:	2000      	movs	r0, #0
1000a840:	4b20      	ldr	r3, [pc, #128]	; (1000a8c4 <sms_button_fn+0x224>)
1000a842:	4798      	blx	r3
            timer1_current_mode = TIMER1_MODE_SHUTDOWN;
1000a844:	2202      	movs	r2, #2
1000a846:	4b16      	ldr	r3, [pc, #88]	; (1000a8a0 <sms_button_fn+0x200>)
1000a848:	701a      	strb	r2, [r3, #0]
            timer2_current_mode = TIMER2_MODE_NONE;
1000a84a:	2300      	movs	r3, #0
1000a84c:	4a15      	ldr	r2, [pc, #84]	; (1000a8a4 <sms_button_fn+0x204>)
1000a84e:	7013      	strb	r3, [r2, #0]
            sms_btn_cnt = 0;
1000a850:	4a15      	ldr	r2, [pc, #84]	; (1000a8a8 <sms_button_fn+0x208>)
1000a852:	7013      	strb	r3, [r2, #0]
            //ulp_ready = false;
            sms_dualtimer_start(TIMER_UNIT_MS, SMS_BTN_SHTDWN_MS, DUALTIMER_TIMER1);
1000a854:	2200      	movs	r2, #0
1000a856:	21fa      	movs	r1, #250	; 0xfa
1000a858:	2001      	movs	r0, #1
1000a85a:	4b14      	ldr	r3, [pc, #80]	; (1000a8ac <sms_button_fn+0x20c>)
1000a85c:	4798      	blx	r3
        ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
1000a85e:	2000      	movs	r0, #0
1000a860:	e011      	b.n	1000a886 <sms_button_fn+0x1e6>
        }
        break;
        
        // --- current state ---
        case BUTTON_STATE_NONE:
        ulp_ready = true;
1000a862:	2201      	movs	r2, #1
1000a864:	4b1e      	ldr	r3, [pc, #120]	; (1000a8e0 <sms_button_fn+0x240>)
1000a866:	701a      	strb	r2, [r3, #0]
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
1000a868:	2000      	movs	r0, #0
        // --- current state ---
        case BUTTON_STATE_NONE:
        ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
1000a86a:	e00c      	b.n	1000a886 <sms_button_fn+0x1e6>
    button_instance.previous_state = button_instance.current_state;
    button_instance.current_state = sms_button_get_state();
    
    if(btn == SMS_BTN_0) sms_monitor_get_states("[sms_button_fn]-0");
    else if(btn == SMS_BTN_1) sms_monitor_get_states("[sms_button_fn]-1");
    else return -1;
1000a86c:	2001      	movs	r0, #1
1000a86e:	4240      	negs	r0, r0
1000a870:	e009      	b.n	1000a886 <sms_button_fn+0x1e6>
        ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
1000a872:	2000      	movs	r0, #0
1000a874:	e007      	b.n	1000a886 <sms_button_fn+0x1e6>
            }
            timer1_current_mode = TIMER1_MODE_NONE;
            timer2_current_mode = TIMER2_MODE_NONE;
            if(btn == btn0_instance.id) sms_ble_send_characteristic(BLE_CHAR_BTN0);
            else if(btn == btn1_instance.id) sms_ble_send_characteristic(BLE_CHAR_BTN1);
            else return -1;
1000a876:	2001      	movs	r0, #1
1000a878:	4240      	negs	r0, r0
1000a87a:	e004      	b.n	1000a886 <sms_button_fn+0x1e6>
            
            case BLE_STATE_DISCONNECTED:
            case BLE_STATE_ADVERTISING:
            case BLE_STATE_CONNECTED:
            default:
            return -1;
1000a87c:	2001      	movs	r0, #1
1000a87e:	4240      	negs	r0, r0
1000a880:	e001      	b.n	1000a886 <sms_button_fn+0x1e6>
            timer1_current_mode = TIMER1_MODE_NONE;
            timer2_current_mode = TIMER2_MODE_NONE;
            //sms_ble_ind_retry = 0;
            if(btn == btn0_instance.id) sms_ble_send_characteristic(BLE_CHAR_BTN0);
            else if(btn == btn1_instance.id) sms_ble_send_characteristic(BLE_CHAR_BTN1);
            else return -1;
1000a882:	2001      	movs	r0, #1
1000a884:	4240      	negs	r0, r0
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
}
1000a886:	bd70      	pop	{r4, r5, r6, pc}
1000a888:	1001a220 	.word	0x1001a220
1000a88c:	1000a655 	.word	0x1000a655
1000a890:	10016d5c 	.word	0x10016d5c
1000a894:	1000a9e9 	.word	0x1000a9e9
1000a898:	10016d70 	.word	0x10016d70
1000a89c:	1001a330 	.word	0x1001a330
1000a8a0:	1001a184 	.word	0x1001a184
1000a8a4:	1001a331 	.word	0x1001a331
1000a8a8:	1001a34e 	.word	0x1001a34e
1000a8ac:	1000b6b9 	.word	0x1000b6b9
1000a8b0:	1001a294 	.word	0x1001a294
1000a8b4:	10016660 	.word	0x10016660
1000a8b8:	100154a1 	.word	0x100154a1
1000a8bc:	10016d84 	.word	0x10016d84
1000a8c0:	10015381 	.word	0x10015381
1000a8c4:	1000b409 	.word	0x1000b409
1000a8c8:	1001a180 	.word	0x1001a180
1000a8cc:	1000a261 	.word	0x1000a261
1000a8d0:	1001a21c 	.word	0x1001a21c
1000a8d4:	10016dac 	.word	0x10016dac
1000a8d8:	10016dd4 	.word	0x10016dd4
1000a8dc:	10016dfc 	.word	0x10016dfc
1000a8e0:	1001a219 	.word	0x1001a219

1000a8e4 <sms_button_toggle_interrupt>:
    else return BUTTON_STATE_NONE;
}

/* En- or disable button interrupts */
void sms_button_toggle_interrupt(enum sms_btn_int_tog tog0, enum sms_btn_int_tog tog1)
{
1000a8e4:	b510      	push	{r4, lr}
1000a8e6:	000c      	movs	r4, r1
    if(tog0 == SMS_BTN_INT_ENABLE) {
1000a8e8:	2800      	cmp	r0, #0
1000a8ea:	d104      	bne.n	1000a8f6 <sms_button_toggle_interrupt+0x12>
        gpio_enable_callback(btn0_instance.gpio_pin);
1000a8ec:	4b0c      	ldr	r3, [pc, #48]	; (1000a920 <sms_button_toggle_interrupt+0x3c>)
1000a8ee:	7858      	ldrb	r0, [r3, #1]
1000a8f0:	4b0c      	ldr	r3, [pc, #48]	; (1000a924 <sms_button_toggle_interrupt+0x40>)
1000a8f2:	4798      	blx	r3
1000a8f4:	e005      	b.n	1000a902 <sms_button_toggle_interrupt+0x1e>
    }
    else if(tog0 == SMS_BTN_INT_DISABLE) {
1000a8f6:	2801      	cmp	r0, #1
1000a8f8:	d103      	bne.n	1000a902 <sms_button_toggle_interrupt+0x1e>
        gpio_disable_callback(btn0_instance.gpio_pin);
1000a8fa:	4b09      	ldr	r3, [pc, #36]	; (1000a920 <sms_button_toggle_interrupt+0x3c>)
1000a8fc:	7858      	ldrb	r0, [r3, #1]
1000a8fe:	4b0a      	ldr	r3, [pc, #40]	; (1000a928 <sms_button_toggle_interrupt+0x44>)
1000a900:	4798      	blx	r3
    }
    
    if(tog1 == SMS_BTN_INT_ENABLE) {
1000a902:	2c00      	cmp	r4, #0
1000a904:	d104      	bne.n	1000a910 <sms_button_toggle_interrupt+0x2c>
        gpio_enable_callback(btn1_instance.gpio_pin);
1000a906:	4b09      	ldr	r3, [pc, #36]	; (1000a92c <sms_button_toggle_interrupt+0x48>)
1000a908:	7858      	ldrb	r0, [r3, #1]
1000a90a:	4b06      	ldr	r3, [pc, #24]	; (1000a924 <sms_button_toggle_interrupt+0x40>)
1000a90c:	4798      	blx	r3
1000a90e:	e005      	b.n	1000a91c <sms_button_toggle_interrupt+0x38>
    }
    else if(tog1 == SMS_BTN_INT_DISABLE) {
1000a910:	2c01      	cmp	r4, #1
1000a912:	d103      	bne.n	1000a91c <sms_button_toggle_interrupt+0x38>
        gpio_disable_callback(btn1_instance.gpio_pin);
1000a914:	4b05      	ldr	r3, [pc, #20]	; (1000a92c <sms_button_toggle_interrupt+0x48>)
1000a916:	7858      	ldrb	r0, [r3, #1]
1000a918:	4b03      	ldr	r3, [pc, #12]	; (1000a928 <sms_button_toggle_interrupt+0x44>)
1000a91a:	4798      	blx	r3
    }
}
1000a91c:	bd10      	pop	{r4, pc}
1000a91e:	46c0      	nop			; (mov r8, r8)
1000a920:	1001a180 	.word	0x1001a180
1000a924:	1000c681 	.word	0x1000c681
1000a928:	1000c6dd 	.word	0x1000c6dd
1000a92c:	1001a21c 	.word	0x1001a21c

1000a930 <sms_button_define_services>:
    send_plf_int_msg_ind(btn1_instance.gpio_pin, GPIO_CALLBACK_RISING, NULL, 0);
}

/* Define BLE service for buttons */
void sms_button_define_services(void)
{
1000a930:	b510      	push	{r4, lr}
1000a932:	b082      	sub	sp, #8
    at_ble_status_t status;
    uint8_t init_value = 0;
1000a934:	466b      	mov	r3, sp
1000a936:	1dda      	adds	r2, r3, #7
1000a938:	2300      	movs	r3, #0
1000a93a:	7013      	strb	r3, [r2, #0]
    sms_ble_service_init(BLE_SERV_BUTTON, &button_instance.service_handler, &init_value);
1000a93c:	4c0d      	ldr	r4, [pc, #52]	; (1000a974 <sms_button_define_services+0x44>)
1000a93e:	0021      	movs	r1, r4
1000a940:	2000      	movs	r0, #0
1000a942:	4b0d      	ldr	r3, [pc, #52]	; (1000a978 <sms_button_define_services+0x48>)
1000a944:	4798      	blx	r3
    if((status = sms_ble_primary_service_define(&button_instance.service_handler)) != AT_BLE_SUCCESS) {
1000a946:	0020      	movs	r0, r4
1000a948:	4b0c      	ldr	r3, [pc, #48]	; (1000a97c <sms_button_define_services+0x4c>)
1000a94a:	4798      	blx	r3
1000a94c:	1e04      	subs	r4, r0, #0
1000a94e:	d007      	beq.n	1000a960 <sms_button_define_services+0x30>
        DBG_LOG("[sms_button_define_services]\tServices defining failed, reason 0x%x", status);
1000a950:	480b      	ldr	r0, [pc, #44]	; (1000a980 <sms_button_define_services+0x50>)
1000a952:	4b0c      	ldr	r3, [pc, #48]	; (1000a984 <sms_button_define_services+0x54>)
1000a954:	4798      	blx	r3
1000a956:	0021      	movs	r1, r4
1000a958:	480b      	ldr	r0, [pc, #44]	; (1000a988 <sms_button_define_services+0x58>)
1000a95a:	4b0c      	ldr	r3, [pc, #48]	; (1000a98c <sms_button_define_services+0x5c>)
1000a95c:	4798      	blx	r3
1000a95e:	e007      	b.n	1000a970 <sms_button_define_services+0x40>
    }
    else {
        DBG_LOG_DEV("[sms_button_define_services]\tServices defined, SMS button handle: %d", button_instance.service_handler.serv_handle);
1000a960:	4807      	ldr	r0, [pc, #28]	; (1000a980 <sms_button_define_services+0x50>)
1000a962:	4b08      	ldr	r3, [pc, #32]	; (1000a984 <sms_button_define_services+0x54>)
1000a964:	4798      	blx	r3
1000a966:	4b0a      	ldr	r3, [pc, #40]	; (1000a990 <sms_button_define_services+0x60>)
1000a968:	8ad9      	ldrh	r1, [r3, #22]
1000a96a:	480a      	ldr	r0, [pc, #40]	; (1000a994 <sms_button_define_services+0x64>)
1000a96c:	4b07      	ldr	r3, [pc, #28]	; (1000a98c <sms_button_define_services+0x5c>)
1000a96e:	4798      	blx	r3
    }
1000a970:	b002      	add	sp, #8
1000a972:	bd10      	pop	{r4, pc}
1000a974:	1001a224 	.word	0x1001a224
1000a978:	1000a439 	.word	0x1000a439
1000a97c:	1000a415 	.word	0x1000a415
1000a980:	10016660 	.word	0x10016660
1000a984:	100154a1 	.word	0x100154a1
1000a988:	10016e20 	.word	0x10016e20
1000a98c:	10015381 	.word	0x10015381
1000a990:	1001a220 	.word	0x1001a220
1000a994:	10016e64 	.word	0x10016e64

1000a998 <sms_monitor_configure_gpio>:

#include "sms_common.h"

/* General functions */
void sms_monitor_configure_gpio(void)
{
1000a998:	b510      	push	{r4, lr}
1000a99a:	b082      	sub	sp, #8
    struct gpio_config config_gpio_pin;
    gpio_get_config_defaults(&config_gpio_pin);
1000a99c:	ac01      	add	r4, sp, #4
1000a99e:	0020      	movs	r0, r4
1000a9a0:	4b0a      	ldr	r3, [pc, #40]	; (1000a9cc <sms_monitor_configure_gpio+0x34>)
1000a9a2:	4798      	blx	r3
    config_gpio_pin.direction  = GPIO_PIN_DIR_OUTPUT;
1000a9a4:	2301      	movs	r3, #1
1000a9a6:	7023      	strb	r3, [r4, #0]
    if(gpio_pin_set_config(DBG_PIN_1, &config_gpio_pin) != STATUS_OK) {
1000a9a8:	0021      	movs	r1, r4
1000a9aa:	2002      	movs	r0, #2
1000a9ac:	4b08      	ldr	r3, [pc, #32]	; (1000a9d0 <sms_monitor_configure_gpio+0x38>)
1000a9ae:	4798      	blx	r3
1000a9b0:	2800      	cmp	r0, #0
1000a9b2:	d005      	beq.n	1000a9c0 <sms_monitor_configure_gpio+0x28>
        DBG_LOG("Problem while setting gpio pin");
1000a9b4:	4807      	ldr	r0, [pc, #28]	; (1000a9d4 <sms_monitor_configure_gpio+0x3c>)
1000a9b6:	4b08      	ldr	r3, [pc, #32]	; (1000a9d8 <sms_monitor_configure_gpio+0x40>)
1000a9b8:	4798      	blx	r3
1000a9ba:	4808      	ldr	r0, [pc, #32]	; (1000a9dc <sms_monitor_configure_gpio+0x44>)
1000a9bc:	4b08      	ldr	r3, [pc, #32]	; (1000a9e0 <sms_monitor_configure_gpio+0x48>)
1000a9be:	4798      	blx	r3
    }
    gpio_pin_set_output_level(DBG_PIN_1, DBG_PIN_LOW);
1000a9c0:	2100      	movs	r1, #0
1000a9c2:	2002      	movs	r0, #2
1000a9c4:	4b07      	ldr	r3, [pc, #28]	; (1000a9e4 <sms_monitor_configure_gpio+0x4c>)
1000a9c6:	4798      	blx	r3
}
1000a9c8:	b002      	add	sp, #8
1000a9ca:	bd10      	pop	{r4, pc}
1000a9cc:	1000c171 	.word	0x1000c171
1000a9d0:	1000c181 	.word	0x1000c181
1000a9d4:	10016660 	.word	0x10016660
1000a9d8:	100154a1 	.word	0x100154a1
1000a9dc:	10016eac 	.word	0x10016eac
1000a9e0:	10015381 	.word	0x10015381
1000a9e4:	1000c3d9 	.word	0x1000c3d9

1000a9e8 <sms_monitor_get_states>:

void sms_monitor_get_states(const char *label)
{
1000a9e8:	b570      	push	{r4, r5, r6, lr}
1000a9ea:	b084      	sub	sp, #16
1000a9ec:	0004      	movs	r4, r0
    DBG_LOG_DEV("%s...\t\tB-prev %d, B-cur %d, BLE 0x%02x, T1 %d, T2 %d, SMS %d", label, button_instance.previous_state, button_instance.current_state, ble_current_state, timer1_current_mode, timer2_current_mode, sms_working_mode);
1000a9ee:	480c      	ldr	r0, [pc, #48]	; (1000aa20 <sms_monitor_get_states+0x38>)
1000a9f0:	4b0c      	ldr	r3, [pc, #48]	; (1000aa24 <sms_monitor_get_states+0x3c>)
1000a9f2:	4798      	blx	r3
1000a9f4:	4b0c      	ldr	r3, [pc, #48]	; (1000aa28 <sms_monitor_get_states+0x40>)
1000a9f6:	7819      	ldrb	r1, [r3, #0]
1000a9f8:	4b0c      	ldr	r3, [pc, #48]	; (1000aa2c <sms_monitor_get_states+0x44>)
1000a9fa:	7818      	ldrb	r0, [r3, #0]
1000a9fc:	4b0c      	ldr	r3, [pc, #48]	; (1000aa30 <sms_monitor_get_states+0x48>)
1000a9fe:	781d      	ldrb	r5, [r3, #0]
1000aa00:	4b0c      	ldr	r3, [pc, #48]	; (1000aa34 <sms_monitor_get_states+0x4c>)
1000aa02:	781e      	ldrb	r6, [r3, #0]
1000aa04:	4a0c      	ldr	r2, [pc, #48]	; (1000aa38 <sms_monitor_get_states+0x50>)
1000aa06:	7853      	ldrb	r3, [r2, #1]
1000aa08:	7812      	ldrb	r2, [r2, #0]
1000aa0a:	9603      	str	r6, [sp, #12]
1000aa0c:	9502      	str	r5, [sp, #8]
1000aa0e:	9001      	str	r0, [sp, #4]
1000aa10:	9100      	str	r1, [sp, #0]
1000aa12:	0021      	movs	r1, r4
1000aa14:	4809      	ldr	r0, [pc, #36]	; (1000aa3c <sms_monitor_get_states+0x54>)
1000aa16:	4c0a      	ldr	r4, [pc, #40]	; (1000aa40 <sms_monitor_get_states+0x58>)
1000aa18:	47a0      	blx	r4
}
1000aa1a:	b004      	add	sp, #16
1000aa1c:	bd70      	pop	{r4, r5, r6, pc}
1000aa1e:	46c0      	nop			; (mov r8, r8)
1000aa20:	10016660 	.word	0x10016660
1000aa24:	100154a1 	.word	0x100154a1
1000aa28:	1001a330 	.word	0x1001a330
1000aa2c:	1001a184 	.word	0x1001a184
1000aa30:	1001a331 	.word	0x1001a331
1000aa34:	1001a218 	.word	0x1001a218
1000aa38:	1001a220 	.word	0x1001a220
1000aa3c:	10016ecc 	.word	0x10016ecc
1000aa40:	10015381 	.word	0x10015381

1000aa44 <sms_i2c_master_configure>:
#include <stdlib.h>
#include "sms_i2c.h"


void sms_i2c_master_configure(void)
{
1000aa44:	b530      	push	{r4, r5, lr}
1000aa46:	b087      	sub	sp, #28
    i2c_wpacket.data = malloc(I2C_DATA_LENGTH * sizeof(uint8_t));
1000aa48:	2010      	movs	r0, #16
1000aa4a:	4c14      	ldr	r4, [pc, #80]	; (1000aa9c <sms_i2c_master_configure+0x58>)
1000aa4c:	47a0      	blx	r4
1000aa4e:	4b14      	ldr	r3, [pc, #80]	; (1000aaa0 <sms_i2c_master_configure+0x5c>)
1000aa50:	6058      	str	r0, [r3, #4]
    i2c_rpacket.data = malloc(I2C_DATA_LENGTH * sizeof(uint8_t));
1000aa52:	2010      	movs	r0, #16
1000aa54:	47a0      	blx	r4
1000aa56:	4b13      	ldr	r3, [pc, #76]	; (1000aaa4 <sms_i2c_master_configure+0x60>)
1000aa58:	6058      	str	r0, [r3, #4]

    struct i2c_master_config config_i2c_master;
    i2c_master_get_config_defaults(&config_i2c_master);
1000aa5a:	ac01      	add	r4, sp, #4
1000aa5c:	0020      	movs	r0, r4
1000aa5e:	4b12      	ldr	r3, [pc, #72]	; (1000aaa8 <sms_i2c_master_configure+0x64>)
1000aa60:	4798      	blx	r3
    config_i2c_master.clock_source = SMS_I2C_MASTER_CLK_SRC;
1000aa62:	2301      	movs	r3, #1
1000aa64:	7023      	strb	r3, [r4, #0]
    config_i2c_master.clock_divider = SMS_I2C_MASTER_CLK_DIV;
1000aa66:	3381      	adds	r3, #129	; 0x81
1000aa68:	8063      	strh	r3, [r4, #2]
    config_i2c_master.pin_number_pad0 = SMS_I2C_MASTER_PIN_SDA;
1000aa6a:	3b7a      	subs	r3, #122	; 0x7a
1000aa6c:	6063      	str	r3, [r4, #4]
    config_i2c_master.pin_number_pad1 = SMS_I2C_MASTER_PIN_SCL;
1000aa6e:	3301      	adds	r3, #1
1000aa70:	60e3      	str	r3, [r4, #12]
    config_i2c_master.pinmux_sel_pad0 = SMS_I2C_MASTER_MUX_SDA;
1000aa72:	3b07      	subs	r3, #7
1000aa74:	60a3      	str	r3, [r4, #8]
    config_i2c_master.pinmux_sel_pad1 = SMS_I2C_MASTER_MUX_SCL;
1000aa76:	6123      	str	r3, [r4, #16]
    while(i2c_master_init(&i2c_master_instance, SMS_I2C_MASTER_PORT, &config_i2c_master) != STATUS_OK);
1000aa78:	4d0c      	ldr	r5, [pc, #48]	; (1000aaac <sms_i2c_master_configure+0x68>)
1000aa7a:	4c0d      	ldr	r4, [pc, #52]	; (1000aab0 <sms_i2c_master_configure+0x6c>)
1000aa7c:	aa01      	add	r2, sp, #4
1000aa7e:	490d      	ldr	r1, [pc, #52]	; (1000aab4 <sms_i2c_master_configure+0x70>)
1000aa80:	0028      	movs	r0, r5
1000aa82:	47a0      	blx	r4
1000aa84:	2800      	cmp	r0, #0
1000aa86:	d1f9      	bne.n	1000aa7c <sms_i2c_master_configure+0x38>

    i2c_enable(i2c_master_instance.hw);
1000aa88:	4b08      	ldr	r3, [pc, #32]	; (1000aaac <sms_i2c_master_configure+0x68>)
1000aa8a:	681a      	ldr	r2, [r3, #0]
 *
 * \param[in]  i2c_module  Pointer to software module structure
 */
static inline void i2c_wait_for_idle(I2c *const i2c_module)
{
	while (i2c_module->I2C_STATUS.bit.I2C_ACTIVE) {
1000aa8c:	2128      	movs	r1, #40	; 0x28
1000aa8e:	5c53      	ldrb	r3, [r2, r1]
1000aa90:	07db      	lsls	r3, r3, #31
1000aa92:	d4fc      	bmi.n	1000aa8e <sms_i2c_master_configure+0x4a>
static inline void i2c_enable(I2c *const i2c_module)
{
	/* Wait for module to sync. */
	i2c_wait_for_idle(i2c_module);
	/* Enable module. */
	i2c_module->I2C_MODULE_ENABLE.reg = (1 << I2C_MODULE_ENABLE_ENABLE_Pos);
1000aa94:	2301      	movs	r3, #1
1000aa96:	7513      	strb	r3, [r2, #20]
}
1000aa98:	b007      	add	sp, #28
1000aa9a:	bd30      	pop	{r4, r5, pc}
1000aa9c:	100151f5 	.word	0x100151f5
1000aaa0:	1001a338 	.word	0x1001a338
1000aaa4:	1001a31c 	.word	0x1001a31c
1000aaa8:	100083b9 	.word	0x100083b9
1000aaac:	1001a328 	.word	0x1001a328
1000aab0:	100083d1 	.word	0x100083d1
1000aab4:	40003000 	.word	0x40003000

1000aab8 <sms_i2c_master_write>:

int sms_i2c_master_write(uint8_t slave_addr, uint8_t reg_addr, uint8_t data_len, uint8_t const *data)
{
1000aab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000aaba:	0006      	movs	r6, r0
1000aabc:	000c      	movs	r4, r1
1000aabe:	0017      	movs	r7, r2
1000aac0:	001d      	movs	r5, r3
    DBG_LOG_DEV("i2c writing to 0x%02x at 0x%02x... data: ", slave_addr, reg_addr);
1000aac2:	481c      	ldr	r0, [pc, #112]	; (1000ab34 <sms_i2c_master_write+0x7c>)
1000aac4:	4b1c      	ldr	r3, [pc, #112]	; (1000ab38 <sms_i2c_master_write+0x80>)
1000aac6:	4798      	blx	r3
1000aac8:	0022      	movs	r2, r4
1000aaca:	0031      	movs	r1, r6
1000aacc:	481b      	ldr	r0, [pc, #108]	; (1000ab3c <sms_i2c_master_write+0x84>)
1000aace:	4b1c      	ldr	r3, [pc, #112]	; (1000ab40 <sms_i2c_master_write+0x88>)
1000aad0:	4798      	blx	r3
    uint16_t timeout = 0;
    i2c_wpacket.address = (uint8_t)slave_addr;
1000aad2:	4b1c      	ldr	r3, [pc, #112]	; (1000ab44 <sms_i2c_master_write+0x8c>)
1000aad4:	801e      	strh	r6, [r3, #0]
    i2c_wpacket.data_length = (uint8_t)(data_len + 1);
1000aad6:	1c7a      	adds	r2, r7, #1
1000aad8:	b2d2      	uxtb	r2, r2
1000aada:	805a      	strh	r2, [r3, #2]
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
1000aadc:	685b      	ldr	r3, [r3, #4]
1000aade:	701c      	strb	r4, [r3, #0]
    for(uint8_t i = 0; i < data_len; i++) {
1000aae0:	2f00      	cmp	r7, #0
1000aae2:	d019      	beq.n	1000ab18 <sms_i2c_master_write+0x60>
1000aae4:	3f01      	subs	r7, #1
1000aae6:	b2ff      	uxtb	r7, r7
1000aae8:	3701      	adds	r7, #1
1000aaea:	19ef      	adds	r7, r5, r7
1000aaec:	002c      	movs	r4, r5
1000aaee:	2301      	movs	r3, #1
1000aaf0:	1b5e      	subs	r6, r3, r5
        i2c_wpacket.data[i+1] = (uint8_t)data[i];
1000aaf2:	4d14      	ldr	r5, [pc, #80]	; (1000ab44 <sms_i2c_master_write+0x8c>)
1000aaf4:	1932      	adds	r2, r6, r4
1000aaf6:	7823      	ldrb	r3, [r4, #0]
1000aaf8:	6869      	ldr	r1, [r5, #4]
1000aafa:	548b      	strb	r3, [r1, r2]
        DBG_LOG_CONT_DEV("0x%02x ", i2c_wpacket.data[i+1]);
1000aafc:	686b      	ldr	r3, [r5, #4]
1000aafe:	5c99      	ldrb	r1, [r3, r2]
1000ab00:	4811      	ldr	r0, [pc, #68]	; (1000ab48 <sms_i2c_master_write+0x90>)
1000ab02:	4a0f      	ldr	r2, [pc, #60]	; (1000ab40 <sms_i2c_master_write+0x88>)
1000ab04:	4790      	blx	r2
1000ab06:	3401      	adds	r4, #1
    DBG_LOG_DEV("i2c writing to 0x%02x at 0x%02x... data: ", slave_addr, reg_addr);
    uint16_t timeout = 0;
    i2c_wpacket.address = (uint8_t)slave_addr;
    i2c_wpacket.data_length = (uint8_t)(data_len + 1);
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
    for(uint8_t i = 0; i < data_len; i++) {
1000ab08:	42bc      	cmp	r4, r7
1000ab0a:	d1f3      	bne.n	1000aaf4 <sms_i2c_master_write+0x3c>
1000ab0c:	e004      	b.n	1000ab18 <sms_i2c_master_write+0x60>
1000ab0e:	3c01      	subs	r4, #1
1000ab10:	b2a4      	uxth	r4, r4
        i2c_wpacket.data[i+1] = (uint8_t)data[i];
        DBG_LOG_CONT_DEV("0x%02x ", i2c_wpacket.data[i+1]);
    }
    while (i2c_master_write_packet_wait(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) {
        /* Increment timeout counter and check if timed out. */
        if (timeout++ >= I2C_TIMEOUT) {
1000ab12:	2c00      	cmp	r4, #0
1000ab14:	d104      	bne.n	1000ab20 <sms_i2c_master_write+0x68>
1000ab16:	e009      	b.n	1000ab2c <sms_i2c_master_write+0x74>
    DBG_LOG_DEV("i2c writing to 0x%02x at 0x%02x... data: ", slave_addr, reg_addr);
    uint16_t timeout = 0;
    i2c_wpacket.address = (uint8_t)slave_addr;
    i2c_wpacket.data_length = (uint8_t)(data_len + 1);
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
    for(uint8_t i = 0; i < data_len; i++) {
1000ab18:	4c0c      	ldr	r4, [pc, #48]	; (1000ab4c <sms_i2c_master_write+0x94>)
        i2c_wpacket.data[i+1] = (uint8_t)data[i];
        DBG_LOG_CONT_DEV("0x%02x ", i2c_wpacket.data[i+1]);
    }
    while (i2c_master_write_packet_wait(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) {
1000ab1a:	4e0a      	ldr	r6, [pc, #40]	; (1000ab44 <sms_i2c_master_write+0x8c>)
1000ab1c:	4d0c      	ldr	r5, [pc, #48]	; (1000ab50 <sms_i2c_master_write+0x98>)
1000ab1e:	4f0d      	ldr	r7, [pc, #52]	; (1000ab54 <sms_i2c_master_write+0x9c>)
1000ab20:	0031      	movs	r1, r6
1000ab22:	0028      	movs	r0, r5
1000ab24:	47b8      	blx	r7
1000ab26:	2800      	cmp	r0, #0
1000ab28:	d1f1      	bne.n	1000ab0e <sms_i2c_master_write+0x56>
1000ab2a:	e001      	b.n	1000ab30 <sms_i2c_master_write+0x78>
        /* Increment timeout counter and check if timed out. */
        if (timeout++ >= I2C_TIMEOUT) {
            return -1;
1000ab2c:	2001      	movs	r0, #1
1000ab2e:	4240      	negs	r0, r0
        }
    }
    return 0;
}
1000ab30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000ab32:	46c0      	nop			; (mov r8, r8)
1000ab34:	10016660 	.word	0x10016660
1000ab38:	100154a1 	.word	0x100154a1
1000ab3c:	10016f0c 	.word	0x10016f0c
1000ab40:	10015381 	.word	0x10015381
1000ab44:	1001a338 	.word	0x1001a338
1000ab48:	10016f38 	.word	0x10016f38
1000ab4c:	000003e9 	.word	0x000003e9
1000ab50:	1001a328 	.word	0x1001a328
1000ab54:	10008469 	.word	0x10008469

1000ab58 <sms_i2c_master_read>:

int sms_i2c_master_read(uint8_t slave_addr, uint8_t reg_addr, uint8_t data_len, uint8_t *data)
{
1000ab58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000ab5a:	464f      	mov	r7, r9
1000ab5c:	4646      	mov	r6, r8
1000ab5e:	b4c0      	push	{r6, r7}
1000ab60:	0004      	movs	r4, r0
1000ab62:	000d      	movs	r5, r1
1000ab64:	4690      	mov	r8, r2
1000ab66:	001f      	movs	r7, r3
    DBG_LOG("i2c reading from 0x%02x at 0x%02x... data: ", slave_addr, reg_addr);
1000ab68:	4828      	ldr	r0, [pc, #160]	; (1000ac0c <sms_i2c_master_read+0xb4>)
1000ab6a:	4b29      	ldr	r3, [pc, #164]	; (1000ac10 <sms_i2c_master_read+0xb8>)
1000ab6c:	4798      	blx	r3
1000ab6e:	002a      	movs	r2, r5
1000ab70:	0021      	movs	r1, r4
1000ab72:	4828      	ldr	r0, [pc, #160]	; (1000ac14 <sms_i2c_master_read+0xbc>)
1000ab74:	4b28      	ldr	r3, [pc, #160]	; (1000ac18 <sms_i2c_master_read+0xc0>)
1000ab76:	4798      	blx	r3
    uint16_t timeout;
    i2c_wpacket.address = (uint8_t)slave_addr;
1000ab78:	b2a4      	uxth	r4, r4
1000ab7a:	4b28      	ldr	r3, [pc, #160]	; (1000ac1c <sms_i2c_master_read+0xc4>)
1000ab7c:	801c      	strh	r4, [r3, #0]
    i2c_wpacket.data_length = 1;
1000ab7e:	2201      	movs	r2, #1
1000ab80:	805a      	strh	r2, [r3, #2]
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
1000ab82:	685b      	ldr	r3, [r3, #4]
1000ab84:	701d      	strb	r5, [r3, #0]
    i2c_rpacket.address = (uint8_t)slave_addr;
1000ab86:	4b26      	ldr	r3, [pc, #152]	; (1000ac20 <sms_i2c_master_read+0xc8>)
1000ab88:	801c      	strh	r4, [r3, #0]
    i2c_rpacket.data_length = (uint8_t)data_len;
1000ab8a:	4642      	mov	r2, r8
1000ab8c:	805a      	strh	r2, [r3, #2]
    
    timeout = 0;
    while(i2c_master_write_packet_wait_no_stop(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) {
1000ab8e:	4c25      	ldr	r4, [pc, #148]	; (1000ac24 <sms_i2c_master_read+0xcc>)
1000ab90:	4e22      	ldr	r6, [pc, #136]	; (1000ac1c <sms_i2c_master_read+0xc4>)
1000ab92:	4d25      	ldr	r5, [pc, #148]	; (1000ac28 <sms_i2c_master_read+0xd0>)
1000ab94:	e003      	b.n	1000ab9e <sms_i2c_master_read+0x46>
1000ab96:	3c01      	subs	r4, #1
1000ab98:	b2a4      	uxth	r4, r4
        if(timeout++ >= I2C_TIMEOUT) {
1000ab9a:	2c00      	cmp	r4, #0
1000ab9c:	d02b      	beq.n	1000abf6 <sms_i2c_master_read+0x9e>
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
    i2c_rpacket.address = (uint8_t)slave_addr;
    i2c_rpacket.data_length = (uint8_t)data_len;
    
    timeout = 0;
    while(i2c_master_write_packet_wait_no_stop(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) {
1000ab9e:	0031      	movs	r1, r6
1000aba0:	4822      	ldr	r0, [pc, #136]	; (1000ac2c <sms_i2c_master_read+0xd4>)
1000aba2:	47a8      	blx	r5
1000aba4:	2800      	cmp	r0, #0
1000aba6:	d1f6      	bne.n	1000ab96 <sms_i2c_master_read+0x3e>
1000aba8:	4e1e      	ldr	r6, [pc, #120]	; (1000ac24 <sms_i2c_master_read+0xcc>)
            return -1;
        }
    }
    
    timeout = 0;
    while(i2c_master_read_packet_wait(&i2c_master_instance, &i2c_rpacket) != STATUS_OK) {
1000abaa:	4d1d      	ldr	r5, [pc, #116]	; (1000ac20 <sms_i2c_master_read+0xc8>)
1000abac:	4c20      	ldr	r4, [pc, #128]	; (1000ac30 <sms_i2c_master_read+0xd8>)
1000abae:	e003      	b.n	1000abb8 <sms_i2c_master_read+0x60>
1000abb0:	3e01      	subs	r6, #1
1000abb2:	b2b6      	uxth	r6, r6
        if(timeout++ >= I2C_TIMEOUT) {
1000abb4:	2e00      	cmp	r6, #0
1000abb6:	d021      	beq.n	1000abfc <sms_i2c_master_read+0xa4>
            return -1;
        }
    }
    
    timeout = 0;
    while(i2c_master_read_packet_wait(&i2c_master_instance, &i2c_rpacket) != STATUS_OK) {
1000abb8:	0029      	movs	r1, r5
1000abba:	481c      	ldr	r0, [pc, #112]	; (1000ac2c <sms_i2c_master_read+0xd4>)
1000abbc:	47a0      	blx	r4
1000abbe:	2800      	cmp	r0, #0
1000abc0:	d1f6      	bne.n	1000abb0 <sms_i2c_master_read+0x58>
        if(timeout++ >= I2C_TIMEOUT) {
            return -1;
        }
    }
    for(uint8_t i = 0; i < data_len; i++) {
1000abc2:	4643      	mov	r3, r8
1000abc4:	2b00      	cmp	r3, #0
1000abc6:	d01c      	beq.n	1000ac02 <sms_i2c_master_read+0xaa>
1000abc8:	4646      	mov	r6, r8
1000abca:	3e01      	subs	r6, #1
1000abcc:	b2f6      	uxtb	r6, r6
1000abce:	3601      	adds	r6, #1
1000abd0:	2400      	movs	r4, #0
        data[i] = i2c_rpacket.data[i];
1000abd2:	4b13      	ldr	r3, [pc, #76]	; (1000ac20 <sms_i2c_master_read+0xc8>)
1000abd4:	4699      	mov	r9, r3
        DBG_LOG("0x%02x ", data[i]);
1000abd6:	4d0e      	ldr	r5, [pc, #56]	; (1000ac10 <sms_i2c_master_read+0xb8>)
        if(timeout++ >= I2C_TIMEOUT) {
            return -1;
        }
    }
    for(uint8_t i = 0; i < data_len; i++) {
        data[i] = i2c_rpacket.data[i];
1000abd8:	464b      	mov	r3, r9
1000abda:	685b      	ldr	r3, [r3, #4]
1000abdc:	5d1b      	ldrb	r3, [r3, r4]
1000abde:	553b      	strb	r3, [r7, r4]
        DBG_LOG("0x%02x ", data[i]);
1000abe0:	480a      	ldr	r0, [pc, #40]	; (1000ac0c <sms_i2c_master_read+0xb4>)
1000abe2:	47a8      	blx	r5
1000abe4:	5d39      	ldrb	r1, [r7, r4]
1000abe6:	4813      	ldr	r0, [pc, #76]	; (1000ac34 <sms_i2c_master_read+0xdc>)
1000abe8:	4b0b      	ldr	r3, [pc, #44]	; (1000ac18 <sms_i2c_master_read+0xc0>)
1000abea:	4798      	blx	r3
1000abec:	3401      	adds	r4, #1
    while(i2c_master_read_packet_wait(&i2c_master_instance, &i2c_rpacket) != STATUS_OK) {
        if(timeout++ >= I2C_TIMEOUT) {
            return -1;
        }
    }
    for(uint8_t i = 0; i < data_len; i++) {
1000abee:	42b4      	cmp	r4, r6
1000abf0:	d1f2      	bne.n	1000abd8 <sms_i2c_master_read+0x80>
        data[i] = i2c_rpacket.data[i];
        DBG_LOG("0x%02x ", data[i]);
    }
    return 0;
1000abf2:	2000      	movs	r0, #0
1000abf4:	e006      	b.n	1000ac04 <sms_i2c_master_read+0xac>
    i2c_rpacket.data_length = (uint8_t)data_len;
    
    timeout = 0;
    while(i2c_master_write_packet_wait_no_stop(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) {
        if(timeout++ >= I2C_TIMEOUT) {
            return -1;
1000abf6:	2001      	movs	r0, #1
1000abf8:	4240      	negs	r0, r0
1000abfa:	e003      	b.n	1000ac04 <sms_i2c_master_read+0xac>
    }
    
    timeout = 0;
    while(i2c_master_read_packet_wait(&i2c_master_instance, &i2c_rpacket) != STATUS_OK) {
        if(timeout++ >= I2C_TIMEOUT) {
            return -1;
1000abfc:	2001      	movs	r0, #1
1000abfe:	4240      	negs	r0, r0
1000ac00:	e000      	b.n	1000ac04 <sms_i2c_master_read+0xac>
    }
    for(uint8_t i = 0; i < data_len; i++) {
        data[i] = i2c_rpacket.data[i];
        DBG_LOG("0x%02x ", data[i]);
    }
    return 0;
1000ac02:	2000      	movs	r0, #0
1000ac04:	bc0c      	pop	{r2, r3}
1000ac06:	4690      	mov	r8, r2
1000ac08:	4699      	mov	r9, r3
1000ac0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000ac0c:	10016660 	.word	0x10016660
1000ac10:	100154a1 	.word	0x100154a1
1000ac14:	10016f40 	.word	0x10016f40
1000ac18:	10015381 	.word	0x10015381
1000ac1c:	1001a338 	.word	0x1001a338
1000ac20:	1001a31c 	.word	0x1001a31c
1000ac24:	000003e9 	.word	0x000003e9
1000ac28:	1000848d 	.word	0x1000848d
1000ac2c:	1001a328 	.word	0x1001a328
1000ac30:	10008445 	.word	0x10008445
1000ac34:	10016f38 	.word	0x10016f38

1000ac38 <sms_mpu_interrupt_callback>:
    gpio_unregister_callback(SMS_MPU_DRDY_PIN, GPIO_CALLBACK_RISING);
}

/* Callback --> send interrupt message to platform */
void sms_mpu_interrupt_callback(void)
{
1000ac38:	b510      	push	{r4, lr}
    sms_current_interrupt.source = INT_MPU_DRDY;
1000ac3a:	2203      	movs	r2, #3
1000ac3c:	4b04      	ldr	r3, [pc, #16]	; (1000ac50 <sms_mpu_interrupt_callback+0x18>)
1000ac3e:	701a      	strb	r2, [r3, #0]
    send_plf_int_msg_ind(SMS_MPU_DRDY_PIN, GPIO_CALLBACK_RISING, NULL, 0);
1000ac40:	2300      	movs	r3, #0
1000ac42:	2200      	movs	r2, #0
1000ac44:	2102      	movs	r1, #2
1000ac46:	201e      	movs	r0, #30
1000ac48:	4c02      	ldr	r4, [pc, #8]	; (1000ac54 <sms_mpu_interrupt_callback+0x1c>)
1000ac4a:	47a0      	blx	r4
}
1000ac4c:	bd10      	pop	{r4, pc}
1000ac4e:	46c0      	nop			; (mov r8, r8)
1000ac50:	1001a318 	.word	0x1001a318
1000ac54:	1000f435 	.word	0x1000f435

1000ac58 <sms_mpu_configure_gpio>:
#include "sms_peripheral1.h"

//static struct hal_s hal = {0};
    
void sms_mpu_configure_gpio(void)
{
1000ac58:	b510      	push	{r4, lr}
1000ac5a:	b082      	sub	sp, #8
    struct gpio_config config_gpio_pin;

    /* Data ready interrupt from IMU */
    gpio_get_config_defaults(&config_gpio_pin);
1000ac5c:	ac01      	add	r4, sp, #4
1000ac5e:	0020      	movs	r0, r4
1000ac60:	4b15      	ldr	r3, [pc, #84]	; (1000acb8 <sms_mpu_configure_gpio+0x60>)
1000ac62:	4798      	blx	r3
    config_gpio_pin.direction = GPIO_PIN_DIR_INPUT;
1000ac64:	2300      	movs	r3, #0
1000ac66:	7023      	strb	r3, [r4, #0]
    config_gpio_pin.input_pull = GPIO_PIN_PULL_DOWN;
1000ac68:	3302      	adds	r3, #2
1000ac6a:	7063      	strb	r3, [r4, #1]
    config_gpio_pin.aon_wakeup = true;
1000ac6c:	3b01      	subs	r3, #1
1000ac6e:	70e3      	strb	r3, [r4, #3]
    if(gpio_pin_set_config(SMS_MPU_DRDY_PIN, &config_gpio_pin) != STATUS_OK) {
1000ac70:	0021      	movs	r1, r4
1000ac72:	201e      	movs	r0, #30
1000ac74:	4b11      	ldr	r3, [pc, #68]	; (1000acbc <sms_mpu_configure_gpio+0x64>)
1000ac76:	4798      	blx	r3
1000ac78:	2800      	cmp	r0, #0
1000ac7a:	d005      	beq.n	1000ac88 <sms_mpu_configure_gpio+0x30>
        DBG_LOG("[sms_imu_configure_gpio]\tProblem while setting up IMU DRDY pin");
1000ac7c:	4810      	ldr	r0, [pc, #64]	; (1000acc0 <sms_mpu_configure_gpio+0x68>)
1000ac7e:	4b11      	ldr	r3, [pc, #68]	; (1000acc4 <sms_mpu_configure_gpio+0x6c>)
1000ac80:	4798      	blx	r3
1000ac82:	4811      	ldr	r0, [pc, #68]	; (1000acc8 <sms_mpu_configure_gpio+0x70>)
1000ac84:	4b11      	ldr	r3, [pc, #68]	; (1000accc <sms_mpu_configure_gpio+0x74>)
1000ac86:	4798      	blx	r3
    }

    /* Pin output to supply IMU */
    gpio_get_config_defaults(&config_gpio_pin);
1000ac88:	ac01      	add	r4, sp, #4
1000ac8a:	0020      	movs	r0, r4
1000ac8c:	4b0a      	ldr	r3, [pc, #40]	; (1000acb8 <sms_mpu_configure_gpio+0x60>)
1000ac8e:	4798      	blx	r3
    config_gpio_pin.direction = GPIO_PIN_DIR_OUTPUT;
1000ac90:	2301      	movs	r3, #1
1000ac92:	7023      	strb	r3, [r4, #0]
    if(!gpio_pin_set_config(SMS_MPU_VCC_PIN, &config_gpio_pin) != STATUS_OK) {
1000ac94:	0021      	movs	r1, r4
1000ac96:	2006      	movs	r0, #6
1000ac98:	4b08      	ldr	r3, [pc, #32]	; (1000acbc <sms_mpu_configure_gpio+0x64>)
1000ac9a:	4798      	blx	r3
1000ac9c:	2800      	cmp	r0, #0
1000ac9e:	d105      	bne.n	1000acac <sms_mpu_configure_gpio+0x54>
        DBG_LOG("[sms_imu_configure_gpio]\tProblem while setting up MPU VCC pin");
1000aca0:	4807      	ldr	r0, [pc, #28]	; (1000acc0 <sms_mpu_configure_gpio+0x68>)
1000aca2:	4b08      	ldr	r3, [pc, #32]	; (1000acc4 <sms_mpu_configure_gpio+0x6c>)
1000aca4:	4798      	blx	r3
1000aca6:	480a      	ldr	r0, [pc, #40]	; (1000acd0 <sms_mpu_configure_gpio+0x78>)
1000aca8:	4b08      	ldr	r3, [pc, #32]	; (1000accc <sms_mpu_configure_gpio+0x74>)
1000acaa:	4798      	blx	r3
    }
    gpio_pin_set_output_level(SMS_MPU_VCC_PIN, true);
1000acac:	2101      	movs	r1, #1
1000acae:	2006      	movs	r0, #6
1000acb0:	4b08      	ldr	r3, [pc, #32]	; (1000acd4 <sms_mpu_configure_gpio+0x7c>)
1000acb2:	4798      	blx	r3
}
1000acb4:	b002      	add	sp, #8
1000acb6:	bd10      	pop	{r4, pc}
1000acb8:	1000c171 	.word	0x1000c171
1000acbc:	1000c181 	.word	0x1000c181
1000acc0:	10016660 	.word	0x10016660
1000acc4:	100154a1 	.word	0x100154a1
1000acc8:	10016f6c 	.word	0x10016f6c
1000accc:	10015381 	.word	0x10015381
1000acd0:	10016fac 	.word	0x10016fac
1000acd4:	1000c3d9 	.word	0x1000c3d9

1000acd8 <sms_mpu_register_callbacks>:

/* Register GPIO interrupt callback */
void sms_mpu_register_callbacks(void)
{
1000acd8:	b510      	push	{r4, lr}
    /* MPU-9250 interrupt callback */
    gpio_register_callback(SMS_MPU_DRDY_PIN, sms_mpu_interrupt_callback, GPIO_CALLBACK_RISING);
1000acda:	2202      	movs	r2, #2
1000acdc:	4902      	ldr	r1, [pc, #8]	; (1000ace8 <sms_mpu_register_callbacks+0x10>)
1000acde:	201e      	movs	r0, #30
1000ace0:	4b02      	ldr	r3, [pc, #8]	; (1000acec <sms_mpu_register_callbacks+0x14>)
1000ace2:	4798      	blx	r3
}
1000ace4:	bd10      	pop	{r4, pc}
1000ace6:	46c0      	nop			; (mov r8, r8)
1000ace8:	1000ac39 	.word	0x1000ac39
1000acec:	1000c5b1 	.word	0x1000c5b1

1000acf0 <sms_mpu_initialize>:
{
    sms_current_interrupt.source = INT_MPU_DRDY;
    send_plf_int_msg_ind(SMS_MPU_DRDY_PIN, GPIO_CALLBACK_RISING, NULL, 0);
}

int sms_mpu_initialize(void) {
1000acf0:	b570      	push	{r4, r5, r6, lr}
    int res;
    //unsigned char accel_fsr = 0;
    //unsigned short gyro_rate, gyro_fsr, compass_fsr;
    
    /* Initialize MPU-9250 without interrupt parameter since this has to be set independently */
    DBG_LOG_DEV("Initializing MPU...");
1000acf2:	4825      	ldr	r0, [pc, #148]	; (1000ad88 <sms_mpu_initialize+0x98>)
1000acf4:	4b25      	ldr	r3, [pc, #148]	; (1000ad8c <sms_mpu_initialize+0x9c>)
1000acf6:	4798      	blx	r3
1000acf8:	4825      	ldr	r0, [pc, #148]	; (1000ad90 <sms_mpu_initialize+0xa0>)
1000acfa:	4b26      	ldr	r3, [pc, #152]	; (1000ad94 <sms_mpu_initialize+0xa4>)
1000acfc:	4798      	blx	r3
    res = mpu_init(NULL);
1000acfe:	2000      	movs	r0, #0
1000ad00:	4b25      	ldr	r3, [pc, #148]	; (1000ad98 <sms_mpu_initialize+0xa8>)
1000ad02:	4798      	blx	r3
    if(res) {
1000ad04:	2800      	cmp	r0, #0
1000ad06:	d005      	beq.n	1000ad14 <sms_mpu_initialize+0x24>
        DBG_LOG_CONT_DEV(" failed!");
1000ad08:	4824      	ldr	r0, [pc, #144]	; (1000ad9c <sms_mpu_initialize+0xac>)
1000ad0a:	4b22      	ldr	r3, [pc, #136]	; (1000ad94 <sms_mpu_initialize+0xa4>)
1000ad0c:	4798      	blx	r3
        return -1;
1000ad0e:	2001      	movs	r0, #1
1000ad10:	4240      	negs	r0, r0
1000ad12:	e037      	b.n	1000ad84 <sms_mpu_initialize+0x94>
    }
    DBG_LOG_DEV("Setting up MPU...");
1000ad14:	481c      	ldr	r0, [pc, #112]	; (1000ad88 <sms_mpu_initialize+0x98>)
1000ad16:	4b1d      	ldr	r3, [pc, #116]	; (1000ad8c <sms_mpu_initialize+0x9c>)
1000ad18:	4798      	blx	r3
1000ad1a:	4821      	ldr	r0, [pc, #132]	; (1000ada0 <sms_mpu_initialize+0xb0>)
1000ad1c:	4b1d      	ldr	r3, [pc, #116]	; (1000ad94 <sms_mpu_initialize+0xa4>)
1000ad1e:	4798      	blx	r3
    mpu_set_sensors(INV_XYZ_GYRO | INV_XYZ_ACCEL | INV_XYZ_COMPASS);
1000ad20:	2079      	movs	r0, #121	; 0x79
1000ad22:	4b20      	ldr	r3, [pc, #128]	; (1000ada4 <sms_mpu_initialize+0xb4>)
1000ad24:	4798      	blx	r3
    mpu_configure_fifo(INV_XYZ_GYRO | INV_XYZ_ACCEL);
1000ad26:	2078      	movs	r0, #120	; 0x78
1000ad28:	4b1f      	ldr	r3, [pc, #124]	; (1000ada8 <sms_mpu_initialize+0xb8>)
1000ad2a:	4798      	blx	r3
    mpu_set_sample_rate(SMS_MPU_SAMPLE_RATE_HZ);
1000ad2c:	2001      	movs	r0, #1
1000ad2e:	4b1f      	ldr	r3, [pc, #124]	; (1000adac <sms_mpu_initialize+0xbc>)
1000ad30:	4798      	blx	r3
    mpu_set_compass_sample_rate(SMS_MPU_COMPASS_RATE_HZ);
1000ad32:	2001      	movs	r0, #1
1000ad34:	4b1e      	ldr	r3, [pc, #120]	; (1000adb0 <sms_mpu_initialize+0xc0>)
1000ad36:	4798      	blx	r3
    mpu_get_sample_rate(&mpu_device.hal.sample_rate);
1000ad38:	4d1e      	ldr	r5, [pc, #120]	; (1000adb4 <sms_mpu_initialize+0xc4>)
1000ad3a:	0028      	movs	r0, r5
1000ad3c:	4b1e      	ldr	r3, [pc, #120]	; (1000adb8 <sms_mpu_initialize+0xc8>)
1000ad3e:	4798      	blx	r3
    mpu_get_accel_fsr(&mpu_device.hal.accel_fsr);
1000ad40:	1f68      	subs	r0, r5, #5
1000ad42:	4b1e      	ldr	r3, [pc, #120]	; (1000adbc <sms_mpu_initialize+0xcc>)
1000ad44:	4798      	blx	r3
    mpu_get_compass_fsr(&mpu_device.hal.compass_fsr);
1000ad46:	1ea8      	subs	r0, r5, #2
1000ad48:	4b1d      	ldr	r3, [pc, #116]	; (1000adc0 <sms_mpu_initialize+0xd0>)
1000ad4a:	4798      	blx	r3
    
    mpu_device.hal.sensors = (SMS_MPU_ACCEL_ON | SMS_MPU_GYRO_ON | SMS_MPU_COMPASS_ON);
1000ad4c:	002c      	movs	r4, r5
1000ad4e:	2307      	movs	r3, #7
1000ad50:	76eb      	strb	r3, [r5, #27]
    mpu_device.hal.dmp_features = (DMP_FEATURE_GYRO_CAL | DMP_FEATURE_SEND_RAW_ACCEL | DMP_FEATURE_SEND_ANY_GYRO);
1000ad52:	20f0      	movs	r0, #240	; 0xf0
1000ad54:	0040      	lsls	r0, r0, #1
1000ad56:	83e8      	strh	r0, [r5, #30]
    mpu_set_compass_sample_rate(SMS_MPU_COMPASS_RATE_HZ);
    mpu_get_sample_rate(&mpu_device.hal.sample_rate);
    mpu_get_accel_fsr(&mpu_device.hal.accel_fsr);
    mpu_get_compass_fsr(&mpu_device.hal.compass_fsr);
    
    mpu_device.hal.sensors = (SMS_MPU_ACCEL_ON | SMS_MPU_GYRO_ON | SMS_MPU_COMPASS_ON);
1000ad58:	3c0a      	subs	r4, #10
    mpu_device.hal.dmp_features = (DMP_FEATURE_GYRO_CAL | DMP_FEATURE_SEND_RAW_ACCEL | DMP_FEATURE_SEND_ANY_GYRO);
    dmp_enable_feature(mpu_device.hal.dmp_features);
1000ad5a:	4b1a      	ldr	r3, [pc, #104]	; (1000adc4 <sms_mpu_initialize+0xd4>)
1000ad5c:	4798      	blx	r3
    dmp_set_fifo_rate(SMS_MPU_SAMPLE_RATE_HZ);
1000ad5e:	2001      	movs	r0, #1
1000ad60:	4b19      	ldr	r3, [pc, #100]	; (1000adc8 <sms_mpu_initialize+0xd8>)
1000ad62:	4798      	blx	r3
    mpu_set_dmp_state(1);
1000ad64:	2001      	movs	r0, #1
1000ad66:	4b19      	ldr	r3, [pc, #100]	; (1000adcc <sms_mpu_initialize+0xdc>)
1000ad68:	4798      	blx	r3
    mpu_device.hal.dmp_on = 1;
1000ad6a:	2201      	movs	r2, #1
1000ad6c:	2326      	movs	r3, #38	; 0x26
1000ad6e:	54e2      	strb	r2, [r4, r3]
    mpu_device.temp_cnt = 0;
1000ad70:	2300      	movs	r3, #0
1000ad72:	322c      	adds	r2, #44	; 0x2c
1000ad74:	54a3      	strb	r3, [r4, r2]
    mpu_device.compass_cnt = 0;
1000ad76:	3a01      	subs	r2, #1
1000ad78:	54a3      	strb	r3, [r4, r2]
    mpu_device.new_compass = false;
1000ad7a:	3202      	adds	r2, #2
1000ad7c:	54a3      	strb	r3, [r4, r2]
    mpu_device.new_temp = false;
1000ad7e:	3201      	adds	r2, #1
1000ad80:	54a3      	strb	r3, [r4, r2]
    
    return 0;
1000ad82:	2000      	movs	r0, #0
}
1000ad84:	bd70      	pop	{r4, r5, r6, pc}
1000ad86:	46c0      	nop			; (mov r8, r8)
1000ad88:	10016660 	.word	0x10016660
1000ad8c:	100154a1 	.word	0x100154a1
1000ad90:	10016fec 	.word	0x10016fec
1000ad94:	10015381 	.word	0x10015381
1000ad98:	10009301 	.word	0x10009301
1000ad9c:	10017000 	.word	0x10017000
1000ada0:	1001700c 	.word	0x1001700c
1000ada4:	10009119 	.word	0x10009119
1000ada8:	10008ad5 	.word	0x10008ad5
1000adac:	10009045 	.word	0x10009045
1000adb0:	10008a5d 	.word	0x10008a5d
1000adb4:	1001a192 	.word	0x1001a192
1000adb8:	10008a41 	.word	0x10008a41
1000adbc:	100088a5 	.word	0x100088a5
1000adc0:	10009809 	.word	0x10009809
1000adc4:	10009c79 	.word	0x10009c79
1000adc8:	10009819 	.word	0x10009819
1000adcc:	100096a9 	.word	0x100096a9

1000add0 <sms_mpu_poll_data>:

/* Extract available IMU data */
int sms_mpu_poll_data(void)
{
1000add0:	b530      	push	{r4, r5, lr}
1000add2:	b085      	sub	sp, #20
    unsigned char sensors;
    unsigned char more;
    unsigned long sensor_timestamp;
    int res;
    
    mpu_device.hal.new_data = 0;
1000add4:	4c20      	ldr	r4, [pc, #128]	; (1000ae58 <sms_mpu_poll_data+0x88>)
1000add6:	2200      	movs	r2, #0
1000add8:	2324      	movs	r3, #36	; 0x24
1000adda:	54e2      	strb	r2, [r4, r3]
    
    mpu_read_fifo(mpu_device.hal.gyro, mpu_device.hal.accel, &sensor_timestamp, &sensors, &more);
1000addc:	0021      	movs	r1, r4
1000adde:	3112      	adds	r1, #18
1000ade0:	0020      	movs	r0, r4
1000ade2:	300c      	adds	r0, #12
1000ade4:	3b16      	subs	r3, #22
1000ade6:	446b      	add	r3, sp
1000ade8:	9300      	str	r3, [sp, #0]
1000adea:	230f      	movs	r3, #15
1000adec:	446b      	add	r3, sp
1000adee:	aa02      	add	r2, sp, #8
1000adf0:	4d1a      	ldr	r5, [pc, #104]	; (1000ae5c <sms_mpu_poll_data+0x8c>)
1000adf2:	47a8      	blx	r5
    
    //if(more) {
        //mpu_device.hal.new_data = 1;
    //}
    
    if(mpu_device.temp_cnt++ > SMS_MPU_TEMP_MULTIPLIER) {
1000adf4:	232d      	movs	r3, #45	; 0x2d
1000adf6:	5ce3      	ldrb	r3, [r4, r3]
1000adf8:	2b01      	cmp	r3, #1
1000adfa:	d804      	bhi.n	1000ae06 <sms_mpu_poll_data+0x36>
1000adfc:	3301      	adds	r3, #1
1000adfe:	222d      	movs	r2, #45	; 0x2d
1000ae00:	4915      	ldr	r1, [pc, #84]	; (1000ae58 <sms_mpu_poll_data+0x88>)
1000ae02:	548b      	strb	r3, [r1, r2]
1000ae04:	e00b      	b.n	1000ae1e <sms_mpu_poll_data+0x4e>
        mpu_device.temp_cnt = 0;
1000ae06:	4c14      	ldr	r4, [pc, #80]	; (1000ae58 <sms_mpu_poll_data+0x88>)
1000ae08:	2200      	movs	r2, #0
1000ae0a:	232d      	movs	r3, #45	; 0x2d
1000ae0c:	54e2      	strb	r2, [r4, r3]
        mpu_get_temperature(&mpu_device.hal.temperature, &sensor_timestamp);
1000ae0e:	0020      	movs	r0, r4
1000ae10:	3020      	adds	r0, #32
1000ae12:	a902      	add	r1, sp, #8
1000ae14:	4b12      	ldr	r3, [pc, #72]	; (1000ae60 <sms_mpu_poll_data+0x90>)
1000ae16:	4798      	blx	r3
        mpu_device.new_temp = true;
1000ae18:	2201      	movs	r2, #1
1000ae1a:	232f      	movs	r3, #47	; 0x2f
1000ae1c:	54e2      	strb	r2, [r4, r3]
    }
    
    if(mpu_device.compass_cnt++ > SMS_MPU_COMPASS_MULTIPLIER) {
1000ae1e:	232c      	movs	r3, #44	; 0x2c
1000ae20:	4a0d      	ldr	r2, [pc, #52]	; (1000ae58 <sms_mpu_poll_data+0x88>)
1000ae22:	5cd3      	ldrb	r3, [r2, r3]
1000ae24:	2b01      	cmp	r3, #1
1000ae26:	d804      	bhi.n	1000ae32 <sms_mpu_poll_data+0x62>
1000ae28:	3301      	adds	r3, #1
1000ae2a:	222c      	movs	r2, #44	; 0x2c
1000ae2c:	490a      	ldr	r1, [pc, #40]	; (1000ae58 <sms_mpu_poll_data+0x88>)
1000ae2e:	548b      	strb	r3, [r1, r2]
1000ae30:	e00b      	b.n	1000ae4a <sms_mpu_poll_data+0x7a>
        mpu_device.compass_cnt = 0;
1000ae32:	4c09      	ldr	r4, [pc, #36]	; (1000ae58 <sms_mpu_poll_data+0x88>)
1000ae34:	2200      	movs	r2, #0
1000ae36:	232c      	movs	r3, #44	; 0x2c
1000ae38:	54e2      	strb	r2, [r4, r3]
        mpu_get_compass_reg(mpu_device.hal.compass, &sensor_timestamp);
1000ae3a:	0020      	movs	r0, r4
1000ae3c:	3018      	adds	r0, #24
1000ae3e:	a902      	add	r1, sp, #8
1000ae40:	4b08      	ldr	r3, [pc, #32]	; (1000ae64 <sms_mpu_poll_data+0x94>)
1000ae42:	4798      	blx	r3
        mpu_device.new_compass = true;
1000ae44:	2201      	movs	r2, #1
1000ae46:	232e      	movs	r3, #46	; 0x2e
1000ae48:	54e2      	strb	r2, [r4, r3]
    }
    sms_ble_send_characteristic(BLE_CHAR_MPU);    
1000ae4a:	2003      	movs	r0, #3
1000ae4c:	4b06      	ldr	r3, [pc, #24]	; (1000ae68 <sms_mpu_poll_data+0x98>)
1000ae4e:	4798      	blx	r3

    return 0;
}
1000ae50:	2000      	movs	r0, #0
1000ae52:	b005      	add	sp, #20
1000ae54:	bd30      	pop	{r4, r5, pc}
1000ae56:	46c0      	nop			; (mov r8, r8)
1000ae58:	1001a188 	.word	0x1001a188
1000ae5c:	10008b41 	.word	0x10008b41
1000ae60:	10008555 	.word	0x10008555
1000ae64:	1000974d 	.word	0x1000974d
1000ae68:	1000a261 	.word	0x1000a261

1000ae6c <sms_mpu_define_services>:

void sms_mpu_define_services(void)
{
1000ae6c:	b510      	push	{r4, lr}
1000ae6e:	b082      	sub	sp, #8
    at_ble_status_t status;
    uint8_t init_value = 0;
1000ae70:	466b      	mov	r3, sp
1000ae72:	1dda      	adds	r2, r3, #7
1000ae74:	2300      	movs	r3, #0
1000ae76:	7013      	strb	r3, [r2, #0]
    sms_ble_service_init(BLE_SERV_MPU, &mpu_device.service_handler, &init_value);
1000ae78:	4c0e      	ldr	r4, [pc, #56]	; (1000aeb4 <sms_mpu_define_services+0x48>)
1000ae7a:	0021      	movs	r1, r4
1000ae7c:	2002      	movs	r0, #2
1000ae7e:	4b0e      	ldr	r3, [pc, #56]	; (1000aeb8 <sms_mpu_define_services+0x4c>)
1000ae80:	4798      	blx	r3
    if((status = sms_ble_primary_service_define(&mpu_device.service_handler)) != AT_BLE_SUCCESS) {
1000ae82:	0020      	movs	r0, r4
1000ae84:	4b0d      	ldr	r3, [pc, #52]	; (1000aebc <sms_mpu_define_services+0x50>)
1000ae86:	4798      	blx	r3
1000ae88:	1e04      	subs	r4, r0, #0
1000ae8a:	d007      	beq.n	1000ae9c <sms_mpu_define_services+0x30>
        DBG_LOG("[sms_mpu_define_services]\tServices defining failed, reason 0x%x", status);
1000ae8c:	480c      	ldr	r0, [pc, #48]	; (1000aec0 <sms_mpu_define_services+0x54>)
1000ae8e:	4b0d      	ldr	r3, [pc, #52]	; (1000aec4 <sms_mpu_define_services+0x58>)
1000ae90:	4798      	blx	r3
1000ae92:	0021      	movs	r1, r4
1000ae94:	480c      	ldr	r0, [pc, #48]	; (1000aec8 <sms_mpu_define_services+0x5c>)
1000ae96:	4b0d      	ldr	r3, [pc, #52]	; (1000aecc <sms_mpu_define_services+0x60>)
1000ae98:	4798      	blx	r3
1000ae9a:	e008      	b.n	1000aeae <sms_mpu_define_services+0x42>
    }
    else {
        DBG_LOG_DEV("[sms_mpu_define_services]\tServices defined, SMS MPU handle: %d", mpu_device.service_handler.serv_handle);
1000ae9c:	4808      	ldr	r0, [pc, #32]	; (1000aec0 <sms_mpu_define_services+0x54>)
1000ae9e:	4b09      	ldr	r3, [pc, #36]	; (1000aec4 <sms_mpu_define_services+0x58>)
1000aea0:	4798      	blx	r3
1000aea2:	2346      	movs	r3, #70	; 0x46
1000aea4:	4a0a      	ldr	r2, [pc, #40]	; (1000aed0 <sms_mpu_define_services+0x64>)
1000aea6:	5ad1      	ldrh	r1, [r2, r3]
1000aea8:	480a      	ldr	r0, [pc, #40]	; (1000aed4 <sms_mpu_define_services+0x68>)
1000aeaa:	4b08      	ldr	r3, [pc, #32]	; (1000aecc <sms_mpu_define_services+0x60>)
1000aeac:	4798      	blx	r3
    }
1000aeae:	b002      	add	sp, #8
1000aeb0:	bd10      	pop	{r4, pc}
1000aeb2:	46c0      	nop			; (mov r8, r8)
1000aeb4:	1001a1bc 	.word	0x1001a1bc
1000aeb8:	1000a439 	.word	0x1000a439
1000aebc:	1000a415 	.word	0x1000a415
1000aec0:	10016660 	.word	0x10016660
1000aec4:	100154a1 	.word	0x100154a1
1000aec8:	10017020 	.word	0x10017020
1000aecc:	10015381 	.word	0x10015381
1000aed0:	1001a188 	.word	0x1001a188
1000aed4:	10017060 	.word	0x10017060

1000aed8 <sms_led_switch_on>:
    sms_led_switch_off(SMS_LED_0_PIN);
}


void sms_led_switch_on(enum sms_leds led)
{
1000aed8:	b510      	push	{r4, lr}
    gpio_pin_set_output_level(led, SMS_LED_ACTIVE);
1000aeda:	2100      	movs	r1, #0
1000aedc:	4b01      	ldr	r3, [pc, #4]	; (1000aee4 <sms_led_switch_on+0xc>)
1000aede:	4798      	blx	r3
}
1000aee0:	bd10      	pop	{r4, pc}
1000aee2:	46c0      	nop			; (mov r8, r8)
1000aee4:	1000c3d9 	.word	0x1000c3d9

1000aee8 <sms_led_switch_off>:


void sms_led_switch_off(enum sms_leds led)
{
1000aee8:	b510      	push	{r4, lr}
    gpio_pin_set_output_level(led, SMS_LED_INACTIVE);
1000aeea:	2101      	movs	r1, #1
1000aeec:	4b01      	ldr	r3, [pc, #4]	; (1000aef4 <sms_led_switch_off+0xc>)
1000aeee:	4798      	blx	r3
}
1000aef0:	bd10      	pop	{r4, pc}
1000aef2:	46c0      	nop			; (mov r8, r8)
1000aef4:	1000c3d9 	.word	0x1000c3d9

1000aef8 <sms_led_gpio_init>:
 */ 

#include "sms_led.h"

void sms_led_gpio_init(void)
{
1000aef8:	b510      	push	{r4, lr}
1000aefa:	b082      	sub	sp, #8
    struct gpio_config config_gpio_pin;

    /* LED0 @ GPIO_LP_GPIO_22 */
    gpio_get_config_defaults(&config_gpio_pin);
1000aefc:	ac01      	add	r4, sp, #4
1000aefe:	0020      	movs	r0, r4
1000af00:	4b0a      	ldr	r3, [pc, #40]	; (1000af2c <sms_led_gpio_init+0x34>)
1000af02:	4798      	blx	r3
    config_gpio_pin.direction = GPIO_PIN_DIR_OUTPUT;
1000af04:	2301      	movs	r3, #1
1000af06:	7023      	strb	r3, [r4, #0]
    if(gpio_pin_set_config(SMS_LED_0_PIN, &config_gpio_pin) != STATUS_OK) {
1000af08:	0021      	movs	r1, r4
1000af0a:	2016      	movs	r0, #22
1000af0c:	4b08      	ldr	r3, [pc, #32]	; (1000af30 <sms_led_gpio_init+0x38>)
1000af0e:	4798      	blx	r3
1000af10:	2800      	cmp	r0, #0
1000af12:	d005      	beq.n	1000af20 <sms_led_gpio_init+0x28>
        DBG_LOG_DEV("[sms_led_gpio_init]\tproblem while setting up led0");
1000af14:	4807      	ldr	r0, [pc, #28]	; (1000af34 <sms_led_gpio_init+0x3c>)
1000af16:	4b08      	ldr	r3, [pc, #32]	; (1000af38 <sms_led_gpio_init+0x40>)
1000af18:	4798      	blx	r3
1000af1a:	4808      	ldr	r0, [pc, #32]	; (1000af3c <sms_led_gpio_init+0x44>)
1000af1c:	4b08      	ldr	r3, [pc, #32]	; (1000af40 <sms_led_gpio_init+0x48>)
1000af1e:	4798      	blx	r3
    }
    sms_led_switch_off(SMS_LED_0_PIN);
1000af20:	2016      	movs	r0, #22
1000af22:	4b08      	ldr	r3, [pc, #32]	; (1000af44 <sms_led_gpio_init+0x4c>)
1000af24:	4798      	blx	r3
}
1000af26:	b002      	add	sp, #8
1000af28:	bd10      	pop	{r4, pc}
1000af2a:	46c0      	nop			; (mov r8, r8)
1000af2c:	1000c171 	.word	0x1000c171
1000af30:	1000c181 	.word	0x1000c181
1000af34:	10016660 	.word	0x10016660
1000af38:	100154a1 	.word	0x100154a1
1000af3c:	100170a0 	.word	0x100170a0
1000af40:	10015381 	.word	0x10015381
1000af44:	1000aee9 	.word	0x1000aee9

1000af48 <sms_led_toggle>:
    gpio_pin_set_output_level(led, SMS_LED_INACTIVE);
}


void sms_led_toggle(enum sms_leds led)
{
1000af48:	b510      	push	{r4, lr}
1000af4a:	0004      	movs	r4, r0
}


bool sms_led_get_state(enum sms_leds led)
{
    return gpio_pin_get_output_level(led);
1000af4c:	4b05      	ldr	r3, [pc, #20]	; (1000af64 <sms_led_toggle+0x1c>)
1000af4e:	4798      	blx	r3


void sms_led_toggle(enum sms_leds led)
{
    bool state = sms_led_get_state(led);
    if(state == SMS_LED_ACTIVE) sms_led_switch_off(led);
1000af50:	2800      	cmp	r0, #0
1000af52:	d103      	bne.n	1000af5c <sms_led_toggle+0x14>
1000af54:	0020      	movs	r0, r4
1000af56:	4b04      	ldr	r3, [pc, #16]	; (1000af68 <sms_led_toggle+0x20>)
1000af58:	4798      	blx	r3
1000af5a:	e002      	b.n	1000af62 <sms_led_toggle+0x1a>
    else sms_led_switch_on(led);
1000af5c:	0020      	movs	r0, r4
1000af5e:	4b03      	ldr	r3, [pc, #12]	; (1000af6c <sms_led_toggle+0x24>)
1000af60:	4798      	blx	r3
}
1000af62:	bd10      	pop	{r4, pc}
1000af64:	1000c389 	.word	0x1000c389
1000af68:	1000aee9 	.word	0x1000aee9
1000af6c:	1000aed9 	.word	0x1000aed9

1000af70 <sms_led_blink_start>:
    return gpio_pin_get_output_level(led);
}


void sms_led_blink_start(enum sms_leds led)
{
1000af70:	b510      	push	{r4, lr}
    sms_led_switch_on(led);
1000af72:	4b0c      	ldr	r3, [pc, #48]	; (1000afa4 <sms_led_blink_start+0x34>)
1000af74:	4798      	blx	r3
    sms_led_blink_cnt = 0;
1000af76:	2200      	movs	r2, #0
1000af78:	4b0b      	ldr	r3, [pc, #44]	; (1000afa8 <sms_led_blink_start+0x38>)
1000af7a:	701a      	strb	r2, [r3, #0]
    uint32_t delay = 0;
    switch(timer2_current_mode) {
1000af7c:	4b0b      	ldr	r3, [pc, #44]	; (1000afac <sms_led_blink_start+0x3c>)
1000af7e:	781b      	ldrb	r3, [r3, #0]
1000af80:	b2db      	uxtb	r3, r3
1000af82:	2b02      	cmp	r3, #2
1000af84:	d002      	beq.n	1000af8c <sms_led_blink_start+0x1c>
1000af86:	2b03      	cmp	r3, #3
1000af88:	d002      	beq.n	1000af90 <sms_led_blink_start+0x20>
1000af8a:	e004      	b.n	1000af96 <sms_led_blink_start+0x26>
        case TIMER2_MODE_LED_STARTUP:
        delay = SMS_BLINK_STARTUP_MS;
1000af8c:	2164      	movs	r1, #100	; 0x64
1000af8e:	e003      	b.n	1000af98 <sms_led_blink_start+0x28>
        break;
        
        case TIMER2_MODE_LED_SHUTDOWN:
        delay = SMS_BLINK_SHTDWN_MS;
1000af90:	21c8      	movs	r1, #200	; 0xc8
1000af92:	0049      	lsls	r1, r1, #1
        break;
1000af94:	e000      	b.n	1000af98 <sms_led_blink_start+0x28>

void sms_led_blink_start(enum sms_leds led)
{
    sms_led_switch_on(led);
    sms_led_blink_cnt = 0;
    uint32_t delay = 0;
1000af96:	2100      	movs	r1, #0
        
        default:
        break;
    }

    sms_dualtimer_start(TIMER_UNIT_MS, delay, DUALTIMER_TIMER2);
1000af98:	2201      	movs	r2, #1
1000af9a:	2001      	movs	r0, #1
1000af9c:	4b04      	ldr	r3, [pc, #16]	; (1000afb0 <sms_led_blink_start+0x40>)
1000af9e:	4798      	blx	r3
}
1000afa0:	bd10      	pop	{r4, pc}
1000afa2:	46c0      	nop			; (mov r8, r8)
1000afa4:	1000aed9 	.word	0x1000aed9
1000afa8:	1001a354 	.word	0x1001a354
1000afac:	1001a331 	.word	0x1001a331
1000afb0:	1000b6b9 	.word	0x1000b6b9

1000afb4 <sms_pressure_ms58_reset>:
    }
    return STATUS_ERR_IO;
}

void sms_pressure_ms58_reset(void)
{
1000afb4:	b510      	push	{r4, lr}
1000afb6:	b082      	sub	sp, #8
    //DBG_LOG_DEV("[sms_pressure_ms58_reset]\twriting reset command");
    spi_wdata[0] = MS58_RESET;
1000afb8:	4a05      	ldr	r2, [pc, #20]	; (1000afd0 <sms_pressure_ms58_reset+0x1c>)
1000afba:	231e      	movs	r3, #30
1000afbc:	7013      	strb	r3, [r2, #0]
    sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 1);
1000afbe:	3b1d      	subs	r3, #29
1000afc0:	9300      	str	r3, [sp, #0]
1000afc2:	4b04      	ldr	r3, [pc, #16]	; (1000afd4 <sms_pressure_ms58_reset+0x20>)
1000afc4:	4904      	ldr	r1, [pc, #16]	; (1000afd8 <sms_pressure_ms58_reset+0x24>)
1000afc6:	4805      	ldr	r0, [pc, #20]	; (1000afdc <sms_pressure_ms58_reset+0x28>)
1000afc8:	4c05      	ldr	r4, [pc, #20]	; (1000afe0 <sms_pressure_ms58_reset+0x2c>)
1000afca:	47a0      	blx	r4
}
1000afcc:	b002      	add	sp, #8
1000afce:	bd10      	pop	{r4, pc}
1000afd0:	1001a284 	.word	0x1001a284
1000afd4:	1001a274 	.word	0x1001a274
1000afd8:	1001a334 	.word	0x1001a334
1000afdc:	1001a340 	.word	0x1001a340
1000afe0:	1000b591 	.word	0x1000b591

1000afe4 <sms_pressure_ms58_read_prom>:

enum status_code sms_pressure_ms58_read_prom(void)
{
1000afe4:	b5f0      	push	{r4, r5, r6, r7, lr}
1000afe6:	4657      	mov	r7, sl
1000afe8:	b480      	push	{r7}
1000afea:	b082      	sub	sp, #8
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] reading bytes... ");
    spi_wdata[0] = MS58_PROM_READ_1;
1000afec:	4d37      	ldr	r5, [pc, #220]	; (1000b0cc <sms_pressure_ms58_read_prom+0xe8>)
1000afee:	23a2      	movs	r3, #162	; 0xa2
1000aff0:	702b      	strb	r3, [r5, #0]
    spi_wdata[1] = 0x00;
1000aff2:	2300      	movs	r3, #0
1000aff4:	706b      	strb	r3, [r5, #1]
    spi_wdata[2] = 0x00;
1000aff6:	70ab      	strb	r3, [r5, #2]
    sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3);
1000aff8:	4c35      	ldr	r4, [pc, #212]	; (1000b0d0 <sms_pressure_ms58_read_prom+0xec>)
1000affa:	3303      	adds	r3, #3
1000affc:	469a      	mov	sl, r3
1000affe:	9300      	str	r3, [sp, #0]
1000b000:	0023      	movs	r3, r4
1000b002:	002a      	movs	r2, r5
1000b004:	4933      	ldr	r1, [pc, #204]	; (1000b0d4 <sms_pressure_ms58_read_prom+0xf0>)
1000b006:	4834      	ldr	r0, [pc, #208]	; (1000b0d8 <sms_pressure_ms58_read_prom+0xf4>)
1000b008:	4f34      	ldr	r7, [pc, #208]	; (1000b0dc <sms_pressure_ms58_read_prom+0xf8>)
1000b00a:	47b8      	blx	r7
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.hal.prom_values[1] = (spi_rdata[1] << 8) | (spi_rdata[2]);
1000b00c:	4e34      	ldr	r6, [pc, #208]	; (1000b0e0 <sms_pressure_ms58_read_prom+0xfc>)
1000b00e:	7863      	ldrb	r3, [r4, #1]
1000b010:	021b      	lsls	r3, r3, #8
1000b012:	78a2      	ldrb	r2, [r4, #2]
1000b014:	4313      	orrs	r3, r2
1000b016:	80f3      	strh	r3, [r6, #6]

    spi_wdata[0] = MS58_PROM_READ_2;
1000b018:	23a4      	movs	r3, #164	; 0xa4
1000b01a:	702b      	strb	r3, [r5, #0]
    sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3);
1000b01c:	4653      	mov	r3, sl
1000b01e:	9300      	str	r3, [sp, #0]
1000b020:	0023      	movs	r3, r4
1000b022:	002a      	movs	r2, r5
1000b024:	492b      	ldr	r1, [pc, #172]	; (1000b0d4 <sms_pressure_ms58_read_prom+0xf0>)
1000b026:	482c      	ldr	r0, [pc, #176]	; (1000b0d8 <sms_pressure_ms58_read_prom+0xf4>)
1000b028:	47b8      	blx	r7
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r  wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r  wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.hal.prom_values[2] = (spi_rdata[1] << 8) | (spi_rdata[2]);
1000b02a:	7863      	ldrb	r3, [r4, #1]
1000b02c:	021b      	lsls	r3, r3, #8
1000b02e:	78a2      	ldrb	r2, [r4, #2]
1000b030:	4313      	orrs	r3, r2
1000b032:	8133      	strh	r3, [r6, #8]

    spi_wdata[0] = MS58_PROM_READ_3;
1000b034:	23a6      	movs	r3, #166	; 0xa6
1000b036:	702b      	strb	r3, [r5, #0]
    sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3);
1000b038:	4653      	mov	r3, sl
1000b03a:	9300      	str	r3, [sp, #0]
1000b03c:	0023      	movs	r3, r4
1000b03e:	002a      	movs	r2, r5
1000b040:	4924      	ldr	r1, [pc, #144]	; (1000b0d4 <sms_pressure_ms58_read_prom+0xf0>)
1000b042:	4825      	ldr	r0, [pc, #148]	; (1000b0d8 <sms_pressure_ms58_read_prom+0xf4>)
1000b044:	47b8      	blx	r7
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r  wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r  wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.hal.prom_values[3] = (spi_rdata[1] << 8) | (spi_rdata[2]);
1000b046:	7863      	ldrb	r3, [r4, #1]
1000b048:	021b      	lsls	r3, r3, #8
1000b04a:	78a2      	ldrb	r2, [r4, #2]
1000b04c:	4313      	orrs	r3, r2
1000b04e:	8173      	strh	r3, [r6, #10]

    spi_wdata[0] = MS58_PROM_READ_4;
1000b050:	23a8      	movs	r3, #168	; 0xa8
1000b052:	702b      	strb	r3, [r5, #0]
    sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3);
1000b054:	4653      	mov	r3, sl
1000b056:	9300      	str	r3, [sp, #0]
1000b058:	0023      	movs	r3, r4
1000b05a:	002a      	movs	r2, r5
1000b05c:	491d      	ldr	r1, [pc, #116]	; (1000b0d4 <sms_pressure_ms58_read_prom+0xf0>)
1000b05e:	481e      	ldr	r0, [pc, #120]	; (1000b0d8 <sms_pressure_ms58_read_prom+0xf4>)
1000b060:	47b8      	blx	r7
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r  wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r  wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.hal.prom_values[4] = (spi_rdata[1] << 8) | (spi_rdata[2]);
1000b062:	7863      	ldrb	r3, [r4, #1]
1000b064:	021b      	lsls	r3, r3, #8
1000b066:	78a2      	ldrb	r2, [r4, #2]
1000b068:	4313      	orrs	r3, r2
1000b06a:	81b3      	strh	r3, [r6, #12]

    spi_wdata[0] = MS58_PROM_READ_5;
1000b06c:	23aa      	movs	r3, #170	; 0xaa
1000b06e:	702b      	strb	r3, [r5, #0]
    sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3);
1000b070:	4653      	mov	r3, sl
1000b072:	9300      	str	r3, [sp, #0]
1000b074:	0023      	movs	r3, r4
1000b076:	002a      	movs	r2, r5
1000b078:	4916      	ldr	r1, [pc, #88]	; (1000b0d4 <sms_pressure_ms58_read_prom+0xf0>)
1000b07a:	4817      	ldr	r0, [pc, #92]	; (1000b0d8 <sms_pressure_ms58_read_prom+0xf4>)
1000b07c:	47b8      	blx	r7
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r  wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r  wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.hal.prom_values[5] = (spi_rdata[1] << 8) | (spi_rdata[2]);
1000b07e:	7863      	ldrb	r3, [r4, #1]
1000b080:	021b      	lsls	r3, r3, #8
1000b082:	78a2      	ldrb	r2, [r4, #2]
1000b084:	4313      	orrs	r3, r2
1000b086:	81f3      	strh	r3, [r6, #14]

    spi_wdata[0] = MS58_PROM_READ_6;
1000b088:	23ac      	movs	r3, #172	; 0xac
1000b08a:	702b      	strb	r3, [r5, #0]
    sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3);
1000b08c:	4653      	mov	r3, sl
1000b08e:	9300      	str	r3, [sp, #0]
1000b090:	0023      	movs	r3, r4
1000b092:	002a      	movs	r2, r5
1000b094:	490f      	ldr	r1, [pc, #60]	; (1000b0d4 <sms_pressure_ms58_read_prom+0xf0>)
1000b096:	4810      	ldr	r0, [pc, #64]	; (1000b0d8 <sms_pressure_ms58_read_prom+0xf4>)
1000b098:	47b8      	blx	r7
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r  wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r  wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.hal.prom_values[6] = (spi_rdata[1] << 8) | (spi_rdata[2]);
1000b09a:	7863      	ldrb	r3, [r4, #1]
1000b09c:	021b      	lsls	r3, r3, #8
1000b09e:	78a2      	ldrb	r2, [r4, #2]
1000b0a0:	4313      	orrs	r3, r2
1000b0a2:	8233      	strh	r3, [r6, #16]

    spi_wdata[0] = MS58_PROM_READ_7;
1000b0a4:	23ae      	movs	r3, #174	; 0xae
1000b0a6:	702b      	strb	r3, [r5, #0]
    sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3);
1000b0a8:	4653      	mov	r3, sl
1000b0aa:	9300      	str	r3, [sp, #0]
1000b0ac:	0023      	movs	r3, r4
1000b0ae:	002a      	movs	r2, r5
1000b0b0:	4908      	ldr	r1, [pc, #32]	; (1000b0d4 <sms_pressure_ms58_read_prom+0xf0>)
1000b0b2:	4809      	ldr	r0, [pc, #36]	; (1000b0d8 <sms_pressure_ms58_read_prom+0xf4>)
1000b0b4:	47b8      	blx	r7
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r  wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r  wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.hal.prom_values[7] = (spi_rdata[1] << 8) | (spi_rdata[2]);
1000b0b6:	7863      	ldrb	r3, [r4, #1]
1000b0b8:	021b      	lsls	r3, r3, #8
1000b0ba:	78a2      	ldrb	r2, [r4, #2]
1000b0bc:	4313      	orrs	r3, r2
1000b0be:	8273      	strh	r3, [r6, #18]
    //for(uint8_t i = 1; i < MS58_PROM_VALUES_MAX; i++) {
        //DBG_LOG_DEV("  C%d -> %d", (i+1), ms58_device.prom_values[i]);
    //}

    return STATUS_OK;
}
1000b0c0:	2000      	movs	r0, #0
1000b0c2:	b002      	add	sp, #8
1000b0c4:	bc04      	pop	{r2}
1000b0c6:	4692      	mov	sl, r2
1000b0c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000b0ca:	46c0      	nop			; (mov r8, r8)
1000b0cc:	1001a284 	.word	0x1001a284
1000b0d0:	1001a274 	.word	0x1001a274
1000b0d4:	1001a334 	.word	0x1001a334
1000b0d8:	1001a340 	.word	0x1001a340
1000b0dc:	1000b591 	.word	0x1000b591
1000b0e0:	1001a294 	.word	0x1001a294

1000b0e4 <sms_pressure_init>:
    
    ulp_ready = true;
}

enum status_code sms_pressure_init(void)
{
1000b0e4:	b510      	push	{r4, lr}
    /* Read the PROM values */
    if(sms_pressure_ms58_read_prom() == STATUS_OK) {
1000b0e6:	4b06      	ldr	r3, [pc, #24]	; (1000b100 <sms_pressure_init+0x1c>)
1000b0e8:	4798      	blx	r3
1000b0ea:	2800      	cmp	r0, #0
1000b0ec:	d106      	bne.n	1000b0fc <sms_pressure_init+0x18>
        pressure_device.hal.init_ok = true;
1000b0ee:	4b05      	ldr	r3, [pc, #20]	; (1000b104 <sms_pressure_init+0x20>)
1000b0f0:	2201      	movs	r2, #1
1000b0f2:	705a      	strb	r2, [r3, #1]
        pressure_device.hal.current_state = MS58_STATE_READY;
1000b0f4:	2102      	movs	r1, #2
1000b0f6:	3224      	adds	r2, #36	; 0x24
1000b0f8:	5499      	strb	r1, [r3, r2]
        /* Enable buttons again */
        //sms_button_toggle_interrupts(SMS_EXTINT_ENABLE);
        return STATUS_OK;
1000b0fa:	e000      	b.n	1000b0fe <sms_pressure_init+0x1a>
    }
    return STATUS_ERR_IO;
1000b0fc:	2010      	movs	r0, #16
}
1000b0fe:	bd10      	pop	{r4, pc}
1000b100:	1000afe5 	.word	0x1000afe5
1000b104:	1001a294 	.word	0x1001a294

1000b108 <sms_pressure_startup>:
    gpio_pin_set_output_level(SMS_PRESSURE_VCC_PIN, false);
}


void sms_pressure_startup(void)
{
1000b108:	b510      	push	{r4, lr}
    DBG_LOG_DEV("[sms_pressure_startup]\t\tStarting pressure sensor");
1000b10a:	4817      	ldr	r0, [pc, #92]	; (1000b168 <sms_pressure_startup+0x60>)
1000b10c:	4b17      	ldr	r3, [pc, #92]	; (1000b16c <sms_pressure_startup+0x64>)
1000b10e:	4798      	blx	r3
1000b110:	4817      	ldr	r0, [pc, #92]	; (1000b170 <sms_pressure_startup+0x68>)
1000b112:	4b18      	ldr	r3, [pc, #96]	; (1000b174 <sms_pressure_startup+0x6c>)
1000b114:	4798      	blx	r3
    //gpio_pin_set_output_level(SMS_PRESSURE_VCC_PIN, true); // switch on MS58 pressure sensor
    /* Disable buttons for reset time (~3 ms) to avoid conflict with dualtimer1 */
    sms_button_toggle_interrupt(SMS_BTN_INT_DISABLE, SMS_BTN_INT_DISABLE);
1000b116:	2101      	movs	r1, #1
1000b118:	2001      	movs	r0, #1
1000b11a:	4b17      	ldr	r3, [pc, #92]	; (1000b178 <sms_pressure_startup+0x70>)
1000b11c:	4798      	blx	r3
    pressure_device.hal.current_state = MS58_STATE_RESETTING;
1000b11e:	2101      	movs	r1, #1
1000b120:	2325      	movs	r3, #37	; 0x25
1000b122:	4a16      	ldr	r2, [pc, #88]	; (1000b17c <sms_pressure_startup+0x74>)
1000b124:	54d1      	strb	r1, [r2, r3]
    /* Write the reset command to MS58 */
    sms_pressure_ms58_reset();
1000b126:	4b16      	ldr	r3, [pc, #88]	; (1000b180 <sms_pressure_startup+0x78>)
1000b128:	4798      	blx	r3
    delay_ms(3);
1000b12a:	2003      	movs	r0, #3
1000b12c:	4b15      	ldr	r3, [pc, #84]	; (1000b184 <sms_pressure_startup+0x7c>)
1000b12e:	4798      	blx	r3
    if(sms_pressure_init() != STATUS_OK) {
1000b130:	4b15      	ldr	r3, [pc, #84]	; (1000b188 <sms_pressure_startup+0x80>)
1000b132:	4798      	blx	r3
1000b134:	2800      	cmp	r0, #0
1000b136:	d006      	beq.n	1000b146 <sms_pressure_startup+0x3e>
        DBG_LOG_DEV("[sms_pressure_startup]\t\t\tFailed to initialize pressure device");
1000b138:	480b      	ldr	r0, [pc, #44]	; (1000b168 <sms_pressure_startup+0x60>)
1000b13a:	4b0c      	ldr	r3, [pc, #48]	; (1000b16c <sms_pressure_startup+0x64>)
1000b13c:	4798      	blx	r3
1000b13e:	4813      	ldr	r0, [pc, #76]	; (1000b18c <sms_pressure_startup+0x84>)
1000b140:	4b0c      	ldr	r3, [pc, #48]	; (1000b174 <sms_pressure_startup+0x6c>)
1000b142:	4798      	blx	r3
1000b144:	e7fe      	b.n	1000b144 <sms_pressure_startup+0x3c>
        pressure_device.hal.init_ok = false;
        while(1){};
    }
    pressure_device.hal.current_state = MS58_STATE_READY;
1000b146:	4b0d      	ldr	r3, [pc, #52]	; (1000b17c <sms_pressure_startup+0x74>)
1000b148:	2102      	movs	r1, #2
1000b14a:	2225      	movs	r2, #37	; 0x25
1000b14c:	5499      	strb	r1, [r3, r2]
    pressure_device.hal.init_ok = true;
1000b14e:	2401      	movs	r4, #1
1000b150:	705c      	strb	r4, [r3, #1]
    sms_working_mode = SMS_MODE_COMPLETE;
1000b152:	3a1e      	subs	r2, #30
1000b154:	4b0e      	ldr	r3, [pc, #56]	; (1000b190 <sms_pressure_startup+0x88>)
1000b156:	701a      	strb	r2, [r3, #0]
    sms_sensors_interrupt_toggle(true, true);
1000b158:	3901      	subs	r1, #1
1000b15a:	2001      	movs	r0, #1
1000b15c:	4b0d      	ldr	r3, [pc, #52]	; (1000b194 <sms_pressure_startup+0x8c>)
1000b15e:	4798      	blx	r3
    
    ulp_ready = true;
1000b160:	4b0d      	ldr	r3, [pc, #52]	; (1000b198 <sms_pressure_startup+0x90>)
1000b162:	701c      	strb	r4, [r3, #0]
}
1000b164:	bd10      	pop	{r4, pc}
1000b166:	46c0      	nop			; (mov r8, r8)
1000b168:	10016660 	.word	0x10016660
1000b16c:	100154a1 	.word	0x100154a1
1000b170:	10017114 	.word	0x10017114
1000b174:	10015381 	.word	0x10015381
1000b178:	1000a8e5 	.word	0x1000a8e5
1000b17c:	1001a294 	.word	0x1001a294
1000b180:	1000afb5 	.word	0x1000afb5
1000b184:	10008129 	.word	0x10008129
1000b188:	1000b0e5 	.word	0x1000b0e5
1000b18c:	10017148 	.word	0x10017148
1000b190:	1001a218 	.word	0x1001a218
1000b194:	1000b409 	.word	0x1000b409
1000b198:	1001a219 	.word	0x1001a219

1000b19c <sms_pressure_ms58_read_data>:
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
    }        
}

enum status_code sms_pressure_ms58_read_data(void)
{
1000b19c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000b19e:	4657      	mov	r7, sl
1000b1a0:	464e      	mov	r6, r9
1000b1a2:	b4c0      	push	{r6, r7}
1000b1a4:	b083      	sub	sp, #12
    switch(pressure_device.hal.current_state) {
1000b1a6:	2325      	movs	r3, #37	; 0x25
1000b1a8:	4a2c      	ldr	r2, [pc, #176]	; (1000b25c <sms_pressure_ms58_read_data+0xc0>)
1000b1aa:	5cd3      	ldrb	r3, [r2, r3]
1000b1ac:	2b03      	cmp	r3, #3
1000b1ae:	d002      	beq.n	1000b1b6 <sms_pressure_ms58_read_data+0x1a>
1000b1b0:	2b04      	cmp	r3, #4
1000b1b2:	d025      	beq.n	1000b200 <sms_pressure_ms58_read_data+0x64>
1000b1b4:	e04b      	b.n	1000b24e <sms_pressure_ms58_read_data+0xb2>
        case MS58_STATE_CONV_PRESSURE:
        //DBG_LOG_DEV("[sms_pressure_ms58_read_data] reading ADC pressure values...");
        spi_wdata[0] = MS58_ADC_READ;
1000b1b6:	4c2a      	ldr	r4, [pc, #168]	; (1000b260 <sms_pressure_ms58_read_data+0xc4>)
1000b1b8:	2300      	movs	r3, #0
1000b1ba:	7023      	strb	r3, [r4, #0]
        spi_wdata[1] = MS58_ADC_READ;
1000b1bc:	7063      	strb	r3, [r4, #1]
        spi_wdata[2] = MS58_ADC_READ;
1000b1be:	70a3      	strb	r3, [r4, #2]
        spi_wdata[3] = MS58_ADC_READ;
1000b1c0:	70e3      	strb	r3, [r4, #3]
        sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 4);
1000b1c2:	4d28      	ldr	r5, [pc, #160]	; (1000b264 <sms_pressure_ms58_read_data+0xc8>)
1000b1c4:	2704      	movs	r7, #4
1000b1c6:	9700      	str	r7, [sp, #0]
1000b1c8:	002b      	movs	r3, r5
1000b1ca:	0022      	movs	r2, r4
1000b1cc:	4926      	ldr	r1, [pc, #152]	; (1000b268 <sms_pressure_ms58_read_data+0xcc>)
1000b1ce:	4827      	ldr	r0, [pc, #156]	; (1000b26c <sms_pressure_ms58_read_data+0xd0>)
1000b1d0:	4e27      	ldr	r6, [pc, #156]	; (1000b270 <sms_pressure_ms58_read_data+0xd4>)
1000b1d2:	46b2      	mov	sl, r6
1000b1d4:	47b0      	blx	r6
        pressure_device.hal.adc_values[MS58_TYPE_PRESS] = ((spi_rdata[1] << 16) | (spi_rdata[2] << 8) | (spi_rdata[3]));
1000b1d6:	4e21      	ldr	r6, [pc, #132]	; (1000b25c <sms_pressure_ms58_read_data+0xc0>)
1000b1d8:	786b      	ldrb	r3, [r5, #1]
1000b1da:	041a      	lsls	r2, r3, #16
1000b1dc:	78ab      	ldrb	r3, [r5, #2]
1000b1de:	021b      	lsls	r3, r3, #8
1000b1e0:	4313      	orrs	r3, r2
1000b1e2:	78ea      	ldrb	r2, [r5, #3]
1000b1e4:	4313      	orrs	r3, r2
1000b1e6:	6173      	str	r3, [r6, #20]
        //DBG_LOG_DEV("[sms_pressure_ms58_read_data] D1 -> %ld", ms58_device.adc_values[MS58_TYPE_PRESS]);
        
        //DBG_LOG_DEV("[sms_pressure_ms58_read_data] starting D2 conversion");
        spi_wdata[0] = MS58_CONV_D2_512;
1000b1e8:	2352      	movs	r3, #82	; 0x52
1000b1ea:	7023      	strb	r3, [r4, #0]
        sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 1);
1000b1ec:	3b51      	subs	r3, #81	; 0x51
1000b1ee:	9300      	str	r3, [sp, #0]
1000b1f0:	002b      	movs	r3, r5
1000b1f2:	0022      	movs	r2, r4
1000b1f4:	491c      	ldr	r1, [pc, #112]	; (1000b268 <sms_pressure_ms58_read_data+0xcc>)
1000b1f6:	481d      	ldr	r0, [pc, #116]	; (1000b26c <sms_pressure_ms58_read_data+0xd0>)
1000b1f8:	47d0      	blx	sl
        pressure_device.hal.current_state = MS58_STATE_CONV_TEMPERATURE;
1000b1fa:	2325      	movs	r3, #37	; 0x25
1000b1fc:	54f7      	strb	r7, [r6, r3]
        break;
1000b1fe:	e026      	b.n	1000b24e <sms_pressure_ms58_read_data+0xb2>
        
        case MS58_STATE_CONV_TEMPERATURE:
        //DBG_LOG_DEV("[sms_pressure_ms58_read_data] reading ADC temperature values...");
        spi_wdata[0] = MS58_ADC_READ;
1000b200:	4c17      	ldr	r4, [pc, #92]	; (1000b260 <sms_pressure_ms58_read_data+0xc4>)
1000b202:	2300      	movs	r3, #0
1000b204:	7023      	strb	r3, [r4, #0]
        spi_wdata[1] = MS58_ADC_READ;
1000b206:	7063      	strb	r3, [r4, #1]
        spi_wdata[2] = MS58_ADC_READ;
1000b208:	70a3      	strb	r3, [r4, #2]
        spi_wdata[3] = MS58_ADC_READ;
1000b20a:	70e3      	strb	r3, [r4, #3]
        sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 4);
1000b20c:	4d15      	ldr	r5, [pc, #84]	; (1000b264 <sms_pressure_ms58_read_data+0xc8>)
1000b20e:	3304      	adds	r3, #4
1000b210:	9300      	str	r3, [sp, #0]
1000b212:	002b      	movs	r3, r5
1000b214:	0022      	movs	r2, r4
1000b216:	4914      	ldr	r1, [pc, #80]	; (1000b268 <sms_pressure_ms58_read_data+0xcc>)
1000b218:	4814      	ldr	r0, [pc, #80]	; (1000b26c <sms_pressure_ms58_read_data+0xd0>)
1000b21a:	4e15      	ldr	r6, [pc, #84]	; (1000b270 <sms_pressure_ms58_read_data+0xd4>)
1000b21c:	46b1      	mov	r9, r6
1000b21e:	47b0      	blx	r6
        pressure_device.hal.adc_values[MS58_TYPE_TEMP] = ((spi_rdata[1] << 16) | (spi_rdata[2] << 8) | (spi_rdata[3]));
1000b220:	4e0e      	ldr	r6, [pc, #56]	; (1000b25c <sms_pressure_ms58_read_data+0xc0>)
1000b222:	786b      	ldrb	r3, [r5, #1]
1000b224:	041a      	lsls	r2, r3, #16
1000b226:	78ab      	ldrb	r3, [r5, #2]
1000b228:	021b      	lsls	r3, r3, #8
1000b22a:	4313      	orrs	r3, r2
1000b22c:	78ea      	ldrb	r2, [r5, #3]
1000b22e:	4313      	orrs	r3, r2
1000b230:	61b3      	str	r3, [r6, #24]
        //DBG_LOG_DEV("[sms_pressure_ms58_read_data] D2 -> %ld", ms58_device.adc_values[MS58_TYPE_TEMP]);
        
        //DBG_LOG_DEV("[sms_pressure_ms58_read_data] starting D1 conversion");
        spi_wdata[0] = MS58_CONV_D1_512;
1000b232:	2342      	movs	r3, #66	; 0x42
1000b234:	7023      	strb	r3, [r4, #0]
        sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 1);
1000b236:	2701      	movs	r7, #1
1000b238:	9700      	str	r7, [sp, #0]
1000b23a:	002b      	movs	r3, r5
1000b23c:	0022      	movs	r2, r4
1000b23e:	490a      	ldr	r1, [pc, #40]	; (1000b268 <sms_pressure_ms58_read_data+0xcc>)
1000b240:	480a      	ldr	r0, [pc, #40]	; (1000b26c <sms_pressure_ms58_read_data+0xd0>)
1000b242:	47c8      	blx	r9
        pressure_device.hal.current_state = MS58_STATE_CONV_PRESSURE;
1000b244:	2203      	movs	r2, #3
1000b246:	2325      	movs	r3, #37	; 0x25
1000b248:	54f2      	strb	r2, [r6, r3]
        pressure_device.hal.data_complete = true;
1000b24a:	3b01      	subs	r3, #1
1000b24c:	54f7      	strb	r7, [r6, r3]
        case MS58_STATE_NONE:
        default:
        break;
    }
    return STATUS_OK;
}
1000b24e:	2000      	movs	r0, #0
1000b250:	b003      	add	sp, #12
1000b252:	bc0c      	pop	{r2, r3}
1000b254:	4691      	mov	r9, r2
1000b256:	469a      	mov	sl, r3
1000b258:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000b25a:	46c0      	nop			; (mov r8, r8)
1000b25c:	1001a294 	.word	0x1001a294
1000b260:	1001a284 	.word	0x1001a284
1000b264:	1001a274 	.word	0x1001a274
1000b268:	1001a334 	.word	0x1001a334
1000b26c:	1001a340 	.word	0x1001a340
1000b270:	1000b591 	.word	0x1000b591

1000b274 <sms_pressure_ms58_calculate>:

void sms_pressure_ms58_calculate(void)
{
1000b274:	b5f0      	push	{r4, r5, r6, r7, lr}
1000b276:	464f      	mov	r7, r9
1000b278:	b480      	push	{r7}
1000b27a:	b082      	sub	sp, #8
    ***************************/
    /* dT = D2 - Tref = D2 - C5*2^8 */
    /* tv1: 33464 * 2^8 = 8566784 */
    tv1 = ((int64_t)(pressure_device.hal.prom_values[5]) << 8);
    /* deltaT: 8569150 - 8566784 = 2366 */
    deltaT = (int32_t)((int64_t)pressure_device.hal.adc_values[MS58_TYPE_TEMP] - tv1);
1000b27c:	4d26      	ldr	r5, [pc, #152]	; (1000b318 <sms_pressure_ms58_calculate+0xa4>)

    /* TEMP = 20°C + dT*TEMPSENS = 2000 + dT * C6/2^23 */
    /* tv1: 28312 * 2366 = 66986192 */
    tv1 = ((int64_t)pressure_device.hal.prom_values[6] * (int64_t)deltaT);
1000b27e:	89ec      	ldrh	r4, [r5, #14]
1000b280:	0224      	lsls	r4, r4, #8
1000b282:	69ab      	ldr	r3, [r5, #24]
1000b284:	1b1c      	subs	r4, r3, r4
1000b286:	17e3      	asrs	r3, r4, #31
1000b288:	001e      	movs	r6, r3
    /* tv2: 66986192 / 2^23 = 7(.985376358) */
    tv2 = (tv1 >> 23);
    /* temp: 7 + 2000 = 2007 */
    pressure_device.hal.temperature = (int32_t)(tv2 + 2000);
1000b28a:	8a28      	ldrh	r0, [r5, #16]
1000b28c:	4a23      	ldr	r2, [pc, #140]	; (1000b31c <sms_pressure_ms58_calculate+0xa8>)
1000b28e:	4691      	mov	r9, r2
1000b290:	0022      	movs	r2, r4
1000b292:	2100      	movs	r1, #0
1000b294:	47c8      	blx	r9
1000b296:	0249      	lsls	r1, r1, #9
1000b298:	0dc0      	lsrs	r0, r0, #23
1000b29a:	4308      	orrs	r0, r1
1000b29c:	23fa      	movs	r3, #250	; 0xfa
1000b29e:	00db      	lsls	r3, r3, #3
1000b2a0:	469c      	mov	ip, r3
1000b2a2:	4460      	add	r0, ip
1000b2a4:	6228      	str	r0, [r5, #32]
    /* tv2: 23282 * 2366 = 55085212 */
    tv2 = ((int64_t)pressure_device.hal.prom_values[4] * (int64_t)deltaT);
    /* tv3: 55085212 / 2^7 = 430353(.21875) */
    tv3 = (tv2 >> 7);
    /* offset: 2419851264 + 430353 = 2420281617 */
    offset = (tv1 + tv3);
1000b2a6:	89a8      	ldrh	r0, [r5, #12]
1000b2a8:	0022      	movs	r2, r4
1000b2aa:	9601      	str	r6, [sp, #4]
1000b2ac:	0033      	movs	r3, r6
1000b2ae:	2100      	movs	r1, #0
1000b2b0:	47c8      	blx	r9
1000b2b2:	064e      	lsls	r6, r1, #25
1000b2b4:	09c2      	lsrs	r2, r0, #7
1000b2b6:	4332      	orrs	r2, r6
1000b2b8:	11cb      	asrs	r3, r1, #7
1000b2ba:	892e      	ldrh	r6, [r5, #8]
1000b2bc:	2100      	movs	r1, #0
1000b2be:	0430      	lsls	r0, r6, #16
1000b2c0:	1812      	adds	r2, r2, r0
1000b2c2:	414b      	adcs	r3, r1
1000b2c4:	0016      	movs	r6, r2
1000b2c6:	001f      	movs	r7, r3
    /* sensitivity: 1314881536 + 215500 = 1315097036 */
    sensitivity = (tv1 + tv3);

    /* P = D1*SENS - OFF = (D1*SENS/2^21 - OFF)/2^15 */
    /* tv1: (9085466 * 1315097036) / 2^21 = 5697378829(.612148284) */
    tv1 = (((int64_t)pressure_device.hal.adc_values[MS58_TYPE_PRESS] * sensitivity) >> 21);
1000b2c8:	8968      	ldrh	r0, [r5, #10]
1000b2ca:	0022      	movs	r2, r4
1000b2cc:	9b01      	ldr	r3, [sp, #4]
1000b2ce:	2100      	movs	r1, #0
1000b2d0:	47c8      	blx	r9
1000b2d2:	060c      	lsls	r4, r1, #24
1000b2d4:	0a02      	lsrs	r2, r0, #8
1000b2d6:	4322      	orrs	r2, r4
1000b2d8:	120b      	asrs	r3, r1, #8
1000b2da:	88ec      	ldrh	r4, [r5, #6]
1000b2dc:	2100      	movs	r1, #0
1000b2de:	03e0      	lsls	r0, r4, #15
1000b2e0:	1880      	adds	r0, r0, r2
1000b2e2:	4159      	adcs	r1, r3
1000b2e4:	696a      	ldr	r2, [r5, #20]
1000b2e6:	2300      	movs	r3, #0
1000b2e8:	47c8      	blx	r9
    /* tv2: 5697378829 - 2420281617 = 3277097212 */
    tv2 = tv1 - offset;
    /* press: 3277097212 / 2^15 = 100009(.070190) */
    pressure_device.hal.pressure = (int32_t)(tv2 >> 15);
1000b2ea:	02cc      	lsls	r4, r1, #11
1000b2ec:	0d42      	lsrs	r2, r0, #21
1000b2ee:	4322      	orrs	r2, r4
1000b2f0:	154b      	asrs	r3, r1, #21
1000b2f2:	1b92      	subs	r2, r2, r6
1000b2f4:	41bb      	sbcs	r3, r7
1000b2f6:	0011      	movs	r1, r2
1000b2f8:	045b      	lsls	r3, r3, #17
1000b2fa:	0bca      	lsrs	r2, r1, #15
1000b2fc:	431a      	orrs	r2, r3
1000b2fe:	61ea      	str	r2, [r5, #28]

    DBG_LOG_DEV("[sms_pressure_ms58_calculate] temperature = %ld  pressure = %ld", pressure_device.hal.temperature, pressure_device.hal.pressure);
1000b300:	4807      	ldr	r0, [pc, #28]	; (1000b320 <sms_pressure_ms58_calculate+0xac>)
1000b302:	4b08      	ldr	r3, [pc, #32]	; (1000b324 <sms_pressure_ms58_calculate+0xb0>)
1000b304:	4798      	blx	r3
1000b306:	69ea      	ldr	r2, [r5, #28]
1000b308:	6a29      	ldr	r1, [r5, #32]
1000b30a:	4807      	ldr	r0, [pc, #28]	; (1000b328 <sms_pressure_ms58_calculate+0xb4>)
1000b30c:	4b07      	ldr	r3, [pc, #28]	; (1000b32c <sms_pressure_ms58_calculate+0xb8>)
1000b30e:	4798      	blx	r3
}
1000b310:	b002      	add	sp, #8
1000b312:	bc04      	pop	{r2}
1000b314:	4691      	mov	r9, r2
1000b316:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000b318:	1001a294 	.word	0x1001a294
1000b31c:	10013511 	.word	0x10013511
1000b320:	10016660 	.word	0x10016660
1000b324:	100154a1 	.word	0x100154a1
1000b328:	10017188 	.word	0x10017188
1000b32c:	10015381 	.word	0x10015381

1000b330 <sms_pressure_poll_data>:

    return STATUS_OK;
}

void sms_pressure_poll_data(void)
{
1000b330:	b510      	push	{r4, lr}
    static uint32_t temp = 0x12345678;
    static uint32_t press = 0xfedcba98;
    if(ble_current_state == BLE_STATE_PAIRED) {
1000b332:	4b11      	ldr	r3, [pc, #68]	; (1000b378 <sms_pressure_poll_data+0x48>)
1000b334:	781b      	ldrb	r3, [r3, #0]
1000b336:	2b22      	cmp	r3, #34	; 0x22
1000b338:	d11d      	bne.n	1000b376 <sms_pressure_poll_data+0x46>
        DBG_LOG_DEV("[sms_pressure_poll_data]\tStarting data polling");
1000b33a:	4810      	ldr	r0, [pc, #64]	; (1000b37c <sms_pressure_poll_data+0x4c>)
1000b33c:	4b10      	ldr	r3, [pc, #64]	; (1000b380 <sms_pressure_poll_data+0x50>)
1000b33e:	4798      	blx	r3
1000b340:	4810      	ldr	r0, [pc, #64]	; (1000b384 <sms_pressure_poll_data+0x54>)
1000b342:	4b11      	ldr	r3, [pc, #68]	; (1000b388 <sms_pressure_poll_data+0x58>)
1000b344:	4798      	blx	r3
        if(sms_pressure_ms58_read_data() != STATUS_OK) {
1000b346:	4b11      	ldr	r3, [pc, #68]	; (1000b38c <sms_pressure_poll_data+0x5c>)
1000b348:	4798      	blx	r3
1000b34a:	2800      	cmp	r0, #0
1000b34c:	d006      	beq.n	1000b35c <sms_pressure_poll_data+0x2c>
            DBG_LOG_DEV("[sms_pressure_ms58_poll_data] problem reading ms58 data");
1000b34e:	480b      	ldr	r0, [pc, #44]	; (1000b37c <sms_pressure_poll_data+0x4c>)
1000b350:	4b0b      	ldr	r3, [pc, #44]	; (1000b380 <sms_pressure_poll_data+0x50>)
1000b352:	4798      	blx	r3
1000b354:	480e      	ldr	r0, [pc, #56]	; (1000b390 <sms_pressure_poll_data+0x60>)
1000b356:	4b0c      	ldr	r3, [pc, #48]	; (1000b388 <sms_pressure_poll_data+0x58>)
1000b358:	4798      	blx	r3
1000b35a:	e00c      	b.n	1000b376 <sms_pressure_poll_data+0x46>
        }
        else {
            ////DBG_LOG_DEV("[sms_pressure_poll_data]\tDone");
            if(pressure_device.hal.data_complete) {
1000b35c:	2324      	movs	r3, #36	; 0x24
1000b35e:	4a0d      	ldr	r2, [pc, #52]	; (1000b394 <sms_pressure_poll_data+0x64>)
1000b360:	5cd3      	ldrb	r3, [r2, r3]
1000b362:	2b00      	cmp	r3, #0
1000b364:	d007      	beq.n	1000b376 <sms_pressure_poll_data+0x46>
                pressure_device.hal.data_complete = false;
1000b366:	2100      	movs	r1, #0
1000b368:	2324      	movs	r3, #36	; 0x24
1000b36a:	54d1      	strb	r1, [r2, r3]
                sms_pressure_ms58_calculate();
1000b36c:	4b0a      	ldr	r3, [pc, #40]	; (1000b398 <sms_pressure_poll_data+0x68>)
1000b36e:	4798      	blx	r3
                //ms58_device.temperature = ( (ms58_device.temperature >= (int32_t)0xffffffff) ? (ms58_device.temperature = 0) : (ms58_device.temperature + 1) );
                //ms58_device.pressure = ( (ms58_device.pressure < 0) ? (ms58_device.pressure = 0xffffffff) : (ms58_device.pressure - 1) );
                sms_ble_send_characteristic(BLE_CHAR_PRESS);
1000b370:	2002      	movs	r0, #2
1000b372:	4b0a      	ldr	r3, [pc, #40]	; (1000b39c <sms_pressure_poll_data+0x6c>)
1000b374:	4798      	blx	r3
        }
    }
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
    }        
}
1000b376:	bd10      	pop	{r4, pc}
1000b378:	1001a330 	.word	0x1001a330
1000b37c:	10016660 	.word	0x10016660
1000b380:	100154a1 	.word	0x100154a1
1000b384:	100171c8 	.word	0x100171c8
1000b388:	10015381 	.word	0x10015381
1000b38c:	1000b19d 	.word	0x1000b19d
1000b390:	100171f8 	.word	0x100171f8
1000b394:	1001a294 	.word	0x1001a294
1000b398:	1000b275 	.word	0x1000b275
1000b39c:	1000a261 	.word	0x1000a261

1000b3a0 <sms_pressure_define_services>:
    DBG_LOG_DEV("[sms_pressure_ms58_calculate] temperature = %ld  pressure = %ld", pressure_device.hal.temperature, pressure_device.hal.pressure);
}


void sms_pressure_define_services(void)
{
1000b3a0:	b510      	push	{r4, lr}
1000b3a2:	b082      	sub	sp, #8
    at_ble_status_t status;
    uint8_t init_value = 0;
1000b3a4:	466b      	mov	r3, sp
1000b3a6:	1dda      	adds	r2, r3, #7
1000b3a8:	2300      	movs	r3, #0
1000b3aa:	7013      	strb	r3, [r2, #0]
    sms_ble_service_init(BLE_SERV_PRESSURE, &pressure_device.service_handler, &init_value);
1000b3ac:	4c0d      	ldr	r4, [pc, #52]	; (1000b3e4 <sms_pressure_define_services+0x44>)
1000b3ae:	0021      	movs	r1, r4
1000b3b0:	2001      	movs	r0, #1
1000b3b2:	4b0d      	ldr	r3, [pc, #52]	; (1000b3e8 <sms_pressure_define_services+0x48>)
1000b3b4:	4798      	blx	r3
    if((status = sms_ble_primary_service_define(&pressure_device.service_handler)) != AT_BLE_SUCCESS) {
1000b3b6:	0020      	movs	r0, r4
1000b3b8:	4b0c      	ldr	r3, [pc, #48]	; (1000b3ec <sms_pressure_define_services+0x4c>)
1000b3ba:	4798      	blx	r3
1000b3bc:	1e04      	subs	r4, r0, #0
1000b3be:	d007      	beq.n	1000b3d0 <sms_pressure_define_services+0x30>
        DBG_LOG("[sms_pressure_define_services]\tServices defining failed, reason 0x%x", status);
1000b3c0:	480b      	ldr	r0, [pc, #44]	; (1000b3f0 <sms_pressure_define_services+0x50>)
1000b3c2:	4b0c      	ldr	r3, [pc, #48]	; (1000b3f4 <sms_pressure_define_services+0x54>)
1000b3c4:	4798      	blx	r3
1000b3c6:	0021      	movs	r1, r4
1000b3c8:	480b      	ldr	r0, [pc, #44]	; (1000b3f8 <sms_pressure_define_services+0x58>)
1000b3ca:	4b0c      	ldr	r3, [pc, #48]	; (1000b3fc <sms_pressure_define_services+0x5c>)
1000b3cc:	4798      	blx	r3
1000b3ce:	e007      	b.n	1000b3e0 <sms_pressure_define_services+0x40>
    }
    else {
        DBG_LOG_DEV("[sms_pressure_define_services]\tServices defined, SMS pressure handle: %d", pressure_device.service_handler.serv_handle);
1000b3d0:	4807      	ldr	r0, [pc, #28]	; (1000b3f0 <sms_pressure_define_services+0x50>)
1000b3d2:	4b08      	ldr	r3, [pc, #32]	; (1000b3f4 <sms_pressure_define_services+0x54>)
1000b3d4:	4798      	blx	r3
1000b3d6:	4b0a      	ldr	r3, [pc, #40]	; (1000b400 <sms_pressure_define_services+0x60>)
1000b3d8:	8fd9      	ldrh	r1, [r3, #62]	; 0x3e
1000b3da:	480a      	ldr	r0, [pc, #40]	; (1000b404 <sms_pressure_define_services+0x64>)
1000b3dc:	4b07      	ldr	r3, [pc, #28]	; (1000b3fc <sms_pressure_define_services+0x5c>)
1000b3de:	4798      	blx	r3
    }
1000b3e0:	b002      	add	sp, #8
1000b3e2:	bd10      	pop	{r4, pc}
1000b3e4:	1001a2c0 	.word	0x1001a2c0
1000b3e8:	1000a439 	.word	0x1000a439
1000b3ec:	1000a415 	.word	0x1000a415
1000b3f0:	10016660 	.word	0x10016660
1000b3f4:	100154a1 	.word	0x100154a1
1000b3f8:	10017230 	.word	0x10017230
1000b3fc:	10015381 	.word	0x10015381
1000b400:	1001a294 	.word	0x1001a294
1000b404:	10017278 	.word	0x10017278

1000b408 <sms_sensors_interrupt_toggle>:
 */ 

#include "sms_sensors.h"

/* Sensors-related functions */
void sms_sensors_interrupt_toggle(bool mpu_int, bool press_int) {
1000b408:	b510      	push	{r4, lr}
1000b40a:	000c      	movs	r4, r1
    /* IMU --> IMU_DRDY */
    if(mpu_int) {
1000b40c:	2800      	cmp	r0, #0
1000b40e:	d007      	beq.n	1000b420 <sms_sensors_interrupt_toggle+0x18>
        mpu_device.state = MPU_STATE_ON;
1000b410:	2102      	movs	r1, #2
1000b412:	2330      	movs	r3, #48	; 0x30
1000b414:	4a16      	ldr	r2, [pc, #88]	; (1000b470 <sms_sensors_interrupt_toggle+0x68>)
1000b416:	54d1      	strb	r1, [r2, r3]
        gpio_enable_callback(SMS_MPU_DRDY_PIN);
1000b418:	201e      	movs	r0, #30
1000b41a:	4b16      	ldr	r3, [pc, #88]	; (1000b474 <sms_sensors_interrupt_toggle+0x6c>)
1000b41c:	4798      	blx	r3
1000b41e:	e006      	b.n	1000b42e <sms_sensors_interrupt_toggle+0x26>
    }
    else {
        mpu_device.state = MPU_STATE_OFF;
1000b420:	2100      	movs	r1, #0
1000b422:	2330      	movs	r3, #48	; 0x30
1000b424:	4a12      	ldr	r2, [pc, #72]	; (1000b470 <sms_sensors_interrupt_toggle+0x68>)
1000b426:	54d1      	strb	r1, [r2, r3]
        gpio_disable_callback(SMS_MPU_DRDY_PIN);
1000b428:	201e      	movs	r0, #30
1000b42a:	4b13      	ldr	r3, [pc, #76]	; (1000b478 <sms_sensors_interrupt_toggle+0x70>)
1000b42c:	4798      	blx	r3
     * Note: Since there is no direct mechanism to simply enable and disable
     *       the AON sleep timer interruption, we have to initialize it each
     *       time (and it starts running) and register the corresponding
     *       callback (and it enables the interrupt)
     */
    if(press_int) {
1000b42e:	2c00      	cmp	r4, #0
1000b430:	d011      	beq.n	1000b456 <sms_sensors_interrupt_toggle+0x4e>
        pressure_device.hal.current_state = MS58_STATE_CONV_PRESSURE;
1000b432:	4b12      	ldr	r3, [pc, #72]	; (1000b47c <sms_sensors_interrupt_toggle+0x74>)
1000b434:	2103      	movs	r1, #3
1000b436:	2225      	movs	r2, #37	; 0x25
1000b438:	5499      	strb	r1, [r3, r2]
        pressure_device.state = PRESSURE_STATE_ON;
1000b43a:	3901      	subs	r1, #1
1000b43c:	3203      	adds	r2, #3
1000b43e:	5499      	strb	r1, [r3, r2]
        sms_timer_aon_init(SMS_PRESSURE_CONVERT_MS, AON_SLEEP_TIMER_RELOAD_MODE);
1000b440:	2100      	movs	r1, #0
1000b442:	2080      	movs	r0, #128	; 0x80
1000b444:	0200      	lsls	r0, r0, #8
1000b446:	4b0e      	ldr	r3, [pc, #56]	; (1000b480 <sms_sensors_interrupt_toggle+0x78>)
1000b448:	4798      	blx	r3
        sms_timer_aon_register_callback();
1000b44a:	4b0e      	ldr	r3, [pc, #56]	; (1000b484 <sms_sensors_interrupt_toggle+0x7c>)
1000b44c:	4798      	blx	r3
        sensors_active = true;
1000b44e:	2201      	movs	r2, #1
1000b450:	4b0d      	ldr	r3, [pc, #52]	; (1000b488 <sms_sensors_interrupt_toggle+0x80>)
1000b452:	701a      	strb	r2, [r3, #0]
1000b454:	e00a      	b.n	1000b46c <sms_sensors_interrupt_toggle+0x64>
    }
    else {
        pressure_device.hal.current_state = MS58_STATE_READY;
1000b456:	2102      	movs	r1, #2
1000b458:	2325      	movs	r3, #37	; 0x25
1000b45a:	4a08      	ldr	r2, [pc, #32]	; (1000b47c <sms_sensors_interrupt_toggle+0x74>)
1000b45c:	54d1      	strb	r1, [r2, r3]
        sms_timer_aon_disable();
1000b45e:	4b0b      	ldr	r3, [pc, #44]	; (1000b48c <sms_sensors_interrupt_toggle+0x84>)
1000b460:	4798      	blx	r3
        sms_timer_aon_unregister_callback();
1000b462:	4b0b      	ldr	r3, [pc, #44]	; (1000b490 <sms_sensors_interrupt_toggle+0x88>)
1000b464:	4798      	blx	r3
        sensors_active = false;
1000b466:	2200      	movs	r2, #0
1000b468:	4b07      	ldr	r3, [pc, #28]	; (1000b488 <sms_sensors_interrupt_toggle+0x80>)
1000b46a:	701a      	strb	r2, [r3, #0]
    }
}
1000b46c:	bd10      	pop	{r4, pc}
1000b46e:	46c0      	nop			; (mov r8, r8)
1000b470:	1001a188 	.word	0x1001a188
1000b474:	1000c681 	.word	0x1000c681
1000b478:	1000c6dd 	.word	0x1000c6dd
1000b47c:	1001a294 	.word	0x1001a294
1000b480:	1000b5f1 	.word	0x1000b5f1
1000b484:	1000b625 	.word	0x1000b625
1000b488:	1001a324 	.word	0x1001a324
1000b48c:	1000b619 	.word	0x1000b619
1000b490:	1000b645 	.word	0x1000b645

1000b494 <sms_sensors_switch>:
    

void sms_sensors_switch(bool mpu_en, bool press_en)
{
1000b494:	b510      	push	{r4, lr}
1000b496:	000c      	movs	r4, r1
    /* IMU */
    if(mpu_en) {
1000b498:	2800      	cmp	r0, #0
1000b49a:	d016      	beq.n	1000b4ca <sms_sensors_switch+0x36>
        if(sms_mpu_initialize()) {
1000b49c:	4b14      	ldr	r3, [pc, #80]	; (1000b4f0 <sms_sensors_switch+0x5c>)
1000b49e:	4798      	blx	r3
1000b4a0:	2800      	cmp	r0, #0
1000b4a2:	d00a      	beq.n	1000b4ba <sms_sensors_switch+0x26>
            DBG_LOG_DEV("[sms_sensors_switch]\t\t\tCouldn't initialize MPU");
1000b4a4:	4813      	ldr	r0, [pc, #76]	; (1000b4f4 <sms_sensors_switch+0x60>)
1000b4a6:	4b14      	ldr	r3, [pc, #80]	; (1000b4f8 <sms_sensors_switch+0x64>)
1000b4a8:	4798      	blx	r3
1000b4aa:	4814      	ldr	r0, [pc, #80]	; (1000b4fc <sms_sensors_switch+0x68>)
1000b4ac:	4b14      	ldr	r3, [pc, #80]	; (1000b500 <sms_sensors_switch+0x6c>)
1000b4ae:	4798      	blx	r3
            gpio_pin_set_output_level(SMS_MPU_VCC_PIN, false);
1000b4b0:	2100      	movs	r1, #0
1000b4b2:	2006      	movs	r0, #6
1000b4b4:	4b13      	ldr	r3, [pc, #76]	; (1000b504 <sms_sensors_switch+0x70>)
1000b4b6:	4798      	blx	r3
1000b4b8:	e00b      	b.n	1000b4d2 <sms_sensors_switch+0x3e>
        }
        else {
            mpu_device.hal.init_ok = true;
1000b4ba:	2201      	movs	r2, #1
1000b4bc:	4b12      	ldr	r3, [pc, #72]	; (1000b508 <sms_sensors_switch+0x74>)
1000b4be:	711a      	strb	r2, [r3, #4]
            sms_sensors_interrupt_toggle(true, false);
1000b4c0:	2100      	movs	r1, #0
1000b4c2:	2001      	movs	r0, #1
1000b4c4:	4b11      	ldr	r3, [pc, #68]	; (1000b50c <sms_sensors_switch+0x78>)
1000b4c6:	4798      	blx	r3
1000b4c8:	e003      	b.n	1000b4d2 <sms_sensors_switch+0x3e>
        }
    }
    else {
        gpio_pin_set_output_level(SMS_MPU_VCC_PIN, false);
1000b4ca:	2100      	movs	r1, #0
1000b4cc:	2006      	movs	r0, #6
1000b4ce:	4b0d      	ldr	r3, [pc, #52]	; (1000b504 <sms_sensors_switch+0x70>)
1000b4d0:	4798      	blx	r3
    }
    
    /* Pressure */
    if(press_en) {                
1000b4d2:	2c00      	cmp	r4, #0
1000b4d4:	d006      	beq.n	1000b4e4 <sms_sensors_switch+0x50>
        pressure_device.hal.current_state = MS58_STATE_RESETTING;
1000b4d6:	2101      	movs	r1, #1
1000b4d8:	2325      	movs	r3, #37	; 0x25
1000b4da:	4a0d      	ldr	r2, [pc, #52]	; (1000b510 <sms_sensors_switch+0x7c>)
1000b4dc:	54d1      	strb	r1, [r2, r3]
        //pressure_device.hal.reset_done = false;
        //pressure_device.hal.init_ok = false;
        sms_pressure_startup();
1000b4de:	4b0d      	ldr	r3, [pc, #52]	; (1000b514 <sms_sensors_switch+0x80>)
1000b4e0:	4798      	blx	r3
1000b4e2:	e003      	b.n	1000b4ec <sms_sensors_switch+0x58>
    }
    else {
        gpio_pin_set_output_level(SMS_PRESSURE_VCC_PIN, false);
1000b4e4:	2100      	movs	r1, #0
1000b4e6:	2007      	movs	r0, #7
1000b4e8:	4b06      	ldr	r3, [pc, #24]	; (1000b504 <sms_sensors_switch+0x70>)
1000b4ea:	4798      	blx	r3
    }
}
1000b4ec:	bd10      	pop	{r4, pc}
1000b4ee:	46c0      	nop			; (mov r8, r8)
1000b4f0:	1000acf1 	.word	0x1000acf1
1000b4f4:	10016660 	.word	0x10016660
1000b4f8:	100154a1 	.word	0x100154a1
1000b4fc:	100172c4 	.word	0x100172c4
1000b500:	10015381 	.word	0x10015381
1000b504:	1000c3d9 	.word	0x1000c3d9
1000b508:	1001a188 	.word	0x1001a188
1000b50c:	1000b409 	.word	0x1000b409
1000b510:	1001a294 	.word	0x1001a294
1000b514:	1000b109 	.word	0x1000b109

1000b518 <sms_spi_master_configure>:
 *   + mode 3 on SPI0 @ 1 MHz for MPU-9250 IMU
 * - assign SS pin for each slave device
 * - enable SPI
 */ 
void sms_spi_master_configure(void)
{
1000b518:	b530      	push	{r4, r5, lr}
1000b51a:	b08d      	sub	sp, #52	; 0x34
    //DBG_LOG_DEV("[spi_master_configure]\tconfiguring SPI masters and attaching slaves...");

    /* Initialize ms58 spi slave device */
    struct spi_config spi_master_config;
    struct spi_slave_inst_config spi_slave_ms58_config;
    spi_slave_inst_get_config_defaults(&spi_slave_ms58_config);
1000b51c:	ac01      	add	r4, sp, #4
1000b51e:	0020      	movs	r0, r4
1000b520:	4b13      	ldr	r3, [pc, #76]	; (1000b570 <sms_spi_master_configure+0x58>)
1000b522:	4798      	blx	r3
    spi_slave_ms58_config.ss_pin = SMS_PRESSURE_SPI_SS_PIN;
1000b524:	2310      	movs	r3, #16
1000b526:	7023      	strb	r3, [r4, #0]
    spi_attach_slave(&spi_slave_ms58_instance, &spi_slave_ms58_config);
1000b528:	0021      	movs	r1, r4
1000b52a:	4812      	ldr	r0, [pc, #72]	; (1000b574 <sms_spi_master_configure+0x5c>)
1000b52c:	4b12      	ldr	r3, [pc, #72]	; (1000b578 <sms_spi_master_configure+0x60>)
1000b52e:	4798      	blx	r3
    

    /* Initialize SPI1 master for ms58 */
    spi_get_config_defaults(&spi_master_config);
1000b530:	ac02      	add	r4, sp, #8
1000b532:	0020      	movs	r0, r4
1000b534:	4b11      	ldr	r3, [pc, #68]	; (1000b57c <sms_spi_master_configure+0x64>)
1000b536:	4798      	blx	r3
    spi_master_config.clock_divider = SPI_MASTER_MS58_CLOCK_DIV;
1000b538:	2368      	movs	r3, #104	; 0x68
1000b53a:	7123      	strb	r3, [r4, #4]
    spi_master_config.transfer_mode = SPI_MASTER_MS58_MODE;
1000b53c:	2300      	movs	r3, #0
1000b53e:	70a3      	strb	r3, [r4, #2]
    spi_master_config.pin_number_pad[0] = SPI_MASTER_MS58_PIN_SCK;
1000b540:	3311      	adds	r3, #17
1000b542:	60a3      	str	r3, [r4, #8]
    spi_master_config.pinmux_sel_pad[0] = SPI_MASTER_MS58_MUX_SCK;
1000b544:	3b0d      	subs	r3, #13
1000b546:	61a3      	str	r3, [r4, #24]
    spi_master_config.pin_number_pad[1] = SPI_MASTER_MS58_PIN_MOSI;
1000b548:	2213      	movs	r2, #19
1000b54a:	60e2      	str	r2, [r4, #12]
    spi_master_config.pinmux_sel_pad[1] = SPI_MASTER_MS58_MUX_MOSI;
1000b54c:	61e3      	str	r3, [r4, #28]
    spi_master_config.pin_number_pad[2] = SPI_MASTER_MS58_PIN_SSN;
1000b54e:	3a14      	subs	r2, #20
1000b550:	6122      	str	r2, [r4, #16]
    spi_master_config.pinmux_sel_pad[2] = SPI_MASTER_MS58_MUX_SSN;
1000b552:	6222      	str	r2, [r4, #32]
    spi_master_config.pin_number_pad[3] = SPI_MASTER_MS58_MISO;
1000b554:	3213      	adds	r2, #19
1000b556:	6162      	str	r2, [r4, #20]
    spi_master_config.pinmux_sel_pad[3] = SPI_MASTER_MS58_MUX_MISO;
1000b558:	6263      	str	r3, [r4, #36]	; 0x24
    spi_init(&spi_master_ms58_instance, SPI_MASTER_MS58_PORT, &spi_master_config);
1000b55a:	4d09      	ldr	r5, [pc, #36]	; (1000b580 <sms_spi_master_configure+0x68>)
1000b55c:	0022      	movs	r2, r4
1000b55e:	4909      	ldr	r1, [pc, #36]	; (1000b584 <sms_spi_master_configure+0x6c>)
1000b560:	0028      	movs	r0, r5
1000b562:	4b09      	ldr	r3, [pc, #36]	; (1000b588 <sms_spi_master_configure+0x70>)
1000b564:	4798      	blx	r3
    spi_enable(&spi_master_ms58_instance);
1000b566:	0028      	movs	r0, r5
1000b568:	4b08      	ldr	r3, [pc, #32]	; (1000b58c <sms_spi_master_configure+0x74>)
1000b56a:	4798      	blx	r3
}
1000b56c:	b00d      	add	sp, #52	; 0x34
1000b56e:	bd30      	pop	{r4, r5, pc}
1000b570:	1000bb1d 	.word	0x1000bb1d
1000b574:	1001a334 	.word	0x1001a334
1000b578:	1000bb55 	.word	0x1000bb55
1000b57c:	1000bb29 	.word	0x1000bb29
1000b580:	1001a340 	.word	0x1001a340
1000b584:	40007000 	.word	0x40007000
1000b588:	1000bc25 	.word	0x1000bc25
1000b58c:	1000bb95 	.word	0x1000bb95

1000b590 <sms_spi_master_transceive>:
/* SPI transceive function:
 * - enable selected slave
 * - start transceive blocking job
 * - when job returned, disable selected slave
 */
enum status_code sms_spi_master_transceive(struct spi_module *const module, struct spi_slave_inst *const slave, uint8_t *tx_data, uint8_t *rx_data, uint16_t len) {
1000b590:	b5f0      	push	{r4, r5, r6, r7, lr}
1000b592:	b083      	sub	sp, #12
1000b594:	0004      	movs	r4, r0
1000b596:	000d      	movs	r5, r1
1000b598:	9200      	str	r2, [sp, #0]
1000b59a:	9301      	str	r3, [sp, #4]
1000b59c:	ab08      	add	r3, sp, #32
1000b59e:	881e      	ldrh	r6, [r3, #0]
    enum status_code retVal;
    /* Enable slave */
    //DBG_LOG_CONT_DEV(" selecting slave...");
    spi_select_slave(module, slave, true);
1000b5a0:	2201      	movs	r2, #1
1000b5a2:	4f08      	ldr	r7, [pc, #32]	; (1000b5c4 <sms_spi_master_transceive+0x34>)
1000b5a4:	47b8      	blx	r7
    /* Write SPI data */
    //DBG_LOG_CONT_DEV(" writing data...");
    retVal = spi_transceive_buffer_wait(module, tx_data, rx_data, len);
1000b5a6:	0033      	movs	r3, r6
1000b5a8:	9a01      	ldr	r2, [sp, #4]
1000b5aa:	9900      	ldr	r1, [sp, #0]
1000b5ac:	0020      	movs	r0, r4
1000b5ae:	4e06      	ldr	r6, [pc, #24]	; (1000b5c8 <sms_spi_master_transceive+0x38>)
1000b5b0:	47b0      	blx	r6
1000b5b2:	0006      	movs	r6, r0
    /* Disable slave */
    //DBG_LOG_CONT_DEV(" de-selecting slave...");
    spi_select_slave(module, slave, false);
1000b5b4:	2200      	movs	r2, #0
1000b5b6:	0029      	movs	r1, r5
1000b5b8:	0020      	movs	r0, r4
1000b5ba:	47b8      	blx	r7
    //DBG_LOG_CONT_DEV(" done!");
    return retVal;
}
1000b5bc:	0030      	movs	r0, r6
1000b5be:	b003      	add	sp, #12
1000b5c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000b5c2:	46c0      	nop			; (mov r8, r8)
1000b5c4:	1000be0d 	.word	0x1000be0d
1000b5c8:	1000bd89 	.word	0x1000bd89

1000b5cc <sms_timer_aon_callback>:

#include "sms_timer.h"

/* AON SLEEP TIMER */
void sms_timer_aon_callback(void)
{
1000b5cc:	b510      	push	{r4, lr}
    sms_current_interrupt.int_on = true;
1000b5ce:	4b06      	ldr	r3, [pc, #24]	; (1000b5e8 <sms_timer_aon_callback+0x1c>)
1000b5d0:	2201      	movs	r2, #1
1000b5d2:	705a      	strb	r2, [r3, #1]
    sms_current_interrupt.source = INT_AON_TIMER;
1000b5d4:	3203      	adds	r2, #3
1000b5d6:	701a      	strb	r2, [r3, #0]
    send_plf_int_msg_ind(AON_SLEEP_TIMER_EXPIRY_CALLBACK, AON_TIMER_EXPIRED, NULL, 0);
1000b5d8:	2300      	movs	r3, #0
1000b5da:	2200      	movs	r2, #0
1000b5dc:	2103      	movs	r1, #3
1000b5de:	2042      	movs	r0, #66	; 0x42
1000b5e0:	4c02      	ldr	r4, [pc, #8]	; (1000b5ec <sms_timer_aon_callback+0x20>)
1000b5e2:	47a0      	blx	r4
}
1000b5e4:	bd10      	pop	{r4, pc}
1000b5e6:	46c0      	nop			; (mov r8, r8)
1000b5e8:	1001a318 	.word	0x1001a318
1000b5ec:	1000f435 	.word	0x1000f435

1000b5f0 <sms_timer_aon_init>:

void sms_timer_aon_init(uint32_t cnt, enum aon_sleep_timer_mode cnt_mode)
{
1000b5f0:	b530      	push	{r4, r5, lr}
1000b5f2:	b083      	sub	sp, #12
1000b5f4:	0004      	movs	r4, r0
1000b5f6:	000d      	movs	r5, r1
    struct aon_sleep_timer_config config_aon_sleep_timer;
    aon_sleep_timer_get_config_defaults(&config_aon_sleep_timer);
1000b5f8:	4668      	mov	r0, sp
1000b5fa:	4b05      	ldr	r3, [pc, #20]	; (1000b610 <sms_timer_aon_init+0x20>)
1000b5fc:	4798      	blx	r3
    config_aon_sleep_timer.mode = cnt_mode;
1000b5fe:	466b      	mov	r3, sp
1000b600:	705d      	strb	r5, [r3, #1]
    config_aon_sleep_timer.counter = cnt;
1000b602:	9401      	str	r4, [sp, #4]
    aon_sleep_timer_init(&config_aon_sleep_timer);
1000b604:	4668      	mov	r0, sp
1000b606:	4b03      	ldr	r3, [pc, #12]	; (1000b614 <sms_timer_aon_init+0x24>)
1000b608:	4798      	blx	r3
}
1000b60a:	b003      	add	sp, #12
1000b60c:	bd30      	pop	{r4, r5, pc}
1000b60e:	46c0      	nop			; (mov r8, r8)
1000b610:	10008155 	.word	0x10008155
1000b614:	100081c9 	.word	0x100081c9

1000b618 <sms_timer_aon_disable>:

void sms_timer_aon_disable(void)
{
1000b618:	b510      	push	{r4, lr}
    aon_sleep_timer_disable();
1000b61a:	4b01      	ldr	r3, [pc, #4]	; (1000b620 <sms_timer_aon_disable+0x8>)
1000b61c:	4798      	blx	r3
}
1000b61e:	bd10      	pop	{r4, pc}
1000b620:	10008165 	.word	0x10008165

1000b624 <sms_timer_aon_register_callback>:

void sms_timer_aon_register_callback(void)
{
1000b624:	b510      	push	{r4, lr}
    aon_sleep_timer_register_callback(sms_timer_aon_callback);
1000b626:	4804      	ldr	r0, [pc, #16]	; (1000b638 <sms_timer_aon_register_callback+0x14>)
1000b628:	4b04      	ldr	r3, [pc, #16]	; (1000b63c <sms_timer_aon_register_callback+0x18>)
1000b62a:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000b62c:	2280      	movs	r2, #128	; 0x80
1000b62e:	0512      	lsls	r2, r2, #20
1000b630:	4b03      	ldr	r3, [pc, #12]	; (1000b640 <sms_timer_aon_register_callback+0x1c>)
1000b632:	601a      	str	r2, [r3, #0]
    NVIC_EnableIRQ(AON_SLEEP_TIMER0_IRQn);
}
1000b634:	bd10      	pop	{r4, pc}
1000b636:	46c0      	nop			; (mov r8, r8)
1000b638:	1000b5cd 	.word	0x1000b5cd
1000b63c:	100081b1 	.word	0x100081b1
1000b640:	e000e100 	.word	0xe000e100

1000b644 <sms_timer_aon_unregister_callback>:

void sms_timer_aon_unregister_callback(void)
{
1000b644:	b510      	push	{r4, lr}
    aon_sleep_timer_unregister_callback();
1000b646:	4b04      	ldr	r3, [pc, #16]	; (1000b658 <sms_timer_aon_unregister_callback+0x14>)
1000b648:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000b64a:	2180      	movs	r1, #128	; 0x80
1000b64c:	0509      	lsls	r1, r1, #20
1000b64e:	2380      	movs	r3, #128	; 0x80
1000b650:	4a02      	ldr	r2, [pc, #8]	; (1000b65c <sms_timer_aon_unregister_callback+0x18>)
1000b652:	50d1      	str	r1, [r2, r3]
    NVIC_DisableIRQ(AON_SLEEP_TIMER0_IRQn);
}
1000b654:	bd10      	pop	{r4, pc}
1000b656:	46c0      	nop			; (mov r8, r8)
1000b658:	100081bd 	.word	0x100081bd
1000b65c:	e000e100 	.word	0xe000e100

1000b660 <sms_timer_aon_get_ms>:

void sms_timer_aon_get_ms(uint32_t *count)
{
    count = (uint32_t *)0;
}
1000b660:	4770      	bx	lr
1000b662:	46c0      	nop			; (mov r8, r8)

1000b664 <sms_dualtimer_init>:

/* DUALTIMER */
void sms_dualtimer_init(void)
{
1000b664:	b510      	push	{r4, lr}
1000b666:	b088      	sub	sp, #32
    struct dualtimer_config config_dualtimer;
    dualtimer_get_config_defaults(&config_dualtimer);
1000b668:	ac01      	add	r4, sp, #4
1000b66a:	0020      	movs	r0, r4
1000b66c:	4b08      	ldr	r3, [pc, #32]	; (1000b690 <sms_dualtimer_init+0x2c>)
1000b66e:	4798      	blx	r3

    config_dualtimer.timer1.load_value = SMS_DUALTIMER_LOAD_S;
1000b670:	4a08      	ldr	r2, [pc, #32]	; (1000b694 <sms_dualtimer_init+0x30>)
1000b672:	60a2      	str	r2, [r4, #8]
    config_dualtimer.timer1.counter_mode = DUALTIMER_ONE_SHOT_MODE;
1000b674:	2300      	movs	r3, #0
1000b676:	7063      	strb	r3, [r4, #1]
    config_dualtimer.timer2.load_value = SMS_DUALTIMER_LOAD_S;
1000b678:	6162      	str	r2, [r4, #20]
    config_dualtimer.timer2.counter_mode = DUALTIMER_ONE_SHOT_MODE;
1000b67a:	7363      	strb	r3, [r4, #13]

    dualtimer_init(&config_dualtimer);
1000b67c:	0020      	movs	r0, r4
1000b67e:	4b06      	ldr	r3, [pc, #24]	; (1000b698 <sms_dualtimer_init+0x34>)
1000b680:	4798      	blx	r3
    dualtimer_disable(DUALTIMER_TIMER1);
1000b682:	2000      	movs	r0, #0
1000b684:	4c05      	ldr	r4, [pc, #20]	; (1000b69c <sms_dualtimer_init+0x38>)
1000b686:	47a0      	blx	r4
    dualtimer_disable(DUALTIMER_TIMER2);
1000b688:	2001      	movs	r0, #1
1000b68a:	47a0      	blx	r4
}
1000b68c:	b008      	add	sp, #32
1000b68e:	bd10      	pop	{r4, pc}
1000b690:	1000be71 	.word	0x1000be71
1000b694:	018cba80 	.word	0x018cba80
1000b698:	1000bf05 	.word	0x1000bf05
1000b69c:	1000bee1 	.word	0x1000bee1

1000b6a0 <sms_dualtimer_register_callback>:

void sms_dualtimer_register_callback(enum dualtimer_timer tmr, sms_dualtimer_callback_t cb_handler)
{
1000b6a0:	b510      	push	{r4, lr}
1000b6a2:	0004      	movs	r4, r0
    dualtimer_register_callback(tmr, cb_handler);
1000b6a4:	4b02      	ldr	r3, [pc, #8]	; (1000b6b0 <sms_dualtimer_register_callback+0x10>)
1000b6a6:	4798      	blx	r3
    NVIC_EnableIRQ(DUALTIMER0_IRQn);
}

void sms_dualtimer_stop(enum dualtimer_timer tmr)
{
    dualtimer_disable(tmr);
1000b6a8:	0020      	movs	r0, r4
1000b6aa:	4b02      	ldr	r3, [pc, #8]	; (1000b6b4 <sms_dualtimer_register_callback+0x14>)
1000b6ac:	4798      	blx	r3

void sms_dualtimer_register_callback(enum dualtimer_timer tmr, sms_dualtimer_callback_t cb_handler)
{
    dualtimer_register_callback(tmr, cb_handler);
    sms_dualtimer_stop(tmr);
}
1000b6ae:	bd10      	pop	{r4, pc}
1000b6b0:	1000c009 	.word	0x1000c009
1000b6b4:	1000bee1 	.word	0x1000bee1

1000b6b8 <sms_dualtimer_start>:

void sms_dualtimer_start(timer_unit_type_t unit, uint32_t delay, enum dualtimer_timer tmr)
{
1000b6b8:	b510      	push	{r4, lr}
1000b6ba:	0014      	movs	r4, r2
    uint32_t timer_load = 1;
    switch(unit) {
1000b6bc:	2801      	cmp	r0, #1
1000b6be:	d006      	beq.n	1000b6ce <sms_dualtimer_start+0x16>
1000b6c0:	2800      	cmp	r0, #0
1000b6c2:	d002      	beq.n	1000b6ca <sms_dualtimer_start+0x12>
1000b6c4:	2802      	cmp	r0, #2
1000b6c6:	d004      	beq.n	1000b6d2 <sms_dualtimer_start+0x1a>
1000b6c8:	e005      	b.n	1000b6d6 <sms_dualtimer_start+0x1e>
        case TIMER_UNIT_US:
        timer_load = SMS_DUALTIMER_LOAD_US;
1000b6ca:	221a      	movs	r2, #26
1000b6cc:	e004      	b.n	1000b6d8 <sms_dualtimer_start+0x20>
        break;
        
        case TIMER_UNIT_MS:
        timer_load = SMS_DUALTIMER_LOAD_MS;
1000b6ce:	4a0c      	ldr	r2, [pc, #48]	; (1000b700 <sms_dualtimer_start+0x48>)
        break;
1000b6d0:	e002      	b.n	1000b6d8 <sms_dualtimer_start+0x20>
        
        case TIMER_UNIT_S:
        timer_load = SMS_DUALTIMER_LOAD_S;
1000b6d2:	4a0c      	ldr	r2, [pc, #48]	; (1000b704 <sms_dualtimer_start+0x4c>)
        break;
1000b6d4:	e000      	b.n	1000b6d8 <sms_dualtimer_start+0x20>
    sms_dualtimer_stop(tmr);
}

void sms_dualtimer_start(timer_unit_type_t unit, uint32_t delay, enum dualtimer_timer tmr)
{
    uint32_t timer_load = 1;
1000b6d6:	2201      	movs	r2, #1
        
        default:
        break;
    }
    
    if(delay <= 0) {
1000b6d8:	2900      	cmp	r1, #0
1000b6da:	d101      	bne.n	1000b6e0 <sms_dualtimer_start+0x28>
        //DBG_LOG("[sms_dualtimer_start]\tWarning! Delay value < 0... setting to 1000");
        delay = 1000;
1000b6dc:	21fa      	movs	r1, #250	; 0xfa
1000b6de:	0089      	lsls	r1, r1, #2
    }
    
    ulp_ready = false;
1000b6e0:	2000      	movs	r0, #0
1000b6e2:	4b09      	ldr	r3, [pc, #36]	; (1000b708 <sms_dualtimer_start+0x50>)
1000b6e4:	7018      	strb	r0, [r3, #0]
    //DBG_LOG_DEV("[sms_dualtimer_start]\t\tStarting timer%d... load: %ld, delay: %ld", (tmr+1), timer_load, delay);
    dualtimer_set_counter(tmr, DUALTIMER_SET_CURRUNT_REG, timer_load * delay);
1000b6e6:	434a      	muls	r2, r1
1000b6e8:	2100      	movs	r1, #0
1000b6ea:	0020      	movs	r0, r4
1000b6ec:	4b07      	ldr	r3, [pc, #28]	; (1000b70c <sms_dualtimer_start+0x54>)
1000b6ee:	4798      	blx	r3
    dualtimer_enable(tmr);
1000b6f0:	0020      	movs	r0, r4
1000b6f2:	4b07      	ldr	r3, [pc, #28]	; (1000b710 <sms_dualtimer_start+0x58>)
1000b6f4:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000b6f6:	2280      	movs	r2, #128	; 0x80
1000b6f8:	01d2      	lsls	r2, r2, #7
1000b6fa:	4b06      	ldr	r3, [pc, #24]	; (1000b714 <sms_dualtimer_start+0x5c>)
1000b6fc:	601a      	str	r2, [r3, #0]
    NVIC_EnableIRQ(DUALTIMER0_IRQn);
}
1000b6fe:	bd10      	pop	{r4, pc}
1000b700:	00006590 	.word	0x00006590
1000b704:	018cba80 	.word	0x018cba80
1000b708:	1001a219 	.word	0x1001a219
1000b70c:	1000be95 	.word	0x1000be95
1000b710:	1000bebd 	.word	0x1000bebd
1000b714:	e000e100 	.word	0xe000e100

1000b718 <sms_dualtimer_stop>:

void sms_dualtimer_stop(enum dualtimer_timer tmr)
{
1000b718:	b510      	push	{r4, lr}
    dualtimer_disable(tmr);
1000b71a:	4b01      	ldr	r3, [pc, #4]	; (1000b720 <sms_dualtimer_stop+0x8>)
1000b71c:	4798      	blx	r3
}
1000b71e:	bd10      	pop	{r4, pc}
1000b720:	1000bee1 	.word	0x1000bee1

1000b724 <sms_dualtimer1_cb>:

void sms_dualtimer1_cb(void)
{
1000b724:	b510      	push	{r4, lr}
    sms_current_interrupt.int_on = true;
1000b726:	4b06      	ldr	r3, [pc, #24]	; (1000b740 <sms_dualtimer1_cb+0x1c>)
1000b728:	2201      	movs	r2, #1
1000b72a:	705a      	strb	r2, [r3, #1]
    sms_current_interrupt.source = INT_DUALTIMER1;
1000b72c:	3204      	adds	r2, #4
1000b72e:	701a      	strb	r2, [r3, #0]
    send_plf_int_msg_ind(DUALTIMER_TIMER1_CALLBACK, TIMER_EXPIRED_CALLBACK_TYPE_DETECT, NULL, 0);
1000b730:	2300      	movs	r3, #0
1000b732:	2200      	movs	r2, #0
1000b734:	2101      	movs	r1, #1
1000b736:	2040      	movs	r0, #64	; 0x40
1000b738:	4c02      	ldr	r4, [pc, #8]	; (1000b744 <sms_dualtimer1_cb+0x20>)
1000b73a:	47a0      	blx	r4
}
1000b73c:	bd10      	pop	{r4, pc}
1000b73e:	46c0      	nop			; (mov r8, r8)
1000b740:	1001a318 	.word	0x1001a318
1000b744:	1000f435 	.word	0x1000f435

1000b748 <sms_dualtimer2_cb>:

void sms_dualtimer2_cb(void)
{
1000b748:	b510      	push	{r4, lr}
    sms_current_interrupt.int_on = true;
1000b74a:	4b06      	ldr	r3, [pc, #24]	; (1000b764 <sms_dualtimer2_cb+0x1c>)
1000b74c:	2201      	movs	r2, #1
1000b74e:	705a      	strb	r2, [r3, #1]
    sms_current_interrupt.source = INT_DUALTIMER2;
1000b750:	3205      	adds	r2, #5
1000b752:	701a      	strb	r2, [r3, #0]
    send_plf_int_msg_ind(DUALTIMER_TIMER2_CALLBACK, TIMER_EXPIRED_CALLBACK_TYPE_DETECT, NULL, 0);
1000b754:	2300      	movs	r3, #0
1000b756:	2200      	movs	r2, #0
1000b758:	2101      	movs	r1, #1
1000b75a:	2041      	movs	r0, #65	; 0x41
1000b75c:	4c02      	ldr	r4, [pc, #8]	; (1000b768 <sms_dualtimer2_cb+0x20>)
1000b75e:	47a0      	blx	r4
}
1000b760:	bd10      	pop	{r4, pc}
1000b762:	46c0      	nop			; (mov r8, r8)
1000b764:	1001a318 	.word	0x1001a318
1000b768:	1000f435 	.word	0x1000f435

1000b76c <sms_dualtimer1_fn>:


void sms_dualtimer1_fn(void)
{
1000b76c:	b510      	push	{r4, lr}
    //sms_button_toggle_interrupt(SMS_BTN_INT_DISABLE, SMS_BTN_INT_DISABLE);
    switch(timer1_current_mode) {
1000b76e:	4b7c      	ldr	r3, [pc, #496]	; (1000b960 <sms_dualtimer1_fn+0x1f4>)
1000b770:	781b      	ldrb	r3, [r3, #0]
1000b772:	b2db      	uxtb	r3, r3
1000b774:	2b01      	cmp	r3, #1
1000b776:	d003      	beq.n	1000b780 <sms_dualtimer1_fn+0x14>
1000b778:	2b02      	cmp	r3, #2
1000b77a:	d100      	bne.n	1000b77e <sms_dualtimer1_fn+0x12>
1000b77c:	e0ae      	b.n	1000b8dc <sms_dualtimer1_fn+0x170>
1000b77e:	e0e7      	b.n	1000b950 <sms_dualtimer1_fn+0x1e4>
        /* Timer1 mode = STARTUP */
        case TIMER1_MODE_STARTUP:
        {
            timer1_current_mode = TIMER1_MODE_NONE;
1000b780:	2200      	movs	r2, #0
1000b782:	4b77      	ldr	r3, [pc, #476]	; (1000b960 <sms_dualtimer1_fn+0x1f4>)
1000b784:	701a      	strb	r2, [r3, #0]
            button_instance.previous_state = button_instance.current_state;
1000b786:	4c77      	ldr	r4, [pc, #476]	; (1000b964 <sms_dualtimer1_fn+0x1f8>)
1000b788:	7863      	ldrb	r3, [r4, #1]
1000b78a:	7023      	strb	r3, [r4, #0]
            button_instance.current_state = sms_button_get_state();
1000b78c:	4b76      	ldr	r3, [pc, #472]	; (1000b968 <sms_dualtimer1_fn+0x1fc>)
1000b78e:	4798      	blx	r3
1000b790:	7060      	strb	r0, [r4, #1]
            sms_monitor_get_states("[sms_dualtimer1_fn]");
1000b792:	4876      	ldr	r0, [pc, #472]	; (1000b96c <sms_dualtimer1_fn+0x200>)
1000b794:	4b76      	ldr	r3, [pc, #472]	; (1000b970 <sms_dualtimer1_fn+0x204>)
1000b796:	4798      	blx	r3
            
            switch(button_instance.previous_state) {
1000b798:	7823      	ldrb	r3, [r4, #0]
1000b79a:	2b01      	cmp	r3, #1
1000b79c:	d002      	beq.n	1000b7a4 <sms_dualtimer1_fn+0x38>
1000b79e:	2b02      	cmp	r3, #2
1000b7a0:	d04c      	beq.n	1000b83c <sms_dualtimer1_fn+0xd0>
1000b7a2:	e093      	b.n	1000b8cc <sms_dualtimer1_fn+0x160>
                // --- Timer1 mode = STARTUP: switch prev_state ---
                case BUTTON_STATE_B0:
                switch(button_instance.current_state) {
1000b7a4:	4b6f      	ldr	r3, [pc, #444]	; (1000b964 <sms_dualtimer1_fn+0x1f8>)
1000b7a6:	785b      	ldrb	r3, [r3, #1]
1000b7a8:	2b01      	cmp	r3, #1
1000b7aa:	d002      	beq.n	1000b7b2 <sms_dualtimer1_fn+0x46>
1000b7ac:	2b02      	cmp	r3, #2
1000b7ae:	d023      	beq.n	1000b7f8 <sms_dualtimer1_fn+0x8c>
1000b7b0:	e03b      	b.n	1000b82a <sms_dualtimer1_fn+0xbe>
                    // --- prev_state = b0: switch current_state ---
                    case BUTTON_STATE_B0:
                    if(ble_current_state == BLE_STATE_POWEROFF) {
1000b7b2:	4b70      	ldr	r3, [pc, #448]	; (1000b974 <sms_dualtimer1_fn+0x208>)
1000b7b4:	781b      	ldrb	r3, [r3, #0]
1000b7b6:	2b00      	cmp	r3, #0
1000b7b8:	d115      	bne.n	1000b7e6 <sms_dualtimer1_fn+0x7a>
                        sms_btn_cnt++;
1000b7ba:	4a6f      	ldr	r2, [pc, #444]	; (1000b978 <sms_dualtimer1_fn+0x20c>)
1000b7bc:	7813      	ldrb	r3, [r2, #0]
1000b7be:	3301      	adds	r3, #1
1000b7c0:	b2db      	uxtb	r3, r3
1000b7c2:	7013      	strb	r3, [r2, #0]
                        if(sms_btn_cnt >= SMS_BTN_STARTUP_CNT) {
1000b7c4:	2b0f      	cmp	r3, #15
1000b7c6:	d905      	bls.n	1000b7d4 <sms_dualtimer1_fn+0x68>
                            timer1_current_mode = TIMER1_MODE_NONE;
1000b7c8:	2200      	movs	r2, #0
1000b7ca:	4b65      	ldr	r3, [pc, #404]	; (1000b960 <sms_dualtimer1_fn+0x1f4>)
1000b7cc:	701a      	strb	r2, [r3, #0]
                            sms_ble_startup();
1000b7ce:	4b6b      	ldr	r3, [pc, #428]	; (1000b97c <sms_dualtimer1_fn+0x210>)
1000b7d0:	4798      	blx	r3
1000b7d2:	e0c4      	b.n	1000b95e <sms_dualtimer1_fn+0x1f2>
                        }
                        else {
                            //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                            timer1_current_mode = TIMER1_MODE_STARTUP;
1000b7d4:	2201      	movs	r2, #1
1000b7d6:	4b62      	ldr	r3, [pc, #392]	; (1000b960 <sms_dualtimer1_fn+0x1f4>)
1000b7d8:	701a      	strb	r2, [r3, #0]
                            //ulp_ready = false;
                            sms_dualtimer_start(TIMER_UNIT_MS, SMS_BTN_STARTUP_MS, DUALTIMER_TIMER1);
1000b7da:	2200      	movs	r2, #0
1000b7dc:	21fa      	movs	r1, #250	; 0xfa
1000b7de:	2001      	movs	r0, #1
1000b7e0:	4b67      	ldr	r3, [pc, #412]	; (1000b980 <sms_dualtimer1_fn+0x214>)
1000b7e2:	4798      	blx	r3
1000b7e4:	e0bb      	b.n	1000b95e <sms_dualtimer1_fn+0x1f2>
                        }
                    }
                    else {
                        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                        if(timer2_current_mode == TIMER2_MODE_NONE) {
1000b7e6:	4b67      	ldr	r3, [pc, #412]	; (1000b984 <sms_dualtimer1_fn+0x218>)
1000b7e8:	781b      	ldrb	r3, [r3, #0]
1000b7ea:	2b00      	cmp	r3, #0
1000b7ec:	d000      	beq.n	1000b7f0 <sms_dualtimer1_fn+0x84>
1000b7ee:	e0b6      	b.n	1000b95e <sms_dualtimer1_fn+0x1f2>
                            //release_sleep_lock();
                            ulp_ready = true;
1000b7f0:	2201      	movs	r2, #1
1000b7f2:	4b65      	ldr	r3, [pc, #404]	; (1000b988 <sms_dualtimer1_fn+0x21c>)
1000b7f4:	701a      	strb	r2, [r3, #0]
1000b7f6:	e0b2      	b.n	1000b95e <sms_dualtimer1_fn+0x1f2>
                    }
                    break;
                    
                    // --- prev_state = b0: switch current_state ---
                    case BUTTON_STATE_B1:
                    if(ble_current_state == BLE_STATE_POWEROFF) {
1000b7f8:	4b5e      	ldr	r3, [pc, #376]	; (1000b974 <sms_dualtimer1_fn+0x208>)
1000b7fa:	781b      	ldrb	r3, [r3, #0]
1000b7fc:	2b00      	cmp	r3, #0
1000b7fe:	d10b      	bne.n	1000b818 <sms_dualtimer1_fn+0xac>
                        sms_btn_cnt = 0;
1000b800:	2200      	movs	r2, #0
1000b802:	4b5d      	ldr	r3, [pc, #372]	; (1000b978 <sms_dualtimer1_fn+0x20c>)
1000b804:	701a      	strb	r2, [r3, #0]
                        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                        timer1_current_mode = TIMER1_MODE_STARTUP;
1000b806:	3201      	adds	r2, #1
1000b808:	4b55      	ldr	r3, [pc, #340]	; (1000b960 <sms_dualtimer1_fn+0x1f4>)
1000b80a:	701a      	strb	r2, [r3, #0]
                        //ulp_ready = false;
                        sms_dualtimer_start(TIMER_UNIT_MS, SMS_BLINK_STARTUP_MS, DUALTIMER_TIMER1);
1000b80c:	2200      	movs	r2, #0
1000b80e:	2164      	movs	r1, #100	; 0x64
1000b810:	2001      	movs	r0, #1
1000b812:	4b5b      	ldr	r3, [pc, #364]	; (1000b980 <sms_dualtimer1_fn+0x214>)
1000b814:	4798      	blx	r3
1000b816:	e0a2      	b.n	1000b95e <sms_dualtimer1_fn+0x1f2>
                    }
                    else {
                        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                        if(timer2_current_mode == TIMER2_MODE_NONE) {
1000b818:	4b5a      	ldr	r3, [pc, #360]	; (1000b984 <sms_dualtimer1_fn+0x218>)
1000b81a:	781b      	ldrb	r3, [r3, #0]
1000b81c:	2b00      	cmp	r3, #0
1000b81e:	d000      	beq.n	1000b822 <sms_dualtimer1_fn+0xb6>
1000b820:	e09d      	b.n	1000b95e <sms_dualtimer1_fn+0x1f2>
                            //release_sleep_lock();
                            ulp_ready = true;
1000b822:	2201      	movs	r2, #1
1000b824:	4b58      	ldr	r3, [pc, #352]	; (1000b988 <sms_dualtimer1_fn+0x21c>)
1000b826:	701a      	strb	r2, [r3, #0]
1000b828:	e099      	b.n	1000b95e <sms_dualtimer1_fn+0x1f2>
                    // --- prev_state = b0: switch current_state ---
                    case BUTTON_STATE_BOTH:
                    case BUTTON_STATE_NONE:
                    default:
                    //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                    if(timer2_current_mode == TIMER2_MODE_NONE) {
1000b82a:	4b56      	ldr	r3, [pc, #344]	; (1000b984 <sms_dualtimer1_fn+0x218>)
1000b82c:	781b      	ldrb	r3, [r3, #0]
1000b82e:	2b00      	cmp	r3, #0
1000b830:	d000      	beq.n	1000b834 <sms_dualtimer1_fn+0xc8>
1000b832:	e094      	b.n	1000b95e <sms_dualtimer1_fn+0x1f2>
                        //release_sleep_lock();
                        ulp_ready = true;
1000b834:	2201      	movs	r2, #1
1000b836:	4b54      	ldr	r3, [pc, #336]	; (1000b988 <sms_dualtimer1_fn+0x21c>)
1000b838:	701a      	strb	r2, [r3, #0]
1000b83a:	e090      	b.n	1000b95e <sms_dualtimer1_fn+0x1f2>
                }
                break;
                
                // --- Timer1 mode = STARTUP: switch prev_state ---
                case BUTTON_STATE_B1:
                switch(button_instance.current_state) {
1000b83c:	4b49      	ldr	r3, [pc, #292]	; (1000b964 <sms_dualtimer1_fn+0x1f8>)
1000b83e:	785b      	ldrb	r3, [r3, #1]
1000b840:	2b01      	cmp	r3, #1
1000b842:	d023      	beq.n	1000b88c <sms_dualtimer1_fn+0x120>
1000b844:	2b02      	cmp	r3, #2
1000b846:	d139      	bne.n	1000b8bc <sms_dualtimer1_fn+0x150>
                    // --- prev_state = b1: switch current_state ---
                    case BUTTON_STATE_B1:
                    if(ble_current_state == BLE_STATE_POWEROFF) {
1000b848:	4b4a      	ldr	r3, [pc, #296]	; (1000b974 <sms_dualtimer1_fn+0x208>)
1000b84a:	781b      	ldrb	r3, [r3, #0]
1000b84c:	2b00      	cmp	r3, #0
1000b84e:	d115      	bne.n	1000b87c <sms_dualtimer1_fn+0x110>
                        sms_btn_cnt++;
1000b850:	4a49      	ldr	r2, [pc, #292]	; (1000b978 <sms_dualtimer1_fn+0x20c>)
1000b852:	7813      	ldrb	r3, [r2, #0]
1000b854:	3301      	adds	r3, #1
1000b856:	b2db      	uxtb	r3, r3
1000b858:	7013      	strb	r3, [r2, #0]
                        if(sms_btn_cnt >= SMS_BTN_STARTUP_CNT) {
1000b85a:	2b0f      	cmp	r3, #15
1000b85c:	d905      	bls.n	1000b86a <sms_dualtimer1_fn+0xfe>
                            timer1_current_mode = TIMER1_MODE_NONE;
1000b85e:	2200      	movs	r2, #0
1000b860:	4b3f      	ldr	r3, [pc, #252]	; (1000b960 <sms_dualtimer1_fn+0x1f4>)
1000b862:	701a      	strb	r2, [r3, #0]
                            sms_ble_startup();
1000b864:	4b45      	ldr	r3, [pc, #276]	; (1000b97c <sms_dualtimer1_fn+0x210>)
1000b866:	4798      	blx	r3
1000b868:	e079      	b.n	1000b95e <sms_dualtimer1_fn+0x1f2>
                        }
                        else {
                            //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                            timer1_current_mode = TIMER1_MODE_STARTUP;
1000b86a:	2201      	movs	r2, #1
1000b86c:	4b3c      	ldr	r3, [pc, #240]	; (1000b960 <sms_dualtimer1_fn+0x1f4>)
1000b86e:	701a      	strb	r2, [r3, #0]
                            //ulp_ready = false;
                            sms_dualtimer_start(TIMER_UNIT_MS, SMS_BTN_STARTUP_MS, DUALTIMER_TIMER1);
1000b870:	2200      	movs	r2, #0
1000b872:	21fa      	movs	r1, #250	; 0xfa
1000b874:	2001      	movs	r0, #1
1000b876:	4b42      	ldr	r3, [pc, #264]	; (1000b980 <sms_dualtimer1_fn+0x214>)
1000b878:	4798      	blx	r3
1000b87a:	e070      	b.n	1000b95e <sms_dualtimer1_fn+0x1f2>
                        }
                    }
                    else {
                        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                        if(timer2_current_mode == TIMER2_MODE_NONE) {
1000b87c:	4b41      	ldr	r3, [pc, #260]	; (1000b984 <sms_dualtimer1_fn+0x218>)
1000b87e:	781b      	ldrb	r3, [r3, #0]
1000b880:	2b00      	cmp	r3, #0
1000b882:	d16c      	bne.n	1000b95e <sms_dualtimer1_fn+0x1f2>
                            //release_sleep_lock();
                            ulp_ready = true;
1000b884:	2201      	movs	r2, #1
1000b886:	4b40      	ldr	r3, [pc, #256]	; (1000b988 <sms_dualtimer1_fn+0x21c>)
1000b888:	701a      	strb	r2, [r3, #0]
1000b88a:	e068      	b.n	1000b95e <sms_dualtimer1_fn+0x1f2>
                    }
                    break;
                    
                    // --- prev_state = b1: switch current_state ---
                    case BUTTON_STATE_B0:
                    if(ble_current_state == BLE_STATE_POWEROFF) {
1000b88c:	4b39      	ldr	r3, [pc, #228]	; (1000b974 <sms_dualtimer1_fn+0x208>)
1000b88e:	781b      	ldrb	r3, [r3, #0]
1000b890:	2b00      	cmp	r3, #0
1000b892:	d10b      	bne.n	1000b8ac <sms_dualtimer1_fn+0x140>
                        sms_btn_cnt = 0;
1000b894:	2200      	movs	r2, #0
1000b896:	4b38      	ldr	r3, [pc, #224]	; (1000b978 <sms_dualtimer1_fn+0x20c>)
1000b898:	701a      	strb	r2, [r3, #0]
                        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                        timer1_current_mode = TIMER1_MODE_STARTUP;
1000b89a:	3201      	adds	r2, #1
1000b89c:	4b30      	ldr	r3, [pc, #192]	; (1000b960 <sms_dualtimer1_fn+0x1f4>)
1000b89e:	701a      	strb	r2, [r3, #0]
                        //ulp_ready = false;
                        sms_dualtimer_start(TIMER_UNIT_MS, SMS_BLINK_STARTUP_MS, DUALTIMER_TIMER1);
1000b8a0:	2200      	movs	r2, #0
1000b8a2:	2164      	movs	r1, #100	; 0x64
1000b8a4:	2001      	movs	r0, #1
1000b8a6:	4b36      	ldr	r3, [pc, #216]	; (1000b980 <sms_dualtimer1_fn+0x214>)
1000b8a8:	4798      	blx	r3
1000b8aa:	e058      	b.n	1000b95e <sms_dualtimer1_fn+0x1f2>
                    }
                    else {
                        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                        if(timer2_current_mode == TIMER2_MODE_NONE) {
1000b8ac:	4b35      	ldr	r3, [pc, #212]	; (1000b984 <sms_dualtimer1_fn+0x218>)
1000b8ae:	781b      	ldrb	r3, [r3, #0]
1000b8b0:	2b00      	cmp	r3, #0
1000b8b2:	d154      	bne.n	1000b95e <sms_dualtimer1_fn+0x1f2>
                            //release_sleep_lock();
                            ulp_ready = true;
1000b8b4:	2201      	movs	r2, #1
1000b8b6:	4b34      	ldr	r3, [pc, #208]	; (1000b988 <sms_dualtimer1_fn+0x21c>)
1000b8b8:	701a      	strb	r2, [r3, #0]
1000b8ba:	e050      	b.n	1000b95e <sms_dualtimer1_fn+0x1f2>
                    // --- prev_state = b1: switch current_state ---
                    case BUTTON_STATE_NONE:
                    case BUTTON_STATE_BOTH:
                    default:
                    //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                    if(timer2_current_mode == TIMER2_MODE_NONE) {
1000b8bc:	4b31      	ldr	r3, [pc, #196]	; (1000b984 <sms_dualtimer1_fn+0x218>)
1000b8be:	781b      	ldrb	r3, [r3, #0]
1000b8c0:	2b00      	cmp	r3, #0
1000b8c2:	d14c      	bne.n	1000b95e <sms_dualtimer1_fn+0x1f2>
                        //release_sleep_lock();
                        ulp_ready = true;
1000b8c4:	2201      	movs	r2, #1
1000b8c6:	4b30      	ldr	r3, [pc, #192]	; (1000b988 <sms_dualtimer1_fn+0x21c>)
1000b8c8:	701a      	strb	r2, [r3, #0]
1000b8ca:	e048      	b.n	1000b95e <sms_dualtimer1_fn+0x1f2>
                case BUTTON_STATE_NONE:
                case BUTTON_STATE_BOTH:
                default:
                {
                    //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                    if(timer2_current_mode == TIMER2_MODE_NONE) {
1000b8cc:	4b2d      	ldr	r3, [pc, #180]	; (1000b984 <sms_dualtimer1_fn+0x218>)
1000b8ce:	781b      	ldrb	r3, [r3, #0]
1000b8d0:	2b00      	cmp	r3, #0
1000b8d2:	d144      	bne.n	1000b95e <sms_dualtimer1_fn+0x1f2>
                        //release_sleep_lock();
                        ulp_ready = true;
1000b8d4:	2201      	movs	r2, #1
1000b8d6:	4b2c      	ldr	r3, [pc, #176]	; (1000b988 <sms_dualtimer1_fn+0x21c>)
1000b8d8:	701a      	strb	r2, [r3, #0]
1000b8da:	e040      	b.n	1000b95e <sms_dualtimer1_fn+0x1f2>
        
        /* Timer1 mode = SHUTDOWN */
        case TIMER1_MODE_SHUTDOWN:
        {
            //timer1_current_mode = TIMER1_MODE_NONE;
            button_instance.previous_state = button_instance.current_state;
1000b8dc:	4c21      	ldr	r4, [pc, #132]	; (1000b964 <sms_dualtimer1_fn+0x1f8>)
1000b8de:	7863      	ldrb	r3, [r4, #1]
1000b8e0:	7023      	strb	r3, [r4, #0]
            button_instance.current_state = sms_button_get_state();
1000b8e2:	4b21      	ldr	r3, [pc, #132]	; (1000b968 <sms_dualtimer1_fn+0x1fc>)
1000b8e4:	4798      	blx	r3
1000b8e6:	7060      	strb	r0, [r4, #1]
            sms_monitor_get_states("[sms_dualtimer1_fn]");
1000b8e8:	4820      	ldr	r0, [pc, #128]	; (1000b96c <sms_dualtimer1_fn+0x200>)
1000b8ea:	4b21      	ldr	r3, [pc, #132]	; (1000b970 <sms_dualtimer1_fn+0x204>)
1000b8ec:	4798      	blx	r3
            
            if((button_instance.previous_state == BUTTON_STATE_BOTH) && (button_instance.current_state == BUTTON_STATE_BOTH)) {
1000b8ee:	8822      	ldrh	r2, [r4, #0]
1000b8f0:	4b26      	ldr	r3, [pc, #152]	; (1000b98c <sms_dualtimer1_fn+0x220>)
1000b8f2:	429a      	cmp	r2, r3
1000b8f4:	d112      	bne.n	1000b91c <sms_dualtimer1_fn+0x1b0>
                sms_btn_cnt++;
1000b8f6:	4a20      	ldr	r2, [pc, #128]	; (1000b978 <sms_dualtimer1_fn+0x20c>)
1000b8f8:	7813      	ldrb	r3, [r2, #0]
1000b8fa:	3301      	adds	r3, #1
1000b8fc:	b2db      	uxtb	r3, r3
1000b8fe:	7013      	strb	r3, [r2, #0]
                if(sms_btn_cnt >= SMS_BTN_SHTDWN_CNT) {
1000b900:	2b09      	cmp	r3, #9
1000b902:	d902      	bls.n	1000b90a <sms_dualtimer1_fn+0x19e>
                    sms_ble_power_down();
1000b904:	4b22      	ldr	r3, [pc, #136]	; (1000b990 <sms_dualtimer1_fn+0x224>)
1000b906:	4798      	blx	r3
1000b908:	e029      	b.n	1000b95e <sms_dualtimer1_fn+0x1f2>
                }
                else {
                    //sms_sensors_toggle_interrupt(SMS_EXTINT_DISABLE);
                    timer1_current_mode = TIMER1_MODE_SHUTDOWN;
1000b90a:	2202      	movs	r2, #2
1000b90c:	4b14      	ldr	r3, [pc, #80]	; (1000b960 <sms_dualtimer1_fn+0x1f4>)
1000b90e:	701a      	strb	r2, [r3, #0]
                    sms_dualtimer_start(TIMER_UNIT_MS, SMS_BTN_SHTDWN_MS, DUALTIMER_TIMER1);
1000b910:	2200      	movs	r2, #0
1000b912:	21fa      	movs	r1, #250	; 0xfa
1000b914:	2001      	movs	r0, #1
1000b916:	4b1a      	ldr	r3, [pc, #104]	; (1000b980 <sms_dualtimer1_fn+0x214>)
1000b918:	4798      	blx	r3
1000b91a:	e020      	b.n	1000b95e <sms_dualtimer1_fn+0x1f2>
                }
            }
            else {
                if(pressure_device.state == PRESSURE_STATE_STDBY) {
1000b91c:	2328      	movs	r3, #40	; 0x28
1000b91e:	4a1d      	ldr	r2, [pc, #116]	; (1000b994 <sms_dualtimer1_fn+0x228>)
1000b920:	5cd3      	ldrb	r3, [r2, r3]
1000b922:	2b01      	cmp	r3, #1
1000b924:	d109      	bne.n	1000b93a <sms_dualtimer1_fn+0x1ce>
                    DBG_LOG_DEV("[sms_dualtimer1_fn]\t\tStarting sensors (shutting down)...");
1000b926:	481c      	ldr	r0, [pc, #112]	; (1000b998 <sms_dualtimer1_fn+0x22c>)
1000b928:	4b1c      	ldr	r3, [pc, #112]	; (1000b99c <sms_dualtimer1_fn+0x230>)
1000b92a:	4798      	blx	r3
1000b92c:	481c      	ldr	r0, [pc, #112]	; (1000b9a0 <sms_dualtimer1_fn+0x234>)
1000b92e:	4b1d      	ldr	r3, [pc, #116]	; (1000b9a4 <sms_dualtimer1_fn+0x238>)
1000b930:	4798      	blx	r3
                    sms_sensors_interrupt_toggle(false, true);
1000b932:	2101      	movs	r1, #1
1000b934:	2000      	movs	r0, #0
1000b936:	4b1c      	ldr	r3, [pc, #112]	; (1000b9a8 <sms_dualtimer1_fn+0x23c>)
1000b938:	4798      	blx	r3
                }                    
                timer1_current_mode = TIMER1_MODE_NONE;
1000b93a:	2200      	movs	r2, #0
1000b93c:	4b08      	ldr	r3, [pc, #32]	; (1000b960 <sms_dualtimer1_fn+0x1f4>)
1000b93e:	701a      	strb	r2, [r3, #0]
                if(timer2_current_mode == TIMER2_MODE_NONE) {
1000b940:	4b10      	ldr	r3, [pc, #64]	; (1000b984 <sms_dualtimer1_fn+0x218>)
1000b942:	781b      	ldrb	r3, [r3, #0]
1000b944:	2b00      	cmp	r3, #0
1000b946:	d10a      	bne.n	1000b95e <sms_dualtimer1_fn+0x1f2>
                    ulp_ready = true;
1000b948:	3201      	adds	r2, #1
1000b94a:	4b0f      	ldr	r3, [pc, #60]	; (1000b988 <sms_dualtimer1_fn+0x21c>)
1000b94c:	701a      	strb	r2, [r3, #0]
1000b94e:	e006      	b.n	1000b95e <sms_dualtimer1_fn+0x1f2>
        }
        
        case TIMER1_MODE_NONE:
        default:
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
        if(timer2_current_mode == TIMER2_MODE_NONE) {
1000b950:	4b0c      	ldr	r3, [pc, #48]	; (1000b984 <sms_dualtimer1_fn+0x218>)
1000b952:	781b      	ldrb	r3, [r3, #0]
1000b954:	2b00      	cmp	r3, #0
1000b956:	d102      	bne.n	1000b95e <sms_dualtimer1_fn+0x1f2>
            //release_sleep_lock();
            ulp_ready = true;
1000b958:	2201      	movs	r2, #1
1000b95a:	4b0b      	ldr	r3, [pc, #44]	; (1000b988 <sms_dualtimer1_fn+0x21c>)
1000b95c:	701a      	strb	r2, [r3, #0]
        }            
        break;
    } // switch(timer1_current_mode)
}
1000b95e:	bd10      	pop	{r4, pc}
1000b960:	1001a184 	.word	0x1001a184
1000b964:	1001a220 	.word	0x1001a220
1000b968:	1000a655 	.word	0x1000a655
1000b96c:	100172f4 	.word	0x100172f4
1000b970:	1000a9e9 	.word	0x1000a9e9
1000b974:	1001a330 	.word	0x1001a330
1000b978:	1001a34e 	.word	0x1001a34e
1000b97c:	10009f51 	.word	0x10009f51
1000b980:	1000b6b9 	.word	0x1000b6b9
1000b984:	1001a331 	.word	0x1001a331
1000b988:	1001a219 	.word	0x1001a219
1000b98c:	00000303 	.word	0x00000303
1000b990:	10009f69 	.word	0x10009f69
1000b994:	1001a294 	.word	0x1001a294
1000b998:	10016660 	.word	0x10016660
1000b99c:	100154a1 	.word	0x100154a1
1000b9a0:	10017308 	.word	0x10017308
1000b9a4:	10015381 	.word	0x10015381
1000b9a8:	1000b409 	.word	0x1000b409

1000b9ac <sms_dualtimer2_fn>:

void sms_dualtimer2_fn(void)
{
1000b9ac:	b510      	push	{r4, lr}
    //sms_button_toggle_interrupt(SMS_BTN_INT_DISABLE, SMS_BTN_INT_DISABLE);
    sms_monitor_get_states("[sms_dualtimer2_fn]");
1000b9ae:	4846      	ldr	r0, [pc, #280]	; (1000bac8 <sms_dualtimer2_fn+0x11c>)
1000b9b0:	4b46      	ldr	r3, [pc, #280]	; (1000bacc <sms_dualtimer2_fn+0x120>)
1000b9b2:	4798      	blx	r3
    switch(timer2_current_mode) {
1000b9b4:	4b46      	ldr	r3, [pc, #280]	; (1000bad0 <sms_dualtimer2_fn+0x124>)
1000b9b6:	781b      	ldrb	r3, [r3, #0]
1000b9b8:	b2db      	uxtb	r3, r3
1000b9ba:	2b02      	cmp	r3, #2
1000b9bc:	d02f      	beq.n	1000ba1e <sms_dualtimer2_fn+0x72>
1000b9be:	2b03      	cmp	r3, #3
1000b9c0:	d054      	beq.n	1000ba6c <sms_dualtimer2_fn+0xc0>
1000b9c2:	2b01      	cmp	r3, #1
1000b9c4:	d17f      	bne.n	1000bac6 <sms_dualtimer2_fn+0x11a>
        case TIMER2_MODE_INDICATION_TOUT:
        timer2_current_mode = TIMER2_MODE_NONE;
1000b9c6:	2200      	movs	r2, #0
1000b9c8:	4b41      	ldr	r3, [pc, #260]	; (1000bad0 <sms_dualtimer2_fn+0x124>)
1000b9ca:	701a      	strb	r2, [r3, #0]
        if(ble_current_state == BLE_STATE_PAIRED) {
1000b9cc:	4b41      	ldr	r3, [pc, #260]	; (1000bad4 <sms_dualtimer2_fn+0x128>)
1000b9ce:	781b      	ldrb	r3, [r3, #0]
1000b9d0:	2b22      	cmp	r3, #34	; 0x22
1000b9d2:	d107      	bne.n	1000b9e4 <sms_dualtimer2_fn+0x38>
            //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
            if(timer1_current_mode == TIMER1_MODE_NONE) {
1000b9d4:	4b40      	ldr	r3, [pc, #256]	; (1000bad8 <sms_dualtimer2_fn+0x12c>)
1000b9d6:	781b      	ldrb	r3, [r3, #0]
1000b9d8:	2b00      	cmp	r3, #0
1000b9da:	d174      	bne.n	1000bac6 <sms_dualtimer2_fn+0x11a>
                //release_sleep_lock();
                ulp_ready = true;
1000b9dc:	3201      	adds	r2, #1
1000b9de:	4b3f      	ldr	r3, [pc, #252]	; (1000badc <sms_dualtimer2_fn+0x130>)
1000b9e0:	701a      	strb	r2, [r3, #0]
1000b9e2:	e070      	b.n	1000bac6 <sms_dualtimer2_fn+0x11a>
            }                
        }
        else {
            sms_ble_ind_retry++;
1000b9e4:	4a3e      	ldr	r2, [pc, #248]	; (1000bae0 <sms_dualtimer2_fn+0x134>)
1000b9e6:	7813      	ldrb	r3, [r2, #0]
1000b9e8:	3301      	adds	r3, #1
1000b9ea:	b2db      	uxtb	r3, r3
1000b9ec:	7013      	strb	r3, [r2, #0]
            if(sms_ble_ind_retry >= BLE_INDICATION_RETRY_MAX) {
1000b9ee:	2b00      	cmp	r3, #0
1000b9f0:	d009      	beq.n	1000ba06 <sms_dualtimer2_fn+0x5a>
                DBG_LOG_CONT_DEV(" ...giving up!");
1000b9f2:	483c      	ldr	r0, [pc, #240]	; (1000bae4 <sms_dualtimer2_fn+0x138>)
1000b9f4:	4b3c      	ldr	r3, [pc, #240]	; (1000bae8 <sms_dualtimer2_fn+0x13c>)
1000b9f6:	4798      	blx	r3
                //DBG_LOG_DEV("[sms_dualtimer2_fn]\tTimer1 mode: %d", timer1_current_mode);
                timer2_current_mode = TIMER2_MODE_NONE;
1000b9f8:	2200      	movs	r2, #0
1000b9fa:	4b35      	ldr	r3, [pc, #212]	; (1000bad0 <sms_dualtimer2_fn+0x124>)
1000b9fc:	701a      	strb	r2, [r3, #0]
                ble_current_state = BLE_STATE_PAIRED;
1000b9fe:	3222      	adds	r2, #34	; 0x22
1000ba00:	4b34      	ldr	r3, [pc, #208]	; (1000bad4 <sms_dualtimer2_fn+0x128>)
1000ba02:	701a      	strb	r2, [r3, #0]
1000ba04:	e05f      	b.n	1000bac6 <sms_dualtimer2_fn+0x11a>
                //DBG_LOG_DEV("[sms_dualtimer2_fn]\t\tStarting sensors...");
                //sms_sensors_toggle_interrupt(SMS_EXTINT_ENABLE);
                //if(timer1_current_mode == TIMER1_MODE_NONE) release_sleep_lock();
            }
            else {
                DBG_LOG_CONT_DEV(" ...waiting... counter: %d", sms_ble_ind_retry);
1000ba06:	2100      	movs	r1, #0
1000ba08:	4838      	ldr	r0, [pc, #224]	; (1000baec <sms_dualtimer2_fn+0x140>)
1000ba0a:	4b37      	ldr	r3, [pc, #220]	; (1000bae8 <sms_dualtimer2_fn+0x13c>)
1000ba0c:	4798      	blx	r3
                //sms_ble_send_characteristic(BLE_CHAR_PRESSURE);
                timer2_current_mode = TIMER2_MODE_INDICATION_TOUT;
1000ba0e:	2201      	movs	r2, #1
1000ba10:	4b2f      	ldr	r3, [pc, #188]	; (1000bad0 <sms_dualtimer2_fn+0x124>)
1000ba12:	701a      	strb	r2, [r3, #0]
                //ulp_ready = false;
                sms_dualtimer_start(TIMER_UNIT_MS, BLE_INDICATION_TOUT_MS, DUALTIMER_TIMER2);
1000ba14:	2164      	movs	r1, #100	; 0x64
1000ba16:	2001      	movs	r0, #1
1000ba18:	4b35      	ldr	r3, [pc, #212]	; (1000baf0 <sms_dualtimer2_fn+0x144>)
1000ba1a:	4798      	blx	r3
1000ba1c:	e053      	b.n	1000bac6 <sms_dualtimer2_fn+0x11a>
            }
        }
        break;
        
        case TIMER2_MODE_LED_STARTUP:
        DBG_LOG_DEV("[sms_dualtimer2_fn]\t\tBlinking startup...");
1000ba1e:	4835      	ldr	r0, [pc, #212]	; (1000baf4 <sms_dualtimer2_fn+0x148>)
1000ba20:	4b35      	ldr	r3, [pc, #212]	; (1000baf8 <sms_dualtimer2_fn+0x14c>)
1000ba22:	4798      	blx	r3
1000ba24:	4835      	ldr	r0, [pc, #212]	; (1000bafc <sms_dualtimer2_fn+0x150>)
1000ba26:	4b30      	ldr	r3, [pc, #192]	; (1000bae8 <sms_dualtimer2_fn+0x13c>)
1000ba28:	4798      	blx	r3
        timer2_current_mode = TIMER2_MODE_NONE;
1000ba2a:	2200      	movs	r2, #0
1000ba2c:	4b28      	ldr	r3, [pc, #160]	; (1000bad0 <sms_dualtimer2_fn+0x124>)
1000ba2e:	701a      	strb	r2, [r3, #0]
        sms_led_blink_cnt++;
1000ba30:	4a33      	ldr	r2, [pc, #204]	; (1000bb00 <sms_dualtimer2_fn+0x154>)
1000ba32:	7813      	ldrb	r3, [r2, #0]
1000ba34:	3301      	adds	r3, #1
1000ba36:	b2db      	uxtb	r3, r3
1000ba38:	7013      	strb	r3, [r2, #0]
        if(sms_led_blink_cnt >= SMS_BLINK_STARTUP_CNT) {
1000ba3a:	7813      	ldrb	r3, [r2, #0]
1000ba3c:	b2db      	uxtb	r3, r3
1000ba3e:	2b07      	cmp	r3, #7
1000ba40:	d908      	bls.n	1000ba54 <sms_dualtimer2_fn+0xa8>
            sms_led_switch_off(SMS_LED_0_PIN);
1000ba42:	2016      	movs	r0, #22
1000ba44:	4b2f      	ldr	r3, [pc, #188]	; (1000bb04 <sms_dualtimer2_fn+0x158>)
1000ba46:	4798      	blx	r3
            //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
            /* Blinking done... starting ble advertisement */
            //DBG_LOG_DEV("[sms_dualtimer2_fn]\tSMS awake... starting advertisement");
            sms_ble_advertise();
1000ba48:	4b2f      	ldr	r3, [pc, #188]	; (1000bb08 <sms_dualtimer2_fn+0x15c>)
1000ba4a:	4798      	blx	r3
            ulp_ready = true;
1000ba4c:	2201      	movs	r2, #1
1000ba4e:	4b23      	ldr	r3, [pc, #140]	; (1000badc <sms_dualtimer2_fn+0x130>)
1000ba50:	701a      	strb	r2, [r3, #0]
1000ba52:	e038      	b.n	1000bac6 <sms_dualtimer2_fn+0x11a>
        }
        else {
            //DBG_LOG_DEV("[sms_dualtimer2_fn]\tBlinking up... cnt = %d", sms_led_blink_cnt);
            sms_led_toggle(SMS_LED_0_PIN);
1000ba54:	2016      	movs	r0, #22
1000ba56:	4b2d      	ldr	r3, [pc, #180]	; (1000bb0c <sms_dualtimer2_fn+0x160>)
1000ba58:	4798      	blx	r3
            timer2_current_mode = TIMER2_MODE_LED_STARTUP;
1000ba5a:	2202      	movs	r2, #2
1000ba5c:	4b1c      	ldr	r3, [pc, #112]	; (1000bad0 <sms_dualtimer2_fn+0x124>)
1000ba5e:	701a      	strb	r2, [r3, #0]
            //ulp_ready = false;
            sms_dualtimer_start(TIMER_UNIT_MS, SMS_BLINK_STARTUP_MS, DUALTIMER_TIMER2);
1000ba60:	3a01      	subs	r2, #1
1000ba62:	2164      	movs	r1, #100	; 0x64
1000ba64:	2001      	movs	r0, #1
1000ba66:	4b22      	ldr	r3, [pc, #136]	; (1000baf0 <sms_dualtimer2_fn+0x144>)
1000ba68:	4798      	blx	r3
1000ba6a:	e02c      	b.n	1000bac6 <sms_dualtimer2_fn+0x11a>
        }
        break;
        
        case TIMER2_MODE_LED_SHUTDOWN:
        DBG_LOG_DEV("[sms_dualtimer2_fn]\t\tBlinking shutdown...");
1000ba6c:	4821      	ldr	r0, [pc, #132]	; (1000baf4 <sms_dualtimer2_fn+0x148>)
1000ba6e:	4b22      	ldr	r3, [pc, #136]	; (1000baf8 <sms_dualtimer2_fn+0x14c>)
1000ba70:	4798      	blx	r3
1000ba72:	4827      	ldr	r0, [pc, #156]	; (1000bb10 <sms_dualtimer2_fn+0x164>)
1000ba74:	4b1c      	ldr	r3, [pc, #112]	; (1000bae8 <sms_dualtimer2_fn+0x13c>)
1000ba76:	4798      	blx	r3
        timer2_current_mode = TIMER2_MODE_NONE;
1000ba78:	2200      	movs	r2, #0
1000ba7a:	4b15      	ldr	r3, [pc, #84]	; (1000bad0 <sms_dualtimer2_fn+0x124>)
1000ba7c:	701a      	strb	r2, [r3, #0]
        sms_led_blink_cnt++;
1000ba7e:	4a20      	ldr	r2, [pc, #128]	; (1000bb00 <sms_dualtimer2_fn+0x154>)
1000ba80:	7813      	ldrb	r3, [r2, #0]
1000ba82:	3301      	adds	r3, #1
1000ba84:	b2db      	uxtb	r3, r3
1000ba86:	7013      	strb	r3, [r2, #0]
        if(sms_led_blink_cnt >= SMS_BLINK_SHTDWN_CNT) {
1000ba88:	7813      	ldrb	r3, [r2, #0]
1000ba8a:	b2db      	uxtb	r3, r3
1000ba8c:	2b03      	cmp	r3, #3
1000ba8e:	d90e      	bls.n	1000baae <sms_dualtimer2_fn+0x102>
            sms_led_switch_off(SMS_LED_0_PIN);
1000ba90:	2016      	movs	r0, #22
1000ba92:	4b1c      	ldr	r3, [pc, #112]	; (1000bb04 <sms_dualtimer2_fn+0x158>)
1000ba94:	4798      	blx	r3
            DBG_LOG_DEV("[sms_dualtimer2_fn]\t\tPowering off...");
1000ba96:	4817      	ldr	r0, [pc, #92]	; (1000baf4 <sms_dualtimer2_fn+0x148>)
1000ba98:	4b17      	ldr	r3, [pc, #92]	; (1000baf8 <sms_dualtimer2_fn+0x14c>)
1000ba9a:	4798      	blx	r3
1000ba9c:	481d      	ldr	r0, [pc, #116]	; (1000bb14 <sms_dualtimer2_fn+0x168>)
1000ba9e:	4b12      	ldr	r3, [pc, #72]	; (1000bae8 <sms_dualtimer2_fn+0x13c>)
1000baa0:	4798      	blx	r3
            //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
            sms_init_variables();
1000baa2:	4b1d      	ldr	r3, [pc, #116]	; (1000bb18 <sms_dualtimer2_fn+0x16c>)
1000baa4:	4798      	blx	r3
            ulp_ready = true;
1000baa6:	2201      	movs	r2, #1
1000baa8:	4b0c      	ldr	r3, [pc, #48]	; (1000badc <sms_dualtimer2_fn+0x130>)
1000baaa:	701a      	strb	r2, [r3, #0]
1000baac:	e00b      	b.n	1000bac6 <sms_dualtimer2_fn+0x11a>
            //release_sleep_lock();
        }
        else {
            //DBG_LOG_DEV("[sms_dualtimer2_fn]\tBLinking off... cnt = %d", sms_led_blink_cnt);
            sms_led_toggle(SMS_LED_0_PIN);
1000baae:	2016      	movs	r0, #22
1000bab0:	4b16      	ldr	r3, [pc, #88]	; (1000bb0c <sms_dualtimer2_fn+0x160>)
1000bab2:	4798      	blx	r3
            timer2_current_mode = TIMER2_MODE_LED_SHUTDOWN;
1000bab4:	2203      	movs	r2, #3
1000bab6:	4b06      	ldr	r3, [pc, #24]	; (1000bad0 <sms_dualtimer2_fn+0x124>)
1000bab8:	701a      	strb	r2, [r3, #0]
            //ulp_ready = false;
            sms_dualtimer_start(TIMER_UNIT_MS, SMS_BLINK_SHTDWN_MS, DUALTIMER_TIMER2);
1000baba:	3a02      	subs	r2, #2
1000babc:	21c8      	movs	r1, #200	; 0xc8
1000babe:	0049      	lsls	r1, r1, #1
1000bac0:	2001      	movs	r0, #1
1000bac2:	4b0b      	ldr	r3, [pc, #44]	; (1000baf0 <sms_dualtimer2_fn+0x144>)
1000bac4:	4798      	blx	r3
        case TIMER2_MODE_LED_CONNECTION_LOST:
        case TIMER2_MODE_NONE:
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
        break;
    }
1000bac6:	bd10      	pop	{r4, pc}
1000bac8:	10017344 	.word	0x10017344
1000bacc:	1000a9e9 	.word	0x1000a9e9
1000bad0:	1001a331 	.word	0x1001a331
1000bad4:	1001a330 	.word	0x1001a330
1000bad8:	1001a184 	.word	0x1001a184
1000badc:	1001a219 	.word	0x1001a219
1000bae0:	1001a325 	.word	0x1001a325
1000bae4:	10017358 	.word	0x10017358
1000bae8:	10015381 	.word	0x10015381
1000baec:	10017368 	.word	0x10017368
1000baf0:	1000b6b9 	.word	0x1000b6b9
1000baf4:	10016660 	.word	0x10016660
1000baf8:	100154a1 	.word	0x100154a1
1000bafc:	10017384 	.word	0x10017384
1000bb00:	1001a354 	.word	0x1001a354
1000bb04:	1000aee9 	.word	0x1000aee9
1000bb08:	1000a129 	.word	0x1000a129
1000bb0c:	1000af49 	.word	0x1000af49
1000bb10:	100173b0 	.word	0x100173b0
1000bb14:	100173dc 	.word	0x100173dc
1000bb18:	1000f911 	.word	0x1000f911

1000bb1c <spi_slave_inst_get_config_defaults>:
void spi_slave_inst_get_config_defaults(
		struct spi_slave_inst_config *const config)
{
	Assert(config);

	config->ss_pin          = PIN_LP_GPIO_12;
1000bb1c:	230c      	movs	r3, #12
1000bb1e:	7003      	strb	r3, [r0, #0]
	config->address_enabled = false;
1000bb20:	2300      	movs	r3, #0
1000bb22:	7043      	strb	r3, [r0, #1]
	config->address         = 0;
1000bb24:	7083      	strb	r3, [r0, #2]
}
1000bb26:	4770      	bx	lr

1000bb28 <spi_get_config_defaults>:
void spi_get_config_defaults(
		struct spi_config *const config)
{
	Assert(config);

	config->mode             = SPI_MODE_MASTER;
1000bb28:	2301      	movs	r3, #1
1000bb2a:	7003      	strb	r3, [r0, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
1000bb2c:	2300      	movs	r3, #0
1000bb2e:	7043      	strb	r3, [r0, #1]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
1000bb30:	7083      	strb	r3, [r0, #2]
	config->clock_source     = SPI_CLK_INPUT_0;
1000bb32:	70c3      	strb	r3, [r0, #3]
	config->clock_divider    = 129;
1000bb34:	3381      	adds	r3, #129	; 0x81
1000bb36:	7103      	strb	r3, [r0, #4]

	config->pin_number_pad[0] = PIN_LP_GPIO_10;
1000bb38:	3b77      	subs	r3, #119	; 0x77
1000bb3a:	6083      	str	r3, [r0, #8]
	config->pin_number_pad[1] = PIN_LP_GPIO_11;
1000bb3c:	3301      	adds	r3, #1
1000bb3e:	60c3      	str	r3, [r0, #12]
	config->pin_number_pad[2] = PIN_LP_GPIO_12;
1000bb40:	3301      	adds	r3, #1
1000bb42:	6103      	str	r3, [r0, #16]
	config->pin_number_pad[3] = PIN_LP_GPIO_13;
1000bb44:	3301      	adds	r3, #1
1000bb46:	6143      	str	r3, [r0, #20]

	config->pinmux_sel_pad[0] = MUX_LP_GPIO_10_SPI0_SCK;
1000bb48:	3b0b      	subs	r3, #11
1000bb4a:	6183      	str	r3, [r0, #24]
	config->pinmux_sel_pad[1] = MUX_LP_GPIO_11_SPI0_MOSI;
1000bb4c:	61c3      	str	r3, [r0, #28]
	config->pinmux_sel_pad[2] = MUX_LP_GPIO_12_SPI0_SSN;
1000bb4e:	6203      	str	r3, [r0, #32]
	config->pinmux_sel_pad[3] = MUX_LP_GPIO_13_SPI0_MISO;
1000bb50:	6243      	str	r3, [r0, #36]	; 0x24
};
1000bb52:	4770      	bx	lr

1000bb54 <spi_attach_slave>:
 *
 */
void spi_attach_slave(
		struct spi_slave_inst *const slave,
		struct spi_slave_inst_config *const config)
{
1000bb54:	b530      	push	{r4, r5, lr}
1000bb56:	b083      	sub	sp, #12
1000bb58:	0004      	movs	r4, r0
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
1000bb5a:	780b      	ldrb	r3, [r1, #0]
1000bb5c:	7003      	strb	r3, [r0, #0]
	slave->address_enabled = config->address_enabled;
1000bb5e:	784b      	ldrb	r3, [r1, #1]
1000bb60:	7043      	strb	r3, [r0, #1]
	slave->address         = config->address;
1000bb62:	788b      	ldrb	r3, [r1, #2]
1000bb64:	7083      	strb	r3, [r0, #2]

	struct gpio_config config_gpio;
	gpio_get_config_defaults(&config_gpio);
1000bb66:	ad01      	add	r5, sp, #4
1000bb68:	0028      	movs	r0, r5
1000bb6a:	4b07      	ldr	r3, [pc, #28]	; (1000bb88 <spi_attach_slave+0x34>)
1000bb6c:	4798      	blx	r3
	config_gpio.direction = GPIO_PIN_DIR_OUTPUT;
1000bb6e:	2301      	movs	r3, #1
1000bb70:	702b      	strb	r3, [r5, #0]
	gpio_pin_set_config(slave->ss_pin, &config_gpio);
1000bb72:	7820      	ldrb	r0, [r4, #0]
1000bb74:	0029      	movs	r1, r5
1000bb76:	4b05      	ldr	r3, [pc, #20]	; (1000bb8c <spi_attach_slave+0x38>)
1000bb78:	4798      	blx	r3

	gpio_pin_set_output_level(slave->ss_pin, true);
1000bb7a:	7820      	ldrb	r0, [r4, #0]
1000bb7c:	2101      	movs	r1, #1
1000bb7e:	4b04      	ldr	r3, [pc, #16]	; (1000bb90 <spi_attach_slave+0x3c>)
1000bb80:	4798      	blx	r3
}
1000bb82:	b003      	add	sp, #12
1000bb84:	bd30      	pop	{r4, r5, pc}
1000bb86:	46c0      	nop			; (mov r8, r8)
1000bb88:	1000c171 	.word	0x1000c171
1000bb8c:	1000c181 	.word	0x1000c181
1000bb90:	1000c3d9 	.word	0x1000c3d9

1000bb94 <spi_enable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void spi_enable(struct spi_module *const module)
{
	Spi *const spi_module = (module->hw);
1000bb94:	6803      	ldr	r3, [r0, #0]
		NVIC_EnableIRQ(SPI1_TX_IRQn);
	}
#endif

	/* Enable SPI */
	spi_module->SPI_MODULE_ENABLE.reg = SPI_MODULE_ENABLE_ENABLE;
1000bb96:	2201      	movs	r2, #1
1000bb98:	761a      	strb	r2, [r3, #24]
}
1000bb9a:	4770      	bx	lr

1000bb9c <spi_disable>:
 * This function will disable the SPI module.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void spi_disable(struct spi_module *const module)
{
1000bb9c:	b510      	push	{r4, lr}
		NVIC_DisableIRQ(SPI1_TX_IRQn);
	}
#  endif

	/* Disable SPI */
	spi_module->SPI_MODULE_ENABLE.reg = (0x0ul << SPI_MODULE_ENABLE_ENABLE_Pos);
1000bb9e:	2300      	movs	r3, #0
1000bba0:	6802      	ldr	r2, [r0, #0]
1000bba2:	7613      	strb	r3, [r2, #24]
 */
static void _spi_clock_disable(struct spi_module *const module)
{
	Assert(module);

	Spi *const spi_module = (module->hw);
1000bba4:	6803      	ldr	r3, [r0, #0]

	if (spi_module == (void *)SPI0) {
1000bba6:	4a0d      	ldr	r2, [pc, #52]	; (1000bbdc <spi_disable+0x40>)
1000bba8:	4293      	cmp	r3, r2
1000bbaa:	d109      	bne.n	1000bbc0 <spi_disable+0x24>
		system_clock_peripheral_disable(PERIPHERAL_SPI0_SCK_CLK);
1000bbac:	2041      	movs	r0, #65	; 0x41
1000bbae:	4c0c      	ldr	r4, [pc, #48]	; (1000bbe0 <spi_disable+0x44>)
1000bbb0:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI0_SCK_PHASE);
1000bbb2:	2026      	movs	r0, #38	; 0x26
1000bbb4:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI0_IF);
1000bbb6:	2038      	movs	r0, #56	; 0x38
1000bbb8:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI0_CORE);
1000bbba:	2001      	movs	r0, #1
1000bbbc:	47a0      	blx	r4
1000bbbe:	e00b      	b.n	1000bbd8 <spi_disable+0x3c>
	} else if (spi_module == (void *)SPI1) {
1000bbc0:	4a08      	ldr	r2, [pc, #32]	; (1000bbe4 <spi_disable+0x48>)
1000bbc2:	4293      	cmp	r3, r2
1000bbc4:	d108      	bne.n	1000bbd8 <spi_disable+0x3c>
		system_clock_peripheral_disable(PERIPHERAL_SPI1_SCK_CLK);
1000bbc6:	2042      	movs	r0, #66	; 0x42
1000bbc8:	4c05      	ldr	r4, [pc, #20]	; (1000bbe0 <spi_disable+0x44>)
1000bbca:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI1_SCK_PHASE);
1000bbcc:	2027      	movs	r0, #39	; 0x27
1000bbce:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI1_IF);
1000bbd0:	2039      	movs	r0, #57	; 0x39
1000bbd2:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI1_CORE);
1000bbd4:	2002      	movs	r0, #2
1000bbd6:	47a0      	blx	r4
#  endif

	/* Disable SPI */
	spi_module->SPI_MODULE_ENABLE.reg = (0x0ul << SPI_MODULE_ENABLE_ENABLE_Pos);
	_spi_clock_disable(module);
}
1000bbd8:	bd10      	pop	{r4, pc}
1000bbda:	46c0      	nop			; (mov r8, r8)
1000bbdc:	40006000 	.word	0x40006000
1000bbe0:	1000cb71 	.word	0x1000cb71
1000bbe4:	40007000 	.word	0x40007000

1000bbe8 <spi_reset>:
 * disable it.
 *
 * \param[in,out] module Pointer to the software instance struct
 */
void spi_reset(struct spi_module *const module)
{
1000bbe8:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Spi *const spi_module = (module->hw);
1000bbea:	6804      	ldr	r4, [r0, #0]

	/* Disable the module */
	spi_disable(module);
1000bbec:	4b09      	ldr	r3, [pc, #36]	; (1000bc14 <spi_reset+0x2c>)
1000bbee:	4798      	blx	r3

	/* Software reset the module */
	if(spi_module == (void *)SPI0) {
1000bbf0:	4b09      	ldr	r3, [pc, #36]	; (1000bc18 <spi_reset+0x30>)
1000bbf2:	429c      	cmp	r4, r3
1000bbf4:	d105      	bne.n	1000bc02 <spi_reset+0x1a>
		system_peripheral_reset(PERIPHERAL_SPI0_CORE);
1000bbf6:	2001      	movs	r0, #1
1000bbf8:	4c08      	ldr	r4, [pc, #32]	; (1000bc1c <spi_reset+0x34>)
1000bbfa:	47a0      	blx	r4
		system_peripheral_reset(PERIPHERAL_SPI0_IF);
1000bbfc:	2038      	movs	r0, #56	; 0x38
1000bbfe:	47a0      	blx	r4
1000bc00:	e007      	b.n	1000bc12 <spi_reset+0x2a>
	} else if (spi_module == (void *)SPI1) {
1000bc02:	4b07      	ldr	r3, [pc, #28]	; (1000bc20 <spi_reset+0x38>)
1000bc04:	429c      	cmp	r4, r3
1000bc06:	d104      	bne.n	1000bc12 <spi_reset+0x2a>
		system_peripheral_reset(PERIPHERAL_SPI1_CORE);
1000bc08:	2002      	movs	r0, #2
1000bc0a:	4c04      	ldr	r4, [pc, #16]	; (1000bc1c <spi_reset+0x34>)
1000bc0c:	47a0      	blx	r4
		system_peripheral_reset(PERIPHERAL_SPI1_IF);
1000bc0e:	2039      	movs	r0, #57	; 0x39
1000bc10:	47a0      	blx	r4
	}
}
1000bc12:	bd10      	pop	{r4, pc}
1000bc14:	1000bb9d 	.word	0x1000bb9d
1000bc18:	40006000 	.word	0x40006000
1000bc1c:	1000cedd 	.word	0x1000cedd
1000bc20:	40007000 	.word	0x40007000

1000bc24 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Spi *const hw,
		const struct spi_config *const config)
{
1000bc24:	b5f0      	push	{r4, r5, r6, r7, lr}
1000bc26:	465f      	mov	r7, fp
1000bc28:	4646      	mov	r6, r8
1000bc2a:	b4c0      	push	{r6, r7}
1000bc2c:	b083      	sub	sp, #12
1000bc2e:	0006      	movs	r6, r0
1000bc30:	4688      	mov	r8, r1
1000bc32:	0015      	movs	r5, r2
	Assert(config);

	uint8_t idx;

	/* Initialize device instance */
	module->hw = hw;
1000bc34:	6031      	str	r1, [r6, #0]

	Spi *const spi_module = (module->hw);

	/* Check if module is enabled. */
	if (spi_module->SPI_MODULE_ENABLE.reg & SPI_MODULE_ENABLE_MASK) {
1000bc36:	7e0b      	ldrb	r3, [r1, #24]
1000bc38:	07db      	lsls	r3, r3, #31
1000bc3a:	d501      	bpl.n	1000bc40 <spi_init+0x1c>
		spi_module->SPI_MODULE_ENABLE.reg = (0x0ul << SPI_MODULE_ENABLE_ENABLE_Pos);
1000bc3c:	2300      	movs	r3, #0
1000bc3e:	760b      	strb	r3, [r1, #24]
	}

	spi_reset(module);
1000bc40:	0030      	movs	r0, r6
1000bc42:	4b4a      	ldr	r3, [pc, #296]	; (1000bd6c <spi_init+0x148>)
1000bc44:	4798      	blx	r3
 */
static void _spi_clock_enable(struct spi_module *const module)
{
	Assert(module);

	Spi *const spi_module = (module->hw);
1000bc46:	6833      	ldr	r3, [r6, #0]

	if (spi_module == (void *)SPI0) {
1000bc48:	4a49      	ldr	r2, [pc, #292]	; (1000bd70 <spi_init+0x14c>)
1000bc4a:	4293      	cmp	r3, r2
1000bc4c:	d109      	bne.n	1000bc62 <spi_init+0x3e>
		system_clock_peripheral_enable(PERIPHERAL_SPI0_SCK_CLK);
1000bc4e:	2041      	movs	r0, #65	; 0x41
1000bc50:	4c48      	ldr	r4, [pc, #288]	; (1000bd74 <spi_init+0x150>)
1000bc52:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI0_SCK_PHASE);
1000bc54:	2026      	movs	r0, #38	; 0x26
1000bc56:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI0_IF);
1000bc58:	2038      	movs	r0, #56	; 0x38
1000bc5a:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI0_CORE);
1000bc5c:	2001      	movs	r0, #1
1000bc5e:	47a0      	blx	r4
1000bc60:	e00b      	b.n	1000bc7a <spi_init+0x56>
	} else if (spi_module == (void *)SPI1) {
1000bc62:	4a45      	ldr	r2, [pc, #276]	; (1000bd78 <spi_init+0x154>)
1000bc64:	4293      	cmp	r3, r2
1000bc66:	d108      	bne.n	1000bc7a <spi_init+0x56>
		system_clock_peripheral_enable(PERIPHERAL_SPI1_SCK_CLK);
1000bc68:	2042      	movs	r0, #66	; 0x42
1000bc6a:	4c42      	ldr	r4, [pc, #264]	; (1000bd74 <spi_init+0x150>)
1000bc6c:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI1_SCK_PHASE);
1000bc6e:	2027      	movs	r0, #39	; 0x27
1000bc70:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI1_IF);
1000bc72:	2039      	movs	r0, #57	; 0x39
1000bc74:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI1_CORE);
1000bc76:	2002      	movs	r0, #2
1000bc78:	47a0      	blx	r4
	}
#endif

	//Program the pinmux.
	struct gpio_config config_gpio;
	gpio_get_config_defaults(&config_gpio);
1000bc7a:	a801      	add	r0, sp, #4
1000bc7c:	4b3f      	ldr	r3, [pc, #252]	; (1000bd7c <spi_init+0x158>)
1000bc7e:	4798      	blx	r3
1000bc80:	002c      	movs	r4, r5
1000bc82:	3408      	adds	r4, #8
1000bc84:	2318      	movs	r3, #24
1000bc86:	469b      	mov	fp, r3
1000bc88:	44ab      	add	fp, r5
1000bc8a:	0027      	movs	r7, r4

	/* Set the pinmux for this spi module. */
	for(idx = 0; idx < 4; idx++) {
		if (config->pin_number_pad[idx] != PINMUX_UNUSED) {
1000bc8c:	6820      	ldr	r0, [r4, #0]
1000bc8e:	1c43      	adds	r3, r0, #1
1000bc90:	d011      	beq.n	1000bcb6 <spi_init+0x92>
			if (config->mode == SPI_MODE_MASTER) {
1000bc92:	782b      	ldrb	r3, [r5, #0]
1000bc94:	2b01      	cmp	r3, #1
1000bc96:	d102      	bne.n	1000bc9e <spi_init+0x7a>
				config_gpio.direction = GPIO_PIN_DIR_OUTPUT;
1000bc98:	466a      	mov	r2, sp
1000bc9a:	7113      	strb	r3, [r2, #4]
1000bc9c:	e003      	b.n	1000bca6 <spi_init+0x82>
			} else if (config->mode == SPI_MODE_SLAVE) {
1000bc9e:	2b00      	cmp	r3, #0
1000bca0:	d101      	bne.n	1000bca6 <spi_init+0x82>
				config_gpio.direction = GPIO_PIN_DIR_INPUT;
1000bca2:	466a      	mov	r2, sp
1000bca4:	7113      	strb	r3, [r2, #4]
			}
			gpio_pin_set_config(config->pin_number_pad[idx], &config_gpio);
1000bca6:	b2c0      	uxtb	r0, r0
1000bca8:	a901      	add	r1, sp, #4
1000bcaa:	4b35      	ldr	r3, [pc, #212]	; (1000bd80 <spi_init+0x15c>)
1000bcac:	4798      	blx	r3
			gpio_pinmux_cofiguration(config->pin_number_pad[idx], \
1000bcae:	8a39      	ldrh	r1, [r7, #16]
1000bcb0:	7838      	ldrb	r0, [r7, #0]
1000bcb2:	4b34      	ldr	r3, [pc, #208]	; (1000bd84 <spi_init+0x160>)
1000bcb4:	4798      	blx	r3
1000bcb6:	3404      	adds	r4, #4
	//Program the pinmux.
	struct gpio_config config_gpio;
	gpio_get_config_defaults(&config_gpio);

	/* Set the pinmux for this spi module. */
	for(idx = 0; idx < 4; idx++) {
1000bcb8:	455c      	cmp	r4, fp
1000bcba:	d1e6      	bne.n	1000bc8a <spi_init+0x66>
						(uint16_t)(config->pinmux_sel_pad[idx]));
		}
	}

	/* Set up the input clock for the module */
	spi_module->CLOCK_SOURCE_SELECT.reg = config->clock_source;
1000bcbc:	78eb      	ldrb	r3, [r5, #3]
1000bcbe:	4642      	mov	r2, r8
1000bcc0:	7413      	strb	r3, [r2, #16]

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
1000bcc2:	782b      	ldrb	r3, [r5, #0]
1000bcc4:	2b01      	cmp	r3, #1
1000bcc6:	d100      	bne.n	1000bcca <spi_init+0xa6>
		/* Set the mode in SPI master mode */
		spi_module->SPI_MASTER_MODE.reg = SPI_MODE_MASTER;
1000bcc8:	7713      	strb	r3, [r2, #28]
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
1000bcca:	782b      	ldrb	r3, [r5, #0]
1000bccc:	2b00      	cmp	r3, #0
1000bcce:	d101      	bne.n	1000bcd4 <spi_init+0xb0>
		/* Set the mode in SPI slave mode */
		spi_module->SPI_MASTER_MODE.reg = SPI_MODE_SLAVE;
1000bcd0:	4642      	mov	r2, r8
1000bcd2:	7713      	strb	r3, [r2, #28]
		const struct spi_config *const config)
{
	Assert(module);
	Assert(config);

	Spi *const spi_module = (module->hw);
1000bcd4:	6833      	ldr	r3, [r6, #0]

	module->mode  = config->mode;
1000bcd6:	782a      	ldrb	r2, [r5, #0]
1000bcd8:	7172      	strb	r2, [r6, #5]

#if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
1000bcda:	782a      	ldrb	r2, [r5, #0]
1000bcdc:	2a01      	cmp	r2, #1
1000bcde:	d101      	bne.n	1000bce4 <spi_init+0xc0>
		spi_module->SPI_CLK_DIVIDER.reg = config->clock_divider;
1000bce0:	792a      	ldrb	r2, [r5, #4]
1000bce2:	829a      	strh	r2, [r3, #20]
	}
#endif

	/* Set data order */
	if (config->data_order == SPI_DATA_ORDER_LSB) {
1000bce4:	786a      	ldrb	r2, [r5, #1]
1000bce6:	2a04      	cmp	r2, #4
1000bce8:	d104      	bne.n	1000bcf4 <spi_init+0xd0>
		spi_module->SPI_CONFIGURATION.bit.LSB_FIRST_ENABLE = 0x1;
1000bcea:	2124      	movs	r1, #36	; 0x24
1000bcec:	5c58      	ldrb	r0, [r3, r1]
1000bcee:	4302      	orrs	r2, r0
1000bcf0:	545a      	strb	r2, [r3, r1]
1000bcf2:	e004      	b.n	1000bcfe <spi_init+0xda>
	} else {
		spi_module->SPI_CONFIGURATION.bit.LSB_FIRST_ENABLE = 0x0;
1000bcf4:	2124      	movs	r1, #36	; 0x24
1000bcf6:	5c5a      	ldrb	r2, [r3, r1]
1000bcf8:	2004      	movs	r0, #4
1000bcfa:	4382      	bics	r2, r0
1000bcfc:	545a      	strb	r2, [r3, r1]
	}

	/* Set clock polarity and clock phase */
	switch(config->transfer_mode)
1000bcfe:	78aa      	ldrb	r2, [r5, #2]
1000bd00:	2a01      	cmp	r2, #1
1000bd02:	d01a      	beq.n	1000bd3a <spi_init+0x116>
1000bd04:	2a00      	cmp	r2, #0
1000bd06:	d004      	beq.n	1000bd12 <spi_init+0xee>
1000bd08:	2a02      	cmp	r2, #2
1000bd0a:	d00c      	beq.n	1000bd26 <spi_init+0x102>
1000bd0c:	2a03      	cmp	r2, #3
1000bd0e:	d01e      	beq.n	1000bd4e <spi_init+0x12a>
1000bd10:	e026      	b.n	1000bd60 <spi_init+0x13c>
	{
		case SPI_TRANSFER_MODE_0:
			spi_module->SPI_CONFIGURATION.bit.SCK_PHASE = 0x0;
1000bd12:	2224      	movs	r2, #36	; 0x24
1000bd14:	5c99      	ldrb	r1, [r3, r2]
1000bd16:	2002      	movs	r0, #2
1000bd18:	4381      	bics	r1, r0
1000bd1a:	5499      	strb	r1, [r3, r2]
			spi_module->SPI_CONFIGURATION.bit.SCK_POLARITY = 0x0;
1000bd1c:	5c99      	ldrb	r1, [r3, r2]
1000bd1e:	3801      	subs	r0, #1
1000bd20:	4381      	bics	r1, r0
1000bd22:	5499      	strb	r1, [r3, r2]
1000bd24:	e01c      	b.n	1000bd60 <spi_init+0x13c>
			break;
		case SPI_TRANSFER_MODE_1:
			spi_module->SPI_CONFIGURATION.bit.SCK_PHASE = 0x1;
1000bd26:	2224      	movs	r2, #36	; 0x24
1000bd28:	5c98      	ldrb	r0, [r3, r2]
1000bd2a:	2102      	movs	r1, #2
1000bd2c:	4301      	orrs	r1, r0
1000bd2e:	5499      	strb	r1, [r3, r2]
			spi_module->SPI_CONFIGURATION.bit.SCK_POLARITY = 0x0;
1000bd30:	5c99      	ldrb	r1, [r3, r2]
1000bd32:	2001      	movs	r0, #1
1000bd34:	4381      	bics	r1, r0
1000bd36:	5499      	strb	r1, [r3, r2]
1000bd38:	e012      	b.n	1000bd60 <spi_init+0x13c>
			break;
		case SPI_TRANSFER_MODE_2:
			spi_module->SPI_CONFIGURATION.bit.SCK_PHASE = 0x0;
1000bd3a:	2224      	movs	r2, #36	; 0x24
1000bd3c:	5c99      	ldrb	r1, [r3, r2]
1000bd3e:	2002      	movs	r0, #2
1000bd40:	4381      	bics	r1, r0
1000bd42:	5499      	strb	r1, [r3, r2]
			spi_module->SPI_CONFIGURATION.bit.SCK_POLARITY = 0x1;
1000bd44:	5c98      	ldrb	r0, [r3, r2]
1000bd46:	2101      	movs	r1, #1
1000bd48:	4301      	orrs	r1, r0
1000bd4a:	5499      	strb	r1, [r3, r2]
1000bd4c:	e008      	b.n	1000bd60 <spi_init+0x13c>
			break;
		case SPI_TRANSFER_MODE_3:
			spi_module->SPI_CONFIGURATION.bit.SCK_PHASE = 0x1;
1000bd4e:	2224      	movs	r2, #36	; 0x24
1000bd50:	5c98      	ldrb	r0, [r3, r2]
1000bd52:	2102      	movs	r1, #2
1000bd54:	4301      	orrs	r1, r0
1000bd56:	5499      	strb	r1, [r3, r2]
			spi_module->SPI_CONFIGURATION.bit.SCK_POLARITY = 0x1;
1000bd58:	5c98      	ldrb	r0, [r3, r2]
1000bd5a:	2101      	movs	r1, #1
1000bd5c:	4301      	orrs	r1, r0
1000bd5e:	5499      	strb	r1, [r3, r2]
	module->locked                     = 0;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
1000bd60:	2000      	movs	r0, #0
1000bd62:	b003      	add	sp, #12
1000bd64:	bc0c      	pop	{r2, r3}
1000bd66:	4690      	mov	r8, r2
1000bd68:	469b      	mov	fp, r3
1000bd6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000bd6c:	1000bbe9 	.word	0x1000bbe9
1000bd70:	40006000 	.word	0x40006000
1000bd74:	1000c815 	.word	0x1000c815
1000bd78:	40007000 	.word	0x40007000
1000bd7c:	1000c171 	.word	0x1000c171
1000bd80:	1000c181 	.word	0x1000c181
1000bd84:	1000c465 	.word	0x1000c465

1000bd88 <spi_transceive_buffer_wait>:
enum status_code spi_transceive_buffer_wait(
		struct spi_module *const module,
		uint8_t *tx_data,
		uint8_t *rx_data,
		uint16_t length)
{
1000bd88:	b5f0      	push	{r4, r5, r6, r7, lr}
1000bd8a:	b083      	sub	sp, #12
	Spi *spi_module = module->hw;
1000bd8c:	6804      	ldr	r4, [r0, #0]
	uint8_t dummy = 0;
1000bd8e:	2600      	movs	r6, #0
1000bd90:	466d      	mov	r5, sp
1000bd92:	71ee      	strb	r6, [r5, #7]
1000bd94:	3507      	adds	r5, #7
	uint8_t skip_mosi = 0;
	uint8_t skip_miso = 0;
	uint8_t status;
	uint16_t transfer_len = 0;

	if(spi_module == 0) {
1000bd96:	2c00      	cmp	r4, #0
1000bd98:	d034      	beq.n	1000be04 <spi_transceive_buffer_wait+0x7c>
		return STATUS_ERR_NOT_INITIALIZED;
	}
	if(!tx_data) {
1000bd9a:	2900      	cmp	r1, #0
1000bd9c:	d104      	bne.n	1000bda8 <spi_transceive_buffer_wait+0x20>
		tx_data = &dummy;
		*tx_data = module->tx_dummy_byte;
1000bd9e:	0029      	movs	r1, r5
1000bda0:	7980      	ldrb	r0, [r0, #6]
1000bda2:	7028      	strb	r0, [r5, #0]
		skip_mosi = 1;
1000bda4:	2701      	movs	r7, #1
1000bda6:	e00b      	b.n	1000bdc0 <spi_transceive_buffer_wait+0x38>
	} else if(!rx_data) {
1000bda8:	2a00      	cmp	r2, #0
1000bdaa:	d005      	beq.n	1000bdb8 <spi_transceive_buffer_wait+0x30>
		rx_data = &dummy;
		skip_miso = 1;
	} else if(length == 0) {
		return STATUS_ERR_INVALID_ARG;
1000bdac:	2017      	movs	r0, #23
		*tx_data = module->tx_dummy_byte;
		skip_mosi = 1;
	} else if(!rx_data) {
		rx_data = &dummy;
		skip_miso = 1;
	} else if(length == 0) {
1000bdae:	2b00      	cmp	r3, #0
1000bdb0:	d029      	beq.n	1000be06 <spi_transceive_buffer_wait+0x7e>
		uint16_t length)
{
	Spi *spi_module = module->hw;
	uint8_t dummy = 0;
	uint8_t skip_mosi = 0;
	uint8_t skip_miso = 0;
1000bdb2:	2600      	movs	r6, #0
		uint8_t *rx_data,
		uint16_t length)
{
	Spi *spi_module = module->hw;
	uint8_t dummy = 0;
	uint8_t skip_mosi = 0;
1000bdb4:	2700      	movs	r7, #0
1000bdb6:	e003      	b.n	1000bdc0 <spi_transceive_buffer_wait+0x38>
		tx_data = &dummy;
		*tx_data = module->tx_dummy_byte;
		skip_mosi = 1;
	} else if(!rx_data) {
		rx_data = &dummy;
		skip_miso = 1;
1000bdb8:	2601      	movs	r6, #1
		uint8_t *rx_data,
		uint16_t length)
{
	Spi *spi_module = module->hw;
	uint8_t dummy = 0;
	uint8_t skip_mosi = 0;
1000bdba:	2700      	movs	r7, #0
	if(!tx_data) {
		tx_data = &dummy;
		*tx_data = module->tx_dummy_byte;
		skip_mosi = 1;
	} else if(!rx_data) {
		rx_data = &dummy;
1000bdbc:	466a      	mov	r2, sp
1000bdbe:	3207      	adds	r2, #7
 */
static bool _spi_is_active(Spi *const spi_module)
{
	Assert(spi_module);

	return spi_module->SPI_BUS_STATUS.bit.SPI_ACTIVE;
1000bdc0:	2528      	movs	r5, #40	; 0x28
1000bdc2:	5d60      	ldrb	r0, [r4, r5]
	}

	/* Check for Idle */
	do {
		status = _spi_is_active(spi_module);
	}while(status);
1000bdc4:	07c0      	lsls	r0, r0, #31
1000bdc6:	d4fc      	bmi.n	1000bdc2 <spi_transceive_buffer_wait+0x3a>

	/* Clear all status registers */
	spi_module->RECEIVE_STATUS.reg;
1000bdc8:	7b20      	ldrb	r0, [r4, #12]
	spi_module->TRANSMIT_STATUS.reg;
1000bdca:	7a20      	ldrb	r0, [r4, #8]

	/* Start transfer */
	while(transfer_len < length) {
1000bdcc:	2b00      	cmp	r3, #0
1000bdce:	d014      	beq.n	1000bdfa <spi_transceive_buffer_wait+0x72>
1000bdd0:	2500      	movs	r5, #0
		/* Read data shifted from MISO */
		while(!_spi_is_ready_to_read(spi_module));
		*rx_data = spi_module->RECEIVE_DATA.reg;
		transfer_len++;
		if (!skip_mosi) {
			tx_data++;
1000bdd2:	4278      	negs	r0, r7
1000bdd4:	4147      	adcs	r7, r0
		}
		if (!skip_miso) {
			rx_data++;
1000bdd6:	4270      	negs	r0, r6
1000bdd8:	4146      	adcs	r6, r0
		Spi *const spi_module)
{
	Assert(spi_module);

	/* Check interrupt flag */
	return (spi_module->TRANSMIT_STATUS.bit.TX_FIFO_NOT_FULL);
1000bdda:	7a20      	ldrb	r0, [r4, #8]
	spi_module->TRANSMIT_STATUS.reg;

	/* Start transfer */
	while(transfer_len < length) {
		/* Write data to MOSI */
		while(!_spi_is_ready_to_write(spi_module));
1000bddc:	07c0      	lsls	r0, r0, #31
1000bdde:	d5fc      	bpl.n	1000bdda <spi_transceive_buffer_wait+0x52>
		spi_module->TRANSMIT_DATA.reg = *tx_data;
1000bde0:	7808      	ldrb	r0, [r1, #0]
1000bde2:	7020      	strb	r0, [r4, #0]
		Spi *const spi_module)
{
	Assert(spi_module);

	/* Check interrupt flag */
	return (spi_module->RECEIVE_STATUS.bit.RX_FIFO_NOT_EMPTY);
1000bde4:	7b20      	ldrb	r0, [r4, #12]
	while(transfer_len < length) {
		/* Write data to MOSI */
		while(!_spi_is_ready_to_write(spi_module));
		spi_module->TRANSMIT_DATA.reg = *tx_data;
		/* Read data shifted from MISO */
		while(!_spi_is_ready_to_read(spi_module));
1000bde6:	07c0      	lsls	r0, r0, #31
1000bde8:	d5fc      	bpl.n	1000bde4 <spi_transceive_buffer_wait+0x5c>
		*rx_data = spi_module->RECEIVE_DATA.reg;
1000bdea:	7920      	ldrb	r0, [r4, #4]
1000bdec:	7010      	strb	r0, [r2, #0]
		transfer_len++;
1000bdee:	3501      	adds	r5, #1
1000bdf0:	b2ad      	uxth	r5, r5
		if (!skip_mosi) {
			tx_data++;
1000bdf2:	19c9      	adds	r1, r1, r7
		}
		if (!skip_miso) {
			rx_data++;
1000bdf4:	1992      	adds	r2, r2, r6
	/* Clear all status registers */
	spi_module->RECEIVE_STATUS.reg;
	spi_module->TRANSMIT_STATUS.reg;

	/* Start transfer */
	while(transfer_len < length) {
1000bdf6:	42ab      	cmp	r3, r5
1000bdf8:	d1ef      	bne.n	1000bdda <spi_transceive_buffer_wait+0x52>
		Spi *const spi_module)
{
	Assert(spi_module);

	/* Check interrupt flag */
	return (spi_module->TRANSMIT_STATUS.bit.TX_FIFO_EMPTY);
1000bdfa:	7a23      	ldrb	r3, [r4, #8]
		}
	}
	/* check TXFIFO is empty */
	do {
		status = _spi_is_write_complete(spi_module);
	}while(!status);
1000bdfc:	06db      	lsls	r3, r3, #27
1000bdfe:	d5fc      	bpl.n	1000bdfa <spi_transceive_buffer_wait+0x72>

	return STATUS_OK;
1000be00:	2000      	movs	r0, #0
1000be02:	e000      	b.n	1000be06 <spi_transceive_buffer_wait+0x7e>
	uint8_t skip_miso = 0;
	uint8_t status;
	uint16_t transfer_len = 0;

	if(spi_module == 0) {
		return STATUS_ERR_NOT_INITIALIZED;
1000be04:	201f      	movs	r0, #31
		status = _spi_is_write_complete(spi_module);
	}while(!status);

	return STATUS_OK;

}
1000be06:	b003      	add	sp, #12
1000be08:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000be0a:	46c0      	nop			; (mov r8, r8)

1000be0c <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		bool select)
{
1000be0c:	b510      	push	{r4, lr}
	uint8_t gpio_num = slave->ss_pin;
1000be0e:	7808      	ldrb	r0, [r1, #0]
	if(select) {
1000be10:	2a00      	cmp	r2, #0
1000be12:	d003      	beq.n	1000be1c <spi_select_slave+0x10>
		/* ASSERT Slave select pin */
		gpio_pin_set_output_level(gpio_num, false);
1000be14:	2100      	movs	r1, #0
1000be16:	4b04      	ldr	r3, [pc, #16]	; (1000be28 <spi_select_slave+0x1c>)
1000be18:	4798      	blx	r3
1000be1a:	e002      	b.n	1000be22 <spi_select_slave+0x16>
	} else {
		/* DEASSERT Slave select pin */
		gpio_pin_set_output_level(gpio_num, true);
1000be1c:	2101      	movs	r1, #1
1000be1e:	4b02      	ldr	r3, [pc, #8]	; (1000be28 <spi_select_slave+0x1c>)
1000be20:	4798      	blx	r3
	}

	return STATUS_OK;
}
1000be22:	2000      	movs	r0, #0
1000be24:	bd10      	pop	{r4, pc}
1000be26:	46c0      	nop			; (mov r8, r8)
1000be28:	1000c3d9 	.word	0x1000c3d9

1000be2c <dualtimer_isr_handler>:
 *
 * Dualtimer ISR handler.
 *
 */
static void dualtimer_isr_handler(void)
{
1000be2c:	b510      	push	{r4, lr}
 * \retval The interrupt status of timer1/timer2
 */
uint8_t dualtimer_get_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		return DUALTIMER0->TIMER1MIS.reg;
1000be2e:	4b0d      	ldr	r3, [pc, #52]	; (1000be64 <dualtimer_isr_handler+0x38>)
1000be30:	7d1b      	ldrb	r3, [r3, #20]
 * Dualtimer ISR handler.
 *
 */
static void dualtimer_isr_handler(void)
{
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER1)) {
1000be32:	2b00      	cmp	r3, #0
1000be34:	d007      	beq.n	1000be46 <dualtimer_isr_handler+0x1a>
 * \param[in]     timer        Timer1/Timer2
 */
void dualtimer_clear_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		DUALTIMER0->TIMER1INTCLR.reg = 1;
1000be36:	2201      	movs	r2, #1
1000be38:	4b0a      	ldr	r3, [pc, #40]	; (1000be64 <dualtimer_isr_handler+0x38>)
1000be3a:	731a      	strb	r2, [r3, #12]
 */
static void dualtimer_isr_handler(void)
{
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER1)) {
		dualtimer_clear_interrupt_status(DUALTIMER_TIMER1);
		if (dualtimer_callback_timer1)
1000be3c:	4b0a      	ldr	r3, [pc, #40]	; (1000be68 <dualtimer_isr_handler+0x3c>)
1000be3e:	681b      	ldr	r3, [r3, #0]
1000be40:	2b00      	cmp	r3, #0
1000be42:	d000      	beq.n	1000be46 <dualtimer_isr_handler+0x1a>
			dualtimer_callback_timer1();
1000be44:	4798      	blx	r3
uint8_t dualtimer_get_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		return DUALTIMER0->TIMER1MIS.reg;
	} else {
		return DUALTIMER0->TIMER2MIS.reg;
1000be46:	2334      	movs	r3, #52	; 0x34
1000be48:	4a06      	ldr	r2, [pc, #24]	; (1000be64 <dualtimer_isr_handler+0x38>)
1000be4a:	5cd3      	ldrb	r3, [r2, r3]
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER1)) {
		dualtimer_clear_interrupt_status(DUALTIMER_TIMER1);
		if (dualtimer_callback_timer1)
			dualtimer_callback_timer1();
	}
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER2)) {
1000be4c:	2b00      	cmp	r3, #0
1000be4e:	d007      	beq.n	1000be60 <dualtimer_isr_handler+0x34>
void dualtimer_clear_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		DUALTIMER0->TIMER1INTCLR.reg = 1;
	} else {
		DUALTIMER0->TIMER2INTCLR.reg = 1;
1000be50:	2101      	movs	r1, #1
1000be52:	232c      	movs	r3, #44	; 0x2c
1000be54:	54d1      	strb	r1, [r2, r3]
		if (dualtimer_callback_timer1)
			dualtimer_callback_timer1();
	}
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER2)) {
		dualtimer_clear_interrupt_status(DUALTIMER_TIMER2);
		if (dualtimer_callback_timer2)
1000be56:	4b05      	ldr	r3, [pc, #20]	; (1000be6c <dualtimer_isr_handler+0x40>)
1000be58:	681b      	ldr	r3, [r3, #0]
1000be5a:	2b00      	cmp	r3, #0
1000be5c:	d000      	beq.n	1000be60 <dualtimer_isr_handler+0x34>
			dualtimer_callback_timer2();
1000be5e:	4798      	blx	r3
	}
}
1000be60:	bd10      	pop	{r4, pc}
1000be62:	46c0      	nop			; (mov r8, r8)
1000be64:	40001000 	.word	0x40001000
1000be68:	100186dc 	.word	0x100186dc
1000be6c:	100186e0 	.word	0x100186e0

1000be70 <dualtimer_get_config_defaults>:
 *
 * \param[out]  config  Pointer to a DUALTIMER module configuration structure to set
 */
void dualtimer_get_config_defaults(struct dualtimer_config *config)
{
	config->timer1.timer_enable = true;
1000be70:	2301      	movs	r3, #1
1000be72:	7003      	strb	r3, [r0, #0]
	config->timer2.timer_enable = true;
1000be74:	7303      	strb	r3, [r0, #12]

	config->timer1.counter_mode = DUALTIMER_PERIODIC_MODE;
1000be76:	2202      	movs	r2, #2
1000be78:	7042      	strb	r2, [r0, #1]
	config->timer2.counter_mode = DUALTIMER_PERIODIC_MODE;
1000be7a:	7342      	strb	r2, [r0, #13]

	config->timer1.counter_size = DUALTIMER_COUNTER_SIZE_32BIT;
1000be7c:	7083      	strb	r3, [r0, #2]
	config->timer2.counter_size = DUALTIMER_COUNTER_SIZE_32BIT;
1000be7e:	7383      	strb	r3, [r0, #14]

	config->timer1.clock_prescaler = DUALTIMER_CLOCK_PRESCALER_DIV1;
1000be80:	2200      	movs	r2, #0
1000be82:	70c2      	strb	r2, [r0, #3]
	config->timer2.clock_prescaler = DUALTIMER_CLOCK_PRESCALER_DIV1;
1000be84:	73c2      	strb	r2, [r0, #15]

	config->timer1.interrup_enable = true;
1000be86:	7103      	strb	r3, [r0, #4]
	config->timer2.interrup_enable = true;
1000be88:	7403      	strb	r3, [r0, #16]

	config->timer1.load_value = 0;
1000be8a:	6082      	str	r2, [r0, #8]
	config->timer2.load_value = 0;
1000be8c:	6142      	str	r2, [r0, #20]

	config->clock_source = DUALTIMER_CLK_INPUT_0;
1000be8e:	7602      	strb	r2, [r0, #24]
}
1000be90:	4770      	bx	lr
1000be92:	46c0      	nop			; (mov r8, r8)

1000be94 <dualtimer_set_counter>:
 * \param[in]     value        Load value
 */
void dualtimer_set_counter(enum dualtimer_timer timer,
		enum dualtimer_set_register cur_bg, uint32_t value)
{
	if (timer == DUALTIMER_TIMER1) {
1000be94:	2800      	cmp	r0, #0
1000be96:	d107      	bne.n	1000bea8 <dualtimer_set_counter+0x14>
		if (cur_bg == DUALTIMER_SET_CURRUNT_REG) {
1000be98:	2900      	cmp	r1, #0
1000be9a:	d102      	bne.n	1000bea2 <dualtimer_set_counter+0xe>
			DUALTIMER0->TIMER1LOAD.reg = value;
1000be9c:	4b06      	ldr	r3, [pc, #24]	; (1000beb8 <dualtimer_set_counter+0x24>)
1000be9e:	601a      	str	r2, [r3, #0]
1000bea0:	e009      	b.n	1000beb6 <dualtimer_set_counter+0x22>
		} else {
			DUALTIMER0->TIMER1BGLOAD.reg = value;
1000bea2:	4b05      	ldr	r3, [pc, #20]	; (1000beb8 <dualtimer_set_counter+0x24>)
1000bea4:	619a      	str	r2, [r3, #24]
1000bea6:	e006      	b.n	1000beb6 <dualtimer_set_counter+0x22>
		}
	} else {
		if (cur_bg == DUALTIMER_SET_CURRUNT_REG) {
1000bea8:	2900      	cmp	r1, #0
1000beaa:	d102      	bne.n	1000beb2 <dualtimer_set_counter+0x1e>
			DUALTIMER0->TIMER2LOAD.reg = value;
1000beac:	4b02      	ldr	r3, [pc, #8]	; (1000beb8 <dualtimer_set_counter+0x24>)
1000beae:	621a      	str	r2, [r3, #32]
1000beb0:	e001      	b.n	1000beb6 <dualtimer_set_counter+0x22>
			} else {
			DUALTIMER0->TIMER2BGLOAD.reg = value;
1000beb2:	4b01      	ldr	r3, [pc, #4]	; (1000beb8 <dualtimer_set_counter+0x24>)
1000beb4:	639a      	str	r2, [r3, #56]	; 0x38
		}
	}
}
1000beb6:	4770      	bx	lr
1000beb8:	40001000 	.word	0x40001000

1000bebc <dualtimer_enable>:
 *
 * \param[in]     timer        Timer1/Timer2
 */
void dualtimer_enable(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
1000bebc:	2800      	cmp	r0, #0
1000bebe:	d105      	bne.n	1000becc <dualtimer_enable+0x10>
		DUALTIMER0->TIMER1CONTROL.reg |= DUALTIMER_TIMER1CONTROL_TIMER_ENABLE;
1000bec0:	4a06      	ldr	r2, [pc, #24]	; (1000bedc <dualtimer_enable+0x20>)
1000bec2:	7a11      	ldrb	r1, [r2, #8]
1000bec4:	2380      	movs	r3, #128	; 0x80
1000bec6:	430b      	orrs	r3, r1
1000bec8:	7213      	strb	r3, [r2, #8]
1000beca:	e005      	b.n	1000bed8 <dualtimer_enable+0x1c>
	} else {
		DUALTIMER0->TIMER2CONTROL.reg |= DUALTIMER_TIMER2CONTROL_TIMER_ENABLE;
1000becc:	4903      	ldr	r1, [pc, #12]	; (1000bedc <dualtimer_enable+0x20>)
1000bece:	2228      	movs	r2, #40	; 0x28
1000bed0:	5c88      	ldrb	r0, [r1, r2]
1000bed2:	2380      	movs	r3, #128	; 0x80
1000bed4:	4303      	orrs	r3, r0
1000bed6:	548b      	strb	r3, [r1, r2]
	}
}
1000bed8:	4770      	bx	lr
1000beda:	46c0      	nop			; (mov r8, r8)
1000bedc:	40001000 	.word	0x40001000

1000bee0 <dualtimer_disable>:
 *
 * \param[in]     timer        Timer1/Timer2
 */
void dualtimer_disable(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
1000bee0:	2800      	cmp	r0, #0
1000bee2:	d105      	bne.n	1000bef0 <dualtimer_disable+0x10>
		DUALTIMER0->TIMER1CONTROL.reg &= ~DUALTIMER_TIMER1CONTROL_TIMER_ENABLE;
1000bee4:	4a06      	ldr	r2, [pc, #24]	; (1000bf00 <dualtimer_disable+0x20>)
1000bee6:	7a11      	ldrb	r1, [r2, #8]
1000bee8:	237f      	movs	r3, #127	; 0x7f
1000beea:	400b      	ands	r3, r1
1000beec:	7213      	strb	r3, [r2, #8]
1000beee:	e005      	b.n	1000befc <dualtimer_disable+0x1c>
	} else {
		DUALTIMER0->TIMER2CONTROL.reg &= ~DUALTIMER_TIMER2CONTROL_TIMER_ENABLE;
1000bef0:	4903      	ldr	r1, [pc, #12]	; (1000bf00 <dualtimer_disable+0x20>)
1000bef2:	2228      	movs	r2, #40	; 0x28
1000bef4:	5c88      	ldrb	r0, [r1, r2]
1000bef6:	237f      	movs	r3, #127	; 0x7f
1000bef8:	4003      	ands	r3, r0
1000befa:	548b      	strb	r3, [r1, r2]
	}
}
1000befc:	4770      	bx	lr
1000befe:	46c0      	nop			; (mov r8, r8)
1000bf00:	40001000 	.word	0x40001000

1000bf04 <dualtimer_init>:
 * \param[in]     config       Pointer to the Dualtimer configuration options struct
 *
 * \return Status of the initialization procedure.
 */
void dualtimer_init(const struct dualtimer_config *config)
{
1000bf04:	b570      	push	{r4, r5, r6, lr}
1000bf06:	0004      	movs	r4, r0
	uint8_t regval = 0;

	/* Global reset */
	system_peripheral_reset(PERIPHERAL_DUALT_TIMER);
1000bf08:	2004      	movs	r0, #4
1000bf0a:	4b39      	ldr	r3, [pc, #228]	; (1000bff0 <dualtimer_init+0xec>)
1000bf0c:	4798      	blx	r3

	/* Common config */
	if (config->timer1.timer_enable || config->timer2.timer_enable) {
1000bf0e:	7823      	ldrb	r3, [r4, #0]
1000bf10:	2b00      	cmp	r3, #0
1000bf12:	d102      	bne.n	1000bf1a <dualtimer_init+0x16>
1000bf14:	7b23      	ldrb	r3, [r4, #12]
1000bf16:	2b00      	cmp	r3, #0
1000bf18:	d065      	beq.n	1000bfe6 <dualtimer_init+0xe2>
		LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |=
1000bf1a:	4936      	ldr	r1, [pc, #216]	; (1000bff4 <dualtimer_init+0xf0>)
1000bf1c:	68ca      	ldr	r2, [r1, #12]
1000bf1e:	2320      	movs	r3, #32
1000bf20:	4313      	orrs	r3, r2
1000bf22:	60cb      	str	r3, [r1, #12]
		LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_DUALTIMER0_CLK_EN;
		LPMCU_MISC_REGS0->LPMCU_CTRL.bit.DUALTIMER0_CLK_SEL = config->clock_source;
1000bf24:	7e22      	ldrb	r2, [r4, #24]
1000bf26:	698b      	ldr	r3, [r1, #24]
1000bf28:	2003      	movs	r0, #3
1000bf2a:	4002      	ands	r2, r0
1000bf2c:	0112      	lsls	r2, r2, #4
1000bf2e:	302d      	adds	r0, #45	; 0x2d
1000bf30:	4383      	bics	r3, r0
1000bf32:	4313      	orrs	r3, r2
1000bf34:	618b      	str	r3, [r1, #24]
	}
	
	/* Timer1 config */
	if (config->timer1.timer_enable) {
1000bf36:	7823      	ldrb	r3, [r4, #0]
1000bf38:	2b00      	cmp	r3, #0
1000bf3a:	d026      	beq.n	1000bf8a <dualtimer_init+0x86>
		if (config->timer1.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
1000bf3c:	7863      	ldrb	r3, [r4, #1]
			regval = DUALTIMER_TIMER1CONTROL_ONE_SHOT_COUNT_1;
1000bf3e:	2101      	movs	r1, #1
		LPMCU_MISC_REGS0->LPMCU_CTRL.bit.DUALTIMER0_CLK_SEL = config->clock_source;
	}
	
	/* Timer1 config */
	if (config->timer1.timer_enable) {
		if (config->timer1.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
1000bf40:	2b00      	cmp	r3, #0
1000bf42:	d003      	beq.n	1000bf4c <dualtimer_init+0x48>
			regval = DUALTIMER_TIMER1CONTROL_ONE_SHOT_COUNT_1;
		} else if (config->timer1.counter_mode == DUALTIMER_FREE_RUNNING_MODE) {
			regval = DUALTIMER_TIMER1CONTROL_TIMER_MODE_0;
		} else if (config->timer1.counter_mode == DUALTIMER_PERIODIC_MODE) {
			regval = DUALTIMER_TIMER1CONTROL_TIMER_MODE_1;
1000bf44:	3b02      	subs	r3, #2
1000bf46:	425d      	negs	r5, r3
1000bf48:	415d      	adcs	r5, r3
1000bf4a:	01a9      	lsls	r1, r5, #6
		}
		regval |= (DUALTIMER_TIMER1CONTROL_TIMER_SIZE &
1000bf4c:	78a2      	ldrb	r2, [r4, #2]
1000bf4e:	0052      	lsls	r2, r2, #1
1000bf50:	2502      	movs	r5, #2
1000bf52:	402a      	ands	r2, r5
1000bf54:	78e3      	ldrb	r3, [r4, #3]
1000bf56:	009b      	lsls	r3, r3, #2
1000bf58:	350a      	adds	r5, #10
1000bf5a:	402b      	ands	r3, r5
1000bf5c:	431a      	orrs	r2, r3
1000bf5e:	0015      	movs	r5, r2
1000bf60:	430d      	orrs	r5, r1
				((config->timer1.counter_size) << DUALTIMER_TIMER1CONTROL_TIMER_SIZE_Pos)) |
				DUALTIMER_TIMER1CONTROL_TIMERPRE(config->timer1.clock_prescaler);
		if (config->timer1.interrup_enable) {
1000bf62:	7923      	ldrb	r3, [r4, #4]
1000bf64:	2b00      	cmp	r3, #0
1000bf66:	d001      	beq.n	1000bf6c <dualtimer_init+0x68>
			regval |= DUALTIMER_TIMER1CONTROL_INTERRUPT_ENABLE;
1000bf68:	2320      	movs	r3, #32
1000bf6a:	431d      	orrs	r5, r3
		}
		DUALTIMER0->TIMER1LOAD.reg = config->timer1.load_value;
1000bf6c:	4b22      	ldr	r3, [pc, #136]	; (1000bff8 <dualtimer_init+0xf4>)
1000bf6e:	68a2      	ldr	r2, [r4, #8]
1000bf70:	601a      	str	r2, [r3, #0]
		DUALTIMER0->TIMER1CONTROL.reg = regval;
1000bf72:	721d      	strb	r5, [r3, #8]
		LPMCU_MISC_REGS0->DUALTIMER0_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER0_CTRL_CNTR_1_ENABLE;
1000bf74:	491f      	ldr	r1, [pc, #124]	; (1000bff4 <dualtimer_init+0xf0>)
1000bf76:	22c4      	movs	r2, #196	; 0xc4
1000bf78:	0052      	lsls	r2, r2, #1
1000bf7a:	5c88      	ldrb	r0, [r1, r2]
1000bf7c:	2301      	movs	r3, #1
1000bf7e:	4303      	orrs	r3, r0
1000bf80:	548b      	strb	r3, [r1, r2]
		dualtimer_enable(DUALTIMER_TIMER1);
1000bf82:	2000      	movs	r0, #0
1000bf84:	4b1d      	ldr	r3, [pc, #116]	; (1000bffc <dualtimer_init+0xf8>)
1000bf86:	4798      	blx	r3
1000bf88:	e000      	b.n	1000bf8c <dualtimer_init+0x88>
 *
 * \return Status of the initialization procedure.
 */
void dualtimer_init(const struct dualtimer_config *config)
{
	uint8_t regval = 0;
1000bf8a:	2500      	movs	r5, #0
		LPMCU_MISC_REGS0->DUALTIMER0_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER0_CTRL_CNTR_1_ENABLE;
		dualtimer_enable(DUALTIMER_TIMER1);
	}

	/* Timer2 config */
	if (config->timer2.timer_enable) {
1000bf8c:	7b23      	ldrb	r3, [r4, #12]
1000bf8e:	2b00      	cmp	r3, #0
1000bf90:	d029      	beq.n	1000bfe6 <dualtimer_init+0xe2>
		if (config->timer2.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
1000bf92:	7b63      	ldrb	r3, [r4, #13]
1000bf94:	2b00      	cmp	r3, #0
1000bf96:	d005      	beq.n	1000bfa4 <dualtimer_init+0xa0>
			regval = DUALTIMER_TIMER2CONTROL_ONE_SHOT_COUNT_1;
		} else if (config->timer2.counter_mode == DUALTIMER_FREE_RUNNING_MODE) {
1000bf98:	2b01      	cmp	r3, #1
1000bf9a:	d005      	beq.n	1000bfa8 <dualtimer_init+0xa4>
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_0;
		} else if (config->timer2.counter_mode == DUALTIMER_PERIODIC_MODE) {
1000bf9c:	2b02      	cmp	r3, #2
1000bf9e:	d104      	bne.n	1000bfaa <dualtimer_init+0xa6>
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_1;
1000bfa0:	2540      	movs	r5, #64	; 0x40
1000bfa2:	e002      	b.n	1000bfaa <dualtimer_init+0xa6>
	}

	/* Timer2 config */
	if (config->timer2.timer_enable) {
		if (config->timer2.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
			regval = DUALTIMER_TIMER2CONTROL_ONE_SHOT_COUNT_1;
1000bfa4:	2501      	movs	r5, #1
1000bfa6:	e000      	b.n	1000bfaa <dualtimer_init+0xa6>
		} else if (config->timer2.counter_mode == DUALTIMER_FREE_RUNNING_MODE) {
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_0;
1000bfa8:	2500      	movs	r5, #0
		} else if (config->timer2.counter_mode == DUALTIMER_PERIODIC_MODE) {
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_1;
		}
		regval |= (DUALTIMER_TIMER2CONTROL_TIMER_SIZE &
1000bfaa:	7ba3      	ldrb	r3, [r4, #14]
1000bfac:	005b      	lsls	r3, r3, #1
1000bfae:	2102      	movs	r1, #2
1000bfb0:	4019      	ands	r1, r3
1000bfb2:	7be2      	ldrb	r2, [r4, #15]
1000bfb4:	0092      	lsls	r2, r2, #2
1000bfb6:	230c      	movs	r3, #12
1000bfb8:	4013      	ands	r3, r2
1000bfba:	430b      	orrs	r3, r1
1000bfbc:	431d      	orrs	r5, r3
				((config->timer2.counter_size) << DUALTIMER_TIMER2CONTROL_TIMER_SIZE_Pos)) |
				DUALTIMER_TIMER2CONTROL_TIMERPRE(config->timer2.clock_prescaler);
		if (config->timer2.interrup_enable) {
1000bfbe:	7c23      	ldrb	r3, [r4, #16]
1000bfc0:	2b00      	cmp	r3, #0
1000bfc2:	d001      	beq.n	1000bfc8 <dualtimer_init+0xc4>
			regval |= DUALTIMER_TIMER2CONTROL_INTERRUPT_ENABLE;
1000bfc4:	2320      	movs	r3, #32
1000bfc6:	431d      	orrs	r5, r3
		}
		DUALTIMER0->TIMER2LOAD.reg = config->timer2.load_value;
1000bfc8:	6962      	ldr	r2, [r4, #20]
1000bfca:	4b0b      	ldr	r3, [pc, #44]	; (1000bff8 <dualtimer_init+0xf4>)
1000bfcc:	621a      	str	r2, [r3, #32]
		DUALTIMER0->TIMER2CONTROL.reg = regval;
1000bfce:	2228      	movs	r2, #40	; 0x28
1000bfd0:	549d      	strb	r5, [r3, r2]
		LPMCU_MISC_REGS0->DUALTIMER0_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER0_CTRL_CNTR_2_ENABLE;
1000bfd2:	4908      	ldr	r1, [pc, #32]	; (1000bff4 <dualtimer_init+0xf0>)
1000bfd4:	3261      	adds	r2, #97	; 0x61
1000bfd6:	32ff      	adds	r2, #255	; 0xff
1000bfd8:	5c88      	ldrb	r0, [r1, r2]
1000bfda:	2302      	movs	r3, #2
1000bfdc:	4303      	orrs	r3, r0
1000bfde:	548b      	strb	r3, [r1, r2]
		dualtimer_enable(DUALTIMER_TIMER2);
1000bfe0:	2001      	movs	r0, #1
1000bfe2:	4b06      	ldr	r3, [pc, #24]	; (1000bffc <dualtimer_init+0xf8>)
1000bfe4:	4798      	blx	r3
	}

	system_register_isr(RAM_ISR_TABLE_DUALTIMER_INDEX, (uint32_t)dualtimer_isr_handler);
1000bfe6:	4906      	ldr	r1, [pc, #24]	; (1000c000 <dualtimer_init+0xfc>)
1000bfe8:	201e      	movs	r0, #30
1000bfea:	4b06      	ldr	r3, [pc, #24]	; (1000c004 <dualtimer_init+0x100>)
1000bfec:	4798      	blx	r3
}
1000bfee:	bd70      	pop	{r4, r5, r6, pc}
1000bff0:	1000cedd 	.word	0x1000cedd
1000bff4:	4000b000 	.word	0x4000b000
1000bff8:	40001000 	.word	0x40001000
1000bffc:	1000bebd 	.word	0x1000bebd
1000c000:	1000be2d 	.word	0x1000be2d
1000c004:	1000d345 	.word	0x1000d345

1000c008 <dualtimer_register_callback>:
 *
 * \param[in]     callback_func Pointer to callback function
 */
void dualtimer_register_callback(enum dualtimer_timer timer, dualtimer_callback_t fun)
{
	if (timer == DUALTIMER_TIMER1) {
1000c008:	2800      	cmp	r0, #0
1000c00a:	d102      	bne.n	1000c012 <dualtimer_register_callback+0xa>
		dualtimer_callback_timer1 = fun;
1000c00c:	4b02      	ldr	r3, [pc, #8]	; (1000c018 <dualtimer_register_callback+0x10>)
1000c00e:	6019      	str	r1, [r3, #0]
1000c010:	e001      	b.n	1000c016 <dualtimer_register_callback+0xe>
	} else {
		dualtimer_callback_timer2 = fun;
1000c012:	4b02      	ldr	r3, [pc, #8]	; (1000c01c <dualtimer_register_callback+0x14>)
1000c014:	6019      	str	r1, [r3, #0]
	}
}
1000c016:	4770      	bx	lr
1000c018:	100186dc 	.word	0x100186dc
1000c01c:	100186e0 	.word	0x100186e0

1000c020 <gpio_port0_isr_handler>:
 *
 * This function will enter interrupt.
 *
 */
static void gpio_port0_isr_handler(void)
{
1000c020:	b570      	push	{r4, r5, r6, lr}
	uint32_t flag = _gpio_instances[0].hw->INTSTATUSCLEAR.reg;
1000c022:	4b16      	ldr	r3, [pc, #88]	; (1000c07c <gpio_port0_isr_handler+0x5c>)
1000c024:	681d      	ldr	r5, [r3, #0]
1000c026:	8f29      	ldrh	r1, [r5, #56]	; 0x38
1000c028:	b289      	uxth	r1, r1

	for (uint8_t i = 0; i < 16; i++){
		if (flag & (1 << i)) {
1000c02a:	07cb      	lsls	r3, r1, #31
1000c02c:	d407      	bmi.n	1000c03e <gpio_port0_isr_handler+0x1e>
1000c02e:	2301      	movs	r3, #1
1000c030:	2401      	movs	r4, #1
1000c032:	0018      	movs	r0, r3
1000c034:	0022      	movs	r2, r4
1000c036:	409a      	lsls	r2, r3
1000c038:	4211      	tst	r1, r2
1000c03a:	d014      	beq.n	1000c066 <gpio_port0_isr_handler+0x46>
1000c03c:	e001      	b.n	1000c042 <gpio_port0_isr_handler+0x22>
1000c03e:	2201      	movs	r2, #1
1000c040:	2000      	movs	r0, #0
			/* Clear interrupt flag */
			_gpio_instances[0].hw->INTSTATUSCLEAR.reg = (1 << i);
1000c042:	b292      	uxth	r2, r2
1000c044:	872a      	strh	r2, [r5, #56]	; 0x38
			if ((_gpio_instances[0].callback_enable_mask & (1 << i)) && \
1000c046:	2346      	movs	r3, #70	; 0x46
1000c048:	4a0c      	ldr	r2, [pc, #48]	; (1000c07c <gpio_port0_isr_handler+0x5c>)
1000c04a:	5ad3      	ldrh	r3, [r2, r3]
1000c04c:	4103      	asrs	r3, r0
1000c04e:	07db      	lsls	r3, r3, #31
1000c050:	d50c      	bpl.n	1000c06c <gpio_port0_isr_handler+0x4c>
                    (_gpio_instances[0].callback_reg_mask & (1 << i)))
1000c052:	2344      	movs	r3, #68	; 0x44

	for (uint8_t i = 0; i < 16; i++){
		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[0].hw->INTSTATUSCLEAR.reg = (1 << i);
			if ((_gpio_instances[0].callback_enable_mask & (1 << i)) && \
1000c054:	5ad3      	ldrh	r3, [r2, r3]
1000c056:	4103      	asrs	r3, r0
1000c058:	07db      	lsls	r3, r3, #31
1000c05a:	d507      	bpl.n	1000c06c <gpio_port0_isr_handler+0x4c>
                    (_gpio_instances[0].callback_reg_mask & (1 << i)))
                _gpio_instances[0].callback[i]();
1000c05c:	0080      	lsls	r0, r0, #2
1000c05e:	1810      	adds	r0, r2, r0
1000c060:	6843      	ldr	r3, [r0, #4]
1000c062:	4798      	blx	r3
1000c064:	e002      	b.n	1000c06c <gpio_port0_isr_handler+0x4c>
1000c066:	3301      	adds	r3, #1
 */
static void gpio_port0_isr_handler(void)
{
	uint32_t flag = _gpio_instances[0].hw->INTSTATUSCLEAR.reg;

	for (uint8_t i = 0; i < 16; i++){
1000c068:	2b10      	cmp	r3, #16
1000c06a:	d1e2      	bne.n	1000c032 <gpio_port0_isr_handler+0x12>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
1000c06c:	2180      	movs	r1, #128	; 0x80
1000c06e:	0409      	lsls	r1, r1, #16
1000c070:	23c0      	movs	r3, #192	; 0xc0
1000c072:	005b      	lsls	r3, r3, #1
1000c074:	4a02      	ldr	r2, [pc, #8]	; (1000c080 <gpio_port0_isr_handler+0x60>)
1000c076:	50d1      	str	r1, [r2, r3]
                _gpio_instances[0].callback[i]();
			break;
		}
	}
	NVIC_ClearPendingIRQ(GPIO0_IRQn);
}
1000c078:	bd70      	pop	{r4, r5, r6, pc}
1000c07a:	46c0      	nop			; (mov r8, r8)
1000c07c:	1001a358 	.word	0x1001a358
1000c080:	e000e100 	.word	0xe000e100

1000c084 <gpio_port1_isr_handler>:
 *
 * This function will enter interrupt.
 *
 */
static void gpio_port1_isr_handler(void)
{
1000c084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t flag = _gpio_instances[1].hw->INTSTATUSCLEAR.reg;
1000c086:	4b18      	ldr	r3, [pc, #96]	; (1000c0e8 <gpio_port1_isr_handler+0x64>)
1000c088:	6c9b      	ldr	r3, [r3, #72]	; 0x48
1000c08a:	8f1e      	ldrh	r6, [r3, #56]	; 0x38
1000c08c:	b2b6      	uxth	r6, r6
1000c08e:	0037      	movs	r7, r6
1000c090:	2400      	movs	r4, #0

	for (uint8_t i = 0; i < 16; i++){
		/* For AON wakeup pin clear interrupt */
		if (flag & ((1<<15) | (1<<14) | (1<<13))) {
1000c092:	0b76      	lsrs	r6, r6, #13
1000c094:	0376      	lsls	r6, r6, #13
			aon_handle_ext_wakeup_isr();
		}

		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[1].hw->INTSTATUSCLEAR.reg = (1 << i);
1000c096:	4d14      	ldr	r5, [pc, #80]	; (1000c0e8 <gpio_port1_isr_handler+0x64>)
{
	uint32_t flag = _gpio_instances[1].hw->INTSTATUSCLEAR.reg;

	for (uint8_t i = 0; i < 16; i++){
		/* For AON wakeup pin clear interrupt */
		if (flag & ((1<<15) | (1<<14) | (1<<13))) {
1000c098:	2e00      	cmp	r6, #0
1000c09a:	d001      	beq.n	1000c0a0 <gpio_port1_isr_handler+0x1c>
			aon_handle_ext_wakeup_isr();
1000c09c:	4b13      	ldr	r3, [pc, #76]	; (1000c0ec <gpio_port1_isr_handler+0x68>)
1000c09e:	4798      	blx	r3
		}

		if (flag & (1 << i)) {
1000c0a0:	0022      	movs	r2, r4
1000c0a2:	2301      	movs	r3, #1
1000c0a4:	40a3      	lsls	r3, r4
1000c0a6:	421f      	tst	r7, r3
1000c0a8:	d013      	beq.n	1000c0d2 <gpio_port1_isr_handler+0x4e>
			/* Clear interrupt flag */
			_gpio_instances[1].hw->INTSTATUSCLEAR.reg = (1 << i);
1000c0aa:	b29b      	uxth	r3, r3
1000c0ac:	6ca9      	ldr	r1, [r5, #72]	; 0x48
1000c0ae:	870b      	strh	r3, [r1, #56]	; 0x38
			if ((_gpio_instances[1].callback_enable_mask & (1 << i)) && \
1000c0b0:	238e      	movs	r3, #142	; 0x8e
1000c0b2:	5aeb      	ldrh	r3, [r5, r3]
1000c0b4:	4123      	asrs	r3, r4
1000c0b6:	07db      	lsls	r3, r3, #31
1000c0b8:	d50b      	bpl.n	1000c0d2 <gpio_port1_isr_handler+0x4e>
			(_gpio_instances[1].callback_reg_mask & (1 << i))) {
1000c0ba:	238c      	movs	r3, #140	; 0x8c
		}

		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[1].hw->INTSTATUSCLEAR.reg = (1 << i);
			if ((_gpio_instances[1].callback_enable_mask & (1 << i)) && \
1000c0bc:	490a      	ldr	r1, [pc, #40]	; (1000c0e8 <gpio_port1_isr_handler+0x64>)
1000c0be:	5acb      	ldrh	r3, [r1, r3]
1000c0c0:	4123      	asrs	r3, r4
1000c0c2:	07db      	lsls	r3, r3, #31
1000c0c4:	d505      	bpl.n	1000c0d2 <gpio_port1_isr_handler+0x4e>
			(_gpio_instances[1].callback_reg_mask & (1 << i))) {
				_gpio_instances[1].callback[i]();
1000c0c6:	3212      	adds	r2, #18
1000c0c8:	0092      	lsls	r2, r2, #2
1000c0ca:	188a      	adds	r2, r1, r2
1000c0cc:	6853      	ldr	r3, [r2, #4]
1000c0ce:	4798      	blx	r3
				break;
1000c0d0:	e002      	b.n	1000c0d8 <gpio_port1_isr_handler+0x54>
1000c0d2:	3401      	adds	r4, #1
 */
static void gpio_port1_isr_handler(void)
{
	uint32_t flag = _gpio_instances[1].hw->INTSTATUSCLEAR.reg;

	for (uint8_t i = 0; i < 16; i++){
1000c0d4:	2c10      	cmp	r4, #16
1000c0d6:	d1df      	bne.n	1000c098 <gpio_port1_isr_handler+0x14>
1000c0d8:	2180      	movs	r1, #128	; 0x80
1000c0da:	0449      	lsls	r1, r1, #17
1000c0dc:	23c0      	movs	r3, #192	; 0xc0
1000c0de:	005b      	lsls	r3, r3, #1
1000c0e0:	4a03      	ldr	r2, [pc, #12]	; (1000c0f0 <gpio_port1_isr_handler+0x6c>)
1000c0e2:	50d1      	str	r1, [r2, r3]
				break;
			}
		}
	}
	NVIC_ClearPendingIRQ(GPIO1_IRQn);
}
1000c0e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000c0e6:	46c0      	nop			; (mov r8, r8)
1000c0e8:	1001a358 	.word	0x1001a358
1000c0ec:	0001bc51 	.word	0x0001bc51
1000c0f0:	e000e100 	.word	0xe000e100

1000c0f4 <gpio_port2_isr_handler>:
 *
 * This function will enter interrupt.
 *
 */
static void gpio_port2_isr_handler(void)
{
1000c0f4:	b510      	push	{r4, lr}
	uint32_t flag = _gpio_instances[2].hw->INTSTATUSCLEAR.reg;
1000c0f6:	2390      	movs	r3, #144	; 0x90
1000c0f8:	4a1b      	ldr	r2, [pc, #108]	; (1000c168 <gpio_port2_isr_handler+0x74>)
1000c0fa:	58d2      	ldr	r2, [r2, r3]
1000c0fc:	8f13      	ldrh	r3, [r2, #56]	; 0x38
1000c0fe:	b29b      	uxth	r3, r3

	for (uint8_t i = 12; i < 16; i++){
		if (flag & (1 << i)) {
1000c100:	04d9      	lsls	r1, r3, #19
1000c102:	d414      	bmi.n	1000c12e <gpio_port2_isr_handler+0x3a>
1000c104:	0499      	lsls	r1, r3, #18
1000c106:	d40a      	bmi.n	1000c11e <gpio_port2_isr_handler+0x2a>
1000c108:	0459      	lsls	r1, r3, #17
1000c10a:	d40c      	bmi.n	1000c126 <gpio_port2_isr_handler+0x32>
1000c10c:	0bdb      	lsrs	r3, r3, #15
1000c10e:	03db      	lsls	r3, r3, #15
1000c110:	b29b      	uxth	r3, r3
1000c112:	2b00      	cmp	r3, #0
1000c114:	d020      	beq.n	1000c158 <gpio_port2_isr_handler+0x64>
1000c116:	2380      	movs	r3, #128	; 0x80
1000c118:	021b      	lsls	r3, r3, #8
1000c11a:	210f      	movs	r1, #15
1000c11c:	e00a      	b.n	1000c134 <gpio_port2_isr_handler+0x40>
1000c11e:	2380      	movs	r3, #128	; 0x80
1000c120:	019b      	lsls	r3, r3, #6
1000c122:	210d      	movs	r1, #13
1000c124:	e006      	b.n	1000c134 <gpio_port2_isr_handler+0x40>
1000c126:	2380      	movs	r3, #128	; 0x80
1000c128:	01db      	lsls	r3, r3, #7
1000c12a:	210e      	movs	r1, #14
1000c12c:	e002      	b.n	1000c134 <gpio_port2_isr_handler+0x40>
1000c12e:	2380      	movs	r3, #128	; 0x80
1000c130:	015b      	lsls	r3, r3, #5
1000c132:	210c      	movs	r1, #12
			/* Clear interrupt flag */
			_gpio_instances[2].hw->INTSTATUSCLEAR.reg = (1 << i);
1000c134:	b29b      	uxth	r3, r3
1000c136:	8713      	strh	r3, [r2, #56]	; 0x38
			if ((_gpio_instances[2].callback_enable_mask & (1 << i)) && \
1000c138:	23d6      	movs	r3, #214	; 0xd6
1000c13a:	4a0b      	ldr	r2, [pc, #44]	; (1000c168 <gpio_port2_isr_handler+0x74>)
1000c13c:	5ad3      	ldrh	r3, [r2, r3]
1000c13e:	410b      	asrs	r3, r1
1000c140:	07db      	lsls	r3, r3, #31
1000c142:	d509      	bpl.n	1000c158 <gpio_port2_isr_handler+0x64>
                    (_gpio_instances[2].callback_reg_mask & (1 << i)))
1000c144:	23d4      	movs	r3, #212	; 0xd4

	for (uint8_t i = 12; i < 16; i++){
		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[2].hw->INTSTATUSCLEAR.reg = (1 << i);
			if ((_gpio_instances[2].callback_enable_mask & (1 << i)) && \
1000c146:	5ad3      	ldrh	r3, [r2, r3]
1000c148:	410b      	asrs	r3, r1
1000c14a:	07db      	lsls	r3, r3, #31
1000c14c:	d504      	bpl.n	1000c158 <gpio_port2_isr_handler+0x64>
                    (_gpio_instances[2].callback_reg_mask & (1 << i)))
                _gpio_instances[2].callback[i]();
1000c14e:	3124      	adds	r1, #36	; 0x24
1000c150:	0089      	lsls	r1, r1, #2
1000c152:	1851      	adds	r1, r2, r1
1000c154:	684b      	ldr	r3, [r1, #4]
1000c156:	4798      	blx	r3
1000c158:	2180      	movs	r1, #128	; 0x80
1000c15a:	0489      	lsls	r1, r1, #18
1000c15c:	23c0      	movs	r3, #192	; 0xc0
1000c15e:	005b      	lsls	r3, r3, #1
1000c160:	4a02      	ldr	r2, [pc, #8]	; (1000c16c <gpio_port2_isr_handler+0x78>)
1000c162:	50d1      	str	r1, [r2, r3]
			break;
		}
	}
	NVIC_ClearPendingIRQ(GPIO2_IRQn);
}
1000c164:	bd10      	pop	{r4, pc}
1000c166:	46c0      	nop			; (mov r8, r8)
1000c168:	1001a358 	.word	0x1001a358
1000c16c:	e000e100 	.word	0xe000e100

1000c170 <gpio_get_config_defaults>:
 *  \param[out] config  Configuration structure to initialize to default values.
 */
void gpio_get_config_defaults(struct gpio_config *const config)
{
	/* Default configuration values */
	config->direction  = GPIO_PIN_DIR_INPUT;
1000c170:	2300      	movs	r3, #0
1000c172:	7003      	strb	r3, [r0, #0]
	config->input_pull = GPIO_PIN_PULL_UP;
1000c174:	2201      	movs	r2, #1
1000c176:	7042      	strb	r2, [r0, #1]
	config->powersave  = false;
1000c178:	7083      	strb	r3, [r0, #2]
	config->aon_wakeup = false;
1000c17a:	70c3      	strb	r3, [r0, #3]
}
1000c17c:	4770      	bx	lr
1000c17e:	46c0      	nop			; (mov r8, r8)

1000c180 <gpio_pin_set_config>:
 *  \retval STATUS_RESOURCE_NOT_AVAILABLE   Requested gpio is already in use.
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
1000c180:	b570      	push	{r4, r5, r6, lr}
	* GPIO_0 & GPIO_1 are used for SWD.
	*/
	if ((gpio_pin == PIN_LP_GPIO_0) || \
		(gpio_pin == PIN_LP_GPIO_1))
	{
		status = STATUS_ERR_INVALID_ARG;
1000c182:	2317      	movs	r3, #23
	enum status_code status = STATUS_OK;

	/* Following GPIO's should never be modified by user.
	* GPIO_0 & GPIO_1 are used for SWD.
	*/
	if ((gpio_pin == PIN_LP_GPIO_0) || \
1000c184:	2801      	cmp	r0, #1
1000c186:	d800      	bhi.n	1000c18a <gpio_pin_set_config+0xa>
1000c188:	e0c8      	b.n	1000c31c <gpio_pin_set_config+0x19c>
		(gpio_pin == PIN_LP_GPIO_1))
	{
		status = STATUS_ERR_INVALID_ARG;
	} else {
		if (gpio_pin <= 7) {
1000c18a:	2807      	cmp	r0, #7
1000c18c:	d809      	bhi.n	1000c1a2 <gpio_pin_set_config+0x22>
			LPMCU_MISC_REGS0->PINMUX_SEL_0.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000c18e:	4d64      	ldr	r5, [pc, #400]	; (1000c320 <gpio_pin_set_config+0x1a0>)
1000c190:	6c6a      	ldr	r2, [r5, #68]	; 0x44
1000c192:	3b10      	subs	r3, #16
1000c194:	4003      	ands	r3, r0
1000c196:	009b      	lsls	r3, r3, #2
1000c198:	2407      	movs	r4, #7
1000c19a:	409c      	lsls	r4, r3
1000c19c:	43a2      	bics	r2, r4
1000c19e:	646a      	str	r2, [r5, #68]	; 0x44
1000c1a0:	e029      	b.n	1000c1f6 <gpio_pin_set_config+0x76>
		} else if (gpio_pin <= 15) {
1000c1a2:	280f      	cmp	r0, #15
1000c1a4:	d809      	bhi.n	1000c1ba <gpio_pin_set_config+0x3a>
			LPMCU_MISC_REGS0->PINMUX_SEL_1.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000c1a6:	4d5e      	ldr	r5, [pc, #376]	; (1000c320 <gpio_pin_set_config+0x1a0>)
1000c1a8:	6caa      	ldr	r2, [r5, #72]	; 0x48
1000c1aa:	2307      	movs	r3, #7
1000c1ac:	4003      	ands	r3, r0
1000c1ae:	009b      	lsls	r3, r3, #2
1000c1b0:	2407      	movs	r4, #7
1000c1b2:	409c      	lsls	r4, r3
1000c1b4:	43a2      	bics	r2, r4
1000c1b6:	64aa      	str	r2, [r5, #72]	; 0x48
1000c1b8:	e01d      	b.n	1000c1f6 <gpio_pin_set_config+0x76>
		} else if (gpio_pin <= 23) {
1000c1ba:	2817      	cmp	r0, #23
1000c1bc:	d809      	bhi.n	1000c1d2 <gpio_pin_set_config+0x52>
			LPMCU_MISC_REGS0->PINMUX_SEL_2.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000c1be:	4d58      	ldr	r5, [pc, #352]	; (1000c320 <gpio_pin_set_config+0x1a0>)
1000c1c0:	6cea      	ldr	r2, [r5, #76]	; 0x4c
1000c1c2:	2307      	movs	r3, #7
1000c1c4:	4003      	ands	r3, r0
1000c1c6:	009b      	lsls	r3, r3, #2
1000c1c8:	2407      	movs	r4, #7
1000c1ca:	409c      	lsls	r4, r3
1000c1cc:	43a2      	bics	r2, r4
1000c1ce:	64ea      	str	r2, [r5, #76]	; 0x4c
1000c1d0:	e011      	b.n	1000c1f6 <gpio_pin_set_config+0x76>
		} else if (44 <= gpio_pin  && gpio_pin < 48) {
1000c1d2:	0003      	movs	r3, r0
1000c1d4:	3b2c      	subs	r3, #44	; 0x2c
1000c1d6:	2b03      	cmp	r3, #3
1000c1d8:	d80d      	bhi.n	1000c1f6 <gpio_pin_set_config+0x76>
			/* Set GPIO_MSx as digital mode */
			AON_GP_REGS0->MS_GPIO_MODE.vec.ANALOG_ENABLE_ &= ~(1 << (gpio_pin - PIN_GPIO_MS4));
1000c1da:	4d52      	ldr	r5, [pc, #328]	; (1000c324 <gpio_pin_set_config+0x1a4>)
1000c1dc:	2482      	movs	r4, #130	; 0x82
1000c1de:	00e4      	lsls	r4, r4, #3
1000c1e0:	5d2a      	ldrb	r2, [r5, r4]
1000c1e2:	0712      	lsls	r2, r2, #28
1000c1e4:	2601      	movs	r6, #1
1000c1e6:	409e      	lsls	r6, r3
1000c1e8:	0f12      	lsrs	r2, r2, #28
1000c1ea:	5d2b      	ldrb	r3, [r5, r4]
1000c1ec:	43b2      	bics	r2, r6
1000c1ee:	260f      	movs	r6, #15
1000c1f0:	43b3      	bics	r3, r6
1000c1f2:	4313      	orrs	r3, r2
1000c1f4:	552b      	strb	r3, [r5, r4]
		}
	
		if ((gpio_pin == PIN_AO_GPIO_0) || (gpio_pin == PIN_AO_GPIO_1) ||
1000c1f6:	0003      	movs	r3, r0
1000c1f8:	3b1d      	subs	r3, #29
1000c1fa:	2b02      	cmp	r3, #2
1000c1fc:	d829      	bhi.n	1000c252 <gpio_pin_set_config+0xd2>
				(gpio_pin == PIN_AO_GPIO_2)) {
			/* Active Low, Always On Pull Enable Control */
			if (config->input_pull == GPIO_PIN_PULL_UP) {
1000c1fe:	784b      	ldrb	r3, [r1, #1]
1000c200:	2b01      	cmp	r3, #1
1000c202:	d108      	bne.n	1000c216 <gpio_pin_set_config+0x96>
				AON_GP_REGS0->AON_PULL_ENABLE.reg &= ~(1 << (31 - gpio_pin));
1000c204:	4d47      	ldr	r5, [pc, #284]	; (1000c324 <gpio_pin_set_config+0x1a4>)
1000c206:	7d2b      	ldrb	r3, [r5, #20]
1000c208:	241f      	movs	r4, #31
1000c20a:	1a24      	subs	r4, r4, r0
1000c20c:	2201      	movs	r2, #1
1000c20e:	40a2      	lsls	r2, r4
1000c210:	4393      	bics	r3, r2
1000c212:	752b      	strb	r3, [r5, #20]
1000c214:	e008      	b.n	1000c228 <gpio_pin_set_config+0xa8>
			} else {
				AON_GP_REGS0->AON_PULL_ENABLE.reg |= 1 << (31 - gpio_pin);
1000c216:	4c43      	ldr	r4, [pc, #268]	; (1000c324 <gpio_pin_set_config+0x1a4>)
1000c218:	7d25      	ldrb	r5, [r4, #20]
1000c21a:	221f      	movs	r2, #31
1000c21c:	1a12      	subs	r2, r2, r0
1000c21e:	2301      	movs	r3, #1
1000c220:	4093      	lsls	r3, r2
1000c222:	432b      	orrs	r3, r5
1000c224:	b2db      	uxtb	r3, r3
1000c226:	7523      	strb	r3, [r4, #20]
			}
			if (config->aon_wakeup) {
1000c228:	78ca      	ldrb	r2, [r1, #3]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000c22a:	2300      	movs	r3, #0
			if (config->input_pull == GPIO_PIN_PULL_UP) {
				AON_GP_REGS0->AON_PULL_ENABLE.reg &= ~(1 << (31 - gpio_pin));
			} else {
				AON_GP_REGS0->AON_PULL_ENABLE.reg |= 1 << (31 - gpio_pin);
			}
			if (config->aon_wakeup) {
1000c22c:	2a00      	cmp	r2, #0
1000c22e:	d075      	beq.n	1000c31c <gpio_pin_set_config+0x19c>
				/* Enable AON_GPIO_x to be a wakeup MCU from sleep mode */
				AON_GP_REGS0->AON_PINMUX_SEL.reg |= 1 << (4 * (31 - gpio_pin));
1000c230:	493c      	ldr	r1, [pc, #240]	; (1000c324 <gpio_pin_set_config+0x1a4>)
1000c232:	880c      	ldrh	r4, [r1, #0]
1000c234:	221f      	movs	r2, #31
1000c236:	1a10      	subs	r0, r2, r0
1000c238:	0080      	lsls	r0, r0, #2
1000c23a:	3301      	adds	r3, #1
1000c23c:	4083      	lsls	r3, r0
1000c23e:	4323      	orrs	r3, r4
1000c240:	b29b      	uxth	r3, r3
1000c242:	800b      	strh	r3, [r1, #0]
				/* Enable AON_GPIO_x to wake up the BLE domain from sleep mode */
				AON_PWR_SEQ0->GPIO_WAKEUP_CTRL.bit.BLE_ENABLE = 1;
1000c244:	4a38      	ldr	r2, [pc, #224]	; (1000c328 <gpio_pin_set_config+0x1a8>)
1000c246:	7811      	ldrb	r1, [r2, #0]
1000c248:	2302      	movs	r3, #2
1000c24a:	430b      	orrs	r3, r1
1000c24c:	7013      	strb	r3, [r2, #0]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000c24e:	2300      	movs	r3, #0
1000c250:	e064      	b.n	1000c31c <gpio_pin_set_config+0x19c>
				AON_GP_REGS0->AON_PINMUX_SEL.reg |= 1 << (4 * (31 - gpio_pin));
				/* Enable AON_GPIO_x to wake up the BLE domain from sleep mode */
				AON_PWR_SEQ0->GPIO_WAKEUP_CTRL.bit.BLE_ENABLE = 1;
			}
		} else {
			if(config->direction == GPIO_PIN_DIR_INPUT) {
1000c252:	780a      	ldrb	r2, [r1, #0]
1000c254:	2a00      	cmp	r2, #0
1000c256:	d140      	bne.n	1000c2da <gpio_pin_set_config+0x15a>
				if(gpio_pin < 16) {
1000c258:	280f      	cmp	r0, #15
1000c25a:	d808      	bhi.n	1000c26e <gpio_pin_set_config+0xee>
					GPIO0->OUTENCLR.reg = (1 << gpio_pin);
1000c25c:	2301      	movs	r3, #1
1000c25e:	4083      	lsls	r3, r0
1000c260:	b29b      	uxth	r3, r3
1000c262:	4a32      	ldr	r2, [pc, #200]	; (1000c32c <gpio_pin_set_config+0x1ac>)
1000c264:	8293      	strh	r3, [r2, #20]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000c266:	2300      	movs	r3, #0
					GPIO1->OUTENCLR.reg = (1 << (gpio_pin % 16));
				} else {
					GPIO2->OUTENCLR.reg = (1 << (gpio_pin % 16));
				}
				/* pull_enable. */
				if (gpio_pin < 32) {
1000c268:	281f      	cmp	r0, #31
1000c26a:	d857      	bhi.n	1000c31c <gpio_pin_set_config+0x19c>
1000c26c:	e012      	b.n	1000c294 <gpio_pin_set_config+0x114>
			}
		} else {
			if(config->direction == GPIO_PIN_DIR_INPUT) {
				if(gpio_pin < 16) {
					GPIO0->OUTENCLR.reg = (1 << gpio_pin);
				} else if (gpio_pin < 32){
1000c26e:	281f      	cmp	r0, #31
1000c270:	d807      	bhi.n	1000c282 <gpio_pin_set_config+0x102>
					GPIO1->OUTENCLR.reg = (1 << (gpio_pin % 16));
1000c272:	220f      	movs	r2, #15
1000c274:	4002      	ands	r2, r0
1000c276:	2301      	movs	r3, #1
1000c278:	4093      	lsls	r3, r2
1000c27a:	b29b      	uxth	r3, r3
1000c27c:	4a2c      	ldr	r2, [pc, #176]	; (1000c330 <gpio_pin_set_config+0x1b0>)
1000c27e:	8293      	strh	r3, [r2, #20]
1000c280:	e008      	b.n	1000c294 <gpio_pin_set_config+0x114>
				} else {
					GPIO2->OUTENCLR.reg = (1 << (gpio_pin % 16));
1000c282:	230f      	movs	r3, #15
1000c284:	4018      	ands	r0, r3
1000c286:	3b0e      	subs	r3, #14
1000c288:	4083      	lsls	r3, r0
1000c28a:	b29b      	uxth	r3, r3
1000c28c:	4a29      	ldr	r2, [pc, #164]	; (1000c334 <gpio_pin_set_config+0x1b4>)
1000c28e:	8293      	strh	r3, [r2, #20]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000c290:	2300      	movs	r3, #0
1000c292:	e043      	b.n	1000c31c <gpio_pin_set_config+0x19c>
				} else {
					GPIO2->OUTENCLR.reg = (1 << (gpio_pin % 16));
				}
				/* pull_enable. */
				if (gpio_pin < 32) {
					switch(config->input_pull) {
1000c294:	784b      	ldrb	r3, [r1, #1]
1000c296:	2b01      	cmp	r3, #1
1000c298:	d00c      	beq.n	1000c2b4 <gpio_pin_set_config+0x134>
1000c29a:	2b00      	cmp	r3, #0
1000c29c:	d002      	beq.n	1000c2a4 <gpio_pin_set_config+0x124>
1000c29e:	2b02      	cmp	r3, #2
1000c2a0:	d010      	beq.n	1000c2c4 <gpio_pin_set_config+0x144>
1000c2a2:	e03a      	b.n	1000c31a <gpio_pin_set_config+0x19a>
						case GPIO_PIN_PULL_NONE:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg |= (1 << gpio_pin);
1000c2a4:	491e      	ldr	r1, [pc, #120]	; (1000c320 <gpio_pin_set_config+0x1a0>)
1000c2a6:	6d0a      	ldr	r2, [r1, #80]	; 0x50
1000c2a8:	2301      	movs	r3, #1
1000c2aa:	4083      	lsls	r3, r0
1000c2ac:	4313      	orrs	r3, r2
1000c2ae:	650b      	str	r3, [r1, #80]	; 0x50
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000c2b0:	2300      	movs	r3, #0
				/* pull_enable. */
				if (gpio_pin < 32) {
					switch(config->input_pull) {
						case GPIO_PIN_PULL_NONE:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg |= (1 << gpio_pin);
							break;
1000c2b2:	e033      	b.n	1000c31c <gpio_pin_set_config+0x19c>
						case GPIO_PIN_PULL_UP:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
1000c2b4:	491a      	ldr	r1, [pc, #104]	; (1000c320 <gpio_pin_set_config+0x1a0>)
1000c2b6:	6d0b      	ldr	r3, [r1, #80]	; 0x50
1000c2b8:	2201      	movs	r2, #1
1000c2ba:	4082      	lsls	r2, r0
1000c2bc:	4393      	bics	r3, r2
1000c2be:	650b      	str	r3, [r1, #80]	; 0x50
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000c2c0:	2300      	movs	r3, #0
						case GPIO_PIN_PULL_NONE:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg |= (1 << gpio_pin);
							break;
						case GPIO_PIN_PULL_UP:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
							break;
1000c2c2:	e02b      	b.n	1000c31c <gpio_pin_set_config+0x19c>
						case GPIO_PIN_PULL_DOWN:
							/* Set R-Type */
							LPMCU_MISC_REGS0->RTYPE_PAD_0.reg |= (1 << gpio_pin);
1000c2c4:	4b16      	ldr	r3, [pc, #88]	; (1000c320 <gpio_pin_set_config+0x1a0>)
1000c2c6:	6d59      	ldr	r1, [r3, #84]	; 0x54
1000c2c8:	2201      	movs	r2, #1
1000c2ca:	4082      	lsls	r2, r0
1000c2cc:	4311      	orrs	r1, r2
1000c2ce:	6559      	str	r1, [r3, #84]	; 0x54
							/* Set REN */
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
1000c2d0:	6d19      	ldr	r1, [r3, #80]	; 0x50
1000c2d2:	4391      	bics	r1, r2
1000c2d4:	6519      	str	r1, [r3, #80]	; 0x50
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000c2d6:	2300      	movs	r3, #0
						case GPIO_PIN_PULL_DOWN:
							/* Set R-Type */
							LPMCU_MISC_REGS0->RTYPE_PAD_0.reg |= (1 << gpio_pin);
							/* Set REN */
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
							break;
1000c2d8:	e020      	b.n	1000c31c <gpio_pin_set_config+0x19c>
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000c2da:	2300      	movs	r3, #0
						default:
							status = STATUS_ERR_INVALID_ARG;
							break;
					}
				}
			} else if(config->direction == GPIO_PIN_DIR_OUTPUT) {
1000c2dc:	2a01      	cmp	r2, #1
1000c2de:	d11d      	bne.n	1000c31c <gpio_pin_set_config+0x19c>
				if (gpio_pin < 16) {
1000c2e0:	280f      	cmp	r0, #15
1000c2e2:	d806      	bhi.n	1000c2f2 <gpio_pin_set_config+0x172>
					GPIO0->OUTENSET.reg = (1 << gpio_pin);
1000c2e4:	3301      	adds	r3, #1
1000c2e6:	4083      	lsls	r3, r0
1000c2e8:	b29b      	uxth	r3, r3
1000c2ea:	4a10      	ldr	r2, [pc, #64]	; (1000c32c <gpio_pin_set_config+0x1ac>)
1000c2ec:	8213      	strh	r3, [r2, #16]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000c2ee:	2300      	movs	r3, #0
1000c2f0:	e014      	b.n	1000c31c <gpio_pin_set_config+0x19c>
					}
				}
			} else if(config->direction == GPIO_PIN_DIR_OUTPUT) {
				if (gpio_pin < 16) {
					GPIO0->OUTENSET.reg = (1 << gpio_pin);
				} else if (gpio_pin < 32) {
1000c2f2:	281f      	cmp	r0, #31
1000c2f4:	d808      	bhi.n	1000c308 <gpio_pin_set_config+0x188>
					GPIO1->OUTENSET.reg = (1 << (gpio_pin % 16));
1000c2f6:	230f      	movs	r3, #15
1000c2f8:	4018      	ands	r0, r3
1000c2fa:	3b0e      	subs	r3, #14
1000c2fc:	4083      	lsls	r3, r0
1000c2fe:	b29b      	uxth	r3, r3
1000c300:	4a0b      	ldr	r2, [pc, #44]	; (1000c330 <gpio_pin_set_config+0x1b0>)
1000c302:	8213      	strh	r3, [r2, #16]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000c304:	2300      	movs	r3, #0
1000c306:	e009      	b.n	1000c31c <gpio_pin_set_config+0x19c>
				if (gpio_pin < 16) {
					GPIO0->OUTENSET.reg = (1 << gpio_pin);
				} else if (gpio_pin < 32) {
					GPIO1->OUTENSET.reg = (1 << (gpio_pin % 16));
				} else {
					GPIO2->OUTENSET.reg = (1 << (gpio_pin % 16));
1000c308:	230f      	movs	r3, #15
1000c30a:	4018      	ands	r0, r3
1000c30c:	3b0e      	subs	r3, #14
1000c30e:	4083      	lsls	r3, r0
1000c310:	b29b      	uxth	r3, r3
1000c312:	4a08      	ldr	r2, [pc, #32]	; (1000c334 <gpio_pin_set_config+0x1b4>)
1000c314:	8213      	strh	r3, [r2, #16]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000c316:	2300      	movs	r3, #0
1000c318:	e000      	b.n	1000c31c <gpio_pin_set_config+0x19c>
							LPMCU_MISC_REGS0->RTYPE_PAD_0.reg |= (1 << gpio_pin);
							/* Set REN */
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
							break;
						default:
							status = STATUS_ERR_INVALID_ARG;
1000c31a:	2317      	movs	r3, #23
				}
			}
		}
	}
	return status;
}
1000c31c:	0018      	movs	r0, r3
1000c31e:	bd70      	pop	{r4, r5, r6, pc}
1000c320:	4000b000 	.word	0x4000b000
1000c324:	4000f000 	.word	0x4000f000
1000c328:	4000e000 	.word	0x4000e000
1000c32c:	40010000 	.word	0x40010000
1000c330:	40011000 	.word	0x40011000
1000c334:	40013000 	.word	0x40013000

1000c338 <gpio_pin_get_input_level>:
 */
bool gpio_pin_get_input_level(const uint8_t gpio_pin)
{
	uint32_t regval = 0;

	if (gpio_pin < 16) {
1000c338:	280f      	cmp	r0, #15
1000c33a:	d806      	bhi.n	1000c34a <gpio_pin_get_input_level+0x12>
		regval = GPIO0->DATA.reg;
1000c33c:	4b0f      	ldr	r3, [pc, #60]	; (1000c37c <gpio_pin_get_input_level+0x44>)
1000c33e:	8819      	ldrh	r1, [r3, #0]
		regval &= (1 << gpio_pin);
1000c340:	2301      	movs	r3, #1
1000c342:	4083      	lsls	r3, r0
1000c344:	0018      	movs	r0, r3
1000c346:	4008      	ands	r0, r1
1000c348:	e014      	b.n	1000c374 <gpio_pin_get_input_level+0x3c>
	} else if (gpio_pin < 32) {
1000c34a:	281f      	cmp	r0, #31
1000c34c:	d809      	bhi.n	1000c362 <gpio_pin_get_input_level+0x2a>
		regval = GPIO1->DATA.reg;
1000c34e:	4b0c      	ldr	r3, [pc, #48]	; (1000c380 <gpio_pin_get_input_level+0x48>)
1000c350:	8819      	ldrh	r1, [r3, #0]
		regval &= (1 << (gpio_pin % 16));
1000c352:	230f      	movs	r3, #15
1000c354:	4003      	ands	r3, r0
1000c356:	001a      	movs	r2, r3
1000c358:	2301      	movs	r3, #1
1000c35a:	4093      	lsls	r3, r2
1000c35c:	0018      	movs	r0, r3
1000c35e:	4008      	ands	r0, r1
1000c360:	e008      	b.n	1000c374 <gpio_pin_get_input_level+0x3c>
	} else {
		regval = GPIO2->DATA.reg;
1000c362:	4b08      	ldr	r3, [pc, #32]	; (1000c384 <gpio_pin_get_input_level+0x4c>)
1000c364:	8819      	ldrh	r1, [r3, #0]
		regval &= (1 << (gpio_pin % 16));
1000c366:	230f      	movs	r3, #15
1000c368:	4003      	ands	r3, r0
1000c36a:	001a      	movs	r2, r3
1000c36c:	2301      	movs	r3, #1
1000c36e:	4093      	lsls	r3, r2
1000c370:	0018      	movs	r0, r3
1000c372:	4008      	ands	r0, r1
	}

	return regval;
1000c374:	1e43      	subs	r3, r0, #1
1000c376:	4198      	sbcs	r0, r3
1000c378:	b2c0      	uxtb	r0, r0
}
1000c37a:	4770      	bx	lr
1000c37c:	40010000 	.word	0x40010000
1000c380:	40011000 	.word	0x40011000
1000c384:	40013000 	.word	0x40013000

1000c388 <gpio_pin_get_output_level>:
 */
bool gpio_pin_get_output_level(const uint8_t gpio_pin)
{
	uint32_t regval = 0;

	if (gpio_pin < 16) {
1000c388:	280f      	cmp	r0, #15
1000c38a:	d806      	bhi.n	1000c39a <gpio_pin_get_output_level+0x12>
		regval = GPIO0->DATAOUT.reg;
1000c38c:	4b0f      	ldr	r3, [pc, #60]	; (1000c3cc <gpio_pin_get_output_level+0x44>)
1000c38e:	8899      	ldrh	r1, [r3, #4]
		regval &= (1 << gpio_pin);
1000c390:	2301      	movs	r3, #1
1000c392:	4083      	lsls	r3, r0
1000c394:	0018      	movs	r0, r3
1000c396:	4008      	ands	r0, r1
1000c398:	e014      	b.n	1000c3c4 <gpio_pin_get_output_level+0x3c>
	} else if (gpio_pin < 32) {
1000c39a:	281f      	cmp	r0, #31
1000c39c:	d809      	bhi.n	1000c3b2 <gpio_pin_get_output_level+0x2a>
		regval = GPIO1->DATAOUT.reg;
1000c39e:	4b0c      	ldr	r3, [pc, #48]	; (1000c3d0 <gpio_pin_get_output_level+0x48>)
1000c3a0:	8899      	ldrh	r1, [r3, #4]
		regval &= (1 << (gpio_pin % 16));
1000c3a2:	230f      	movs	r3, #15
1000c3a4:	4003      	ands	r3, r0
1000c3a6:	001a      	movs	r2, r3
1000c3a8:	2301      	movs	r3, #1
1000c3aa:	4093      	lsls	r3, r2
1000c3ac:	0018      	movs	r0, r3
1000c3ae:	4008      	ands	r0, r1
1000c3b0:	e008      	b.n	1000c3c4 <gpio_pin_get_output_level+0x3c>
	} else {
		regval = GPIO2->DATAOUT.reg;
1000c3b2:	4b08      	ldr	r3, [pc, #32]	; (1000c3d4 <gpio_pin_get_output_level+0x4c>)
1000c3b4:	8899      	ldrh	r1, [r3, #4]
		regval &= (1 << (gpio_pin % 16));
1000c3b6:	230f      	movs	r3, #15
1000c3b8:	4003      	ands	r3, r0
1000c3ba:	001a      	movs	r2, r3
1000c3bc:	2301      	movs	r3, #1
1000c3be:	4093      	lsls	r3, r2
1000c3c0:	0018      	movs	r0, r3
1000c3c2:	4008      	ands	r0, r1
	}

	return regval;
1000c3c4:	1e43      	subs	r3, r0, #1
1000c3c6:	4198      	sbcs	r0, r3
1000c3c8:	b2c0      	uxtb	r0, r0
}
1000c3ca:	4770      	bx	lr
1000c3cc:	40010000 	.word	0x40010000
1000c3d0:	40011000 	.word	0x40011000
1000c3d4:	40013000 	.word	0x40013000

1000c3d8 <gpio_pin_set_output_level>:
 *
 *  \param[in] gpio_pin  Index of the GPIO pin to write to.
 *  \param[in] level     Logical level to set the given pin to.
 */
void gpio_pin_set_output_level(const uint8_t gpio_pin, const bool level)
{
1000c3d8:	b510      	push	{r4, lr}
	if (gpio_pin < 16) {
1000c3da:	280f      	cmp	r0, #15
1000c3dc:	d810      	bhi.n	1000c400 <gpio_pin_set_output_level+0x28>
		if(level) {
1000c3de:	2900      	cmp	r1, #0
1000c3e0:	d007      	beq.n	1000c3f2 <gpio_pin_set_output_level+0x1a>
			GPIO0->DATAOUT.reg |= (1 << gpio_pin);
1000c3e2:	4a1d      	ldr	r2, [pc, #116]	; (1000c458 <gpio_pin_set_output_level+0x80>)
1000c3e4:	8891      	ldrh	r1, [r2, #4]
1000c3e6:	2301      	movs	r3, #1
1000c3e8:	4083      	lsls	r3, r0
1000c3ea:	430b      	orrs	r3, r1
1000c3ec:	b29b      	uxth	r3, r3
1000c3ee:	8093      	strh	r3, [r2, #4]
1000c3f0:	e031      	b.n	1000c456 <gpio_pin_set_output_level+0x7e>
		} else {
			GPIO0->DATAOUT.reg &= ~(1 << gpio_pin);
1000c3f2:	4919      	ldr	r1, [pc, #100]	; (1000c458 <gpio_pin_set_output_level+0x80>)
1000c3f4:	888b      	ldrh	r3, [r1, #4]
1000c3f6:	2201      	movs	r2, #1
1000c3f8:	4082      	lsls	r2, r0
1000c3fa:	4393      	bics	r3, r2
1000c3fc:	808b      	strh	r3, [r1, #4]
1000c3fe:	e02a      	b.n	1000c456 <gpio_pin_set_output_level+0x7e>
		}
	} else if (gpio_pin < 32) {
1000c400:	281f      	cmp	r0, #31
1000c402:	d814      	bhi.n	1000c42e <gpio_pin_set_output_level+0x56>
		if(level) {
1000c404:	2900      	cmp	r1, #0
1000c406:	d009      	beq.n	1000c41c <gpio_pin_set_output_level+0x44>
			GPIO1->DATAOUT.reg |= (1 << (gpio_pin % 16));
1000c408:	4914      	ldr	r1, [pc, #80]	; (1000c45c <gpio_pin_set_output_level+0x84>)
1000c40a:	888c      	ldrh	r4, [r1, #4]
1000c40c:	220f      	movs	r2, #15
1000c40e:	4010      	ands	r0, r2
1000c410:	2301      	movs	r3, #1
1000c412:	4083      	lsls	r3, r0
1000c414:	4323      	orrs	r3, r4
1000c416:	b29b      	uxth	r3, r3
1000c418:	808b      	strh	r3, [r1, #4]
1000c41a:	e01c      	b.n	1000c456 <gpio_pin_set_output_level+0x7e>
		} else {
			GPIO1->DATAOUT.reg &= ~(1 << (gpio_pin % 16));
1000c41c:	490f      	ldr	r1, [pc, #60]	; (1000c45c <gpio_pin_set_output_level+0x84>)
1000c41e:	888b      	ldrh	r3, [r1, #4]
1000c420:	220f      	movs	r2, #15
1000c422:	4010      	ands	r0, r2
1000c424:	3a0e      	subs	r2, #14
1000c426:	4082      	lsls	r2, r0
1000c428:	4393      	bics	r3, r2
1000c42a:	808b      	strh	r3, [r1, #4]
1000c42c:	e013      	b.n	1000c456 <gpio_pin_set_output_level+0x7e>
		}
	} else {
		if(level) {
1000c42e:	2900      	cmp	r1, #0
1000c430:	d009      	beq.n	1000c446 <gpio_pin_set_output_level+0x6e>
			GPIO2->DATAOUT.reg |= (1 << (gpio_pin % 16));
1000c432:	490b      	ldr	r1, [pc, #44]	; (1000c460 <gpio_pin_set_output_level+0x88>)
1000c434:	888c      	ldrh	r4, [r1, #4]
1000c436:	220f      	movs	r2, #15
1000c438:	4010      	ands	r0, r2
1000c43a:	2301      	movs	r3, #1
1000c43c:	4083      	lsls	r3, r0
1000c43e:	4323      	orrs	r3, r4
1000c440:	b29b      	uxth	r3, r3
1000c442:	808b      	strh	r3, [r1, #4]
1000c444:	e007      	b.n	1000c456 <gpio_pin_set_output_level+0x7e>
		} else {
			GPIO2->DATAOUT.reg &= ~(1 << (gpio_pin % 16));
1000c446:	4906      	ldr	r1, [pc, #24]	; (1000c460 <gpio_pin_set_output_level+0x88>)
1000c448:	888b      	ldrh	r3, [r1, #4]
1000c44a:	220f      	movs	r2, #15
1000c44c:	4010      	ands	r0, r2
1000c44e:	3a0e      	subs	r2, #14
1000c450:	4082      	lsls	r2, r0
1000c452:	4393      	bics	r3, r2
1000c454:	808b      	strh	r3, [r1, #4]
		}
	}
}
1000c456:	bd10      	pop	{r4, pc}
1000c458:	40010000 	.word	0x40010000
1000c45c:	40011000 	.word	0x40011000
1000c460:	40013000 	.word	0x40013000

1000c464 <gpio_pinmux_cofiguration>:
 *
 *  \param[in] gpio_pin   Index of the GPIO pin to toggle.
 *  \param[in] pinmux_sel PINMUX selection.
 */
void gpio_pinmux_cofiguration(const uint8_t gpio_pin, uint16_t pinmux_sel)
{
1000c464:	b570      	push	{r4, r5, r6, lr}
	uint8_t megamux_sel = (pinmux_sel >> 8) & 0xFF;
1000c466:	0a0d      	lsrs	r5, r1, #8

	pinmux_sel &= 0xFF;
1000c468:	23ff      	movs	r3, #255	; 0xff
1000c46a:	4019      	ands	r1, r3

	if (gpio_pin <= 7) {
1000c46c:	2807      	cmp	r0, #7
1000c46e:	d833      	bhi.n	1000c4d8 <gpio_pinmux_cofiguration+0x74>
		LPMCU_MISC_REGS0->PINMUX_SEL_0.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000c470:	4a4e      	ldr	r2, [pc, #312]	; (1000c5ac <gpio_pinmux_cofiguration+0x148>)
1000c472:	6c54      	ldr	r4, [r2, #68]	; 0x44
1000c474:	3bf8      	subs	r3, #248	; 0xf8
1000c476:	4003      	ands	r3, r0
1000c478:	009b      	lsls	r3, r3, #2
1000c47a:	2607      	movs	r6, #7
1000c47c:	409e      	lsls	r6, r3
1000c47e:	43b4      	bics	r4, r6
1000c480:	6454      	str	r4, [r2, #68]	; 0x44
		LPMCU_MISC_REGS0->PINMUX_SEL_0.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
1000c482:	6c54      	ldr	r4, [r2, #68]	; 0x44
1000c484:	000e      	movs	r6, r1
1000c486:	409e      	lsls	r6, r3
1000c488:	0033      	movs	r3, r6
1000c48a:	4323      	orrs	r3, r4
1000c48c:	6453      	str	r3, [r2, #68]	; 0x44
		if (pinmux_sel == 0x01) {
1000c48e:	2901      	cmp	r1, #1
1000c490:	d000      	beq.n	1000c494 <gpio_pinmux_cofiguration+0x30>
1000c492:	e08a      	b.n	1000c5aa <gpio_pinmux_cofiguration+0x146>
			if (gpio_pin <= 3) {
1000c494:	2803      	cmp	r0, #3
1000c496:	d80f      	bhi.n	1000c4b8 <gpio_pinmux_cofiguration+0x54>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_0.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000c498:	0011      	movs	r1, r2
1000c49a:	22d0      	movs	r2, #208	; 0xd0
1000c49c:	0052      	lsls	r2, r2, #1
1000c49e:	588c      	ldr	r4, [r1, r2]
1000c4a0:	2303      	movs	r3, #3
1000c4a2:	4018      	ands	r0, r3
1000c4a4:	00c0      	lsls	r0, r0, #3
1000c4a6:	333c      	adds	r3, #60	; 0x3c
1000c4a8:	4083      	lsls	r3, r0
1000c4aa:	439c      	bics	r4, r3
1000c4ac:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_0.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000c4ae:	588b      	ldr	r3, [r1, r2]
1000c4b0:	4085      	lsls	r5, r0
1000c4b2:	431d      	orrs	r5, r3
1000c4b4:	508d      	str	r5, [r1, r2]
1000c4b6:	e078      	b.n	1000c5aa <gpio_pinmux_cofiguration+0x146>
			} else if (gpio_pin <= 7) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_1.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000c4b8:	493c      	ldr	r1, [pc, #240]	; (1000c5ac <gpio_pinmux_cofiguration+0x148>)
1000c4ba:	22d2      	movs	r2, #210	; 0xd2
1000c4bc:	0052      	lsls	r2, r2, #1
1000c4be:	588c      	ldr	r4, [r1, r2]
1000c4c0:	2303      	movs	r3, #3
1000c4c2:	4018      	ands	r0, r3
1000c4c4:	00c0      	lsls	r0, r0, #3
1000c4c6:	333c      	adds	r3, #60	; 0x3c
1000c4c8:	4083      	lsls	r3, r0
1000c4ca:	439c      	bics	r4, r3
1000c4cc:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_1.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000c4ce:	588b      	ldr	r3, [r1, r2]
1000c4d0:	4085      	lsls	r5, r0
1000c4d2:	431d      	orrs	r5, r3
1000c4d4:	508d      	str	r5, [r1, r2]
1000c4d6:	e068      	b.n	1000c5aa <gpio_pinmux_cofiguration+0x146>
			}
		}
	} else if (gpio_pin <= 15) {
1000c4d8:	280f      	cmp	r0, #15
1000c4da:	d832      	bhi.n	1000c542 <gpio_pinmux_cofiguration+0xde>
		LPMCU_MISC_REGS0->PINMUX_SEL_1.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000c4dc:	4a33      	ldr	r2, [pc, #204]	; (1000c5ac <gpio_pinmux_cofiguration+0x148>)
1000c4de:	6c94      	ldr	r4, [r2, #72]	; 0x48
1000c4e0:	2307      	movs	r3, #7
1000c4e2:	4003      	ands	r3, r0
1000c4e4:	009b      	lsls	r3, r3, #2
1000c4e6:	2607      	movs	r6, #7
1000c4e8:	409e      	lsls	r6, r3
1000c4ea:	43b4      	bics	r4, r6
1000c4ec:	6494      	str	r4, [r2, #72]	; 0x48
		LPMCU_MISC_REGS0->PINMUX_SEL_1.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
1000c4ee:	6c94      	ldr	r4, [r2, #72]	; 0x48
1000c4f0:	000e      	movs	r6, r1
1000c4f2:	409e      	lsls	r6, r3
1000c4f4:	0033      	movs	r3, r6
1000c4f6:	4323      	orrs	r3, r4
1000c4f8:	6493      	str	r3, [r2, #72]	; 0x48
		if (pinmux_sel == 0x01) {
1000c4fa:	2901      	cmp	r1, #1
1000c4fc:	d155      	bne.n	1000c5aa <gpio_pinmux_cofiguration+0x146>
			if (gpio_pin <= 11) {
1000c4fe:	280b      	cmp	r0, #11
1000c500:	d80f      	bhi.n	1000c522 <gpio_pinmux_cofiguration+0xbe>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_2.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000c502:	0011      	movs	r1, r2
1000c504:	22d4      	movs	r2, #212	; 0xd4
1000c506:	0052      	lsls	r2, r2, #1
1000c508:	588c      	ldr	r4, [r1, r2]
1000c50a:	2303      	movs	r3, #3
1000c50c:	4018      	ands	r0, r3
1000c50e:	00c0      	lsls	r0, r0, #3
1000c510:	333c      	adds	r3, #60	; 0x3c
1000c512:	4083      	lsls	r3, r0
1000c514:	439c      	bics	r4, r3
1000c516:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_2.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000c518:	588b      	ldr	r3, [r1, r2]
1000c51a:	4085      	lsls	r5, r0
1000c51c:	431d      	orrs	r5, r3
1000c51e:	508d      	str	r5, [r1, r2]
1000c520:	e043      	b.n	1000c5aa <gpio_pinmux_cofiguration+0x146>
			} else if (gpio_pin <= 15) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_3.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000c522:	4922      	ldr	r1, [pc, #136]	; (1000c5ac <gpio_pinmux_cofiguration+0x148>)
1000c524:	22d6      	movs	r2, #214	; 0xd6
1000c526:	0052      	lsls	r2, r2, #1
1000c528:	588c      	ldr	r4, [r1, r2]
1000c52a:	2303      	movs	r3, #3
1000c52c:	4018      	ands	r0, r3
1000c52e:	00c0      	lsls	r0, r0, #3
1000c530:	333c      	adds	r3, #60	; 0x3c
1000c532:	4083      	lsls	r3, r0
1000c534:	439c      	bics	r4, r3
1000c536:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_3.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000c538:	588b      	ldr	r3, [r1, r2]
1000c53a:	4085      	lsls	r5, r0
1000c53c:	431d      	orrs	r5, r3
1000c53e:	508d      	str	r5, [r1, r2]
1000c540:	e033      	b.n	1000c5aa <gpio_pinmux_cofiguration+0x146>
			}
		}
	} else if (gpio_pin <= 23) {
1000c542:	2817      	cmp	r0, #23
1000c544:	d831      	bhi.n	1000c5aa <gpio_pinmux_cofiguration+0x146>
		LPMCU_MISC_REGS0->PINMUX_SEL_2.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000c546:	4a19      	ldr	r2, [pc, #100]	; (1000c5ac <gpio_pinmux_cofiguration+0x148>)
1000c548:	6cd4      	ldr	r4, [r2, #76]	; 0x4c
1000c54a:	2307      	movs	r3, #7
1000c54c:	4003      	ands	r3, r0
1000c54e:	009b      	lsls	r3, r3, #2
1000c550:	2607      	movs	r6, #7
1000c552:	409e      	lsls	r6, r3
1000c554:	43b4      	bics	r4, r6
1000c556:	64d4      	str	r4, [r2, #76]	; 0x4c
		LPMCU_MISC_REGS0->PINMUX_SEL_2.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
1000c558:	6cd4      	ldr	r4, [r2, #76]	; 0x4c
1000c55a:	000e      	movs	r6, r1
1000c55c:	409e      	lsls	r6, r3
1000c55e:	0033      	movs	r3, r6
1000c560:	4323      	orrs	r3, r4
1000c562:	64d3      	str	r3, [r2, #76]	; 0x4c
		if (pinmux_sel == 0x01) {
1000c564:	2901      	cmp	r1, #1
1000c566:	d120      	bne.n	1000c5aa <gpio_pinmux_cofiguration+0x146>
			if (gpio_pin <= 19) {
1000c568:	2813      	cmp	r0, #19
1000c56a:	d80f      	bhi.n	1000c58c <gpio_pinmux_cofiguration+0x128>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_4.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000c56c:	0011      	movs	r1, r2
1000c56e:	22d8      	movs	r2, #216	; 0xd8
1000c570:	0052      	lsls	r2, r2, #1
1000c572:	588c      	ldr	r4, [r1, r2]
1000c574:	2303      	movs	r3, #3
1000c576:	4018      	ands	r0, r3
1000c578:	00c0      	lsls	r0, r0, #3
1000c57a:	333c      	adds	r3, #60	; 0x3c
1000c57c:	4083      	lsls	r3, r0
1000c57e:	439c      	bics	r4, r3
1000c580:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_4.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000c582:	588b      	ldr	r3, [r1, r2]
1000c584:	4085      	lsls	r5, r0
1000c586:	431d      	orrs	r5, r3
1000c588:	508d      	str	r5, [r1, r2]
1000c58a:	e00e      	b.n	1000c5aa <gpio_pinmux_cofiguration+0x146>
			} else if (gpio_pin <= 23) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_5.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000c58c:	4a07      	ldr	r2, [pc, #28]	; (1000c5ac <gpio_pinmux_cofiguration+0x148>)
1000c58e:	23da      	movs	r3, #218	; 0xda
1000c590:	005b      	lsls	r3, r3, #1
1000c592:	58d1      	ldr	r1, [r2, r3]
1000c594:	2403      	movs	r4, #3
1000c596:	4020      	ands	r0, r4
1000c598:	00c0      	lsls	r0, r0, #3
1000c59a:	343c      	adds	r4, #60	; 0x3c
1000c59c:	4084      	lsls	r4, r0
1000c59e:	43a1      	bics	r1, r4
1000c5a0:	50d1      	str	r1, [r2, r3]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_5.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000c5a2:	58d1      	ldr	r1, [r2, r3]
1000c5a4:	4085      	lsls	r5, r0
1000c5a6:	430d      	orrs	r5, r1
1000c5a8:	50d5      	str	r5, [r2, r3]
			}
		}
	}
}
1000c5aa:	bd70      	pop	{r4, r5, r6, pc}
1000c5ac:	4000b000 	.word	0x4000b000

1000c5b0 <gpio_register_callback>:
 * \param[in]  callback_type  Callback type given by an enum
 *
 */
void gpio_register_callback(uint8_t gpio_pin, gpio_callback_t callback_func,
				enum gpio_callback callback_type)
{
1000c5b0:	b5f0      	push	{r4, r5, r6, r7, lr}
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
		gpio_port = 0;
1000c5b2:	2300      	movs	r3, #0
	Assert(callback_func);
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
1000c5b4:	280f      	cmp	r0, #15
1000c5b6:	d904      	bls.n	1000c5c2 <gpio_register_callback+0x12>
		gpio_port = 0;
	} else if (gpio_pin < 32) {
		gpio_port = 1;
	} else {
		gpio_port = 2;
1000c5b8:	241f      	movs	r4, #31
1000c5ba:	4284      	cmp	r4, r0
1000c5bc:	415b      	adcs	r3, r3
1000c5be:	3c1d      	subs	r4, #29
1000c5c0:	1ae3      	subs	r3, r4, r3
	}
	switch (callback_type) {
1000c5c2:	2a01      	cmp	r2, #1
1000c5c4:	d016      	beq.n	1000c5f4 <gpio_register_callback+0x44>
1000c5c6:	2a00      	cmp	r2, #0
1000c5c8:	d004      	beq.n	1000c5d4 <gpio_register_callback+0x24>
1000c5ca:	2a02      	cmp	r2, #2
1000c5cc:	d022      	beq.n	1000c614 <gpio_register_callback+0x64>
1000c5ce:	2a03      	cmp	r2, #3
1000c5d0:	d030      	beq.n	1000c634 <gpio_register_callback+0x84>
1000c5d2:	e03e      	b.n	1000c652 <gpio_register_callback+0xa2>
	case GPIO_CALLBACK_LOW:
		_gpio_instances[gpio_port].hw->INTTYPECLR.reg = 1 << (gpio_pin % 16);
1000c5d4:	4e29      	ldr	r6, [pc, #164]	; (1000c67c <gpio_register_callback+0xcc>)
1000c5d6:	00dc      	lsls	r4, r3, #3
1000c5d8:	18e2      	adds	r2, r4, r3
1000c5da:	00d2      	lsls	r2, r2, #3
1000c5dc:	5997      	ldr	r7, [r2, r6]
1000c5de:	250f      	movs	r5, #15
1000c5e0:	4005      	ands	r5, r0
1000c5e2:	2201      	movs	r2, #1
1000c5e4:	40aa      	lsls	r2, r5
1000c5e6:	b292      	uxth	r2, r2
1000c5e8:	85ba      	strh	r2, [r7, #44]	; 0x2c
		_gpio_instances[gpio_port].hw->INTPOLCLR.reg = 1 << (gpio_pin % 16);
1000c5ea:	18e4      	adds	r4, r4, r3
1000c5ec:	00e4      	lsls	r4, r4, #3
1000c5ee:	59a4      	ldr	r4, [r4, r6]
1000c5f0:	86a2      	strh	r2, [r4, #52]	; 0x34
		break;
1000c5f2:	e02e      	b.n	1000c652 <gpio_register_callback+0xa2>

	case GPIO_CALLBACK_HIGH:
		_gpio_instances[gpio_port].hw->INTTYPECLR.reg = 1 << (gpio_pin % 16);
1000c5f4:	4e21      	ldr	r6, [pc, #132]	; (1000c67c <gpio_register_callback+0xcc>)
1000c5f6:	00dc      	lsls	r4, r3, #3
1000c5f8:	18e2      	adds	r2, r4, r3
1000c5fa:	00d2      	lsls	r2, r2, #3
1000c5fc:	5997      	ldr	r7, [r2, r6]
1000c5fe:	250f      	movs	r5, #15
1000c600:	4005      	ands	r5, r0
1000c602:	2201      	movs	r2, #1
1000c604:	40aa      	lsls	r2, r5
1000c606:	b292      	uxth	r2, r2
1000c608:	85ba      	strh	r2, [r7, #44]	; 0x2c
		_gpio_instances[gpio_port].hw->INTPOLSET.reg = 1 << (gpio_pin % 16);
1000c60a:	18e4      	adds	r4, r4, r3
1000c60c:	00e4      	lsls	r4, r4, #3
1000c60e:	59a4      	ldr	r4, [r4, r6]
1000c610:	8622      	strh	r2, [r4, #48]	; 0x30
		break;
1000c612:	e01e      	b.n	1000c652 <gpio_register_callback+0xa2>

	case GPIO_CALLBACK_RISING:
		_gpio_instances[gpio_port].hw->INTTYPESET.reg = 1 << (gpio_pin % 16);
1000c614:	4e19      	ldr	r6, [pc, #100]	; (1000c67c <gpio_register_callback+0xcc>)
1000c616:	00dc      	lsls	r4, r3, #3
1000c618:	18e2      	adds	r2, r4, r3
1000c61a:	00d2      	lsls	r2, r2, #3
1000c61c:	5997      	ldr	r7, [r2, r6]
1000c61e:	250f      	movs	r5, #15
1000c620:	4005      	ands	r5, r0
1000c622:	2201      	movs	r2, #1
1000c624:	40aa      	lsls	r2, r5
1000c626:	b292      	uxth	r2, r2
1000c628:	853a      	strh	r2, [r7, #40]	; 0x28
		_gpio_instances[gpio_port].hw->INTPOLSET.reg = 1 << (gpio_pin % 16);
1000c62a:	18e4      	adds	r4, r4, r3
1000c62c:	00e4      	lsls	r4, r4, #3
1000c62e:	59a4      	ldr	r4, [r4, r6]
1000c630:	8622      	strh	r2, [r4, #48]	; 0x30
		break;
1000c632:	e00e      	b.n	1000c652 <gpio_register_callback+0xa2>

	case GPIO_CALLBACK_FALLING:
		_gpio_instances[gpio_port].hw->INTTYPESET.reg = 1 << (gpio_pin % 16);
1000c634:	4e11      	ldr	r6, [pc, #68]	; (1000c67c <gpio_register_callback+0xcc>)
1000c636:	00dc      	lsls	r4, r3, #3
1000c638:	18e2      	adds	r2, r4, r3
1000c63a:	00d2      	lsls	r2, r2, #3
1000c63c:	5997      	ldr	r7, [r2, r6]
1000c63e:	250f      	movs	r5, #15
1000c640:	4005      	ands	r5, r0
1000c642:	2201      	movs	r2, #1
1000c644:	40aa      	lsls	r2, r5
1000c646:	b292      	uxth	r2, r2
1000c648:	853a      	strh	r2, [r7, #40]	; 0x28
		_gpio_instances[gpio_port].hw->INTPOLCLR.reg = (1 << (gpio_pin % 16));
1000c64a:	18e4      	adds	r4, r4, r3
1000c64c:	00e4      	lsls	r4, r4, #3
1000c64e:	59a4      	ldr	r4, [r4, r6]
1000c650:	86a2      	strh	r2, [r4, #52]	; 0x34

	case GPIO_CALLBACK_N:
		break;
	}
	/* Register callback function */
	_gpio_instances[gpio_port].callback[gpio_pin % 16] = callback_func;
1000c652:	220f      	movs	r2, #15
1000c654:	4010      	ands	r0, r2
1000c656:	4c09      	ldr	r4, [pc, #36]	; (1000c67c <gpio_register_callback+0xcc>)
1000c658:	00dd      	lsls	r5, r3, #3
1000c65a:	18ea      	adds	r2, r5, r3
1000c65c:	0052      	lsls	r2, r2, #1
1000c65e:	1812      	adds	r2, r2, r0
1000c660:	0092      	lsls	r2, r2, #2
1000c662:	18a2      	adds	r2, r4, r2
1000c664:	6051      	str	r1, [r2, #4]
	/* Set the bit corresponding to the gpio pin */
	_gpio_instances[gpio_port].callback_reg_mask |= (1 << (gpio_pin % 16));
1000c666:	18ea      	adds	r2, r5, r3
1000c668:	00d2      	lsls	r2, r2, #3
1000c66a:	18a2      	adds	r2, r4, r2
1000c66c:	3244      	adds	r2, #68	; 0x44
1000c66e:	2101      	movs	r1, #1
1000c670:	4081      	lsls	r1, r0
1000c672:	8813      	ldrh	r3, [r2, #0]
1000c674:	430b      	orrs	r3, r1
1000c676:	8013      	strh	r3, [r2, #0]
}
1000c678:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000c67a:	46c0      	nop			; (mov r8, r8)
1000c67c:	1001a358 	.word	0x1001a358

1000c680 <gpio_enable_callback>:
 * conditions for the callback type are met.
 *
 * \param[in]  gpio_pin   GPIO pin
 */
void gpio_enable_callback(uint8_t gpio_pin)
{
1000c680:	b530      	push	{r4, r5, lr}
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
1000c682:	280f      	cmp	r0, #15
1000c684:	d805      	bhi.n	1000c692 <gpio_enable_callback+0x12>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000c686:	2280      	movs	r2, #128	; 0x80
1000c688:	0412      	lsls	r2, r2, #16
1000c68a:	4b12      	ldr	r3, [pc, #72]	; (1000c6d4 <gpio_enable_callback+0x54>)
1000c68c:	601a      	str	r2, [r3, #0]
		gpio_port = 0;
1000c68e:	2200      	movs	r2, #0
1000c690:	e00c      	b.n	1000c6ac <gpio_enable_callback+0x2c>
		NVIC_EnableIRQ(GPIO0_IRQn);
	} else if (gpio_pin < 32) {
1000c692:	281f      	cmp	r0, #31
1000c694:	d805      	bhi.n	1000c6a2 <gpio_enable_callback+0x22>
1000c696:	2280      	movs	r2, #128	; 0x80
1000c698:	0452      	lsls	r2, r2, #17
1000c69a:	4b0e      	ldr	r3, [pc, #56]	; (1000c6d4 <gpio_enable_callback+0x54>)
1000c69c:	601a      	str	r2, [r3, #0]
		gpio_port = 1;
1000c69e:	2201      	movs	r2, #1
1000c6a0:	e004      	b.n	1000c6ac <gpio_enable_callback+0x2c>
1000c6a2:	2280      	movs	r2, #128	; 0x80
1000c6a4:	0492      	lsls	r2, r2, #18
1000c6a6:	4b0b      	ldr	r3, [pc, #44]	; (1000c6d4 <gpio_enable_callback+0x54>)
1000c6a8:	601a      	str	r2, [r3, #0]
		NVIC_EnableIRQ(GPIO1_IRQn);
	} else {
		gpio_port = 2;
1000c6aa:	2202      	movs	r2, #2
		NVIC_EnableIRQ(GPIO2_IRQn);
	}

	/* Enable callback */
	_gpio_instances[gpio_port].callback_enable_mask |= (1 << (gpio_pin % 16));
1000c6ac:	230f      	movs	r3, #15
1000c6ae:	4018      	ands	r0, r3
1000c6b0:	2101      	movs	r1, #1
1000c6b2:	4081      	lsls	r1, r0
1000c6b4:	4c08      	ldr	r4, [pc, #32]	; (1000c6d8 <gpio_enable_callback+0x58>)
1000c6b6:	00d5      	lsls	r5, r2, #3
1000c6b8:	18ab      	adds	r3, r5, r2
1000c6ba:	00db      	lsls	r3, r3, #3
1000c6bc:	18e3      	adds	r3, r4, r3
1000c6be:	3346      	adds	r3, #70	; 0x46
1000c6c0:	8818      	ldrh	r0, [r3, #0]
1000c6c2:	4308      	orrs	r0, r1
1000c6c4:	8018      	strh	r0, [r3, #0]
	_gpio_instances[gpio_port].hw->INTENSET.reg = (1 << (gpio_pin % 16));
1000c6c6:	18aa      	adds	r2, r5, r2
1000c6c8:	00d2      	lsls	r2, r2, #3
1000c6ca:	5913      	ldr	r3, [r2, r4]
1000c6cc:	b289      	uxth	r1, r1
1000c6ce:	8419      	strh	r1, [r3, #32]
}
1000c6d0:	bd30      	pop	{r4, r5, pc}
1000c6d2:	46c0      	nop			; (mov r8, r8)
1000c6d4:	e000e100 	.word	0xe000e100
1000c6d8:	1001a358 	.word	0x1001a358

1000c6dc <gpio_disable_callback>:
 * The callback function will not be called from the interrupt handler.
 *
 * \param[in]  gpio_pin   GPIO pin
 */
void gpio_disable_callback(uint8_t gpio_pin)
{
1000c6dc:	b530      	push	{r4, r5, lr}
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
		gpio_port = 0;
1000c6de:	2300      	movs	r3, #0
{
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
1000c6e0:	280f      	cmp	r0, #15
1000c6e2:	d904      	bls.n	1000c6ee <gpio_disable_callback+0x12>
		gpio_port = 0;
	} else if (gpio_pin < 32) {
		gpio_port = 1;
	} else {
		gpio_port = 2;
1000c6e4:	221f      	movs	r2, #31
1000c6e6:	4282      	cmp	r2, r0
1000c6e8:	415b      	adcs	r3, r3
1000c6ea:	3a1d      	subs	r2, #29
1000c6ec:	1ad3      	subs	r3, r2, r3
	}

	/* Enable callback */
	_gpio_instances[gpio_port].callback_enable_mask &= ~(1 << (gpio_pin % 16));
1000c6ee:	220f      	movs	r2, #15
1000c6f0:	4010      	ands	r0, r2
1000c6f2:	2101      	movs	r1, #1
1000c6f4:	4081      	lsls	r1, r0
1000c6f6:	4c07      	ldr	r4, [pc, #28]	; (1000c714 <gpio_disable_callback+0x38>)
1000c6f8:	00dd      	lsls	r5, r3, #3
1000c6fa:	18ea      	adds	r2, r5, r3
1000c6fc:	00d2      	lsls	r2, r2, #3
1000c6fe:	18a2      	adds	r2, r4, r2
1000c700:	3246      	adds	r2, #70	; 0x46
1000c702:	8810      	ldrh	r0, [r2, #0]
1000c704:	4388      	bics	r0, r1
1000c706:	8010      	strh	r0, [r2, #0]
	_gpio_instances[gpio_port].hw->INTENCLR.reg = (1 << (gpio_pin % 16));
1000c708:	18eb      	adds	r3, r5, r3
1000c70a:	00db      	lsls	r3, r3, #3
1000c70c:	591b      	ldr	r3, [r3, r4]
1000c70e:	b289      	uxth	r1, r1
1000c710:	8499      	strh	r1, [r3, #36]	; 0x24
}
1000c712:	bd30      	pop	{r4, r5, pc}
1000c714:	1001a358 	.word	0x1001a358

1000c718 <gpio_init>:
 *
 * This function will init GPIO callback.
 *
 */
void gpio_init(void)
{
1000c718:	b510      	push	{r4, lr}
1000c71a:	4a11      	ldr	r2, [pc, #68]	; (1000c760 <gpio_init+0x48>)
1000c71c:	0010      	movs	r0, r2
1000c71e:	30d8      	adds	r0, #216	; 0xd8
	uint8_t i, j;

	for(i = 0; i < 3; i++) {
		for(j = 0; j < 16; j++) {
			_gpio_instances[i].callback[j] = NULL;
1000c720:	2100      	movs	r1, #0
1000c722:	e007      	b.n	1000c734 <gpio_init+0x1c>
1000c724:	c302      	stmia	r3!, {r1}
void gpio_init(void)
{
	uint8_t i, j;

	for(i = 0; i < 3; i++) {
		for(j = 0; j < 16; j++) {
1000c726:	4293      	cmp	r3, r2
1000c728:	d1fc      	bne.n	1000c724 <gpio_init+0xc>
			_gpio_instances[i].callback[j] = NULL;
		}
		_gpio_instances[i].callback_enable_mask = 0;
1000c72a:	8051      	strh	r1, [r2, #2]
		_gpio_instances[i].callback_reg_mask = 0;
1000c72c:	8011      	strh	r1, [r2, #0]
1000c72e:	3248      	adds	r2, #72	; 0x48
 */
void gpio_init(void)
{
	uint8_t i, j;

	for(i = 0; i < 3; i++) {
1000c730:	4282      	cmp	r2, r0
1000c732:	d002      	beq.n	1000c73a <gpio_init+0x22>
1000c734:	0013      	movs	r3, r2
1000c736:	3b40      	subs	r3, #64	; 0x40
1000c738:	e7f4      	b.n	1000c724 <gpio_init+0xc>
			_gpio_instances[i].callback[j] = NULL;
		}
		_gpio_instances[i].callback_enable_mask = 0;
		_gpio_instances[i].callback_reg_mask = 0;
	}
	_gpio_instances[0].hw = (void *)GPIO0;
1000c73a:	4b0a      	ldr	r3, [pc, #40]	; (1000c764 <gpio_init+0x4c>)
1000c73c:	4a0a      	ldr	r2, [pc, #40]	; (1000c768 <gpio_init+0x50>)
1000c73e:	601a      	str	r2, [r3, #0]
	_gpio_instances[1].hw = (void *)GPIO1;
1000c740:	4a0a      	ldr	r2, [pc, #40]	; (1000c76c <gpio_init+0x54>)
1000c742:	649a      	str	r2, [r3, #72]	; 0x48
	_gpio_instances[2].hw = (void *)GPIO2;
1000c744:	490a      	ldr	r1, [pc, #40]	; (1000c770 <gpio_init+0x58>)
1000c746:	2290      	movs	r2, #144	; 0x90
1000c748:	5099      	str	r1, [r3, r2]
	system_register_isr(RAM_ISR_TABLE_PORT0_COMB_INDEX, (uint32_t)gpio_port0_isr_handler);
1000c74a:	490a      	ldr	r1, [pc, #40]	; (1000c774 <gpio_init+0x5c>)
1000c74c:	2027      	movs	r0, #39	; 0x27
1000c74e:	4c0a      	ldr	r4, [pc, #40]	; (1000c778 <gpio_init+0x60>)
1000c750:	47a0      	blx	r4
	system_register_isr(RAM_ISR_TABLE_PORT1_COMB_INDEX, (uint32_t)gpio_port1_isr_handler);
1000c752:	490a      	ldr	r1, [pc, #40]	; (1000c77c <gpio_init+0x64>)
1000c754:	2028      	movs	r0, #40	; 0x28
1000c756:	47a0      	blx	r4
	system_register_isr(RAM_ISR_TABLE_PORT2_COMB_INDEX, (uint32_t)gpio_port2_isr_handler);
1000c758:	4909      	ldr	r1, [pc, #36]	; (1000c780 <gpio_init+0x68>)
1000c75a:	2029      	movs	r0, #41	; 0x29
1000c75c:	47a0      	blx	r4
}
1000c75e:	bd10      	pop	{r4, pc}
1000c760:	1001a39c 	.word	0x1001a39c
1000c764:	1001a358 	.word	0x1001a358
1000c768:	40010000 	.word	0x40010000
1000c76c:	40011000 	.word	0x40011000
1000c770:	40013000 	.word	0x40013000
1000c774:	1000c021 	.word	0x1000c021
1000c778:	1000d345 	.word	0x1000d345
1000c77c:	1000c085 	.word	0x1000c085
1000c780:	1000c0f5 	.word	0x1000c0f5

1000c784 <system_clock_config>:
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_clock_config(enum system_clock_resource resoure, \
				enum system_clock_freq freq)
{
	switch (resoure) {
1000c784:	2801      	cmp	r0, #1
1000c786:	d00d      	beq.n	1000c7a4 <system_clock_config+0x20>
1000c788:	2800      	cmp	r0, #0
1000c78a:	d002      	beq.n	1000c792 <system_clock_config+0xe>
1000c78c:	2802      	cmp	r0, #2
1000c78e:	d01c      	beq.n	1000c7ca <system_clock_config+0x46>
1000c790:	e02e      	b.n	1000c7f0 <system_clock_config+0x6c>
		case CLOCK_RESOURCE_XO_26_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
1000c792:	4a18      	ldr	r2, [pc, #96]	; (1000c7f4 <system_clock_config+0x70>)
1000c794:	6990      	ldr	r0, [r2, #24]
1000c796:	230c      	movs	r3, #12
1000c798:	4303      	orrs	r3, r0
1000c79a:	6193      	str	r3, [r2, #24]
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_BT26M_CLK | \
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK;
			system_clock_value = 26000000;
1000c79c:	4a16      	ldr	r2, [pc, #88]	; (1000c7f8 <system_clock_config+0x74>)
1000c79e:	4b17      	ldr	r3, [pc, #92]	; (1000c7fc <system_clock_config+0x78>)
1000c7a0:	601a      	str	r2, [r3, #0]
			break;
1000c7a2:	e01a      	b.n	1000c7da <system_clock_config+0x56>

		case CLOCK_RESOURCE_LP_2_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
1000c7a4:	4b13      	ldr	r3, [pc, #76]	; (1000c7f4 <system_clock_config+0x70>)
1000c7a6:	6998      	ldr	r0, [r3, #24]
1000c7a8:	2208      	movs	r2, #8
1000c7aa:	4302      	orrs	r2, r0
1000c7ac:	619a      	str	r2, [r3, #24]
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK;
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg &= \
1000c7ae:	699a      	ldr	r2, [r3, #24]
1000c7b0:	2004      	movs	r0, #4
1000c7b2:	4382      	bics	r2, r0
1000c7b4:	619a      	str	r2, [r3, #24]
					~LPMCU_MISC_REGS_LPMCU_CTRL_USE_BT26M_CLK;
			AON_GP_REGS0->AON_PMU_CTRL.reg |= \
1000c7b6:	4a12      	ldr	r2, [pc, #72]	; (1000c800 <system_clock_config+0x7c>)
1000c7b8:	6853      	ldr	r3, [r2, #4]
1000c7ba:	2080      	movs	r0, #128	; 0x80
1000c7bc:	0300      	lsls	r0, r0, #12
1000c7be:	4303      	orrs	r3, r0
1000c7c0:	6053      	str	r3, [r2, #4]
					AON_GP_REGS_AON_PMU_CTRL_PMU_2MHZ_CLK_EN;
			system_clock_value = 2000000;
1000c7c2:	4a10      	ldr	r2, [pc, #64]	; (1000c804 <system_clock_config+0x80>)
1000c7c4:	4b0d      	ldr	r3, [pc, #52]	; (1000c7fc <system_clock_config+0x78>)
1000c7c6:	601a      	str	r2, [r3, #0]
			break;
1000c7c8:	e007      	b.n	1000c7da <system_clock_config+0x56>

		case CLOCK_RESOURCE_RC_26_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg &= \
1000c7ca:	4a0a      	ldr	r2, [pc, #40]	; (1000c7f4 <system_clock_config+0x70>)
1000c7cc:	6993      	ldr	r3, [r2, #24]
1000c7ce:	200c      	movs	r0, #12
1000c7d0:	4383      	bics	r3, r0
1000c7d2:	6193      	str	r3, [r2, #24]
					~(LPMCU_MISC_REGS_LPMCU_CTRL_USE_BT26M_CLK | \
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK);
			system_clock_value = 26000000;
1000c7d4:	4a08      	ldr	r2, [pc, #32]	; (1000c7f8 <system_clock_config+0x74>)
1000c7d6:	4b09      	ldr	r3, [pc, #36]	; (1000c7fc <system_clock_config+0x78>)
1000c7d8:	601a      	str	r2, [r3, #0]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	LPMCU_MISC_REGS0->LPMCU_CTRL.reg &= \
1000c7da:	4b06      	ldr	r3, [pc, #24]	; (1000c7f4 <system_clock_config+0x70>)
1000c7dc:	699a      	ldr	r2, [r3, #24]
1000c7de:	2003      	movs	r0, #3
1000c7e0:	4382      	bics	r2, r0
1000c7e2:	619a      	str	r2, [r3, #24]
		~LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL_Msk;
	LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
1000c7e4:	699a      	ldr	r2, [r3, #24]
1000c7e6:	4001      	ands	r1, r0
1000c7e8:	4311      	orrs	r1, r2
1000c7ea:	6199      	str	r1, [r3, #24]
		LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL(freq);

	return STATUS_OK;
1000c7ec:	2000      	movs	r0, #0
1000c7ee:	e000      	b.n	1000c7f2 <system_clock_config+0x6e>
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK);
			system_clock_value = 26000000;
			break;

		default:
			return STATUS_ERR_INVALID_ARG;
1000c7f0:	2017      	movs	r0, #23
		~LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL_Msk;
	LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
		LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL(freq);

	return STATUS_OK;
}
1000c7f2:	4770      	bx	lr
1000c7f4:	4000b000 	.word	0x4000b000
1000c7f8:	018cba80 	.word	0x018cba80
1000c7fc:	1001a430 	.word	0x1001a430
1000c800:	4000f000 	.word	0x4000f000
1000c804:	001e8480 	.word	0x001e8480

1000c808 <system_clock_get_value>:
 *
 * \return system clock value.
 */
uint32_t system_clock_get_value(void)
{
	return system_clock_value;
1000c808:	4b01      	ldr	r3, [pc, #4]	; (1000c810 <system_clock_get_value+0x8>)
1000c80a:	6818      	ldr	r0, [r3, #0]
}
1000c80c:	4770      	bx	lr
1000c80e:	46c0      	nop			; (mov r8, r8)
1000c810:	1001a430 	.word	0x1001a430

1000c814 <system_clock_peripheral_enable>:
 * \return Status of operation.
 * \retval STATUS_OK               Clock config correctly
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_clock_peripheral_enable(enum system_peripheral peripheral)
{
1000c814:	b500      	push	{lr}
	switch (peripheral) {
1000c816:	2835      	cmp	r0, #53	; 0x35
1000c818:	d900      	bls.n	1000c81c <system_clock_peripheral_enable+0x8>
1000c81a:	e1a2      	b.n	1000cb62 <system_clock_peripheral_enable+0x34e>
1000c81c:	0080      	lsls	r0, r0, #2
1000c81e:	4bd2      	ldr	r3, [pc, #840]	; (1000cb68 <system_clock_peripheral_enable+0x354>)
1000c820:	581b      	ldr	r3, [r3, r0]
1000c822:	469f      	mov	pc, r3
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c824:	4ad1      	ldr	r2, [pc, #836]	; (1000cb6c <system_clock_peripheral_enable+0x358>)
1000c826:	68d1      	ldr	r1, [r2, #12]
1000c828:	2302      	movs	r3, #2
1000c82a:	430b      	orrs	r3, r1
1000c82c:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c82e:	2000      	movs	r0, #0
{
	switch (peripheral) {
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI_FLASH0_CLK_EN;
		break;
1000c830:	e198      	b.n	1000cb64 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c832:	4ace      	ldr	r2, [pc, #824]	; (1000cb6c <system_clock_peripheral_enable+0x358>)
1000c834:	68d1      	ldr	r1, [r2, #12]
1000c836:	2304      	movs	r3, #4
1000c838:	430b      	orrs	r3, r1
1000c83a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c83c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI0_CORE_CLK_EN;
		break;
1000c83e:	e191      	b.n	1000cb64 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c840:	4aca      	ldr	r2, [pc, #808]	; (1000cb6c <system_clock_peripheral_enable+0x358>)
1000c842:	68d1      	ldr	r1, [r2, #12]
1000c844:	2308      	movs	r3, #8
1000c846:	430b      	orrs	r3, r1
1000c848:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c84a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI1_CORE_CLK_EN;
		break;
1000c84c:	e18a      	b.n	1000cb64 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c84e:	4ac7      	ldr	r2, [pc, #796]	; (1000cb6c <system_clock_peripheral_enable+0x358>)
1000c850:	68d1      	ldr	r1, [r2, #12]
1000c852:	2310      	movs	r3, #16
1000c854:	430b      	orrs	r3, r1
1000c856:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c858:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C0_CORE_CLK_EN;
		break;
1000c85a:	e183      	b.n	1000cb64 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c85c:	4ac3      	ldr	r2, [pc, #780]	; (1000cb6c <system_clock_peripheral_enable+0x358>)
1000c85e:	68d1      	ldr	r1, [r2, #12]
1000c860:	2320      	movs	r3, #32
1000c862:	430b      	orrs	r3, r1
1000c864:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c866:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_DUALTIMER0_CLK_EN;
		break;
1000c868:	e17c      	b.n	1000cb64 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c86a:	4ac0      	ldr	r2, [pc, #768]	; (1000cb6c <system_clock_peripheral_enable+0x358>)
1000c86c:	68d1      	ldr	r1, [r2, #12]
1000c86e:	2380      	movs	r3, #128	; 0x80
1000c870:	430b      	orrs	r3, r1
1000c872:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c874:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_GPIO_CLK_EN;
		break;
1000c876:	e175      	b.n	1000cb64 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c878:	4abc      	ldr	r2, [pc, #752]	; (1000cb6c <system_clock_peripheral_enable+0x358>)
1000c87a:	68d3      	ldr	r3, [r2, #12]
1000c87c:	2180      	movs	r1, #128	; 0x80
1000c87e:	0049      	lsls	r1, r1, #1
1000c880:	430b      	orrs	r3, r1
1000c882:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c884:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_TIMER0_CLK_EN;
		break;
1000c886:	e16d      	b.n	1000cb64 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c888:	4ab8      	ldr	r2, [pc, #736]	; (1000cb6c <system_clock_peripheral_enable+0x358>)
1000c88a:	68d3      	ldr	r3, [r2, #12]
1000c88c:	2180      	movs	r1, #128	; 0x80
1000c88e:	0109      	lsls	r1, r1, #4
1000c890:	430b      	orrs	r3, r1
1000c892:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c894:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WDT0_CLK_EN;
		break;
1000c896:	e165      	b.n	1000cb64 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c898:	4ab4      	ldr	r2, [pc, #720]	; (1000cb6c <system_clock_peripheral_enable+0x358>)
1000c89a:	68d3      	ldr	r3, [r2, #12]
1000c89c:	2180      	movs	r1, #128	; 0x80
1000c89e:	0149      	lsls	r1, r1, #5
1000c8a0:	430b      	orrs	r3, r1
1000c8a2:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c8a4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WDT1_CLK_EN;
		break;
1000c8a6:	e15d      	b.n	1000cb64 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c8a8:	4ab0      	ldr	r2, [pc, #704]	; (1000cb6c <system_clock_peripheral_enable+0x358>)
1000c8aa:	68d3      	ldr	r3, [r2, #12]
1000c8ac:	2180      	movs	r1, #128	; 0x80
1000c8ae:	0189      	lsls	r1, r1, #6
1000c8b0:	430b      	orrs	r3, r1
1000c8b2:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c8b4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART0_CORE_CLK_EN;
		break;
1000c8b6:	e155      	b.n	1000cb64 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c8b8:	4aac      	ldr	r2, [pc, #688]	; (1000cb6c <system_clock_peripheral_enable+0x358>)
1000c8ba:	68d3      	ldr	r3, [r2, #12]
1000c8bc:	2180      	movs	r1, #128	; 0x80
1000c8be:	01c9      	lsls	r1, r1, #7
1000c8c0:	430b      	orrs	r3, r1
1000c8c2:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c8c4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART0_IF_CLK_EN;
		break;
1000c8c6:	e14d      	b.n	1000cb64 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c8c8:	4aa8      	ldr	r2, [pc, #672]	; (1000cb6c <system_clock_peripheral_enable+0x358>)
1000c8ca:	68d3      	ldr	r3, [r2, #12]
1000c8cc:	2180      	movs	r1, #128	; 0x80
1000c8ce:	0209      	lsls	r1, r1, #8
1000c8d0:	430b      	orrs	r3, r1
1000c8d2:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c8d4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART1_CORE_CLK_EN;
		break;
1000c8d6:	e145      	b.n	1000cb64 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c8d8:	4aa4      	ldr	r2, [pc, #656]	; (1000cb6c <system_clock_peripheral_enable+0x358>)
1000c8da:	68d3      	ldr	r3, [r2, #12]
1000c8dc:	2180      	movs	r1, #128	; 0x80
1000c8de:	0249      	lsls	r1, r1, #9
1000c8e0:	430b      	orrs	r3, r1
1000c8e2:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c8e4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART1_IF_CLK_EN;
		break;
1000c8e6:	e13d      	b.n	1000cb64 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c8e8:	4aa0      	ldr	r2, [pc, #640]	; (1000cb6c <system_clock_peripheral_enable+0x358>)
1000c8ea:	68d3      	ldr	r3, [r2, #12]
1000c8ec:	2180      	movs	r1, #128	; 0x80
1000c8ee:	0289      	lsls	r1, r1, #10
1000c8f0:	430b      	orrs	r3, r1
1000c8f2:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c8f4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IRQ_CTRLR_CORE_CLK_EN;
		break;
1000c8f6:	e135      	b.n	1000cb64 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c8f8:	4a9c      	ldr	r2, [pc, #624]	; (1000cb6c <system_clock_peripheral_enable+0x358>)
1000c8fa:	68d3      	ldr	r3, [r2, #12]
1000c8fc:	2180      	movs	r1, #128	; 0x80
1000c8fe:	02c9      	lsls	r1, r1, #11
1000c900:	430b      	orrs	r3, r1
1000c902:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c904:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_1_GL_MEM_CLK_EN;
		break;
1000c906:	e12d      	b.n	1000cb64 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c908:	4a98      	ldr	r2, [pc, #608]	; (1000cb6c <system_clock_peripheral_enable+0x358>)
1000c90a:	68d3      	ldr	r3, [r2, #12]
1000c90c:	2180      	movs	r1, #128	; 0x80
1000c90e:	0309      	lsls	r1, r1, #12
1000c910:	430b      	orrs	r3, r1
1000c912:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c914:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_2_GL_MEM_CLK_EN;
		break;
1000c916:	e125      	b.n	1000cb64 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c918:	4a94      	ldr	r2, [pc, #592]	; (1000cb6c <system_clock_peripheral_enable+0x358>)
1000c91a:	68d3      	ldr	r3, [r2, #12]
1000c91c:	2180      	movs	r1, #128	; 0x80
1000c91e:	0349      	lsls	r1, r1, #13
1000c920:	430b      	orrs	r3, r1
1000c922:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c924:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ROM_MEM_CLK_EN;
		break;
1000c926:	e11d      	b.n	1000cb64 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c928:	4a90      	ldr	r2, [pc, #576]	; (1000cb6c <system_clock_peripheral_enable+0x358>)
1000c92a:	68d3      	ldr	r3, [r2, #12]
1000c92c:	2180      	movs	r1, #128	; 0x80
1000c92e:	0389      	lsls	r1, r1, #14
1000c930:	430b      	orrs	r3, r1
1000c932:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c934:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_XBAR_IF_CLK_EN;
		break;
1000c936:	e115      	b.n	1000cb64 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c938:	4a8c      	ldr	r2, [pc, #560]	; (1000cb6c <system_clock_peripheral_enable+0x358>)
1000c93a:	68d3      	ldr	r3, [r2, #12]
1000c93c:	2180      	movs	r1, #128	; 0x80
1000c93e:	03c9      	lsls	r1, r1, #15
1000c940:	430b      	orrs	r3, r1
1000c942:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c944:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_AON_WRAPPER_CLK_EN;
		break;
1000c946:	e10d      	b.n	1000cb64 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c948:	4a88      	ldr	r2, [pc, #544]	; (1000cb6c <system_clock_peripheral_enable+0x358>)
1000c94a:	68d3      	ldr	r3, [r2, #12]
1000c94c:	2180      	movs	r1, #128	; 0x80
1000c94e:	0409      	lsls	r1, r1, #16
1000c950:	430b      	orrs	r3, r1
1000c952:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c954:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLK_EN;
		break;
1000c956:	e105      	b.n	1000cb64 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c958:	4a84      	ldr	r2, [pc, #528]	; (1000cb6c <system_clock_peripheral_enable+0x358>)
1000c95a:	68d3      	ldr	r3, [r2, #12]
1000c95c:	2180      	movs	r1, #128	; 0x80
1000c95e:	0449      	lsls	r1, r1, #17
1000c960:	430b      	orrs	r3, r1
1000c962:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c964:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLKG_EN;
		break;
1000c966:	e0fd      	b.n	1000cb64 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c968:	4a80      	ldr	r2, [pc, #512]	; (1000cb6c <system_clock_peripheral_enable+0x358>)
1000c96a:	68d3      	ldr	r3, [r2, #12]
1000c96c:	2180      	movs	r1, #128	; 0x80
1000c96e:	0489      	lsls	r1, r1, #18
1000c970:	430b      	orrs	r3, r1
1000c972:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c974:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_BLE_MEM_CLK_EN;
		break;
1000c976:	e0f5      	b.n	1000cb64 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c978:	4a7c      	ldr	r2, [pc, #496]	; (1000cb6c <system_clock_peripheral_enable+0x358>)
1000c97a:	68d3      	ldr	r3, [r2, #12]
1000c97c:	2180      	movs	r1, #128	; 0x80
1000c97e:	04c9      	lsls	r1, r1, #19
1000c980:	430b      	orrs	r3, r1
1000c982:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c984:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC0_CLK_EN;
		break;
1000c986:	e0ed      	b.n	1000cb64 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c988:	4a78      	ldr	r2, [pc, #480]	; (1000cb6c <system_clock_peripheral_enable+0x358>)
1000c98a:	68d3      	ldr	r3, [r2, #12]
1000c98c:	2180      	movs	r1, #128	; 0x80
1000c98e:	0509      	lsls	r1, r1, #20
1000c990:	430b      	orrs	r3, r1
1000c992:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c994:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC1_CLK_EN;
		break;
1000c996:	e0e5      	b.n	1000cb64 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c998:	4a74      	ldr	r2, [pc, #464]	; (1000cb6c <system_clock_peripheral_enable+0x358>)
1000c99a:	68d3      	ldr	r3, [r2, #12]
1000c99c:	2180      	movs	r1, #128	; 0x80
1000c99e:	0549      	lsls	r1, r1, #21
1000c9a0:	430b      	orrs	r3, r1
1000c9a2:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c9a4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC2_CLK_EN;
		break;
1000c9a6:	e0dd      	b.n	1000cb64 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c9a8:	4a70      	ldr	r2, [pc, #448]	; (1000cb6c <system_clock_peripheral_enable+0x358>)
1000c9aa:	68d3      	ldr	r3, [r2, #12]
1000c9ac:	2180      	movs	r1, #128	; 0x80
1000c9ae:	0589      	lsls	r1, r1, #22
1000c9b0:	430b      	orrs	r3, r1
1000c9b2:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c9b4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C1_CORE_CLK_EN;
		break;
1000c9b6:	e0d5      	b.n	1000cb64 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c9b8:	4a6c      	ldr	r2, [pc, #432]	; (1000cb6c <system_clock_peripheral_enable+0x358>)
1000c9ba:	68d3      	ldr	r3, [r2, #12]
1000c9bc:	2180      	movs	r1, #128	; 0x80
1000c9be:	05c9      	lsls	r1, r1, #23
1000c9c0:	430b      	orrs	r3, r1
1000c9c2:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c9c4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_CLK_EN;
		break;
1000c9c6:	e0cd      	b.n	1000cb64 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c9c8:	4a68      	ldr	r2, [pc, #416]	; (1000cb6c <system_clock_peripheral_enable+0x358>)
1000c9ca:	6911      	ldr	r1, [r2, #16]
1000c9cc:	2301      	movs	r3, #1
1000c9ce:	430b      	orrs	r3, r1
1000c9d0:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c9d2:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE0_CLK_EN;
		break;
1000c9d4:	e0c6      	b.n	1000cb64 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c9d6:	4a65      	ldr	r2, [pc, #404]	; (1000cb6c <system_clock_peripheral_enable+0x358>)
1000c9d8:	6911      	ldr	r1, [r2, #16]
1000c9da:	2302      	movs	r3, #2
1000c9dc:	430b      	orrs	r3, r1
1000c9de:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c9e0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE1_CLK_EN;
		break;
1000c9e2:	e0bf      	b.n	1000cb64 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c9e4:	4a61      	ldr	r2, [pc, #388]	; (1000cb6c <system_clock_peripheral_enable+0x358>)
1000c9e6:	6911      	ldr	r1, [r2, #16]
1000c9e8:	2304      	movs	r3, #4
1000c9ea:	430b      	orrs	r3, r1
1000c9ec:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c9ee:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE2_CLK_EN;
		break;
1000c9f0:	e0b8      	b.n	1000cb64 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c9f2:	4a5e      	ldr	r2, [pc, #376]	; (1000cb6c <system_clock_peripheral_enable+0x358>)
1000c9f4:	6911      	ldr	r1, [r2, #16]
1000c9f6:	2308      	movs	r3, #8
1000c9f8:	430b      	orrs	r3, r1
1000c9fa:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c9fc:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE3_CLK_EN;
		break;
1000c9fe:	e0b1      	b.n	1000cb64 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000ca00:	4a5a      	ldr	r2, [pc, #360]	; (1000cb6c <system_clock_peripheral_enable+0x358>)
1000ca02:	6911      	ldr	r1, [r2, #16]
1000ca04:	2310      	movs	r3, #16
1000ca06:	430b      	orrs	r3, r1
1000ca08:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ca0a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE4_CLK_EN;
		break;
1000ca0c:	e0aa      	b.n	1000cb64 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000ca0e:	4a57      	ldr	r2, [pc, #348]	; (1000cb6c <system_clock_peripheral_enable+0x358>)
1000ca10:	6911      	ldr	r1, [r2, #16]
1000ca12:	2320      	movs	r3, #32
1000ca14:	430b      	orrs	r3, r1
1000ca16:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ca18:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE5_CLK_EN;
		break;
1000ca1a:	e0a3      	b.n	1000cb64 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000ca1c:	4a53      	ldr	r2, [pc, #332]	; (1000cb6c <system_clock_peripheral_enable+0x358>)
1000ca1e:	6911      	ldr	r1, [r2, #16]
1000ca20:	2340      	movs	r3, #64	; 0x40
1000ca22:	430b      	orrs	r3, r1
1000ca24:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ca26:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM0_CLK_EN;
		break;
1000ca28:	e09c      	b.n	1000cb64 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000ca2a:	4a50      	ldr	r2, [pc, #320]	; (1000cb6c <system_clock_peripheral_enable+0x358>)
1000ca2c:	6911      	ldr	r1, [r2, #16]
1000ca2e:	2380      	movs	r3, #128	; 0x80
1000ca30:	430b      	orrs	r3, r1
1000ca32:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ca34:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM1_CLK_EN;
		break;
1000ca36:	e095      	b.n	1000cb64 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000ca38:	4a4c      	ldr	r2, [pc, #304]	; (1000cb6c <system_clock_peripheral_enable+0x358>)
1000ca3a:	6913      	ldr	r3, [r2, #16]
1000ca3c:	2180      	movs	r1, #128	; 0x80
1000ca3e:	0049      	lsls	r1, r1, #1
1000ca40:	430b      	orrs	r3, r1
1000ca42:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ca44:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM2_CLK_EN;
		break;
1000ca46:	e08d      	b.n	1000cb64 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000ca48:	4a48      	ldr	r2, [pc, #288]	; (1000cb6c <system_clock_peripheral_enable+0x358>)
1000ca4a:	6913      	ldr	r3, [r2, #16]
1000ca4c:	2180      	movs	r1, #128	; 0x80
1000ca4e:	0089      	lsls	r1, r1, #2
1000ca50:	430b      	orrs	r3, r1
1000ca52:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ca54:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM3_CLK_EN;
		break;
1000ca56:	e085      	b.n	1000cb64 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000ca58:	4a44      	ldr	r2, [pc, #272]	; (1000cb6c <system_clock_peripheral_enable+0x358>)
1000ca5a:	6913      	ldr	r3, [r2, #16]
1000ca5c:	2180      	movs	r1, #128	; 0x80
1000ca5e:	00c9      	lsls	r1, r1, #3
1000ca60:	430b      	orrs	r3, r1
1000ca62:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ca64:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SENS_ADC_CLK_EN;
		break;
1000ca66:	e07d      	b.n	1000cb64 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000ca68:	4a40      	ldr	r2, [pc, #256]	; (1000cb6c <system_clock_peripheral_enable+0x358>)
1000ca6a:	6913      	ldr	r3, [r2, #16]
1000ca6c:	2180      	movs	r1, #128	; 0x80
1000ca6e:	0109      	lsls	r1, r1, #4
1000ca70:	430b      	orrs	r3, r1
1000ca72:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ca74:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI0_SCK_PHASE_INT_CLK_EN;
		break;
1000ca76:	e075      	b.n	1000cb64 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000ca78:	4a3c      	ldr	r2, [pc, #240]	; (1000cb6c <system_clock_peripheral_enable+0x358>)
1000ca7a:	6913      	ldr	r3, [r2, #16]
1000ca7c:	2180      	movs	r1, #128	; 0x80
1000ca7e:	0149      	lsls	r1, r1, #5
1000ca80:	430b      	orrs	r3, r1
1000ca82:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ca84:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI1_SCK_PHASE_INT_CLK_EN;
		break;
1000ca86:	e06d      	b.n	1000cb64 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000ca88:	4a38      	ldr	r2, [pc, #224]	; (1000cb6c <system_clock_peripheral_enable+0x358>)
1000ca8a:	6913      	ldr	r3, [r2, #16]
1000ca8c:	2180      	movs	r1, #128	; 0x80
1000ca8e:	0189      	lsls	r1, r1, #6
1000ca90:	430b      	orrs	r3, r1
1000ca92:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ca94:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_GPIO_GCLK_EN;
		break;
1000ca96:	e065      	b.n	1000cb64 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000ca98:	4a34      	ldr	r2, [pc, #208]	; (1000cb6c <system_clock_peripheral_enable+0x358>)
1000ca9a:	6913      	ldr	r3, [r2, #16]
1000ca9c:	2180      	movs	r1, #128	; 0x80
1000ca9e:	01c9      	lsls	r1, r1, #7
1000caa0:	430b      	orrs	r3, r1
1000caa2:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000caa4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_TIMER0_PGCLK_EN;
		break;
1000caa6:	e05d      	b.n	1000cb64 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000caa8:	4a30      	ldr	r2, [pc, #192]	; (1000cb6c <system_clock_peripheral_enable+0x358>)
1000caaa:	6913      	ldr	r3, [r2, #16]
1000caac:	2180      	movs	r1, #128	; 0x80
1000caae:	0209      	lsls	r1, r1, #8
1000cab0:	430b      	orrs	r3, r1
1000cab2:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cab4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_CORE_CLK_EN;
		break;
1000cab6:	e055      	b.n	1000cb64 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000cab8:	4a2c      	ldr	r2, [pc, #176]	; (1000cb6c <system_clock_peripheral_enable+0x358>)
1000caba:	6913      	ldr	r3, [r2, #16]
1000cabc:	2180      	movs	r1, #128	; 0x80
1000cabe:	0249      	lsls	r1, r1, #9
1000cac0:	430b      	orrs	r3, r1
1000cac2:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cac4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_AHB_CLK_EN;
		break;
1000cac6:	e04d      	b.n	1000cb64 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000cac8:	4a28      	ldr	r2, [pc, #160]	; (1000cb6c <system_clock_peripheral_enable+0x358>)
1000caca:	6913      	ldr	r3, [r2, #16]
1000cacc:	2180      	movs	r1, #128	; 0x80
1000cace:	0289      	lsls	r1, r1, #10
1000cad0:	430b      	orrs	r3, r1
1000cad2:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cad4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_CORE_CLK_EN;
		break;
1000cad6:	e045      	b.n	1000cb64 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000cad8:	4a24      	ldr	r2, [pc, #144]	; (1000cb6c <system_clock_peripheral_enable+0x358>)
1000cada:	6913      	ldr	r3, [r2, #16]
1000cadc:	2180      	movs	r1, #128	; 0x80
1000cade:	02c9      	lsls	r1, r1, #11
1000cae0:	430b      	orrs	r3, r1
1000cae2:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cae4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_AHB_CLK_EN;
		break;
1000cae6:	e03d      	b.n	1000cb64 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000cae8:	4a20      	ldr	r2, [pc, #128]	; (1000cb6c <system_clock_peripheral_enable+0x358>)
1000caea:	6913      	ldr	r3, [r2, #16]
1000caec:	2180      	movs	r1, #128	; 0x80
1000caee:	0309      	lsls	r1, r1, #12
1000caf0:	430b      	orrs	r3, r1
1000caf2:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000caf4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_0_MEM_CLK_EN;
		break;
1000caf6:	e035      	b.n	1000cb64 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000caf8:	4a1c      	ldr	r2, [pc, #112]	; (1000cb6c <system_clock_peripheral_enable+0x358>)
1000cafa:	6913      	ldr	r3, [r2, #16]
1000cafc:	2180      	movs	r1, #128	; 0x80
1000cafe:	0349      	lsls	r1, r1, #13
1000cb00:	430b      	orrs	r3, r1
1000cb02:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cb04:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_1_MEM_CLK_EN;
		break;
1000cb06:	e02d      	b.n	1000cb64 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000cb08:	4a18      	ldr	r2, [pc, #96]	; (1000cb6c <system_clock_peripheral_enable+0x358>)
1000cb0a:	6913      	ldr	r3, [r2, #16]
1000cb0c:	2180      	movs	r1, #128	; 0x80
1000cb0e:	0389      	lsls	r1, r1, #14
1000cb10:	430b      	orrs	r3, r1
1000cb12:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cb14:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_2_MEM_CLK_EN;
		break;
1000cb16:	e025      	b.n	1000cb64 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000cb18:	4a14      	ldr	r2, [pc, #80]	; (1000cb6c <system_clock_peripheral_enable+0x358>)
1000cb1a:	6913      	ldr	r3, [r2, #16]
1000cb1c:	2180      	movs	r1, #128	; 0x80
1000cb1e:	03c9      	lsls	r1, r1, #15
1000cb20:	430b      	orrs	r3, r1
1000cb22:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cb24:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_0_MEM_CLK_EN;
		break;
1000cb26:	e01d      	b.n	1000cb64 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000cb28:	4a10      	ldr	r2, [pc, #64]	; (1000cb6c <system_clock_peripheral_enable+0x358>)
1000cb2a:	6913      	ldr	r3, [r2, #16]
1000cb2c:	2180      	movs	r1, #128	; 0x80
1000cb2e:	0409      	lsls	r1, r1, #16
1000cb30:	430b      	orrs	r3, r1
1000cb32:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cb34:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_1_MEM_CLK_EN;
		break;
1000cb36:	e015      	b.n	1000cb64 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
1000cb38:	4a0c      	ldr	r2, [pc, #48]	; (1000cb6c <system_clock_peripheral_enable+0x358>)
1000cb3a:	7d11      	ldrb	r1, [r2, #20]
1000cb3c:	2301      	movs	r3, #1
1000cb3e:	430b      	orrs	r3, r1
1000cb40:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cb42:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CTRL_RXTX_SEQ_CLK_EN;
		break;
1000cb44:	e00e      	b.n	1000cb64 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
1000cb46:	4a09      	ldr	r2, [pc, #36]	; (1000cb6c <system_clock_peripheral_enable+0x358>)
1000cb48:	7d11      	ldrb	r1, [r2, #20]
1000cb4a:	2302      	movs	r3, #2
1000cb4c:	430b      	orrs	r3, r1
1000cb4e:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cb50:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CTRL_AHB_CLK_EN;
		break;
1000cb52:	e007      	b.n	1000cb64 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
1000cb54:	4a05      	ldr	r2, [pc, #20]	; (1000cb6c <system_clock_peripheral_enable+0x358>)
1000cb56:	7d11      	ldrb	r1, [r2, #20]
1000cb58:	2304      	movs	r3, #4
1000cb5a:	430b      	orrs	r3, r1
1000cb5c:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cb5e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CTRL_PERIPH_REGS_CLK_EN;
		break;
1000cb60:	e000      	b.n	1000cb64 <system_clock_peripheral_enable+0x350>

		default:
			return STATUS_ERR_INVALID_ARG;
1000cb62:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
1000cb64:	bd00      	pop	{pc}
1000cb66:	46c0      	nop			; (mov r8, r8)
1000cb68:	10017404 	.word	0x10017404
1000cb6c:	4000b000 	.word	0x4000b000

1000cb70 <system_clock_peripheral_disable>:
 * \return Status of operation.
 * \retval STATUS_OK               Clock config correctly
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_clock_peripheral_disable(enum system_peripheral peripheral)
{
1000cb70:	b500      	push	{lr}
	switch (peripheral) {
1000cb72:	2835      	cmp	r0, #53	; 0x35
1000cb74:	d900      	bls.n	1000cb78 <system_clock_peripheral_disable+0x8>
1000cb76:	e17d      	b.n	1000ce74 <system_clock_peripheral_disable+0x304>
1000cb78:	0080      	lsls	r0, r0, #2
1000cb7a:	4bbf      	ldr	r3, [pc, #764]	; (1000ce78 <system_clock_peripheral_disable+0x308>)
1000cb7c:	581b      	ldr	r3, [r3, r0]
1000cb7e:	469f      	mov	pc, r3
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000cb80:	4abe      	ldr	r2, [pc, #760]	; (1000ce7c <system_clock_peripheral_disable+0x30c>)
1000cb82:	68d3      	ldr	r3, [r2, #12]
1000cb84:	2102      	movs	r1, #2
1000cb86:	438b      	bics	r3, r1
1000cb88:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cb8a:	2000      	movs	r0, #0
{
	switch (peripheral) {
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI_FLASH0_CLK_EN;
		break;
1000cb8c:	e173      	b.n	1000ce76 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000cb8e:	4abb      	ldr	r2, [pc, #748]	; (1000ce7c <system_clock_peripheral_disable+0x30c>)
1000cb90:	68d3      	ldr	r3, [r2, #12]
1000cb92:	2104      	movs	r1, #4
1000cb94:	438b      	bics	r3, r1
1000cb96:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cb98:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI0_CORE_CLK_EN;
		break;
1000cb9a:	e16c      	b.n	1000ce76 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000cb9c:	4ab7      	ldr	r2, [pc, #732]	; (1000ce7c <system_clock_peripheral_disable+0x30c>)
1000cb9e:	68d3      	ldr	r3, [r2, #12]
1000cba0:	2108      	movs	r1, #8
1000cba2:	438b      	bics	r3, r1
1000cba4:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cba6:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI1_CORE_CLK_EN;
		break;
1000cba8:	e165      	b.n	1000ce76 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000cbaa:	4ab4      	ldr	r2, [pc, #720]	; (1000ce7c <system_clock_peripheral_disable+0x30c>)
1000cbac:	68d3      	ldr	r3, [r2, #12]
1000cbae:	2110      	movs	r1, #16
1000cbb0:	438b      	bics	r3, r1
1000cbb2:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cbb4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C0_CORE_CLK_EN;
		break;
1000cbb6:	e15e      	b.n	1000ce76 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000cbb8:	4ab0      	ldr	r2, [pc, #704]	; (1000ce7c <system_clock_peripheral_disable+0x30c>)
1000cbba:	68d3      	ldr	r3, [r2, #12]
1000cbbc:	2120      	movs	r1, #32
1000cbbe:	438b      	bics	r3, r1
1000cbc0:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cbc2:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_DUALTIMER0_CLK_EN;
		break;
1000cbc4:	e157      	b.n	1000ce76 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000cbc6:	4aad      	ldr	r2, [pc, #692]	; (1000ce7c <system_clock_peripheral_disable+0x30c>)
1000cbc8:	68d3      	ldr	r3, [r2, #12]
1000cbca:	2180      	movs	r1, #128	; 0x80
1000cbcc:	438b      	bics	r3, r1
1000cbce:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cbd0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_GPIO_CLK_EN;
		break;
1000cbd2:	e150      	b.n	1000ce76 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000cbd4:	4aa9      	ldr	r2, [pc, #676]	; (1000ce7c <system_clock_peripheral_disable+0x30c>)
1000cbd6:	68d1      	ldr	r1, [r2, #12]
1000cbd8:	4ba9      	ldr	r3, [pc, #676]	; (1000ce80 <system_clock_peripheral_disable+0x310>)
1000cbda:	400b      	ands	r3, r1
1000cbdc:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cbde:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_TIMER0_CLK_EN;
		break;
1000cbe0:	e149      	b.n	1000ce76 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000cbe2:	4aa6      	ldr	r2, [pc, #664]	; (1000ce7c <system_clock_peripheral_disable+0x30c>)
1000cbe4:	68d1      	ldr	r1, [r2, #12]
1000cbe6:	4ba7      	ldr	r3, [pc, #668]	; (1000ce84 <system_clock_peripheral_disable+0x314>)
1000cbe8:	400b      	ands	r3, r1
1000cbea:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cbec:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WDT0_CLK_EN;
		break;
1000cbee:	e142      	b.n	1000ce76 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000cbf0:	4aa2      	ldr	r2, [pc, #648]	; (1000ce7c <system_clock_peripheral_disable+0x30c>)
1000cbf2:	68d1      	ldr	r1, [r2, #12]
1000cbf4:	4ba4      	ldr	r3, [pc, #656]	; (1000ce88 <system_clock_peripheral_disable+0x318>)
1000cbf6:	400b      	ands	r3, r1
1000cbf8:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cbfa:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WDT1_CLK_EN;
		break;
1000cbfc:	e13b      	b.n	1000ce76 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000cbfe:	4a9f      	ldr	r2, [pc, #636]	; (1000ce7c <system_clock_peripheral_disable+0x30c>)
1000cc00:	68d1      	ldr	r1, [r2, #12]
1000cc02:	4ba2      	ldr	r3, [pc, #648]	; (1000ce8c <system_clock_peripheral_disable+0x31c>)
1000cc04:	400b      	ands	r3, r1
1000cc06:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cc08:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART0_CORE_CLK_EN;
		break;
1000cc0a:	e134      	b.n	1000ce76 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000cc0c:	4a9b      	ldr	r2, [pc, #620]	; (1000ce7c <system_clock_peripheral_disable+0x30c>)
1000cc0e:	68d1      	ldr	r1, [r2, #12]
1000cc10:	4b9f      	ldr	r3, [pc, #636]	; (1000ce90 <system_clock_peripheral_disable+0x320>)
1000cc12:	400b      	ands	r3, r1
1000cc14:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cc16:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART0_IF_CLK_EN;
		break;
1000cc18:	e12d      	b.n	1000ce76 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000cc1a:	4a98      	ldr	r2, [pc, #608]	; (1000ce7c <system_clock_peripheral_disable+0x30c>)
1000cc1c:	68d1      	ldr	r1, [r2, #12]
1000cc1e:	4b9d      	ldr	r3, [pc, #628]	; (1000ce94 <system_clock_peripheral_disable+0x324>)
1000cc20:	400b      	ands	r3, r1
1000cc22:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cc24:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART1_CORE_CLK_EN;
		break;
1000cc26:	e126      	b.n	1000ce76 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000cc28:	4a94      	ldr	r2, [pc, #592]	; (1000ce7c <system_clock_peripheral_disable+0x30c>)
1000cc2a:	68d1      	ldr	r1, [r2, #12]
1000cc2c:	4b9a      	ldr	r3, [pc, #616]	; (1000ce98 <system_clock_peripheral_disable+0x328>)
1000cc2e:	400b      	ands	r3, r1
1000cc30:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cc32:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART1_IF_CLK_EN;
		break;
1000cc34:	e11f      	b.n	1000ce76 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000cc36:	4a91      	ldr	r2, [pc, #580]	; (1000ce7c <system_clock_peripheral_disable+0x30c>)
1000cc38:	68d1      	ldr	r1, [r2, #12]
1000cc3a:	4b98      	ldr	r3, [pc, #608]	; (1000ce9c <system_clock_peripheral_disable+0x32c>)
1000cc3c:	400b      	ands	r3, r1
1000cc3e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cc40:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IRQ_CTRLR_CORE_CLK_EN;
		break;
1000cc42:	e118      	b.n	1000ce76 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000cc44:	4a8d      	ldr	r2, [pc, #564]	; (1000ce7c <system_clock_peripheral_disable+0x30c>)
1000cc46:	68d1      	ldr	r1, [r2, #12]
1000cc48:	4b95      	ldr	r3, [pc, #596]	; (1000cea0 <system_clock_peripheral_disable+0x330>)
1000cc4a:	400b      	ands	r3, r1
1000cc4c:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cc4e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_1_GL_MEM_CLK_EN;
		break;
1000cc50:	e111      	b.n	1000ce76 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000cc52:	4a8a      	ldr	r2, [pc, #552]	; (1000ce7c <system_clock_peripheral_disable+0x30c>)
1000cc54:	68d1      	ldr	r1, [r2, #12]
1000cc56:	4b93      	ldr	r3, [pc, #588]	; (1000cea4 <system_clock_peripheral_disable+0x334>)
1000cc58:	400b      	ands	r3, r1
1000cc5a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cc5c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_2_GL_MEM_CLK_EN;
		break;
1000cc5e:	e10a      	b.n	1000ce76 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000cc60:	4a86      	ldr	r2, [pc, #536]	; (1000ce7c <system_clock_peripheral_disable+0x30c>)
1000cc62:	68d1      	ldr	r1, [r2, #12]
1000cc64:	4b90      	ldr	r3, [pc, #576]	; (1000cea8 <system_clock_peripheral_disable+0x338>)
1000cc66:	400b      	ands	r3, r1
1000cc68:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cc6a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ROM_MEM_CLK_EN;
		break;
1000cc6c:	e103      	b.n	1000ce76 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000cc6e:	4a83      	ldr	r2, [pc, #524]	; (1000ce7c <system_clock_peripheral_disable+0x30c>)
1000cc70:	68d1      	ldr	r1, [r2, #12]
1000cc72:	4b8e      	ldr	r3, [pc, #568]	; (1000ceac <system_clock_peripheral_disable+0x33c>)
1000cc74:	400b      	ands	r3, r1
1000cc76:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cc78:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_XBAR_IF_CLK_EN;
		break;
1000cc7a:	e0fc      	b.n	1000ce76 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000cc7c:	4a7f      	ldr	r2, [pc, #508]	; (1000ce7c <system_clock_peripheral_disable+0x30c>)
1000cc7e:	68d1      	ldr	r1, [r2, #12]
1000cc80:	4b8b      	ldr	r3, [pc, #556]	; (1000ceb0 <system_clock_peripheral_disable+0x340>)
1000cc82:	400b      	ands	r3, r1
1000cc84:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cc86:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_AON_WRAPPER_CLK_EN;
		break;
1000cc88:	e0f5      	b.n	1000ce76 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000cc8a:	4a7c      	ldr	r2, [pc, #496]	; (1000ce7c <system_clock_peripheral_disable+0x30c>)
1000cc8c:	68d1      	ldr	r1, [r2, #12]
1000cc8e:	4b89      	ldr	r3, [pc, #548]	; (1000ceb4 <system_clock_peripheral_disable+0x344>)
1000cc90:	400b      	ands	r3, r1
1000cc92:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cc94:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLK_EN;
		break;
1000cc96:	e0ee      	b.n	1000ce76 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000cc98:	4a78      	ldr	r2, [pc, #480]	; (1000ce7c <system_clock_peripheral_disable+0x30c>)
1000cc9a:	68d1      	ldr	r1, [r2, #12]
1000cc9c:	4b86      	ldr	r3, [pc, #536]	; (1000ceb8 <system_clock_peripheral_disable+0x348>)
1000cc9e:	400b      	ands	r3, r1
1000cca0:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cca2:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLKG_EN;
		break;
1000cca4:	e0e7      	b.n	1000ce76 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000cca6:	4a75      	ldr	r2, [pc, #468]	; (1000ce7c <system_clock_peripheral_disable+0x30c>)
1000cca8:	68d1      	ldr	r1, [r2, #12]
1000ccaa:	4b84      	ldr	r3, [pc, #528]	; (1000cebc <system_clock_peripheral_disable+0x34c>)
1000ccac:	400b      	ands	r3, r1
1000ccae:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ccb0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_BLE_MEM_CLK_EN;
		break;
1000ccb2:	e0e0      	b.n	1000ce76 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000ccb4:	4a71      	ldr	r2, [pc, #452]	; (1000ce7c <system_clock_peripheral_disable+0x30c>)
1000ccb6:	68d1      	ldr	r1, [r2, #12]
1000ccb8:	4b81      	ldr	r3, [pc, #516]	; (1000cec0 <system_clock_peripheral_disable+0x350>)
1000ccba:	400b      	ands	r3, r1
1000ccbc:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ccbe:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC0_CLK_EN;
		break;
1000ccc0:	e0d9      	b.n	1000ce76 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000ccc2:	4a6e      	ldr	r2, [pc, #440]	; (1000ce7c <system_clock_peripheral_disable+0x30c>)
1000ccc4:	68d1      	ldr	r1, [r2, #12]
1000ccc6:	4b7f      	ldr	r3, [pc, #508]	; (1000cec4 <system_clock_peripheral_disable+0x354>)
1000ccc8:	400b      	ands	r3, r1
1000ccca:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cccc:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC1_CLK_EN;
		break;
1000ccce:	e0d2      	b.n	1000ce76 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000ccd0:	4a6a      	ldr	r2, [pc, #424]	; (1000ce7c <system_clock_peripheral_disable+0x30c>)
1000ccd2:	68d1      	ldr	r1, [r2, #12]
1000ccd4:	4b7c      	ldr	r3, [pc, #496]	; (1000cec8 <system_clock_peripheral_disable+0x358>)
1000ccd6:	400b      	ands	r3, r1
1000ccd8:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ccda:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC2_CLK_EN;
		break;
1000ccdc:	e0cb      	b.n	1000ce76 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000ccde:	4a67      	ldr	r2, [pc, #412]	; (1000ce7c <system_clock_peripheral_disable+0x30c>)
1000cce0:	68d1      	ldr	r1, [r2, #12]
1000cce2:	4b7a      	ldr	r3, [pc, #488]	; (1000cecc <system_clock_peripheral_disable+0x35c>)
1000cce4:	400b      	ands	r3, r1
1000cce6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cce8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C1_CORE_CLK_EN;
		break;
1000ccea:	e0c4      	b.n	1000ce76 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000ccec:	4a63      	ldr	r2, [pc, #396]	; (1000ce7c <system_clock_peripheral_disable+0x30c>)
1000ccee:	68d1      	ldr	r1, [r2, #12]
1000ccf0:	4b77      	ldr	r3, [pc, #476]	; (1000ced0 <system_clock_peripheral_disable+0x360>)
1000ccf2:	400b      	ands	r3, r1
1000ccf4:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ccf6:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_CLK_EN;
		break;
1000ccf8:	e0bd      	b.n	1000ce76 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000ccfa:	4a60      	ldr	r2, [pc, #384]	; (1000ce7c <system_clock_peripheral_disable+0x30c>)
1000ccfc:	6913      	ldr	r3, [r2, #16]
1000ccfe:	2101      	movs	r1, #1
1000cd00:	438b      	bics	r3, r1
1000cd02:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cd04:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE0_CLK_EN;
		break;
1000cd06:	e0b6      	b.n	1000ce76 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000cd08:	4a5c      	ldr	r2, [pc, #368]	; (1000ce7c <system_clock_peripheral_disable+0x30c>)
1000cd0a:	6913      	ldr	r3, [r2, #16]
1000cd0c:	2102      	movs	r1, #2
1000cd0e:	438b      	bics	r3, r1
1000cd10:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cd12:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE1_CLK_EN;
		break;
1000cd14:	e0af      	b.n	1000ce76 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000cd16:	4a59      	ldr	r2, [pc, #356]	; (1000ce7c <system_clock_peripheral_disable+0x30c>)
1000cd18:	6913      	ldr	r3, [r2, #16]
1000cd1a:	2104      	movs	r1, #4
1000cd1c:	438b      	bics	r3, r1
1000cd1e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cd20:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE2_CLK_EN;
		break;
1000cd22:	e0a8      	b.n	1000ce76 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000cd24:	4a55      	ldr	r2, [pc, #340]	; (1000ce7c <system_clock_peripheral_disable+0x30c>)
1000cd26:	6913      	ldr	r3, [r2, #16]
1000cd28:	2108      	movs	r1, #8
1000cd2a:	438b      	bics	r3, r1
1000cd2c:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cd2e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE3_CLK_EN;
		break;
1000cd30:	e0a1      	b.n	1000ce76 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000cd32:	4a52      	ldr	r2, [pc, #328]	; (1000ce7c <system_clock_peripheral_disable+0x30c>)
1000cd34:	6913      	ldr	r3, [r2, #16]
1000cd36:	2110      	movs	r1, #16
1000cd38:	438b      	bics	r3, r1
1000cd3a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cd3c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE4_CLK_EN;
		break;
1000cd3e:	e09a      	b.n	1000ce76 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000cd40:	4a4e      	ldr	r2, [pc, #312]	; (1000ce7c <system_clock_peripheral_disable+0x30c>)
1000cd42:	6913      	ldr	r3, [r2, #16]
1000cd44:	2120      	movs	r1, #32
1000cd46:	438b      	bics	r3, r1
1000cd48:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cd4a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE5_CLK_EN;
		break;
1000cd4c:	e093      	b.n	1000ce76 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000cd4e:	4a4b      	ldr	r2, [pc, #300]	; (1000ce7c <system_clock_peripheral_disable+0x30c>)
1000cd50:	6913      	ldr	r3, [r2, #16]
1000cd52:	2140      	movs	r1, #64	; 0x40
1000cd54:	438b      	bics	r3, r1
1000cd56:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cd58:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM0_CLK_EN;
		break;
1000cd5a:	e08c      	b.n	1000ce76 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000cd5c:	4a47      	ldr	r2, [pc, #284]	; (1000ce7c <system_clock_peripheral_disable+0x30c>)
1000cd5e:	6913      	ldr	r3, [r2, #16]
1000cd60:	2180      	movs	r1, #128	; 0x80
1000cd62:	438b      	bics	r3, r1
1000cd64:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cd66:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM1_CLK_EN;
		break;
1000cd68:	e085      	b.n	1000ce76 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000cd6a:	4a44      	ldr	r2, [pc, #272]	; (1000ce7c <system_clock_peripheral_disable+0x30c>)
1000cd6c:	6911      	ldr	r1, [r2, #16]
1000cd6e:	4b44      	ldr	r3, [pc, #272]	; (1000ce80 <system_clock_peripheral_disable+0x310>)
1000cd70:	400b      	ands	r3, r1
1000cd72:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cd74:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM2_CLK_EN;
		break;
1000cd76:	e07e      	b.n	1000ce76 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000cd78:	4a40      	ldr	r2, [pc, #256]	; (1000ce7c <system_clock_peripheral_disable+0x30c>)
1000cd7a:	6911      	ldr	r1, [r2, #16]
1000cd7c:	4b55      	ldr	r3, [pc, #340]	; (1000ced4 <system_clock_peripheral_disable+0x364>)
1000cd7e:	400b      	ands	r3, r1
1000cd80:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cd82:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM3_CLK_EN;
		break;
1000cd84:	e077      	b.n	1000ce76 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000cd86:	4a3d      	ldr	r2, [pc, #244]	; (1000ce7c <system_clock_peripheral_disable+0x30c>)
1000cd88:	6911      	ldr	r1, [r2, #16]
1000cd8a:	4b53      	ldr	r3, [pc, #332]	; (1000ced8 <system_clock_peripheral_disable+0x368>)
1000cd8c:	400b      	ands	r3, r1
1000cd8e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cd90:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SENS_ADC_CLK_EN;
		break;
1000cd92:	e070      	b.n	1000ce76 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000cd94:	4a39      	ldr	r2, [pc, #228]	; (1000ce7c <system_clock_peripheral_disable+0x30c>)
1000cd96:	6911      	ldr	r1, [r2, #16]
1000cd98:	4b3a      	ldr	r3, [pc, #232]	; (1000ce84 <system_clock_peripheral_disable+0x314>)
1000cd9a:	400b      	ands	r3, r1
1000cd9c:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cd9e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI0_SCK_PHASE_INT_CLK_EN;
		break;
1000cda0:	e069      	b.n	1000ce76 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000cda2:	4a36      	ldr	r2, [pc, #216]	; (1000ce7c <system_clock_peripheral_disable+0x30c>)
1000cda4:	6911      	ldr	r1, [r2, #16]
1000cda6:	4b38      	ldr	r3, [pc, #224]	; (1000ce88 <system_clock_peripheral_disable+0x318>)
1000cda8:	400b      	ands	r3, r1
1000cdaa:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cdac:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI1_SCK_PHASE_INT_CLK_EN;
		break;
1000cdae:	e062      	b.n	1000ce76 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000cdb0:	4a32      	ldr	r2, [pc, #200]	; (1000ce7c <system_clock_peripheral_disable+0x30c>)
1000cdb2:	6911      	ldr	r1, [r2, #16]
1000cdb4:	4b35      	ldr	r3, [pc, #212]	; (1000ce8c <system_clock_peripheral_disable+0x31c>)
1000cdb6:	400b      	ands	r3, r1
1000cdb8:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cdba:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_GPIO_GCLK_EN;
		break;
1000cdbc:	e05b      	b.n	1000ce76 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000cdbe:	4a2f      	ldr	r2, [pc, #188]	; (1000ce7c <system_clock_peripheral_disable+0x30c>)
1000cdc0:	6911      	ldr	r1, [r2, #16]
1000cdc2:	4b33      	ldr	r3, [pc, #204]	; (1000ce90 <system_clock_peripheral_disable+0x320>)
1000cdc4:	400b      	ands	r3, r1
1000cdc6:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cdc8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_TIMER0_PGCLK_EN;
		break;
1000cdca:	e054      	b.n	1000ce76 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000cdcc:	4a2b      	ldr	r2, [pc, #172]	; (1000ce7c <system_clock_peripheral_disable+0x30c>)
1000cdce:	6911      	ldr	r1, [r2, #16]
1000cdd0:	4b30      	ldr	r3, [pc, #192]	; (1000ce94 <system_clock_peripheral_disable+0x324>)
1000cdd2:	400b      	ands	r3, r1
1000cdd4:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cdd6:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_CORE_CLK_EN;
		break;
1000cdd8:	e04d      	b.n	1000ce76 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000cdda:	4a28      	ldr	r2, [pc, #160]	; (1000ce7c <system_clock_peripheral_disable+0x30c>)
1000cddc:	6911      	ldr	r1, [r2, #16]
1000cdde:	4b2e      	ldr	r3, [pc, #184]	; (1000ce98 <system_clock_peripheral_disable+0x328>)
1000cde0:	400b      	ands	r3, r1
1000cde2:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cde4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_AHB_CLK_EN;
		break;
1000cde6:	e046      	b.n	1000ce76 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000cde8:	4a24      	ldr	r2, [pc, #144]	; (1000ce7c <system_clock_peripheral_disable+0x30c>)
1000cdea:	6911      	ldr	r1, [r2, #16]
1000cdec:	4b2b      	ldr	r3, [pc, #172]	; (1000ce9c <system_clock_peripheral_disable+0x32c>)
1000cdee:	400b      	ands	r3, r1
1000cdf0:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cdf2:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_CORE_CLK_EN;
		break;
1000cdf4:	e03f      	b.n	1000ce76 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000cdf6:	4a21      	ldr	r2, [pc, #132]	; (1000ce7c <system_clock_peripheral_disable+0x30c>)
1000cdf8:	6911      	ldr	r1, [r2, #16]
1000cdfa:	4b29      	ldr	r3, [pc, #164]	; (1000cea0 <system_clock_peripheral_disable+0x330>)
1000cdfc:	400b      	ands	r3, r1
1000cdfe:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ce00:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_AHB_CLK_EN;
		break;
1000ce02:	e038      	b.n	1000ce76 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000ce04:	4a1d      	ldr	r2, [pc, #116]	; (1000ce7c <system_clock_peripheral_disable+0x30c>)
1000ce06:	6911      	ldr	r1, [r2, #16]
1000ce08:	4b26      	ldr	r3, [pc, #152]	; (1000cea4 <system_clock_peripheral_disable+0x334>)
1000ce0a:	400b      	ands	r3, r1
1000ce0c:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ce0e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_0_MEM_CLK_EN;
		break;
1000ce10:	e031      	b.n	1000ce76 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000ce12:	4a1a      	ldr	r2, [pc, #104]	; (1000ce7c <system_clock_peripheral_disable+0x30c>)
1000ce14:	6911      	ldr	r1, [r2, #16]
1000ce16:	4b24      	ldr	r3, [pc, #144]	; (1000cea8 <system_clock_peripheral_disable+0x338>)
1000ce18:	400b      	ands	r3, r1
1000ce1a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ce1c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_1_MEM_CLK_EN;
		break;
1000ce1e:	e02a      	b.n	1000ce76 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000ce20:	4a16      	ldr	r2, [pc, #88]	; (1000ce7c <system_clock_peripheral_disable+0x30c>)
1000ce22:	6911      	ldr	r1, [r2, #16]
1000ce24:	4b21      	ldr	r3, [pc, #132]	; (1000ceac <system_clock_peripheral_disable+0x33c>)
1000ce26:	400b      	ands	r3, r1
1000ce28:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ce2a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_2_MEM_CLK_EN;
		break;
1000ce2c:	e023      	b.n	1000ce76 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000ce2e:	4a13      	ldr	r2, [pc, #76]	; (1000ce7c <system_clock_peripheral_disable+0x30c>)
1000ce30:	6911      	ldr	r1, [r2, #16]
1000ce32:	4b1f      	ldr	r3, [pc, #124]	; (1000ceb0 <system_clock_peripheral_disable+0x340>)
1000ce34:	400b      	ands	r3, r1
1000ce36:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ce38:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_0_MEM_CLK_EN;
		break;
1000ce3a:	e01c      	b.n	1000ce76 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000ce3c:	4a0f      	ldr	r2, [pc, #60]	; (1000ce7c <system_clock_peripheral_disable+0x30c>)
1000ce3e:	6911      	ldr	r1, [r2, #16]
1000ce40:	4b1c      	ldr	r3, [pc, #112]	; (1000ceb4 <system_clock_peripheral_disable+0x344>)
1000ce42:	400b      	ands	r3, r1
1000ce44:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ce46:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_1_MEM_CLK_EN;
		break;
1000ce48:	e015      	b.n	1000ce76 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
1000ce4a:	4a0c      	ldr	r2, [pc, #48]	; (1000ce7c <system_clock_peripheral_disable+0x30c>)
1000ce4c:	7d13      	ldrb	r3, [r2, #20]
1000ce4e:	2101      	movs	r1, #1
1000ce50:	438b      	bics	r3, r1
1000ce52:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ce54:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
				~LPMCU_MISC_REGS_BTMCU_CTRL_RXTX_SEQ_CLK_EN;
		break;
1000ce56:	e00e      	b.n	1000ce76 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
1000ce58:	4a08      	ldr	r2, [pc, #32]	; (1000ce7c <system_clock_peripheral_disable+0x30c>)
1000ce5a:	7d13      	ldrb	r3, [r2, #20]
1000ce5c:	2102      	movs	r1, #2
1000ce5e:	438b      	bics	r3, r1
1000ce60:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ce62:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
				~LPMCU_MISC_REGS_BTMCU_CTRL_AHB_CLK_EN;
		break;
1000ce64:	e007      	b.n	1000ce76 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
1000ce66:	4a05      	ldr	r2, [pc, #20]	; (1000ce7c <system_clock_peripheral_disable+0x30c>)
1000ce68:	7d13      	ldrb	r3, [r2, #20]
1000ce6a:	2104      	movs	r1, #4
1000ce6c:	438b      	bics	r3, r1
1000ce6e:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ce70:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
				~LPMCU_MISC_REGS_BTMCU_CTRL_PERIPH_REGS_CLK_EN;
		break;
1000ce72:	e000      	b.n	1000ce76 <system_clock_peripheral_disable+0x306>

		default:
			return STATUS_ERR_INVALID_ARG;
1000ce74:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
1000ce76:	bd00      	pop	{pc}
1000ce78:	100174dc 	.word	0x100174dc
1000ce7c:	4000b000 	.word	0x4000b000
1000ce80:	fffffeff 	.word	0xfffffeff
1000ce84:	fffff7ff 	.word	0xfffff7ff
1000ce88:	ffffefff 	.word	0xffffefff
1000ce8c:	ffffdfff 	.word	0xffffdfff
1000ce90:	ffffbfff 	.word	0xffffbfff
1000ce94:	ffff7fff 	.word	0xffff7fff
1000ce98:	fffeffff 	.word	0xfffeffff
1000ce9c:	fffdffff 	.word	0xfffdffff
1000cea0:	fffbffff 	.word	0xfffbffff
1000cea4:	fff7ffff 	.word	0xfff7ffff
1000cea8:	ffefffff 	.word	0xffefffff
1000ceac:	ffdfffff 	.word	0xffdfffff
1000ceb0:	ffbfffff 	.word	0xffbfffff
1000ceb4:	ff7fffff 	.word	0xff7fffff
1000ceb8:	feffffff 	.word	0xfeffffff
1000cebc:	fdffffff 	.word	0xfdffffff
1000cec0:	fbffffff 	.word	0xfbffffff
1000cec4:	f7ffffff 	.word	0xf7ffffff
1000cec8:	efffffff 	.word	0xefffffff
1000cecc:	dfffffff 	.word	0xdfffffff
1000ced0:	bfffffff 	.word	0xbfffffff
1000ced4:	fffffdff 	.word	0xfffffdff
1000ced8:	fffffbff 	.word	0xfffffbff

1000cedc <system_peripheral_reset>:
 * \return Status of operation.
 * \retval STATUS_OK               Clock config correctly
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_peripheral_reset(enum system_peripheral peripheral)
{
1000cedc:	b500      	push	{lr}
	switch (peripheral) {
1000cede:	2843      	cmp	r0, #67	; 0x43
1000cee0:	d900      	bls.n	1000cee4 <system_peripheral_reset+0x8>
1000cee2:	e223      	b.n	1000d32c <system_peripheral_reset+0x450>
1000cee4:	0080      	lsls	r0, r0, #2
1000cee6:	4be0      	ldr	r3, [pc, #896]	; (1000d268 <system_peripheral_reset+0x38c>)
1000cee8:	581b      	ldr	r3, [r3, r0]
1000ceea:	469f      	mov	pc, r3
		case PERIPHERAL_LPMCU_CPU:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000ceec:	4bdf      	ldr	r3, [pc, #892]	; (1000d26c <system_peripheral_reset+0x390>)
1000ceee:	6859      	ldr	r1, [r3, #4]
1000cef0:	2202      	movs	r2, #2
1000cef2:	4391      	bics	r1, r2
1000cef4:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cef6:	6859      	ldr	r1, [r3, #4]
1000cef8:	430a      	orrs	r2, r1
1000cefa:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cefc:	2000      	movs	r0, #0
		case PERIPHERAL_LPMCU_CPU:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN;
		break;
1000cefe:	e216      	b.n	1000d32e <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cf00:	4bda      	ldr	r3, [pc, #872]	; (1000d26c <system_peripheral_reset+0x390>)
1000cf02:	6859      	ldr	r1, [r3, #4]
1000cf04:	2204      	movs	r2, #4
1000cf06:	4391      	bics	r1, r2
1000cf08:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_SYS_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cf0a:	6859      	ldr	r1, [r3, #4]
1000cf0c:	430a      	orrs	r2, r1
1000cf0e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cf10:	2000      	movs	r0, #0
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_SYS_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_SYS_RSTN;
		break;
1000cf12:	e20c      	b.n	1000d32e <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI_FLASH_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cf14:	4bd5      	ldr	r3, [pc, #852]	; (1000d26c <system_peripheral_reset+0x390>)
1000cf16:	6859      	ldr	r1, [r3, #4]
1000cf18:	2208      	movs	r2, #8
1000cf1a:	4391      	bics	r1, r2
1000cf1c:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cf1e:	6859      	ldr	r1, [r3, #4]
1000cf20:	430a      	orrs	r2, r1
1000cf22:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cf24:	2000      	movs	r0, #0
		case PERIPHERAL_SPI_FLASH_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_RSTN;
		break;
1000cf26:	e202      	b.n	1000d32e <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cf28:	4bd0      	ldr	r3, [pc, #832]	; (1000d26c <system_peripheral_reset+0x390>)
1000cf2a:	6859      	ldr	r1, [r3, #4]
1000cf2c:	2210      	movs	r2, #16
1000cf2e:	4391      	bics	r1, r2
1000cf30:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cf32:	6859      	ldr	r1, [r3, #4]
1000cf34:	430a      	orrs	r2, r1
1000cf36:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cf38:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_CORE_RSTN;
		break;
1000cf3a:	e1f8      	b.n	1000d32e <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cf3c:	4bcb      	ldr	r3, [pc, #812]	; (1000d26c <system_peripheral_reset+0x390>)
1000cf3e:	6859      	ldr	r1, [r3, #4]
1000cf40:	2220      	movs	r2, #32
1000cf42:	4391      	bics	r1, r2
1000cf44:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cf46:	6859      	ldr	r1, [r3, #4]
1000cf48:	430a      	orrs	r2, r1
1000cf4a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cf4c:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_IF_RSTN;
		break;
1000cf4e:	e1ee      	b.n	1000d32e <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cf50:	4bc6      	ldr	r3, [pc, #792]	; (1000d26c <system_peripheral_reset+0x390>)
1000cf52:	6859      	ldr	r1, [r3, #4]
1000cf54:	2240      	movs	r2, #64	; 0x40
1000cf56:	4391      	bics	r1, r2
1000cf58:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_CORE_RESETN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cf5a:	6859      	ldr	r1, [r3, #4]
1000cf5c:	430a      	orrs	r2, r1
1000cf5e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cf60:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_CORE_RESETN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_CORE_RESETN;
		break;
1000cf62:	e1e4      	b.n	1000d32e <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cf64:	4bc1      	ldr	r3, [pc, #772]	; (1000d26c <system_peripheral_reset+0x390>)
1000cf66:	6859      	ldr	r1, [r3, #4]
1000cf68:	2280      	movs	r2, #128	; 0x80
1000cf6a:	4391      	bics	r1, r2
1000cf6c:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cf6e:	6859      	ldr	r1, [r3, #4]
1000cf70:	430a      	orrs	r2, r1
1000cf72:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cf74:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_IF_RSTN;
		break;
1000cf76:	e1da      	b.n	1000d32e <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cf78:	4bbc      	ldr	r3, [pc, #752]	; (1000d26c <system_peripheral_reset+0x390>)
1000cf7a:	6859      	ldr	r1, [r3, #4]
1000cf7c:	4abc      	ldr	r2, [pc, #752]	; (1000d270 <system_peripheral_reset+0x394>)
1000cf7e:	400a      	ands	r2, r1
1000cf80:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cf82:	685a      	ldr	r2, [r3, #4]
1000cf84:	2180      	movs	r1, #128	; 0x80
1000cf86:	0049      	lsls	r1, r1, #1
1000cf88:	430a      	orrs	r2, r1
1000cf8a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cf8c:	2000      	movs	r0, #0
		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_CORE_RSTN;
		break;
1000cf8e:	e1ce      	b.n	1000d32e <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cf90:	4bb6      	ldr	r3, [pc, #728]	; (1000d26c <system_peripheral_reset+0x390>)
1000cf92:	6859      	ldr	r1, [r3, #4]
1000cf94:	4ab7      	ldr	r2, [pc, #732]	; (1000d274 <system_peripheral_reset+0x398>)
1000cf96:	400a      	ands	r2, r1
1000cf98:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cf9a:	685a      	ldr	r2, [r3, #4]
1000cf9c:	2180      	movs	r1, #128	; 0x80
1000cf9e:	0089      	lsls	r1, r1, #2
1000cfa0:	430a      	orrs	r2, r1
1000cfa2:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cfa4:	2000      	movs	r0, #0
		case PERIPHERAL_I2C0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_IF_RSTN;
		break;
1000cfa6:	e1c2      	b.n	1000d32e <system_peripheral_reset+0x452>

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cfa8:	4bb0      	ldr	r3, [pc, #704]	; (1000d26c <system_peripheral_reset+0x390>)
1000cfaa:	6859      	ldr	r1, [r3, #4]
1000cfac:	4ab2      	ldr	r2, [pc, #712]	; (1000d278 <system_peripheral_reset+0x39c>)
1000cfae:	400a      	ands	r2, r1
1000cfb0:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cfb2:	685a      	ldr	r2, [r3, #4]
1000cfb4:	2180      	movs	r1, #128	; 0x80
1000cfb6:	00c9      	lsls	r1, r1, #3
1000cfb8:	430a      	orrs	r2, r1
1000cfba:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cfbc:	2000      	movs	r0, #0
		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
		break;
1000cfbe:	e1b6      	b.n	1000d32e <system_peripheral_reset+0x452>

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cfc0:	4baa      	ldr	r3, [pc, #680]	; (1000d26c <system_peripheral_reset+0x390>)
1000cfc2:	6859      	ldr	r1, [r3, #4]
1000cfc4:	4aad      	ldr	r2, [pc, #692]	; (1000d27c <system_peripheral_reset+0x3a0>)
1000cfc6:	400a      	ands	r2, r1
1000cfc8:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_TIMER0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cfca:	685a      	ldr	r2, [r3, #4]
1000cfcc:	2180      	movs	r1, #128	; 0x80
1000cfce:	0109      	lsls	r1, r1, #4
1000cfd0:	430a      	orrs	r2, r1
1000cfd2:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cfd4:	2000      	movs	r0, #0
		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_TIMER0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_TIMER0_RSTN;
		break;
1000cfd6:	e1aa      	b.n	1000d32e <system_peripheral_reset+0x452>

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cfd8:	4ba4      	ldr	r3, [pc, #656]	; (1000d26c <system_peripheral_reset+0x390>)
1000cfda:	6859      	ldr	r1, [r3, #4]
1000cfdc:	4aa8      	ldr	r2, [pc, #672]	; (1000d280 <system_peripheral_reset+0x3a4>)
1000cfde:	400a      	ands	r2, r1
1000cfe0:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cfe2:	685a      	ldr	r2, [r3, #4]
1000cfe4:	2180      	movs	r1, #128	; 0x80
1000cfe6:	0149      	lsls	r1, r1, #5
1000cfe8:	430a      	orrs	r2, r1
1000cfea:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cfec:	2000      	movs	r0, #0
		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_CORE_RSTN;
		break;
1000cfee:	e19e      	b.n	1000d32e <system_peripheral_reset+0x452>

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cff0:	4b9e      	ldr	r3, [pc, #632]	; (1000d26c <system_peripheral_reset+0x390>)
1000cff2:	6859      	ldr	r1, [r3, #4]
1000cff4:	4aa3      	ldr	r2, [pc, #652]	; (1000d284 <system_peripheral_reset+0x3a8>)
1000cff6:	400a      	ands	r2, r1
1000cff8:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cffa:	685a      	ldr	r2, [r3, #4]
1000cffc:	2180      	movs	r1, #128	; 0x80
1000cffe:	0189      	lsls	r1, r1, #6
1000d000:	430a      	orrs	r2, r1
1000d002:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d004:	2000      	movs	r0, #0
		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_IF_RSTN;
		break;
1000d006:	e192      	b.n	1000d32e <system_peripheral_reset+0x452>

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000d008:	4b98      	ldr	r3, [pc, #608]	; (1000d26c <system_peripheral_reset+0x390>)
1000d00a:	6859      	ldr	r1, [r3, #4]
1000d00c:	4a9e      	ldr	r2, [pc, #632]	; (1000d288 <system_peripheral_reset+0x3ac>)
1000d00e:	400a      	ands	r2, r1
1000d010:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000d012:	685a      	ldr	r2, [r3, #4]
1000d014:	2180      	movs	r1, #128	; 0x80
1000d016:	01c9      	lsls	r1, r1, #7
1000d018:	430a      	orrs	r2, r1
1000d01a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d01c:	2000      	movs	r0, #0
		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_CORE_RSTN;
		break;
1000d01e:	e186      	b.n	1000d32e <system_peripheral_reset+0x452>

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000d020:	4b92      	ldr	r3, [pc, #584]	; (1000d26c <system_peripheral_reset+0x390>)
1000d022:	6859      	ldr	r1, [r3, #4]
1000d024:	4a99      	ldr	r2, [pc, #612]	; (1000d28c <system_peripheral_reset+0x3b0>)
1000d026:	400a      	ands	r2, r1
1000d028:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000d02a:	685a      	ldr	r2, [r3, #4]
1000d02c:	2180      	movs	r1, #128	; 0x80
1000d02e:	0209      	lsls	r1, r1, #8
1000d030:	430a      	orrs	r2, r1
1000d032:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d034:	2000      	movs	r0, #0
		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_IF_RSTN;
		break;
1000d036:	e17a      	b.n	1000d32e <system_peripheral_reset+0x452>

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000d038:	4b8c      	ldr	r3, [pc, #560]	; (1000d26c <system_peripheral_reset+0x390>)
1000d03a:	6859      	ldr	r1, [r3, #4]
1000d03c:	4a94      	ldr	r2, [pc, #592]	; (1000d290 <system_peripheral_reset+0x3b4>)
1000d03e:	400a      	ands	r2, r1
1000d040:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000d042:	685a      	ldr	r2, [r3, #4]
1000d044:	2180      	movs	r1, #128	; 0x80
1000d046:	0249      	lsls	r1, r1, #9
1000d048:	430a      	orrs	r2, r1
1000d04a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d04c:	2000      	movs	r0, #0
		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT0_RSTN;
		break;
1000d04e:	e16e      	b.n	1000d32e <system_peripheral_reset+0x452>

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000d050:	4b86      	ldr	r3, [pc, #536]	; (1000d26c <system_peripheral_reset+0x390>)
1000d052:	6859      	ldr	r1, [r3, #4]
1000d054:	4a8f      	ldr	r2, [pc, #572]	; (1000d294 <system_peripheral_reset+0x3b8>)
1000d056:	400a      	ands	r2, r1
1000d058:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000d05a:	685a      	ldr	r2, [r3, #4]
1000d05c:	2180      	movs	r1, #128	; 0x80
1000d05e:	0289      	lsls	r1, r1, #10
1000d060:	430a      	orrs	r2, r1
1000d062:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d064:	2000      	movs	r0, #0
		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT1_RSTN;
		break;
1000d066:	e162      	b.n	1000d32e <system_peripheral_reset+0x452>

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000d068:	4b80      	ldr	r3, [pc, #512]	; (1000d26c <system_peripheral_reset+0x390>)
1000d06a:	6859      	ldr	r1, [r3, #4]
1000d06c:	4a8a      	ldr	r2, [pc, #552]	; (1000d298 <system_peripheral_reset+0x3bc>)
1000d06e:	400a      	ands	r2, r1
1000d070:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000d072:	685a      	ldr	r2, [r3, #4]
1000d074:	2180      	movs	r1, #128	; 0x80
1000d076:	02c9      	lsls	r1, r1, #11
1000d078:	430a      	orrs	r2, r1
1000d07a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d07c:	2000      	movs	r0, #0
		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
		break;
1000d07e:	e156      	b.n	1000d32e <system_peripheral_reset+0x452>

		case PERIPHERAL_MBIST:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000d080:	4b7a      	ldr	r3, [pc, #488]	; (1000d26c <system_peripheral_reset+0x390>)
1000d082:	6859      	ldr	r1, [r3, #4]
1000d084:	4a85      	ldr	r2, [pc, #532]	; (1000d29c <system_peripheral_reset+0x3c0>)
1000d086:	400a      	ands	r2, r1
1000d088:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000d08a:	685a      	ldr	r2, [r3, #4]
1000d08c:	2180      	movs	r1, #128	; 0x80
1000d08e:	0309      	lsls	r1, r1, #12
1000d090:	430a      	orrs	r2, r1
1000d092:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d094:	2000      	movs	r0, #0
		case PERIPHERAL_MBIST:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
		break;
1000d096:	e14a      	b.n	1000d32e <system_peripheral_reset+0x452>

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000d098:	4b74      	ldr	r3, [pc, #464]	; (1000d26c <system_peripheral_reset+0x390>)
1000d09a:	6859      	ldr	r1, [r3, #4]
1000d09c:	4a80      	ldr	r2, [pc, #512]	; (1000d2a0 <system_peripheral_reset+0x3c4>)
1000d09e:	400a      	ands	r2, r1
1000d0a0:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000d0a2:	685a      	ldr	r2, [r3, #4]
1000d0a4:	2180      	movs	r1, #128	; 0x80
1000d0a6:	0349      	lsls	r1, r1, #13
1000d0a8:	430a      	orrs	r2, r1
1000d0aa:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d0ac:	2000      	movs	r0, #0
		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
		break;
1000d0ae:	e13e      	b.n	1000d32e <system_peripheral_reset+0x452>

		case PERIPHERAL_LOW_POWER_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000d0b0:	4b6e      	ldr	r3, [pc, #440]	; (1000d26c <system_peripheral_reset+0x390>)
1000d0b2:	6859      	ldr	r1, [r3, #4]
1000d0b4:	4a7b      	ldr	r2, [pc, #492]	; (1000d2a4 <system_peripheral_reset+0x3c8>)
1000d0b6:	400a      	ands	r2, r1
1000d0b8:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000d0ba:	685a      	ldr	r2, [r3, #4]
1000d0bc:	2180      	movs	r1, #128	; 0x80
1000d0be:	0389      	lsls	r1, r1, #14
1000d0c0:	430a      	orrs	r2, r1
1000d0c2:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d0c4:	2000      	movs	r0, #0
		case PERIPHERAL_LOW_POWER_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
		break;
1000d0c6:	e132      	b.n	1000d32e <system_peripheral_reset+0x452>

		case PERIPHERAL_LPMCU_DEBUG:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000d0c8:	4b68      	ldr	r3, [pc, #416]	; (1000d26c <system_peripheral_reset+0x390>)
1000d0ca:	6859      	ldr	r1, [r3, #4]
1000d0cc:	4a76      	ldr	r2, [pc, #472]	; (1000d2a8 <system_peripheral_reset+0x3cc>)
1000d0ce:	400a      	ands	r2, r1
1000d0d0:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000d0d2:	685a      	ldr	r2, [r3, #4]
1000d0d4:	2180      	movs	r1, #128	; 0x80
1000d0d6:	03c9      	lsls	r1, r1, #15
1000d0d8:	430a      	orrs	r2, r1
1000d0da:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d0dc:	2000      	movs	r0, #0
		case PERIPHERAL_LPMCU_DEBUG:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
		break;
1000d0de:	e126      	b.n	1000d32e <system_peripheral_reset+0x452>

		case PERIPHERAL_ARM_FREE_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000d0e0:	4b62      	ldr	r3, [pc, #392]	; (1000d26c <system_peripheral_reset+0x390>)
1000d0e2:	6859      	ldr	r1, [r3, #4]
1000d0e4:	4a71      	ldr	r2, [pc, #452]	; (1000d2ac <system_peripheral_reset+0x3d0>)
1000d0e6:	400a      	ands	r2, r1
1000d0e8:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000d0ea:	685a      	ldr	r2, [r3, #4]
1000d0ec:	2180      	movs	r1, #128	; 0x80
1000d0ee:	0409      	lsls	r1, r1, #16
1000d0f0:	430a      	orrs	r2, r1
1000d0f2:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d0f4:	2000      	movs	r0, #0
		case PERIPHERAL_ARM_FREE_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
		break;
1000d0f6:	e11a      	b.n	1000d32e <system_peripheral_reset+0x452>

		case PERIPHERAL_ARM_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000d0f8:	4b5c      	ldr	r3, [pc, #368]	; (1000d26c <system_peripheral_reset+0x390>)
1000d0fa:	6859      	ldr	r1, [r3, #4]
1000d0fc:	4a6c      	ldr	r2, [pc, #432]	; (1000d2b0 <system_peripheral_reset+0x3d4>)
1000d0fe:	400a      	ands	r2, r1
1000d100:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000d102:	685a      	ldr	r2, [r3, #4]
1000d104:	2180      	movs	r1, #128	; 0x80
1000d106:	0449      	lsls	r1, r1, #17
1000d108:	430a      	orrs	r2, r1
1000d10a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d10c:	2000      	movs	r0, #0
		case PERIPHERAL_ARM_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
		break;
1000d10e:	e10e      	b.n	1000d32e <system_peripheral_reset+0x452>

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000d110:	4b56      	ldr	r3, [pc, #344]	; (1000d26c <system_peripheral_reset+0x390>)
1000d112:	6859      	ldr	r1, [r3, #4]
1000d114:	4a67      	ldr	r2, [pc, #412]	; (1000d2b4 <system_peripheral_reset+0x3d8>)
1000d116:	400a      	ands	r2, r1
1000d118:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000d11a:	685a      	ldr	r2, [r3, #4]
1000d11c:	2180      	movs	r1, #128	; 0x80
1000d11e:	0489      	lsls	r1, r1, #18
1000d120:	430a      	orrs	r2, r1
1000d122:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d124:	2000      	movs	r0, #0
		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC0_RSTN;
		break;
1000d126:	e102      	b.n	1000d32e <system_peripheral_reset+0x452>

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000d128:	4b50      	ldr	r3, [pc, #320]	; (1000d26c <system_peripheral_reset+0x390>)
1000d12a:	6859      	ldr	r1, [r3, #4]
1000d12c:	4a62      	ldr	r2, [pc, #392]	; (1000d2b8 <system_peripheral_reset+0x3dc>)
1000d12e:	400a      	ands	r2, r1
1000d130:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000d132:	685a      	ldr	r2, [r3, #4]
1000d134:	2180      	movs	r1, #128	; 0x80
1000d136:	04c9      	lsls	r1, r1, #19
1000d138:	430a      	orrs	r2, r1
1000d13a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d13c:	2000      	movs	r0, #0
		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC1_RSTN;
		break;
1000d13e:	e0f6      	b.n	1000d32e <system_peripheral_reset+0x452>

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000d140:	4b4a      	ldr	r3, [pc, #296]	; (1000d26c <system_peripheral_reset+0x390>)
1000d142:	6859      	ldr	r1, [r3, #4]
1000d144:	4a5d      	ldr	r2, [pc, #372]	; (1000d2bc <system_peripheral_reset+0x3e0>)
1000d146:	400a      	ands	r2, r1
1000d148:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000d14a:	685a      	ldr	r2, [r3, #4]
1000d14c:	2180      	movs	r1, #128	; 0x80
1000d14e:	0509      	lsls	r1, r1, #20
1000d150:	430a      	orrs	r2, r1
1000d152:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d154:	2000      	movs	r0, #0
		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC2_RSTN;
		break;
1000d156:	e0ea      	b.n	1000d32e <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000d158:	4b44      	ldr	r3, [pc, #272]	; (1000d26c <system_peripheral_reset+0x390>)
1000d15a:	6859      	ldr	r1, [r3, #4]
1000d15c:	4a58      	ldr	r2, [pc, #352]	; (1000d2c0 <system_peripheral_reset+0x3e4>)
1000d15e:	400a      	ands	r2, r1
1000d160:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000d162:	685a      	ldr	r2, [r3, #4]
1000d164:	2180      	movs	r1, #128	; 0x80
1000d166:	0549      	lsls	r1, r1, #21
1000d168:	430a      	orrs	r2, r1
1000d16a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d16c:	2000      	movs	r0, #0
		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM0_RSTN;
		break;
1000d16e:	e0de      	b.n	1000d32e <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000d170:	4b3e      	ldr	r3, [pc, #248]	; (1000d26c <system_peripheral_reset+0x390>)
1000d172:	6859      	ldr	r1, [r3, #4]
1000d174:	4a53      	ldr	r2, [pc, #332]	; (1000d2c4 <system_peripheral_reset+0x3e8>)
1000d176:	400a      	ands	r2, r1
1000d178:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000d17a:	685a      	ldr	r2, [r3, #4]
1000d17c:	2180      	movs	r1, #128	; 0x80
1000d17e:	0589      	lsls	r1, r1, #22
1000d180:	430a      	orrs	r2, r1
1000d182:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d184:	2000      	movs	r0, #0
		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM1_RSTN;
		break;
1000d186:	e0d2      	b.n	1000d32e <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000d188:	4b38      	ldr	r3, [pc, #224]	; (1000d26c <system_peripheral_reset+0x390>)
1000d18a:	6859      	ldr	r1, [r3, #4]
1000d18c:	4a4e      	ldr	r2, [pc, #312]	; (1000d2c8 <system_peripheral_reset+0x3ec>)
1000d18e:	400a      	ands	r2, r1
1000d190:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000d192:	685a      	ldr	r2, [r3, #4]
1000d194:	2180      	movs	r1, #128	; 0x80
1000d196:	05c9      	lsls	r1, r1, #23
1000d198:	430a      	orrs	r2, r1
1000d19a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d19c:	2000      	movs	r0, #0
		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM2_RSTN;
		break;
1000d19e:	e0c6      	b.n	1000d32e <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000d1a0:	4a32      	ldr	r2, [pc, #200]	; (1000d26c <system_peripheral_reset+0x390>)
1000d1a2:	6853      	ldr	r3, [r2, #4]
1000d1a4:	005b      	lsls	r3, r3, #1
1000d1a6:	085b      	lsrs	r3, r3, #1
1000d1a8:	6053      	str	r3, [r2, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM3_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000d1aa:	6853      	ldr	r3, [r2, #4]
1000d1ac:	2180      	movs	r1, #128	; 0x80
1000d1ae:	0609      	lsls	r1, r1, #24
1000d1b0:	430b      	orrs	r3, r1
1000d1b2:	6053      	str	r3, [r2, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d1b4:	2000      	movs	r0, #0
		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM3_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM3_RSTN;
		break;
1000d1b6:	e0ba      	b.n	1000d32e <system_peripheral_reset+0x452>

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000d1b8:	4b2c      	ldr	r3, [pc, #176]	; (1000d26c <system_peripheral_reset+0x390>)
1000d1ba:	891a      	ldrh	r2, [r3, #8]
1000d1bc:	2101      	movs	r1, #1
1000d1be:	438a      	bics	r2, r1
1000d1c0:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000d1c2:	8919      	ldrh	r1, [r3, #8]
1000d1c4:	2201      	movs	r2, #1
1000d1c6:	430a      	orrs	r2, r1
1000d1c8:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d1ca:	2000      	movs	r0, #0
		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER0_RSTN;
		break;
1000d1cc:	e0af      	b.n	1000d32e <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000d1ce:	4b27      	ldr	r3, [pc, #156]	; (1000d26c <system_peripheral_reset+0x390>)
1000d1d0:	891a      	ldrh	r2, [r3, #8]
1000d1d2:	2102      	movs	r1, #2
1000d1d4:	438a      	bics	r2, r1
1000d1d6:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000d1d8:	8919      	ldrh	r1, [r3, #8]
1000d1da:	2202      	movs	r2, #2
1000d1dc:	430a      	orrs	r2, r1
1000d1de:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d1e0:	2000      	movs	r0, #0
		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_CORE_RSTN;
		break;
1000d1e2:	e0a4      	b.n	1000d32e <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000d1e4:	4b21      	ldr	r3, [pc, #132]	; (1000d26c <system_peripheral_reset+0x390>)
1000d1e6:	891a      	ldrh	r2, [r3, #8]
1000d1e8:	2104      	movs	r1, #4
1000d1ea:	438a      	bics	r2, r1
1000d1ec:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000d1ee:	8919      	ldrh	r1, [r3, #8]
1000d1f0:	2204      	movs	r2, #4
1000d1f2:	430a      	orrs	r2, r1
1000d1f4:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d1f6:	2000      	movs	r0, #0
		case PERIPHERAL_I2C1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_IF_RSTN;
		break;
1000d1f8:	e099      	b.n	1000d32e <system_peripheral_reset+0x452>

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000d1fa:	4b1c      	ldr	r3, [pc, #112]	; (1000d26c <system_peripheral_reset+0x390>)
1000d1fc:	891a      	ldrh	r2, [r3, #8]
1000d1fe:	2108      	movs	r1, #8
1000d200:	438a      	bics	r2, r1
1000d202:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000d204:	8919      	ldrh	r1, [r3, #8]
1000d206:	2208      	movs	r2, #8
1000d208:	430a      	orrs	r2, r1
1000d20a:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d20c:	2000      	movs	r0, #0
		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
		break;
1000d20e:	e08e      	b.n	1000d32e <system_peripheral_reset+0x452>

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000d210:	4b16      	ldr	r3, [pc, #88]	; (1000d26c <system_peripheral_reset+0x390>)
1000d212:	891a      	ldrh	r2, [r3, #8]
1000d214:	2110      	movs	r1, #16
1000d216:	438a      	bics	r2, r1
1000d218:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000d21a:	8919      	ldrh	r1, [r3, #8]
1000d21c:	2210      	movs	r2, #16
1000d21e:	430a      	orrs	r2, r1
1000d220:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d222:	2000      	movs	r0, #0
		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
		break;
1000d224:	e083      	b.n	1000d32e <system_peripheral_reset+0x452>

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000d226:	4b11      	ldr	r3, [pc, #68]	; (1000d26c <system_peripheral_reset+0x390>)
1000d228:	891a      	ldrh	r2, [r3, #8]
1000d22a:	2120      	movs	r1, #32
1000d22c:	438a      	bics	r2, r1
1000d22e:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000d230:	8919      	ldrh	r1, [r3, #8]
1000d232:	2220      	movs	r2, #32
1000d234:	430a      	orrs	r2, r1
1000d236:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d238:	2000      	movs	r0, #0
		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
		break;
1000d23a:	e078      	b.n	1000d32e <system_peripheral_reset+0x452>

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000d23c:	4b0b      	ldr	r3, [pc, #44]	; (1000d26c <system_peripheral_reset+0x390>)
1000d23e:	891a      	ldrh	r2, [r3, #8]
1000d240:	2140      	movs	r1, #64	; 0x40
1000d242:	438a      	bics	r2, r1
1000d244:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000d246:	8919      	ldrh	r1, [r3, #8]
1000d248:	2240      	movs	r2, #64	; 0x40
1000d24a:	430a      	orrs	r2, r1
1000d24c:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d24e:	2000      	movs	r0, #0
		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
		break;
1000d250:	e06d      	b.n	1000d32e <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000d252:	4b06      	ldr	r3, [pc, #24]	; (1000d26c <system_peripheral_reset+0x390>)
1000d254:	891a      	ldrh	r2, [r3, #8]
1000d256:	2180      	movs	r1, #128	; 0x80
1000d258:	438a      	bics	r2, r1
1000d25a:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000d25c:	8919      	ldrh	r1, [r3, #8]
1000d25e:	2280      	movs	r2, #128	; 0x80
1000d260:	430a      	orrs	r2, r1
1000d262:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d264:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_CLK_RSTN;
		break;
1000d266:	e062      	b.n	1000d32e <system_peripheral_reset+0x452>
1000d268:	100175b4 	.word	0x100175b4
1000d26c:	4000b000 	.word	0x4000b000
1000d270:	fffffeff 	.word	0xfffffeff
1000d274:	fffffdff 	.word	0xfffffdff
1000d278:	fffffbff 	.word	0xfffffbff
1000d27c:	fffff7ff 	.word	0xfffff7ff
1000d280:	ffffefff 	.word	0xffffefff
1000d284:	ffffdfff 	.word	0xffffdfff
1000d288:	ffffbfff 	.word	0xffffbfff
1000d28c:	ffff7fff 	.word	0xffff7fff
1000d290:	fffeffff 	.word	0xfffeffff
1000d294:	fffdffff 	.word	0xfffdffff
1000d298:	fffbffff 	.word	0xfffbffff
1000d29c:	fff7ffff 	.word	0xfff7ffff
1000d2a0:	ffefffff 	.word	0xffefffff
1000d2a4:	ffdfffff 	.word	0xffdfffff
1000d2a8:	ffbfffff 	.word	0xffbfffff
1000d2ac:	ff7fffff 	.word	0xff7fffff
1000d2b0:	feffffff 	.word	0xfeffffff
1000d2b4:	fdffffff 	.word	0xfdffffff
1000d2b8:	fbffffff 	.word	0xfbffffff
1000d2bc:	f7ffffff 	.word	0xf7ffffff
1000d2c0:	efffffff 	.word	0xefffffff
1000d2c4:	dfffffff 	.word	0xdfffffff
1000d2c8:	bfffffff 	.word	0xbfffffff

		case PERIPHERAL_SPI1_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000d2cc:	4b18      	ldr	r3, [pc, #96]	; (1000d330 <system_peripheral_reset+0x454>)
1000d2ce:	8919      	ldrh	r1, [r3, #8]
1000d2d0:	4a18      	ldr	r2, [pc, #96]	; (1000d334 <system_peripheral_reset+0x458>)
1000d2d2:	400a      	ands	r2, r1
1000d2d4:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000d2d6:	8919      	ldrh	r1, [r3, #8]
1000d2d8:	2280      	movs	r2, #128	; 0x80
1000d2da:	0052      	lsls	r2, r2, #1
1000d2dc:	430a      	orrs	r2, r1
1000d2de:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d2e0:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_CLK_RSTN;
		break;
1000d2e2:	e024      	b.n	1000d32e <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000d2e4:	4b12      	ldr	r3, [pc, #72]	; (1000d330 <system_peripheral_reset+0x454>)
1000d2e6:	8919      	ldrh	r1, [r3, #8]
1000d2e8:	4a13      	ldr	r2, [pc, #76]	; (1000d338 <system_peripheral_reset+0x45c>)
1000d2ea:	400a      	ands	r2, r1
1000d2ec:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000d2ee:	8919      	ldrh	r1, [r3, #8]
1000d2f0:	2280      	movs	r2, #128	; 0x80
1000d2f2:	0092      	lsls	r2, r2, #2
1000d2f4:	430a      	orrs	r2, r1
1000d2f6:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d2f8:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_PHASE_INT_CLK_RSTN;
		break;
1000d2fa:	e018      	b.n	1000d32e <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000d2fc:	4b0c      	ldr	r3, [pc, #48]	; (1000d330 <system_peripheral_reset+0x454>)
1000d2fe:	8919      	ldrh	r1, [r3, #8]
1000d300:	4a0e      	ldr	r2, [pc, #56]	; (1000d33c <system_peripheral_reset+0x460>)
1000d302:	400a      	ands	r2, r1
1000d304:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000d306:	8919      	ldrh	r1, [r3, #8]
1000d308:	2280      	movs	r2, #128	; 0x80
1000d30a:	00d2      	lsls	r2, r2, #3
1000d30c:	430a      	orrs	r2, r1
1000d30e:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d310:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_PHASE_INT_CLK_RSTN;
		break;
1000d312:	e00c      	b.n	1000d32e <system_peripheral_reset+0x452>

		case PERIPHERAL_DMA:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000d314:	4b06      	ldr	r3, [pc, #24]	; (1000d330 <system_peripheral_reset+0x454>)
1000d316:	8919      	ldrh	r1, [r3, #8]
1000d318:	4a09      	ldr	r2, [pc, #36]	; (1000d340 <system_peripheral_reset+0x464>)
1000d31a:	400a      	ands	r2, r1
1000d31c:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_PROV_DMA_CTRL0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000d31e:	8919      	ldrh	r1, [r3, #8]
1000d320:	2280      	movs	r2, #128	; 0x80
1000d322:	0112      	lsls	r2, r2, #4
1000d324:	430a      	orrs	r2, r1
1000d326:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d328:	2000      	movs	r0, #0
		case PERIPHERAL_DMA:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_PROV_DMA_CTRL0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_PROV_DMA_CTRL0_RSTN;
		break;
1000d32a:	e000      	b.n	1000d32e <system_peripheral_reset+0x452>

		default:
			return STATUS_ERR_INVALID_ARG;
1000d32c:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
1000d32e:	bd00      	pop	{pc}
1000d330:	4000b000 	.word	0x4000b000
1000d334:	fffffeff 	.word	0xfffffeff
1000d338:	fffffdff 	.word	0xfffffdff
1000d33c:	fffffbff 	.word	0xfffffbff
1000d340:	fffff7ff 	.word	0xfffff7ff

1000d344 <system_register_isr>:
void system_register_isr(enum ram_isr_table_index isr_index,
		uint32_t isr_address)
{
	uint32_t *temp;
	temp = (uint32_t *)(isr_index * 4 + ISR_RAM_MAP_START_ADDRESS);
	*temp = isr_address;
1000d344:	2380      	movs	r3, #128	; 0x80
1000d346:	04db      	lsls	r3, r3, #19
1000d348:	469c      	mov	ip, r3
1000d34a:	4460      	add	r0, ip
1000d34c:	0080      	lsls	r0, r0, #2
1000d34e:	6001      	str	r1, [r0, #0]
}
1000d350:	4770      	bx	lr
1000d352:	46c0      	nop			; (mov r8, r8)

1000d354 <uart_rx0_isr_handler>:
	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
}

static void uart_rx0_isr_handler(void)
{
1000d354:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[0];
1000d356:	4b20      	ldr	r3, [pc, #128]	; (1000d3d8 <uart_rx0_isr_handler+0x84>)
1000d358:	681c      	ldr	r4, [r3, #0]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->RECEIVE_STATUS.reg;
1000d35a:	6823      	ldr	r3, [r4, #0]
1000d35c:	7d1d      	ldrb	r5, [r3, #20]
1000d35e:	b2ed      	uxtb	r5, r5
	if (flags & UART_RECEIVE_STATUS_FIFO_OVERRUN) {
1000d360:	066a      	lsls	r2, r5, #25
1000d362:	d513      	bpl.n	1000d38c <uart_rx0_isr_handler+0x38>
		/* Store the error code */
		module->status = STATUS_ERR_OVERFLOW;
1000d364:	211e      	movs	r1, #30
1000d366:	2222      	movs	r2, #34	; 0x22
1000d368:	54a1      	strb	r1, [r4, r2]
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
1000d36a:	7e1a      	ldrb	r2, [r3, #24]
1000d36c:	3123      	adds	r1, #35	; 0x23
1000d36e:	438a      	bics	r2, r1
1000d370:	761a      	strb	r2, [r3, #24]
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
1000d372:	2321      	movs	r3, #33	; 0x21
1000d374:	5ce3      	ldrb	r3, [r4, r3]
1000d376:	071b      	lsls	r3, r3, #28
1000d378:	d506      	bpl.n	1000d388 <uart_rx0_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
1000d37a:	2320      	movs	r3, #32
		module->status = STATUS_ERR_OVERFLOW;
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
1000d37c:	5ce3      	ldrb	r3, [r4, r3]
1000d37e:	071b      	lsls	r3, r3, #28
1000d380:	d502      	bpl.n	1000d388 <uart_rx0_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
			(module->callback[UART_RX_FIFO_OVERRUN])(module);
1000d382:	0020      	movs	r0, r4
1000d384:	6923      	ldr	r3, [r4, #16]
1000d386:	4798      	blx	r3
		}
		/* Flush */
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
1000d388:	6823      	ldr	r3, [r4, #0]
1000d38a:	7c1b      	ldrb	r3, [r3, #16]
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1000d38c:	07eb      	lsls	r3, r5, #31
1000d38e:	d522      	bpl.n	1000d3d6 <uart_rx0_isr_handler+0x82>
		struct uart_module *const module)
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	uint16_t received_data = (uart_hw->RECEIVE_DATA.reg & UART_RECEIVE_DATA_MASK);
1000d390:	6823      	ldr	r3, [r4, #0]
1000d392:	7c1b      	ldrb	r3, [r3, #16]
1000d394:	b2db      	uxtb	r3, r3

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
1000d396:	6962      	ldr	r2, [r4, #20]
1000d398:	7013      	strb	r3, [r2, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
1000d39a:	6963      	ldr	r3, [r4, #20]
1000d39c:	3301      	adds	r3, #1
1000d39e:	6163      	str	r3, [r4, #20]

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
1000d3a0:	8ba3      	ldrh	r3, [r4, #28]
1000d3a2:	3b01      	subs	r3, #1
1000d3a4:	b29b      	uxth	r3, r3
1000d3a6:	83a3      	strh	r3, [r4, #28]
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
1000d3a8:	8ba3      	ldrh	r3, [r4, #28]
1000d3aa:	b29b      	uxth	r3, r3
1000d3ac:	2b00      	cmp	r3, #0
1000d3ae:	d112      	bne.n	1000d3d6 <uart_rx0_isr_handler+0x82>
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
1000d3b0:	3321      	adds	r3, #33	; 0x21
1000d3b2:	5ce3      	ldrb	r3, [r4, r3]
1000d3b4:	075b      	lsls	r3, r3, #29
1000d3b6:	d50e      	bpl.n	1000d3d6 <uart_rx0_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
1000d3b8:	2320      	movs	r3, #32
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
1000d3ba:	5ce3      	ldrb	r3, [r4, r3]
1000d3bc:	075b      	lsls	r3, r3, #29
1000d3be:	d50a      	bpl.n	1000d3d6 <uart_rx0_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
				module->status = STATUS_OK;
1000d3c0:	2200      	movs	r2, #0
1000d3c2:	2322      	movs	r3, #34	; 0x22
1000d3c4:	54e2      	strb	r2, [r4, r3]
				module->hw->RX_INTERRUPT_MASK.reg &=
1000d3c6:	6822      	ldr	r2, [r4, #0]
1000d3c8:	7e13      	ldrb	r3, [r2, #24]
1000d3ca:	2101      	movs	r1, #1
1000d3cc:	438b      	bics	r3, r1
1000d3ce:	7613      	strb	r3, [r2, #24]
					~(UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
				(module->callback[UART_RX_COMPLETE])(module);
1000d3d0:	68e3      	ldr	r3, [r4, #12]
1000d3d2:	0020      	movs	r0, r4
1000d3d4:	4798      	blx	r3
			}
		}
	}
}
1000d3d6:	bd70      	pop	{r4, r5, r6, pc}
1000d3d8:	1001a434 	.word	0x1001a434

1000d3dc <uart_tx0_isr_handler>:

static void uart_tx0_isr_handler(void)
{
1000d3dc:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[0];
1000d3de:	4b21      	ldr	r3, [pc, #132]	; (1000d464 <uart_tx0_isr_handler+0x88>)
1000d3e0:	681c      	ldr	r4, [r3, #0]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
1000d3e2:	6823      	ldr	r3, [r4, #0]
1000d3e4:	791d      	ldrb	r5, [r3, #4]
1000d3e6:	b2ed      	uxtb	r5, r5
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
1000d3e8:	07ea      	lsls	r2, r5, #31
1000d3ea:	d517      	bpl.n	1000d41c <uart_tx0_isr_handler+0x40>
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	/* Write value will be at least 8-bits long */
	uint8_t data_to_send = *(module->tx_buffer_ptr);
1000d3ec:	69a2      	ldr	r2, [r4, #24]
1000d3ee:	7811      	ldrb	r1, [r2, #0]
1000d3f0:	b2c9      	uxtb	r1, r1
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
1000d3f2:	3201      	adds	r2, #1
1000d3f4:	61a2      	str	r2, [r4, #24]

	/* Write the data to send*/
	uart_hw->TRANSMIT_DATA.reg = data_to_send & UART_TRANSMIT_DATA_MASK;
1000d3f6:	7019      	strb	r1, [r3, #0]

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
1000d3f8:	8be3      	ldrh	r3, [r4, #30]
1000d3fa:	3b01      	subs	r3, #1
1000d3fc:	b29b      	uxth	r3, r3
1000d3fe:	83e3      	strh	r3, [r4, #30]
	struct uart_module *module = _uart_instances[0];
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
		_uart_write(module);
		if (module->remaining_tx_buffer_length == 0) {
1000d400:	8be3      	ldrh	r3, [r4, #30]
1000d402:	b29b      	uxth	r3, r3
1000d404:	2b00      	cmp	r3, #0
1000d406:	d109      	bne.n	1000d41c <uart_tx0_isr_handler+0x40>
			module->hw->TX_INTERRUPT_MASK.reg &=
1000d408:	6822      	ldr	r2, [r4, #0]
1000d40a:	7a13      	ldrb	r3, [r2, #8]
1000d40c:	2101      	movs	r1, #1
1000d40e:	438b      	bics	r3, r1
1000d410:	7213      	strb	r3, [r2, #8]
					~UART_TX_INTERRUPT_MASK_TX_FIFO_NOT_FULL_MASK;
			module->hw->TX_INTERRUPT_MASK.reg |=
1000d412:	6822      	ldr	r2, [r4, #0]
1000d414:	7a11      	ldrb	r1, [r2, #8]
1000d416:	2310      	movs	r3, #16
1000d418:	430b      	orrs	r3, r1
1000d41a:	7213      	strb	r3, [r2, #8]
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
1000d41c:	06eb      	lsls	r3, r5, #27
1000d41e:	d512      	bpl.n	1000d446 <uart_tx0_isr_handler+0x6a>
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
1000d420:	2321      	movs	r3, #33	; 0x21
1000d422:	5ce3      	ldrb	r3, [r4, r3]
1000d424:	07db      	lsls	r3, r3, #31
1000d426:	d50e      	bpl.n	1000d446 <uart_tx0_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
1000d428:	2320      	movs	r3, #32
			module->hw->TX_INTERRUPT_MASK.reg |=
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
1000d42a:	5ce3      	ldrb	r3, [r4, r3]
1000d42c:	07db      	lsls	r3, r3, #31
1000d42e:	d50a      	bpl.n	1000d446 <uart_tx0_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
			module->status = STATUS_OK;
1000d430:	2200      	movs	r2, #0
1000d432:	2322      	movs	r3, #34	; 0x22
1000d434:	54e2      	strb	r2, [r4, r3]
			/* Disable interrupt */
			module->hw->TX_INTERRUPT_MASK.reg &=
1000d436:	6822      	ldr	r2, [r4, #0]
1000d438:	7a13      	ldrb	r3, [r2, #8]
1000d43a:	2110      	movs	r1, #16
1000d43c:	438b      	bics	r3, r1
1000d43e:	7213      	strb	r3, [r2, #8]
				~UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
			(module->callback[UART_TX_COMPLETE])(module);
1000d440:	0020      	movs	r0, r4
1000d442:	6863      	ldr	r3, [r4, #4]
1000d444:	4798      	blx	r3
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
1000d446:	06ab      	lsls	r3, r5, #26
1000d448:	d50a      	bpl.n	1000d460 <uart_tx0_isr_handler+0x84>
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
1000d44a:	2321      	movs	r3, #33	; 0x21
1000d44c:	5ce3      	ldrb	r3, [r4, r3]
1000d44e:	079b      	lsls	r3, r3, #30
1000d450:	d506      	bpl.n	1000d460 <uart_tx0_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
1000d452:	2320      	movs	r3, #32
			(module->callback[UART_TX_COMPLETE])(module);
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
1000d454:	5ce3      	ldrb	r3, [r4, r3]
1000d456:	079b      	lsls	r3, r3, #30
1000d458:	d502      	bpl.n	1000d460 <uart_tx0_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
			(module->callback[UART_CTS_ACTIVE])(module);
1000d45a:	68a3      	ldr	r3, [r4, #8]
1000d45c:	0020      	movs	r0, r4
1000d45e:	4798      	blx	r3
		}

	}
}
1000d460:	bd70      	pop	{r4, r5, r6, pc}
1000d462:	46c0      	nop			; (mov r8, r8)
1000d464:	1001a434 	.word	0x1001a434

1000d468 <uart_rx1_isr_handler>:

static void uart_rx1_isr_handler(void)
{
1000d468:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[1];
1000d46a:	4b20      	ldr	r3, [pc, #128]	; (1000d4ec <uart_rx1_isr_handler+0x84>)
1000d46c:	685c      	ldr	r4, [r3, #4]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->RECEIVE_STATUS.reg;
1000d46e:	6823      	ldr	r3, [r4, #0]
1000d470:	7d1d      	ldrb	r5, [r3, #20]
1000d472:	b2ed      	uxtb	r5, r5
	if (flags & UART_RECEIVE_STATUS_FIFO_OVERRUN) {
1000d474:	066a      	lsls	r2, r5, #25
1000d476:	d513      	bpl.n	1000d4a0 <uart_rx1_isr_handler+0x38>
		/* Store the error code */
		module->status = STATUS_ERR_OVERFLOW;
1000d478:	211e      	movs	r1, #30
1000d47a:	2222      	movs	r2, #34	; 0x22
1000d47c:	54a1      	strb	r1, [r4, r2]
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
1000d47e:	7e1a      	ldrb	r2, [r3, #24]
1000d480:	3123      	adds	r1, #35	; 0x23
1000d482:	438a      	bics	r2, r1
1000d484:	761a      	strb	r2, [r3, #24]
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
1000d486:	2321      	movs	r3, #33	; 0x21
1000d488:	5ce3      	ldrb	r3, [r4, r3]
1000d48a:	071b      	lsls	r3, r3, #28
1000d48c:	d506      	bpl.n	1000d49c <uart_rx1_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
1000d48e:	2320      	movs	r3, #32
		module->status = STATUS_ERR_OVERFLOW;
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
1000d490:	5ce3      	ldrb	r3, [r4, r3]
1000d492:	071b      	lsls	r3, r3, #28
1000d494:	d502      	bpl.n	1000d49c <uart_rx1_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
			(module->callback[UART_RX_FIFO_OVERRUN])(module);
1000d496:	0020      	movs	r0, r4
1000d498:	6923      	ldr	r3, [r4, #16]
1000d49a:	4798      	blx	r3
		}
		/* Flush */
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
1000d49c:	6823      	ldr	r3, [r4, #0]
1000d49e:	7c1b      	ldrb	r3, [r3, #16]
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1000d4a0:	07eb      	lsls	r3, r5, #31
1000d4a2:	d522      	bpl.n	1000d4ea <uart_rx1_isr_handler+0x82>
		struct uart_module *const module)
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	uint16_t received_data = (uart_hw->RECEIVE_DATA.reg & UART_RECEIVE_DATA_MASK);
1000d4a4:	6823      	ldr	r3, [r4, #0]
1000d4a6:	7c1b      	ldrb	r3, [r3, #16]
1000d4a8:	b2db      	uxtb	r3, r3

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
1000d4aa:	6962      	ldr	r2, [r4, #20]
1000d4ac:	7013      	strb	r3, [r2, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
1000d4ae:	6963      	ldr	r3, [r4, #20]
1000d4b0:	3301      	adds	r3, #1
1000d4b2:	6163      	str	r3, [r4, #20]

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
1000d4b4:	8ba3      	ldrh	r3, [r4, #28]
1000d4b6:	3b01      	subs	r3, #1
1000d4b8:	b29b      	uxth	r3, r3
1000d4ba:	83a3      	strh	r3, [r4, #28]
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
1000d4bc:	8ba3      	ldrh	r3, [r4, #28]
1000d4be:	b29b      	uxth	r3, r3
1000d4c0:	2b00      	cmp	r3, #0
1000d4c2:	d112      	bne.n	1000d4ea <uart_rx1_isr_handler+0x82>
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
1000d4c4:	3321      	adds	r3, #33	; 0x21
1000d4c6:	5ce3      	ldrb	r3, [r4, r3]
1000d4c8:	075b      	lsls	r3, r3, #29
1000d4ca:	d50e      	bpl.n	1000d4ea <uart_rx1_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
1000d4cc:	2320      	movs	r3, #32
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
1000d4ce:	5ce3      	ldrb	r3, [r4, r3]
1000d4d0:	075b      	lsls	r3, r3, #29
1000d4d2:	d50a      	bpl.n	1000d4ea <uart_rx1_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
				module->status = STATUS_OK;
1000d4d4:	2200      	movs	r2, #0
1000d4d6:	2322      	movs	r3, #34	; 0x22
1000d4d8:	54e2      	strb	r2, [r4, r3]
				module->hw->RX_INTERRUPT_MASK.reg &=
1000d4da:	6822      	ldr	r2, [r4, #0]
1000d4dc:	7e13      	ldrb	r3, [r2, #24]
1000d4de:	2101      	movs	r1, #1
1000d4e0:	438b      	bics	r3, r1
1000d4e2:	7613      	strb	r3, [r2, #24]
					~(UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
				(module->callback[UART_RX_COMPLETE])(module);
1000d4e4:	68e3      	ldr	r3, [r4, #12]
1000d4e6:	0020      	movs	r0, r4
1000d4e8:	4798      	blx	r3
			}
		}
	}
}
1000d4ea:	bd70      	pop	{r4, r5, r6, pc}
1000d4ec:	1001a434 	.word	0x1001a434

1000d4f0 <uart_tx1_isr_handler>:

static void uart_tx1_isr_handler(void)
{
1000d4f0:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[1];
1000d4f2:	4b21      	ldr	r3, [pc, #132]	; (1000d578 <uart_tx1_isr_handler+0x88>)
1000d4f4:	685c      	ldr	r4, [r3, #4]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
1000d4f6:	6823      	ldr	r3, [r4, #0]
1000d4f8:	791d      	ldrb	r5, [r3, #4]
1000d4fa:	b2ed      	uxtb	r5, r5
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
1000d4fc:	07ea      	lsls	r2, r5, #31
1000d4fe:	d517      	bpl.n	1000d530 <uart_tx1_isr_handler+0x40>
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	/* Write value will be at least 8-bits long */
	uint8_t data_to_send = *(module->tx_buffer_ptr);
1000d500:	69a2      	ldr	r2, [r4, #24]
1000d502:	7811      	ldrb	r1, [r2, #0]
1000d504:	b2c9      	uxtb	r1, r1
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
1000d506:	3201      	adds	r2, #1
1000d508:	61a2      	str	r2, [r4, #24]

	/* Write the data to send*/
	uart_hw->TRANSMIT_DATA.reg = data_to_send & UART_TRANSMIT_DATA_MASK;
1000d50a:	7019      	strb	r1, [r3, #0]

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
1000d50c:	8be3      	ldrh	r3, [r4, #30]
1000d50e:	3b01      	subs	r3, #1
1000d510:	b29b      	uxth	r3, r3
1000d512:	83e3      	strh	r3, [r4, #30]
	struct uart_module *module = _uart_instances[1];
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
		_uart_write(module);
		if (module->remaining_tx_buffer_length == 0) {
1000d514:	8be3      	ldrh	r3, [r4, #30]
1000d516:	b29b      	uxth	r3, r3
1000d518:	2b00      	cmp	r3, #0
1000d51a:	d109      	bne.n	1000d530 <uart_tx1_isr_handler+0x40>
			module->hw->TX_INTERRUPT_MASK.reg &=
1000d51c:	6822      	ldr	r2, [r4, #0]
1000d51e:	7a13      	ldrb	r3, [r2, #8]
1000d520:	2101      	movs	r1, #1
1000d522:	438b      	bics	r3, r1
1000d524:	7213      	strb	r3, [r2, #8]
					~UART_TX_INTERRUPT_MASK_TX_FIFO_NOT_FULL_MASK;
			module->hw->TX_INTERRUPT_MASK.reg |=
1000d526:	6822      	ldr	r2, [r4, #0]
1000d528:	7a11      	ldrb	r1, [r2, #8]
1000d52a:	2310      	movs	r3, #16
1000d52c:	430b      	orrs	r3, r1
1000d52e:	7213      	strb	r3, [r2, #8]
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
1000d530:	06eb      	lsls	r3, r5, #27
1000d532:	d512      	bpl.n	1000d55a <uart_tx1_isr_handler+0x6a>
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
1000d534:	2321      	movs	r3, #33	; 0x21
1000d536:	5ce3      	ldrb	r3, [r4, r3]
1000d538:	07db      	lsls	r3, r3, #31
1000d53a:	d50e      	bpl.n	1000d55a <uart_tx1_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
1000d53c:	2320      	movs	r3, #32
			module->hw->TX_INTERRUPT_MASK.reg |=
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
1000d53e:	5ce3      	ldrb	r3, [r4, r3]
1000d540:	07db      	lsls	r3, r3, #31
1000d542:	d50a      	bpl.n	1000d55a <uart_tx1_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
			module->status = STATUS_OK;
1000d544:	2200      	movs	r2, #0
1000d546:	2322      	movs	r3, #34	; 0x22
1000d548:	54e2      	strb	r2, [r4, r3]
			/* Disable interrupt */
			module->hw->TX_INTERRUPT_MASK.reg &=
1000d54a:	6822      	ldr	r2, [r4, #0]
1000d54c:	7a13      	ldrb	r3, [r2, #8]
1000d54e:	2110      	movs	r1, #16
1000d550:	438b      	bics	r3, r1
1000d552:	7213      	strb	r3, [r2, #8]
				~UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
			(module->callback[UART_TX_COMPLETE])(module);
1000d554:	0020      	movs	r0, r4
1000d556:	6863      	ldr	r3, [r4, #4]
1000d558:	4798      	blx	r3
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
1000d55a:	06ab      	lsls	r3, r5, #26
1000d55c:	d50a      	bpl.n	1000d574 <uart_tx1_isr_handler+0x84>
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
1000d55e:	2321      	movs	r3, #33	; 0x21
1000d560:	5ce3      	ldrb	r3, [r4, r3]
1000d562:	079b      	lsls	r3, r3, #30
1000d564:	d506      	bpl.n	1000d574 <uart_tx1_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
1000d566:	2320      	movs	r3, #32
			(module->callback[UART_TX_COMPLETE])(module);
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
1000d568:	5ce3      	ldrb	r3, [r4, r3]
1000d56a:	079b      	lsls	r3, r3, #30
1000d56c:	d502      	bpl.n	1000d574 <uart_tx1_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
			(module->callback[UART_CTS_ACTIVE])(module);
1000d56e:	68a3      	ldr	r3, [r4, #8]
1000d570:	0020      	movs	r0, r4
1000d572:	4798      	blx	r3
		}

	}
}
1000d574:	bd70      	pop	{r4, r5, r6, pc}
1000d576:	46c0      	nop			; (mov r8, r8)
1000d578:	1001a434 	.word	0x1001a434

1000d57c <uart_get_config_defaults>:
 * \param[out] config  Pointer to configuration structure to be initiated
 */
void uart_get_config_defaults(
		struct uart_config *const config)
{
	config->baud_rate = 115200;
1000d57c:	23e1      	movs	r3, #225	; 0xe1
1000d57e:	025b      	lsls	r3, r3, #9
1000d580:	6003      	str	r3, [r0, #0]
	config->data_bits = UART_8_BITS;
1000d582:	2300      	movs	r3, #0
1000d584:	7103      	strb	r3, [r0, #4]
	config->stop_bits = UART_1_STOP_BIT;
1000d586:	7143      	strb	r3, [r0, #5]
	config->parity = UART_NO_PARITY;
1000d588:	7183      	strb	r3, [r0, #6]
	config->flow_control = false;
1000d58a:	71c3      	strb	r3, [r0, #7]

	config->pin_number_pad[0] = PIN_LP_GPIO_2;
1000d58c:	3302      	adds	r3, #2
1000d58e:	6083      	str	r3, [r0, #8]
	config->pin_number_pad[1] = PIN_LP_GPIO_3;
1000d590:	2203      	movs	r2, #3
1000d592:	60c2      	str	r2, [r0, #12]
	config->pin_number_pad[2] = PIN_LP_GPIO_4;
1000d594:	3201      	adds	r2, #1
1000d596:	6102      	str	r2, [r0, #16]
	config->pin_number_pad[3] = PIN_LP_GPIO_5;
1000d598:	3201      	adds	r2, #1
1000d59a:	6142      	str	r2, [r0, #20]

	config->pinmux_sel_pad[0] = MUX_LP_GPIO_2_UART0_RXD;
1000d59c:	6183      	str	r3, [r0, #24]
	config->pinmux_sel_pad[1] = MUX_LP_GPIO_3_UART0_TXD;
1000d59e:	61c3      	str	r3, [r0, #28]
	config->pinmux_sel_pad[2] = MUX_LP_GPIO_4_UART0_CTS;
1000d5a0:	6203      	str	r3, [r0, #32]
	config->pinmux_sel_pad[3] = MUX_LP_GPIO_5_UART0_RTS;
1000d5a2:	6243      	str	r3, [r0, #36]	; 0x24
}
1000d5a4:	4770      	bx	lr
1000d5a6:	46c0      	nop			; (mov r8, r8)

1000d5a8 <uart_init>:
 *
 * \retval STATUS_OK                       The initialization was successful
 */
enum status_code uart_init(struct uart_module *const module, Uart * const hw,
		const struct uart_config *const config)
{
1000d5a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000d5aa:	464f      	mov	r7, r9
1000d5ac:	4646      	mov	r6, r8
1000d5ae:	b4c0      	push	{r6, r7}
1000d5b0:	0005      	movs	r5, r0
1000d5b2:	0017      	movs	r7, r2

	uint8_t config_temp = 0;
	uint8_t i,index;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
1000d5b4:	6001      	str	r1, [r0, #0]

	for (i = 0; i < UART_CALLBACK_N; i++) {
		module->callback[i] = NULL;
1000d5b6:	2300      	movs	r3, #0
1000d5b8:	6043      	str	r3, [r0, #4]
1000d5ba:	6083      	str	r3, [r0, #8]
1000d5bc:	60c3      	str	r3, [r0, #12]
1000d5be:	6103      	str	r3, [r0, #16]
	}
	module->rx_buffer_ptr = NULL;
1000d5c0:	6143      	str	r3, [r0, #20]
	module->tx_buffer_ptr = NULL;
1000d5c2:	6183      	str	r3, [r0, #24]
	module->remaining_rx_buffer_length = 0;
1000d5c4:	2200      	movs	r2, #0
1000d5c6:	8383      	strh	r3, [r0, #28]
	module->remaining_tx_buffer_length = 0;
1000d5c8:	83c3      	strh	r3, [r0, #30]
	module->callback_reg_mask = 0;
1000d5ca:	3320      	adds	r3, #32
1000d5cc:	54c2      	strb	r2, [r0, r3]
	module->callback_enable_mask = 0;
1000d5ce:	3301      	adds	r3, #1
1000d5d0:	54c2      	strb	r2, [r0, r3]
	module->status = STATUS_OK;
1000d5d2:	3301      	adds	r3, #1
1000d5d4:	54c2      	strb	r2, [r0, r3]

	if (hw == UART0) {
1000d5d6:	4b55      	ldr	r3, [pc, #340]	; (1000d72c <uart_init+0x184>)
1000d5d8:	4299      	cmp	r1, r3
1000d5da:	d118      	bne.n	1000d60e <uart_init+0x66>
		system_peripheral_reset(PERIPHERAL_UART0_CORE);
1000d5dc:	2009      	movs	r0, #9
1000d5de:	4c54      	ldr	r4, [pc, #336]	; (1000d730 <uart_init+0x188>)
1000d5e0:	47a0      	blx	r4
		system_peripheral_reset(PERIPHERAL_UART0_IF);
1000d5e2:	200a      	movs	r0, #10
1000d5e4:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART0_CORE);
1000d5e6:	2009      	movs	r0, #9
1000d5e8:	4c52      	ldr	r4, [pc, #328]	; (1000d734 <uart_init+0x18c>)
1000d5ea:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART0_IF);
1000d5ec:	200a      	movs	r0, #10
1000d5ee:	47a0      	blx	r4
		_uart_instances[0] = module;
1000d5f0:	4b51      	ldr	r3, [pc, #324]	; (1000d738 <uart_init+0x190>)
1000d5f2:	601d      	str	r5, [r3, #0]
		system_register_isr(RAM_ISR_TABLE_UARTRX0_INDEX, (uint32_t)uart_rx0_isr_handler);
1000d5f4:	4951      	ldr	r1, [pc, #324]	; (1000d73c <uart_init+0x194>)
1000d5f6:	2010      	movs	r0, #16
1000d5f8:	4c51      	ldr	r4, [pc, #324]	; (1000d740 <uart_init+0x198>)
1000d5fa:	47a0      	blx	r4
		system_register_isr(RAM_ISR_TABLE_UARTTX0_INDEX, (uint32_t)uart_tx0_isr_handler);
1000d5fc:	4951      	ldr	r1, [pc, #324]	; (1000d744 <uart_init+0x19c>)
1000d5fe:	2011      	movs	r0, #17
1000d600:	47a0      	blx	r4
1000d602:	4b51      	ldr	r3, [pc, #324]	; (1000d748 <uart_init+0x1a0>)
1000d604:	2201      	movs	r2, #1
1000d606:	601a      	str	r2, [r3, #0]
1000d608:	3201      	adds	r2, #1
1000d60a:	601a      	str	r2, [r3, #0]
1000d60c:	e01a      	b.n	1000d644 <uart_init+0x9c>
		NVIC_EnableIRQ(UART0_RX_IRQn);
		NVIC_EnableIRQ(UART0_TX_IRQn);
	} else if (hw == UART1) {
1000d60e:	4b4f      	ldr	r3, [pc, #316]	; (1000d74c <uart_init+0x1a4>)
1000d610:	4299      	cmp	r1, r3
1000d612:	d117      	bne.n	1000d644 <uart_init+0x9c>
		system_peripheral_reset(PERIPHERAL_UART1_CORE);
1000d614:	200b      	movs	r0, #11
1000d616:	4c46      	ldr	r4, [pc, #280]	; (1000d730 <uart_init+0x188>)
1000d618:	47a0      	blx	r4
		system_peripheral_reset(PERIPHERAL_UART1_IF);
1000d61a:	200c      	movs	r0, #12
1000d61c:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART1_CORE);
1000d61e:	200b      	movs	r0, #11
1000d620:	4c44      	ldr	r4, [pc, #272]	; (1000d734 <uart_init+0x18c>)
1000d622:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART1_IF);
1000d624:	200c      	movs	r0, #12
1000d626:	47a0      	blx	r4
		_uart_instances[1] = module;
1000d628:	4b43      	ldr	r3, [pc, #268]	; (1000d738 <uart_init+0x190>)
1000d62a:	605d      	str	r5, [r3, #4]
		system_register_isr(RAM_ISR_TABLE_UARTRX1_INDEX, (uint32_t)uart_rx1_isr_handler);
1000d62c:	4948      	ldr	r1, [pc, #288]	; (1000d750 <uart_init+0x1a8>)
1000d62e:	2012      	movs	r0, #18
1000d630:	4c43      	ldr	r4, [pc, #268]	; (1000d740 <uart_init+0x198>)
1000d632:	47a0      	blx	r4
		system_register_isr(RAM_ISR_TABLE_UARTTX1_INDEX, (uint32_t)uart_tx1_isr_handler);
1000d634:	4947      	ldr	r1, [pc, #284]	; (1000d754 <uart_init+0x1ac>)
1000d636:	2013      	movs	r0, #19
1000d638:	47a0      	blx	r4
1000d63a:	4b43      	ldr	r3, [pc, #268]	; (1000d748 <uart_init+0x1a0>)
1000d63c:	2204      	movs	r2, #4
1000d63e:	601a      	str	r2, [r3, #0]
1000d640:	3204      	adds	r2, #4
1000d642:	601a      	str	r2, [r3, #0]
		NVIC_EnableIRQ(UART1_RX_IRQn);
		NVIC_EnableIRQ(UART1_TX_IRQn);
	}

	/* Set the pinmux for this UART module. */
	if(config->flow_control) {
1000d644:	79fb      	ldrb	r3, [r7, #7]
		index = 4;
1000d646:	2204      	movs	r2, #4
1000d648:	4690      	mov	r8, r2
		NVIC_EnableIRQ(UART1_RX_IRQn);
		NVIC_EnableIRQ(UART1_TX_IRQn);
	}

	/* Set the pinmux for this UART module. */
	if(config->flow_control) {
1000d64a:	2b00      	cmp	r3, #0
1000d64c:	d152      	bne.n	1000d6f4 <uart_init+0x14c>
		index = 4;
	} else {
		index = 2;
1000d64e:	3302      	adds	r3, #2
1000d650:	4698      	mov	r8, r3
1000d652:	e04f      	b.n	1000d6f4 <uart_init+0x14c>
#if (BTLC1000)
    index = 2;  /* BTLC1000 has no flow control function. */
#endif

	for(i = 0; i < index; i++) {
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
1000d654:	8a31      	ldrh	r1, [r6, #16]
1000d656:	ce01      	ldmia	r6!, {r0}
1000d658:	b2c0      	uxtb	r0, r0
1000d65a:	47c8      	blx	r9

#if (BTLC1000)
    index = 2;  /* BTLC1000 has no flow control function. */
#endif

	for(i = 0; i < index; i++) {
1000d65c:	3401      	adds	r4, #1
1000d65e:	b2e4      	uxtb	r4, r4
1000d660:	4544      	cmp	r4, r8
1000d662:	d3f7      	bcc.n	1000d654 <uart_init+0xac>
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
								(uint16_t)(config->pinmux_sel_pad[i]));
	}

	/* empty UART FIFO */
	while (module->hw->RECEIVE_STATUS.reg & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1000d664:	682b      	ldr	r3, [r5, #0]
1000d666:	7d1a      	ldrb	r2, [r3, #20]
1000d668:	07d2      	lsls	r2, r2, #31
1000d66a:	d504      	bpl.n	1000d676 <uart_init+0xce>
1000d66c:	2101      	movs	r1, #1
		i = module->hw->RECEIVE_DATA.reg;
1000d66e:	7c1a      	ldrb	r2, [r3, #16]
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
								(uint16_t)(config->pinmux_sel_pad[i]));
	}

	/* empty UART FIFO */
	while (module->hw->RECEIVE_STATUS.reg & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1000d670:	7d1a      	ldrb	r2, [r3, #20]
1000d672:	420a      	tst	r2, r1
1000d674:	d1fb      	bne.n	1000d66e <uart_init+0xc6>
		i = module->hw->RECEIVE_DATA.reg;
	}
	
	/* reset configuration register */
	module->hw->UART_CONFIGURATION.reg = 0;
1000d676:	2100      	movs	r1, #0
1000d678:	2220      	movs	r2, #32
1000d67a:	5499      	strb	r1, [r3, r2]

	/* program the uart configuration. */
	if(config->flow_control) {
1000d67c:	79fb      	ldrb	r3, [r7, #7]
		config_temp |= UART_CONFIGURATION_CTS_ENABLE_1;
1000d67e:	1e59      	subs	r1, r3, #1
1000d680:	418b      	sbcs	r3, r1
1000d682:	0159      	lsls	r1, r3, #5
	}
	config_temp |= config->data_bits;
	config_temp |= config->stop_bits;
1000d684:	793b      	ldrb	r3, [r7, #4]
1000d686:	797a      	ldrb	r2, [r7, #5]
1000d688:	4313      	orrs	r3, r2
1000d68a:	430b      	orrs	r3, r1
	switch(config->parity) {
1000d68c:	79ba      	ldrb	r2, [r7, #6]
1000d68e:	2a02      	cmp	r2, #2
1000d690:	d00d      	beq.n	1000d6ae <uart_init+0x106>
1000d692:	b2d1      	uxtb	r1, r2
1000d694:	2902      	cmp	r1, #2
1000d696:	d802      	bhi.n	1000d69e <uart_init+0xf6>
1000d698:	2a01      	cmp	r2, #1
1000d69a:	d005      	beq.n	1000d6a8 <uart_init+0x100>
1000d69c:	e00f      	b.n	1000d6be <uart_init+0x116>
1000d69e:	2a03      	cmp	r2, #3
1000d6a0:	d008      	beq.n	1000d6b4 <uart_init+0x10c>
1000d6a2:	2a04      	cmp	r2, #4
1000d6a4:	d009      	beq.n	1000d6ba <uart_init+0x112>
1000d6a6:	e00a      	b.n	1000d6be <uart_init+0x116>
		case UART_NO_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_0;
			break;

		case UART_EVEN_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_1;
1000d6a8:	2202      	movs	r2, #2
1000d6aa:	4313      	orrs	r3, r2
			config_temp |= UART_CONFIGURATION_PARITY_MODE_0;
			break;
1000d6ac:	e007      	b.n	1000d6be <uart_init+0x116>

		case UART_ODD_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_1;
			config_temp |= UART_CONFIGURATION_PARITY_MODE_1;
1000d6ae:	2206      	movs	r2, #6
1000d6b0:	4313      	orrs	r3, r2
			break;
1000d6b2:	e004      	b.n	1000d6be <uart_init+0x116>

		case UART_SPACE_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_1;
			config_temp |= UART_CONFIGURATION_PARITY_MODE_2;
1000d6b4:	220a      	movs	r2, #10
1000d6b6:	4313      	orrs	r3, r2
			break;
1000d6b8:	e001      	b.n	1000d6be <uart_init+0x116>

		case UART_MARK_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_1;
			config_temp |= UART_CONFIGURATION_PARITY_MODE_3;
1000d6ba:	220e      	movs	r2, #14
1000d6bc:	4313      	orrs	r3, r2
			break;

		default:
			break;
	}	
	module->hw->UART_CONFIGURATION.reg = config_temp;
1000d6be:	2220      	movs	r2, #32
1000d6c0:	6829      	ldr	r1, [r5, #0]
1000d6c2:	548b      	strb	r3, [r1, r2]

	/* Calculate the baud rate. */
	uart_set_baudrate(module, config->baud_rate);
1000d6c4:	683e      	ldr	r6, [r7, #0]
	uint16_t integerpart = 0;
	uint8_t fractionalpart = 0;
	uint32_t diff;
	uint8_t i = 0;

	clock = system_clock_get_value();
1000d6c6:	4b24      	ldr	r3, [pc, #144]	; (1000d758 <uart_init+0x1b0>)
1000d6c8:	4798      	blx	r3
1000d6ca:	0004      	movs	r4, r0
	integerpart = clock / baud_rate;
1000d6cc:	0031      	movs	r1, r6
1000d6ce:	4b23      	ldr	r3, [pc, #140]	; (1000d75c <uart_init+0x1b4>)
1000d6d0:	4798      	blx	r3
1000d6d2:	b282      	uxth	r2, r0
	diff = clock - (baud_rate * integerpart);
1000d6d4:	0400      	lsls	r0, r0, #16
1000d6d6:	0c00      	lsrs	r0, r0, #16
1000d6d8:	4370      	muls	r0, r6
1000d6da:	1a20      	subs	r0, r4, r0
	i = 0;
	while(diff > (baud_rate / 16)) {
1000d6dc:	0931      	lsrs	r1, r6, #4
1000d6de:	4288      	cmp	r0, r1
1000d6e0:	d906      	bls.n	1000d6f0 <uart_init+0x148>
1000d6e2:	2300      	movs	r3, #0
		i++;
1000d6e4:	3301      	adds	r3, #1
1000d6e6:	b2db      	uxtb	r3, r3
		diff -= (baud_rate / 16);
1000d6e8:	1a40      	subs	r0, r0, r1

	clock = system_clock_get_value();
	integerpart = clock / baud_rate;
	diff = clock - (baud_rate * integerpart);
	i = 0;
	while(diff > (baud_rate / 16)) {
1000d6ea:	4288      	cmp	r0, r1
1000d6ec:	d8fa      	bhi.n	1000d6e4 <uart_init+0x13c>
1000d6ee:	e007      	b.n	1000d700 <uart_init+0x158>
	uint8_t i = 0;

	clock = system_clock_get_value();
	integerpart = clock / baud_rate;
	diff = clock - (baud_rate * integerpart);
	i = 0;
1000d6f0:	2300      	movs	r3, #0
1000d6f2:	e005      	b.n	1000d700 <uart_init+0x158>
1000d6f4:	003e      	movs	r6, r7
1000d6f6:	3608      	adds	r6, #8
 *
 * \retval STATUS_OK                       The initialization was successful
 */
enum status_code uart_init(struct uart_module *const module, Uart * const hw,
		const struct uart_config *const config)
{
1000d6f8:	2400      	movs	r4, #0
#if (BTLC1000)
    index = 2;  /* BTLC1000 has no flow control function. */
#endif

	for(i = 0; i < index; i++) {
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
1000d6fa:	4b19      	ldr	r3, [pc, #100]	; (1000d760 <uart_init+0x1b8>)
1000d6fc:	4699      	mov	r9, r3
1000d6fe:	e7a9      	b.n	1000d654 <uart_init+0xac>
		i++;
		diff -= (baud_rate / 16);
	}
	fractionalpart = (i + 1) / 2;

	module->hw->UART_CLOCK_SOURCE.reg = UART_CLOCK_SOURCE_CLOCK_SELECT_0;
1000d700:	2100      	movs	r1, #0
1000d702:	2028      	movs	r0, #40	; 0x28
1000d704:	682c      	ldr	r4, [r5, #0]
1000d706:	5421      	strb	r1, [r4, r0]
	module->hw->UART_BAUD_RATE.reg =
1000d708:	3301      	adds	r3, #1
1000d70a:	071b      	lsls	r3, r3, #28
1000d70c:	0f5b      	lsrs	r3, r3, #29
1000d70e:	00d2      	lsls	r2, r2, #3
1000d710:	4313      	orrs	r3, r2
1000d712:	b29b      	uxth	r3, r3
1000d714:	682a      	ldr	r2, [r5, #0]
1000d716:	8493      	strh	r3, [r2, #36]	; 0x24
	module->hw->UART_CONFIGURATION.reg = config_temp;

	/* Calculate the baud rate. */
	uart_set_baudrate(module, config->baud_rate);

	module->hw->RX_INTERRUPT_MASK.reg = 0;	// disable int at initialization, enable it at read time
1000d718:	682b      	ldr	r3, [r5, #0]
1000d71a:	7619      	strb	r1, [r3, #24]
	module->hw->TX_INTERRUPT_MASK.reg = 0;	// disable int at initialization, enable it at write time
1000d71c:	682b      	ldr	r3, [r5, #0]
1000d71e:	7219      	strb	r1, [r3, #8]
	
	return STATUS_OK;
}
1000d720:	2000      	movs	r0, #0
1000d722:	bc0c      	pop	{r2, r3}
1000d724:	4690      	mov	r8, r2
1000d726:	4699      	mov	r9, r3
1000d728:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000d72a:	46c0      	nop			; (mov r8, r8)
1000d72c:	40004000 	.word	0x40004000
1000d730:	1000cedd 	.word	0x1000cedd
1000d734:	1000c815 	.word	0x1000c815
1000d738:	1001a434 	.word	0x1001a434
1000d73c:	1000d355 	.word	0x1000d355
1000d740:	1000d345 	.word	0x1000d345
1000d744:	1000d3dd 	.word	0x1000d3dd
1000d748:	e000e100 	.word	0xe000e100
1000d74c:	40005000 	.word	0x40005000
1000d750:	1000d469 	.word	0x1000d469
1000d754:	1000d4f1 	.word	0x1000d4f1
1000d758:	1000c809 	.word	0x1000c809
1000d75c:	10013135 	.word	0x10013135
1000d760:	1000c465 	.word	0x1000c465

1000d764 <uart_write_wait>:
* \retval STATUS_OK         If the operation was completed
*/
enum status_code uart_write_wait(struct uart_module *const module,
		const uint8_t tx_data)
{
	while (!(module->hw->TRANSMIT_STATUS.reg & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL));
1000d764:	6802      	ldr	r2, [r0, #0]
1000d766:	2001      	movs	r0, #1
1000d768:	7913      	ldrb	r3, [r2, #4]
1000d76a:	4203      	tst	r3, r0
1000d76c:	d0fc      	beq.n	1000d768 <uart_write_wait+0x4>

	module->hw->TRANSMIT_DATA.reg = tx_data;
1000d76e:	7011      	strb	r1, [r2, #0]
	
	return STATUS_OK;
}
1000d770:	2000      	movs	r0, #0
1000d772:	4770      	bx	lr

1000d774 <uart_read_wait>:
* \retval STATUS_OK                If the operation was completed
*/
enum status_code uart_read_wait(struct uart_module *const module,
		uint8_t *const rx_data)
{
	while (!(module->hw->RECEIVE_STATUS.reg & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY));
1000d774:	6802      	ldr	r2, [r0, #0]
1000d776:	2001      	movs	r0, #1
1000d778:	7d13      	ldrb	r3, [r2, #20]
1000d77a:	4203      	tst	r3, r0
1000d77c:	d0fc      	beq.n	1000d778 <uart_read_wait+0x4>

	*rx_data = module->hw->RECEIVE_DATA.reg;
1000d77e:	7c13      	ldrb	r3, [r2, #16]
1000d780:	700b      	strb	r3, [r1, #0]
	
	return STATUS_OK;
}
1000d782:	2000      	movs	r0, #0
1000d784:	4770      	bx	lr
1000d786:	46c0      	nop			; (mov r8, r8)

1000d788 <uart_read_buffer_job>:
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
1000d788:	2317      	movs	r3, #23
{
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
1000d78a:	2a00      	cmp	r2, #0
1000d78c:	d00d      	beq.n	1000d7aa <uart_read_buffer_job+0x22>
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check if the UART is busy transmitting or slave waiting for TXC*/
	if (module->status == STATUS_BUSY) {
1000d78e:	330b      	adds	r3, #11
1000d790:	5cc3      	ldrb	r3, [r0, r3]
1000d792:	b2db      	uxtb	r3, r3
1000d794:	2b05      	cmp	r3, #5
1000d796:	d008      	beq.n	1000d7aa <uart_read_buffer_job+0x22>
	Assert(module);
	Assert(rx_data);

	/* Set length for the buffer and the pointer, and let
	 * the interrupt handler do the rest */
	module->remaining_rx_buffer_length = length;
1000d798:	8382      	strh	r2, [r0, #28]
	module->rx_buffer_ptr = rx_data;
1000d79a:	6141      	str	r1, [r0, #20]
	module->status = STATUS_BUSY;
1000d79c:	2205      	movs	r2, #5
1000d79e:	2322      	movs	r3, #34	; 0x22
1000d7a0:	54c2      	strb	r2, [r0, r3]

	module->hw->RX_INTERRUPT_MASK.reg = UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK;
1000d7a2:	6803      	ldr	r3, [r0, #0]
1000d7a4:	3a04      	subs	r2, #4
1000d7a6:	761a      	strb	r2, [r3, #24]
		return STATUS_BUSY;
	}

	/* Issue internal read */
	_uart_read_buffer(module, rx_data, length);
	return STATUS_OK;
1000d7a8:	2300      	movs	r3, #0
}
1000d7aa:	0018      	movs	r0, r3
1000d7ac:	4770      	bx	lr
1000d7ae:	46c0      	nop			; (mov r8, r8)

1000d7b0 <uart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
1000d7b0:	0093      	lsls	r3, r2, #2
1000d7b2:	18c3      	adds	r3, r0, r3
1000d7b4:	6059      	str	r1, [r3, #4]
	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
1000d7b6:	2120      	movs	r1, #32
1000d7b8:	2301      	movs	r3, #1
1000d7ba:	4093      	lsls	r3, r2
1000d7bc:	5c42      	ldrb	r2, [r0, r1]
1000d7be:	4313      	orrs	r3, r2
1000d7c0:	5443      	strb	r3, [r0, r1]
}
1000d7c2:	4770      	bx	lr

1000d7c4 <uart_enable_callback>:
 * \param[in]  module         Pointer to UART software instance struct
 * \param[in]  callback_type  Callback type given by an enum
 */
void uart_enable_callback(struct uart_module *const module,
		enum uart_callback callback_type)
{
1000d7c4:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
1000d7c6:	2221      	movs	r2, #33	; 0x21
1000d7c8:	2301      	movs	r3, #1
1000d7ca:	408b      	lsls	r3, r1
1000d7cc:	5c84      	ldrb	r4, [r0, r2]
1000d7ce:	4323      	orrs	r3, r4
1000d7d0:	5483      	strb	r3, [r0, r2]

	if (callback_type == UART_CTS_ACTIVE) {
1000d7d2:	2901      	cmp	r1, #1
1000d7d4:	d104      	bne.n	1000d7e0 <uart_enable_callback+0x1c>
		module->hw->TX_INTERRUPT_MASK.reg |= UART_TX_INTERRUPT_MASK_CTS_ACTIVE_MASK;
1000d7d6:	6802      	ldr	r2, [r0, #0]
1000d7d8:	7a11      	ldrb	r1, [r2, #8]
1000d7da:	2320      	movs	r3, #32
1000d7dc:	430b      	orrs	r3, r1
1000d7de:	7213      	strb	r3, [r2, #8]
	}
}
1000d7e0:	bd10      	pop	{r4, pc}
1000d7e2:	46c0      	nop			; (mov r8, r8)

1000d7e4 <uart_disable_callback>:
 * \param[in]  module         Pointer to UART software instance struct
 * \param[in]  callback_type  Callback type given by an enum
 */
void uart_disable_callback(struct uart_module *const module,
		enum uart_callback callback_type)
{
1000d7e4:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);

	/* Disable callback */
	module->callback_enable_mask &= ~(1 << callback_type);
1000d7e6:	2201      	movs	r2, #1
1000d7e8:	408a      	lsls	r2, r1
1000d7ea:	2421      	movs	r4, #33	; 0x21
1000d7ec:	5d03      	ldrb	r3, [r0, r4]
1000d7ee:	4393      	bics	r3, r2
1000d7f0:	5503      	strb	r3, [r0, r4]

	if (callback_type == UART_CTS_ACTIVE) {
1000d7f2:	2901      	cmp	r1, #1
1000d7f4:	d104      	bne.n	1000d800 <uart_disable_callback+0x1c>
		module->hw->TX_INTERRUPT_MASK.reg &= ~UART_TX_INTERRUPT_MASK_CTS_ACTIVE_MASK;
1000d7f6:	6802      	ldr	r2, [r0, #0]
1000d7f8:	7a13      	ldrb	r3, [r2, #8]
1000d7fa:	311f      	adds	r1, #31
1000d7fc:	438b      	bics	r3, r1
1000d7fe:	7213      	strb	r3, [r2, #8]
	}

}
1000d800:	bd10      	pop	{r4, pc}
1000d802:	46c0      	nop			; (mov r8, r8)

1000d804 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
1000d804:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d806:	4647      	mov	r7, r8
1000d808:	b480      	push	{r7}
1000d80a:	000c      	movs	r4, r1
1000d80c:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
1000d80e:	2800      	cmp	r0, #0
1000d810:	d10d      	bne.n	1000d82e <_read+0x2a>
		return -1;
	}

	for (; len > 0; --len) {
1000d812:	2a00      	cmp	r2, #0
1000d814:	dd0e      	ble.n	1000d834 <_read+0x30>
1000d816:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
1000d818:	4e08      	ldr	r6, [pc, #32]	; (1000d83c <_read+0x38>)
1000d81a:	4d09      	ldr	r5, [pc, #36]	; (1000d840 <_read+0x3c>)
1000d81c:	6830      	ldr	r0, [r6, #0]
1000d81e:	0021      	movs	r1, r4
1000d820:	682b      	ldr	r3, [r5, #0]
1000d822:	4798      	blx	r3
		ptr++;
1000d824:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
1000d826:	42a7      	cmp	r7, r4
1000d828:	d1f8      	bne.n	1000d81c <_read+0x18>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
1000d82a:	4640      	mov	r0, r8
1000d82c:	e003      	b.n	1000d836 <_read+0x32>
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
1000d82e:	2001      	movs	r0, #1
1000d830:	4240      	negs	r0, r0
1000d832:	e000      	b.n	1000d836 <_read+0x32>
	}

	for (; len > 0; --len) {
1000d834:	2000      	movs	r0, #0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
1000d836:	bc04      	pop	{r2}
1000d838:	4690      	mov	r8, r2
1000d83a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d83c:	1001a444 	.word	0x1001a444
1000d840:	1001a43c 	.word	0x1001a43c

1000d844 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
1000d844:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d846:	4647      	mov	r7, r8
1000d848:	b480      	push	{r7}
1000d84a:	000e      	movs	r6, r1
1000d84c:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
1000d84e:	3801      	subs	r0, #1
1000d850:	2802      	cmp	r0, #2
1000d852:	d811      	bhi.n	1000d878 <_write+0x34>
		return -1;
	}

	for (; len != 0; --len) {
1000d854:	2a00      	cmp	r2, #0
1000d856:	d012      	beq.n	1000d87e <_write+0x3a>
1000d858:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
1000d85a:	4b0c      	ldr	r3, [pc, #48]	; (1000d88c <_write+0x48>)
1000d85c:	4698      	mov	r8, r3
1000d85e:	4f0c      	ldr	r7, [pc, #48]	; (1000d890 <_write+0x4c>)
1000d860:	4643      	mov	r3, r8
1000d862:	6818      	ldr	r0, [r3, #0]
1000d864:	5d31      	ldrb	r1, [r6, r4]
1000d866:	683b      	ldr	r3, [r7, #0]
1000d868:	4798      	blx	r3
1000d86a:	2800      	cmp	r0, #0
1000d86c:	db09      	blt.n	1000d882 <_write+0x3e>
			return -1;
		}
		++nChars;
1000d86e:	3401      	adds	r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
1000d870:	42a5      	cmp	r5, r4
1000d872:	d1f5      	bne.n	1000d860 <_write+0x1c>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
1000d874:	0020      	movs	r0, r4
1000d876:	e006      	b.n	1000d886 <_write+0x42>
_write (int file, char * ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
1000d878:	2001      	movs	r0, #1
1000d87a:	4240      	negs	r0, r0
1000d87c:	e003      	b.n	1000d886 <_write+0x42>
	}

	for (; len != 0; --len) {
1000d87e:	2000      	movs	r0, #0
1000d880:	e001      	b.n	1000d886 <_write+0x42>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
1000d882:	2001      	movs	r0, #1
1000d884:	4240      	negs	r0, r0
		}
		++nChars;
	}
	return nChars;
}
1000d886:	bc04      	pop	{r2}
1000d888:	4690      	mov	r8, r2
1000d88a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d88c:	1001a444 	.word	0x1001a444
1000d890:	1001a440 	.word	0x1001a440

1000d894 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
1000d894:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
1000d896:	4a06      	ldr	r2, [pc, #24]	; (1000d8b0 <_sbrk+0x1c>)
1000d898:	6812      	ldr	r2, [r2, #0]
1000d89a:	2a00      	cmp	r2, #0
1000d89c:	d102      	bne.n	1000d8a4 <_sbrk+0x10>
		heap = (unsigned char *)&_end;
1000d89e:	4905      	ldr	r1, [pc, #20]	; (1000d8b4 <_sbrk+0x20>)
1000d8a0:	4a03      	ldr	r2, [pc, #12]	; (1000d8b0 <_sbrk+0x1c>)
1000d8a2:	6011      	str	r1, [r2, #0]
	}
	prev_heap = heap;
1000d8a4:	4a02      	ldr	r2, [pc, #8]	; (1000d8b0 <_sbrk+0x1c>)
1000d8a6:	6810      	ldr	r0, [r2, #0]

	heap += incr;
1000d8a8:	18c3      	adds	r3, r0, r3
1000d8aa:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
1000d8ac:	4770      	bx	lr
1000d8ae:	46c0      	nop			; (mov r8, r8)
1000d8b0:	100186e4 	.word	0x100186e4
1000d8b4:	1001cd50 	.word	0x1001cd50

1000d8b8 <_close>:
}

extern int _close(int file)
{
	return -1;
}
1000d8b8:	2001      	movs	r0, #1
1000d8ba:	4240      	negs	r0, r0
1000d8bc:	4770      	bx	lr
1000d8be:	46c0      	nop			; (mov r8, r8)

1000d8c0 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
1000d8c0:	2380      	movs	r3, #128	; 0x80
1000d8c2:	019b      	lsls	r3, r3, #6
1000d8c4:	604b      	str	r3, [r1, #4]

	return 0;
}
1000d8c6:	2000      	movs	r0, #0
1000d8c8:	4770      	bx	lr
1000d8ca:	46c0      	nop			; (mov r8, r8)

1000d8cc <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
1000d8cc:	2001      	movs	r0, #1
1000d8ce:	4770      	bx	lr

1000d8d0 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
1000d8d0:	2000      	movs	r0, #0
1000d8d2:	4770      	bx	lr

1000d8d4 <ble_undefined_event_handler>:
	}
	return status;
}

at_ble_status_t ble_undefined_event_handler(void *params)
{
1000d8d4:	b510      	push	{r4, lr}
	DBG_LOG_DEV("Undefined Event Received");
1000d8d6:	4804      	ldr	r0, [pc, #16]	; (1000d8e8 <ble_undefined_event_handler+0x14>)
1000d8d8:	4b04      	ldr	r3, [pc, #16]	; (1000d8ec <ble_undefined_event_handler+0x18>)
1000d8da:	4798      	blx	r3
1000d8dc:	4804      	ldr	r0, [pc, #16]	; (1000d8f0 <ble_undefined_event_handler+0x1c>)
1000d8de:	4b05      	ldr	r3, [pc, #20]	; (1000d8f4 <ble_undefined_event_handler+0x20>)
1000d8e0:	4798      	blx	r3
    ALL_UNUSED(params);
	return AT_BLE_SUCCESS;
}
1000d8e2:	2000      	movs	r0, #0
1000d8e4:	bd10      	pop	{r4, pc}
1000d8e6:	46c0      	nop			; (mov r8, r8)
1000d8e8:	10016660 	.word	0x10016660
1000d8ec:	100154a1 	.word	0x100154a1
1000d8f0:	10017828 	.word	0x10017828
1000d8f4:	10015381 	.word	0x10015381

1000d8f8 <ble_scan_report_handler>:
	}
}

/** @brief function handles scan report */
at_ble_status_t ble_scan_report_handler(void *params)
{
1000d8f8:	b510      	push	{r4, lr}
	at_ble_scan_report_t *scan_report;
	scan_report = (at_ble_scan_report_t *)params;
	if (scan_report->status == AT_BLE_SUCCESS)
1000d8fa:	7800      	ldrb	r0, [r0, #0]
1000d8fc:	2800      	cmp	r0, #0
1000d8fe:	d006      	beq.n	1000d90e <ble_scan_report_handler+0x16>
		/* All scan data should be handled */
		return AT_BLE_SUCCESS;
	}
	else
	{
		DBG_LOG("Scanning  failed");
1000d900:	4803      	ldr	r0, [pc, #12]	; (1000d910 <ble_scan_report_handler+0x18>)
1000d902:	4b04      	ldr	r3, [pc, #16]	; (1000d914 <ble_scan_report_handler+0x1c>)
1000d904:	4798      	blx	r3
1000d906:	4804      	ldr	r0, [pc, #16]	; (1000d918 <ble_scan_report_handler+0x20>)
1000d908:	4b04      	ldr	r3, [pc, #16]	; (1000d91c <ble_scan_report_handler+0x24>)
1000d90a:	4798      	blx	r3
	}
	return AT_BLE_FAILURE;
1000d90c:	20e2      	movs	r0, #226	; 0xe2
}
1000d90e:	bd10      	pop	{r4, pc}
1000d910:	10016660 	.word	0x10016660
1000d914:	100154a1 	.word	0x100154a1
1000d918:	10017844 	.word	0x10017844
1000d91c:	10015381 	.word	0x10015381

1000d920 <ble_adv_report_handler>:

/** @brief function handles advertising report */
at_ble_status_t ble_adv_report_handler(void *params)
{
1000d920:	b510      	push	{r4, lr}
    at_ble_adv_report_t *adv_report;
    adv_report = (at_ble_adv_report_t *)params;
    if(adv_report->status == AT_BLE_SUCCESS)
1000d922:	7800      	ldrb	r0, [r0, #0]
1000d924:	2800      	cmp	r0, #0
1000d926:	d006      	beq.n	1000d936 <ble_adv_report_handler+0x16>
    {
        return AT_BLE_SUCCESS;
    }
    else 
    {
        DBG_LOG("Advertising failed");
1000d928:	4803      	ldr	r0, [pc, #12]	; (1000d938 <ble_adv_report_handler+0x18>)
1000d92a:	4b04      	ldr	r3, [pc, #16]	; (1000d93c <ble_adv_report_handler+0x1c>)
1000d92c:	4798      	blx	r3
1000d92e:	4804      	ldr	r0, [pc, #16]	; (1000d940 <ble_adv_report_handler+0x20>)
1000d930:	4b04      	ldr	r3, [pc, #16]	; (1000d944 <ble_adv_report_handler+0x24>)
1000d932:	4798      	blx	r3
    }
    return AT_BLE_FAILURE;
1000d934:	20e2      	movs	r0, #226	; 0xe2
}
1000d936:	bd10      	pop	{r4, pc}
1000d938:	10016660 	.word	0x10016660
1000d93c:	100154a1 	.word	0x100154a1
1000d940:	10017858 	.word	0x10017858
1000d944:	10015381 	.word	0x10015381

1000d948 <ble_mtu_changed_indication_handler>:
	return AT_BLE_SUCCESS;
	
}

at_ble_status_t ble_mtu_changed_indication_handler(void *params)
{
1000d948:	b510      	push	{r4, lr}
1000d94a:	0004      	movs	r4, r0
	at_ble_mtu_changed_ind_t *mtu_changed_ind;
	mtu_changed_ind = (at_ble_mtu_changed_ind_t *)params;
	DBG_LOG_DEV("BLE-MTU Changed, Connection Handle: %d, New Value: %d", 
1000d94c:	4804      	ldr	r0, [pc, #16]	; (1000d960 <ble_mtu_changed_indication_handler+0x18>)
1000d94e:	4b05      	ldr	r3, [pc, #20]	; (1000d964 <ble_mtu_changed_indication_handler+0x1c>)
1000d950:	4798      	blx	r3
1000d952:	8862      	ldrh	r2, [r4, #2]
1000d954:	8821      	ldrh	r1, [r4, #0]
1000d956:	4804      	ldr	r0, [pc, #16]	; (1000d968 <ble_mtu_changed_indication_handler+0x20>)
1000d958:	4b04      	ldr	r3, [pc, #16]	; (1000d96c <ble_mtu_changed_indication_handler+0x24>)
1000d95a:	4798      	blx	r3
										mtu_changed_ind->conhdl, 
										mtu_changed_ind->mtu_value);
	return AT_BLE_SUCCESS;
}
1000d95c:	2000      	movs	r0, #0
1000d95e:	bd10      	pop	{r4, pc}
1000d960:	10016660 	.word	0x10016660
1000d964:	100154a1 	.word	0x100154a1
1000d968:	1001786c 	.word	0x1001786c
1000d96c:	10015381 	.word	0x10015381

1000d970 <ble_mtu_changed_cmd_complete_handler>:

at_ble_status_t ble_mtu_changed_cmd_complete_handler(void *params)
{
1000d970:	b570      	push	{r4, r5, r6, lr}
1000d972:	0004      	movs	r4, r0
	at_ble_cmd_complete_event_t *cmd_complete_event;
	cmd_complete_event = (at_ble_cmd_complete_event_t *)params;
	
	if (cmd_complete_event->status == AT_BLE_SUCCESS)
1000d974:	78c5      	ldrb	r5, [r0, #3]
1000d976:	2d00      	cmp	r5, #0
1000d978:	d108      	bne.n	1000d98c <ble_mtu_changed_cmd_complete_handler+0x1c>
	{
		DBG_LOG_DEV("MTU Changed, Connection Handle:%d, Operation:%d", 
1000d97a:	480a      	ldr	r0, [pc, #40]	; (1000d9a4 <ble_mtu_changed_cmd_complete_handler+0x34>)
1000d97c:	4b0a      	ldr	r3, [pc, #40]	; (1000d9a8 <ble_mtu_changed_cmd_complete_handler+0x38>)
1000d97e:	4798      	blx	r3
1000d980:	78a2      	ldrb	r2, [r4, #2]
1000d982:	8821      	ldrh	r1, [r4, #0]
1000d984:	4809      	ldr	r0, [pc, #36]	; (1000d9ac <ble_mtu_changed_cmd_complete_handler+0x3c>)
1000d986:	4b0a      	ldr	r3, [pc, #40]	; (1000d9b0 <ble_mtu_changed_cmd_complete_handler+0x40>)
1000d988:	4798      	blx	r3
		cmd_complete_event->conn_handle, 
		cmd_complete_event->operation);
		return AT_BLE_SUCCESS;
1000d98a:	e008      	b.n	1000d99e <ble_mtu_changed_cmd_complete_handler+0x2e>
	}
	else
	{
		DBG_LOG("MTU Change Failed, Connection Handle:%d, Operation:%d",
1000d98c:	4805      	ldr	r0, [pc, #20]	; (1000d9a4 <ble_mtu_changed_cmd_complete_handler+0x34>)
1000d98e:	4b06      	ldr	r3, [pc, #24]	; (1000d9a8 <ble_mtu_changed_cmd_complete_handler+0x38>)
1000d990:	4798      	blx	r3
1000d992:	78a2      	ldrb	r2, [r4, #2]
1000d994:	8821      	ldrh	r1, [r4, #0]
1000d996:	4807      	ldr	r0, [pc, #28]	; (1000d9b4 <ble_mtu_changed_cmd_complete_handler+0x44>)
1000d998:	4b05      	ldr	r3, [pc, #20]	; (1000d9b0 <ble_mtu_changed_cmd_complete_handler+0x40>)
1000d99a:	4798      	blx	r3
		cmd_complete_event->conn_handle,
		cmd_complete_event->operation);
	}
	return AT_BLE_FAILURE;
1000d99c:	25e2      	movs	r5, #226	; 0xe2
}
1000d99e:	0028      	movs	r0, r5
1000d9a0:	bd70      	pop	{r4, r5, r6, pc}
1000d9a2:	46c0      	nop			; (mov r8, r8)
1000d9a4:	10016660 	.word	0x10016660
1000d9a8:	100154a1 	.word	0x100154a1
1000d9ac:	100178a4 	.word	0x100178a4
1000d9b0:	10015381 	.word	0x10015381
1000d9b4:	100178d4 	.word	0x100178d4

1000d9b8 <ble_characteristic_write_cmd_complete_handler>:

at_ble_status_t ble_characteristic_write_cmd_complete_handler(void *params)
{
1000d9b8:	b570      	push	{r4, r5, r6, lr}
1000d9ba:	0004      	movs	r4, r0
	at_ble_cmd_complete_event_t *cmd_complete_event;
	cmd_complete_event = (at_ble_cmd_complete_event_t *)params;
	if (cmd_complete_event->status == AT_BLE_SUCCESS)
1000d9bc:	78c5      	ldrb	r5, [r0, #3]
1000d9be:	2d00      	cmp	r5, #0
1000d9c0:	d108      	bne.n	1000d9d4 <ble_characteristic_write_cmd_complete_handler+0x1c>
	{
		DBG_LOG_DEV("Char Write Cmd Complete, Connection Handle:%d, Operation:%d",
1000d9c2:	480a      	ldr	r0, [pc, #40]	; (1000d9ec <ble_characteristic_write_cmd_complete_handler+0x34>)
1000d9c4:	4b0a      	ldr	r3, [pc, #40]	; (1000d9f0 <ble_characteristic_write_cmd_complete_handler+0x38>)
1000d9c6:	4798      	blx	r3
1000d9c8:	78a2      	ldrb	r2, [r4, #2]
1000d9ca:	8821      	ldrh	r1, [r4, #0]
1000d9cc:	4809      	ldr	r0, [pc, #36]	; (1000d9f4 <ble_characteristic_write_cmd_complete_handler+0x3c>)
1000d9ce:	4b0a      	ldr	r3, [pc, #40]	; (1000d9f8 <ble_characteristic_write_cmd_complete_handler+0x40>)
1000d9d0:	4798      	blx	r3
		cmd_complete_event->conn_handle,
		cmd_complete_event->operation);
		return AT_BLE_SUCCESS;
1000d9d2:	e008      	b.n	1000d9e6 <ble_characteristic_write_cmd_complete_handler+0x2e>
	}
	else
	{
		DBG_LOG_DEV("Char Write Cmd Failed, Connection Handle:%d, Operation:%d",
1000d9d4:	4805      	ldr	r0, [pc, #20]	; (1000d9ec <ble_characteristic_write_cmd_complete_handler+0x34>)
1000d9d6:	4b06      	ldr	r3, [pc, #24]	; (1000d9f0 <ble_characteristic_write_cmd_complete_handler+0x38>)
1000d9d8:	4798      	blx	r3
1000d9da:	78a2      	ldrb	r2, [r4, #2]
1000d9dc:	8821      	ldrh	r1, [r4, #0]
1000d9de:	4807      	ldr	r0, [pc, #28]	; (1000d9fc <ble_characteristic_write_cmd_complete_handler+0x44>)
1000d9e0:	4b05      	ldr	r3, [pc, #20]	; (1000d9f8 <ble_characteristic_write_cmd_complete_handler+0x40>)
1000d9e2:	4798      	blx	r3
		cmd_complete_event->conn_handle,
		cmd_complete_event->operation);
	}
	return AT_BLE_FAILURE;
1000d9e4:	25e2      	movs	r5, #226	; 0xe2
}
1000d9e6:	0028      	movs	r0, r5
1000d9e8:	bd70      	pop	{r4, r5, r6, pc}
1000d9ea:	46c0      	nop			; (mov r8, r8)
1000d9ec:	10016660 	.word	0x10016660
1000d9f0:	100154a1 	.word	0x100154a1
1000d9f4:	1001790c 	.word	0x1001790c
1000d9f8:	10015381 	.word	0x10015381
1000d9fc:	10017948 	.word	0x10017948

1000da00 <ble_disconnected_state_handler>:

/** @brief function handles disconnection event received from stack */
at_ble_status_t ble_disconnected_state_handler(void *params)
{
1000da00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000da02:	0006      	movs	r6, r0
1000da04:	4c1d      	ldr	r4, [pc, #116]	; (1000da7c <ble_disconnected_state_handler+0x7c>)
1000da06:	239b      	movs	r3, #155	; 0x9b
1000da08:	009b      	lsls	r3, r3, #2
1000da0a:	18e7      	adds	r7, r4, r3
1000da0c:	0025      	movs	r5, r4
	uint8_t idx;
	disconnect = (at_ble_disconnected_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == disconnect->handle) && 
1000da0e:	0023      	movs	r3, r4
1000da10:	3b56      	subs	r3, #86	; 0x56
1000da12:	881a      	ldrh	r2, [r3, #0]
1000da14:	8833      	ldrh	r3, [r6, #0]
1000da16:	429a      	cmp	r2, r3
1000da18:	d122      	bne.n	1000da60 <ble_disconnected_state_handler+0x60>
		((ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRED) || (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_COMPLETED)))
1000da1a:	7823      	ldrb	r3, [r4, #0]
	uint8_t idx;
	disconnect = (at_ble_disconnected_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == disconnect->handle) && 
1000da1c:	2b05      	cmp	r3, #5
1000da1e:	d001      	beq.n	1000da24 <ble_disconnected_state_handler+0x24>
		((ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRED) || (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_COMPLETED)))
1000da20:	2b08      	cmp	r3, #8
1000da22:	d102      	bne.n	1000da2a <ble_disconnected_state_handler+0x2a>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_DISCONNECTED;
1000da24:	2301      	movs	r3, #1
1000da26:	702b      	strb	r3, [r5, #0]
1000da28:	e01a      	b.n	1000da60 <ble_disconnected_state_handler+0x60>
		}		
		else if(ble_dev_info[idx].conn_info.handle == disconnect->handle)
		{
			switch (ble_dev_info[idx].conn_state)
1000da2a:	2b07      	cmp	r3, #7
1000da2c:	d80f      	bhi.n	1000da4e <ble_disconnected_state_handler+0x4e>
1000da2e:	009b      	lsls	r3, r3, #2
1000da30:	4a13      	ldr	r2, [pc, #76]	; (1000da80 <ble_disconnected_state_handler+0x80>)
1000da32:	58d3      	ldr	r3, [r2, r3]
1000da34:	469f      	mov	pc, r3
				case BLE_DEVICE_PAIRING_FAILED:
				case BLE_DEVICE_ENCRYPTION_STATE:
				case BLE_DEVICE_ENCRYPTION_FAILED:
				{
					/* Device is not paired so remove the device information */
					ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
1000da36:	2300      	movs	r3, #0
1000da38:	7023      	strb	r3, [r4, #0]
					if (ble_device_count > 0)
1000da3a:	4b12      	ldr	r3, [pc, #72]	; (1000da84 <ble_disconnected_state_handler+0x84>)
1000da3c:	781b      	ldrb	r3, [r3, #0]
1000da3e:	2b00      	cmp	r3, #0
1000da40:	d00e      	beq.n	1000da60 <ble_disconnected_state_handler+0x60>
					{
						ble_device_count--;
1000da42:	4a10      	ldr	r2, [pc, #64]	; (1000da84 <ble_disconnected_state_handler+0x84>)
1000da44:	7813      	ldrb	r3, [r2, #0]
1000da46:	3b01      	subs	r3, #1
1000da48:	b2db      	uxtb	r3, r3
1000da4a:	7013      	strb	r3, [r2, #0]
1000da4c:	e008      	b.n	1000da60 <ble_disconnected_state_handler+0x60>
				
				case BLE_DEVICE_DISCONNECTED:
				break;
				
				default:
				DBG_LOG_DEV("State Not Handled %d", ble_dev_info[idx].conn_state);
1000da4e:	480e      	ldr	r0, [pc, #56]	; (1000da88 <ble_disconnected_state_handler+0x88>)
1000da50:	4b0e      	ldr	r3, [pc, #56]	; (1000da8c <ble_disconnected_state_handler+0x8c>)
1000da52:	4798      	blx	r3
1000da54:	7829      	ldrb	r1, [r5, #0]
1000da56:	480e      	ldr	r0, [pc, #56]	; (1000da90 <ble_disconnected_state_handler+0x90>)
1000da58:	4b0e      	ldr	r3, [pc, #56]	; (1000da94 <ble_disconnected_state_handler+0x94>)
1000da5a:	4798      	blx	r3
				ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
1000da5c:	2300      	movs	r3, #0
1000da5e:	702b      	strb	r3, [r5, #0]
1000da60:	347c      	adds	r4, #124	; 0x7c
{
	at_ble_disconnected_t *disconnect;
	uint8_t idx;
	disconnect = (at_ble_disconnected_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000da62:	42bc      	cmp	r4, r7
1000da64:	d1d2      	bne.n	1000da0c <ble_disconnected_state_handler+0xc>
				break;				
			}
		} 
	}
	
	DBG_LOG("Device disconnected Reason:0x%02x Handle=0x%x", disconnect->reason, disconnect->handle);
1000da66:	4808      	ldr	r0, [pc, #32]	; (1000da88 <ble_disconnected_state_handler+0x88>)
1000da68:	4b08      	ldr	r3, [pc, #32]	; (1000da8c <ble_disconnected_state_handler+0x8c>)
1000da6a:	4798      	blx	r3
1000da6c:	8832      	ldrh	r2, [r6, #0]
1000da6e:	78b1      	ldrb	r1, [r6, #2]
1000da70:	4809      	ldr	r0, [pc, #36]	; (1000da98 <ble_disconnected_state_handler+0x98>)
1000da72:	4b08      	ldr	r3, [pc, #32]	; (1000da94 <ble_disconnected_state_handler+0x94>)
1000da74:	4798      	blx	r3
	return AT_BLE_SUCCESS;
}
1000da76:	2000      	movs	r0, #0
1000da78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000da7a:	46c0      	nop			; (mov r8, r8)
1000da7c:	1001a4be 	.word	0x1001a4be
1000da80:	100176c4 	.word	0x100176c4
1000da84:	1001a6cc 	.word	0x1001a6cc
1000da88:	10016660 	.word	0x10016660
1000da8c:	100154a1 	.word	0x100154a1
1000da90:	10017984 	.word	0x10017984
1000da94:	10015381 	.word	0x10015381
1000da98:	1001799c 	.word	0x1001799c

1000da9c <ble_conn_param_update>:

/** @brief connection update parameter function */
at_ble_status_t ble_conn_param_update(void *params)
{
1000da9c:	b510      	push	{r4, lr}
	at_ble_conn_param_update_done_t * conn_param_update;
	conn_param_update = (at_ble_conn_param_update_done_t *)params;
	DBG_LOG_DEV("AT_BLE_CONN_PARAM_UPDATE ");
1000da9e:	4804      	ldr	r0, [pc, #16]	; (1000dab0 <ble_conn_param_update+0x14>)
1000daa0:	4b04      	ldr	r3, [pc, #16]	; (1000dab4 <ble_conn_param_update+0x18>)
1000daa2:	4798      	blx	r3
1000daa4:	4804      	ldr	r0, [pc, #16]	; (1000dab8 <ble_conn_param_update+0x1c>)
1000daa6:	4b05      	ldr	r3, [pc, #20]	; (1000dabc <ble_conn_param_update+0x20>)
1000daa8:	4798      	blx	r3
	ALL_UNUSED(conn_param_update);  //To avoid compiler warning
	return AT_BLE_SUCCESS;
}
1000daaa:	2000      	movs	r0, #0
1000daac:	bd10      	pop	{r4, pc}
1000daae:	46c0      	nop			; (mov r8, r8)
1000dab0:	10016660 	.word	0x10016660
1000dab4:	100154a1 	.word	0x100154a1
1000dab8:	100179cc 	.word	0x100179cc
1000dabc:	10015381 	.word	0x10015381

1000dac0 <ble_encryption_status_change_handler>:
	return AT_BLE_SUCCESS;
}

/** @brief function handles encryption status change */
at_ble_status_t ble_encryption_status_change_handler(void *params)
{
1000dac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000dac2:	0006      	movs	r6, r0
	
	enc_status = (at_ble_encryption_status_changed_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == enc_status->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_STATE))
1000dac4:	8801      	ldrh	r1, [r0, #0]
1000dac6:	4b28      	ldr	r3, [pc, #160]	; (1000db68 <ble_encryption_status_change_handler+0xa8>)
	uint8_t idx;
	bool device_found = false;
	
	enc_status = (at_ble_encryption_status_changed_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000dac8:	2400      	movs	r4, #0
	{
		if((ble_dev_info[idx].conn_info.handle == enc_status->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_STATE))
1000daca:	891a      	ldrh	r2, [r3, #8]
1000dacc:	428a      	cmp	r2, r1
1000dace:	d104      	bne.n	1000dada <ble_encryption_status_change_handler+0x1a>
1000dad0:	001a      	movs	r2, r3
1000dad2:	325e      	adds	r2, #94	; 0x5e
1000dad4:	7812      	ldrb	r2, [r2, #0]
1000dad6:	2a06      	cmp	r2, #6
1000dad8:	d02e      	beq.n	1000db38 <ble_encryption_status_change_handler+0x78>
	uint8_t idx;
	bool device_found = false;
	
	enc_status = (at_ble_encryption_status_changed_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000dada:	3401      	adds	r4, #1
1000dadc:	b2e4      	uxtb	r4, r4
1000dade:	337c      	adds	r3, #124	; 0x7c
1000dae0:	2c05      	cmp	r4, #5
1000dae2:	d1f2      	bne.n	1000daca <ble_encryption_status_change_handler+0xa>
1000dae4:	e039      	b.n	1000db5a <ble_encryption_status_change_handler+0x9a>
			return AT_BLE_FAILURE;
		}
	}
	else
	{
		ble_dev_info[idx].bond_info.status = enc_status->status;
1000dae6:	4920      	ldr	r1, [pc, #128]	; (1000db68 <ble_encryption_status_change_handler+0xa8>)
1000dae8:	0163      	lsls	r3, r4, #5
1000daea:	1b1a      	subs	r2, r3, r4
1000daec:	0092      	lsls	r2, r2, #2
1000daee:	188a      	adds	r2, r1, r2
1000daf0:	7615      	strb	r5, [r2, #24]
		ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_FAILED;
1000daf2:	0014      	movs	r4, r2
1000daf4:	345e      	adds	r4, #94	; 0x5e
1000daf6:	2307      	movs	r3, #7
1000daf8:	7023      	strb	r3, [r4, #0]
		DBG_LOG("Encryption failed");
1000dafa:	481c      	ldr	r0, [pc, #112]	; (1000db6c <ble_encryption_status_change_handler+0xac>)
1000dafc:	4b1c      	ldr	r3, [pc, #112]	; (1000db70 <ble_encryption_status_change_handler+0xb0>)
1000dafe:	4798      	blx	r3
1000db00:	481c      	ldr	r0, [pc, #112]	; (1000db74 <ble_encryption_status_change_handler+0xb4>)
1000db02:	4b1d      	ldr	r3, [pc, #116]	; (1000db78 <ble_encryption_status_change_handler+0xb8>)
1000db04:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000db06:	25e2      	movs	r5, #226	; 0xe2
1000db08:	e02b      	b.n	1000db62 <ble_encryption_status_change_handler+0xa2>
		}
	}
	
	if(enc_status->status == AT_BLE_SUCCESS)
	{
		DBG_LOG("Encryption completed successfully");
1000db0a:	4818      	ldr	r0, [pc, #96]	; (1000db6c <ble_encryption_status_change_handler+0xac>)
1000db0c:	4b18      	ldr	r3, [pc, #96]	; (1000db70 <ble_encryption_status_change_handler+0xb0>)
1000db0e:	4798      	blx	r3
1000db10:	481a      	ldr	r0, [pc, #104]	; (1000db7c <ble_encryption_status_change_handler+0xbc>)
1000db12:	4b19      	ldr	r3, [pc, #100]	; (1000db78 <ble_encryption_status_change_handler+0xb8>)
1000db14:	4798      	blx	r3
		if (device_found)
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_COMPLETED;
1000db16:	4914      	ldr	r1, [pc, #80]	; (1000db68 <ble_encryption_status_change_handler+0xa8>)
1000db18:	0163      	lsls	r3, r4, #5
1000db1a:	1b1a      	subs	r2, r3, r4
1000db1c:	0092      	lsls	r2, r2, #2
1000db1e:	188a      	adds	r2, r1, r2
1000db20:	0010      	movs	r0, r2
1000db22:	305e      	adds	r0, #94	; 0x5e
1000db24:	2708      	movs	r7, #8
1000db26:	7007      	strb	r7, [r0, #0]
			ble_dev_info[idx].bond_info.auth = enc_status->authen;
1000db28:	78f0      	ldrb	r0, [r6, #3]
1000db2a:	7510      	strb	r0, [r2, #20]
			ble_dev_info[idx].bond_info.status = enc_status->status;
1000db2c:	78b2      	ldrb	r2, [r6, #2]
1000db2e:	1b1c      	subs	r4, r3, r4
1000db30:	00a4      	lsls	r4, r4, #2
1000db32:	190c      	adds	r4, r1, r4
1000db34:	7622      	strb	r2, [r4, #24]
		ble_dev_info[idx].bond_info.status = enc_status->status;
		ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_FAILED;
		DBG_LOG("Encryption failed");
		return AT_BLE_FAILURE;
	}
	return AT_BLE_SUCCESS;
1000db36:	e014      	b.n	1000db62 <ble_encryption_status_change_handler+0xa2>
			device_found = true;
			break;
		}
	}
	
	if(enc_status->status == AT_BLE_SUCCESS)
1000db38:	78b5      	ldrb	r5, [r6, #2]
1000db3a:	2d00      	cmp	r5, #0
1000db3c:	d0e5      	beq.n	1000db0a <ble_encryption_status_change_handler+0x4a>
1000db3e:	e7d2      	b.n	1000dae6 <ble_encryption_status_change_handler+0x26>
	{
		DBG_LOG("Encryption completed successfully");
1000db40:	4e0a      	ldr	r6, [pc, #40]	; (1000db6c <ble_encryption_status_change_handler+0xac>)
1000db42:	0030      	movs	r0, r6
1000db44:	4d0a      	ldr	r5, [pc, #40]	; (1000db70 <ble_encryption_status_change_handler+0xb0>)
1000db46:	47a8      	blx	r5
1000db48:	480c      	ldr	r0, [pc, #48]	; (1000db7c <ble_encryption_status_change_handler+0xbc>)
1000db4a:	4c0b      	ldr	r4, [pc, #44]	; (1000db78 <ble_encryption_status_change_handler+0xb8>)
1000db4c:	47a0      	blx	r4
			ble_dev_info[idx].bond_info.auth = enc_status->authen;
			ble_dev_info[idx].bond_info.status = enc_status->status;
		}
		else
		{
			DBG_LOG("BLE Device not found encryption info");
1000db4e:	0030      	movs	r0, r6
1000db50:	47a8      	blx	r5
1000db52:	480b      	ldr	r0, [pc, #44]	; (1000db80 <ble_encryption_status_change_handler+0xc0>)
1000db54:	47a0      	blx	r4
			return AT_BLE_FAILURE;
1000db56:	25e2      	movs	r5, #226	; 0xe2
1000db58:	e003      	b.n	1000db62 <ble_encryption_status_change_handler+0xa2>
			device_found = true;
			break;
		}
	}
	
	if(enc_status->status == AT_BLE_SUCCESS)
1000db5a:	78b5      	ldrb	r5, [r6, #2]
1000db5c:	2d00      	cmp	r5, #0
1000db5e:	d1c2      	bne.n	1000dae6 <ble_encryption_status_change_handler+0x26>
1000db60:	e7ee      	b.n	1000db40 <ble_encryption_status_change_handler+0x80>
		ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_FAILED;
		DBG_LOG("Encryption failed");
		return AT_BLE_FAILURE;
	}
	return AT_BLE_SUCCESS;
}
1000db62:	0028      	movs	r0, r5
1000db64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000db66:	46c0      	nop			; (mov r8, r8)
1000db68:	1001a460 	.word	0x1001a460
1000db6c:	10016660 	.word	0x10016660
1000db70:	100154a1 	.word	0x100154a1
1000db74:	100179e8 	.word	0x100179e8
1000db78:	10015381 	.word	0x10015381
1000db7c:	100179fc 	.word	0x100179fc
1000db80:	10017a20 	.word	0x10017a20

1000db84 <ble_scan_info_handler>:
	return found;
}
#endif
/** @brief function handling scaned information */
at_ble_status_t ble_scan_info_handler(void *params)
{
1000db84:	b530      	push	{r4, r5, lr}
1000db86:	b085      	sub	sp, #20
1000db88:	0004      	movs	r4, r0
	at_ble_scan_info_t *scan_param;
	scan_param = (at_ble_scan_info_t *)params;
	if(scan_response_count < MAX_SCAN_DEVICE)
1000db8a:	4b1f      	ldr	r3, [pc, #124]	; (1000dc08 <ble_scan_info_handler+0x84>)
1000db8c:	781b      	ldrb	r3, [r3, #0]
1000db8e:	b2db      	uxtb	r3, r3
1000db90:	2b13      	cmp	r3, #19
1000db92:	d824      	bhi.n	1000dbde <ble_scan_info_handler+0x5a>
	{
		memcpy((uint8_t *)&scan_info[scan_response_count], scan_param, sizeof(at_ble_scan_info_t));
1000db94:	4d1c      	ldr	r5, [pc, #112]	; (1000dc08 <ble_scan_info_handler+0x84>)
1000db96:	782b      	ldrb	r3, [r5, #0]
1000db98:	b2db      	uxtb	r3, r3
1000db9a:	0098      	lsls	r0, r3, #2
1000db9c:	18c0      	adds	r0, r0, r3
1000db9e:	00c0      	lsls	r0, r0, #3
1000dba0:	18c3      	adds	r3, r0, r3
1000dba2:	481a      	ldr	r0, [pc, #104]	; (1000dc0c <ble_scan_info_handler+0x88>)
1000dba4:	1818      	adds	r0, r3, r0
1000dba6:	2229      	movs	r2, #41	; 0x29
1000dba8:	0021      	movs	r1, r4
1000dbaa:	4b19      	ldr	r3, [pc, #100]	; (1000dc10 <ble_scan_info_handler+0x8c>)
1000dbac:	4798      	blx	r3
		DBG_LOG_DEV("Info:Device found address [%d]  0x%02X%02X%02X%02X%02X%02X ",
1000dbae:	4819      	ldr	r0, [pc, #100]	; (1000dc14 <ble_scan_info_handler+0x90>)
1000dbb0:	4b19      	ldr	r3, [pc, #100]	; (1000dc18 <ble_scan_info_handler+0x94>)
1000dbb2:	4798      	blx	r3
1000dbb4:	7829      	ldrb	r1, [r5, #0]
1000dbb6:	b2c9      	uxtb	r1, r1
1000dbb8:	79a3      	ldrb	r3, [r4, #6]
1000dbba:	79e2      	ldrb	r2, [r4, #7]
1000dbbc:	78a0      	ldrb	r0, [r4, #2]
1000dbbe:	9003      	str	r0, [sp, #12]
1000dbc0:	78e0      	ldrb	r0, [r4, #3]
1000dbc2:	9002      	str	r0, [sp, #8]
1000dbc4:	7920      	ldrb	r0, [r4, #4]
1000dbc6:	9001      	str	r0, [sp, #4]
1000dbc8:	7960      	ldrb	r0, [r4, #5]
1000dbca:	9000      	str	r0, [sp, #0]
1000dbcc:	4813      	ldr	r0, [pc, #76]	; (1000dc1c <ble_scan_info_handler+0x98>)
1000dbce:	4c14      	ldr	r4, [pc, #80]	; (1000dc20 <ble_scan_info_handler+0x9c>)
1000dbd0:	47a0      	blx	r4
		scan_param->dev_addr.addr[4],
		scan_param->dev_addr.addr[3],
		scan_param->dev_addr.addr[2],
		scan_param->dev_addr.addr[1],
		scan_param->dev_addr.addr[0]);
		scan_response_count++;
1000dbd2:	782b      	ldrb	r3, [r5, #0]
1000dbd4:	3301      	adds	r3, #1
1000dbd6:	b2db      	uxtb	r3, r3
1000dbd8:	702b      	strb	r3, [r5, #0]
		return AT_BLE_SUCCESS;
1000dbda:	2300      	movs	r3, #0
1000dbdc:	e011      	b.n	1000dc02 <ble_scan_info_handler+0x7e>
	}
	else
	{
		DBG_LOG("Info:maximum no.of scan device reached...Stopping Scan");
1000dbde:	480d      	ldr	r0, [pc, #52]	; (1000dc14 <ble_scan_info_handler+0x90>)
1000dbe0:	4b0d      	ldr	r3, [pc, #52]	; (1000dc18 <ble_scan_info_handler+0x94>)
1000dbe2:	4798      	blx	r3
1000dbe4:	480f      	ldr	r0, [pc, #60]	; (1000dc24 <ble_scan_info_handler+0xa0>)
1000dbe6:	4b0e      	ldr	r3, [pc, #56]	; (1000dc20 <ble_scan_info_handler+0x9c>)
1000dbe8:	4798      	blx	r3
		if(at_ble_scan_stop() != AT_BLE_SUCCESS)
1000dbea:	4b0f      	ldr	r3, [pc, #60]	; (1000dc28 <ble_scan_info_handler+0xa4>)
1000dbec:	4798      	blx	r3
				}
			}
		}
	
		#endif
		return AT_BLE_FAILURE;
1000dbee:	23e2      	movs	r3, #226	; 0xe2
		return AT_BLE_SUCCESS;
	}
	else
	{
		DBG_LOG("Info:maximum no.of scan device reached...Stopping Scan");
		if(at_ble_scan_stop() != AT_BLE_SUCCESS)
1000dbf0:	2800      	cmp	r0, #0
1000dbf2:	d006      	beq.n	1000dc02 <ble_scan_info_handler+0x7e>
		{
			DBG_LOG("Failed to stop scanning");
1000dbf4:	4807      	ldr	r0, [pc, #28]	; (1000dc14 <ble_scan_info_handler+0x90>)
1000dbf6:	4b08      	ldr	r3, [pc, #32]	; (1000dc18 <ble_scan_info_handler+0x94>)
1000dbf8:	4798      	blx	r3
1000dbfa:	480c      	ldr	r0, [pc, #48]	; (1000dc2c <ble_scan_info_handler+0xa8>)
1000dbfc:	4b08      	ldr	r3, [pc, #32]	; (1000dc20 <ble_scan_info_handler+0x9c>)
1000dbfe:	4798      	blx	r3
				}
			}
		}
	
		#endif
		return AT_BLE_FAILURE;
1000dc00:	23e2      	movs	r3, #226	; 0xe2
	}
}
1000dc02:	0018      	movs	r0, r3
1000dc04:	b005      	add	sp, #20
1000dc06:	bd30      	pop	{r4, r5, pc}
1000dc08:	10018fcc 	.word	0x10018fcc
1000dc0c:	1001a744 	.word	0x1001a744
1000dc10:	10015227 	.word	0x10015227
1000dc14:	10016660 	.word	0x10016660
1000dc18:	100154a1 	.word	0x100154a1
1000dc1c:	10017a48 	.word	0x10017a48
1000dc20:	10015381 	.word	0x10015381
1000dc24:	10017a84 	.word	0x10017a84
1000dc28:	10010a49 	.word	0x10010a49
1000dc2c:	10017abc 	.word	0x10017abc

1000dc30 <ble_pair_done_handler>:
	return AT_BLE_SUCCESS;	
}

/** @brief function handles pair done event */
at_ble_status_t ble_pair_done_handler(void *params)
{
1000dc30:	b5f0      	push	{r4, r5, r6, r7, lr}
1000dc32:	465f      	mov	r7, fp
1000dc34:	4656      	mov	r6, sl
1000dc36:	464d      	mov	r5, r9
1000dc38:	4644      	mov	r4, r8
1000dc3a:	b4f0      	push	{r4, r5, r6, r7}
1000dc3c:	b083      	sub	sp, #12
1000dc3e:	0005      	movs	r5, r0
	bool device_found = false;
	pairing_params = (at_ble_pair_done_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == pairing_params->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRING))
1000dc40:	8841      	ldrh	r1, [r0, #2]
1000dc42:	4b59      	ldr	r3, [pc, #356]	; (1000dda8 <ble_pair_done_handler+0x178>)
	at_ble_pair_done_t *pairing_params;
	uint8_t idx;
	bool device_found = false;
	pairing_params = (at_ble_pair_done_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000dc44:	2400      	movs	r4, #0
	{
		if((ble_dev_info[idx].conn_info.handle == pairing_params->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRING))
1000dc46:	891a      	ldrh	r2, [r3, #8]
1000dc48:	428a      	cmp	r2, r1
1000dc4a:	d105      	bne.n	1000dc58 <ble_pair_done_handler+0x28>
1000dc4c:	001a      	movs	r2, r3
1000dc4e:	325e      	adds	r2, #94	; 0x5e
1000dc50:	7812      	ldrb	r2, [r2, #0]
1000dc52:	2a03      	cmp	r2, #3
1000dc54:	d100      	bne.n	1000dc58 <ble_pair_done_handler+0x28>
1000dc56:	e09a      	b.n	1000dd8e <ble_pair_done_handler+0x15e>
	at_ble_pair_done_t *pairing_params;
	uint8_t idx;
	bool device_found = false;
	pairing_params = (at_ble_pair_done_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000dc58:	3401      	adds	r4, #1
1000dc5a:	b2e4      	uxtb	r4, r4
1000dc5c:	337c      	adds	r3, #124	; 0x7c
1000dc5e:	2c05      	cmp	r4, #5
1000dc60:	d1f1      	bne.n	1000dc46 <ble_pair_done_handler+0x16>
1000dc62:	e057      	b.n	1000dd14 <ble_pair_done_handler+0xe4>
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_ltk, (uint8_t *)&pairing_params->peer_ltk, sizeof(at_ble_LTK_t));
			
			DBG_LOG_DEV("LTK: ");
			for (idx = 0; idx < 16; idx++)
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_ltk.key[idx]);
1000dc64:	7821      	ldrb	r1, [r4, #0]
1000dc66:	0030      	movs	r0, r6
1000dc68:	47b8      	blx	r7
1000dc6a:	3401      	adds	r4, #1
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_csrk, (uint8_t *)&pairing_params->peer_csrk, sizeof(at_ble_CSRK_t));
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_irk, (uint8_t *)&pairing_params->peer_irk, sizeof(at_ble_IRK_t));
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_ltk, (uint8_t *)&pairing_params->peer_ltk, sizeof(at_ble_LTK_t));
			
			DBG_LOG_DEV("LTK: ");
			for (idx = 0; idx < 16; idx++)
1000dc6c:	454c      	cmp	r4, r9
1000dc6e:	d1f9      	bne.n	1000dc64 <ble_pair_done_handler+0x34>
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_ltk.key[idx]);
				
			}
			DBG_LOG_DEV("CSRK: ");
1000dc70:	484e      	ldr	r0, [pc, #312]	; (1000ddac <ble_pair_done_handler+0x17c>)
1000dc72:	4b4f      	ldr	r3, [pc, #316]	; (1000ddb0 <ble_pair_done_handler+0x180>)
1000dc74:	4798      	blx	r3
1000dc76:	484f      	ldr	r0, [pc, #316]	; (1000ddb4 <ble_pair_done_handler+0x184>)
1000dc78:	4b4f      	ldr	r3, [pc, #316]	; (1000ddb8 <ble_pair_done_handler+0x188>)
1000dc7a:	4798      	blx	r3
1000dc7c:	002e      	movs	r6, r5
1000dc7e:	3622      	adds	r6, #34	; 0x22
1000dc80:	002c      	movs	r4, r5
1000dc82:	3432      	adds	r4, #50	; 0x32
			for (idx = 0; idx < 16; idx++)
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_csrk.key[idx]);
1000dc84:	4f4c      	ldr	r7, [pc, #304]	; (1000ddb8 <ble_pair_done_handler+0x188>)
1000dc86:	7831      	ldrb	r1, [r6, #0]
1000dc88:	484c      	ldr	r0, [pc, #304]	; (1000ddbc <ble_pair_done_handler+0x18c>)
1000dc8a:	47b8      	blx	r7
1000dc8c:	3601      	adds	r6, #1
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_ltk.key[idx]);
				
			}
			DBG_LOG_DEV("CSRK: ");
			for (idx = 0; idx < 16; idx++)
1000dc8e:	42a6      	cmp	r6, r4
1000dc90:	d1f9      	bne.n	1000dc86 <ble_pair_done_handler+0x56>
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_csrk.key[idx]);
				
			}
			DBG_LOG_DEV("IRK:");
1000dc92:	4846      	ldr	r0, [pc, #280]	; (1000ddac <ble_pair_done_handler+0x17c>)
1000dc94:	4b46      	ldr	r3, [pc, #280]	; (1000ddb0 <ble_pair_done_handler+0x180>)
1000dc96:	4798      	blx	r3
1000dc98:	4849      	ldr	r0, [pc, #292]	; (1000ddc0 <ble_pair_done_handler+0x190>)
1000dc9a:	4b47      	ldr	r3, [pc, #284]	; (1000ddb8 <ble_pair_done_handler+0x188>)
1000dc9c:	4798      	blx	r3
1000dc9e:	3542      	adds	r5, #66	; 0x42
1000dca0:	002f      	movs	r7, r5
			for (idx = 0; idx < 16; idx++)
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_irk.key[idx]);
1000dca2:	4e46      	ldr	r6, [pc, #280]	; (1000ddbc <ble_pair_done_handler+0x18c>)
1000dca4:	4d44      	ldr	r5, [pc, #272]	; (1000ddb8 <ble_pair_done_handler+0x188>)
1000dca6:	7821      	ldrb	r1, [r4, #0]
1000dca8:	0030      	movs	r0, r6
1000dcaa:	47a8      	blx	r5
1000dcac:	3401      	adds	r4, #1
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_csrk.key[idx]);
				
			}
			DBG_LOG_DEV("IRK:");
			for (idx = 0; idx < 16; idx++)
1000dcae:	42bc      	cmp	r4, r7
1000dcb0:	d1f9      	bne.n	1000dca6 <ble_pair_done_handler+0x76>
1000dcb2:	e071      	b.n	1000dd98 <ble_pair_done_handler+0x168>
			return AT_BLE_FAILURE;
		}		
	}
	else
	{
		if(ble_dev_info[idx].conn_state != BLE_DEVICE_DEFAULT_IDLE && ble_dev_info[idx].conn_state != BLE_DEVICE_DISCONNECTED) {
1000dcb4:	0163      	lsls	r3, r4, #5
1000dcb6:	1b1c      	subs	r4, r3, r4
1000dcb8:	00a4      	lsls	r4, r4, #2
1000dcba:	4b3b      	ldr	r3, [pc, #236]	; (1000dda8 <ble_pair_done_handler+0x178>)
1000dcbc:	191c      	adds	r4, r3, r4
1000dcbe:	345e      	adds	r4, #94	; 0x5e
1000dcc0:	7823      	ldrb	r3, [r4, #0]
1000dcc2:	2b01      	cmp	r3, #1
1000dcc4:	d915      	bls.n	1000dcf2 <ble_pair_done_handler+0xc2>
			DBG_LOG("Pairing failed...Disconnecting");
1000dcc6:	4839      	ldr	r0, [pc, #228]	; (1000ddac <ble_pair_done_handler+0x17c>)
1000dcc8:	4b39      	ldr	r3, [pc, #228]	; (1000ddb0 <ble_pair_done_handler+0x180>)
1000dcca:	4798      	blx	r3
1000dccc:	483d      	ldr	r0, [pc, #244]	; (1000ddc4 <ble_pair_done_handler+0x194>)
1000dcce:	4b3a      	ldr	r3, [pc, #232]	; (1000ddb8 <ble_pair_done_handler+0x188>)
1000dcd0:	4798      	blx	r3
			if(!(at_ble_disconnect(pairing_params->handle, AT_BLE_TERMINATED_BY_USER) == AT_BLE_SUCCESS))
1000dcd2:	8868      	ldrh	r0, [r5, #2]
1000dcd4:	2113      	movs	r1, #19
1000dcd6:	4b3c      	ldr	r3, [pc, #240]	; (1000ddc8 <ble_pair_done_handler+0x198>)
1000dcd8:	4798      	blx	r3
1000dcda:	9001      	str	r0, [sp, #4]
1000dcdc:	2800      	cmp	r0, #0
1000dcde:	d05b      	beq.n	1000dd98 <ble_pair_done_handler+0x168>
			{
				DBG_LOG("Disconnect Request Failed");
1000dce0:	4832      	ldr	r0, [pc, #200]	; (1000ddac <ble_pair_done_handler+0x17c>)
1000dce2:	4b33      	ldr	r3, [pc, #204]	; (1000ddb0 <ble_pair_done_handler+0x180>)
1000dce4:	4798      	blx	r3
1000dce6:	4839      	ldr	r0, [pc, #228]	; (1000ddcc <ble_pair_done_handler+0x19c>)
1000dce8:	4b33      	ldr	r3, [pc, #204]	; (1000ddb8 <ble_pair_done_handler+0x188>)
1000dcea:	4798      	blx	r3
				return AT_BLE_FAILURE;
1000dcec:	23e2      	movs	r3, #226	; 0xe2
1000dcee:	9301      	str	r3, [sp, #4]
1000dcf0:	e052      	b.n	1000dd98 <ble_pair_done_handler+0x168>
			}
		}
	}
	return AT_BLE_SUCCESS;
1000dcf2:	2300      	movs	r3, #0
1000dcf4:	9301      	str	r3, [sp, #4]
1000dcf6:	e04f      	b.n	1000dd98 <ble_pair_done_handler+0x168>
		}
	}
	
	if(pairing_params->status == AT_BLE_SUCCESS)
	{
		DBG_LOG("Pairing procedure completed successfully");
1000dcf8:	4e2c      	ldr	r6, [pc, #176]	; (1000ddac <ble_pair_done_handler+0x17c>)
1000dcfa:	0030      	movs	r0, r6
1000dcfc:	4d2c      	ldr	r5, [pc, #176]	; (1000ddb0 <ble_pair_done_handler+0x180>)
1000dcfe:	47a8      	blx	r5
1000dd00:	4833      	ldr	r0, [pc, #204]	; (1000ddd0 <ble_pair_done_handler+0x1a0>)
1000dd02:	4c2d      	ldr	r4, [pc, #180]	; (1000ddb8 <ble_pair_done_handler+0x188>)
1000dd04:	47a0      	blx	r4
				
			}
		}
		else
		{
			DBG_LOG("BLE Device not found to store the pairing info");
1000dd06:	0030      	movs	r0, r6
1000dd08:	47a8      	blx	r5
1000dd0a:	4832      	ldr	r0, [pc, #200]	; (1000ddd4 <ble_pair_done_handler+0x1a4>)
1000dd0c:	47a0      	blx	r4
			return AT_BLE_FAILURE;
1000dd0e:	23e2      	movs	r3, #226	; 0xe2
1000dd10:	9301      	str	r3, [sp, #4]
1000dd12:	e041      	b.n	1000dd98 <ble_pair_done_handler+0x168>
			device_found = true;
			break;
		}
	}
	
	if(pairing_params->status == AT_BLE_SUCCESS)
1000dd14:	792b      	ldrb	r3, [r5, #4]
1000dd16:	2b00      	cmp	r3, #0
1000dd18:	d1cc      	bne.n	1000dcb4 <ble_pair_done_handler+0x84>
1000dd1a:	e7ed      	b.n	1000dcf8 <ble_pair_done_handler+0xc8>
	{
		DBG_LOG("Pairing procedure completed successfully");
1000dd1c:	4823      	ldr	r0, [pc, #140]	; (1000ddac <ble_pair_done_handler+0x17c>)
1000dd1e:	4b24      	ldr	r3, [pc, #144]	; (1000ddb0 <ble_pair_done_handler+0x180>)
1000dd20:	469b      	mov	fp, r3
1000dd22:	4798      	blx	r3
1000dd24:	482a      	ldr	r0, [pc, #168]	; (1000ddd0 <ble_pair_done_handler+0x1a0>)
1000dd26:	4b24      	ldr	r3, [pc, #144]	; (1000ddb8 <ble_pair_done_handler+0x188>)
1000dd28:	469a      	mov	sl, r3
1000dd2a:	4798      	blx	r3
		if (device_found)
		{
			ble_dev_info[idx].bond_info.auth = pairing_params->auth;
1000dd2c:	782a      	ldrb	r2, [r5, #0]
1000dd2e:	4b1e      	ldr	r3, [pc, #120]	; (1000dda8 <ble_pair_done_handler+0x178>)
1000dd30:	4698      	mov	r8, r3
1000dd32:	0167      	lsls	r7, r4, #5
1000dd34:	1b3b      	subs	r3, r7, r4
1000dd36:	009b      	lsls	r3, r3, #2
1000dd38:	4443      	add	r3, r8
1000dd3a:	751a      	strb	r2, [r3, #20]
			ble_dev_info[idx].bond_info.status = pairing_params->status;
1000dd3c:	792a      	ldrb	r2, [r5, #4]
1000dd3e:	761a      	strb	r2, [r3, #24]
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRED;
1000dd40:	335e      	adds	r3, #94	; 0x5e
1000dd42:	2205      	movs	r2, #5
1000dd44:	701a      	strb	r2, [r3, #0]
			
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_csrk, (uint8_t *)&pairing_params->peer_csrk, sizeof(at_ble_CSRK_t));
1000dd46:	1b38      	subs	r0, r7, r4
1000dd48:	0080      	lsls	r0, r0, #2
1000dd4a:	4440      	add	r0, r8
1000dd4c:	3036      	adds	r0, #54	; 0x36
1000dd4e:	320b      	adds	r2, #11
1000dd50:	0029      	movs	r1, r5
1000dd52:	3122      	adds	r1, #34	; 0x22
1000dd54:	4b20      	ldr	r3, [pc, #128]	; (1000ddd8 <ble_pair_done_handler+0x1a8>)
1000dd56:	4699      	mov	r9, r3
1000dd58:	4798      	blx	r3
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_irk, (uint8_t *)&pairing_params->peer_irk, sizeof(at_ble_IRK_t));
1000dd5a:	1b38      	subs	r0, r7, r4
1000dd5c:	0080      	lsls	r0, r0, #2
1000dd5e:	4440      	add	r0, r8
1000dd60:	3046      	adds	r0, #70	; 0x46
1000dd62:	2217      	movs	r2, #23
1000dd64:	0029      	movs	r1, r5
1000dd66:	3132      	adds	r1, #50	; 0x32
1000dd68:	47c8      	blx	r9
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_ltk, (uint8_t *)&pairing_params->peer_ltk, sizeof(at_ble_LTK_t));
1000dd6a:	1b38      	subs	r0, r7, r4
1000dd6c:	0080      	lsls	r0, r0, #2
1000dd6e:	4440      	add	r0, r8
1000dd70:	301a      	adds	r0, #26
1000dd72:	1dac      	adds	r4, r5, #6
1000dd74:	221c      	movs	r2, #28
1000dd76:	0021      	movs	r1, r4
1000dd78:	47c8      	blx	r9
			
			DBG_LOG_DEV("LTK: ");
1000dd7a:	480c      	ldr	r0, [pc, #48]	; (1000ddac <ble_pair_done_handler+0x17c>)
1000dd7c:	47d8      	blx	fp
1000dd7e:	4817      	ldr	r0, [pc, #92]	; (1000dddc <ble_pair_done_handler+0x1ac>)
1000dd80:	47d0      	blx	sl
1000dd82:	2316      	movs	r3, #22
1000dd84:	4699      	mov	r9, r3
1000dd86:	44a9      	add	r9, r5
			for (idx = 0; idx < 16; idx++)
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_ltk.key[idx]);
1000dd88:	4e0c      	ldr	r6, [pc, #48]	; (1000ddbc <ble_pair_done_handler+0x18c>)
1000dd8a:	4f0b      	ldr	r7, [pc, #44]	; (1000ddb8 <ble_pair_done_handler+0x188>)
1000dd8c:	e76a      	b.n	1000dc64 <ble_pair_done_handler+0x34>
			device_found = true;
			break;
		}
	}
	
	if(pairing_params->status == AT_BLE_SUCCESS)
1000dd8e:	792b      	ldrb	r3, [r5, #4]
1000dd90:	9301      	str	r3, [sp, #4]
1000dd92:	2b00      	cmp	r3, #0
1000dd94:	d0c2      	beq.n	1000dd1c <ble_pair_done_handler+0xec>
1000dd96:	e78d      	b.n	1000dcb4 <ble_pair_done_handler+0x84>
				return AT_BLE_FAILURE;
			}
		}
	}
	return AT_BLE_SUCCESS;
}
1000dd98:	9801      	ldr	r0, [sp, #4]
1000dd9a:	b003      	add	sp, #12
1000dd9c:	bc3c      	pop	{r2, r3, r4, r5}
1000dd9e:	4690      	mov	r8, r2
1000dda0:	4699      	mov	r9, r3
1000dda2:	46a2      	mov	sl, r4
1000dda4:	46ab      	mov	fp, r5
1000dda6:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000dda8:	1001a460 	.word	0x1001a460
1000ddac:	10016660 	.word	0x10016660
1000ddb0:	100154a1 	.word	0x100154a1
1000ddb4:	10017ae0 	.word	0x10017ae0
1000ddb8:	10015381 	.word	0x10015381
1000ddbc:	10017ad4 	.word	0x10017ad4
1000ddc0:	10017ae8 	.word	0x10017ae8
1000ddc4:	10017af0 	.word	0x10017af0
1000ddc8:	10010a69 	.word	0x10010a69
1000ddcc:	10017b10 	.word	0x10017b10
1000ddd0:	10017b2c 	.word	0x10017b2c
1000ddd4:	10017b58 	.word	0x10017b58
1000ddd8:	10015227 	.word	0x10015227
1000dddc:	10017b88 	.word	0x10017b88

1000dde0 <ble_conn_param_update_req>:
	ALL_UNUSED(conn_param_update);  //To avoid compiler warning
	return AT_BLE_SUCCESS;
}

at_ble_status_t ble_conn_param_update_req(void *params)
{
1000dde0:	b510      	push	{r4, lr}
	at_ble_conn_param_update_request_t * conn_param_req;
	conn_param_req = (at_ble_conn_param_update_request_t *)params;
	at_ble_conn_update_reply(conn_param_req->handle, true, 1, 120);
1000dde2:	8800      	ldrh	r0, [r0, #0]
1000dde4:	2378      	movs	r3, #120	; 0x78
1000dde6:	2201      	movs	r2, #1
1000dde8:	2101      	movs	r1, #1
1000ddea:	4c02      	ldr	r4, [pc, #8]	; (1000ddf4 <ble_conn_param_update_req+0x14>)
1000ddec:	47a0      	blx	r4
	return AT_BLE_SUCCESS;
}
1000ddee:	2000      	movs	r0, #0
1000ddf0:	bd10      	pop	{r4, pc}
1000ddf2:	46c0      	nop			; (mov r8, r8)
1000ddf4:	10010a89 	.word	0x10010a89

1000ddf8 <ble_slave_security_request_handler>:

at_ble_status_t ble_slave_security_request_handler(void* params)
{
1000ddf8:	b5f0      	push	{r4, r5, r6, r7, lr}
1000ddfa:	4657      	mov	r7, sl
1000ddfc:	464e      	mov	r6, r9
1000ddfe:	4645      	mov	r5, r8
1000de00:	b4e0      	push	{r5, r6, r7}
1000de02:	b084      	sub	sp, #16
1000de04:	0004      	movs	r4, r0
	uint8_t i = 0, idx;
	at_ble_slave_sec_request_t* slave_sec_req;
	bool device_found = false;
	
	slave_sec_req = (at_ble_slave_sec_request_t*)params;	
	memset(&features, 0x00, sizeof(at_ble_pair_features_t));
1000de06:	2209      	movs	r2, #9
1000de08:	2100      	movs	r1, #0
1000de0a:	a801      	add	r0, sp, #4
1000de0c:	4b6a      	ldr	r3, [pc, #424]	; (1000dfb8 <ble_slave_security_request_handler+0x1c0>)
1000de0e:	4798      	blx	r3
		//@Todo Status is not handled in the Library
	//}

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == slave_sec_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000de10:	8825      	ldrh	r5, [r4, #0]
1000de12:	496a      	ldr	r1, [pc, #424]	; (1000dfbc <ble_slave_security_request_handler+0x1c4>)
1000de14:	000a      	movs	r2, r1
1000de16:	2300      	movs	r3, #0
1000de18:	8910      	ldrh	r0, [r2, #8]
1000de1a:	42a8      	cmp	r0, r5
1000de1c:	d116      	bne.n	1000de4c <ble_slave_security_request_handler+0x54>
1000de1e:	0010      	movs	r0, r2
1000de20:	305e      	adds	r0, #94	; 0x5e
1000de22:	7800      	ldrb	r0, [r0, #0]
1000de24:	2802      	cmp	r0, #2
1000de26:	d111      	bne.n	1000de4c <ble_slave_security_request_handler+0x54>
		{
			device_found = true;
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_STATE;
1000de28:	4864      	ldr	r0, [pc, #400]	; (1000dfbc <ble_slave_security_request_handler+0x1c4>)
1000de2a:	015a      	lsls	r2, r3, #5
1000de2c:	1ad6      	subs	r6, r2, r3
1000de2e:	00b6      	lsls	r6, r6, #2
1000de30:	1986      	adds	r6, r0, r6
1000de32:	365e      	adds	r6, #94	; 0x5e
1000de34:	2206      	movs	r2, #6
1000de36:	7032      	strb	r2, [r6, #0]
		}
	}
	
	if (device_found)
	{
		if((ble_dev_info[idx].bond_info.auth & AT_BLE_AUTH_NO_MITM_BOND) && (slave_sec_req->bond == true))
1000de38:	32f9      	adds	r2, #249	; 0xf9
1000de3a:	4013      	ands	r3, r2
1000de3c:	015a      	lsls	r2, r3, #5
1000de3e:	1ad2      	subs	r2, r2, r3
1000de40:	0092      	lsls	r2, r2, #2
1000de42:	1882      	adds	r2, r0, r2
1000de44:	7d12      	ldrb	r2, [r2, #20]
1000de46:	07d0      	lsls	r0, r2, #31
1000de48:	d405      	bmi.n	1000de56 <ble_slave_security_request_handler+0x5e>
1000de4a:	e01b      	b.n	1000de84 <ble_slave_security_request_handler+0x8c>
1000de4c:	3301      	adds	r3, #1
1000de4e:	327c      	adds	r2, #124	; 0x7c
		//at_ble_disconnect(slave_sec_req->handle, AT_BLE_AUTH_FAILURE);		
		//return AT_BLE_FAILURE;
		//@Todo Status is not handled in the Library
	//}

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000de50:	2b05      	cmp	r3, #5
1000de52:	d1e1      	bne.n	1000de18 <ble_slave_security_request_handler+0x20>
1000de54:	e01e      	b.n	1000de94 <ble_slave_security_request_handler+0x9c>
		}
	}
	
	if (device_found)
	{
		if((ble_dev_info[idx].bond_info.auth & AT_BLE_AUTH_NO_MITM_BOND) && (slave_sec_req->bond == true))
1000de56:	78e0      	ldrb	r0, [r4, #3]
1000de58:	2800      	cmp	r0, #0
1000de5a:	d013      	beq.n	1000de84 <ble_slave_security_request_handler+0x8c>
		{
			if(at_ble_encryption_start(slave_sec_req->handle, &ble_dev_info[idx].bond_info.peer_ltk, ble_dev_info[idx].bond_info.auth) == AT_BLE_SUCCESS)
1000de5c:	0159      	lsls	r1, r3, #5
1000de5e:	1ac9      	subs	r1, r1, r3
1000de60:	008b      	lsls	r3, r1, #2
1000de62:	4956      	ldr	r1, [pc, #344]	; (1000dfbc <ble_slave_security_request_handler+0x1c4>)
1000de64:	18c9      	adds	r1, r1, r3
1000de66:	311a      	adds	r1, #26
1000de68:	8820      	ldrh	r0, [r4, #0]
1000de6a:	4b55      	ldr	r3, [pc, #340]	; (1000dfc0 <ble_slave_security_request_handler+0x1c8>)
1000de6c:	4798      	blx	r3
1000de6e:	2800      	cmp	r0, #0
1000de70:	d100      	bne.n	1000de74 <ble_slave_security_request_handler+0x7c>
1000de72:	e09b      	b.n	1000dfac <ble_slave_security_request_handler+0x1b4>
			{
				return  AT_BLE_SUCCESS;
			}
			else
			{
				DBG_LOG("Encryption Not started");
1000de74:	4853      	ldr	r0, [pc, #332]	; (1000dfc4 <ble_slave_security_request_handler+0x1cc>)
1000de76:	4b54      	ldr	r3, [pc, #336]	; (1000dfc8 <ble_slave_security_request_handler+0x1d0>)
1000de78:	4798      	blx	r3
1000de7a:	4854      	ldr	r0, [pc, #336]	; (1000dfcc <ble_slave_security_request_handler+0x1d4>)
1000de7c:	4b54      	ldr	r3, [pc, #336]	; (1000dfd0 <ble_slave_security_request_handler+0x1d8>)
1000de7e:	4798      	blx	r3
				return AT_BLE_FAILURE;
1000de80:	20e2      	movs	r0, #226	; 0xe2
1000de82:	e093      	b.n	1000dfac <ble_slave_security_request_handler+0x1b4>
			}			
		}
		else
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000de84:	015a      	lsls	r2, r3, #5
1000de86:	1ad3      	subs	r3, r2, r3
1000de88:	009b      	lsls	r3, r3, #2
1000de8a:	4a4c      	ldr	r2, [pc, #304]	; (1000dfbc <ble_slave_security_request_handler+0x1c4>)
1000de8c:	18d3      	adds	r3, r2, r3
1000de8e:	335e      	adds	r3, #94	; 0x5e
1000de90:	2202      	movs	r2, #2
1000de92:	701a      	strb	r2, [r3, #0]
		}
	}
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == slave_sec_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000de94:	8825      	ldrh	r5, [r4, #0]
1000de96:	2200      	movs	r2, #0
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
		}
	}
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000de98:	2300      	movs	r3, #0
	{
		if((ble_dev_info[idx].conn_info.handle == slave_sec_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000de9a:	0016      	movs	r6, r2
1000de9c:	8908      	ldrh	r0, [r1, #8]
1000de9e:	42a8      	cmp	r0, r5
1000dea0:	d10d      	bne.n	1000debe <ble_slave_security_request_handler+0xc6>
1000dea2:	0008      	movs	r0, r1
1000dea4:	305e      	adds	r0, #94	; 0x5e
1000dea6:	7800      	ldrb	r0, [r0, #0]
1000dea8:	2802      	cmp	r0, #2
1000deaa:	d108      	bne.n	1000debe <ble_slave_security_request_handler+0xc6>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
1000deac:	0152      	lsls	r2, r2, #5
1000deae:	1b92      	subs	r2, r2, r6
1000deb0:	0096      	lsls	r6, r2, #2
1000deb2:	4a42      	ldr	r2, [pc, #264]	; (1000dfbc <ble_slave_security_request_handler+0x1c4>)
1000deb4:	1992      	adds	r2, r2, r6
1000deb6:	325e      	adds	r2, #94	; 0x5e
1000deb8:	2103      	movs	r1, #3
1000deba:	7011      	strb	r1, [r2, #0]
			break;
1000debc:	e005      	b.n	1000deca <ble_slave_security_request_handler+0xd2>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
		}
	}
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000debe:	3301      	adds	r3, #1
1000dec0:	b2db      	uxtb	r3, r3
1000dec2:	3201      	adds	r2, #1
1000dec4:	317c      	adds	r1, #124	; 0x7c
1000dec6:	2b05      	cmp	r3, #5
1000dec8:	d1e7      	bne.n	1000de9a <ble_slave_security_request_handler+0xa2>
			break;
		}
	}
	
	features.desired_auth =  BLE_AUTHENTICATION_LEVEL; 
	features.bond = slave_sec_req->bond;
1000deca:	aa01      	add	r2, sp, #4
1000decc:	78e1      	ldrb	r1, [r4, #3]
1000dece:	7091      	strb	r1, [r2, #2]
	features.mitm_protection = true;
1000ded0:	2101      	movs	r1, #1
1000ded2:	7051      	strb	r1, [r2, #1]
	/* Device capabilities is display only , key will be generated
	and displayed */
	features.io_cababilities = AT_BLE_IO_CAP_KB_DISPLAY;
1000ded4:	3103      	adds	r1, #3
1000ded6:	7011      	strb	r1, [r2, #0]

	features.oob_avaiable = false;
			
	/* Distribution of LTK is required */
	if (ble_dev_info[idx].conn_info.peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE)
1000ded8:	001f      	movs	r7, r3
1000deda:	015a      	lsls	r2, r3, #5
1000dedc:	1ad2      	subs	r2, r2, r3
1000dede:	0092      	lsls	r2, r2, #2
1000dee0:	4936      	ldr	r1, [pc, #216]	; (1000dfbc <ble_slave_security_request_handler+0x1c4>)
1000dee2:	5c52      	ldrb	r2, [r2, r1]
1000dee4:	2a02      	cmp	r2, #2
1000dee6:	d104      	bne.n	1000def2 <ble_slave_security_request_handler+0xfa>
	{
		features.initiator_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000dee8:	aa01      	add	r2, sp, #4
1000deea:	2103      	movs	r1, #3
1000deec:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000deee:	71d1      	strb	r1, [r2, #7]
1000def0:	e003      	b.n	1000defa <ble_slave_security_request_handler+0x102>
	}
	else
	{
		features.initiator_keys =   AT_BLE_KEY_DIST_ENC;
1000def2:	aa01      	add	r2, sp, #4
1000def4:	2101      	movs	r1, #1
1000def6:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   AT_BLE_KEY_DIST_ENC;
1000def8:	71d1      	strb	r1, [r2, #7]
	}
	features.max_key_size = 16;
1000defa:	aa01      	add	r2, sp, #4
1000defc:	2110      	movs	r1, #16
1000defe:	7151      	strb	r1, [r2, #5]
	features.min_key_size = 16;
1000df00:	7111      	strb	r1, [r2, #4]
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
1000df02:	017a      	lsls	r2, r7, #5
1000df04:	1bd2      	subs	r2, r2, r7
1000df06:	0092      	lsls	r2, r2, #2
1000df08:	492c      	ldr	r1, [pc, #176]	; (1000dfbc <ble_slave_security_request_handler+0x1c4>)
1000df0a:	188a      	adds	r2, r1, r2
1000df0c:	7e12      	ldrb	r2, [r2, #24]
1000df0e:	2a40      	cmp	r2, #64	; 0x40
1000df10:	d134      	bne.n	1000df7c <ble_slave_security_request_handler+0x184>
1000df12:	015a      	lsls	r2, r3, #5
1000df14:	1ad3      	subs	r3, r2, r3
1000df16:	009b      	lsls	r3, r3, #2
1000df18:	469a      	mov	sl, r3
1000df1a:	001e      	movs	r6, r3
1000df1c:	3660      	adds	r6, #96	; 0x60
1000df1e:	1876      	adds	r6, r6, r1
1000df20:	4655      	mov	r5, sl
1000df22:	3568      	adds	r5, #104	; 0x68
1000df24:	186d      	adds	r5, r5, r1
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
		{			
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000df26:	4b2b      	ldr	r3, [pc, #172]	; (1000dfd4 <ble_slave_security_request_handler+0x1dc>)
1000df28:	4699      	mov	r9, r3
1000df2a:	230f      	movs	r3, #15
1000df2c:	4698      	mov	r8, r3
1000df2e:	47c8      	blx	r9
1000df30:	4643      	mov	r3, r8
1000df32:	4018      	ands	r0, r3
1000df34:	7030      	strb	r0, [r6, #0]
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
1000df36:	47c8      	blx	r9
1000df38:	4643      	mov	r3, r8
1000df3a:	4018      	ands	r0, r3
1000df3c:	74b0      	strb	r0, [r6, #18]
1000df3e:	3601      	adds	r6, #1
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
1000df40:	42ae      	cmp	r6, r5
1000df42:	d1f4      	bne.n	1000df2e <ble_slave_security_request_handler+0x136>
1000df44:	4656      	mov	r6, sl
1000df46:	3670      	adds	r6, #112	; 0x70
1000df48:	4a1c      	ldr	r2, [pc, #112]	; (1000dfbc <ble_slave_security_request_handler+0x1c4>)
1000df4a:	18b6      	adds	r6, r6, r2
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000df4c:	4b21      	ldr	r3, [pc, #132]	; (1000dfd4 <ble_slave_security_request_handler+0x1dc>)
1000df4e:	4699      	mov	r9, r3
1000df50:	230f      	movs	r3, #15
1000df52:	4698      	mov	r8, r3
1000df54:	47c8      	blx	r9
1000df56:	4643      	mov	r3, r8
1000df58:	4018      	ands	r0, r3
1000df5a:	7028      	strb	r0, [r5, #0]
1000df5c:	3501      	adds	r5, #1
		{			
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
1000df5e:	42b5      	cmp	r5, r6
1000df60:	d1f8      	bne.n	1000df54 <ble_slave_security_request_handler+0x15c>
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
		}
		
		ble_dev_info[idx].host_ltk.ediv = rand()&0xffff;
1000df62:	4b1c      	ldr	r3, [pc, #112]	; (1000dfd4 <ble_slave_security_request_handler+0x1dc>)
1000df64:	4798      	blx	r3
1000df66:	017b      	lsls	r3, r7, #5
1000df68:	1bdb      	subs	r3, r3, r7
1000df6a:	009b      	lsls	r3, r3, #2
1000df6c:	4a13      	ldr	r2, [pc, #76]	; (1000dfbc <ble_slave_security_request_handler+0x1c4>)
1000df6e:	18d3      	adds	r3, r2, r3
1000df70:	001a      	movs	r2, r3
1000df72:	3270      	adds	r2, #112	; 0x70
1000df74:	8010      	strh	r0, [r2, #0]
		ble_dev_info[idx].host_ltk.key_size = 16;
1000df76:	337a      	adds	r3, #122	; 0x7a
1000df78:	2210      	movs	r2, #16
1000df7a:	701a      	strb	r2, [r3, #0]
	{
		/* Bonding information already exists */
		
	}

	if(at_ble_authenticate(slave_sec_req->handle, &features, &ble_dev_info[idx].host_ltk, NULL) != AT_BLE_SUCCESS)
1000df7c:	017a      	lsls	r2, r7, #5
1000df7e:	1bd7      	subs	r7, r2, r7
1000df80:	00bf      	lsls	r7, r7, #2
1000df82:	3760      	adds	r7, #96	; 0x60
1000df84:	4a0d      	ldr	r2, [pc, #52]	; (1000dfbc <ble_slave_security_request_handler+0x1c4>)
1000df86:	18ba      	adds	r2, r7, r2
1000df88:	8820      	ldrh	r0, [r4, #0]
1000df8a:	2300      	movs	r3, #0
1000df8c:	a901      	add	r1, sp, #4
1000df8e:	4c12      	ldr	r4, [pc, #72]	; (1000dfd8 <ble_slave_security_request_handler+0x1e0>)
1000df90:	47a0      	blx	r4
1000df92:	2800      	cmp	r0, #0
1000df94:	d00a      	beq.n	1000dfac <ble_slave_security_request_handler+0x1b4>
	{
		features.bond = false;
1000df96:	ab01      	add	r3, sp, #4
1000df98:	2200      	movs	r2, #0
1000df9a:	709a      	strb	r2, [r3, #2]
		features.mitm_protection = false;
1000df9c:	705a      	strb	r2, [r3, #1]
		DBG_LOG("Slave Security Req - Authentication Failed");
1000df9e:	4809      	ldr	r0, [pc, #36]	; (1000dfc4 <ble_slave_security_request_handler+0x1cc>)
1000dfa0:	4b09      	ldr	r3, [pc, #36]	; (1000dfc8 <ble_slave_security_request_handler+0x1d0>)
1000dfa2:	4798      	blx	r3
1000dfa4:	480d      	ldr	r0, [pc, #52]	; (1000dfdc <ble_slave_security_request_handler+0x1e4>)
1000dfa6:	4b0a      	ldr	r3, [pc, #40]	; (1000dfd0 <ble_slave_security_request_handler+0x1d8>)
1000dfa8:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000dfaa:	20e2      	movs	r0, #226	; 0xe2
	}
	return AT_BLE_SUCCESS;
}
1000dfac:	b004      	add	sp, #16
1000dfae:	bc1c      	pop	{r2, r3, r4}
1000dfb0:	4690      	mov	r8, r2
1000dfb2:	4699      	mov	r9, r3
1000dfb4:	46a2      	mov	sl, r4
1000dfb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000dfb8:	10015239 	.word	0x10015239
1000dfbc:	1001a460 	.word	0x1001a460
1000dfc0:	1001164d 	.word	0x1001164d
1000dfc4:	10016660 	.word	0x10016660
1000dfc8:	100154a1 	.word	0x100154a1
1000dfcc:	10017b90 	.word	0x10017b90
1000dfd0:	10015381 	.word	0x10015381
1000dfd4:	100154b5 	.word	0x100154b5
1000dfd8:	10011461 	.word	0x10011461
1000dfdc:	10017ba8 	.word	0x10017ba8

1000dfe0 <ble_pair_request_handler>:

/** @brief function handles pair request */
at_ble_status_t ble_pair_request_handler(void *params)
{
1000dfe0:	b5f0      	push	{r4, r5, r6, r7, lr}
1000dfe2:	465f      	mov	r7, fp
1000dfe4:	4656      	mov	r6, sl
1000dfe6:	464d      	mov	r5, r9
1000dfe8:	4644      	mov	r4, r8
1000dfea:	b4f0      	push	{r4, r5, r6, r7}
1000dfec:	b085      	sub	sp, #20
1000dfee:	4680      	mov	r8, r0
	at_ble_pair_request_t* pair_req;
	pair_req = (at_ble_pair_request_t*)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == pair_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000dff0:	8804      	ldrh	r4, [r0, #0]
1000dff2:	4a54      	ldr	r2, [pc, #336]	; (1000e144 <ble_pair_request_handler+0x164>)
1000dff4:	2100      	movs	r1, #0
	at_ble_pair_features_t features;
	uint8_t i = 0, idx;
	at_ble_pair_request_t* pair_req;
	pair_req = (at_ble_pair_request_t*)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000dff6:	2300      	movs	r3, #0
	{
		if((ble_dev_info[idx].conn_info.handle == pair_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000dff8:	8910      	ldrh	r0, [r2, #8]
1000dffa:	42a0      	cmp	r0, r4
1000dffc:	d10d      	bne.n	1000e01a <ble_pair_request_handler+0x3a>
1000dffe:	0010      	movs	r0, r2
1000e000:	305e      	adds	r0, #94	; 0x5e
1000e002:	7800      	ldrb	r0, [r0, #0]
1000e004:	2802      	cmp	r0, #2
1000e006:	d108      	bne.n	1000e01a <ble_pair_request_handler+0x3a>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
1000e008:	014a      	lsls	r2, r1, #5
1000e00a:	1a52      	subs	r2, r2, r1
1000e00c:	0095      	lsls	r5, r2, #2
1000e00e:	4a4d      	ldr	r2, [pc, #308]	; (1000e144 <ble_pair_request_handler+0x164>)
1000e010:	1952      	adds	r2, r2, r5
1000e012:	325e      	adds	r2, #94	; 0x5e
1000e014:	2103      	movs	r1, #3
1000e016:	7011      	strb	r1, [r2, #0]
			break;
1000e018:	e005      	b.n	1000e026 <ble_pair_request_handler+0x46>
	at_ble_pair_features_t features;
	uint8_t i = 0, idx;
	at_ble_pair_request_t* pair_req;
	pair_req = (at_ble_pair_request_t*)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000e01a:	3301      	adds	r3, #1
1000e01c:	b2db      	uxtb	r3, r3
1000e01e:	3101      	adds	r1, #1
1000e020:	327c      	adds	r2, #124	; 0x7c
1000e022:	2b05      	cmp	r3, #5
1000e024:	d1e8      	bne.n	1000dff8 <ble_pair_request_handler+0x18>
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
			break;
		}
	}
	
	features.desired_auth =  BLE_AUTHENTICATION_LEVEL; 
1000e026:	aa01      	add	r2, sp, #4
1000e028:	2100      	movs	r1, #0
1000e02a:	7211      	strb	r1, [r2, #8]
	features.bond = BLE_BOND_REQ;
1000e02c:	7091      	strb	r1, [r2, #2]
	features.mitm_protection = BLE_MITM_REQ;
1000e02e:	7051      	strb	r1, [r2, #1]
	/* Device capabilities is display only , key will be generated
	and displayed */
	features.io_cababilities = BLE_IO_CAPABALITIES;
1000e030:	2003      	movs	r0, #3
1000e032:	7010      	strb	r0, [r2, #0]
	features.oob_avaiable = BLE_OOB_REQ;
1000e034:	70d1      	strb	r1, [r2, #3]
	
	/* Distribution of LTK is required */
	if (ble_dev_info[idx].conn_info.peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE)
1000e036:	001e      	movs	r6, r3
1000e038:	015a      	lsls	r2, r3, #5
1000e03a:	1ad2      	subs	r2, r2, r3
1000e03c:	0092      	lsls	r2, r2, #2
1000e03e:	4941      	ldr	r1, [pc, #260]	; (1000e144 <ble_pair_request_handler+0x164>)
1000e040:	5c52      	ldrb	r2, [r2, r1]
1000e042:	2a02      	cmp	r2, #2
1000e044:	d104      	bne.n	1000e050 <ble_pair_request_handler+0x70>
	{
		/* Distribution of IRK is required */
		features.initiator_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000e046:	aa01      	add	r2, sp, #4
1000e048:	2103      	movs	r1, #3
1000e04a:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000e04c:	71d1      	strb	r1, [r2, #7]
1000e04e:	e003      	b.n	1000e058 <ble_pair_request_handler+0x78>
	}
	else
	{
		features.initiator_keys =   AT_BLE_KEY_DIST_ENC;
1000e050:	aa01      	add	r2, sp, #4
1000e052:	2101      	movs	r1, #1
1000e054:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   AT_BLE_KEY_DIST_ENC;
1000e056:	71d1      	strb	r1, [r2, #7]
	}
			
	features.max_key_size = 16;
1000e058:	aa01      	add	r2, sp, #4
1000e05a:	2110      	movs	r1, #16
1000e05c:	7151      	strb	r1, [r2, #5]
	features.min_key_size = 16;
1000e05e:	7111      	strb	r1, [r2, #4]
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
1000e060:	0172      	lsls	r2, r6, #5
1000e062:	1b92      	subs	r2, r2, r6
1000e064:	0092      	lsls	r2, r2, #2
1000e066:	4937      	ldr	r1, [pc, #220]	; (1000e144 <ble_pair_request_handler+0x164>)
1000e068:	188a      	adds	r2, r1, r2
1000e06a:	7e12      	ldrb	r2, [r2, #24]
1000e06c:	2a40      	cmp	r2, #64	; 0x40
1000e06e:	d142      	bne.n	1000e0f6 <ble_pair_request_handler+0x116>
1000e070:	015f      	lsls	r7, r3, #5
1000e072:	1afb      	subs	r3, r7, r3
1000e074:	009b      	lsls	r3, r3, #2
1000e076:	469b      	mov	fp, r3
1000e078:	001c      	movs	r4, r3
1000e07a:	3460      	adds	r4, #96	; 0x60
1000e07c:	1864      	adds	r4, r4, r1
1000e07e:	465d      	mov	r5, fp
1000e080:	3568      	adds	r5, #104	; 0x68
1000e082:	186d      	adds	r5, r5, r1
1000e084:	0027      	movs	r7, r4
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
		{						
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000e086:	4b30      	ldr	r3, [pc, #192]	; (1000e148 <ble_pair_request_handler+0x168>)
1000e088:	469a      	mov	sl, r3
1000e08a:	230f      	movs	r3, #15
1000e08c:	4699      	mov	r9, r3
1000e08e:	47d0      	blx	sl
1000e090:	464b      	mov	r3, r9
1000e092:	4018      	ands	r0, r3
1000e094:	7038      	strb	r0, [r7, #0]
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
1000e096:	47d0      	blx	sl
1000e098:	464b      	mov	r3, r9
1000e09a:	4018      	ands	r0, r3
1000e09c:	74b8      	strb	r0, [r7, #18]
1000e09e:	3701      	adds	r7, #1
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
1000e0a0:	42af      	cmp	r7, r5
1000e0a2:	d1f4      	bne.n	1000e08e <ble_pair_request_handler+0xae>
1000e0a4:	465b      	mov	r3, fp
1000e0a6:	3370      	adds	r3, #112	; 0x70
1000e0a8:	4f26      	ldr	r7, [pc, #152]	; (1000e144 <ble_pair_request_handler+0x164>)
1000e0aa:	19df      	adds	r7, r3, r7
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000e0ac:	4b26      	ldr	r3, [pc, #152]	; (1000e148 <ble_pair_request_handler+0x168>)
1000e0ae:	469a      	mov	sl, r3
1000e0b0:	230f      	movs	r3, #15
1000e0b2:	4699      	mov	r9, r3
1000e0b4:	47d0      	blx	sl
1000e0b6:	464b      	mov	r3, r9
1000e0b8:	4018      	ands	r0, r3
1000e0ba:	7028      	strb	r0, [r5, #0]
1000e0bc:	3501      	adds	r5, #1
		{						
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
1000e0be:	42bd      	cmp	r5, r7
1000e0c0:	d1f8      	bne.n	1000e0b4 <ble_pair_request_handler+0xd4>
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
		}
		DBG_LOG_DEV("Generated LTK: ");
1000e0c2:	4822      	ldr	r0, [pc, #136]	; (1000e14c <ble_pair_request_handler+0x16c>)
1000e0c4:	4b22      	ldr	r3, [pc, #136]	; (1000e150 <ble_pair_request_handler+0x170>)
1000e0c6:	4798      	blx	r3
1000e0c8:	4822      	ldr	r0, [pc, #136]	; (1000e154 <ble_pair_request_handler+0x174>)
1000e0ca:	4b23      	ldr	r3, [pc, #140]	; (1000e158 <ble_pair_request_handler+0x178>)
1000e0cc:	4798      	blx	r3
		for (i = 0; i < 16; i++)
		{
			DBG_LOG_CONT_DEV("0x%02X ", ble_dev_info[idx].host_ltk.key[i]);
1000e0ce:	4d22      	ldr	r5, [pc, #136]	; (1000e158 <ble_pair_request_handler+0x178>)
1000e0d0:	7821      	ldrb	r1, [r4, #0]
1000e0d2:	4822      	ldr	r0, [pc, #136]	; (1000e15c <ble_pair_request_handler+0x17c>)
1000e0d4:	47a8      	blx	r5
1000e0d6:	3401      	adds	r4, #1
		for(i=8 ; i<16 ;i++)
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
		}
		DBG_LOG_DEV("Generated LTK: ");
		for (i = 0; i < 16; i++)
1000e0d8:	42bc      	cmp	r4, r7
1000e0da:	d1f9      	bne.n	1000e0d0 <ble_pair_request_handler+0xf0>
		{
			DBG_LOG_CONT_DEV("0x%02X ", ble_dev_info[idx].host_ltk.key[i]);
		}
		
		ble_dev_info[idx].host_ltk.ediv = rand()&0xffff;
1000e0dc:	4b1a      	ldr	r3, [pc, #104]	; (1000e148 <ble_pair_request_handler+0x168>)
1000e0de:	4798      	blx	r3
1000e0e0:	0173      	lsls	r3, r6, #5
1000e0e2:	1b9b      	subs	r3, r3, r6
1000e0e4:	009b      	lsls	r3, r3, #2
1000e0e6:	4a17      	ldr	r2, [pc, #92]	; (1000e144 <ble_pair_request_handler+0x164>)
1000e0e8:	18d3      	adds	r3, r2, r3
1000e0ea:	001a      	movs	r2, r3
1000e0ec:	3270      	adds	r2, #112	; 0x70
1000e0ee:	8010      	strh	r0, [r2, #0]
		ble_dev_info[idx].host_ltk.key_size = 16;
1000e0f0:	337a      	adds	r3, #122	; 0x7a
1000e0f2:	2210      	movs	r2, #16
1000e0f4:	701a      	strb	r2, [r3, #0]
		/* Bonding information already exists */
		
	}

	/* Send pairing response */
	DBG_LOG_DEV("Sending pairing response");
1000e0f6:	4815      	ldr	r0, [pc, #84]	; (1000e14c <ble_pair_request_handler+0x16c>)
1000e0f8:	4b15      	ldr	r3, [pc, #84]	; (1000e150 <ble_pair_request_handler+0x170>)
1000e0fa:	4798      	blx	r3
1000e0fc:	4818      	ldr	r0, [pc, #96]	; (1000e160 <ble_pair_request_handler+0x180>)
1000e0fe:	4b16      	ldr	r3, [pc, #88]	; (1000e158 <ble_pair_request_handler+0x178>)
1000e100:	4798      	blx	r3

	if(at_ble_authenticate(pair_req->handle, &features, &ble_dev_info[idx].host_ltk, NULL) != AT_BLE_SUCCESS)
1000e102:	0173      	lsls	r3, r6, #5
1000e104:	1b9b      	subs	r3, r3, r6
1000e106:	009b      	lsls	r3, r3, #2
1000e108:	3360      	adds	r3, #96	; 0x60
1000e10a:	4a0e      	ldr	r2, [pc, #56]	; (1000e144 <ble_pair_request_handler+0x164>)
1000e10c:	189a      	adds	r2, r3, r2
1000e10e:	4643      	mov	r3, r8
1000e110:	8818      	ldrh	r0, [r3, #0]
1000e112:	2300      	movs	r3, #0
1000e114:	a901      	add	r1, sp, #4
1000e116:	4c13      	ldr	r4, [pc, #76]	; (1000e164 <ble_pair_request_handler+0x184>)
1000e118:	47a0      	blx	r4
1000e11a:	2800      	cmp	r0, #0
1000e11c:	d00a      	beq.n	1000e134 <ble_pair_request_handler+0x154>
	{
		features.bond = false;
1000e11e:	ab01      	add	r3, sp, #4
1000e120:	2200      	movs	r2, #0
1000e122:	709a      	strb	r2, [r3, #2]
		features.mitm_protection = false;
1000e124:	705a      	strb	r2, [r3, #1]
		DBG_LOG("Pair Request - Authentication Failed");
1000e126:	4809      	ldr	r0, [pc, #36]	; (1000e14c <ble_pair_request_handler+0x16c>)
1000e128:	4b09      	ldr	r3, [pc, #36]	; (1000e150 <ble_pair_request_handler+0x170>)
1000e12a:	4798      	blx	r3
1000e12c:	480e      	ldr	r0, [pc, #56]	; (1000e168 <ble_pair_request_handler+0x188>)
1000e12e:	4b0a      	ldr	r3, [pc, #40]	; (1000e158 <ble_pair_request_handler+0x178>)
1000e130:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000e132:	20e2      	movs	r0, #226	; 0xe2
	}
	return AT_BLE_SUCCESS;
}
1000e134:	b005      	add	sp, #20
1000e136:	bc3c      	pop	{r2, r3, r4, r5}
1000e138:	4690      	mov	r8, r2
1000e13a:	4699      	mov	r9, r3
1000e13c:	46a2      	mov	sl, r4
1000e13e:	46ab      	mov	fp, r5
1000e140:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000e142:	46c0      	nop			; (mov r8, r8)
1000e144:	1001a460 	.word	0x1001a460
1000e148:	100154b5 	.word	0x100154b5
1000e14c:	10016660 	.word	0x10016660
1000e150:	100154a1 	.word	0x100154a1
1000e154:	10017bd4 	.word	0x10017bd4
1000e158:	10015381 	.word	0x10015381
1000e15c:	10017be4 	.word	0x10017be4
1000e160:	10017bec 	.word	0x10017bec
1000e164:	10011461 	.word	0x10011461
1000e168:	10017c08 	.word	0x10017c08

1000e16c <ble_pair_key_request_handler>:

/** @brief function handles pair key request */
at_ble_status_t ble_pair_key_request_handler (void *params)
{
1000e16c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000e16e:	b085      	sub	sp, #20
1000e170:	0005      	movs	r5, r0
	at_ble_pair_key_request_t *pair_key;
	pair_key = (at_ble_pair_key_request_t *)params;
	/* Passkey has fixed value in this example MSB */
	uint8_t passkey[6]={'1','2','3','4','5','6'};
1000e172:	2206      	movs	r2, #6
1000e174:	493d      	ldr	r1, [pc, #244]	; (1000e26c <ble_pair_key_request_handler+0x100>)
1000e176:	a802      	add	r0, sp, #8
1000e178:	4e3d      	ldr	r6, [pc, #244]	; (1000e270 <ble_pair_key_request_handler+0x104>)
1000e17a:	47b0      	blx	r6
	uint8_t idx = 0;
        uint8_t pin;
        
	at_ble_pair_key_request_t pair_key_request;
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
1000e17c:	ac01      	add	r4, sp, #4
1000e17e:	2204      	movs	r2, #4
1000e180:	0029      	movs	r1, r5
1000e182:	0020      	movs	r0, r4
1000e184:	47b0      	blx	r6
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
1000e186:	78e3      	ldrb	r3, [r4, #3]
1000e188:	2b00      	cmp	r3, #0
1000e18a:	d162      	bne.n	1000e252 <ble_pair_key_request_handler+0xe6>
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
1000e18c:	4839      	ldr	r0, [pc, #228]	; (1000e274 <ble_pair_key_request_handler+0x108>)
1000e18e:	4b3a      	ldr	r3, [pc, #232]	; (1000e278 <ble_pair_key_request_handler+0x10c>)
1000e190:	4798      	blx	r3
1000e192:	483a      	ldr	r0, [pc, #232]	; (1000e27c <ble_pair_key_request_handler+0x110>)
1000e194:	4b3a      	ldr	r3, [pc, #232]	; (1000e280 <ble_pair_key_request_handler+0x114>)
1000e196:	4798      	blx	r3
1000e198:	2600      	movs	r6, #0
		for (idx = 0; idx < 6;) {          
			pin = getchar_b11_timeout(CHECK_PAIRING_KEY_TIME_OUT);
1000e19a:	4c3a      	ldr	r4, [pc, #232]	; (1000e284 <ble_pair_key_request_handler+0x118>)
				return AT_BLE_FAILURE;
			}
			
			if ((pin >= '0') && ( pin <= '9')) {
			  passkey[idx++] = pin;
			  DBG_LOG_CONT("%c", pin);
1000e19c:	27ff      	movs	r7, #255	; 0xff
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
		for (idx = 0; idx < 6;) {          
			pin = getchar_b11_timeout(CHECK_PAIRING_KEY_TIME_OUT);
1000e19e:	201e      	movs	r0, #30
1000e1a0:	47a0      	blx	r4
1000e1a2:	b2c3      	uxtb	r3, r0

			if (!pin) {
1000e1a4:	2b00      	cmp	r3, #0
1000e1a6:	d11a      	bne.n	1000e1de <ble_pair_key_request_handler+0x72>
			DBG_LOG("Pin Timeout");
1000e1a8:	4f32      	ldr	r7, [pc, #200]	; (1000e274 <ble_pair_key_request_handler+0x108>)
1000e1aa:	0038      	movs	r0, r7
1000e1ac:	4e32      	ldr	r6, [pc, #200]	; (1000e278 <ble_pair_key_request_handler+0x10c>)
1000e1ae:	47b0      	blx	r6
1000e1b0:	4835      	ldr	r0, [pc, #212]	; (1000e288 <ble_pair_key_request_handler+0x11c>)
1000e1b2:	4c33      	ldr	r4, [pc, #204]	; (1000e280 <ble_pair_key_request_handler+0x114>)
1000e1b4:	47a0      	blx	r4
				DBG_LOG("Disconnecting ...");
1000e1b6:	0038      	movs	r0, r7
1000e1b8:	47b0      	blx	r6
1000e1ba:	4834      	ldr	r0, [pc, #208]	; (1000e28c <ble_pair_key_request_handler+0x120>)
1000e1bc:	47a0      	blx	r4
				if (!(at_ble_disconnect(pair_key->handle,
1000e1be:	8828      	ldrh	r0, [r5, #0]
1000e1c0:	2113      	movs	r1, #19
1000e1c2:	4b33      	ldr	r3, [pc, #204]	; (1000e290 <ble_pair_key_request_handler+0x124>)
1000e1c4:	4798      	blx	r3
1000e1c6:	0003      	movs	r3, r0
							AT_BLE_TERMINATED_BY_USER) == AT_BLE_SUCCESS)) {
					DBG_LOG("Disconnect Request Failed");
				}
				return AT_BLE_FAILURE;
1000e1c8:	20e2      	movs	r0, #226	; 0xe2
			pin = getchar_b11_timeout(CHECK_PAIRING_KEY_TIME_OUT);

			if (!pin) {
			DBG_LOG("Pin Timeout");
				DBG_LOG("Disconnecting ...");
				if (!(at_ble_disconnect(pair_key->handle,
1000e1ca:	2b00      	cmp	r3, #0
1000e1cc:	d04c      	beq.n	1000e268 <ble_pair_key_request_handler+0xfc>
							AT_BLE_TERMINATED_BY_USER) == AT_BLE_SUCCESS)) {
					DBG_LOG("Disconnect Request Failed");
1000e1ce:	4829      	ldr	r0, [pc, #164]	; (1000e274 <ble_pair_key_request_handler+0x108>)
1000e1d0:	4b29      	ldr	r3, [pc, #164]	; (1000e278 <ble_pair_key_request_handler+0x10c>)
1000e1d2:	4798      	blx	r3
1000e1d4:	482f      	ldr	r0, [pc, #188]	; (1000e294 <ble_pair_key_request_handler+0x128>)
1000e1d6:	4b2a      	ldr	r3, [pc, #168]	; (1000e280 <ble_pair_key_request_handler+0x114>)
1000e1d8:	4798      	blx	r3
				}
				return AT_BLE_FAILURE;
1000e1da:	20e2      	movs	r0, #226	; 0xe2
1000e1dc:	e044      	b.n	1000e268 <ble_pair_key_request_handler+0xfc>
			}
			
			if ((pin >= '0') && ( pin <= '9')) {
1000e1de:	001a      	movs	r2, r3
1000e1e0:	3a30      	subs	r2, #48	; 0x30
1000e1e2:	2a09      	cmp	r2, #9
1000e1e4:	d8db      	bhi.n	1000e19e <ble_pair_key_request_handler+0x32>
			  passkey[idx++] = pin;
1000e1e6:	aa02      	add	r2, sp, #8
1000e1e8:	54b3      	strb	r3, [r6, r2]
			  DBG_LOG_CONT("%c", pin);
1000e1ea:	4038      	ands	r0, r7
1000e1ec:	4b2a      	ldr	r3, [pc, #168]	; (1000e298 <ble_pair_key_request_handler+0x12c>)
1000e1ee:	4798      	blx	r3
1000e1f0:	3601      	adds	r6, #1
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
		for (idx = 0; idx < 6;) {          
1000e1f2:	2e06      	cmp	r6, #6
1000e1f4:	d026      	beq.n	1000e244 <ble_pair_key_request_handler+0xd8>
1000e1f6:	e7d2      	b.n	1000e19e <ble_pair_key_request_handler+0x32>
          {
            DBG_LOG("Entered Pass-code:");
          }
          else
          {
            DBG_LOG("Please Enter the following Pass-code(on other Device):");
1000e1f8:	481e      	ldr	r0, [pc, #120]	; (1000e274 <ble_pair_key_request_handler+0x108>)
1000e1fa:	4b1f      	ldr	r3, [pc, #124]	; (1000e278 <ble_pair_key_request_handler+0x10c>)
1000e1fc:	4798      	blx	r3
1000e1fe:	4827      	ldr	r0, [pc, #156]	; (1000e29c <ble_pair_key_request_handler+0x130>)
1000e200:	4b1f      	ldr	r3, [pc, #124]	; (1000e280 <ble_pair_key_request_handler+0x114>)
1000e202:	4798      	blx	r3
	at_ble_pair_key_request_t pair_key_request;
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
1000e204:	2400      	movs	r4, #0
          
          /* Convert passkey to ASCII format */
          for(idx=0; idx<AT_BLE_PASSKEY_LEN; idx++)
          {
                  passkey[idx] = (passkey[idx]);
                  DBG_LOG_CONT("%c",passkey[idx]);
1000e206:	4e24      	ldr	r6, [pc, #144]	; (1000e298 <ble_pair_key_request_handler+0x12c>)
          }
          
          /* Convert passkey to ASCII format */
          for(idx=0; idx<AT_BLE_PASSKEY_LEN; idx++)
          {
                  passkey[idx] = (passkey[idx]);
1000e208:	ab02      	add	r3, sp, #8
                  DBG_LOG_CONT("%c",passkey[idx]);
1000e20a:	5ce0      	ldrb	r0, [r4, r3]
1000e20c:	47b0      	blx	r6
1000e20e:	3401      	adds	r4, #1
          {
            DBG_LOG("Please Enter the following Pass-code(on other Device):");
          }
          
          /* Convert passkey to ASCII format */
          for(idx=0; idx<AT_BLE_PASSKEY_LEN; idx++)
1000e210:	2c06      	cmp	r4, #6
1000e212:	d1f9      	bne.n	1000e208 <ble_pair_key_request_handler+0x9c>
          {
                  passkey[idx] = (passkey[idx]);
                  DBG_LOG_CONT("%c",passkey[idx]);
          }		
          
          if(!((at_ble_pair_key_reply(pair_key->handle, pair_key_request.type, passkey)) == AT_BLE_SUCCESS))
1000e214:	ab01      	add	r3, sp, #4
1000e216:	7899      	ldrb	r1, [r3, #2]
1000e218:	8828      	ldrh	r0, [r5, #0]
1000e21a:	aa02      	add	r2, sp, #8
1000e21c:	4b20      	ldr	r3, [pc, #128]	; (1000e2a0 <ble_pair_key_request_handler+0x134>)
1000e21e:	4798      	blx	r3
1000e220:	2800      	cmp	r0, #0
1000e222:	d021      	beq.n	1000e268 <ble_pair_key_request_handler+0xfc>
          {
                  DBG_LOG("Pair-key reply failed");
1000e224:	4813      	ldr	r0, [pc, #76]	; (1000e274 <ble_pair_key_request_handler+0x108>)
1000e226:	4b14      	ldr	r3, [pc, #80]	; (1000e278 <ble_pair_key_request_handler+0x10c>)
1000e228:	4798      	blx	r3
1000e22a:	481e      	ldr	r0, [pc, #120]	; (1000e2a4 <ble_pair_key_request_handler+0x138>)
1000e22c:	4b14      	ldr	r3, [pc, #80]	; (1000e280 <ble_pair_key_request_handler+0x114>)
1000e22e:	4798      	blx	r3
		if(pair_key_request.type == AT_BLE_PAIR_OOB)
		{
			DBG_LOG("OOB Feature Not supported");
		}
	}
	return AT_BLE_SUCCESS;	
1000e230:	2000      	movs	r0, #0
1000e232:	e019      	b.n	1000e268 <ble_pair_key_request_handler+0xfc>
	}
	else 
	{
		if(pair_key_request.type == AT_BLE_PAIR_OOB)
		{
			DBG_LOG("OOB Feature Not supported");
1000e234:	480f      	ldr	r0, [pc, #60]	; (1000e274 <ble_pair_key_request_handler+0x108>)
1000e236:	4b10      	ldr	r3, [pc, #64]	; (1000e278 <ble_pair_key_request_handler+0x10c>)
1000e238:	4798      	blx	r3
1000e23a:	481b      	ldr	r0, [pc, #108]	; (1000e2a8 <ble_pair_key_request_handler+0x13c>)
1000e23c:	4b10      	ldr	r3, [pc, #64]	; (1000e280 <ble_pair_key_request_handler+0x114>)
1000e23e:	4798      	blx	r3
		}
	}
	return AT_BLE_SUCCESS;	
1000e240:	2000      	movs	r0, #0
1000e242:	e011      	b.n	1000e268 <ble_pair_key_request_handler+0xfc>
	if(((pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_DISPLAY) &&
	   (pair_key_request.type == AT_BLE_PAIR_PASSKEY)) || (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY))
	{
          if(pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY)
          {
            DBG_LOG("Entered Pass-code:");
1000e244:	480b      	ldr	r0, [pc, #44]	; (1000e274 <ble_pair_key_request_handler+0x108>)
1000e246:	4b0c      	ldr	r3, [pc, #48]	; (1000e278 <ble_pair_key_request_handler+0x10c>)
1000e248:	4798      	blx	r3
1000e24a:	4818      	ldr	r0, [pc, #96]	; (1000e2ac <ble_pair_key_request_handler+0x140>)
1000e24c:	4b0c      	ldr	r3, [pc, #48]	; (1000e280 <ble_pair_key_request_handler+0x114>)
1000e24e:	4798      	blx	r3
1000e250:	e7d8      	b.n	1000e204 <ble_pair_key_request_handler+0x98>
			} 
	  }
	}	
	
	/* Display passkey */
	if(((pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_DISPLAY) &&
1000e252:	ab01      	add	r3, sp, #4
1000e254:	885a      	ldrh	r2, [r3, #2]
1000e256:	2380      	movs	r3, #128	; 0x80
1000e258:	005b      	lsls	r3, r3, #1
1000e25a:	429a      	cmp	r2, r3
1000e25c:	d0cc      	beq.n	1000e1f8 <ble_pair_key_request_handler+0x8c>
                  DBG_LOG("Pair-key reply failed");
          }
	}
	else 
	{
		if(pair_key_request.type == AT_BLE_PAIR_OOB)
1000e25e:	ab01      	add	r3, sp, #4
1000e260:	789b      	ldrb	r3, [r3, #2]
1000e262:	2b01      	cmp	r3, #1
1000e264:	d0e6      	beq.n	1000e234 <ble_pair_key_request_handler+0xc8>
		{
			DBG_LOG("OOB Feature Not supported");
		}
	}
	return AT_BLE_SUCCESS;	
1000e266:	2000      	movs	r0, #0
}
1000e268:	b005      	add	sp, #20
1000e26a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000e26c:	100177f0 	.word	0x100177f0
1000e270:	10015227 	.word	0x10015227
1000e274:	10016660 	.word	0x10016660
1000e278:	100154a1 	.word	0x100154a1
1000e27c:	10017c30 	.word	0x10017c30
1000e280:	10015381 	.word	0x10015381
1000e284:	1000ef89 	.word	0x1000ef89
1000e288:	10017c58 	.word	0x10017c58
1000e28c:	10017c64 	.word	0x10017c64
1000e290:	10010a69 	.word	0x10010a69
1000e294:	10017b10 	.word	0x10017b10
1000e298:	100153b5 	.word	0x100153b5
1000e29c:	10017c78 	.word	0x10017c78
1000e2a0:	10011591 	.word	0x10011591
1000e2a4:	10017cb0 	.word	0x10017cb0
1000e2a8:	10017cc8 	.word	0x10017cc8
1000e2ac:	10017ce4 	.word	0x10017ce4

1000e2b0 <ble_encryption_request_handler>:
	return AT_BLE_SUCCESS;
}

/** @brief function handles encryption requests */
at_ble_status_t ble_encryption_request_handler(void *params)
{
1000e2b0:	b5f0      	push	{r4, r5, r6, r7, lr}
1000e2b2:	465f      	mov	r7, fp
1000e2b4:	4656      	mov	r6, sl
1000e2b6:	464d      	mov	r5, r9
1000e2b8:	b4e0      	push	{r5, r6, r7}
1000e2ba:	0006      	movs	r6, r0
	uint8_t idx;
	enc_req = (at_ble_encryption_request_t *)params;

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == enc_req->handle) && (ble_dev_info[idx].conn_state != BLE_DEVICE_DISCONNECTED) &&
1000e2bc:	8800      	ldrh	r0, [r0, #0]
1000e2be:	4b49      	ldr	r3, [pc, #292]	; (1000e3e4 <ble_encryption_request_handler+0x134>)
1000e2c0:	2200      	movs	r2, #0
	bool key_found = false;
	bool device_found = false;
	uint8_t idx;
	enc_req = (at_ble_encryption_request_t *)params;

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000e2c2:	2400      	movs	r4, #0
	{
		if((ble_dev_info[idx].conn_info.handle == enc_req->handle) && (ble_dev_info[idx].conn_state != BLE_DEVICE_DISCONNECTED) &&
1000e2c4:	8919      	ldrh	r1, [r3, #8]
1000e2c6:	4281      	cmp	r1, r0
1000e2c8:	d137      	bne.n	1000e33a <ble_encryption_request_handler+0x8a>
1000e2ca:	0019      	movs	r1, r3
1000e2cc:	315e      	adds	r1, #94	; 0x5e
1000e2ce:	7809      	ldrb	r1, [r1, #0]
1000e2d0:	2901      	cmp	r1, #1
1000e2d2:	d932      	bls.n	1000e33a <ble_encryption_request_handler+0x8a>
		(ble_dev_info[idx].conn_state != BLE_DEVICE_DEFAULT_IDLE))
		{
			device_found = true;
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_STATE;
1000e2d4:	4f43      	ldr	r7, [pc, #268]	; (1000e3e4 <ble_encryption_request_handler+0x134>)
1000e2d6:	0153      	lsls	r3, r2, #5
1000e2d8:	1a9d      	subs	r5, r3, r2
1000e2da:	00ad      	lsls	r5, r5, #2
1000e2dc:	197d      	adds	r5, r7, r5
1000e2de:	355e      	adds	r5, #94	; 0x5e
1000e2e0:	2306      	movs	r3, #6
1000e2e2:	702b      	strb	r3, [r5, #0]
			DBG_LOG_DEV("ENC-Req: Conn Handle Device Found:hdl:%d", enc_req->handle);
1000e2e4:	4840      	ldr	r0, [pc, #256]	; (1000e3e8 <ble_encryption_request_handler+0x138>)
1000e2e6:	4b41      	ldr	r3, [pc, #260]	; (1000e3ec <ble_encryption_request_handler+0x13c>)
1000e2e8:	469a      	mov	sl, r3
1000e2ea:	4798      	blx	r3
1000e2ec:	8831      	ldrh	r1, [r6, #0]
1000e2ee:	4840      	ldr	r0, [pc, #256]	; (1000e3f0 <ble_encryption_request_handler+0x140>)
1000e2f0:	4b40      	ldr	r3, [pc, #256]	; (1000e3f4 <ble_encryption_request_handler+0x144>)
1000e2f2:	4699      	mov	r9, r3
1000e2f4:	4798      	blx	r3
		}
	}
	
	if (device_found)
	{
		DBG_LOG_DEV("host device ediv %x",ble_dev_info[idx].host_ltk.ediv);
1000e2f6:	483c      	ldr	r0, [pc, #240]	; (1000e3e8 <ble_encryption_request_handler+0x138>)
1000e2f8:	47d0      	blx	sl
1000e2fa:	0163      	lsls	r3, r4, #5
1000e2fc:	1b1b      	subs	r3, r3, r4
1000e2fe:	009b      	lsls	r3, r3, #2
1000e300:	18ff      	adds	r7, r7, r3
1000e302:	2370      	movs	r3, #112	; 0x70
1000e304:	469b      	mov	fp, r3
1000e306:	44bb      	add	fp, r7
1000e308:	465b      	mov	r3, fp
1000e30a:	8819      	ldrh	r1, [r3, #0]
1000e30c:	483a      	ldr	r0, [pc, #232]	; (1000e3f8 <ble_encryption_request_handler+0x148>)
1000e30e:	47c8      	blx	r9
		DBG_LOG_DEV("peer device ediv %x",ble_dev_info[idx].bond_info.peer_ltk.ediv);
1000e310:	4835      	ldr	r0, [pc, #212]	; (1000e3e8 <ble_encryption_request_handler+0x138>)
1000e312:	47d0      	blx	sl
1000e314:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
1000e316:	4839      	ldr	r0, [pc, #228]	; (1000e3fc <ble_encryption_request_handler+0x14c>)
1000e318:	47c8      	blx	r9
		DBG_LOG_DEV("enc_req ediv %x", enc_req->ediv);
1000e31a:	4833      	ldr	r0, [pc, #204]	; (1000e3e8 <ble_encryption_request_handler+0x138>)
1000e31c:	47d0      	blx	sl
1000e31e:	8871      	ldrh	r1, [r6, #2]
1000e320:	4837      	ldr	r0, [pc, #220]	; (1000e400 <ble_encryption_request_handler+0x150>)
1000e322:	47c8      	blx	r9
		DBG_LOG_DEV("The index is %d",idx);
1000e324:	4830      	ldr	r0, [pc, #192]	; (1000e3e8 <ble_encryption_request_handler+0x138>)
1000e326:	47d0      	blx	sl
1000e328:	0021      	movs	r1, r4
1000e32a:	4836      	ldr	r0, [pc, #216]	; (1000e404 <ble_encryption_request_handler+0x154>)
1000e32c:	47c8      	blx	r9
		if((ble_dev_info[idx].host_ltk.ediv == enc_req->ediv)
1000e32e:	465b      	mov	r3, fp
1000e330:	881a      	ldrh	r2, [r3, #0]
1000e332:	8873      	ldrh	r3, [r6, #2]
1000e334:	429a      	cmp	r2, r3
1000e336:	d12a      	bne.n	1000e38e <ble_encryption_request_handler+0xde>
1000e338:	e006      	b.n	1000e348 <ble_encryption_request_handler+0x98>
	bool key_found = false;
	bool device_found = false;
	uint8_t idx;
	enc_req = (at_ble_encryption_request_t *)params;

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000e33a:	3401      	adds	r4, #1
1000e33c:	b2e4      	uxtb	r4, r4
1000e33e:	3201      	adds	r2, #1
1000e340:	337c      	adds	r3, #124	; 0x7c
1000e342:	2c05      	cmp	r4, #5
1000e344:	d1be      	bne.n	1000e2c4 <ble_encryption_request_handler+0x14>
1000e346:	e022      	b.n	1000e38e <ble_encryption_request_handler+0xde>
		DBG_LOG_DEV("host device ediv %x",ble_dev_info[idx].host_ltk.ediv);
		DBG_LOG_DEV("peer device ediv %x",ble_dev_info[idx].bond_info.peer_ltk.ediv);
		DBG_LOG_DEV("enc_req ediv %x", enc_req->ediv);
		DBG_LOG_DEV("The index is %d",idx);
		if((ble_dev_info[idx].host_ltk.ediv == enc_req->ediv)
		&& !memcmp(&enc_req->nb[0],&ble_dev_info[idx].host_ltk.nb[0],8))
1000e348:	0161      	lsls	r1, r4, #5
1000e34a:	1b09      	subs	r1, r1, r4
1000e34c:	0089      	lsls	r1, r1, #2
1000e34e:	4b25      	ldr	r3, [pc, #148]	; (1000e3e4 <ble_encryption_request_handler+0x134>)
1000e350:	1859      	adds	r1, r3, r1
1000e352:	3172      	adds	r1, #114	; 0x72
1000e354:	1d30      	adds	r0, r6, #4
1000e356:	2208      	movs	r2, #8
1000e358:	4b2b      	ldr	r3, [pc, #172]	; (1000e408 <ble_encryption_request_handler+0x158>)
1000e35a:	4798      	blx	r3
1000e35c:	2800      	cmp	r0, #0
1000e35e:	d116      	bne.n	1000e38e <ble_encryption_request_handler+0xde>
		{
			key_found = true;
			DBG_LOG_DEV("ENC-Req: Key Found");
1000e360:	4821      	ldr	r0, [pc, #132]	; (1000e3e8 <ble_encryption_request_handler+0x138>)
1000e362:	4b22      	ldr	r3, [pc, #136]	; (1000e3ec <ble_encryption_request_handler+0x13c>)
1000e364:	4798      	blx	r3
1000e366:	4829      	ldr	r0, [pc, #164]	; (1000e40c <ble_encryption_request_handler+0x15c>)
1000e368:	4b22      	ldr	r3, [pc, #136]	; (1000e3f4 <ble_encryption_request_handler+0x144>)
1000e36a:	4798      	blx	r3
	    DBG_LOG("Please unpair the device from peer device(mobile) settings menu and start pairing again");
		at_ble_disconnect(ble_dev_info[idx].conn_info.handle, AT_BLE_AUTH_FAILURE);
		return AT_BLE_FAILURE;
    }

	if(!(at_ble_encryption_request_reply(enc_req->handle, ble_dev_info[idx].bond_info.auth, key_found, &ble_dev_info[idx].host_ltk) == AT_BLE_SUCCESS))
1000e36c:	0162      	lsls	r2, r4, #5
1000e36e:	1b13      	subs	r3, r2, r4
1000e370:	009b      	lsls	r3, r3, #2
1000e372:	3360      	adds	r3, #96	; 0x60
1000e374:	491b      	ldr	r1, [pc, #108]	; (1000e3e4 <ble_encryption_request_handler+0x134>)
1000e376:	185b      	adds	r3, r3, r1
1000e378:	1b12      	subs	r2, r2, r4
1000e37a:	0092      	lsls	r2, r2, #2
1000e37c:	188a      	adds	r2, r1, r2
1000e37e:	7d11      	ldrb	r1, [r2, #20]
1000e380:	8830      	ldrh	r0, [r6, #0]
1000e382:	2201      	movs	r2, #1
1000e384:	4c22      	ldr	r4, [pc, #136]	; (1000e410 <ble_encryption_request_handler+0x160>)
1000e386:	47a0      	blx	r4
1000e388:	1e04      	subs	r4, r0, #0
1000e38a:	d01e      	beq.n	1000e3ca <ble_encryption_request_handler+0x11a>
1000e38c:	e015      	b.n	1000e3ba <ble_encryption_request_handler+0x10a>
	}
	
	
    if(key_found == false)
    {
	    DBG_LOG("Pairing information of peer device is not available.");
1000e38e:	4f16      	ldr	r7, [pc, #88]	; (1000e3e8 <ble_encryption_request_handler+0x138>)
1000e390:	0038      	movs	r0, r7
1000e392:	4e16      	ldr	r6, [pc, #88]	; (1000e3ec <ble_encryption_request_handler+0x13c>)
1000e394:	47b0      	blx	r6
1000e396:	481f      	ldr	r0, [pc, #124]	; (1000e414 <ble_encryption_request_handler+0x164>)
1000e398:	4d16      	ldr	r5, [pc, #88]	; (1000e3f4 <ble_encryption_request_handler+0x144>)
1000e39a:	47a8      	blx	r5
	    DBG_LOG("Please unpair the device from peer device(mobile) settings menu and start pairing again");
1000e39c:	0038      	movs	r0, r7
1000e39e:	47b0      	blx	r6
1000e3a0:	481d      	ldr	r0, [pc, #116]	; (1000e418 <ble_encryption_request_handler+0x168>)
1000e3a2:	47a8      	blx	r5
		at_ble_disconnect(ble_dev_info[idx].conn_info.handle, AT_BLE_AUTH_FAILURE);
1000e3a4:	0163      	lsls	r3, r4, #5
1000e3a6:	1b1c      	subs	r4, r3, r4
1000e3a8:	00a4      	lsls	r4, r4, #2
1000e3aa:	4b0e      	ldr	r3, [pc, #56]	; (1000e3e4 <ble_encryption_request_handler+0x134>)
1000e3ac:	191c      	adds	r4, r3, r4
1000e3ae:	8920      	ldrh	r0, [r4, #8]
1000e3b0:	2105      	movs	r1, #5
1000e3b2:	4b1a      	ldr	r3, [pc, #104]	; (1000e41c <ble_encryption_request_handler+0x16c>)
1000e3b4:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000e3b6:	24e2      	movs	r4, #226	; 0xe2
1000e3b8:	e00d      	b.n	1000e3d6 <ble_encryption_request_handler+0x126>
    }

	if(!(at_ble_encryption_request_reply(enc_req->handle, ble_dev_info[idx].bond_info.auth, key_found, &ble_dev_info[idx].host_ltk) == AT_BLE_SUCCESS))
	{
		DBG_LOG("Encryption Request Reply Failed");
1000e3ba:	480b      	ldr	r0, [pc, #44]	; (1000e3e8 <ble_encryption_request_handler+0x138>)
1000e3bc:	4b0b      	ldr	r3, [pc, #44]	; (1000e3ec <ble_encryption_request_handler+0x13c>)
1000e3be:	4798      	blx	r3
1000e3c0:	4817      	ldr	r0, [pc, #92]	; (1000e420 <ble_encryption_request_handler+0x170>)
1000e3c2:	4b0c      	ldr	r3, [pc, #48]	; (1000e3f4 <ble_encryption_request_handler+0x144>)
1000e3c4:	4798      	blx	r3
	}
	else
	{      
		DBG_LOG_DEV("Encryption Request Reply");
	}
	return AT_BLE_SUCCESS;
1000e3c6:	2400      	movs	r4, #0
1000e3c8:	e005      	b.n	1000e3d6 <ble_encryption_request_handler+0x126>
	{
		DBG_LOG("Encryption Request Reply Failed");
	}
	else
	{      
		DBG_LOG_DEV("Encryption Request Reply");
1000e3ca:	4807      	ldr	r0, [pc, #28]	; (1000e3e8 <ble_encryption_request_handler+0x138>)
1000e3cc:	4b07      	ldr	r3, [pc, #28]	; (1000e3ec <ble_encryption_request_handler+0x13c>)
1000e3ce:	4798      	blx	r3
1000e3d0:	4814      	ldr	r0, [pc, #80]	; (1000e424 <ble_encryption_request_handler+0x174>)
1000e3d2:	4b08      	ldr	r3, [pc, #32]	; (1000e3f4 <ble_encryption_request_handler+0x144>)
1000e3d4:	4798      	blx	r3
	}
	return AT_BLE_SUCCESS;
}
1000e3d6:	0020      	movs	r0, r4
1000e3d8:	bc1c      	pop	{r2, r3, r4}
1000e3da:	4691      	mov	r9, r2
1000e3dc:	469a      	mov	sl, r3
1000e3de:	46a3      	mov	fp, r4
1000e3e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000e3e2:	46c0      	nop			; (mov r8, r8)
1000e3e4:	1001a460 	.word	0x1001a460
1000e3e8:	10016660 	.word	0x10016660
1000e3ec:	100154a1 	.word	0x100154a1
1000e3f0:	10017cf8 	.word	0x10017cf8
1000e3f4:	10015381 	.word	0x10015381
1000e3f8:	10017d24 	.word	0x10017d24
1000e3fc:	10017d38 	.word	0x10017d38
1000e400:	10017d4c 	.word	0x10017d4c
1000e404:	10017d5c 	.word	0x10017d5c
1000e408:	10015209 	.word	0x10015209
1000e40c:	10017d6c 	.word	0x10017d6c
1000e410:	100116c5 	.word	0x100116c5
1000e414:	10017d80 	.word	0x10017d80
1000e418:	10017db8 	.word	0x10017db8
1000e41c:	10010a69 	.word	0x10010a69
1000e420:	10017e10 	.word	0x10017e10
1000e424:	10017e30 	.word	0x10017e30

1000e428 <ble_mgr_events_callback_handler>:
}

bool ble_mgr_events_callback_handler(ble_mgr_event_cb_t event_cb_type, 
									ble_mgr_event_t event_type,
									const ble_event_callback_t *ble_event_handler)
{
1000e428:	b530      	push	{r4, r5, lr}
	uint8_t idx;
	uint8_t max_event_handler = 0;
	bool status = true;
	const ble_event_callback_t **ble_event_cb_ptr = NULL;
	if (ble_event_handler != NULL)
1000e42a:	2a00      	cmp	r2, #0
1000e42c:	d047      	beq.n	1000e4be <ble_mgr_events_callback_handler+0x96>
	{
		switch(event_type)
1000e42e:	2906      	cmp	r1, #6
1000e430:	d847      	bhi.n	1000e4c2 <ble_mgr_events_callback_handler+0x9a>
1000e432:	0089      	lsls	r1, r1, #2
1000e434:	4b28      	ldr	r3, [pc, #160]	; (1000e4d8 <ble_mgr_events_callback_handler+0xb0>)
1000e436:	585b      	ldr	r3, [r3, r1]
1000e438:	469f      	mov	pc, r3
			}
			break;
			
			case BLE_GATT_SERVER_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_gatt_server_event_cb;
1000e43a:	4b28      	ldr	r3, [pc, #160]	; (1000e4dc <ble_mgr_events_callback_handler+0xb4>)
				max_event_handler = MAX_GATT_SERVER_SUBSCRIBERS;
1000e43c:	2405      	movs	r4, #5
1000e43e:	e00a      	b.n	1000e456 <ble_mgr_events_callback_handler+0x2e>
			}
			break;
			
			case BLE_GATT_HTPT_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_htpt_event_cb;
1000e440:	4b27      	ldr	r3, [pc, #156]	; (1000e4e0 <ble_mgr_events_callback_handler+0xb8>)
				max_event_handler = MAX_HTPT_EVENT_SUBSCRIBERS;
1000e442:	2401      	movs	r4, #1
			}
			break;
1000e444:	e007      	b.n	1000e456 <ble_mgr_events_callback_handler+0x2e>
			
			case BLE_DTM_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_dtm_event_cb;
1000e446:	4b27      	ldr	r3, [pc, #156]	; (1000e4e4 <ble_mgr_events_callback_handler+0xbc>)
				max_event_handler = MAX_DTM_EVENT_SUBSCRIBERS;
1000e448:	2405      	movs	r4, #5
			}
			break;
1000e44a:	e004      	b.n	1000e456 <ble_mgr_events_callback_handler+0x2e>
			
			case BLE_CUSTOM_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_custom_event_cb;
1000e44c:	4b26      	ldr	r3, [pc, #152]	; (1000e4e8 <ble_mgr_events_callback_handler+0xc0>)
				max_event_handler = MAX_CUSTOM_EVENT_SUBSCRIBERS;
1000e44e:	2401      	movs	r4, #1
			}
			break;
1000e450:	e001      	b.n	1000e456 <ble_mgr_events_callback_handler+0x2e>
	{
		switch(event_type)
		{
			case BLE_GAP_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_gap_event_cb;
1000e452:	4b26      	ldr	r3, [pc, #152]	; (1000e4ec <ble_mgr_events_callback_handler+0xc4>)
				max_event_handler = MAX_GAP_EVENT_SUBSCRIBERS;
1000e454:	2405      	movs	r4, #5
		}
		
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
			if (event_cb_type == REGISTER_CALL_BACK)
1000e456:	2800      	cmp	r0, #0
1000e458:	d116      	bne.n	1000e488 <ble_mgr_events_callback_handler+0x60>
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == NULL)
1000e45a:	6819      	ldr	r1, [r3, #0]
1000e45c:	2900      	cmp	r1, #0
1000e45e:	d10b      	bne.n	1000e478 <ble_mgr_events_callback_handler+0x50>
1000e460:	e006      	b.n	1000e470 <ble_mgr_events_callback_handler+0x48>
1000e462:	001d      	movs	r5, r3
1000e464:	3304      	adds	r3, #4
1000e466:	1f18      	subs	r0, r3, #4
1000e468:	6800      	ldr	r0, [r0, #0]
1000e46a:	2800      	cmp	r0, #0
1000e46c:	d106      	bne.n	1000e47c <ble_mgr_events_callback_handler+0x54>
1000e46e:	e000      	b.n	1000e472 <ble_mgr_events_callback_handler+0x4a>
1000e470:	001d      	movs	r5, r3
					{
						ble_event_cb_ptr[idx] = ble_event_handler;
1000e472:	602a      	str	r2, [r5, #0]
						status = true; //Successfully registered to table
1000e474:	2101      	movs	r1, #1
						break;
1000e476:	e02c      	b.n	1000e4d2 <ble_mgr_events_callback_handler+0xaa>
1000e478:	3304      	adds	r3, #4
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
			if (event_cb_type == REGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == NULL)
1000e47a:	2100      	movs	r1, #0
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
			if (event_cb_type == REGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
1000e47c:	3101      	adds	r1, #1
1000e47e:	b2c9      	uxtb	r1, r1
1000e480:	42a1      	cmp	r1, r4
1000e482:	d3ee      	bcc.n	1000e462 <ble_mgr_events_callback_handler+0x3a>
			break;
		}
		
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
1000e484:	2100      	movs	r1, #0
1000e486:	e024      	b.n	1000e4d2 <ble_mgr_events_callback_handler+0xaa>
1000e488:	2100      	movs	r1, #0
						status = true; //Successfully registered to table
						break;
					}
				}
			}
			else if(event_cb_type == UNREGISTER_CALL_BACK)
1000e48a:	2801      	cmp	r0, #1
1000e48c:	d121      	bne.n	1000e4d2 <ble_mgr_events_callback_handler+0xaa>
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == ble_event_handler)
1000e48e:	6819      	ldr	r1, [r3, #0]
1000e490:	428a      	cmp	r2, r1
1000e492:	d10c      	bne.n	1000e4ae <ble_mgr_events_callback_handler+0x86>
1000e494:	e006      	b.n	1000e4a4 <ble_mgr_events_callback_handler+0x7c>
1000e496:	001d      	movs	r5, r3
1000e498:	3304      	adds	r3, #4
1000e49a:	1f18      	subs	r0, r3, #4
1000e49c:	6800      	ldr	r0, [r0, #0]
1000e49e:	4282      	cmp	r2, r0
1000e4a0:	d107      	bne.n	1000e4b2 <ble_mgr_events_callback_handler+0x8a>
1000e4a2:	e000      	b.n	1000e4a6 <ble_mgr_events_callback_handler+0x7e>
1000e4a4:	001d      	movs	r5, r3
					{
						ble_event_cb_ptr[idx] = NULL;
1000e4a6:	2300      	movs	r3, #0
1000e4a8:	602b      	str	r3, [r5, #0]
						status = true;//Successfully unregistered from table
1000e4aa:	2101      	movs	r1, #1
						break;
1000e4ac:	e011      	b.n	1000e4d2 <ble_mgr_events_callback_handler+0xaa>
1000e4ae:	3304      	adds	r3, #4
			}
			else if(event_cb_type == UNREGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == ble_event_handler)
1000e4b0:	2100      	movs	r1, #0
					}
				}
			}
			else if(event_cb_type == UNREGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
1000e4b2:	3101      	adds	r1, #1
1000e4b4:	b2c9      	uxtb	r1, r1
1000e4b6:	42a1      	cmp	r1, r4
1000e4b8:	d3ed      	bcc.n	1000e496 <ble_mgr_events_callback_handler+0x6e>
			break;
		}
		
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
1000e4ba:	2100      	movs	r1, #0
1000e4bc:	e009      	b.n	1000e4d2 <ble_mgr_events_callback_handler+0xaa>
			}			
		}
	}
	else
	{
		status = false; //Invalid parameter
1000e4be:	2100      	movs	r1, #0
1000e4c0:	e007      	b.n	1000e4d2 <ble_mgr_events_callback_handler+0xaa>
	uint8_t max_event_handler = 0;
	bool status = true;
	const ble_event_callback_t **ble_event_cb_ptr = NULL;
	if (ble_event_handler != NULL)
	{
		switch(event_type)
1000e4c2:	2100      	movs	r1, #0
1000e4c4:	e005      	b.n	1000e4d2 <ble_mgr_events_callback_handler+0xaa>
			}
			break;
			
			case BLE_GATT_CLIENT_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_gatt_client_event_cb;
1000e4c6:	4b0a      	ldr	r3, [pc, #40]	; (1000e4f0 <ble_mgr_events_callback_handler+0xc8>)
				max_event_handler = MAX_GATT_CLIENT_SUBSCRIBERS;
1000e4c8:	2405      	movs	r4, #5
1000e4ca:	e7c4      	b.n	1000e456 <ble_mgr_events_callback_handler+0x2e>
			}
			break;
			
			case BLE_L2CAP_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_l2cap_event_cb;
1000e4cc:	4b09      	ldr	r3, [pc, #36]	; (1000e4f4 <ble_mgr_events_callback_handler+0xcc>)
				max_event_handler = MAX_L2CAP_EVENT_SUBSCRIBERS;
1000e4ce:	2401      	movs	r4, #1
1000e4d0:	e7c1      	b.n	1000e456 <ble_mgr_events_callback_handler+0x2e>
	else
	{
		status = false; //Invalid parameter
	}
	return status;
}
1000e4d2:	0008      	movs	r0, r1
1000e4d4:	bd30      	pop	{r4, r5, pc}
1000e4d6:	46c0      	nop			; (mov r8, r8)
1000e4d8:	100176e4 	.word	0x100176e4
1000e4dc:	1001a44c 	.word	0x1001a44c
1000e4e0:	1001a448 	.word	0x1001a448
1000e4e4:	1001a6d0 	.word	0x1001a6d0
1000e4e8:	1001ac84 	.word	0x1001ac84
1000e4ec:	1001a6e4 	.word	0x1001a6e4
1000e4f0:	1001a6f8 	.word	0x1001a6f8
1000e4f4:	1001a740 	.word	0x1001a740

1000e4f8 <ble_device_init>:
volatile uint32_t 	event_params_memory[1024] 	= {0};


/** @brief BLE device initialization */
void ble_device_init(at_ble_addr_t *addr)
{
1000e4f8:	b5f0      	push	{r4, r5, r6, r7, lr}
1000e4fa:	465f      	mov	r7, fp
1000e4fc:	4656      	mov	r6, sl
1000e4fe:	464d      	mov	r5, r9
1000e500:	4644      	mov	r4, r8
1000e502:	b4f0      	push	{r4, r5, r6, r7}
1000e504:	b091      	sub	sp, #68	; 0x44
1000e506:	0005      	movs	r5, r0
static bool ble_scan_duplication_check(at_ble_scan_info_t * info);
#endif

static void init_global_var(void)
{
	ble_user_event_cb = 0;
1000e508:	2400      	movs	r4, #0
1000e50a:	4b7e      	ldr	r3, [pc, #504]	; (1000e704 <ble_device_init+0x20c>)
1000e50c:	601c      	str	r4, [r3, #0]
	
	memset(&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
1000e50e:	2207      	movs	r2, #7
1000e510:	2100      	movs	r1, #0
1000e512:	487d      	ldr	r0, [pc, #500]	; (1000e708 <ble_device_init+0x210>)
1000e514:	4e7d      	ldr	r6, [pc, #500]	; (1000e70c <ble_device_init+0x214>)
1000e516:	47b0      	blx	r6
	memset(&connected_state_info, 0, sizeof(at_ble_connected_t));
1000e518:	2212      	movs	r2, #18
1000e51a:	2100      	movs	r1, #0
1000e51c:	487c      	ldr	r0, [pc, #496]	; (1000e710 <ble_device_init+0x218>)
1000e51e:	47b0      	blx	r6
		
#if defined ATT_DB_MEMORY
	memset(att_db_data, 0, sizeof(uint32_t) * BLE_ATT_DB_MEMORY_SIZE/4);
1000e520:	4a7c      	ldr	r2, [pc, #496]	; (1000e714 <ble_device_init+0x21c>)
1000e522:	2100      	movs	r1, #0
1000e524:	487c      	ldr	r0, [pc, #496]	; (1000e718 <ble_device_init+0x220>)
1000e526:	47b0      	blx	r6
#endif

	scan_response_count = 0;
1000e528:	4b7c      	ldr	r3, [pc, #496]	; (1000e71c <ble_device_init+0x224>)
1000e52a:	701c      	strb	r4, [r3, #0]
	memset(scan_info, 0, sizeof(scan_info));
1000e52c:	22cd      	movs	r2, #205	; 0xcd
1000e52e:	0092      	lsls	r2, r2, #2
1000e530:	2100      	movs	r1, #0
1000e532:	487b      	ldr	r0, [pc, #492]	; (1000e720 <ble_device_init+0x228>)
1000e534:	47b0      	blx	r6

	event = AT_BLE_UNDEFINED_EVENT;
1000e536:	4b7b      	ldr	r3, [pc, #492]	; (1000e724 <ble_device_init+0x22c>)
1000e538:	701c      	strb	r4, [r3, #0]
	memset(ble_event_params, 0, BLE_EVENT_PARAM_MAX_SIZE);
1000e53a:	2283      	movs	r2, #131	; 0x83
1000e53c:	0092      	lsls	r2, r2, #2
1000e53e:	2100      	movs	r1, #0
1000e540:	4879      	ldr	r0, [pc, #484]	; (1000e728 <ble_device_init+0x230>)
1000e542:	47b0      	blx	r6
{
	uint8_t idx;	
	char *dev_name = NULL;
	init_global_var();

	memset((uint8_t *)event_pool_memory, 0, sizeof(event_pool_memory));
1000e544:	4b79      	ldr	r3, [pc, #484]	; (1000e72c <ble_device_init+0x234>)
1000e546:	469b      	mov	fp, r3
1000e548:	2380      	movs	r3, #128	; 0x80
1000e54a:	00db      	lsls	r3, r3, #3
1000e54c:	469a      	mov	sl, r3
1000e54e:	001a      	movs	r2, r3
1000e550:	2100      	movs	r1, #0
1000e552:	4658      	mov	r0, fp
1000e554:	47b0      	blx	r6
	memset((uint8_t *)event_params_memory, 0, sizeof(event_params_memory));
1000e556:	4b76      	ldr	r3, [pc, #472]	; (1000e730 <ble_device_init+0x238>)
1000e558:	4699      	mov	r9, r3
1000e55a:	2380      	movs	r3, #128	; 0x80
1000e55c:	015b      	lsls	r3, r3, #5
1000e55e:	4698      	mov	r8, r3
1000e560:	001a      	movs	r2, r3
1000e562:	2100      	movs	r1, #0
1000e564:	4648      	mov	r0, r9
1000e566:	47b0      	blx	r6

	memset(&pf_cfg, 0, sizeof(pf_cfg));
1000e568:	4f72      	ldr	r7, [pc, #456]	; (1000e734 <ble_device_init+0x23c>)
1000e56a:	221c      	movs	r2, #28
1000e56c:	2100      	movs	r1, #0
1000e56e:	0038      	movs	r0, r7
1000e570:	47b0      	blx	r6

	pf_cfg.event_mem_pool.memStartAdd        = (uint8_t *)event_pool_memory;
1000e572:	465b      	mov	r3, fp
1000e574:	60bb      	str	r3, [r7, #8]
	pf_cfg.event_mem_pool.memSize            = sizeof(event_pool_memory);
1000e576:	4653      	mov	r3, sl
1000e578:	60fb      	str	r3, [r7, #12]
	pf_cfg.event_params_mem_pool.memStartAdd = (uint8_t *)event_params_memory;
1000e57a:	464b      	mov	r3, r9
1000e57c:	613b      	str	r3, [r7, #16]
	pf_cfg.event_params_mem_pool.memSize     = sizeof(event_params_memory);
1000e57e:	4643      	mov	r3, r8
1000e580:	617b      	str	r3, [r7, #20]

	/* Initialize the BLE Event callbacks */
	for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_gap_event_cb[idx] = NULL;
1000e582:	4b6d      	ldr	r3, [pc, #436]	; (1000e738 <ble_device_init+0x240>)
1000e584:	601c      	str	r4, [r3, #0]
1000e586:	605c      	str	r4, [r3, #4]
1000e588:	609c      	str	r4, [r3, #8]
1000e58a:	60dc      	str	r4, [r3, #12]
1000e58c:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_gatt_client_event_cb[idx] = NULL;
1000e58e:	4b6b      	ldr	r3, [pc, #428]	; (1000e73c <ble_device_init+0x244>)
1000e590:	601c      	str	r4, [r3, #0]
1000e592:	605c      	str	r4, [r3, #4]
1000e594:	609c      	str	r4, [r3, #8]
1000e596:	60dc      	str	r4, [r3, #12]
1000e598:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
	{
		ble_mgr_gatt_server_event_cb[idx] = NULL;
1000e59a:	4b69      	ldr	r3, [pc, #420]	; (1000e740 <ble_device_init+0x248>)
1000e59c:	601c      	str	r4, [r3, #0]
1000e59e:	605c      	str	r4, [r3, #4]
1000e5a0:	609c      	str	r4, [r3, #8]
1000e5a2:	60dc      	str	r4, [r3, #12]
1000e5a4:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_L2CAP_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_l2cap_event_cb[idx] = NULL;
1000e5a6:	4b67      	ldr	r3, [pc, #412]	; (1000e744 <ble_device_init+0x24c>)
1000e5a8:	601c      	str	r4, [r3, #0]
	}
	
	for (idx = 0; idx < MAX_HTPT_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_htpt_event_cb[idx] = NULL;
1000e5aa:	4b67      	ldr	r3, [pc, #412]	; (1000e748 <ble_device_init+0x250>)
1000e5ac:	601c      	str	r4, [r3, #0]
	}
	
	for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_dtm_event_cb[idx] = NULL;
1000e5ae:	4b67      	ldr	r3, [pc, #412]	; (1000e74c <ble_device_init+0x254>)
1000e5b0:	601c      	str	r4, [r3, #0]
1000e5b2:	605c      	str	r4, [r3, #4]
1000e5b4:	609c      	str	r4, [r3, #8]
1000e5b6:	60dc      	str	r4, [r3, #12]
1000e5b8:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_CUSTOM_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_custom_event_cb[idx] = NULL;
1000e5ba:	4b65      	ldr	r3, [pc, #404]	; (1000e750 <ble_device_init+0x258>)
1000e5bc:	601c      	str	r4, [r3, #0]
1000e5be:	4c65      	ldr	r4, [pc, #404]	; (1000e754 <ble_device_init+0x25c>)
1000e5c0:	239b      	movs	r3, #155	; 0x9b
1000e5c2:	009b      	lsls	r3, r3, #2
1000e5c4:	4698      	mov	r8, r3
1000e5c6:	44a0      	add	r8, r4
	}
        
    /* Set the BLE Device connection state */
    for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
    {
        memset(&ble_dev_info[idx], 0, sizeof(ble_connected_dev_info_t));
1000e5c8:	4f50      	ldr	r7, [pc, #320]	; (1000e70c <ble_device_init+0x214>)
		ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
		/* Set Invalid to Bonding information */
		ble_dev_info[idx].bond_info.status = AT_BLE_GAP_INVALID_PARAM;
1000e5ca:	2640      	movs	r6, #64	; 0x40
	}
        
    /* Set the BLE Device connection state */
    for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
    {
        memset(&ble_dev_info[idx], 0, sizeof(ble_connected_dev_info_t));
1000e5cc:	227c      	movs	r2, #124	; 0x7c
1000e5ce:	2100      	movs	r1, #0
1000e5d0:	0020      	movs	r0, r4
1000e5d2:	47b8      	blx	r7
		ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
1000e5d4:	0023      	movs	r3, r4
1000e5d6:	335e      	adds	r3, #94	; 0x5e
1000e5d8:	2200      	movs	r2, #0
1000e5da:	701a      	strb	r2, [r3, #0]
		/* Set Invalid to Bonding information */
		ble_dev_info[idx].bond_info.status = AT_BLE_GAP_INVALID_PARAM;
1000e5dc:	7626      	strb	r6, [r4, #24]
1000e5de:	347c      	adds	r4, #124	; 0x7c
	{
		ble_mgr_custom_event_cb[idx] = NULL;
	}
        
    /* Set the BLE Device connection state */
    for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000e5e0:	45a0      	cmp	r8, r4
1000e5e2:	d1f3      	bne.n	1000e5cc <ble_device_init+0xd4>
		ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
		/* Set Invalid to Bonding information */
		ble_dev_info[idx].bond_info.status = AT_BLE_GAP_INVALID_PARAM;
    }
	/* Need to reset the count to 0 for storing it only in SRAM */
	ble_device_count = 0; 
1000e5e4:	4b5c      	ldr	r3, [pc, #368]	; (1000e758 <ble_device_init+0x260>)
1000e5e6:	701a      	strb	r2, [r3, #0]
	
	
#if defined ATT_DB_MEMORY
	pf_cfg.memPool.memSize = BLE_ATT_DB_MEMORY_SIZE;
1000e5e8:	4c52      	ldr	r4, [pc, #328]	; (1000e734 <ble_device_init+0x23c>)
1000e5ea:	4b4a      	ldr	r3, [pc, #296]	; (1000e714 <ble_device_init+0x21c>)
1000e5ec:	6063      	str	r3, [r4, #4]
	pf_cfg.memPool.memStartAdd = (uint8_t *)att_db_data;
1000e5ee:	4b4a      	ldr	r3, [pc, #296]	; (1000e718 <ble_device_init+0x220>)
1000e5f0:	6023      	str	r3, [r4, #0]

/* Initialize the BLE */
static void ble_init(at_ble_init_config_t * args)
{
	/* Initialize the platform */
	DBG_LOG("[ble_init]\t\t\tInitializing SAMB11");
1000e5f2:	485a      	ldr	r0, [pc, #360]	; (1000e75c <ble_device_init+0x264>)
1000e5f4:	4b5a      	ldr	r3, [pc, #360]	; (1000e760 <ble_device_init+0x268>)
1000e5f6:	4798      	blx	r3
1000e5f8:	485a      	ldr	r0, [pc, #360]	; (1000e764 <ble_device_init+0x26c>)
1000e5fa:	4b5b      	ldr	r3, [pc, #364]	; (1000e768 <ble_device_init+0x270>)
1000e5fc:	4798      	blx	r3
	
	/* Init BLE device */
	if(at_ble_init(args) != AT_BLE_SUCCESS)
1000e5fe:	0020      	movs	r0, r4
1000e600:	4b5a      	ldr	r3, [pc, #360]	; (1000e76c <ble_device_init+0x274>)
1000e602:	4798      	blx	r3
1000e604:	2800      	cmp	r0, #0
1000e606:	d00b      	beq.n	1000e620 <ble_device_init+0x128>
	{
		DBG_LOG("[ble_init]\t\tSAMB11 Initialization failed");
1000e608:	4e54      	ldr	r6, [pc, #336]	; (1000e75c <ble_device_init+0x264>)
1000e60a:	0030      	movs	r0, r6
1000e60c:	4d54      	ldr	r5, [pc, #336]	; (1000e760 <ble_device_init+0x268>)
1000e60e:	47a8      	blx	r5
1000e610:	4857      	ldr	r0, [pc, #348]	; (1000e770 <ble_device_init+0x278>)
1000e612:	4c55      	ldr	r4, [pc, #340]	; (1000e768 <ble_device_init+0x270>)
1000e614:	47a0      	blx	r4
		DBG_LOG("[ble_init]\t\tPlease check the power and connection / hardware connector");	
1000e616:	0030      	movs	r0, r6
1000e618:	47a8      	blx	r5
1000e61a:	4856      	ldr	r0, [pc, #344]	; (1000e774 <ble_device_init+0x27c>)
1000e61c:	47a0      	blx	r4
1000e61e:	e7fe      	b.n	1000e61e <ble_device_init+0x126>
#endif
	
	ble_init(&pf_cfg);

	/* Register it in first index of callback handler */
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK, 
1000e620:	4a55      	ldr	r2, [pc, #340]	; (1000e778 <ble_device_init+0x280>)
1000e622:	2100      	movs	r1, #0
1000e624:	2000      	movs	r0, #0
1000e626:	4c55      	ldr	r4, [pc, #340]	; (1000e77c <ble_device_init+0x284>)
1000e628:	47a0      	blx	r4
									BLE_GAP_EVENT_TYPE, 
									ble_mgr_gap_handle);
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK,
1000e62a:	4a55      	ldr	r2, [pc, #340]	; (1000e780 <ble_device_init+0x288>)
1000e62c:	2102      	movs	r1, #2
1000e62e:	2000      	movs	r0, #0
1000e630:	47a0      	blx	r4
{
	if ((name == NULL) || (name_len < 1))
	{
		return AT_BLE_INVALID_PARAM;
	}
	return at_ble_device_name_set(name, name_len);
1000e632:	2109      	movs	r1, #9
1000e634:	4853      	ldr	r0, [pc, #332]	; (1000e784 <ble_device_init+0x28c>)
1000e636:	4b54      	ldr	r3, [pc, #336]	; (1000e788 <ble_device_init+0x290>)
1000e638:	4798      	blx	r3
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK,
									BLE_GATT_SERVER_EVENT_TYPE,
									ble_mgr_gatt_server_handle);
									
	dev_name = (char *)BLE_DEVICE_NAME;
	if (ble_set_device_name((uint8_t *)dev_name, strlen(dev_name)) != AT_BLE_SUCCESS)
1000e63a:	2800      	cmp	r0, #0
1000e63c:	d005      	beq.n	1000e64a <ble_device_init+0x152>
	{
		DBG_LOG("Device name set failed");
1000e63e:	4847      	ldr	r0, [pc, #284]	; (1000e75c <ble_device_init+0x264>)
1000e640:	4b47      	ldr	r3, [pc, #284]	; (1000e760 <ble_device_init+0x268>)
1000e642:	4798      	blx	r3
1000e644:	4851      	ldr	r0, [pc, #324]	; (1000e78c <ble_device_init+0x294>)
1000e646:	4b48      	ldr	r3, [pc, #288]	; (1000e768 <ble_device_init+0x270>)
1000e648:	4798      	blx	r3

/* Set BLE Address and device configuration, If address is NULL then it will use BD public address */
static void ble_set_dev_config(at_ble_addr_t *addr)
{
	at_ble_dev_config_t stDevConfig;
	at_ble_addr_t address = {AT_BLE_ADDRESS_PUBLIC, {0xAB, 0xCD, 0xEF, 0xAB, 0xCD, 0xEF}};
1000e64a:	2207      	movs	r2, #7
1000e64c:	4950      	ldr	r1, [pc, #320]	; (1000e790 <ble_device_init+0x298>)
1000e64e:	3108      	adds	r1, #8
1000e650:	a804      	add	r0, sp, #16
1000e652:	4b50      	ldr	r3, [pc, #320]	; (1000e794 <ble_device_init+0x29c>)
1000e654:	4798      	blx	r3
	memset(&stDevConfig, 0, sizeof(at_ble_dev_config_t));
1000e656:	2226      	movs	r2, #38	; 0x26
1000e658:	2100      	movs	r1, #0
1000e65a:	a806      	add	r0, sp, #24
1000e65c:	4b2b      	ldr	r3, [pc, #172]	; (1000e70c <ble_device_init+0x214>)
1000e65e:	4798      	blx	r3
	
	if (addr == NULL)
1000e660:	2d00      	cmp	r5, #0
1000e662:	d10c      	bne.n	1000e67e <ble_device_init+0x186>
	{		
		/* get BD address from BLE device */
		if(at_ble_addr_get(&address) != AT_BLE_SUCCESS)
1000e664:	a804      	add	r0, sp, #16
1000e666:	4b4c      	ldr	r3, [pc, #304]	; (1000e798 <ble_device_init+0x2a0>)
1000e668:	4798      	blx	r3
		{
			DBG_LOG("[ble_set_dev_config]\t\tBD address get failed");
		}
		
		/* Copy the BD address into address pointer */
		addr = &address;
1000e66a:	ad04      	add	r5, sp, #16
	memset(&stDevConfig, 0, sizeof(at_ble_dev_config_t));
	
	if (addr == NULL)
	{		
		/* get BD address from BLE device */
		if(at_ble_addr_get(&address) != AT_BLE_SUCCESS)
1000e66c:	2800      	cmp	r0, #0
1000e66e:	d006      	beq.n	1000e67e <ble_device_init+0x186>
		{
			DBG_LOG("[ble_set_dev_config]\t\tBD address get failed");
1000e670:	483a      	ldr	r0, [pc, #232]	; (1000e75c <ble_device_init+0x264>)
1000e672:	4b3b      	ldr	r3, [pc, #236]	; (1000e760 <ble_device_init+0x268>)
1000e674:	4798      	blx	r3
1000e676:	4849      	ldr	r0, [pc, #292]	; (1000e79c <ble_device_init+0x2a4>)
1000e678:	4b3b      	ldr	r3, [pc, #236]	; (1000e768 <ble_device_init+0x270>)
1000e67a:	4798      	blx	r3
		}
		
		/* Copy the BD address into address pointer */
		addr = &address;
1000e67c:	ad04      	add	r5, sp, #16
	}
	
	DBG_LOG("[ble_set_dev_config]\t\tBD Address:0x%02X%02X%02X%02X%02X%02X, Address Type:%d",
1000e67e:	4837      	ldr	r0, [pc, #220]	; (1000e75c <ble_device_init+0x264>)
1000e680:	4b37      	ldr	r3, [pc, #220]	; (1000e760 <ble_device_init+0x268>)
1000e682:	4798      	blx	r3
1000e684:	792b      	ldrb	r3, [r5, #4]
1000e686:	796a      	ldrb	r2, [r5, #5]
1000e688:	79a9      	ldrb	r1, [r5, #6]
1000e68a:	7828      	ldrb	r0, [r5, #0]
1000e68c:	9003      	str	r0, [sp, #12]
1000e68e:	7868      	ldrb	r0, [r5, #1]
1000e690:	9002      	str	r0, [sp, #8]
1000e692:	78a8      	ldrb	r0, [r5, #2]
1000e694:	9001      	str	r0, [sp, #4]
1000e696:	78e8      	ldrb	r0, [r5, #3]
1000e698:	9000      	str	r0, [sp, #0]
1000e69a:	4841      	ldr	r0, [pc, #260]	; (1000e7a0 <ble_device_init+0x2a8>)
1000e69c:	4c32      	ldr	r4, [pc, #200]	; (1000e768 <ble_device_init+0x270>)
1000e69e:	47a0      	blx	r4
	addr->addr[1],
	addr->addr[0], addr->type);
	
	/* Set device configuration */
	/* Device role */
	stDevConfig.role = (at_ble_dev_role_t)BLE_DEVICE_ROLE;
1000e6a0:	ac06      	add	r4, sp, #24
1000e6a2:	230a      	movs	r3, #10
1000e6a4:	7023      	strb	r3, [r4, #0]
	/* device renew duration */
	stDevConfig.renew_dur = AT_RENEW_DUR_VAL_MIN;
1000e6a6:	4b3f      	ldr	r3, [pc, #252]	; (1000e7a4 <ble_device_init+0x2ac>)
1000e6a8:	8063      	strh	r3, [r4, #2]
	/* device address type */
	memcpy((uint8_t *)&stDevConfig.address, (uint8_t *)addr, sizeof(at_ble_addr_t));
1000e6aa:	2207      	movs	r2, #7
1000e6ac:	0029      	movs	r1, r5
1000e6ae:	a807      	add	r0, sp, #28
1000e6b0:	4b38      	ldr	r3, [pc, #224]	; (1000e794 <ble_device_init+0x29c>)
1000e6b2:	4798      	blx	r3
	/* Attributes */
	stDevConfig.att_cfg.b2NamePerm = AT_BLE_WRITE_DISABLE;
1000e6b4:	2300      	movs	r3, #0
1000e6b6:	76e3      	strb	r3, [r4, #27]
	stDevConfig.att_cfg.b2AppearancePerm = AT_BLE_WRITE_DISABLE;
1000e6b8:	7723      	strb	r3, [r4, #28]
	stDevConfig.att_cfg.b1EnableSpcs = 0;
1000e6ba:	7763      	strb	r3, [r4, #29]
	stDevConfig.att_cfg.b1EnableServiceChanged = 0;
1000e6bc:	77a3      	strb	r3, [r4, #30]
	stDevConfig.att_cfg.b2Rfu = AT_BLE_WRITE_DISABLE;
1000e6be:	77e3      	strb	r3, [r4, #31]
	/* Handles */
	stDevConfig.gap_start_hdl = AT_BLE_AUTO_ALLOC_HANDLE;
1000e6c0:	8423      	strh	r3, [r4, #32]
	stDevConfig.gatt_start_hdl = AT_BLE_AUTO_ALLOC_HANDLE;
1000e6c2:	8463      	strh	r3, [r4, #34]	; 0x22
	/* MTU */
	stDevConfig.max_mtu = AT_MTU_VAL_RECOMMENDED;
1000e6c4:	2380      	movs	r3, #128	; 0x80
1000e6c6:	009b      	lsls	r3, r3, #2
1000e6c8:	84a3      	strh	r3, [r4, #36]	; 0x24
	
	if(at_ble_set_dev_config(&stDevConfig) != AT_BLE_SUCCESS)
1000e6ca:	0020      	movs	r0, r4
1000e6cc:	4b36      	ldr	r3, [pc, #216]	; (1000e7a8 <ble_device_init+0x2b0>)
1000e6ce:	4798      	blx	r3
1000e6d0:	2800      	cmp	r0, #0
1000e6d2:	d005      	beq.n	1000e6e0 <ble_device_init+0x1e8>
	{
		DBG_LOG("[ble_set_dev_config]\tSet BLE Device configuration failed");
1000e6d4:	4821      	ldr	r0, [pc, #132]	; (1000e75c <ble_device_init+0x264>)
1000e6d6:	4b22      	ldr	r3, [pc, #136]	; (1000e760 <ble_device_init+0x268>)
1000e6d8:	4798      	blx	r3
1000e6da:	4834      	ldr	r0, [pc, #208]	; (1000e7ac <ble_device_init+0x2b4>)
1000e6dc:	4b22      	ldr	r3, [pc, #136]	; (1000e768 <ble_device_init+0x270>)
1000e6de:	4798      	blx	r3
	}
	
	if (at_ble_addr_set(addr) != AT_BLE_SUCCESS)
1000e6e0:	0028      	movs	r0, r5
1000e6e2:	4b33      	ldr	r3, [pc, #204]	; (1000e7b0 <ble_device_init+0x2b8>)
1000e6e4:	4798      	blx	r3
1000e6e6:	2800      	cmp	r0, #0
1000e6e8:	d005      	beq.n	1000e6f6 <ble_device_init+0x1fe>
	{
		DBG_LOG("[ble_set_dev_config]\tSet BLE Device Address failed");
1000e6ea:	481c      	ldr	r0, [pc, #112]	; (1000e75c <ble_device_init+0x264>)
1000e6ec:	4b1c      	ldr	r3, [pc, #112]	; (1000e760 <ble_device_init+0x268>)
1000e6ee:	4798      	blx	r3
1000e6f0:	4830      	ldr	r0, [pc, #192]	; (1000e7b4 <ble_device_init+0x2bc>)
1000e6f2:	4b1d      	ldr	r3, [pc, #116]	; (1000e768 <ble_device_init+0x270>)
1000e6f4:	4798      	blx	r3
	{
		DBG_LOG("Device name set failed");
	}
	
	ble_set_dev_config(addr);	
}
1000e6f6:	b011      	add	sp, #68	; 0x44
1000e6f8:	bc3c      	pop	{r2, r3, r4, r5}
1000e6fa:	4690      	mov	r8, r2
1000e6fc:	4699      	mov	r9, r3
1000e6fe:	46a2      	mov	sl, r4
1000e700:	46ab      	mov	fp, r5
1000e702:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000e704:	10018fc8 	.word	0x10018fc8
1000e708:	10018fd0 	.word	0x10018fd0
1000e70c:	10015239 	.word	0x10015239
1000e710:	1001a70c 	.word	0x1001a70c
1000e714:	000004e2 	.word	0x000004e2
1000e718:	10018ae8 	.word	0x10018ae8
1000e71c:	10018fcc 	.word	0x10018fcc
1000e720:	1001a744 	.word	0x1001a744
1000e724:	1001a73c 	.word	0x1001a73c
1000e728:	1001aa78 	.word	0x1001aa78
1000e72c:	100186e8 	.word	0x100186e8
1000e730:	10018fd8 	.word	0x10018fd8
1000e734:	1001a720 	.word	0x1001a720
1000e738:	1001a6e4 	.word	0x1001a6e4
1000e73c:	1001a6f8 	.word	0x1001a6f8
1000e740:	1001a44c 	.word	0x1001a44c
1000e744:	1001a740 	.word	0x1001a740
1000e748:	1001a448 	.word	0x1001a448
1000e74c:	1001a6d0 	.word	0x1001a6d0
1000e750:	1001ac84 	.word	0x1001ac84
1000e754:	1001a460 	.word	0x1001a460
1000e758:	1001a6cc 	.word	0x1001a6cc
1000e75c:	10016660 	.word	0x10016660
1000e760:	100154a1 	.word	0x100154a1
1000e764:	10017e4c 	.word	0x10017e4c
1000e768:	10015381 	.word	0x10015381
1000e76c:	10010675 	.word	0x10010675
1000e770:	10017e70 	.word	0x10017e70
1000e774:	10017e9c 	.word	0x10017e9c
1000e778:	1001824c 	.word	0x1001824c
1000e77c:	1000e429 	.word	0x1000e429
1000e780:	10017800 	.word	0x10017800
1000e784:	10017ee4 	.word	0x10017ee4
1000e788:	1001058d 	.word	0x1001058d
1000e78c:	10017ef0 	.word	0x10017ef0
1000e790:	100177f0 	.word	0x100177f0
1000e794:	10015227 	.word	0x10015227
1000e798:	100105c1 	.word	0x100105c1
1000e79c:	10017f08 	.word	0x10017f08
1000e7a0:	10017f34 	.word	0x10017f34
1000e7a4:	00003a98 	.word	0x00003a98
1000e7a8:	100105e5 	.word	0x100105e5
1000e7ac:	10017f84 	.word	0x10017f84
1000e7b0:	10010829 	.word	0x10010829
1000e7b4:	10017fc0 	.word	0x10017fc0

1000e7b8 <ble_send_slave_sec_request>:
	return AT_BLE_FAILURE;
}

/** @brief function to send slave security request */
at_ble_status_t ble_send_slave_sec_request(at_ble_handle_t conn_handle)
{
1000e7b8:	b510      	push	{r4, lr}
	#if BLE_PAIR_ENABLE
		if (at_ble_send_slave_sec_request(conn_handle, BLE_MITM_REQ, BLE_BOND_REQ) == AT_BLE_SUCCESS)
1000e7ba:	2200      	movs	r2, #0
1000e7bc:	2100      	movs	r1, #0
1000e7be:	4b0a      	ldr	r3, [pc, #40]	; (1000e7e8 <ble_send_slave_sec_request+0x30>)
1000e7c0:	4798      	blx	r3
1000e7c2:	1e04      	subs	r4, r0, #0
1000e7c4:	d106      	bne.n	1000e7d4 <ble_send_slave_sec_request+0x1c>
		{
			DBG_LOG_DEV("Slave security request successful");
1000e7c6:	4809      	ldr	r0, [pc, #36]	; (1000e7ec <ble_send_slave_sec_request+0x34>)
1000e7c8:	4b09      	ldr	r3, [pc, #36]	; (1000e7f0 <ble_send_slave_sec_request+0x38>)
1000e7ca:	4798      	blx	r3
1000e7cc:	4809      	ldr	r0, [pc, #36]	; (1000e7f4 <ble_send_slave_sec_request+0x3c>)
1000e7ce:	4b0a      	ldr	r3, [pc, #40]	; (1000e7f8 <ble_send_slave_sec_request+0x40>)
1000e7d0:	4798      	blx	r3
			return AT_BLE_SUCCESS;
1000e7d2:	e006      	b.n	1000e7e2 <ble_send_slave_sec_request+0x2a>
		}
		else
		{
			DBG_LOG("Slave security request failed");
1000e7d4:	4805      	ldr	r0, [pc, #20]	; (1000e7ec <ble_send_slave_sec_request+0x34>)
1000e7d6:	4b06      	ldr	r3, [pc, #24]	; (1000e7f0 <ble_send_slave_sec_request+0x38>)
1000e7d8:	4798      	blx	r3
1000e7da:	4808      	ldr	r0, [pc, #32]	; (1000e7fc <ble_send_slave_sec_request+0x44>)
1000e7dc:	4b06      	ldr	r3, [pc, #24]	; (1000e7f8 <ble_send_slave_sec_request+0x40>)
1000e7de:	4798      	blx	r3
		}
	#endif
	return AT_BLE_FAILURE;
1000e7e0:	24e2      	movs	r4, #226	; 0xe2
}
1000e7e2:	0020      	movs	r0, r4
1000e7e4:	bd10      	pop	{r4, pc}
1000e7e6:	46c0      	nop			; (mov r8, r8)
1000e7e8:	1001160d 	.word	0x1001160d
1000e7ec:	10016660 	.word	0x10016660
1000e7f0:	100154a1 	.word	0x100154a1
1000e7f4:	10018010 	.word	0x10018010
1000e7f8:	10015381 	.word	0x10015381
1000e7fc:	10018034 	.word	0x10018034

1000e800 <ble_connected_state_handler>:
	return status;
}

/** @brief function to handle connected event received from stack */
at_ble_status_t ble_connected_state_handler(void *params)
{
1000e800:	b5f0      	push	{r4, r5, r6, r7, lr}
1000e802:	465f      	mov	r7, fp
1000e804:	464e      	mov	r6, r9
1000e806:	4645      	mov	r5, r8
1000e808:	b4e0      	push	{r5, r6, r7}
1000e80a:	b09a      	sub	sp, #104	; 0x68
1000e80c:	0005      	movs	r5, r0
	at_ble_connected_t *conn_params;
	uint8_t idx = 0;
	conn_params = (at_ble_connected_t *)params;
	bool peripheral_device_added = false;
	
	if (conn_params->conn_status == AT_BLE_SUCCESS)
1000e80e:	7a86      	ldrb	r6, [r0, #10]
1000e810:	2e00      	cmp	r6, #0
1000e812:	d000      	beq.n	1000e816 <ble_connected_state_handler+0x16>
1000e814:	e0cc      	b.n	1000e9b0 <ble_connected_state_handler+0x1b0>
	{
		DBG_LOG("Connected to peer device with address 0x%02x%02x%02x%02x%02x%02x",
1000e816:	4878      	ldr	r0, [pc, #480]	; (1000e9f8 <ble_connected_state_handler+0x1f8>)
1000e818:	4f78      	ldr	r7, [pc, #480]	; (1000e9fc <ble_connected_state_handler+0x1fc>)
1000e81a:	47b8      	blx	r7
1000e81c:	792b      	ldrb	r3, [r5, #4]
1000e81e:	796a      	ldrb	r2, [r5, #5]
1000e820:	79a9      	ldrb	r1, [r5, #6]
1000e822:	7868      	ldrb	r0, [r5, #1]
1000e824:	9002      	str	r0, [sp, #8]
1000e826:	78a8      	ldrb	r0, [r5, #2]
1000e828:	9001      	str	r0, [sp, #4]
1000e82a:	78e8      	ldrb	r0, [r5, #3]
1000e82c:	9000      	str	r0, [sp, #0]
1000e82e:	4874      	ldr	r0, [pc, #464]	; (1000ea00 <ble_connected_state_handler+0x200>)
1000e830:	4c74      	ldr	r4, [pc, #464]	; (1000ea04 <ble_connected_state_handler+0x204>)
1000e832:	47a0      	blx	r4
		conn_params->peer_addr.addr[3],
		conn_params->peer_addr.addr[2],
		conn_params->peer_addr.addr[1],
		conn_params->peer_addr.addr[0]);
		
		DBG_LOG("Connection Handle %d", conn_params->handle);
1000e834:	4870      	ldr	r0, [pc, #448]	; (1000e9f8 <ble_connected_state_handler+0x1f8>)
1000e836:	47b8      	blx	r7
1000e838:	8929      	ldrh	r1, [r5, #8]
1000e83a:	4873      	ldr	r0, [pc, #460]	; (1000ea08 <ble_connected_state_handler+0x208>)
1000e83c:	47a0      	blx	r4
		
		memcpy((uint8_t *)&connected_state_info, (uint8_t *)conn_params, sizeof(at_ble_connected_t));	
1000e83e:	2212      	movs	r2, #18
1000e840:	0029      	movs	r1, r5
1000e842:	4872      	ldr	r0, [pc, #456]	; (1000ea0c <ble_connected_state_handler+0x20c>)
1000e844:	4b72      	ldr	r3, [pc, #456]	; (1000ea10 <ble_connected_state_handler+0x210>)
1000e846:	4798      	blx	r3
		if(memcmp((uint8_t *)&ble_peripheral_dev_address, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000e848:	9504      	str	r5, [sp, #16]
1000e84a:	2207      	movs	r2, #7
1000e84c:	0029      	movs	r1, r5
1000e84e:	4871      	ldr	r0, [pc, #452]	; (1000ea14 <ble_connected_state_handler+0x214>)
1000e850:	4b71      	ldr	r3, [pc, #452]	; (1000ea18 <ble_connected_state_handler+0x218>)
1000e852:	4798      	blx	r3
1000e854:	2800      	cmp	r0, #0
1000e856:	d100      	bne.n	1000e85a <ble_connected_state_handler+0x5a>
1000e858:	e0b3      	b.n	1000e9c2 <ble_connected_state_handler+0x1c2>
		{
			/* Peripheral Device */
			if (conn_params->peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE) 
1000e85a:	782b      	ldrb	r3, [r5, #0]
1000e85c:	2b02      	cmp	r3, #2
1000e85e:	d000      	beq.n	1000e862 <ble_connected_state_handler+0x62>
1000e860:	e0af      	b.n	1000e9c2 <ble_connected_state_handler+0x1c2>
			{
				uint8_t idx1, idx2;
				uint16_t key_len = 0;
				uint8_t nb_keys = BLE_MAX_DEVICE_CONNECTED;
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
1000e862:	2250      	movs	r2, #80	; 0x50
1000e864:	2100      	movs	r1, #0
1000e866:	a806      	add	r0, sp, #24
1000e868:	4b6c      	ldr	r3, [pc, #432]	; (1000ea1c <ble_connected_state_handler+0x21c>)
1000e86a:	4798      	blx	r3
1000e86c:	4f6c      	ldr	r7, [pc, #432]	; (1000ea20 <ble_connected_state_handler+0x220>)
		{
			/* Peripheral Device */
			if (conn_params->peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE) 
			{
				uint8_t idx1, idx2;
				uint16_t key_len = 0;
1000e86e:	2300      	movs	r3, #0
1000e870:	e00b      	b.n	1000e88a <ble_connected_state_handler+0x8a>
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
				for (idx1 = 0; idx1 < BLE_MAX_DEVICE_CONNECTED; idx1++)
				{
					for (idx2 = 0; idx2 < AT_BLE_MAX_KEY_LEN; idx2++)
					{
						irk_key[key_len++] = ble_dev_info[idx1].bond_info.peer_irk.key[idx2];
1000e872:	1c59      	adds	r1, r3, #1
1000e874:	7814      	ldrb	r4, [r2, #0]
1000e876:	a806      	add	r0, sp, #24
1000e878:	54c4      	strb	r4, [r0, r3]
1000e87a:	3201      	adds	r2, #1
1000e87c:	b28b      	uxth	r3, r1
				uint16_t key_len = 0;
				uint8_t nb_keys = BLE_MAX_DEVICE_CONNECTED;
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
				for (idx1 = 0; idx1 < BLE_MAX_DEVICE_CONNECTED; idx1++)
				{
					for (idx2 = 0; idx2 < AT_BLE_MAX_KEY_LEN; idx2++)
1000e87e:	42b3      	cmp	r3, r6
1000e880:	d1f7      	bne.n	1000e872 <ble_connected_state_handler+0x72>
1000e882:	377c      	adds	r7, #124	; 0x7c
					{
						irk_key[key_len++] = ble_dev_info[idx1].bond_info.peer_irk.key[idx2];
1000e884:	1e33      	subs	r3, r6, #0
			{
				uint8_t idx1, idx2;
				uint16_t key_len = 0;
				uint8_t nb_keys = BLE_MAX_DEVICE_CONNECTED;
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
				for (idx1 = 0; idx1 < BLE_MAX_DEVICE_CONNECTED; idx1++)
1000e886:	2b50      	cmp	r3, #80	; 0x50
1000e888:	d004      	beq.n	1000e894 <ble_connected_state_handler+0x94>
1000e88a:	001e      	movs	r6, r3
1000e88c:	3610      	adds	r6, #16
1000e88e:	b2b6      	uxth	r6, r6
	return status;
}

/** @brief function to handle connected event received from stack */
at_ble_status_t ble_connected_state_handler(void *params)
{
1000e890:	003a      	movs	r2, r7
1000e892:	e7ee      	b.n	1000e872 <ble_connected_state_handler+0x72>
					}
					
				}
				if (nb_keys)
				{
					if(at_ble_random_address_resolve(BLE_MAX_DEVICE_CONNECTED, &conn_params->peer_addr, irk_key) == AT_BLE_SUCCESS)
1000e894:	aa06      	add	r2, sp, #24
1000e896:	0029      	movs	r1, r5
1000e898:	2005      	movs	r0, #5
1000e89a:	4b62      	ldr	r3, [pc, #392]	; (1000ea24 <ble_connected_state_handler+0x224>)
1000e89c:	4798      	blx	r3
1000e89e:	1e06      	subs	r6, r0, #0
1000e8a0:	d106      	bne.n	1000e8b0 <ble_connected_state_handler+0xb0>
					{
						DBG_LOG_DEV("Resolving Random address success**");
1000e8a2:	4855      	ldr	r0, [pc, #340]	; (1000e9f8 <ble_connected_state_handler+0x1f8>)
1000e8a4:	4b55      	ldr	r3, [pc, #340]	; (1000e9fc <ble_connected_state_handler+0x1fc>)
1000e8a6:	4798      	blx	r3
1000e8a8:	485f      	ldr	r0, [pc, #380]	; (1000ea28 <ble_connected_state_handler+0x228>)
1000e8aa:	4b56      	ldr	r3, [pc, #344]	; (1000ea04 <ble_connected_state_handler+0x204>)
1000e8ac:	4798      	blx	r3
						return AT_BLE_SUCCESS;
1000e8ae:	e09c      	b.n	1000e9ea <ble_connected_state_handler+0x1ea>
					}
					else
					{
						DBG_LOG("Resolving Random address failed**");
1000e8b0:	4851      	ldr	r0, [pc, #324]	; (1000e9f8 <ble_connected_state_handler+0x1f8>)
1000e8b2:	4b52      	ldr	r3, [pc, #328]	; (1000e9fc <ble_connected_state_handler+0x1fc>)
1000e8b4:	4798      	blx	r3
1000e8b6:	485d      	ldr	r0, [pc, #372]	; (1000ea2c <ble_connected_state_handler+0x22c>)
1000e8b8:	4b52      	ldr	r3, [pc, #328]	; (1000ea04 <ble_connected_state_handler+0x204>)
1000e8ba:	4798      	blx	r3
						return AT_BLE_FAILURE;
1000e8bc:	26e2      	movs	r6, #226	; 0xe2
1000e8be:	e094      	b.n	1000e9ea <ble_connected_state_handler+0x1ea>
1000e8c0:	b2e7      	uxtb	r7, r4
		if (ble_device_count < BLE_MAX_DEVICE_CONNECTED)
		{
			bool conn_exists = false;
			for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
			{
				if(!memcmp((uint8_t *)&ble_dev_info[idx].conn_info.peer_addr, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000e8c2:	9405      	str	r4, [sp, #20]
1000e8c4:	2207      	movs	r2, #7
1000e8c6:	9904      	ldr	r1, [sp, #16]
1000e8c8:	4648      	mov	r0, r9
1000e8ca:	47d8      	blx	fp
1000e8cc:	2800      	cmp	r0, #0
1000e8ce:	d109      	bne.n	1000e8e4 <ble_connected_state_handler+0xe4>
				{
					ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000e8d0:	9a05      	ldr	r2, [sp, #20]
1000e8d2:	0153      	lsls	r3, r2, #5
1000e8d4:	1a9b      	subs	r3, r3, r2
1000e8d6:	009a      	lsls	r2, r3, #2
1000e8d8:	4b55      	ldr	r3, [pc, #340]	; (1000ea30 <ble_connected_state_handler+0x230>)
1000e8da:	189b      	adds	r3, r3, r2
1000e8dc:	335e      	adds	r3, #94	; 0x5e
1000e8de:	2202      	movs	r2, #2
1000e8e0:	701a      	strb	r2, [r3, #0]
1000e8e2:	e02b      	b.n	1000e93c <ble_connected_state_handler+0x13c>
1000e8e4:	3401      	adds	r4, #1
1000e8e6:	237c      	movs	r3, #124	; 0x7c
1000e8e8:	469c      	mov	ip, r3
1000e8ea:	44e1      	add	r9, ip
		}
			
		if (ble_device_count < BLE_MAX_DEVICE_CONNECTED)
		{
			bool conn_exists = false;
			for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000e8ec:	2c05      	cmp	r4, #5
1000e8ee:	d1e7      	bne.n	1000e8c0 <ble_connected_state_handler+0xc0>
1000e8f0:	e072      	b.n	1000e9d8 <ble_connected_state_handler+0x1d8>
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
				{
					if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000e8f2:	001c      	movs	r4, r3
1000e8f4:	7811      	ldrb	r1, [r2, #0]
1000e8f6:	2900      	cmp	r1, #0
1000e8f8:	d11a      	bne.n	1000e930 <ble_connected_state_handler+0x130>
1000e8fa:	e001      	b.n	1000e900 <ble_connected_state_handler+0x100>
1000e8fc:	2400      	movs	r4, #0
1000e8fe:	2700      	movs	r7, #0
					{
						/* @Todo Need to Handle Random Address */
						memcpy(&ble_dev_info[idx].conn_info, (uint8_t *)conn_params, sizeof(at_ble_connected_t));
1000e900:	0163      	lsls	r3, r4, #5
1000e902:	4699      	mov	r9, r3
1000e904:	1b18      	subs	r0, r3, r4
1000e906:	0080      	lsls	r0, r0, #2
1000e908:	4b49      	ldr	r3, [pc, #292]	; (1000ea30 <ble_connected_state_handler+0x230>)
1000e90a:	4698      	mov	r8, r3
1000e90c:	4440      	add	r0, r8
1000e90e:	2212      	movs	r2, #18
1000e910:	0029      	movs	r1, r5
1000e912:	4b3f      	ldr	r3, [pc, #252]	; (1000ea10 <ble_connected_state_handler+0x210>)
1000e914:	4798      	blx	r3
						ble_device_count++;
1000e916:	4a47      	ldr	r2, [pc, #284]	; (1000ea34 <ble_connected_state_handler+0x234>)
1000e918:	7813      	ldrb	r3, [r2, #0]
1000e91a:	3301      	adds	r3, #1
1000e91c:	b2db      	uxtb	r3, r3
1000e91e:	7013      	strb	r3, [r2, #0]
						ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000e920:	464b      	mov	r3, r9
1000e922:	1b1b      	subs	r3, r3, r4
1000e924:	009b      	lsls	r3, r3, #2
1000e926:	4443      	add	r3, r8
1000e928:	335e      	adds	r3, #94	; 0x5e
1000e92a:	2202      	movs	r2, #2
1000e92c:	701a      	strb	r2, [r3, #0]
						break;
1000e92e:	e005      	b.n	1000e93c <ble_connected_state_handler+0x13c>
				}
			}
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000e930:	1c79      	adds	r1, r7, #1
1000e932:	b2cf      	uxtb	r7, r1
1000e934:	3301      	adds	r3, #1
1000e936:	327c      	adds	r2, #124	; 0x7c
1000e938:	2f05      	cmp	r7, #5
1000e93a:	d1da      	bne.n	1000e8f2 <ble_connected_state_handler+0xf2>
						break;
					}
				}
			}
			
			if(!memcmp((uint8_t *)&ble_peripheral_dev_address, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000e93c:	2207      	movs	r2, #7
1000e93e:	0029      	movs	r1, r5
1000e940:	4834      	ldr	r0, [pc, #208]	; (1000ea14 <ble_connected_state_handler+0x214>)
1000e942:	4b35      	ldr	r3, [pc, #212]	; (1000ea18 <ble_connected_state_handler+0x218>)
1000e944:	4798      	blx	r3
1000e946:	2800      	cmp	r0, #0
1000e948:	d10c      	bne.n	1000e964 <ble_connected_state_handler+0x164>
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_CENTRAL;
1000e94a:	017b      	lsls	r3, r7, #5
1000e94c:	1bdb      	subs	r3, r3, r7
1000e94e:	009b      	lsls	r3, r3, #2
1000e950:	4a37      	ldr	r2, [pc, #220]	; (1000ea30 <ble_connected_state_handler+0x230>)
1000e952:	18d3      	adds	r3, r2, r3
1000e954:	2205      	movs	r2, #5
1000e956:	749a      	strb	r2, [r3, #18]
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
				peripheral_device_added = true;
			}
			/* Reset the ble_peripheral_dev_address to identify the initiator */
			memset((uint8_t *)&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
1000e958:	3202      	adds	r2, #2
1000e95a:	2100      	movs	r1, #0
1000e95c:	482d      	ldr	r0, [pc, #180]	; (1000ea14 <ble_connected_state_handler+0x214>)
1000e95e:	4b2f      	ldr	r3, [pc, #188]	; (1000ea1c <ble_connected_state_handler+0x21c>)
1000e960:	4798      	blx	r3
1000e962:	e042      	b.n	1000e9ea <ble_connected_state_handler+0x1ea>
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_CENTRAL;
			}
			else
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
1000e964:	4b32      	ldr	r3, [pc, #200]	; (1000ea30 <ble_connected_state_handler+0x230>)
1000e966:	4698      	mov	r8, r3
1000e968:	017c      	lsls	r4, r7, #5
1000e96a:	1be3      	subs	r3, r4, r7
1000e96c:	009b      	lsls	r3, r3, #2
1000e96e:	4443      	add	r3, r8
1000e970:	220a      	movs	r2, #10
1000e972:	749a      	strb	r2, [r3, #18]
				peripheral_device_added = true;
			}
			/* Reset the ble_peripheral_dev_address to identify the initiator */
			memset((uint8_t *)&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
1000e974:	3a03      	subs	r2, #3
1000e976:	2100      	movs	r1, #0
1000e978:	4826      	ldr	r0, [pc, #152]	; (1000ea14 <ble_connected_state_handler+0x214>)
1000e97a:	4b28      	ldr	r3, [pc, #160]	; (1000ea1c <ble_connected_state_handler+0x21c>)
1000e97c:	4798      	blx	r3
			at_ble_disconnect(conn_params->handle, AT_BLE_TERMINATED_BY_USER);
		}		
		
#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
		
        if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
1000e97e:	1be4      	subs	r4, r4, r7
1000e980:	00a4      	lsls	r4, r4, #2
1000e982:	4444      	add	r4, r8
1000e984:	7ca3      	ldrb	r3, [r4, #18]
1000e986:	2b0a      	cmp	r3, #10
1000e988:	d12f      	bne.n	1000e9ea <ble_connected_state_handler+0x1ea>
1000e98a:	e00d      	b.n	1000e9a8 <ble_connected_state_handler+0x1a8>
			memset((uint8_t *)&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
					
		}
		else
		{
			DBG_LOG("Max number of connection reached: %d ===>Disconnecting...", ble_device_count);
1000e98c:	481a      	ldr	r0, [pc, #104]	; (1000e9f8 <ble_connected_state_handler+0x1f8>)
1000e98e:	4b1b      	ldr	r3, [pc, #108]	; (1000e9fc <ble_connected_state_handler+0x1fc>)
1000e990:	4798      	blx	r3
1000e992:	4b28      	ldr	r3, [pc, #160]	; (1000ea34 <ble_connected_state_handler+0x234>)
1000e994:	7819      	ldrb	r1, [r3, #0]
1000e996:	b2c9      	uxtb	r1, r1
1000e998:	4827      	ldr	r0, [pc, #156]	; (1000ea38 <ble_connected_state_handler+0x238>)
1000e99a:	4b1a      	ldr	r3, [pc, #104]	; (1000ea04 <ble_connected_state_handler+0x204>)
1000e99c:	4798      	blx	r3
			at_ble_disconnect(conn_params->handle, AT_BLE_TERMINATED_BY_USER);
1000e99e:	8928      	ldrh	r0, [r5, #8]
1000e9a0:	2113      	movs	r1, #19
1000e9a2:	4b26      	ldr	r3, [pc, #152]	; (1000ea3c <ble_connected_state_handler+0x23c>)
1000e9a4:	4798      	blx	r3
1000e9a6:	e020      	b.n	1000e9ea <ble_connected_state_handler+0x1ea>
		
#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
		
        if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
        {
	 		ble_send_slave_sec_request(conn_params->handle);
1000e9a8:	8928      	ldrh	r0, [r5, #8]
1000e9aa:	4b25      	ldr	r3, [pc, #148]	; (1000ea40 <ble_connected_state_handler+0x240>)
1000e9ac:	4798      	blx	r3
1000e9ae:	e01c      	b.n	1000e9ea <ble_connected_state_handler+0x1ea>
        }
#endif
	} 
	else
	{
		DBG_LOG("Device Connection Failed - Status: %d", conn_params->conn_status);
1000e9b0:	4811      	ldr	r0, [pc, #68]	; (1000e9f8 <ble_connected_state_handler+0x1f8>)
1000e9b2:	4b12      	ldr	r3, [pc, #72]	; (1000e9fc <ble_connected_state_handler+0x1fc>)
1000e9b4:	4798      	blx	r3
1000e9b6:	7aa9      	ldrb	r1, [r5, #10]
1000e9b8:	4822      	ldr	r0, [pc, #136]	; (1000ea44 <ble_connected_state_handler+0x244>)
1000e9ba:	4b12      	ldr	r3, [pc, #72]	; (1000ea04 <ble_connected_state_handler+0x204>)
1000e9bc:	4798      	blx	r3
	}
	ALL_UNUSED(peripheral_device_added);
	return AT_BLE_SUCCESS;
1000e9be:	2600      	movs	r6, #0
1000e9c0:	e013      	b.n	1000e9ea <ble_connected_state_handler+0x1ea>
					DBG_LOG_DEV("New Connection");
				}				
			}
		}
			
		if (ble_device_count < BLE_MAX_DEVICE_CONNECTED)
1000e9c2:	4b1c      	ldr	r3, [pc, #112]	; (1000ea34 <ble_connected_state_handler+0x234>)
1000e9c4:	781b      	ldrb	r3, [r3, #0]
1000e9c6:	b2db      	uxtb	r3, r3
1000e9c8:	2b04      	cmp	r3, #4
1000e9ca:	d8df      	bhi.n	1000e98c <ble_connected_state_handler+0x18c>
1000e9cc:	4b18      	ldr	r3, [pc, #96]	; (1000ea30 <ble_connected_state_handler+0x230>)
1000e9ce:	4699      	mov	r9, r3
1000e9d0:	2400      	movs	r4, #0
		{
			bool conn_exists = false;
			for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
			{
				if(!memcmp((uint8_t *)&ble_dev_info[idx].conn_info.peer_addr, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000e9d2:	4b11      	ldr	r3, [pc, #68]	; (1000ea18 <ble_connected_state_handler+0x218>)
1000e9d4:	469b      	mov	fp, r3
1000e9d6:	e773      	b.n	1000e8c0 <ble_connected_state_handler+0xc0>
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
				{
					if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000e9d8:	235e      	movs	r3, #94	; 0x5e
1000e9da:	4a15      	ldr	r2, [pc, #84]	; (1000ea30 <ble_connected_state_handler+0x230>)
1000e9dc:	5cd3      	ldrb	r3, [r2, r3]
1000e9de:	2b00      	cmp	r3, #0
1000e9e0:	d08c      	beq.n	1000e8fc <ble_connected_state_handler+0xfc>
1000e9e2:	4a19      	ldr	r2, [pc, #100]	; (1000ea48 <ble_connected_state_handler+0x248>)
1000e9e4:	2301      	movs	r3, #1
				}
			}
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000e9e6:	2701      	movs	r7, #1
1000e9e8:	e783      	b.n	1000e8f2 <ble_connected_state_handler+0xf2>
	{
		DBG_LOG("Device Connection Failed - Status: %d", conn_params->conn_status);
	}
	ALL_UNUSED(peripheral_device_added);
	return AT_BLE_SUCCESS;
}
1000e9ea:	0030      	movs	r0, r6
1000e9ec:	b01a      	add	sp, #104	; 0x68
1000e9ee:	bc1c      	pop	{r2, r3, r4}
1000e9f0:	4690      	mov	r8, r2
1000e9f2:	4699      	mov	r9, r3
1000e9f4:	46a3      	mov	fp, r4
1000e9f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000e9f8:	10016660 	.word	0x10016660
1000e9fc:	100154a1 	.word	0x100154a1
1000ea00:	10018054 	.word	0x10018054
1000ea04:	10015381 	.word	0x10015381
1000ea08:	10018098 	.word	0x10018098
1000ea0c:	1001a70c 	.word	0x1001a70c
1000ea10:	10015227 	.word	0x10015227
1000ea14:	10018fd0 	.word	0x10018fd0
1000ea18:	10015209 	.word	0x10015209
1000ea1c:	10015239 	.word	0x10015239
1000ea20:	1001a4a6 	.word	0x1001a4a6
1000ea24:	10010a95 	.word	0x10010a95
1000ea28:	100180b0 	.word	0x100180b0
1000ea2c:	100180d4 	.word	0x100180d4
1000ea30:	1001a460 	.word	0x1001a460
1000ea34:	1001a6cc 	.word	0x1001a6cc
1000ea38:	100180f8 	.word	0x100180f8
1000ea3c:	10010a69 	.word	0x10010a69
1000ea40:	1000e7b9 	.word	0x1000e7b9
1000ea44:	10018134 	.word	0x10018134
1000ea48:	1001a53a 	.word	0x1001a53a

1000ea4c <ble_resolv_rand_addr_handler>:

at_ble_status_t ble_resolv_rand_addr_handler(void *params)
{
1000ea4c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000ea4e:	4647      	mov	r7, r8
1000ea50:	b480      	push	{r7}
	uint8_t idx;	
	bool device_found = false;
	bool peripheral_device_added = false;
	ble_resolv_rand_addr_status = (at_ble_resolv_rand_addr_status_t *)params;	
	
	if(ble_resolv_rand_addr_status->status == AT_BLE_SUCCESS)
1000ea52:	7803      	ldrb	r3, [r0, #0]
1000ea54:	2b00      	cmp	r3, #0
1000ea56:	d152      	bne.n	1000eafe <ble_resolv_rand_addr_handler+0xb2>
1000ea58:	4d3e      	ldr	r5, [pc, #248]	; (1000eb54 <ble_resolv_rand_addr_handler+0x108>)
1000ea5a:	2400      	movs	r4, #0
	{		
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
		{
			/* Check the Resolved Address */
			if (!memcmp((uint8_t *)ble_resolv_rand_addr_status->irk, (uint8_t *)ble_dev_info[idx].bond_info.peer_irk.key, AT_BLE_MAX_KEY_LEN))
1000ea5c:	1c46      	adds	r6, r0, #1
1000ea5e:	4f3e      	ldr	r7, [pc, #248]	; (1000eb58 <ble_resolv_rand_addr_handler+0x10c>)
1000ea60:	2210      	movs	r2, #16
1000ea62:	0029      	movs	r1, r5
1000ea64:	0030      	movs	r0, r6
1000ea66:	47b8      	blx	r7
1000ea68:	2800      	cmp	r0, #0
1000ea6a:	d031      	beq.n	1000ead0 <ble_resolv_rand_addr_handler+0x84>
	bool peripheral_device_added = false;
	ble_resolv_rand_addr_status = (at_ble_resolv_rand_addr_status_t *)params;	
	
	if(ble_resolv_rand_addr_status->status == AT_BLE_SUCCESS)
	{		
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000ea6c:	3401      	adds	r4, #1
1000ea6e:	b2e4      	uxtb	r4, r4
1000ea70:	357c      	adds	r5, #124	; 0x7c
1000ea72:	2c05      	cmp	r4, #5
1000ea74:	d1f4      	bne.n	1000ea60 <ble_resolv_rand_addr_handler+0x14>
1000ea76:	e042      	b.n	1000eafe <ble_resolv_rand_addr_handler+0xb2>
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
		{
			if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000ea78:	001d      	movs	r5, r3
1000ea7a:	7811      	ldrb	r1, [r2, #0]
1000ea7c:	2900      	cmp	r1, #0
1000ea7e:	d11b      	bne.n	1000eab8 <ble_resolv_rand_addr_handler+0x6c>
1000ea80:	e001      	b.n	1000ea86 <ble_resolv_rand_addr_handler+0x3a>
1000ea82:	2500      	movs	r5, #0
		peripheral_device_added = true;
	}
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000ea84:	2400      	movs	r4, #0
		{
			if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
			{
				memcpy(&ble_dev_info[idx].conn_info, (uint8_t *)&connected_state_info, sizeof(at_ble_connected_t));
1000ea86:	4b35      	ldr	r3, [pc, #212]	; (1000eb5c <ble_resolv_rand_addr_handler+0x110>)
1000ea88:	4698      	mov	r8, r3
1000ea8a:	016e      	lsls	r6, r5, #5
1000ea8c:	1b77      	subs	r7, r6, r5
1000ea8e:	00bf      	lsls	r7, r7, #2
1000ea90:	4447      	add	r7, r8
1000ea92:	2212      	movs	r2, #18
1000ea94:	4932      	ldr	r1, [pc, #200]	; (1000eb60 <ble_resolv_rand_addr_handler+0x114>)
1000ea96:	0038      	movs	r0, r7
1000ea98:	4b32      	ldr	r3, [pc, #200]	; (1000eb64 <ble_resolv_rand_addr_handler+0x118>)
1000ea9a:	4798      	blx	r3
				ble_device_count++;
1000ea9c:	4a32      	ldr	r2, [pc, #200]	; (1000eb68 <ble_resolv_rand_addr_handler+0x11c>)
1000ea9e:	7813      	ldrb	r3, [r2, #0]
1000eaa0:	3301      	adds	r3, #1
1000eaa2:	b2db      	uxtb	r3, r3
1000eaa4:	7013      	strb	r3, [r2, #0]
				ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000eaa6:	375e      	adds	r7, #94	; 0x5e
1000eaa8:	2302      	movs	r3, #2
1000eaaa:	703b      	strb	r3, [r7, #0]
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
1000eaac:	1b75      	subs	r5, r6, r5
1000eaae:	00ad      	lsls	r5, r5, #2
1000eab0:	4445      	add	r5, r8
1000eab2:	3308      	adds	r3, #8
1000eab4:	74ab      	strb	r3, [r5, #18]
				peripheral_device_added = true;
				break;
1000eab6:	e031      	b.n	1000eb1c <ble_resolv_rand_addr_handler+0xd0>
		peripheral_device_added = true;
	}
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000eab8:	3401      	adds	r4, #1
1000eaba:	b2e4      	uxtb	r4, r4
1000eabc:	3301      	adds	r3, #1
1000eabe:	327c      	adds	r2, #124	; 0x7c
1000eac0:	2c05      	cmp	r4, #5
1000eac2:	d1d9      	bne.n	1000ea78 <ble_resolv_rand_addr_handler+0x2c>
1000eac4:	e03a      	b.n	1000eb3c <ble_resolv_rand_addr_handler+0xf0>
	}
	DBG_LOG_DEV("Device idx:%d",idx);
	#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
	if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
	{
		ble_send_slave_sec_request(connected_state_info.handle);
1000eac6:	4b26      	ldr	r3, [pc, #152]	; (1000eb60 <ble_resolv_rand_addr_handler+0x114>)
1000eac8:	8918      	ldrh	r0, [r3, #8]
1000eaca:	4b28      	ldr	r3, [pc, #160]	; (1000eb6c <ble_resolv_rand_addr_handler+0x120>)
1000eacc:	4798      	blx	r3
1000eace:	e03c      	b.n	1000eb4a <ble_resolv_rand_addr_handler+0xfe>
		
	}
	
	if (device_found)
	{
		DBG_LOG_DEV("##########Device Found");
1000ead0:	4827      	ldr	r0, [pc, #156]	; (1000eb70 <ble_resolv_rand_addr_handler+0x124>)
1000ead2:	4b28      	ldr	r3, [pc, #160]	; (1000eb74 <ble_resolv_rand_addr_handler+0x128>)
1000ead4:	4798      	blx	r3
1000ead6:	4828      	ldr	r0, [pc, #160]	; (1000eb78 <ble_resolv_rand_addr_handler+0x12c>)
1000ead8:	4b28      	ldr	r3, [pc, #160]	; (1000eb7c <ble_resolv_rand_addr_handler+0x130>)
1000eada:	4798      	blx	r3
		ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000eadc:	481f      	ldr	r0, [pc, #124]	; (1000eb5c <ble_resolv_rand_addr_handler+0x110>)
1000eade:	0163      	lsls	r3, r4, #5
1000eae0:	1b1a      	subs	r2, r3, r4
1000eae2:	0092      	lsls	r2, r2, #2
1000eae4:	1882      	adds	r2, r0, r2
1000eae6:	0011      	movs	r1, r2
1000eae8:	315e      	adds	r1, #94	; 0x5e
1000eaea:	2502      	movs	r5, #2
1000eaec:	700d      	strb	r5, [r1, #0]
		ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
1000eaee:	210a      	movs	r1, #10
1000eaf0:	7491      	strb	r1, [r2, #18]
		memcpy((uint8_t *)&ble_dev_info[idx].conn_info, (uint8_t *)&connected_state_info, sizeof(at_ble_connected_t));
1000eaf2:	0010      	movs	r0, r2
1000eaf4:	2212      	movs	r2, #18
1000eaf6:	491a      	ldr	r1, [pc, #104]	; (1000eb60 <ble_resolv_rand_addr_handler+0x114>)
1000eaf8:	4b1a      	ldr	r3, [pc, #104]	; (1000eb64 <ble_resolv_rand_addr_handler+0x118>)
1000eafa:	4798      	blx	r3
1000eafc:	e00e      	b.n	1000eb1c <ble_resolv_rand_addr_handler+0xd0>
		peripheral_device_added = true;
	}
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
1000eafe:	481c      	ldr	r0, [pc, #112]	; (1000eb70 <ble_resolv_rand_addr_handler+0x124>)
1000eb00:	4b1c      	ldr	r3, [pc, #112]	; (1000eb74 <ble_resolv_rand_addr_handler+0x128>)
1000eb02:	4798      	blx	r3
1000eb04:	481e      	ldr	r0, [pc, #120]	; (1000eb80 <ble_resolv_rand_addr_handler+0x134>)
1000eb06:	4b1d      	ldr	r3, [pc, #116]	; (1000eb7c <ble_resolv_rand_addr_handler+0x130>)
1000eb08:	4798      	blx	r3
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
		{
			if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000eb0a:	235e      	movs	r3, #94	; 0x5e
1000eb0c:	4a13      	ldr	r2, [pc, #76]	; (1000eb5c <ble_resolv_rand_addr_handler+0x110>)
1000eb0e:	5cd3      	ldrb	r3, [r2, r3]
1000eb10:	2b00      	cmp	r3, #0
1000eb12:	d0b6      	beq.n	1000ea82 <ble_resolv_rand_addr_handler+0x36>
1000eb14:	4a1b      	ldr	r2, [pc, #108]	; (1000eb84 <ble_resolv_rand_addr_handler+0x138>)
1000eb16:	2301      	movs	r3, #1
		peripheral_device_added = true;
	}
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000eb18:	2401      	movs	r4, #1
1000eb1a:	e7ad      	b.n	1000ea78 <ble_resolv_rand_addr_handler+0x2c>
				peripheral_device_added = true;
				break;
			}
		}
	}
	DBG_LOG_DEV("Device idx:%d",idx);
1000eb1c:	4814      	ldr	r0, [pc, #80]	; (1000eb70 <ble_resolv_rand_addr_handler+0x124>)
1000eb1e:	4b15      	ldr	r3, [pc, #84]	; (1000eb74 <ble_resolv_rand_addr_handler+0x128>)
1000eb20:	4798      	blx	r3
1000eb22:	0021      	movs	r1, r4
1000eb24:	4818      	ldr	r0, [pc, #96]	; (1000eb88 <ble_resolv_rand_addr_handler+0x13c>)
1000eb26:	4b15      	ldr	r3, [pc, #84]	; (1000eb7c <ble_resolv_rand_addr_handler+0x130>)
1000eb28:	4798      	blx	r3
	#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
	if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
1000eb2a:	0163      	lsls	r3, r4, #5
1000eb2c:	1b1c      	subs	r4, r3, r4
1000eb2e:	00a4      	lsls	r4, r4, #2
1000eb30:	4b0a      	ldr	r3, [pc, #40]	; (1000eb5c <ble_resolv_rand_addr_handler+0x110>)
1000eb32:	191c      	adds	r4, r3, r4
1000eb34:	7ca3      	ldrb	r3, [r4, #18]
1000eb36:	2b0a      	cmp	r3, #10
1000eb38:	d107      	bne.n	1000eb4a <ble_resolv_rand_addr_handler+0xfe>
1000eb3a:	e7c4      	b.n	1000eac6 <ble_resolv_rand_addr_handler+0x7a>
				peripheral_device_added = true;
				break;
			}
		}
	}
	DBG_LOG_DEV("Device idx:%d",idx);
1000eb3c:	480c      	ldr	r0, [pc, #48]	; (1000eb70 <ble_resolv_rand_addr_handler+0x124>)
1000eb3e:	4b0d      	ldr	r3, [pc, #52]	; (1000eb74 <ble_resolv_rand_addr_handler+0x128>)
1000eb40:	4798      	blx	r3
1000eb42:	2105      	movs	r1, #5
1000eb44:	4810      	ldr	r0, [pc, #64]	; (1000eb88 <ble_resolv_rand_addr_handler+0x13c>)
1000eb46:	4b0d      	ldr	r3, [pc, #52]	; (1000eb7c <ble_resolv_rand_addr_handler+0x130>)
1000eb48:	4798      	blx	r3
	#endif
	ALL_UNUSED(peripheral_device_added);

	return AT_BLE_SUCCESS;
	
}
1000eb4a:	2000      	movs	r0, #0
1000eb4c:	bc04      	pop	{r2}
1000eb4e:	4690      	mov	r8, r2
1000eb50:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000eb52:	46c0      	nop			; (mov r8, r8)
1000eb54:	1001a4a6 	.word	0x1001a4a6
1000eb58:	10015209 	.word	0x10015209
1000eb5c:	1001a460 	.word	0x1001a460
1000eb60:	1001a70c 	.word	0x1001a70c
1000eb64:	10015227 	.word	0x10015227
1000eb68:	1001a6cc 	.word	0x1001a6cc
1000eb6c:	1000e7b9 	.word	0x1000e7b9
1000eb70:	10016660 	.word	0x10016660
1000eb74:	100154a1 	.word	0x100154a1
1000eb78:	1001815c 	.word	0x1001815c
1000eb7c:	10015381 	.word	0x10015381
1000eb80:	10018174 	.word	0x10018174
1000eb84:	1001a53a 	.word	0x1001a53a
1000eb88:	10018190 	.word	0x10018190

1000eb8c <ble_event_manager>:
	}
	return AT_BLE_SUCCESS;
}

void ble_event_manager(at_ble_events_t events, void *event_params)
{
1000eb8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000eb8e:	0004      	movs	r4, r0
1000eb90:	000d      	movs	r5, r1
	DBG_LOG_DEV("\r\nBLE-Event:%d", events);
1000eb92:	4848      	ldr	r0, [pc, #288]	; (1000ecb4 <ble_event_manager+0x128>)
1000eb94:	4b48      	ldr	r3, [pc, #288]	; (1000ecb8 <ble_event_manager+0x12c>)
1000eb96:	4798      	blx	r3
1000eb98:	0021      	movs	r1, r4
1000eb9a:	4848      	ldr	r0, [pc, #288]	; (1000ecbc <ble_event_manager+0x130>)
1000eb9c:	4b48      	ldr	r3, [pc, #288]	; (1000ecc0 <ble_event_manager+0x134>)
1000eb9e:	4798      	blx	r3
	switch(events)
1000eba0:	2c3b      	cmp	r4, #59	; 0x3b
1000eba2:	d879      	bhi.n	1000ec98 <ble_event_manager+0x10c>
1000eba4:	00a3      	lsls	r3, r4, #2
1000eba6:	4a47      	ldr	r2, [pc, #284]	; (1000ecc4 <ble_event_manager+0x138>)
1000eba8:	58d3      	ldr	r3, [r2, r3]
1000ebaa:	469f      	mov	pc, r3
		for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gap_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gap_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000ebac:	00a4      	lsls	r4, r4, #2
1000ebae:	2600      	movs	r6, #0
		}
		#endif			
		
		for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gap_event_cb[idx] != NULL)
1000ebb0:	4f45      	ldr	r7, [pc, #276]	; (1000ecc8 <ble_event_manager+0x13c>)
1000ebb2:	59bb      	ldr	r3, [r7, r6]
1000ebb4:	2b00      	cmp	r3, #0
1000ebb6:	d004      	beq.n	1000ebc2 <ble_event_manager+0x36>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gap_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000ebb8:	591b      	ldr	r3, [r3, r4]
1000ebba:	2b00      	cmp	r3, #0
1000ebbc:	d001      	beq.n	1000ebc2 <ble_event_manager+0x36>
				{
					event_cb_fn[events](event_params);		
1000ebbe:	0028      	movs	r0, r5
1000ebc0:	4798      	blx	r3
1000ebc2:	3604      	adds	r6, #4
			if( ble_scan_duplication_check((at_ble_scan_info_t*)event_params) )
				return;
		}
		#endif			
		
		for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
1000ebc4:	2e14      	cmp	r6, #20
1000ebc6:	d1f4      	bne.n	1000ebb2 <ble_event_manager+0x26>
1000ebc8:	e072      	b.n	1000ecb0 <ble_event_manager+0x124>
		for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_client_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_client_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000ebca:	3c13      	subs	r4, #19
1000ebcc:	b2e4      	uxtb	r4, r4
1000ebce:	00a4      	lsls	r4, r4, #2
1000ebd0:	2600      	movs	r6, #0
	{
		uint8_t idx;
		events -= (AT_BLE_CON_CHANNEL_MAP_IND + 1);
		for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_client_event_cb[idx] != NULL)
1000ebd2:	4f3e      	ldr	r7, [pc, #248]	; (1000eccc <ble_event_manager+0x140>)
1000ebd4:	59bb      	ldr	r3, [r7, r6]
1000ebd6:	2b00      	cmp	r3, #0
1000ebd8:	d004      	beq.n	1000ebe4 <ble_event_manager+0x58>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_client_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000ebda:	591b      	ldr	r3, [r3, r4]
1000ebdc:	2b00      	cmp	r3, #0
1000ebde:	d001      	beq.n	1000ebe4 <ble_event_manager+0x58>
				{
					event_cb_fn[events](event_params);
1000ebe0:	0028      	movs	r0, r5
1000ebe2:	4798      	blx	r3
1000ebe4:	3604      	adds	r6, #4
	case AT_BLE_NOTIFICATION_RECIEVED:
	case AT_BLE_INDICATION_RECIEVED:
	{
		uint8_t idx;
		events -= (AT_BLE_CON_CHANNEL_MAP_IND + 1);
		for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
1000ebe6:	2e14      	cmp	r6, #20
1000ebe8:	d1f4      	bne.n	1000ebd4 <ble_event_manager+0x48>
1000ebea:	e061      	b.n	1000ecb0 <ble_event_manager+0x124>
	case AT_BLE_MTU_CHANGED_CMD_COMPLETE:
	case AT_BLE_CHARACTERISTIC_WRITE_CMD_CMP:
	case AT_BLE_READ_AUTHORIZE_REQUEST:
	{
		uint8_t idx;
		events -= (AT_BLE_INDICATION_RECIEVED + 1);
1000ebec:	3c1d      	subs	r4, #29
1000ebee:	b2e4      	uxtb	r4, r4
		DBG_LOG_DEV("GATT_Server Event:%d", events);
1000ebf0:	4830      	ldr	r0, [pc, #192]	; (1000ecb4 <ble_event_manager+0x128>)
1000ebf2:	4b31      	ldr	r3, [pc, #196]	; (1000ecb8 <ble_event_manager+0x12c>)
1000ebf4:	4798      	blx	r3
1000ebf6:	0021      	movs	r1, r4
1000ebf8:	4835      	ldr	r0, [pc, #212]	; (1000ecd0 <ble_event_manager+0x144>)
1000ebfa:	4b31      	ldr	r3, [pc, #196]	; (1000ecc0 <ble_event_manager+0x134>)
1000ebfc:	4798      	blx	r3
		for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_server_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_server_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000ebfe:	00a4      	lsls	r4, r4, #2
1000ec00:	2600      	movs	r6, #0
		uint8_t idx;
		events -= (AT_BLE_INDICATION_RECIEVED + 1);
		DBG_LOG_DEV("GATT_Server Event:%d", events);
		for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_server_event_cb[idx] != NULL)
1000ec02:	4f34      	ldr	r7, [pc, #208]	; (1000ecd4 <ble_event_manager+0x148>)
1000ec04:	59bb      	ldr	r3, [r7, r6]
1000ec06:	2b00      	cmp	r3, #0
1000ec08:	d004      	beq.n	1000ec14 <ble_event_manager+0x88>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_server_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000ec0a:	591b      	ldr	r3, [r3, r4]
1000ec0c:	2b00      	cmp	r3, #0
1000ec0e:	d001      	beq.n	1000ec14 <ble_event_manager+0x88>
				{
					event_cb_fn[events](event_params);
1000ec10:	0028      	movs	r0, r5
1000ec12:	4798      	blx	r3
1000ec14:	3604      	adds	r6, #4
	case AT_BLE_READ_AUTHORIZE_REQUEST:
	{
		uint8_t idx;
		events -= (AT_BLE_INDICATION_RECIEVED + 1);
		DBG_LOG_DEV("GATT_Server Event:%d", events);
		for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
1000ec16:	2e14      	cmp	r6, #20
1000ec18:	d1f4      	bne.n	1000ec04 <ble_event_manager+0x78>
1000ec1a:	e049      	b.n	1000ecb0 <ble_event_manager+0x124>
	case AT_BLE_LECB_ADD_CREDIT_IND:
	case AT_BLE_LECB_SEND_RESP:
	case AT_BLE_LECB_DATA_RECIEVED:
	{
		uint8_t idx;
		events -= (AT_BLE_READ_AUTHORIZE_REQUEST + 1);
1000ec1c:	3c27      	subs	r4, #39	; 0x27
1000ec1e:	b2e4      	uxtb	r4, r4
		for (idx = 0; idx < MAX_L2CAP_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_l2cap_event_cb[idx] != NULL)
1000ec20:	4b2d      	ldr	r3, [pc, #180]	; (1000ecd8 <ble_event_manager+0x14c>)
1000ec22:	681b      	ldr	r3, [r3, #0]
1000ec24:	2b00      	cmp	r3, #0
1000ec26:	d043      	beq.n	1000ecb0 <ble_event_manager+0x124>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_l2cap_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000ec28:	00a4      	lsls	r4, r4, #2
1000ec2a:	58e3      	ldr	r3, [r4, r3]
1000ec2c:	2b00      	cmp	r3, #0
1000ec2e:	d03f      	beq.n	1000ecb0 <ble_event_manager+0x124>
				{
					event_cb_fn[events](event_params);
1000ec30:	0028      	movs	r0, r5
1000ec32:	4798      	blx	r3
1000ec34:	e03c      	b.n	1000ecb0 <ble_event_manager+0x124>
	case AT_BLE_HTPT_ENABLE_RSP:
	case AT_BLE_HTPT_MEAS_INTV_UPD_RSP:
	case AT_BLE_HTPT_MEAS_INTV_CHG_REQ:
	{
		uint8_t idx;
		events -= (AT_BLE_LECB_DATA_RECIEVED + 1);
1000ec36:	3c2d      	subs	r4, #45	; 0x2d
1000ec38:	b2e4      	uxtb	r4, r4
		for (idx = 0; idx < MAX_HTPT_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_htpt_event_cb[idx] != NULL)
1000ec3a:	4b28      	ldr	r3, [pc, #160]	; (1000ecdc <ble_event_manager+0x150>)
1000ec3c:	681b      	ldr	r3, [r3, #0]
1000ec3e:	2b00      	cmp	r3, #0
1000ec40:	d036      	beq.n	1000ecb0 <ble_event_manager+0x124>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_htpt_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000ec42:	00a4      	lsls	r4, r4, #2
1000ec44:	58e3      	ldr	r3, [r4, r3]
1000ec46:	2b00      	cmp	r3, #0
1000ec48:	d032      	beq.n	1000ecb0 <ble_event_manager+0x124>
				{
					event_cb_fn[events](event_params);
1000ec4a:	0028      	movs	r0, r5
1000ec4c:	4798      	blx	r3
1000ec4e:	e02f      	b.n	1000ecb0 <ble_event_manager+0x124>
		for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_dtm_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_dtm_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000ec50:	3c36      	subs	r4, #54	; 0x36
1000ec52:	b2e4      	uxtb	r4, r4
1000ec54:	00a4      	lsls	r4, r4, #2
1000ec56:	2600      	movs	r6, #0
	{
		uint8_t idx;
		events -= (AT_BLE_HTPT_MEAS_INTV_CHG_REQ + 1);
		for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_dtm_event_cb[idx] != NULL)
1000ec58:	4f21      	ldr	r7, [pc, #132]	; (1000ece0 <ble_event_manager+0x154>)
1000ec5a:	59bb      	ldr	r3, [r7, r6]
1000ec5c:	2b00      	cmp	r3, #0
1000ec5e:	d004      	beq.n	1000ec6a <ble_event_manager+0xde>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_dtm_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000ec60:	591b      	ldr	r3, [r3, r4]
1000ec62:	2b00      	cmp	r3, #0
1000ec64:	d001      	beq.n	1000ec6a <ble_event_manager+0xde>
				{
					event_cb_fn[events](event_params);
1000ec66:	0028      	movs	r0, r5
1000ec68:	4798      	blx	r3
1000ec6a:	3604      	adds	r6, #4
	case AT_BLE_LE_TEST_STATUS:
	case AT_BLE_LE_PACKET_REPORT:
	{
		uint8_t idx;
		events -= (AT_BLE_HTPT_MEAS_INTV_CHG_REQ + 1);
		for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
1000ec6c:	2e14      	cmp	r6, #20
1000ec6e:	d1f4      	bne.n	1000ec5a <ble_event_manager+0xce>
1000ec70:	e01e      	b.n	1000ecb0 <ble_event_manager+0x124>
	case AT_BLE_CUSTOM_EVENT:
	case AT_BLE_DEVICE_READY:
	case AT_BLE_EVENT_MAX:
	{
		uint8_t idx;
		events -= (AT_BLE_LE_PACKET_REPORT + 1);
1000ec72:	3c38      	subs	r4, #56	; 0x38
1000ec74:	b2e4      	uxtb	r4, r4
		for (idx = 0; idx < MAX_CUSTOM_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_custom_event_cb[idx] != NULL)
1000ec76:	4b1b      	ldr	r3, [pc, #108]	; (1000ece4 <ble_event_manager+0x158>)
1000ec78:	681b      	ldr	r3, [r3, #0]
1000ec7a:	2b00      	cmp	r3, #0
1000ec7c:	d018      	beq.n	1000ecb0 <ble_event_manager+0x124>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_custom_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000ec7e:	00a4      	lsls	r4, r4, #2
1000ec80:	58e3      	ldr	r3, [r4, r3]
1000ec82:	2b00      	cmp	r3, #0
1000ec84:	d014      	beq.n	1000ecb0 <ble_event_manager+0x124>
				{
					event_cb_fn[events](event_params);
1000ec86:	0028      	movs	r0, r5
1000ec88:	4798      	blx	r3
1000ec8a:	e011      	b.n	1000ecb0 <ble_event_manager+0x124>
	}
	break;

	case AT_PLATFORM_EVENT:
	{
		if (ble_user_event_cb) {
1000ec8c:	4b16      	ldr	r3, [pc, #88]	; (1000ece8 <ble_event_manager+0x15c>)
1000ec8e:	681b      	ldr	r3, [r3, #0]
1000ec90:	2b00      	cmp	r3, #0
1000ec92:	d00d      	beq.n	1000ecb0 <ble_event_manager+0x124>
			ble_user_event_cb();
1000ec94:	4798      	blx	r3
1000ec96:	e00b      	b.n	1000ecb0 <ble_event_manager+0x124>
	}
	break;

	default:
	{
		DBG_LOG_DEV("BLE-Manager:Unknown Event=0x%X", events);
1000ec98:	4e06      	ldr	r6, [pc, #24]	; (1000ecb4 <ble_event_manager+0x128>)
1000ec9a:	0030      	movs	r0, r6
1000ec9c:	4d06      	ldr	r5, [pc, #24]	; (1000ecb8 <ble_event_manager+0x12c>)
1000ec9e:	47a8      	blx	r5
1000eca0:	0021      	movs	r1, r4
1000eca2:	4812      	ldr	r0, [pc, #72]	; (1000ecec <ble_event_manager+0x160>)
1000eca4:	4b06      	ldr	r3, [pc, #24]	; (1000ecc0 <ble_event_manager+0x134>)
1000eca6:	4798      	blx	r3
		DBG_LOG("\r\n");
1000eca8:	0030      	movs	r0, r6
1000ecaa:	47a8      	blx	r5
1000ecac:	0030      	movs	r0, r6
1000ecae:	47a8      	blx	r5
	}
	break;		
	}
}
1000ecb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000ecb2:	46c0      	nop			; (mov r8, r8)
1000ecb4:	10016660 	.word	0x10016660
1000ecb8:	100154a1 	.word	0x100154a1
1000ecbc:	100181a0 	.word	0x100181a0
1000ecc0:	10015381 	.word	0x10015381
1000ecc4:	10017700 	.word	0x10017700
1000ecc8:	1001a6e4 	.word	0x1001a6e4
1000eccc:	1001a6f8 	.word	0x1001a6f8
1000ecd0:	100181b0 	.word	0x100181b0
1000ecd4:	1001a44c 	.word	0x1001a44c
1000ecd8:	1001a740 	.word	0x1001a740
1000ecdc:	1001a448 	.word	0x1001a448
1000ece0:	1001a6d0 	.word	0x1001a6d0
1000ece4:	1001ac84 	.word	0x1001ac84
1000ece8:	10018fc8 	.word	0x10018fc8
1000ecec:	100181c8 	.word	0x100181c8

1000ecf0 <ble_event_task>:
	return ulp_status;
}

/** @brief function to get event from stack */
at_ble_status_t ble_event_task(uint32_t timeout)
{
1000ecf0:	b570      	push	{r4, r5, r6, lr}
1000ecf2:	0004      	movs	r4, r0
	return status;
}

ble_ulp_mode_t ble_get_ulp_status(void)
{
	return ulp_status;
1000ecf4:	4b0d      	ldr	r3, [pc, #52]	; (1000ed2c <ble_event_task+0x3c>)
1000ecf6:	781b      	ldrb	r3, [r3, #0]
/** @brief function to get event from stack */
at_ble_status_t ble_event_task(uint32_t timeout)
{
	at_ble_status_t status;
	
	if (ble_get_ulp_status() == BLE_ULP_MODE_SET)
1000ecf8:	2b01      	cmp	r3, #1
1000ecfa:	d101      	bne.n	1000ed00 <ble_event_task+0x10>
	{
		release_sleep_lock();
1000ecfc:	4b0c      	ldr	r3, [pc, #48]	; (1000ed30 <ble_event_task+0x40>)
1000ecfe:	4798      	blx	r3
	}	
	status = at_ble_event_get(&event, ble_event_params, timeout);
1000ed00:	0022      	movs	r2, r4
1000ed02:	490c      	ldr	r1, [pc, #48]	; (1000ed34 <ble_event_task+0x44>)
1000ed04:	480c      	ldr	r0, [pc, #48]	; (1000ed38 <ble_event_task+0x48>)
1000ed06:	4b0d      	ldr	r3, [pc, #52]	; (1000ed3c <ble_event_task+0x4c>)
1000ed08:	4798      	blx	r3
1000ed0a:	0004      	movs	r4, r0
1000ed0c:	0005      	movs	r5, r0
	return status;
}

ble_ulp_mode_t ble_get_ulp_status(void)
{
	return ulp_status;
1000ed0e:	4b07      	ldr	r3, [pc, #28]	; (1000ed2c <ble_event_task+0x3c>)
1000ed10:	781b      	ldrb	r3, [r3, #0]
	{
		release_sleep_lock();
	}	
	status = at_ble_event_get(&event, ble_event_params, timeout);
	
	if (ble_get_ulp_status() == BLE_ULP_MODE_SET)
1000ed12:	2b01      	cmp	r3, #1
1000ed14:	d101      	bne.n	1000ed1a <ble_event_task+0x2a>
	{
		acquire_sleep_lock();
1000ed16:	4b0a      	ldr	r3, [pc, #40]	; (1000ed40 <ble_event_task+0x50>)
1000ed18:	4798      	blx	r3
	}
	
    if (status == AT_BLE_SUCCESS) 
1000ed1a:	2d00      	cmp	r5, #0
1000ed1c:	d104      	bne.n	1000ed28 <ble_event_task+0x38>
    {		
            ble_event_manager(event, ble_event_params);
1000ed1e:	4b06      	ldr	r3, [pc, #24]	; (1000ed38 <ble_event_task+0x48>)
1000ed20:	7818      	ldrb	r0, [r3, #0]
1000ed22:	4904      	ldr	r1, [pc, #16]	; (1000ed34 <ble_event_task+0x44>)
1000ed24:	4b07      	ldr	r3, [pc, #28]	; (1000ed44 <ble_event_task+0x54>)
1000ed26:	4798      	blx	r3
    }
    
    return status;
}
1000ed28:	0020      	movs	r0, r4
1000ed2a:	bd70      	pop	{r4, r5, r6, pc}
1000ed2c:	10018fd7 	.word	0x10018fd7
1000ed30:	1000f701 	.word	0x1000f701
1000ed34:	1001aa78 	.word	0x1001aa78
1000ed38:	1001a73c 	.word	0x1001a73c
1000ed3c:	1000fe1d 	.word	0x1000fe1d
1000ed40:	1000f6d9 	.word	0x1000f6d9
1000ed44:	1000eb8d 	.word	0x1000eb8d

1000ed48 <ble_advertisement_data_set>:
	}
}

/* Advertisement Data will be set based on the advertisement configuration */
at_ble_status_t ble_advertisement_data_set(void)
{
1000ed48:	b530      	push	{r4, r5, lr}
1000ed4a:	b091      	sub	sp, #68	; 0x44
		uint8_t length_field_ind;
		uint8_t adv_element_len;
		adv_buf[adv_data_element.len] = adv_data_element.len;
		length_field_ind = adv_data_element.len;
		adv_data_element.len++;
		adv_buf[adv_data_element.len++] = COMPLETE_LIST_16BIT_SERV_UUIDS;
1000ed4c:	ac08      	add	r4, sp, #32
1000ed4e:	2203      	movs	r2, #3
1000ed50:	7062      	strb	r2, [r4, #1]
		MREPEAT(SERVICE_UUID16_MAX_NUM, _CONF_SERVICE_16BIT_UUID, &adv_data_element);
1000ed52:	2302      	movs	r3, #2
1000ed54:	70a3      	strb	r3, [r4, #2]
1000ed56:	3316      	adds	r3, #22
1000ed58:	70e3      	strb	r3, [r4, #3]
1000ed5a:	7122      	strb	r2, [r4, #4]
1000ed5c:	7163      	strb	r3, [r4, #5]
1000ed5e:	3201      	adds	r2, #1
1000ed60:	71a2      	strb	r2, [r4, #6]
1000ed62:	71e3      	strb	r3, [r4, #7]
1000ed64:	320b      	adds	r2, #11
1000ed66:	7222      	strb	r2, [r4, #8]
1000ed68:	7263      	strb	r3, [r4, #9]
		adv_element_len = adv_data_element.len - (length_field_ind + ADV_ELEMENT_SIZE);
		if(adv_element_len) 
		{			
			adv_buf[length_field_ind] = adv_element_len+ADV_TYPE_SIZE;
1000ed6a:	2509      	movs	r5, #9
1000ed6c:	7025      	strb	r5, [r4, #0]
	#endif
	
	#if (BLE_GAP_ADV_COMPLETE_LOCAL_NAME_ENABLE && !BLE_GAP_ADV_SHORTENED_LOCAL_NAME_ENABLE)
	#if (BLE_GAP_ADV_COMPLETE_LOCAL_NAME_SCN_RSP_ENABLE != SCAN_RESPONSE_ONLY_ENABLE)
	if((adv_data_element.len) <= (AT_BLE_ADV_MAX_SIZE - (ADV_TYPE_FLAG_SIZE + ADV_ELEMENT_SIZE + BLE_GAP_ADV_DATA_COMPLETE_LOCAL_NAME_LENGTH))) {
		adv_buf[adv_data_element.len++] = BLE_GAP_ADV_DATA_COMPLETE_LOCAL_NAME_LENGTH + ADV_TYPE_SIZE;
1000ed6e:	3b0e      	subs	r3, #14
1000ed70:	72a3      	strb	r3, [r4, #10]
		adv_buf[adv_data_element.len++] = COMPLETE_LOCAL_NAME;
1000ed72:	72e5      	strb	r5, [r4, #11]
		memcpy(&adv_buf[adv_data_element.len], BLE_GAP_ADV_DATA_COMPLETE_LOCAL_NAME, BLE_GAP_ADV_DATA_COMPLETE_LOCAL_NAME_LENGTH);
1000ed74:	aa0b      	add	r2, sp, #44	; 0x2c
1000ed76:	4b16      	ldr	r3, [pc, #88]	; (1000edd0 <ble_advertisement_data_set+0x88>)
1000ed78:	cb03      	ldmia	r3!, {r0, r1}
1000ed7a:	c203      	stmia	r2!, {r0, r1}
1000ed7c:	781b      	ldrb	r3, [r3, #0]
1000ed7e:	7013      	strb	r3, [r2, #0]
	#endif
	#if ((BLE_GAP_ADV_SERVICE_SOLTN_128BIT_UUID_SCN_RSP_ENABLE == SCAN_RESPONSE_ENABLE) || (BLE_GAP_ADV_SERVICE_SOLTN_128BIT_UUID_SCN_RSP_ENABLE == SCAN_RESPONSE_ONLY_ENABLE))
	else if((scan_resp_data_element.len) <= (AT_BLE_ADV_MAX_SIZE - (ADV_ELEMENT_SIZE + BLE_GAP_ADV_SERVICE_128BIT_UUID_LENGTH))) {
		uint8_t length_field_ind;
		uint8_t scan_resp_element_len;
		scn_resp[scan_resp_data_element.len] = scan_resp_data_element.len;
1000ed80:	2300      	movs	r3, #0
1000ed82:	466a      	mov	r2, sp
1000ed84:	7013      	strb	r3, [r2, #0]
		length_field_ind = scan_resp_data_element.len;
		scan_resp_data_element.len++;
		scn_resp[scan_resp_data_element.len++] = LIST_128BIT_SERV_SOLICITATION_UUIDS;
1000ed86:	3315      	adds	r3, #21
1000ed88:	7053      	strb	r3, [r2, #1]
		return AT_BLE_GAP_INVALID_PARAM;
	}
	#endif
	
	#if BLE_GAP_ADV_MANUFACTURER_SPECIFIC_DATA_ENABLE
    DBG_LOG_DEV("[ble_manager]\t\t\tManufacturer specific data enabled");
1000ed8a:	4812      	ldr	r0, [pc, #72]	; (1000edd4 <ble_advertisement_data_set+0x8c>)
1000ed8c:	4b12      	ldr	r3, [pc, #72]	; (1000edd8 <ble_advertisement_data_set+0x90>)
1000ed8e:	4798      	blx	r3
1000ed90:	4812      	ldr	r0, [pc, #72]	; (1000eddc <ble_advertisement_data_set+0x94>)
1000ed92:	4b13      	ldr	r3, [pc, #76]	; (1000ede0 <ble_advertisement_data_set+0x98>)
1000ed94:	4798      	blx	r3
    DBG_LOG_DEV("[ble_manager]\t\tManufacturer specific data NOT enabled");
	if(false){}
	#endif
	#if ((BLE_GAP_ADV_MANUFACTURER_SPECIFIC_DATA_SCN_RSP_ENABLE == SCAN_RESPONSE_ENABLE) || (BLE_GAP_ADV_MANUFACTURER_SPECIFIC_DATA_SCN_RSP_ENABLE == SCAN_RESPONSE_ONLY_ENABLE))
	else if((scan_resp_data_element.len) <= (AT_BLE_ADV_MAX_SIZE - (ADV_ELEMENT_SIZE + BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA_SIZE))) {
		scn_resp[scan_resp_data_element.len++] = BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA_SIZE + ADV_TYPE_SIZE;
1000ed96:	466b      	mov	r3, sp
1000ed98:	701d      	strb	r5, [r3, #0]
		scn_resp[scan_resp_data_element.len++] = MANUFACTURER_SPECIFIC_DATA;
1000ed9a:	23ff      	movs	r3, #255	; 0xff
1000ed9c:	466a      	mov	r2, sp
1000ed9e:	7053      	strb	r3, [r2, #1]
		memcpy(&scn_resp[scan_resp_data_element.len], BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA, BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA_SIZE);
1000eda0:	2208      	movs	r2, #8
1000eda2:	4910      	ldr	r1, [pc, #64]	; (1000ede4 <ble_advertisement_data_set+0x9c>)
1000eda4:	466b      	mov	r3, sp
1000eda6:	1c98      	adds	r0, r3, #2
1000eda8:	4b0f      	ldr	r3, [pc, #60]	; (1000ede8 <ble_advertisement_data_set+0xa0>)
1000edaa:	4798      	blx	r3
		DBG_LOG_ADV("Failed to add Manufacturer specific data");
		return AT_BLE_GAP_INVALID_PARAM;
	}
	#endif
	
	if (at_ble_adv_data_set(adv_buf, adv_data_element.len, scn_resp,
1000edac:	230a      	movs	r3, #10
1000edae:	466a      	mov	r2, sp
1000edb0:	2115      	movs	r1, #21
1000edb2:	0020      	movs	r0, r4
1000edb4:	4c0d      	ldr	r4, [pc, #52]	; (1000edec <ble_advertisement_data_set+0xa4>)
1000edb6:	47a0      	blx	r4
1000edb8:	2800      	cmp	r0, #0
1000edba:	d005      	beq.n	1000edc8 <ble_advertisement_data_set+0x80>
	scan_resp_data_element.len) != AT_BLE_SUCCESS) {
		DBG_LOG("BLE Advertisement data set failed");
1000edbc:	4805      	ldr	r0, [pc, #20]	; (1000edd4 <ble_advertisement_data_set+0x8c>)
1000edbe:	4b06      	ldr	r3, [pc, #24]	; (1000edd8 <ble_advertisement_data_set+0x90>)
1000edc0:	4798      	blx	r3
1000edc2:	480b      	ldr	r0, [pc, #44]	; (1000edf0 <ble_advertisement_data_set+0xa8>)
1000edc4:	4b06      	ldr	r3, [pc, #24]	; (1000ede0 <ble_advertisement_data_set+0x98>)
1000edc6:	4798      	blx	r3
            //DBG_LOG_ADV("- 0x%02x(%c) ", adv_buf[i], adv_buf[i]);
        //}
		//DBG_LOG_ADV("BLE Advertisement data set success");
		return AT_BLE_SUCCESS;
    }
}
1000edc8:	2000      	movs	r0, #0
1000edca:	b011      	add	sp, #68	; 0x44
1000edcc:	bd30      	pop	{r4, r5, pc}
1000edce:	46c0      	nop			; (mov r8, r8)
1000edd0:	10017ee4 	.word	0x10017ee4
1000edd4:	10016660 	.word	0x10016660
1000edd8:	100154a1 	.word	0x100154a1
1000eddc:	100181e8 	.word	0x100181e8
1000ede0:	10015381 	.word	0x10015381
1000ede4:	1001821c 	.word	0x1001821c
1000ede8:	10015227 	.word	0x10015227
1000edec:	1001087d 	.word	0x1001087d
1000edf0:	10018228 	.word	0x10018228

1000edf4 <uart_read_complete_callback>:

void _time_start(unsigned int sec);
unsigned int _time_done(void);

static void uart_read_complete_callback(struct uart_module *const module)
{
1000edf4:	b510      	push	{r4, lr}
	if(read_status == UART_READ_WAITING) {
1000edf6:	4b0e      	ldr	r3, [pc, #56]	; (1000ee30 <uart_read_complete_callback+0x3c>)
1000edf8:	781b      	ldrb	r3, [r3, #0]
1000edfa:	2b01      	cmp	r3, #1
1000edfc:	d10b      	bne.n	1000ee16 <uart_read_complete_callback+0x22>
		read_status = UART_READ_DONE;
1000edfe:	2202      	movs	r2, #2
1000ee00:	4b0b      	ldr	r3, [pc, #44]	; (1000ee30 <uart_read_complete_callback+0x3c>)
1000ee02:	701a      	strb	r2, [r3, #0]
		
		if(user_callback_func == NULL)
1000ee04:	4b0b      	ldr	r3, [pc, #44]	; (1000ee34 <uart_read_complete_callback+0x40>)
1000ee06:	681b      	ldr	r3, [r3, #0]
1000ee08:	2b00      	cmp	r3, #0
1000ee0a:	d110      	bne.n	1000ee2e <uart_read_complete_callback+0x3a>
			uart_disable_callback(&uart_instance, UART_RX_COMPLETE);
1000ee0c:	2102      	movs	r1, #2
1000ee0e:	480a      	ldr	r0, [pc, #40]	; (1000ee38 <uart_read_complete_callback+0x44>)
1000ee10:	4b0a      	ldr	r3, [pc, #40]	; (1000ee3c <uart_read_complete_callback+0x48>)
1000ee12:	4798      	blx	r3
1000ee14:	e00b      	b.n	1000ee2e <uart_read_complete_callback+0x3a>
	}
	else if(user_callback_func != NULL) {
1000ee16:	4b07      	ldr	r3, [pc, #28]	; (1000ee34 <uart_read_complete_callback+0x40>)
1000ee18:	681b      	ldr	r3, [r3, #0]
1000ee1a:	2b00      	cmp	r3, #0
1000ee1c:	d007      	beq.n	1000ee2e <uart_read_complete_callback+0x3a>
		user_callback_func(string_input[0]);
1000ee1e:	4c08      	ldr	r4, [pc, #32]	; (1000ee40 <uart_read_complete_callback+0x4c>)
1000ee20:	7820      	ldrb	r0, [r4, #0]
1000ee22:	4798      	blx	r3
		uart_read_buffer_job(&uart_instance, string_input, sizeof(string_input));
1000ee24:	2201      	movs	r2, #1
1000ee26:	0021      	movs	r1, r4
1000ee28:	4803      	ldr	r0, [pc, #12]	; (1000ee38 <uart_read_complete_callback+0x44>)
1000ee2a:	4b06      	ldr	r3, [pc, #24]	; (1000ee44 <uart_read_complete_callback+0x50>)
1000ee2c:	4798      	blx	r3
	}
	else {
		//Nothing to do.
	}
}
1000ee2e:	bd10      	pop	{r4, pc}
1000ee30:	10019fdc 	.word	0x10019fdc
1000ee34:	10019fe4 	.word	0x10019fe4
1000ee38:	1001ac88 	.word	0x1001ac88
1000ee3c:	1000d7e5 	.word	0x1000d7e5
1000ee40:	10019fe0 	.word	0x10019fe0
1000ee44:	1000d789 	.word	0x1000d789

1000ee48 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct uart_module *const module,
		uint8_t *c)
{
1000ee48:	b570      	push	{r4, r5, r6, lr}
1000ee4a:	0006      	movs	r6, r0
1000ee4c:	000d      	movs	r5, r1
	while(STATUS_OK != uart_read_wait(module, c));
1000ee4e:	4c03      	ldr	r4, [pc, #12]	; (1000ee5c <usart_serial_getchar+0x14>)
1000ee50:	0029      	movs	r1, r5
1000ee52:	0030      	movs	r0, r6
1000ee54:	47a0      	blx	r4
1000ee56:	2800      	cmp	r0, #0
1000ee58:	d1fa      	bne.n	1000ee50 <usart_serial_getchar+0x8>
}
1000ee5a:	bd70      	pop	{r4, r5, r6, pc}
1000ee5c:	1000d775 	.word	0x1000d775

1000ee60 <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct uart_module *const module,
		uint8_t c)
{
1000ee60:	b570      	push	{r4, r5, r6, lr}
1000ee62:	0006      	movs	r6, r0
1000ee64:	000d      	movs	r5, r1
	while(STATUS_OK !=uart_write_wait(module, c));
1000ee66:	4c03      	ldr	r4, [pc, #12]	; (1000ee74 <usart_serial_putchar+0x14>)
1000ee68:	0029      	movs	r1, r5
1000ee6a:	0030      	movs	r0, r6
1000ee6c:	47a0      	blx	r4
1000ee6e:	2800      	cmp	r0, #0
1000ee70:	d1fa      	bne.n	1000ee68 <usart_serial_putchar+0x8>

	return STATUS_OK;
}
1000ee72:	bd70      	pop	{r4, r5, r6, pc}
1000ee74:	1000d765 	.word	0x1000d765

1000ee78 <serial_console_init>:

void serial_console_init(void)
{
1000ee78:	b570      	push	{r4, r5, r6, lr}
	system_clock_config(CLOCK_RESOURCE_XO_26_MHZ, CLOCK_FREQ_26_MHZ);
1000ee7a:	2100      	movs	r1, #0
1000ee7c:	2000      	movs	r0, #0
1000ee7e:	4b19      	ldr	r3, [pc, #100]	; (1000eee4 <serial_console_init+0x6c>)
1000ee80:	4798      	blx	r3

	uart_get_config_defaults(&config_uart);
1000ee82:	4c19      	ldr	r4, [pc, #100]	; (1000eee8 <serial_console_init+0x70>)
1000ee84:	0020      	movs	r0, r4
1000ee86:	4b19      	ldr	r3, [pc, #100]	; (1000eeec <serial_console_init+0x74>)
1000ee88:	4798      	blx	r3

	config_uart.baud_rate = CONF_STDIO_BAUDRATE;
1000ee8a:	23e1      	movs	r3, #225	; 0xe1
1000ee8c:	025b      	lsls	r3, r3, #9
1000ee8e:	6023      	str	r3, [r4, #0]
	config_uart.pin_number_pad[0] = EDBG_CDC_PIN_PAD0;
1000ee90:	2302      	movs	r3, #2
1000ee92:	60a3      	str	r3, [r4, #8]
	config_uart.pin_number_pad[1] = EDBG_CDC_PIN_PAD1;
1000ee94:	2203      	movs	r2, #3
1000ee96:	60e2      	str	r2, [r4, #12]
	config_uart.pin_number_pad[2] = EDBG_CDC_PIN_PAD2;
1000ee98:	3201      	adds	r2, #1
1000ee9a:	6122      	str	r2, [r4, #16]
	config_uart.pin_number_pad[3] = EDBG_CDC_PIN_PAD3;
1000ee9c:	3201      	adds	r2, #1
1000ee9e:	6162      	str	r2, [r4, #20]
	
	config_uart.pinmux_sel_pad[0] = EDBG_CDC_MUX_PAD0;
1000eea0:	61a3      	str	r3, [r4, #24]
	config_uart.pinmux_sel_pad[1] = EDBG_CDC_MUX_PAD1;
1000eea2:	61e3      	str	r3, [r4, #28]
	config_uart.pinmux_sel_pad[2] = EDBG_CDC_MUX_PAD2;
1000eea4:	6223      	str	r3, [r4, #32]
	config_uart.pinmux_sel_pad[3] = EDBG_CDC_MUX_PAD3;
1000eea6:	6263      	str	r3, [r4, #36]	; 0x24
static inline void stdio_serial_init(
		struct uart_module *const module,
		Uart * const hw,
		const struct uart_config *const config)
{
	stdio_base = (void *)module;
1000eea8:	4d11      	ldr	r5, [pc, #68]	; (1000eef0 <serial_console_init+0x78>)
1000eeaa:	4b12      	ldr	r3, [pc, #72]	; (1000eef4 <serial_console_init+0x7c>)
1000eeac:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
1000eeae:	4a12      	ldr	r2, [pc, #72]	; (1000eef8 <serial_console_init+0x80>)
1000eeb0:	4b12      	ldr	r3, [pc, #72]	; (1000eefc <serial_console_init+0x84>)
1000eeb2:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
1000eeb4:	4a12      	ldr	r2, [pc, #72]	; (1000ef00 <serial_console_init+0x88>)
1000eeb6:	4b13      	ldr	r3, [pc, #76]	; (1000ef04 <serial_console_init+0x8c>)
1000eeb8:	601a      	str	r2, [r3, #0]
static inline bool usart_serial_init(
		struct uart_module *const module,
		Uart * const hw,
		const struct uart_config *const config)
{
	if (uart_init(module, hw, config) == STATUS_OK) {
1000eeba:	0022      	movs	r2, r4
1000eebc:	4912      	ldr	r1, [pc, #72]	; (1000ef08 <serial_console_init+0x90>)
1000eebe:	0028      	movs	r0, r5
1000eec0:	4b12      	ldr	r3, [pc, #72]	; (1000ef0c <serial_console_init+0x94>)
1000eec2:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
1000eec4:	4e12      	ldr	r6, [pc, #72]	; (1000ef10 <serial_console_init+0x98>)
1000eec6:	6833      	ldr	r3, [r6, #0]
1000eec8:	6898      	ldr	r0, [r3, #8]
1000eeca:	2100      	movs	r1, #0
1000eecc:	4c11      	ldr	r4, [pc, #68]	; (1000ef14 <serial_console_init+0x9c>)
1000eece:	47a0      	blx	r4
	setbuf(stdin, NULL);
1000eed0:	6833      	ldr	r3, [r6, #0]
1000eed2:	6858      	ldr	r0, [r3, #4]
1000eed4:	2100      	movs	r1, #0
1000eed6:	47a0      	blx	r4

	stdio_serial_init(&uart_instance, CONF_STDIO_USART_MODULE, &config_uart);
	
	uart_register_callback(&uart_instance, uart_read_complete_callback, UART_RX_COMPLETE);
1000eed8:	2202      	movs	r2, #2
1000eeda:	490f      	ldr	r1, [pc, #60]	; (1000ef18 <serial_console_init+0xa0>)
1000eedc:	0028      	movs	r0, r5
1000eede:	4b0f      	ldr	r3, [pc, #60]	; (1000ef1c <serial_console_init+0xa4>)
1000eee0:	4798      	blx	r3
}
1000eee2:	bd70      	pop	{r4, r5, r6, pc}
1000eee4:	1000c785 	.word	0x1000c785
1000eee8:	1001acac 	.word	0x1001acac
1000eeec:	1000d57d 	.word	0x1000d57d
1000eef0:	1001ac88 	.word	0x1001ac88
1000eef4:	1001a444 	.word	0x1001a444
1000eef8:	1000ee61 	.word	0x1000ee61
1000eefc:	1001a440 	.word	0x1001a440
1000ef00:	1000ee49 	.word	0x1000ee49
1000ef04:	1001a43c 	.word	0x1001a43c
1000ef08:	40004000 	.word	0x40004000
1000ef0c:	1000d5a9 	.word	0x1000d5a9
1000ef10:	100186a8 	.word	0x100186a8
1000ef14:	10015551 	.word	0x10015551
1000ef18:	1000edf5 	.word	0x1000edf5
1000ef1c:	1000d7b1 	.word	0x1000d7b1

1000ef20 <_time_start>:

void _time_start(unsigned int sec)
{
1000ef20:	b5f0      	push	{r4, r5, r6, r7, lr}
1000ef22:	b083      	sub	sp, #12
1000ef24:	0005      	movs	r5, r0
	system_clock_get_value();
1000ef26:	4c0d      	ldr	r4, [pc, #52]	; (1000ef5c <_time_start+0x3c>)
1000ef28:	47a0      	blx	r4
	unsigned int main_clk = system_clock_get_value();
1000ef2a:	47a0      	blx	r4

	tick = (((double)(main_clk)) * ((double)0.0000493)) * (sec * 1000);
1000ef2c:	4f0c      	ldr	r7, [pc, #48]	; (1000ef60 <_time_start+0x40>)
1000ef2e:	47b8      	blx	r7
1000ef30:	4e0c      	ldr	r6, [pc, #48]	; (1000ef64 <_time_start+0x44>)
1000ef32:	4a0d      	ldr	r2, [pc, #52]	; (1000ef68 <_time_start+0x48>)
1000ef34:	4b0d      	ldr	r3, [pc, #52]	; (1000ef6c <_time_start+0x4c>)
1000ef36:	47b0      	blx	r6
1000ef38:	9000      	str	r0, [sp, #0]
1000ef3a:	9101      	str	r1, [sp, #4]
1000ef3c:	20fa      	movs	r0, #250	; 0xfa
1000ef3e:	0080      	lsls	r0, r0, #2
1000ef40:	4368      	muls	r0, r5
1000ef42:	47b8      	blx	r7
1000ef44:	0002      	movs	r2, r0
1000ef46:	000b      	movs	r3, r1
1000ef48:	9800      	ldr	r0, [sp, #0]
1000ef4a:	9901      	ldr	r1, [sp, #4]
1000ef4c:	47b0      	blx	r6
1000ef4e:	4b08      	ldr	r3, [pc, #32]	; (1000ef70 <_time_start+0x50>)
1000ef50:	4798      	blx	r3
1000ef52:	4b08      	ldr	r3, [pc, #32]	; (1000ef74 <_time_start+0x54>)
1000ef54:	6018      	str	r0, [r3, #0]
}
1000ef56:	b003      	add	sp, #12
1000ef58:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000ef5a:	46c0      	nop			; (mov r8, r8)
1000ef5c:	1000c809 	.word	0x1000c809
1000ef60:	100150fd 	.word	0x100150fd
1000ef64:	100144f5 	.word	0x100144f5
1000ef68:	19feaec7 	.word	0x19feaec7
1000ef6c:	3f09d8ef 	.word	0x3f09d8ef
1000ef70:	10013599 	.word	0x10013599
1000ef74:	10019fd8 	.word	0x10019fd8

1000ef78 <_time_done>:

unsigned int _time_done()
{
	return --tick;
1000ef78:	4b02      	ldr	r3, [pc, #8]	; (1000ef84 <_time_done+0xc>)
1000ef7a:	681a      	ldr	r2, [r3, #0]
1000ef7c:	1e50      	subs	r0, r2, #1
1000ef7e:	6018      	str	r0, [r3, #0]
}
1000ef80:	4770      	bx	lr
1000ef82:	46c0      	nop			; (mov r8, r8)
1000ef84:	10019fd8 	.word	0x10019fd8

1000ef88 <getchar_b11_timeout>:

int getchar_b11_timeout(unsigned int sec)
{
1000ef88:	b570      	push	{r4, r5, r6, lr}
1000ef8a:	0004      	movs	r4, r0
	read_status = UART_READ_WAITING;
1000ef8c:	2201      	movs	r2, #1
1000ef8e:	4b11      	ldr	r3, [pc, #68]	; (1000efd4 <getchar_b11_timeout+0x4c>)
1000ef90:	701a      	strb	r2, [r3, #0]
	
	if(user_callback_func == NULL)
1000ef92:	4b11      	ldr	r3, [pc, #68]	; (1000efd8 <getchar_b11_timeout+0x50>)
1000ef94:	681b      	ldr	r3, [r3, #0]
1000ef96:	2b00      	cmp	r3, #0
1000ef98:	d103      	bne.n	1000efa2 <getchar_b11_timeout+0x1a>
		uart_enable_callback(&uart_instance, UART_RX_COMPLETE);
1000ef9a:	2102      	movs	r1, #2
1000ef9c:	480f      	ldr	r0, [pc, #60]	; (1000efdc <getchar_b11_timeout+0x54>)
1000ef9e:	4b10      	ldr	r3, [pc, #64]	; (1000efe0 <getchar_b11_timeout+0x58>)
1000efa0:	4798      	blx	r3

	_time_start(sec);
1000efa2:	0020      	movs	r0, r4
1000efa4:	4b0f      	ldr	r3, [pc, #60]	; (1000efe4 <getchar_b11_timeout+0x5c>)
1000efa6:	4798      	blx	r3
	
	string_input[0] = 0;
1000efa8:	490f      	ldr	r1, [pc, #60]	; (1000efe8 <getchar_b11_timeout+0x60>)
1000efaa:	2300      	movs	r3, #0
1000efac:	700b      	strb	r3, [r1, #0]
	uart_read_buffer_job(&uart_instance, string_input, sizeof(string_input));
1000efae:	2201      	movs	r2, #1
1000efb0:	480a      	ldr	r0, [pc, #40]	; (1000efdc <getchar_b11_timeout+0x54>)
1000efb2:	4b0e      	ldr	r3, [pc, #56]	; (1000efec <getchar_b11_timeout+0x64>)
1000efb4:	4798      	blx	r3
	
	while (read_status != UART_READ_DONE && _time_done() > 0 );
1000efb6:	4c07      	ldr	r4, [pc, #28]	; (1000efd4 <getchar_b11_timeout+0x4c>)
1000efb8:	4d0d      	ldr	r5, [pc, #52]	; (1000eff0 <getchar_b11_timeout+0x68>)
1000efba:	7823      	ldrb	r3, [r4, #0]
1000efbc:	2b02      	cmp	r3, #2
1000efbe:	d002      	beq.n	1000efc6 <getchar_b11_timeout+0x3e>
1000efc0:	47a8      	blx	r5
1000efc2:	2800      	cmp	r0, #0
1000efc4:	d1f9      	bne.n	1000efba <getchar_b11_timeout+0x32>
	
	read_status = UART_READ_NONE;
1000efc6:	2200      	movs	r2, #0
1000efc8:	4b02      	ldr	r3, [pc, #8]	; (1000efd4 <getchar_b11_timeout+0x4c>)
1000efca:	701a      	strb	r2, [r3, #0]

	return string_input[0];
1000efcc:	4b06      	ldr	r3, [pc, #24]	; (1000efe8 <getchar_b11_timeout+0x60>)
1000efce:	7818      	ldrb	r0, [r3, #0]
}
1000efd0:	bd70      	pop	{r4, r5, r6, pc}
1000efd2:	46c0      	nop			; (mov r8, r8)
1000efd4:	10019fdc 	.word	0x10019fdc
1000efd8:	10019fe4 	.word	0x10019fe4
1000efdc:	1001ac88 	.word	0x1001ac88
1000efe0:	1000d7c5 	.word	0x1000d7c5
1000efe4:	1000ef21 	.word	0x1000ef21
1000efe8:	10019fe0 	.word	0x10019fe0
1000efec:	1000d789 	.word	0x1000d789
1000eff0:	1000ef79 	.word	0x1000ef79

1000eff4 <platform_event_free>:
void platform_event_free(struct platform_event* event);
//struct str_watched_event watched_event;

void platform_event_free(struct platform_event* event)
{
	event->next = platform_event_free_list;
1000eff4:	4b02      	ldr	r3, [pc, #8]	; (1000f000 <platform_event_free+0xc>)
1000eff6:	681a      	ldr	r2, [r3, #0]
1000eff8:	6002      	str	r2, [r0, #0]
	platform_event_free_list = event;
1000effa:	6018      	str	r0, [r3, #0]
}
1000effc:	4770      	bx	lr
1000effe:	46c0      	nop			; (mov r8, r8)
1000f000:	10019fec 	.word	0x10019fec

1000f004 <platform_event_post>:

void platform_event_post(uint16_t event_type, void * data, uint16_t data_len)
{
1000f004:	b530      	push	{r4, r5, lr}
	// get a free event object
	struct platform_event* evt = platform_event_free_list;
1000f006:	4b0b      	ldr	r3, [pc, #44]	; (1000f034 <platform_event_post+0x30>)
1000f008:	681c      	ldr	r4, [r3, #0]
	if(evt != NULL)
1000f00a:	2c00      	cmp	r4, #0
1000f00c:	d011      	beq.n	1000f032 <platform_event_post+0x2e>
	{
		platform_event_free_list = evt->next;
1000f00e:	6825      	ldr	r5, [r4, #0]
1000f010:	601d      	str	r5, [r3, #0]
		
		evt->next = NULL;
1000f012:	2300      	movs	r3, #0
1000f014:	6023      	str	r3, [r4, #0]
		evt->data = data;
1000f016:	60a1      	str	r1, [r4, #8]
		evt->data_len = data_len;
1000f018:	80e2      	strh	r2, [r4, #6]
		evt->event_type = event_type;
1000f01a:	80a0      	strh	r0, [r4, #4]

		if(platform_event_pending_list == NULL)
1000f01c:	4b06      	ldr	r3, [pc, #24]	; (1000f038 <platform_event_post+0x34>)
1000f01e:	681a      	ldr	r2, [r3, #0]
1000f020:	2a00      	cmp	r2, #0
1000f022:	d102      	bne.n	1000f02a <platform_event_post+0x26>
		{
			platform_event_pending_list = evt;
1000f024:	601c      	str	r4, [r3, #0]
1000f026:	e004      	b.n	1000f032 <platform_event_post+0x2e>
		else
		{
			struct platform_event* cur = platform_event_pending_list;
			while(cur->next != NULL)
			{
				cur = cur->next;
1000f028:	001a      	movs	r2, r3
			platform_event_pending_list = evt;
		}
		else
		{
			struct platform_event* cur = platform_event_pending_list;
			while(cur->next != NULL)
1000f02a:	6813      	ldr	r3, [r2, #0]
1000f02c:	2b00      	cmp	r3, #0
1000f02e:	d1fb      	bne.n	1000f028 <platform_event_post+0x24>
			{
				cur = cur->next;
			}
			cur->next = evt;
1000f030:	6014      	str	r4, [r2, #0]
		}
		
		//platform_event_signal();
	}
	
}
1000f032:	bd30      	pop	{r4, r5, pc}
1000f034:	10019fec 	.word	0x10019fec
1000f038:	10019fe8 	.word	0x10019fe8

1000f03c <platform_event_init>:
	return status;
	
}

void platform_event_init()
{
1000f03c:	b570      	push	{r4, r5, r6, lr}
	uint32_t i;
	platform_event_free_list = NULL;
1000f03e:	2300      	movs	r3, #0
1000f040:	4a06      	ldr	r2, [pc, #24]	; (1000f05c <platform_event_init+0x20>)
1000f042:	6013      	str	r3, [r2, #0]
	platform_event_pending_list = NULL;
1000f044:	4a06      	ldr	r2, [pc, #24]	; (1000f060 <platform_event_init+0x24>)
1000f046:	6013      	str	r3, [r2, #0]
1000f048:	4c06      	ldr	r4, [pc, #24]	; (1000f064 <platform_event_init+0x28>)
1000f04a:	0026      	movs	r6, r4
1000f04c:	3678      	adds	r6, #120	; 0x78
	//memset(&watched_event,0,sizeof(struct str_watched_event));
	for(i = 0; i < PLATFORM_EVENT_POOL_DEPTH; i++)
	{
		platform_event_free(&platform_event_pool[i]);
1000f04e:	4d06      	ldr	r5, [pc, #24]	; (1000f068 <platform_event_init+0x2c>)
1000f050:	0020      	movs	r0, r4
1000f052:	47a8      	blx	r5
1000f054:	340c      	adds	r4, #12
{
	uint32_t i;
	platform_event_free_list = NULL;
	platform_event_pending_list = NULL;
	//memset(&watched_event,0,sizeof(struct str_watched_event));
	for(i = 0; i < PLATFORM_EVENT_POOL_DEPTH; i++)
1000f056:	42b4      	cmp	r4, r6
1000f058:	d1fa      	bne.n	1000f050 <platform_event_init+0x14>
	{
		platform_event_free(&platform_event_pool[i]);
	}
}
1000f05a:	bd70      	pop	{r4, r5, r6, pc}
1000f05c:	10019fec 	.word	0x10019fec
1000f060:	10019fe8 	.word	0x10019fe8
1000f064:	10019ff0 	.word	0x10019ff0
1000f068:	1000eff5 	.word	0x1000eff5

1000f06c <at_ke_msg_send>:
	}
	return status;
}

static void at_ke_msg_send(void const * param_ptr)
{
1000f06c:	b570      	push	{r4, r5, r6, lr}
1000f06e:	0004      	movs	r4, r0
	struct ke_msg *kemsg;
	uint8_t osc_en = REG_PL_RD(0x4000B1EC)&0x01;
1000f070:	4b13      	ldr	r3, [pc, #76]	; (1000f0c0 <at_ke_msg_send+0x54>)
1000f072:	681d      	ldr	r5, [r3, #0]
	ke_msg_send(param_ptr);
1000f074:	4b13      	ldr	r3, [pc, #76]	; (1000f0c4 <at_ke_msg_send+0x58>)
1000f076:	681b      	ldr	r3, [r3, #0]
1000f078:	4798      	blx	r3
	kemsg = ke_param2msg(param_ptr);

	if((kemsg != NULL) && (kemsg->dest_id != TASK_INTERNAL_APP)) {
1000f07a:	2c0c      	cmp	r4, #12
1000f07c:	d01f      	beq.n	1000f0be <at_ke_msg_send+0x52>
1000f07e:	3c0c      	subs	r4, #12
1000f080:	88e3      	ldrh	r3, [r4, #6]
1000f082:	2b05      	cmp	r3, #5
1000f084:	d01b      	beq.n	1000f0be <at_ke_msg_send+0x52>
		if(osc_en == 0)
1000f086:	07eb      	lsls	r3, r5, #31
1000f088:	d414      	bmi.n	1000f0b4 <at_ke_msg_send+0x48>
		{
			/* BLE Core is off, issue a wakeup request*/
			/* First, make sure PD4 is powered up and out of reset */
			pwr_enable_arm_wakeup(1<<1);
1000f08a:	4b0f      	ldr	r3, [pc, #60]	; (1000f0c8 <at_ke_msg_send+0x5c>)
1000f08c:	681b      	ldr	r3, [r3, #0]
1000f08e:	2002      	movs	r0, #2
1000f090:	4798      	blx	r3
			pwr_arm_wakeup_req();
1000f092:	4b0e      	ldr	r3, [pc, #56]	; (1000f0cc <at_ke_msg_send+0x60>)
1000f094:	681b      	ldr	r3, [r3, #0]
1000f096:	4798      	blx	r3
			while (pwr_wait_BLE_out_of_reset(3));
1000f098:	4c0d      	ldr	r4, [pc, #52]	; (1000f0d0 <at_ke_msg_send+0x64>)
1000f09a:	2003      	movs	r0, #3
1000f09c:	6823      	ldr	r3, [r4, #0]
1000f09e:	4798      	blx	r3
1000f0a0:	2800      	cmp	r0, #0
1000f0a2:	d1fa      	bne.n	1000f09a <at_ke_msg_send+0x2e>
			pwr_disable_arm_wakeup(1<<1);
1000f0a4:	4b0b      	ldr	r3, [pc, #44]	; (1000f0d4 <at_ke_msg_send+0x68>)
1000f0a6:	681b      	ldr	r3, [r3, #0]
1000f0a8:	3002      	adds	r0, #2
1000f0aa:	4798      	blx	r3
			REG_PL_WR(0x4000B020, 1);
1000f0ac:	2201      	movs	r2, #1
1000f0ae:	4b0a      	ldr	r3, [pc, #40]	; (1000f0d8 <at_ke_msg_send+0x6c>)
1000f0b0:	601a      	str	r2, [r3, #0]
1000f0b2:	e004      	b.n	1000f0be <at_ke_msg_send+0x52>
#endif	//CHIPVERSION_B0
		}
		else
		{
			/*  */
			os_sem_up(gstrFwSem);
1000f0b4:	4b09      	ldr	r3, [pc, #36]	; (1000f0dc <at_ke_msg_send+0x70>)
1000f0b6:	6818      	ldr	r0, [r3, #0]
1000f0b8:	4b09      	ldr	r3, [pc, #36]	; (1000f0e0 <at_ke_msg_send+0x74>)
1000f0ba:	681b      	ldr	r3, [r3, #0]
1000f0bc:	4798      	blx	r3
		}
	}
}
1000f0be:	bd70      	pop	{r4, r5, r6, pc}
1000f0c0:	4000b1ec 	.word	0x4000b1ec
1000f0c4:	1001a098 	.word	0x1001a098
1000f0c8:	1001a090 	.word	0x1001a090
1000f0cc:	1001a0a4 	.word	0x1001a0a4
1000f0d0:	1001a078 	.word	0x1001a078
1000f0d4:	1001a080 	.word	0x1001a080
1000f0d8:	4000b020 	.word	0x4000b020
1000f0dc:	1001a084 	.word	0x1001a084
1000f0e0:	1001a074 	.word	0x1001a074

1000f0e4 <samb11_plf_resume_callback>:
	rwip_prevent_sleep_clear(APP_PREVENT_SLEEP);
	return status;
}

void samb11_plf_resume_callback(void)
{
1000f0e4:	b510      	push	{r4, lr}
	//spi_flash_turn_off();
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0,default_samb11_clock_init[0]);
1000f0e6:	4b06      	ldr	r3, [pc, #24]	; (1000f100 <samb11_plf_resume_callback+0x1c>)
1000f0e8:	4a06      	ldr	r2, [pc, #24]	; (1000f104 <samb11_plf_resume_callback+0x20>)
1000f0ea:	6819      	ldr	r1, [r3, #0]
1000f0ec:	6011      	str	r1, [r2, #0]
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1,default_samb11_clock_init[1]);
1000f0ee:	685a      	ldr	r2, [r3, #4]
1000f0f0:	4b05      	ldr	r3, [pc, #20]	; (1000f108 <samb11_plf_resume_callback+0x24>)
1000f0f2:	601a      	str	r2, [r3, #0]
	if(samb11_app_resume_cb != NULL)
1000f0f4:	4b05      	ldr	r3, [pc, #20]	; (1000f10c <samb11_plf_resume_callback+0x28>)
1000f0f6:	681b      	ldr	r3, [r3, #0]
1000f0f8:	2b00      	cmp	r3, #0
1000f0fa:	d000      	beq.n	1000f0fe <samb11_plf_resume_callback+0x1a>
	{
		samb11_app_resume_cb();
1000f0fc:	4798      	blx	r3
	}
}
1000f0fe:	bd10      	pop	{r4, pc}
1000f100:	1001acd4 	.word	0x1001acd4
1000f104:	4000b00c 	.word	0x4000b00c
1000f108:	4000b010 	.word	0x4000b010
1000f10c:	1001afb0 	.word	0x1001afb0

1000f110 <init_port_list>:
port port_list[LPGPIO_MAX];
uint32_t default_samb11_clock_init[2];
void samb11_plf_resume_callback(void);

void init_port_list(void)
{
1000f110:	b570      	push	{r4, r5, r6, lr}
	uint8_t i;
	memset(port_list,0,sizeof(port_list));
1000f112:	2232      	movs	r2, #50	; 0x32
1000f114:	2100      	movs	r1, #0
1000f116:	480d      	ldr	r0, [pc, #52]	; (1000f14c <init_port_list+0x3c>)
1000f118:	4b0d      	ldr	r3, [pc, #52]	; (1000f150 <init_port_list+0x40>)
1000f11a:	4798      	blx	r3
1000f11c:	2100      	movs	r1, #0
	for(i=0;i<(sizeof(port_list)/sizeof(port_list[0]));i++) {
		port_list[i].bit.gpio_num = i;
1000f11e:	480b      	ldr	r0, [pc, #44]	; (1000f14c <init_port_list+0x3c>)
		port_list[i].bit.available = 1;
1000f120:	2501      	movs	r5, #1
		port_list[i].bit.configured = 0;
1000f122:	2402      	movs	r4, #2
void init_port_list(void)
{
	uint8_t i;
	memset(port_list,0,sizeof(port_list));
	for(i=0;i<(sizeof(port_list)/sizeof(port_list[0]));i++) {
		port_list[i].bit.gpio_num = i;
1000f124:	004a      	lsls	r2, r1, #1
1000f126:	5411      	strb	r1, [r2, r0]
		port_list[i].bit.available = 1;
1000f128:	1882      	adds	r2, r0, r2
1000f12a:	7853      	ldrb	r3, [r2, #1]
1000f12c:	432b      	orrs	r3, r5
		port_list[i].bit.configured = 0;
1000f12e:	b2db      	uxtb	r3, r3
1000f130:	43a3      	bics	r3, r4
1000f132:	7053      	strb	r3, [r2, #1]
1000f134:	3101      	adds	r1, #1

void init_port_list(void)
{
	uint8_t i;
	memset(port_list,0,sizeof(port_list));
	for(i=0;i<(sizeof(port_list)/sizeof(port_list[0]));i++) {
1000f136:	2919      	cmp	r1, #25
1000f138:	d1f4      	bne.n	1000f124 <init_port_list+0x14>
		port_list[i].bit.gpio_num = i;
		port_list[i].bit.available = 1;
		port_list[i].bit.configured = 0;
	}
	//Set the GPIO for SWD is not available
	port_list[0].bit.available = 0;
1000f13a:	4b04      	ldr	r3, [pc, #16]	; (1000f14c <init_port_list+0x3c>)
1000f13c:	785a      	ldrb	r2, [r3, #1]
1000f13e:	3918      	subs	r1, #24
1000f140:	438a      	bics	r2, r1
1000f142:	705a      	strb	r2, [r3, #1]
	port_list[1].bit.available = 0;
1000f144:	78da      	ldrb	r2, [r3, #3]
1000f146:	438a      	bics	r2, r1
1000f148:	70da      	strb	r2, [r3, #3]
	//GPIO 14 is used for Coex and controlled by Firmware
	//port_list[14].bit.available = 0;
}
1000f14a:	bd70      	pop	{r4, r5, r6, pc}
1000f14c:	1001acf0 	.word	0x1001acf0
1000f150:	10015239 	.word	0x10015239

1000f154 <init_clock>:

void init_clock(void)
{
	uint32_t regval;
	regval = REG_PL_RD(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0);
1000f154:	4a06      	ldr	r2, [pc, #24]	; (1000f170 <init_clock+0x1c>)
1000f156:	6811      	ldr	r1, [r2, #0]
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WATCHDOG_1_CLK_EN);
	//disable UART core & interface clocks
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_CORE_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_IF_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_1_CORE_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_1_IF_CLK_EN);
1000f158:	4b06      	ldr	r3, [pc, #24]	; (1000f174 <init_clock+0x20>)
1000f15a:	400b      	ands	r3, r1
	//disable I2C core 1 clocks
	//regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CORTUS_I2C1_CORE_CLK_EN);		//do not disable I2C because I2C driver in ASF will not enable.
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0,regval);
1000f15c:	6013      	str	r3, [r2, #0]
	default_samb11_clock_init[0] = regval;
1000f15e:	4a06      	ldr	r2, [pc, #24]	; (1000f178 <init_clock+0x24>)
1000f160:	6013      	str	r3, [r2, #0]
	
	regval = REG_PL_RD(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1);
1000f162:	4906      	ldr	r1, [pc, #24]	; (1000f17c <init_clock+0x28>)
1000f164:	6808      	ldr	r0, [r1, #0]
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_4_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_5_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_6_CLK_EN);
	//disable SPI SCK Phase int clock 
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI0_SCK_PHASE_INT_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI1_SCK_PHASE_INT_CLK_EN);
1000f166:	4b06      	ldr	r3, [pc, #24]	; (1000f180 <init_clock+0x2c>)
1000f168:	4003      	ands	r3, r0
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1,regval);
1000f16a:	600b      	str	r3, [r1, #0]
	default_samb11_clock_init[1] = regval;
1000f16c:	6053      	str	r3, [r2, #4]
	//ARM debugger
	
	//store default values
}
1000f16e:	4770      	bx	lr
1000f170:	4000b00c 	.word	0x4000b00c
1000f174:	fffe0fd3 	.word	0xfffe0fd3
1000f178:	1001acd4 	.word	0x1001acd4
1000f17c:	4000b010 	.word	0x4000b010
1000f180:	ffffe7c0 	.word	0xffffe7c0

1000f184 <platform_driver_init>:

plf_drv_status platform_driver_init()
{
1000f184:	b5f0      	push	{r4, r5, r6, r7, lr}
1000f186:	4657      	mov	r7, sl
1000f188:	464e      	mov	r6, r9
1000f18a:	4645      	mov	r5, r8
1000f18c:	b4e0      	push	{r5, r6, r7}
	plf_drv_status status = STATUS_NOT_INITIALIZED;
	if((platform_initialized == 0) || (platform_initialized != 1)) {
1000f18e:	4b4f      	ldr	r3, [pc, #316]	; (1000f2cc <platform_driver_init+0x148>)
1000f190:	781b      	ldrb	r3, [r3, #0]
1000f192:	2b00      	cmp	r3, #0
1000f194:	d004      	beq.n	1000f1a0 <platform_driver_init+0x1c>
1000f196:	4b4d      	ldr	r3, [pc, #308]	; (1000f2cc <platform_driver_init+0x148>)
1000f198:	781b      	ldrb	r3, [r3, #0]
1000f19a:	2b01      	cmp	r3, #1
1000f19c:	d100      	bne.n	1000f1a0 <platform_driver_init+0x1c>
1000f19e:	e08c      	b.n	1000f2ba <platform_driver_init+0x136>
		init_port_list();
1000f1a0:	4b4b      	ldr	r3, [pc, #300]	; (1000f2d0 <platform_driver_init+0x14c>)
1000f1a2:	4798      	blx	r3
		init_clock();
1000f1a4:	4b4b      	ldr	r3, [pc, #300]	; (1000f2d4 <platform_driver_init+0x150>)
1000f1a6:	4798      	blx	r3
		// Initialize the ble stack message handler to NULL
		ble_stack_message_handler = NULL;
1000f1a8:	2300      	movs	r3, #0
1000f1aa:	4698      	mov	r8, r3
1000f1ac:	4b4a      	ldr	r3, [pc, #296]	; (1000f2d8 <platform_driver_init+0x154>)
1000f1ae:	4642      	mov	r2, r8
1000f1b0:	601a      	str	r2, [r3, #0]

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000f1b2:	4c4a      	ldr	r4, [pc, #296]	; (1000f2dc <platform_driver_init+0x158>)
1000f1b4:	2380      	movs	r3, #128	; 0x80
1000f1b6:	2280      	movs	r2, #128	; 0x80
1000f1b8:	0412      	lsls	r2, r2, #16
1000f1ba:	4692      	mov	sl, r2
1000f1bc:	50e2      	str	r2, [r4, r3]
1000f1be:	2280      	movs	r2, #128	; 0x80
1000f1c0:	0452      	lsls	r2, r2, #17
1000f1c2:	4691      	mov	r9, r2
1000f1c4:	50e2      	str	r2, [r4, r3]
#ifdef CHIPVERSION_B0
		NVIC_DisableIRQ(GPIO0_IRQn);
		NVIC_DisableIRQ(GPIO1_IRQn);
		/* NVIC_DisableIRQ(PORT0_COMB_IRQn); */
		/* NVIC_DisableIRQ(PORT1_COMB_IRQn); */
		platform_register_isr = (uint8_t (*)(uint8_t ,void *))0x000007d7;
1000f1c6:	4d46      	ldr	r5, [pc, #280]	; (1000f2e0 <platform_driver_init+0x15c>)
1000f1c8:	4b46      	ldr	r3, [pc, #280]	; (1000f2e4 <platform_driver_init+0x160>)
1000f1ca:	602b      	str	r3, [r5, #0]
		platform_unregister_isr = (uint8_t (*)(uint8_t ))0x000007bd;
1000f1cc:	4b46      	ldr	r3, [pc, #280]	; (1000f2e8 <platform_driver_init+0x164>)
1000f1ce:	4a47      	ldr	r2, [pc, #284]	; (1000f2ec <platform_driver_init+0x168>)
1000f1d0:	6013      	str	r3, [r2, #0]
		handle_ext_wakeup_isr = (void (*)(void))0x1bc51;
1000f1d2:	4947      	ldr	r1, [pc, #284]	; (1000f2f0 <platform_driver_init+0x16c>)
1000f1d4:	4a47      	ldr	r2, [pc, #284]	; (1000f2f4 <platform_driver_init+0x170>)
1000f1d6:	6011      	str	r1, [r2, #0]
		gapm_get_task_from_id = (ke_task_id_t (*)(ke_msg_id_t))(*((unsigned int *)0x100400bc));
1000f1d8:	4a47      	ldr	r2, [pc, #284]	; (1000f2f8 <platform_driver_init+0x174>)
1000f1da:	6811      	ldr	r1, [r2, #0]
1000f1dc:	4a47      	ldr	r2, [pc, #284]	; (1000f2fc <platform_driver_init+0x178>)
1000f1de:	6011      	str	r1, [r2, #0]
		gapm_get_id_from_task = (ke_task_id_t (*)(ke_msg_id_t))(*((unsigned int *)0x100400b8));
1000f1e0:	4a47      	ldr	r2, [pc, #284]	; (1000f300 <platform_driver_init+0x17c>)
1000f1e2:	6811      	ldr	r1, [r2, #0]
1000f1e4:	4a47      	ldr	r2, [pc, #284]	; (1000f304 <platform_driver_init+0x180>)
1000f1e6:	6011      	str	r1, [r2, #0]
		rwip_prevent_sleep_set = (void (*)(uint16_t))0x0001b99f;
1000f1e8:	4947      	ldr	r1, [pc, #284]	; (1000f308 <platform_driver_init+0x184>)
1000f1ea:	4a48      	ldr	r2, [pc, #288]	; (1000f30c <platform_driver_init+0x188>)
1000f1ec:	6011      	str	r1, [r2, #0]
		rwip_prevent_sleep_clear = (void (*)(uint16_t))0x0001b9db;
1000f1ee:	4948      	ldr	r1, [pc, #288]	; (1000f310 <platform_driver_init+0x18c>)
1000f1f0:	4a48      	ldr	r2, [pc, #288]	; (1000f314 <platform_driver_init+0x190>)
1000f1f2:	6011      	str	r1, [r2, #0]
		apps_resume_cb = (uint32_t *)0x1004003c;
1000f1f4:	4f48      	ldr	r7, [pc, #288]	; (1000f318 <platform_driver_init+0x194>)
1000f1f6:	4a49      	ldr	r2, [pc, #292]	; (1000f31c <platform_driver_init+0x198>)
1000f1f8:	603a      	str	r2, [r7, #0]
		actualfreq = (uint32_t *)0x10041FC0; /* set to NULL for now as clock calibration is disabled for the time being */  /*(uint32_t *)0x10006bd8;*/
1000f1fa:	4949      	ldr	r1, [pc, #292]	; (1000f320 <platform_driver_init+0x19c>)
1000f1fc:	4a49      	ldr	r2, [pc, #292]	; (1000f324 <platform_driver_init+0x1a0>)
1000f1fe:	6011      	str	r1, [r2, #0]
		updateuartbr_fp = (void (*)())0x10041FC4;
1000f200:	4949      	ldr	r1, [pc, #292]	; (1000f328 <platform_driver_init+0x1a4>)
1000f202:	4a4a      	ldr	r2, [pc, #296]	; (1000f32c <platform_driver_init+0x1a8>)
1000f204:	6011      	str	r1, [r2, #0]
		wakeup_source_active_cb = (uint32_t *)0x10041FD4;
1000f206:	4e4a      	ldr	r6, [pc, #296]	; (1000f330 <platform_driver_init+0x1ac>)
1000f208:	4a4a      	ldr	r2, [pc, #296]	; (1000f334 <platform_driver_init+0x1b0>)
1000f20a:	6032      	str	r2, [r6, #0]
		wakeup_event_pending = (uint32_t *)0x10041FD8;
1000f20c:	494a      	ldr	r1, [pc, #296]	; (1000f338 <platform_driver_init+0x1b4>)
1000f20e:	4a4b      	ldr	r2, [pc, #300]	; (1000f33c <platform_driver_init+0x1b8>)
1000f210:	6011      	str	r1, [r2, #0]
		/* power APIs */
		pwr_enable_arm_wakeup = (void (*)(uint32_t wakeup_domain))0x0001cbe9;
1000f212:	494b      	ldr	r1, [pc, #300]	; (1000f340 <platform_driver_init+0x1bc>)
1000f214:	4a4b      	ldr	r2, [pc, #300]	; (1000f344 <platform_driver_init+0x1c0>)
1000f216:	6011      	str	r1, [r2, #0]
		pwr_disable_arm_wakeup = (void (*)(uint32_t wakeup_domain))0x0001cd8f;
1000f218:	494b      	ldr	r1, [pc, #300]	; (1000f348 <platform_driver_init+0x1c4>)
1000f21a:	4a4c      	ldr	r2, [pc, #304]	; (1000f34c <platform_driver_init+0x1c8>)
1000f21c:	6011      	str	r1, [r2, #0]
		pwr_arm_wakeup_req = (int (*)(void))0x0001cea3;
1000f21e:	494c      	ldr	r1, [pc, #304]	; (1000f350 <platform_driver_init+0x1cc>)
1000f220:	4a4c      	ldr	r2, [pc, #304]	; (1000f354 <platform_driver_init+0x1d0>)
1000f222:	6011      	str	r1, [r2, #0]
		pwr_wait_BLE_out_of_reset = (int (*)(uint32_t threshold))0x0001cbcf;
1000f224:	494c      	ldr	r1, [pc, #304]	; (1000f358 <platform_driver_init+0x1d4>)
1000f226:	4a4d      	ldr	r2, [pc, #308]	; (1000f35c <platform_driver_init+0x1d8>)
1000f228:	6011      	str	r1, [r2, #0]
		NVIC_DisableIRQ(PORT1_ALL_IRQn);
		platform_register_isr = register_isr;
		platform_unregister_isr = unregister_isr;
		handle_ext_wakeup_isr = (void (*)(void))0x14085;
#endif
		platform_unregister_isr(GPIO1_COMBINED_VECTOR_TABLE_INDEX);
1000f22a:	2028      	movs	r0, #40	; 0x28
1000f22c:	4798      	blx	r3
		platform_register_isr(GPIO1_COMBINED_VECTOR_TABLE_INDEX,(void*)PORT1_COMB_Handler);
1000f22e:	494c      	ldr	r1, [pc, #304]	; (1000f360 <platform_driver_init+0x1dc>)
1000f230:	2028      	movs	r0, #40	; 0x28
1000f232:	682b      	ldr	r3, [r5, #0]
1000f234:	4798      	blx	r3
		platform_register_isr(GPIO0_COMBINED_VECTOR_TABLE_INDEX,(void*)gpio0_combined_isr_handler);
1000f236:	682b      	ldr	r3, [r5, #0]
1000f238:	494a      	ldr	r1, [pc, #296]	; (1000f364 <platform_driver_init+0x1e0>)
1000f23a:	2027      	movs	r0, #39	; 0x27
1000f23c:	4798      	blx	r3
		//gstrFwSem               = (void *)0x100004e4;
		//NMI_MsgQueueRecv = (int (*)(void *, void ** )) 0x00017f67;
		//InternalAppMsgQHandle = (void *)0x10001158;
		//ke_free = (void (*)(void *)) 0x00015e3d;
#elif CHIPVERSION_B0
		ke_msg_send 	= (void (*)(void const *))(*((unsigned int *)0x100400e4));
1000f23e:	4b4a      	ldr	r3, [pc, #296]	; (1000f368 <platform_driver_init+0x1e4>)
1000f240:	681a      	ldr	r2, [r3, #0]
1000f242:	4b4a      	ldr	r3, [pc, #296]	; (1000f36c <platform_driver_init+0x1e8>)
1000f244:	601a      	str	r2, [r3, #0]
		ke_msg_alloc 	= (void* (*)(ke_msg_id_t const id, ke_task_id_t const dest_id,
1000f246:	4a4a      	ldr	r2, [pc, #296]	; (1000f370 <platform_driver_init+0x1ec>)
1000f248:	4b4a      	ldr	r3, [pc, #296]	; (1000f374 <platform_driver_init+0x1f0>)
1000f24a:	601a      	str	r2, [r3, #0]
										ke_task_id_t const src_id, uint16_t const param_len) )0x00019fe9;
		os_sem_up 		= (int (*)(void*))0x0001dbdd;
1000f24c:	4a4a      	ldr	r2, [pc, #296]	; (1000f378 <platform_driver_init+0x1f4>)
1000f24e:	4b4b      	ldr	r3, [pc, #300]	; (1000f37c <platform_driver_init+0x1f8>)
1000f250:	601a      	str	r2, [r3, #0]
		os_sem_down		= (int (*)(void*))0x0001dc5b;
1000f252:	4a4b      	ldr	r2, [pc, #300]	; (1000f380 <platform_driver_init+0x1fc>)
1000f254:	4b4b      	ldr	r3, [pc, #300]	; (1000f384 <platform_driver_init+0x200>)
1000f256:	601a      	str	r2, [r3, #0]
		gstrFwSem 		= (void*)0x100405ec;
1000f258:	4a4b      	ldr	r2, [pc, #300]	; (1000f388 <platform_driver_init+0x204>)
1000f25a:	4b4c      	ldr	r3, [pc, #304]	; (1000f38c <platform_driver_init+0x208>)
1000f25c:	601a      	str	r2, [r3, #0]
		NMI_MsgQueueRecv = (int(*)(void*, void ** ))0x0001d5e3;
1000f25e:	4a4c      	ldr	r2, [pc, #304]	; (1000f390 <platform_driver_init+0x20c>)
1000f260:	4b4c      	ldr	r3, [pc, #304]	; (1000f394 <platform_driver_init+0x210>)
1000f262:	601a      	str	r2, [r3, #0]
		InternalAppMsgQHandle = (void*)0x10040c20;
1000f264:	4a4c      	ldr	r2, [pc, #304]	; (1000f398 <platform_driver_init+0x214>)
1000f266:	4b4d      	ldr	r3, [pc, #308]	; (1000f39c <platform_driver_init+0x218>)
1000f268:	601a      	str	r2, [r3, #0]
		ke_free = (void(*)(void*))0x00019f09;
1000f26a:	4a4d      	ldr	r2, [pc, #308]	; (1000f3a0 <platform_driver_init+0x21c>)
1000f26c:	4b4d      	ldr	r3, [pc, #308]	; (1000f3a4 <platform_driver_init+0x220>)
1000f26e:	601a      	str	r2, [r3, #0]
#endif
		memset(rx_buffer,0,sizeof(rx_buffer));
1000f270:	22a0      	movs	r2, #160	; 0xa0
1000f272:	0092      	lsls	r2, r2, #2
1000f274:	2100      	movs	r1, #0
1000f276:	484c      	ldr	r0, [pc, #304]	; (1000f3a8 <platform_driver_init+0x224>)
1000f278:	4b4c      	ldr	r3, [pc, #304]	; (1000f3ac <platform_driver_init+0x228>)
1000f27a:	4798      	blx	r3
		plf_event_buff_index = PLF_EVENT_BUFFER_START_INDEX;
1000f27c:	2280      	movs	r2, #128	; 0x80
1000f27e:	0092      	lsls	r2, r2, #2
1000f280:	4b4b      	ldr	r3, [pc, #300]	; (1000f3b0 <platform_driver_init+0x22c>)
1000f282:	801a      	strh	r2, [r3, #0]
		platform_event_init();
1000f284:	4b4b      	ldr	r3, [pc, #300]	; (1000f3b4 <platform_driver_init+0x230>)
1000f286:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000f288:	4653      	mov	r3, sl
1000f28a:	6023      	str	r3, [r4, #0]
1000f28c:	464b      	mov	r3, r9
1000f28e:	6023      	str	r3, [r4, #0]
		
#ifndef CHIPVERSION_B0		
		// spi_flash clock fix.
		spi_flash_clock_init();
#endif
		samb11_app_resume_cb = NULL;
1000f290:	4b49      	ldr	r3, [pc, #292]	; (1000f3b8 <platform_driver_init+0x234>)
1000f292:	4642      	mov	r2, r8
1000f294:	601a      	str	r2, [r3, #0]
		*apps_resume_cb = (uint32_t)((resume_callback)samb11_plf_resume_callback);
1000f296:	683b      	ldr	r3, [r7, #0]
1000f298:	4a48      	ldr	r2, [pc, #288]	; (1000f3bc <platform_driver_init+0x238>)
1000f29a:	601a      	str	r2, [r3, #0]
		*wakeup_source_active_cb = (uint32_t)((wakeup_source_active_callback)wakeup_active_event_callback);
1000f29c:	6833      	ldr	r3, [r6, #0]
1000f29e:	4a48      	ldr	r2, [pc, #288]	; (1000f3c0 <platform_driver_init+0x23c>)
1000f2a0:	601a      	str	r2, [r3, #0]
		wakeup_int_unregister_callback(0);
1000f2a2:	2000      	movs	r0, #0
1000f2a4:	4c47      	ldr	r4, [pc, #284]	; (1000f3c4 <platform_driver_init+0x240>)
1000f2a6:	47a0      	blx	r4
		wakeup_int_unregister_callback(1);
1000f2a8:	2001      	movs	r0, #1
1000f2aa:	47a0      	blx	r4
		wakeup_int_unregister_callback(2);
1000f2ac:	2002      	movs	r0, #2
1000f2ae:	47a0      	blx	r4
		platform_initialized = 1;
1000f2b0:	2201      	movs	r2, #1
1000f2b2:	4b06      	ldr	r3, [pc, #24]	; (1000f2cc <platform_driver_init+0x148>)
1000f2b4:	701a      	strb	r2, [r3, #0]
		status = STATUS_SUCCESS;
1000f2b6:	2000      	movs	r0, #0
1000f2b8:	e003      	b.n	1000f2c2 <platform_driver_init+0x13e>
	}
	else {
		platform_initialized = 1;
1000f2ba:	2201      	movs	r2, #1
1000f2bc:	4b03      	ldr	r3, [pc, #12]	; (1000f2cc <platform_driver_init+0x148>)
1000f2be:	701a      	strb	r2, [r3, #0]
		status = STATUS_ALREADY_INITIALIZED;
1000f2c0:	2001      	movs	r0, #1
	}
	return status;
}
1000f2c2:	bc1c      	pop	{r2, r3, r4}
1000f2c4:	4690      	mov	r8, r2
1000f2c6:	4699      	mov	r9, r3
1000f2c8:	46a2      	mov	sl, r4
1000f2ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000f2cc:	1001a07c 	.word	0x1001a07c
1000f2d0:	1000f111 	.word	0x1000f111
1000f2d4:	1000f155 	.word	0x1000f155
1000f2d8:	1001a09c 	.word	0x1001a09c
1000f2dc:	e000e100 	.word	0xe000e100
1000f2e0:	1001afa4 	.word	0x1001afa4
1000f2e4:	000007d7 	.word	0x000007d7
1000f2e8:	000007bd 	.word	0x000007bd
1000f2ec:	1001ace0 	.word	0x1001ace0
1000f2f0:	0001bc51 	.word	0x0001bc51
1000f2f4:	1001afa8 	.word	0x1001afa8
1000f2f8:	100400bc 	.word	0x100400bc
1000f2fc:	1001a070 	.word	0x1001a070
1000f300:	100400b8 	.word	0x100400b8
1000f304:	1001a06c 	.word	0x1001a06c
1000f308:	0001b99f 	.word	0x0001b99f
1000f30c:	1001acdc 	.word	0x1001acdc
1000f310:	0001b9db 	.word	0x0001b9db
1000f314:	1001ace8 	.word	0x1001ace8
1000f318:	1001afb8 	.word	0x1001afb8
1000f31c:	1004003c 	.word	0x1004003c
1000f320:	10041fc0 	.word	0x10041fc0
1000f324:	1001acec 	.word	0x1001acec
1000f328:	10041fc4 	.word	0x10041fc4
1000f32c:	1001afb4 	.word	0x1001afb4
1000f330:	1001afac 	.word	0x1001afac
1000f334:	10041fd4 	.word	0x10041fd4
1000f338:	10041fd8 	.word	0x10041fd8
1000f33c:	1001ace4 	.word	0x1001ace4
1000f340:	0001cbe9 	.word	0x0001cbe9
1000f344:	1001a090 	.word	0x1001a090
1000f348:	0001cd8f 	.word	0x0001cd8f
1000f34c:	1001a080 	.word	0x1001a080
1000f350:	0001cea3 	.word	0x0001cea3
1000f354:	1001a0a4 	.word	0x1001a0a4
1000f358:	0001cbcf 	.word	0x0001cbcf
1000f35c:	1001a078 	.word	0x1001a078
1000f360:	1000f80d 	.word	0x1000f80d
1000f364:	1000f7a1 	.word	0x1000f7a1
1000f368:	100400e4 	.word	0x100400e4
1000f36c:	1001a098 	.word	0x1001a098
1000f370:	00019fe9 	.word	0x00019fe9
1000f374:	1001a0a8 	.word	0x1001a0a8
1000f378:	0001dbdd 	.word	0x0001dbdd
1000f37c:	1001a074 	.word	0x1001a074
1000f380:	0001dc5b 	.word	0x0001dc5b
1000f384:	1001a088 	.word	0x1001a088
1000f388:	100405ec 	.word	0x100405ec
1000f38c:	1001a084 	.word	0x1001a084
1000f390:	0001d5e3 	.word	0x0001d5e3
1000f394:	1001a094 	.word	0x1001a094
1000f398:	10040c20 	.word	0x10040c20
1000f39c:	1001a0ac 	.word	0x1001a0ac
1000f3a0:	00019f09 	.word	0x00019f09
1000f3a4:	1001a068 	.word	0x1001a068
1000f3a8:	1001ad24 	.word	0x1001ad24
1000f3ac:	10015239 	.word	0x10015239
1000f3b0:	1001afbc 	.word	0x1001afbc
1000f3b4:	1000f03d 	.word	0x1000f03d
1000f3b8:	1001afb0 	.word	0x1001afb0
1000f3bc:	1000f0e5 	.word	0x1000f0e5
1000f3c0:	1000f869 	.word	0x1000f869
1000f3c4:	1000f851 	.word	0x1000f851

1000f3c8 <platform_register_ble_msg_handler>:


plf_drv_status platform_register_ble_msg_handler(platform_interface_callback fp)
{
	plf_drv_status status;
	if(platform_initialized == 1) {
1000f3c8:	4b04      	ldr	r3, [pc, #16]	; (1000f3dc <platform_register_ble_msg_handler+0x14>)
1000f3ca:	781a      	ldrb	r2, [r3, #0]
		ble_stack_message_handler = fp;
		status = STATUS_SUCCESS;
	}
	else {
		status = STATUS_NOT_INITIALIZED;
1000f3cc:	2305      	movs	r3, #5


plf_drv_status platform_register_ble_msg_handler(platform_interface_callback fp)
{
	plf_drv_status status;
	if(platform_initialized == 1) {
1000f3ce:	2a01      	cmp	r2, #1
1000f3d0:	d102      	bne.n	1000f3d8 <platform_register_ble_msg_handler+0x10>
		ble_stack_message_handler = fp;
1000f3d2:	4b03      	ldr	r3, [pc, #12]	; (1000f3e0 <platform_register_ble_msg_handler+0x18>)
1000f3d4:	6018      	str	r0, [r3, #0]
		status = STATUS_SUCCESS;
1000f3d6:	2300      	movs	r3, #0
	}
	else {
		status = STATUS_NOT_INITIALIZED;
	}
	return status;
}
1000f3d8:	0018      	movs	r0, r3
1000f3da:	4770      	bx	lr
1000f3dc:	1001a07c 	.word	0x1001a07c
1000f3e0:	1001a09c 	.word	0x1001a09c

1000f3e4 <platform_interface_send>:


//Sends a message through RW kernel messaging API
//struct ke_msg * p_msg;
void platform_interface_send(uint8_t* data, uint32_t len)
{
1000f3e4:	b570      	push	{r4, r5, r6, lr}
1000f3e6:	0004      	movs	r4, r0
	void* params;
	
	#if (CHIPVERSION_B0)
	ke_task_id_t dest_id;
	dest_id = p_msg_hdr->dest_id;
	if(gapm_get_task_from_id != NULL)
1000f3e8:	4b0e      	ldr	r3, [pc, #56]	; (1000f424 <platform_interface_send+0x40>)
1000f3ea:	681b      	ldr	r3, [r3, #0]
1000f3ec:	2b00      	cmp	r3, #0
1000f3ee:	d002      	beq.n	1000f3f6 <platform_interface_send+0x12>
		p_msg_hdr->dest_id = gapm_get_task_from_id(dest_id);
1000f3f0:	8840      	ldrh	r0, [r0, #2]
1000f3f2:	4798      	blx	r3
1000f3f4:	8060      	strh	r0, [r4, #2]
	#endif	//CHIPVERSION_B0
	// Allocate the kernel message
	params = ke_msg_alloc(p_msg_hdr->id, p_msg_hdr->dest_id, p_msg_hdr->src_id, p_msg_hdr->param_len);
1000f3f6:	88e3      	ldrh	r3, [r4, #6]
1000f3f8:	88a2      	ldrh	r2, [r4, #4]
1000f3fa:	8861      	ldrh	r1, [r4, #2]
1000f3fc:	8820      	ldrh	r0, [r4, #0]
1000f3fe:	4d0a      	ldr	r5, [pc, #40]	; (1000f428 <platform_interface_send+0x44>)
1000f400:	682d      	ldr	r5, [r5, #0]
1000f402:	47a8      	blx	r5
1000f404:	0005      	movs	r5, r0
											
	//no params
	if (p_msg_hdr->param_len == 0)
1000f406:	88e2      	ldrh	r2, [r4, #6]
1000f408:	2a00      	cmp	r2, #0
1000f40a:	d102      	bne.n	1000f412 <platform_interface_send+0x2e>
	{
		// Send message directly
		at_ke_msg_send(params);
1000f40c:	4b07      	ldr	r3, [pc, #28]	; (1000f42c <platform_interface_send+0x48>)
1000f40e:	4798      	blx	r3
1000f410:	e006      	b.n	1000f420 <platform_interface_send+0x3c>
	}
	else
	{
		//copy params
		memcpy(params,&(data[KE_MSG_HDR_LENGTH]),p_msg_hdr->param_len);
1000f412:	0021      	movs	r1, r4
1000f414:	3108      	adds	r1, #8
1000f416:	4b06      	ldr	r3, [pc, #24]	; (1000f430 <platform_interface_send+0x4c>)
1000f418:	4798      	blx	r3
		// Send the kernel message
		at_ke_msg_send(params);
1000f41a:	0028      	movs	r0, r5
1000f41c:	4b03      	ldr	r3, [pc, #12]	; (1000f42c <platform_interface_send+0x48>)
1000f41e:	4798      	blx	r3
	}
}
1000f420:	bd70      	pop	{r4, r5, r6, pc}
1000f422:	46c0      	nop			; (mov r8, r8)
1000f424:	1001a070 	.word	0x1001a070
1000f428:	1001a0a8 	.word	0x1001a0a8
1000f42c:	1000f06d 	.word	0x1000f06d
1000f430:	10015227 	.word	0x10015227

1000f434 <send_plf_int_msg_ind>:

void send_plf_int_msg_ind(uint8_t intr_index, uint8_t callback_id, void *data, uint16_t data_len)
{
1000f434:	b570      	push	{r4, r5, r6, lr}
1000f436:	0015      	movs	r5, r2
1000f438:	001c      	movs	r4, r3
	void* params;
//#if (CHIPVERSION_A4)	
	//os_sem_up(gstrFwSem);
//#endif
	// Allocate the kernel message
	params = ke_msg_alloc(PERIPHERAL_INTERRUPT_EVENT, TASK_INTERNAL_APP, BUILD_INTR_SRCID(callback_id,intr_index), data_len);
1000f43a:	020a      	lsls	r2, r1, #8
1000f43c:	4302      	orrs	r2, r0
1000f43e:	4b0a      	ldr	r3, [pc, #40]	; (1000f468 <send_plf_int_msg_ind+0x34>)
1000f440:	681e      	ldr	r6, [r3, #0]
1000f442:	0023      	movs	r3, r4
1000f444:	2105      	movs	r1, #5
1000f446:	20a0      	movs	r0, #160	; 0xa0
1000f448:	00c0      	lsls	r0, r0, #3
1000f44a:	47b0      	blx	r6
1000f44c:	1e06      	subs	r6, r0, #0
											
	//no params
	if(params != NULL) {
1000f44e:	d00a      	beq.n	1000f466 <send_plf_int_msg_ind+0x32>
		if((data_len != 0) && (NULL != data))
1000f450:	2c00      	cmp	r4, #0
1000f452:	d005      	beq.n	1000f460 <send_plf_int_msg_ind+0x2c>
1000f454:	2d00      	cmp	r5, #0
1000f456:	d003      	beq.n	1000f460 <send_plf_int_msg_ind+0x2c>
		{
			//copy params
			memcpy(params, data, data_len);
1000f458:	0022      	movs	r2, r4
1000f45a:	0029      	movs	r1, r5
1000f45c:	4b03      	ldr	r3, [pc, #12]	; (1000f46c <send_plf_int_msg_ind+0x38>)
1000f45e:	4798      	blx	r3
		}
		// Send the kernel message
		at_ke_msg_send(params);
1000f460:	0030      	movs	r0, r6
1000f462:	4b03      	ldr	r3, [pc, #12]	; (1000f470 <send_plf_int_msg_ind+0x3c>)
1000f464:	4798      	blx	r3
	}
}
1000f466:	bd70      	pop	{r4, r5, r6, pc}
1000f468:	1001a0a8 	.word	0x1001a0a8
1000f46c:	10015227 	.word	0x10015227
1000f470:	1000f06d 	.word	0x1000f06d

1000f474 <platform_event_wait>:
//Waits on InternalAppMsgQHandle Queue
// This function won't busy wait if nothing on queue but will down the semaphore and go to a blocking state
// The OS then will move control to other higher priority tasks and will only return if these tasks finish processing AND the queue has received 
//a msg
plf_drv_status platform_event_wait(uint32_t timeout)
{
1000f474:	b5f0      	push	{r4, r5, r6, r7, lr}
1000f476:	465f      	mov	r7, fp
1000f478:	4656      	mov	r6, sl
1000f47a:	464d      	mov	r5, r9
1000f47c:	4644      	mov	r4, r8
1000f47e:	b4f0      	push	{r4, r5, r6, r7}
1000f480:	b087      	sub	sp, #28
	static struct ke_msg* rcv_msg;
	static struct ke_msghdr	*ke_msg_hdr;
	plf_drv_status status = STATUS_SUCCESS;
	uint8_t bEventTimeoutFlag = 0;
	uint8_t bLoopAgain = 0;
	if(((uint32_t)-1 != timeout) && ((uint32_t)0 < timeout))
1000f482:	1e44      	subs	r4, r0, #1
plf_drv_status platform_event_wait(uint32_t timeout)
{
	static struct ke_msg* rcv_msg;
	static struct ke_msghdr	*ke_msg_hdr;
	plf_drv_status status = STATUS_SUCCESS;
	uint8_t bEventTimeoutFlag = 0;
1000f484:	2300      	movs	r3, #0
1000f486:	4699      	mov	r9, r3
	uint8_t bLoopAgain = 0;
	if(((uint32_t)-1 != timeout) && ((uint32_t)0 < timeout))
1000f488:	1ce3      	adds	r3, r4, #3
1000f48a:	d81c      	bhi.n	1000f4c6 <platform_event_wait+0x52>
	return num_of_freed;
}

static void platform_start_event_timeout(uint32_t timeout)
{
	uint8_t msg[8+5] = {0};
1000f48c:	220d      	movs	r2, #13
1000f48e:	2100      	movs	r1, #0
1000f490:	a802      	add	r0, sp, #8
1000f492:	4b82      	ldr	r3, [pc, #520]	; (1000f69c <platform_event_wait+0x228>)
1000f494:	4798      	blx	r3
	uint8_t u16TxLen = 0;

	msg[u16TxLen++] = ((DBG_KE_TIMER_REQ) & 0x00FF );
1000f496:	2333      	movs	r3, #51	; 0x33
1000f498:	aa02      	add	r2, sp, #8
1000f49a:	7013      	strb	r3, [r2, #0]
	msg[u16TxLen++] = (((DBG_KE_TIMER_REQ)>>8) & 0x00FF );
1000f49c:	3b30      	subs	r3, #48	; 0x30
1000f49e:	7053      	strb	r3, [r2, #1]
	msg[u16TxLen++] = ((TASK_DBG) & 0x00FF );
1000f4a0:	7093      	strb	r3, [r2, #2]
	msg[u16TxLen++] = (((TASK_DBG)>>8) & 0x00FF );	
	msg[u16TxLen++] = ((TASK_INTERNAL_APP) & 0x00FF );
1000f4a2:	3302      	adds	r3, #2
1000f4a4:	7113      	strb	r3, [r2, #4]
	msg[u16TxLen++] = (((TASK_INTERNAL_APP)>>8) & 0x00FF );
	msg[u16TxLen++] = ((5) & 0x00FF );
1000f4a6:	7193      	strb	r3, [r2, #6]
	msg[u16TxLen++] = (((5)>>8) & 0x00FF );
	
	msg[u16TxLen++] = (uint8_t)((timeout) & 0x00FF );
1000f4a8:	7214      	strb	r4, [r2, #8]
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 8) & 0x00FF) ;
1000f4aa:	0a23      	lsrs	r3, r4, #8
1000f4ac:	7253      	strb	r3, [r2, #9]
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 16) & 0x00FF);
1000f4ae:	0c23      	lsrs	r3, r4, #16
1000f4b0:	7293      	strb	r3, [r2, #10]
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 24) & 0x00FF);
1000f4b2:	0e24      	lsrs	r4, r4, #24
1000f4b4:	72d4      	strb	r4, [r2, #11]
	
	msg[u16TxLen++] = ((1) & 0x00FF );
1000f4b6:	2301      	movs	r3, #1
1000f4b8:	7313      	strb	r3, [r2, #12]
	
	platform_interface_send(msg, u16TxLen);
1000f4ba:	210d      	movs	r1, #13
1000f4bc:	0010      	movs	r0, r2
1000f4be:	4b78      	ldr	r3, [pc, #480]	; (1000f6a0 <platform_event_wait+0x22c>)
1000f4c0:	4798      	blx	r3
	uint8_t bEventTimeoutFlag = 0;
	uint8_t bLoopAgain = 0;
	if(((uint32_t)-1 != timeout) && ((uint32_t)0 < timeout))
	{			
		platform_start_event_timeout(timeout-1);
		bEventTimeoutFlag = 1;
1000f4c2:	2301      	movs	r3, #1
1000f4c4:	4699      	mov	r9, r3
1000f4c6:	2400      	movs	r4, #0
1000f4c8:	2500      	movs	r5, #0
	}

	do {
		if(NMI_MsgQueueRecv(InternalAppMsgQHandle, (void**)&rcv_msg) == STATUS_SUCCESS)
1000f4ca:	4f76      	ldr	r7, [pc, #472]	; (1000f6a4 <platform_event_wait+0x230>)
1000f4cc:	4e76      	ldr	r6, [pc, #472]	; (1000f6a8 <platform_event_wait+0x234>)
1000f4ce:	4977      	ldr	r1, [pc, #476]	; (1000f6ac <platform_event_wait+0x238>)
1000f4d0:	6838      	ldr	r0, [r7, #0]
1000f4d2:	6833      	ldr	r3, [r6, #0]
1000f4d4:	4798      	blx	r3
1000f4d6:	2800      	cmp	r0, #0
1000f4d8:	d000      	beq.n	1000f4dc <platform_event_wait+0x68>
1000f4da:	e088      	b.n	1000f5ee <platform_event_wait+0x17a>
		{
			uint16_t msg_id = rcv_msg->id;
1000f4dc:	4b73      	ldr	r3, [pc, #460]	; (1000f6ac <platform_event_wait+0x238>)
1000f4de:	681c      	ldr	r4, [r3, #0]
1000f4e0:	88a3      	ldrh	r3, [r4, #4]
1000f4e2:	469a      	mov	sl, r3
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
			
			if((rcv_msg->id != DBG_KE_TIMER_RESP) && (bEventTimeoutFlag))
1000f4e4:	23cd      	movs	r3, #205	; 0xcd
1000f4e6:	009b      	lsls	r3, r3, #2
1000f4e8:	459a      	cmp	sl, r3
1000f4ea:	d100      	bne.n	1000f4ee <platform_event_wait+0x7a>
1000f4ec:	e0c7      	b.n	1000f67e <platform_event_wait+0x20a>

	do {
		if(NMI_MsgQueueRecv(InternalAppMsgQHandle, (void**)&rcv_msg) == STATUS_SUCCESS)
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
1000f4ee:	8923      	ldrh	r3, [r4, #8]
1000f4f0:	469b      	mov	fp, r3
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
1000f4f2:	8963      	ldrh	r3, [r4, #10]
1000f4f4:	4698      	mov	r8, r3
			bLoopAgain = 0;
			
			if((rcv_msg->id != DBG_KE_TIMER_RESP) && (bEventTimeoutFlag))
1000f4f6:	464b      	mov	r3, r9
1000f4f8:	2b00      	cmp	r3, #0
1000f4fa:	d011      	beq.n	1000f520 <platform_event_wait+0xac>
	platform_interface_send(msg, u16TxLen);
}

static void platform_stop_event_timeout(void)
{
	uint8_t msg[8+5] = {0};
1000f4fc:	220d      	movs	r2, #13
1000f4fe:	2100      	movs	r1, #0
1000f500:	a802      	add	r0, sp, #8
1000f502:	4b66      	ldr	r3, [pc, #408]	; (1000f69c <platform_event_wait+0x228>)
1000f504:	4798      	blx	r3
	uint8_t u16TxLen = 0;

	msg[u16TxLen++] = ((DBG_KE_TIMER_REQ) & 0x00FF );
1000f506:	2333      	movs	r3, #51	; 0x33
1000f508:	aa02      	add	r2, sp, #8
1000f50a:	7013      	strb	r3, [r2, #0]
	msg[u16TxLen++] = (((DBG_KE_TIMER_REQ)>>8) & 0x00FF );
1000f50c:	3b30      	subs	r3, #48	; 0x30
1000f50e:	7053      	strb	r3, [r2, #1]
	msg[u16TxLen++] = ((TASK_DBG) & 0x00FF );
1000f510:	7093      	strb	r3, [r2, #2]
	msg[u16TxLen++] = (((TASK_DBG)>>8) & 0x00FF );	
	msg[u16TxLen++] = ((TASK_INTERNAL_APP) & 0x00FF );
1000f512:	3302      	adds	r3, #2
1000f514:	7113      	strb	r3, [r2, #4]
	msg[u16TxLen++] = (((TASK_INTERNAL_APP)>>8) & 0x00FF );
	msg[u16TxLen++] = ((5) & 0x00FF );
1000f516:	7193      	strb	r3, [r2, #6]
	msg[u16TxLen++] = (uint8_t)(( (0) >> 16) & 0x00FF);
	msg[u16TxLen++] = (uint8_t)(( (0) >> 24) & 0x00FF);
	
	msg[u16TxLen++] = ((0) & 0x00FF );
	
	platform_interface_send(msg, u16TxLen);
1000f518:	210d      	movs	r1, #13
1000f51a:	0010      	movs	r0, r2
1000f51c:	4b60      	ldr	r3, [pc, #384]	; (1000f6a0 <platform_event_wait+0x22c>)
1000f51e:	4798      	blx	r3
			{
				//Stop timer if it is still running
				platform_stop_event_timeout();
			}
				
			if(msg_id == PERIPHERAL_INTERRUPT_EVENT)
1000f520:	23a0      	movs	r3, #160	; 0xa0
1000f522:	00db      	lsls	r3, r3, #3
1000f524:	459a      	cmp	sl, r3
1000f526:	d121      	bne.n	1000f56c <platform_event_wait+0xf8>
			{
				if(plf_event_buff_index+len > MAX_EVT_BUFF_LEN)
1000f528:	4b61      	ldr	r3, [pc, #388]	; (1000f6b0 <platform_event_wait+0x23c>)
1000f52a:	881b      	ldrh	r3, [r3, #0]
1000f52c:	4443      	add	r3, r8
1000f52e:	22a0      	movs	r2, #160	; 0xa0
1000f530:	0092      	lsls	r2, r2, #2
1000f532:	4293      	cmp	r3, r2
1000f534:	dd02      	ble.n	1000f53c <platform_event_wait+0xc8>
					plf_event_buff_index = PLF_EVENT_BUFFER_START_INDEX;
1000f536:	3a80      	subs	r2, #128	; 0x80
1000f538:	4b5d      	ldr	r3, [pc, #372]	; (1000f6b0 <platform_event_wait+0x23c>)
1000f53a:	801a      	strh	r2, [r3, #0]
				memcpy(&rx_buffer[plf_event_buff_index],data,len);
1000f53c:	4b5c      	ldr	r3, [pc, #368]	; (1000f6b0 <platform_event_wait+0x23c>)
1000f53e:	469a      	mov	sl, r3
1000f540:	881d      	ldrh	r5, [r3, #0]
1000f542:	4b5c      	ldr	r3, [pc, #368]	; (1000f6b4 <platform_event_wait+0x240>)
1000f544:	18ed      	adds	r5, r5, r3
1000f546:	0021      	movs	r1, r4
1000f548:	310c      	adds	r1, #12
1000f54a:	4642      	mov	r2, r8
1000f54c:	0028      	movs	r0, r5
1000f54e:	4b5a      	ldr	r3, [pc, #360]	; (1000f6b8 <platform_event_wait+0x244>)
1000f550:	4798      	blx	r3
				platform_event_post(src_id,&rx_buffer[plf_event_buff_index],len);
1000f552:	4642      	mov	r2, r8
1000f554:	0029      	movs	r1, r5
1000f556:	4658      	mov	r0, fp
1000f558:	4b58      	ldr	r3, [pc, #352]	; (1000f6bc <platform_event_wait+0x248>)
1000f55a:	4798      	blx	r3
				plf_event_buff_index += len;
1000f55c:	4653      	mov	r3, sl
1000f55e:	881b      	ldrh	r3, [r3, #0]
1000f560:	4443      	add	r3, r8
1000f562:	4652      	mov	r2, sl
1000f564:	8013      	strh	r3, [r2, #0]
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000f566:	2400      	movs	r4, #0
				if(plf_event_buff_index+len > MAX_EVT_BUFF_LEN)
					plf_event_buff_index = PLF_EVENT_BUFFER_START_INDEX;
				memcpy(&rx_buffer[plf_event_buff_index],data,len);
				platform_event_post(src_id,&rx_buffer[plf_event_buff_index],len);
				plf_event_buff_index += len;
				status = STATUS_RECEIVED_PLF_EVENT_MSG;
1000f568:	2502      	movs	r5, #2
1000f56a:	e03a      	b.n	1000f5e2 <platform_event_wait+0x16e>
			}
			else
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
1000f56c:	4b54      	ldr	r3, [pc, #336]	; (1000f6c0 <platform_event_wait+0x24c>)
1000f56e:	681b      	ldr	r3, [r3, #0]
1000f570:	2b00      	cmp	r3, #0
1000f572:	d032      	beq.n	1000f5da <platform_event_wait+0x166>
					if(rcv_msg->id == DBG_KE_TIMER_RESP)
1000f574:	4b4d      	ldr	r3, [pc, #308]	; (1000f6ac <platform_event_wait+0x238>)
1000f576:	681a      	ldr	r2, [r3, #0]
1000f578:	8893      	ldrh	r3, [r2, #4]
1000f57a:	21cd      	movs	r1, #205	; 0xcd
1000f57c:	0089      	lsls	r1, r1, #2
1000f57e:	428b      	cmp	r3, r1
1000f580:	d104      	bne.n	1000f58c <platform_event_wait+0x118>
					{
						if(bEventTimeoutFlag)
1000f582:	464b      	mov	r3, r9
						{
							status = STATUS_TIMEOUT;	
						}
						else
						{
							bLoopAgain = 1;
1000f584:	2401      	movs	r4, #1
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
					if(rcv_msg->id == DBG_KE_TIMER_RESP)
					{
						if(bEventTimeoutFlag)
1000f586:	2b00      	cmp	r3, #0
1000f588:	d02b      	beq.n	1000f5e2 <platform_event_wait+0x16e>
1000f58a:	e028      	b.n	1000f5de <platform_event_wait+0x16a>
							bLoopAgain = 1;
						}
					}
					else
					{
						ke_msg_hdr = (struct ke_msghdr *)((void *)(rx_buffer+BLE_EVENT_BUFFER_START_INDEX));
1000f58c:	4c4d      	ldr	r4, [pc, #308]	; (1000f6c4 <platform_event_wait+0x250>)
1000f58e:	4d49      	ldr	r5, [pc, #292]	; (1000f6b4 <platform_event_wait+0x240>)
1000f590:	6025      	str	r5, [r4, #0]
						ke_msg_hdr->id = rcv_msg->id;
1000f592:	702b      	strb	r3, [r5, #0]
1000f594:	0a1b      	lsrs	r3, r3, #8
1000f596:	706b      	strb	r3, [r5, #1]
//#if (CHIPVERSION_A3 || CHIPVERSION_A4)
					//ke_msg_hdr->src_id = rcv_msg->src_id;
//#else
					ke_msg_hdr->src_id = gapm_get_id_from_task(rcv_msg->src_id);
1000f598:	8910      	ldrh	r0, [r2, #8]
1000f59a:	4b4b      	ldr	r3, [pc, #300]	; (1000f6c8 <platform_event_wait+0x254>)
1000f59c:	681b      	ldr	r3, [r3, #0]
1000f59e:	4798      	blx	r3
1000f5a0:	7128      	strb	r0, [r5, #4]
1000f5a2:	0a00      	lsrs	r0, r0, #8
1000f5a4:	7168      	strb	r0, [r5, #5]
//#endif  /* (CHIPVERSION_A3 || CHIPVERSION_A4) */
						ke_msg_hdr->dest_id = rcv_msg->dest_id;
1000f5a6:	6820      	ldr	r0, [r4, #0]
1000f5a8:	4b40      	ldr	r3, [pc, #256]	; (1000f6ac <platform_event_wait+0x238>)
1000f5aa:	681a      	ldr	r2, [r3, #0]
1000f5ac:	88d2      	ldrh	r2, [r2, #6]
1000f5ae:	8042      	strh	r2, [r0, #2]
						ke_msg_hdr->param_len = rcv_msg->param_len;
1000f5b0:	681d      	ldr	r5, [r3, #0]
1000f5b2:	896b      	ldrh	r3, [r5, #10]
1000f5b4:	80c3      	strh	r3, [r0, #6]
						ke_msg_hdr++;
1000f5b6:	3008      	adds	r0, #8
1000f5b8:	6020      	str	r0, [r4, #0]
						if(rcv_msg->param_len > 0) {
1000f5ba:	896a      	ldrh	r2, [r5, #10]
1000f5bc:	2a00      	cmp	r2, #0
1000f5be:	d003      	beq.n	1000f5c8 <platform_event_wait+0x154>
							memcpy((void *)ke_msg_hdr,rcv_msg->param,rcv_msg->param_len);
1000f5c0:	0029      	movs	r1, r5
1000f5c2:	310c      	adds	r1, #12
1000f5c4:	4b3c      	ldr	r3, [pc, #240]	; (1000f6b8 <platform_event_wait+0x244>)
1000f5c6:	4798      	blx	r3
						}
						ble_stack_message_handler(rx_buffer,(rcv_msg->param_len + sizeof(struct ke_msghdr)));
1000f5c8:	8969      	ldrh	r1, [r5, #10]
1000f5ca:	3108      	adds	r1, #8
1000f5cc:	4b3c      	ldr	r3, [pc, #240]	; (1000f6c0 <platform_event_wait+0x24c>)
1000f5ce:	681b      	ldr	r3, [r3, #0]
1000f5d0:	4838      	ldr	r0, [pc, #224]	; (1000f6b4 <platform_event_wait+0x240>)
1000f5d2:	4798      	blx	r3
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000f5d4:	2400      	movs	r4, #0
						ke_msg_hdr++;
						if(rcv_msg->param_len > 0) {
							memcpy((void *)ke_msg_hdr,rcv_msg->param,rcv_msg->param_len);
						}
						ble_stack_message_handler(rx_buffer,(rcv_msg->param_len + sizeof(struct ke_msghdr)));
						status = STATUS_RECEIVED_BLE_MSG;
1000f5d6:	2503      	movs	r5, #3
1000f5d8:	e003      	b.n	1000f5e2 <platform_event_wait+0x16e>
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000f5da:	2400      	movs	r4, #0
1000f5dc:	e001      	b.n	1000f5e2 <platform_event_wait+0x16e>
1000f5de:	2400      	movs	r4, #0
				if(ble_stack_message_handler) {
					if(rcv_msg->id == DBG_KE_TIMER_RESP)
					{
						if(bEventTimeoutFlag)
						{
							status = STATUS_TIMEOUT;	
1000f5e0:	25d0      	movs	r5, #208	; 0xd0
						ble_stack_message_handler(rx_buffer,(rcv_msg->param_len + sizeof(struct ke_msghdr)));
						status = STATUS_RECEIVED_BLE_MSG;
					}
				}
			}
			ke_free(rcv_msg);
1000f5e2:	4b32      	ldr	r3, [pc, #200]	; (1000f6ac <platform_event_wait+0x238>)
1000f5e4:	6818      	ldr	r0, [r3, #0]
1000f5e6:	4b39      	ldr	r3, [pc, #228]	; (1000f6cc <platform_event_wait+0x258>)
1000f5e8:	681b      	ldr	r3, [r3, #0]
1000f5ea:	4798      	blx	r3
1000f5ec:	e000      	b.n	1000f5f0 <platform_event_wait+0x17c>
		}
		else
		{
			status = STATUS_FAILURE;
1000f5ee:	2507      	movs	r5, #7
		}
	}while(bLoopAgain);
1000f5f0:	2c00      	cmp	r4, #0
1000f5f2:	d000      	beq.n	1000f5f6 <platform_event_wait+0x182>
1000f5f4:	e76b      	b.n	1000f4ce <platform_event_wait+0x5a>
	
	if(bEventTimeoutFlag)
1000f5f6:	464b      	mov	r3, r9
1000f5f8:	2b00      	cmp	r3, #0
1000f5fa:	d046      	beq.n	1000f68a <platform_event_wait+0x216>
	{
		//CleanUp if there is any remaining DBG_KE_TIMER_RESP message in queue
		NMI_MsgQueueDestroyOnKeID(InternalAppMsgQHandle, DBG_KE_TIMER_RESP);
1000f5fc:	4b29      	ldr	r3, [pc, #164]	; (1000f6a4 <platform_event_wait+0x230>)
1000f5fe:	681e      	ldr	r6, [r3, #0]
#endif 
static int NMI_MsgQueueDestroyOnKeID(NMI_MsgQueueHandle* pHandle, ke_msg_id_t u16KeMsgId)
{
	int num_of_freed=0;
	Message * current , *prev = NULL;
	if((NULL == pHandle) && (NULL == pHandle->pstrMessageList))
1000f600:	2e00      	cmp	r6, #0
1000f602:	d104      	bne.n	1000f60e <platform_event_wait+0x19a>
1000f604:	2300      	movs	r3, #0
1000f606:	6a1c      	ldr	r4, [r3, #32]
1000f608:	2c00      	cmp	r4, #0
1000f60a:	d131      	bne.n	1000f670 <platform_event_wait+0x1fc>
1000f60c:	e03d      	b.n	1000f68a <platform_event_wait+0x216>
	{
		return num_of_freed;
	}

	current = pHandle->pstrMessageList;
1000f60e:	6a34      	ldr	r4, [r6, #32]
	os_sem_down(&pHandle->strCriticalSection);
1000f610:	2314      	movs	r3, #20
1000f612:	469c      	mov	ip, r3
1000f614:	44b4      	add	ip, r6
1000f616:	4663      	mov	r3, ip
1000f618:	4660      	mov	r0, ip
1000f61a:	9300      	str	r3, [sp, #0]
1000f61c:	4b2c      	ldr	r3, [pc, #176]	; (1000f6d0 <platform_event_wait+0x25c>)
1000f61e:	681b      	ldr	r3, [r3, #0]
1000f620:	4798      	blx	r3
	while(NULL != current)
1000f622:	2c00      	cmp	r4, #0
1000f624:	d01f      	beq.n	1000f666 <platform_event_wait+0x1f2>
			}
			ke_free(rcv_msg);
		}
		else
		{
			status = STATUS_FAILURE;
1000f626:	2700      	movs	r7, #0

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
	while(NULL != current)
	{
		if(u16KeMsgId == ((struct ke_msg*)current->pvBuffer)->id)
1000f628:	23cd      	movs	r3, #205	; 0xcd
1000f62a:	009b      	lsls	r3, r3, #2
1000f62c:	4698      	mov	r8, r3
		{
			num_of_freed++;
			if(NULL != prev)
			{
				prev->pstrNext = current->pstrNext;
				ke_free(current);
1000f62e:	4b27      	ldr	r3, [pc, #156]	; (1000f6cc <platform_event_wait+0x258>)
1000f630:	469a      	mov	sl, r3
1000f632:	0020      	movs	r0, r4

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
	while(NULL != current)
	{
		if(u16KeMsgId == ((struct ke_msg*)current->pvBuffer)->id)
1000f634:	6803      	ldr	r3, [r0, #0]
1000f636:	889b      	ldrh	r3, [r3, #4]
1000f638:	4543      	cmp	r3, r8
1000f63a:	d110      	bne.n	1000f65e <platform_event_wait+0x1ea>
		{
			num_of_freed++;
			if(NULL != prev)
1000f63c:	2f00      	cmp	r7, #0
1000f63e:	d006      	beq.n	1000f64e <platform_event_wait+0x1da>
			{
				prev->pstrNext = current->pstrNext;
1000f640:	6883      	ldr	r3, [r0, #8]
1000f642:	60bb      	str	r3, [r7, #8]
				ke_free(current);
1000f644:	4653      	mov	r3, sl
1000f646:	681b      	ldr	r3, [r3, #0]
1000f648:	4798      	blx	r3
				current = prev->pstrNext;
1000f64a:	68b8      	ldr	r0, [r7, #8]
1000f64c:	e009      	b.n	1000f662 <platform_event_wait+0x1ee>
			}
			else
			{
				pHandle->pstrMessageList = current->pstrNext;
1000f64e:	6883      	ldr	r3, [r0, #8]
1000f650:	6233      	str	r3, [r6, #32]
				ke_free(current);
1000f652:	4b1e      	ldr	r3, [pc, #120]	; (1000f6cc <platform_event_wait+0x258>)
1000f654:	681b      	ldr	r3, [r3, #0]
1000f656:	9301      	str	r3, [sp, #4]
1000f658:	4798      	blx	r3
				current = pHandle->pstrMessageList;
1000f65a:	6a30      	ldr	r0, [r6, #32]
1000f65c:	e001      	b.n	1000f662 <platform_event_wait+0x1ee>
			}
		}
		else
		{
			prev = current;
			current = current ->pstrNext;
1000f65e:	0007      	movs	r7, r0
1000f660:	6880      	ldr	r0, [r0, #8]
		return num_of_freed;
	}

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
	while(NULL != current)
1000f662:	2800      	cmp	r0, #0
1000f664:	d1e6      	bne.n	1000f634 <platform_event_wait+0x1c0>
		{
			prev = current;
			current = current ->pstrNext;
		}
	}
	os_sem_up(&pHandle->strCriticalSection);
1000f666:	4b1b      	ldr	r3, [pc, #108]	; (1000f6d4 <platform_event_wait+0x260>)
1000f668:	681b      	ldr	r3, [r3, #0]
1000f66a:	9800      	ldr	r0, [sp, #0]
1000f66c:	4798      	blx	r3
	if(bEventTimeoutFlag)
	{
		//CleanUp if there is any remaining DBG_KE_TIMER_RESP message in queue
		NMI_MsgQueueDestroyOnKeID(InternalAppMsgQHandle, DBG_KE_TIMER_RESP);
	}
	return status;
1000f66e:	e00c      	b.n	1000f68a <platform_event_wait+0x216>
	{
		return num_of_freed;
	}

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
1000f670:	2314      	movs	r3, #20
1000f672:	9300      	str	r3, [sp, #0]
1000f674:	4b16      	ldr	r3, [pc, #88]	; (1000f6d0 <platform_event_wait+0x25c>)
1000f676:	681b      	ldr	r3, [r3, #0]
1000f678:	2014      	movs	r0, #20
1000f67a:	4798      	blx	r3
1000f67c:	e7d3      	b.n	1000f626 <platform_event_wait+0x1b2>
				status = STATUS_RECEIVED_PLF_EVENT_MSG;
			}
			else
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
1000f67e:	4b10      	ldr	r3, [pc, #64]	; (1000f6c0 <platform_event_wait+0x24c>)
1000f680:	681b      	ldr	r3, [r3, #0]
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000f682:	2400      	movs	r4, #0
				status = STATUS_RECEIVED_PLF_EVENT_MSG;
			}
			else
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
1000f684:	2b00      	cmp	r3, #0
1000f686:	d0ac      	beq.n	1000f5e2 <platform_event_wait+0x16e>
1000f688:	e77b      	b.n	1000f582 <platform_event_wait+0x10e>
	{
		//CleanUp if there is any remaining DBG_KE_TIMER_RESP message in queue
		NMI_MsgQueueDestroyOnKeID(InternalAppMsgQHandle, DBG_KE_TIMER_RESP);
	}
	return status;
}
1000f68a:	0028      	movs	r0, r5
1000f68c:	b007      	add	sp, #28
1000f68e:	bc3c      	pop	{r2, r3, r4, r5}
1000f690:	4690      	mov	r8, r2
1000f692:	4699      	mov	r9, r3
1000f694:	46a2      	mov	sl, r4
1000f696:	46ab      	mov	fp, r5
1000f698:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000f69a:	46c0      	nop			; (mov r8, r8)
1000f69c:	10015239 	.word	0x10015239
1000f6a0:	1000f3e5 	.word	0x1000f3e5
1000f6a4:	1001a0ac 	.word	0x1001a0ac
1000f6a8:	1001a094 	.word	0x1001a094
1000f6ac:	1001a0a0 	.word	0x1001a0a0
1000f6b0:	1001afbc 	.word	0x1001afbc
1000f6b4:	1001ad24 	.word	0x1001ad24
1000f6b8:	10015227 	.word	0x10015227
1000f6bc:	1000f005 	.word	0x1000f005
1000f6c0:	1001a09c 	.word	0x1001a09c
1000f6c4:	1001a08c 	.word	0x1001a08c
1000f6c8:	1001a06c 	.word	0x1001a06c
1000f6cc:	1001a068 	.word	0x1001a068
1000f6d0:	1001a088 	.word	0x1001a088
1000f6d4:	1001a074 	.word	0x1001a074

1000f6d8 <acquire_sleep_lock>:

plf_drv_status acquire_sleep_lock()
{
1000f6d8:	b510      	push	{r4, lr}
    //DBG_LOG_DEV("[acquire_sleep_lock]\tDisabling ULP");
	plf_drv_status status = STATUS_RESOURCE_BUSY;
	//uint8_t osc_en = REG_PL_RD(0x4000B1EC)&0x01;
	
	rwip_prevent_sleep_set(APP_PREVENT_SLEEP);
1000f6da:	4b03      	ldr	r3, [pc, #12]	; (1000f6e8 <acquire_sleep_lock+0x10>)
1000f6dc:	681b      	ldr	r3, [r3, #0]
1000f6de:	2080      	movs	r0, #128	; 0x80
1000f6e0:	0200      	lsls	r0, r0, #8
1000f6e2:	4798      	blx	r3
		/*  */
		os_sem_up(gstrFwSem);
	}
#endif	//0
	return status;
}
1000f6e4:	2008      	movs	r0, #8
1000f6e6:	bd10      	pop	{r4, pc}
1000f6e8:	1001acdc 	.word	0x1001acdc

1000f6ec <release_message_lock>:

plf_drv_status release_message_lock()
{
1000f6ec:	b510      	push	{r4, lr}
	plf_drv_status status = STATUS_SUCCESS;
	rwip_prevent_sleep_clear(MSG_PREVENT_SLEEP);
1000f6ee:	4b03      	ldr	r3, [pc, #12]	; (1000f6fc <release_message_lock+0x10>)
1000f6f0:	681b      	ldr	r3, [r3, #0]
1000f6f2:	2080      	movs	r0, #128	; 0x80
1000f6f4:	01c0      	lsls	r0, r0, #7
1000f6f6:	4798      	blx	r3
	return status;
}
1000f6f8:	2000      	movs	r0, #0
1000f6fa:	bd10      	pop	{r4, pc}
1000f6fc:	1001ace8 	.word	0x1001ace8

1000f700 <release_sleep_lock>:

plf_drv_status release_sleep_lock()
{
1000f700:	b510      	push	{r4, lr}
    //DBG_LOG_DEV("[release_sleep_lock]\tEnabling ULP");
	plf_drv_status status = STATUS_SUCCESS;
	rwip_prevent_sleep_clear(MSG_PREVENT_SLEEP);
1000f702:	4c05      	ldr	r4, [pc, #20]	; (1000f718 <release_sleep_lock+0x18>)
1000f704:	2080      	movs	r0, #128	; 0x80
1000f706:	01c0      	lsls	r0, r0, #7
1000f708:	6823      	ldr	r3, [r4, #0]
1000f70a:	4798      	blx	r3
	rwip_prevent_sleep_clear(APP_PREVENT_SLEEP);
1000f70c:	6823      	ldr	r3, [r4, #0]
1000f70e:	2080      	movs	r0, #128	; 0x80
1000f710:	0200      	lsls	r0, r0, #8
1000f712:	4798      	blx	r3
	return status;
}
1000f714:	2000      	movs	r0, #0
1000f716:	bd10      	pop	{r4, pc}
1000f718:	1001ace8 	.word	0x1001ace8

1000f71c <register_resume_callback>:
}

plf_drv_status register_resume_callback(resume_callback cb)
{
	plf_drv_status status = STATUS_SUCCESS;
	if(cb == NULL)
1000f71c:	2800      	cmp	r0, #0
1000f71e:	d003      	beq.n	1000f728 <register_resume_callback+0xc>
	{
		status = STATUS_INVALID_ARGUMENT;
	}
	else 
	{
		samb11_app_resume_cb = cb;
1000f720:	4b02      	ldr	r3, [pc, #8]	; (1000f72c <register_resume_callback+0x10>)
1000f722:	6018      	str	r0, [r3, #0]
	}
}

plf_drv_status register_resume_callback(resume_callback cb)
{
	plf_drv_status status = STATUS_SUCCESS;
1000f724:	2000      	movs	r0, #0
1000f726:	e000      	b.n	1000f72a <register_resume_callback+0xe>
	if(cb == NULL)
	{
		status = STATUS_INVALID_ARGUMENT;
1000f728:	2009      	movs	r0, #9
	{
		samb11_app_resume_cb = cb;
		//*apps_resume_cb = (uint32_t)cb;
	}
	return status;
}
1000f72a:	4770      	bx	lr
1000f72c:	1001afb0 	.word	0x1001afb0

1000f730 <gpio1_combined_isr_handler>:

enum port_status_code wakeup_int_unregister_callback(enum port_wakeup_source wakeup_source);
void wakeup_active_event_callback(uint32_t wakeup_source);

void gpio1_combined_isr_handler(void)
{
1000f730:	b530      	push	{r4, r5, lr}
	uint8_t index = 0;
	/* portint_callback_t callback; */
	uint8_t port_gpio1 = LPGPIO_16;
	uint32_t intstatus = GPIO1->INTSTATUSCLEAR.reg; /* jeffy */
1000f732:	4a18      	ldr	r2, [pc, #96]	; (1000f794 <gpio1_combined_isr_handler+0x64>)
1000f734:	8f13      	ldrh	r3, [r2, #56]	; 0x38
1000f736:	b29b      	uxth	r3, r3
	GPIO1->INTTYPESET.reg |= (1 << 15); /* jeffy */
1000f738:	8d10      	ldrh	r0, [r2, #40]	; 0x28
1000f73a:	2180      	movs	r1, #128	; 0x80
1000f73c:	0209      	lsls	r1, r1, #8
1000f73e:	4301      	orrs	r1, r0
1000f740:	8511      	strh	r1, [r2, #40]	; 0x28
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO1->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO1->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000f742:	0010      	movs	r0, r2
1000f744:	4d14      	ldr	r5, [pc, #80]	; (1000f798 <gpio1_combined_isr_handler+0x68>)
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO1->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000f746:	2401      	movs	r4, #1
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000f748:	2200      	movs	r2, #0
	uint32_t intstatus = GPIO1->INTSTATUSCLEAR.reg; /* jeffy */
	GPIO1->INTTYPESET.reg |= (1 << 15); /* jeffy */

	do {
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000f74a:	05db      	lsls	r3, r3, #23
1000f74c:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
1000f74e:	d011      	beq.n	1000f774 <gpio1_combined_isr_handler+0x44>
			port_gpio1 = (intstatus & ~(intstatus - 1));
1000f750:	b2db      	uxtb	r3, r3
1000f752:	4259      	negs	r1, r3
1000f754:	400b      	ands	r3, r1
			while (!(port_gpio1 == 1)) {
1000f756:	2b01      	cmp	r3, #1
1000f758:	d006      	beq.n	1000f768 <gpio1_combined_isr_handler+0x38>
1000f75a:	0011      	movs	r1, r2
				port_gpio1 = port_gpio1 >> 1;
1000f75c:	085b      	lsrs	r3, r3, #1
				index++;
1000f75e:	3101      	adds	r1, #1
1000f760:	b2c9      	uxtb	r1, r1
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
			port_gpio1 = (intstatus & ~(intstatus - 1));
			while (!(port_gpio1 == 1)) {
1000f762:	2b01      	cmp	r3, #1
1000f764:	d1fa      	bne.n	1000f75c <gpio1_combined_isr_handler+0x2c>
1000f766:	e000      	b.n	1000f76a <gpio1_combined_isr_handler+0x3a>
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000f768:	0011      	movs	r1, r2
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO1->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000f76a:	0023      	movs	r3, r4
1000f76c:	408b      	lsls	r3, r1
1000f76e:	b29b      	uxth	r3, r3
1000f770:	8703      	strh	r3, [r0, #56]	; 0x38
1000f772:	e003      	b.n	1000f77c <gpio1_combined_isr_handler+0x4c>
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO1->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000f774:	8f03      	ldrh	r3, [r0, #56]	; 0x38
1000f776:	432b      	orrs	r3, r5
1000f778:	b29b      	uxth	r3, r3
1000f77a:	8703      	strh	r3, [r0, #56]	; 0x38
			/* REG_GPIO1_INTSTATUSCLEAR = REG_GPIO1_INTENSET; */
		}

		intstatus = GPIO1->INTSTATUSCLEAR.reg;
1000f77c:	8f03      	ldrh	r3, [r0, #56]	; 0x38
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000f77e:	05db      	lsls	r3, r3, #23
1000f780:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
	} while (intstatus != 0);
1000f782:	d1e2      	bne.n	1000f74a <gpio1_combined_isr_handler+0x1a>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
1000f784:	2180      	movs	r1, #128	; 0x80
1000f786:	0049      	lsls	r1, r1, #1
1000f788:	3381      	adds	r3, #129	; 0x81
1000f78a:	33ff      	adds	r3, #255	; 0xff
1000f78c:	4a03      	ldr	r2, [pc, #12]	; (1000f79c <gpio1_combined_isr_handler+0x6c>)
1000f78e:	50d1      	str	r1, [r2, r3]

	NVIC_ClearPendingIRQ(8);
}
1000f790:	bd30      	pop	{r4, r5, pc}
1000f792:	46c0      	nop			; (mov r8, r8)
1000f794:	40011000 	.word	0x40011000
1000f798:	ffff8000 	.word	0xffff8000
1000f79c:	e000e100 	.word	0xe000e100

1000f7a0 <gpio0_combined_isr_handler>:

void gpio0_combined_isr_handler(void)
{
1000f7a0:	b530      	push	{r4, r5, lr}
	uint8_t index = 0;
	/* portint_callback_t callback; */
	uint8_t port_gpio0 = LPGPIO_0;
	uint32_t intstatus = GPIO0->INTSTATUSCLEAR.reg; /* jeffy */
1000f7a2:	4a17      	ldr	r2, [pc, #92]	; (1000f800 <gpio0_combined_isr_handler+0x60>)
1000f7a4:	8f13      	ldrh	r3, [r2, #56]	; 0x38
1000f7a6:	b29b      	uxth	r3, r3
	GPIO0->INTTYPESET.reg |= (1 << 15); /* jeffy */
1000f7a8:	8d10      	ldrh	r0, [r2, #40]	; 0x28
1000f7aa:	2180      	movs	r1, #128	; 0x80
1000f7ac:	0209      	lsls	r1, r1, #8
1000f7ae:	4301      	orrs	r1, r0
1000f7b0:	8511      	strh	r1, [r2, #40]	; 0x28
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO0->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO0->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000f7b2:	0010      	movs	r0, r2
1000f7b4:	4d13      	ldr	r5, [pc, #76]	; (1000f804 <gpio0_combined_isr_handler+0x64>)
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO0->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000f7b6:	2401      	movs	r4, #1
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000f7b8:	2200      	movs	r2, #0
	uint32_t intstatus = GPIO0->INTSTATUSCLEAR.reg; /* jeffy */
	GPIO0->INTTYPESET.reg |= (1 << 15); /* jeffy */

	do {
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000f7ba:	05db      	lsls	r3, r3, #23
1000f7bc:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
1000f7be:	d011      	beq.n	1000f7e4 <gpio0_combined_isr_handler+0x44>
			port_gpio0 = (intstatus & ~(intstatus - 1));
1000f7c0:	b2db      	uxtb	r3, r3
1000f7c2:	4259      	negs	r1, r3
1000f7c4:	400b      	ands	r3, r1
			while (!(port_gpio0 == 1)) {
1000f7c6:	2b01      	cmp	r3, #1
1000f7c8:	d006      	beq.n	1000f7d8 <gpio0_combined_isr_handler+0x38>
1000f7ca:	0011      	movs	r1, r2
				port_gpio0 = port_gpio0 >> 1;
1000f7cc:	085b      	lsrs	r3, r3, #1
				index++;
1000f7ce:	3101      	adds	r1, #1
1000f7d0:	b2c9      	uxtb	r1, r1
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
			port_gpio0 = (intstatus & ~(intstatus - 1));
			while (!(port_gpio0 == 1)) {
1000f7d2:	2b01      	cmp	r3, #1
1000f7d4:	d1fa      	bne.n	1000f7cc <gpio0_combined_isr_handler+0x2c>
1000f7d6:	e000      	b.n	1000f7da <gpio0_combined_isr_handler+0x3a>
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000f7d8:	0011      	movs	r1, r2
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO0->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000f7da:	0023      	movs	r3, r4
1000f7dc:	408b      	lsls	r3, r1
1000f7de:	b29b      	uxth	r3, r3
1000f7e0:	8703      	strh	r3, [r0, #56]	; 0x38
1000f7e2:	e003      	b.n	1000f7ec <gpio0_combined_isr_handler+0x4c>
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO0->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000f7e4:	8f03      	ldrh	r3, [r0, #56]	; 0x38
1000f7e6:	432b      	orrs	r3, r5
1000f7e8:	b29b      	uxth	r3, r3
1000f7ea:	8703      	strh	r3, [r0, #56]	; 0x38
			/* REG_GPIO1_INTSTATUSCLEAR = REG_GPIO1_INTENSET; */
		}

		intstatus = GPIO0->INTSTATUSCLEAR.reg;
1000f7ec:	8f03      	ldrh	r3, [r0, #56]	; 0x38
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000f7ee:	05db      	lsls	r3, r3, #23
1000f7f0:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
	} while (intstatus != 0);
1000f7f2:	d1e2      	bne.n	1000f7ba <gpio0_combined_isr_handler+0x1a>
1000f7f4:	2180      	movs	r1, #128	; 0x80
1000f7f6:	3381      	adds	r3, #129	; 0x81
1000f7f8:	33ff      	adds	r3, #255	; 0xff
1000f7fa:	4a03      	ldr	r2, [pc, #12]	; (1000f808 <gpio0_combined_isr_handler+0x68>)
1000f7fc:	50d1      	str	r1, [r2, r3]

	NVIC_ClearPendingIRQ(7);
}
1000f7fe:	bd30      	pop	{r4, r5, pc}
1000f800:	40010000 	.word	0x40010000
1000f804:	ffff8000 	.word	0xffff8000
1000f808:	e000e100 	.word	0xe000e100

1000f80c <PORT1_COMB_Handler>:

#ifdef CHIPVERSION_B0
void PORT1_COMB_Handler(void)
{
1000f80c:	b510      	push	{r4, lr}
	/* if(CMSDK_GPIO1->INTSTATUS & ((1<<15) | (1<<14) | (1<<13))) { */
	if (GPIO1->INTSTATUSCLEAR.reg & ((1 << 15) | (1 << 14) | (1 << 13))) {
1000f80e:	4b0c      	ldr	r3, [pc, #48]	; (1000f840 <PORT1_COMB_Handler+0x34>)
1000f810:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
1000f812:	0b5b      	lsrs	r3, r3, #13
1000f814:	d010      	beq.n	1000f838 <PORT1_COMB_Handler+0x2c>
		handle_ext_wakeup_isr();
1000f816:	4b0b      	ldr	r3, [pc, #44]	; (1000f844 <PORT1_COMB_Handler+0x38>)
1000f818:	681b      	ldr	r3, [r3, #0]
1000f81a:	4798      	blx	r3

		/* clear specific int pin status that caused the Interrupt */
		/* CMSDK_GPIO1->INTCLEAR |= CMSDK_GPIO1->INTSTATUS & ((1<<15) | (1<<14) | (1<<13)); */
		GPIO1->INTSTATUSCLEAR.reg |= GPIO1->INTSTATUSCLEAR.reg & ((1 << 15) | (1 << 14) | (1 << 13));
1000f81c:	4a08      	ldr	r2, [pc, #32]	; (1000f840 <PORT1_COMB_Handler+0x34>)
1000f81e:	8f13      	ldrh	r3, [r2, #56]	; 0x38
1000f820:	8f11      	ldrh	r1, [r2, #56]	; 0x38
1000f822:	0b5b      	lsrs	r3, r3, #13
1000f824:	035b      	lsls	r3, r3, #13
1000f826:	430b      	orrs	r3, r1
1000f828:	8713      	strh	r3, [r2, #56]	; 0x38
1000f82a:	2180      	movs	r1, #128	; 0x80
1000f82c:	0049      	lsls	r1, r1, #1
1000f82e:	23c0      	movs	r3, #192	; 0xc0
1000f830:	005b      	lsls	r3, r3, #1
1000f832:	4a05      	ldr	r2, [pc, #20]	; (1000f848 <PORT1_COMB_Handler+0x3c>)
1000f834:	50d1      	str	r1, [r2, r3]
1000f836:	e001      	b.n	1000f83c <PORT1_COMB_Handler+0x30>
		/* NVIC_ClearPendingIRQ(PORT1_COMB_IRQn); */
		NVIC_ClearPendingIRQ(8);
	} else {
		gpio1_combined_isr_handler();
1000f838:	4b04      	ldr	r3, [pc, #16]	; (1000f84c <PORT1_COMB_Handler+0x40>)
1000f83a:	4798      	blx	r3
	}
}
1000f83c:	bd10      	pop	{r4, pc}
1000f83e:	46c0      	nop			; (mov r8, r8)
1000f840:	40011000 	.word	0x40011000
1000f844:	1001afa8 	.word	0x1001afa8
1000f848:	e000e100 	.word	0xe000e100
1000f84c:	1000f731 	.word	0x1000f731

1000f850 <wakeup_int_unregister_callback>:
	{
		wakeup_source_callback[wakeup_source] = 0;
	}
	else 
	{
		status = PORT_STATUS_ERR_INVALID_ARG;
1000f850:	2303      	movs	r3, #3
#endif  /* CHIPVERSION_B0 */

enum port_status_code wakeup_int_unregister_callback(enum port_wakeup_source wakeup_source)
{
	enum port_status_code status = PORT_STATUS_OK;
	if(	(wakeup_source == PORT_WAKEUP_SOURCE_AON_GPIO_0) || 
1000f852:	2802      	cmp	r0, #2
1000f854:	d804      	bhi.n	1000f860 <wakeup_int_unregister_callback+0x10>
		(wakeup_source == PORT_WAKEUP_SOURCE_AON_GPIO_1) || 
		(wakeup_source == PORT_WAKEUP_SOURCE_AON_GPIO_2) ) 
	{
		wakeup_source_callback[wakeup_source] = 0;
1000f856:	0080      	lsls	r0, r0, #2
1000f858:	2200      	movs	r2, #0
1000f85a:	4b02      	ldr	r3, [pc, #8]	; (1000f864 <wakeup_int_unregister_callback+0x14>)
1000f85c:	50c2      	str	r2, [r0, r3]

#endif  /* CHIPVERSION_B0 */

enum port_status_code wakeup_int_unregister_callback(enum port_wakeup_source wakeup_source)
{
	enum port_status_code status = PORT_STATUS_OK;
1000f85e:	2300      	movs	r3, #0
	else 
	{
		status = PORT_STATUS_ERR_INVALID_ARG;
	}
	return status;
}
1000f860:	0018      	movs	r0, r3
1000f862:	4770      	bx	lr
1000f864:	1001afc0 	.word	0x1001afc0

1000f868 <wakeup_active_event_callback>:

void wakeup_active_event_callback(uint32_t wakeup_source)
{
1000f868:	b510      	push	{r4, lr}
1000f86a:	0004      	movs	r4, r0
	portint_callback_t callback;
	uint32_t *pu32WakeSource = (uint32_t *)wakeup_source;
	if((*pu32WakeSource & 0xFF) == 1)
1000f86c:	7803      	ldrb	r3, [r0, #0]
1000f86e:	2b01      	cmp	r3, #1
1000f870:	d108      	bne.n	1000f884 <wakeup_active_event_callback+0x1c>
	{
		if(wakeup_source_callback[0] != NULL) {
1000f872:	4b11      	ldr	r3, [pc, #68]	; (1000f8b8 <wakeup_active_event_callback+0x50>)
1000f874:	681b      	ldr	r3, [r3, #0]
1000f876:	2b00      	cmp	r3, #0
1000f878:	d000      	beq.n	1000f87c <wakeup_active_event_callback+0x14>
			callback = wakeup_source_callback[0];
			callback();
1000f87a:	4798      	blx	r3
		}
		*pu32WakeSource &= ~(0xFF);
1000f87c:	23ff      	movs	r3, #255	; 0xff
1000f87e:	6822      	ldr	r2, [r4, #0]
1000f880:	439a      	bics	r2, r3
1000f882:	6022      	str	r2, [r4, #0]
	}
	if(((*pu32WakeSource >> 8) & 0xFF) == 1)
1000f884:	7863      	ldrb	r3, [r4, #1]
1000f886:	2b01      	cmp	r3, #1
1000f888:	d108      	bne.n	1000f89c <wakeup_active_event_callback+0x34>
	{
		if(wakeup_source_callback[1] != NULL) {
1000f88a:	4b0b      	ldr	r3, [pc, #44]	; (1000f8b8 <wakeup_active_event_callback+0x50>)
1000f88c:	685b      	ldr	r3, [r3, #4]
1000f88e:	2b00      	cmp	r3, #0
1000f890:	d000      	beq.n	1000f894 <wakeup_active_event_callback+0x2c>
			callback = wakeup_source_callback[1];
			callback();
1000f892:	4798      	blx	r3
		}
		*pu32WakeSource &= ~(0xFF << 8);
1000f894:	4b09      	ldr	r3, [pc, #36]	; (1000f8bc <wakeup_active_event_callback+0x54>)
1000f896:	6822      	ldr	r2, [r4, #0]
1000f898:	4013      	ands	r3, r2
1000f89a:	6023      	str	r3, [r4, #0]
	}
	if(((*pu32WakeSource >> 16) & 0xFF) == 1)
1000f89c:	78a3      	ldrb	r3, [r4, #2]
1000f89e:	2b01      	cmp	r3, #1
1000f8a0:	d108      	bne.n	1000f8b4 <wakeup_active_event_callback+0x4c>
	{
		if(wakeup_source_callback[2] != NULL) {
1000f8a2:	4b05      	ldr	r3, [pc, #20]	; (1000f8b8 <wakeup_active_event_callback+0x50>)
1000f8a4:	689b      	ldr	r3, [r3, #8]
1000f8a6:	2b00      	cmp	r3, #0
1000f8a8:	d000      	beq.n	1000f8ac <wakeup_active_event_callback+0x44>
			callback = wakeup_source_callback[2];
			callback();
1000f8aa:	4798      	blx	r3
		}
		*pu32WakeSource &= ~(0xFF << 16);
1000f8ac:	4b04      	ldr	r3, [pc, #16]	; (1000f8c0 <wakeup_active_event_callback+0x58>)
1000f8ae:	6822      	ldr	r2, [r4, #0]
1000f8b0:	4013      	ands	r3, r2
1000f8b2:	6023      	str	r3, [r4, #0]
	}
}
1000f8b4:	bd10      	pop	{r4, pc}
1000f8b6:	46c0      	nop			; (mov r8, r8)
1000f8b8:	1001afc0 	.word	0x1001afc0
1000f8bc:	ffff00ff 	.word	0xffff00ff
1000f8c0:	ff00ffff 	.word	0xff00ffff

1000f8c4 <resume_cb>:
    sms_ble_send_cnt = 0;
}


static void resume_cb(void)
{
1000f8c4:	b510      	push	{r4, lr}
    init_port_list(); // re-initialize all ports
1000f8c6:	4b09      	ldr	r3, [pc, #36]	; (1000f8ec <resume_cb+0x28>)
1000f8c8:	4798      	blx	r3
    serial_console_init(); // GPIO (UART) for the console
1000f8ca:	4b09      	ldr	r3, [pc, #36]	; (1000f8f0 <resume_cb+0x2c>)
1000f8cc:	4798      	blx	r3
    sms_dualtimer_init();
1000f8ce:	4b09      	ldr	r3, [pc, #36]	; (1000f8f4 <resume_cb+0x30>)
1000f8d0:	4798      	blx	r3
    delay_init();
1000f8d2:	4b09      	ldr	r3, [pc, #36]	; (1000f8f8 <resume_cb+0x34>)
1000f8d4:	4798      	blx	r3
    sms_button_configure_gpio(); // GPIO (AO_0 & AO_1) for the buttons
1000f8d6:	4b09      	ldr	r3, [pc, #36]	; (1000f8fc <resume_cb+0x38>)
1000f8d8:	4798      	blx	r3
    sms_led_gpio_init();
1000f8da:	4b09      	ldr	r3, [pc, #36]	; (1000f900 <resume_cb+0x3c>)
1000f8dc:	4798      	blx	r3
    sms_spi_master_configure();
1000f8de:	4b09      	ldr	r3, [pc, #36]	; (1000f904 <resume_cb+0x40>)
1000f8e0:	4798      	blx	r3
    sms_i2c_master_configure();
1000f8e2:	4b09      	ldr	r3, [pc, #36]	; (1000f908 <resume_cb+0x44>)
1000f8e4:	4798      	blx	r3
    //sms_mpu_configure_gpio();
    sms_monitor_configure_gpio();
1000f8e6:	4b09      	ldr	r3, [pc, #36]	; (1000f90c <resume_cb+0x48>)
1000f8e8:	4798      	blx	r3
    //gpio_pin_set_output_level(SMS_PRESSURE_VCC_PIN, true);
}
1000f8ea:	bd10      	pop	{r4, pc}
1000f8ec:	1000f111 	.word	0x1000f111
1000f8f0:	1000ee79 	.word	0x1000ee79
1000f8f4:	1000b665 	.word	0x1000b665
1000f8f8:	100080e9 	.word	0x100080e9
1000f8fc:	1000a571 	.word	0x1000a571
1000f900:	1000aef9 	.word	0x1000aef9
1000f904:	1000b519 	.word	0x1000b519
1000f908:	1000aa45 	.word	0x1000aa45
1000f90c:	1000a999 	.word	0x1000a999

1000f910 <sms_init_variables>:
 */
/*- Includes ---------------------------------------------------------------*/
#include "sms_peripheral1.h"

void sms_init_variables(void)
{
1000f910:	b510      	push	{r4, lr}
    // states
    ble_current_state = BLE_STATE_POWEROFF;
1000f912:	2300      	movs	r3, #0
1000f914:	4a10      	ldr	r2, [pc, #64]	; (1000f958 <sms_init_variables+0x48>)
1000f916:	7013      	strb	r3, [r2, #0]
    button_instance.current_state = BUTTON_STATE_NONE;
1000f918:	4a10      	ldr	r2, [pc, #64]	; (1000f95c <sms_init_variables+0x4c>)
1000f91a:	7053      	strb	r3, [r2, #1]
    pressure_device.hal.current_state = MS58_STATE_NONE;
1000f91c:	4810      	ldr	r0, [pc, #64]	; (1000f960 <sms_init_variables+0x50>)
1000f91e:	2225      	movs	r2, #37	; 0x25
1000f920:	5483      	strb	r3, [r0, r2]
    timer1_current_mode = TIMER1_MODE_NONE;
1000f922:	4a10      	ldr	r2, [pc, #64]	; (1000f964 <sms_init_variables+0x54>)
1000f924:	7013      	strb	r3, [r2, #0]
    timer2_current_mode = TIMER2_MODE_NONE;
1000f926:	4a10      	ldr	r2, [pc, #64]	; (1000f968 <sms_init_variables+0x58>)
1000f928:	7013      	strb	r3, [r2, #0]
    sms_working_mode = SMS_MODE_BUTTON_SOLO;
1000f92a:	2101      	movs	r1, #1
1000f92c:	4a0f      	ldr	r2, [pc, #60]	; (1000f96c <sms_init_variables+0x5c>)
1000f92e:	7011      	strb	r1, [r2, #0]
    
    // button
    btn0_instance.id = SMS_BTN_0;
1000f930:	4a0f      	ldr	r2, [pc, #60]	; (1000f970 <sms_init_variables+0x60>)
1000f932:	7013      	strb	r3, [r2, #0]
    btn0_instance.gpio_pin = SMS_BTN_0_PIN;
1000f934:	241f      	movs	r4, #31
1000f936:	7054      	strb	r4, [r2, #1]
    btn0_instance.int_enabled = true;
1000f938:	7091      	strb	r1, [r2, #2]
    btn0_instance.char_value = 0;
1000f93a:	70d3      	strb	r3, [r2, #3]
    
    pressure_device.state = PRESSURE_STATE_OFF;
1000f93c:	2228      	movs	r2, #40	; 0x28
1000f93e:	5483      	strb	r3, [r0, r2]
    ulp_ready = false;
1000f940:	4a0c      	ldr	r2, [pc, #48]	; (1000f974 <sms_init_variables+0x64>)
1000f942:	7013      	strb	r3, [r2, #0]
    
    
    btn1_instance.id = SMS_BTN_1;
1000f944:	4a0c      	ldr	r2, [pc, #48]	; (1000f978 <sms_init_variables+0x68>)
1000f946:	7011      	strb	r1, [r2, #0]
    btn1_instance.gpio_pin = SMS_BTN_1_PIN;
1000f948:	201d      	movs	r0, #29
1000f94a:	7050      	strb	r0, [r2, #1]
    btn1_instance.int_enabled = true;
1000f94c:	7091      	strb	r1, [r2, #2]
    btn1_instance.char_value = 0;
1000f94e:	70d3      	strb	r3, [r2, #3]
    
    sms_ble_send_cnt = 0;
1000f950:	4a0a      	ldr	r2, [pc, #40]	; (1000f97c <sms_init_variables+0x6c>)
1000f952:	8013      	strh	r3, [r2, #0]
}
1000f954:	bd10      	pop	{r4, pc}
1000f956:	46c0      	nop			; (mov r8, r8)
1000f958:	1001a330 	.word	0x1001a330
1000f95c:	1001a220 	.word	0x1001a220
1000f960:	1001a294 	.word	0x1001a294
1000f964:	1001a184 	.word	0x1001a184
1000f968:	1001a331 	.word	0x1001a331
1000f96c:	1001a218 	.word	0x1001a218
1000f970:	1001a180 	.word	0x1001a180
1000f974:	1001a219 	.word	0x1001a219
1000f978:	1001a21c 	.word	0x1001a21c
1000f97c:	1001a34c 	.word	0x1001a34c

1000f980 <main>:
    //sms_current_interrupt.int_on = true;
//}


int main(void)
{
1000f980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int res;
    
    /* Define current BLE state
     * ------------------------ */
    ble_current_state = BLE_STATE_STARTING;
1000f982:	2210      	movs	r2, #16
1000f984:	4b9f      	ldr	r3, [pc, #636]	; (1000fc04 <main+0x284>)
1000f986:	701a      	strb	r2, [r3, #0]
    
    /* Initialize platform
     * ------------------- */
	platform_driver_init();
1000f988:	4b9f      	ldr	r3, [pc, #636]	; (1000fc08 <main+0x288>)
1000f98a:	4798      	blx	r3
	gpio_init(); // GPIO
1000f98c:	4b9f      	ldr	r3, [pc, #636]	; (1000fc0c <main+0x28c>)
1000f98e:	4798      	blx	r3
	serial_console_init(); // serial console for debugging
1000f990:	4b9f      	ldr	r3, [pc, #636]	; (1000fc10 <main+0x290>)
1000f992:	4798      	blx	r3
    
    /* Disable ULP
     * ----------- */
	acquire_sleep_lock();
1000f994:	4b9f      	ldr	r3, [pc, #636]	; (1000fc14 <main+0x294>)
1000f996:	4798      	blx	r3
    

    /* Initialize SMS flags
     * -------------------- */
    sms_init_variables();
1000f998:	4b9f      	ldr	r3, [pc, #636]	; (1000fc18 <main+0x298>)
1000f99a:	4798      	blx	r3
    
    
    /* Initialize hardware components
     * ------------------------------ */
    // Dualtimer
    sms_dualtimer_init();
1000f99c:	4b9f      	ldr	r3, [pc, #636]	; (1000fc1c <main+0x29c>)
1000f99e:	4798      	blx	r3
	
    // Blocking delay (hacked from other SAM platforms)
    delay_init();
1000f9a0:	4b9f      	ldr	r3, [pc, #636]	; (1000fc20 <main+0x2a0>)
1000f9a2:	4798      	blx	r3

	// Buttons
    sms_button_configure_gpio();
1000f9a4:	4b9f      	ldr	r3, [pc, #636]	; (1000fc24 <main+0x2a4>)
1000f9a6:	4798      	blx	r3
    
    // LED
    sms_led_gpio_init();
1000f9a8:	4b9f      	ldr	r3, [pc, #636]	; (1000fc28 <main+0x2a8>)
1000f9aa:	4798      	blx	r3
    
    // I2C
    sms_i2c_master_configure();
1000f9ac:	4b9f      	ldr	r3, [pc, #636]	; (1000fc2c <main+0x2ac>)
1000f9ae:	4798      	blx	r3
    
    // SPI
    sms_spi_master_configure();
1000f9b0:	4b9f      	ldr	r3, [pc, #636]	; (1000fc30 <main+0x2b0>)
1000f9b2:	4798      	blx	r3
    
    // MPU
    sms_mpu_configure_gpio();
1000f9b4:	4b9f      	ldr	r3, [pc, #636]	; (1000fc34 <main+0x2b4>)
1000f9b6:	4798      	blx	r3
    
    // MS58
    pressure_device.hal.current_state = MS58_STATE_NONE;
1000f9b8:	2100      	movs	r1, #0
1000f9ba:	2325      	movs	r3, #37	; 0x25
1000f9bc:	4a9e      	ldr	r2, [pc, #632]	; (1000fc38 <main+0x2b8>)
1000f9be:	54d1      	strb	r1, [r2, r3]
    //ms58_device.reset_done = false;
    //ms58_device.init_ok = false;
    
    sms_monitor_configure_gpio();
1000f9c0:	4b9e      	ldr	r3, [pc, #632]	; (1000fc3c <main+0x2bc>)
1000f9c2:	4798      	blx	r3
    
    /* Initialize the BLE module
     * ------------------------- */
	ble_device_init(NULL); // initialize the BLE chip and set the device address 
1000f9c4:	2000      	movs	r0, #0
1000f9c6:	4b9e      	ldr	r3, [pc, #632]	; (1000fc40 <main+0x2c0>)
1000f9c8:	4798      	blx	r3
	
    
    /* Define BLE services
     * ------------------- */
    sms_button_define_services();
1000f9ca:	4b9e      	ldr	r3, [pc, #632]	; (1000fc44 <main+0x2c4>)
1000f9cc:	4798      	blx	r3
    sms_pressure_define_services();
1000f9ce:	4b9e      	ldr	r3, [pc, #632]	; (1000fc48 <main+0x2c8>)
1000f9d0:	4798      	blx	r3
    sms_mpu_define_services();
1000f9d2:	4b9e      	ldr	r3, [pc, #632]	; (1000fc4c <main+0x2cc>)
1000f9d4:	4798      	blx	r3
    
    
    /* Register callbacks
     * ------------------ */
    // Recovering from ULP
    register_resume_callback(resume_cb); // register resume callback
1000f9d6:	489e      	ldr	r0, [pc, #632]	; (1000fc50 <main+0x2d0>)
1000f9d8:	4b9e      	ldr	r3, [pc, #632]	; (1000fc54 <main+0x2d4>)
1000f9da:	4798      	blx	r3

    // Dualtimer (AON timer enables on registration... so do it later)    
    sms_dualtimer_register_callback(DUALTIMER_TIMER1, sms_dualtimer1_cb); // button pressing timer
1000f9dc:	499e      	ldr	r1, [pc, #632]	; (1000fc58 <main+0x2d8>)
1000f9de:	2000      	movs	r0, #0
1000f9e0:	4c9e      	ldr	r4, [pc, #632]	; (1000fc5c <main+0x2dc>)
1000f9e2:	47a0      	blx	r4
    sms_dualtimer_register_callback(DUALTIMER_TIMER2, sms_dualtimer2_cb); // LED blinking timer
1000f9e4:	499e      	ldr	r1, [pc, #632]	; (1000fc60 <main+0x2e0>)
1000f9e6:	2001      	movs	r0, #1
1000f9e8:	47a0      	blx	r4

    // Buttons
    sms_button_register_callbacks();
1000f9ea:	4b9e      	ldr	r3, [pc, #632]	; (1000fc64 <main+0x2e4>)
1000f9ec:	4798      	blx	r3
    
    // MPU
    sms_mpu_register_callbacks();
1000f9ee:	4b9e      	ldr	r3, [pc, #632]	; (1000fc68 <main+0x2e8>)
1000f9f0:	4798      	blx	r3

    // BLE
    ble_mgr_events_callback_handler(REGISTER_CALL_BACK, BLE_GAP_EVENT_TYPE, sms_ble_gap_cb);
1000f9f2:	4a9e      	ldr	r2, [pc, #632]	; (1000fc6c <main+0x2ec>)
1000f9f4:	2100      	movs	r1, #0
1000f9f6:	2000      	movs	r0, #0
1000f9f8:	4c9d      	ldr	r4, [pc, #628]	; (1000fc70 <main+0x2f0>)
1000f9fa:	47a0      	blx	r4
    ble_mgr_events_callback_handler(REGISTER_CALL_BACK, BLE_GATT_SERVER_EVENT_TYPE, sms_ble_gatt_server_cb);
1000f9fc:	4a9d      	ldr	r2, [pc, #628]	; (1000fc74 <main+0x2f4>)
1000f9fe:	2102      	movs	r1, #2
1000fa00:	2000      	movs	r0, #0
1000fa02:	47a0      	blx	r4

    //ble_set_ulp_mode(BLE_ULP_MODE_SET);
    
    /* Enable buttons interrupts
     * ------------------------- */
    sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
1000fa04:	2100      	movs	r1, #0
1000fa06:	2000      	movs	r0, #0
1000fa08:	4b9b      	ldr	r3, [pc, #620]	; (1000fc78 <main+0x2f8>)
1000fa0a:	4798      	blx	r3
    //sms_sensors_interrupt_toggle(true, false);
    //while(1) {}
    
    /* Goto sleep
     * ---------- */
    sms_ble_power_down();
1000fa0c:	4b9b      	ldr	r3, [pc, #620]	; (1000fc7c <main+0x2fc>)
1000fa0e:	4798      	blx	r3

    
	while(true)
	{
		/* BLE Event task */
		ble_event_task(BLE_EVENT_TIMEOUT);
1000fa10:	4d9b      	ldr	r5, [pc, #620]	; (1000fc80 <main+0x300>)
		
		/* Write application task */
        if(sms_current_interrupt.int_on)
1000fa12:	4c9c      	ldr	r4, [pc, #624]	; (1000fc84 <main+0x304>)
        {
            if(ulp_active) {
1000fa14:	4e9c      	ldr	r6, [pc, #624]	; (1000fc88 <main+0x308>)

    
	while(true)
	{
		/* BLE Event task */
		ble_event_task(BLE_EVENT_TIMEOUT);
1000fa16:	2001      	movs	r0, #1
1000fa18:	4240      	negs	r0, r0
1000fa1a:	47a8      	blx	r5
		
		/* Write application task */
        if(sms_current_interrupt.int_on)
1000fa1c:	7863      	ldrb	r3, [r4, #1]
1000fa1e:	2b00      	cmp	r3, #0
1000fa20:	d100      	bne.n	1000fa24 <main+0xa4>
1000fa22:	e0db      	b.n	1000fbdc <main+0x25c>
        {
            if(ulp_active) {
1000fa24:	7833      	ldrb	r3, [r6, #0]
1000fa26:	2b00      	cmp	r3, #0
1000fa28:	d009      	beq.n	1000fa3e <main+0xbe>
                DBG_LOG_DEV("[main]\t\t\t\tWaking up...");
1000fa2a:	4898      	ldr	r0, [pc, #608]	; (1000fc8c <main+0x30c>)
1000fa2c:	4b98      	ldr	r3, [pc, #608]	; (1000fc90 <main+0x310>)
1000fa2e:	4798      	blx	r3
1000fa30:	4898      	ldr	r0, [pc, #608]	; (1000fc94 <main+0x314>)
1000fa32:	4f99      	ldr	r7, [pc, #612]	; (1000fc98 <main+0x318>)
1000fa34:	47b8      	blx	r7
                acquire_sleep_lock();
1000fa36:	4b77      	ldr	r3, [pc, #476]	; (1000fc14 <main+0x294>)
1000fa38:	4798      	blx	r3
                DBG_LOG_CONT_DEV(" done!");
1000fa3a:	4898      	ldr	r0, [pc, #608]	; (1000fc9c <main+0x31c>)
1000fa3c:	47b8      	blx	r7
            }                
            //ulp_ready = false;
            DBG_LOG_DEV("[main]\t\t\t\tDisabling button int...");
1000fa3e:	4893      	ldr	r0, [pc, #588]	; (1000fc8c <main+0x30c>)
1000fa40:	4b93      	ldr	r3, [pc, #588]	; (1000fc90 <main+0x310>)
1000fa42:	4798      	blx	r3
1000fa44:	4896      	ldr	r0, [pc, #600]	; (1000fca0 <main+0x320>)
1000fa46:	4f94      	ldr	r7, [pc, #592]	; (1000fc98 <main+0x318>)
1000fa48:	47b8      	blx	r7
            sms_button_toggle_interrupt(SMS_BTN_INT_DISABLE, SMS_BTN_INT_DISABLE);
1000fa4a:	2101      	movs	r1, #1
1000fa4c:	2001      	movs	r0, #1
1000fa4e:	4b8a      	ldr	r3, [pc, #552]	; (1000fc78 <main+0x2f8>)
1000fa50:	4798      	blx	r3
            DBG_LOG_CONT_DEV(" done!");
1000fa52:	4892      	ldr	r0, [pc, #584]	; (1000fc9c <main+0x31c>)
1000fa54:	47b8      	blx	r7
            //psp = __get_PSP();
            //msp = __get_MSP();
            //printf("\r\n\@ main: psp 0x%lx, msp 0x%lx", psp, msp);
            switch(sms_current_interrupt.source)
1000fa56:	4b8b      	ldr	r3, [pc, #556]	; (1000fc84 <main+0x304>)
1000fa58:	781b      	ldrb	r3, [r3, #0]
1000fa5a:	b2db      	uxtb	r3, r3
1000fa5c:	2b06      	cmp	r3, #6
1000fa5e:	d900      	bls.n	1000fa62 <main+0xe2>
1000fa60:	e0a6      	b.n	1000fbb0 <main+0x230>
1000fa62:	009b      	lsls	r3, r3, #2
1000fa64:	4a8f      	ldr	r2, [pc, #572]	; (1000fca4 <main+0x324>)
1000fa66:	58d3      	ldr	r3, [r2, r3]
1000fa68:	469f      	mov	pc, r3
            {
                case INT_NONE:
                //sms_monitor_states("NONE");
                DBG_LOG_DEV("...NO SOURCE!!");
1000fa6a:	4888      	ldr	r0, [pc, #544]	; (1000fc8c <main+0x30c>)
1000fa6c:	4b88      	ldr	r3, [pc, #544]	; (1000fc90 <main+0x310>)
1000fa6e:	4798      	blx	r3
1000fa70:	488d      	ldr	r0, [pc, #564]	; (1000fca8 <main+0x328>)
1000fa72:	4b89      	ldr	r3, [pc, #548]	; (1000fc98 <main+0x318>)
1000fa74:	4798      	blx	r3
                //if(ulp_ready) {
                    //DBG_LOG_DEV("[main]\t\t\tULP...");
                    //release_sleep_lock();
                //}
                //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
                break;
1000fa76:	e0a1      	b.n	1000fbbc <main+0x23c>
                
                case INT_BTN0:
                //sms_monitor_states("INT_BTN0");
                DBG_LOG_DEV("...BTN0");
1000fa78:	4884      	ldr	r0, [pc, #528]	; (1000fc8c <main+0x30c>)
1000fa7a:	4b85      	ldr	r3, [pc, #532]	; (1000fc90 <main+0x310>)
1000fa7c:	4798      	blx	r3
1000fa7e:	488b      	ldr	r0, [pc, #556]	; (1000fcac <main+0x32c>)
1000fa80:	4b85      	ldr	r3, [pc, #532]	; (1000fc98 <main+0x318>)
1000fa82:	4798      	blx	r3
                if((sms_working_mode == SMS_MODE_BUTTON_MPU) || (sms_working_mode == SMS_MODE_COMPLETE) || (sms_working_mode == SMS_MODE_BUTTON_SOLO) || (sms_working_mode == SMS_MODE_BUTTON_PRESSURE)) {
1000fa84:	4b8a      	ldr	r3, [pc, #552]	; (1000fcb0 <main+0x330>)
1000fa86:	781b      	ldrb	r3, [r3, #0]
1000fa88:	2b04      	cmp	r3, #4
1000fa8a:	d00c      	beq.n	1000faa6 <main+0x126>
1000fa8c:	4b88      	ldr	r3, [pc, #544]	; (1000fcb0 <main+0x330>)
1000fa8e:	781b      	ldrb	r3, [r3, #0]
1000fa90:	2b07      	cmp	r3, #7
1000fa92:	d008      	beq.n	1000faa6 <main+0x126>
1000fa94:	4b86      	ldr	r3, [pc, #536]	; (1000fcb0 <main+0x330>)
1000fa96:	781b      	ldrb	r3, [r3, #0]
1000fa98:	2b01      	cmp	r3, #1
1000fa9a:	d004      	beq.n	1000faa6 <main+0x126>
1000fa9c:	4b84      	ldr	r3, [pc, #528]	; (1000fcb0 <main+0x330>)
1000fa9e:	781b      	ldrb	r3, [r3, #0]
1000faa0:	2b05      	cmp	r3, #5
1000faa2:	d000      	beq.n	1000faa6 <main+0x126>
1000faa4:	e08a      	b.n	1000fbbc <main+0x23c>
                        //DBG_LOG_DEV("[main]\t\t\t\tDisabling sensor int...");
                        //sms_sensors_toggle_interrupt(SMS_EXTINT_DISABLE);
                        //DBG_LOG_CONT_DEV(" done!");
                    //}                        
                    //sms_button_toggle_interrupt(SMS_BTN_INT_DISABLE, SMS_BTN_INT_DISABLE);
                    if(sms_button_fn(SMS_BTN_0) < 0) {
1000faa6:	2000      	movs	r0, #0
1000faa8:	4b82      	ldr	r3, [pc, #520]	; (1000fcb4 <main+0x334>)
1000faaa:	4798      	blx	r3
1000faac:	2800      	cmp	r0, #0
1000faae:	db00      	blt.n	1000fab2 <main+0x132>
1000fab0:	e084      	b.n	1000fbbc <main+0x23c>
                        DBG_LOG("[main]\t\t\t\tError in sms_button_fn()!");
1000fab2:	4876      	ldr	r0, [pc, #472]	; (1000fc8c <main+0x30c>)
1000fab4:	4b76      	ldr	r3, [pc, #472]	; (1000fc90 <main+0x310>)
1000fab6:	4798      	blx	r3
1000fab8:	487f      	ldr	r0, [pc, #508]	; (1000fcb8 <main+0x338>)
1000faba:	4b77      	ldr	r3, [pc, #476]	; (1000fc98 <main+0x318>)
1000fabc:	4798      	blx	r3
1000fabe:	e07d      	b.n	1000fbbc <main+0x23c>
                }                    
                break;
                
                case INT_BTN1:
                //sms_monitor_states("INT_BTN1");
                DBG_LOG_DEV("...BTN1");
1000fac0:	4872      	ldr	r0, [pc, #456]	; (1000fc8c <main+0x30c>)
1000fac2:	4b73      	ldr	r3, [pc, #460]	; (1000fc90 <main+0x310>)
1000fac4:	4798      	blx	r3
1000fac6:	487d      	ldr	r0, [pc, #500]	; (1000fcbc <main+0x33c>)
1000fac8:	4b73      	ldr	r3, [pc, #460]	; (1000fc98 <main+0x318>)
1000faca:	4798      	blx	r3
                if((sms_working_mode == SMS_MODE_BUTTON_MPU) || (sms_working_mode == SMS_MODE_COMPLETE) || (sms_working_mode == SMS_MODE_BUTTON_SOLO) || (sms_working_mode == SMS_MODE_BUTTON_PRESSURE)) {
1000facc:	4b78      	ldr	r3, [pc, #480]	; (1000fcb0 <main+0x330>)
1000face:	781b      	ldrb	r3, [r3, #0]
1000fad0:	2b04      	cmp	r3, #4
1000fad2:	d00b      	beq.n	1000faec <main+0x16c>
1000fad4:	4b76      	ldr	r3, [pc, #472]	; (1000fcb0 <main+0x330>)
1000fad6:	781b      	ldrb	r3, [r3, #0]
1000fad8:	2b07      	cmp	r3, #7
1000fada:	d007      	beq.n	1000faec <main+0x16c>
1000fadc:	4b74      	ldr	r3, [pc, #464]	; (1000fcb0 <main+0x330>)
1000fade:	781b      	ldrb	r3, [r3, #0]
1000fae0:	2b01      	cmp	r3, #1
1000fae2:	d003      	beq.n	1000faec <main+0x16c>
1000fae4:	4b72      	ldr	r3, [pc, #456]	; (1000fcb0 <main+0x330>)
1000fae6:	781b      	ldrb	r3, [r3, #0]
1000fae8:	2b05      	cmp	r3, #5
1000faea:	d167      	bne.n	1000fbbc <main+0x23c>
                        //DBG_LOG_DEV("[main]\t\t\t\tDisabling sensor int...");
                        //sms_sensors_toggle_interrupt(SMS_EXTINT_DISABLE);
                        //DBG_LOG_CONT_DEV(" done!");
                    //}                        
                    //sms_button_toggle_interrupt(SMS_BTN_INT_DISABLE, SMS_BTN_INT_DISABLE);
                    if(sms_button_fn(SMS_BTN_1) < 0) {
1000faec:	2001      	movs	r0, #1
1000faee:	4b71      	ldr	r3, [pc, #452]	; (1000fcb4 <main+0x334>)
1000faf0:	4798      	blx	r3
1000faf2:	2800      	cmp	r0, #0
1000faf4:	da62      	bge.n	1000fbbc <main+0x23c>
                        DBG_LOG("[main]\t\t\t\tError in sms_button_fn()!");
1000faf6:	4865      	ldr	r0, [pc, #404]	; (1000fc8c <main+0x30c>)
1000faf8:	4b65      	ldr	r3, [pc, #404]	; (1000fc90 <main+0x310>)
1000fafa:	4798      	blx	r3
1000fafc:	486e      	ldr	r0, [pc, #440]	; (1000fcb8 <main+0x338>)
1000fafe:	4b66      	ldr	r3, [pc, #408]	; (1000fc98 <main+0x318>)
1000fb00:	4798      	blx	r3
1000fb02:	e05b      	b.n	1000fbbc <main+0x23c>
                }                    
                break;
                
                case INT_MPU_DRDY:
                //sms_monitor_states("INT_IMU_DRDY");
                DBG_LOG_DEV("...MPU_DRDY");
1000fb04:	4861      	ldr	r0, [pc, #388]	; (1000fc8c <main+0x30c>)
1000fb06:	4b62      	ldr	r3, [pc, #392]	; (1000fc90 <main+0x310>)
1000fb08:	4798      	blx	r3
1000fb0a:	486d      	ldr	r0, [pc, #436]	; (1000fcc0 <main+0x340>)
1000fb0c:	4b62      	ldr	r3, [pc, #392]	; (1000fc98 <main+0x318>)
1000fb0e:	4798      	blx	r3
                //if((sms_working_mode == SMS_MODE_BUTTON_MPU) || (sms_working_mode == SMS_MODE_COMPLETE) || (sms_working_mode == SMS_MODE_MPU_SOLO) || (sms_working_mode == SMS_MODE_MPU_PRESSURE)) {
                    sms_mpu_poll_data();
1000fb10:	4b6c      	ldr	r3, [pc, #432]	; (1000fcc4 <main+0x344>)
1000fb12:	4798      	blx	r3
                //}                    
                break;
1000fb14:	e052      	b.n	1000fbbc <main+0x23c>
                
                case INT_AON_TIMER:
                //sms_monitor_states("INT_AON_TIMER");
                DBG_LOG_DEV("...AON_TIMER");
1000fb16:	485d      	ldr	r0, [pc, #372]	; (1000fc8c <main+0x30c>)
1000fb18:	4b5d      	ldr	r3, [pc, #372]	; (1000fc90 <main+0x310>)
1000fb1a:	4798      	blx	r3
1000fb1c:	486a      	ldr	r0, [pc, #424]	; (1000fcc8 <main+0x348>)
1000fb1e:	4b5e      	ldr	r3, [pc, #376]	; (1000fc98 <main+0x318>)
1000fb20:	4798      	blx	r3
                if((sms_working_mode == SMS_MODE_BUTTON_PRESSURE) || (sms_working_mode == SMS_MODE_COMPLETE) || (sms_working_mode == SMS_MODE_PRESSURE_SOLO) || (sms_working_mode == SMS_MODE_MPU_PRESSURE)) {
1000fb22:	4b63      	ldr	r3, [pc, #396]	; (1000fcb0 <main+0x330>)
1000fb24:	781b      	ldrb	r3, [r3, #0]
1000fb26:	2b05      	cmp	r3, #5
1000fb28:	d00b      	beq.n	1000fb42 <main+0x1c2>
1000fb2a:	4b61      	ldr	r3, [pc, #388]	; (1000fcb0 <main+0x330>)
1000fb2c:	781b      	ldrb	r3, [r3, #0]
1000fb2e:	2b07      	cmp	r3, #7
1000fb30:	d007      	beq.n	1000fb42 <main+0x1c2>
1000fb32:	4b5f      	ldr	r3, [pc, #380]	; (1000fcb0 <main+0x330>)
1000fb34:	781b      	ldrb	r3, [r3, #0]
1000fb36:	2b03      	cmp	r3, #3
1000fb38:	d003      	beq.n	1000fb42 <main+0x1c2>
1000fb3a:	4b5d      	ldr	r3, [pc, #372]	; (1000fcb0 <main+0x330>)
1000fb3c:	781b      	ldrb	r3, [r3, #0]
1000fb3e:	2b06      	cmp	r3, #6
1000fb40:	d13c      	bne.n	1000fbbc <main+0x23c>
                    if(ble_current_state == BLE_STATE_PAIRED) {
1000fb42:	4b30      	ldr	r3, [pc, #192]	; (1000fc04 <main+0x284>)
1000fb44:	781b      	ldrb	r3, [r3, #0]
1000fb46:	2b22      	cmp	r3, #34	; 0x22
1000fb48:	d10a      	bne.n	1000fb60 <main+0x1e0>
                        //DBG_LOG_DEV("[main]\t\t\tDisabling button int...");
                        //sms_button_toggle_interrupt(SMS_EXTINT_DISABLE);
                        //DBG_LOG_CONT_DEV(" done!");
                        DBG_LOG_DEV("[main]\t\t\t\tPolling pressure data...");
1000fb4a:	4850      	ldr	r0, [pc, #320]	; (1000fc8c <main+0x30c>)
1000fb4c:	4b50      	ldr	r3, [pc, #320]	; (1000fc90 <main+0x310>)
1000fb4e:	4798      	blx	r3
1000fb50:	485e      	ldr	r0, [pc, #376]	; (1000fccc <main+0x34c>)
1000fb52:	4f51      	ldr	r7, [pc, #324]	; (1000fc98 <main+0x318>)
1000fb54:	47b8      	blx	r7
                        sms_pressure_poll_data();
1000fb56:	4b5e      	ldr	r3, [pc, #376]	; (1000fcd0 <main+0x350>)
1000fb58:	4798      	blx	r3
                        DBG_LOG_CONT_DEV(" done!");
1000fb5a:	4850      	ldr	r0, [pc, #320]	; (1000fc9c <main+0x31c>)
1000fb5c:	47b8      	blx	r7
1000fb5e:	e02d      	b.n	1000fbbc <main+0x23c>
                        //DBG_LOG_DEV("[main]\t\t\tEnabling button int...");
                        //sms_button_toggle_interrupt(SMS_EXTINT_ENABLE);
                        //DBG_LOG_CONT_DEV(" done!");
                    }
                    else if(ble_current_state == BLE_STATE_INDICATING) {
1000fb60:	4b28      	ldr	r3, [pc, #160]	; (1000fc04 <main+0x284>)
1000fb62:	781b      	ldrb	r3, [r3, #0]
1000fb64:	2b23      	cmp	r3, #35	; 0x23
1000fb66:	d106      	bne.n	1000fb76 <main+0x1f6>
                        DBG_LOG_DEV("[main]\t\t\t\tAON timer ready while indicating... skipping");
1000fb68:	4848      	ldr	r0, [pc, #288]	; (1000fc8c <main+0x30c>)
1000fb6a:	4b49      	ldr	r3, [pc, #292]	; (1000fc90 <main+0x310>)
1000fb6c:	4798      	blx	r3
1000fb6e:	4859      	ldr	r0, [pc, #356]	; (1000fcd4 <main+0x354>)
1000fb70:	4b49      	ldr	r3, [pc, #292]	; (1000fc98 <main+0x318>)
1000fb72:	4798      	blx	r3
1000fb74:	e022      	b.n	1000fbbc <main+0x23c>
                    }
                    else {
                        sms_timer_aon_disable();
1000fb76:	4b58      	ldr	r3, [pc, #352]	; (1000fcd8 <main+0x358>)
1000fb78:	4798      	blx	r3
                        sms_ble_power_down();
1000fb7a:	4b40      	ldr	r3, [pc, #256]	; (1000fc7c <main+0x2fc>)
1000fb7c:	4798      	blx	r3
1000fb7e:	e01d      	b.n	1000fbbc <main+0x23c>
                }                    
                break;
                
                case INT_DUALTIMER1:
                //sms_monitor_states("INT_DUALTIMER1");
                DBG_LOG_DEV("...DUALTIMER1");
1000fb80:	4842      	ldr	r0, [pc, #264]	; (1000fc8c <main+0x30c>)
1000fb82:	4b43      	ldr	r3, [pc, #268]	; (1000fc90 <main+0x310>)
1000fb84:	4798      	blx	r3
1000fb86:	4855      	ldr	r0, [pc, #340]	; (1000fcdc <main+0x35c>)
1000fb88:	4b43      	ldr	r3, [pc, #268]	; (1000fc98 <main+0x318>)
1000fb8a:	4798      	blx	r3
                sms_dualtimer_stop(DUALTIMER_TIMER1);
1000fb8c:	2000      	movs	r0, #0
1000fb8e:	4b54      	ldr	r3, [pc, #336]	; (1000fce0 <main+0x360>)
1000fb90:	4798      	blx	r3
                sms_dualtimer1_fn();
1000fb92:	4b54      	ldr	r3, [pc, #336]	; (1000fce4 <main+0x364>)
1000fb94:	4798      	blx	r3
                break;
1000fb96:	e011      	b.n	1000fbbc <main+0x23c>
                
                case INT_DUALTIMER2:
                //sms_monitor_states("INT_DUALTIMER2");
                DBG_LOG_DEV("...DUALTIMER2");
1000fb98:	483c      	ldr	r0, [pc, #240]	; (1000fc8c <main+0x30c>)
1000fb9a:	4b3d      	ldr	r3, [pc, #244]	; (1000fc90 <main+0x310>)
1000fb9c:	4798      	blx	r3
1000fb9e:	4852      	ldr	r0, [pc, #328]	; (1000fce8 <main+0x368>)
1000fba0:	4b3d      	ldr	r3, [pc, #244]	; (1000fc98 <main+0x318>)
1000fba2:	4798      	blx	r3
                sms_dualtimer_stop(DUALTIMER_TIMER2);
1000fba4:	2001      	movs	r0, #1
1000fba6:	4b4e      	ldr	r3, [pc, #312]	; (1000fce0 <main+0x360>)
1000fba8:	4798      	blx	r3
                sms_dualtimer2_fn();
1000fbaa:	4b50      	ldr	r3, [pc, #320]	; (1000fcec <main+0x36c>)
1000fbac:	4798      	blx	r3
                break;
1000fbae:	e005      	b.n	1000fbbc <main+0x23c>
                
                default:
                DBG_LOG_DEV("...??");
1000fbb0:	4836      	ldr	r0, [pc, #216]	; (1000fc8c <main+0x30c>)
1000fbb2:	4b37      	ldr	r3, [pc, #220]	; (1000fc90 <main+0x310>)
1000fbb4:	4798      	blx	r3
1000fbb6:	484e      	ldr	r0, [pc, #312]	; (1000fcf0 <main+0x370>)
1000fbb8:	4b37      	ldr	r3, [pc, #220]	; (1000fc98 <main+0x318>)
1000fbba:	4798      	blx	r3
                //sms_monitor_states("ERROR!!");
                break;
            }
            
            DBG_LOG_DEV("[main]\t\t\t\tEnabling button int...");
1000fbbc:	4833      	ldr	r0, [pc, #204]	; (1000fc8c <main+0x30c>)
1000fbbe:	4b34      	ldr	r3, [pc, #208]	; (1000fc90 <main+0x310>)
1000fbc0:	4798      	blx	r3
1000fbc2:	484c      	ldr	r0, [pc, #304]	; (1000fcf4 <main+0x374>)
1000fbc4:	4f34      	ldr	r7, [pc, #208]	; (1000fc98 <main+0x318>)
1000fbc6:	47b8      	blx	r7
            sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
1000fbc8:	2100      	movs	r1, #0
1000fbca:	2000      	movs	r0, #0
1000fbcc:	4b2a      	ldr	r3, [pc, #168]	; (1000fc78 <main+0x2f8>)
1000fbce:	4798      	blx	r3
            DBG_LOG_CONT_DEV(" done!");
1000fbd0:	4832      	ldr	r0, [pc, #200]	; (1000fc9c <main+0x31c>)
1000fbd2:	47b8      	blx	r7
            sms_current_interrupt.int_on = false;
1000fbd4:	4b2b      	ldr	r3, [pc, #172]	; (1000fc84 <main+0x304>)
1000fbd6:	2200      	movs	r2, #0
1000fbd8:	705a      	strb	r2, [r3, #1]
            sms_current_interrupt.source = INT_NONE;
1000fbda:	701a      	strb	r2, [r3, #0]
        }
        
        
        if(ulp_ready) {
1000fbdc:	4b46      	ldr	r3, [pc, #280]	; (1000fcf8 <main+0x378>)
1000fbde:	781b      	ldrb	r3, [r3, #0]
1000fbe0:	2b00      	cmp	r3, #0
1000fbe2:	d00b      	beq.n	1000fbfc <main+0x27c>
            DBG_LOG_DEV("[main]\t\t\t\tULP...");
1000fbe4:	4829      	ldr	r0, [pc, #164]	; (1000fc8c <main+0x30c>)
1000fbe6:	4b2a      	ldr	r3, [pc, #168]	; (1000fc90 <main+0x310>)
1000fbe8:	4798      	blx	r3
1000fbea:	4844      	ldr	r0, [pc, #272]	; (1000fcfc <main+0x37c>)
1000fbec:	4f2a      	ldr	r7, [pc, #168]	; (1000fc98 <main+0x318>)
1000fbee:	47b8      	blx	r7
            ulp_active = true;
1000fbf0:	2201      	movs	r2, #1
1000fbf2:	4b25      	ldr	r3, [pc, #148]	; (1000fc88 <main+0x308>)
1000fbf4:	701a      	strb	r2, [r3, #0]
            //release_sleep_lock();
            //DBG_LOG_CONT_DEV(" zzzz");
            DBG_LOG_CONT_DEV(" !!");
1000fbf6:	4842      	ldr	r0, [pc, #264]	; (1000fd00 <main+0x380>)
1000fbf8:	47b8      	blx	r7
1000fbfa:	e70c      	b.n	1000fa16 <main+0x96>
        }            
        else {
            ulp_active = false;
1000fbfc:	2200      	movs	r2, #0
1000fbfe:	4b22      	ldr	r3, [pc, #136]	; (1000fc88 <main+0x308>)
1000fc00:	701a      	strb	r2, [r3, #0]
1000fc02:	e708      	b.n	1000fa16 <main+0x96>
1000fc04:	1001a330 	.word	0x1001a330
1000fc08:	1000f185 	.word	0x1000f185
1000fc0c:	1000c719 	.word	0x1000c719
1000fc10:	1000ee79 	.word	0x1000ee79
1000fc14:	1000f6d9 	.word	0x1000f6d9
1000fc18:	1000f911 	.word	0x1000f911
1000fc1c:	1000b665 	.word	0x1000b665
1000fc20:	100080e9 	.word	0x100080e9
1000fc24:	1000a571 	.word	0x1000a571
1000fc28:	1000aef9 	.word	0x1000aef9
1000fc2c:	1000aa45 	.word	0x1000aa45
1000fc30:	1000b519 	.word	0x1000b519
1000fc34:	1000ac59 	.word	0x1000ac59
1000fc38:	1001a294 	.word	0x1001a294
1000fc3c:	1000a999 	.word	0x1000a999
1000fc40:	1000e4f9 	.word	0x1000e4f9
1000fc44:	1000a931 	.word	0x1000a931
1000fc48:	1000b3a1 	.word	0x1000b3a1
1000fc4c:	1000ae6d 	.word	0x1000ae6d
1000fc50:	1000f8c5 	.word	0x1000f8c5
1000fc54:	1000f71d 	.word	0x1000f71d
1000fc58:	1000b725 	.word	0x1000b725
1000fc5c:	1000b6a1 	.word	0x1000b6a1
1000fc60:	1000b749 	.word	0x1000b749
1000fc64:	1000a625 	.word	0x1000a625
1000fc68:	1000acd9 	.word	0x1000acd9
1000fc6c:	10016c04 	.word	0x10016c04
1000fc70:	1000e429 	.word	0x1000e429
1000fc74:	10016c50 	.word	0x10016c50
1000fc78:	1000a8e5 	.word	0x1000a8e5
1000fc7c:	10009f69 	.word	0x10009f69
1000fc80:	1000ecf1 	.word	0x1000ecf1
1000fc84:	1001a318 	.word	0x1001a318
1000fc88:	1001a337 	.word	0x1001a337
1000fc8c:	10016660 	.word	0x10016660
1000fc90:	100154a1 	.word	0x100154a1
1000fc94:	100182b4 	.word	0x100182b4
1000fc98:	10015381 	.word	0x10015381
1000fc9c:	100182cc 	.word	0x100182cc
1000fca0:	100182d4 	.word	0x100182d4
1000fca4:	10018298 	.word	0x10018298
1000fca8:	100182f8 	.word	0x100182f8
1000fcac:	10018308 	.word	0x10018308
1000fcb0:	1001a218 	.word	0x1001a218
1000fcb4:	1000a6a1 	.word	0x1000a6a1
1000fcb8:	10018310 	.word	0x10018310
1000fcbc:	10018334 	.word	0x10018334
1000fcc0:	1001833c 	.word	0x1001833c
1000fcc4:	1000add1 	.word	0x1000add1
1000fcc8:	10018348 	.word	0x10018348
1000fccc:	10018358 	.word	0x10018358
1000fcd0:	1000b331 	.word	0x1000b331
1000fcd4:	1001837c 	.word	0x1001837c
1000fcd8:	1000b619 	.word	0x1000b619
1000fcdc:	100183b4 	.word	0x100183b4
1000fce0:	1000b719 	.word	0x1000b719
1000fce4:	1000b76d 	.word	0x1000b76d
1000fce8:	100183c4 	.word	0x100183c4
1000fcec:	1000b9ad 	.word	0x1000b9ad
1000fcf0:	100183d4 	.word	0x100183d4
1000fcf4:	100183dc 	.word	0x100183dc
1000fcf8:	1001a219 	.word	0x1001a219
1000fcfc:	10018400 	.word	0x10018400
1000fd00:	10018414 	.word	0x10018414

1000fd04 <internal_event_post>:
1000fd04:	b570      	push	{r4, r5, r6, lr}
1000fd06:	4d12      	ldr	r5, [pc, #72]	; (1000fd50 <internal_event_post+0x4c>)
1000fd08:	682c      	ldr	r4, [r5, #0]
1000fd0a:	2c00      	cmp	r4, #0
1000fd0c:	d014      	beq.n	1000fd38 <internal_event_post+0x34>
1000fd0e:	6826      	ldr	r6, [r4, #0]
1000fd10:	60e2      	str	r2, [r4, #12]
1000fd12:	602e      	str	r6, [r5, #0]
1000fd14:	2500      	movs	r5, #0
1000fd16:	4a0f      	ldr	r2, [pc, #60]	; (1000fd54 <internal_event_post+0x50>)
1000fd18:	8123      	strh	r3, [r4, #8]
1000fd1a:	6813      	ldr	r3, [r2, #0]
1000fd1c:	6025      	str	r5, [r4, #0]
1000fd1e:	80a0      	strh	r0, [r4, #4]
1000fd20:	80e1      	strh	r1, [r4, #6]
1000fd22:	42ab      	cmp	r3, r5
1000fd24:	d101      	bne.n	1000fd2a <internal_event_post+0x26>
1000fd26:	6014      	str	r4, [r2, #0]
1000fd28:	e011      	b.n	1000fd4e <internal_event_post+0x4a>
1000fd2a:	681a      	ldr	r2, [r3, #0]
1000fd2c:	2a00      	cmp	r2, #0
1000fd2e:	d001      	beq.n	1000fd34 <internal_event_post+0x30>
1000fd30:	1c13      	adds	r3, r2, #0
1000fd32:	e7fa      	b.n	1000fd2a <internal_event_post+0x26>
1000fd34:	601c      	str	r4, [r3, #0]
1000fd36:	e00a      	b.n	1000fd4e <internal_event_post+0x4a>
1000fd38:	b2c4      	uxtb	r4, r0
1000fd3a:	2c00      	cmp	r4, #0
1000fd3c:	d107      	bne.n	1000fd4e <internal_event_post+0x4a>
1000fd3e:	4c06      	ldr	r4, [pc, #24]	; (1000fd58 <internal_event_post+0x54>)
1000fd40:	60e2      	str	r2, [r4, #12]
1000fd42:	2201      	movs	r2, #1
1000fd44:	8123      	strh	r3, [r4, #8]
1000fd46:	4b05      	ldr	r3, [pc, #20]	; (1000fd5c <internal_event_post+0x58>)
1000fd48:	80a0      	strh	r0, [r4, #4]
1000fd4a:	80e1      	strh	r1, [r4, #6]
1000fd4c:	701a      	strb	r2, [r3, #0]
1000fd4e:	bd70      	pop	{r4, r5, r6, pc}
1000fd50:	1001a0c8 	.word	0x1001a0c8
1000fd54:	1001a0c4 	.word	0x1001a0c4
1000fd58:	1001a0b0 	.word	0x1001a0b0
1000fd5c:	1001a0c0 	.word	0x1001a0c0

1000fd60 <internal_event_init>:
1000fd60:	b510      	push	{r4, lr}
1000fd62:	4b08      	ldr	r3, [pc, #32]	; (1000fd84 <internal_event_init+0x24>)
1000fd64:	0900      	lsrs	r0, r0, #4
1000fd66:	0100      	lsls	r0, r0, #4
1000fd68:	681a      	ldr	r2, [r3, #0]
1000fd6a:	1808      	adds	r0, r1, r0
1000fd6c:	4281      	cmp	r1, r0
1000fd6e:	d003      	beq.n	1000fd78 <internal_event_init+0x18>
1000fd70:	600a      	str	r2, [r1, #0]
1000fd72:	1c0a      	adds	r2, r1, #0
1000fd74:	3110      	adds	r1, #16
1000fd76:	e7f9      	b.n	1000fd6c <internal_event_init+0xc>
1000fd78:	601a      	str	r2, [r3, #0]
1000fd7a:	2200      	movs	r2, #0
1000fd7c:	4b02      	ldr	r3, [pc, #8]	; (1000fd88 <internal_event_init+0x28>)
1000fd7e:	601a      	str	r2, [r3, #0]
1000fd80:	bd10      	pop	{r4, pc}
1000fd82:	46c0      	nop			; (mov r8, r8)
1000fd84:	1001a0c8 	.word	0x1001a0c8
1000fd88:	1001a0c4 	.word	0x1001a0c4

1000fd8c <special_events_handler>:
1000fd8c:	b538      	push	{r3, r4, r5, lr}
1000fd8e:	4c1b      	ldr	r4, [pc, #108]	; (1000fdfc <special_events_handler+0x70>)
1000fd90:	1c03      	adds	r3, r0, #0
1000fd92:	8825      	ldrh	r5, [r4, #0]
1000fd94:	1c08      	adds	r0, r1, #0
1000fd96:	1c21      	adds	r1, r4, #0
1000fd98:	429d      	cmp	r5, r3
1000fd9a:	d107      	bne.n	1000fdac <special_events_handler+0x20>
1000fd9c:	88a5      	ldrh	r5, [r4, #4]
1000fd9e:	4285      	cmp	r5, r0
1000fda0:	d104      	bne.n	1000fdac <special_events_handler+0x20>
1000fda2:	2301      	movs	r3, #1
1000fda4:	425b      	negs	r3, r3
1000fda6:	8023      	strh	r3, [r4, #0]
1000fda8:	60a2      	str	r2, [r4, #8]
1000fdaa:	e009      	b.n	1000fdc0 <special_events_handler+0x34>
1000fdac:	884c      	ldrh	r4, [r1, #2]
1000fdae:	429c      	cmp	r4, r3
1000fdb0:	d10a      	bne.n	1000fdc8 <special_events_handler+0x3c>
1000fdb2:	888c      	ldrh	r4, [r1, #4]
1000fdb4:	4284      	cmp	r4, r0
1000fdb6:	d107      	bne.n	1000fdc8 <special_events_handler+0x3c>
1000fdb8:	2301      	movs	r3, #1
1000fdba:	425b      	negs	r3, r3
1000fdbc:	804b      	strh	r3, [r1, #2]
1000fdbe:	608a      	str	r2, [r1, #8]
1000fdc0:	4b0f      	ldr	r3, [pc, #60]	; (1000fe00 <special_events_handler+0x74>)
1000fdc2:	4798      	blx	r3
1000fdc4:	2001      	movs	r0, #1
1000fdc6:	e017      	b.n	1000fdf8 <special_events_handler+0x6c>
1000fdc8:	490e      	ldr	r1, [pc, #56]	; (1000fe04 <special_events_handler+0x78>)
1000fdca:	428b      	cmp	r3, r1
1000fdcc:	d00e      	beq.n	1000fdec <special_events_handler+0x60>
1000fdce:	490e      	ldr	r1, [pc, #56]	; (1000fe08 <special_events_handler+0x7c>)
1000fdd0:	428b      	cmp	r3, r1
1000fdd2:	d007      	beq.n	1000fde4 <special_events_handler+0x58>
1000fdd4:	490d      	ldr	r1, [pc, #52]	; (1000fe0c <special_events_handler+0x80>)
1000fdd6:	2000      	movs	r0, #0
1000fdd8:	428b      	cmp	r3, r1
1000fdda:	d10d      	bne.n	1000fdf8 <special_events_handler+0x6c>
1000fddc:	1c10      	adds	r0, r2, #0
1000fdde:	4b0c      	ldr	r3, [pc, #48]	; (1000fe10 <special_events_handler+0x84>)
1000fde0:	4798      	blx	r3
1000fde2:	e7ef      	b.n	1000fdc4 <special_events_handler+0x38>
1000fde4:	1c11      	adds	r1, r2, #0
1000fde6:	4b0b      	ldr	r3, [pc, #44]	; (1000fe14 <special_events_handler+0x88>)
1000fde8:	2200      	movs	r2, #0
1000fdea:	e002      	b.n	1000fdf2 <special_events_handler+0x66>
1000fdec:	1c11      	adds	r1, r2, #0
1000fdee:	2200      	movs	r2, #0
1000fdf0:	4b09      	ldr	r3, [pc, #36]	; (1000fe18 <special_events_handler+0x8c>)
1000fdf2:	4798      	blx	r3
1000fdf4:	4243      	negs	r3, r0
1000fdf6:	4158      	adcs	r0, r3
1000fdf8:	bd38      	pop	{r3, r4, r5, pc}
1000fdfa:	46c0      	nop			; (mov r8, r8)
1000fdfc:	1001afcc 	.word	0x1001afcc
1000fe00:	100117e9 	.word	0x100117e9
1000fe04:	00000e13 	.word	0x00000e13
1000fe08:	00000e15 	.word	0x00000e15
1000fe0c:	00000e01 	.word	0x00000e01
1000fe10:	10011b59 	.word	0x10011b59
1000fe14:	10011d19 	.word	0x10011d19
1000fe18:	10011df1 	.word	0x10011df1

1000fe1c <at_ble_event_get>:
1000fe1c:	2300      	movs	r3, #0
1000fe1e:	b5f0      	push	{r4, r5, r6, r7, lr}
1000fe20:	b087      	sub	sp, #28
1000fe22:	9204      	str	r2, [sp, #16]
1000fe24:	7003      	strb	r3, [r0, #0]
1000fe26:	9b04      	ldr	r3, [sp, #16]
1000fe28:	9003      	str	r0, [sp, #12]
1000fe2a:	3b01      	subs	r3, #1
1000fe2c:	1c0d      	adds	r5, r1, #0
1000fe2e:	9305      	str	r3, [sp, #20]
1000fe30:	3303      	adds	r3, #3
1000fe32:	d802      	bhi.n	1000fe3a <at_ble_event_get+0x1e>
1000fe34:	9804      	ldr	r0, [sp, #16]
1000fe36:	4bae      	ldr	r3, [pc, #696]	; (100100f0 <at_ble_event_get+0x2d4>)
1000fe38:	4798      	blx	r3
1000fe3a:	9b05      	ldr	r3, [sp, #20]
1000fe3c:	4cad      	ldr	r4, [pc, #692]	; (100100f4 <at_ble_event_get+0x2d8>)
1000fe3e:	3303      	adds	r3, #3
1000fe40:	d902      	bls.n	1000fe48 <at_ble_event_get+0x2c>
1000fe42:	2300      	movs	r3, #0
1000fe44:	9302      	str	r3, [sp, #8]
1000fe46:	e015      	b.n	1000fe74 <at_ble_event_get+0x58>
1000fe48:	2300      	movs	r3, #0
1000fe4a:	9302      	str	r3, [sp, #8]
1000fe4c:	6823      	ldr	r3, [r4, #0]
1000fe4e:	2b00      	cmp	r3, #0
1000fe50:	d113      	bne.n	1000fe7a <at_ble_event_get+0x5e>
1000fe52:	9b02      	ldr	r3, [sp, #8]
1000fe54:	2bd0      	cmp	r3, #208	; 0xd0
1000fe56:	d100      	bne.n	1000fe5a <at_ble_event_get+0x3e>
1000fe58:	e2da      	b.n	10010410 <at_ble_event_get+0x5f4>
1000fe5a:	9804      	ldr	r0, [sp, #16]
1000fe5c:	4ba6      	ldr	r3, [pc, #664]	; (100100f8 <at_ble_event_get+0x2dc>)
1000fe5e:	4798      	blx	r3
1000fe60:	9002      	str	r0, [sp, #8]
1000fe62:	2802      	cmp	r0, #2
1000fe64:	d1f2      	bne.n	1000fe4c <at_ble_event_get+0x30>
1000fe66:	e03f      	b.n	1000fee8 <at_ble_event_get+0xcc>
1000fe68:	9804      	ldr	r0, [sp, #16]
1000fe6a:	4ba3      	ldr	r3, [pc, #652]	; (100100f8 <at_ble_event_get+0x2dc>)
1000fe6c:	4798      	blx	r3
1000fe6e:	9002      	str	r0, [sp, #8]
1000fe70:	2802      	cmp	r0, #2
1000fe72:	d039      	beq.n	1000fee8 <at_ble_event_get+0xcc>
1000fe74:	6823      	ldr	r3, [r4, #0]
1000fe76:	2b00      	cmp	r3, #0
1000fe78:	d0f6      	beq.n	1000fe68 <at_ble_event_get+0x4c>
1000fe7a:	9b02      	ldr	r3, [sp, #8]
1000fe7c:	2bd0      	cmp	r3, #208	; 0xd0
1000fe7e:	d100      	bne.n	1000fe82 <at_ble_event_get+0x66>
1000fe80:	e2c6      	b.n	10010410 <at_ble_event_get+0x5f4>
1000fe82:	9b02      	ldr	r3, [sp, #8]
1000fe84:	3b03      	subs	r3, #3
1000fe86:	1e5a      	subs	r2, r3, #1
1000fe88:	4193      	sbcs	r3, r2
1000fe8a:	9a02      	ldr	r2, [sp, #8]
1000fe8c:	425b      	negs	r3, r3
1000fe8e:	401a      	ands	r2, r3
1000fe90:	6823      	ldr	r3, [r4, #0]
1000fe92:	9202      	str	r2, [sp, #8]
1000fe94:	2b00      	cmp	r3, #0
1000fe96:	d100      	bne.n	1000fe9a <at_ble_event_get+0x7e>
1000fe98:	e2c2      	b.n	10010420 <at_ble_event_get+0x604>
1000fe9a:	681a      	ldr	r2, [r3, #0]
1000fe9c:	68de      	ldr	r6, [r3, #12]
1000fe9e:	6022      	str	r2, [r4, #0]
1000fea0:	88da      	ldrh	r2, [r3, #6]
1000fea2:	9201      	str	r2, [sp, #4]
1000fea4:	4a95      	ldr	r2, [pc, #596]	; (100100fc <at_ble_event_get+0x2e0>)
1000fea6:	889c      	ldrh	r4, [r3, #4]
1000fea8:	6811      	ldr	r1, [r2, #0]
1000feaa:	6013      	str	r3, [r2, #0]
1000feac:	6019      	str	r1, [r3, #0]
1000feae:	4b94      	ldr	r3, [pc, #592]	; (10010100 <at_ble_event_get+0x2e4>)
1000feb0:	781b      	ldrb	r3, [r3, #0]
1000feb2:	2b01      	cmp	r3, #1
1000feb4:	d10f      	bne.n	1000fed6 <at_ble_event_get+0xba>
1000feb6:	4b93      	ldr	r3, [pc, #588]	; (10010104 <at_ble_event_get+0x2e8>)
1000feb8:	4a92      	ldr	r2, [pc, #584]	; (10010104 <at_ble_event_get+0x2e8>)
1000feba:	8898      	ldrh	r0, [r3, #4]
1000febc:	88d9      	ldrh	r1, [r3, #6]
1000febe:	68d2      	ldr	r2, [r2, #12]
1000fec0:	891b      	ldrh	r3, [r3, #8]
1000fec2:	4f91      	ldr	r7, [pc, #580]	; (10010108 <at_ble_event_get+0x2ec>)
1000fec4:	47b8      	blx	r7
1000fec6:	2210      	movs	r2, #16
1000fec8:	4b90      	ldr	r3, [pc, #576]	; (1001010c <at_ble_event_get+0x2f0>)
1000feca:	488e      	ldr	r0, [pc, #568]	; (10010104 <at_ble_event_get+0x2e8>)
1000fecc:	2100      	movs	r1, #0
1000fece:	4798      	blx	r3
1000fed0:	2300      	movs	r3, #0
1000fed2:	4a8b      	ldr	r2, [pc, #556]	; (10010100 <at_ble_event_get+0x2e4>)
1000fed4:	7013      	strb	r3, [r2, #0]
1000fed6:	9b02      	ldr	r3, [sp, #8]
1000fed8:	2b00      	cmp	r3, #0
1000feda:	d114      	bne.n	1000ff06 <at_ble_event_get+0xea>
1000fedc:	4b8c      	ldr	r3, [pc, #560]	; (10010110 <at_ble_event_get+0x2f4>)
1000fede:	429c      	cmp	r4, r3
1000fee0:	d009      	beq.n	1000fef6 <at_ble_event_get+0xda>
1000fee2:	4b8c      	ldr	r3, [pc, #560]	; (10010114 <at_ble_event_get+0x2f8>)
1000fee4:	429c      	cmp	r4, r3
1000fee6:	d127      	bne.n	1000ff38 <at_ble_event_get+0x11c>
1000fee8:	233a      	movs	r3, #58	; 0x3a
1000feea:	9a03      	ldr	r2, [sp, #12]
1000feec:	7013      	strb	r3, [r2, #0]
1000feee:	2300      	movs	r3, #0
1000fef0:	9302      	str	r3, [sp, #8]
1000fef2:	1c1d      	adds	r5, r3, #0
1000fef4:	e007      	b.n	1000ff06 <at_ble_event_get+0xea>
1000fef6:	9b01      	ldr	r3, [sp, #4]
1000fef8:	42a3      	cmp	r3, r4
1000fefa:	d000      	beq.n	1000fefe <at_ble_event_get+0xe2>
1000fefc:	e28a      	b.n	10010414 <at_ble_event_get+0x5f8>
1000fefe:	2338      	movs	r3, #56	; 0x38
1000ff00:	9a03      	ldr	r2, [sp, #12]
1000ff02:	7013      	strb	r3, [r2, #0]
1000ff04:	602e      	str	r6, [r5, #0]
1000ff06:	9b03      	ldr	r3, [sp, #12]
1000ff08:	781b      	ldrb	r3, [r3, #0]
1000ff0a:	2b3b      	cmp	r3, #59	; 0x3b
1000ff0c:	d101      	bne.n	1000ff12 <at_ble_event_get+0xf6>
1000ff0e:	4b82      	ldr	r3, [pc, #520]	; (10010118 <at_ble_event_get+0x2fc>)
1000ff10:	4798      	blx	r3
1000ff12:	9b03      	ldr	r3, [sp, #12]
1000ff14:	781b      	ldrb	r3, [r3, #0]
1000ff16:	2b3b      	cmp	r3, #59	; 0x3b
1000ff18:	d003      	beq.n	1000ff22 <at_ble_event_get+0x106>
1000ff1a:	9b05      	ldr	r3, [sp, #20]
1000ff1c:	3303      	adds	r3, #3
1000ff1e:	d904      	bls.n	1000ff2a <at_ble_event_get+0x10e>
1000ff20:	e283      	b.n	1001042a <at_ble_event_get+0x60e>
1000ff22:	9b02      	ldr	r3, [sp, #8]
1000ff24:	2b00      	cmp	r3, #0
1000ff26:	d088      	beq.n	1000fe3a <at_ble_event_get+0x1e>
1000ff28:	e7f7      	b.n	1000ff1a <at_ble_event_get+0xfe>
1000ff2a:	9b02      	ldr	r3, [sp, #8]
1000ff2c:	2bd0      	cmp	r3, #208	; 0xd0
1000ff2e:	d100      	bne.n	1000ff32 <at_ble_event_get+0x116>
1000ff30:	e27b      	b.n	1001042a <at_ble_event_get+0x60e>
1000ff32:	4b7a      	ldr	r3, [pc, #488]	; (1001011c <at_ble_event_get+0x300>)
1000ff34:	4798      	blx	r3
1000ff36:	e278      	b.n	1001042a <at_ble_event_get+0x60e>
1000ff38:	9b01      	ldr	r3, [sp, #4]
1000ff3a:	2bbb      	cmp	r3, #187	; 0xbb
1000ff3c:	d125      	bne.n	1000ff8a <at_ble_event_get+0x16e>
1000ff3e:	2cbb      	cmp	r4, #187	; 0xbb
1000ff40:	d123      	bne.n	1000ff8a <at_ble_event_get+0x16e>
1000ff42:	466b      	mov	r3, sp
1000ff44:	891b      	ldrh	r3, [r3, #8]
1000ff46:	80ab      	strh	r3, [r5, #4]
1000ff48:	78b3      	ldrb	r3, [r6, #2]
1000ff4a:	7872      	ldrb	r2, [r6, #1]
1000ff4c:	78f0      	ldrb	r0, [r6, #3]
1000ff4e:	021b      	lsls	r3, r3, #8
1000ff50:	4313      	orrs	r3, r2
1000ff52:	7971      	ldrb	r1, [r6, #5]
1000ff54:	7932      	ldrb	r2, [r6, #4]
1000ff56:	70a8      	strb	r0, [r5, #2]
1000ff58:	4871      	ldr	r0, [pc, #452]	; (10010120 <at_ble_event_get+0x304>)
1000ff5a:	802b      	strh	r3, [r5, #0]
1000ff5c:	4283      	cmp	r3, r0
1000ff5e:	d806      	bhi.n	1000ff6e <at_ble_event_get+0x152>
1000ff60:	4a70      	ldr	r2, [pc, #448]	; (10010124 <at_ble_event_get+0x308>)
1000ff62:	4293      	cmp	r3, r2
1000ff64:	d20b      	bcs.n	1000ff7e <at_ble_event_get+0x162>
1000ff66:	4a70      	ldr	r2, [pc, #448]	; (10010128 <at_ble_event_get+0x30c>)
1000ff68:	4293      	cmp	r3, r2
1000ff6a:	d008      	beq.n	1000ff7e <at_ble_event_get+0x162>
1000ff6c:	e009      	b.n	1000ff82 <at_ble_event_get+0x166>
1000ff6e:	486f      	ldr	r0, [pc, #444]	; (1001012c <at_ble_event_get+0x310>)
1000ff70:	4283      	cmp	r3, r0
1000ff72:	d106      	bne.n	1000ff82 <at_ble_event_get+0x166>
1000ff74:	020b      	lsls	r3, r1, #8
1000ff76:	4313      	orrs	r3, r2
1000ff78:	80ab      	strh	r3, [r5, #4]
1000ff7a:	2337      	movs	r3, #55	; 0x37
1000ff7c:	e002      	b.n	1000ff84 <at_ble_event_get+0x168>
1000ff7e:	2336      	movs	r3, #54	; 0x36
1000ff80:	e000      	b.n	1000ff84 <at_ble_event_get+0x168>
1000ff82:	2300      	movs	r3, #0
1000ff84:	9a03      	ldr	r2, [sp, #12]
1000ff86:	7013      	strb	r3, [r2, #0]
1000ff88:	e7bd      	b.n	1000ff06 <at_ble_event_get+0xea>
1000ff8a:	4b69      	ldr	r3, [pc, #420]	; (10010130 <at_ble_event_get+0x314>)
1000ff8c:	429c      	cmp	r4, r3
1000ff8e:	d100      	bne.n	1000ff92 <at_ble_event_get+0x176>
1000ff90:	e144      	b.n	1001021c <at_ble_event_get+0x400>
1000ff92:	d865      	bhi.n	10010060 <at_ble_event_get+0x244>
1000ff94:	4b67      	ldr	r3, [pc, #412]	; (10010134 <at_ble_event_get+0x318>)
1000ff96:	429c      	cmp	r4, r3
1000ff98:	d100      	bne.n	1000ff9c <at_ble_event_get+0x180>
1000ff9a:	e1d5      	b.n	10010348 <at_ble_event_get+0x52c>
1000ff9c:	d82f      	bhi.n	1000fffe <at_ble_event_get+0x1e2>
1000ff9e:	4b66      	ldr	r3, [pc, #408]	; (10010138 <at_ble_event_get+0x31c>)
1000ffa0:	429c      	cmp	r4, r3
1000ffa2:	d100      	bne.n	1000ffa6 <at_ble_event_get+0x18a>
1000ffa4:	e1e0      	b.n	10010368 <at_ble_event_get+0x54c>
1000ffa6:	d813      	bhi.n	1000ffd0 <at_ble_event_get+0x1b4>
1000ffa8:	4b64      	ldr	r3, [pc, #400]	; (1001013c <at_ble_event_get+0x320>)
1000ffaa:	429c      	cmp	r4, r3
1000ffac:	d100      	bne.n	1000ffb0 <at_ble_event_get+0x194>
1000ffae:	e1a3      	b.n	100102f8 <at_ble_event_get+0x4dc>
1000ffb0:	d804      	bhi.n	1000ffbc <at_ble_event_get+0x1a0>
1000ffb2:	2638      	movs	r6, #56	; 0x38
1000ffb4:	42b4      	cmp	r4, r6
1000ffb6:	d100      	bne.n	1000ffba <at_ble_event_get+0x19e>
1000ffb8:	e225      	b.n	10010406 <at_ble_event_get+0x5ea>
1000ffba:	e117      	b.n	100101ec <at_ble_event_get+0x3d0>
1000ffbc:	4b60      	ldr	r3, [pc, #384]	; (10010140 <at_ble_event_get+0x324>)
1000ffbe:	429c      	cmp	r4, r3
1000ffc0:	d100      	bne.n	1000ffc4 <at_ble_event_get+0x1a8>
1000ffc2:	e19f      	b.n	10010304 <at_ble_event_get+0x4e8>
1000ffc4:	33fe      	adds	r3, #254	; 0xfe
1000ffc6:	33ff      	adds	r3, #255	; 0xff
1000ffc8:	429c      	cmp	r4, r3
1000ffca:	d100      	bne.n	1000ffce <at_ble_event_get+0x1b2>
1000ffcc:	e1d3      	b.n	10010376 <at_ble_event_get+0x55a>
1000ffce:	e10d      	b.n	100101ec <at_ble_event_get+0x3d0>
1000ffd0:	4b5c      	ldr	r3, [pc, #368]	; (10010144 <at_ble_event_get+0x328>)
1000ffd2:	429c      	cmp	r4, r3
1000ffd4:	d100      	bne.n	1000ffd8 <at_ble_event_get+0x1bc>
1000ffd6:	e1a9      	b.n	1001032c <at_ble_event_get+0x510>
1000ffd8:	d808      	bhi.n	1000ffec <at_ble_event_get+0x1d0>
1000ffda:	4b5b      	ldr	r3, [pc, #364]	; (10010148 <at_ble_event_get+0x32c>)
1000ffdc:	429c      	cmp	r4, r3
1000ffde:	d100      	bne.n	1000ffe2 <at_ble_event_get+0x1c6>
1000ffe0:	e196      	b.n	10010310 <at_ble_event_get+0x4f4>
1000ffe2:	4b5a      	ldr	r3, [pc, #360]	; (1001014c <at_ble_event_get+0x330>)
1000ffe4:	429c      	cmp	r4, r3
1000ffe6:	d100      	bne.n	1000ffea <at_ble_event_get+0x1ce>
1000ffe8:	e199      	b.n	1001031e <at_ble_event_get+0x502>
1000ffea:	e0ff      	b.n	100101ec <at_ble_event_get+0x3d0>
1000ffec:	4b58      	ldr	r3, [pc, #352]	; (10010150 <at_ble_event_get+0x334>)
1000ffee:	429c      	cmp	r4, r3
1000fff0:	d100      	bne.n	1000fff4 <at_ble_event_get+0x1d8>
1000fff2:	e1a2      	b.n	1001033a <at_ble_event_get+0x51e>
1000fff4:	4b57      	ldr	r3, [pc, #348]	; (10010154 <at_ble_event_get+0x338>)
1000fff6:	429c      	cmp	r4, r3
1000fff8:	d100      	bne.n	1000fffc <at_ble_event_get+0x1e0>
1000fffa:	e1d4      	b.n	100103a6 <at_ble_event_get+0x58a>
1000fffc:	e0f6      	b.n	100101ec <at_ble_event_get+0x3d0>
1000fffe:	4b56      	ldr	r3, [pc, #344]	; (10010158 <at_ble_event_get+0x33c>)
10010000:	429c      	cmp	r4, r3
10010002:	d100      	bne.n	10010006 <at_ble_event_get+0x1ea>
10010004:	e1c8      	b.n	10010398 <at_ble_event_get+0x57c>
10010006:	d812      	bhi.n	1001002e <at_ble_event_get+0x212>
10010008:	4b54      	ldr	r3, [pc, #336]	; (1001015c <at_ble_event_get+0x340>)
1001000a:	429c      	cmp	r4, r3
1001000c:	d100      	bne.n	10010010 <at_ble_event_get+0x1f4>
1001000e:	e1d1      	b.n	100103b4 <at_ble_event_get+0x598>
10010010:	d804      	bhi.n	1001001c <at_ble_event_get+0x200>
10010012:	4b53      	ldr	r3, [pc, #332]	; (10010160 <at_ble_event_get+0x344>)
10010014:	429c      	cmp	r4, r3
10010016:	d100      	bne.n	1001001a <at_ble_event_get+0x1fe>
10010018:	e19b      	b.n	10010352 <at_ble_event_get+0x536>
1001001a:	e0e7      	b.n	100101ec <at_ble_event_get+0x3d0>
1001001c:	4b51      	ldr	r3, [pc, #324]	; (10010164 <at_ble_event_get+0x348>)
1001001e:	429c      	cmp	r4, r3
10010020:	d100      	bne.n	10010024 <at_ble_event_get+0x208>
10010022:	e1ad      	b.n	10010380 <at_ble_event_get+0x564>
10010024:	4b50      	ldr	r3, [pc, #320]	; (10010168 <at_ble_event_get+0x34c>)
10010026:	429c      	cmp	r4, r3
10010028:	d100      	bne.n	1001002c <at_ble_event_get+0x210>
1001002a:	e1b0      	b.n	1001038e <at_ble_event_get+0x572>
1001002c:	e0de      	b.n	100101ec <at_ble_event_get+0x3d0>
1001002e:	4b4f      	ldr	r3, [pc, #316]	; (1001016c <at_ble_event_get+0x350>)
10010030:	429c      	cmp	r4, r3
10010032:	d100      	bne.n	10010036 <at_ble_event_get+0x21a>
10010034:	e0e0      	b.n	100101f8 <at_ble_event_get+0x3dc>
10010036:	d809      	bhi.n	1001004c <at_ble_event_get+0x230>
10010038:	3b08      	subs	r3, #8
1001003a:	429c      	cmp	r4, r3
1001003c:	d100      	bne.n	10010040 <at_ble_event_get+0x224>
1001003e:	e0d7      	b.n	100101f0 <at_ble_event_get+0x3d4>
10010040:	4b4b      	ldr	r3, [pc, #300]	; (10010170 <at_ble_event_get+0x354>)
10010042:	2639      	movs	r6, #57	; 0x39
10010044:	429c      	cmp	r4, r3
10010046:	d100      	bne.n	1001004a <at_ble_event_get+0x22e>
10010048:	e1dd      	b.n	10010406 <at_ble_event_get+0x5ea>
1001004a:	e0cf      	b.n	100101ec <at_ble_event_get+0x3d0>
1001004c:	23d1      	movs	r3, #209	; 0xd1
1001004e:	011b      	lsls	r3, r3, #4
10010050:	429c      	cmp	r4, r3
10010052:	d100      	bne.n	10010056 <at_ble_event_get+0x23a>
10010054:	e0d6      	b.n	10010204 <at_ble_event_get+0x3e8>
10010056:	4b47      	ldr	r3, [pc, #284]	; (10010174 <at_ble_event_get+0x358>)
10010058:	429c      	cmp	r4, r3
1001005a:	d100      	bne.n	1001005e <at_ble_event_get+0x242>
1001005c:	e0d8      	b.n	10010210 <at_ble_event_get+0x3f4>
1001005e:	e0c5      	b.n	100101ec <at_ble_event_get+0x3d0>
10010060:	4b45      	ldr	r3, [pc, #276]	; (10010178 <at_ble_event_get+0x35c>)
10010062:	429c      	cmp	r4, r3
10010064:	d100      	bne.n	10010068 <at_ble_event_get+0x24c>
10010066:	e117      	b.n	10010298 <at_ble_event_get+0x47c>
10010068:	d82e      	bhi.n	100100c8 <at_ble_event_get+0x2ac>
1001006a:	4b44      	ldr	r3, [pc, #272]	; (1001017c <at_ble_event_get+0x360>)
1001006c:	429c      	cmp	r4, r3
1001006e:	d100      	bne.n	10010072 <at_ble_event_get+0x256>
10010070:	e13d      	b.n	100102ee <at_ble_event_get+0x4d2>
10010072:	d812      	bhi.n	1001009a <at_ble_event_get+0x27e>
10010074:	4b42      	ldr	r3, [pc, #264]	; (10010180 <at_ble_event_get+0x364>)
10010076:	429c      	cmp	r4, r3
10010078:	d100      	bne.n	1001007c <at_ble_event_get+0x260>
1001007a:	e0e8      	b.n	1001024e <at_ble_event_get+0x432>
1001007c:	d804      	bhi.n	10010088 <at_ble_event_get+0x26c>
1001007e:	3b03      	subs	r3, #3
10010080:	429c      	cmp	r4, r3
10010082:	d100      	bne.n	10010086 <at_ble_event_get+0x26a>
10010084:	e0d0      	b.n	10010228 <at_ble_event_get+0x40c>
10010086:	e0b1      	b.n	100101ec <at_ble_event_get+0x3d0>
10010088:	4b3e      	ldr	r3, [pc, #248]	; (10010184 <at_ble_event_get+0x368>)
1001008a:	429c      	cmp	r4, r3
1001008c:	d100      	bne.n	10010090 <at_ble_event_get+0x274>
1001008e:	e0d0      	b.n	10010232 <at_ble_event_get+0x416>
10010090:	4b3d      	ldr	r3, [pc, #244]	; (10010188 <at_ble_event_get+0x36c>)
10010092:	429c      	cmp	r4, r3
10010094:	d100      	bne.n	10010098 <at_ble_event_get+0x27c>
10010096:	e0f9      	b.n	1001028c <at_ble_event_get+0x470>
10010098:	e0a8      	b.n	100101ec <at_ble_event_get+0x3d0>
1001009a:	4b3c      	ldr	r3, [pc, #240]	; (1001018c <at_ble_event_get+0x370>)
1001009c:	429c      	cmp	r4, r3
1001009e:	d100      	bne.n	100100a2 <at_ble_event_get+0x286>
100100a0:	e0db      	b.n	1001025a <at_ble_event_get+0x43e>
100100a2:	d808      	bhi.n	100100b6 <at_ble_event_get+0x29a>
100100a4:	4b3a      	ldr	r3, [pc, #232]	; (10010190 <at_ble_event_get+0x374>)
100100a6:	429c      	cmp	r4, r3
100100a8:	d100      	bne.n	100100ac <at_ble_event_get+0x290>
100100aa:	e11b      	b.n	100102e4 <at_ble_event_get+0x4c8>
100100ac:	4b39      	ldr	r3, [pc, #228]	; (10010194 <at_ble_event_get+0x378>)
100100ae:	429c      	cmp	r4, r3
100100b0:	d100      	bne.n	100100b4 <at_ble_event_get+0x298>
100100b2:	e0d8      	b.n	10010266 <at_ble_event_get+0x44a>
100100b4:	e09a      	b.n	100101ec <at_ble_event_get+0x3d0>
100100b6:	4b38      	ldr	r3, [pc, #224]	; (10010198 <at_ble_event_get+0x37c>)
100100b8:	429c      	cmp	r4, r3
100100ba:	d100      	bne.n	100100be <at_ble_event_get+0x2a2>
100100bc:	e0d8      	b.n	10010270 <at_ble_event_get+0x454>
100100be:	4b37      	ldr	r3, [pc, #220]	; (1001019c <at_ble_event_get+0x380>)
100100c0:	429c      	cmp	r4, r3
100100c2:	d100      	bne.n	100100c6 <at_ble_event_get+0x2aa>
100100c4:	e0db      	b.n	1001027e <at_ble_event_get+0x462>
100100c6:	e091      	b.n	100101ec <at_ble_event_get+0x3d0>
100100c8:	4b35      	ldr	r3, [pc, #212]	; (100101a0 <at_ble_event_get+0x384>)
100100ca:	429c      	cmp	r4, r3
100100cc:	d100      	bne.n	100100d0 <at_ble_event_get+0x2b4>
100100ce:	e0f7      	b.n	100102c0 <at_ble_event_get+0x4a4>
100100d0:	d876      	bhi.n	100101c0 <at_ble_event_get+0x3a4>
100100d2:	4b34      	ldr	r3, [pc, #208]	; (100101a4 <at_ble_event_get+0x388>)
100100d4:	429c      	cmp	r4, r3
100100d6:	d100      	bne.n	100100da <at_ble_event_get+0x2be>
100100d8:	e0f8      	b.n	100102cc <at_ble_event_get+0x4b0>
100100da:	d869      	bhi.n	100101b0 <at_ble_event_get+0x394>
100100dc:	4b32      	ldr	r3, [pc, #200]	; (100101a8 <at_ble_event_get+0x38c>)
100100de:	429c      	cmp	r4, r3
100100e0:	d100      	bne.n	100100e4 <at_ble_event_get+0x2c8>
100100e2:	e0e0      	b.n	100102a6 <at_ble_event_get+0x48a>
100100e4:	4b31      	ldr	r3, [pc, #196]	; (100101ac <at_ble_event_get+0x390>)
100100e6:	429c      	cmp	r4, r3
100100e8:	d100      	bne.n	100100ec <at_ble_event_get+0x2d0>
100100ea:	e0a9      	b.n	10010240 <at_ble_event_get+0x424>
100100ec:	e07e      	b.n	100101ec <at_ble_event_get+0x3d0>
100100ee:	46c0      	nop			; (mov r8, r8)
100100f0:	10011821 	.word	0x10011821
100100f4:	1001a0c4 	.word	0x1001a0c4
100100f8:	1000f475 	.word	0x1000f475
100100fc:	1001a0c8 	.word	0x1001a0c8
10010100:	1001a0c0 	.word	0x1001a0c0
10010104:	1001a0b0 	.word	0x1001a0b0
10010108:	1000fd05 	.word	0x1000fd05
1001010c:	10015239 	.word	0x10015239
10010110:	0000ffff 	.word	0x0000ffff
10010114:	0000fffe 	.word	0x0000fffe
10010118:	1000f6ed 	.word	0x1000f6ed
1001011c:	10011823 	.word	0x10011823
10010120:	0000201e 	.word	0x0000201e
10010124:	0000201d 	.word	0x0000201d
10010128:	00000c03 	.word	0x00000c03
1001012c:	0000201f 	.word	0x0000201f
10010130:	00000d1c 	.word	0x00000d1c
10010134:	00000c0c 	.word	0x00000c0c
10010138:	00000c02 	.word	0x00000c02
1001013c:	00000a02 	.word	0x00000a02
10010140:	00000a03 	.word	0x00000a03
10010144:	00000c06 	.word	0x00000c06
10010148:	00000c04 	.word	0x00000c04
1001014c:	00000c05 	.word	0x00000c05
10010150:	00000c07 	.word	0x00000c07
10010154:	00000c09 	.word	0x00000c09
10010158:	00000c17 	.word	0x00000c17
1001015c:	00000c12 	.word	0x00000c12
10010160:	00000c0d 	.word	0x00000c0d
10010164:	00000c13 	.word	0x00000c13
10010168:	00000c15 	.word	0x00000c15
1001016c:	00000d08 	.word	0x00000d08
10010170:	00000d01 	.word	0x00000d01
10010174:	00000d15 	.word	0x00000d15
10010178:	00000e1b 	.word	0x00000e1b
1001017c:	00000e0f 	.word	0x00000e0f
10010180:	00000e03 	.word	0x00000e03
10010184:	00000e06 	.word	0x00000e06
10010188:	00000e0a 	.word	0x00000e0a
1001018c:	00000e15 	.word	0x00000e15
10010190:	00000e11 	.word	0x00000e11
10010194:	00000e13 	.word	0x00000e13
10010198:	00000e17 	.word	0x00000e17
1001019c:	00000e19 	.word	0x00000e19
100101a0:	00000e27 	.word	0x00000e27
100101a4:	00000e21 	.word	0x00000e21
100101a8:	00000e1c 	.word	0x00000e1c
100101ac:	00000e1d 	.word	0x00000e1d
100101b0:	4b9f      	ldr	r3, [pc, #636]	; (10010430 <at_ble_event_get+0x614>)
100101b2:	429c      	cmp	r4, r3
100101b4:	d07e      	beq.n	100102b4 <at_ble_event_get+0x498>
100101b6:	4b9f      	ldr	r3, [pc, #636]	; (10010434 <at_ble_event_get+0x618>)
100101b8:	429c      	cmp	r4, r3
100101ba:	d100      	bne.n	100101be <at_ble_event_get+0x3a2>
100101bc:	e08c      	b.n	100102d8 <at_ble_event_get+0x4bc>
100101be:	e015      	b.n	100101ec <at_ble_event_get+0x3d0>
100101c0:	4b9d      	ldr	r3, [pc, #628]	; (10010438 <at_ble_event_get+0x61c>)
100101c2:	429c      	cmp	r4, r3
100101c4:	d100      	bne.n	100101c8 <at_ble_event_get+0x3ac>
100101c6:	e10a      	b.n	100103de <at_ble_event_get+0x5c2>
100101c8:	d808      	bhi.n	100101dc <at_ble_event_get+0x3c0>
100101ca:	4b9c      	ldr	r3, [pc, #624]	; (1001043c <at_ble_event_get+0x620>)
100101cc:	429c      	cmp	r4, r3
100101ce:	d100      	bne.n	100101d2 <at_ble_event_get+0x3b6>
100101d0:	e0f7      	b.n	100103c2 <at_ble_event_get+0x5a6>
100101d2:	4b9b      	ldr	r3, [pc, #620]	; (10010440 <at_ble_event_get+0x624>)
100101d4:	429c      	cmp	r4, r3
100101d6:	d100      	bne.n	100101da <at_ble_event_get+0x3be>
100101d8:	e0fa      	b.n	100103d0 <at_ble_event_get+0x5b4>
100101da:	e007      	b.n	100101ec <at_ble_event_get+0x3d0>
100101dc:	4b99      	ldr	r3, [pc, #612]	; (10010444 <at_ble_event_get+0x628>)
100101de:	429c      	cmp	r4, r3
100101e0:	d100      	bne.n	100101e4 <at_ble_event_get+0x3c8>
100101e2:	e103      	b.n	100103ec <at_ble_event_get+0x5d0>
100101e4:	4b98      	ldr	r3, [pc, #608]	; (10010448 <at_ble_event_get+0x62c>)
100101e6:	429c      	cmp	r4, r3
100101e8:	d100      	bne.n	100101ec <at_ble_event_get+0x3d0>
100101ea:	e106      	b.n	100103fa <at_ble_event_get+0x5de>
100101ec:	2600      	movs	r6, #0
100101ee:	e10a      	b.n	10010406 <at_ble_event_get+0x5ea>
100101f0:	1c30      	adds	r0, r6, #0
100101f2:	1c29      	adds	r1, r5, #0
100101f4:	4b95      	ldr	r3, [pc, #596]	; (1001044c <at_ble_event_get+0x630>)
100101f6:	e014      	b.n	10010222 <at_ble_event_get+0x406>
100101f8:	1c30      	adds	r0, r6, #0
100101fa:	1c29      	adds	r1, r5, #0
100101fc:	4b94      	ldr	r3, [pc, #592]	; (10010450 <at_ble_event_get+0x634>)
100101fe:	4798      	blx	r3
10010200:	2604      	movs	r6, #4
10010202:	e100      	b.n	10010406 <at_ble_event_get+0x5ea>
10010204:	1c30      	adds	r0, r6, #0
10010206:	1c29      	adds	r1, r5, #0
10010208:	4b92      	ldr	r3, [pc, #584]	; (10010454 <at_ble_event_get+0x638>)
1001020a:	4798      	blx	r3
1001020c:	2601      	movs	r6, #1
1001020e:	e0fa      	b.n	10010406 <at_ble_event_get+0x5ea>
10010210:	1c30      	adds	r0, r6, #0
10010212:	1c29      	adds	r1, r5, #0
10010214:	4b90      	ldr	r3, [pc, #576]	; (10010458 <at_ble_event_get+0x63c>)
10010216:	4798      	blx	r3
10010218:	260f      	movs	r6, #15
1001021a:	e0f4      	b.n	10010406 <at_ble_event_get+0x5ea>
1001021c:	1c30      	adds	r0, r6, #0
1001021e:	1c29      	adds	r1, r5, #0
10010220:	4b8e      	ldr	r3, [pc, #568]	; (1001045c <at_ble_event_get+0x640>)
10010222:	4798      	blx	r3
10010224:	1c06      	adds	r6, r0, #0
10010226:	e0ee      	b.n	10010406 <at_ble_event_get+0x5ea>
10010228:	9801      	ldr	r0, [sp, #4]
1001022a:	1c31      	adds	r1, r6, #0
1001022c:	1c2a      	adds	r2, r5, #0
1001022e:	4b8c      	ldr	r3, [pc, #560]	; (10010460 <at_ble_event_get+0x644>)
10010230:	e017      	b.n	10010262 <at_ble_event_get+0x446>
10010232:	1c31      	adds	r1, r6, #0
10010234:	9801      	ldr	r0, [sp, #4]
10010236:	1c2a      	adds	r2, r5, #0
10010238:	4b8a      	ldr	r3, [pc, #552]	; (10010464 <at_ble_event_get+0x648>)
1001023a:	4798      	blx	r3
1001023c:	2611      	movs	r6, #17
1001023e:	e0e2      	b.n	10010406 <at_ble_event_get+0x5ea>
10010240:	1c31      	adds	r1, r6, #0
10010242:	9801      	ldr	r0, [sp, #4]
10010244:	1c2a      	adds	r2, r5, #0
10010246:	4b88      	ldr	r3, [pc, #544]	; (10010468 <at_ble_event_get+0x64c>)
10010248:	4798      	blx	r3
1001024a:	2612      	movs	r6, #18
1001024c:	e0db      	b.n	10010406 <at_ble_event_get+0x5ea>
1001024e:	1c30      	adds	r0, r6, #0
10010250:	1c29      	adds	r1, r5, #0
10010252:	4b86      	ldr	r3, [pc, #536]	; (1001046c <at_ble_event_get+0x650>)
10010254:	4798      	blx	r3
10010256:	2606      	movs	r6, #6
10010258:	e0d5      	b.n	10010406 <at_ble_event_get+0x5ea>
1001025a:	1c31      	adds	r1, r6, #0
1001025c:	1c2a      	adds	r2, r5, #0
1001025e:	9801      	ldr	r0, [sp, #4]
10010260:	4b83      	ldr	r3, [pc, #524]	; (10010470 <at_ble_event_get+0x654>)
10010262:	4798      	blx	r3
10010264:	e7de      	b.n	10010224 <at_ble_event_get+0x408>
10010266:	9801      	ldr	r0, [sp, #4]
10010268:	1c31      	adds	r1, r6, #0
1001026a:	1c2a      	adds	r2, r5, #0
1001026c:	4b81      	ldr	r3, [pc, #516]	; (10010474 <at_ble_event_get+0x658>)
1001026e:	e7f8      	b.n	10010262 <at_ble_event_get+0x446>
10010270:	1c31      	adds	r1, r6, #0
10010272:	9801      	ldr	r0, [sp, #4]
10010274:	1c2a      	adds	r2, r5, #0
10010276:	4b80      	ldr	r3, [pc, #512]	; (10010478 <at_ble_event_get+0x65c>)
10010278:	4798      	blx	r3
1001027a:	260d      	movs	r6, #13
1001027c:	e0c3      	b.n	10010406 <at_ble_event_get+0x5ea>
1001027e:	1c31      	adds	r1, r6, #0
10010280:	9801      	ldr	r0, [sp, #4]
10010282:	1c2a      	adds	r2, r5, #0
10010284:	4b7d      	ldr	r3, [pc, #500]	; (1001047c <at_ble_event_get+0x660>)
10010286:	4798      	blx	r3
10010288:	260e      	movs	r6, #14
1001028a:	e0bc      	b.n	10010406 <at_ble_event_get+0x5ea>
1001028c:	9801      	ldr	r0, [sp, #4]
1001028e:	1c31      	adds	r1, r6, #0
10010290:	1c2a      	adds	r2, r5, #0
10010292:	4b7b      	ldr	r3, [pc, #492]	; (10010480 <at_ble_event_get+0x664>)
10010294:	4798      	blx	r3
10010296:	e084      	b.n	100103a2 <at_ble_event_get+0x586>
10010298:	1c31      	adds	r1, r6, #0
1001029a:	9801      	ldr	r0, [sp, #4]
1001029c:	1c2a      	adds	r2, r5, #0
1001029e:	4b79      	ldr	r3, [pc, #484]	; (10010484 <at_ble_event_get+0x668>)
100102a0:	4798      	blx	r3
100102a2:	260b      	movs	r6, #11
100102a4:	e0af      	b.n	10010406 <at_ble_event_get+0x5ea>
100102a6:	1c31      	adds	r1, r6, #0
100102a8:	9801      	ldr	r0, [sp, #4]
100102aa:	1c2a      	adds	r2, r5, #0
100102ac:	4b76      	ldr	r3, [pc, #472]	; (10010488 <at_ble_event_get+0x66c>)
100102ae:	4798      	blx	r3
100102b0:	2610      	movs	r6, #16
100102b2:	e0a8      	b.n	10010406 <at_ble_event_get+0x5ea>
100102b4:	1c30      	adds	r0, r6, #0
100102b6:	1c29      	adds	r1, r5, #0
100102b8:	4b74      	ldr	r3, [pc, #464]	; (1001048c <at_ble_event_get+0x670>)
100102ba:	4798      	blx	r3
100102bc:	2628      	movs	r6, #40	; 0x28
100102be:	e0a2      	b.n	10010406 <at_ble_event_get+0x5ea>
100102c0:	1c30      	adds	r0, r6, #0
100102c2:	1c29      	adds	r1, r5, #0
100102c4:	4b72      	ldr	r3, [pc, #456]	; (10010490 <at_ble_event_get+0x674>)
100102c6:	4798      	blx	r3
100102c8:	2629      	movs	r6, #41	; 0x29
100102ca:	e09c      	b.n	10010406 <at_ble_event_get+0x5ea>
100102cc:	1c30      	adds	r0, r6, #0
100102ce:	1c29      	adds	r1, r5, #0
100102d0:	4b70      	ldr	r3, [pc, #448]	; (10010494 <at_ble_event_get+0x678>)
100102d2:	4798      	blx	r3
100102d4:	2627      	movs	r6, #39	; 0x27
100102d6:	e096      	b.n	10010406 <at_ble_event_get+0x5ea>
100102d8:	1c30      	adds	r0, r6, #0
100102da:	1c29      	adds	r1, r5, #0
100102dc:	4b6e      	ldr	r3, [pc, #440]	; (10010498 <at_ble_event_get+0x67c>)
100102de:	4798      	blx	r3
100102e0:	262a      	movs	r6, #42	; 0x2a
100102e2:	e090      	b.n	10010406 <at_ble_event_get+0x5ea>
100102e4:	9801      	ldr	r0, [sp, #4]
100102e6:	1c31      	adds	r1, r6, #0
100102e8:	1c2a      	adds	r2, r5, #0
100102ea:	4b6c      	ldr	r3, [pc, #432]	; (1001049c <at_ble_event_get+0x680>)
100102ec:	e7b9      	b.n	10010262 <at_ble_event_get+0x446>
100102ee:	9801      	ldr	r0, [sp, #4]
100102f0:	1c31      	adds	r1, r6, #0
100102f2:	1c2a      	adds	r2, r5, #0
100102f4:	4b6a      	ldr	r3, [pc, #424]	; (100104a0 <at_ble_event_get+0x684>)
100102f6:	e7b4      	b.n	10010262 <at_ble_event_get+0x446>
100102f8:	1c30      	adds	r0, r6, #0
100102fa:	1c29      	adds	r1, r5, #0
100102fc:	4b69      	ldr	r3, [pc, #420]	; (100104a4 <at_ble_event_get+0x688>)
100102fe:	4798      	blx	r3
10010300:	262b      	movs	r6, #43	; 0x2b
10010302:	e080      	b.n	10010406 <at_ble_event_get+0x5ea>
10010304:	1c30      	adds	r0, r6, #0
10010306:	1c29      	adds	r1, r5, #0
10010308:	4b67      	ldr	r3, [pc, #412]	; (100104a8 <at_ble_event_get+0x68c>)
1001030a:	4798      	blx	r3
1001030c:	262c      	movs	r6, #44	; 0x2c
1001030e:	e07a      	b.n	10010406 <at_ble_event_get+0x5ea>
10010310:	1c31      	adds	r1, r6, #0
10010312:	9801      	ldr	r0, [sp, #4]
10010314:	1c2a      	adds	r2, r5, #0
10010316:	4b65      	ldr	r3, [pc, #404]	; (100104ac <at_ble_event_get+0x690>)
10010318:	4798      	blx	r3
1001031a:	2613      	movs	r6, #19
1001031c:	e073      	b.n	10010406 <at_ble_event_get+0x5ea>
1001031e:	1c31      	adds	r1, r6, #0
10010320:	9801      	ldr	r0, [sp, #4]
10010322:	1c2a      	adds	r2, r5, #0
10010324:	4b62      	ldr	r3, [pc, #392]	; (100104b0 <at_ble_event_get+0x694>)
10010326:	4798      	blx	r3
10010328:	2614      	movs	r6, #20
1001032a:	e06c      	b.n	10010406 <at_ble_event_get+0x5ea>
1001032c:	1c31      	adds	r1, r6, #0
1001032e:	9801      	ldr	r0, [sp, #4]
10010330:	1c2a      	adds	r2, r5, #0
10010332:	4b60      	ldr	r3, [pc, #384]	; (100104b4 <at_ble_event_get+0x698>)
10010334:	4798      	blx	r3
10010336:	2615      	movs	r6, #21
10010338:	e065      	b.n	10010406 <at_ble_event_get+0x5ea>
1001033a:	1c31      	adds	r1, r6, #0
1001033c:	9801      	ldr	r0, [sp, #4]
1001033e:	1c2a      	adds	r2, r5, #0
10010340:	4b5d      	ldr	r3, [pc, #372]	; (100104b8 <at_ble_event_get+0x69c>)
10010342:	4798      	blx	r3
10010344:	2616      	movs	r6, #22
10010346:	e05e      	b.n	10010406 <at_ble_event_get+0x5ea>
10010348:	9801      	ldr	r0, [sp, #4]
1001034a:	1c31      	adds	r1, r6, #0
1001034c:	1c2a      	adds	r2, r5, #0
1001034e:	4b5b      	ldr	r3, [pc, #364]	; (100104bc <at_ble_event_get+0x6a0>)
10010350:	e787      	b.n	10010262 <at_ble_event_get+0x446>
10010352:	1c31      	adds	r1, r6, #0
10010354:	9801      	ldr	r0, [sp, #4]
10010356:	1c2a      	adds	r2, r5, #0
10010358:	4b58      	ldr	r3, [pc, #352]	; (100104bc <at_ble_event_get+0x6a0>)
1001035a:	4798      	blx	r3
1001035c:	88a9      	ldrh	r1, [r5, #4]
1001035e:	1c06      	adds	r6, r0, #0
10010360:	4b57      	ldr	r3, [pc, #348]	; (100104c0 <at_ble_event_get+0x6a4>)
10010362:	8828      	ldrh	r0, [r5, #0]
10010364:	4798      	blx	r3
10010366:	e04e      	b.n	10010406 <at_ble_event_get+0x5ea>
10010368:	1c31      	adds	r1, r6, #0
1001036a:	9801      	ldr	r0, [sp, #4]
1001036c:	1c2a      	adds	r2, r5, #0
1001036e:	4b55      	ldr	r3, [pc, #340]	; (100104c4 <at_ble_event_get+0x6a8>)
10010370:	4798      	blx	r3
10010372:	2623      	movs	r6, #35	; 0x23
10010374:	e047      	b.n	10010406 <at_ble_event_get+0x5ea>
10010376:	9801      	ldr	r0, [sp, #4]
10010378:	1c31      	adds	r1, r6, #0
1001037a:	1c2a      	adds	r2, r5, #0
1001037c:	4b52      	ldr	r3, [pc, #328]	; (100104c8 <at_ble_event_get+0x6ac>)
1001037e:	e770      	b.n	10010262 <at_ble_event_get+0x446>
10010380:	9b01      	ldr	r3, [sp, #4]
10010382:	1c30      	adds	r0, r6, #0
10010384:	0a1f      	lsrs	r7, r3, #8
10010386:	802f      	strh	r7, [r5, #0]
10010388:	1c29      	adds	r1, r5, #0
1001038a:	4b50      	ldr	r3, [pc, #320]	; (100104cc <at_ble_event_get+0x6b0>)
1001038c:	e749      	b.n	10010222 <at_ble_event_get+0x406>
1001038e:	9801      	ldr	r0, [sp, #4]
10010390:	1c31      	adds	r1, r6, #0
10010392:	1c2a      	adds	r2, r5, #0
10010394:	4b4e      	ldr	r3, [pc, #312]	; (100104d0 <at_ble_event_get+0x6b4>)
10010396:	e764      	b.n	10010262 <at_ble_event_get+0x446>
10010398:	1c30      	adds	r0, r6, #0
1001039a:	1c29      	adds	r1, r5, #0
1001039c:	9a01      	ldr	r2, [sp, #4]
1001039e:	4b4d      	ldr	r3, [pc, #308]	; (100104d4 <at_ble_event_get+0x6b8>)
100103a0:	4798      	blx	r3
100103a2:	263b      	movs	r6, #59	; 0x3b
100103a4:	e02f      	b.n	10010406 <at_ble_event_get+0x5ea>
100103a6:	1c31      	adds	r1, r6, #0
100103a8:	9801      	ldr	r0, [sp, #4]
100103aa:	1c2a      	adds	r2, r5, #0
100103ac:	4b4a      	ldr	r3, [pc, #296]	; (100104d8 <at_ble_event_get+0x6bc>)
100103ae:	4798      	blx	r3
100103b0:	2618      	movs	r6, #24
100103b2:	e028      	b.n	10010406 <at_ble_event_get+0x5ea>
100103b4:	1c31      	adds	r1, r6, #0
100103b6:	9801      	ldr	r0, [sp, #4]
100103b8:	1c2a      	adds	r2, r5, #0
100103ba:	4b48      	ldr	r3, [pc, #288]	; (100104dc <at_ble_event_get+0x6c0>)
100103bc:	4798      	blx	r3
100103be:	2620      	movs	r6, #32
100103c0:	e021      	b.n	10010406 <at_ble_event_get+0x5ea>
100103c2:	1c31      	adds	r1, r6, #0
100103c4:	9801      	ldr	r0, [sp, #4]
100103c6:	1c2a      	adds	r2, r5, #0
100103c8:	4b45      	ldr	r3, [pc, #276]	; (100104e0 <at_ble_event_get+0x6c4>)
100103ca:	4798      	blx	r3
100103cc:	2633      	movs	r6, #51	; 0x33
100103ce:	e01a      	b.n	10010406 <at_ble_event_get+0x5ea>
100103d0:	1c31      	adds	r1, r6, #0
100103d2:	9801      	ldr	r0, [sp, #4]
100103d4:	1c2a      	adds	r2, r5, #0
100103d6:	4b43      	ldr	r3, [pc, #268]	; (100104e4 <at_ble_event_get+0x6c8>)
100103d8:	4798      	blx	r3
100103da:	2630      	movs	r6, #48	; 0x30
100103dc:	e013      	b.n	10010406 <at_ble_event_get+0x5ea>
100103de:	1c31      	adds	r1, r6, #0
100103e0:	9801      	ldr	r0, [sp, #4]
100103e2:	1c2a      	adds	r2, r5, #0
100103e4:	4b40      	ldr	r3, [pc, #256]	; (100104e8 <at_ble_event_get+0x6cc>)
100103e6:	4798      	blx	r3
100103e8:	2634      	movs	r6, #52	; 0x34
100103ea:	e00c      	b.n	10010406 <at_ble_event_get+0x5ea>
100103ec:	1c31      	adds	r1, r6, #0
100103ee:	9801      	ldr	r0, [sp, #4]
100103f0:	1c2a      	adds	r2, r5, #0
100103f2:	4b3e      	ldr	r3, [pc, #248]	; (100104ec <at_ble_event_get+0x6d0>)
100103f4:	4798      	blx	r3
100103f6:	2635      	movs	r6, #53	; 0x35
100103f8:	e005      	b.n	10010406 <at_ble_event_get+0x5ea>
100103fa:	1c31      	adds	r1, r6, #0
100103fc:	9801      	ldr	r0, [sp, #4]
100103fe:	1c2a      	adds	r2, r5, #0
10010400:	4b3b      	ldr	r3, [pc, #236]	; (100104f0 <at_ble_event_get+0x6d4>)
10010402:	4798      	blx	r3
10010404:	2632      	movs	r6, #50	; 0x32
10010406:	9b03      	ldr	r3, [sp, #12]
10010408:	701e      	strb	r6, [r3, #0]
1001040a:	2300      	movs	r3, #0
1001040c:	9302      	str	r3, [sp, #8]
1001040e:	e57a      	b.n	1000ff06 <at_ble_event_get+0xea>
10010410:	23d0      	movs	r3, #208	; 0xd0
10010412:	e7fb      	b.n	1001040c <at_ble_event_get+0x5f0>
10010414:	9b01      	ldr	r3, [sp, #4]
10010416:	9e02      	ldr	r6, [sp, #8]
10010418:	2bbb      	cmp	r3, #187	; 0xbb
1001041a:	d000      	beq.n	1001041e <at_ble_event_get+0x602>
1001041c:	e6e6      	b.n	100101ec <at_ble_event_get+0x3d0>
1001041e:	e7f2      	b.n	10010406 <at_ble_event_get+0x5ea>
10010420:	9b02      	ldr	r3, [sp, #8]
10010422:	2b00      	cmp	r3, #0
10010424:	d000      	beq.n	10010428 <at_ble_event_get+0x60c>
10010426:	e56e      	b.n	1000ff06 <at_ble_event_get+0xea>
10010428:	e6e0      	b.n	100101ec <at_ble_event_get+0x3d0>
1001042a:	9802      	ldr	r0, [sp, #8]
1001042c:	b007      	add	sp, #28
1001042e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10010430:	00000e22 	.word	0x00000e22
10010434:	00000e25 	.word	0x00000e25
10010438:	00001b05 	.word	0x00001b05
1001043c:	00001b01 	.word	0x00001b01
10010440:	00001b03 	.word	0x00001b03
10010444:	00001b06 	.word	0x00001b06
10010448:	00001b08 	.word	0x00001b08
1001044c:	1001264d 	.word	0x1001264d
10010450:	10012631 	.word	0x10012631
10010454:	100128cd 	.word	0x100128cd
10010458:	100129bd 	.word	0x100129bd
1001045c:	100129e1 	.word	0x100129e1
10010460:	100119c5 	.word	0x100119c5
10010464:	10012245 	.word	0x10012245
10010468:	100122c1 	.word	0x100122c1
1001046c:	10011c7d 	.word	0x10011c7d
10010470:	10011d19 	.word	0x10011d19
10010474:	10011df1 	.word	0x10011df1
10010478:	10012079 	.word	0x10012079
1001047c:	10012119 	.word	0x10012119
10010480:	100121d1 	.word	0x100121d1
10010484:	100121f9 	.word	0x100121f9
10010488:	1001220f 	.word	0x1001220f
1001048c:	100122d9 	.word	0x100122d9
10010490:	10012307 	.word	0x10012307
10010494:	1001231d 	.word	0x1001231d
10010498:	10012347 	.word	0x10012347
1001049c:	10012175 	.word	0x10012175
100104a0:	1001219f 	.word	0x1001219f
100104a4:	10011405 	.word	0x10011405
100104a8:	10011431 	.word	0x10011431
100104ac:	10012c01 	.word	0x10012c01
100104b0:	10012c3d 	.word	0x10012c3d
100104b4:	10012c85 	.word	0x10012c85
100104b8:	10012cc9 	.word	0x10012cc9
100104bc:	10012cfd 	.word	0x10012cfd
100104c0:	10012bc1 	.word	0x10012bc1
100104c4:	10012dc9 	.word	0x10012dc9
100104c8:	10012d51 	.word	0x10012d51
100104cc:	100112e9 	.word	0x100112e9
100104d0:	10011355 	.word	0x10011355
100104d4:	10011319 	.word	0x10011319
100104d8:	10012dd9 	.word	0x10012dd9
100104dc:	10012e19 	.word	0x10012e19
100104e0:	100130e1 	.word	0x100130e1
100104e4:	100130eb 	.word	0x100130eb
100104e8:	100130f1 	.word	0x100130f1
100104ec:	100130f7 	.word	0x100130f7
100104f0:	10013103 	.word	0x10013103

100104f4 <internal_event_flush>:
100104f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
100104f6:	490e      	ldr	r1, [pc, #56]	; (10010530 <internal_event_flush+0x3c>)
100104f8:	2400      	movs	r4, #0
100104fa:	680b      	ldr	r3, [r1, #0]
100104fc:	1c0f      	adds	r7, r1, #0
100104fe:	1c1e      	adds	r6, r3, #0
10010500:	4a0c      	ldr	r2, [pc, #48]	; (10010534 <internal_event_flush+0x40>)
10010502:	6815      	ldr	r5, [r2, #0]
10010504:	9201      	str	r2, [sp, #4]
10010506:	2b00      	cmp	r3, #0
10010508:	d00e      	beq.n	10010528 <internal_event_flush+0x34>
1001050a:	889a      	ldrh	r2, [r3, #4]
1001050c:	6819      	ldr	r1, [r3, #0]
1001050e:	4282      	cmp	r2, r0
10010510:	d107      	bne.n	10010522 <internal_event_flush+0x2e>
10010512:	2c00      	cmp	r4, #0
10010514:	d001      	beq.n	1001051a <internal_event_flush+0x26>
10010516:	6021      	str	r1, [r4, #0]
10010518:	e000      	b.n	1001051c <internal_event_flush+0x28>
1001051a:	1c0e      	adds	r6, r1, #0
1001051c:	601d      	str	r5, [r3, #0]
1001051e:	1c1d      	adds	r5, r3, #0
10010520:	1c23      	adds	r3, r4, #0
10010522:	1c1c      	adds	r4, r3, #0
10010524:	1c0b      	adds	r3, r1, #0
10010526:	e7ee      	b.n	10010506 <internal_event_flush+0x12>
10010528:	9b01      	ldr	r3, [sp, #4]
1001052a:	603e      	str	r6, [r7, #0]
1001052c:	601d      	str	r5, [r3, #0]
1001052e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
10010530:	1001a0c4 	.word	0x1001a0c4
10010534:	1001a0c8 	.word	0x1001a0c8

10010538 <internal_conn_flush>:
10010538:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1001053a:	4a12      	ldr	r2, [pc, #72]	; (10010584 <internal_conn_flush+0x4c>)
1001053c:	9000      	str	r0, [sp, #0]
1001053e:	6813      	ldr	r3, [r2, #0]
10010540:	4811      	ldr	r0, [pc, #68]	; (10010588 <internal_conn_flush+0x50>)
10010542:	1c1f      	adds	r7, r3, #0
10010544:	2100      	movs	r1, #0
10010546:	4684      	mov	ip, r0
10010548:	6804      	ldr	r4, [r0, #0]
1001054a:	9201      	str	r2, [sp, #4]
1001054c:	2b00      	cmp	r3, #0
1001054e:	d014      	beq.n	1001057a <internal_conn_flush+0x42>
10010550:	88d8      	ldrh	r0, [r3, #6]
10010552:	9a00      	ldr	r2, [sp, #0]
10010554:	681d      	ldr	r5, [r3, #0]
10010556:	0a06      	lsrs	r6, r0, #8
10010558:	4296      	cmp	r6, r2
1001055a:	d10b      	bne.n	10010574 <internal_conn_flush+0x3c>
1001055c:	26fd      	movs	r6, #253	; 0xfd
1001055e:	4006      	ands	r6, r0
10010560:	2e0c      	cmp	r6, #12
10010562:	d107      	bne.n	10010574 <internal_conn_flush+0x3c>
10010564:	2900      	cmp	r1, #0
10010566:	d001      	beq.n	1001056c <internal_conn_flush+0x34>
10010568:	600d      	str	r5, [r1, #0]
1001056a:	e000      	b.n	1001056e <internal_conn_flush+0x36>
1001056c:	1c2f      	adds	r7, r5, #0
1001056e:	601c      	str	r4, [r3, #0]
10010570:	1c1c      	adds	r4, r3, #0
10010572:	1c0b      	adds	r3, r1, #0
10010574:	1c19      	adds	r1, r3, #0
10010576:	1c2b      	adds	r3, r5, #0
10010578:	e7e8      	b.n	1001054c <internal_conn_flush+0x14>
1001057a:	9b01      	ldr	r3, [sp, #4]
1001057c:	601f      	str	r7, [r3, #0]
1001057e:	4663      	mov	r3, ip
10010580:	601c      	str	r4, [r3, #0]
10010582:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
10010584:	1001a0c4 	.word	0x1001a0c4
10010588:	1001a0c8 	.word	0x1001a0c8

1001058c <at_ble_device_name_set>:
1001058c:	b530      	push	{r4, r5, lr}
1001058e:	23cf      	movs	r3, #207	; 0xcf
10010590:	2800      	cmp	r0, #0
10010592:	d010      	beq.n	100105b6 <at_ble_device_name_set+0x2a>
10010594:	1e4a      	subs	r2, r1, #1
10010596:	2a1f      	cmp	r2, #31
10010598:	d80d      	bhi.n	100105b6 <at_ble_device_name_set+0x2a>
1001059a:	4a08      	ldr	r2, [pc, #32]	; (100105bc <at_ble_device_name_set+0x30>)
1001059c:	1c13      	adds	r3, r2, #0
1001059e:	33aa      	adds	r3, #170	; 0xaa
100105a0:	8019      	strh	r1, [r3, #0]
100105a2:	2300      	movs	r3, #0
100105a4:	1c1c      	adds	r4, r3, #0
100105a6:	5cc5      	ldrb	r5, [r0, r3]
100105a8:	34ac      	adds	r4, #172	; 0xac
100105aa:	3301      	adds	r3, #1
100105ac:	5515      	strb	r5, [r2, r4]
100105ae:	b2dc      	uxtb	r4, r3
100105b0:	428c      	cmp	r4, r1
100105b2:	d3f7      	bcc.n	100105a4 <at_ble_device_name_set+0x18>
100105b4:	2300      	movs	r3, #0
100105b6:	1c18      	adds	r0, r3, #0
100105b8:	bd30      	pop	{r4, r5, pc}
100105ba:	46c0      	nop			; (mov r8, r8)
100105bc:	1001b06a 	.word	0x1001b06a

100105c0 <at_ble_addr_get>:
100105c0:	b510      	push	{r4, lr}
100105c2:	1c04      	adds	r4, r0, #0
100105c4:	20cf      	movs	r0, #207	; 0xcf
100105c6:	2c00      	cmp	r4, #0
100105c8:	d006      	beq.n	100105d8 <at_ble_addr_get+0x18>
100105ca:	4b04      	ldr	r3, [pc, #16]	; (100105dc <at_ble_addr_get+0x1c>)
100105cc:	38ce      	subs	r0, #206	; 0xce
100105ce:	1c21      	adds	r1, r4, #0
100105d0:	4798      	blx	r3
100105d2:	4b03      	ldr	r3, [pc, #12]	; (100105e0 <at_ble_addr_get+0x20>)
100105d4:	791b      	ldrb	r3, [r3, #4]
100105d6:	7023      	strb	r3, [r4, #0]
100105d8:	bd10      	pop	{r4, pc}
100105da:	46c0      	nop			; (mov r8, r8)
100105dc:	100124e1 	.word	0x100124e1
100105e0:	1001b06a 	.word	0x1001b06a

100105e4 <at_ble_set_dev_config>:
100105e4:	b5f0      	push	{r4, r5, r6, r7, lr}
100105e6:	7906      	ldrb	r6, [r0, #4]
100105e8:	b089      	sub	sp, #36	; 0x24
100105ea:	25cf      	movs	r5, #207	; 0xcf
100105ec:	2e03      	cmp	r6, #3
100105ee:	d838      	bhi.n	10010662 <at_ble_set_dev_config+0x7e>
100105f0:	7803      	ldrb	r3, [r0, #0]
100105f2:	3511      	adds	r5, #17
100105f4:	2b0f      	cmp	r3, #15
100105f6:	d834      	bhi.n	10010662 <at_ble_set_dev_config+0x7e>
100105f8:	2380      	movs	r3, #128	; 0x80
100105fa:	8c87      	ldrh	r7, [r0, #36]	; 0x24
100105fc:	3d11      	subs	r5, #17
100105fe:	009b      	lsls	r3, r3, #2
10010600:	429f      	cmp	r7, r3
10010602:	d82e      	bhi.n	10010662 <at_ble_set_dev_config+0x7e>
10010604:	7fc5      	ldrb	r5, [r0, #31]
10010606:	7f83      	ldrb	r3, [r0, #30]
10010608:	01ad      	lsls	r5, r5, #6
1001060a:	015b      	lsls	r3, r3, #5
1001060c:	431d      	orrs	r5, r3
1001060e:	7ec3      	ldrb	r3, [r0, #27]
10010610:	431d      	orrs	r5, r3
10010612:	7f43      	ldrb	r3, [r0, #29]
10010614:	011b      	lsls	r3, r3, #4
10010616:	431d      	orrs	r5, r3
10010618:	7f03      	ldrb	r3, [r0, #28]
1001061a:	009b      	lsls	r3, r3, #2
1001061c:	431d      	orrs	r5, r3
1001061e:	4b12      	ldr	r3, [pc, #72]	; (10010668 <at_ble_set_dev_config+0x84>)
10010620:	b2ed      	uxtb	r5, r5
10010622:	711e      	strb	r6, [r3, #4]
10010624:	7903      	ldrb	r3, [r0, #4]
10010626:	3b02      	subs	r3, #2
10010628:	2b01      	cmp	r3, #1
1001062a:	d801      	bhi.n	10010630 <at_ble_set_dev_config+0x4c>
1001062c:	2302      	movs	r3, #2
1001062e:	7103      	strb	r3, [r0, #4]
10010630:	1c04      	adds	r4, r0, #0
10010632:	1c23      	adds	r3, r4, #0
10010634:	330b      	adds	r3, #11
10010636:	8861      	ldrh	r1, [r4, #2]
10010638:	9307      	str	r3, [sp, #28]
1001063a:	7923      	ldrb	r3, [r4, #4]
1001063c:	7800      	ldrb	r0, [r0, #0]
1001063e:	9300      	str	r3, [sp, #0]
10010640:	9501      	str	r5, [sp, #4]
10010642:	8c25      	ldrh	r5, [r4, #32]
10010644:	1d62      	adds	r2, r4, #5
10010646:	9502      	str	r5, [sp, #8]
10010648:	8c65      	ldrh	r5, [r4, #34]	; 0x22
1001064a:	9b07      	ldr	r3, [sp, #28]
1001064c:	9503      	str	r5, [sp, #12]
1001064e:	9704      	str	r7, [sp, #16]
10010650:	4d06      	ldr	r5, [pc, #24]	; (1001066c <at_ble_set_dev_config+0x88>)
10010652:	47a8      	blx	r5
10010654:	7126      	strb	r6, [r4, #4]
10010656:	1c05      	adds	r5, r0, #0
10010658:	1c21      	adds	r1, r4, #0
1001065a:	4803      	ldr	r0, [pc, #12]	; (10010668 <at_ble_set_dev_config+0x84>)
1001065c:	2226      	movs	r2, #38	; 0x26
1001065e:	4b04      	ldr	r3, [pc, #16]	; (10010670 <at_ble_set_dev_config+0x8c>)
10010660:	4798      	blx	r3
10010662:	1c28      	adds	r0, r5, #0
10010664:	b009      	add	sp, #36	; 0x24
10010666:	bdf0      	pop	{r4, r5, r6, r7, pc}
10010668:	1001b06a 	.word	0x1001b06a
1001066c:	100123d9 	.word	0x100123d9
10010670:	10015227 	.word	0x10015227

10010674 <at_ble_init>:
10010674:	b5f0      	push	{r4, r5, r6, r7, lr}
10010676:	b087      	sub	sp, #28
10010678:	af03      	add	r7, sp, #12
1001067a:	4954      	ldr	r1, [pc, #336]	; (100107cc <at_ble_init+0x158>)
1001067c:	220b      	movs	r2, #11
1001067e:	4b54      	ldr	r3, [pc, #336]	; (100107d0 <at_ble_init+0x15c>)
10010680:	1c04      	adds	r4, r0, #0
10010682:	1c38      	adds	r0, r7, #0
10010684:	4798      	blx	r3
10010686:	2205      	movs	r2, #5
10010688:	4b52      	ldr	r3, [pc, #328]	; (100107d4 <at_ble_init+0x160>)
1001068a:	2640      	movs	r6, #64	; 0x40
1001068c:	801a      	strh	r2, [r3, #0]
1001068e:	2300      	movs	r3, #0
10010690:	4a51      	ldr	r2, [pc, #324]	; (100107d8 <at_ble_init+0x164>)
10010692:	6013      	str	r3, [r2, #0]
10010694:	4a51      	ldr	r2, [pc, #324]	; (100107dc <at_ble_init+0x168>)
10010696:	7013      	strb	r3, [r2, #0]
10010698:	4a51      	ldr	r2, [pc, #324]	; (100107e0 <at_ble_init+0x16c>)
1001069a:	7013      	strb	r3, [r2, #0]
1001069c:	4b51      	ldr	r3, [pc, #324]	; (100107e4 <at_ble_init+0x170>)
1001069e:	4798      	blx	r3
100106a0:	4b51      	ldr	r3, [pc, #324]	; (100107e8 <at_ble_init+0x174>)
100106a2:	4798      	blx	r3
100106a4:	4b51      	ldr	r3, [pc, #324]	; (100107ec <at_ble_init+0x178>)
100106a6:	4798      	blx	r3
100106a8:	4b51      	ldr	r3, [pc, #324]	; (100107f0 <at_ble_init+0x17c>)
100106aa:	4798      	blx	r3
100106ac:	2c00      	cmp	r4, #0
100106ae:	d100      	bne.n	100106b2 <at_ble_init+0x3e>
100106b0:	e089      	b.n	100107c6 <at_ble_init+0x152>
100106b2:	68a3      	ldr	r3, [r4, #8]
100106b4:	2b00      	cmp	r3, #0
100106b6:	d100      	bne.n	100106ba <at_ble_init+0x46>
100106b8:	e085      	b.n	100107c6 <at_ble_init+0x152>
100106ba:	6923      	ldr	r3, [r4, #16]
100106bc:	2b00      	cmp	r3, #0
100106be:	d100      	bne.n	100106c2 <at_ble_init+0x4e>
100106c0:	e081      	b.n	100107c6 <at_ble_init+0x152>
100106c2:	6820      	ldr	r0, [r4, #0]
100106c4:	2800      	cmp	r0, #0
100106c6:	d102      	bne.n	100106ce <at_ble_init+0x5a>
100106c8:	6863      	ldr	r3, [r4, #4]
100106ca:	2b00      	cmp	r3, #0
100106cc:	d17b      	bne.n	100107c6 <at_ble_init+0x152>
100106ce:	4b49      	ldr	r3, [pc, #292]	; (100107f4 <at_ble_init+0x180>)
100106d0:	6861      	ldr	r1, [r4, #4]
100106d2:	4798      	blx	r3
100106d4:	4b48      	ldr	r3, [pc, #288]	; (100107f8 <at_ble_init+0x184>)
100106d6:	4798      	blx	r3
100106d8:	2801      	cmp	r0, #1
100106da:	d901      	bls.n	100106e0 <at_ble_init+0x6c>
100106dc:	26e2      	movs	r6, #226	; 0xe2
100106de:	e072      	b.n	100107c6 <at_ble_init+0x152>
100106e0:	4846      	ldr	r0, [pc, #280]	; (100107fc <at_ble_init+0x188>)
100106e2:	4b47      	ldr	r3, [pc, #284]	; (10010800 <at_ble_init+0x18c>)
100106e4:	4798      	blx	r3
100106e6:	2800      	cmp	r0, #0
100106e8:	d1f8      	bne.n	100106dc <at_ble_init+0x68>
100106ea:	1c20      	adds	r0, r4, #0
100106ec:	4b45      	ldr	r3, [pc, #276]	; (10010804 <at_ble_init+0x190>)
100106ee:	4798      	blx	r3
100106f0:	68e0      	ldr	r0, [r4, #12]
100106f2:	68a1      	ldr	r1, [r4, #8]
100106f4:	4b44      	ldr	r3, [pc, #272]	; (10010808 <at_ble_init+0x194>)
100106f6:	4798      	blx	r3
100106f8:	466b      	mov	r3, sp
100106fa:	2201      	movs	r2, #1
100106fc:	1cdc      	adds	r4, r3, #3
100106fe:	1c20      	adds	r0, r4, #0
10010700:	a901      	add	r1, sp, #4
10010702:	4252      	negs	r2, r2
10010704:	4b41      	ldr	r3, [pc, #260]	; (1001080c <at_ble_init+0x198>)
10010706:	4798      	blx	r3
10010708:	2800      	cmp	r0, #0
1001070a:	d102      	bne.n	10010712 <at_ble_init+0x9e>
1001070c:	7823      	ldrb	r3, [r4, #0]
1001070e:	2b39      	cmp	r3, #57	; 0x39
10010710:	d1f2      	bne.n	100106f8 <at_ble_init+0x84>
10010712:	4b3f      	ldr	r3, [pc, #252]	; (10010810 <at_ble_init+0x19c>)
10010714:	4798      	blx	r3
10010716:	1e06      	subs	r6, r0, #0
10010718:	d155      	bne.n	100107c6 <at_ble_init+0x152>
1001071a:	1c03      	adds	r3, r0, #0
1001071c:	2101      	movs	r1, #1
1001071e:	4a3d      	ldr	r2, [pc, #244]	; (10010814 <at_ble_init+0x1a0>)
10010720:	4249      	negs	r1, r1
10010722:	189a      	adds	r2, r3, r2
10010724:	3312      	adds	r3, #18
10010726:	8151      	strh	r1, [r2, #10]
10010728:	2b90      	cmp	r3, #144	; 0x90
1001072a:	d1f7      	bne.n	1001071c <at_ble_init+0xa8>
1001072c:	4c3a      	ldr	r4, [pc, #232]	; (10010818 <at_ble_init+0x1a4>)
1001072e:	3b81      	subs	r3, #129	; 0x81
10010730:	7023      	strb	r3, [r4, #0]
10010732:	4b3a      	ldr	r3, [pc, #232]	; (1001081c <at_ble_init+0x1a8>)
10010734:	4a3a      	ldr	r2, [pc, #232]	; (10010820 <at_ble_init+0x1ac>)
10010736:	8063      	strh	r3, [r4, #2]
10010738:	2300      	movs	r3, #0
1001073a:	7123      	strb	r3, [r4, #4]
1001073c:	3301      	adds	r3, #1
1001073e:	1e58      	subs	r0, r3, #1
10010740:	0119      	lsls	r1, r3, #4
10010742:	4301      	orrs	r1, r0
10010744:	3302      	adds	r3, #2
10010746:	7011      	strb	r1, [r2, #0]
10010748:	3201      	adds	r2, #1
1001074a:	2b21      	cmp	r3, #33	; 0x21
1001074c:	d1f7      	bne.n	1001073e <at_ble_init+0xca>
1001074e:	33e0      	adds	r3, #224	; 0xe0
10010750:	33ff      	adds	r3, #255	; 0xff
10010752:	84a3      	strh	r3, [r4, #36]	; 0x24
10010754:	1c23      	adds	r3, r4, #0
10010756:	2500      	movs	r5, #0
10010758:	3373      	adds	r3, #115	; 0x73
1001075a:	701d      	strb	r5, [r3, #0]
1001075c:	1c23      	adds	r3, r4, #0
1001075e:	3372      	adds	r3, #114	; 0x72
10010760:	701d      	strb	r5, [r3, #0]
10010762:	1c23      	adds	r3, r4, #0
10010764:	3376      	adds	r3, #118	; 0x76
10010766:	701d      	strb	r5, [r3, #0]
10010768:	1c23      	adds	r3, r4, #0
1001076a:	33cc      	adds	r3, #204	; 0xcc
1001076c:	801d      	strh	r5, [r3, #0]
1001076e:	1c22      	adds	r2, r4, #0
10010770:	23a0      	movs	r3, #160	; 0xa0
10010772:	32d0      	adds	r2, #208	; 0xd0
10010774:	005b      	lsls	r3, r3, #1
10010776:	8013      	strh	r3, [r2, #0]
10010778:	1c22      	adds	r2, r4, #0
1001077a:	32ce      	adds	r2, #206	; 0xce
1001077c:	8013      	strh	r3, [r2, #0]
1001077e:	1c23      	adds	r3, r4, #0
10010780:	33d2      	adds	r3, #210	; 0xd2
10010782:	801d      	strh	r5, [r3, #0]
10010784:	22fa      	movs	r2, #250	; 0xfa
10010786:	1c23      	adds	r3, r4, #0
10010788:	0052      	lsls	r2, r2, #1
1001078a:	33d4      	adds	r3, #212	; 0xd4
1001078c:	801a      	strh	r2, [r3, #0]
1001078e:	1c23      	adds	r3, r4, #0
10010790:	33d6      	adds	r3, #214	; 0xd6
10010792:	701d      	strb	r5, [r3, #0]
10010794:	1c20      	adds	r0, r4, #0
10010796:	4b23      	ldr	r3, [pc, #140]	; (10010824 <at_ble_init+0x1b0>)
10010798:	76e5      	strb	r5, [r4, #27]
1001079a:	7725      	strb	r5, [r4, #28]
1001079c:	7765      	strb	r5, [r4, #29]
1001079e:	77a5      	strb	r5, [r4, #30]
100107a0:	77e5      	strb	r5, [r4, #31]
100107a2:	8425      	strh	r5, [r4, #32]
100107a4:	8465      	strh	r5, [r4, #34]	; 0x22
100107a6:	4798      	blx	r3
100107a8:	1c23      	adds	r3, r4, #0
100107aa:	2207      	movs	r2, #7
100107ac:	3374      	adds	r3, #116	; 0x74
100107ae:	701a      	strb	r2, [r3, #0]
100107b0:	1c23      	adds	r3, r4, #0
100107b2:	3204      	adds	r2, #4
100107b4:	33aa      	adds	r3, #170	; 0xaa
100107b6:	801a      	strh	r2, [r3, #0]
100107b8:	1c2b      	adds	r3, r5, #0
100107ba:	5d7a      	ldrb	r2, [r7, r5]
100107bc:	33ac      	adds	r3, #172	; 0xac
100107be:	3501      	adds	r5, #1
100107c0:	54e2      	strb	r2, [r4, r3]
100107c2:	2d0b      	cmp	r5, #11
100107c4:	d1f8      	bne.n	100107b8 <at_ble_init+0x144>
100107c6:	1c30      	adds	r0, r6, #0
100107c8:	b007      	add	sp, #28
100107ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
100107cc:	10018418 	.word	0x10018418
100107d0:	10015227 	.word	0x10015227
100107d4:	1001afd8 	.word	0x1001afd8
100107d8:	1001a174 	.word	0x1001a174
100107dc:	1001a0d4 	.word	0x1001a0d4
100107e0:	10018640 	.word	0x10018640
100107e4:	10012e29 	.word	0x10012e29
100107e8:	10010ae5 	.word	0x10010ae5
100107ec:	10011145 	.word	0x10011145
100107f0:	100113f9 	.word	0x100113f9
100107f4:	10011181 	.word	0x10011181
100107f8:	1000f185 	.word	0x1000f185
100107fc:	100116f9 	.word	0x100116f9
10010800:	1000f3c9 	.word	0x1000f3c9
10010804:	100117a1 	.word	0x100117a1
10010808:	1000fd61 	.word	0x1000fd61
1001080c:	1000fe1d 	.word	0x1000fe1d
10010810:	10012369 	.word	0x10012369
10010814:	1001afda 	.word	0x1001afda
10010818:	1001b06a 	.word	0x1001b06a
1001081c:	00003a98 	.word	0x00003a98
10010820:	1001b075 	.word	0x1001b075
10010824:	100105e5 	.word	0x100105e5

10010828 <at_ble_addr_set>:
10010828:	b538      	push	{r3, r4, r5, lr}
1001082a:	1c45      	adds	r5, r0, #1
1001082c:	1c03      	adds	r3, r0, #0
1001082e:	20cf      	movs	r0, #207	; 0xcf
10010830:	2d00      	cmp	r5, #0
10010832:	d018      	beq.n	10010866 <at_ble_addr_set+0x3e>
10010834:	781a      	ldrb	r2, [r3, #0]
10010836:	2a03      	cmp	r2, #3
10010838:	d815      	bhi.n	10010866 <at_ble_addr_set+0x3e>
1001083a:	2a01      	cmp	r2, #1
1001083c:	d102      	bne.n	10010844 <at_ble_addr_set+0x1c>
1001083e:	785a      	ldrb	r2, [r3, #1]
10010840:	2a00      	cmp	r2, #0
10010842:	d010      	beq.n	10010866 <at_ble_addr_set+0x3e>
10010844:	1c1c      	adds	r4, r3, #0
10010846:	1c29      	adds	r1, r5, #0
10010848:	2206      	movs	r2, #6
1001084a:	4b07      	ldr	r3, [pc, #28]	; (10010868 <at_ble_addr_set+0x40>)
1001084c:	4807      	ldr	r0, [pc, #28]	; (1001086c <at_ble_addr_set+0x44>)
1001084e:	4798      	blx	r3
10010850:	7823      	ldrb	r3, [r4, #0]
10010852:	4807      	ldr	r0, [pc, #28]	; (10010870 <at_ble_addr_set+0x48>)
10010854:	7103      	strb	r3, [r0, #4]
10010856:	4b07      	ldr	r3, [pc, #28]	; (10010874 <at_ble_addr_set+0x4c>)
10010858:	4798      	blx	r3
1001085a:	7823      	ldrb	r3, [r4, #0]
1001085c:	2b00      	cmp	r3, #0
1001085e:	d102      	bne.n	10010866 <at_ble_addr_set+0x3e>
10010860:	1c28      	adds	r0, r5, #0
10010862:	4b05      	ldr	r3, [pc, #20]	; (10010878 <at_ble_addr_set+0x50>)
10010864:	4798      	blx	r3
10010866:	bd38      	pop	{r3, r4, r5, pc}
10010868:	10015227 	.word	0x10015227
1001086c:	1001b06f 	.word	0x1001b06f
10010870:	1001b06a 	.word	0x1001b06a
10010874:	100105e5 	.word	0x100105e5
10010878:	10011825 	.word	0x10011825

1001087c <at_ble_adv_data_set>:
1001087c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1001087e:	4684      	mov	ip, r0
10010880:	1c0f      	adds	r7, r1, #0
10010882:	1c16      	adds	r6, r2, #0
10010884:	1c1c      	adds	r4, r3, #0
10010886:	2800      	cmp	r0, #0
10010888:	d102      	bne.n	10010890 <at_ble_adv_data_set+0x14>
1001088a:	20e2      	movs	r0, #226	; 0xe2
1001088c:	2a00      	cmp	r2, #0
1001088e:	d02b      	beq.n	100108e8 <at_ble_adv_data_set+0x6c>
10010890:	20cf      	movs	r0, #207	; 0xcf
10010892:	2f1f      	cmp	r7, #31
10010894:	d828      	bhi.n	100108e8 <at_ble_adv_data_set+0x6c>
10010896:	2c1f      	cmp	r4, #31
10010898:	d826      	bhi.n	100108e8 <at_ble_adv_data_set+0x6c>
1001089a:	4663      	mov	r3, ip
1001089c:	2b00      	cmp	r3, #0
1001089e:	d00e      	beq.n	100108be <at_ble_adv_data_set+0x42>
100108a0:	4812      	ldr	r0, [pc, #72]	; (100108ec <at_ble_adv_data_set+0x70>)
100108a2:	4d13      	ldr	r5, [pc, #76]	; (100108f0 <at_ble_adv_data_set+0x74>)
100108a4:	2f00      	cmp	r7, #0
100108a6:	d104      	bne.n	100108b2 <at_ble_adv_data_set+0x36>
100108a8:	1c39      	adds	r1, r7, #0
100108aa:	221f      	movs	r2, #31
100108ac:	4b11      	ldr	r3, [pc, #68]	; (100108f4 <at_ble_adv_data_set+0x78>)
100108ae:	4798      	blx	r3
100108b0:	e003      	b.n	100108ba <at_ble_adv_data_set+0x3e>
100108b2:	4661      	mov	r1, ip
100108b4:	1c3a      	adds	r2, r7, #0
100108b6:	4b10      	ldr	r3, [pc, #64]	; (100108f8 <at_ble_adv_data_set+0x7c>)
100108b8:	4798      	blx	r3
100108ba:	3572      	adds	r5, #114	; 0x72
100108bc:	702f      	strb	r7, [r5, #0]
100108be:	1e30      	subs	r0, r6, #0
100108c0:	d012      	beq.n	100108e8 <at_ble_adv_data_set+0x6c>
100108c2:	4d0b      	ldr	r5, [pc, #44]	; (100108f0 <at_ble_adv_data_set+0x74>)
100108c4:	480d      	ldr	r0, [pc, #52]	; (100108fc <at_ble_adv_data_set+0x80>)
100108c6:	2c00      	cmp	r4, #0
100108c8:	d107      	bne.n	100108da <at_ble_adv_data_set+0x5e>
100108ca:	1c21      	adds	r1, r4, #0
100108cc:	221f      	movs	r2, #31
100108ce:	4b09      	ldr	r3, [pc, #36]	; (100108f4 <at_ble_adv_data_set+0x78>)
100108d0:	3573      	adds	r5, #115	; 0x73
100108d2:	4798      	blx	r3
100108d4:	702c      	strb	r4, [r5, #0]
100108d6:	1c20      	adds	r0, r4, #0
100108d8:	e006      	b.n	100108e8 <at_ble_adv_data_set+0x6c>
100108da:	1c31      	adds	r1, r6, #0
100108dc:	1c22      	adds	r2, r4, #0
100108de:	4b06      	ldr	r3, [pc, #24]	; (100108f8 <at_ble_adv_data_set+0x7c>)
100108e0:	4798      	blx	r3
100108e2:	2000      	movs	r0, #0
100108e4:	3573      	adds	r5, #115	; 0x73
100108e6:	702c      	strb	r4, [r5, #0]
100108e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100108ea:	46c0      	nop			; (mov r8, r8)
100108ec:	1001b09e 	.word	0x1001b09e
100108f0:	1001b06a 	.word	0x1001b06a
100108f4:	10015239 	.word	0x10015239
100108f8:	10015227 	.word	0x10015227
100108fc:	1001b0bd 	.word	0x1001b0bd

10010900 <at_ble_adv_start>:
10010900:	b5f0      	push	{r4, r5, r6, r7, lr}
10010902:	b091      	sub	sp, #68	; 0x44
10010904:	1c1f      	adds	r7, r3, #0
10010906:	ab16      	add	r3, sp, #88	; 0x58
10010908:	881d      	ldrh	r5, [r3, #0]
1001090a:	ab17      	add	r3, sp, #92	; 0x5c
1001090c:	881b      	ldrh	r3, [r3, #0]
1001090e:	910d      	str	r1, [sp, #52]	; 0x34
10010910:	930e      	str	r3, [sp, #56]	; 0x38
10010912:	ab18      	add	r3, sp, #96	; 0x60
10010914:	781b      	ldrb	r3, [r3, #0]
10010916:	1c04      	adds	r4, r0, #0
10010918:	930f      	str	r3, [sp, #60]	; 0x3c
1001091a:	4b42      	ldr	r3, [pc, #264]	; (10010a24 <at_ble_adv_start+0x124>)
1001091c:	1c16      	adds	r6, r2, #0
1001091e:	3373      	adds	r3, #115	; 0x73
10010920:	781b      	ldrb	r3, [r3, #0]
10010922:	20cf      	movs	r0, #207	; 0xcf
10010924:	930c      	str	r3, [sp, #48]	; 0x30
10010926:	2c01      	cmp	r4, #1
10010928:	d103      	bne.n	10010932 <at_ble_adv_start+0x32>
1001092a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1001092c:	2b00      	cmp	r3, #0
1001092e:	d176      	bne.n	10010a1e <at_ble_adv_start+0x11e>
10010930:	e024      	b.n	1001097c <at_ble_adv_start+0x7c>
10010932:	2c04      	cmp	r4, #4
10010934:	d873      	bhi.n	10010a1e <at_ble_adv_start+0x11e>
10010936:	2380      	movs	r3, #128	; 0x80
10010938:	01db      	lsls	r3, r3, #7
1001093a:	429d      	cmp	r5, r3
1001093c:	d86f      	bhi.n	10010a1e <at_ble_adv_start+0x11e>
1001093e:	2c00      	cmp	r4, #0
10010940:	d102      	bne.n	10010948 <at_ble_adv_start+0x48>
10010942:	2d1f      	cmp	r5, #31
10010944:	d96b      	bls.n	10010a1e <at_ble_adv_start+0x11e>
10010946:	e003      	b.n	10010950 <at_ble_adv_start+0x50>
10010948:	2d9f      	cmp	r5, #159	; 0x9f
1001094a:	d801      	bhi.n	10010950 <at_ble_adv_start+0x50>
1001094c:	2c01      	cmp	r4, #1
1001094e:	d166      	bne.n	10010a1e <at_ble_adv_start+0x11e>
10010950:	2f00      	cmp	r7, #0
10010952:	d009      	beq.n	10010968 <at_ble_adv_start+0x68>
10010954:	9b0d      	ldr	r3, [sp, #52]	; 0x34
10010956:	20cf      	movs	r0, #207	; 0xcf
10010958:	3b01      	subs	r3, #1
1001095a:	2b01      	cmp	r3, #1
1001095c:	d95f      	bls.n	10010a1e <at_ble_adv_start+0x11e>
1001095e:	2c01      	cmp	r4, #1
10010960:	d102      	bne.n	10010968 <at_ble_adv_start+0x68>
10010962:	2d00      	cmp	r5, #0
10010964:	d100      	bne.n	10010968 <at_ble_adv_start+0x68>
10010966:	3520      	adds	r5, #32
10010968:	4b2f      	ldr	r3, [pc, #188]	; (10010a28 <at_ble_adv_start+0x128>)
1001096a:	4798      	blx	r3
1001096c:	1c01      	adds	r1, r0, #0
1001096e:	2e00      	cmp	r6, #0
10010970:	d043      	beq.n	100109fa <at_ble_adv_start+0xfa>
10010972:	7833      	ldrb	r3, [r6, #0]
10010974:	1e60      	subs	r0, r4, #1
10010976:	2b00      	cmp	r3, #0
10010978:	d109      	bne.n	1001098e <at_ble_adv_start+0x8e>
1001097a:	e03b      	b.n	100109f4 <at_ble_adv_start+0xf4>
1001097c:	2380      	movs	r3, #128	; 0x80
1001097e:	01db      	lsls	r3, r3, #7
10010980:	429d      	cmp	r5, r3
10010982:	d84c      	bhi.n	10010a1e <at_ble_adv_start+0x11e>
10010984:	2e00      	cmp	r6, #0
10010986:	d04a      	beq.n	10010a1e <at_ble_adv_start+0x11e>
10010988:	2f00      	cmp	r7, #0
1001098a:	d1e3      	bne.n	10010954 <at_ble_adv_start+0x54>
1001098c:	e02b      	b.n	100109e6 <at_ble_adv_start+0xe6>
1001098e:	2301      	movs	r3, #1
10010990:	2803      	cmp	r0, #3
10010992:	d93a      	bls.n	10010a0a <at_ble_adv_start+0x10a>
10010994:	200d      	movs	r0, #13
10010996:	1c72      	adds	r2, r6, #1
10010998:	e002      	b.n	100109a0 <at_ble_adv_start+0xa0>
1001099a:	200e      	movs	r0, #14
1001099c:	1e32      	subs	r2, r6, #0
1001099e:	d1fa      	bne.n	10010996 <at_ble_adv_start+0x96>
100109a0:	4c20      	ldr	r4, [pc, #128]	; (10010a24 <at_ble_adv_start+0x124>)
100109a2:	3474      	adds	r4, #116	; 0x74
100109a4:	7826      	ldrb	r6, [r4, #0]
100109a6:	2407      	movs	r4, #7
100109a8:	2e00      	cmp	r6, #0
100109aa:	d000      	beq.n	100109ae <at_ble_adv_start+0xae>
100109ac:	1c34      	adds	r4, r6, #0
100109ae:	9200      	str	r2, [sp, #0]
100109b0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
100109b2:	9403      	str	r4, [sp, #12]
100109b4:	9204      	str	r2, [sp, #16]
100109b6:	4a1b      	ldr	r2, [pc, #108]	; (10010a24 <at_ble_adv_start+0x124>)
100109b8:	9501      	str	r5, [sp, #4]
100109ba:	9502      	str	r5, [sp, #8]
100109bc:	9705      	str	r7, [sp, #20]
100109be:	3272      	adds	r2, #114	; 0x72
100109c0:	7812      	ldrb	r2, [r2, #0]
100109c2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
100109c4:	9206      	str	r2, [sp, #24]
100109c6:	4a19      	ldr	r2, [pc, #100]	; (10010a2c <at_ble_adv_start+0x12c>)
100109c8:	9207      	str	r2, [sp, #28]
100109ca:	9a0c      	ldr	r2, [sp, #48]	; 0x30
100109cc:	9208      	str	r2, [sp, #32]
100109ce:	4a18      	ldr	r2, [pc, #96]	; (10010a30 <at_ble_adv_start+0x130>)
100109d0:	9209      	str	r2, [sp, #36]	; 0x24
100109d2:	2264      	movs	r2, #100	; 0x64
100109d4:	4362      	muls	r2, r4
100109d6:	b292      	uxth	r2, r2
100109d8:	920a      	str	r2, [sp, #40]	; 0x28
100109da:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
100109dc:	4c15      	ldr	r4, [pc, #84]	; (10010a34 <at_ble_adv_start+0x134>)
100109de:	920b      	str	r2, [sp, #44]	; 0x2c
100109e0:	4a15      	ldr	r2, [pc, #84]	; (10010a38 <at_ble_adv_start+0x138>)
100109e2:	47a0      	blx	r4
100109e4:	e01b      	b.n	10010a1e <at_ble_adv_start+0x11e>
100109e6:	2d00      	cmp	r5, #0
100109e8:	d1be      	bne.n	10010968 <at_ble_adv_start+0x68>
100109ea:	4b0f      	ldr	r3, [pc, #60]	; (10010a28 <at_ble_adv_start+0x128>)
100109ec:	4798      	blx	r3
100109ee:	2520      	movs	r5, #32
100109f0:	1c01      	adds	r1, r0, #0
100109f2:	e7be      	b.n	10010972 <at_ble_adv_start+0x72>
100109f4:	2803      	cmp	r0, #3
100109f6:	d8cd      	bhi.n	10010994 <at_ble_adv_start+0x94>
100109f8:	e006      	b.n	10010a08 <at_ble_adv_start+0x108>
100109fa:	1e60      	subs	r0, r4, #1
100109fc:	2803      	cmp	r0, #3
100109fe:	d903      	bls.n	10010a08 <at_ble_adv_start+0x108>
10010a00:	1c33      	adds	r3, r6, #0
10010a02:	200d      	movs	r0, #13
10010a04:	1c32      	adds	r2, r6, #0
10010a06:	e7cb      	b.n	100109a0 <at_ble_adv_start+0xa0>
10010a08:	2300      	movs	r3, #0
10010a0a:	f002 fb7f 	bl	1001310c <__gnu_thumb1_case_sqi>
10010a0e:	06c6      	.short	0x06c6
10010a10:	0204      	.short	0x0204
10010a12:	200f      	movs	r0, #15
10010a14:	e7c2      	b.n	1001099c <at_ble_adv_start+0x9c>
10010a16:	2200      	movs	r2, #0
10010a18:	920c      	str	r2, [sp, #48]	; 0x30
10010a1a:	200c      	movs	r0, #12
10010a1c:	e7be      	b.n	1001099c <at_ble_adv_start+0x9c>
10010a1e:	b011      	add	sp, #68	; 0x44
10010a20:	bdf0      	pop	{r4, r5, r6, r7, pc}
10010a22:	46c0      	nop			; (mov r8, r8)
10010a24:	1001b06a 	.word	0x1001b06a
10010a28:	100128b5 	.word	0x100128b5
10010a2c:	1001b09e 	.word	0x1001b09e
10010a30:	1001b0bd 	.word	0x1001b0bd
10010a34:	10012795 	.word	0x10012795
10010a38:	00003a98 	.word	0x00003a98

10010a3c <at_ble_adv_stop>:
10010a3c:	b508      	push	{r3, lr}
10010a3e:	4b01      	ldr	r3, [pc, #4]	; (10010a44 <at_ble_adv_stop+0x8>)
10010a40:	4798      	blx	r3
10010a42:	bd08      	pop	{r3, pc}
10010a44:	100125c1 	.word	0x100125c1

10010a48 <at_ble_scan_stop>:
10010a48:	b510      	push	{r4, lr}
10010a4a:	4b05      	ldr	r3, [pc, #20]	; (10010a60 <at_ble_scan_stop+0x18>)
10010a4c:	4798      	blx	r3
10010a4e:	1e04      	subs	r4, r0, #0
10010a50:	d103      	bne.n	10010a5a <at_ble_scan_stop+0x12>
10010a52:	20d1      	movs	r0, #209	; 0xd1
10010a54:	4b03      	ldr	r3, [pc, #12]	; (10010a64 <at_ble_scan_stop+0x1c>)
10010a56:	0100      	lsls	r0, r0, #4
10010a58:	4798      	blx	r3
10010a5a:	1c20      	adds	r0, r4, #0
10010a5c:	bd10      	pop	{r4, pc}
10010a5e:	46c0      	nop			; (mov r8, r8)
10010a60:	100125c1 	.word	0x100125c1
10010a64:	100104f5 	.word	0x100104f5

10010a68 <at_ble_disconnect>:
10010a68:	b538      	push	{r3, r4, r5, lr}
10010a6a:	1c04      	adds	r4, r0, #0
10010a6c:	4b04      	ldr	r3, [pc, #16]	; (10010a80 <at_ble_disconnect+0x18>)
10010a6e:	1c08      	adds	r0, r1, #0
10010a70:	1c21      	adds	r1, r4, #0
10010a72:	4798      	blx	r3
10010a74:	1c05      	adds	r5, r0, #0
10010a76:	4b03      	ldr	r3, [pc, #12]	; (10010a84 <at_ble_disconnect+0x1c>)
10010a78:	1c20      	adds	r0, r4, #0
10010a7a:	4798      	blx	r3
10010a7c:	1c28      	adds	r0, r5, #0
10010a7e:	bd38      	pop	{r3, r4, r5, pc}
10010a80:	10011c39 	.word	0x10011c39
10010a84:	10010539 	.word	0x10010539

10010a88 <at_ble_conn_update_reply>:
10010a88:	b510      	push	{r4, lr}
10010a8a:	4c01      	ldr	r4, [pc, #4]	; (10010a90 <at_ble_conn_update_reply+0x8>)
10010a8c:	47a0      	blx	r4
10010a8e:	bd10      	pop	{r4, pc}
10010a90:	10012129 	.word	0x10012129

10010a94 <at_ble_random_address_resolve>:
10010a94:	b510      	push	{r4, lr}
10010a96:	23cf      	movs	r3, #207	; 0xcf
10010a98:	2800      	cmp	r0, #0
10010a9a:	d00a      	beq.n	10010ab2 <at_ble_random_address_resolve+0x1e>
10010a9c:	2900      	cmp	r1, #0
10010a9e:	d008      	beq.n	10010ab2 <at_ble_random_address_resolve+0x1e>
10010aa0:	2a00      	cmp	r2, #0
10010aa2:	d006      	beq.n	10010ab2 <at_ble_random_address_resolve+0x1e>
10010aa4:	780c      	ldrb	r4, [r1, #0]
10010aa6:	2c02      	cmp	r4, #2
10010aa8:	d103      	bne.n	10010ab2 <at_ble_random_address_resolve+0x1e>
10010aaa:	4b03      	ldr	r3, [pc, #12]	; (10010ab8 <at_ble_random_address_resolve+0x24>)
10010aac:	3101      	adds	r1, #1
10010aae:	4798      	blx	r3
10010ab0:	2300      	movs	r3, #0
10010ab2:	1c18      	adds	r0, r3, #0
10010ab4:	bd10      	pop	{r4, pc}
10010ab6:	46c0      	nop			; (mov r8, r8)
10010ab8:	10012955 	.word	0x10012955

10010abc <at_ble_uuid_type2len>:
10010abc:	23cf      	movs	r3, #207	; 0xcf
10010abe:	2802      	cmp	r0, #2
10010ac0:	d801      	bhi.n	10010ac6 <at_ble_uuid_type2len+0xa>
10010ac2:	4b02      	ldr	r3, [pc, #8]	; (10010acc <at_ble_uuid_type2len+0x10>)
10010ac4:	5c1b      	ldrb	r3, [r3, r0]
10010ac6:	1c18      	adds	r0, r3, #0
10010ac8:	4770      	bx	lr
10010aca:	46c0      	nop			; (mov r8, r8)
10010acc:	10018423 	.word	0x10018423

10010ad0 <at_ble_uuid_len2type>:
10010ad0:	1e83      	subs	r3, r0, #2
10010ad2:	b2db      	uxtb	r3, r3
10010ad4:	2003      	movs	r0, #3
10010ad6:	2b0e      	cmp	r3, #14
10010ad8:	d801      	bhi.n	10010ade <at_ble_uuid_len2type+0xe>
10010ada:	4a01      	ldr	r2, [pc, #4]	; (10010ae0 <at_ble_uuid_len2type+0x10>)
10010adc:	5cd0      	ldrb	r0, [r2, r3]
10010ade:	4770      	bx	lr
10010ae0:	10018426 	.word	0x10018426

10010ae4 <init_gatt_client_module>:
10010ae4:	2200      	movs	r2, #0
10010ae6:	4b01      	ldr	r3, [pc, #4]	; (10010aec <init_gatt_client_module+0x8>)
10010ae8:	801a      	strh	r2, [r3, #0]
10010aea:	4770      	bx	lr
10010aec:	1001a0cc 	.word	0x1001a0cc

10010af0 <db_searchATT>:
10010af0:	b570      	push	{r4, r5, r6, lr}
10010af2:	1c05      	adds	r5, r0, #0
10010af4:	2400      	movs	r4, #0
10010af6:	4b0c      	ldr	r3, [pc, #48]	; (10010b28 <db_searchATT+0x38>)
10010af8:	6819      	ldr	r1, [r3, #0]
10010afa:	4b0c      	ldr	r3, [pc, #48]	; (10010b2c <db_searchATT+0x3c>)
10010afc:	681e      	ldr	r6, [r3, #0]
10010afe:	428c      	cmp	r4, r1
10010b00:	dc10      	bgt.n	10010b24 <db_searchATT+0x34>
10010b02:	200c      	movs	r0, #12
10010b04:	1863      	adds	r3, r4, r1
10010b06:	0fda      	lsrs	r2, r3, #31
10010b08:	18d3      	adds	r3, r2, r3
10010b0a:	1c02      	adds	r2, r0, #0
10010b0c:	105b      	asrs	r3, r3, #1
10010b0e:	435a      	muls	r2, r3
10010b10:	18b0      	adds	r0, r6, r2
10010b12:	8802      	ldrh	r2, [r0, #0]
10010b14:	42aa      	cmp	r2, r5
10010b16:	d201      	bcs.n	10010b1c <db_searchATT+0x2c>
10010b18:	1e59      	subs	r1, r3, #1
10010b1a:	e7f0      	b.n	10010afe <db_searchATT+0xe>
10010b1c:	42aa      	cmp	r2, r5
10010b1e:	d902      	bls.n	10010b26 <db_searchATT+0x36>
10010b20:	1c5c      	adds	r4, r3, #1
10010b22:	e7ec      	b.n	10010afe <db_searchATT+0xe>
10010b24:	2000      	movs	r0, #0
10010b26:	bd70      	pop	{r4, r5, r6, pc}
10010b28:	1001a0e0 	.word	0x1001a0e0
10010b2c:	1001a0d8 	.word	0x1001a0d8

10010b30 <att_permissions>:
10010b30:	b530      	push	{r4, r5, lr}
10010b32:	2403      	movs	r4, #3
10010b34:	1c05      	adds	r5, r0, #0
10010b36:	2301      	movs	r3, #1
10010b38:	4025      	ands	r5, r4
10010b3a:	42a5      	cmp	r5, r4
10010b3c:	d009      	beq.n	10010b52 <att_permissions+0x22>
10010b3e:	1c23      	adds	r3, r4, #0
10010b40:	1924      	adds	r4, r4, r4
10010b42:	4220      	tst	r0, r4
10010b44:	d105      	bne.n	10010b52 <att_permissions+0x22>
10010b46:	3b02      	subs	r3, #2
10010b48:	4218      	tst	r0, r3
10010b4a:	d102      	bne.n	10010b52 <att_permissions+0x22>
10010b4c:	1e4b      	subs	r3, r1, #1
10010b4e:	4199      	sbcs	r1, r3
10010b50:	b28b      	uxth	r3, r1
10010b52:	2130      	movs	r1, #48	; 0x30
10010b54:	4001      	ands	r1, r0
10010b56:	2930      	cmp	r1, #48	; 0x30
10010b58:	d007      	beq.n	10010b6a <att_permissions+0x3a>
10010b5a:	0641      	lsls	r1, r0, #25
10010b5c:	d401      	bmi.n	10010b62 <att_permissions+0x32>
10010b5e:	0681      	lsls	r1, r0, #26
10010b60:	d501      	bpl.n	10010b66 <att_permissions+0x36>
10010b62:	4807      	ldr	r0, [pc, #28]	; (10010b80 <att_permissions+0x50>)
10010b64:	e009      	b.n	10010b7a <att_permissions+0x4a>
10010b66:	06c1      	lsls	r1, r0, #27
10010b68:	d501      	bpl.n	10010b6e <att_permissions+0x3e>
10010b6a:	4806      	ldr	r0, [pc, #24]	; (10010b84 <att_permissions+0x54>)
10010b6c:	e005      	b.n	10010b7a <att_permissions+0x4a>
10010b6e:	2a00      	cmp	r2, #0
10010b70:	d001      	beq.n	10010b76 <att_permissions+0x46>
10010b72:	2204      	movs	r2, #4
10010b74:	4313      	orrs	r3, r2
10010b76:	2080      	movs	r0, #128	; 0x80
10010b78:	0180      	lsls	r0, r0, #6
10010b7a:	4318      	orrs	r0, r3
10010b7c:	bd30      	pop	{r4, r5, pc}
10010b7e:	46c0      	nop			; (mov r8, r8)
10010b80:	0000200c 	.word	0x0000200c
10010b84:	00002004 	.word	0x00002004

10010b88 <char_permissions>:
10010b88:	b530      	push	{r4, r5, lr}
10010b8a:	2300      	movs	r3, #0
10010b8c:	0784      	lsls	r4, r0, #30
10010b8e:	d503      	bpl.n	10010b98 <char_permissions+0x10>
10010b90:	3301      	adds	r3, #1
10010b92:	4219      	tst	r1, r3
10010b94:	d100      	bne.n	10010b98 <char_permissions+0x10>
10010b96:	3302      	adds	r3, #2
10010b98:	0704      	lsls	r4, r0, #28
10010b9a:	d508      	bpl.n	10010bae <char_permissions+0x26>
10010b9c:	06cc      	lsls	r4, r1, #27
10010b9e:	d501      	bpl.n	10010ba4 <char_permissions+0x1c>
10010ba0:	2404      	movs	r4, #4
10010ba2:	e000      	b.n	10010ba6 <char_permissions+0x1e>
10010ba4:	240c      	movs	r4, #12
10010ba6:	4323      	orrs	r3, r4
10010ba8:	2480      	movs	r4, #128	; 0x80
10010baa:	01a4      	lsls	r4, r4, #6
10010bac:	4323      	orrs	r3, r4
10010bae:	0684      	lsls	r4, r0, #26
10010bb0:	d506      	bpl.n	10010bc0 <char_permissions+0x38>
10010bb2:	2406      	movs	r4, #6
10010bb4:	4221      	tst	r1, r4
10010bb6:	d101      	bne.n	10010bbc <char_permissions+0x34>
10010bb8:	340a      	adds	r4, #10
10010bba:	e000      	b.n	10010bbe <char_permissions+0x36>
10010bbc:	2430      	movs	r4, #48	; 0x30
10010bbe:	4323      	orrs	r3, r4
10010bc0:	06c4      	lsls	r4, r0, #27
10010bc2:	d506      	bpl.n	10010bd2 <char_permissions+0x4a>
10010bc4:	2406      	movs	r4, #6
10010bc6:	4221      	tst	r1, r4
10010bc8:	d101      	bne.n	10010bce <char_permissions+0x46>
10010bca:	343a      	adds	r4, #58	; 0x3a
10010bcc:	e000      	b.n	10010bd0 <char_permissions+0x48>
10010bce:	24c0      	movs	r4, #192	; 0xc0
10010bd0:	4323      	orrs	r3, r4
10010bd2:	2480      	movs	r4, #128	; 0x80
10010bd4:	0064      	lsls	r4, r4, #1
10010bd6:	4220      	tst	r0, r4
10010bd8:	d000      	beq.n	10010bdc <char_permissions+0x54>
10010bda:	4323      	orrs	r3, r4
10010bdc:	07c4      	lsls	r4, r0, #31
10010bde:	d502      	bpl.n	10010be6 <char_permissions+0x5e>
10010be0:	2480      	movs	r4, #128	; 0x80
10010be2:	00a4      	lsls	r4, r4, #2
10010be4:	4323      	orrs	r3, r4
10010be6:	2404      	movs	r4, #4
10010be8:	4220      	tst	r0, r4
10010bea:	d006      	beq.n	10010bfa <char_permissions+0x72>
10010bec:	06cd      	lsls	r5, r1, #27
10010bee:	d400      	bmi.n	10010bf2 <char_permissions+0x6a>
10010bf0:	240c      	movs	r4, #12
10010bf2:	4323      	orrs	r3, r4
10010bf4:	2480      	movs	r4, #128	; 0x80
10010bf6:	0124      	lsls	r4, r4, #4
10010bf8:	4323      	orrs	r3, r4
10010bfa:	0644      	lsls	r4, r0, #25
10010bfc:	d501      	bpl.n	10010c02 <char_permissions+0x7a>
10010bfe:	4c08      	ldr	r4, [pc, #32]	; (10010c20 <char_permissions+0x98>)
10010c00:	4323      	orrs	r3, r4
10010c02:	0600      	lsls	r0, r0, #24
10010c04:	d507      	bpl.n	10010c16 <char_permissions+0x8e>
10010c06:	2004      	movs	r0, #4
10010c08:	06c9      	lsls	r1, r1, #27
10010c0a:	d400      	bmi.n	10010c0e <char_permissions+0x86>
10010c0c:	200c      	movs	r0, #12
10010c0e:	4303      	orrs	r3, r0
10010c10:	2084      	movs	r0, #132	; 0x84
10010c12:	0180      	lsls	r0, r0, #6
10010c14:	4303      	orrs	r3, r0
10010c16:	0390      	lsls	r0, r2, #14
10010c18:	4303      	orrs	r3, r0
10010c1a:	b298      	uxth	r0, r3
10010c1c:	bd30      	pop	{r4, r5, pc}
10010c1e:	46c0      	nop			; (mov r8, r8)
10010c20:	00001004 	.word	0x00001004

10010c24 <presentation_format_define>:
10010c24:	b507      	push	{r0, r1, r2, lr}
10010c26:	466a      	mov	r2, sp
10010c28:	780b      	ldrb	r3, [r1, #0]
10010c2a:	7013      	strb	r3, [r2, #0]
10010c2c:	784b      	ldrb	r3, [r1, #1]
10010c2e:	7053      	strb	r3, [r2, #1]
10010c30:	884b      	ldrh	r3, [r1, #2]
10010c32:	7093      	strb	r3, [r2, #2]
10010c34:	0a1b      	lsrs	r3, r3, #8
10010c36:	70d3      	strb	r3, [r2, #3]
10010c38:	790b      	ldrb	r3, [r1, #4]
10010c3a:	7113      	strb	r3, [r2, #4]
10010c3c:	88cb      	ldrh	r3, [r1, #6]
10010c3e:	2107      	movs	r1, #7
10010c40:	7153      	strb	r3, [r2, #5]
10010c42:	0a1b      	lsrs	r3, r3, #8
10010c44:	7193      	strb	r3, [r2, #6]
10010c46:	4b01      	ldr	r3, [pc, #4]	; (10010c4c <presentation_format_define+0x28>)
10010c48:	4798      	blx	r3
10010c4a:	bd0e      	pop	{r1, r2, r3, pc}
10010c4c:	10012fb9 	.word	0x10012fb9

10010c50 <db_addATT>:
10010c50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10010c52:	4c29      	ldr	r4, [pc, #164]	; (10010cf8 <db_addATT+0xa8>)
10010c54:	1c1d      	adds	r5, r3, #0
10010c56:	6823      	ldr	r3, [r4, #0]
10010c58:	9001      	str	r0, [sp, #4]
10010c5a:	26d3      	movs	r6, #211	; 0xd3
10010c5c:	2b00      	cmp	r3, #0
10010c5e:	d048      	beq.n	10010cf2 <db_addATT+0xa2>
10010c60:	1c1e      	adds	r6, r3, #0
10010c62:	3e0c      	subs	r6, #12
10010c64:	6026      	str	r6, [r4, #0]
10010c66:	2900      	cmp	r1, #0
10010c68:	d005      	beq.n	10010c76 <db_addATT+0x26>
10010c6a:	4f24      	ldr	r7, [pc, #144]	; (10010cfc <db_addATT+0xac>)
10010c6c:	46bc      	mov	ip, r7
10010c6e:	4660      	mov	r0, ip
10010c70:	683f      	ldr	r7, [r7, #0]
10010c72:	18bf      	adds	r7, r7, r2
10010c74:	6007      	str	r7, [r0, #0]
10010c76:	4821      	ldr	r0, [pc, #132]	; (10010cfc <db_addATT+0xac>)
10010c78:	6807      	ldr	r7, [r0, #0]
10010c7a:	4684      	mov	ip, r0
10010c7c:	42be      	cmp	r6, r7
10010c7e:	d932      	bls.n	10010ce6 <db_addATT+0x96>
10010c80:	4668      	mov	r0, sp
10010c82:	8880      	ldrh	r0, [r0, #4]
10010c84:	3b0c      	subs	r3, #12
10010c86:	8018      	strh	r0, [r3, #0]
10010c88:	6823      	ldr	r3, [r4, #0]
10010c8a:	2900      	cmp	r1, #0
10010c8c:	d009      	beq.n	10010ca2 <db_addATT+0x52>
10010c8e:	2a00      	cmp	r2, #0
10010c90:	d007      	beq.n	10010ca2 <db_addATT+0x52>
10010c92:	4660      	mov	r0, ip
10010c94:	6800      	ldr	r0, [r0, #0]
10010c96:	809a      	strh	r2, [r3, #4]
10010c98:	1a80      	subs	r0, r0, r2
10010c9a:	6098      	str	r0, [r3, #8]
10010c9c:	4b18      	ldr	r3, [pc, #96]	; (10010d00 <db_addATT+0xb0>)
10010c9e:	4798      	blx	r3
10010ca0:	e002      	b.n	10010ca8 <db_addATT+0x58>
10010ca2:	2100      	movs	r1, #0
10010ca4:	809a      	strh	r2, [r3, #4]
10010ca6:	6099      	str	r1, [r3, #8]
10010ca8:	2300      	movs	r3, #0
10010caa:	6822      	ldr	r2, [r4, #0]
10010cac:	7093      	strb	r3, [r2, #2]
10010cae:	3303      	adds	r3, #3
10010cb0:	402b      	ands	r3, r5
10010cb2:	2b03      	cmp	r3, #3
10010cb4:	d001      	beq.n	10010cba <db_addATT+0x6a>
10010cb6:	076b      	lsls	r3, r5, #29
10010cb8:	d504      	bpl.n	10010cc4 <db_addATT+0x74>
10010cba:	2101      	movs	r1, #1
10010cbc:	6822      	ldr	r2, [r4, #0]
10010cbe:	7893      	ldrb	r3, [r2, #2]
10010cc0:	430b      	orrs	r3, r1
10010cc2:	7093      	strb	r3, [r2, #2]
10010cc4:	2330      	movs	r3, #48	; 0x30
10010cc6:	402b      	ands	r3, r5
10010cc8:	2b30      	cmp	r3, #48	; 0x30
10010cca:	d001      	beq.n	10010cd0 <db_addATT+0x80>
10010ccc:	066b      	lsls	r3, r5, #25
10010cce:	d504      	bpl.n	10010cda <db_addATT+0x8a>
10010cd0:	2102      	movs	r1, #2
10010cd2:	6822      	ldr	r2, [r4, #0]
10010cd4:	7893      	ldrb	r3, [r2, #2]
10010cd6:	430b      	orrs	r3, r1
10010cd8:	7093      	strb	r3, [r2, #2]
10010cda:	4a0a      	ldr	r2, [pc, #40]	; (10010d04 <db_addATT+0xb4>)
10010cdc:	2600      	movs	r6, #0
10010cde:	6813      	ldr	r3, [r2, #0]
10010ce0:	3301      	adds	r3, #1
10010ce2:	6013      	str	r3, [r2, #0]
10010ce4:	e005      	b.n	10010cf2 <db_addATT+0xa2>
10010ce6:	6023      	str	r3, [r4, #0]
10010ce8:	2611      	movs	r6, #17
10010cea:	2900      	cmp	r1, #0
10010cec:	d001      	beq.n	10010cf2 <db_addATT+0xa2>
10010cee:	1aba      	subs	r2, r7, r2
10010cf0:	6002      	str	r2, [r0, #0]
10010cf2:	1c30      	adds	r0, r6, #0
10010cf4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10010cf6:	46c0      	nop			; (mov r8, r8)
10010cf8:	1001a0d8 	.word	0x1001a0d8
10010cfc:	1001a0dc 	.word	0x1001a0dc
10010d00:	10015227 	.word	0x10015227
10010d04:	1001a0e0 	.word	0x1001a0e0

10010d08 <user_description_define>:
10010d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10010d0a:	1c05      	adds	r5, r0, #0
10010d0c:	20cf      	movs	r0, #207	; 0xcf
10010d0e:	2a00      	cmp	r2, #0
10010d10:	d01c      	beq.n	10010d4c <user_description_define+0x44>
10010d12:	1c14      	adds	r4, r2, #0
10010d14:	2203      	movs	r2, #3
10010d16:	1c1e      	adds	r6, r3, #0
10010d18:	400a      	ands	r2, r1
10010d1a:	1c0b      	adds	r3, r1, #0
10010d1c:	3a03      	subs	r2, #3
10010d1e:	4251      	negs	r1, r2
10010d20:	4151      	adcs	r1, r2
10010d22:	075a      	lsls	r2, r3, #29
10010d24:	0fd2      	lsrs	r2, r2, #31
10010d26:	430a      	orrs	r2, r1
10010d28:	03d2      	lsls	r2, r2, #15
10010d2a:	4f09      	ldr	r7, [pc, #36]	; (10010d50 <user_description_define+0x48>)
10010d2c:	1c28      	adds	r0, r5, #0
10010d2e:	2a00      	cmp	r2, #0
10010d30:	d003      	beq.n	10010d3a <user_description_define+0x32>
10010d32:	1c21      	adds	r1, r4, #0
10010d34:	1c32      	adds	r2, r6, #0
10010d36:	47b8      	blx	r7
10010d38:	e008      	b.n	10010d4c <user_description_define+0x44>
10010d3a:	1c11      	adds	r1, r2, #0
10010d3c:	47b8      	blx	r7
10010d3e:	2800      	cmp	r0, #0
10010d40:	d104      	bne.n	10010d4c <user_description_define+0x44>
10010d42:	1c28      	adds	r0, r5, #0
10010d44:	1c31      	adds	r1, r6, #0
10010d46:	1c22      	adds	r2, r4, #0
10010d48:	4b02      	ldr	r3, [pc, #8]	; (10010d54 <user_description_define+0x4c>)
10010d4a:	4798      	blx	r3
10010d4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10010d4e:	46c0      	nop			; (mov r8, r8)
10010d50:	10010c51 	.word	0x10010c51
10010d54:	10012fb9 	.word	0x10012fb9

10010d58 <at_ble_read_authorize_reply.part.1>:
10010d58:	b537      	push	{r0, r1, r2, r4, r5, lr}
10010d5a:	4b09      	ldr	r3, [pc, #36]	; (10010d80 <at_ble_read_authorize_reply.part.1+0x28>)
10010d5c:	1c05      	adds	r5, r0, #0
10010d5e:	1c08      	adds	r0, r1, #0
10010d60:	1c0c      	adds	r4, r1, #0
10010d62:	4798      	blx	r3
10010d64:	2800      	cmp	r0, #0
10010d66:	d009      	beq.n	10010d7c <at_ble_read_authorize_reply.part.1+0x24>
10010d68:	6882      	ldr	r2, [r0, #8]
10010d6a:	2a00      	cmp	r2, #0
10010d6c:	d006      	beq.n	10010d7c <at_ble_read_authorize_reply.part.1+0x24>
10010d6e:	8883      	ldrh	r3, [r0, #4]
10010d70:	1c29      	adds	r1, r5, #0
10010d72:	9200      	str	r2, [sp, #0]
10010d74:	1c20      	adds	r0, r4, #0
10010d76:	2200      	movs	r2, #0
10010d78:	4c02      	ldr	r4, [pc, #8]	; (10010d84 <at_ble_read_authorize_reply.part.1+0x2c>)
10010d7a:	47a0      	blx	r4
10010d7c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
10010d7e:	46c0      	nop			; (mov r8, r8)
10010d80:	10010af1 	.word	0x10010af1
10010d84:	10012a51 	.word	0x10012a51

10010d88 <internal_at_ble_service_define>:
10010d88:	b5f0      	push	{r4, r5, r6, r7, lr}
10010d8a:	b08b      	sub	sp, #44	; 0x2c
10010d8c:	9306      	str	r3, [sp, #24]
10010d8e:	ab10      	add	r3, sp, #64	; 0x40
10010d90:	9202      	str	r2, [sp, #8]
10010d92:	cb04      	ldmia	r3!, {r2}
10010d94:	1c05      	adds	r5, r0, #0
10010d96:	881b      	ldrh	r3, [r3, #0]
10010d98:	9105      	str	r1, [sp, #20]
10010d9a:	9303      	str	r3, [sp, #12]
10010d9c:	ab12      	add	r3, sp, #72	; 0x48
10010d9e:	781b      	ldrb	r3, [r3, #0]
10010da0:	20cf      	movs	r0, #207	; 0xcf
10010da2:	9304      	str	r3, [sp, #16]
10010da4:	2d00      	cmp	r5, #0
10010da6:	d100      	bne.n	10010daa <internal_at_ble_service_define+0x22>
10010da8:	e1ca      	b.n	10011140 <internal_at_ble_service_define+0x3b8>
10010daa:	2900      	cmp	r1, #0
10010dac:	d100      	bne.n	10010db0 <internal_at_ble_service_define+0x28>
10010dae:	e1c7      	b.n	10011140 <internal_at_ble_service_define+0x3b8>
10010db0:	2a00      	cmp	r2, #0
10010db2:	d100      	bne.n	10010db6 <internal_at_ble_service_define+0x2e>
10010db4:	e1c4      	b.n	10011140 <internal_at_ble_service_define+0x3b8>
10010db6:	9b03      	ldr	r3, [sp, #12]
10010db8:	2b00      	cmp	r3, #0
10010dba:	d100      	bne.n	10010dbe <internal_at_ble_service_define+0x36>
10010dbc:	e1c0      	b.n	10011140 <internal_at_ble_service_define+0x3b8>
10010dbe:	4bc9      	ldr	r3, [pc, #804]	; (100110e4 <internal_at_ble_service_define+0x35c>)
10010dc0:	3004      	adds	r0, #4
10010dc2:	681e      	ldr	r6, [r3, #0]
10010dc4:	2e00      	cmp	r6, #0
10010dc6:	d100      	bne.n	10010dca <internal_at_ble_service_define+0x42>
10010dc8:	e1ba      	b.n	10011140 <internal_at_ble_service_define+0x3b8>
10010dca:	2400      	movs	r4, #0
10010dcc:	4bc6      	ldr	r3, [pc, #792]	; (100110e8 <internal_at_ble_service_define+0x360>)
10010dce:	8034      	strh	r4, [r6, #0]
10010dd0:	881b      	ldrh	r3, [r3, #0]
10010dd2:	1db7      	adds	r7, r6, #6
10010dd4:	1c21      	adds	r1, r4, #0
10010dd6:	2210      	movs	r2, #16
10010dd8:	8073      	strh	r3, [r6, #2]
10010dda:	1c38      	adds	r0, r7, #0
10010ddc:	4bc3      	ldr	r3, [pc, #780]	; (100110ec <internal_at_ble_service_define+0x364>)
10010dde:	4798      	blx	r3
10010de0:	7828      	ldrb	r0, [r5, #0]
10010de2:	4bc3      	ldr	r3, [pc, #780]	; (100110f0 <internal_at_ble_service_define+0x368>)
10010de4:	4798      	blx	r3
10010de6:	1c69      	adds	r1, r5, #1
10010de8:	1c02      	adds	r2, r0, #0
10010dea:	4bc2      	ldr	r3, [pc, #776]	; (100110f4 <internal_at_ble_service_define+0x36c>)
10010dec:	1c38      	adds	r0, r7, #0
10010dee:	4798      	blx	r3
10010df0:	2204      	movs	r2, #4
10010df2:	782b      	ldrb	r3, [r5, #0]
10010df4:	9d02      	ldr	r5, [sp, #8]
10010df6:	011b      	lsls	r3, r3, #4
10010df8:	4313      	orrs	r3, r2
10010dfa:	9a04      	ldr	r2, [sp, #16]
10010dfc:	7174      	strb	r4, [r6, #5]
10010dfe:	0192      	lsls	r2, r2, #6
10010e00:	4313      	orrs	r3, r2
10010e02:	7133      	strb	r3, [r6, #4]
10010e04:	2316      	movs	r3, #22
10010e06:	9a06      	ldr	r2, [sp, #24]
10010e08:	3512      	adds	r5, #18
10010e0a:	4353      	muls	r3, r2
10010e0c:	9a02      	ldr	r2, [sp, #8]
10010e0e:	3312      	adds	r3, #18
10010e10:	18d7      	adds	r7, r2, r3
10010e12:	42bd      	cmp	r5, r7
10010e14:	d00f      	beq.n	10010e36 <internal_at_ble_service_define+0xae>
10010e16:	4bb8      	ldr	r3, [pc, #736]	; (100110f8 <internal_at_ble_service_define+0x370>)
10010e18:	8829      	ldrh	r1, [r5, #0]
10010e1a:	9300      	str	r3, [sp, #0]
10010e1c:	230e      	movs	r3, #14
10010e1e:	aa06      	add	r2, sp, #24
10010e20:	189b      	adds	r3, r3, r2
10010e22:	9301      	str	r3, [sp, #4]
10010e24:	4cb5      	ldr	r4, [pc, #724]	; (100110fc <internal_at_ble_service_define+0x374>)
10010e26:	1c30      	adds	r0, r6, #0
10010e28:	2201      	movs	r2, #1
10010e2a:	2302      	movs	r3, #2
10010e2c:	47a0      	blx	r4
10010e2e:	3516      	adds	r5, #22
10010e30:	1e04      	subs	r4, r0, #0
10010e32:	d0ee      	beq.n	10010e12 <internal_at_ble_service_define+0x8a>
10010e34:	e183      	b.n	1001113e <internal_at_ble_service_define+0x3b6>
10010e36:	9f10      	ldr	r7, [sp, #64]	; 0x40
10010e38:	2300      	movs	r3, #0
10010e3a:	3714      	adds	r7, #20
10010e3c:	1c3d      	adds	r5, r7, #0
10010e3e:	9302      	str	r3, [sp, #8]
10010e40:	9b02      	ldr	r3, [sp, #8]
10010e42:	9a03      	ldr	r2, [sp, #12]
10010e44:	4293      	cmp	r3, r2
10010e46:	db00      	blt.n	10010e4a <internal_at_ble_service_define+0xc2>
10010e48:	e0bf      	b.n	10010fca <internal_at_ble_service_define+0x242>
10010e4a:	4bad      	ldr	r3, [pc, #692]	; (10011100 <internal_at_ble_service_define+0x378>)
10010e4c:	aa06      	add	r2, sp, #24
10010e4e:	9300      	str	r3, [sp, #0]
10010e50:	230e      	movs	r3, #14
10010e52:	189b      	adds	r3, r3, r2
10010e54:	9301      	str	r3, [sp, #4]
10010e56:	4ca9      	ldr	r4, [pc, #676]	; (100110fc <internal_at_ble_service_define+0x374>)
10010e58:	1c30      	adds	r0, r6, #0
10010e5a:	2104      	movs	r1, #4
10010e5c:	2201      	movs	r2, #1
10010e5e:	2302      	movs	r3, #2
10010e60:	47a0      	blx	r4
10010e62:	1e04      	subs	r4, r0, #0
10010e64:	d000      	beq.n	10010e68 <internal_at_ble_service_define+0xe0>
10010e66:	e16a      	b.n	1001113e <internal_at_ble_service_define+0x3b6>
10010e68:	1c2b      	adds	r3, r5, #0
10010e6a:	3b12      	subs	r3, #18
10010e6c:	7b2c      	ldrb	r4, [r5, #12]
10010e6e:	781b      	ldrb	r3, [r3, #0]
10010e70:	1c21      	adds	r1, r4, #0
10010e72:	1c1a      	adds	r2, r3, #0
10010e74:	9304      	str	r3, [sp, #16]
10010e76:	8828      	ldrh	r0, [r5, #0]
10010e78:	4ba2      	ldr	r3, [pc, #648]	; (10011104 <internal_at_ble_service_define+0x37c>)
10010e7a:	4798      	blx	r3
10010e7c:	2303      	movs	r3, #3
10010e7e:	4023      	ands	r3, r4
10010e80:	3b03      	subs	r3, #3
10010e82:	4259      	negs	r1, r3
10010e84:	4159      	adcs	r1, r3
10010e86:	2301      	movs	r3, #1
10010e88:	08a4      	lsrs	r4, r4, #2
10010e8a:	401c      	ands	r4, r3
10010e8c:	430c      	orrs	r4, r1
10010e8e:	896b      	ldrh	r3, [r5, #10]
10010e90:	03e4      	lsls	r4, r4, #15
10010e92:	431c      	orrs	r4, r3
10010e94:	9007      	str	r0, [sp, #28]
10010e96:	4b96      	ldr	r3, [pc, #600]	; (100110f0 <internal_at_ble_service_define+0x368>)
10010e98:	9804      	ldr	r0, [sp, #16]
10010e9a:	4798      	blx	r3
10010e9c:	1c2a      	adds	r2, r5, #0
10010e9e:	3a11      	subs	r2, #17
10010ea0:	9200      	str	r2, [sp, #0]
10010ea2:	3a03      	subs	r2, #3
10010ea4:	1c03      	adds	r3, r0, #0
10010ea6:	9201      	str	r2, [sp, #4]
10010ea8:	1c21      	adds	r1, r4, #0
10010eaa:	1c30      	adds	r0, r6, #0
10010eac:	4c93      	ldr	r4, [pc, #588]	; (100110fc <internal_at_ble_service_define+0x374>)
10010eae:	9a07      	ldr	r2, [sp, #28]
10010eb0:	47a0      	blx	r4
10010eb2:	1e04      	subs	r4, r0, #0
10010eb4:	d000      	beq.n	10010eb8 <internal_at_ble_service_define+0x130>
10010eb6:	e142      	b.n	1001113e <internal_at_ble_service_define+0x3b6>
10010eb8:	22c0      	movs	r2, #192	; 0xc0
10010eba:	882b      	ldrh	r3, [r5, #0]
10010ebc:	0052      	lsls	r2, r2, #1
10010ebe:	4213      	tst	r3, r2
10010ec0:	d104      	bne.n	10010ecc <internal_at_ble_service_define+0x144>
10010ec2:	8aab      	ldrh	r3, [r5, #20]
10010ec4:	9304      	str	r3, [sp, #16]
10010ec6:	2b00      	cmp	r3, #0
10010ec8:	d116      	bne.n	10010ef8 <internal_at_ble_service_define+0x170>
10010eca:	e03a      	b.n	10010f42 <internal_at_ble_service_define+0x1ba>
10010ecc:	2201      	movs	r2, #1
10010ece:	09d9      	lsrs	r1, r3, #7
10010ed0:	4011      	ands	r1, r2
10010ed2:	05db      	lsls	r3, r3, #23
10010ed4:	d501      	bpl.n	10010eda <internal_at_ble_service_define+0x152>
10010ed6:	2302      	movs	r3, #2
10010ed8:	4319      	orrs	r1, r3
10010eda:	4b8b      	ldr	r3, [pc, #556]	; (10011108 <internal_at_ble_service_define+0x380>)
10010edc:	aa06      	add	r2, sp, #24
10010ede:	9300      	str	r3, [sp, #0]
10010ee0:	230e      	movs	r3, #14
10010ee2:	189b      	adds	r3, r3, r2
10010ee4:	9301      	str	r3, [sp, #4]
10010ee6:	4c85      	ldr	r4, [pc, #532]	; (100110fc <internal_at_ble_service_define+0x374>)
10010ee8:	0209      	lsls	r1, r1, #8
10010eea:	1c30      	adds	r0, r6, #0
10010eec:	2201      	movs	r2, #1
10010eee:	2302      	movs	r3, #2
10010ef0:	47a0      	blx	r4
10010ef2:	1e04      	subs	r4, r0, #0
10010ef4:	d0e5      	beq.n	10010ec2 <internal_at_ble_service_define+0x13a>
10010ef6:	e122      	b.n	1001113e <internal_at_ble_service_define+0x3b6>
10010ef8:	2380      	movs	r3, #128	; 0x80
10010efa:	882a      	ldrh	r2, [r5, #0]
10010efc:	7f2c      	ldrb	r4, [r5, #28]
10010efe:	005b      	lsls	r3, r3, #1
10010f00:	401a      	ands	r2, r3
10010f02:	1c20      	adds	r0, r4, #0
10010f04:	2101      	movs	r1, #1
10010f06:	2a00      	cmp	r2, #0
10010f08:	d000      	beq.n	10010f0c <internal_at_ble_service_define+0x184>
10010f0a:	1c0a      	adds	r2, r1, #0
10010f0c:	4b7f      	ldr	r3, [pc, #508]	; (1001110c <internal_at_ble_service_define+0x384>)
10010f0e:	4798      	blx	r3
10010f10:	2203      	movs	r2, #3
10010f12:	4022      	ands	r2, r4
10010f14:	3a03      	subs	r2, #3
10010f16:	4251      	negs	r1, r2
10010f18:	4151      	adcs	r1, r2
10010f1a:	4b7d      	ldr	r3, [pc, #500]	; (10011110 <internal_at_ble_service_define+0x388>)
10010f1c:	1c0a      	adds	r2, r1, #0
10010f1e:	9300      	str	r3, [sp, #0]
10010f20:	1c2b      	adds	r3, r5, #0
10010f22:	0764      	lsls	r4, r4, #29
10010f24:	0fe4      	lsrs	r4, r4, #31
10010f26:	4322      	orrs	r2, r4
10010f28:	03d2      	lsls	r2, r2, #15
10010f2a:	4310      	orrs	r0, r2
10010f2c:	3320      	adds	r3, #32
10010f2e:	b282      	uxth	r2, r0
10010f30:	9301      	str	r3, [sp, #4]
10010f32:	4c72      	ldr	r4, [pc, #456]	; (100110fc <internal_at_ble_service_define+0x374>)
10010f34:	1c30      	adds	r0, r6, #0
10010f36:	9904      	ldr	r1, [sp, #16]
10010f38:	2302      	movs	r3, #2
10010f3a:	47a0      	blx	r4
10010f3c:	1e04      	subs	r4, r0, #0
10010f3e:	d000      	beq.n	10010f42 <internal_at_ble_service_define+0x1ba>
10010f40:	e0fd      	b.n	1001113e <internal_at_ble_service_define+0x3b6>
10010f42:	2101      	movs	r1, #1
10010f44:	882b      	ldrh	r3, [r5, #0]
10010f46:	420b      	tst	r3, r1
10010f48:	d011      	beq.n	10010f6e <internal_at_ble_service_define+0x1e6>
10010f4a:	7fa8      	ldrb	r0, [r5, #30]
10010f4c:	4b6f      	ldr	r3, [pc, #444]	; (1001110c <internal_at_ble_service_define+0x384>)
10010f4e:	2200      	movs	r2, #0
10010f50:	4798      	blx	r3
10010f52:	4b70      	ldr	r3, [pc, #448]	; (10011114 <internal_at_ble_service_define+0x38c>)
10010f54:	1c02      	adds	r2, r0, #0
10010f56:	9300      	str	r3, [sp, #0]
10010f58:	1c2b      	adds	r3, r5, #0
10010f5a:	3324      	adds	r3, #36	; 0x24
10010f5c:	9301      	str	r3, [sp, #4]
10010f5e:	4c67      	ldr	r4, [pc, #412]	; (100110fc <internal_at_ble_service_define+0x374>)
10010f60:	1c30      	adds	r0, r6, #0
10010f62:	496d      	ldr	r1, [pc, #436]	; (10011118 <internal_at_ble_service_define+0x390>)
10010f64:	2302      	movs	r3, #2
10010f66:	47a0      	blx	r4
10010f68:	1e04      	subs	r4, r0, #0
10010f6a:	d000      	beq.n	10010f6e <internal_at_ble_service_define+0x1e6>
10010f6c:	e0e7      	b.n	1001113e <internal_at_ble_service_define+0x3b6>
10010f6e:	2330      	movs	r3, #48	; 0x30
10010f70:	882a      	ldrh	r2, [r5, #0]
10010f72:	421a      	tst	r2, r3
10010f74:	d012      	beq.n	10010f9c <internal_at_ble_service_define+0x214>
10010f76:	2101      	movs	r1, #1
10010f78:	7f68      	ldrb	r0, [r5, #29]
10010f7a:	1c0a      	adds	r2, r1, #0
10010f7c:	4b63      	ldr	r3, [pc, #396]	; (1001110c <internal_at_ble_service_define+0x384>)
10010f7e:	4798      	blx	r3
10010f80:	4b66      	ldr	r3, [pc, #408]	; (1001111c <internal_at_ble_service_define+0x394>)
10010f82:	1c02      	adds	r2, r0, #0
10010f84:	9300      	str	r3, [sp, #0]
10010f86:	1c2b      	adds	r3, r5, #0
10010f88:	3322      	adds	r3, #34	; 0x22
10010f8a:	9301      	str	r3, [sp, #4]
10010f8c:	4c5b      	ldr	r4, [pc, #364]	; (100110fc <internal_at_ble_service_define+0x374>)
10010f8e:	1c30      	adds	r0, r6, #0
10010f90:	4961      	ldr	r1, [pc, #388]	; (10011118 <internal_at_ble_service_define+0x390>)
10010f92:	2302      	movs	r3, #2
10010f94:	47a0      	blx	r4
10010f96:	1e04      	subs	r4, r0, #0
10010f98:	d000      	beq.n	10010f9c <internal_at_ble_service_define+0x214>
10010f9a:	e0d0      	b.n	1001113e <internal_at_ble_service_define+0x3b6>
10010f9c:	69ab      	ldr	r3, [r5, #24]
10010f9e:	2b00      	cmp	r3, #0
10010fa0:	d00e      	beq.n	10010fc0 <internal_at_ble_service_define+0x238>
10010fa2:	4b5f      	ldr	r3, [pc, #380]	; (10011120 <internal_at_ble_service_define+0x398>)
10010fa4:	aa06      	add	r2, sp, #24
10010fa6:	9300      	str	r3, [sp, #0]
10010fa8:	230e      	movs	r3, #14
10010faa:	189b      	adds	r3, r3, r2
10010fac:	9301      	str	r3, [sp, #4]
10010fae:	4c53      	ldr	r4, [pc, #332]	; (100110fc <internal_at_ble_service_define+0x374>)
10010fb0:	1c30      	adds	r0, r6, #0
10010fb2:	2107      	movs	r1, #7
10010fb4:	2201      	movs	r2, #1
10010fb6:	2302      	movs	r3, #2
10010fb8:	47a0      	blx	r4
10010fba:	1e04      	subs	r4, r0, #0
10010fbc:	d000      	beq.n	10010fc0 <internal_at_ble_service_define+0x238>
10010fbe:	e0be      	b.n	1001113e <internal_at_ble_service_define+0x3b6>
10010fc0:	9b02      	ldr	r3, [sp, #8]
10010fc2:	353c      	adds	r5, #60	; 0x3c
10010fc4:	3301      	adds	r3, #1
10010fc6:	9302      	str	r3, [sp, #8]
10010fc8:	e73a      	b.n	10010e40 <internal_at_ble_service_define+0xb8>
10010fca:	1c30      	adds	r0, r6, #0
10010fcc:	4b55      	ldr	r3, [pc, #340]	; (10011124 <internal_at_ble_service_define+0x39c>)
10010fce:	4798      	blx	r3
10010fd0:	1e04      	subs	r4, r0, #0
10010fd2:	d000      	beq.n	10010fd6 <internal_at_ble_service_define+0x24e>
10010fd4:	e0b3      	b.n	1001113e <internal_at_ble_service_define+0x3b6>
10010fd6:	8833      	ldrh	r3, [r6, #0]
10010fd8:	9a05      	ldr	r2, [sp, #20]
10010fda:	8013      	strh	r3, [r2, #0]
10010fdc:	8836      	ldrh	r6, [r6, #0]
10010fde:	9b06      	ldr	r3, [sp, #24]
10010fe0:	9a03      	ldr	r2, [sp, #12]
10010fe2:	18f6      	adds	r6, r6, r3
10010fe4:	b2b3      	uxth	r3, r6
10010fe6:	9302      	str	r3, [sp, #8]
10010fe8:	233c      	movs	r3, #60	; 0x3c
10010fea:	4353      	muls	r3, r2
10010fec:	9a10      	ldr	r2, [sp, #64]	; 0x40
10010fee:	3314      	adds	r3, #20
10010ff0:	18d3      	adds	r3, r2, r3
10010ff2:	9304      	str	r3, [sp, #16]
10010ff4:	9b04      	ldr	r3, [sp, #16]
10010ff6:	429f      	cmp	r7, r3
10010ff8:	d100      	bne.n	10010ffc <internal_at_ble_service_define+0x274>
10010ffa:	e0a0      	b.n	1001113e <internal_at_ble_service_define+0x3b6>
10010ffc:	9b02      	ldr	r3, [sp, #8]
10010ffe:	1c9d      	adds	r5, r3, #2
10011000:	1c3b      	adds	r3, r7, #0
10011002:	b2ad      	uxth	r5, r5
10011004:	3b14      	subs	r3, #20
10011006:	801d      	strh	r5, [r3, #0]
10011008:	9303      	str	r3, [sp, #12]
1001100a:	893b      	ldrh	r3, [r7, #8]
1001100c:	2b00      	cmp	r3, #0
1001100e:	d108      	bne.n	10011022 <internal_at_ble_service_define+0x29a>
10011010:	23c0      	movs	r3, #192	; 0xc0
10011012:	883a      	ldrh	r2, [r7, #0]
10011014:	005b      	lsls	r3, r3, #1
10011016:	421a      	tst	r2, r3
10011018:	d026      	beq.n	10011068 <internal_at_ble_service_define+0x2e0>
1001101a:	9e02      	ldr	r6, [sp, #8]
1001101c:	3603      	adds	r6, #3
1001101e:	b2b5      	uxth	r5, r6
10011020:	e022      	b.n	10011068 <internal_at_ble_service_define+0x2e0>
10011022:	2103      	movs	r1, #3
10011024:	7b3b      	ldrb	r3, [r7, #12]
10011026:	4019      	ands	r1, r3
10011028:	3903      	subs	r1, #3
1001102a:	424a      	negs	r2, r1
1001102c:	414a      	adcs	r2, r1
1001102e:	0759      	lsls	r1, r3, #29
10011030:	0fc9      	lsrs	r1, r1, #31
10011032:	4311      	orrs	r1, r2
10011034:	03c9      	lsls	r1, r1, #15
10011036:	897a      	ldrh	r2, [r7, #10]
10011038:	2900      	cmp	r1, #0
1001103a:	d007      	beq.n	1001104c <internal_at_ble_service_define+0x2c4>
1001103c:	6879      	ldr	r1, [r7, #4]
1001103e:	2900      	cmp	r1, #0
10011040:	d100      	bne.n	10011044 <internal_at_ble_service_define+0x2bc>
10011042:	4939      	ldr	r1, [pc, #228]	; (10011128 <internal_at_ble_service_define+0x3a0>)
10011044:	1c28      	adds	r0, r5, #0
10011046:	4e39      	ldr	r6, [pc, #228]	; (1001112c <internal_at_ble_service_define+0x3a4>)
10011048:	47b0      	blx	r6
1001104a:	e00a      	b.n	10011062 <internal_at_ble_service_define+0x2da>
1001104c:	1c28      	adds	r0, r5, #0
1001104e:	4e37      	ldr	r6, [pc, #220]	; (1001112c <internal_at_ble_service_define+0x3a4>)
10011050:	47b0      	blx	r6
10011052:	2800      	cmp	r0, #0
10011054:	d172      	bne.n	1001113c <internal_at_ble_service_define+0x3b4>
10011056:	9b03      	ldr	r3, [sp, #12]
10011058:	8939      	ldrh	r1, [r7, #8]
1001105a:	8818      	ldrh	r0, [r3, #0]
1001105c:	687a      	ldr	r2, [r7, #4]
1001105e:	4b34      	ldr	r3, [pc, #208]	; (10011130 <internal_at_ble_service_define+0x3a8>)
10011060:	4798      	blx	r3
10011062:	2800      	cmp	r0, #0
10011064:	d0d4      	beq.n	10011010 <internal_at_ble_service_define+0x288>
10011066:	e069      	b.n	1001113c <internal_at_ble_service_define+0x3b4>
10011068:	8abb      	ldrh	r3, [r7, #20]
1001106a:	2b00      	cmp	r3, #0
1001106c:	d00a      	beq.n	10011084 <internal_at_ble_service_define+0x2fc>
1001106e:	3501      	adds	r5, #1
10011070:	b2ad      	uxth	r5, r5
10011072:	843d      	strh	r5, [r7, #32]
10011074:	7f39      	ldrb	r1, [r7, #28]
10011076:	8afb      	ldrh	r3, [r7, #22]
10011078:	1c28      	adds	r0, r5, #0
1001107a:	693a      	ldr	r2, [r7, #16]
1001107c:	4e2d      	ldr	r6, [pc, #180]	; (10011134 <internal_at_ble_service_define+0x3ac>)
1001107e:	47b0      	blx	r6
10011080:	2800      	cmp	r0, #0
10011082:	d15b      	bne.n	1001113c <internal_at_ble_service_define+0x3b4>
10011084:	883b      	ldrh	r3, [r7, #0]
10011086:	07db      	lsls	r3, r3, #31
10011088:	d50d      	bpl.n	100110a6 <internal_at_ble_service_define+0x31e>
1001108a:	2200      	movs	r2, #0
1001108c:	3501      	adds	r5, #1
1001108e:	b2ad      	uxth	r5, r5
10011090:	a909      	add	r1, sp, #36	; 0x24
10011092:	84bd      	strh	r5, [r7, #36]	; 0x24
10011094:	7fbb      	ldrb	r3, [r7, #30]
10011096:	1c28      	adds	r0, r5, #0
10011098:	700a      	strb	r2, [r1, #0]
1001109a:	704a      	strb	r2, [r1, #1]
1001109c:	4e23      	ldr	r6, [pc, #140]	; (1001112c <internal_at_ble_service_define+0x3a4>)
1001109e:	3202      	adds	r2, #2
100110a0:	47b0      	blx	r6
100110a2:	2800      	cmp	r0, #0
100110a4:	d14a      	bne.n	1001113c <internal_at_ble_service_define+0x3b4>
100110a6:	2330      	movs	r3, #48	; 0x30
100110a8:	883a      	ldrh	r2, [r7, #0]
100110aa:	421a      	tst	r2, r3
100110ac:	d00d      	beq.n	100110ca <internal_at_ble_service_define+0x342>
100110ae:	2200      	movs	r2, #0
100110b0:	3501      	adds	r5, #1
100110b2:	b2ad      	uxth	r5, r5
100110b4:	a909      	add	r1, sp, #36	; 0x24
100110b6:	847d      	strh	r5, [r7, #34]	; 0x22
100110b8:	7f7b      	ldrb	r3, [r7, #29]
100110ba:	1c28      	adds	r0, r5, #0
100110bc:	700a      	strb	r2, [r1, #0]
100110be:	704a      	strb	r2, [r1, #1]
100110c0:	4e1a      	ldr	r6, [pc, #104]	; (1001112c <internal_at_ble_service_define+0x3a4>)
100110c2:	3202      	adds	r2, #2
100110c4:	47b0      	blx	r6
100110c6:	2800      	cmp	r0, #0
100110c8:	d138      	bne.n	1001113c <internal_at_ble_service_define+0x3b4>
100110ca:	69b9      	ldr	r1, [r7, #24]
100110cc:	2900      	cmp	r1, #0
100110ce:	d006      	beq.n	100110de <internal_at_ble_service_define+0x356>
100110d0:	3501      	adds	r5, #1
100110d2:	b2ad      	uxth	r5, r5
100110d4:	1c28      	adds	r0, r5, #0
100110d6:	4b18      	ldr	r3, [pc, #96]	; (10011138 <internal_at_ble_service_define+0x3b0>)
100110d8:	4798      	blx	r3
100110da:	2800      	cmp	r0, #0
100110dc:	d12e      	bne.n	1001113c <internal_at_ble_service_define+0x3b4>
100110de:	373c      	adds	r7, #60	; 0x3c
100110e0:	9502      	str	r5, [sp, #8]
100110e2:	e787      	b.n	10010ff4 <internal_at_ble_service_define+0x26c>
100110e4:	1001a0e8 	.word	0x1001a0e8
100110e8:	1001afd8 	.word	0x1001afd8
100110ec:	10015239 	.word	0x10015239
100110f0:	10010abd 	.word	0x10010abd
100110f4:	10015227 	.word	0x10015227
100110f8:	1001843f 	.word	0x1001843f
100110fc:	10012f49 	.word	0x10012f49
10011100:	10018441 	.word	0x10018441
10011104:	10010b89 	.word	0x10010b89
10011108:	1001843d 	.word	0x1001843d
1001110c:	10010b31 	.word	0x10010b31
10011110:	10018439 	.word	0x10018439
10011114:	1001843b 	.word	0x1001843b
10011118:	00008002 	.word	0x00008002
1001111c:	10018435 	.word	0x10018435
10011120:	10018437 	.word	0x10018437
10011124:	10012e3d 	.word	0x10012e3d
10011128:	1001a0d4 	.word	0x1001a0d4
1001112c:	10010c51 	.word	0x10010c51
10011130:	10012fb9 	.word	0x10012fb9
10011134:	10010d09 	.word	0x10010d09
10011138:	10010c25 	.word	0x10010c25
1001113c:	1c04      	adds	r4, r0, #0
1001113e:	1c20      	adds	r0, r4, #0
10011140:	b00b      	add	sp, #44	; 0x2c
10011142:	bdf0      	pop	{r4, r5, r6, r7, pc}

10011144 <initi_gatt_server_module>:
10011144:	2300      	movs	r3, #0
10011146:	4a07      	ldr	r2, [pc, #28]	; (10011164 <initi_gatt_server_module+0x20>)
10011148:	7013      	strb	r3, [r2, #0]
1001114a:	4a07      	ldr	r2, [pc, #28]	; (10011168 <initi_gatt_server_module+0x24>)
1001114c:	6013      	str	r3, [r2, #0]
1001114e:	4a07      	ldr	r2, [pc, #28]	; (1001116c <initi_gatt_server_module+0x28>)
10011150:	6013      	str	r3, [r2, #0]
10011152:	4a07      	ldr	r2, [pc, #28]	; (10011170 <initi_gatt_server_module+0x2c>)
10011154:	6013      	str	r3, [r2, #0]
10011156:	4a07      	ldr	r2, [pc, #28]	; (10011174 <initi_gatt_server_module+0x30>)
10011158:	6013      	str	r3, [r2, #0]
1001115a:	4a07      	ldr	r2, [pc, #28]	; (10011178 <initi_gatt_server_module+0x34>)
1001115c:	6013      	str	r3, [r2, #0]
1001115e:	4a07      	ldr	r2, [pc, #28]	; (1001117c <initi_gatt_server_module+0x38>)
10011160:	6013      	str	r3, [r2, #0]
10011162:	4770      	bx	lr
10011164:	1001a0d4 	.word	0x1001a0d4
10011168:	1001a0e4 	.word	0x1001a0e4
1001116c:	1001a0e0 	.word	0x1001a0e0
10011170:	1001a0d0 	.word	0x1001a0d0
10011174:	1001a0dc 	.word	0x1001a0dc
10011178:	1001a0d8 	.word	0x1001a0d8
1001117c:	1001a0e8 	.word	0x1001a0e8

10011180 <db_init>:
10011180:	4b0a      	ldr	r3, [pc, #40]	; (100111ac <db_init+0x2c>)
10011182:	4a0b      	ldr	r2, [pc, #44]	; (100111b0 <db_init+0x30>)
10011184:	6018      	str	r0, [r3, #0]
10011186:	084b      	lsrs	r3, r1, #1
10011188:	6013      	str	r3, [r2, #0]
1001118a:	4a0a      	ldr	r2, [pc, #40]	; (100111b4 <db_init+0x34>)
1001118c:	18c3      	adds	r3, r0, r3
1001118e:	6013      	str	r3, [r2, #0]
10011190:	4a09      	ldr	r2, [pc, #36]	; (100111b8 <db_init+0x38>)
10011192:	1841      	adds	r1, r0, r1
10011194:	6013      	str	r3, [r2, #0]
10011196:	2303      	movs	r3, #3
10011198:	2200      	movs	r2, #0
1001119a:	3103      	adds	r1, #3
1001119c:	4399      	bics	r1, r3
1001119e:	4b07      	ldr	r3, [pc, #28]	; (100111bc <db_init+0x3c>)
100111a0:	3904      	subs	r1, #4
100111a2:	6019      	str	r1, [r3, #0]
100111a4:	4b06      	ldr	r3, [pc, #24]	; (100111c0 <db_init+0x40>)
100111a6:	601a      	str	r2, [r3, #0]
100111a8:	4770      	bx	lr
100111aa:	46c0      	nop			; (mov r8, r8)
100111ac:	1001a0e8 	.word	0x1001a0e8
100111b0:	1001a0e4 	.word	0x1001a0e4
100111b4:	1001a0d0 	.word	0x1001a0d0
100111b8:	1001a0dc 	.word	0x1001a0dc
100111bc:	1001a0d8 	.word	0x1001a0d8
100111c0:	1001a0e0 	.word	0x1001a0e0

100111c4 <at_ble_primary_service_define>:
100111c4:	b530      	push	{r4, r5, lr}
100111c6:	b085      	sub	sp, #20
100111c8:	ac08      	add	r4, sp, #32
100111ca:	cc20      	ldmia	r4!, {r5}
100111cc:	8824      	ldrh	r4, [r4, #0]
100111ce:	9500      	str	r5, [sp, #0]
100111d0:	9401      	str	r4, [sp, #4]
100111d2:	2401      	movs	r4, #1
100111d4:	9402      	str	r4, [sp, #8]
100111d6:	4c02      	ldr	r4, [pc, #8]	; (100111e0 <at_ble_primary_service_define+0x1c>)
100111d8:	47a0      	blx	r4
100111da:	b005      	add	sp, #20
100111dc:	bd30      	pop	{r4, r5, pc}
100111de:	46c0      	nop			; (mov r8, r8)
100111e0:	10010d89 	.word	0x10010d89

100111e4 <at_ble_characteristic_value_set>:
100111e4:	b570      	push	{r4, r5, r6, lr}
100111e6:	4b0b      	ldr	r3, [pc, #44]	; (10011214 <at_ble_characteristic_value_set+0x30>)
100111e8:	1c06      	adds	r6, r0, #0
100111ea:	1c0c      	adds	r4, r1, #0
100111ec:	1c15      	adds	r5, r2, #0
100111ee:	4798      	blx	r3
100111f0:	2800      	cmp	r0, #0
100111f2:	d008      	beq.n	10011206 <at_ble_characteristic_value_set+0x22>
100111f4:	6880      	ldr	r0, [r0, #8]
100111f6:	2800      	cmp	r0, #0
100111f8:	d005      	beq.n	10011206 <at_ble_characteristic_value_set+0x22>
100111fa:	1c21      	adds	r1, r4, #0
100111fc:	1c2a      	adds	r2, r5, #0
100111fe:	4b06      	ldr	r3, [pc, #24]	; (10011218 <at_ble_characteristic_value_set+0x34>)
10011200:	4798      	blx	r3
10011202:	2000      	movs	r0, #0
10011204:	e004      	b.n	10011210 <at_ble_characteristic_value_set+0x2c>
10011206:	1c30      	adds	r0, r6, #0
10011208:	1c29      	adds	r1, r5, #0
1001120a:	1c22      	adds	r2, r4, #0
1001120c:	4b03      	ldr	r3, [pc, #12]	; (1001121c <at_ble_characteristic_value_set+0x38>)
1001120e:	4798      	blx	r3
10011210:	bd70      	pop	{r4, r5, r6, pc}
10011212:	46c0      	nop			; (mov r8, r8)
10011214:	10010af1 	.word	0x10010af1
10011218:	10015227 	.word	0x10015227
1001121c:	10012fb9 	.word	0x10012fb9

10011220 <at_ble_characteristic_value_get>:
10011220:	b570      	push	{r4, r5, r6, lr}
10011222:	4b0c      	ldr	r3, [pc, #48]	; (10011254 <at_ble_characteristic_value_get+0x34>)
10011224:	1c06      	adds	r6, r0, #0
10011226:	1c0c      	adds	r4, r1, #0
10011228:	1c15      	adds	r5, r2, #0
1001122a:	4798      	blx	r3
1001122c:	2800      	cmp	r0, #0
1001122e:	d00b      	beq.n	10011248 <at_ble_characteristic_value_get+0x28>
10011230:	6883      	ldr	r3, [r0, #8]
10011232:	2b00      	cmp	r3, #0
10011234:	d008      	beq.n	10011248 <at_ble_characteristic_value_get+0x28>
10011236:	8883      	ldrh	r3, [r0, #4]
10011238:	802b      	strh	r3, [r5, #0]
1001123a:	8882      	ldrh	r2, [r0, #4]
1001123c:	6881      	ldr	r1, [r0, #8]
1001123e:	4b06      	ldr	r3, [pc, #24]	; (10011258 <at_ble_characteristic_value_get+0x38>)
10011240:	1c20      	adds	r0, r4, #0
10011242:	4798      	blx	r3
10011244:	2000      	movs	r0, #0
10011246:	e004      	b.n	10011252 <at_ble_characteristic_value_get+0x32>
10011248:	1c30      	adds	r0, r6, #0
1001124a:	1c29      	adds	r1, r5, #0
1001124c:	1c22      	adds	r2, r4, #0
1001124e:	4b03      	ldr	r3, [pc, #12]	; (1001125c <at_ble_characteristic_value_get+0x3c>)
10011250:	4798      	blx	r3
10011252:	bd70      	pop	{r4, r5, r6, pc}
10011254:	10010af1 	.word	0x10010af1
10011258:	10015227 	.word	0x10015227
1001125c:	10013045 	.word	0x10013045

10011260 <at_ble_write_authorize_reply>:
10011260:	b5f0      	push	{r4, r5, r6, r7, lr}
10011262:	b085      	sub	sp, #20
10011264:	1c04      	adds	r4, r0, #0
10011266:	9101      	str	r1, [sp, #4]
10011268:	2900      	cmp	r1, #0
1001126a:	d128      	bne.n	100112be <at_ble_write_authorize_reply+0x5e>
1001126c:	8843      	ldrh	r3, [r0, #2]
1001126e:	1c27      	adds	r7, r4, #0
10011270:	9300      	str	r3, [sp, #0]
10011272:	1c18      	adds	r0, r3, #0
10011274:	4b16      	ldr	r3, [pc, #88]	; (100112d0 <at_ble_write_authorize_reply+0x70>)
10011276:	4798      	blx	r3
10011278:	3708      	adds	r7, #8
1001127a:	2800      	cmp	r0, #0
1001127c:	d009      	beq.n	10011292 <at_ble_write_authorize_reply+0x32>
1001127e:	6880      	ldr	r0, [r0, #8]
10011280:	2800      	cmp	r0, #0
10011282:	d006      	beq.n	10011292 <at_ble_write_authorize_reply+0x32>
10011284:	88a3      	ldrh	r3, [r4, #4]
10011286:	88e2      	ldrh	r2, [r4, #6]
10011288:	18c0      	adds	r0, r0, r3
1001128a:	1c39      	adds	r1, r7, #0
1001128c:	4b11      	ldr	r3, [pc, #68]	; (100112d4 <at_ble_write_authorize_reply+0x74>)
1001128e:	4798      	blx	r3
10011290:	e015      	b.n	100112be <at_ble_write_authorize_reply+0x5e>
10011292:	ab02      	add	r3, sp, #8
10011294:	1d9e      	adds	r6, r3, #6
10011296:	2300      	movs	r3, #0
10011298:	4d0f      	ldr	r5, [pc, #60]	; (100112d8 <at_ble_write_authorize_reply+0x78>)
1001129a:	8033      	strh	r3, [r6, #0]
1001129c:	6829      	ldr	r1, [r5, #0]
1001129e:	1c32      	adds	r2, r6, #0
100112a0:	4b0e      	ldr	r3, [pc, #56]	; (100112dc <at_ble_write_authorize_reply+0x7c>)
100112a2:	9800      	ldr	r0, [sp, #0]
100112a4:	4798      	blx	r3
100112a6:	682b      	ldr	r3, [r5, #0]
100112a8:	88a0      	ldrh	r0, [r4, #4]
100112aa:	88e2      	ldrh	r2, [r4, #6]
100112ac:	1818      	adds	r0, r3, r0
100112ae:	1c39      	adds	r1, r7, #0
100112b0:	4b08      	ldr	r3, [pc, #32]	; (100112d4 <at_ble_write_authorize_reply+0x74>)
100112b2:	4798      	blx	r3
100112b4:	8860      	ldrh	r0, [r4, #2]
100112b6:	8832      	ldrh	r2, [r6, #0]
100112b8:	6829      	ldr	r1, [r5, #0]
100112ba:	4b09      	ldr	r3, [pc, #36]	; (100112e0 <at_ble_write_authorize_reply+0x80>)
100112bc:	4798      	blx	r3
100112be:	8860      	ldrh	r0, [r4, #2]
100112c0:	8821      	ldrh	r1, [r4, #0]
100112c2:	9a01      	ldr	r2, [sp, #4]
100112c4:	4b07      	ldr	r3, [pc, #28]	; (100112e4 <at_ble_write_authorize_reply+0x84>)
100112c6:	4798      	blx	r3
100112c8:	2000      	movs	r0, #0
100112ca:	b005      	add	sp, #20
100112cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
100112ce:	46c0      	nop			; (mov r8, r8)
100112d0:	10010af1 	.word	0x10010af1
100112d4:	10015227 	.word	0x10015227
100112d8:	10018644 	.word	0x10018644
100112dc:	10011221 	.word	0x10011221
100112e0:	100111e5 	.word	0x100111e5
100112e4:	10012abd 	.word	0x10012abd

100112e8 <gatts_handle_read_req>:
100112e8:	b538      	push	{r3, r4, r5, lr}
100112ea:	1c0c      	adds	r4, r1, #0
100112ec:	4b07      	ldr	r3, [pc, #28]	; (1001130c <gatts_handle_read_req+0x24>)
100112ee:	4798      	blx	r3
100112f0:	8865      	ldrh	r5, [r4, #2]
100112f2:	4b07      	ldr	r3, [pc, #28]	; (10011310 <gatts_handle_read_req+0x28>)
100112f4:	1c28      	adds	r0, r5, #0
100112f6:	4798      	blx	r3
100112f8:	7883      	ldrb	r3, [r0, #2]
100112fa:	2026      	movs	r0, #38	; 0x26
100112fc:	07db      	lsls	r3, r3, #31
100112fe:	d404      	bmi.n	1001130a <gatts_handle_read_req+0x22>
10011300:	8820      	ldrh	r0, [r4, #0]
10011302:	1c29      	adds	r1, r5, #0
10011304:	4b03      	ldr	r3, [pc, #12]	; (10011314 <gatts_handle_read_req+0x2c>)
10011306:	4798      	blx	r3
10011308:	203b      	movs	r0, #59	; 0x3b
1001130a:	bd38      	pop	{r3, r4, r5, pc}
1001130c:	10012a01 	.word	0x10012a01
10011310:	10010af1 	.word	0x10010af1
10011314:	10010d59 	.word	0x10010d59

10011318 <gatts_handle_att_info_req>:
10011318:	b538      	push	{r3, r4, r5, lr}
1001131a:	1c0d      	adds	r5, r1, #0
1001131c:	4b0a      	ldr	r3, [pc, #40]	; (10011348 <gatts_handle_att_info_req+0x30>)
1001131e:	1c14      	adds	r4, r2, #0
10011320:	4798      	blx	r3
10011322:	882d      	ldrh	r5, [r5, #0]
10011324:	4b09      	ldr	r3, [pc, #36]	; (1001134c <gatts_handle_att_info_req+0x34>)
10011326:	1c28      	adds	r0, r5, #0
10011328:	4798      	blx	r3
1001132a:	0a22      	lsrs	r2, r4, #8
1001132c:	1c03      	adds	r3, r0, #0
1001132e:	4c08      	ldr	r4, [pc, #32]	; (10011350 <gatts_handle_att_info_req+0x38>)
10011330:	b291      	uxth	r1, r2
10011332:	2800      	cmp	r0, #0
10011334:	d003      	beq.n	1001133e <gatts_handle_att_info_req+0x26>
10011336:	8882      	ldrh	r2, [r0, #4]
10011338:	2300      	movs	r3, #0
1001133a:	1c28      	adds	r0, r5, #0
1001133c:	e001      	b.n	10011342 <gatts_handle_att_info_req+0x2a>
1001133e:	1c28      	adds	r0, r5, #0
10011340:	2201      	movs	r2, #1
10011342:	47a0      	blx	r4
10011344:	203b      	movs	r0, #59	; 0x3b
10011346:	bd38      	pop	{r3, r4, r5, pc}
10011348:	10012a45 	.word	0x10012a45
1001134c:	10010af1 	.word	0x10010af1
10011350:	10012b01 	.word	0x10012b01

10011354 <gatts_handle_write_req>:
10011354:	b510      	push	{r4, lr}
10011356:	1c14      	adds	r4, r2, #0
10011358:	4b07      	ldr	r3, [pc, #28]	; (10011378 <gatts_handle_write_req+0x24>)
1001135a:	4798      	blx	r3
1001135c:	4b07      	ldr	r3, [pc, #28]	; (1001137c <gatts_handle_write_req+0x28>)
1001135e:	8860      	ldrh	r0, [r4, #2]
10011360:	4798      	blx	r3
10011362:	2302      	movs	r3, #2
10011364:	7881      	ldrb	r1, [r0, #2]
10011366:	2022      	movs	r0, #34	; 0x22
10011368:	4019      	ands	r1, r3
1001136a:	d103      	bne.n	10011374 <gatts_handle_write_req+0x20>
1001136c:	1c20      	adds	r0, r4, #0
1001136e:	4b04      	ldr	r3, [pc, #16]	; (10011380 <gatts_handle_write_req+0x2c>)
10011370:	4798      	blx	r3
10011372:	201f      	movs	r0, #31
10011374:	bd10      	pop	{r4, pc}
10011376:	46c0      	nop			; (mov r8, r8)
10011378:	10012a0d 	.word	0x10012a0d
1001137c:	10010af1 	.word	0x10010af1
10011380:	10011261 	.word	0x10011261

10011384 <at_ble_notification_send>:
10011384:	b5f0      	push	{r4, r5, r6, r7, lr}
10011386:	4d17      	ldr	r5, [pc, #92]	; (100113e4 <at_ble_notification_send+0x60>)
10011388:	4c17      	ldr	r4, [pc, #92]	; (100113e8 <at_ble_notification_send+0x64>)
1001138a:	682a      	ldr	r2, [r5, #0]
1001138c:	44a5      	add	sp, r4
1001138e:	23d2      	movs	r3, #210	; 0xd2
10011390:	2a04      	cmp	r2, #4
10011392:	d822      	bhi.n	100113da <at_ble_notification_send+0x56>
10011394:	1c06      	adds	r6, r0, #0
10011396:	4b15      	ldr	r3, [pc, #84]	; (100113ec <at_ble_notification_send+0x68>)
10011398:	1c08      	adds	r0, r1, #0
1001139a:	1c0c      	adds	r4, r1, #0
1001139c:	4798      	blx	r3
1001139e:	2800      	cmp	r0, #0
100113a0:	d008      	beq.n	100113b4 <at_ble_notification_send+0x30>
100113a2:	6883      	ldr	r3, [r0, #8]
100113a4:	2b00      	cmp	r3, #0
100113a6:	d005      	beq.n	100113b4 <at_ble_notification_send+0x30>
100113a8:	8882      	ldrh	r2, [r0, #4]
100113aa:	1c21      	adds	r1, r4, #0
100113ac:	9200      	str	r2, [sp, #0]
100113ae:	2012      	movs	r0, #18
100113b0:	1c32      	adds	r2, r6, #0
100113b2:	e00c      	b.n	100113ce <at_ble_notification_send+0x4a>
100113b4:	270e      	movs	r7, #14
100113b6:	446f      	add	r7, sp
100113b8:	1c39      	adds	r1, r7, #0
100113ba:	aa04      	add	r2, sp, #16
100113bc:	4b0c      	ldr	r3, [pc, #48]	; (100113f0 <at_ble_notification_send+0x6c>)
100113be:	1c20      	adds	r0, r4, #0
100113c0:	4798      	blx	r3
100113c2:	2012      	movs	r0, #18
100113c4:	1c21      	adds	r1, r4, #0
100113c6:	1c32      	adds	r2, r6, #0
100113c8:	883b      	ldrh	r3, [r7, #0]
100113ca:	9300      	str	r3, [sp, #0]
100113cc:	ab04      	add	r3, sp, #16
100113ce:	4c09      	ldr	r4, [pc, #36]	; (100113f4 <at_ble_notification_send+0x70>)
100113d0:	47a0      	blx	r4
100113d2:	682b      	ldr	r3, [r5, #0]
100113d4:	3301      	adds	r3, #1
100113d6:	602b      	str	r3, [r5, #0]
100113d8:	2300      	movs	r3, #0
100113da:	1c18      	adds	r0, r3, #0
100113dc:	2385      	movs	r3, #133	; 0x85
100113de:	009b      	lsls	r3, r3, #2
100113e0:	449d      	add	sp, r3
100113e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
100113e4:	1001a174 	.word	0x1001a174
100113e8:	fffffdec 	.word	0xfffffdec
100113ec:	10010af1 	.word	0x10010af1
100113f0:	10013045 	.word	0x10013045
100113f4:	10012b49 	.word	0x10012b49

100113f8 <init_l2cc_task_module>:
100113f8:	220a      	movs	r2, #10
100113fa:	4b01      	ldr	r3, [pc, #4]	; (10011400 <init_l2cc_task_module+0x8>)
100113fc:	701a      	strb	r2, [r3, #0]
100113fe:	4770      	bx	lr
10011400:	10018640 	.word	0x10018640

10011404 <l2cc_data_send_rsp_handler>:
10011404:	b510      	push	{r4, lr}
10011406:	7802      	ldrb	r2, [r0, #0]
10011408:	700a      	strb	r2, [r1, #0]
1001140a:	7883      	ldrb	r3, [r0, #2]
1001140c:	7844      	ldrb	r4, [r0, #1]
1001140e:	021b      	lsls	r3, r3, #8
10011410:	4323      	orrs	r3, r4
10011412:	804b      	strh	r3, [r1, #2]
10011414:	7903      	ldrb	r3, [r0, #4]
10011416:	78c0      	ldrb	r0, [r0, #3]
10011418:	021b      	lsls	r3, r3, #8
1001141a:	4303      	orrs	r3, r0
1001141c:	808b      	strh	r3, [r1, #4]
1001141e:	2a00      	cmp	r2, #0
10011420:	d103      	bne.n	1001142a <l2cc_data_send_rsp_handler+0x26>
10011422:	4a02      	ldr	r2, [pc, #8]	; (1001142c <l2cc_data_send_rsp_handler+0x28>)
10011424:	7813      	ldrb	r3, [r2, #0]
10011426:	3301      	adds	r3, #1
10011428:	7013      	strb	r3, [r2, #0]
1001142a:	bd10      	pop	{r4, pc}
1001142c:	10018640 	.word	0x10018640

10011430 <l2cc_data_received_handler>:
10011430:	b508      	push	{r3, lr}
10011432:	1c03      	adds	r3, r0, #0
10011434:	7842      	ldrb	r2, [r0, #1]
10011436:	7800      	ldrb	r0, [r0, #0]
10011438:	0212      	lsls	r2, r2, #8
1001143a:	4302      	orrs	r2, r0
1001143c:	800a      	strh	r2, [r1, #0]
1001143e:	78da      	ldrb	r2, [r3, #3]
10011440:	7898      	ldrb	r0, [r3, #2]
10011442:	0212      	lsls	r2, r2, #8
10011444:	4302      	orrs	r2, r0
10011446:	804a      	strh	r2, [r1, #2]
10011448:	795a      	ldrb	r2, [r3, #5]
1001144a:	7918      	ldrb	r0, [r3, #4]
1001144c:	0212      	lsls	r2, r2, #8
1001144e:	4302      	orrs	r2, r0
10011450:	808a      	strh	r2, [r1, #4]
10011452:	1d88      	adds	r0, r1, #6
10011454:	1d99      	adds	r1, r3, #6
10011456:	4b01      	ldr	r3, [pc, #4]	; (1001145c <l2cc_data_received_handler+0x2c>)
10011458:	4798      	blx	r3
1001145a:	bd08      	pop	{r3, pc}
1001145c:	10015227 	.word	0x10015227

10011460 <at_ble_authenticate>:
10011460:	b5f0      	push	{r4, r5, r6, r7, lr}
10011462:	1c0c      	adds	r4, r1, #0
10011464:	211f      	movs	r1, #31
10011466:	b08b      	sub	sp, #44	; 0x2c
10011468:	9307      	str	r3, [sp, #28]
1001146a:	ab02      	add	r3, sp, #8
1001146c:	18c9      	adds	r1, r1, r3
1001146e:	230f      	movs	r3, #15
10011470:	700b      	strb	r3, [r1, #0]
10011472:	4b40      	ldr	r3, [pc, #256]	; (10011574 <at_ble_authenticate+0x114>)
10011474:	1c05      	adds	r5, r0, #0
10011476:	1c16      	adds	r6, r2, #0
10011478:	4798      	blx	r3
1001147a:	1c07      	adds	r7, r0, #0
1001147c:	2001      	movs	r0, #1
1001147e:	2f07      	cmp	r7, #7
10011480:	d875      	bhi.n	1001156e <at_ble_authenticate+0x10e>
10011482:	2c00      	cmp	r4, #0
10011484:	d113      	bne.n	100114ae <at_ble_authenticate+0x4e>
10011486:	2312      	movs	r3, #18
10011488:	435f      	muls	r7, r3
1001148a:	4b3b      	ldr	r3, [pc, #236]	; (10011578 <at_ble_authenticate+0x118>)
1001148c:	5cfb      	ldrb	r3, [r7, r3]
1001148e:	4283      	cmp	r3, r0
10011490:	d001      	beq.n	10011496 <at_ble_authenticate+0x36>
10011492:	20cf      	movs	r0, #207	; 0xcf
10011494:	e06b      	b.n	1001156e <at_ble_authenticate+0x10e>
10011496:	9504      	str	r5, [sp, #16]
10011498:	9400      	str	r4, [sp, #0]
1001149a:	9401      	str	r4, [sp, #4]
1001149c:	9402      	str	r4, [sp, #8]
1001149e:	9403      	str	r4, [sp, #12]
100114a0:	1c20      	adds	r0, r4, #0
100114a2:	1c21      	adds	r1, r4, #0
100114a4:	1c22      	adds	r2, r4, #0
100114a6:	1c23      	adds	r3, r4, #0
100114a8:	4d34      	ldr	r5, [pc, #208]	; (1001157c <at_ble_authenticate+0x11c>)
100114aa:	47a8      	blx	r5
100114ac:	e05e      	b.n	1001156c <at_ble_authenticate+0x10c>
100114ae:	7922      	ldrb	r2, [r4, #4]
100114b0:	2a06      	cmp	r2, #6
100114b2:	d9ee      	bls.n	10011492 <at_ble_authenticate+0x32>
100114b4:	7963      	ldrb	r3, [r4, #5]
100114b6:	2b10      	cmp	r3, #16
100114b8:	d8eb      	bhi.n	10011492 <at_ble_authenticate+0x32>
100114ba:	429a      	cmp	r2, r3
100114bc:	d8e9      	bhi.n	10011492 <at_ble_authenticate+0x32>
100114be:	7a23      	ldrb	r3, [r4, #8]
100114c0:	2b04      	cmp	r3, #4
100114c2:	d8e6      	bhi.n	10011492 <at_ble_authenticate+0x32>
100114c4:	79a3      	ldrb	r3, [r4, #6]
100114c6:	2b07      	cmp	r3, #7
100114c8:	d8e3      	bhi.n	10011492 <at_ble_authenticate+0x32>
100114ca:	79e3      	ldrb	r3, [r4, #7]
100114cc:	2b07      	cmp	r3, #7
100114ce:	d8e0      	bhi.n	10011492 <at_ble_authenticate+0x32>
100114d0:	78a3      	ldrb	r3, [r4, #2]
100114d2:	2b00      	cmp	r3, #0
100114d4:	d006      	beq.n	100114e4 <at_ble_authenticate+0x84>
100114d6:	2e00      	cmp	r6, #0
100114d8:	d0db      	beq.n	10011492 <at_ble_authenticate+0x32>
100114da:	4829      	ldr	r0, [pc, #164]	; (10011580 <at_ble_authenticate+0x120>)
100114dc:	1c31      	adds	r1, r6, #0
100114de:	221c      	movs	r2, #28
100114e0:	4b28      	ldr	r3, [pc, #160]	; (10011584 <at_ble_authenticate+0x124>)
100114e2:	4798      	blx	r3
100114e4:	9b07      	ldr	r3, [sp, #28]
100114e6:	2b00      	cmp	r3, #0
100114e8:	d005      	beq.n	100114f6 <at_ble_authenticate+0x96>
100114ea:	4827      	ldr	r0, [pc, #156]	; (10011588 <at_ble_authenticate+0x128>)
100114ec:	1c19      	adds	r1, r3, #0
100114ee:	309a      	adds	r0, #154	; 0x9a
100114f0:	2210      	movs	r2, #16
100114f2:	4b24      	ldr	r3, [pc, #144]	; (10011584 <at_ble_authenticate+0x124>)
100114f4:	4798      	blx	r3
100114f6:	7863      	ldrb	r3, [r4, #1]
100114f8:	78a2      	ldrb	r2, [r4, #2]
100114fa:	009b      	lsls	r3, r3, #2
100114fc:	4313      	orrs	r3, r2
100114fe:	2212      	movs	r2, #18
10011500:	4357      	muls	r7, r2
10011502:	4a1d      	ldr	r2, [pc, #116]	; (10011578 <at_ble_authenticate+0x118>)
10011504:	b2db      	uxtb	r3, r3
10011506:	5cba      	ldrb	r2, [r7, r2]
10011508:	2a00      	cmp	r2, #0
1001150a:	d116      	bne.n	1001153a <at_ble_authenticate+0xda>
1001150c:	79a0      	ldrb	r0, [r4, #6]
1001150e:	0742      	lsls	r2, r0, #29
10011510:	d502      	bpl.n	10011518 <at_ble_authenticate+0xb8>
10011512:	9a07      	ldr	r2, [sp, #28]
10011514:	2a00      	cmp	r2, #0
10011516:	d0bc      	beq.n	10011492 <at_ble_authenticate+0x32>
10011518:	07c2      	lsls	r2, r0, #31
1001151a:	d501      	bpl.n	10011520 <at_ble_authenticate+0xc0>
1001151c:	2e00      	cmp	r6, #0
1001151e:	d0b8      	beq.n	10011492 <at_ble_authenticate+0x32>
10011520:	7966      	ldrb	r6, [r4, #5]
10011522:	7821      	ldrb	r1, [r4, #0]
10011524:	78e2      	ldrb	r2, [r4, #3]
10011526:	9600      	str	r6, [sp, #0]
10011528:	9001      	str	r0, [sp, #4]
1001152a:	79e0      	ldrb	r0, [r4, #7]
1001152c:	9002      	str	r0, [sp, #8]
1001152e:	7a20      	ldrb	r0, [r4, #8]
10011530:	4c16      	ldr	r4, [pc, #88]	; (1001158c <at_ble_authenticate+0x12c>)
10011532:	9003      	str	r0, [sp, #12]
10011534:	1c28      	adds	r0, r5, #0
10011536:	47a0      	blx	r4
10011538:	e018      	b.n	1001156c <at_ble_authenticate+0x10c>
1001153a:	2a01      	cmp	r2, #1
1001153c:	d1a9      	bne.n	10011492 <at_ble_authenticate+0x32>
1001153e:	79e0      	ldrb	r0, [r4, #7]
10011540:	0742      	lsls	r2, r0, #29
10011542:	d502      	bpl.n	1001154a <at_ble_authenticate+0xea>
10011544:	9a07      	ldr	r2, [sp, #28]
10011546:	2a00      	cmp	r2, #0
10011548:	d0a3      	beq.n	10011492 <at_ble_authenticate+0x32>
1001154a:	07c2      	lsls	r2, r0, #31
1001154c:	d501      	bpl.n	10011552 <at_ble_authenticate+0xf2>
1001154e:	2e00      	cmp	r6, #0
10011550:	d09f      	beq.n	10011492 <at_ble_authenticate+0x32>
10011552:	7966      	ldrb	r6, [r4, #5]
10011554:	7821      	ldrb	r1, [r4, #0]
10011556:	78e2      	ldrb	r2, [r4, #3]
10011558:	9600      	str	r6, [sp, #0]
1001155a:	79a6      	ldrb	r6, [r4, #6]
1001155c:	9002      	str	r0, [sp, #8]
1001155e:	9601      	str	r6, [sp, #4]
10011560:	7a20      	ldrb	r0, [r4, #8]
10011562:	9504      	str	r5, [sp, #16]
10011564:	9003      	str	r0, [sp, #12]
10011566:	4c05      	ldr	r4, [pc, #20]	; (1001157c <at_ble_authenticate+0x11c>)
10011568:	2001      	movs	r0, #1
1001156a:	47a0      	blx	r4
1001156c:	2000      	movs	r0, #0
1001156e:	b00b      	add	sp, #44	; 0x2c
10011570:	bdf0      	pop	{r4, r5, r6, r7, pc}
10011572:	46c0      	nop			; (mov r8, r8)
10011574:	10011961 	.word	0x10011961
10011578:	1001afda 	.word	0x1001afda
1001157c:	10011ed1 	.word	0x10011ed1
10011580:	1001b0e8 	.word	0x1001b0e8
10011584:	10015227 	.word	0x10015227
10011588:	1001b06a 	.word	0x1001b06a
1001158c:	10011cb1 	.word	0x10011cb1

10011590 <at_ble_pair_key_reply>:
10011590:	b5f0      	push	{r4, r5, r6, r7, lr}
10011592:	b085      	sub	sp, #20
10011594:	1c05      	adds	r5, r0, #0
10011596:	1c0c      	adds	r4, r1, #0
10011598:	1c16      	adds	r6, r2, #0
1001159a:	2100      	movs	r1, #0
1001159c:	4668      	mov	r0, sp
1001159e:	2210      	movs	r2, #16
100115a0:	4b18      	ldr	r3, [pc, #96]	; (10011604 <at_ble_pair_key_reply+0x74>)
100115a2:	4798      	blx	r3
100115a4:	2101      	movs	r1, #1
100115a6:	2e00      	cmp	r6, #0
100115a8:	d101      	bne.n	100115ae <at_ble_pair_key_reply+0x1e>
100115aa:	1c31      	adds	r1, r6, #0
100115ac:	466e      	mov	r6, sp
100115ae:	2c00      	cmp	r4, #0
100115b0:	d116      	bne.n	100115e0 <at_ble_pair_key_reply+0x50>
100115b2:	2701      	movs	r7, #1
100115b4:	1c23      	adds	r3, r4, #0
100115b6:	1d70      	adds	r0, r6, #5
100115b8:	3e01      	subs	r6, #1
100115ba:	7802      	ldrb	r2, [r0, #0]
100115bc:	3801      	subs	r0, #1
100115be:	3a30      	subs	r2, #48	; 0x30
100115c0:	437a      	muls	r2, r7
100115c2:	189b      	adds	r3, r3, r2
100115c4:	220a      	movs	r2, #10
100115c6:	4357      	muls	r7, r2
100115c8:	42b0      	cmp	r0, r6
100115ca:	d1f6      	bne.n	100115ba <at_ble_pair_key_reply+0x2a>
100115cc:	466a      	mov	r2, sp
100115ce:	4668      	mov	r0, sp
100115d0:	7013      	strb	r3, [r2, #0]
100115d2:	0a1a      	lsrs	r2, r3, #8
100115d4:	7042      	strb	r2, [r0, #1]
100115d6:	0c1a      	lsrs	r2, r3, #16
100115d8:	0e1b      	lsrs	r3, r3, #24
100115da:	7082      	strb	r2, [r0, #2]
100115dc:	70c3      	strb	r3, [r0, #3]
100115de:	e009      	b.n	100115f4 <at_ble_pair_key_reply+0x64>
100115e0:	20cf      	movs	r0, #207	; 0xcf
100115e2:	2c01      	cmp	r4, #1
100115e4:	d10c      	bne.n	10011600 <at_ble_pair_key_reply+0x70>
100115e6:	2300      	movs	r3, #0
100115e8:	4668      	mov	r0, sp
100115ea:	5cf2      	ldrb	r2, [r6, r3]
100115ec:	54c2      	strb	r2, [r0, r3]
100115ee:	3301      	adds	r3, #1
100115f0:	2b10      	cmp	r3, #16
100115f2:	d1f9      	bne.n	100115e8 <at_ble_pair_key_reply+0x58>
100115f4:	2004      	movs	r0, #4
100115f6:	466a      	mov	r2, sp
100115f8:	1c2b      	adds	r3, r5, #0
100115fa:	4c03      	ldr	r4, [pc, #12]	; (10011608 <at_ble_pair_key_reply+0x78>)
100115fc:	47a0      	blx	r4
100115fe:	2000      	movs	r0, #0
10011600:	b005      	add	sp, #20
10011602:	bdf0      	pop	{r4, r5, r6, r7, pc}
10011604:	10015239 	.word	0x10015239
10011608:	10011f4d 	.word	0x10011f4d

1001160c <at_ble_send_slave_sec_request>:
1001160c:	b570      	push	{r4, r5, r6, lr}
1001160e:	4b0c      	ldr	r3, [pc, #48]	; (10011640 <at_ble_send_slave_sec_request+0x34>)
10011610:	1c0e      	adds	r6, r1, #0
10011612:	2100      	movs	r1, #0
10011614:	1c05      	adds	r5, r0, #0
10011616:	1c14      	adds	r4, r2, #0
10011618:	4798      	blx	r3
1001161a:	2301      	movs	r3, #1
1001161c:	2807      	cmp	r0, #7
1001161e:	d80d      	bhi.n	1001163c <at_ble_send_slave_sec_request+0x30>
10011620:	3311      	adds	r3, #17
10011622:	4358      	muls	r0, r3
10011624:	4b07      	ldr	r3, [pc, #28]	; (10011644 <at_ble_send_slave_sec_request+0x38>)
10011626:	5cc2      	ldrb	r2, [r0, r3]
10011628:	23e0      	movs	r3, #224	; 0xe0
1001162a:	2a01      	cmp	r2, #1
1001162c:	d106      	bne.n	1001163c <at_ble_send_slave_sec_request+0x30>
1001162e:	00b1      	lsls	r1, r6, #2
10011630:	430c      	orrs	r4, r1
10011632:	4b05      	ldr	r3, [pc, #20]	; (10011648 <at_ble_send_slave_sec_request+0x3c>)
10011634:	b2e1      	uxtb	r1, r4
10011636:	1c28      	adds	r0, r5, #0
10011638:	4798      	blx	r3
1001163a:	2300      	movs	r3, #0
1001163c:	1c18      	adds	r0, r3, #0
1001163e:	bd70      	pop	{r4, r5, r6, pc}
10011640:	10011961 	.word	0x10011961
10011644:	1001afda 	.word	0x1001afda
10011648:	10011f9d 	.word	0x10011f9d

1001164c <at_ble_encryption_start>:
1001164c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1001164e:	23cf      	movs	r3, #207	; 0xcf
10011650:	2900      	cmp	r1, #0
10011652:	d02b      	beq.n	100116ac <at_ble_encryption_start+0x60>
10011654:	2a05      	cmp	r2, #5
10011656:	d829      	bhi.n	100116ac <at_ble_encryption_start+0x60>
10011658:	2701      	movs	r7, #1
1001165a:	1c3d      	adds	r5, r7, #0
1001165c:	2433      	movs	r4, #51	; 0x33
1001165e:	4095      	lsls	r5, r2
10011660:	4225      	tst	r5, r4
10011662:	d023      	beq.n	100116ac <at_ble_encryption_start+0x60>
10011664:	7e8c      	ldrb	r4, [r1, #26]
10011666:	3c07      	subs	r4, #7
10011668:	2c09      	cmp	r4, #9
1001166a:	d81f      	bhi.n	100116ac <at_ble_encryption_start+0x60>
1001166c:	4b10      	ldr	r3, [pc, #64]	; (100116b0 <at_ble_encryption_start+0x64>)
1001166e:	1c0c      	adds	r4, r1, #0
10011670:	2100      	movs	r1, #0
10011672:	1c15      	adds	r5, r2, #0
10011674:	1c06      	adds	r6, r0, #0
10011676:	4798      	blx	r3
10011678:	1c3b      	adds	r3, r7, #0
1001167a:	2807      	cmp	r0, #7
1001167c:	d816      	bhi.n	100116ac <at_ble_encryption_start+0x60>
1001167e:	2312      	movs	r3, #18
10011680:	4358      	muls	r0, r3
10011682:	4b0c      	ldr	r3, [pc, #48]	; (100116b4 <at_ble_encryption_start+0x68>)
10011684:	5cc7      	ldrb	r7, [r0, r3]
10011686:	23e0      	movs	r3, #224	; 0xe0
10011688:	2f00      	cmp	r7, #0
1001168a:	d10f      	bne.n	100116ac <at_ble_encryption_start+0x60>
1001168c:	1c21      	adds	r1, r4, #0
1001168e:	221c      	movs	r2, #28
10011690:	4b09      	ldr	r3, [pc, #36]	; (100116b8 <at_ble_encryption_start+0x6c>)
10011692:	480a      	ldr	r0, [pc, #40]	; (100116bc <at_ble_encryption_start+0x70>)
10011694:	4798      	blx	r3
10011696:	1c23      	adds	r3, r4, #0
10011698:	7ea1      	ldrb	r1, [r4, #26]
1001169a:	8a22      	ldrh	r2, [r4, #16]
1001169c:	3312      	adds	r3, #18
1001169e:	9100      	str	r1, [sp, #0]
100116a0:	9501      	str	r5, [sp, #4]
100116a2:	1c21      	adds	r1, r4, #0
100116a4:	1c30      	adds	r0, r6, #0
100116a6:	4c06      	ldr	r4, [pc, #24]	; (100116c0 <at_ble_encryption_start+0x74>)
100116a8:	47a0      	blx	r4
100116aa:	1c3b      	adds	r3, r7, #0
100116ac:	1c18      	adds	r0, r3, #0
100116ae:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
100116b0:	10011961 	.word	0x10011961
100116b4:	1001afda 	.word	0x1001afda
100116b8:	10015227 	.word	0x10015227
100116bc:	1001b0e8 	.word	0x1001b0e8
100116c0:	10011fdd 	.word	0x10011fdd

100116c4 <at_ble_encryption_request_reply>:
100116c4:	b573      	push	{r0, r1, r4, r5, r6, lr}
100116c6:	24cf      	movs	r4, #207	; 0xcf
100116c8:	2b00      	cmp	r3, #0
100116ca:	d011      	beq.n	100116f0 <at_ble_encryption_request_reply+0x2c>
100116cc:	2a00      	cmp	r2, #0
100116ce:	d00a      	beq.n	100116e6 <at_ble_encryption_request_reply+0x22>
100116d0:	2905      	cmp	r1, #5
100116d2:	d80d      	bhi.n	100116f0 <at_ble_encryption_request_reply+0x2c>
100116d4:	2501      	movs	r5, #1
100116d6:	2633      	movs	r6, #51	; 0x33
100116d8:	408d      	lsls	r5, r1
100116da:	4235      	tst	r5, r6
100116dc:	d008      	beq.n	100116f0 <at_ble_encryption_request_reply+0x2c>
100116de:	7e9d      	ldrb	r5, [r3, #26]
100116e0:	3d07      	subs	r5, #7
100116e2:	2d09      	cmp	r5, #9
100116e4:	d804      	bhi.n	100116f0 <at_ble_encryption_request_reply+0x2c>
100116e6:	7e9c      	ldrb	r4, [r3, #26]
100116e8:	9400      	str	r4, [sp, #0]
100116ea:	4c02      	ldr	r4, [pc, #8]	; (100116f4 <at_ble_encryption_request_reply+0x30>)
100116ec:	47a0      	blx	r4
100116ee:	2400      	movs	r4, #0
100116f0:	1c20      	adds	r0, r4, #0
100116f2:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
100116f4:	10012099 	.word	0x10012099

100116f8 <rx_callback>:
100116f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
100116fa:	8883      	ldrh	r3, [r0, #4]
100116fc:	1c01      	adds	r1, r0, #0
100116fe:	9301      	str	r3, [sp, #4]
10011700:	88c5      	ldrh	r5, [r0, #6]
10011702:	8806      	ldrh	r6, [r0, #0]
10011704:	2d00      	cmp	r5, #0
10011706:	d10f      	bne.n	10011728 <rx_callback+0x30>
10011708:	1c19      	adds	r1, r3, #0
1001170a:	1c30      	adds	r0, r6, #0
1001170c:	4b19      	ldr	r3, [pc, #100]	; (10011774 <rx_callback+0x7c>)
1001170e:	1c2a      	adds	r2, r5, #0
10011710:	4798      	blx	r3
10011712:	1e03      	subs	r3, r0, #0
10011714:	d105      	bne.n	10011722 <rx_callback+0x2a>
10011716:	1c30      	adds	r0, r6, #0
10011718:	9901      	ldr	r1, [sp, #4]
1001171a:	1c1a      	adds	r2, r3, #0
1001171c:	4c16      	ldr	r4, [pc, #88]	; (10011778 <rx_callback+0x80>)
1001171e:	47a0      	blx	r4
10011720:	e027      	b.n	10011772 <rx_callback+0x7a>
10011722:	4b16      	ldr	r3, [pc, #88]	; (1001177c <rx_callback+0x84>)
10011724:	4798      	blx	r3
10011726:	e024      	b.n	10011772 <rx_callback+0x7a>
10011728:	4c15      	ldr	r4, [pc, #84]	; (10011780 <rx_callback+0x88>)
1001172a:	4a16      	ldr	r2, [pc, #88]	; (10011784 <rx_callback+0x8c>)
1001172c:	6823      	ldr	r3, [r4, #0]
1001172e:	6812      	ldr	r2, [r2, #0]
10011730:	18eb      	adds	r3, r5, r3
10011732:	4293      	cmp	r3, r2
10011734:	d901      	bls.n	1001173a <rx_callback+0x42>
10011736:	2300      	movs	r3, #0
10011738:	6023      	str	r3, [r4, #0]
1001173a:	4f13      	ldr	r7, [pc, #76]	; (10011788 <rx_callback+0x90>)
1001173c:	6822      	ldr	r2, [r4, #0]
1001173e:	683b      	ldr	r3, [r7, #0]
10011740:	3108      	adds	r1, #8
10011742:	1898      	adds	r0, r3, r2
10011744:	1c2a      	adds	r2, r5, #0
10011746:	4b11      	ldr	r3, [pc, #68]	; (1001178c <rx_callback+0x94>)
10011748:	4798      	blx	r3
1001174a:	683b      	ldr	r3, [r7, #0]
1001174c:	6822      	ldr	r2, [r4, #0]
1001174e:	1c30      	adds	r0, r6, #0
10011750:	189a      	adds	r2, r3, r2
10011752:	9901      	ldr	r1, [sp, #4]
10011754:	4b07      	ldr	r3, [pc, #28]	; (10011774 <rx_callback+0x7c>)
10011756:	4798      	blx	r3
10011758:	2800      	cmp	r0, #0
1001175a:	d1e2      	bne.n	10011722 <rx_callback+0x2a>
1001175c:	6823      	ldr	r3, [r4, #0]
1001175e:	683a      	ldr	r2, [r7, #0]
10011760:	1c30      	adds	r0, r6, #0
10011762:	18d2      	adds	r2, r2, r3
10011764:	9901      	ldr	r1, [sp, #4]
10011766:	1c2b      	adds	r3, r5, #0
10011768:	4e03      	ldr	r6, [pc, #12]	; (10011778 <rx_callback+0x80>)
1001176a:	47b0      	blx	r6
1001176c:	6823      	ldr	r3, [r4, #0]
1001176e:	18ed      	adds	r5, r5, r3
10011770:	6025      	str	r5, [r4, #0]
10011772:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
10011774:	1000fd8d 	.word	0x1000fd8d
10011778:	1000fd05 	.word	0x1000fd05
1001177c:	1000f6ed 	.word	0x1000f6ed
10011780:	1001b144 	.word	0x1001b144
10011784:	1001a0f0 	.word	0x1001a0f0
10011788:	1001a0ec 	.word	0x1001a0ec
1001178c:	10015227 	.word	0x10015227

10011790 <interface_send>:
10011790:	b508      	push	{r3, lr}
10011792:	4b02      	ldr	r3, [pc, #8]	; (1001179c <interface_send+0xc>)
10011794:	4798      	blx	r3
10011796:	2000      	movs	r0, #0
10011798:	bd08      	pop	{r3, pc}
1001179a:	46c0      	nop			; (mov r8, r8)
1001179c:	1000f3e5 	.word	0x1000f3e5

100117a0 <interface_init>:
100117a0:	2280      	movs	r2, #128	; 0x80
100117a2:	b510      	push	{r4, lr}
100117a4:	2100      	movs	r1, #0
100117a6:	1c04      	adds	r4, r0, #0
100117a8:	0092      	lsls	r2, r2, #2
100117aa:	4b08      	ldr	r3, [pc, #32]	; (100117cc <interface_init+0x2c>)
100117ac:	4808      	ldr	r0, [pc, #32]	; (100117d0 <interface_init+0x30>)
100117ae:	4798      	blx	r3
100117b0:	2200      	movs	r2, #0
100117b2:	4b08      	ldr	r3, [pc, #32]	; (100117d4 <interface_init+0x34>)
100117b4:	601a      	str	r2, [r3, #0]
100117b6:	4a08      	ldr	r2, [pc, #32]	; (100117d8 <interface_init+0x38>)
100117b8:	4b08      	ldr	r3, [pc, #32]	; (100117dc <interface_init+0x3c>)
100117ba:	601a      	str	r2, [r3, #0]
100117bc:	4b08      	ldr	r3, [pc, #32]	; (100117e0 <interface_init+0x40>)
100117be:	6922      	ldr	r2, [r4, #16]
100117c0:	601a      	str	r2, [r3, #0]
100117c2:	6962      	ldr	r2, [r4, #20]
100117c4:	4b07      	ldr	r3, [pc, #28]	; (100117e4 <interface_init+0x44>)
100117c6:	601a      	str	r2, [r3, #0]
100117c8:	bd10      	pop	{r4, pc}
100117ca:	46c0      	nop			; (mov r8, r8)
100117cc:	10015239 	.word	0x10015239
100117d0:	1001b348 	.word	0x1001b348
100117d4:	1001b144 	.word	0x1001b144
100117d8:	1001b148 	.word	0x1001b148
100117dc:	10018644 	.word	0x10018644
100117e0:	1001a0ec 	.word	0x1001a0ec
100117e4:	1001a0f0 	.word	0x1001a0f0

100117e8 <platform_cmd_cmpl_signal>:
100117e8:	2201      	movs	r2, #1
100117ea:	4b01      	ldr	r3, [pc, #4]	; (100117f0 <platform_cmd_cmpl_signal+0x8>)
100117ec:	601a      	str	r2, [r3, #0]
100117ee:	4770      	bx	lr
100117f0:	1001a0f4 	.word	0x1001a0f4

100117f4 <platform_cmd_cmpl_wait>:
100117f4:	b510      	push	{r4, lr}
100117f6:	1c04      	adds	r4, r0, #0
100117f8:	4b07      	ldr	r3, [pc, #28]	; (10011818 <platform_cmd_cmpl_wait+0x24>)
100117fa:	681a      	ldr	r2, [r3, #0]
100117fc:	2a01      	cmp	r2, #1
100117fe:	d003      	beq.n	10011808 <platform_cmd_cmpl_wait+0x14>
10011800:	4b06      	ldr	r3, [pc, #24]	; (1001181c <platform_cmd_cmpl_wait+0x28>)
10011802:	2000      	movs	r0, #0
10011804:	4798      	blx	r3
10011806:	e7f7      	b.n	100117f8 <platform_cmd_cmpl_wait+0x4>
10011808:	6819      	ldr	r1, [r3, #0]
1001180a:	2901      	cmp	r1, #1
1001180c:	d102      	bne.n	10011814 <platform_cmd_cmpl_wait+0x20>
1001180e:	2200      	movs	r2, #0
10011810:	601a      	str	r2, [r3, #0]
10011812:	e000      	b.n	10011816 <platform_cmd_cmpl_wait+0x22>
10011814:	7022      	strb	r2, [r4, #0]
10011816:	bd10      	pop	{r4, pc}
10011818:	1001a0f4 	.word	0x1001a0f4
1001181c:	1000f475 	.word	0x1000f475

10011820 <start_timer>:
10011820:	4770      	bx	lr

10011822 <stop_timer>:
10011822:	4770      	bx	lr

10011824 <dbg_le_set_bd_addr_req_handler>:
10011824:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10011826:	466b      	mov	r3, sp
10011828:	1dde      	adds	r6, r3, #7
1001182a:	2300      	movs	r3, #0
1001182c:	7033      	strb	r3, [r6, #0]
1001182e:	230f      	movs	r3, #15
10011830:	4c13      	ldr	r4, [pc, #76]	; (10011880 <dbg_le_set_bd_addr_req_handler+0x5c>)
10011832:	2703      	movs	r7, #3
10011834:	7023      	strb	r3, [r4, #0]
10011836:	2300      	movs	r3, #0
10011838:	70e3      	strb	r3, [r4, #3]
1001183a:	4b12      	ldr	r3, [pc, #72]	; (10011884 <dbg_le_set_bd_addr_req_handler+0x60>)
1001183c:	1c01      	adds	r1, r0, #0
1001183e:	881a      	ldrh	r2, [r3, #0]
10011840:	881b      	ldrh	r3, [r3, #0]
10011842:	7122      	strb	r2, [r4, #4]
10011844:	0a1b      	lsrs	r3, r3, #8
10011846:	2206      	movs	r2, #6
10011848:	7163      	strb	r3, [r4, #5]
1001184a:	480f      	ldr	r0, [pc, #60]	; (10011888 <dbg_le_set_bd_addr_req_handler+0x64>)
1001184c:	4b0f      	ldr	r3, [pc, #60]	; (1001188c <dbg_le_set_bd_addr_req_handler+0x68>)
1001184e:	7067      	strb	r7, [r4, #1]
10011850:	70a7      	strb	r7, [r4, #2]
10011852:	4798      	blx	r3
10011854:	4d0e      	ldr	r5, [pc, #56]	; (10011890 <dbg_le_set_bd_addr_req_handler+0x6c>)
10011856:	4b0f      	ldr	r3, [pc, #60]	; (10011894 <dbg_le_set_bd_addr_req_handler+0x70>)
10011858:	210e      	movs	r1, #14
1001185a:	802b      	strh	r3, [r5, #0]
1001185c:	2306      	movs	r3, #6
1001185e:	71a3      	strb	r3, [r4, #6]
10011860:	2300      	movs	r3, #0
10011862:	1c20      	adds	r0, r4, #0
10011864:	71e3      	strb	r3, [r4, #7]
10011866:	4b0c      	ldr	r3, [pc, #48]	; (10011898 <dbg_le_set_bd_addr_req_handler+0x74>)
10011868:	80af      	strh	r7, [r5, #4]
1001186a:	4798      	blx	r3
1001186c:	1c30      	adds	r0, r6, #0
1001186e:	4b0b      	ldr	r3, [pc, #44]	; (1001189c <dbg_le_set_bd_addr_req_handler+0x78>)
10011870:	4798      	blx	r3
10011872:	7833      	ldrb	r3, [r6, #0]
10011874:	20e2      	movs	r0, #226	; 0xe2
10011876:	2b00      	cmp	r3, #0
10011878:	d101      	bne.n	1001187e <dbg_le_set_bd_addr_req_handler+0x5a>
1001187a:	68ab      	ldr	r3, [r5, #8]
1001187c:	7818      	ldrb	r0, [r3, #0]
1001187e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10011880:	1001b348 	.word	0x1001b348
10011884:	1001afd8 	.word	0x1001afd8
10011888:	1001b350 	.word	0x1001b350
1001188c:	10015227 	.word	0x10015227
10011890:	1001afcc 	.word	0x1001afcc
10011894:	00000329 	.word	0x00000329
10011898:	10011791 	.word	0x10011791
1001189c:	100117f5 	.word	0x100117f5

100118a0 <gapc_get_dev_info_cfm.constprop.1>:
100118a0:	b538      	push	{r3, r4, r5, lr}
100118a2:	230b      	movs	r3, #11
100118a4:	4c27      	ldr	r4, [pc, #156]	; (10011944 <gapc_get_dev_info_cfm.constprop.1+0xa4>)
100118a6:	7023      	strb	r3, [r4, #0]
100118a8:	3303      	adds	r3, #3
100118aa:	7063      	strb	r3, [r4, #1]
100118ac:	3329      	adds	r3, #41	; 0x29
100118ae:	70a3      	strb	r3, [r4, #2]
100118b0:	4b25      	ldr	r3, [pc, #148]	; (10011948 <gapc_get_dev_info_cfm.constprop.1+0xa8>)
100118b2:	70e1      	strb	r1, [r4, #3]
100118b4:	881a      	ldrh	r2, [r3, #0]
100118b6:	881b      	ldrh	r3, [r3, #0]
100118b8:	7122      	strb	r2, [r4, #4]
100118ba:	0a1b      	lsrs	r3, r3, #8
100118bc:	7163      	strb	r3, [r4, #5]
100118be:	2300      	movs	r3, #0
100118c0:	7220      	strb	r0, [r4, #8]
100118c2:	7263      	strb	r3, [r4, #9]
100118c4:	2801      	cmp	r0, #1
100118c6:	d02b      	beq.n	10011920 <gapc_get_dev_info_cfm.constprop.1+0x80>
100118c8:	4298      	cmp	r0, r3
100118ca:	d01b      	beq.n	10011904 <gapc_get_dev_info_cfm.constprop.1+0x64>
100118cc:	2802      	cmp	r0, #2
100118ce:	d12f      	bne.n	10011930 <gapc_get_dev_info_cfm.constprop.1+0x90>
100118d0:	4b1e      	ldr	r3, [pc, #120]	; (1001194c <gapc_get_dev_info_cfm.constprop.1+0xac>)
100118d2:	2112      	movs	r1, #18
100118d4:	1c1a      	adds	r2, r3, #0
100118d6:	32ce      	adds	r2, #206	; 0xce
100118d8:	8812      	ldrh	r2, [r2, #0]
100118da:	72a2      	strb	r2, [r4, #10]
100118dc:	0a12      	lsrs	r2, r2, #8
100118de:	72e2      	strb	r2, [r4, #11]
100118e0:	1c1a      	adds	r2, r3, #0
100118e2:	32d0      	adds	r2, #208	; 0xd0
100118e4:	8812      	ldrh	r2, [r2, #0]
100118e6:	7322      	strb	r2, [r4, #12]
100118e8:	0a12      	lsrs	r2, r2, #8
100118ea:	7362      	strb	r2, [r4, #13]
100118ec:	1c1a      	adds	r2, r3, #0
100118ee:	32d2      	adds	r2, #210	; 0xd2
100118f0:	8812      	ldrh	r2, [r2, #0]
100118f2:	33d4      	adds	r3, #212	; 0xd4
100118f4:	73a2      	strb	r2, [r4, #14]
100118f6:	0a12      	lsrs	r2, r2, #8
100118f8:	73e2      	strb	r2, [r4, #15]
100118fa:	881b      	ldrh	r3, [r3, #0]
100118fc:	7423      	strb	r3, [r4, #16]
100118fe:	0a1b      	lsrs	r3, r3, #8
10011900:	7463      	strb	r3, [r4, #17]
10011902:	e016      	b.n	10011932 <gapc_get_dev_info_cfm.constprop.1+0x92>
10011904:	4b11      	ldr	r3, [pc, #68]	; (1001194c <gapc_get_dev_info_cfm.constprop.1+0xac>)
10011906:	4912      	ldr	r1, [pc, #72]	; (10011950 <gapc_get_dev_info_cfm.constprop.1+0xb0>)
10011908:	33aa      	adds	r3, #170	; 0xaa
1001190a:	881d      	ldrh	r5, [r3, #0]
1001190c:	4811      	ldr	r0, [pc, #68]	; (10011954 <gapc_get_dev_info_cfm.constprop.1+0xb4>)
1001190e:	0a2b      	lsrs	r3, r5, #8
10011910:	72a5      	strb	r5, [r4, #10]
10011912:	72e3      	strb	r3, [r4, #11]
10011914:	1c2a      	adds	r2, r5, #0
10011916:	4b10      	ldr	r3, [pc, #64]	; (10011958 <gapc_get_dev_info_cfm.constprop.1+0xb8>)
10011918:	350c      	adds	r5, #12
1001191a:	4798      	blx	r3
1001191c:	b2a9      	uxth	r1, r5
1001191e:	e008      	b.n	10011932 <gapc_get_dev_info_cfm.constprop.1+0x92>
10011920:	4b0a      	ldr	r3, [pc, #40]	; (1001194c <gapc_get_dev_info_cfm.constprop.1+0xac>)
10011922:	210c      	movs	r1, #12
10011924:	33cc      	adds	r3, #204	; 0xcc
10011926:	881b      	ldrh	r3, [r3, #0]
10011928:	72a3      	strb	r3, [r4, #10]
1001192a:	0a1b      	lsrs	r3, r3, #8
1001192c:	72e3      	strb	r3, [r4, #11]
1001192e:	e000      	b.n	10011932 <gapc_get_dev_info_cfm.constprop.1+0x92>
10011930:	210a      	movs	r1, #10
10011932:	1c0b      	adds	r3, r1, #0
10011934:	3b08      	subs	r3, #8
10011936:	71a3      	strb	r3, [r4, #6]
10011938:	121b      	asrs	r3, r3, #8
1001193a:	71e3      	strb	r3, [r4, #7]
1001193c:	1c20      	adds	r0, r4, #0
1001193e:	4b07      	ldr	r3, [pc, #28]	; (1001195c <gapc_get_dev_info_cfm.constprop.1+0xbc>)
10011940:	4798      	blx	r3
10011942:	bd38      	pop	{r3, r4, r5, pc}
10011944:	1001b348 	.word	0x1001b348
10011948:	1001afd8 	.word	0x1001afd8
1001194c:	1001b06a 	.word	0x1001b06a
10011950:	1001b116 	.word	0x1001b116
10011954:	1001b354 	.word	0x1001b354
10011958:	10015227 	.word	0x10015227
1001195c:	10011791 	.word	0x10011791

10011960 <check_ConnData_idx_role>:
10011960:	4b0c      	ldr	r3, [pc, #48]	; (10011994 <check_ConnData_idx_role+0x34>)
10011962:	b570      	push	{r4, r5, r6, lr}
10011964:	1c04      	adds	r4, r0, #0
10011966:	2008      	movs	r0, #8
10011968:	429c      	cmp	r4, r3
1001196a:	d011      	beq.n	10011990 <check_ConnData_idx_role+0x30>
1001196c:	2300      	movs	r3, #0
1001196e:	2212      	movs	r2, #18
10011970:	435a      	muls	r2, r3
10011972:	4d09      	ldr	r5, [pc, #36]	; (10011998 <check_ConnData_idx_role+0x38>)
10011974:	b2d8      	uxtb	r0, r3
10011976:	1956      	adds	r6, r2, r5
10011978:	8976      	ldrh	r6, [r6, #10]
1001197a:	42a6      	cmp	r6, r4
1001197c:	d104      	bne.n	10011988 <check_ConnData_idx_role+0x28>
1001197e:	2900      	cmp	r1, #0
10011980:	d006      	beq.n	10011990 <check_ConnData_idx_role+0x30>
10011982:	5d53      	ldrb	r3, [r2, r5]
10011984:	700b      	strb	r3, [r1, #0]
10011986:	e003      	b.n	10011990 <check_ConnData_idx_role+0x30>
10011988:	3301      	adds	r3, #1
1001198a:	2b08      	cmp	r3, #8
1001198c:	d1ef      	bne.n	1001196e <check_ConnData_idx_role+0xe>
1001198e:	1c18      	adds	r0, r3, #0
10011990:	bd70      	pop	{r4, r5, r6, pc}
10011992:	46c0      	nop			; (mov r8, r8)
10011994:	0000ffff 	.word	0x0000ffff
10011998:	1001afda 	.word	0x1001afda

1001199c <check_ConnData_emptyEntry>:
1001199c:	2300      	movs	r3, #0
1001199e:	2212      	movs	r2, #18
100119a0:	435a      	muls	r2, r3
100119a2:	4906      	ldr	r1, [pc, #24]	; (100119bc <check_ConnData_emptyEntry+0x20>)
100119a4:	b2d8      	uxtb	r0, r3
100119a6:	1852      	adds	r2, r2, r1
100119a8:	8951      	ldrh	r1, [r2, #10]
100119aa:	4a05      	ldr	r2, [pc, #20]	; (100119c0 <check_ConnData_emptyEntry+0x24>)
100119ac:	4291      	cmp	r1, r2
100119ae:	d003      	beq.n	100119b8 <check_ConnData_emptyEntry+0x1c>
100119b0:	3301      	adds	r3, #1
100119b2:	2b08      	cmp	r3, #8
100119b4:	d1f3      	bne.n	1001199e <check_ConnData_emptyEntry+0x2>
100119b6:	1c18      	adds	r0, r3, #0
100119b8:	4770      	bx	lr
100119ba:	46c0      	nop			; (mov r8, r8)
100119bc:	1001afda 	.word	0x1001afda
100119c0:	0000ffff 	.word	0x0000ffff

100119c4 <gapc_cmp_evt>:
100119c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
100119c6:	780b      	ldrb	r3, [r1, #0]
100119c8:	1c05      	adds	r5, r0, #0
100119ca:	1e58      	subs	r0, r3, #1
100119cc:	784e      	ldrb	r6, [r1, #1]
100119ce:	280f      	cmp	r0, #15
100119d0:	d85a      	bhi.n	10011a88 <gapc_cmp_evt+0xc4>
100119d2:	1c14      	adds	r4, r2, #0
100119d4:	f001 fba4 	bl	10013120 <__gnu_thumb1_case_uqi>
100119d8:	5858440a 	.word	0x5858440a
100119dc:	4b584444 	.word	0x4b584444
100119e0:	0825122d 	.word	0x0825122d
100119e4:	3e395858 	.word	0x3e395858
100119e8:	203b      	movs	r0, #59	; 0x3b
100119ea:	e04e      	b.n	10011a8a <gapc_cmp_evt+0xc6>
100119ec:	203b      	movs	r0, #59	; 0x3b
100119ee:	2e00      	cmp	r6, #0
100119f0:	d04b      	beq.n	10011a8a <gapc_cmp_evt+0xc6>
100119f2:	0a2d      	lsrs	r5, r5, #8
100119f4:	8015      	strh	r5, [r2, #0]
100119f6:	7096      	strb	r6, [r2, #2]
100119f8:	3835      	subs	r0, #53	; 0x35
100119fa:	e046      	b.n	10011a8a <gapc_cmp_evt+0xc6>
100119fc:	466b      	mov	r3, sp
100119fe:	1ddf      	adds	r7, r3, #7
10011a00:	2301      	movs	r3, #1
10011a02:	0a2d      	lsrs	r5, r5, #8
10011a04:	703b      	strb	r3, [r7, #0]
10011a06:	1c28      	adds	r0, r5, #0
10011a08:	1c39      	adds	r1, r7, #0
10011a0a:	4b20      	ldr	r3, [pc, #128]	; (10011a8c <gapc_cmp_evt+0xc8>)
10011a0c:	4798      	blx	r3
10011a0e:	2807      	cmp	r0, #7
10011a10:	d803      	bhi.n	10011a1a <gapc_cmp_evt+0x56>
10011a12:	783b      	ldrb	r3, [r7, #0]
10011a14:	203b      	movs	r0, #59	; 0x3b
10011a16:	2b00      	cmp	r3, #0
10011a18:	d037      	beq.n	10011a8a <gapc_cmp_evt+0xc6>
10011a1a:	8065      	strh	r5, [r4, #2]
10011a1c:	7126      	strb	r6, [r4, #4]
10011a1e:	2009      	movs	r0, #9
10011a20:	e033      	b.n	10011a8a <gapc_cmp_evt+0xc6>
10011a22:	203b      	movs	r0, #59	; 0x3b
10011a24:	2e00      	cmp	r6, #0
10011a26:	d030      	beq.n	10011a8a <gapc_cmp_evt+0xc6>
10011a28:	0a2d      	lsrs	r5, r5, #8
10011a2a:	8015      	strh	r5, [r2, #0]
10011a2c:	7096      	strb	r6, [r2, #2]
10011a2e:	382d      	subs	r0, #45	; 0x2d
10011a30:	e02b      	b.n	10011a8a <gapc_cmp_evt+0xc6>
10011a32:	203b      	movs	r0, #59	; 0x3b
10011a34:	2e00      	cmp	r6, #0
10011a36:	d028      	beq.n	10011a8a <gapc_cmp_evt+0xc6>
10011a38:	2300      	movs	r3, #0
10011a3a:	0a2d      	lsrs	r5, r5, #8
10011a3c:	8015      	strh	r5, [r2, #0]
10011a3e:	7096      	strb	r6, [r2, #2]
10011a40:	8093      	strh	r3, [r2, #4]
10011a42:	80d3      	strh	r3, [r2, #6]
10011a44:	8113      	strh	r3, [r2, #8]
10011a46:	3834      	subs	r0, #52	; 0x34
10011a48:	e01f      	b.n	10011a8a <gapc_cmp_evt+0xc6>
10011a4a:	203b      	movs	r0, #59	; 0x3b
10011a4c:	2e00      	cmp	r6, #0
10011a4e:	d01c      	beq.n	10011a8a <gapc_cmp_evt+0xc6>
10011a50:	7216      	strb	r6, [r2, #8]
10011a52:	e003      	b.n	10011a5c <gapc_cmp_evt+0x98>
10011a54:	203b      	movs	r0, #59	; 0x3b
10011a56:	2e00      	cmp	r6, #0
10011a58:	d017      	beq.n	10011a8a <gapc_cmp_evt+0xc6>
10011a5a:	7116      	strb	r6, [r2, #4]
10011a5c:	3812      	subs	r0, #18
10011a5e:	e014      	b.n	10011a8a <gapc_cmp_evt+0xc6>
10011a60:	203b      	movs	r0, #59	; 0x3b
10011a62:	2e00      	cmp	r6, #0
10011a64:	d011      	beq.n	10011a8a <gapc_cmp_evt+0xc6>
10011a66:	7093      	strb	r3, [r2, #2]
10011a68:	70d6      	strb	r6, [r2, #3]
10011a6a:	382a      	subs	r0, #42	; 0x2a
10011a6c:	e00d      	b.n	10011a8a <gapc_cmp_evt+0xc6>
10011a6e:	203b      	movs	r0, #59	; 0x3b
10011a70:	2e00      	cmp	r6, #0
10011a72:	d00a      	beq.n	10011a8a <gapc_cmp_evt+0xc6>
10011a74:	0a2d      	lsrs	r5, r5, #8
10011a76:	7016      	strb	r6, [r2, #0]
10011a78:	8055      	strh	r5, [r2, #2]
10011a7a:	1d10      	adds	r0, r2, #4
10011a7c:	2100      	movs	r1, #0
10011a7e:	2205      	movs	r2, #5
10011a80:	4b03      	ldr	r3, [pc, #12]	; (10011a90 <gapc_cmp_evt+0xcc>)
10011a82:	4798      	blx	r3
10011a84:	2012      	movs	r0, #18
10011a86:	e000      	b.n	10011a8a <gapc_cmp_evt+0xc6>
10011a88:	2000      	movs	r0, #0
10011a8a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10011a8c:	10011961 	.word	0x10011961
10011a90:	10015239 	.word	0x10015239

10011a94 <gapc_connection_cfm_handler>:
10011a94:	b5f0      	push	{r4, r5, r6, r7, lr}
10011a96:	b085      	sub	sp, #20
10011a98:	1c1d      	adds	r5, r3, #0
10011a9a:	ab0a      	add	r3, sp, #40	; 0x28
10011a9c:	781b      	ldrb	r3, [r3, #0]
10011a9e:	9201      	str	r2, [sp, #4]
10011aa0:	9302      	str	r3, [sp, #8]
10011aa2:	ab0b      	add	r3, sp, #44	; 0x2c
10011aa4:	781b      	ldrb	r3, [r3, #0]
10011aa6:	1c07      	adds	r7, r0, #0
10011aa8:	9303      	str	r3, [sp, #12]
10011aaa:	ab0c      	add	r3, sp, #48	; 0x30
10011aac:	881a      	ldrh	r2, [r3, #0]
10011aae:	2302      	movs	r3, #2
10011ab0:	1c0e      	adds	r6, r1, #0
10011ab2:	4c23      	ldr	r4, [pc, #140]	; (10011b40 <gapc_connection_cfm_handler+0xac>)
10011ab4:	1c39      	adds	r1, r7, #0
10011ab6:	7023      	strb	r3, [r4, #0]
10011ab8:	330c      	adds	r3, #12
10011aba:	7063      	strb	r3, [r4, #1]
10011abc:	70a3      	strb	r3, [r4, #2]
10011abe:	4b21      	ldr	r3, [pc, #132]	; (10011b44 <gapc_connection_cfm_handler+0xb0>)
10011ac0:	70e2      	strb	r2, [r4, #3]
10011ac2:	881a      	ldrh	r2, [r3, #0]
10011ac4:	881b      	ldrh	r3, [r3, #0]
10011ac6:	7122      	strb	r2, [r4, #4]
10011ac8:	0a1b      	lsrs	r3, r3, #8
10011aca:	4f1f      	ldr	r7, [pc, #124]	; (10011b48 <gapc_connection_cfm_handler+0xb4>)
10011acc:	2210      	movs	r2, #16
10011ace:	481f      	ldr	r0, [pc, #124]	; (10011b4c <gapc_connection_cfm_handler+0xb8>)
10011ad0:	7163      	strb	r3, [r4, #5]
10011ad2:	47b8      	blx	r7
10011ad4:	0a33      	lsrs	r3, r6, #8
10011ad6:	7626      	strb	r6, [r4, #24]
10011ad8:	7663      	strb	r3, [r4, #25]
10011ada:	9901      	ldr	r1, [sp, #4]
10011adc:	0c33      	lsrs	r3, r6, #16
10011ade:	2210      	movs	r2, #16
10011ae0:	0e36      	lsrs	r6, r6, #24
10011ae2:	481b      	ldr	r0, [pc, #108]	; (10011b50 <gapc_connection_cfm_handler+0xbc>)
10011ae4:	76a3      	strb	r3, [r4, #26]
10011ae6:	76e6      	strb	r6, [r4, #27]
10011ae8:	47b8      	blx	r7
10011aea:	1c23      	adds	r3, r4, #0
10011aec:	332c      	adds	r3, #44	; 0x2c
10011aee:	701d      	strb	r5, [r3, #0]
10011af0:	1c23      	adds	r3, r4, #0
10011af2:	0a2a      	lsrs	r2, r5, #8
10011af4:	332d      	adds	r3, #45	; 0x2d
10011af6:	701a      	strb	r2, [r3, #0]
10011af8:	1c23      	adds	r3, r4, #0
10011afa:	0c2a      	lsrs	r2, r5, #16
10011afc:	332e      	adds	r3, #46	; 0x2e
10011afe:	701a      	strb	r2, [r3, #0]
10011b00:	1c23      	adds	r3, r4, #0
10011b02:	0e2d      	lsrs	r5, r5, #24
10011b04:	332f      	adds	r3, #47	; 0x2f
10011b06:	466a      	mov	r2, sp
10011b08:	701d      	strb	r5, [r3, #0]
10011b0a:	1c23      	adds	r3, r4, #0
10011b0c:	7a12      	ldrb	r2, [r2, #8]
10011b0e:	3330      	adds	r3, #48	; 0x30
10011b10:	701a      	strb	r2, [r3, #0]
10011b12:	1c23      	adds	r3, r4, #0
10011b14:	2500      	movs	r5, #0
10011b16:	3331      	adds	r3, #49	; 0x31
10011b18:	466a      	mov	r2, sp
10011b1a:	701d      	strb	r5, [r3, #0]
10011b1c:	1c23      	adds	r3, r4, #0
10011b1e:	7b12      	ldrb	r2, [r2, #12]
10011b20:	3332      	adds	r3, #50	; 0x32
10011b22:	701a      	strb	r2, [r3, #0]
10011b24:	1c23      	adds	r3, r4, #0
10011b26:	3333      	adds	r3, #51	; 0x33
10011b28:	701d      	strb	r5, [r3, #0]
10011b2a:	232c      	movs	r3, #44	; 0x2c
10011b2c:	1c20      	adds	r0, r4, #0
10011b2e:	71a3      	strb	r3, [r4, #6]
10011b30:	2134      	movs	r1, #52	; 0x34
10011b32:	4b08      	ldr	r3, [pc, #32]	; (10011b54 <gapc_connection_cfm_handler+0xc0>)
10011b34:	71e5      	strb	r5, [r4, #7]
10011b36:	4798      	blx	r3
10011b38:	1c28      	adds	r0, r5, #0
10011b3a:	b005      	add	sp, #20
10011b3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
10011b3e:	46c0      	nop			; (mov r8, r8)
10011b40:	1001b348 	.word	0x1001b348
10011b44:	1001afd8 	.word	0x1001afd8
10011b48:	10015227 	.word	0x10015227
10011b4c:	1001b350 	.word	0x1001b350
10011b50:	1001b364 	.word	0x1001b364
10011b54:	10011791 	.word	0x10011791

10011b58 <gapc_con_req_ind>:
10011b58:	b5f0      	push	{r4, r5, r6, r7, lr}
10011b5a:	7845      	ldrb	r5, [r0, #1]
10011b5c:	7803      	ldrb	r3, [r0, #0]
10011b5e:	4c30      	ldr	r4, [pc, #192]	; (10011c20 <gapc_con_req_ind+0xc8>)
10011b60:	022d      	lsls	r5, r5, #8
10011b62:	431d      	orrs	r5, r3
10011b64:	85a5      	strh	r5, [r4, #44]	; 0x2c
10011b66:	78c3      	ldrb	r3, [r0, #3]
10011b68:	7882      	ldrb	r2, [r0, #2]
10011b6a:	b08b      	sub	sp, #44	; 0x2c
10011b6c:	021b      	lsls	r3, r3, #8
10011b6e:	431a      	orrs	r2, r3
10011b70:	466b      	mov	r3, sp
10011b72:	9205      	str	r2, [sp, #20]
10011b74:	8a9b      	ldrh	r3, [r3, #20]
10011b76:	2120      	movs	r1, #32
10011b78:	85e3      	strh	r3, [r4, #46]	; 0x2e
10011b7a:	7943      	ldrb	r3, [r0, #5]
10011b7c:	7902      	ldrb	r2, [r0, #4]
10011b7e:	021b      	lsls	r3, r3, #8
10011b80:	431a      	orrs	r2, r3
10011b82:	466b      	mov	r3, sp
10011b84:	9206      	str	r2, [sp, #24]
10011b86:	8b1b      	ldrh	r3, [r3, #24]
10011b88:	1c06      	adds	r6, r0, #0
10011b8a:	8623      	strh	r3, [r4, #48]	; 0x30
10011b8c:	79c3      	ldrb	r3, [r0, #7]
10011b8e:	7982      	ldrb	r2, [r0, #6]
10011b90:	021b      	lsls	r3, r3, #8
10011b92:	431a      	orrs	r2, r3
10011b94:	466b      	mov	r3, sp
10011b96:	9207      	str	r2, [sp, #28]
10011b98:	466a      	mov	r2, sp
10011b9a:	8b9b      	ldrh	r3, [r3, #28]
10011b9c:	1852      	adds	r2, r2, r1
10011b9e:	8663      	strh	r3, [r4, #50]	; 0x32
10011ba0:	7a43      	ldrb	r3, [r0, #9]
10011ba2:	1c01      	adds	r1, r0, #0
10011ba4:	9308      	str	r3, [sp, #32]
10011ba6:	1c23      	adds	r3, r4, #0
10011ba8:	7812      	ldrb	r2, [r2, #0]
10011baa:	3377      	adds	r3, #119	; 0x77
10011bac:	3478      	adds	r4, #120	; 0x78
10011bae:	701a      	strb	r2, [r3, #0]
10011bb0:	310a      	adds	r1, #10
10011bb2:	2206      	movs	r2, #6
10011bb4:	4b1b      	ldr	r3, [pc, #108]	; (10011c24 <gapc_con_req_ind+0xcc>)
10011bb6:	1c20      	adds	r0, r4, #0
10011bb8:	4798      	blx	r3
10011bba:	7c33      	ldrb	r3, [r6, #16]
10011bbc:	9309      	str	r3, [sp, #36]	; 0x24
10011bbe:	4b1a      	ldr	r3, [pc, #104]	; (10011c28 <gapc_con_req_ind+0xd0>)
10011bc0:	4798      	blx	r3
10011bc2:	4e1a      	ldr	r6, [pc, #104]	; (10011c2c <gapc_con_req_ind+0xd4>)
10011bc4:	1e07      	subs	r7, r0, #0
10011bc6:	2f07      	cmp	r7, #7
10011bc8:	d81b      	bhi.n	10011c02 <gapc_con_req_ind+0xaa>
10011bca:	2312      	movs	r3, #18
10011bcc:	4343      	muls	r3, r0
10011bce:	18f0      	adds	r0, r6, r3
10011bd0:	8145      	strh	r5, [r0, #10]
10011bd2:	4669      	mov	r1, sp
10011bd4:	2524      	movs	r5, #36	; 0x24
10011bd6:	1949      	adds	r1, r1, r5
10011bd8:	7809      	ldrb	r1, [r1, #0]
10011bda:	2206      	movs	r2, #6
10011bdc:	54f1      	strb	r1, [r6, r3]
10011bde:	2120      	movs	r1, #32
10011be0:	466b      	mov	r3, sp
10011be2:	185b      	adds	r3, r3, r1
10011be4:	781b      	ldrb	r3, [r3, #0]
10011be6:	1c21      	adds	r1, r4, #0
10011be8:	7043      	strb	r3, [r0, #1]
10011bea:	466b      	mov	r3, sp
10011bec:	8a9b      	ldrh	r3, [r3, #20]
10011bee:	3002      	adds	r0, #2
10011bf0:	8143      	strh	r3, [r0, #10]
10011bf2:	466b      	mov	r3, sp
10011bf4:	8b1b      	ldrh	r3, [r3, #24]
10011bf6:	8183      	strh	r3, [r0, #12]
10011bf8:	466b      	mov	r3, sp
10011bfa:	8b9b      	ldrh	r3, [r3, #28]
10011bfc:	81c3      	strh	r3, [r0, #14]
10011bfe:	4b09      	ldr	r3, [pc, #36]	; (10011c24 <gapc_con_req_ind+0xcc>)
10011c00:	4798      	blx	r3
10011c02:	2112      	movs	r1, #18
10011c04:	2300      	movs	r3, #0
10011c06:	434f      	muls	r7, r1
10011c08:	9300      	str	r3, [sp, #0]
10011c0a:	9301      	str	r3, [sp, #4]
10011c0c:	19f6      	adds	r6, r6, r7
10011c0e:	8971      	ldrh	r1, [r6, #10]
10011c10:	4a07      	ldr	r2, [pc, #28]	; (10011c30 <gapc_con_req_ind+0xd8>)
10011c12:	9102      	str	r1, [sp, #8]
10011c14:	1c10      	adds	r0, r2, #0
10011c16:	1c19      	adds	r1, r3, #0
10011c18:	4c06      	ldr	r4, [pc, #24]	; (10011c34 <gapc_con_req_ind+0xdc>)
10011c1a:	47a0      	blx	r4
10011c1c:	b00b      	add	sp, #44	; 0x2c
10011c1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10011c20:	1001b06a 	.word	0x1001b06a
10011c24:	10015227 	.word	0x10015227
10011c28:	1001199d 	.word	0x1001199d
10011c2c:	1001afda 	.word	0x1001afda
10011c30:	1001a0f8 	.word	0x1001a0f8
10011c34:	10011a95 	.word	0x10011a95

10011c38 <gapc_disconnect_cmd_handler>:
10011c38:	2204      	movs	r2, #4
10011c3a:	b510      	push	{r4, lr}
10011c3c:	4b0c      	ldr	r3, [pc, #48]	; (10011c70 <gapc_disconnect_cmd_handler+0x38>)
10011c3e:	2400      	movs	r4, #0
10011c40:	701a      	strb	r2, [r3, #0]
10011c42:	320a      	adds	r2, #10
10011c44:	705a      	strb	r2, [r3, #1]
10011c46:	709a      	strb	r2, [r3, #2]
10011c48:	4a0a      	ldr	r2, [pc, #40]	; (10011c74 <gapc_disconnect_cmd_handler+0x3c>)
10011c4a:	70d9      	strb	r1, [r3, #3]
10011c4c:	8811      	ldrh	r1, [r2, #0]
10011c4e:	8812      	ldrh	r2, [r2, #0]
10011c50:	7119      	strb	r1, [r3, #4]
10011c52:	0a12      	lsrs	r2, r2, #8
10011c54:	715a      	strb	r2, [r3, #5]
10011c56:	2201      	movs	r2, #1
10011c58:	721a      	strb	r2, [r3, #8]
10011c5a:	1892      	adds	r2, r2, r2
10011c5c:	7258      	strb	r0, [r3, #9]
10011c5e:	719a      	strb	r2, [r3, #6]
10011c60:	71dc      	strb	r4, [r3, #7]
10011c62:	1c18      	adds	r0, r3, #0
10011c64:	210a      	movs	r1, #10
10011c66:	4b04      	ldr	r3, [pc, #16]	; (10011c78 <gapc_disconnect_cmd_handler+0x40>)
10011c68:	4798      	blx	r3
10011c6a:	1c20      	adds	r0, r4, #0
10011c6c:	bd10      	pop	{r4, pc}
10011c6e:	46c0      	nop			; (mov r8, r8)
10011c70:	1001b348 	.word	0x1001b348
10011c74:	1001afd8 	.word	0x1001afd8
10011c78:	10011791 	.word	0x10011791

10011c7c <gapc_disconnect_ind>:
10011c7c:	1c02      	adds	r2, r0, #0
10011c7e:	b508      	push	{r3, lr}
10011c80:	7843      	ldrb	r3, [r0, #1]
10011c82:	7800      	ldrb	r0, [r0, #0]
10011c84:	021b      	lsls	r3, r3, #8
10011c86:	4318      	orrs	r0, r3
10011c88:	8008      	strh	r0, [r1, #0]
10011c8a:	7893      	ldrb	r3, [r2, #2]
10011c8c:	708b      	strb	r3, [r1, #2]
10011c8e:	2100      	movs	r1, #0
10011c90:	4b05      	ldr	r3, [pc, #20]	; (10011ca8 <gapc_disconnect_ind+0x2c>)
10011c92:	4798      	blx	r3
10011c94:	2807      	cmp	r0, #7
10011c96:	d806      	bhi.n	10011ca6 <gapc_disconnect_ind+0x2a>
10011c98:	2312      	movs	r3, #18
10011c9a:	4358      	muls	r0, r3
10011c9c:	4b03      	ldr	r3, [pc, #12]	; (10011cac <gapc_disconnect_ind+0x30>)
10011c9e:	1818      	adds	r0, r3, r0
10011ca0:	2301      	movs	r3, #1
10011ca2:	425b      	negs	r3, r3
10011ca4:	8143      	strh	r3, [r0, #10]
10011ca6:	bd08      	pop	{r3, pc}
10011ca8:	10011961 	.word	0x10011961
10011cac:	1001afda 	.word	0x1001afda

10011cb0 <gapc_bond_cmd_handler>:
10011cb0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10011cb2:	9300      	str	r3, [sp, #0]
10011cb4:	2312      	movs	r3, #18
10011cb6:	1c04      	adds	r4, r0, #0
10011cb8:	a808      	add	r0, sp, #32
10011cba:	7807      	ldrb	r7, [r0, #0]
10011cbc:	a809      	add	r0, sp, #36	; 0x24
10011cbe:	7806      	ldrb	r6, [r0, #0]
10011cc0:	a80a      	add	r0, sp, #40	; 0x28
10011cc2:	7805      	ldrb	r5, [r0, #0]
10011cc4:	a80b      	add	r0, sp, #44	; 0x2c
10011cc6:	7800      	ldrb	r0, [r0, #0]
10011cc8:	9001      	str	r0, [sp, #4]
10011cca:	4810      	ldr	r0, [pc, #64]	; (10011d0c <gapc_bond_cmd_handler+0x5c>)
10011ccc:	7003      	strb	r3, [r0, #0]
10011cce:	230e      	movs	r3, #14
10011cd0:	70c4      	strb	r4, [r0, #3]
10011cd2:	4c0f      	ldr	r4, [pc, #60]	; (10011d10 <gapc_bond_cmd_handler+0x60>)
10011cd4:	7043      	strb	r3, [r0, #1]
10011cd6:	7083      	strb	r3, [r0, #2]
10011cd8:	8823      	ldrh	r3, [r4, #0]
10011cda:	8824      	ldrh	r4, [r4, #0]
10011cdc:	7103      	strb	r3, [r0, #4]
10011cde:	466b      	mov	r3, sp
10011ce0:	781b      	ldrb	r3, [r3, #0]
10011ce2:	0a24      	lsrs	r4, r4, #8
10011ce4:	72c3      	strb	r3, [r0, #11]
10011ce6:	466b      	mov	r3, sp
10011ce8:	791b      	ldrb	r3, [r3, #4]
10011cea:	7144      	strb	r4, [r0, #5]
10011cec:	73c3      	strb	r3, [r0, #15]
10011cee:	2308      	movs	r3, #8
10011cf0:	7183      	strb	r3, [r0, #6]
10011cf2:	2300      	movs	r3, #0
10011cf4:	240a      	movs	r4, #10
10011cf6:	7241      	strb	r1, [r0, #9]
10011cf8:	71c3      	strb	r3, [r0, #7]
10011cfa:	2110      	movs	r1, #16
10011cfc:	4b05      	ldr	r3, [pc, #20]	; (10011d14 <gapc_bond_cmd_handler+0x64>)
10011cfe:	7307      	strb	r7, [r0, #12]
10011d00:	7346      	strb	r6, [r0, #13]
10011d02:	7385      	strb	r5, [r0, #14]
10011d04:	7204      	strb	r4, [r0, #8]
10011d06:	7282      	strb	r2, [r0, #10]
10011d08:	4798      	blx	r3
10011d0a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
10011d0c:	1001b348 	.word	0x1001b348
10011d10:	1001afd8 	.word	0x1001afd8
10011d14:	10011791 	.word	0x10011791

10011d18 <gapc_bond_ind>:
10011d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10011d1a:	780e      	ldrb	r6, [r1, #0]
10011d1c:	1c03      	adds	r3, r0, #0
10011d1e:	1eb0      	subs	r0, r6, #2
10011d20:	2805      	cmp	r0, #5
10011d22:	d85d      	bhi.n	10011de0 <gapc_bond_ind+0xc8>
10011d24:	1c15      	adds	r5, r2, #0
10011d26:	1c0c      	adds	r4, r1, #0
10011d28:	f001 f9fa 	bl	10013120 <__gnu_thumb1_case_uqi>
10011d2c:	2f5a030d 	.word	0x2f5a030d
10011d30:	4740      	.short	0x4740
10011d32:	2009      	movs	r0, #9
10011d34:	2a00      	cmp	r2, #0
10011d36:	d054      	beq.n	10011de2 <gapc_bond_ind+0xca>
10011d38:	0a1b      	lsrs	r3, r3, #8
10011d3a:	8053      	strh	r3, [r2, #2]
10011d3c:	788b      	ldrb	r3, [r1, #2]
10011d3e:	4829      	ldr	r0, [pc, #164]	; (10011de4 <gapc_bond_ind+0xcc>)
10011d40:	7113      	strb	r3, [r2, #4]
10011d42:	2100      	movs	r1, #0
10011d44:	e01c      	b.n	10011d80 <gapc_bond_ind+0x68>
10011d46:	2009      	movs	r0, #9
10011d48:	2a00      	cmp	r2, #0
10011d4a:	d04a      	beq.n	10011de2 <gapc_bond_ind+0xca>
10011d4c:	4c25      	ldr	r4, [pc, #148]	; (10011de4 <gapc_bond_ind+0xcc>)
10011d4e:	0a1b      	lsrs	r3, r3, #8
10011d50:	8053      	strh	r3, [r2, #2]
10011d52:	788b      	ldrb	r3, [r1, #2]
10011d54:	2700      	movs	r7, #0
10011d56:	1c10      	adds	r0, r2, #0
10011d58:	1c21      	adds	r1, r4, #0
10011d5a:	7013      	strb	r3, [r2, #0]
10011d5c:	4e22      	ldr	r6, [pc, #136]	; (10011de8 <gapc_bond_ind+0xd0>)
10011d5e:	7117      	strb	r7, [r2, #4]
10011d60:	312e      	adds	r1, #46	; 0x2e
10011d62:	2217      	movs	r2, #23
10011d64:	3032      	adds	r0, #50	; 0x32
10011d66:	47b0      	blx	r6
10011d68:	1c28      	adds	r0, r5, #0
10011d6a:	1c21      	adds	r1, r4, #0
10011d6c:	2210      	movs	r2, #16
10011d6e:	311e      	adds	r1, #30
10011d70:	3022      	adds	r0, #34	; 0x22
10011d72:	47b0      	blx	r6
10011d74:	1ca1      	adds	r1, r4, #2
10011d76:	1da8      	adds	r0, r5, #6
10011d78:	221c      	movs	r2, #28
10011d7a:	47b0      	blx	r6
10011d7c:	1c20      	adds	r0, r4, #0
10011d7e:	1c39      	adds	r1, r7, #0
10011d80:	2246      	movs	r2, #70	; 0x46
10011d82:	4b1a      	ldr	r3, [pc, #104]	; (10011dec <gapc_bond_ind+0xd4>)
10011d84:	4798      	blx	r3
10011d86:	2009      	movs	r0, #9
10011d88:	e02b      	b.n	10011de2 <gapc_bond_ind+0xca>
10011d8a:	4d16      	ldr	r5, [pc, #88]	; (10011de4 <gapc_bond_ind+0xcc>)
10011d8c:	3102      	adds	r1, #2
10011d8e:	1c28      	adds	r0, r5, #0
10011d90:	2210      	movs	r2, #16
10011d92:	4e15      	ldr	r6, [pc, #84]	; (10011de8 <gapc_bond_ind+0xd0>)
10011d94:	302e      	adds	r0, #46	; 0x2e
10011d96:	47b0      	blx	r6
10011d98:	1c28      	adds	r0, r5, #0
10011d9a:	1c21      	adds	r1, r4, #0
10011d9c:	303f      	adds	r0, #63	; 0x3f
10011d9e:	3112      	adds	r1, #18
10011da0:	2206      	movs	r2, #6
10011da2:	47b0      	blx	r6
10011da4:	7e23      	ldrb	r3, [r4, #24]
10011da6:	353e      	adds	r5, #62	; 0x3e
10011da8:	702b      	strb	r3, [r5, #0]
10011daa:	e019      	b.n	10011de0 <gapc_bond_ind+0xc8>
10011dac:	480d      	ldr	r0, [pc, #52]	; (10011de4 <gapc_bond_ind+0xcc>)
10011dae:	3102      	adds	r1, #2
10011db0:	2210      	movs	r2, #16
10011db2:	4b0d      	ldr	r3, [pc, #52]	; (10011de8 <gapc_bond_ind+0xd0>)
10011db4:	301e      	adds	r0, #30
10011db6:	4798      	blx	r3
10011db8:	e012      	b.n	10011de0 <gapc_bond_ind+0xc8>
10011dba:	4d0a      	ldr	r5, [pc, #40]	; (10011de4 <gapc_bond_ind+0xcc>)
10011dbc:	3102      	adds	r1, #2
10011dbe:	2210      	movs	r2, #16
10011dc0:	4e09      	ldr	r6, [pc, #36]	; (10011de8 <gapc_bond_ind+0xd0>)
10011dc2:	1ca8      	adds	r0, r5, #2
10011dc4:	47b0      	blx	r6
10011dc6:	1c28      	adds	r0, r5, #0
10011dc8:	1c21      	adds	r1, r4, #0
10011dca:	7ce3      	ldrb	r3, [r4, #19]
10011dcc:	7ca2      	ldrb	r2, [r4, #18]
10011dce:	021b      	lsls	r3, r3, #8
10011dd0:	4313      	orrs	r3, r2
10011dd2:	3014      	adds	r0, #20
10011dd4:	3114      	adds	r1, #20
10011dd6:	2208      	movs	r2, #8
10011dd8:	826b      	strh	r3, [r5, #18]
10011dda:	47b0      	blx	r6
10011ddc:	7f23      	ldrb	r3, [r4, #28]
10011dde:	772b      	strb	r3, [r5, #28]
10011de0:	2000      	movs	r0, #0
10011de2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10011de4:	1001a128 	.word	0x1001a128
10011de8:	10015227 	.word	0x10015227
10011dec:	10015239 	.word	0x10015239

10011df0 <gapc_bond_req_ind>:
10011df0:	b570      	push	{r4, r5, r6, lr}
10011df2:	780c      	ldrb	r4, [r1, #0]
10011df4:	1c03      	adds	r3, r0, #0
10011df6:	7849      	ldrb	r1, [r1, #1]
10011df8:	2c07      	cmp	r4, #7
10011dfa:	d85c      	bhi.n	10011eb6 <gapc_bond_req_ind+0xc6>
10011dfc:	1c20      	adds	r0, r4, #0
10011dfe:	f001 f98f 	bl	10013120 <__gnu_thumb1_case_uqi>
10011e02:	5a04      	.short	0x5a04
10011e04:	5a0b5a5a 	.word	0x5a0b5a5a
10011e08:	1f1f      	.short	0x1f1f
10011e0a:	200a      	movs	r0, #10
10011e0c:	2a00      	cmp	r2, #0
10011e0e:	d053      	beq.n	10011eb8 <gapc_bond_req_ind+0xc8>
10011e10:	0a1b      	lsrs	r3, r3, #8
10011e12:	8013      	strh	r3, [r2, #0]
10011e14:	7091      	strb	r1, [r2, #2]
10011e16:	e04f      	b.n	10011eb8 <gapc_bond_req_ind+0xc8>
10011e18:	2a00      	cmp	r2, #0
10011e1a:	d00b      	beq.n	10011e34 <gapc_bond_req_ind+0x44>
10011e1c:	0a1b      	lsrs	r3, r3, #8
10011e1e:	8013      	strh	r3, [r2, #0]
10011e20:	2900      	cmp	r1, #0
10011e22:	d102      	bne.n	10011e2a <gapc_bond_req_ind+0x3a>
10011e24:	2301      	movs	r3, #1
10011e26:	7093      	strb	r3, [r2, #2]
10011e28:	e004      	b.n	10011e34 <gapc_bond_req_ind+0x44>
10011e2a:	2300      	movs	r3, #0
10011e2c:	7093      	strb	r3, [r2, #2]
10011e2e:	2902      	cmp	r1, #2
10011e30:	d102      	bne.n	10011e38 <gapc_bond_req_ind+0x48>
10011e32:	70d3      	strb	r3, [r2, #3]
10011e34:	200c      	movs	r0, #12
10011e36:	e03f      	b.n	10011eb8 <gapc_bond_req_ind+0xc8>
10011e38:	2901      	cmp	r1, #1
10011e3a:	d1fb      	bne.n	10011e34 <gapc_bond_req_ind+0x44>
10011e3c:	70d1      	strb	r1, [r2, #3]
10011e3e:	e7f9      	b.n	10011e34 <gapc_bond_req_ind+0x44>
10011e40:	2214      	movs	r2, #20
10011e42:	481e      	ldr	r0, [pc, #120]	; (10011ebc <gapc_bond_req_ind+0xcc>)
10011e44:	0a1b      	lsrs	r3, r3, #8
10011e46:	70c3      	strb	r3, [r0, #3]
10011e48:	4b1d      	ldr	r3, [pc, #116]	; (10011ec0 <gapc_bond_req_ind+0xd0>)
10011e4a:	7002      	strb	r2, [r0, #0]
10011e4c:	3a06      	subs	r2, #6
10011e4e:	7042      	strb	r2, [r0, #1]
10011e50:	7082      	strb	r2, [r0, #2]
10011e52:	881a      	ldrh	r2, [r3, #0]
10011e54:	881b      	ldrh	r3, [r3, #0]
10011e56:	4e1b      	ldr	r6, [pc, #108]	; (10011ec4 <gapc_bond_req_ind+0xd4>)
10011e58:	0a1b      	lsrs	r3, r3, #8
10011e5a:	7143      	strb	r3, [r0, #5]
10011e5c:	2301      	movs	r3, #1
10011e5e:	7102      	strb	r2, [r0, #4]
10011e60:	7204      	strb	r4, [r0, #8]
10011e62:	7243      	strb	r3, [r0, #9]
10011e64:	1c05      	adds	r5, r0, #0
10011e66:	1c31      	adds	r1, r6, #0
10011e68:	300a      	adds	r0, #10
10011e6a:	2c07      	cmp	r4, #7
10011e6c:	d116      	bne.n	10011e9c <gapc_bond_req_ind+0xac>
10011e6e:	317e      	adds	r1, #126	; 0x7e
10011e70:	2210      	movs	r2, #16
10011e72:	4c15      	ldr	r4, [pc, #84]	; (10011ec8 <gapc_bond_req_ind+0xd8>)
10011e74:	47a0      	blx	r4
10011e76:	1c33      	adds	r3, r6, #0
10011e78:	1c31      	adds	r1, r6, #0
10011e7a:	1c28      	adds	r0, r5, #0
10011e7c:	338e      	adds	r3, #142	; 0x8e
10011e7e:	881b      	ldrh	r3, [r3, #0]
10011e80:	3190      	adds	r1, #144	; 0x90
10011e82:	76ab      	strb	r3, [r5, #26]
10011e84:	2208      	movs	r2, #8
10011e86:	0a1b      	lsrs	r3, r3, #8
10011e88:	301c      	adds	r0, #28
10011e8a:	76eb      	strb	r3, [r5, #27]
10011e8c:	47a0      	blx	r4
10011e8e:	1c31      	adds	r1, r6, #0
10011e90:	3198      	adds	r1, #152	; 0x98
10011e92:	780a      	ldrb	r2, [r1, #0]
10011e94:	1d6b      	adds	r3, r5, #5
10011e96:	77da      	strb	r2, [r3, #31]
10011e98:	2125      	movs	r1, #37	; 0x25
10011e9a:	e004      	b.n	10011ea6 <gapc_bond_req_ind+0xb6>
10011e9c:	319a      	adds	r1, #154	; 0x9a
10011e9e:	2210      	movs	r2, #16
10011ea0:	4b09      	ldr	r3, [pc, #36]	; (10011ec8 <gapc_bond_req_ind+0xd8>)
10011ea2:	4798      	blx	r3
10011ea4:	211a      	movs	r1, #26
10011ea6:	1c0b      	adds	r3, r1, #0
10011ea8:	2400      	movs	r4, #0
10011eaa:	3b08      	subs	r3, #8
10011eac:	71ab      	strb	r3, [r5, #6]
10011eae:	1c28      	adds	r0, r5, #0
10011eb0:	4b06      	ldr	r3, [pc, #24]	; (10011ecc <gapc_bond_req_ind+0xdc>)
10011eb2:	71ec      	strb	r4, [r5, #7]
10011eb4:	4798      	blx	r3
10011eb6:	2000      	movs	r0, #0
10011eb8:	bd70      	pop	{r4, r5, r6, pc}
10011eba:	46c0      	nop			; (mov r8, r8)
10011ebc:	1001b348 	.word	0x1001b348
10011ec0:	1001afd8 	.word	0x1001afd8
10011ec4:	1001b06a 	.word	0x1001b06a
10011ec8:	10015227 	.word	0x10015227
10011ecc:	10011791 	.word	0x10011791

10011ed0 <gapc_bond_cfm_handler_pair_resp>:
10011ed0:	b5f0      	push	{r4, r5, r6, r7, lr}
10011ed2:	b085      	sub	sp, #20
10011ed4:	1c07      	adds	r7, r0, #0
10011ed6:	a80a      	add	r0, sp, #40	; 0x28
10011ed8:	7806      	ldrb	r6, [r0, #0]
10011eda:	a80b      	add	r0, sp, #44	; 0x2c
10011edc:	7805      	ldrb	r5, [r0, #0]
10011ede:	a80c      	add	r0, sp, #48	; 0x30
10011ee0:	7800      	ldrb	r0, [r0, #0]
10011ee2:	2414      	movs	r4, #20
10011ee4:	9002      	str	r0, [sp, #8]
10011ee6:	a80d      	add	r0, sp, #52	; 0x34
10011ee8:	7800      	ldrb	r0, [r0, #0]
10011eea:	9301      	str	r3, [sp, #4]
10011eec:	9003      	str	r0, [sp, #12]
10011eee:	a80e      	add	r0, sp, #56	; 0x38
10011ef0:	8800      	ldrh	r0, [r0, #0]
10011ef2:	4684      	mov	ip, r0
10011ef4:	4812      	ldr	r0, [pc, #72]	; (10011f40 <gapc_bond_cfm_handler_pair_resp+0x70>)
10011ef6:	7004      	strb	r4, [r0, #0]
10011ef8:	3c06      	subs	r4, #6
10011efa:	7044      	strb	r4, [r0, #1]
10011efc:	7084      	strb	r4, [r0, #2]
10011efe:	4664      	mov	r4, ip
10011f00:	70c4      	strb	r4, [r0, #3]
10011f02:	4c10      	ldr	r4, [pc, #64]	; (10011f44 <gapc_bond_cfm_handler_pair_resp+0x74>)
10011f04:	7247      	strb	r7, [r0, #9]
10011f06:	8823      	ldrh	r3, [r4, #0]
10011f08:	8824      	ldrh	r4, [r4, #0]
10011f0a:	7103      	strb	r3, [r0, #4]
10011f0c:	466b      	mov	r3, sp
10011f0e:	791b      	ldrb	r3, [r3, #4]
10011f10:	0a24      	lsrs	r4, r4, #8
10011f12:	7303      	strb	r3, [r0, #12]
10011f14:	466b      	mov	r3, sp
10011f16:	7a1b      	ldrb	r3, [r3, #8]
10011f18:	7144      	strb	r4, [r0, #5]
10011f1a:	73c3      	strb	r3, [r0, #15]
10011f1c:	466b      	mov	r3, sp
10011f1e:	7b1b      	ldrb	r3, [r3, #12]
10011f20:	2401      	movs	r4, #1
10011f22:	7403      	strb	r3, [r0, #16]
10011f24:	2309      	movs	r3, #9
10011f26:	7183      	strb	r3, [r0, #6]
10011f28:	2300      	movs	r3, #0
10011f2a:	7204      	strb	r4, [r0, #8]
10011f2c:	7281      	strb	r1, [r0, #10]
10011f2e:	72c2      	strb	r2, [r0, #11]
10011f30:	7346      	strb	r6, [r0, #13]
10011f32:	7385      	strb	r5, [r0, #14]
10011f34:	71c3      	strb	r3, [r0, #7]
10011f36:	2111      	movs	r1, #17
10011f38:	4b03      	ldr	r3, [pc, #12]	; (10011f48 <gapc_bond_cfm_handler_pair_resp+0x78>)
10011f3a:	4798      	blx	r3
10011f3c:	b005      	add	sp, #20
10011f3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10011f40:	1001b348 	.word	0x1001b348
10011f44:	1001afd8 	.word	0x1001afd8
10011f48:	10011791 	.word	0x10011791

10011f4c <gapc_bond_cfm_handler_key_exch>:
10011f4c:	b538      	push	{r3, r4, r5, lr}
10011f4e:	2514      	movs	r5, #20
10011f50:	4c0d      	ldr	r4, [pc, #52]	; (10011f88 <gapc_bond_cfm_handler_key_exch+0x3c>)
10011f52:	70e3      	strb	r3, [r4, #3]
10011f54:	4b0d      	ldr	r3, [pc, #52]	; (10011f8c <gapc_bond_cfm_handler_key_exch+0x40>)
10011f56:	7025      	strb	r5, [r4, #0]
10011f58:	3d06      	subs	r5, #6
10011f5a:	7065      	strb	r5, [r4, #1]
10011f5c:	70a5      	strb	r5, [r4, #2]
10011f5e:	881d      	ldrh	r5, [r3, #0]
10011f60:	881b      	ldrh	r3, [r3, #0]
10011f62:	7220      	strb	r0, [r4, #8]
10011f64:	0a1b      	lsrs	r3, r3, #8
10011f66:	7163      	strb	r3, [r4, #5]
10011f68:	7261      	strb	r1, [r4, #9]
10011f6a:	4b09      	ldr	r3, [pc, #36]	; (10011f90 <gapc_bond_cfm_handler_key_exch+0x44>)
10011f6c:	1c11      	adds	r1, r2, #0
10011f6e:	4809      	ldr	r0, [pc, #36]	; (10011f94 <gapc_bond_cfm_handler_key_exch+0x48>)
10011f70:	2210      	movs	r2, #16
10011f72:	7125      	strb	r5, [r4, #4]
10011f74:	4798      	blx	r3
10011f76:	2312      	movs	r3, #18
10011f78:	71a3      	strb	r3, [r4, #6]
10011f7a:	2300      	movs	r3, #0
10011f7c:	1c20      	adds	r0, r4, #0
10011f7e:	71e3      	strb	r3, [r4, #7]
10011f80:	211a      	movs	r1, #26
10011f82:	4b05      	ldr	r3, [pc, #20]	; (10011f98 <gapc_bond_cfm_handler_key_exch+0x4c>)
10011f84:	4798      	blx	r3
10011f86:	bd38      	pop	{r3, r4, r5, pc}
10011f88:	1001b348 	.word	0x1001b348
10011f8c:	1001afd8 	.word	0x1001afd8
10011f90:	10015227 	.word	0x10015227
10011f94:	1001b352 	.word	0x1001b352
10011f98:	10011791 	.word	0x10011791

10011f9c <gapc_security_cmd_handler>:
10011f9c:	221a      	movs	r2, #26
10011f9e:	b508      	push	{r3, lr}
10011fa0:	4b0b      	ldr	r3, [pc, #44]	; (10011fd0 <gapc_security_cmd_handler+0x34>)
10011fa2:	701a      	strb	r2, [r3, #0]
10011fa4:	3a0c      	subs	r2, #12
10011fa6:	705a      	strb	r2, [r3, #1]
10011fa8:	709a      	strb	r2, [r3, #2]
10011faa:	4a0a      	ldr	r2, [pc, #40]	; (10011fd4 <gapc_security_cmd_handler+0x38>)
10011fac:	70d8      	strb	r0, [r3, #3]
10011fae:	8810      	ldrh	r0, [r2, #0]
10011fb0:	8812      	ldrh	r2, [r2, #0]
10011fb2:	7118      	strb	r0, [r3, #4]
10011fb4:	0a12      	lsrs	r2, r2, #8
10011fb6:	715a      	strb	r2, [r3, #5]
10011fb8:	220c      	movs	r2, #12
10011fba:	721a      	strb	r2, [r3, #8]
10011fbc:	3a0a      	subs	r2, #10
10011fbe:	719a      	strb	r2, [r3, #6]
10011fc0:	2200      	movs	r2, #0
10011fc2:	7259      	strb	r1, [r3, #9]
10011fc4:	71da      	strb	r2, [r3, #7]
10011fc6:	1c18      	adds	r0, r3, #0
10011fc8:	210a      	movs	r1, #10
10011fca:	4b03      	ldr	r3, [pc, #12]	; (10011fd8 <gapc_security_cmd_handler+0x3c>)
10011fcc:	4798      	blx	r3
10011fce:	bd08      	pop	{r3, pc}
10011fd0:	1001b348 	.word	0x1001b348
10011fd4:	1001afd8 	.word	0x1001afd8
10011fd8:	10011791 	.word	0x10011791

10011fdc <gapc_encrypt_cmd_handler>:
10011fdc:	b5f0      	push	{r4, r5, r6, r7, lr}
10011fde:	2500      	movs	r5, #0
10011fe0:	b089      	sub	sp, #36	; 0x24
10011fe2:	9306      	str	r3, [sp, #24]
10011fe4:	ab0e      	add	r3, sp, #56	; 0x38
10011fe6:	781b      	ldrb	r3, [r3, #0]
10011fe8:	1c17      	adds	r7, r2, #0
10011fea:	9307      	str	r3, [sp, #28]
10011fec:	ab0f      	add	r3, sp, #60	; 0x3c
10011fee:	781b      	ldrb	r3, [r3, #0]
10011ff0:	4a19      	ldr	r2, [pc, #100]	; (10012058 <gapc_encrypt_cmd_handler+0x7c>)
10011ff2:	1c06      	adds	r6, r0, #0
10011ff4:	9105      	str	r1, [sp, #20]
10011ff6:	9300      	str	r3, [sp, #0]
10011ff8:	9002      	str	r0, [sp, #8]
10011ffa:	1c29      	adds	r1, r5, #0
10011ffc:	1c2b      	adds	r3, r5, #0
10011ffe:	9501      	str	r5, [sp, #4]
10012000:	1c10      	adds	r0, r2, #0
10012002:	4c16      	ldr	r4, [pc, #88]	; (1001205c <gapc_encrypt_cmd_handler+0x80>)
10012004:	47a0      	blx	r4
10012006:	2316      	movs	r3, #22
10012008:	4c15      	ldr	r4, [pc, #84]	; (10012060 <gapc_encrypt_cmd_handler+0x84>)
1001200a:	9905      	ldr	r1, [sp, #20]
1001200c:	7023      	strb	r3, [r4, #0]
1001200e:	3b08      	subs	r3, #8
10012010:	7063      	strb	r3, [r4, #1]
10012012:	70a3      	strb	r3, [r4, #2]
10012014:	4b13      	ldr	r3, [pc, #76]	; (10012064 <gapc_encrypt_cmd_handler+0x88>)
10012016:	70e6      	strb	r6, [r4, #3]
10012018:	881a      	ldrh	r2, [r3, #0]
1001201a:	881b      	ldrh	r3, [r3, #0]
1001201c:	7122      	strb	r2, [r4, #4]
1001201e:	0a1b      	lsrs	r3, r3, #8
10012020:	7163      	strb	r3, [r4, #5]
10012022:	230b      	movs	r3, #11
10012024:	4e10      	ldr	r6, [pc, #64]	; (10012068 <gapc_encrypt_cmd_handler+0x8c>)
10012026:	2210      	movs	r2, #16
10012028:	4810      	ldr	r0, [pc, #64]	; (1001206c <gapc_encrypt_cmd_handler+0x90>)
1001202a:	7223      	strb	r3, [r4, #8]
1001202c:	7265      	strb	r5, [r4, #9]
1001202e:	47b0      	blx	r6
10012030:	0a3b      	lsrs	r3, r7, #8
10012032:	9906      	ldr	r1, [sp, #24]
10012034:	2208      	movs	r2, #8
10012036:	480e      	ldr	r0, [pc, #56]	; (10012070 <gapc_encrypt_cmd_handler+0x94>)
10012038:	76e3      	strb	r3, [r4, #27]
1001203a:	76a7      	strb	r7, [r4, #26]
1001203c:	47b0      	blx	r6
1001203e:	466a      	mov	r2, sp
10012040:	7f12      	ldrb	r2, [r2, #28]
10012042:	1d63      	adds	r3, r4, #5
10012044:	77da      	strb	r2, [r3, #31]
10012046:	231d      	movs	r3, #29
10012048:	1c20      	adds	r0, r4, #0
1001204a:	71a3      	strb	r3, [r4, #6]
1001204c:	2125      	movs	r1, #37	; 0x25
1001204e:	4b09      	ldr	r3, [pc, #36]	; (10012074 <gapc_encrypt_cmd_handler+0x98>)
10012050:	71e5      	strb	r5, [r4, #7]
10012052:	4798      	blx	r3
10012054:	b009      	add	sp, #36	; 0x24
10012056:	bdf0      	pop	{r4, r5, r6, r7, pc}
10012058:	1001a108 	.word	0x1001a108
1001205c:	10011a95 	.word	0x10011a95
10012060:	1001b348 	.word	0x1001b348
10012064:	1001afd8 	.word	0x1001afd8
10012068:	10015227 	.word	0x10015227
1001206c:	1001b352 	.word	0x1001b352
10012070:	1001b364 	.word	0x1001b364
10012074:	10011791 	.word	0x10011791

10012078 <gapc_encrypt_req_ind>:
10012078:	b508      	push	{r3, lr}
1001207a:	0a00      	lsrs	r0, r0, #8
1001207c:	8010      	strh	r0, [r2, #0]
1001207e:	784b      	ldrb	r3, [r1, #1]
10012080:	7808      	ldrb	r0, [r1, #0]
10012082:	021b      	lsls	r3, r3, #8
10012084:	4303      	orrs	r3, r0
10012086:	8053      	strh	r3, [r2, #2]
10012088:	1d10      	adds	r0, r2, #4
1001208a:	3102      	adds	r1, #2
1001208c:	2208      	movs	r2, #8
1001208e:	4b01      	ldr	r3, [pc, #4]	; (10012094 <gapc_encrypt_req_ind+0x1c>)
10012090:	4798      	blx	r3
10012092:	bd08      	pop	{r3, pc}
10012094:	10015227 	.word	0x10015227

10012098 <gapc_encrypt_cfm_handler>:
10012098:	b5f0      	push	{r4, r5, r6, r7, lr}
1001209a:	2500      	movs	r5, #0
1001209c:	b087      	sub	sp, #28
1001209e:	9304      	str	r3, [sp, #16]
100120a0:	ab0c      	add	r3, sp, #48	; 0x30
100120a2:	781b      	ldrb	r3, [r3, #0]
100120a4:	1c17      	adds	r7, r2, #0
100120a6:	4a15      	ldr	r2, [pc, #84]	; (100120fc <gapc_encrypt_cfm_handler+0x64>)
100120a8:	1c06      	adds	r6, r0, #0
100120aa:	9305      	str	r3, [sp, #20]
100120ac:	9100      	str	r1, [sp, #0]
100120ae:	9002      	str	r0, [sp, #8]
100120b0:	1c29      	adds	r1, r5, #0
100120b2:	1c2b      	adds	r3, r5, #0
100120b4:	9501      	str	r5, [sp, #4]
100120b6:	1c10      	adds	r0, r2, #0
100120b8:	4c11      	ldr	r4, [pc, #68]	; (10012100 <gapc_encrypt_cfm_handler+0x68>)
100120ba:	47a0      	blx	r4
100120bc:	2318      	movs	r3, #24
100120be:	4c11      	ldr	r4, [pc, #68]	; (10012104 <gapc_encrypt_cfm_handler+0x6c>)
100120c0:	9904      	ldr	r1, [sp, #16]
100120c2:	7023      	strb	r3, [r4, #0]
100120c4:	3b0a      	subs	r3, #10
100120c6:	7063      	strb	r3, [r4, #1]
100120c8:	70a3      	strb	r3, [r4, #2]
100120ca:	4b0f      	ldr	r3, [pc, #60]	; (10012108 <gapc_encrypt_cfm_handler+0x70>)
100120cc:	480f      	ldr	r0, [pc, #60]	; (1001210c <gapc_encrypt_cfm_handler+0x74>)
100120ce:	881a      	ldrh	r2, [r3, #0]
100120d0:	881b      	ldrh	r3, [r3, #0]
100120d2:	7122      	strb	r2, [r4, #4]
100120d4:	0a1b      	lsrs	r3, r3, #8
100120d6:	7163      	strb	r3, [r4, #5]
100120d8:	2210      	movs	r2, #16
100120da:	4b0d      	ldr	r3, [pc, #52]	; (10012110 <gapc_encrypt_cfm_handler+0x78>)
100120dc:	70e6      	strb	r6, [r4, #3]
100120de:	7227      	strb	r7, [r4, #8]
100120e0:	4798      	blx	r3
100120e2:	466b      	mov	r3, sp
100120e4:	7d1b      	ldrb	r3, [r3, #20]
100120e6:	1c20      	adds	r0, r4, #0
100120e8:	7663      	strb	r3, [r4, #25]
100120ea:	2312      	movs	r3, #18
100120ec:	211a      	movs	r1, #26
100120ee:	71a3      	strb	r3, [r4, #6]
100120f0:	4b08      	ldr	r3, [pc, #32]	; (10012114 <gapc_encrypt_cfm_handler+0x7c>)
100120f2:	71e5      	strb	r5, [r4, #7]
100120f4:	4798      	blx	r3
100120f6:	b007      	add	sp, #28
100120f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
100120fa:	46c0      	nop			; (mov r8, r8)
100120fc:	1001a118 	.word	0x1001a118
10012100:	10011a95 	.word	0x10011a95
10012104:	1001b348 	.word	0x1001b348
10012108:	1001afd8 	.word	0x1001afd8
1001210c:	1001b351 	.word	0x1001b351
10012110:	10015227 	.word	0x10015227
10012114:	10011791 	.word	0x10011791

10012118 <gapc_encrypt_ind>:
10012118:	780b      	ldrb	r3, [r1, #0]
1001211a:	0a00      	lsrs	r0, r0, #8
1001211c:	70d3      	strb	r3, [r2, #3]
1001211e:	2300      	movs	r3, #0
10012120:	8010      	strh	r0, [r2, #0]
10012122:	7093      	strb	r3, [r2, #2]
10012124:	4770      	bx	lr
	...

10012128 <gapc_param_update_cfm_handler>:
10012128:	b538      	push	{r3, r4, r5, lr}
1001212a:	2410      	movs	r4, #16
1001212c:	1c05      	adds	r5, r0, #0
1001212e:	480e      	ldr	r0, [pc, #56]	; (10012168 <gapc_param_update_cfm_handler+0x40>)
10012130:	7004      	strb	r4, [r0, #0]
10012132:	3c02      	subs	r4, #2
10012134:	7044      	strb	r4, [r0, #1]
10012136:	7084      	strb	r4, [r0, #2]
10012138:	4c0c      	ldr	r4, [pc, #48]	; (1001216c <gapc_param_update_cfm_handler+0x44>)
1001213a:	70c5      	strb	r5, [r0, #3]
1001213c:	8825      	ldrh	r5, [r4, #0]
1001213e:	8824      	ldrh	r4, [r4, #0]
10012140:	72c3      	strb	r3, [r0, #11]
10012142:	0a1b      	lsrs	r3, r3, #8
10012144:	0a24      	lsrs	r4, r4, #8
10012146:	7303      	strb	r3, [r0, #12]
10012148:	2305      	movs	r3, #5
1001214a:	7144      	strb	r4, [r0, #5]
1001214c:	2400      	movs	r4, #0
1001214e:	7201      	strb	r1, [r0, #8]
10012150:	7242      	strb	r2, [r0, #9]
10012152:	7183      	strb	r3, [r0, #6]
10012154:	0a12      	lsrs	r2, r2, #8
10012156:	210d      	movs	r1, #13
10012158:	4b05      	ldr	r3, [pc, #20]	; (10012170 <gapc_param_update_cfm_handler+0x48>)
1001215a:	7105      	strb	r5, [r0, #4]
1001215c:	7282      	strb	r2, [r0, #10]
1001215e:	71c4      	strb	r4, [r0, #7]
10012160:	4798      	blx	r3
10012162:	1c20      	adds	r0, r4, #0
10012164:	bd38      	pop	{r3, r4, r5, pc}
10012166:	46c0      	nop			; (mov r8, r8)
10012168:	1001b348 	.word	0x1001b348
1001216c:	1001afd8 	.word	0x1001afd8
10012170:	10011791 	.word	0x10011791

10012174 <gapc_param_updated_ind>:
10012174:	2300      	movs	r3, #0
10012176:	0a00      	lsrs	r0, r0, #8
10012178:	8010      	strh	r0, [r2, #0]
1001217a:	7093      	strb	r3, [r2, #2]
1001217c:	784b      	ldrb	r3, [r1, #1]
1001217e:	7808      	ldrb	r0, [r1, #0]
10012180:	021b      	lsls	r3, r3, #8
10012182:	4303      	orrs	r3, r0
10012184:	8093      	strh	r3, [r2, #4]
10012186:	78cb      	ldrb	r3, [r1, #3]
10012188:	7888      	ldrb	r0, [r1, #2]
1001218a:	021b      	lsls	r3, r3, #8
1001218c:	4303      	orrs	r3, r0
1001218e:	80d3      	strh	r3, [r2, #6]
10012190:	794b      	ldrb	r3, [r1, #5]
10012192:	7909      	ldrb	r1, [r1, #4]
10012194:	021b      	lsls	r3, r3, #8
10012196:	430b      	orrs	r3, r1
10012198:	2007      	movs	r0, #7
1001219a:	8113      	strh	r3, [r2, #8]
1001219c:	4770      	bx	lr

1001219e <gapc_param_updated_req_ind>:
1001219e:	0a00      	lsrs	r0, r0, #8
100121a0:	8010      	strh	r0, [r2, #0]
100121a2:	784b      	ldrb	r3, [r1, #1]
100121a4:	7808      	ldrb	r0, [r1, #0]
100121a6:	021b      	lsls	r3, r3, #8
100121a8:	4303      	orrs	r3, r0
100121aa:	8053      	strh	r3, [r2, #2]
100121ac:	78cb      	ldrb	r3, [r1, #3]
100121ae:	7888      	ldrb	r0, [r1, #2]
100121b0:	021b      	lsls	r3, r3, #8
100121b2:	4303      	orrs	r3, r0
100121b4:	8093      	strh	r3, [r2, #4]
100121b6:	794b      	ldrb	r3, [r1, #5]
100121b8:	7908      	ldrb	r0, [r1, #4]
100121ba:	021b      	lsls	r3, r3, #8
100121bc:	4303      	orrs	r3, r0
100121be:	80d3      	strh	r3, [r2, #6]
100121c0:	79cb      	ldrb	r3, [r1, #7]
100121c2:	7989      	ldrb	r1, [r1, #6]
100121c4:	021b      	lsls	r3, r3, #8
100121c6:	430b      	orrs	r3, r1
100121c8:	2008      	movs	r0, #8
100121ca:	8113      	strh	r3, [r2, #8]
100121cc:	4770      	bx	lr
	...

100121d0 <gapc_dev_info_req_ind_handler>:
100121d0:	b508      	push	{r3, lr}
100121d2:	1c0b      	adds	r3, r1, #0
100121d4:	0a01      	lsrs	r1, r0, #8
100121d6:	8011      	strh	r1, [r2, #0]
100121d8:	7818      	ldrb	r0, [r3, #0]
100121da:	7090      	strb	r0, [r2, #2]
100121dc:	2800      	cmp	r0, #0
100121de:	d104      	bne.n	100121ea <gapc_dev_info_req_ind_handler+0x1a>
100121e0:	4b03      	ldr	r3, [pc, #12]	; (100121f0 <gapc_dev_info_req_ind_handler+0x20>)
100121e2:	33aa      	adds	r3, #170	; 0xaa
100121e4:	881b      	ldrh	r3, [r3, #0]
100121e6:	2b00      	cmp	r3, #0
100121e8:	d001      	beq.n	100121ee <gapc_dev_info_req_ind_handler+0x1e>
100121ea:	4b02      	ldr	r3, [pc, #8]	; (100121f4 <gapc_dev_info_req_ind_handler+0x24>)
100121ec:	4798      	blx	r3
100121ee:	bd08      	pop	{r3, pc}
100121f0:	1001b06a 	.word	0x1001b06a
100121f4:	100118a1 	.word	0x100118a1

100121f8 <gapc_sec_req_ind>:
100121f8:	0a00      	lsrs	r0, r0, #8
100121fa:	8010      	strh	r0, [r2, #0]
100121fc:	7809      	ldrb	r1, [r1, #0]
100121fe:	2301      	movs	r3, #1
10012200:	1c08      	adds	r0, r1, #0
10012202:	0889      	lsrs	r1, r1, #2
10012204:	4018      	ands	r0, r3
10012206:	400b      	ands	r3, r1
10012208:	70d0      	strb	r0, [r2, #3]
1001220a:	7113      	strb	r3, [r2, #4]
1001220c:	4770      	bx	lr

1001220e <gapc_sign_counter_ind_handler>:
1001220e:	0a00      	lsrs	r0, r0, #8
10012210:	8010      	strh	r0, [r2, #0]
10012212:	784b      	ldrb	r3, [r1, #1]
10012214:	0218      	lsls	r0, r3, #8
10012216:	788b      	ldrb	r3, [r1, #2]
10012218:	041b      	lsls	r3, r3, #16
1001221a:	4303      	orrs	r3, r0
1001221c:	7808      	ldrb	r0, [r1, #0]
1001221e:	4303      	orrs	r3, r0
10012220:	78c8      	ldrb	r0, [r1, #3]
10012222:	0600      	lsls	r0, r0, #24
10012224:	4303      	orrs	r3, r0
10012226:	6053      	str	r3, [r2, #4]
10012228:	794b      	ldrb	r3, [r1, #5]
1001222a:	0218      	lsls	r0, r3, #8
1001222c:	798b      	ldrb	r3, [r1, #6]
1001222e:	041b      	lsls	r3, r3, #16
10012230:	4303      	orrs	r3, r0
10012232:	7908      	ldrb	r0, [r1, #4]
10012234:	79c9      	ldrb	r1, [r1, #7]
10012236:	4303      	orrs	r3, r0
10012238:	0609      	lsls	r1, r1, #24
1001223a:	430b      	orrs	r3, r1
1001223c:	2000      	movs	r0, #0
1001223e:	6093      	str	r3, [r2, #8]
10012240:	4770      	bx	lr
	...

10012244 <gapc_peer_att_info_ind_handler>:
10012244:	b510      	push	{r4, lr}
10012246:	0a00      	lsrs	r0, r0, #8
10012248:	8010      	strh	r0, [r2, #0]
1001224a:	7808      	ldrb	r0, [r1, #0]
1001224c:	7090      	strb	r0, [r2, #2]
1001224e:	788b      	ldrb	r3, [r1, #2]
10012250:	784c      	ldrb	r4, [r1, #1]
10012252:	021b      	lsls	r3, r3, #8
10012254:	4323      	orrs	r3, r4
10012256:	8093      	strh	r3, [r2, #4]
10012258:	2801      	cmp	r0, #1
1001225a:	d027      	beq.n	100122ac <gapc_peer_att_info_ind_handler+0x68>
1001225c:	2800      	cmp	r0, #0
1001225e:	d017      	beq.n	10012290 <gapc_peer_att_info_ind_handler+0x4c>
10012260:	2802      	cmp	r0, #2
10012262:	d12a      	bne.n	100122ba <gapc_peer_att_info_ind_handler+0x76>
10012264:	790b      	ldrb	r3, [r1, #4]
10012266:	78c8      	ldrb	r0, [r1, #3]
10012268:	021b      	lsls	r3, r3, #8
1001226a:	4303      	orrs	r3, r0
1001226c:	8113      	strh	r3, [r2, #8]
1001226e:	798b      	ldrb	r3, [r1, #6]
10012270:	7948      	ldrb	r0, [r1, #5]
10012272:	021b      	lsls	r3, r3, #8
10012274:	4303      	orrs	r3, r0
10012276:	80d3      	strh	r3, [r2, #6]
10012278:	7a0b      	ldrb	r3, [r1, #8]
1001227a:	79c8      	ldrb	r0, [r1, #7]
1001227c:	021b      	lsls	r3, r3, #8
1001227e:	4303      	orrs	r3, r0
10012280:	8193      	strh	r3, [r2, #12]
10012282:	7a8b      	ldrb	r3, [r1, #10]
10012284:	7a49      	ldrb	r1, [r1, #9]
10012286:	021b      	lsls	r3, r3, #8
10012288:	430b      	orrs	r3, r1
1001228a:	8153      	strh	r3, [r2, #10]
1001228c:	2306      	movs	r3, #6
1001228e:	e013      	b.n	100122b8 <gapc_peer_att_info_ind_handler+0x74>
10012290:	1c14      	adds	r4, r2, #0
10012292:	1c20      	adds	r0, r4, #0
10012294:	790a      	ldrb	r2, [r1, #4]
10012296:	78cb      	ldrb	r3, [r1, #3]
10012298:	0212      	lsls	r2, r2, #8
1001229a:	431a      	orrs	r2, r3
1001229c:	80e2      	strh	r2, [r4, #6]
1001229e:	4b07      	ldr	r3, [pc, #28]	; (100122bc <gapc_peer_att_info_ind_handler+0x78>)
100122a0:	3008      	adds	r0, #8
100122a2:	3105      	adds	r1, #5
100122a4:	4798      	blx	r3
100122a6:	2302      	movs	r3, #2
100122a8:	70a3      	strb	r3, [r4, #2]
100122aa:	e006      	b.n	100122ba <gapc_peer_att_info_ind_handler+0x76>
100122ac:	790b      	ldrb	r3, [r1, #4]
100122ae:	78c9      	ldrb	r1, [r1, #3]
100122b0:	021b      	lsls	r3, r3, #8
100122b2:	430b      	orrs	r3, r1
100122b4:	80d3      	strh	r3, [r2, #6]
100122b6:	2305      	movs	r3, #5
100122b8:	7093      	strb	r3, [r2, #2]
100122ba:	bd10      	pop	{r4, pc}
100122bc:	10015227 	.word	0x10015227

100122c0 <gapc_con_channel_map_ind_handler>:
100122c0:	b508      	push	{r3, lr}
100122c2:	2300      	movs	r3, #0
100122c4:	0a00      	lsrs	r0, r0, #8
100122c6:	7013      	strb	r3, [r2, #0]
100122c8:	8050      	strh	r0, [r2, #2]
100122ca:	4b02      	ldr	r3, [pc, #8]	; (100122d4 <gapc_con_channel_map_ind_handler+0x14>)
100122cc:	1d10      	adds	r0, r2, #4
100122ce:	2205      	movs	r2, #5
100122d0:	4798      	blx	r3
100122d2:	bd08      	pop	{r3, pc}
100122d4:	10015227 	.word	0x10015227

100122d8 <gapc_lecb_connected>:
100122d8:	7843      	ldrb	r3, [r0, #1]
100122da:	7802      	ldrb	r2, [r0, #0]
100122dc:	021b      	lsls	r3, r3, #8
100122de:	4313      	orrs	r3, r2
100122e0:	800b      	strh	r3, [r1, #0]
100122e2:	78c3      	ldrb	r3, [r0, #3]
100122e4:	7882      	ldrb	r2, [r0, #2]
100122e6:	021b      	lsls	r3, r3, #8
100122e8:	4313      	orrs	r3, r2
100122ea:	804b      	strh	r3, [r1, #2]
100122ec:	7943      	ldrb	r3, [r0, #5]
100122ee:	7902      	ldrb	r2, [r0, #4]
100122f0:	021b      	lsls	r3, r3, #8
100122f2:	4313      	orrs	r3, r2
100122f4:	808b      	strh	r3, [r1, #4]
100122f6:	79c3      	ldrb	r3, [r0, #7]
100122f8:	7982      	ldrb	r2, [r0, #6]
100122fa:	021b      	lsls	r3, r3, #8
100122fc:	4313      	orrs	r3, r2
100122fe:	80cb      	strh	r3, [r1, #6]
10012300:	2300      	movs	r3, #0
10012302:	720b      	strb	r3, [r1, #8]
10012304:	4770      	bx	lr

10012306 <gapc_lecb_disconnected>:
10012306:	7843      	ldrb	r3, [r0, #1]
10012308:	7802      	ldrb	r2, [r0, #0]
1001230a:	021b      	lsls	r3, r3, #8
1001230c:	4313      	orrs	r3, r2
1001230e:	800b      	strh	r3, [r1, #0]
10012310:	78c3      	ldrb	r3, [r0, #3]
10012312:	7882      	ldrb	r2, [r0, #2]
10012314:	021b      	lsls	r3, r3, #8
10012316:	4313      	orrs	r3, r2
10012318:	804b      	strh	r3, [r1, #2]
1001231a:	4770      	bx	lr

1001231c <gapc_lecb_connect_req_ind>:
1001231c:	7843      	ldrb	r3, [r0, #1]
1001231e:	7802      	ldrb	r2, [r0, #0]
10012320:	021b      	lsls	r3, r3, #8
10012322:	4313      	orrs	r3, r2
10012324:	800b      	strh	r3, [r1, #0]
10012326:	78c3      	ldrb	r3, [r0, #3]
10012328:	7882      	ldrb	r2, [r0, #2]
1001232a:	021b      	lsls	r3, r3, #8
1001232c:	4313      	orrs	r3, r2
1001232e:	804b      	strh	r3, [r1, #2]
10012330:	7943      	ldrb	r3, [r0, #5]
10012332:	7902      	ldrb	r2, [r0, #4]
10012334:	021b      	lsls	r3, r3, #8
10012336:	4313      	orrs	r3, r2
10012338:	808b      	strh	r3, [r1, #4]
1001233a:	79c3      	ldrb	r3, [r0, #7]
1001233c:	7982      	ldrb	r2, [r0, #6]
1001233e:	021b      	lsls	r3, r3, #8
10012340:	4313      	orrs	r3, r2
10012342:	80cb      	strh	r3, [r1, #6]
10012344:	4770      	bx	lr

10012346 <gapc_lecb_add_credit_resp_handler>:
10012346:	7843      	ldrb	r3, [r0, #1]
10012348:	7802      	ldrb	r2, [r0, #0]
1001234a:	021b      	lsls	r3, r3, #8
1001234c:	4313      	orrs	r3, r2
1001234e:	800b      	strh	r3, [r1, #0]
10012350:	78c3      	ldrb	r3, [r0, #3]
10012352:	7882      	ldrb	r2, [r0, #2]
10012354:	021b      	lsls	r3, r3, #8
10012356:	4313      	orrs	r3, r2
10012358:	804b      	strh	r3, [r1, #2]
1001235a:	7943      	ldrb	r3, [r0, #5]
1001235c:	7902      	ldrb	r2, [r0, #4]
1001235e:	021b      	lsls	r3, r3, #8
10012360:	4313      	orrs	r3, r2
10012362:	808b      	strh	r3, [r1, #4]
10012364:	4770      	bx	lr
	...

10012368 <gapm_reset_req_handler>:
10012368:	b573      	push	{r0, r1, r4, r5, r6, lr}
1001236a:	466b      	mov	r3, sp
1001236c:	4915      	ldr	r1, [pc, #84]	; (100123c4 <gapm_reset_req_handler+0x5c>)
1001236e:	4816      	ldr	r0, [pc, #88]	; (100123c8 <gapm_reset_req_handler+0x60>)
10012370:	880c      	ldrh	r4, [r1, #0]
10012372:	8809      	ldrh	r1, [r1, #0]
10012374:	1ddd      	adds	r5, r3, #7
10012376:	0a09      	lsrs	r1, r1, #8
10012378:	2300      	movs	r3, #0
1001237a:	2202      	movs	r2, #2
1001237c:	7141      	strb	r1, [r0, #5]
1001237e:	26d0      	movs	r6, #208	; 0xd0
10012380:	2101      	movs	r1, #1
10012382:	7104      	strb	r4, [r0, #4]
10012384:	4c11      	ldr	r4, [pc, #68]	; (100123cc <gapm_reset_req_handler+0x64>)
10012386:	702b      	strb	r3, [r5, #0]
10012388:	7002      	strb	r2, [r0, #0]
1001238a:	70c3      	strb	r3, [r0, #3]
1001238c:	320b      	adds	r2, #11
1001238e:	7201      	strb	r1, [r0, #8]
10012390:	7181      	strb	r1, [r0, #6]
10012392:	71c3      	strb	r3, [r0, #7]
10012394:	3108      	adds	r1, #8
10012396:	4b0e      	ldr	r3, [pc, #56]	; (100123d0 <gapm_reset_req_handler+0x68>)
10012398:	0136      	lsls	r6, r6, #4
1001239a:	7042      	strb	r2, [r0, #1]
1001239c:	7082      	strb	r2, [r0, #2]
1001239e:	80a2      	strh	r2, [r4, #4]
100123a0:	8026      	strh	r6, [r4, #0]
100123a2:	4798      	blx	r3
100123a4:	1c28      	adds	r0, r5, #0
100123a6:	4b0b      	ldr	r3, [pc, #44]	; (100123d4 <gapm_reset_req_handler+0x6c>)
100123a8:	4798      	blx	r3
100123aa:	782b      	ldrb	r3, [r5, #0]
100123ac:	20e2      	movs	r0, #226	; 0xe2
100123ae:	2b00      	cmp	r3, #0
100123b0:	d106      	bne.n	100123c0 <gapm_reset_req_handler+0x58>
100123b2:	68a3      	ldr	r3, [r4, #8]
100123b4:	20e2      	movs	r0, #226	; 0xe2
100123b6:	781a      	ldrb	r2, [r3, #0]
100123b8:	785b      	ldrb	r3, [r3, #1]
100123ba:	2a01      	cmp	r2, #1
100123bc:	d100      	bne.n	100123c0 <gapm_reset_req_handler+0x58>
100123be:	1c18      	adds	r0, r3, #0
100123c0:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
100123c2:	46c0      	nop			; (mov r8, r8)
100123c4:	1001afd8 	.word	0x1001afd8
100123c8:	1001b348 	.word	0x1001b348
100123cc:	1001afcc 	.word	0x1001afcc
100123d0:	10011791 	.word	0x10011791
100123d4:	100117f5 	.word	0x100117f5

100123d8 <gapm_set_dev_config_cmd_handler>:
100123d8:	b5f0      	push	{r4, r5, r6, r7, lr}
100123da:	b089      	sub	sp, #36	; 0x24
100123dc:	9303      	str	r3, [sp, #12]
100123de:	ab0e      	add	r3, sp, #56	; 0x38
100123e0:	781b      	ldrb	r3, [r3, #0]
100123e2:	4c37      	ldr	r4, [pc, #220]	; (100124c0 <gapm_set_dev_config_cmd_handler+0xe8>)
100123e4:	9304      	str	r3, [sp, #16]
100123e6:	ab0f      	add	r3, sp, #60	; 0x3c
100123e8:	781b      	ldrb	r3, [r3, #0]
100123ea:	270d      	movs	r7, #13
100123ec:	9305      	str	r3, [sp, #20]
100123ee:	ab10      	add	r3, sp, #64	; 0x40
100123f0:	881b      	ldrh	r3, [r3, #0]
100123f2:	72a1      	strb	r1, [r4, #10]
100123f4:	9300      	str	r3, [sp, #0]
100123f6:	ab11      	add	r3, sp, #68	; 0x44
100123f8:	881b      	ldrh	r3, [r3, #0]
100123fa:	0a09      	lsrs	r1, r1, #8
100123fc:	9301      	str	r3, [sp, #4]
100123fe:	ab12      	add	r3, sp, #72	; 0x48
10012400:	881b      	ldrh	r3, [r3, #0]
10012402:	7260      	strb	r0, [r4, #9]
10012404:	9302      	str	r3, [sp, #8]
10012406:	ab06      	add	r3, sp, #24
10012408:	1dde      	adds	r6, r3, #7
1001240a:	2300      	movs	r3, #0
1001240c:	7033      	strb	r3, [r6, #0]
1001240e:	2304      	movs	r3, #4
10012410:	7023      	strb	r3, [r4, #0]
10012412:	2300      	movs	r3, #0
10012414:	70e3      	strb	r3, [r4, #3]
10012416:	4b2b      	ldr	r3, [pc, #172]	; (100124c4 <gapm_set_dev_config_cmd_handler+0xec>)
10012418:	72e1      	strb	r1, [r4, #11]
1001241a:	881d      	ldrh	r5, [r3, #0]
1001241c:	881b      	ldrh	r3, [r3, #0]
1001241e:	1c11      	adds	r1, r2, #0
10012420:	0a1b      	lsrs	r3, r3, #8
10012422:	7163      	strb	r3, [r4, #5]
10012424:	2303      	movs	r3, #3
10012426:	7125      	strb	r5, [r4, #4]
10012428:	2206      	movs	r2, #6
1001242a:	4d27      	ldr	r5, [pc, #156]	; (100124c8 <gapm_set_dev_config_cmd_handler+0xf0>)
1001242c:	4827      	ldr	r0, [pc, #156]	; (100124cc <gapm_set_dev_config_cmd_handler+0xf4>)
1001242e:	7223      	strb	r3, [r4, #8]
10012430:	7067      	strb	r7, [r4, #1]
10012432:	70a7      	strb	r7, [r4, #2]
10012434:	47a8      	blx	r5
10012436:	9903      	ldr	r1, [sp, #12]
10012438:	2210      	movs	r2, #16
1001243a:	4825      	ldr	r0, [pc, #148]	; (100124d0 <gapm_set_dev_config_cmd_handler+0xf8>)
1001243c:	47a8      	blx	r5
1001243e:	466a      	mov	r2, sp
10012440:	7c12      	ldrb	r2, [r2, #16]
10012442:	1ce3      	adds	r3, r4, #3
10012444:	77da      	strb	r2, [r3, #31]
10012446:	466a      	mov	r2, sp
10012448:	7d12      	ldrb	r2, [r2, #20]
1001244a:	1d23      	adds	r3, r4, #4
1001244c:	77da      	strb	r2, [r3, #31]
1001244e:	466a      	mov	r2, sp
10012450:	7812      	ldrb	r2, [r2, #0]
10012452:	1d63      	adds	r3, r4, #5
10012454:	77da      	strb	r2, [r3, #31]
10012456:	9b00      	ldr	r3, [sp, #0]
10012458:	1da2      	adds	r2, r4, #6
1001245a:	0a1b      	lsrs	r3, r3, #8
1001245c:	77d3      	strb	r3, [r2, #31]
1001245e:	466a      	mov	r2, sp
10012460:	7912      	ldrb	r2, [r2, #4]
10012462:	1de3      	adds	r3, r4, #7
10012464:	77da      	strb	r2, [r3, #31]
10012466:	1c22      	adds	r2, r4, #0
10012468:	9b01      	ldr	r3, [sp, #4]
1001246a:	3208      	adds	r2, #8
1001246c:	0a1b      	lsrs	r3, r3, #8
1001246e:	77d3      	strb	r3, [r2, #31]
10012470:	466a      	mov	r2, sp
10012472:	1c23      	adds	r3, r4, #0
10012474:	7a12      	ldrb	r2, [r2, #8]
10012476:	3328      	adds	r3, #40	; 0x28
10012478:	701a      	strb	r2, [r3, #0]
1001247a:	1c22      	adds	r2, r4, #0
1001247c:	9b02      	ldr	r3, [sp, #8]
1001247e:	3229      	adds	r2, #41	; 0x29
10012480:	0a1b      	lsrs	r3, r3, #8
10012482:	7013      	strb	r3, [r2, #0]
10012484:	23d0      	movs	r3, #208	; 0xd0
10012486:	4d13      	ldr	r5, [pc, #76]	; (100124d4 <gapm_set_dev_config_cmd_handler+0xfc>)
10012488:	011b      	lsls	r3, r3, #4
1001248a:	802b      	strh	r3, [r5, #0]
1001248c:	2322      	movs	r3, #34	; 0x22
1001248e:	71a3      	strb	r3, [r4, #6]
10012490:	2300      	movs	r3, #0
10012492:	212a      	movs	r1, #42	; 0x2a
10012494:	71e3      	strb	r3, [r4, #7]
10012496:	1c20      	adds	r0, r4, #0
10012498:	4b0f      	ldr	r3, [pc, #60]	; (100124d8 <gapm_set_dev_config_cmd_handler+0x100>)
1001249a:	80af      	strh	r7, [r5, #4]
1001249c:	4798      	blx	r3
1001249e:	1c30      	adds	r0, r6, #0
100124a0:	4b0e      	ldr	r3, [pc, #56]	; (100124dc <gapm_set_dev_config_cmd_handler+0x104>)
100124a2:	4798      	blx	r3
100124a4:	7833      	ldrb	r3, [r6, #0]
100124a6:	20e2      	movs	r0, #226	; 0xe2
100124a8:	2b00      	cmp	r3, #0
100124aa:	d106      	bne.n	100124ba <gapm_set_dev_config_cmd_handler+0xe2>
100124ac:	68ab      	ldr	r3, [r5, #8]
100124ae:	20e2      	movs	r0, #226	; 0xe2
100124b0:	781a      	ldrb	r2, [r3, #0]
100124b2:	785b      	ldrb	r3, [r3, #1]
100124b4:	2a03      	cmp	r2, #3
100124b6:	d100      	bne.n	100124ba <gapm_set_dev_config_cmd_handler+0xe2>
100124b8:	1c18      	adds	r0, r3, #0
100124ba:	b009      	add	sp, #36	; 0x24
100124bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
100124be:	46c0      	nop			; (mov r8, r8)
100124c0:	1001b348 	.word	0x1001b348
100124c4:	1001afd8 	.word	0x1001afd8
100124c8:	10015227 	.word	0x10015227
100124cc:	1001b354 	.word	0x1001b354
100124d0:	1001b35a 	.word	0x1001b35a
100124d4:	1001afcc 	.word	0x1001afcc
100124d8:	10011791 	.word	0x10011791
100124dc:	100117f5 	.word	0x100117f5

100124e0 <gapm_get_dev_config_cmd_handler>:
100124e0:	4684      	mov	ip, r0
100124e2:	4663      	mov	r3, ip
100124e4:	b5f0      	push	{r4, r5, r6, r7, lr}
100124e6:	b085      	sub	sp, #20
100124e8:	9100      	str	r1, [sp, #0]
100124ea:	20cf      	movs	r0, #207	; 0xcf
100124ec:	2b01      	cmp	r3, #1
100124ee:	d854      	bhi.n	1001259a <gapm_get_dev_config_cmd_handler+0xba>
100124f0:	2900      	cmp	r1, #0
100124f2:	d052      	beq.n	1001259a <gapm_get_dev_config_cmd_handler+0xba>
100124f4:	2200      	movs	r2, #0
100124f6:	492a      	ldr	r1, [pc, #168]	; (100125a0 <gapm_get_dev_config_cmd_handler+0xc0>)
100124f8:	ab02      	add	r3, sp, #8
100124fa:	880c      	ldrh	r4, [r1, #0]
100124fc:	8809      	ldrh	r1, [r1, #0]
100124fe:	1d9f      	adds	r7, r3, #6
10012500:	719a      	strb	r2, [r3, #6]
10012502:	4b28      	ldr	r3, [pc, #160]	; (100125a4 <gapm_get_dev_config_cmd_handler+0xc4>)
10012504:	0a09      	lsrs	r1, r1, #8
10012506:	250d      	movs	r5, #13
10012508:	2606      	movs	r6, #6
1001250a:	7159      	strb	r1, [r3, #5]
1001250c:	4661      	mov	r1, ip
1001250e:	701e      	strb	r6, [r3, #0]
10012510:	705d      	strb	r5, [r3, #1]
10012512:	709d      	strb	r5, [r3, #2]
10012514:	70da      	strb	r2, [r3, #3]
10012516:	711c      	strb	r4, [r3, #4]
10012518:	2901      	cmp	r1, #1
1001251a:	d13e      	bne.n	1001259a <gapm_get_dev_config_cmd_handler+0xba>
1001251c:	21d0      	movs	r1, #208	; 0xd0
1001251e:	4c22      	ldr	r4, [pc, #136]	; (100125a8 <gapm_get_dev_config_cmd_handler+0xc8>)
10012520:	0109      	lsls	r1, r1, #4
10012522:	8061      	strh	r1, [r4, #2]
10012524:	4921      	ldr	r1, [pc, #132]	; (100125ac <gapm_get_dev_config_cmd_handler+0xcc>)
10012526:	71da      	strb	r2, [r3, #7]
10012528:	8021      	strh	r1, [r4, #0]
1001252a:	4661      	mov	r1, ip
1001252c:	721e      	strb	r6, [r3, #8]
1001252e:	7199      	strb	r1, [r3, #6]
10012530:	1c18      	adds	r0, r3, #0
10012532:	2109      	movs	r1, #9
10012534:	4b1e      	ldr	r3, [pc, #120]	; (100125b0 <gapm_get_dev_config_cmd_handler+0xd0>)
10012536:	80a5      	strh	r5, [r4, #4]
10012538:	4798      	blx	r3
1001253a:	1c38      	adds	r0, r7, #0
1001253c:	4b1d      	ldr	r3, [pc, #116]	; (100125b4 <gapm_get_dev_config_cmd_handler+0xd4>)
1001253e:	4798      	blx	r3
10012540:	783b      	ldrb	r3, [r7, #0]
10012542:	20e2      	movs	r0, #226	; 0xe2
10012544:	9301      	str	r3, [sp, #4]
10012546:	2b00      	cmp	r3, #0
10012548:	d127      	bne.n	1001259a <gapm_get_dev_config_cmd_handler+0xba>
1001254a:	8821      	ldrh	r1, [r4, #0]
1001254c:	4a1a      	ldr	r2, [pc, #104]	; (100125b8 <gapm_get_dev_config_cmd_handler+0xd8>)
1001254e:	68a7      	ldr	r7, [r4, #8]
10012550:	3b01      	subs	r3, #1
10012552:	4291      	cmp	r1, r2
10012554:	d001      	beq.n	1001255a <gapm_get_dev_config_cmd_handler+0x7a>
10012556:	8023      	strh	r3, [r4, #0]
10012558:	e01a      	b.n	10012590 <gapm_get_dev_config_cmd_handler+0xb0>
1001255a:	8063      	strh	r3, [r4, #2]
1001255c:	9b00      	ldr	r3, [sp, #0]
1001255e:	1c39      	adds	r1, r7, #0
10012560:	1c58      	adds	r0, r3, #1
10012562:	1c32      	adds	r2, r6, #0
10012564:	4b15      	ldr	r3, [pc, #84]	; (100125bc <gapm_get_dev_config_cmd_handler+0xdc>)
10012566:	4798      	blx	r3
10012568:	79bb      	ldrb	r3, [r7, #6]
1001256a:	9a00      	ldr	r2, [sp, #0]
1001256c:	7013      	strb	r3, [r2, #0]
1001256e:	23d0      	movs	r3, #208	; 0xd0
10012570:	011b      	lsls	r3, r3, #4
10012572:	8023      	strh	r3, [r4, #0]
10012574:	ab02      	add	r3, sp, #8
10012576:	80a5      	strh	r5, [r4, #4]
10012578:	1ddd      	adds	r5, r3, #7
1001257a:	466b      	mov	r3, sp
1001257c:	791b      	ldrb	r3, [r3, #4]
1001257e:	1c28      	adds	r0, r5, #0
10012580:	702b      	strb	r3, [r5, #0]
10012582:	4b0c      	ldr	r3, [pc, #48]	; (100125b4 <gapm_get_dev_config_cmd_handler+0xd4>)
10012584:	4798      	blx	r3
10012586:	782b      	ldrb	r3, [r5, #0]
10012588:	20d0      	movs	r0, #208	; 0xd0
1001258a:	2b00      	cmp	r3, #0
1001258c:	d105      	bne.n	1001259a <gapm_get_dev_config_cmd_handler+0xba>
1001258e:	68a7      	ldr	r7, [r4, #8]
10012590:	783b      	ldrb	r3, [r7, #0]
10012592:	7878      	ldrb	r0, [r7, #1]
10012594:	2b06      	cmp	r3, #6
10012596:	d000      	beq.n	1001259a <gapm_get_dev_config_cmd_handler+0xba>
10012598:	20e2      	movs	r0, #226	; 0xe2
1001259a:	b005      	add	sp, #20
1001259c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001259e:	46c0      	nop			; (mov r8, r8)
100125a0:	1001afd8 	.word	0x1001afd8
100125a4:	1001b348 	.word	0x1001b348
100125a8:	1001afcc 	.word	0x1001afcc
100125ac:	00000d08 	.word	0x00000d08
100125b0:	10011791 	.word	0x10011791
100125b4:	100117f5 	.word	0x100117f5
100125b8:	0000ffff 	.word	0x0000ffff
100125bc:	10015227 	.word	0x10015227

100125c0 <gapm_cancel_cmd_handler>:
100125c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
100125c2:	4916      	ldr	r1, [pc, #88]	; (1001261c <gapm_cancel_cmd_handler+0x5c>)
100125c4:	4816      	ldr	r0, [pc, #88]	; (10012620 <gapm_cancel_cmd_handler+0x60>)
100125c6:	880c      	ldrh	r4, [r1, #0]
100125c8:	8809      	ldrh	r1, [r1, #0]
100125ca:	466b      	mov	r3, sp
100125cc:	0a09      	lsrs	r1, r1, #8
100125ce:	7141      	strb	r1, [r0, #5]
100125d0:	2102      	movs	r1, #2
100125d2:	2203      	movs	r2, #3
100125d4:	7201      	strb	r1, [r0, #8]
100125d6:	21d0      	movs	r1, #208	; 0xd0
100125d8:	1ddd      	adds	r5, r3, #7
100125da:	2300      	movs	r3, #0
100125dc:	7104      	strb	r4, [r0, #4]
100125de:	4c11      	ldr	r4, [pc, #68]	; (10012624 <gapm_cancel_cmd_handler+0x64>)
100125e0:	7002      	strb	r2, [r0, #0]
100125e2:	0109      	lsls	r1, r1, #4
100125e4:	320a      	adds	r2, #10
100125e6:	702b      	strb	r3, [r5, #0]
100125e8:	7042      	strb	r2, [r0, #1]
100125ea:	7082      	strb	r2, [r0, #2]
100125ec:	70c3      	strb	r3, [r0, #3]
100125ee:	8021      	strh	r1, [r4, #0]
100125f0:	80a2      	strh	r2, [r4, #4]
100125f2:	71c3      	strb	r3, [r0, #7]
100125f4:	3a0c      	subs	r2, #12
100125f6:	2109      	movs	r1, #9
100125f8:	4b0b      	ldr	r3, [pc, #44]	; (10012628 <gapm_cancel_cmd_handler+0x68>)
100125fa:	7182      	strb	r2, [r0, #6]
100125fc:	4798      	blx	r3
100125fe:	1c28      	adds	r0, r5, #0
10012600:	4b0a      	ldr	r3, [pc, #40]	; (1001262c <gapm_cancel_cmd_handler+0x6c>)
10012602:	4798      	blx	r3
10012604:	7828      	ldrb	r0, [r5, #0]
10012606:	2800      	cmp	r0, #0
10012608:	d001      	beq.n	1001260e <gapm_cancel_cmd_handler+0x4e>
1001260a:	20e2      	movs	r0, #226	; 0xe2
1001260c:	e004      	b.n	10012618 <gapm_cancel_cmd_handler+0x58>
1001260e:	68a3      	ldr	r3, [r4, #8]
10012610:	785b      	ldrb	r3, [r3, #1]
10012612:	2b44      	cmp	r3, #68	; 0x44
10012614:	d000      	beq.n	10012618 <gapm_cancel_cmd_handler+0x58>
10012616:	1c18      	adds	r0, r3, #0
10012618:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
1001261a:	46c0      	nop			; (mov r8, r8)
1001261c:	1001afd8 	.word	0x1001afd8
10012620:	1001b348 	.word	0x1001b348
10012624:	1001afcc 	.word	0x1001afcc
10012628:	10011791 	.word	0x10011791
1001262c:	100117f5 	.word	0x100117f5

10012630 <gapm_dev_bdaddr_ind_handler>:
10012630:	b538      	push	{r3, r4, r5, lr}
10012632:	1c05      	adds	r5, r0, #0
10012634:	1c0c      	adds	r4, r1, #0
10012636:	1c48      	adds	r0, r1, #1
10012638:	2206      	movs	r2, #6
1001263a:	1c29      	adds	r1, r5, #0
1001263c:	4b02      	ldr	r3, [pc, #8]	; (10012648 <gapm_dev_bdaddr_ind_handler+0x18>)
1001263e:	4798      	blx	r3
10012640:	79ab      	ldrb	r3, [r5, #6]
10012642:	2000      	movs	r0, #0
10012644:	7023      	strb	r3, [r4, #0]
10012646:	bd38      	pop	{r3, r4, r5, pc}
10012648:	10015227 	.word	0x10015227

1001264c <gapm_cmp_evt>:
1001264c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1001264e:	7803      	ldrb	r3, [r0, #0]
10012650:	7845      	ldrb	r5, [r0, #1]
10012652:	3b0c      	subs	r3, #12
10012654:	1e18      	subs	r0, r3, #0
10012656:	280b      	cmp	r0, #11
10012658:	d900      	bls.n	1001265c <gapm_cmp_evt+0x10>
1001265a:	e08d      	b.n	10012778 <gapm_cmp_evt+0x12c>
1001265c:	1c0c      	adds	r4, r1, #0
1001265e:	f000 fd5f 	bl	10013120 <__gnu_thumb1_case_uqi>
10012662:	1952      	.short	0x1952
10012664:	068b1919 	.word	0x068b1919
10012668:	8b595906 	.word	0x8b595906
1001266c:	0d8b      	.short	0x0d8b
1001266e:	2300      	movs	r3, #0
10012670:	2d45      	cmp	r5, #69	; 0x45
10012672:	d000      	beq.n	10012676 <gapm_cmp_evt+0x2a>
10012674:	1c2b      	adds	r3, r5, #0
10012676:	7023      	strb	r3, [r4, #0]
10012678:	2002      	movs	r0, #2
1001267a:	e07e      	b.n	1001277a <gapm_cmp_evt+0x12e>
1001267c:	203b      	movs	r0, #59	; 0x3b
1001267e:	2d00      	cmp	r5, #0
10012680:	d100      	bne.n	10012684 <gapm_cmp_evt+0x38>
10012682:	e07a      	b.n	1001277a <gapm_cmp_evt+0x12e>
10012684:	700d      	strb	r5, [r1, #0]
10012686:	1c48      	adds	r0, r1, #1
10012688:	2210      	movs	r2, #16
1001268a:	2100      	movs	r1, #0
1001268c:	4b3b      	ldr	r3, [pc, #236]	; (1001277c <gapm_cmp_evt+0x130>)
1001268e:	4798      	blx	r3
10012690:	200f      	movs	r0, #15
10012692:	e072      	b.n	1001277a <gapm_cmp_evt+0x12e>
10012694:	2d00      	cmp	r5, #0
10012696:	d134      	bne.n	10012702 <gapm_cmp_evt+0xb6>
10012698:	4b39      	ldr	r3, [pc, #228]	; (10012780 <gapm_cmp_evt+0x134>)
1001269a:	4798      	blx	r3
1001269c:	1e43      	subs	r3, r0, #1
1001269e:	b2db      	uxtb	r3, r3
100126a0:	1c28      	adds	r0, r5, #0
100126a2:	2b06      	cmp	r3, #6
100126a4:	d869      	bhi.n	1001277a <gapm_cmp_evt+0x12e>
100126a6:	466b      	mov	r3, sp
100126a8:	4e36      	ldr	r6, [pc, #216]	; (10012784 <gapm_cmp_evt+0x138>)
100126aa:	1dd9      	adds	r1, r3, #7
100126ac:	8db0      	ldrh	r0, [r6, #44]	; 0x2c
100126ae:	4b36      	ldr	r3, [pc, #216]	; (10012788 <gapm_cmp_evt+0x13c>)
100126b0:	4798      	blx	r3
100126b2:	2312      	movs	r3, #18
100126b4:	4358      	muls	r0, r3
100126b6:	4935      	ldr	r1, [pc, #212]	; (1001278c <gapm_cmp_evt+0x140>)
100126b8:	1809      	adds	r1, r1, r0
100126ba:	1c0b      	adds	r3, r1, #0
100126bc:	894a      	ldrh	r2, [r1, #10]
100126be:	3308      	adds	r3, #8
100126c0:	8122      	strh	r2, [r4, #8]
100126c2:	784f      	ldrb	r7, [r1, #1]
100126c4:	72a5      	strb	r5, [r4, #10]
100126c6:	7027      	strb	r7, [r4, #0]
100126c8:	898a      	ldrh	r2, [r1, #12]
100126ca:	1c60      	adds	r0, r4, #1
100126cc:	81a2      	strh	r2, [r4, #12]
100126ce:	88db      	ldrh	r3, [r3, #6]
100126d0:	3102      	adds	r1, #2
100126d2:	81e3      	strh	r3, [r4, #14]
100126d4:	89cb      	ldrh	r3, [r1, #14]
100126d6:	2206      	movs	r2, #6
100126d8:	8223      	strh	r3, [r4, #16]
100126da:	4b2d      	ldr	r3, [pc, #180]	; (10012790 <gapm_cmp_evt+0x144>)
100126dc:	4798      	blx	r3
100126de:	2f00      	cmp	r7, #0
100126e0:	d00a      	beq.n	100126f8 <gapm_cmp_evt+0xac>
100126e2:	79a3      	ldrb	r3, [r4, #6]
100126e4:	223f      	movs	r2, #63	; 0x3f
100126e6:	1c19      	adds	r1, r3, #0
100126e8:	3501      	adds	r5, #1
100126ea:	4391      	bics	r1, r2
100126ec:	29c0      	cmp	r1, #192	; 0xc0
100126ee:	d003      	beq.n	100126f8 <gapm_cmp_evt+0xac>
100126f0:	065b      	lsls	r3, r3, #25
100126f2:	0fdb      	lsrs	r3, r3, #31
100126f4:	3502      	adds	r5, #2
100126f6:	1aed      	subs	r5, r5, r3
100126f8:	2301      	movs	r3, #1
100126fa:	425b      	negs	r3, r3
100126fc:	7025      	strb	r5, [r4, #0]
100126fe:	85b3      	strh	r3, [r6, #44]	; 0x2c
10012700:	e038      	b.n	10012774 <gapm_cmp_evt+0x128>
10012702:	700d      	strb	r5, [r1, #0]
10012704:	e004      	b.n	10012710 <gapm_cmp_evt+0xc4>
10012706:	2300      	movs	r3, #0
10012708:	2d45      	cmp	r5, #69	; 0x45
1001270a:	d000      	beq.n	1001270e <gapm_cmp_evt+0xc2>
1001270c:	1c2b      	adds	r3, r5, #0
1001270e:	7023      	strb	r3, [r4, #0]
10012710:	2003      	movs	r0, #3
10012712:	e032      	b.n	1001277a <gapm_cmp_evt+0x12e>
10012714:	4e1b      	ldr	r6, [pc, #108]	; (10012784 <gapm_cmp_evt+0x138>)
10012716:	2100      	movs	r1, #0
10012718:	8db0      	ldrh	r0, [r6, #44]	; 0x2c
1001271a:	4b1b      	ldr	r3, [pc, #108]	; (10012788 <gapm_cmp_evt+0x13c>)
1001271c:	4798      	blx	r3
1001271e:	2807      	cmp	r0, #7
10012720:	d818      	bhi.n	10012754 <gapm_cmp_evt+0x108>
10012722:	2301      	movs	r3, #1
10012724:	425b      	negs	r3, r3
10012726:	85b3      	strh	r3, [r6, #44]	; 0x2c
10012728:	3313      	adds	r3, #19
1001272a:	4358      	muls	r0, r3
1001272c:	4917      	ldr	r1, [pc, #92]	; (1001278c <gapm_cmp_evt+0x140>)
1001272e:	1809      	adds	r1, r1, r0
10012730:	1c0b      	adds	r3, r1, #0
10012732:	894a      	ldrh	r2, [r1, #10]
10012734:	3308      	adds	r3, #8
10012736:	8122      	strh	r2, [r4, #8]
10012738:	784a      	ldrb	r2, [r1, #1]
1001273a:	72a5      	strb	r5, [r4, #10]
1001273c:	7022      	strb	r2, [r4, #0]
1001273e:	898a      	ldrh	r2, [r1, #12]
10012740:	1c60      	adds	r0, r4, #1
10012742:	81a2      	strh	r2, [r4, #12]
10012744:	88db      	ldrh	r3, [r3, #6]
10012746:	3102      	adds	r1, #2
10012748:	81e3      	strh	r3, [r4, #14]
1001274a:	89cb      	ldrh	r3, [r1, #14]
1001274c:	2206      	movs	r2, #6
1001274e:	8223      	strh	r3, [r4, #16]
10012750:	4b0f      	ldr	r3, [pc, #60]	; (10012790 <gapm_cmp_evt+0x144>)
10012752:	4798      	blx	r3
10012754:	2200      	movs	r2, #0
10012756:	7823      	ldrb	r3, [r4, #0]
10012758:	4293      	cmp	r3, r2
1001275a:	d00a      	beq.n	10012772 <gapm_cmp_evt+0x126>
1001275c:	79a3      	ldrb	r3, [r4, #6]
1001275e:	323f      	adds	r2, #63	; 0x3f
10012760:	1c19      	adds	r1, r3, #0
10012762:	4391      	bics	r1, r2
10012764:	3a3e      	subs	r2, #62	; 0x3e
10012766:	29c0      	cmp	r1, #192	; 0xc0
10012768:	d003      	beq.n	10012772 <gapm_cmp_evt+0x126>
1001276a:	065b      	lsls	r3, r3, #25
1001276c:	0fdb      	lsrs	r3, r3, #31
1001276e:	3202      	adds	r2, #2
10012770:	1ad2      	subs	r2, r2, r3
10012772:	7022      	strb	r2, [r4, #0]
10012774:	2005      	movs	r0, #5
10012776:	e000      	b.n	1001277a <gapm_cmp_evt+0x12e>
10012778:	2000      	movs	r0, #0
1001277a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1001277c:	10015239 	.word	0x10015239
10012780:	1001199d 	.word	0x1001199d
10012784:	1001b06a 	.word	0x1001b06a
10012788:	10011961 	.word	0x10011961
1001278c:	1001afda 	.word	0x1001afda
10012790:	10015227 	.word	0x10015227

10012794 <gapm_start_adv_cmd_handler>:
10012794:	b5f0      	push	{r4, r5, r6, r7, lr}
10012796:	b089      	sub	sp, #36	; 0x24
10012798:	9303      	str	r3, [sp, #12]
1001279a:	ab0e      	add	r3, sp, #56	; 0x38
1001279c:	9102      	str	r1, [sp, #8]
1001279e:	cb02      	ldmia	r3!, {r1}
100127a0:	aa08      	add	r2, sp, #32
100127a2:	881b      	ldrh	r3, [r3, #0]
100127a4:	4e3c      	ldr	r6, [pc, #240]	; (10012898 <gapm_start_adv_cmd_handler+0x104>)
100127a6:	9300      	str	r3, [sp, #0]
100127a8:	ab10      	add	r3, sp, #64	; 0x40
100127aa:	881b      	ldrh	r3, [r3, #0]
100127ac:	240d      	movs	r4, #13
100127ae:	469c      	mov	ip, r3
100127b0:	ab11      	add	r3, sp, #68	; 0x44
100127b2:	781b      	ldrb	r3, [r3, #0]
100127b4:	9304      	str	r3, [sp, #16]
100127b6:	ab12      	add	r3, sp, #72	; 0x48
100127b8:	781b      	ldrb	r3, [r3, #0]
100127ba:	9305      	str	r3, [sp, #20]
100127bc:	ab13      	add	r3, sp, #76	; 0x4c
100127be:	781b      	ldrb	r3, [r3, #0]
100127c0:	9306      	str	r3, [sp, #24]
100127c2:	ab14      	add	r3, sp, #80	; 0x50
100127c4:	781b      	ldrb	r3, [r3, #0]
100127c6:	9301      	str	r3, [sp, #4]
100127c8:	2319      	movs	r3, #25
100127ca:	189b      	adds	r3, r3, r2
100127cc:	7fdd      	ldrb	r5, [r3, #31]
100127ce:	ab18      	add	r3, sp, #96	; 0x60
100127d0:	881f      	ldrh	r7, [r3, #0]
100127d2:	ab19      	add	r3, sp, #100	; 0x64
100127d4:	781b      	ldrb	r3, [r3, #0]
100127d6:	8832      	ldrh	r2, [r6, #0]
100127d8:	9307      	str	r3, [sp, #28]
100127da:	4b30      	ldr	r3, [pc, #192]	; (1001289c <gapm_start_adv_cmd_handler+0x108>)
100127dc:	8836      	ldrh	r6, [r6, #0]
100127de:	711a      	strb	r2, [r3, #4]
100127e0:	466a      	mov	r2, sp
100127e2:	7a12      	ldrb	r2, [r2, #8]
100127e4:	701c      	strb	r4, [r3, #0]
100127e6:	705c      	strb	r4, [r3, #1]
100127e8:	709c      	strb	r4, [r3, #2]
100127ea:	725a      	strb	r2, [r3, #9]
100127ec:	2400      	movs	r4, #0
100127ee:	466a      	mov	r2, sp
100127f0:	0a36      	lsrs	r6, r6, #8
100127f2:	70dc      	strb	r4, [r3, #3]
100127f4:	7218      	strb	r0, [r3, #8]
100127f6:	729c      	strb	r4, [r3, #10]
100127f8:	715e      	strb	r6, [r3, #5]
100127fa:	72dc      	strb	r4, [r3, #11]
100127fc:	7812      	ldrb	r2, [r2, #0]
100127fe:	380e      	subs	r0, #14
10012800:	731a      	strb	r2, [r3, #12]
10012802:	9a00      	ldr	r2, [sp, #0]
10012804:	0a14      	lsrs	r4, r2, #8
10012806:	4662      	mov	r2, ip
10012808:	739a      	strb	r2, [r3, #14]
1001280a:	4662      	mov	r2, ip
1001280c:	735c      	strb	r4, [r3, #13]
1001280e:	0a14      	lsrs	r4, r2, #8
10012810:	466a      	mov	r2, sp
10012812:	7c12      	ldrb	r2, [r2, #16]
10012814:	73dc      	strb	r4, [r3, #15]
10012816:	741a      	strb	r2, [r3, #16]
10012818:	1c1c      	adds	r4, r3, #0
1001281a:	2801      	cmp	r0, #1
1001281c:	d809      	bhi.n	10012832 <gapm_start_adv_cmd_handler+0x9e>
1001281e:	2900      	cmp	r1, #0
10012820:	d003      	beq.n	1001282a <gapm_start_adv_cmd_handler+0x96>
10012822:	481f      	ldr	r0, [pc, #124]	; (100128a0 <gapm_start_adv_cmd_handler+0x10c>)
10012824:	2206      	movs	r2, #6
10012826:	4b1f      	ldr	r3, [pc, #124]	; (100128a4 <gapm_start_adv_cmd_handler+0x110>)
10012828:	4798      	blx	r3
1001282a:	466b      	mov	r3, sp
1001282c:	7b1b      	ldrb	r3, [r3, #12]
1001282e:	75e3      	strb	r3, [r4, #23]
10012830:	e014      	b.n	1001285c <gapm_start_adv_cmd_handler+0xc8>
10012832:	466b      	mov	r3, sp
10012834:	7d1b      	ldrb	r3, [r3, #20]
10012836:	9915      	ldr	r1, [sp, #84]	; 0x54
10012838:	7463      	strb	r3, [r4, #17]
1001283a:	466b      	mov	r3, sp
1001283c:	7e1b      	ldrb	r3, [r3, #24]
1001283e:	9a01      	ldr	r2, [sp, #4]
10012840:	74a3      	strb	r3, [r4, #18]
10012842:	466b      	mov	r3, sp
10012844:	791b      	ldrb	r3, [r3, #4]
10012846:	4818      	ldr	r0, [pc, #96]	; (100128a8 <gapm_start_adv_cmd_handler+0x114>)
10012848:	4e16      	ldr	r6, [pc, #88]	; (100128a4 <gapm_start_adv_cmd_handler+0x110>)
1001284a:	74e3      	strb	r3, [r4, #19]
1001284c:	47b0      	blx	r6
1001284e:	1c23      	adds	r3, r4, #0
10012850:	4816      	ldr	r0, [pc, #88]	; (100128ac <gapm_start_adv_cmd_handler+0x118>)
10012852:	3330      	adds	r3, #48	; 0x30
10012854:	9917      	ldr	r1, [sp, #92]	; 0x5c
10012856:	1c2a      	adds	r2, r5, #0
10012858:	701d      	strb	r5, [r3, #0]
1001285a:	47b0      	blx	r6
1001285c:	1c22      	adds	r2, r4, #0
1001285e:	23a5      	movs	r3, #165	; 0xa5
10012860:	3250      	adds	r2, #80	; 0x50
10012862:	7013      	strb	r3, [r2, #0]
10012864:	1c22      	adds	r2, r4, #0
10012866:	3251      	adds	r2, #81	; 0x51
10012868:	7013      	strb	r3, [r2, #0]
1001286a:	1c23      	adds	r3, r4, #0
1001286c:	1c22      	adds	r2, r4, #0
1001286e:	3352      	adds	r3, #82	; 0x52
10012870:	701f      	strb	r7, [r3, #0]
10012872:	3253      	adds	r2, #83	; 0x53
10012874:	0a3b      	lsrs	r3, r7, #8
10012876:	7013      	strb	r3, [r2, #0]
10012878:	466a      	mov	r2, sp
1001287a:	1c23      	adds	r3, r4, #0
1001287c:	7f12      	ldrb	r2, [r2, #28]
1001287e:	3354      	adds	r3, #84	; 0x54
10012880:	701a      	strb	r2, [r3, #0]
10012882:	234d      	movs	r3, #77	; 0x4d
10012884:	2500      	movs	r5, #0
10012886:	71a3      	strb	r3, [r4, #6]
10012888:	1c20      	adds	r0, r4, #0
1001288a:	2155      	movs	r1, #85	; 0x55
1001288c:	4b08      	ldr	r3, [pc, #32]	; (100128b0 <gapm_start_adv_cmd_handler+0x11c>)
1001288e:	71e5      	strb	r5, [r4, #7]
10012890:	4798      	blx	r3
10012892:	1c28      	adds	r0, r5, #0
10012894:	b009      	add	sp, #36	; 0x24
10012896:	bdf0      	pop	{r4, r5, r6, r7, pc}
10012898:	1001afd8 	.word	0x1001afd8
1001289c:	1001b348 	.word	0x1001b348
100128a0:	1001b359 	.word	0x1001b359
100128a4:	10015227 	.word	0x10015227
100128a8:	1001b35c 	.word	0x1001b35c
100128ac:	1001b379 	.word	0x1001b379
100128b0:	10011791 	.word	0x10011791

100128b4 <get_gap_local_addr_type>:
100128b4:	4b04      	ldr	r3, [pc, #16]	; (100128c8 <get_gap_local_addr_type+0x14>)
100128b6:	2001      	movs	r0, #1
100128b8:	791b      	ldrb	r3, [r3, #4]
100128ba:	2b02      	cmp	r3, #2
100128bc:	d003      	beq.n	100128c6 <get_gap_local_addr_type+0x12>
100128be:	3b03      	subs	r3, #3
100128c0:	4258      	negs	r0, r3
100128c2:	4158      	adcs	r0, r3
100128c4:	0040      	lsls	r0, r0, #1
100128c6:	4770      	bx	lr
100128c8:	1001b06a 	.word	0x1001b06a

100128cc <gapm_adv_report_evt_handler>:
100128cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
100128ce:	7843      	ldrb	r3, [r0, #1]
100128d0:	1c05      	adds	r5, r0, #0
100128d2:	9301      	str	r3, [sp, #4]
100128d4:	466b      	mov	r3, sp
100128d6:	1c0c      	adds	r4, r1, #0
100128d8:	791b      	ldrb	r3, [r3, #4]
100128da:	7806      	ldrb	r6, [r0, #0]
100128dc:	2206      	movs	r2, #6
100128de:	704b      	strb	r3, [r1, #1]
100128e0:	1c88      	adds	r0, r1, #2
100128e2:	4f1b      	ldr	r7, [pc, #108]	; (10012950 <gapm_adv_report_evt_handler+0x84>)
100128e4:	1ca9      	adds	r1, r5, #2
100128e6:	47b8      	blx	r7
100128e8:	1c20      	adds	r0, r4, #0
100128ea:	1c29      	adds	r1, r5, #0
100128ec:	7a2a      	ldrb	r2, [r5, #8]
100128ee:	3008      	adds	r0, #8
100128f0:	77c2      	strb	r2, [r0, #31]
100128f2:	3109      	adds	r1, #9
100128f4:	3528      	adds	r5, #40	; 0x28
100128f6:	47b8      	blx	r7
100128f8:	782b      	ldrb	r3, [r5, #0]
100128fa:	b25a      	sxtb	r2, r3
100128fc:	2a00      	cmp	r2, #0
100128fe:	da01      	bge.n	10012904 <gapm_adv_report_evt_handler+0x38>
10012900:	3301      	adds	r3, #1
10012902:	b2db      	uxtb	r3, r3
10012904:	1c22      	adds	r2, r4, #0
10012906:	3228      	adds	r2, #40	; 0x28
10012908:	7013      	strb	r3, [r2, #0]
1001290a:	2200      	movs	r2, #0
1001290c:	9b01      	ldr	r3, [sp, #4]
1001290e:	4293      	cmp	r3, r2
10012910:	d00a      	beq.n	10012928 <gapm_adv_report_evt_handler+0x5c>
10012912:	79e3      	ldrb	r3, [r4, #7]
10012914:	323f      	adds	r2, #63	; 0x3f
10012916:	1c19      	adds	r1, r3, #0
10012918:	4391      	bics	r1, r2
1001291a:	3a3e      	subs	r2, #62	; 0x3e
1001291c:	29c0      	cmp	r1, #192	; 0xc0
1001291e:	d003      	beq.n	10012928 <gapm_adv_report_evt_handler+0x5c>
10012920:	065b      	lsls	r3, r3, #25
10012922:	0fdb      	lsrs	r3, r3, #31
10012924:	3202      	adds	r2, #2
10012926:	1ad2      	subs	r2, r2, r3
10012928:	7062      	strb	r2, [r4, #1]
1001292a:	2e04      	cmp	r6, #4
1001292c:	d80f      	bhi.n	1001294e <gapm_adv_report_evt_handler+0x82>
1001292e:	1c30      	adds	r0, r6, #0
10012930:	f000 fbf6 	bl	10013120 <__gnu_thumb1_case_uqi>
10012934:	09070503 	.word	0x09070503
10012938:	0b          	.byte	0x0b
10012939:	00          	.byte	0x00
1001293a:	2300      	movs	r3, #0
1001293c:	e006      	b.n	1001294c <gapm_adv_report_evt_handler+0x80>
1001293e:	2301      	movs	r3, #1
10012940:	e004      	b.n	1001294c <gapm_adv_report_evt_handler+0x80>
10012942:	2302      	movs	r3, #2
10012944:	e002      	b.n	1001294c <gapm_adv_report_evt_handler+0x80>
10012946:	2303      	movs	r3, #3
10012948:	e000      	b.n	1001294c <gapm_adv_report_evt_handler+0x80>
1001294a:	2305      	movs	r3, #5
1001294c:	7023      	strb	r3, [r4, #0]
1001294e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
10012950:	10015227 	.word	0x10015227

10012954 <gapm_resolv_addr_cmd_handler>:
10012954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10012956:	2314      	movs	r3, #20
10012958:	4c12      	ldr	r4, [pc, #72]	; (100129a4 <gapm_resolv_addr_cmd_handler+0x50>)
1001295a:	1c17      	adds	r7, r2, #0
1001295c:	7023      	strb	r3, [r4, #0]
1001295e:	3b07      	subs	r3, #7
10012960:	7063      	strb	r3, [r4, #1]
10012962:	70a3      	strb	r3, [r4, #2]
10012964:	2300      	movs	r3, #0
10012966:	70e3      	strb	r3, [r4, #3]
10012968:	4b0f      	ldr	r3, [pc, #60]	; (100129a8 <gapm_resolv_addr_cmd_handler+0x54>)
1001296a:	1c05      	adds	r5, r0, #0
1001296c:	881a      	ldrh	r2, [r3, #0]
1001296e:	881b      	ldrh	r3, [r3, #0]
10012970:	4e0e      	ldr	r6, [pc, #56]	; (100129ac <gapm_resolv_addr_cmd_handler+0x58>)
10012972:	0a1b      	lsrs	r3, r3, #8
10012974:	7163      	strb	r3, [r4, #5]
10012976:	2317      	movs	r3, #23
10012978:	012d      	lsls	r5, r5, #4
1001297a:	7122      	strb	r2, [r4, #4]
1001297c:	7260      	strb	r0, [r4, #9]
1001297e:	2206      	movs	r2, #6
10012980:	480b      	ldr	r0, [pc, #44]	; (100129b0 <gapm_resolv_addr_cmd_handler+0x5c>)
10012982:	7223      	strb	r3, [r4, #8]
10012984:	47b0      	blx	r6
10012986:	1c39      	adds	r1, r7, #0
10012988:	1c2a      	adds	r2, r5, #0
1001298a:	480a      	ldr	r0, [pc, #40]	; (100129b4 <gapm_resolv_addr_cmd_handler+0x60>)
1001298c:	47b0      	blx	r6
1001298e:	1c29      	adds	r1, r5, #0
10012990:	3110      	adds	r1, #16
10012992:	1c0b      	adds	r3, r1, #0
10012994:	3b08      	subs	r3, #8
10012996:	71a3      	strb	r3, [r4, #6]
10012998:	121b      	asrs	r3, r3, #8
1001299a:	71e3      	strb	r3, [r4, #7]
1001299c:	1c20      	adds	r0, r4, #0
1001299e:	4b06      	ldr	r3, [pc, #24]	; (100129b8 <gapm_resolv_addr_cmd_handler+0x64>)
100129a0:	4798      	blx	r3
100129a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100129a4:	1001b348 	.word	0x1001b348
100129a8:	1001afd8 	.word	0x1001afd8
100129ac:	10015227 	.word	0x10015227
100129b0:	1001b352 	.word	0x1001b352
100129b4:	1001b358 	.word	0x1001b358
100129b8:	10011791 	.word	0x10011791

100129bc <gapm_addr_solved_ind_handler>:
100129bc:	b570      	push	{r4, r5, r6, lr}
100129be:	1c04      	adds	r4, r0, #0
100129c0:	1c08      	adds	r0, r1, #0
100129c2:	1c0d      	adds	r5, r1, #0
100129c4:	4e05      	ldr	r6, [pc, #20]	; (100129dc <gapm_addr_solved_ind_handler+0x20>)
100129c6:	1c21      	adds	r1, r4, #0
100129c8:	2206      	movs	r2, #6
100129ca:	3011      	adds	r0, #17
100129cc:	47b0      	blx	r6
100129ce:	1c68      	adds	r0, r5, #1
100129d0:	1da1      	adds	r1, r4, #6
100129d2:	2210      	movs	r2, #16
100129d4:	47b0      	blx	r6
100129d6:	2300      	movs	r3, #0
100129d8:	702b      	strb	r3, [r5, #0]
100129da:	bd70      	pop	{r4, r5, r6, pc}
100129dc:	10015227 	.word	0x10015227

100129e0 <gapm_profile_added_ind_handler>:
100129e0:	b510      	push	{r4, lr}
100129e2:	7843      	ldrb	r3, [r0, #1]
100129e4:	7902      	ldrb	r2, [r0, #4]
100129e6:	7944      	ldrb	r4, [r0, #5]
100129e8:	7800      	ldrb	r0, [r0, #0]
100129ea:	021b      	lsls	r3, r3, #8
100129ec:	4303      	orrs	r3, r0
100129ee:	2b1b      	cmp	r3, #27
100129f0:	d104      	bne.n	100129fc <gapm_profile_added_ind_handler+0x1c>
100129f2:	2300      	movs	r3, #0
100129f4:	700b      	strb	r3, [r1, #0]
100129f6:	0223      	lsls	r3, r4, #8
100129f8:	4313      	orrs	r3, r2
100129fa:	804b      	strh	r3, [r1, #2]
100129fc:	203b      	movs	r0, #59	; 0x3b
100129fe:	bd10      	pop	{r4, pc}

10012a00 <gattc_read_req_ind_parser>:
10012a00:	7843      	ldrb	r3, [r0, #1]
10012a02:	7802      	ldrb	r2, [r0, #0]
10012a04:	021b      	lsls	r3, r3, #8
10012a06:	4313      	orrs	r3, r2
10012a08:	804b      	strh	r3, [r1, #2]
10012a0a:	4770      	bx	lr

10012a0c <gattc_write_req_ind_parser>:
10012a0c:	b508      	push	{r3, lr}
10012a0e:	1c13      	adds	r3, r2, #0
10012a10:	0a00      	lsrs	r0, r0, #8
10012a12:	8010      	strh	r0, [r2, #0]
10012a14:	784a      	ldrb	r2, [r1, #1]
10012a16:	7808      	ldrb	r0, [r1, #0]
10012a18:	0212      	lsls	r2, r2, #8
10012a1a:	4302      	orrs	r2, r0
10012a1c:	805a      	strh	r2, [r3, #2]
10012a1e:	78ca      	ldrb	r2, [r1, #3]
10012a20:	7888      	ldrb	r0, [r1, #2]
10012a22:	0212      	lsls	r2, r2, #8
10012a24:	4302      	orrs	r2, r0
10012a26:	809a      	strh	r2, [r3, #4]
10012a28:	794a      	ldrb	r2, [r1, #5]
10012a2a:	7908      	ldrb	r0, [r1, #4]
10012a2c:	0212      	lsls	r2, r2, #8
10012a2e:	4302      	orrs	r2, r0
10012a30:	80da      	strh	r2, [r3, #6]
10012a32:	3308      	adds	r3, #8
10012a34:	1c18      	adds	r0, r3, #0
10012a36:	3106      	adds	r1, #6
10012a38:	4b01      	ldr	r3, [pc, #4]	; (10012a40 <gattc_write_req_ind_parser+0x34>)
10012a3a:	4798      	blx	r3
10012a3c:	bd08      	pop	{r3, pc}
10012a3e:	46c0      	nop			; (mov r8, r8)
10012a40:	10015227 	.word	0x10015227

10012a44 <gattc_att_info_req_parser>:
10012a44:	7843      	ldrb	r3, [r0, #1]
10012a46:	7802      	ldrb	r2, [r0, #0]
10012a48:	021b      	lsls	r3, r3, #8
10012a4a:	4313      	orrs	r3, r2
10012a4c:	800b      	strh	r3, [r1, #0]
10012a4e:	4770      	bx	lr

10012a50 <gattc_read_cfm>:
10012a50:	b538      	push	{r3, r4, r5, lr}
10012a52:	2514      	movs	r5, #20
10012a54:	1c1c      	adds	r4, r3, #0
10012a56:	4b14      	ldr	r3, [pc, #80]	; (10012aa8 <gattc_read_cfm+0x58>)
10012a58:	70d9      	strb	r1, [r3, #3]
10012a5a:	4914      	ldr	r1, [pc, #80]	; (10012aac <gattc_read_cfm+0x5c>)
10012a5c:	701d      	strb	r5, [r3, #0]
10012a5e:	3d08      	subs	r5, #8
10012a60:	705d      	strb	r5, [r3, #1]
10012a62:	709d      	strb	r5, [r3, #2]
10012a64:	880d      	ldrh	r5, [r1, #0]
10012a66:	8809      	ldrh	r1, [r1, #0]
10012a68:	7218      	strb	r0, [r3, #8]
10012a6a:	0a09      	lsrs	r1, r1, #8
10012a6c:	7159      	strb	r1, [r3, #5]
10012a6e:	0a00      	lsrs	r0, r0, #8
10012a70:	0a21      	lsrs	r1, r4, #8
10012a72:	711d      	strb	r5, [r3, #4]
10012a74:	7258      	strb	r0, [r3, #9]
10012a76:	729c      	strb	r4, [r3, #10]
10012a78:	72d9      	strb	r1, [r3, #11]
10012a7a:	731a      	strb	r2, [r3, #12]
10012a7c:	1c1d      	adds	r5, r3, #0
10012a7e:	2c00      	cmp	r4, #0
10012a80:	d007      	beq.n	10012a92 <gattc_read_cfm+0x42>
10012a82:	9904      	ldr	r1, [sp, #16]
10012a84:	1c22      	adds	r2, r4, #0
10012a86:	480a      	ldr	r0, [pc, #40]	; (10012ab0 <gattc_read_cfm+0x60>)
10012a88:	4b0a      	ldr	r3, [pc, #40]	; (10012ab4 <gattc_read_cfm+0x64>)
10012a8a:	340d      	adds	r4, #13
10012a8c:	4798      	blx	r3
10012a8e:	b2a1      	uxth	r1, r4
10012a90:	e001      	b.n	10012a96 <gattc_read_cfm+0x46>
10012a92:	210e      	movs	r1, #14
10012a94:	735c      	strb	r4, [r3, #13]
10012a96:	1c0b      	adds	r3, r1, #0
10012a98:	3b08      	subs	r3, #8
10012a9a:	71ab      	strb	r3, [r5, #6]
10012a9c:	121b      	asrs	r3, r3, #8
10012a9e:	71eb      	strb	r3, [r5, #7]
10012aa0:	1c28      	adds	r0, r5, #0
10012aa2:	4b05      	ldr	r3, [pc, #20]	; (10012ab8 <gattc_read_cfm+0x68>)
10012aa4:	4798      	blx	r3
10012aa6:	bd38      	pop	{r3, r4, r5, pc}
10012aa8:	1001b348 	.word	0x1001b348
10012aac:	1001afd8 	.word	0x1001afd8
10012ab0:	1001b355 	.word	0x1001b355
10012ab4:	10015227 	.word	0x10015227
10012ab8:	10011791 	.word	0x10011791

10012abc <gattc_write_cfm>:
10012abc:	4b0d      	ldr	r3, [pc, #52]	; (10012af4 <gattc_write_cfm+0x38>)
10012abe:	b510      	push	{r4, lr}
10012ac0:	729a      	strb	r2, [r3, #10]
10012ac2:	2203      	movs	r2, #3
10012ac4:	2416      	movs	r4, #22
10012ac6:	719a      	strb	r2, [r3, #6]
10012ac8:	2200      	movs	r2, #0
10012aca:	70d9      	strb	r1, [r3, #3]
10012acc:	490a      	ldr	r1, [pc, #40]	; (10012af8 <gattc_write_cfm+0x3c>)
10012ace:	701c      	strb	r4, [r3, #0]
10012ad0:	3c0a      	subs	r4, #10
10012ad2:	705c      	strb	r4, [r3, #1]
10012ad4:	709c      	strb	r4, [r3, #2]
10012ad6:	880c      	ldrh	r4, [r1, #0]
10012ad8:	8809      	ldrh	r1, [r1, #0]
10012ada:	7218      	strb	r0, [r3, #8]
10012adc:	0a09      	lsrs	r1, r1, #8
10012ade:	0a00      	lsrs	r0, r0, #8
10012ae0:	711c      	strb	r4, [r3, #4]
10012ae2:	7159      	strb	r1, [r3, #5]
10012ae4:	7258      	strb	r0, [r3, #9]
10012ae6:	71da      	strb	r2, [r3, #7]
10012ae8:	1c18      	adds	r0, r3, #0
10012aea:	210b      	movs	r1, #11
10012aec:	4b03      	ldr	r3, [pc, #12]	; (10012afc <gattc_write_cfm+0x40>)
10012aee:	4798      	blx	r3
10012af0:	bd10      	pop	{r4, pc}
10012af2:	46c0      	nop			; (mov r8, r8)
10012af4:	1001b348 	.word	0x1001b348
10012af8:	1001afd8 	.word	0x1001afd8
10012afc:	10011791 	.word	0x10011791

10012b00 <gattc_att_info_cfm>:
10012b00:	b538      	push	{r3, r4, r5, lr}
10012b02:	4c0e      	ldr	r4, [pc, #56]	; (10012b3c <gattc_att_info_cfm+0x3c>)
10012b04:	2518      	movs	r5, #24
10012b06:	7323      	strb	r3, [r4, #12]
10012b08:	2305      	movs	r3, #5
10012b0a:	71a3      	strb	r3, [r4, #6]
10012b0c:	2300      	movs	r3, #0
10012b0e:	70e1      	strb	r1, [r4, #3]
10012b10:	490b      	ldr	r1, [pc, #44]	; (10012b40 <gattc_att_info_cfm+0x40>)
10012b12:	7025      	strb	r5, [r4, #0]
10012b14:	3d0c      	subs	r5, #12
10012b16:	7065      	strb	r5, [r4, #1]
10012b18:	70a5      	strb	r5, [r4, #2]
10012b1a:	880d      	ldrh	r5, [r1, #0]
10012b1c:	8809      	ldrh	r1, [r1, #0]
10012b1e:	7220      	strb	r0, [r4, #8]
10012b20:	0a09      	lsrs	r1, r1, #8
10012b22:	0a00      	lsrs	r0, r0, #8
10012b24:	7161      	strb	r1, [r4, #5]
10012b26:	7260      	strb	r0, [r4, #9]
10012b28:	72a2      	strb	r2, [r4, #10]
10012b2a:	71e3      	strb	r3, [r4, #7]
10012b2c:	0a12      	lsrs	r2, r2, #8
10012b2e:	1c20      	adds	r0, r4, #0
10012b30:	210d      	movs	r1, #13
10012b32:	4b04      	ldr	r3, [pc, #16]	; (10012b44 <gattc_att_info_cfm+0x44>)
10012b34:	7125      	strb	r5, [r4, #4]
10012b36:	72e2      	strb	r2, [r4, #11]
10012b38:	4798      	blx	r3
10012b3a:	bd38      	pop	{r3, r4, r5, pc}
10012b3c:	1001b348 	.word	0x1001b348
10012b40:	1001afd8 	.word	0x1001afd8
10012b44:	10011791 	.word	0x10011791

10012b48 <gattc_send_evt_cmd_handler>:
10012b48:	b570      	push	{r4, r5, r6, lr}
10012b4a:	2610      	movs	r6, #16
10012b4c:	ac04      	add	r4, sp, #16
10012b4e:	8825      	ldrh	r5, [r4, #0]
10012b50:	4c15      	ldr	r4, [pc, #84]	; (10012ba8 <gattc_send_evt_cmd_handler+0x60>)
10012b52:	70e2      	strb	r2, [r4, #3]
10012b54:	4a15      	ldr	r2, [pc, #84]	; (10012bac <gattc_send_evt_cmd_handler+0x64>)
10012b56:	7026      	strb	r6, [r4, #0]
10012b58:	3e04      	subs	r6, #4
10012b5a:	7066      	strb	r6, [r4, #1]
10012b5c:	70a6      	strb	r6, [r4, #2]
10012b5e:	8816      	ldrh	r6, [r2, #0]
10012b60:	8812      	ldrh	r2, [r2, #0]
10012b62:	7220      	strb	r0, [r4, #8]
10012b64:	0a12      	lsrs	r2, r2, #8
10012b66:	7162      	strb	r2, [r4, #5]
10012b68:	4a11      	ldr	r2, [pc, #68]	; (10012bb0 <gattc_send_evt_cmd_handler+0x68>)
10012b6a:	7321      	strb	r1, [r4, #12]
10012b6c:	8812      	ldrh	r2, [r2, #0]
10012b6e:	73a5      	strb	r5, [r4, #14]
10012b70:	3201      	adds	r2, #1
10012b72:	7262      	strb	r2, [r4, #9]
10012b74:	1212      	asrs	r2, r2, #8
10012b76:	72a2      	strb	r2, [r4, #10]
10012b78:	2200      	movs	r2, #0
10012b7a:	72e2      	strb	r2, [r4, #11]
10012b7c:	0a0a      	lsrs	r2, r1, #8
10012b7e:	7362      	strb	r2, [r4, #13]
10012b80:	0a2a      	lsrs	r2, r5, #8
10012b82:	73e2      	strb	r2, [r4, #15]
10012b84:	1c19      	adds	r1, r3, #0
10012b86:	1c2a      	adds	r2, r5, #0
10012b88:	4b0a      	ldr	r3, [pc, #40]	; (10012bb4 <gattc_send_evt_cmd_handler+0x6c>)
10012b8a:	3510      	adds	r5, #16
10012b8c:	480a      	ldr	r0, [pc, #40]	; (10012bb8 <gattc_send_evt_cmd_handler+0x70>)
10012b8e:	7126      	strb	r6, [r4, #4]
10012b90:	4798      	blx	r3
10012b92:	b2a9      	uxth	r1, r5
10012b94:	1c0b      	adds	r3, r1, #0
10012b96:	3b08      	subs	r3, #8
10012b98:	71a3      	strb	r3, [r4, #6]
10012b9a:	121b      	asrs	r3, r3, #8
10012b9c:	71e3      	strb	r3, [r4, #7]
10012b9e:	1c20      	adds	r0, r4, #0
10012ba0:	4b06      	ldr	r3, [pc, #24]	; (10012bbc <gattc_send_evt_cmd_handler+0x74>)
10012ba2:	4798      	blx	r3
10012ba4:	bd70      	pop	{r4, r5, r6, pc}
10012ba6:	46c0      	nop			; (mov r8, r8)
10012ba8:	1001b348 	.word	0x1001b348
10012bac:	1001afd8 	.word	0x1001afd8
10012bb0:	1001a170 	.word	0x1001a170
10012bb4:	10015227 	.word	0x10015227
10012bb8:	1001b358 	.word	0x1001b358
10012bbc:	10011791 	.word	0x10011791

10012bc0 <gattc_event_cfm_handler>:
10012bc0:	220e      	movs	r2, #14
10012bc2:	b508      	push	{r3, lr}
10012bc4:	4b0b      	ldr	r3, [pc, #44]	; (10012bf4 <gattc_event_cfm_handler+0x34>)
10012bc6:	701a      	strb	r2, [r3, #0]
10012bc8:	3a02      	subs	r2, #2
10012bca:	705a      	strb	r2, [r3, #1]
10012bcc:	709a      	strb	r2, [r3, #2]
10012bce:	4a0a      	ldr	r2, [pc, #40]	; (10012bf8 <gattc_event_cfm_handler+0x38>)
10012bd0:	70d8      	strb	r0, [r3, #3]
10012bd2:	8810      	ldrh	r0, [r2, #0]
10012bd4:	8812      	ldrh	r2, [r2, #0]
10012bd6:	7219      	strb	r1, [r3, #8]
10012bd8:	0a12      	lsrs	r2, r2, #8
10012bda:	715a      	strb	r2, [r3, #5]
10012bdc:	2202      	movs	r2, #2
10012bde:	719a      	strb	r2, [r3, #6]
10012be0:	2200      	movs	r2, #0
10012be2:	0a09      	lsrs	r1, r1, #8
10012be4:	7118      	strb	r0, [r3, #4]
10012be6:	7259      	strb	r1, [r3, #9]
10012be8:	71da      	strb	r2, [r3, #7]
10012bea:	1c18      	adds	r0, r3, #0
10012bec:	210a      	movs	r1, #10
10012bee:	4b03      	ldr	r3, [pc, #12]	; (10012bfc <gattc_event_cfm_handler+0x3c>)
10012bf0:	4798      	blx	r3
10012bf2:	bd08      	pop	{r3, pc}
10012bf4:	1001b348 	.word	0x1001b348
10012bf8:	1001afd8 	.word	0x1001afd8
10012bfc:	10011791 	.word	0x10011791

10012c00 <gattc_disc_svc_ind_parser>:
10012c00:	b570      	push	{r4, r5, r6, lr}
10012c02:	1c15      	adds	r5, r2, #0
10012c04:	0a00      	lsrs	r0, r0, #8
10012c06:	8010      	strh	r0, [r2, #0]
10012c08:	784b      	ldrb	r3, [r1, #1]
10012c0a:	780a      	ldrb	r2, [r1, #0]
10012c0c:	021b      	lsls	r3, r3, #8
10012c0e:	4313      	orrs	r3, r2
10012c10:	806b      	strh	r3, [r5, #2]
10012c12:	78cb      	ldrb	r3, [r1, #3]
10012c14:	788a      	ldrb	r2, [r1, #2]
10012c16:	021b      	lsls	r3, r3, #8
10012c18:	4313      	orrs	r3, r2
10012c1a:	80ab      	strh	r3, [r5, #4]
10012c1c:	790e      	ldrb	r6, [r1, #4]
10012c1e:	4b05      	ldr	r3, [pc, #20]	; (10012c34 <gattc_disc_svc_ind_parser+0x34>)
10012c20:	1c30      	adds	r0, r6, #0
10012c22:	1c0c      	adds	r4, r1, #0
10012c24:	4798      	blx	r3
10012c26:	1c32      	adds	r2, r6, #0
10012c28:	71a8      	strb	r0, [r5, #6]
10012c2a:	1d61      	adds	r1, r4, #5
10012c2c:	1de8      	adds	r0, r5, #7
10012c2e:	4b02      	ldr	r3, [pc, #8]	; (10012c38 <gattc_disc_svc_ind_parser+0x38>)
10012c30:	4798      	blx	r3
10012c32:	bd70      	pop	{r4, r5, r6, pc}
10012c34:	10010ad1 	.word	0x10010ad1
10012c38:	10015227 	.word	0x10015227

10012c3c <gattc_disc_svc_incl_ind_parser>:
10012c3c:	b570      	push	{r4, r5, r6, lr}
10012c3e:	1c15      	adds	r5, r2, #0
10012c40:	0a00      	lsrs	r0, r0, #8
10012c42:	8010      	strh	r0, [r2, #0]
10012c44:	784b      	ldrb	r3, [r1, #1]
10012c46:	780a      	ldrb	r2, [r1, #0]
10012c48:	021b      	lsls	r3, r3, #8
10012c4a:	4313      	orrs	r3, r2
10012c4c:	806b      	strh	r3, [r5, #2]
10012c4e:	78cb      	ldrb	r3, [r1, #3]
10012c50:	788a      	ldrb	r2, [r1, #2]
10012c52:	021b      	lsls	r3, r3, #8
10012c54:	4313      	orrs	r3, r2
10012c56:	80ab      	strh	r3, [r5, #4]
10012c58:	794b      	ldrb	r3, [r1, #5]
10012c5a:	790a      	ldrb	r2, [r1, #4]
10012c5c:	021b      	lsls	r3, r3, #8
10012c5e:	4313      	orrs	r3, r2
10012c60:	80eb      	strh	r3, [r5, #6]
10012c62:	798e      	ldrb	r6, [r1, #6]
10012c64:	4b05      	ldr	r3, [pc, #20]	; (10012c7c <gattc_disc_svc_incl_ind_parser+0x40>)
10012c66:	1c30      	adds	r0, r6, #0
10012c68:	1c0c      	adds	r4, r1, #0
10012c6a:	4798      	blx	r3
10012c6c:	7228      	strb	r0, [r5, #8]
10012c6e:	1c28      	adds	r0, r5, #0
10012c70:	1c32      	adds	r2, r6, #0
10012c72:	1de1      	adds	r1, r4, #7
10012c74:	4b02      	ldr	r3, [pc, #8]	; (10012c80 <gattc_disc_svc_incl_ind_parser+0x44>)
10012c76:	3009      	adds	r0, #9
10012c78:	4798      	blx	r3
10012c7a:	bd70      	pop	{r4, r5, r6, pc}
10012c7c:	10010ad1 	.word	0x10010ad1
10012c80:	10015227 	.word	0x10015227

10012c84 <gattc_disc_char_ind_parser>:
10012c84:	b570      	push	{r4, r5, r6, lr}
10012c86:	1c15      	adds	r5, r2, #0
10012c88:	0a00      	lsrs	r0, r0, #8
10012c8a:	8010      	strh	r0, [r2, #0]
10012c8c:	784b      	ldrb	r3, [r1, #1]
10012c8e:	780a      	ldrb	r2, [r1, #0]
10012c90:	021b      	lsls	r3, r3, #8
10012c92:	4313      	orrs	r3, r2
10012c94:	806b      	strh	r3, [r5, #2]
10012c96:	78cb      	ldrb	r3, [r1, #3]
10012c98:	788a      	ldrb	r2, [r1, #2]
10012c9a:	021b      	lsls	r3, r3, #8
10012c9c:	4313      	orrs	r3, r2
10012c9e:	80ab      	strh	r3, [r5, #4]
10012ca0:	790b      	ldrb	r3, [r1, #4]
10012ca2:	1c0c      	adds	r4, r1, #0
10012ca4:	71ab      	strb	r3, [r5, #6]
10012ca6:	794e      	ldrb	r6, [r1, #5]
10012ca8:	4b05      	ldr	r3, [pc, #20]	; (10012cc0 <gattc_disc_char_ind_parser+0x3c>)
10012caa:	1c30      	adds	r0, r6, #0
10012cac:	4798      	blx	r3
10012cae:	71e8      	strb	r0, [r5, #7]
10012cb0:	1c28      	adds	r0, r5, #0
10012cb2:	1c32      	adds	r2, r6, #0
10012cb4:	1da1      	adds	r1, r4, #6
10012cb6:	4b03      	ldr	r3, [pc, #12]	; (10012cc4 <gattc_disc_char_ind_parser+0x40>)
10012cb8:	3008      	adds	r0, #8
10012cba:	4798      	blx	r3
10012cbc:	bd70      	pop	{r4, r5, r6, pc}
10012cbe:	46c0      	nop			; (mov r8, r8)
10012cc0:	10010ad1 	.word	0x10010ad1
10012cc4:	10015227 	.word	0x10015227

10012cc8 <gattc_disc_char_desc_ind_parser>:
10012cc8:	b570      	push	{r4, r5, r6, lr}
10012cca:	1c15      	adds	r5, r2, #0
10012ccc:	0a00      	lsrs	r0, r0, #8
10012cce:	8010      	strh	r0, [r2, #0]
10012cd0:	784b      	ldrb	r3, [r1, #1]
10012cd2:	780a      	ldrb	r2, [r1, #0]
10012cd4:	021b      	lsls	r3, r3, #8
10012cd6:	4313      	orrs	r3, r2
10012cd8:	806b      	strh	r3, [r5, #2]
10012cda:	788e      	ldrb	r6, [r1, #2]
10012cdc:	4b05      	ldr	r3, [pc, #20]	; (10012cf4 <gattc_disc_char_desc_ind_parser+0x2c>)
10012cde:	1c30      	adds	r0, r6, #0
10012ce0:	1c0c      	adds	r4, r1, #0
10012ce2:	4798      	blx	r3
10012ce4:	1c32      	adds	r2, r6, #0
10012ce6:	7128      	strb	r0, [r5, #4]
10012ce8:	1ce1      	adds	r1, r4, #3
10012cea:	1d68      	adds	r0, r5, #5
10012cec:	4b02      	ldr	r3, [pc, #8]	; (10012cf8 <gattc_disc_char_desc_ind_parser+0x30>)
10012cee:	4798      	blx	r3
10012cf0:	bd70      	pop	{r4, r5, r6, pc}
10012cf2:	46c0      	nop			; (mov r8, r8)
10012cf4:	10010ad1 	.word	0x10010ad1
10012cf8:	10015227 	.word	0x10015227

10012cfc <gattc_event_ind_and_notification_parser>:
10012cfc:	b510      	push	{r4, lr}
10012cfe:	780c      	ldrb	r4, [r1, #0]
10012d00:	1c13      	adds	r3, r2, #0
10012d02:	2c12      	cmp	r4, #18
10012d04:	d10e      	bne.n	10012d24 <gattc_event_ind_and_notification_parser+0x28>
10012d06:	0a00      	lsrs	r0, r0, #8
10012d08:	8010      	strh	r0, [r2, #0]
10012d0a:	788a      	ldrb	r2, [r1, #2]
10012d0c:	709a      	strb	r2, [r3, #2]
10012d0e:	7948      	ldrb	r0, [r1, #5]
10012d10:	790c      	ldrb	r4, [r1, #4]
10012d12:	0200      	lsls	r0, r0, #8
10012d14:	4320      	orrs	r0, r4
10012d16:	8098      	strh	r0, [r3, #4]
10012d18:	3106      	adds	r1, #6
10012d1a:	1d98      	adds	r0, r3, #6
10012d1c:	4b0b      	ldr	r3, [pc, #44]	; (10012d4c <gattc_event_ind_and_notification_parser+0x50>)
10012d1e:	4798      	blx	r3
10012d20:	221b      	movs	r2, #27
10012d22:	e010      	b.n	10012d46 <gattc_event_ind_and_notification_parser+0x4a>
10012d24:	2200      	movs	r2, #0
10012d26:	2c13      	cmp	r4, #19
10012d28:	d10d      	bne.n	10012d46 <gattc_event_ind_and_notification_parser+0x4a>
10012d2a:	0a00      	lsrs	r0, r0, #8
10012d2c:	8018      	strh	r0, [r3, #0]
10012d2e:	788a      	ldrb	r2, [r1, #2]
10012d30:	709a      	strb	r2, [r3, #2]
10012d32:	7908      	ldrb	r0, [r1, #4]
10012d34:	78cc      	ldrb	r4, [r1, #3]
10012d36:	0200      	lsls	r0, r0, #8
10012d38:	4320      	orrs	r0, r4
10012d3a:	8098      	strh	r0, [r3, #4]
10012d3c:	3106      	adds	r1, #6
10012d3e:	1d98      	adds	r0, r3, #6
10012d40:	4b02      	ldr	r3, [pc, #8]	; (10012d4c <gattc_event_ind_and_notification_parser+0x50>)
10012d42:	4798      	blx	r3
10012d44:	221c      	movs	r2, #28
10012d46:	1c10      	adds	r0, r2, #0
10012d48:	bd10      	pop	{r4, pc}
10012d4a:	46c0      	nop			; (mov r8, r8)
10012d4c:	10015227 	.word	0x10015227

10012d50 <gattc_complete_evt_handler>:
10012d50:	b500      	push	{lr}
10012d52:	0a00      	lsrs	r0, r0, #8
10012d54:	8010      	strh	r0, [r2, #0]
10012d56:	7808      	ldrb	r0, [r1, #0]
10012d58:	7090      	strb	r0, [r2, #2]
10012d5a:	784b      	ldrb	r3, [r1, #1]
10012d5c:	3801      	subs	r0, #1
10012d5e:	70d3      	strb	r3, [r2, #3]
10012d60:	2813      	cmp	r0, #19
10012d62:	d82c      	bhi.n	10012dbe <gattc_complete_evt_handler+0x6e>
10012d64:	f000 f9dc 	bl	10013120 <__gnu_thumb1_case_uqi>
10012d68:	0a0a0a0c 	.word	0x0a0a0a0c
10012d6c:	210a0a0a 	.word	0x210a0a0a
10012d70:	111f2121 	.word	0x111f2121
10012d74:	2b111111 	.word	0x2b111111
10012d78:	2919132b 	.word	0x2919132b
10012d7c:	2017      	movs	r0, #23
10012d7e:	e01f      	b.n	10012dc0 <gattc_complete_evt_handler+0x70>
10012d80:	2024      	movs	r0, #36	; 0x24
10012d82:	2b00      	cmp	r3, #0
10012d84:	d11c      	bne.n	10012dc0 <gattc_complete_evt_handler+0x70>
10012d86:	3017      	adds	r0, #23
10012d88:	e01a      	b.n	10012dc0 <gattc_complete_evt_handler+0x70>
10012d8a:	2025      	movs	r0, #37	; 0x25
10012d8c:	e018      	b.n	10012dc0 <gattc_complete_evt_handler+0x70>
10012d8e:	4a0d      	ldr	r2, [pc, #52]	; (10012dc4 <gattc_complete_evt_handler+0x74>)
10012d90:	201d      	movs	r0, #29
10012d92:	6813      	ldr	r3, [r2, #0]
10012d94:	3b01      	subs	r3, #1
10012d96:	6013      	str	r3, [r2, #0]
10012d98:	e012      	b.n	10012dc0 <gattc_complete_evt_handler+0x70>
10012d9a:	4a0a      	ldr	r2, [pc, #40]	; (10012dc4 <gattc_complete_evt_handler+0x74>)
10012d9c:	201e      	movs	r0, #30
10012d9e:	6813      	ldr	r3, [r2, #0]
10012da0:	3b01      	subs	r3, #1
10012da2:	6013      	str	r3, [r2, #0]
10012da4:	e00c      	b.n	10012dc0 <gattc_complete_evt_handler+0x70>
10012da6:	2019      	movs	r0, #25
10012da8:	e00a      	b.n	10012dc0 <gattc_complete_evt_handler+0x70>
10012daa:	203b      	movs	r0, #59	; 0x3b
10012dac:	2b00      	cmp	r3, #0
10012dae:	d007      	beq.n	10012dc0 <gattc_complete_evt_handler+0x70>
10012db0:	2182      	movs	r1, #130	; 0x82
10012db2:	0089      	lsls	r1, r1, #2
10012db4:	5453      	strb	r3, [r2, r1]
10012db6:	3823      	subs	r0, #35	; 0x23
10012db8:	e002      	b.n	10012dc0 <gattc_complete_evt_handler+0x70>
10012dba:	2021      	movs	r0, #33	; 0x21
10012dbc:	e000      	b.n	10012dc0 <gattc_complete_evt_handler+0x70>
10012dbe:	2000      	movs	r0, #0
10012dc0:	bd00      	pop	{pc}
10012dc2:	46c0      	nop			; (mov r8, r8)
10012dc4:	1001a174 	.word	0x1001a174

10012dc8 <gattc_event_mtu_changed_ind_parser>:
10012dc8:	0a00      	lsrs	r0, r0, #8
10012dca:	8010      	strh	r0, [r2, #0]
10012dcc:	784b      	ldrb	r3, [r1, #1]
10012dce:	7809      	ldrb	r1, [r1, #0]
10012dd0:	021b      	lsls	r3, r3, #8
10012dd2:	430b      	orrs	r3, r1
10012dd4:	8053      	strh	r3, [r2, #2]
10012dd6:	4770      	bx	lr

10012dd8 <gattc_read_ind_parser>:
10012dd8:	0a00      	lsrs	r0, r0, #8
10012dda:	b508      	push	{r3, lr}
10012ddc:	8010      	strh	r0, [r2, #0]
10012dde:	1c13      	adds	r3, r2, #0
10012de0:	2282      	movs	r2, #130	; 0x82
10012de2:	2000      	movs	r0, #0
10012de4:	0092      	lsls	r2, r2, #2
10012de6:	5498      	strb	r0, [r3, r2]
10012de8:	784a      	ldrb	r2, [r1, #1]
10012dea:	7808      	ldrb	r0, [r1, #0]
10012dec:	0212      	lsls	r2, r2, #8
10012dee:	4302      	orrs	r2, r0
10012df0:	805a      	strh	r2, [r3, #2]
10012df2:	78ca      	ldrb	r2, [r1, #3]
10012df4:	7888      	ldrb	r0, [r1, #2]
10012df6:	0212      	lsls	r2, r2, #8
10012df8:	4302      	orrs	r2, r0
10012dfa:	80da      	strh	r2, [r3, #6]
10012dfc:	794a      	ldrb	r2, [r1, #5]
10012dfe:	7908      	ldrb	r0, [r1, #4]
10012e00:	0212      	lsls	r2, r2, #8
10012e02:	4302      	orrs	r2, r0
10012e04:	809a      	strh	r2, [r3, #4]
10012e06:	3308      	adds	r3, #8
10012e08:	1c18      	adds	r0, r3, #0
10012e0a:	3106      	adds	r1, #6
10012e0c:	4b01      	ldr	r3, [pc, #4]	; (10012e14 <gattc_read_ind_parser+0x3c>)
10012e0e:	4798      	blx	r3
10012e10:	bd08      	pop	{r3, pc}
10012e12:	46c0      	nop			; (mov r8, r8)
10012e14:	10015227 	.word	0x10015227

10012e18 <gattc_svc_changed_cfg_ind_parser>:
10012e18:	0a00      	lsrs	r0, r0, #8
10012e1a:	8010      	strh	r0, [r2, #0]
10012e1c:	784b      	ldrb	r3, [r1, #1]
10012e1e:	7809      	ldrb	r1, [r1, #0]
10012e20:	021b      	lsls	r3, r3, #8
10012e22:	430b      	orrs	r3, r1
10012e24:	8053      	strh	r3, [r2, #2]
10012e26:	4770      	bx	lr

10012e28 <init_gattc_task_module>:
10012e28:	2300      	movs	r3, #0
10012e2a:	4a02      	ldr	r2, [pc, #8]	; (10012e34 <init_gattc_task_module+0xc>)
10012e2c:	8013      	strh	r3, [r2, #0]
10012e2e:	4a02      	ldr	r2, [pc, #8]	; (10012e38 <init_gattc_task_module+0x10>)
10012e30:	8013      	strh	r3, [r2, #0]
10012e32:	4770      	bx	lr
10012e34:	1001a16e 	.word	0x1001a16e
10012e38:	1001a170 	.word	0x1001a170

10012e3c <gattm_add_svc_req_handler>:
10012e3c:	2200      	movs	r2, #0
10012e3e:	210b      	movs	r1, #11
10012e40:	b5f0      	push	{r4, r5, r6, r7, lr}
10012e42:	1c04      	adds	r4, r0, #0
10012e44:	7943      	ldrb	r3, [r0, #5]
10012e46:	b085      	sub	sp, #20
10012e48:	9301      	str	r3, [sp, #4]
10012e4a:	ab02      	add	r3, sp, #8
10012e4c:	71da      	strb	r2, [r3, #7]
10012e4e:	4b37      	ldr	r3, [pc, #220]	; (10012f2c <gattm_add_svc_req_handler+0xf0>)
10012e50:	7059      	strb	r1, [r3, #1]
10012e52:	7099      	strb	r1, [r3, #2]
10012e54:	4936      	ldr	r1, [pc, #216]	; (10012f30 <gattm_add_svc_req_handler+0xf4>)
10012e56:	701a      	strb	r2, [r3, #0]
10012e58:	8808      	ldrh	r0, [r1, #0]
10012e5a:	8809      	ldrh	r1, [r1, #0]
10012e5c:	70da      	strb	r2, [r3, #3]
10012e5e:	0a09      	lsrs	r1, r1, #8
10012e60:	7118      	strb	r0, [r3, #4]
10012e62:	7159      	strb	r1, [r3, #5]
10012e64:	8821      	ldrh	r1, [r4, #0]
10012e66:	7219      	strb	r1, [r3, #8]
10012e68:	8821      	ldrh	r1, [r4, #0]
10012e6a:	0a09      	lsrs	r1, r1, #8
10012e6c:	7259      	strb	r1, [r3, #9]
10012e6e:	8861      	ldrh	r1, [r4, #2]
10012e70:	7299      	strb	r1, [r3, #10]
10012e72:	8861      	ldrh	r1, [r4, #2]
10012e74:	0a09      	lsrs	r1, r1, #8
10012e76:	72d9      	strb	r1, [r3, #11]
10012e78:	7921      	ldrb	r1, [r4, #4]
10012e7a:	7319      	strb	r1, [r3, #12]
10012e7c:	4669      	mov	r1, sp
10012e7e:	7909      	ldrb	r1, [r1, #4]
10012e80:	7359      	strb	r1, [r3, #13]
10012e82:	18a1      	adds	r1, r4, r2
10012e84:	7988      	ldrb	r0, [r1, #6]
10012e86:	1899      	adds	r1, r3, r2
10012e88:	3201      	adds	r2, #1
10012e8a:	7388      	strb	r0, [r1, #14]
10012e8c:	2a10      	cmp	r2, #16
10012e8e:	d1f8      	bne.n	10012e82 <gattm_add_svc_req_handler+0x46>
10012e90:	1c27      	adds	r7, r4, #0
10012e92:	2300      	movs	r3, #0
10012e94:	251e      	movs	r5, #30
10012e96:	3716      	adds	r7, #22
10012e98:	9300      	str	r3, [sp, #0]
10012e9a:	9b00      	ldr	r3, [sp, #0]
10012e9c:	9a01      	ldr	r2, [sp, #4]
10012e9e:	4e23      	ldr	r6, [pc, #140]	; (10012f2c <gattm_add_svc_req_handler+0xf0>)
10012ea0:	4293      	cmp	r3, r2
10012ea2:	da21      	bge.n	10012ee8 <gattm_add_svc_req_handler+0xac>
10012ea4:	1c39      	adds	r1, r7, #0
10012ea6:	1970      	adds	r0, r6, r5
10012ea8:	2210      	movs	r2, #16
10012eaa:	4b22      	ldr	r3, [pc, #136]	; (10012f34 <gattm_add_svc_req_handler+0xf8>)
10012eac:	4798      	blx	r3
10012eae:	1c2b      	adds	r3, r5, #0
10012eb0:	8a3a      	ldrh	r2, [r7, #16]
10012eb2:	3310      	adds	r3, #16
10012eb4:	b29b      	uxth	r3, r3
10012eb6:	54f2      	strb	r2, [r6, r3]
10012eb8:	1c2b      	adds	r3, r5, #0
10012eba:	8a3a      	ldrh	r2, [r7, #16]
10012ebc:	3311      	adds	r3, #17
10012ebe:	b29b      	uxth	r3, r3
10012ec0:	0a12      	lsrs	r2, r2, #8
10012ec2:	54f2      	strb	r2, [r6, r3]
10012ec4:	1c2a      	adds	r2, r5, #0
10012ec6:	1c2b      	adds	r3, r5, #0
10012ec8:	8a79      	ldrh	r1, [r7, #18]
10012eca:	3212      	adds	r2, #18
10012ecc:	b292      	uxth	r2, r2
10012ece:	54b1      	strb	r1, [r6, r2]
10012ed0:	8a7a      	ldrh	r2, [r7, #18]
10012ed2:	3313      	adds	r3, #19
10012ed4:	b29b      	uxth	r3, r3
10012ed6:	0a12      	lsrs	r2, r2, #8
10012ed8:	54f2      	strb	r2, [r6, r3]
10012eda:	9b00      	ldr	r3, [sp, #0]
10012edc:	3514      	adds	r5, #20
10012ede:	3301      	adds	r3, #1
10012ee0:	b2ad      	uxth	r5, r5
10012ee2:	9300      	str	r3, [sp, #0]
10012ee4:	3714      	adds	r7, #20
10012ee6:	e7d8      	b.n	10012e9a <gattm_add_svc_req_handler+0x5e>
10012ee8:	2114      	movs	r1, #20
10012eea:	4d13      	ldr	r5, [pc, #76]	; (10012f38 <gattm_add_svc_req_handler+0xfc>)
10012eec:	4b13      	ldr	r3, [pc, #76]	; (10012f3c <gattm_add_svc_req_handler+0x100>)
10012eee:	4351      	muls	r1, r2
10012ef0:	802b      	strh	r3, [r5, #0]
10012ef2:	230b      	movs	r3, #11
10012ef4:	311e      	adds	r1, #30
10012ef6:	80ab      	strh	r3, [r5, #4]
10012ef8:	1c0b      	adds	r3, r1, #0
10012efa:	3b08      	subs	r3, #8
10012efc:	71b3      	strb	r3, [r6, #6]
10012efe:	121b      	asrs	r3, r3, #8
10012f00:	71f3      	strb	r3, [r6, #7]
10012f02:	1c30      	adds	r0, r6, #0
10012f04:	4b0e      	ldr	r3, [pc, #56]	; (10012f40 <gattm_add_svc_req_handler+0x104>)
10012f06:	4798      	blx	r3
10012f08:	ab02      	add	r3, sp, #8
10012f0a:	1dde      	adds	r6, r3, #7
10012f0c:	1c30      	adds	r0, r6, #0
10012f0e:	4b0d      	ldr	r3, [pc, #52]	; (10012f44 <gattm_add_svc_req_handler+0x108>)
10012f10:	4798      	blx	r3
10012f12:	7833      	ldrb	r3, [r6, #0]
10012f14:	20e2      	movs	r0, #226	; 0xe2
10012f16:	2b00      	cmp	r3, #0
10012f18:	d106      	bne.n	10012f28 <gattm_add_svc_req_handler+0xec>
10012f1a:	68aa      	ldr	r2, [r5, #8]
10012f1c:	7853      	ldrb	r3, [r2, #1]
10012f1e:	7811      	ldrb	r1, [r2, #0]
10012f20:	021b      	lsls	r3, r3, #8
10012f22:	430b      	orrs	r3, r1
10012f24:	8023      	strh	r3, [r4, #0]
10012f26:	7890      	ldrb	r0, [r2, #2]
10012f28:	b005      	add	sp, #20
10012f2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
10012f2c:	1001b348 	.word	0x1001b348
10012f30:	1001afd8 	.word	0x1001afd8
10012f34:	10015227 	.word	0x10015227
10012f38:	1001afcc 	.word	0x1001afcc
10012f3c:	00000b01 	.word	0x00000b01
10012f40:	10011791 	.word	0x10011791
10012f44:	100117f5 	.word	0x100117f5

10012f48 <gattm_add_attribute_req_handler>:
10012f48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10012f4a:	1c1f      	adds	r7, r3, #0
10012f4c:	4b16      	ldr	r3, [pc, #88]	; (10012fa8 <gattm_add_attribute_req_handler+0x60>)
10012f4e:	9100      	str	r1, [sp, #0]
10012f50:	9201      	str	r2, [sp, #4]
10012f52:	1c05      	adds	r5, r0, #0
10012f54:	7946      	ldrb	r6, [r0, #5]
10012f56:	6818      	ldr	r0, [r3, #0]
10012f58:	2114      	movs	r1, #20
10012f5a:	4b14      	ldr	r3, [pc, #80]	; (10012fac <gattm_add_attribute_req_handler+0x64>)
10012f5c:	382a      	subs	r0, #42	; 0x2a
10012f5e:	4798      	blx	r3
10012f60:	2311      	movs	r3, #17
10012f62:	4286      	cmp	r6, r0
10012f64:	d21e      	bcs.n	10012fa4 <gattm_add_attribute_req_handler+0x5c>
10012f66:	2414      	movs	r4, #20
10012f68:	4366      	muls	r6, r4
10012f6a:	19a8      	adds	r0, r5, r6
10012f6c:	2100      	movs	r1, #0
10012f6e:	2210      	movs	r2, #16
10012f70:	4b0f      	ldr	r3, [pc, #60]	; (10012fb0 <gattm_add_attribute_req_handler+0x68>)
10012f72:	3016      	adds	r0, #22
10012f74:	4798      	blx	r3
10012f76:	7968      	ldrb	r0, [r5, #5]
10012f78:	1c3a      	adds	r2, r7, #0
10012f7a:	4360      	muls	r0, r4
10012f7c:	1828      	adds	r0, r5, r0
10012f7e:	4b0d      	ldr	r3, [pc, #52]	; (10012fb4 <gattm_add_attribute_req_handler+0x6c>)
10012f80:	3016      	adds	r0, #22
10012f82:	9908      	ldr	r1, [sp, #32]
10012f84:	4798      	blx	r3
10012f86:	466a      	mov	r2, sp
10012f88:	796b      	ldrb	r3, [r5, #5]
10012f8a:	8812      	ldrh	r2, [r2, #0]
10012f8c:	435c      	muls	r4, r3
10012f8e:	192c      	adds	r4, r5, r4
10012f90:	8522      	strh	r2, [r4, #40]	; 0x28
10012f92:	466a      	mov	r2, sp
10012f94:	8892      	ldrh	r2, [r2, #4]
10012f96:	84e2      	strh	r2, [r4, #38]	; 0x26
10012f98:	9a09      	ldr	r2, [sp, #36]	; 0x24
10012f9a:	8013      	strh	r3, [r2, #0]
10012f9c:	796b      	ldrb	r3, [r5, #5]
10012f9e:	3301      	adds	r3, #1
10012fa0:	716b      	strb	r3, [r5, #5]
10012fa2:	2300      	movs	r3, #0
10012fa4:	1c18      	adds	r0, r3, #0
10012fa6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10012fa8:	1001a0e4 	.word	0x1001a0e4
10012fac:	10013135 	.word	0x10013135
10012fb0:	10015239 	.word	0x10015239
10012fb4:	10015227 	.word	0x10015227

10012fb8 <gattm_att_set_value_req_handler>:
10012fb8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10012fba:	466b      	mov	r3, sp
10012fbc:	1dde      	adds	r6, r3, #7
10012fbe:	2300      	movs	r3, #0
10012fc0:	1c0d      	adds	r5, r1, #0
10012fc2:	210c      	movs	r1, #12
10012fc4:	270b      	movs	r7, #11
10012fc6:	4c17      	ldr	r4, [pc, #92]	; (10013024 <gattm_att_set_value_req_handler+0x6c>)
10012fc8:	7033      	strb	r3, [r6, #0]
10012fca:	70e3      	strb	r3, [r4, #3]
10012fcc:	4b16      	ldr	r3, [pc, #88]	; (10013028 <gattm_att_set_value_req_handler+0x70>)
10012fce:	7021      	strb	r1, [r4, #0]
10012fd0:	8819      	ldrh	r1, [r3, #0]
10012fd2:	881b      	ldrh	r3, [r3, #0]
10012fd4:	7220      	strb	r0, [r4, #8]
10012fd6:	0a1b      	lsrs	r3, r3, #8
10012fd8:	7163      	strb	r3, [r4, #5]
10012fda:	0a00      	lsrs	r0, r0, #8
10012fdc:	0a2b      	lsrs	r3, r5, #8
10012fde:	7121      	strb	r1, [r4, #4]
10012fe0:	7260      	strb	r0, [r4, #9]
10012fe2:	1c11      	adds	r1, r2, #0
10012fe4:	72a5      	strb	r5, [r4, #10]
10012fe6:	1c2a      	adds	r2, r5, #0
10012fe8:	72e3      	strb	r3, [r4, #11]
10012fea:	350c      	adds	r5, #12
10012fec:	4b0f      	ldr	r3, [pc, #60]	; (1001302c <gattm_att_set_value_req_handler+0x74>)
10012fee:	4810      	ldr	r0, [pc, #64]	; (10013030 <gattm_att_set_value_req_handler+0x78>)
10012ff0:	7067      	strb	r7, [r4, #1]
10012ff2:	70a7      	strb	r7, [r4, #2]
10012ff4:	4798      	blx	r3
10012ff6:	b2a9      	uxth	r1, r5
10012ff8:	4b0e      	ldr	r3, [pc, #56]	; (10013034 <gattm_att_set_value_req_handler+0x7c>)
10012ffa:	4d0f      	ldr	r5, [pc, #60]	; (10013038 <gattm_att_set_value_req_handler+0x80>)
10012ffc:	1c20      	adds	r0, r4, #0
10012ffe:	802b      	strh	r3, [r5, #0]
10013000:	1c0b      	adds	r3, r1, #0
10013002:	3b08      	subs	r3, #8
10013004:	71a3      	strb	r3, [r4, #6]
10013006:	121b      	asrs	r3, r3, #8
10013008:	71e3      	strb	r3, [r4, #7]
1001300a:	4b0c      	ldr	r3, [pc, #48]	; (1001303c <gattm_att_set_value_req_handler+0x84>)
1001300c:	80af      	strh	r7, [r5, #4]
1001300e:	4798      	blx	r3
10013010:	1c30      	adds	r0, r6, #0
10013012:	4b0b      	ldr	r3, [pc, #44]	; (10013040 <gattm_att_set_value_req_handler+0x88>)
10013014:	4798      	blx	r3
10013016:	7833      	ldrb	r3, [r6, #0]
10013018:	20e2      	movs	r0, #226	; 0xe2
1001301a:	2b00      	cmp	r3, #0
1001301c:	d101      	bne.n	10013022 <gattm_att_set_value_req_handler+0x6a>
1001301e:	68ab      	ldr	r3, [r5, #8]
10013020:	7898      	ldrb	r0, [r3, #2]
10013022:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10013024:	1001b348 	.word	0x1001b348
10013028:	1001afd8 	.word	0x1001afd8
1001302c:	10015227 	.word	0x10015227
10013030:	1001b354 	.word	0x1001b354
10013034:	00000b0d 	.word	0x00000b0d
10013038:	1001afcc 	.word	0x1001afcc
1001303c:	10011791 	.word	0x10011791
10013040:	100117f5 	.word	0x100117f5

10013044 <gattm_att_get_value_req_handler>:
10013044:	b5f0      	push	{r4, r5, r6, r7, lr}
10013046:	b085      	sub	sp, #20
10013048:	9201      	str	r2, [sp, #4]
1001304a:	220a      	movs	r2, #10
1001304c:	1c04      	adds	r4, r0, #0
1001304e:	481d      	ldr	r0, [pc, #116]	; (100130c4 <gattm_att_get_value_req_handler+0x80>)
10013050:	ab02      	add	r3, sp, #8
10013052:	1dde      	adds	r6, r3, #7
10013054:	7002      	strb	r2, [r0, #0]
10013056:	2300      	movs	r3, #0
10013058:	220b      	movs	r2, #11
1001305a:	4d1b      	ldr	r5, [pc, #108]	; (100130c8 <gattm_att_get_value_req_handler+0x84>)
1001305c:	1c0f      	adds	r7, r1, #0
1001305e:	8829      	ldrh	r1, [r5, #0]
10013060:	882d      	ldrh	r5, [r5, #0]
10013062:	7101      	strb	r1, [r0, #4]
10013064:	0a2d      	lsrs	r5, r5, #8
10013066:	7145      	strb	r5, [r0, #5]
10013068:	0a25      	lsrs	r5, r4, #8
1001306a:	7245      	strb	r5, [r0, #9]
1001306c:	4917      	ldr	r1, [pc, #92]	; (100130cc <gattm_att_get_value_req_handler+0x88>)
1001306e:	4d18      	ldr	r5, [pc, #96]	; (100130d0 <gattm_att_get_value_req_handler+0x8c>)
10013070:	7033      	strb	r3, [r6, #0]
10013072:	7042      	strb	r2, [r0, #1]
10013074:	7082      	strb	r2, [r0, #2]
10013076:	70c3      	strb	r3, [r0, #3]
10013078:	8029      	strh	r1, [r5, #0]
1001307a:	80aa      	strh	r2, [r5, #4]
1001307c:	71c3      	strb	r3, [r0, #7]
1001307e:	3a09      	subs	r2, #9
10013080:	210a      	movs	r1, #10
10013082:	4b14      	ldr	r3, [pc, #80]	; (100130d4 <gattm_att_get_value_req_handler+0x90>)
10013084:	7182      	strb	r2, [r0, #6]
10013086:	7204      	strb	r4, [r0, #8]
10013088:	4798      	blx	r3
1001308a:	1c30      	adds	r0, r6, #0
1001308c:	4b12      	ldr	r3, [pc, #72]	; (100130d8 <gattm_att_get_value_req_handler+0x94>)
1001308e:	4798      	blx	r3
10013090:	7833      	ldrb	r3, [r6, #0]
10013092:	20e2      	movs	r0, #226	; 0xe2
10013094:	2b00      	cmp	r3, #0
10013096:	d112      	bne.n	100130be <gattm_att_get_value_req_handler+0x7a>
10013098:	68a9      	ldr	r1, [r5, #8]
1001309a:	9801      	ldr	r0, [sp, #4]
1001309c:	784d      	ldrb	r5, [r1, #1]
1001309e:	780b      	ldrb	r3, [r1, #0]
100130a0:	78ca      	ldrb	r2, [r1, #3]
100130a2:	022d      	lsls	r5, r5, #8
100130a4:	431d      	orrs	r5, r3
100130a6:	788b      	ldrb	r3, [r1, #2]
100130a8:	0212      	lsls	r2, r2, #8
100130aa:	431a      	orrs	r2, r3
100130ac:	803a      	strh	r2, [r7, #0]
100130ae:	790e      	ldrb	r6, [r1, #4]
100130b0:	4b0a      	ldr	r3, [pc, #40]	; (100130dc <gattm_att_get_value_req_handler+0x98>)
100130b2:	3105      	adds	r1, #5
100130b4:	4798      	blx	r3
100130b6:	20e2      	movs	r0, #226	; 0xe2
100130b8:	42ac      	cmp	r4, r5
100130ba:	d100      	bne.n	100130be <gattm_att_get_value_req_handler+0x7a>
100130bc:	1c30      	adds	r0, r6, #0
100130be:	b005      	add	sp, #20
100130c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
100130c2:	46c0      	nop			; (mov r8, r8)
100130c4:	1001b348 	.word	0x1001b348
100130c8:	1001afd8 	.word	0x1001afd8
100130cc:	00000b0b 	.word	0x00000b0b
100130d0:	1001afcc 	.word	0x1001afcc
100130d4:	10011791 	.word	0x10011791
100130d8:	100117f5 	.word	0x100117f5
100130dc:	10015227 	.word	0x10015227

100130e0 <htpt_enable_rsp_handler>:
100130e0:	780b      	ldrb	r3, [r1, #0]
100130e2:	7013      	strb	r3, [r2, #0]
100130e4:	784b      	ldrb	r3, [r1, #1]
100130e6:	7053      	strb	r3, [r2, #1]
100130e8:	4770      	bx	lr

100130ea <htpt_temp_send_rsp_handler>:
100130ea:	780b      	ldrb	r3, [r1, #0]
100130ec:	7013      	strb	r3, [r2, #0]
100130ee:	4770      	bx	lr

100130f0 <htpt_meas_intv_upd_rsp_handler>:
100130f0:	780b      	ldrb	r3, [r1, #0]
100130f2:	7013      	strb	r3, [r2, #0]
100130f4:	4770      	bx	lr

100130f6 <htpt_meas_intv_chg_req_ind_handler>:
100130f6:	78cb      	ldrb	r3, [r1, #3]
100130f8:	7889      	ldrb	r1, [r1, #2]
100130fa:	021b      	lsls	r3, r3, #8
100130fc:	430b      	orrs	r3, r1
100130fe:	8013      	strh	r3, [r2, #0]
10013100:	4770      	bx	lr

10013102 <htpt_cfg_indntf_ind_handler>:
10013102:	780b      	ldrb	r3, [r1, #0]
10013104:	7013      	strb	r3, [r2, #0]
10013106:	784b      	ldrb	r3, [r1, #1]
10013108:	7053      	strb	r3, [r2, #1]
1001310a:	4770      	bx	lr

1001310c <__gnu_thumb1_case_sqi>:
1001310c:	b402      	push	{r1}
1001310e:	4671      	mov	r1, lr
10013110:	0849      	lsrs	r1, r1, #1
10013112:	0049      	lsls	r1, r1, #1
10013114:	5609      	ldrsb	r1, [r1, r0]
10013116:	0049      	lsls	r1, r1, #1
10013118:	448e      	add	lr, r1
1001311a:	bc02      	pop	{r1}
1001311c:	4770      	bx	lr
1001311e:	46c0      	nop			; (mov r8, r8)

10013120 <__gnu_thumb1_case_uqi>:
10013120:	b402      	push	{r1}
10013122:	4671      	mov	r1, lr
10013124:	0849      	lsrs	r1, r1, #1
10013126:	0049      	lsls	r1, r1, #1
10013128:	5c09      	ldrb	r1, [r1, r0]
1001312a:	0049      	lsls	r1, r1, #1
1001312c:	448e      	add	lr, r1
1001312e:	bc02      	pop	{r1}
10013130:	4770      	bx	lr
10013132:	46c0      	nop			; (mov r8, r8)

10013134 <__aeabi_uidiv>:
10013134:	2200      	movs	r2, #0
10013136:	0843      	lsrs	r3, r0, #1
10013138:	428b      	cmp	r3, r1
1001313a:	d374      	bcc.n	10013226 <__aeabi_uidiv+0xf2>
1001313c:	0903      	lsrs	r3, r0, #4
1001313e:	428b      	cmp	r3, r1
10013140:	d35f      	bcc.n	10013202 <__aeabi_uidiv+0xce>
10013142:	0a03      	lsrs	r3, r0, #8
10013144:	428b      	cmp	r3, r1
10013146:	d344      	bcc.n	100131d2 <__aeabi_uidiv+0x9e>
10013148:	0b03      	lsrs	r3, r0, #12
1001314a:	428b      	cmp	r3, r1
1001314c:	d328      	bcc.n	100131a0 <__aeabi_uidiv+0x6c>
1001314e:	0c03      	lsrs	r3, r0, #16
10013150:	428b      	cmp	r3, r1
10013152:	d30d      	bcc.n	10013170 <__aeabi_uidiv+0x3c>
10013154:	22ff      	movs	r2, #255	; 0xff
10013156:	0209      	lsls	r1, r1, #8
10013158:	ba12      	rev	r2, r2
1001315a:	0c03      	lsrs	r3, r0, #16
1001315c:	428b      	cmp	r3, r1
1001315e:	d302      	bcc.n	10013166 <__aeabi_uidiv+0x32>
10013160:	1212      	asrs	r2, r2, #8
10013162:	0209      	lsls	r1, r1, #8
10013164:	d065      	beq.n	10013232 <__aeabi_uidiv+0xfe>
10013166:	0b03      	lsrs	r3, r0, #12
10013168:	428b      	cmp	r3, r1
1001316a:	d319      	bcc.n	100131a0 <__aeabi_uidiv+0x6c>
1001316c:	e000      	b.n	10013170 <__aeabi_uidiv+0x3c>
1001316e:	0a09      	lsrs	r1, r1, #8
10013170:	0bc3      	lsrs	r3, r0, #15
10013172:	428b      	cmp	r3, r1
10013174:	d301      	bcc.n	1001317a <__aeabi_uidiv+0x46>
10013176:	03cb      	lsls	r3, r1, #15
10013178:	1ac0      	subs	r0, r0, r3
1001317a:	4152      	adcs	r2, r2
1001317c:	0b83      	lsrs	r3, r0, #14
1001317e:	428b      	cmp	r3, r1
10013180:	d301      	bcc.n	10013186 <__aeabi_uidiv+0x52>
10013182:	038b      	lsls	r3, r1, #14
10013184:	1ac0      	subs	r0, r0, r3
10013186:	4152      	adcs	r2, r2
10013188:	0b43      	lsrs	r3, r0, #13
1001318a:	428b      	cmp	r3, r1
1001318c:	d301      	bcc.n	10013192 <__aeabi_uidiv+0x5e>
1001318e:	034b      	lsls	r3, r1, #13
10013190:	1ac0      	subs	r0, r0, r3
10013192:	4152      	adcs	r2, r2
10013194:	0b03      	lsrs	r3, r0, #12
10013196:	428b      	cmp	r3, r1
10013198:	d301      	bcc.n	1001319e <__aeabi_uidiv+0x6a>
1001319a:	030b      	lsls	r3, r1, #12
1001319c:	1ac0      	subs	r0, r0, r3
1001319e:	4152      	adcs	r2, r2
100131a0:	0ac3      	lsrs	r3, r0, #11
100131a2:	428b      	cmp	r3, r1
100131a4:	d301      	bcc.n	100131aa <__aeabi_uidiv+0x76>
100131a6:	02cb      	lsls	r3, r1, #11
100131a8:	1ac0      	subs	r0, r0, r3
100131aa:	4152      	adcs	r2, r2
100131ac:	0a83      	lsrs	r3, r0, #10
100131ae:	428b      	cmp	r3, r1
100131b0:	d301      	bcc.n	100131b6 <__aeabi_uidiv+0x82>
100131b2:	028b      	lsls	r3, r1, #10
100131b4:	1ac0      	subs	r0, r0, r3
100131b6:	4152      	adcs	r2, r2
100131b8:	0a43      	lsrs	r3, r0, #9
100131ba:	428b      	cmp	r3, r1
100131bc:	d301      	bcc.n	100131c2 <__aeabi_uidiv+0x8e>
100131be:	024b      	lsls	r3, r1, #9
100131c0:	1ac0      	subs	r0, r0, r3
100131c2:	4152      	adcs	r2, r2
100131c4:	0a03      	lsrs	r3, r0, #8
100131c6:	428b      	cmp	r3, r1
100131c8:	d301      	bcc.n	100131ce <__aeabi_uidiv+0x9a>
100131ca:	020b      	lsls	r3, r1, #8
100131cc:	1ac0      	subs	r0, r0, r3
100131ce:	4152      	adcs	r2, r2
100131d0:	d2cd      	bcs.n	1001316e <__aeabi_uidiv+0x3a>
100131d2:	09c3      	lsrs	r3, r0, #7
100131d4:	428b      	cmp	r3, r1
100131d6:	d301      	bcc.n	100131dc <__aeabi_uidiv+0xa8>
100131d8:	01cb      	lsls	r3, r1, #7
100131da:	1ac0      	subs	r0, r0, r3
100131dc:	4152      	adcs	r2, r2
100131de:	0983      	lsrs	r3, r0, #6
100131e0:	428b      	cmp	r3, r1
100131e2:	d301      	bcc.n	100131e8 <__aeabi_uidiv+0xb4>
100131e4:	018b      	lsls	r3, r1, #6
100131e6:	1ac0      	subs	r0, r0, r3
100131e8:	4152      	adcs	r2, r2
100131ea:	0943      	lsrs	r3, r0, #5
100131ec:	428b      	cmp	r3, r1
100131ee:	d301      	bcc.n	100131f4 <__aeabi_uidiv+0xc0>
100131f0:	014b      	lsls	r3, r1, #5
100131f2:	1ac0      	subs	r0, r0, r3
100131f4:	4152      	adcs	r2, r2
100131f6:	0903      	lsrs	r3, r0, #4
100131f8:	428b      	cmp	r3, r1
100131fa:	d301      	bcc.n	10013200 <__aeabi_uidiv+0xcc>
100131fc:	010b      	lsls	r3, r1, #4
100131fe:	1ac0      	subs	r0, r0, r3
10013200:	4152      	adcs	r2, r2
10013202:	08c3      	lsrs	r3, r0, #3
10013204:	428b      	cmp	r3, r1
10013206:	d301      	bcc.n	1001320c <__aeabi_uidiv+0xd8>
10013208:	00cb      	lsls	r3, r1, #3
1001320a:	1ac0      	subs	r0, r0, r3
1001320c:	4152      	adcs	r2, r2
1001320e:	0883      	lsrs	r3, r0, #2
10013210:	428b      	cmp	r3, r1
10013212:	d301      	bcc.n	10013218 <__aeabi_uidiv+0xe4>
10013214:	008b      	lsls	r3, r1, #2
10013216:	1ac0      	subs	r0, r0, r3
10013218:	4152      	adcs	r2, r2
1001321a:	0843      	lsrs	r3, r0, #1
1001321c:	428b      	cmp	r3, r1
1001321e:	d301      	bcc.n	10013224 <__aeabi_uidiv+0xf0>
10013220:	004b      	lsls	r3, r1, #1
10013222:	1ac0      	subs	r0, r0, r3
10013224:	4152      	adcs	r2, r2
10013226:	1a41      	subs	r1, r0, r1
10013228:	d200      	bcs.n	1001322c <__aeabi_uidiv+0xf8>
1001322a:	4601      	mov	r1, r0
1001322c:	4152      	adcs	r2, r2
1001322e:	4610      	mov	r0, r2
10013230:	4770      	bx	lr
10013232:	e7ff      	b.n	10013234 <__aeabi_uidiv+0x100>
10013234:	b501      	push	{r0, lr}
10013236:	2000      	movs	r0, #0
10013238:	f000 f8f0 	bl	1001341c <__aeabi_idiv0>
1001323c:	bd02      	pop	{r1, pc}
1001323e:	46c0      	nop			; (mov r8, r8)

10013240 <__aeabi_uidivmod>:
10013240:	2900      	cmp	r1, #0
10013242:	d0f7      	beq.n	10013234 <__aeabi_uidiv+0x100>
10013244:	e776      	b.n	10013134 <__aeabi_uidiv>
10013246:	4770      	bx	lr

10013248 <__aeabi_idiv>:
10013248:	4603      	mov	r3, r0
1001324a:	430b      	orrs	r3, r1
1001324c:	d47f      	bmi.n	1001334e <__aeabi_idiv+0x106>
1001324e:	2200      	movs	r2, #0
10013250:	0843      	lsrs	r3, r0, #1
10013252:	428b      	cmp	r3, r1
10013254:	d374      	bcc.n	10013340 <__aeabi_idiv+0xf8>
10013256:	0903      	lsrs	r3, r0, #4
10013258:	428b      	cmp	r3, r1
1001325a:	d35f      	bcc.n	1001331c <__aeabi_idiv+0xd4>
1001325c:	0a03      	lsrs	r3, r0, #8
1001325e:	428b      	cmp	r3, r1
10013260:	d344      	bcc.n	100132ec <__aeabi_idiv+0xa4>
10013262:	0b03      	lsrs	r3, r0, #12
10013264:	428b      	cmp	r3, r1
10013266:	d328      	bcc.n	100132ba <__aeabi_idiv+0x72>
10013268:	0c03      	lsrs	r3, r0, #16
1001326a:	428b      	cmp	r3, r1
1001326c:	d30d      	bcc.n	1001328a <__aeabi_idiv+0x42>
1001326e:	22ff      	movs	r2, #255	; 0xff
10013270:	0209      	lsls	r1, r1, #8
10013272:	ba12      	rev	r2, r2
10013274:	0c03      	lsrs	r3, r0, #16
10013276:	428b      	cmp	r3, r1
10013278:	d302      	bcc.n	10013280 <__aeabi_idiv+0x38>
1001327a:	1212      	asrs	r2, r2, #8
1001327c:	0209      	lsls	r1, r1, #8
1001327e:	d065      	beq.n	1001334c <__aeabi_idiv+0x104>
10013280:	0b03      	lsrs	r3, r0, #12
10013282:	428b      	cmp	r3, r1
10013284:	d319      	bcc.n	100132ba <__aeabi_idiv+0x72>
10013286:	e000      	b.n	1001328a <__aeabi_idiv+0x42>
10013288:	0a09      	lsrs	r1, r1, #8
1001328a:	0bc3      	lsrs	r3, r0, #15
1001328c:	428b      	cmp	r3, r1
1001328e:	d301      	bcc.n	10013294 <__aeabi_idiv+0x4c>
10013290:	03cb      	lsls	r3, r1, #15
10013292:	1ac0      	subs	r0, r0, r3
10013294:	4152      	adcs	r2, r2
10013296:	0b83      	lsrs	r3, r0, #14
10013298:	428b      	cmp	r3, r1
1001329a:	d301      	bcc.n	100132a0 <__aeabi_idiv+0x58>
1001329c:	038b      	lsls	r3, r1, #14
1001329e:	1ac0      	subs	r0, r0, r3
100132a0:	4152      	adcs	r2, r2
100132a2:	0b43      	lsrs	r3, r0, #13
100132a4:	428b      	cmp	r3, r1
100132a6:	d301      	bcc.n	100132ac <__aeabi_idiv+0x64>
100132a8:	034b      	lsls	r3, r1, #13
100132aa:	1ac0      	subs	r0, r0, r3
100132ac:	4152      	adcs	r2, r2
100132ae:	0b03      	lsrs	r3, r0, #12
100132b0:	428b      	cmp	r3, r1
100132b2:	d301      	bcc.n	100132b8 <__aeabi_idiv+0x70>
100132b4:	030b      	lsls	r3, r1, #12
100132b6:	1ac0      	subs	r0, r0, r3
100132b8:	4152      	adcs	r2, r2
100132ba:	0ac3      	lsrs	r3, r0, #11
100132bc:	428b      	cmp	r3, r1
100132be:	d301      	bcc.n	100132c4 <__aeabi_idiv+0x7c>
100132c0:	02cb      	lsls	r3, r1, #11
100132c2:	1ac0      	subs	r0, r0, r3
100132c4:	4152      	adcs	r2, r2
100132c6:	0a83      	lsrs	r3, r0, #10
100132c8:	428b      	cmp	r3, r1
100132ca:	d301      	bcc.n	100132d0 <__aeabi_idiv+0x88>
100132cc:	028b      	lsls	r3, r1, #10
100132ce:	1ac0      	subs	r0, r0, r3
100132d0:	4152      	adcs	r2, r2
100132d2:	0a43      	lsrs	r3, r0, #9
100132d4:	428b      	cmp	r3, r1
100132d6:	d301      	bcc.n	100132dc <__aeabi_idiv+0x94>
100132d8:	024b      	lsls	r3, r1, #9
100132da:	1ac0      	subs	r0, r0, r3
100132dc:	4152      	adcs	r2, r2
100132de:	0a03      	lsrs	r3, r0, #8
100132e0:	428b      	cmp	r3, r1
100132e2:	d301      	bcc.n	100132e8 <__aeabi_idiv+0xa0>
100132e4:	020b      	lsls	r3, r1, #8
100132e6:	1ac0      	subs	r0, r0, r3
100132e8:	4152      	adcs	r2, r2
100132ea:	d2cd      	bcs.n	10013288 <__aeabi_idiv+0x40>
100132ec:	09c3      	lsrs	r3, r0, #7
100132ee:	428b      	cmp	r3, r1
100132f0:	d301      	bcc.n	100132f6 <__aeabi_idiv+0xae>
100132f2:	01cb      	lsls	r3, r1, #7
100132f4:	1ac0      	subs	r0, r0, r3
100132f6:	4152      	adcs	r2, r2
100132f8:	0983      	lsrs	r3, r0, #6
100132fa:	428b      	cmp	r3, r1
100132fc:	d301      	bcc.n	10013302 <__aeabi_idiv+0xba>
100132fe:	018b      	lsls	r3, r1, #6
10013300:	1ac0      	subs	r0, r0, r3
10013302:	4152      	adcs	r2, r2
10013304:	0943      	lsrs	r3, r0, #5
10013306:	428b      	cmp	r3, r1
10013308:	d301      	bcc.n	1001330e <__aeabi_idiv+0xc6>
1001330a:	014b      	lsls	r3, r1, #5
1001330c:	1ac0      	subs	r0, r0, r3
1001330e:	4152      	adcs	r2, r2
10013310:	0903      	lsrs	r3, r0, #4
10013312:	428b      	cmp	r3, r1
10013314:	d301      	bcc.n	1001331a <__aeabi_idiv+0xd2>
10013316:	010b      	lsls	r3, r1, #4
10013318:	1ac0      	subs	r0, r0, r3
1001331a:	4152      	adcs	r2, r2
1001331c:	08c3      	lsrs	r3, r0, #3
1001331e:	428b      	cmp	r3, r1
10013320:	d301      	bcc.n	10013326 <__aeabi_idiv+0xde>
10013322:	00cb      	lsls	r3, r1, #3
10013324:	1ac0      	subs	r0, r0, r3
10013326:	4152      	adcs	r2, r2
10013328:	0883      	lsrs	r3, r0, #2
1001332a:	428b      	cmp	r3, r1
1001332c:	d301      	bcc.n	10013332 <__aeabi_idiv+0xea>
1001332e:	008b      	lsls	r3, r1, #2
10013330:	1ac0      	subs	r0, r0, r3
10013332:	4152      	adcs	r2, r2
10013334:	0843      	lsrs	r3, r0, #1
10013336:	428b      	cmp	r3, r1
10013338:	d301      	bcc.n	1001333e <__aeabi_idiv+0xf6>
1001333a:	004b      	lsls	r3, r1, #1
1001333c:	1ac0      	subs	r0, r0, r3
1001333e:	4152      	adcs	r2, r2
10013340:	1a41      	subs	r1, r0, r1
10013342:	d200      	bcs.n	10013346 <__aeabi_idiv+0xfe>
10013344:	4601      	mov	r1, r0
10013346:	4152      	adcs	r2, r2
10013348:	4610      	mov	r0, r2
1001334a:	4770      	bx	lr
1001334c:	e05d      	b.n	1001340a <__aeabi_idiv+0x1c2>
1001334e:	0fca      	lsrs	r2, r1, #31
10013350:	d000      	beq.n	10013354 <__aeabi_idiv+0x10c>
10013352:	4249      	negs	r1, r1
10013354:	1003      	asrs	r3, r0, #32
10013356:	d300      	bcc.n	1001335a <__aeabi_idiv+0x112>
10013358:	4240      	negs	r0, r0
1001335a:	4053      	eors	r3, r2
1001335c:	2200      	movs	r2, #0
1001335e:	469c      	mov	ip, r3
10013360:	0903      	lsrs	r3, r0, #4
10013362:	428b      	cmp	r3, r1
10013364:	d32d      	bcc.n	100133c2 <__aeabi_idiv+0x17a>
10013366:	0a03      	lsrs	r3, r0, #8
10013368:	428b      	cmp	r3, r1
1001336a:	d312      	bcc.n	10013392 <__aeabi_idiv+0x14a>
1001336c:	22fc      	movs	r2, #252	; 0xfc
1001336e:	0189      	lsls	r1, r1, #6
10013370:	ba12      	rev	r2, r2
10013372:	0a03      	lsrs	r3, r0, #8
10013374:	428b      	cmp	r3, r1
10013376:	d30c      	bcc.n	10013392 <__aeabi_idiv+0x14a>
10013378:	0189      	lsls	r1, r1, #6
1001337a:	1192      	asrs	r2, r2, #6
1001337c:	428b      	cmp	r3, r1
1001337e:	d308      	bcc.n	10013392 <__aeabi_idiv+0x14a>
10013380:	0189      	lsls	r1, r1, #6
10013382:	1192      	asrs	r2, r2, #6
10013384:	428b      	cmp	r3, r1
10013386:	d304      	bcc.n	10013392 <__aeabi_idiv+0x14a>
10013388:	0189      	lsls	r1, r1, #6
1001338a:	d03a      	beq.n	10013402 <__aeabi_idiv+0x1ba>
1001338c:	1192      	asrs	r2, r2, #6
1001338e:	e000      	b.n	10013392 <__aeabi_idiv+0x14a>
10013390:	0989      	lsrs	r1, r1, #6
10013392:	09c3      	lsrs	r3, r0, #7
10013394:	428b      	cmp	r3, r1
10013396:	d301      	bcc.n	1001339c <__aeabi_idiv+0x154>
10013398:	01cb      	lsls	r3, r1, #7
1001339a:	1ac0      	subs	r0, r0, r3
1001339c:	4152      	adcs	r2, r2
1001339e:	0983      	lsrs	r3, r0, #6
100133a0:	428b      	cmp	r3, r1
100133a2:	d301      	bcc.n	100133a8 <__aeabi_idiv+0x160>
100133a4:	018b      	lsls	r3, r1, #6
100133a6:	1ac0      	subs	r0, r0, r3
100133a8:	4152      	adcs	r2, r2
100133aa:	0943      	lsrs	r3, r0, #5
100133ac:	428b      	cmp	r3, r1
100133ae:	d301      	bcc.n	100133b4 <__aeabi_idiv+0x16c>
100133b0:	014b      	lsls	r3, r1, #5
100133b2:	1ac0      	subs	r0, r0, r3
100133b4:	4152      	adcs	r2, r2
100133b6:	0903      	lsrs	r3, r0, #4
100133b8:	428b      	cmp	r3, r1
100133ba:	d301      	bcc.n	100133c0 <__aeabi_idiv+0x178>
100133bc:	010b      	lsls	r3, r1, #4
100133be:	1ac0      	subs	r0, r0, r3
100133c0:	4152      	adcs	r2, r2
100133c2:	08c3      	lsrs	r3, r0, #3
100133c4:	428b      	cmp	r3, r1
100133c6:	d301      	bcc.n	100133cc <__aeabi_idiv+0x184>
100133c8:	00cb      	lsls	r3, r1, #3
100133ca:	1ac0      	subs	r0, r0, r3
100133cc:	4152      	adcs	r2, r2
100133ce:	0883      	lsrs	r3, r0, #2
100133d0:	428b      	cmp	r3, r1
100133d2:	d301      	bcc.n	100133d8 <__aeabi_idiv+0x190>
100133d4:	008b      	lsls	r3, r1, #2
100133d6:	1ac0      	subs	r0, r0, r3
100133d8:	4152      	adcs	r2, r2
100133da:	d2d9      	bcs.n	10013390 <__aeabi_idiv+0x148>
100133dc:	0843      	lsrs	r3, r0, #1
100133de:	428b      	cmp	r3, r1
100133e0:	d301      	bcc.n	100133e6 <__aeabi_idiv+0x19e>
100133e2:	004b      	lsls	r3, r1, #1
100133e4:	1ac0      	subs	r0, r0, r3
100133e6:	4152      	adcs	r2, r2
100133e8:	1a41      	subs	r1, r0, r1
100133ea:	d200      	bcs.n	100133ee <__aeabi_idiv+0x1a6>
100133ec:	4601      	mov	r1, r0
100133ee:	4663      	mov	r3, ip
100133f0:	4152      	adcs	r2, r2
100133f2:	105b      	asrs	r3, r3, #1
100133f4:	4610      	mov	r0, r2
100133f6:	d301      	bcc.n	100133fc <__aeabi_idiv+0x1b4>
100133f8:	4240      	negs	r0, r0
100133fa:	2b00      	cmp	r3, #0
100133fc:	d500      	bpl.n	10013400 <__aeabi_idiv+0x1b8>
100133fe:	4249      	negs	r1, r1
10013400:	4770      	bx	lr
10013402:	4663      	mov	r3, ip
10013404:	105b      	asrs	r3, r3, #1
10013406:	d300      	bcc.n	1001340a <__aeabi_idiv+0x1c2>
10013408:	4240      	negs	r0, r0
1001340a:	b501      	push	{r0, lr}
1001340c:	2000      	movs	r0, #0
1001340e:	f000 f805 	bl	1001341c <__aeabi_idiv0>
10013412:	bd02      	pop	{r1, pc}

10013414 <__aeabi_idivmod>:
10013414:	2900      	cmp	r1, #0
10013416:	d0f8      	beq.n	1001340a <__aeabi_idiv+0x1c2>
10013418:	e716      	b.n	10013248 <__aeabi_idiv>
1001341a:	4770      	bx	lr

1001341c <__aeabi_idiv0>:
1001341c:	4770      	bx	lr
1001341e:	46c0      	nop			; (mov r8, r8)

10013420 <__aeabi_cdrcmple>:
10013420:	4684      	mov	ip, r0
10013422:	1c10      	adds	r0, r2, #0
10013424:	4662      	mov	r2, ip
10013426:	468c      	mov	ip, r1
10013428:	1c19      	adds	r1, r3, #0
1001342a:	4663      	mov	r3, ip
1001342c:	e000      	b.n	10013430 <__aeabi_cdcmpeq>
1001342e:	46c0      	nop			; (mov r8, r8)

10013430 <__aeabi_cdcmpeq>:
10013430:	b51f      	push	{r0, r1, r2, r3, r4, lr}
10013432:	f000 fff5 	bl	10014420 <__ledf2>
10013436:	2800      	cmp	r0, #0
10013438:	d401      	bmi.n	1001343e <__aeabi_cdcmpeq+0xe>
1001343a:	2100      	movs	r1, #0
1001343c:	42c8      	cmn	r0, r1
1001343e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

10013440 <__aeabi_dcmpeq>:
10013440:	b510      	push	{r4, lr}
10013442:	f000 ff49 	bl	100142d8 <__eqdf2>
10013446:	4240      	negs	r0, r0
10013448:	3001      	adds	r0, #1
1001344a:	bd10      	pop	{r4, pc}

1001344c <__aeabi_dcmplt>:
1001344c:	b510      	push	{r4, lr}
1001344e:	f000 ffe7 	bl	10014420 <__ledf2>
10013452:	2800      	cmp	r0, #0
10013454:	db01      	blt.n	1001345a <__aeabi_dcmplt+0xe>
10013456:	2000      	movs	r0, #0
10013458:	bd10      	pop	{r4, pc}
1001345a:	2001      	movs	r0, #1
1001345c:	bd10      	pop	{r4, pc}
1001345e:	46c0      	nop			; (mov r8, r8)

10013460 <__aeabi_dcmple>:
10013460:	b510      	push	{r4, lr}
10013462:	f000 ffdd 	bl	10014420 <__ledf2>
10013466:	2800      	cmp	r0, #0
10013468:	dd01      	ble.n	1001346e <__aeabi_dcmple+0xe>
1001346a:	2000      	movs	r0, #0
1001346c:	bd10      	pop	{r4, pc}
1001346e:	2001      	movs	r0, #1
10013470:	bd10      	pop	{r4, pc}
10013472:	46c0      	nop			; (mov r8, r8)

10013474 <__aeabi_dcmpgt>:
10013474:	b510      	push	{r4, lr}
10013476:	f000 ff6f 	bl	10014358 <__gedf2>
1001347a:	2800      	cmp	r0, #0
1001347c:	dc01      	bgt.n	10013482 <__aeabi_dcmpgt+0xe>
1001347e:	2000      	movs	r0, #0
10013480:	bd10      	pop	{r4, pc}
10013482:	2001      	movs	r0, #1
10013484:	bd10      	pop	{r4, pc}
10013486:	46c0      	nop			; (mov r8, r8)

10013488 <__aeabi_dcmpge>:
10013488:	b510      	push	{r4, lr}
1001348a:	f000 ff65 	bl	10014358 <__gedf2>
1001348e:	2800      	cmp	r0, #0
10013490:	da01      	bge.n	10013496 <__aeabi_dcmpge+0xe>
10013492:	2000      	movs	r0, #0
10013494:	bd10      	pop	{r4, pc}
10013496:	2001      	movs	r0, #1
10013498:	bd10      	pop	{r4, pc}
1001349a:	46c0      	nop			; (mov r8, r8)

1001349c <__aeabi_cfrcmple>:
1001349c:	4684      	mov	ip, r0
1001349e:	1c08      	adds	r0, r1, #0
100134a0:	4661      	mov	r1, ip
100134a2:	e7ff      	b.n	100134a4 <__aeabi_cfcmpeq>

100134a4 <__aeabi_cfcmpeq>:
100134a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
100134a6:	f000 fb91 	bl	10013bcc <__lesf2>
100134aa:	2800      	cmp	r0, #0
100134ac:	d401      	bmi.n	100134b2 <__aeabi_cfcmpeq+0xe>
100134ae:	2100      	movs	r1, #0
100134b0:	42c8      	cmn	r0, r1
100134b2:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

100134b4 <__aeabi_fcmpeq>:
100134b4:	b510      	push	{r4, lr}
100134b6:	f000 fb1d 	bl	10013af4 <__eqsf2>
100134ba:	4240      	negs	r0, r0
100134bc:	3001      	adds	r0, #1
100134be:	bd10      	pop	{r4, pc}

100134c0 <__aeabi_fcmplt>:
100134c0:	b510      	push	{r4, lr}
100134c2:	f000 fb83 	bl	10013bcc <__lesf2>
100134c6:	2800      	cmp	r0, #0
100134c8:	db01      	blt.n	100134ce <__aeabi_fcmplt+0xe>
100134ca:	2000      	movs	r0, #0
100134cc:	bd10      	pop	{r4, pc}
100134ce:	2001      	movs	r0, #1
100134d0:	bd10      	pop	{r4, pc}
100134d2:	46c0      	nop			; (mov r8, r8)

100134d4 <__aeabi_fcmple>:
100134d4:	b510      	push	{r4, lr}
100134d6:	f000 fb79 	bl	10013bcc <__lesf2>
100134da:	2800      	cmp	r0, #0
100134dc:	dd01      	ble.n	100134e2 <__aeabi_fcmple+0xe>
100134de:	2000      	movs	r0, #0
100134e0:	bd10      	pop	{r4, pc}
100134e2:	2001      	movs	r0, #1
100134e4:	bd10      	pop	{r4, pc}
100134e6:	46c0      	nop			; (mov r8, r8)

100134e8 <__aeabi_fcmpgt>:
100134e8:	b510      	push	{r4, lr}
100134ea:	f000 fb2b 	bl	10013b44 <__gesf2>
100134ee:	2800      	cmp	r0, #0
100134f0:	dc01      	bgt.n	100134f6 <__aeabi_fcmpgt+0xe>
100134f2:	2000      	movs	r0, #0
100134f4:	bd10      	pop	{r4, pc}
100134f6:	2001      	movs	r0, #1
100134f8:	bd10      	pop	{r4, pc}
100134fa:	46c0      	nop			; (mov r8, r8)

100134fc <__aeabi_fcmpge>:
100134fc:	b510      	push	{r4, lr}
100134fe:	f000 fb21 	bl	10013b44 <__gesf2>
10013502:	2800      	cmp	r0, #0
10013504:	da01      	bge.n	1001350a <__aeabi_fcmpge+0xe>
10013506:	2000      	movs	r0, #0
10013508:	bd10      	pop	{r4, pc}
1001350a:	2001      	movs	r0, #1
1001350c:	bd10      	pop	{r4, pc}
1001350e:	46c0      	nop			; (mov r8, r8)

10013510 <__aeabi_lmul>:
10013510:	b5f0      	push	{r4, r5, r6, r7, lr}
10013512:	464f      	mov	r7, r9
10013514:	4646      	mov	r6, r8
10013516:	b4c0      	push	{r6, r7}
10013518:	0416      	lsls	r6, r2, #16
1001351a:	0c36      	lsrs	r6, r6, #16
1001351c:	4699      	mov	r9, r3
1001351e:	0033      	movs	r3, r6
10013520:	0405      	lsls	r5, r0, #16
10013522:	0c2c      	lsrs	r4, r5, #16
10013524:	0c07      	lsrs	r7, r0, #16
10013526:	0c15      	lsrs	r5, r2, #16
10013528:	4363      	muls	r3, r4
1001352a:	437e      	muls	r6, r7
1001352c:	436f      	muls	r7, r5
1001352e:	4365      	muls	r5, r4
10013530:	0c1c      	lsrs	r4, r3, #16
10013532:	19ad      	adds	r5, r5, r6
10013534:	1964      	adds	r4, r4, r5
10013536:	469c      	mov	ip, r3
10013538:	42a6      	cmp	r6, r4
1001353a:	d903      	bls.n	10013544 <__aeabi_lmul+0x34>
1001353c:	2380      	movs	r3, #128	; 0x80
1001353e:	025b      	lsls	r3, r3, #9
10013540:	4698      	mov	r8, r3
10013542:	4447      	add	r7, r8
10013544:	4663      	mov	r3, ip
10013546:	0c25      	lsrs	r5, r4, #16
10013548:	19ef      	adds	r7, r5, r7
1001354a:	041d      	lsls	r5, r3, #16
1001354c:	464b      	mov	r3, r9
1001354e:	434a      	muls	r2, r1
10013550:	4343      	muls	r3, r0
10013552:	0c2d      	lsrs	r5, r5, #16
10013554:	0424      	lsls	r4, r4, #16
10013556:	1964      	adds	r4, r4, r5
10013558:	1899      	adds	r1, r3, r2
1001355a:	19c9      	adds	r1, r1, r7
1001355c:	0020      	movs	r0, r4
1001355e:	bc0c      	pop	{r2, r3}
10013560:	4690      	mov	r8, r2
10013562:	4699      	mov	r9, r3
10013564:	bdf0      	pop	{r4, r5, r6, r7, pc}
10013566:	46c0      	nop			; (mov r8, r8)

10013568 <__aeabi_f2uiz>:
10013568:	219e      	movs	r1, #158	; 0x9e
1001356a:	b510      	push	{r4, lr}
1001356c:	05c9      	lsls	r1, r1, #23
1001356e:	1c04      	adds	r4, r0, #0
10013570:	f7ff ffc4 	bl	100134fc <__aeabi_fcmpge>
10013574:	2800      	cmp	r0, #0
10013576:	d103      	bne.n	10013580 <__aeabi_f2uiz+0x18>
10013578:	1c20      	adds	r0, r4, #0
1001357a:	f000 fe05 	bl	10014188 <__aeabi_f2iz>
1001357e:	bd10      	pop	{r4, pc}
10013580:	219e      	movs	r1, #158	; 0x9e
10013582:	1c20      	adds	r0, r4, #0
10013584:	05c9      	lsls	r1, r1, #23
10013586:	f000 fc79 	bl	10013e7c <__aeabi_fsub>
1001358a:	f000 fdfd 	bl	10014188 <__aeabi_f2iz>
1001358e:	2380      	movs	r3, #128	; 0x80
10013590:	061b      	lsls	r3, r3, #24
10013592:	469c      	mov	ip, r3
10013594:	4460      	add	r0, ip
10013596:	e7f2      	b.n	1001357e <__aeabi_f2uiz+0x16>

10013598 <__aeabi_d2uiz>:
10013598:	b570      	push	{r4, r5, r6, lr}
1001359a:	2200      	movs	r2, #0
1001359c:	4b0c      	ldr	r3, [pc, #48]	; (100135d0 <__aeabi_d2uiz+0x38>)
1001359e:	0004      	movs	r4, r0
100135a0:	000d      	movs	r5, r1
100135a2:	f7ff ff71 	bl	10013488 <__aeabi_dcmpge>
100135a6:	2800      	cmp	r0, #0
100135a8:	d104      	bne.n	100135b4 <__aeabi_d2uiz+0x1c>
100135aa:	0020      	movs	r0, r4
100135ac:	0029      	movs	r1, r5
100135ae:	f001 fd6f 	bl	10015090 <__aeabi_d2iz>
100135b2:	bd70      	pop	{r4, r5, r6, pc}
100135b4:	4b06      	ldr	r3, [pc, #24]	; (100135d0 <__aeabi_d2uiz+0x38>)
100135b6:	2200      	movs	r2, #0
100135b8:	0020      	movs	r0, r4
100135ba:	0029      	movs	r1, r5
100135bc:	f001 fa14 	bl	100149e8 <__aeabi_dsub>
100135c0:	f001 fd66 	bl	10015090 <__aeabi_d2iz>
100135c4:	2380      	movs	r3, #128	; 0x80
100135c6:	061b      	lsls	r3, r3, #24
100135c8:	469c      	mov	ip, r3
100135ca:	4460      	add	r0, ip
100135cc:	e7f1      	b.n	100135b2 <__aeabi_d2uiz+0x1a>
100135ce:	46c0      	nop			; (mov r8, r8)
100135d0:	41e00000 	.word	0x41e00000

100135d4 <__aeabi_fadd>:
100135d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100135d6:	024a      	lsls	r2, r1, #9
100135d8:	0243      	lsls	r3, r0, #9
100135da:	0044      	lsls	r4, r0, #1
100135dc:	004e      	lsls	r6, r1, #1
100135de:	0fc5      	lsrs	r5, r0, #31
100135e0:	0e24      	lsrs	r4, r4, #24
100135e2:	0028      	movs	r0, r5
100135e4:	099b      	lsrs	r3, r3, #6
100135e6:	0e36      	lsrs	r6, r6, #24
100135e8:	0fc9      	lsrs	r1, r1, #31
100135ea:	0992      	lsrs	r2, r2, #6
100135ec:	428d      	cmp	r5, r1
100135ee:	d059      	beq.n	100136a4 <__aeabi_fadd+0xd0>
100135f0:	1ba0      	subs	r0, r4, r6
100135f2:	2800      	cmp	r0, #0
100135f4:	dc00      	bgt.n	100135f8 <__aeabi_fadd+0x24>
100135f6:	e08d      	b.n	10013714 <__aeabi_fadd+0x140>
100135f8:	2e00      	cmp	r6, #0
100135fa:	d11a      	bne.n	10013632 <__aeabi_fadd+0x5e>
100135fc:	2a00      	cmp	r2, #0
100135fe:	d000      	beq.n	10013602 <__aeabi_fadd+0x2e>
10013600:	e079      	b.n	100136f6 <__aeabi_fadd+0x122>
10013602:	075a      	lsls	r2, r3, #29
10013604:	d004      	beq.n	10013610 <__aeabi_fadd+0x3c>
10013606:	220f      	movs	r2, #15
10013608:	401a      	ands	r2, r3
1001360a:	2a04      	cmp	r2, #4
1001360c:	d000      	beq.n	10013610 <__aeabi_fadd+0x3c>
1001360e:	3304      	adds	r3, #4
10013610:	015a      	lsls	r2, r3, #5
10013612:	d538      	bpl.n	10013686 <__aeabi_fadd+0xb2>
10013614:	3401      	adds	r4, #1
10013616:	2cff      	cmp	r4, #255	; 0xff
10013618:	d100      	bne.n	1001361c <__aeabi_fadd+0x48>
1001361a:	e089      	b.n	10013730 <__aeabi_fadd+0x15c>
1001361c:	0028      	movs	r0, r5
1001361e:	019b      	lsls	r3, r3, #6
10013620:	0a5b      	lsrs	r3, r3, #9
10013622:	b2e4      	uxtb	r4, r4
10013624:	025b      	lsls	r3, r3, #9
10013626:	05e4      	lsls	r4, r4, #23
10013628:	0a5b      	lsrs	r3, r3, #9
1001362a:	4323      	orrs	r3, r4
1001362c:	07c0      	lsls	r0, r0, #31
1001362e:	4318      	orrs	r0, r3
10013630:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10013632:	2cff      	cmp	r4, #255	; 0xff
10013634:	d0e5      	beq.n	10013602 <__aeabi_fadd+0x2e>
10013636:	2180      	movs	r1, #128	; 0x80
10013638:	04c9      	lsls	r1, r1, #19
1001363a:	430a      	orrs	r2, r1
1001363c:	281b      	cmp	r0, #27
1001363e:	dd00      	ble.n	10013642 <__aeabi_fadd+0x6e>
10013640:	e089      	b.n	10013756 <__aeabi_fadd+0x182>
10013642:	0016      	movs	r6, r2
10013644:	2120      	movs	r1, #32
10013646:	40c6      	lsrs	r6, r0
10013648:	1a08      	subs	r0, r1, r0
1001364a:	4082      	lsls	r2, r0
1001364c:	1e51      	subs	r1, r2, #1
1001364e:	418a      	sbcs	r2, r1
10013650:	4332      	orrs	r2, r6
10013652:	1a9b      	subs	r3, r3, r2
10013654:	015a      	lsls	r2, r3, #5
10013656:	d514      	bpl.n	10013682 <__aeabi_fadd+0xae>
10013658:	019b      	lsls	r3, r3, #6
1001365a:	099e      	lsrs	r6, r3, #6
1001365c:	0030      	movs	r0, r6
1001365e:	f001 fd85 	bl	1001516c <__clzsi2>
10013662:	3805      	subs	r0, #5
10013664:	4086      	lsls	r6, r0
10013666:	4284      	cmp	r4, r0
10013668:	dc65      	bgt.n	10013736 <__aeabi_fadd+0x162>
1001366a:	1b04      	subs	r4, r0, r4
1001366c:	0033      	movs	r3, r6
1001366e:	2020      	movs	r0, #32
10013670:	3401      	adds	r4, #1
10013672:	40e3      	lsrs	r3, r4
10013674:	1b04      	subs	r4, r0, r4
10013676:	40a6      	lsls	r6, r4
10013678:	1e72      	subs	r2, r6, #1
1001367a:	4196      	sbcs	r6, r2
1001367c:	2400      	movs	r4, #0
1001367e:	4333      	orrs	r3, r6
10013680:	e7bf      	b.n	10013602 <__aeabi_fadd+0x2e>
10013682:	075a      	lsls	r2, r3, #29
10013684:	d1bf      	bne.n	10013606 <__aeabi_fadd+0x32>
10013686:	08df      	lsrs	r7, r3, #3
10013688:	0028      	movs	r0, r5
1001368a:	2cff      	cmp	r4, #255	; 0xff
1001368c:	d12f      	bne.n	100136ee <__aeabi_fadd+0x11a>
1001368e:	2f00      	cmp	r7, #0
10013690:	d100      	bne.n	10013694 <__aeabi_fadd+0xc0>
10013692:	e087      	b.n	100137a4 <__aeabi_fadd+0x1d0>
10013694:	2280      	movs	r2, #128	; 0x80
10013696:	03d2      	lsls	r2, r2, #15
10013698:	0013      	movs	r3, r2
1001369a:	433b      	orrs	r3, r7
1001369c:	025b      	lsls	r3, r3, #9
1001369e:	0a5b      	lsrs	r3, r3, #9
100136a0:	24ff      	movs	r4, #255	; 0xff
100136a2:	e7bf      	b.n	10013624 <__aeabi_fadd+0x50>
100136a4:	1ba1      	subs	r1, r4, r6
100136a6:	2900      	cmp	r1, #0
100136a8:	dd49      	ble.n	1001373e <__aeabi_fadd+0x16a>
100136aa:	2e00      	cmp	r6, #0
100136ac:	d029      	beq.n	10013702 <__aeabi_fadd+0x12e>
100136ae:	2cff      	cmp	r4, #255	; 0xff
100136b0:	d0a7      	beq.n	10013602 <__aeabi_fadd+0x2e>
100136b2:	2680      	movs	r6, #128	; 0x80
100136b4:	04f6      	lsls	r6, r6, #19
100136b6:	4332      	orrs	r2, r6
100136b8:	291b      	cmp	r1, #27
100136ba:	dd00      	ble.n	100136be <__aeabi_fadd+0xea>
100136bc:	e08d      	b.n	100137da <__aeabi_fadd+0x206>
100136be:	0017      	movs	r7, r2
100136c0:	2620      	movs	r6, #32
100136c2:	40cf      	lsrs	r7, r1
100136c4:	1a71      	subs	r1, r6, r1
100136c6:	408a      	lsls	r2, r1
100136c8:	1e51      	subs	r1, r2, #1
100136ca:	418a      	sbcs	r2, r1
100136cc:	433a      	orrs	r2, r7
100136ce:	189b      	adds	r3, r3, r2
100136d0:	015a      	lsls	r2, r3, #5
100136d2:	d5d6      	bpl.n	10013682 <__aeabi_fadd+0xae>
100136d4:	3401      	adds	r4, #1
100136d6:	2cff      	cmp	r4, #255	; 0xff
100136d8:	d064      	beq.n	100137a4 <__aeabi_fadd+0x1d0>
100136da:	2201      	movs	r2, #1
100136dc:	4976      	ldr	r1, [pc, #472]	; (100138b8 <__aeabi_fadd+0x2e4>)
100136de:	401a      	ands	r2, r3
100136e0:	085b      	lsrs	r3, r3, #1
100136e2:	400b      	ands	r3, r1
100136e4:	4313      	orrs	r3, r2
100136e6:	e78c      	b.n	10013602 <__aeabi_fadd+0x2e>
100136e8:	1e03      	subs	r3, r0, #0
100136ea:	d1ca      	bne.n	10013682 <__aeabi_fadd+0xae>
100136ec:	2000      	movs	r0, #0
100136ee:	027b      	lsls	r3, r7, #9
100136f0:	0a5b      	lsrs	r3, r3, #9
100136f2:	b2e4      	uxtb	r4, r4
100136f4:	e796      	b.n	10013624 <__aeabi_fadd+0x50>
100136f6:	3801      	subs	r0, #1
100136f8:	2800      	cmp	r0, #0
100136fa:	d0aa      	beq.n	10013652 <__aeabi_fadd+0x7e>
100136fc:	2cff      	cmp	r4, #255	; 0xff
100136fe:	d19d      	bne.n	1001363c <__aeabi_fadd+0x68>
10013700:	e77f      	b.n	10013602 <__aeabi_fadd+0x2e>
10013702:	2a00      	cmp	r2, #0
10013704:	d100      	bne.n	10013708 <__aeabi_fadd+0x134>
10013706:	e77c      	b.n	10013602 <__aeabi_fadd+0x2e>
10013708:	3901      	subs	r1, #1
1001370a:	2900      	cmp	r1, #0
1001370c:	d0df      	beq.n	100136ce <__aeabi_fadd+0xfa>
1001370e:	2cff      	cmp	r4, #255	; 0xff
10013710:	d1d2      	bne.n	100136b8 <__aeabi_fadd+0xe4>
10013712:	e776      	b.n	10013602 <__aeabi_fadd+0x2e>
10013714:	2800      	cmp	r0, #0
10013716:	d120      	bne.n	1001375a <__aeabi_fadd+0x186>
10013718:	1c60      	adds	r0, r4, #1
1001371a:	b2c0      	uxtb	r0, r0
1001371c:	2801      	cmp	r0, #1
1001371e:	dd53      	ble.n	100137c8 <__aeabi_fadd+0x1f4>
10013720:	2780      	movs	r7, #128	; 0x80
10013722:	1a9e      	subs	r6, r3, r2
10013724:	04ff      	lsls	r7, r7, #19
10013726:	4037      	ands	r7, r6
10013728:	d02f      	beq.n	1001378a <__aeabi_fadd+0x1b6>
1001372a:	1ad6      	subs	r6, r2, r3
1001372c:	000d      	movs	r5, r1
1001372e:	e795      	b.n	1001365c <__aeabi_fadd+0x88>
10013730:	0028      	movs	r0, r5
10013732:	2300      	movs	r3, #0
10013734:	e776      	b.n	10013624 <__aeabi_fadd+0x50>
10013736:	4b61      	ldr	r3, [pc, #388]	; (100138bc <__aeabi_fadd+0x2e8>)
10013738:	1a24      	subs	r4, r4, r0
1001373a:	4033      	ands	r3, r6
1001373c:	e761      	b.n	10013602 <__aeabi_fadd+0x2e>
1001373e:	2900      	cmp	r1, #0
10013740:	d14d      	bne.n	100137de <__aeabi_fadd+0x20a>
10013742:	1c61      	adds	r1, r4, #1
10013744:	b2ce      	uxtb	r6, r1
10013746:	2e01      	cmp	r6, #1
10013748:	dd2f      	ble.n	100137aa <__aeabi_fadd+0x1d6>
1001374a:	29ff      	cmp	r1, #255	; 0xff
1001374c:	d02a      	beq.n	100137a4 <__aeabi_fadd+0x1d0>
1001374e:	189b      	adds	r3, r3, r2
10013750:	085b      	lsrs	r3, r3, #1
10013752:	000c      	movs	r4, r1
10013754:	e755      	b.n	10013602 <__aeabi_fadd+0x2e>
10013756:	2201      	movs	r2, #1
10013758:	e77b      	b.n	10013652 <__aeabi_fadd+0x7e>
1001375a:	2c00      	cmp	r4, #0
1001375c:	d11b      	bne.n	10013796 <__aeabi_fadd+0x1c2>
1001375e:	2b00      	cmp	r3, #0
10013760:	d05b      	beq.n	1001381a <__aeabi_fadd+0x246>
10013762:	43c0      	mvns	r0, r0
10013764:	2800      	cmp	r0, #0
10013766:	d00c      	beq.n	10013782 <__aeabi_fadd+0x1ae>
10013768:	2eff      	cmp	r6, #255	; 0xff
1001376a:	d07e      	beq.n	1001386a <__aeabi_fadd+0x296>
1001376c:	281b      	cmp	r0, #27
1001376e:	dd00      	ble.n	10013772 <__aeabi_fadd+0x19e>
10013770:	e092      	b.n	10013898 <__aeabi_fadd+0x2c4>
10013772:	001d      	movs	r5, r3
10013774:	2420      	movs	r4, #32
10013776:	40c5      	lsrs	r5, r0
10013778:	1a20      	subs	r0, r4, r0
1001377a:	4083      	lsls	r3, r0
1001377c:	1e58      	subs	r0, r3, #1
1001377e:	4183      	sbcs	r3, r0
10013780:	432b      	orrs	r3, r5
10013782:	1ad3      	subs	r3, r2, r3
10013784:	0034      	movs	r4, r6
10013786:	000d      	movs	r5, r1
10013788:	e764      	b.n	10013654 <__aeabi_fadd+0x80>
1001378a:	2e00      	cmp	r6, #0
1001378c:	d000      	beq.n	10013790 <__aeabi_fadd+0x1bc>
1001378e:	e765      	b.n	1001365c <__aeabi_fadd+0x88>
10013790:	2000      	movs	r0, #0
10013792:	2400      	movs	r4, #0
10013794:	e7ab      	b.n	100136ee <__aeabi_fadd+0x11a>
10013796:	2eff      	cmp	r6, #255	; 0xff
10013798:	d067      	beq.n	1001386a <__aeabi_fadd+0x296>
1001379a:	2480      	movs	r4, #128	; 0x80
1001379c:	04e4      	lsls	r4, r4, #19
1001379e:	4240      	negs	r0, r0
100137a0:	4323      	orrs	r3, r4
100137a2:	e7e3      	b.n	1001376c <__aeabi_fadd+0x198>
100137a4:	24ff      	movs	r4, #255	; 0xff
100137a6:	2300      	movs	r3, #0
100137a8:	e73c      	b.n	10013624 <__aeabi_fadd+0x50>
100137aa:	2c00      	cmp	r4, #0
100137ac:	d161      	bne.n	10013872 <__aeabi_fadd+0x29e>
100137ae:	2b00      	cmp	r3, #0
100137b0:	d07e      	beq.n	100138b0 <__aeabi_fadd+0x2dc>
100137b2:	2a00      	cmp	r2, #0
100137b4:	d100      	bne.n	100137b8 <__aeabi_fadd+0x1e4>
100137b6:	e724      	b.n	10013602 <__aeabi_fadd+0x2e>
100137b8:	189b      	adds	r3, r3, r2
100137ba:	015a      	lsls	r2, r3, #5
100137bc:	d400      	bmi.n	100137c0 <__aeabi_fadd+0x1ec>
100137be:	e760      	b.n	10013682 <__aeabi_fadd+0xae>
100137c0:	4a3e      	ldr	r2, [pc, #248]	; (100138bc <__aeabi_fadd+0x2e8>)
100137c2:	000c      	movs	r4, r1
100137c4:	4013      	ands	r3, r2
100137c6:	e71c      	b.n	10013602 <__aeabi_fadd+0x2e>
100137c8:	2c00      	cmp	r4, #0
100137ca:	d11e      	bne.n	1001380a <__aeabi_fadd+0x236>
100137cc:	2b00      	cmp	r3, #0
100137ce:	d12f      	bne.n	10013830 <__aeabi_fadd+0x25c>
100137d0:	2a00      	cmp	r2, #0
100137d2:	d066      	beq.n	100138a2 <__aeabi_fadd+0x2ce>
100137d4:	0013      	movs	r3, r2
100137d6:	000d      	movs	r5, r1
100137d8:	e713      	b.n	10013602 <__aeabi_fadd+0x2e>
100137da:	2201      	movs	r2, #1
100137dc:	e777      	b.n	100136ce <__aeabi_fadd+0xfa>
100137de:	2c00      	cmp	r4, #0
100137e0:	d11f      	bne.n	10013822 <__aeabi_fadd+0x24e>
100137e2:	2b00      	cmp	r3, #0
100137e4:	d05a      	beq.n	1001389c <__aeabi_fadd+0x2c8>
100137e6:	43c9      	mvns	r1, r1
100137e8:	2900      	cmp	r1, #0
100137ea:	d00b      	beq.n	10013804 <__aeabi_fadd+0x230>
100137ec:	2eff      	cmp	r6, #255	; 0xff
100137ee:	d050      	beq.n	10013892 <__aeabi_fadd+0x2be>
100137f0:	291b      	cmp	r1, #27
100137f2:	dc5f      	bgt.n	100138b4 <__aeabi_fadd+0x2e0>
100137f4:	001f      	movs	r7, r3
100137f6:	2420      	movs	r4, #32
100137f8:	40cf      	lsrs	r7, r1
100137fa:	1a61      	subs	r1, r4, r1
100137fc:	408b      	lsls	r3, r1
100137fe:	1e59      	subs	r1, r3, #1
10013800:	418b      	sbcs	r3, r1
10013802:	433b      	orrs	r3, r7
10013804:	189b      	adds	r3, r3, r2
10013806:	0034      	movs	r4, r6
10013808:	e762      	b.n	100136d0 <__aeabi_fadd+0xfc>
1001380a:	2b00      	cmp	r3, #0
1001380c:	d11c      	bne.n	10013848 <__aeabi_fadd+0x274>
1001380e:	2a00      	cmp	r2, #0
10013810:	d04a      	beq.n	100138a8 <__aeabi_fadd+0x2d4>
10013812:	0013      	movs	r3, r2
10013814:	000d      	movs	r5, r1
10013816:	24ff      	movs	r4, #255	; 0xff
10013818:	e6f3      	b.n	10013602 <__aeabi_fadd+0x2e>
1001381a:	0013      	movs	r3, r2
1001381c:	0034      	movs	r4, r6
1001381e:	000d      	movs	r5, r1
10013820:	e6ef      	b.n	10013602 <__aeabi_fadd+0x2e>
10013822:	2eff      	cmp	r6, #255	; 0xff
10013824:	d035      	beq.n	10013892 <__aeabi_fadd+0x2be>
10013826:	2480      	movs	r4, #128	; 0x80
10013828:	04e4      	lsls	r4, r4, #19
1001382a:	4249      	negs	r1, r1
1001382c:	4323      	orrs	r3, r4
1001382e:	e7df      	b.n	100137f0 <__aeabi_fadd+0x21c>
10013830:	2a00      	cmp	r2, #0
10013832:	d100      	bne.n	10013836 <__aeabi_fadd+0x262>
10013834:	e6e5      	b.n	10013602 <__aeabi_fadd+0x2e>
10013836:	2780      	movs	r7, #128	; 0x80
10013838:	1a98      	subs	r0, r3, r2
1001383a:	04ff      	lsls	r7, r7, #19
1001383c:	4007      	ands	r7, r0
1001383e:	d100      	bne.n	10013842 <__aeabi_fadd+0x26e>
10013840:	e752      	b.n	100136e8 <__aeabi_fadd+0x114>
10013842:	1ad3      	subs	r3, r2, r3
10013844:	000d      	movs	r5, r1
10013846:	e6dc      	b.n	10013602 <__aeabi_fadd+0x2e>
10013848:	24ff      	movs	r4, #255	; 0xff
1001384a:	2a00      	cmp	r2, #0
1001384c:	d100      	bne.n	10013850 <__aeabi_fadd+0x27c>
1001384e:	e6d8      	b.n	10013602 <__aeabi_fadd+0x2e>
10013850:	2080      	movs	r0, #128	; 0x80
10013852:	08db      	lsrs	r3, r3, #3
10013854:	03c0      	lsls	r0, r0, #15
10013856:	4203      	tst	r3, r0
10013858:	d004      	beq.n	10013864 <__aeabi_fadd+0x290>
1001385a:	08d2      	lsrs	r2, r2, #3
1001385c:	4202      	tst	r2, r0
1001385e:	d101      	bne.n	10013864 <__aeabi_fadd+0x290>
10013860:	0013      	movs	r3, r2
10013862:	000d      	movs	r5, r1
10013864:	00db      	lsls	r3, r3, #3
10013866:	24ff      	movs	r4, #255	; 0xff
10013868:	e6cb      	b.n	10013602 <__aeabi_fadd+0x2e>
1001386a:	0013      	movs	r3, r2
1001386c:	24ff      	movs	r4, #255	; 0xff
1001386e:	000d      	movs	r5, r1
10013870:	e6c7      	b.n	10013602 <__aeabi_fadd+0x2e>
10013872:	2b00      	cmp	r3, #0
10013874:	d00d      	beq.n	10013892 <__aeabi_fadd+0x2be>
10013876:	24ff      	movs	r4, #255	; 0xff
10013878:	2a00      	cmp	r2, #0
1001387a:	d100      	bne.n	1001387e <__aeabi_fadd+0x2aa>
1001387c:	e6c1      	b.n	10013602 <__aeabi_fadd+0x2e>
1001387e:	2180      	movs	r1, #128	; 0x80
10013880:	08db      	lsrs	r3, r3, #3
10013882:	03c9      	lsls	r1, r1, #15
10013884:	420b      	tst	r3, r1
10013886:	d0ed      	beq.n	10013864 <__aeabi_fadd+0x290>
10013888:	08d2      	lsrs	r2, r2, #3
1001388a:	420a      	tst	r2, r1
1001388c:	d1ea      	bne.n	10013864 <__aeabi_fadd+0x290>
1001388e:	0013      	movs	r3, r2
10013890:	e7e8      	b.n	10013864 <__aeabi_fadd+0x290>
10013892:	0013      	movs	r3, r2
10013894:	24ff      	movs	r4, #255	; 0xff
10013896:	e6b4      	b.n	10013602 <__aeabi_fadd+0x2e>
10013898:	2301      	movs	r3, #1
1001389a:	e772      	b.n	10013782 <__aeabi_fadd+0x1ae>
1001389c:	0013      	movs	r3, r2
1001389e:	0034      	movs	r4, r6
100138a0:	e6af      	b.n	10013602 <__aeabi_fadd+0x2e>
100138a2:	2700      	movs	r7, #0
100138a4:	2000      	movs	r0, #0
100138a6:	e722      	b.n	100136ee <__aeabi_fadd+0x11a>
100138a8:	2780      	movs	r7, #128	; 0x80
100138aa:	2000      	movs	r0, #0
100138ac:	03ff      	lsls	r7, r7, #15
100138ae:	e6f1      	b.n	10013694 <__aeabi_fadd+0xc0>
100138b0:	0013      	movs	r3, r2
100138b2:	e6a6      	b.n	10013602 <__aeabi_fadd+0x2e>
100138b4:	2301      	movs	r3, #1
100138b6:	e7a5      	b.n	10013804 <__aeabi_fadd+0x230>
100138b8:	7dffffff 	.word	0x7dffffff
100138bc:	fbffffff 	.word	0xfbffffff

100138c0 <__aeabi_fdiv>:
100138c0:	b5f0      	push	{r4, r5, r6, r7, lr}
100138c2:	4656      	mov	r6, sl
100138c4:	4644      	mov	r4, r8
100138c6:	465f      	mov	r7, fp
100138c8:	464d      	mov	r5, r9
100138ca:	b4f0      	push	{r4, r5, r6, r7}
100138cc:	0244      	lsls	r4, r0, #9
100138ce:	0046      	lsls	r6, r0, #1
100138d0:	0fc7      	lsrs	r7, r0, #31
100138d2:	b083      	sub	sp, #12
100138d4:	4688      	mov	r8, r1
100138d6:	0a65      	lsrs	r5, r4, #9
100138d8:	0e36      	lsrs	r6, r6, #24
100138da:	46ba      	mov	sl, r7
100138dc:	d03d      	beq.n	1001395a <__aeabi_fdiv+0x9a>
100138de:	2eff      	cmp	r6, #255	; 0xff
100138e0:	d022      	beq.n	10013928 <__aeabi_fdiv+0x68>
100138e2:	2300      	movs	r3, #0
100138e4:	00ec      	lsls	r4, r5, #3
100138e6:	2580      	movs	r5, #128	; 0x80
100138e8:	4699      	mov	r9, r3
100138ea:	469b      	mov	fp, r3
100138ec:	04ed      	lsls	r5, r5, #19
100138ee:	4325      	orrs	r5, r4
100138f0:	3e7f      	subs	r6, #127	; 0x7f
100138f2:	4643      	mov	r3, r8
100138f4:	025c      	lsls	r4, r3, #9
100138f6:	0058      	lsls	r0, r3, #1
100138f8:	0fdb      	lsrs	r3, r3, #31
100138fa:	0a64      	lsrs	r4, r4, #9
100138fc:	0e00      	lsrs	r0, r0, #24
100138fe:	4698      	mov	r8, r3
10013900:	d036      	beq.n	10013970 <__aeabi_fdiv+0xb0>
10013902:	28ff      	cmp	r0, #255	; 0xff
10013904:	d030      	beq.n	10013968 <__aeabi_fdiv+0xa8>
10013906:	2380      	movs	r3, #128	; 0x80
10013908:	2100      	movs	r1, #0
1001390a:	00e4      	lsls	r4, r4, #3
1001390c:	04db      	lsls	r3, r3, #19
1001390e:	431c      	orrs	r4, r3
10013910:	387f      	subs	r0, #127	; 0x7f
10013912:	1a30      	subs	r0, r6, r0
10013914:	9001      	str	r0, [sp, #4]
10013916:	4648      	mov	r0, r9
10013918:	4642      	mov	r2, r8
1001391a:	4308      	orrs	r0, r1
1001391c:	4e72      	ldr	r6, [pc, #456]	; (10013ae8 <__aeabi_fdiv+0x228>)
1001391e:	0080      	lsls	r0, r0, #2
10013920:	5830      	ldr	r0, [r6, r0]
10013922:	407a      	eors	r2, r7
10013924:	0013      	movs	r3, r2
10013926:	4687      	mov	pc, r0
10013928:	2d00      	cmp	r5, #0
1001392a:	d144      	bne.n	100139b6 <__aeabi_fdiv+0xf6>
1001392c:	2308      	movs	r3, #8
1001392e:	4699      	mov	r9, r3
10013930:	3b06      	subs	r3, #6
10013932:	469b      	mov	fp, r3
10013934:	e7dd      	b.n	100138f2 <__aeabi_fdiv+0x32>
10013936:	2201      	movs	r2, #1
10013938:	20ff      	movs	r0, #255	; 0xff
1001393a:	2400      	movs	r4, #0
1001393c:	401a      	ands	r2, r3
1001393e:	0264      	lsls	r4, r4, #9
10013940:	05c3      	lsls	r3, r0, #23
10013942:	0a64      	lsrs	r4, r4, #9
10013944:	07d2      	lsls	r2, r2, #31
10013946:	431c      	orrs	r4, r3
10013948:	4314      	orrs	r4, r2
1001394a:	0020      	movs	r0, r4
1001394c:	b003      	add	sp, #12
1001394e:	bc3c      	pop	{r2, r3, r4, r5}
10013950:	4690      	mov	r8, r2
10013952:	4699      	mov	r9, r3
10013954:	46a2      	mov	sl, r4
10013956:	46ab      	mov	fp, r5
10013958:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001395a:	2d00      	cmp	r5, #0
1001395c:	d120      	bne.n	100139a0 <__aeabi_fdiv+0xe0>
1001395e:	2304      	movs	r3, #4
10013960:	4699      	mov	r9, r3
10013962:	3b03      	subs	r3, #3
10013964:	469b      	mov	fp, r3
10013966:	e7c4      	b.n	100138f2 <__aeabi_fdiv+0x32>
10013968:	2c00      	cmp	r4, #0
1001396a:	d117      	bne.n	1001399c <__aeabi_fdiv+0xdc>
1001396c:	2102      	movs	r1, #2
1001396e:	e002      	b.n	10013976 <__aeabi_fdiv+0xb6>
10013970:	2c00      	cmp	r4, #0
10013972:	d10a      	bne.n	1001398a <__aeabi_fdiv+0xca>
10013974:	2101      	movs	r1, #1
10013976:	1a32      	subs	r2, r6, r0
10013978:	9201      	str	r2, [sp, #4]
1001397a:	464a      	mov	r2, r9
1001397c:	4643      	mov	r3, r8
1001397e:	430a      	orrs	r2, r1
10013980:	485a      	ldr	r0, [pc, #360]	; (10013aec <__aeabi_fdiv+0x22c>)
10013982:	0092      	lsls	r2, r2, #2
10013984:	5882      	ldr	r2, [r0, r2]
10013986:	407b      	eors	r3, r7
10013988:	4697      	mov	pc, r2
1001398a:	0020      	movs	r0, r4
1001398c:	f001 fbee 	bl	1001516c <__clzsi2>
10013990:	1f43      	subs	r3, r0, #5
10013992:	3076      	adds	r0, #118	; 0x76
10013994:	409c      	lsls	r4, r3
10013996:	4240      	negs	r0, r0
10013998:	2100      	movs	r1, #0
1001399a:	e7ba      	b.n	10013912 <__aeabi_fdiv+0x52>
1001399c:	2103      	movs	r1, #3
1001399e:	e7b8      	b.n	10013912 <__aeabi_fdiv+0x52>
100139a0:	0028      	movs	r0, r5
100139a2:	f001 fbe3 	bl	1001516c <__clzsi2>
100139a6:	1f43      	subs	r3, r0, #5
100139a8:	409d      	lsls	r5, r3
100139aa:	2300      	movs	r3, #0
100139ac:	3076      	adds	r0, #118	; 0x76
100139ae:	4246      	negs	r6, r0
100139b0:	4699      	mov	r9, r3
100139b2:	469b      	mov	fp, r3
100139b4:	e79d      	b.n	100138f2 <__aeabi_fdiv+0x32>
100139b6:	230c      	movs	r3, #12
100139b8:	4699      	mov	r9, r3
100139ba:	3b09      	subs	r3, #9
100139bc:	469b      	mov	fp, r3
100139be:	e798      	b.n	100138f2 <__aeabi_fdiv+0x32>
100139c0:	2480      	movs	r4, #128	; 0x80
100139c2:	2200      	movs	r2, #0
100139c4:	03e4      	lsls	r4, r4, #15
100139c6:	20ff      	movs	r0, #255	; 0xff
100139c8:	e7b9      	b.n	1001393e <__aeabi_fdiv+0x7e>
100139ca:	2400      	movs	r4, #0
100139cc:	46c2      	mov	sl, r8
100139ce:	468b      	mov	fp, r1
100139d0:	465a      	mov	r2, fp
100139d2:	4653      	mov	r3, sl
100139d4:	2a02      	cmp	r2, #2
100139d6:	d0ae      	beq.n	10013936 <__aeabi_fdiv+0x76>
100139d8:	2a03      	cmp	r2, #3
100139da:	d07d      	beq.n	10013ad8 <__aeabi_fdiv+0x218>
100139dc:	2a01      	cmp	r2, #1
100139de:	d131      	bne.n	10013a44 <__aeabi_fdiv+0x184>
100139e0:	2201      	movs	r2, #1
100139e2:	2000      	movs	r0, #0
100139e4:	401a      	ands	r2, r3
100139e6:	2400      	movs	r4, #0
100139e8:	e7a9      	b.n	1001393e <__aeabi_fdiv+0x7e>
100139ea:	2201      	movs	r2, #1
100139ec:	1a10      	subs	r0, r2, r0
100139ee:	281b      	cmp	r0, #27
100139f0:	dd56      	ble.n	10013aa0 <__aeabi_fdiv+0x1e0>
100139f2:	401a      	ands	r2, r3
100139f4:	2000      	movs	r0, #0
100139f6:	2400      	movs	r4, #0
100139f8:	e7a1      	b.n	1001393e <__aeabi_fdiv+0x7e>
100139fa:	2380      	movs	r3, #128	; 0x80
100139fc:	03db      	lsls	r3, r3, #15
100139fe:	421d      	tst	r5, r3
10013a00:	d14b      	bne.n	10013a9a <__aeabi_fdiv+0x1da>
10013a02:	2380      	movs	r3, #128	; 0x80
10013a04:	03db      	lsls	r3, r3, #15
10013a06:	432b      	orrs	r3, r5
10013a08:	025c      	lsls	r4, r3, #9
10013a0a:	0a64      	lsrs	r4, r4, #9
10013a0c:	003a      	movs	r2, r7
10013a0e:	20ff      	movs	r0, #255	; 0xff
10013a10:	e795      	b.n	1001393e <__aeabi_fdiv+0x7e>
10013a12:	016d      	lsls	r5, r5, #5
10013a14:	0160      	lsls	r0, r4, #5
10013a16:	4285      	cmp	r5, r0
10013a18:	d230      	bcs.n	10013a7c <__aeabi_fdiv+0x1bc>
10013a1a:	9a01      	ldr	r2, [sp, #4]
10013a1c:	2400      	movs	r4, #0
10013a1e:	3a01      	subs	r2, #1
10013a20:	9201      	str	r2, [sp, #4]
10013a22:	221b      	movs	r2, #27
10013a24:	2701      	movs	r7, #1
10013a26:	0029      	movs	r1, r5
10013a28:	0064      	lsls	r4, r4, #1
10013a2a:	006d      	lsls	r5, r5, #1
10013a2c:	2900      	cmp	r1, #0
10013a2e:	db01      	blt.n	10013a34 <__aeabi_fdiv+0x174>
10013a30:	42a8      	cmp	r0, r5
10013a32:	d801      	bhi.n	10013a38 <__aeabi_fdiv+0x178>
10013a34:	1a2d      	subs	r5, r5, r0
10013a36:	433c      	orrs	r4, r7
10013a38:	3a01      	subs	r2, #1
10013a3a:	2a00      	cmp	r2, #0
10013a3c:	d1f3      	bne.n	10013a26 <__aeabi_fdiv+0x166>
10013a3e:	1e6a      	subs	r2, r5, #1
10013a40:	4195      	sbcs	r5, r2
10013a42:	432c      	orrs	r4, r5
10013a44:	9801      	ldr	r0, [sp, #4]
10013a46:	307f      	adds	r0, #127	; 0x7f
10013a48:	2800      	cmp	r0, #0
10013a4a:	ddce      	ble.n	100139ea <__aeabi_fdiv+0x12a>
10013a4c:	0762      	lsls	r2, r4, #29
10013a4e:	d004      	beq.n	10013a5a <__aeabi_fdiv+0x19a>
10013a50:	220f      	movs	r2, #15
10013a52:	4022      	ands	r2, r4
10013a54:	2a04      	cmp	r2, #4
10013a56:	d000      	beq.n	10013a5a <__aeabi_fdiv+0x19a>
10013a58:	3404      	adds	r4, #4
10013a5a:	0122      	lsls	r2, r4, #4
10013a5c:	d503      	bpl.n	10013a66 <__aeabi_fdiv+0x1a6>
10013a5e:	4a24      	ldr	r2, [pc, #144]	; (10013af0 <__aeabi_fdiv+0x230>)
10013a60:	9801      	ldr	r0, [sp, #4]
10013a62:	4014      	ands	r4, r2
10013a64:	3080      	adds	r0, #128	; 0x80
10013a66:	28fe      	cmp	r0, #254	; 0xfe
10013a68:	dd00      	ble.n	10013a6c <__aeabi_fdiv+0x1ac>
10013a6a:	e764      	b.n	10013936 <__aeabi_fdiv+0x76>
10013a6c:	2201      	movs	r2, #1
10013a6e:	01a4      	lsls	r4, r4, #6
10013a70:	0a64      	lsrs	r4, r4, #9
10013a72:	b2c0      	uxtb	r0, r0
10013a74:	401a      	ands	r2, r3
10013a76:	e762      	b.n	1001393e <__aeabi_fdiv+0x7e>
10013a78:	002c      	movs	r4, r5
10013a7a:	e7a9      	b.n	100139d0 <__aeabi_fdiv+0x110>
10013a7c:	1a2d      	subs	r5, r5, r0
10013a7e:	221a      	movs	r2, #26
10013a80:	2401      	movs	r4, #1
10013a82:	e7cf      	b.n	10013a24 <__aeabi_fdiv+0x164>
10013a84:	026b      	lsls	r3, r5, #9
10013a86:	d5bc      	bpl.n	10013a02 <__aeabi_fdiv+0x142>
10013a88:	2400      	movs	r4, #0
10013a8a:	2380      	movs	r3, #128	; 0x80
10013a8c:	03db      	lsls	r3, r3, #15
10013a8e:	431c      	orrs	r4, r3
10013a90:	0264      	lsls	r4, r4, #9
10013a92:	0a64      	lsrs	r4, r4, #9
10013a94:	4642      	mov	r2, r8
10013a96:	20ff      	movs	r0, #255	; 0xff
10013a98:	e751      	b.n	1001393e <__aeabi_fdiv+0x7e>
10013a9a:	421c      	tst	r4, r3
10013a9c:	d1b3      	bne.n	10013a06 <__aeabi_fdiv+0x146>
10013a9e:	e7f4      	b.n	10013a8a <__aeabi_fdiv+0x1ca>
10013aa0:	0021      	movs	r1, r4
10013aa2:	2220      	movs	r2, #32
10013aa4:	40c1      	lsrs	r1, r0
10013aa6:	1a10      	subs	r0, r2, r0
10013aa8:	4084      	lsls	r4, r0
10013aaa:	1e62      	subs	r2, r4, #1
10013aac:	4194      	sbcs	r4, r2
10013aae:	430c      	orrs	r4, r1
10013ab0:	0762      	lsls	r2, r4, #29
10013ab2:	d004      	beq.n	10013abe <__aeabi_fdiv+0x1fe>
10013ab4:	220f      	movs	r2, #15
10013ab6:	4022      	ands	r2, r4
10013ab8:	2a04      	cmp	r2, #4
10013aba:	d000      	beq.n	10013abe <__aeabi_fdiv+0x1fe>
10013abc:	3404      	adds	r4, #4
10013abe:	0162      	lsls	r2, r4, #5
10013ac0:	d504      	bpl.n	10013acc <__aeabi_fdiv+0x20c>
10013ac2:	2201      	movs	r2, #1
10013ac4:	2001      	movs	r0, #1
10013ac6:	401a      	ands	r2, r3
10013ac8:	2400      	movs	r4, #0
10013aca:	e738      	b.n	1001393e <__aeabi_fdiv+0x7e>
10013acc:	2201      	movs	r2, #1
10013ace:	01a4      	lsls	r4, r4, #6
10013ad0:	0a64      	lsrs	r4, r4, #9
10013ad2:	401a      	ands	r2, r3
10013ad4:	2000      	movs	r0, #0
10013ad6:	e732      	b.n	1001393e <__aeabi_fdiv+0x7e>
10013ad8:	2380      	movs	r3, #128	; 0x80
10013ada:	03db      	lsls	r3, r3, #15
10013adc:	431c      	orrs	r4, r3
10013ade:	0264      	lsls	r4, r4, #9
10013ae0:	0a64      	lsrs	r4, r4, #9
10013ae2:	4652      	mov	r2, sl
10013ae4:	20ff      	movs	r0, #255	; 0xff
10013ae6:	e72a      	b.n	1001393e <__aeabi_fdiv+0x7e>
10013ae8:	10018444 	.word	0x10018444
10013aec:	10018484 	.word	0x10018484
10013af0:	f7ffffff 	.word	0xf7ffffff

10013af4 <__eqsf2>:
10013af4:	0243      	lsls	r3, r0, #9
10013af6:	b570      	push	{r4, r5, r6, lr}
10013af8:	0042      	lsls	r2, r0, #1
10013afa:	004c      	lsls	r4, r1, #1
10013afc:	0a5d      	lsrs	r5, r3, #9
10013afe:	0fc3      	lsrs	r3, r0, #31
10013b00:	0248      	lsls	r0, r1, #9
10013b02:	0e12      	lsrs	r2, r2, #24
10013b04:	0a46      	lsrs	r6, r0, #9
10013b06:	0e24      	lsrs	r4, r4, #24
10013b08:	0fc9      	lsrs	r1, r1, #31
10013b0a:	2aff      	cmp	r2, #255	; 0xff
10013b0c:	d00f      	beq.n	10013b2e <__eqsf2+0x3a>
10013b0e:	2cff      	cmp	r4, #255	; 0xff
10013b10:	d011      	beq.n	10013b36 <__eqsf2+0x42>
10013b12:	2001      	movs	r0, #1
10013b14:	42a2      	cmp	r2, r4
10013b16:	d000      	beq.n	10013b1a <__eqsf2+0x26>
10013b18:	bd70      	pop	{r4, r5, r6, pc}
10013b1a:	42b5      	cmp	r5, r6
10013b1c:	d1fc      	bne.n	10013b18 <__eqsf2+0x24>
10013b1e:	428b      	cmp	r3, r1
10013b20:	d00d      	beq.n	10013b3e <__eqsf2+0x4a>
10013b22:	2a00      	cmp	r2, #0
10013b24:	d1f8      	bne.n	10013b18 <__eqsf2+0x24>
10013b26:	0028      	movs	r0, r5
10013b28:	1e43      	subs	r3, r0, #1
10013b2a:	4198      	sbcs	r0, r3
10013b2c:	e7f4      	b.n	10013b18 <__eqsf2+0x24>
10013b2e:	2001      	movs	r0, #1
10013b30:	2d00      	cmp	r5, #0
10013b32:	d1f1      	bne.n	10013b18 <__eqsf2+0x24>
10013b34:	e7eb      	b.n	10013b0e <__eqsf2+0x1a>
10013b36:	2001      	movs	r0, #1
10013b38:	2e00      	cmp	r6, #0
10013b3a:	d1ed      	bne.n	10013b18 <__eqsf2+0x24>
10013b3c:	e7e9      	b.n	10013b12 <__eqsf2+0x1e>
10013b3e:	2000      	movs	r0, #0
10013b40:	e7ea      	b.n	10013b18 <__eqsf2+0x24>
10013b42:	46c0      	nop			; (mov r8, r8)

10013b44 <__gesf2>:
10013b44:	0243      	lsls	r3, r0, #9
10013b46:	b5f0      	push	{r4, r5, r6, r7, lr}
10013b48:	0042      	lsls	r2, r0, #1
10013b4a:	0a5d      	lsrs	r5, r3, #9
10013b4c:	0fc3      	lsrs	r3, r0, #31
10013b4e:	0248      	lsls	r0, r1, #9
10013b50:	0a44      	lsrs	r4, r0, #9
10013b52:	0048      	lsls	r0, r1, #1
10013b54:	0e12      	lsrs	r2, r2, #24
10013b56:	0e00      	lsrs	r0, r0, #24
10013b58:	0fc9      	lsrs	r1, r1, #31
10013b5a:	2aff      	cmp	r2, #255	; 0xff
10013b5c:	d01f      	beq.n	10013b9e <__gesf2+0x5a>
10013b5e:	28ff      	cmp	r0, #255	; 0xff
10013b60:	d022      	beq.n	10013ba8 <__gesf2+0x64>
10013b62:	2a00      	cmp	r2, #0
10013b64:	d109      	bne.n	10013b7a <__gesf2+0x36>
10013b66:	426e      	negs	r6, r5
10013b68:	416e      	adcs	r6, r5
10013b6a:	2800      	cmp	r0, #0
10013b6c:	d10f      	bne.n	10013b8e <__gesf2+0x4a>
10013b6e:	2c00      	cmp	r4, #0
10013b70:	d10d      	bne.n	10013b8e <__gesf2+0x4a>
10013b72:	2000      	movs	r0, #0
10013b74:	2d00      	cmp	r5, #0
10013b76:	d009      	beq.n	10013b8c <__gesf2+0x48>
10013b78:	e005      	b.n	10013b86 <__gesf2+0x42>
10013b7a:	2800      	cmp	r0, #0
10013b7c:	d101      	bne.n	10013b82 <__gesf2+0x3e>
10013b7e:	2c00      	cmp	r4, #0
10013b80:	d001      	beq.n	10013b86 <__gesf2+0x42>
10013b82:	428b      	cmp	r3, r1
10013b84:	d013      	beq.n	10013bae <__gesf2+0x6a>
10013b86:	4258      	negs	r0, r3
10013b88:	2301      	movs	r3, #1
10013b8a:	4318      	orrs	r0, r3
10013b8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
10013b8e:	2e00      	cmp	r6, #0
10013b90:	d0f7      	beq.n	10013b82 <__gesf2+0x3e>
10013b92:	4248      	negs	r0, r1
10013b94:	4141      	adcs	r1, r0
10013b96:	2001      	movs	r0, #1
10013b98:	4249      	negs	r1, r1
10013b9a:	4308      	orrs	r0, r1
10013b9c:	e7f6      	b.n	10013b8c <__gesf2+0x48>
10013b9e:	2d00      	cmp	r5, #0
10013ba0:	d0dd      	beq.n	10013b5e <__gesf2+0x1a>
10013ba2:	2002      	movs	r0, #2
10013ba4:	4240      	negs	r0, r0
10013ba6:	e7f1      	b.n	10013b8c <__gesf2+0x48>
10013ba8:	2c00      	cmp	r4, #0
10013baa:	d0da      	beq.n	10013b62 <__gesf2+0x1e>
10013bac:	e7f9      	b.n	10013ba2 <__gesf2+0x5e>
10013bae:	4282      	cmp	r2, r0
10013bb0:	dce9      	bgt.n	10013b86 <__gesf2+0x42>
10013bb2:	db04      	blt.n	10013bbe <__gesf2+0x7a>
10013bb4:	42a5      	cmp	r5, r4
10013bb6:	d8e6      	bhi.n	10013b86 <__gesf2+0x42>
10013bb8:	2000      	movs	r0, #0
10013bba:	42a5      	cmp	r5, r4
10013bbc:	d2e6      	bcs.n	10013b8c <__gesf2+0x48>
10013bbe:	4258      	negs	r0, r3
10013bc0:	4143      	adcs	r3, r0
10013bc2:	2001      	movs	r0, #1
10013bc4:	425b      	negs	r3, r3
10013bc6:	4318      	orrs	r0, r3
10013bc8:	e7e0      	b.n	10013b8c <__gesf2+0x48>
10013bca:	46c0      	nop			; (mov r8, r8)

10013bcc <__lesf2>:
10013bcc:	0243      	lsls	r3, r0, #9
10013bce:	b5f0      	push	{r4, r5, r6, r7, lr}
10013bd0:	0042      	lsls	r2, r0, #1
10013bd2:	004c      	lsls	r4, r1, #1
10013bd4:	0a5e      	lsrs	r6, r3, #9
10013bd6:	0fc3      	lsrs	r3, r0, #31
10013bd8:	0248      	lsls	r0, r1, #9
10013bda:	0e12      	lsrs	r2, r2, #24
10013bdc:	0a45      	lsrs	r5, r0, #9
10013bde:	0e24      	lsrs	r4, r4, #24
10013be0:	0fc9      	lsrs	r1, r1, #31
10013be2:	2aff      	cmp	r2, #255	; 0xff
10013be4:	d017      	beq.n	10013c16 <__lesf2+0x4a>
10013be6:	2cff      	cmp	r4, #255	; 0xff
10013be8:	d019      	beq.n	10013c1e <__lesf2+0x52>
10013bea:	2a00      	cmp	r2, #0
10013bec:	d10b      	bne.n	10013c06 <__lesf2+0x3a>
10013bee:	4270      	negs	r0, r6
10013bf0:	4170      	adcs	r0, r6
10013bf2:	2c00      	cmp	r4, #0
10013bf4:	d017      	beq.n	10013c26 <__lesf2+0x5a>
10013bf6:	2800      	cmp	r0, #0
10013bf8:	d007      	beq.n	10013c0a <__lesf2+0x3e>
10013bfa:	4248      	negs	r0, r1
10013bfc:	4141      	adcs	r1, r0
10013bfe:	2001      	movs	r0, #1
10013c00:	4249      	negs	r1, r1
10013c02:	4308      	orrs	r0, r1
10013c04:	bdf0      	pop	{r4, r5, r6, r7, pc}
10013c06:	2c00      	cmp	r4, #0
10013c08:	d013      	beq.n	10013c32 <__lesf2+0x66>
10013c0a:	428b      	cmp	r3, r1
10013c0c:	d014      	beq.n	10013c38 <__lesf2+0x6c>
10013c0e:	4258      	negs	r0, r3
10013c10:	2301      	movs	r3, #1
10013c12:	4318      	orrs	r0, r3
10013c14:	e7f6      	b.n	10013c04 <__lesf2+0x38>
10013c16:	2002      	movs	r0, #2
10013c18:	2e00      	cmp	r6, #0
10013c1a:	d1f3      	bne.n	10013c04 <__lesf2+0x38>
10013c1c:	e7e3      	b.n	10013be6 <__lesf2+0x1a>
10013c1e:	2002      	movs	r0, #2
10013c20:	2d00      	cmp	r5, #0
10013c22:	d1ef      	bne.n	10013c04 <__lesf2+0x38>
10013c24:	e7e1      	b.n	10013bea <__lesf2+0x1e>
10013c26:	2d00      	cmp	r5, #0
10013c28:	d1e5      	bne.n	10013bf6 <__lesf2+0x2a>
10013c2a:	2000      	movs	r0, #0
10013c2c:	2e00      	cmp	r6, #0
10013c2e:	d0e9      	beq.n	10013c04 <__lesf2+0x38>
10013c30:	e7ed      	b.n	10013c0e <__lesf2+0x42>
10013c32:	2d00      	cmp	r5, #0
10013c34:	d1e9      	bne.n	10013c0a <__lesf2+0x3e>
10013c36:	e7ea      	b.n	10013c0e <__lesf2+0x42>
10013c38:	42a2      	cmp	r2, r4
10013c3a:	dce8      	bgt.n	10013c0e <__lesf2+0x42>
10013c3c:	db04      	blt.n	10013c48 <__lesf2+0x7c>
10013c3e:	42ae      	cmp	r6, r5
10013c40:	d8e5      	bhi.n	10013c0e <__lesf2+0x42>
10013c42:	2000      	movs	r0, #0
10013c44:	42ae      	cmp	r6, r5
10013c46:	d2dd      	bcs.n	10013c04 <__lesf2+0x38>
10013c48:	4258      	negs	r0, r3
10013c4a:	4143      	adcs	r3, r0
10013c4c:	2001      	movs	r0, #1
10013c4e:	425b      	negs	r3, r3
10013c50:	4318      	orrs	r0, r3
10013c52:	e7d7      	b.n	10013c04 <__lesf2+0x38>

10013c54 <__aeabi_fmul>:
10013c54:	b5f0      	push	{r4, r5, r6, r7, lr}
10013c56:	4657      	mov	r7, sl
10013c58:	464e      	mov	r6, r9
10013c5a:	4645      	mov	r5, r8
10013c5c:	0043      	lsls	r3, r0, #1
10013c5e:	b4e0      	push	{r5, r6, r7}
10013c60:	0246      	lsls	r6, r0, #9
10013c62:	4688      	mov	r8, r1
10013c64:	0a76      	lsrs	r6, r6, #9
10013c66:	0e1f      	lsrs	r7, r3, #24
10013c68:	0fc4      	lsrs	r4, r0, #31
10013c6a:	2f00      	cmp	r7, #0
10013c6c:	d047      	beq.n	10013cfe <__aeabi_fmul+0xaa>
10013c6e:	2fff      	cmp	r7, #255	; 0xff
10013c70:	d025      	beq.n	10013cbe <__aeabi_fmul+0x6a>
10013c72:	2300      	movs	r3, #0
10013c74:	2580      	movs	r5, #128	; 0x80
10013c76:	469a      	mov	sl, r3
10013c78:	4699      	mov	r9, r3
10013c7a:	00f6      	lsls	r6, r6, #3
10013c7c:	04ed      	lsls	r5, r5, #19
10013c7e:	432e      	orrs	r6, r5
10013c80:	3f7f      	subs	r7, #127	; 0x7f
10013c82:	4643      	mov	r3, r8
10013c84:	4642      	mov	r2, r8
10013c86:	025d      	lsls	r5, r3, #9
10013c88:	0fd2      	lsrs	r2, r2, #31
10013c8a:	005b      	lsls	r3, r3, #1
10013c8c:	0a6d      	lsrs	r5, r5, #9
10013c8e:	0e1b      	lsrs	r3, r3, #24
10013c90:	4690      	mov	r8, r2
10013c92:	d040      	beq.n	10013d16 <__aeabi_fmul+0xc2>
10013c94:	2bff      	cmp	r3, #255	; 0xff
10013c96:	d039      	beq.n	10013d0c <__aeabi_fmul+0xb8>
10013c98:	2280      	movs	r2, #128	; 0x80
10013c9a:	2000      	movs	r0, #0
10013c9c:	00ed      	lsls	r5, r5, #3
10013c9e:	04d2      	lsls	r2, r2, #19
10013ca0:	4315      	orrs	r5, r2
10013ca2:	3b7f      	subs	r3, #127	; 0x7f
10013ca4:	18fb      	adds	r3, r7, r3
10013ca6:	4642      	mov	r2, r8
10013ca8:	4657      	mov	r7, sl
10013caa:	1c59      	adds	r1, r3, #1
10013cac:	4062      	eors	r2, r4
10013cae:	468c      	mov	ip, r1
10013cb0:	4307      	orrs	r7, r0
10013cb2:	2f0f      	cmp	r7, #15
10013cb4:	d85c      	bhi.n	10013d70 <__aeabi_fmul+0x11c>
10013cb6:	496f      	ldr	r1, [pc, #444]	; (10013e74 <__aeabi_fmul+0x220>)
10013cb8:	00bf      	lsls	r7, r7, #2
10013cba:	59c9      	ldr	r1, [r1, r7]
10013cbc:	468f      	mov	pc, r1
10013cbe:	2e00      	cmp	r6, #0
10013cc0:	d145      	bne.n	10013d4e <__aeabi_fmul+0xfa>
10013cc2:	2308      	movs	r3, #8
10013cc4:	469a      	mov	sl, r3
10013cc6:	3b06      	subs	r3, #6
10013cc8:	4699      	mov	r9, r3
10013cca:	e7da      	b.n	10013c82 <__aeabi_fmul+0x2e>
10013ccc:	4642      	mov	r2, r8
10013cce:	2802      	cmp	r0, #2
10013cd0:	d02d      	beq.n	10013d2e <__aeabi_fmul+0xda>
10013cd2:	2803      	cmp	r0, #3
10013cd4:	d100      	bne.n	10013cd8 <__aeabi_fmul+0x84>
10013cd6:	e0c3      	b.n	10013e60 <__aeabi_fmul+0x20c>
10013cd8:	2801      	cmp	r0, #1
10013cda:	d000      	beq.n	10013cde <__aeabi_fmul+0x8a>
10013cdc:	e0a2      	b.n	10013e24 <__aeabi_fmul+0x1d0>
10013cde:	2500      	movs	r5, #0
10013ce0:	2600      	movs	r6, #0
10013ce2:	4002      	ands	r2, r0
10013ce4:	b2d4      	uxtb	r4, r2
10013ce6:	0276      	lsls	r6, r6, #9
10013ce8:	05ed      	lsls	r5, r5, #23
10013cea:	0a76      	lsrs	r6, r6, #9
10013cec:	432e      	orrs	r6, r5
10013cee:	07e4      	lsls	r4, r4, #31
10013cf0:	4326      	orrs	r6, r4
10013cf2:	0030      	movs	r0, r6
10013cf4:	bc1c      	pop	{r2, r3, r4}
10013cf6:	4690      	mov	r8, r2
10013cf8:	4699      	mov	r9, r3
10013cfa:	46a2      	mov	sl, r4
10013cfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
10013cfe:	2e00      	cmp	r6, #0
10013d00:	d11a      	bne.n	10013d38 <__aeabi_fmul+0xe4>
10013d02:	2304      	movs	r3, #4
10013d04:	469a      	mov	sl, r3
10013d06:	3b03      	subs	r3, #3
10013d08:	4699      	mov	r9, r3
10013d0a:	e7ba      	b.n	10013c82 <__aeabi_fmul+0x2e>
10013d0c:	002a      	movs	r2, r5
10013d0e:	1e51      	subs	r1, r2, #1
10013d10:	418a      	sbcs	r2, r1
10013d12:	1c90      	adds	r0, r2, #2
10013d14:	e7c6      	b.n	10013ca4 <__aeabi_fmul+0x50>
10013d16:	2001      	movs	r0, #1
10013d18:	2d00      	cmp	r5, #0
10013d1a:	d0c3      	beq.n	10013ca4 <__aeabi_fmul+0x50>
10013d1c:	0028      	movs	r0, r5
10013d1e:	f001 fa25 	bl	1001516c <__clzsi2>
10013d22:	1f43      	subs	r3, r0, #5
10013d24:	3076      	adds	r0, #118	; 0x76
10013d26:	409d      	lsls	r5, r3
10013d28:	4243      	negs	r3, r0
10013d2a:	2000      	movs	r0, #0
10013d2c:	e7ba      	b.n	10013ca4 <__aeabi_fmul+0x50>
10013d2e:	2401      	movs	r4, #1
10013d30:	25ff      	movs	r5, #255	; 0xff
10013d32:	4014      	ands	r4, r2
10013d34:	2600      	movs	r6, #0
10013d36:	e7d6      	b.n	10013ce6 <__aeabi_fmul+0x92>
10013d38:	0030      	movs	r0, r6
10013d3a:	f001 fa17 	bl	1001516c <__clzsi2>
10013d3e:	1f43      	subs	r3, r0, #5
10013d40:	409e      	lsls	r6, r3
10013d42:	2300      	movs	r3, #0
10013d44:	3076      	adds	r0, #118	; 0x76
10013d46:	4247      	negs	r7, r0
10013d48:	469a      	mov	sl, r3
10013d4a:	4699      	mov	r9, r3
10013d4c:	e799      	b.n	10013c82 <__aeabi_fmul+0x2e>
10013d4e:	230c      	movs	r3, #12
10013d50:	469a      	mov	sl, r3
10013d52:	3b09      	subs	r3, #9
10013d54:	4699      	mov	r9, r3
10013d56:	e794      	b.n	10013c82 <__aeabi_fmul+0x2e>
10013d58:	2680      	movs	r6, #128	; 0x80
10013d5a:	2400      	movs	r4, #0
10013d5c:	03f6      	lsls	r6, r6, #15
10013d5e:	25ff      	movs	r5, #255	; 0xff
10013d60:	e7c1      	b.n	10013ce6 <__aeabi_fmul+0x92>
10013d62:	0035      	movs	r5, r6
10013d64:	4648      	mov	r0, r9
10013d66:	e7b2      	b.n	10013cce <__aeabi_fmul+0x7a>
10013d68:	0035      	movs	r5, r6
10013d6a:	0022      	movs	r2, r4
10013d6c:	4648      	mov	r0, r9
10013d6e:	e7ae      	b.n	10013cce <__aeabi_fmul+0x7a>
10013d70:	0429      	lsls	r1, r5, #16
10013d72:	0c09      	lsrs	r1, r1, #16
10013d74:	0008      	movs	r0, r1
10013d76:	0c37      	lsrs	r7, r6, #16
10013d78:	0436      	lsls	r6, r6, #16
10013d7a:	0c36      	lsrs	r6, r6, #16
10013d7c:	0c2c      	lsrs	r4, r5, #16
10013d7e:	4379      	muls	r1, r7
10013d80:	4370      	muls	r0, r6
10013d82:	4367      	muls	r7, r4
10013d84:	4374      	muls	r4, r6
10013d86:	0c06      	lsrs	r6, r0, #16
10013d88:	1864      	adds	r4, r4, r1
10013d8a:	1936      	adds	r6, r6, r4
10013d8c:	42b1      	cmp	r1, r6
10013d8e:	d903      	bls.n	10013d98 <__aeabi_fmul+0x144>
10013d90:	2180      	movs	r1, #128	; 0x80
10013d92:	0249      	lsls	r1, r1, #9
10013d94:	4688      	mov	r8, r1
10013d96:	4447      	add	r7, r8
10013d98:	0400      	lsls	r0, r0, #16
10013d9a:	0c00      	lsrs	r0, r0, #16
10013d9c:	0431      	lsls	r1, r6, #16
10013d9e:	1809      	adds	r1, r1, r0
10013da0:	018d      	lsls	r5, r1, #6
10013da2:	1e68      	subs	r0, r5, #1
10013da4:	4185      	sbcs	r5, r0
10013da6:	0e89      	lsrs	r1, r1, #26
10013da8:	4329      	orrs	r1, r5
10013daa:	0c35      	lsrs	r5, r6, #16
10013dac:	19ed      	adds	r5, r5, r7
10013dae:	01ad      	lsls	r5, r5, #6
10013db0:	430d      	orrs	r5, r1
10013db2:	0129      	lsls	r1, r5, #4
10013db4:	d504      	bpl.n	10013dc0 <__aeabi_fmul+0x16c>
10013db6:	2301      	movs	r3, #1
10013db8:	0869      	lsrs	r1, r5, #1
10013dba:	401d      	ands	r5, r3
10013dbc:	4663      	mov	r3, ip
10013dbe:	430d      	orrs	r5, r1
10013dc0:	0019      	movs	r1, r3
10013dc2:	317f      	adds	r1, #127	; 0x7f
10013dc4:	2900      	cmp	r1, #0
10013dc6:	dd25      	ble.n	10013e14 <__aeabi_fmul+0x1c0>
10013dc8:	0768      	lsls	r0, r5, #29
10013dca:	d004      	beq.n	10013dd6 <__aeabi_fmul+0x182>
10013dcc:	200f      	movs	r0, #15
10013dce:	4028      	ands	r0, r5
10013dd0:	2804      	cmp	r0, #4
10013dd2:	d000      	beq.n	10013dd6 <__aeabi_fmul+0x182>
10013dd4:	3504      	adds	r5, #4
10013dd6:	0128      	lsls	r0, r5, #4
10013dd8:	d503      	bpl.n	10013de2 <__aeabi_fmul+0x18e>
10013dda:	4927      	ldr	r1, [pc, #156]	; (10013e78 <__aeabi_fmul+0x224>)
10013ddc:	3380      	adds	r3, #128	; 0x80
10013dde:	400d      	ands	r5, r1
10013de0:	0019      	movs	r1, r3
10013de2:	29fe      	cmp	r1, #254	; 0xfe
10013de4:	dca3      	bgt.n	10013d2e <__aeabi_fmul+0xda>
10013de6:	2401      	movs	r4, #1
10013de8:	01ad      	lsls	r5, r5, #6
10013dea:	0a6e      	lsrs	r6, r5, #9
10013dec:	4014      	ands	r4, r2
10013dee:	b2cd      	uxtb	r5, r1
10013df0:	e779      	b.n	10013ce6 <__aeabi_fmul+0x92>
10013df2:	2080      	movs	r0, #128	; 0x80
10013df4:	03c0      	lsls	r0, r0, #15
10013df6:	4206      	tst	r6, r0
10013df8:	d007      	beq.n	10013e0a <__aeabi_fmul+0x1b6>
10013dfa:	4205      	tst	r5, r0
10013dfc:	d105      	bne.n	10013e0a <__aeabi_fmul+0x1b6>
10013dfe:	4328      	orrs	r0, r5
10013e00:	0246      	lsls	r6, r0, #9
10013e02:	0a76      	lsrs	r6, r6, #9
10013e04:	4644      	mov	r4, r8
10013e06:	25ff      	movs	r5, #255	; 0xff
10013e08:	e76d      	b.n	10013ce6 <__aeabi_fmul+0x92>
10013e0a:	4306      	orrs	r6, r0
10013e0c:	0276      	lsls	r6, r6, #9
10013e0e:	0a76      	lsrs	r6, r6, #9
10013e10:	25ff      	movs	r5, #255	; 0xff
10013e12:	e768      	b.n	10013ce6 <__aeabi_fmul+0x92>
10013e14:	2401      	movs	r4, #1
10013e16:	1a61      	subs	r1, r4, r1
10013e18:	291b      	cmp	r1, #27
10013e1a:	dd05      	ble.n	10013e28 <__aeabi_fmul+0x1d4>
10013e1c:	4014      	ands	r4, r2
10013e1e:	2500      	movs	r5, #0
10013e20:	2600      	movs	r6, #0
10013e22:	e760      	b.n	10013ce6 <__aeabi_fmul+0x92>
10013e24:	4663      	mov	r3, ip
10013e26:	e7cb      	b.n	10013dc0 <__aeabi_fmul+0x16c>
10013e28:	002e      	movs	r6, r5
10013e2a:	2320      	movs	r3, #32
10013e2c:	40ce      	lsrs	r6, r1
10013e2e:	1a59      	subs	r1, r3, r1
10013e30:	408d      	lsls	r5, r1
10013e32:	1e6b      	subs	r3, r5, #1
10013e34:	419d      	sbcs	r5, r3
10013e36:	432e      	orrs	r6, r5
10013e38:	0773      	lsls	r3, r6, #29
10013e3a:	d004      	beq.n	10013e46 <__aeabi_fmul+0x1f2>
10013e3c:	230f      	movs	r3, #15
10013e3e:	4033      	ands	r3, r6
10013e40:	2b04      	cmp	r3, #4
10013e42:	d000      	beq.n	10013e46 <__aeabi_fmul+0x1f2>
10013e44:	3604      	adds	r6, #4
10013e46:	0173      	lsls	r3, r6, #5
10013e48:	d504      	bpl.n	10013e54 <__aeabi_fmul+0x200>
10013e4a:	2401      	movs	r4, #1
10013e4c:	2501      	movs	r5, #1
10013e4e:	4014      	ands	r4, r2
10013e50:	2600      	movs	r6, #0
10013e52:	e748      	b.n	10013ce6 <__aeabi_fmul+0x92>
10013e54:	2401      	movs	r4, #1
10013e56:	01b6      	lsls	r6, r6, #6
10013e58:	0a76      	lsrs	r6, r6, #9
10013e5a:	4014      	ands	r4, r2
10013e5c:	2500      	movs	r5, #0
10013e5e:	e742      	b.n	10013ce6 <__aeabi_fmul+0x92>
10013e60:	2680      	movs	r6, #128	; 0x80
10013e62:	2401      	movs	r4, #1
10013e64:	03f6      	lsls	r6, r6, #15
10013e66:	432e      	orrs	r6, r5
10013e68:	0276      	lsls	r6, r6, #9
10013e6a:	0a76      	lsrs	r6, r6, #9
10013e6c:	4014      	ands	r4, r2
10013e6e:	25ff      	movs	r5, #255	; 0xff
10013e70:	e739      	b.n	10013ce6 <__aeabi_fmul+0x92>
10013e72:	46c0      	nop			; (mov r8, r8)
10013e74:	100184c4 	.word	0x100184c4
10013e78:	f7ffffff 	.word	0xf7ffffff

10013e7c <__aeabi_fsub>:
10013e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10013e7e:	024a      	lsls	r2, r1, #9
10013e80:	004e      	lsls	r6, r1, #1
10013e82:	0243      	lsls	r3, r0, #9
10013e84:	0044      	lsls	r4, r0, #1
10013e86:	0e24      	lsrs	r4, r4, #24
10013e88:	0fc5      	lsrs	r5, r0, #31
10013e8a:	099b      	lsrs	r3, r3, #6
10013e8c:	0e36      	lsrs	r6, r6, #24
10013e8e:	0fc9      	lsrs	r1, r1, #31
10013e90:	0992      	lsrs	r2, r2, #6
10013e92:	2eff      	cmp	r6, #255	; 0xff
10013e94:	d100      	bne.n	10013e98 <__aeabi_fsub+0x1c>
10013e96:	e083      	b.n	10013fa0 <__aeabi_fsub+0x124>
10013e98:	2001      	movs	r0, #1
10013e9a:	4041      	eors	r1, r0
10013e9c:	1ba0      	subs	r0, r4, r6
10013e9e:	42a9      	cmp	r1, r5
10013ea0:	d05c      	beq.n	10013f5c <__aeabi_fsub+0xe0>
10013ea2:	2800      	cmp	r0, #0
10013ea4:	dc00      	bgt.n	10013ea8 <__aeabi_fsub+0x2c>
10013ea6:	e095      	b.n	10013fd4 <__aeabi_fsub+0x158>
10013ea8:	2e00      	cmp	r6, #0
10013eaa:	d11c      	bne.n	10013ee6 <__aeabi_fsub+0x6a>
10013eac:	2a00      	cmp	r2, #0
10013eae:	d000      	beq.n	10013eb2 <__aeabi_fsub+0x36>
10013eb0:	e081      	b.n	10013fb6 <__aeabi_fsub+0x13a>
10013eb2:	075a      	lsls	r2, r3, #29
10013eb4:	d004      	beq.n	10013ec0 <__aeabi_fsub+0x44>
10013eb6:	220f      	movs	r2, #15
10013eb8:	401a      	ands	r2, r3
10013eba:	2a04      	cmp	r2, #4
10013ebc:	d000      	beq.n	10013ec0 <__aeabi_fsub+0x44>
10013ebe:	3304      	adds	r3, #4
10013ec0:	015a      	lsls	r2, r3, #5
10013ec2:	d53b      	bpl.n	10013f3c <__aeabi_fsub+0xc0>
10013ec4:	3401      	adds	r4, #1
10013ec6:	2cff      	cmp	r4, #255	; 0xff
10013ec8:	d100      	bne.n	10013ecc <__aeabi_fsub+0x50>
10013eca:	e091      	b.n	10013ff0 <__aeabi_fsub+0x174>
10013ecc:	2001      	movs	r0, #1
10013ece:	019b      	lsls	r3, r3, #6
10013ed0:	0a5b      	lsrs	r3, r3, #9
10013ed2:	b2e4      	uxtb	r4, r4
10013ed4:	4005      	ands	r5, r0
10013ed6:	025b      	lsls	r3, r3, #9
10013ed8:	05e4      	lsls	r4, r4, #23
10013eda:	0a5b      	lsrs	r3, r3, #9
10013edc:	07ed      	lsls	r5, r5, #31
10013ede:	4323      	orrs	r3, r4
10013ee0:	432b      	orrs	r3, r5
10013ee2:	0018      	movs	r0, r3
10013ee4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10013ee6:	2cff      	cmp	r4, #255	; 0xff
10013ee8:	d0e3      	beq.n	10013eb2 <__aeabi_fsub+0x36>
10013eea:	2180      	movs	r1, #128	; 0x80
10013eec:	04c9      	lsls	r1, r1, #19
10013eee:	430a      	orrs	r2, r1
10013ef0:	281b      	cmp	r0, #27
10013ef2:	dd00      	ble.n	10013ef6 <__aeabi_fsub+0x7a>
10013ef4:	e090      	b.n	10014018 <__aeabi_fsub+0x19c>
10013ef6:	0016      	movs	r6, r2
10013ef8:	2120      	movs	r1, #32
10013efa:	40c6      	lsrs	r6, r0
10013efc:	1a08      	subs	r0, r1, r0
10013efe:	4082      	lsls	r2, r0
10013f00:	1e51      	subs	r1, r2, #1
10013f02:	418a      	sbcs	r2, r1
10013f04:	4332      	orrs	r2, r6
10013f06:	1a9b      	subs	r3, r3, r2
10013f08:	015a      	lsls	r2, r3, #5
10013f0a:	d515      	bpl.n	10013f38 <__aeabi_fsub+0xbc>
10013f0c:	019b      	lsls	r3, r3, #6
10013f0e:	099e      	lsrs	r6, r3, #6
10013f10:	0030      	movs	r0, r6
10013f12:	f001 f92b 	bl	1001516c <__clzsi2>
10013f16:	3805      	subs	r0, #5
10013f18:	4086      	lsls	r6, r0
10013f1a:	4284      	cmp	r4, r0
10013f1c:	dc6c      	bgt.n	10013ff8 <__aeabi_fsub+0x17c>
10013f1e:	1b04      	subs	r4, r0, r4
10013f20:	0033      	movs	r3, r6
10013f22:	2020      	movs	r0, #32
10013f24:	3401      	adds	r4, #1
10013f26:	40e3      	lsrs	r3, r4
10013f28:	1b04      	subs	r4, r0, r4
10013f2a:	40a6      	lsls	r6, r4
10013f2c:	1e72      	subs	r2, r6, #1
10013f2e:	4196      	sbcs	r6, r2
10013f30:	2400      	movs	r4, #0
10013f32:	4333      	orrs	r3, r6
10013f34:	e7bd      	b.n	10013eb2 <__aeabi_fsub+0x36>
10013f36:	000d      	movs	r5, r1
10013f38:	075a      	lsls	r2, r3, #29
10013f3a:	d1bc      	bne.n	10013eb6 <__aeabi_fsub+0x3a>
10013f3c:	08df      	lsrs	r7, r3, #3
10013f3e:	2301      	movs	r3, #1
10013f40:	401d      	ands	r5, r3
10013f42:	2cff      	cmp	r4, #255	; 0xff
10013f44:	d133      	bne.n	10013fae <__aeabi_fsub+0x132>
10013f46:	2f00      	cmp	r7, #0
10013f48:	d100      	bne.n	10013f4c <__aeabi_fsub+0xd0>
10013f4a:	e090      	b.n	1001406e <__aeabi_fsub+0x1f2>
10013f4c:	2280      	movs	r2, #128	; 0x80
10013f4e:	03d2      	lsls	r2, r2, #15
10013f50:	0013      	movs	r3, r2
10013f52:	433b      	orrs	r3, r7
10013f54:	025b      	lsls	r3, r3, #9
10013f56:	0a5b      	lsrs	r3, r3, #9
10013f58:	24ff      	movs	r4, #255	; 0xff
10013f5a:	e7bc      	b.n	10013ed6 <__aeabi_fsub+0x5a>
10013f5c:	2800      	cmp	r0, #0
10013f5e:	dd4f      	ble.n	10014000 <__aeabi_fsub+0x184>
10013f60:	2e00      	cmp	r6, #0
10013f62:	d02e      	beq.n	10013fc2 <__aeabi_fsub+0x146>
10013f64:	2cff      	cmp	r4, #255	; 0xff
10013f66:	d0a4      	beq.n	10013eb2 <__aeabi_fsub+0x36>
10013f68:	2580      	movs	r5, #128	; 0x80
10013f6a:	04ed      	lsls	r5, r5, #19
10013f6c:	432a      	orrs	r2, r5
10013f6e:	281b      	cmp	r0, #27
10013f70:	dd00      	ble.n	10013f74 <__aeabi_fsub+0xf8>
10013f72:	e097      	b.n	100140a4 <__aeabi_fsub+0x228>
10013f74:	0016      	movs	r6, r2
10013f76:	2520      	movs	r5, #32
10013f78:	40c6      	lsrs	r6, r0
10013f7a:	1a28      	subs	r0, r5, r0
10013f7c:	4082      	lsls	r2, r0
10013f7e:	1e50      	subs	r0, r2, #1
10013f80:	4182      	sbcs	r2, r0
10013f82:	4332      	orrs	r2, r6
10013f84:	189b      	adds	r3, r3, r2
10013f86:	015a      	lsls	r2, r3, #5
10013f88:	d5d5      	bpl.n	10013f36 <__aeabi_fsub+0xba>
10013f8a:	3401      	adds	r4, #1
10013f8c:	2cff      	cmp	r4, #255	; 0xff
10013f8e:	d06d      	beq.n	1001406c <__aeabi_fsub+0x1f0>
10013f90:	2201      	movs	r2, #1
10013f92:	487b      	ldr	r0, [pc, #492]	; (10014180 <__aeabi_fsub+0x304>)
10013f94:	401a      	ands	r2, r3
10013f96:	085b      	lsrs	r3, r3, #1
10013f98:	4003      	ands	r3, r0
10013f9a:	4313      	orrs	r3, r2
10013f9c:	000d      	movs	r5, r1
10013f9e:	e788      	b.n	10013eb2 <__aeabi_fsub+0x36>
10013fa0:	2a00      	cmp	r2, #0
10013fa2:	d000      	beq.n	10013fa6 <__aeabi_fsub+0x12a>
10013fa4:	e77a      	b.n	10013e9c <__aeabi_fsub+0x20>
10013fa6:	e777      	b.n	10013e98 <__aeabi_fsub+0x1c>
10013fa8:	1e03      	subs	r3, r0, #0
10013faa:	d1c5      	bne.n	10013f38 <__aeabi_fsub+0xbc>
10013fac:	2500      	movs	r5, #0
10013fae:	027b      	lsls	r3, r7, #9
10013fb0:	0a5b      	lsrs	r3, r3, #9
10013fb2:	b2e4      	uxtb	r4, r4
10013fb4:	e78f      	b.n	10013ed6 <__aeabi_fsub+0x5a>
10013fb6:	3801      	subs	r0, #1
10013fb8:	2800      	cmp	r0, #0
10013fba:	d0a4      	beq.n	10013f06 <__aeabi_fsub+0x8a>
10013fbc:	2cff      	cmp	r4, #255	; 0xff
10013fbe:	d197      	bne.n	10013ef0 <__aeabi_fsub+0x74>
10013fc0:	e777      	b.n	10013eb2 <__aeabi_fsub+0x36>
10013fc2:	2a00      	cmp	r2, #0
10013fc4:	d100      	bne.n	10013fc8 <__aeabi_fsub+0x14c>
10013fc6:	e774      	b.n	10013eb2 <__aeabi_fsub+0x36>
10013fc8:	3801      	subs	r0, #1
10013fca:	2800      	cmp	r0, #0
10013fcc:	d0da      	beq.n	10013f84 <__aeabi_fsub+0x108>
10013fce:	2cff      	cmp	r4, #255	; 0xff
10013fd0:	d1cd      	bne.n	10013f6e <__aeabi_fsub+0xf2>
10013fd2:	e76e      	b.n	10013eb2 <__aeabi_fsub+0x36>
10013fd4:	2800      	cmp	r0, #0
10013fd6:	d121      	bne.n	1001401c <__aeabi_fsub+0x1a0>
10013fd8:	1c60      	adds	r0, r4, #1
10013fda:	b2c0      	uxtb	r0, r0
10013fdc:	2801      	cmp	r0, #1
10013fde:	dd58      	ble.n	10014092 <__aeabi_fsub+0x216>
10013fe0:	2780      	movs	r7, #128	; 0x80
10013fe2:	1a9e      	subs	r6, r3, r2
10013fe4:	04ff      	lsls	r7, r7, #19
10013fe6:	4037      	ands	r7, r6
10013fe8:	d02f      	beq.n	1001404a <__aeabi_fsub+0x1ce>
10013fea:	1ad6      	subs	r6, r2, r3
10013fec:	000d      	movs	r5, r1
10013fee:	e78f      	b.n	10013f10 <__aeabi_fsub+0x94>
10013ff0:	2301      	movs	r3, #1
10013ff2:	401d      	ands	r5, r3
10013ff4:	2300      	movs	r3, #0
10013ff6:	e76e      	b.n	10013ed6 <__aeabi_fsub+0x5a>
10013ff8:	4b62      	ldr	r3, [pc, #392]	; (10014184 <__aeabi_fsub+0x308>)
10013ffa:	1a24      	subs	r4, r4, r0
10013ffc:	4033      	ands	r3, r6
10013ffe:	e758      	b.n	10013eb2 <__aeabi_fsub+0x36>
10014000:	2800      	cmp	r0, #0
10014002:	d151      	bne.n	100140a8 <__aeabi_fsub+0x22c>
10014004:	1c60      	adds	r0, r4, #1
10014006:	b2c6      	uxtb	r6, r0
10014008:	2e01      	cmp	r6, #1
1001400a:	dd33      	ble.n	10014074 <__aeabi_fsub+0x1f8>
1001400c:	28ff      	cmp	r0, #255	; 0xff
1001400e:	d02d      	beq.n	1001406c <__aeabi_fsub+0x1f0>
10014010:	189b      	adds	r3, r3, r2
10014012:	085b      	lsrs	r3, r3, #1
10014014:	0004      	movs	r4, r0
10014016:	e74c      	b.n	10013eb2 <__aeabi_fsub+0x36>
10014018:	2201      	movs	r2, #1
1001401a:	e774      	b.n	10013f06 <__aeabi_fsub+0x8a>
1001401c:	2c00      	cmp	r4, #0
1001401e:	d01a      	beq.n	10014056 <__aeabi_fsub+0x1da>
10014020:	2eff      	cmp	r6, #255	; 0xff
10014022:	d01f      	beq.n	10014064 <__aeabi_fsub+0x1e8>
10014024:	2480      	movs	r4, #128	; 0x80
10014026:	04e4      	lsls	r4, r4, #19
10014028:	4240      	negs	r0, r0
1001402a:	4323      	orrs	r3, r4
1001402c:	281b      	cmp	r0, #27
1001402e:	dd00      	ble.n	10014032 <__aeabi_fsub+0x1b6>
10014030:	e096      	b.n	10014160 <__aeabi_fsub+0x2e4>
10014032:	001d      	movs	r5, r3
10014034:	2420      	movs	r4, #32
10014036:	40c5      	lsrs	r5, r0
10014038:	1a20      	subs	r0, r4, r0
1001403a:	4083      	lsls	r3, r0
1001403c:	1e58      	subs	r0, r3, #1
1001403e:	4183      	sbcs	r3, r0
10014040:	432b      	orrs	r3, r5
10014042:	1ad3      	subs	r3, r2, r3
10014044:	0034      	movs	r4, r6
10014046:	000d      	movs	r5, r1
10014048:	e75e      	b.n	10013f08 <__aeabi_fsub+0x8c>
1001404a:	2e00      	cmp	r6, #0
1001404c:	d000      	beq.n	10014050 <__aeabi_fsub+0x1d4>
1001404e:	e75f      	b.n	10013f10 <__aeabi_fsub+0x94>
10014050:	2500      	movs	r5, #0
10014052:	2400      	movs	r4, #0
10014054:	e7ab      	b.n	10013fae <__aeabi_fsub+0x132>
10014056:	2b00      	cmp	r3, #0
10014058:	d044      	beq.n	100140e4 <__aeabi_fsub+0x268>
1001405a:	43c0      	mvns	r0, r0
1001405c:	2800      	cmp	r0, #0
1001405e:	d0f0      	beq.n	10014042 <__aeabi_fsub+0x1c6>
10014060:	2eff      	cmp	r6, #255	; 0xff
10014062:	d1e3      	bne.n	1001402c <__aeabi_fsub+0x1b0>
10014064:	0013      	movs	r3, r2
10014066:	24ff      	movs	r4, #255	; 0xff
10014068:	000d      	movs	r5, r1
1001406a:	e722      	b.n	10013eb2 <__aeabi_fsub+0x36>
1001406c:	000d      	movs	r5, r1
1001406e:	24ff      	movs	r4, #255	; 0xff
10014070:	2300      	movs	r3, #0
10014072:	e730      	b.n	10013ed6 <__aeabi_fsub+0x5a>
10014074:	2c00      	cmp	r4, #0
10014076:	d15d      	bne.n	10014134 <__aeabi_fsub+0x2b8>
10014078:	2b00      	cmp	r3, #0
1001407a:	d07d      	beq.n	10014178 <__aeabi_fsub+0x2fc>
1001407c:	2a00      	cmp	r2, #0
1001407e:	d100      	bne.n	10014082 <__aeabi_fsub+0x206>
10014080:	e717      	b.n	10013eb2 <__aeabi_fsub+0x36>
10014082:	189b      	adds	r3, r3, r2
10014084:	015a      	lsls	r2, r3, #5
10014086:	d400      	bmi.n	1001408a <__aeabi_fsub+0x20e>
10014088:	e756      	b.n	10013f38 <__aeabi_fsub+0xbc>
1001408a:	4a3e      	ldr	r2, [pc, #248]	; (10014184 <__aeabi_fsub+0x308>)
1001408c:	0004      	movs	r4, r0
1001408e:	4013      	ands	r3, r2
10014090:	e70f      	b.n	10013eb2 <__aeabi_fsub+0x36>
10014092:	2c00      	cmp	r4, #0
10014094:	d11e      	bne.n	100140d4 <__aeabi_fsub+0x258>
10014096:	2b00      	cmp	r3, #0
10014098:	d12f      	bne.n	100140fa <__aeabi_fsub+0x27e>
1001409a:	2a00      	cmp	r2, #0
1001409c:	d065      	beq.n	1001416a <__aeabi_fsub+0x2ee>
1001409e:	0013      	movs	r3, r2
100140a0:	000d      	movs	r5, r1
100140a2:	e706      	b.n	10013eb2 <__aeabi_fsub+0x36>
100140a4:	2201      	movs	r2, #1
100140a6:	e76d      	b.n	10013f84 <__aeabi_fsub+0x108>
100140a8:	2c00      	cmp	r4, #0
100140aa:	d11f      	bne.n	100140ec <__aeabi_fsub+0x270>
100140ac:	2b00      	cmp	r3, #0
100140ae:	d059      	beq.n	10014164 <__aeabi_fsub+0x2e8>
100140b0:	43c0      	mvns	r0, r0
100140b2:	2800      	cmp	r0, #0
100140b4:	d00b      	beq.n	100140ce <__aeabi_fsub+0x252>
100140b6:	2eff      	cmp	r6, #255	; 0xff
100140b8:	d04f      	beq.n	1001415a <__aeabi_fsub+0x2de>
100140ba:	281b      	cmp	r0, #27
100140bc:	dc5e      	bgt.n	1001417c <__aeabi_fsub+0x300>
100140be:	001d      	movs	r5, r3
100140c0:	2420      	movs	r4, #32
100140c2:	40c5      	lsrs	r5, r0
100140c4:	1a20      	subs	r0, r4, r0
100140c6:	4083      	lsls	r3, r0
100140c8:	1e58      	subs	r0, r3, #1
100140ca:	4183      	sbcs	r3, r0
100140cc:	432b      	orrs	r3, r5
100140ce:	189b      	adds	r3, r3, r2
100140d0:	0034      	movs	r4, r6
100140d2:	e758      	b.n	10013f86 <__aeabi_fsub+0x10a>
100140d4:	2b00      	cmp	r3, #0
100140d6:	d11c      	bne.n	10014112 <__aeabi_fsub+0x296>
100140d8:	2a00      	cmp	r2, #0
100140da:	d049      	beq.n	10014170 <__aeabi_fsub+0x2f4>
100140dc:	0013      	movs	r3, r2
100140de:	000d      	movs	r5, r1
100140e0:	24ff      	movs	r4, #255	; 0xff
100140e2:	e6e6      	b.n	10013eb2 <__aeabi_fsub+0x36>
100140e4:	0013      	movs	r3, r2
100140e6:	0034      	movs	r4, r6
100140e8:	000d      	movs	r5, r1
100140ea:	e6e2      	b.n	10013eb2 <__aeabi_fsub+0x36>
100140ec:	2eff      	cmp	r6, #255	; 0xff
100140ee:	d034      	beq.n	1001415a <__aeabi_fsub+0x2de>
100140f0:	2480      	movs	r4, #128	; 0x80
100140f2:	04e4      	lsls	r4, r4, #19
100140f4:	4240      	negs	r0, r0
100140f6:	4323      	orrs	r3, r4
100140f8:	e7df      	b.n	100140ba <__aeabi_fsub+0x23e>
100140fa:	2a00      	cmp	r2, #0
100140fc:	d100      	bne.n	10014100 <__aeabi_fsub+0x284>
100140fe:	e6d8      	b.n	10013eb2 <__aeabi_fsub+0x36>
10014100:	2780      	movs	r7, #128	; 0x80
10014102:	1a98      	subs	r0, r3, r2
10014104:	04ff      	lsls	r7, r7, #19
10014106:	4007      	ands	r7, r0
10014108:	d100      	bne.n	1001410c <__aeabi_fsub+0x290>
1001410a:	e74d      	b.n	10013fa8 <__aeabi_fsub+0x12c>
1001410c:	1ad3      	subs	r3, r2, r3
1001410e:	000d      	movs	r5, r1
10014110:	e6cf      	b.n	10013eb2 <__aeabi_fsub+0x36>
10014112:	24ff      	movs	r4, #255	; 0xff
10014114:	2a00      	cmp	r2, #0
10014116:	d100      	bne.n	1001411a <__aeabi_fsub+0x29e>
10014118:	e6cb      	b.n	10013eb2 <__aeabi_fsub+0x36>
1001411a:	2080      	movs	r0, #128	; 0x80
1001411c:	08db      	lsrs	r3, r3, #3
1001411e:	03c0      	lsls	r0, r0, #15
10014120:	4203      	tst	r3, r0
10014122:	d004      	beq.n	1001412e <__aeabi_fsub+0x2b2>
10014124:	08d2      	lsrs	r2, r2, #3
10014126:	4202      	tst	r2, r0
10014128:	d101      	bne.n	1001412e <__aeabi_fsub+0x2b2>
1001412a:	0013      	movs	r3, r2
1001412c:	000d      	movs	r5, r1
1001412e:	00db      	lsls	r3, r3, #3
10014130:	24ff      	movs	r4, #255	; 0xff
10014132:	e6be      	b.n	10013eb2 <__aeabi_fsub+0x36>
10014134:	2b00      	cmp	r3, #0
10014136:	d010      	beq.n	1001415a <__aeabi_fsub+0x2de>
10014138:	24ff      	movs	r4, #255	; 0xff
1001413a:	2a00      	cmp	r2, #0
1001413c:	d100      	bne.n	10014140 <__aeabi_fsub+0x2c4>
1001413e:	e6b8      	b.n	10013eb2 <__aeabi_fsub+0x36>
10014140:	2080      	movs	r0, #128	; 0x80
10014142:	08db      	lsrs	r3, r3, #3
10014144:	03c0      	lsls	r0, r0, #15
10014146:	4203      	tst	r3, r0
10014148:	d003      	beq.n	10014152 <__aeabi_fsub+0x2d6>
1001414a:	08d2      	lsrs	r2, r2, #3
1001414c:	4202      	tst	r2, r0
1001414e:	d100      	bne.n	10014152 <__aeabi_fsub+0x2d6>
10014150:	0013      	movs	r3, r2
10014152:	00db      	lsls	r3, r3, #3
10014154:	000d      	movs	r5, r1
10014156:	24ff      	movs	r4, #255	; 0xff
10014158:	e6ab      	b.n	10013eb2 <__aeabi_fsub+0x36>
1001415a:	0013      	movs	r3, r2
1001415c:	24ff      	movs	r4, #255	; 0xff
1001415e:	e6a8      	b.n	10013eb2 <__aeabi_fsub+0x36>
10014160:	2301      	movs	r3, #1
10014162:	e76e      	b.n	10014042 <__aeabi_fsub+0x1c6>
10014164:	0013      	movs	r3, r2
10014166:	0034      	movs	r4, r6
10014168:	e6a3      	b.n	10013eb2 <__aeabi_fsub+0x36>
1001416a:	2700      	movs	r7, #0
1001416c:	2500      	movs	r5, #0
1001416e:	e71e      	b.n	10013fae <__aeabi_fsub+0x132>
10014170:	2780      	movs	r7, #128	; 0x80
10014172:	2500      	movs	r5, #0
10014174:	03ff      	lsls	r7, r7, #15
10014176:	e6e9      	b.n	10013f4c <__aeabi_fsub+0xd0>
10014178:	0013      	movs	r3, r2
1001417a:	e69a      	b.n	10013eb2 <__aeabi_fsub+0x36>
1001417c:	2301      	movs	r3, #1
1001417e:	e7a6      	b.n	100140ce <__aeabi_fsub+0x252>
10014180:	7dffffff 	.word	0x7dffffff
10014184:	fbffffff 	.word	0xfbffffff

10014188 <__aeabi_f2iz>:
10014188:	0243      	lsls	r3, r0, #9
1001418a:	0a59      	lsrs	r1, r3, #9
1001418c:	0043      	lsls	r3, r0, #1
1001418e:	0fc2      	lsrs	r2, r0, #31
10014190:	0e1b      	lsrs	r3, r3, #24
10014192:	2000      	movs	r0, #0
10014194:	2b7e      	cmp	r3, #126	; 0x7e
10014196:	dd0e      	ble.n	100141b6 <__aeabi_f2iz+0x2e>
10014198:	2b9d      	cmp	r3, #157	; 0x9d
1001419a:	dc0d      	bgt.n	100141b8 <__aeabi_f2iz+0x30>
1001419c:	2080      	movs	r0, #128	; 0x80
1001419e:	0400      	lsls	r0, r0, #16
100141a0:	4301      	orrs	r1, r0
100141a2:	2b95      	cmp	r3, #149	; 0x95
100141a4:	dc0b      	bgt.n	100141be <__aeabi_f2iz+0x36>
100141a6:	2096      	movs	r0, #150	; 0x96
100141a8:	1ac3      	subs	r3, r0, r3
100141aa:	40d9      	lsrs	r1, r3
100141ac:	000b      	movs	r3, r1
100141ae:	4258      	negs	r0, r3
100141b0:	2a00      	cmp	r2, #0
100141b2:	d100      	bne.n	100141b6 <__aeabi_f2iz+0x2e>
100141b4:	0018      	movs	r0, r3
100141b6:	4770      	bx	lr
100141b8:	4b03      	ldr	r3, [pc, #12]	; (100141c8 <__aeabi_f2iz+0x40>)
100141ba:	18d0      	adds	r0, r2, r3
100141bc:	e7fb      	b.n	100141b6 <__aeabi_f2iz+0x2e>
100141be:	3b96      	subs	r3, #150	; 0x96
100141c0:	4099      	lsls	r1, r3
100141c2:	000b      	movs	r3, r1
100141c4:	e7f3      	b.n	100141ae <__aeabi_f2iz+0x26>
100141c6:	46c0      	nop			; (mov r8, r8)
100141c8:	7fffffff 	.word	0x7fffffff

100141cc <__aeabi_i2f>:
100141cc:	b570      	push	{r4, r5, r6, lr}
100141ce:	2800      	cmp	r0, #0
100141d0:	d030      	beq.n	10014234 <__aeabi_i2f+0x68>
100141d2:	17c3      	asrs	r3, r0, #31
100141d4:	18c5      	adds	r5, r0, r3
100141d6:	405d      	eors	r5, r3
100141d8:	0fc4      	lsrs	r4, r0, #31
100141da:	0028      	movs	r0, r5
100141dc:	f000 ffc6 	bl	1001516c <__clzsi2>
100141e0:	239e      	movs	r3, #158	; 0x9e
100141e2:	1a1b      	subs	r3, r3, r0
100141e4:	2b96      	cmp	r3, #150	; 0x96
100141e6:	dc0d      	bgt.n	10014204 <__aeabi_i2f+0x38>
100141e8:	2296      	movs	r2, #150	; 0x96
100141ea:	1ad2      	subs	r2, r2, r3
100141ec:	4095      	lsls	r5, r2
100141ee:	026a      	lsls	r2, r5, #9
100141f0:	0a52      	lsrs	r2, r2, #9
100141f2:	b2d8      	uxtb	r0, r3
100141f4:	0252      	lsls	r2, r2, #9
100141f6:	05c0      	lsls	r0, r0, #23
100141f8:	0a52      	lsrs	r2, r2, #9
100141fa:	07e4      	lsls	r4, r4, #31
100141fc:	4302      	orrs	r2, r0
100141fe:	4322      	orrs	r2, r4
10014200:	0010      	movs	r0, r2
10014202:	bd70      	pop	{r4, r5, r6, pc}
10014204:	2b99      	cmp	r3, #153	; 0x99
10014206:	dc19      	bgt.n	1001423c <__aeabi_i2f+0x70>
10014208:	2299      	movs	r2, #153	; 0x99
1001420a:	1ad2      	subs	r2, r2, r3
1001420c:	4095      	lsls	r5, r2
1001420e:	4a12      	ldr	r2, [pc, #72]	; (10014258 <__aeabi_i2f+0x8c>)
10014210:	402a      	ands	r2, r5
10014212:	0769      	lsls	r1, r5, #29
10014214:	d004      	beq.n	10014220 <__aeabi_i2f+0x54>
10014216:	210f      	movs	r1, #15
10014218:	400d      	ands	r5, r1
1001421a:	2d04      	cmp	r5, #4
1001421c:	d000      	beq.n	10014220 <__aeabi_i2f+0x54>
1001421e:	3204      	adds	r2, #4
10014220:	0151      	lsls	r1, r2, #5
10014222:	d503      	bpl.n	1001422c <__aeabi_i2f+0x60>
10014224:	4b0c      	ldr	r3, [pc, #48]	; (10014258 <__aeabi_i2f+0x8c>)
10014226:	401a      	ands	r2, r3
10014228:	239f      	movs	r3, #159	; 0x9f
1001422a:	1a1b      	subs	r3, r3, r0
1001422c:	0192      	lsls	r2, r2, #6
1001422e:	0a52      	lsrs	r2, r2, #9
10014230:	b2d8      	uxtb	r0, r3
10014232:	e7df      	b.n	100141f4 <__aeabi_i2f+0x28>
10014234:	2400      	movs	r4, #0
10014236:	2000      	movs	r0, #0
10014238:	2200      	movs	r2, #0
1001423a:	e7db      	b.n	100141f4 <__aeabi_i2f+0x28>
1001423c:	2205      	movs	r2, #5
1001423e:	002e      	movs	r6, r5
10014240:	1a12      	subs	r2, r2, r0
10014242:	21b9      	movs	r1, #185	; 0xb9
10014244:	40d6      	lsrs	r6, r2
10014246:	002a      	movs	r2, r5
10014248:	1ac9      	subs	r1, r1, r3
1001424a:	408a      	lsls	r2, r1
1001424c:	1e55      	subs	r5, r2, #1
1001424e:	41aa      	sbcs	r2, r5
10014250:	0035      	movs	r5, r6
10014252:	4315      	orrs	r5, r2
10014254:	e7db      	b.n	1001420e <__aeabi_i2f+0x42>
10014256:	46c0      	nop			; (mov r8, r8)
10014258:	fbffffff 	.word	0xfbffffff

1001425c <__aeabi_ui2f>:
1001425c:	b570      	push	{r4, r5, r6, lr}
1001425e:	1e04      	subs	r4, r0, #0
10014260:	d028      	beq.n	100142b4 <__aeabi_ui2f+0x58>
10014262:	f000 ff83 	bl	1001516c <__clzsi2>
10014266:	239e      	movs	r3, #158	; 0x9e
10014268:	1a1b      	subs	r3, r3, r0
1001426a:	2b96      	cmp	r3, #150	; 0x96
1001426c:	dc0a      	bgt.n	10014284 <__aeabi_ui2f+0x28>
1001426e:	2296      	movs	r2, #150	; 0x96
10014270:	1ad2      	subs	r2, r2, r3
10014272:	4094      	lsls	r4, r2
10014274:	0262      	lsls	r2, r4, #9
10014276:	0a52      	lsrs	r2, r2, #9
10014278:	b2d8      	uxtb	r0, r3
1001427a:	0252      	lsls	r2, r2, #9
1001427c:	0a52      	lsrs	r2, r2, #9
1001427e:	05c0      	lsls	r0, r0, #23
10014280:	4310      	orrs	r0, r2
10014282:	bd70      	pop	{r4, r5, r6, pc}
10014284:	2b99      	cmp	r3, #153	; 0x99
10014286:	dc18      	bgt.n	100142ba <__aeabi_ui2f+0x5e>
10014288:	2299      	movs	r2, #153	; 0x99
1001428a:	1ad2      	subs	r2, r2, r3
1001428c:	4094      	lsls	r4, r2
1001428e:	4a11      	ldr	r2, [pc, #68]	; (100142d4 <__aeabi_ui2f+0x78>)
10014290:	4022      	ands	r2, r4
10014292:	0761      	lsls	r1, r4, #29
10014294:	d004      	beq.n	100142a0 <__aeabi_ui2f+0x44>
10014296:	210f      	movs	r1, #15
10014298:	400c      	ands	r4, r1
1001429a:	2c04      	cmp	r4, #4
1001429c:	d000      	beq.n	100142a0 <__aeabi_ui2f+0x44>
1001429e:	3204      	adds	r2, #4
100142a0:	0151      	lsls	r1, r2, #5
100142a2:	d503      	bpl.n	100142ac <__aeabi_ui2f+0x50>
100142a4:	4b0b      	ldr	r3, [pc, #44]	; (100142d4 <__aeabi_ui2f+0x78>)
100142a6:	401a      	ands	r2, r3
100142a8:	239f      	movs	r3, #159	; 0x9f
100142aa:	1a1b      	subs	r3, r3, r0
100142ac:	0192      	lsls	r2, r2, #6
100142ae:	0a52      	lsrs	r2, r2, #9
100142b0:	b2d8      	uxtb	r0, r3
100142b2:	e7e2      	b.n	1001427a <__aeabi_ui2f+0x1e>
100142b4:	2000      	movs	r0, #0
100142b6:	2200      	movs	r2, #0
100142b8:	e7df      	b.n	1001427a <__aeabi_ui2f+0x1e>
100142ba:	2205      	movs	r2, #5
100142bc:	0025      	movs	r5, r4
100142be:	1a12      	subs	r2, r2, r0
100142c0:	21b9      	movs	r1, #185	; 0xb9
100142c2:	40d5      	lsrs	r5, r2
100142c4:	0022      	movs	r2, r4
100142c6:	1ac9      	subs	r1, r1, r3
100142c8:	408a      	lsls	r2, r1
100142ca:	1e54      	subs	r4, r2, #1
100142cc:	41a2      	sbcs	r2, r4
100142ce:	002c      	movs	r4, r5
100142d0:	4314      	orrs	r4, r2
100142d2:	e7dc      	b.n	1001428e <__aeabi_ui2f+0x32>
100142d4:	fbffffff 	.word	0xfbffffff

100142d8 <__eqdf2>:
100142d8:	b5f0      	push	{r4, r5, r6, r7, lr}
100142da:	465f      	mov	r7, fp
100142dc:	4656      	mov	r6, sl
100142de:	464d      	mov	r5, r9
100142e0:	4644      	mov	r4, r8
100142e2:	b4f0      	push	{r4, r5, r6, r7}
100142e4:	031f      	lsls	r7, r3, #12
100142e6:	005c      	lsls	r4, r3, #1
100142e8:	0fdb      	lsrs	r3, r3, #31
100142ea:	469a      	mov	sl, r3
100142ec:	4b19      	ldr	r3, [pc, #100]	; (10014354 <__eqdf2+0x7c>)
100142ee:	030e      	lsls	r6, r1, #12
100142f0:	004d      	lsls	r5, r1, #1
100142f2:	0fc9      	lsrs	r1, r1, #31
100142f4:	4680      	mov	r8, r0
100142f6:	0b36      	lsrs	r6, r6, #12
100142f8:	0d6d      	lsrs	r5, r5, #21
100142fa:	468b      	mov	fp, r1
100142fc:	4691      	mov	r9, r2
100142fe:	0b3f      	lsrs	r7, r7, #12
10014300:	0d64      	lsrs	r4, r4, #21
10014302:	429d      	cmp	r5, r3
10014304:	d019      	beq.n	1001433a <__eqdf2+0x62>
10014306:	4b13      	ldr	r3, [pc, #76]	; (10014354 <__eqdf2+0x7c>)
10014308:	429c      	cmp	r4, r3
1001430a:	d01b      	beq.n	10014344 <__eqdf2+0x6c>
1001430c:	2301      	movs	r3, #1
1001430e:	42a5      	cmp	r5, r4
10014310:	d006      	beq.n	10014320 <__eqdf2+0x48>
10014312:	0018      	movs	r0, r3
10014314:	bc3c      	pop	{r2, r3, r4, r5}
10014316:	4690      	mov	r8, r2
10014318:	4699      	mov	r9, r3
1001431a:	46a2      	mov	sl, r4
1001431c:	46ab      	mov	fp, r5
1001431e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10014320:	42be      	cmp	r6, r7
10014322:	d1f6      	bne.n	10014312 <__eqdf2+0x3a>
10014324:	45c8      	cmp	r8, r9
10014326:	d1f4      	bne.n	10014312 <__eqdf2+0x3a>
10014328:	45d3      	cmp	fp, sl
1001432a:	d010      	beq.n	1001434e <__eqdf2+0x76>
1001432c:	2d00      	cmp	r5, #0
1001432e:	d1f0      	bne.n	10014312 <__eqdf2+0x3a>
10014330:	4330      	orrs	r0, r6
10014332:	0003      	movs	r3, r0
10014334:	1e5a      	subs	r2, r3, #1
10014336:	4193      	sbcs	r3, r2
10014338:	e7eb      	b.n	10014312 <__eqdf2+0x3a>
1001433a:	0031      	movs	r1, r6
1001433c:	2301      	movs	r3, #1
1001433e:	4301      	orrs	r1, r0
10014340:	d1e7      	bne.n	10014312 <__eqdf2+0x3a>
10014342:	e7e0      	b.n	10014306 <__eqdf2+0x2e>
10014344:	433a      	orrs	r2, r7
10014346:	2301      	movs	r3, #1
10014348:	2a00      	cmp	r2, #0
1001434a:	d1e2      	bne.n	10014312 <__eqdf2+0x3a>
1001434c:	e7de      	b.n	1001430c <__eqdf2+0x34>
1001434e:	2300      	movs	r3, #0
10014350:	e7df      	b.n	10014312 <__eqdf2+0x3a>
10014352:	46c0      	nop			; (mov r8, r8)
10014354:	000007ff 	.word	0x000007ff

10014358 <__gedf2>:
10014358:	b5f0      	push	{r4, r5, r6, r7, lr}
1001435a:	465f      	mov	r7, fp
1001435c:	4644      	mov	r4, r8
1001435e:	4656      	mov	r6, sl
10014360:	464d      	mov	r5, r9
10014362:	b4f0      	push	{r4, r5, r6, r7}
10014364:	031f      	lsls	r7, r3, #12
10014366:	0b3c      	lsrs	r4, r7, #12
10014368:	4f2c      	ldr	r7, [pc, #176]	; (1001441c <__gedf2+0xc4>)
1001436a:	030e      	lsls	r6, r1, #12
1001436c:	004d      	lsls	r5, r1, #1
1001436e:	46a3      	mov	fp, r4
10014370:	005c      	lsls	r4, r3, #1
10014372:	4684      	mov	ip, r0
10014374:	0b36      	lsrs	r6, r6, #12
10014376:	0d6d      	lsrs	r5, r5, #21
10014378:	0fc9      	lsrs	r1, r1, #31
1001437a:	4690      	mov	r8, r2
1001437c:	0d64      	lsrs	r4, r4, #21
1001437e:	0fdb      	lsrs	r3, r3, #31
10014380:	42bd      	cmp	r5, r7
10014382:	d02b      	beq.n	100143dc <__gedf2+0x84>
10014384:	4f25      	ldr	r7, [pc, #148]	; (1001441c <__gedf2+0xc4>)
10014386:	42bc      	cmp	r4, r7
10014388:	d02e      	beq.n	100143e8 <__gedf2+0x90>
1001438a:	2d00      	cmp	r5, #0
1001438c:	d10e      	bne.n	100143ac <__gedf2+0x54>
1001438e:	4330      	orrs	r0, r6
10014390:	0007      	movs	r7, r0
10014392:	4681      	mov	r9, r0
10014394:	4278      	negs	r0, r7
10014396:	4178      	adcs	r0, r7
10014398:	2c00      	cmp	r4, #0
1001439a:	d117      	bne.n	100143cc <__gedf2+0x74>
1001439c:	465f      	mov	r7, fp
1001439e:	433a      	orrs	r2, r7
100143a0:	d114      	bne.n	100143cc <__gedf2+0x74>
100143a2:	464b      	mov	r3, r9
100143a4:	2000      	movs	r0, #0
100143a6:	2b00      	cmp	r3, #0
100143a8:	d00a      	beq.n	100143c0 <__gedf2+0x68>
100143aa:	e006      	b.n	100143ba <__gedf2+0x62>
100143ac:	2c00      	cmp	r4, #0
100143ae:	d102      	bne.n	100143b6 <__gedf2+0x5e>
100143b0:	4658      	mov	r0, fp
100143b2:	4302      	orrs	r2, r0
100143b4:	d001      	beq.n	100143ba <__gedf2+0x62>
100143b6:	4299      	cmp	r1, r3
100143b8:	d01a      	beq.n	100143f0 <__gedf2+0x98>
100143ba:	2301      	movs	r3, #1
100143bc:	4248      	negs	r0, r1
100143be:	4318      	orrs	r0, r3
100143c0:	bc3c      	pop	{r2, r3, r4, r5}
100143c2:	4690      	mov	r8, r2
100143c4:	4699      	mov	r9, r3
100143c6:	46a2      	mov	sl, r4
100143c8:	46ab      	mov	fp, r5
100143ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
100143cc:	2800      	cmp	r0, #0
100143ce:	d0f2      	beq.n	100143b6 <__gedf2+0x5e>
100143d0:	4258      	negs	r0, r3
100143d2:	4158      	adcs	r0, r3
100143d4:	2201      	movs	r2, #1
100143d6:	4240      	negs	r0, r0
100143d8:	4310      	orrs	r0, r2
100143da:	e7f1      	b.n	100143c0 <__gedf2+0x68>
100143dc:	0037      	movs	r7, r6
100143de:	4307      	orrs	r7, r0
100143e0:	d0d0      	beq.n	10014384 <__gedf2+0x2c>
100143e2:	2002      	movs	r0, #2
100143e4:	4240      	negs	r0, r0
100143e6:	e7eb      	b.n	100143c0 <__gedf2+0x68>
100143e8:	465f      	mov	r7, fp
100143ea:	4317      	orrs	r7, r2
100143ec:	d0cd      	beq.n	1001438a <__gedf2+0x32>
100143ee:	e7f8      	b.n	100143e2 <__gedf2+0x8a>
100143f0:	42a5      	cmp	r5, r4
100143f2:	dce2      	bgt.n	100143ba <__gedf2+0x62>
100143f4:	db05      	blt.n	10014402 <__gedf2+0xaa>
100143f6:	455e      	cmp	r6, fp
100143f8:	d8df      	bhi.n	100143ba <__gedf2+0x62>
100143fa:	d008      	beq.n	1001440e <__gedf2+0xb6>
100143fc:	2000      	movs	r0, #0
100143fe:	455e      	cmp	r6, fp
10014400:	d2de      	bcs.n	100143c0 <__gedf2+0x68>
10014402:	4248      	negs	r0, r1
10014404:	4148      	adcs	r0, r1
10014406:	2301      	movs	r3, #1
10014408:	4240      	negs	r0, r0
1001440a:	4318      	orrs	r0, r3
1001440c:	e7d8      	b.n	100143c0 <__gedf2+0x68>
1001440e:	45c4      	cmp	ip, r8
10014410:	d8d3      	bhi.n	100143ba <__gedf2+0x62>
10014412:	2000      	movs	r0, #0
10014414:	45c4      	cmp	ip, r8
10014416:	d3f4      	bcc.n	10014402 <__gedf2+0xaa>
10014418:	e7d2      	b.n	100143c0 <__gedf2+0x68>
1001441a:	46c0      	nop			; (mov r8, r8)
1001441c:	000007ff 	.word	0x000007ff

10014420 <__ledf2>:
10014420:	b5f0      	push	{r4, r5, r6, r7, lr}
10014422:	465f      	mov	r7, fp
10014424:	464d      	mov	r5, r9
10014426:	4644      	mov	r4, r8
10014428:	4656      	mov	r6, sl
1001442a:	b4f0      	push	{r4, r5, r6, r7}
1001442c:	031c      	lsls	r4, r3, #12
1001442e:	0b24      	lsrs	r4, r4, #12
10014430:	46a4      	mov	ip, r4
10014432:	4c2f      	ldr	r4, [pc, #188]	; (100144f0 <__ledf2+0xd0>)
10014434:	030f      	lsls	r7, r1, #12
10014436:	004d      	lsls	r5, r1, #1
10014438:	005e      	lsls	r6, r3, #1
1001443a:	0fc9      	lsrs	r1, r1, #31
1001443c:	4680      	mov	r8, r0
1001443e:	0b3f      	lsrs	r7, r7, #12
10014440:	0d6d      	lsrs	r5, r5, #21
10014442:	468b      	mov	fp, r1
10014444:	4691      	mov	r9, r2
10014446:	0d76      	lsrs	r6, r6, #21
10014448:	0fdb      	lsrs	r3, r3, #31
1001444a:	42a5      	cmp	r5, r4
1001444c:	d020      	beq.n	10014490 <__ledf2+0x70>
1001444e:	4c28      	ldr	r4, [pc, #160]	; (100144f0 <__ledf2+0xd0>)
10014450:	42a6      	cmp	r6, r4
10014452:	d022      	beq.n	1001449a <__ledf2+0x7a>
10014454:	2d00      	cmp	r5, #0
10014456:	d112      	bne.n	1001447e <__ledf2+0x5e>
10014458:	4338      	orrs	r0, r7
1001445a:	4244      	negs	r4, r0
1001445c:	4144      	adcs	r4, r0
1001445e:	2e00      	cmp	r6, #0
10014460:	d020      	beq.n	100144a4 <__ledf2+0x84>
10014462:	2c00      	cmp	r4, #0
10014464:	d00d      	beq.n	10014482 <__ledf2+0x62>
10014466:	425c      	negs	r4, r3
10014468:	4163      	adcs	r3, r4
1001446a:	2401      	movs	r4, #1
1001446c:	425b      	negs	r3, r3
1001446e:	431c      	orrs	r4, r3
10014470:	0020      	movs	r0, r4
10014472:	bc3c      	pop	{r2, r3, r4, r5}
10014474:	4690      	mov	r8, r2
10014476:	4699      	mov	r9, r3
10014478:	46a2      	mov	sl, r4
1001447a:	46ab      	mov	fp, r5
1001447c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001447e:	2e00      	cmp	r6, #0
10014480:	d017      	beq.n	100144b2 <__ledf2+0x92>
10014482:	455b      	cmp	r3, fp
10014484:	d019      	beq.n	100144ba <__ledf2+0x9a>
10014486:	465b      	mov	r3, fp
10014488:	425c      	negs	r4, r3
1001448a:	2301      	movs	r3, #1
1001448c:	431c      	orrs	r4, r3
1001448e:	e7ef      	b.n	10014470 <__ledf2+0x50>
10014490:	0039      	movs	r1, r7
10014492:	2402      	movs	r4, #2
10014494:	4301      	orrs	r1, r0
10014496:	d1eb      	bne.n	10014470 <__ledf2+0x50>
10014498:	e7d9      	b.n	1001444e <__ledf2+0x2e>
1001449a:	4661      	mov	r1, ip
1001449c:	2402      	movs	r4, #2
1001449e:	4311      	orrs	r1, r2
100144a0:	d1e6      	bne.n	10014470 <__ledf2+0x50>
100144a2:	e7d7      	b.n	10014454 <__ledf2+0x34>
100144a4:	4661      	mov	r1, ip
100144a6:	430a      	orrs	r2, r1
100144a8:	d1db      	bne.n	10014462 <__ledf2+0x42>
100144aa:	2400      	movs	r4, #0
100144ac:	2800      	cmp	r0, #0
100144ae:	d0df      	beq.n	10014470 <__ledf2+0x50>
100144b0:	e7e9      	b.n	10014486 <__ledf2+0x66>
100144b2:	4661      	mov	r1, ip
100144b4:	430a      	orrs	r2, r1
100144b6:	d1e4      	bne.n	10014482 <__ledf2+0x62>
100144b8:	e7e5      	b.n	10014486 <__ledf2+0x66>
100144ba:	42b5      	cmp	r5, r6
100144bc:	dd03      	ble.n	100144c6 <__ledf2+0xa6>
100144be:	2201      	movs	r2, #1
100144c0:	425c      	negs	r4, r3
100144c2:	4314      	orrs	r4, r2
100144c4:	e7d4      	b.n	10014470 <__ledf2+0x50>
100144c6:	42b5      	cmp	r5, r6
100144c8:	dbcd      	blt.n	10014466 <__ledf2+0x46>
100144ca:	4567      	cmp	r7, ip
100144cc:	d8db      	bhi.n	10014486 <__ledf2+0x66>
100144ce:	d009      	beq.n	100144e4 <__ledf2+0xc4>
100144d0:	2400      	movs	r4, #0
100144d2:	4567      	cmp	r7, ip
100144d4:	d2cc      	bcs.n	10014470 <__ledf2+0x50>
100144d6:	4659      	mov	r1, fp
100144d8:	424c      	negs	r4, r1
100144da:	4161      	adcs	r1, r4
100144dc:	2401      	movs	r4, #1
100144de:	4249      	negs	r1, r1
100144e0:	430c      	orrs	r4, r1
100144e2:	e7c5      	b.n	10014470 <__ledf2+0x50>
100144e4:	45c8      	cmp	r8, r9
100144e6:	d8ce      	bhi.n	10014486 <__ledf2+0x66>
100144e8:	2400      	movs	r4, #0
100144ea:	45c8      	cmp	r8, r9
100144ec:	d3f3      	bcc.n	100144d6 <__ledf2+0xb6>
100144ee:	e7bf      	b.n	10014470 <__ledf2+0x50>
100144f0:	000007ff 	.word	0x000007ff

100144f4 <__aeabi_dmul>:
100144f4:	b5f0      	push	{r4, r5, r6, r7, lr}
100144f6:	465f      	mov	r7, fp
100144f8:	4656      	mov	r6, sl
100144fa:	464d      	mov	r5, r9
100144fc:	4644      	mov	r4, r8
100144fe:	b4f0      	push	{r4, r5, r6, r7}
10014500:	030d      	lsls	r5, r1, #12
10014502:	4699      	mov	r9, r3
10014504:	004e      	lsls	r6, r1, #1
10014506:	0b2b      	lsrs	r3, r5, #12
10014508:	b087      	sub	sp, #28
1001450a:	0007      	movs	r7, r0
1001450c:	4692      	mov	sl, r2
1001450e:	4680      	mov	r8, r0
10014510:	469b      	mov	fp, r3
10014512:	0d76      	lsrs	r6, r6, #21
10014514:	0fcc      	lsrs	r4, r1, #31
10014516:	2e00      	cmp	r6, #0
10014518:	d069      	beq.n	100145ee <__aeabi_dmul+0xfa>
1001451a:	4b6d      	ldr	r3, [pc, #436]	; (100146d0 <__aeabi_dmul+0x1dc>)
1001451c:	429e      	cmp	r6, r3
1001451e:	d035      	beq.n	1001458c <__aeabi_dmul+0x98>
10014520:	465b      	mov	r3, fp
10014522:	2280      	movs	r2, #128	; 0x80
10014524:	00dd      	lsls	r5, r3, #3
10014526:	0412      	lsls	r2, r2, #16
10014528:	0f43      	lsrs	r3, r0, #29
1001452a:	4313      	orrs	r3, r2
1001452c:	432b      	orrs	r3, r5
1001452e:	469b      	mov	fp, r3
10014530:	00c3      	lsls	r3, r0, #3
10014532:	4698      	mov	r8, r3
10014534:	4b67      	ldr	r3, [pc, #412]	; (100146d4 <__aeabi_dmul+0x1e0>)
10014536:	2700      	movs	r7, #0
10014538:	469c      	mov	ip, r3
1001453a:	2300      	movs	r3, #0
1001453c:	4466      	add	r6, ip
1001453e:	9301      	str	r3, [sp, #4]
10014540:	464a      	mov	r2, r9
10014542:	0315      	lsls	r5, r2, #12
10014544:	0050      	lsls	r0, r2, #1
10014546:	0fd2      	lsrs	r2, r2, #31
10014548:	4653      	mov	r3, sl
1001454a:	0b2d      	lsrs	r5, r5, #12
1001454c:	0d40      	lsrs	r0, r0, #21
1001454e:	4691      	mov	r9, r2
10014550:	d100      	bne.n	10014554 <__aeabi_dmul+0x60>
10014552:	e076      	b.n	10014642 <__aeabi_dmul+0x14e>
10014554:	4a5e      	ldr	r2, [pc, #376]	; (100146d0 <__aeabi_dmul+0x1dc>)
10014556:	4290      	cmp	r0, r2
10014558:	d06c      	beq.n	10014634 <__aeabi_dmul+0x140>
1001455a:	2280      	movs	r2, #128	; 0x80
1001455c:	0f5b      	lsrs	r3, r3, #29
1001455e:	0412      	lsls	r2, r2, #16
10014560:	4313      	orrs	r3, r2
10014562:	4a5c      	ldr	r2, [pc, #368]	; (100146d4 <__aeabi_dmul+0x1e0>)
10014564:	00ed      	lsls	r5, r5, #3
10014566:	4694      	mov	ip, r2
10014568:	431d      	orrs	r5, r3
1001456a:	4653      	mov	r3, sl
1001456c:	2200      	movs	r2, #0
1001456e:	00db      	lsls	r3, r3, #3
10014570:	4460      	add	r0, ip
10014572:	4649      	mov	r1, r9
10014574:	1836      	adds	r6, r6, r0
10014576:	1c70      	adds	r0, r6, #1
10014578:	4061      	eors	r1, r4
1001457a:	9002      	str	r0, [sp, #8]
1001457c:	4317      	orrs	r7, r2
1001457e:	2f0f      	cmp	r7, #15
10014580:	d900      	bls.n	10014584 <__aeabi_dmul+0x90>
10014582:	e0af      	b.n	100146e4 <__aeabi_dmul+0x1f0>
10014584:	4854      	ldr	r0, [pc, #336]	; (100146d8 <__aeabi_dmul+0x1e4>)
10014586:	00bf      	lsls	r7, r7, #2
10014588:	59c7      	ldr	r7, [r0, r7]
1001458a:	46bf      	mov	pc, r7
1001458c:	465b      	mov	r3, fp
1001458e:	431f      	orrs	r7, r3
10014590:	d000      	beq.n	10014594 <__aeabi_dmul+0xa0>
10014592:	e088      	b.n	100146a6 <__aeabi_dmul+0x1b2>
10014594:	2300      	movs	r3, #0
10014596:	469b      	mov	fp, r3
10014598:	4698      	mov	r8, r3
1001459a:	3302      	adds	r3, #2
1001459c:	2708      	movs	r7, #8
1001459e:	9301      	str	r3, [sp, #4]
100145a0:	e7ce      	b.n	10014540 <__aeabi_dmul+0x4c>
100145a2:	4649      	mov	r1, r9
100145a4:	2a02      	cmp	r2, #2
100145a6:	d06a      	beq.n	1001467e <__aeabi_dmul+0x18a>
100145a8:	2a03      	cmp	r2, #3
100145aa:	d100      	bne.n	100145ae <__aeabi_dmul+0xba>
100145ac:	e209      	b.n	100149c2 <__aeabi_dmul+0x4ce>
100145ae:	2a01      	cmp	r2, #1
100145b0:	d000      	beq.n	100145b4 <__aeabi_dmul+0xc0>
100145b2:	e1bb      	b.n	1001492c <__aeabi_dmul+0x438>
100145b4:	4011      	ands	r1, r2
100145b6:	2200      	movs	r2, #0
100145b8:	2300      	movs	r3, #0
100145ba:	2500      	movs	r5, #0
100145bc:	4690      	mov	r8, r2
100145be:	b2cc      	uxtb	r4, r1
100145c0:	2100      	movs	r1, #0
100145c2:	032d      	lsls	r5, r5, #12
100145c4:	0d0a      	lsrs	r2, r1, #20
100145c6:	0512      	lsls	r2, r2, #20
100145c8:	0b2d      	lsrs	r5, r5, #12
100145ca:	4315      	orrs	r5, r2
100145cc:	4a43      	ldr	r2, [pc, #268]	; (100146dc <__aeabi_dmul+0x1e8>)
100145ce:	051b      	lsls	r3, r3, #20
100145d0:	4015      	ands	r5, r2
100145d2:	431d      	orrs	r5, r3
100145d4:	006d      	lsls	r5, r5, #1
100145d6:	07e4      	lsls	r4, r4, #31
100145d8:	086d      	lsrs	r5, r5, #1
100145da:	4325      	orrs	r5, r4
100145dc:	4640      	mov	r0, r8
100145de:	0029      	movs	r1, r5
100145e0:	b007      	add	sp, #28
100145e2:	bc3c      	pop	{r2, r3, r4, r5}
100145e4:	4690      	mov	r8, r2
100145e6:	4699      	mov	r9, r3
100145e8:	46a2      	mov	sl, r4
100145ea:	46ab      	mov	fp, r5
100145ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
100145ee:	4303      	orrs	r3, r0
100145f0:	d052      	beq.n	10014698 <__aeabi_dmul+0x1a4>
100145f2:	465b      	mov	r3, fp
100145f4:	2b00      	cmp	r3, #0
100145f6:	d100      	bne.n	100145fa <__aeabi_dmul+0x106>
100145f8:	e18a      	b.n	10014910 <__aeabi_dmul+0x41c>
100145fa:	4658      	mov	r0, fp
100145fc:	f000 fdb6 	bl	1001516c <__clzsi2>
10014600:	0003      	movs	r3, r0
10014602:	3b0b      	subs	r3, #11
10014604:	2b1c      	cmp	r3, #28
10014606:	dd00      	ble.n	1001460a <__aeabi_dmul+0x116>
10014608:	e17b      	b.n	10014902 <__aeabi_dmul+0x40e>
1001460a:	221d      	movs	r2, #29
1001460c:	1ad3      	subs	r3, r2, r3
1001460e:	003a      	movs	r2, r7
10014610:	0001      	movs	r1, r0
10014612:	465d      	mov	r5, fp
10014614:	40da      	lsrs	r2, r3
10014616:	3908      	subs	r1, #8
10014618:	408d      	lsls	r5, r1
1001461a:	0013      	movs	r3, r2
1001461c:	408f      	lsls	r7, r1
1001461e:	432b      	orrs	r3, r5
10014620:	469b      	mov	fp, r3
10014622:	46b8      	mov	r8, r7
10014624:	4b2e      	ldr	r3, [pc, #184]	; (100146e0 <__aeabi_dmul+0x1ec>)
10014626:	2700      	movs	r7, #0
10014628:	469c      	mov	ip, r3
1001462a:	2300      	movs	r3, #0
1001462c:	4460      	add	r0, ip
1001462e:	4246      	negs	r6, r0
10014630:	9301      	str	r3, [sp, #4]
10014632:	e785      	b.n	10014540 <__aeabi_dmul+0x4c>
10014634:	4652      	mov	r2, sl
10014636:	432a      	orrs	r2, r5
10014638:	d12c      	bne.n	10014694 <__aeabi_dmul+0x1a0>
1001463a:	2500      	movs	r5, #0
1001463c:	2300      	movs	r3, #0
1001463e:	2202      	movs	r2, #2
10014640:	e797      	b.n	10014572 <__aeabi_dmul+0x7e>
10014642:	4652      	mov	r2, sl
10014644:	432a      	orrs	r2, r5
10014646:	d021      	beq.n	1001468c <__aeabi_dmul+0x198>
10014648:	2d00      	cmp	r5, #0
1001464a:	d100      	bne.n	1001464e <__aeabi_dmul+0x15a>
1001464c:	e154      	b.n	100148f8 <__aeabi_dmul+0x404>
1001464e:	0028      	movs	r0, r5
10014650:	f000 fd8c 	bl	1001516c <__clzsi2>
10014654:	0003      	movs	r3, r0
10014656:	3b0b      	subs	r3, #11
10014658:	2b1c      	cmp	r3, #28
1001465a:	dd00      	ble.n	1001465e <__aeabi_dmul+0x16a>
1001465c:	e146      	b.n	100148ec <__aeabi_dmul+0x3f8>
1001465e:	211d      	movs	r1, #29
10014660:	1acb      	subs	r3, r1, r3
10014662:	4651      	mov	r1, sl
10014664:	0002      	movs	r2, r0
10014666:	40d9      	lsrs	r1, r3
10014668:	4653      	mov	r3, sl
1001466a:	3a08      	subs	r2, #8
1001466c:	4095      	lsls	r5, r2
1001466e:	4093      	lsls	r3, r2
10014670:	430d      	orrs	r5, r1
10014672:	4a1b      	ldr	r2, [pc, #108]	; (100146e0 <__aeabi_dmul+0x1ec>)
10014674:	4694      	mov	ip, r2
10014676:	4460      	add	r0, ip
10014678:	4240      	negs	r0, r0
1001467a:	2200      	movs	r2, #0
1001467c:	e779      	b.n	10014572 <__aeabi_dmul+0x7e>
1001467e:	2401      	movs	r4, #1
10014680:	2200      	movs	r2, #0
10014682:	400c      	ands	r4, r1
10014684:	4b12      	ldr	r3, [pc, #72]	; (100146d0 <__aeabi_dmul+0x1dc>)
10014686:	2500      	movs	r5, #0
10014688:	4690      	mov	r8, r2
1001468a:	e799      	b.n	100145c0 <__aeabi_dmul+0xcc>
1001468c:	2500      	movs	r5, #0
1001468e:	2300      	movs	r3, #0
10014690:	2201      	movs	r2, #1
10014692:	e76e      	b.n	10014572 <__aeabi_dmul+0x7e>
10014694:	2203      	movs	r2, #3
10014696:	e76c      	b.n	10014572 <__aeabi_dmul+0x7e>
10014698:	2300      	movs	r3, #0
1001469a:	469b      	mov	fp, r3
1001469c:	4698      	mov	r8, r3
1001469e:	3301      	adds	r3, #1
100146a0:	2704      	movs	r7, #4
100146a2:	9301      	str	r3, [sp, #4]
100146a4:	e74c      	b.n	10014540 <__aeabi_dmul+0x4c>
100146a6:	2303      	movs	r3, #3
100146a8:	270c      	movs	r7, #12
100146aa:	9301      	str	r3, [sp, #4]
100146ac:	e748      	b.n	10014540 <__aeabi_dmul+0x4c>
100146ae:	2300      	movs	r3, #0
100146b0:	2580      	movs	r5, #128	; 0x80
100146b2:	4698      	mov	r8, r3
100146b4:	2400      	movs	r4, #0
100146b6:	032d      	lsls	r5, r5, #12
100146b8:	4b05      	ldr	r3, [pc, #20]	; (100146d0 <__aeabi_dmul+0x1dc>)
100146ba:	e781      	b.n	100145c0 <__aeabi_dmul+0xcc>
100146bc:	465d      	mov	r5, fp
100146be:	4643      	mov	r3, r8
100146c0:	9a01      	ldr	r2, [sp, #4]
100146c2:	e76f      	b.n	100145a4 <__aeabi_dmul+0xb0>
100146c4:	465d      	mov	r5, fp
100146c6:	4643      	mov	r3, r8
100146c8:	0021      	movs	r1, r4
100146ca:	9a01      	ldr	r2, [sp, #4]
100146cc:	e76a      	b.n	100145a4 <__aeabi_dmul+0xb0>
100146ce:	46c0      	nop			; (mov r8, r8)
100146d0:	000007ff 	.word	0x000007ff
100146d4:	fffffc01 	.word	0xfffffc01
100146d8:	10018504 	.word	0x10018504
100146dc:	800fffff 	.word	0x800fffff
100146e0:	000003f3 	.word	0x000003f3
100146e4:	4642      	mov	r2, r8
100146e6:	0c12      	lsrs	r2, r2, #16
100146e8:	4691      	mov	r9, r2
100146ea:	0c1a      	lsrs	r2, r3, #16
100146ec:	4694      	mov	ip, r2
100146ee:	4642      	mov	r2, r8
100146f0:	0417      	lsls	r7, r2, #16
100146f2:	464a      	mov	r2, r9
100146f4:	041b      	lsls	r3, r3, #16
100146f6:	0c1b      	lsrs	r3, r3, #16
100146f8:	435a      	muls	r2, r3
100146fa:	4660      	mov	r0, ip
100146fc:	4690      	mov	r8, r2
100146fe:	464a      	mov	r2, r9
10014700:	4342      	muls	r2, r0
10014702:	0010      	movs	r0, r2
10014704:	9203      	str	r2, [sp, #12]
10014706:	4662      	mov	r2, ip
10014708:	001c      	movs	r4, r3
1001470a:	0c3f      	lsrs	r7, r7, #16
1001470c:	437a      	muls	r2, r7
1001470e:	437c      	muls	r4, r7
10014710:	4442      	add	r2, r8
10014712:	9201      	str	r2, [sp, #4]
10014714:	0c22      	lsrs	r2, r4, #16
10014716:	4692      	mov	sl, r2
10014718:	9a01      	ldr	r2, [sp, #4]
1001471a:	4452      	add	r2, sl
1001471c:	4590      	cmp	r8, r2
1001471e:	d906      	bls.n	1001472e <__aeabi_dmul+0x23a>
10014720:	4682      	mov	sl, r0
10014722:	2080      	movs	r0, #128	; 0x80
10014724:	0240      	lsls	r0, r0, #9
10014726:	4680      	mov	r8, r0
10014728:	44c2      	add	sl, r8
1001472a:	4650      	mov	r0, sl
1001472c:	9003      	str	r0, [sp, #12]
1001472e:	0c10      	lsrs	r0, r2, #16
10014730:	9004      	str	r0, [sp, #16]
10014732:	4648      	mov	r0, r9
10014734:	0424      	lsls	r4, r4, #16
10014736:	0c24      	lsrs	r4, r4, #16
10014738:	0412      	lsls	r2, r2, #16
1001473a:	1912      	adds	r2, r2, r4
1001473c:	9205      	str	r2, [sp, #20]
1001473e:	0c2a      	lsrs	r2, r5, #16
10014740:	042d      	lsls	r5, r5, #16
10014742:	0c2d      	lsrs	r5, r5, #16
10014744:	4368      	muls	r0, r5
10014746:	002c      	movs	r4, r5
10014748:	4682      	mov	sl, r0
1001474a:	4648      	mov	r0, r9
1001474c:	437c      	muls	r4, r7
1001474e:	4350      	muls	r0, r2
10014750:	4681      	mov	r9, r0
10014752:	0c20      	lsrs	r0, r4, #16
10014754:	4680      	mov	r8, r0
10014756:	4357      	muls	r7, r2
10014758:	4457      	add	r7, sl
1001475a:	4447      	add	r7, r8
1001475c:	45ba      	cmp	sl, r7
1001475e:	d903      	bls.n	10014768 <__aeabi_dmul+0x274>
10014760:	2080      	movs	r0, #128	; 0x80
10014762:	0240      	lsls	r0, r0, #9
10014764:	4680      	mov	r8, r0
10014766:	44c1      	add	r9, r8
10014768:	0c38      	lsrs	r0, r7, #16
1001476a:	043f      	lsls	r7, r7, #16
1001476c:	46b8      	mov	r8, r7
1001476e:	4448      	add	r0, r9
10014770:	0424      	lsls	r4, r4, #16
10014772:	0c24      	lsrs	r4, r4, #16
10014774:	9001      	str	r0, [sp, #4]
10014776:	9804      	ldr	r0, [sp, #16]
10014778:	44a0      	add	r8, r4
1001477a:	4440      	add	r0, r8
1001477c:	9004      	str	r0, [sp, #16]
1001477e:	4658      	mov	r0, fp
10014780:	0c00      	lsrs	r0, r0, #16
10014782:	4681      	mov	r9, r0
10014784:	4658      	mov	r0, fp
10014786:	0404      	lsls	r4, r0, #16
10014788:	0c20      	lsrs	r0, r4, #16
1001478a:	4682      	mov	sl, r0
1001478c:	0007      	movs	r7, r0
1001478e:	4648      	mov	r0, r9
10014790:	435f      	muls	r7, r3
10014792:	464c      	mov	r4, r9
10014794:	4343      	muls	r3, r0
10014796:	4660      	mov	r0, ip
10014798:	4360      	muls	r0, r4
1001479a:	4664      	mov	r4, ip
1001479c:	4683      	mov	fp, r0
1001479e:	4650      	mov	r0, sl
100147a0:	4344      	muls	r4, r0
100147a2:	0c38      	lsrs	r0, r7, #16
100147a4:	4684      	mov	ip, r0
100147a6:	18e4      	adds	r4, r4, r3
100147a8:	4464      	add	r4, ip
100147aa:	42a3      	cmp	r3, r4
100147ac:	d903      	bls.n	100147b6 <__aeabi_dmul+0x2c2>
100147ae:	2380      	movs	r3, #128	; 0x80
100147b0:	025b      	lsls	r3, r3, #9
100147b2:	469c      	mov	ip, r3
100147b4:	44e3      	add	fp, ip
100147b6:	4648      	mov	r0, r9
100147b8:	043f      	lsls	r7, r7, #16
100147ba:	0c23      	lsrs	r3, r4, #16
100147bc:	0c3f      	lsrs	r7, r7, #16
100147be:	0424      	lsls	r4, r4, #16
100147c0:	19e4      	adds	r4, r4, r7
100147c2:	4657      	mov	r7, sl
100147c4:	4368      	muls	r0, r5
100147c6:	436f      	muls	r7, r5
100147c8:	4684      	mov	ip, r0
100147ca:	464d      	mov	r5, r9
100147cc:	4650      	mov	r0, sl
100147ce:	4355      	muls	r5, r2
100147d0:	4342      	muls	r2, r0
100147d2:	0c38      	lsrs	r0, r7, #16
100147d4:	4681      	mov	r9, r0
100147d6:	4462      	add	r2, ip
100147d8:	444a      	add	r2, r9
100147da:	445b      	add	r3, fp
100147dc:	4594      	cmp	ip, r2
100147de:	d903      	bls.n	100147e8 <__aeabi_dmul+0x2f4>
100147e0:	2080      	movs	r0, #128	; 0x80
100147e2:	0240      	lsls	r0, r0, #9
100147e4:	4684      	mov	ip, r0
100147e6:	4465      	add	r5, ip
100147e8:	9803      	ldr	r0, [sp, #12]
100147ea:	043f      	lsls	r7, r7, #16
100147ec:	4683      	mov	fp, r0
100147ee:	9804      	ldr	r0, [sp, #16]
100147f0:	0c3f      	lsrs	r7, r7, #16
100147f2:	4684      	mov	ip, r0
100147f4:	44e3      	add	fp, ip
100147f6:	45c3      	cmp	fp, r8
100147f8:	4180      	sbcs	r0, r0
100147fa:	4240      	negs	r0, r0
100147fc:	4682      	mov	sl, r0
100147fe:	0410      	lsls	r0, r2, #16
10014800:	4684      	mov	ip, r0
10014802:	9801      	ldr	r0, [sp, #4]
10014804:	4467      	add	r7, ip
10014806:	4684      	mov	ip, r0
10014808:	4467      	add	r7, ip
1001480a:	44a3      	add	fp, r4
1001480c:	46bc      	mov	ip, r7
1001480e:	45a3      	cmp	fp, r4
10014810:	41a4      	sbcs	r4, r4
10014812:	4699      	mov	r9, r3
10014814:	44d4      	add	ip, sl
10014816:	4264      	negs	r4, r4
10014818:	4287      	cmp	r7, r0
1001481a:	41bf      	sbcs	r7, r7
1001481c:	45d4      	cmp	ip, sl
1001481e:	4180      	sbcs	r0, r0
10014820:	44e1      	add	r9, ip
10014822:	46a0      	mov	r8, r4
10014824:	4599      	cmp	r9, r3
10014826:	419b      	sbcs	r3, r3
10014828:	427f      	negs	r7, r7
1001482a:	4240      	negs	r0, r0
1001482c:	44c8      	add	r8, r9
1001482e:	4307      	orrs	r7, r0
10014830:	0c12      	lsrs	r2, r2, #16
10014832:	18ba      	adds	r2, r7, r2
10014834:	45a0      	cmp	r8, r4
10014836:	41a4      	sbcs	r4, r4
10014838:	425f      	negs	r7, r3
1001483a:	003b      	movs	r3, r7
1001483c:	4264      	negs	r4, r4
1001483e:	4323      	orrs	r3, r4
10014840:	18d7      	adds	r7, r2, r3
10014842:	4643      	mov	r3, r8
10014844:	197d      	adds	r5, r7, r5
10014846:	0ddb      	lsrs	r3, r3, #23
10014848:	026d      	lsls	r5, r5, #9
1001484a:	431d      	orrs	r5, r3
1001484c:	465b      	mov	r3, fp
1001484e:	025a      	lsls	r2, r3, #9
10014850:	9b05      	ldr	r3, [sp, #20]
10014852:	431a      	orrs	r2, r3
10014854:	1e53      	subs	r3, r2, #1
10014856:	419a      	sbcs	r2, r3
10014858:	465b      	mov	r3, fp
1001485a:	0ddb      	lsrs	r3, r3, #23
1001485c:	431a      	orrs	r2, r3
1001485e:	4643      	mov	r3, r8
10014860:	025b      	lsls	r3, r3, #9
10014862:	4313      	orrs	r3, r2
10014864:	01ea      	lsls	r2, r5, #7
10014866:	d507      	bpl.n	10014878 <__aeabi_dmul+0x384>
10014868:	2201      	movs	r2, #1
1001486a:	085c      	lsrs	r4, r3, #1
1001486c:	4013      	ands	r3, r2
1001486e:	4323      	orrs	r3, r4
10014870:	07ea      	lsls	r2, r5, #31
10014872:	9e02      	ldr	r6, [sp, #8]
10014874:	4313      	orrs	r3, r2
10014876:	086d      	lsrs	r5, r5, #1
10014878:	4a57      	ldr	r2, [pc, #348]	; (100149d8 <__aeabi_dmul+0x4e4>)
1001487a:	18b2      	adds	r2, r6, r2
1001487c:	2a00      	cmp	r2, #0
1001487e:	dd4b      	ble.n	10014918 <__aeabi_dmul+0x424>
10014880:	0758      	lsls	r0, r3, #29
10014882:	d009      	beq.n	10014898 <__aeabi_dmul+0x3a4>
10014884:	200f      	movs	r0, #15
10014886:	4018      	ands	r0, r3
10014888:	2804      	cmp	r0, #4
1001488a:	d005      	beq.n	10014898 <__aeabi_dmul+0x3a4>
1001488c:	1d18      	adds	r0, r3, #4
1001488e:	4298      	cmp	r0, r3
10014890:	419b      	sbcs	r3, r3
10014892:	425b      	negs	r3, r3
10014894:	18ed      	adds	r5, r5, r3
10014896:	0003      	movs	r3, r0
10014898:	01e8      	lsls	r0, r5, #7
1001489a:	d504      	bpl.n	100148a6 <__aeabi_dmul+0x3b2>
1001489c:	4a4f      	ldr	r2, [pc, #316]	; (100149dc <__aeabi_dmul+0x4e8>)
1001489e:	4015      	ands	r5, r2
100148a0:	2280      	movs	r2, #128	; 0x80
100148a2:	00d2      	lsls	r2, r2, #3
100148a4:	18b2      	adds	r2, r6, r2
100148a6:	484e      	ldr	r0, [pc, #312]	; (100149e0 <__aeabi_dmul+0x4ec>)
100148a8:	4282      	cmp	r2, r0
100148aa:	dd00      	ble.n	100148ae <__aeabi_dmul+0x3ba>
100148ac:	e6e7      	b.n	1001467e <__aeabi_dmul+0x18a>
100148ae:	2401      	movs	r4, #1
100148b0:	08db      	lsrs	r3, r3, #3
100148b2:	0768      	lsls	r0, r5, #29
100148b4:	4318      	orrs	r0, r3
100148b6:	026d      	lsls	r5, r5, #9
100148b8:	0553      	lsls	r3, r2, #21
100148ba:	4680      	mov	r8, r0
100148bc:	0b2d      	lsrs	r5, r5, #12
100148be:	0d5b      	lsrs	r3, r3, #21
100148c0:	400c      	ands	r4, r1
100148c2:	e67d      	b.n	100145c0 <__aeabi_dmul+0xcc>
100148c4:	2280      	movs	r2, #128	; 0x80
100148c6:	4659      	mov	r1, fp
100148c8:	0312      	lsls	r2, r2, #12
100148ca:	4211      	tst	r1, r2
100148cc:	d008      	beq.n	100148e0 <__aeabi_dmul+0x3ec>
100148ce:	4215      	tst	r5, r2
100148d0:	d106      	bne.n	100148e0 <__aeabi_dmul+0x3ec>
100148d2:	4315      	orrs	r5, r2
100148d4:	032d      	lsls	r5, r5, #12
100148d6:	4698      	mov	r8, r3
100148d8:	0b2d      	lsrs	r5, r5, #12
100148da:	464c      	mov	r4, r9
100148dc:	4b41      	ldr	r3, [pc, #260]	; (100149e4 <__aeabi_dmul+0x4f0>)
100148de:	e66f      	b.n	100145c0 <__aeabi_dmul+0xcc>
100148e0:	465d      	mov	r5, fp
100148e2:	4315      	orrs	r5, r2
100148e4:	032d      	lsls	r5, r5, #12
100148e6:	0b2d      	lsrs	r5, r5, #12
100148e8:	4b3e      	ldr	r3, [pc, #248]	; (100149e4 <__aeabi_dmul+0x4f0>)
100148ea:	e669      	b.n	100145c0 <__aeabi_dmul+0xcc>
100148ec:	0003      	movs	r3, r0
100148ee:	4655      	mov	r5, sl
100148f0:	3b28      	subs	r3, #40	; 0x28
100148f2:	409d      	lsls	r5, r3
100148f4:	2300      	movs	r3, #0
100148f6:	e6bc      	b.n	10014672 <__aeabi_dmul+0x17e>
100148f8:	4650      	mov	r0, sl
100148fa:	f000 fc37 	bl	1001516c <__clzsi2>
100148fe:	3020      	adds	r0, #32
10014900:	e6a8      	b.n	10014654 <__aeabi_dmul+0x160>
10014902:	0003      	movs	r3, r0
10014904:	3b28      	subs	r3, #40	; 0x28
10014906:	409f      	lsls	r7, r3
10014908:	2300      	movs	r3, #0
1001490a:	46bb      	mov	fp, r7
1001490c:	4698      	mov	r8, r3
1001490e:	e689      	b.n	10014624 <__aeabi_dmul+0x130>
10014910:	f000 fc2c 	bl	1001516c <__clzsi2>
10014914:	3020      	adds	r0, #32
10014916:	e673      	b.n	10014600 <__aeabi_dmul+0x10c>
10014918:	2401      	movs	r4, #1
1001491a:	1aa6      	subs	r6, r4, r2
1001491c:	2e38      	cmp	r6, #56	; 0x38
1001491e:	dd07      	ble.n	10014930 <__aeabi_dmul+0x43c>
10014920:	2200      	movs	r2, #0
10014922:	400c      	ands	r4, r1
10014924:	2300      	movs	r3, #0
10014926:	2500      	movs	r5, #0
10014928:	4690      	mov	r8, r2
1001492a:	e649      	b.n	100145c0 <__aeabi_dmul+0xcc>
1001492c:	9e02      	ldr	r6, [sp, #8]
1001492e:	e7a3      	b.n	10014878 <__aeabi_dmul+0x384>
10014930:	2e1f      	cmp	r6, #31
10014932:	dc20      	bgt.n	10014976 <__aeabi_dmul+0x482>
10014934:	2220      	movs	r2, #32
10014936:	002c      	movs	r4, r5
10014938:	0018      	movs	r0, r3
1001493a:	1b92      	subs	r2, r2, r6
1001493c:	40f0      	lsrs	r0, r6
1001493e:	4094      	lsls	r4, r2
10014940:	4093      	lsls	r3, r2
10014942:	4304      	orrs	r4, r0
10014944:	1e58      	subs	r0, r3, #1
10014946:	4183      	sbcs	r3, r0
10014948:	431c      	orrs	r4, r3
1001494a:	40f5      	lsrs	r5, r6
1001494c:	0763      	lsls	r3, r4, #29
1001494e:	d009      	beq.n	10014964 <__aeabi_dmul+0x470>
10014950:	230f      	movs	r3, #15
10014952:	4023      	ands	r3, r4
10014954:	2b04      	cmp	r3, #4
10014956:	d005      	beq.n	10014964 <__aeabi_dmul+0x470>
10014958:	0023      	movs	r3, r4
1001495a:	1d1c      	adds	r4, r3, #4
1001495c:	429c      	cmp	r4, r3
1001495e:	4192      	sbcs	r2, r2
10014960:	4252      	negs	r2, r2
10014962:	18ad      	adds	r5, r5, r2
10014964:	022b      	lsls	r3, r5, #8
10014966:	d51f      	bpl.n	100149a8 <__aeabi_dmul+0x4b4>
10014968:	2401      	movs	r4, #1
1001496a:	2200      	movs	r2, #0
1001496c:	400c      	ands	r4, r1
1001496e:	2301      	movs	r3, #1
10014970:	2500      	movs	r5, #0
10014972:	4690      	mov	r8, r2
10014974:	e624      	b.n	100145c0 <__aeabi_dmul+0xcc>
10014976:	201f      	movs	r0, #31
10014978:	002c      	movs	r4, r5
1001497a:	4240      	negs	r0, r0
1001497c:	1a82      	subs	r2, r0, r2
1001497e:	40d4      	lsrs	r4, r2
10014980:	2e20      	cmp	r6, #32
10014982:	d01c      	beq.n	100149be <__aeabi_dmul+0x4ca>
10014984:	2240      	movs	r2, #64	; 0x40
10014986:	1b96      	subs	r6, r2, r6
10014988:	40b5      	lsls	r5, r6
1001498a:	432b      	orrs	r3, r5
1001498c:	1e58      	subs	r0, r3, #1
1001498e:	4183      	sbcs	r3, r0
10014990:	2007      	movs	r0, #7
10014992:	4323      	orrs	r3, r4
10014994:	4018      	ands	r0, r3
10014996:	2500      	movs	r5, #0
10014998:	2800      	cmp	r0, #0
1001499a:	d009      	beq.n	100149b0 <__aeabi_dmul+0x4bc>
1001499c:	220f      	movs	r2, #15
1001499e:	2500      	movs	r5, #0
100149a0:	401a      	ands	r2, r3
100149a2:	001c      	movs	r4, r3
100149a4:	2a04      	cmp	r2, #4
100149a6:	d1d8      	bne.n	1001495a <__aeabi_dmul+0x466>
100149a8:	0023      	movs	r3, r4
100149aa:	0768      	lsls	r0, r5, #29
100149ac:	026d      	lsls	r5, r5, #9
100149ae:	0b2d      	lsrs	r5, r5, #12
100149b0:	2401      	movs	r4, #1
100149b2:	08db      	lsrs	r3, r3, #3
100149b4:	4303      	orrs	r3, r0
100149b6:	4698      	mov	r8, r3
100149b8:	400c      	ands	r4, r1
100149ba:	2300      	movs	r3, #0
100149bc:	e600      	b.n	100145c0 <__aeabi_dmul+0xcc>
100149be:	2500      	movs	r5, #0
100149c0:	e7e3      	b.n	1001498a <__aeabi_dmul+0x496>
100149c2:	2280      	movs	r2, #128	; 0x80
100149c4:	2401      	movs	r4, #1
100149c6:	0312      	lsls	r2, r2, #12
100149c8:	4315      	orrs	r5, r2
100149ca:	032d      	lsls	r5, r5, #12
100149cc:	4698      	mov	r8, r3
100149ce:	0b2d      	lsrs	r5, r5, #12
100149d0:	400c      	ands	r4, r1
100149d2:	4b04      	ldr	r3, [pc, #16]	; (100149e4 <__aeabi_dmul+0x4f0>)
100149d4:	e5f4      	b.n	100145c0 <__aeabi_dmul+0xcc>
100149d6:	46c0      	nop			; (mov r8, r8)
100149d8:	000003ff 	.word	0x000003ff
100149dc:	feffffff 	.word	0xfeffffff
100149e0:	000007fe 	.word	0x000007fe
100149e4:	000007ff 	.word	0x000007ff

100149e8 <__aeabi_dsub>:
100149e8:	b5f0      	push	{r4, r5, r6, r7, lr}
100149ea:	4657      	mov	r7, sl
100149ec:	464e      	mov	r6, r9
100149ee:	4645      	mov	r5, r8
100149f0:	b4e0      	push	{r5, r6, r7}
100149f2:	000e      	movs	r6, r1
100149f4:	0011      	movs	r1, r2
100149f6:	0ff2      	lsrs	r2, r6, #31
100149f8:	4692      	mov	sl, r2
100149fa:	00c5      	lsls	r5, r0, #3
100149fc:	0f42      	lsrs	r2, r0, #29
100149fe:	0318      	lsls	r0, r3, #12
10014a00:	0337      	lsls	r7, r6, #12
10014a02:	0074      	lsls	r4, r6, #1
10014a04:	0a40      	lsrs	r0, r0, #9
10014a06:	0f4e      	lsrs	r6, r1, #29
10014a08:	0a7f      	lsrs	r7, r7, #9
10014a0a:	4330      	orrs	r0, r6
10014a0c:	4ecf      	ldr	r6, [pc, #828]	; (10014d4c <__aeabi_dsub+0x364>)
10014a0e:	4317      	orrs	r7, r2
10014a10:	005a      	lsls	r2, r3, #1
10014a12:	0d64      	lsrs	r4, r4, #21
10014a14:	0d52      	lsrs	r2, r2, #21
10014a16:	0fdb      	lsrs	r3, r3, #31
10014a18:	00c9      	lsls	r1, r1, #3
10014a1a:	42b2      	cmp	r2, r6
10014a1c:	d100      	bne.n	10014a20 <__aeabi_dsub+0x38>
10014a1e:	e0e5      	b.n	10014bec <__aeabi_dsub+0x204>
10014a20:	2601      	movs	r6, #1
10014a22:	4073      	eors	r3, r6
10014a24:	1aa6      	subs	r6, r4, r2
10014a26:	46b4      	mov	ip, r6
10014a28:	4553      	cmp	r3, sl
10014a2a:	d100      	bne.n	10014a2e <__aeabi_dsub+0x46>
10014a2c:	e0af      	b.n	10014b8e <__aeabi_dsub+0x1a6>
10014a2e:	2e00      	cmp	r6, #0
10014a30:	dc00      	bgt.n	10014a34 <__aeabi_dsub+0x4c>
10014a32:	e10d      	b.n	10014c50 <__aeabi_dsub+0x268>
10014a34:	2a00      	cmp	r2, #0
10014a36:	d13a      	bne.n	10014aae <__aeabi_dsub+0xc6>
10014a38:	0003      	movs	r3, r0
10014a3a:	430b      	orrs	r3, r1
10014a3c:	d000      	beq.n	10014a40 <__aeabi_dsub+0x58>
10014a3e:	e0e4      	b.n	10014c0a <__aeabi_dsub+0x222>
10014a40:	076b      	lsls	r3, r5, #29
10014a42:	d009      	beq.n	10014a58 <__aeabi_dsub+0x70>
10014a44:	230f      	movs	r3, #15
10014a46:	402b      	ands	r3, r5
10014a48:	2b04      	cmp	r3, #4
10014a4a:	d005      	beq.n	10014a58 <__aeabi_dsub+0x70>
10014a4c:	1d2b      	adds	r3, r5, #4
10014a4e:	42ab      	cmp	r3, r5
10014a50:	41ad      	sbcs	r5, r5
10014a52:	426d      	negs	r5, r5
10014a54:	197f      	adds	r7, r7, r5
10014a56:	001d      	movs	r5, r3
10014a58:	023b      	lsls	r3, r7, #8
10014a5a:	d400      	bmi.n	10014a5e <__aeabi_dsub+0x76>
10014a5c:	e088      	b.n	10014b70 <__aeabi_dsub+0x188>
10014a5e:	4bbb      	ldr	r3, [pc, #748]	; (10014d4c <__aeabi_dsub+0x364>)
10014a60:	3401      	adds	r4, #1
10014a62:	429c      	cmp	r4, r3
10014a64:	d100      	bne.n	10014a68 <__aeabi_dsub+0x80>
10014a66:	e110      	b.n	10014c8a <__aeabi_dsub+0x2a2>
10014a68:	003a      	movs	r2, r7
10014a6a:	4bb9      	ldr	r3, [pc, #740]	; (10014d50 <__aeabi_dsub+0x368>)
10014a6c:	4651      	mov	r1, sl
10014a6e:	401a      	ands	r2, r3
10014a70:	2301      	movs	r3, #1
10014a72:	0750      	lsls	r0, r2, #29
10014a74:	08ed      	lsrs	r5, r5, #3
10014a76:	0252      	lsls	r2, r2, #9
10014a78:	0564      	lsls	r4, r4, #21
10014a7a:	4305      	orrs	r5, r0
10014a7c:	0b12      	lsrs	r2, r2, #12
10014a7e:	0d64      	lsrs	r4, r4, #21
10014a80:	400b      	ands	r3, r1
10014a82:	2100      	movs	r1, #0
10014a84:	0028      	movs	r0, r5
10014a86:	0312      	lsls	r2, r2, #12
10014a88:	0d0d      	lsrs	r5, r1, #20
10014a8a:	0b12      	lsrs	r2, r2, #12
10014a8c:	0564      	lsls	r4, r4, #21
10014a8e:	052d      	lsls	r5, r5, #20
10014a90:	4315      	orrs	r5, r2
10014a92:	0862      	lsrs	r2, r4, #1
10014a94:	4caf      	ldr	r4, [pc, #700]	; (10014d54 <__aeabi_dsub+0x36c>)
10014a96:	07db      	lsls	r3, r3, #31
10014a98:	402c      	ands	r4, r5
10014a9a:	4314      	orrs	r4, r2
10014a9c:	0064      	lsls	r4, r4, #1
10014a9e:	0864      	lsrs	r4, r4, #1
10014aa0:	431c      	orrs	r4, r3
10014aa2:	0021      	movs	r1, r4
10014aa4:	bc1c      	pop	{r2, r3, r4}
10014aa6:	4690      	mov	r8, r2
10014aa8:	4699      	mov	r9, r3
10014aaa:	46a2      	mov	sl, r4
10014aac:	bdf0      	pop	{r4, r5, r6, r7, pc}
10014aae:	4ba7      	ldr	r3, [pc, #668]	; (10014d4c <__aeabi_dsub+0x364>)
10014ab0:	429c      	cmp	r4, r3
10014ab2:	d0c5      	beq.n	10014a40 <__aeabi_dsub+0x58>
10014ab4:	2380      	movs	r3, #128	; 0x80
10014ab6:	041b      	lsls	r3, r3, #16
10014ab8:	4318      	orrs	r0, r3
10014aba:	4663      	mov	r3, ip
10014abc:	2b38      	cmp	r3, #56	; 0x38
10014abe:	dd00      	ble.n	10014ac2 <__aeabi_dsub+0xda>
10014ac0:	e0fd      	b.n	10014cbe <__aeabi_dsub+0x2d6>
10014ac2:	2b1f      	cmp	r3, #31
10014ac4:	dd00      	ble.n	10014ac8 <__aeabi_dsub+0xe0>
10014ac6:	e130      	b.n	10014d2a <__aeabi_dsub+0x342>
10014ac8:	4662      	mov	r2, ip
10014aca:	2320      	movs	r3, #32
10014acc:	1a9b      	subs	r3, r3, r2
10014ace:	0002      	movs	r2, r0
10014ad0:	409a      	lsls	r2, r3
10014ad2:	4666      	mov	r6, ip
10014ad4:	4690      	mov	r8, r2
10014ad6:	000a      	movs	r2, r1
10014ad8:	4099      	lsls	r1, r3
10014ada:	40f2      	lsrs	r2, r6
10014adc:	4646      	mov	r6, r8
10014ade:	1e4b      	subs	r3, r1, #1
10014ae0:	4199      	sbcs	r1, r3
10014ae2:	4332      	orrs	r2, r6
10014ae4:	4311      	orrs	r1, r2
10014ae6:	4663      	mov	r3, ip
10014ae8:	0002      	movs	r2, r0
10014aea:	40da      	lsrs	r2, r3
10014aec:	1a69      	subs	r1, r5, r1
10014aee:	428d      	cmp	r5, r1
10014af0:	419b      	sbcs	r3, r3
10014af2:	000d      	movs	r5, r1
10014af4:	1aba      	subs	r2, r7, r2
10014af6:	425b      	negs	r3, r3
10014af8:	1ad7      	subs	r7, r2, r3
10014afa:	023b      	lsls	r3, r7, #8
10014afc:	d535      	bpl.n	10014b6a <__aeabi_dsub+0x182>
10014afe:	027a      	lsls	r2, r7, #9
10014b00:	0a53      	lsrs	r3, r2, #9
10014b02:	4698      	mov	r8, r3
10014b04:	4643      	mov	r3, r8
10014b06:	2b00      	cmp	r3, #0
10014b08:	d100      	bne.n	10014b0c <__aeabi_dsub+0x124>
10014b0a:	e0c4      	b.n	10014c96 <__aeabi_dsub+0x2ae>
10014b0c:	4640      	mov	r0, r8
10014b0e:	f000 fb2d 	bl	1001516c <__clzsi2>
10014b12:	0003      	movs	r3, r0
10014b14:	3b08      	subs	r3, #8
10014b16:	2b1f      	cmp	r3, #31
10014b18:	dd00      	ble.n	10014b1c <__aeabi_dsub+0x134>
10014b1a:	e0c5      	b.n	10014ca8 <__aeabi_dsub+0x2c0>
10014b1c:	2220      	movs	r2, #32
10014b1e:	0029      	movs	r1, r5
10014b20:	1ad2      	subs	r2, r2, r3
10014b22:	4647      	mov	r7, r8
10014b24:	40d1      	lsrs	r1, r2
10014b26:	409f      	lsls	r7, r3
10014b28:	000a      	movs	r2, r1
10014b2a:	409d      	lsls	r5, r3
10014b2c:	433a      	orrs	r2, r7
10014b2e:	429c      	cmp	r4, r3
10014b30:	dd00      	ble.n	10014b34 <__aeabi_dsub+0x14c>
10014b32:	e0c0      	b.n	10014cb6 <__aeabi_dsub+0x2ce>
10014b34:	1b1c      	subs	r4, r3, r4
10014b36:	1c63      	adds	r3, r4, #1
10014b38:	2b1f      	cmp	r3, #31
10014b3a:	dd00      	ble.n	10014b3e <__aeabi_dsub+0x156>
10014b3c:	e0e4      	b.n	10014d08 <__aeabi_dsub+0x320>
10014b3e:	2120      	movs	r1, #32
10014b40:	0014      	movs	r4, r2
10014b42:	0028      	movs	r0, r5
10014b44:	1ac9      	subs	r1, r1, r3
10014b46:	40d8      	lsrs	r0, r3
10014b48:	408c      	lsls	r4, r1
10014b4a:	408d      	lsls	r5, r1
10014b4c:	4304      	orrs	r4, r0
10014b4e:	40da      	lsrs	r2, r3
10014b50:	1e68      	subs	r0, r5, #1
10014b52:	4185      	sbcs	r5, r0
10014b54:	0017      	movs	r7, r2
10014b56:	4325      	orrs	r5, r4
10014b58:	2400      	movs	r4, #0
10014b5a:	e771      	b.n	10014a40 <__aeabi_dsub+0x58>
10014b5c:	4642      	mov	r2, r8
10014b5e:	4663      	mov	r3, ip
10014b60:	431a      	orrs	r2, r3
10014b62:	d100      	bne.n	10014b66 <__aeabi_dsub+0x17e>
10014b64:	e24c      	b.n	10015000 <__aeabi_dsub+0x618>
10014b66:	4667      	mov	r7, ip
10014b68:	4645      	mov	r5, r8
10014b6a:	076b      	lsls	r3, r5, #29
10014b6c:	d000      	beq.n	10014b70 <__aeabi_dsub+0x188>
10014b6e:	e769      	b.n	10014a44 <__aeabi_dsub+0x5c>
10014b70:	2301      	movs	r3, #1
10014b72:	4651      	mov	r1, sl
10014b74:	0778      	lsls	r0, r7, #29
10014b76:	08ed      	lsrs	r5, r5, #3
10014b78:	08fa      	lsrs	r2, r7, #3
10014b7a:	400b      	ands	r3, r1
10014b7c:	4305      	orrs	r5, r0
10014b7e:	4973      	ldr	r1, [pc, #460]	; (10014d4c <__aeabi_dsub+0x364>)
10014b80:	428c      	cmp	r4, r1
10014b82:	d038      	beq.n	10014bf6 <__aeabi_dsub+0x20e>
10014b84:	0312      	lsls	r2, r2, #12
10014b86:	0564      	lsls	r4, r4, #21
10014b88:	0b12      	lsrs	r2, r2, #12
10014b8a:	0d64      	lsrs	r4, r4, #21
10014b8c:	e779      	b.n	10014a82 <__aeabi_dsub+0x9a>
10014b8e:	2e00      	cmp	r6, #0
10014b90:	dc00      	bgt.n	10014b94 <__aeabi_dsub+0x1ac>
10014b92:	e09a      	b.n	10014cca <__aeabi_dsub+0x2e2>
10014b94:	2a00      	cmp	r2, #0
10014b96:	d047      	beq.n	10014c28 <__aeabi_dsub+0x240>
10014b98:	4a6c      	ldr	r2, [pc, #432]	; (10014d4c <__aeabi_dsub+0x364>)
10014b9a:	4294      	cmp	r4, r2
10014b9c:	d100      	bne.n	10014ba0 <__aeabi_dsub+0x1b8>
10014b9e:	e74f      	b.n	10014a40 <__aeabi_dsub+0x58>
10014ba0:	2280      	movs	r2, #128	; 0x80
10014ba2:	0412      	lsls	r2, r2, #16
10014ba4:	4310      	orrs	r0, r2
10014ba6:	4662      	mov	r2, ip
10014ba8:	2a38      	cmp	r2, #56	; 0x38
10014baa:	dc00      	bgt.n	10014bae <__aeabi_dsub+0x1c6>
10014bac:	e108      	b.n	10014dc0 <__aeabi_dsub+0x3d8>
10014bae:	4301      	orrs	r1, r0
10014bb0:	1e48      	subs	r0, r1, #1
10014bb2:	4181      	sbcs	r1, r0
10014bb4:	2200      	movs	r2, #0
10014bb6:	b2c9      	uxtb	r1, r1
10014bb8:	1949      	adds	r1, r1, r5
10014bba:	19d2      	adds	r2, r2, r7
10014bbc:	42a9      	cmp	r1, r5
10014bbe:	41bf      	sbcs	r7, r7
10014bc0:	000d      	movs	r5, r1
10014bc2:	427f      	negs	r7, r7
10014bc4:	18bf      	adds	r7, r7, r2
10014bc6:	023a      	lsls	r2, r7, #8
10014bc8:	d400      	bmi.n	10014bcc <__aeabi_dsub+0x1e4>
10014bca:	e142      	b.n	10014e52 <__aeabi_dsub+0x46a>
10014bcc:	4a5f      	ldr	r2, [pc, #380]	; (10014d4c <__aeabi_dsub+0x364>)
10014bce:	3401      	adds	r4, #1
10014bd0:	4294      	cmp	r4, r2
10014bd2:	d100      	bne.n	10014bd6 <__aeabi_dsub+0x1ee>
10014bd4:	e14e      	b.n	10014e74 <__aeabi_dsub+0x48c>
10014bd6:	2001      	movs	r0, #1
10014bd8:	4a5d      	ldr	r2, [pc, #372]	; (10014d50 <__aeabi_dsub+0x368>)
10014bda:	0869      	lsrs	r1, r5, #1
10014bdc:	403a      	ands	r2, r7
10014bde:	4028      	ands	r0, r5
10014be0:	4308      	orrs	r0, r1
10014be2:	07d5      	lsls	r5, r2, #31
10014be4:	4305      	orrs	r5, r0
10014be6:	0857      	lsrs	r7, r2, #1
10014be8:	469a      	mov	sl, r3
10014bea:	e729      	b.n	10014a40 <__aeabi_dsub+0x58>
10014bec:	0006      	movs	r6, r0
10014bee:	430e      	orrs	r6, r1
10014bf0:	d000      	beq.n	10014bf4 <__aeabi_dsub+0x20c>
10014bf2:	e717      	b.n	10014a24 <__aeabi_dsub+0x3c>
10014bf4:	e714      	b.n	10014a20 <__aeabi_dsub+0x38>
10014bf6:	0029      	movs	r1, r5
10014bf8:	4311      	orrs	r1, r2
10014bfa:	d100      	bne.n	10014bfe <__aeabi_dsub+0x216>
10014bfc:	e1f9      	b.n	10014ff2 <__aeabi_dsub+0x60a>
10014bfe:	2180      	movs	r1, #128	; 0x80
10014c00:	0309      	lsls	r1, r1, #12
10014c02:	430a      	orrs	r2, r1
10014c04:	0312      	lsls	r2, r2, #12
10014c06:	0b12      	lsrs	r2, r2, #12
10014c08:	e73b      	b.n	10014a82 <__aeabi_dsub+0x9a>
10014c0a:	2301      	movs	r3, #1
10014c0c:	425b      	negs	r3, r3
10014c0e:	4698      	mov	r8, r3
10014c10:	44c4      	add	ip, r8
10014c12:	4663      	mov	r3, ip
10014c14:	2b00      	cmp	r3, #0
10014c16:	d172      	bne.n	10014cfe <__aeabi_dsub+0x316>
10014c18:	1a69      	subs	r1, r5, r1
10014c1a:	428d      	cmp	r5, r1
10014c1c:	419b      	sbcs	r3, r3
10014c1e:	1a3f      	subs	r7, r7, r0
10014c20:	425b      	negs	r3, r3
10014c22:	1aff      	subs	r7, r7, r3
10014c24:	000d      	movs	r5, r1
10014c26:	e768      	b.n	10014afa <__aeabi_dsub+0x112>
10014c28:	0002      	movs	r2, r0
10014c2a:	430a      	orrs	r2, r1
10014c2c:	d100      	bne.n	10014c30 <__aeabi_dsub+0x248>
10014c2e:	e707      	b.n	10014a40 <__aeabi_dsub+0x58>
10014c30:	2201      	movs	r2, #1
10014c32:	4252      	negs	r2, r2
10014c34:	4690      	mov	r8, r2
10014c36:	44c4      	add	ip, r8
10014c38:	4662      	mov	r2, ip
10014c3a:	2a00      	cmp	r2, #0
10014c3c:	d000      	beq.n	10014c40 <__aeabi_dsub+0x258>
10014c3e:	e0e6      	b.n	10014e0e <__aeabi_dsub+0x426>
10014c40:	1869      	adds	r1, r5, r1
10014c42:	42a9      	cmp	r1, r5
10014c44:	41b6      	sbcs	r6, r6
10014c46:	183f      	adds	r7, r7, r0
10014c48:	4276      	negs	r6, r6
10014c4a:	19f7      	adds	r7, r6, r7
10014c4c:	000d      	movs	r5, r1
10014c4e:	e7ba      	b.n	10014bc6 <__aeabi_dsub+0x1de>
10014c50:	2e00      	cmp	r6, #0
10014c52:	d000      	beq.n	10014c56 <__aeabi_dsub+0x26e>
10014c54:	e080      	b.n	10014d58 <__aeabi_dsub+0x370>
10014c56:	1c62      	adds	r2, r4, #1
10014c58:	0552      	lsls	r2, r2, #21
10014c5a:	0d52      	lsrs	r2, r2, #21
10014c5c:	2a01      	cmp	r2, #1
10014c5e:	dc00      	bgt.n	10014c62 <__aeabi_dsub+0x27a>
10014c60:	e0f9      	b.n	10014e56 <__aeabi_dsub+0x46e>
10014c62:	1a6a      	subs	r2, r5, r1
10014c64:	4691      	mov	r9, r2
10014c66:	454d      	cmp	r5, r9
10014c68:	41b6      	sbcs	r6, r6
10014c6a:	1a3a      	subs	r2, r7, r0
10014c6c:	4276      	negs	r6, r6
10014c6e:	1b92      	subs	r2, r2, r6
10014c70:	4690      	mov	r8, r2
10014c72:	0212      	lsls	r2, r2, #8
10014c74:	d400      	bmi.n	10014c78 <__aeabi_dsub+0x290>
10014c76:	e099      	b.n	10014dac <__aeabi_dsub+0x3c4>
10014c78:	1b4d      	subs	r5, r1, r5
10014c7a:	42a9      	cmp	r1, r5
10014c7c:	4189      	sbcs	r1, r1
10014c7e:	1bc7      	subs	r7, r0, r7
10014c80:	4249      	negs	r1, r1
10014c82:	1a7a      	subs	r2, r7, r1
10014c84:	4690      	mov	r8, r2
10014c86:	469a      	mov	sl, r3
10014c88:	e73c      	b.n	10014b04 <__aeabi_dsub+0x11c>
10014c8a:	4652      	mov	r2, sl
10014c8c:	2301      	movs	r3, #1
10014c8e:	2500      	movs	r5, #0
10014c90:	4013      	ands	r3, r2
10014c92:	2200      	movs	r2, #0
10014c94:	e6f5      	b.n	10014a82 <__aeabi_dsub+0x9a>
10014c96:	0028      	movs	r0, r5
10014c98:	f000 fa68 	bl	1001516c <__clzsi2>
10014c9c:	3020      	adds	r0, #32
10014c9e:	0003      	movs	r3, r0
10014ca0:	3b08      	subs	r3, #8
10014ca2:	2b1f      	cmp	r3, #31
10014ca4:	dc00      	bgt.n	10014ca8 <__aeabi_dsub+0x2c0>
10014ca6:	e739      	b.n	10014b1c <__aeabi_dsub+0x134>
10014ca8:	002a      	movs	r2, r5
10014caa:	3828      	subs	r0, #40	; 0x28
10014cac:	4082      	lsls	r2, r0
10014cae:	2500      	movs	r5, #0
10014cb0:	429c      	cmp	r4, r3
10014cb2:	dc00      	bgt.n	10014cb6 <__aeabi_dsub+0x2ce>
10014cb4:	e73e      	b.n	10014b34 <__aeabi_dsub+0x14c>
10014cb6:	4f26      	ldr	r7, [pc, #152]	; (10014d50 <__aeabi_dsub+0x368>)
10014cb8:	1ae4      	subs	r4, r4, r3
10014cba:	4017      	ands	r7, r2
10014cbc:	e6c0      	b.n	10014a40 <__aeabi_dsub+0x58>
10014cbe:	4301      	orrs	r1, r0
10014cc0:	1e48      	subs	r0, r1, #1
10014cc2:	4181      	sbcs	r1, r0
10014cc4:	2200      	movs	r2, #0
10014cc6:	b2c9      	uxtb	r1, r1
10014cc8:	e710      	b.n	10014aec <__aeabi_dsub+0x104>
10014cca:	2e00      	cmp	r6, #0
10014ccc:	d000      	beq.n	10014cd0 <__aeabi_dsub+0x2e8>
10014cce:	e0f1      	b.n	10014eb4 <__aeabi_dsub+0x4cc>
10014cd0:	1c62      	adds	r2, r4, #1
10014cd2:	4694      	mov	ip, r2
10014cd4:	0552      	lsls	r2, r2, #21
10014cd6:	0d52      	lsrs	r2, r2, #21
10014cd8:	2a01      	cmp	r2, #1
10014cda:	dc00      	bgt.n	10014cde <__aeabi_dsub+0x2f6>
10014cdc:	e0a0      	b.n	10014e20 <__aeabi_dsub+0x438>
10014cde:	4a1b      	ldr	r2, [pc, #108]	; (10014d4c <__aeabi_dsub+0x364>)
10014ce0:	4594      	cmp	ip, r2
10014ce2:	d100      	bne.n	10014ce6 <__aeabi_dsub+0x2fe>
10014ce4:	e0c5      	b.n	10014e72 <__aeabi_dsub+0x48a>
10014ce6:	1869      	adds	r1, r5, r1
10014ce8:	42a9      	cmp	r1, r5
10014cea:	4192      	sbcs	r2, r2
10014cec:	183f      	adds	r7, r7, r0
10014cee:	4252      	negs	r2, r2
10014cf0:	19d2      	adds	r2, r2, r7
10014cf2:	0849      	lsrs	r1, r1, #1
10014cf4:	07d5      	lsls	r5, r2, #31
10014cf6:	430d      	orrs	r5, r1
10014cf8:	0857      	lsrs	r7, r2, #1
10014cfa:	4664      	mov	r4, ip
10014cfc:	e6a0      	b.n	10014a40 <__aeabi_dsub+0x58>
10014cfe:	4b13      	ldr	r3, [pc, #76]	; (10014d4c <__aeabi_dsub+0x364>)
10014d00:	429c      	cmp	r4, r3
10014d02:	d000      	beq.n	10014d06 <__aeabi_dsub+0x31e>
10014d04:	e6d9      	b.n	10014aba <__aeabi_dsub+0xd2>
10014d06:	e69b      	b.n	10014a40 <__aeabi_dsub+0x58>
10014d08:	0011      	movs	r1, r2
10014d0a:	3c1f      	subs	r4, #31
10014d0c:	40e1      	lsrs	r1, r4
10014d0e:	000c      	movs	r4, r1
10014d10:	2b20      	cmp	r3, #32
10014d12:	d100      	bne.n	10014d16 <__aeabi_dsub+0x32e>
10014d14:	e080      	b.n	10014e18 <__aeabi_dsub+0x430>
10014d16:	2140      	movs	r1, #64	; 0x40
10014d18:	1acb      	subs	r3, r1, r3
10014d1a:	409a      	lsls	r2, r3
10014d1c:	4315      	orrs	r5, r2
10014d1e:	1e6a      	subs	r2, r5, #1
10014d20:	4195      	sbcs	r5, r2
10014d22:	2700      	movs	r7, #0
10014d24:	4325      	orrs	r5, r4
10014d26:	2400      	movs	r4, #0
10014d28:	e71f      	b.n	10014b6a <__aeabi_dsub+0x182>
10014d2a:	4663      	mov	r3, ip
10014d2c:	0002      	movs	r2, r0
10014d2e:	3b20      	subs	r3, #32
10014d30:	40da      	lsrs	r2, r3
10014d32:	4663      	mov	r3, ip
10014d34:	2b20      	cmp	r3, #32
10014d36:	d071      	beq.n	10014e1c <__aeabi_dsub+0x434>
10014d38:	2340      	movs	r3, #64	; 0x40
10014d3a:	4666      	mov	r6, ip
10014d3c:	1b9b      	subs	r3, r3, r6
10014d3e:	4098      	lsls	r0, r3
10014d40:	4301      	orrs	r1, r0
10014d42:	1e48      	subs	r0, r1, #1
10014d44:	4181      	sbcs	r1, r0
10014d46:	4311      	orrs	r1, r2
10014d48:	2200      	movs	r2, #0
10014d4a:	e6cf      	b.n	10014aec <__aeabi_dsub+0x104>
10014d4c:	000007ff 	.word	0x000007ff
10014d50:	ff7fffff 	.word	0xff7fffff
10014d54:	800fffff 	.word	0x800fffff
10014d58:	2c00      	cmp	r4, #0
10014d5a:	d048      	beq.n	10014dee <__aeabi_dsub+0x406>
10014d5c:	4cca      	ldr	r4, [pc, #808]	; (10015088 <__aeabi_dsub+0x6a0>)
10014d5e:	42a2      	cmp	r2, r4
10014d60:	d100      	bne.n	10014d64 <__aeabi_dsub+0x37c>
10014d62:	e0a2      	b.n	10014eaa <__aeabi_dsub+0x4c2>
10014d64:	4274      	negs	r4, r6
10014d66:	46a1      	mov	r9, r4
10014d68:	2480      	movs	r4, #128	; 0x80
10014d6a:	0424      	lsls	r4, r4, #16
10014d6c:	4327      	orrs	r7, r4
10014d6e:	464c      	mov	r4, r9
10014d70:	2c38      	cmp	r4, #56	; 0x38
10014d72:	dd00      	ble.n	10014d76 <__aeabi_dsub+0x38e>
10014d74:	e0db      	b.n	10014f2e <__aeabi_dsub+0x546>
10014d76:	2c1f      	cmp	r4, #31
10014d78:	dd00      	ble.n	10014d7c <__aeabi_dsub+0x394>
10014d7a:	e144      	b.n	10015006 <__aeabi_dsub+0x61e>
10014d7c:	464e      	mov	r6, r9
10014d7e:	2420      	movs	r4, #32
10014d80:	1ba4      	subs	r4, r4, r6
10014d82:	003e      	movs	r6, r7
10014d84:	40a6      	lsls	r6, r4
10014d86:	46a2      	mov	sl, r4
10014d88:	46b0      	mov	r8, r6
10014d8a:	464c      	mov	r4, r9
10014d8c:	002e      	movs	r6, r5
10014d8e:	40e6      	lsrs	r6, r4
10014d90:	46b4      	mov	ip, r6
10014d92:	4646      	mov	r6, r8
10014d94:	4664      	mov	r4, ip
10014d96:	4326      	orrs	r6, r4
10014d98:	4654      	mov	r4, sl
10014d9a:	40a5      	lsls	r5, r4
10014d9c:	1e6c      	subs	r4, r5, #1
10014d9e:	41a5      	sbcs	r5, r4
10014da0:	0034      	movs	r4, r6
10014da2:	432c      	orrs	r4, r5
10014da4:	464d      	mov	r5, r9
10014da6:	40ef      	lsrs	r7, r5
10014da8:	1b0d      	subs	r5, r1, r4
10014daa:	e028      	b.n	10014dfe <__aeabi_dsub+0x416>
10014dac:	464a      	mov	r2, r9
10014dae:	4643      	mov	r3, r8
10014db0:	464d      	mov	r5, r9
10014db2:	431a      	orrs	r2, r3
10014db4:	d000      	beq.n	10014db8 <__aeabi_dsub+0x3d0>
10014db6:	e6a5      	b.n	10014b04 <__aeabi_dsub+0x11c>
10014db8:	2300      	movs	r3, #0
10014dba:	2400      	movs	r4, #0
10014dbc:	2500      	movs	r5, #0
10014dbe:	e6de      	b.n	10014b7e <__aeabi_dsub+0x196>
10014dc0:	2a1f      	cmp	r2, #31
10014dc2:	dc5a      	bgt.n	10014e7a <__aeabi_dsub+0x492>
10014dc4:	4666      	mov	r6, ip
10014dc6:	2220      	movs	r2, #32
10014dc8:	1b92      	subs	r2, r2, r6
10014dca:	0006      	movs	r6, r0
10014dcc:	4096      	lsls	r6, r2
10014dce:	4691      	mov	r9, r2
10014dd0:	46b0      	mov	r8, r6
10014dd2:	4662      	mov	r2, ip
10014dd4:	000e      	movs	r6, r1
10014dd6:	40d6      	lsrs	r6, r2
10014dd8:	4642      	mov	r2, r8
10014dda:	4316      	orrs	r6, r2
10014ddc:	464a      	mov	r2, r9
10014dde:	4091      	lsls	r1, r2
10014de0:	1e4a      	subs	r2, r1, #1
10014de2:	4191      	sbcs	r1, r2
10014de4:	0002      	movs	r2, r0
10014de6:	4660      	mov	r0, ip
10014de8:	4331      	orrs	r1, r6
10014dea:	40c2      	lsrs	r2, r0
10014dec:	e6e4      	b.n	10014bb8 <__aeabi_dsub+0x1d0>
10014dee:	003c      	movs	r4, r7
10014df0:	432c      	orrs	r4, r5
10014df2:	d05a      	beq.n	10014eaa <__aeabi_dsub+0x4c2>
10014df4:	43f4      	mvns	r4, r6
10014df6:	46a1      	mov	r9, r4
10014df8:	2c00      	cmp	r4, #0
10014dfa:	d152      	bne.n	10014ea2 <__aeabi_dsub+0x4ba>
10014dfc:	1b4d      	subs	r5, r1, r5
10014dfe:	42a9      	cmp	r1, r5
10014e00:	4189      	sbcs	r1, r1
10014e02:	1bc7      	subs	r7, r0, r7
10014e04:	4249      	negs	r1, r1
10014e06:	1a7f      	subs	r7, r7, r1
10014e08:	0014      	movs	r4, r2
10014e0a:	469a      	mov	sl, r3
10014e0c:	e675      	b.n	10014afa <__aeabi_dsub+0x112>
10014e0e:	4a9e      	ldr	r2, [pc, #632]	; (10015088 <__aeabi_dsub+0x6a0>)
10014e10:	4294      	cmp	r4, r2
10014e12:	d000      	beq.n	10014e16 <__aeabi_dsub+0x42e>
10014e14:	e6c7      	b.n	10014ba6 <__aeabi_dsub+0x1be>
10014e16:	e613      	b.n	10014a40 <__aeabi_dsub+0x58>
10014e18:	2200      	movs	r2, #0
10014e1a:	e77f      	b.n	10014d1c <__aeabi_dsub+0x334>
10014e1c:	2000      	movs	r0, #0
10014e1e:	e78f      	b.n	10014d40 <__aeabi_dsub+0x358>
10014e20:	2c00      	cmp	r4, #0
10014e22:	d000      	beq.n	10014e26 <__aeabi_dsub+0x43e>
10014e24:	e0c8      	b.n	10014fb8 <__aeabi_dsub+0x5d0>
10014e26:	003b      	movs	r3, r7
10014e28:	432b      	orrs	r3, r5
10014e2a:	d100      	bne.n	10014e2e <__aeabi_dsub+0x446>
10014e2c:	e10f      	b.n	1001504e <__aeabi_dsub+0x666>
10014e2e:	0003      	movs	r3, r0
10014e30:	430b      	orrs	r3, r1
10014e32:	d100      	bne.n	10014e36 <__aeabi_dsub+0x44e>
10014e34:	e604      	b.n	10014a40 <__aeabi_dsub+0x58>
10014e36:	1869      	adds	r1, r5, r1
10014e38:	42a9      	cmp	r1, r5
10014e3a:	419b      	sbcs	r3, r3
10014e3c:	183f      	adds	r7, r7, r0
10014e3e:	425b      	negs	r3, r3
10014e40:	19df      	adds	r7, r3, r7
10014e42:	023b      	lsls	r3, r7, #8
10014e44:	d400      	bmi.n	10014e48 <__aeabi_dsub+0x460>
10014e46:	e11a      	b.n	1001507e <__aeabi_dsub+0x696>
10014e48:	4b90      	ldr	r3, [pc, #576]	; (1001508c <__aeabi_dsub+0x6a4>)
10014e4a:	000d      	movs	r5, r1
10014e4c:	401f      	ands	r7, r3
10014e4e:	4664      	mov	r4, ip
10014e50:	e5f6      	b.n	10014a40 <__aeabi_dsub+0x58>
10014e52:	469a      	mov	sl, r3
10014e54:	e689      	b.n	10014b6a <__aeabi_dsub+0x182>
10014e56:	003a      	movs	r2, r7
10014e58:	432a      	orrs	r2, r5
10014e5a:	2c00      	cmp	r4, #0
10014e5c:	d15c      	bne.n	10014f18 <__aeabi_dsub+0x530>
10014e5e:	2a00      	cmp	r2, #0
10014e60:	d175      	bne.n	10014f4e <__aeabi_dsub+0x566>
10014e62:	0002      	movs	r2, r0
10014e64:	430a      	orrs	r2, r1
10014e66:	d100      	bne.n	10014e6a <__aeabi_dsub+0x482>
10014e68:	e0ca      	b.n	10015000 <__aeabi_dsub+0x618>
10014e6a:	0007      	movs	r7, r0
10014e6c:	000d      	movs	r5, r1
10014e6e:	469a      	mov	sl, r3
10014e70:	e5e6      	b.n	10014a40 <__aeabi_dsub+0x58>
10014e72:	4664      	mov	r4, ip
10014e74:	2200      	movs	r2, #0
10014e76:	2500      	movs	r5, #0
10014e78:	e681      	b.n	10014b7e <__aeabi_dsub+0x196>
10014e7a:	4662      	mov	r2, ip
10014e7c:	0006      	movs	r6, r0
10014e7e:	3a20      	subs	r2, #32
10014e80:	40d6      	lsrs	r6, r2
10014e82:	4662      	mov	r2, ip
10014e84:	46b0      	mov	r8, r6
10014e86:	2a20      	cmp	r2, #32
10014e88:	d100      	bne.n	10014e8c <__aeabi_dsub+0x4a4>
10014e8a:	e0b7      	b.n	10014ffc <__aeabi_dsub+0x614>
10014e8c:	2240      	movs	r2, #64	; 0x40
10014e8e:	4666      	mov	r6, ip
10014e90:	1b92      	subs	r2, r2, r6
10014e92:	4090      	lsls	r0, r2
10014e94:	4301      	orrs	r1, r0
10014e96:	4642      	mov	r2, r8
10014e98:	1e48      	subs	r0, r1, #1
10014e9a:	4181      	sbcs	r1, r0
10014e9c:	4311      	orrs	r1, r2
10014e9e:	2200      	movs	r2, #0
10014ea0:	e68a      	b.n	10014bb8 <__aeabi_dsub+0x1d0>
10014ea2:	4c79      	ldr	r4, [pc, #484]	; (10015088 <__aeabi_dsub+0x6a0>)
10014ea4:	42a2      	cmp	r2, r4
10014ea6:	d000      	beq.n	10014eaa <__aeabi_dsub+0x4c2>
10014ea8:	e761      	b.n	10014d6e <__aeabi_dsub+0x386>
10014eaa:	0007      	movs	r7, r0
10014eac:	000d      	movs	r5, r1
10014eae:	0014      	movs	r4, r2
10014eb0:	469a      	mov	sl, r3
10014eb2:	e5c5      	b.n	10014a40 <__aeabi_dsub+0x58>
10014eb4:	2c00      	cmp	r4, #0
10014eb6:	d141      	bne.n	10014f3c <__aeabi_dsub+0x554>
10014eb8:	003c      	movs	r4, r7
10014eba:	432c      	orrs	r4, r5
10014ebc:	d078      	beq.n	10014fb0 <__aeabi_dsub+0x5c8>
10014ebe:	43f4      	mvns	r4, r6
10014ec0:	46a1      	mov	r9, r4
10014ec2:	2c00      	cmp	r4, #0
10014ec4:	d020      	beq.n	10014f08 <__aeabi_dsub+0x520>
10014ec6:	4c70      	ldr	r4, [pc, #448]	; (10015088 <__aeabi_dsub+0x6a0>)
10014ec8:	42a2      	cmp	r2, r4
10014eca:	d071      	beq.n	10014fb0 <__aeabi_dsub+0x5c8>
10014ecc:	464c      	mov	r4, r9
10014ece:	2c38      	cmp	r4, #56	; 0x38
10014ed0:	dd00      	ble.n	10014ed4 <__aeabi_dsub+0x4ec>
10014ed2:	e0b2      	b.n	1001503a <__aeabi_dsub+0x652>
10014ed4:	2c1f      	cmp	r4, #31
10014ed6:	dd00      	ble.n	10014eda <__aeabi_dsub+0x4f2>
10014ed8:	e0bc      	b.n	10015054 <__aeabi_dsub+0x66c>
10014eda:	2620      	movs	r6, #32
10014edc:	1b34      	subs	r4, r6, r4
10014ede:	46a2      	mov	sl, r4
10014ee0:	003c      	movs	r4, r7
10014ee2:	4656      	mov	r6, sl
10014ee4:	40b4      	lsls	r4, r6
10014ee6:	464e      	mov	r6, r9
10014ee8:	46a0      	mov	r8, r4
10014eea:	002c      	movs	r4, r5
10014eec:	40f4      	lsrs	r4, r6
10014eee:	46a4      	mov	ip, r4
10014ef0:	4644      	mov	r4, r8
10014ef2:	4666      	mov	r6, ip
10014ef4:	4334      	orrs	r4, r6
10014ef6:	46a4      	mov	ip, r4
10014ef8:	4654      	mov	r4, sl
10014efa:	40a5      	lsls	r5, r4
10014efc:	4664      	mov	r4, ip
10014efe:	1e6e      	subs	r6, r5, #1
10014f00:	41b5      	sbcs	r5, r6
10014f02:	4325      	orrs	r5, r4
10014f04:	464c      	mov	r4, r9
10014f06:	40e7      	lsrs	r7, r4
10014f08:	186d      	adds	r5, r5, r1
10014f0a:	428d      	cmp	r5, r1
10014f0c:	4189      	sbcs	r1, r1
10014f0e:	183f      	adds	r7, r7, r0
10014f10:	4249      	negs	r1, r1
10014f12:	19cf      	adds	r7, r1, r7
10014f14:	0014      	movs	r4, r2
10014f16:	e656      	b.n	10014bc6 <__aeabi_dsub+0x1de>
10014f18:	2a00      	cmp	r2, #0
10014f1a:	d12f      	bne.n	10014f7c <__aeabi_dsub+0x594>
10014f1c:	0002      	movs	r2, r0
10014f1e:	430a      	orrs	r2, r1
10014f20:	d100      	bne.n	10014f24 <__aeabi_dsub+0x53c>
10014f22:	e084      	b.n	1001502e <__aeabi_dsub+0x646>
10014f24:	0007      	movs	r7, r0
10014f26:	000d      	movs	r5, r1
10014f28:	469a      	mov	sl, r3
10014f2a:	4c57      	ldr	r4, [pc, #348]	; (10015088 <__aeabi_dsub+0x6a0>)
10014f2c:	e588      	b.n	10014a40 <__aeabi_dsub+0x58>
10014f2e:	433d      	orrs	r5, r7
10014f30:	1e6f      	subs	r7, r5, #1
10014f32:	41bd      	sbcs	r5, r7
10014f34:	b2ec      	uxtb	r4, r5
10014f36:	2700      	movs	r7, #0
10014f38:	1b0d      	subs	r5, r1, r4
10014f3a:	e760      	b.n	10014dfe <__aeabi_dsub+0x416>
10014f3c:	4c52      	ldr	r4, [pc, #328]	; (10015088 <__aeabi_dsub+0x6a0>)
10014f3e:	42a2      	cmp	r2, r4
10014f40:	d036      	beq.n	10014fb0 <__aeabi_dsub+0x5c8>
10014f42:	4274      	negs	r4, r6
10014f44:	2680      	movs	r6, #128	; 0x80
10014f46:	0436      	lsls	r6, r6, #16
10014f48:	46a1      	mov	r9, r4
10014f4a:	4337      	orrs	r7, r6
10014f4c:	e7be      	b.n	10014ecc <__aeabi_dsub+0x4e4>
10014f4e:	0002      	movs	r2, r0
10014f50:	430a      	orrs	r2, r1
10014f52:	d100      	bne.n	10014f56 <__aeabi_dsub+0x56e>
10014f54:	e574      	b.n	10014a40 <__aeabi_dsub+0x58>
10014f56:	1a6a      	subs	r2, r5, r1
10014f58:	4690      	mov	r8, r2
10014f5a:	4545      	cmp	r5, r8
10014f5c:	41b6      	sbcs	r6, r6
10014f5e:	1a3a      	subs	r2, r7, r0
10014f60:	4276      	negs	r6, r6
10014f62:	1b92      	subs	r2, r2, r6
10014f64:	4694      	mov	ip, r2
10014f66:	0212      	lsls	r2, r2, #8
10014f68:	d400      	bmi.n	10014f6c <__aeabi_dsub+0x584>
10014f6a:	e5f7      	b.n	10014b5c <__aeabi_dsub+0x174>
10014f6c:	1b4d      	subs	r5, r1, r5
10014f6e:	42a9      	cmp	r1, r5
10014f70:	4189      	sbcs	r1, r1
10014f72:	1bc7      	subs	r7, r0, r7
10014f74:	4249      	negs	r1, r1
10014f76:	1a7f      	subs	r7, r7, r1
10014f78:	469a      	mov	sl, r3
10014f7a:	e561      	b.n	10014a40 <__aeabi_dsub+0x58>
10014f7c:	0002      	movs	r2, r0
10014f7e:	430a      	orrs	r2, r1
10014f80:	d03a      	beq.n	10014ff8 <__aeabi_dsub+0x610>
10014f82:	08ed      	lsrs	r5, r5, #3
10014f84:	077c      	lsls	r4, r7, #29
10014f86:	432c      	orrs	r4, r5
10014f88:	2580      	movs	r5, #128	; 0x80
10014f8a:	08fa      	lsrs	r2, r7, #3
10014f8c:	032d      	lsls	r5, r5, #12
10014f8e:	422a      	tst	r2, r5
10014f90:	d008      	beq.n	10014fa4 <__aeabi_dsub+0x5bc>
10014f92:	08c7      	lsrs	r7, r0, #3
10014f94:	422f      	tst	r7, r5
10014f96:	d105      	bne.n	10014fa4 <__aeabi_dsub+0x5bc>
10014f98:	0745      	lsls	r5, r0, #29
10014f9a:	002c      	movs	r4, r5
10014f9c:	003a      	movs	r2, r7
10014f9e:	469a      	mov	sl, r3
10014fa0:	08c9      	lsrs	r1, r1, #3
10014fa2:	430c      	orrs	r4, r1
10014fa4:	0f67      	lsrs	r7, r4, #29
10014fa6:	00d2      	lsls	r2, r2, #3
10014fa8:	00e5      	lsls	r5, r4, #3
10014faa:	4317      	orrs	r7, r2
10014fac:	4c36      	ldr	r4, [pc, #216]	; (10015088 <__aeabi_dsub+0x6a0>)
10014fae:	e547      	b.n	10014a40 <__aeabi_dsub+0x58>
10014fb0:	0007      	movs	r7, r0
10014fb2:	000d      	movs	r5, r1
10014fb4:	0014      	movs	r4, r2
10014fb6:	e543      	b.n	10014a40 <__aeabi_dsub+0x58>
10014fb8:	003a      	movs	r2, r7
10014fba:	432a      	orrs	r2, r5
10014fbc:	d043      	beq.n	10015046 <__aeabi_dsub+0x65e>
10014fbe:	0002      	movs	r2, r0
10014fc0:	430a      	orrs	r2, r1
10014fc2:	d019      	beq.n	10014ff8 <__aeabi_dsub+0x610>
10014fc4:	08ed      	lsrs	r5, r5, #3
10014fc6:	077c      	lsls	r4, r7, #29
10014fc8:	432c      	orrs	r4, r5
10014fca:	2580      	movs	r5, #128	; 0x80
10014fcc:	08fa      	lsrs	r2, r7, #3
10014fce:	032d      	lsls	r5, r5, #12
10014fd0:	422a      	tst	r2, r5
10014fd2:	d007      	beq.n	10014fe4 <__aeabi_dsub+0x5fc>
10014fd4:	08c6      	lsrs	r6, r0, #3
10014fd6:	422e      	tst	r6, r5
10014fd8:	d104      	bne.n	10014fe4 <__aeabi_dsub+0x5fc>
10014fda:	0747      	lsls	r7, r0, #29
10014fdc:	003c      	movs	r4, r7
10014fde:	0032      	movs	r2, r6
10014fe0:	08c9      	lsrs	r1, r1, #3
10014fe2:	430c      	orrs	r4, r1
10014fe4:	00d7      	lsls	r7, r2, #3
10014fe6:	0f62      	lsrs	r2, r4, #29
10014fe8:	00e5      	lsls	r5, r4, #3
10014fea:	4317      	orrs	r7, r2
10014fec:	469a      	mov	sl, r3
10014fee:	4c26      	ldr	r4, [pc, #152]	; (10015088 <__aeabi_dsub+0x6a0>)
10014ff0:	e526      	b.n	10014a40 <__aeabi_dsub+0x58>
10014ff2:	2200      	movs	r2, #0
10014ff4:	2500      	movs	r5, #0
10014ff6:	e544      	b.n	10014a82 <__aeabi_dsub+0x9a>
10014ff8:	4c23      	ldr	r4, [pc, #140]	; (10015088 <__aeabi_dsub+0x6a0>)
10014ffa:	e521      	b.n	10014a40 <__aeabi_dsub+0x58>
10014ffc:	2000      	movs	r0, #0
10014ffe:	e749      	b.n	10014e94 <__aeabi_dsub+0x4ac>
10015000:	2300      	movs	r3, #0
10015002:	2500      	movs	r5, #0
10015004:	e5bb      	b.n	10014b7e <__aeabi_dsub+0x196>
10015006:	464c      	mov	r4, r9
10015008:	003e      	movs	r6, r7
1001500a:	3c20      	subs	r4, #32
1001500c:	40e6      	lsrs	r6, r4
1001500e:	464c      	mov	r4, r9
10015010:	46b4      	mov	ip, r6
10015012:	2c20      	cmp	r4, #32
10015014:	d031      	beq.n	1001507a <__aeabi_dsub+0x692>
10015016:	2440      	movs	r4, #64	; 0x40
10015018:	464e      	mov	r6, r9
1001501a:	1ba6      	subs	r6, r4, r6
1001501c:	40b7      	lsls	r7, r6
1001501e:	433d      	orrs	r5, r7
10015020:	1e6c      	subs	r4, r5, #1
10015022:	41a5      	sbcs	r5, r4
10015024:	4664      	mov	r4, ip
10015026:	432c      	orrs	r4, r5
10015028:	2700      	movs	r7, #0
1001502a:	1b0d      	subs	r5, r1, r4
1001502c:	e6e7      	b.n	10014dfe <__aeabi_dsub+0x416>
1001502e:	2280      	movs	r2, #128	; 0x80
10015030:	2300      	movs	r3, #0
10015032:	0312      	lsls	r2, r2, #12
10015034:	4c14      	ldr	r4, [pc, #80]	; (10015088 <__aeabi_dsub+0x6a0>)
10015036:	2500      	movs	r5, #0
10015038:	e5a1      	b.n	10014b7e <__aeabi_dsub+0x196>
1001503a:	433d      	orrs	r5, r7
1001503c:	1e6f      	subs	r7, r5, #1
1001503e:	41bd      	sbcs	r5, r7
10015040:	2700      	movs	r7, #0
10015042:	b2ed      	uxtb	r5, r5
10015044:	e760      	b.n	10014f08 <__aeabi_dsub+0x520>
10015046:	0007      	movs	r7, r0
10015048:	000d      	movs	r5, r1
1001504a:	4c0f      	ldr	r4, [pc, #60]	; (10015088 <__aeabi_dsub+0x6a0>)
1001504c:	e4f8      	b.n	10014a40 <__aeabi_dsub+0x58>
1001504e:	0007      	movs	r7, r0
10015050:	000d      	movs	r5, r1
10015052:	e4f5      	b.n	10014a40 <__aeabi_dsub+0x58>
10015054:	464e      	mov	r6, r9
10015056:	003c      	movs	r4, r7
10015058:	3e20      	subs	r6, #32
1001505a:	40f4      	lsrs	r4, r6
1001505c:	46a0      	mov	r8, r4
1001505e:	464c      	mov	r4, r9
10015060:	2c20      	cmp	r4, #32
10015062:	d00e      	beq.n	10015082 <__aeabi_dsub+0x69a>
10015064:	2440      	movs	r4, #64	; 0x40
10015066:	464e      	mov	r6, r9
10015068:	1ba4      	subs	r4, r4, r6
1001506a:	40a7      	lsls	r7, r4
1001506c:	433d      	orrs	r5, r7
1001506e:	1e6f      	subs	r7, r5, #1
10015070:	41bd      	sbcs	r5, r7
10015072:	4644      	mov	r4, r8
10015074:	2700      	movs	r7, #0
10015076:	4325      	orrs	r5, r4
10015078:	e746      	b.n	10014f08 <__aeabi_dsub+0x520>
1001507a:	2700      	movs	r7, #0
1001507c:	e7cf      	b.n	1001501e <__aeabi_dsub+0x636>
1001507e:	000d      	movs	r5, r1
10015080:	e573      	b.n	10014b6a <__aeabi_dsub+0x182>
10015082:	2700      	movs	r7, #0
10015084:	e7f2      	b.n	1001506c <__aeabi_dsub+0x684>
10015086:	46c0      	nop			; (mov r8, r8)
10015088:	000007ff 	.word	0x000007ff
1001508c:	ff7fffff 	.word	0xff7fffff

10015090 <__aeabi_d2iz>:
10015090:	030b      	lsls	r3, r1, #12
10015092:	b530      	push	{r4, r5, lr}
10015094:	4d13      	ldr	r5, [pc, #76]	; (100150e4 <__aeabi_d2iz+0x54>)
10015096:	0b1a      	lsrs	r2, r3, #12
10015098:	004b      	lsls	r3, r1, #1
1001509a:	0d5b      	lsrs	r3, r3, #21
1001509c:	0fc9      	lsrs	r1, r1, #31
1001509e:	2400      	movs	r4, #0
100150a0:	42ab      	cmp	r3, r5
100150a2:	dd11      	ble.n	100150c8 <__aeabi_d2iz+0x38>
100150a4:	4c10      	ldr	r4, [pc, #64]	; (100150e8 <__aeabi_d2iz+0x58>)
100150a6:	42a3      	cmp	r3, r4
100150a8:	dc10      	bgt.n	100150cc <__aeabi_d2iz+0x3c>
100150aa:	2480      	movs	r4, #128	; 0x80
100150ac:	0364      	lsls	r4, r4, #13
100150ae:	4322      	orrs	r2, r4
100150b0:	4c0e      	ldr	r4, [pc, #56]	; (100150ec <__aeabi_d2iz+0x5c>)
100150b2:	1ae4      	subs	r4, r4, r3
100150b4:	2c1f      	cmp	r4, #31
100150b6:	dd0c      	ble.n	100150d2 <__aeabi_d2iz+0x42>
100150b8:	480d      	ldr	r0, [pc, #52]	; (100150f0 <__aeabi_d2iz+0x60>)
100150ba:	1ac3      	subs	r3, r0, r3
100150bc:	40da      	lsrs	r2, r3
100150be:	0013      	movs	r3, r2
100150c0:	425c      	negs	r4, r3
100150c2:	2900      	cmp	r1, #0
100150c4:	d100      	bne.n	100150c8 <__aeabi_d2iz+0x38>
100150c6:	001c      	movs	r4, r3
100150c8:	0020      	movs	r0, r4
100150ca:	bd30      	pop	{r4, r5, pc}
100150cc:	4b09      	ldr	r3, [pc, #36]	; (100150f4 <__aeabi_d2iz+0x64>)
100150ce:	18cc      	adds	r4, r1, r3
100150d0:	e7fa      	b.n	100150c8 <__aeabi_d2iz+0x38>
100150d2:	40e0      	lsrs	r0, r4
100150d4:	4c08      	ldr	r4, [pc, #32]	; (100150f8 <__aeabi_d2iz+0x68>)
100150d6:	46a4      	mov	ip, r4
100150d8:	4463      	add	r3, ip
100150da:	409a      	lsls	r2, r3
100150dc:	0013      	movs	r3, r2
100150de:	4303      	orrs	r3, r0
100150e0:	e7ee      	b.n	100150c0 <__aeabi_d2iz+0x30>
100150e2:	46c0      	nop			; (mov r8, r8)
100150e4:	000003fe 	.word	0x000003fe
100150e8:	0000041d 	.word	0x0000041d
100150ec:	00000433 	.word	0x00000433
100150f0:	00000413 	.word	0x00000413
100150f4:	7fffffff 	.word	0x7fffffff
100150f8:	fffffbed 	.word	0xfffffbed

100150fc <__aeabi_ui2d>:
100150fc:	b570      	push	{r4, r5, r6, lr}
100150fe:	1e05      	subs	r5, r0, #0
10015100:	d028      	beq.n	10015154 <__aeabi_ui2d+0x58>
10015102:	f000 f833 	bl	1001516c <__clzsi2>
10015106:	4b15      	ldr	r3, [pc, #84]	; (1001515c <__aeabi_ui2d+0x60>)
10015108:	4a15      	ldr	r2, [pc, #84]	; (10015160 <__aeabi_ui2d+0x64>)
1001510a:	1a1b      	subs	r3, r3, r0
1001510c:	1ad2      	subs	r2, r2, r3
1001510e:	2a1f      	cmp	r2, #31
10015110:	dd16      	ble.n	10015140 <__aeabi_ui2d+0x44>
10015112:	002c      	movs	r4, r5
10015114:	4a13      	ldr	r2, [pc, #76]	; (10015164 <__aeabi_ui2d+0x68>)
10015116:	2500      	movs	r5, #0
10015118:	1ad2      	subs	r2, r2, r3
1001511a:	4094      	lsls	r4, r2
1001511c:	055a      	lsls	r2, r3, #21
1001511e:	0324      	lsls	r4, r4, #12
10015120:	0b24      	lsrs	r4, r4, #12
10015122:	0d52      	lsrs	r2, r2, #21
10015124:	2100      	movs	r1, #0
10015126:	0324      	lsls	r4, r4, #12
10015128:	0d0b      	lsrs	r3, r1, #20
1001512a:	0b24      	lsrs	r4, r4, #12
1001512c:	051b      	lsls	r3, r3, #20
1001512e:	4323      	orrs	r3, r4
10015130:	4c0d      	ldr	r4, [pc, #52]	; (10015168 <__aeabi_ui2d+0x6c>)
10015132:	0512      	lsls	r2, r2, #20
10015134:	4023      	ands	r3, r4
10015136:	4313      	orrs	r3, r2
10015138:	005b      	lsls	r3, r3, #1
1001513a:	0028      	movs	r0, r5
1001513c:	0859      	lsrs	r1, r3, #1
1001513e:	bd70      	pop	{r4, r5, r6, pc}
10015140:	210b      	movs	r1, #11
10015142:	002c      	movs	r4, r5
10015144:	1a08      	subs	r0, r1, r0
10015146:	40c4      	lsrs	r4, r0
10015148:	4095      	lsls	r5, r2
1001514a:	0324      	lsls	r4, r4, #12
1001514c:	055a      	lsls	r2, r3, #21
1001514e:	0b24      	lsrs	r4, r4, #12
10015150:	0d52      	lsrs	r2, r2, #21
10015152:	e7e7      	b.n	10015124 <__aeabi_ui2d+0x28>
10015154:	2200      	movs	r2, #0
10015156:	2400      	movs	r4, #0
10015158:	e7e4      	b.n	10015124 <__aeabi_ui2d+0x28>
1001515a:	46c0      	nop			; (mov r8, r8)
1001515c:	0000041e 	.word	0x0000041e
10015160:	00000433 	.word	0x00000433
10015164:	00000413 	.word	0x00000413
10015168:	800fffff 	.word	0x800fffff

1001516c <__clzsi2>:
1001516c:	211c      	movs	r1, #28
1001516e:	2301      	movs	r3, #1
10015170:	041b      	lsls	r3, r3, #16
10015172:	4298      	cmp	r0, r3
10015174:	d301      	bcc.n	1001517a <__clzsi2+0xe>
10015176:	0c00      	lsrs	r0, r0, #16
10015178:	3910      	subs	r1, #16
1001517a:	0a1b      	lsrs	r3, r3, #8
1001517c:	4298      	cmp	r0, r3
1001517e:	d301      	bcc.n	10015184 <__clzsi2+0x18>
10015180:	0a00      	lsrs	r0, r0, #8
10015182:	3908      	subs	r1, #8
10015184:	091b      	lsrs	r3, r3, #4
10015186:	4298      	cmp	r0, r3
10015188:	d301      	bcc.n	1001518e <__clzsi2+0x22>
1001518a:	0900      	lsrs	r0, r0, #4
1001518c:	3904      	subs	r1, #4
1001518e:	a202      	add	r2, pc, #8	; (adr r2, 10015198 <__clzsi2+0x2c>)
10015190:	5c10      	ldrb	r0, [r2, r0]
10015192:	1840      	adds	r0, r0, r1
10015194:	4770      	bx	lr
10015196:	46c0      	nop			; (mov r8, r8)
10015198:	02020304 	.word	0x02020304
1001519c:	01010101 	.word	0x01010101
	...

100151a8 <__libc_init_array>:
100151a8:	4b0e      	ldr	r3, [pc, #56]	; (100151e4 <__libc_init_array+0x3c>)
100151aa:	b570      	push	{r4, r5, r6, lr}
100151ac:	2500      	movs	r5, #0
100151ae:	001e      	movs	r6, r3
100151b0:	4c0d      	ldr	r4, [pc, #52]	; (100151e8 <__libc_init_array+0x40>)
100151b2:	1ae4      	subs	r4, r4, r3
100151b4:	10a4      	asrs	r4, r4, #2
100151b6:	42a5      	cmp	r5, r4
100151b8:	d004      	beq.n	100151c4 <__libc_init_array+0x1c>
100151ba:	00ab      	lsls	r3, r5, #2
100151bc:	58f3      	ldr	r3, [r6, r3]
100151be:	4798      	blx	r3
100151c0:	3501      	adds	r5, #1
100151c2:	e7f8      	b.n	100151b6 <__libc_init_array+0xe>
100151c4:	f003 fa0c 	bl	100185e0 <_init>
100151c8:	4b08      	ldr	r3, [pc, #32]	; (100151ec <__libc_init_array+0x44>)
100151ca:	2500      	movs	r5, #0
100151cc:	001e      	movs	r6, r3
100151ce:	4c08      	ldr	r4, [pc, #32]	; (100151f0 <__libc_init_array+0x48>)
100151d0:	1ae4      	subs	r4, r4, r3
100151d2:	10a4      	asrs	r4, r4, #2
100151d4:	42a5      	cmp	r5, r4
100151d6:	d004      	beq.n	100151e2 <__libc_init_array+0x3a>
100151d8:	00ab      	lsls	r3, r5, #2
100151da:	58f3      	ldr	r3, [r6, r3]
100151dc:	4798      	blx	r3
100151de:	3501      	adds	r5, #1
100151e0:	e7f8      	b.n	100151d4 <__libc_init_array+0x2c>
100151e2:	bd70      	pop	{r4, r5, r6, pc}
100151e4:	100185ec 	.word	0x100185ec
100151e8:	100185ec 	.word	0x100185ec
100151ec:	100185ec 	.word	0x100185ec
100151f0:	100185f0 	.word	0x100185f0

100151f4 <malloc>:
100151f4:	b510      	push	{r4, lr}
100151f6:	4b03      	ldr	r3, [pc, #12]	; (10015204 <malloc+0x10>)
100151f8:	0001      	movs	r1, r0
100151fa:	6818      	ldr	r0, [r3, #0]
100151fc:	f000 f86a 	bl	100152d4 <_malloc_r>
10015200:	bd10      	pop	{r4, pc}
10015202:	46c0      	nop			; (mov r8, r8)
10015204:	100186a8 	.word	0x100186a8

10015208 <memcmp>:
10015208:	b530      	push	{r4, r5, lr}
1001520a:	2400      	movs	r4, #0
1001520c:	42a2      	cmp	r2, r4
1001520e:	d008      	beq.n	10015222 <memcmp+0x1a>
10015210:	5d03      	ldrb	r3, [r0, r4]
10015212:	1c65      	adds	r5, r4, #1
10015214:	5d0c      	ldrb	r4, [r1, r4]
10015216:	42a3      	cmp	r3, r4
10015218:	d001      	beq.n	1001521e <memcmp+0x16>
1001521a:	1b18      	subs	r0, r3, r4
1001521c:	e002      	b.n	10015224 <memcmp+0x1c>
1001521e:	002c      	movs	r4, r5
10015220:	e7f4      	b.n	1001520c <memcmp+0x4>
10015222:	2000      	movs	r0, #0
10015224:	bd30      	pop	{r4, r5, pc}

10015226 <memcpy>:
10015226:	2300      	movs	r3, #0
10015228:	b510      	push	{r4, lr}
1001522a:	429a      	cmp	r2, r3
1001522c:	d003      	beq.n	10015236 <memcpy+0x10>
1001522e:	5ccc      	ldrb	r4, [r1, r3]
10015230:	54c4      	strb	r4, [r0, r3]
10015232:	3301      	adds	r3, #1
10015234:	e7f9      	b.n	1001522a <memcpy+0x4>
10015236:	bd10      	pop	{r4, pc}

10015238 <memset>:
10015238:	0003      	movs	r3, r0
1001523a:	1882      	adds	r2, r0, r2
1001523c:	4293      	cmp	r3, r2
1001523e:	d002      	beq.n	10015246 <memset+0xe>
10015240:	7019      	strb	r1, [r3, #0]
10015242:	3301      	adds	r3, #1
10015244:	e7fa      	b.n	1001523c <memset+0x4>
10015246:	4770      	bx	lr

10015248 <_free_r>:
10015248:	b530      	push	{r4, r5, lr}
1001524a:	2900      	cmp	r1, #0
1001524c:	d03e      	beq.n	100152cc <_free_r+0x84>
1001524e:	3904      	subs	r1, #4
10015250:	680b      	ldr	r3, [r1, #0]
10015252:	2b00      	cmp	r3, #0
10015254:	da00      	bge.n	10015258 <_free_r+0x10>
10015256:	18c9      	adds	r1, r1, r3
10015258:	4a1d      	ldr	r2, [pc, #116]	; (100152d0 <_free_r+0x88>)
1001525a:	6813      	ldr	r3, [r2, #0]
1001525c:	0014      	movs	r4, r2
1001525e:	2b00      	cmp	r3, #0
10015260:	d102      	bne.n	10015268 <_free_r+0x20>
10015262:	604b      	str	r3, [r1, #4]
10015264:	6011      	str	r1, [r2, #0]
10015266:	e031      	b.n	100152cc <_free_r+0x84>
10015268:	428b      	cmp	r3, r1
1001526a:	d90d      	bls.n	10015288 <_free_r+0x40>
1001526c:	680a      	ldr	r2, [r1, #0]
1001526e:	1888      	adds	r0, r1, r2
10015270:	4283      	cmp	r3, r0
10015272:	d103      	bne.n	1001527c <_free_r+0x34>
10015274:	6818      	ldr	r0, [r3, #0]
10015276:	685b      	ldr	r3, [r3, #4]
10015278:	1882      	adds	r2, r0, r2
1001527a:	600a      	str	r2, [r1, #0]
1001527c:	604b      	str	r3, [r1, #4]
1001527e:	6021      	str	r1, [r4, #0]
10015280:	e024      	b.n	100152cc <_free_r+0x84>
10015282:	428a      	cmp	r2, r1
10015284:	d803      	bhi.n	1001528e <_free_r+0x46>
10015286:	0013      	movs	r3, r2
10015288:	685a      	ldr	r2, [r3, #4]
1001528a:	2a00      	cmp	r2, #0
1001528c:	d1f9      	bne.n	10015282 <_free_r+0x3a>
1001528e:	681d      	ldr	r5, [r3, #0]
10015290:	195c      	adds	r4, r3, r5
10015292:	428c      	cmp	r4, r1
10015294:	d10b      	bne.n	100152ae <_free_r+0x66>
10015296:	6809      	ldr	r1, [r1, #0]
10015298:	1869      	adds	r1, r5, r1
1001529a:	1858      	adds	r0, r3, r1
1001529c:	6019      	str	r1, [r3, #0]
1001529e:	4282      	cmp	r2, r0
100152a0:	d114      	bne.n	100152cc <_free_r+0x84>
100152a2:	6810      	ldr	r0, [r2, #0]
100152a4:	6852      	ldr	r2, [r2, #4]
100152a6:	1841      	adds	r1, r0, r1
100152a8:	6019      	str	r1, [r3, #0]
100152aa:	605a      	str	r2, [r3, #4]
100152ac:	e00e      	b.n	100152cc <_free_r+0x84>
100152ae:	428c      	cmp	r4, r1
100152b0:	d902      	bls.n	100152b8 <_free_r+0x70>
100152b2:	230c      	movs	r3, #12
100152b4:	6003      	str	r3, [r0, #0]
100152b6:	e009      	b.n	100152cc <_free_r+0x84>
100152b8:	6808      	ldr	r0, [r1, #0]
100152ba:	180c      	adds	r4, r1, r0
100152bc:	42a2      	cmp	r2, r4
100152be:	d103      	bne.n	100152c8 <_free_r+0x80>
100152c0:	6814      	ldr	r4, [r2, #0]
100152c2:	6852      	ldr	r2, [r2, #4]
100152c4:	1820      	adds	r0, r4, r0
100152c6:	6008      	str	r0, [r1, #0]
100152c8:	604a      	str	r2, [r1, #4]
100152ca:	6059      	str	r1, [r3, #4]
100152cc:	bd30      	pop	{r4, r5, pc}
100152ce:	46c0      	nop			; (mov r8, r8)
100152d0:	1001a17c 	.word	0x1001a17c

100152d4 <_malloc_r>:
100152d4:	2303      	movs	r3, #3
100152d6:	b570      	push	{r4, r5, r6, lr}
100152d8:	1ccd      	adds	r5, r1, #3
100152da:	439d      	bics	r5, r3
100152dc:	3508      	adds	r5, #8
100152de:	0006      	movs	r6, r0
100152e0:	2d0c      	cmp	r5, #12
100152e2:	d201      	bcs.n	100152e8 <_malloc_r+0x14>
100152e4:	250c      	movs	r5, #12
100152e6:	e005      	b.n	100152f4 <_malloc_r+0x20>
100152e8:	2d00      	cmp	r5, #0
100152ea:	da03      	bge.n	100152f4 <_malloc_r+0x20>
100152ec:	230c      	movs	r3, #12
100152ee:	2000      	movs	r0, #0
100152f0:	6033      	str	r3, [r6, #0]
100152f2:	e040      	b.n	10015376 <_malloc_r+0xa2>
100152f4:	42a9      	cmp	r1, r5
100152f6:	d8f9      	bhi.n	100152ec <_malloc_r+0x18>
100152f8:	4b1f      	ldr	r3, [pc, #124]	; (10015378 <_malloc_r+0xa4>)
100152fa:	681c      	ldr	r4, [r3, #0]
100152fc:	001a      	movs	r2, r3
100152fe:	0021      	movs	r1, r4
10015300:	2900      	cmp	r1, #0
10015302:	d013      	beq.n	1001532c <_malloc_r+0x58>
10015304:	680b      	ldr	r3, [r1, #0]
10015306:	1b5b      	subs	r3, r3, r5
10015308:	d40d      	bmi.n	10015326 <_malloc_r+0x52>
1001530a:	2b0b      	cmp	r3, #11
1001530c:	d902      	bls.n	10015314 <_malloc_r+0x40>
1001530e:	600b      	str	r3, [r1, #0]
10015310:	18cc      	adds	r4, r1, r3
10015312:	e01e      	b.n	10015352 <_malloc_r+0x7e>
10015314:	428c      	cmp	r4, r1
10015316:	d102      	bne.n	1001531e <_malloc_r+0x4a>
10015318:	6863      	ldr	r3, [r4, #4]
1001531a:	6013      	str	r3, [r2, #0]
1001531c:	e01a      	b.n	10015354 <_malloc_r+0x80>
1001531e:	684b      	ldr	r3, [r1, #4]
10015320:	6063      	str	r3, [r4, #4]
10015322:	000c      	movs	r4, r1
10015324:	e016      	b.n	10015354 <_malloc_r+0x80>
10015326:	000c      	movs	r4, r1
10015328:	6849      	ldr	r1, [r1, #4]
1001532a:	e7e9      	b.n	10015300 <_malloc_r+0x2c>
1001532c:	4c13      	ldr	r4, [pc, #76]	; (1001537c <_malloc_r+0xa8>)
1001532e:	6823      	ldr	r3, [r4, #0]
10015330:	2b00      	cmp	r3, #0
10015332:	d103      	bne.n	1001533c <_malloc_r+0x68>
10015334:	0030      	movs	r0, r6
10015336:	f000 f8f9 	bl	1001552c <_sbrk_r>
1001533a:	6020      	str	r0, [r4, #0]
1001533c:	0029      	movs	r1, r5
1001533e:	0030      	movs	r0, r6
10015340:	f000 f8f4 	bl	1001552c <_sbrk_r>
10015344:	1c43      	adds	r3, r0, #1
10015346:	d0d1      	beq.n	100152ec <_malloc_r+0x18>
10015348:	2303      	movs	r3, #3
1001534a:	1cc4      	adds	r4, r0, #3
1001534c:	439c      	bics	r4, r3
1001534e:	42a0      	cmp	r0, r4
10015350:	d10a      	bne.n	10015368 <_malloc_r+0x94>
10015352:	6025      	str	r5, [r4, #0]
10015354:	0020      	movs	r0, r4
10015356:	2207      	movs	r2, #7
10015358:	300b      	adds	r0, #11
1001535a:	1d23      	adds	r3, r4, #4
1001535c:	4390      	bics	r0, r2
1001535e:	1ac3      	subs	r3, r0, r3
10015360:	d009      	beq.n	10015376 <_malloc_r+0xa2>
10015362:	425a      	negs	r2, r3
10015364:	50e2      	str	r2, [r4, r3]
10015366:	e006      	b.n	10015376 <_malloc_r+0xa2>
10015368:	1a21      	subs	r1, r4, r0
1001536a:	0030      	movs	r0, r6
1001536c:	f000 f8de 	bl	1001552c <_sbrk_r>
10015370:	1c43      	adds	r3, r0, #1
10015372:	d1ee      	bne.n	10015352 <_malloc_r+0x7e>
10015374:	e7ba      	b.n	100152ec <_malloc_r+0x18>
10015376:	bd70      	pop	{r4, r5, r6, pc}
10015378:	1001a17c 	.word	0x1001a17c
1001537c:	1001a178 	.word	0x1001a178

10015380 <iprintf>:
10015380:	b40f      	push	{r0, r1, r2, r3}
10015382:	4b0b      	ldr	r3, [pc, #44]	; (100153b0 <iprintf+0x30>)
10015384:	b513      	push	{r0, r1, r4, lr}
10015386:	681c      	ldr	r4, [r3, #0]
10015388:	2c00      	cmp	r4, #0
1001538a:	d005      	beq.n	10015398 <iprintf+0x18>
1001538c:	69a3      	ldr	r3, [r4, #24]
1001538e:	2b00      	cmp	r3, #0
10015390:	d102      	bne.n	10015398 <iprintf+0x18>
10015392:	0020      	movs	r0, r4
10015394:	f000 fb58 	bl	10015a48 <__sinit>
10015398:	ab05      	add	r3, sp, #20
1001539a:	9a04      	ldr	r2, [sp, #16]
1001539c:	68a1      	ldr	r1, [r4, #8]
1001539e:	0020      	movs	r0, r4
100153a0:	9301      	str	r3, [sp, #4]
100153a2:	f000 fc71 	bl	10015c88 <_vfiprintf_r>
100153a6:	bc16      	pop	{r1, r2, r4}
100153a8:	bc08      	pop	{r3}
100153aa:	b004      	add	sp, #16
100153ac:	4718      	bx	r3
100153ae:	46c0      	nop			; (mov r8, r8)
100153b0:	100186a8 	.word	0x100186a8

100153b4 <putchar>:
100153b4:	4b08      	ldr	r3, [pc, #32]	; (100153d8 <putchar+0x24>)
100153b6:	b570      	push	{r4, r5, r6, lr}
100153b8:	681c      	ldr	r4, [r3, #0]
100153ba:	0005      	movs	r5, r0
100153bc:	2c00      	cmp	r4, #0
100153be:	d005      	beq.n	100153cc <putchar+0x18>
100153c0:	69a3      	ldr	r3, [r4, #24]
100153c2:	2b00      	cmp	r3, #0
100153c4:	d102      	bne.n	100153cc <putchar+0x18>
100153c6:	0020      	movs	r0, r4
100153c8:	f000 fb3e 	bl	10015a48 <__sinit>
100153cc:	0029      	movs	r1, r5
100153ce:	68a2      	ldr	r2, [r4, #8]
100153d0:	0020      	movs	r0, r4
100153d2:	f000 ff05 	bl	100161e0 <_putc_r>
100153d6:	bd70      	pop	{r4, r5, r6, pc}
100153d8:	100186a8 	.word	0x100186a8

100153dc <_puts_r>:
100153dc:	b570      	push	{r4, r5, r6, lr}
100153de:	0005      	movs	r5, r0
100153e0:	000e      	movs	r6, r1
100153e2:	2800      	cmp	r0, #0
100153e4:	d004      	beq.n	100153f0 <_puts_r+0x14>
100153e6:	6983      	ldr	r3, [r0, #24]
100153e8:	2b00      	cmp	r3, #0
100153ea:	d101      	bne.n	100153f0 <_puts_r+0x14>
100153ec:	f000 fb2c 	bl	10015a48 <__sinit>
100153f0:	69ab      	ldr	r3, [r5, #24]
100153f2:	68ac      	ldr	r4, [r5, #8]
100153f4:	2b00      	cmp	r3, #0
100153f6:	d102      	bne.n	100153fe <_puts_r+0x22>
100153f8:	0028      	movs	r0, r5
100153fa:	f000 fb25 	bl	10015a48 <__sinit>
100153fe:	4b25      	ldr	r3, [pc, #148]	; (10015494 <_puts_r+0xb8>)
10015400:	429c      	cmp	r4, r3
10015402:	d101      	bne.n	10015408 <_puts_r+0x2c>
10015404:	686c      	ldr	r4, [r5, #4]
10015406:	e008      	b.n	1001541a <_puts_r+0x3e>
10015408:	4b23      	ldr	r3, [pc, #140]	; (10015498 <_puts_r+0xbc>)
1001540a:	429c      	cmp	r4, r3
1001540c:	d101      	bne.n	10015412 <_puts_r+0x36>
1001540e:	68ac      	ldr	r4, [r5, #8]
10015410:	e003      	b.n	1001541a <_puts_r+0x3e>
10015412:	4b22      	ldr	r3, [pc, #136]	; (1001549c <_puts_r+0xc0>)
10015414:	429c      	cmp	r4, r3
10015416:	d100      	bne.n	1001541a <_puts_r+0x3e>
10015418:	68ec      	ldr	r4, [r5, #12]
1001541a:	89a3      	ldrh	r3, [r4, #12]
1001541c:	071b      	lsls	r3, r3, #28
1001541e:	d502      	bpl.n	10015426 <_puts_r+0x4a>
10015420:	6923      	ldr	r3, [r4, #16]
10015422:	2b00      	cmp	r3, #0
10015424:	d111      	bne.n	1001544a <_puts_r+0x6e>
10015426:	0021      	movs	r1, r4
10015428:	0028      	movs	r0, r5
1001542a:	f000 f9a3 	bl	10015774 <__swsetup_r>
1001542e:	2800      	cmp	r0, #0
10015430:	d00b      	beq.n	1001544a <_puts_r+0x6e>
10015432:	2001      	movs	r0, #1
10015434:	4240      	negs	r0, r0
10015436:	e02b      	b.n	10015490 <_puts_r+0xb4>
10015438:	3b01      	subs	r3, #1
1001543a:	3601      	adds	r6, #1
1001543c:	60a3      	str	r3, [r4, #8]
1001543e:	2b00      	cmp	r3, #0
10015440:	db08      	blt.n	10015454 <_puts_r+0x78>
10015442:	6823      	ldr	r3, [r4, #0]
10015444:	1c5a      	adds	r2, r3, #1
10015446:	6022      	str	r2, [r4, #0]
10015448:	7019      	strb	r1, [r3, #0]
1001544a:	7831      	ldrb	r1, [r6, #0]
1001544c:	68a3      	ldr	r3, [r4, #8]
1001544e:	2900      	cmp	r1, #0
10015450:	d1f2      	bne.n	10015438 <_puts_r+0x5c>
10015452:	e00b      	b.n	1001546c <_puts_r+0x90>
10015454:	69a2      	ldr	r2, [r4, #24]
10015456:	4293      	cmp	r3, r2
10015458:	db01      	blt.n	1001545e <_puts_r+0x82>
1001545a:	290a      	cmp	r1, #10
1001545c:	d1f1      	bne.n	10015442 <_puts_r+0x66>
1001545e:	0022      	movs	r2, r4
10015460:	0028      	movs	r0, r5
10015462:	f000 f92f 	bl	100156c4 <__swbuf_r>
10015466:	1c43      	adds	r3, r0, #1
10015468:	d1ef      	bne.n	1001544a <_puts_r+0x6e>
1001546a:	e7e2      	b.n	10015432 <_puts_r+0x56>
1001546c:	3b01      	subs	r3, #1
1001546e:	60a3      	str	r3, [r4, #8]
10015470:	2b00      	cmp	r3, #0
10015472:	da08      	bge.n	10015486 <_puts_r+0xaa>
10015474:	0022      	movs	r2, r4
10015476:	310a      	adds	r1, #10
10015478:	0028      	movs	r0, r5
1001547a:	f000 f923 	bl	100156c4 <__swbuf_r>
1001547e:	1c43      	adds	r3, r0, #1
10015480:	d0d7      	beq.n	10015432 <_puts_r+0x56>
10015482:	200a      	movs	r0, #10
10015484:	e004      	b.n	10015490 <_puts_r+0xb4>
10015486:	200a      	movs	r0, #10
10015488:	6823      	ldr	r3, [r4, #0]
1001548a:	1c5a      	adds	r2, r3, #1
1001548c:	6022      	str	r2, [r4, #0]
1001548e:	7018      	strb	r0, [r3, #0]
10015490:	bd70      	pop	{r4, r5, r6, pc}
10015492:	46c0      	nop			; (mov r8, r8)
10015494:	1001854c 	.word	0x1001854c
10015498:	1001856c 	.word	0x1001856c
1001549c:	1001858c 	.word	0x1001858c

100154a0 <puts>:
100154a0:	b510      	push	{r4, lr}
100154a2:	4b03      	ldr	r3, [pc, #12]	; (100154b0 <puts+0x10>)
100154a4:	0001      	movs	r1, r0
100154a6:	6818      	ldr	r0, [r3, #0]
100154a8:	f7ff ff98 	bl	100153dc <_puts_r>
100154ac:	bd10      	pop	{r4, pc}
100154ae:	46c0      	nop			; (mov r8, r8)
100154b0:	100186a8 	.word	0x100186a8

100154b4 <rand>:
100154b4:	4b15      	ldr	r3, [pc, #84]	; (1001550c <rand+0x58>)
100154b6:	b510      	push	{r4, lr}
100154b8:	681c      	ldr	r4, [r3, #0]
100154ba:	6ba3      	ldr	r3, [r4, #56]	; 0x38
100154bc:	2b00      	cmp	r3, #0
100154be:	d115      	bne.n	100154ec <rand+0x38>
100154c0:	2018      	movs	r0, #24
100154c2:	f7ff fe97 	bl	100151f4 <malloc>
100154c6:	4b12      	ldr	r3, [pc, #72]	; (10015510 <rand+0x5c>)
100154c8:	63a0      	str	r0, [r4, #56]	; 0x38
100154ca:	8003      	strh	r3, [r0, #0]
100154cc:	4b11      	ldr	r3, [pc, #68]	; (10015514 <rand+0x60>)
100154ce:	2201      	movs	r2, #1
100154d0:	8043      	strh	r3, [r0, #2]
100154d2:	4b11      	ldr	r3, [pc, #68]	; (10015518 <rand+0x64>)
100154d4:	8083      	strh	r3, [r0, #4]
100154d6:	4b11      	ldr	r3, [pc, #68]	; (1001551c <rand+0x68>)
100154d8:	80c3      	strh	r3, [r0, #6]
100154da:	4b11      	ldr	r3, [pc, #68]	; (10015520 <rand+0x6c>)
100154dc:	8103      	strh	r3, [r0, #8]
100154de:	2305      	movs	r3, #5
100154e0:	8143      	strh	r3, [r0, #10]
100154e2:	3306      	adds	r3, #6
100154e4:	8183      	strh	r3, [r0, #12]
100154e6:	2300      	movs	r3, #0
100154e8:	6102      	str	r2, [r0, #16]
100154ea:	6143      	str	r3, [r0, #20]
100154ec:	6ba4      	ldr	r4, [r4, #56]	; 0x38
100154ee:	4a0d      	ldr	r2, [pc, #52]	; (10015524 <rand+0x70>)
100154f0:	6920      	ldr	r0, [r4, #16]
100154f2:	6961      	ldr	r1, [r4, #20]
100154f4:	4b0c      	ldr	r3, [pc, #48]	; (10015528 <rand+0x74>)
100154f6:	f7fe f80b 	bl	10013510 <__aeabi_lmul>
100154fa:	2201      	movs	r2, #1
100154fc:	2300      	movs	r3, #0
100154fe:	1880      	adds	r0, r0, r2
10015500:	4159      	adcs	r1, r3
10015502:	6120      	str	r0, [r4, #16]
10015504:	6161      	str	r1, [r4, #20]
10015506:	0048      	lsls	r0, r1, #1
10015508:	0840      	lsrs	r0, r0, #1
1001550a:	bd10      	pop	{r4, pc}
1001550c:	100186a8 	.word	0x100186a8
10015510:	0000330e 	.word	0x0000330e
10015514:	ffffabcd 	.word	0xffffabcd
10015518:	00001234 	.word	0x00001234
1001551c:	ffffe66d 	.word	0xffffe66d
10015520:	ffffdeec 	.word	0xffffdeec
10015524:	4c957f2d 	.word	0x4c957f2d
10015528:	5851f42d 	.word	0x5851f42d

1001552c <_sbrk_r>:
1001552c:	2300      	movs	r3, #0
1001552e:	b570      	push	{r4, r5, r6, lr}
10015530:	4c06      	ldr	r4, [pc, #24]	; (1001554c <_sbrk_r+0x20>)
10015532:	0005      	movs	r5, r0
10015534:	0008      	movs	r0, r1
10015536:	6023      	str	r3, [r4, #0]
10015538:	f7f8 f9ac 	bl	1000d894 <_sbrk>
1001553c:	1c43      	adds	r3, r0, #1
1001553e:	d103      	bne.n	10015548 <_sbrk_r+0x1c>
10015540:	6823      	ldr	r3, [r4, #0]
10015542:	2b00      	cmp	r3, #0
10015544:	d000      	beq.n	10015548 <_sbrk_r+0x1c>
10015546:	602b      	str	r3, [r5, #0]
10015548:	bd70      	pop	{r4, r5, r6, pc}
1001554a:	46c0      	nop			; (mov r8, r8)
1001554c:	1001b548 	.word	0x1001b548

10015550 <setbuf>:
10015550:	424a      	negs	r2, r1
10015552:	414a      	adcs	r2, r1
10015554:	2380      	movs	r3, #128	; 0x80
10015556:	b510      	push	{r4, lr}
10015558:	0052      	lsls	r2, r2, #1
1001555a:	00db      	lsls	r3, r3, #3
1001555c:	f000 f802 	bl	10015564 <setvbuf>
10015560:	bd10      	pop	{r4, pc}
	...

10015564 <setvbuf>:
10015564:	b5f0      	push	{r4, r5, r6, r7, lr}
10015566:	001d      	movs	r5, r3
10015568:	4b51      	ldr	r3, [pc, #324]	; (100156b0 <setvbuf+0x14c>)
1001556a:	b085      	sub	sp, #20
1001556c:	681e      	ldr	r6, [r3, #0]
1001556e:	0004      	movs	r4, r0
10015570:	000f      	movs	r7, r1
10015572:	9200      	str	r2, [sp, #0]
10015574:	2e00      	cmp	r6, #0
10015576:	d005      	beq.n	10015584 <setvbuf+0x20>
10015578:	69b3      	ldr	r3, [r6, #24]
1001557a:	2b00      	cmp	r3, #0
1001557c:	d102      	bne.n	10015584 <setvbuf+0x20>
1001557e:	0030      	movs	r0, r6
10015580:	f000 fa62 	bl	10015a48 <__sinit>
10015584:	4b4b      	ldr	r3, [pc, #300]	; (100156b4 <setvbuf+0x150>)
10015586:	429c      	cmp	r4, r3
10015588:	d101      	bne.n	1001558e <setvbuf+0x2a>
1001558a:	6874      	ldr	r4, [r6, #4]
1001558c:	e008      	b.n	100155a0 <setvbuf+0x3c>
1001558e:	4b4a      	ldr	r3, [pc, #296]	; (100156b8 <setvbuf+0x154>)
10015590:	429c      	cmp	r4, r3
10015592:	d101      	bne.n	10015598 <setvbuf+0x34>
10015594:	68b4      	ldr	r4, [r6, #8]
10015596:	e003      	b.n	100155a0 <setvbuf+0x3c>
10015598:	4b48      	ldr	r3, [pc, #288]	; (100156bc <setvbuf+0x158>)
1001559a:	429c      	cmp	r4, r3
1001559c:	d100      	bne.n	100155a0 <setvbuf+0x3c>
1001559e:	68f4      	ldr	r4, [r6, #12]
100155a0:	9b00      	ldr	r3, [sp, #0]
100155a2:	2b02      	cmp	r3, #2
100155a4:	d005      	beq.n	100155b2 <setvbuf+0x4e>
100155a6:	2b01      	cmp	r3, #1
100155a8:	d900      	bls.n	100155ac <setvbuf+0x48>
100155aa:	e07c      	b.n	100156a6 <setvbuf+0x142>
100155ac:	2d00      	cmp	r5, #0
100155ae:	da00      	bge.n	100155b2 <setvbuf+0x4e>
100155b0:	e079      	b.n	100156a6 <setvbuf+0x142>
100155b2:	0021      	movs	r1, r4
100155b4:	0030      	movs	r0, r6
100155b6:	f000 f9d9 	bl	1001596c <_fflush_r>
100155ba:	6b61      	ldr	r1, [r4, #52]	; 0x34
100155bc:	2900      	cmp	r1, #0
100155be:	d008      	beq.n	100155d2 <setvbuf+0x6e>
100155c0:	0023      	movs	r3, r4
100155c2:	3344      	adds	r3, #68	; 0x44
100155c4:	4299      	cmp	r1, r3
100155c6:	d002      	beq.n	100155ce <setvbuf+0x6a>
100155c8:	0030      	movs	r0, r6
100155ca:	f7ff fe3d 	bl	10015248 <_free_r>
100155ce:	2300      	movs	r3, #0
100155d0:	6363      	str	r3, [r4, #52]	; 0x34
100155d2:	2300      	movs	r3, #0
100155d4:	61a3      	str	r3, [r4, #24]
100155d6:	6063      	str	r3, [r4, #4]
100155d8:	89a3      	ldrh	r3, [r4, #12]
100155da:	061b      	lsls	r3, r3, #24
100155dc:	d503      	bpl.n	100155e6 <setvbuf+0x82>
100155de:	6921      	ldr	r1, [r4, #16]
100155e0:	0030      	movs	r0, r6
100155e2:	f7ff fe31 	bl	10015248 <_free_r>
100155e6:	89a2      	ldrh	r2, [r4, #12]
100155e8:	4b35      	ldr	r3, [pc, #212]	; (100156c0 <setvbuf+0x15c>)
100155ea:	4013      	ands	r3, r2
100155ec:	81a3      	strh	r3, [r4, #12]
100155ee:	9b00      	ldr	r3, [sp, #0]
100155f0:	2b02      	cmp	r3, #2
100155f2:	d021      	beq.n	10015638 <setvbuf+0xd4>
100155f4:	ab03      	add	r3, sp, #12
100155f6:	aa02      	add	r2, sp, #8
100155f8:	0021      	movs	r1, r4
100155fa:	0030      	movs	r0, r6
100155fc:	f000 fab8 	bl	10015b70 <__swhatbuf_r>
10015600:	89a3      	ldrh	r3, [r4, #12]
10015602:	4318      	orrs	r0, r3
10015604:	81a0      	strh	r0, [r4, #12]
10015606:	2d00      	cmp	r5, #0
10015608:	d101      	bne.n	1001560e <setvbuf+0xaa>
1001560a:	9d02      	ldr	r5, [sp, #8]
1001560c:	e001      	b.n	10015612 <setvbuf+0xae>
1001560e:	2f00      	cmp	r7, #0
10015610:	d125      	bne.n	1001565e <setvbuf+0xfa>
10015612:	0028      	movs	r0, r5
10015614:	f7ff fdee 	bl	100151f4 <malloc>
10015618:	9501      	str	r5, [sp, #4]
1001561a:	1e07      	subs	r7, r0, #0
1001561c:	d11a      	bne.n	10015654 <setvbuf+0xf0>
1001561e:	9b02      	ldr	r3, [sp, #8]
10015620:	9301      	str	r3, [sp, #4]
10015622:	42ab      	cmp	r3, r5
10015624:	d102      	bne.n	1001562c <setvbuf+0xc8>
10015626:	2001      	movs	r0, #1
10015628:	4240      	negs	r0, r0
1001562a:	e006      	b.n	1001563a <setvbuf+0xd6>
1001562c:	9801      	ldr	r0, [sp, #4]
1001562e:	f7ff fde1 	bl	100151f4 <malloc>
10015632:	1e07      	subs	r7, r0, #0
10015634:	d10e      	bne.n	10015654 <setvbuf+0xf0>
10015636:	e7f6      	b.n	10015626 <setvbuf+0xc2>
10015638:	2000      	movs	r0, #0
1001563a:	2202      	movs	r2, #2
1001563c:	89a3      	ldrh	r3, [r4, #12]
1001563e:	4313      	orrs	r3, r2
10015640:	81a3      	strh	r3, [r4, #12]
10015642:	2300      	movs	r3, #0
10015644:	60a3      	str	r3, [r4, #8]
10015646:	0023      	movs	r3, r4
10015648:	3347      	adds	r3, #71	; 0x47
1001564a:	6023      	str	r3, [r4, #0]
1001564c:	6123      	str	r3, [r4, #16]
1001564e:	2301      	movs	r3, #1
10015650:	6163      	str	r3, [r4, #20]
10015652:	e02a      	b.n	100156aa <setvbuf+0x146>
10015654:	2280      	movs	r2, #128	; 0x80
10015656:	89a3      	ldrh	r3, [r4, #12]
10015658:	9d01      	ldr	r5, [sp, #4]
1001565a:	4313      	orrs	r3, r2
1001565c:	81a3      	strh	r3, [r4, #12]
1001565e:	69b3      	ldr	r3, [r6, #24]
10015660:	2b00      	cmp	r3, #0
10015662:	d102      	bne.n	1001566a <setvbuf+0x106>
10015664:	0030      	movs	r0, r6
10015666:	f000 f9ef 	bl	10015a48 <__sinit>
1001566a:	9b00      	ldr	r3, [sp, #0]
1001566c:	2b01      	cmp	r3, #1
1001566e:	d103      	bne.n	10015678 <setvbuf+0x114>
10015670:	89a3      	ldrh	r3, [r4, #12]
10015672:	9a00      	ldr	r2, [sp, #0]
10015674:	431a      	orrs	r2, r3
10015676:	81a2      	strh	r2, [r4, #12]
10015678:	2308      	movs	r3, #8
1001567a:	89a2      	ldrh	r2, [r4, #12]
1001567c:	6027      	str	r7, [r4, #0]
1001567e:	4013      	ands	r3, r2
10015680:	6127      	str	r7, [r4, #16]
10015682:	6165      	str	r5, [r4, #20]
10015684:	1e18      	subs	r0, r3, #0
10015686:	d00c      	beq.n	100156a2 <setvbuf+0x13e>
10015688:	2301      	movs	r3, #1
1001568a:	401a      	ands	r2, r3
1001568c:	2300      	movs	r3, #0
1001568e:	1e10      	subs	r0, r2, #0
10015690:	4298      	cmp	r0, r3
10015692:	d004      	beq.n	1001569e <setvbuf+0x13a>
10015694:	426d      	negs	r5, r5
10015696:	60a3      	str	r3, [r4, #8]
10015698:	61a5      	str	r5, [r4, #24]
1001569a:	0018      	movs	r0, r3
1001569c:	e005      	b.n	100156aa <setvbuf+0x146>
1001569e:	60a5      	str	r5, [r4, #8]
100156a0:	e003      	b.n	100156aa <setvbuf+0x146>
100156a2:	60a3      	str	r3, [r4, #8]
100156a4:	e001      	b.n	100156aa <setvbuf+0x146>
100156a6:	2001      	movs	r0, #1
100156a8:	4240      	negs	r0, r0
100156aa:	b005      	add	sp, #20
100156ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
100156ae:	46c0      	nop			; (mov r8, r8)
100156b0:	100186a8 	.word	0x100186a8
100156b4:	1001854c 	.word	0x1001854c
100156b8:	1001856c 	.word	0x1001856c
100156bc:	1001858c 	.word	0x1001858c
100156c0:	fffff35c 	.word	0xfffff35c

100156c4 <__swbuf_r>:
100156c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100156c6:	0005      	movs	r5, r0
100156c8:	000f      	movs	r7, r1
100156ca:	0014      	movs	r4, r2
100156cc:	2800      	cmp	r0, #0
100156ce:	d004      	beq.n	100156da <__swbuf_r+0x16>
100156d0:	6983      	ldr	r3, [r0, #24]
100156d2:	2b00      	cmp	r3, #0
100156d4:	d101      	bne.n	100156da <__swbuf_r+0x16>
100156d6:	f000 f9b7 	bl	10015a48 <__sinit>
100156da:	4b23      	ldr	r3, [pc, #140]	; (10015768 <__swbuf_r+0xa4>)
100156dc:	429c      	cmp	r4, r3
100156de:	d101      	bne.n	100156e4 <__swbuf_r+0x20>
100156e0:	686c      	ldr	r4, [r5, #4]
100156e2:	e008      	b.n	100156f6 <__swbuf_r+0x32>
100156e4:	4b21      	ldr	r3, [pc, #132]	; (1001576c <__swbuf_r+0xa8>)
100156e6:	429c      	cmp	r4, r3
100156e8:	d101      	bne.n	100156ee <__swbuf_r+0x2a>
100156ea:	68ac      	ldr	r4, [r5, #8]
100156ec:	e003      	b.n	100156f6 <__swbuf_r+0x32>
100156ee:	4b20      	ldr	r3, [pc, #128]	; (10015770 <__swbuf_r+0xac>)
100156f0:	429c      	cmp	r4, r3
100156f2:	d100      	bne.n	100156f6 <__swbuf_r+0x32>
100156f4:	68ec      	ldr	r4, [r5, #12]
100156f6:	69a3      	ldr	r3, [r4, #24]
100156f8:	60a3      	str	r3, [r4, #8]
100156fa:	89a3      	ldrh	r3, [r4, #12]
100156fc:	071b      	lsls	r3, r3, #28
100156fe:	d50a      	bpl.n	10015716 <__swbuf_r+0x52>
10015700:	6923      	ldr	r3, [r4, #16]
10015702:	2b00      	cmp	r3, #0
10015704:	d007      	beq.n	10015716 <__swbuf_r+0x52>
10015706:	6823      	ldr	r3, [r4, #0]
10015708:	6922      	ldr	r2, [r4, #16]
1001570a:	b2fe      	uxtb	r6, r7
1001570c:	1a98      	subs	r0, r3, r2
1001570e:	6963      	ldr	r3, [r4, #20]
10015710:	4298      	cmp	r0, r3
10015712:	db0f      	blt.n	10015734 <__swbuf_r+0x70>
10015714:	e008      	b.n	10015728 <__swbuf_r+0x64>
10015716:	0021      	movs	r1, r4
10015718:	0028      	movs	r0, r5
1001571a:	f000 f82b 	bl	10015774 <__swsetup_r>
1001571e:	2800      	cmp	r0, #0
10015720:	d0f1      	beq.n	10015706 <__swbuf_r+0x42>
10015722:	2001      	movs	r0, #1
10015724:	4240      	negs	r0, r0
10015726:	e01d      	b.n	10015764 <__swbuf_r+0xa0>
10015728:	0021      	movs	r1, r4
1001572a:	0028      	movs	r0, r5
1001572c:	f000 f91e 	bl	1001596c <_fflush_r>
10015730:	2800      	cmp	r0, #0
10015732:	d1f6      	bne.n	10015722 <__swbuf_r+0x5e>
10015734:	68a3      	ldr	r3, [r4, #8]
10015736:	3001      	adds	r0, #1
10015738:	3b01      	subs	r3, #1
1001573a:	60a3      	str	r3, [r4, #8]
1001573c:	6823      	ldr	r3, [r4, #0]
1001573e:	1c5a      	adds	r2, r3, #1
10015740:	6022      	str	r2, [r4, #0]
10015742:	701f      	strb	r7, [r3, #0]
10015744:	6963      	ldr	r3, [r4, #20]
10015746:	4298      	cmp	r0, r3
10015748:	d005      	beq.n	10015756 <__swbuf_r+0x92>
1001574a:	89a3      	ldrh	r3, [r4, #12]
1001574c:	0030      	movs	r0, r6
1001574e:	07db      	lsls	r3, r3, #31
10015750:	d508      	bpl.n	10015764 <__swbuf_r+0xa0>
10015752:	2e0a      	cmp	r6, #10
10015754:	d106      	bne.n	10015764 <__swbuf_r+0xa0>
10015756:	0021      	movs	r1, r4
10015758:	0028      	movs	r0, r5
1001575a:	f000 f907 	bl	1001596c <_fflush_r>
1001575e:	2800      	cmp	r0, #0
10015760:	d1df      	bne.n	10015722 <__swbuf_r+0x5e>
10015762:	0030      	movs	r0, r6
10015764:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10015766:	46c0      	nop			; (mov r8, r8)
10015768:	1001854c 	.word	0x1001854c
1001576c:	1001856c 	.word	0x1001856c
10015770:	1001858c 	.word	0x1001858c

10015774 <__swsetup_r>:
10015774:	4b36      	ldr	r3, [pc, #216]	; (10015850 <__swsetup_r+0xdc>)
10015776:	b570      	push	{r4, r5, r6, lr}
10015778:	681d      	ldr	r5, [r3, #0]
1001577a:	0006      	movs	r6, r0
1001577c:	000c      	movs	r4, r1
1001577e:	2d00      	cmp	r5, #0
10015780:	d005      	beq.n	1001578e <__swsetup_r+0x1a>
10015782:	69ab      	ldr	r3, [r5, #24]
10015784:	2b00      	cmp	r3, #0
10015786:	d102      	bne.n	1001578e <__swsetup_r+0x1a>
10015788:	0028      	movs	r0, r5
1001578a:	f000 f95d 	bl	10015a48 <__sinit>
1001578e:	4b31      	ldr	r3, [pc, #196]	; (10015854 <__swsetup_r+0xe0>)
10015790:	429c      	cmp	r4, r3
10015792:	d101      	bne.n	10015798 <__swsetup_r+0x24>
10015794:	686c      	ldr	r4, [r5, #4]
10015796:	e008      	b.n	100157aa <__swsetup_r+0x36>
10015798:	4b2f      	ldr	r3, [pc, #188]	; (10015858 <__swsetup_r+0xe4>)
1001579a:	429c      	cmp	r4, r3
1001579c:	d101      	bne.n	100157a2 <__swsetup_r+0x2e>
1001579e:	68ac      	ldr	r4, [r5, #8]
100157a0:	e003      	b.n	100157aa <__swsetup_r+0x36>
100157a2:	4b2e      	ldr	r3, [pc, #184]	; (1001585c <__swsetup_r+0xe8>)
100157a4:	429c      	cmp	r4, r3
100157a6:	d100      	bne.n	100157aa <__swsetup_r+0x36>
100157a8:	68ec      	ldr	r4, [r5, #12]
100157aa:	220c      	movs	r2, #12
100157ac:	5ea3      	ldrsh	r3, [r4, r2]
100157ae:	b29a      	uxth	r2, r3
100157b0:	0711      	lsls	r1, r2, #28
100157b2:	d423      	bmi.n	100157fc <__swsetup_r+0x88>
100157b4:	06d1      	lsls	r1, r2, #27
100157b6:	d407      	bmi.n	100157c8 <__swsetup_r+0x54>
100157b8:	2209      	movs	r2, #9
100157ba:	2001      	movs	r0, #1
100157bc:	6032      	str	r2, [r6, #0]
100157be:	3237      	adds	r2, #55	; 0x37
100157c0:	4313      	orrs	r3, r2
100157c2:	81a3      	strh	r3, [r4, #12]
100157c4:	4240      	negs	r0, r0
100157c6:	e042      	b.n	1001584e <__swsetup_r+0xda>
100157c8:	0753      	lsls	r3, r2, #29
100157ca:	d513      	bpl.n	100157f4 <__swsetup_r+0x80>
100157cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
100157ce:	2900      	cmp	r1, #0
100157d0:	d008      	beq.n	100157e4 <__swsetup_r+0x70>
100157d2:	0023      	movs	r3, r4
100157d4:	3344      	adds	r3, #68	; 0x44
100157d6:	4299      	cmp	r1, r3
100157d8:	d002      	beq.n	100157e0 <__swsetup_r+0x6c>
100157da:	0030      	movs	r0, r6
100157dc:	f7ff fd34 	bl	10015248 <_free_r>
100157e0:	2300      	movs	r3, #0
100157e2:	6363      	str	r3, [r4, #52]	; 0x34
100157e4:	2224      	movs	r2, #36	; 0x24
100157e6:	89a3      	ldrh	r3, [r4, #12]
100157e8:	4393      	bics	r3, r2
100157ea:	81a3      	strh	r3, [r4, #12]
100157ec:	2300      	movs	r3, #0
100157ee:	6063      	str	r3, [r4, #4]
100157f0:	6923      	ldr	r3, [r4, #16]
100157f2:	6023      	str	r3, [r4, #0]
100157f4:	2208      	movs	r2, #8
100157f6:	89a3      	ldrh	r3, [r4, #12]
100157f8:	4313      	orrs	r3, r2
100157fa:	81a3      	strh	r3, [r4, #12]
100157fc:	6923      	ldr	r3, [r4, #16]
100157fe:	2b00      	cmp	r3, #0
10015800:	d10b      	bne.n	1001581a <__swsetup_r+0xa6>
10015802:	23a0      	movs	r3, #160	; 0xa0
10015804:	89a2      	ldrh	r2, [r4, #12]
10015806:	009b      	lsls	r3, r3, #2
10015808:	4013      	ands	r3, r2
1001580a:	2280      	movs	r2, #128	; 0x80
1001580c:	0092      	lsls	r2, r2, #2
1001580e:	4293      	cmp	r3, r2
10015810:	d003      	beq.n	1001581a <__swsetup_r+0xa6>
10015812:	0021      	movs	r1, r4
10015814:	0030      	movs	r0, r6
10015816:	f000 f9d1 	bl	10015bbc <__smakebuf_r>
1001581a:	2301      	movs	r3, #1
1001581c:	89a2      	ldrh	r2, [r4, #12]
1001581e:	4013      	ands	r3, r2
10015820:	d005      	beq.n	1001582e <__swsetup_r+0xba>
10015822:	2300      	movs	r3, #0
10015824:	60a3      	str	r3, [r4, #8]
10015826:	6963      	ldr	r3, [r4, #20]
10015828:	425b      	negs	r3, r3
1001582a:	61a3      	str	r3, [r4, #24]
1001582c:	e003      	b.n	10015836 <__swsetup_r+0xc2>
1001582e:	0792      	lsls	r2, r2, #30
10015830:	d400      	bmi.n	10015834 <__swsetup_r+0xc0>
10015832:	6963      	ldr	r3, [r4, #20]
10015834:	60a3      	str	r3, [r4, #8]
10015836:	2000      	movs	r0, #0
10015838:	6923      	ldr	r3, [r4, #16]
1001583a:	4283      	cmp	r3, r0
1001583c:	d107      	bne.n	1001584e <__swsetup_r+0xda>
1001583e:	220c      	movs	r2, #12
10015840:	5ea3      	ldrsh	r3, [r4, r2]
10015842:	061a      	lsls	r2, r3, #24
10015844:	d503      	bpl.n	1001584e <__swsetup_r+0xda>
10015846:	2240      	movs	r2, #64	; 0x40
10015848:	4313      	orrs	r3, r2
1001584a:	81a3      	strh	r3, [r4, #12]
1001584c:	3801      	subs	r0, #1
1001584e:	bd70      	pop	{r4, r5, r6, pc}
10015850:	100186a8 	.word	0x100186a8
10015854:	1001854c 	.word	0x1001854c
10015858:	1001856c 	.word	0x1001856c
1001585c:	1001858c 	.word	0x1001858c

10015860 <__sflush_r>:
10015860:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10015862:	898a      	ldrh	r2, [r1, #12]
10015864:	0005      	movs	r5, r0
10015866:	000c      	movs	r4, r1
10015868:	0713      	lsls	r3, r2, #28
1001586a:	d45a      	bmi.n	10015922 <__sflush_r+0xc2>
1001586c:	684b      	ldr	r3, [r1, #4]
1001586e:	2b00      	cmp	r3, #0
10015870:	dc02      	bgt.n	10015878 <__sflush_r+0x18>
10015872:	6c0b      	ldr	r3, [r1, #64]	; 0x40
10015874:	2b00      	cmp	r3, #0
10015876:	dd19      	ble.n	100158ac <__sflush_r+0x4c>
10015878:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
1001587a:	2f00      	cmp	r7, #0
1001587c:	d016      	beq.n	100158ac <__sflush_r+0x4c>
1001587e:	2300      	movs	r3, #0
10015880:	682e      	ldr	r6, [r5, #0]
10015882:	602b      	str	r3, [r5, #0]
10015884:	2380      	movs	r3, #128	; 0x80
10015886:	015b      	lsls	r3, r3, #5
10015888:	401a      	ands	r2, r3
1001588a:	d001      	beq.n	10015890 <__sflush_r+0x30>
1001588c:	6d60      	ldr	r0, [r4, #84]	; 0x54
1001588e:	e014      	b.n	100158ba <__sflush_r+0x5a>
10015890:	2301      	movs	r3, #1
10015892:	6a21      	ldr	r1, [r4, #32]
10015894:	0028      	movs	r0, r5
10015896:	47b8      	blx	r7
10015898:	1c43      	adds	r3, r0, #1
1001589a:	d10e      	bne.n	100158ba <__sflush_r+0x5a>
1001589c:	682b      	ldr	r3, [r5, #0]
1001589e:	2b00      	cmp	r3, #0
100158a0:	d00b      	beq.n	100158ba <__sflush_r+0x5a>
100158a2:	2b1d      	cmp	r3, #29
100158a4:	d001      	beq.n	100158aa <__sflush_r+0x4a>
100158a6:	2b16      	cmp	r3, #22
100158a8:	d102      	bne.n	100158b0 <__sflush_r+0x50>
100158aa:	602e      	str	r6, [r5, #0]
100158ac:	2000      	movs	r0, #0
100158ae:	e05a      	b.n	10015966 <__sflush_r+0x106>
100158b0:	2240      	movs	r2, #64	; 0x40
100158b2:	89a3      	ldrh	r3, [r4, #12]
100158b4:	4313      	orrs	r3, r2
100158b6:	81a3      	strh	r3, [r4, #12]
100158b8:	e055      	b.n	10015966 <__sflush_r+0x106>
100158ba:	89a3      	ldrh	r3, [r4, #12]
100158bc:	075b      	lsls	r3, r3, #29
100158be:	d506      	bpl.n	100158ce <__sflush_r+0x6e>
100158c0:	6863      	ldr	r3, [r4, #4]
100158c2:	1ac0      	subs	r0, r0, r3
100158c4:	6b63      	ldr	r3, [r4, #52]	; 0x34
100158c6:	2b00      	cmp	r3, #0
100158c8:	d001      	beq.n	100158ce <__sflush_r+0x6e>
100158ca:	6c23      	ldr	r3, [r4, #64]	; 0x40
100158cc:	1ac0      	subs	r0, r0, r3
100158ce:	2300      	movs	r3, #0
100158d0:	0002      	movs	r2, r0
100158d2:	6a21      	ldr	r1, [r4, #32]
100158d4:	0028      	movs	r0, r5
100158d6:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
100158d8:	47b8      	blx	r7
100158da:	89a3      	ldrh	r3, [r4, #12]
100158dc:	1c42      	adds	r2, r0, #1
100158de:	d106      	bne.n	100158ee <__sflush_r+0x8e>
100158e0:	6829      	ldr	r1, [r5, #0]
100158e2:	291d      	cmp	r1, #29
100158e4:	d83a      	bhi.n	1001595c <__sflush_r+0xfc>
100158e6:	4a20      	ldr	r2, [pc, #128]	; (10015968 <__sflush_r+0x108>)
100158e8:	40ca      	lsrs	r2, r1
100158ea:	07d2      	lsls	r2, r2, #31
100158ec:	d536      	bpl.n	1001595c <__sflush_r+0xfc>
100158ee:	2200      	movs	r2, #0
100158f0:	6062      	str	r2, [r4, #4]
100158f2:	6922      	ldr	r2, [r4, #16]
100158f4:	6022      	str	r2, [r4, #0]
100158f6:	04db      	lsls	r3, r3, #19
100158f8:	d505      	bpl.n	10015906 <__sflush_r+0xa6>
100158fa:	1c43      	adds	r3, r0, #1
100158fc:	d102      	bne.n	10015904 <__sflush_r+0xa4>
100158fe:	682b      	ldr	r3, [r5, #0]
10015900:	2b00      	cmp	r3, #0
10015902:	d100      	bne.n	10015906 <__sflush_r+0xa6>
10015904:	6560      	str	r0, [r4, #84]	; 0x54
10015906:	6b61      	ldr	r1, [r4, #52]	; 0x34
10015908:	602e      	str	r6, [r5, #0]
1001590a:	2900      	cmp	r1, #0
1001590c:	d0ce      	beq.n	100158ac <__sflush_r+0x4c>
1001590e:	0023      	movs	r3, r4
10015910:	3344      	adds	r3, #68	; 0x44
10015912:	4299      	cmp	r1, r3
10015914:	d002      	beq.n	1001591c <__sflush_r+0xbc>
10015916:	0028      	movs	r0, r5
10015918:	f7ff fc96 	bl	10015248 <_free_r>
1001591c:	2000      	movs	r0, #0
1001591e:	6360      	str	r0, [r4, #52]	; 0x34
10015920:	e021      	b.n	10015966 <__sflush_r+0x106>
10015922:	690f      	ldr	r7, [r1, #16]
10015924:	2f00      	cmp	r7, #0
10015926:	d0c1      	beq.n	100158ac <__sflush_r+0x4c>
10015928:	680b      	ldr	r3, [r1, #0]
1001592a:	600f      	str	r7, [r1, #0]
1001592c:	1bdb      	subs	r3, r3, r7
1001592e:	9301      	str	r3, [sp, #4]
10015930:	2300      	movs	r3, #0
10015932:	0792      	lsls	r2, r2, #30
10015934:	d100      	bne.n	10015938 <__sflush_r+0xd8>
10015936:	694b      	ldr	r3, [r1, #20]
10015938:	60a3      	str	r3, [r4, #8]
1001593a:	e003      	b.n	10015944 <__sflush_r+0xe4>
1001593c:	9b01      	ldr	r3, [sp, #4]
1001593e:	183f      	adds	r7, r7, r0
10015940:	1a1b      	subs	r3, r3, r0
10015942:	9301      	str	r3, [sp, #4]
10015944:	9b01      	ldr	r3, [sp, #4]
10015946:	2b00      	cmp	r3, #0
10015948:	ddb0      	ble.n	100158ac <__sflush_r+0x4c>
1001594a:	9b01      	ldr	r3, [sp, #4]
1001594c:	003a      	movs	r2, r7
1001594e:	6a21      	ldr	r1, [r4, #32]
10015950:	0028      	movs	r0, r5
10015952:	6aa6      	ldr	r6, [r4, #40]	; 0x28
10015954:	47b0      	blx	r6
10015956:	2800      	cmp	r0, #0
10015958:	dcf0      	bgt.n	1001593c <__sflush_r+0xdc>
1001595a:	89a3      	ldrh	r3, [r4, #12]
1001595c:	2240      	movs	r2, #64	; 0x40
1001595e:	2001      	movs	r0, #1
10015960:	4313      	orrs	r3, r2
10015962:	81a3      	strh	r3, [r4, #12]
10015964:	4240      	negs	r0, r0
10015966:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10015968:	20400001 	.word	0x20400001

1001596c <_fflush_r>:
1001596c:	690b      	ldr	r3, [r1, #16]
1001596e:	b570      	push	{r4, r5, r6, lr}
10015970:	0005      	movs	r5, r0
10015972:	000c      	movs	r4, r1
10015974:	2b00      	cmp	r3, #0
10015976:	d101      	bne.n	1001597c <_fflush_r+0x10>
10015978:	2000      	movs	r0, #0
1001597a:	e01c      	b.n	100159b6 <_fflush_r+0x4a>
1001597c:	2800      	cmp	r0, #0
1001597e:	d004      	beq.n	1001598a <_fflush_r+0x1e>
10015980:	6983      	ldr	r3, [r0, #24]
10015982:	2b00      	cmp	r3, #0
10015984:	d101      	bne.n	1001598a <_fflush_r+0x1e>
10015986:	f000 f85f 	bl	10015a48 <__sinit>
1001598a:	4b0b      	ldr	r3, [pc, #44]	; (100159b8 <_fflush_r+0x4c>)
1001598c:	429c      	cmp	r4, r3
1001598e:	d101      	bne.n	10015994 <_fflush_r+0x28>
10015990:	686c      	ldr	r4, [r5, #4]
10015992:	e008      	b.n	100159a6 <_fflush_r+0x3a>
10015994:	4b09      	ldr	r3, [pc, #36]	; (100159bc <_fflush_r+0x50>)
10015996:	429c      	cmp	r4, r3
10015998:	d101      	bne.n	1001599e <_fflush_r+0x32>
1001599a:	68ac      	ldr	r4, [r5, #8]
1001599c:	e003      	b.n	100159a6 <_fflush_r+0x3a>
1001599e:	4b08      	ldr	r3, [pc, #32]	; (100159c0 <_fflush_r+0x54>)
100159a0:	429c      	cmp	r4, r3
100159a2:	d100      	bne.n	100159a6 <_fflush_r+0x3a>
100159a4:	68ec      	ldr	r4, [r5, #12]
100159a6:	220c      	movs	r2, #12
100159a8:	5ea3      	ldrsh	r3, [r4, r2]
100159aa:	2b00      	cmp	r3, #0
100159ac:	d0e4      	beq.n	10015978 <_fflush_r+0xc>
100159ae:	0021      	movs	r1, r4
100159b0:	0028      	movs	r0, r5
100159b2:	f7ff ff55 	bl	10015860 <__sflush_r>
100159b6:	bd70      	pop	{r4, r5, r6, pc}
100159b8:	1001854c 	.word	0x1001854c
100159bc:	1001856c 	.word	0x1001856c
100159c0:	1001858c 	.word	0x1001858c

100159c4 <_cleanup_r>:
100159c4:	b510      	push	{r4, lr}
100159c6:	4902      	ldr	r1, [pc, #8]	; (100159d0 <_cleanup_r+0xc>)
100159c8:	f000 f8b0 	bl	10015b2c <_fwalk_reent>
100159cc:	bd10      	pop	{r4, pc}
100159ce:	46c0      	nop			; (mov r8, r8)
100159d0:	1001596d 	.word	0x1001596d

100159d4 <std.isra.0>:
100159d4:	2300      	movs	r3, #0
100159d6:	b510      	push	{r4, lr}
100159d8:	0004      	movs	r4, r0
100159da:	6003      	str	r3, [r0, #0]
100159dc:	6043      	str	r3, [r0, #4]
100159de:	6083      	str	r3, [r0, #8]
100159e0:	8181      	strh	r1, [r0, #12]
100159e2:	6643      	str	r3, [r0, #100]	; 0x64
100159e4:	81c2      	strh	r2, [r0, #14]
100159e6:	6103      	str	r3, [r0, #16]
100159e8:	6143      	str	r3, [r0, #20]
100159ea:	6183      	str	r3, [r0, #24]
100159ec:	0019      	movs	r1, r3
100159ee:	2208      	movs	r2, #8
100159f0:	305c      	adds	r0, #92	; 0x5c
100159f2:	f7ff fc21 	bl	10015238 <memset>
100159f6:	4b05      	ldr	r3, [pc, #20]	; (10015a0c <std.isra.0+0x38>)
100159f8:	6224      	str	r4, [r4, #32]
100159fa:	6263      	str	r3, [r4, #36]	; 0x24
100159fc:	4b04      	ldr	r3, [pc, #16]	; (10015a10 <std.isra.0+0x3c>)
100159fe:	62a3      	str	r3, [r4, #40]	; 0x28
10015a00:	4b04      	ldr	r3, [pc, #16]	; (10015a14 <std.isra.0+0x40>)
10015a02:	62e3      	str	r3, [r4, #44]	; 0x2c
10015a04:	4b04      	ldr	r3, [pc, #16]	; (10015a18 <std.isra.0+0x44>)
10015a06:	6323      	str	r3, [r4, #48]	; 0x30
10015a08:	bd10      	pop	{r4, pc}
10015a0a:	46c0      	nop			; (mov r8, r8)
10015a0c:	1001624d 	.word	0x1001624d
10015a10:	10016275 	.word	0x10016275
10015a14:	100162ad 	.word	0x100162ad
10015a18:	100162d9 	.word	0x100162d9

10015a1c <__sfmoreglue>:
10015a1c:	b570      	push	{r4, r5, r6, lr}
10015a1e:	2568      	movs	r5, #104	; 0x68
10015a20:	1e4b      	subs	r3, r1, #1
10015a22:	435d      	muls	r5, r3
10015a24:	000e      	movs	r6, r1
10015a26:	0029      	movs	r1, r5
10015a28:	3174      	adds	r1, #116	; 0x74
10015a2a:	f7ff fc53 	bl	100152d4 <_malloc_r>
10015a2e:	1e04      	subs	r4, r0, #0
10015a30:	d008      	beq.n	10015a44 <__sfmoreglue+0x28>
10015a32:	2100      	movs	r1, #0
10015a34:	002a      	movs	r2, r5
10015a36:	6001      	str	r1, [r0, #0]
10015a38:	6046      	str	r6, [r0, #4]
10015a3a:	300c      	adds	r0, #12
10015a3c:	60a0      	str	r0, [r4, #8]
10015a3e:	3268      	adds	r2, #104	; 0x68
10015a40:	f7ff fbfa 	bl	10015238 <memset>
10015a44:	0020      	movs	r0, r4
10015a46:	bd70      	pop	{r4, r5, r6, pc}

10015a48 <__sinit>:
10015a48:	6983      	ldr	r3, [r0, #24]
10015a4a:	b513      	push	{r0, r1, r4, lr}
10015a4c:	0004      	movs	r4, r0
10015a4e:	2b00      	cmp	r3, #0
10015a50:	d128      	bne.n	10015aa4 <__sinit+0x5c>
10015a52:	6483      	str	r3, [r0, #72]	; 0x48
10015a54:	64c3      	str	r3, [r0, #76]	; 0x4c
10015a56:	6503      	str	r3, [r0, #80]	; 0x50
10015a58:	4b13      	ldr	r3, [pc, #76]	; (10015aa8 <__sinit+0x60>)
10015a5a:	4a14      	ldr	r2, [pc, #80]	; (10015aac <__sinit+0x64>)
10015a5c:	681b      	ldr	r3, [r3, #0]
10015a5e:	6282      	str	r2, [r0, #40]	; 0x28
10015a60:	9301      	str	r3, [sp, #4]
10015a62:	4298      	cmp	r0, r3
10015a64:	d101      	bne.n	10015a6a <__sinit+0x22>
10015a66:	2301      	movs	r3, #1
10015a68:	6183      	str	r3, [r0, #24]
10015a6a:	0020      	movs	r0, r4
10015a6c:	f000 f820 	bl	10015ab0 <__sfp>
10015a70:	6060      	str	r0, [r4, #4]
10015a72:	0020      	movs	r0, r4
10015a74:	f000 f81c 	bl	10015ab0 <__sfp>
10015a78:	60a0      	str	r0, [r4, #8]
10015a7a:	0020      	movs	r0, r4
10015a7c:	f000 f818 	bl	10015ab0 <__sfp>
10015a80:	2200      	movs	r2, #0
10015a82:	60e0      	str	r0, [r4, #12]
10015a84:	2104      	movs	r1, #4
10015a86:	6860      	ldr	r0, [r4, #4]
10015a88:	f7ff ffa4 	bl	100159d4 <std.isra.0>
10015a8c:	2201      	movs	r2, #1
10015a8e:	2109      	movs	r1, #9
10015a90:	68a0      	ldr	r0, [r4, #8]
10015a92:	f7ff ff9f 	bl	100159d4 <std.isra.0>
10015a96:	2202      	movs	r2, #2
10015a98:	2112      	movs	r1, #18
10015a9a:	68e0      	ldr	r0, [r4, #12]
10015a9c:	f7ff ff9a 	bl	100159d4 <std.isra.0>
10015aa0:	2301      	movs	r3, #1
10015aa2:	61a3      	str	r3, [r4, #24]
10015aa4:	bd13      	pop	{r0, r1, r4, pc}
10015aa6:	46c0      	nop			; (mov r8, r8)
10015aa8:	10018548 	.word	0x10018548
10015aac:	100159c5 	.word	0x100159c5

10015ab0 <__sfp>:
10015ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10015ab2:	4b1d      	ldr	r3, [pc, #116]	; (10015b28 <__sfp+0x78>)
10015ab4:	0006      	movs	r6, r0
10015ab6:	681d      	ldr	r5, [r3, #0]
10015ab8:	69ab      	ldr	r3, [r5, #24]
10015aba:	2b00      	cmp	r3, #0
10015abc:	d102      	bne.n	10015ac4 <__sfp+0x14>
10015abe:	0028      	movs	r0, r5
10015ac0:	f7ff ffc2 	bl	10015a48 <__sinit>
10015ac4:	3548      	adds	r5, #72	; 0x48
10015ac6:	68ac      	ldr	r4, [r5, #8]
10015ac8:	686b      	ldr	r3, [r5, #4]
10015aca:	3b01      	subs	r3, #1
10015acc:	d405      	bmi.n	10015ada <__sfp+0x2a>
10015ace:	220c      	movs	r2, #12
10015ad0:	5ea7      	ldrsh	r7, [r4, r2]
10015ad2:	2f00      	cmp	r7, #0
10015ad4:	d010      	beq.n	10015af8 <__sfp+0x48>
10015ad6:	3468      	adds	r4, #104	; 0x68
10015ad8:	e7f7      	b.n	10015aca <__sfp+0x1a>
10015ada:	682b      	ldr	r3, [r5, #0]
10015adc:	2b00      	cmp	r3, #0
10015ade:	d001      	beq.n	10015ae4 <__sfp+0x34>
10015ae0:	682d      	ldr	r5, [r5, #0]
10015ae2:	e7f0      	b.n	10015ac6 <__sfp+0x16>
10015ae4:	2104      	movs	r1, #4
10015ae6:	0030      	movs	r0, r6
10015ae8:	f7ff ff98 	bl	10015a1c <__sfmoreglue>
10015aec:	6028      	str	r0, [r5, #0]
10015aee:	2800      	cmp	r0, #0
10015af0:	d1f6      	bne.n	10015ae0 <__sfp+0x30>
10015af2:	230c      	movs	r3, #12
10015af4:	6033      	str	r3, [r6, #0]
10015af6:	e016      	b.n	10015b26 <__sfp+0x76>
10015af8:	2301      	movs	r3, #1
10015afa:	0020      	movs	r0, r4
10015afc:	425b      	negs	r3, r3
10015afe:	81e3      	strh	r3, [r4, #14]
10015b00:	3302      	adds	r3, #2
10015b02:	81a3      	strh	r3, [r4, #12]
10015b04:	6667      	str	r7, [r4, #100]	; 0x64
10015b06:	6027      	str	r7, [r4, #0]
10015b08:	60a7      	str	r7, [r4, #8]
10015b0a:	6067      	str	r7, [r4, #4]
10015b0c:	6127      	str	r7, [r4, #16]
10015b0e:	6167      	str	r7, [r4, #20]
10015b10:	61a7      	str	r7, [r4, #24]
10015b12:	305c      	adds	r0, #92	; 0x5c
10015b14:	2208      	movs	r2, #8
10015b16:	0039      	movs	r1, r7
10015b18:	f7ff fb8e 	bl	10015238 <memset>
10015b1c:	0020      	movs	r0, r4
10015b1e:	6367      	str	r7, [r4, #52]	; 0x34
10015b20:	63a7      	str	r7, [r4, #56]	; 0x38
10015b22:	64a7      	str	r7, [r4, #72]	; 0x48
10015b24:	64e7      	str	r7, [r4, #76]	; 0x4c
10015b26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10015b28:	10018548 	.word	0x10018548

10015b2c <_fwalk_reent>:
10015b2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10015b2e:	0004      	movs	r4, r0
10015b30:	0007      	movs	r7, r0
10015b32:	2600      	movs	r6, #0
10015b34:	9101      	str	r1, [sp, #4]
10015b36:	3448      	adds	r4, #72	; 0x48
10015b38:	2c00      	cmp	r4, #0
10015b3a:	d016      	beq.n	10015b6a <_fwalk_reent+0x3e>
10015b3c:	6863      	ldr	r3, [r4, #4]
10015b3e:	68a5      	ldr	r5, [r4, #8]
10015b40:	9300      	str	r3, [sp, #0]
10015b42:	9b00      	ldr	r3, [sp, #0]
10015b44:	3b01      	subs	r3, #1
10015b46:	9300      	str	r3, [sp, #0]
10015b48:	d40d      	bmi.n	10015b66 <_fwalk_reent+0x3a>
10015b4a:	89ab      	ldrh	r3, [r5, #12]
10015b4c:	2b01      	cmp	r3, #1
10015b4e:	d908      	bls.n	10015b62 <_fwalk_reent+0x36>
10015b50:	220e      	movs	r2, #14
10015b52:	5eab      	ldrsh	r3, [r5, r2]
10015b54:	3301      	adds	r3, #1
10015b56:	d004      	beq.n	10015b62 <_fwalk_reent+0x36>
10015b58:	0029      	movs	r1, r5
10015b5a:	0038      	movs	r0, r7
10015b5c:	9b01      	ldr	r3, [sp, #4]
10015b5e:	4798      	blx	r3
10015b60:	4306      	orrs	r6, r0
10015b62:	3568      	adds	r5, #104	; 0x68
10015b64:	e7ed      	b.n	10015b42 <_fwalk_reent+0x16>
10015b66:	6824      	ldr	r4, [r4, #0]
10015b68:	e7e6      	b.n	10015b38 <_fwalk_reent+0xc>
10015b6a:	0030      	movs	r0, r6
10015b6c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

10015b70 <__swhatbuf_r>:
10015b70:	b570      	push	{r4, r5, r6, lr}
10015b72:	000e      	movs	r6, r1
10015b74:	001d      	movs	r5, r3
10015b76:	230e      	movs	r3, #14
10015b78:	5ec9      	ldrsh	r1, [r1, r3]
10015b7a:	b090      	sub	sp, #64	; 0x40
10015b7c:	0014      	movs	r4, r2
10015b7e:	2900      	cmp	r1, #0
10015b80:	da06      	bge.n	10015b90 <__swhatbuf_r+0x20>
10015b82:	2300      	movs	r3, #0
10015b84:	602b      	str	r3, [r5, #0]
10015b86:	89b3      	ldrh	r3, [r6, #12]
10015b88:	061b      	lsls	r3, r3, #24
10015b8a:	d50f      	bpl.n	10015bac <__swhatbuf_r+0x3c>
10015b8c:	2340      	movs	r3, #64	; 0x40
10015b8e:	e00f      	b.n	10015bb0 <__swhatbuf_r+0x40>
10015b90:	aa01      	add	r2, sp, #4
10015b92:	f000 fbcd 	bl	10016330 <_fstat_r>
10015b96:	2800      	cmp	r0, #0
10015b98:	dbf3      	blt.n	10015b82 <__swhatbuf_r+0x12>
10015b9a:	23f0      	movs	r3, #240	; 0xf0
10015b9c:	9a02      	ldr	r2, [sp, #8]
10015b9e:	021b      	lsls	r3, r3, #8
10015ba0:	4013      	ands	r3, r2
10015ba2:	4a05      	ldr	r2, [pc, #20]	; (10015bb8 <__swhatbuf_r+0x48>)
10015ba4:	189b      	adds	r3, r3, r2
10015ba6:	425a      	negs	r2, r3
10015ba8:	4153      	adcs	r3, r2
10015baa:	602b      	str	r3, [r5, #0]
10015bac:	2380      	movs	r3, #128	; 0x80
10015bae:	00db      	lsls	r3, r3, #3
10015bb0:	2000      	movs	r0, #0
10015bb2:	6023      	str	r3, [r4, #0]
10015bb4:	b010      	add	sp, #64	; 0x40
10015bb6:	bd70      	pop	{r4, r5, r6, pc}
10015bb8:	ffffe000 	.word	0xffffe000

10015bbc <__smakebuf_r>:
10015bbc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10015bbe:	2602      	movs	r6, #2
10015bc0:	898b      	ldrh	r3, [r1, #12]
10015bc2:	0005      	movs	r5, r0
10015bc4:	000c      	movs	r4, r1
10015bc6:	4233      	tst	r3, r6
10015bc8:	d110      	bne.n	10015bec <__smakebuf_r+0x30>
10015bca:	ab01      	add	r3, sp, #4
10015bcc:	466a      	mov	r2, sp
10015bce:	f7ff ffcf 	bl	10015b70 <__swhatbuf_r>
10015bd2:	9900      	ldr	r1, [sp, #0]
10015bd4:	0007      	movs	r7, r0
10015bd6:	0028      	movs	r0, r5
10015bd8:	f7ff fb7c 	bl	100152d4 <_malloc_r>
10015bdc:	2800      	cmp	r0, #0
10015bde:	d10c      	bne.n	10015bfa <__smakebuf_r+0x3e>
10015be0:	220c      	movs	r2, #12
10015be2:	5ea3      	ldrsh	r3, [r4, r2]
10015be4:	059a      	lsls	r2, r3, #22
10015be6:	d423      	bmi.n	10015c30 <__smakebuf_r+0x74>
10015be8:	4333      	orrs	r3, r6
10015bea:	81a3      	strh	r3, [r4, #12]
10015bec:	0023      	movs	r3, r4
10015bee:	3347      	adds	r3, #71	; 0x47
10015bf0:	6023      	str	r3, [r4, #0]
10015bf2:	6123      	str	r3, [r4, #16]
10015bf4:	2301      	movs	r3, #1
10015bf6:	6163      	str	r3, [r4, #20]
10015bf8:	e01a      	b.n	10015c30 <__smakebuf_r+0x74>
10015bfa:	2280      	movs	r2, #128	; 0x80
10015bfc:	4b0d      	ldr	r3, [pc, #52]	; (10015c34 <__smakebuf_r+0x78>)
10015bfe:	62ab      	str	r3, [r5, #40]	; 0x28
10015c00:	89a3      	ldrh	r3, [r4, #12]
10015c02:	6020      	str	r0, [r4, #0]
10015c04:	4313      	orrs	r3, r2
10015c06:	81a3      	strh	r3, [r4, #12]
10015c08:	9b00      	ldr	r3, [sp, #0]
10015c0a:	6120      	str	r0, [r4, #16]
10015c0c:	6163      	str	r3, [r4, #20]
10015c0e:	9b01      	ldr	r3, [sp, #4]
10015c10:	2b00      	cmp	r3, #0
10015c12:	d00a      	beq.n	10015c2a <__smakebuf_r+0x6e>
10015c14:	230e      	movs	r3, #14
10015c16:	5ee1      	ldrsh	r1, [r4, r3]
10015c18:	0028      	movs	r0, r5
10015c1a:	f000 fb9b 	bl	10016354 <_isatty_r>
10015c1e:	2800      	cmp	r0, #0
10015c20:	d003      	beq.n	10015c2a <__smakebuf_r+0x6e>
10015c22:	2201      	movs	r2, #1
10015c24:	89a3      	ldrh	r3, [r4, #12]
10015c26:	4313      	orrs	r3, r2
10015c28:	81a3      	strh	r3, [r4, #12]
10015c2a:	89a3      	ldrh	r3, [r4, #12]
10015c2c:	431f      	orrs	r7, r3
10015c2e:	81a7      	strh	r7, [r4, #12]
10015c30:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
10015c32:	46c0      	nop			; (mov r8, r8)
10015c34:	100159c5 	.word	0x100159c5

10015c38 <__sfputc_r>:
10015c38:	6893      	ldr	r3, [r2, #8]
10015c3a:	b510      	push	{r4, lr}
10015c3c:	3b01      	subs	r3, #1
10015c3e:	6093      	str	r3, [r2, #8]
10015c40:	2b00      	cmp	r3, #0
10015c42:	da05      	bge.n	10015c50 <__sfputc_r+0x18>
10015c44:	6994      	ldr	r4, [r2, #24]
10015c46:	42a3      	cmp	r3, r4
10015c48:	db08      	blt.n	10015c5c <__sfputc_r+0x24>
10015c4a:	b2cb      	uxtb	r3, r1
10015c4c:	2b0a      	cmp	r3, #10
10015c4e:	d005      	beq.n	10015c5c <__sfputc_r+0x24>
10015c50:	6813      	ldr	r3, [r2, #0]
10015c52:	1c58      	adds	r0, r3, #1
10015c54:	6010      	str	r0, [r2, #0]
10015c56:	7019      	strb	r1, [r3, #0]
10015c58:	b2c8      	uxtb	r0, r1
10015c5a:	e001      	b.n	10015c60 <__sfputc_r+0x28>
10015c5c:	f7ff fd32 	bl	100156c4 <__swbuf_r>
10015c60:	bd10      	pop	{r4, pc}

10015c62 <__sfputs_r>:
10015c62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10015c64:	0006      	movs	r6, r0
10015c66:	000f      	movs	r7, r1
10015c68:	0014      	movs	r4, r2
10015c6a:	18d5      	adds	r5, r2, r3
10015c6c:	42ac      	cmp	r4, r5
10015c6e:	d008      	beq.n	10015c82 <__sfputs_r+0x20>
10015c70:	7821      	ldrb	r1, [r4, #0]
10015c72:	003a      	movs	r2, r7
10015c74:	0030      	movs	r0, r6
10015c76:	f7ff ffdf 	bl	10015c38 <__sfputc_r>
10015c7a:	3401      	adds	r4, #1
10015c7c:	1c43      	adds	r3, r0, #1
10015c7e:	d1f5      	bne.n	10015c6c <__sfputs_r+0xa>
10015c80:	e000      	b.n	10015c84 <__sfputs_r+0x22>
10015c82:	2000      	movs	r0, #0
10015c84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

10015c88 <_vfiprintf_r>:
10015c88:	b5f0      	push	{r4, r5, r6, r7, lr}
10015c8a:	b09f      	sub	sp, #124	; 0x7c
10015c8c:	0006      	movs	r6, r0
10015c8e:	000f      	movs	r7, r1
10015c90:	9202      	str	r2, [sp, #8]
10015c92:	9305      	str	r3, [sp, #20]
10015c94:	2800      	cmp	r0, #0
10015c96:	d004      	beq.n	10015ca2 <_vfiprintf_r+0x1a>
10015c98:	6983      	ldr	r3, [r0, #24]
10015c9a:	2b00      	cmp	r3, #0
10015c9c:	d101      	bne.n	10015ca2 <_vfiprintf_r+0x1a>
10015c9e:	f7ff fed3 	bl	10015a48 <__sinit>
10015ca2:	4b7f      	ldr	r3, [pc, #508]	; (10015ea0 <_vfiprintf_r+0x218>)
10015ca4:	429f      	cmp	r7, r3
10015ca6:	d101      	bne.n	10015cac <_vfiprintf_r+0x24>
10015ca8:	6877      	ldr	r7, [r6, #4]
10015caa:	e008      	b.n	10015cbe <_vfiprintf_r+0x36>
10015cac:	4b7d      	ldr	r3, [pc, #500]	; (10015ea4 <_vfiprintf_r+0x21c>)
10015cae:	429f      	cmp	r7, r3
10015cb0:	d101      	bne.n	10015cb6 <_vfiprintf_r+0x2e>
10015cb2:	68b7      	ldr	r7, [r6, #8]
10015cb4:	e003      	b.n	10015cbe <_vfiprintf_r+0x36>
10015cb6:	4b7c      	ldr	r3, [pc, #496]	; (10015ea8 <_vfiprintf_r+0x220>)
10015cb8:	429f      	cmp	r7, r3
10015cba:	d100      	bne.n	10015cbe <_vfiprintf_r+0x36>
10015cbc:	68f7      	ldr	r7, [r6, #12]
10015cbe:	89bb      	ldrh	r3, [r7, #12]
10015cc0:	071b      	lsls	r3, r3, #28
10015cc2:	d50a      	bpl.n	10015cda <_vfiprintf_r+0x52>
10015cc4:	693b      	ldr	r3, [r7, #16]
10015cc6:	2b00      	cmp	r3, #0
10015cc8:	d007      	beq.n	10015cda <_vfiprintf_r+0x52>
10015cca:	2300      	movs	r3, #0
10015ccc:	ad06      	add	r5, sp, #24
10015cce:	616b      	str	r3, [r5, #20]
10015cd0:	3320      	adds	r3, #32
10015cd2:	766b      	strb	r3, [r5, #25]
10015cd4:	3310      	adds	r3, #16
10015cd6:	76ab      	strb	r3, [r5, #26]
10015cd8:	e03d      	b.n	10015d56 <_vfiprintf_r+0xce>
10015cda:	0039      	movs	r1, r7
10015cdc:	0030      	movs	r0, r6
10015cde:	f7ff fd49 	bl	10015774 <__swsetup_r>
10015ce2:	2800      	cmp	r0, #0
10015ce4:	d0f1      	beq.n	10015cca <_vfiprintf_r+0x42>
10015ce6:	2001      	movs	r0, #1
10015ce8:	4240      	negs	r0, r0
10015cea:	e0d6      	b.n	10015e9a <_vfiprintf_r+0x212>
10015cec:	9a05      	ldr	r2, [sp, #20]
10015cee:	1d11      	adds	r1, r2, #4
10015cf0:	6812      	ldr	r2, [r2, #0]
10015cf2:	9105      	str	r1, [sp, #20]
10015cf4:	2a00      	cmp	r2, #0
10015cf6:	da00      	bge.n	10015cfa <_vfiprintf_r+0x72>
10015cf8:	e07f      	b.n	10015dfa <_vfiprintf_r+0x172>
10015cfa:	9209      	str	r2, [sp, #36]	; 0x24
10015cfc:	3401      	adds	r4, #1
10015cfe:	7823      	ldrb	r3, [r4, #0]
10015d00:	2b2e      	cmp	r3, #46	; 0x2e
10015d02:	d100      	bne.n	10015d06 <_vfiprintf_r+0x7e>
10015d04:	e08d      	b.n	10015e22 <_vfiprintf_r+0x19a>
10015d06:	7821      	ldrb	r1, [r4, #0]
10015d08:	2203      	movs	r2, #3
10015d0a:	4868      	ldr	r0, [pc, #416]	; (10015eac <_vfiprintf_r+0x224>)
10015d0c:	f000 fb48 	bl	100163a0 <memchr>
10015d10:	2800      	cmp	r0, #0
10015d12:	d007      	beq.n	10015d24 <_vfiprintf_r+0x9c>
10015d14:	4b65      	ldr	r3, [pc, #404]	; (10015eac <_vfiprintf_r+0x224>)
10015d16:	682a      	ldr	r2, [r5, #0]
10015d18:	1ac0      	subs	r0, r0, r3
10015d1a:	2340      	movs	r3, #64	; 0x40
10015d1c:	4083      	lsls	r3, r0
10015d1e:	4313      	orrs	r3, r2
10015d20:	602b      	str	r3, [r5, #0]
10015d22:	3401      	adds	r4, #1
10015d24:	7821      	ldrb	r1, [r4, #0]
10015d26:	1c63      	adds	r3, r4, #1
10015d28:	2206      	movs	r2, #6
10015d2a:	4861      	ldr	r0, [pc, #388]	; (10015eb0 <_vfiprintf_r+0x228>)
10015d2c:	9302      	str	r3, [sp, #8]
10015d2e:	7629      	strb	r1, [r5, #24]
10015d30:	f000 fb36 	bl	100163a0 <memchr>
10015d34:	2800      	cmp	r0, #0
10015d36:	d100      	bne.n	10015d3a <_vfiprintf_r+0xb2>
10015d38:	e09d      	b.n	10015e76 <_vfiprintf_r+0x1ee>
10015d3a:	4b5e      	ldr	r3, [pc, #376]	; (10015eb4 <_vfiprintf_r+0x22c>)
10015d3c:	2b00      	cmp	r3, #0
10015d3e:	d000      	beq.n	10015d42 <_vfiprintf_r+0xba>
10015d40:	e090      	b.n	10015e64 <_vfiprintf_r+0x1dc>
10015d42:	2207      	movs	r2, #7
10015d44:	9b05      	ldr	r3, [sp, #20]
10015d46:	3307      	adds	r3, #7
10015d48:	4393      	bics	r3, r2
10015d4a:	3308      	adds	r3, #8
10015d4c:	9305      	str	r3, [sp, #20]
10015d4e:	696b      	ldr	r3, [r5, #20]
10015d50:	9a03      	ldr	r2, [sp, #12]
10015d52:	189b      	adds	r3, r3, r2
10015d54:	616b      	str	r3, [r5, #20]
10015d56:	9c02      	ldr	r4, [sp, #8]
10015d58:	7823      	ldrb	r3, [r4, #0]
10015d5a:	2b00      	cmp	r3, #0
10015d5c:	d104      	bne.n	10015d68 <_vfiprintf_r+0xe0>
10015d5e:	9b02      	ldr	r3, [sp, #8]
10015d60:	1ae3      	subs	r3, r4, r3
10015d62:	9304      	str	r3, [sp, #16]
10015d64:	d012      	beq.n	10015d8c <_vfiprintf_r+0x104>
10015d66:	e003      	b.n	10015d70 <_vfiprintf_r+0xe8>
10015d68:	2b25      	cmp	r3, #37	; 0x25
10015d6a:	d0f8      	beq.n	10015d5e <_vfiprintf_r+0xd6>
10015d6c:	3401      	adds	r4, #1
10015d6e:	e7f3      	b.n	10015d58 <_vfiprintf_r+0xd0>
10015d70:	9b04      	ldr	r3, [sp, #16]
10015d72:	9a02      	ldr	r2, [sp, #8]
10015d74:	0039      	movs	r1, r7
10015d76:	0030      	movs	r0, r6
10015d78:	f7ff ff73 	bl	10015c62 <__sfputs_r>
10015d7c:	1c43      	adds	r3, r0, #1
10015d7e:	d100      	bne.n	10015d82 <_vfiprintf_r+0xfa>
10015d80:	e086      	b.n	10015e90 <_vfiprintf_r+0x208>
10015d82:	696a      	ldr	r2, [r5, #20]
10015d84:	9b04      	ldr	r3, [sp, #16]
10015d86:	4694      	mov	ip, r2
10015d88:	4463      	add	r3, ip
10015d8a:	616b      	str	r3, [r5, #20]
10015d8c:	7823      	ldrb	r3, [r4, #0]
10015d8e:	2b00      	cmp	r3, #0
10015d90:	d07e      	beq.n	10015e90 <_vfiprintf_r+0x208>
10015d92:	2201      	movs	r2, #1
10015d94:	2300      	movs	r3, #0
10015d96:	4252      	negs	r2, r2
10015d98:	606a      	str	r2, [r5, #4]
10015d9a:	a902      	add	r1, sp, #8
10015d9c:	3254      	adds	r2, #84	; 0x54
10015d9e:	1852      	adds	r2, r2, r1
10015da0:	3401      	adds	r4, #1
10015da2:	602b      	str	r3, [r5, #0]
10015da4:	60eb      	str	r3, [r5, #12]
10015da6:	60ab      	str	r3, [r5, #8]
10015da8:	7013      	strb	r3, [r2, #0]
10015daa:	65ab      	str	r3, [r5, #88]	; 0x58
10015dac:	7821      	ldrb	r1, [r4, #0]
10015dae:	2205      	movs	r2, #5
10015db0:	4841      	ldr	r0, [pc, #260]	; (10015eb8 <_vfiprintf_r+0x230>)
10015db2:	f000 faf5 	bl	100163a0 <memchr>
10015db6:	2800      	cmp	r0, #0
10015db8:	d008      	beq.n	10015dcc <_vfiprintf_r+0x144>
10015dba:	4b3f      	ldr	r3, [pc, #252]	; (10015eb8 <_vfiprintf_r+0x230>)
10015dbc:	682a      	ldr	r2, [r5, #0]
10015dbe:	1ac0      	subs	r0, r0, r3
10015dc0:	2301      	movs	r3, #1
10015dc2:	4083      	lsls	r3, r0
10015dc4:	4313      	orrs	r3, r2
10015dc6:	602b      	str	r3, [r5, #0]
10015dc8:	3401      	adds	r4, #1
10015dca:	e7ef      	b.n	10015dac <_vfiprintf_r+0x124>
10015dcc:	682b      	ldr	r3, [r5, #0]
10015dce:	06da      	lsls	r2, r3, #27
10015dd0:	d504      	bpl.n	10015ddc <_vfiprintf_r+0x154>
10015dd2:	2253      	movs	r2, #83	; 0x53
10015dd4:	2120      	movs	r1, #32
10015dd6:	a802      	add	r0, sp, #8
10015dd8:	1812      	adds	r2, r2, r0
10015dda:	7011      	strb	r1, [r2, #0]
10015ddc:	071a      	lsls	r2, r3, #28
10015dde:	d504      	bpl.n	10015dea <_vfiprintf_r+0x162>
10015de0:	2253      	movs	r2, #83	; 0x53
10015de2:	212b      	movs	r1, #43	; 0x2b
10015de4:	a802      	add	r0, sp, #8
10015de6:	1812      	adds	r2, r2, r0
10015de8:	7011      	strb	r1, [r2, #0]
10015dea:	7822      	ldrb	r2, [r4, #0]
10015dec:	2a2a      	cmp	r2, #42	; 0x2a
10015dee:	d100      	bne.n	10015df2 <_vfiprintf_r+0x16a>
10015df0:	e77c      	b.n	10015cec <_vfiprintf_r+0x64>
10015df2:	9b09      	ldr	r3, [sp, #36]	; 0x24
10015df4:	2000      	movs	r0, #0
10015df6:	210a      	movs	r1, #10
10015df8:	e005      	b.n	10015e06 <_vfiprintf_r+0x17e>
10015dfa:	4252      	negs	r2, r2
10015dfc:	60ea      	str	r2, [r5, #12]
10015dfe:	2202      	movs	r2, #2
10015e00:	4313      	orrs	r3, r2
10015e02:	602b      	str	r3, [r5, #0]
10015e04:	e77a      	b.n	10015cfc <_vfiprintf_r+0x74>
10015e06:	7822      	ldrb	r2, [r4, #0]
10015e08:	3a30      	subs	r2, #48	; 0x30
10015e0a:	2a09      	cmp	r2, #9
10015e0c:	d804      	bhi.n	10015e18 <_vfiprintf_r+0x190>
10015e0e:	434b      	muls	r3, r1
10015e10:	3401      	adds	r4, #1
10015e12:	189b      	adds	r3, r3, r2
10015e14:	2001      	movs	r0, #1
10015e16:	e7f6      	b.n	10015e06 <_vfiprintf_r+0x17e>
10015e18:	2800      	cmp	r0, #0
10015e1a:	d100      	bne.n	10015e1e <_vfiprintf_r+0x196>
10015e1c:	e76f      	b.n	10015cfe <_vfiprintf_r+0x76>
10015e1e:	9309      	str	r3, [sp, #36]	; 0x24
10015e20:	e76d      	b.n	10015cfe <_vfiprintf_r+0x76>
10015e22:	7863      	ldrb	r3, [r4, #1]
10015e24:	2b2a      	cmp	r3, #42	; 0x2a
10015e26:	d10a      	bne.n	10015e3e <_vfiprintf_r+0x1b6>
10015e28:	9b05      	ldr	r3, [sp, #20]
10015e2a:	3402      	adds	r4, #2
10015e2c:	1d1a      	adds	r2, r3, #4
10015e2e:	681b      	ldr	r3, [r3, #0]
10015e30:	9205      	str	r2, [sp, #20]
10015e32:	2b00      	cmp	r3, #0
10015e34:	da01      	bge.n	10015e3a <_vfiprintf_r+0x1b2>
10015e36:	2301      	movs	r3, #1
10015e38:	425b      	negs	r3, r3
10015e3a:	9307      	str	r3, [sp, #28]
10015e3c:	e763      	b.n	10015d06 <_vfiprintf_r+0x7e>
10015e3e:	2300      	movs	r3, #0
10015e40:	200a      	movs	r0, #10
10015e42:	001a      	movs	r2, r3
10015e44:	3401      	adds	r4, #1
10015e46:	606b      	str	r3, [r5, #4]
10015e48:	7821      	ldrb	r1, [r4, #0]
10015e4a:	3930      	subs	r1, #48	; 0x30
10015e4c:	2909      	cmp	r1, #9
10015e4e:	d804      	bhi.n	10015e5a <_vfiprintf_r+0x1d2>
10015e50:	4342      	muls	r2, r0
10015e52:	3401      	adds	r4, #1
10015e54:	1852      	adds	r2, r2, r1
10015e56:	2301      	movs	r3, #1
10015e58:	e7f6      	b.n	10015e48 <_vfiprintf_r+0x1c0>
10015e5a:	2b00      	cmp	r3, #0
10015e5c:	d100      	bne.n	10015e60 <_vfiprintf_r+0x1d8>
10015e5e:	e752      	b.n	10015d06 <_vfiprintf_r+0x7e>
10015e60:	9207      	str	r2, [sp, #28]
10015e62:	e750      	b.n	10015d06 <_vfiprintf_r+0x7e>
10015e64:	ab05      	add	r3, sp, #20
10015e66:	9300      	str	r3, [sp, #0]
10015e68:	003a      	movs	r2, r7
10015e6a:	4b14      	ldr	r3, [pc, #80]	; (10015ebc <_vfiprintf_r+0x234>)
10015e6c:	0029      	movs	r1, r5
10015e6e:	0030      	movs	r0, r6
10015e70:	e000      	b.n	10015e74 <_vfiprintf_r+0x1ec>
10015e72:	bf00      	nop
10015e74:	e007      	b.n	10015e86 <_vfiprintf_r+0x1fe>
10015e76:	ab05      	add	r3, sp, #20
10015e78:	9300      	str	r3, [sp, #0]
10015e7a:	003a      	movs	r2, r7
10015e7c:	4b0f      	ldr	r3, [pc, #60]	; (10015ebc <_vfiprintf_r+0x234>)
10015e7e:	0029      	movs	r1, r5
10015e80:	0030      	movs	r0, r6
10015e82:	f000 f88b 	bl	10015f9c <_printf_i>
10015e86:	9003      	str	r0, [sp, #12]
10015e88:	9b03      	ldr	r3, [sp, #12]
10015e8a:	3301      	adds	r3, #1
10015e8c:	d000      	beq.n	10015e90 <_vfiprintf_r+0x208>
10015e8e:	e75e      	b.n	10015d4e <_vfiprintf_r+0xc6>
10015e90:	89bb      	ldrh	r3, [r7, #12]
10015e92:	065b      	lsls	r3, r3, #25
10015e94:	d500      	bpl.n	10015e98 <_vfiprintf_r+0x210>
10015e96:	e726      	b.n	10015ce6 <_vfiprintf_r+0x5e>
10015e98:	980b      	ldr	r0, [sp, #44]	; 0x2c
10015e9a:	b01f      	add	sp, #124	; 0x7c
10015e9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
10015e9e:	46c0      	nop			; (mov r8, r8)
10015ea0:	1001854c 	.word	0x1001854c
10015ea4:	1001856c 	.word	0x1001856c
10015ea8:	1001858c 	.word	0x1001858c
10015eac:	100185b2 	.word	0x100185b2
10015eb0:	100185b6 	.word	0x100185b6
10015eb4:	00000000 	.word	0x00000000
10015eb8:	100185ac 	.word	0x100185ac
10015ebc:	10015c63 	.word	0x10015c63

10015ec0 <_printf_common>:
10015ec0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10015ec2:	0017      	movs	r7, r2
10015ec4:	9301      	str	r3, [sp, #4]
10015ec6:	688a      	ldr	r2, [r1, #8]
10015ec8:	690b      	ldr	r3, [r1, #16]
10015eca:	9000      	str	r0, [sp, #0]
10015ecc:	000c      	movs	r4, r1
10015ece:	4293      	cmp	r3, r2
10015ed0:	da00      	bge.n	10015ed4 <_printf_common+0x14>
10015ed2:	0013      	movs	r3, r2
10015ed4:	0022      	movs	r2, r4
10015ed6:	603b      	str	r3, [r7, #0]
10015ed8:	3243      	adds	r2, #67	; 0x43
10015eda:	7812      	ldrb	r2, [r2, #0]
10015edc:	2a00      	cmp	r2, #0
10015ede:	d001      	beq.n	10015ee4 <_printf_common+0x24>
10015ee0:	3301      	adds	r3, #1
10015ee2:	603b      	str	r3, [r7, #0]
10015ee4:	6823      	ldr	r3, [r4, #0]
10015ee6:	069b      	lsls	r3, r3, #26
10015ee8:	d502      	bpl.n	10015ef0 <_printf_common+0x30>
10015eea:	683b      	ldr	r3, [r7, #0]
10015eec:	3302      	adds	r3, #2
10015eee:	603b      	str	r3, [r7, #0]
10015ef0:	2506      	movs	r5, #6
10015ef2:	6823      	ldr	r3, [r4, #0]
10015ef4:	401d      	ands	r5, r3
10015ef6:	d01e      	beq.n	10015f36 <_printf_common+0x76>
10015ef8:	0023      	movs	r3, r4
10015efa:	3343      	adds	r3, #67	; 0x43
10015efc:	781b      	ldrb	r3, [r3, #0]
10015efe:	1e5a      	subs	r2, r3, #1
10015f00:	4193      	sbcs	r3, r2
10015f02:	6822      	ldr	r2, [r4, #0]
10015f04:	0692      	lsls	r2, r2, #26
10015f06:	d51c      	bpl.n	10015f42 <_printf_common+0x82>
10015f08:	2030      	movs	r0, #48	; 0x30
10015f0a:	18e1      	adds	r1, r4, r3
10015f0c:	3143      	adds	r1, #67	; 0x43
10015f0e:	7008      	strb	r0, [r1, #0]
10015f10:	0021      	movs	r1, r4
10015f12:	1c5a      	adds	r2, r3, #1
10015f14:	3145      	adds	r1, #69	; 0x45
10015f16:	7809      	ldrb	r1, [r1, #0]
10015f18:	18a2      	adds	r2, r4, r2
10015f1a:	3243      	adds	r2, #67	; 0x43
10015f1c:	3302      	adds	r3, #2
10015f1e:	7011      	strb	r1, [r2, #0]
10015f20:	e00f      	b.n	10015f42 <_printf_common+0x82>
10015f22:	0022      	movs	r2, r4
10015f24:	2301      	movs	r3, #1
10015f26:	3219      	adds	r2, #25
10015f28:	9901      	ldr	r1, [sp, #4]
10015f2a:	9800      	ldr	r0, [sp, #0]
10015f2c:	9e08      	ldr	r6, [sp, #32]
10015f2e:	47b0      	blx	r6
10015f30:	1c43      	adds	r3, r0, #1
10015f32:	d00e      	beq.n	10015f52 <_printf_common+0x92>
10015f34:	3501      	adds	r5, #1
10015f36:	68e3      	ldr	r3, [r4, #12]
10015f38:	683a      	ldr	r2, [r7, #0]
10015f3a:	1a9b      	subs	r3, r3, r2
10015f3c:	429d      	cmp	r5, r3
10015f3e:	dbf0      	blt.n	10015f22 <_printf_common+0x62>
10015f40:	e7da      	b.n	10015ef8 <_printf_common+0x38>
10015f42:	0022      	movs	r2, r4
10015f44:	9901      	ldr	r1, [sp, #4]
10015f46:	3243      	adds	r2, #67	; 0x43
10015f48:	9800      	ldr	r0, [sp, #0]
10015f4a:	9d08      	ldr	r5, [sp, #32]
10015f4c:	47a8      	blx	r5
10015f4e:	1c43      	adds	r3, r0, #1
10015f50:	d102      	bne.n	10015f58 <_printf_common+0x98>
10015f52:	2001      	movs	r0, #1
10015f54:	4240      	negs	r0, r0
10015f56:	e020      	b.n	10015f9a <_printf_common+0xda>
10015f58:	2306      	movs	r3, #6
10015f5a:	6820      	ldr	r0, [r4, #0]
10015f5c:	68e1      	ldr	r1, [r4, #12]
10015f5e:	683a      	ldr	r2, [r7, #0]
10015f60:	4003      	ands	r3, r0
10015f62:	2500      	movs	r5, #0
10015f64:	2b04      	cmp	r3, #4
10015f66:	d103      	bne.n	10015f70 <_printf_common+0xb0>
10015f68:	1a8d      	subs	r5, r1, r2
10015f6a:	43eb      	mvns	r3, r5
10015f6c:	17db      	asrs	r3, r3, #31
10015f6e:	401d      	ands	r5, r3
10015f70:	68a3      	ldr	r3, [r4, #8]
10015f72:	6922      	ldr	r2, [r4, #16]
10015f74:	4293      	cmp	r3, r2
10015f76:	dd01      	ble.n	10015f7c <_printf_common+0xbc>
10015f78:	1a9b      	subs	r3, r3, r2
10015f7a:	18ed      	adds	r5, r5, r3
10015f7c:	2700      	movs	r7, #0
10015f7e:	42bd      	cmp	r5, r7
10015f80:	d00a      	beq.n	10015f98 <_printf_common+0xd8>
10015f82:	0022      	movs	r2, r4
10015f84:	2301      	movs	r3, #1
10015f86:	321a      	adds	r2, #26
10015f88:	9901      	ldr	r1, [sp, #4]
10015f8a:	9800      	ldr	r0, [sp, #0]
10015f8c:	9e08      	ldr	r6, [sp, #32]
10015f8e:	47b0      	blx	r6
10015f90:	1c43      	adds	r3, r0, #1
10015f92:	d0de      	beq.n	10015f52 <_printf_common+0x92>
10015f94:	3701      	adds	r7, #1
10015f96:	e7f2      	b.n	10015f7e <_printf_common+0xbe>
10015f98:	2000      	movs	r0, #0
10015f9a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

10015f9c <_printf_i>:
10015f9c:	b5f0      	push	{r4, r5, r6, r7, lr}
10015f9e:	b08b      	sub	sp, #44	; 0x2c
10015fa0:	9206      	str	r2, [sp, #24]
10015fa2:	000a      	movs	r2, r1
10015fa4:	3243      	adds	r2, #67	; 0x43
10015fa6:	9307      	str	r3, [sp, #28]
10015fa8:	9005      	str	r0, [sp, #20]
10015faa:	9204      	str	r2, [sp, #16]
10015fac:	7e0a      	ldrb	r2, [r1, #24]
10015fae:	000c      	movs	r4, r1
10015fb0:	9b10      	ldr	r3, [sp, #64]	; 0x40
10015fb2:	2a6e      	cmp	r2, #110	; 0x6e
10015fb4:	d100      	bne.n	10015fb8 <_printf_i+0x1c>
10015fb6:	e0ab      	b.n	10016110 <_printf_i+0x174>
10015fb8:	d811      	bhi.n	10015fde <_printf_i+0x42>
10015fba:	2a63      	cmp	r2, #99	; 0x63
10015fbc:	d022      	beq.n	10016004 <_printf_i+0x68>
10015fbe:	d809      	bhi.n	10015fd4 <_printf_i+0x38>
10015fc0:	2a00      	cmp	r2, #0
10015fc2:	d100      	bne.n	10015fc6 <_printf_i+0x2a>
10015fc4:	e0b5      	b.n	10016132 <_printf_i+0x196>
10015fc6:	2a58      	cmp	r2, #88	; 0x58
10015fc8:	d000      	beq.n	10015fcc <_printf_i+0x30>
10015fca:	e0c5      	b.n	10016158 <_printf_i+0x1bc>
10015fcc:	3145      	adds	r1, #69	; 0x45
10015fce:	700a      	strb	r2, [r1, #0]
10015fd0:	4a81      	ldr	r2, [pc, #516]	; (100161d8 <_printf_i+0x23c>)
10015fd2:	e04f      	b.n	10016074 <_printf_i+0xd8>
10015fd4:	2a64      	cmp	r2, #100	; 0x64
10015fd6:	d01d      	beq.n	10016014 <_printf_i+0x78>
10015fd8:	2a69      	cmp	r2, #105	; 0x69
10015fda:	d01b      	beq.n	10016014 <_printf_i+0x78>
10015fdc:	e0bc      	b.n	10016158 <_printf_i+0x1bc>
10015fde:	2a73      	cmp	r2, #115	; 0x73
10015fe0:	d100      	bne.n	10015fe4 <_printf_i+0x48>
10015fe2:	e0aa      	b.n	1001613a <_printf_i+0x19e>
10015fe4:	d809      	bhi.n	10015ffa <_printf_i+0x5e>
10015fe6:	2a6f      	cmp	r2, #111	; 0x6f
10015fe8:	d029      	beq.n	1001603e <_printf_i+0xa2>
10015fea:	2a70      	cmp	r2, #112	; 0x70
10015fec:	d000      	beq.n	10015ff0 <_printf_i+0x54>
10015fee:	e0b3      	b.n	10016158 <_printf_i+0x1bc>
10015ff0:	2220      	movs	r2, #32
10015ff2:	6809      	ldr	r1, [r1, #0]
10015ff4:	430a      	orrs	r2, r1
10015ff6:	6022      	str	r2, [r4, #0]
10015ff8:	e037      	b.n	1001606a <_printf_i+0xce>
10015ffa:	2a75      	cmp	r2, #117	; 0x75
10015ffc:	d01f      	beq.n	1001603e <_printf_i+0xa2>
10015ffe:	2a78      	cmp	r2, #120	; 0x78
10016000:	d033      	beq.n	1001606a <_printf_i+0xce>
10016002:	e0a9      	b.n	10016158 <_printf_i+0x1bc>
10016004:	000e      	movs	r6, r1
10016006:	681a      	ldr	r2, [r3, #0]
10016008:	3642      	adds	r6, #66	; 0x42
1001600a:	1d11      	adds	r1, r2, #4
1001600c:	6019      	str	r1, [r3, #0]
1001600e:	6813      	ldr	r3, [r2, #0]
10016010:	7033      	strb	r3, [r6, #0]
10016012:	e0a4      	b.n	1001615e <_printf_i+0x1c2>
10016014:	6821      	ldr	r1, [r4, #0]
10016016:	681a      	ldr	r2, [r3, #0]
10016018:	0608      	lsls	r0, r1, #24
1001601a:	d406      	bmi.n	1001602a <_printf_i+0x8e>
1001601c:	0649      	lsls	r1, r1, #25
1001601e:	d504      	bpl.n	1001602a <_printf_i+0x8e>
10016020:	1d11      	adds	r1, r2, #4
10016022:	6019      	str	r1, [r3, #0]
10016024:	2300      	movs	r3, #0
10016026:	5ed5      	ldrsh	r5, [r2, r3]
10016028:	e002      	b.n	10016030 <_printf_i+0x94>
1001602a:	1d11      	adds	r1, r2, #4
1001602c:	6019      	str	r1, [r3, #0]
1001602e:	6815      	ldr	r5, [r2, #0]
10016030:	2d00      	cmp	r5, #0
10016032:	da3b      	bge.n	100160ac <_printf_i+0x110>
10016034:	232d      	movs	r3, #45	; 0x2d
10016036:	9a04      	ldr	r2, [sp, #16]
10016038:	426d      	negs	r5, r5
1001603a:	7013      	strb	r3, [r2, #0]
1001603c:	e036      	b.n	100160ac <_printf_i+0x110>
1001603e:	6821      	ldr	r1, [r4, #0]
10016040:	681a      	ldr	r2, [r3, #0]
10016042:	0608      	lsls	r0, r1, #24
10016044:	d406      	bmi.n	10016054 <_printf_i+0xb8>
10016046:	0649      	lsls	r1, r1, #25
10016048:	d504      	bpl.n	10016054 <_printf_i+0xb8>
1001604a:	6815      	ldr	r5, [r2, #0]
1001604c:	1d11      	adds	r1, r2, #4
1001604e:	6019      	str	r1, [r3, #0]
10016050:	b2ad      	uxth	r5, r5
10016052:	e002      	b.n	1001605a <_printf_i+0xbe>
10016054:	1d11      	adds	r1, r2, #4
10016056:	6019      	str	r1, [r3, #0]
10016058:	6815      	ldr	r5, [r2, #0]
1001605a:	4b5f      	ldr	r3, [pc, #380]	; (100161d8 <_printf_i+0x23c>)
1001605c:	7e22      	ldrb	r2, [r4, #24]
1001605e:	9303      	str	r3, [sp, #12]
10016060:	2708      	movs	r7, #8
10016062:	2a6f      	cmp	r2, #111	; 0x6f
10016064:	d01d      	beq.n	100160a2 <_printf_i+0x106>
10016066:	270a      	movs	r7, #10
10016068:	e01b      	b.n	100160a2 <_printf_i+0x106>
1001606a:	0022      	movs	r2, r4
1001606c:	2178      	movs	r1, #120	; 0x78
1001606e:	3245      	adds	r2, #69	; 0x45
10016070:	7011      	strb	r1, [r2, #0]
10016072:	4a5a      	ldr	r2, [pc, #360]	; (100161dc <_printf_i+0x240>)
10016074:	6819      	ldr	r1, [r3, #0]
10016076:	9203      	str	r2, [sp, #12]
10016078:	1d08      	adds	r0, r1, #4
1001607a:	6822      	ldr	r2, [r4, #0]
1001607c:	6018      	str	r0, [r3, #0]
1001607e:	680d      	ldr	r5, [r1, #0]
10016080:	0610      	lsls	r0, r2, #24
10016082:	d402      	bmi.n	1001608a <_printf_i+0xee>
10016084:	0650      	lsls	r0, r2, #25
10016086:	d500      	bpl.n	1001608a <_printf_i+0xee>
10016088:	b2ad      	uxth	r5, r5
1001608a:	07d3      	lsls	r3, r2, #31
1001608c:	d502      	bpl.n	10016094 <_printf_i+0xf8>
1001608e:	2320      	movs	r3, #32
10016090:	431a      	orrs	r2, r3
10016092:	6022      	str	r2, [r4, #0]
10016094:	2710      	movs	r7, #16
10016096:	2d00      	cmp	r5, #0
10016098:	d103      	bne.n	100160a2 <_printf_i+0x106>
1001609a:	2320      	movs	r3, #32
1001609c:	6822      	ldr	r2, [r4, #0]
1001609e:	439a      	bics	r2, r3
100160a0:	6022      	str	r2, [r4, #0]
100160a2:	0023      	movs	r3, r4
100160a4:	2200      	movs	r2, #0
100160a6:	3343      	adds	r3, #67	; 0x43
100160a8:	701a      	strb	r2, [r3, #0]
100160aa:	e002      	b.n	100160b2 <_printf_i+0x116>
100160ac:	270a      	movs	r7, #10
100160ae:	4b4a      	ldr	r3, [pc, #296]	; (100161d8 <_printf_i+0x23c>)
100160b0:	9303      	str	r3, [sp, #12]
100160b2:	6863      	ldr	r3, [r4, #4]
100160b4:	60a3      	str	r3, [r4, #8]
100160b6:	2b00      	cmp	r3, #0
100160b8:	db09      	blt.n	100160ce <_printf_i+0x132>
100160ba:	2204      	movs	r2, #4
100160bc:	6821      	ldr	r1, [r4, #0]
100160be:	4391      	bics	r1, r2
100160c0:	6021      	str	r1, [r4, #0]
100160c2:	2d00      	cmp	r5, #0
100160c4:	d105      	bne.n	100160d2 <_printf_i+0x136>
100160c6:	9e04      	ldr	r6, [sp, #16]
100160c8:	2b00      	cmp	r3, #0
100160ca:	d011      	beq.n	100160f0 <_printf_i+0x154>
100160cc:	e07b      	b.n	100161c6 <_printf_i+0x22a>
100160ce:	2d00      	cmp	r5, #0
100160d0:	d079      	beq.n	100161c6 <_printf_i+0x22a>
100160d2:	9e04      	ldr	r6, [sp, #16]
100160d4:	0028      	movs	r0, r5
100160d6:	0039      	movs	r1, r7
100160d8:	f7fd f8b2 	bl	10013240 <__aeabi_uidivmod>
100160dc:	9b03      	ldr	r3, [sp, #12]
100160de:	3e01      	subs	r6, #1
100160e0:	5c5b      	ldrb	r3, [r3, r1]
100160e2:	0028      	movs	r0, r5
100160e4:	7033      	strb	r3, [r6, #0]
100160e6:	0039      	movs	r1, r7
100160e8:	f7fd f824 	bl	10013134 <__aeabi_uidiv>
100160ec:	1e05      	subs	r5, r0, #0
100160ee:	d1f1      	bne.n	100160d4 <_printf_i+0x138>
100160f0:	2f08      	cmp	r7, #8
100160f2:	d109      	bne.n	10016108 <_printf_i+0x16c>
100160f4:	6823      	ldr	r3, [r4, #0]
100160f6:	07db      	lsls	r3, r3, #31
100160f8:	d506      	bpl.n	10016108 <_printf_i+0x16c>
100160fa:	6863      	ldr	r3, [r4, #4]
100160fc:	6922      	ldr	r2, [r4, #16]
100160fe:	4293      	cmp	r3, r2
10016100:	dc02      	bgt.n	10016108 <_printf_i+0x16c>
10016102:	2330      	movs	r3, #48	; 0x30
10016104:	3e01      	subs	r6, #1
10016106:	7033      	strb	r3, [r6, #0]
10016108:	9b04      	ldr	r3, [sp, #16]
1001610a:	1b9b      	subs	r3, r3, r6
1001610c:	6123      	str	r3, [r4, #16]
1001610e:	e02b      	b.n	10016168 <_printf_i+0x1cc>
10016110:	6809      	ldr	r1, [r1, #0]
10016112:	681a      	ldr	r2, [r3, #0]
10016114:	0608      	lsls	r0, r1, #24
10016116:	d407      	bmi.n	10016128 <_printf_i+0x18c>
10016118:	0649      	lsls	r1, r1, #25
1001611a:	d505      	bpl.n	10016128 <_printf_i+0x18c>
1001611c:	1d11      	adds	r1, r2, #4
1001611e:	6019      	str	r1, [r3, #0]
10016120:	6813      	ldr	r3, [r2, #0]
10016122:	8aa2      	ldrh	r2, [r4, #20]
10016124:	801a      	strh	r2, [r3, #0]
10016126:	e004      	b.n	10016132 <_printf_i+0x196>
10016128:	1d11      	adds	r1, r2, #4
1001612a:	6019      	str	r1, [r3, #0]
1001612c:	6813      	ldr	r3, [r2, #0]
1001612e:	6962      	ldr	r2, [r4, #20]
10016130:	601a      	str	r2, [r3, #0]
10016132:	2300      	movs	r3, #0
10016134:	9e04      	ldr	r6, [sp, #16]
10016136:	6123      	str	r3, [r4, #16]
10016138:	e016      	b.n	10016168 <_printf_i+0x1cc>
1001613a:	681a      	ldr	r2, [r3, #0]
1001613c:	1d11      	adds	r1, r2, #4
1001613e:	6019      	str	r1, [r3, #0]
10016140:	6816      	ldr	r6, [r2, #0]
10016142:	2100      	movs	r1, #0
10016144:	6862      	ldr	r2, [r4, #4]
10016146:	0030      	movs	r0, r6
10016148:	f000 f92a 	bl	100163a0 <memchr>
1001614c:	2800      	cmp	r0, #0
1001614e:	d001      	beq.n	10016154 <_printf_i+0x1b8>
10016150:	1b80      	subs	r0, r0, r6
10016152:	6060      	str	r0, [r4, #4]
10016154:	6863      	ldr	r3, [r4, #4]
10016156:	e003      	b.n	10016160 <_printf_i+0x1c4>
10016158:	0026      	movs	r6, r4
1001615a:	3642      	adds	r6, #66	; 0x42
1001615c:	7032      	strb	r2, [r6, #0]
1001615e:	2301      	movs	r3, #1
10016160:	6123      	str	r3, [r4, #16]
10016162:	2300      	movs	r3, #0
10016164:	9a04      	ldr	r2, [sp, #16]
10016166:	7013      	strb	r3, [r2, #0]
10016168:	9b07      	ldr	r3, [sp, #28]
1001616a:	aa09      	add	r2, sp, #36	; 0x24
1001616c:	9300      	str	r3, [sp, #0]
1001616e:	0021      	movs	r1, r4
10016170:	9b06      	ldr	r3, [sp, #24]
10016172:	9805      	ldr	r0, [sp, #20]
10016174:	f7ff fea4 	bl	10015ec0 <_printf_common>
10016178:	1c43      	adds	r3, r0, #1
1001617a:	d102      	bne.n	10016182 <_printf_i+0x1e6>
1001617c:	2001      	movs	r0, #1
1001617e:	4240      	negs	r0, r0
10016180:	e027      	b.n	100161d2 <_printf_i+0x236>
10016182:	6923      	ldr	r3, [r4, #16]
10016184:	0032      	movs	r2, r6
10016186:	9906      	ldr	r1, [sp, #24]
10016188:	9805      	ldr	r0, [sp, #20]
1001618a:	9d07      	ldr	r5, [sp, #28]
1001618c:	47a8      	blx	r5
1001618e:	1c43      	adds	r3, r0, #1
10016190:	d0f4      	beq.n	1001617c <_printf_i+0x1e0>
10016192:	6823      	ldr	r3, [r4, #0]
10016194:	2500      	movs	r5, #0
10016196:	079b      	lsls	r3, r3, #30
10016198:	d40f      	bmi.n	100161ba <_printf_i+0x21e>
1001619a:	9b09      	ldr	r3, [sp, #36]	; 0x24
1001619c:	68e0      	ldr	r0, [r4, #12]
1001619e:	4298      	cmp	r0, r3
100161a0:	da17      	bge.n	100161d2 <_printf_i+0x236>
100161a2:	0018      	movs	r0, r3
100161a4:	e015      	b.n	100161d2 <_printf_i+0x236>
100161a6:	0022      	movs	r2, r4
100161a8:	2301      	movs	r3, #1
100161aa:	3219      	adds	r2, #25
100161ac:	9906      	ldr	r1, [sp, #24]
100161ae:	9805      	ldr	r0, [sp, #20]
100161b0:	9e07      	ldr	r6, [sp, #28]
100161b2:	47b0      	blx	r6
100161b4:	1c43      	adds	r3, r0, #1
100161b6:	d0e1      	beq.n	1001617c <_printf_i+0x1e0>
100161b8:	3501      	adds	r5, #1
100161ba:	68e3      	ldr	r3, [r4, #12]
100161bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
100161be:	1a9b      	subs	r3, r3, r2
100161c0:	429d      	cmp	r5, r3
100161c2:	dbf0      	blt.n	100161a6 <_printf_i+0x20a>
100161c4:	e7e9      	b.n	1001619a <_printf_i+0x1fe>
100161c6:	0026      	movs	r6, r4
100161c8:	9b03      	ldr	r3, [sp, #12]
100161ca:	3642      	adds	r6, #66	; 0x42
100161cc:	781b      	ldrb	r3, [r3, #0]
100161ce:	7033      	strb	r3, [r6, #0]
100161d0:	e78e      	b.n	100160f0 <_printf_i+0x154>
100161d2:	b00b      	add	sp, #44	; 0x2c
100161d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
100161d6:	46c0      	nop			; (mov r8, r8)
100161d8:	100185bd 	.word	0x100185bd
100161dc:	100185ce 	.word	0x100185ce

100161e0 <_putc_r>:
100161e0:	b570      	push	{r4, r5, r6, lr}
100161e2:	0006      	movs	r6, r0
100161e4:	000d      	movs	r5, r1
100161e6:	0014      	movs	r4, r2
100161e8:	2800      	cmp	r0, #0
100161ea:	d004      	beq.n	100161f6 <_putc_r+0x16>
100161ec:	6983      	ldr	r3, [r0, #24]
100161ee:	2b00      	cmp	r3, #0
100161f0:	d101      	bne.n	100161f6 <_putc_r+0x16>
100161f2:	f7ff fc29 	bl	10015a48 <__sinit>
100161f6:	4b12      	ldr	r3, [pc, #72]	; (10016240 <_putc_r+0x60>)
100161f8:	429c      	cmp	r4, r3
100161fa:	d101      	bne.n	10016200 <_putc_r+0x20>
100161fc:	6874      	ldr	r4, [r6, #4]
100161fe:	e008      	b.n	10016212 <_putc_r+0x32>
10016200:	4b10      	ldr	r3, [pc, #64]	; (10016244 <_putc_r+0x64>)
10016202:	429c      	cmp	r4, r3
10016204:	d101      	bne.n	1001620a <_putc_r+0x2a>
10016206:	68b4      	ldr	r4, [r6, #8]
10016208:	e003      	b.n	10016212 <_putc_r+0x32>
1001620a:	4b0f      	ldr	r3, [pc, #60]	; (10016248 <_putc_r+0x68>)
1001620c:	429c      	cmp	r4, r3
1001620e:	d100      	bne.n	10016212 <_putc_r+0x32>
10016210:	68f4      	ldr	r4, [r6, #12]
10016212:	68a3      	ldr	r3, [r4, #8]
10016214:	3b01      	subs	r3, #1
10016216:	60a3      	str	r3, [r4, #8]
10016218:	2b00      	cmp	r3, #0
1001621a:	da05      	bge.n	10016228 <_putc_r+0x48>
1001621c:	69a2      	ldr	r2, [r4, #24]
1001621e:	4293      	cmp	r3, r2
10016220:	db08      	blt.n	10016234 <_putc_r+0x54>
10016222:	b2eb      	uxtb	r3, r5
10016224:	2b0a      	cmp	r3, #10
10016226:	d005      	beq.n	10016234 <_putc_r+0x54>
10016228:	6823      	ldr	r3, [r4, #0]
1001622a:	b2e8      	uxtb	r0, r5
1001622c:	1c5a      	adds	r2, r3, #1
1001622e:	6022      	str	r2, [r4, #0]
10016230:	701d      	strb	r5, [r3, #0]
10016232:	e004      	b.n	1001623e <_putc_r+0x5e>
10016234:	0022      	movs	r2, r4
10016236:	0029      	movs	r1, r5
10016238:	0030      	movs	r0, r6
1001623a:	f7ff fa43 	bl	100156c4 <__swbuf_r>
1001623e:	bd70      	pop	{r4, r5, r6, pc}
10016240:	1001854c 	.word	0x1001854c
10016244:	1001856c 	.word	0x1001856c
10016248:	1001858c 	.word	0x1001858c

1001624c <__sread>:
1001624c:	b570      	push	{r4, r5, r6, lr}
1001624e:	000c      	movs	r4, r1
10016250:	250e      	movs	r5, #14
10016252:	5f49      	ldrsh	r1, [r1, r5]
10016254:	f000 f8b0 	bl	100163b8 <_read_r>
10016258:	2800      	cmp	r0, #0
1001625a:	db03      	blt.n	10016264 <__sread+0x18>
1001625c:	6d63      	ldr	r3, [r4, #84]	; 0x54
1001625e:	181b      	adds	r3, r3, r0
10016260:	6563      	str	r3, [r4, #84]	; 0x54
10016262:	e003      	b.n	1001626c <__sread+0x20>
10016264:	89a2      	ldrh	r2, [r4, #12]
10016266:	4b02      	ldr	r3, [pc, #8]	; (10016270 <__sread+0x24>)
10016268:	4013      	ands	r3, r2
1001626a:	81a3      	strh	r3, [r4, #12]
1001626c:	bd70      	pop	{r4, r5, r6, pc}
1001626e:	46c0      	nop			; (mov r8, r8)
10016270:	ffffefff 	.word	0xffffefff

10016274 <__swrite>:
10016274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10016276:	001f      	movs	r7, r3
10016278:	898b      	ldrh	r3, [r1, #12]
1001627a:	0005      	movs	r5, r0
1001627c:	000c      	movs	r4, r1
1001627e:	0016      	movs	r6, r2
10016280:	05db      	lsls	r3, r3, #23
10016282:	d505      	bpl.n	10016290 <__swrite+0x1c>
10016284:	230e      	movs	r3, #14
10016286:	5ec9      	ldrsh	r1, [r1, r3]
10016288:	2200      	movs	r2, #0
1001628a:	2302      	movs	r3, #2
1001628c:	f000 f874 	bl	10016378 <_lseek_r>
10016290:	89a2      	ldrh	r2, [r4, #12]
10016292:	4b05      	ldr	r3, [pc, #20]	; (100162a8 <__swrite+0x34>)
10016294:	0028      	movs	r0, r5
10016296:	4013      	ands	r3, r2
10016298:	81a3      	strh	r3, [r4, #12]
1001629a:	0032      	movs	r2, r6
1001629c:	230e      	movs	r3, #14
1001629e:	5ee1      	ldrsh	r1, [r4, r3]
100162a0:	003b      	movs	r3, r7
100162a2:	f000 f81f 	bl	100162e4 <_write_r>
100162a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100162a8:	ffffefff 	.word	0xffffefff

100162ac <__sseek>:
100162ac:	b570      	push	{r4, r5, r6, lr}
100162ae:	000c      	movs	r4, r1
100162b0:	250e      	movs	r5, #14
100162b2:	5f49      	ldrsh	r1, [r1, r5]
100162b4:	f000 f860 	bl	10016378 <_lseek_r>
100162b8:	89a3      	ldrh	r3, [r4, #12]
100162ba:	1c42      	adds	r2, r0, #1
100162bc:	d103      	bne.n	100162c6 <__sseek+0x1a>
100162be:	4a05      	ldr	r2, [pc, #20]	; (100162d4 <__sseek+0x28>)
100162c0:	4013      	ands	r3, r2
100162c2:	81a3      	strh	r3, [r4, #12]
100162c4:	e004      	b.n	100162d0 <__sseek+0x24>
100162c6:	2280      	movs	r2, #128	; 0x80
100162c8:	0152      	lsls	r2, r2, #5
100162ca:	4313      	orrs	r3, r2
100162cc:	81a3      	strh	r3, [r4, #12]
100162ce:	6560      	str	r0, [r4, #84]	; 0x54
100162d0:	bd70      	pop	{r4, r5, r6, pc}
100162d2:	46c0      	nop			; (mov r8, r8)
100162d4:	ffffefff 	.word	0xffffefff

100162d8 <__sclose>:
100162d8:	b510      	push	{r4, lr}
100162da:	230e      	movs	r3, #14
100162dc:	5ec9      	ldrsh	r1, [r1, r3]
100162de:	f000 f815 	bl	1001630c <_close_r>
100162e2:	bd10      	pop	{r4, pc}

100162e4 <_write_r>:
100162e4:	b570      	push	{r4, r5, r6, lr}
100162e6:	0005      	movs	r5, r0
100162e8:	0008      	movs	r0, r1
100162ea:	0011      	movs	r1, r2
100162ec:	2200      	movs	r2, #0
100162ee:	4c06      	ldr	r4, [pc, #24]	; (10016308 <_write_r+0x24>)
100162f0:	6022      	str	r2, [r4, #0]
100162f2:	001a      	movs	r2, r3
100162f4:	f7f7 faa6 	bl	1000d844 <_write>
100162f8:	1c43      	adds	r3, r0, #1
100162fa:	d103      	bne.n	10016304 <_write_r+0x20>
100162fc:	6823      	ldr	r3, [r4, #0]
100162fe:	2b00      	cmp	r3, #0
10016300:	d000      	beq.n	10016304 <_write_r+0x20>
10016302:	602b      	str	r3, [r5, #0]
10016304:	bd70      	pop	{r4, r5, r6, pc}
10016306:	46c0      	nop			; (mov r8, r8)
10016308:	1001b548 	.word	0x1001b548

1001630c <_close_r>:
1001630c:	2300      	movs	r3, #0
1001630e:	b570      	push	{r4, r5, r6, lr}
10016310:	4c06      	ldr	r4, [pc, #24]	; (1001632c <_close_r+0x20>)
10016312:	0005      	movs	r5, r0
10016314:	0008      	movs	r0, r1
10016316:	6023      	str	r3, [r4, #0]
10016318:	f7f7 face 	bl	1000d8b8 <_close>
1001631c:	1c43      	adds	r3, r0, #1
1001631e:	d103      	bne.n	10016328 <_close_r+0x1c>
10016320:	6823      	ldr	r3, [r4, #0]
10016322:	2b00      	cmp	r3, #0
10016324:	d000      	beq.n	10016328 <_close_r+0x1c>
10016326:	602b      	str	r3, [r5, #0]
10016328:	bd70      	pop	{r4, r5, r6, pc}
1001632a:	46c0      	nop			; (mov r8, r8)
1001632c:	1001b548 	.word	0x1001b548

10016330 <_fstat_r>:
10016330:	2300      	movs	r3, #0
10016332:	b570      	push	{r4, r5, r6, lr}
10016334:	4c06      	ldr	r4, [pc, #24]	; (10016350 <_fstat_r+0x20>)
10016336:	0005      	movs	r5, r0
10016338:	0008      	movs	r0, r1
1001633a:	0011      	movs	r1, r2
1001633c:	6023      	str	r3, [r4, #0]
1001633e:	f7f7 fabf 	bl	1000d8c0 <_fstat>
10016342:	1c43      	adds	r3, r0, #1
10016344:	d103      	bne.n	1001634e <_fstat_r+0x1e>
10016346:	6823      	ldr	r3, [r4, #0]
10016348:	2b00      	cmp	r3, #0
1001634a:	d000      	beq.n	1001634e <_fstat_r+0x1e>
1001634c:	602b      	str	r3, [r5, #0]
1001634e:	bd70      	pop	{r4, r5, r6, pc}
10016350:	1001b548 	.word	0x1001b548

10016354 <_isatty_r>:
10016354:	2300      	movs	r3, #0
10016356:	b570      	push	{r4, r5, r6, lr}
10016358:	4c06      	ldr	r4, [pc, #24]	; (10016374 <_isatty_r+0x20>)
1001635a:	0005      	movs	r5, r0
1001635c:	0008      	movs	r0, r1
1001635e:	6023      	str	r3, [r4, #0]
10016360:	f7f7 fab4 	bl	1000d8cc <_isatty>
10016364:	1c43      	adds	r3, r0, #1
10016366:	d103      	bne.n	10016370 <_isatty_r+0x1c>
10016368:	6823      	ldr	r3, [r4, #0]
1001636a:	2b00      	cmp	r3, #0
1001636c:	d000      	beq.n	10016370 <_isatty_r+0x1c>
1001636e:	602b      	str	r3, [r5, #0]
10016370:	bd70      	pop	{r4, r5, r6, pc}
10016372:	46c0      	nop			; (mov r8, r8)
10016374:	1001b548 	.word	0x1001b548

10016378 <_lseek_r>:
10016378:	b570      	push	{r4, r5, r6, lr}
1001637a:	0005      	movs	r5, r0
1001637c:	0008      	movs	r0, r1
1001637e:	0011      	movs	r1, r2
10016380:	2200      	movs	r2, #0
10016382:	4c06      	ldr	r4, [pc, #24]	; (1001639c <_lseek_r+0x24>)
10016384:	6022      	str	r2, [r4, #0]
10016386:	001a      	movs	r2, r3
10016388:	f7f7 faa2 	bl	1000d8d0 <_lseek>
1001638c:	1c43      	adds	r3, r0, #1
1001638e:	d103      	bne.n	10016398 <_lseek_r+0x20>
10016390:	6823      	ldr	r3, [r4, #0]
10016392:	2b00      	cmp	r3, #0
10016394:	d000      	beq.n	10016398 <_lseek_r+0x20>
10016396:	602b      	str	r3, [r5, #0]
10016398:	bd70      	pop	{r4, r5, r6, pc}
1001639a:	46c0      	nop			; (mov r8, r8)
1001639c:	1001b548 	.word	0x1001b548

100163a0 <memchr>:
100163a0:	b2c9      	uxtb	r1, r1
100163a2:	1882      	adds	r2, r0, r2
100163a4:	4290      	cmp	r0, r2
100163a6:	d004      	beq.n	100163b2 <memchr+0x12>
100163a8:	7803      	ldrb	r3, [r0, #0]
100163aa:	428b      	cmp	r3, r1
100163ac:	d002      	beq.n	100163b4 <memchr+0x14>
100163ae:	3001      	adds	r0, #1
100163b0:	e7f8      	b.n	100163a4 <memchr+0x4>
100163b2:	2000      	movs	r0, #0
100163b4:	4770      	bx	lr
	...

100163b8 <_read_r>:
100163b8:	b570      	push	{r4, r5, r6, lr}
100163ba:	0005      	movs	r5, r0
100163bc:	0008      	movs	r0, r1
100163be:	0011      	movs	r1, r2
100163c0:	2200      	movs	r2, #0
100163c2:	4c06      	ldr	r4, [pc, #24]	; (100163dc <_read_r+0x24>)
100163c4:	6022      	str	r2, [r4, #0]
100163c6:	001a      	movs	r2, r3
100163c8:	f7f7 fa1c 	bl	1000d804 <_read>
100163cc:	1c43      	adds	r3, r0, #1
100163ce:	d103      	bne.n	100163d8 <_read_r+0x20>
100163d0:	6823      	ldr	r3, [r4, #0]
100163d2:	2b00      	cmp	r3, #0
100163d4:	d000      	beq.n	100163d8 <_read_r+0x20>
100163d6:	602b      	str	r3, [r5, #0]
100163d8:	bd70      	pop	{r4, r5, r6, pc}
100163da:	46c0      	nop			; (mov r8, r8)
100163dc:	1001b548 	.word	0x1001b548
100163e0:	6e756f63 	.word	0x6e756f63
100163e4:	20726574 	.word	0x20726574
100163e8:	00006425 	.word	0x00006425
100163ec:	6f630a0d 	.word	0x6f630a0d
100163f0:	65746e75 	.word	0x65746e75
100163f4:	64252072 	.word	0x64252072
100163f8:	0000      	.short	0x0000
100163fa:	03e8      	.short	0x03e8

100163fc <test>:
100163fc:	0083 0000 4000 0000 0200 0000 00c8 00c8     .....@..........
1001640c:	0000 41a0 0000 4270 0000 3f00 6666 3e66     ...A..pB...?fff>
1001641c:	cccd 3f2c 0000 3f00 0000 3f00 000a 0000     ..,?...?...?....
1001642c:	7453 7261 6974 676e 4220 6169 2073 6f4c     Starting Bias Lo
1001643c:	706f 5220 6165 7364 0000 0000 6153 706d     op Reads....Samp
1001644c:	656c 3a73 2520 0a64 0000 0000 6341 6563     les: %d.....Acce
1001645c:	206c 666f 7366 7465 6420 7461 2061 5748     l offset data HW
1001646c:	5453 6220 7469 253d 3a64 2520 2e37 6634     ST bit=%d: %7.4f
1001647c:	2520 2e37 6634 2520 2e37 6634 0a0d 0000      %7.4f %7.4f....
1001648c:	7947 6f72 6f20 6666 6573 2074 6164 6174     Gyro offset data
1001649c:	4820 5357 2054 6962 3d74 6425 203a 3725      HWST bit=%d: %7
100164ac:	342e 2066 3725 342e 2066 3725 342e 0d66     .4f %7.4f %7.4f.
100164bc:	000a 0000 2325 7835 203a 2325 7835 0a0d     ....%#5x: %#5x..
100164cc:	0000 0000 6f43 706d 7361 2073 6f6e 2074     ....Compass not 
100164dc:	6f66 6e75 2e64 0000 7453 7261 6974 676e     found...Starting
100164ec:	4d20 5550 3536 3030 4820 5357 2154 000d      MPU6500 HWST!..
100164fc:	6552 7274 6569 6976 676e 4220 6169 6573     Retrieving Biase
1001650c:	0d73 0000 6552 7274 6569 6976 676e 4220     s...Retrieving B
1001651c:	6169 6573 2073 7245 6f72 2072 202d 6f70     iases Error - po
1001652c:	7373 6269 656c 4920 4332 6520 7272 726f     ssible I2C error
1001653c:	0000 0000 6552 7274 6569 6976 676e 5320     ....Retrieving S
1001654c:	2054 6942 7361 7365 0000 0000 6552 7274     T Biases....Retr
1001655c:	6569 6976 676e 5320 2054 6942 7361 7365     ieving ST Biases
1001656c:	4520 7272 726f 2d20 7020 736f 6973 6c62      Error - possibl
1001657c:	2065 3249 2043 7265 6f72 0072 6552 6461     e I2C error.Read
1001658c:	6e69 2067 544f 2050 6552 6967 7473 7265     ing OTP Register
1001659c:	4520 7272 726f 002e 6341 6563 206c 544f      Error..Accel OT
100165ac:	3a50 6425 202c 6425 202c 6425 000a 0000     P:%d, %d, %d....
100165bc:	4341 4543 3a4c 5243 5449 5245 4149 4120     ACCEL:CRITERIA A
100165cc:	0000 0000 6942 7361 535f 6968 7466 253d     ....Bias_Shift=%
100165dc:	2e37 6634 202c 6942 7361 525f 6765 253d     7.4f, Bias_Reg=%
100165ec:	2e37 6634 202c 6942 7361 485f 5357 3d54     7.4f, Bias_HWST=
100165fc:	3725 342e 0d66 000a 544f 2050 6176 756c     %7.4f...OTP valu
1001660c:	3a65 2520 2e37 6634 0a0d 0000 6172 6974     e: %7.4f....rati
1001661c:	3d6f 3725 342e 2c66 7420 7268 7365 6f68     o=%7.4f, thresho
1001662c:	646c 253d 2e37 6634 0a0d 0000 4341 4543     ld=%7.4f....ACCE
1001663c:	204c 6146 6c69 4120 6978 2073 203d 6425     L Fail Axis = %d
1001664c:	000a 0000 4341 4543 3a4c 5243 5449 5245     ....ACCEL:CRITER
1001665c:	4149 4220 000d 0000 694d 206e 474d 203a     IA B....Min MG: 
1001666c:	3725 342e 0d66 000a 614d 2078 474d 203a     %7.4f...Max MG: 
1001667c:	3725 342e 0d66 000a 6942 7361 735f 6968     %7.4f...Bias_shi
1001668c:	7466 253d 2e37 6634 202c 7473 253d 2e37     ft=%7.4f, st=%7.
1001669c:	6634 202c 6572 3d67 3725 342e 0a66 0000     4f, reg=%7.4f...
100166ac:	6341 6563 206c 4146 4c49 6120 6978 3a73     Accel FAIL axis:
100166bc:	6425 3c20 203d 3232 6d35 2067 726f 3e20     %d <= 225mg or >
100166cc:	203d 3736 6d35 0a67 0000 0000 6341 6563     = 675mg.....Acce
100166dc:	3a6c 5243 5449 5245 4149 4320 203a 6962     l:CRITERIA C: bi
100166ec:	7361 6c20 7365 2073 6874 6e61 2520 2e37     as less than %7.
100166fc:	6634 000a 4146 4c49 4445 203a 6341 6563     4f..FAILED: Acce
1001670c:	206c 7861 7369 253a 2064 203d 6c25 2064     l axis:%d = %ld 
1001671c:	203e 3035 6d30 0a67 0000 0000 6341 6563     > 500mg.....Acce
1001672c:	206c 6553 666c 5420 7365 2074 6552 7573     l Self Test Resu
1001673c:	746c 3a73 2520 0a64 0000 0000 7947 6f72     lts: %d.....Gyro
1001674c:	4f20 5054 253a 2c64 2520 2c64 2520 0d64      OTP:%d, %d, %d.
1001675c:	000a 0000 5947 4f52 433a 4952 4554 4952     ....GYRO:CRITERI
1001676c:	2041 0041 7947 6f72 4620 6961 206c 7841     A A.Gyro Fail Ax
1001677c:	7369 3d20 2520 0a64 0000 0000 5947 4f52     is = %d.....GYRO
1001678c:	433a 4952 4554 4952 2041 0d42 0000 0000     :CRITERIA B.....
1001679c:	614d 2078 5044 3a53 2520 2e37 6634 0a0d     Max DPS: %7.4f..
100167ac:	0000 0000 5947 4f52 4620 4941 204c 7861     ....GYRO FAIL ax
100167bc:	7369 253a 2064 7267 6165 6574 2072 6874     is:%d greater th
100167cc:	6e61 3620 6430 7370 000a 0000 7947 6f72     an 60dps....Gyro
100167dc:	433a 4952 4554 4952 2041 3a43 6220 6169     :CRITERIA C: bia
100167ec:	2073 656c 7373 7420 6168 206e 3725 342e     s less than %7.4
100167fc:	0a66 0000 4146 4c49 4445 203a 7947 6f72     f...FAILED: Gyro
1001680c:	6120 6978 3a73 6425 3d20 2520 646c 3e20      axis:%d = %ld >
1001681c:	3220 6430 7370 000a 7947 6f72 5320 6c65      20dps..Gyro Sel
1001682c:	2066 6554 7473 5220 7365 6c75 7374 203a     f Test Results: 
1001683c:	6425 000a 6f43 706d 7361 2073 6553 666c     %d..Compass Self
1001684c:	5420 7365 2074 6552 7573 746c 3a73 2520      Test Results: %
1001685c:	0a64 0000 7845 7469 6e69 2067 5748 5453     d...Exiting HWST
1001686c:	0000 0000                                   ....

10016870 <hw>:
10016870:	0069 0400 0080 0141 0000 0100 1333 0000     i.....A.....3...

10016880 <reg>:
10016880:	1975 0c1a 236a 1c1b 1e1d 201f 7472 3b43     u...j#..... rtC;
10016890:	3841 3a39 6b69 376c 776f 6d24 706e 2625     A89:ikl7ow$mnp%&
100168a0:	2827 2a29 6334 6764 0049 0000 cd4c 006c     '()*4cdgI...L.l.
100168b0:	c90c 002c 5636 0076 4626 0066 f2fe c4ab     ..,.6Vv.&Ff.....
100168c0:	f1aa dfdf afbb dfdf aab8 8db3 98b4 350d     ...............5
100168d0:	005d 0000 aab8 aaaa 88b0 c5c3 00c7 0000     ]...............
100168e0:	b1d8 f3b9 a38b b691 b409 00d9 b1da f3b9     ................
100168f0:	a38b b691 b4da 00da 735b 736d 625f 656c     ........[sms_ble
10016900:	705f 6961 5f72 6572 7571 7365 5f74 6e66     _pair_request_fn
10016910:	095d 6150 7269 6e69 2067 6572 7571 7365     ].Pairing reques
10016920:	2e74 2e2e 4220 656e 2077 6425 202c 4c42     t... Bnew %d, BL
10016930:	2045 7830 3025 7832 202c 3154 2520 2c64     E 0x%02x, T1 %d,
10016940:	5420 2032 6425 0000 735b 736d 625f 656c      T2 %d..[sms_ble
10016950:	705f 776f 7265 645f 776f 5d6e 0000 0000     _power_down]....
10016960:	735b 736d 625f 656c 705f 776f 7265 645f     [sms_ble_power_d
10016970:	776f 5d6e 5309 6f74 7070 6e69 2067 6f63     own].Stopping co
10016980:	6d6d 6e61 2064 6572 6563 7669 6465 6420     mmand received d
10016990:	7275 6e69 2067 6461 6576 7472 7369 6d65     uring advertisem
100169a0:	6e65 2e74 5320 6f74 7070 6e69 2e67 2e2e     ent. Stopping...
100169b0:	0020 0000 6166 6c69 6465 2121 0021 0000      ...failed!!!...
100169c0:	6f64 656e 0021 0000 735b 736d 625f 656c     done!...[sms_ble
100169d0:	705f 776f 7265 645f 776f 5d6e 0909 6544     _power_down]..De
100169e0:	6976 6563 7020 6961 6572 2e64 2e2e 6420     vice paired... d
100169f0:	7369 6261 696c 676e 6920 746e 7265 7572     isabling interru
10016a00:	7470 2073 2026 7773 7469 6863 6e69 2067     pts & switching 
10016a10:	6f64 6e77 7320 6e65 6f73 7372 0000 0000     down sensors....
10016a20:	735b 736d 625f 656c 705f 776f 7265 645f     [sms_ble_power_d
10016a30:	776f 5d6e 0909 7543 7272 6e65 6c74 2079     own]..Currently 
10016a40:	6e69 6964 6163 6974 676e 0000 735b 736d     indicating..[sms
10016a50:	625f 656c 705f 776f 7265 645f 776f 5d6e     _ble_power_down]
10016a60:	0909 6544 6976 6563 6320 6e6f 656e 7463     ..Device connect
10016a70:	6465 2e2e 202e 6964 6373 6e6f 656e 7463     ed... disconnect
10016a80:	6e69 0067 735b 736d 625f 656c 615f 7664     ing.[sms_ble_adv
10016a90:	725f 7065 726f 5f74 6e66 095d 6441 6576     _report_fn].Adve
10016aa0:	7472 7369 6d65 6e65 2074 6974 656d 756f     rtisement timeou
10016ab0:	2e74 2e2e 0000 0000 735b 736d 625f 656c     t.......[sms_ble
10016ac0:	635f 6e6f 656e 7463 6465 665f 5d6e 0909     _connected_fn]..
10016ad0:	6544 6976 6563 2073 6f63 6e6e 6365 6574     Devices connecte
10016ae0:	2e64 2e2e 0000 0000 735b 736d 625f 656c     d.......[sms_ble
10016af0:	705f 6961 6572 5f64 6e66 005d 735b 736d     _paired_fn].[sms
10016b00:	625f 656c 615f 7664 7265 6974 6573 095d     _ble_advertise].
10016b10:	6441 6576 7472 7369 6d65 6e65 2074 6164     Advertisement da
10016b20:	6174 7320 7465 6620 6961 656c 2164 0000     ta set failed!..
10016b30:	735b 736d 625f 656c 615f 7664 7265 6974     [sms_ble_adverti
10016b40:	6573 095d 4209 454c 5320 6174 7472 6465     se]..BLE Started
10016b50:	4120 7664 7265 6974 6573 656d 746e 0000      Advertisement..
10016b60:	735b 736d 735f 7265 6976 6563 615f 7664     [sms_service_adv
10016b70:	7265 6974 6573 095d 4c42 2045 6441 6576     ertise].BLE Adve
10016b80:	7472 7369 6d65 6e65 2074 7473 7261 2074     rtisement start 
10016b90:	6166 6c69 6465 203a 6572 7361 6e6f 3020     failed: reason 0
10016ba0:	2578 0078 735b 736d 625f 656c 645f 7369     x%x.[sms_ble_dis
10016bb0:	6f63 6e6e 6365 6574 5f64 6e66 095d 6550     connected_fn].Pe
10016bc0:	7265 6420 7369 6f63 6e6e 6365 6574 2e64     er disconnected.
10016bd0:	2e2e 4220 656e 2077 6425 202c 4c42 2045     .. Bnew %d, BLE 
10016be0:	7830 3025 7832 202c 3154 2520 2c64 5420     0x%02x, T1 %d, T
10016bf0:	2032 6425 0000 0000 0a0d 6e63 3a74 2520     2 %d......cnt: %
10016c00:	0064 0000                                   d...

10016c04 <sms_ble_gap_cb>:
	...
10016c10:	a071 1000 0000 0000 a0a5 1000 a1b5 1000     q...............
	...
10016c28:	a0ed 1000 9e8d 1000 0000 0000 0000 0000     ................
	...

10016c50 <sms_ble_gatt_server_cb>:
10016c50:	9ed9 1000 9f15 1000 0000 0000 0000 0000     ................
	...
10016c78:	735b 736d 625f 7475 6f74 5f6e 6f63 666e     [sms_button_conf
10016c88:	6769 7275 5d65 7009 6f72 6c62 6d65 7720     igure].problem w
10016c98:	6968 656c 7320 7465 6974 676e 7520 2070     hile setting up 
10016ca8:	7562 7474 6e6f 0030 735b 736d 625f 7475     button0.[sms_but
10016cb8:	6f74 5f6e 6f63 666e 6769 7275 5d65 5009     ton_configure].P
10016cc8:	6f72 6c62 6d65 7720 6968 656c 7320 7465     roblem while set
10016cd8:	6974 676e 7520 2070 7562 7474 6e6f 0031     ting up button1.
10016ce8:	735b 736d 625f 7475 6f74 5f6e 6f63 666e     [sms_button_conf
10016cf8:	6769 7275 5d65 5009 6f72 6c62 6d65 7720     igure].Problem w
10016d08:	6968 656c 7320 7465 6974 676e 7520 2070     hile setting up 
10016d18:	5058 414c 4e49 4445 7520 6573 2072 7562     XPLAINED user bu
10016d28:	7474 6e6f 0000 0000 735b 736d 625f 7475     tton....[sms_but
10016d38:	6f74 5f6e 6567 5f74 7473 7461 5d65 0909     ton_get_state]..
10016d48:	7542 7474 6e6f 7320 6174 6574 203a 6425     Button state: %d
10016d58:	2520 0064 735b 736d 625f 7475 6f74 5f6e      %d.[sms_button_
10016d68:	6e66 2d5d 0030 0000 735b 736d 625f 7475     fn]-0...[sms_but
10016d78:	6f74 5f6e 6e66 2d5d 0031 0000 735b 736d     ton_fn]-1...[sms
10016d88:	625f 7475 6f74 5f6e 6e66 095d 5309 6174     _button_fn]..Sta
10016d98:	7472 6e69 2067 6573 736e 726f 2073 4228     rting sensors (B
10016da8:	2930 0000 735b 736d 625f 7475 6f74 5f6e     0)..[sms_button_
10016db8:	6e66 095d 0909 6f4e 2074 7375 6465 7320     fn]...Not used s
10016dc8:	6174 6574 2e73 2e2e 0000 0000 735b 736d     tates.......[sms
10016dd8:	625f 7475 6f74 5f6e 6e66 095d 5309 6174     _button_fn]..Sta
10016de8:	7472 6e69 2067 6573 736e 726f 2073 4228     rting sensors (B
10016df8:	2931 0000 735b 736d 625f 7475 6f74 5f6e     1)..[sms_button_
10016e08:	6e66 095d 7453 6c69 206c 6e69 6964 6163     fn].Still indica
10016e18:	6974 676e 2e2e 002e 735b 736d 625f 7475     ting....[sms_but
10016e28:	6f74 5f6e 6564 6966 656e 735f 7265 6976     ton_define_servi
10016e38:	6563 5d73 5309 7265 6976 6563 2073 6564     ces].Services de
10016e48:	6966 696e 676e 6620 6961 656c 2c64 7220     fining failed, r
10016e58:	6165 6f73 206e 7830 7825 0000 735b 736d     eason 0x%x..[sms
10016e68:	625f 7475 6f74 5f6e 6564 6966 656e 735f     _button_define_s
10016e78:	7265 6976 6563 5d73 5309 7265 6976 6563     ervices].Service
10016e88:	2073 6564 6966 656e 2c64 5320 534d 6220     s defined, SMS b
10016e98:	7475 6f74 206e 6168 646e 656c 203a 6425     utton handle: %d
10016ea8:	0000 0000 7250 626f 656c 206d 6877 6c69     ....Problem whil
10016eb8:	2065 6573 7474 6e69 2067 7067 6f69 7020     e setting gpio p
10016ec8:	6e69 0000 7325 2e2e 092e 4209 702d 6572     in..%s.....B-pre
10016ed8:	2076 6425 202c 2d42 7563 2072 6425 202c     v %d, B-cur %d, 
10016ee8:	4c42 2045 7830 3025 7832 202c 3154 2520     BLE 0x%02x, T1 %
10016ef8:	2c64 5420 2032 6425 202c 4d53 2053 6425     d, T2 %d, SMS %d
10016f08:	0000 0000 3269 2063 7277 7469 6e69 2067     ....i2c writing 
10016f18:	6f74 3020 2578 3230 2078 7461 3020 2578     to 0x%02x at 0x%
10016f28:	3230 2e78 2e2e 6420 7461 3a61 0020 0000     02x... data: ...
10016f38:	7830 3025 7832 0020 3269 2063 6572 6461     0x%02x .i2c read
10016f48:	6e69 2067 7266 6d6f 3020 2578 3230 2078     ing from 0x%02x 
10016f58:	7461 3020 2578 3230 2e78 2e2e 6420 7461     at 0x%02x... dat
10016f68:	3a61 0020 735b 736d 695f 756d 635f 6e6f     a: .[sms_imu_con
10016f78:	6966 7567 6572 675f 6970 5d6f 5009 6f72     figure_gpio].Pro
10016f88:	6c62 6d65 7720 6968 656c 7320 7465 6974     blem while setti
10016f98:	676e 7520 2070 4d49 2055 5244 5944 7020     ng up IMU DRDY p
10016fa8:	6e69 0000 735b 736d 695f 756d 635f 6e6f     in..[sms_imu_con
10016fb8:	6966 7567 6572 675f 6970 5d6f 5009 6f72     figure_gpio].Pro
10016fc8:	6c62 6d65 7720 6968 656c 7320 7465 6974     blem while setti
10016fd8:	676e 7520 2070 504d 2055 4356 2043 6970     ng up MPU VCC pi
10016fe8:	006e 0000 6e49 7469 6169 696c 697a 676e     n...Initializing
10016ff8:	4d20 5550 2e2e 002e 6620 6961 656c 2164      MPU.... failed!
10017008:	0000 0000 6553 7474 6e69 2067 7075 4d20     ....Setting up M
10017018:	5550 2e2e 002e 0000 735b 736d 6d5f 7570     PU......[sms_mpu
10017028:	645f 6665 6e69 5f65 6573 7672 6369 7365     _define_services
10017038:	095d 6553 7672 6369 7365 6420 6665 6e69     ].Services defin
10017048:	6e69 2067 6166 6c69 6465 202c 6572 7361     ing failed, reas
10017058:	6e6f 3020 2578 0078 735b 736d 6d5f 7570     on 0x%x.[sms_mpu
10017068:	645f 6665 6e69 5f65 6573 7672 6369 7365     _define_services
10017078:	095d 6553 7672 6369 7365 6420 6665 6e69     ].Services defin
10017088:	6465 202c 4d53 2053 504d 2055 6168 646e     ed, SMS MPU hand
10017098:	656c 203a 6425 0000 735b 736d 6c5f 6465     le: %d..[sms_led
100170a8:	675f 6970 5f6f 6e69 7469 095d 7270 626f     _gpio_init].prob
100170b8:	656c 206d 6877 6c69 2065 6573 7474 6e69     lem while settin
100170c8:	2067 7075 6c20 6465 0030 0000 735b 736d     g up led0...[sms
100170d8:	705f 6572 7373 7275 5f65 6f63 666e 6769     _pressure_config
100170e8:	7275 5f65 7067 6f69 095d 7270 626f 656c     ure_gpio].proble
100170f8:	206d 6877 6c69 2065 6573 7474 6e69 2067     m while setting 
10017108:	7075 5620 6363 7020 6e69 0000 735b 736d     up Vcc pin..[sms
10017118:	705f 6572 7373 7275 5f65 7473 7261 7574     _pressure_startu
10017128:	5d70 0909 7453 7261 6974 676e 7020 6572     p]..Starting pre
10017138:	7373 7275 2065 6573 736e 726f 0000 0000     ssure sensor....
10017148:	735b 736d 705f 6572 7373 7275 5f65 7473     [sms_pressure_st
10017158:	7261 7574 5d70 0909 4609 6961 656c 2064     artup]...Failed 
10017168:	6f74 6920 696e 6974 6c61 7a69 2065 7270     to initialize pr
10017178:	7365 7573 6572 6420 7665 6369 0065 0000     essure device...
10017188:	735b 736d 705f 6572 7373 7275 5f65 736d     [sms_pressure_ms
10017198:	3835 635f 6c61 7563 616c 6574 205d 6574     58_calculate] te
100171a8:	706d 7265 7461 7275 2065 203d 6c25 2064     mperature = %ld 
100171b8:	7020 6572 7373 7275 2065 203d 6c25 0064      pressure = %ld.
100171c8:	735b 736d 705f 6572 7373 7275 5f65 6f70     [sms_pressure_po
100171d8:	6c6c 645f 7461 5d61 5309 6174 7472 6e69     ll_data].Startin
100171e8:	2067 6164 6174 7020 6c6f 696c 676e 0000     g data polling..
100171f8:	735b 736d 705f 6572 7373 7275 5f65 736d     [sms_pressure_ms
10017208:	3835 705f 6c6f 5f6c 6164 6174 205d 7270     58_poll_data] pr
10017218:	626f 656c 206d 6572 6461 6e69 2067 736d     oblem reading ms
10017228:	3835 6420 7461 0061 735b 736d 705f 6572     58 data.[sms_pre
10017238:	7373 7275 5f65 6564 6966 656e 735f 7265     ssure_define_ser
10017248:	6976 6563 5d73 5309 7265 6976 6563 2073     vices].Services 
10017258:	6564 6966 696e 676e 6620 6961 656c 2c64     defining failed,
10017268:	7220 6165 6f73 206e 7830 7825 0000 0000      reason 0x%x....
10017278:	735b 736d 705f 6572 7373 7275 5f65 6564     [sms_pressure_de
10017288:	6966 656e 735f 7265 6976 6563 5d73 5309     fine_services].S
10017298:	7265 6976 6563 2073 6564 6966 656e 2c64     ervices defined,
100172a8:	5320 534d 7020 6572 7373 7275 2065 6168      SMS pressure ha
100172b8:	646e 656c 203a 6425 0000 0000 735b 736d     ndle: %d....[sms
100172c8:	735f 6e65 6f73 7372 735f 6977 6374 5d68     _sensors_switch]
100172d8:	0909 4309 756f 646c 276e 2074 6e69 7469     ...Couldn't init
100172e8:	6169 696c 657a 4d20 5550 0000 735b 736d     ialize MPU..[sms
100172f8:	645f 6175 746c 6d69 7265 5f31 6e66 005d     _dualtimer1_fn].
10017308:	735b 736d 645f 6175 746c 6d69 7265 5f31     [sms_dualtimer1_
10017318:	6e66 095d 5309 6174 7472 6e69 2067 6573     fn]..Starting se
10017328:	736e 726f 2073 7328 7568 7474 6e69 2067     nsors (shutting 
10017338:	6f64 6e77 2e29 2e2e 0000 0000 735b 736d     down).......[sms
10017348:	645f 6175 746c 6d69 7265 5f32 6e66 005d     _dualtimer2_fn].
10017358:	2e20 2e2e 6967 6976 676e 7520 2170 0000      ...giving up!..
10017368:	2e20 2e2e 6177 7469 6e69 2e67 2e2e 6320      ...waiting... c
10017378:	756f 746e 7265 203a 6425 0000 735b 736d     ounter: %d..[sms
10017388:	645f 6175 746c 6d69 7265 5f32 6e66 095d     _dualtimer2_fn].
10017398:	4209 696c 6b6e 6e69 2067 7473 7261 7574     .Blinking startu
100173a8:	2e70 2e2e 0000 0000 735b 736d 645f 6175     p.......[sms_dua
100173b8:	746c 6d69 7265 5f32 6e66 095d 4209 696c     ltimer2_fn]..Bli
100173c8:	6b6e 6e69 2067 6873 7475 6f64 6e77 2e2e     nking shutdown..
100173d8:	002e 0000 735b 736d 645f 6175 746c 6d69     ....[sms_dualtim
100173e8:	7265 5f32 6e66 095d 5009 776f 7265 6e69     er2_fn]..Powerin
100173f8:	2067 666f 2e66 2e2e 0000 0000 c824 1000     g off.......$...
10017408:	c832 1000 c840 1000 c84e 1000 c85c 1000     2...@...N...\...
10017418:	c86a 1000 c878 1000 c888 1000 c898 1000     j...x...........
10017428:	c8a8 1000 c8b8 1000 c8c8 1000 c8d8 1000     ................
10017438:	c8e8 1000 c8f8 1000 c908 1000 c918 1000     ................
10017448:	c928 1000 c938 1000 c948 1000 c958 1000     (...8...H...X...
10017458:	c968 1000 c978 1000 c988 1000 c998 1000     h...x...........
10017468:	c9a8 1000 c9b8 1000 c9c8 1000 c9d6 1000     ................
10017478:	c9e4 1000 c9f2 1000 ca00 1000 ca0e 1000     ................
10017488:	ca1c 1000 ca2a 1000 ca38 1000 ca48 1000     ....*...8...H...
10017498:	ca58 1000 ca68 1000 ca78 1000 ca88 1000     X...h...x.......
100174a8:	ca98 1000 caa8 1000 cab8 1000 cac8 1000     ................
100174b8:	cad8 1000 cae8 1000 caf8 1000 cb08 1000     ................
100174c8:	cb18 1000 cb28 1000 cb38 1000 cb46 1000     ....(...8...F...
100174d8:	cb54 1000 cb80 1000 cb8e 1000 cb9c 1000     T...............
100174e8:	cbaa 1000 cbb8 1000 cbc6 1000 cbd4 1000     ................
100174f8:	cbe2 1000 cbf0 1000 cbfe 1000 cc0c 1000     ................
10017508:	cc1a 1000 cc28 1000 cc36 1000 cc44 1000     ....(...6...D...
10017518:	cc52 1000 cc60 1000 cc6e 1000 cc7c 1000     R...`...n...|...
10017528:	cc8a 1000 cc98 1000 cca6 1000 ccb4 1000     ................
10017538:	ccc2 1000 ccd0 1000 ccde 1000 ccec 1000     ................
10017548:	ccfa 1000 cd08 1000 cd16 1000 cd24 1000     ............$...
10017558:	cd32 1000 cd40 1000 cd4e 1000 cd5c 1000     2...@...N...\...
10017568:	cd6a 1000 cd78 1000 cd86 1000 cd94 1000     j...x...........
10017578:	cda2 1000 cdb0 1000 cdbe 1000 cdcc 1000     ................
10017588:	cdda 1000 cde8 1000 cdf6 1000 ce04 1000     ................
10017598:	ce12 1000 ce20 1000 ce2e 1000 ce3c 1000     .... .......<...
100175a8:	ce4a 1000 ce58 1000 ce66 1000 cf00 1000     J...X...f.......
100175b8:	cf28 1000 cf50 1000 cf78 1000 d1b8 1000     (...P...x.......
100175c8:	cfa8 1000 cfc0 1000 d038 1000 d050 1000     ........8...P...
100175d8:	cfd8 1000 cff0 1000 d008 1000 d020 1000     ............ ...
100175e8:	d068 1000 d32c 1000 d32c 1000 d32c 1000     h...,...,...,...
100175f8:	d32c 1000 d32c 1000 d32c 1000 d32c 1000     ,...,...,...,...
10017608:	d32c 1000 d110 1000 d128 1000 d140 1000     ,.......(...@...
10017618:	d1ce 1000 d098 1000 d32c 1000 d32c 1000     ........,...,...
10017628:	d32c 1000 d32c 1000 d32c 1000 d32c 1000     ,...,...,...,...
10017638:	d158 1000 d170 1000 d188 1000 d1a0 1000     X...p...........
10017648:	d32c 1000 d2e4 1000 d2fc 1000 d32c 1000     ,...........,...
10017658:	d32c 1000 d1fa 1000 d210 1000 d226 1000     ,...........&...
10017668:	d23c 1000 d32c 1000 d32c 1000 d32c 1000     <...,...,...,...
10017678:	d32c 1000 d32c 1000 d32c 1000 d32c 1000     ,...,...,...,...
10017688:	d32c 1000 ceec 1000 cf14 1000 cf3c 1000     ,...........<...
10017698:	cf64 1000 cf90 1000 d080 1000 d0b0 1000     d...............
100176a8:	d0c8 1000 d0e0 1000 d0f8 1000 d1e4 1000     ................
100176b8:	d252 1000 d2cc 1000 d314 1000 da4e 1000     R...........N...
100176c8:	da60 1000 da36 1000 da36 1000 da36 1000     `...6...6...6...
100176d8:	da4e 1000 da36 1000 da36 1000 e452 1000     N...6...6...R...
100176e8:	e4c6 1000 e43a 1000 e4cc 1000 e440 1000     ....:.......@...
100176f8:	e446 1000 e44c 1000 ebac 1000 ebac 1000     F...L...........
10017708:	ebac 1000 ebac 1000 ebac 1000 ebac 1000     ................
10017718:	ebac 1000 ebac 1000 ebac 1000 ebac 1000     ................
10017728:	ebac 1000 ebac 1000 ebac 1000 ebac 1000     ................
10017738:	ebac 1000 ebac 1000 ebac 1000 ebac 1000     ................
10017748:	ebac 1000 ebca 1000 ebca 1000 ebca 1000     ................
10017758:	ebca 1000 ebca 1000 ebca 1000 ebca 1000     ................
10017768:	ebca 1000 ebca 1000 ebca 1000 ebec 1000     ................
10017778:	ebec 1000 ebec 1000 ebec 1000 ebec 1000     ................
10017788:	ebec 1000 ebec 1000 ebec 1000 ebec 1000     ................
10017798:	ebec 1000 ec1c 1000 ec1c 1000 ec1c 1000     ................
100177a8:	ec1c 1000 ec1c 1000 ec1c 1000 ec36 1000     ............6...
100177b8:	ec36 1000 ec36 1000 ec36 1000 ec36 1000     6...6...6...6...
100177c8:	ec36 1000 ec36 1000 ec36 1000 ec36 1000     6...6...6...6...
100177d8:	ec50 1000 ec50 1000 ec72 1000 ec72 1000     P...P...r...r...
100177e8:	ec8c 1000 ec72 1000 3231 3433 3635 0000     ....r...123456..
100177f8:	ab00 efcd cdab 00ef                         ........

10017800 <ble_mgr_gatt_server_handle>:
	...
10017818:	d949 1000 d971 1000 d9b9 1000 0000 0000     I...q...........
10017828:	6e55 6564 6966 656e 2064 7645 6e65 2074     Undefined Event 
10017838:	6552 6563 7669 6465 0000 0000 6353 6e61     Received....Scan
10017848:	696e 676e 2020 6166 6c69 6465 0000 0000     ning  failed....
10017858:	6441 6576 7472 7369 6e69 2067 6166 6c69     Advertising fail
10017868:	6465 0000 4c42 2d45 544d 2055 6843 6e61     ed..BLE-MTU Chan
10017878:	6567 2c64 4320 6e6f 656e 7463 6f69 206e     ged, Connection 
10017888:	6148 646e 656c 203a 6425 202c 654e 2077     Handle: %d, New 
10017898:	6156 756c 3a65 2520 0064 0000 544d 2055     Value: %d...MTU 
100178a8:	6843 6e61 6567 2c64 4320 6e6f 656e 7463     Changed, Connect
100178b8:	6f69 206e 6148 646e 656c 253a 2c64 4f20     ion Handle:%d, O
100178c8:	6570 6172 6974 6e6f 253a 0064 544d 2055     peration:%d.MTU 
100178d8:	6843 6e61 6567 4620 6961 656c 2c64 4320     Change Failed, C
100178e8:	6e6f 656e 7463 6f69 206e 6148 646e 656c     onnection Handle
100178f8:	253a 2c64 4f20 6570 6172 6974 6e6f 253a     :%d, Operation:%
10017908:	0064 0000 6843 7261 5720 6972 6574 4320     d...Char Write C
10017918:	646d 4320 6d6f 6c70 7465 2c65 4320 6e6f     md Complete, Con
10017928:	656e 7463 6f69 206e 6148 646e 656c 253a     nection Handle:%
10017938:	2c64 4f20 6570 6172 6974 6e6f 253a 0064     d, Operation:%d.
10017948:	6843 7261 5720 6972 6574 4320 646d 4620     Char Write Cmd F
10017958:	6961 656c 2c64 4320 6e6f 656e 7463 6f69     ailed, Connectio
10017968:	206e 6148 646e 656c 253a 2c64 4f20 6570     n Handle:%d, Ope
10017978:	6172 6974 6e6f 253a 0064 0000 7453 7461     ration:%d...Stat
10017988:	2065 6f4e 2074 6148 646e 656c 2064 6425     e Not Handled %d
10017998:	0000 0000 6544 6976 6563 6420 7369 6f63     ....Device disco
100179a8:	6e6e 6365 6574 2064 6552 7361 6e6f 303a     nnected Reason:0
100179b8:	2578 3230 2078 6148 646e 656c 303d 2578     x%02x Handle=0x%
100179c8:	0078 0000 5441 425f 454c 435f 4e4f 5f4e     x...AT_BLE_CONN_
100179d8:	4150 4152 5f4d 5055 4144 4554 0020 0000     PARAM_UPDATE ...
100179e8:	6e45 7263 7079 6974 6e6f 6620 6961 656c     Encryption faile
100179f8:	0064 0000 6e45 7263 7079 6974 6e6f 6320     d...Encryption c
10017a08:	6d6f 6c70 7465 6465 7320 6375 6563 7373     ompleted success
10017a18:	7566 6c6c 0079 0000 4c42 2045 6544 6976     fully...BLE Devi
10017a28:	6563 6e20 746f 6620 756f 646e 6520 636e     ce not found enc
10017a38:	7972 7470 6f69 206e 6e69 6f66 0000 0000     ryption info....
10017a48:	6e49 6f66 443a 7665 6369 2065 6f66 6e75     Info:Device foun
10017a58:	2064 6461 7264 7365 2073 255b 5d64 2020     d address [%d]  
10017a68:	7830 3025 5832 3025 5832 3025 5832 3025     0x%02X%02X%02X%0
10017a78:	5832 3025 5832 3025 5832 0020 6e49 6f66     2X%02X%02X .Info
10017a88:	6d3a 7861 6d69 6d75 6e20 2e6f 666f 7320     :maximum no.of s
10017a98:	6163 206e 6564 6976 6563 7220 6165 6863     can device reach
10017aa8:	6465 2e2e 532e 6f74 7070 6e69 2067 6353     ed...Stopping Sc
10017ab8:	6e61 0000 6146 6c69 6465 7420 206f 7473     an..Failed to st
10017ac8:	706f 7320 6163 6e6e 6e69 0067 7830 3025     op scanning.0x%0
10017ad8:	5832 202c 0000 0000 5343 4b52 203a 0000     2X, ....CSRK: ..
10017ae8:	5249 3a4b 0000 0000 6150 7269 6e69 2067     IRK:....Pairing 
10017af8:	6166 6c69 6465 2e2e 442e 7369 6f63 6e6e     failed...Disconn
10017b08:	6365 6974 676e 0000 6944 6373 6e6f 656e     ecting..Disconne
10017b18:	7463 5220 7165 6575 7473 4620 6961 656c     ct Request Faile
10017b28:	0064 0000 6150 7269 6e69 2067 7270 636f     d...Pairing proc
10017b38:	6465 7275 2065 6f63 706d 656c 6574 2064     edure completed 
10017b48:	7573 6363 7365 6673 6c75 796c 0000 0000     successfully....
10017b58:	4c42 2045 6544 6976 6563 6e20 746f 6620     BLE Device not f
10017b68:	756f 646e 7420 206f 7473 726f 2065 6874     ound to store th
10017b78:	2065 6170 7269 6e69 2067 6e69 6f66 0000     e pairing info..
10017b88:	544c 3a4b 0020 0000 6e45 7263 7079 6974     LTK: ...Encrypti
10017b98:	6e6f 4e20 746f 7320 6174 7472 6465 0000     on Not started..
10017ba8:	6c53 7661 2065 6553 7563 6972 7974 5220     Slave Security R
10017bb8:	7165 2d20 4120 7475 6568 746e 6369 7461     eq - Authenticat
10017bc8:	6f69 206e 6146 6c69 6465 0000 6547 656e     ion Failed..Gene
10017bd8:	6172 6574 2064 544c 3a4b 0020 7830 3025     rated LTK: .0x%0
10017be8:	5832 0020 6553 646e 6e69 2067 6170 7269     2X .Sending pair
10017bf8:	6e69 2067 6572 7073 6e6f 6573 0000 0000     ing response....
10017c08:	6150 7269 5220 7165 6575 7473 2d20 4120     Pair Request - A
10017c18:	7475 6568 746e 6369 7461 6f69 206e 6146     uthentication Fa
10017c28:	6c69 6465 0000 0000 6e45 6574 2072 6874     iled....Enter th
10017c38:	2065 6150 7373 656b 2879 2d36 6944 6967     e Passkey(6-Digi
10017c48:	2974 6920 206e 6554 6d72 6e69 6c61 003a     t) in Terminal:.
10017c58:	6950 206e 6954 656d 756f 0074 6944 6373     Pin Timeout.Disc
10017c68:	6e6f 656e 7463 6e69 2067 2e2e 002e 0000     onnecting ......
10017c78:	6c50 6165 6573 4520 746e 7265 7420 6568     Please Enter the
10017c88:	6620 6c6f 6f6c 6977 676e 5020 7361 2d73      following Pass-
10017c98:	6f63 6564 6f28 206e 746f 6568 2072 6544     code(on other De
10017ca8:	6976 6563 3a29 0000 6150 7269 6b2d 7965     vice):..Pair-key
10017cb8:	7220 7065 796c 6620 6961 656c 0064 0000      reply failed...
10017cc8:	4f4f 2042 6546 7461 7275 2065 6f4e 2074     OOB Feature Not 
10017cd8:	7573 7070 726f 6574 0064 0000 6e45 6574     supported...Ente
10017ce8:	6572 2064 6150 7373 632d 646f 3a65 0000     red Pass-code:..
10017cf8:	4e45 2d43 6552 3a71 4320 6e6f 206e 6148     ENC-Req: Conn Ha
10017d08:	646e 656c 4420 7665 6369 2065 6f46 6e75     ndle Device Foun
10017d18:	3a64 6468 3a6c 6425 0000 0000 6f68 7473     d:hdl:%d....host
10017d28:	6420 7665 6369 2065 6465 7669 2520 0078      device ediv %x.
10017d38:	6570 7265 6420 7665 6369 2065 6465 7669     peer device ediv
10017d48:	2520 0078 6e65 5f63 6572 2071 6465 7669      %x.enc_req ediv
10017d58:	2520 0078 6854 2065 6e69 6564 2078 7369      %x.The index is
10017d68:	2520 0064 4e45 2d43 6552 3a71 4b20 7965      %d.ENC-Req: Key
10017d78:	4620 756f 646e 0000 6150 7269 6e69 2067      Found..Pairing 
10017d88:	6e69 6f66 6d72 7461 6f69 206e 666f 7020     information of p
10017d98:	6565 2072 6564 6976 6563 6920 2073 6f6e     eer device is no
10017da8:	2074 7661 6961 616c 6c62 2e65 0000 0000     t available.....
10017db8:	6c50 6165 6573 7520 706e 6961 2072 6874     Please unpair th
10017dc8:	2065 6564 6976 6563 6620 6f72 206d 6570     e device from pe
10017dd8:	7265 6420 7665 6369 2865 6f6d 6962 656c     er device(mobile
10017de8:	2029 6573 7474 6e69 7367 6d20 6e65 2075     ) settings menu 
10017df8:	6e61 2064 7473 7261 2074 6170 7269 6e69     and start pairin
10017e08:	2067 6761 6961 006e 6e45 7263 7079 6974     g again.Encrypti
10017e18:	6e6f 5220 7165 6575 7473 5220 7065 796c     on Request Reply
10017e28:	4620 6961 656c 0064 6e45 7263 7079 6974      Failed.Encrypti
10017e38:	6e6f 5220 7165 6575 7473 5220 7065 796c     on Request Reply
10017e48:	0000 0000 625b 656c 695f 696e 5d74 0909     ....[ble_init]..
10017e58:	4909 696e 6974 6c61 7a69 6e69 2067 4153     .Initializing SA
10017e68:	424d 3131 0000 0000 625b 656c 695f 696e     MB11....[ble_ini
10017e78:	5d74 0909 4153 424d 3131 4920 696e 6974     t]..SAMB11 Initi
10017e88:	6c61 7a69 7461 6f69 206e 6166 6c69 6465     alization failed
10017e98:	0000 0000 625b 656c 695f 696e 5d74 0909     ....[ble_init]..
10017ea8:	6c50 6165 6573 6320 6568 6b63 7420 6568     Please check the
10017eb8:	7020 776f 7265 6120 646e 6320 6e6f 656e      power and conne
10017ec8:	7463 6f69 206e 202f 6168 6472 6177 6572     ction / hardware
10017ed8:	6320 6e6f 656e 7463 726f 0000 4153 5242      connector..SABR
10017ee8:	2d65 4d53 0053 0000 6544 6976 6563 6e20     e-SMS...Device n
10017ef8:	6d61 2065 6573 2074 6166 6c69 6465 0000     ame set failed..
10017f08:	625b 656c 735f 7465 645f 7665 635f 6e6f     [ble_set_dev_con
10017f18:	6966 5d67 0909 4442 6120 6464 6572 7373     fig]..BD address
10017f28:	6720 7465 6620 6961 656c 0064 625b 656c      get failed.[ble
10017f38:	735f 7465 645f 7665 635f 6e6f 6966 5d67     _set_dev_config]
10017f48:	0909 4442 4120 6464 6572 7373 303a 2578     ..BD Address:0x%
10017f58:	3230 2558 3230 2558 3230 2558 3230 2558     02X%02X%02X%02X%
10017f68:	3230 2558 3230 2c58 4120 6464 6572 7373     02X%02X, Address
10017f78:	5420 7079 3a65 6425 0000 0000 625b 656c      Type:%d....[ble
10017f88:	735f 7465 645f 7665 635f 6e6f 6966 5d67     _set_dev_config]
10017f98:	5309 7465 4220 454c 4420 7665 6369 2065     .Set BLE Device 
10017fa8:	6f63 666e 6769 7275 7461 6f69 206e 6166     configuration fa
10017fb8:	6c69 6465 0000 0000 625b 656c 735f 7465     iled....[ble_set
10017fc8:	645f 7665 635f 6e6f 6966 5d67 5309 7465     _dev_config].Set
10017fd8:	4220 454c 4420 7665 6369 2065 6441 7264      BLE Device Addr
10017fe8:	7365 2073 6166 6c69 6465 0000 6353 6e61     ess failed..Scan
10017ff8:	696e 676e 2e2e 502e 656c 7361 2065 6177     ning...Please wa
10018008:	7469 2e2e 002e 0000 6c53 7661 2065 6573     it......Slave se
10018018:	7563 6972 7974 7220 7165 6575 7473 7320     curity request s
10018028:	6375 6563 7373 7566 006c 0000 6c53 7661     uccessful...Slav
10018038:	2065 6573 7563 6972 7974 7220 7165 6575     e security reque
10018048:	7473 6620 6961 656c 0064 0000 6f43 6e6e     st failed...Conn
10018058:	6365 6574 2064 6f74 7020 6565 2072 6564     ected to peer de
10018068:	6976 6563 7720 7469 2068 6461 7264 7365     vice with addres
10018078:	2073 7830 3025 7832 3025 7832 3025 7832     s 0x%02x%02x%02x
10018088:	3025 7832 3025 7832 3025 7832 0000 0000     %02x%02x%02x....
10018098:	6f43 6e6e 6365 6974 6e6f 4820 6e61 6c64     Connection Handl
100180a8:	2065 6425 0000 0000 6552 6f73 766c 6e69     e %d....Resolvin
100180b8:	2067 6152 646e 6d6f 6120 6464 6572 7373     g Random address
100180c8:	7320 6375 6563 7373 2a2a 0000 6552 6f73      success**..Reso
100180d8:	766c 6e69 2067 6152 646e 6d6f 6120 6464     lving Random add
100180e8:	6572 7373 6620 6961 656c 2a64 002a 0000     ress failed**...
100180f8:	614d 2078 756e 626d 7265 6f20 2066 6f63     Max number of co
10018108:	6e6e 6365 6974 6e6f 7220 6165 6863 6465     nnection reached
10018118:	203a 6425 3d20 3d3d 443e 7369 6f63 6e6e     : %d ===>Disconn
10018128:	6365 6974 676e 2e2e 002e 0000 6544 6976     ecting......Devi
10018138:	6563 4320 6e6f 656e 7463 6f69 206e 6146     ce Connection Fa
10018148:	6c69 6465 2d20 5320 6174 7574 3a73 2520     iled - Status: %
10018158:	0064 0000 2323 2323 2323 2323 2323 6544     d...##########De
10018168:	6976 6563 4620 756f 646e 0000 2323 2323     vice Found..####
10018178:	2323 2323 2323 6544 6976 6563 4e20 746f     ######Device Not
10018188:	4620 756f 646e 0000 6544 6976 6563 6920      Found..Device i
10018198:	7864 253a 0064 0000 0a0d 4c42 2d45 7645     dx:%d.....BLE-Ev
100181a8:	6e65 3a74 6425 0000 4147 5454 535f 7265     ent:%d..GATT_Ser
100181b8:	6576 2072 7645 6e65 3a74 6425 0000 0000     ver Event:%d....
100181c8:	4c42 2d45 614d 616e 6567 3a72 6e55 6e6b     BLE-Manager:Unkn
100181d8:	776f 206e 7645 6e65 3d74 7830 5825 0000     own Event=0x%X..
100181e8:	625b 656c 6d5f 6e61 6761 7265 095d 0909     [ble_manager]...
100181f8:	614d 756e 6166 7463 7275 7265 7320 6570     Manufacturer spe
10018208:	6963 6966 2063 6164 6174 6520 616e 6c62     cific data enabl
10018218:	6465 0000 571c 5a2d 2dbe 5053 0000 0000     ed...W-Z.-SP....
10018228:	4c42 2045 6441 6576 7472 7369 6d65 6e65     BLE Advertisemen
10018238:	2074 6164 6174 7320 7465 6620 6961 656c     t data set faile
10018248:	0064 0000                                   d...

1001824c <ble_mgr_gap_handle>:
1001824c:	d8d5 1000 db85 1000 d8f9 1000 d921 1000     ............!...
1001825c:	0000 0000 e801 1000 da01 1000 da9d 1000     ................
1001826c:	dde1 1000 dc31 1000 dfe1 1000 ddf9 1000     ....1...........
1001827c:	e16d 1000 e2b1 1000 dac1 1000 ea4d 1000     m...........M...
	...
10018298:	fa6a 1000 fa78 1000 fac0 1000 fb04 1000     j...x...........
100182a8:	fb16 1000 fb80 1000 fb98 1000 6d5b 6961     ............[mai
100182b8:	5d6e 0909 0909 6157 696b 676e 7520 2e70     n]....Waking up.
100182c8:	2e2e 0000 6420 6e6f 2165 0000 6d5b 6961     .... done!..[mai
100182d8:	5d6e 0909 0909 6944 6173 6c62 6e69 2067     n]....Disabling 
100182e8:	7562 7474 6e6f 6920 746e 2e2e 002e 0000     button int......
100182f8:	2e2e 4e2e 204f 4f53 5255 4543 2121 0000     ...NO SOURCE!!..
10018308:	2e2e 422e 4e54 0030 6d5b 6961 5d6e 0909     ...BTN0.[main]..
10018318:	0909 7245 6f72 2072 6e69 7320 736d 625f     ..Error in sms_b
10018328:	7475 6f74 5f6e 6e66 2928 0021 2e2e 422e     utton_fn()!....B
10018338:	4e54 0031 2e2e 4d2e 5550 445f 4452 0059     TN1....MPU_DRDY.
10018348:	2e2e 412e 4e4f 545f 4d49 5245 0000 0000     ...AON_TIMER....
10018358:	6d5b 6961 5d6e 0909 0909 6f50 6c6c 6e69     [main]....Pollin
10018368:	2067 7270 7365 7573 6572 6420 7461 2e61     g pressure data.
10018378:	2e2e 0000 6d5b 6961 5d6e 0909 0909 4f41     ....[main]....AO
10018388:	204e 6974 656d 2072 6572 6461 2079 6877     N timer ready wh
10018398:	6c69 2065 6e69 6964 6163 6974 676e 2e2e     ile indicating..
100183a8:	202e 6b73 7069 6970 676e 0000 2e2e 442e     . skipping.....D
100183b8:	4155 544c 4d49 5245 0031 0000 2e2e 442e     UALTIMER1......D
100183c8:	4155 544c 4d49 5245 0032 0000 2e2e 3f2e     UALTIMER2......?
100183d8:	003f 0000 6d5b 6961 5d6e 0909 0909 6e45     ?...[main]....En
100183e8:	6261 696c 676e 6220 7475 6f74 206e 6e69     abling button in
100183f8:	2e74 2e2e 0000 0000 6d5b 6961 5d6e 0909     t.......[main]..
10018408:	0909 4c55 2e50 2e2e 0000 0000 2120 0021     ..ULP....... !!.
10018418:	7441 656d 206c 6f43 7072 022e                    Atmel Corp.

10018423 <CSWTCH.45>:
10018423:	0402 0010                                        ...

10018426 <CSWTCH.47>:
10018426:	0300 0301 0303 0303 0303 0303 0303 0202          ...............

10018435 <client_conf_uuid>:
10018435:	2902                                        .)

10018437 <presentation_format_uuid>:
10018437:	2904                                        .)

10018439 <user_desc_uuid>:
10018439:	2901                                        .)

1001843b <server_conf_uuid>:
1001843b:	2903                                        .)

1001843d <extended_props_uuid>:
1001843d:	2900                                        .)

1001843f <include_uuid>:
1001843f:	2802                                        .(

10018441 <char_uuid>:
10018441:	2803 1200 013a 3610 0139 f410 0139 cc10     .(..:..69...9...
10018451:	0139 f410 0139 c010 0139 f410 0139 cc10     9...9...9...9...
10018461:	0139 3610 0139 3610 0139 c010 0139 cc10     9..69..69...9...
10018471:	0139 7810 013a 7810 013a 7810 013a fa10     9..x:..x:..x:...
10018481:	0139 3610 0139 3610 0139 e010 0139 ca10     9..69..69...9...
10018491:	0139 e010 0139 c010 0139 e010 0139 ca10     9...9...9...9...
100184a1:	0139 3610 0139 3610 0139 c010 0139 ca10     9..69..69...9...
100184b1:	0139 7810 013a 7810 013a 7810 013a 8410     9..x:..x:..x:...
100184c1:	013a 7010 013d ce10 013c ce10 013c cc10     :..p=...<...<...
100184d1:	013c 6210 013d 6210 013d 5810 013d cc10     <..b=..b=..X=...
100184e1:	013c 6210 013d 5810 013d 6210 013d cc10     <..b=..X=..b=...
100184f1:	013c 6810 013d 6810 013d 6810 013d f210     <..h=..h=..h=...
10018501:	013d e410 0146 a410 0145 a410 0145 a210     =...F...E...E...
10018511:	0145 bc10 0146 bc10 0146 ae10 0146 a210     E...F...F...F...
10018521:	0145 bc10 0146 ae10 0146 bc10 0146 a210     E...F...F...F...
10018531:	0145 c410 0146 c410 0146 c410 0146 c410     E...F...F...F...
10018541:	0148 4310 0000 4800                              H..C...

10018548 <_global_impure_ptr>:
10018548:	8648 1001                                   H...

1001854c <__sf_fake_stdin>:
	...

1001856c <__sf_fake_stdout>:
	...

1001858c <__sf_fake_stderr>:
	...
100185ac:	2d23 2b30 0020 6c68 004c 6665 4567 4746     #-0+ .hlL.efgEFG
100185bc:	3000 3231 3433 3635 3837 4139 4342 4544     .0123456789ABCDE
100185cc:	0046 3130 3332 3534 3736 3938 6261 6463     F.0123456789abcd
100185dc:	6665 0000                                   ef..

100185e0 <_init>:
100185e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100185e2:	46c0      	nop			; (mov r8, r8)
100185e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
100185e6:	bc08      	pop	{r3}
100185e8:	469e      	mov	lr, r3
100185ea:	4770      	bx	lr

100185ec <__init_array_start>:
100185ec:	100080b1 	.word	0x100080b1

100185f0 <_fini>:
100185f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100185f2:	46c0      	nop			; (mov r8, r8)
100185f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
100185f6:	bc08      	pop	{r3}
100185f8:	469e      	mov	lr, r3
100185fa:	4770      	bx	lr

100185fc <__fini_array_start>:
100185fc:	10008089 	.word	0x10008089
