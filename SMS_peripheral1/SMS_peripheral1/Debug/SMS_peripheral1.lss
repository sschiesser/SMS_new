
SMS_peripheral1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00010600  10008000  10008000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000000ac  10018600  10018600  00018600  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00002ea0  100186ac  100186ac  000186ac  2**2
                  ALLOC
  3 .stack        00001804  1001b54c  1001b54c  000186ac  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000186ac  2**0
                  CONTENTS, READONLY
  5 .comment      000000b4  00000000  00000000  000186d4  2**0
                  CONTENTS, READONLY
  6 .debug_info   0004e682  00000000  00000000  00018788  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00005658  00000000  00000000  00066e0a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000b9dd  00000000  00000000  0006c462  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000d58  00000000  00000000  00077e3f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000de0  00000000  00000000  00078b97  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0002861b  00000000  00000000  00079977  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00017e74  00000000  00000000  000a1f92  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0014712c  00000000  00000000  000b9e06  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00002fa4  00000000  00000000  00200f34  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

10008000 <app_entry>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void app_entry(void)
{
10008000:	b510      	push	{r4, lr}

    /* Initialize the relocate segment */
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
10008002:	4b18      	ldr	r3, [pc, #96]	; (10008064 <app_entry+0x64>)
10008004:	4a18      	ldr	r2, [pc, #96]	; (10008068 <app_entry+0x68>)
10008006:	429a      	cmp	r2, r3
10008008:	d003      	beq.n	10008012 <app_entry+0x12>
        for (; pDest < &_erelocate;) {
1000800a:	4b18      	ldr	r3, [pc, #96]	; (1000806c <app_entry+0x6c>)
1000800c:	4a15      	ldr	r2, [pc, #84]	; (10008064 <app_entry+0x64>)
1000800e:	429a      	cmp	r2, r3
10008010:	d304      	bcc.n	1000801c <app_entry+0x1c>
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
10008012:	4b17      	ldr	r3, [pc, #92]	; (10008070 <app_entry+0x70>)
10008014:	4a17      	ldr	r2, [pc, #92]	; (10008074 <app_entry+0x74>)
10008016:	429a      	cmp	r2, r3
10008018:	d310      	bcc.n	1000803c <app_entry+0x3c>
1000801a:	e01e      	b.n	1000805a <app_entry+0x5a>
1000801c:	4b16      	ldr	r3, [pc, #88]	; (10008078 <app_entry+0x78>)
1000801e:	4a13      	ldr	r2, [pc, #76]	; (1000806c <app_entry+0x6c>)
10008020:	3203      	adds	r2, #3
10008022:	1ad2      	subs	r2, r2, r3
10008024:	0892      	lsrs	r2, r2, #2
10008026:	3201      	adds	r2, #1
10008028:	0092      	lsls	r2, r2, #2
    /* Initialize the relocate segment */
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
        for (; pDest < &_erelocate;) {
1000802a:	2300      	movs	r3, #0
            *pDest++ = *pSrc++;
1000802c:	480d      	ldr	r0, [pc, #52]	; (10008064 <app_entry+0x64>)
1000802e:	490e      	ldr	r1, [pc, #56]	; (10008068 <app_entry+0x68>)
10008030:	58cc      	ldr	r4, [r1, r3]
10008032:	50c4      	str	r4, [r0, r3]
10008034:	3304      	adds	r3, #4
    /* Initialize the relocate segment */
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
        for (; pDest < &_erelocate;) {
10008036:	4293      	cmp	r3, r2
10008038:	d1fa      	bne.n	10008030 <app_entry+0x30>
1000803a:	e7ea      	b.n	10008012 <app_entry+0x12>
1000803c:	4b0f      	ldr	r3, [pc, #60]	; (1000807c <app_entry+0x7c>)
1000803e:	490c      	ldr	r1, [pc, #48]	; (10008070 <app_entry+0x70>)
10008040:	3103      	adds	r1, #3
10008042:	1ac9      	subs	r1, r1, r3
10008044:	0889      	lsrs	r1, r1, #2
10008046:	3101      	adds	r1, #1
10008048:	0089      	lsls	r1, r1, #2
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
1000804a:	2300      	movs	r3, #0
        *pDest++ = 0;
1000804c:	4c09      	ldr	r4, [pc, #36]	; (10008074 <app_entry+0x74>)
1000804e:	2000      	movs	r0, #0
10008050:	191a      	adds	r2, r3, r4
10008052:	6010      	str	r0, [r2, #0]
10008054:	3304      	adds	r3, #4
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
10008056:	428b      	cmp	r3, r1
10008058:	d1fa      	bne.n	10008050 <app_entry+0x50>
        *pDest++ = 0;
    }

    /* Initialize the C library */
    __libc_init_array();
1000805a:	4b09      	ldr	r3, [pc, #36]	; (10008080 <app_entry+0x80>)
1000805c:	4798      	blx	r3

    /* Branch to main function */
    main();
1000805e:	4b09      	ldr	r3, [pc, #36]	; (10008084 <app_entry+0x84>)
10008060:	4798      	blx	r3

    /* return to BLE OS*/
    return;
}
10008062:	bd10      	pop	{r4, pc}
10008064:	10018600 	.word	0x10018600
10008068:	10018600 	.word	0x10018600
1000806c:	100186ac 	.word	0x100186ac
10008070:	1001b54c 	.word	0x1001b54c
10008074:	100186ac 	.word	0x100186ac
10008078:	10018604 	.word	0x10018604
1000807c:	100186b0 	.word	0x100186b0
10008080:	1001519d 	.word	0x1001519d
10008084:	1000f941 	.word	0x1000f941

10008088 <__do_global_dtors_aux>:
10008088:	b510      	push	{r4, lr}
1000808a:	4c06      	ldr	r4, [pc, #24]	; (100080a4 <__do_global_dtors_aux+0x1c>)
1000808c:	7823      	ldrb	r3, [r4, #0]
1000808e:	2b00      	cmp	r3, #0
10008090:	d107      	bne.n	100080a2 <__do_global_dtors_aux+0x1a>
10008092:	4b05      	ldr	r3, [pc, #20]	; (100080a8 <__do_global_dtors_aux+0x20>)
10008094:	2b00      	cmp	r3, #0
10008096:	d002      	beq.n	1000809e <__do_global_dtors_aux+0x16>
10008098:	4804      	ldr	r0, [pc, #16]	; (100080ac <__do_global_dtors_aux+0x24>)
1000809a:	e000      	b.n	1000809e <__do_global_dtors_aux+0x16>
1000809c:	bf00      	nop
1000809e:	2301      	movs	r3, #1
100080a0:	7023      	strb	r3, [r4, #0]
100080a2:	bd10      	pop	{r4, pc}
100080a4:	100186ac 	.word	0x100186ac
100080a8:	00000000 	.word	0x00000000
100080ac:	10018600 	.word	0x10018600

100080b0 <frame_dummy>:
100080b0:	4b08      	ldr	r3, [pc, #32]	; (100080d4 <frame_dummy+0x24>)
100080b2:	b510      	push	{r4, lr}
100080b4:	2b00      	cmp	r3, #0
100080b6:	d003      	beq.n	100080c0 <frame_dummy+0x10>
100080b8:	4907      	ldr	r1, [pc, #28]	; (100080d8 <frame_dummy+0x28>)
100080ba:	4808      	ldr	r0, [pc, #32]	; (100080dc <frame_dummy+0x2c>)
100080bc:	e000      	b.n	100080c0 <frame_dummy+0x10>
100080be:	bf00      	nop
100080c0:	4807      	ldr	r0, [pc, #28]	; (100080e0 <frame_dummy+0x30>)
100080c2:	6803      	ldr	r3, [r0, #0]
100080c4:	2b00      	cmp	r3, #0
100080c6:	d100      	bne.n	100080ca <frame_dummy+0x1a>
100080c8:	bd10      	pop	{r4, pc}
100080ca:	4b06      	ldr	r3, [pc, #24]	; (100080e4 <frame_dummy+0x34>)
100080cc:	2b00      	cmp	r3, #0
100080ce:	d0fb      	beq.n	100080c8 <frame_dummy+0x18>
100080d0:	4798      	blx	r3
100080d2:	e7f9      	b.n	100080c8 <frame_dummy+0x18>
100080d4:	00000000 	.word	0x00000000
100080d8:	100186b0 	.word	0x100186b0
100080dc:	10018600 	.word	0x10018600
100080e0:	10018600 	.word	0x10018600
100080e4:	00000000 	.word	0x00000000

100080e8 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
100080e8:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_clock_get_value();
100080ea:	4b09      	ldr	r3, [pc, #36]	; (10008110 <delay_init+0x28>)
100080ec:	4798      	blx	r3
100080ee:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
100080f0:	4c08      	ldr	r4, [pc, #32]	; (10008114 <delay_init+0x2c>)
100080f2:	21fa      	movs	r1, #250	; 0xfa
100080f4:	0089      	lsls	r1, r1, #2
100080f6:	47a0      	blx	r4
100080f8:	4b07      	ldr	r3, [pc, #28]	; (10008118 <delay_init+0x30>)
100080fa:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
100080fc:	4907      	ldr	r1, [pc, #28]	; (1000811c <delay_init+0x34>)
100080fe:	0028      	movs	r0, r5
10008100:	47a0      	blx	r4
10008102:	4b07      	ldr	r3, [pc, #28]	; (10008120 <delay_init+0x38>)
10008104:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
10008106:	2205      	movs	r2, #5
10008108:	4b06      	ldr	r3, [pc, #24]	; (10008124 <delay_init+0x3c>)
1000810a:	601a      	str	r2, [r3, #0]
}
1000810c:	bd70      	pop	{r4, r5, r6, pc}
1000810e:	46c0      	nop			; (mov r8, r8)
10008110:	1000c7a9 	.word	0x1000c7a9
10008114:	10013129 	.word	0x10013129
10008118:	10018604 	.word	0x10018604
1000811c:	000f4240 	.word	0x000f4240
10008120:	10018600 	.word	0x10018600
10008124:	e000e010 	.word	0xe000e010

10008128 <delay_cycles_ms>:
 * \brief Delay loop to delay at least n number of milliseconds
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(uint32_t n)
{
10008128:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
1000812a:	4b08      	ldr	r3, [pc, #32]	; (1000814c <delay_cycles_ms+0x24>)
1000812c:	681c      	ldr	r4, [r3, #0]
 * \param n Number of cycles
 */
static inline void delay_cycles(const uint32_t n)
{
    if(n > 0) {
        SysTick->LOAD = n;
1000812e:	4a08      	ldr	r2, [pc, #32]	; (10008150 <delay_cycles_ms+0x28>)
        SysTick->VAL = 0;
10008130:	2500      	movs	r5, #0
        while(!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
10008132:	2180      	movs	r1, #128	; 0x80
10008134:	0249      	lsls	r1, r1, #9
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(uint32_t n)
{
	while (n--) {
10008136:	e006      	b.n	10008146 <delay_cycles_ms+0x1e>
 *
 * \param n Number of cycles
 */
static inline void delay_cycles(const uint32_t n)
{
    if(n > 0) {
10008138:	2c00      	cmp	r4, #0
1000813a:	d004      	beq.n	10008146 <delay_cycles_ms+0x1e>
        SysTick->LOAD = n;
1000813c:	6054      	str	r4, [r2, #4]
        SysTick->VAL = 0;
1000813e:	6095      	str	r5, [r2, #8]
        while(!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
10008140:	6813      	ldr	r3, [r2, #0]
10008142:	420b      	tst	r3, r1
10008144:	d0fc      	beq.n	10008140 <delay_cycles_ms+0x18>
10008146:	3801      	subs	r0, #1
10008148:	d2f6      	bcs.n	10008138 <delay_cycles_ms+0x10>
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
	}
}
1000814a:	bd30      	pop	{r4, r5, pc}
1000814c:	10018604 	.word	0x10018604
10008150:	e000e010 	.word	0xe000e010

10008154 <aon_sleep_timer_get_config_defaults>:
 * \param[out]  config  Pointer to a AON Sleep Timer module configuration structure to set
 */
void aon_sleep_timer_get_config_defaults(struct aon_sleep_timer_config *config)
{
	/* Default configuration values */
	config->wakeup = AON_SLEEP_TIMER_WAKEUP_ARM;
10008154:	2301      	movs	r3, #1
10008156:	7003      	strb	r3, [r0, #0]
	config->mode = AON_SLEEP_TIMER_SINGLE_MODE;
10008158:	7043      	strb	r3, [r0, #1]
	config->counter = 32000;
1000815a:	23fa      	movs	r3, #250	; 0xfa
1000815c:	01db      	lsls	r3, r3, #7
1000815e:	6043      	str	r3, [r0, #4]
}
10008160:	4770      	bx	lr
10008162:	46c0      	nop			; (mov r8, r8)

10008164 <aon_sleep_timer_disable>:
 */
void aon_sleep_timer_disable(void)
{
	uint32_t regval;

	AON_SLEEP_TIMER0->SINGLE_COUNT_DURATION.reg = 0;
10008164:	4b06      	ldr	r3, [pc, #24]	; (10008180 <aon_sleep_timer_disable+0x1c>)
10008166:	2200      	movs	r2, #0
10008168:	605a      	str	r2, [r3, #4]
	regval = AON_SLEEP_TIMER0->CONTROL.reg;
1000816a:	681a      	ldr	r2, [r3, #0]
	regval &= ~AON_SLEEP_TIMER_CONTROL_RELOAD_ENABLE;
	regval &= ~AON_SLEEP_TIMER_CONTROL_SINGLE_COUNT_ENABLE;
1000816c:	2103      	movs	r1, #3
1000816e:	438a      	bics	r2, r1
	AON_SLEEP_TIMER0->CONTROL.reg = regval;
10008170:	601a      	str	r2, [r3, #0]

	while (AON_SLEEP_TIMER0->CONTROL.reg & (1 << 14)) {
10008172:	0019      	movs	r1, r3
10008174:	2280      	movs	r2, #128	; 0x80
10008176:	01d2      	lsls	r2, r2, #7
10008178:	680b      	ldr	r3, [r1, #0]
1000817a:	4213      	tst	r3, r2
1000817c:	d1fc      	bne.n	10008178 <aon_sleep_timer_disable+0x14>
	}
}
1000817e:	4770      	bx	lr
10008180:	4000d000 	.word	0x4000d000

10008184 <aon_sleep_timer_clear_interrup>:
 * This flag will be cleared automatically once the IRQ
 * has been seen on the sleep clock.
 */
void aon_sleep_timer_clear_interrup(void)
{
	AON_SLEEP_TIMER0->CONTROL.reg |= AON_SLEEP_TIMER_CONTROL_IRQ_CLEAR;
10008184:	4a02      	ldr	r2, [pc, #8]	; (10008190 <aon_sleep_timer_clear_interrup+0xc>)
10008186:	6811      	ldr	r1, [r2, #0]
10008188:	2310      	movs	r3, #16
1000818a:	430b      	orrs	r3, r1
1000818c:	6013      	str	r3, [r2, #0]
}
1000818e:	4770      	bx	lr
10008190:	4000d000 	.word	0x4000d000

10008194 <aon_sleep_timer_isr_handler>:
 *
 * Timer ISR handler.
 *
 */
static void aon_sleep_timer_isr_handler(void)
{
10008194:	b510      	push	{r4, lr}
	aon_sleep_timer_clear_interrup();
10008196:	4b04      	ldr	r3, [pc, #16]	; (100081a8 <aon_sleep_timer_isr_handler+0x14>)
10008198:	4798      	blx	r3

	if (aon_sleep_timer_callback) {
1000819a:	4b04      	ldr	r3, [pc, #16]	; (100081ac <aon_sleep_timer_isr_handler+0x18>)
1000819c:	681b      	ldr	r3, [r3, #0]
1000819e:	2b00      	cmp	r3, #0
100081a0:	d000      	beq.n	100081a4 <aon_sleep_timer_isr_handler+0x10>
		aon_sleep_timer_callback();
100081a2:	4798      	blx	r3
	}
}
100081a4:	bd10      	pop	{r4, pc}
100081a6:	46c0      	nop			; (mov r8, r8)
100081a8:	10008185 	.word	0x10008185
100081ac:	100186c8 	.word	0x100186c8

100081b0 <aon_sleep_timer_register_callback>:
 *
 * \param[in]     callback_func Pointer to callback function
 */
void aon_sleep_timer_register_callback(aon_sleep_timer_callback_t fun)
{
	aon_sleep_timer_callback = fun;
100081b0:	4b01      	ldr	r3, [pc, #4]	; (100081b8 <aon_sleep_timer_register_callback+0x8>)
100081b2:	6018      	str	r0, [r3, #0]
}
100081b4:	4770      	bx	lr
100081b6:	46c0      	nop			; (mov r8, r8)
100081b8:	100186c8 	.word	0x100186c8

100081bc <aon_sleep_timer_unregister_callback>:
 * Unregisters and disable a callback function implemented by the user.
 *
 */
void aon_sleep_timer_unregister_callback(void)
{
	aon_sleep_timer_callback = NULL;
100081bc:	2200      	movs	r2, #0
100081be:	4b01      	ldr	r3, [pc, #4]	; (100081c4 <aon_sleep_timer_unregister_callback+0x8>)
100081c0:	601a      	str	r2, [r3, #0]
}
100081c2:	4770      	bx	lr
100081c4:	100186c8 	.word	0x100186c8

100081c8 <aon_sleep_timer_init>:
 *
 * \param[in]     config       Pointer to the AON Sleep Timer configuration options struct
 *
 */
void aon_sleep_timer_init(const struct aon_sleep_timer_config *config)
{
100081c8:	b5f0      	push	{r4, r5, r6, r7, lr}
100081ca:	b083      	sub	sp, #12
	uint32_t aon_st_ctrl = 0;

	AON_PWR_SEQ0->AON_ST_WAKEUP_CTRL.reg = AON_PWR_SEQ_AON_ST_WAKEUP_CTRL_RESETVALUE;
100081cc:	2200      	movs	r2, #0
100081ce:	4b2b      	ldr	r3, [pc, #172]	; (1000827c <aon_sleep_timer_init+0xb4>)
100081d0:	731a      	strb	r2, [r3, #12]
	if (config->wakeup == AON_SLEEP_TIMER_WAKEUP_ARM_BLE) {
100081d2:	7803      	ldrb	r3, [r0, #0]
100081d4:	2b02      	cmp	r3, #2
100081d6:	d105      	bne.n	100081e4 <aon_sleep_timer_init+0x1c>
		AON_PWR_SEQ0->AON_ST_WAKEUP_CTRL.reg |=
100081d8:	4a28      	ldr	r2, [pc, #160]	; (1000827c <aon_sleep_timer_init+0xb4>)
100081da:	7b11      	ldrb	r1, [r2, #12]
100081dc:	3301      	adds	r3, #1
100081de:	430b      	orrs	r3, r1
100081e0:	7313      	strb	r3, [r2, #12]
100081e2:	e005      	b.n	100081f0 <aon_sleep_timer_init+0x28>
				AON_PWR_SEQ_AON_ST_WAKEUP_CTRL_ARM_ENABLE |
				AON_PWR_SEQ_AON_ST_WAKEUP_CTRL_BLE_ENABLE;
	} else if (config->wakeup == AON_SLEEP_TIMER_WAKEUP_ARM) {
100081e4:	2b01      	cmp	r3, #1
100081e6:	d103      	bne.n	100081f0 <aon_sleep_timer_init+0x28>
		AON_PWR_SEQ0->AON_ST_WAKEUP_CTRL.reg |=
100081e8:	4a24      	ldr	r2, [pc, #144]	; (1000827c <aon_sleep_timer_init+0xb4>)
100081ea:	7b11      	ldrb	r1, [r2, #12]
100081ec:	430b      	orrs	r3, r1
100081ee:	7313      	strb	r3, [r2, #12]
				AON_PWR_SEQ_AON_ST_WAKEUP_CTRL_ARM_ENABLE;
	}

	aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
100081f0:	4b23      	ldr	r3, [pc, #140]	; (10008280 <aon_sleep_timer_init+0xb8>)
100081f2:	681a      	ldr	r2, [r3, #0]
	while (aon_st_ctrl & ((1UL << 31) - 1)) {
100081f4:	0053      	lsls	r3, r2, #1
100081f6:	d01f      	beq.n	10008238 <aon_sleep_timer_init+0x70>
		AON_SLEEP_TIMER0->CONTROL.reg = 0;
100081f8:	4d21      	ldr	r5, [pc, #132]	; (10008280 <aon_sleep_timer_init+0xb8>)
100081fa:	2700      	movs	r7, #0

static void delay_cycle(uint32_t cycles)
{
	volatile uint32_t i = 0;

	for (i = 0; i < cycles*100; i++) {
100081fc:	262c      	movs	r6, #44	; 0x2c
100081fe:	36ff      	adds	r6, #255	; 0xff
10008200:	2180      	movs	r1, #128	; 0x80
10008202:	01c9      	lsls	r1, r1, #7
				AON_PWR_SEQ_AON_ST_WAKEUP_CTRL_ARM_ENABLE;
	}

	aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
	while (aon_st_ctrl & ((1UL << 31) - 1)) {
		AON_SLEEP_TIMER0->CONTROL.reg = 0;
10008204:	602f      	str	r7, [r5, #0]

static aon_sleep_timer_callback_t aon_sleep_timer_callback = NULL;

static void delay_cycle(uint32_t cycles)
{
	volatile uint32_t i = 0;
10008206:	9701      	str	r7, [sp, #4]

	for (i = 0; i < cycles*100; i++) {
10008208:	9701      	str	r7, [sp, #4]
1000820a:	9b01      	ldr	r3, [sp, #4]
1000820c:	42b3      	cmp	r3, r6
1000820e:	d806      	bhi.n	1000821e <aon_sleep_timer_init+0x56>
		asm volatile ("nop");
10008210:	46c0      	nop			; (mov r8, r8)

static void delay_cycle(uint32_t cycles)
{
	volatile uint32_t i = 0;

	for (i = 0; i < cycles*100; i++) {
10008212:	9b01      	ldr	r3, [sp, #4]
10008214:	3301      	adds	r3, #1
10008216:	9301      	str	r3, [sp, #4]
10008218:	9b01      	ldr	r3, [sp, #4]
1000821a:	42b3      	cmp	r3, r6
1000821c:	d9f8      	bls.n	10008210 <aon_sleep_timer_init+0x48>
1000821e:	7844      	ldrb	r4, [r0, #1]
10008220:	000b      	movs	r3, r1
10008222:	2c00      	cmp	r4, #0
10008224:	d103      	bne.n	1000822e <aon_sleep_timer_init+0x66>
10008226:	2380      	movs	r3, #128	; 0x80
10008228:	009b      	lsls	r3, r3, #2
1000822a:	e000      	b.n	1000822e <aon_sleep_timer_init+0x66>
	while (aon_st_ctrl & ((1UL << 31) - 1)) {
		AON_SLEEP_TIMER0->CONTROL.reg = 0;
		delay_cycle(3);
		while (aon_st_ctrl & ((config->mode == AON_SLEEP_TIMER_RELOAD_MODE) ?
				(1 << 9) : (1 << 14))) {
			aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
1000822c:	682a      	ldr	r2, [r5, #0]

	aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
	while (aon_st_ctrl & ((1UL << 31) - 1)) {
		AON_SLEEP_TIMER0->CONTROL.reg = 0;
		delay_cycle(3);
		while (aon_st_ctrl & ((config->mode == AON_SLEEP_TIMER_RELOAD_MODE) ?
1000822e:	4213      	tst	r3, r2
10008230:	d1fc      	bne.n	1000822c <aon_sleep_timer_init+0x64>
				(1 << 9) : (1 << 14))) {
			aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
		}
		aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
10008232:	682a      	ldr	r2, [r5, #0]
		AON_PWR_SEQ0->AON_ST_WAKEUP_CTRL.reg |=
				AON_PWR_SEQ_AON_ST_WAKEUP_CTRL_ARM_ENABLE;
	}

	aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
	while (aon_st_ctrl & ((1UL << 31) - 1)) {
10008234:	0053      	lsls	r3, r2, #1
10008236:	d1e5      	bne.n	10008204 <aon_sleep_timer_init+0x3c>
			aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
		}
		aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
	}

	if (config->mode == AON_SLEEP_TIMER_RELOAD_MODE) {
10008238:	7843      	ldrb	r3, [r0, #1]
1000823a:	2b00      	cmp	r3, #0
1000823c:	d105      	bne.n	1000824a <aon_sleep_timer_init+0x82>
		/* Reload counter will start here */
		AON_SLEEP_TIMER0->SINGLE_COUNT_DURATION.reg = config->counter;
1000823e:	4b10      	ldr	r3, [pc, #64]	; (10008280 <aon_sleep_timer_init+0xb8>)
10008240:	6842      	ldr	r2, [r0, #4]
10008242:	605a      	str	r2, [r3, #4]
		AON_SLEEP_TIMER0->CONTROL.reg = AON_SLEEP_TIMER_CONTROL_RELOAD_ENABLE;
10008244:	2201      	movs	r2, #1
10008246:	601a      	str	r2, [r3, #0]
10008248:	e004      	b.n	10008254 <aon_sleep_timer_init+0x8c>
	} else {
		/* Single counter will start here */
		AON_SLEEP_TIMER0->SINGLE_COUNT_DURATION.reg = config->counter;
1000824a:	4b0d      	ldr	r3, [pc, #52]	; (10008280 <aon_sleep_timer_init+0xb8>)
1000824c:	6842      	ldr	r2, [r0, #4]
1000824e:	605a      	str	r2, [r3, #4]
		AON_SLEEP_TIMER0->CONTROL.reg = AON_SLEEP_TIMER_CONTROL_SINGLE_COUNT_ENABLE;
10008250:	2202      	movs	r2, #2
10008252:	601a      	str	r2, [r3, #0]
	}

	if (config->mode == AON_SLEEP_TIMER_SINGLE_MODE) {
10008254:	7843      	ldrb	r3, [r0, #1]
10008256:	2b01      	cmp	r3, #1
10008258:	d109      	bne.n	1000826e <aon_sleep_timer_init+0xa6>
		while ((AON_SLEEP_TIMER0->CONTROL.reg &
1000825a:	4909      	ldr	r1, [pc, #36]	; (10008280 <aon_sleep_timer_init+0xb8>)
1000825c:	22e0      	movs	r2, #224	; 0xe0
1000825e:	01d2      	lsls	r2, r2, #7
10008260:	680b      	ldr	r3, [r1, #0]
10008262:	4013      	ands	r3, r2
10008264:	4293      	cmp	r3, r2
10008266:	d1fb      	bne.n	10008260 <aon_sleep_timer_init+0x98>
				AON_SLEEP_TIMER_CONTROL_SLP_TIMER_SINGLE_COUNT_ENABLE_DLY_Msk)
				!= AON_SLEEP_TIMER_CONTROL_SLP_TIMER_SINGLE_COUNT_ENABLE_DLY_Msk) {
		}
		AON_SLEEP_TIMER0->CONTROL.reg = 0;
10008268:	2200      	movs	r2, #0
1000826a:	4b05      	ldr	r3, [pc, #20]	; (10008280 <aon_sleep_timer_init+0xb8>)
1000826c:	601a      	str	r2, [r3, #0]
	}

	system_register_isr(RAM_ISR_TABLE_AON_SLEEP_TIMER_INDEX, (uint32_t)aon_sleep_timer_isr_handler);
1000826e:	4905      	ldr	r1, [pc, #20]	; (10008284 <aon_sleep_timer_init+0xbc>)
10008270:	202b      	movs	r0, #43	; 0x2b
10008272:	4b05      	ldr	r3, [pc, #20]	; (10008288 <aon_sleep_timer_init+0xc0>)
10008274:	4798      	blx	r3
}
10008276:	b003      	add	sp, #12
10008278:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000827a:	46c0      	nop			; (mov r8, r8)
1000827c:	4000e000 	.word	0x4000e000
10008280:	4000d000 	.word	0x4000d000
10008284:	10008195 	.word	0x10008195
10008288:	1000d2e5 	.word	0x1000d2e5

1000828c <_i2c_master_read_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
1000828c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000828e:	464f      	mov	r7, r9
10008290:	4646      	mov	r6, r8
10008292:	b4c0      	push	{r6, r7}
10008294:	4681      	mov	r9, r0
	Assert(config);
	
	uint16_t counter = 0;
	uint32_t status  = 0;
	I2c *const i2c_module    = (module->hw);
	uint16_t length = packet->data_length;
10008296:	884d      	ldrh	r5, [r1, #2]

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
10008298:	2317      	movs	r3, #23
	uint16_t counter = 0;
	uint32_t status  = 0;
	I2c *const i2c_module    = (module->hw);
	uint16_t length = packet->data_length;

	if (length == 0) {
1000829a:	2d00      	cmp	r5, #0
1000829c:	d02f      	beq.n	100082fe <_i2c_master_read_packet+0x72>
	Assert(module->hw);
	Assert(config);
	
	uint16_t counter = 0;
	uint32_t status  = 0;
	I2c *const i2c_module    = (module->hw);
1000829e:	6802      	ldr	r2, [r0, #0]
 *
 * \param[in]  i2c_module  Pointer to software module structure
 */
static inline void i2c_wait_for_idle(I2c *const i2c_module)
{
	while (i2c_module->I2C_STATUS.bit.I2C_ACTIVE) {
100082a0:	2428      	movs	r4, #40	; 0x28
100082a2:	5d13      	ldrb	r3, [r2, r4]
100082a4:	07db      	lsls	r3, r3, #31
100082a6:	d4fc      	bmi.n	100082a2 <_i2c_master_read_packet+0x16>
	}

	i2c_wait_for_idle(i2c_module);

	/* Flush the FIFO */
	i2c_module->I2C_FLUSH.reg = 1;
100082a8:	2301      	movs	r3, #1
100082aa:	2434      	movs	r4, #52	; 0x34
100082ac:	5513      	strb	r3, [r2, r4]

	/* Enable I2C on bus (start condition). */
	i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_1;
100082ae:	3c14      	subs	r4, #20
100082b0:	5513      	strb	r3, [r2, r4]
	/* Address I2C slave in case of Master mode enabled. */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 |
100082b2:	880b      	ldrh	r3, [r1, #0]
100082b4:	005b      	lsls	r3, r3, #1
100082b6:	2402      	movs	r4, #2
100082b8:	34ff      	adds	r4, #255	; 0xff
100082ba:	4323      	orrs	r3, r4
100082bc:	b29b      	uxth	r3, r3
100082be:	8013      	strh	r3, [r2, #0]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(config);
	
	uint16_t counter = 0;
100082c0:	2400      	movs	r4, #0
	/* Address I2C slave in case of Master mode enabled. */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 |
			(packet->address << 1) | I2C_TRANSFER_READ;
	do {
		status = i2c_module->RECEIVE_STATUS.reg;
		if (status & I2C_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY)
100082c2:	2301      	movs	r3, #1
100082c4:	4698      	mov	r8, r3
	i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_1;
	/* Address I2C slave in case of Master mode enabled. */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 |
			(packet->address << 1) | I2C_TRANSFER_READ;
	do {
		status = i2c_module->RECEIVE_STATUS.reg;
100082c6:	7b13      	ldrb	r3, [r2, #12]
100082c8:	b2db      	uxtb	r3, r3
		if (status & I2C_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY)
100082ca:	4640      	mov	r0, r8
100082cc:	4218      	tst	r0, r3
100082ce:	d006      	beq.n	100082de <_i2c_master_read_packet+0x52>
			packet->data[counter++] = i2c_module->RECEIVE_DATA.reg;
100082d0:	1c67      	adds	r7, r4, #1
100082d2:	7910      	ldrb	r0, [r2, #4]
100082d4:	4684      	mov	ip, r0
100082d6:	6848      	ldr	r0, [r1, #4]
100082d8:	4666      	mov	r6, ip
100082da:	5506      	strb	r6, [r0, r4]
100082dc:	b2bc      	uxth	r4, r7
	} while (counter < length); 
100082de:	42ac      	cmp	r4, r5
100082e0:	d3f1      	bcc.n	100082c6 <_i2c_master_read_packet+0x3a>

	/* Now check whether the core has sent the data out and free the bus. */
	while (!(status & I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY)) {
100082e2:	06db      	lsls	r3, r3, #27
100082e4:	d403      	bmi.n	100082ee <_i2c_master_read_packet+0x62>
100082e6:	2110      	movs	r1, #16
		status = i2c_module->TRANSMIT_STATUS.reg;
100082e8:	7a13      	ldrb	r3, [r2, #8]
		if (status & I2C_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY)
			packet->data[counter++] = i2c_module->RECEIVE_DATA.reg;
	} while (counter < length); 

	/* Now check whether the core has sent the data out and free the bus. */
	while (!(status & I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY)) {
100082ea:	420b      	tst	r3, r1
100082ec:	d0fc      	beq.n	100082e8 <_i2c_master_read_packet+0x5c>
		status = i2c_module->TRANSMIT_STATUS.reg;
	}

	/* Send stop condition. */
	if (!module->no_stop) {
100082ee:	464b      	mov	r3, r9
100082f0:	7959      	ldrb	r1, [r3, #5]
		i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_0;
	}

	return STATUS_OK;
100082f2:	2300      	movs	r3, #0
	while (!(status & I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY)) {
		status = i2c_module->TRANSMIT_STATUS.reg;
	}

	/* Send stop condition. */
	if (!module->no_stop) {
100082f4:	2900      	cmp	r1, #0
100082f6:	d102      	bne.n	100082fe <_i2c_master_read_packet+0x72>
		i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_0;
100082f8:	3320      	adds	r3, #32
100082fa:	54d1      	strb	r1, [r2, r3]
	}

	return STATUS_OK;
100082fc:	2300      	movs	r3, #0
}
100082fe:	0018      	movs	r0, r3
10008300:	bc0c      	pop	{r2, r3}
10008302:	4690      	mov	r8, r2
10008304:	4699      	mov	r9, r3
10008306:	bdf0      	pop	{r4, r5, r6, r7, pc}

10008308 <_i2c_master_write_packet>:
 * \retval STATUS_OK                    The packet was write successfully
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
10008308:	b5f0      	push	{r4, r5, r6, r7, lr}
1000830a:	4684      	mov	ip, r0
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(packet);
	
	I2c *const i2c_module = (module->hw);
1000830c:	6802      	ldr	r2, [r0, #0]
	uint16_t counter = 0;
	uint32_t status  = 0;

	uint16_t length = packet->data_length;
1000830e:	884e      	ldrh	r6, [r1, #2]
10008310:	2428      	movs	r4, #40	; 0x28
10008312:	5d13      	ldrb	r3, [r2, r4]
10008314:	07db      	lsls	r3, r3, #31
10008316:	d4fc      	bmi.n	10008312 <_i2c_master_write_packet+0xa>

	i2c_wait_for_idle(i2c_module);

	/* Flush the FIFO */
	i2c_module->I2C_FLUSH.reg = 1;
10008318:	2301      	movs	r3, #1
1000831a:	2434      	movs	r4, #52	; 0x34
1000831c:	5513      	strb	r3, [r2, r4]

	/* Enable I2C on bus (start condition) */
	i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_1;
1000831e:	3c14      	subs	r4, #20
10008320:	5513      	strb	r3, [r2, r4]

	/* Address I2C slave in case of Master mode enabled */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 | 
10008322:	880b      	ldrh	r3, [r1, #0]
10008324:	005b      	lsls	r3, r3, #1
10008326:	34e0      	adds	r4, #224	; 0xe0
10008328:	4323      	orrs	r3, r4
1000832a:	b29b      	uxth	r3, r3
1000832c:	8013      	strh	r3, [r2, #0]
	Assert(module);
	Assert(module->hw);
	Assert(packet);
	
	I2c *const i2c_module = (module->hw);
	uint16_t counter = 0;
1000832e:	2400      	movs	r4, #0
	/* Address I2C slave in case of Master mode enabled */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 | 
			((packet->address) << 1) | I2C_TRANSFER_WRITE;
	do {
		status = i2c_module->TRANSMIT_STATUS.reg;
		if (status & I2C_TRANSMIT_STATUS_TX_FIFO_NOT_FULL_Msk) {
10008330:	2501      	movs	r5, #1

	/* Address I2C slave in case of Master mode enabled */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 | 
			((packet->address) << 1) | I2C_TRANSFER_WRITE;
	do {
		status = i2c_module->TRANSMIT_STATUS.reg;
10008332:	7a13      	ldrb	r3, [r2, #8]
10008334:	b2db      	uxtb	r3, r3
		if (status & I2C_TRANSMIT_STATUS_TX_FIFO_NOT_FULL_Msk) {
10008336:	421d      	tst	r5, r3
10008338:	d004      	beq.n	10008344 <_i2c_master_write_packet+0x3c>
			i2c_module->TRANSMIT_DATA.reg = packet->data[counter++];
1000833a:	1c67      	adds	r7, r4, #1
1000833c:	6848      	ldr	r0, [r1, #4]
1000833e:	5d04      	ldrb	r4, [r0, r4]
10008340:	8014      	strh	r4, [r2, #0]
10008342:	b2bc      	uxth	r4, r7
		}
	} while (counter < length); 
10008344:	42b4      	cmp	r4, r6
10008346:	d3f4      	bcc.n	10008332 <_i2c_master_write_packet+0x2a>

	/* Now check whether the core has sent the data out and free the bus */
	while (!(status & I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY)) {
10008348:	06db      	lsls	r3, r3, #27
1000834a:	d403      	bmi.n	10008354 <_i2c_master_write_packet+0x4c>
1000834c:	2110      	movs	r1, #16
			status = i2c_module->TRANSMIT_STATUS.reg;
1000834e:	7a13      	ldrb	r3, [r2, #8]
			i2c_module->TRANSMIT_DATA.reg = packet->data[counter++];
		}
	} while (counter < length); 

	/* Now check whether the core has sent the data out and free the bus */
	while (!(status & I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY)) {
10008350:	420b      	tst	r3, r1
10008352:	d0fc      	beq.n	1000834e <_i2c_master_write_packet+0x46>
			status = i2c_module->TRANSMIT_STATUS.reg;
	}

	/* Send stop condition */
	if (!module->no_stop) {
10008354:	4663      	mov	r3, ip
10008356:	795b      	ldrb	r3, [r3, #5]
10008358:	2b00      	cmp	r3, #0
1000835a:	d102      	bne.n	10008362 <_i2c_master_write_packet+0x5a>
		i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_0;
1000835c:	2100      	movs	r1, #0
1000835e:	3320      	adds	r3, #32
10008360:	54d1      	strb	r1, [r2, r3]
	}

	return STATUS_OK;
}
10008362:	2000      	movs	r0, #0
10008364:	bdf0      	pop	{r4, r5, r6, r7, pc}
10008366:	46c0      	nop			; (mov r8, r8)

10008368 <i2c_master_get_config_defaults>:
		struct i2c_master_config *const config)
{
	/* Sanity check */
	Assert(config);
	
	config->clock_source    = I2C_CLK_INPUT_3;
10008368:	2303      	movs	r3, #3
1000836a:	7003      	strb	r3, [r0, #0]
	config->clock_divider   = 0x10;
1000836c:	330d      	adds	r3, #13
1000836e:	8043      	strh	r3, [r0, #2]
	config->pin_number_pad0 = PIN_LP_GPIO_8;
10008370:	3b08      	subs	r3, #8
10008372:	6043      	str	r3, [r0, #4]
	config->pin_number_pad1 = PIN_LP_GPIO_9;
10008374:	3301      	adds	r3, #1
10008376:	60c3      	str	r3, [r0, #12]
	config->pinmux_sel_pad0 = MUX_LP_GPIO_8_I2C0_SDA;
10008378:	3b07      	subs	r3, #7
1000837a:	6083      	str	r3, [r0, #8]
	config->pinmux_sel_pad1 = MUX_LP_GPIO_9_I2C0_SCL;
1000837c:	6103      	str	r3, [r0, #16]
}
1000837e:	4770      	bx	lr

10008380 <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		I2c *const hw,
		const struct i2c_master_config *const config)
{
10008380:	b570      	push	{r4, r5, r6, lr}
10008382:	0004      	movs	r4, r0
10008384:	0015      	movs	r5, r2
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(config);
	
	module->hw = hw;
10008386:	6001      	str	r1, [r0, #0]

	/* Sanity check arguments. */
	if ((module == NULL) || (config == NULL))
10008388:	2800      	cmp	r0, #0
1000838a:	d026      	beq.n	100083da <i2c_master_init+0x5a>
1000838c:	2a00      	cmp	r2, #0
1000838e:	d026      	beq.n	100083de <i2c_master_init+0x5e>
10008390:	2228      	movs	r2, #40	; 0x28
10008392:	5c8b      	ldrb	r3, [r1, r2]
10008394:	07db      	lsls	r3, r3, #31
10008396:	d4fc      	bmi.n	10008392 <i2c_master_init+0x12>
 *
 */
static inline void i2c_disable(I2c *const i2c_module)
{
	i2c_wait_for_idle(i2c_module);
	i2c_module->I2C_MODULE_ENABLE.reg = 0;
10008398:	2300      	movs	r3, #0
1000839a:	750b      	strb	r3, [r1, #20]
		return STATUS_ERR_INVALID_ARG;

	i2c_disable(module->hw);
	if (module->hw == I2C0) {
1000839c:	6823      	ldr	r3, [r4, #0]
1000839e:	4a11      	ldr	r2, [pc, #68]	; (100083e4 <i2c_master_init+0x64>)
100083a0:	4293      	cmp	r3, r2
100083a2:	d103      	bne.n	100083ac <i2c_master_init+0x2c>
		system_peripheral_reset(PERIPHERAL_I2C0_CORE);
100083a4:	2003      	movs	r0, #3
100083a6:	4b10      	ldr	r3, [pc, #64]	; (100083e8 <i2c_master_init+0x68>)
100083a8:	4798      	blx	r3
100083aa:	e006      	b.n	100083ba <i2c_master_init+0x3a>
	} else if (module->hw == I2C1) {
		system_peripheral_reset(PERIPHERAL_I2C1_CORE);
	} else {
		return STATUS_ERR_INVALID_ARG;
100083ac:	2017      	movs	r0, #23
		return STATUS_ERR_INVALID_ARG;

	i2c_disable(module->hw);
	if (module->hw == I2C0) {
		system_peripheral_reset(PERIPHERAL_I2C0_CORE);
	} else if (module->hw == I2C1) {
100083ae:	4a0f      	ldr	r2, [pc, #60]	; (100083ec <i2c_master_init+0x6c>)
100083b0:	4293      	cmp	r3, r2
100083b2:	d115      	bne.n	100083e0 <i2c_master_init+0x60>
		system_peripheral_reset(PERIPHERAL_I2C1_CORE);
100083b4:	3002      	adds	r0, #2
100083b6:	4b0c      	ldr	r3, [pc, #48]	; (100083e8 <i2c_master_init+0x68>)
100083b8:	4798      	blx	r3
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(config);

	I2c *const i2c_module = (module->hw);
100083ba:	6824      	ldr	r4, [r4, #0]

	/* Set the pinmux for this i2c module. */
	gpio_pinmux_cofiguration(config->pin_number_pad0, (uint16_t)(config->pinmux_sel_pad0));
100083bc:	8929      	ldrh	r1, [r5, #8]
100083be:	7928      	ldrb	r0, [r5, #4]
100083c0:	4e0b      	ldr	r6, [pc, #44]	; (100083f0 <i2c_master_init+0x70>)
100083c2:	47b0      	blx	r6
	gpio_pinmux_cofiguration(config->pin_number_pad1, (uint16_t)(config->pinmux_sel_pad1));
100083c4:	8a29      	ldrh	r1, [r5, #16]
100083c6:	7b28      	ldrb	r0, [r5, #12]
100083c8:	47b0      	blx	r6
	/* Set clock. */
	i2c_module->CLOCK_SOURCE_SELECT.reg = config->clock_source;
100083ca:	782b      	ldrb	r3, [r5, #0]
100083cc:	7423      	strb	r3, [r4, #16]
	i2c_module->I2C_CLK_DIVIDER.reg = I2C_CLK_DIVIDER_I2C_DIVIDE_RATIO(config->clock_divider);
100083ce:	886b      	ldrh	r3, [r5, #2]
100083d0:	8323      	strh	r3, [r4, #24]
	/* Enable master mode. */
	i2c_module->I2C_MASTER_MODE.reg = I2C_MASTER_MODE_MASTER_ENABLE_1;
100083d2:	2301      	movs	r3, #1
100083d4:	7723      	strb	r3, [r4, #28]
#endif

	/* Set config and return status. */
	_i2c_master_set_config(module, config);

	return STATUS_OK;
100083d6:	2000      	movs	r0, #0
100083d8:	e002      	b.n	100083e0 <i2c_master_init+0x60>
	
	module->hw = hw;

	/* Sanity check arguments. */
	if ((module == NULL) || (config == NULL))
		return STATUS_ERR_INVALID_ARG;
100083da:	2017      	movs	r0, #23
100083dc:	e000      	b.n	100083e0 <i2c_master_init+0x60>
100083de:	2017      	movs	r0, #23

	/* Set config and return status. */
	_i2c_master_set_config(module, config);

	return STATUS_OK;
}
100083e0:	bd70      	pop	{r4, r5, r6, pc}
100083e2:	46c0      	nop			; (mov r8, r8)
100083e4:	40003000 	.word	0x40003000
100083e8:	1000ce7d 	.word	0x1000ce7d
100083ec:	40003400 	.word	0x40003400
100083f0:	1000c405 	.word	0x1000c405

100083f4 <i2c_master_read_packet_wait>:
 * \retval STATUS_BUSY                  If module has a pending request.
 */
enum status_code i2c_master_read_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
100083f4:	b510      	push	{r4, lr}
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL))
100083f6:	2800      	cmp	r0, #0
100083f8:	d008      	beq.n	1000840c <i2c_master_read_packet_wait+0x18>
		return STATUS_ERR_INVALID_ARG;
100083fa:	2317      	movs	r3, #23
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL))
100083fc:	2900      	cmp	r1, #0
100083fe:	d006      	beq.n	1000840e <i2c_master_read_packet_wait+0x1a>
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->no_stop = false;
10008400:	2300      	movs	r3, #0
10008402:	7143      	strb	r3, [r0, #5]

	return _i2c_master_read_packet(module, packet);
10008404:	4b03      	ldr	r3, [pc, #12]	; (10008414 <i2c_master_read_packet_wait+0x20>)
10008406:	4798      	blx	r3
10008408:	0003      	movs	r3, r0
1000840a:	e000      	b.n	1000840e <i2c_master_read_packet_wait+0x1a>
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL))
		return STATUS_ERR_INVALID_ARG;
1000840c:	2317      	movs	r3, #23
#endif

	module->no_stop = false;

	return _i2c_master_read_packet(module, packet);
}
1000840e:	0018      	movs	r0, r3
10008410:	bd10      	pop	{r4, pc}
10008412:	46c0      	nop			; (mov r8, r8)
10008414:	1000828d 	.word	0x1000828d

10008418 <i2c_master_write_packet_wait>:
 * \retval STATUS_BUSY                  If module has a pending request.
 */
enum status_code i2c_master_write_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
10008418:	b510      	push	{r4, lr}
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if ((module == NULL) || (packet == NULL)) {
1000841a:	2800      	cmp	r0, #0
1000841c:	d008      	beq.n	10008430 <i2c_master_write_packet_wait+0x18>
		return STATUS_ERR_INVALID_ARG;
1000841e:	2317      	movs	r3, #23
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if ((module == NULL) || (packet == NULL)) {
10008420:	2900      	cmp	r1, #0
10008422:	d006      	beq.n	10008432 <i2c_master_write_packet_wait+0x1a>
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->no_stop = false;
10008424:	2300      	movs	r3, #0
10008426:	7143      	strb	r3, [r0, #5]

	return _i2c_master_write_packet(module, packet);
10008428:	4b03      	ldr	r3, [pc, #12]	; (10008438 <i2c_master_write_packet_wait+0x20>)
1000842a:	4798      	blx	r3
1000842c:	0003      	movs	r3, r0
1000842e:	e000      	b.n	10008432 <i2c_master_write_packet_wait+0x1a>
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if ((module == NULL) || (packet == NULL)) {
		return STATUS_ERR_INVALID_ARG;
10008430:	2317      	movs	r3, #23
#endif

	module->no_stop = false;

	return _i2c_master_write_packet(module, packet);
}
10008432:	0018      	movs	r0, r3
10008434:	bd10      	pop	{r4, pc}
10008436:	46c0      	nop			; (mov r8, r8)
10008438:	10008309 	.word	0x10008309

1000843c <i2c_master_write_packet_wait_no_stop>:
 * \retval STATUS_BUSY                  If module has a pending request.
 */
enum status_code i2c_master_write_packet_wait_no_stop(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
1000843c:	b510      	push	{r4, lr}
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL)) {
1000843e:	2800      	cmp	r0, #0
10008440:	d008      	beq.n	10008454 <i2c_master_write_packet_wait_no_stop+0x18>
		return STATUS_ERR_INVALID_ARG;
10008442:	2317      	movs	r3, #23
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL)) {
10008444:	2900      	cmp	r1, #0
10008446:	d006      	beq.n	10008456 <i2c_master_write_packet_wait_no_stop+0x1a>
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->no_stop = true;
10008448:	3b16      	subs	r3, #22
1000844a:	7143      	strb	r3, [r0, #5]

	return _i2c_master_write_packet(module, packet);
1000844c:	4b03      	ldr	r3, [pc, #12]	; (1000845c <i2c_master_write_packet_wait_no_stop+0x20>)
1000844e:	4798      	blx	r3
10008450:	0003      	movs	r3, r0
10008452:	e000      	b.n	10008456 <i2c_master_write_packet_wait_no_stop+0x1a>
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL)) {
		return STATUS_ERR_INVALID_ARG;
10008454:	2317      	movs	r3, #23
#endif

	module->no_stop = true;

	return _i2c_master_write_packet(module, packet);
}
10008456:	0018      	movs	r0, r3
10008458:	bd10      	pop	{r4, pc}
1000845a:	46c0      	nop			; (mov r8, r8)
1000845c:	10008309 	.word	0x10008309

10008460 <set_int_enable>:
 *  interrupt is used.
 *  @param[in]  enable      1 to enable interrupt.
 *  @return     0 if successful.
 */
static int set_int_enable(unsigned char enable)
{
10008460:	b510      	push	{r4, lr}
10008462:	b082      	sub	sp, #8
    unsigned char tmp;

    if (st.chip_cfg.dmp_on) {
10008464:	2324      	movs	r3, #36	; 0x24
10008466:	4a25      	ldr	r2, [pc, #148]	; (100084fc <set_int_enable+0x9c>)
10008468:	5cd3      	ldrb	r3, [r2, r3]
1000846a:	2b00      	cmp	r3, #0
1000846c:	d019      	beq.n	100084a2 <set_int_enable+0x42>
        if (enable)
1000846e:	2800      	cmp	r0, #0
10008470:	d003      	beq.n	1000847a <set_int_enable+0x1a>
            tmp = BIT_DMP_INT_EN;
10008472:	2202      	movs	r2, #2
10008474:	466b      	mov	r3, sp
10008476:	71da      	strb	r2, [r3, #7]
10008478:	e002      	b.n	10008480 <set_int_enable+0x20>
        else
            tmp = 0x00;
1000847a:	2200      	movs	r2, #0
1000847c:	466b      	mov	r3, sp
1000847e:	71da      	strb	r2, [r3, #7]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
10008480:	4b1e      	ldr	r3, [pc, #120]	; (100084fc <set_int_enable+0x9c>)
10008482:	681a      	ldr	r2, [r3, #0]
10008484:	7c51      	ldrb	r1, [r2, #17]
10008486:	685b      	ldr	r3, [r3, #4]
10008488:	7818      	ldrb	r0, [r3, #0]
1000848a:	466b      	mov	r3, sp
1000848c:	3307      	adds	r3, #7
1000848e:	2201      	movs	r2, #1
10008490:	4c1b      	ldr	r4, [pc, #108]	; (10008500 <set_int_enable+0xa0>)
10008492:	47a0      	blx	r4
10008494:	2800      	cmp	r0, #0
10008496:	d127      	bne.n	100084e8 <set_int_enable+0x88>
            return -1;
        st.chip_cfg.int_enable = tmp;
10008498:	466b      	mov	r3, sp
1000849a:	79da      	ldrb	r2, [r3, #7]
1000849c:	4b17      	ldr	r3, [pc, #92]	; (100084fc <set_int_enable+0x9c>)
1000849e:	745a      	strb	r2, [r3, #17]
100084a0:	e02a      	b.n	100084f8 <set_int_enable+0x98>
    } else {
        if (!st.chip_cfg.sensors)
100084a2:	4b16      	ldr	r3, [pc, #88]	; (100084fc <set_int_enable+0x9c>)
100084a4:	7a9b      	ldrb	r3, [r3, #10]
100084a6:	2b00      	cmp	r3, #0
100084a8:	d021      	beq.n	100084ee <set_int_enable+0x8e>
            return -1;
        if (enable && st.chip_cfg.int_enable)
100084aa:	2800      	cmp	r0, #0
100084ac:	d008      	beq.n	100084c0 <set_int_enable+0x60>
100084ae:	4b13      	ldr	r3, [pc, #76]	; (100084fc <set_int_enable+0x9c>)
100084b0:	7c5b      	ldrb	r3, [r3, #17]
            return 0;
100084b2:	2000      	movs	r0, #0
            return -1;
        st.chip_cfg.int_enable = tmp;
    } else {
        if (!st.chip_cfg.sensors)
            return -1;
        if (enable && st.chip_cfg.int_enable)
100084b4:	2b00      	cmp	r3, #0
100084b6:	d11f      	bne.n	100084f8 <set_int_enable+0x98>
            return 0;
        if (enable)
            tmp = BIT_DATA_RDY_EN;
100084b8:	2201      	movs	r2, #1
100084ba:	466b      	mov	r3, sp
100084bc:	71da      	strb	r2, [r3, #7]
100084be:	e002      	b.n	100084c6 <set_int_enable+0x66>
        else
            tmp = 0x00;
100084c0:	2200      	movs	r2, #0
100084c2:	466b      	mov	r3, sp
100084c4:	71da      	strb	r2, [r3, #7]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
100084c6:	4b0d      	ldr	r3, [pc, #52]	; (100084fc <set_int_enable+0x9c>)
100084c8:	681a      	ldr	r2, [r3, #0]
100084ca:	7c51      	ldrb	r1, [r2, #17]
100084cc:	685b      	ldr	r3, [r3, #4]
100084ce:	7818      	ldrb	r0, [r3, #0]
100084d0:	466b      	mov	r3, sp
100084d2:	3307      	adds	r3, #7
100084d4:	2201      	movs	r2, #1
100084d6:	4c0a      	ldr	r4, [pc, #40]	; (10008500 <set_int_enable+0xa0>)
100084d8:	47a0      	blx	r4
100084da:	2800      	cmp	r0, #0
100084dc:	d10a      	bne.n	100084f4 <set_int_enable+0x94>
            return -1;
        st.chip_cfg.int_enable = tmp;
100084de:	466b      	mov	r3, sp
100084e0:	79da      	ldrb	r2, [r3, #7]
100084e2:	4b06      	ldr	r3, [pc, #24]	; (100084fc <set_int_enable+0x9c>)
100084e4:	745a      	strb	r2, [r3, #17]
100084e6:	e007      	b.n	100084f8 <set_int_enable+0x98>
        if (enable)
            tmp = BIT_DMP_INT_EN;
        else
            tmp = 0x00;
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
            return -1;
100084e8:	2001      	movs	r0, #1
100084ea:	4240      	negs	r0, r0
100084ec:	e004      	b.n	100084f8 <set_int_enable+0x98>
        st.chip_cfg.int_enable = tmp;
    } else {
        if (!st.chip_cfg.sensors)
            return -1;
100084ee:	2001      	movs	r0, #1
100084f0:	4240      	negs	r0, r0
100084f2:	e001      	b.n	100084f8 <set_int_enable+0x98>
        if (enable)
            tmp = BIT_DATA_RDY_EN;
        else
            tmp = 0x00;
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
            return -1;
100084f4:	2001      	movs	r0, #1
100084f6:	4240      	negs	r0, r0
        st.chip_cfg.int_enable = tmp;
    }
    return 0;
}
100084f8:	b002      	add	sp, #8
100084fa:	bd10      	pop	{r4, pc}
100084fc:	10018608 	.word	0x10018608
10008500:	1000ab75 	.word	0x1000ab75

10008504 <mpu_get_temperature>:
 *  @param[out] data        Data in q16 format.
 *  @param[out] timestamp   Timestamp in milliseconds. Null if not needed.
 *  @return     0 if successful.
 */
int mpu_get_temperature(long *data, unsigned long *timestamp)
{
10008504:	b5f0      	push	{r4, r5, r6, r7, lr}
10008506:	b085      	sub	sp, #20
10008508:	0007      	movs	r7, r0
1000850a:	000e      	movs	r6, r1
    unsigned char tmp[2];
    short raw;

    if (!(st.chip_cfg.sensors))
1000850c:	4b21      	ldr	r3, [pc, #132]	; (10008594 <mpu_get_temperature+0x90>)
1000850e:	7a9b      	ldrb	r3, [r3, #10]
10008510:	2b00      	cmp	r3, #0
10008512:	d035      	beq.n	10008580 <mpu_get_temperature+0x7c>
        return -1;

    if (i2c_read(st.hw->addr, st.reg->temp, 2, tmp))
10008514:	4b1f      	ldr	r3, [pc, #124]	; (10008594 <mpu_get_temperature+0x90>)
10008516:	681a      	ldr	r2, [r3, #0]
10008518:	7c11      	ldrb	r1, [r2, #16]
1000851a:	685b      	ldr	r3, [r3, #4]
1000851c:	7818      	ldrb	r0, [r3, #0]
1000851e:	ab03      	add	r3, sp, #12
10008520:	2202      	movs	r2, #2
10008522:	4c1d      	ldr	r4, [pc, #116]	; (10008598 <mpu_get_temperature+0x94>)
10008524:	47a0      	blx	r4
10008526:	9001      	str	r0, [sp, #4]
10008528:	2800      	cmp	r0, #0
1000852a:	d12d      	bne.n	10008588 <mpu_get_temperature+0x84>
        return -1;
    raw = (tmp[0] << 8) | tmp[1];
1000852c:	ab03      	add	r3, sp, #12
1000852e:	781c      	ldrb	r4, [r3, #0]
10008530:	0224      	lsls	r4, r4, #8
10008532:	785b      	ldrb	r3, [r3, #1]
10008534:	431c      	orrs	r4, r3
10008536:	b224      	sxth	r4, r4
    if (timestamp)
10008538:	2e00      	cmp	r6, #0
1000853a:	d002      	beq.n	10008542 <mpu_get_temperature+0x3e>
        get_ms(timestamp);
1000853c:	0030      	movs	r0, r6
1000853e:	4b17      	ldr	r3, [pc, #92]	; (1000859c <mpu_get_temperature+0x98>)
10008540:	4798      	blx	r3

    data[0] = (long)((35 + ((raw - (float)st.hw->temp_offset) / st.hw->temp_sens)) * 65536L);
10008542:	4b14      	ldr	r3, [pc, #80]	; (10008594 <mpu_get_temperature+0x90>)
10008544:	685d      	ldr	r5, [r3, #4]
10008546:	4e16      	ldr	r6, [pc, #88]	; (100085a0 <mpu_get_temperature+0x9c>)
10008548:	0020      	movs	r0, r4
1000854a:	47b0      	blx	r6
1000854c:	1c04      	adds	r4, r0, #0
1000854e:	2308      	movs	r3, #8
10008550:	5ee8      	ldrsh	r0, [r5, r3]
10008552:	47b0      	blx	r6
10008554:	1c01      	adds	r1, r0, #0
10008556:	1c20      	adds	r0, r4, #0
10008558:	4b12      	ldr	r3, [pc, #72]	; (100085a4 <mpu_get_temperature+0xa0>)
1000855a:	4798      	blx	r3
1000855c:	1c04      	adds	r4, r0, #0
1000855e:	88e8      	ldrh	r0, [r5, #6]
10008560:	47b0      	blx	r6
10008562:	1c01      	adds	r1, r0, #0
10008564:	1c20      	adds	r0, r4, #0
10008566:	4b10      	ldr	r3, [pc, #64]	; (100085a8 <mpu_get_temperature+0xa4>)
10008568:	4798      	blx	r3
1000856a:	4910      	ldr	r1, [pc, #64]	; (100085ac <mpu_get_temperature+0xa8>)
1000856c:	4b10      	ldr	r3, [pc, #64]	; (100085b0 <mpu_get_temperature+0xac>)
1000856e:	4798      	blx	r3
10008570:	218f      	movs	r1, #143	; 0x8f
10008572:	05c9      	lsls	r1, r1, #23
10008574:	4b0f      	ldr	r3, [pc, #60]	; (100085b4 <mpu_get_temperature+0xb0>)
10008576:	4798      	blx	r3
10008578:	4b0f      	ldr	r3, [pc, #60]	; (100085b8 <mpu_get_temperature+0xb4>)
1000857a:	4798      	blx	r3
1000857c:	6038      	str	r0, [r7, #0]
    return 0;
1000857e:	e006      	b.n	1000858e <mpu_get_temperature+0x8a>
{
    unsigned char tmp[2];
    short raw;

    if (!(st.chip_cfg.sensors))
        return -1;
10008580:	2301      	movs	r3, #1
10008582:	425b      	negs	r3, r3
10008584:	9301      	str	r3, [sp, #4]
10008586:	e002      	b.n	1000858e <mpu_get_temperature+0x8a>

    if (i2c_read(st.hw->addr, st.reg->temp, 2, tmp))
        return -1;
10008588:	2301      	movs	r3, #1
1000858a:	425b      	negs	r3, r3
1000858c:	9301      	str	r3, [sp, #4]
    if (timestamp)
        get_ms(timestamp);

    data[0] = (long)((35 + ((raw - (float)st.hw->temp_offset) / st.hw->temp_sens)) * 65536L);
    return 0;
}
1000858e:	9801      	ldr	r0, [sp, #4]
10008590:	b005      	add	sp, #20
10008592:	bdf0      	pop	{r4, r5, r6, r7, pc}
10008594:	10018608 	.word	0x10018608
10008598:	1000abd1 	.word	0x1000abd1
1000859c:	1000b549 	.word	0x1000b549
100085a0:	100141c1 	.word	0x100141c1
100085a4:	10013e71 	.word	0x10013e71
100085a8:	100138b5 	.word	0x100138b5
100085ac:	420c0000 	.word	0x420c0000
100085b0:	100135c9 	.word	0x100135c9
100085b4:	10013c49 	.word	0x10013c49
100085b8:	1001417d 	.word	0x1001417d

100085bc <mpu_reset_fifo>:
/**
 *  @brief  Reset FIFO read/write pointers.
 *  @return 0 if successful.
 */
int mpu_reset_fifo(void)
{
100085bc:	b510      	push	{r4, lr}
100085be:	b082      	sub	sp, #8
    unsigned char data;

    if (!(st.chip_cfg.sensors))
100085c0:	4b79      	ldr	r3, [pc, #484]	; (100087a8 <mpu_reset_fifo+0x1ec>)
100085c2:	7a9b      	ldrb	r3, [r3, #10]
100085c4:	2b00      	cmp	r3, #0
100085c6:	d100      	bne.n	100085ca <mpu_reset_fifo+0xe>
100085c8:	e0ce      	b.n	10008768 <mpu_reset_fifo+0x1ac>
        return -1;

    data = 0;
100085ca:	466b      	mov	r3, sp
100085cc:	3307      	adds	r3, #7
100085ce:	2200      	movs	r2, #0
100085d0:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
100085d2:	4a75      	ldr	r2, [pc, #468]	; (100087a8 <mpu_reset_fifo+0x1ec>)
100085d4:	6811      	ldr	r1, [r2, #0]
100085d6:	7c49      	ldrb	r1, [r1, #17]
100085d8:	6852      	ldr	r2, [r2, #4]
100085da:	7810      	ldrb	r0, [r2, #0]
100085dc:	2201      	movs	r2, #1
100085de:	4c73      	ldr	r4, [pc, #460]	; (100087ac <mpu_reset_fifo+0x1f0>)
100085e0:	47a0      	blx	r4
100085e2:	2800      	cmp	r0, #0
100085e4:	d000      	beq.n	100085e8 <mpu_reset_fifo+0x2c>
100085e6:	e0c2      	b.n	1000876e <mpu_reset_fifo+0x1b2>
        return -1;
    if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
100085e8:	4b6f      	ldr	r3, [pc, #444]	; (100087a8 <mpu_reset_fifo+0x1ec>)
100085ea:	681a      	ldr	r2, [r3, #0]
100085ec:	7951      	ldrb	r1, [r2, #5]
100085ee:	685b      	ldr	r3, [r3, #4]
100085f0:	7818      	ldrb	r0, [r3, #0]
100085f2:	466b      	mov	r3, sp
100085f4:	3307      	adds	r3, #7
100085f6:	2201      	movs	r2, #1
100085f8:	4c6c      	ldr	r4, [pc, #432]	; (100087ac <mpu_reset_fifo+0x1f0>)
100085fa:	47a0      	blx	r4
100085fc:	2800      	cmp	r0, #0
100085fe:	d000      	beq.n	10008602 <mpu_reset_fifo+0x46>
10008600:	e0b8      	b.n	10008774 <mpu_reset_fifo+0x1b8>
        return -1;
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
10008602:	4b69      	ldr	r3, [pc, #420]	; (100087a8 <mpu_reset_fifo+0x1ec>)
10008604:	681a      	ldr	r2, [r3, #0]
10008606:	7911      	ldrb	r1, [r2, #4]
10008608:	685b      	ldr	r3, [r3, #4]
1000860a:	7818      	ldrb	r0, [r3, #0]
1000860c:	466b      	mov	r3, sp
1000860e:	3307      	adds	r3, #7
10008610:	2201      	movs	r2, #1
10008612:	4c66      	ldr	r4, [pc, #408]	; (100087ac <mpu_reset_fifo+0x1f0>)
10008614:	47a0      	blx	r4
10008616:	2800      	cmp	r0, #0
10008618:	d000      	beq.n	1000861c <mpu_reset_fifo+0x60>
1000861a:	e0ae      	b.n	1000877a <mpu_reset_fifo+0x1be>
        return -1;

    if (st.chip_cfg.dmp_on) {
1000861c:	2324      	movs	r3, #36	; 0x24
1000861e:	4a62      	ldr	r2, [pc, #392]	; (100087a8 <mpu_reset_fifo+0x1ec>)
10008620:	5cd3      	ldrb	r3, [r2, r3]
10008622:	2b00      	cmp	r3, #0
10008624:	d04f      	beq.n	100086c6 <mpu_reset_fifo+0x10a>
        data = BIT_FIFO_RST | BIT_DMP_RST;
10008626:	466b      	mov	r3, sp
10008628:	3307      	adds	r3, #7
1000862a:	220c      	movs	r2, #12
1000862c:	701a      	strb	r2, [r3, #0]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
1000862e:	4a5e      	ldr	r2, [pc, #376]	; (100087a8 <mpu_reset_fifo+0x1ec>)
10008630:	6811      	ldr	r1, [r2, #0]
10008632:	7909      	ldrb	r1, [r1, #4]
10008634:	6852      	ldr	r2, [r2, #4]
10008636:	7810      	ldrb	r0, [r2, #0]
10008638:	2201      	movs	r2, #1
1000863a:	4c5c      	ldr	r4, [pc, #368]	; (100087ac <mpu_reset_fifo+0x1f0>)
1000863c:	47a0      	blx	r4
1000863e:	2800      	cmp	r0, #0
10008640:	d000      	beq.n	10008644 <mpu_reset_fifo+0x88>
10008642:	e09d      	b.n	10008780 <mpu_reset_fifo+0x1c4>
            return -1;
        delay_ms(50);
10008644:	3032      	adds	r0, #50	; 0x32
10008646:	4b5a      	ldr	r3, [pc, #360]	; (100087b0 <mpu_reset_fifo+0x1f4>)
10008648:	4798      	blx	r3
        data = BIT_DMP_EN | BIT_FIFO_EN;
1000864a:	22c0      	movs	r2, #192	; 0xc0
1000864c:	466b      	mov	r3, sp
1000864e:	71da      	strb	r2, [r3, #7]
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
10008650:	4b55      	ldr	r3, [pc, #340]	; (100087a8 <mpu_reset_fifo+0x1ec>)
10008652:	7a9b      	ldrb	r3, [r3, #10]
10008654:	07db      	lsls	r3, r3, #31
10008656:	d502      	bpl.n	1000865e <mpu_reset_fifo+0xa2>
            data |= BIT_AUX_IF_EN;
10008658:	3220      	adds	r2, #32
1000865a:	466b      	mov	r3, sp
1000865c:	71da      	strb	r2, [r3, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
1000865e:	4b52      	ldr	r3, [pc, #328]	; (100087a8 <mpu_reset_fifo+0x1ec>)
10008660:	681a      	ldr	r2, [r3, #0]
10008662:	7911      	ldrb	r1, [r2, #4]
10008664:	685b      	ldr	r3, [r3, #4]
10008666:	7818      	ldrb	r0, [r3, #0]
10008668:	466b      	mov	r3, sp
1000866a:	3307      	adds	r3, #7
1000866c:	2201      	movs	r2, #1
1000866e:	4c4f      	ldr	r4, [pc, #316]	; (100087ac <mpu_reset_fifo+0x1f0>)
10008670:	47a0      	blx	r4
10008672:	2800      	cmp	r0, #0
10008674:	d000      	beq.n	10008678 <mpu_reset_fifo+0xbc>
10008676:	e086      	b.n	10008786 <mpu_reset_fifo+0x1ca>
            return -1;
        if (st.chip_cfg.int_enable)
10008678:	4b4b      	ldr	r3, [pc, #300]	; (100087a8 <mpu_reset_fifo+0x1ec>)
1000867a:	7c5b      	ldrb	r3, [r3, #17]
1000867c:	2b00      	cmp	r3, #0
1000867e:	d003      	beq.n	10008688 <mpu_reset_fifo+0xcc>
            data = BIT_DMP_INT_EN;
10008680:	2202      	movs	r2, #2
10008682:	466b      	mov	r3, sp
10008684:	71da      	strb	r2, [r3, #7]
10008686:	e002      	b.n	1000868e <mpu_reset_fifo+0xd2>
        else
            data = 0;
10008688:	2200      	movs	r2, #0
1000868a:	466b      	mov	r3, sp
1000868c:	71da      	strb	r2, [r3, #7]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
1000868e:	4b46      	ldr	r3, [pc, #280]	; (100087a8 <mpu_reset_fifo+0x1ec>)
10008690:	681a      	ldr	r2, [r3, #0]
10008692:	7c51      	ldrb	r1, [r2, #17]
10008694:	685b      	ldr	r3, [r3, #4]
10008696:	7818      	ldrb	r0, [r3, #0]
10008698:	466b      	mov	r3, sp
1000869a:	3307      	adds	r3, #7
1000869c:	2201      	movs	r2, #1
1000869e:	4c43      	ldr	r4, [pc, #268]	; (100087ac <mpu_reset_fifo+0x1f0>)
100086a0:	47a0      	blx	r4
100086a2:	2800      	cmp	r0, #0
100086a4:	d172      	bne.n	1000878c <mpu_reset_fifo+0x1d0>
            return -1;
        data = 0;
100086a6:	466b      	mov	r3, sp
100086a8:	3307      	adds	r3, #7
100086aa:	2200      	movs	r2, #0
100086ac:	701a      	strb	r2, [r3, #0]
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
100086ae:	4a3e      	ldr	r2, [pc, #248]	; (100087a8 <mpu_reset_fifo+0x1ec>)
100086b0:	6811      	ldr	r1, [r2, #0]
100086b2:	7949      	ldrb	r1, [r1, #5]
100086b4:	6852      	ldr	r2, [r2, #4]
100086b6:	7810      	ldrb	r0, [r2, #0]
100086b8:	2201      	movs	r2, #1
100086ba:	4c3c      	ldr	r4, [pc, #240]	; (100087ac <mpu_reset_fifo+0x1f0>)
100086bc:	47a0      	blx	r4
100086be:	1e43      	subs	r3, r0, #1
100086c0:	4198      	sbcs	r0, r3
100086c2:	4240      	negs	r0, r0
100086c4:	e06d      	b.n	100087a2 <mpu_reset_fifo+0x1e6>
            return -1;
    } else {
        data = BIT_FIFO_RST;
100086c6:	466b      	mov	r3, sp
100086c8:	3307      	adds	r3, #7
100086ca:	2204      	movs	r2, #4
100086cc:	701a      	strb	r2, [r3, #0]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
100086ce:	4a36      	ldr	r2, [pc, #216]	; (100087a8 <mpu_reset_fifo+0x1ec>)
100086d0:	6811      	ldr	r1, [r2, #0]
100086d2:	7909      	ldrb	r1, [r1, #4]
100086d4:	6852      	ldr	r2, [r2, #4]
100086d6:	7810      	ldrb	r0, [r2, #0]
100086d8:	2201      	movs	r2, #1
100086da:	4c34      	ldr	r4, [pc, #208]	; (100087ac <mpu_reset_fifo+0x1f0>)
100086dc:	47a0      	blx	r4
100086de:	2800      	cmp	r0, #0
100086e0:	d157      	bne.n	10008792 <mpu_reset_fifo+0x1d6>
            return -1;
        if (st.chip_cfg.bypass_mode || !(st.chip_cfg.sensors & INV_XYZ_COMPASS))
100086e2:	4b31      	ldr	r3, [pc, #196]	; (100087a8 <mpu_reset_fifo+0x1ec>)
100086e4:	7c9b      	ldrb	r3, [r3, #18]
100086e6:	2b00      	cmp	r3, #0
100086e8:	d103      	bne.n	100086f2 <mpu_reset_fifo+0x136>
100086ea:	4b2f      	ldr	r3, [pc, #188]	; (100087a8 <mpu_reset_fifo+0x1ec>)
100086ec:	7a9b      	ldrb	r3, [r3, #10]
100086ee:	07db      	lsls	r3, r3, #31
100086f0:	d403      	bmi.n	100086fa <mpu_reset_fifo+0x13e>
            data = BIT_FIFO_EN;
100086f2:	2240      	movs	r2, #64	; 0x40
100086f4:	466b      	mov	r3, sp
100086f6:	71da      	strb	r2, [r3, #7]
100086f8:	e002      	b.n	10008700 <mpu_reset_fifo+0x144>
        else
            data = BIT_FIFO_EN | BIT_AUX_IF_EN;
100086fa:	2260      	movs	r2, #96	; 0x60
100086fc:	466b      	mov	r3, sp
100086fe:	71da      	strb	r2, [r3, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
10008700:	4b29      	ldr	r3, [pc, #164]	; (100087a8 <mpu_reset_fifo+0x1ec>)
10008702:	681a      	ldr	r2, [r3, #0]
10008704:	7911      	ldrb	r1, [r2, #4]
10008706:	685b      	ldr	r3, [r3, #4]
10008708:	7818      	ldrb	r0, [r3, #0]
1000870a:	466b      	mov	r3, sp
1000870c:	3307      	adds	r3, #7
1000870e:	2201      	movs	r2, #1
10008710:	4c26      	ldr	r4, [pc, #152]	; (100087ac <mpu_reset_fifo+0x1f0>)
10008712:	47a0      	blx	r4
10008714:	2800      	cmp	r0, #0
10008716:	d13f      	bne.n	10008798 <mpu_reset_fifo+0x1dc>
            return -1;
        delay_ms(50);
10008718:	3032      	adds	r0, #50	; 0x32
1000871a:	4b25      	ldr	r3, [pc, #148]	; (100087b0 <mpu_reset_fifo+0x1f4>)
1000871c:	4798      	blx	r3
        if (st.chip_cfg.int_enable)
1000871e:	4b22      	ldr	r3, [pc, #136]	; (100087a8 <mpu_reset_fifo+0x1ec>)
10008720:	7c5b      	ldrb	r3, [r3, #17]
10008722:	2b00      	cmp	r3, #0
10008724:	d003      	beq.n	1000872e <mpu_reset_fifo+0x172>
            data = BIT_DATA_RDY_EN;
10008726:	2201      	movs	r2, #1
10008728:	466b      	mov	r3, sp
1000872a:	71da      	strb	r2, [r3, #7]
1000872c:	e002      	b.n	10008734 <mpu_reset_fifo+0x178>
        else
            data = 0;
1000872e:	2200      	movs	r2, #0
10008730:	466b      	mov	r3, sp
10008732:	71da      	strb	r2, [r3, #7]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
10008734:	4b1c      	ldr	r3, [pc, #112]	; (100087a8 <mpu_reset_fifo+0x1ec>)
10008736:	681a      	ldr	r2, [r3, #0]
10008738:	7c51      	ldrb	r1, [r2, #17]
1000873a:	685b      	ldr	r3, [r3, #4]
1000873c:	7818      	ldrb	r0, [r3, #0]
1000873e:	466b      	mov	r3, sp
10008740:	3307      	adds	r3, #7
10008742:	2201      	movs	r2, #1
10008744:	4c19      	ldr	r4, [pc, #100]	; (100087ac <mpu_reset_fifo+0x1f0>)
10008746:	47a0      	blx	r4
10008748:	2800      	cmp	r0, #0
1000874a:	d128      	bne.n	1000879e <mpu_reset_fifo+0x1e2>
            return -1;
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &st.chip_cfg.fifo_enable))
1000874c:	4a16      	ldr	r2, [pc, #88]	; (100087a8 <mpu_reset_fifo+0x1ec>)
1000874e:	0013      	movs	r3, r2
10008750:	3310      	adds	r3, #16
10008752:	6811      	ldr	r1, [r2, #0]
10008754:	7949      	ldrb	r1, [r1, #5]
10008756:	6852      	ldr	r2, [r2, #4]
10008758:	7810      	ldrb	r0, [r2, #0]
1000875a:	2201      	movs	r2, #1
1000875c:	4c13      	ldr	r4, [pc, #76]	; (100087ac <mpu_reset_fifo+0x1f0>)
1000875e:	47a0      	blx	r4
10008760:	1e43      	subs	r3, r0, #1
10008762:	4198      	sbcs	r0, r3
10008764:	4240      	negs	r0, r0
10008766:	e01c      	b.n	100087a2 <mpu_reset_fifo+0x1e6>
int mpu_reset_fifo(void)
{
    unsigned char data;

    if (!(st.chip_cfg.sensors))
        return -1;
10008768:	2001      	movs	r0, #1
1000876a:	4240      	negs	r0, r0
1000876c:	e019      	b.n	100087a2 <mpu_reset_fifo+0x1e6>

    data = 0;
    if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
        return -1;
1000876e:	2001      	movs	r0, #1
10008770:	4240      	negs	r0, r0
10008772:	e016      	b.n	100087a2 <mpu_reset_fifo+0x1e6>
    if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
        return -1;
10008774:	2001      	movs	r0, #1
10008776:	4240      	negs	r0, r0
10008778:	e013      	b.n	100087a2 <mpu_reset_fifo+0x1e6>
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
        return -1;
1000877a:	2001      	movs	r0, #1
1000877c:	4240      	negs	r0, r0
1000877e:	e010      	b.n	100087a2 <mpu_reset_fifo+0x1e6>

    if (st.chip_cfg.dmp_on) {
        data = BIT_FIFO_RST | BIT_DMP_RST;
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
            return -1;
10008780:	2001      	movs	r0, #1
10008782:	4240      	negs	r0, r0
10008784:	e00d      	b.n	100087a2 <mpu_reset_fifo+0x1e6>
        delay_ms(50);
        data = BIT_DMP_EN | BIT_FIFO_EN;
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
            data |= BIT_AUX_IF_EN;
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
            return -1;
10008786:	2001      	movs	r0, #1
10008788:	4240      	negs	r0, r0
1000878a:	e00a      	b.n	100087a2 <mpu_reset_fifo+0x1e6>
        if (st.chip_cfg.int_enable)
            data = BIT_DMP_INT_EN;
        else
            data = 0;
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
            return -1;
1000878c:	2001      	movs	r0, #1
1000878e:	4240      	negs	r0, r0
10008790:	e007      	b.n	100087a2 <mpu_reset_fifo+0x1e6>
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
            return -1;
    } else {
        data = BIT_FIFO_RST;
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
            return -1;
10008792:	2001      	movs	r0, #1
10008794:	4240      	negs	r0, r0
10008796:	e004      	b.n	100087a2 <mpu_reset_fifo+0x1e6>
        if (st.chip_cfg.bypass_mode || !(st.chip_cfg.sensors & INV_XYZ_COMPASS))
            data = BIT_FIFO_EN;
        else
            data = BIT_FIFO_EN | BIT_AUX_IF_EN;
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
            return -1;
10008798:	2001      	movs	r0, #1
1000879a:	4240      	negs	r0, r0
1000879c:	e001      	b.n	100087a2 <mpu_reset_fifo+0x1e6>
        if (st.chip_cfg.int_enable)
            data = BIT_DATA_RDY_EN;
        else
            data = 0;
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
            return -1;
1000879e:	2001      	movs	r0, #1
100087a0:	4240      	negs	r0, r0
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &st.chip_cfg.fifo_enable))
            return -1;
    }
    return 0;
}
100087a2:	b002      	add	sp, #8
100087a4:	bd10      	pop	{r4, pc}
100087a6:	46c0      	nop			; (mov r8, r8)
100087a8:	10018608 	.word	0x10018608
100087ac:	1000ab75 	.word	0x1000ab75
100087b0:	10008129 	.word	0x10008129

100087b4 <mpu_set_gyro_fsr>:
 *  @brief      Set the gyro full-scale range.
 *  @param[in]  fsr Desired full-scale range.
 *  @return     0 if successful.
 */
int mpu_set_gyro_fsr(unsigned short fsr)
{
100087b4:	b510      	push	{r4, lr}
100087b6:	b082      	sub	sp, #8
    unsigned char data;

    if (!(st.chip_cfg.sensors))
100087b8:	4b24      	ldr	r3, [pc, #144]	; (1000884c <mpu_set_gyro_fsr+0x98>)
100087ba:	7a9b      	ldrb	r3, [r3, #10]
100087bc:	2b00      	cmp	r3, #0
100087be:	d03b      	beq.n	10008838 <mpu_set_gyro_fsr+0x84>
        return -1;

    switch (fsr) {
100087c0:	23fa      	movs	r3, #250	; 0xfa
100087c2:	005b      	lsls	r3, r3, #1
100087c4:	4298      	cmp	r0, r3
100087c6:	d010      	beq.n	100087ea <mpu_set_gyro_fsr+0x36>
100087c8:	d802      	bhi.n	100087d0 <mpu_set_gyro_fsr+0x1c>
100087ca:	28fa      	cmp	r0, #250	; 0xfa
100087cc:	d009      	beq.n	100087e2 <mpu_set_gyro_fsr+0x2e>
100087ce:	e036      	b.n	1000883e <mpu_set_gyro_fsr+0x8a>
100087d0:	23fa      	movs	r3, #250	; 0xfa
100087d2:	009b      	lsls	r3, r3, #2
100087d4:	4298      	cmp	r0, r3
100087d6:	d00c      	beq.n	100087f2 <mpu_set_gyro_fsr+0x3e>
100087d8:	23fa      	movs	r3, #250	; 0xfa
100087da:	00db      	lsls	r3, r3, #3
100087dc:	4298      	cmp	r0, r3
100087de:	d00c      	beq.n	100087fa <mpu_set_gyro_fsr+0x46>
100087e0:	e02d      	b.n	1000883e <mpu_set_gyro_fsr+0x8a>
    case 250:
        data = INV_FSR_250DPS << 3;
100087e2:	2200      	movs	r2, #0
100087e4:	466b      	mov	r3, sp
100087e6:	71da      	strb	r2, [r3, #7]
        break;
100087e8:	e00a      	b.n	10008800 <mpu_set_gyro_fsr+0x4c>
    case 500:
        data = INV_FSR_500DPS << 3;
100087ea:	2208      	movs	r2, #8
100087ec:	466b      	mov	r3, sp
100087ee:	71da      	strb	r2, [r3, #7]
        break;
100087f0:	e006      	b.n	10008800 <mpu_set_gyro_fsr+0x4c>
    case 1000:
        data = INV_FSR_1000DPS << 3;
100087f2:	2210      	movs	r2, #16
100087f4:	466b      	mov	r3, sp
100087f6:	71da      	strb	r2, [r3, #7]
        break;
100087f8:	e002      	b.n	10008800 <mpu_set_gyro_fsr+0x4c>
    case 2000:
        data = INV_FSR_2000DPS << 3;
100087fa:	2218      	movs	r2, #24
100087fc:	466b      	mov	r3, sp
100087fe:	71da      	strb	r2, [r3, #7]
        break;
    default:
        return -1;
    }

    if (st.chip_cfg.gyro_fsr == (data >> 3))
10008800:	466b      	mov	r3, sp
10008802:	3307      	adds	r3, #7
10008804:	781b      	ldrb	r3, [r3, #0]
10008806:	4a11      	ldr	r2, [pc, #68]	; (1000884c <mpu_set_gyro_fsr+0x98>)
10008808:	7a12      	ldrb	r2, [r2, #8]
1000880a:	08db      	lsrs	r3, r3, #3
        return 0;
1000880c:	2000      	movs	r0, #0
        break;
    default:
        return -1;
    }

    if (st.chip_cfg.gyro_fsr == (data >> 3))
1000880e:	429a      	cmp	r2, r3
10008810:	d01a      	beq.n	10008848 <mpu_set_gyro_fsr+0x94>
        return 0;
    if (i2c_write(st.hw->addr, st.reg->gyro_cfg, 1, &data))
10008812:	4b0e      	ldr	r3, [pc, #56]	; (1000884c <mpu_set_gyro_fsr+0x98>)
10008814:	681a      	ldr	r2, [r3, #0]
10008816:	7991      	ldrb	r1, [r2, #6]
10008818:	685b      	ldr	r3, [r3, #4]
1000881a:	7818      	ldrb	r0, [r3, #0]
1000881c:	466b      	mov	r3, sp
1000881e:	3307      	adds	r3, #7
10008820:	2201      	movs	r2, #1
10008822:	4c0b      	ldr	r4, [pc, #44]	; (10008850 <mpu_set_gyro_fsr+0x9c>)
10008824:	47a0      	blx	r4
10008826:	2800      	cmp	r0, #0
10008828:	d10c      	bne.n	10008844 <mpu_set_gyro_fsr+0x90>
        return -1;
    st.chip_cfg.gyro_fsr = data >> 3;
1000882a:	466b      	mov	r3, sp
1000882c:	3307      	adds	r3, #7
1000882e:	781b      	ldrb	r3, [r3, #0]
10008830:	08db      	lsrs	r3, r3, #3
10008832:	4a06      	ldr	r2, [pc, #24]	; (1000884c <mpu_set_gyro_fsr+0x98>)
10008834:	7213      	strb	r3, [r2, #8]
    return 0;
10008836:	e007      	b.n	10008848 <mpu_set_gyro_fsr+0x94>
int mpu_set_gyro_fsr(unsigned short fsr)
{
    unsigned char data;

    if (!(st.chip_cfg.sensors))
        return -1;
10008838:	2001      	movs	r0, #1
1000883a:	4240      	negs	r0, r0
1000883c:	e004      	b.n	10008848 <mpu_set_gyro_fsr+0x94>
        break;
    case 2000:
        data = INV_FSR_2000DPS << 3;
        break;
    default:
        return -1;
1000883e:	2001      	movs	r0, #1
10008840:	4240      	negs	r0, r0
10008842:	e001      	b.n	10008848 <mpu_set_gyro_fsr+0x94>
    }

    if (st.chip_cfg.gyro_fsr == (data >> 3))
        return 0;
    if (i2c_write(st.hw->addr, st.reg->gyro_cfg, 1, &data))
        return -1;
10008844:	2001      	movs	r0, #1
10008846:	4240      	negs	r0, r0
    st.chip_cfg.gyro_fsr = data >> 3;
    return 0;
}
10008848:	b002      	add	sp, #8
1000884a:	bd10      	pop	{r4, pc}
1000884c:	10018608 	.word	0x10018608
10008850:	1000ab75 	.word	0x1000ab75

10008854 <mpu_get_accel_fsr>:
 *  @param[out] fsr Current full-scale range.
 *  @return     0 if successful.
 */
int mpu_get_accel_fsr(unsigned char *fsr)
{
    switch (st.chip_cfg.accel_fsr) {
10008854:	4b11      	ldr	r3, [pc, #68]	; (1000889c <mpu_get_accel_fsr+0x48>)
10008856:	7a5b      	ldrb	r3, [r3, #9]
10008858:	2b01      	cmp	r3, #1
1000885a:	d009      	beq.n	10008870 <mpu_get_accel_fsr+0x1c>
1000885c:	2b00      	cmp	r3, #0
1000885e:	d004      	beq.n	1000886a <mpu_get_accel_fsr+0x16>
10008860:	2b02      	cmp	r3, #2
10008862:	d008      	beq.n	10008876 <mpu_get_accel_fsr+0x22>
10008864:	2b03      	cmp	r3, #3
10008866:	d009      	beq.n	1000887c <mpu_get_accel_fsr+0x28>
10008868:	e014      	b.n	10008894 <mpu_get_accel_fsr+0x40>
    case INV_FSR_2G:
        fsr[0] = 2;
1000886a:	2302      	movs	r3, #2
1000886c:	7003      	strb	r3, [r0, #0]
        break;
1000886e:	e007      	b.n	10008880 <mpu_get_accel_fsr+0x2c>
    case INV_FSR_4G:
        fsr[0] = 4;
10008870:	2304      	movs	r3, #4
10008872:	7003      	strb	r3, [r0, #0]
        break;
10008874:	e004      	b.n	10008880 <mpu_get_accel_fsr+0x2c>
    case INV_FSR_8G:
        fsr[0] = 8;
10008876:	2308      	movs	r3, #8
10008878:	7003      	strb	r3, [r0, #0]
        break;
1000887a:	e001      	b.n	10008880 <mpu_get_accel_fsr+0x2c>
    case INV_FSR_16G:
        fsr[0] = 16;
1000887c:	2310      	movs	r3, #16
1000887e:	7003      	strb	r3, [r0, #0]
        break;
    default:
        return -1;
    }
    if (st.chip_cfg.accel_half)
10008880:	4b06      	ldr	r3, [pc, #24]	; (1000889c <mpu_get_accel_fsr+0x48>)
10008882:	7cda      	ldrb	r2, [r3, #19]
        fsr[0] <<= 1;
    return 0;
10008884:	2300      	movs	r3, #0
        fsr[0] = 16;
        break;
    default:
        return -1;
    }
    if (st.chip_cfg.accel_half)
10008886:	2a00      	cmp	r2, #0
10008888:	d006      	beq.n	10008898 <mpu_get_accel_fsr+0x44>
        fsr[0] <<= 1;
1000888a:	7803      	ldrb	r3, [r0, #0]
1000888c:	005b      	lsls	r3, r3, #1
1000888e:	7003      	strb	r3, [r0, #0]
    return 0;
10008890:	2300      	movs	r3, #0
10008892:	e001      	b.n	10008898 <mpu_get_accel_fsr+0x44>
        break;
    case INV_FSR_16G:
        fsr[0] = 16;
        break;
    default:
        return -1;
10008894:	2301      	movs	r3, #1
10008896:	425b      	negs	r3, r3
    }
    if (st.chip_cfg.accel_half)
        fsr[0] <<= 1;
    return 0;
}
10008898:	0018      	movs	r0, r3
1000889a:	4770      	bx	lr
1000889c:	10018608 	.word	0x10018608

100088a0 <mpu_set_accel_fsr>:
 *  @brief      Set the accel full-scale range.
 *  @param[in]  fsr Desired full-scale range.
 *  @return     0 if successful.
 */
int mpu_set_accel_fsr(unsigned char fsr)
{
100088a0:	b510      	push	{r4, lr}
100088a2:	b082      	sub	sp, #8
    unsigned char data;

    if (!(st.chip_cfg.sensors))
100088a4:	4b21      	ldr	r3, [pc, #132]	; (1000892c <mpu_set_accel_fsr+0x8c>)
100088a6:	7a9b      	ldrb	r3, [r3, #10]
100088a8:	2b00      	cmp	r3, #0
100088aa:	d035      	beq.n	10008918 <mpu_set_accel_fsr+0x78>
        return -1;

    switch (fsr) {
100088ac:	2804      	cmp	r0, #4
100088ae:	d00c      	beq.n	100088ca <mpu_set_accel_fsr+0x2a>
100088b0:	d802      	bhi.n	100088b8 <mpu_set_accel_fsr+0x18>
100088b2:	2802      	cmp	r0, #2
100088b4:	d005      	beq.n	100088c2 <mpu_set_accel_fsr+0x22>
100088b6:	e032      	b.n	1000891e <mpu_set_accel_fsr+0x7e>
100088b8:	2808      	cmp	r0, #8
100088ba:	d00a      	beq.n	100088d2 <mpu_set_accel_fsr+0x32>
100088bc:	2810      	cmp	r0, #16
100088be:	d00c      	beq.n	100088da <mpu_set_accel_fsr+0x3a>
100088c0:	e02d      	b.n	1000891e <mpu_set_accel_fsr+0x7e>
    case 2:
        data = INV_FSR_2G << 3;
100088c2:	2200      	movs	r2, #0
100088c4:	466b      	mov	r3, sp
100088c6:	71da      	strb	r2, [r3, #7]
        break;
100088c8:	e00a      	b.n	100088e0 <mpu_set_accel_fsr+0x40>
    case 4:
        data = INV_FSR_4G << 3;
100088ca:	2208      	movs	r2, #8
100088cc:	466b      	mov	r3, sp
100088ce:	71da      	strb	r2, [r3, #7]
        break;
100088d0:	e006      	b.n	100088e0 <mpu_set_accel_fsr+0x40>
    case 8:
        data = INV_FSR_8G << 3;
100088d2:	2210      	movs	r2, #16
100088d4:	466b      	mov	r3, sp
100088d6:	71da      	strb	r2, [r3, #7]
        break;
100088d8:	e002      	b.n	100088e0 <mpu_set_accel_fsr+0x40>
    case 16:
        data = INV_FSR_16G << 3;
100088da:	2218      	movs	r2, #24
100088dc:	466b      	mov	r3, sp
100088de:	71da      	strb	r2, [r3, #7]
        break;
    default:
        return -1;
    }

    if (st.chip_cfg.accel_fsr == (data >> 3))
100088e0:	466b      	mov	r3, sp
100088e2:	3307      	adds	r3, #7
100088e4:	781b      	ldrb	r3, [r3, #0]
100088e6:	4a11      	ldr	r2, [pc, #68]	; (1000892c <mpu_set_accel_fsr+0x8c>)
100088e8:	7a52      	ldrb	r2, [r2, #9]
100088ea:	08db      	lsrs	r3, r3, #3
        return 0;
100088ec:	2000      	movs	r0, #0
        break;
    default:
        return -1;
    }

    if (st.chip_cfg.accel_fsr == (data >> 3))
100088ee:	429a      	cmp	r2, r3
100088f0:	d01a      	beq.n	10008928 <mpu_set_accel_fsr+0x88>
        return 0;
    if (i2c_write(st.hw->addr, st.reg->accel_cfg, 1, &data))
100088f2:	4b0e      	ldr	r3, [pc, #56]	; (1000892c <mpu_set_accel_fsr+0x8c>)
100088f4:	681a      	ldr	r2, [r3, #0]
100088f6:	79d1      	ldrb	r1, [r2, #7]
100088f8:	685b      	ldr	r3, [r3, #4]
100088fa:	7818      	ldrb	r0, [r3, #0]
100088fc:	466b      	mov	r3, sp
100088fe:	3307      	adds	r3, #7
10008900:	2201      	movs	r2, #1
10008902:	4c0b      	ldr	r4, [pc, #44]	; (10008930 <mpu_set_accel_fsr+0x90>)
10008904:	47a0      	blx	r4
10008906:	2800      	cmp	r0, #0
10008908:	d10c      	bne.n	10008924 <mpu_set_accel_fsr+0x84>
        return -1;
    st.chip_cfg.accel_fsr = data >> 3;
1000890a:	466b      	mov	r3, sp
1000890c:	3307      	adds	r3, #7
1000890e:	781b      	ldrb	r3, [r3, #0]
10008910:	08db      	lsrs	r3, r3, #3
10008912:	4a06      	ldr	r2, [pc, #24]	; (1000892c <mpu_set_accel_fsr+0x8c>)
10008914:	7253      	strb	r3, [r2, #9]
    return 0;
10008916:	e007      	b.n	10008928 <mpu_set_accel_fsr+0x88>
int mpu_set_accel_fsr(unsigned char fsr)
{
    unsigned char data;

    if (!(st.chip_cfg.sensors))
        return -1;
10008918:	2001      	movs	r0, #1
1000891a:	4240      	negs	r0, r0
1000891c:	e004      	b.n	10008928 <mpu_set_accel_fsr+0x88>
        break;
    case 16:
        data = INV_FSR_16G << 3;
        break;
    default:
        return -1;
1000891e:	2001      	movs	r0, #1
10008920:	4240      	negs	r0, r0
10008922:	e001      	b.n	10008928 <mpu_set_accel_fsr+0x88>
    }

    if (st.chip_cfg.accel_fsr == (data >> 3))
        return 0;
    if (i2c_write(st.hw->addr, st.reg->accel_cfg, 1, &data))
        return -1;
10008924:	2001      	movs	r0, #1
10008926:	4240      	negs	r0, r0
    st.chip_cfg.accel_fsr = data >> 3;
    return 0;
}
10008928:	b002      	add	sp, #8
1000892a:	bd10      	pop	{r4, pc}
1000892c:	10018608 	.word	0x10018608
10008930:	1000ab75 	.word	0x1000ab75

10008934 <mpu_set_lpf>:
 *  The following LPF settings are supported: 188, 98, 42, 20, 10, 5.
 *  @param[in]  lpf Desired LPF setting.
 *  @return     0 if successful.
 */
int mpu_set_lpf(unsigned short lpf)
{
10008934:	b510      	push	{r4, lr}
10008936:	b082      	sub	sp, #8
    unsigned char data;

    if (!(st.chip_cfg.sensors))
10008938:	4b2b      	ldr	r3, [pc, #172]	; (100089e8 <mpu_set_lpf+0xb4>)
1000893a:	7a9b      	ldrb	r3, [r3, #10]
1000893c:	2b00      	cmp	r3, #0
1000893e:	d049      	beq.n	100089d4 <mpu_set_lpf+0xa0>
        return -1;

    if (lpf >= 188)
10008940:	28bb      	cmp	r0, #187	; 0xbb
10008942:	d903      	bls.n	1000894c <mpu_set_lpf+0x18>
        data = INV_FILTER_188HZ;
10008944:	2201      	movs	r2, #1
10008946:	466b      	mov	r3, sp
10008948:	71da      	strb	r2, [r3, #7]
1000894a:	e01a      	b.n	10008982 <mpu_set_lpf+0x4e>
    else if (lpf >= 98)
1000894c:	2861      	cmp	r0, #97	; 0x61
1000894e:	d903      	bls.n	10008958 <mpu_set_lpf+0x24>
        data = INV_FILTER_98HZ;
10008950:	2202      	movs	r2, #2
10008952:	466b      	mov	r3, sp
10008954:	71da      	strb	r2, [r3, #7]
10008956:	e014      	b.n	10008982 <mpu_set_lpf+0x4e>
    else if (lpf >= 42)
10008958:	2829      	cmp	r0, #41	; 0x29
1000895a:	d903      	bls.n	10008964 <mpu_set_lpf+0x30>
        data = INV_FILTER_42HZ;
1000895c:	2203      	movs	r2, #3
1000895e:	466b      	mov	r3, sp
10008960:	71da      	strb	r2, [r3, #7]
10008962:	e00e      	b.n	10008982 <mpu_set_lpf+0x4e>
    else if (lpf >= 20)
10008964:	2813      	cmp	r0, #19
10008966:	d903      	bls.n	10008970 <mpu_set_lpf+0x3c>
        data = INV_FILTER_20HZ;
10008968:	2204      	movs	r2, #4
1000896a:	466b      	mov	r3, sp
1000896c:	71da      	strb	r2, [r3, #7]
1000896e:	e008      	b.n	10008982 <mpu_set_lpf+0x4e>
    else if (lpf >= 10)
10008970:	2809      	cmp	r0, #9
10008972:	d903      	bls.n	1000897c <mpu_set_lpf+0x48>
        data = INV_FILTER_10HZ;
10008974:	2205      	movs	r2, #5
10008976:	466b      	mov	r3, sp
10008978:	71da      	strb	r2, [r3, #7]
1000897a:	e002      	b.n	10008982 <mpu_set_lpf+0x4e>
    else
        data = INV_FILTER_5HZ;
1000897c:	2206      	movs	r2, #6
1000897e:	466b      	mov	r3, sp
10008980:	71da      	strb	r2, [r3, #7]

    if (st.chip_cfg.lpf == data)
10008982:	4b19      	ldr	r3, [pc, #100]	; (100089e8 <mpu_set_lpf+0xb4>)
10008984:	7ada      	ldrb	r2, [r3, #11]
10008986:	466b      	mov	r3, sp
10008988:	3307      	adds	r3, #7
1000898a:	781b      	ldrb	r3, [r3, #0]
        return 0;
1000898c:	2000      	movs	r0, #0
    else if (lpf >= 10)
        data = INV_FILTER_10HZ;
    else
        data = INV_FILTER_5HZ;

    if (st.chip_cfg.lpf == data)
1000898e:	429a      	cmp	r2, r3
10008990:	d028      	beq.n	100089e4 <mpu_set_lpf+0xb0>
        return 0;
    if (i2c_write(st.hw->addr, st.reg->lpf, 1, &data))
10008992:	4b15      	ldr	r3, [pc, #84]	; (100089e8 <mpu_set_lpf+0xb4>)
10008994:	681a      	ldr	r2, [r3, #0]
10008996:	7891      	ldrb	r1, [r2, #2]
10008998:	685b      	ldr	r3, [r3, #4]
1000899a:	7818      	ldrb	r0, [r3, #0]
1000899c:	466b      	mov	r3, sp
1000899e:	3307      	adds	r3, #7
100089a0:	2201      	movs	r2, #1
100089a2:	4c12      	ldr	r4, [pc, #72]	; (100089ec <mpu_set_lpf+0xb8>)
100089a4:	47a0      	blx	r4
100089a6:	2800      	cmp	r0, #0
100089a8:	d117      	bne.n	100089da <mpu_set_lpf+0xa6>
        return -1;
#ifdef MPU6500
    data = BIT_FIFO_SIZE_1024 | data;
100089aa:	466b      	mov	r3, sp
100089ac:	3307      	adds	r3, #7
100089ae:	7819      	ldrb	r1, [r3, #0]
100089b0:	2240      	movs	r2, #64	; 0x40
100089b2:	430a      	orrs	r2, r1
100089b4:	701a      	strb	r2, [r3, #0]

    if (i2c_write(st.hw->addr, st.reg->accel_cfg2, 1, &data))
100089b6:	4a0c      	ldr	r2, [pc, #48]	; (100089e8 <mpu_set_lpf+0xb4>)
100089b8:	6811      	ldr	r1, [r2, #0]
100089ba:	7a09      	ldrb	r1, [r1, #8]
100089bc:	6852      	ldr	r2, [r2, #4]
100089be:	7810      	ldrb	r0, [r2, #0]
100089c0:	2201      	movs	r2, #1
100089c2:	4c0a      	ldr	r4, [pc, #40]	; (100089ec <mpu_set_lpf+0xb8>)
100089c4:	47a0      	blx	r4
100089c6:	2800      	cmp	r0, #0
100089c8:	d10a      	bne.n	100089e0 <mpu_set_lpf+0xac>
            return -1;
#endif
    st.chip_cfg.lpf = data;
100089ca:	466b      	mov	r3, sp
100089cc:	79da      	ldrb	r2, [r3, #7]
100089ce:	4b06      	ldr	r3, [pc, #24]	; (100089e8 <mpu_set_lpf+0xb4>)
100089d0:	72da      	strb	r2, [r3, #11]
    return 0;
100089d2:	e007      	b.n	100089e4 <mpu_set_lpf+0xb0>
int mpu_set_lpf(unsigned short lpf)
{
    unsigned char data;

    if (!(st.chip_cfg.sensors))
        return -1;
100089d4:	2001      	movs	r0, #1
100089d6:	4240      	negs	r0, r0
100089d8:	e004      	b.n	100089e4 <mpu_set_lpf+0xb0>
        data = INV_FILTER_5HZ;

    if (st.chip_cfg.lpf == data)
        return 0;
    if (i2c_write(st.hw->addr, st.reg->lpf, 1, &data))
        return -1;
100089da:	2001      	movs	r0, #1
100089dc:	4240      	negs	r0, r0
100089de:	e001      	b.n	100089e4 <mpu_set_lpf+0xb0>
#ifdef MPU6500
    data = BIT_FIFO_SIZE_1024 | data;

    if (i2c_write(st.hw->addr, st.reg->accel_cfg2, 1, &data))
            return -1;
100089e0:	2001      	movs	r0, #1
100089e2:	4240      	negs	r0, r0
#endif
    st.chip_cfg.lpf = data;
    return 0;
}
100089e4:	b002      	add	sp, #8
100089e6:	bd10      	pop	{r4, pc}
100089e8:	10018608 	.word	0x10018608
100089ec:	1000ab75 	.word	0x1000ab75

100089f0 <mpu_get_sample_rate>:
 *  @param[out] rate    Current sampling rate (Hz).
 *  @return     0 if successful.
 */
int mpu_get_sample_rate(unsigned short *rate)
{
    if (st.chip_cfg.dmp_on)
100089f0:	2324      	movs	r3, #36	; 0x24
100089f2:	4a05      	ldr	r2, [pc, #20]	; (10008a08 <mpu_get_sample_rate+0x18>)
100089f4:	5cd3      	ldrb	r3, [r2, r3]
100089f6:	2b00      	cmp	r3, #0
100089f8:	d103      	bne.n	10008a02 <mpu_get_sample_rate+0x12>
        return -1;
    else
        rate[0] = st.chip_cfg.sample_rate;
100089fa:	89d3      	ldrh	r3, [r2, #14]
100089fc:	8003      	strh	r3, [r0, #0]
    return 0;
100089fe:	2000      	movs	r0, #0
10008a00:	e001      	b.n	10008a06 <mpu_get_sample_rate+0x16>
 *  @return     0 if successful.
 */
int mpu_get_sample_rate(unsigned short *rate)
{
    if (st.chip_cfg.dmp_on)
        return -1;
10008a02:	2001      	movs	r0, #1
10008a04:	4240      	negs	r0, r0
    else
        rate[0] = st.chip_cfg.sample_rate;
    return 0;
}
10008a06:	4770      	bx	lr
10008a08:	10018608 	.word	0x10018608

10008a0c <mpu_set_compass_sample_rate>:
 *  mpu_get_compass_sample_rate to check the actual setting.
 *  @param[in]  rate    Desired compass sampling rate (Hz).
 *  @return     0 if successful.
 */
int mpu_set_compass_sample_rate(unsigned short rate)
{
10008a0c:	b530      	push	{r4, r5, lr}
10008a0e:	b083      	sub	sp, #12
10008a10:	1e01      	subs	r1, r0, #0
#ifdef AK89xx_SECONDARY
    unsigned char div;
    if (!rate || rate > st.chip_cfg.sample_rate || rate > MAX_COMPASS_SAMPLE_RATE)
10008a12:	d020      	beq.n	10008a56 <mpu_set_compass_sample_rate+0x4a>
10008a14:	4b17      	ldr	r3, [pc, #92]	; (10008a74 <mpu_set_compass_sample_rate+0x68>)
10008a16:	89d8      	ldrh	r0, [r3, #14]
10008a18:	4281      	cmp	r1, r0
10008a1a:	d81f      	bhi.n	10008a5c <mpu_set_compass_sample_rate+0x50>
10008a1c:	2964      	cmp	r1, #100	; 0x64
10008a1e:	d820      	bhi.n	10008a62 <mpu_set_compass_sample_rate+0x56>
        return -1;

    div = st.chip_cfg.sample_rate / rate - 1;
10008a20:	466b      	mov	r3, sp
10008a22:	1ddc      	adds	r4, r3, #7
10008a24:	4b14      	ldr	r3, [pc, #80]	; (10008a78 <mpu_set_compass_sample_rate+0x6c>)
10008a26:	4798      	blx	r3
10008a28:	3801      	subs	r0, #1
10008a2a:	7020      	strb	r0, [r4, #0]
    if (i2c_write(st.hw->addr, st.reg->s4_ctrl, 1, &div))
10008a2c:	4b11      	ldr	r3, [pc, #68]	; (10008a74 <mpu_set_compass_sample_rate+0x68>)
10008a2e:	2224      	movs	r2, #36	; 0x24
10008a30:	6819      	ldr	r1, [r3, #0]
10008a32:	5c89      	ldrb	r1, [r1, r2]
10008a34:	685b      	ldr	r3, [r3, #4]
10008a36:	7818      	ldrb	r0, [r3, #0]
10008a38:	0023      	movs	r3, r4
10008a3a:	3a23      	subs	r2, #35	; 0x23
10008a3c:	4c0f      	ldr	r4, [pc, #60]	; (10008a7c <mpu_set_compass_sample_rate+0x70>)
10008a3e:	47a0      	blx	r4
10008a40:	1e04      	subs	r4, r0, #0
10008a42:	d111      	bne.n	10008a68 <mpu_set_compass_sample_rate+0x5c>
        return -1;
    st.chip_cfg.compass_sample_rate = st.chip_cfg.sample_rate / (div + 1);
10008a44:	4d0b      	ldr	r5, [pc, #44]	; (10008a74 <mpu_set_compass_sample_rate+0x68>)
10008a46:	89e8      	ldrh	r0, [r5, #14]
10008a48:	466b      	mov	r3, sp
10008a4a:	79d9      	ldrb	r1, [r3, #7]
10008a4c:	3101      	adds	r1, #1
10008a4e:	4b0c      	ldr	r3, [pc, #48]	; (10008a80 <mpu_set_compass_sample_rate+0x74>)
10008a50:	4798      	blx	r3
10008a52:	8528      	strh	r0, [r5, #40]	; 0x28
    return 0;
10008a54:	e00a      	b.n	10008a6c <mpu_set_compass_sample_rate+0x60>
int mpu_set_compass_sample_rate(unsigned short rate)
{
#ifdef AK89xx_SECONDARY
    unsigned char div;
    if (!rate || rate > st.chip_cfg.sample_rate || rate > MAX_COMPASS_SAMPLE_RATE)
        return -1;
10008a56:	2401      	movs	r4, #1
10008a58:	4264      	negs	r4, r4
10008a5a:	e007      	b.n	10008a6c <mpu_set_compass_sample_rate+0x60>
10008a5c:	2401      	movs	r4, #1
10008a5e:	4264      	negs	r4, r4
10008a60:	e004      	b.n	10008a6c <mpu_set_compass_sample_rate+0x60>
10008a62:	2401      	movs	r4, #1
10008a64:	4264      	negs	r4, r4
10008a66:	e001      	b.n	10008a6c <mpu_set_compass_sample_rate+0x60>

    div = st.chip_cfg.sample_rate / rate - 1;
    if (i2c_write(st.hw->addr, st.reg->s4_ctrl, 1, &div))
        return -1;
10008a68:	2401      	movs	r4, #1
10008a6a:	4264      	negs	r4, r4
    st.chip_cfg.compass_sample_rate = st.chip_cfg.sample_rate / (div + 1);
    return 0;
#else
    return -1;
#endif
}
10008a6c:	0020      	movs	r0, r4
10008a6e:	b003      	add	sp, #12
10008a70:	bd30      	pop	{r4, r5, pc}
10008a72:	46c0      	nop			; (mov r8, r8)
10008a74:	10018608 	.word	0x10018608
10008a78:	10013129 	.word	0x10013129
10008a7c:	1000ab75 	.word	0x1000ab75
10008a80:	1001323d 	.word	0x1001323d

10008a84 <mpu_configure_fifo>:
 *  \n INV_XYZ_ACCEL
 *  @param[in]  sensors Mask of sensors to push to FIFO.
 *  @return     0 if successful.
 */
int mpu_configure_fifo(unsigned char sensors)
{
10008a84:	b570      	push	{r4, r5, r6, lr}
    int result = 0;

    /* Compass data isn't going into the FIFO. Stop trying. */
    sensors &= ~INV_XYZ_COMPASS;

    if (st.chip_cfg.dmp_on)
10008a86:	2324      	movs	r3, #36	; 0x24
10008a88:	4a16      	ldr	r2, [pc, #88]	; (10008ae4 <mpu_configure_fifo+0x60>)
10008a8a:	5cd3      	ldrb	r3, [r2, r3]
        return 0;
10008a8c:	2400      	movs	r4, #0
    int result = 0;

    /* Compass data isn't going into the FIFO. Stop trying. */
    sensors &= ~INV_XYZ_COMPASS;

    if (st.chip_cfg.dmp_on)
10008a8e:	2b00      	cmp	r3, #0
10008a90:	d126      	bne.n	10008ae0 <mpu_configure_fifo+0x5c>
        return 0;
    else {
        if (!(st.chip_cfg.sensors))
10008a92:	7a94      	ldrb	r4, [r2, #10]
10008a94:	2c00      	cmp	r4, #0
10008a96:	d015      	beq.n	10008ac4 <mpu_configure_fifo+0x40>
{
    unsigned char prev;
    int result = 0;

    /* Compass data isn't going into the FIFO. Stop trying. */
    sensors &= ~INV_XYZ_COMPASS;
10008a98:	2301      	movs	r3, #1
10008a9a:	4398      	bics	r0, r3
    if (st.chip_cfg.dmp_on)
        return 0;
    else {
        if (!(st.chip_cfg.sensors))
            return -1;
        prev = st.chip_cfg.fifo_enable;
10008a9c:	7c15      	ldrb	r5, [r2, #16]
        st.chip_cfg.fifo_enable = sensors & st.chip_cfg.sensors;
10008a9e:	4004      	ands	r4, r0
10008aa0:	7414      	strb	r4, [r2, #16]
        if (st.chip_cfg.fifo_enable != sensors)
10008aa2:	1b04      	subs	r4, r0, r4
10008aa4:	1e63      	subs	r3, r4, #1
10008aa6:	419c      	sbcs	r4, r3
10008aa8:	4264      	negs	r4, r4
             * asleep.
             */
            result = -1;
        else
            result = 0;
        if (sensors || st.chip_cfg.lp_accel_mode)
10008aaa:	2800      	cmp	r0, #0
10008aac:	d10d      	bne.n	10008aca <mpu_configure_fifo+0x46>
10008aae:	7d13      	ldrb	r3, [r2, #20]
10008ab0:	2b00      	cmp	r3, #0
10008ab2:	d112      	bne.n	10008ada <mpu_configure_fifo+0x56>
            set_int_enable(1);
        else
            set_int_enable(0);
10008ab4:	4b0c      	ldr	r3, [pc, #48]	; (10008ae8 <mpu_configure_fifo+0x64>)
10008ab6:	4798      	blx	r3
10008ab8:	e012      	b.n	10008ae0 <mpu_configure_fifo+0x5c>
        if (sensors) {
            if (mpu_reset_fifo()) {
                st.chip_cfg.fifo_enable = prev;
10008aba:	4b0a      	ldr	r3, [pc, #40]	; (10008ae4 <mpu_configure_fifo+0x60>)
10008abc:	741d      	strb	r5, [r3, #16]
                return -1;
10008abe:	2401      	movs	r4, #1
10008ac0:	4264      	negs	r4, r4
10008ac2:	e00d      	b.n	10008ae0 <mpu_configure_fifo+0x5c>

    if (st.chip_cfg.dmp_on)
        return 0;
    else {
        if (!(st.chip_cfg.sensors))
            return -1;
10008ac4:	2401      	movs	r4, #1
10008ac6:	4264      	negs	r4, r4
10008ac8:	e00a      	b.n	10008ae0 <mpu_configure_fifo+0x5c>
             */
            result = -1;
        else
            result = 0;
        if (sensors || st.chip_cfg.lp_accel_mode)
            set_int_enable(1);
10008aca:	2001      	movs	r0, #1
10008acc:	4b06      	ldr	r3, [pc, #24]	; (10008ae8 <mpu_configure_fifo+0x64>)
10008ace:	4798      	blx	r3
        else
            set_int_enable(0);
        if (sensors) {
            if (mpu_reset_fifo()) {
10008ad0:	4b06      	ldr	r3, [pc, #24]	; (10008aec <mpu_configure_fifo+0x68>)
10008ad2:	4798      	blx	r3
10008ad4:	2800      	cmp	r0, #0
10008ad6:	d003      	beq.n	10008ae0 <mpu_configure_fifo+0x5c>
10008ad8:	e7ef      	b.n	10008aba <mpu_configure_fifo+0x36>
             */
            result = -1;
        else
            result = 0;
        if (sensors || st.chip_cfg.lp_accel_mode)
            set_int_enable(1);
10008ada:	2001      	movs	r0, #1
10008adc:	4b02      	ldr	r3, [pc, #8]	; (10008ae8 <mpu_configure_fifo+0x64>)
10008ade:	4798      	blx	r3
            }
        }
    }

    return result;
}
10008ae0:	0020      	movs	r0, r4
10008ae2:	bd70      	pop	{r4, r5, r6, pc}
10008ae4:	10018608 	.word	0x10018608
10008ae8:	10008461 	.word	0x10008461
10008aec:	100085bd 	.word	0x100085bd

10008af0 <mpu_read_fifo>:
 *  @param[out] more        Number of remaining packets.
 *  @return     0 if successful.
 */
int mpu_read_fifo(short *gyro, short *accel, unsigned long *timestamp,
        unsigned char *sensors, unsigned char *more)
{
10008af0:	b5f0      	push	{r4, r5, r6, r7, lr}
10008af2:	464f      	mov	r7, r9
10008af4:	b480      	push	{r7}
10008af6:	b088      	sub	sp, #32
10008af8:	9001      	str	r0, [sp, #4]
10008afa:	9103      	str	r1, [sp, #12]
10008afc:	9202      	str	r2, [sp, #8]
10008afe:	001e      	movs	r6, r3
    /* Assumes maximum packet size is gyro (6) + accel (6). */
    unsigned char data[MAX_PACKET_LENGTH];
    unsigned char packet_size = 0;
    unsigned short fifo_count, index = 0;

    if (st.chip_cfg.dmp_on)
10008b00:	2324      	movs	r3, #36	; 0x24
10008b02:	4a69      	ldr	r2, [pc, #420]	; (10008ca8 <mpu_read_fifo+0x1b8>)
10008b04:	5cd3      	ldrb	r3, [r2, r3]
10008b06:	2b00      	cmp	r3, #0
10008b08:	d000      	beq.n	10008b0c <mpu_read_fifo+0x1c>
10008b0a:	e0b6      	b.n	10008c7a <mpu_read_fifo+0x18a>
        return -1;

    sensors[0] = 0;
10008b0c:	7033      	strb	r3, [r6, #0]
    if (!st.chip_cfg.sensors)
10008b0e:	7a93      	ldrb	r3, [r2, #10]
10008b10:	2b00      	cmp	r3, #0
10008b12:	d100      	bne.n	10008b16 <mpu_read_fifo+0x26>
10008b14:	e0b4      	b.n	10008c80 <mpu_read_fifo+0x190>
        return -1;
    if (!st.chip_cfg.fifo_enable)
10008b16:	7c13      	ldrb	r3, [r2, #16]
10008b18:	2b00      	cmp	r3, #0
10008b1a:	d100      	bne.n	10008b1e <mpu_read_fifo+0x2e>
10008b1c:	e0b3      	b.n	10008c86 <mpu_read_fifo+0x196>
        return -1;

    if (st.chip_cfg.fifo_enable & INV_X_GYRO)
10008b1e:	065a      	lsls	r2, r3, #25
        packet_size += 2;
10008b20:	0fd2      	lsrs	r2, r2, #31
10008b22:	0055      	lsls	r5, r2, #1
    if (st.chip_cfg.fifo_enable & INV_Y_GYRO)
10008b24:	069a      	lsls	r2, r3, #26
10008b26:	d501      	bpl.n	10008b2c <mpu_read_fifo+0x3c>
        packet_size += 2;
10008b28:	1caa      	adds	r2, r5, #2
10008b2a:	b2d5      	uxtb	r5, r2
    if (st.chip_cfg.fifo_enable & INV_Z_GYRO)
10008b2c:	06da      	lsls	r2, r3, #27
10008b2e:	d501      	bpl.n	10008b34 <mpu_read_fifo+0x44>
        packet_size += 2;
10008b30:	1caa      	adds	r2, r5, #2
10008b32:	b2d5      	uxtb	r5, r2
    if (st.chip_cfg.fifo_enable & INV_XYZ_ACCEL)
10008b34:	071b      	lsls	r3, r3, #28
10008b36:	d501      	bpl.n	10008b3c <mpu_read_fifo+0x4c>
        packet_size += 6;
10008b38:	1dab      	adds	r3, r5, #6
10008b3a:	b2dd      	uxtb	r5, r3

    if (i2c_read(st.hw->addr, st.reg->fifo_count_h, 2, data))
10008b3c:	4b5a      	ldr	r3, [pc, #360]	; (10008ca8 <mpu_read_fifo+0x1b8>)
10008b3e:	681a      	ldr	r2, [r3, #0]
10008b40:	7b11      	ldrb	r1, [r2, #12]
10008b42:	685b      	ldr	r3, [r3, #4]
10008b44:	7818      	ldrb	r0, [r3, #0]
10008b46:	ab05      	add	r3, sp, #20
10008b48:	2202      	movs	r2, #2
10008b4a:	4c58      	ldr	r4, [pc, #352]	; (10008cac <mpu_read_fifo+0x1bc>)
10008b4c:	47a0      	blx	r4
10008b4e:	1e04      	subs	r4, r0, #0
10008b50:	d000      	beq.n	10008b54 <mpu_read_fifo+0x64>
10008b52:	e09b      	b.n	10008c8c <mpu_read_fifo+0x19c>
        return -1;
    fifo_count = (data[0] << 8) | data[1];
10008b54:	aa05      	add	r2, sp, #20
10008b56:	7813      	ldrb	r3, [r2, #0]
10008b58:	021b      	lsls	r3, r3, #8
10008b5a:	7852      	ldrb	r2, [r2, #1]
10008b5c:	431a      	orrs	r2, r3
10008b5e:	4691      	mov	r9, r2
    if (fifo_count < packet_size)
10008b60:	b2af      	uxth	r7, r5
10008b62:	42ba      	cmp	r2, r7
10008b64:	d200      	bcs.n	10008b68 <mpu_read_fifo+0x78>
10008b66:	e099      	b.n	10008c9c <mpu_read_fifo+0x1ac>
        return 0;
//    log_i("FIFO count: %hd\n", fifo_count);
    if (fifo_count > (st.hw->max_fifo >> 1)) {
10008b68:	4b4f      	ldr	r3, [pc, #316]	; (10008ca8 <mpu_read_fifo+0x1b8>)
10008b6a:	685a      	ldr	r2, [r3, #4]
10008b6c:	8853      	ldrh	r3, [r2, #2]
10008b6e:	085b      	lsrs	r3, r3, #1
10008b70:	4599      	cmp	r9, r3
10008b72:	d913      	bls.n	10008b9c <mpu_read_fifo+0xac>
        /* FIFO is 50% full, better check overflow bit. */
        if (i2c_read(st.hw->addr, st.reg->int_status, 1, data))
10008b74:	4b4c      	ldr	r3, [pc, #304]	; (10008ca8 <mpu_read_fifo+0x1b8>)
10008b76:	681b      	ldr	r3, [r3, #0]
10008b78:	7cd9      	ldrb	r1, [r3, #19]
10008b7a:	7810      	ldrb	r0, [r2, #0]
10008b7c:	ab05      	add	r3, sp, #20
10008b7e:	2201      	movs	r2, #1
10008b80:	4c4a      	ldr	r4, [pc, #296]	; (10008cac <mpu_read_fifo+0x1bc>)
10008b82:	47a0      	blx	r4
10008b84:	2800      	cmp	r0, #0
10008b86:	d000      	beq.n	10008b8a <mpu_read_fifo+0x9a>
10008b88:	e083      	b.n	10008c92 <mpu_read_fifo+0x1a2>
            return -1;
        if (data[0] & BIT_FIFO_OVERFLOW) {
10008b8a:	ab05      	add	r3, sp, #20
10008b8c:	781b      	ldrb	r3, [r3, #0]
10008b8e:	06db      	lsls	r3, r3, #27
10008b90:	d504      	bpl.n	10008b9c <mpu_read_fifo+0xac>
            mpu_reset_fifo();
10008b92:	4b47      	ldr	r3, [pc, #284]	; (10008cb0 <mpu_read_fifo+0x1c0>)
10008b94:	4798      	blx	r3
            return -2;
10008b96:	2402      	movs	r4, #2
10008b98:	4264      	negs	r4, r4
10008b9a:	e07f      	b.n	10008c9c <mpu_read_fifo+0x1ac>
        }
    }
    get_ms((unsigned long*)timestamp);
10008b9c:	9802      	ldr	r0, [sp, #8]
10008b9e:	4b45      	ldr	r3, [pc, #276]	; (10008cb4 <mpu_read_fifo+0x1c4>)
10008ba0:	4798      	blx	r3

    if (i2c_read(st.hw->addr, st.reg->fifo_r_w, packet_size, data))
10008ba2:	4b41      	ldr	r3, [pc, #260]	; (10008ca8 <mpu_read_fifo+0x1b8>)
10008ba4:	681a      	ldr	r2, [r3, #0]
10008ba6:	7b51      	ldrb	r1, [r2, #13]
10008ba8:	685b      	ldr	r3, [r3, #4]
10008baa:	7818      	ldrb	r0, [r3, #0]
10008bac:	ab05      	add	r3, sp, #20
10008bae:	002a      	movs	r2, r5
10008bb0:	4c3e      	ldr	r4, [pc, #248]	; (10008cac <mpu_read_fifo+0x1bc>)
10008bb2:	47a0      	blx	r4
10008bb4:	1e04      	subs	r4, r0, #0
10008bb6:	d16f      	bne.n	10008c98 <mpu_read_fifo+0x1a8>
        return -1;
    more[0] = fifo_count / packet_size - 1;
10008bb8:	0029      	movs	r1, r5
10008bba:	4648      	mov	r0, r9
10008bbc:	4b3e      	ldr	r3, [pc, #248]	; (10008cb8 <mpu_read_fifo+0x1c8>)
10008bbe:	4798      	blx	r3
10008bc0:	3801      	subs	r0, #1
10008bc2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
10008bc4:	7018      	strb	r0, [r3, #0]
    sensors[0] = 0;
10008bc6:	2300      	movs	r3, #0
10008bc8:	7033      	strb	r3, [r6, #0]

    if ((index != packet_size) && st.chip_cfg.fifo_enable & INV_XYZ_ACCEL) {
10008bca:	2d00      	cmp	r5, #0
10008bcc:	d01a      	beq.n	10008c04 <mpu_read_fifo+0x114>
10008bce:	4b36      	ldr	r3, [pc, #216]	; (10008ca8 <mpu_read_fifo+0x1b8>)
10008bd0:	7c1a      	ldrb	r2, [r3, #16]
        unsigned char *sensors, unsigned char *more)
{
    /* Assumes maximum packet size is gyro (6) + accel (6). */
    unsigned char data[MAX_PACKET_LENGTH];
    unsigned char packet_size = 0;
    unsigned short fifo_count, index = 0;
10008bd2:	2300      	movs	r3, #0
    if (i2c_read(st.hw->addr, st.reg->fifo_r_w, packet_size, data))
        return -1;
    more[0] = fifo_count / packet_size - 1;
    sensors[0] = 0;

    if ((index != packet_size) && st.chip_cfg.fifo_enable & INV_XYZ_ACCEL) {
10008bd4:	0712      	lsls	r2, r2, #28
10008bd6:	d515      	bpl.n	10008c04 <mpu_read_fifo+0x114>
        accel[0] = (data[index+0] << 8) | data[index+1];
10008bd8:	ab05      	add	r3, sp, #20
10008bda:	781a      	ldrb	r2, [r3, #0]
10008bdc:	0212      	lsls	r2, r2, #8
10008bde:	7859      	ldrb	r1, [r3, #1]
10008be0:	430a      	orrs	r2, r1
10008be2:	9803      	ldr	r0, [sp, #12]
10008be4:	8002      	strh	r2, [r0, #0]
        accel[1] = (data[index+2] << 8) | data[index+3];
10008be6:	789a      	ldrb	r2, [r3, #2]
10008be8:	0212      	lsls	r2, r2, #8
10008bea:	78d9      	ldrb	r1, [r3, #3]
10008bec:	430a      	orrs	r2, r1
10008bee:	8042      	strh	r2, [r0, #2]
        accel[2] = (data[index+4] << 8) | data[index+5];
10008bf0:	791a      	ldrb	r2, [r3, #4]
10008bf2:	0212      	lsls	r2, r2, #8
10008bf4:	795b      	ldrb	r3, [r3, #5]
10008bf6:	4313      	orrs	r3, r2
10008bf8:	8083      	strh	r3, [r0, #4]
        sensors[0] |= INV_XYZ_ACCEL;
10008bfa:	7832      	ldrb	r2, [r6, #0]
10008bfc:	2308      	movs	r3, #8
10008bfe:	4313      	orrs	r3, r2
10008c00:	7033      	strb	r3, [r6, #0]
        index += 6;
10008c02:	2306      	movs	r3, #6
    }
    if ((index != packet_size) && st.chip_cfg.fifo_enable & INV_X_GYRO) {
10008c04:	42bb      	cmp	r3, r7
10008c06:	d049      	beq.n	10008c9c <mpu_read_fifo+0x1ac>
10008c08:	4a27      	ldr	r2, [pc, #156]	; (10008ca8 <mpu_read_fifo+0x1b8>)
10008c0a:	7c12      	ldrb	r2, [r2, #16]
10008c0c:	0652      	lsls	r2, r2, #25
10008c0e:	d50f      	bpl.n	10008c30 <mpu_read_fifo+0x140>
        gyro[0] = (data[index+0] << 8) | data[index+1];
10008c10:	a905      	add	r1, sp, #20
10008c12:	5cca      	ldrb	r2, [r1, r3]
10008c14:	0212      	lsls	r2, r2, #8
10008c16:	18c9      	adds	r1, r1, r3
10008c18:	7849      	ldrb	r1, [r1, #1]
10008c1a:	430a      	orrs	r2, r1
10008c1c:	9901      	ldr	r1, [sp, #4]
10008c1e:	800a      	strh	r2, [r1, #0]
        sensors[0] |= INV_X_GYRO;
10008c20:	7831      	ldrb	r1, [r6, #0]
10008c22:	2240      	movs	r2, #64	; 0x40
10008c24:	430a      	orrs	r2, r1
10008c26:	7032      	strb	r2, [r6, #0]
        index += 2;
10008c28:	3302      	adds	r3, #2
10008c2a:	b29b      	uxth	r3, r3
    }
    if ((index != packet_size) && st.chip_cfg.fifo_enable & INV_Y_GYRO) {
10008c2c:	429f      	cmp	r7, r3
10008c2e:	d035      	beq.n	10008c9c <mpu_read_fifo+0x1ac>
10008c30:	4a1d      	ldr	r2, [pc, #116]	; (10008ca8 <mpu_read_fifo+0x1b8>)
10008c32:	7c12      	ldrb	r2, [r2, #16]
10008c34:	0692      	lsls	r2, r2, #26
10008c36:	d50f      	bpl.n	10008c58 <mpu_read_fifo+0x168>
        gyro[1] = (data[index+0] << 8) | data[index+1];
10008c38:	a905      	add	r1, sp, #20
10008c3a:	5cca      	ldrb	r2, [r1, r3]
10008c3c:	0212      	lsls	r2, r2, #8
10008c3e:	18c9      	adds	r1, r1, r3
10008c40:	7849      	ldrb	r1, [r1, #1]
10008c42:	430a      	orrs	r2, r1
10008c44:	9901      	ldr	r1, [sp, #4]
10008c46:	804a      	strh	r2, [r1, #2]
        sensors[0] |= INV_Y_GYRO;
10008c48:	7831      	ldrb	r1, [r6, #0]
10008c4a:	2220      	movs	r2, #32
10008c4c:	430a      	orrs	r2, r1
10008c4e:	7032      	strb	r2, [r6, #0]
        index += 2;
10008c50:	3302      	adds	r3, #2
10008c52:	b29b      	uxth	r3, r3
    }
    if ((index != packet_size) && st.chip_cfg.fifo_enable & INV_Z_GYRO) {
10008c54:	429f      	cmp	r7, r3
10008c56:	d021      	beq.n	10008c9c <mpu_read_fifo+0x1ac>
10008c58:	4a13      	ldr	r2, [pc, #76]	; (10008ca8 <mpu_read_fifo+0x1b8>)
10008c5a:	7c12      	ldrb	r2, [r2, #16]
10008c5c:	06d2      	lsls	r2, r2, #27
10008c5e:	d51d      	bpl.n	10008c9c <mpu_read_fifo+0x1ac>
        gyro[2] = (data[index+0] << 8) | data[index+1];
10008c60:	a905      	add	r1, sp, #20
10008c62:	5cca      	ldrb	r2, [r1, r3]
10008c64:	0212      	lsls	r2, r2, #8
10008c66:	18cb      	adds	r3, r1, r3
10008c68:	785b      	ldrb	r3, [r3, #1]
10008c6a:	4313      	orrs	r3, r2
10008c6c:	9a01      	ldr	r2, [sp, #4]
10008c6e:	8093      	strh	r3, [r2, #4]
        sensors[0] |= INV_Z_GYRO;
10008c70:	7832      	ldrb	r2, [r6, #0]
10008c72:	2310      	movs	r3, #16
10008c74:	4313      	orrs	r3, r2
10008c76:	7033      	strb	r3, [r6, #0]
10008c78:	e010      	b.n	10008c9c <mpu_read_fifo+0x1ac>
    unsigned char data[MAX_PACKET_LENGTH];
    unsigned char packet_size = 0;
    unsigned short fifo_count, index = 0;

    if (st.chip_cfg.dmp_on)
        return -1;
10008c7a:	2401      	movs	r4, #1
10008c7c:	4264      	negs	r4, r4
10008c7e:	e00d      	b.n	10008c9c <mpu_read_fifo+0x1ac>

    sensors[0] = 0;
    if (!st.chip_cfg.sensors)
        return -1;
10008c80:	2401      	movs	r4, #1
10008c82:	4264      	negs	r4, r4
10008c84:	e00a      	b.n	10008c9c <mpu_read_fifo+0x1ac>
    if (!st.chip_cfg.fifo_enable)
        return -1;
10008c86:	2401      	movs	r4, #1
10008c88:	4264      	negs	r4, r4
10008c8a:	e007      	b.n	10008c9c <mpu_read_fifo+0x1ac>
        packet_size += 2;
    if (st.chip_cfg.fifo_enable & INV_XYZ_ACCEL)
        packet_size += 6;

    if (i2c_read(st.hw->addr, st.reg->fifo_count_h, 2, data))
        return -1;
10008c8c:	2401      	movs	r4, #1
10008c8e:	4264      	negs	r4, r4
10008c90:	e004      	b.n	10008c9c <mpu_read_fifo+0x1ac>
        return 0;
//    log_i("FIFO count: %hd\n", fifo_count);
    if (fifo_count > (st.hw->max_fifo >> 1)) {
        /* FIFO is 50% full, better check overflow bit. */
        if (i2c_read(st.hw->addr, st.reg->int_status, 1, data))
            return -1;
10008c92:	2401      	movs	r4, #1
10008c94:	4264      	negs	r4, r4
10008c96:	e001      	b.n	10008c9c <mpu_read_fifo+0x1ac>
        }
    }
    get_ms((unsigned long*)timestamp);

    if (i2c_read(st.hw->addr, st.reg->fifo_r_w, packet_size, data))
        return -1;
10008c98:	2401      	movs	r4, #1
10008c9a:	4264      	negs	r4, r4
        sensors[0] |= INV_Z_GYRO;
        index += 2;
    }

    return 0;
}
10008c9c:	0020      	movs	r0, r4
10008c9e:	b008      	add	sp, #32
10008ca0:	bc04      	pop	{r2}
10008ca2:	4691      	mov	r9, r2
10008ca4:	bdf0      	pop	{r4, r5, r6, r7, pc}
10008ca6:	46c0      	nop			; (mov r8, r8)
10008ca8:	10018608 	.word	0x10018608
10008cac:	1000abd1 	.word	0x1000abd1
10008cb0:	100085bd 	.word	0x100085bd
10008cb4:	1000b549 	.word	0x1000b549
10008cb8:	1001323d 	.word	0x1001323d

10008cbc <mpu_set_bypass>:
 *  @brief      Set device to bypass mode.
 *  @param[in]  bypass_on   1 to enable bypass mode.
 *  @return     0 if successful.
 */
int mpu_set_bypass(unsigned char bypass_on)
{
10008cbc:	b530      	push	{r4, r5, lr}
10008cbe:	b083      	sub	sp, #12
10008cc0:	0004      	movs	r4, r0
    unsigned char tmp;

    if (st.chip_cfg.bypass_mode == bypass_on)
10008cc2:	4b59      	ldr	r3, [pc, #356]	; (10008e28 <mpu_set_bypass+0x16c>)
10008cc4:	7c9b      	ldrb	r3, [r3, #18]
10008cc6:	4283      	cmp	r3, r0
10008cc8:	d100      	bne.n	10008ccc <mpu_set_bypass+0x10>
10008cca:	e097      	b.n	10008dfc <mpu_set_bypass+0x140>
        return 0;

    if (bypass_on) {
10008ccc:	2800      	cmp	r0, #0
10008cce:	d042      	beq.n	10008d56 <mpu_set_bypass+0x9a>
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
10008cd0:	4b55      	ldr	r3, [pc, #340]	; (10008e28 <mpu_set_bypass+0x16c>)
10008cd2:	681a      	ldr	r2, [r3, #0]
10008cd4:	7911      	ldrb	r1, [r2, #4]
10008cd6:	685b      	ldr	r3, [r3, #4]
10008cd8:	7818      	ldrb	r0, [r3, #0]
10008cda:	466b      	mov	r3, sp
10008cdc:	3307      	adds	r3, #7
10008cde:	2201      	movs	r2, #1
10008ce0:	4d52      	ldr	r5, [pc, #328]	; (10008e2c <mpu_set_bypass+0x170>)
10008ce2:	47a8      	blx	r5
10008ce4:	2800      	cmp	r0, #0
10008ce6:	d000      	beq.n	10008cea <mpu_set_bypass+0x2e>
10008ce8:	e08a      	b.n	10008e00 <mpu_set_bypass+0x144>
            return -1;
        tmp &= ~BIT_AUX_IF_EN;
10008cea:	466b      	mov	r3, sp
10008cec:	3307      	adds	r3, #7
10008cee:	781a      	ldrb	r2, [r3, #0]
10008cf0:	2120      	movs	r1, #32
10008cf2:	438a      	bics	r2, r1
10008cf4:	701a      	strb	r2, [r3, #0]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
10008cf6:	4a4c      	ldr	r2, [pc, #304]	; (10008e28 <mpu_set_bypass+0x16c>)
10008cf8:	6811      	ldr	r1, [r2, #0]
10008cfa:	7909      	ldrb	r1, [r1, #4]
10008cfc:	6852      	ldr	r2, [r2, #4]
10008cfe:	7810      	ldrb	r0, [r2, #0]
10008d00:	2201      	movs	r2, #1
10008d02:	4d4b      	ldr	r5, [pc, #300]	; (10008e30 <mpu_set_bypass+0x174>)
10008d04:	47a8      	blx	r5
10008d06:	2800      	cmp	r0, #0
10008d08:	d17d      	bne.n	10008e06 <mpu_set_bypass+0x14a>
            return -1;
        delay_ms(3);
10008d0a:	3003      	adds	r0, #3
10008d0c:	4b49      	ldr	r3, [pc, #292]	; (10008e34 <mpu_set_bypass+0x178>)
10008d0e:	4798      	blx	r3
        tmp = BIT_BYPASS_EN;
10008d10:	2202      	movs	r2, #2
10008d12:	466b      	mov	r3, sp
10008d14:	71da      	strb	r2, [r3, #7]
        if (st.chip_cfg.active_low_int)
10008d16:	2322      	movs	r3, #34	; 0x22
10008d18:	4a43      	ldr	r2, [pc, #268]	; (10008e28 <mpu_set_bypass+0x16c>)
10008d1a:	5cd3      	ldrb	r3, [r2, r3]
10008d1c:	2b00      	cmp	r3, #0
10008d1e:	d002      	beq.n	10008d26 <mpu_set_bypass+0x6a>
            tmp |= BIT_ACTL;
10008d20:	2282      	movs	r2, #130	; 0x82
10008d22:	466b      	mov	r3, sp
10008d24:	71da      	strb	r2, [r3, #7]
        if (st.chip_cfg.latched_int)
10008d26:	2323      	movs	r3, #35	; 0x23
10008d28:	4a3f      	ldr	r2, [pc, #252]	; (10008e28 <mpu_set_bypass+0x16c>)
10008d2a:	5cd3      	ldrb	r3, [r2, r3]
10008d2c:	2b00      	cmp	r3, #0
10008d2e:	d005      	beq.n	10008d3c <mpu_set_bypass+0x80>
            tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
10008d30:	466b      	mov	r3, sp
10008d32:	1dda      	adds	r2, r3, #7
10008d34:	79d9      	ldrb	r1, [r3, #7]
10008d36:	2330      	movs	r3, #48	; 0x30
10008d38:	430b      	orrs	r3, r1
10008d3a:	7013      	strb	r3, [r2, #0]
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
10008d3c:	4b3a      	ldr	r3, [pc, #232]	; (10008e28 <mpu_set_bypass+0x16c>)
10008d3e:	681a      	ldr	r2, [r3, #0]
10008d40:	7dd1      	ldrb	r1, [r2, #23]
10008d42:	685b      	ldr	r3, [r3, #4]
10008d44:	7818      	ldrb	r0, [r3, #0]
10008d46:	466b      	mov	r3, sp
10008d48:	3307      	adds	r3, #7
10008d4a:	2201      	movs	r2, #1
10008d4c:	4d38      	ldr	r5, [pc, #224]	; (10008e30 <mpu_set_bypass+0x174>)
10008d4e:	47a8      	blx	r5
10008d50:	2800      	cmp	r0, #0
10008d52:	d04f      	beq.n	10008df4 <mpu_set_bypass+0x138>
10008d54:	e05a      	b.n	10008e0c <mpu_set_bypass+0x150>
            return -1;
    } else {
        /* Enable I2C master mode if compass is being used. */
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
10008d56:	4b34      	ldr	r3, [pc, #208]	; (10008e28 <mpu_set_bypass+0x16c>)
10008d58:	681a      	ldr	r2, [r3, #0]
10008d5a:	7911      	ldrb	r1, [r2, #4]
10008d5c:	685b      	ldr	r3, [r3, #4]
10008d5e:	7818      	ldrb	r0, [r3, #0]
10008d60:	466b      	mov	r3, sp
10008d62:	3307      	adds	r3, #7
10008d64:	2201      	movs	r2, #1
10008d66:	4d31      	ldr	r5, [pc, #196]	; (10008e2c <mpu_set_bypass+0x170>)
10008d68:	47a8      	blx	r5
10008d6a:	2800      	cmp	r0, #0
10008d6c:	d151      	bne.n	10008e12 <mpu_set_bypass+0x156>
            return -1;
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
10008d6e:	4b2e      	ldr	r3, [pc, #184]	; (10008e28 <mpu_set_bypass+0x16c>)
10008d70:	7a9b      	ldrb	r3, [r3, #10]
10008d72:	07db      	lsls	r3, r3, #31
10008d74:	d506      	bpl.n	10008d84 <mpu_set_bypass+0xc8>
            tmp |= BIT_AUX_IF_EN;
10008d76:	466b      	mov	r3, sp
10008d78:	1dda      	adds	r2, r3, #7
10008d7a:	79d9      	ldrb	r1, [r3, #7]
10008d7c:	2320      	movs	r3, #32
10008d7e:	430b      	orrs	r3, r1
10008d80:	7013      	strb	r3, [r2, #0]
10008d82:	e005      	b.n	10008d90 <mpu_set_bypass+0xd4>
        else
            tmp &= ~BIT_AUX_IF_EN;
10008d84:	466b      	mov	r3, sp
10008d86:	1dda      	adds	r2, r3, #7
10008d88:	79db      	ldrb	r3, [r3, #7]
10008d8a:	2120      	movs	r1, #32
10008d8c:	438b      	bics	r3, r1
10008d8e:	7013      	strb	r3, [r2, #0]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
10008d90:	4b25      	ldr	r3, [pc, #148]	; (10008e28 <mpu_set_bypass+0x16c>)
10008d92:	681a      	ldr	r2, [r3, #0]
10008d94:	7911      	ldrb	r1, [r2, #4]
10008d96:	685b      	ldr	r3, [r3, #4]
10008d98:	7818      	ldrb	r0, [r3, #0]
10008d9a:	466b      	mov	r3, sp
10008d9c:	3307      	adds	r3, #7
10008d9e:	2201      	movs	r2, #1
10008da0:	4d23      	ldr	r5, [pc, #140]	; (10008e30 <mpu_set_bypass+0x174>)
10008da2:	47a8      	blx	r5
10008da4:	2800      	cmp	r0, #0
10008da6:	d137      	bne.n	10008e18 <mpu_set_bypass+0x15c>
            return -1;
        delay_ms(3);
10008da8:	3003      	adds	r0, #3
10008daa:	4b22      	ldr	r3, [pc, #136]	; (10008e34 <mpu_set_bypass+0x178>)
10008dac:	4798      	blx	r3
        if (st.chip_cfg.active_low_int)
10008dae:	2322      	movs	r3, #34	; 0x22
10008db0:	4a1d      	ldr	r2, [pc, #116]	; (10008e28 <mpu_set_bypass+0x16c>)
10008db2:	5cd3      	ldrb	r3, [r2, r3]
10008db4:	2b00      	cmp	r3, #0
10008db6:	d003      	beq.n	10008dc0 <mpu_set_bypass+0x104>
            tmp = BIT_ACTL;
10008db8:	2280      	movs	r2, #128	; 0x80
10008dba:	466b      	mov	r3, sp
10008dbc:	71da      	strb	r2, [r3, #7]
10008dbe:	e002      	b.n	10008dc6 <mpu_set_bypass+0x10a>
        else
            tmp = 0;
10008dc0:	2200      	movs	r2, #0
10008dc2:	466b      	mov	r3, sp
10008dc4:	71da      	strb	r2, [r3, #7]
        if (st.chip_cfg.latched_int)
10008dc6:	2323      	movs	r3, #35	; 0x23
10008dc8:	4a17      	ldr	r2, [pc, #92]	; (10008e28 <mpu_set_bypass+0x16c>)
10008dca:	5cd3      	ldrb	r3, [r2, r3]
10008dcc:	2b00      	cmp	r3, #0
10008dce:	d005      	beq.n	10008ddc <mpu_set_bypass+0x120>
            tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
10008dd0:	466b      	mov	r3, sp
10008dd2:	1dda      	adds	r2, r3, #7
10008dd4:	79d9      	ldrb	r1, [r3, #7]
10008dd6:	2330      	movs	r3, #48	; 0x30
10008dd8:	430b      	orrs	r3, r1
10008dda:	7013      	strb	r3, [r2, #0]
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
10008ddc:	4b12      	ldr	r3, [pc, #72]	; (10008e28 <mpu_set_bypass+0x16c>)
10008dde:	681a      	ldr	r2, [r3, #0]
10008de0:	7dd1      	ldrb	r1, [r2, #23]
10008de2:	685b      	ldr	r3, [r3, #4]
10008de4:	7818      	ldrb	r0, [r3, #0]
10008de6:	466b      	mov	r3, sp
10008de8:	3307      	adds	r3, #7
10008dea:	2201      	movs	r2, #1
10008dec:	4d10      	ldr	r5, [pc, #64]	; (10008e30 <mpu_set_bypass+0x174>)
10008dee:	47a8      	blx	r5
10008df0:	2800      	cmp	r0, #0
10008df2:	d114      	bne.n	10008e1e <mpu_set_bypass+0x162>
            return -1;
    }
    st.chip_cfg.bypass_mode = bypass_on;
10008df4:	4b0c      	ldr	r3, [pc, #48]	; (10008e28 <mpu_set_bypass+0x16c>)
10008df6:	749c      	strb	r4, [r3, #18]
    return 0;
10008df8:	2000      	movs	r0, #0
10008dfa:	e012      	b.n	10008e22 <mpu_set_bypass+0x166>
int mpu_set_bypass(unsigned char bypass_on)
{
    unsigned char tmp;

    if (st.chip_cfg.bypass_mode == bypass_on)
        return 0;
10008dfc:	2000      	movs	r0, #0
10008dfe:	e010      	b.n	10008e22 <mpu_set_bypass+0x166>

    if (bypass_on) {
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
            return -1;
10008e00:	2001      	movs	r0, #1
10008e02:	4240      	negs	r0, r0
10008e04:	e00d      	b.n	10008e22 <mpu_set_bypass+0x166>
        tmp &= ~BIT_AUX_IF_EN;
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
            return -1;
10008e06:	2001      	movs	r0, #1
10008e08:	4240      	negs	r0, r0
10008e0a:	e00a      	b.n	10008e22 <mpu_set_bypass+0x166>
        if (st.chip_cfg.active_low_int)
            tmp |= BIT_ACTL;
        if (st.chip_cfg.latched_int)
            tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
            return -1;
10008e0c:	2001      	movs	r0, #1
10008e0e:	4240      	negs	r0, r0
10008e10:	e007      	b.n	10008e22 <mpu_set_bypass+0x166>
    } else {
        /* Enable I2C master mode if compass is being used. */
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
            return -1;
10008e12:	2001      	movs	r0, #1
10008e14:	4240      	negs	r0, r0
10008e16:	e004      	b.n	10008e22 <mpu_set_bypass+0x166>
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
            tmp |= BIT_AUX_IF_EN;
        else
            tmp &= ~BIT_AUX_IF_EN;
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
            return -1;
10008e18:	2001      	movs	r0, #1
10008e1a:	4240      	negs	r0, r0
10008e1c:	e001      	b.n	10008e22 <mpu_set_bypass+0x166>
        else
            tmp = 0;
        if (st.chip_cfg.latched_int)
            tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
            return -1;
10008e1e:	2001      	movs	r0, #1
10008e20:	4240      	negs	r0, r0
    }
    st.chip_cfg.bypass_mode = bypass_on;
    return 0;
}
10008e22:	b003      	add	sp, #12
10008e24:	bd30      	pop	{r4, r5, pc}
10008e26:	46c0      	nop			; (mov r8, r8)
10008e28:	10018608 	.word	0x10018608
10008e2c:	1000abd1 	.word	0x1000abd1
10008e30:	1000ab75 	.word	0x1000ab75
10008e34:	10008129 	.word	0x10008129

10008e38 <mpu_set_int_latched>:
 *  Any MPU register will clear the interrupt.
 *  @param[in]  enable  1 to enable, 0 to disable.
 *  @return     0 if successful.
 */
int mpu_set_int_latched(unsigned char enable)
{
10008e38:	b530      	push	{r4, r5, lr}
10008e3a:	b083      	sub	sp, #12
10008e3c:	0004      	movs	r4, r0
    unsigned char tmp;
    if (st.chip_cfg.latched_int == enable)
10008e3e:	2323      	movs	r3, #35	; 0x23
10008e40:	4a1c      	ldr	r2, [pc, #112]	; (10008eb4 <mpu_set_int_latched+0x7c>)
10008e42:	5cd3      	ldrb	r3, [r2, r3]
10008e44:	4283      	cmp	r3, r0
10008e46:	d02e      	beq.n	10008ea6 <mpu_set_int_latched+0x6e>
        return 0;

    if (enable)
10008e48:	2800      	cmp	r0, #0
10008e4a:	d003      	beq.n	10008e54 <mpu_set_int_latched+0x1c>
        tmp = BIT_LATCH_EN | BIT_ANY_RD_CLR;
10008e4c:	2230      	movs	r2, #48	; 0x30
10008e4e:	466b      	mov	r3, sp
10008e50:	71da      	strb	r2, [r3, #7]
10008e52:	e002      	b.n	10008e5a <mpu_set_int_latched+0x22>
    else
        tmp = 0;
10008e54:	2200      	movs	r2, #0
10008e56:	466b      	mov	r3, sp
10008e58:	71da      	strb	r2, [r3, #7]
    if (st.chip_cfg.bypass_mode)
10008e5a:	4b16      	ldr	r3, [pc, #88]	; (10008eb4 <mpu_set_int_latched+0x7c>)
10008e5c:	7c9b      	ldrb	r3, [r3, #18]
10008e5e:	2b00      	cmp	r3, #0
10008e60:	d005      	beq.n	10008e6e <mpu_set_int_latched+0x36>
        tmp |= BIT_BYPASS_EN;
10008e62:	466b      	mov	r3, sp
10008e64:	1dda      	adds	r2, r3, #7
10008e66:	79d9      	ldrb	r1, [r3, #7]
10008e68:	2302      	movs	r3, #2
10008e6a:	430b      	orrs	r3, r1
10008e6c:	7013      	strb	r3, [r2, #0]
    if (st.chip_cfg.active_low_int)
10008e6e:	2322      	movs	r3, #34	; 0x22
10008e70:	4a10      	ldr	r2, [pc, #64]	; (10008eb4 <mpu_set_int_latched+0x7c>)
10008e72:	5cd3      	ldrb	r3, [r2, r3]
10008e74:	2b00      	cmp	r3, #0
10008e76:	d006      	beq.n	10008e86 <mpu_set_int_latched+0x4e>
        tmp |= BIT_ACTL;
10008e78:	466b      	mov	r3, sp
10008e7a:	1dda      	adds	r2, r3, #7
10008e7c:	79db      	ldrb	r3, [r3, #7]
10008e7e:	2180      	movs	r1, #128	; 0x80
10008e80:	4249      	negs	r1, r1
10008e82:	430b      	orrs	r3, r1
10008e84:	7013      	strb	r3, [r2, #0]
    if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
10008e86:	4b0b      	ldr	r3, [pc, #44]	; (10008eb4 <mpu_set_int_latched+0x7c>)
10008e88:	681a      	ldr	r2, [r3, #0]
10008e8a:	7dd1      	ldrb	r1, [r2, #23]
10008e8c:	685b      	ldr	r3, [r3, #4]
10008e8e:	7818      	ldrb	r0, [r3, #0]
10008e90:	466b      	mov	r3, sp
10008e92:	3307      	adds	r3, #7
10008e94:	2201      	movs	r2, #1
10008e96:	4d08      	ldr	r5, [pc, #32]	; (10008eb8 <mpu_set_int_latched+0x80>)
10008e98:	47a8      	blx	r5
10008e9a:	2800      	cmp	r0, #0
10008e9c:	d105      	bne.n	10008eaa <mpu_set_int_latched+0x72>
        return -1;
    st.chip_cfg.latched_int = enable;
10008e9e:	2323      	movs	r3, #35	; 0x23
10008ea0:	4a04      	ldr	r2, [pc, #16]	; (10008eb4 <mpu_set_int_latched+0x7c>)
10008ea2:	54d4      	strb	r4, [r2, r3]
    return 0;
10008ea4:	e003      	b.n	10008eae <mpu_set_int_latched+0x76>
 */
int mpu_set_int_latched(unsigned char enable)
{
    unsigned char tmp;
    if (st.chip_cfg.latched_int == enable)
        return 0;
10008ea6:	2000      	movs	r0, #0
10008ea8:	e001      	b.n	10008eae <mpu_set_int_latched+0x76>
    if (st.chip_cfg.bypass_mode)
        tmp |= BIT_BYPASS_EN;
    if (st.chip_cfg.active_low_int)
        tmp |= BIT_ACTL;
    if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
        return -1;
10008eaa:	2001      	movs	r0, #1
10008eac:	4240      	negs	r0, r0
    st.chip_cfg.latched_int = enable;
    return 0;
}
10008eae:	b003      	add	sp, #12
10008eb0:	bd30      	pop	{r4, r5, pc}
10008eb2:	46c0      	nop			; (mov r8, r8)
10008eb4:	10018608 	.word	0x10018608
10008eb8:	1000ab75 	.word	0x1000ab75

10008ebc <mpu_lp_accel_mode>:
 *  @param[in]  rate        Minimum sampling rate, or zero to disable LP
 *                          accel mode.
 *  @return     0 if successful.
 */
int mpu_lp_accel_mode(unsigned short rate)
{
10008ebc:	b510      	push	{r4, lr}
10008ebe:	b082      	sub	sp, #8
10008ec0:	1e04      	subs	r4, r0, #0
    unsigned char tmp[2];

    if (rate > 40)
10008ec2:	2c28      	cmp	r4, #40	; 0x28
10008ec4:	d878      	bhi.n	10008fb8 <mpu_lp_accel_mode+0xfc>
        return -1;

    if (!rate) {
10008ec6:	2800      	cmp	r0, #0
10008ec8:	d115      	bne.n	10008ef6 <mpu_lp_accel_mode+0x3a>
        mpu_set_int_latched(0);
10008eca:	2000      	movs	r0, #0
10008ecc:	4b44      	ldr	r3, [pc, #272]	; (10008fe0 <mpu_lp_accel_mode+0x124>)
10008ece:	4798      	blx	r3
        tmp[0] = 0;
10008ed0:	ab01      	add	r3, sp, #4
10008ed2:	2200      	movs	r2, #0
10008ed4:	701a      	strb	r2, [r3, #0]
        tmp[1] = BIT_STBY_XYZG;
10008ed6:	3207      	adds	r2, #7
10008ed8:	705a      	strb	r2, [r3, #1]
        if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
10008eda:	4a42      	ldr	r2, [pc, #264]	; (10008fe4 <mpu_lp_accel_mode+0x128>)
10008edc:	6811      	ldr	r1, [r2, #0]
10008ede:	7d49      	ldrb	r1, [r1, #21]
10008ee0:	6852      	ldr	r2, [r2, #4]
10008ee2:	7810      	ldrb	r0, [r2, #0]
10008ee4:	2202      	movs	r2, #2
10008ee6:	4c40      	ldr	r4, [pc, #256]	; (10008fe8 <mpu_lp_accel_mode+0x12c>)
10008ee8:	47a0      	blx	r4
10008eea:	1e04      	subs	r4, r0, #0
10008eec:	d167      	bne.n	10008fbe <mpu_lp_accel_mode+0x102>
            return -1;
        st.chip_cfg.lp_accel_mode = 0;
10008eee:	2200      	movs	r2, #0
10008ef0:	4b3c      	ldr	r3, [pc, #240]	; (10008fe4 <mpu_lp_accel_mode+0x128>)
10008ef2:	751a      	strb	r2, [r3, #20]
        return 0;
10008ef4:	e071      	b.n	10008fda <mpu_lp_accel_mode+0x11e>
     * it gets a chance to deassert the interrupt pin; therefore, we shift this
     * responsibility over to the MCU.
     *
     * Any register read will clear the interrupt.
     */
    mpu_set_int_latched(1);
10008ef6:	2001      	movs	r0, #1
10008ef8:	4b39      	ldr	r3, [pc, #228]	; (10008fe0 <mpu_lp_accel_mode+0x124>)
10008efa:	4798      	blx	r3
    tmp[1] = (tmp[1] << 6) | BIT_STBY_XYZG;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
        return -1;
#elif defined MPU6500
    /* Set wake frequency. */
    if (rate == 1)
10008efc:	2c01      	cmp	r4, #1
10008efe:	d103      	bne.n	10008f08 <mpu_lp_accel_mode+0x4c>
        tmp[0] = INV_LPA_1_25HZ;
10008f00:	2202      	movs	r2, #2
10008f02:	ab01      	add	r3, sp, #4
10008f04:	701a      	strb	r2, [r3, #0]
10008f06:	e01a      	b.n	10008f3e <mpu_lp_accel_mode+0x82>
    else if (rate == 2)
10008f08:	2c02      	cmp	r4, #2
10008f0a:	d103      	bne.n	10008f14 <mpu_lp_accel_mode+0x58>
        tmp[0] = INV_LPA_2_5HZ;
10008f0c:	2203      	movs	r2, #3
10008f0e:	ab01      	add	r3, sp, #4
10008f10:	701a      	strb	r2, [r3, #0]
10008f12:	e014      	b.n	10008f3e <mpu_lp_accel_mode+0x82>
    else if (rate <= 5)
10008f14:	2c05      	cmp	r4, #5
10008f16:	d803      	bhi.n	10008f20 <mpu_lp_accel_mode+0x64>
        tmp[0] = INV_LPA_5HZ;
10008f18:	2204      	movs	r2, #4
10008f1a:	ab01      	add	r3, sp, #4
10008f1c:	701a      	strb	r2, [r3, #0]
10008f1e:	e00e      	b.n	10008f3e <mpu_lp_accel_mode+0x82>
    else if (rate <= 10)
10008f20:	2c0a      	cmp	r4, #10
10008f22:	d803      	bhi.n	10008f2c <mpu_lp_accel_mode+0x70>
        tmp[0] = INV_LPA_10HZ;
10008f24:	2205      	movs	r2, #5
10008f26:	ab01      	add	r3, sp, #4
10008f28:	701a      	strb	r2, [r3, #0]
10008f2a:	e008      	b.n	10008f3e <mpu_lp_accel_mode+0x82>
    else if (rate <= 20)
10008f2c:	2c14      	cmp	r4, #20
10008f2e:	d803      	bhi.n	10008f38 <mpu_lp_accel_mode+0x7c>
        tmp[0] = INV_LPA_20HZ;
10008f30:	2206      	movs	r2, #6
10008f32:	ab01      	add	r3, sp, #4
10008f34:	701a      	strb	r2, [r3, #0]
10008f36:	e002      	b.n	10008f3e <mpu_lp_accel_mode+0x82>
    else if (rate <= 40)
        tmp[0] = INV_LPA_40HZ;
10008f38:	2207      	movs	r2, #7
10008f3a:	ab01      	add	r3, sp, #4
10008f3c:	701a      	strb	r2, [r3, #0]
        tmp[0] = INV_LPA_160HZ;
    else if (rate <= 320)
        tmp[0] = INV_LPA_320HZ;
    else
        tmp[0] = INV_LPA_640HZ;
    if (i2c_write(st.hw->addr, st.reg->lp_accel_odr, 1, tmp))
10008f3e:	4b29      	ldr	r3, [pc, #164]	; (10008fe4 <mpu_lp_accel_mode+0x128>)
10008f40:	681a      	ldr	r2, [r3, #0]
10008f42:	7a51      	ldrb	r1, [r2, #9]
10008f44:	685b      	ldr	r3, [r3, #4]
10008f46:	7818      	ldrb	r0, [r3, #0]
10008f48:	ab01      	add	r3, sp, #4
10008f4a:	2201      	movs	r2, #1
10008f4c:	4c26      	ldr	r4, [pc, #152]	; (10008fe8 <mpu_lp_accel_mode+0x12c>)
10008f4e:	47a0      	blx	r4
10008f50:	2800      	cmp	r0, #0
10008f52:	d137      	bne.n	10008fc4 <mpu_lp_accel_mode+0x108>
        return -1;
    /* Enable LP ACCEL mode, ACCEL_FCHOICE_B=1*/
    if (i2c_read(st.hw->addr, st.reg->accel_cfg2, 1, tmp))
10008f54:	4b23      	ldr	r3, [pc, #140]	; (10008fe4 <mpu_lp_accel_mode+0x128>)
10008f56:	681a      	ldr	r2, [r3, #0]
10008f58:	7a11      	ldrb	r1, [r2, #8]
10008f5a:	685b      	ldr	r3, [r3, #4]
10008f5c:	7818      	ldrb	r0, [r3, #0]
10008f5e:	ab01      	add	r3, sp, #4
10008f60:	2201      	movs	r2, #1
10008f62:	4c22      	ldr	r4, [pc, #136]	; (10008fec <mpu_lp_accel_mode+0x130>)
10008f64:	47a0      	blx	r4
10008f66:	2800      	cmp	r0, #0
10008f68:	d12f      	bne.n	10008fca <mpu_lp_accel_mode+0x10e>
       	return -1;

    tmp[0] = BIT_ACCL_FC_B | tmp[0];
10008f6a:	ab01      	add	r3, sp, #4
10008f6c:	7819      	ldrb	r1, [r3, #0]
10008f6e:	2208      	movs	r2, #8
10008f70:	430a      	orrs	r2, r1
10008f72:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->accel_cfg2, 1, tmp))
10008f74:	4a1b      	ldr	r2, [pc, #108]	; (10008fe4 <mpu_lp_accel_mode+0x128>)
10008f76:	6811      	ldr	r1, [r2, #0]
10008f78:	7a09      	ldrb	r1, [r1, #8]
10008f7a:	6852      	ldr	r2, [r2, #4]
10008f7c:	7810      	ldrb	r0, [r2, #0]
10008f7e:	2201      	movs	r2, #1
10008f80:	4c19      	ldr	r4, [pc, #100]	; (10008fe8 <mpu_lp_accel_mode+0x12c>)
10008f82:	47a0      	blx	r4
10008f84:	2800      	cmp	r0, #0
10008f86:	d123      	bne.n	10008fd0 <mpu_lp_accel_mode+0x114>
    	return -1;
    tmp[0] = BIT_LPA_CYCLE;
10008f88:	ab01      	add	r3, sp, #4
10008f8a:	2220      	movs	r2, #32
10008f8c:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, tmp))
10008f8e:	4a15      	ldr	r2, [pc, #84]	; (10008fe4 <mpu_lp_accel_mode+0x128>)
10008f90:	6811      	ldr	r1, [r2, #0]
10008f92:	7d49      	ldrb	r1, [r1, #21]
10008f94:	6852      	ldr	r2, [r2, #4]
10008f96:	7810      	ldrb	r0, [r2, #0]
10008f98:	2201      	movs	r2, #1
10008f9a:	4c13      	ldr	r4, [pc, #76]	; (10008fe8 <mpu_lp_accel_mode+0x12c>)
10008f9c:	47a0      	blx	r4
10008f9e:	1e04      	subs	r4, r0, #0
10008fa0:	d119      	bne.n	10008fd6 <mpu_lp_accel_mode+0x11a>
        return -1;
#endif
    st.chip_cfg.sensors = INV_XYZ_ACCEL;
10008fa2:	4b10      	ldr	r3, [pc, #64]	; (10008fe4 <mpu_lp_accel_mode+0x128>)
10008fa4:	2208      	movs	r2, #8
10008fa6:	729a      	strb	r2, [r3, #10]
    st.chip_cfg.clk_src = 0;
10008fa8:	2200      	movs	r2, #0
10008faa:	731a      	strb	r2, [r3, #12]
    st.chip_cfg.lp_accel_mode = 1;
10008fac:	3201      	adds	r2, #1
10008fae:	751a      	strb	r2, [r3, #20]
    mpu_configure_fifo(0);
10008fb0:	2000      	movs	r0, #0
10008fb2:	4b0f      	ldr	r3, [pc, #60]	; (10008ff0 <mpu_lp_accel_mode+0x134>)
10008fb4:	4798      	blx	r3

    return 0;
10008fb6:	e010      	b.n	10008fda <mpu_lp_accel_mode+0x11e>
int mpu_lp_accel_mode(unsigned short rate)
{
    unsigned char tmp[2];

    if (rate > 40)
        return -1;
10008fb8:	2401      	movs	r4, #1
10008fba:	4264      	negs	r4, r4
10008fbc:	e00d      	b.n	10008fda <mpu_lp_accel_mode+0x11e>
    if (!rate) {
        mpu_set_int_latched(0);
        tmp[0] = 0;
        tmp[1] = BIT_STBY_XYZG;
        if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
            return -1;
10008fbe:	2401      	movs	r4, #1
10008fc0:	4264      	negs	r4, r4
10008fc2:	e00a      	b.n	10008fda <mpu_lp_accel_mode+0x11e>
    else if (rate <= 320)
        tmp[0] = INV_LPA_320HZ;
    else
        tmp[0] = INV_LPA_640HZ;
    if (i2c_write(st.hw->addr, st.reg->lp_accel_odr, 1, tmp))
        return -1;
10008fc4:	2401      	movs	r4, #1
10008fc6:	4264      	negs	r4, r4
10008fc8:	e007      	b.n	10008fda <mpu_lp_accel_mode+0x11e>
    /* Enable LP ACCEL mode, ACCEL_FCHOICE_B=1*/
    if (i2c_read(st.hw->addr, st.reg->accel_cfg2, 1, tmp))
       	return -1;
10008fca:	2401      	movs	r4, #1
10008fcc:	4264      	negs	r4, r4
10008fce:	e004      	b.n	10008fda <mpu_lp_accel_mode+0x11e>

    tmp[0] = BIT_ACCL_FC_B | tmp[0];
    if (i2c_write(st.hw->addr, st.reg->accel_cfg2, 1, tmp))
    	return -1;
10008fd0:	2401      	movs	r4, #1
10008fd2:	4264      	negs	r4, r4
10008fd4:	e001      	b.n	10008fda <mpu_lp_accel_mode+0x11e>
    tmp[0] = BIT_LPA_CYCLE;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, tmp))
        return -1;
10008fd6:	2401      	movs	r4, #1
10008fd8:	4264      	negs	r4, r4
    st.chip_cfg.clk_src = 0;
    st.chip_cfg.lp_accel_mode = 1;
    mpu_configure_fifo(0);

    return 0;
}
10008fda:	0020      	movs	r0, r4
10008fdc:	b002      	add	sp, #8
10008fde:	bd10      	pop	{r4, pc}
10008fe0:	10008e39 	.word	0x10008e39
10008fe4:	10018608 	.word	0x10018608
10008fe8:	1000ab75 	.word	0x1000ab75
10008fec:	1000abd1 	.word	0x1000abd1
10008ff0:	10008a85 	.word	0x10008a85

10008ff4 <mpu_set_sample_rate>:
 *  Sampling rate must be between 4Hz and 1kHz.
 *  @param[in]  rate    Desired sampling rate (Hz).
 *  @return     0 if successful.
 */
int mpu_set_sample_rate(unsigned short rate)
{
10008ff4:	b530      	push	{r4, r5, lr}
10008ff6:	b083      	sub	sp, #12
10008ff8:	0004      	movs	r4, r0
    unsigned char data;

    if (!(st.chip_cfg.sensors))
10008ffa:	4b2c      	ldr	r3, [pc, #176]	; (100090ac <mpu_set_sample_rate+0xb8>)
10008ffc:	7a9b      	ldrb	r3, [r3, #10]
10008ffe:	2b00      	cmp	r3, #0
10009000:	d048      	beq.n	10009094 <mpu_set_sample_rate+0xa0>
        return -1;

    if (st.chip_cfg.dmp_on)
10009002:	2324      	movs	r3, #36	; 0x24
10009004:	4a29      	ldr	r2, [pc, #164]	; (100090ac <mpu_set_sample_rate+0xb8>)
10009006:	5cd3      	ldrb	r3, [r2, r3]
10009008:	2b00      	cmp	r3, #0
1000900a:	d146      	bne.n	1000909a <mpu_set_sample_rate+0xa6>
        return -1;
    else {
        if (st.chip_cfg.lp_accel_mode) {
1000900c:	7d13      	ldrb	r3, [r2, #20]
1000900e:	2b00      	cmp	r3, #0
10009010:	d00a      	beq.n	10009028 <mpu_set_sample_rate+0x34>
            if (rate && (rate <= 40)) {
10009012:	1e43      	subs	r3, r0, #1
10009014:	b29b      	uxth	r3, r3
10009016:	2b27      	cmp	r3, #39	; 0x27
10009018:	d803      	bhi.n	10009022 <mpu_set_sample_rate+0x2e>
                /* Just stay in low-power accel mode. */
                mpu_lp_accel_mode(rate);
1000901a:	4b25      	ldr	r3, [pc, #148]	; (100090b0 <mpu_set_sample_rate+0xbc>)
1000901c:	4798      	blx	r3
                return 0;
1000901e:	2400      	movs	r4, #0
10009020:	e040      	b.n	100090a4 <mpu_set_sample_rate+0xb0>
            }
            /* Requested rate exceeds the allowed frequencies in LP accel mode,
             * switch back to full-power mode.
             */
            mpu_lp_accel_mode(0);
10009022:	2000      	movs	r0, #0
10009024:	4b22      	ldr	r3, [pc, #136]	; (100090b0 <mpu_set_sample_rate+0xbc>)
10009026:	4798      	blx	r3
        }
        if (rate < 4)
            rate = 4;
10009028:	2104      	movs	r1, #4
            /* Requested rate exceeds the allowed frequencies in LP accel mode,
             * switch back to full-power mode.
             */
            mpu_lp_accel_mode(0);
        }
        if (rate < 4)
1000902a:	2c03      	cmp	r4, #3
1000902c:	d907      	bls.n	1000903e <mpu_set_sample_rate+0x4a>
1000902e:	1c21      	adds	r1, r4, #0
10009030:	23fa      	movs	r3, #250	; 0xfa
10009032:	009b      	lsls	r3, r3, #2
10009034:	429c      	cmp	r4, r3
10009036:	d901      	bls.n	1000903c <mpu_set_sample_rate+0x48>
10009038:	4b1e      	ldr	r3, [pc, #120]	; (100090b4 <mpu_set_sample_rate+0xc0>)
1000903a:	8819      	ldrh	r1, [r3, #0]
1000903c:	b289      	uxth	r1, r1
            rate = 4;
        else if (rate > 1000)
            rate = 1000;

        data = 1000 / rate - 1;
1000903e:	466b      	mov	r3, sp
10009040:	1ddc      	adds	r4, r3, #7
10009042:	20fa      	movs	r0, #250	; 0xfa
10009044:	0080      	lsls	r0, r0, #2
10009046:	4b1c      	ldr	r3, [pc, #112]	; (100090b8 <mpu_set_sample_rate+0xc4>)
10009048:	4798      	blx	r3
1000904a:	3801      	subs	r0, #1
1000904c:	7020      	strb	r0, [r4, #0]
        if (i2c_write(st.hw->addr, st.reg->rate_div, 1, &data))
1000904e:	4b17      	ldr	r3, [pc, #92]	; (100090ac <mpu_set_sample_rate+0xb8>)
10009050:	681a      	ldr	r2, [r3, #0]
10009052:	7851      	ldrb	r1, [r2, #1]
10009054:	685b      	ldr	r3, [r3, #4]
10009056:	7818      	ldrb	r0, [r3, #0]
10009058:	0023      	movs	r3, r4
1000905a:	2201      	movs	r2, #1
1000905c:	4c17      	ldr	r4, [pc, #92]	; (100090bc <mpu_set_sample_rate+0xc8>)
1000905e:	47a0      	blx	r4
10009060:	1e04      	subs	r4, r0, #0
10009062:	d11d      	bne.n	100090a0 <mpu_set_sample_rate+0xac>
            return -1;

        st.chip_cfg.sample_rate = 1000 / (1 + data);
10009064:	4d11      	ldr	r5, [pc, #68]	; (100090ac <mpu_set_sample_rate+0xb8>)
10009066:	466b      	mov	r3, sp
10009068:	79d9      	ldrb	r1, [r3, #7]
1000906a:	3101      	adds	r1, #1
1000906c:	20fa      	movs	r0, #250	; 0xfa
1000906e:	0080      	lsls	r0, r0, #2
10009070:	4b11      	ldr	r3, [pc, #68]	; (100090b8 <mpu_set_sample_rate+0xc4>)
10009072:	4798      	blx	r3
10009074:	81e8      	strh	r0, [r5, #14]

#ifdef AK89xx_SECONDARY
        mpu_set_compass_sample_rate(min(st.chip_cfg.compass_sample_rate, MAX_COMPASS_SAMPLE_RATE));
10009076:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
10009078:	1c18      	adds	r0, r3, #0
1000907a:	b29b      	uxth	r3, r3
1000907c:	2b64      	cmp	r3, #100	; 0x64
1000907e:	d900      	bls.n	10009082 <mpu_set_sample_rate+0x8e>
10009080:	2064      	movs	r0, #100	; 0x64
10009082:	b280      	uxth	r0, r0
10009084:	4b0e      	ldr	r3, [pc, #56]	; (100090c0 <mpu_set_sample_rate+0xcc>)
10009086:	4798      	blx	r3
#endif

        /* Automatically set LPF to 1/2 sampling rate. */
        mpu_set_lpf(st.chip_cfg.sample_rate >> 1);
10009088:	4b08      	ldr	r3, [pc, #32]	; (100090ac <mpu_set_sample_rate+0xb8>)
1000908a:	89d8      	ldrh	r0, [r3, #14]
1000908c:	0840      	lsrs	r0, r0, #1
1000908e:	4b0d      	ldr	r3, [pc, #52]	; (100090c4 <mpu_set_sample_rate+0xd0>)
10009090:	4798      	blx	r3
        return 0;
10009092:	e007      	b.n	100090a4 <mpu_set_sample_rate+0xb0>
int mpu_set_sample_rate(unsigned short rate)
{
    unsigned char data;

    if (!(st.chip_cfg.sensors))
        return -1;
10009094:	2401      	movs	r4, #1
10009096:	4264      	negs	r4, r4
10009098:	e004      	b.n	100090a4 <mpu_set_sample_rate+0xb0>

    if (st.chip_cfg.dmp_on)
        return -1;
1000909a:	2401      	movs	r4, #1
1000909c:	4264      	negs	r4, r4
1000909e:	e001      	b.n	100090a4 <mpu_set_sample_rate+0xb0>
        else if (rate > 1000)
            rate = 1000;

        data = 1000 / rate - 1;
        if (i2c_write(st.hw->addr, st.reg->rate_div, 1, &data))
            return -1;
100090a0:	2401      	movs	r4, #1
100090a2:	4264      	negs	r4, r4

        /* Automatically set LPF to 1/2 sampling rate. */
        mpu_set_lpf(st.chip_cfg.sample_rate >> 1);
        return 0;
    }
}
100090a4:	0020      	movs	r0, r4
100090a6:	b003      	add	sp, #12
100090a8:	bd30      	pop	{r4, r5, pc}
100090aa:	46c0      	nop			; (mov r8, r8)
100090ac:	10018608 	.word	0x10018608
100090b0:	10008ebd 	.word	0x10008ebd
100090b4:	100163d4 	.word	0x100163d4
100090b8:	1001323d 	.word	0x1001323d
100090bc:	1000ab75 	.word	0x1000ab75
100090c0:	10008a0d 	.word	0x10008a0d
100090c4:	10008935 	.word	0x10008935

100090c8 <mpu_set_sensors>:
 *  \n INV_XYZ_COMPASS
 *  @param[in]  sensors    Mask of sensors to wake.
 *  @return     0 if successful.
 */
int mpu_set_sensors(unsigned char sensors)
{
100090c8:	b530      	push	{r4, r5, lr}
100090ca:	b083      	sub	sp, #12
100090cc:	0004      	movs	r4, r0
    unsigned char data;
#ifdef AK89xx_SECONDARY
    unsigned char user_ctrl;
#endif

    if (sensors & INV_XYZ_GYRO)
100090ce:	2370      	movs	r3, #112	; 0x70
100090d0:	4203      	tst	r3, r0
100090d2:	d003      	beq.n	100090dc <mpu_set_sensors+0x14>
        data = INV_CLK_PLL;
100090d4:	2201      	movs	r2, #1
100090d6:	466b      	mov	r3, sp
100090d8:	71da      	strb	r2, [r3, #7]
100090da:	e015      	b.n	10009108 <mpu_set_sensors+0x40>
    else if (sensors)
100090dc:	2800      	cmp	r0, #0
100090de:	d003      	beq.n	100090e8 <mpu_set_sensors+0x20>
        data = 0;
100090e0:	2200      	movs	r2, #0
100090e2:	466b      	mov	r3, sp
100090e4:	71da      	strb	r2, [r3, #7]
100090e6:	e00f      	b.n	10009108 <mpu_set_sensors+0x40>
    else
        data = BIT_SLEEP;
100090e8:	466b      	mov	r3, sp
100090ea:	3307      	adds	r3, #7
100090ec:	2240      	movs	r2, #64	; 0x40
100090ee:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, &data)) {
100090f0:	4a6a      	ldr	r2, [pc, #424]	; (1000929c <mpu_set_sensors+0x1d4>)
100090f2:	6811      	ldr	r1, [r2, #0]
100090f4:	7d49      	ldrb	r1, [r1, #21]
100090f6:	6852      	ldr	r2, [r2, #4]
100090f8:	7810      	ldrb	r0, [r2, #0]
100090fa:	2201      	movs	r2, #1
100090fc:	4d68      	ldr	r5, [pc, #416]	; (100092a0 <mpu_set_sensors+0x1d8>)
100090fe:	47a8      	blx	r5
10009100:	2800      	cmp	r0, #0
10009102:	d100      	bne.n	10009106 <mpu_set_sensors+0x3e>
10009104:	e0b2      	b.n	1000926c <mpu_set_sensors+0x1a4>
10009106:	e00b      	b.n	10009120 <mpu_set_sensors+0x58>
10009108:	4b64      	ldr	r3, [pc, #400]	; (1000929c <mpu_set_sensors+0x1d4>)
1000910a:	681a      	ldr	r2, [r3, #0]
1000910c:	7d51      	ldrb	r1, [r2, #21]
1000910e:	685b      	ldr	r3, [r3, #4]
10009110:	7818      	ldrb	r0, [r3, #0]
10009112:	466b      	mov	r3, sp
10009114:	3307      	adds	r3, #7
10009116:	2201      	movs	r2, #1
10009118:	4d61      	ldr	r5, [pc, #388]	; (100092a0 <mpu_set_sensors+0x1d8>)
1000911a:	47a8      	blx	r5
1000911c:	2800      	cmp	r0, #0
1000911e:	d005      	beq.n	1000912c <mpu_set_sensors+0x64>
        st.chip_cfg.sensors = 0;
10009120:	2200      	movs	r2, #0
10009122:	4b5e      	ldr	r3, [pc, #376]	; (1000929c <mpu_set_sensors+0x1d4>)
10009124:	729a      	strb	r2, [r3, #10]
        return -1;
10009126:	2501      	movs	r5, #1
10009128:	426d      	negs	r5, r5
1000912a:	e0b4      	b.n	10009296 <mpu_set_sensors+0x1ce>
    }
    st.chip_cfg.clk_src = data & ~BIT_SLEEP;
1000912c:	466b      	mov	r3, sp
1000912e:	1dda      	adds	r2, r3, #7
10009130:	79db      	ldrb	r3, [r3, #7]
10009132:	2140      	movs	r1, #64	; 0x40
10009134:	438b      	bics	r3, r1
10009136:	4959      	ldr	r1, [pc, #356]	; (1000929c <mpu_set_sensors+0x1d4>)
10009138:	730b      	strb	r3, [r1, #12]

    data = 0;
1000913a:	2300      	movs	r3, #0
1000913c:	7013      	strb	r3, [r2, #0]
    if (!(sensors & INV_X_GYRO))
1000913e:	0663      	lsls	r3, r4, #25
10009140:	d402      	bmi.n	10009148 <mpu_set_sensors+0x80>
        data |= BIT_STBY_XG;
10009142:	2204      	movs	r2, #4
10009144:	466b      	mov	r3, sp
10009146:	71da      	strb	r2, [r3, #7]
    if (!(sensors & INV_Y_GYRO))
10009148:	06a3      	lsls	r3, r4, #26
1000914a:	d405      	bmi.n	10009158 <mpu_set_sensors+0x90>
        data |= BIT_STBY_YG;
1000914c:	466b      	mov	r3, sp
1000914e:	1dda      	adds	r2, r3, #7
10009150:	79d9      	ldrb	r1, [r3, #7]
10009152:	2302      	movs	r3, #2
10009154:	430b      	orrs	r3, r1
10009156:	7013      	strb	r3, [r2, #0]
    if (!(sensors & INV_Z_GYRO))
10009158:	06e3      	lsls	r3, r4, #27
1000915a:	d405      	bmi.n	10009168 <mpu_set_sensors+0xa0>
        data |= BIT_STBY_ZG;
1000915c:	466b      	mov	r3, sp
1000915e:	1dda      	adds	r2, r3, #7
10009160:	79d9      	ldrb	r1, [r3, #7]
10009162:	2301      	movs	r3, #1
10009164:	430b      	orrs	r3, r1
10009166:	7013      	strb	r3, [r2, #0]
    if (!(sensors & INV_XYZ_ACCEL))
10009168:	0723      	lsls	r3, r4, #28
1000916a:	d405      	bmi.n	10009178 <mpu_set_sensors+0xb0>
        data |= BIT_STBY_XYZA;
1000916c:	466b      	mov	r3, sp
1000916e:	1dda      	adds	r2, r3, #7
10009170:	79d9      	ldrb	r1, [r3, #7]
10009172:	2338      	movs	r3, #56	; 0x38
10009174:	430b      	orrs	r3, r1
10009176:	7013      	strb	r3, [r2, #0]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_2, 1, &data)) {
10009178:	4b48      	ldr	r3, [pc, #288]	; (1000929c <mpu_set_sensors+0x1d4>)
1000917a:	681a      	ldr	r2, [r3, #0]
1000917c:	7d91      	ldrb	r1, [r2, #22]
1000917e:	685b      	ldr	r3, [r3, #4]
10009180:	7818      	ldrb	r0, [r3, #0]
10009182:	466b      	mov	r3, sp
10009184:	3307      	adds	r3, #7
10009186:	2201      	movs	r2, #1
10009188:	4d45      	ldr	r5, [pc, #276]	; (100092a0 <mpu_set_sensors+0x1d8>)
1000918a:	47a8      	blx	r5
1000918c:	2800      	cmp	r0, #0
1000918e:	d005      	beq.n	1000919c <mpu_set_sensors+0xd4>
        st.chip_cfg.sensors = 0;
10009190:	2200      	movs	r2, #0
10009192:	4b42      	ldr	r3, [pc, #264]	; (1000929c <mpu_set_sensors+0x1d4>)
10009194:	729a      	strb	r2, [r3, #10]
        return -1;
10009196:	2501      	movs	r5, #1
10009198:	426d      	negs	r5, r5
1000919a:	e07c      	b.n	10009296 <mpu_set_sensors+0x1ce>
    }

    if (sensors && (sensors != INV_XYZ_ACCEL))
1000919c:	2308      	movs	r3, #8
1000919e:	0022      	movs	r2, r4
100091a0:	439a      	bics	r2, r3
100091a2:	d06b      	beq.n	1000927c <mpu_set_sensors+0x1b4>
        /* Latched interrupts only used in LP accel mode. */
        mpu_set_int_latched(0);
100091a4:	2000      	movs	r0, #0
100091a6:	4b3f      	ldr	r3, [pc, #252]	; (100092a4 <mpu_set_sensors+0x1dc>)
100091a8:	4798      	blx	r3
    if (sensors & INV_XYZ_COMPASS)
        mpu_set_bypass(1);
    else
        mpu_set_bypass(0);
#else
    if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
100091aa:	4b3c      	ldr	r3, [pc, #240]	; (1000929c <mpu_set_sensors+0x1d4>)
100091ac:	681a      	ldr	r2, [r3, #0]
100091ae:	7911      	ldrb	r1, [r2, #4]
100091b0:	685b      	ldr	r3, [r3, #4]
100091b2:	7818      	ldrb	r0, [r3, #0]
100091b4:	466b      	mov	r3, sp
100091b6:	3306      	adds	r3, #6
100091b8:	2201      	movs	r2, #1
100091ba:	4d3b      	ldr	r5, [pc, #236]	; (100092a8 <mpu_set_sensors+0x1e0>)
100091bc:	47a8      	blx	r5
100091be:	2800      	cmp	r0, #0
100091c0:	d148      	bne.n	10009254 <mpu_set_sensors+0x18c>
        return -1;
    /* Handle AKM power management. */
    if (sensors & INV_XYZ_COMPASS) {
100091c2:	07e3      	lsls	r3, r4, #31
100091c4:	d509      	bpl.n	100091da <mpu_set_sensors+0x112>
        data = AKM_SINGLE_MEASUREMENT;
100091c6:	2211      	movs	r2, #17
100091c8:	466b      	mov	r3, sp
100091ca:	71da      	strb	r2, [r3, #7]
        user_ctrl |= BIT_AUX_IF_EN;
100091cc:	466b      	mov	r3, sp
100091ce:	1d9a      	adds	r2, r3, #6
100091d0:	7999      	ldrb	r1, [r3, #6]
100091d2:	2320      	movs	r3, #32
100091d4:	430b      	orrs	r3, r1
100091d6:	7013      	strb	r3, [r2, #0]
100091d8:	e008      	b.n	100091ec <mpu_set_sensors+0x124>
    } else {
        data = AKM_POWER_DOWN;
100091da:	2210      	movs	r2, #16
100091dc:	466b      	mov	r3, sp
100091de:	71da      	strb	r2, [r3, #7]
        user_ctrl &= ~BIT_AUX_IF_EN;
100091e0:	466b      	mov	r3, sp
100091e2:	1d9a      	adds	r2, r3, #6
100091e4:	799b      	ldrb	r3, [r3, #6]
100091e6:	2120      	movs	r1, #32
100091e8:	438b      	bics	r3, r1
100091ea:	7013      	strb	r3, [r2, #0]
    }
    if (st.chip_cfg.dmp_on)
100091ec:	2324      	movs	r3, #36	; 0x24
100091ee:	4a2b      	ldr	r2, [pc, #172]	; (1000929c <mpu_set_sensors+0x1d4>)
100091f0:	5cd3      	ldrb	r3, [r2, r3]
100091f2:	2b00      	cmp	r3, #0
100091f4:	d007      	beq.n	10009206 <mpu_set_sensors+0x13e>
        user_ctrl |= BIT_DMP_EN;
100091f6:	466b      	mov	r3, sp
100091f8:	1d9a      	adds	r2, r3, #6
100091fa:	799b      	ldrb	r3, [r3, #6]
100091fc:	2180      	movs	r1, #128	; 0x80
100091fe:	4249      	negs	r1, r1
10009200:	430b      	orrs	r3, r1
10009202:	7013      	strb	r3, [r2, #0]
10009204:	e005      	b.n	10009212 <mpu_set_sensors+0x14a>
    else
        user_ctrl &= ~BIT_DMP_EN;
10009206:	466b      	mov	r3, sp
10009208:	1d9a      	adds	r2, r3, #6
1000920a:	799b      	ldrb	r3, [r3, #6]
1000920c:	217f      	movs	r1, #127	; 0x7f
1000920e:	400b      	ands	r3, r1
10009210:	7013      	strb	r3, [r2, #0]
    if (i2c_write(st.hw->addr, st.reg->s1_do, 1, &data))
10009212:	4b22      	ldr	r3, [pc, #136]	; (1000929c <mpu_set_sensors+0x1d4>)
10009214:	2226      	movs	r2, #38	; 0x26
10009216:	6819      	ldr	r1, [r3, #0]
10009218:	5c89      	ldrb	r1, [r1, r2]
1000921a:	685b      	ldr	r3, [r3, #4]
1000921c:	7818      	ldrb	r0, [r3, #0]
1000921e:	466b      	mov	r3, sp
10009220:	3307      	adds	r3, #7
10009222:	3a25      	subs	r2, #37	; 0x25
10009224:	4d1e      	ldr	r5, [pc, #120]	; (100092a0 <mpu_set_sensors+0x1d8>)
10009226:	47a8      	blx	r5
10009228:	2800      	cmp	r0, #0
1000922a:	d116      	bne.n	1000925a <mpu_set_sensors+0x192>
        return -1;
    /* Enable/disable I2C master mode. */
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
1000922c:	4b1b      	ldr	r3, [pc, #108]	; (1000929c <mpu_set_sensors+0x1d4>)
1000922e:	681a      	ldr	r2, [r3, #0]
10009230:	7911      	ldrb	r1, [r2, #4]
10009232:	685b      	ldr	r3, [r3, #4]
10009234:	7818      	ldrb	r0, [r3, #0]
10009236:	466b      	mov	r3, sp
10009238:	3306      	adds	r3, #6
1000923a:	2201      	movs	r2, #1
1000923c:	4d18      	ldr	r5, [pc, #96]	; (100092a0 <mpu_set_sensors+0x1d8>)
1000923e:	47a8      	blx	r5
10009240:	1e05      	subs	r5, r0, #0
10009242:	d10d      	bne.n	10009260 <mpu_set_sensors+0x198>
        return -1;
#endif
#endif

    st.chip_cfg.sensors = sensors;
10009244:	4b15      	ldr	r3, [pc, #84]	; (1000929c <mpu_set_sensors+0x1d4>)
10009246:	729c      	strb	r4, [r3, #10]
    st.chip_cfg.lp_accel_mode = 0;
10009248:	2200      	movs	r2, #0
1000924a:	751a      	strb	r2, [r3, #20]
    delay_ms(50);
1000924c:	2032      	movs	r0, #50	; 0x32
1000924e:	4b17      	ldr	r3, [pc, #92]	; (100092ac <mpu_set_sensors+0x1e4>)
10009250:	4798      	blx	r3
    return 0;
10009252:	e020      	b.n	10009296 <mpu_set_sensors+0x1ce>
        mpu_set_bypass(1);
    else
        mpu_set_bypass(0);
#else
    if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
        return -1;
10009254:	2501      	movs	r5, #1
10009256:	426d      	negs	r5, r5
10009258:	e01d      	b.n	10009296 <mpu_set_sensors+0x1ce>
    if (st.chip_cfg.dmp_on)
        user_ctrl |= BIT_DMP_EN;
    else
        user_ctrl &= ~BIT_DMP_EN;
    if (i2c_write(st.hw->addr, st.reg->s1_do, 1, &data))
        return -1;
1000925a:	2501      	movs	r5, #1
1000925c:	426d      	negs	r5, r5
1000925e:	e01a      	b.n	10009296 <mpu_set_sensors+0x1ce>
    /* Enable/disable I2C master mode. */
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
        return -1;
10009260:	2501      	movs	r5, #1
10009262:	426d      	negs	r5, r5
10009264:	e017      	b.n	10009296 <mpu_set_sensors+0x1ce>
        mpu_set_bypass(1);
    else
        mpu_set_bypass(0);
#else
    if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
        return -1;
10009266:	2501      	movs	r5, #1
10009268:	426d      	negs	r5, r5
1000926a:	e014      	b.n	10009296 <mpu_set_sensors+0x1ce>
        data = BIT_SLEEP;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, &data)) {
        st.chip_cfg.sensors = 0;
        return -1;
    }
    st.chip_cfg.clk_src = data & ~BIT_SLEEP;
1000926c:	466b      	mov	r3, sp
1000926e:	3307      	adds	r3, #7
10009270:	781b      	ldrb	r3, [r3, #0]
10009272:	2240      	movs	r2, #64	; 0x40
10009274:	4393      	bics	r3, r2
10009276:	4a09      	ldr	r2, [pc, #36]	; (1000929c <mpu_set_sensors+0x1d4>)
10009278:	7313      	strb	r3, [r2, #12]
1000927a:	e762      	b.n	10009142 <mpu_set_sensors+0x7a>
    if (sensors & INV_XYZ_COMPASS)
        mpu_set_bypass(1);
    else
        mpu_set_bypass(0);
#else
    if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
1000927c:	4b07      	ldr	r3, [pc, #28]	; (1000929c <mpu_set_sensors+0x1d4>)
1000927e:	681a      	ldr	r2, [r3, #0]
10009280:	7911      	ldrb	r1, [r2, #4]
10009282:	685b      	ldr	r3, [r3, #4]
10009284:	7818      	ldrb	r0, [r3, #0]
10009286:	466b      	mov	r3, sp
10009288:	3306      	adds	r3, #6
1000928a:	2201      	movs	r2, #1
1000928c:	4d06      	ldr	r5, [pc, #24]	; (100092a8 <mpu_set_sensors+0x1e0>)
1000928e:	47a8      	blx	r5
10009290:	2800      	cmp	r0, #0
10009292:	d0a2      	beq.n	100091da <mpu_set_sensors+0x112>
10009294:	e7e7      	b.n	10009266 <mpu_set_sensors+0x19e>

    st.chip_cfg.sensors = sensors;
    st.chip_cfg.lp_accel_mode = 0;
    delay_ms(50);
    return 0;
}
10009296:	0028      	movs	r0, r5
10009298:	b003      	add	sp, #12
1000929a:	bd30      	pop	{r4, r5, pc}
1000929c:	10018608 	.word	0x10018608
100092a0:	1000ab75 	.word	0x1000ab75
100092a4:	10008e39 	.word	0x10008e39
100092a8:	1000abd1 	.word	0x1000abd1
100092ac:	10008129 	.word	0x10008129

100092b0 <mpu_init>:
 *  Data ready interrupt: Disabled, active low, unlatched.
 *  @param[in]  int_param   Platform-specific parameters to interrupt API.
 *  @return     0 if successful.
 */
int mpu_init(struct int_param_s *int_param)
{
100092b0:	b530      	push	{r4, r5, lr}
100092b2:	b085      	sub	sp, #20
    unsigned char data[6];

    /* Reset device. */
    data[0] = BIT_RESET;
100092b4:	ab02      	add	r3, sp, #8
100092b6:	2280      	movs	r2, #128	; 0x80
100092b8:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
100092ba:	4ab9      	ldr	r2, [pc, #740]	; (100095a0 <mpu_init+0x2f0>)
100092bc:	6811      	ldr	r1, [r2, #0]
100092be:	7d49      	ldrb	r1, [r1, #21]
100092c0:	6852      	ldr	r2, [r2, #4]
100092c2:	7810      	ldrb	r0, [r2, #0]
100092c4:	2201      	movs	r2, #1
100092c6:	4cb7      	ldr	r4, [pc, #732]	; (100095a4 <mpu_init+0x2f4>)
100092c8:	47a0      	blx	r4
100092ca:	2800      	cmp	r0, #0
100092cc:	d000      	beq.n	100092d0 <mpu_init+0x20>
100092ce:	e149      	b.n	10009564 <mpu_init+0x2b4>
        return -1;
    delay_ms(100);
100092d0:	3064      	adds	r0, #100	; 0x64
100092d2:	4bb5      	ldr	r3, [pc, #724]	; (100095a8 <mpu_init+0x2f8>)
100092d4:	4798      	blx	r3

    /* Wake up chip. */
    data[0] = 0x00;
100092d6:	ab02      	add	r3, sp, #8
100092d8:	2200      	movs	r2, #0
100092da:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
100092dc:	4ab0      	ldr	r2, [pc, #704]	; (100095a0 <mpu_init+0x2f0>)
100092de:	6811      	ldr	r1, [r2, #0]
100092e0:	7d49      	ldrb	r1, [r1, #21]
100092e2:	6852      	ldr	r2, [r2, #4]
100092e4:	7810      	ldrb	r0, [r2, #0]
100092e6:	2201      	movs	r2, #1
100092e8:	4cae      	ldr	r4, [pc, #696]	; (100095a4 <mpu_init+0x2f4>)
100092ea:	47a0      	blx	r4
100092ec:	2800      	cmp	r0, #0
100092ee:	d000      	beq.n	100092f2 <mpu_init+0x42>
100092f0:	e13b      	b.n	1000956a <mpu_init+0x2ba>
        return -1;

   st.chip_cfg.accel_half = 0;
100092f2:	4aab      	ldr	r2, [pc, #684]	; (100095a0 <mpu_init+0x2f0>)
100092f4:	2300      	movs	r3, #0
100092f6:	74d3      	strb	r3, [r2, #19]

#ifdef MPU6500
    /* MPU6500 shares 4kB of memory between the DMP and the FIFO. Since the
     * first 3kB are needed by the DMP, we'll use the last 1kB for the FIFO.
     */
    data[0] = BIT_FIFO_SIZE_1024;
100092f8:	ab02      	add	r3, sp, #8
100092fa:	2140      	movs	r1, #64	; 0x40
100092fc:	7019      	strb	r1, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->accel_cfg2, 1, data))
100092fe:	6811      	ldr	r1, [r2, #0]
10009300:	7a09      	ldrb	r1, [r1, #8]
10009302:	6852      	ldr	r2, [r2, #4]
10009304:	7810      	ldrb	r0, [r2, #0]
10009306:	2201      	movs	r2, #1
10009308:	4ca6      	ldr	r4, [pc, #664]	; (100095a4 <mpu_init+0x2f4>)
1000930a:	47a0      	blx	r4
1000930c:	2800      	cmp	r0, #0
1000930e:	d000      	beq.n	10009312 <mpu_init+0x62>
10009310:	e12e      	b.n	10009570 <mpu_init+0x2c0>
        return -1;
#endif

    /* Set to invalid values to ensure no I2C writes are skipped. */
    st.chip_cfg.sensors = 0xFF;
10009312:	4ca3      	ldr	r4, [pc, #652]	; (100095a0 <mpu_init+0x2f0>)
10009314:	23ff      	movs	r3, #255	; 0xff
10009316:	72a3      	strb	r3, [r4, #10]
    st.chip_cfg.gyro_fsr = 0xFF;
10009318:	7223      	strb	r3, [r4, #8]
    st.chip_cfg.accel_fsr = 0xFF;
1000931a:	7263      	strb	r3, [r4, #9]
    st.chip_cfg.lpf = 0xFF;
1000931c:	72e3      	strb	r3, [r4, #11]
    st.chip_cfg.sample_rate = 0xFFFF;
1000931e:	2201      	movs	r2, #1
10009320:	4252      	negs	r2, r2
10009322:	81e2      	strh	r2, [r4, #14]
    st.chip_cfg.fifo_enable = 0xFF;
10009324:	7423      	strb	r3, [r4, #16]
    st.chip_cfg.bypass_mode = 0xFF;
10009326:	74a3      	strb	r3, [r4, #18]
#ifdef AK89xx_SECONDARY
    st.chip_cfg.compass_sample_rate = 0xFFFF;
10009328:	8522      	strh	r2, [r4, #40]	; 0x28
#endif
    /* mpu_set_sensors always preserves this setting. */
    st.chip_cfg.clk_src = INV_CLK_PLL;
1000932a:	3bfe      	subs	r3, #254	; 0xfe
1000932c:	7323      	strb	r3, [r4, #12]
    /* Handled in next call to mpu_set_bypass. */
    st.chip_cfg.active_low_int = 0; // --> interrupt active high!!
1000932e:	2500      	movs	r5, #0
10009330:	3321      	adds	r3, #33	; 0x21
10009332:	54e5      	strb	r5, [r4, r3]
    st.chip_cfg.latched_int = 0;
10009334:	3301      	adds	r3, #1
10009336:	54e5      	strb	r5, [r4, r3]
    st.chip_cfg.int_motion_only = 0;
10009338:	7565      	strb	r5, [r4, #21]
    st.chip_cfg.lp_accel_mode = 0;
1000933a:	7525      	strb	r5, [r4, #20]
    memset(&st.chip_cfg.cache, 0, sizeof(st.chip_cfg.cache));
1000933c:	0020      	movs	r0, r4
1000933e:	3016      	adds	r0, #22
10009340:	320d      	adds	r2, #13
10009342:	2100      	movs	r1, #0
10009344:	4b99      	ldr	r3, [pc, #612]	; (100095ac <mpu_init+0x2fc>)
10009346:	4798      	blx	r3
    st.chip_cfg.dmp_on = 0;
10009348:	2324      	movs	r3, #36	; 0x24
1000934a:	54e5      	strb	r5, [r4, r3]
    st.chip_cfg.dmp_loaded = 0;
1000934c:	3301      	adds	r3, #1
1000934e:	54e5      	strb	r5, [r4, r3]
    st.chip_cfg.dmp_sample_rate = 0;
10009350:	84e5      	strh	r5, [r4, #38]	; 0x26

    if (mpu_set_gyro_fsr(2000))
10009352:	20fa      	movs	r0, #250	; 0xfa
10009354:	00c0      	lsls	r0, r0, #3
10009356:	4b96      	ldr	r3, [pc, #600]	; (100095b0 <mpu_init+0x300>)
10009358:	4798      	blx	r3
1000935a:	2800      	cmp	r0, #0
1000935c:	d000      	beq.n	10009360 <mpu_init+0xb0>
1000935e:	e10a      	b.n	10009576 <mpu_init+0x2c6>
        return -1;
    if (mpu_set_accel_fsr(2))
10009360:	3002      	adds	r0, #2
10009362:	4b94      	ldr	r3, [pc, #592]	; (100095b4 <mpu_init+0x304>)
10009364:	4798      	blx	r3
10009366:	2800      	cmp	r0, #0
10009368:	d000      	beq.n	1000936c <mpu_init+0xbc>
1000936a:	e107      	b.n	1000957c <mpu_init+0x2cc>
        return -1;
    if (mpu_set_lpf(42))
1000936c:	302a      	adds	r0, #42	; 0x2a
1000936e:	4b92      	ldr	r3, [pc, #584]	; (100095b8 <mpu_init+0x308>)
10009370:	4798      	blx	r3
10009372:	2800      	cmp	r0, #0
10009374:	d000      	beq.n	10009378 <mpu_init+0xc8>
10009376:	e104      	b.n	10009582 <mpu_init+0x2d2>
        return -1;
    if (mpu_set_sample_rate(50))
10009378:	3032      	adds	r0, #50	; 0x32
1000937a:	4b90      	ldr	r3, [pc, #576]	; (100095bc <mpu_init+0x30c>)
1000937c:	4798      	blx	r3
1000937e:	2800      	cmp	r0, #0
10009380:	d000      	beq.n	10009384 <mpu_init+0xd4>
10009382:	e101      	b.n	10009588 <mpu_init+0x2d8>
        return -1;
    if (mpu_configure_fifo(0))
10009384:	4b8e      	ldr	r3, [pc, #568]	; (100095c0 <mpu_init+0x310>)
10009386:	4798      	blx	r3
10009388:	2800      	cmp	r0, #0
1000938a:	d000      	beq.n	1000938e <mpu_init+0xde>
1000938c:	e0ff      	b.n	1000958e <mpu_init+0x2de>
/* This initialization is similar to the one in ak8975.c. */
static int setup_compass(void)
{
    unsigned char data[4], akm_addr;

    mpu_set_bypass(1);
1000938e:	3001      	adds	r0, #1
10009390:	4b8c      	ldr	r3, [pc, #560]	; (100095c4 <mpu_init+0x314>)
10009392:	4798      	blx	r3

    /* Find compass. Possible addresses range from 0x0C to 0x0F. */
    for (akm_addr = 0x0C; akm_addr <= 0x0F; akm_addr++) {
10009394:	240c      	movs	r4, #12
        int result;
        result = i2c_read(akm_addr, AKM_REG_WHOAMI, 1, data);
10009396:	4d8c      	ldr	r5, [pc, #560]	; (100095c8 <mpu_init+0x318>)
10009398:	ab01      	add	r3, sp, #4
1000939a:	2201      	movs	r2, #1
1000939c:	2100      	movs	r1, #0
1000939e:	0020      	movs	r0, r4
100093a0:	47a8      	blx	r5
        if (!result && (data[0] == AKM_WHOAMI))
100093a2:	2800      	cmp	r0, #0
100093a4:	d103      	bne.n	100093ae <mpu_init+0xfe>
100093a6:	466b      	mov	r3, sp
100093a8:	791b      	ldrb	r3, [r3, #4]
100093aa:	2b48      	cmp	r3, #72	; 0x48
100093ac:	d004      	beq.n	100093b8 <mpu_init+0x108>
    unsigned char data[4], akm_addr;

    mpu_set_bypass(1);

    /* Find compass. Possible addresses range from 0x0C to 0x0F. */
    for (akm_addr = 0x0C; akm_addr <= 0x0F; akm_addr++) {
100093ae:	3401      	adds	r4, #1
100093b0:	b2e4      	uxtb	r4, r4
100093b2:	2c10      	cmp	r4, #16
100093b4:	d1f0      	bne.n	10009398 <mpu_init+0xe8>
100093b6:	e001      	b.n	100093bc <mpu_init+0x10c>
        result = i2c_read(akm_addr, AKM_REG_WHOAMI, 1, data);
        if (!result && (data[0] == AKM_WHOAMI))
            break;
    }

    if (akm_addr > 0x0F) {
100093b8:	2c0f      	cmp	r4, #15
100093ba:	d905      	bls.n	100093c8 <mpu_init+0x118>
        /* TODO: Handle this case in all compass-related functions. */
        log_e("Compass not found.\n");
100093bc:	4883      	ldr	r0, [pc, #524]	; (100095cc <mpu_init+0x31c>)
100093be:	4c84      	ldr	r4, [pc, #528]	; (100095d0 <mpu_init+0x320>)
100093c0:	47a0      	blx	r4
100093c2:	4884      	ldr	r0, [pc, #528]	; (100095d4 <mpu_init+0x324>)
100093c4:	47a0      	blx	r4
100093c6:	e0c4      	b.n	10009552 <mpu_init+0x2a2>
        return -1;
    }

    st.chip_cfg.compass_addr = akm_addr;
100093c8:	232a      	movs	r3, #42	; 0x2a
100093ca:	4a75      	ldr	r2, [pc, #468]	; (100095a0 <mpu_init+0x2f0>)
100093cc:	54d4      	strb	r4, [r2, r3]

    data[0] = AKM_POWER_DOWN;
100093ce:	ab01      	add	r3, sp, #4
100093d0:	2210      	movs	r2, #16
100093d2:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
100093d4:	3a0f      	subs	r2, #15
100093d6:	210a      	movs	r1, #10
100093d8:	0020      	movs	r0, r4
100093da:	4c72      	ldr	r4, [pc, #456]	; (100095a4 <mpu_init+0x2f4>)
100093dc:	47a0      	blx	r4
100093de:	2800      	cmp	r0, #0
100093e0:	d000      	beq.n	100093e4 <mpu_init+0x134>
100093e2:	e0b6      	b.n	10009552 <mpu_init+0x2a2>
        return -1;
    delay_ms(1);
100093e4:	3001      	adds	r0, #1
100093e6:	4b70      	ldr	r3, [pc, #448]	; (100095a8 <mpu_init+0x2f8>)
100093e8:	4798      	blx	r3

    data[0] = AKM_FUSE_ROM_ACCESS;
100093ea:	ab01      	add	r3, sp, #4
100093ec:	221f      	movs	r2, #31
100093ee:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
100093f0:	320b      	adds	r2, #11
100093f2:	496b      	ldr	r1, [pc, #428]	; (100095a0 <mpu_init+0x2f0>)
100093f4:	5c88      	ldrb	r0, [r1, r2]
100093f6:	3a29      	subs	r2, #41	; 0x29
100093f8:	210a      	movs	r1, #10
100093fa:	4c6a      	ldr	r4, [pc, #424]	; (100095a4 <mpu_init+0x2f4>)
100093fc:	47a0      	blx	r4
100093fe:	2800      	cmp	r0, #0
10009400:	d000      	beq.n	10009404 <mpu_init+0x154>
10009402:	e0a6      	b.n	10009552 <mpu_init+0x2a2>
        return -1;
    delay_ms(1);
10009404:	3001      	adds	r0, #1
10009406:	4b68      	ldr	r3, [pc, #416]	; (100095a8 <mpu_init+0x2f8>)
10009408:	4798      	blx	r3

    /* Get sensitivity adjustment data from fuse ROM. */
    if (i2c_read(st.chip_cfg.compass_addr, AKM_REG_ASAX, 3, data))
1000940a:	232a      	movs	r3, #42	; 0x2a
1000940c:	4a64      	ldr	r2, [pc, #400]	; (100095a0 <mpu_init+0x2f0>)
1000940e:	5cd0      	ldrb	r0, [r2, r3]
10009410:	ab01      	add	r3, sp, #4
10009412:	2203      	movs	r2, #3
10009414:	2110      	movs	r1, #16
10009416:	4c6c      	ldr	r4, [pc, #432]	; (100095c8 <mpu_init+0x318>)
10009418:	47a0      	blx	r4
1000941a:	2800      	cmp	r0, #0
1000941c:	d000      	beq.n	10009420 <mpu_init+0x170>
1000941e:	e098      	b.n	10009552 <mpu_init+0x2a2>
        return -1;
    st.chip_cfg.mag_sens_adj[0] = (long)data[0] + 128;
10009420:	4a5f      	ldr	r2, [pc, #380]	; (100095a0 <mpu_init+0x2f0>)
10009422:	ab01      	add	r3, sp, #4
10009424:	7819      	ldrb	r1, [r3, #0]
10009426:	3180      	adds	r1, #128	; 0x80
10009428:	8591      	strh	r1, [r2, #44]	; 0x2c
    st.chip_cfg.mag_sens_adj[1] = (long)data[1] + 128;
1000942a:	7859      	ldrb	r1, [r3, #1]
1000942c:	3180      	adds	r1, #128	; 0x80
1000942e:	85d1      	strh	r1, [r2, #46]	; 0x2e
    st.chip_cfg.mag_sens_adj[2] = (long)data[2] + 128;
10009430:	7899      	ldrb	r1, [r3, #2]
10009432:	3180      	adds	r1, #128	; 0x80
10009434:	8611      	strh	r1, [r2, #48]	; 0x30

    data[0] = AKM_POWER_DOWN;
10009436:	2110      	movs	r1, #16
10009438:	7019      	strb	r1, [r3, #0]
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
1000943a:	311a      	adds	r1, #26
1000943c:	5c50      	ldrb	r0, [r2, r1]
1000943e:	2201      	movs	r2, #1
10009440:	3920      	subs	r1, #32
10009442:	4c58      	ldr	r4, [pc, #352]	; (100095a4 <mpu_init+0x2f4>)
10009444:	47a0      	blx	r4
10009446:	2800      	cmp	r0, #0
10009448:	d000      	beq.n	1000944c <mpu_init+0x19c>
1000944a:	e082      	b.n	10009552 <mpu_init+0x2a2>
        return -1;
    delay_ms(1);
1000944c:	3001      	adds	r0, #1
1000944e:	4b56      	ldr	r3, [pc, #344]	; (100095a8 <mpu_init+0x2f8>)
10009450:	4798      	blx	r3

    mpu_set_bypass(0);
10009452:	2000      	movs	r0, #0
10009454:	4b5b      	ldr	r3, [pc, #364]	; (100095c4 <mpu_init+0x314>)
10009456:	4798      	blx	r3

    /* Set up master mode, master clock, and ES bit. */
    data[0] = 0x40;
10009458:	ab01      	add	r3, sp, #4
1000945a:	2240      	movs	r2, #64	; 0x40
1000945c:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->i2c_mst, 1, data))
1000945e:	4a50      	ldr	r2, [pc, #320]	; (100095a0 <mpu_init+0x2f0>)
10009460:	6811      	ldr	r1, [r2, #0]
10009462:	7e89      	ldrb	r1, [r1, #26]
10009464:	6852      	ldr	r2, [r2, #4]
10009466:	7810      	ldrb	r0, [r2, #0]
10009468:	2201      	movs	r2, #1
1000946a:	4c4e      	ldr	r4, [pc, #312]	; (100095a4 <mpu_init+0x2f4>)
1000946c:	47a0      	blx	r4
1000946e:	2800      	cmp	r0, #0
10009470:	d16f      	bne.n	10009552 <mpu_init+0x2a2>
        return -1;

    /* Slave 0 reads from AKM data registers. */
    data[0] = BIT_I2C_READ | st.chip_cfg.compass_addr;
10009472:	ab01      	add	r3, sp, #4
10009474:	4a4a      	ldr	r2, [pc, #296]	; (100095a0 <mpu_init+0x2f0>)
10009476:	212a      	movs	r1, #42	; 0x2a
10009478:	5c51      	ldrb	r1, [r2, r1]
1000947a:	3880      	subs	r0, #128	; 0x80
1000947c:	4301      	orrs	r1, r0
1000947e:	7019      	strb	r1, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->s0_addr, 1, data))
10009480:	6811      	ldr	r1, [r2, #0]
10009482:	7f89      	ldrb	r1, [r1, #30]
10009484:	6852      	ldr	r2, [r2, #4]
10009486:	7810      	ldrb	r0, [r2, #0]
10009488:	2201      	movs	r2, #1
1000948a:	4c46      	ldr	r4, [pc, #280]	; (100095a4 <mpu_init+0x2f4>)
1000948c:	47a0      	blx	r4
1000948e:	2800      	cmp	r0, #0
10009490:	d15f      	bne.n	10009552 <mpu_init+0x2a2>
        return -1;

    /* Compass reads start at this register. */
    data[0] = AKM_REG_ST1;
10009492:	ab01      	add	r3, sp, #4
10009494:	2202      	movs	r2, #2
10009496:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->s0_reg, 1, data))
10009498:	4a41      	ldr	r2, [pc, #260]	; (100095a0 <mpu_init+0x2f0>)
1000949a:	6811      	ldr	r1, [r2, #0]
1000949c:	7fc9      	ldrb	r1, [r1, #31]
1000949e:	6852      	ldr	r2, [r2, #4]
100094a0:	7810      	ldrb	r0, [r2, #0]
100094a2:	2201      	movs	r2, #1
100094a4:	4c3f      	ldr	r4, [pc, #252]	; (100095a4 <mpu_init+0x2f4>)
100094a6:	47a0      	blx	r4
100094a8:	2800      	cmp	r0, #0
100094aa:	d152      	bne.n	10009552 <mpu_init+0x2a2>
        return -1;

    /* Enable slave 0, 8-byte reads. */
    data[0] = BIT_SLAVE_EN | 8;
100094ac:	ab01      	add	r3, sp, #4
100094ae:	2288      	movs	r2, #136	; 0x88
100094b0:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->s0_ctrl, 1, data))
100094b2:	4a3b      	ldr	r2, [pc, #236]	; (100095a0 <mpu_init+0x2f0>)
100094b4:	2120      	movs	r1, #32
100094b6:	6810      	ldr	r0, [r2, #0]
100094b8:	5c41      	ldrb	r1, [r0, r1]
100094ba:	6852      	ldr	r2, [r2, #4]
100094bc:	7810      	ldrb	r0, [r2, #0]
100094be:	2201      	movs	r2, #1
100094c0:	4c38      	ldr	r4, [pc, #224]	; (100095a4 <mpu_init+0x2f4>)
100094c2:	47a0      	blx	r4
100094c4:	2800      	cmp	r0, #0
100094c6:	d144      	bne.n	10009552 <mpu_init+0x2a2>
        return -1;

    /* Slave 1 changes AKM measurement mode. */
    data[0] = st.chip_cfg.compass_addr;
100094c8:	ab01      	add	r3, sp, #4
100094ca:	4a35      	ldr	r2, [pc, #212]	; (100095a0 <mpu_init+0x2f0>)
100094cc:	212a      	movs	r1, #42	; 0x2a
100094ce:	5c51      	ldrb	r1, [r2, r1]
100094d0:	7019      	strb	r1, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->s1_addr, 1, data))
100094d2:	2121      	movs	r1, #33	; 0x21
100094d4:	6810      	ldr	r0, [r2, #0]
100094d6:	5c41      	ldrb	r1, [r0, r1]
100094d8:	6852      	ldr	r2, [r2, #4]
100094da:	7810      	ldrb	r0, [r2, #0]
100094dc:	2201      	movs	r2, #1
100094de:	4c31      	ldr	r4, [pc, #196]	; (100095a4 <mpu_init+0x2f4>)
100094e0:	47a0      	blx	r4
100094e2:	2800      	cmp	r0, #0
100094e4:	d135      	bne.n	10009552 <mpu_init+0x2a2>
        return -1;

    /* AKM measurement mode register. */
    data[0] = AKM_REG_CNTL;
100094e6:	ab01      	add	r3, sp, #4
100094e8:	220a      	movs	r2, #10
100094ea:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->s1_reg, 1, data))
100094ec:	4a2c      	ldr	r2, [pc, #176]	; (100095a0 <mpu_init+0x2f0>)
100094ee:	2122      	movs	r1, #34	; 0x22
100094f0:	6810      	ldr	r0, [r2, #0]
100094f2:	5c41      	ldrb	r1, [r0, r1]
100094f4:	6852      	ldr	r2, [r2, #4]
100094f6:	7810      	ldrb	r0, [r2, #0]
100094f8:	2201      	movs	r2, #1
100094fa:	4c2a      	ldr	r4, [pc, #168]	; (100095a4 <mpu_init+0x2f4>)
100094fc:	47a0      	blx	r4
100094fe:	2800      	cmp	r0, #0
10009500:	d127      	bne.n	10009552 <mpu_init+0x2a2>
        return -1;

    /* Enable slave 1, 1-byte writes. */
    data[0] = BIT_SLAVE_EN | 1;
10009502:	ab01      	add	r3, sp, #4
10009504:	2281      	movs	r2, #129	; 0x81
10009506:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->s1_ctrl, 1, data))
10009508:	4a25      	ldr	r2, [pc, #148]	; (100095a0 <mpu_init+0x2f0>)
1000950a:	2123      	movs	r1, #35	; 0x23
1000950c:	6810      	ldr	r0, [r2, #0]
1000950e:	5c41      	ldrb	r1, [r0, r1]
10009510:	6852      	ldr	r2, [r2, #4]
10009512:	7810      	ldrb	r0, [r2, #0]
10009514:	2201      	movs	r2, #1
10009516:	4c23      	ldr	r4, [pc, #140]	; (100095a4 <mpu_init+0x2f4>)
10009518:	47a0      	blx	r4
1000951a:	2800      	cmp	r0, #0
1000951c:	d119      	bne.n	10009552 <mpu_init+0x2a2>
        return -1;

    /* Set slave 1 data. */
    data[0] = AKM_SINGLE_MEASUREMENT;
1000951e:	ab01      	add	r3, sp, #4
10009520:	2211      	movs	r2, #17
10009522:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->s1_do, 1, data))
10009524:	4a1e      	ldr	r2, [pc, #120]	; (100095a0 <mpu_init+0x2f0>)
10009526:	2126      	movs	r1, #38	; 0x26
10009528:	6810      	ldr	r0, [r2, #0]
1000952a:	5c41      	ldrb	r1, [r0, r1]
1000952c:	6852      	ldr	r2, [r2, #4]
1000952e:	7810      	ldrb	r0, [r2, #0]
10009530:	2201      	movs	r2, #1
10009532:	4c1c      	ldr	r4, [pc, #112]	; (100095a4 <mpu_init+0x2f4>)
10009534:	47a0      	blx	r4
10009536:	2800      	cmp	r0, #0
10009538:	d10b      	bne.n	10009552 <mpu_init+0x2a2>
        return -1;

    /* Trigger slave 0 and slave 1 actions at each sample. */
    data[0] = 0x03;
1000953a:	ab01      	add	r3, sp, #4
1000953c:	2203      	movs	r2, #3
1000953e:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->i2c_delay_ctrl, 1, data))
10009540:	4a17      	ldr	r2, [pc, #92]	; (100095a0 <mpu_init+0x2f0>)
10009542:	2127      	movs	r1, #39	; 0x27
10009544:	6810      	ldr	r0, [r2, #0]
10009546:	5c41      	ldrb	r1, [r0, r1]
10009548:	6852      	ldr	r2, [r2, #4]
1000954a:	7810      	ldrb	r0, [r2, #0]
1000954c:	2201      	movs	r2, #1
1000954e:	4c15      	ldr	r4, [pc, #84]	; (100095a4 <mpu_init+0x2f4>)
10009550:	47a0      	blx	r4
    //if (int_param)
        //reg_int_cb(int_param);

#ifdef AK89xx_SECONDARY
    setup_compass();
    if (mpu_set_compass_sample_rate(10))
10009552:	200a      	movs	r0, #10
10009554:	4b20      	ldr	r3, [pc, #128]	; (100095d8 <mpu_init+0x328>)
10009556:	4798      	blx	r3
10009558:	1e04      	subs	r4, r0, #0
1000955a:	d11b      	bne.n	10009594 <mpu_init+0x2e4>
    /* Already disabled by setup_compass. */
    if (mpu_set_bypass(0))
        return -1;
#endif

    mpu_set_sensors(0);
1000955c:	2000      	movs	r0, #0
1000955e:	4b1f      	ldr	r3, [pc, #124]	; (100095dc <mpu_init+0x32c>)
10009560:	4798      	blx	r3
    return 0;
10009562:	e019      	b.n	10009598 <mpu_init+0x2e8>
    unsigned char data[6];

    /* Reset device. */
    data[0] = BIT_RESET;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
        return -1;
10009564:	2401      	movs	r4, #1
10009566:	4264      	negs	r4, r4
10009568:	e016      	b.n	10009598 <mpu_init+0x2e8>
    delay_ms(100);

    /* Wake up chip. */
    data[0] = 0x00;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
        return -1;
1000956a:	2401      	movs	r4, #1
1000956c:	4264      	negs	r4, r4
1000956e:	e013      	b.n	10009598 <mpu_init+0x2e8>
    /* MPU6500 shares 4kB of memory between the DMP and the FIFO. Since the
     * first 3kB are needed by the DMP, we'll use the last 1kB for the FIFO.
     */
    data[0] = BIT_FIFO_SIZE_1024;
    if (i2c_write(st.hw->addr, st.reg->accel_cfg2, 1, data))
        return -1;
10009570:	2401      	movs	r4, #1
10009572:	4264      	negs	r4, r4
10009574:	e010      	b.n	10009598 <mpu_init+0x2e8>
    st.chip_cfg.dmp_on = 0;
    st.chip_cfg.dmp_loaded = 0;
    st.chip_cfg.dmp_sample_rate = 0;

    if (mpu_set_gyro_fsr(2000))
        return -1;
10009576:	2401      	movs	r4, #1
10009578:	4264      	negs	r4, r4
1000957a:	e00d      	b.n	10009598 <mpu_init+0x2e8>
    if (mpu_set_accel_fsr(2))
        return -1;
1000957c:	2401      	movs	r4, #1
1000957e:	4264      	negs	r4, r4
10009580:	e00a      	b.n	10009598 <mpu_init+0x2e8>
    if (mpu_set_lpf(42))
        return -1;
10009582:	2401      	movs	r4, #1
10009584:	4264      	negs	r4, r4
10009586:	e007      	b.n	10009598 <mpu_init+0x2e8>
    if (mpu_set_sample_rate(50))
        return -1;
10009588:	2401      	movs	r4, #1
1000958a:	4264      	negs	r4, r4
1000958c:	e004      	b.n	10009598 <mpu_init+0x2e8>
    if (mpu_configure_fifo(0))
        return -1;
1000958e:	2401      	movs	r4, #1
10009590:	4264      	negs	r4, r4
10009592:	e001      	b.n	10009598 <mpu_init+0x2e8>
        //reg_int_cb(int_param);

#ifdef AK89xx_SECONDARY
    setup_compass();
    if (mpu_set_compass_sample_rate(10))
        return -1;
10009594:	2401      	movs	r4, #1
10009596:	4264      	negs	r4, r4
        return -1;
#endif

    mpu_set_sensors(0);
    return 0;
}
10009598:	0020      	movs	r0, r4
1000959a:	b005      	add	sp, #20
1000959c:	bd30      	pop	{r4, r5, pc}
1000959e:	46c0      	nop			; (mov r8, r8)
100095a0:	10018608 	.word	0x10018608
100095a4:	1000ab75 	.word	0x1000ab75
100095a8:	10008129 	.word	0x10008129
100095ac:	1001522d 	.word	0x1001522d
100095b0:	100087b5 	.word	0x100087b5
100095b4:	100088a1 	.word	0x100088a1
100095b8:	10008935 	.word	0x10008935
100095bc:	10008ff5 	.word	0x10008ff5
100095c0:	10008a85 	.word	0x10008a85
100095c4:	10008cbd 	.word	0x10008cbd
100095c8:	1000abd1 	.word	0x1000abd1
100095cc:	1001663c 	.word	0x1001663c
100095d0:	10015495 	.word	0x10015495
100095d4:	100164ac 	.word	0x100164ac
100095d8:	10008a0d 	.word	0x10008a0d
100095dc:	100090c9 	.word	0x100090c9

100095e0 <mpu_write_mem>:
 *  @param[in]  data        Bytes to write to memory.
 *  @return     0 if successful.
 */
int mpu_write_mem(unsigned short mem_addr, unsigned short length,
        unsigned char *data)
{
100095e0:	b570      	push	{r4, r5, r6, lr}
100095e2:	b082      	sub	sp, #8
100095e4:	000c      	movs	r4, r1
100095e6:	1e15      	subs	r5, r2, #0
    unsigned char tmp[2];

    if (!data)
100095e8:	d025      	beq.n	10009636 <mpu_write_mem+0x56>
        return -1;
    if (!st.chip_cfg.sensors)
100095ea:	4b19      	ldr	r3, [pc, #100]	; (10009650 <mpu_write_mem+0x70>)
100095ec:	7a9b      	ldrb	r3, [r3, #10]
100095ee:	2b00      	cmp	r3, #0
100095f0:	d024      	beq.n	1000963c <mpu_write_mem+0x5c>
        return -1;

    tmp[0] = (unsigned char)(mem_addr >> 8);
100095f2:	ab01      	add	r3, sp, #4
100095f4:	0a02      	lsrs	r2, r0, #8
100095f6:	701a      	strb	r2, [r3, #0]
    tmp[1] = (unsigned char)(mem_addr & 0xFF);
100095f8:	b2c0      	uxtb	r0, r0
100095fa:	7058      	strb	r0, [r3, #1]

    /* Check bank boundaries. */
    if (tmp[1] + length > st.hw->bank_size)
100095fc:	4b14      	ldr	r3, [pc, #80]	; (10009650 <mpu_write_mem+0x70>)
100095fe:	685b      	ldr	r3, [r3, #4]
10009600:	1840      	adds	r0, r0, r1
10009602:	895a      	ldrh	r2, [r3, #10]
10009604:	4290      	cmp	r0, r2
10009606:	dc1c      	bgt.n	10009642 <mpu_write_mem+0x62>
        return -1;

    if (i2c_write(st.hw->addr, st.reg->bank_sel, 2, tmp))
10009608:	4a11      	ldr	r2, [pc, #68]	; (10009650 <mpu_write_mem+0x70>)
1000960a:	6812      	ldr	r2, [r2, #0]
1000960c:	7ed1      	ldrb	r1, [r2, #27]
1000960e:	7818      	ldrb	r0, [r3, #0]
10009610:	ab01      	add	r3, sp, #4
10009612:	2202      	movs	r2, #2
10009614:	4e0f      	ldr	r6, [pc, #60]	; (10009654 <mpu_write_mem+0x74>)
10009616:	47b0      	blx	r6
10009618:	2800      	cmp	r0, #0
1000961a:	d115      	bne.n	10009648 <mpu_write_mem+0x68>
        return -1;
    if (i2c_write(st.hw->addr, st.reg->mem_r_w, length, data))
1000961c:	b2e2      	uxtb	r2, r4
1000961e:	4b0c      	ldr	r3, [pc, #48]	; (10009650 <mpu_write_mem+0x70>)
10009620:	6819      	ldr	r1, [r3, #0]
10009622:	7e09      	ldrb	r1, [r1, #24]
10009624:	685b      	ldr	r3, [r3, #4]
10009626:	7818      	ldrb	r0, [r3, #0]
10009628:	002b      	movs	r3, r5
1000962a:	4c0a      	ldr	r4, [pc, #40]	; (10009654 <mpu_write_mem+0x74>)
1000962c:	47a0      	blx	r4
1000962e:	1e43      	subs	r3, r0, #1
10009630:	4198      	sbcs	r0, r3
10009632:	4240      	negs	r0, r0
10009634:	e00a      	b.n	1000964c <mpu_write_mem+0x6c>
        unsigned char *data)
{
    unsigned char tmp[2];

    if (!data)
        return -1;
10009636:	2001      	movs	r0, #1
10009638:	4240      	negs	r0, r0
1000963a:	e007      	b.n	1000964c <mpu_write_mem+0x6c>
    if (!st.chip_cfg.sensors)
        return -1;
1000963c:	2001      	movs	r0, #1
1000963e:	4240      	negs	r0, r0
10009640:	e004      	b.n	1000964c <mpu_write_mem+0x6c>
    tmp[0] = (unsigned char)(mem_addr >> 8);
    tmp[1] = (unsigned char)(mem_addr & 0xFF);

    /* Check bank boundaries. */
    if (tmp[1] + length > st.hw->bank_size)
        return -1;
10009642:	2001      	movs	r0, #1
10009644:	4240      	negs	r0, r0
10009646:	e001      	b.n	1000964c <mpu_write_mem+0x6c>

    if (i2c_write(st.hw->addr, st.reg->bank_sel, 2, tmp))
        return -1;
10009648:	2001      	movs	r0, #1
1000964a:	4240      	negs	r0, r0
    if (i2c_write(st.hw->addr, st.reg->mem_r_w, length, data))
        return -1;
    return 0;
}
1000964c:	b002      	add	sp, #8
1000964e:	bd70      	pop	{r4, r5, r6, pc}
10009650:	10018608 	.word	0x10018608
10009654:	1000ab75 	.word	0x1000ab75

10009658 <mpu_set_dmp_state>:
 *  @brief      Enable/disable DMP support.
 *  @param[in]  enable  1 to turn on the DMP.
 *  @return     0 if successful.
 */
int mpu_set_dmp_state(unsigned char enable)
{
10009658:	b570      	push	{r4, r5, r6, lr}
1000965a:	b082      	sub	sp, #8
    unsigned char tmp;
    if (st.chip_cfg.dmp_on == enable)
1000965c:	2324      	movs	r3, #36	; 0x24
1000965e:	4a21      	ldr	r2, [pc, #132]	; (100096e4 <mpu_set_dmp_state+0x8c>)
10009660:	5cd3      	ldrb	r3, [r2, r3]
10009662:	4283      	cmp	r3, r0
10009664:	d037      	beq.n	100096d6 <mpu_set_dmp_state+0x7e>
        return 0;

    if (enable) {
10009666:	2800      	cmp	r0, #0
10009668:	d020      	beq.n	100096ac <mpu_set_dmp_state+0x54>
        if (!st.chip_cfg.dmp_loaded)
1000966a:	2325      	movs	r3, #37	; 0x25
1000966c:	5cd3      	ldrb	r3, [r2, r3]
1000966e:	2b00      	cmp	r3, #0
10009670:	d033      	beq.n	100096da <mpu_set_dmp_state+0x82>
            return -1;
        /* Disable data ready interrupt. */
        set_int_enable(0);
10009672:	2000      	movs	r0, #0
10009674:	4d1c      	ldr	r5, [pc, #112]	; (100096e8 <mpu_set_dmp_state+0x90>)
10009676:	47a8      	blx	r5
        /* Disable bypass mode. */
        mpu_set_bypass(0);
10009678:	2000      	movs	r0, #0
1000967a:	4b1c      	ldr	r3, [pc, #112]	; (100096ec <mpu_set_dmp_state+0x94>)
1000967c:	4798      	blx	r3
        /* Keep constant sample rate, FIFO rate controlled by DMP. */
        mpu_set_sample_rate(st.chip_cfg.dmp_sample_rate);
1000967e:	4c19      	ldr	r4, [pc, #100]	; (100096e4 <mpu_set_dmp_state+0x8c>)
10009680:	8ce0      	ldrh	r0, [r4, #38]	; 0x26
10009682:	4b1b      	ldr	r3, [pc, #108]	; (100096f0 <mpu_set_dmp_state+0x98>)
10009684:	4798      	blx	r3
        /* Remove FIFO elements. */
        tmp = 0;
10009686:	466b      	mov	r3, sp
10009688:	3307      	adds	r3, #7
1000968a:	2200      	movs	r2, #0
1000968c:	701a      	strb	r2, [r3, #0]
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
1000968e:	6862      	ldr	r2, [r4, #4]
10009690:	7810      	ldrb	r0, [r2, #0]
10009692:	2201      	movs	r2, #1
10009694:	2123      	movs	r1, #35	; 0x23
10009696:	4e17      	ldr	r6, [pc, #92]	; (100096f4 <mpu_set_dmp_state+0x9c>)
10009698:	47b0      	blx	r6
        st.chip_cfg.dmp_on = 1;
1000969a:	2201      	movs	r2, #1
1000969c:	2324      	movs	r3, #36	; 0x24
1000969e:	54e2      	strb	r2, [r4, r3]
        /* Enable DMP interrupt. */
        set_int_enable(1);
100096a0:	2001      	movs	r0, #1
100096a2:	47a8      	blx	r5
        mpu_reset_fifo();
100096a4:	4b14      	ldr	r3, [pc, #80]	; (100096f8 <mpu_set_dmp_state+0xa0>)
100096a6:	4798      	blx	r3
        tmp = st.chip_cfg.fifo_enable;
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
        st.chip_cfg.dmp_on = 0;
        mpu_reset_fifo();
    }
    return 0;
100096a8:	2000      	movs	r0, #0
100096aa:	e018      	b.n	100096de <mpu_set_dmp_state+0x86>
        /* Enable DMP interrupt. */
        set_int_enable(1);
        mpu_reset_fifo();
    } else {
        /* Disable DMP interrupt. */
        set_int_enable(0);
100096ac:	2000      	movs	r0, #0
100096ae:	4b0e      	ldr	r3, [pc, #56]	; (100096e8 <mpu_set_dmp_state+0x90>)
100096b0:	4798      	blx	r3
        /* Restore FIFO settings. */
        tmp = st.chip_cfg.fifo_enable;
100096b2:	466b      	mov	r3, sp
100096b4:	3307      	adds	r3, #7
100096b6:	4c0b      	ldr	r4, [pc, #44]	; (100096e4 <mpu_set_dmp_state+0x8c>)
100096b8:	7c22      	ldrb	r2, [r4, #16]
100096ba:	701a      	strb	r2, [r3, #0]
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
100096bc:	6862      	ldr	r2, [r4, #4]
100096be:	7810      	ldrb	r0, [r2, #0]
100096c0:	2201      	movs	r2, #1
100096c2:	2123      	movs	r1, #35	; 0x23
100096c4:	4d0b      	ldr	r5, [pc, #44]	; (100096f4 <mpu_set_dmp_state+0x9c>)
100096c6:	47a8      	blx	r5
        st.chip_cfg.dmp_on = 0;
100096c8:	2200      	movs	r2, #0
100096ca:	2324      	movs	r3, #36	; 0x24
100096cc:	54e2      	strb	r2, [r4, r3]
        mpu_reset_fifo();
100096ce:	4b0a      	ldr	r3, [pc, #40]	; (100096f8 <mpu_set_dmp_state+0xa0>)
100096d0:	4798      	blx	r3
    }
    return 0;
100096d2:	2000      	movs	r0, #0
100096d4:	e003      	b.n	100096de <mpu_set_dmp_state+0x86>
 */
int mpu_set_dmp_state(unsigned char enable)
{
    unsigned char tmp;
    if (st.chip_cfg.dmp_on == enable)
        return 0;
100096d6:	2000      	movs	r0, #0
100096d8:	e001      	b.n	100096de <mpu_set_dmp_state+0x86>

    if (enable) {
        if (!st.chip_cfg.dmp_loaded)
            return -1;
100096da:	2001      	movs	r0, #1
100096dc:	4240      	negs	r0, r0
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
        st.chip_cfg.dmp_on = 0;
        mpu_reset_fifo();
    }
    return 0;
}
100096de:	b002      	add	sp, #8
100096e0:	bd70      	pop	{r4, r5, r6, pc}
100096e2:	46c0      	nop			; (mov r8, r8)
100096e4:	10018608 	.word	0x10018608
100096e8:	10008461 	.word	0x10008461
100096ec:	10008cbd 	.word	0x10008cbd
100096f0:	10008ff5 	.word	0x10008ff5
100096f4:	1000ab75 	.word	0x1000ab75
100096f8:	100085bd 	.word	0x100085bd

100096fc <mpu_get_compass_reg>:
 *  @param[out] data        Raw data in hardware units.
 *  @param[out] timestamp   Timestamp in milliseconds. Null if not needed.
 *  @return     0 if successful.
 */
int mpu_get_compass_reg(short *data, unsigned long *timestamp)
{
100096fc:	b5f0      	push	{r4, r5, r6, r7, lr}
100096fe:	b085      	sub	sp, #20
10009700:	0006      	movs	r6, r0
10009702:	000d      	movs	r5, r1
#ifdef AK89xx_SECONDARY
    unsigned char tmp[9];

    if (!(st.chip_cfg.sensors & INV_XYZ_COMPASS))
10009704:	4b29      	ldr	r3, [pc, #164]	; (100097ac <mpu_get_compass_reg+0xb0>)
10009706:	7a9b      	ldrb	r3, [r3, #10]
10009708:	07db      	lsls	r3, r3, #31
1000970a:	d540      	bpl.n	1000978e <mpu_get_compass_reg+0x92>
        return -1;
    tmp[8] = AKM_SINGLE_MEASUREMENT;
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, tmp+8))
        return -1;
#else
    if (i2c_read(st.hw->addr, st.reg->raw_compass, 8, tmp))
1000970c:	4b27      	ldr	r3, [pc, #156]	; (100097ac <mpu_get_compass_reg+0xb0>)
1000970e:	2228      	movs	r2, #40	; 0x28
10009710:	6819      	ldr	r1, [r3, #0]
10009712:	5c89      	ldrb	r1, [r1, r2]
10009714:	685b      	ldr	r3, [r3, #4]
10009716:	7818      	ldrb	r0, [r3, #0]
10009718:	ab01      	add	r3, sp, #4
1000971a:	3a20      	subs	r2, #32
1000971c:	4c24      	ldr	r4, [pc, #144]	; (100097b0 <mpu_get_compass_reg+0xb4>)
1000971e:	47a0      	blx	r4
10009720:	1e04      	subs	r4, r0, #0
10009722:	d137      	bne.n	10009794 <mpu_get_compass_reg+0x98>
        return -2;
    if ((tmp[7] & AKM_OVERFLOW) || (tmp[7] & AKM_DATA_ERROR))
        return -3;
#elif defined AK8963_SECONDARY
    /* AK8963 doesn't have the data read error bit. */
    if (!(tmp[0] & AKM_DATA_READY) || (tmp[0] & AKM_DATA_OVERRUN))
10009724:	ab01      	add	r3, sp, #4
10009726:	781b      	ldrb	r3, [r3, #0]
10009728:	2203      	movs	r2, #3
1000972a:	4013      	ands	r3, r2
1000972c:	2b01      	cmp	r3, #1
1000972e:	d134      	bne.n	1000979a <mpu_get_compass_reg+0x9e>
        return -2;
    if (tmp[7] & AKM_OVERFLOW)
10009730:	ab01      	add	r3, sp, #4
10009732:	79db      	ldrb	r3, [r3, #7]
10009734:	2b7f      	cmp	r3, #127	; 0x7f
10009736:	d833      	bhi.n	100097a0 <mpu_get_compass_reg+0xa4>
        return -3;
#endif
    data[0] = (tmp[2] << 8) | tmp[1];
10009738:	a801      	add	r0, sp, #4
1000973a:	7881      	ldrb	r1, [r0, #2]
1000973c:	0209      	lsls	r1, r1, #8
1000973e:	7843      	ldrb	r3, [r0, #1]
10009740:	4319      	orrs	r1, r3
10009742:	b209      	sxth	r1, r1
10009744:	8031      	strh	r1, [r6, #0]
    data[1] = (tmp[4] << 8) | tmp[3];
10009746:	7902      	ldrb	r2, [r0, #4]
10009748:	0212      	lsls	r2, r2, #8
1000974a:	78c3      	ldrb	r3, [r0, #3]
1000974c:	431a      	orrs	r2, r3
1000974e:	b212      	sxth	r2, r2
10009750:	8072      	strh	r2, [r6, #2]
    data[2] = (tmp[6] << 8) | tmp[5];
10009752:	7983      	ldrb	r3, [r0, #6]
10009754:	021b      	lsls	r3, r3, #8
10009756:	7940      	ldrb	r0, [r0, #5]
10009758:	4303      	orrs	r3, r0
1000975a:	b21b      	sxth	r3, r3
1000975c:	469c      	mov	ip, r3
1000975e:	80b3      	strh	r3, [r6, #4]

    data[0] = ((long)data[0] * st.chip_cfg.mag_sens_adj[0]) >> 8;
10009760:	4812      	ldr	r0, [pc, #72]	; (100097ac <mpu_get_compass_reg+0xb0>)
10009762:	232c      	movs	r3, #44	; 0x2c
10009764:	5ec7      	ldrsh	r7, [r0, r3]
10009766:	4379      	muls	r1, r7
10009768:	1209      	asrs	r1, r1, #8
1000976a:	8031      	strh	r1, [r6, #0]
    data[1] = ((long)data[1] * st.chip_cfg.mag_sens_adj[1]) >> 8;
1000976c:	232e      	movs	r3, #46	; 0x2e
1000976e:	5ec1      	ldrsh	r1, [r0, r3]
10009770:	434a      	muls	r2, r1
10009772:	1212      	asrs	r2, r2, #8
10009774:	8072      	strh	r2, [r6, #2]
    data[2] = ((long)data[2] * st.chip_cfg.mag_sens_adj[2]) >> 8;
10009776:	2330      	movs	r3, #48	; 0x30
10009778:	5ec2      	ldrsh	r2, [r0, r3]
1000977a:	4663      	mov	r3, ip
1000977c:	4353      	muls	r3, r2
1000977e:	121b      	asrs	r3, r3, #8
10009780:	80b3      	strh	r3, [r6, #4]

    if (timestamp)
10009782:	2d00      	cmp	r5, #0
10009784:	d00e      	beq.n	100097a4 <mpu_get_compass_reg+0xa8>
        get_ms(timestamp);
10009786:	0028      	movs	r0, r5
10009788:	4b0a      	ldr	r3, [pc, #40]	; (100097b4 <mpu_get_compass_reg+0xb8>)
1000978a:	4798      	blx	r3
1000978c:	e00a      	b.n	100097a4 <mpu_get_compass_reg+0xa8>
{
#ifdef AK89xx_SECONDARY
    unsigned char tmp[9];

    if (!(st.chip_cfg.sensors & INV_XYZ_COMPASS))
        return -1;
1000978e:	2401      	movs	r4, #1
10009790:	4264      	negs	r4, r4
10009792:	e007      	b.n	100097a4 <mpu_get_compass_reg+0xa8>
    tmp[8] = AKM_SINGLE_MEASUREMENT;
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, tmp+8))
        return -1;
#else
    if (i2c_read(st.hw->addr, st.reg->raw_compass, 8, tmp))
        return -1;
10009794:	2401      	movs	r4, #1
10009796:	4264      	negs	r4, r4
10009798:	e004      	b.n	100097a4 <mpu_get_compass_reg+0xa8>
    if ((tmp[7] & AKM_OVERFLOW) || (tmp[7] & AKM_DATA_ERROR))
        return -3;
#elif defined AK8963_SECONDARY
    /* AK8963 doesn't have the data read error bit. */
    if (!(tmp[0] & AKM_DATA_READY) || (tmp[0] & AKM_DATA_OVERRUN))
        return -2;
1000979a:	2402      	movs	r4, #2
1000979c:	4264      	negs	r4, r4
1000979e:	e001      	b.n	100097a4 <mpu_get_compass_reg+0xa8>
    if (tmp[7] & AKM_OVERFLOW)
        return -3;
100097a0:	2403      	movs	r4, #3
100097a2:	4264      	negs	r4, r4
        get_ms(timestamp);
    return 0;
#else
    return -1;
#endif
}
100097a4:	0020      	movs	r0, r4
100097a6:	b005      	add	sp, #20
100097a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
100097aa:	46c0      	nop			; (mov r8, r8)
100097ac:	10018608 	.word	0x10018608
100097b0:	1000abd1 	.word	0x1000abd1
100097b4:	1000b549 	.word	0x1000b549

100097b8 <mpu_get_compass_fsr>:
 *  @return     0 if successful.
 */
int mpu_get_compass_fsr(unsigned short *fsr)
{
#ifdef AK89xx_SECONDARY
    fsr[0] = st.hw->compass_fsr;
100097b8:	4b02      	ldr	r3, [pc, #8]	; (100097c4 <mpu_get_compass_fsr+0xc>)
100097ba:	685b      	ldr	r3, [r3, #4]
100097bc:	899b      	ldrh	r3, [r3, #12]
100097be:	8003      	strh	r3, [r0, #0]
    return 0;
#else
    return -1;
#endif
}
100097c0:	2000      	movs	r0, #0
100097c2:	4770      	bx	lr
100097c4:	10018608 	.word	0x10018608

100097c8 <dmp_set_fifo_rate>:
 *  Only used when DMP is on.
 *  @param[in]  rate    Desired fifo rate (Hz).
 *  @return     0 if successful.
 */
int dmp_set_fifo_rate(unsigned short rate)
{
100097c8:	b510      	push	{r4, lr}
100097ca:	b086      	sub	sp, #24
100097cc:	0004      	movs	r4, r0
    const unsigned char regs_end[12] = {DINAFE, DINAF2, DINAAB,
100097ce:	220c      	movs	r2, #12
100097d0:	4915      	ldr	r1, [pc, #84]	; (10009828 <dmp_set_fifo_rate+0x60>)
100097d2:	3110      	adds	r1, #16
100097d4:	a803      	add	r0, sp, #12
100097d6:	4b15      	ldr	r3, [pc, #84]	; (1000982c <dmp_set_fifo_rate+0x64>)
100097d8:	4798      	blx	r3
        0xc4, DINAAA, DINAF1, DINADF, DINADF, 0xBB, 0xAF, DINADF, DINADF};
    unsigned short div;
    unsigned char tmp[8];

    if (rate > DMP_SAMPLE_RATE)
100097da:	2cc8      	cmp	r4, #200	; 0xc8
100097dc:	d819      	bhi.n	10009812 <dmp_set_fifo_rate+0x4a>
        return -1;
    div = DMP_SAMPLE_RATE / rate - 1;
100097de:	0021      	movs	r1, r4
100097e0:	20c8      	movs	r0, #200	; 0xc8
100097e2:	4b13      	ldr	r3, [pc, #76]	; (10009830 <dmp_set_fifo_rate+0x68>)
100097e4:	4798      	blx	r3
100097e6:	3801      	subs	r0, #1
100097e8:	b280      	uxth	r0, r0
    tmp[0] = (unsigned char)((div >> 8) & 0xFF);
100097ea:	aa01      	add	r2, sp, #4
100097ec:	0a03      	lsrs	r3, r0, #8
100097ee:	7013      	strb	r3, [r2, #0]
    tmp[1] = (unsigned char)(div & 0xFF);
100097f0:	7050      	strb	r0, [r2, #1]
    if (mpu_write_mem(D_0_22, 2, tmp))
100097f2:	2102      	movs	r1, #2
100097f4:	480f      	ldr	r0, [pc, #60]	; (10009834 <dmp_set_fifo_rate+0x6c>)
100097f6:	4b10      	ldr	r3, [pc, #64]	; (10009838 <dmp_set_fifo_rate+0x70>)
100097f8:	4798      	blx	r3
100097fa:	2800      	cmp	r0, #0
100097fc:	d10c      	bne.n	10009818 <dmp_set_fifo_rate+0x50>
        return -1;
    if (mpu_write_mem(CFG_6, 12, (unsigned char*)regs_end))
100097fe:	aa03      	add	r2, sp, #12
10009800:	210c      	movs	r1, #12
10009802:	480e      	ldr	r0, [pc, #56]	; (1000983c <dmp_set_fifo_rate+0x74>)
10009804:	4b0c      	ldr	r3, [pc, #48]	; (10009838 <dmp_set_fifo_rate+0x70>)
10009806:	4798      	blx	r3
10009808:	2800      	cmp	r0, #0
1000980a:	d108      	bne.n	1000981e <dmp_set_fifo_rate+0x56>
        return -1;

    dmp.fifo_rate = rate;
1000980c:	4b0c      	ldr	r3, [pc, #48]	; (10009840 <dmp_set_fifo_rate+0x78>)
1000980e:	819c      	strh	r4, [r3, #12]
    return 0;
10009810:	e007      	b.n	10009822 <dmp_set_fifo_rate+0x5a>
        0xc4, DINAAA, DINAF1, DINADF, DINADF, 0xBB, 0xAF, DINADF, DINADF};
    unsigned short div;
    unsigned char tmp[8];

    if (rate > DMP_SAMPLE_RATE)
        return -1;
10009812:	2001      	movs	r0, #1
10009814:	4240      	negs	r0, r0
10009816:	e004      	b.n	10009822 <dmp_set_fifo_rate+0x5a>
    div = DMP_SAMPLE_RATE / rate - 1;
    tmp[0] = (unsigned char)((div >> 8) & 0xFF);
    tmp[1] = (unsigned char)(div & 0xFF);
    if (mpu_write_mem(D_0_22, 2, tmp))
        return -1;
10009818:	2001      	movs	r0, #1
1000981a:	4240      	negs	r0, r0
1000981c:	e001      	b.n	10009822 <dmp_set_fifo_rate+0x5a>
    if (mpu_write_mem(CFG_6, 12, (unsigned char*)regs_end))
        return -1;
1000981e:	2001      	movs	r0, #1
10009820:	4240      	negs	r0, r0

    dmp.fifo_rate = rate;
    return 0;
}
10009822:	b006      	add	sp, #24
10009824:	bd10      	pop	{r4, pc}
10009826:	46c0      	nop			; (mov r8, r8)
10009828:	10016888 	.word	0x10016888
1000982c:	1001521b 	.word	0x1001521b
10009830:	1001323d 	.word	0x1001323d
10009834:	00000216 	.word	0x00000216
10009838:	100095e1 	.word	0x100095e1
1000983c:	00000ac1 	.word	0x00000ac1
10009840:	100186cc 	.word	0x100186cc

10009844 <dmp_set_tap_thresh>:
 *  @param[in]  axis    1, 2, and 4 for XYZ accel, respectively.
 *  @param[in]  thresh  Tap threshold, in mg/ms.
 *  @return     0 if successful.
 */
int dmp_set_tap_thresh(unsigned char axis, unsigned short thresh)
{
10009844:	b5f0      	push	{r4, r5, r6, r7, lr}
10009846:	4647      	mov	r7, r8
10009848:	b480      	push	{r7}
1000984a:	b082      	sub	sp, #8
1000984c:	0004      	movs	r4, r0
    unsigned char tmp[4], accel_fsr;
    float scaled_thresh;
    unsigned short dmp_thresh, dmp_thresh_2;
    if (!(axis & TAP_XYZ) || thresh > 1600)
1000984e:	0743      	lsls	r3, r0, #29
10009850:	d100      	bne.n	10009854 <dmp_set_tap_thresh+0x10>
10009852:	e09c      	b.n	1000998e <dmp_set_tap_thresh+0x14a>
10009854:	23c8      	movs	r3, #200	; 0xc8
10009856:	00db      	lsls	r3, r3, #3
10009858:	4299      	cmp	r1, r3
1000985a:	d900      	bls.n	1000985e <dmp_set_tap_thresh+0x1a>
1000985c:	e09a      	b.n	10009994 <dmp_set_tap_thresh+0x150>
        return -1;

    scaled_thresh = (float)thresh / DMP_SAMPLE_RATE;
1000985e:	0008      	movs	r0, r1
10009860:	4b58      	ldr	r3, [pc, #352]	; (100099c4 <dmp_set_tap_thresh+0x180>)
10009862:	4798      	blx	r3
10009864:	4958      	ldr	r1, [pc, #352]	; (100099c8 <dmp_set_tap_thresh+0x184>)
10009866:	4b59      	ldr	r3, [pc, #356]	; (100099cc <dmp_set_tap_thresh+0x188>)
10009868:	4798      	blx	r3
1000986a:	1c06      	adds	r6, r0, #0

    mpu_get_accel_fsr(&accel_fsr);
1000986c:	466b      	mov	r3, sp
1000986e:	1cdd      	adds	r5, r3, #3
10009870:	0028      	movs	r0, r5
10009872:	4b57      	ldr	r3, [pc, #348]	; (100099d0 <dmp_set_tap_thresh+0x18c>)
10009874:	4798      	blx	r3
    switch (accel_fsr) {
10009876:	782b      	ldrb	r3, [r5, #0]
10009878:	2b04      	cmp	r3, #4
1000987a:	d019      	beq.n	100098b0 <dmp_set_tap_thresh+0x6c>
1000987c:	b2da      	uxtb	r2, r3
1000987e:	2a04      	cmp	r2, #4
10009880:	d802      	bhi.n	10009888 <dmp_set_tap_thresh+0x44>
10009882:	2b02      	cmp	r3, #2
10009884:	d005      	beq.n	10009892 <dmp_set_tap_thresh+0x4e>
10009886:	e088      	b.n	1000999a <dmp_set_tap_thresh+0x156>
10009888:	2b08      	cmp	r3, #8
1000988a:	d020      	beq.n	100098ce <dmp_set_tap_thresh+0x8a>
1000988c:	2b10      	cmp	r3, #16
1000988e:	d02d      	beq.n	100098ec <dmp_set_tap_thresh+0xa8>
10009890:	e083      	b.n	1000999a <dmp_set_tap_thresh+0x156>
    case 2:
        dmp_thresh = (unsigned short)(scaled_thresh * 16384);
10009892:	4b50      	ldr	r3, [pc, #320]	; (100099d4 <dmp_set_tap_thresh+0x190>)
10009894:	4698      	mov	r8, r3
10009896:	218d      	movs	r1, #141	; 0x8d
10009898:	05c9      	lsls	r1, r1, #23
1000989a:	1c30      	adds	r0, r6, #0
1000989c:	4798      	blx	r3
1000989e:	4f4e      	ldr	r7, [pc, #312]	; (100099d8 <dmp_set_tap_thresh+0x194>)
100098a0:	47b8      	blx	r7
100098a2:	b285      	uxth	r5, r0
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 12288);
100098a4:	494d      	ldr	r1, [pc, #308]	; (100099dc <dmp_set_tap_thresh+0x198>)
100098a6:	1c30      	adds	r0, r6, #0
100098a8:	47c0      	blx	r8
100098aa:	47b8      	blx	r7
100098ac:	b280      	uxth	r0, r0
        break;
100098ae:	e02b      	b.n	10009908 <dmp_set_tap_thresh+0xc4>
    case 4:
        dmp_thresh = (unsigned short)(scaled_thresh * 8192);
100098b0:	4b48      	ldr	r3, [pc, #288]	; (100099d4 <dmp_set_tap_thresh+0x190>)
100098b2:	4698      	mov	r8, r3
100098b4:	218c      	movs	r1, #140	; 0x8c
100098b6:	05c9      	lsls	r1, r1, #23
100098b8:	1c30      	adds	r0, r6, #0
100098ba:	4798      	blx	r3
100098bc:	4f46      	ldr	r7, [pc, #280]	; (100099d8 <dmp_set_tap_thresh+0x194>)
100098be:	47b8      	blx	r7
100098c0:	b285      	uxth	r5, r0
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 6144);
100098c2:	4947      	ldr	r1, [pc, #284]	; (100099e0 <dmp_set_tap_thresh+0x19c>)
100098c4:	1c30      	adds	r0, r6, #0
100098c6:	47c0      	blx	r8
100098c8:	47b8      	blx	r7
100098ca:	b280      	uxth	r0, r0
        break;
100098cc:	e01c      	b.n	10009908 <dmp_set_tap_thresh+0xc4>
    case 8:
        dmp_thresh = (unsigned short)(scaled_thresh * 4096);
100098ce:	4b41      	ldr	r3, [pc, #260]	; (100099d4 <dmp_set_tap_thresh+0x190>)
100098d0:	4698      	mov	r8, r3
100098d2:	218b      	movs	r1, #139	; 0x8b
100098d4:	05c9      	lsls	r1, r1, #23
100098d6:	1c30      	adds	r0, r6, #0
100098d8:	4798      	blx	r3
100098da:	4f3f      	ldr	r7, [pc, #252]	; (100099d8 <dmp_set_tap_thresh+0x194>)
100098dc:	47b8      	blx	r7
100098de:	b285      	uxth	r5, r0
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 3072);
100098e0:	4940      	ldr	r1, [pc, #256]	; (100099e4 <dmp_set_tap_thresh+0x1a0>)
100098e2:	1c30      	adds	r0, r6, #0
100098e4:	47c0      	blx	r8
100098e6:	47b8      	blx	r7
100098e8:	b280      	uxth	r0, r0
        break;
100098ea:	e00d      	b.n	10009908 <dmp_set_tap_thresh+0xc4>
    case 16:
        dmp_thresh = (unsigned short)(scaled_thresh * 2048);
100098ec:	4b39      	ldr	r3, [pc, #228]	; (100099d4 <dmp_set_tap_thresh+0x190>)
100098ee:	4698      	mov	r8, r3
100098f0:	218a      	movs	r1, #138	; 0x8a
100098f2:	05c9      	lsls	r1, r1, #23
100098f4:	1c30      	adds	r0, r6, #0
100098f6:	4798      	blx	r3
100098f8:	4f37      	ldr	r7, [pc, #220]	; (100099d8 <dmp_set_tap_thresh+0x194>)
100098fa:	47b8      	blx	r7
100098fc:	b285      	uxth	r5, r0
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 1536);
100098fe:	493a      	ldr	r1, [pc, #232]	; (100099e8 <dmp_set_tap_thresh+0x1a4>)
10009900:	1c30      	adds	r0, r6, #0
10009902:	47c0      	blx	r8
10009904:	47b8      	blx	r7
10009906:	b280      	uxth	r0, r0
        break;
    default:
        return -1;
    }
    tmp[0] = (unsigned char)(dmp_thresh >> 8);
10009908:	ab01      	add	r3, sp, #4
1000990a:	0a2a      	lsrs	r2, r5, #8
1000990c:	701a      	strb	r2, [r3, #0]
    tmp[1] = (unsigned char)(dmp_thresh & 0xFF);
1000990e:	705d      	strb	r5, [r3, #1]
    tmp[2] = (unsigned char)(dmp_thresh_2 >> 8);
10009910:	0a02      	lsrs	r2, r0, #8
10009912:	709a      	strb	r2, [r3, #2]
    tmp[3] = (unsigned char)(dmp_thresh_2 & 0xFF);
10009914:	70d8      	strb	r0, [r3, #3]

    if (axis & TAP_X) {
10009916:	07e3      	lsls	r3, r4, #31
10009918:	d510      	bpl.n	1000993c <dmp_set_tap_thresh+0xf8>
        if (mpu_write_mem(DMP_TAP_THX, 2, tmp))
1000991a:	aa01      	add	r2, sp, #4
1000991c:	2102      	movs	r1, #2
1000991e:	20ea      	movs	r0, #234	; 0xea
10009920:	0040      	lsls	r0, r0, #1
10009922:	4b32      	ldr	r3, [pc, #200]	; (100099ec <dmp_set_tap_thresh+0x1a8>)
10009924:	4798      	blx	r3
10009926:	2800      	cmp	r0, #0
10009928:	d13a      	bne.n	100099a0 <dmp_set_tap_thresh+0x15c>
            return -1;
        if (mpu_write_mem(D_1_36, 2, tmp+2))
1000992a:	466b      	mov	r3, sp
1000992c:	1d9a      	adds	r2, r3, #6
1000992e:	2102      	movs	r1, #2
10009930:	3025      	adds	r0, #37	; 0x25
10009932:	30ff      	adds	r0, #255	; 0xff
10009934:	4b2d      	ldr	r3, [pc, #180]	; (100099ec <dmp_set_tap_thresh+0x1a8>)
10009936:	4798      	blx	r3
10009938:	2800      	cmp	r0, #0
1000993a:	d134      	bne.n	100099a6 <dmp_set_tap_thresh+0x162>
            return -1;
    }
    if (axis & TAP_Y) {
1000993c:	07a3      	lsls	r3, r4, #30
1000993e:	d510      	bpl.n	10009962 <dmp_set_tap_thresh+0x11e>
        if (mpu_write_mem(DMP_TAP_THY, 2, tmp))
10009940:	aa01      	add	r2, sp, #4
10009942:	2102      	movs	r1, #2
10009944:	20ec      	movs	r0, #236	; 0xec
10009946:	0040      	lsls	r0, r0, #1
10009948:	4b28      	ldr	r3, [pc, #160]	; (100099ec <dmp_set_tap_thresh+0x1a8>)
1000994a:	4798      	blx	r3
1000994c:	2800      	cmp	r0, #0
1000994e:	d12d      	bne.n	100099ac <dmp_set_tap_thresh+0x168>
            return -1;
        if (mpu_write_mem(D_1_40, 2, tmp+2))
10009950:	466b      	mov	r3, sp
10009952:	1d9a      	adds	r2, r3, #6
10009954:	2102      	movs	r1, #2
10009956:	3029      	adds	r0, #41	; 0x29
10009958:	30ff      	adds	r0, #255	; 0xff
1000995a:	4b24      	ldr	r3, [pc, #144]	; (100099ec <dmp_set_tap_thresh+0x1a8>)
1000995c:	4798      	blx	r3
1000995e:	2800      	cmp	r0, #0
10009960:	d127      	bne.n	100099b2 <dmp_set_tap_thresh+0x16e>
        if (mpu_write_mem(DMP_TAP_THZ, 2, tmp))
            return -1;
        if (mpu_write_mem(D_1_44, 2, tmp+2))
            return -1;
    }
    return 0;
10009962:	2000      	movs	r0, #0
        if (mpu_write_mem(DMP_TAP_THY, 2, tmp))
            return -1;
        if (mpu_write_mem(D_1_40, 2, tmp+2))
            return -1;
    }
    if (axis & TAP_Z) {
10009964:	0763      	lsls	r3, r4, #29
10009966:	d529      	bpl.n	100099bc <dmp_set_tap_thresh+0x178>
        if (mpu_write_mem(DMP_TAP_THZ, 2, tmp))
10009968:	aa01      	add	r2, sp, #4
1000996a:	2102      	movs	r1, #2
1000996c:	30dd      	adds	r0, #221	; 0xdd
1000996e:	30ff      	adds	r0, #255	; 0xff
10009970:	4b1e      	ldr	r3, [pc, #120]	; (100099ec <dmp_set_tap_thresh+0x1a8>)
10009972:	4798      	blx	r3
10009974:	2800      	cmp	r0, #0
10009976:	d11f      	bne.n	100099b8 <dmp_set_tap_thresh+0x174>
            return -1;
        if (mpu_write_mem(D_1_44, 2, tmp+2))
10009978:	466b      	mov	r3, sp
1000997a:	1d9a      	adds	r2, r3, #6
1000997c:	2102      	movs	r1, #2
1000997e:	302d      	adds	r0, #45	; 0x2d
10009980:	30ff      	adds	r0, #255	; 0xff
10009982:	4b1a      	ldr	r3, [pc, #104]	; (100099ec <dmp_set_tap_thresh+0x1a8>)
10009984:	4798      	blx	r3
10009986:	1e43      	subs	r3, r0, #1
10009988:	4198      	sbcs	r0, r3
1000998a:	4240      	negs	r0, r0
1000998c:	e016      	b.n	100099bc <dmp_set_tap_thresh+0x178>
{
    unsigned char tmp[4], accel_fsr;
    float scaled_thresh;
    unsigned short dmp_thresh, dmp_thresh_2;
    if (!(axis & TAP_XYZ) || thresh > 1600)
        return -1;
1000998e:	2001      	movs	r0, #1
10009990:	4240      	negs	r0, r0
10009992:	e013      	b.n	100099bc <dmp_set_tap_thresh+0x178>
10009994:	2001      	movs	r0, #1
10009996:	4240      	negs	r0, r0
10009998:	e010      	b.n	100099bc <dmp_set_tap_thresh+0x178>
        dmp_thresh = (unsigned short)(scaled_thresh * 2048);
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 1536);
        break;
    default:
        return -1;
1000999a:	2001      	movs	r0, #1
1000999c:	4240      	negs	r0, r0
1000999e:	e00d      	b.n	100099bc <dmp_set_tap_thresh+0x178>
    tmp[2] = (unsigned char)(dmp_thresh_2 >> 8);
    tmp[3] = (unsigned char)(dmp_thresh_2 & 0xFF);

    if (axis & TAP_X) {
        if (mpu_write_mem(DMP_TAP_THX, 2, tmp))
            return -1;
100099a0:	2001      	movs	r0, #1
100099a2:	4240      	negs	r0, r0
100099a4:	e00a      	b.n	100099bc <dmp_set_tap_thresh+0x178>
        if (mpu_write_mem(D_1_36, 2, tmp+2))
            return -1;
100099a6:	2001      	movs	r0, #1
100099a8:	4240      	negs	r0, r0
100099aa:	e007      	b.n	100099bc <dmp_set_tap_thresh+0x178>
    }
    if (axis & TAP_Y) {
        if (mpu_write_mem(DMP_TAP_THY, 2, tmp))
            return -1;
100099ac:	2001      	movs	r0, #1
100099ae:	4240      	negs	r0, r0
100099b0:	e004      	b.n	100099bc <dmp_set_tap_thresh+0x178>
        if (mpu_write_mem(D_1_40, 2, tmp+2))
            return -1;
100099b2:	2001      	movs	r0, #1
100099b4:	4240      	negs	r0, r0
100099b6:	e001      	b.n	100099bc <dmp_set_tap_thresh+0x178>
    }
    if (axis & TAP_Z) {
        if (mpu_write_mem(DMP_TAP_THZ, 2, tmp))
            return -1;
100099b8:	2001      	movs	r0, #1
100099ba:	4240      	negs	r0, r0
        if (mpu_write_mem(D_1_44, 2, tmp+2))
            return -1;
    }
    return 0;
}
100099bc:	b002      	add	sp, #8
100099be:	bc04      	pop	{r2}
100099c0:	4690      	mov	r8, r2
100099c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
100099c4:	10014251 	.word	0x10014251
100099c8:	43480000 	.word	0x43480000
100099cc:	100138b5 	.word	0x100138b5
100099d0:	10008855 	.word	0x10008855
100099d4:	10013c49 	.word	0x10013c49
100099d8:	1001355d 	.word	0x1001355d
100099dc:	46400000 	.word	0x46400000
100099e0:	45c00000 	.word	0x45c00000
100099e4:	45400000 	.word	0x45400000
100099e8:	44c00000 	.word	0x44c00000
100099ec:	100095e1 	.word	0x100095e1

100099f0 <dmp_set_tap_axes>:
 *  @brief      Set which axes will register a tap.
 *  @param[in]  axis    1, 2, and 4 for XYZ, respectively.
 *  @return     0 if successful.
 */
int dmp_set_tap_axes(unsigned char axis)
{
100099f0:	b500      	push	{lr}
100099f2:	b083      	sub	sp, #12
    unsigned char tmp = 0;

    if (axis & TAP_X)
100099f4:	07c3      	lsls	r3, r0, #31
100099f6:	d403      	bmi.n	10009a00 <dmp_set_tap_axes+0x10>
 *  @param[in]  axis    1, 2, and 4 for XYZ, respectively.
 *  @return     0 if successful.
 */
int dmp_set_tap_axes(unsigned char axis)
{
    unsigned char tmp = 0;
100099f8:	2200      	movs	r2, #0
100099fa:	466b      	mov	r3, sp
100099fc:	71da      	strb	r2, [r3, #7]
100099fe:	e002      	b.n	10009a06 <dmp_set_tap_axes+0x16>

    if (axis & TAP_X)
        tmp |= 0x30;
10009a00:	2230      	movs	r2, #48	; 0x30
10009a02:	466b      	mov	r3, sp
10009a04:	71da      	strb	r2, [r3, #7]
    if (axis & TAP_Y)
10009a06:	0783      	lsls	r3, r0, #30
10009a08:	d505      	bpl.n	10009a16 <dmp_set_tap_axes+0x26>
        tmp |= 0x0C;
10009a0a:	466b      	mov	r3, sp
10009a0c:	1dda      	adds	r2, r3, #7
10009a0e:	79d9      	ldrb	r1, [r3, #7]
10009a10:	230c      	movs	r3, #12
10009a12:	430b      	orrs	r3, r1
10009a14:	7013      	strb	r3, [r2, #0]
    if (axis & TAP_Z)
10009a16:	0743      	lsls	r3, r0, #29
10009a18:	d505      	bpl.n	10009a26 <dmp_set_tap_axes+0x36>
        tmp |= 0x03;
10009a1a:	466b      	mov	r3, sp
10009a1c:	1dda      	adds	r2, r3, #7
10009a1e:	79d9      	ldrb	r1, [r3, #7]
10009a20:	2303      	movs	r3, #3
10009a22:	430b      	orrs	r3, r1
10009a24:	7013      	strb	r3, [r2, #0]
    return mpu_write_mem(D_1_72, 1, &tmp);
10009a26:	466b      	mov	r3, sp
10009a28:	1dda      	adds	r2, r3, #7
10009a2a:	2101      	movs	r1, #1
10009a2c:	20a4      	movs	r0, #164	; 0xa4
10009a2e:	0040      	lsls	r0, r0, #1
10009a30:	4b01      	ldr	r3, [pc, #4]	; (10009a38 <dmp_set_tap_axes+0x48>)
10009a32:	4798      	blx	r3
}
10009a34:	b003      	add	sp, #12
10009a36:	bd00      	pop	{pc}
10009a38:	100095e1 	.word	0x100095e1

10009a3c <dmp_set_tap_count>:
 *  @brief      Set minimum number of taps needed for an interrupt.
 *  @param[in]  min_taps    Minimum consecutive taps (1-4).
 *  @return     0 if successful.
 */
int dmp_set_tap_count(unsigned char min_taps)
{
10009a3c:	b500      	push	{lr}
10009a3e:	b083      	sub	sp, #12
    unsigned char tmp;

    if (min_taps < 1)
        min_taps = 1;
10009a40:	2301      	movs	r3, #1
 */
int dmp_set_tap_count(unsigned char min_taps)
{
    unsigned char tmp;

    if (min_taps < 1)
10009a42:	2800      	cmp	r0, #0
10009a44:	d004      	beq.n	10009a50 <dmp_set_tap_count+0x14>
10009a46:	1c03      	adds	r3, r0, #0
10009a48:	2804      	cmp	r0, #4
10009a4a:	d900      	bls.n	10009a4e <dmp_set_tap_count+0x12>
10009a4c:	2304      	movs	r3, #4
10009a4e:	b2db      	uxtb	r3, r3
        min_taps = 1;
    else if (min_taps > 4)
        min_taps = 4;

    tmp = min_taps - 1;
10009a50:	466a      	mov	r2, sp
10009a52:	3207      	adds	r2, #7
10009a54:	3b01      	subs	r3, #1
10009a56:	7013      	strb	r3, [r2, #0]
    return mpu_write_mem(D_1_79, 1, &tmp);
10009a58:	2101      	movs	r1, #1
10009a5a:	2050      	movs	r0, #80	; 0x50
10009a5c:	30ff      	adds	r0, #255	; 0xff
10009a5e:	4b02      	ldr	r3, [pc, #8]	; (10009a68 <dmp_set_tap_count+0x2c>)
10009a60:	4798      	blx	r3
}
10009a62:	b003      	add	sp, #12
10009a64:	bd00      	pop	{pc}
10009a66:	46c0      	nop			; (mov r8, r8)
10009a68:	100095e1 	.word	0x100095e1

10009a6c <dmp_set_tap_time>:
 *  @brief      Set length between valid taps.
 *  @param[in]  time    Milliseconds between taps.
 *  @return     0 if successful.
 */
int dmp_set_tap_time(unsigned short time)
{
10009a6c:	b500      	push	{lr}
10009a6e:	b083      	sub	sp, #12
    unsigned short dmp_time;
    unsigned char tmp[2];

    dmp_time = time / (1000 / DMP_SAMPLE_RATE);
10009a70:	2105      	movs	r1, #5
10009a72:	4b07      	ldr	r3, [pc, #28]	; (10009a90 <dmp_set_tap_time+0x24>)
10009a74:	4798      	blx	r3
10009a76:	b280      	uxth	r0, r0
    tmp[0] = (unsigned char)(dmp_time >> 8);
10009a78:	aa01      	add	r2, sp, #4
10009a7a:	0a03      	lsrs	r3, r0, #8
10009a7c:	7013      	strb	r3, [r2, #0]
    tmp[1] = (unsigned char)(dmp_time & 0xFF);
10009a7e:	7050      	strb	r0, [r2, #1]
    return mpu_write_mem(DMP_TAPW_MIN, 2, tmp);
10009a80:	2102      	movs	r1, #2
10009a82:	20ef      	movs	r0, #239	; 0xef
10009a84:	0040      	lsls	r0, r0, #1
10009a86:	4b03      	ldr	r3, [pc, #12]	; (10009a94 <dmp_set_tap_time+0x28>)
10009a88:	4798      	blx	r3
}
10009a8a:	b003      	add	sp, #12
10009a8c:	bd00      	pop	{pc}
10009a8e:	46c0      	nop			; (mov r8, r8)
10009a90:	10013129 	.word	0x10013129
10009a94:	100095e1 	.word	0x100095e1

10009a98 <dmp_set_tap_time_multi>:
 *  @brief      Set max time between taps to register as a multi-tap.
 *  @param[in]  time    Max milliseconds between taps.
 *  @return     0 if successful.
 */
int dmp_set_tap_time_multi(unsigned short time)
{
10009a98:	b500      	push	{lr}
10009a9a:	b083      	sub	sp, #12
    unsigned short dmp_time;
    unsigned char tmp[2];

    dmp_time = time / (1000 / DMP_SAMPLE_RATE);
10009a9c:	2105      	movs	r1, #5
10009a9e:	4b07      	ldr	r3, [pc, #28]	; (10009abc <dmp_set_tap_time_multi+0x24>)
10009aa0:	4798      	blx	r3
10009aa2:	b280      	uxth	r0, r0
    tmp[0] = (unsigned char)(dmp_time >> 8);
10009aa4:	aa01      	add	r2, sp, #4
10009aa6:	0a03      	lsrs	r3, r0, #8
10009aa8:	7013      	strb	r3, [r2, #0]
    tmp[1] = (unsigned char)(dmp_time & 0xFF);
10009aaa:	7050      	strb	r0, [r2, #1]
    return mpu_write_mem(D_1_218, 2, tmp);
10009aac:	2102      	movs	r1, #2
10009aae:	20ed      	movs	r0, #237	; 0xed
10009ab0:	0040      	lsls	r0, r0, #1
10009ab2:	4b03      	ldr	r3, [pc, #12]	; (10009ac0 <dmp_set_tap_time_multi+0x28>)
10009ab4:	4798      	blx	r3
}
10009ab6:	b003      	add	sp, #12
10009ab8:	bd00      	pop	{pc}
10009aba:	46c0      	nop			; (mov r8, r8)
10009abc:	10013129 	.word	0x10013129
10009ac0:	100095e1 	.word	0x100095e1

10009ac4 <dmp_set_shake_reject_thresh>:
 *  @param[in]  sf      Gyro scale factor.
 *  @param[in]  thresh  Gyro threshold in dps.
 *  @return     0 if successful.
 */
int dmp_set_shake_reject_thresh(long sf, unsigned short thresh)
{
10009ac4:	b510      	push	{r4, lr}
10009ac6:	b082      	sub	sp, #8
10009ac8:	000c      	movs	r4, r1
    unsigned char tmp[4];
    long thresh_scaled = sf / 1000 * thresh;
10009aca:	21fa      	movs	r1, #250	; 0xfa
10009acc:	0089      	lsls	r1, r1, #2
10009ace:	4b09      	ldr	r3, [pc, #36]	; (10009af4 <dmp_set_shake_reject_thresh+0x30>)
10009ad0:	4798      	blx	r3
10009ad2:	4360      	muls	r0, r4
    tmp[0] = (unsigned char)(((long)thresh_scaled >> 24) & 0xFF);
10009ad4:	aa01      	add	r2, sp, #4
10009ad6:	1603      	asrs	r3, r0, #24
10009ad8:	7013      	strb	r3, [r2, #0]
    tmp[1] = (unsigned char)(((long)thresh_scaled >> 16) & 0xFF);
10009ada:	1403      	asrs	r3, r0, #16
10009adc:	7053      	strb	r3, [r2, #1]
    tmp[2] = (unsigned char)(((long)thresh_scaled >> 8) & 0xFF);
10009ade:	1203      	asrs	r3, r0, #8
10009ae0:	7093      	strb	r3, [r2, #2]
    tmp[3] = (unsigned char)((long)thresh_scaled & 0xFF);
10009ae2:	70d0      	strb	r0, [r2, #3]
    return mpu_write_mem(D_1_92, 4, tmp);
10009ae4:	2104      	movs	r1, #4
10009ae6:	20ae      	movs	r0, #174	; 0xae
10009ae8:	0040      	lsls	r0, r0, #1
10009aea:	4b03      	ldr	r3, [pc, #12]	; (10009af8 <dmp_set_shake_reject_thresh+0x34>)
10009aec:	4798      	blx	r3
}
10009aee:	b002      	add	sp, #8
10009af0:	bd10      	pop	{r4, pc}
10009af2:	46c0      	nop			; (mov r8, r8)
10009af4:	1001323d 	.word	0x1001323d
10009af8:	100095e1 	.word	0x100095e1

10009afc <dmp_set_shake_reject_time>:
 *  60 ms is added to this parameter.
 *  @param[in]  time    Time in milliseconds.
 *  @return     0 if successful.
 */
int dmp_set_shake_reject_time(unsigned short time)
{
10009afc:	b500      	push	{lr}
10009afe:	b083      	sub	sp, #12
    unsigned char tmp[2];

    time /= (1000 / DMP_SAMPLE_RATE);
10009b00:	2105      	movs	r1, #5
10009b02:	4b07      	ldr	r3, [pc, #28]	; (10009b20 <dmp_set_shake_reject_time+0x24>)
10009b04:	4798      	blx	r3
10009b06:	b280      	uxth	r0, r0
    tmp[0] = time >> 8;
10009b08:	aa01      	add	r2, sp, #4
10009b0a:	0a03      	lsrs	r3, r0, #8
10009b0c:	7013      	strb	r3, [r2, #0]
    tmp[1] = time & 0xFF;
10009b0e:	7050      	strb	r0, [r2, #1]
    return mpu_write_mem(D_1_90,2,tmp);
10009b10:	2102      	movs	r1, #2
10009b12:	20ad      	movs	r0, #173	; 0xad
10009b14:	0040      	lsls	r0, r0, #1
10009b16:	4b03      	ldr	r3, [pc, #12]	; (10009b24 <dmp_set_shake_reject_time+0x28>)
10009b18:	4798      	blx	r3
}
10009b1a:	b003      	add	sp, #12
10009b1c:	bd00      	pop	{pc}
10009b1e:	46c0      	nop			; (mov r8, r8)
10009b20:	10013129 	.word	0x10013129
10009b24:	100095e1 	.word	0x100095e1

10009b28 <dmp_set_shake_reject_timeout>:
 *  60 ms is added to this parameter.
 *  @param[in]  time    Time in milliseconds.
 *  @return     0 if successful.
 */
int dmp_set_shake_reject_timeout(unsigned short time)
{
10009b28:	b500      	push	{lr}
10009b2a:	b083      	sub	sp, #12
    unsigned char tmp[2];

    time /= (1000 / DMP_SAMPLE_RATE);
10009b2c:	2105      	movs	r1, #5
10009b2e:	4b07      	ldr	r3, [pc, #28]	; (10009b4c <dmp_set_shake_reject_timeout+0x24>)
10009b30:	4798      	blx	r3
10009b32:	b280      	uxth	r0, r0
    tmp[0] = time >> 8;
10009b34:	aa01      	add	r2, sp, #4
10009b36:	0a03      	lsrs	r3, r0, #8
10009b38:	7013      	strb	r3, [r2, #0]
    tmp[1] = time & 0xFF;
10009b3a:	7050      	strb	r0, [r2, #1]
    return mpu_write_mem(D_1_88,2,tmp);
10009b3c:	2102      	movs	r1, #2
10009b3e:	20ac      	movs	r0, #172	; 0xac
10009b40:	0040      	lsls	r0, r0, #1
10009b42:	4b03      	ldr	r3, [pc, #12]	; (10009b50 <dmp_set_shake_reject_timeout+0x28>)
10009b44:	4798      	blx	r3
}
10009b46:	b003      	add	sp, #12
10009b48:	bd00      	pop	{pc}
10009b4a:	46c0      	nop			; (mov r8, r8)
10009b4c:	10013129 	.word	0x10013129
10009b50:	100095e1 	.word	0x100095e1

10009b54 <dmp_enable_gyro_cal>:
 *  subtracted from the gyro output.
 *  @param[in]  enable  1 to enable gyro calibration.
 *  @return     0 if successful.
 */
int dmp_enable_gyro_cal(unsigned char enable)
{
10009b54:	b500      	push	{lr}
10009b56:	b085      	sub	sp, #20
    if (enable) {
10009b58:	2800      	cmp	r0, #0
10009b5a:	d00c      	beq.n	10009b76 <dmp_enable_gyro_cal+0x22>
        unsigned char regs[9] = {0xb8, 0xaa, 0xb3, 0x8d, 0xb4, 0x98, 0x0d, 0x35, 0x5d};
10009b5c:	2209      	movs	r2, #9
10009b5e:	490d      	ldr	r1, [pc, #52]	; (10009b94 <dmp_enable_gyro_cal+0x40>)
10009b60:	311c      	adds	r1, #28
10009b62:	a801      	add	r0, sp, #4
10009b64:	4b0c      	ldr	r3, [pc, #48]	; (10009b98 <dmp_enable_gyro_cal+0x44>)
10009b66:	4798      	blx	r3
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
10009b68:	aa01      	add	r2, sp, #4
10009b6a:	2109      	movs	r1, #9
10009b6c:	2097      	movs	r0, #151	; 0x97
10009b6e:	00c0      	lsls	r0, r0, #3
10009b70:	4b0a      	ldr	r3, [pc, #40]	; (10009b9c <dmp_enable_gyro_cal+0x48>)
10009b72:	4798      	blx	r3
10009b74:	e00b      	b.n	10009b8e <dmp_enable_gyro_cal+0x3a>
    } else {
        unsigned char regs[9] = {0xb8, 0xaa, 0xaa, 0xaa, 0xb0, 0x88, 0xc3, 0xc5, 0xc7};
10009b76:	2209      	movs	r2, #9
10009b78:	4906      	ldr	r1, [pc, #24]	; (10009b94 <dmp_enable_gyro_cal+0x40>)
10009b7a:	3128      	adds	r1, #40	; 0x28
10009b7c:	a801      	add	r0, sp, #4
10009b7e:	4b06      	ldr	r3, [pc, #24]	; (10009b98 <dmp_enable_gyro_cal+0x44>)
10009b80:	4798      	blx	r3
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
10009b82:	aa01      	add	r2, sp, #4
10009b84:	2109      	movs	r1, #9
10009b86:	2097      	movs	r0, #151	; 0x97
10009b88:	00c0      	lsls	r0, r0, #3
10009b8a:	4b04      	ldr	r3, [pc, #16]	; (10009b9c <dmp_enable_gyro_cal+0x48>)
10009b8c:	4798      	blx	r3
    }
}
10009b8e:	b005      	add	sp, #20
10009b90:	bd00      	pop	{pc}
10009b92:	46c0      	nop			; (mov r8, r8)
10009b94:	10016888 	.word	0x10016888
10009b98:	1001521b 	.word	0x1001521b
10009b9c:	100095e1 	.word	0x100095e1

10009ba0 <dmp_enable_lp_quat>:
 *  exclusive.
 *  @param[in]  enable  1 to enable 3-axis quaternion.
 *  @return     0 if successful.
 */
int dmp_enable_lp_quat(unsigned char enable)
{
10009ba0:	b500      	push	{lr}
10009ba2:	b083      	sub	sp, #12
    unsigned char regs[4];
    if (enable) {
10009ba4:	2800      	cmp	r0, #0
10009ba6:	d009      	beq.n	10009bbc <dmp_enable_lp_quat+0x1c>
        regs[0] = DINBC0;
10009ba8:	ab01      	add	r3, sp, #4
10009baa:	22c0      	movs	r2, #192	; 0xc0
10009bac:	701a      	strb	r2, [r3, #0]
        regs[1] = DINBC2;
10009bae:	3202      	adds	r2, #2
10009bb0:	705a      	strb	r2, [r3, #1]
        regs[2] = DINBC4;
10009bb2:	3202      	adds	r2, #2
10009bb4:	709a      	strb	r2, [r3, #2]
        regs[3] = DINBC6;
10009bb6:	3202      	adds	r2, #2
10009bb8:	70da      	strb	r2, [r3, #3]
10009bba:	e001      	b.n	10009bc0 <dmp_enable_lp_quat+0x20>
    }
    else
        memset(regs, 0x8B, 4);
10009bbc:	4b05      	ldr	r3, [pc, #20]	; (10009bd4 <dmp_enable_lp_quat+0x34>)
10009bbe:	9301      	str	r3, [sp, #4]

    mpu_write_mem(CFG_LP_QUAT, 4, regs);
10009bc0:	aa01      	add	r2, sp, #4
10009bc2:	2104      	movs	r1, #4
10009bc4:	4804      	ldr	r0, [pc, #16]	; (10009bd8 <dmp_enable_lp_quat+0x38>)
10009bc6:	4b05      	ldr	r3, [pc, #20]	; (10009bdc <dmp_enable_lp_quat+0x3c>)
10009bc8:	4798      	blx	r3

    return mpu_reset_fifo();
10009bca:	4b05      	ldr	r3, [pc, #20]	; (10009be0 <dmp_enable_lp_quat+0x40>)
10009bcc:	4798      	blx	r3
}
10009bce:	b003      	add	sp, #12
10009bd0:	bd00      	pop	{pc}
10009bd2:	46c0      	nop			; (mov r8, r8)
10009bd4:	8b8b8b8b 	.word	0x8b8b8b8b
10009bd8:	00000a98 	.word	0x00000a98
10009bdc:	100095e1 	.word	0x100095e1
10009be0:	100085bd 	.word	0x100085bd

10009be4 <dmp_enable_6x_lp_quat>:
 *  exclusive.
 *  @param[in]   enable  1 to enable 6-axis quaternion.
 *  @return      0 if successful.
 */
int dmp_enable_6x_lp_quat(unsigned char enable)
{
10009be4:	b500      	push	{lr}
10009be6:	b083      	sub	sp, #12
    unsigned char regs[4];
    if (enable) {
10009be8:	2800      	cmp	r0, #0
10009bea:	d009      	beq.n	10009c00 <dmp_enable_6x_lp_quat+0x1c>
        regs[0] = DINA20;
10009bec:	ab01      	add	r3, sp, #4
10009bee:	2220      	movs	r2, #32
10009bf0:	701a      	strb	r2, [r3, #0]
        regs[1] = DINA28;
10009bf2:	3208      	adds	r2, #8
10009bf4:	705a      	strb	r2, [r3, #1]
        regs[2] = DINA30;
10009bf6:	3208      	adds	r2, #8
10009bf8:	709a      	strb	r2, [r3, #2]
        regs[3] = DINA38;
10009bfa:	3208      	adds	r2, #8
10009bfc:	70da      	strb	r2, [r3, #3]
10009bfe:	e001      	b.n	10009c04 <dmp_enable_6x_lp_quat+0x20>
    } else
        memset(regs, 0xA3, 4);
10009c00:	4b05      	ldr	r3, [pc, #20]	; (10009c18 <dmp_enable_6x_lp_quat+0x34>)
10009c02:	9301      	str	r3, [sp, #4]

    mpu_write_mem(CFG_8, 4, regs);
10009c04:	aa01      	add	r2, sp, #4
10009c06:	2104      	movs	r1, #4
10009c08:	4804      	ldr	r0, [pc, #16]	; (10009c1c <dmp_enable_6x_lp_quat+0x38>)
10009c0a:	4b05      	ldr	r3, [pc, #20]	; (10009c20 <dmp_enable_6x_lp_quat+0x3c>)
10009c0c:	4798      	blx	r3

    return mpu_reset_fifo();
10009c0e:	4b05      	ldr	r3, [pc, #20]	; (10009c24 <dmp_enable_6x_lp_quat+0x40>)
10009c10:	4798      	blx	r3
}
10009c12:	b003      	add	sp, #12
10009c14:	bd00      	pop	{pc}
10009c16:	46c0      	nop			; (mov r8, r8)
10009c18:	a3a3a3a3 	.word	0xa3a3a3a3
10009c1c:	00000a9e 	.word	0x00000a9e
10009c20:	100095e1 	.word	0x100095e1
10009c24:	100085bd 	.word	0x100085bd

10009c28 <dmp_enable_feature>:
 *  mutually exclusive.
 *  @param[in]  mask    Mask of features to enable.
 *  @return     0 if successful.
 */
int dmp_enable_feature(unsigned short mask)
{
10009c28:	b5f0      	push	{r4, r5, r6, r7, lr}
10009c2a:	b085      	sub	sp, #20
10009c2c:	0004      	movs	r4, r0

    /* TODO: All of these settings can probably be integrated into the default
     * DMP image.
     */
    /* Set integration scale factor. */
    tmp[0] = (unsigned char)((GYRO_SF >> 24) & 0xFF);
10009c2e:	ad01      	add	r5, sp, #4
10009c30:	2302      	movs	r3, #2
10009c32:	702b      	strb	r3, [r5, #0]
    tmp[1] = (unsigned char)((GYRO_SF >> 16) & 0xFF);
10009c34:	33c8      	adds	r3, #200	; 0xc8
10009c36:	706b      	strb	r3, [r5, #1]
    tmp[2] = (unsigned char)((GYRO_SF >> 8) & 0xFF);
10009c38:	3319      	adds	r3, #25
10009c3a:	70ab      	strb	r3, [r5, #2]
    tmp[3] = (unsigned char)(GYRO_SF & 0xFF);
10009c3c:	3bda      	subs	r3, #218	; 0xda
10009c3e:	70eb      	strb	r3, [r5, #3]
    mpu_write_mem(D_0_104, 4, tmp);
10009c40:	002a      	movs	r2, r5
10009c42:	2104      	movs	r1, #4
10009c44:	2068      	movs	r0, #104	; 0x68
10009c46:	4b6a      	ldr	r3, [pc, #424]	; (10009df0 <dmp_enable_feature+0x1c8>)
10009c48:	4798      	blx	r3

    /* Send sensor data to the FIFO. */
    tmp[0] = 0xA3;
10009c4a:	23a3      	movs	r3, #163	; 0xa3
10009c4c:	702b      	strb	r3, [r5, #0]
10009c4e:	2740      	movs	r7, #64	; 0x40
10009c50:	4027      	ands	r7, r4
    if (mask & DMP_FEATURE_SEND_RAW_ACCEL) {
10009c52:	d007      	beq.n	10009c64 <dmp_enable_feature+0x3c>
        tmp[1] = 0xC0;
10009c54:	ab01      	add	r3, sp, #4
10009c56:	22c0      	movs	r2, #192	; 0xc0
10009c58:	705a      	strb	r2, [r3, #1]
        tmp[2] = 0xC8;
10009c5a:	3208      	adds	r2, #8
10009c5c:	709a      	strb	r2, [r3, #2]
        tmp[3] = 0xC2;
10009c5e:	3a06      	subs	r2, #6
10009c60:	70da      	strb	r2, [r3, #3]
10009c62:	e004      	b.n	10009c6e <dmp_enable_feature+0x46>
    } else {
        tmp[1] = 0xA3;
10009c64:	ab01      	add	r3, sp, #4
10009c66:	22a3      	movs	r2, #163	; 0xa3
10009c68:	705a      	strb	r2, [r3, #1]
        tmp[2] = 0xA3;
10009c6a:	709a      	strb	r2, [r3, #2]
        tmp[3] = 0xA3;
10009c6c:	70da      	strb	r2, [r3, #3]
10009c6e:	25c0      	movs	r5, #192	; 0xc0
10009c70:	006d      	lsls	r5, r5, #1
10009c72:	4025      	ands	r5, r4
    }
    if (mask & DMP_FEATURE_SEND_ANY_GYRO) {
10009c74:	d007      	beq.n	10009c86 <dmp_enable_feature+0x5e>
        tmp[4] = 0xC4;
10009c76:	ab01      	add	r3, sp, #4
10009c78:	22c4      	movs	r2, #196	; 0xc4
10009c7a:	711a      	strb	r2, [r3, #4]
        tmp[5] = 0xCC;
10009c7c:	3208      	adds	r2, #8
10009c7e:	715a      	strb	r2, [r3, #5]
        tmp[6] = 0xC6;
10009c80:	3a06      	subs	r2, #6
10009c82:	719a      	strb	r2, [r3, #6]
10009c84:	e004      	b.n	10009c90 <dmp_enable_feature+0x68>
    } else {
        tmp[4] = 0xA3;
10009c86:	ab01      	add	r3, sp, #4
10009c88:	22a3      	movs	r2, #163	; 0xa3
10009c8a:	711a      	strb	r2, [r3, #4]
        tmp[5] = 0xA3;
10009c8c:	715a      	strb	r2, [r3, #5]
        tmp[6] = 0xA3;
10009c8e:	719a      	strb	r2, [r3, #6]
    }
    tmp[7] = 0xA3;
10009c90:	aa01      	add	r2, sp, #4
10009c92:	23a3      	movs	r3, #163	; 0xa3
10009c94:	71d3      	strb	r3, [r2, #7]
    tmp[8] = 0xA3;
10009c96:	7213      	strb	r3, [r2, #8]
    tmp[9] = 0xA3;
10009c98:	7253      	strb	r3, [r2, #9]
    mpu_write_mem(CFG_15,10,tmp);
10009c9a:	210a      	movs	r1, #10
10009c9c:	4855      	ldr	r0, [pc, #340]	; (10009df4 <dmp_enable_feature+0x1cc>)
10009c9e:	4b54      	ldr	r3, [pc, #336]	; (10009df0 <dmp_enable_feature+0x1c8>)
10009ca0:	4798      	blx	r3
10009ca2:	2603      	movs	r6, #3
10009ca4:	4026      	ands	r6, r4

    /* Send gesture data to the FIFO. */
    if (mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
10009ca6:	d003      	beq.n	10009cb0 <dmp_enable_feature+0x88>
        tmp[0] = DINA20;
10009ca8:	2220      	movs	r2, #32
10009caa:	ab01      	add	r3, sp, #4
10009cac:	701a      	strb	r2, [r3, #0]
10009cae:	e002      	b.n	10009cb6 <dmp_enable_feature+0x8e>
    else
        tmp[0] = 0xD8;
10009cb0:	22d8      	movs	r2, #216	; 0xd8
10009cb2:	ab01      	add	r3, sp, #4
10009cb4:	701a      	strb	r2, [r3, #0]
    mpu_write_mem(CFG_27,1,tmp);
10009cb6:	aa01      	add	r2, sp, #4
10009cb8:	2101      	movs	r1, #1
10009cba:	484f      	ldr	r0, [pc, #316]	; (10009df8 <dmp_enable_feature+0x1d0>)
10009cbc:	4b4c      	ldr	r3, [pc, #304]	; (10009df0 <dmp_enable_feature+0x1c8>)
10009cbe:	4798      	blx	r3

    if (mask & DMP_FEATURE_GYRO_CAL)
10009cc0:	06a3      	lsls	r3, r4, #26
10009cc2:	d503      	bpl.n	10009ccc <dmp_enable_feature+0xa4>
        dmp_enable_gyro_cal(1);
10009cc4:	2001      	movs	r0, #1
10009cc6:	4b4d      	ldr	r3, [pc, #308]	; (10009dfc <dmp_enable_feature+0x1d4>)
10009cc8:	4798      	blx	r3
10009cca:	e002      	b.n	10009cd2 <dmp_enable_feature+0xaa>
    else
        dmp_enable_gyro_cal(0);
10009ccc:	2000      	movs	r0, #0
10009cce:	4b4b      	ldr	r3, [pc, #300]	; (10009dfc <dmp_enable_feature+0x1d4>)
10009cd0:	4798      	blx	r3

    if (mask & DMP_FEATURE_SEND_ANY_GYRO) {
10009cd2:	2d00      	cmp	r5, #0
10009cd4:	d019      	beq.n	10009d0a <dmp_enable_feature+0xe2>
        if (mask & DMP_FEATURE_SEND_CAL_GYRO) {
10009cd6:	05e3      	lsls	r3, r4, #23
10009cd8:	d509      	bpl.n	10009cee <dmp_enable_feature+0xc6>
            tmp[0] = 0xB2;
10009cda:	ab01      	add	r3, sp, #4
10009cdc:	22b2      	movs	r2, #178	; 0xb2
10009cde:	701a      	strb	r2, [r3, #0]
            tmp[1] = 0x8B;
10009ce0:	3a27      	subs	r2, #39	; 0x27
10009ce2:	705a      	strb	r2, [r3, #1]
            tmp[2] = 0xB6;
10009ce4:	322b      	adds	r2, #43	; 0x2b
10009ce6:	709a      	strb	r2, [r3, #2]
            tmp[3] = 0x9B;
10009ce8:	3a1b      	subs	r2, #27
10009cea:	70da      	strb	r2, [r3, #3]
10009cec:	e008      	b.n	10009d00 <dmp_enable_feature+0xd8>
        } else {
            tmp[0] = DINAC0;
10009cee:	ab01      	add	r3, sp, #4
10009cf0:	22b0      	movs	r2, #176	; 0xb0
10009cf2:	701a      	strb	r2, [r3, #0]
            tmp[1] = DINA80;
10009cf4:	3a30      	subs	r2, #48	; 0x30
10009cf6:	705a      	strb	r2, [r3, #1]
            tmp[2] = DINAC2;
10009cf8:	3234      	adds	r2, #52	; 0x34
10009cfa:	709a      	strb	r2, [r3, #2]
            tmp[3] = DINA90;
10009cfc:	3a24      	subs	r2, #36	; 0x24
10009cfe:	70da      	strb	r2, [r3, #3]
        }
        mpu_write_mem(CFG_GYRO_RAW_DATA, 4, tmp);
10009d00:	aa01      	add	r2, sp, #4
10009d02:	2104      	movs	r1, #4
10009d04:	483e      	ldr	r0, [pc, #248]	; (10009e00 <dmp_enable_feature+0x1d8>)
10009d06:	4b3a      	ldr	r3, [pc, #232]	; (10009df0 <dmp_enable_feature+0x1c8>)
10009d08:	4798      	blx	r3
    }

    if (mask & DMP_FEATURE_TAP) {
10009d0a:	07e3      	lsls	r3, r4, #31
10009d0c:	d523      	bpl.n	10009d56 <dmp_enable_feature+0x12e>
        /* Enable tap. */
        tmp[0] = 0xF8;
10009d0e:	aa01      	add	r2, sp, #4
10009d10:	23f8      	movs	r3, #248	; 0xf8
10009d12:	7013      	strb	r3, [r2, #0]
        mpu_write_mem(CFG_20, 1, tmp);
10009d14:	2101      	movs	r1, #1
10009d16:	208b      	movs	r0, #139	; 0x8b
10009d18:	0100      	lsls	r0, r0, #4
10009d1a:	4b35      	ldr	r3, [pc, #212]	; (10009df0 <dmp_enable_feature+0x1c8>)
10009d1c:	4798      	blx	r3
        dmp_set_tap_thresh(TAP_XYZ, 250);
10009d1e:	21fa      	movs	r1, #250	; 0xfa
10009d20:	2007      	movs	r0, #7
10009d22:	4b38      	ldr	r3, [pc, #224]	; (10009e04 <dmp_enable_feature+0x1dc>)
10009d24:	4798      	blx	r3
        dmp_set_tap_axes(TAP_XYZ);
10009d26:	2007      	movs	r0, #7
10009d28:	4b37      	ldr	r3, [pc, #220]	; (10009e08 <dmp_enable_feature+0x1e0>)
10009d2a:	4798      	blx	r3
        dmp_set_tap_count(1);
10009d2c:	2001      	movs	r0, #1
10009d2e:	4b37      	ldr	r3, [pc, #220]	; (10009e0c <dmp_enable_feature+0x1e4>)
10009d30:	4798      	blx	r3
        dmp_set_tap_time(100);
10009d32:	2064      	movs	r0, #100	; 0x64
10009d34:	4b36      	ldr	r3, [pc, #216]	; (10009e10 <dmp_enable_feature+0x1e8>)
10009d36:	4798      	blx	r3
        dmp_set_tap_time_multi(500);
10009d38:	20fa      	movs	r0, #250	; 0xfa
10009d3a:	0040      	lsls	r0, r0, #1
10009d3c:	4b35      	ldr	r3, [pc, #212]	; (10009e14 <dmp_enable_feature+0x1ec>)
10009d3e:	4798      	blx	r3

        dmp_set_shake_reject_thresh(GYRO_SF, 200);
10009d40:	21c8      	movs	r1, #200	; 0xc8
10009d42:	4835      	ldr	r0, [pc, #212]	; (10009e18 <dmp_enable_feature+0x1f0>)
10009d44:	4b35      	ldr	r3, [pc, #212]	; (10009e1c <dmp_enable_feature+0x1f4>)
10009d46:	4798      	blx	r3
        dmp_set_shake_reject_time(40);
10009d48:	2028      	movs	r0, #40	; 0x28
10009d4a:	4b35      	ldr	r3, [pc, #212]	; (10009e20 <dmp_enable_feature+0x1f8>)
10009d4c:	4798      	blx	r3
        dmp_set_shake_reject_timeout(10);
10009d4e:	200a      	movs	r0, #10
10009d50:	4b34      	ldr	r3, [pc, #208]	; (10009e24 <dmp_enable_feature+0x1fc>)
10009d52:	4798      	blx	r3
10009d54:	e007      	b.n	10009d66 <dmp_enable_feature+0x13e>
    } else {
        tmp[0] = 0xD8;
10009d56:	aa01      	add	r2, sp, #4
10009d58:	23d8      	movs	r3, #216	; 0xd8
10009d5a:	7013      	strb	r3, [r2, #0]
        mpu_write_mem(CFG_20, 1, tmp);
10009d5c:	2101      	movs	r1, #1
10009d5e:	208b      	movs	r0, #139	; 0x8b
10009d60:	0100      	lsls	r0, r0, #4
10009d62:	4b23      	ldr	r3, [pc, #140]	; (10009df0 <dmp_enable_feature+0x1c8>)
10009d64:	4798      	blx	r3
    }

    if (mask & DMP_FEATURE_ANDROID_ORIENT) {
10009d66:	07a3      	lsls	r3, r4, #30
10009d68:	d503      	bpl.n	10009d72 <dmp_enable_feature+0x14a>
        tmp[0] = 0xD9;
10009d6a:	22d9      	movs	r2, #217	; 0xd9
10009d6c:	ab01      	add	r3, sp, #4
10009d6e:	701a      	strb	r2, [r3, #0]
10009d70:	e002      	b.n	10009d78 <dmp_enable_feature+0x150>
    } else
        tmp[0] = 0xD8;
10009d72:	22d8      	movs	r2, #216	; 0xd8
10009d74:	ab01      	add	r3, sp, #4
10009d76:	701a      	strb	r2, [r3, #0]
    mpu_write_mem(CFG_ANDROID_ORIENT_INT, 1, tmp);
10009d78:	aa01      	add	r2, sp, #4
10009d7a:	2101      	movs	r1, #1
10009d7c:	482a      	ldr	r0, [pc, #168]	; (10009e28 <dmp_enable_feature+0x200>)
10009d7e:	4b1c      	ldr	r3, [pc, #112]	; (10009df0 <dmp_enable_feature+0x1c8>)
10009d80:	4798      	blx	r3

    if (mask & DMP_FEATURE_LP_QUAT)
10009d82:	0763      	lsls	r3, r4, #29
10009d84:	d503      	bpl.n	10009d8e <dmp_enable_feature+0x166>
        dmp_enable_lp_quat(1);
10009d86:	2001      	movs	r0, #1
10009d88:	4b28      	ldr	r3, [pc, #160]	; (10009e2c <dmp_enable_feature+0x204>)
10009d8a:	4798      	blx	r3
10009d8c:	e002      	b.n	10009d94 <dmp_enable_feature+0x16c>
    else
        dmp_enable_lp_quat(0);
10009d8e:	2000      	movs	r0, #0
10009d90:	4b26      	ldr	r3, [pc, #152]	; (10009e2c <dmp_enable_feature+0x204>)
10009d92:	4798      	blx	r3

    if (mask & DMP_FEATURE_6X_LP_QUAT)
10009d94:	06e3      	lsls	r3, r4, #27
10009d96:	d503      	bpl.n	10009da0 <dmp_enable_feature+0x178>
        dmp_enable_6x_lp_quat(1);
10009d98:	2001      	movs	r0, #1
10009d9a:	4b25      	ldr	r3, [pc, #148]	; (10009e30 <dmp_enable_feature+0x208>)
10009d9c:	4798      	blx	r3
10009d9e:	e002      	b.n	10009da6 <dmp_enable_feature+0x17e>
    else
        dmp_enable_6x_lp_quat(0);
10009da0:	2000      	movs	r0, #0
10009da2:	4b23      	ldr	r3, [pc, #140]	; (10009e30 <dmp_enable_feature+0x208>)
10009da4:	4798      	blx	r3

    /* Pedometer is always enabled. */
    dmp.feature_mask = mask | DMP_FEATURE_PEDOMETER;
10009da6:	2308      	movs	r3, #8
10009da8:	4323      	orrs	r3, r4
10009daa:	4a22      	ldr	r2, [pc, #136]	; (10009e34 <dmp_enable_feature+0x20c>)
10009dac:	8153      	strh	r3, [r2, #10]
    mpu_reset_fifo();
10009dae:	4b22      	ldr	r3, [pc, #136]	; (10009e38 <dmp_enable_feature+0x210>)
10009db0:	4798      	blx	r3

    dmp.packet_length = 0;
    if (mask & DMP_FEATURE_SEND_RAW_ACCEL)
10009db2:	2f00      	cmp	r7, #0
10009db4:	d103      	bne.n	10009dbe <dmp_enable_feature+0x196>

    /* Pedometer is always enabled. */
    dmp.feature_mask = mask | DMP_FEATURE_PEDOMETER;
    mpu_reset_fifo();

    dmp.packet_length = 0;
10009db6:	2200      	movs	r2, #0
10009db8:	4b1e      	ldr	r3, [pc, #120]	; (10009e34 <dmp_enable_feature+0x20c>)
10009dba:	739a      	strb	r2, [r3, #14]
10009dbc:	e002      	b.n	10009dc4 <dmp_enable_feature+0x19c>
    if (mask & DMP_FEATURE_SEND_RAW_ACCEL)
        dmp.packet_length += 6;
10009dbe:	2206      	movs	r2, #6
10009dc0:	4b1c      	ldr	r3, [pc, #112]	; (10009e34 <dmp_enable_feature+0x20c>)
10009dc2:	739a      	strb	r2, [r3, #14]
    if (mask & DMP_FEATURE_SEND_ANY_GYRO)
10009dc4:	2d00      	cmp	r5, #0
10009dc6:	d003      	beq.n	10009dd0 <dmp_enable_feature+0x1a8>
        dmp.packet_length += 6;
10009dc8:	4a1a      	ldr	r2, [pc, #104]	; (10009e34 <dmp_enable_feature+0x20c>)
10009dca:	7b93      	ldrb	r3, [r2, #14]
10009dcc:	3306      	adds	r3, #6
10009dce:	7393      	strb	r3, [r2, #14]
    if (mask & (DMP_FEATURE_LP_QUAT | DMP_FEATURE_6X_LP_QUAT))
10009dd0:	2314      	movs	r3, #20
10009dd2:	4223      	tst	r3, r4
10009dd4:	d003      	beq.n	10009dde <dmp_enable_feature+0x1b6>
        dmp.packet_length += 16;
10009dd6:	4a17      	ldr	r2, [pc, #92]	; (10009e34 <dmp_enable_feature+0x20c>)
10009dd8:	7b93      	ldrb	r3, [r2, #14]
10009dda:	3310      	adds	r3, #16
10009ddc:	7393      	strb	r3, [r2, #14]
    if (mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
10009dde:	2e00      	cmp	r6, #0
10009de0:	d003      	beq.n	10009dea <dmp_enable_feature+0x1c2>
        dmp.packet_length += 4;
10009de2:	4a14      	ldr	r2, [pc, #80]	; (10009e34 <dmp_enable_feature+0x20c>)
10009de4:	7b93      	ldrb	r3, [r2, #14]
10009de6:	3304      	adds	r3, #4
10009de8:	7393      	strb	r3, [r2, #14]

    return 0;
}
10009dea:	2000      	movs	r0, #0
10009dec:	b005      	add	sp, #20
10009dee:	bdf0      	pop	{r4, r5, r6, r7, pc}
10009df0:	100095e1 	.word	0x100095e1
10009df4:	00000aa7 	.word	0x00000aa7
10009df8:	00000ab6 	.word	0x00000ab6
10009dfc:	10009b55 	.word	0x10009b55
10009e00:	00000aa2 	.word	0x00000aa2
10009e04:	10009845 	.word	0x10009845
10009e08:	100099f1 	.word	0x100099f1
10009e0c:	10009a3d 	.word	0x10009a3d
10009e10:	10009a6d 	.word	0x10009a6d
10009e14:	10009a99 	.word	0x10009a99
10009e18:	02cae309 	.word	0x02cae309
10009e1c:	10009ac5 	.word	0x10009ac5
10009e20:	10009afd 	.word	0x10009afd
10009e24:	10009b29 	.word	0x10009b29
10009e28:	0000073d 	.word	0x0000073d
10009e2c:	10009ba1 	.word	0x10009ba1
10009e30:	10009be5 	.word	0x10009be5
10009e34:	100186cc 	.word	0x100186cc
10009e38:	100085bd 	.word	0x100085bd

10009e3c <sms_ble_pair_request_fn>:
    return AT_BLE_SUCCESS;
}

/* AT_BLE_PAIR_REQUEST (#10) */
at_ble_status_t sms_ble_pair_request_fn(void *params)
{
10009e3c:	b510      	push	{r4, lr}
10009e3e:	b082      	sub	sp, #8
    at_ble_pair_request_t *request = (at_ble_pair_request_t *)params;
    DBG_LOG_DEV("[sms_ble_pair_request_fn]\tPairing request... Bnew %d, BLE 0x%02x, T1 %d, T2 %d", button_instance.current_state, ble_current_state, timer1_current_mode, timer2_current_mode);
10009e40:	4809      	ldr	r0, [pc, #36]	; (10009e68 <sms_ble_pair_request_fn+0x2c>)
10009e42:	4b0a      	ldr	r3, [pc, #40]	; (10009e6c <sms_ble_pair_request_fn+0x30>)
10009e44:	4798      	blx	r3
10009e46:	4b0a      	ldr	r3, [pc, #40]	; (10009e70 <sms_ble_pair_request_fn+0x34>)
10009e48:	781a      	ldrb	r2, [r3, #0]
10009e4a:	b2d2      	uxtb	r2, r2
10009e4c:	4b09      	ldr	r3, [pc, #36]	; (10009e74 <sms_ble_pair_request_fn+0x38>)
10009e4e:	781b      	ldrb	r3, [r3, #0]
10009e50:	b2db      	uxtb	r3, r3
10009e52:	4909      	ldr	r1, [pc, #36]	; (10009e78 <sms_ble_pair_request_fn+0x3c>)
10009e54:	7808      	ldrb	r0, [r1, #0]
10009e56:	4909      	ldr	r1, [pc, #36]	; (10009e7c <sms_ble_pair_request_fn+0x40>)
10009e58:	7849      	ldrb	r1, [r1, #1]
10009e5a:	9000      	str	r0, [sp, #0]
10009e5c:	4808      	ldr	r0, [pc, #32]	; (10009e80 <sms_ble_pair_request_fn+0x44>)
10009e5e:	4c09      	ldr	r4, [pc, #36]	; (10009e84 <sms_ble_pair_request_fn+0x48>)
10009e60:	47a0      	blx	r4
    //DBG_LOG_DEV("- conn handle: 0x%04x\r\n- peer features: 0x%02x", request->handle, request->peer_features);
    return AT_BLE_SUCCESS;
}
10009e62:	2000      	movs	r0, #0
10009e64:	b002      	add	sp, #8
10009e66:	bd10      	pop	{r4, pc}
10009e68:	1001663c 	.word	0x1001663c
10009e6c:	10015495 	.word	0x10015495
10009e70:	1001a330 	.word	0x1001a330
10009e74:	1001a184 	.word	0x1001a184
10009e78:	1001a331 	.word	0x1001a331
10009e7c:	1001a220 	.word	0x1001a220
10009e80:	100168d4 	.word	0x100168d4
10009e84:	10015375 	.word	0x10015375

10009e88 <sms_ble_notification_confirmed_fn>:

/* AT_BLE_NOTIFICATION_CONFIRMED (#29) */
at_ble_status_t sms_ble_notification_confirmed_fn(void *params)
{
10009e88:	b510      	push	{r4, lr}
    
    at_ble_cmd_complete_event_t *notification_status = (at_ble_cmd_complete_event_t *)params;
    //button_instance.current_state = sms_button_get_state();
    //DBG_LOG_DEV("[sms_ble_notification_confirmed_fn]\tNotification sent... Bnew %d, BLE 0x%02x, T1 %d, T2 %d", button_instance.current_state, ble_current_state, timer1_current_mode, timer2_current_mode);
    //DBG_LOG_DEV("- conn handle: 0x%04x\r\n- operation: 0x%02x\r\n- status: 0x%02x", notification_status->conn_handle, notification_status->operation, notification_status->status);
    sms_dualtimer_stop(DUALTIMER_TIMER2);
10009e8a:	2001      	movs	r0, #1
10009e8c:	4b08      	ldr	r3, [pc, #32]	; (10009eb0 <sms_ble_notification_confirmed_fn+0x28>)
10009e8e:	4798      	blx	r3
    timer2_current_mode = TIMER2_MODE_NONE;
10009e90:	2200      	movs	r2, #0
10009e92:	4b08      	ldr	r3, [pc, #32]	; (10009eb4 <sms_ble_notification_confirmed_fn+0x2c>)
10009e94:	701a      	strb	r2, [r3, #0]
    ble_current_state = BLE_STATE_PAIRED;
10009e96:	3222      	adds	r2, #34	; 0x22
10009e98:	4b07      	ldr	r3, [pc, #28]	; (10009eb8 <sms_ble_notification_confirmed_fn+0x30>)
10009e9a:	701a      	strb	r2, [r3, #0]
    //DBG_LOG_CONT_DEV(" done!");

    //gpio_pin_set_output_level(dbg_pin, DBG_PIN_LOW);
    
    //DBG_LOG_DEV("Timer1 current mode: %d", timer1_current_mode);
    if(timer1_current_mode == TIMER1_MODE_NONE) {
10009e9c:	4b07      	ldr	r3, [pc, #28]	; (10009ebc <sms_ble_notification_confirmed_fn+0x34>)
10009e9e:	781b      	ldrb	r3, [r3, #0]
10009ea0:	2b00      	cmp	r3, #0
10009ea2:	d102      	bne.n	10009eaa <sms_ble_notification_confirmed_fn+0x22>
        ulp_ready = true;
10009ea4:	3a21      	subs	r2, #33	; 0x21
10009ea6:	4b06      	ldr	r3, [pc, #24]	; (10009ec0 <sms_ble_notification_confirmed_fn+0x38>)
10009ea8:	701a      	strb	r2, [r3, #0]
    }
    return AT_BLE_SUCCESS;
}
10009eaa:	2000      	movs	r0, #0
10009eac:	bd10      	pop	{r4, pc}
10009eae:	46c0      	nop			; (mov r8, r8)
10009eb0:	1000b601 	.word	0x1000b601
10009eb4:	1001a331 	.word	0x1001a331
10009eb8:	1001a330 	.word	0x1001a330
10009ebc:	1001a184 	.word	0x1001a184
10009ec0:	1001a219 	.word	0x1001a219

10009ec4 <sms_ble_indication_confirmed_fn>:

/* AT_BLE_INDICATION_CONFIRMED (#30) */
at_ble_status_t sms_ble_indication_confirmed_fn(void *params)
{
10009ec4:	b510      	push	{r4, lr}
    
    at_ble_indication_confirmed_t *indication_status = (at_ble_indication_confirmed_t *)params;
    //button_instance.current_state = sms_button_get_state();
    //DBG_LOG_DEV("[sms_ble_indication_confirmed]\tIndication confirmed... Bnew %d, BLE 0x%02x, T1 %d, T2 %d", button_instance.current_state, ble_current_state, timer1_current_mode, timer2_current_mode);
    //DBG_LOG_DEV("- conn handle: 0x%04x\r\n- char handle: 0x%04x\r\n- status: 0x%02x", indication_status->conn_handle, indication_status->char_handle, indication_status->status);
    sms_dualtimer_stop(DUALTIMER_TIMER2);
10009ec6:	2001      	movs	r0, #1
10009ec8:	4b08      	ldr	r3, [pc, #32]	; (10009eec <sms_ble_indication_confirmed_fn+0x28>)
10009eca:	4798      	blx	r3
    timer2_current_mode = TIMER2_MODE_NONE;
10009ecc:	2200      	movs	r2, #0
10009ece:	4b08      	ldr	r3, [pc, #32]	; (10009ef0 <sms_ble_indication_confirmed_fn+0x2c>)
10009ed0:	701a      	strb	r2, [r3, #0]
    ble_current_state = BLE_STATE_PAIRED;
10009ed2:	3222      	adds	r2, #34	; 0x22
10009ed4:	4b07      	ldr	r3, [pc, #28]	; (10009ef4 <sms_ble_indication_confirmed_fn+0x30>)
10009ed6:	701a      	strb	r2, [r3, #0]
    //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
    //sms_sensors_toggle_interrupt(SMS_EXTINT_ENABLE);
    
    //gpio_pin_set_output_level(dbg_pin, DBG_PIN_LOW);
    
    if(timer1_current_mode == TIMER1_MODE_NONE) {
10009ed8:	4b07      	ldr	r3, [pc, #28]	; (10009ef8 <sms_ble_indication_confirmed_fn+0x34>)
10009eda:	781b      	ldrb	r3, [r3, #0]
10009edc:	2b00      	cmp	r3, #0
10009ede:	d102      	bne.n	10009ee6 <sms_ble_indication_confirmed_fn+0x22>
        ulp_ready = true;
10009ee0:	3a21      	subs	r2, #33	; 0x21
10009ee2:	4b06      	ldr	r3, [pc, #24]	; (10009efc <sms_ble_indication_confirmed_fn+0x38>)
10009ee4:	701a      	strb	r2, [r3, #0]
    }        
    return AT_BLE_SUCCESS;
}
10009ee6:	2000      	movs	r0, #0
10009ee8:	bd10      	pop	{r4, pc}
10009eea:	46c0      	nop			; (mov r8, r8)
10009eec:	1000b601 	.word	0x1000b601
10009ef0:	1001a331 	.word	0x1001a331
10009ef4:	1001a330 	.word	0x1001a330
10009ef8:	1001a184 	.word	0x1001a184
10009efc:	1001a219 	.word	0x1001a219

10009f00 <sms_ble_startup>:
#include <stdio.h>
//#include <stdlib.h>
#include "sms_peripheral1.h"

void sms_ble_startup(void)
{
10009f00:	b510      	push	{r4, lr}
    //sms_button_toggle_interrupt(SMS_BTN_INT_DISABLE, SMS_BTN_INT_DISABLE);
    timer2_current_mode = TIMER2_MODE_LED_STARTUP;
10009f02:	2202      	movs	r2, #2
10009f04:	4b02      	ldr	r3, [pc, #8]	; (10009f10 <sms_ble_startup+0x10>)
10009f06:	701a      	strb	r2, [r3, #0]
    sms_led_blink_start(SMS_LED_0_PIN);
10009f08:	2016      	movs	r0, #22
10009f0a:	4b02      	ldr	r3, [pc, #8]	; (10009f14 <sms_ble_startup+0x14>)
10009f0c:	4798      	blx	r3
}
10009f0e:	bd10      	pop	{r4, pc}
10009f10:	1001a331 	.word	0x1001a331
10009f14:	1000afa5 	.word	0x1000afa5

10009f18 <sms_ble_power_down>:

void sms_ble_power_down(void)
{
10009f18:	b510      	push	{r4, lr}
    sms_monitor_get_states("[sms_ble_power_down]");
10009f1a:	482c      	ldr	r0, [pc, #176]	; (10009fcc <sms_ble_power_down+0xb4>)
10009f1c:	4b2c      	ldr	r3, [pc, #176]	; (10009fd0 <sms_ble_power_down+0xb8>)
10009f1e:	4798      	blx	r3
    if(ble_current_state == BLE_STATE_POWEROFF) {
10009f20:	4b2c      	ldr	r3, [pc, #176]	; (10009fd4 <sms_ble_power_down+0xbc>)
10009f22:	781b      	ldrb	r3, [r3, #0]
10009f24:	2b00      	cmp	r3, #0
10009f26:	d105      	bne.n	10009f34 <sms_ble_power_down+0x1c>
        /* If already power off state, then go back sleeping */
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        ulp_ready = true;
10009f28:	2201      	movs	r2, #1
10009f2a:	4b2b      	ldr	r3, [pc, #172]	; (10009fd8 <sms_ble_power_down+0xc0>)
10009f2c:	701a      	strb	r2, [r3, #0]
        release_sleep_lock();
10009f2e:	4b2b      	ldr	r3, [pc, #172]	; (10009fdc <sms_ble_power_down+0xc4>)
10009f30:	4798      	blx	r3
10009f32:	e049      	b.n	10009fc8 <sms_ble_power_down+0xb0>
    }
    else {
        /* Disable button interrupts */
        //sms_button_toggle_interrupt(SMS_BTN_INT_DISABLE, SMS_BTN_INT_DISABLE);        
        /* Disconnect if necessary from BLE network */
        switch(ble_current_state) {
10009f34:	4b27      	ldr	r3, [pc, #156]	; (10009fd4 <sms_ble_power_down+0xbc>)
10009f36:	781b      	ldrb	r3, [r3, #0]
10009f38:	b2db      	uxtb	r3, r3
10009f3a:	2b21      	cmp	r3, #33	; 0x21
10009f3c:	d030      	beq.n	10009fa0 <sms_ble_power_down+0x88>
10009f3e:	d802      	bhi.n	10009f46 <sms_ble_power_down+0x2e>
10009f40:	2b20      	cmp	r3, #32
10009f42:	d005      	beq.n	10009f50 <sms_ble_power_down+0x38>
10009f44:	e037      	b.n	10009fb6 <sms_ble_power_down+0x9e>
10009f46:	2b22      	cmp	r3, #34	; 0x22
10009f48:	d017      	beq.n	10009f7a <sms_ble_power_down+0x62>
10009f4a:	2b23      	cmp	r3, #35	; 0x23
10009f4c:	d01b      	beq.n	10009f86 <sms_ble_power_down+0x6e>
10009f4e:	e032      	b.n	10009fb6 <sms_ble_power_down+0x9e>
            case BLE_STATE_ADVERTISING:
            DBG_LOG_DEV("[sms_ble_power_down]\tStopping command received during advertisement. Stopping... ");
10009f50:	4823      	ldr	r0, [pc, #140]	; (10009fe0 <sms_ble_power_down+0xc8>)
10009f52:	4b24      	ldr	r3, [pc, #144]	; (10009fe4 <sms_ble_power_down+0xcc>)
10009f54:	4798      	blx	r3
10009f56:	4824      	ldr	r0, [pc, #144]	; (10009fe8 <sms_ble_power_down+0xd0>)
10009f58:	4b24      	ldr	r3, [pc, #144]	; (10009fec <sms_ble_power_down+0xd4>)
10009f5a:	4798      	blx	r3
            if(at_ble_adv_stop() != AT_BLE_SUCCESS) {
10009f5c:	4b24      	ldr	r3, [pc, #144]	; (10009ff0 <sms_ble_power_down+0xd8>)
10009f5e:	4798      	blx	r3
10009f60:	2800      	cmp	r0, #0
10009f62:	d003      	beq.n	10009f6c <sms_ble_power_down+0x54>
                DBG_LOG_CONT_DEV("failed!!!");
10009f64:	4823      	ldr	r0, [pc, #140]	; (10009ff4 <sms_ble_power_down+0xdc>)
10009f66:	4b21      	ldr	r3, [pc, #132]	; (10009fec <sms_ble_power_down+0xd4>)
10009f68:	4798      	blx	r3
10009f6a:	e024      	b.n	10009fb6 <sms_ble_power_down+0x9e>
                //#pragma TBD: manage adv_stop failure
            }
            else {
                DBG_LOG_CONT_DEV("done!");
10009f6c:	4822      	ldr	r0, [pc, #136]	; (10009ff8 <sms_ble_power_down+0xe0>)
10009f6e:	4b1f      	ldr	r3, [pc, #124]	; (10009fec <sms_ble_power_down+0xd4>)
10009f70:	4798      	blx	r3
                ble_current_state = BLE_STATE_DISCONNECTED;
10009f72:	2211      	movs	r2, #17
10009f74:	4b17      	ldr	r3, [pc, #92]	; (10009fd4 <sms_ble_power_down+0xbc>)
10009f76:	701a      	strb	r2, [r3, #0]
10009f78:	e01d      	b.n	10009fb6 <sms_ble_power_down+0x9e>
            }
            break;
            
            case BLE_STATE_PAIRED:
            DBG_LOG_DEV("[sms_ble_power_down]\t\tDevice paired... disabling interrupts & switching down sensors");
10009f7a:	4819      	ldr	r0, [pc, #100]	; (10009fe0 <sms_ble_power_down+0xc8>)
10009f7c:	4b19      	ldr	r3, [pc, #100]	; (10009fe4 <sms_ble_power_down+0xcc>)
10009f7e:	4798      	blx	r3
10009f80:	481e      	ldr	r0, [pc, #120]	; (10009ffc <sms_ble_power_down+0xe4>)
10009f82:	4b1a      	ldr	r3, [pc, #104]	; (10009fec <sms_ble_power_down+0xd4>)
10009f84:	4798      	blx	r3
            
            case BLE_STATE_INDICATING:
            DBG_LOG_DEV("[sms_ble_power_down]\t\tCurrently indicating");
10009f86:	4816      	ldr	r0, [pc, #88]	; (10009fe0 <sms_ble_power_down+0xc8>)
10009f88:	4b16      	ldr	r3, [pc, #88]	; (10009fe4 <sms_ble_power_down+0xcc>)
10009f8a:	4798      	blx	r3
10009f8c:	481c      	ldr	r0, [pc, #112]	; (1000a000 <sms_ble_power_down+0xe8>)
10009f8e:	4b17      	ldr	r3, [pc, #92]	; (10009fec <sms_ble_power_down+0xd4>)
10009f90:	4798      	blx	r3
            pressure_device.state = PRESSURE_STATE_OFF;
10009f92:	2100      	movs	r1, #0
10009f94:	2328      	movs	r3, #40	; 0x28
10009f96:	4a1b      	ldr	r2, [pc, #108]	; (1000a004 <sms_ble_power_down+0xec>)
10009f98:	54d1      	strb	r1, [r2, r3]
            sms_sensors_interrupt_toggle(false, false);
10009f9a:	2000      	movs	r0, #0
10009f9c:	4b1a      	ldr	r3, [pc, #104]	; (1000a008 <sms_ble_power_down+0xf0>)
10009f9e:	4798      	blx	r3
            //#pragma TBD: switch-off sensors to save current
            //sms_sensors_switch(false);
            
            case BLE_STATE_CONNECTED:
            DBG_LOG_DEV("[sms_ble_power_down]\t\tDevice connected... disconnecting");
10009fa0:	480f      	ldr	r0, [pc, #60]	; (10009fe0 <sms_ble_power_down+0xc8>)
10009fa2:	4b10      	ldr	r3, [pc, #64]	; (10009fe4 <sms_ble_power_down+0xcc>)
10009fa4:	4798      	blx	r3
10009fa6:	4819      	ldr	r0, [pc, #100]	; (1000a00c <sms_ble_power_down+0xf4>)
10009fa8:	4b10      	ldr	r3, [pc, #64]	; (10009fec <sms_ble_power_down+0xd4>)
10009faa:	4798      	blx	r3
            at_ble_disconnect(sms_connection_handle, AT_BLE_TERMINATED_BY_USER);
10009fac:	4b18      	ldr	r3, [pc, #96]	; (1000a010 <sms_ble_power_down+0xf8>)
10009fae:	8818      	ldrh	r0, [r3, #0]
10009fb0:	2113      	movs	r1, #19
10009fb2:	4b18      	ldr	r3, [pc, #96]	; (1000a014 <sms_ble_power_down+0xfc>)
10009fb4:	4798      	blx	r3
            
            default:
            break;
        }
        
        ble_current_state = BLE_STATE_DISCONNECTED;
10009fb6:	2211      	movs	r2, #17
10009fb8:	4b06      	ldr	r3, [pc, #24]	; (10009fd4 <sms_ble_power_down+0xbc>)
10009fba:	701a      	strb	r2, [r3, #0]
        timer2_current_mode = TIMER2_MODE_LED_SHUTDOWN;
10009fbc:	3a0e      	subs	r2, #14
10009fbe:	4b16      	ldr	r3, [pc, #88]	; (1000a018 <sms_ble_power_down+0x100>)
10009fc0:	701a      	strb	r2, [r3, #0]
        sms_led_blink_start(SMS_LED_0_PIN);
10009fc2:	2016      	movs	r0, #22
10009fc4:	4b15      	ldr	r3, [pc, #84]	; (1000a01c <sms_ble_power_down+0x104>)
10009fc6:	4798      	blx	r3
    }
}
10009fc8:	bd10      	pop	{r4, pc}
10009fca:	46c0      	nop			; (mov r8, r8)
10009fcc:	10016924 	.word	0x10016924
10009fd0:	1000a9d9 	.word	0x1000a9d9
10009fd4:	1001a330 	.word	0x1001a330
10009fd8:	1001a219 	.word	0x1001a219
10009fdc:	1000f6ad 	.word	0x1000f6ad
10009fe0:	1001663c 	.word	0x1001663c
10009fe4:	10015495 	.word	0x10015495
10009fe8:	1001693c 	.word	0x1001693c
10009fec:	10015375 	.word	0x10015375
10009ff0:	10010a31 	.word	0x10010a31
10009ff4:	10016990 	.word	0x10016990
10009ff8:	1001699c 	.word	0x1001699c
10009ffc:	100169a4 	.word	0x100169a4
1000a000:	100169fc 	.word	0x100169fc
1000a004:	1001a294 	.word	0x1001a294
1000a008:	1000aa35 	.word	0x1000aa35
1000a00c:	10016a28 	.word	0x10016a28
1000a010:	1001a21a 	.word	0x1001a21a
1000a014:	10010a5d 	.word	0x10010a5d
1000a018:	1001a331 	.word	0x1001a331
1000a01c:	1000afa5 	.word	0x1000afa5

1000a020 <sms_ble_adv_report_fn>:
    return AT_BLE_FAILURE;
}

/* AT_BLE_ADV_REPORT (#3) */
at_ble_status_t sms_ble_adv_report_fn(void *params)
{
1000a020:	b510      	push	{r4, lr}
    at_ble_adv_report_t *adv_report = (at_ble_adv_report_t *)params;
    ble_current_state = BLE_STATE_DISCONNECTED;
1000a022:	2211      	movs	r2, #17
1000a024:	4b05      	ldr	r3, [pc, #20]	; (1000a03c <sms_ble_adv_report_fn+0x1c>)
1000a026:	701a      	strb	r2, [r3, #0]
    DBG_LOG_DEV("[sms_ble_adv_report_fn]\tAdvertisement timeout...");
1000a028:	4805      	ldr	r0, [pc, #20]	; (1000a040 <sms_ble_adv_report_fn+0x20>)
1000a02a:	4b06      	ldr	r3, [pc, #24]	; (1000a044 <sms_ble_adv_report_fn+0x24>)
1000a02c:	4798      	blx	r3
1000a02e:	4806      	ldr	r0, [pc, #24]	; (1000a048 <sms_ble_adv_report_fn+0x28>)
1000a030:	4b06      	ldr	r3, [pc, #24]	; (1000a04c <sms_ble_adv_report_fn+0x2c>)
1000a032:	4798      	blx	r3
    //DBG_LOG_DEV("- status: 0x%02x", adv_report->status);
    sms_ble_power_down();
1000a034:	4b06      	ldr	r3, [pc, #24]	; (1000a050 <sms_ble_adv_report_fn+0x30>)
1000a036:	4798      	blx	r3
    return AT_BLE_SUCCESS;
}
1000a038:	2000      	movs	r0, #0
1000a03a:	bd10      	pop	{r4, pc}
1000a03c:	1001a330 	.word	0x1001a330
1000a040:	1001663c 	.word	0x1001663c
1000a044:	10015495 	.word	0x10015495
1000a048:	10016a60 	.word	0x10016a60
1000a04c:	10015375 	.word	0x10015375
1000a050:	10009f19 	.word	0x10009f19

1000a054 <sms_ble_connected_fn>:

/* AT_BLE_CONNECTED (#5) */
at_ble_status_t sms_ble_connected_fn(void *params)
{
1000a054:	b510      	push	{r4, lr}
    if(ble_current_state == BLE_STATE_ADVERTISING) {
1000a056:	4b0a      	ldr	r3, [pc, #40]	; (1000a080 <sms_ble_connected_fn+0x2c>)
1000a058:	781b      	ldrb	r3, [r3, #0]
1000a05a:	2b20      	cmp	r3, #32
1000a05c:	d10c      	bne.n	1000a078 <sms_ble_connected_fn+0x24>
        at_ble_connected_t *connected = (at_ble_connected_t *)params;
        sms_ble_conn_handle = connected->handle;
1000a05e:	8902      	ldrh	r2, [r0, #8]
1000a060:	4b08      	ldr	r3, [pc, #32]	; (1000a084 <sms_ble_connected_fn+0x30>)
1000a062:	801a      	strh	r2, [r3, #0]
        ble_current_state = BLE_STATE_CONNECTED;
1000a064:	2221      	movs	r2, #33	; 0x21
1000a066:	4b06      	ldr	r3, [pc, #24]	; (1000a080 <sms_ble_connected_fn+0x2c>)
1000a068:	701a      	strb	r2, [r3, #0]
        DBG_LOG_DEV("[sms_ble_connected_fn]\t\tDevices connected...");
1000a06a:	4807      	ldr	r0, [pc, #28]	; (1000a088 <sms_ble_connected_fn+0x34>)
1000a06c:	4b07      	ldr	r3, [pc, #28]	; (1000a08c <sms_ble_connected_fn+0x38>)
1000a06e:	4798      	blx	r3
1000a070:	4807      	ldr	r0, [pc, #28]	; (1000a090 <sms_ble_connected_fn+0x3c>)
1000a072:	4b08      	ldr	r3, [pc, #32]	; (1000a094 <sms_ble_connected_fn+0x40>)
1000a074:	4798      	blx	r3
1000a076:	e001      	b.n	1000a07c <sms_ble_connected_fn+0x28>
        //for(uint8_t i = 0; i < AT_BLE_ADDR_LEN; i++) {
            //DBG_LOG_CONT_DEV("%02x",connected->peer_addr.addr[AT_BLE_ADDR_LEN - (i+1)]);
        //}            
    }
    else {
        sms_ble_power_down();
1000a078:	4b07      	ldr	r3, [pc, #28]	; (1000a098 <sms_ble_connected_fn+0x44>)
1000a07a:	4798      	blx	r3
    }    
    return AT_BLE_SUCCESS;
}
1000a07c:	2000      	movs	r0, #0
1000a07e:	bd10      	pop	{r4, pc}
1000a080:	1001a330 	.word	0x1001a330
1000a084:	1001a326 	.word	0x1001a326
1000a088:	1001663c 	.word	0x1001663c
1000a08c:	10015495 	.word	0x10015495
1000a090:	10016a94 	.word	0x10016a94
1000a094:	10015375 	.word	0x10015375
1000a098:	10009f19 	.word	0x10009f19

1000a09c <sms_ble_paired_fn>:
    return AT_BLE_SUCCESS;
}

/* AT_BLE_PAIR_DONE (#9) */
at_ble_status_t sms_ble_paired_fn(void *params)
{
1000a09c:	b510      	push	{r4, lr}
    if(ble_current_state == BLE_STATE_CONNECTED) {
1000a09e:	4b09      	ldr	r3, [pc, #36]	; (1000a0c4 <sms_ble_paired_fn+0x28>)
1000a0a0:	781b      	ldrb	r3, [r3, #0]
1000a0a2:	2b21      	cmp	r3, #33	; 0x21
1000a0a4:	d10a      	bne.n	1000a0bc <sms_ble_paired_fn+0x20>
        ble_current_state = BLE_STATE_PAIRED;
1000a0a6:	2222      	movs	r2, #34	; 0x22
1000a0a8:	4b06      	ldr	r3, [pc, #24]	; (1000a0c4 <sms_ble_paired_fn+0x28>)
1000a0aa:	701a      	strb	r2, [r3, #0]
        at_ble_pair_done_t *pair_status = (at_ble_pair_done_t *)params;
        sms_monitor_get_states("[sms_ble_paired_fn]");
1000a0ac:	4806      	ldr	r0, [pc, #24]	; (1000a0c8 <sms_ble_paired_fn+0x2c>)
1000a0ae:	4b07      	ldr	r3, [pc, #28]	; (1000a0cc <sms_ble_paired_fn+0x30>)
1000a0b0:	4798      	blx	r3
        //DBG_LOG_DEV("[sms_ble_paired_fn]\t\tDevices paired... Bnew %d, BLE 0x%02x, T1 %d, T2 %d", button_instance.current_state, ble_current_state, timer1_current_mode, timer2_current_mode);
        //DBG_LOG_DEV("- conn handle: 0x%04x\r\n- authorization: 0x%02x\r\n- status: 0x%02x", pair_status->handle, pair_status->auth, pair_status->status);
        sms_sensors_switch(true, true); // ! Release sleep lock & enable buttons interrupt after reset done!
1000a0b2:	2101      	movs	r1, #1
1000a0b4:	2001      	movs	r0, #1
1000a0b6:	4b06      	ldr	r3, [pc, #24]	; (1000a0d0 <sms_ble_paired_fn+0x34>)
1000a0b8:	4798      	blx	r3
1000a0ba:	e001      	b.n	1000a0c0 <sms_ble_paired_fn+0x24>
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
    }
    else {
        sms_ble_power_down();
1000a0bc:	4b05      	ldr	r3, [pc, #20]	; (1000a0d4 <sms_ble_paired_fn+0x38>)
1000a0be:	4798      	blx	r3
    }        
    return AT_BLE_SUCCESS;
}
1000a0c0:	2000      	movs	r0, #0
1000a0c2:	bd10      	pop	{r4, pc}
1000a0c4:	1001a330 	.word	0x1001a330
1000a0c8:	10016ac4 	.word	0x10016ac4
1000a0cc:	1000a9d9 	.word	0x1000a9d9
1000a0d0:	1000aac1 	.word	0x1000aac1
1000a0d4:	10009f19 	.word	0x10009f19

1000a0d8 <sms_ble_advertise>:
        sms_led_blink_start(SMS_LED_0_PIN);
    }
}

at_ble_status_t sms_ble_advertise(void)
{
1000a0d8:	b510      	push	{r4, lr}
1000a0da:	b084      	sub	sp, #16
    at_ble_status_t status = AT_BLE_FAILURE;
    ble_current_state = BLE_STATE_ADVERTISING;
1000a0dc:	2220      	movs	r2, #32
1000a0de:	4b17      	ldr	r3, [pc, #92]	; (1000a13c <sms_ble_advertise+0x64>)
1000a0e0:	701a      	strb	r2, [r3, #0]

    /* Set the advertisement data */
    if((status = ble_advertisement_data_set()) != AT_BLE_SUCCESS) {
1000a0e2:	4b17      	ldr	r3, [pc, #92]	; (1000a140 <sms_ble_advertise+0x68>)
1000a0e4:	4798      	blx	r3
1000a0e6:	1e04      	subs	r4, r0, #0
1000a0e8:	d007      	beq.n	1000a0fa <sms_ble_advertise+0x22>
        DBG_LOG("[sms_ble_advertise]\tAdvertisement data set failed!");
1000a0ea:	4816      	ldr	r0, [pc, #88]	; (1000a144 <sms_ble_advertise+0x6c>)
1000a0ec:	4b16      	ldr	r3, [pc, #88]	; (1000a148 <sms_ble_advertise+0x70>)
1000a0ee:	4798      	blx	r3
1000a0f0:	4816      	ldr	r0, [pc, #88]	; (1000a14c <sms_ble_advertise+0x74>)
1000a0f2:	4b17      	ldr	r3, [pc, #92]	; (1000a150 <sms_ble_advertise+0x78>)
1000a0f4:	4798      	blx	r3
        return status;
1000a0f6:	0020      	movs	r0, r4
1000a0f8:	e01e      	b.n	1000a138 <sms_ble_advertise+0x60>
    }

    /* Start of advertisement */
    if((status = at_ble_adv_start(AT_BLE_ADV_TYPE_UNDIRECTED, AT_BLE_ADV_GEN_DISCOVERABLE, NULL, AT_BLE_ADV_FP_ANY, APP_FAST_ADV, APP_ADV_TIMEOUT, 0)) == AT_BLE_SUCCESS)
1000a0fa:	2300      	movs	r3, #0
1000a0fc:	9302      	str	r3, [sp, #8]
1000a0fe:	4b15      	ldr	r3, [pc, #84]	; (1000a154 <sms_ble_advertise+0x7c>)
1000a100:	9301      	str	r3, [sp, #4]
1000a102:	23c8      	movs	r3, #200	; 0xc8
1000a104:	00db      	lsls	r3, r3, #3
1000a106:	9300      	str	r3, [sp, #0]
1000a108:	2300      	movs	r3, #0
1000a10a:	2200      	movs	r2, #0
1000a10c:	2101      	movs	r1, #1
1000a10e:	2000      	movs	r0, #0
1000a110:	4c11      	ldr	r4, [pc, #68]	; (1000a158 <sms_ble_advertise+0x80>)
1000a112:	47a0      	blx	r4
1000a114:	1e04      	subs	r4, r0, #0
1000a116:	d107      	bne.n	1000a128 <sms_ble_advertise+0x50>
    {
        DBG_LOG_DEV("[sms_ble_advertise]\t\tBLE Started Advertisement");
1000a118:	480a      	ldr	r0, [pc, #40]	; (1000a144 <sms_ble_advertise+0x6c>)
1000a11a:	4b0b      	ldr	r3, [pc, #44]	; (1000a148 <sms_ble_advertise+0x70>)
1000a11c:	4798      	blx	r3
1000a11e:	480f      	ldr	r0, [pc, #60]	; (1000a15c <sms_ble_advertise+0x84>)
1000a120:	4b0b      	ldr	r3, [pc, #44]	; (1000a150 <sms_ble_advertise+0x78>)
1000a122:	4798      	blx	r3
        return AT_BLE_SUCCESS;
1000a124:	2000      	movs	r0, #0
1000a126:	e007      	b.n	1000a138 <sms_ble_advertise+0x60>
    } 
    else {
        DBG_LOG("[sms_service_advertise]\tBLE Advertisement start failed: reason 0x%x", status);
1000a128:	4806      	ldr	r0, [pc, #24]	; (1000a144 <sms_ble_advertise+0x6c>)
1000a12a:	4b07      	ldr	r3, [pc, #28]	; (1000a148 <sms_ble_advertise+0x70>)
1000a12c:	4798      	blx	r3
1000a12e:	0021      	movs	r1, r4
1000a130:	480b      	ldr	r0, [pc, #44]	; (1000a160 <sms_ble_advertise+0x88>)
1000a132:	4b07      	ldr	r3, [pc, #28]	; (1000a150 <sms_ble_advertise+0x78>)
1000a134:	4798      	blx	r3
    }
    return AT_BLE_FAILURE;
1000a136:	20e2      	movs	r0, #226	; 0xe2
}
1000a138:	b004      	add	sp, #16
1000a13a:	bd10      	pop	{r4, pc}
1000a13c:	1001a330 	.word	0x1001a330
1000a140:	1000ece9 	.word	0x1000ece9
1000a144:	1001663c 	.word	0x1001663c
1000a148:	10015495 	.word	0x10015495
1000a14c:	10016ad8 	.word	0x10016ad8
1000a150:	10015375 	.word	0x10015375
1000a154:	0000028f 	.word	0x0000028f
1000a158:	100108f5 	.word	0x100108f5
1000a15c:	10016b0c 	.word	0x10016b0c
1000a160:	10016b3c 	.word	0x10016b3c

1000a164 <sms_ble_disconnected_fn>:
    return AT_BLE_SUCCESS;
}

/* AT_BLE_DISCONNECTED (#6) */
at_ble_status_t sms_ble_disconnected_fn(void *params)
{
1000a164:	b530      	push	{r4, r5, lr}
1000a166:	b083      	sub	sp, #12
1000a168:	0005      	movs	r5, r0
    at_ble_disconnected_t *disconnect = (at_ble_disconnected_t *)params;
    if(ble_current_state == BLE_STATE_PAIRED) {
1000a16a:	4b1c      	ldr	r3, [pc, #112]	; (1000a1dc <sms_ble_disconnected_fn+0x78>)
1000a16c:	781b      	ldrb	r3, [r3, #0]
1000a16e:	2b22      	cmp	r3, #34	; 0x22
1000a170:	d10a      	bne.n	1000a188 <sms_ble_disconnected_fn+0x24>
        pressure_device.state = PRESSURE_STATE_OFF;
1000a172:	2100      	movs	r1, #0
1000a174:	3306      	adds	r3, #6
1000a176:	4a1a      	ldr	r2, [pc, #104]	; (1000a1e0 <sms_ble_disconnected_fn+0x7c>)
1000a178:	54d1      	strb	r1, [r2, r3]
        sms_sensors_interrupt_toggle(false, false);
1000a17a:	2000      	movs	r0, #0
1000a17c:	4b19      	ldr	r3, [pc, #100]	; (1000a1e4 <sms_ble_disconnected_fn+0x80>)
1000a17e:	4798      	blx	r3
        sms_sensors_switch(false, false);
1000a180:	2100      	movs	r1, #0
1000a182:	2000      	movs	r0, #0
1000a184:	4b18      	ldr	r3, [pc, #96]	; (1000a1e8 <sms_ble_disconnected_fn+0x84>)
1000a186:	4798      	blx	r3
    }
    ble_current_state = BLE_STATE_DISCONNECTED;
1000a188:	4c14      	ldr	r4, [pc, #80]	; (1000a1dc <sms_ble_disconnected_fn+0x78>)
1000a18a:	2311      	movs	r3, #17
1000a18c:	7023      	strb	r3, [r4, #0]
    DBG_LOG_DEV("[sms_ble_disconnected_fn]\tPeer disconnected... Bnew %d, BLE 0x%02x, T1 %d, T2 %d", button_instance.current_state, ble_current_state, timer1_current_mode, timer2_current_mode);
1000a18e:	4817      	ldr	r0, [pc, #92]	; (1000a1ec <sms_ble_disconnected_fn+0x88>)
1000a190:	4b17      	ldr	r3, [pc, #92]	; (1000a1f0 <sms_ble_disconnected_fn+0x8c>)
1000a192:	4798      	blx	r3
1000a194:	7822      	ldrb	r2, [r4, #0]
1000a196:	b2d2      	uxtb	r2, r2
1000a198:	4b16      	ldr	r3, [pc, #88]	; (1000a1f4 <sms_ble_disconnected_fn+0x90>)
1000a19a:	781b      	ldrb	r3, [r3, #0]
1000a19c:	b2db      	uxtb	r3, r3
1000a19e:	4916      	ldr	r1, [pc, #88]	; (1000a1f8 <sms_ble_disconnected_fn+0x94>)
1000a1a0:	7808      	ldrb	r0, [r1, #0]
1000a1a2:	4916      	ldr	r1, [pc, #88]	; (1000a1fc <sms_ble_disconnected_fn+0x98>)
1000a1a4:	7849      	ldrb	r1, [r1, #1]
1000a1a6:	9000      	str	r0, [sp, #0]
1000a1a8:	4815      	ldr	r0, [pc, #84]	; (1000a200 <sms_ble_disconnected_fn+0x9c>)
1000a1aa:	4c16      	ldr	r4, [pc, #88]	; (1000a204 <sms_ble_disconnected_fn+0xa0>)
1000a1ac:	47a0      	blx	r4
    //DBG_LOG_DEV("- conn handle: 0x%04x\r\n- reason: 0x%02x", disconnect->handle, disconnect->reason);
    switch(disconnect->reason) {
1000a1ae:	78ab      	ldrb	r3, [r5, #2]
1000a1b0:	2b1a      	cmp	r3, #26
1000a1b2:	d00b      	beq.n	1000a1cc <sms_ble_disconnected_fn+0x68>
1000a1b4:	b2da      	uxtb	r2, r3
1000a1b6:	2a1a      	cmp	r2, #26
1000a1b8:	d804      	bhi.n	1000a1c4 <sms_ble_disconnected_fn+0x60>
1000a1ba:	2b05      	cmp	r3, #5
1000a1bc:	d006      	beq.n	1000a1cc <sms_ble_disconnected_fn+0x68>
1000a1be:	2b08      	cmp	r3, #8
1000a1c0:	d107      	bne.n	1000a1d2 <sms_ble_disconnected_fn+0x6e>
1000a1c2:	e003      	b.n	1000a1cc <sms_ble_disconnected_fn+0x68>
1000a1c4:	2b29      	cmp	r3, #41	; 0x29
1000a1c6:	d001      	beq.n	1000a1cc <sms_ble_disconnected_fn+0x68>
1000a1c8:	2b3b      	cmp	r3, #59	; 0x3b
1000a1ca:	d102      	bne.n	1000a1d2 <sms_ble_disconnected_fn+0x6e>
        case AT_BLE_AUTH_FAILURE: //0x05
        case AT_BLE_SUPERVISION_TIMEOUT: //0x08
        case AT_BLE_UNSUPPORTED_REMOTE_FEATURE: // 0x1A
        case AT_BLE_PAIRING_WITH_UNIT_KEY_NOT_SUP: // 0x29
        case AT_BLE_UNACCEPTABLE_INTERVAL: // 0x3B
        sms_ble_advertise();
1000a1cc:	4b0e      	ldr	r3, [pc, #56]	; (1000a208 <sms_ble_disconnected_fn+0xa4>)
1000a1ce:	4798      	blx	r3
        break;
1000a1d0:	e001      	b.n	1000a1d6 <sms_ble_disconnected_fn+0x72>
        case AT_BLE_TERMINATED_BY_USER: // 0x13
        case AT_BLE_REMOTE_DEV_TERM_LOW_RESOURCES: //0x14
        case AT_BLE_REMOTE_DEV_POWER_OFF: //0x15
        case AT_BLE_CON_TERM_BY_LOCAL_HOST: //0x16
        default:
        sms_ble_power_down();
1000a1d2:	4b0e      	ldr	r3, [pc, #56]	; (1000a20c <sms_ble_disconnected_fn+0xa8>)
1000a1d4:	4798      	blx	r3
        break;
    }
    
    return AT_BLE_SUCCESS;
}
1000a1d6:	2000      	movs	r0, #0
1000a1d8:	b003      	add	sp, #12
1000a1da:	bd30      	pop	{r4, r5, pc}
1000a1dc:	1001a330 	.word	0x1001a330
1000a1e0:	1001a294 	.word	0x1001a294
1000a1e4:	1000aa35 	.word	0x1000aa35
1000a1e8:	1000aac1 	.word	0x1000aac1
1000a1ec:	1001663c 	.word	0x1001663c
1000a1f0:	10015495 	.word	0x10015495
1000a1f4:	1001a184 	.word	0x1001a184
1000a1f8:	1001a331 	.word	0x1001a331
1000a1fc:	1001a220 	.word	0x1001a220
1000a200:	10016b80 	.word	0x10016b80
1000a204:	10015375 	.word	0x10015375
1000a208:	1000a0d9 	.word	0x1000a0d9
1000a20c:	10009f19 	.word	0x10009f19

1000a210 <sms_ble_send_characteristic>:
    NULL, //ble_characteristic_write_cmd_cmp
    NULL //ble_read_authorize_request_handler
};

at_ble_status_t sms_ble_send_characteristic(enum sms_ble_char_type ch)
{
1000a210:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a212:	b089      	sub	sp, #36	; 0x24
    at_ble_status_t status = AT_BLE_SUCCESS;
    at_ble_handle_t val_handle = 0;
    uint8_t length = 0;
    uint8_t char_size = 0;
    uint8_t send_val[BLE_CHAR_SIZE_MAX];
    ble_current_state = BLE_STATE_INDICATING;
1000a214:	2223      	movs	r2, #35	; 0x23
1000a216:	4b6c      	ldr	r3, [pc, #432]	; (1000a3c8 <sms_ble_send_characteristic+0x1b8>)
1000a218:	701a      	strb	r2, [r3, #0]

    
    sms_ble_send_cnt++;
1000a21a:	4a6c      	ldr	r2, [pc, #432]	; (1000a3cc <sms_ble_send_characteristic+0x1bc>)
1000a21c:	8813      	ldrh	r3, [r2, #0]
1000a21e:	3301      	adds	r3, #1
1000a220:	8013      	strh	r3, [r2, #0]
    
    switch(ch) {
1000a222:	2801      	cmp	r0, #1
1000a224:	d017      	beq.n	1000a256 <sms_ble_send_characteristic+0x46>
1000a226:	2800      	cmp	r0, #0
1000a228:	d004      	beq.n	1000a234 <sms_ble_send_characteristic+0x24>
1000a22a:	2802      	cmp	r0, #2
1000a22c:	d026      	beq.n	1000a27c <sms_ble_send_characteristic+0x6c>
1000a22e:	2803      	cmp	r0, #3
1000a230:	d03c      	beq.n	1000a2ac <sms_ble_send_characteristic+0x9c>
1000a232:	e097      	b.n	1000a364 <sms_ble_send_characteristic+0x154>
        case BLE_CHAR_BTN0:
        btn0_instance.char_value = ((btn0_instance.char_value >= 0x7f) ? 0 : (btn0_instance.char_value + 1));
1000a234:	4b66      	ldr	r3, [pc, #408]	; (1000a3d0 <sms_ble_send_characteristic+0x1c0>)
1000a236:	78da      	ldrb	r2, [r3, #3]
1000a238:	2300      	movs	r3, #0
1000a23a:	2a7e      	cmp	r2, #126	; 0x7e
1000a23c:	d801      	bhi.n	1000a242 <sms_ble_send_characteristic+0x32>
1000a23e:	3201      	adds	r2, #1
1000a240:	b2d3      	uxtb	r3, r2
1000a242:	4a63      	ldr	r2, [pc, #396]	; (1000a3d0 <sms_ble_send_characteristic+0x1c0>)
1000a244:	70d3      	strb	r3, [r2, #3]
        send_val[0] = btn0_instance.char_value;
1000a246:	aa03      	add	r2, sp, #12
1000a248:	7013      	strb	r3, [r2, #0]
        val_handle = button_instance.service_handler.serv_chars.char_val_handle;
1000a24a:	4b62      	ldr	r3, [pc, #392]	; (1000a3d4 <sms_ble_send_characteristic+0x1c4>)
1000a24c:	8b1b      	ldrh	r3, [r3, #24]
1000a24e:	9300      	str	r3, [sp, #0]
        length = 1;
1000a250:	2301      	movs	r3, #1
1000a252:	9301      	str	r3, [sp, #4]
        break;
1000a254:	e089      	b.n	1000a36a <sms_ble_send_characteristic+0x15a>
        
        case BLE_CHAR_BTN1:
        btn1_instance.char_value = ((btn1_instance.char_value >= 0xff) ? 0 : (btn1_instance.char_value + 1));
1000a256:	4b60      	ldr	r3, [pc, #384]	; (1000a3d8 <sms_ble_send_characteristic+0x1c8>)
1000a258:	78db      	ldrb	r3, [r3, #3]
1000a25a:	2bff      	cmp	r3, #255	; 0xff
1000a25c:	d002      	beq.n	1000a264 <sms_ble_send_characteristic+0x54>
1000a25e:	3301      	adds	r3, #1
1000a260:	b2db      	uxtb	r3, r3
1000a262:	e000      	b.n	1000a266 <sms_ble_send_characteristic+0x56>
1000a264:	2300      	movs	r3, #0
1000a266:	4a5c      	ldr	r2, [pc, #368]	; (1000a3d8 <sms_ble_send_characteristic+0x1c8>)
1000a268:	70d3      	strb	r3, [r2, #3]
        send_val[0] = btn1_instance.char_value + 0x80;
1000a26a:	3b80      	subs	r3, #128	; 0x80
1000a26c:	aa03      	add	r2, sp, #12
1000a26e:	7013      	strb	r3, [r2, #0]
        val_handle = button_instance.service_handler.serv_chars.char_val_handle;
1000a270:	4b58      	ldr	r3, [pc, #352]	; (1000a3d4 <sms_ble_send_characteristic+0x1c4>)
1000a272:	8b1b      	ldrh	r3, [r3, #24]
1000a274:	9300      	str	r3, [sp, #0]
        length = 1;
1000a276:	2301      	movs	r3, #1
1000a278:	9301      	str	r3, [sp, #4]
        break;
1000a27a:	e076      	b.n	1000a36a <sms_ble_send_characteristic+0x15a>
        
        case BLE_CHAR_PRESS:
        send_val[0] = (uint8_t)(pressure_device.ms58_device.temperature & 0xff);
1000a27c:	4957      	ldr	r1, [pc, #348]	; (1000a3dc <sms_ble_send_characteristic+0x1cc>)
1000a27e:	6a0a      	ldr	r2, [r1, #32]
1000a280:	ab03      	add	r3, sp, #12
1000a282:	701a      	strb	r2, [r3, #0]
        send_val[1] = (uint8_t)((pressure_device.ms58_device.temperature >> 8) & 0xff);
1000a284:	1210      	asrs	r0, r2, #8
1000a286:	7058      	strb	r0, [r3, #1]
        send_val[2] = (uint8_t)((pressure_device.ms58_device.temperature >> 16) & 0xff);
1000a288:	1410      	asrs	r0, r2, #16
1000a28a:	7098      	strb	r0, [r3, #2]
        send_val[3] = (uint8_t)((pressure_device.ms58_device.temperature >> 24) & 0xff);
1000a28c:	1612      	asrs	r2, r2, #24
1000a28e:	70da      	strb	r2, [r3, #3]
        send_val[4] = (uint8_t)(pressure_device.ms58_device.pressure & 0xff);
1000a290:	69ca      	ldr	r2, [r1, #28]
1000a292:	711a      	strb	r2, [r3, #4]
        send_val[5] = (uint8_t)((pressure_device.ms58_device.pressure >> 8) & 0xff);
1000a294:	1210      	asrs	r0, r2, #8
1000a296:	7158      	strb	r0, [r3, #5]
        send_val[6] = (uint8_t)((pressure_device.ms58_device.pressure >> 16) & 0xff);
1000a298:	1410      	asrs	r0, r2, #16
1000a29a:	7198      	strb	r0, [r3, #6]
        send_val[7] = (uint8_t)((pressure_device.ms58_device.pressure >> 24) & 0xff);
1000a29c:	1612      	asrs	r2, r2, #24
1000a29e:	71da      	strb	r2, [r3, #7]
        val_handle = pressure_device.service_handler.serv_chars.char_val_handle;
1000a2a0:	2340      	movs	r3, #64	; 0x40
1000a2a2:	5acb      	ldrh	r3, [r1, r3]
1000a2a4:	9300      	str	r3, [sp, #0]
        length = 8;
1000a2a6:	2308      	movs	r3, #8
1000a2a8:	9301      	str	r3, [sp, #4]
        break;
1000a2aa:	e05e      	b.n	1000a36a <sms_ble_send_characteristic+0x15a>
        
        case BLE_CHAR_MPU:
        send_val[0] = (uint8_t)(mpu_device.hal.accel[0] & 0xff);
1000a2ac:	4a4c      	ldr	r2, [pc, #304]	; (1000a3e0 <sms_ble_send_characteristic+0x1d0>)
1000a2ae:	2312      	movs	r3, #18
1000a2b0:	5ed1      	ldrsh	r1, [r2, r3]
1000a2b2:	ab03      	add	r3, sp, #12
1000a2b4:	7019      	strb	r1, [r3, #0]
        send_val[1] = (uint8_t)((mpu_device.hal.accel[0] >> 8) & 0xff);
1000a2b6:	1209      	asrs	r1, r1, #8
1000a2b8:	7059      	strb	r1, [r3, #1]
        send_val[2] = (uint8_t)(mpu_device.hal.accel[1] & 0xff);
1000a2ba:	2014      	movs	r0, #20
1000a2bc:	5e11      	ldrsh	r1, [r2, r0]
1000a2be:	7099      	strb	r1, [r3, #2]
        send_val[3] = (uint8_t)((mpu_device.hal.accel[1] >> 8) & 0xff);
1000a2c0:	1209      	asrs	r1, r1, #8
1000a2c2:	70d9      	strb	r1, [r3, #3]
        send_val[4] = (uint8_t)(mpu_device.hal.accel[2] & 0xff);
1000a2c4:	2016      	movs	r0, #22
1000a2c6:	5e11      	ldrsh	r1, [r2, r0]
1000a2c8:	7119      	strb	r1, [r3, #4]
        send_val[5] = (uint8_t)((mpu_device.hal.accel[2] >> 8) & 0xff);
1000a2ca:	1209      	asrs	r1, r1, #8
1000a2cc:	7159      	strb	r1, [r3, #5]
        send_val[6] = (uint8_t)(mpu_device.hal.gyro[0] & 0xff);
1000a2ce:	200c      	movs	r0, #12
1000a2d0:	5e11      	ldrsh	r1, [r2, r0]
1000a2d2:	7199      	strb	r1, [r3, #6]
        send_val[7] = (uint8_t)((mpu_device.hal.gyro[0] >> 8) & 0xff);
1000a2d4:	1209      	asrs	r1, r1, #8
1000a2d6:	71d9      	strb	r1, [r3, #7]
        send_val[8] = (uint8_t)(mpu_device.hal.gyro[1] & 0xff);
1000a2d8:	200e      	movs	r0, #14
1000a2da:	5e11      	ldrsh	r1, [r2, r0]
1000a2dc:	7219      	strb	r1, [r3, #8]
        send_val[9] = (uint8_t)((mpu_device.hal.gyro[1] >> 8) & 0xff);
1000a2de:	1209      	asrs	r1, r1, #8
1000a2e0:	7259      	strb	r1, [r3, #9]
        send_val[10] = (uint8_t)(mpu_device.hal.gyro[2] & 0xff);
1000a2e2:	2010      	movs	r0, #16
1000a2e4:	5e11      	ldrsh	r1, [r2, r0]
1000a2e6:	7299      	strb	r1, [r3, #10]
        send_val[11] = (uint8_t)((mpu_device.hal.gyro[2] >> 8) & 0xff);
1000a2e8:	1209      	asrs	r1, r1, #8
1000a2ea:	72d9      	strb	r1, [r3, #11]
        val_handle = mpu_device.service_handler.serv_chars.char_val_handle;
1000a2ec:	2348      	movs	r3, #72	; 0x48
1000a2ee:	5ad3      	ldrh	r3, [r2, r3]
1000a2f0:	9300      	str	r3, [sp, #0]
        length = 12;
        
        if(mpu_device.new_compass) {
1000a2f2:	232e      	movs	r3, #46	; 0x2e
1000a2f4:	5cd3      	ldrb	r3, [r2, r3]
1000a2f6:	2b00      	cmp	r3, #0
1000a2f8:	d015      	beq.n	1000a326 <sms_ble_send_characteristic+0x116>
            send_val[12] = (uint8_t)(mpu_device.hal.compass[0] & 0xff);
1000a2fa:	2318      	movs	r3, #24
1000a2fc:	5ed1      	ldrsh	r1, [r2, r3]
1000a2fe:	ab03      	add	r3, sp, #12
1000a300:	7319      	strb	r1, [r3, #12]
            send_val[13] = (uint8_t)((mpu_device.hal.compass[0] >> 8) & 0xff);
1000a302:	1209      	asrs	r1, r1, #8
1000a304:	7359      	strb	r1, [r3, #13]
            send_val[14] = (uint8_t)(mpu_device.hal.compass[1] & 0xff);
1000a306:	201a      	movs	r0, #26
1000a308:	5e11      	ldrsh	r1, [r2, r0]
1000a30a:	7399      	strb	r1, [r3, #14]
            send_val[15] = (uint8_t)((mpu_device.hal.compass[1] >> 8) & 0xff);
1000a30c:	1209      	asrs	r1, r1, #8
1000a30e:	73d9      	strb	r1, [r3, #15]
            send_val[16] = (uint8_t)(mpu_device.hal.compass[2] & 0xff);
1000a310:	201c      	movs	r0, #28
1000a312:	5e11      	ldrsh	r1, [r2, r0]
1000a314:	7419      	strb	r1, [r3, #16]
            send_val[17] = (uint8_t)((mpu_device.hal.compass[2] >> 8) & 0xff);
1000a316:	1209      	asrs	r1, r1, #8
1000a318:	7459      	strb	r1, [r3, #17]
            length = 18;
            mpu_device.new_compass = false;
1000a31a:	2100      	movs	r1, #0
1000a31c:	232e      	movs	r3, #46	; 0x2e
1000a31e:	54d1      	strb	r1, [r2, r3]
            send_val[13] = (uint8_t)((mpu_device.hal.compass[0] >> 8) & 0xff);
            send_val[14] = (uint8_t)(mpu_device.hal.compass[1] & 0xff);
            send_val[15] = (uint8_t)((mpu_device.hal.compass[1] >> 8) & 0xff);
            send_val[16] = (uint8_t)(mpu_device.hal.compass[2] & 0xff);
            send_val[17] = (uint8_t)((mpu_device.hal.compass[2] >> 8) & 0xff);
            length = 18;
1000a320:	3b1c      	subs	r3, #28
1000a322:	9301      	str	r3, [sp, #4]
1000a324:	e009      	b.n	1000a33a <sms_ble_send_characteristic+0x12a>
            mpu_device.new_compass = false;
        }
        else {
            for(uint8_t i = 0; i < 6; i++) {
                send_val[12+i] = 0;
1000a326:	ab03      	add	r3, sp, #12
1000a328:	2200      	movs	r2, #0
1000a32a:	731a      	strb	r2, [r3, #12]
1000a32c:	735a      	strb	r2, [r3, #13]
1000a32e:	739a      	strb	r2, [r3, #14]
1000a330:	73da      	strb	r2, [r3, #15]
1000a332:	741a      	strb	r2, [r3, #16]
1000a334:	745a      	strb	r2, [r3, #17]
        send_val[8] = (uint8_t)(mpu_device.hal.gyro[1] & 0xff);
        send_val[9] = (uint8_t)((mpu_device.hal.gyro[1] >> 8) & 0xff);
        send_val[10] = (uint8_t)(mpu_device.hal.gyro[2] & 0xff);
        send_val[11] = (uint8_t)((mpu_device.hal.gyro[2] >> 8) & 0xff);
        val_handle = mpu_device.service_handler.serv_chars.char_val_handle;
        length = 12;
1000a336:	230c      	movs	r3, #12
1000a338:	9301      	str	r3, [sp, #4]
            for(uint8_t i = 0; i < 6; i++) {
                send_val[12+i] = 0;
            }
        }
        
        if(mpu_device.new_temp) {
1000a33a:	232f      	movs	r3, #47	; 0x2f
1000a33c:	4a28      	ldr	r2, [pc, #160]	; (1000a3e0 <sms_ble_send_characteristic+0x1d0>)
1000a33e:	5cd3      	ldrb	r3, [r2, r3]
1000a340:	2b00      	cmp	r3, #0
1000a342:	d00a      	beq.n	1000a35a <sms_ble_send_characteristic+0x14a>
            send_val[18] = (uint8_t)(mpu_device.hal.temperature & 0xff);
1000a344:	6a13      	ldr	r3, [r2, #32]
1000a346:	a903      	add	r1, sp, #12
1000a348:	748b      	strb	r3, [r1, #18]
            send_val[19] = (uint8_t)((mpu_device.hal.temperature >> 8) & 0xff);
1000a34a:	121b      	asrs	r3, r3, #8
1000a34c:	74cb      	strb	r3, [r1, #19]
            length = 20;
            mpu_device.new_temp = false;
1000a34e:	2100      	movs	r1, #0
1000a350:	232f      	movs	r3, #47	; 0x2f
1000a352:	54d1      	strb	r1, [r2, r3]
        }
        
        if(mpu_device.new_temp) {
            send_val[18] = (uint8_t)(mpu_device.hal.temperature & 0xff);
            send_val[19] = (uint8_t)((mpu_device.hal.temperature >> 8) & 0xff);
            length = 20;
1000a354:	3b1b      	subs	r3, #27
1000a356:	9301      	str	r3, [sp, #4]
1000a358:	e007      	b.n	1000a36a <sms_ble_send_characteristic+0x15a>
            mpu_device.new_temp = false;
        }
        else {
            for(uint8_t i = 0; i < 2; i++) {
                send_val[18+i] = 0;
1000a35a:	ab03      	add	r3, sp, #12
1000a35c:	2200      	movs	r2, #0
1000a35e:	749a      	strb	r2, [r3, #18]
1000a360:	74da      	strb	r2, [r3, #19]
1000a362:	e002      	b.n	1000a36a <sms_ble_send_characteristic+0x15a>

at_ble_status_t sms_ble_send_characteristic(enum sms_ble_char_type ch)
{
    at_ble_status_t status = AT_BLE_SUCCESS;
    at_ble_handle_t val_handle = 0;
    uint8_t length = 0;
1000a364:	2300      	movs	r3, #0
1000a366:	9301      	str	r3, [sp, #4]
};

at_ble_status_t sms_ble_send_characteristic(enum sms_ble_char_type ch)
{
    at_ble_status_t status = AT_BLE_SUCCESS;
    at_ble_handle_t val_handle = 0;
1000a368:	9300      	str	r3, [sp, #0]
            }
        }
        break;
    }
    
    DBG_LOG_DEV("Sending: ");
1000a36a:	481e      	ldr	r0, [pc, #120]	; (1000a3e4 <sms_ble_send_characteristic+0x1d4>)
1000a36c:	4b1e      	ldr	r3, [pc, #120]	; (1000a3e8 <sms_ble_send_characteristic+0x1d8>)
1000a36e:	4798      	blx	r3
1000a370:	481e      	ldr	r0, [pc, #120]	; (1000a3ec <sms_ble_send_characteristic+0x1dc>)
1000a372:	4b1f      	ldr	r3, [pc, #124]	; (1000a3f0 <sms_ble_send_characteristic+0x1e0>)
1000a374:	4798      	blx	r3
1000a376:	ac03      	add	r4, sp, #12
1000a378:	af08      	add	r7, sp, #32
    for(int i = 0; i < 20; i += 2) {
        DBG_LOG_CONT_DEV("0x%02x%02x ", send_val[i], send_val[i+1]);
1000a37a:	4d1e      	ldr	r5, [pc, #120]	; (1000a3f4 <sms_ble_send_characteristic+0x1e4>)
1000a37c:	4e1c      	ldr	r6, [pc, #112]	; (1000a3f0 <sms_ble_send_characteristic+0x1e0>)
1000a37e:	7862      	ldrb	r2, [r4, #1]
1000a380:	7821      	ldrb	r1, [r4, #0]
1000a382:	0028      	movs	r0, r5
1000a384:	47b0      	blx	r6
1000a386:	3402      	adds	r4, #2
        }
        break;
    }
    
    DBG_LOG_DEV("Sending: ");
    for(int i = 0; i < 20; i += 2) {
1000a388:	42bc      	cmp	r4, r7
1000a38a:	d1f8      	bne.n	1000a37e <sms_ble_send_characteristic+0x16e>
        DBG_LOG_CONT_DEV("0x%02x%02x ", send_val[i], send_val[i+1]);
    }
    status = at_ble_characteristic_value_set(val_handle, send_val, (length * sizeof(uint8_t)));
1000a38c:	466b      	mov	r3, sp
1000a38e:	889a      	ldrh	r2, [r3, #4]
1000a390:	a903      	add	r1, sp, #12
1000a392:	9800      	ldr	r0, [sp, #0]
1000a394:	4b18      	ldr	r3, [pc, #96]	; (1000a3f8 <sms_ble_send_characteristic+0x1e8>)
1000a396:	4798      	blx	r3
1000a398:	1e04      	subs	r4, r0, #0
    if(status == AT_BLE_SUCCESS) {
1000a39a:	d111      	bne.n	1000a3c0 <sms_ble_send_characteristic+0x1b0>
        //for(uint8_t i = 0; i < AT_BLE_UUID_128_LEN; i++) {
        //DBG_LOG_CONT_DEV("%02x", sms_button_service_handler.serv_uuid.uuid[(i)]);
        //}
        //DBG_LOG_DEV("- char value handle: 0x%04x\r\n- char value: 0x%02x", sms_button_service_handler.serv_chars.char_val_handle, send_val);
        
        printf("\r\ncnt: %d", sms_ble_send_cnt);
1000a39c:	4b0b      	ldr	r3, [pc, #44]	; (1000a3cc <sms_ble_send_characteristic+0x1bc>)
1000a39e:	8819      	ldrh	r1, [r3, #0]
1000a3a0:	4816      	ldr	r0, [pc, #88]	; (1000a3fc <sms_ble_send_characteristic+0x1ec>)
1000a3a2:	4b13      	ldr	r3, [pc, #76]	; (1000a3f0 <sms_ble_send_characteristic+0x1e0>)
1000a3a4:	4798      	blx	r3
        gpio_pin_set_output_level(DBG_PIN_1, DBG_PIN_HIGH);
1000a3a6:	2101      	movs	r1, #1
1000a3a8:	2002      	movs	r0, #2
1000a3aa:	4d15      	ldr	r5, [pc, #84]	; (1000a400 <sms_ble_send_characteristic+0x1f0>)
1000a3ac:	47a8      	blx	r5
#   if SMS_SENDING_WITH_ACK == true
        sms_ble_ind_retry = 0;
        status = at_ble_indication_send(sms_connection_handle, val_handle);
#   else
        status = at_ble_notification_send(sms_connection_handle, val_handle);
1000a3ae:	4b15      	ldr	r3, [pc, #84]	; (1000a404 <sms_ble_send_characteristic+0x1f4>)
1000a3b0:	8818      	ldrh	r0, [r3, #0]
1000a3b2:	9900      	ldr	r1, [sp, #0]
1000a3b4:	4b14      	ldr	r3, [pc, #80]	; (1000a408 <sms_ble_send_characteristic+0x1f8>)
1000a3b6:	4798      	blx	r3
1000a3b8:	0004      	movs	r4, r0
#   endif
        gpio_pin_set_output_level(DBG_PIN_1, DBG_PIN_LOW);
1000a3ba:	2100      	movs	r1, #0
1000a3bc:	2002      	movs	r0, #2
1000a3be:	47a8      	blx	r5
        else {
            //#pragma TBD: handle sending error...
        }
    }
    return status;
}
1000a3c0:	0020      	movs	r0, r4
1000a3c2:	b009      	add	sp, #36	; 0x24
1000a3c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a3c6:	46c0      	nop			; (mov r8, r8)
1000a3c8:	1001a330 	.word	0x1001a330
1000a3cc:	1001a34c 	.word	0x1001a34c
1000a3d0:	1001a180 	.word	0x1001a180
1000a3d4:	1001a220 	.word	0x1001a220
1000a3d8:	1001a21c 	.word	0x1001a21c
1000a3dc:	1001a294 	.word	0x1001a294
1000a3e0:	1001a188 	.word	0x1001a188
1000a3e4:	1001663c 	.word	0x1001663c
1000a3e8:	10015495 	.word	0x10015495
1000a3ec:	10016bd4 	.word	0x10016bd4
1000a3f0:	10015375 	.word	0x10015375
1000a3f4:	10016be0 	.word	0x10016be0
1000a3f8:	100111d9 	.word	0x100111d9
1000a3fc:	10016bec 	.word	0x10016bec
1000a400:	1000c379 	.word	0x1000c379
1000a404:	1001a21a 	.word	0x1001a21a
1000a408:	10011379 	.word	0x10011379

1000a40c <sms_ble_primary_service_define>:


at_ble_status_t sms_ble_primary_service_define(gatt_service_handler_t *service)
{
1000a40c:	b510      	push	{r4, lr}
1000a40e:	b082      	sub	sp, #8
    //DBG_LOG_DEV("[sms_ble_primary_service_define]\n\r  defining primary service\r\n- uuid: 0x%02x\r\n- handle: 0x%02x\r\n- char uuid: 0x%02x%02x\r\n- char init value: %d", (unsigned int)service->serv_uuid.uuid, service->serv_handle, service->serv_chars.uuid.uuid[1], service->serv_chars.uuid.uuid[0], service->serv_chars.value_init_len);
    return(at_ble_primary_service_define(&service->serv_uuid, &service->serv_handle, NULL, 0, &service->serv_chars, 1));
1000a410:	0001      	movs	r1, r0
1000a412:	3112      	adds	r1, #18
1000a414:	2301      	movs	r3, #1
1000a416:	9301      	str	r3, [sp, #4]
1000a418:	0003      	movs	r3, r0
1000a41a:	3314      	adds	r3, #20
1000a41c:	9300      	str	r3, [sp, #0]
1000a41e:	2300      	movs	r3, #0
1000a420:	2200      	movs	r2, #0
1000a422:	4c02      	ldr	r4, [pc, #8]	; (1000a42c <sms_ble_primary_service_define+0x20>)
1000a424:	47a0      	blx	r4
}
1000a426:	b002      	add	sp, #8
1000a428:	bd10      	pop	{r4, pc}
1000a42a:	46c0      	nop			; (mov r8, r8)
1000a42c:	100111b9 	.word	0x100111b9

1000a430 <sms_ble_service_init>:


void sms_ble_service_init(enum sms_ble_serv_type type, gatt_service_handler_t *service, uint8_t *value)
{
1000a430:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a432:	464f      	mov	r7, r9
1000a434:	4646      	mov	r6, r8
1000a436:	b4c0      	push	{r6, r7}
1000a438:	b083      	sub	sp, #12
1000a43a:	4694      	mov	ip, r2
    at_ble_handle_t handle = 0;
    uint8_t uuid[16] = {0};
    uint8_t char_size = 0;
    switch(type) {
1000a43c:	2801      	cmp	r0, #1
1000a43e:	d010      	beq.n	1000a462 <sms_ble_service_init+0x32>
1000a440:	2800      	cmp	r0, #0
1000a442:	d002      	beq.n	1000a44a <sms_ble_service_init+0x1a>
1000a444:	2802      	cmp	r0, #2
1000a446:	d019      	beq.n	1000a47c <sms_ble_service_init+0x4c>
1000a448:	e025      	b.n	1000a496 <sms_ble_service_init+0x66>
        uuid[9] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_3 >> 8) & 0xFF);
        uuid[10] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_3 >> 16) & 0xFF);
        uuid[11] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_3 >> 24) & 0xFF);
        uuid[12] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_4) & 0xFF);
        uuid[13] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_4 >> 8) & 0xFF);
        uuid[14] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_4 >> 16) & 0xFF);
1000a44a:	24bb      	movs	r4, #187	; 0xbb
        uuid[6] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 16) & 0xFF);
        uuid[7] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 24) & 0xFF);
        uuid[8] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_3) & 0xFF);
        uuid[9] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_3 >> 8) & 0xFF);
        uuid[10] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_3 >> 16) & 0xFF);
        uuid[11] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_3 >> 24) & 0xFF);
1000a44c:	2550      	movs	r5, #80	; 0x50
        uuid[5] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 8) & 0xFF);
        uuid[6] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 16) & 0xFF);
        uuid[7] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 24) & 0xFF);
        uuid[8] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_3) & 0xFF);
        uuid[9] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_3 >> 8) & 0xFF);
        uuid[10] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_3 >> 16) & 0xFF);
1000a44e:	2630      	movs	r6, #48	; 0x30
        uuid[2] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[4] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2) & 0xFF);
        uuid[5] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 8) & 0xFF);
        uuid[6] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 16) & 0xFF);
        uuid[7] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 24) & 0xFF);
1000a450:	275a      	movs	r7, #90	; 0x5a
        uuid[1] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[4] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2) & 0xFF);
        uuid[5] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 8) & 0xFF);
        uuid[6] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 16) & 0xFF);
1000a452:	20be      	movs	r0, #190	; 0xbe
        case BLE_SERV_BUTTON:
        handle = 1;
        uuid[0] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 24) & 0xFF);
1000a454:	231c      	movs	r3, #28
1000a456:	4698      	mov	r8, r3
    switch(type) {
        case BLE_SERV_BUTTON:
        handle = 1;
        uuid[0] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 16) & 0xFF);
1000a458:	333b      	adds	r3, #59	; 0x3b
1000a45a:	4699      	mov	r9, r3
        uuid[11] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_3 >> 24) & 0xFF);
        uuid[12] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_4) & 0xFF);
        uuid[13] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_4 >> 8) & 0xFF);
        uuid[14] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_4 >> 16) & 0xFF);
        uuid[15] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_4 >> 24) & 0xFF);
        char_size = 1;
1000a45c:	3b56      	subs	r3, #86	; 0x56
1000a45e:	9301      	str	r3, [sp, #4]
1000a460:	e022      	b.n	1000a4a8 <sms_ble_service_init+0x78>
        uuid[9] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_3 >> 8) & 0xFF);
        uuid[10] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_3 >> 16) & 0xFF);
        uuid[11] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_3 >> 24) & 0xFF);
        uuid[12] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4) & 0xFF);
        uuid[13] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 8) & 0xFF);
        uuid[14] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 16) & 0xFF);
1000a462:	24ee      	movs	r4, #238	; 0xee
        uuid[6] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 16) & 0xFF);
        uuid[7] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 24) & 0xFF);
        uuid[8] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_3) & 0xFF);
        uuid[9] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_3 >> 8) & 0xFF);
        uuid[10] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_3 >> 16) & 0xFF);
        uuid[11] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_3 >> 24) & 0xFF);
1000a464:	2550      	movs	r5, #80	; 0x50
        uuid[5] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 8) & 0xFF);
        uuid[6] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 16) & 0xFF);
        uuid[7] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 24) & 0xFF);
        uuid[8] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_3) & 0xFF);
        uuid[9] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_3 >> 8) & 0xFF);
        uuid[10] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_3 >> 16) & 0xFF);
1000a466:	2630      	movs	r6, #48	; 0x30
        uuid[2] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[4] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2) & 0xFF);
        uuid[5] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 8) & 0xFF);
        uuid[6] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 16) & 0xFF);
        uuid[7] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 24) & 0xFF);
1000a468:	275a      	movs	r7, #90	; 0x5a
        uuid[1] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[4] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2) & 0xFF);
        uuid[5] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 8) & 0xFF);
        uuid[6] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 16) & 0xFF);
1000a46a:	20be      	movs	r0, #190	; 0xbe
        case BLE_SERV_PRESSURE:
        handle = 2;
        uuid[0] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 24) & 0xFF);
1000a46c:	231c      	movs	r3, #28
1000a46e:	4698      	mov	r8, r3
        
        case BLE_SERV_PRESSURE:
        handle = 2;
        uuid[0] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 16) & 0xFF);
1000a470:	333b      	adds	r3, #59	; 0x3b
1000a472:	4699      	mov	r9, r3
        uuid[11] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_3 >> 24) & 0xFF);
        uuid[12] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4) & 0xFF);
        uuid[13] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 8) & 0xFF);
        uuid[14] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 16) & 0xFF);
        uuid[15] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 24) & 0xFF);
        char_size = 8;
1000a474:	3b4f      	subs	r3, #79	; 0x4f
1000a476:	9301      	str	r3, [sp, #4]
        uuid[15] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_4 >> 24) & 0xFF);
        char_size = 1;
        break;
        
        case BLE_SERV_PRESSURE:
        handle = 2;
1000a478:	3b06      	subs	r3, #6
        uuid[12] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4) & 0xFF);
        uuid[13] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 8) & 0xFF);
        uuid[14] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 16) & 0xFF);
        uuid[15] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 24) & 0xFF);
        char_size = 8;
        break;
1000a47a:	e015      	b.n	1000a4a8 <sms_ble_service_init+0x78>
        uuid[9] = (uint8_t) ((SMS_MPU_SERVICE_UUID_3 >> 8) & 0xFF);
        uuid[10] = (uint8_t) ((SMS_MPU_SERVICE_UUID_3 >> 16) & 0xFF);
        uuid[11] = (uint8_t) ((SMS_MPU_SERVICE_UUID_3 >> 24) & 0xFF);
        uuid[12] = (uint8_t) ((SMS_MPU_SERVICE_UUID_4) & 0xFF);
        uuid[13] = (uint8_t) ((SMS_MPU_SERVICE_UUID_4 >> 8) & 0xFF);
        uuid[14] = (uint8_t) ((SMS_MPU_SERVICE_UUID_4 >> 16) & 0xFF);
1000a47c:	2411      	movs	r4, #17
        uuid[6] = (uint8_t) ((SMS_MPU_SERVICE_UUID_2 >> 16) & 0xFF);
        uuid[7] = (uint8_t) ((SMS_MPU_SERVICE_UUID_2 >> 24) & 0xFF);
        uuid[8] = (uint8_t) ((SMS_MPU_SERVICE_UUID_3) & 0xFF);
        uuid[9] = (uint8_t) ((SMS_MPU_SERVICE_UUID_3 >> 8) & 0xFF);
        uuid[10] = (uint8_t) ((SMS_MPU_SERVICE_UUID_3 >> 16) & 0xFF);
        uuid[11] = (uint8_t) ((SMS_MPU_SERVICE_UUID_3 >> 24) & 0xFF);
1000a47e:	2550      	movs	r5, #80	; 0x50
        uuid[5] = (uint8_t) ((SMS_MPU_SERVICE_UUID_2 >> 8) & 0xFF);
        uuid[6] = (uint8_t) ((SMS_MPU_SERVICE_UUID_2 >> 16) & 0xFF);
        uuid[7] = (uint8_t) ((SMS_MPU_SERVICE_UUID_2 >> 24) & 0xFF);
        uuid[8] = (uint8_t) ((SMS_MPU_SERVICE_UUID_3) & 0xFF);
        uuid[9] = (uint8_t) ((SMS_MPU_SERVICE_UUID_3 >> 8) & 0xFF);
        uuid[10] = (uint8_t) ((SMS_MPU_SERVICE_UUID_3 >> 16) & 0xFF);
1000a480:	2630      	movs	r6, #48	; 0x30
        uuid[2] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[4] = (uint8_t) ((SMS_MPU_SERVICE_UUID_2) & 0xFF);
        uuid[5] = (uint8_t) ((SMS_MPU_SERVICE_UUID_2 >> 8) & 0xFF);
        uuid[6] = (uint8_t) ((SMS_MPU_SERVICE_UUID_2 >> 16) & 0xFF);
        uuid[7] = (uint8_t) ((SMS_MPU_SERVICE_UUID_2 >> 24) & 0xFF);
1000a482:	275a      	movs	r7, #90	; 0x5a
        uuid[1] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[4] = (uint8_t) ((SMS_MPU_SERVICE_UUID_2) & 0xFF);
        uuid[5] = (uint8_t) ((SMS_MPU_SERVICE_UUID_2 >> 8) & 0xFF);
        uuid[6] = (uint8_t) ((SMS_MPU_SERVICE_UUID_2 >> 16) & 0xFF);
1000a484:	20be      	movs	r0, #190	; 0xbe
        case BLE_SERV_MPU:
        handle = 3;
        uuid[0] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 24) & 0xFF);
1000a486:	231c      	movs	r3, #28
1000a488:	4698      	mov	r8, r3
        
        case BLE_SERV_MPU:
        handle = 3;
        uuid[0] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 16) & 0xFF);
1000a48a:	333b      	adds	r3, #59	; 0x3b
1000a48c:	4699      	mov	r9, r3
        uuid[11] = (uint8_t) ((SMS_MPU_SERVICE_UUID_3 >> 24) & 0xFF);
        uuid[12] = (uint8_t) ((SMS_MPU_SERVICE_UUID_4) & 0xFF);
        uuid[13] = (uint8_t) ((SMS_MPU_SERVICE_UUID_4 >> 8) & 0xFF);
        uuid[14] = (uint8_t) ((SMS_MPU_SERVICE_UUID_4 >> 16) & 0xFF);
        uuid[15] = (uint8_t) ((SMS_MPU_SERVICE_UUID_4 >> 24) & 0xFF);
        char_size = 20;
1000a48e:	3b43      	subs	r3, #67	; 0x43
1000a490:	9301      	str	r3, [sp, #4]
        uuid[15] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 24) & 0xFF);
        char_size = 8;
        break;
        
        case BLE_SERV_MPU:
        handle = 3;
1000a492:	3b11      	subs	r3, #17
        uuid[12] = (uint8_t) ((SMS_MPU_SERVICE_UUID_4) & 0xFF);
        uuid[13] = (uint8_t) ((SMS_MPU_SERVICE_UUID_4 >> 8) & 0xFF);
        uuid[14] = (uint8_t) ((SMS_MPU_SERVICE_UUID_4 >> 16) & 0xFF);
        uuid[15] = (uint8_t) ((SMS_MPU_SERVICE_UUID_4 >> 24) & 0xFF);
        char_size = 20;
        break;
1000a494:	e008      	b.n	1000a4a8 <sms_ble_service_init+0x78>


void sms_ble_service_init(enum sms_ble_serv_type type, gatt_service_handler_t *service, uint8_t *value)
{
    at_ble_handle_t handle = 0;
    uint8_t uuid[16] = {0};
1000a496:	2400      	movs	r4, #0
1000a498:	2500      	movs	r5, #0
1000a49a:	2600      	movs	r6, #0
1000a49c:	2700      	movs	r7, #0
1000a49e:	2000      	movs	r0, #0
1000a4a0:	2300      	movs	r3, #0
1000a4a2:	4698      	mov	r8, r3
1000a4a4:	4699      	mov	r9, r3
    uint8_t char_size = 0;
1000a4a6:	9301      	str	r3, [sp, #4]
        
        default:
        break;
    }
    //SMS button service characteristic
    service->serv_handle = handle;
1000a4a8:	824b      	strh	r3, [r1, #18]
    service->serv_uuid.type = AT_BLE_UUID_128;
1000a4aa:	2302      	movs	r3, #2
1000a4ac:	700b      	strb	r3, [r1, #0]
    service->serv_uuid.uuid[0] = uuid[0];
1000a4ae:	2300      	movs	r3, #0
1000a4b0:	704b      	strb	r3, [r1, #1]
    service->serv_uuid.uuid[1] = uuid[1];
1000a4b2:	708b      	strb	r3, [r1, #2]
    service->serv_uuid.uuid[2] = uuid[2];
1000a4b4:	464a      	mov	r2, r9
1000a4b6:	70ca      	strb	r2, [r1, #3]
    service->serv_uuid.uuid[3] = uuid[3];
1000a4b8:	4642      	mov	r2, r8
1000a4ba:	710a      	strb	r2, [r1, #4]
    service->serv_uuid.uuid[4] = uuid[4];
1000a4bc:	714b      	strb	r3, [r1, #5]
    service->serv_uuid.uuid[5] = uuid[5];
1000a4be:	718b      	strb	r3, [r1, #6]
    service->serv_uuid.uuid[6] = uuid[6];
1000a4c0:	71c8      	strb	r0, [r1, #7]
    service->serv_uuid.uuid[7] = uuid[7];
1000a4c2:	720f      	strb	r7, [r1, #8]
    service->serv_uuid.uuid[8] = uuid[8];
1000a4c4:	724b      	strb	r3, [r1, #9]
    service->serv_uuid.uuid[9] = uuid[9];
1000a4c6:	728b      	strb	r3, [r1, #10]
    service->serv_uuid.uuid[10] = uuid[10];
1000a4c8:	72ce      	strb	r6, [r1, #11]
    service->serv_uuid.uuid[11] = uuid[11];
1000a4ca:	730d      	strb	r5, [r1, #12]
    service->serv_uuid.uuid[12] = uuid[12];
1000a4cc:	734b      	strb	r3, [r1, #13]
    service->serv_uuid.uuid[13] = uuid[13];
1000a4ce:	738b      	strb	r3, [r1, #14]
    service->serv_uuid.uuid[14] = uuid[14];
1000a4d0:	73cc      	strb	r4, [r1, #15]
    service->serv_uuid.uuid[15] = uuid[15];
1000a4d2:	740c      	strb	r4, [r1, #16]
    
    #   if SMS_SENDING_WITH_ACK == true
    service->serv_chars.properties = (AT_BLE_CHAR_READ | AT_BLE_CHAR_INDICATE); // properties
    #   else
    service->serv_chars.properties = (AT_BLE_CHAR_READ | AT_BLE_CHAR_NOTIFY); // properties
1000a4d4:	2412      	movs	r4, #18
1000a4d6:	850c      	strh	r4, [r1, #40]	; 0x28
    #   endif
    service->serv_chars.init_value = value; // value
1000a4d8:	4662      	mov	r2, ip
1000a4da:	62ca      	str	r2, [r1, #44]	; 0x2c
    service->serv_chars.value_init_len = char_size * sizeof(uint8_t);
1000a4dc:	466a      	mov	r2, sp
1000a4de:	8892      	ldrh	r2, [r2, #4]
1000a4e0:	860a      	strh	r2, [r1, #48]	; 0x30
    service->serv_chars.value_max_len = char_size * sizeof(uint8_t);
1000a4e2:	864a      	strh	r2, [r1, #50]	; 0x32
    service->serv_chars.value_permissions = (AT_BLE_ATTR_READABLE_NO_AUTHN_NO_AUTHR | AT_BLE_ATTR_WRITABLE_NO_AUTHN_NO_AUTHR); // permissions
1000a4e4:	2011      	movs	r0, #17
1000a4e6:	2234      	movs	r2, #52	; 0x34
1000a4e8:	5488      	strb	r0, [r1, r2]
    service->serv_chars.user_desc = NULL; //user defined name
1000a4ea:	638b      	str	r3, [r1, #56]	; 0x38
    service->serv_chars.user_desc_len = 0;
1000a4ec:	2200      	movs	r2, #0
1000a4ee:	878b      	strh	r3, [r1, #60]	; 0x3c
    service->serv_chars.user_desc_max_len = 0;
1000a4f0:	87cb      	strh	r3, [r1, #62]	; 0x3e
    service->serv_chars.user_desc_permissions = AT_BLE_ATTR_NO_PERMISSIONS; // user description permissions
1000a4f2:	3033      	adds	r0, #51	; 0x33
1000a4f4:	540a      	strb	r2, [r1, r0]
    service->serv_chars.client_config_permissions = AT_BLE_ATTR_NO_PERMISSIONS; // client config permissions
1000a4f6:	3001      	adds	r0, #1
1000a4f8:	540a      	strb	r2, [r1, r0]
    service->serv_chars.server_config_permissions = AT_BLE_ATTR_NO_PERMISSIONS; // server config permissions
1000a4fa:	3001      	adds	r0, #1
1000a4fc:	540a      	strb	r2, [r1, r0]
    service->serv_chars.user_desc_handle = 0; // user description handles
1000a4fe:	2248      	movs	r2, #72	; 0x48
1000a500:	528b      	strh	r3, [r1, r2]
    service->serv_chars.client_config_handle = 0; // client config handles
1000a502:	3202      	adds	r2, #2
1000a504:	528b      	strh	r3, [r1, r2]
    service->serv_chars.server_config_handle = 0; // server config handles
1000a506:	3202      	adds	r2, #2
1000a508:	528b      	strh	r3, [r1, r2]
    
    service->serv_chars.presentation_format = NULL; //presentation format
1000a50a:	640b      	str	r3, [r1, #64]	; 0x40
1000a50c:	b003      	add	sp, #12
1000a50e:	bc0c      	pop	{r2, r3}
1000a510:	4690      	mov	r8, r2
1000a512:	4699      	mov	r9, r3
1000a514:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a516:	46c0      	nop			; (mov r8, r8)

1000a518 <sms_button_bt0_callback>:
        gpio_disable_callback(btn1_instance.gpio_pin);
    }
}
/* Callbacks --> sending interrupt message to platform */
void sms_button_bt0_callback(void)
{
1000a518:	b510      	push	{r4, lr}
    //gpio_disable_callback(SMS_BTN_0_PIN);
    sms_current_interrupt.source = INT_BTN0;
1000a51a:	2201      	movs	r2, #1
1000a51c:	4b04      	ldr	r3, [pc, #16]	; (1000a530 <sms_button_bt0_callback+0x18>)
1000a51e:	701a      	strb	r2, [r3, #0]
    send_plf_int_msg_ind(btn0_instance.gpio_pin, GPIO_CALLBACK_RISING, NULL, 0);
1000a520:	4b04      	ldr	r3, [pc, #16]	; (1000a534 <sms_button_bt0_callback+0x1c>)
1000a522:	7858      	ldrb	r0, [r3, #1]
1000a524:	2300      	movs	r3, #0
1000a526:	2200      	movs	r2, #0
1000a528:	2102      	movs	r1, #2
1000a52a:	4c03      	ldr	r4, [pc, #12]	; (1000a538 <sms_button_bt0_callback+0x20>)
1000a52c:	47a0      	blx	r4
}
1000a52e:	bd10      	pop	{r4, pc}
1000a530:	1001a318 	.word	0x1001a318
1000a534:	1001a180 	.word	0x1001a180
1000a538:	1000f3e1 	.word	0x1000f3e1

1000a53c <sms_button_bt1_callback>:
void sms_button_bt1_callback(void)
{
1000a53c:	b510      	push	{r4, lr}
    //gpio_disable_callback(SMS_BTN_1_PIN);
    sms_current_interrupt.source = INT_BTN1;
1000a53e:	2202      	movs	r2, #2
1000a540:	4b04      	ldr	r3, [pc, #16]	; (1000a554 <sms_button_bt1_callback+0x18>)
1000a542:	701a      	strb	r2, [r3, #0]
    send_plf_int_msg_ind(btn1_instance.gpio_pin, GPIO_CALLBACK_RISING, NULL, 0);
1000a544:	4b04      	ldr	r3, [pc, #16]	; (1000a558 <sms_button_bt1_callback+0x1c>)
1000a546:	7858      	ldrb	r0, [r3, #1]
1000a548:	2300      	movs	r3, #0
1000a54a:	2200      	movs	r2, #0
1000a54c:	2102      	movs	r1, #2
1000a54e:	4c03      	ldr	r4, [pc, #12]	; (1000a55c <sms_button_bt1_callback+0x20>)
1000a550:	47a0      	blx	r4
}
1000a552:	bd10      	pop	{r4, pc}
1000a554:	1001a318 	.word	0x1001a318
1000a558:	1001a21c 	.word	0x1001a21c
1000a55c:	1000f3e1 	.word	0x1000f3e1

1000a560 <sms_button_configure_gpio>:
/* Callback functions --> doing things                                  */
/************************************************************************/

/* Initialize gpio for button inputs */
void sms_button_configure_gpio(void)
{
1000a560:	b510      	push	{r4, lr}
1000a562:	b082      	sub	sp, #8
    struct gpio_config config_gpio_pin;

    /* Button0 @ PIN_AO_GPIO_0 */
    gpio_get_config_defaults(&config_gpio_pin);
1000a564:	ac01      	add	r4, sp, #4
1000a566:	0020      	movs	r0, r4
1000a568:	4b20      	ldr	r3, [pc, #128]	; (1000a5ec <sms_button_configure_gpio+0x8c>)
1000a56a:	4798      	blx	r3
    config_gpio_pin.direction = GPIO_PIN_DIR_INPUT;
1000a56c:	2300      	movs	r3, #0
1000a56e:	7023      	strb	r3, [r4, #0]
    config_gpio_pin.input_pull = GPIO_PIN_PULL_DOWN;
1000a570:	3302      	adds	r3, #2
1000a572:	7063      	strb	r3, [r4, #1]
    config_gpio_pin.aon_wakeup = true;
1000a574:	3b01      	subs	r3, #1
1000a576:	70e3      	strb	r3, [r4, #3]
    if(gpio_pin_set_config(btn0_instance.gpio_pin, &config_gpio_pin) != STATUS_OK) {
1000a578:	4b1d      	ldr	r3, [pc, #116]	; (1000a5f0 <sms_button_configure_gpio+0x90>)
1000a57a:	7858      	ldrb	r0, [r3, #1]
1000a57c:	0021      	movs	r1, r4
1000a57e:	4b1d      	ldr	r3, [pc, #116]	; (1000a5f4 <sms_button_configure_gpio+0x94>)
1000a580:	4798      	blx	r3
1000a582:	2800      	cmp	r0, #0
1000a584:	d005      	beq.n	1000a592 <sms_button_configure_gpio+0x32>
        DBG_LOG_DEV("[sms_button_configure]\tproblem while setting up button0");
1000a586:	481c      	ldr	r0, [pc, #112]	; (1000a5f8 <sms_button_configure_gpio+0x98>)
1000a588:	4b1c      	ldr	r3, [pc, #112]	; (1000a5fc <sms_button_configure_gpio+0x9c>)
1000a58a:	4798      	blx	r3
1000a58c:	481c      	ldr	r0, [pc, #112]	; (1000a600 <sms_button_configure_gpio+0xa0>)
1000a58e:	4b1d      	ldr	r3, [pc, #116]	; (1000a604 <sms_button_configure_gpio+0xa4>)
1000a590:	4798      	blx	r3
    }
    
    /* Button1 @ PIN_AO_GPIO_2 */
    gpio_get_config_defaults(&config_gpio_pin);
1000a592:	ac01      	add	r4, sp, #4
1000a594:	0020      	movs	r0, r4
1000a596:	4b15      	ldr	r3, [pc, #84]	; (1000a5ec <sms_button_configure_gpio+0x8c>)
1000a598:	4798      	blx	r3
    config_gpio_pin.direction = GPIO_PIN_DIR_INPUT;
1000a59a:	2300      	movs	r3, #0
1000a59c:	7023      	strb	r3, [r4, #0]
    config_gpio_pin.input_pull = GPIO_PIN_PULL_DOWN;
1000a59e:	3302      	adds	r3, #2
1000a5a0:	7063      	strb	r3, [r4, #1]
    config_gpio_pin.aon_wakeup = true;
1000a5a2:	3b01      	subs	r3, #1
1000a5a4:	70e3      	strb	r3, [r4, #3]
    if(gpio_pin_set_config(btn1_instance.gpio_pin, &config_gpio_pin) != STATUS_OK) {
1000a5a6:	4b18      	ldr	r3, [pc, #96]	; (1000a608 <sms_button_configure_gpio+0xa8>)
1000a5a8:	7858      	ldrb	r0, [r3, #1]
1000a5aa:	0021      	movs	r1, r4
1000a5ac:	4b11      	ldr	r3, [pc, #68]	; (1000a5f4 <sms_button_configure_gpio+0x94>)
1000a5ae:	4798      	blx	r3
1000a5b0:	2800      	cmp	r0, #0
1000a5b2:	d005      	beq.n	1000a5c0 <sms_button_configure_gpio+0x60>
        DBG_LOG("[sms_button_configure]\tProblem while setting up button1");
1000a5b4:	4810      	ldr	r0, [pc, #64]	; (1000a5f8 <sms_button_configure_gpio+0x98>)
1000a5b6:	4b11      	ldr	r3, [pc, #68]	; (1000a5fc <sms_button_configure_gpio+0x9c>)
1000a5b8:	4798      	blx	r3
1000a5ba:	4814      	ldr	r0, [pc, #80]	; (1000a60c <sms_button_configure_gpio+0xac>)
1000a5bc:	4b11      	ldr	r3, [pc, #68]	; (1000a604 <sms_button_configure_gpio+0xa4>)
1000a5be:	4798      	blx	r3
    }

    /* Button 0 on SAMB11 XPLAINED */
    gpio_get_config_defaults(&config_gpio_pin);
1000a5c0:	ac01      	add	r4, sp, #4
1000a5c2:	0020      	movs	r0, r4
1000a5c4:	4b09      	ldr	r3, [pc, #36]	; (1000a5ec <sms_button_configure_gpio+0x8c>)
1000a5c6:	4798      	blx	r3
    config_gpio_pin.direction = GPIO_PIN_DIR_INPUT;
1000a5c8:	2300      	movs	r3, #0
1000a5ca:	7023      	strb	r3, [r4, #0]
    config_gpio_pin.input_pull = GPIO_PIN_PULL_NONE;
1000a5cc:	7063      	strb	r3, [r4, #1]
    if(gpio_pin_set_config(BUTTON_0_PIN, &config_gpio_pin) != STATUS_OK) {
1000a5ce:	0021      	movs	r1, r4
1000a5d0:	2017      	movs	r0, #23
1000a5d2:	4b08      	ldr	r3, [pc, #32]	; (1000a5f4 <sms_button_configure_gpio+0x94>)
1000a5d4:	4798      	blx	r3
1000a5d6:	2800      	cmp	r0, #0
1000a5d8:	d005      	beq.n	1000a5e6 <sms_button_configure_gpio+0x86>
        DBG_LOG("[sms_button_configure]\tProblem while setting up XPLAINED user button");
1000a5da:	4807      	ldr	r0, [pc, #28]	; (1000a5f8 <sms_button_configure_gpio+0x98>)
1000a5dc:	4b07      	ldr	r3, [pc, #28]	; (1000a5fc <sms_button_configure_gpio+0x9c>)
1000a5de:	4798      	blx	r3
1000a5e0:	480b      	ldr	r0, [pc, #44]	; (1000a610 <sms_button_configure_gpio+0xb0>)
1000a5e2:	4b08      	ldr	r3, [pc, #32]	; (1000a604 <sms_button_configure_gpio+0xa4>)
1000a5e4:	4798      	blx	r3
    }
}
1000a5e6:	b002      	add	sp, #8
1000a5e8:	bd10      	pop	{r4, pc}
1000a5ea:	46c0      	nop			; (mov r8, r8)
1000a5ec:	1000c111 	.word	0x1000c111
1000a5f0:	1001a180 	.word	0x1001a180
1000a5f4:	1000c121 	.word	0x1000c121
1000a5f8:	1001663c 	.word	0x1001663c
1000a5fc:	10015495 	.word	0x10015495
1000a600:	10016c6c 	.word	0x10016c6c
1000a604:	10015375 	.word	0x10015375
1000a608:	1001a21c 	.word	0x1001a21c
1000a60c:	10016ca4 	.word	0x10016ca4
1000a610:	10016cdc 	.word	0x10016cdc

1000a614 <sms_button_register_callbacks>:

/* Register button input callbacks */
void sms_button_register_callbacks(void)
{
1000a614:	b510      	push	{r4, lr}
    /* Button0 callback */
    gpio_register_callback(btn0_instance.gpio_pin, sms_button_bt0_callback, GPIO_CALLBACK_RISING);
1000a616:	4b06      	ldr	r3, [pc, #24]	; (1000a630 <sms_button_register_callbacks+0x1c>)
1000a618:	7858      	ldrb	r0, [r3, #1]
1000a61a:	2202      	movs	r2, #2
1000a61c:	4905      	ldr	r1, [pc, #20]	; (1000a634 <sms_button_register_callbacks+0x20>)
1000a61e:	4c06      	ldr	r4, [pc, #24]	; (1000a638 <sms_button_register_callbacks+0x24>)
1000a620:	47a0      	blx	r4
    //gpio_enable_callback(SMS_BTN_0_PIN);
    
    /* Button1 callback */
    gpio_register_callback(btn1_instance.gpio_pin, sms_button_bt1_callback, GPIO_CALLBACK_RISING);
1000a622:	4b06      	ldr	r3, [pc, #24]	; (1000a63c <sms_button_register_callbacks+0x28>)
1000a624:	7858      	ldrb	r0, [r3, #1]
1000a626:	2202      	movs	r2, #2
1000a628:	4905      	ldr	r1, [pc, #20]	; (1000a640 <sms_button_register_callbacks+0x2c>)
1000a62a:	47a0      	blx	r4
    //gpio_enable_callback(SMS_BTN_1_PIN);
    
    /* User button callback */
}
1000a62c:	bd10      	pop	{r4, pc}
1000a62e:	46c0      	nop			; (mov r8, r8)
1000a630:	1001a180 	.word	0x1001a180
1000a634:	1000a519 	.word	0x1000a519
1000a638:	1000c551 	.word	0x1000c551
1000a63c:	1001a21c 	.word	0x1001a21c
1000a640:	1000a53d 	.word	0x1000a53d

1000a644 <sms_button_get_state>:
    gpio_disable_callback(SMS_BTN_1_PIN);
}

/* Get current buttons state */
enum sms_button_state sms_button_get_state(void)
{
1000a644:	b570      	push	{r4, r5, r6, lr}
    bool b0 = gpio_pin_get_input_level(SMS_BTN_0_PIN);
1000a646:	201f      	movs	r0, #31
1000a648:	4d0c      	ldr	r5, [pc, #48]	; (1000a67c <sms_button_get_state+0x38>)
1000a64a:	47a8      	blx	r5
1000a64c:	0004      	movs	r4, r0
    bool b1 = gpio_pin_get_input_level(SMS_BTN_1_PIN);
1000a64e:	201d      	movs	r0, #29
1000a650:	47a8      	blx	r5
1000a652:	0005      	movs	r5, r0
1000a654:	0006      	movs	r6, r0
    DBG_LOG("[sms_button_get_state]\t\tButton state: %d %d", b1, b0);
1000a656:	480a      	ldr	r0, [pc, #40]	; (1000a680 <sms_button_get_state+0x3c>)
1000a658:	4b0a      	ldr	r3, [pc, #40]	; (1000a684 <sms_button_get_state+0x40>)
1000a65a:	4798      	blx	r3
1000a65c:	0022      	movs	r2, r4
1000a65e:	0029      	movs	r1, r5
1000a660:	4809      	ldr	r0, [pc, #36]	; (1000a688 <sms_button_get_state+0x44>)
1000a662:	4b0a      	ldr	r3, [pc, #40]	; (1000a68c <sms_button_get_state+0x48>)
1000a664:	4798      	blx	r3
    if(b0 && b1) return BUTTON_STATE_BOTH;
1000a666:	2c00      	cmp	r4, #0
1000a668:	d004      	beq.n	1000a674 <sms_button_get_state+0x30>
1000a66a:	2003      	movs	r0, #3
1000a66c:	2d00      	cmp	r5, #0
1000a66e:	d104      	bne.n	1000a67a <sms_button_get_state+0x36>
    else if(b0 && !b1) return BUTTON_STATE_B0;
1000a670:	3802      	subs	r0, #2
1000a672:	e002      	b.n	1000a67a <sms_button_get_state+0x36>
    else if(!b0 && b1) return BUTTON_STATE_B1;
    else return BUTTON_STATE_NONE;
1000a674:	1e70      	subs	r0, r6, #1
1000a676:	4186      	sbcs	r6, r0
1000a678:	0070      	lsls	r0, r6, #1
}
1000a67a:	bd70      	pop	{r4, r5, r6, pc}
1000a67c:	1000c2d9 	.word	0x1000c2d9
1000a680:	1001663c 	.word	0x1001663c
1000a684:	10015495 	.word	0x10015495
1000a688:	10016d24 	.word	0x10016d24
1000a68c:	10015375 	.word	0x10015375

1000a690 <sms_button_fn>:
/************************************************************************/
/* Callback functions --> doing things                                  */
/************************************************************************/
/* BUTTON_0 */
int sms_button_fn(enum sms_btn_ids btn)
{
1000a690:	b570      	push	{r4, r5, r6, lr}
1000a692:	0005      	movs	r5, r0
    button_instance.previous_state = button_instance.current_state;
1000a694:	4c78      	ldr	r4, [pc, #480]	; (1000a878 <sms_button_fn+0x1e8>)
1000a696:	7863      	ldrb	r3, [r4, #1]
1000a698:	7023      	strb	r3, [r4, #0]
    button_instance.current_state = sms_button_get_state();
1000a69a:	4b78      	ldr	r3, [pc, #480]	; (1000a87c <sms_button_fn+0x1ec>)
1000a69c:	4798      	blx	r3
1000a69e:	7060      	strb	r0, [r4, #1]
    
    if(btn == SMS_BTN_0) sms_monitor_get_states("[sms_button_fn]-0");
1000a6a0:	2d00      	cmp	r5, #0
1000a6a2:	d103      	bne.n	1000a6ac <sms_button_fn+0x1c>
1000a6a4:	4876      	ldr	r0, [pc, #472]	; (1000a880 <sms_button_fn+0x1f0>)
1000a6a6:	4b77      	ldr	r3, [pc, #476]	; (1000a884 <sms_button_fn+0x1f4>)
1000a6a8:	4798      	blx	r3
1000a6aa:	e005      	b.n	1000a6b8 <sms_button_fn+0x28>
    else if(btn == SMS_BTN_1) sms_monitor_get_states("[sms_button_fn]-1");
1000a6ac:	2d01      	cmp	r5, #1
1000a6ae:	d000      	beq.n	1000a6b2 <sms_button_fn+0x22>
1000a6b0:	e0d4      	b.n	1000a85c <sms_button_fn+0x1cc>
1000a6b2:	4875      	ldr	r0, [pc, #468]	; (1000a888 <sms_button_fn+0x1f8>)
1000a6b4:	4b73      	ldr	r3, [pc, #460]	; (1000a884 <sms_button_fn+0x1f4>)
1000a6b6:	4798      	blx	r3
    else return -1;
    
    switch(button_instance.current_state) {
1000a6b8:	4b6f      	ldr	r3, [pc, #444]	; (1000a878 <sms_button_fn+0x1e8>)
1000a6ba:	785b      	ldrb	r3, [r3, #1]
1000a6bc:	2b01      	cmp	r3, #1
1000a6be:	d008      	beq.n	1000a6d2 <sms_button_fn+0x42>
1000a6c0:	2b00      	cmp	r3, #0
1000a6c2:	d100      	bne.n	1000a6c6 <sms_button_fn+0x36>
1000a6c4:	e0c5      	b.n	1000a852 <sms_button_fn+0x1c2>
1000a6c6:	2b02      	cmp	r3, #2
1000a6c8:	d04b      	beq.n	1000a762 <sms_button_fn+0xd2>
1000a6ca:	2b03      	cmp	r3, #3
1000a6cc:	d100      	bne.n	1000a6d0 <sms_button_fn+0x40>
1000a6ce:	e08f      	b.n	1000a7f0 <sms_button_fn+0x160>
1000a6d0:	e0c7      	b.n	1000a862 <sms_button_fn+0x1d2>
        // --- current state ---
        case BUTTON_STATE_B0:
        switch(ble_current_state) {
1000a6d2:	4b6e      	ldr	r3, [pc, #440]	; (1000a88c <sms_button_fn+0x1fc>)
1000a6d4:	781b      	ldrb	r3, [r3, #0]
1000a6d6:	b2db      	uxtb	r3, r3
1000a6d8:	2b00      	cmp	r3, #0
1000a6da:	d003      	beq.n	1000a6e4 <sms_button_fn+0x54>
1000a6dc:	3b22      	subs	r3, #34	; 0x22
1000a6de:	2b01      	cmp	r3, #1
1000a6e0:	d836      	bhi.n	1000a750 <sms_button_fn+0xc0>
1000a6e2:	e00e      	b.n	1000a702 <sms_button_fn+0x72>
            case BLE_STATE_POWEROFF:
            timer1_current_mode = TIMER1_MODE_STARTUP;
1000a6e4:	2201      	movs	r2, #1
1000a6e6:	4b6a      	ldr	r3, [pc, #424]	; (1000a890 <sms_button_fn+0x200>)
1000a6e8:	701a      	strb	r2, [r3, #0]
            timer2_current_mode = TIMER2_MODE_NONE;
1000a6ea:	2300      	movs	r3, #0
1000a6ec:	4a69      	ldr	r2, [pc, #420]	; (1000a894 <sms_button_fn+0x204>)
1000a6ee:	7013      	strb	r3, [r2, #0]
            sms_btn_cnt = 0;
1000a6f0:	4a69      	ldr	r2, [pc, #420]	; (1000a898 <sms_button_fn+0x208>)
1000a6f2:	7013      	strb	r3, [r2, #0]
            //ulp_ready = false;
            sms_dualtimer_start(TIMER_UNIT_MS, SMS_BTN_STARTUP_MS, DUALTIMER_TIMER1);
1000a6f4:	2200      	movs	r2, #0
1000a6f6:	21fa      	movs	r1, #250	; 0xfa
1000a6f8:	2001      	movs	r0, #1
1000a6fa:	4b68      	ldr	r3, [pc, #416]	; (1000a89c <sms_button_fn+0x20c>)
1000a6fc:	4798      	blx	r3
        ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
1000a6fe:	2000      	movs	r0, #0
            timer1_current_mode = TIMER1_MODE_STARTUP;
            timer2_current_mode = TIMER2_MODE_NONE;
            sms_btn_cnt = 0;
            //ulp_ready = false;
            sms_dualtimer_start(TIMER_UNIT_MS, SMS_BTN_STARTUP_MS, DUALTIMER_TIMER1);
            break;
1000a700:	e0b9      	b.n	1000a876 <sms_button_fn+0x1e6>
            
            case BLE_STATE_PAIRED:
            case BLE_STATE_INDICATING:
            if(pressure_device.state == PRESSURE_STATE_STDBY) {
1000a702:	2328      	movs	r3, #40	; 0x28
1000a704:	4a66      	ldr	r2, [pc, #408]	; (1000a8a0 <sms_button_fn+0x210>)
1000a706:	5cd3      	ldrb	r3, [r2, r3]
1000a708:	2b01      	cmp	r3, #1
1000a70a:	d109      	bne.n	1000a720 <sms_button_fn+0x90>
                DBG_LOG_DEV("[sms_button_fn]\t\tStarting sensors (B0)");
1000a70c:	4865      	ldr	r0, [pc, #404]	; (1000a8a4 <sms_button_fn+0x214>)
1000a70e:	4b66      	ldr	r3, [pc, #408]	; (1000a8a8 <sms_button_fn+0x218>)
1000a710:	4798      	blx	r3
1000a712:	4866      	ldr	r0, [pc, #408]	; (1000a8ac <sms_button_fn+0x21c>)
1000a714:	4b66      	ldr	r3, [pc, #408]	; (1000a8b0 <sms_button_fn+0x220>)
1000a716:	4798      	blx	r3
                sms_sensors_interrupt_toggle(false, true);
1000a718:	2101      	movs	r1, #1
1000a71a:	2000      	movs	r0, #0
1000a71c:	4b65      	ldr	r3, [pc, #404]	; (1000a8b4 <sms_button_fn+0x224>)
1000a71e:	4798      	blx	r3
            }
            timer1_current_mode = TIMER1_MODE_NONE;
1000a720:	2300      	movs	r3, #0
1000a722:	4a5b      	ldr	r2, [pc, #364]	; (1000a890 <sms_button_fn+0x200>)
1000a724:	7013      	strb	r3, [r2, #0]
            timer2_current_mode = TIMER2_MODE_NONE;
1000a726:	4a5b      	ldr	r2, [pc, #364]	; (1000a894 <sms_button_fn+0x204>)
1000a728:	7013      	strb	r3, [r2, #0]
            if(btn == btn0_instance.id) sms_ble_send_characteristic(BLE_CHAR_BTN0);
1000a72a:	4b63      	ldr	r3, [pc, #396]	; (1000a8b8 <sms_button_fn+0x228>)
1000a72c:	781b      	ldrb	r3, [r3, #0]
1000a72e:	42ab      	cmp	r3, r5
1000a730:	d104      	bne.n	1000a73c <sms_button_fn+0xac>
1000a732:	2000      	movs	r0, #0
1000a734:	4b61      	ldr	r3, [pc, #388]	; (1000a8bc <sms_button_fn+0x22c>)
1000a736:	4798      	blx	r3
        ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
1000a738:	2000      	movs	r0, #0
1000a73a:	e09c      	b.n	1000a876 <sms_button_fn+0x1e6>
                sms_sensors_interrupt_toggle(false, true);
            }
            timer1_current_mode = TIMER1_MODE_NONE;
            timer2_current_mode = TIMER2_MODE_NONE;
            if(btn == btn0_instance.id) sms_ble_send_characteristic(BLE_CHAR_BTN0);
            else if(btn == btn1_instance.id) sms_ble_send_characteristic(BLE_CHAR_BTN1);
1000a73c:	4b60      	ldr	r3, [pc, #384]	; (1000a8c0 <sms_button_fn+0x230>)
1000a73e:	781b      	ldrb	r3, [r3, #0]
1000a740:	42ab      	cmp	r3, r5
1000a742:	d000      	beq.n	1000a746 <sms_button_fn+0xb6>
1000a744:	e08f      	b.n	1000a866 <sms_button_fn+0x1d6>
1000a746:	2001      	movs	r0, #1
1000a748:	4b5c      	ldr	r3, [pc, #368]	; (1000a8bc <sms_button_fn+0x22c>)
1000a74a:	4798      	blx	r3
        ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
1000a74c:	2000      	movs	r0, #0
1000a74e:	e092      	b.n	1000a876 <sms_button_fn+0x1e6>
            
            case BLE_STATE_DISCONNECTED:
            case BLE_STATE_ADVERTISING:
            case BLE_STATE_CONNECTED:
            default:
            DBG_LOG_DEV("[sms_button_fn]\t\t\tNot used states...");
1000a750:	4854      	ldr	r0, [pc, #336]	; (1000a8a4 <sms_button_fn+0x214>)
1000a752:	4b55      	ldr	r3, [pc, #340]	; (1000a8a8 <sms_button_fn+0x218>)
1000a754:	4798      	blx	r3
1000a756:	485b      	ldr	r0, [pc, #364]	; (1000a8c4 <sms_button_fn+0x234>)
1000a758:	4b55      	ldr	r3, [pc, #340]	; (1000a8b0 <sms_button_fn+0x220>)
1000a75a:	4798      	blx	r3
            return -1;
1000a75c:	2001      	movs	r0, #1
1000a75e:	4240      	negs	r0, r0
1000a760:	e089      	b.n	1000a876 <sms_button_fn+0x1e6>
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        break;
        
        // --- current state ---
        case BUTTON_STATE_B1:
        switch(ble_current_state) {
1000a762:	4b4a      	ldr	r3, [pc, #296]	; (1000a88c <sms_button_fn+0x1fc>)
1000a764:	781b      	ldrb	r3, [r3, #0]
1000a766:	b2db      	uxtb	r3, r3
1000a768:	2b22      	cmp	r3, #34	; 0x22
1000a76a:	d012      	beq.n	1000a792 <sms_button_fn+0x102>
1000a76c:	2b23      	cmp	r3, #35	; 0x23
1000a76e:	d036      	beq.n	1000a7de <sms_button_fn+0x14e>
1000a770:	2b00      	cmp	r3, #0
1000a772:	d17b      	bne.n	1000a86c <sms_button_fn+0x1dc>
            case BLE_STATE_POWEROFF:
            timer1_current_mode = TIMER1_MODE_STARTUP;
1000a774:	2201      	movs	r2, #1
1000a776:	4b46      	ldr	r3, [pc, #280]	; (1000a890 <sms_button_fn+0x200>)
1000a778:	701a      	strb	r2, [r3, #0]
            timer2_current_mode = TIMER2_MODE_NONE;
1000a77a:	2300      	movs	r3, #0
1000a77c:	4a45      	ldr	r2, [pc, #276]	; (1000a894 <sms_button_fn+0x204>)
1000a77e:	7013      	strb	r3, [r2, #0]
            sms_btn_cnt = 0;
1000a780:	4a45      	ldr	r2, [pc, #276]	; (1000a898 <sms_button_fn+0x208>)
1000a782:	7013      	strb	r3, [r2, #0]
            //ulp_ready = false;
            sms_dualtimer_start(TIMER_UNIT_MS, SMS_BTN_STARTUP_MS, DUALTIMER_TIMER1);
1000a784:	2200      	movs	r2, #0
1000a786:	21fa      	movs	r1, #250	; 0xfa
1000a788:	2001      	movs	r0, #1
1000a78a:	4b44      	ldr	r3, [pc, #272]	; (1000a89c <sms_button_fn+0x20c>)
1000a78c:	4798      	blx	r3
        ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
1000a78e:	2000      	movs	r0, #0
            timer1_current_mode = TIMER1_MODE_STARTUP;
            timer2_current_mode = TIMER2_MODE_NONE;
            sms_btn_cnt = 0;
            //ulp_ready = false;
            sms_dualtimer_start(TIMER_UNIT_MS, SMS_BTN_STARTUP_MS, DUALTIMER_TIMER1);
            break;
1000a790:	e071      	b.n	1000a876 <sms_button_fn+0x1e6>
            
            case BLE_STATE_PAIRED:
            if(pressure_device.state == PRESSURE_STATE_STDBY) {
1000a792:	2328      	movs	r3, #40	; 0x28
1000a794:	4a42      	ldr	r2, [pc, #264]	; (1000a8a0 <sms_button_fn+0x210>)
1000a796:	5cd3      	ldrb	r3, [r2, r3]
1000a798:	2b01      	cmp	r3, #1
1000a79a:	d109      	bne.n	1000a7b0 <sms_button_fn+0x120>
                DBG_LOG_DEV("[sms_button_fn]\t\tStarting sensors (B1)");
1000a79c:	4841      	ldr	r0, [pc, #260]	; (1000a8a4 <sms_button_fn+0x214>)
1000a79e:	4b42      	ldr	r3, [pc, #264]	; (1000a8a8 <sms_button_fn+0x218>)
1000a7a0:	4798      	blx	r3
1000a7a2:	4849      	ldr	r0, [pc, #292]	; (1000a8c8 <sms_button_fn+0x238>)
1000a7a4:	4b42      	ldr	r3, [pc, #264]	; (1000a8b0 <sms_button_fn+0x220>)
1000a7a6:	4798      	blx	r3
                sms_sensors_interrupt_toggle(false, true);
1000a7a8:	2101      	movs	r1, #1
1000a7aa:	2000      	movs	r0, #0
1000a7ac:	4b41      	ldr	r3, [pc, #260]	; (1000a8b4 <sms_button_fn+0x224>)
1000a7ae:	4798      	blx	r3
            }
            timer1_current_mode = TIMER1_MODE_NONE;
1000a7b0:	2300      	movs	r3, #0
1000a7b2:	4a37      	ldr	r2, [pc, #220]	; (1000a890 <sms_button_fn+0x200>)
1000a7b4:	7013      	strb	r3, [r2, #0]
            timer2_current_mode = TIMER2_MODE_NONE;
1000a7b6:	4a37      	ldr	r2, [pc, #220]	; (1000a894 <sms_button_fn+0x204>)
1000a7b8:	7013      	strb	r3, [r2, #0]
            //sms_ble_ind_retry = 0;
            if(btn == btn0_instance.id) sms_ble_send_characteristic(BLE_CHAR_BTN0);
1000a7ba:	4b3f      	ldr	r3, [pc, #252]	; (1000a8b8 <sms_button_fn+0x228>)
1000a7bc:	781b      	ldrb	r3, [r3, #0]
1000a7be:	42ab      	cmp	r3, r5
1000a7c0:	d104      	bne.n	1000a7cc <sms_button_fn+0x13c>
1000a7c2:	2000      	movs	r0, #0
1000a7c4:	4b3d      	ldr	r3, [pc, #244]	; (1000a8bc <sms_button_fn+0x22c>)
1000a7c6:	4798      	blx	r3
        ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
1000a7c8:	2000      	movs	r0, #0
1000a7ca:	e054      	b.n	1000a876 <sms_button_fn+0x1e6>
            }
            timer1_current_mode = TIMER1_MODE_NONE;
            timer2_current_mode = TIMER2_MODE_NONE;
            //sms_ble_ind_retry = 0;
            if(btn == btn0_instance.id) sms_ble_send_characteristic(BLE_CHAR_BTN0);
            else if(btn == btn1_instance.id) sms_ble_send_characteristic(BLE_CHAR_BTN1);
1000a7cc:	4b3c      	ldr	r3, [pc, #240]	; (1000a8c0 <sms_button_fn+0x230>)
1000a7ce:	781b      	ldrb	r3, [r3, #0]
1000a7d0:	42ab      	cmp	r3, r5
1000a7d2:	d14e      	bne.n	1000a872 <sms_button_fn+0x1e2>
1000a7d4:	2001      	movs	r0, #1
1000a7d6:	4b39      	ldr	r3, [pc, #228]	; (1000a8bc <sms_button_fn+0x22c>)
1000a7d8:	4798      	blx	r3
        ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
1000a7da:	2000      	movs	r0, #0
1000a7dc:	e04b      	b.n	1000a876 <sms_button_fn+0x1e6>
            else if(btn == btn1_instance.id) sms_ble_send_characteristic(BLE_CHAR_BTN1);
            else return -1;
            break;
            
            case BLE_STATE_INDICATING:
            DBG_LOG_DEV("[sms_button_fn]\tStill indicating...");
1000a7de:	4831      	ldr	r0, [pc, #196]	; (1000a8a4 <sms_button_fn+0x214>)
1000a7e0:	4b31      	ldr	r3, [pc, #196]	; (1000a8a8 <sms_button_fn+0x218>)
1000a7e2:	4798      	blx	r3
1000a7e4:	4839      	ldr	r0, [pc, #228]	; (1000a8cc <sms_button_fn+0x23c>)
1000a7e6:	4b32      	ldr	r3, [pc, #200]	; (1000a8b0 <sms_button_fn+0x220>)
1000a7e8:	4798      	blx	r3
            return -1;
1000a7ea:	2001      	movs	r0, #1
1000a7ec:	4240      	negs	r0, r0
1000a7ee:	e042      	b.n	1000a876 <sms_button_fn+0x1e6>
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        break;
        
        // --- current state ---
        case BUTTON_STATE_BOTH:
        if(ble_current_state == BLE_STATE_POWEROFF) {
1000a7f0:	4b26      	ldr	r3, [pc, #152]	; (1000a88c <sms_button_fn+0x1fc>)
1000a7f2:	781b      	ldrb	r3, [r3, #0]
1000a7f4:	2b00      	cmp	r3, #0
1000a7f6:	d108      	bne.n	1000a80a <sms_button_fn+0x17a>
            timer1_current_mode = TIMER1_MODE_NONE;
1000a7f8:	4a25      	ldr	r2, [pc, #148]	; (1000a890 <sms_button_fn+0x200>)
1000a7fa:	7013      	strb	r3, [r2, #0]
            timer2_current_mode = TIMER2_MODE_NONE;
1000a7fc:	4a25      	ldr	r2, [pc, #148]	; (1000a894 <sms_button_fn+0x204>)
1000a7fe:	7013      	strb	r3, [r2, #0]
            ulp_ready = true;
1000a800:	2201      	movs	r2, #1
1000a802:	4b33      	ldr	r3, [pc, #204]	; (1000a8d0 <sms_button_fn+0x240>)
1000a804:	701a      	strb	r2, [r3, #0]
        ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
1000a806:	2000      	movs	r0, #0
1000a808:	e035      	b.n	1000a876 <sms_button_fn+0x1e6>
            ulp_ready = true;
            //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
            //release_sleep_lock();
        }
        else {
            if((ble_current_state == BLE_STATE_PAIRED) || (ble_current_state == BLE_STATE_INDICATING)) {
1000a80a:	4b20      	ldr	r3, [pc, #128]	; (1000a88c <sms_button_fn+0x1fc>)
1000a80c:	781b      	ldrb	r3, [r3, #0]
1000a80e:	2b22      	cmp	r3, #34	; 0x22
1000a810:	d003      	beq.n	1000a81a <sms_button_fn+0x18a>
1000a812:	4b1e      	ldr	r3, [pc, #120]	; (1000a88c <sms_button_fn+0x1fc>)
1000a814:	781b      	ldrb	r3, [r3, #0]
1000a816:	2b23      	cmp	r3, #35	; 0x23
1000a818:	d104      	bne.n	1000a824 <sms_button_fn+0x194>
                pressure_device.state = PRESSURE_STATE_STDBY;
1000a81a:	2101      	movs	r1, #1
1000a81c:	2328      	movs	r3, #40	; 0x28
1000a81e:	4a20      	ldr	r2, [pc, #128]	; (1000a8a0 <sms_button_fn+0x210>)
1000a820:	54d1      	strb	r1, [r2, r3]
1000a822:	e003      	b.n	1000a82c <sms_button_fn+0x19c>
            }
            else {
                pressure_device.state = PRESSURE_STATE_OFF;
1000a824:	2100      	movs	r1, #0
1000a826:	2328      	movs	r3, #40	; 0x28
1000a828:	4a1d      	ldr	r2, [pc, #116]	; (1000a8a0 <sms_button_fn+0x210>)
1000a82a:	54d1      	strb	r1, [r2, r3]
            }
            sms_sensors_interrupt_toggle(false, false);
1000a82c:	2100      	movs	r1, #0
1000a82e:	2000      	movs	r0, #0
1000a830:	4b20      	ldr	r3, [pc, #128]	; (1000a8b4 <sms_button_fn+0x224>)
1000a832:	4798      	blx	r3
            timer1_current_mode = TIMER1_MODE_SHUTDOWN;
1000a834:	2203      	movs	r2, #3
1000a836:	4b16      	ldr	r3, [pc, #88]	; (1000a890 <sms_button_fn+0x200>)
1000a838:	701a      	strb	r2, [r3, #0]
            timer2_current_mode = TIMER2_MODE_NONE;
1000a83a:	2300      	movs	r3, #0
1000a83c:	4a15      	ldr	r2, [pc, #84]	; (1000a894 <sms_button_fn+0x204>)
1000a83e:	7013      	strb	r3, [r2, #0]
            sms_btn_cnt = 0;
1000a840:	4a15      	ldr	r2, [pc, #84]	; (1000a898 <sms_button_fn+0x208>)
1000a842:	7013      	strb	r3, [r2, #0]
            //ulp_ready = false;
            sms_dualtimer_start(TIMER_UNIT_MS, SMS_BTN_SHTDWN_MS, DUALTIMER_TIMER1);
1000a844:	2200      	movs	r2, #0
1000a846:	21fa      	movs	r1, #250	; 0xfa
1000a848:	2001      	movs	r0, #1
1000a84a:	4b14      	ldr	r3, [pc, #80]	; (1000a89c <sms_button_fn+0x20c>)
1000a84c:	4798      	blx	r3
        ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
1000a84e:	2000      	movs	r0, #0
1000a850:	e011      	b.n	1000a876 <sms_button_fn+0x1e6>
        }
        break;
        
        // --- current state ---
        case BUTTON_STATE_NONE:
        ulp_ready = true;
1000a852:	2201      	movs	r2, #1
1000a854:	4b1e      	ldr	r3, [pc, #120]	; (1000a8d0 <sms_button_fn+0x240>)
1000a856:	701a      	strb	r2, [r3, #0]
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
1000a858:	2000      	movs	r0, #0
        // --- current state ---
        case BUTTON_STATE_NONE:
        ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
1000a85a:	e00c      	b.n	1000a876 <sms_button_fn+0x1e6>
    button_instance.previous_state = button_instance.current_state;
    button_instance.current_state = sms_button_get_state();
    
    if(btn == SMS_BTN_0) sms_monitor_get_states("[sms_button_fn]-0");
    else if(btn == SMS_BTN_1) sms_monitor_get_states("[sms_button_fn]-1");
    else return -1;
1000a85c:	2001      	movs	r0, #1
1000a85e:	4240      	negs	r0, r0
1000a860:	e009      	b.n	1000a876 <sms_button_fn+0x1e6>
        ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
1000a862:	2000      	movs	r0, #0
1000a864:	e007      	b.n	1000a876 <sms_button_fn+0x1e6>
            }
            timer1_current_mode = TIMER1_MODE_NONE;
            timer2_current_mode = TIMER2_MODE_NONE;
            if(btn == btn0_instance.id) sms_ble_send_characteristic(BLE_CHAR_BTN0);
            else if(btn == btn1_instance.id) sms_ble_send_characteristic(BLE_CHAR_BTN1);
            else return -1;
1000a866:	2001      	movs	r0, #1
1000a868:	4240      	negs	r0, r0
1000a86a:	e004      	b.n	1000a876 <sms_button_fn+0x1e6>
            
            case BLE_STATE_DISCONNECTED:
            case BLE_STATE_ADVERTISING:
            case BLE_STATE_CONNECTED:
            default:
            return -1;
1000a86c:	2001      	movs	r0, #1
1000a86e:	4240      	negs	r0, r0
1000a870:	e001      	b.n	1000a876 <sms_button_fn+0x1e6>
            timer1_current_mode = TIMER1_MODE_NONE;
            timer2_current_mode = TIMER2_MODE_NONE;
            //sms_ble_ind_retry = 0;
            if(btn == btn0_instance.id) sms_ble_send_characteristic(BLE_CHAR_BTN0);
            else if(btn == btn1_instance.id) sms_ble_send_characteristic(BLE_CHAR_BTN1);
            else return -1;
1000a872:	2001      	movs	r0, #1
1000a874:	4240      	negs	r0, r0
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
}
1000a876:	bd70      	pop	{r4, r5, r6, pc}
1000a878:	1001a220 	.word	0x1001a220
1000a87c:	1000a645 	.word	0x1000a645
1000a880:	10016d50 	.word	0x10016d50
1000a884:	1000a9d9 	.word	0x1000a9d9
1000a888:	10016d64 	.word	0x10016d64
1000a88c:	1001a330 	.word	0x1001a330
1000a890:	1001a184 	.word	0x1001a184
1000a894:	1001a331 	.word	0x1001a331
1000a898:	1001a34e 	.word	0x1001a34e
1000a89c:	1000b5a1 	.word	0x1000b5a1
1000a8a0:	1001a294 	.word	0x1001a294
1000a8a4:	1001663c 	.word	0x1001663c
1000a8a8:	10015495 	.word	0x10015495
1000a8ac:	10016d78 	.word	0x10016d78
1000a8b0:	10015375 	.word	0x10015375
1000a8b4:	1000aa35 	.word	0x1000aa35
1000a8b8:	1001a180 	.word	0x1001a180
1000a8bc:	1000a211 	.word	0x1000a211
1000a8c0:	1001a21c 	.word	0x1001a21c
1000a8c4:	10016da0 	.word	0x10016da0
1000a8c8:	10016dc8 	.word	0x10016dc8
1000a8cc:	10016df0 	.word	0x10016df0
1000a8d0:	1001a219 	.word	0x1001a219

1000a8d4 <sms_button_toggle_interrupt>:
    else return BUTTON_STATE_NONE;
}

/* En- or disable button interrupts */
void sms_button_toggle_interrupt(enum sms_btn_int_tog tog0, enum sms_btn_int_tog tog1)
{
1000a8d4:	b510      	push	{r4, lr}
1000a8d6:	000c      	movs	r4, r1
    if(tog0 == SMS_BTN_INT_ENABLE) {
1000a8d8:	2800      	cmp	r0, #0
1000a8da:	d104      	bne.n	1000a8e6 <sms_button_toggle_interrupt+0x12>
        gpio_enable_callback(btn0_instance.gpio_pin);
1000a8dc:	4b0c      	ldr	r3, [pc, #48]	; (1000a910 <sms_button_toggle_interrupt+0x3c>)
1000a8de:	7858      	ldrb	r0, [r3, #1]
1000a8e0:	4b0c      	ldr	r3, [pc, #48]	; (1000a914 <sms_button_toggle_interrupt+0x40>)
1000a8e2:	4798      	blx	r3
1000a8e4:	e005      	b.n	1000a8f2 <sms_button_toggle_interrupt+0x1e>
    }
    else if(tog0 == SMS_BTN_INT_DISABLE) {
1000a8e6:	2801      	cmp	r0, #1
1000a8e8:	d103      	bne.n	1000a8f2 <sms_button_toggle_interrupt+0x1e>
        gpio_disable_callback(btn0_instance.gpio_pin);
1000a8ea:	4b09      	ldr	r3, [pc, #36]	; (1000a910 <sms_button_toggle_interrupt+0x3c>)
1000a8ec:	7858      	ldrb	r0, [r3, #1]
1000a8ee:	4b0a      	ldr	r3, [pc, #40]	; (1000a918 <sms_button_toggle_interrupt+0x44>)
1000a8f0:	4798      	blx	r3
    }
    
    if(tog1 == SMS_BTN_INT_ENABLE) {
1000a8f2:	2c00      	cmp	r4, #0
1000a8f4:	d104      	bne.n	1000a900 <sms_button_toggle_interrupt+0x2c>
        gpio_enable_callback(btn1_instance.gpio_pin);
1000a8f6:	4b09      	ldr	r3, [pc, #36]	; (1000a91c <sms_button_toggle_interrupt+0x48>)
1000a8f8:	7858      	ldrb	r0, [r3, #1]
1000a8fa:	4b06      	ldr	r3, [pc, #24]	; (1000a914 <sms_button_toggle_interrupt+0x40>)
1000a8fc:	4798      	blx	r3
1000a8fe:	e005      	b.n	1000a90c <sms_button_toggle_interrupt+0x38>
    }
    else if(tog1 == SMS_BTN_INT_DISABLE) {
1000a900:	2c01      	cmp	r4, #1
1000a902:	d103      	bne.n	1000a90c <sms_button_toggle_interrupt+0x38>
        gpio_disable_callback(btn1_instance.gpio_pin);
1000a904:	4b05      	ldr	r3, [pc, #20]	; (1000a91c <sms_button_toggle_interrupt+0x48>)
1000a906:	7858      	ldrb	r0, [r3, #1]
1000a908:	4b03      	ldr	r3, [pc, #12]	; (1000a918 <sms_button_toggle_interrupt+0x44>)
1000a90a:	4798      	blx	r3
    }
}
1000a90c:	bd10      	pop	{r4, pc}
1000a90e:	46c0      	nop			; (mov r8, r8)
1000a910:	1001a180 	.word	0x1001a180
1000a914:	1000c621 	.word	0x1000c621
1000a918:	1000c67d 	.word	0x1000c67d
1000a91c:	1001a21c 	.word	0x1001a21c

1000a920 <sms_button_define_services>:
    send_plf_int_msg_ind(btn1_instance.gpio_pin, GPIO_CALLBACK_RISING, NULL, 0);
}

/* Define BLE service for buttons */
void sms_button_define_services(void)
{
1000a920:	b510      	push	{r4, lr}
1000a922:	b082      	sub	sp, #8
    at_ble_status_t status;
    uint8_t init_value = 0;
1000a924:	466b      	mov	r3, sp
1000a926:	1dda      	adds	r2, r3, #7
1000a928:	2300      	movs	r3, #0
1000a92a:	7013      	strb	r3, [r2, #0]
    sms_ble_service_init(BLE_SERV_BUTTON, &button_instance.service_handler, &init_value);
1000a92c:	4c0d      	ldr	r4, [pc, #52]	; (1000a964 <sms_button_define_services+0x44>)
1000a92e:	0021      	movs	r1, r4
1000a930:	2000      	movs	r0, #0
1000a932:	4b0d      	ldr	r3, [pc, #52]	; (1000a968 <sms_button_define_services+0x48>)
1000a934:	4798      	blx	r3
    if((status = sms_ble_primary_service_define(&button_instance.service_handler)) != AT_BLE_SUCCESS) {
1000a936:	0020      	movs	r0, r4
1000a938:	4b0c      	ldr	r3, [pc, #48]	; (1000a96c <sms_button_define_services+0x4c>)
1000a93a:	4798      	blx	r3
1000a93c:	1e04      	subs	r4, r0, #0
1000a93e:	d007      	beq.n	1000a950 <sms_button_define_services+0x30>
        DBG_LOG("[sms_button_define_services]\tServices defining failed, reason 0x%x", status);
1000a940:	480b      	ldr	r0, [pc, #44]	; (1000a970 <sms_button_define_services+0x50>)
1000a942:	4b0c      	ldr	r3, [pc, #48]	; (1000a974 <sms_button_define_services+0x54>)
1000a944:	4798      	blx	r3
1000a946:	0021      	movs	r1, r4
1000a948:	480b      	ldr	r0, [pc, #44]	; (1000a978 <sms_button_define_services+0x58>)
1000a94a:	4b0c      	ldr	r3, [pc, #48]	; (1000a97c <sms_button_define_services+0x5c>)
1000a94c:	4798      	blx	r3
1000a94e:	e007      	b.n	1000a960 <sms_button_define_services+0x40>
    }
    else {
        DBG_LOG_DEV("[sms_button_define_services]\tServices defined, SMS button handle: %d", button_instance.service_handler.serv_handle);
1000a950:	4807      	ldr	r0, [pc, #28]	; (1000a970 <sms_button_define_services+0x50>)
1000a952:	4b08      	ldr	r3, [pc, #32]	; (1000a974 <sms_button_define_services+0x54>)
1000a954:	4798      	blx	r3
1000a956:	4b0a      	ldr	r3, [pc, #40]	; (1000a980 <sms_button_define_services+0x60>)
1000a958:	8ad9      	ldrh	r1, [r3, #22]
1000a95a:	480a      	ldr	r0, [pc, #40]	; (1000a984 <sms_button_define_services+0x64>)
1000a95c:	4b07      	ldr	r3, [pc, #28]	; (1000a97c <sms_button_define_services+0x5c>)
1000a95e:	4798      	blx	r3
    }
1000a960:	b002      	add	sp, #8
1000a962:	bd10      	pop	{r4, pc}
1000a964:	1001a224 	.word	0x1001a224
1000a968:	1000a431 	.word	0x1000a431
1000a96c:	1000a40d 	.word	0x1000a40d
1000a970:	1001663c 	.word	0x1001663c
1000a974:	10015495 	.word	0x10015495
1000a978:	10016e14 	.word	0x10016e14
1000a97c:	10015375 	.word	0x10015375
1000a980:	1001a220 	.word	0x1001a220
1000a984:	10016e58 	.word	0x10016e58

1000a988 <sms_monitor_configure_gpio>:

#include "sms_common.h"

/* General functions */
void sms_monitor_configure_gpio(void)
{
1000a988:	b510      	push	{r4, lr}
1000a98a:	b082      	sub	sp, #8
    struct gpio_config config_gpio_pin;
    gpio_get_config_defaults(&config_gpio_pin);
1000a98c:	ac01      	add	r4, sp, #4
1000a98e:	0020      	movs	r0, r4
1000a990:	4b0a      	ldr	r3, [pc, #40]	; (1000a9bc <sms_monitor_configure_gpio+0x34>)
1000a992:	4798      	blx	r3
    config_gpio_pin.direction  = GPIO_PIN_DIR_OUTPUT;
1000a994:	2301      	movs	r3, #1
1000a996:	7023      	strb	r3, [r4, #0]
    if(gpio_pin_set_config(DBG_PIN_1, &config_gpio_pin) != STATUS_OK) {
1000a998:	0021      	movs	r1, r4
1000a99a:	2002      	movs	r0, #2
1000a99c:	4b08      	ldr	r3, [pc, #32]	; (1000a9c0 <sms_monitor_configure_gpio+0x38>)
1000a99e:	4798      	blx	r3
1000a9a0:	2800      	cmp	r0, #0
1000a9a2:	d005      	beq.n	1000a9b0 <sms_monitor_configure_gpio+0x28>
        DBG_LOG("Problem while setting gpio pin");
1000a9a4:	4807      	ldr	r0, [pc, #28]	; (1000a9c4 <sms_monitor_configure_gpio+0x3c>)
1000a9a6:	4b08      	ldr	r3, [pc, #32]	; (1000a9c8 <sms_monitor_configure_gpio+0x40>)
1000a9a8:	4798      	blx	r3
1000a9aa:	4808      	ldr	r0, [pc, #32]	; (1000a9cc <sms_monitor_configure_gpio+0x44>)
1000a9ac:	4b08      	ldr	r3, [pc, #32]	; (1000a9d0 <sms_monitor_configure_gpio+0x48>)
1000a9ae:	4798      	blx	r3
    }
    gpio_pin_set_output_level(DBG_PIN_1, DBG_PIN_LOW);
1000a9b0:	2100      	movs	r1, #0
1000a9b2:	2002      	movs	r0, #2
1000a9b4:	4b07      	ldr	r3, [pc, #28]	; (1000a9d4 <sms_monitor_configure_gpio+0x4c>)
1000a9b6:	4798      	blx	r3
}
1000a9b8:	b002      	add	sp, #8
1000a9ba:	bd10      	pop	{r4, pc}
1000a9bc:	1000c111 	.word	0x1000c111
1000a9c0:	1000c121 	.word	0x1000c121
1000a9c4:	1001663c 	.word	0x1001663c
1000a9c8:	10015495 	.word	0x10015495
1000a9cc:	10016ea0 	.word	0x10016ea0
1000a9d0:	10015375 	.word	0x10015375
1000a9d4:	1000c379 	.word	0x1000c379

1000a9d8 <sms_monitor_get_states>:

void sms_monitor_get_states(const char *label)
{
1000a9d8:	b570      	push	{r4, r5, r6, lr}
1000a9da:	b084      	sub	sp, #16
1000a9dc:	0004      	movs	r4, r0
    DBG_LOG_DEV("%s...\t\tB-prev %d, B-cur %d, BLE 0x%02x, T1 %d, T2 %d, SMS %d", label, button_instance.previous_state, button_instance.current_state, ble_current_state, timer1_current_mode, timer2_current_mode, sms_working_mode);
1000a9de:	480c      	ldr	r0, [pc, #48]	; (1000aa10 <sms_monitor_get_states+0x38>)
1000a9e0:	4b0c      	ldr	r3, [pc, #48]	; (1000aa14 <sms_monitor_get_states+0x3c>)
1000a9e2:	4798      	blx	r3
1000a9e4:	4b0c      	ldr	r3, [pc, #48]	; (1000aa18 <sms_monitor_get_states+0x40>)
1000a9e6:	7819      	ldrb	r1, [r3, #0]
1000a9e8:	4b0c      	ldr	r3, [pc, #48]	; (1000aa1c <sms_monitor_get_states+0x44>)
1000a9ea:	7818      	ldrb	r0, [r3, #0]
1000a9ec:	4b0c      	ldr	r3, [pc, #48]	; (1000aa20 <sms_monitor_get_states+0x48>)
1000a9ee:	781d      	ldrb	r5, [r3, #0]
1000a9f0:	4b0c      	ldr	r3, [pc, #48]	; (1000aa24 <sms_monitor_get_states+0x4c>)
1000a9f2:	781e      	ldrb	r6, [r3, #0]
1000a9f4:	4a0c      	ldr	r2, [pc, #48]	; (1000aa28 <sms_monitor_get_states+0x50>)
1000a9f6:	7853      	ldrb	r3, [r2, #1]
1000a9f8:	7812      	ldrb	r2, [r2, #0]
1000a9fa:	9603      	str	r6, [sp, #12]
1000a9fc:	9502      	str	r5, [sp, #8]
1000a9fe:	9001      	str	r0, [sp, #4]
1000aa00:	9100      	str	r1, [sp, #0]
1000aa02:	0021      	movs	r1, r4
1000aa04:	4809      	ldr	r0, [pc, #36]	; (1000aa2c <sms_monitor_get_states+0x54>)
1000aa06:	4c0a      	ldr	r4, [pc, #40]	; (1000aa30 <sms_monitor_get_states+0x58>)
1000aa08:	47a0      	blx	r4
}
1000aa0a:	b004      	add	sp, #16
1000aa0c:	bd70      	pop	{r4, r5, r6, pc}
1000aa0e:	46c0      	nop			; (mov r8, r8)
1000aa10:	1001663c 	.word	0x1001663c
1000aa14:	10015495 	.word	0x10015495
1000aa18:	1001a330 	.word	0x1001a330
1000aa1c:	1001a184 	.word	0x1001a184
1000aa20:	1001a331 	.word	0x1001a331
1000aa24:	1001a218 	.word	0x1001a218
1000aa28:	1001a220 	.word	0x1001a220
1000aa2c:	10016ec0 	.word	0x10016ec0
1000aa30:	10015375 	.word	0x10015375

1000aa34 <sms_sensors_interrupt_toggle>:



/* Sensors-related functions */
void sms_sensors_interrupt_toggle(bool mpu_int, bool press_int) {
1000aa34:	b510      	push	{r4, lr}
1000aa36:	000c      	movs	r4, r1
    /* IMU --> IMU_DRDY */
    if(mpu_int) {
1000aa38:	2800      	cmp	r0, #0
1000aa3a:	d007      	beq.n	1000aa4c <sms_sensors_interrupt_toggle+0x18>
        mpu_device.state = MPU_STATE_ON;
1000aa3c:	2102      	movs	r1, #2
1000aa3e:	2330      	movs	r3, #48	; 0x30
1000aa40:	4a15      	ldr	r2, [pc, #84]	; (1000aa98 <sms_sensors_interrupt_toggle+0x64>)
1000aa42:	54d1      	strb	r1, [r2, r3]
        gpio_enable_callback(SMS_MPU_DRDY_PIN);
1000aa44:	201e      	movs	r0, #30
1000aa46:	4b15      	ldr	r3, [pc, #84]	; (1000aa9c <sms_sensors_interrupt_toggle+0x68>)
1000aa48:	4798      	blx	r3
1000aa4a:	e006      	b.n	1000aa5a <sms_sensors_interrupt_toggle+0x26>
    }
    else {
        mpu_device.state = MPU_STATE_OFF;
1000aa4c:	2100      	movs	r1, #0
1000aa4e:	2330      	movs	r3, #48	; 0x30
1000aa50:	4a11      	ldr	r2, [pc, #68]	; (1000aa98 <sms_sensors_interrupt_toggle+0x64>)
1000aa52:	54d1      	strb	r1, [r2, r3]
        gpio_disable_callback(SMS_MPU_DRDY_PIN);
1000aa54:	201e      	movs	r0, #30
1000aa56:	4b12      	ldr	r3, [pc, #72]	; (1000aaa0 <sms_sensors_interrupt_toggle+0x6c>)
1000aa58:	4798      	blx	r3
     * Note: Since there is no direct mechanism to simply enable and disable
     *       the AON sleep timer interruption, we have to initialize it each
     *       time (and it starts running) and register the corresponding
     *       callback (and it enables the interrupt)
     */
    if(press_int) {
1000aa5a:	2c00      	cmp	r4, #0
1000aa5c:	d010      	beq.n	1000aa80 <sms_sensors_interrupt_toggle+0x4c>
        pressure_device.ms58_device.current_state = MS58_STATE_CONV_PRESSURE;
1000aa5e:	4b11      	ldr	r3, [pc, #68]	; (1000aaa4 <sms_sensors_interrupt_toggle+0x70>)
1000aa60:	2103      	movs	r1, #3
1000aa62:	2225      	movs	r2, #37	; 0x25
1000aa64:	5499      	strb	r1, [r3, r2]
        pressure_device.state = PRESSURE_STATE_ON;
1000aa66:	3901      	subs	r1, #1
1000aa68:	3203      	adds	r2, #3
1000aa6a:	5499      	strb	r1, [r3, r2]
        sms_timer_aon_init(SMS_PRESSURE_CONVERT_MS, AON_SLEEP_TIMER_RELOAD_MODE);
1000aa6c:	2100      	movs	r1, #0
1000aa6e:	480e      	ldr	r0, [pc, #56]	; (1000aaa8 <sms_sensors_interrupt_toggle+0x74>)
1000aa70:	4b0e      	ldr	r3, [pc, #56]	; (1000aaac <sms_sensors_interrupt_toggle+0x78>)
1000aa72:	4798      	blx	r3
        sms_timer_aon_register_callback();
1000aa74:	4b0e      	ldr	r3, [pc, #56]	; (1000aab0 <sms_sensors_interrupt_toggle+0x7c>)
1000aa76:	4798      	blx	r3
        sensors_active = true;
1000aa78:	2201      	movs	r2, #1
1000aa7a:	4b0e      	ldr	r3, [pc, #56]	; (1000aab4 <sms_sensors_interrupt_toggle+0x80>)
1000aa7c:	701a      	strb	r2, [r3, #0]
1000aa7e:	e00a      	b.n	1000aa96 <sms_sensors_interrupt_toggle+0x62>
    }
    else {
        pressure_device.ms58_device.current_state = MS58_STATE_READY;
1000aa80:	2102      	movs	r1, #2
1000aa82:	2325      	movs	r3, #37	; 0x25
1000aa84:	4a07      	ldr	r2, [pc, #28]	; (1000aaa4 <sms_sensors_interrupt_toggle+0x70>)
1000aa86:	54d1      	strb	r1, [r2, r3]
        sms_timer_aon_disable();
1000aa88:	4b0b      	ldr	r3, [pc, #44]	; (1000aab8 <sms_sensors_interrupt_toggle+0x84>)
1000aa8a:	4798      	blx	r3
        sms_timer_aon_unregister_callback();
1000aa8c:	4b0b      	ldr	r3, [pc, #44]	; (1000aabc <sms_sensors_interrupt_toggle+0x88>)
1000aa8e:	4798      	blx	r3
        sensors_active = false;
1000aa90:	2200      	movs	r2, #0
1000aa92:	4b08      	ldr	r3, [pc, #32]	; (1000aab4 <sms_sensors_interrupt_toggle+0x80>)
1000aa94:	701a      	strb	r2, [r3, #0]
    }
}
1000aa96:	bd10      	pop	{r4, pc}
1000aa98:	1001a188 	.word	0x1001a188
1000aa9c:	1000c621 	.word	0x1000c621
1000aaa0:	1000c67d 	.word	0x1000c67d
1000aaa4:	1001a294 	.word	0x1001a294
1000aaa8:	00000cc6 	.word	0x00000cc6
1000aaac:	1000b4d9 	.word	0x1000b4d9
1000aab0:	1000b50d 	.word	0x1000b50d
1000aab4:	1001a324 	.word	0x1001a324
1000aab8:	1000b501 	.word	0x1000b501
1000aabc:	1000b52d 	.word	0x1000b52d

1000aac0 <sms_sensors_switch>:
    

void sms_sensors_switch(bool mpu_en, bool press_en)
{
1000aac0:	b510      	push	{r4, lr}
1000aac2:	000c      	movs	r4, r1
    /* IMU */
    if(mpu_en) {
1000aac4:	2800      	cmp	r0, #0
1000aac6:	d001      	beq.n	1000aacc <sms_sensors_switch+0xc>
        sms_mpu_initialize();
1000aac8:	4b09      	ldr	r3, [pc, #36]	; (1000aaf0 <sms_sensors_switch+0x30>)
1000aaca:	4798      	blx	r3
    else {
        //gpio_pin_set_output_level(SMS_IMU_VCC_PIN, false);
    }
    
    /* Pressure */
    if(press_en) {                
1000aacc:	2c00      	cmp	r4, #0
1000aace:	d009      	beq.n	1000aae4 <sms_sensors_switch+0x24>
        pressure_device.ms58_device.current_state = MS58_STATE_RESETTING;
1000aad0:	4b08      	ldr	r3, [pc, #32]	; (1000aaf4 <sms_sensors_switch+0x34>)
1000aad2:	2101      	movs	r1, #1
1000aad4:	2225      	movs	r2, #37	; 0x25
1000aad6:	5499      	strb	r1, [r3, r2]
        pressure_device.ms58_device.reset_done = false;
1000aad8:	2200      	movs	r2, #0
1000aada:	705a      	strb	r2, [r3, #1]
        pressure_device.ms58_device.init_ok = false;
1000aadc:	709a      	strb	r2, [r3, #2]
        sms_pressure_startup();
1000aade:	4b06      	ldr	r3, [pc, #24]	; (1000aaf8 <sms_sensors_switch+0x38>)
1000aae0:	4798      	blx	r3
1000aae2:	e003      	b.n	1000aaec <sms_sensors_switch+0x2c>
    }
    else {
        gpio_pin_set_output_level(SMS_PRESSURE_VCC_PIN, false);
1000aae4:	2100      	movs	r1, #0
1000aae6:	2007      	movs	r0, #7
1000aae8:	4b04      	ldr	r3, [pc, #16]	; (1000aafc <sms_sensors_switch+0x3c>)
1000aaea:	4798      	blx	r3
    }
}
1000aaec:	bd10      	pop	{r4, pc}
1000aaee:	46c0      	nop			; (mov r8, r8)
1000aaf0:	1000ad25 	.word	0x1000ad25
1000aaf4:	1001a294 	.word	0x1001a294
1000aaf8:	1000b019 	.word	0x1000b019
1000aafc:	1000c379 	.word	0x1000c379

1000ab00 <sms_i2c_master_configure>:
#include <stdlib.h>
#include "sms_i2c.h"


void sms_i2c_master_configure(void)
{
1000ab00:	b530      	push	{r4, r5, lr}
1000ab02:	b087      	sub	sp, #28
    i2c_wpacket.data = malloc(I2C_DATA_LENGTH * sizeof(uint8_t));
1000ab04:	2010      	movs	r0, #16
1000ab06:	4c14      	ldr	r4, [pc, #80]	; (1000ab58 <sms_i2c_master_configure+0x58>)
1000ab08:	47a0      	blx	r4
1000ab0a:	4b14      	ldr	r3, [pc, #80]	; (1000ab5c <sms_i2c_master_configure+0x5c>)
1000ab0c:	6058      	str	r0, [r3, #4]
    i2c_rpacket.data = malloc(I2C_DATA_LENGTH * sizeof(uint8_t));
1000ab0e:	2010      	movs	r0, #16
1000ab10:	47a0      	blx	r4
1000ab12:	4b13      	ldr	r3, [pc, #76]	; (1000ab60 <sms_i2c_master_configure+0x60>)
1000ab14:	6058      	str	r0, [r3, #4]

    struct i2c_master_config config_i2c_master;
    i2c_master_get_config_defaults(&config_i2c_master);
1000ab16:	ac01      	add	r4, sp, #4
1000ab18:	0020      	movs	r0, r4
1000ab1a:	4b12      	ldr	r3, [pc, #72]	; (1000ab64 <sms_i2c_master_configure+0x64>)
1000ab1c:	4798      	blx	r3
    config_i2c_master.clock_source = SMS_I2C_MASTER_CLK_SRC;
1000ab1e:	2300      	movs	r3, #0
1000ab20:	7023      	strb	r3, [r4, #0]
    config_i2c_master.clock_divider = SMS_I2C_MASTER_CLK_DIV;
1000ab22:	3341      	adds	r3, #65	; 0x41
1000ab24:	8063      	strh	r3, [r4, #2]
    config_i2c_master.pin_number_pad0 = SMS_I2C_MASTER_PIN_SDA;
1000ab26:	3b33      	subs	r3, #51	; 0x33
1000ab28:	6063      	str	r3, [r4, #4]
    config_i2c_master.pin_number_pad1 = SMS_I2C_MASTER_PIN_SCL;
1000ab2a:	3301      	adds	r3, #1
1000ab2c:	60e3      	str	r3, [r4, #12]
    config_i2c_master.pinmux_sel_pad0 = SMS_I2C_MASTER_MUX_SDA;
1000ab2e:	3b0b      	subs	r3, #11
1000ab30:	60a3      	str	r3, [r4, #8]
    config_i2c_master.pinmux_sel_pad1 = SMS_I2C_MASTER_MUX_SCL;
1000ab32:	6123      	str	r3, [r4, #16]
    while(i2c_master_init(&i2c_master_instance, SMS_I2C_MASTER_PORT, &config_i2c_master) != STATUS_OK);
1000ab34:	4d0c      	ldr	r5, [pc, #48]	; (1000ab68 <sms_i2c_master_configure+0x68>)
1000ab36:	4c0d      	ldr	r4, [pc, #52]	; (1000ab6c <sms_i2c_master_configure+0x6c>)
1000ab38:	aa01      	add	r2, sp, #4
1000ab3a:	490d      	ldr	r1, [pc, #52]	; (1000ab70 <sms_i2c_master_configure+0x70>)
1000ab3c:	0028      	movs	r0, r5
1000ab3e:	47a0      	blx	r4
1000ab40:	2800      	cmp	r0, #0
1000ab42:	d1f9      	bne.n	1000ab38 <sms_i2c_master_configure+0x38>

    i2c_enable(i2c_master_instance.hw);
1000ab44:	4b08      	ldr	r3, [pc, #32]	; (1000ab68 <sms_i2c_master_configure+0x68>)
1000ab46:	681a      	ldr	r2, [r3, #0]
 *
 * \param[in]  i2c_module  Pointer to software module structure
 */
static inline void i2c_wait_for_idle(I2c *const i2c_module)
{
	while (i2c_module->I2C_STATUS.bit.I2C_ACTIVE) {
1000ab48:	2128      	movs	r1, #40	; 0x28
1000ab4a:	5c53      	ldrb	r3, [r2, r1]
1000ab4c:	07db      	lsls	r3, r3, #31
1000ab4e:	d4fc      	bmi.n	1000ab4a <sms_i2c_master_configure+0x4a>
static inline void i2c_enable(I2c *const i2c_module)
{
	/* Wait for module to sync. */
	i2c_wait_for_idle(i2c_module);
	/* Enable module. */
	i2c_module->I2C_MODULE_ENABLE.reg = (1 << I2C_MODULE_ENABLE_ENABLE_Pos);
1000ab50:	2301      	movs	r3, #1
1000ab52:	7513      	strb	r3, [r2, #20]
}
1000ab54:	b007      	add	sp, #28
1000ab56:	bd30      	pop	{r4, r5, pc}
1000ab58:	100151e9 	.word	0x100151e9
1000ab5c:	1001a338 	.word	0x1001a338
1000ab60:	1001a31c 	.word	0x1001a31c
1000ab64:	10008369 	.word	0x10008369
1000ab68:	1001a328 	.word	0x1001a328
1000ab6c:	10008381 	.word	0x10008381
1000ab70:	40003400 	.word	0x40003400

1000ab74 <sms_i2c_master_write>:

int sms_i2c_master_write(uint8_t slave_addr, uint8_t reg_addr, uint8_t data_len, uint8_t const *data)
{
1000ab74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    //DBG_LOG("i2c writing to 0x%02x at 0x%02x... data: ", slave_addr, reg_addr);
    uint16_t timeout = 0;
    i2c_wpacket.address = (uint8_t)slave_addr;
1000ab76:	4c12      	ldr	r4, [pc, #72]	; (1000abc0 <sms_i2c_master_write+0x4c>)
1000ab78:	8020      	strh	r0, [r4, #0]
    i2c_wpacket.data_length = (uint8_t)(data_len + 1);
1000ab7a:	1c50      	adds	r0, r2, #1
1000ab7c:	b2c0      	uxtb	r0, r0
1000ab7e:	8060      	strh	r0, [r4, #2]
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
1000ab80:	6860      	ldr	r0, [r4, #4]
1000ab82:	7001      	strb	r1, [r0, #0]
    for(uint8_t i = 0; i < data_len; i++) {
1000ab84:	2a00      	cmp	r2, #0
1000ab86:	d00e      	beq.n	1000aba6 <sms_i2c_master_write+0x32>
1000ab88:	2000      	movs	r0, #0
1000ab8a:	1c41      	adds	r1, r0, #1
        i2c_wpacket.data[i+1] = (uint8_t)data[i];
1000ab8c:	5c18      	ldrb	r0, [r3, r0]
1000ab8e:	6865      	ldr	r5, [r4, #4]
1000ab90:	5468      	strb	r0, [r5, r1]
1000ab92:	0008      	movs	r0, r1
    //DBG_LOG("i2c writing to 0x%02x at 0x%02x... data: ", slave_addr, reg_addr);
    uint16_t timeout = 0;
    i2c_wpacket.address = (uint8_t)slave_addr;
    i2c_wpacket.data_length = (uint8_t)(data_len + 1);
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
    for(uint8_t i = 0; i < data_len; i++) {
1000ab94:	b2c9      	uxtb	r1, r1
1000ab96:	428a      	cmp	r2, r1
1000ab98:	d8f7      	bhi.n	1000ab8a <sms_i2c_master_write+0x16>
1000ab9a:	e004      	b.n	1000aba6 <sms_i2c_master_write+0x32>
1000ab9c:	3c01      	subs	r4, #1
1000ab9e:	b2a4      	uxth	r4, r4
        i2c_wpacket.data[i+1] = (uint8_t)data[i];
        //DBG_LOG_CONT("0x%02x ", packet.data[i+1]);
    }
    while (i2c_master_write_packet_wait(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) {
        /* Increment timeout counter and check if timed out. */
        if (timeout++ >= I2C_TIMEOUT) {
1000aba0:	2c00      	cmp	r4, #0
1000aba2:	d104      	bne.n	1000abae <sms_i2c_master_write+0x3a>
1000aba4:	e009      	b.n	1000abba <sms_i2c_master_write+0x46>
    //DBG_LOG("i2c writing to 0x%02x at 0x%02x... data: ", slave_addr, reg_addr);
    uint16_t timeout = 0;
    i2c_wpacket.address = (uint8_t)slave_addr;
    i2c_wpacket.data_length = (uint8_t)(data_len + 1);
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
    for(uint8_t i = 0; i < data_len; i++) {
1000aba6:	4c07      	ldr	r4, [pc, #28]	; (1000abc4 <sms_i2c_master_write+0x50>)
        i2c_wpacket.data[i+1] = (uint8_t)data[i];
        //DBG_LOG_CONT("0x%02x ", packet.data[i+1]);
    }
    while (i2c_master_write_packet_wait(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) {
1000aba8:	4e05      	ldr	r6, [pc, #20]	; (1000abc0 <sms_i2c_master_write+0x4c>)
1000abaa:	4d07      	ldr	r5, [pc, #28]	; (1000abc8 <sms_i2c_master_write+0x54>)
1000abac:	4f07      	ldr	r7, [pc, #28]	; (1000abcc <sms_i2c_master_write+0x58>)
1000abae:	0031      	movs	r1, r6
1000abb0:	0028      	movs	r0, r5
1000abb2:	47b8      	blx	r7
1000abb4:	2800      	cmp	r0, #0
1000abb6:	d1f1      	bne.n	1000ab9c <sms_i2c_master_write+0x28>
1000abb8:	e001      	b.n	1000abbe <sms_i2c_master_write+0x4a>
        /* Increment timeout counter and check if timed out. */
        if (timeout++ >= I2C_TIMEOUT) {
            return -1;
1000abba:	2001      	movs	r0, #1
1000abbc:	4240      	negs	r0, r0
        }
    }
    return 0;
}
1000abbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000abc0:	1001a338 	.word	0x1001a338
1000abc4:	000003e9 	.word	0x000003e9
1000abc8:	1001a328 	.word	0x1001a328
1000abcc:	10008419 	.word	0x10008419

1000abd0 <sms_i2c_master_read>:

int sms_i2c_master_read(uint8_t slave_addr, uint8_t reg_addr, uint8_t data_len, uint8_t *data)
{
1000abd0:	b5f0      	push	{r4, r5, r6, r7, lr}
1000abd2:	4647      	mov	r7, r8
1000abd4:	b480      	push	{r7}
1000abd6:	0017      	movs	r7, r2
1000abd8:	4698      	mov	r8, r3
    //DBG_LOG("i2c reading from 0x%02x at 0x%02x... data: ", slave_addr, reg_addr);
    uint16_t timeout;
    i2c_wpacket.address = (uint8_t)slave_addr;
1000abda:	b280      	uxth	r0, r0
1000abdc:	4b1d      	ldr	r3, [pc, #116]	; (1000ac54 <sms_i2c_master_read+0x84>)
1000abde:	8018      	strh	r0, [r3, #0]
    i2c_wpacket.data_length = 1;
1000abe0:	2201      	movs	r2, #1
1000abe2:	805a      	strh	r2, [r3, #2]
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
1000abe4:	685b      	ldr	r3, [r3, #4]
1000abe6:	7019      	strb	r1, [r3, #0]
    i2c_rpacket.address = (uint8_t)slave_addr;
1000abe8:	4b1b      	ldr	r3, [pc, #108]	; (1000ac58 <sms_i2c_master_read+0x88>)
1000abea:	8018      	strh	r0, [r3, #0]
    i2c_rpacket.data_length = (uint8_t)data_len;
1000abec:	805f      	strh	r7, [r3, #2]
    
    timeout = 0;
    while(i2c_master_write_packet_wait_no_stop(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) {
1000abee:	4c1b      	ldr	r4, [pc, #108]	; (1000ac5c <sms_i2c_master_read+0x8c>)
1000abf0:	4e18      	ldr	r6, [pc, #96]	; (1000ac54 <sms_i2c_master_read+0x84>)
1000abf2:	4d1b      	ldr	r5, [pc, #108]	; (1000ac60 <sms_i2c_master_read+0x90>)
1000abf4:	e003      	b.n	1000abfe <sms_i2c_master_read+0x2e>
1000abf6:	3c01      	subs	r4, #1
1000abf8:	b2a4      	uxth	r4, r4
        if(timeout++ >= I2C_TIMEOUT) {
1000abfa:	2c00      	cmp	r4, #0
1000abfc:	d01f      	beq.n	1000ac3e <sms_i2c_master_read+0x6e>
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
    i2c_rpacket.address = (uint8_t)slave_addr;
    i2c_rpacket.data_length = (uint8_t)data_len;
    
    timeout = 0;
    while(i2c_master_write_packet_wait_no_stop(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) {
1000abfe:	0031      	movs	r1, r6
1000ac00:	4818      	ldr	r0, [pc, #96]	; (1000ac64 <sms_i2c_master_read+0x94>)
1000ac02:	47a8      	blx	r5
1000ac04:	2800      	cmp	r0, #0
1000ac06:	d1f6      	bne.n	1000abf6 <sms_i2c_master_read+0x26>
1000ac08:	4e14      	ldr	r6, [pc, #80]	; (1000ac5c <sms_i2c_master_read+0x8c>)
            return -1;
        }
    }
    
    timeout = 0;
    while(i2c_master_read_packet_wait(&i2c_master_instance, &i2c_rpacket) != STATUS_OK) {
1000ac0a:	4d13      	ldr	r5, [pc, #76]	; (1000ac58 <sms_i2c_master_read+0x88>)
1000ac0c:	4c16      	ldr	r4, [pc, #88]	; (1000ac68 <sms_i2c_master_read+0x98>)
1000ac0e:	e003      	b.n	1000ac18 <sms_i2c_master_read+0x48>
1000ac10:	3e01      	subs	r6, #1
1000ac12:	b2b6      	uxth	r6, r6
        if(timeout++ >= I2C_TIMEOUT) {
1000ac14:	2e00      	cmp	r6, #0
1000ac16:	d015      	beq.n	1000ac44 <sms_i2c_master_read+0x74>
            return -1;
        }
    }
    
    timeout = 0;
    while(i2c_master_read_packet_wait(&i2c_master_instance, &i2c_rpacket) != STATUS_OK) {
1000ac18:	0029      	movs	r1, r5
1000ac1a:	4812      	ldr	r0, [pc, #72]	; (1000ac64 <sms_i2c_master_read+0x94>)
1000ac1c:	47a0      	blx	r4
1000ac1e:	2800      	cmp	r0, #0
1000ac20:	d1f6      	bne.n	1000ac10 <sms_i2c_master_read+0x40>
        if(timeout++ >= I2C_TIMEOUT) {
            return -1;
        }
    }
    for(uint8_t i = 0; i < data_len; i++) {
1000ac22:	2f00      	cmp	r7, #0
1000ac24:	d011      	beq.n	1000ac4a <sms_i2c_master_read+0x7a>
1000ac26:	2300      	movs	r3, #0
        data[i] = i2c_rpacket.data[i];
1000ac28:	490b      	ldr	r1, [pc, #44]	; (1000ac58 <sms_i2c_master_read+0x88>)
1000ac2a:	684a      	ldr	r2, [r1, #4]
1000ac2c:	5cd2      	ldrb	r2, [r2, r3]
1000ac2e:	4640      	mov	r0, r8
1000ac30:	54c2      	strb	r2, [r0, r3]
1000ac32:	3301      	adds	r3, #1
    while(i2c_master_read_packet_wait(&i2c_master_instance, &i2c_rpacket) != STATUS_OK) {
        if(timeout++ >= I2C_TIMEOUT) {
            return -1;
        }
    }
    for(uint8_t i = 0; i < data_len; i++) {
1000ac34:	b2da      	uxtb	r2, r3
1000ac36:	4297      	cmp	r7, r2
1000ac38:	d8f7      	bhi.n	1000ac2a <sms_i2c_master_read+0x5a>
        data[i] = i2c_rpacket.data[i];
        //DBG_LOG("0x%02x ", data[i]);
    }
    return 0;
1000ac3a:	2000      	movs	r0, #0
1000ac3c:	e006      	b.n	1000ac4c <sms_i2c_master_read+0x7c>
    i2c_rpacket.data_length = (uint8_t)data_len;
    
    timeout = 0;
    while(i2c_master_write_packet_wait_no_stop(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) {
        if(timeout++ >= I2C_TIMEOUT) {
            return -1;
1000ac3e:	2001      	movs	r0, #1
1000ac40:	4240      	negs	r0, r0
1000ac42:	e003      	b.n	1000ac4c <sms_i2c_master_read+0x7c>
    }
    
    timeout = 0;
    while(i2c_master_read_packet_wait(&i2c_master_instance, &i2c_rpacket) != STATUS_OK) {
        if(timeout++ >= I2C_TIMEOUT) {
            return -1;
1000ac44:	2001      	movs	r0, #1
1000ac46:	4240      	negs	r0, r0
1000ac48:	e000      	b.n	1000ac4c <sms_i2c_master_read+0x7c>
    }
    for(uint8_t i = 0; i < data_len; i++) {
        data[i] = i2c_rpacket.data[i];
        //DBG_LOG("0x%02x ", data[i]);
    }
    return 0;
1000ac4a:	2000      	movs	r0, #0
1000ac4c:	bc04      	pop	{r2}
1000ac4e:	4690      	mov	r8, r2
1000ac50:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000ac52:	46c0      	nop			; (mov r8, r8)
1000ac54:	1001a338 	.word	0x1001a338
1000ac58:	1001a31c 	.word	0x1001a31c
1000ac5c:	000003e9 	.word	0x000003e9
1000ac60:	1000843d 	.word	0x1000843d
1000ac64:	1001a328 	.word	0x1001a328
1000ac68:	100083f5 	.word	0x100083f5

1000ac6c <sms_mpu_interrupt_callback>:
    gpio_unregister_callback(SMS_MPU_DRDY_PIN, GPIO_CALLBACK_RISING);
}

/* Callback --> send interrupt message to platform */
void sms_mpu_interrupt_callback(void)
{
1000ac6c:	b510      	push	{r4, lr}
    sms_current_interrupt.source = INT_MPU_DRDY;
1000ac6e:	2203      	movs	r2, #3
1000ac70:	4b04      	ldr	r3, [pc, #16]	; (1000ac84 <sms_mpu_interrupt_callback+0x18>)
1000ac72:	701a      	strb	r2, [r3, #0]
    send_plf_int_msg_ind(SMS_MPU_DRDY_PIN, GPIO_CALLBACK_RISING, NULL, 0);
1000ac74:	2300      	movs	r3, #0
1000ac76:	2200      	movs	r2, #0
1000ac78:	2102      	movs	r1, #2
1000ac7a:	201e      	movs	r0, #30
1000ac7c:	4c02      	ldr	r4, [pc, #8]	; (1000ac88 <sms_mpu_interrupt_callback+0x1c>)
1000ac7e:	47a0      	blx	r4
}
1000ac80:	bd10      	pop	{r4, pc}
1000ac82:	46c0      	nop			; (mov r8, r8)
1000ac84:	1001a318 	.word	0x1001a318
1000ac88:	1000f3e1 	.word	0x1000f3e1

1000ac8c <sms_mpu_configure_gpio>:
#include "sms_peripheral1.h"

//static struct hal_s hal = {0};
    
void sms_mpu_configure_gpio(void)
{
1000ac8c:	b510      	push	{r4, lr}
1000ac8e:	b082      	sub	sp, #8
    struct gpio_config config_gpio_pin;

    /* Data ready interrupt from IMU */
    gpio_get_config_defaults(&config_gpio_pin);
1000ac90:	ac01      	add	r4, sp, #4
1000ac92:	0020      	movs	r0, r4
1000ac94:	4b15      	ldr	r3, [pc, #84]	; (1000acec <sms_mpu_configure_gpio+0x60>)
1000ac96:	4798      	blx	r3
    config_gpio_pin.direction = GPIO_PIN_DIR_INPUT;
1000ac98:	2300      	movs	r3, #0
1000ac9a:	7023      	strb	r3, [r4, #0]
    config_gpio_pin.input_pull = GPIO_PIN_PULL_DOWN;
1000ac9c:	3302      	adds	r3, #2
1000ac9e:	7063      	strb	r3, [r4, #1]
    config_gpio_pin.aon_wakeup = true;
1000aca0:	3b01      	subs	r3, #1
1000aca2:	70e3      	strb	r3, [r4, #3]
    if(gpio_pin_set_config(SMS_MPU_DRDY_PIN, &config_gpio_pin) != STATUS_OK) {
1000aca4:	0021      	movs	r1, r4
1000aca6:	201e      	movs	r0, #30
1000aca8:	4b11      	ldr	r3, [pc, #68]	; (1000acf0 <sms_mpu_configure_gpio+0x64>)
1000acaa:	4798      	blx	r3
1000acac:	2800      	cmp	r0, #0
1000acae:	d005      	beq.n	1000acbc <sms_mpu_configure_gpio+0x30>
        DBG_LOG("[sms_imu_configure_gpio]\tProblem while setting up IMU DRDY pin");
1000acb0:	4810      	ldr	r0, [pc, #64]	; (1000acf4 <sms_mpu_configure_gpio+0x68>)
1000acb2:	4b11      	ldr	r3, [pc, #68]	; (1000acf8 <sms_mpu_configure_gpio+0x6c>)
1000acb4:	4798      	blx	r3
1000acb6:	4811      	ldr	r0, [pc, #68]	; (1000acfc <sms_mpu_configure_gpio+0x70>)
1000acb8:	4b11      	ldr	r3, [pc, #68]	; (1000ad00 <sms_mpu_configure_gpio+0x74>)
1000acba:	4798      	blx	r3
    }

    /* Pin output to supply IMU */
    gpio_get_config_defaults(&config_gpio_pin);
1000acbc:	ac01      	add	r4, sp, #4
1000acbe:	0020      	movs	r0, r4
1000acc0:	4b0a      	ldr	r3, [pc, #40]	; (1000acec <sms_mpu_configure_gpio+0x60>)
1000acc2:	4798      	blx	r3
    config_gpio_pin.direction = GPIO_PIN_DIR_OUTPUT;
1000acc4:	2301      	movs	r3, #1
1000acc6:	7023      	strb	r3, [r4, #0]
    if(!gpio_pin_set_config(SMS_MPU_VCC_PIN, &config_gpio_pin) != STATUS_OK) {
1000acc8:	0021      	movs	r1, r4
1000acca:	2006      	movs	r0, #6
1000accc:	4b08      	ldr	r3, [pc, #32]	; (1000acf0 <sms_mpu_configure_gpio+0x64>)
1000acce:	4798      	blx	r3
1000acd0:	2800      	cmp	r0, #0
1000acd2:	d105      	bne.n	1000ace0 <sms_mpu_configure_gpio+0x54>
        DBG_LOG("[sms_imu_configure_gpio]\tProblem while setting up IMU VCC pin");
1000acd4:	4807      	ldr	r0, [pc, #28]	; (1000acf4 <sms_mpu_configure_gpio+0x68>)
1000acd6:	4b08      	ldr	r3, [pc, #32]	; (1000acf8 <sms_mpu_configure_gpio+0x6c>)
1000acd8:	4798      	blx	r3
1000acda:	480a      	ldr	r0, [pc, #40]	; (1000ad04 <sms_mpu_configure_gpio+0x78>)
1000acdc:	4b08      	ldr	r3, [pc, #32]	; (1000ad00 <sms_mpu_configure_gpio+0x74>)
1000acde:	4798      	blx	r3
    }
    gpio_pin_set_output_level(SMS_MPU_VCC_PIN, true);
1000ace0:	2101      	movs	r1, #1
1000ace2:	2006      	movs	r0, #6
1000ace4:	4b08      	ldr	r3, [pc, #32]	; (1000ad08 <sms_mpu_configure_gpio+0x7c>)
1000ace6:	4798      	blx	r3
}
1000ace8:	b002      	add	sp, #8
1000acea:	bd10      	pop	{r4, pc}
1000acec:	1000c111 	.word	0x1000c111
1000acf0:	1000c121 	.word	0x1000c121
1000acf4:	1001663c 	.word	0x1001663c
1000acf8:	10015495 	.word	0x10015495
1000acfc:	10016f00 	.word	0x10016f00
1000ad00:	10015375 	.word	0x10015375
1000ad04:	10016f40 	.word	0x10016f40
1000ad08:	1000c379 	.word	0x1000c379

1000ad0c <sms_mpu_register_callbacks>:

/* Register GPIO interrupt callback */
void sms_mpu_register_callbacks(void)
{
1000ad0c:	b510      	push	{r4, lr}
    /* MPU-9250 interrupt callback */
    gpio_register_callback(SMS_MPU_DRDY_PIN, sms_mpu_interrupt_callback, GPIO_CALLBACK_RISING);
1000ad0e:	2202      	movs	r2, #2
1000ad10:	4902      	ldr	r1, [pc, #8]	; (1000ad1c <sms_mpu_register_callbacks+0x10>)
1000ad12:	201e      	movs	r0, #30
1000ad14:	4b02      	ldr	r3, [pc, #8]	; (1000ad20 <sms_mpu_register_callbacks+0x14>)
1000ad16:	4798      	blx	r3
}
1000ad18:	bd10      	pop	{r4, pc}
1000ad1a:	46c0      	nop			; (mov r8, r8)
1000ad1c:	1000ac6d 	.word	0x1000ac6d
1000ad20:	1000c551 	.word	0x1000c551

1000ad24 <sms_mpu_initialize>:
{
    sms_current_interrupt.source = INT_MPU_DRDY;
    send_plf_int_msg_ind(SMS_MPU_DRDY_PIN, GPIO_CALLBACK_RISING, NULL, 0);
}

int sms_mpu_initialize(void) {
1000ad24:	b570      	push	{r4, r5, r6, lr}
    int res;
    //unsigned char accel_fsr = 0;
    //unsigned short gyro_rate, gyro_fsr, compass_fsr;
    
    /* Initialize MPU-9250 without interrupt parameter since this has to be set independently */
    DBG_LOG_DEV("Initializing MPU...");
1000ad26:	4825      	ldr	r0, [pc, #148]	; (1000adbc <sms_mpu_initialize+0x98>)
1000ad28:	4b25      	ldr	r3, [pc, #148]	; (1000adc0 <sms_mpu_initialize+0x9c>)
1000ad2a:	4798      	blx	r3
1000ad2c:	4825      	ldr	r0, [pc, #148]	; (1000adc4 <sms_mpu_initialize+0xa0>)
1000ad2e:	4b26      	ldr	r3, [pc, #152]	; (1000adc8 <sms_mpu_initialize+0xa4>)
1000ad30:	4798      	blx	r3
    res = mpu_init(NULL);
1000ad32:	2000      	movs	r0, #0
1000ad34:	4b25      	ldr	r3, [pc, #148]	; (1000adcc <sms_mpu_initialize+0xa8>)
1000ad36:	4798      	blx	r3
    if(res) {
1000ad38:	2800      	cmp	r0, #0
1000ad3a:	d005      	beq.n	1000ad48 <sms_mpu_initialize+0x24>
        DBG_LOG_CONT_DEV(" failed!");
1000ad3c:	4824      	ldr	r0, [pc, #144]	; (1000add0 <sms_mpu_initialize+0xac>)
1000ad3e:	4b22      	ldr	r3, [pc, #136]	; (1000adc8 <sms_mpu_initialize+0xa4>)
1000ad40:	4798      	blx	r3
        return -1;
1000ad42:	2001      	movs	r0, #1
1000ad44:	4240      	negs	r0, r0
1000ad46:	e037      	b.n	1000adb8 <sms_mpu_initialize+0x94>
    }
    DBG_LOG_DEV("Setting up MPU...");
1000ad48:	481c      	ldr	r0, [pc, #112]	; (1000adbc <sms_mpu_initialize+0x98>)
1000ad4a:	4b1d      	ldr	r3, [pc, #116]	; (1000adc0 <sms_mpu_initialize+0x9c>)
1000ad4c:	4798      	blx	r3
1000ad4e:	4821      	ldr	r0, [pc, #132]	; (1000add4 <sms_mpu_initialize+0xb0>)
1000ad50:	4b1d      	ldr	r3, [pc, #116]	; (1000adc8 <sms_mpu_initialize+0xa4>)
1000ad52:	4798      	blx	r3
    mpu_set_sensors(INV_XYZ_GYRO | INV_XYZ_ACCEL | INV_XYZ_COMPASS);
1000ad54:	2079      	movs	r0, #121	; 0x79
1000ad56:	4b20      	ldr	r3, [pc, #128]	; (1000add8 <sms_mpu_initialize+0xb4>)
1000ad58:	4798      	blx	r3
    mpu_configure_fifo(INV_XYZ_GYRO | INV_XYZ_ACCEL);
1000ad5a:	2078      	movs	r0, #120	; 0x78
1000ad5c:	4b1f      	ldr	r3, [pc, #124]	; (1000addc <sms_mpu_initialize+0xb8>)
1000ad5e:	4798      	blx	r3
    mpu_set_sample_rate(SMS_MPU_SAMPLE_RATE_HZ);
1000ad60:	2014      	movs	r0, #20
1000ad62:	4b1f      	ldr	r3, [pc, #124]	; (1000ade0 <sms_mpu_initialize+0xbc>)
1000ad64:	4798      	blx	r3
    mpu_set_compass_sample_rate(SMS_MPU_COMPASS_RATE_HZ);
1000ad66:	2001      	movs	r0, #1
1000ad68:	4b1e      	ldr	r3, [pc, #120]	; (1000ade4 <sms_mpu_initialize+0xc0>)
1000ad6a:	4798      	blx	r3
    mpu_get_sample_rate(&mpu_device.hal.sample_rate);
1000ad6c:	4d1e      	ldr	r5, [pc, #120]	; (1000ade8 <sms_mpu_initialize+0xc4>)
1000ad6e:	0028      	movs	r0, r5
1000ad70:	4b1e      	ldr	r3, [pc, #120]	; (1000adec <sms_mpu_initialize+0xc8>)
1000ad72:	4798      	blx	r3
    mpu_get_accel_fsr(&mpu_device.hal.accel_fsr);
1000ad74:	1f68      	subs	r0, r5, #5
1000ad76:	4b1e      	ldr	r3, [pc, #120]	; (1000adf0 <sms_mpu_initialize+0xcc>)
1000ad78:	4798      	blx	r3
    mpu_get_compass_fsr(&mpu_device.hal.compass_fsr);
1000ad7a:	1ea8      	subs	r0, r5, #2
1000ad7c:	4b1d      	ldr	r3, [pc, #116]	; (1000adf4 <sms_mpu_initialize+0xd0>)
1000ad7e:	4798      	blx	r3
    
    mpu_device.hal.sensors = (SMS_MPU_ACCEL_ON | SMS_MPU_GYRO_ON | SMS_MPU_COMPASS_ON);
1000ad80:	002c      	movs	r4, r5
1000ad82:	2307      	movs	r3, #7
1000ad84:	76eb      	strb	r3, [r5, #27]
    mpu_device.hal.dmp_features = (DMP_FEATURE_GYRO_CAL | DMP_FEATURE_SEND_RAW_ACCEL | DMP_FEATURE_SEND_ANY_GYRO);
1000ad86:	20f0      	movs	r0, #240	; 0xf0
1000ad88:	0040      	lsls	r0, r0, #1
1000ad8a:	83e8      	strh	r0, [r5, #30]
    mpu_set_compass_sample_rate(SMS_MPU_COMPASS_RATE_HZ);
    mpu_get_sample_rate(&mpu_device.hal.sample_rate);
    mpu_get_accel_fsr(&mpu_device.hal.accel_fsr);
    mpu_get_compass_fsr(&mpu_device.hal.compass_fsr);
    
    mpu_device.hal.sensors = (SMS_MPU_ACCEL_ON | SMS_MPU_GYRO_ON | SMS_MPU_COMPASS_ON);
1000ad8c:	3c0a      	subs	r4, #10
    mpu_device.hal.dmp_features = (DMP_FEATURE_GYRO_CAL | DMP_FEATURE_SEND_RAW_ACCEL | DMP_FEATURE_SEND_ANY_GYRO);
    dmp_enable_feature(mpu_device.hal.dmp_features);
1000ad8e:	4b1a      	ldr	r3, [pc, #104]	; (1000adf8 <sms_mpu_initialize+0xd4>)
1000ad90:	4798      	blx	r3
    dmp_set_fifo_rate(SMS_MPU_SAMPLE_RATE_HZ);
1000ad92:	2014      	movs	r0, #20
1000ad94:	4b19      	ldr	r3, [pc, #100]	; (1000adfc <sms_mpu_initialize+0xd8>)
1000ad96:	4798      	blx	r3
    mpu_set_dmp_state(1);
1000ad98:	2001      	movs	r0, #1
1000ad9a:	4b19      	ldr	r3, [pc, #100]	; (1000ae00 <sms_mpu_initialize+0xdc>)
1000ad9c:	4798      	blx	r3
    mpu_device.hal.dmp_on = 1;
1000ad9e:	2201      	movs	r2, #1
1000ada0:	2326      	movs	r3, #38	; 0x26
1000ada2:	54e2      	strb	r2, [r4, r3]
    mpu_device.temp_cnt = 0;
1000ada4:	2300      	movs	r3, #0
1000ada6:	322c      	adds	r2, #44	; 0x2c
1000ada8:	54a3      	strb	r3, [r4, r2]
    mpu_device.compass_cnt = 0;
1000adaa:	3a01      	subs	r2, #1
1000adac:	54a3      	strb	r3, [r4, r2]
    mpu_device.new_compass = false;
1000adae:	3202      	adds	r2, #2
1000adb0:	54a3      	strb	r3, [r4, r2]
    mpu_device.new_temp = false;
1000adb2:	3201      	adds	r2, #1
1000adb4:	54a3      	strb	r3, [r4, r2]
    
    return 0;
1000adb6:	2000      	movs	r0, #0
}
1000adb8:	bd70      	pop	{r4, r5, r6, pc}
1000adba:	46c0      	nop			; (mov r8, r8)
1000adbc:	1001663c 	.word	0x1001663c
1000adc0:	10015495 	.word	0x10015495
1000adc4:	10016f80 	.word	0x10016f80
1000adc8:	10015375 	.word	0x10015375
1000adcc:	100092b1 	.word	0x100092b1
1000add0:	10016f94 	.word	0x10016f94
1000add4:	10016fa0 	.word	0x10016fa0
1000add8:	100090c9 	.word	0x100090c9
1000addc:	10008a85 	.word	0x10008a85
1000ade0:	10008ff5 	.word	0x10008ff5
1000ade4:	10008a0d 	.word	0x10008a0d
1000ade8:	1001a192 	.word	0x1001a192
1000adec:	100089f1 	.word	0x100089f1
1000adf0:	10008855 	.word	0x10008855
1000adf4:	100097b9 	.word	0x100097b9
1000adf8:	10009c29 	.word	0x10009c29
1000adfc:	100097c9 	.word	0x100097c9
1000ae00:	10009659 	.word	0x10009659

1000ae04 <sms_mpu_poll_data>:

/* Extract available IMU data */
int sms_mpu_poll_data(void)
{
1000ae04:	b530      	push	{r4, r5, lr}
1000ae06:	b085      	sub	sp, #20
    short sensors;
    unsigned char more;
    unsigned long sensor_timestamp;
    int res;
    
    mpu_device.hal.new_data = 0;
1000ae08:	4c20      	ldr	r4, [pc, #128]	; (1000ae8c <sms_mpu_poll_data+0x88>)
1000ae0a:	2200      	movs	r2, #0
1000ae0c:	2324      	movs	r3, #36	; 0x24
1000ae0e:	54e2      	strb	r2, [r4, r3]
    
    mpu_read_fifo(mpu_device.hal.gyro, mpu_device.hal.accel, &sensor_timestamp, &sensors, &more);
1000ae10:	0021      	movs	r1, r4
1000ae12:	3112      	adds	r1, #18
1000ae14:	0020      	movs	r0, r4
1000ae16:	300c      	adds	r0, #12
1000ae18:	3b17      	subs	r3, #23
1000ae1a:	446b      	add	r3, sp
1000ae1c:	9300      	str	r3, [sp, #0]
1000ae1e:	230e      	movs	r3, #14
1000ae20:	446b      	add	r3, sp
1000ae22:	aa02      	add	r2, sp, #8
1000ae24:	4d1a      	ldr	r5, [pc, #104]	; (1000ae90 <sms_mpu_poll_data+0x8c>)
1000ae26:	47a8      	blx	r5
    
    //if(more) {
        //mpu_device.hal.new_data = 1;
    //}
    
    if(mpu_device.temp_cnt++ > SMS_MPU_TEMP_MULTIPLIER) {
1000ae28:	232d      	movs	r3, #45	; 0x2d
1000ae2a:	5ce3      	ldrb	r3, [r4, r3]
1000ae2c:	2b11      	cmp	r3, #17
1000ae2e:	d804      	bhi.n	1000ae3a <sms_mpu_poll_data+0x36>
1000ae30:	3301      	adds	r3, #1
1000ae32:	222d      	movs	r2, #45	; 0x2d
1000ae34:	4915      	ldr	r1, [pc, #84]	; (1000ae8c <sms_mpu_poll_data+0x88>)
1000ae36:	548b      	strb	r3, [r1, r2]
1000ae38:	e00b      	b.n	1000ae52 <sms_mpu_poll_data+0x4e>
        mpu_device.temp_cnt = 0;
1000ae3a:	4c14      	ldr	r4, [pc, #80]	; (1000ae8c <sms_mpu_poll_data+0x88>)
1000ae3c:	2200      	movs	r2, #0
1000ae3e:	232d      	movs	r3, #45	; 0x2d
1000ae40:	54e2      	strb	r2, [r4, r3]
        mpu_get_temperature(&mpu_device.hal.temperature, &sensor_timestamp);
1000ae42:	0020      	movs	r0, r4
1000ae44:	3020      	adds	r0, #32
1000ae46:	a902      	add	r1, sp, #8
1000ae48:	4b12      	ldr	r3, [pc, #72]	; (1000ae94 <sms_mpu_poll_data+0x90>)
1000ae4a:	4798      	blx	r3
        mpu_device.new_temp = true;
1000ae4c:	2201      	movs	r2, #1
1000ae4e:	232f      	movs	r3, #47	; 0x2f
1000ae50:	54e2      	strb	r2, [r4, r3]
    }
    
    if(mpu_device.compass_cnt++ > SMS_MPU_COMPASS_MULTIPLIER) {
1000ae52:	232c      	movs	r3, #44	; 0x2c
1000ae54:	4a0d      	ldr	r2, [pc, #52]	; (1000ae8c <sms_mpu_poll_data+0x88>)
1000ae56:	5cd3      	ldrb	r3, [r2, r3]
1000ae58:	2b0b      	cmp	r3, #11
1000ae5a:	d804      	bhi.n	1000ae66 <sms_mpu_poll_data+0x62>
1000ae5c:	3301      	adds	r3, #1
1000ae5e:	222c      	movs	r2, #44	; 0x2c
1000ae60:	490a      	ldr	r1, [pc, #40]	; (1000ae8c <sms_mpu_poll_data+0x88>)
1000ae62:	548b      	strb	r3, [r1, r2]
1000ae64:	e00b      	b.n	1000ae7e <sms_mpu_poll_data+0x7a>
        mpu_device.compass_cnt = 0;
1000ae66:	4c09      	ldr	r4, [pc, #36]	; (1000ae8c <sms_mpu_poll_data+0x88>)
1000ae68:	2200      	movs	r2, #0
1000ae6a:	232c      	movs	r3, #44	; 0x2c
1000ae6c:	54e2      	strb	r2, [r4, r3]
        mpu_get_compass_reg(&mpu_device.hal.compass, &sensor_timestamp);
1000ae6e:	0020      	movs	r0, r4
1000ae70:	3018      	adds	r0, #24
1000ae72:	a902      	add	r1, sp, #8
1000ae74:	4b08      	ldr	r3, [pc, #32]	; (1000ae98 <sms_mpu_poll_data+0x94>)
1000ae76:	4798      	blx	r3
        mpu_device.new_compass = true;   
1000ae78:	2201      	movs	r2, #1
1000ae7a:	232e      	movs	r3, #46	; 0x2e
1000ae7c:	54e2      	strb	r2, [r4, r3]
    }
    sms_ble_send_characteristic(BLE_CHAR_MPU);    
1000ae7e:	2003      	movs	r0, #3
1000ae80:	4b06      	ldr	r3, [pc, #24]	; (1000ae9c <sms_mpu_poll_data+0x98>)
1000ae82:	4798      	blx	r3

    return 0;
}
1000ae84:	2000      	movs	r0, #0
1000ae86:	b005      	add	sp, #20
1000ae88:	bd30      	pop	{r4, r5, pc}
1000ae8a:	46c0      	nop			; (mov r8, r8)
1000ae8c:	1001a188 	.word	0x1001a188
1000ae90:	10008af1 	.word	0x10008af1
1000ae94:	10008505 	.word	0x10008505
1000ae98:	100096fd 	.word	0x100096fd
1000ae9c:	1000a211 	.word	0x1000a211

1000aea0 <sms_mpu_define_services>:

void sms_mpu_define_services(void)
{
1000aea0:	b510      	push	{r4, lr}
1000aea2:	b082      	sub	sp, #8
    at_ble_status_t status;
    uint8_t init_value = 0;
1000aea4:	466b      	mov	r3, sp
1000aea6:	1dda      	adds	r2, r3, #7
1000aea8:	2300      	movs	r3, #0
1000aeaa:	7013      	strb	r3, [r2, #0]
    sms_ble_service_init(BLE_SERV_MPU, &mpu_device.service_handler, &init_value);
1000aeac:	4c0e      	ldr	r4, [pc, #56]	; (1000aee8 <sms_mpu_define_services+0x48>)
1000aeae:	0021      	movs	r1, r4
1000aeb0:	2002      	movs	r0, #2
1000aeb2:	4b0e      	ldr	r3, [pc, #56]	; (1000aeec <sms_mpu_define_services+0x4c>)
1000aeb4:	4798      	blx	r3
    if((status = sms_ble_primary_service_define(&mpu_device.service_handler)) != AT_BLE_SUCCESS) {
1000aeb6:	0020      	movs	r0, r4
1000aeb8:	4b0d      	ldr	r3, [pc, #52]	; (1000aef0 <sms_mpu_define_services+0x50>)
1000aeba:	4798      	blx	r3
1000aebc:	1e04      	subs	r4, r0, #0
1000aebe:	d007      	beq.n	1000aed0 <sms_mpu_define_services+0x30>
        DBG_LOG("[sms_mpu_define_services]\tServices defining failed, reason 0x%x", status);
1000aec0:	480c      	ldr	r0, [pc, #48]	; (1000aef4 <sms_mpu_define_services+0x54>)
1000aec2:	4b0d      	ldr	r3, [pc, #52]	; (1000aef8 <sms_mpu_define_services+0x58>)
1000aec4:	4798      	blx	r3
1000aec6:	0021      	movs	r1, r4
1000aec8:	480c      	ldr	r0, [pc, #48]	; (1000aefc <sms_mpu_define_services+0x5c>)
1000aeca:	4b0d      	ldr	r3, [pc, #52]	; (1000af00 <sms_mpu_define_services+0x60>)
1000aecc:	4798      	blx	r3
1000aece:	e008      	b.n	1000aee2 <sms_mpu_define_services+0x42>
    }
    else {
        DBG_LOG_DEV("[sms_mpu_define_services]\tServices defined, SMS MPU handle: %d", mpu_device.service_handler.serv_handle);
1000aed0:	4808      	ldr	r0, [pc, #32]	; (1000aef4 <sms_mpu_define_services+0x54>)
1000aed2:	4b09      	ldr	r3, [pc, #36]	; (1000aef8 <sms_mpu_define_services+0x58>)
1000aed4:	4798      	blx	r3
1000aed6:	2346      	movs	r3, #70	; 0x46
1000aed8:	4a0a      	ldr	r2, [pc, #40]	; (1000af04 <sms_mpu_define_services+0x64>)
1000aeda:	5ad1      	ldrh	r1, [r2, r3]
1000aedc:	480a      	ldr	r0, [pc, #40]	; (1000af08 <sms_mpu_define_services+0x68>)
1000aede:	4b08      	ldr	r3, [pc, #32]	; (1000af00 <sms_mpu_define_services+0x60>)
1000aee0:	4798      	blx	r3
    }
1000aee2:	b002      	add	sp, #8
1000aee4:	bd10      	pop	{r4, pc}
1000aee6:	46c0      	nop			; (mov r8, r8)
1000aee8:	1001a1bc 	.word	0x1001a1bc
1000aeec:	1000a431 	.word	0x1000a431
1000aef0:	1000a40d 	.word	0x1000a40d
1000aef4:	1001663c 	.word	0x1001663c
1000aef8:	10015495 	.word	0x10015495
1000aefc:	10016fb4 	.word	0x10016fb4
1000af00:	10015375 	.word	0x10015375
1000af04:	1001a188 	.word	0x1001a188
1000af08:	10016ff4 	.word	0x10016ff4

1000af0c <sms_led_switch_on>:
    sms_led_switch_off(SMS_LED_0_PIN);
}


void sms_led_switch_on(enum sms_leds led)
{
1000af0c:	b510      	push	{r4, lr}
    gpio_pin_set_output_level(led, SMS_LED_ACTIVE);
1000af0e:	2100      	movs	r1, #0
1000af10:	4b01      	ldr	r3, [pc, #4]	; (1000af18 <sms_led_switch_on+0xc>)
1000af12:	4798      	blx	r3
}
1000af14:	bd10      	pop	{r4, pc}
1000af16:	46c0      	nop			; (mov r8, r8)
1000af18:	1000c379 	.word	0x1000c379

1000af1c <sms_led_switch_off>:


void sms_led_switch_off(enum sms_leds led)
{
1000af1c:	b510      	push	{r4, lr}
    gpio_pin_set_output_level(led, SMS_LED_INACTIVE);
1000af1e:	2101      	movs	r1, #1
1000af20:	4b01      	ldr	r3, [pc, #4]	; (1000af28 <sms_led_switch_off+0xc>)
1000af22:	4798      	blx	r3
}
1000af24:	bd10      	pop	{r4, pc}
1000af26:	46c0      	nop			; (mov r8, r8)
1000af28:	1000c379 	.word	0x1000c379

1000af2c <sms_led_gpio_init>:
 */ 

#include "sms_led.h"

void sms_led_gpio_init(void)
{
1000af2c:	b510      	push	{r4, lr}
1000af2e:	b082      	sub	sp, #8
    struct gpio_config config_gpio_pin;

    /* LED0 @ GPIO_LP_GPIO_22 */
    gpio_get_config_defaults(&config_gpio_pin);
1000af30:	ac01      	add	r4, sp, #4
1000af32:	0020      	movs	r0, r4
1000af34:	4b0a      	ldr	r3, [pc, #40]	; (1000af60 <sms_led_gpio_init+0x34>)
1000af36:	4798      	blx	r3
    config_gpio_pin.direction = GPIO_PIN_DIR_OUTPUT;
1000af38:	2301      	movs	r3, #1
1000af3a:	7023      	strb	r3, [r4, #0]
    if(gpio_pin_set_config(SMS_LED_0_PIN, &config_gpio_pin) != STATUS_OK) {
1000af3c:	0021      	movs	r1, r4
1000af3e:	2016      	movs	r0, #22
1000af40:	4b08      	ldr	r3, [pc, #32]	; (1000af64 <sms_led_gpio_init+0x38>)
1000af42:	4798      	blx	r3
1000af44:	2800      	cmp	r0, #0
1000af46:	d005      	beq.n	1000af54 <sms_led_gpio_init+0x28>
        DBG_LOG_DEV("[sms_led_gpio_init]\tproblem while setting up led0");
1000af48:	4807      	ldr	r0, [pc, #28]	; (1000af68 <sms_led_gpio_init+0x3c>)
1000af4a:	4b08      	ldr	r3, [pc, #32]	; (1000af6c <sms_led_gpio_init+0x40>)
1000af4c:	4798      	blx	r3
1000af4e:	4808      	ldr	r0, [pc, #32]	; (1000af70 <sms_led_gpio_init+0x44>)
1000af50:	4b08      	ldr	r3, [pc, #32]	; (1000af74 <sms_led_gpio_init+0x48>)
1000af52:	4798      	blx	r3
    }
    sms_led_switch_off(SMS_LED_0_PIN);
1000af54:	2016      	movs	r0, #22
1000af56:	4b08      	ldr	r3, [pc, #32]	; (1000af78 <sms_led_gpio_init+0x4c>)
1000af58:	4798      	blx	r3
}
1000af5a:	b002      	add	sp, #8
1000af5c:	bd10      	pop	{r4, pc}
1000af5e:	46c0      	nop			; (mov r8, r8)
1000af60:	1000c111 	.word	0x1000c111
1000af64:	1000c121 	.word	0x1000c121
1000af68:	1001663c 	.word	0x1001663c
1000af6c:	10015495 	.word	0x10015495
1000af70:	10017034 	.word	0x10017034
1000af74:	10015375 	.word	0x10015375
1000af78:	1000af1d 	.word	0x1000af1d

1000af7c <sms_led_toggle>:
    gpio_pin_set_output_level(led, SMS_LED_INACTIVE);
}


void sms_led_toggle(enum sms_leds led)
{
1000af7c:	b510      	push	{r4, lr}
1000af7e:	0004      	movs	r4, r0
}


bool sms_led_get_state(enum sms_leds led)
{
    return gpio_pin_get_output_level(led);
1000af80:	4b05      	ldr	r3, [pc, #20]	; (1000af98 <sms_led_toggle+0x1c>)
1000af82:	4798      	blx	r3


void sms_led_toggle(enum sms_leds led)
{
    bool state = sms_led_get_state(led);
    if(state == SMS_LED_ACTIVE) sms_led_switch_off(led);
1000af84:	2800      	cmp	r0, #0
1000af86:	d103      	bne.n	1000af90 <sms_led_toggle+0x14>
1000af88:	0020      	movs	r0, r4
1000af8a:	4b04      	ldr	r3, [pc, #16]	; (1000af9c <sms_led_toggle+0x20>)
1000af8c:	4798      	blx	r3
1000af8e:	e002      	b.n	1000af96 <sms_led_toggle+0x1a>
    else sms_led_switch_on(led);
1000af90:	0020      	movs	r0, r4
1000af92:	4b03      	ldr	r3, [pc, #12]	; (1000afa0 <sms_led_toggle+0x24>)
1000af94:	4798      	blx	r3
}
1000af96:	bd10      	pop	{r4, pc}
1000af98:	1000c329 	.word	0x1000c329
1000af9c:	1000af1d 	.word	0x1000af1d
1000afa0:	1000af0d 	.word	0x1000af0d

1000afa4 <sms_led_blink_start>:
    return gpio_pin_get_output_level(led);
}


void sms_led_blink_start(enum sms_leds led)
{
1000afa4:	b510      	push	{r4, lr}
    sms_led_switch_on(led);
1000afa6:	4b0c      	ldr	r3, [pc, #48]	; (1000afd8 <sms_led_blink_start+0x34>)
1000afa8:	4798      	blx	r3
    sms_led_blink_cnt = 0;
1000afaa:	2200      	movs	r2, #0
1000afac:	4b0b      	ldr	r3, [pc, #44]	; (1000afdc <sms_led_blink_start+0x38>)
1000afae:	701a      	strb	r2, [r3, #0]
    uint32_t delay = 0;
    switch(timer2_current_mode) {
1000afb0:	4b0b      	ldr	r3, [pc, #44]	; (1000afe0 <sms_led_blink_start+0x3c>)
1000afb2:	781b      	ldrb	r3, [r3, #0]
1000afb4:	b2db      	uxtb	r3, r3
1000afb6:	2b02      	cmp	r3, #2
1000afb8:	d002      	beq.n	1000afc0 <sms_led_blink_start+0x1c>
1000afba:	2b03      	cmp	r3, #3
1000afbc:	d002      	beq.n	1000afc4 <sms_led_blink_start+0x20>
1000afbe:	e004      	b.n	1000afca <sms_led_blink_start+0x26>
        case TIMER2_MODE_LED_STARTUP:
        delay = SMS_BLINK_STARTUP_MS;
1000afc0:	2164      	movs	r1, #100	; 0x64
1000afc2:	e003      	b.n	1000afcc <sms_led_blink_start+0x28>
        break;
        
        case TIMER2_MODE_LED_SHUTDOWN:
        delay = SMS_BLINK_SHTDWN_MS;
1000afc4:	21c8      	movs	r1, #200	; 0xc8
1000afc6:	0049      	lsls	r1, r1, #1
        break;
1000afc8:	e000      	b.n	1000afcc <sms_led_blink_start+0x28>

void sms_led_blink_start(enum sms_leds led)
{
    sms_led_switch_on(led);
    sms_led_blink_cnt = 0;
    uint32_t delay = 0;
1000afca:	2100      	movs	r1, #0
        
        default:
        break;
    }

    sms_dualtimer_start(TIMER_UNIT_MS, delay, DUALTIMER_TIMER2);
1000afcc:	2201      	movs	r2, #1
1000afce:	2001      	movs	r0, #1
1000afd0:	4b04      	ldr	r3, [pc, #16]	; (1000afe4 <sms_led_blink_start+0x40>)
1000afd2:	4798      	blx	r3
}
1000afd4:	bd10      	pop	{r4, pc}
1000afd6:	46c0      	nop			; (mov r8, r8)
1000afd8:	1000af0d 	.word	0x1000af0d
1000afdc:	1001a354 	.word	0x1001a354
1000afe0:	1001a331 	.word	0x1001a331
1000afe4:	1000b5a1 	.word	0x1000b5a1

1000afe8 <sms_pressure_ms58_reset>:
    }
    return STATUS_ERR_IO;
}

void sms_pressure_ms58_reset(void)
{
1000afe8:	b510      	push	{r4, lr}
1000afea:	b082      	sub	sp, #8
    //DBG_LOG_DEV("[sms_pressure_ms58_reset]\twriting reset command");
    spi_wdata[0] = MS58_RESET;
1000afec:	4a05      	ldr	r2, [pc, #20]	; (1000b004 <sms_pressure_ms58_reset+0x1c>)
1000afee:	231e      	movs	r3, #30
1000aff0:	7013      	strb	r3, [r2, #0]
    sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 1);
1000aff2:	3b1d      	subs	r3, #29
1000aff4:	9300      	str	r3, [sp, #0]
1000aff6:	4b04      	ldr	r3, [pc, #16]	; (1000b008 <sms_pressure_ms58_reset+0x20>)
1000aff8:	4904      	ldr	r1, [pc, #16]	; (1000b00c <sms_pressure_ms58_reset+0x24>)
1000affa:	4805      	ldr	r0, [pc, #20]	; (1000b010 <sms_pressure_ms58_reset+0x28>)
1000affc:	4c05      	ldr	r4, [pc, #20]	; (1000b014 <sms_pressure_ms58_reset+0x2c>)
1000affe:	47a0      	blx	r4
}
1000b000:	b002      	add	sp, #8
1000b002:	bd10      	pop	{r4, pc}
1000b004:	1001a284 	.word	0x1001a284
1000b008:	1001a274 	.word	0x1001a274
1000b00c:	1001a334 	.word	0x1001a334
1000b010:	1001a340 	.word	0x1001a340
1000b014:	1000b47d 	.word	0x1000b47d

1000b018 <sms_pressure_startup>:
    gpio_pin_set_output_level(SMS_PRESSURE_VCC_PIN, false);
}


void sms_pressure_startup(void)
{
1000b018:	b510      	push	{r4, lr}
    DBG_LOG_DEV("[sms_pressure_startup]\t\tStarting pressure sensor");
1000b01a:	480d      	ldr	r0, [pc, #52]	; (1000b050 <sms_pressure_startup+0x38>)
1000b01c:	4b0d      	ldr	r3, [pc, #52]	; (1000b054 <sms_pressure_startup+0x3c>)
1000b01e:	4798      	blx	r3
1000b020:	480d      	ldr	r0, [pc, #52]	; (1000b058 <sms_pressure_startup+0x40>)
1000b022:	4b0e      	ldr	r3, [pc, #56]	; (1000b05c <sms_pressure_startup+0x44>)
1000b024:	4798      	blx	r3
    //gpio_pin_set_output_level(SMS_PRESSURE_VCC_PIN, true); // switch on MS58 pressure sensor
    /* Disable buttons for reset time (~3 ms) to avoid conflict with dualtimer1 */
    sms_button_toggle_interrupt(SMS_BTN_INT_DISABLE, SMS_BTN_INT_DISABLE);
1000b026:	2101      	movs	r1, #1
1000b028:	2001      	movs	r0, #1
1000b02a:	4b0d      	ldr	r3, [pc, #52]	; (1000b060 <sms_pressure_startup+0x48>)
1000b02c:	4798      	blx	r3
    pressure_device.ms58_device.current_state = MS58_STATE_RESETTING;
1000b02e:	4b0d      	ldr	r3, [pc, #52]	; (1000b064 <sms_pressure_startup+0x4c>)
1000b030:	2101      	movs	r1, #1
1000b032:	2225      	movs	r2, #37	; 0x25
1000b034:	5499      	strb	r1, [r3, r2]
    pressure_device.ms58_device.reset_done = false;
1000b036:	2200      	movs	r2, #0
1000b038:	705a      	strb	r2, [r3, #1]
    /* Write the reset command to MS58 */
    sms_pressure_ms58_reset();
1000b03a:	4b0b      	ldr	r3, [pc, #44]	; (1000b068 <sms_pressure_startup+0x50>)
1000b03c:	4798      	blx	r3
    timer1_current_mode = TIMER1_MODE_MS58_RESET;
1000b03e:	2202      	movs	r2, #2
1000b040:	4b0a      	ldr	r3, [pc, #40]	; (1000b06c <sms_pressure_startup+0x54>)
1000b042:	701a      	strb	r2, [r3, #0]
    //ulp_ready = false;
    sms_dualtimer_start(TIMER_UNIT_MS, MS58_RESET_WAIT_MS, DUALTIMER_TIMER1);
1000b044:	2200      	movs	r2, #0
1000b046:	2103      	movs	r1, #3
1000b048:	2001      	movs	r0, #1
1000b04a:	4b09      	ldr	r3, [pc, #36]	; (1000b070 <sms_pressure_startup+0x58>)
1000b04c:	4798      	blx	r3
}
1000b04e:	bd10      	pop	{r4, pc}
1000b050:	1001663c 	.word	0x1001663c
1000b054:	10015495 	.word	0x10015495
1000b058:	100170a8 	.word	0x100170a8
1000b05c:	10015375 	.word	0x10015375
1000b060:	1000a8d5 	.word	0x1000a8d5
1000b064:	1001a294 	.word	0x1001a294
1000b068:	1000afe9 	.word	0x1000afe9
1000b06c:	1001a184 	.word	0x1001a184
1000b070:	1000b5a1 	.word	0x1000b5a1

1000b074 <sms_pressure_ms58_read_prom>:
    spi_wdata[0] = MS58_RESET;
    sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 1);
}

enum status_code sms_pressure_ms58_read_prom(void)
{
1000b074:	b5f0      	push	{r4, r5, r6, r7, lr}
1000b076:	4657      	mov	r7, sl
1000b078:	b480      	push	{r7}
1000b07a:	b082      	sub	sp, #8
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] reading bytes... ");
    spi_wdata[0] = MS58_PROM_READ_1;
1000b07c:	4d37      	ldr	r5, [pc, #220]	; (1000b15c <sms_pressure_ms58_read_prom+0xe8>)
1000b07e:	23a2      	movs	r3, #162	; 0xa2
1000b080:	702b      	strb	r3, [r5, #0]
    spi_wdata[1] = 0x00;
1000b082:	2300      	movs	r3, #0
1000b084:	706b      	strb	r3, [r5, #1]
    spi_wdata[2] = 0x00;
1000b086:	70ab      	strb	r3, [r5, #2]
    sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3);
1000b088:	4c35      	ldr	r4, [pc, #212]	; (1000b160 <sms_pressure_ms58_read_prom+0xec>)
1000b08a:	3303      	adds	r3, #3
1000b08c:	469a      	mov	sl, r3
1000b08e:	9300      	str	r3, [sp, #0]
1000b090:	0023      	movs	r3, r4
1000b092:	002a      	movs	r2, r5
1000b094:	4933      	ldr	r1, [pc, #204]	; (1000b164 <sms_pressure_ms58_read_prom+0xf0>)
1000b096:	4834      	ldr	r0, [pc, #208]	; (1000b168 <sms_pressure_ms58_read_prom+0xf4>)
1000b098:	4f34      	ldr	r7, [pc, #208]	; (1000b16c <sms_pressure_ms58_read_prom+0xf8>)
1000b09a:	47b8      	blx	r7
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.ms58_device.prom_values[1] = (spi_rdata[1] << 8) | (spi_rdata[2]);
1000b09c:	4e34      	ldr	r6, [pc, #208]	; (1000b170 <sms_pressure_ms58_read_prom+0xfc>)
1000b09e:	7863      	ldrb	r3, [r4, #1]
1000b0a0:	021b      	lsls	r3, r3, #8
1000b0a2:	78a2      	ldrb	r2, [r4, #2]
1000b0a4:	4313      	orrs	r3, r2
1000b0a6:	80f3      	strh	r3, [r6, #6]

    spi_wdata[0] = MS58_PROM_READ_2;
1000b0a8:	23a4      	movs	r3, #164	; 0xa4
1000b0aa:	702b      	strb	r3, [r5, #0]
    sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3);
1000b0ac:	4653      	mov	r3, sl
1000b0ae:	9300      	str	r3, [sp, #0]
1000b0b0:	0023      	movs	r3, r4
1000b0b2:	002a      	movs	r2, r5
1000b0b4:	492b      	ldr	r1, [pc, #172]	; (1000b164 <sms_pressure_ms58_read_prom+0xf0>)
1000b0b6:	482c      	ldr	r0, [pc, #176]	; (1000b168 <sms_pressure_ms58_read_prom+0xf4>)
1000b0b8:	47b8      	blx	r7
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r  wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r  wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.ms58_device.prom_values[2] = (spi_rdata[1] << 8) | (spi_rdata[2]);
1000b0ba:	7863      	ldrb	r3, [r4, #1]
1000b0bc:	021b      	lsls	r3, r3, #8
1000b0be:	78a2      	ldrb	r2, [r4, #2]
1000b0c0:	4313      	orrs	r3, r2
1000b0c2:	8133      	strh	r3, [r6, #8]

    spi_wdata[0] = MS58_PROM_READ_3;
1000b0c4:	23a6      	movs	r3, #166	; 0xa6
1000b0c6:	702b      	strb	r3, [r5, #0]
    sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3);
1000b0c8:	4653      	mov	r3, sl
1000b0ca:	9300      	str	r3, [sp, #0]
1000b0cc:	0023      	movs	r3, r4
1000b0ce:	002a      	movs	r2, r5
1000b0d0:	4924      	ldr	r1, [pc, #144]	; (1000b164 <sms_pressure_ms58_read_prom+0xf0>)
1000b0d2:	4825      	ldr	r0, [pc, #148]	; (1000b168 <sms_pressure_ms58_read_prom+0xf4>)
1000b0d4:	47b8      	blx	r7
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r  wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r  wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.ms58_device.prom_values[3] = (spi_rdata[1] << 8) | (spi_rdata[2]);
1000b0d6:	7863      	ldrb	r3, [r4, #1]
1000b0d8:	021b      	lsls	r3, r3, #8
1000b0da:	78a2      	ldrb	r2, [r4, #2]
1000b0dc:	4313      	orrs	r3, r2
1000b0de:	8173      	strh	r3, [r6, #10]

    spi_wdata[0] = MS58_PROM_READ_4;
1000b0e0:	23a8      	movs	r3, #168	; 0xa8
1000b0e2:	702b      	strb	r3, [r5, #0]
    sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3);
1000b0e4:	4653      	mov	r3, sl
1000b0e6:	9300      	str	r3, [sp, #0]
1000b0e8:	0023      	movs	r3, r4
1000b0ea:	002a      	movs	r2, r5
1000b0ec:	491d      	ldr	r1, [pc, #116]	; (1000b164 <sms_pressure_ms58_read_prom+0xf0>)
1000b0ee:	481e      	ldr	r0, [pc, #120]	; (1000b168 <sms_pressure_ms58_read_prom+0xf4>)
1000b0f0:	47b8      	blx	r7
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r  wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r  wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.ms58_device.prom_values[4] = (spi_rdata[1] << 8) | (spi_rdata[2]);
1000b0f2:	7863      	ldrb	r3, [r4, #1]
1000b0f4:	021b      	lsls	r3, r3, #8
1000b0f6:	78a2      	ldrb	r2, [r4, #2]
1000b0f8:	4313      	orrs	r3, r2
1000b0fa:	81b3      	strh	r3, [r6, #12]

    spi_wdata[0] = MS58_PROM_READ_5;
1000b0fc:	23aa      	movs	r3, #170	; 0xaa
1000b0fe:	702b      	strb	r3, [r5, #0]
    sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3);
1000b100:	4653      	mov	r3, sl
1000b102:	9300      	str	r3, [sp, #0]
1000b104:	0023      	movs	r3, r4
1000b106:	002a      	movs	r2, r5
1000b108:	4916      	ldr	r1, [pc, #88]	; (1000b164 <sms_pressure_ms58_read_prom+0xf0>)
1000b10a:	4817      	ldr	r0, [pc, #92]	; (1000b168 <sms_pressure_ms58_read_prom+0xf4>)
1000b10c:	47b8      	blx	r7
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r  wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r  wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.ms58_device.prom_values[5] = (spi_rdata[1] << 8) | (spi_rdata[2]);
1000b10e:	7863      	ldrb	r3, [r4, #1]
1000b110:	021b      	lsls	r3, r3, #8
1000b112:	78a2      	ldrb	r2, [r4, #2]
1000b114:	4313      	orrs	r3, r2
1000b116:	81f3      	strh	r3, [r6, #14]

    spi_wdata[0] = MS58_PROM_READ_6;
1000b118:	23ac      	movs	r3, #172	; 0xac
1000b11a:	702b      	strb	r3, [r5, #0]
    sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3);
1000b11c:	4653      	mov	r3, sl
1000b11e:	9300      	str	r3, [sp, #0]
1000b120:	0023      	movs	r3, r4
1000b122:	002a      	movs	r2, r5
1000b124:	490f      	ldr	r1, [pc, #60]	; (1000b164 <sms_pressure_ms58_read_prom+0xf0>)
1000b126:	4810      	ldr	r0, [pc, #64]	; (1000b168 <sms_pressure_ms58_read_prom+0xf4>)
1000b128:	47b8      	blx	r7
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r  wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r  wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.ms58_device.prom_values[6] = (spi_rdata[1] << 8) | (spi_rdata[2]);
1000b12a:	7863      	ldrb	r3, [r4, #1]
1000b12c:	021b      	lsls	r3, r3, #8
1000b12e:	78a2      	ldrb	r2, [r4, #2]
1000b130:	4313      	orrs	r3, r2
1000b132:	8233      	strh	r3, [r6, #16]

    spi_wdata[0] = MS58_PROM_READ_7;
1000b134:	23ae      	movs	r3, #174	; 0xae
1000b136:	702b      	strb	r3, [r5, #0]
    sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3);
1000b138:	4653      	mov	r3, sl
1000b13a:	9300      	str	r3, [sp, #0]
1000b13c:	0023      	movs	r3, r4
1000b13e:	002a      	movs	r2, r5
1000b140:	4908      	ldr	r1, [pc, #32]	; (1000b164 <sms_pressure_ms58_read_prom+0xf0>)
1000b142:	4809      	ldr	r0, [pc, #36]	; (1000b168 <sms_pressure_ms58_read_prom+0xf4>)
1000b144:	47b8      	blx	r7
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r  wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r  wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.ms58_device.prom_values[7] = (spi_rdata[1] << 8) | (spi_rdata[2]);
1000b146:	7863      	ldrb	r3, [r4, #1]
1000b148:	021b      	lsls	r3, r3, #8
1000b14a:	78a2      	ldrb	r2, [r4, #2]
1000b14c:	4313      	orrs	r3, r2
1000b14e:	8273      	strh	r3, [r6, #18]
    //for(uint8_t i = 1; i < MS58_PROM_VALUES_MAX; i++) {
        //DBG_LOG_DEV("  C%d -> %d", (i+1), ms58_device.prom_values[i]);
    //}

    return STATUS_OK;
}
1000b150:	2000      	movs	r0, #0
1000b152:	b002      	add	sp, #8
1000b154:	bc04      	pop	{r2}
1000b156:	4692      	mov	sl, r2
1000b158:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000b15a:	46c0      	nop			; (mov r8, r8)
1000b15c:	1001a284 	.word	0x1001a284
1000b160:	1001a274 	.word	0x1001a274
1000b164:	1001a334 	.word	0x1001a334
1000b168:	1001a340 	.word	0x1001a340
1000b16c:	1000b47d 	.word	0x1000b47d
1000b170:	1001a294 	.word	0x1001a294

1000b174 <sms_pressure_init>:
    //ulp_ready = false;
    sms_dualtimer_start(TIMER_UNIT_MS, MS58_RESET_WAIT_MS, DUALTIMER_TIMER1);
}

enum status_code sms_pressure_init(void)
{
1000b174:	b510      	push	{r4, lr}
    /* Read the PROM values */
    if(sms_pressure_ms58_read_prom() == STATUS_OK) {
1000b176:	4b06      	ldr	r3, [pc, #24]	; (1000b190 <sms_pressure_init+0x1c>)
1000b178:	4798      	blx	r3
1000b17a:	2800      	cmp	r0, #0
1000b17c:	d106      	bne.n	1000b18c <sms_pressure_init+0x18>
        pressure_device.ms58_device.init_ok = true;
1000b17e:	4b05      	ldr	r3, [pc, #20]	; (1000b194 <sms_pressure_init+0x20>)
1000b180:	2201      	movs	r2, #1
1000b182:	709a      	strb	r2, [r3, #2]
        pressure_device.ms58_device.current_state = MS58_STATE_READY;
1000b184:	2102      	movs	r1, #2
1000b186:	3224      	adds	r2, #36	; 0x24
1000b188:	5499      	strb	r1, [r3, r2]
        /* Enable buttons again */
        //sms_button_toggle_interrupts(SMS_EXTINT_ENABLE);
        return STATUS_OK;
1000b18a:	e000      	b.n	1000b18e <sms_pressure_init+0x1a>
    }
    return STATUS_ERR_IO;
1000b18c:	2010      	movs	r0, #16
}
1000b18e:	bd10      	pop	{r4, pc}
1000b190:	1000b075 	.word	0x1000b075
1000b194:	1001a294 	.word	0x1001a294

1000b198 <sms_pressure_ms58_read_data>:
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
    }        
}

enum status_code sms_pressure_ms58_read_data(void)
{
1000b198:	b5f0      	push	{r4, r5, r6, r7, lr}
1000b19a:	4657      	mov	r7, sl
1000b19c:	464e      	mov	r6, r9
1000b19e:	b4c0      	push	{r6, r7}
1000b1a0:	b083      	sub	sp, #12
    switch(pressure_device.ms58_device.current_state) {
1000b1a2:	2325      	movs	r3, #37	; 0x25
1000b1a4:	4a2c      	ldr	r2, [pc, #176]	; (1000b258 <sms_pressure_ms58_read_data+0xc0>)
1000b1a6:	5cd3      	ldrb	r3, [r2, r3]
1000b1a8:	2b03      	cmp	r3, #3
1000b1aa:	d002      	beq.n	1000b1b2 <sms_pressure_ms58_read_data+0x1a>
1000b1ac:	2b04      	cmp	r3, #4
1000b1ae:	d025      	beq.n	1000b1fc <sms_pressure_ms58_read_data+0x64>
1000b1b0:	e04b      	b.n	1000b24a <sms_pressure_ms58_read_data+0xb2>
        case MS58_STATE_CONV_PRESSURE:
        //DBG_LOG_DEV("[sms_pressure_ms58_read_data] reading ADC pressure values...");
        spi_wdata[0] = MS58_ADC_READ;
1000b1b2:	4c2a      	ldr	r4, [pc, #168]	; (1000b25c <sms_pressure_ms58_read_data+0xc4>)
1000b1b4:	2300      	movs	r3, #0
1000b1b6:	7023      	strb	r3, [r4, #0]
        spi_wdata[1] = MS58_ADC_READ;
1000b1b8:	7063      	strb	r3, [r4, #1]
        spi_wdata[2] = MS58_ADC_READ;
1000b1ba:	70a3      	strb	r3, [r4, #2]
        spi_wdata[3] = MS58_ADC_READ;
1000b1bc:	70e3      	strb	r3, [r4, #3]
        sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 4);
1000b1be:	4d28      	ldr	r5, [pc, #160]	; (1000b260 <sms_pressure_ms58_read_data+0xc8>)
1000b1c0:	2704      	movs	r7, #4
1000b1c2:	9700      	str	r7, [sp, #0]
1000b1c4:	002b      	movs	r3, r5
1000b1c6:	0022      	movs	r2, r4
1000b1c8:	4926      	ldr	r1, [pc, #152]	; (1000b264 <sms_pressure_ms58_read_data+0xcc>)
1000b1ca:	4827      	ldr	r0, [pc, #156]	; (1000b268 <sms_pressure_ms58_read_data+0xd0>)
1000b1cc:	4e27      	ldr	r6, [pc, #156]	; (1000b26c <sms_pressure_ms58_read_data+0xd4>)
1000b1ce:	46b2      	mov	sl, r6
1000b1d0:	47b0      	blx	r6
        pressure_device.ms58_device.adc_values[MS58_TYPE_PRESS] = ((spi_rdata[1] << 16) | (spi_rdata[2] << 8) | (spi_rdata[3]));
1000b1d2:	4e21      	ldr	r6, [pc, #132]	; (1000b258 <sms_pressure_ms58_read_data+0xc0>)
1000b1d4:	786b      	ldrb	r3, [r5, #1]
1000b1d6:	041a      	lsls	r2, r3, #16
1000b1d8:	78ab      	ldrb	r3, [r5, #2]
1000b1da:	021b      	lsls	r3, r3, #8
1000b1dc:	4313      	orrs	r3, r2
1000b1de:	78ea      	ldrb	r2, [r5, #3]
1000b1e0:	4313      	orrs	r3, r2
1000b1e2:	6173      	str	r3, [r6, #20]
        //DBG_LOG_DEV("[sms_pressure_ms58_read_data] D1 -> %ld", ms58_device.adc_values[MS58_TYPE_PRESS]);
        
        //DBG_LOG_DEV("[sms_pressure_ms58_read_data] starting D2 conversion");
        spi_wdata[0] = MS58_CONV_D2_512;
1000b1e4:	2352      	movs	r3, #82	; 0x52
1000b1e6:	7023      	strb	r3, [r4, #0]
        sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 1);
1000b1e8:	3b51      	subs	r3, #81	; 0x51
1000b1ea:	9300      	str	r3, [sp, #0]
1000b1ec:	002b      	movs	r3, r5
1000b1ee:	0022      	movs	r2, r4
1000b1f0:	491c      	ldr	r1, [pc, #112]	; (1000b264 <sms_pressure_ms58_read_data+0xcc>)
1000b1f2:	481d      	ldr	r0, [pc, #116]	; (1000b268 <sms_pressure_ms58_read_data+0xd0>)
1000b1f4:	47d0      	blx	sl
        pressure_device.ms58_device.current_state = MS58_STATE_CONV_TEMPERATURE;
1000b1f6:	2325      	movs	r3, #37	; 0x25
1000b1f8:	54f7      	strb	r7, [r6, r3]
        break;
1000b1fa:	e026      	b.n	1000b24a <sms_pressure_ms58_read_data+0xb2>
        
        case MS58_STATE_CONV_TEMPERATURE:
        //DBG_LOG_DEV("[sms_pressure_ms58_read_data] reading ADC temperature values...");
        spi_wdata[0] = MS58_ADC_READ;
1000b1fc:	4c17      	ldr	r4, [pc, #92]	; (1000b25c <sms_pressure_ms58_read_data+0xc4>)
1000b1fe:	2300      	movs	r3, #0
1000b200:	7023      	strb	r3, [r4, #0]
        spi_wdata[1] = MS58_ADC_READ;
1000b202:	7063      	strb	r3, [r4, #1]
        spi_wdata[2] = MS58_ADC_READ;
1000b204:	70a3      	strb	r3, [r4, #2]
        spi_wdata[3] = MS58_ADC_READ;
1000b206:	70e3      	strb	r3, [r4, #3]
        sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 4);
1000b208:	4d15      	ldr	r5, [pc, #84]	; (1000b260 <sms_pressure_ms58_read_data+0xc8>)
1000b20a:	3304      	adds	r3, #4
1000b20c:	9300      	str	r3, [sp, #0]
1000b20e:	002b      	movs	r3, r5
1000b210:	0022      	movs	r2, r4
1000b212:	4914      	ldr	r1, [pc, #80]	; (1000b264 <sms_pressure_ms58_read_data+0xcc>)
1000b214:	4814      	ldr	r0, [pc, #80]	; (1000b268 <sms_pressure_ms58_read_data+0xd0>)
1000b216:	4e15      	ldr	r6, [pc, #84]	; (1000b26c <sms_pressure_ms58_read_data+0xd4>)
1000b218:	46b1      	mov	r9, r6
1000b21a:	47b0      	blx	r6
        pressure_device.ms58_device.adc_values[MS58_TYPE_TEMP] = ((spi_rdata[1] << 16) | (spi_rdata[2] << 8) | (spi_rdata[3]));
1000b21c:	4e0e      	ldr	r6, [pc, #56]	; (1000b258 <sms_pressure_ms58_read_data+0xc0>)
1000b21e:	786b      	ldrb	r3, [r5, #1]
1000b220:	041a      	lsls	r2, r3, #16
1000b222:	78ab      	ldrb	r3, [r5, #2]
1000b224:	021b      	lsls	r3, r3, #8
1000b226:	4313      	orrs	r3, r2
1000b228:	78ea      	ldrb	r2, [r5, #3]
1000b22a:	4313      	orrs	r3, r2
1000b22c:	61b3      	str	r3, [r6, #24]
        //DBG_LOG_DEV("[sms_pressure_ms58_read_data] D2 -> %ld", ms58_device.adc_values[MS58_TYPE_TEMP]);
        
        //DBG_LOG_DEV("[sms_pressure_ms58_read_data] starting D1 conversion");
        spi_wdata[0] = MS58_CONV_D1_512;
1000b22e:	2342      	movs	r3, #66	; 0x42
1000b230:	7023      	strb	r3, [r4, #0]
        sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 1);
1000b232:	2701      	movs	r7, #1
1000b234:	9700      	str	r7, [sp, #0]
1000b236:	002b      	movs	r3, r5
1000b238:	0022      	movs	r2, r4
1000b23a:	490a      	ldr	r1, [pc, #40]	; (1000b264 <sms_pressure_ms58_read_data+0xcc>)
1000b23c:	480a      	ldr	r0, [pc, #40]	; (1000b268 <sms_pressure_ms58_read_data+0xd0>)
1000b23e:	47c8      	blx	r9
        pressure_device.ms58_device.current_state = MS58_STATE_CONV_PRESSURE;
1000b240:	2203      	movs	r2, #3
1000b242:	2325      	movs	r3, #37	; 0x25
1000b244:	54f2      	strb	r2, [r6, r3]
        pressure_device.ms58_device.data_complete = true;
1000b246:	3b01      	subs	r3, #1
1000b248:	54f7      	strb	r7, [r6, r3]
        case MS58_STATE_NONE:
        default:
        break;
    }
    return STATUS_OK;
}
1000b24a:	2000      	movs	r0, #0
1000b24c:	b003      	add	sp, #12
1000b24e:	bc0c      	pop	{r2, r3}
1000b250:	4691      	mov	r9, r2
1000b252:	469a      	mov	sl, r3
1000b254:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000b256:	46c0      	nop			; (mov r8, r8)
1000b258:	1001a294 	.word	0x1001a294
1000b25c:	1001a284 	.word	0x1001a284
1000b260:	1001a274 	.word	0x1001a274
1000b264:	1001a334 	.word	0x1001a334
1000b268:	1001a340 	.word	0x1001a340
1000b26c:	1000b47d 	.word	0x1000b47d

1000b270 <sms_pressure_ms58_calculate>:

void sms_pressure_ms58_calculate(void)
{
1000b270:	b5f0      	push	{r4, r5, r6, r7, lr}
1000b272:	464f      	mov	r7, r9
1000b274:	b480      	push	{r7}
1000b276:	b082      	sub	sp, #8
    ***************************/
    /* dT = D2 - Tref = D2 - C5*2^8 */
    /* tv1: 33464 * 2^8 = 8566784 */
    tv1 = ((int64_t)(pressure_device.ms58_device.prom_values[5]) << 8);
    /* deltaT: 8569150 - 8566784 = 2366 */
    deltaT = (int32_t)((int64_t)pressure_device.ms58_device.adc_values[MS58_TYPE_TEMP] - tv1);
1000b278:	4d26      	ldr	r5, [pc, #152]	; (1000b314 <sms_pressure_ms58_calculate+0xa4>)

    /* TEMP = 20°C + dT*TEMPSENS = 2000 + dT * C6/2^23 */
    /* tv1: 28312 * 2366 = 66986192 */
    tv1 = ((int64_t)pressure_device.ms58_device.prom_values[6] * (int64_t)deltaT);
1000b27a:	89ec      	ldrh	r4, [r5, #14]
1000b27c:	0224      	lsls	r4, r4, #8
1000b27e:	69ab      	ldr	r3, [r5, #24]
1000b280:	1b1c      	subs	r4, r3, r4
1000b282:	17e3      	asrs	r3, r4, #31
1000b284:	001e      	movs	r6, r3
    /* tv2: 66986192 / 2^23 = 7(.985376358) */
    tv2 = (tv1 >> 23);
    /* temp: 7 + 2000 = 2007 */
    pressure_device.ms58_device.temperature = (int32_t)(tv2 + 2000);
1000b286:	8a28      	ldrh	r0, [r5, #16]
1000b288:	4a23      	ldr	r2, [pc, #140]	; (1000b318 <sms_pressure_ms58_calculate+0xa8>)
1000b28a:	4691      	mov	r9, r2
1000b28c:	0022      	movs	r2, r4
1000b28e:	2100      	movs	r1, #0
1000b290:	47c8      	blx	r9
1000b292:	0249      	lsls	r1, r1, #9
1000b294:	0dc0      	lsrs	r0, r0, #23
1000b296:	4308      	orrs	r0, r1
1000b298:	23fa      	movs	r3, #250	; 0xfa
1000b29a:	00db      	lsls	r3, r3, #3
1000b29c:	469c      	mov	ip, r3
1000b29e:	4460      	add	r0, ip
1000b2a0:	6228      	str	r0, [r5, #32]
    /* tv2: 23282 * 2366 = 55085212 */
    tv2 = ((int64_t)pressure_device.ms58_device.prom_values[4] * (int64_t)deltaT);
    /* tv3: 55085212 / 2^7 = 430353(.21875) */
    tv3 = (tv2 >> 7);
    /* offset: 2419851264 + 430353 = 2420281617 */
    offset = (tv1 + tv3);
1000b2a2:	89a8      	ldrh	r0, [r5, #12]
1000b2a4:	0022      	movs	r2, r4
1000b2a6:	9601      	str	r6, [sp, #4]
1000b2a8:	0033      	movs	r3, r6
1000b2aa:	2100      	movs	r1, #0
1000b2ac:	47c8      	blx	r9
1000b2ae:	064e      	lsls	r6, r1, #25
1000b2b0:	09c2      	lsrs	r2, r0, #7
1000b2b2:	4332      	orrs	r2, r6
1000b2b4:	11cb      	asrs	r3, r1, #7
1000b2b6:	892e      	ldrh	r6, [r5, #8]
1000b2b8:	2100      	movs	r1, #0
1000b2ba:	0430      	lsls	r0, r6, #16
1000b2bc:	1812      	adds	r2, r2, r0
1000b2be:	414b      	adcs	r3, r1
1000b2c0:	0016      	movs	r6, r2
1000b2c2:	001f      	movs	r7, r3
    /* sensitivity: 1314881536 + 215500 = 1315097036 */
    sensitivity = (tv1 + tv3);

    /* P = D1*SENS - OFF = (D1*SENS/2^21 - OFF)/2^15 */
    /* tv1: (9085466 * 1315097036) / 2^21 = 5697378829(.612148284) */
    tv1 = (((int64_t)pressure_device.ms58_device.adc_values[MS58_TYPE_PRESS] * sensitivity) >> 21);
1000b2c4:	8968      	ldrh	r0, [r5, #10]
1000b2c6:	0022      	movs	r2, r4
1000b2c8:	9b01      	ldr	r3, [sp, #4]
1000b2ca:	2100      	movs	r1, #0
1000b2cc:	47c8      	blx	r9
1000b2ce:	060c      	lsls	r4, r1, #24
1000b2d0:	0a02      	lsrs	r2, r0, #8
1000b2d2:	4322      	orrs	r2, r4
1000b2d4:	120b      	asrs	r3, r1, #8
1000b2d6:	88ec      	ldrh	r4, [r5, #6]
1000b2d8:	2100      	movs	r1, #0
1000b2da:	03e0      	lsls	r0, r4, #15
1000b2dc:	1880      	adds	r0, r0, r2
1000b2de:	4159      	adcs	r1, r3
1000b2e0:	696a      	ldr	r2, [r5, #20]
1000b2e2:	2300      	movs	r3, #0
1000b2e4:	47c8      	blx	r9
    /* tv2: 5697378829 - 2420281617 = 3277097212 */
    tv2 = tv1 - offset;
    /* press: 3277097212 / 2^15 = 100009(.070190) */
    pressure_device.ms58_device.pressure = (int32_t)(tv2 >> 15);
1000b2e6:	02cc      	lsls	r4, r1, #11
1000b2e8:	0d42      	lsrs	r2, r0, #21
1000b2ea:	4322      	orrs	r2, r4
1000b2ec:	154b      	asrs	r3, r1, #21
1000b2ee:	1b92      	subs	r2, r2, r6
1000b2f0:	41bb      	sbcs	r3, r7
1000b2f2:	0011      	movs	r1, r2
1000b2f4:	045b      	lsls	r3, r3, #17
1000b2f6:	0bca      	lsrs	r2, r1, #15
1000b2f8:	431a      	orrs	r2, r3
1000b2fa:	61ea      	str	r2, [r5, #28]

    DBG_LOG_DEV("[sms_pressure_ms58_calculate] temperature = %ld  pressure = %ld", pressure_device.ms58_device.temperature, pressure_device.ms58_device.pressure);
1000b2fc:	4807      	ldr	r0, [pc, #28]	; (1000b31c <sms_pressure_ms58_calculate+0xac>)
1000b2fe:	4b08      	ldr	r3, [pc, #32]	; (1000b320 <sms_pressure_ms58_calculate+0xb0>)
1000b300:	4798      	blx	r3
1000b302:	69ea      	ldr	r2, [r5, #28]
1000b304:	6a29      	ldr	r1, [r5, #32]
1000b306:	4807      	ldr	r0, [pc, #28]	; (1000b324 <sms_pressure_ms58_calculate+0xb4>)
1000b308:	4b07      	ldr	r3, [pc, #28]	; (1000b328 <sms_pressure_ms58_calculate+0xb8>)
1000b30a:	4798      	blx	r3
}
1000b30c:	b002      	add	sp, #8
1000b30e:	bc04      	pop	{r2}
1000b310:	4691      	mov	r9, r2
1000b312:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000b314:	1001a294 	.word	0x1001a294
1000b318:	10013505 	.word	0x10013505
1000b31c:	1001663c 	.word	0x1001663c
1000b320:	10015495 	.word	0x10015495
1000b324:	100170dc 	.word	0x100170dc
1000b328:	10015375 	.word	0x10015375

1000b32c <sms_pressure_poll_data>:

    return STATUS_OK;
}

void sms_pressure_poll_data(void)
{
1000b32c:	b510      	push	{r4, lr}
    static uint32_t temp = 0x12345678;
    static uint32_t press = 0xfedcba98;
    if(ble_current_state == BLE_STATE_PAIRED) {
1000b32e:	4b11      	ldr	r3, [pc, #68]	; (1000b374 <sms_pressure_poll_data+0x48>)
1000b330:	781b      	ldrb	r3, [r3, #0]
1000b332:	2b22      	cmp	r3, #34	; 0x22
1000b334:	d11d      	bne.n	1000b372 <sms_pressure_poll_data+0x46>
        DBG_LOG_DEV("[sms_pressure_poll_data]\tStarting data polling");
1000b336:	4810      	ldr	r0, [pc, #64]	; (1000b378 <sms_pressure_poll_data+0x4c>)
1000b338:	4b10      	ldr	r3, [pc, #64]	; (1000b37c <sms_pressure_poll_data+0x50>)
1000b33a:	4798      	blx	r3
1000b33c:	4810      	ldr	r0, [pc, #64]	; (1000b380 <sms_pressure_poll_data+0x54>)
1000b33e:	4b11      	ldr	r3, [pc, #68]	; (1000b384 <sms_pressure_poll_data+0x58>)
1000b340:	4798      	blx	r3
        if(sms_pressure_ms58_read_data() != STATUS_OK) {
1000b342:	4b11      	ldr	r3, [pc, #68]	; (1000b388 <sms_pressure_poll_data+0x5c>)
1000b344:	4798      	blx	r3
1000b346:	2800      	cmp	r0, #0
1000b348:	d006      	beq.n	1000b358 <sms_pressure_poll_data+0x2c>
            DBG_LOG_DEV("[sms_pressure_ms58_poll_data] problem reading ms58 data");
1000b34a:	480b      	ldr	r0, [pc, #44]	; (1000b378 <sms_pressure_poll_data+0x4c>)
1000b34c:	4b0b      	ldr	r3, [pc, #44]	; (1000b37c <sms_pressure_poll_data+0x50>)
1000b34e:	4798      	blx	r3
1000b350:	480e      	ldr	r0, [pc, #56]	; (1000b38c <sms_pressure_poll_data+0x60>)
1000b352:	4b0c      	ldr	r3, [pc, #48]	; (1000b384 <sms_pressure_poll_data+0x58>)
1000b354:	4798      	blx	r3
1000b356:	e00c      	b.n	1000b372 <sms_pressure_poll_data+0x46>
        }
        else {
            ////DBG_LOG_DEV("[sms_pressure_poll_data]\tDone");
            if(pressure_device.ms58_device.data_complete) {
1000b358:	2324      	movs	r3, #36	; 0x24
1000b35a:	4a0d      	ldr	r2, [pc, #52]	; (1000b390 <sms_pressure_poll_data+0x64>)
1000b35c:	5cd3      	ldrb	r3, [r2, r3]
1000b35e:	2b00      	cmp	r3, #0
1000b360:	d007      	beq.n	1000b372 <sms_pressure_poll_data+0x46>
                pressure_device.ms58_device.data_complete = false;
1000b362:	2100      	movs	r1, #0
1000b364:	2324      	movs	r3, #36	; 0x24
1000b366:	54d1      	strb	r1, [r2, r3]
                sms_pressure_ms58_calculate();
1000b368:	4b0a      	ldr	r3, [pc, #40]	; (1000b394 <sms_pressure_poll_data+0x68>)
1000b36a:	4798      	blx	r3
                //ms58_device.temperature = ( (ms58_device.temperature >= (int32_t)0xffffffff) ? (ms58_device.temperature = 0) : (ms58_device.temperature + 1) );
                //ms58_device.pressure = ( (ms58_device.pressure < 0) ? (ms58_device.pressure = 0xffffffff) : (ms58_device.pressure - 1) );
                sms_ble_send_characteristic(BLE_CHAR_PRESS);
1000b36c:	2002      	movs	r0, #2
1000b36e:	4b0a      	ldr	r3, [pc, #40]	; (1000b398 <sms_pressure_poll_data+0x6c>)
1000b370:	4798      	blx	r3
        }
    }
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
    }        
}
1000b372:	bd10      	pop	{r4, pc}
1000b374:	1001a330 	.word	0x1001a330
1000b378:	1001663c 	.word	0x1001663c
1000b37c:	10015495 	.word	0x10015495
1000b380:	1001711c 	.word	0x1001711c
1000b384:	10015375 	.word	0x10015375
1000b388:	1000b199 	.word	0x1000b199
1000b38c:	1001714c 	.word	0x1001714c
1000b390:	1001a294 	.word	0x1001a294
1000b394:	1000b271 	.word	0x1000b271
1000b398:	1000a211 	.word	0x1000a211

1000b39c <sms_pressure_define_services>:
    DBG_LOG_DEV("[sms_pressure_ms58_calculate] temperature = %ld  pressure = %ld", pressure_device.ms58_device.temperature, pressure_device.ms58_device.pressure);
}


void sms_pressure_define_services(void)
{
1000b39c:	b510      	push	{r4, lr}
1000b39e:	b082      	sub	sp, #8
    at_ble_status_t status;
    uint8_t init_value = 0;
1000b3a0:	466b      	mov	r3, sp
1000b3a2:	1dda      	adds	r2, r3, #7
1000b3a4:	2300      	movs	r3, #0
1000b3a6:	7013      	strb	r3, [r2, #0]
    sms_ble_service_init(BLE_SERV_PRESSURE, &pressure_device.service_handler, &init_value);
1000b3a8:	4c0d      	ldr	r4, [pc, #52]	; (1000b3e0 <sms_pressure_define_services+0x44>)
1000b3aa:	0021      	movs	r1, r4
1000b3ac:	2001      	movs	r0, #1
1000b3ae:	4b0d      	ldr	r3, [pc, #52]	; (1000b3e4 <sms_pressure_define_services+0x48>)
1000b3b0:	4798      	blx	r3
    if((status = sms_ble_primary_service_define(&pressure_device.service_handler)) != AT_BLE_SUCCESS) {
1000b3b2:	0020      	movs	r0, r4
1000b3b4:	4b0c      	ldr	r3, [pc, #48]	; (1000b3e8 <sms_pressure_define_services+0x4c>)
1000b3b6:	4798      	blx	r3
1000b3b8:	1e04      	subs	r4, r0, #0
1000b3ba:	d007      	beq.n	1000b3cc <sms_pressure_define_services+0x30>
        DBG_LOG("[sms_pressure_define_services]\tServices defining failed, reason 0x%x", status);
1000b3bc:	480b      	ldr	r0, [pc, #44]	; (1000b3ec <sms_pressure_define_services+0x50>)
1000b3be:	4b0c      	ldr	r3, [pc, #48]	; (1000b3f0 <sms_pressure_define_services+0x54>)
1000b3c0:	4798      	blx	r3
1000b3c2:	0021      	movs	r1, r4
1000b3c4:	480b      	ldr	r0, [pc, #44]	; (1000b3f4 <sms_pressure_define_services+0x58>)
1000b3c6:	4b0c      	ldr	r3, [pc, #48]	; (1000b3f8 <sms_pressure_define_services+0x5c>)
1000b3c8:	4798      	blx	r3
1000b3ca:	e007      	b.n	1000b3dc <sms_pressure_define_services+0x40>
    }
    else {
        DBG_LOG_DEV("[sms_pressure_define_services]\tServices defined, SMS pressure handle: %d", pressure_device.service_handler.serv_handle);
1000b3cc:	4807      	ldr	r0, [pc, #28]	; (1000b3ec <sms_pressure_define_services+0x50>)
1000b3ce:	4b08      	ldr	r3, [pc, #32]	; (1000b3f0 <sms_pressure_define_services+0x54>)
1000b3d0:	4798      	blx	r3
1000b3d2:	4b0a      	ldr	r3, [pc, #40]	; (1000b3fc <sms_pressure_define_services+0x60>)
1000b3d4:	8fd9      	ldrh	r1, [r3, #62]	; 0x3e
1000b3d6:	480a      	ldr	r0, [pc, #40]	; (1000b400 <sms_pressure_define_services+0x64>)
1000b3d8:	4b07      	ldr	r3, [pc, #28]	; (1000b3f8 <sms_pressure_define_services+0x5c>)
1000b3da:	4798      	blx	r3
    }
1000b3dc:	b002      	add	sp, #8
1000b3de:	bd10      	pop	{r4, pc}
1000b3e0:	1001a2c0 	.word	0x1001a2c0
1000b3e4:	1000a431 	.word	0x1000a431
1000b3e8:	1000a40d 	.word	0x1000a40d
1000b3ec:	1001663c 	.word	0x1001663c
1000b3f0:	10015495 	.word	0x10015495
1000b3f4:	10017184 	.word	0x10017184
1000b3f8:	10015375 	.word	0x10015375
1000b3fc:	1001a294 	.word	0x1001a294
1000b400:	100171cc 	.word	0x100171cc

1000b404 <sms_spi_master_configure>:
 *   + mode 3 on SPI0 @ 1 MHz for MPU-9250 IMU
 * - assign SS pin for each slave device
 * - enable SPI
 */ 
void sms_spi_master_configure(void)
{
1000b404:	b530      	push	{r4, r5, lr}
1000b406:	b08d      	sub	sp, #52	; 0x34
    //DBG_LOG_DEV("[spi_master_configure]\tconfiguring SPI masters and attaching slaves...");

    /* Initialize ms58 spi slave device */
    struct spi_config spi_master_config;
    struct spi_slave_inst_config spi_slave_ms58_config;
    spi_slave_inst_get_config_defaults(&spi_slave_ms58_config);
1000b408:	ac01      	add	r4, sp, #4
1000b40a:	0020      	movs	r0, r4
1000b40c:	4b13      	ldr	r3, [pc, #76]	; (1000b45c <sms_spi_master_configure+0x58>)
1000b40e:	4798      	blx	r3
    spi_slave_ms58_config.ss_pin = SMS_PRESSURE_SPI_SS_PIN;
1000b410:	2310      	movs	r3, #16
1000b412:	7023      	strb	r3, [r4, #0]
    spi_attach_slave(&spi_slave_ms58_instance, &spi_slave_ms58_config);
1000b414:	0021      	movs	r1, r4
1000b416:	4812      	ldr	r0, [pc, #72]	; (1000b460 <sms_spi_master_configure+0x5c>)
1000b418:	4b12      	ldr	r3, [pc, #72]	; (1000b464 <sms_spi_master_configure+0x60>)
1000b41a:	4798      	blx	r3
    

    /* Initialize SPI1 master for ms58 */
    spi_get_config_defaults(&spi_master_config);
1000b41c:	ac02      	add	r4, sp, #8
1000b41e:	0020      	movs	r0, r4
1000b420:	4b11      	ldr	r3, [pc, #68]	; (1000b468 <sms_spi_master_configure+0x64>)
1000b422:	4798      	blx	r3
    spi_master_config.clock_divider = SPI_MASTER_MS58_CLOCK_DIV;
1000b424:	2368      	movs	r3, #104	; 0x68
1000b426:	7123      	strb	r3, [r4, #4]
    spi_master_config.transfer_mode = SPI_MASTER_MS58_MODE;
1000b428:	2300      	movs	r3, #0
1000b42a:	70a3      	strb	r3, [r4, #2]
    spi_master_config.pin_number_pad[0] = SPI_MASTER_MS58_PIN_SCK;
1000b42c:	3311      	adds	r3, #17
1000b42e:	60a3      	str	r3, [r4, #8]
    spi_master_config.pinmux_sel_pad[0] = SPI_MASTER_MS58_MUX_SCK;
1000b430:	3b0d      	subs	r3, #13
1000b432:	61a3      	str	r3, [r4, #24]
    spi_master_config.pin_number_pad[1] = SPI_MASTER_MS58_PIN_MOSI;
1000b434:	2213      	movs	r2, #19
1000b436:	60e2      	str	r2, [r4, #12]
    spi_master_config.pinmux_sel_pad[1] = SPI_MASTER_MS58_MUX_MOSI;
1000b438:	61e3      	str	r3, [r4, #28]
    spi_master_config.pin_number_pad[2] = SPI_MASTER_MS58_PIN_SSN;
1000b43a:	3a14      	subs	r2, #20
1000b43c:	6122      	str	r2, [r4, #16]
    spi_master_config.pinmux_sel_pad[2] = SPI_MASTER_MS58_MUX_SSN;
1000b43e:	6222      	str	r2, [r4, #32]
    spi_master_config.pin_number_pad[3] = SPI_MASTER_MS58_MISO;
1000b440:	3213      	adds	r2, #19
1000b442:	6162      	str	r2, [r4, #20]
    spi_master_config.pinmux_sel_pad[3] = SPI_MASTER_MS58_MUX_MISO;
1000b444:	6263      	str	r3, [r4, #36]	; 0x24
    spi_init(&spi_master_ms58_instance, SPI_MASTER_MS58_PORT, &spi_master_config);
1000b446:	4d09      	ldr	r5, [pc, #36]	; (1000b46c <sms_spi_master_configure+0x68>)
1000b448:	0022      	movs	r2, r4
1000b44a:	4909      	ldr	r1, [pc, #36]	; (1000b470 <sms_spi_master_configure+0x6c>)
1000b44c:	0028      	movs	r0, r5
1000b44e:	4b09      	ldr	r3, [pc, #36]	; (1000b474 <sms_spi_master_configure+0x70>)
1000b450:	4798      	blx	r3
    spi_enable(&spi_master_ms58_instance);
1000b452:	0028      	movs	r0, r5
1000b454:	4b08      	ldr	r3, [pc, #32]	; (1000b478 <sms_spi_master_configure+0x74>)
1000b456:	4798      	blx	r3
}
1000b458:	b00d      	add	sp, #52	; 0x34
1000b45a:	bd30      	pop	{r4, r5, pc}
1000b45c:	1000babd 	.word	0x1000babd
1000b460:	1001a334 	.word	0x1001a334
1000b464:	1000baf5 	.word	0x1000baf5
1000b468:	1000bac9 	.word	0x1000bac9
1000b46c:	1001a340 	.word	0x1001a340
1000b470:	40007000 	.word	0x40007000
1000b474:	1000bbc5 	.word	0x1000bbc5
1000b478:	1000bb35 	.word	0x1000bb35

1000b47c <sms_spi_master_transceive>:
/* SPI transceive function:
 * - enable selected slave
 * - start transceive blocking job
 * - when job returned, disable selected slave
 */
enum status_code sms_spi_master_transceive(struct spi_module *const module, struct spi_slave_inst *const slave, uint8_t *tx_data, uint8_t *rx_data, uint16_t len) {
1000b47c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000b47e:	b083      	sub	sp, #12
1000b480:	0004      	movs	r4, r0
1000b482:	000d      	movs	r5, r1
1000b484:	9200      	str	r2, [sp, #0]
1000b486:	9301      	str	r3, [sp, #4]
1000b488:	ab08      	add	r3, sp, #32
1000b48a:	881e      	ldrh	r6, [r3, #0]
    enum status_code retVal;
    /* Enable slave */
    //DBG_LOG_CONT_DEV(" selecting slave...");
    spi_select_slave(module, slave, true);
1000b48c:	2201      	movs	r2, #1
1000b48e:	4f08      	ldr	r7, [pc, #32]	; (1000b4b0 <sms_spi_master_transceive+0x34>)
1000b490:	47b8      	blx	r7
    /* Write SPI data */
    //DBG_LOG_CONT_DEV(" writing data...");
    retVal = spi_transceive_buffer_wait(module, tx_data, rx_data, len);
1000b492:	0033      	movs	r3, r6
1000b494:	9a01      	ldr	r2, [sp, #4]
1000b496:	9900      	ldr	r1, [sp, #0]
1000b498:	0020      	movs	r0, r4
1000b49a:	4e06      	ldr	r6, [pc, #24]	; (1000b4b4 <sms_spi_master_transceive+0x38>)
1000b49c:	47b0      	blx	r6
1000b49e:	0006      	movs	r6, r0
    /* Disable slave */
    //DBG_LOG_CONT_DEV(" de-selecting slave...");
    spi_select_slave(module, slave, false);
1000b4a0:	2200      	movs	r2, #0
1000b4a2:	0029      	movs	r1, r5
1000b4a4:	0020      	movs	r0, r4
1000b4a6:	47b8      	blx	r7
    //DBG_LOG_CONT_DEV(" done!");
    return retVal;
}
1000b4a8:	0030      	movs	r0, r6
1000b4aa:	b003      	add	sp, #12
1000b4ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000b4ae:	46c0      	nop			; (mov r8, r8)
1000b4b0:	1000bdad 	.word	0x1000bdad
1000b4b4:	1000bd29 	.word	0x1000bd29

1000b4b8 <sms_timer_aon_callback>:

#include "sms_timer.h"

/* AON SLEEP TIMER */
void sms_timer_aon_callback(void)
{
1000b4b8:	b510      	push	{r4, lr}
    sms_current_interrupt.source = INT_AON_TIMER;
1000b4ba:	2204      	movs	r2, #4
1000b4bc:	4b04      	ldr	r3, [pc, #16]	; (1000b4d0 <sms_timer_aon_callback+0x18>)
1000b4be:	701a      	strb	r2, [r3, #0]
    send_plf_int_msg_ind(AON_SLEEP_TIMER_EXPIRY_CALLBACK, AON_TIMER_EXPIRED, NULL, 0);
1000b4c0:	2300      	movs	r3, #0
1000b4c2:	2200      	movs	r2, #0
1000b4c4:	2103      	movs	r1, #3
1000b4c6:	2042      	movs	r0, #66	; 0x42
1000b4c8:	4c02      	ldr	r4, [pc, #8]	; (1000b4d4 <sms_timer_aon_callback+0x1c>)
1000b4ca:	47a0      	blx	r4
}
1000b4cc:	bd10      	pop	{r4, pc}
1000b4ce:	46c0      	nop			; (mov r8, r8)
1000b4d0:	1001a318 	.word	0x1001a318
1000b4d4:	1000f3e1 	.word	0x1000f3e1

1000b4d8 <sms_timer_aon_init>:

void sms_timer_aon_init(uint32_t cnt, enum aon_sleep_timer_mode cnt_mode)
{
1000b4d8:	b530      	push	{r4, r5, lr}
1000b4da:	b083      	sub	sp, #12
1000b4dc:	0004      	movs	r4, r0
1000b4de:	000d      	movs	r5, r1
    struct aon_sleep_timer_config config_aon_sleep_timer;
    aon_sleep_timer_get_config_defaults(&config_aon_sleep_timer);
1000b4e0:	4668      	mov	r0, sp
1000b4e2:	4b05      	ldr	r3, [pc, #20]	; (1000b4f8 <sms_timer_aon_init+0x20>)
1000b4e4:	4798      	blx	r3
    config_aon_sleep_timer.mode = cnt_mode;
1000b4e6:	466b      	mov	r3, sp
1000b4e8:	705d      	strb	r5, [r3, #1]
    config_aon_sleep_timer.counter = cnt;
1000b4ea:	9401      	str	r4, [sp, #4]
    aon_sleep_timer_init(&config_aon_sleep_timer);
1000b4ec:	4668      	mov	r0, sp
1000b4ee:	4b03      	ldr	r3, [pc, #12]	; (1000b4fc <sms_timer_aon_init+0x24>)
1000b4f0:	4798      	blx	r3
}
1000b4f2:	b003      	add	sp, #12
1000b4f4:	bd30      	pop	{r4, r5, pc}
1000b4f6:	46c0      	nop			; (mov r8, r8)
1000b4f8:	10008155 	.word	0x10008155
1000b4fc:	100081c9 	.word	0x100081c9

1000b500 <sms_timer_aon_disable>:

void sms_timer_aon_disable(void)
{
1000b500:	b510      	push	{r4, lr}
    aon_sleep_timer_disable();
1000b502:	4b01      	ldr	r3, [pc, #4]	; (1000b508 <sms_timer_aon_disable+0x8>)
1000b504:	4798      	blx	r3
}
1000b506:	bd10      	pop	{r4, pc}
1000b508:	10008165 	.word	0x10008165

1000b50c <sms_timer_aon_register_callback>:

void sms_timer_aon_register_callback(void)
{
1000b50c:	b510      	push	{r4, lr}
    aon_sleep_timer_register_callback(sms_timer_aon_callback);
1000b50e:	4804      	ldr	r0, [pc, #16]	; (1000b520 <sms_timer_aon_register_callback+0x14>)
1000b510:	4b04      	ldr	r3, [pc, #16]	; (1000b524 <sms_timer_aon_register_callback+0x18>)
1000b512:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000b514:	2280      	movs	r2, #128	; 0x80
1000b516:	0512      	lsls	r2, r2, #20
1000b518:	4b03      	ldr	r3, [pc, #12]	; (1000b528 <sms_timer_aon_register_callback+0x1c>)
1000b51a:	601a      	str	r2, [r3, #0]
    NVIC_EnableIRQ(AON_SLEEP_TIMER0_IRQn);
}
1000b51c:	bd10      	pop	{r4, pc}
1000b51e:	46c0      	nop			; (mov r8, r8)
1000b520:	1000b4b9 	.word	0x1000b4b9
1000b524:	100081b1 	.word	0x100081b1
1000b528:	e000e100 	.word	0xe000e100

1000b52c <sms_timer_aon_unregister_callback>:

void sms_timer_aon_unregister_callback(void)
{
1000b52c:	b510      	push	{r4, lr}
    aon_sleep_timer_unregister_callback();
1000b52e:	4b04      	ldr	r3, [pc, #16]	; (1000b540 <sms_timer_aon_unregister_callback+0x14>)
1000b530:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000b532:	2180      	movs	r1, #128	; 0x80
1000b534:	0509      	lsls	r1, r1, #20
1000b536:	2380      	movs	r3, #128	; 0x80
1000b538:	4a02      	ldr	r2, [pc, #8]	; (1000b544 <sms_timer_aon_unregister_callback+0x18>)
1000b53a:	50d1      	str	r1, [r2, r3]
    NVIC_DisableIRQ(AON_SLEEP_TIMER0_IRQn);
}
1000b53c:	bd10      	pop	{r4, pc}
1000b53e:	46c0      	nop			; (mov r8, r8)
1000b540:	100081bd 	.word	0x100081bd
1000b544:	e000e100 	.word	0xe000e100

1000b548 <sms_timer_aon_get_ms>:

void sms_timer_aon_get_ms(uint32_t *count)
{
    count = (uint32_t *)0;
}
1000b548:	4770      	bx	lr
1000b54a:	46c0      	nop			; (mov r8, r8)

1000b54c <sms_dualtimer_init>:

/* DUALTIMER */
void sms_dualtimer_init(void)
{
1000b54c:	b510      	push	{r4, lr}
1000b54e:	b088      	sub	sp, #32
    struct dualtimer_config config_dualtimer;
    dualtimer_get_config_defaults(&config_dualtimer);
1000b550:	ac01      	add	r4, sp, #4
1000b552:	0020      	movs	r0, r4
1000b554:	4b08      	ldr	r3, [pc, #32]	; (1000b578 <sms_dualtimer_init+0x2c>)
1000b556:	4798      	blx	r3

    config_dualtimer.timer1.load_value = SMS_DUALTIMER_LOAD_S;
1000b558:	4a08      	ldr	r2, [pc, #32]	; (1000b57c <sms_dualtimer_init+0x30>)
1000b55a:	60a2      	str	r2, [r4, #8]
    config_dualtimer.timer1.counter_mode = DUALTIMER_ONE_SHOT_MODE;
1000b55c:	2300      	movs	r3, #0
1000b55e:	7063      	strb	r3, [r4, #1]
    config_dualtimer.timer2.load_value = SMS_DUALTIMER_LOAD_S;
1000b560:	6162      	str	r2, [r4, #20]
    config_dualtimer.timer2.counter_mode = DUALTIMER_ONE_SHOT_MODE;
1000b562:	7363      	strb	r3, [r4, #13]

    dualtimer_init(&config_dualtimer);
1000b564:	0020      	movs	r0, r4
1000b566:	4b06      	ldr	r3, [pc, #24]	; (1000b580 <sms_dualtimer_init+0x34>)
1000b568:	4798      	blx	r3
    dualtimer_disable(DUALTIMER_TIMER1);
1000b56a:	2000      	movs	r0, #0
1000b56c:	4c05      	ldr	r4, [pc, #20]	; (1000b584 <sms_dualtimer_init+0x38>)
1000b56e:	47a0      	blx	r4
    dualtimer_disable(DUALTIMER_TIMER2);
1000b570:	2001      	movs	r0, #1
1000b572:	47a0      	blx	r4
}
1000b574:	b008      	add	sp, #32
1000b576:	bd10      	pop	{r4, pc}
1000b578:	1000be11 	.word	0x1000be11
1000b57c:	018cba80 	.word	0x018cba80
1000b580:	1000bea5 	.word	0x1000bea5
1000b584:	1000be81 	.word	0x1000be81

1000b588 <sms_dualtimer_register_callback>:

void sms_dualtimer_register_callback(enum dualtimer_timer tmr, sms_dualtimer_callback_t cb_handler)
{
1000b588:	b510      	push	{r4, lr}
1000b58a:	0004      	movs	r4, r0
    dualtimer_register_callback(tmr, cb_handler);
1000b58c:	4b02      	ldr	r3, [pc, #8]	; (1000b598 <sms_dualtimer_register_callback+0x10>)
1000b58e:	4798      	blx	r3
    NVIC_EnableIRQ(DUALTIMER0_IRQn);
}

void sms_dualtimer_stop(enum dualtimer_timer tmr)
{
    dualtimer_disable(tmr);
1000b590:	0020      	movs	r0, r4
1000b592:	4b02      	ldr	r3, [pc, #8]	; (1000b59c <sms_dualtimer_register_callback+0x14>)
1000b594:	4798      	blx	r3

void sms_dualtimer_register_callback(enum dualtimer_timer tmr, sms_dualtimer_callback_t cb_handler)
{
    dualtimer_register_callback(tmr, cb_handler);
    sms_dualtimer_stop(tmr);
}
1000b596:	bd10      	pop	{r4, pc}
1000b598:	1000bfa9 	.word	0x1000bfa9
1000b59c:	1000be81 	.word	0x1000be81

1000b5a0 <sms_dualtimer_start>:

void sms_dualtimer_start(timer_unit_type_t unit, uint32_t delay, enum dualtimer_timer tmr)
{
1000b5a0:	b510      	push	{r4, lr}
1000b5a2:	0014      	movs	r4, r2
    uint32_t timer_load = 1;
    switch(unit) {
1000b5a4:	2801      	cmp	r0, #1
1000b5a6:	d006      	beq.n	1000b5b6 <sms_dualtimer_start+0x16>
1000b5a8:	2800      	cmp	r0, #0
1000b5aa:	d002      	beq.n	1000b5b2 <sms_dualtimer_start+0x12>
1000b5ac:	2802      	cmp	r0, #2
1000b5ae:	d004      	beq.n	1000b5ba <sms_dualtimer_start+0x1a>
1000b5b0:	e005      	b.n	1000b5be <sms_dualtimer_start+0x1e>
        case TIMER_UNIT_US:
        timer_load = SMS_DUALTIMER_LOAD_US;
1000b5b2:	221a      	movs	r2, #26
1000b5b4:	e004      	b.n	1000b5c0 <sms_dualtimer_start+0x20>
        break;
        
        case TIMER_UNIT_MS:
        timer_load = SMS_DUALTIMER_LOAD_MS;
1000b5b6:	4a0c      	ldr	r2, [pc, #48]	; (1000b5e8 <sms_dualtimer_start+0x48>)
        break;
1000b5b8:	e002      	b.n	1000b5c0 <sms_dualtimer_start+0x20>
        
        case TIMER_UNIT_S:
        timer_load = SMS_DUALTIMER_LOAD_S;
1000b5ba:	4a0c      	ldr	r2, [pc, #48]	; (1000b5ec <sms_dualtimer_start+0x4c>)
        break;
1000b5bc:	e000      	b.n	1000b5c0 <sms_dualtimer_start+0x20>
    sms_dualtimer_stop(tmr);
}

void sms_dualtimer_start(timer_unit_type_t unit, uint32_t delay, enum dualtimer_timer tmr)
{
    uint32_t timer_load = 1;
1000b5be:	2201      	movs	r2, #1
        
        default:
        break;
    }
    
    if(delay <= 0) {
1000b5c0:	2900      	cmp	r1, #0
1000b5c2:	d101      	bne.n	1000b5c8 <sms_dualtimer_start+0x28>
        //DBG_LOG("[sms_dualtimer_start]\tWarning! Delay value < 0... setting to 1000");
        delay = 1000;
1000b5c4:	21fa      	movs	r1, #250	; 0xfa
1000b5c6:	0089      	lsls	r1, r1, #2
    }
    
    ulp_ready = false;
1000b5c8:	2000      	movs	r0, #0
1000b5ca:	4b09      	ldr	r3, [pc, #36]	; (1000b5f0 <sms_dualtimer_start+0x50>)
1000b5cc:	7018      	strb	r0, [r3, #0]
    //DBG_LOG_DEV("[sms_dualtimer_start]\t\tStarting timer%d... load: %ld, delay: %ld", (tmr+1), timer_load, delay);
    dualtimer_set_counter(tmr, DUALTIMER_SET_CURRUNT_REG, timer_load * delay);
1000b5ce:	434a      	muls	r2, r1
1000b5d0:	2100      	movs	r1, #0
1000b5d2:	0020      	movs	r0, r4
1000b5d4:	4b07      	ldr	r3, [pc, #28]	; (1000b5f4 <sms_dualtimer_start+0x54>)
1000b5d6:	4798      	blx	r3
    dualtimer_enable(tmr);
1000b5d8:	0020      	movs	r0, r4
1000b5da:	4b07      	ldr	r3, [pc, #28]	; (1000b5f8 <sms_dualtimer_start+0x58>)
1000b5dc:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000b5de:	2280      	movs	r2, #128	; 0x80
1000b5e0:	01d2      	lsls	r2, r2, #7
1000b5e2:	4b06      	ldr	r3, [pc, #24]	; (1000b5fc <sms_dualtimer_start+0x5c>)
1000b5e4:	601a      	str	r2, [r3, #0]
    NVIC_EnableIRQ(DUALTIMER0_IRQn);
}
1000b5e6:	bd10      	pop	{r4, pc}
1000b5e8:	00006590 	.word	0x00006590
1000b5ec:	018cba80 	.word	0x018cba80
1000b5f0:	1001a219 	.word	0x1001a219
1000b5f4:	1000be35 	.word	0x1000be35
1000b5f8:	1000be5d 	.word	0x1000be5d
1000b5fc:	e000e100 	.word	0xe000e100

1000b600 <sms_dualtimer_stop>:

void sms_dualtimer_stop(enum dualtimer_timer tmr)
{
1000b600:	b510      	push	{r4, lr}
    dualtimer_disable(tmr);
1000b602:	4b01      	ldr	r3, [pc, #4]	; (1000b608 <sms_dualtimer_stop+0x8>)
1000b604:	4798      	blx	r3
}
1000b606:	bd10      	pop	{r4, pc}
1000b608:	1000be81 	.word	0x1000be81

1000b60c <sms_dualtimer1_cb>:

void sms_dualtimer1_cb(void)
{
1000b60c:	b510      	push	{r4, lr}
    sms_current_interrupt.source = INT_DUALTIMER1;
1000b60e:	2205      	movs	r2, #5
1000b610:	4b04      	ldr	r3, [pc, #16]	; (1000b624 <sms_dualtimer1_cb+0x18>)
1000b612:	701a      	strb	r2, [r3, #0]
    send_plf_int_msg_ind(DUALTIMER_TIMER1_CALLBACK, TIMER_EXPIRED_CALLBACK_TYPE_DETECT, NULL, 0);
1000b614:	2300      	movs	r3, #0
1000b616:	2200      	movs	r2, #0
1000b618:	2101      	movs	r1, #1
1000b61a:	2040      	movs	r0, #64	; 0x40
1000b61c:	4c02      	ldr	r4, [pc, #8]	; (1000b628 <sms_dualtimer1_cb+0x1c>)
1000b61e:	47a0      	blx	r4
}
1000b620:	bd10      	pop	{r4, pc}
1000b622:	46c0      	nop			; (mov r8, r8)
1000b624:	1001a318 	.word	0x1001a318
1000b628:	1000f3e1 	.word	0x1000f3e1

1000b62c <sms_dualtimer2_cb>:

void sms_dualtimer2_cb(void)
{
1000b62c:	b510      	push	{r4, lr}
    sms_current_interrupt.source = INT_DUALTIMER2;
1000b62e:	2206      	movs	r2, #6
1000b630:	4b04      	ldr	r3, [pc, #16]	; (1000b644 <sms_dualtimer2_cb+0x18>)
1000b632:	701a      	strb	r2, [r3, #0]
    send_plf_int_msg_ind(DUALTIMER_TIMER2_CALLBACK, TIMER_EXPIRED_CALLBACK_TYPE_DETECT, NULL, 0);
1000b634:	2300      	movs	r3, #0
1000b636:	2200      	movs	r2, #0
1000b638:	2101      	movs	r1, #1
1000b63a:	2041      	movs	r0, #65	; 0x41
1000b63c:	4c02      	ldr	r4, [pc, #8]	; (1000b648 <sms_dualtimer2_cb+0x1c>)
1000b63e:	47a0      	blx	r4
}
1000b640:	bd10      	pop	{r4, pc}
1000b642:	46c0      	nop			; (mov r8, r8)
1000b644:	1001a318 	.word	0x1001a318
1000b648:	1000f3e1 	.word	0x1000f3e1

1000b64c <sms_dualtimer1_fn>:


void sms_dualtimer1_fn(void)
{
1000b64c:	b510      	push	{r4, lr}
    //sms_button_toggle_interrupt(SMS_BTN_INT_DISABLE, SMS_BTN_INT_DISABLE);
    switch(timer1_current_mode) {
1000b64e:	4ba7      	ldr	r3, [pc, #668]	; (1000b8ec <sms_dualtimer1_fn+0x2a0>)
1000b650:	781b      	ldrb	r3, [r3, #0]
1000b652:	b2db      	uxtb	r3, r3
1000b654:	2b02      	cmp	r3, #2
1000b656:	d006      	beq.n	1000b666 <sms_dualtimer1_fn+0x1a>
1000b658:	2b03      	cmp	r3, #3
1000b65a:	d100      	bne.n	1000b65e <sms_dualtimer1_fn+0x12>
1000b65c:	e103      	b.n	1000b866 <sms_dualtimer1_fn+0x21a>
1000b65e:	2b01      	cmp	r3, #1
1000b660:	d000      	beq.n	1000b664 <sms_dualtimer1_fn+0x18>
1000b662:	e13a      	b.n	1000b8da <sms_dualtimer1_fn+0x28e>
1000b664:	e051      	b.n	1000b70a <sms_dualtimer1_fn+0xbe>
        /* Timer1 mode = MS58_RESET */
        case TIMER1_MODE_MS58_RESET:
        {
            timer1_current_mode = TIMER1_MODE_NONE;
1000b666:	2200      	movs	r2, #0
1000b668:	4ba0      	ldr	r3, [pc, #640]	; (1000b8ec <sms_dualtimer1_fn+0x2a0>)
1000b66a:	701a      	strb	r2, [r3, #0]
            pressure_device.ms58_device.reset_done = true;
1000b66c:	4ba0      	ldr	r3, [pc, #640]	; (1000b8f0 <sms_dualtimer1_fn+0x2a4>)
1000b66e:	2101      	movs	r1, #1
1000b670:	7059      	strb	r1, [r3, #1]
            pressure_device.ms58_device.init_retry = 0;
1000b672:	3125      	adds	r1, #37	; 0x25
1000b674:	545a      	strb	r2, [r3, r1]
            if(sms_pressure_init() != STATUS_OK) {
1000b676:	4b9f      	ldr	r3, [pc, #636]	; (1000b8f4 <sms_dualtimer1_fn+0x2a8>)
1000b678:	4798      	blx	r3
1000b67a:	2800      	cmp	r0, #0
1000b67c:	d02b      	beq.n	1000b6d6 <sms_dualtimer1_fn+0x8a>
                DBG_LOG_DEV("[sms_dualtimer1_fn]\tFailed to init ms58 device");
1000b67e:	489e      	ldr	r0, [pc, #632]	; (1000b8f8 <sms_dualtimer1_fn+0x2ac>)
1000b680:	4b9e      	ldr	r3, [pc, #632]	; (1000b8fc <sms_dualtimer1_fn+0x2b0>)
1000b682:	4798      	blx	r3
1000b684:	489e      	ldr	r0, [pc, #632]	; (1000b900 <sms_dualtimer1_fn+0x2b4>)
1000b686:	4b9f      	ldr	r3, [pc, #636]	; (1000b904 <sms_dualtimer1_fn+0x2b8>)
1000b688:	4798      	blx	r3
                pressure_device.ms58_device.init_retry++;
1000b68a:	4999      	ldr	r1, [pc, #612]	; (1000b8f0 <sms_dualtimer1_fn+0x2a4>)
1000b68c:	2226      	movs	r2, #38	; 0x26
1000b68e:	5c8b      	ldrb	r3, [r1, r2]
1000b690:	3301      	adds	r3, #1
1000b692:	b2db      	uxtb	r3, r3
1000b694:	548b      	strb	r3, [r1, r2]
                if(pressure_device.ms58_device.init_retry >= MS58_INIT_RETRY_MAX) {
1000b696:	2b03      	cmp	r3, #3
1000b698:	d914      	bls.n	1000b6c4 <sms_dualtimer1_fn+0x78>
                    DBG_LOG_DEV("[sms_dualtimer1_fn]\tFailed to initialize pressure sensor. Working mode = BUTTON_SOLO");
1000b69a:	4897      	ldr	r0, [pc, #604]	; (1000b8f8 <sms_dualtimer1_fn+0x2ac>)
1000b69c:	4b97      	ldr	r3, [pc, #604]	; (1000b8fc <sms_dualtimer1_fn+0x2b0>)
1000b69e:	4798      	blx	r3
1000b6a0:	4899      	ldr	r0, [pc, #612]	; (1000b908 <sms_dualtimer1_fn+0x2bc>)
1000b6a2:	4b98      	ldr	r3, [pc, #608]	; (1000b904 <sms_dualtimer1_fn+0x2b8>)
1000b6a4:	4798      	blx	r3
                    pressure_device.ms58_device.current_state = MS58_STATE_NONE;
1000b6a6:	2100      	movs	r1, #0
1000b6a8:	2325      	movs	r3, #37	; 0x25
1000b6aa:	4a91      	ldr	r2, [pc, #580]	; (1000b8f0 <sms_dualtimer1_fn+0x2a4>)
1000b6ac:	54d1      	strb	r1, [r2, r3]
                    sms_working_mode = SMS_MODE_BUTTON_SOLO;
1000b6ae:	2201      	movs	r2, #1
1000b6b0:	4b96      	ldr	r3, [pc, #600]	; (1000b90c <sms_dualtimer1_fn+0x2c0>)
1000b6b2:	701a      	strb	r2, [r3, #0]
                    // Init IMU device...
                    //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                    if(timer2_current_mode == TIMER2_MODE_NONE) {
1000b6b4:	4b96      	ldr	r3, [pc, #600]	; (1000b910 <sms_dualtimer1_fn+0x2c4>)
1000b6b6:	781b      	ldrb	r3, [r3, #0]
1000b6b8:	2b00      	cmp	r3, #0
1000b6ba:	d000      	beq.n	1000b6be <sms_dualtimer1_fn+0x72>
1000b6bc:	e114      	b.n	1000b8e8 <sms_dualtimer1_fn+0x29c>
                        //release_sleep_lock();
                        ulp_ready = true;
1000b6be:	4b95      	ldr	r3, [pc, #596]	; (1000b914 <sms_dualtimer1_fn+0x2c8>)
1000b6c0:	701a      	strb	r2, [r3, #0]
1000b6c2:	e111      	b.n	1000b8e8 <sms_dualtimer1_fn+0x29c>
                    }                        
                }
                else {
                    timer1_current_mode = TIMER1_MODE_MS58_RESET;
1000b6c4:	2202      	movs	r2, #2
1000b6c6:	4b89      	ldr	r3, [pc, #548]	; (1000b8ec <sms_dualtimer1_fn+0x2a0>)
1000b6c8:	701a      	strb	r2, [r3, #0]
                    //ulp_ready = false;
                    sms_dualtimer_start(TIMER_UNIT_MS, MS58_RESET_WAIT_MS, DUALTIMER_TIMER1);
1000b6ca:	2200      	movs	r2, #0
1000b6cc:	2103      	movs	r1, #3
1000b6ce:	2001      	movs	r0, #1
1000b6d0:	4b91      	ldr	r3, [pc, #580]	; (1000b918 <sms_dualtimer1_fn+0x2cc>)
1000b6d2:	4798      	blx	r3
1000b6d4:	e108      	b.n	1000b8e8 <sms_dualtimer1_fn+0x29c>
                }
            }
            else {
                pressure_device.ms58_device.current_state = MS58_STATE_READY;
1000b6d6:	2102      	movs	r1, #2
1000b6d8:	2325      	movs	r3, #37	; 0x25
1000b6da:	4a85      	ldr	r2, [pc, #532]	; (1000b8f0 <sms_dualtimer1_fn+0x2a4>)
1000b6dc:	54d1      	strb	r1, [r2, r3]
                sms_working_mode = SMS_MODE_BUTTON_PRESSURE;
1000b6de:	2205      	movs	r2, #5
1000b6e0:	4b8a      	ldr	r3, [pc, #552]	; (1000b90c <sms_dualtimer1_fn+0x2c0>)
1000b6e2:	701a      	strb	r2, [r3, #0]
                //DBG_LOG_DEV("[sms_dualtimer1_fn]\tPressure sensor initialized. Working mode = BUTTON_PRESSURE");
                DBG_LOG_DEV("[sms_dualtimer1_fn]\t\tStarting sensors (MS58 reset)...");
1000b6e4:	4884      	ldr	r0, [pc, #528]	; (1000b8f8 <sms_dualtimer1_fn+0x2ac>)
1000b6e6:	4b85      	ldr	r3, [pc, #532]	; (1000b8fc <sms_dualtimer1_fn+0x2b0>)
1000b6e8:	4798      	blx	r3
1000b6ea:	488c      	ldr	r0, [pc, #560]	; (1000b91c <sms_dualtimer1_fn+0x2d0>)
1000b6ec:	4b85      	ldr	r3, [pc, #532]	; (1000b904 <sms_dualtimer1_fn+0x2b8>)
1000b6ee:	4798      	blx	r3
                sms_sensors_interrupt_toggle(false, true);
1000b6f0:	2101      	movs	r1, #1
1000b6f2:	2000      	movs	r0, #0
1000b6f4:	4b8a      	ldr	r3, [pc, #552]	; (1000b920 <sms_dualtimer1_fn+0x2d4>)
1000b6f6:	4798      	blx	r3
                // Init IMU device...
                //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                if(timer2_current_mode == TIMER2_MODE_NONE) {
1000b6f8:	4b85      	ldr	r3, [pc, #532]	; (1000b910 <sms_dualtimer1_fn+0x2c4>)
1000b6fa:	781b      	ldrb	r3, [r3, #0]
1000b6fc:	2b00      	cmp	r3, #0
1000b6fe:	d000      	beq.n	1000b702 <sms_dualtimer1_fn+0xb6>
1000b700:	e0f2      	b.n	1000b8e8 <sms_dualtimer1_fn+0x29c>
                    //release_sleep_lock();
                    ulp_ready = true;
1000b702:	2201      	movs	r2, #1
1000b704:	4b83      	ldr	r3, [pc, #524]	; (1000b914 <sms_dualtimer1_fn+0x2c8>)
1000b706:	701a      	strb	r2, [r3, #0]
1000b708:	e0ee      	b.n	1000b8e8 <sms_dualtimer1_fn+0x29c>
        }
        
        /* Timer1 mode = STARTUP */
        case TIMER1_MODE_STARTUP:
        {
            timer1_current_mode = TIMER1_MODE_NONE;
1000b70a:	2200      	movs	r2, #0
1000b70c:	4b77      	ldr	r3, [pc, #476]	; (1000b8ec <sms_dualtimer1_fn+0x2a0>)
1000b70e:	701a      	strb	r2, [r3, #0]
            button_instance.previous_state = button_instance.current_state;
1000b710:	4c84      	ldr	r4, [pc, #528]	; (1000b924 <sms_dualtimer1_fn+0x2d8>)
1000b712:	7863      	ldrb	r3, [r4, #1]
1000b714:	7023      	strb	r3, [r4, #0]
            button_instance.current_state = sms_button_get_state();
1000b716:	4b84      	ldr	r3, [pc, #528]	; (1000b928 <sms_dualtimer1_fn+0x2dc>)
1000b718:	4798      	blx	r3
1000b71a:	7060      	strb	r0, [r4, #1]
            sms_monitor_get_states("[sms_dualtimer1_fn]");
1000b71c:	4883      	ldr	r0, [pc, #524]	; (1000b92c <sms_dualtimer1_fn+0x2e0>)
1000b71e:	4b84      	ldr	r3, [pc, #528]	; (1000b930 <sms_dualtimer1_fn+0x2e4>)
1000b720:	4798      	blx	r3
            
            switch(button_instance.previous_state) {
1000b722:	7823      	ldrb	r3, [r4, #0]
1000b724:	2b01      	cmp	r3, #1
1000b726:	d002      	beq.n	1000b72e <sms_dualtimer1_fn+0xe2>
1000b728:	2b02      	cmp	r3, #2
1000b72a:	d04c      	beq.n	1000b7c6 <sms_dualtimer1_fn+0x17a>
1000b72c:	e093      	b.n	1000b856 <sms_dualtimer1_fn+0x20a>
                // --- Timer1 mode = STARTUP: switch prev_state ---
                case BUTTON_STATE_B0:
                switch(button_instance.current_state) {
1000b72e:	4b7d      	ldr	r3, [pc, #500]	; (1000b924 <sms_dualtimer1_fn+0x2d8>)
1000b730:	785b      	ldrb	r3, [r3, #1]
1000b732:	2b01      	cmp	r3, #1
1000b734:	d002      	beq.n	1000b73c <sms_dualtimer1_fn+0xf0>
1000b736:	2b02      	cmp	r3, #2
1000b738:	d023      	beq.n	1000b782 <sms_dualtimer1_fn+0x136>
1000b73a:	e03b      	b.n	1000b7b4 <sms_dualtimer1_fn+0x168>
                    // --- prev_state = b0: switch current_state ---
                    case BUTTON_STATE_B0:
                    if(ble_current_state == BLE_STATE_POWEROFF) {
1000b73c:	4b7d      	ldr	r3, [pc, #500]	; (1000b934 <sms_dualtimer1_fn+0x2e8>)
1000b73e:	781b      	ldrb	r3, [r3, #0]
1000b740:	2b00      	cmp	r3, #0
1000b742:	d115      	bne.n	1000b770 <sms_dualtimer1_fn+0x124>
                        sms_btn_cnt++;
1000b744:	4a7c      	ldr	r2, [pc, #496]	; (1000b938 <sms_dualtimer1_fn+0x2ec>)
1000b746:	7813      	ldrb	r3, [r2, #0]
1000b748:	3301      	adds	r3, #1
1000b74a:	b2db      	uxtb	r3, r3
1000b74c:	7013      	strb	r3, [r2, #0]
                        if(sms_btn_cnt >= SMS_BTN_STARTUP_CNT) {
1000b74e:	2b0f      	cmp	r3, #15
1000b750:	d905      	bls.n	1000b75e <sms_dualtimer1_fn+0x112>
                            timer1_current_mode = TIMER1_MODE_NONE;
1000b752:	2200      	movs	r2, #0
1000b754:	4b65      	ldr	r3, [pc, #404]	; (1000b8ec <sms_dualtimer1_fn+0x2a0>)
1000b756:	701a      	strb	r2, [r3, #0]
                            sms_ble_startup();
1000b758:	4b78      	ldr	r3, [pc, #480]	; (1000b93c <sms_dualtimer1_fn+0x2f0>)
1000b75a:	4798      	blx	r3
1000b75c:	e0c4      	b.n	1000b8e8 <sms_dualtimer1_fn+0x29c>
                        }
                        else {
                            //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                            timer1_current_mode = TIMER1_MODE_STARTUP;
1000b75e:	2201      	movs	r2, #1
1000b760:	4b62      	ldr	r3, [pc, #392]	; (1000b8ec <sms_dualtimer1_fn+0x2a0>)
1000b762:	701a      	strb	r2, [r3, #0]
                            //ulp_ready = false;
                            sms_dualtimer_start(TIMER_UNIT_MS, SMS_BTN_STARTUP_MS, DUALTIMER_TIMER1);
1000b764:	2200      	movs	r2, #0
1000b766:	21fa      	movs	r1, #250	; 0xfa
1000b768:	2001      	movs	r0, #1
1000b76a:	4b6b      	ldr	r3, [pc, #428]	; (1000b918 <sms_dualtimer1_fn+0x2cc>)
1000b76c:	4798      	blx	r3
1000b76e:	e0bb      	b.n	1000b8e8 <sms_dualtimer1_fn+0x29c>
                        }
                    }
                    else {
                        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                        if(timer2_current_mode == TIMER2_MODE_NONE) {
1000b770:	4b67      	ldr	r3, [pc, #412]	; (1000b910 <sms_dualtimer1_fn+0x2c4>)
1000b772:	781b      	ldrb	r3, [r3, #0]
1000b774:	2b00      	cmp	r3, #0
1000b776:	d000      	beq.n	1000b77a <sms_dualtimer1_fn+0x12e>
1000b778:	e0b6      	b.n	1000b8e8 <sms_dualtimer1_fn+0x29c>
                            //release_sleep_lock();
                            ulp_ready = true;
1000b77a:	2201      	movs	r2, #1
1000b77c:	4b65      	ldr	r3, [pc, #404]	; (1000b914 <sms_dualtimer1_fn+0x2c8>)
1000b77e:	701a      	strb	r2, [r3, #0]
1000b780:	e0b2      	b.n	1000b8e8 <sms_dualtimer1_fn+0x29c>
                    }
                    break;
                    
                    // --- prev_state = b0: switch current_state ---
                    case BUTTON_STATE_B1:
                    if(ble_current_state == BLE_STATE_POWEROFF) {
1000b782:	4b6c      	ldr	r3, [pc, #432]	; (1000b934 <sms_dualtimer1_fn+0x2e8>)
1000b784:	781b      	ldrb	r3, [r3, #0]
1000b786:	2b00      	cmp	r3, #0
1000b788:	d10b      	bne.n	1000b7a2 <sms_dualtimer1_fn+0x156>
                        sms_btn_cnt = 0;
1000b78a:	2200      	movs	r2, #0
1000b78c:	4b6a      	ldr	r3, [pc, #424]	; (1000b938 <sms_dualtimer1_fn+0x2ec>)
1000b78e:	701a      	strb	r2, [r3, #0]
                        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                        timer1_current_mode = TIMER1_MODE_STARTUP;
1000b790:	3201      	adds	r2, #1
1000b792:	4b56      	ldr	r3, [pc, #344]	; (1000b8ec <sms_dualtimer1_fn+0x2a0>)
1000b794:	701a      	strb	r2, [r3, #0]
                        //ulp_ready = false;
                        sms_dualtimer_start(TIMER_UNIT_MS, SMS_BLINK_STARTUP_MS, DUALTIMER_TIMER1);
1000b796:	2200      	movs	r2, #0
1000b798:	2164      	movs	r1, #100	; 0x64
1000b79a:	2001      	movs	r0, #1
1000b79c:	4b5e      	ldr	r3, [pc, #376]	; (1000b918 <sms_dualtimer1_fn+0x2cc>)
1000b79e:	4798      	blx	r3
1000b7a0:	e0a2      	b.n	1000b8e8 <sms_dualtimer1_fn+0x29c>
                    }
                    else {
                        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                        if(timer2_current_mode == TIMER2_MODE_NONE) {
1000b7a2:	4b5b      	ldr	r3, [pc, #364]	; (1000b910 <sms_dualtimer1_fn+0x2c4>)
1000b7a4:	781b      	ldrb	r3, [r3, #0]
1000b7a6:	2b00      	cmp	r3, #0
1000b7a8:	d000      	beq.n	1000b7ac <sms_dualtimer1_fn+0x160>
1000b7aa:	e09d      	b.n	1000b8e8 <sms_dualtimer1_fn+0x29c>
                            //release_sleep_lock();
                            ulp_ready = true;
1000b7ac:	2201      	movs	r2, #1
1000b7ae:	4b59      	ldr	r3, [pc, #356]	; (1000b914 <sms_dualtimer1_fn+0x2c8>)
1000b7b0:	701a      	strb	r2, [r3, #0]
1000b7b2:	e099      	b.n	1000b8e8 <sms_dualtimer1_fn+0x29c>
                    // --- prev_state = b0: switch current_state ---
                    case BUTTON_STATE_BOTH:
                    case BUTTON_STATE_NONE:
                    default:
                    //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                    if(timer2_current_mode == TIMER2_MODE_NONE) {
1000b7b4:	4b56      	ldr	r3, [pc, #344]	; (1000b910 <sms_dualtimer1_fn+0x2c4>)
1000b7b6:	781b      	ldrb	r3, [r3, #0]
1000b7b8:	2b00      	cmp	r3, #0
1000b7ba:	d000      	beq.n	1000b7be <sms_dualtimer1_fn+0x172>
1000b7bc:	e094      	b.n	1000b8e8 <sms_dualtimer1_fn+0x29c>
                        //release_sleep_lock();
                        ulp_ready = true;
1000b7be:	2201      	movs	r2, #1
1000b7c0:	4b54      	ldr	r3, [pc, #336]	; (1000b914 <sms_dualtimer1_fn+0x2c8>)
1000b7c2:	701a      	strb	r2, [r3, #0]
1000b7c4:	e090      	b.n	1000b8e8 <sms_dualtimer1_fn+0x29c>
                }
                break;
                
                // --- Timer1 mode = STARTUP: switch prev_state ---
                case BUTTON_STATE_B1:
                switch(button_instance.current_state) {
1000b7c6:	4b57      	ldr	r3, [pc, #348]	; (1000b924 <sms_dualtimer1_fn+0x2d8>)
1000b7c8:	785b      	ldrb	r3, [r3, #1]
1000b7ca:	2b01      	cmp	r3, #1
1000b7cc:	d023      	beq.n	1000b816 <sms_dualtimer1_fn+0x1ca>
1000b7ce:	2b02      	cmp	r3, #2
1000b7d0:	d139      	bne.n	1000b846 <sms_dualtimer1_fn+0x1fa>
                    // --- prev_state = b1: switch current_state ---
                    case BUTTON_STATE_B1:
                    if(ble_current_state == BLE_STATE_POWEROFF) {
1000b7d2:	4b58      	ldr	r3, [pc, #352]	; (1000b934 <sms_dualtimer1_fn+0x2e8>)
1000b7d4:	781b      	ldrb	r3, [r3, #0]
1000b7d6:	2b00      	cmp	r3, #0
1000b7d8:	d115      	bne.n	1000b806 <sms_dualtimer1_fn+0x1ba>
                        sms_btn_cnt++;
1000b7da:	4a57      	ldr	r2, [pc, #348]	; (1000b938 <sms_dualtimer1_fn+0x2ec>)
1000b7dc:	7813      	ldrb	r3, [r2, #0]
1000b7de:	3301      	adds	r3, #1
1000b7e0:	b2db      	uxtb	r3, r3
1000b7e2:	7013      	strb	r3, [r2, #0]
                        if(sms_btn_cnt >= SMS_BTN_STARTUP_CNT) {
1000b7e4:	2b0f      	cmp	r3, #15
1000b7e6:	d905      	bls.n	1000b7f4 <sms_dualtimer1_fn+0x1a8>
                            timer1_current_mode = TIMER1_MODE_NONE;
1000b7e8:	2200      	movs	r2, #0
1000b7ea:	4b40      	ldr	r3, [pc, #256]	; (1000b8ec <sms_dualtimer1_fn+0x2a0>)
1000b7ec:	701a      	strb	r2, [r3, #0]
                            sms_ble_startup();
1000b7ee:	4b53      	ldr	r3, [pc, #332]	; (1000b93c <sms_dualtimer1_fn+0x2f0>)
1000b7f0:	4798      	blx	r3
1000b7f2:	e079      	b.n	1000b8e8 <sms_dualtimer1_fn+0x29c>
                        }
                        else {
                            //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                            timer1_current_mode = TIMER1_MODE_STARTUP;
1000b7f4:	2201      	movs	r2, #1
1000b7f6:	4b3d      	ldr	r3, [pc, #244]	; (1000b8ec <sms_dualtimer1_fn+0x2a0>)
1000b7f8:	701a      	strb	r2, [r3, #0]
                            //ulp_ready = false;
                            sms_dualtimer_start(TIMER_UNIT_MS, SMS_BTN_STARTUP_MS, DUALTIMER_TIMER1);
1000b7fa:	2200      	movs	r2, #0
1000b7fc:	21fa      	movs	r1, #250	; 0xfa
1000b7fe:	2001      	movs	r0, #1
1000b800:	4b45      	ldr	r3, [pc, #276]	; (1000b918 <sms_dualtimer1_fn+0x2cc>)
1000b802:	4798      	blx	r3
1000b804:	e070      	b.n	1000b8e8 <sms_dualtimer1_fn+0x29c>
                        }
                    }
                    else {
                        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                        if(timer2_current_mode == TIMER2_MODE_NONE) {
1000b806:	4b42      	ldr	r3, [pc, #264]	; (1000b910 <sms_dualtimer1_fn+0x2c4>)
1000b808:	781b      	ldrb	r3, [r3, #0]
1000b80a:	2b00      	cmp	r3, #0
1000b80c:	d16c      	bne.n	1000b8e8 <sms_dualtimer1_fn+0x29c>
                            //release_sleep_lock();
                            ulp_ready = true;
1000b80e:	2201      	movs	r2, #1
1000b810:	4b40      	ldr	r3, [pc, #256]	; (1000b914 <sms_dualtimer1_fn+0x2c8>)
1000b812:	701a      	strb	r2, [r3, #0]
1000b814:	e068      	b.n	1000b8e8 <sms_dualtimer1_fn+0x29c>
                    }
                    break;
                    
                    // --- prev_state = b1: switch current_state ---
                    case BUTTON_STATE_B0:
                    if(ble_current_state == BLE_STATE_POWEROFF) {
1000b816:	4b47      	ldr	r3, [pc, #284]	; (1000b934 <sms_dualtimer1_fn+0x2e8>)
1000b818:	781b      	ldrb	r3, [r3, #0]
1000b81a:	2b00      	cmp	r3, #0
1000b81c:	d10b      	bne.n	1000b836 <sms_dualtimer1_fn+0x1ea>
                        sms_btn_cnt = 0;
1000b81e:	2200      	movs	r2, #0
1000b820:	4b45      	ldr	r3, [pc, #276]	; (1000b938 <sms_dualtimer1_fn+0x2ec>)
1000b822:	701a      	strb	r2, [r3, #0]
                        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                        timer1_current_mode = TIMER1_MODE_STARTUP;
1000b824:	3201      	adds	r2, #1
1000b826:	4b31      	ldr	r3, [pc, #196]	; (1000b8ec <sms_dualtimer1_fn+0x2a0>)
1000b828:	701a      	strb	r2, [r3, #0]
                        //ulp_ready = false;
                        sms_dualtimer_start(TIMER_UNIT_MS, SMS_BLINK_STARTUP_MS, DUALTIMER_TIMER1);
1000b82a:	2200      	movs	r2, #0
1000b82c:	2164      	movs	r1, #100	; 0x64
1000b82e:	2001      	movs	r0, #1
1000b830:	4b39      	ldr	r3, [pc, #228]	; (1000b918 <sms_dualtimer1_fn+0x2cc>)
1000b832:	4798      	blx	r3
1000b834:	e058      	b.n	1000b8e8 <sms_dualtimer1_fn+0x29c>
                    }
                    else {
                        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                        if(timer2_current_mode == TIMER2_MODE_NONE) {
1000b836:	4b36      	ldr	r3, [pc, #216]	; (1000b910 <sms_dualtimer1_fn+0x2c4>)
1000b838:	781b      	ldrb	r3, [r3, #0]
1000b83a:	2b00      	cmp	r3, #0
1000b83c:	d154      	bne.n	1000b8e8 <sms_dualtimer1_fn+0x29c>
                            //release_sleep_lock();
                            ulp_ready = true;
1000b83e:	2201      	movs	r2, #1
1000b840:	4b34      	ldr	r3, [pc, #208]	; (1000b914 <sms_dualtimer1_fn+0x2c8>)
1000b842:	701a      	strb	r2, [r3, #0]
1000b844:	e050      	b.n	1000b8e8 <sms_dualtimer1_fn+0x29c>
                    // --- prev_state = b1: switch current_state ---
                    case BUTTON_STATE_NONE:
                    case BUTTON_STATE_BOTH:
                    default:
                    //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                    if(timer2_current_mode == TIMER2_MODE_NONE) {
1000b846:	4b32      	ldr	r3, [pc, #200]	; (1000b910 <sms_dualtimer1_fn+0x2c4>)
1000b848:	781b      	ldrb	r3, [r3, #0]
1000b84a:	2b00      	cmp	r3, #0
1000b84c:	d14c      	bne.n	1000b8e8 <sms_dualtimer1_fn+0x29c>
                        //release_sleep_lock();
                        ulp_ready = true;
1000b84e:	2201      	movs	r2, #1
1000b850:	4b30      	ldr	r3, [pc, #192]	; (1000b914 <sms_dualtimer1_fn+0x2c8>)
1000b852:	701a      	strb	r2, [r3, #0]
1000b854:	e048      	b.n	1000b8e8 <sms_dualtimer1_fn+0x29c>
                case BUTTON_STATE_NONE:
                case BUTTON_STATE_BOTH:
                default:
                {
                    //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                    if(timer2_current_mode == TIMER2_MODE_NONE) {
1000b856:	4b2e      	ldr	r3, [pc, #184]	; (1000b910 <sms_dualtimer1_fn+0x2c4>)
1000b858:	781b      	ldrb	r3, [r3, #0]
1000b85a:	2b00      	cmp	r3, #0
1000b85c:	d144      	bne.n	1000b8e8 <sms_dualtimer1_fn+0x29c>
                        //release_sleep_lock();
                        ulp_ready = true;
1000b85e:	2201      	movs	r2, #1
1000b860:	4b2c      	ldr	r3, [pc, #176]	; (1000b914 <sms_dualtimer1_fn+0x2c8>)
1000b862:	701a      	strb	r2, [r3, #0]
1000b864:	e040      	b.n	1000b8e8 <sms_dualtimer1_fn+0x29c>
        
        /* Timer1 mode = SHUTDOWN */
        case TIMER1_MODE_SHUTDOWN:
        {
            //timer1_current_mode = TIMER1_MODE_NONE;
            button_instance.previous_state = button_instance.current_state;
1000b866:	4c2f      	ldr	r4, [pc, #188]	; (1000b924 <sms_dualtimer1_fn+0x2d8>)
1000b868:	7863      	ldrb	r3, [r4, #1]
1000b86a:	7023      	strb	r3, [r4, #0]
            button_instance.current_state = sms_button_get_state();
1000b86c:	4b2e      	ldr	r3, [pc, #184]	; (1000b928 <sms_dualtimer1_fn+0x2dc>)
1000b86e:	4798      	blx	r3
1000b870:	7060      	strb	r0, [r4, #1]
            sms_monitor_get_states("[sms_dualtimer1_fn]");
1000b872:	482e      	ldr	r0, [pc, #184]	; (1000b92c <sms_dualtimer1_fn+0x2e0>)
1000b874:	4b2e      	ldr	r3, [pc, #184]	; (1000b930 <sms_dualtimer1_fn+0x2e4>)
1000b876:	4798      	blx	r3
            
            if((button_instance.previous_state == BUTTON_STATE_BOTH) && (button_instance.current_state == BUTTON_STATE_BOTH)) {
1000b878:	8822      	ldrh	r2, [r4, #0]
1000b87a:	4b31      	ldr	r3, [pc, #196]	; (1000b940 <sms_dualtimer1_fn+0x2f4>)
1000b87c:	429a      	cmp	r2, r3
1000b87e:	d112      	bne.n	1000b8a6 <sms_dualtimer1_fn+0x25a>
                sms_btn_cnt++;
1000b880:	4a2d      	ldr	r2, [pc, #180]	; (1000b938 <sms_dualtimer1_fn+0x2ec>)
1000b882:	7813      	ldrb	r3, [r2, #0]
1000b884:	3301      	adds	r3, #1
1000b886:	b2db      	uxtb	r3, r3
1000b888:	7013      	strb	r3, [r2, #0]
                if(sms_btn_cnt >= SMS_BTN_SHTDWN_CNT) {
1000b88a:	2b09      	cmp	r3, #9
1000b88c:	d902      	bls.n	1000b894 <sms_dualtimer1_fn+0x248>
                    sms_ble_power_down();
1000b88e:	4b2d      	ldr	r3, [pc, #180]	; (1000b944 <sms_dualtimer1_fn+0x2f8>)
1000b890:	4798      	blx	r3
1000b892:	e029      	b.n	1000b8e8 <sms_dualtimer1_fn+0x29c>
                }
                else {
                    //sms_sensors_toggle_interrupt(SMS_EXTINT_DISABLE);
                    timer1_current_mode = TIMER1_MODE_SHUTDOWN;
1000b894:	2203      	movs	r2, #3
1000b896:	4b15      	ldr	r3, [pc, #84]	; (1000b8ec <sms_dualtimer1_fn+0x2a0>)
1000b898:	701a      	strb	r2, [r3, #0]
                    sms_dualtimer_start(TIMER_UNIT_MS, SMS_BTN_SHTDWN_MS, DUALTIMER_TIMER1);
1000b89a:	2200      	movs	r2, #0
1000b89c:	21fa      	movs	r1, #250	; 0xfa
1000b89e:	2001      	movs	r0, #1
1000b8a0:	4b1d      	ldr	r3, [pc, #116]	; (1000b918 <sms_dualtimer1_fn+0x2cc>)
1000b8a2:	4798      	blx	r3
1000b8a4:	e020      	b.n	1000b8e8 <sms_dualtimer1_fn+0x29c>
                }
            }
            else {
                if(pressure_device.state == PRESSURE_STATE_STDBY) {
1000b8a6:	2328      	movs	r3, #40	; 0x28
1000b8a8:	4a11      	ldr	r2, [pc, #68]	; (1000b8f0 <sms_dualtimer1_fn+0x2a4>)
1000b8aa:	5cd3      	ldrb	r3, [r2, r3]
1000b8ac:	2b01      	cmp	r3, #1
1000b8ae:	d109      	bne.n	1000b8c4 <sms_dualtimer1_fn+0x278>
                    DBG_LOG_DEV("[sms_dualtimer1_fn]\t\tStarting sensors (shutting down)...");
1000b8b0:	4811      	ldr	r0, [pc, #68]	; (1000b8f8 <sms_dualtimer1_fn+0x2ac>)
1000b8b2:	4b12      	ldr	r3, [pc, #72]	; (1000b8fc <sms_dualtimer1_fn+0x2b0>)
1000b8b4:	4798      	blx	r3
1000b8b6:	4824      	ldr	r0, [pc, #144]	; (1000b948 <sms_dualtimer1_fn+0x2fc>)
1000b8b8:	4b12      	ldr	r3, [pc, #72]	; (1000b904 <sms_dualtimer1_fn+0x2b8>)
1000b8ba:	4798      	blx	r3
                    sms_sensors_interrupt_toggle(false, true);
1000b8bc:	2101      	movs	r1, #1
1000b8be:	2000      	movs	r0, #0
1000b8c0:	4b17      	ldr	r3, [pc, #92]	; (1000b920 <sms_dualtimer1_fn+0x2d4>)
1000b8c2:	4798      	blx	r3
                }                    
                timer1_current_mode = TIMER1_MODE_NONE;
1000b8c4:	2200      	movs	r2, #0
1000b8c6:	4b09      	ldr	r3, [pc, #36]	; (1000b8ec <sms_dualtimer1_fn+0x2a0>)
1000b8c8:	701a      	strb	r2, [r3, #0]
                if(timer2_current_mode == TIMER2_MODE_NONE) {
1000b8ca:	4b11      	ldr	r3, [pc, #68]	; (1000b910 <sms_dualtimer1_fn+0x2c4>)
1000b8cc:	781b      	ldrb	r3, [r3, #0]
1000b8ce:	2b00      	cmp	r3, #0
1000b8d0:	d10a      	bne.n	1000b8e8 <sms_dualtimer1_fn+0x29c>
                    ulp_ready = true;
1000b8d2:	3201      	adds	r2, #1
1000b8d4:	4b0f      	ldr	r3, [pc, #60]	; (1000b914 <sms_dualtimer1_fn+0x2c8>)
1000b8d6:	701a      	strb	r2, [r3, #0]
1000b8d8:	e006      	b.n	1000b8e8 <sms_dualtimer1_fn+0x29c>
        }
        
        case TIMER1_MODE_NONE:
        default:
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
        if(timer2_current_mode == TIMER2_MODE_NONE) {
1000b8da:	4b0d      	ldr	r3, [pc, #52]	; (1000b910 <sms_dualtimer1_fn+0x2c4>)
1000b8dc:	781b      	ldrb	r3, [r3, #0]
1000b8de:	2b00      	cmp	r3, #0
1000b8e0:	d102      	bne.n	1000b8e8 <sms_dualtimer1_fn+0x29c>
            //release_sleep_lock();
            ulp_ready = true;
1000b8e2:	2201      	movs	r2, #1
1000b8e4:	4b0b      	ldr	r3, [pc, #44]	; (1000b914 <sms_dualtimer1_fn+0x2c8>)
1000b8e6:	701a      	strb	r2, [r3, #0]
        }            
        break;
    } // switch(timer1_current_mode)
}
1000b8e8:	bd10      	pop	{r4, pc}
1000b8ea:	46c0      	nop			; (mov r8, r8)
1000b8ec:	1001a184 	.word	0x1001a184
1000b8f0:	1001a294 	.word	0x1001a294
1000b8f4:	1000b175 	.word	0x1000b175
1000b8f8:	1001663c 	.word	0x1001663c
1000b8fc:	10015495 	.word	0x10015495
1000b900:	10017218 	.word	0x10017218
1000b904:	10015375 	.word	0x10015375
1000b908:	10017248 	.word	0x10017248
1000b90c:	1001a218 	.word	0x1001a218
1000b910:	1001a331 	.word	0x1001a331
1000b914:	1001a219 	.word	0x1001a219
1000b918:	1000b5a1 	.word	0x1000b5a1
1000b91c:	100172a0 	.word	0x100172a0
1000b920:	1000aa35 	.word	0x1000aa35
1000b924:	1001a220 	.word	0x1001a220
1000b928:	1000a645 	.word	0x1000a645
1000b92c:	100172d8 	.word	0x100172d8
1000b930:	1000a9d9 	.word	0x1000a9d9
1000b934:	1001a330 	.word	0x1001a330
1000b938:	1001a34e 	.word	0x1001a34e
1000b93c:	10009f01 	.word	0x10009f01
1000b940:	00000303 	.word	0x00000303
1000b944:	10009f19 	.word	0x10009f19
1000b948:	100172ec 	.word	0x100172ec

1000b94c <sms_dualtimer2_fn>:

void sms_dualtimer2_fn(void)
{
1000b94c:	b510      	push	{r4, lr}
    //sms_button_toggle_interrupt(SMS_BTN_INT_DISABLE, SMS_BTN_INT_DISABLE);
    sms_monitor_get_states("[sms_dualtimer2_fn]");
1000b94e:	4846      	ldr	r0, [pc, #280]	; (1000ba68 <sms_dualtimer2_fn+0x11c>)
1000b950:	4b46      	ldr	r3, [pc, #280]	; (1000ba6c <sms_dualtimer2_fn+0x120>)
1000b952:	4798      	blx	r3
    switch(timer2_current_mode) {
1000b954:	4b46      	ldr	r3, [pc, #280]	; (1000ba70 <sms_dualtimer2_fn+0x124>)
1000b956:	781b      	ldrb	r3, [r3, #0]
1000b958:	b2db      	uxtb	r3, r3
1000b95a:	2b02      	cmp	r3, #2
1000b95c:	d02f      	beq.n	1000b9be <sms_dualtimer2_fn+0x72>
1000b95e:	2b03      	cmp	r3, #3
1000b960:	d054      	beq.n	1000ba0c <sms_dualtimer2_fn+0xc0>
1000b962:	2b01      	cmp	r3, #1
1000b964:	d17f      	bne.n	1000ba66 <sms_dualtimer2_fn+0x11a>
        case TIMER2_MODE_INDICATION_TOUT:
        timer2_current_mode = TIMER2_MODE_NONE;
1000b966:	2200      	movs	r2, #0
1000b968:	4b41      	ldr	r3, [pc, #260]	; (1000ba70 <sms_dualtimer2_fn+0x124>)
1000b96a:	701a      	strb	r2, [r3, #0]
        if(ble_current_state == BLE_STATE_PAIRED) {
1000b96c:	4b41      	ldr	r3, [pc, #260]	; (1000ba74 <sms_dualtimer2_fn+0x128>)
1000b96e:	781b      	ldrb	r3, [r3, #0]
1000b970:	2b22      	cmp	r3, #34	; 0x22
1000b972:	d107      	bne.n	1000b984 <sms_dualtimer2_fn+0x38>
            //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
            if(timer1_current_mode == TIMER1_MODE_NONE) {
1000b974:	4b40      	ldr	r3, [pc, #256]	; (1000ba78 <sms_dualtimer2_fn+0x12c>)
1000b976:	781b      	ldrb	r3, [r3, #0]
1000b978:	2b00      	cmp	r3, #0
1000b97a:	d174      	bne.n	1000ba66 <sms_dualtimer2_fn+0x11a>
                //release_sleep_lock();
                ulp_ready = true;
1000b97c:	3201      	adds	r2, #1
1000b97e:	4b3f      	ldr	r3, [pc, #252]	; (1000ba7c <sms_dualtimer2_fn+0x130>)
1000b980:	701a      	strb	r2, [r3, #0]
1000b982:	e070      	b.n	1000ba66 <sms_dualtimer2_fn+0x11a>
            }                
        }
        else {
            sms_ble_ind_retry++;
1000b984:	4a3e      	ldr	r2, [pc, #248]	; (1000ba80 <sms_dualtimer2_fn+0x134>)
1000b986:	7813      	ldrb	r3, [r2, #0]
1000b988:	3301      	adds	r3, #1
1000b98a:	b2db      	uxtb	r3, r3
1000b98c:	7013      	strb	r3, [r2, #0]
            if(sms_ble_ind_retry >= BLE_INDICATION_RETRY_MAX) {
1000b98e:	2b00      	cmp	r3, #0
1000b990:	d009      	beq.n	1000b9a6 <sms_dualtimer2_fn+0x5a>
                DBG_LOG_CONT_DEV(" ...giving up!");
1000b992:	483c      	ldr	r0, [pc, #240]	; (1000ba84 <sms_dualtimer2_fn+0x138>)
1000b994:	4b3c      	ldr	r3, [pc, #240]	; (1000ba88 <sms_dualtimer2_fn+0x13c>)
1000b996:	4798      	blx	r3
                //DBG_LOG_DEV("[sms_dualtimer2_fn]\tTimer1 mode: %d", timer1_current_mode);
                timer2_current_mode = TIMER2_MODE_NONE;
1000b998:	2200      	movs	r2, #0
1000b99a:	4b35      	ldr	r3, [pc, #212]	; (1000ba70 <sms_dualtimer2_fn+0x124>)
1000b99c:	701a      	strb	r2, [r3, #0]
                ble_current_state = BLE_STATE_PAIRED;
1000b99e:	3222      	adds	r2, #34	; 0x22
1000b9a0:	4b34      	ldr	r3, [pc, #208]	; (1000ba74 <sms_dualtimer2_fn+0x128>)
1000b9a2:	701a      	strb	r2, [r3, #0]
1000b9a4:	e05f      	b.n	1000ba66 <sms_dualtimer2_fn+0x11a>
                //DBG_LOG_DEV("[sms_dualtimer2_fn]\t\tStarting sensors...");
                //sms_sensors_toggle_interrupt(SMS_EXTINT_ENABLE);
                //if(timer1_current_mode == TIMER1_MODE_NONE) release_sleep_lock();
            }
            else {
                DBG_LOG_CONT_DEV(" ...waiting... counter: %d", sms_ble_ind_retry);
1000b9a6:	2100      	movs	r1, #0
1000b9a8:	4838      	ldr	r0, [pc, #224]	; (1000ba8c <sms_dualtimer2_fn+0x140>)
1000b9aa:	4b37      	ldr	r3, [pc, #220]	; (1000ba88 <sms_dualtimer2_fn+0x13c>)
1000b9ac:	4798      	blx	r3
                //sms_ble_send_characteristic(BLE_CHAR_PRESSURE);
                timer2_current_mode = TIMER2_MODE_INDICATION_TOUT;
1000b9ae:	2201      	movs	r2, #1
1000b9b0:	4b2f      	ldr	r3, [pc, #188]	; (1000ba70 <sms_dualtimer2_fn+0x124>)
1000b9b2:	701a      	strb	r2, [r3, #0]
                //ulp_ready = false;
                sms_dualtimer_start(TIMER_UNIT_MS, BLE_INDICATION_TOUT_MS, DUALTIMER_TIMER2);
1000b9b4:	2164      	movs	r1, #100	; 0x64
1000b9b6:	2001      	movs	r0, #1
1000b9b8:	4b35      	ldr	r3, [pc, #212]	; (1000ba90 <sms_dualtimer2_fn+0x144>)
1000b9ba:	4798      	blx	r3
1000b9bc:	e053      	b.n	1000ba66 <sms_dualtimer2_fn+0x11a>
            }
        }
        break;
        
        case TIMER2_MODE_LED_STARTUP:
        DBG_LOG_DEV("[sms_dualtimer2_fn]\t\tBlinking startup...");
1000b9be:	4835      	ldr	r0, [pc, #212]	; (1000ba94 <sms_dualtimer2_fn+0x148>)
1000b9c0:	4b35      	ldr	r3, [pc, #212]	; (1000ba98 <sms_dualtimer2_fn+0x14c>)
1000b9c2:	4798      	blx	r3
1000b9c4:	4835      	ldr	r0, [pc, #212]	; (1000ba9c <sms_dualtimer2_fn+0x150>)
1000b9c6:	4b30      	ldr	r3, [pc, #192]	; (1000ba88 <sms_dualtimer2_fn+0x13c>)
1000b9c8:	4798      	blx	r3
        timer2_current_mode = TIMER2_MODE_NONE;
1000b9ca:	2200      	movs	r2, #0
1000b9cc:	4b28      	ldr	r3, [pc, #160]	; (1000ba70 <sms_dualtimer2_fn+0x124>)
1000b9ce:	701a      	strb	r2, [r3, #0]
        sms_led_blink_cnt++;
1000b9d0:	4a33      	ldr	r2, [pc, #204]	; (1000baa0 <sms_dualtimer2_fn+0x154>)
1000b9d2:	7813      	ldrb	r3, [r2, #0]
1000b9d4:	3301      	adds	r3, #1
1000b9d6:	b2db      	uxtb	r3, r3
1000b9d8:	7013      	strb	r3, [r2, #0]
        if(sms_led_blink_cnt >= SMS_BLINK_STARTUP_CNT) {
1000b9da:	7813      	ldrb	r3, [r2, #0]
1000b9dc:	b2db      	uxtb	r3, r3
1000b9de:	2b07      	cmp	r3, #7
1000b9e0:	d908      	bls.n	1000b9f4 <sms_dualtimer2_fn+0xa8>
            sms_led_switch_off(SMS_LED_0_PIN);
1000b9e2:	2016      	movs	r0, #22
1000b9e4:	4b2f      	ldr	r3, [pc, #188]	; (1000baa4 <sms_dualtimer2_fn+0x158>)
1000b9e6:	4798      	blx	r3
            //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
            /* Blinking done... starting ble advertisement */
            //DBG_LOG_DEV("[sms_dualtimer2_fn]\tSMS awake... starting advertisement");
            sms_ble_advertise();
1000b9e8:	4b2f      	ldr	r3, [pc, #188]	; (1000baa8 <sms_dualtimer2_fn+0x15c>)
1000b9ea:	4798      	blx	r3
            ulp_ready = true;
1000b9ec:	2201      	movs	r2, #1
1000b9ee:	4b23      	ldr	r3, [pc, #140]	; (1000ba7c <sms_dualtimer2_fn+0x130>)
1000b9f0:	701a      	strb	r2, [r3, #0]
1000b9f2:	e038      	b.n	1000ba66 <sms_dualtimer2_fn+0x11a>
        }
        else {
            //DBG_LOG_DEV("[sms_dualtimer2_fn]\tBlinking up... cnt = %d", sms_led_blink_cnt);
            sms_led_toggle(SMS_LED_0_PIN);
1000b9f4:	2016      	movs	r0, #22
1000b9f6:	4b2d      	ldr	r3, [pc, #180]	; (1000baac <sms_dualtimer2_fn+0x160>)
1000b9f8:	4798      	blx	r3
            timer2_current_mode = TIMER2_MODE_LED_STARTUP;
1000b9fa:	2202      	movs	r2, #2
1000b9fc:	4b1c      	ldr	r3, [pc, #112]	; (1000ba70 <sms_dualtimer2_fn+0x124>)
1000b9fe:	701a      	strb	r2, [r3, #0]
            //ulp_ready = false;
            sms_dualtimer_start(TIMER_UNIT_MS, SMS_BLINK_STARTUP_MS, DUALTIMER_TIMER2);
1000ba00:	3a01      	subs	r2, #1
1000ba02:	2164      	movs	r1, #100	; 0x64
1000ba04:	2001      	movs	r0, #1
1000ba06:	4b22      	ldr	r3, [pc, #136]	; (1000ba90 <sms_dualtimer2_fn+0x144>)
1000ba08:	4798      	blx	r3
1000ba0a:	e02c      	b.n	1000ba66 <sms_dualtimer2_fn+0x11a>
        }
        break;
        
        case TIMER2_MODE_LED_SHUTDOWN:
        DBG_LOG_DEV("[sms_dualtimer2_fn]\t\tBlinking shutdown...");
1000ba0c:	4821      	ldr	r0, [pc, #132]	; (1000ba94 <sms_dualtimer2_fn+0x148>)
1000ba0e:	4b22      	ldr	r3, [pc, #136]	; (1000ba98 <sms_dualtimer2_fn+0x14c>)
1000ba10:	4798      	blx	r3
1000ba12:	4827      	ldr	r0, [pc, #156]	; (1000bab0 <sms_dualtimer2_fn+0x164>)
1000ba14:	4b1c      	ldr	r3, [pc, #112]	; (1000ba88 <sms_dualtimer2_fn+0x13c>)
1000ba16:	4798      	blx	r3
        timer2_current_mode = TIMER2_MODE_NONE;
1000ba18:	2200      	movs	r2, #0
1000ba1a:	4b15      	ldr	r3, [pc, #84]	; (1000ba70 <sms_dualtimer2_fn+0x124>)
1000ba1c:	701a      	strb	r2, [r3, #0]
        sms_led_blink_cnt++;
1000ba1e:	4a20      	ldr	r2, [pc, #128]	; (1000baa0 <sms_dualtimer2_fn+0x154>)
1000ba20:	7813      	ldrb	r3, [r2, #0]
1000ba22:	3301      	adds	r3, #1
1000ba24:	b2db      	uxtb	r3, r3
1000ba26:	7013      	strb	r3, [r2, #0]
        if(sms_led_blink_cnt >= SMS_BLINK_SHTDWN_CNT) {
1000ba28:	7813      	ldrb	r3, [r2, #0]
1000ba2a:	b2db      	uxtb	r3, r3
1000ba2c:	2b03      	cmp	r3, #3
1000ba2e:	d90e      	bls.n	1000ba4e <sms_dualtimer2_fn+0x102>
            sms_led_switch_off(SMS_LED_0_PIN);
1000ba30:	2016      	movs	r0, #22
1000ba32:	4b1c      	ldr	r3, [pc, #112]	; (1000baa4 <sms_dualtimer2_fn+0x158>)
1000ba34:	4798      	blx	r3
            DBG_LOG_DEV("[sms_dualtimer2_fn]\t\tPowering off...");
1000ba36:	4817      	ldr	r0, [pc, #92]	; (1000ba94 <sms_dualtimer2_fn+0x148>)
1000ba38:	4b17      	ldr	r3, [pc, #92]	; (1000ba98 <sms_dualtimer2_fn+0x14c>)
1000ba3a:	4798      	blx	r3
1000ba3c:	481d      	ldr	r0, [pc, #116]	; (1000bab4 <sms_dualtimer2_fn+0x168>)
1000ba3e:	4b12      	ldr	r3, [pc, #72]	; (1000ba88 <sms_dualtimer2_fn+0x13c>)
1000ba40:	4798      	blx	r3
            //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
            sms_init_variables();
1000ba42:	4b1d      	ldr	r3, [pc, #116]	; (1000bab8 <sms_dualtimer2_fn+0x16c>)
1000ba44:	4798      	blx	r3
            ulp_ready = true;
1000ba46:	2201      	movs	r2, #1
1000ba48:	4b0c      	ldr	r3, [pc, #48]	; (1000ba7c <sms_dualtimer2_fn+0x130>)
1000ba4a:	701a      	strb	r2, [r3, #0]
1000ba4c:	e00b      	b.n	1000ba66 <sms_dualtimer2_fn+0x11a>
            //release_sleep_lock();
        }
        else {
            //DBG_LOG_DEV("[sms_dualtimer2_fn]\tBLinking off... cnt = %d", sms_led_blink_cnt);
            sms_led_toggle(SMS_LED_0_PIN);
1000ba4e:	2016      	movs	r0, #22
1000ba50:	4b16      	ldr	r3, [pc, #88]	; (1000baac <sms_dualtimer2_fn+0x160>)
1000ba52:	4798      	blx	r3
            timer2_current_mode = TIMER2_MODE_LED_SHUTDOWN;
1000ba54:	2203      	movs	r2, #3
1000ba56:	4b06      	ldr	r3, [pc, #24]	; (1000ba70 <sms_dualtimer2_fn+0x124>)
1000ba58:	701a      	strb	r2, [r3, #0]
            //ulp_ready = false;
            sms_dualtimer_start(TIMER_UNIT_MS, SMS_BLINK_SHTDWN_MS, DUALTIMER_TIMER2);
1000ba5a:	3a02      	subs	r2, #2
1000ba5c:	21c8      	movs	r1, #200	; 0xc8
1000ba5e:	0049      	lsls	r1, r1, #1
1000ba60:	2001      	movs	r0, #1
1000ba62:	4b0b      	ldr	r3, [pc, #44]	; (1000ba90 <sms_dualtimer2_fn+0x144>)
1000ba64:	4798      	blx	r3
        case TIMER2_MODE_LED_CONNECTION_LOST:
        case TIMER2_MODE_NONE:
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
        break;
    }
1000ba66:	bd10      	pop	{r4, pc}
1000ba68:	10017328 	.word	0x10017328
1000ba6c:	1000a9d9 	.word	0x1000a9d9
1000ba70:	1001a331 	.word	0x1001a331
1000ba74:	1001a330 	.word	0x1001a330
1000ba78:	1001a184 	.word	0x1001a184
1000ba7c:	1001a219 	.word	0x1001a219
1000ba80:	1001a325 	.word	0x1001a325
1000ba84:	1001733c 	.word	0x1001733c
1000ba88:	10015375 	.word	0x10015375
1000ba8c:	1001734c 	.word	0x1001734c
1000ba90:	1000b5a1 	.word	0x1000b5a1
1000ba94:	1001663c 	.word	0x1001663c
1000ba98:	10015495 	.word	0x10015495
1000ba9c:	10017368 	.word	0x10017368
1000baa0:	1001a354 	.word	0x1001a354
1000baa4:	1000af1d 	.word	0x1000af1d
1000baa8:	1000a0d9 	.word	0x1000a0d9
1000baac:	1000af7d 	.word	0x1000af7d
1000bab0:	10017394 	.word	0x10017394
1000bab4:	100173c0 	.word	0x100173c0
1000bab8:	1000f8d1 	.word	0x1000f8d1

1000babc <spi_slave_inst_get_config_defaults>:
void spi_slave_inst_get_config_defaults(
		struct spi_slave_inst_config *const config)
{
	Assert(config);

	config->ss_pin          = PIN_LP_GPIO_12;
1000babc:	230c      	movs	r3, #12
1000babe:	7003      	strb	r3, [r0, #0]
	config->address_enabled = false;
1000bac0:	2300      	movs	r3, #0
1000bac2:	7043      	strb	r3, [r0, #1]
	config->address         = 0;
1000bac4:	7083      	strb	r3, [r0, #2]
}
1000bac6:	4770      	bx	lr

1000bac8 <spi_get_config_defaults>:
void spi_get_config_defaults(
		struct spi_config *const config)
{
	Assert(config);

	config->mode             = SPI_MODE_MASTER;
1000bac8:	2301      	movs	r3, #1
1000baca:	7003      	strb	r3, [r0, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
1000bacc:	2300      	movs	r3, #0
1000bace:	7043      	strb	r3, [r0, #1]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
1000bad0:	7083      	strb	r3, [r0, #2]
	config->clock_source     = SPI_CLK_INPUT_0;
1000bad2:	70c3      	strb	r3, [r0, #3]
	config->clock_divider    = 129;
1000bad4:	3381      	adds	r3, #129	; 0x81
1000bad6:	7103      	strb	r3, [r0, #4]

	config->pin_number_pad[0] = PIN_LP_GPIO_10;
1000bad8:	3b77      	subs	r3, #119	; 0x77
1000bada:	6083      	str	r3, [r0, #8]
	config->pin_number_pad[1] = PIN_LP_GPIO_11;
1000badc:	3301      	adds	r3, #1
1000bade:	60c3      	str	r3, [r0, #12]
	config->pin_number_pad[2] = PIN_LP_GPIO_12;
1000bae0:	3301      	adds	r3, #1
1000bae2:	6103      	str	r3, [r0, #16]
	config->pin_number_pad[3] = PIN_LP_GPIO_13;
1000bae4:	3301      	adds	r3, #1
1000bae6:	6143      	str	r3, [r0, #20]

	config->pinmux_sel_pad[0] = MUX_LP_GPIO_10_SPI0_SCK;
1000bae8:	3b0b      	subs	r3, #11
1000baea:	6183      	str	r3, [r0, #24]
	config->pinmux_sel_pad[1] = MUX_LP_GPIO_11_SPI0_MOSI;
1000baec:	61c3      	str	r3, [r0, #28]
	config->pinmux_sel_pad[2] = MUX_LP_GPIO_12_SPI0_SSN;
1000baee:	6203      	str	r3, [r0, #32]
	config->pinmux_sel_pad[3] = MUX_LP_GPIO_13_SPI0_MISO;
1000baf0:	6243      	str	r3, [r0, #36]	; 0x24
};
1000baf2:	4770      	bx	lr

1000baf4 <spi_attach_slave>:
 *
 */
void spi_attach_slave(
		struct spi_slave_inst *const slave,
		struct spi_slave_inst_config *const config)
{
1000baf4:	b530      	push	{r4, r5, lr}
1000baf6:	b083      	sub	sp, #12
1000baf8:	0004      	movs	r4, r0
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
1000bafa:	780b      	ldrb	r3, [r1, #0]
1000bafc:	7003      	strb	r3, [r0, #0]
	slave->address_enabled = config->address_enabled;
1000bafe:	784b      	ldrb	r3, [r1, #1]
1000bb00:	7043      	strb	r3, [r0, #1]
	slave->address         = config->address;
1000bb02:	788b      	ldrb	r3, [r1, #2]
1000bb04:	7083      	strb	r3, [r0, #2]

	struct gpio_config config_gpio;
	gpio_get_config_defaults(&config_gpio);
1000bb06:	ad01      	add	r5, sp, #4
1000bb08:	0028      	movs	r0, r5
1000bb0a:	4b07      	ldr	r3, [pc, #28]	; (1000bb28 <spi_attach_slave+0x34>)
1000bb0c:	4798      	blx	r3
	config_gpio.direction = GPIO_PIN_DIR_OUTPUT;
1000bb0e:	2301      	movs	r3, #1
1000bb10:	702b      	strb	r3, [r5, #0]
	gpio_pin_set_config(slave->ss_pin, &config_gpio);
1000bb12:	7820      	ldrb	r0, [r4, #0]
1000bb14:	0029      	movs	r1, r5
1000bb16:	4b05      	ldr	r3, [pc, #20]	; (1000bb2c <spi_attach_slave+0x38>)
1000bb18:	4798      	blx	r3

	gpio_pin_set_output_level(slave->ss_pin, true);
1000bb1a:	7820      	ldrb	r0, [r4, #0]
1000bb1c:	2101      	movs	r1, #1
1000bb1e:	4b04      	ldr	r3, [pc, #16]	; (1000bb30 <spi_attach_slave+0x3c>)
1000bb20:	4798      	blx	r3
}
1000bb22:	b003      	add	sp, #12
1000bb24:	bd30      	pop	{r4, r5, pc}
1000bb26:	46c0      	nop			; (mov r8, r8)
1000bb28:	1000c111 	.word	0x1000c111
1000bb2c:	1000c121 	.word	0x1000c121
1000bb30:	1000c379 	.word	0x1000c379

1000bb34 <spi_enable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void spi_enable(struct spi_module *const module)
{
	Spi *const spi_module = (module->hw);
1000bb34:	6803      	ldr	r3, [r0, #0]
		NVIC_EnableIRQ(SPI1_TX_IRQn);
	}
#endif

	/* Enable SPI */
	spi_module->SPI_MODULE_ENABLE.reg = SPI_MODULE_ENABLE_ENABLE;
1000bb36:	2201      	movs	r2, #1
1000bb38:	761a      	strb	r2, [r3, #24]
}
1000bb3a:	4770      	bx	lr

1000bb3c <spi_disable>:
 * This function will disable the SPI module.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void spi_disable(struct spi_module *const module)
{
1000bb3c:	b510      	push	{r4, lr}
		NVIC_DisableIRQ(SPI1_TX_IRQn);
	}
#  endif

	/* Disable SPI */
	spi_module->SPI_MODULE_ENABLE.reg = (0x0ul << SPI_MODULE_ENABLE_ENABLE_Pos);
1000bb3e:	2300      	movs	r3, #0
1000bb40:	6802      	ldr	r2, [r0, #0]
1000bb42:	7613      	strb	r3, [r2, #24]
 */
static void _spi_clock_disable(struct spi_module *const module)
{
	Assert(module);

	Spi *const spi_module = (module->hw);
1000bb44:	6803      	ldr	r3, [r0, #0]

	if (spi_module == (void *)SPI0) {
1000bb46:	4a0d      	ldr	r2, [pc, #52]	; (1000bb7c <spi_disable+0x40>)
1000bb48:	4293      	cmp	r3, r2
1000bb4a:	d109      	bne.n	1000bb60 <spi_disable+0x24>
		system_clock_peripheral_disable(PERIPHERAL_SPI0_SCK_CLK);
1000bb4c:	2041      	movs	r0, #65	; 0x41
1000bb4e:	4c0c      	ldr	r4, [pc, #48]	; (1000bb80 <spi_disable+0x44>)
1000bb50:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI0_SCK_PHASE);
1000bb52:	2026      	movs	r0, #38	; 0x26
1000bb54:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI0_IF);
1000bb56:	2038      	movs	r0, #56	; 0x38
1000bb58:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI0_CORE);
1000bb5a:	2001      	movs	r0, #1
1000bb5c:	47a0      	blx	r4
1000bb5e:	e00b      	b.n	1000bb78 <spi_disable+0x3c>
	} else if (spi_module == (void *)SPI1) {
1000bb60:	4a08      	ldr	r2, [pc, #32]	; (1000bb84 <spi_disable+0x48>)
1000bb62:	4293      	cmp	r3, r2
1000bb64:	d108      	bne.n	1000bb78 <spi_disable+0x3c>
		system_clock_peripheral_disable(PERIPHERAL_SPI1_SCK_CLK);
1000bb66:	2042      	movs	r0, #66	; 0x42
1000bb68:	4c05      	ldr	r4, [pc, #20]	; (1000bb80 <spi_disable+0x44>)
1000bb6a:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI1_SCK_PHASE);
1000bb6c:	2027      	movs	r0, #39	; 0x27
1000bb6e:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI1_IF);
1000bb70:	2039      	movs	r0, #57	; 0x39
1000bb72:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI1_CORE);
1000bb74:	2002      	movs	r0, #2
1000bb76:	47a0      	blx	r4
#  endif

	/* Disable SPI */
	spi_module->SPI_MODULE_ENABLE.reg = (0x0ul << SPI_MODULE_ENABLE_ENABLE_Pos);
	_spi_clock_disable(module);
}
1000bb78:	bd10      	pop	{r4, pc}
1000bb7a:	46c0      	nop			; (mov r8, r8)
1000bb7c:	40006000 	.word	0x40006000
1000bb80:	1000cb11 	.word	0x1000cb11
1000bb84:	40007000 	.word	0x40007000

1000bb88 <spi_reset>:
 * disable it.
 *
 * \param[in,out] module Pointer to the software instance struct
 */
void spi_reset(struct spi_module *const module)
{
1000bb88:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Spi *const spi_module = (module->hw);
1000bb8a:	6804      	ldr	r4, [r0, #0]

	/* Disable the module */
	spi_disable(module);
1000bb8c:	4b09      	ldr	r3, [pc, #36]	; (1000bbb4 <spi_reset+0x2c>)
1000bb8e:	4798      	blx	r3

	/* Software reset the module */
	if(spi_module == (void *)SPI0) {
1000bb90:	4b09      	ldr	r3, [pc, #36]	; (1000bbb8 <spi_reset+0x30>)
1000bb92:	429c      	cmp	r4, r3
1000bb94:	d105      	bne.n	1000bba2 <spi_reset+0x1a>
		system_peripheral_reset(PERIPHERAL_SPI0_CORE);
1000bb96:	2001      	movs	r0, #1
1000bb98:	4c08      	ldr	r4, [pc, #32]	; (1000bbbc <spi_reset+0x34>)
1000bb9a:	47a0      	blx	r4
		system_peripheral_reset(PERIPHERAL_SPI0_IF);
1000bb9c:	2038      	movs	r0, #56	; 0x38
1000bb9e:	47a0      	blx	r4
1000bba0:	e007      	b.n	1000bbb2 <spi_reset+0x2a>
	} else if (spi_module == (void *)SPI1) {
1000bba2:	4b07      	ldr	r3, [pc, #28]	; (1000bbc0 <spi_reset+0x38>)
1000bba4:	429c      	cmp	r4, r3
1000bba6:	d104      	bne.n	1000bbb2 <spi_reset+0x2a>
		system_peripheral_reset(PERIPHERAL_SPI1_CORE);
1000bba8:	2002      	movs	r0, #2
1000bbaa:	4c04      	ldr	r4, [pc, #16]	; (1000bbbc <spi_reset+0x34>)
1000bbac:	47a0      	blx	r4
		system_peripheral_reset(PERIPHERAL_SPI1_IF);
1000bbae:	2039      	movs	r0, #57	; 0x39
1000bbb0:	47a0      	blx	r4
	}
}
1000bbb2:	bd10      	pop	{r4, pc}
1000bbb4:	1000bb3d 	.word	0x1000bb3d
1000bbb8:	40006000 	.word	0x40006000
1000bbbc:	1000ce7d 	.word	0x1000ce7d
1000bbc0:	40007000 	.word	0x40007000

1000bbc4 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Spi *const hw,
		const struct spi_config *const config)
{
1000bbc4:	b5f0      	push	{r4, r5, r6, r7, lr}
1000bbc6:	465f      	mov	r7, fp
1000bbc8:	4646      	mov	r6, r8
1000bbca:	b4c0      	push	{r6, r7}
1000bbcc:	b083      	sub	sp, #12
1000bbce:	0006      	movs	r6, r0
1000bbd0:	4688      	mov	r8, r1
1000bbd2:	0015      	movs	r5, r2
	Assert(config);

	uint8_t idx;

	/* Initialize device instance */
	module->hw = hw;
1000bbd4:	6031      	str	r1, [r6, #0]

	Spi *const spi_module = (module->hw);

	/* Check if module is enabled. */
	if (spi_module->SPI_MODULE_ENABLE.reg & SPI_MODULE_ENABLE_MASK) {
1000bbd6:	7e0b      	ldrb	r3, [r1, #24]
1000bbd8:	07db      	lsls	r3, r3, #31
1000bbda:	d501      	bpl.n	1000bbe0 <spi_init+0x1c>
		spi_module->SPI_MODULE_ENABLE.reg = (0x0ul << SPI_MODULE_ENABLE_ENABLE_Pos);
1000bbdc:	2300      	movs	r3, #0
1000bbde:	760b      	strb	r3, [r1, #24]
	}

	spi_reset(module);
1000bbe0:	0030      	movs	r0, r6
1000bbe2:	4b4a      	ldr	r3, [pc, #296]	; (1000bd0c <spi_init+0x148>)
1000bbe4:	4798      	blx	r3
 */
static void _spi_clock_enable(struct spi_module *const module)
{
	Assert(module);

	Spi *const spi_module = (module->hw);
1000bbe6:	6833      	ldr	r3, [r6, #0]

	if (spi_module == (void *)SPI0) {
1000bbe8:	4a49      	ldr	r2, [pc, #292]	; (1000bd10 <spi_init+0x14c>)
1000bbea:	4293      	cmp	r3, r2
1000bbec:	d109      	bne.n	1000bc02 <spi_init+0x3e>
		system_clock_peripheral_enable(PERIPHERAL_SPI0_SCK_CLK);
1000bbee:	2041      	movs	r0, #65	; 0x41
1000bbf0:	4c48      	ldr	r4, [pc, #288]	; (1000bd14 <spi_init+0x150>)
1000bbf2:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI0_SCK_PHASE);
1000bbf4:	2026      	movs	r0, #38	; 0x26
1000bbf6:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI0_IF);
1000bbf8:	2038      	movs	r0, #56	; 0x38
1000bbfa:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI0_CORE);
1000bbfc:	2001      	movs	r0, #1
1000bbfe:	47a0      	blx	r4
1000bc00:	e00b      	b.n	1000bc1a <spi_init+0x56>
	} else if (spi_module == (void *)SPI1) {
1000bc02:	4a45      	ldr	r2, [pc, #276]	; (1000bd18 <spi_init+0x154>)
1000bc04:	4293      	cmp	r3, r2
1000bc06:	d108      	bne.n	1000bc1a <spi_init+0x56>
		system_clock_peripheral_enable(PERIPHERAL_SPI1_SCK_CLK);
1000bc08:	2042      	movs	r0, #66	; 0x42
1000bc0a:	4c42      	ldr	r4, [pc, #264]	; (1000bd14 <spi_init+0x150>)
1000bc0c:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI1_SCK_PHASE);
1000bc0e:	2027      	movs	r0, #39	; 0x27
1000bc10:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI1_IF);
1000bc12:	2039      	movs	r0, #57	; 0x39
1000bc14:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI1_CORE);
1000bc16:	2002      	movs	r0, #2
1000bc18:	47a0      	blx	r4
	}
#endif

	//Program the pinmux.
	struct gpio_config config_gpio;
	gpio_get_config_defaults(&config_gpio);
1000bc1a:	a801      	add	r0, sp, #4
1000bc1c:	4b3f      	ldr	r3, [pc, #252]	; (1000bd1c <spi_init+0x158>)
1000bc1e:	4798      	blx	r3
1000bc20:	002c      	movs	r4, r5
1000bc22:	3408      	adds	r4, #8
1000bc24:	2318      	movs	r3, #24
1000bc26:	469b      	mov	fp, r3
1000bc28:	44ab      	add	fp, r5
1000bc2a:	0027      	movs	r7, r4

	/* Set the pinmux for this spi module. */
	for(idx = 0; idx < 4; idx++) {
		if (config->pin_number_pad[idx] != PINMUX_UNUSED) {
1000bc2c:	6820      	ldr	r0, [r4, #0]
1000bc2e:	1c43      	adds	r3, r0, #1
1000bc30:	d011      	beq.n	1000bc56 <spi_init+0x92>
			if (config->mode == SPI_MODE_MASTER) {
1000bc32:	782b      	ldrb	r3, [r5, #0]
1000bc34:	2b01      	cmp	r3, #1
1000bc36:	d102      	bne.n	1000bc3e <spi_init+0x7a>
				config_gpio.direction = GPIO_PIN_DIR_OUTPUT;
1000bc38:	466a      	mov	r2, sp
1000bc3a:	7113      	strb	r3, [r2, #4]
1000bc3c:	e003      	b.n	1000bc46 <spi_init+0x82>
			} else if (config->mode == SPI_MODE_SLAVE) {
1000bc3e:	2b00      	cmp	r3, #0
1000bc40:	d101      	bne.n	1000bc46 <spi_init+0x82>
				config_gpio.direction = GPIO_PIN_DIR_INPUT;
1000bc42:	466a      	mov	r2, sp
1000bc44:	7113      	strb	r3, [r2, #4]
			}
			gpio_pin_set_config(config->pin_number_pad[idx], &config_gpio);
1000bc46:	b2c0      	uxtb	r0, r0
1000bc48:	a901      	add	r1, sp, #4
1000bc4a:	4b35      	ldr	r3, [pc, #212]	; (1000bd20 <spi_init+0x15c>)
1000bc4c:	4798      	blx	r3
			gpio_pinmux_cofiguration(config->pin_number_pad[idx], \
1000bc4e:	8a39      	ldrh	r1, [r7, #16]
1000bc50:	7838      	ldrb	r0, [r7, #0]
1000bc52:	4b34      	ldr	r3, [pc, #208]	; (1000bd24 <spi_init+0x160>)
1000bc54:	4798      	blx	r3
1000bc56:	3404      	adds	r4, #4
	//Program the pinmux.
	struct gpio_config config_gpio;
	gpio_get_config_defaults(&config_gpio);

	/* Set the pinmux for this spi module. */
	for(idx = 0; idx < 4; idx++) {
1000bc58:	455c      	cmp	r4, fp
1000bc5a:	d1e6      	bne.n	1000bc2a <spi_init+0x66>
						(uint16_t)(config->pinmux_sel_pad[idx]));
		}
	}

	/* Set up the input clock for the module */
	spi_module->CLOCK_SOURCE_SELECT.reg = config->clock_source;
1000bc5c:	78eb      	ldrb	r3, [r5, #3]
1000bc5e:	4642      	mov	r2, r8
1000bc60:	7413      	strb	r3, [r2, #16]

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
1000bc62:	782b      	ldrb	r3, [r5, #0]
1000bc64:	2b01      	cmp	r3, #1
1000bc66:	d100      	bne.n	1000bc6a <spi_init+0xa6>
		/* Set the mode in SPI master mode */
		spi_module->SPI_MASTER_MODE.reg = SPI_MODE_MASTER;
1000bc68:	7713      	strb	r3, [r2, #28]
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
1000bc6a:	782b      	ldrb	r3, [r5, #0]
1000bc6c:	2b00      	cmp	r3, #0
1000bc6e:	d101      	bne.n	1000bc74 <spi_init+0xb0>
		/* Set the mode in SPI slave mode */
		spi_module->SPI_MASTER_MODE.reg = SPI_MODE_SLAVE;
1000bc70:	4642      	mov	r2, r8
1000bc72:	7713      	strb	r3, [r2, #28]
		const struct spi_config *const config)
{
	Assert(module);
	Assert(config);

	Spi *const spi_module = (module->hw);
1000bc74:	6833      	ldr	r3, [r6, #0]

	module->mode  = config->mode;
1000bc76:	782a      	ldrb	r2, [r5, #0]
1000bc78:	7172      	strb	r2, [r6, #5]

#if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
1000bc7a:	782a      	ldrb	r2, [r5, #0]
1000bc7c:	2a01      	cmp	r2, #1
1000bc7e:	d101      	bne.n	1000bc84 <spi_init+0xc0>
		spi_module->SPI_CLK_DIVIDER.reg = config->clock_divider;
1000bc80:	792a      	ldrb	r2, [r5, #4]
1000bc82:	829a      	strh	r2, [r3, #20]
	}
#endif

	/* Set data order */
	if (config->data_order == SPI_DATA_ORDER_LSB) {
1000bc84:	786a      	ldrb	r2, [r5, #1]
1000bc86:	2a04      	cmp	r2, #4
1000bc88:	d104      	bne.n	1000bc94 <spi_init+0xd0>
		spi_module->SPI_CONFIGURATION.bit.LSB_FIRST_ENABLE = 0x1;
1000bc8a:	2124      	movs	r1, #36	; 0x24
1000bc8c:	5c58      	ldrb	r0, [r3, r1]
1000bc8e:	4302      	orrs	r2, r0
1000bc90:	545a      	strb	r2, [r3, r1]
1000bc92:	e004      	b.n	1000bc9e <spi_init+0xda>
	} else {
		spi_module->SPI_CONFIGURATION.bit.LSB_FIRST_ENABLE = 0x0;
1000bc94:	2124      	movs	r1, #36	; 0x24
1000bc96:	5c5a      	ldrb	r2, [r3, r1]
1000bc98:	2004      	movs	r0, #4
1000bc9a:	4382      	bics	r2, r0
1000bc9c:	545a      	strb	r2, [r3, r1]
	}

	/* Set clock polarity and clock phase */
	switch(config->transfer_mode)
1000bc9e:	78aa      	ldrb	r2, [r5, #2]
1000bca0:	2a01      	cmp	r2, #1
1000bca2:	d01a      	beq.n	1000bcda <spi_init+0x116>
1000bca4:	2a00      	cmp	r2, #0
1000bca6:	d004      	beq.n	1000bcb2 <spi_init+0xee>
1000bca8:	2a02      	cmp	r2, #2
1000bcaa:	d00c      	beq.n	1000bcc6 <spi_init+0x102>
1000bcac:	2a03      	cmp	r2, #3
1000bcae:	d01e      	beq.n	1000bcee <spi_init+0x12a>
1000bcb0:	e026      	b.n	1000bd00 <spi_init+0x13c>
	{
		case SPI_TRANSFER_MODE_0:
			spi_module->SPI_CONFIGURATION.bit.SCK_PHASE = 0x0;
1000bcb2:	2224      	movs	r2, #36	; 0x24
1000bcb4:	5c99      	ldrb	r1, [r3, r2]
1000bcb6:	2002      	movs	r0, #2
1000bcb8:	4381      	bics	r1, r0
1000bcba:	5499      	strb	r1, [r3, r2]
			spi_module->SPI_CONFIGURATION.bit.SCK_POLARITY = 0x0;
1000bcbc:	5c99      	ldrb	r1, [r3, r2]
1000bcbe:	3801      	subs	r0, #1
1000bcc0:	4381      	bics	r1, r0
1000bcc2:	5499      	strb	r1, [r3, r2]
1000bcc4:	e01c      	b.n	1000bd00 <spi_init+0x13c>
			break;
		case SPI_TRANSFER_MODE_1:
			spi_module->SPI_CONFIGURATION.bit.SCK_PHASE = 0x1;
1000bcc6:	2224      	movs	r2, #36	; 0x24
1000bcc8:	5c98      	ldrb	r0, [r3, r2]
1000bcca:	2102      	movs	r1, #2
1000bccc:	4301      	orrs	r1, r0
1000bcce:	5499      	strb	r1, [r3, r2]
			spi_module->SPI_CONFIGURATION.bit.SCK_POLARITY = 0x0;
1000bcd0:	5c99      	ldrb	r1, [r3, r2]
1000bcd2:	2001      	movs	r0, #1
1000bcd4:	4381      	bics	r1, r0
1000bcd6:	5499      	strb	r1, [r3, r2]
1000bcd8:	e012      	b.n	1000bd00 <spi_init+0x13c>
			break;
		case SPI_TRANSFER_MODE_2:
			spi_module->SPI_CONFIGURATION.bit.SCK_PHASE = 0x0;
1000bcda:	2224      	movs	r2, #36	; 0x24
1000bcdc:	5c99      	ldrb	r1, [r3, r2]
1000bcde:	2002      	movs	r0, #2
1000bce0:	4381      	bics	r1, r0
1000bce2:	5499      	strb	r1, [r3, r2]
			spi_module->SPI_CONFIGURATION.bit.SCK_POLARITY = 0x1;
1000bce4:	5c98      	ldrb	r0, [r3, r2]
1000bce6:	2101      	movs	r1, #1
1000bce8:	4301      	orrs	r1, r0
1000bcea:	5499      	strb	r1, [r3, r2]
1000bcec:	e008      	b.n	1000bd00 <spi_init+0x13c>
			break;
		case SPI_TRANSFER_MODE_3:
			spi_module->SPI_CONFIGURATION.bit.SCK_PHASE = 0x1;
1000bcee:	2224      	movs	r2, #36	; 0x24
1000bcf0:	5c98      	ldrb	r0, [r3, r2]
1000bcf2:	2102      	movs	r1, #2
1000bcf4:	4301      	orrs	r1, r0
1000bcf6:	5499      	strb	r1, [r3, r2]
			spi_module->SPI_CONFIGURATION.bit.SCK_POLARITY = 0x1;
1000bcf8:	5c98      	ldrb	r0, [r3, r2]
1000bcfa:	2101      	movs	r1, #1
1000bcfc:	4301      	orrs	r1, r0
1000bcfe:	5499      	strb	r1, [r3, r2]
	module->locked                     = 0;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
1000bd00:	2000      	movs	r0, #0
1000bd02:	b003      	add	sp, #12
1000bd04:	bc0c      	pop	{r2, r3}
1000bd06:	4690      	mov	r8, r2
1000bd08:	469b      	mov	fp, r3
1000bd0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000bd0c:	1000bb89 	.word	0x1000bb89
1000bd10:	40006000 	.word	0x40006000
1000bd14:	1000c7b5 	.word	0x1000c7b5
1000bd18:	40007000 	.word	0x40007000
1000bd1c:	1000c111 	.word	0x1000c111
1000bd20:	1000c121 	.word	0x1000c121
1000bd24:	1000c405 	.word	0x1000c405

1000bd28 <spi_transceive_buffer_wait>:
enum status_code spi_transceive_buffer_wait(
		struct spi_module *const module,
		uint8_t *tx_data,
		uint8_t *rx_data,
		uint16_t length)
{
1000bd28:	b5f0      	push	{r4, r5, r6, r7, lr}
1000bd2a:	b083      	sub	sp, #12
	Spi *spi_module = module->hw;
1000bd2c:	6804      	ldr	r4, [r0, #0]
	uint8_t dummy = 0;
1000bd2e:	2600      	movs	r6, #0
1000bd30:	466d      	mov	r5, sp
1000bd32:	71ee      	strb	r6, [r5, #7]
1000bd34:	3507      	adds	r5, #7
	uint8_t skip_mosi = 0;
	uint8_t skip_miso = 0;
	uint8_t status;
	uint16_t transfer_len = 0;

	if(spi_module == 0) {
1000bd36:	2c00      	cmp	r4, #0
1000bd38:	d034      	beq.n	1000bda4 <spi_transceive_buffer_wait+0x7c>
		return STATUS_ERR_NOT_INITIALIZED;
	}
	if(!tx_data) {
1000bd3a:	2900      	cmp	r1, #0
1000bd3c:	d104      	bne.n	1000bd48 <spi_transceive_buffer_wait+0x20>
		tx_data = &dummy;
		*tx_data = module->tx_dummy_byte;
1000bd3e:	0029      	movs	r1, r5
1000bd40:	7980      	ldrb	r0, [r0, #6]
1000bd42:	7028      	strb	r0, [r5, #0]
		skip_mosi = 1;
1000bd44:	2701      	movs	r7, #1
1000bd46:	e00b      	b.n	1000bd60 <spi_transceive_buffer_wait+0x38>
	} else if(!rx_data) {
1000bd48:	2a00      	cmp	r2, #0
1000bd4a:	d005      	beq.n	1000bd58 <spi_transceive_buffer_wait+0x30>
		rx_data = &dummy;
		skip_miso = 1;
	} else if(length == 0) {
		return STATUS_ERR_INVALID_ARG;
1000bd4c:	2017      	movs	r0, #23
		*tx_data = module->tx_dummy_byte;
		skip_mosi = 1;
	} else if(!rx_data) {
		rx_data = &dummy;
		skip_miso = 1;
	} else if(length == 0) {
1000bd4e:	2b00      	cmp	r3, #0
1000bd50:	d029      	beq.n	1000bda6 <spi_transceive_buffer_wait+0x7e>
		uint16_t length)
{
	Spi *spi_module = module->hw;
	uint8_t dummy = 0;
	uint8_t skip_mosi = 0;
	uint8_t skip_miso = 0;
1000bd52:	2600      	movs	r6, #0
		uint8_t *rx_data,
		uint16_t length)
{
	Spi *spi_module = module->hw;
	uint8_t dummy = 0;
	uint8_t skip_mosi = 0;
1000bd54:	2700      	movs	r7, #0
1000bd56:	e003      	b.n	1000bd60 <spi_transceive_buffer_wait+0x38>
		tx_data = &dummy;
		*tx_data = module->tx_dummy_byte;
		skip_mosi = 1;
	} else if(!rx_data) {
		rx_data = &dummy;
		skip_miso = 1;
1000bd58:	2601      	movs	r6, #1
		uint8_t *rx_data,
		uint16_t length)
{
	Spi *spi_module = module->hw;
	uint8_t dummy = 0;
	uint8_t skip_mosi = 0;
1000bd5a:	2700      	movs	r7, #0
	if(!tx_data) {
		tx_data = &dummy;
		*tx_data = module->tx_dummy_byte;
		skip_mosi = 1;
	} else if(!rx_data) {
		rx_data = &dummy;
1000bd5c:	466a      	mov	r2, sp
1000bd5e:	3207      	adds	r2, #7
 */
static bool _spi_is_active(Spi *const spi_module)
{
	Assert(spi_module);

	return spi_module->SPI_BUS_STATUS.bit.SPI_ACTIVE;
1000bd60:	2528      	movs	r5, #40	; 0x28
1000bd62:	5d60      	ldrb	r0, [r4, r5]
	}

	/* Check for Idle */
	do {
		status = _spi_is_active(spi_module);
	}while(status);
1000bd64:	07c0      	lsls	r0, r0, #31
1000bd66:	d4fc      	bmi.n	1000bd62 <spi_transceive_buffer_wait+0x3a>

	/* Clear all status registers */
	spi_module->RECEIVE_STATUS.reg;
1000bd68:	7b20      	ldrb	r0, [r4, #12]
	spi_module->TRANSMIT_STATUS.reg;
1000bd6a:	7a20      	ldrb	r0, [r4, #8]

	/* Start transfer */
	while(transfer_len < length) {
1000bd6c:	2b00      	cmp	r3, #0
1000bd6e:	d014      	beq.n	1000bd9a <spi_transceive_buffer_wait+0x72>
1000bd70:	2500      	movs	r5, #0
		/* Read data shifted from MISO */
		while(!_spi_is_ready_to_read(spi_module));
		*rx_data = spi_module->RECEIVE_DATA.reg;
		transfer_len++;
		if (!skip_mosi) {
			tx_data++;
1000bd72:	4278      	negs	r0, r7
1000bd74:	4147      	adcs	r7, r0
		}
		if (!skip_miso) {
			rx_data++;
1000bd76:	4270      	negs	r0, r6
1000bd78:	4146      	adcs	r6, r0
		Spi *const spi_module)
{
	Assert(spi_module);

	/* Check interrupt flag */
	return (spi_module->TRANSMIT_STATUS.bit.TX_FIFO_NOT_FULL);
1000bd7a:	7a20      	ldrb	r0, [r4, #8]
	spi_module->TRANSMIT_STATUS.reg;

	/* Start transfer */
	while(transfer_len < length) {
		/* Write data to MOSI */
		while(!_spi_is_ready_to_write(spi_module));
1000bd7c:	07c0      	lsls	r0, r0, #31
1000bd7e:	d5fc      	bpl.n	1000bd7a <spi_transceive_buffer_wait+0x52>
		spi_module->TRANSMIT_DATA.reg = *tx_data;
1000bd80:	7808      	ldrb	r0, [r1, #0]
1000bd82:	7020      	strb	r0, [r4, #0]
		Spi *const spi_module)
{
	Assert(spi_module);

	/* Check interrupt flag */
	return (spi_module->RECEIVE_STATUS.bit.RX_FIFO_NOT_EMPTY);
1000bd84:	7b20      	ldrb	r0, [r4, #12]
	while(transfer_len < length) {
		/* Write data to MOSI */
		while(!_spi_is_ready_to_write(spi_module));
		spi_module->TRANSMIT_DATA.reg = *tx_data;
		/* Read data shifted from MISO */
		while(!_spi_is_ready_to_read(spi_module));
1000bd86:	07c0      	lsls	r0, r0, #31
1000bd88:	d5fc      	bpl.n	1000bd84 <spi_transceive_buffer_wait+0x5c>
		*rx_data = spi_module->RECEIVE_DATA.reg;
1000bd8a:	7920      	ldrb	r0, [r4, #4]
1000bd8c:	7010      	strb	r0, [r2, #0]
		transfer_len++;
1000bd8e:	3501      	adds	r5, #1
1000bd90:	b2ad      	uxth	r5, r5
		if (!skip_mosi) {
			tx_data++;
1000bd92:	19c9      	adds	r1, r1, r7
		}
		if (!skip_miso) {
			rx_data++;
1000bd94:	1992      	adds	r2, r2, r6
	/* Clear all status registers */
	spi_module->RECEIVE_STATUS.reg;
	spi_module->TRANSMIT_STATUS.reg;

	/* Start transfer */
	while(transfer_len < length) {
1000bd96:	42ab      	cmp	r3, r5
1000bd98:	d1ef      	bne.n	1000bd7a <spi_transceive_buffer_wait+0x52>
		Spi *const spi_module)
{
	Assert(spi_module);

	/* Check interrupt flag */
	return (spi_module->TRANSMIT_STATUS.bit.TX_FIFO_EMPTY);
1000bd9a:	7a23      	ldrb	r3, [r4, #8]
		}
	}
	/* check TXFIFO is empty */
	do {
		status = _spi_is_write_complete(spi_module);
	}while(!status);
1000bd9c:	06db      	lsls	r3, r3, #27
1000bd9e:	d5fc      	bpl.n	1000bd9a <spi_transceive_buffer_wait+0x72>

	return STATUS_OK;
1000bda0:	2000      	movs	r0, #0
1000bda2:	e000      	b.n	1000bda6 <spi_transceive_buffer_wait+0x7e>
	uint8_t skip_miso = 0;
	uint8_t status;
	uint16_t transfer_len = 0;

	if(spi_module == 0) {
		return STATUS_ERR_NOT_INITIALIZED;
1000bda4:	201f      	movs	r0, #31
		status = _spi_is_write_complete(spi_module);
	}while(!status);

	return STATUS_OK;

}
1000bda6:	b003      	add	sp, #12
1000bda8:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000bdaa:	46c0      	nop			; (mov r8, r8)

1000bdac <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		bool select)
{
1000bdac:	b510      	push	{r4, lr}
	uint8_t gpio_num = slave->ss_pin;
1000bdae:	7808      	ldrb	r0, [r1, #0]
	if(select) {
1000bdb0:	2a00      	cmp	r2, #0
1000bdb2:	d003      	beq.n	1000bdbc <spi_select_slave+0x10>
		/* ASSERT Slave select pin */
		gpio_pin_set_output_level(gpio_num, false);
1000bdb4:	2100      	movs	r1, #0
1000bdb6:	4b04      	ldr	r3, [pc, #16]	; (1000bdc8 <spi_select_slave+0x1c>)
1000bdb8:	4798      	blx	r3
1000bdba:	e002      	b.n	1000bdc2 <spi_select_slave+0x16>
	} else {
		/* DEASSERT Slave select pin */
		gpio_pin_set_output_level(gpio_num, true);
1000bdbc:	2101      	movs	r1, #1
1000bdbe:	4b02      	ldr	r3, [pc, #8]	; (1000bdc8 <spi_select_slave+0x1c>)
1000bdc0:	4798      	blx	r3
	}

	return STATUS_OK;
}
1000bdc2:	2000      	movs	r0, #0
1000bdc4:	bd10      	pop	{r4, pc}
1000bdc6:	46c0      	nop			; (mov r8, r8)
1000bdc8:	1000c379 	.word	0x1000c379

1000bdcc <dualtimer_isr_handler>:
 *
 * Dualtimer ISR handler.
 *
 */
static void dualtimer_isr_handler(void)
{
1000bdcc:	b510      	push	{r4, lr}
 * \retval The interrupt status of timer1/timer2
 */
uint8_t dualtimer_get_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		return DUALTIMER0->TIMER1MIS.reg;
1000bdce:	4b0d      	ldr	r3, [pc, #52]	; (1000be04 <dualtimer_isr_handler+0x38>)
1000bdd0:	7d1b      	ldrb	r3, [r3, #20]
 * Dualtimer ISR handler.
 *
 */
static void dualtimer_isr_handler(void)
{
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER1)) {
1000bdd2:	2b00      	cmp	r3, #0
1000bdd4:	d007      	beq.n	1000bde6 <dualtimer_isr_handler+0x1a>
 * \param[in]     timer        Timer1/Timer2
 */
void dualtimer_clear_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		DUALTIMER0->TIMER1INTCLR.reg = 1;
1000bdd6:	2201      	movs	r2, #1
1000bdd8:	4b0a      	ldr	r3, [pc, #40]	; (1000be04 <dualtimer_isr_handler+0x38>)
1000bdda:	731a      	strb	r2, [r3, #12]
 */
static void dualtimer_isr_handler(void)
{
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER1)) {
		dualtimer_clear_interrupt_status(DUALTIMER_TIMER1);
		if (dualtimer_callback_timer1)
1000bddc:	4b0a      	ldr	r3, [pc, #40]	; (1000be08 <dualtimer_isr_handler+0x3c>)
1000bdde:	681b      	ldr	r3, [r3, #0]
1000bde0:	2b00      	cmp	r3, #0
1000bde2:	d000      	beq.n	1000bde6 <dualtimer_isr_handler+0x1a>
			dualtimer_callback_timer1();
1000bde4:	4798      	blx	r3
uint8_t dualtimer_get_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		return DUALTIMER0->TIMER1MIS.reg;
	} else {
		return DUALTIMER0->TIMER2MIS.reg;
1000bde6:	2334      	movs	r3, #52	; 0x34
1000bde8:	4a06      	ldr	r2, [pc, #24]	; (1000be04 <dualtimer_isr_handler+0x38>)
1000bdea:	5cd3      	ldrb	r3, [r2, r3]
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER1)) {
		dualtimer_clear_interrupt_status(DUALTIMER_TIMER1);
		if (dualtimer_callback_timer1)
			dualtimer_callback_timer1();
	}
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER2)) {
1000bdec:	2b00      	cmp	r3, #0
1000bdee:	d007      	beq.n	1000be00 <dualtimer_isr_handler+0x34>
void dualtimer_clear_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		DUALTIMER0->TIMER1INTCLR.reg = 1;
	} else {
		DUALTIMER0->TIMER2INTCLR.reg = 1;
1000bdf0:	2101      	movs	r1, #1
1000bdf2:	232c      	movs	r3, #44	; 0x2c
1000bdf4:	54d1      	strb	r1, [r2, r3]
		if (dualtimer_callback_timer1)
			dualtimer_callback_timer1();
	}
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER2)) {
		dualtimer_clear_interrupt_status(DUALTIMER_TIMER2);
		if (dualtimer_callback_timer2)
1000bdf6:	4b05      	ldr	r3, [pc, #20]	; (1000be0c <dualtimer_isr_handler+0x40>)
1000bdf8:	681b      	ldr	r3, [r3, #0]
1000bdfa:	2b00      	cmp	r3, #0
1000bdfc:	d000      	beq.n	1000be00 <dualtimer_isr_handler+0x34>
			dualtimer_callback_timer2();
1000bdfe:	4798      	blx	r3
	}
}
1000be00:	bd10      	pop	{r4, pc}
1000be02:	46c0      	nop			; (mov r8, r8)
1000be04:	40001000 	.word	0x40001000
1000be08:	100186dc 	.word	0x100186dc
1000be0c:	100186e0 	.word	0x100186e0

1000be10 <dualtimer_get_config_defaults>:
 *
 * \param[out]  config  Pointer to a DUALTIMER module configuration structure to set
 */
void dualtimer_get_config_defaults(struct dualtimer_config *config)
{
	config->timer1.timer_enable = true;
1000be10:	2301      	movs	r3, #1
1000be12:	7003      	strb	r3, [r0, #0]
	config->timer2.timer_enable = true;
1000be14:	7303      	strb	r3, [r0, #12]

	config->timer1.counter_mode = DUALTIMER_PERIODIC_MODE;
1000be16:	2202      	movs	r2, #2
1000be18:	7042      	strb	r2, [r0, #1]
	config->timer2.counter_mode = DUALTIMER_PERIODIC_MODE;
1000be1a:	7342      	strb	r2, [r0, #13]

	config->timer1.counter_size = DUALTIMER_COUNTER_SIZE_32BIT;
1000be1c:	7083      	strb	r3, [r0, #2]
	config->timer2.counter_size = DUALTIMER_COUNTER_SIZE_32BIT;
1000be1e:	7383      	strb	r3, [r0, #14]

	config->timer1.clock_prescaler = DUALTIMER_CLOCK_PRESCALER_DIV1;
1000be20:	2200      	movs	r2, #0
1000be22:	70c2      	strb	r2, [r0, #3]
	config->timer2.clock_prescaler = DUALTIMER_CLOCK_PRESCALER_DIV1;
1000be24:	73c2      	strb	r2, [r0, #15]

	config->timer1.interrup_enable = true;
1000be26:	7103      	strb	r3, [r0, #4]
	config->timer2.interrup_enable = true;
1000be28:	7403      	strb	r3, [r0, #16]

	config->timer1.load_value = 0;
1000be2a:	6082      	str	r2, [r0, #8]
	config->timer2.load_value = 0;
1000be2c:	6142      	str	r2, [r0, #20]

	config->clock_source = DUALTIMER_CLK_INPUT_0;
1000be2e:	7602      	strb	r2, [r0, #24]
}
1000be30:	4770      	bx	lr
1000be32:	46c0      	nop			; (mov r8, r8)

1000be34 <dualtimer_set_counter>:
 * \param[in]     value        Load value
 */
void dualtimer_set_counter(enum dualtimer_timer timer,
		enum dualtimer_set_register cur_bg, uint32_t value)
{
	if (timer == DUALTIMER_TIMER1) {
1000be34:	2800      	cmp	r0, #0
1000be36:	d107      	bne.n	1000be48 <dualtimer_set_counter+0x14>
		if (cur_bg == DUALTIMER_SET_CURRUNT_REG) {
1000be38:	2900      	cmp	r1, #0
1000be3a:	d102      	bne.n	1000be42 <dualtimer_set_counter+0xe>
			DUALTIMER0->TIMER1LOAD.reg = value;
1000be3c:	4b06      	ldr	r3, [pc, #24]	; (1000be58 <dualtimer_set_counter+0x24>)
1000be3e:	601a      	str	r2, [r3, #0]
1000be40:	e009      	b.n	1000be56 <dualtimer_set_counter+0x22>
		} else {
			DUALTIMER0->TIMER1BGLOAD.reg = value;
1000be42:	4b05      	ldr	r3, [pc, #20]	; (1000be58 <dualtimer_set_counter+0x24>)
1000be44:	619a      	str	r2, [r3, #24]
1000be46:	e006      	b.n	1000be56 <dualtimer_set_counter+0x22>
		}
	} else {
		if (cur_bg == DUALTIMER_SET_CURRUNT_REG) {
1000be48:	2900      	cmp	r1, #0
1000be4a:	d102      	bne.n	1000be52 <dualtimer_set_counter+0x1e>
			DUALTIMER0->TIMER2LOAD.reg = value;
1000be4c:	4b02      	ldr	r3, [pc, #8]	; (1000be58 <dualtimer_set_counter+0x24>)
1000be4e:	621a      	str	r2, [r3, #32]
1000be50:	e001      	b.n	1000be56 <dualtimer_set_counter+0x22>
			} else {
			DUALTIMER0->TIMER2BGLOAD.reg = value;
1000be52:	4b01      	ldr	r3, [pc, #4]	; (1000be58 <dualtimer_set_counter+0x24>)
1000be54:	639a      	str	r2, [r3, #56]	; 0x38
		}
	}
}
1000be56:	4770      	bx	lr
1000be58:	40001000 	.word	0x40001000

1000be5c <dualtimer_enable>:
 *
 * \param[in]     timer        Timer1/Timer2
 */
void dualtimer_enable(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
1000be5c:	2800      	cmp	r0, #0
1000be5e:	d105      	bne.n	1000be6c <dualtimer_enable+0x10>
		DUALTIMER0->TIMER1CONTROL.reg |= DUALTIMER_TIMER1CONTROL_TIMER_ENABLE;
1000be60:	4a06      	ldr	r2, [pc, #24]	; (1000be7c <dualtimer_enable+0x20>)
1000be62:	7a11      	ldrb	r1, [r2, #8]
1000be64:	2380      	movs	r3, #128	; 0x80
1000be66:	430b      	orrs	r3, r1
1000be68:	7213      	strb	r3, [r2, #8]
1000be6a:	e005      	b.n	1000be78 <dualtimer_enable+0x1c>
	} else {
		DUALTIMER0->TIMER2CONTROL.reg |= DUALTIMER_TIMER2CONTROL_TIMER_ENABLE;
1000be6c:	4903      	ldr	r1, [pc, #12]	; (1000be7c <dualtimer_enable+0x20>)
1000be6e:	2228      	movs	r2, #40	; 0x28
1000be70:	5c88      	ldrb	r0, [r1, r2]
1000be72:	2380      	movs	r3, #128	; 0x80
1000be74:	4303      	orrs	r3, r0
1000be76:	548b      	strb	r3, [r1, r2]
	}
}
1000be78:	4770      	bx	lr
1000be7a:	46c0      	nop			; (mov r8, r8)
1000be7c:	40001000 	.word	0x40001000

1000be80 <dualtimer_disable>:
 *
 * \param[in]     timer        Timer1/Timer2
 */
void dualtimer_disable(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
1000be80:	2800      	cmp	r0, #0
1000be82:	d105      	bne.n	1000be90 <dualtimer_disable+0x10>
		DUALTIMER0->TIMER1CONTROL.reg &= ~DUALTIMER_TIMER1CONTROL_TIMER_ENABLE;
1000be84:	4a06      	ldr	r2, [pc, #24]	; (1000bea0 <dualtimer_disable+0x20>)
1000be86:	7a11      	ldrb	r1, [r2, #8]
1000be88:	237f      	movs	r3, #127	; 0x7f
1000be8a:	400b      	ands	r3, r1
1000be8c:	7213      	strb	r3, [r2, #8]
1000be8e:	e005      	b.n	1000be9c <dualtimer_disable+0x1c>
	} else {
		DUALTIMER0->TIMER2CONTROL.reg &= ~DUALTIMER_TIMER2CONTROL_TIMER_ENABLE;
1000be90:	4903      	ldr	r1, [pc, #12]	; (1000bea0 <dualtimer_disable+0x20>)
1000be92:	2228      	movs	r2, #40	; 0x28
1000be94:	5c88      	ldrb	r0, [r1, r2]
1000be96:	237f      	movs	r3, #127	; 0x7f
1000be98:	4003      	ands	r3, r0
1000be9a:	548b      	strb	r3, [r1, r2]
	}
}
1000be9c:	4770      	bx	lr
1000be9e:	46c0      	nop			; (mov r8, r8)
1000bea0:	40001000 	.word	0x40001000

1000bea4 <dualtimer_init>:
 * \param[in]     config       Pointer to the Dualtimer configuration options struct
 *
 * \return Status of the initialization procedure.
 */
void dualtimer_init(const struct dualtimer_config *config)
{
1000bea4:	b570      	push	{r4, r5, r6, lr}
1000bea6:	0004      	movs	r4, r0
	uint8_t regval = 0;

	/* Global reset */
	system_peripheral_reset(PERIPHERAL_DUALT_TIMER);
1000bea8:	2004      	movs	r0, #4
1000beaa:	4b39      	ldr	r3, [pc, #228]	; (1000bf90 <dualtimer_init+0xec>)
1000beac:	4798      	blx	r3

	/* Common config */
	if (config->timer1.timer_enable || config->timer2.timer_enable) {
1000beae:	7823      	ldrb	r3, [r4, #0]
1000beb0:	2b00      	cmp	r3, #0
1000beb2:	d102      	bne.n	1000beba <dualtimer_init+0x16>
1000beb4:	7b23      	ldrb	r3, [r4, #12]
1000beb6:	2b00      	cmp	r3, #0
1000beb8:	d065      	beq.n	1000bf86 <dualtimer_init+0xe2>
		LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |=
1000beba:	4936      	ldr	r1, [pc, #216]	; (1000bf94 <dualtimer_init+0xf0>)
1000bebc:	68ca      	ldr	r2, [r1, #12]
1000bebe:	2320      	movs	r3, #32
1000bec0:	4313      	orrs	r3, r2
1000bec2:	60cb      	str	r3, [r1, #12]
		LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_DUALTIMER0_CLK_EN;
		LPMCU_MISC_REGS0->LPMCU_CTRL.bit.DUALTIMER0_CLK_SEL = config->clock_source;
1000bec4:	7e22      	ldrb	r2, [r4, #24]
1000bec6:	698b      	ldr	r3, [r1, #24]
1000bec8:	2003      	movs	r0, #3
1000beca:	4002      	ands	r2, r0
1000becc:	0112      	lsls	r2, r2, #4
1000bece:	302d      	adds	r0, #45	; 0x2d
1000bed0:	4383      	bics	r3, r0
1000bed2:	4313      	orrs	r3, r2
1000bed4:	618b      	str	r3, [r1, #24]
	}
	
	/* Timer1 config */
	if (config->timer1.timer_enable) {
1000bed6:	7823      	ldrb	r3, [r4, #0]
1000bed8:	2b00      	cmp	r3, #0
1000beda:	d026      	beq.n	1000bf2a <dualtimer_init+0x86>
		if (config->timer1.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
1000bedc:	7863      	ldrb	r3, [r4, #1]
			regval = DUALTIMER_TIMER1CONTROL_ONE_SHOT_COUNT_1;
1000bede:	2101      	movs	r1, #1
		LPMCU_MISC_REGS0->LPMCU_CTRL.bit.DUALTIMER0_CLK_SEL = config->clock_source;
	}
	
	/* Timer1 config */
	if (config->timer1.timer_enable) {
		if (config->timer1.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
1000bee0:	2b00      	cmp	r3, #0
1000bee2:	d003      	beq.n	1000beec <dualtimer_init+0x48>
			regval = DUALTIMER_TIMER1CONTROL_ONE_SHOT_COUNT_1;
		} else if (config->timer1.counter_mode == DUALTIMER_FREE_RUNNING_MODE) {
			regval = DUALTIMER_TIMER1CONTROL_TIMER_MODE_0;
		} else if (config->timer1.counter_mode == DUALTIMER_PERIODIC_MODE) {
			regval = DUALTIMER_TIMER1CONTROL_TIMER_MODE_1;
1000bee4:	3b02      	subs	r3, #2
1000bee6:	425d      	negs	r5, r3
1000bee8:	415d      	adcs	r5, r3
1000beea:	01a9      	lsls	r1, r5, #6
		}
		regval |= (DUALTIMER_TIMER1CONTROL_TIMER_SIZE &
1000beec:	78a2      	ldrb	r2, [r4, #2]
1000beee:	0052      	lsls	r2, r2, #1
1000bef0:	2502      	movs	r5, #2
1000bef2:	402a      	ands	r2, r5
1000bef4:	78e3      	ldrb	r3, [r4, #3]
1000bef6:	009b      	lsls	r3, r3, #2
1000bef8:	350a      	adds	r5, #10
1000befa:	402b      	ands	r3, r5
1000befc:	431a      	orrs	r2, r3
1000befe:	0015      	movs	r5, r2
1000bf00:	430d      	orrs	r5, r1
				((config->timer1.counter_size) << DUALTIMER_TIMER1CONTROL_TIMER_SIZE_Pos)) |
				DUALTIMER_TIMER1CONTROL_TIMERPRE(config->timer1.clock_prescaler);
		if (config->timer1.interrup_enable) {
1000bf02:	7923      	ldrb	r3, [r4, #4]
1000bf04:	2b00      	cmp	r3, #0
1000bf06:	d001      	beq.n	1000bf0c <dualtimer_init+0x68>
			regval |= DUALTIMER_TIMER1CONTROL_INTERRUPT_ENABLE;
1000bf08:	2320      	movs	r3, #32
1000bf0a:	431d      	orrs	r5, r3
		}
		DUALTIMER0->TIMER1LOAD.reg = config->timer1.load_value;
1000bf0c:	4b22      	ldr	r3, [pc, #136]	; (1000bf98 <dualtimer_init+0xf4>)
1000bf0e:	68a2      	ldr	r2, [r4, #8]
1000bf10:	601a      	str	r2, [r3, #0]
		DUALTIMER0->TIMER1CONTROL.reg = regval;
1000bf12:	721d      	strb	r5, [r3, #8]
		LPMCU_MISC_REGS0->DUALTIMER0_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER0_CTRL_CNTR_1_ENABLE;
1000bf14:	491f      	ldr	r1, [pc, #124]	; (1000bf94 <dualtimer_init+0xf0>)
1000bf16:	22c4      	movs	r2, #196	; 0xc4
1000bf18:	0052      	lsls	r2, r2, #1
1000bf1a:	5c88      	ldrb	r0, [r1, r2]
1000bf1c:	2301      	movs	r3, #1
1000bf1e:	4303      	orrs	r3, r0
1000bf20:	548b      	strb	r3, [r1, r2]
		dualtimer_enable(DUALTIMER_TIMER1);
1000bf22:	2000      	movs	r0, #0
1000bf24:	4b1d      	ldr	r3, [pc, #116]	; (1000bf9c <dualtimer_init+0xf8>)
1000bf26:	4798      	blx	r3
1000bf28:	e000      	b.n	1000bf2c <dualtimer_init+0x88>
 *
 * \return Status of the initialization procedure.
 */
void dualtimer_init(const struct dualtimer_config *config)
{
	uint8_t regval = 0;
1000bf2a:	2500      	movs	r5, #0
		LPMCU_MISC_REGS0->DUALTIMER0_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER0_CTRL_CNTR_1_ENABLE;
		dualtimer_enable(DUALTIMER_TIMER1);
	}

	/* Timer2 config */
	if (config->timer2.timer_enable) {
1000bf2c:	7b23      	ldrb	r3, [r4, #12]
1000bf2e:	2b00      	cmp	r3, #0
1000bf30:	d029      	beq.n	1000bf86 <dualtimer_init+0xe2>
		if (config->timer2.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
1000bf32:	7b63      	ldrb	r3, [r4, #13]
1000bf34:	2b00      	cmp	r3, #0
1000bf36:	d005      	beq.n	1000bf44 <dualtimer_init+0xa0>
			regval = DUALTIMER_TIMER2CONTROL_ONE_SHOT_COUNT_1;
		} else if (config->timer2.counter_mode == DUALTIMER_FREE_RUNNING_MODE) {
1000bf38:	2b01      	cmp	r3, #1
1000bf3a:	d005      	beq.n	1000bf48 <dualtimer_init+0xa4>
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_0;
		} else if (config->timer2.counter_mode == DUALTIMER_PERIODIC_MODE) {
1000bf3c:	2b02      	cmp	r3, #2
1000bf3e:	d104      	bne.n	1000bf4a <dualtimer_init+0xa6>
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_1;
1000bf40:	2540      	movs	r5, #64	; 0x40
1000bf42:	e002      	b.n	1000bf4a <dualtimer_init+0xa6>
	}

	/* Timer2 config */
	if (config->timer2.timer_enable) {
		if (config->timer2.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
			regval = DUALTIMER_TIMER2CONTROL_ONE_SHOT_COUNT_1;
1000bf44:	2501      	movs	r5, #1
1000bf46:	e000      	b.n	1000bf4a <dualtimer_init+0xa6>
		} else if (config->timer2.counter_mode == DUALTIMER_FREE_RUNNING_MODE) {
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_0;
1000bf48:	2500      	movs	r5, #0
		} else if (config->timer2.counter_mode == DUALTIMER_PERIODIC_MODE) {
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_1;
		}
		regval |= (DUALTIMER_TIMER2CONTROL_TIMER_SIZE &
1000bf4a:	7ba3      	ldrb	r3, [r4, #14]
1000bf4c:	005b      	lsls	r3, r3, #1
1000bf4e:	2102      	movs	r1, #2
1000bf50:	4019      	ands	r1, r3
1000bf52:	7be2      	ldrb	r2, [r4, #15]
1000bf54:	0092      	lsls	r2, r2, #2
1000bf56:	230c      	movs	r3, #12
1000bf58:	4013      	ands	r3, r2
1000bf5a:	430b      	orrs	r3, r1
1000bf5c:	431d      	orrs	r5, r3
				((config->timer2.counter_size) << DUALTIMER_TIMER2CONTROL_TIMER_SIZE_Pos)) |
				DUALTIMER_TIMER2CONTROL_TIMERPRE(config->timer2.clock_prescaler);
		if (config->timer2.interrup_enable) {
1000bf5e:	7c23      	ldrb	r3, [r4, #16]
1000bf60:	2b00      	cmp	r3, #0
1000bf62:	d001      	beq.n	1000bf68 <dualtimer_init+0xc4>
			regval |= DUALTIMER_TIMER2CONTROL_INTERRUPT_ENABLE;
1000bf64:	2320      	movs	r3, #32
1000bf66:	431d      	orrs	r5, r3
		}
		DUALTIMER0->TIMER2LOAD.reg = config->timer2.load_value;
1000bf68:	6962      	ldr	r2, [r4, #20]
1000bf6a:	4b0b      	ldr	r3, [pc, #44]	; (1000bf98 <dualtimer_init+0xf4>)
1000bf6c:	621a      	str	r2, [r3, #32]
		DUALTIMER0->TIMER2CONTROL.reg = regval;
1000bf6e:	2228      	movs	r2, #40	; 0x28
1000bf70:	549d      	strb	r5, [r3, r2]
		LPMCU_MISC_REGS0->DUALTIMER0_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER0_CTRL_CNTR_2_ENABLE;
1000bf72:	4908      	ldr	r1, [pc, #32]	; (1000bf94 <dualtimer_init+0xf0>)
1000bf74:	3261      	adds	r2, #97	; 0x61
1000bf76:	32ff      	adds	r2, #255	; 0xff
1000bf78:	5c88      	ldrb	r0, [r1, r2]
1000bf7a:	2302      	movs	r3, #2
1000bf7c:	4303      	orrs	r3, r0
1000bf7e:	548b      	strb	r3, [r1, r2]
		dualtimer_enable(DUALTIMER_TIMER2);
1000bf80:	2001      	movs	r0, #1
1000bf82:	4b06      	ldr	r3, [pc, #24]	; (1000bf9c <dualtimer_init+0xf8>)
1000bf84:	4798      	blx	r3
	}

	system_register_isr(RAM_ISR_TABLE_DUALTIMER_INDEX, (uint32_t)dualtimer_isr_handler);
1000bf86:	4906      	ldr	r1, [pc, #24]	; (1000bfa0 <dualtimer_init+0xfc>)
1000bf88:	201e      	movs	r0, #30
1000bf8a:	4b06      	ldr	r3, [pc, #24]	; (1000bfa4 <dualtimer_init+0x100>)
1000bf8c:	4798      	blx	r3
}
1000bf8e:	bd70      	pop	{r4, r5, r6, pc}
1000bf90:	1000ce7d 	.word	0x1000ce7d
1000bf94:	4000b000 	.word	0x4000b000
1000bf98:	40001000 	.word	0x40001000
1000bf9c:	1000be5d 	.word	0x1000be5d
1000bfa0:	1000bdcd 	.word	0x1000bdcd
1000bfa4:	1000d2e5 	.word	0x1000d2e5

1000bfa8 <dualtimer_register_callback>:
 *
 * \param[in]     callback_func Pointer to callback function
 */
void dualtimer_register_callback(enum dualtimer_timer timer, dualtimer_callback_t fun)
{
	if (timer == DUALTIMER_TIMER1) {
1000bfa8:	2800      	cmp	r0, #0
1000bfaa:	d102      	bne.n	1000bfb2 <dualtimer_register_callback+0xa>
		dualtimer_callback_timer1 = fun;
1000bfac:	4b02      	ldr	r3, [pc, #8]	; (1000bfb8 <dualtimer_register_callback+0x10>)
1000bfae:	6019      	str	r1, [r3, #0]
1000bfb0:	e001      	b.n	1000bfb6 <dualtimer_register_callback+0xe>
	} else {
		dualtimer_callback_timer2 = fun;
1000bfb2:	4b02      	ldr	r3, [pc, #8]	; (1000bfbc <dualtimer_register_callback+0x14>)
1000bfb4:	6019      	str	r1, [r3, #0]
	}
}
1000bfb6:	4770      	bx	lr
1000bfb8:	100186dc 	.word	0x100186dc
1000bfbc:	100186e0 	.word	0x100186e0

1000bfc0 <gpio_port0_isr_handler>:
 *
 * This function will enter interrupt.
 *
 */
static void gpio_port0_isr_handler(void)
{
1000bfc0:	b570      	push	{r4, r5, r6, lr}
	uint32_t flag = _gpio_instances[0].hw->INTSTATUSCLEAR.reg;
1000bfc2:	4b16      	ldr	r3, [pc, #88]	; (1000c01c <gpio_port0_isr_handler+0x5c>)
1000bfc4:	681d      	ldr	r5, [r3, #0]
1000bfc6:	8f29      	ldrh	r1, [r5, #56]	; 0x38
1000bfc8:	b289      	uxth	r1, r1

	for (uint8_t i = 0; i < 16; i++){
		if (flag & (1 << i)) {
1000bfca:	07cb      	lsls	r3, r1, #31
1000bfcc:	d407      	bmi.n	1000bfde <gpio_port0_isr_handler+0x1e>
1000bfce:	2301      	movs	r3, #1
1000bfd0:	2401      	movs	r4, #1
1000bfd2:	0018      	movs	r0, r3
1000bfd4:	0022      	movs	r2, r4
1000bfd6:	409a      	lsls	r2, r3
1000bfd8:	4211      	tst	r1, r2
1000bfda:	d014      	beq.n	1000c006 <gpio_port0_isr_handler+0x46>
1000bfdc:	e001      	b.n	1000bfe2 <gpio_port0_isr_handler+0x22>
1000bfde:	2201      	movs	r2, #1
1000bfe0:	2000      	movs	r0, #0
			/* Clear interrupt flag */
			_gpio_instances[0].hw->INTSTATUSCLEAR.reg = (1 << i);
1000bfe2:	b292      	uxth	r2, r2
1000bfe4:	872a      	strh	r2, [r5, #56]	; 0x38
			if ((_gpio_instances[0].callback_enable_mask & (1 << i)) && \
1000bfe6:	2346      	movs	r3, #70	; 0x46
1000bfe8:	4a0c      	ldr	r2, [pc, #48]	; (1000c01c <gpio_port0_isr_handler+0x5c>)
1000bfea:	5ad3      	ldrh	r3, [r2, r3]
1000bfec:	4103      	asrs	r3, r0
1000bfee:	07db      	lsls	r3, r3, #31
1000bff0:	d50c      	bpl.n	1000c00c <gpio_port0_isr_handler+0x4c>
                    (_gpio_instances[0].callback_reg_mask & (1 << i)))
1000bff2:	2344      	movs	r3, #68	; 0x44

	for (uint8_t i = 0; i < 16; i++){
		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[0].hw->INTSTATUSCLEAR.reg = (1 << i);
			if ((_gpio_instances[0].callback_enable_mask & (1 << i)) && \
1000bff4:	5ad3      	ldrh	r3, [r2, r3]
1000bff6:	4103      	asrs	r3, r0
1000bff8:	07db      	lsls	r3, r3, #31
1000bffa:	d507      	bpl.n	1000c00c <gpio_port0_isr_handler+0x4c>
                    (_gpio_instances[0].callback_reg_mask & (1 << i)))
                _gpio_instances[0].callback[i]();
1000bffc:	0080      	lsls	r0, r0, #2
1000bffe:	1810      	adds	r0, r2, r0
1000c000:	6843      	ldr	r3, [r0, #4]
1000c002:	4798      	blx	r3
1000c004:	e002      	b.n	1000c00c <gpio_port0_isr_handler+0x4c>
1000c006:	3301      	adds	r3, #1
 */
static void gpio_port0_isr_handler(void)
{
	uint32_t flag = _gpio_instances[0].hw->INTSTATUSCLEAR.reg;

	for (uint8_t i = 0; i < 16; i++){
1000c008:	2b10      	cmp	r3, #16
1000c00a:	d1e2      	bne.n	1000bfd2 <gpio_port0_isr_handler+0x12>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
1000c00c:	2180      	movs	r1, #128	; 0x80
1000c00e:	0409      	lsls	r1, r1, #16
1000c010:	23c0      	movs	r3, #192	; 0xc0
1000c012:	005b      	lsls	r3, r3, #1
1000c014:	4a02      	ldr	r2, [pc, #8]	; (1000c020 <gpio_port0_isr_handler+0x60>)
1000c016:	50d1      	str	r1, [r2, r3]
                _gpio_instances[0].callback[i]();
			break;
		}
	}
	NVIC_ClearPendingIRQ(GPIO0_IRQn);
}
1000c018:	bd70      	pop	{r4, r5, r6, pc}
1000c01a:	46c0      	nop			; (mov r8, r8)
1000c01c:	1001a358 	.word	0x1001a358
1000c020:	e000e100 	.word	0xe000e100

1000c024 <gpio_port1_isr_handler>:
 *
 * This function will enter interrupt.
 *
 */
static void gpio_port1_isr_handler(void)
{
1000c024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t flag = _gpio_instances[1].hw->INTSTATUSCLEAR.reg;
1000c026:	4b18      	ldr	r3, [pc, #96]	; (1000c088 <gpio_port1_isr_handler+0x64>)
1000c028:	6c9b      	ldr	r3, [r3, #72]	; 0x48
1000c02a:	8f1e      	ldrh	r6, [r3, #56]	; 0x38
1000c02c:	b2b6      	uxth	r6, r6
1000c02e:	0037      	movs	r7, r6
1000c030:	2400      	movs	r4, #0

	for (uint8_t i = 0; i < 16; i++){
		/* For AON wakeup pin clear interrupt */
		if (flag & ((1<<15) | (1<<14) | (1<<13))) {
1000c032:	0b76      	lsrs	r6, r6, #13
1000c034:	0376      	lsls	r6, r6, #13
			aon_handle_ext_wakeup_isr();
		}

		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[1].hw->INTSTATUSCLEAR.reg = (1 << i);
1000c036:	4d14      	ldr	r5, [pc, #80]	; (1000c088 <gpio_port1_isr_handler+0x64>)
{
	uint32_t flag = _gpio_instances[1].hw->INTSTATUSCLEAR.reg;

	for (uint8_t i = 0; i < 16; i++){
		/* For AON wakeup pin clear interrupt */
		if (flag & ((1<<15) | (1<<14) | (1<<13))) {
1000c038:	2e00      	cmp	r6, #0
1000c03a:	d001      	beq.n	1000c040 <gpio_port1_isr_handler+0x1c>
			aon_handle_ext_wakeup_isr();
1000c03c:	4b13      	ldr	r3, [pc, #76]	; (1000c08c <gpio_port1_isr_handler+0x68>)
1000c03e:	4798      	blx	r3
		}

		if (flag & (1 << i)) {
1000c040:	0022      	movs	r2, r4
1000c042:	2301      	movs	r3, #1
1000c044:	40a3      	lsls	r3, r4
1000c046:	421f      	tst	r7, r3
1000c048:	d013      	beq.n	1000c072 <gpio_port1_isr_handler+0x4e>
			/* Clear interrupt flag */
			_gpio_instances[1].hw->INTSTATUSCLEAR.reg = (1 << i);
1000c04a:	b29b      	uxth	r3, r3
1000c04c:	6ca9      	ldr	r1, [r5, #72]	; 0x48
1000c04e:	870b      	strh	r3, [r1, #56]	; 0x38
			if ((_gpio_instances[1].callback_enable_mask & (1 << i)) && \
1000c050:	238e      	movs	r3, #142	; 0x8e
1000c052:	5aeb      	ldrh	r3, [r5, r3]
1000c054:	4123      	asrs	r3, r4
1000c056:	07db      	lsls	r3, r3, #31
1000c058:	d50b      	bpl.n	1000c072 <gpio_port1_isr_handler+0x4e>
			(_gpio_instances[1].callback_reg_mask & (1 << i))) {
1000c05a:	238c      	movs	r3, #140	; 0x8c
		}

		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[1].hw->INTSTATUSCLEAR.reg = (1 << i);
			if ((_gpio_instances[1].callback_enable_mask & (1 << i)) && \
1000c05c:	490a      	ldr	r1, [pc, #40]	; (1000c088 <gpio_port1_isr_handler+0x64>)
1000c05e:	5acb      	ldrh	r3, [r1, r3]
1000c060:	4123      	asrs	r3, r4
1000c062:	07db      	lsls	r3, r3, #31
1000c064:	d505      	bpl.n	1000c072 <gpio_port1_isr_handler+0x4e>
			(_gpio_instances[1].callback_reg_mask & (1 << i))) {
				_gpio_instances[1].callback[i]();
1000c066:	3212      	adds	r2, #18
1000c068:	0092      	lsls	r2, r2, #2
1000c06a:	188a      	adds	r2, r1, r2
1000c06c:	6853      	ldr	r3, [r2, #4]
1000c06e:	4798      	blx	r3
				break;
1000c070:	e002      	b.n	1000c078 <gpio_port1_isr_handler+0x54>
1000c072:	3401      	adds	r4, #1
 */
static void gpio_port1_isr_handler(void)
{
	uint32_t flag = _gpio_instances[1].hw->INTSTATUSCLEAR.reg;

	for (uint8_t i = 0; i < 16; i++){
1000c074:	2c10      	cmp	r4, #16
1000c076:	d1df      	bne.n	1000c038 <gpio_port1_isr_handler+0x14>
1000c078:	2180      	movs	r1, #128	; 0x80
1000c07a:	0449      	lsls	r1, r1, #17
1000c07c:	23c0      	movs	r3, #192	; 0xc0
1000c07e:	005b      	lsls	r3, r3, #1
1000c080:	4a03      	ldr	r2, [pc, #12]	; (1000c090 <gpio_port1_isr_handler+0x6c>)
1000c082:	50d1      	str	r1, [r2, r3]
				break;
			}
		}
	}
	NVIC_ClearPendingIRQ(GPIO1_IRQn);
}
1000c084:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000c086:	46c0      	nop			; (mov r8, r8)
1000c088:	1001a358 	.word	0x1001a358
1000c08c:	0001bc51 	.word	0x0001bc51
1000c090:	e000e100 	.word	0xe000e100

1000c094 <gpio_port2_isr_handler>:
 *
 * This function will enter interrupt.
 *
 */
static void gpio_port2_isr_handler(void)
{
1000c094:	b510      	push	{r4, lr}
	uint32_t flag = _gpio_instances[2].hw->INTSTATUSCLEAR.reg;
1000c096:	2390      	movs	r3, #144	; 0x90
1000c098:	4a1b      	ldr	r2, [pc, #108]	; (1000c108 <gpio_port2_isr_handler+0x74>)
1000c09a:	58d2      	ldr	r2, [r2, r3]
1000c09c:	8f13      	ldrh	r3, [r2, #56]	; 0x38
1000c09e:	b29b      	uxth	r3, r3

	for (uint8_t i = 12; i < 16; i++){
		if (flag & (1 << i)) {
1000c0a0:	04d9      	lsls	r1, r3, #19
1000c0a2:	d414      	bmi.n	1000c0ce <gpio_port2_isr_handler+0x3a>
1000c0a4:	0499      	lsls	r1, r3, #18
1000c0a6:	d40a      	bmi.n	1000c0be <gpio_port2_isr_handler+0x2a>
1000c0a8:	0459      	lsls	r1, r3, #17
1000c0aa:	d40c      	bmi.n	1000c0c6 <gpio_port2_isr_handler+0x32>
1000c0ac:	0bdb      	lsrs	r3, r3, #15
1000c0ae:	03db      	lsls	r3, r3, #15
1000c0b0:	b29b      	uxth	r3, r3
1000c0b2:	2b00      	cmp	r3, #0
1000c0b4:	d020      	beq.n	1000c0f8 <gpio_port2_isr_handler+0x64>
1000c0b6:	2380      	movs	r3, #128	; 0x80
1000c0b8:	021b      	lsls	r3, r3, #8
1000c0ba:	210f      	movs	r1, #15
1000c0bc:	e00a      	b.n	1000c0d4 <gpio_port2_isr_handler+0x40>
1000c0be:	2380      	movs	r3, #128	; 0x80
1000c0c0:	019b      	lsls	r3, r3, #6
1000c0c2:	210d      	movs	r1, #13
1000c0c4:	e006      	b.n	1000c0d4 <gpio_port2_isr_handler+0x40>
1000c0c6:	2380      	movs	r3, #128	; 0x80
1000c0c8:	01db      	lsls	r3, r3, #7
1000c0ca:	210e      	movs	r1, #14
1000c0cc:	e002      	b.n	1000c0d4 <gpio_port2_isr_handler+0x40>
1000c0ce:	2380      	movs	r3, #128	; 0x80
1000c0d0:	015b      	lsls	r3, r3, #5
1000c0d2:	210c      	movs	r1, #12
			/* Clear interrupt flag */
			_gpio_instances[2].hw->INTSTATUSCLEAR.reg = (1 << i);
1000c0d4:	b29b      	uxth	r3, r3
1000c0d6:	8713      	strh	r3, [r2, #56]	; 0x38
			if ((_gpio_instances[2].callback_enable_mask & (1 << i)) && \
1000c0d8:	23d6      	movs	r3, #214	; 0xd6
1000c0da:	4a0b      	ldr	r2, [pc, #44]	; (1000c108 <gpio_port2_isr_handler+0x74>)
1000c0dc:	5ad3      	ldrh	r3, [r2, r3]
1000c0de:	410b      	asrs	r3, r1
1000c0e0:	07db      	lsls	r3, r3, #31
1000c0e2:	d509      	bpl.n	1000c0f8 <gpio_port2_isr_handler+0x64>
                    (_gpio_instances[2].callback_reg_mask & (1 << i)))
1000c0e4:	23d4      	movs	r3, #212	; 0xd4

	for (uint8_t i = 12; i < 16; i++){
		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[2].hw->INTSTATUSCLEAR.reg = (1 << i);
			if ((_gpio_instances[2].callback_enable_mask & (1 << i)) && \
1000c0e6:	5ad3      	ldrh	r3, [r2, r3]
1000c0e8:	410b      	asrs	r3, r1
1000c0ea:	07db      	lsls	r3, r3, #31
1000c0ec:	d504      	bpl.n	1000c0f8 <gpio_port2_isr_handler+0x64>
                    (_gpio_instances[2].callback_reg_mask & (1 << i)))
                _gpio_instances[2].callback[i]();
1000c0ee:	3124      	adds	r1, #36	; 0x24
1000c0f0:	0089      	lsls	r1, r1, #2
1000c0f2:	1851      	adds	r1, r2, r1
1000c0f4:	684b      	ldr	r3, [r1, #4]
1000c0f6:	4798      	blx	r3
1000c0f8:	2180      	movs	r1, #128	; 0x80
1000c0fa:	0489      	lsls	r1, r1, #18
1000c0fc:	23c0      	movs	r3, #192	; 0xc0
1000c0fe:	005b      	lsls	r3, r3, #1
1000c100:	4a02      	ldr	r2, [pc, #8]	; (1000c10c <gpio_port2_isr_handler+0x78>)
1000c102:	50d1      	str	r1, [r2, r3]
			break;
		}
	}
	NVIC_ClearPendingIRQ(GPIO2_IRQn);
}
1000c104:	bd10      	pop	{r4, pc}
1000c106:	46c0      	nop			; (mov r8, r8)
1000c108:	1001a358 	.word	0x1001a358
1000c10c:	e000e100 	.word	0xe000e100

1000c110 <gpio_get_config_defaults>:
 *  \param[out] config  Configuration structure to initialize to default values.
 */
void gpio_get_config_defaults(struct gpio_config *const config)
{
	/* Default configuration values */
	config->direction  = GPIO_PIN_DIR_INPUT;
1000c110:	2300      	movs	r3, #0
1000c112:	7003      	strb	r3, [r0, #0]
	config->input_pull = GPIO_PIN_PULL_UP;
1000c114:	2201      	movs	r2, #1
1000c116:	7042      	strb	r2, [r0, #1]
	config->powersave  = false;
1000c118:	7083      	strb	r3, [r0, #2]
	config->aon_wakeup = false;
1000c11a:	70c3      	strb	r3, [r0, #3]
}
1000c11c:	4770      	bx	lr
1000c11e:	46c0      	nop			; (mov r8, r8)

1000c120 <gpio_pin_set_config>:
 *  \retval STATUS_RESOURCE_NOT_AVAILABLE   Requested gpio is already in use.
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
1000c120:	b570      	push	{r4, r5, r6, lr}
	* GPIO_0 & GPIO_1 are used for SWD.
	*/
	if ((gpio_pin == PIN_LP_GPIO_0) || \
		(gpio_pin == PIN_LP_GPIO_1))
	{
		status = STATUS_ERR_INVALID_ARG;
1000c122:	2317      	movs	r3, #23
	enum status_code status = STATUS_OK;

	/* Following GPIO's should never be modified by user.
	* GPIO_0 & GPIO_1 are used for SWD.
	*/
	if ((gpio_pin == PIN_LP_GPIO_0) || \
1000c124:	2801      	cmp	r0, #1
1000c126:	d800      	bhi.n	1000c12a <gpio_pin_set_config+0xa>
1000c128:	e0c8      	b.n	1000c2bc <gpio_pin_set_config+0x19c>
		(gpio_pin == PIN_LP_GPIO_1))
	{
		status = STATUS_ERR_INVALID_ARG;
	} else {
		if (gpio_pin <= 7) {
1000c12a:	2807      	cmp	r0, #7
1000c12c:	d809      	bhi.n	1000c142 <gpio_pin_set_config+0x22>
			LPMCU_MISC_REGS0->PINMUX_SEL_0.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000c12e:	4d64      	ldr	r5, [pc, #400]	; (1000c2c0 <gpio_pin_set_config+0x1a0>)
1000c130:	6c6a      	ldr	r2, [r5, #68]	; 0x44
1000c132:	3b10      	subs	r3, #16
1000c134:	4003      	ands	r3, r0
1000c136:	009b      	lsls	r3, r3, #2
1000c138:	2407      	movs	r4, #7
1000c13a:	409c      	lsls	r4, r3
1000c13c:	43a2      	bics	r2, r4
1000c13e:	646a      	str	r2, [r5, #68]	; 0x44
1000c140:	e029      	b.n	1000c196 <gpio_pin_set_config+0x76>
		} else if (gpio_pin <= 15) {
1000c142:	280f      	cmp	r0, #15
1000c144:	d809      	bhi.n	1000c15a <gpio_pin_set_config+0x3a>
			LPMCU_MISC_REGS0->PINMUX_SEL_1.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000c146:	4d5e      	ldr	r5, [pc, #376]	; (1000c2c0 <gpio_pin_set_config+0x1a0>)
1000c148:	6caa      	ldr	r2, [r5, #72]	; 0x48
1000c14a:	2307      	movs	r3, #7
1000c14c:	4003      	ands	r3, r0
1000c14e:	009b      	lsls	r3, r3, #2
1000c150:	2407      	movs	r4, #7
1000c152:	409c      	lsls	r4, r3
1000c154:	43a2      	bics	r2, r4
1000c156:	64aa      	str	r2, [r5, #72]	; 0x48
1000c158:	e01d      	b.n	1000c196 <gpio_pin_set_config+0x76>
		} else if (gpio_pin <= 23) {
1000c15a:	2817      	cmp	r0, #23
1000c15c:	d809      	bhi.n	1000c172 <gpio_pin_set_config+0x52>
			LPMCU_MISC_REGS0->PINMUX_SEL_2.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000c15e:	4d58      	ldr	r5, [pc, #352]	; (1000c2c0 <gpio_pin_set_config+0x1a0>)
1000c160:	6cea      	ldr	r2, [r5, #76]	; 0x4c
1000c162:	2307      	movs	r3, #7
1000c164:	4003      	ands	r3, r0
1000c166:	009b      	lsls	r3, r3, #2
1000c168:	2407      	movs	r4, #7
1000c16a:	409c      	lsls	r4, r3
1000c16c:	43a2      	bics	r2, r4
1000c16e:	64ea      	str	r2, [r5, #76]	; 0x4c
1000c170:	e011      	b.n	1000c196 <gpio_pin_set_config+0x76>
		} else if (44 <= gpio_pin  && gpio_pin < 48) {
1000c172:	0003      	movs	r3, r0
1000c174:	3b2c      	subs	r3, #44	; 0x2c
1000c176:	2b03      	cmp	r3, #3
1000c178:	d80d      	bhi.n	1000c196 <gpio_pin_set_config+0x76>
			/* Set GPIO_MSx as digital mode */
			AON_GP_REGS0->MS_GPIO_MODE.vec.ANALOG_ENABLE_ &= ~(1 << (gpio_pin - PIN_GPIO_MS4));
1000c17a:	4d52      	ldr	r5, [pc, #328]	; (1000c2c4 <gpio_pin_set_config+0x1a4>)
1000c17c:	2482      	movs	r4, #130	; 0x82
1000c17e:	00e4      	lsls	r4, r4, #3
1000c180:	5d2a      	ldrb	r2, [r5, r4]
1000c182:	0712      	lsls	r2, r2, #28
1000c184:	2601      	movs	r6, #1
1000c186:	409e      	lsls	r6, r3
1000c188:	0f12      	lsrs	r2, r2, #28
1000c18a:	5d2b      	ldrb	r3, [r5, r4]
1000c18c:	43b2      	bics	r2, r6
1000c18e:	260f      	movs	r6, #15
1000c190:	43b3      	bics	r3, r6
1000c192:	4313      	orrs	r3, r2
1000c194:	552b      	strb	r3, [r5, r4]
		}
	
		if ((gpio_pin == PIN_AO_GPIO_0) || (gpio_pin == PIN_AO_GPIO_1) ||
1000c196:	0003      	movs	r3, r0
1000c198:	3b1d      	subs	r3, #29
1000c19a:	2b02      	cmp	r3, #2
1000c19c:	d829      	bhi.n	1000c1f2 <gpio_pin_set_config+0xd2>
				(gpio_pin == PIN_AO_GPIO_2)) {
			/* Active Low, Always On Pull Enable Control */
			if (config->input_pull == GPIO_PIN_PULL_UP) {
1000c19e:	784b      	ldrb	r3, [r1, #1]
1000c1a0:	2b01      	cmp	r3, #1
1000c1a2:	d108      	bne.n	1000c1b6 <gpio_pin_set_config+0x96>
				AON_GP_REGS0->AON_PULL_ENABLE.reg &= ~(1 << (31 - gpio_pin));
1000c1a4:	4d47      	ldr	r5, [pc, #284]	; (1000c2c4 <gpio_pin_set_config+0x1a4>)
1000c1a6:	7d2b      	ldrb	r3, [r5, #20]
1000c1a8:	241f      	movs	r4, #31
1000c1aa:	1a24      	subs	r4, r4, r0
1000c1ac:	2201      	movs	r2, #1
1000c1ae:	40a2      	lsls	r2, r4
1000c1b0:	4393      	bics	r3, r2
1000c1b2:	752b      	strb	r3, [r5, #20]
1000c1b4:	e008      	b.n	1000c1c8 <gpio_pin_set_config+0xa8>
			} else {
				AON_GP_REGS0->AON_PULL_ENABLE.reg |= 1 << (31 - gpio_pin);
1000c1b6:	4c43      	ldr	r4, [pc, #268]	; (1000c2c4 <gpio_pin_set_config+0x1a4>)
1000c1b8:	7d25      	ldrb	r5, [r4, #20]
1000c1ba:	221f      	movs	r2, #31
1000c1bc:	1a12      	subs	r2, r2, r0
1000c1be:	2301      	movs	r3, #1
1000c1c0:	4093      	lsls	r3, r2
1000c1c2:	432b      	orrs	r3, r5
1000c1c4:	b2db      	uxtb	r3, r3
1000c1c6:	7523      	strb	r3, [r4, #20]
			}
			if (config->aon_wakeup) {
1000c1c8:	78ca      	ldrb	r2, [r1, #3]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000c1ca:	2300      	movs	r3, #0
			if (config->input_pull == GPIO_PIN_PULL_UP) {
				AON_GP_REGS0->AON_PULL_ENABLE.reg &= ~(1 << (31 - gpio_pin));
			} else {
				AON_GP_REGS0->AON_PULL_ENABLE.reg |= 1 << (31 - gpio_pin);
			}
			if (config->aon_wakeup) {
1000c1cc:	2a00      	cmp	r2, #0
1000c1ce:	d075      	beq.n	1000c2bc <gpio_pin_set_config+0x19c>
				/* Enable AON_GPIO_x to be a wakeup MCU from sleep mode */
				AON_GP_REGS0->AON_PINMUX_SEL.reg |= 1 << (4 * (31 - gpio_pin));
1000c1d0:	493c      	ldr	r1, [pc, #240]	; (1000c2c4 <gpio_pin_set_config+0x1a4>)
1000c1d2:	880c      	ldrh	r4, [r1, #0]
1000c1d4:	221f      	movs	r2, #31
1000c1d6:	1a10      	subs	r0, r2, r0
1000c1d8:	0080      	lsls	r0, r0, #2
1000c1da:	3301      	adds	r3, #1
1000c1dc:	4083      	lsls	r3, r0
1000c1de:	4323      	orrs	r3, r4
1000c1e0:	b29b      	uxth	r3, r3
1000c1e2:	800b      	strh	r3, [r1, #0]
				/* Enable AON_GPIO_x to wake up the BLE domain from sleep mode */
				AON_PWR_SEQ0->GPIO_WAKEUP_CTRL.bit.BLE_ENABLE = 1;
1000c1e4:	4a38      	ldr	r2, [pc, #224]	; (1000c2c8 <gpio_pin_set_config+0x1a8>)
1000c1e6:	7811      	ldrb	r1, [r2, #0]
1000c1e8:	2302      	movs	r3, #2
1000c1ea:	430b      	orrs	r3, r1
1000c1ec:	7013      	strb	r3, [r2, #0]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000c1ee:	2300      	movs	r3, #0
1000c1f0:	e064      	b.n	1000c2bc <gpio_pin_set_config+0x19c>
				AON_GP_REGS0->AON_PINMUX_SEL.reg |= 1 << (4 * (31 - gpio_pin));
				/* Enable AON_GPIO_x to wake up the BLE domain from sleep mode */
				AON_PWR_SEQ0->GPIO_WAKEUP_CTRL.bit.BLE_ENABLE = 1;
			}
		} else {
			if(config->direction == GPIO_PIN_DIR_INPUT) {
1000c1f2:	780a      	ldrb	r2, [r1, #0]
1000c1f4:	2a00      	cmp	r2, #0
1000c1f6:	d140      	bne.n	1000c27a <gpio_pin_set_config+0x15a>
				if(gpio_pin < 16) {
1000c1f8:	280f      	cmp	r0, #15
1000c1fa:	d808      	bhi.n	1000c20e <gpio_pin_set_config+0xee>
					GPIO0->OUTENCLR.reg = (1 << gpio_pin);
1000c1fc:	2301      	movs	r3, #1
1000c1fe:	4083      	lsls	r3, r0
1000c200:	b29b      	uxth	r3, r3
1000c202:	4a32      	ldr	r2, [pc, #200]	; (1000c2cc <gpio_pin_set_config+0x1ac>)
1000c204:	8293      	strh	r3, [r2, #20]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000c206:	2300      	movs	r3, #0
					GPIO1->OUTENCLR.reg = (1 << (gpio_pin % 16));
				} else {
					GPIO2->OUTENCLR.reg = (1 << (gpio_pin % 16));
				}
				/* pull_enable. */
				if (gpio_pin < 32) {
1000c208:	281f      	cmp	r0, #31
1000c20a:	d857      	bhi.n	1000c2bc <gpio_pin_set_config+0x19c>
1000c20c:	e012      	b.n	1000c234 <gpio_pin_set_config+0x114>
			}
		} else {
			if(config->direction == GPIO_PIN_DIR_INPUT) {
				if(gpio_pin < 16) {
					GPIO0->OUTENCLR.reg = (1 << gpio_pin);
				} else if (gpio_pin < 32){
1000c20e:	281f      	cmp	r0, #31
1000c210:	d807      	bhi.n	1000c222 <gpio_pin_set_config+0x102>
					GPIO1->OUTENCLR.reg = (1 << (gpio_pin % 16));
1000c212:	220f      	movs	r2, #15
1000c214:	4002      	ands	r2, r0
1000c216:	2301      	movs	r3, #1
1000c218:	4093      	lsls	r3, r2
1000c21a:	b29b      	uxth	r3, r3
1000c21c:	4a2c      	ldr	r2, [pc, #176]	; (1000c2d0 <gpio_pin_set_config+0x1b0>)
1000c21e:	8293      	strh	r3, [r2, #20]
1000c220:	e008      	b.n	1000c234 <gpio_pin_set_config+0x114>
				} else {
					GPIO2->OUTENCLR.reg = (1 << (gpio_pin % 16));
1000c222:	230f      	movs	r3, #15
1000c224:	4018      	ands	r0, r3
1000c226:	3b0e      	subs	r3, #14
1000c228:	4083      	lsls	r3, r0
1000c22a:	b29b      	uxth	r3, r3
1000c22c:	4a29      	ldr	r2, [pc, #164]	; (1000c2d4 <gpio_pin_set_config+0x1b4>)
1000c22e:	8293      	strh	r3, [r2, #20]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000c230:	2300      	movs	r3, #0
1000c232:	e043      	b.n	1000c2bc <gpio_pin_set_config+0x19c>
				} else {
					GPIO2->OUTENCLR.reg = (1 << (gpio_pin % 16));
				}
				/* pull_enable. */
				if (gpio_pin < 32) {
					switch(config->input_pull) {
1000c234:	784b      	ldrb	r3, [r1, #1]
1000c236:	2b01      	cmp	r3, #1
1000c238:	d00c      	beq.n	1000c254 <gpio_pin_set_config+0x134>
1000c23a:	2b00      	cmp	r3, #0
1000c23c:	d002      	beq.n	1000c244 <gpio_pin_set_config+0x124>
1000c23e:	2b02      	cmp	r3, #2
1000c240:	d010      	beq.n	1000c264 <gpio_pin_set_config+0x144>
1000c242:	e03a      	b.n	1000c2ba <gpio_pin_set_config+0x19a>
						case GPIO_PIN_PULL_NONE:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg |= (1 << gpio_pin);
1000c244:	491e      	ldr	r1, [pc, #120]	; (1000c2c0 <gpio_pin_set_config+0x1a0>)
1000c246:	6d0a      	ldr	r2, [r1, #80]	; 0x50
1000c248:	2301      	movs	r3, #1
1000c24a:	4083      	lsls	r3, r0
1000c24c:	4313      	orrs	r3, r2
1000c24e:	650b      	str	r3, [r1, #80]	; 0x50
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000c250:	2300      	movs	r3, #0
				/* pull_enable. */
				if (gpio_pin < 32) {
					switch(config->input_pull) {
						case GPIO_PIN_PULL_NONE:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg |= (1 << gpio_pin);
							break;
1000c252:	e033      	b.n	1000c2bc <gpio_pin_set_config+0x19c>
						case GPIO_PIN_PULL_UP:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
1000c254:	491a      	ldr	r1, [pc, #104]	; (1000c2c0 <gpio_pin_set_config+0x1a0>)
1000c256:	6d0b      	ldr	r3, [r1, #80]	; 0x50
1000c258:	2201      	movs	r2, #1
1000c25a:	4082      	lsls	r2, r0
1000c25c:	4393      	bics	r3, r2
1000c25e:	650b      	str	r3, [r1, #80]	; 0x50
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000c260:	2300      	movs	r3, #0
						case GPIO_PIN_PULL_NONE:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg |= (1 << gpio_pin);
							break;
						case GPIO_PIN_PULL_UP:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
							break;
1000c262:	e02b      	b.n	1000c2bc <gpio_pin_set_config+0x19c>
						case GPIO_PIN_PULL_DOWN:
							/* Set R-Type */
							LPMCU_MISC_REGS0->RTYPE_PAD_0.reg |= (1 << gpio_pin);
1000c264:	4b16      	ldr	r3, [pc, #88]	; (1000c2c0 <gpio_pin_set_config+0x1a0>)
1000c266:	6d59      	ldr	r1, [r3, #84]	; 0x54
1000c268:	2201      	movs	r2, #1
1000c26a:	4082      	lsls	r2, r0
1000c26c:	4311      	orrs	r1, r2
1000c26e:	6559      	str	r1, [r3, #84]	; 0x54
							/* Set REN */
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
1000c270:	6d19      	ldr	r1, [r3, #80]	; 0x50
1000c272:	4391      	bics	r1, r2
1000c274:	6519      	str	r1, [r3, #80]	; 0x50
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000c276:	2300      	movs	r3, #0
						case GPIO_PIN_PULL_DOWN:
							/* Set R-Type */
							LPMCU_MISC_REGS0->RTYPE_PAD_0.reg |= (1 << gpio_pin);
							/* Set REN */
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
							break;
1000c278:	e020      	b.n	1000c2bc <gpio_pin_set_config+0x19c>
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000c27a:	2300      	movs	r3, #0
						default:
							status = STATUS_ERR_INVALID_ARG;
							break;
					}
				}
			} else if(config->direction == GPIO_PIN_DIR_OUTPUT) {
1000c27c:	2a01      	cmp	r2, #1
1000c27e:	d11d      	bne.n	1000c2bc <gpio_pin_set_config+0x19c>
				if (gpio_pin < 16) {
1000c280:	280f      	cmp	r0, #15
1000c282:	d806      	bhi.n	1000c292 <gpio_pin_set_config+0x172>
					GPIO0->OUTENSET.reg = (1 << gpio_pin);
1000c284:	3301      	adds	r3, #1
1000c286:	4083      	lsls	r3, r0
1000c288:	b29b      	uxth	r3, r3
1000c28a:	4a10      	ldr	r2, [pc, #64]	; (1000c2cc <gpio_pin_set_config+0x1ac>)
1000c28c:	8213      	strh	r3, [r2, #16]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000c28e:	2300      	movs	r3, #0
1000c290:	e014      	b.n	1000c2bc <gpio_pin_set_config+0x19c>
					}
				}
			} else if(config->direction == GPIO_PIN_DIR_OUTPUT) {
				if (gpio_pin < 16) {
					GPIO0->OUTENSET.reg = (1 << gpio_pin);
				} else if (gpio_pin < 32) {
1000c292:	281f      	cmp	r0, #31
1000c294:	d808      	bhi.n	1000c2a8 <gpio_pin_set_config+0x188>
					GPIO1->OUTENSET.reg = (1 << (gpio_pin % 16));
1000c296:	230f      	movs	r3, #15
1000c298:	4018      	ands	r0, r3
1000c29a:	3b0e      	subs	r3, #14
1000c29c:	4083      	lsls	r3, r0
1000c29e:	b29b      	uxth	r3, r3
1000c2a0:	4a0b      	ldr	r2, [pc, #44]	; (1000c2d0 <gpio_pin_set_config+0x1b0>)
1000c2a2:	8213      	strh	r3, [r2, #16]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000c2a4:	2300      	movs	r3, #0
1000c2a6:	e009      	b.n	1000c2bc <gpio_pin_set_config+0x19c>
				if (gpio_pin < 16) {
					GPIO0->OUTENSET.reg = (1 << gpio_pin);
				} else if (gpio_pin < 32) {
					GPIO1->OUTENSET.reg = (1 << (gpio_pin % 16));
				} else {
					GPIO2->OUTENSET.reg = (1 << (gpio_pin % 16));
1000c2a8:	230f      	movs	r3, #15
1000c2aa:	4018      	ands	r0, r3
1000c2ac:	3b0e      	subs	r3, #14
1000c2ae:	4083      	lsls	r3, r0
1000c2b0:	b29b      	uxth	r3, r3
1000c2b2:	4a08      	ldr	r2, [pc, #32]	; (1000c2d4 <gpio_pin_set_config+0x1b4>)
1000c2b4:	8213      	strh	r3, [r2, #16]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000c2b6:	2300      	movs	r3, #0
1000c2b8:	e000      	b.n	1000c2bc <gpio_pin_set_config+0x19c>
							LPMCU_MISC_REGS0->RTYPE_PAD_0.reg |= (1 << gpio_pin);
							/* Set REN */
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
							break;
						default:
							status = STATUS_ERR_INVALID_ARG;
1000c2ba:	2317      	movs	r3, #23
				}
			}
		}
	}
	return status;
}
1000c2bc:	0018      	movs	r0, r3
1000c2be:	bd70      	pop	{r4, r5, r6, pc}
1000c2c0:	4000b000 	.word	0x4000b000
1000c2c4:	4000f000 	.word	0x4000f000
1000c2c8:	4000e000 	.word	0x4000e000
1000c2cc:	40010000 	.word	0x40010000
1000c2d0:	40011000 	.word	0x40011000
1000c2d4:	40013000 	.word	0x40013000

1000c2d8 <gpio_pin_get_input_level>:
 */
bool gpio_pin_get_input_level(const uint8_t gpio_pin)
{
	uint32_t regval = 0;

	if (gpio_pin < 16) {
1000c2d8:	280f      	cmp	r0, #15
1000c2da:	d806      	bhi.n	1000c2ea <gpio_pin_get_input_level+0x12>
		regval = GPIO0->DATA.reg;
1000c2dc:	4b0f      	ldr	r3, [pc, #60]	; (1000c31c <gpio_pin_get_input_level+0x44>)
1000c2de:	8819      	ldrh	r1, [r3, #0]
		regval &= (1 << gpio_pin);
1000c2e0:	2301      	movs	r3, #1
1000c2e2:	4083      	lsls	r3, r0
1000c2e4:	0018      	movs	r0, r3
1000c2e6:	4008      	ands	r0, r1
1000c2e8:	e014      	b.n	1000c314 <gpio_pin_get_input_level+0x3c>
	} else if (gpio_pin < 32) {
1000c2ea:	281f      	cmp	r0, #31
1000c2ec:	d809      	bhi.n	1000c302 <gpio_pin_get_input_level+0x2a>
		regval = GPIO1->DATA.reg;
1000c2ee:	4b0c      	ldr	r3, [pc, #48]	; (1000c320 <gpio_pin_get_input_level+0x48>)
1000c2f0:	8819      	ldrh	r1, [r3, #0]
		regval &= (1 << (gpio_pin % 16));
1000c2f2:	230f      	movs	r3, #15
1000c2f4:	4003      	ands	r3, r0
1000c2f6:	001a      	movs	r2, r3
1000c2f8:	2301      	movs	r3, #1
1000c2fa:	4093      	lsls	r3, r2
1000c2fc:	0018      	movs	r0, r3
1000c2fe:	4008      	ands	r0, r1
1000c300:	e008      	b.n	1000c314 <gpio_pin_get_input_level+0x3c>
	} else {
		regval = GPIO2->DATA.reg;
1000c302:	4b08      	ldr	r3, [pc, #32]	; (1000c324 <gpio_pin_get_input_level+0x4c>)
1000c304:	8819      	ldrh	r1, [r3, #0]
		regval &= (1 << (gpio_pin % 16));
1000c306:	230f      	movs	r3, #15
1000c308:	4003      	ands	r3, r0
1000c30a:	001a      	movs	r2, r3
1000c30c:	2301      	movs	r3, #1
1000c30e:	4093      	lsls	r3, r2
1000c310:	0018      	movs	r0, r3
1000c312:	4008      	ands	r0, r1
	}

	return regval;
1000c314:	1e43      	subs	r3, r0, #1
1000c316:	4198      	sbcs	r0, r3
1000c318:	b2c0      	uxtb	r0, r0
}
1000c31a:	4770      	bx	lr
1000c31c:	40010000 	.word	0x40010000
1000c320:	40011000 	.word	0x40011000
1000c324:	40013000 	.word	0x40013000

1000c328 <gpio_pin_get_output_level>:
 */
bool gpio_pin_get_output_level(const uint8_t gpio_pin)
{
	uint32_t regval = 0;

	if (gpio_pin < 16) {
1000c328:	280f      	cmp	r0, #15
1000c32a:	d806      	bhi.n	1000c33a <gpio_pin_get_output_level+0x12>
		regval = GPIO0->DATAOUT.reg;
1000c32c:	4b0f      	ldr	r3, [pc, #60]	; (1000c36c <gpio_pin_get_output_level+0x44>)
1000c32e:	8899      	ldrh	r1, [r3, #4]
		regval &= (1 << gpio_pin);
1000c330:	2301      	movs	r3, #1
1000c332:	4083      	lsls	r3, r0
1000c334:	0018      	movs	r0, r3
1000c336:	4008      	ands	r0, r1
1000c338:	e014      	b.n	1000c364 <gpio_pin_get_output_level+0x3c>
	} else if (gpio_pin < 32) {
1000c33a:	281f      	cmp	r0, #31
1000c33c:	d809      	bhi.n	1000c352 <gpio_pin_get_output_level+0x2a>
		regval = GPIO1->DATAOUT.reg;
1000c33e:	4b0c      	ldr	r3, [pc, #48]	; (1000c370 <gpio_pin_get_output_level+0x48>)
1000c340:	8899      	ldrh	r1, [r3, #4]
		regval &= (1 << (gpio_pin % 16));
1000c342:	230f      	movs	r3, #15
1000c344:	4003      	ands	r3, r0
1000c346:	001a      	movs	r2, r3
1000c348:	2301      	movs	r3, #1
1000c34a:	4093      	lsls	r3, r2
1000c34c:	0018      	movs	r0, r3
1000c34e:	4008      	ands	r0, r1
1000c350:	e008      	b.n	1000c364 <gpio_pin_get_output_level+0x3c>
	} else {
		regval = GPIO2->DATAOUT.reg;
1000c352:	4b08      	ldr	r3, [pc, #32]	; (1000c374 <gpio_pin_get_output_level+0x4c>)
1000c354:	8899      	ldrh	r1, [r3, #4]
		regval &= (1 << (gpio_pin % 16));
1000c356:	230f      	movs	r3, #15
1000c358:	4003      	ands	r3, r0
1000c35a:	001a      	movs	r2, r3
1000c35c:	2301      	movs	r3, #1
1000c35e:	4093      	lsls	r3, r2
1000c360:	0018      	movs	r0, r3
1000c362:	4008      	ands	r0, r1
	}

	return regval;
1000c364:	1e43      	subs	r3, r0, #1
1000c366:	4198      	sbcs	r0, r3
1000c368:	b2c0      	uxtb	r0, r0
}
1000c36a:	4770      	bx	lr
1000c36c:	40010000 	.word	0x40010000
1000c370:	40011000 	.word	0x40011000
1000c374:	40013000 	.word	0x40013000

1000c378 <gpio_pin_set_output_level>:
 *
 *  \param[in] gpio_pin  Index of the GPIO pin to write to.
 *  \param[in] level     Logical level to set the given pin to.
 */
void gpio_pin_set_output_level(const uint8_t gpio_pin, const bool level)
{
1000c378:	b510      	push	{r4, lr}
	if (gpio_pin < 16) {
1000c37a:	280f      	cmp	r0, #15
1000c37c:	d810      	bhi.n	1000c3a0 <gpio_pin_set_output_level+0x28>
		if(level) {
1000c37e:	2900      	cmp	r1, #0
1000c380:	d007      	beq.n	1000c392 <gpio_pin_set_output_level+0x1a>
			GPIO0->DATAOUT.reg |= (1 << gpio_pin);
1000c382:	4a1d      	ldr	r2, [pc, #116]	; (1000c3f8 <gpio_pin_set_output_level+0x80>)
1000c384:	8891      	ldrh	r1, [r2, #4]
1000c386:	2301      	movs	r3, #1
1000c388:	4083      	lsls	r3, r0
1000c38a:	430b      	orrs	r3, r1
1000c38c:	b29b      	uxth	r3, r3
1000c38e:	8093      	strh	r3, [r2, #4]
1000c390:	e031      	b.n	1000c3f6 <gpio_pin_set_output_level+0x7e>
		} else {
			GPIO0->DATAOUT.reg &= ~(1 << gpio_pin);
1000c392:	4919      	ldr	r1, [pc, #100]	; (1000c3f8 <gpio_pin_set_output_level+0x80>)
1000c394:	888b      	ldrh	r3, [r1, #4]
1000c396:	2201      	movs	r2, #1
1000c398:	4082      	lsls	r2, r0
1000c39a:	4393      	bics	r3, r2
1000c39c:	808b      	strh	r3, [r1, #4]
1000c39e:	e02a      	b.n	1000c3f6 <gpio_pin_set_output_level+0x7e>
		}
	} else if (gpio_pin < 32) {
1000c3a0:	281f      	cmp	r0, #31
1000c3a2:	d814      	bhi.n	1000c3ce <gpio_pin_set_output_level+0x56>
		if(level) {
1000c3a4:	2900      	cmp	r1, #0
1000c3a6:	d009      	beq.n	1000c3bc <gpio_pin_set_output_level+0x44>
			GPIO1->DATAOUT.reg |= (1 << (gpio_pin % 16));
1000c3a8:	4914      	ldr	r1, [pc, #80]	; (1000c3fc <gpio_pin_set_output_level+0x84>)
1000c3aa:	888c      	ldrh	r4, [r1, #4]
1000c3ac:	220f      	movs	r2, #15
1000c3ae:	4010      	ands	r0, r2
1000c3b0:	2301      	movs	r3, #1
1000c3b2:	4083      	lsls	r3, r0
1000c3b4:	4323      	orrs	r3, r4
1000c3b6:	b29b      	uxth	r3, r3
1000c3b8:	808b      	strh	r3, [r1, #4]
1000c3ba:	e01c      	b.n	1000c3f6 <gpio_pin_set_output_level+0x7e>
		} else {
			GPIO1->DATAOUT.reg &= ~(1 << (gpio_pin % 16));
1000c3bc:	490f      	ldr	r1, [pc, #60]	; (1000c3fc <gpio_pin_set_output_level+0x84>)
1000c3be:	888b      	ldrh	r3, [r1, #4]
1000c3c0:	220f      	movs	r2, #15
1000c3c2:	4010      	ands	r0, r2
1000c3c4:	3a0e      	subs	r2, #14
1000c3c6:	4082      	lsls	r2, r0
1000c3c8:	4393      	bics	r3, r2
1000c3ca:	808b      	strh	r3, [r1, #4]
1000c3cc:	e013      	b.n	1000c3f6 <gpio_pin_set_output_level+0x7e>
		}
	} else {
		if(level) {
1000c3ce:	2900      	cmp	r1, #0
1000c3d0:	d009      	beq.n	1000c3e6 <gpio_pin_set_output_level+0x6e>
			GPIO2->DATAOUT.reg |= (1 << (gpio_pin % 16));
1000c3d2:	490b      	ldr	r1, [pc, #44]	; (1000c400 <gpio_pin_set_output_level+0x88>)
1000c3d4:	888c      	ldrh	r4, [r1, #4]
1000c3d6:	220f      	movs	r2, #15
1000c3d8:	4010      	ands	r0, r2
1000c3da:	2301      	movs	r3, #1
1000c3dc:	4083      	lsls	r3, r0
1000c3de:	4323      	orrs	r3, r4
1000c3e0:	b29b      	uxth	r3, r3
1000c3e2:	808b      	strh	r3, [r1, #4]
1000c3e4:	e007      	b.n	1000c3f6 <gpio_pin_set_output_level+0x7e>
		} else {
			GPIO2->DATAOUT.reg &= ~(1 << (gpio_pin % 16));
1000c3e6:	4906      	ldr	r1, [pc, #24]	; (1000c400 <gpio_pin_set_output_level+0x88>)
1000c3e8:	888b      	ldrh	r3, [r1, #4]
1000c3ea:	220f      	movs	r2, #15
1000c3ec:	4010      	ands	r0, r2
1000c3ee:	3a0e      	subs	r2, #14
1000c3f0:	4082      	lsls	r2, r0
1000c3f2:	4393      	bics	r3, r2
1000c3f4:	808b      	strh	r3, [r1, #4]
		}
	}
}
1000c3f6:	bd10      	pop	{r4, pc}
1000c3f8:	40010000 	.word	0x40010000
1000c3fc:	40011000 	.word	0x40011000
1000c400:	40013000 	.word	0x40013000

1000c404 <gpio_pinmux_cofiguration>:
 *
 *  \param[in] gpio_pin   Index of the GPIO pin to toggle.
 *  \param[in] pinmux_sel PINMUX selection.
 */
void gpio_pinmux_cofiguration(const uint8_t gpio_pin, uint16_t pinmux_sel)
{
1000c404:	b570      	push	{r4, r5, r6, lr}
	uint8_t megamux_sel = (pinmux_sel >> 8) & 0xFF;
1000c406:	0a0d      	lsrs	r5, r1, #8

	pinmux_sel &= 0xFF;
1000c408:	23ff      	movs	r3, #255	; 0xff
1000c40a:	4019      	ands	r1, r3

	if (gpio_pin <= 7) {
1000c40c:	2807      	cmp	r0, #7
1000c40e:	d833      	bhi.n	1000c478 <gpio_pinmux_cofiguration+0x74>
		LPMCU_MISC_REGS0->PINMUX_SEL_0.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000c410:	4a4e      	ldr	r2, [pc, #312]	; (1000c54c <gpio_pinmux_cofiguration+0x148>)
1000c412:	6c54      	ldr	r4, [r2, #68]	; 0x44
1000c414:	3bf8      	subs	r3, #248	; 0xf8
1000c416:	4003      	ands	r3, r0
1000c418:	009b      	lsls	r3, r3, #2
1000c41a:	2607      	movs	r6, #7
1000c41c:	409e      	lsls	r6, r3
1000c41e:	43b4      	bics	r4, r6
1000c420:	6454      	str	r4, [r2, #68]	; 0x44
		LPMCU_MISC_REGS0->PINMUX_SEL_0.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
1000c422:	6c54      	ldr	r4, [r2, #68]	; 0x44
1000c424:	000e      	movs	r6, r1
1000c426:	409e      	lsls	r6, r3
1000c428:	0033      	movs	r3, r6
1000c42a:	4323      	orrs	r3, r4
1000c42c:	6453      	str	r3, [r2, #68]	; 0x44
		if (pinmux_sel == 0x01) {
1000c42e:	2901      	cmp	r1, #1
1000c430:	d000      	beq.n	1000c434 <gpio_pinmux_cofiguration+0x30>
1000c432:	e08a      	b.n	1000c54a <gpio_pinmux_cofiguration+0x146>
			if (gpio_pin <= 3) {
1000c434:	2803      	cmp	r0, #3
1000c436:	d80f      	bhi.n	1000c458 <gpio_pinmux_cofiguration+0x54>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_0.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000c438:	0011      	movs	r1, r2
1000c43a:	22d0      	movs	r2, #208	; 0xd0
1000c43c:	0052      	lsls	r2, r2, #1
1000c43e:	588c      	ldr	r4, [r1, r2]
1000c440:	2303      	movs	r3, #3
1000c442:	4018      	ands	r0, r3
1000c444:	00c0      	lsls	r0, r0, #3
1000c446:	333c      	adds	r3, #60	; 0x3c
1000c448:	4083      	lsls	r3, r0
1000c44a:	439c      	bics	r4, r3
1000c44c:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_0.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000c44e:	588b      	ldr	r3, [r1, r2]
1000c450:	4085      	lsls	r5, r0
1000c452:	431d      	orrs	r5, r3
1000c454:	508d      	str	r5, [r1, r2]
1000c456:	e078      	b.n	1000c54a <gpio_pinmux_cofiguration+0x146>
			} else if (gpio_pin <= 7) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_1.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000c458:	493c      	ldr	r1, [pc, #240]	; (1000c54c <gpio_pinmux_cofiguration+0x148>)
1000c45a:	22d2      	movs	r2, #210	; 0xd2
1000c45c:	0052      	lsls	r2, r2, #1
1000c45e:	588c      	ldr	r4, [r1, r2]
1000c460:	2303      	movs	r3, #3
1000c462:	4018      	ands	r0, r3
1000c464:	00c0      	lsls	r0, r0, #3
1000c466:	333c      	adds	r3, #60	; 0x3c
1000c468:	4083      	lsls	r3, r0
1000c46a:	439c      	bics	r4, r3
1000c46c:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_1.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000c46e:	588b      	ldr	r3, [r1, r2]
1000c470:	4085      	lsls	r5, r0
1000c472:	431d      	orrs	r5, r3
1000c474:	508d      	str	r5, [r1, r2]
1000c476:	e068      	b.n	1000c54a <gpio_pinmux_cofiguration+0x146>
			}
		}
	} else if (gpio_pin <= 15) {
1000c478:	280f      	cmp	r0, #15
1000c47a:	d832      	bhi.n	1000c4e2 <gpio_pinmux_cofiguration+0xde>
		LPMCU_MISC_REGS0->PINMUX_SEL_1.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000c47c:	4a33      	ldr	r2, [pc, #204]	; (1000c54c <gpio_pinmux_cofiguration+0x148>)
1000c47e:	6c94      	ldr	r4, [r2, #72]	; 0x48
1000c480:	2307      	movs	r3, #7
1000c482:	4003      	ands	r3, r0
1000c484:	009b      	lsls	r3, r3, #2
1000c486:	2607      	movs	r6, #7
1000c488:	409e      	lsls	r6, r3
1000c48a:	43b4      	bics	r4, r6
1000c48c:	6494      	str	r4, [r2, #72]	; 0x48
		LPMCU_MISC_REGS0->PINMUX_SEL_1.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
1000c48e:	6c94      	ldr	r4, [r2, #72]	; 0x48
1000c490:	000e      	movs	r6, r1
1000c492:	409e      	lsls	r6, r3
1000c494:	0033      	movs	r3, r6
1000c496:	4323      	orrs	r3, r4
1000c498:	6493      	str	r3, [r2, #72]	; 0x48
		if (pinmux_sel == 0x01) {
1000c49a:	2901      	cmp	r1, #1
1000c49c:	d155      	bne.n	1000c54a <gpio_pinmux_cofiguration+0x146>
			if (gpio_pin <= 11) {
1000c49e:	280b      	cmp	r0, #11
1000c4a0:	d80f      	bhi.n	1000c4c2 <gpio_pinmux_cofiguration+0xbe>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_2.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000c4a2:	0011      	movs	r1, r2
1000c4a4:	22d4      	movs	r2, #212	; 0xd4
1000c4a6:	0052      	lsls	r2, r2, #1
1000c4a8:	588c      	ldr	r4, [r1, r2]
1000c4aa:	2303      	movs	r3, #3
1000c4ac:	4018      	ands	r0, r3
1000c4ae:	00c0      	lsls	r0, r0, #3
1000c4b0:	333c      	adds	r3, #60	; 0x3c
1000c4b2:	4083      	lsls	r3, r0
1000c4b4:	439c      	bics	r4, r3
1000c4b6:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_2.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000c4b8:	588b      	ldr	r3, [r1, r2]
1000c4ba:	4085      	lsls	r5, r0
1000c4bc:	431d      	orrs	r5, r3
1000c4be:	508d      	str	r5, [r1, r2]
1000c4c0:	e043      	b.n	1000c54a <gpio_pinmux_cofiguration+0x146>
			} else if (gpio_pin <= 15) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_3.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000c4c2:	4922      	ldr	r1, [pc, #136]	; (1000c54c <gpio_pinmux_cofiguration+0x148>)
1000c4c4:	22d6      	movs	r2, #214	; 0xd6
1000c4c6:	0052      	lsls	r2, r2, #1
1000c4c8:	588c      	ldr	r4, [r1, r2]
1000c4ca:	2303      	movs	r3, #3
1000c4cc:	4018      	ands	r0, r3
1000c4ce:	00c0      	lsls	r0, r0, #3
1000c4d0:	333c      	adds	r3, #60	; 0x3c
1000c4d2:	4083      	lsls	r3, r0
1000c4d4:	439c      	bics	r4, r3
1000c4d6:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_3.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000c4d8:	588b      	ldr	r3, [r1, r2]
1000c4da:	4085      	lsls	r5, r0
1000c4dc:	431d      	orrs	r5, r3
1000c4de:	508d      	str	r5, [r1, r2]
1000c4e0:	e033      	b.n	1000c54a <gpio_pinmux_cofiguration+0x146>
			}
		}
	} else if (gpio_pin <= 23) {
1000c4e2:	2817      	cmp	r0, #23
1000c4e4:	d831      	bhi.n	1000c54a <gpio_pinmux_cofiguration+0x146>
		LPMCU_MISC_REGS0->PINMUX_SEL_2.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000c4e6:	4a19      	ldr	r2, [pc, #100]	; (1000c54c <gpio_pinmux_cofiguration+0x148>)
1000c4e8:	6cd4      	ldr	r4, [r2, #76]	; 0x4c
1000c4ea:	2307      	movs	r3, #7
1000c4ec:	4003      	ands	r3, r0
1000c4ee:	009b      	lsls	r3, r3, #2
1000c4f0:	2607      	movs	r6, #7
1000c4f2:	409e      	lsls	r6, r3
1000c4f4:	43b4      	bics	r4, r6
1000c4f6:	64d4      	str	r4, [r2, #76]	; 0x4c
		LPMCU_MISC_REGS0->PINMUX_SEL_2.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
1000c4f8:	6cd4      	ldr	r4, [r2, #76]	; 0x4c
1000c4fa:	000e      	movs	r6, r1
1000c4fc:	409e      	lsls	r6, r3
1000c4fe:	0033      	movs	r3, r6
1000c500:	4323      	orrs	r3, r4
1000c502:	64d3      	str	r3, [r2, #76]	; 0x4c
		if (pinmux_sel == 0x01) {
1000c504:	2901      	cmp	r1, #1
1000c506:	d120      	bne.n	1000c54a <gpio_pinmux_cofiguration+0x146>
			if (gpio_pin <= 19) {
1000c508:	2813      	cmp	r0, #19
1000c50a:	d80f      	bhi.n	1000c52c <gpio_pinmux_cofiguration+0x128>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_4.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000c50c:	0011      	movs	r1, r2
1000c50e:	22d8      	movs	r2, #216	; 0xd8
1000c510:	0052      	lsls	r2, r2, #1
1000c512:	588c      	ldr	r4, [r1, r2]
1000c514:	2303      	movs	r3, #3
1000c516:	4018      	ands	r0, r3
1000c518:	00c0      	lsls	r0, r0, #3
1000c51a:	333c      	adds	r3, #60	; 0x3c
1000c51c:	4083      	lsls	r3, r0
1000c51e:	439c      	bics	r4, r3
1000c520:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_4.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000c522:	588b      	ldr	r3, [r1, r2]
1000c524:	4085      	lsls	r5, r0
1000c526:	431d      	orrs	r5, r3
1000c528:	508d      	str	r5, [r1, r2]
1000c52a:	e00e      	b.n	1000c54a <gpio_pinmux_cofiguration+0x146>
			} else if (gpio_pin <= 23) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_5.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000c52c:	4a07      	ldr	r2, [pc, #28]	; (1000c54c <gpio_pinmux_cofiguration+0x148>)
1000c52e:	23da      	movs	r3, #218	; 0xda
1000c530:	005b      	lsls	r3, r3, #1
1000c532:	58d1      	ldr	r1, [r2, r3]
1000c534:	2403      	movs	r4, #3
1000c536:	4020      	ands	r0, r4
1000c538:	00c0      	lsls	r0, r0, #3
1000c53a:	343c      	adds	r4, #60	; 0x3c
1000c53c:	4084      	lsls	r4, r0
1000c53e:	43a1      	bics	r1, r4
1000c540:	50d1      	str	r1, [r2, r3]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_5.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000c542:	58d1      	ldr	r1, [r2, r3]
1000c544:	4085      	lsls	r5, r0
1000c546:	430d      	orrs	r5, r1
1000c548:	50d5      	str	r5, [r2, r3]
			}
		}
	}
}
1000c54a:	bd70      	pop	{r4, r5, r6, pc}
1000c54c:	4000b000 	.word	0x4000b000

1000c550 <gpio_register_callback>:
 * \param[in]  callback_type  Callback type given by an enum
 *
 */
void gpio_register_callback(uint8_t gpio_pin, gpio_callback_t callback_func,
				enum gpio_callback callback_type)
{
1000c550:	b5f0      	push	{r4, r5, r6, r7, lr}
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
		gpio_port = 0;
1000c552:	2300      	movs	r3, #0
	Assert(callback_func);
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
1000c554:	280f      	cmp	r0, #15
1000c556:	d904      	bls.n	1000c562 <gpio_register_callback+0x12>
		gpio_port = 0;
	} else if (gpio_pin < 32) {
		gpio_port = 1;
	} else {
		gpio_port = 2;
1000c558:	241f      	movs	r4, #31
1000c55a:	4284      	cmp	r4, r0
1000c55c:	415b      	adcs	r3, r3
1000c55e:	3c1d      	subs	r4, #29
1000c560:	1ae3      	subs	r3, r4, r3
	}
	switch (callback_type) {
1000c562:	2a01      	cmp	r2, #1
1000c564:	d016      	beq.n	1000c594 <gpio_register_callback+0x44>
1000c566:	2a00      	cmp	r2, #0
1000c568:	d004      	beq.n	1000c574 <gpio_register_callback+0x24>
1000c56a:	2a02      	cmp	r2, #2
1000c56c:	d022      	beq.n	1000c5b4 <gpio_register_callback+0x64>
1000c56e:	2a03      	cmp	r2, #3
1000c570:	d030      	beq.n	1000c5d4 <gpio_register_callback+0x84>
1000c572:	e03e      	b.n	1000c5f2 <gpio_register_callback+0xa2>
	case GPIO_CALLBACK_LOW:
		_gpio_instances[gpio_port].hw->INTTYPECLR.reg = 1 << (gpio_pin % 16);
1000c574:	4e29      	ldr	r6, [pc, #164]	; (1000c61c <gpio_register_callback+0xcc>)
1000c576:	00dc      	lsls	r4, r3, #3
1000c578:	18e2      	adds	r2, r4, r3
1000c57a:	00d2      	lsls	r2, r2, #3
1000c57c:	5997      	ldr	r7, [r2, r6]
1000c57e:	250f      	movs	r5, #15
1000c580:	4005      	ands	r5, r0
1000c582:	2201      	movs	r2, #1
1000c584:	40aa      	lsls	r2, r5
1000c586:	b292      	uxth	r2, r2
1000c588:	85ba      	strh	r2, [r7, #44]	; 0x2c
		_gpio_instances[gpio_port].hw->INTPOLCLR.reg = 1 << (gpio_pin % 16);
1000c58a:	18e4      	adds	r4, r4, r3
1000c58c:	00e4      	lsls	r4, r4, #3
1000c58e:	59a4      	ldr	r4, [r4, r6]
1000c590:	86a2      	strh	r2, [r4, #52]	; 0x34
		break;
1000c592:	e02e      	b.n	1000c5f2 <gpio_register_callback+0xa2>

	case GPIO_CALLBACK_HIGH:
		_gpio_instances[gpio_port].hw->INTTYPECLR.reg = 1 << (gpio_pin % 16);
1000c594:	4e21      	ldr	r6, [pc, #132]	; (1000c61c <gpio_register_callback+0xcc>)
1000c596:	00dc      	lsls	r4, r3, #3
1000c598:	18e2      	adds	r2, r4, r3
1000c59a:	00d2      	lsls	r2, r2, #3
1000c59c:	5997      	ldr	r7, [r2, r6]
1000c59e:	250f      	movs	r5, #15
1000c5a0:	4005      	ands	r5, r0
1000c5a2:	2201      	movs	r2, #1
1000c5a4:	40aa      	lsls	r2, r5
1000c5a6:	b292      	uxth	r2, r2
1000c5a8:	85ba      	strh	r2, [r7, #44]	; 0x2c
		_gpio_instances[gpio_port].hw->INTPOLSET.reg = 1 << (gpio_pin % 16);
1000c5aa:	18e4      	adds	r4, r4, r3
1000c5ac:	00e4      	lsls	r4, r4, #3
1000c5ae:	59a4      	ldr	r4, [r4, r6]
1000c5b0:	8622      	strh	r2, [r4, #48]	; 0x30
		break;
1000c5b2:	e01e      	b.n	1000c5f2 <gpio_register_callback+0xa2>

	case GPIO_CALLBACK_RISING:
		_gpio_instances[gpio_port].hw->INTTYPESET.reg = 1 << (gpio_pin % 16);
1000c5b4:	4e19      	ldr	r6, [pc, #100]	; (1000c61c <gpio_register_callback+0xcc>)
1000c5b6:	00dc      	lsls	r4, r3, #3
1000c5b8:	18e2      	adds	r2, r4, r3
1000c5ba:	00d2      	lsls	r2, r2, #3
1000c5bc:	5997      	ldr	r7, [r2, r6]
1000c5be:	250f      	movs	r5, #15
1000c5c0:	4005      	ands	r5, r0
1000c5c2:	2201      	movs	r2, #1
1000c5c4:	40aa      	lsls	r2, r5
1000c5c6:	b292      	uxth	r2, r2
1000c5c8:	853a      	strh	r2, [r7, #40]	; 0x28
		_gpio_instances[gpio_port].hw->INTPOLSET.reg = 1 << (gpio_pin % 16);
1000c5ca:	18e4      	adds	r4, r4, r3
1000c5cc:	00e4      	lsls	r4, r4, #3
1000c5ce:	59a4      	ldr	r4, [r4, r6]
1000c5d0:	8622      	strh	r2, [r4, #48]	; 0x30
		break;
1000c5d2:	e00e      	b.n	1000c5f2 <gpio_register_callback+0xa2>

	case GPIO_CALLBACK_FALLING:
		_gpio_instances[gpio_port].hw->INTTYPESET.reg = 1 << (gpio_pin % 16);
1000c5d4:	4e11      	ldr	r6, [pc, #68]	; (1000c61c <gpio_register_callback+0xcc>)
1000c5d6:	00dc      	lsls	r4, r3, #3
1000c5d8:	18e2      	adds	r2, r4, r3
1000c5da:	00d2      	lsls	r2, r2, #3
1000c5dc:	5997      	ldr	r7, [r2, r6]
1000c5de:	250f      	movs	r5, #15
1000c5e0:	4005      	ands	r5, r0
1000c5e2:	2201      	movs	r2, #1
1000c5e4:	40aa      	lsls	r2, r5
1000c5e6:	b292      	uxth	r2, r2
1000c5e8:	853a      	strh	r2, [r7, #40]	; 0x28
		_gpio_instances[gpio_port].hw->INTPOLCLR.reg = (1 << (gpio_pin % 16));
1000c5ea:	18e4      	adds	r4, r4, r3
1000c5ec:	00e4      	lsls	r4, r4, #3
1000c5ee:	59a4      	ldr	r4, [r4, r6]
1000c5f0:	86a2      	strh	r2, [r4, #52]	; 0x34

	case GPIO_CALLBACK_N:
		break;
	}
	/* Register callback function */
	_gpio_instances[gpio_port].callback[gpio_pin % 16] = callback_func;
1000c5f2:	220f      	movs	r2, #15
1000c5f4:	4010      	ands	r0, r2
1000c5f6:	4c09      	ldr	r4, [pc, #36]	; (1000c61c <gpio_register_callback+0xcc>)
1000c5f8:	00dd      	lsls	r5, r3, #3
1000c5fa:	18ea      	adds	r2, r5, r3
1000c5fc:	0052      	lsls	r2, r2, #1
1000c5fe:	1812      	adds	r2, r2, r0
1000c600:	0092      	lsls	r2, r2, #2
1000c602:	18a2      	adds	r2, r4, r2
1000c604:	6051      	str	r1, [r2, #4]
	/* Set the bit corresponding to the gpio pin */
	_gpio_instances[gpio_port].callback_reg_mask |= (1 << (gpio_pin % 16));
1000c606:	18ea      	adds	r2, r5, r3
1000c608:	00d2      	lsls	r2, r2, #3
1000c60a:	18a2      	adds	r2, r4, r2
1000c60c:	3244      	adds	r2, #68	; 0x44
1000c60e:	2101      	movs	r1, #1
1000c610:	4081      	lsls	r1, r0
1000c612:	8813      	ldrh	r3, [r2, #0]
1000c614:	430b      	orrs	r3, r1
1000c616:	8013      	strh	r3, [r2, #0]
}
1000c618:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000c61a:	46c0      	nop			; (mov r8, r8)
1000c61c:	1001a358 	.word	0x1001a358

1000c620 <gpio_enable_callback>:
 * conditions for the callback type are met.
 *
 * \param[in]  gpio_pin   GPIO pin
 */
void gpio_enable_callback(uint8_t gpio_pin)
{
1000c620:	b530      	push	{r4, r5, lr}
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
1000c622:	280f      	cmp	r0, #15
1000c624:	d805      	bhi.n	1000c632 <gpio_enable_callback+0x12>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000c626:	2280      	movs	r2, #128	; 0x80
1000c628:	0412      	lsls	r2, r2, #16
1000c62a:	4b12      	ldr	r3, [pc, #72]	; (1000c674 <gpio_enable_callback+0x54>)
1000c62c:	601a      	str	r2, [r3, #0]
		gpio_port = 0;
1000c62e:	2200      	movs	r2, #0
1000c630:	e00c      	b.n	1000c64c <gpio_enable_callback+0x2c>
		NVIC_EnableIRQ(GPIO0_IRQn);
	} else if (gpio_pin < 32) {
1000c632:	281f      	cmp	r0, #31
1000c634:	d805      	bhi.n	1000c642 <gpio_enable_callback+0x22>
1000c636:	2280      	movs	r2, #128	; 0x80
1000c638:	0452      	lsls	r2, r2, #17
1000c63a:	4b0e      	ldr	r3, [pc, #56]	; (1000c674 <gpio_enable_callback+0x54>)
1000c63c:	601a      	str	r2, [r3, #0]
		gpio_port = 1;
1000c63e:	2201      	movs	r2, #1
1000c640:	e004      	b.n	1000c64c <gpio_enable_callback+0x2c>
1000c642:	2280      	movs	r2, #128	; 0x80
1000c644:	0492      	lsls	r2, r2, #18
1000c646:	4b0b      	ldr	r3, [pc, #44]	; (1000c674 <gpio_enable_callback+0x54>)
1000c648:	601a      	str	r2, [r3, #0]
		NVIC_EnableIRQ(GPIO1_IRQn);
	} else {
		gpio_port = 2;
1000c64a:	2202      	movs	r2, #2
		NVIC_EnableIRQ(GPIO2_IRQn);
	}

	/* Enable callback */
	_gpio_instances[gpio_port].callback_enable_mask |= (1 << (gpio_pin % 16));
1000c64c:	230f      	movs	r3, #15
1000c64e:	4018      	ands	r0, r3
1000c650:	2101      	movs	r1, #1
1000c652:	4081      	lsls	r1, r0
1000c654:	4c08      	ldr	r4, [pc, #32]	; (1000c678 <gpio_enable_callback+0x58>)
1000c656:	00d5      	lsls	r5, r2, #3
1000c658:	18ab      	adds	r3, r5, r2
1000c65a:	00db      	lsls	r3, r3, #3
1000c65c:	18e3      	adds	r3, r4, r3
1000c65e:	3346      	adds	r3, #70	; 0x46
1000c660:	8818      	ldrh	r0, [r3, #0]
1000c662:	4308      	orrs	r0, r1
1000c664:	8018      	strh	r0, [r3, #0]
	_gpio_instances[gpio_port].hw->INTENSET.reg = (1 << (gpio_pin % 16));
1000c666:	18aa      	adds	r2, r5, r2
1000c668:	00d2      	lsls	r2, r2, #3
1000c66a:	5913      	ldr	r3, [r2, r4]
1000c66c:	b289      	uxth	r1, r1
1000c66e:	8419      	strh	r1, [r3, #32]
}
1000c670:	bd30      	pop	{r4, r5, pc}
1000c672:	46c0      	nop			; (mov r8, r8)
1000c674:	e000e100 	.word	0xe000e100
1000c678:	1001a358 	.word	0x1001a358

1000c67c <gpio_disable_callback>:
 * The callback function will not be called from the interrupt handler.
 *
 * \param[in]  gpio_pin   GPIO pin
 */
void gpio_disable_callback(uint8_t gpio_pin)
{
1000c67c:	b530      	push	{r4, r5, lr}
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
		gpio_port = 0;
1000c67e:	2300      	movs	r3, #0
{
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
1000c680:	280f      	cmp	r0, #15
1000c682:	d904      	bls.n	1000c68e <gpio_disable_callback+0x12>
		gpio_port = 0;
	} else if (gpio_pin < 32) {
		gpio_port = 1;
	} else {
		gpio_port = 2;
1000c684:	221f      	movs	r2, #31
1000c686:	4282      	cmp	r2, r0
1000c688:	415b      	adcs	r3, r3
1000c68a:	3a1d      	subs	r2, #29
1000c68c:	1ad3      	subs	r3, r2, r3
	}

	/* Enable callback */
	_gpio_instances[gpio_port].callback_enable_mask &= ~(1 << (gpio_pin % 16));
1000c68e:	220f      	movs	r2, #15
1000c690:	4010      	ands	r0, r2
1000c692:	2101      	movs	r1, #1
1000c694:	4081      	lsls	r1, r0
1000c696:	4c07      	ldr	r4, [pc, #28]	; (1000c6b4 <gpio_disable_callback+0x38>)
1000c698:	00dd      	lsls	r5, r3, #3
1000c69a:	18ea      	adds	r2, r5, r3
1000c69c:	00d2      	lsls	r2, r2, #3
1000c69e:	18a2      	adds	r2, r4, r2
1000c6a0:	3246      	adds	r2, #70	; 0x46
1000c6a2:	8810      	ldrh	r0, [r2, #0]
1000c6a4:	4388      	bics	r0, r1
1000c6a6:	8010      	strh	r0, [r2, #0]
	_gpio_instances[gpio_port].hw->INTENCLR.reg = (1 << (gpio_pin % 16));
1000c6a8:	18eb      	adds	r3, r5, r3
1000c6aa:	00db      	lsls	r3, r3, #3
1000c6ac:	591b      	ldr	r3, [r3, r4]
1000c6ae:	b289      	uxth	r1, r1
1000c6b0:	8499      	strh	r1, [r3, #36]	; 0x24
}
1000c6b2:	bd30      	pop	{r4, r5, pc}
1000c6b4:	1001a358 	.word	0x1001a358

1000c6b8 <gpio_init>:
 *
 * This function will init GPIO callback.
 *
 */
void gpio_init(void)
{
1000c6b8:	b510      	push	{r4, lr}
1000c6ba:	4a11      	ldr	r2, [pc, #68]	; (1000c700 <gpio_init+0x48>)
1000c6bc:	0010      	movs	r0, r2
1000c6be:	30d8      	adds	r0, #216	; 0xd8
	uint8_t i, j;

	for(i = 0; i < 3; i++) {
		for(j = 0; j < 16; j++) {
			_gpio_instances[i].callback[j] = NULL;
1000c6c0:	2100      	movs	r1, #0
1000c6c2:	e007      	b.n	1000c6d4 <gpio_init+0x1c>
1000c6c4:	c302      	stmia	r3!, {r1}
void gpio_init(void)
{
	uint8_t i, j;

	for(i = 0; i < 3; i++) {
		for(j = 0; j < 16; j++) {
1000c6c6:	4293      	cmp	r3, r2
1000c6c8:	d1fc      	bne.n	1000c6c4 <gpio_init+0xc>
			_gpio_instances[i].callback[j] = NULL;
		}
		_gpio_instances[i].callback_enable_mask = 0;
1000c6ca:	8051      	strh	r1, [r2, #2]
		_gpio_instances[i].callback_reg_mask = 0;
1000c6cc:	8011      	strh	r1, [r2, #0]
1000c6ce:	3248      	adds	r2, #72	; 0x48
 */
void gpio_init(void)
{
	uint8_t i, j;

	for(i = 0; i < 3; i++) {
1000c6d0:	4282      	cmp	r2, r0
1000c6d2:	d002      	beq.n	1000c6da <gpio_init+0x22>
1000c6d4:	0013      	movs	r3, r2
1000c6d6:	3b40      	subs	r3, #64	; 0x40
1000c6d8:	e7f4      	b.n	1000c6c4 <gpio_init+0xc>
			_gpio_instances[i].callback[j] = NULL;
		}
		_gpio_instances[i].callback_enable_mask = 0;
		_gpio_instances[i].callback_reg_mask = 0;
	}
	_gpio_instances[0].hw = (void *)GPIO0;
1000c6da:	4b0a      	ldr	r3, [pc, #40]	; (1000c704 <gpio_init+0x4c>)
1000c6dc:	4a0a      	ldr	r2, [pc, #40]	; (1000c708 <gpio_init+0x50>)
1000c6de:	601a      	str	r2, [r3, #0]
	_gpio_instances[1].hw = (void *)GPIO1;
1000c6e0:	4a0a      	ldr	r2, [pc, #40]	; (1000c70c <gpio_init+0x54>)
1000c6e2:	649a      	str	r2, [r3, #72]	; 0x48
	_gpio_instances[2].hw = (void *)GPIO2;
1000c6e4:	490a      	ldr	r1, [pc, #40]	; (1000c710 <gpio_init+0x58>)
1000c6e6:	2290      	movs	r2, #144	; 0x90
1000c6e8:	5099      	str	r1, [r3, r2]
	system_register_isr(RAM_ISR_TABLE_PORT0_COMB_INDEX, (uint32_t)gpio_port0_isr_handler);
1000c6ea:	490a      	ldr	r1, [pc, #40]	; (1000c714 <gpio_init+0x5c>)
1000c6ec:	2027      	movs	r0, #39	; 0x27
1000c6ee:	4c0a      	ldr	r4, [pc, #40]	; (1000c718 <gpio_init+0x60>)
1000c6f0:	47a0      	blx	r4
	system_register_isr(RAM_ISR_TABLE_PORT1_COMB_INDEX, (uint32_t)gpio_port1_isr_handler);
1000c6f2:	490a      	ldr	r1, [pc, #40]	; (1000c71c <gpio_init+0x64>)
1000c6f4:	2028      	movs	r0, #40	; 0x28
1000c6f6:	47a0      	blx	r4
	system_register_isr(RAM_ISR_TABLE_PORT2_COMB_INDEX, (uint32_t)gpio_port2_isr_handler);
1000c6f8:	4909      	ldr	r1, [pc, #36]	; (1000c720 <gpio_init+0x68>)
1000c6fa:	2029      	movs	r0, #41	; 0x29
1000c6fc:	47a0      	blx	r4
}
1000c6fe:	bd10      	pop	{r4, pc}
1000c700:	1001a39c 	.word	0x1001a39c
1000c704:	1001a358 	.word	0x1001a358
1000c708:	40010000 	.word	0x40010000
1000c70c:	40011000 	.word	0x40011000
1000c710:	40013000 	.word	0x40013000
1000c714:	1000bfc1 	.word	0x1000bfc1
1000c718:	1000d2e5 	.word	0x1000d2e5
1000c71c:	1000c025 	.word	0x1000c025
1000c720:	1000c095 	.word	0x1000c095

1000c724 <system_clock_config>:
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_clock_config(enum system_clock_resource resoure, \
				enum system_clock_freq freq)
{
	switch (resoure) {
1000c724:	2801      	cmp	r0, #1
1000c726:	d00d      	beq.n	1000c744 <system_clock_config+0x20>
1000c728:	2800      	cmp	r0, #0
1000c72a:	d002      	beq.n	1000c732 <system_clock_config+0xe>
1000c72c:	2802      	cmp	r0, #2
1000c72e:	d01c      	beq.n	1000c76a <system_clock_config+0x46>
1000c730:	e02e      	b.n	1000c790 <system_clock_config+0x6c>
		case CLOCK_RESOURCE_XO_26_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
1000c732:	4a18      	ldr	r2, [pc, #96]	; (1000c794 <system_clock_config+0x70>)
1000c734:	6990      	ldr	r0, [r2, #24]
1000c736:	230c      	movs	r3, #12
1000c738:	4303      	orrs	r3, r0
1000c73a:	6193      	str	r3, [r2, #24]
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_BT26M_CLK | \
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK;
			system_clock_value = 26000000;
1000c73c:	4a16      	ldr	r2, [pc, #88]	; (1000c798 <system_clock_config+0x74>)
1000c73e:	4b17      	ldr	r3, [pc, #92]	; (1000c79c <system_clock_config+0x78>)
1000c740:	601a      	str	r2, [r3, #0]
			break;
1000c742:	e01a      	b.n	1000c77a <system_clock_config+0x56>

		case CLOCK_RESOURCE_LP_2_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
1000c744:	4b13      	ldr	r3, [pc, #76]	; (1000c794 <system_clock_config+0x70>)
1000c746:	6998      	ldr	r0, [r3, #24]
1000c748:	2208      	movs	r2, #8
1000c74a:	4302      	orrs	r2, r0
1000c74c:	619a      	str	r2, [r3, #24]
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK;
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg &= \
1000c74e:	699a      	ldr	r2, [r3, #24]
1000c750:	2004      	movs	r0, #4
1000c752:	4382      	bics	r2, r0
1000c754:	619a      	str	r2, [r3, #24]
					~LPMCU_MISC_REGS_LPMCU_CTRL_USE_BT26M_CLK;
			AON_GP_REGS0->AON_PMU_CTRL.reg |= \
1000c756:	4a12      	ldr	r2, [pc, #72]	; (1000c7a0 <system_clock_config+0x7c>)
1000c758:	6853      	ldr	r3, [r2, #4]
1000c75a:	2080      	movs	r0, #128	; 0x80
1000c75c:	0300      	lsls	r0, r0, #12
1000c75e:	4303      	orrs	r3, r0
1000c760:	6053      	str	r3, [r2, #4]
					AON_GP_REGS_AON_PMU_CTRL_PMU_2MHZ_CLK_EN;
			system_clock_value = 2000000;
1000c762:	4a10      	ldr	r2, [pc, #64]	; (1000c7a4 <system_clock_config+0x80>)
1000c764:	4b0d      	ldr	r3, [pc, #52]	; (1000c79c <system_clock_config+0x78>)
1000c766:	601a      	str	r2, [r3, #0]
			break;
1000c768:	e007      	b.n	1000c77a <system_clock_config+0x56>

		case CLOCK_RESOURCE_RC_26_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg &= \
1000c76a:	4a0a      	ldr	r2, [pc, #40]	; (1000c794 <system_clock_config+0x70>)
1000c76c:	6993      	ldr	r3, [r2, #24]
1000c76e:	200c      	movs	r0, #12
1000c770:	4383      	bics	r3, r0
1000c772:	6193      	str	r3, [r2, #24]
					~(LPMCU_MISC_REGS_LPMCU_CTRL_USE_BT26M_CLK | \
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK);
			system_clock_value = 26000000;
1000c774:	4a08      	ldr	r2, [pc, #32]	; (1000c798 <system_clock_config+0x74>)
1000c776:	4b09      	ldr	r3, [pc, #36]	; (1000c79c <system_clock_config+0x78>)
1000c778:	601a      	str	r2, [r3, #0]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	LPMCU_MISC_REGS0->LPMCU_CTRL.reg &= \
1000c77a:	4b06      	ldr	r3, [pc, #24]	; (1000c794 <system_clock_config+0x70>)
1000c77c:	699a      	ldr	r2, [r3, #24]
1000c77e:	2003      	movs	r0, #3
1000c780:	4382      	bics	r2, r0
1000c782:	619a      	str	r2, [r3, #24]
		~LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL_Msk;
	LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
1000c784:	699a      	ldr	r2, [r3, #24]
1000c786:	4001      	ands	r1, r0
1000c788:	4311      	orrs	r1, r2
1000c78a:	6199      	str	r1, [r3, #24]
		LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL(freq);

	return STATUS_OK;
1000c78c:	2000      	movs	r0, #0
1000c78e:	e000      	b.n	1000c792 <system_clock_config+0x6e>
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK);
			system_clock_value = 26000000;
			break;

		default:
			return STATUS_ERR_INVALID_ARG;
1000c790:	2017      	movs	r0, #23
		~LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL_Msk;
	LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
		LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL(freq);

	return STATUS_OK;
}
1000c792:	4770      	bx	lr
1000c794:	4000b000 	.word	0x4000b000
1000c798:	018cba80 	.word	0x018cba80
1000c79c:	1001a430 	.word	0x1001a430
1000c7a0:	4000f000 	.word	0x4000f000
1000c7a4:	001e8480 	.word	0x001e8480

1000c7a8 <system_clock_get_value>:
 *
 * \return system clock value.
 */
uint32_t system_clock_get_value(void)
{
	return system_clock_value;
1000c7a8:	4b01      	ldr	r3, [pc, #4]	; (1000c7b0 <system_clock_get_value+0x8>)
1000c7aa:	6818      	ldr	r0, [r3, #0]
}
1000c7ac:	4770      	bx	lr
1000c7ae:	46c0      	nop			; (mov r8, r8)
1000c7b0:	1001a430 	.word	0x1001a430

1000c7b4 <system_clock_peripheral_enable>:
 * \return Status of operation.
 * \retval STATUS_OK               Clock config correctly
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_clock_peripheral_enable(enum system_peripheral peripheral)
{
1000c7b4:	b500      	push	{lr}
	switch (peripheral) {
1000c7b6:	2835      	cmp	r0, #53	; 0x35
1000c7b8:	d900      	bls.n	1000c7bc <system_clock_peripheral_enable+0x8>
1000c7ba:	e1a2      	b.n	1000cb02 <system_clock_peripheral_enable+0x34e>
1000c7bc:	0080      	lsls	r0, r0, #2
1000c7be:	4bd2      	ldr	r3, [pc, #840]	; (1000cb08 <system_clock_peripheral_enable+0x354>)
1000c7c0:	581b      	ldr	r3, [r3, r0]
1000c7c2:	469f      	mov	pc, r3
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c7c4:	4ad1      	ldr	r2, [pc, #836]	; (1000cb0c <system_clock_peripheral_enable+0x358>)
1000c7c6:	68d1      	ldr	r1, [r2, #12]
1000c7c8:	2302      	movs	r3, #2
1000c7ca:	430b      	orrs	r3, r1
1000c7cc:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c7ce:	2000      	movs	r0, #0
{
	switch (peripheral) {
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI_FLASH0_CLK_EN;
		break;
1000c7d0:	e198      	b.n	1000cb04 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c7d2:	4ace      	ldr	r2, [pc, #824]	; (1000cb0c <system_clock_peripheral_enable+0x358>)
1000c7d4:	68d1      	ldr	r1, [r2, #12]
1000c7d6:	2304      	movs	r3, #4
1000c7d8:	430b      	orrs	r3, r1
1000c7da:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c7dc:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI0_CORE_CLK_EN;
		break;
1000c7de:	e191      	b.n	1000cb04 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c7e0:	4aca      	ldr	r2, [pc, #808]	; (1000cb0c <system_clock_peripheral_enable+0x358>)
1000c7e2:	68d1      	ldr	r1, [r2, #12]
1000c7e4:	2308      	movs	r3, #8
1000c7e6:	430b      	orrs	r3, r1
1000c7e8:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c7ea:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI1_CORE_CLK_EN;
		break;
1000c7ec:	e18a      	b.n	1000cb04 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c7ee:	4ac7      	ldr	r2, [pc, #796]	; (1000cb0c <system_clock_peripheral_enable+0x358>)
1000c7f0:	68d1      	ldr	r1, [r2, #12]
1000c7f2:	2310      	movs	r3, #16
1000c7f4:	430b      	orrs	r3, r1
1000c7f6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c7f8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C0_CORE_CLK_EN;
		break;
1000c7fa:	e183      	b.n	1000cb04 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c7fc:	4ac3      	ldr	r2, [pc, #780]	; (1000cb0c <system_clock_peripheral_enable+0x358>)
1000c7fe:	68d1      	ldr	r1, [r2, #12]
1000c800:	2320      	movs	r3, #32
1000c802:	430b      	orrs	r3, r1
1000c804:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c806:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_DUALTIMER0_CLK_EN;
		break;
1000c808:	e17c      	b.n	1000cb04 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c80a:	4ac0      	ldr	r2, [pc, #768]	; (1000cb0c <system_clock_peripheral_enable+0x358>)
1000c80c:	68d1      	ldr	r1, [r2, #12]
1000c80e:	2380      	movs	r3, #128	; 0x80
1000c810:	430b      	orrs	r3, r1
1000c812:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c814:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_GPIO_CLK_EN;
		break;
1000c816:	e175      	b.n	1000cb04 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c818:	4abc      	ldr	r2, [pc, #752]	; (1000cb0c <system_clock_peripheral_enable+0x358>)
1000c81a:	68d3      	ldr	r3, [r2, #12]
1000c81c:	2180      	movs	r1, #128	; 0x80
1000c81e:	0049      	lsls	r1, r1, #1
1000c820:	430b      	orrs	r3, r1
1000c822:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c824:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_TIMER0_CLK_EN;
		break;
1000c826:	e16d      	b.n	1000cb04 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c828:	4ab8      	ldr	r2, [pc, #736]	; (1000cb0c <system_clock_peripheral_enable+0x358>)
1000c82a:	68d3      	ldr	r3, [r2, #12]
1000c82c:	2180      	movs	r1, #128	; 0x80
1000c82e:	0109      	lsls	r1, r1, #4
1000c830:	430b      	orrs	r3, r1
1000c832:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c834:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WDT0_CLK_EN;
		break;
1000c836:	e165      	b.n	1000cb04 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c838:	4ab4      	ldr	r2, [pc, #720]	; (1000cb0c <system_clock_peripheral_enable+0x358>)
1000c83a:	68d3      	ldr	r3, [r2, #12]
1000c83c:	2180      	movs	r1, #128	; 0x80
1000c83e:	0149      	lsls	r1, r1, #5
1000c840:	430b      	orrs	r3, r1
1000c842:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c844:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WDT1_CLK_EN;
		break;
1000c846:	e15d      	b.n	1000cb04 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c848:	4ab0      	ldr	r2, [pc, #704]	; (1000cb0c <system_clock_peripheral_enable+0x358>)
1000c84a:	68d3      	ldr	r3, [r2, #12]
1000c84c:	2180      	movs	r1, #128	; 0x80
1000c84e:	0189      	lsls	r1, r1, #6
1000c850:	430b      	orrs	r3, r1
1000c852:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c854:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART0_CORE_CLK_EN;
		break;
1000c856:	e155      	b.n	1000cb04 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c858:	4aac      	ldr	r2, [pc, #688]	; (1000cb0c <system_clock_peripheral_enable+0x358>)
1000c85a:	68d3      	ldr	r3, [r2, #12]
1000c85c:	2180      	movs	r1, #128	; 0x80
1000c85e:	01c9      	lsls	r1, r1, #7
1000c860:	430b      	orrs	r3, r1
1000c862:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c864:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART0_IF_CLK_EN;
		break;
1000c866:	e14d      	b.n	1000cb04 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c868:	4aa8      	ldr	r2, [pc, #672]	; (1000cb0c <system_clock_peripheral_enable+0x358>)
1000c86a:	68d3      	ldr	r3, [r2, #12]
1000c86c:	2180      	movs	r1, #128	; 0x80
1000c86e:	0209      	lsls	r1, r1, #8
1000c870:	430b      	orrs	r3, r1
1000c872:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c874:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART1_CORE_CLK_EN;
		break;
1000c876:	e145      	b.n	1000cb04 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c878:	4aa4      	ldr	r2, [pc, #656]	; (1000cb0c <system_clock_peripheral_enable+0x358>)
1000c87a:	68d3      	ldr	r3, [r2, #12]
1000c87c:	2180      	movs	r1, #128	; 0x80
1000c87e:	0249      	lsls	r1, r1, #9
1000c880:	430b      	orrs	r3, r1
1000c882:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c884:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART1_IF_CLK_EN;
		break;
1000c886:	e13d      	b.n	1000cb04 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c888:	4aa0      	ldr	r2, [pc, #640]	; (1000cb0c <system_clock_peripheral_enable+0x358>)
1000c88a:	68d3      	ldr	r3, [r2, #12]
1000c88c:	2180      	movs	r1, #128	; 0x80
1000c88e:	0289      	lsls	r1, r1, #10
1000c890:	430b      	orrs	r3, r1
1000c892:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c894:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IRQ_CTRLR_CORE_CLK_EN;
		break;
1000c896:	e135      	b.n	1000cb04 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c898:	4a9c      	ldr	r2, [pc, #624]	; (1000cb0c <system_clock_peripheral_enable+0x358>)
1000c89a:	68d3      	ldr	r3, [r2, #12]
1000c89c:	2180      	movs	r1, #128	; 0x80
1000c89e:	02c9      	lsls	r1, r1, #11
1000c8a0:	430b      	orrs	r3, r1
1000c8a2:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c8a4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_1_GL_MEM_CLK_EN;
		break;
1000c8a6:	e12d      	b.n	1000cb04 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c8a8:	4a98      	ldr	r2, [pc, #608]	; (1000cb0c <system_clock_peripheral_enable+0x358>)
1000c8aa:	68d3      	ldr	r3, [r2, #12]
1000c8ac:	2180      	movs	r1, #128	; 0x80
1000c8ae:	0309      	lsls	r1, r1, #12
1000c8b0:	430b      	orrs	r3, r1
1000c8b2:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c8b4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_2_GL_MEM_CLK_EN;
		break;
1000c8b6:	e125      	b.n	1000cb04 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c8b8:	4a94      	ldr	r2, [pc, #592]	; (1000cb0c <system_clock_peripheral_enable+0x358>)
1000c8ba:	68d3      	ldr	r3, [r2, #12]
1000c8bc:	2180      	movs	r1, #128	; 0x80
1000c8be:	0349      	lsls	r1, r1, #13
1000c8c0:	430b      	orrs	r3, r1
1000c8c2:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c8c4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ROM_MEM_CLK_EN;
		break;
1000c8c6:	e11d      	b.n	1000cb04 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c8c8:	4a90      	ldr	r2, [pc, #576]	; (1000cb0c <system_clock_peripheral_enable+0x358>)
1000c8ca:	68d3      	ldr	r3, [r2, #12]
1000c8cc:	2180      	movs	r1, #128	; 0x80
1000c8ce:	0389      	lsls	r1, r1, #14
1000c8d0:	430b      	orrs	r3, r1
1000c8d2:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c8d4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_XBAR_IF_CLK_EN;
		break;
1000c8d6:	e115      	b.n	1000cb04 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c8d8:	4a8c      	ldr	r2, [pc, #560]	; (1000cb0c <system_clock_peripheral_enable+0x358>)
1000c8da:	68d3      	ldr	r3, [r2, #12]
1000c8dc:	2180      	movs	r1, #128	; 0x80
1000c8de:	03c9      	lsls	r1, r1, #15
1000c8e0:	430b      	orrs	r3, r1
1000c8e2:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c8e4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_AON_WRAPPER_CLK_EN;
		break;
1000c8e6:	e10d      	b.n	1000cb04 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c8e8:	4a88      	ldr	r2, [pc, #544]	; (1000cb0c <system_clock_peripheral_enable+0x358>)
1000c8ea:	68d3      	ldr	r3, [r2, #12]
1000c8ec:	2180      	movs	r1, #128	; 0x80
1000c8ee:	0409      	lsls	r1, r1, #16
1000c8f0:	430b      	orrs	r3, r1
1000c8f2:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c8f4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLK_EN;
		break;
1000c8f6:	e105      	b.n	1000cb04 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c8f8:	4a84      	ldr	r2, [pc, #528]	; (1000cb0c <system_clock_peripheral_enable+0x358>)
1000c8fa:	68d3      	ldr	r3, [r2, #12]
1000c8fc:	2180      	movs	r1, #128	; 0x80
1000c8fe:	0449      	lsls	r1, r1, #17
1000c900:	430b      	orrs	r3, r1
1000c902:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c904:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLKG_EN;
		break;
1000c906:	e0fd      	b.n	1000cb04 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c908:	4a80      	ldr	r2, [pc, #512]	; (1000cb0c <system_clock_peripheral_enable+0x358>)
1000c90a:	68d3      	ldr	r3, [r2, #12]
1000c90c:	2180      	movs	r1, #128	; 0x80
1000c90e:	0489      	lsls	r1, r1, #18
1000c910:	430b      	orrs	r3, r1
1000c912:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c914:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_BLE_MEM_CLK_EN;
		break;
1000c916:	e0f5      	b.n	1000cb04 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c918:	4a7c      	ldr	r2, [pc, #496]	; (1000cb0c <system_clock_peripheral_enable+0x358>)
1000c91a:	68d3      	ldr	r3, [r2, #12]
1000c91c:	2180      	movs	r1, #128	; 0x80
1000c91e:	04c9      	lsls	r1, r1, #19
1000c920:	430b      	orrs	r3, r1
1000c922:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c924:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC0_CLK_EN;
		break;
1000c926:	e0ed      	b.n	1000cb04 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c928:	4a78      	ldr	r2, [pc, #480]	; (1000cb0c <system_clock_peripheral_enable+0x358>)
1000c92a:	68d3      	ldr	r3, [r2, #12]
1000c92c:	2180      	movs	r1, #128	; 0x80
1000c92e:	0509      	lsls	r1, r1, #20
1000c930:	430b      	orrs	r3, r1
1000c932:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c934:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC1_CLK_EN;
		break;
1000c936:	e0e5      	b.n	1000cb04 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c938:	4a74      	ldr	r2, [pc, #464]	; (1000cb0c <system_clock_peripheral_enable+0x358>)
1000c93a:	68d3      	ldr	r3, [r2, #12]
1000c93c:	2180      	movs	r1, #128	; 0x80
1000c93e:	0549      	lsls	r1, r1, #21
1000c940:	430b      	orrs	r3, r1
1000c942:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c944:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC2_CLK_EN;
		break;
1000c946:	e0dd      	b.n	1000cb04 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c948:	4a70      	ldr	r2, [pc, #448]	; (1000cb0c <system_clock_peripheral_enable+0x358>)
1000c94a:	68d3      	ldr	r3, [r2, #12]
1000c94c:	2180      	movs	r1, #128	; 0x80
1000c94e:	0589      	lsls	r1, r1, #22
1000c950:	430b      	orrs	r3, r1
1000c952:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c954:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C1_CORE_CLK_EN;
		break;
1000c956:	e0d5      	b.n	1000cb04 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c958:	4a6c      	ldr	r2, [pc, #432]	; (1000cb0c <system_clock_peripheral_enable+0x358>)
1000c95a:	68d3      	ldr	r3, [r2, #12]
1000c95c:	2180      	movs	r1, #128	; 0x80
1000c95e:	05c9      	lsls	r1, r1, #23
1000c960:	430b      	orrs	r3, r1
1000c962:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c964:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_CLK_EN;
		break;
1000c966:	e0cd      	b.n	1000cb04 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c968:	4a68      	ldr	r2, [pc, #416]	; (1000cb0c <system_clock_peripheral_enable+0x358>)
1000c96a:	6911      	ldr	r1, [r2, #16]
1000c96c:	2301      	movs	r3, #1
1000c96e:	430b      	orrs	r3, r1
1000c970:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c972:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE0_CLK_EN;
		break;
1000c974:	e0c6      	b.n	1000cb04 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c976:	4a65      	ldr	r2, [pc, #404]	; (1000cb0c <system_clock_peripheral_enable+0x358>)
1000c978:	6911      	ldr	r1, [r2, #16]
1000c97a:	2302      	movs	r3, #2
1000c97c:	430b      	orrs	r3, r1
1000c97e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c980:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE1_CLK_EN;
		break;
1000c982:	e0bf      	b.n	1000cb04 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c984:	4a61      	ldr	r2, [pc, #388]	; (1000cb0c <system_clock_peripheral_enable+0x358>)
1000c986:	6911      	ldr	r1, [r2, #16]
1000c988:	2304      	movs	r3, #4
1000c98a:	430b      	orrs	r3, r1
1000c98c:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c98e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE2_CLK_EN;
		break;
1000c990:	e0b8      	b.n	1000cb04 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c992:	4a5e      	ldr	r2, [pc, #376]	; (1000cb0c <system_clock_peripheral_enable+0x358>)
1000c994:	6911      	ldr	r1, [r2, #16]
1000c996:	2308      	movs	r3, #8
1000c998:	430b      	orrs	r3, r1
1000c99a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c99c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE3_CLK_EN;
		break;
1000c99e:	e0b1      	b.n	1000cb04 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c9a0:	4a5a      	ldr	r2, [pc, #360]	; (1000cb0c <system_clock_peripheral_enable+0x358>)
1000c9a2:	6911      	ldr	r1, [r2, #16]
1000c9a4:	2310      	movs	r3, #16
1000c9a6:	430b      	orrs	r3, r1
1000c9a8:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c9aa:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE4_CLK_EN;
		break;
1000c9ac:	e0aa      	b.n	1000cb04 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c9ae:	4a57      	ldr	r2, [pc, #348]	; (1000cb0c <system_clock_peripheral_enable+0x358>)
1000c9b0:	6911      	ldr	r1, [r2, #16]
1000c9b2:	2320      	movs	r3, #32
1000c9b4:	430b      	orrs	r3, r1
1000c9b6:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c9b8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE5_CLK_EN;
		break;
1000c9ba:	e0a3      	b.n	1000cb04 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c9bc:	4a53      	ldr	r2, [pc, #332]	; (1000cb0c <system_clock_peripheral_enable+0x358>)
1000c9be:	6911      	ldr	r1, [r2, #16]
1000c9c0:	2340      	movs	r3, #64	; 0x40
1000c9c2:	430b      	orrs	r3, r1
1000c9c4:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c9c6:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM0_CLK_EN;
		break;
1000c9c8:	e09c      	b.n	1000cb04 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c9ca:	4a50      	ldr	r2, [pc, #320]	; (1000cb0c <system_clock_peripheral_enable+0x358>)
1000c9cc:	6911      	ldr	r1, [r2, #16]
1000c9ce:	2380      	movs	r3, #128	; 0x80
1000c9d0:	430b      	orrs	r3, r1
1000c9d2:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c9d4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM1_CLK_EN;
		break;
1000c9d6:	e095      	b.n	1000cb04 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c9d8:	4a4c      	ldr	r2, [pc, #304]	; (1000cb0c <system_clock_peripheral_enable+0x358>)
1000c9da:	6913      	ldr	r3, [r2, #16]
1000c9dc:	2180      	movs	r1, #128	; 0x80
1000c9de:	0049      	lsls	r1, r1, #1
1000c9e0:	430b      	orrs	r3, r1
1000c9e2:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c9e4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM2_CLK_EN;
		break;
1000c9e6:	e08d      	b.n	1000cb04 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c9e8:	4a48      	ldr	r2, [pc, #288]	; (1000cb0c <system_clock_peripheral_enable+0x358>)
1000c9ea:	6913      	ldr	r3, [r2, #16]
1000c9ec:	2180      	movs	r1, #128	; 0x80
1000c9ee:	0089      	lsls	r1, r1, #2
1000c9f0:	430b      	orrs	r3, r1
1000c9f2:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c9f4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM3_CLK_EN;
		break;
1000c9f6:	e085      	b.n	1000cb04 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c9f8:	4a44      	ldr	r2, [pc, #272]	; (1000cb0c <system_clock_peripheral_enable+0x358>)
1000c9fa:	6913      	ldr	r3, [r2, #16]
1000c9fc:	2180      	movs	r1, #128	; 0x80
1000c9fe:	00c9      	lsls	r1, r1, #3
1000ca00:	430b      	orrs	r3, r1
1000ca02:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ca04:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SENS_ADC_CLK_EN;
		break;
1000ca06:	e07d      	b.n	1000cb04 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000ca08:	4a40      	ldr	r2, [pc, #256]	; (1000cb0c <system_clock_peripheral_enable+0x358>)
1000ca0a:	6913      	ldr	r3, [r2, #16]
1000ca0c:	2180      	movs	r1, #128	; 0x80
1000ca0e:	0109      	lsls	r1, r1, #4
1000ca10:	430b      	orrs	r3, r1
1000ca12:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ca14:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI0_SCK_PHASE_INT_CLK_EN;
		break;
1000ca16:	e075      	b.n	1000cb04 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000ca18:	4a3c      	ldr	r2, [pc, #240]	; (1000cb0c <system_clock_peripheral_enable+0x358>)
1000ca1a:	6913      	ldr	r3, [r2, #16]
1000ca1c:	2180      	movs	r1, #128	; 0x80
1000ca1e:	0149      	lsls	r1, r1, #5
1000ca20:	430b      	orrs	r3, r1
1000ca22:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ca24:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI1_SCK_PHASE_INT_CLK_EN;
		break;
1000ca26:	e06d      	b.n	1000cb04 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000ca28:	4a38      	ldr	r2, [pc, #224]	; (1000cb0c <system_clock_peripheral_enable+0x358>)
1000ca2a:	6913      	ldr	r3, [r2, #16]
1000ca2c:	2180      	movs	r1, #128	; 0x80
1000ca2e:	0189      	lsls	r1, r1, #6
1000ca30:	430b      	orrs	r3, r1
1000ca32:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ca34:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_GPIO_GCLK_EN;
		break;
1000ca36:	e065      	b.n	1000cb04 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000ca38:	4a34      	ldr	r2, [pc, #208]	; (1000cb0c <system_clock_peripheral_enable+0x358>)
1000ca3a:	6913      	ldr	r3, [r2, #16]
1000ca3c:	2180      	movs	r1, #128	; 0x80
1000ca3e:	01c9      	lsls	r1, r1, #7
1000ca40:	430b      	orrs	r3, r1
1000ca42:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ca44:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_TIMER0_PGCLK_EN;
		break;
1000ca46:	e05d      	b.n	1000cb04 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000ca48:	4a30      	ldr	r2, [pc, #192]	; (1000cb0c <system_clock_peripheral_enable+0x358>)
1000ca4a:	6913      	ldr	r3, [r2, #16]
1000ca4c:	2180      	movs	r1, #128	; 0x80
1000ca4e:	0209      	lsls	r1, r1, #8
1000ca50:	430b      	orrs	r3, r1
1000ca52:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ca54:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_CORE_CLK_EN;
		break;
1000ca56:	e055      	b.n	1000cb04 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000ca58:	4a2c      	ldr	r2, [pc, #176]	; (1000cb0c <system_clock_peripheral_enable+0x358>)
1000ca5a:	6913      	ldr	r3, [r2, #16]
1000ca5c:	2180      	movs	r1, #128	; 0x80
1000ca5e:	0249      	lsls	r1, r1, #9
1000ca60:	430b      	orrs	r3, r1
1000ca62:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ca64:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_AHB_CLK_EN;
		break;
1000ca66:	e04d      	b.n	1000cb04 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000ca68:	4a28      	ldr	r2, [pc, #160]	; (1000cb0c <system_clock_peripheral_enable+0x358>)
1000ca6a:	6913      	ldr	r3, [r2, #16]
1000ca6c:	2180      	movs	r1, #128	; 0x80
1000ca6e:	0289      	lsls	r1, r1, #10
1000ca70:	430b      	orrs	r3, r1
1000ca72:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ca74:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_CORE_CLK_EN;
		break;
1000ca76:	e045      	b.n	1000cb04 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000ca78:	4a24      	ldr	r2, [pc, #144]	; (1000cb0c <system_clock_peripheral_enable+0x358>)
1000ca7a:	6913      	ldr	r3, [r2, #16]
1000ca7c:	2180      	movs	r1, #128	; 0x80
1000ca7e:	02c9      	lsls	r1, r1, #11
1000ca80:	430b      	orrs	r3, r1
1000ca82:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ca84:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_AHB_CLK_EN;
		break;
1000ca86:	e03d      	b.n	1000cb04 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000ca88:	4a20      	ldr	r2, [pc, #128]	; (1000cb0c <system_clock_peripheral_enable+0x358>)
1000ca8a:	6913      	ldr	r3, [r2, #16]
1000ca8c:	2180      	movs	r1, #128	; 0x80
1000ca8e:	0309      	lsls	r1, r1, #12
1000ca90:	430b      	orrs	r3, r1
1000ca92:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ca94:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_0_MEM_CLK_EN;
		break;
1000ca96:	e035      	b.n	1000cb04 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000ca98:	4a1c      	ldr	r2, [pc, #112]	; (1000cb0c <system_clock_peripheral_enable+0x358>)
1000ca9a:	6913      	ldr	r3, [r2, #16]
1000ca9c:	2180      	movs	r1, #128	; 0x80
1000ca9e:	0349      	lsls	r1, r1, #13
1000caa0:	430b      	orrs	r3, r1
1000caa2:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000caa4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_1_MEM_CLK_EN;
		break;
1000caa6:	e02d      	b.n	1000cb04 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000caa8:	4a18      	ldr	r2, [pc, #96]	; (1000cb0c <system_clock_peripheral_enable+0x358>)
1000caaa:	6913      	ldr	r3, [r2, #16]
1000caac:	2180      	movs	r1, #128	; 0x80
1000caae:	0389      	lsls	r1, r1, #14
1000cab0:	430b      	orrs	r3, r1
1000cab2:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cab4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_2_MEM_CLK_EN;
		break;
1000cab6:	e025      	b.n	1000cb04 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000cab8:	4a14      	ldr	r2, [pc, #80]	; (1000cb0c <system_clock_peripheral_enable+0x358>)
1000caba:	6913      	ldr	r3, [r2, #16]
1000cabc:	2180      	movs	r1, #128	; 0x80
1000cabe:	03c9      	lsls	r1, r1, #15
1000cac0:	430b      	orrs	r3, r1
1000cac2:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cac4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_0_MEM_CLK_EN;
		break;
1000cac6:	e01d      	b.n	1000cb04 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000cac8:	4a10      	ldr	r2, [pc, #64]	; (1000cb0c <system_clock_peripheral_enable+0x358>)
1000caca:	6913      	ldr	r3, [r2, #16]
1000cacc:	2180      	movs	r1, #128	; 0x80
1000cace:	0409      	lsls	r1, r1, #16
1000cad0:	430b      	orrs	r3, r1
1000cad2:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cad4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_1_MEM_CLK_EN;
		break;
1000cad6:	e015      	b.n	1000cb04 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
1000cad8:	4a0c      	ldr	r2, [pc, #48]	; (1000cb0c <system_clock_peripheral_enable+0x358>)
1000cada:	7d11      	ldrb	r1, [r2, #20]
1000cadc:	2301      	movs	r3, #1
1000cade:	430b      	orrs	r3, r1
1000cae0:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cae2:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CTRL_RXTX_SEQ_CLK_EN;
		break;
1000cae4:	e00e      	b.n	1000cb04 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
1000cae6:	4a09      	ldr	r2, [pc, #36]	; (1000cb0c <system_clock_peripheral_enable+0x358>)
1000cae8:	7d11      	ldrb	r1, [r2, #20]
1000caea:	2302      	movs	r3, #2
1000caec:	430b      	orrs	r3, r1
1000caee:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000caf0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CTRL_AHB_CLK_EN;
		break;
1000caf2:	e007      	b.n	1000cb04 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
1000caf4:	4a05      	ldr	r2, [pc, #20]	; (1000cb0c <system_clock_peripheral_enable+0x358>)
1000caf6:	7d11      	ldrb	r1, [r2, #20]
1000caf8:	2304      	movs	r3, #4
1000cafa:	430b      	orrs	r3, r1
1000cafc:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cafe:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CTRL_PERIPH_REGS_CLK_EN;
		break;
1000cb00:	e000      	b.n	1000cb04 <system_clock_peripheral_enable+0x350>

		default:
			return STATUS_ERR_INVALID_ARG;
1000cb02:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
1000cb04:	bd00      	pop	{pc}
1000cb06:	46c0      	nop			; (mov r8, r8)
1000cb08:	100173e8 	.word	0x100173e8
1000cb0c:	4000b000 	.word	0x4000b000

1000cb10 <system_clock_peripheral_disable>:
 * \return Status of operation.
 * \retval STATUS_OK               Clock config correctly
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_clock_peripheral_disable(enum system_peripheral peripheral)
{
1000cb10:	b500      	push	{lr}
	switch (peripheral) {
1000cb12:	2835      	cmp	r0, #53	; 0x35
1000cb14:	d900      	bls.n	1000cb18 <system_clock_peripheral_disable+0x8>
1000cb16:	e17d      	b.n	1000ce14 <system_clock_peripheral_disable+0x304>
1000cb18:	0080      	lsls	r0, r0, #2
1000cb1a:	4bbf      	ldr	r3, [pc, #764]	; (1000ce18 <system_clock_peripheral_disable+0x308>)
1000cb1c:	581b      	ldr	r3, [r3, r0]
1000cb1e:	469f      	mov	pc, r3
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000cb20:	4abe      	ldr	r2, [pc, #760]	; (1000ce1c <system_clock_peripheral_disable+0x30c>)
1000cb22:	68d3      	ldr	r3, [r2, #12]
1000cb24:	2102      	movs	r1, #2
1000cb26:	438b      	bics	r3, r1
1000cb28:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cb2a:	2000      	movs	r0, #0
{
	switch (peripheral) {
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI_FLASH0_CLK_EN;
		break;
1000cb2c:	e173      	b.n	1000ce16 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000cb2e:	4abb      	ldr	r2, [pc, #748]	; (1000ce1c <system_clock_peripheral_disable+0x30c>)
1000cb30:	68d3      	ldr	r3, [r2, #12]
1000cb32:	2104      	movs	r1, #4
1000cb34:	438b      	bics	r3, r1
1000cb36:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cb38:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI0_CORE_CLK_EN;
		break;
1000cb3a:	e16c      	b.n	1000ce16 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000cb3c:	4ab7      	ldr	r2, [pc, #732]	; (1000ce1c <system_clock_peripheral_disable+0x30c>)
1000cb3e:	68d3      	ldr	r3, [r2, #12]
1000cb40:	2108      	movs	r1, #8
1000cb42:	438b      	bics	r3, r1
1000cb44:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cb46:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI1_CORE_CLK_EN;
		break;
1000cb48:	e165      	b.n	1000ce16 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000cb4a:	4ab4      	ldr	r2, [pc, #720]	; (1000ce1c <system_clock_peripheral_disable+0x30c>)
1000cb4c:	68d3      	ldr	r3, [r2, #12]
1000cb4e:	2110      	movs	r1, #16
1000cb50:	438b      	bics	r3, r1
1000cb52:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cb54:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C0_CORE_CLK_EN;
		break;
1000cb56:	e15e      	b.n	1000ce16 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000cb58:	4ab0      	ldr	r2, [pc, #704]	; (1000ce1c <system_clock_peripheral_disable+0x30c>)
1000cb5a:	68d3      	ldr	r3, [r2, #12]
1000cb5c:	2120      	movs	r1, #32
1000cb5e:	438b      	bics	r3, r1
1000cb60:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cb62:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_DUALTIMER0_CLK_EN;
		break;
1000cb64:	e157      	b.n	1000ce16 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000cb66:	4aad      	ldr	r2, [pc, #692]	; (1000ce1c <system_clock_peripheral_disable+0x30c>)
1000cb68:	68d3      	ldr	r3, [r2, #12]
1000cb6a:	2180      	movs	r1, #128	; 0x80
1000cb6c:	438b      	bics	r3, r1
1000cb6e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cb70:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_GPIO_CLK_EN;
		break;
1000cb72:	e150      	b.n	1000ce16 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000cb74:	4aa9      	ldr	r2, [pc, #676]	; (1000ce1c <system_clock_peripheral_disable+0x30c>)
1000cb76:	68d1      	ldr	r1, [r2, #12]
1000cb78:	4ba9      	ldr	r3, [pc, #676]	; (1000ce20 <system_clock_peripheral_disable+0x310>)
1000cb7a:	400b      	ands	r3, r1
1000cb7c:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cb7e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_TIMER0_CLK_EN;
		break;
1000cb80:	e149      	b.n	1000ce16 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000cb82:	4aa6      	ldr	r2, [pc, #664]	; (1000ce1c <system_clock_peripheral_disable+0x30c>)
1000cb84:	68d1      	ldr	r1, [r2, #12]
1000cb86:	4ba7      	ldr	r3, [pc, #668]	; (1000ce24 <system_clock_peripheral_disable+0x314>)
1000cb88:	400b      	ands	r3, r1
1000cb8a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cb8c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WDT0_CLK_EN;
		break;
1000cb8e:	e142      	b.n	1000ce16 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000cb90:	4aa2      	ldr	r2, [pc, #648]	; (1000ce1c <system_clock_peripheral_disable+0x30c>)
1000cb92:	68d1      	ldr	r1, [r2, #12]
1000cb94:	4ba4      	ldr	r3, [pc, #656]	; (1000ce28 <system_clock_peripheral_disable+0x318>)
1000cb96:	400b      	ands	r3, r1
1000cb98:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cb9a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WDT1_CLK_EN;
		break;
1000cb9c:	e13b      	b.n	1000ce16 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000cb9e:	4a9f      	ldr	r2, [pc, #636]	; (1000ce1c <system_clock_peripheral_disable+0x30c>)
1000cba0:	68d1      	ldr	r1, [r2, #12]
1000cba2:	4ba2      	ldr	r3, [pc, #648]	; (1000ce2c <system_clock_peripheral_disable+0x31c>)
1000cba4:	400b      	ands	r3, r1
1000cba6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cba8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART0_CORE_CLK_EN;
		break;
1000cbaa:	e134      	b.n	1000ce16 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000cbac:	4a9b      	ldr	r2, [pc, #620]	; (1000ce1c <system_clock_peripheral_disable+0x30c>)
1000cbae:	68d1      	ldr	r1, [r2, #12]
1000cbb0:	4b9f      	ldr	r3, [pc, #636]	; (1000ce30 <system_clock_peripheral_disable+0x320>)
1000cbb2:	400b      	ands	r3, r1
1000cbb4:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cbb6:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART0_IF_CLK_EN;
		break;
1000cbb8:	e12d      	b.n	1000ce16 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000cbba:	4a98      	ldr	r2, [pc, #608]	; (1000ce1c <system_clock_peripheral_disable+0x30c>)
1000cbbc:	68d1      	ldr	r1, [r2, #12]
1000cbbe:	4b9d      	ldr	r3, [pc, #628]	; (1000ce34 <system_clock_peripheral_disable+0x324>)
1000cbc0:	400b      	ands	r3, r1
1000cbc2:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cbc4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART1_CORE_CLK_EN;
		break;
1000cbc6:	e126      	b.n	1000ce16 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000cbc8:	4a94      	ldr	r2, [pc, #592]	; (1000ce1c <system_clock_peripheral_disable+0x30c>)
1000cbca:	68d1      	ldr	r1, [r2, #12]
1000cbcc:	4b9a      	ldr	r3, [pc, #616]	; (1000ce38 <system_clock_peripheral_disable+0x328>)
1000cbce:	400b      	ands	r3, r1
1000cbd0:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cbd2:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART1_IF_CLK_EN;
		break;
1000cbd4:	e11f      	b.n	1000ce16 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000cbd6:	4a91      	ldr	r2, [pc, #580]	; (1000ce1c <system_clock_peripheral_disable+0x30c>)
1000cbd8:	68d1      	ldr	r1, [r2, #12]
1000cbda:	4b98      	ldr	r3, [pc, #608]	; (1000ce3c <system_clock_peripheral_disable+0x32c>)
1000cbdc:	400b      	ands	r3, r1
1000cbde:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cbe0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IRQ_CTRLR_CORE_CLK_EN;
		break;
1000cbe2:	e118      	b.n	1000ce16 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000cbe4:	4a8d      	ldr	r2, [pc, #564]	; (1000ce1c <system_clock_peripheral_disable+0x30c>)
1000cbe6:	68d1      	ldr	r1, [r2, #12]
1000cbe8:	4b95      	ldr	r3, [pc, #596]	; (1000ce40 <system_clock_peripheral_disable+0x330>)
1000cbea:	400b      	ands	r3, r1
1000cbec:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cbee:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_1_GL_MEM_CLK_EN;
		break;
1000cbf0:	e111      	b.n	1000ce16 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000cbf2:	4a8a      	ldr	r2, [pc, #552]	; (1000ce1c <system_clock_peripheral_disable+0x30c>)
1000cbf4:	68d1      	ldr	r1, [r2, #12]
1000cbf6:	4b93      	ldr	r3, [pc, #588]	; (1000ce44 <system_clock_peripheral_disable+0x334>)
1000cbf8:	400b      	ands	r3, r1
1000cbfa:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cbfc:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_2_GL_MEM_CLK_EN;
		break;
1000cbfe:	e10a      	b.n	1000ce16 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000cc00:	4a86      	ldr	r2, [pc, #536]	; (1000ce1c <system_clock_peripheral_disable+0x30c>)
1000cc02:	68d1      	ldr	r1, [r2, #12]
1000cc04:	4b90      	ldr	r3, [pc, #576]	; (1000ce48 <system_clock_peripheral_disable+0x338>)
1000cc06:	400b      	ands	r3, r1
1000cc08:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cc0a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ROM_MEM_CLK_EN;
		break;
1000cc0c:	e103      	b.n	1000ce16 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000cc0e:	4a83      	ldr	r2, [pc, #524]	; (1000ce1c <system_clock_peripheral_disable+0x30c>)
1000cc10:	68d1      	ldr	r1, [r2, #12]
1000cc12:	4b8e      	ldr	r3, [pc, #568]	; (1000ce4c <system_clock_peripheral_disable+0x33c>)
1000cc14:	400b      	ands	r3, r1
1000cc16:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cc18:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_XBAR_IF_CLK_EN;
		break;
1000cc1a:	e0fc      	b.n	1000ce16 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000cc1c:	4a7f      	ldr	r2, [pc, #508]	; (1000ce1c <system_clock_peripheral_disable+0x30c>)
1000cc1e:	68d1      	ldr	r1, [r2, #12]
1000cc20:	4b8b      	ldr	r3, [pc, #556]	; (1000ce50 <system_clock_peripheral_disable+0x340>)
1000cc22:	400b      	ands	r3, r1
1000cc24:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cc26:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_AON_WRAPPER_CLK_EN;
		break;
1000cc28:	e0f5      	b.n	1000ce16 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000cc2a:	4a7c      	ldr	r2, [pc, #496]	; (1000ce1c <system_clock_peripheral_disable+0x30c>)
1000cc2c:	68d1      	ldr	r1, [r2, #12]
1000cc2e:	4b89      	ldr	r3, [pc, #548]	; (1000ce54 <system_clock_peripheral_disable+0x344>)
1000cc30:	400b      	ands	r3, r1
1000cc32:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cc34:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLK_EN;
		break;
1000cc36:	e0ee      	b.n	1000ce16 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000cc38:	4a78      	ldr	r2, [pc, #480]	; (1000ce1c <system_clock_peripheral_disable+0x30c>)
1000cc3a:	68d1      	ldr	r1, [r2, #12]
1000cc3c:	4b86      	ldr	r3, [pc, #536]	; (1000ce58 <system_clock_peripheral_disable+0x348>)
1000cc3e:	400b      	ands	r3, r1
1000cc40:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cc42:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLKG_EN;
		break;
1000cc44:	e0e7      	b.n	1000ce16 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000cc46:	4a75      	ldr	r2, [pc, #468]	; (1000ce1c <system_clock_peripheral_disable+0x30c>)
1000cc48:	68d1      	ldr	r1, [r2, #12]
1000cc4a:	4b84      	ldr	r3, [pc, #528]	; (1000ce5c <system_clock_peripheral_disable+0x34c>)
1000cc4c:	400b      	ands	r3, r1
1000cc4e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cc50:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_BLE_MEM_CLK_EN;
		break;
1000cc52:	e0e0      	b.n	1000ce16 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000cc54:	4a71      	ldr	r2, [pc, #452]	; (1000ce1c <system_clock_peripheral_disable+0x30c>)
1000cc56:	68d1      	ldr	r1, [r2, #12]
1000cc58:	4b81      	ldr	r3, [pc, #516]	; (1000ce60 <system_clock_peripheral_disable+0x350>)
1000cc5a:	400b      	ands	r3, r1
1000cc5c:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cc5e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC0_CLK_EN;
		break;
1000cc60:	e0d9      	b.n	1000ce16 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000cc62:	4a6e      	ldr	r2, [pc, #440]	; (1000ce1c <system_clock_peripheral_disable+0x30c>)
1000cc64:	68d1      	ldr	r1, [r2, #12]
1000cc66:	4b7f      	ldr	r3, [pc, #508]	; (1000ce64 <system_clock_peripheral_disable+0x354>)
1000cc68:	400b      	ands	r3, r1
1000cc6a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cc6c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC1_CLK_EN;
		break;
1000cc6e:	e0d2      	b.n	1000ce16 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000cc70:	4a6a      	ldr	r2, [pc, #424]	; (1000ce1c <system_clock_peripheral_disable+0x30c>)
1000cc72:	68d1      	ldr	r1, [r2, #12]
1000cc74:	4b7c      	ldr	r3, [pc, #496]	; (1000ce68 <system_clock_peripheral_disable+0x358>)
1000cc76:	400b      	ands	r3, r1
1000cc78:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cc7a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC2_CLK_EN;
		break;
1000cc7c:	e0cb      	b.n	1000ce16 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000cc7e:	4a67      	ldr	r2, [pc, #412]	; (1000ce1c <system_clock_peripheral_disable+0x30c>)
1000cc80:	68d1      	ldr	r1, [r2, #12]
1000cc82:	4b7a      	ldr	r3, [pc, #488]	; (1000ce6c <system_clock_peripheral_disable+0x35c>)
1000cc84:	400b      	ands	r3, r1
1000cc86:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cc88:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C1_CORE_CLK_EN;
		break;
1000cc8a:	e0c4      	b.n	1000ce16 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000cc8c:	4a63      	ldr	r2, [pc, #396]	; (1000ce1c <system_clock_peripheral_disable+0x30c>)
1000cc8e:	68d1      	ldr	r1, [r2, #12]
1000cc90:	4b77      	ldr	r3, [pc, #476]	; (1000ce70 <system_clock_peripheral_disable+0x360>)
1000cc92:	400b      	ands	r3, r1
1000cc94:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cc96:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_CLK_EN;
		break;
1000cc98:	e0bd      	b.n	1000ce16 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000cc9a:	4a60      	ldr	r2, [pc, #384]	; (1000ce1c <system_clock_peripheral_disable+0x30c>)
1000cc9c:	6913      	ldr	r3, [r2, #16]
1000cc9e:	2101      	movs	r1, #1
1000cca0:	438b      	bics	r3, r1
1000cca2:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cca4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE0_CLK_EN;
		break;
1000cca6:	e0b6      	b.n	1000ce16 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000cca8:	4a5c      	ldr	r2, [pc, #368]	; (1000ce1c <system_clock_peripheral_disable+0x30c>)
1000ccaa:	6913      	ldr	r3, [r2, #16]
1000ccac:	2102      	movs	r1, #2
1000ccae:	438b      	bics	r3, r1
1000ccb0:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ccb2:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE1_CLK_EN;
		break;
1000ccb4:	e0af      	b.n	1000ce16 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000ccb6:	4a59      	ldr	r2, [pc, #356]	; (1000ce1c <system_clock_peripheral_disable+0x30c>)
1000ccb8:	6913      	ldr	r3, [r2, #16]
1000ccba:	2104      	movs	r1, #4
1000ccbc:	438b      	bics	r3, r1
1000ccbe:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ccc0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE2_CLK_EN;
		break;
1000ccc2:	e0a8      	b.n	1000ce16 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000ccc4:	4a55      	ldr	r2, [pc, #340]	; (1000ce1c <system_clock_peripheral_disable+0x30c>)
1000ccc6:	6913      	ldr	r3, [r2, #16]
1000ccc8:	2108      	movs	r1, #8
1000ccca:	438b      	bics	r3, r1
1000cccc:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ccce:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE3_CLK_EN;
		break;
1000ccd0:	e0a1      	b.n	1000ce16 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000ccd2:	4a52      	ldr	r2, [pc, #328]	; (1000ce1c <system_clock_peripheral_disable+0x30c>)
1000ccd4:	6913      	ldr	r3, [r2, #16]
1000ccd6:	2110      	movs	r1, #16
1000ccd8:	438b      	bics	r3, r1
1000ccda:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ccdc:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE4_CLK_EN;
		break;
1000ccde:	e09a      	b.n	1000ce16 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000cce0:	4a4e      	ldr	r2, [pc, #312]	; (1000ce1c <system_clock_peripheral_disable+0x30c>)
1000cce2:	6913      	ldr	r3, [r2, #16]
1000cce4:	2120      	movs	r1, #32
1000cce6:	438b      	bics	r3, r1
1000cce8:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ccea:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE5_CLK_EN;
		break;
1000ccec:	e093      	b.n	1000ce16 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000ccee:	4a4b      	ldr	r2, [pc, #300]	; (1000ce1c <system_clock_peripheral_disable+0x30c>)
1000ccf0:	6913      	ldr	r3, [r2, #16]
1000ccf2:	2140      	movs	r1, #64	; 0x40
1000ccf4:	438b      	bics	r3, r1
1000ccf6:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ccf8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM0_CLK_EN;
		break;
1000ccfa:	e08c      	b.n	1000ce16 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000ccfc:	4a47      	ldr	r2, [pc, #284]	; (1000ce1c <system_clock_peripheral_disable+0x30c>)
1000ccfe:	6913      	ldr	r3, [r2, #16]
1000cd00:	2180      	movs	r1, #128	; 0x80
1000cd02:	438b      	bics	r3, r1
1000cd04:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cd06:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM1_CLK_EN;
		break;
1000cd08:	e085      	b.n	1000ce16 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000cd0a:	4a44      	ldr	r2, [pc, #272]	; (1000ce1c <system_clock_peripheral_disable+0x30c>)
1000cd0c:	6911      	ldr	r1, [r2, #16]
1000cd0e:	4b44      	ldr	r3, [pc, #272]	; (1000ce20 <system_clock_peripheral_disable+0x310>)
1000cd10:	400b      	ands	r3, r1
1000cd12:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cd14:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM2_CLK_EN;
		break;
1000cd16:	e07e      	b.n	1000ce16 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000cd18:	4a40      	ldr	r2, [pc, #256]	; (1000ce1c <system_clock_peripheral_disable+0x30c>)
1000cd1a:	6911      	ldr	r1, [r2, #16]
1000cd1c:	4b55      	ldr	r3, [pc, #340]	; (1000ce74 <system_clock_peripheral_disable+0x364>)
1000cd1e:	400b      	ands	r3, r1
1000cd20:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cd22:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM3_CLK_EN;
		break;
1000cd24:	e077      	b.n	1000ce16 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000cd26:	4a3d      	ldr	r2, [pc, #244]	; (1000ce1c <system_clock_peripheral_disable+0x30c>)
1000cd28:	6911      	ldr	r1, [r2, #16]
1000cd2a:	4b53      	ldr	r3, [pc, #332]	; (1000ce78 <system_clock_peripheral_disable+0x368>)
1000cd2c:	400b      	ands	r3, r1
1000cd2e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cd30:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SENS_ADC_CLK_EN;
		break;
1000cd32:	e070      	b.n	1000ce16 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000cd34:	4a39      	ldr	r2, [pc, #228]	; (1000ce1c <system_clock_peripheral_disable+0x30c>)
1000cd36:	6911      	ldr	r1, [r2, #16]
1000cd38:	4b3a      	ldr	r3, [pc, #232]	; (1000ce24 <system_clock_peripheral_disable+0x314>)
1000cd3a:	400b      	ands	r3, r1
1000cd3c:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cd3e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI0_SCK_PHASE_INT_CLK_EN;
		break;
1000cd40:	e069      	b.n	1000ce16 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000cd42:	4a36      	ldr	r2, [pc, #216]	; (1000ce1c <system_clock_peripheral_disable+0x30c>)
1000cd44:	6911      	ldr	r1, [r2, #16]
1000cd46:	4b38      	ldr	r3, [pc, #224]	; (1000ce28 <system_clock_peripheral_disable+0x318>)
1000cd48:	400b      	ands	r3, r1
1000cd4a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cd4c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI1_SCK_PHASE_INT_CLK_EN;
		break;
1000cd4e:	e062      	b.n	1000ce16 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000cd50:	4a32      	ldr	r2, [pc, #200]	; (1000ce1c <system_clock_peripheral_disable+0x30c>)
1000cd52:	6911      	ldr	r1, [r2, #16]
1000cd54:	4b35      	ldr	r3, [pc, #212]	; (1000ce2c <system_clock_peripheral_disable+0x31c>)
1000cd56:	400b      	ands	r3, r1
1000cd58:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cd5a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_GPIO_GCLK_EN;
		break;
1000cd5c:	e05b      	b.n	1000ce16 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000cd5e:	4a2f      	ldr	r2, [pc, #188]	; (1000ce1c <system_clock_peripheral_disable+0x30c>)
1000cd60:	6911      	ldr	r1, [r2, #16]
1000cd62:	4b33      	ldr	r3, [pc, #204]	; (1000ce30 <system_clock_peripheral_disable+0x320>)
1000cd64:	400b      	ands	r3, r1
1000cd66:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cd68:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_TIMER0_PGCLK_EN;
		break;
1000cd6a:	e054      	b.n	1000ce16 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000cd6c:	4a2b      	ldr	r2, [pc, #172]	; (1000ce1c <system_clock_peripheral_disable+0x30c>)
1000cd6e:	6911      	ldr	r1, [r2, #16]
1000cd70:	4b30      	ldr	r3, [pc, #192]	; (1000ce34 <system_clock_peripheral_disable+0x324>)
1000cd72:	400b      	ands	r3, r1
1000cd74:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cd76:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_CORE_CLK_EN;
		break;
1000cd78:	e04d      	b.n	1000ce16 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000cd7a:	4a28      	ldr	r2, [pc, #160]	; (1000ce1c <system_clock_peripheral_disable+0x30c>)
1000cd7c:	6911      	ldr	r1, [r2, #16]
1000cd7e:	4b2e      	ldr	r3, [pc, #184]	; (1000ce38 <system_clock_peripheral_disable+0x328>)
1000cd80:	400b      	ands	r3, r1
1000cd82:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cd84:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_AHB_CLK_EN;
		break;
1000cd86:	e046      	b.n	1000ce16 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000cd88:	4a24      	ldr	r2, [pc, #144]	; (1000ce1c <system_clock_peripheral_disable+0x30c>)
1000cd8a:	6911      	ldr	r1, [r2, #16]
1000cd8c:	4b2b      	ldr	r3, [pc, #172]	; (1000ce3c <system_clock_peripheral_disable+0x32c>)
1000cd8e:	400b      	ands	r3, r1
1000cd90:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cd92:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_CORE_CLK_EN;
		break;
1000cd94:	e03f      	b.n	1000ce16 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000cd96:	4a21      	ldr	r2, [pc, #132]	; (1000ce1c <system_clock_peripheral_disable+0x30c>)
1000cd98:	6911      	ldr	r1, [r2, #16]
1000cd9a:	4b29      	ldr	r3, [pc, #164]	; (1000ce40 <system_clock_peripheral_disable+0x330>)
1000cd9c:	400b      	ands	r3, r1
1000cd9e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cda0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_AHB_CLK_EN;
		break;
1000cda2:	e038      	b.n	1000ce16 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000cda4:	4a1d      	ldr	r2, [pc, #116]	; (1000ce1c <system_clock_peripheral_disable+0x30c>)
1000cda6:	6911      	ldr	r1, [r2, #16]
1000cda8:	4b26      	ldr	r3, [pc, #152]	; (1000ce44 <system_clock_peripheral_disable+0x334>)
1000cdaa:	400b      	ands	r3, r1
1000cdac:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cdae:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_0_MEM_CLK_EN;
		break;
1000cdb0:	e031      	b.n	1000ce16 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000cdb2:	4a1a      	ldr	r2, [pc, #104]	; (1000ce1c <system_clock_peripheral_disable+0x30c>)
1000cdb4:	6911      	ldr	r1, [r2, #16]
1000cdb6:	4b24      	ldr	r3, [pc, #144]	; (1000ce48 <system_clock_peripheral_disable+0x338>)
1000cdb8:	400b      	ands	r3, r1
1000cdba:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cdbc:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_1_MEM_CLK_EN;
		break;
1000cdbe:	e02a      	b.n	1000ce16 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000cdc0:	4a16      	ldr	r2, [pc, #88]	; (1000ce1c <system_clock_peripheral_disable+0x30c>)
1000cdc2:	6911      	ldr	r1, [r2, #16]
1000cdc4:	4b21      	ldr	r3, [pc, #132]	; (1000ce4c <system_clock_peripheral_disable+0x33c>)
1000cdc6:	400b      	ands	r3, r1
1000cdc8:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cdca:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_2_MEM_CLK_EN;
		break;
1000cdcc:	e023      	b.n	1000ce16 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000cdce:	4a13      	ldr	r2, [pc, #76]	; (1000ce1c <system_clock_peripheral_disable+0x30c>)
1000cdd0:	6911      	ldr	r1, [r2, #16]
1000cdd2:	4b1f      	ldr	r3, [pc, #124]	; (1000ce50 <system_clock_peripheral_disable+0x340>)
1000cdd4:	400b      	ands	r3, r1
1000cdd6:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cdd8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_0_MEM_CLK_EN;
		break;
1000cdda:	e01c      	b.n	1000ce16 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000cddc:	4a0f      	ldr	r2, [pc, #60]	; (1000ce1c <system_clock_peripheral_disable+0x30c>)
1000cdde:	6911      	ldr	r1, [r2, #16]
1000cde0:	4b1c      	ldr	r3, [pc, #112]	; (1000ce54 <system_clock_peripheral_disable+0x344>)
1000cde2:	400b      	ands	r3, r1
1000cde4:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cde6:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_1_MEM_CLK_EN;
		break;
1000cde8:	e015      	b.n	1000ce16 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
1000cdea:	4a0c      	ldr	r2, [pc, #48]	; (1000ce1c <system_clock_peripheral_disable+0x30c>)
1000cdec:	7d13      	ldrb	r3, [r2, #20]
1000cdee:	2101      	movs	r1, #1
1000cdf0:	438b      	bics	r3, r1
1000cdf2:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cdf4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
				~LPMCU_MISC_REGS_BTMCU_CTRL_RXTX_SEQ_CLK_EN;
		break;
1000cdf6:	e00e      	b.n	1000ce16 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
1000cdf8:	4a08      	ldr	r2, [pc, #32]	; (1000ce1c <system_clock_peripheral_disable+0x30c>)
1000cdfa:	7d13      	ldrb	r3, [r2, #20]
1000cdfc:	2102      	movs	r1, #2
1000cdfe:	438b      	bics	r3, r1
1000ce00:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ce02:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
				~LPMCU_MISC_REGS_BTMCU_CTRL_AHB_CLK_EN;
		break;
1000ce04:	e007      	b.n	1000ce16 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
1000ce06:	4a05      	ldr	r2, [pc, #20]	; (1000ce1c <system_clock_peripheral_disable+0x30c>)
1000ce08:	7d13      	ldrb	r3, [r2, #20]
1000ce0a:	2104      	movs	r1, #4
1000ce0c:	438b      	bics	r3, r1
1000ce0e:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ce10:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
				~LPMCU_MISC_REGS_BTMCU_CTRL_PERIPH_REGS_CLK_EN;
		break;
1000ce12:	e000      	b.n	1000ce16 <system_clock_peripheral_disable+0x306>

		default:
			return STATUS_ERR_INVALID_ARG;
1000ce14:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
1000ce16:	bd00      	pop	{pc}
1000ce18:	100174c0 	.word	0x100174c0
1000ce1c:	4000b000 	.word	0x4000b000
1000ce20:	fffffeff 	.word	0xfffffeff
1000ce24:	fffff7ff 	.word	0xfffff7ff
1000ce28:	ffffefff 	.word	0xffffefff
1000ce2c:	ffffdfff 	.word	0xffffdfff
1000ce30:	ffffbfff 	.word	0xffffbfff
1000ce34:	ffff7fff 	.word	0xffff7fff
1000ce38:	fffeffff 	.word	0xfffeffff
1000ce3c:	fffdffff 	.word	0xfffdffff
1000ce40:	fffbffff 	.word	0xfffbffff
1000ce44:	fff7ffff 	.word	0xfff7ffff
1000ce48:	ffefffff 	.word	0xffefffff
1000ce4c:	ffdfffff 	.word	0xffdfffff
1000ce50:	ffbfffff 	.word	0xffbfffff
1000ce54:	ff7fffff 	.word	0xff7fffff
1000ce58:	feffffff 	.word	0xfeffffff
1000ce5c:	fdffffff 	.word	0xfdffffff
1000ce60:	fbffffff 	.word	0xfbffffff
1000ce64:	f7ffffff 	.word	0xf7ffffff
1000ce68:	efffffff 	.word	0xefffffff
1000ce6c:	dfffffff 	.word	0xdfffffff
1000ce70:	bfffffff 	.word	0xbfffffff
1000ce74:	fffffdff 	.word	0xfffffdff
1000ce78:	fffffbff 	.word	0xfffffbff

1000ce7c <system_peripheral_reset>:
 * \return Status of operation.
 * \retval STATUS_OK               Clock config correctly
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_peripheral_reset(enum system_peripheral peripheral)
{
1000ce7c:	b500      	push	{lr}
	switch (peripheral) {
1000ce7e:	2843      	cmp	r0, #67	; 0x43
1000ce80:	d900      	bls.n	1000ce84 <system_peripheral_reset+0x8>
1000ce82:	e223      	b.n	1000d2cc <system_peripheral_reset+0x450>
1000ce84:	0080      	lsls	r0, r0, #2
1000ce86:	4be0      	ldr	r3, [pc, #896]	; (1000d208 <system_peripheral_reset+0x38c>)
1000ce88:	581b      	ldr	r3, [r3, r0]
1000ce8a:	469f      	mov	pc, r3
		case PERIPHERAL_LPMCU_CPU:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000ce8c:	4bdf      	ldr	r3, [pc, #892]	; (1000d20c <system_peripheral_reset+0x390>)
1000ce8e:	6859      	ldr	r1, [r3, #4]
1000ce90:	2202      	movs	r2, #2
1000ce92:	4391      	bics	r1, r2
1000ce94:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000ce96:	6859      	ldr	r1, [r3, #4]
1000ce98:	430a      	orrs	r2, r1
1000ce9a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ce9c:	2000      	movs	r0, #0
		case PERIPHERAL_LPMCU_CPU:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN;
		break;
1000ce9e:	e216      	b.n	1000d2ce <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cea0:	4bda      	ldr	r3, [pc, #872]	; (1000d20c <system_peripheral_reset+0x390>)
1000cea2:	6859      	ldr	r1, [r3, #4]
1000cea4:	2204      	movs	r2, #4
1000cea6:	4391      	bics	r1, r2
1000cea8:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_SYS_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000ceaa:	6859      	ldr	r1, [r3, #4]
1000ceac:	430a      	orrs	r2, r1
1000ceae:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ceb0:	2000      	movs	r0, #0
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_SYS_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_SYS_RSTN;
		break;
1000ceb2:	e20c      	b.n	1000d2ce <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI_FLASH_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000ceb4:	4bd5      	ldr	r3, [pc, #852]	; (1000d20c <system_peripheral_reset+0x390>)
1000ceb6:	6859      	ldr	r1, [r3, #4]
1000ceb8:	2208      	movs	r2, #8
1000ceba:	4391      	bics	r1, r2
1000cebc:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cebe:	6859      	ldr	r1, [r3, #4]
1000cec0:	430a      	orrs	r2, r1
1000cec2:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cec4:	2000      	movs	r0, #0
		case PERIPHERAL_SPI_FLASH_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_RSTN;
		break;
1000cec6:	e202      	b.n	1000d2ce <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cec8:	4bd0      	ldr	r3, [pc, #832]	; (1000d20c <system_peripheral_reset+0x390>)
1000ceca:	6859      	ldr	r1, [r3, #4]
1000cecc:	2210      	movs	r2, #16
1000cece:	4391      	bics	r1, r2
1000ced0:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000ced2:	6859      	ldr	r1, [r3, #4]
1000ced4:	430a      	orrs	r2, r1
1000ced6:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ced8:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_CORE_RSTN;
		break;
1000ceda:	e1f8      	b.n	1000d2ce <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cedc:	4bcb      	ldr	r3, [pc, #812]	; (1000d20c <system_peripheral_reset+0x390>)
1000cede:	6859      	ldr	r1, [r3, #4]
1000cee0:	2220      	movs	r2, #32
1000cee2:	4391      	bics	r1, r2
1000cee4:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cee6:	6859      	ldr	r1, [r3, #4]
1000cee8:	430a      	orrs	r2, r1
1000ceea:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ceec:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_IF_RSTN;
		break;
1000ceee:	e1ee      	b.n	1000d2ce <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cef0:	4bc6      	ldr	r3, [pc, #792]	; (1000d20c <system_peripheral_reset+0x390>)
1000cef2:	6859      	ldr	r1, [r3, #4]
1000cef4:	2240      	movs	r2, #64	; 0x40
1000cef6:	4391      	bics	r1, r2
1000cef8:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_CORE_RESETN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cefa:	6859      	ldr	r1, [r3, #4]
1000cefc:	430a      	orrs	r2, r1
1000cefe:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cf00:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_CORE_RESETN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_CORE_RESETN;
		break;
1000cf02:	e1e4      	b.n	1000d2ce <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cf04:	4bc1      	ldr	r3, [pc, #772]	; (1000d20c <system_peripheral_reset+0x390>)
1000cf06:	6859      	ldr	r1, [r3, #4]
1000cf08:	2280      	movs	r2, #128	; 0x80
1000cf0a:	4391      	bics	r1, r2
1000cf0c:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cf0e:	6859      	ldr	r1, [r3, #4]
1000cf10:	430a      	orrs	r2, r1
1000cf12:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cf14:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_IF_RSTN;
		break;
1000cf16:	e1da      	b.n	1000d2ce <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cf18:	4bbc      	ldr	r3, [pc, #752]	; (1000d20c <system_peripheral_reset+0x390>)
1000cf1a:	6859      	ldr	r1, [r3, #4]
1000cf1c:	4abc      	ldr	r2, [pc, #752]	; (1000d210 <system_peripheral_reset+0x394>)
1000cf1e:	400a      	ands	r2, r1
1000cf20:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cf22:	685a      	ldr	r2, [r3, #4]
1000cf24:	2180      	movs	r1, #128	; 0x80
1000cf26:	0049      	lsls	r1, r1, #1
1000cf28:	430a      	orrs	r2, r1
1000cf2a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cf2c:	2000      	movs	r0, #0
		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_CORE_RSTN;
		break;
1000cf2e:	e1ce      	b.n	1000d2ce <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cf30:	4bb6      	ldr	r3, [pc, #728]	; (1000d20c <system_peripheral_reset+0x390>)
1000cf32:	6859      	ldr	r1, [r3, #4]
1000cf34:	4ab7      	ldr	r2, [pc, #732]	; (1000d214 <system_peripheral_reset+0x398>)
1000cf36:	400a      	ands	r2, r1
1000cf38:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cf3a:	685a      	ldr	r2, [r3, #4]
1000cf3c:	2180      	movs	r1, #128	; 0x80
1000cf3e:	0089      	lsls	r1, r1, #2
1000cf40:	430a      	orrs	r2, r1
1000cf42:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cf44:	2000      	movs	r0, #0
		case PERIPHERAL_I2C0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_IF_RSTN;
		break;
1000cf46:	e1c2      	b.n	1000d2ce <system_peripheral_reset+0x452>

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cf48:	4bb0      	ldr	r3, [pc, #704]	; (1000d20c <system_peripheral_reset+0x390>)
1000cf4a:	6859      	ldr	r1, [r3, #4]
1000cf4c:	4ab2      	ldr	r2, [pc, #712]	; (1000d218 <system_peripheral_reset+0x39c>)
1000cf4e:	400a      	ands	r2, r1
1000cf50:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cf52:	685a      	ldr	r2, [r3, #4]
1000cf54:	2180      	movs	r1, #128	; 0x80
1000cf56:	00c9      	lsls	r1, r1, #3
1000cf58:	430a      	orrs	r2, r1
1000cf5a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cf5c:	2000      	movs	r0, #0
		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
		break;
1000cf5e:	e1b6      	b.n	1000d2ce <system_peripheral_reset+0x452>

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cf60:	4baa      	ldr	r3, [pc, #680]	; (1000d20c <system_peripheral_reset+0x390>)
1000cf62:	6859      	ldr	r1, [r3, #4]
1000cf64:	4aad      	ldr	r2, [pc, #692]	; (1000d21c <system_peripheral_reset+0x3a0>)
1000cf66:	400a      	ands	r2, r1
1000cf68:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_TIMER0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cf6a:	685a      	ldr	r2, [r3, #4]
1000cf6c:	2180      	movs	r1, #128	; 0x80
1000cf6e:	0109      	lsls	r1, r1, #4
1000cf70:	430a      	orrs	r2, r1
1000cf72:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cf74:	2000      	movs	r0, #0
		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_TIMER0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_TIMER0_RSTN;
		break;
1000cf76:	e1aa      	b.n	1000d2ce <system_peripheral_reset+0x452>

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cf78:	4ba4      	ldr	r3, [pc, #656]	; (1000d20c <system_peripheral_reset+0x390>)
1000cf7a:	6859      	ldr	r1, [r3, #4]
1000cf7c:	4aa8      	ldr	r2, [pc, #672]	; (1000d220 <system_peripheral_reset+0x3a4>)
1000cf7e:	400a      	ands	r2, r1
1000cf80:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cf82:	685a      	ldr	r2, [r3, #4]
1000cf84:	2180      	movs	r1, #128	; 0x80
1000cf86:	0149      	lsls	r1, r1, #5
1000cf88:	430a      	orrs	r2, r1
1000cf8a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cf8c:	2000      	movs	r0, #0
		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_CORE_RSTN;
		break;
1000cf8e:	e19e      	b.n	1000d2ce <system_peripheral_reset+0x452>

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cf90:	4b9e      	ldr	r3, [pc, #632]	; (1000d20c <system_peripheral_reset+0x390>)
1000cf92:	6859      	ldr	r1, [r3, #4]
1000cf94:	4aa3      	ldr	r2, [pc, #652]	; (1000d224 <system_peripheral_reset+0x3a8>)
1000cf96:	400a      	ands	r2, r1
1000cf98:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cf9a:	685a      	ldr	r2, [r3, #4]
1000cf9c:	2180      	movs	r1, #128	; 0x80
1000cf9e:	0189      	lsls	r1, r1, #6
1000cfa0:	430a      	orrs	r2, r1
1000cfa2:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cfa4:	2000      	movs	r0, #0
		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_IF_RSTN;
		break;
1000cfa6:	e192      	b.n	1000d2ce <system_peripheral_reset+0x452>

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cfa8:	4b98      	ldr	r3, [pc, #608]	; (1000d20c <system_peripheral_reset+0x390>)
1000cfaa:	6859      	ldr	r1, [r3, #4]
1000cfac:	4a9e      	ldr	r2, [pc, #632]	; (1000d228 <system_peripheral_reset+0x3ac>)
1000cfae:	400a      	ands	r2, r1
1000cfb0:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cfb2:	685a      	ldr	r2, [r3, #4]
1000cfb4:	2180      	movs	r1, #128	; 0x80
1000cfb6:	01c9      	lsls	r1, r1, #7
1000cfb8:	430a      	orrs	r2, r1
1000cfba:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cfbc:	2000      	movs	r0, #0
		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_CORE_RSTN;
		break;
1000cfbe:	e186      	b.n	1000d2ce <system_peripheral_reset+0x452>

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cfc0:	4b92      	ldr	r3, [pc, #584]	; (1000d20c <system_peripheral_reset+0x390>)
1000cfc2:	6859      	ldr	r1, [r3, #4]
1000cfc4:	4a99      	ldr	r2, [pc, #612]	; (1000d22c <system_peripheral_reset+0x3b0>)
1000cfc6:	400a      	ands	r2, r1
1000cfc8:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cfca:	685a      	ldr	r2, [r3, #4]
1000cfcc:	2180      	movs	r1, #128	; 0x80
1000cfce:	0209      	lsls	r1, r1, #8
1000cfd0:	430a      	orrs	r2, r1
1000cfd2:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cfd4:	2000      	movs	r0, #0
		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_IF_RSTN;
		break;
1000cfd6:	e17a      	b.n	1000d2ce <system_peripheral_reset+0x452>

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cfd8:	4b8c      	ldr	r3, [pc, #560]	; (1000d20c <system_peripheral_reset+0x390>)
1000cfda:	6859      	ldr	r1, [r3, #4]
1000cfdc:	4a94      	ldr	r2, [pc, #592]	; (1000d230 <system_peripheral_reset+0x3b4>)
1000cfde:	400a      	ands	r2, r1
1000cfe0:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cfe2:	685a      	ldr	r2, [r3, #4]
1000cfe4:	2180      	movs	r1, #128	; 0x80
1000cfe6:	0249      	lsls	r1, r1, #9
1000cfe8:	430a      	orrs	r2, r1
1000cfea:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cfec:	2000      	movs	r0, #0
		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT0_RSTN;
		break;
1000cfee:	e16e      	b.n	1000d2ce <system_peripheral_reset+0x452>

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cff0:	4b86      	ldr	r3, [pc, #536]	; (1000d20c <system_peripheral_reset+0x390>)
1000cff2:	6859      	ldr	r1, [r3, #4]
1000cff4:	4a8f      	ldr	r2, [pc, #572]	; (1000d234 <system_peripheral_reset+0x3b8>)
1000cff6:	400a      	ands	r2, r1
1000cff8:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cffa:	685a      	ldr	r2, [r3, #4]
1000cffc:	2180      	movs	r1, #128	; 0x80
1000cffe:	0289      	lsls	r1, r1, #10
1000d000:	430a      	orrs	r2, r1
1000d002:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d004:	2000      	movs	r0, #0
		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT1_RSTN;
		break;
1000d006:	e162      	b.n	1000d2ce <system_peripheral_reset+0x452>

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000d008:	4b80      	ldr	r3, [pc, #512]	; (1000d20c <system_peripheral_reset+0x390>)
1000d00a:	6859      	ldr	r1, [r3, #4]
1000d00c:	4a8a      	ldr	r2, [pc, #552]	; (1000d238 <system_peripheral_reset+0x3bc>)
1000d00e:	400a      	ands	r2, r1
1000d010:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000d012:	685a      	ldr	r2, [r3, #4]
1000d014:	2180      	movs	r1, #128	; 0x80
1000d016:	02c9      	lsls	r1, r1, #11
1000d018:	430a      	orrs	r2, r1
1000d01a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d01c:	2000      	movs	r0, #0
		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
		break;
1000d01e:	e156      	b.n	1000d2ce <system_peripheral_reset+0x452>

		case PERIPHERAL_MBIST:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000d020:	4b7a      	ldr	r3, [pc, #488]	; (1000d20c <system_peripheral_reset+0x390>)
1000d022:	6859      	ldr	r1, [r3, #4]
1000d024:	4a85      	ldr	r2, [pc, #532]	; (1000d23c <system_peripheral_reset+0x3c0>)
1000d026:	400a      	ands	r2, r1
1000d028:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000d02a:	685a      	ldr	r2, [r3, #4]
1000d02c:	2180      	movs	r1, #128	; 0x80
1000d02e:	0309      	lsls	r1, r1, #12
1000d030:	430a      	orrs	r2, r1
1000d032:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d034:	2000      	movs	r0, #0
		case PERIPHERAL_MBIST:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
		break;
1000d036:	e14a      	b.n	1000d2ce <system_peripheral_reset+0x452>

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000d038:	4b74      	ldr	r3, [pc, #464]	; (1000d20c <system_peripheral_reset+0x390>)
1000d03a:	6859      	ldr	r1, [r3, #4]
1000d03c:	4a80      	ldr	r2, [pc, #512]	; (1000d240 <system_peripheral_reset+0x3c4>)
1000d03e:	400a      	ands	r2, r1
1000d040:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000d042:	685a      	ldr	r2, [r3, #4]
1000d044:	2180      	movs	r1, #128	; 0x80
1000d046:	0349      	lsls	r1, r1, #13
1000d048:	430a      	orrs	r2, r1
1000d04a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d04c:	2000      	movs	r0, #0
		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
		break;
1000d04e:	e13e      	b.n	1000d2ce <system_peripheral_reset+0x452>

		case PERIPHERAL_LOW_POWER_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000d050:	4b6e      	ldr	r3, [pc, #440]	; (1000d20c <system_peripheral_reset+0x390>)
1000d052:	6859      	ldr	r1, [r3, #4]
1000d054:	4a7b      	ldr	r2, [pc, #492]	; (1000d244 <system_peripheral_reset+0x3c8>)
1000d056:	400a      	ands	r2, r1
1000d058:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000d05a:	685a      	ldr	r2, [r3, #4]
1000d05c:	2180      	movs	r1, #128	; 0x80
1000d05e:	0389      	lsls	r1, r1, #14
1000d060:	430a      	orrs	r2, r1
1000d062:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d064:	2000      	movs	r0, #0
		case PERIPHERAL_LOW_POWER_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
		break;
1000d066:	e132      	b.n	1000d2ce <system_peripheral_reset+0x452>

		case PERIPHERAL_LPMCU_DEBUG:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000d068:	4b68      	ldr	r3, [pc, #416]	; (1000d20c <system_peripheral_reset+0x390>)
1000d06a:	6859      	ldr	r1, [r3, #4]
1000d06c:	4a76      	ldr	r2, [pc, #472]	; (1000d248 <system_peripheral_reset+0x3cc>)
1000d06e:	400a      	ands	r2, r1
1000d070:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000d072:	685a      	ldr	r2, [r3, #4]
1000d074:	2180      	movs	r1, #128	; 0x80
1000d076:	03c9      	lsls	r1, r1, #15
1000d078:	430a      	orrs	r2, r1
1000d07a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d07c:	2000      	movs	r0, #0
		case PERIPHERAL_LPMCU_DEBUG:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
		break;
1000d07e:	e126      	b.n	1000d2ce <system_peripheral_reset+0x452>

		case PERIPHERAL_ARM_FREE_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000d080:	4b62      	ldr	r3, [pc, #392]	; (1000d20c <system_peripheral_reset+0x390>)
1000d082:	6859      	ldr	r1, [r3, #4]
1000d084:	4a71      	ldr	r2, [pc, #452]	; (1000d24c <system_peripheral_reset+0x3d0>)
1000d086:	400a      	ands	r2, r1
1000d088:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000d08a:	685a      	ldr	r2, [r3, #4]
1000d08c:	2180      	movs	r1, #128	; 0x80
1000d08e:	0409      	lsls	r1, r1, #16
1000d090:	430a      	orrs	r2, r1
1000d092:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d094:	2000      	movs	r0, #0
		case PERIPHERAL_ARM_FREE_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
		break;
1000d096:	e11a      	b.n	1000d2ce <system_peripheral_reset+0x452>

		case PERIPHERAL_ARM_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000d098:	4b5c      	ldr	r3, [pc, #368]	; (1000d20c <system_peripheral_reset+0x390>)
1000d09a:	6859      	ldr	r1, [r3, #4]
1000d09c:	4a6c      	ldr	r2, [pc, #432]	; (1000d250 <system_peripheral_reset+0x3d4>)
1000d09e:	400a      	ands	r2, r1
1000d0a0:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000d0a2:	685a      	ldr	r2, [r3, #4]
1000d0a4:	2180      	movs	r1, #128	; 0x80
1000d0a6:	0449      	lsls	r1, r1, #17
1000d0a8:	430a      	orrs	r2, r1
1000d0aa:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d0ac:	2000      	movs	r0, #0
		case PERIPHERAL_ARM_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
		break;
1000d0ae:	e10e      	b.n	1000d2ce <system_peripheral_reset+0x452>

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000d0b0:	4b56      	ldr	r3, [pc, #344]	; (1000d20c <system_peripheral_reset+0x390>)
1000d0b2:	6859      	ldr	r1, [r3, #4]
1000d0b4:	4a67      	ldr	r2, [pc, #412]	; (1000d254 <system_peripheral_reset+0x3d8>)
1000d0b6:	400a      	ands	r2, r1
1000d0b8:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000d0ba:	685a      	ldr	r2, [r3, #4]
1000d0bc:	2180      	movs	r1, #128	; 0x80
1000d0be:	0489      	lsls	r1, r1, #18
1000d0c0:	430a      	orrs	r2, r1
1000d0c2:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d0c4:	2000      	movs	r0, #0
		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC0_RSTN;
		break;
1000d0c6:	e102      	b.n	1000d2ce <system_peripheral_reset+0x452>

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000d0c8:	4b50      	ldr	r3, [pc, #320]	; (1000d20c <system_peripheral_reset+0x390>)
1000d0ca:	6859      	ldr	r1, [r3, #4]
1000d0cc:	4a62      	ldr	r2, [pc, #392]	; (1000d258 <system_peripheral_reset+0x3dc>)
1000d0ce:	400a      	ands	r2, r1
1000d0d0:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000d0d2:	685a      	ldr	r2, [r3, #4]
1000d0d4:	2180      	movs	r1, #128	; 0x80
1000d0d6:	04c9      	lsls	r1, r1, #19
1000d0d8:	430a      	orrs	r2, r1
1000d0da:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d0dc:	2000      	movs	r0, #0
		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC1_RSTN;
		break;
1000d0de:	e0f6      	b.n	1000d2ce <system_peripheral_reset+0x452>

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000d0e0:	4b4a      	ldr	r3, [pc, #296]	; (1000d20c <system_peripheral_reset+0x390>)
1000d0e2:	6859      	ldr	r1, [r3, #4]
1000d0e4:	4a5d      	ldr	r2, [pc, #372]	; (1000d25c <system_peripheral_reset+0x3e0>)
1000d0e6:	400a      	ands	r2, r1
1000d0e8:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000d0ea:	685a      	ldr	r2, [r3, #4]
1000d0ec:	2180      	movs	r1, #128	; 0x80
1000d0ee:	0509      	lsls	r1, r1, #20
1000d0f0:	430a      	orrs	r2, r1
1000d0f2:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d0f4:	2000      	movs	r0, #0
		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC2_RSTN;
		break;
1000d0f6:	e0ea      	b.n	1000d2ce <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000d0f8:	4b44      	ldr	r3, [pc, #272]	; (1000d20c <system_peripheral_reset+0x390>)
1000d0fa:	6859      	ldr	r1, [r3, #4]
1000d0fc:	4a58      	ldr	r2, [pc, #352]	; (1000d260 <system_peripheral_reset+0x3e4>)
1000d0fe:	400a      	ands	r2, r1
1000d100:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000d102:	685a      	ldr	r2, [r3, #4]
1000d104:	2180      	movs	r1, #128	; 0x80
1000d106:	0549      	lsls	r1, r1, #21
1000d108:	430a      	orrs	r2, r1
1000d10a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d10c:	2000      	movs	r0, #0
		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM0_RSTN;
		break;
1000d10e:	e0de      	b.n	1000d2ce <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000d110:	4b3e      	ldr	r3, [pc, #248]	; (1000d20c <system_peripheral_reset+0x390>)
1000d112:	6859      	ldr	r1, [r3, #4]
1000d114:	4a53      	ldr	r2, [pc, #332]	; (1000d264 <system_peripheral_reset+0x3e8>)
1000d116:	400a      	ands	r2, r1
1000d118:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000d11a:	685a      	ldr	r2, [r3, #4]
1000d11c:	2180      	movs	r1, #128	; 0x80
1000d11e:	0589      	lsls	r1, r1, #22
1000d120:	430a      	orrs	r2, r1
1000d122:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d124:	2000      	movs	r0, #0
		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM1_RSTN;
		break;
1000d126:	e0d2      	b.n	1000d2ce <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000d128:	4b38      	ldr	r3, [pc, #224]	; (1000d20c <system_peripheral_reset+0x390>)
1000d12a:	6859      	ldr	r1, [r3, #4]
1000d12c:	4a4e      	ldr	r2, [pc, #312]	; (1000d268 <system_peripheral_reset+0x3ec>)
1000d12e:	400a      	ands	r2, r1
1000d130:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000d132:	685a      	ldr	r2, [r3, #4]
1000d134:	2180      	movs	r1, #128	; 0x80
1000d136:	05c9      	lsls	r1, r1, #23
1000d138:	430a      	orrs	r2, r1
1000d13a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d13c:	2000      	movs	r0, #0
		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM2_RSTN;
		break;
1000d13e:	e0c6      	b.n	1000d2ce <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000d140:	4a32      	ldr	r2, [pc, #200]	; (1000d20c <system_peripheral_reset+0x390>)
1000d142:	6853      	ldr	r3, [r2, #4]
1000d144:	005b      	lsls	r3, r3, #1
1000d146:	085b      	lsrs	r3, r3, #1
1000d148:	6053      	str	r3, [r2, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM3_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000d14a:	6853      	ldr	r3, [r2, #4]
1000d14c:	2180      	movs	r1, #128	; 0x80
1000d14e:	0609      	lsls	r1, r1, #24
1000d150:	430b      	orrs	r3, r1
1000d152:	6053      	str	r3, [r2, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d154:	2000      	movs	r0, #0
		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM3_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM3_RSTN;
		break;
1000d156:	e0ba      	b.n	1000d2ce <system_peripheral_reset+0x452>

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000d158:	4b2c      	ldr	r3, [pc, #176]	; (1000d20c <system_peripheral_reset+0x390>)
1000d15a:	891a      	ldrh	r2, [r3, #8]
1000d15c:	2101      	movs	r1, #1
1000d15e:	438a      	bics	r2, r1
1000d160:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000d162:	8919      	ldrh	r1, [r3, #8]
1000d164:	2201      	movs	r2, #1
1000d166:	430a      	orrs	r2, r1
1000d168:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d16a:	2000      	movs	r0, #0
		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER0_RSTN;
		break;
1000d16c:	e0af      	b.n	1000d2ce <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000d16e:	4b27      	ldr	r3, [pc, #156]	; (1000d20c <system_peripheral_reset+0x390>)
1000d170:	891a      	ldrh	r2, [r3, #8]
1000d172:	2102      	movs	r1, #2
1000d174:	438a      	bics	r2, r1
1000d176:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000d178:	8919      	ldrh	r1, [r3, #8]
1000d17a:	2202      	movs	r2, #2
1000d17c:	430a      	orrs	r2, r1
1000d17e:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d180:	2000      	movs	r0, #0
		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_CORE_RSTN;
		break;
1000d182:	e0a4      	b.n	1000d2ce <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000d184:	4b21      	ldr	r3, [pc, #132]	; (1000d20c <system_peripheral_reset+0x390>)
1000d186:	891a      	ldrh	r2, [r3, #8]
1000d188:	2104      	movs	r1, #4
1000d18a:	438a      	bics	r2, r1
1000d18c:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000d18e:	8919      	ldrh	r1, [r3, #8]
1000d190:	2204      	movs	r2, #4
1000d192:	430a      	orrs	r2, r1
1000d194:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d196:	2000      	movs	r0, #0
		case PERIPHERAL_I2C1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_IF_RSTN;
		break;
1000d198:	e099      	b.n	1000d2ce <system_peripheral_reset+0x452>

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000d19a:	4b1c      	ldr	r3, [pc, #112]	; (1000d20c <system_peripheral_reset+0x390>)
1000d19c:	891a      	ldrh	r2, [r3, #8]
1000d19e:	2108      	movs	r1, #8
1000d1a0:	438a      	bics	r2, r1
1000d1a2:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000d1a4:	8919      	ldrh	r1, [r3, #8]
1000d1a6:	2208      	movs	r2, #8
1000d1a8:	430a      	orrs	r2, r1
1000d1aa:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d1ac:	2000      	movs	r0, #0
		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
		break;
1000d1ae:	e08e      	b.n	1000d2ce <system_peripheral_reset+0x452>

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000d1b0:	4b16      	ldr	r3, [pc, #88]	; (1000d20c <system_peripheral_reset+0x390>)
1000d1b2:	891a      	ldrh	r2, [r3, #8]
1000d1b4:	2110      	movs	r1, #16
1000d1b6:	438a      	bics	r2, r1
1000d1b8:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000d1ba:	8919      	ldrh	r1, [r3, #8]
1000d1bc:	2210      	movs	r2, #16
1000d1be:	430a      	orrs	r2, r1
1000d1c0:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d1c2:	2000      	movs	r0, #0
		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
		break;
1000d1c4:	e083      	b.n	1000d2ce <system_peripheral_reset+0x452>

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000d1c6:	4b11      	ldr	r3, [pc, #68]	; (1000d20c <system_peripheral_reset+0x390>)
1000d1c8:	891a      	ldrh	r2, [r3, #8]
1000d1ca:	2120      	movs	r1, #32
1000d1cc:	438a      	bics	r2, r1
1000d1ce:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000d1d0:	8919      	ldrh	r1, [r3, #8]
1000d1d2:	2220      	movs	r2, #32
1000d1d4:	430a      	orrs	r2, r1
1000d1d6:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d1d8:	2000      	movs	r0, #0
		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
		break;
1000d1da:	e078      	b.n	1000d2ce <system_peripheral_reset+0x452>

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000d1dc:	4b0b      	ldr	r3, [pc, #44]	; (1000d20c <system_peripheral_reset+0x390>)
1000d1de:	891a      	ldrh	r2, [r3, #8]
1000d1e0:	2140      	movs	r1, #64	; 0x40
1000d1e2:	438a      	bics	r2, r1
1000d1e4:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000d1e6:	8919      	ldrh	r1, [r3, #8]
1000d1e8:	2240      	movs	r2, #64	; 0x40
1000d1ea:	430a      	orrs	r2, r1
1000d1ec:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d1ee:	2000      	movs	r0, #0
		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
		break;
1000d1f0:	e06d      	b.n	1000d2ce <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000d1f2:	4b06      	ldr	r3, [pc, #24]	; (1000d20c <system_peripheral_reset+0x390>)
1000d1f4:	891a      	ldrh	r2, [r3, #8]
1000d1f6:	2180      	movs	r1, #128	; 0x80
1000d1f8:	438a      	bics	r2, r1
1000d1fa:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000d1fc:	8919      	ldrh	r1, [r3, #8]
1000d1fe:	2280      	movs	r2, #128	; 0x80
1000d200:	430a      	orrs	r2, r1
1000d202:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d204:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_CLK_RSTN;
		break;
1000d206:	e062      	b.n	1000d2ce <system_peripheral_reset+0x452>
1000d208:	10017598 	.word	0x10017598
1000d20c:	4000b000 	.word	0x4000b000
1000d210:	fffffeff 	.word	0xfffffeff
1000d214:	fffffdff 	.word	0xfffffdff
1000d218:	fffffbff 	.word	0xfffffbff
1000d21c:	fffff7ff 	.word	0xfffff7ff
1000d220:	ffffefff 	.word	0xffffefff
1000d224:	ffffdfff 	.word	0xffffdfff
1000d228:	ffffbfff 	.word	0xffffbfff
1000d22c:	ffff7fff 	.word	0xffff7fff
1000d230:	fffeffff 	.word	0xfffeffff
1000d234:	fffdffff 	.word	0xfffdffff
1000d238:	fffbffff 	.word	0xfffbffff
1000d23c:	fff7ffff 	.word	0xfff7ffff
1000d240:	ffefffff 	.word	0xffefffff
1000d244:	ffdfffff 	.word	0xffdfffff
1000d248:	ffbfffff 	.word	0xffbfffff
1000d24c:	ff7fffff 	.word	0xff7fffff
1000d250:	feffffff 	.word	0xfeffffff
1000d254:	fdffffff 	.word	0xfdffffff
1000d258:	fbffffff 	.word	0xfbffffff
1000d25c:	f7ffffff 	.word	0xf7ffffff
1000d260:	efffffff 	.word	0xefffffff
1000d264:	dfffffff 	.word	0xdfffffff
1000d268:	bfffffff 	.word	0xbfffffff

		case PERIPHERAL_SPI1_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000d26c:	4b18      	ldr	r3, [pc, #96]	; (1000d2d0 <system_peripheral_reset+0x454>)
1000d26e:	8919      	ldrh	r1, [r3, #8]
1000d270:	4a18      	ldr	r2, [pc, #96]	; (1000d2d4 <system_peripheral_reset+0x458>)
1000d272:	400a      	ands	r2, r1
1000d274:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000d276:	8919      	ldrh	r1, [r3, #8]
1000d278:	2280      	movs	r2, #128	; 0x80
1000d27a:	0052      	lsls	r2, r2, #1
1000d27c:	430a      	orrs	r2, r1
1000d27e:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d280:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_CLK_RSTN;
		break;
1000d282:	e024      	b.n	1000d2ce <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000d284:	4b12      	ldr	r3, [pc, #72]	; (1000d2d0 <system_peripheral_reset+0x454>)
1000d286:	8919      	ldrh	r1, [r3, #8]
1000d288:	4a13      	ldr	r2, [pc, #76]	; (1000d2d8 <system_peripheral_reset+0x45c>)
1000d28a:	400a      	ands	r2, r1
1000d28c:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000d28e:	8919      	ldrh	r1, [r3, #8]
1000d290:	2280      	movs	r2, #128	; 0x80
1000d292:	0092      	lsls	r2, r2, #2
1000d294:	430a      	orrs	r2, r1
1000d296:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d298:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_PHASE_INT_CLK_RSTN;
		break;
1000d29a:	e018      	b.n	1000d2ce <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000d29c:	4b0c      	ldr	r3, [pc, #48]	; (1000d2d0 <system_peripheral_reset+0x454>)
1000d29e:	8919      	ldrh	r1, [r3, #8]
1000d2a0:	4a0e      	ldr	r2, [pc, #56]	; (1000d2dc <system_peripheral_reset+0x460>)
1000d2a2:	400a      	ands	r2, r1
1000d2a4:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000d2a6:	8919      	ldrh	r1, [r3, #8]
1000d2a8:	2280      	movs	r2, #128	; 0x80
1000d2aa:	00d2      	lsls	r2, r2, #3
1000d2ac:	430a      	orrs	r2, r1
1000d2ae:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d2b0:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_PHASE_INT_CLK_RSTN;
		break;
1000d2b2:	e00c      	b.n	1000d2ce <system_peripheral_reset+0x452>

		case PERIPHERAL_DMA:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000d2b4:	4b06      	ldr	r3, [pc, #24]	; (1000d2d0 <system_peripheral_reset+0x454>)
1000d2b6:	8919      	ldrh	r1, [r3, #8]
1000d2b8:	4a09      	ldr	r2, [pc, #36]	; (1000d2e0 <system_peripheral_reset+0x464>)
1000d2ba:	400a      	ands	r2, r1
1000d2bc:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_PROV_DMA_CTRL0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000d2be:	8919      	ldrh	r1, [r3, #8]
1000d2c0:	2280      	movs	r2, #128	; 0x80
1000d2c2:	0112      	lsls	r2, r2, #4
1000d2c4:	430a      	orrs	r2, r1
1000d2c6:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d2c8:	2000      	movs	r0, #0
		case PERIPHERAL_DMA:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_PROV_DMA_CTRL0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_PROV_DMA_CTRL0_RSTN;
		break;
1000d2ca:	e000      	b.n	1000d2ce <system_peripheral_reset+0x452>

		default:
			return STATUS_ERR_INVALID_ARG;
1000d2cc:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
1000d2ce:	bd00      	pop	{pc}
1000d2d0:	4000b000 	.word	0x4000b000
1000d2d4:	fffffeff 	.word	0xfffffeff
1000d2d8:	fffffdff 	.word	0xfffffdff
1000d2dc:	fffffbff 	.word	0xfffffbff
1000d2e0:	fffff7ff 	.word	0xfffff7ff

1000d2e4 <system_register_isr>:
void system_register_isr(enum ram_isr_table_index isr_index,
		uint32_t isr_address)
{
	uint32_t *temp;
	temp = (uint32_t *)(isr_index * 4 + ISR_RAM_MAP_START_ADDRESS);
	*temp = isr_address;
1000d2e4:	2380      	movs	r3, #128	; 0x80
1000d2e6:	04db      	lsls	r3, r3, #19
1000d2e8:	469c      	mov	ip, r3
1000d2ea:	4460      	add	r0, ip
1000d2ec:	0080      	lsls	r0, r0, #2
1000d2ee:	6001      	str	r1, [r0, #0]
}
1000d2f0:	4770      	bx	lr
1000d2f2:	46c0      	nop			; (mov r8, r8)

1000d2f4 <uart_rx0_isr_handler>:
	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
}

static void uart_rx0_isr_handler(void)
{
1000d2f4:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[0];
1000d2f6:	4b20      	ldr	r3, [pc, #128]	; (1000d378 <uart_rx0_isr_handler+0x84>)
1000d2f8:	681c      	ldr	r4, [r3, #0]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->RECEIVE_STATUS.reg;
1000d2fa:	6823      	ldr	r3, [r4, #0]
1000d2fc:	7d1d      	ldrb	r5, [r3, #20]
1000d2fe:	b2ed      	uxtb	r5, r5
	if (flags & UART_RECEIVE_STATUS_FIFO_OVERRUN) {
1000d300:	066a      	lsls	r2, r5, #25
1000d302:	d513      	bpl.n	1000d32c <uart_rx0_isr_handler+0x38>
		/* Store the error code */
		module->status = STATUS_ERR_OVERFLOW;
1000d304:	211e      	movs	r1, #30
1000d306:	2222      	movs	r2, #34	; 0x22
1000d308:	54a1      	strb	r1, [r4, r2]
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
1000d30a:	7e1a      	ldrb	r2, [r3, #24]
1000d30c:	3123      	adds	r1, #35	; 0x23
1000d30e:	438a      	bics	r2, r1
1000d310:	761a      	strb	r2, [r3, #24]
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
1000d312:	2321      	movs	r3, #33	; 0x21
1000d314:	5ce3      	ldrb	r3, [r4, r3]
1000d316:	071b      	lsls	r3, r3, #28
1000d318:	d506      	bpl.n	1000d328 <uart_rx0_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
1000d31a:	2320      	movs	r3, #32
		module->status = STATUS_ERR_OVERFLOW;
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
1000d31c:	5ce3      	ldrb	r3, [r4, r3]
1000d31e:	071b      	lsls	r3, r3, #28
1000d320:	d502      	bpl.n	1000d328 <uart_rx0_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
			(module->callback[UART_RX_FIFO_OVERRUN])(module);
1000d322:	0020      	movs	r0, r4
1000d324:	6923      	ldr	r3, [r4, #16]
1000d326:	4798      	blx	r3
		}
		/* Flush */
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
1000d328:	6823      	ldr	r3, [r4, #0]
1000d32a:	7c1b      	ldrb	r3, [r3, #16]
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1000d32c:	07eb      	lsls	r3, r5, #31
1000d32e:	d522      	bpl.n	1000d376 <uart_rx0_isr_handler+0x82>
		struct uart_module *const module)
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	uint16_t received_data = (uart_hw->RECEIVE_DATA.reg & UART_RECEIVE_DATA_MASK);
1000d330:	6823      	ldr	r3, [r4, #0]
1000d332:	7c1b      	ldrb	r3, [r3, #16]
1000d334:	b2db      	uxtb	r3, r3

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
1000d336:	6962      	ldr	r2, [r4, #20]
1000d338:	7013      	strb	r3, [r2, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
1000d33a:	6963      	ldr	r3, [r4, #20]
1000d33c:	3301      	adds	r3, #1
1000d33e:	6163      	str	r3, [r4, #20]

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
1000d340:	8ba3      	ldrh	r3, [r4, #28]
1000d342:	3b01      	subs	r3, #1
1000d344:	b29b      	uxth	r3, r3
1000d346:	83a3      	strh	r3, [r4, #28]
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
1000d348:	8ba3      	ldrh	r3, [r4, #28]
1000d34a:	b29b      	uxth	r3, r3
1000d34c:	2b00      	cmp	r3, #0
1000d34e:	d112      	bne.n	1000d376 <uart_rx0_isr_handler+0x82>
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
1000d350:	3321      	adds	r3, #33	; 0x21
1000d352:	5ce3      	ldrb	r3, [r4, r3]
1000d354:	075b      	lsls	r3, r3, #29
1000d356:	d50e      	bpl.n	1000d376 <uart_rx0_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
1000d358:	2320      	movs	r3, #32
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
1000d35a:	5ce3      	ldrb	r3, [r4, r3]
1000d35c:	075b      	lsls	r3, r3, #29
1000d35e:	d50a      	bpl.n	1000d376 <uart_rx0_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
				module->status = STATUS_OK;
1000d360:	2200      	movs	r2, #0
1000d362:	2322      	movs	r3, #34	; 0x22
1000d364:	54e2      	strb	r2, [r4, r3]
				module->hw->RX_INTERRUPT_MASK.reg &=
1000d366:	6822      	ldr	r2, [r4, #0]
1000d368:	7e13      	ldrb	r3, [r2, #24]
1000d36a:	2101      	movs	r1, #1
1000d36c:	438b      	bics	r3, r1
1000d36e:	7613      	strb	r3, [r2, #24]
					~(UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
				(module->callback[UART_RX_COMPLETE])(module);
1000d370:	68e3      	ldr	r3, [r4, #12]
1000d372:	0020      	movs	r0, r4
1000d374:	4798      	blx	r3
			}
		}
	}
}
1000d376:	bd70      	pop	{r4, r5, r6, pc}
1000d378:	1001a434 	.word	0x1001a434

1000d37c <uart_tx0_isr_handler>:

static void uart_tx0_isr_handler(void)
{
1000d37c:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[0];
1000d37e:	4b21      	ldr	r3, [pc, #132]	; (1000d404 <uart_tx0_isr_handler+0x88>)
1000d380:	681c      	ldr	r4, [r3, #0]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
1000d382:	6823      	ldr	r3, [r4, #0]
1000d384:	791d      	ldrb	r5, [r3, #4]
1000d386:	b2ed      	uxtb	r5, r5
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
1000d388:	07ea      	lsls	r2, r5, #31
1000d38a:	d517      	bpl.n	1000d3bc <uart_tx0_isr_handler+0x40>
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	/* Write value will be at least 8-bits long */
	uint8_t data_to_send = *(module->tx_buffer_ptr);
1000d38c:	69a2      	ldr	r2, [r4, #24]
1000d38e:	7811      	ldrb	r1, [r2, #0]
1000d390:	b2c9      	uxtb	r1, r1
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
1000d392:	3201      	adds	r2, #1
1000d394:	61a2      	str	r2, [r4, #24]

	/* Write the data to send*/
	uart_hw->TRANSMIT_DATA.reg = data_to_send & UART_TRANSMIT_DATA_MASK;
1000d396:	7019      	strb	r1, [r3, #0]

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
1000d398:	8be3      	ldrh	r3, [r4, #30]
1000d39a:	3b01      	subs	r3, #1
1000d39c:	b29b      	uxth	r3, r3
1000d39e:	83e3      	strh	r3, [r4, #30]
	struct uart_module *module = _uart_instances[0];
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
		_uart_write(module);
		if (module->remaining_tx_buffer_length == 0) {
1000d3a0:	8be3      	ldrh	r3, [r4, #30]
1000d3a2:	b29b      	uxth	r3, r3
1000d3a4:	2b00      	cmp	r3, #0
1000d3a6:	d109      	bne.n	1000d3bc <uart_tx0_isr_handler+0x40>
			module->hw->TX_INTERRUPT_MASK.reg &=
1000d3a8:	6822      	ldr	r2, [r4, #0]
1000d3aa:	7a13      	ldrb	r3, [r2, #8]
1000d3ac:	2101      	movs	r1, #1
1000d3ae:	438b      	bics	r3, r1
1000d3b0:	7213      	strb	r3, [r2, #8]
					~UART_TX_INTERRUPT_MASK_TX_FIFO_NOT_FULL_MASK;
			module->hw->TX_INTERRUPT_MASK.reg |=
1000d3b2:	6822      	ldr	r2, [r4, #0]
1000d3b4:	7a11      	ldrb	r1, [r2, #8]
1000d3b6:	2310      	movs	r3, #16
1000d3b8:	430b      	orrs	r3, r1
1000d3ba:	7213      	strb	r3, [r2, #8]
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
1000d3bc:	06eb      	lsls	r3, r5, #27
1000d3be:	d512      	bpl.n	1000d3e6 <uart_tx0_isr_handler+0x6a>
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
1000d3c0:	2321      	movs	r3, #33	; 0x21
1000d3c2:	5ce3      	ldrb	r3, [r4, r3]
1000d3c4:	07db      	lsls	r3, r3, #31
1000d3c6:	d50e      	bpl.n	1000d3e6 <uart_tx0_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
1000d3c8:	2320      	movs	r3, #32
			module->hw->TX_INTERRUPT_MASK.reg |=
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
1000d3ca:	5ce3      	ldrb	r3, [r4, r3]
1000d3cc:	07db      	lsls	r3, r3, #31
1000d3ce:	d50a      	bpl.n	1000d3e6 <uart_tx0_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
			module->status = STATUS_OK;
1000d3d0:	2200      	movs	r2, #0
1000d3d2:	2322      	movs	r3, #34	; 0x22
1000d3d4:	54e2      	strb	r2, [r4, r3]
			/* Disable interrupt */
			module->hw->TX_INTERRUPT_MASK.reg &=
1000d3d6:	6822      	ldr	r2, [r4, #0]
1000d3d8:	7a13      	ldrb	r3, [r2, #8]
1000d3da:	2110      	movs	r1, #16
1000d3dc:	438b      	bics	r3, r1
1000d3de:	7213      	strb	r3, [r2, #8]
				~UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
			(module->callback[UART_TX_COMPLETE])(module);
1000d3e0:	0020      	movs	r0, r4
1000d3e2:	6863      	ldr	r3, [r4, #4]
1000d3e4:	4798      	blx	r3
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
1000d3e6:	06ab      	lsls	r3, r5, #26
1000d3e8:	d50a      	bpl.n	1000d400 <uart_tx0_isr_handler+0x84>
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
1000d3ea:	2321      	movs	r3, #33	; 0x21
1000d3ec:	5ce3      	ldrb	r3, [r4, r3]
1000d3ee:	079b      	lsls	r3, r3, #30
1000d3f0:	d506      	bpl.n	1000d400 <uart_tx0_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
1000d3f2:	2320      	movs	r3, #32
			(module->callback[UART_TX_COMPLETE])(module);
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
1000d3f4:	5ce3      	ldrb	r3, [r4, r3]
1000d3f6:	079b      	lsls	r3, r3, #30
1000d3f8:	d502      	bpl.n	1000d400 <uart_tx0_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
			(module->callback[UART_CTS_ACTIVE])(module);
1000d3fa:	68a3      	ldr	r3, [r4, #8]
1000d3fc:	0020      	movs	r0, r4
1000d3fe:	4798      	blx	r3
		}

	}
}
1000d400:	bd70      	pop	{r4, r5, r6, pc}
1000d402:	46c0      	nop			; (mov r8, r8)
1000d404:	1001a434 	.word	0x1001a434

1000d408 <uart_rx1_isr_handler>:

static void uart_rx1_isr_handler(void)
{
1000d408:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[1];
1000d40a:	4b20      	ldr	r3, [pc, #128]	; (1000d48c <uart_rx1_isr_handler+0x84>)
1000d40c:	685c      	ldr	r4, [r3, #4]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->RECEIVE_STATUS.reg;
1000d40e:	6823      	ldr	r3, [r4, #0]
1000d410:	7d1d      	ldrb	r5, [r3, #20]
1000d412:	b2ed      	uxtb	r5, r5
	if (flags & UART_RECEIVE_STATUS_FIFO_OVERRUN) {
1000d414:	066a      	lsls	r2, r5, #25
1000d416:	d513      	bpl.n	1000d440 <uart_rx1_isr_handler+0x38>
		/* Store the error code */
		module->status = STATUS_ERR_OVERFLOW;
1000d418:	211e      	movs	r1, #30
1000d41a:	2222      	movs	r2, #34	; 0x22
1000d41c:	54a1      	strb	r1, [r4, r2]
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
1000d41e:	7e1a      	ldrb	r2, [r3, #24]
1000d420:	3123      	adds	r1, #35	; 0x23
1000d422:	438a      	bics	r2, r1
1000d424:	761a      	strb	r2, [r3, #24]
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
1000d426:	2321      	movs	r3, #33	; 0x21
1000d428:	5ce3      	ldrb	r3, [r4, r3]
1000d42a:	071b      	lsls	r3, r3, #28
1000d42c:	d506      	bpl.n	1000d43c <uart_rx1_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
1000d42e:	2320      	movs	r3, #32
		module->status = STATUS_ERR_OVERFLOW;
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
1000d430:	5ce3      	ldrb	r3, [r4, r3]
1000d432:	071b      	lsls	r3, r3, #28
1000d434:	d502      	bpl.n	1000d43c <uart_rx1_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
			(module->callback[UART_RX_FIFO_OVERRUN])(module);
1000d436:	0020      	movs	r0, r4
1000d438:	6923      	ldr	r3, [r4, #16]
1000d43a:	4798      	blx	r3
		}
		/* Flush */
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
1000d43c:	6823      	ldr	r3, [r4, #0]
1000d43e:	7c1b      	ldrb	r3, [r3, #16]
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1000d440:	07eb      	lsls	r3, r5, #31
1000d442:	d522      	bpl.n	1000d48a <uart_rx1_isr_handler+0x82>
		struct uart_module *const module)
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	uint16_t received_data = (uart_hw->RECEIVE_DATA.reg & UART_RECEIVE_DATA_MASK);
1000d444:	6823      	ldr	r3, [r4, #0]
1000d446:	7c1b      	ldrb	r3, [r3, #16]
1000d448:	b2db      	uxtb	r3, r3

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
1000d44a:	6962      	ldr	r2, [r4, #20]
1000d44c:	7013      	strb	r3, [r2, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
1000d44e:	6963      	ldr	r3, [r4, #20]
1000d450:	3301      	adds	r3, #1
1000d452:	6163      	str	r3, [r4, #20]

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
1000d454:	8ba3      	ldrh	r3, [r4, #28]
1000d456:	3b01      	subs	r3, #1
1000d458:	b29b      	uxth	r3, r3
1000d45a:	83a3      	strh	r3, [r4, #28]
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
1000d45c:	8ba3      	ldrh	r3, [r4, #28]
1000d45e:	b29b      	uxth	r3, r3
1000d460:	2b00      	cmp	r3, #0
1000d462:	d112      	bne.n	1000d48a <uart_rx1_isr_handler+0x82>
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
1000d464:	3321      	adds	r3, #33	; 0x21
1000d466:	5ce3      	ldrb	r3, [r4, r3]
1000d468:	075b      	lsls	r3, r3, #29
1000d46a:	d50e      	bpl.n	1000d48a <uart_rx1_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
1000d46c:	2320      	movs	r3, #32
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
1000d46e:	5ce3      	ldrb	r3, [r4, r3]
1000d470:	075b      	lsls	r3, r3, #29
1000d472:	d50a      	bpl.n	1000d48a <uart_rx1_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
				module->status = STATUS_OK;
1000d474:	2200      	movs	r2, #0
1000d476:	2322      	movs	r3, #34	; 0x22
1000d478:	54e2      	strb	r2, [r4, r3]
				module->hw->RX_INTERRUPT_MASK.reg &=
1000d47a:	6822      	ldr	r2, [r4, #0]
1000d47c:	7e13      	ldrb	r3, [r2, #24]
1000d47e:	2101      	movs	r1, #1
1000d480:	438b      	bics	r3, r1
1000d482:	7613      	strb	r3, [r2, #24]
					~(UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
				(module->callback[UART_RX_COMPLETE])(module);
1000d484:	68e3      	ldr	r3, [r4, #12]
1000d486:	0020      	movs	r0, r4
1000d488:	4798      	blx	r3
			}
		}
	}
}
1000d48a:	bd70      	pop	{r4, r5, r6, pc}
1000d48c:	1001a434 	.word	0x1001a434

1000d490 <uart_tx1_isr_handler>:

static void uart_tx1_isr_handler(void)
{
1000d490:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[1];
1000d492:	4b21      	ldr	r3, [pc, #132]	; (1000d518 <uart_tx1_isr_handler+0x88>)
1000d494:	685c      	ldr	r4, [r3, #4]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
1000d496:	6823      	ldr	r3, [r4, #0]
1000d498:	791d      	ldrb	r5, [r3, #4]
1000d49a:	b2ed      	uxtb	r5, r5
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
1000d49c:	07ea      	lsls	r2, r5, #31
1000d49e:	d517      	bpl.n	1000d4d0 <uart_tx1_isr_handler+0x40>
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	/* Write value will be at least 8-bits long */
	uint8_t data_to_send = *(module->tx_buffer_ptr);
1000d4a0:	69a2      	ldr	r2, [r4, #24]
1000d4a2:	7811      	ldrb	r1, [r2, #0]
1000d4a4:	b2c9      	uxtb	r1, r1
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
1000d4a6:	3201      	adds	r2, #1
1000d4a8:	61a2      	str	r2, [r4, #24]

	/* Write the data to send*/
	uart_hw->TRANSMIT_DATA.reg = data_to_send & UART_TRANSMIT_DATA_MASK;
1000d4aa:	7019      	strb	r1, [r3, #0]

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
1000d4ac:	8be3      	ldrh	r3, [r4, #30]
1000d4ae:	3b01      	subs	r3, #1
1000d4b0:	b29b      	uxth	r3, r3
1000d4b2:	83e3      	strh	r3, [r4, #30]
	struct uart_module *module = _uart_instances[1];
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
		_uart_write(module);
		if (module->remaining_tx_buffer_length == 0) {
1000d4b4:	8be3      	ldrh	r3, [r4, #30]
1000d4b6:	b29b      	uxth	r3, r3
1000d4b8:	2b00      	cmp	r3, #0
1000d4ba:	d109      	bne.n	1000d4d0 <uart_tx1_isr_handler+0x40>
			module->hw->TX_INTERRUPT_MASK.reg &=
1000d4bc:	6822      	ldr	r2, [r4, #0]
1000d4be:	7a13      	ldrb	r3, [r2, #8]
1000d4c0:	2101      	movs	r1, #1
1000d4c2:	438b      	bics	r3, r1
1000d4c4:	7213      	strb	r3, [r2, #8]
					~UART_TX_INTERRUPT_MASK_TX_FIFO_NOT_FULL_MASK;
			module->hw->TX_INTERRUPT_MASK.reg |=
1000d4c6:	6822      	ldr	r2, [r4, #0]
1000d4c8:	7a11      	ldrb	r1, [r2, #8]
1000d4ca:	2310      	movs	r3, #16
1000d4cc:	430b      	orrs	r3, r1
1000d4ce:	7213      	strb	r3, [r2, #8]
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
1000d4d0:	06eb      	lsls	r3, r5, #27
1000d4d2:	d512      	bpl.n	1000d4fa <uart_tx1_isr_handler+0x6a>
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
1000d4d4:	2321      	movs	r3, #33	; 0x21
1000d4d6:	5ce3      	ldrb	r3, [r4, r3]
1000d4d8:	07db      	lsls	r3, r3, #31
1000d4da:	d50e      	bpl.n	1000d4fa <uart_tx1_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
1000d4dc:	2320      	movs	r3, #32
			module->hw->TX_INTERRUPT_MASK.reg |=
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
1000d4de:	5ce3      	ldrb	r3, [r4, r3]
1000d4e0:	07db      	lsls	r3, r3, #31
1000d4e2:	d50a      	bpl.n	1000d4fa <uart_tx1_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
			module->status = STATUS_OK;
1000d4e4:	2200      	movs	r2, #0
1000d4e6:	2322      	movs	r3, #34	; 0x22
1000d4e8:	54e2      	strb	r2, [r4, r3]
			/* Disable interrupt */
			module->hw->TX_INTERRUPT_MASK.reg &=
1000d4ea:	6822      	ldr	r2, [r4, #0]
1000d4ec:	7a13      	ldrb	r3, [r2, #8]
1000d4ee:	2110      	movs	r1, #16
1000d4f0:	438b      	bics	r3, r1
1000d4f2:	7213      	strb	r3, [r2, #8]
				~UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
			(module->callback[UART_TX_COMPLETE])(module);
1000d4f4:	0020      	movs	r0, r4
1000d4f6:	6863      	ldr	r3, [r4, #4]
1000d4f8:	4798      	blx	r3
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
1000d4fa:	06ab      	lsls	r3, r5, #26
1000d4fc:	d50a      	bpl.n	1000d514 <uart_tx1_isr_handler+0x84>
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
1000d4fe:	2321      	movs	r3, #33	; 0x21
1000d500:	5ce3      	ldrb	r3, [r4, r3]
1000d502:	079b      	lsls	r3, r3, #30
1000d504:	d506      	bpl.n	1000d514 <uart_tx1_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
1000d506:	2320      	movs	r3, #32
			(module->callback[UART_TX_COMPLETE])(module);
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
1000d508:	5ce3      	ldrb	r3, [r4, r3]
1000d50a:	079b      	lsls	r3, r3, #30
1000d50c:	d502      	bpl.n	1000d514 <uart_tx1_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
			(module->callback[UART_CTS_ACTIVE])(module);
1000d50e:	68a3      	ldr	r3, [r4, #8]
1000d510:	0020      	movs	r0, r4
1000d512:	4798      	blx	r3
		}

	}
}
1000d514:	bd70      	pop	{r4, r5, r6, pc}
1000d516:	46c0      	nop			; (mov r8, r8)
1000d518:	1001a434 	.word	0x1001a434

1000d51c <uart_get_config_defaults>:
 * \param[out] config  Pointer to configuration structure to be initiated
 */
void uart_get_config_defaults(
		struct uart_config *const config)
{
	config->baud_rate = 115200;
1000d51c:	23e1      	movs	r3, #225	; 0xe1
1000d51e:	025b      	lsls	r3, r3, #9
1000d520:	6003      	str	r3, [r0, #0]
	config->data_bits = UART_8_BITS;
1000d522:	2300      	movs	r3, #0
1000d524:	7103      	strb	r3, [r0, #4]
	config->stop_bits = UART_1_STOP_BIT;
1000d526:	7143      	strb	r3, [r0, #5]
	config->parity = UART_NO_PARITY;
1000d528:	7183      	strb	r3, [r0, #6]
	config->flow_control = false;
1000d52a:	71c3      	strb	r3, [r0, #7]

	config->pin_number_pad[0] = PIN_LP_GPIO_2;
1000d52c:	3302      	adds	r3, #2
1000d52e:	6083      	str	r3, [r0, #8]
	config->pin_number_pad[1] = PIN_LP_GPIO_3;
1000d530:	2203      	movs	r2, #3
1000d532:	60c2      	str	r2, [r0, #12]
	config->pin_number_pad[2] = PIN_LP_GPIO_4;
1000d534:	3201      	adds	r2, #1
1000d536:	6102      	str	r2, [r0, #16]
	config->pin_number_pad[3] = PIN_LP_GPIO_5;
1000d538:	3201      	adds	r2, #1
1000d53a:	6142      	str	r2, [r0, #20]

	config->pinmux_sel_pad[0] = MUX_LP_GPIO_2_UART0_RXD;
1000d53c:	6183      	str	r3, [r0, #24]
	config->pinmux_sel_pad[1] = MUX_LP_GPIO_3_UART0_TXD;
1000d53e:	61c3      	str	r3, [r0, #28]
	config->pinmux_sel_pad[2] = MUX_LP_GPIO_4_UART0_CTS;
1000d540:	6203      	str	r3, [r0, #32]
	config->pinmux_sel_pad[3] = MUX_LP_GPIO_5_UART0_RTS;
1000d542:	6243      	str	r3, [r0, #36]	; 0x24
}
1000d544:	4770      	bx	lr
1000d546:	46c0      	nop			; (mov r8, r8)

1000d548 <uart_init>:
 *
 * \retval STATUS_OK                       The initialization was successful
 */
enum status_code uart_init(struct uart_module *const module, Uart * const hw,
		const struct uart_config *const config)
{
1000d548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000d54a:	464f      	mov	r7, r9
1000d54c:	4646      	mov	r6, r8
1000d54e:	b4c0      	push	{r6, r7}
1000d550:	0005      	movs	r5, r0
1000d552:	0017      	movs	r7, r2

	uint8_t config_temp = 0;
	uint8_t i,index;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
1000d554:	6001      	str	r1, [r0, #0]

	for (i = 0; i < UART_CALLBACK_N; i++) {
		module->callback[i] = NULL;
1000d556:	2300      	movs	r3, #0
1000d558:	6043      	str	r3, [r0, #4]
1000d55a:	6083      	str	r3, [r0, #8]
1000d55c:	60c3      	str	r3, [r0, #12]
1000d55e:	6103      	str	r3, [r0, #16]
	}
	module->rx_buffer_ptr = NULL;
1000d560:	6143      	str	r3, [r0, #20]
	module->tx_buffer_ptr = NULL;
1000d562:	6183      	str	r3, [r0, #24]
	module->remaining_rx_buffer_length = 0;
1000d564:	2200      	movs	r2, #0
1000d566:	8383      	strh	r3, [r0, #28]
	module->remaining_tx_buffer_length = 0;
1000d568:	83c3      	strh	r3, [r0, #30]
	module->callback_reg_mask = 0;
1000d56a:	3320      	adds	r3, #32
1000d56c:	54c2      	strb	r2, [r0, r3]
	module->callback_enable_mask = 0;
1000d56e:	3301      	adds	r3, #1
1000d570:	54c2      	strb	r2, [r0, r3]
	module->status = STATUS_OK;
1000d572:	3301      	adds	r3, #1
1000d574:	54c2      	strb	r2, [r0, r3]

	if (hw == UART0) {
1000d576:	4b55      	ldr	r3, [pc, #340]	; (1000d6cc <uart_init+0x184>)
1000d578:	4299      	cmp	r1, r3
1000d57a:	d118      	bne.n	1000d5ae <uart_init+0x66>
		system_peripheral_reset(PERIPHERAL_UART0_CORE);
1000d57c:	2009      	movs	r0, #9
1000d57e:	4c54      	ldr	r4, [pc, #336]	; (1000d6d0 <uart_init+0x188>)
1000d580:	47a0      	blx	r4
		system_peripheral_reset(PERIPHERAL_UART0_IF);
1000d582:	200a      	movs	r0, #10
1000d584:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART0_CORE);
1000d586:	2009      	movs	r0, #9
1000d588:	4c52      	ldr	r4, [pc, #328]	; (1000d6d4 <uart_init+0x18c>)
1000d58a:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART0_IF);
1000d58c:	200a      	movs	r0, #10
1000d58e:	47a0      	blx	r4
		_uart_instances[0] = module;
1000d590:	4b51      	ldr	r3, [pc, #324]	; (1000d6d8 <uart_init+0x190>)
1000d592:	601d      	str	r5, [r3, #0]
		system_register_isr(RAM_ISR_TABLE_UARTRX0_INDEX, (uint32_t)uart_rx0_isr_handler);
1000d594:	4951      	ldr	r1, [pc, #324]	; (1000d6dc <uart_init+0x194>)
1000d596:	2010      	movs	r0, #16
1000d598:	4c51      	ldr	r4, [pc, #324]	; (1000d6e0 <uart_init+0x198>)
1000d59a:	47a0      	blx	r4
		system_register_isr(RAM_ISR_TABLE_UARTTX0_INDEX, (uint32_t)uart_tx0_isr_handler);
1000d59c:	4951      	ldr	r1, [pc, #324]	; (1000d6e4 <uart_init+0x19c>)
1000d59e:	2011      	movs	r0, #17
1000d5a0:	47a0      	blx	r4
1000d5a2:	4b51      	ldr	r3, [pc, #324]	; (1000d6e8 <uart_init+0x1a0>)
1000d5a4:	2201      	movs	r2, #1
1000d5a6:	601a      	str	r2, [r3, #0]
1000d5a8:	3201      	adds	r2, #1
1000d5aa:	601a      	str	r2, [r3, #0]
1000d5ac:	e01a      	b.n	1000d5e4 <uart_init+0x9c>
		NVIC_EnableIRQ(UART0_RX_IRQn);
		NVIC_EnableIRQ(UART0_TX_IRQn);
	} else if (hw == UART1) {
1000d5ae:	4b4f      	ldr	r3, [pc, #316]	; (1000d6ec <uart_init+0x1a4>)
1000d5b0:	4299      	cmp	r1, r3
1000d5b2:	d117      	bne.n	1000d5e4 <uart_init+0x9c>
		system_peripheral_reset(PERIPHERAL_UART1_CORE);
1000d5b4:	200b      	movs	r0, #11
1000d5b6:	4c46      	ldr	r4, [pc, #280]	; (1000d6d0 <uart_init+0x188>)
1000d5b8:	47a0      	blx	r4
		system_peripheral_reset(PERIPHERAL_UART1_IF);
1000d5ba:	200c      	movs	r0, #12
1000d5bc:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART1_CORE);
1000d5be:	200b      	movs	r0, #11
1000d5c0:	4c44      	ldr	r4, [pc, #272]	; (1000d6d4 <uart_init+0x18c>)
1000d5c2:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART1_IF);
1000d5c4:	200c      	movs	r0, #12
1000d5c6:	47a0      	blx	r4
		_uart_instances[1] = module;
1000d5c8:	4b43      	ldr	r3, [pc, #268]	; (1000d6d8 <uart_init+0x190>)
1000d5ca:	605d      	str	r5, [r3, #4]
		system_register_isr(RAM_ISR_TABLE_UARTRX1_INDEX, (uint32_t)uart_rx1_isr_handler);
1000d5cc:	4948      	ldr	r1, [pc, #288]	; (1000d6f0 <uart_init+0x1a8>)
1000d5ce:	2012      	movs	r0, #18
1000d5d0:	4c43      	ldr	r4, [pc, #268]	; (1000d6e0 <uart_init+0x198>)
1000d5d2:	47a0      	blx	r4
		system_register_isr(RAM_ISR_TABLE_UARTTX1_INDEX, (uint32_t)uart_tx1_isr_handler);
1000d5d4:	4947      	ldr	r1, [pc, #284]	; (1000d6f4 <uart_init+0x1ac>)
1000d5d6:	2013      	movs	r0, #19
1000d5d8:	47a0      	blx	r4
1000d5da:	4b43      	ldr	r3, [pc, #268]	; (1000d6e8 <uart_init+0x1a0>)
1000d5dc:	2204      	movs	r2, #4
1000d5de:	601a      	str	r2, [r3, #0]
1000d5e0:	3204      	adds	r2, #4
1000d5e2:	601a      	str	r2, [r3, #0]
		NVIC_EnableIRQ(UART1_RX_IRQn);
		NVIC_EnableIRQ(UART1_TX_IRQn);
	}

	/* Set the pinmux for this UART module. */
	if(config->flow_control) {
1000d5e4:	79fb      	ldrb	r3, [r7, #7]
		index = 4;
1000d5e6:	2204      	movs	r2, #4
1000d5e8:	4690      	mov	r8, r2
		NVIC_EnableIRQ(UART1_RX_IRQn);
		NVIC_EnableIRQ(UART1_TX_IRQn);
	}

	/* Set the pinmux for this UART module. */
	if(config->flow_control) {
1000d5ea:	2b00      	cmp	r3, #0
1000d5ec:	d152      	bne.n	1000d694 <uart_init+0x14c>
		index = 4;
	} else {
		index = 2;
1000d5ee:	3302      	adds	r3, #2
1000d5f0:	4698      	mov	r8, r3
1000d5f2:	e04f      	b.n	1000d694 <uart_init+0x14c>
#if (BTLC1000)
    index = 2;  /* BTLC1000 has no flow control function. */
#endif

	for(i = 0; i < index; i++) {
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
1000d5f4:	8a31      	ldrh	r1, [r6, #16]
1000d5f6:	ce01      	ldmia	r6!, {r0}
1000d5f8:	b2c0      	uxtb	r0, r0
1000d5fa:	47c8      	blx	r9

#if (BTLC1000)
    index = 2;  /* BTLC1000 has no flow control function. */
#endif

	for(i = 0; i < index; i++) {
1000d5fc:	3401      	adds	r4, #1
1000d5fe:	b2e4      	uxtb	r4, r4
1000d600:	4544      	cmp	r4, r8
1000d602:	d3f7      	bcc.n	1000d5f4 <uart_init+0xac>
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
								(uint16_t)(config->pinmux_sel_pad[i]));
	}

	/* empty UART FIFO */
	while (module->hw->RECEIVE_STATUS.reg & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1000d604:	682b      	ldr	r3, [r5, #0]
1000d606:	7d1a      	ldrb	r2, [r3, #20]
1000d608:	07d2      	lsls	r2, r2, #31
1000d60a:	d504      	bpl.n	1000d616 <uart_init+0xce>
1000d60c:	2101      	movs	r1, #1
		i = module->hw->RECEIVE_DATA.reg;
1000d60e:	7c1a      	ldrb	r2, [r3, #16]
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
								(uint16_t)(config->pinmux_sel_pad[i]));
	}

	/* empty UART FIFO */
	while (module->hw->RECEIVE_STATUS.reg & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1000d610:	7d1a      	ldrb	r2, [r3, #20]
1000d612:	420a      	tst	r2, r1
1000d614:	d1fb      	bne.n	1000d60e <uart_init+0xc6>
		i = module->hw->RECEIVE_DATA.reg;
	}
	
	/* reset configuration register */
	module->hw->UART_CONFIGURATION.reg = 0;
1000d616:	2100      	movs	r1, #0
1000d618:	2220      	movs	r2, #32
1000d61a:	5499      	strb	r1, [r3, r2]

	/* program the uart configuration. */
	if(config->flow_control) {
1000d61c:	79fb      	ldrb	r3, [r7, #7]
		config_temp |= UART_CONFIGURATION_CTS_ENABLE_1;
1000d61e:	1e59      	subs	r1, r3, #1
1000d620:	418b      	sbcs	r3, r1
1000d622:	0159      	lsls	r1, r3, #5
	}
	config_temp |= config->data_bits;
	config_temp |= config->stop_bits;
1000d624:	793b      	ldrb	r3, [r7, #4]
1000d626:	797a      	ldrb	r2, [r7, #5]
1000d628:	4313      	orrs	r3, r2
1000d62a:	430b      	orrs	r3, r1
	switch(config->parity) {
1000d62c:	79ba      	ldrb	r2, [r7, #6]
1000d62e:	2a02      	cmp	r2, #2
1000d630:	d00d      	beq.n	1000d64e <uart_init+0x106>
1000d632:	b2d1      	uxtb	r1, r2
1000d634:	2902      	cmp	r1, #2
1000d636:	d802      	bhi.n	1000d63e <uart_init+0xf6>
1000d638:	2a01      	cmp	r2, #1
1000d63a:	d005      	beq.n	1000d648 <uart_init+0x100>
1000d63c:	e00f      	b.n	1000d65e <uart_init+0x116>
1000d63e:	2a03      	cmp	r2, #3
1000d640:	d008      	beq.n	1000d654 <uart_init+0x10c>
1000d642:	2a04      	cmp	r2, #4
1000d644:	d009      	beq.n	1000d65a <uart_init+0x112>
1000d646:	e00a      	b.n	1000d65e <uart_init+0x116>
		case UART_NO_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_0;
			break;

		case UART_EVEN_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_1;
1000d648:	2202      	movs	r2, #2
1000d64a:	4313      	orrs	r3, r2
			config_temp |= UART_CONFIGURATION_PARITY_MODE_0;
			break;
1000d64c:	e007      	b.n	1000d65e <uart_init+0x116>

		case UART_ODD_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_1;
			config_temp |= UART_CONFIGURATION_PARITY_MODE_1;
1000d64e:	2206      	movs	r2, #6
1000d650:	4313      	orrs	r3, r2
			break;
1000d652:	e004      	b.n	1000d65e <uart_init+0x116>

		case UART_SPACE_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_1;
			config_temp |= UART_CONFIGURATION_PARITY_MODE_2;
1000d654:	220a      	movs	r2, #10
1000d656:	4313      	orrs	r3, r2
			break;
1000d658:	e001      	b.n	1000d65e <uart_init+0x116>

		case UART_MARK_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_1;
			config_temp |= UART_CONFIGURATION_PARITY_MODE_3;
1000d65a:	220e      	movs	r2, #14
1000d65c:	4313      	orrs	r3, r2
			break;

		default:
			break;
	}	
	module->hw->UART_CONFIGURATION.reg = config_temp;
1000d65e:	2220      	movs	r2, #32
1000d660:	6829      	ldr	r1, [r5, #0]
1000d662:	548b      	strb	r3, [r1, r2]

	/* Calculate the baud rate. */
	uart_set_baudrate(module, config->baud_rate);
1000d664:	683e      	ldr	r6, [r7, #0]
	uint16_t integerpart = 0;
	uint8_t fractionalpart = 0;
	uint32_t diff;
	uint8_t i = 0;

	clock = system_clock_get_value();
1000d666:	4b24      	ldr	r3, [pc, #144]	; (1000d6f8 <uart_init+0x1b0>)
1000d668:	4798      	blx	r3
1000d66a:	0004      	movs	r4, r0
	integerpart = clock / baud_rate;
1000d66c:	0031      	movs	r1, r6
1000d66e:	4b23      	ldr	r3, [pc, #140]	; (1000d6fc <uart_init+0x1b4>)
1000d670:	4798      	blx	r3
1000d672:	b282      	uxth	r2, r0
	diff = clock - (baud_rate * integerpart);
1000d674:	0400      	lsls	r0, r0, #16
1000d676:	0c00      	lsrs	r0, r0, #16
1000d678:	4370      	muls	r0, r6
1000d67a:	1a20      	subs	r0, r4, r0
	i = 0;
	while(diff > (baud_rate / 16)) {
1000d67c:	0931      	lsrs	r1, r6, #4
1000d67e:	4288      	cmp	r0, r1
1000d680:	d906      	bls.n	1000d690 <uart_init+0x148>
1000d682:	2300      	movs	r3, #0
		i++;
1000d684:	3301      	adds	r3, #1
1000d686:	b2db      	uxtb	r3, r3
		diff -= (baud_rate / 16);
1000d688:	1a40      	subs	r0, r0, r1

	clock = system_clock_get_value();
	integerpart = clock / baud_rate;
	diff = clock - (baud_rate * integerpart);
	i = 0;
	while(diff > (baud_rate / 16)) {
1000d68a:	4288      	cmp	r0, r1
1000d68c:	d8fa      	bhi.n	1000d684 <uart_init+0x13c>
1000d68e:	e007      	b.n	1000d6a0 <uart_init+0x158>
	uint8_t i = 0;

	clock = system_clock_get_value();
	integerpart = clock / baud_rate;
	diff = clock - (baud_rate * integerpart);
	i = 0;
1000d690:	2300      	movs	r3, #0
1000d692:	e005      	b.n	1000d6a0 <uart_init+0x158>
1000d694:	003e      	movs	r6, r7
1000d696:	3608      	adds	r6, #8
 *
 * \retval STATUS_OK                       The initialization was successful
 */
enum status_code uart_init(struct uart_module *const module, Uart * const hw,
		const struct uart_config *const config)
{
1000d698:	2400      	movs	r4, #0
#if (BTLC1000)
    index = 2;  /* BTLC1000 has no flow control function. */
#endif

	for(i = 0; i < index; i++) {
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
1000d69a:	4b19      	ldr	r3, [pc, #100]	; (1000d700 <uart_init+0x1b8>)
1000d69c:	4699      	mov	r9, r3
1000d69e:	e7a9      	b.n	1000d5f4 <uart_init+0xac>
		i++;
		diff -= (baud_rate / 16);
	}
	fractionalpart = (i + 1) / 2;

	module->hw->UART_CLOCK_SOURCE.reg = UART_CLOCK_SOURCE_CLOCK_SELECT_0;
1000d6a0:	2100      	movs	r1, #0
1000d6a2:	2028      	movs	r0, #40	; 0x28
1000d6a4:	682c      	ldr	r4, [r5, #0]
1000d6a6:	5421      	strb	r1, [r4, r0]
	module->hw->UART_BAUD_RATE.reg =
1000d6a8:	3301      	adds	r3, #1
1000d6aa:	071b      	lsls	r3, r3, #28
1000d6ac:	0f5b      	lsrs	r3, r3, #29
1000d6ae:	00d2      	lsls	r2, r2, #3
1000d6b0:	4313      	orrs	r3, r2
1000d6b2:	b29b      	uxth	r3, r3
1000d6b4:	682a      	ldr	r2, [r5, #0]
1000d6b6:	8493      	strh	r3, [r2, #36]	; 0x24
	module->hw->UART_CONFIGURATION.reg = config_temp;

	/* Calculate the baud rate. */
	uart_set_baudrate(module, config->baud_rate);

	module->hw->RX_INTERRUPT_MASK.reg = 0;	// disable int at initialization, enable it at read time
1000d6b8:	682b      	ldr	r3, [r5, #0]
1000d6ba:	7619      	strb	r1, [r3, #24]
	module->hw->TX_INTERRUPT_MASK.reg = 0;	// disable int at initialization, enable it at write time
1000d6bc:	682b      	ldr	r3, [r5, #0]
1000d6be:	7219      	strb	r1, [r3, #8]
	
	return STATUS_OK;
}
1000d6c0:	2000      	movs	r0, #0
1000d6c2:	bc0c      	pop	{r2, r3}
1000d6c4:	4690      	mov	r8, r2
1000d6c6:	4699      	mov	r9, r3
1000d6c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000d6ca:	46c0      	nop			; (mov r8, r8)
1000d6cc:	40004000 	.word	0x40004000
1000d6d0:	1000ce7d 	.word	0x1000ce7d
1000d6d4:	1000c7b5 	.word	0x1000c7b5
1000d6d8:	1001a434 	.word	0x1001a434
1000d6dc:	1000d2f5 	.word	0x1000d2f5
1000d6e0:	1000d2e5 	.word	0x1000d2e5
1000d6e4:	1000d37d 	.word	0x1000d37d
1000d6e8:	e000e100 	.word	0xe000e100
1000d6ec:	40005000 	.word	0x40005000
1000d6f0:	1000d409 	.word	0x1000d409
1000d6f4:	1000d491 	.word	0x1000d491
1000d6f8:	1000c7a9 	.word	0x1000c7a9
1000d6fc:	10013129 	.word	0x10013129
1000d700:	1000c405 	.word	0x1000c405

1000d704 <uart_write_wait>:
* \retval STATUS_OK         If the operation was completed
*/
enum status_code uart_write_wait(struct uart_module *const module,
		const uint8_t tx_data)
{
	while (!(module->hw->TRANSMIT_STATUS.reg & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL));
1000d704:	6802      	ldr	r2, [r0, #0]
1000d706:	2001      	movs	r0, #1
1000d708:	7913      	ldrb	r3, [r2, #4]
1000d70a:	4203      	tst	r3, r0
1000d70c:	d0fc      	beq.n	1000d708 <uart_write_wait+0x4>

	module->hw->TRANSMIT_DATA.reg = tx_data;
1000d70e:	7011      	strb	r1, [r2, #0]
	
	return STATUS_OK;
}
1000d710:	2000      	movs	r0, #0
1000d712:	4770      	bx	lr

1000d714 <uart_read_wait>:
* \retval STATUS_OK                If the operation was completed
*/
enum status_code uart_read_wait(struct uart_module *const module,
		uint8_t *const rx_data)
{
	while (!(module->hw->RECEIVE_STATUS.reg & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY));
1000d714:	6802      	ldr	r2, [r0, #0]
1000d716:	2001      	movs	r0, #1
1000d718:	7d13      	ldrb	r3, [r2, #20]
1000d71a:	4203      	tst	r3, r0
1000d71c:	d0fc      	beq.n	1000d718 <uart_read_wait+0x4>

	*rx_data = module->hw->RECEIVE_DATA.reg;
1000d71e:	7c13      	ldrb	r3, [r2, #16]
1000d720:	700b      	strb	r3, [r1, #0]
	
	return STATUS_OK;
}
1000d722:	2000      	movs	r0, #0
1000d724:	4770      	bx	lr
1000d726:	46c0      	nop			; (mov r8, r8)

1000d728 <uart_read_buffer_job>:
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
1000d728:	2317      	movs	r3, #23
{
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
1000d72a:	2a00      	cmp	r2, #0
1000d72c:	d00d      	beq.n	1000d74a <uart_read_buffer_job+0x22>
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check if the UART is busy transmitting or slave waiting for TXC*/
	if (module->status == STATUS_BUSY) {
1000d72e:	330b      	adds	r3, #11
1000d730:	5cc3      	ldrb	r3, [r0, r3]
1000d732:	b2db      	uxtb	r3, r3
1000d734:	2b05      	cmp	r3, #5
1000d736:	d008      	beq.n	1000d74a <uart_read_buffer_job+0x22>
	Assert(module);
	Assert(rx_data);

	/* Set length for the buffer and the pointer, and let
	 * the interrupt handler do the rest */
	module->remaining_rx_buffer_length = length;
1000d738:	8382      	strh	r2, [r0, #28]
	module->rx_buffer_ptr = rx_data;
1000d73a:	6141      	str	r1, [r0, #20]
	module->status = STATUS_BUSY;
1000d73c:	2205      	movs	r2, #5
1000d73e:	2322      	movs	r3, #34	; 0x22
1000d740:	54c2      	strb	r2, [r0, r3]

	module->hw->RX_INTERRUPT_MASK.reg = UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK;
1000d742:	6803      	ldr	r3, [r0, #0]
1000d744:	3a04      	subs	r2, #4
1000d746:	761a      	strb	r2, [r3, #24]
		return STATUS_BUSY;
	}

	/* Issue internal read */
	_uart_read_buffer(module, rx_data, length);
	return STATUS_OK;
1000d748:	2300      	movs	r3, #0
}
1000d74a:	0018      	movs	r0, r3
1000d74c:	4770      	bx	lr
1000d74e:	46c0      	nop			; (mov r8, r8)

1000d750 <uart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
1000d750:	0093      	lsls	r3, r2, #2
1000d752:	18c3      	adds	r3, r0, r3
1000d754:	6059      	str	r1, [r3, #4]
	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
1000d756:	2120      	movs	r1, #32
1000d758:	2301      	movs	r3, #1
1000d75a:	4093      	lsls	r3, r2
1000d75c:	5c42      	ldrb	r2, [r0, r1]
1000d75e:	4313      	orrs	r3, r2
1000d760:	5443      	strb	r3, [r0, r1]
}
1000d762:	4770      	bx	lr

1000d764 <uart_enable_callback>:
 * \param[in]  module         Pointer to UART software instance struct
 * \param[in]  callback_type  Callback type given by an enum
 */
void uart_enable_callback(struct uart_module *const module,
		enum uart_callback callback_type)
{
1000d764:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
1000d766:	2221      	movs	r2, #33	; 0x21
1000d768:	2301      	movs	r3, #1
1000d76a:	408b      	lsls	r3, r1
1000d76c:	5c84      	ldrb	r4, [r0, r2]
1000d76e:	4323      	orrs	r3, r4
1000d770:	5483      	strb	r3, [r0, r2]

	if (callback_type == UART_CTS_ACTIVE) {
1000d772:	2901      	cmp	r1, #1
1000d774:	d104      	bne.n	1000d780 <uart_enable_callback+0x1c>
		module->hw->TX_INTERRUPT_MASK.reg |= UART_TX_INTERRUPT_MASK_CTS_ACTIVE_MASK;
1000d776:	6802      	ldr	r2, [r0, #0]
1000d778:	7a11      	ldrb	r1, [r2, #8]
1000d77a:	2320      	movs	r3, #32
1000d77c:	430b      	orrs	r3, r1
1000d77e:	7213      	strb	r3, [r2, #8]
	}
}
1000d780:	bd10      	pop	{r4, pc}
1000d782:	46c0      	nop			; (mov r8, r8)

1000d784 <uart_disable_callback>:
 * \param[in]  module         Pointer to UART software instance struct
 * \param[in]  callback_type  Callback type given by an enum
 */
void uart_disable_callback(struct uart_module *const module,
		enum uart_callback callback_type)
{
1000d784:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);

	/* Disable callback */
	module->callback_enable_mask &= ~(1 << callback_type);
1000d786:	2201      	movs	r2, #1
1000d788:	408a      	lsls	r2, r1
1000d78a:	2421      	movs	r4, #33	; 0x21
1000d78c:	5d03      	ldrb	r3, [r0, r4]
1000d78e:	4393      	bics	r3, r2
1000d790:	5503      	strb	r3, [r0, r4]

	if (callback_type == UART_CTS_ACTIVE) {
1000d792:	2901      	cmp	r1, #1
1000d794:	d104      	bne.n	1000d7a0 <uart_disable_callback+0x1c>
		module->hw->TX_INTERRUPT_MASK.reg &= ~UART_TX_INTERRUPT_MASK_CTS_ACTIVE_MASK;
1000d796:	6802      	ldr	r2, [r0, #0]
1000d798:	7a13      	ldrb	r3, [r2, #8]
1000d79a:	311f      	adds	r1, #31
1000d79c:	438b      	bics	r3, r1
1000d79e:	7213      	strb	r3, [r2, #8]
	}

}
1000d7a0:	bd10      	pop	{r4, pc}
1000d7a2:	46c0      	nop			; (mov r8, r8)

1000d7a4 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
1000d7a4:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d7a6:	4647      	mov	r7, r8
1000d7a8:	b480      	push	{r7}
1000d7aa:	000c      	movs	r4, r1
1000d7ac:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
1000d7ae:	2800      	cmp	r0, #0
1000d7b0:	d10d      	bne.n	1000d7ce <_read+0x2a>
		return -1;
	}

	for (; len > 0; --len) {
1000d7b2:	2a00      	cmp	r2, #0
1000d7b4:	dd0e      	ble.n	1000d7d4 <_read+0x30>
1000d7b6:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
1000d7b8:	4e08      	ldr	r6, [pc, #32]	; (1000d7dc <_read+0x38>)
1000d7ba:	4d09      	ldr	r5, [pc, #36]	; (1000d7e0 <_read+0x3c>)
1000d7bc:	6830      	ldr	r0, [r6, #0]
1000d7be:	0021      	movs	r1, r4
1000d7c0:	682b      	ldr	r3, [r5, #0]
1000d7c2:	4798      	blx	r3
		ptr++;
1000d7c4:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
1000d7c6:	42a7      	cmp	r7, r4
1000d7c8:	d1f8      	bne.n	1000d7bc <_read+0x18>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
1000d7ca:	4640      	mov	r0, r8
1000d7cc:	e003      	b.n	1000d7d6 <_read+0x32>
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
1000d7ce:	2001      	movs	r0, #1
1000d7d0:	4240      	negs	r0, r0
1000d7d2:	e000      	b.n	1000d7d6 <_read+0x32>
	}

	for (; len > 0; --len) {
1000d7d4:	2000      	movs	r0, #0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
1000d7d6:	bc04      	pop	{r2}
1000d7d8:	4690      	mov	r8, r2
1000d7da:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d7dc:	1001a444 	.word	0x1001a444
1000d7e0:	1001a43c 	.word	0x1001a43c

1000d7e4 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
1000d7e4:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d7e6:	4647      	mov	r7, r8
1000d7e8:	b480      	push	{r7}
1000d7ea:	000e      	movs	r6, r1
1000d7ec:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
1000d7ee:	3801      	subs	r0, #1
1000d7f0:	2802      	cmp	r0, #2
1000d7f2:	d811      	bhi.n	1000d818 <_write+0x34>
		return -1;
	}

	for (; len != 0; --len) {
1000d7f4:	2a00      	cmp	r2, #0
1000d7f6:	d012      	beq.n	1000d81e <_write+0x3a>
1000d7f8:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
1000d7fa:	4b0c      	ldr	r3, [pc, #48]	; (1000d82c <_write+0x48>)
1000d7fc:	4698      	mov	r8, r3
1000d7fe:	4f0c      	ldr	r7, [pc, #48]	; (1000d830 <_write+0x4c>)
1000d800:	4643      	mov	r3, r8
1000d802:	6818      	ldr	r0, [r3, #0]
1000d804:	5d31      	ldrb	r1, [r6, r4]
1000d806:	683b      	ldr	r3, [r7, #0]
1000d808:	4798      	blx	r3
1000d80a:	2800      	cmp	r0, #0
1000d80c:	db09      	blt.n	1000d822 <_write+0x3e>
			return -1;
		}
		++nChars;
1000d80e:	3401      	adds	r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
1000d810:	42a5      	cmp	r5, r4
1000d812:	d1f5      	bne.n	1000d800 <_write+0x1c>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
1000d814:	0020      	movs	r0, r4
1000d816:	e006      	b.n	1000d826 <_write+0x42>
_write (int file, char * ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
1000d818:	2001      	movs	r0, #1
1000d81a:	4240      	negs	r0, r0
1000d81c:	e003      	b.n	1000d826 <_write+0x42>
	}

	for (; len != 0; --len) {
1000d81e:	2000      	movs	r0, #0
1000d820:	e001      	b.n	1000d826 <_write+0x42>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
1000d822:	2001      	movs	r0, #1
1000d824:	4240      	negs	r0, r0
		}
		++nChars;
	}
	return nChars;
}
1000d826:	bc04      	pop	{r2}
1000d828:	4690      	mov	r8, r2
1000d82a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d82c:	1001a444 	.word	0x1001a444
1000d830:	1001a440 	.word	0x1001a440

1000d834 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
1000d834:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
1000d836:	4a06      	ldr	r2, [pc, #24]	; (1000d850 <_sbrk+0x1c>)
1000d838:	6812      	ldr	r2, [r2, #0]
1000d83a:	2a00      	cmp	r2, #0
1000d83c:	d102      	bne.n	1000d844 <_sbrk+0x10>
		heap = (unsigned char *)&_end;
1000d83e:	4905      	ldr	r1, [pc, #20]	; (1000d854 <_sbrk+0x20>)
1000d840:	4a03      	ldr	r2, [pc, #12]	; (1000d850 <_sbrk+0x1c>)
1000d842:	6011      	str	r1, [r2, #0]
	}
	prev_heap = heap;
1000d844:	4a02      	ldr	r2, [pc, #8]	; (1000d850 <_sbrk+0x1c>)
1000d846:	6810      	ldr	r0, [r2, #0]

	heap += incr;
1000d848:	18c3      	adds	r3, r0, r3
1000d84a:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
1000d84c:	4770      	bx	lr
1000d84e:	46c0      	nop			; (mov r8, r8)
1000d850:	100186e4 	.word	0x100186e4
1000d854:	1001cd50 	.word	0x1001cd50

1000d858 <_close>:
}

extern int _close(int file)
{
	return -1;
}
1000d858:	2001      	movs	r0, #1
1000d85a:	4240      	negs	r0, r0
1000d85c:	4770      	bx	lr
1000d85e:	46c0      	nop			; (mov r8, r8)

1000d860 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
1000d860:	2380      	movs	r3, #128	; 0x80
1000d862:	019b      	lsls	r3, r3, #6
1000d864:	604b      	str	r3, [r1, #4]

	return 0;
}
1000d866:	2000      	movs	r0, #0
1000d868:	4770      	bx	lr
1000d86a:	46c0      	nop			; (mov r8, r8)

1000d86c <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
1000d86c:	2001      	movs	r0, #1
1000d86e:	4770      	bx	lr

1000d870 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
1000d870:	2000      	movs	r0, #0
1000d872:	4770      	bx	lr

1000d874 <ble_undefined_event_handler>:
	}
	return status;
}

at_ble_status_t ble_undefined_event_handler(void *params)
{
1000d874:	b510      	push	{r4, lr}
	DBG_LOG_DEV("Undefined Event Received");
1000d876:	4804      	ldr	r0, [pc, #16]	; (1000d888 <ble_undefined_event_handler+0x14>)
1000d878:	4b04      	ldr	r3, [pc, #16]	; (1000d88c <ble_undefined_event_handler+0x18>)
1000d87a:	4798      	blx	r3
1000d87c:	4804      	ldr	r0, [pc, #16]	; (1000d890 <ble_undefined_event_handler+0x1c>)
1000d87e:	4b05      	ldr	r3, [pc, #20]	; (1000d894 <ble_undefined_event_handler+0x20>)
1000d880:	4798      	blx	r3
    ALL_UNUSED(params);
	return AT_BLE_SUCCESS;
}
1000d882:	2000      	movs	r0, #0
1000d884:	bd10      	pop	{r4, pc}
1000d886:	46c0      	nop			; (mov r8, r8)
1000d888:	1001663c 	.word	0x1001663c
1000d88c:	10015495 	.word	0x10015495
1000d890:	1001780c 	.word	0x1001780c
1000d894:	10015375 	.word	0x10015375

1000d898 <ble_scan_report_handler>:
	}
}

/** @brief function handles scan report */
at_ble_status_t ble_scan_report_handler(void *params)
{
1000d898:	b510      	push	{r4, lr}
	at_ble_scan_report_t *scan_report;
	scan_report = (at_ble_scan_report_t *)params;
	if (scan_report->status == AT_BLE_SUCCESS)
1000d89a:	7800      	ldrb	r0, [r0, #0]
1000d89c:	2800      	cmp	r0, #0
1000d89e:	d006      	beq.n	1000d8ae <ble_scan_report_handler+0x16>
		/* All scan data should be handled */
		return AT_BLE_SUCCESS;
	}
	else
	{
		DBG_LOG("Scanning  failed");
1000d8a0:	4803      	ldr	r0, [pc, #12]	; (1000d8b0 <ble_scan_report_handler+0x18>)
1000d8a2:	4b04      	ldr	r3, [pc, #16]	; (1000d8b4 <ble_scan_report_handler+0x1c>)
1000d8a4:	4798      	blx	r3
1000d8a6:	4804      	ldr	r0, [pc, #16]	; (1000d8b8 <ble_scan_report_handler+0x20>)
1000d8a8:	4b04      	ldr	r3, [pc, #16]	; (1000d8bc <ble_scan_report_handler+0x24>)
1000d8aa:	4798      	blx	r3
	}
	return AT_BLE_FAILURE;
1000d8ac:	20e2      	movs	r0, #226	; 0xe2
}
1000d8ae:	bd10      	pop	{r4, pc}
1000d8b0:	1001663c 	.word	0x1001663c
1000d8b4:	10015495 	.word	0x10015495
1000d8b8:	10017828 	.word	0x10017828
1000d8bc:	10015375 	.word	0x10015375

1000d8c0 <ble_adv_report_handler>:

/** @brief function handles advertising report */
at_ble_status_t ble_adv_report_handler(void *params)
{
1000d8c0:	b510      	push	{r4, lr}
    at_ble_adv_report_t *adv_report;
    adv_report = (at_ble_adv_report_t *)params;
    if(adv_report->status == AT_BLE_SUCCESS)
1000d8c2:	7800      	ldrb	r0, [r0, #0]
1000d8c4:	2800      	cmp	r0, #0
1000d8c6:	d006      	beq.n	1000d8d6 <ble_adv_report_handler+0x16>
    {
        return AT_BLE_SUCCESS;
    }
    else 
    {
        DBG_LOG("Advertising failed");
1000d8c8:	4803      	ldr	r0, [pc, #12]	; (1000d8d8 <ble_adv_report_handler+0x18>)
1000d8ca:	4b04      	ldr	r3, [pc, #16]	; (1000d8dc <ble_adv_report_handler+0x1c>)
1000d8cc:	4798      	blx	r3
1000d8ce:	4804      	ldr	r0, [pc, #16]	; (1000d8e0 <ble_adv_report_handler+0x20>)
1000d8d0:	4b04      	ldr	r3, [pc, #16]	; (1000d8e4 <ble_adv_report_handler+0x24>)
1000d8d2:	4798      	blx	r3
    }
    return AT_BLE_FAILURE;
1000d8d4:	20e2      	movs	r0, #226	; 0xe2
}
1000d8d6:	bd10      	pop	{r4, pc}
1000d8d8:	1001663c 	.word	0x1001663c
1000d8dc:	10015495 	.word	0x10015495
1000d8e0:	1001783c 	.word	0x1001783c
1000d8e4:	10015375 	.word	0x10015375

1000d8e8 <ble_mtu_changed_indication_handler>:
	return AT_BLE_SUCCESS;
	
}

at_ble_status_t ble_mtu_changed_indication_handler(void *params)
{
1000d8e8:	b510      	push	{r4, lr}
1000d8ea:	0004      	movs	r4, r0
	at_ble_mtu_changed_ind_t *mtu_changed_ind;
	mtu_changed_ind = (at_ble_mtu_changed_ind_t *)params;
	DBG_LOG_DEV("BLE-MTU Changed, Connection Handle: %d, New Value: %d", 
1000d8ec:	4804      	ldr	r0, [pc, #16]	; (1000d900 <ble_mtu_changed_indication_handler+0x18>)
1000d8ee:	4b05      	ldr	r3, [pc, #20]	; (1000d904 <ble_mtu_changed_indication_handler+0x1c>)
1000d8f0:	4798      	blx	r3
1000d8f2:	8862      	ldrh	r2, [r4, #2]
1000d8f4:	8821      	ldrh	r1, [r4, #0]
1000d8f6:	4804      	ldr	r0, [pc, #16]	; (1000d908 <ble_mtu_changed_indication_handler+0x20>)
1000d8f8:	4b04      	ldr	r3, [pc, #16]	; (1000d90c <ble_mtu_changed_indication_handler+0x24>)
1000d8fa:	4798      	blx	r3
										mtu_changed_ind->conhdl, 
										mtu_changed_ind->mtu_value);
	return AT_BLE_SUCCESS;
}
1000d8fc:	2000      	movs	r0, #0
1000d8fe:	bd10      	pop	{r4, pc}
1000d900:	1001663c 	.word	0x1001663c
1000d904:	10015495 	.word	0x10015495
1000d908:	10017850 	.word	0x10017850
1000d90c:	10015375 	.word	0x10015375

1000d910 <ble_mtu_changed_cmd_complete_handler>:

at_ble_status_t ble_mtu_changed_cmd_complete_handler(void *params)
{
1000d910:	b570      	push	{r4, r5, r6, lr}
1000d912:	0004      	movs	r4, r0
	at_ble_cmd_complete_event_t *cmd_complete_event;
	cmd_complete_event = (at_ble_cmd_complete_event_t *)params;
	
	if (cmd_complete_event->status == AT_BLE_SUCCESS)
1000d914:	78c5      	ldrb	r5, [r0, #3]
1000d916:	2d00      	cmp	r5, #0
1000d918:	d108      	bne.n	1000d92c <ble_mtu_changed_cmd_complete_handler+0x1c>
	{
		DBG_LOG_DEV("MTU Changed, Connection Handle:%d, Operation:%d", 
1000d91a:	480a      	ldr	r0, [pc, #40]	; (1000d944 <ble_mtu_changed_cmd_complete_handler+0x34>)
1000d91c:	4b0a      	ldr	r3, [pc, #40]	; (1000d948 <ble_mtu_changed_cmd_complete_handler+0x38>)
1000d91e:	4798      	blx	r3
1000d920:	78a2      	ldrb	r2, [r4, #2]
1000d922:	8821      	ldrh	r1, [r4, #0]
1000d924:	4809      	ldr	r0, [pc, #36]	; (1000d94c <ble_mtu_changed_cmd_complete_handler+0x3c>)
1000d926:	4b0a      	ldr	r3, [pc, #40]	; (1000d950 <ble_mtu_changed_cmd_complete_handler+0x40>)
1000d928:	4798      	blx	r3
		cmd_complete_event->conn_handle, 
		cmd_complete_event->operation);
		return AT_BLE_SUCCESS;
1000d92a:	e008      	b.n	1000d93e <ble_mtu_changed_cmd_complete_handler+0x2e>
	}
	else
	{
		DBG_LOG("MTU Change Failed, Connection Handle:%d, Operation:%d",
1000d92c:	4805      	ldr	r0, [pc, #20]	; (1000d944 <ble_mtu_changed_cmd_complete_handler+0x34>)
1000d92e:	4b06      	ldr	r3, [pc, #24]	; (1000d948 <ble_mtu_changed_cmd_complete_handler+0x38>)
1000d930:	4798      	blx	r3
1000d932:	78a2      	ldrb	r2, [r4, #2]
1000d934:	8821      	ldrh	r1, [r4, #0]
1000d936:	4807      	ldr	r0, [pc, #28]	; (1000d954 <ble_mtu_changed_cmd_complete_handler+0x44>)
1000d938:	4b05      	ldr	r3, [pc, #20]	; (1000d950 <ble_mtu_changed_cmd_complete_handler+0x40>)
1000d93a:	4798      	blx	r3
		cmd_complete_event->conn_handle,
		cmd_complete_event->operation);
	}
	return AT_BLE_FAILURE;
1000d93c:	25e2      	movs	r5, #226	; 0xe2
}
1000d93e:	0028      	movs	r0, r5
1000d940:	bd70      	pop	{r4, r5, r6, pc}
1000d942:	46c0      	nop			; (mov r8, r8)
1000d944:	1001663c 	.word	0x1001663c
1000d948:	10015495 	.word	0x10015495
1000d94c:	10017888 	.word	0x10017888
1000d950:	10015375 	.word	0x10015375
1000d954:	100178b8 	.word	0x100178b8

1000d958 <ble_characteristic_write_cmd_complete_handler>:

at_ble_status_t ble_characteristic_write_cmd_complete_handler(void *params)
{
1000d958:	b570      	push	{r4, r5, r6, lr}
1000d95a:	0004      	movs	r4, r0
	at_ble_cmd_complete_event_t *cmd_complete_event;
	cmd_complete_event = (at_ble_cmd_complete_event_t *)params;
	if (cmd_complete_event->status == AT_BLE_SUCCESS)
1000d95c:	78c5      	ldrb	r5, [r0, #3]
1000d95e:	2d00      	cmp	r5, #0
1000d960:	d108      	bne.n	1000d974 <ble_characteristic_write_cmd_complete_handler+0x1c>
	{
		DBG_LOG_DEV("Char Write Cmd Complete, Connection Handle:%d, Operation:%d",
1000d962:	480a      	ldr	r0, [pc, #40]	; (1000d98c <ble_characteristic_write_cmd_complete_handler+0x34>)
1000d964:	4b0a      	ldr	r3, [pc, #40]	; (1000d990 <ble_characteristic_write_cmd_complete_handler+0x38>)
1000d966:	4798      	blx	r3
1000d968:	78a2      	ldrb	r2, [r4, #2]
1000d96a:	8821      	ldrh	r1, [r4, #0]
1000d96c:	4809      	ldr	r0, [pc, #36]	; (1000d994 <ble_characteristic_write_cmd_complete_handler+0x3c>)
1000d96e:	4b0a      	ldr	r3, [pc, #40]	; (1000d998 <ble_characteristic_write_cmd_complete_handler+0x40>)
1000d970:	4798      	blx	r3
		cmd_complete_event->conn_handle,
		cmd_complete_event->operation);
		return AT_BLE_SUCCESS;
1000d972:	e008      	b.n	1000d986 <ble_characteristic_write_cmd_complete_handler+0x2e>
	}
	else
	{
		DBG_LOG_DEV("Char Write Cmd Failed, Connection Handle:%d, Operation:%d",
1000d974:	4805      	ldr	r0, [pc, #20]	; (1000d98c <ble_characteristic_write_cmd_complete_handler+0x34>)
1000d976:	4b06      	ldr	r3, [pc, #24]	; (1000d990 <ble_characteristic_write_cmd_complete_handler+0x38>)
1000d978:	4798      	blx	r3
1000d97a:	78a2      	ldrb	r2, [r4, #2]
1000d97c:	8821      	ldrh	r1, [r4, #0]
1000d97e:	4807      	ldr	r0, [pc, #28]	; (1000d99c <ble_characteristic_write_cmd_complete_handler+0x44>)
1000d980:	4b05      	ldr	r3, [pc, #20]	; (1000d998 <ble_characteristic_write_cmd_complete_handler+0x40>)
1000d982:	4798      	blx	r3
		cmd_complete_event->conn_handle,
		cmd_complete_event->operation);
	}
	return AT_BLE_FAILURE;
1000d984:	25e2      	movs	r5, #226	; 0xe2
}
1000d986:	0028      	movs	r0, r5
1000d988:	bd70      	pop	{r4, r5, r6, pc}
1000d98a:	46c0      	nop			; (mov r8, r8)
1000d98c:	1001663c 	.word	0x1001663c
1000d990:	10015495 	.word	0x10015495
1000d994:	100178f0 	.word	0x100178f0
1000d998:	10015375 	.word	0x10015375
1000d99c:	1001792c 	.word	0x1001792c

1000d9a0 <ble_disconnected_state_handler>:

/** @brief function handles disconnection event received from stack */
at_ble_status_t ble_disconnected_state_handler(void *params)
{
1000d9a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000d9a2:	0006      	movs	r6, r0
1000d9a4:	4c1d      	ldr	r4, [pc, #116]	; (1000da1c <ble_disconnected_state_handler+0x7c>)
1000d9a6:	239b      	movs	r3, #155	; 0x9b
1000d9a8:	009b      	lsls	r3, r3, #2
1000d9aa:	18e7      	adds	r7, r4, r3
1000d9ac:	0025      	movs	r5, r4
	uint8_t idx;
	disconnect = (at_ble_disconnected_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == disconnect->handle) && 
1000d9ae:	0023      	movs	r3, r4
1000d9b0:	3b56      	subs	r3, #86	; 0x56
1000d9b2:	881a      	ldrh	r2, [r3, #0]
1000d9b4:	8833      	ldrh	r3, [r6, #0]
1000d9b6:	429a      	cmp	r2, r3
1000d9b8:	d122      	bne.n	1000da00 <ble_disconnected_state_handler+0x60>
		((ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRED) || (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_COMPLETED)))
1000d9ba:	7823      	ldrb	r3, [r4, #0]
	uint8_t idx;
	disconnect = (at_ble_disconnected_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == disconnect->handle) && 
1000d9bc:	2b05      	cmp	r3, #5
1000d9be:	d001      	beq.n	1000d9c4 <ble_disconnected_state_handler+0x24>
		((ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRED) || (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_COMPLETED)))
1000d9c0:	2b08      	cmp	r3, #8
1000d9c2:	d102      	bne.n	1000d9ca <ble_disconnected_state_handler+0x2a>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_DISCONNECTED;
1000d9c4:	2301      	movs	r3, #1
1000d9c6:	702b      	strb	r3, [r5, #0]
1000d9c8:	e01a      	b.n	1000da00 <ble_disconnected_state_handler+0x60>
		}		
		else if(ble_dev_info[idx].conn_info.handle == disconnect->handle)
		{
			switch (ble_dev_info[idx].conn_state)
1000d9ca:	2b07      	cmp	r3, #7
1000d9cc:	d80f      	bhi.n	1000d9ee <ble_disconnected_state_handler+0x4e>
1000d9ce:	009b      	lsls	r3, r3, #2
1000d9d0:	4a13      	ldr	r2, [pc, #76]	; (1000da20 <ble_disconnected_state_handler+0x80>)
1000d9d2:	58d3      	ldr	r3, [r2, r3]
1000d9d4:	469f      	mov	pc, r3
				case BLE_DEVICE_PAIRING_FAILED:
				case BLE_DEVICE_ENCRYPTION_STATE:
				case BLE_DEVICE_ENCRYPTION_FAILED:
				{
					/* Device is not paired so remove the device information */
					ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
1000d9d6:	2300      	movs	r3, #0
1000d9d8:	7023      	strb	r3, [r4, #0]
					if (ble_device_count > 0)
1000d9da:	4b12      	ldr	r3, [pc, #72]	; (1000da24 <ble_disconnected_state_handler+0x84>)
1000d9dc:	781b      	ldrb	r3, [r3, #0]
1000d9de:	2b00      	cmp	r3, #0
1000d9e0:	d00e      	beq.n	1000da00 <ble_disconnected_state_handler+0x60>
					{
						ble_device_count--;
1000d9e2:	4a10      	ldr	r2, [pc, #64]	; (1000da24 <ble_disconnected_state_handler+0x84>)
1000d9e4:	7813      	ldrb	r3, [r2, #0]
1000d9e6:	3b01      	subs	r3, #1
1000d9e8:	b2db      	uxtb	r3, r3
1000d9ea:	7013      	strb	r3, [r2, #0]
1000d9ec:	e008      	b.n	1000da00 <ble_disconnected_state_handler+0x60>
				
				case BLE_DEVICE_DISCONNECTED:
				break;
				
				default:
				DBG_LOG_DEV("State Not Handled %d", ble_dev_info[idx].conn_state);
1000d9ee:	480e      	ldr	r0, [pc, #56]	; (1000da28 <ble_disconnected_state_handler+0x88>)
1000d9f0:	4b0e      	ldr	r3, [pc, #56]	; (1000da2c <ble_disconnected_state_handler+0x8c>)
1000d9f2:	4798      	blx	r3
1000d9f4:	7829      	ldrb	r1, [r5, #0]
1000d9f6:	480e      	ldr	r0, [pc, #56]	; (1000da30 <ble_disconnected_state_handler+0x90>)
1000d9f8:	4b0e      	ldr	r3, [pc, #56]	; (1000da34 <ble_disconnected_state_handler+0x94>)
1000d9fa:	4798      	blx	r3
				ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
1000d9fc:	2300      	movs	r3, #0
1000d9fe:	702b      	strb	r3, [r5, #0]
1000da00:	347c      	adds	r4, #124	; 0x7c
{
	at_ble_disconnected_t *disconnect;
	uint8_t idx;
	disconnect = (at_ble_disconnected_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000da02:	42bc      	cmp	r4, r7
1000da04:	d1d2      	bne.n	1000d9ac <ble_disconnected_state_handler+0xc>
				break;				
			}
		} 
	}
	
	DBG_LOG("Device disconnected Reason:0x%02x Handle=0x%x", disconnect->reason, disconnect->handle);
1000da06:	4808      	ldr	r0, [pc, #32]	; (1000da28 <ble_disconnected_state_handler+0x88>)
1000da08:	4b08      	ldr	r3, [pc, #32]	; (1000da2c <ble_disconnected_state_handler+0x8c>)
1000da0a:	4798      	blx	r3
1000da0c:	8832      	ldrh	r2, [r6, #0]
1000da0e:	78b1      	ldrb	r1, [r6, #2]
1000da10:	4809      	ldr	r0, [pc, #36]	; (1000da38 <ble_disconnected_state_handler+0x98>)
1000da12:	4b08      	ldr	r3, [pc, #32]	; (1000da34 <ble_disconnected_state_handler+0x94>)
1000da14:	4798      	blx	r3
	return AT_BLE_SUCCESS;
}
1000da16:	2000      	movs	r0, #0
1000da18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000da1a:	46c0      	nop			; (mov r8, r8)
1000da1c:	1001a4be 	.word	0x1001a4be
1000da20:	100176a8 	.word	0x100176a8
1000da24:	1001a6cc 	.word	0x1001a6cc
1000da28:	1001663c 	.word	0x1001663c
1000da2c:	10015495 	.word	0x10015495
1000da30:	10017968 	.word	0x10017968
1000da34:	10015375 	.word	0x10015375
1000da38:	10017980 	.word	0x10017980

1000da3c <ble_conn_param_update>:

/** @brief connection update parameter function */
at_ble_status_t ble_conn_param_update(void *params)
{
1000da3c:	b510      	push	{r4, lr}
	at_ble_conn_param_update_done_t * conn_param_update;
	conn_param_update = (at_ble_conn_param_update_done_t *)params;
	DBG_LOG_DEV("AT_BLE_CONN_PARAM_UPDATE ");
1000da3e:	4804      	ldr	r0, [pc, #16]	; (1000da50 <ble_conn_param_update+0x14>)
1000da40:	4b04      	ldr	r3, [pc, #16]	; (1000da54 <ble_conn_param_update+0x18>)
1000da42:	4798      	blx	r3
1000da44:	4804      	ldr	r0, [pc, #16]	; (1000da58 <ble_conn_param_update+0x1c>)
1000da46:	4b05      	ldr	r3, [pc, #20]	; (1000da5c <ble_conn_param_update+0x20>)
1000da48:	4798      	blx	r3
	ALL_UNUSED(conn_param_update);  //To avoid compiler warning
	return AT_BLE_SUCCESS;
}
1000da4a:	2000      	movs	r0, #0
1000da4c:	bd10      	pop	{r4, pc}
1000da4e:	46c0      	nop			; (mov r8, r8)
1000da50:	1001663c 	.word	0x1001663c
1000da54:	10015495 	.word	0x10015495
1000da58:	100179b0 	.word	0x100179b0
1000da5c:	10015375 	.word	0x10015375

1000da60 <ble_encryption_status_change_handler>:
	return AT_BLE_SUCCESS;
}

/** @brief function handles encryption status change */
at_ble_status_t ble_encryption_status_change_handler(void *params)
{
1000da60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000da62:	0006      	movs	r6, r0
	
	enc_status = (at_ble_encryption_status_changed_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == enc_status->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_STATE))
1000da64:	8801      	ldrh	r1, [r0, #0]
1000da66:	4b28      	ldr	r3, [pc, #160]	; (1000db08 <ble_encryption_status_change_handler+0xa8>)
	uint8_t idx;
	bool device_found = false;
	
	enc_status = (at_ble_encryption_status_changed_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000da68:	2400      	movs	r4, #0
	{
		if((ble_dev_info[idx].conn_info.handle == enc_status->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_STATE))
1000da6a:	891a      	ldrh	r2, [r3, #8]
1000da6c:	428a      	cmp	r2, r1
1000da6e:	d104      	bne.n	1000da7a <ble_encryption_status_change_handler+0x1a>
1000da70:	001a      	movs	r2, r3
1000da72:	325e      	adds	r2, #94	; 0x5e
1000da74:	7812      	ldrb	r2, [r2, #0]
1000da76:	2a06      	cmp	r2, #6
1000da78:	d02e      	beq.n	1000dad8 <ble_encryption_status_change_handler+0x78>
	uint8_t idx;
	bool device_found = false;
	
	enc_status = (at_ble_encryption_status_changed_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000da7a:	3401      	adds	r4, #1
1000da7c:	b2e4      	uxtb	r4, r4
1000da7e:	337c      	adds	r3, #124	; 0x7c
1000da80:	2c05      	cmp	r4, #5
1000da82:	d1f2      	bne.n	1000da6a <ble_encryption_status_change_handler+0xa>
1000da84:	e039      	b.n	1000dafa <ble_encryption_status_change_handler+0x9a>
			return AT_BLE_FAILURE;
		}
	}
	else
	{
		ble_dev_info[idx].bond_info.status = enc_status->status;
1000da86:	4920      	ldr	r1, [pc, #128]	; (1000db08 <ble_encryption_status_change_handler+0xa8>)
1000da88:	0163      	lsls	r3, r4, #5
1000da8a:	1b1a      	subs	r2, r3, r4
1000da8c:	0092      	lsls	r2, r2, #2
1000da8e:	188a      	adds	r2, r1, r2
1000da90:	7615      	strb	r5, [r2, #24]
		ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_FAILED;
1000da92:	0014      	movs	r4, r2
1000da94:	345e      	adds	r4, #94	; 0x5e
1000da96:	2307      	movs	r3, #7
1000da98:	7023      	strb	r3, [r4, #0]
		DBG_LOG("Encryption failed");
1000da9a:	481c      	ldr	r0, [pc, #112]	; (1000db0c <ble_encryption_status_change_handler+0xac>)
1000da9c:	4b1c      	ldr	r3, [pc, #112]	; (1000db10 <ble_encryption_status_change_handler+0xb0>)
1000da9e:	4798      	blx	r3
1000daa0:	481c      	ldr	r0, [pc, #112]	; (1000db14 <ble_encryption_status_change_handler+0xb4>)
1000daa2:	4b1d      	ldr	r3, [pc, #116]	; (1000db18 <ble_encryption_status_change_handler+0xb8>)
1000daa4:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000daa6:	25e2      	movs	r5, #226	; 0xe2
1000daa8:	e02b      	b.n	1000db02 <ble_encryption_status_change_handler+0xa2>
		}
	}
	
	if(enc_status->status == AT_BLE_SUCCESS)
	{
		DBG_LOG("Encryption completed successfully");
1000daaa:	4818      	ldr	r0, [pc, #96]	; (1000db0c <ble_encryption_status_change_handler+0xac>)
1000daac:	4b18      	ldr	r3, [pc, #96]	; (1000db10 <ble_encryption_status_change_handler+0xb0>)
1000daae:	4798      	blx	r3
1000dab0:	481a      	ldr	r0, [pc, #104]	; (1000db1c <ble_encryption_status_change_handler+0xbc>)
1000dab2:	4b19      	ldr	r3, [pc, #100]	; (1000db18 <ble_encryption_status_change_handler+0xb8>)
1000dab4:	4798      	blx	r3
		if (device_found)
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_COMPLETED;
1000dab6:	4914      	ldr	r1, [pc, #80]	; (1000db08 <ble_encryption_status_change_handler+0xa8>)
1000dab8:	0163      	lsls	r3, r4, #5
1000daba:	1b1a      	subs	r2, r3, r4
1000dabc:	0092      	lsls	r2, r2, #2
1000dabe:	188a      	adds	r2, r1, r2
1000dac0:	0010      	movs	r0, r2
1000dac2:	305e      	adds	r0, #94	; 0x5e
1000dac4:	2708      	movs	r7, #8
1000dac6:	7007      	strb	r7, [r0, #0]
			ble_dev_info[idx].bond_info.auth = enc_status->authen;
1000dac8:	78f0      	ldrb	r0, [r6, #3]
1000daca:	7510      	strb	r0, [r2, #20]
			ble_dev_info[idx].bond_info.status = enc_status->status;
1000dacc:	78b2      	ldrb	r2, [r6, #2]
1000dace:	1b1c      	subs	r4, r3, r4
1000dad0:	00a4      	lsls	r4, r4, #2
1000dad2:	190c      	adds	r4, r1, r4
1000dad4:	7622      	strb	r2, [r4, #24]
		ble_dev_info[idx].bond_info.status = enc_status->status;
		ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_FAILED;
		DBG_LOG("Encryption failed");
		return AT_BLE_FAILURE;
	}
	return AT_BLE_SUCCESS;
1000dad6:	e014      	b.n	1000db02 <ble_encryption_status_change_handler+0xa2>
			device_found = true;
			break;
		}
	}
	
	if(enc_status->status == AT_BLE_SUCCESS)
1000dad8:	78b5      	ldrb	r5, [r6, #2]
1000dada:	2d00      	cmp	r5, #0
1000dadc:	d0e5      	beq.n	1000daaa <ble_encryption_status_change_handler+0x4a>
1000dade:	e7d2      	b.n	1000da86 <ble_encryption_status_change_handler+0x26>
	{
		DBG_LOG("Encryption completed successfully");
1000dae0:	4e0a      	ldr	r6, [pc, #40]	; (1000db0c <ble_encryption_status_change_handler+0xac>)
1000dae2:	0030      	movs	r0, r6
1000dae4:	4d0a      	ldr	r5, [pc, #40]	; (1000db10 <ble_encryption_status_change_handler+0xb0>)
1000dae6:	47a8      	blx	r5
1000dae8:	480c      	ldr	r0, [pc, #48]	; (1000db1c <ble_encryption_status_change_handler+0xbc>)
1000daea:	4c0b      	ldr	r4, [pc, #44]	; (1000db18 <ble_encryption_status_change_handler+0xb8>)
1000daec:	47a0      	blx	r4
			ble_dev_info[idx].bond_info.auth = enc_status->authen;
			ble_dev_info[idx].bond_info.status = enc_status->status;
		}
		else
		{
			DBG_LOG("BLE Device not found encryption info");
1000daee:	0030      	movs	r0, r6
1000daf0:	47a8      	blx	r5
1000daf2:	480b      	ldr	r0, [pc, #44]	; (1000db20 <ble_encryption_status_change_handler+0xc0>)
1000daf4:	47a0      	blx	r4
			return AT_BLE_FAILURE;
1000daf6:	25e2      	movs	r5, #226	; 0xe2
1000daf8:	e003      	b.n	1000db02 <ble_encryption_status_change_handler+0xa2>
			device_found = true;
			break;
		}
	}
	
	if(enc_status->status == AT_BLE_SUCCESS)
1000dafa:	78b5      	ldrb	r5, [r6, #2]
1000dafc:	2d00      	cmp	r5, #0
1000dafe:	d1c2      	bne.n	1000da86 <ble_encryption_status_change_handler+0x26>
1000db00:	e7ee      	b.n	1000dae0 <ble_encryption_status_change_handler+0x80>
		ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_FAILED;
		DBG_LOG("Encryption failed");
		return AT_BLE_FAILURE;
	}
	return AT_BLE_SUCCESS;
}
1000db02:	0028      	movs	r0, r5
1000db04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000db06:	46c0      	nop			; (mov r8, r8)
1000db08:	1001a460 	.word	0x1001a460
1000db0c:	1001663c 	.word	0x1001663c
1000db10:	10015495 	.word	0x10015495
1000db14:	100179cc 	.word	0x100179cc
1000db18:	10015375 	.word	0x10015375
1000db1c:	100179e0 	.word	0x100179e0
1000db20:	10017a04 	.word	0x10017a04

1000db24 <ble_scan_info_handler>:
	return found;
}
#endif
/** @brief function handling scaned information */
at_ble_status_t ble_scan_info_handler(void *params)
{
1000db24:	b530      	push	{r4, r5, lr}
1000db26:	b085      	sub	sp, #20
1000db28:	0004      	movs	r4, r0
	at_ble_scan_info_t *scan_param;
	scan_param = (at_ble_scan_info_t *)params;
	if(scan_response_count < MAX_SCAN_DEVICE)
1000db2a:	4b1f      	ldr	r3, [pc, #124]	; (1000dba8 <ble_scan_info_handler+0x84>)
1000db2c:	781b      	ldrb	r3, [r3, #0]
1000db2e:	b2db      	uxtb	r3, r3
1000db30:	2b13      	cmp	r3, #19
1000db32:	d824      	bhi.n	1000db7e <ble_scan_info_handler+0x5a>
	{
		memcpy((uint8_t *)&scan_info[scan_response_count], scan_param, sizeof(at_ble_scan_info_t));
1000db34:	4d1c      	ldr	r5, [pc, #112]	; (1000dba8 <ble_scan_info_handler+0x84>)
1000db36:	782b      	ldrb	r3, [r5, #0]
1000db38:	b2db      	uxtb	r3, r3
1000db3a:	0098      	lsls	r0, r3, #2
1000db3c:	18c0      	adds	r0, r0, r3
1000db3e:	00c0      	lsls	r0, r0, #3
1000db40:	18c3      	adds	r3, r0, r3
1000db42:	481a      	ldr	r0, [pc, #104]	; (1000dbac <ble_scan_info_handler+0x88>)
1000db44:	1818      	adds	r0, r3, r0
1000db46:	2229      	movs	r2, #41	; 0x29
1000db48:	0021      	movs	r1, r4
1000db4a:	4b19      	ldr	r3, [pc, #100]	; (1000dbb0 <ble_scan_info_handler+0x8c>)
1000db4c:	4798      	blx	r3
		DBG_LOG_DEV("Info:Device found address [%d]  0x%02X%02X%02X%02X%02X%02X ",
1000db4e:	4819      	ldr	r0, [pc, #100]	; (1000dbb4 <ble_scan_info_handler+0x90>)
1000db50:	4b19      	ldr	r3, [pc, #100]	; (1000dbb8 <ble_scan_info_handler+0x94>)
1000db52:	4798      	blx	r3
1000db54:	7829      	ldrb	r1, [r5, #0]
1000db56:	b2c9      	uxtb	r1, r1
1000db58:	79a3      	ldrb	r3, [r4, #6]
1000db5a:	79e2      	ldrb	r2, [r4, #7]
1000db5c:	78a0      	ldrb	r0, [r4, #2]
1000db5e:	9003      	str	r0, [sp, #12]
1000db60:	78e0      	ldrb	r0, [r4, #3]
1000db62:	9002      	str	r0, [sp, #8]
1000db64:	7920      	ldrb	r0, [r4, #4]
1000db66:	9001      	str	r0, [sp, #4]
1000db68:	7960      	ldrb	r0, [r4, #5]
1000db6a:	9000      	str	r0, [sp, #0]
1000db6c:	4813      	ldr	r0, [pc, #76]	; (1000dbbc <ble_scan_info_handler+0x98>)
1000db6e:	4c14      	ldr	r4, [pc, #80]	; (1000dbc0 <ble_scan_info_handler+0x9c>)
1000db70:	47a0      	blx	r4
		scan_param->dev_addr.addr[4],
		scan_param->dev_addr.addr[3],
		scan_param->dev_addr.addr[2],
		scan_param->dev_addr.addr[1],
		scan_param->dev_addr.addr[0]);
		scan_response_count++;
1000db72:	782b      	ldrb	r3, [r5, #0]
1000db74:	3301      	adds	r3, #1
1000db76:	b2db      	uxtb	r3, r3
1000db78:	702b      	strb	r3, [r5, #0]
		return AT_BLE_SUCCESS;
1000db7a:	2300      	movs	r3, #0
1000db7c:	e011      	b.n	1000dba2 <ble_scan_info_handler+0x7e>
	}
	else
	{
		DBG_LOG("Info:maximum no.of scan device reached...Stopping Scan");
1000db7e:	480d      	ldr	r0, [pc, #52]	; (1000dbb4 <ble_scan_info_handler+0x90>)
1000db80:	4b0d      	ldr	r3, [pc, #52]	; (1000dbb8 <ble_scan_info_handler+0x94>)
1000db82:	4798      	blx	r3
1000db84:	480f      	ldr	r0, [pc, #60]	; (1000dbc4 <ble_scan_info_handler+0xa0>)
1000db86:	4b0e      	ldr	r3, [pc, #56]	; (1000dbc0 <ble_scan_info_handler+0x9c>)
1000db88:	4798      	blx	r3
		if(at_ble_scan_stop() != AT_BLE_SUCCESS)
1000db8a:	4b0f      	ldr	r3, [pc, #60]	; (1000dbc8 <ble_scan_info_handler+0xa4>)
1000db8c:	4798      	blx	r3
				}
			}
		}
	
		#endif
		return AT_BLE_FAILURE;
1000db8e:	23e2      	movs	r3, #226	; 0xe2
		return AT_BLE_SUCCESS;
	}
	else
	{
		DBG_LOG("Info:maximum no.of scan device reached...Stopping Scan");
		if(at_ble_scan_stop() != AT_BLE_SUCCESS)
1000db90:	2800      	cmp	r0, #0
1000db92:	d006      	beq.n	1000dba2 <ble_scan_info_handler+0x7e>
		{
			DBG_LOG("Failed to stop scanning");
1000db94:	4807      	ldr	r0, [pc, #28]	; (1000dbb4 <ble_scan_info_handler+0x90>)
1000db96:	4b08      	ldr	r3, [pc, #32]	; (1000dbb8 <ble_scan_info_handler+0x94>)
1000db98:	4798      	blx	r3
1000db9a:	480c      	ldr	r0, [pc, #48]	; (1000dbcc <ble_scan_info_handler+0xa8>)
1000db9c:	4b08      	ldr	r3, [pc, #32]	; (1000dbc0 <ble_scan_info_handler+0x9c>)
1000db9e:	4798      	blx	r3
				}
			}
		}
	
		#endif
		return AT_BLE_FAILURE;
1000dba0:	23e2      	movs	r3, #226	; 0xe2
	}
}
1000dba2:	0018      	movs	r0, r3
1000dba4:	b005      	add	sp, #20
1000dba6:	bd30      	pop	{r4, r5, pc}
1000dba8:	10018fcc 	.word	0x10018fcc
1000dbac:	1001a744 	.word	0x1001a744
1000dbb0:	1001521b 	.word	0x1001521b
1000dbb4:	1001663c 	.word	0x1001663c
1000dbb8:	10015495 	.word	0x10015495
1000dbbc:	10017a2c 	.word	0x10017a2c
1000dbc0:	10015375 	.word	0x10015375
1000dbc4:	10017a68 	.word	0x10017a68
1000dbc8:	10010a3d 	.word	0x10010a3d
1000dbcc:	10017aa0 	.word	0x10017aa0

1000dbd0 <ble_pair_done_handler>:
	return AT_BLE_SUCCESS;	
}

/** @brief function handles pair done event */
at_ble_status_t ble_pair_done_handler(void *params)
{
1000dbd0:	b5f0      	push	{r4, r5, r6, r7, lr}
1000dbd2:	465f      	mov	r7, fp
1000dbd4:	4656      	mov	r6, sl
1000dbd6:	464d      	mov	r5, r9
1000dbd8:	4644      	mov	r4, r8
1000dbda:	b4f0      	push	{r4, r5, r6, r7}
1000dbdc:	b083      	sub	sp, #12
1000dbde:	0005      	movs	r5, r0
	bool device_found = false;
	pairing_params = (at_ble_pair_done_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == pairing_params->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRING))
1000dbe0:	8841      	ldrh	r1, [r0, #2]
1000dbe2:	4b59      	ldr	r3, [pc, #356]	; (1000dd48 <ble_pair_done_handler+0x178>)
	at_ble_pair_done_t *pairing_params;
	uint8_t idx;
	bool device_found = false;
	pairing_params = (at_ble_pair_done_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000dbe4:	2400      	movs	r4, #0
	{
		if((ble_dev_info[idx].conn_info.handle == pairing_params->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRING))
1000dbe6:	891a      	ldrh	r2, [r3, #8]
1000dbe8:	428a      	cmp	r2, r1
1000dbea:	d105      	bne.n	1000dbf8 <ble_pair_done_handler+0x28>
1000dbec:	001a      	movs	r2, r3
1000dbee:	325e      	adds	r2, #94	; 0x5e
1000dbf0:	7812      	ldrb	r2, [r2, #0]
1000dbf2:	2a03      	cmp	r2, #3
1000dbf4:	d100      	bne.n	1000dbf8 <ble_pair_done_handler+0x28>
1000dbf6:	e09a      	b.n	1000dd2e <ble_pair_done_handler+0x15e>
	at_ble_pair_done_t *pairing_params;
	uint8_t idx;
	bool device_found = false;
	pairing_params = (at_ble_pair_done_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000dbf8:	3401      	adds	r4, #1
1000dbfa:	b2e4      	uxtb	r4, r4
1000dbfc:	337c      	adds	r3, #124	; 0x7c
1000dbfe:	2c05      	cmp	r4, #5
1000dc00:	d1f1      	bne.n	1000dbe6 <ble_pair_done_handler+0x16>
1000dc02:	e057      	b.n	1000dcb4 <ble_pair_done_handler+0xe4>
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_ltk, (uint8_t *)&pairing_params->peer_ltk, sizeof(at_ble_LTK_t));
			
			DBG_LOG_DEV("LTK: ");
			for (idx = 0; idx < 16; idx++)
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_ltk.key[idx]);
1000dc04:	7821      	ldrb	r1, [r4, #0]
1000dc06:	0030      	movs	r0, r6
1000dc08:	47b8      	blx	r7
1000dc0a:	3401      	adds	r4, #1
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_csrk, (uint8_t *)&pairing_params->peer_csrk, sizeof(at_ble_CSRK_t));
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_irk, (uint8_t *)&pairing_params->peer_irk, sizeof(at_ble_IRK_t));
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_ltk, (uint8_t *)&pairing_params->peer_ltk, sizeof(at_ble_LTK_t));
			
			DBG_LOG_DEV("LTK: ");
			for (idx = 0; idx < 16; idx++)
1000dc0c:	454c      	cmp	r4, r9
1000dc0e:	d1f9      	bne.n	1000dc04 <ble_pair_done_handler+0x34>
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_ltk.key[idx]);
				
			}
			DBG_LOG_DEV("CSRK: ");
1000dc10:	484e      	ldr	r0, [pc, #312]	; (1000dd4c <ble_pair_done_handler+0x17c>)
1000dc12:	4b4f      	ldr	r3, [pc, #316]	; (1000dd50 <ble_pair_done_handler+0x180>)
1000dc14:	4798      	blx	r3
1000dc16:	484f      	ldr	r0, [pc, #316]	; (1000dd54 <ble_pair_done_handler+0x184>)
1000dc18:	4b4f      	ldr	r3, [pc, #316]	; (1000dd58 <ble_pair_done_handler+0x188>)
1000dc1a:	4798      	blx	r3
1000dc1c:	002e      	movs	r6, r5
1000dc1e:	3622      	adds	r6, #34	; 0x22
1000dc20:	002c      	movs	r4, r5
1000dc22:	3432      	adds	r4, #50	; 0x32
			for (idx = 0; idx < 16; idx++)
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_csrk.key[idx]);
1000dc24:	4f4c      	ldr	r7, [pc, #304]	; (1000dd58 <ble_pair_done_handler+0x188>)
1000dc26:	7831      	ldrb	r1, [r6, #0]
1000dc28:	484c      	ldr	r0, [pc, #304]	; (1000dd5c <ble_pair_done_handler+0x18c>)
1000dc2a:	47b8      	blx	r7
1000dc2c:	3601      	adds	r6, #1
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_ltk.key[idx]);
				
			}
			DBG_LOG_DEV("CSRK: ");
			for (idx = 0; idx < 16; idx++)
1000dc2e:	42a6      	cmp	r6, r4
1000dc30:	d1f9      	bne.n	1000dc26 <ble_pair_done_handler+0x56>
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_csrk.key[idx]);
				
			}
			DBG_LOG_DEV("IRK:");
1000dc32:	4846      	ldr	r0, [pc, #280]	; (1000dd4c <ble_pair_done_handler+0x17c>)
1000dc34:	4b46      	ldr	r3, [pc, #280]	; (1000dd50 <ble_pair_done_handler+0x180>)
1000dc36:	4798      	blx	r3
1000dc38:	4849      	ldr	r0, [pc, #292]	; (1000dd60 <ble_pair_done_handler+0x190>)
1000dc3a:	4b47      	ldr	r3, [pc, #284]	; (1000dd58 <ble_pair_done_handler+0x188>)
1000dc3c:	4798      	blx	r3
1000dc3e:	3542      	adds	r5, #66	; 0x42
1000dc40:	002f      	movs	r7, r5
			for (idx = 0; idx < 16; idx++)
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_irk.key[idx]);
1000dc42:	4e46      	ldr	r6, [pc, #280]	; (1000dd5c <ble_pair_done_handler+0x18c>)
1000dc44:	4d44      	ldr	r5, [pc, #272]	; (1000dd58 <ble_pair_done_handler+0x188>)
1000dc46:	7821      	ldrb	r1, [r4, #0]
1000dc48:	0030      	movs	r0, r6
1000dc4a:	47a8      	blx	r5
1000dc4c:	3401      	adds	r4, #1
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_csrk.key[idx]);
				
			}
			DBG_LOG_DEV("IRK:");
			for (idx = 0; idx < 16; idx++)
1000dc4e:	42bc      	cmp	r4, r7
1000dc50:	d1f9      	bne.n	1000dc46 <ble_pair_done_handler+0x76>
1000dc52:	e071      	b.n	1000dd38 <ble_pair_done_handler+0x168>
			return AT_BLE_FAILURE;
		}		
	}
	else
	{
		if(ble_dev_info[idx].conn_state != BLE_DEVICE_DEFAULT_IDLE && ble_dev_info[idx].conn_state != BLE_DEVICE_DISCONNECTED) {
1000dc54:	0163      	lsls	r3, r4, #5
1000dc56:	1b1c      	subs	r4, r3, r4
1000dc58:	00a4      	lsls	r4, r4, #2
1000dc5a:	4b3b      	ldr	r3, [pc, #236]	; (1000dd48 <ble_pair_done_handler+0x178>)
1000dc5c:	191c      	adds	r4, r3, r4
1000dc5e:	345e      	adds	r4, #94	; 0x5e
1000dc60:	7823      	ldrb	r3, [r4, #0]
1000dc62:	2b01      	cmp	r3, #1
1000dc64:	d915      	bls.n	1000dc92 <ble_pair_done_handler+0xc2>
			DBG_LOG("Pairing failed...Disconnecting");
1000dc66:	4839      	ldr	r0, [pc, #228]	; (1000dd4c <ble_pair_done_handler+0x17c>)
1000dc68:	4b39      	ldr	r3, [pc, #228]	; (1000dd50 <ble_pair_done_handler+0x180>)
1000dc6a:	4798      	blx	r3
1000dc6c:	483d      	ldr	r0, [pc, #244]	; (1000dd64 <ble_pair_done_handler+0x194>)
1000dc6e:	4b3a      	ldr	r3, [pc, #232]	; (1000dd58 <ble_pair_done_handler+0x188>)
1000dc70:	4798      	blx	r3
			if(!(at_ble_disconnect(pairing_params->handle, AT_BLE_TERMINATED_BY_USER) == AT_BLE_SUCCESS))
1000dc72:	8868      	ldrh	r0, [r5, #2]
1000dc74:	2113      	movs	r1, #19
1000dc76:	4b3c      	ldr	r3, [pc, #240]	; (1000dd68 <ble_pair_done_handler+0x198>)
1000dc78:	4798      	blx	r3
1000dc7a:	9001      	str	r0, [sp, #4]
1000dc7c:	2800      	cmp	r0, #0
1000dc7e:	d05b      	beq.n	1000dd38 <ble_pair_done_handler+0x168>
			{
				DBG_LOG("Disconnect Request Failed");
1000dc80:	4832      	ldr	r0, [pc, #200]	; (1000dd4c <ble_pair_done_handler+0x17c>)
1000dc82:	4b33      	ldr	r3, [pc, #204]	; (1000dd50 <ble_pair_done_handler+0x180>)
1000dc84:	4798      	blx	r3
1000dc86:	4839      	ldr	r0, [pc, #228]	; (1000dd6c <ble_pair_done_handler+0x19c>)
1000dc88:	4b33      	ldr	r3, [pc, #204]	; (1000dd58 <ble_pair_done_handler+0x188>)
1000dc8a:	4798      	blx	r3
				return AT_BLE_FAILURE;
1000dc8c:	23e2      	movs	r3, #226	; 0xe2
1000dc8e:	9301      	str	r3, [sp, #4]
1000dc90:	e052      	b.n	1000dd38 <ble_pair_done_handler+0x168>
			}
		}
	}
	return AT_BLE_SUCCESS;
1000dc92:	2300      	movs	r3, #0
1000dc94:	9301      	str	r3, [sp, #4]
1000dc96:	e04f      	b.n	1000dd38 <ble_pair_done_handler+0x168>
		}
	}
	
	if(pairing_params->status == AT_BLE_SUCCESS)
	{
		DBG_LOG("Pairing procedure completed successfully");
1000dc98:	4e2c      	ldr	r6, [pc, #176]	; (1000dd4c <ble_pair_done_handler+0x17c>)
1000dc9a:	0030      	movs	r0, r6
1000dc9c:	4d2c      	ldr	r5, [pc, #176]	; (1000dd50 <ble_pair_done_handler+0x180>)
1000dc9e:	47a8      	blx	r5
1000dca0:	4833      	ldr	r0, [pc, #204]	; (1000dd70 <ble_pair_done_handler+0x1a0>)
1000dca2:	4c2d      	ldr	r4, [pc, #180]	; (1000dd58 <ble_pair_done_handler+0x188>)
1000dca4:	47a0      	blx	r4
				
			}
		}
		else
		{
			DBG_LOG("BLE Device not found to store the pairing info");
1000dca6:	0030      	movs	r0, r6
1000dca8:	47a8      	blx	r5
1000dcaa:	4832      	ldr	r0, [pc, #200]	; (1000dd74 <ble_pair_done_handler+0x1a4>)
1000dcac:	47a0      	blx	r4
			return AT_BLE_FAILURE;
1000dcae:	23e2      	movs	r3, #226	; 0xe2
1000dcb0:	9301      	str	r3, [sp, #4]
1000dcb2:	e041      	b.n	1000dd38 <ble_pair_done_handler+0x168>
			device_found = true;
			break;
		}
	}
	
	if(pairing_params->status == AT_BLE_SUCCESS)
1000dcb4:	792b      	ldrb	r3, [r5, #4]
1000dcb6:	2b00      	cmp	r3, #0
1000dcb8:	d1cc      	bne.n	1000dc54 <ble_pair_done_handler+0x84>
1000dcba:	e7ed      	b.n	1000dc98 <ble_pair_done_handler+0xc8>
	{
		DBG_LOG("Pairing procedure completed successfully");
1000dcbc:	4823      	ldr	r0, [pc, #140]	; (1000dd4c <ble_pair_done_handler+0x17c>)
1000dcbe:	4b24      	ldr	r3, [pc, #144]	; (1000dd50 <ble_pair_done_handler+0x180>)
1000dcc0:	469b      	mov	fp, r3
1000dcc2:	4798      	blx	r3
1000dcc4:	482a      	ldr	r0, [pc, #168]	; (1000dd70 <ble_pair_done_handler+0x1a0>)
1000dcc6:	4b24      	ldr	r3, [pc, #144]	; (1000dd58 <ble_pair_done_handler+0x188>)
1000dcc8:	469a      	mov	sl, r3
1000dcca:	4798      	blx	r3
		if (device_found)
		{
			ble_dev_info[idx].bond_info.auth = pairing_params->auth;
1000dccc:	782a      	ldrb	r2, [r5, #0]
1000dcce:	4b1e      	ldr	r3, [pc, #120]	; (1000dd48 <ble_pair_done_handler+0x178>)
1000dcd0:	4698      	mov	r8, r3
1000dcd2:	0167      	lsls	r7, r4, #5
1000dcd4:	1b3b      	subs	r3, r7, r4
1000dcd6:	009b      	lsls	r3, r3, #2
1000dcd8:	4443      	add	r3, r8
1000dcda:	751a      	strb	r2, [r3, #20]
			ble_dev_info[idx].bond_info.status = pairing_params->status;
1000dcdc:	792a      	ldrb	r2, [r5, #4]
1000dcde:	761a      	strb	r2, [r3, #24]
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRED;
1000dce0:	335e      	adds	r3, #94	; 0x5e
1000dce2:	2205      	movs	r2, #5
1000dce4:	701a      	strb	r2, [r3, #0]
			
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_csrk, (uint8_t *)&pairing_params->peer_csrk, sizeof(at_ble_CSRK_t));
1000dce6:	1b38      	subs	r0, r7, r4
1000dce8:	0080      	lsls	r0, r0, #2
1000dcea:	4440      	add	r0, r8
1000dcec:	3036      	adds	r0, #54	; 0x36
1000dcee:	320b      	adds	r2, #11
1000dcf0:	0029      	movs	r1, r5
1000dcf2:	3122      	adds	r1, #34	; 0x22
1000dcf4:	4b20      	ldr	r3, [pc, #128]	; (1000dd78 <ble_pair_done_handler+0x1a8>)
1000dcf6:	4699      	mov	r9, r3
1000dcf8:	4798      	blx	r3
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_irk, (uint8_t *)&pairing_params->peer_irk, sizeof(at_ble_IRK_t));
1000dcfa:	1b38      	subs	r0, r7, r4
1000dcfc:	0080      	lsls	r0, r0, #2
1000dcfe:	4440      	add	r0, r8
1000dd00:	3046      	adds	r0, #70	; 0x46
1000dd02:	2217      	movs	r2, #23
1000dd04:	0029      	movs	r1, r5
1000dd06:	3132      	adds	r1, #50	; 0x32
1000dd08:	47c8      	blx	r9
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_ltk, (uint8_t *)&pairing_params->peer_ltk, sizeof(at_ble_LTK_t));
1000dd0a:	1b38      	subs	r0, r7, r4
1000dd0c:	0080      	lsls	r0, r0, #2
1000dd0e:	4440      	add	r0, r8
1000dd10:	301a      	adds	r0, #26
1000dd12:	1dac      	adds	r4, r5, #6
1000dd14:	221c      	movs	r2, #28
1000dd16:	0021      	movs	r1, r4
1000dd18:	47c8      	blx	r9
			
			DBG_LOG_DEV("LTK: ");
1000dd1a:	480c      	ldr	r0, [pc, #48]	; (1000dd4c <ble_pair_done_handler+0x17c>)
1000dd1c:	47d8      	blx	fp
1000dd1e:	4817      	ldr	r0, [pc, #92]	; (1000dd7c <ble_pair_done_handler+0x1ac>)
1000dd20:	47d0      	blx	sl
1000dd22:	2316      	movs	r3, #22
1000dd24:	4699      	mov	r9, r3
1000dd26:	44a9      	add	r9, r5
			for (idx = 0; idx < 16; idx++)
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_ltk.key[idx]);
1000dd28:	4e0c      	ldr	r6, [pc, #48]	; (1000dd5c <ble_pair_done_handler+0x18c>)
1000dd2a:	4f0b      	ldr	r7, [pc, #44]	; (1000dd58 <ble_pair_done_handler+0x188>)
1000dd2c:	e76a      	b.n	1000dc04 <ble_pair_done_handler+0x34>
			device_found = true;
			break;
		}
	}
	
	if(pairing_params->status == AT_BLE_SUCCESS)
1000dd2e:	792b      	ldrb	r3, [r5, #4]
1000dd30:	9301      	str	r3, [sp, #4]
1000dd32:	2b00      	cmp	r3, #0
1000dd34:	d0c2      	beq.n	1000dcbc <ble_pair_done_handler+0xec>
1000dd36:	e78d      	b.n	1000dc54 <ble_pair_done_handler+0x84>
				return AT_BLE_FAILURE;
			}
		}
	}
	return AT_BLE_SUCCESS;
}
1000dd38:	9801      	ldr	r0, [sp, #4]
1000dd3a:	b003      	add	sp, #12
1000dd3c:	bc3c      	pop	{r2, r3, r4, r5}
1000dd3e:	4690      	mov	r8, r2
1000dd40:	4699      	mov	r9, r3
1000dd42:	46a2      	mov	sl, r4
1000dd44:	46ab      	mov	fp, r5
1000dd46:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000dd48:	1001a460 	.word	0x1001a460
1000dd4c:	1001663c 	.word	0x1001663c
1000dd50:	10015495 	.word	0x10015495
1000dd54:	10017ac4 	.word	0x10017ac4
1000dd58:	10015375 	.word	0x10015375
1000dd5c:	10017ab8 	.word	0x10017ab8
1000dd60:	10017acc 	.word	0x10017acc
1000dd64:	10017ad4 	.word	0x10017ad4
1000dd68:	10010a5d 	.word	0x10010a5d
1000dd6c:	10017af4 	.word	0x10017af4
1000dd70:	10017b10 	.word	0x10017b10
1000dd74:	10017b3c 	.word	0x10017b3c
1000dd78:	1001521b 	.word	0x1001521b
1000dd7c:	10017b6c 	.word	0x10017b6c

1000dd80 <ble_conn_param_update_req>:
	ALL_UNUSED(conn_param_update);  //To avoid compiler warning
	return AT_BLE_SUCCESS;
}

at_ble_status_t ble_conn_param_update_req(void *params)
{
1000dd80:	b510      	push	{r4, lr}
	at_ble_conn_param_update_request_t * conn_param_req;
	conn_param_req = (at_ble_conn_param_update_request_t *)params;
	at_ble_conn_update_reply(conn_param_req->handle, true, 1, 120);
1000dd82:	8800      	ldrh	r0, [r0, #0]
1000dd84:	2378      	movs	r3, #120	; 0x78
1000dd86:	2201      	movs	r2, #1
1000dd88:	2101      	movs	r1, #1
1000dd8a:	4c02      	ldr	r4, [pc, #8]	; (1000dd94 <ble_conn_param_update_req+0x14>)
1000dd8c:	47a0      	blx	r4
	return AT_BLE_SUCCESS;
}
1000dd8e:	2000      	movs	r0, #0
1000dd90:	bd10      	pop	{r4, pc}
1000dd92:	46c0      	nop			; (mov r8, r8)
1000dd94:	10010a7d 	.word	0x10010a7d

1000dd98 <ble_slave_security_request_handler>:

at_ble_status_t ble_slave_security_request_handler(void* params)
{
1000dd98:	b5f0      	push	{r4, r5, r6, r7, lr}
1000dd9a:	4657      	mov	r7, sl
1000dd9c:	464e      	mov	r6, r9
1000dd9e:	4645      	mov	r5, r8
1000dda0:	b4e0      	push	{r5, r6, r7}
1000dda2:	b084      	sub	sp, #16
1000dda4:	0004      	movs	r4, r0
	uint8_t i = 0, idx;
	at_ble_slave_sec_request_t* slave_sec_req;
	bool device_found = false;
	
	slave_sec_req = (at_ble_slave_sec_request_t*)params;	
	memset(&features, 0x00, sizeof(at_ble_pair_features_t));
1000dda6:	2209      	movs	r2, #9
1000dda8:	2100      	movs	r1, #0
1000ddaa:	a801      	add	r0, sp, #4
1000ddac:	4b6a      	ldr	r3, [pc, #424]	; (1000df58 <ble_slave_security_request_handler+0x1c0>)
1000ddae:	4798      	blx	r3
		//@Todo Status is not handled in the Library
	//}

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == slave_sec_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000ddb0:	8825      	ldrh	r5, [r4, #0]
1000ddb2:	496a      	ldr	r1, [pc, #424]	; (1000df5c <ble_slave_security_request_handler+0x1c4>)
1000ddb4:	000a      	movs	r2, r1
1000ddb6:	2300      	movs	r3, #0
1000ddb8:	8910      	ldrh	r0, [r2, #8]
1000ddba:	42a8      	cmp	r0, r5
1000ddbc:	d116      	bne.n	1000ddec <ble_slave_security_request_handler+0x54>
1000ddbe:	0010      	movs	r0, r2
1000ddc0:	305e      	adds	r0, #94	; 0x5e
1000ddc2:	7800      	ldrb	r0, [r0, #0]
1000ddc4:	2802      	cmp	r0, #2
1000ddc6:	d111      	bne.n	1000ddec <ble_slave_security_request_handler+0x54>
		{
			device_found = true;
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_STATE;
1000ddc8:	4864      	ldr	r0, [pc, #400]	; (1000df5c <ble_slave_security_request_handler+0x1c4>)
1000ddca:	015a      	lsls	r2, r3, #5
1000ddcc:	1ad6      	subs	r6, r2, r3
1000ddce:	00b6      	lsls	r6, r6, #2
1000ddd0:	1986      	adds	r6, r0, r6
1000ddd2:	365e      	adds	r6, #94	; 0x5e
1000ddd4:	2206      	movs	r2, #6
1000ddd6:	7032      	strb	r2, [r6, #0]
		}
	}
	
	if (device_found)
	{
		if((ble_dev_info[idx].bond_info.auth & AT_BLE_AUTH_NO_MITM_BOND) && (slave_sec_req->bond == true))
1000ddd8:	32f9      	adds	r2, #249	; 0xf9
1000ddda:	4013      	ands	r3, r2
1000dddc:	015a      	lsls	r2, r3, #5
1000ddde:	1ad2      	subs	r2, r2, r3
1000dde0:	0092      	lsls	r2, r2, #2
1000dde2:	1882      	adds	r2, r0, r2
1000dde4:	7d12      	ldrb	r2, [r2, #20]
1000dde6:	07d0      	lsls	r0, r2, #31
1000dde8:	d405      	bmi.n	1000ddf6 <ble_slave_security_request_handler+0x5e>
1000ddea:	e01b      	b.n	1000de24 <ble_slave_security_request_handler+0x8c>
1000ddec:	3301      	adds	r3, #1
1000ddee:	327c      	adds	r2, #124	; 0x7c
		//at_ble_disconnect(slave_sec_req->handle, AT_BLE_AUTH_FAILURE);		
		//return AT_BLE_FAILURE;
		//@Todo Status is not handled in the Library
	//}

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000ddf0:	2b05      	cmp	r3, #5
1000ddf2:	d1e1      	bne.n	1000ddb8 <ble_slave_security_request_handler+0x20>
1000ddf4:	e01e      	b.n	1000de34 <ble_slave_security_request_handler+0x9c>
		}
	}
	
	if (device_found)
	{
		if((ble_dev_info[idx].bond_info.auth & AT_BLE_AUTH_NO_MITM_BOND) && (slave_sec_req->bond == true))
1000ddf6:	78e0      	ldrb	r0, [r4, #3]
1000ddf8:	2800      	cmp	r0, #0
1000ddfa:	d013      	beq.n	1000de24 <ble_slave_security_request_handler+0x8c>
		{
			if(at_ble_encryption_start(slave_sec_req->handle, &ble_dev_info[idx].bond_info.peer_ltk, ble_dev_info[idx].bond_info.auth) == AT_BLE_SUCCESS)
1000ddfc:	0159      	lsls	r1, r3, #5
1000ddfe:	1ac9      	subs	r1, r1, r3
1000de00:	008b      	lsls	r3, r1, #2
1000de02:	4956      	ldr	r1, [pc, #344]	; (1000df5c <ble_slave_security_request_handler+0x1c4>)
1000de04:	18c9      	adds	r1, r1, r3
1000de06:	311a      	adds	r1, #26
1000de08:	8820      	ldrh	r0, [r4, #0]
1000de0a:	4b55      	ldr	r3, [pc, #340]	; (1000df60 <ble_slave_security_request_handler+0x1c8>)
1000de0c:	4798      	blx	r3
1000de0e:	2800      	cmp	r0, #0
1000de10:	d100      	bne.n	1000de14 <ble_slave_security_request_handler+0x7c>
1000de12:	e09b      	b.n	1000df4c <ble_slave_security_request_handler+0x1b4>
			{
				return  AT_BLE_SUCCESS;
			}
			else
			{
				DBG_LOG("Encryption Not started");
1000de14:	4853      	ldr	r0, [pc, #332]	; (1000df64 <ble_slave_security_request_handler+0x1cc>)
1000de16:	4b54      	ldr	r3, [pc, #336]	; (1000df68 <ble_slave_security_request_handler+0x1d0>)
1000de18:	4798      	blx	r3
1000de1a:	4854      	ldr	r0, [pc, #336]	; (1000df6c <ble_slave_security_request_handler+0x1d4>)
1000de1c:	4b54      	ldr	r3, [pc, #336]	; (1000df70 <ble_slave_security_request_handler+0x1d8>)
1000de1e:	4798      	blx	r3
				return AT_BLE_FAILURE;
1000de20:	20e2      	movs	r0, #226	; 0xe2
1000de22:	e093      	b.n	1000df4c <ble_slave_security_request_handler+0x1b4>
			}			
		}
		else
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000de24:	015a      	lsls	r2, r3, #5
1000de26:	1ad3      	subs	r3, r2, r3
1000de28:	009b      	lsls	r3, r3, #2
1000de2a:	4a4c      	ldr	r2, [pc, #304]	; (1000df5c <ble_slave_security_request_handler+0x1c4>)
1000de2c:	18d3      	adds	r3, r2, r3
1000de2e:	335e      	adds	r3, #94	; 0x5e
1000de30:	2202      	movs	r2, #2
1000de32:	701a      	strb	r2, [r3, #0]
		}
	}
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == slave_sec_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000de34:	8825      	ldrh	r5, [r4, #0]
1000de36:	2200      	movs	r2, #0
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
		}
	}
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000de38:	2300      	movs	r3, #0
	{
		if((ble_dev_info[idx].conn_info.handle == slave_sec_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000de3a:	0016      	movs	r6, r2
1000de3c:	8908      	ldrh	r0, [r1, #8]
1000de3e:	42a8      	cmp	r0, r5
1000de40:	d10d      	bne.n	1000de5e <ble_slave_security_request_handler+0xc6>
1000de42:	0008      	movs	r0, r1
1000de44:	305e      	adds	r0, #94	; 0x5e
1000de46:	7800      	ldrb	r0, [r0, #0]
1000de48:	2802      	cmp	r0, #2
1000de4a:	d108      	bne.n	1000de5e <ble_slave_security_request_handler+0xc6>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
1000de4c:	0152      	lsls	r2, r2, #5
1000de4e:	1b92      	subs	r2, r2, r6
1000de50:	0096      	lsls	r6, r2, #2
1000de52:	4a42      	ldr	r2, [pc, #264]	; (1000df5c <ble_slave_security_request_handler+0x1c4>)
1000de54:	1992      	adds	r2, r2, r6
1000de56:	325e      	adds	r2, #94	; 0x5e
1000de58:	2103      	movs	r1, #3
1000de5a:	7011      	strb	r1, [r2, #0]
			break;
1000de5c:	e005      	b.n	1000de6a <ble_slave_security_request_handler+0xd2>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
		}
	}
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000de5e:	3301      	adds	r3, #1
1000de60:	b2db      	uxtb	r3, r3
1000de62:	3201      	adds	r2, #1
1000de64:	317c      	adds	r1, #124	; 0x7c
1000de66:	2b05      	cmp	r3, #5
1000de68:	d1e7      	bne.n	1000de3a <ble_slave_security_request_handler+0xa2>
			break;
		}
	}
	
	features.desired_auth =  BLE_AUTHENTICATION_LEVEL; 
	features.bond = slave_sec_req->bond;
1000de6a:	aa01      	add	r2, sp, #4
1000de6c:	78e1      	ldrb	r1, [r4, #3]
1000de6e:	7091      	strb	r1, [r2, #2]
	features.mitm_protection = true;
1000de70:	2101      	movs	r1, #1
1000de72:	7051      	strb	r1, [r2, #1]
	/* Device capabilities is display only , key will be generated
	and displayed */
	features.io_cababilities = AT_BLE_IO_CAP_KB_DISPLAY;
1000de74:	3103      	adds	r1, #3
1000de76:	7011      	strb	r1, [r2, #0]

	features.oob_avaiable = false;
			
	/* Distribution of LTK is required */
	if (ble_dev_info[idx].conn_info.peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE)
1000de78:	001f      	movs	r7, r3
1000de7a:	015a      	lsls	r2, r3, #5
1000de7c:	1ad2      	subs	r2, r2, r3
1000de7e:	0092      	lsls	r2, r2, #2
1000de80:	4936      	ldr	r1, [pc, #216]	; (1000df5c <ble_slave_security_request_handler+0x1c4>)
1000de82:	5c52      	ldrb	r2, [r2, r1]
1000de84:	2a02      	cmp	r2, #2
1000de86:	d104      	bne.n	1000de92 <ble_slave_security_request_handler+0xfa>
	{
		features.initiator_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000de88:	aa01      	add	r2, sp, #4
1000de8a:	2103      	movs	r1, #3
1000de8c:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000de8e:	71d1      	strb	r1, [r2, #7]
1000de90:	e003      	b.n	1000de9a <ble_slave_security_request_handler+0x102>
	}
	else
	{
		features.initiator_keys =   AT_BLE_KEY_DIST_ENC;
1000de92:	aa01      	add	r2, sp, #4
1000de94:	2101      	movs	r1, #1
1000de96:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   AT_BLE_KEY_DIST_ENC;
1000de98:	71d1      	strb	r1, [r2, #7]
	}
	features.max_key_size = 16;
1000de9a:	aa01      	add	r2, sp, #4
1000de9c:	2110      	movs	r1, #16
1000de9e:	7151      	strb	r1, [r2, #5]
	features.min_key_size = 16;
1000dea0:	7111      	strb	r1, [r2, #4]
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
1000dea2:	017a      	lsls	r2, r7, #5
1000dea4:	1bd2      	subs	r2, r2, r7
1000dea6:	0092      	lsls	r2, r2, #2
1000dea8:	492c      	ldr	r1, [pc, #176]	; (1000df5c <ble_slave_security_request_handler+0x1c4>)
1000deaa:	188a      	adds	r2, r1, r2
1000deac:	7e12      	ldrb	r2, [r2, #24]
1000deae:	2a40      	cmp	r2, #64	; 0x40
1000deb0:	d134      	bne.n	1000df1c <ble_slave_security_request_handler+0x184>
1000deb2:	015a      	lsls	r2, r3, #5
1000deb4:	1ad3      	subs	r3, r2, r3
1000deb6:	009b      	lsls	r3, r3, #2
1000deb8:	469a      	mov	sl, r3
1000deba:	001e      	movs	r6, r3
1000debc:	3660      	adds	r6, #96	; 0x60
1000debe:	1876      	adds	r6, r6, r1
1000dec0:	4655      	mov	r5, sl
1000dec2:	3568      	adds	r5, #104	; 0x68
1000dec4:	186d      	adds	r5, r5, r1
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
		{			
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000dec6:	4b2b      	ldr	r3, [pc, #172]	; (1000df74 <ble_slave_security_request_handler+0x1dc>)
1000dec8:	4699      	mov	r9, r3
1000deca:	230f      	movs	r3, #15
1000decc:	4698      	mov	r8, r3
1000dece:	47c8      	blx	r9
1000ded0:	4643      	mov	r3, r8
1000ded2:	4018      	ands	r0, r3
1000ded4:	7030      	strb	r0, [r6, #0]
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
1000ded6:	47c8      	blx	r9
1000ded8:	4643      	mov	r3, r8
1000deda:	4018      	ands	r0, r3
1000dedc:	74b0      	strb	r0, [r6, #18]
1000dede:	3601      	adds	r6, #1
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
1000dee0:	42ae      	cmp	r6, r5
1000dee2:	d1f4      	bne.n	1000dece <ble_slave_security_request_handler+0x136>
1000dee4:	4656      	mov	r6, sl
1000dee6:	3670      	adds	r6, #112	; 0x70
1000dee8:	4a1c      	ldr	r2, [pc, #112]	; (1000df5c <ble_slave_security_request_handler+0x1c4>)
1000deea:	18b6      	adds	r6, r6, r2
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000deec:	4b21      	ldr	r3, [pc, #132]	; (1000df74 <ble_slave_security_request_handler+0x1dc>)
1000deee:	4699      	mov	r9, r3
1000def0:	230f      	movs	r3, #15
1000def2:	4698      	mov	r8, r3
1000def4:	47c8      	blx	r9
1000def6:	4643      	mov	r3, r8
1000def8:	4018      	ands	r0, r3
1000defa:	7028      	strb	r0, [r5, #0]
1000defc:	3501      	adds	r5, #1
		{			
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
1000defe:	42b5      	cmp	r5, r6
1000df00:	d1f8      	bne.n	1000def4 <ble_slave_security_request_handler+0x15c>
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
		}
		
		ble_dev_info[idx].host_ltk.ediv = rand()&0xffff;
1000df02:	4b1c      	ldr	r3, [pc, #112]	; (1000df74 <ble_slave_security_request_handler+0x1dc>)
1000df04:	4798      	blx	r3
1000df06:	017b      	lsls	r3, r7, #5
1000df08:	1bdb      	subs	r3, r3, r7
1000df0a:	009b      	lsls	r3, r3, #2
1000df0c:	4a13      	ldr	r2, [pc, #76]	; (1000df5c <ble_slave_security_request_handler+0x1c4>)
1000df0e:	18d3      	adds	r3, r2, r3
1000df10:	001a      	movs	r2, r3
1000df12:	3270      	adds	r2, #112	; 0x70
1000df14:	8010      	strh	r0, [r2, #0]
		ble_dev_info[idx].host_ltk.key_size = 16;
1000df16:	337a      	adds	r3, #122	; 0x7a
1000df18:	2210      	movs	r2, #16
1000df1a:	701a      	strb	r2, [r3, #0]
	{
		/* Bonding information already exists */
		
	}

	if(at_ble_authenticate(slave_sec_req->handle, &features, &ble_dev_info[idx].host_ltk, NULL) != AT_BLE_SUCCESS)
1000df1c:	017a      	lsls	r2, r7, #5
1000df1e:	1bd7      	subs	r7, r2, r7
1000df20:	00bf      	lsls	r7, r7, #2
1000df22:	3760      	adds	r7, #96	; 0x60
1000df24:	4a0d      	ldr	r2, [pc, #52]	; (1000df5c <ble_slave_security_request_handler+0x1c4>)
1000df26:	18ba      	adds	r2, r7, r2
1000df28:	8820      	ldrh	r0, [r4, #0]
1000df2a:	2300      	movs	r3, #0
1000df2c:	a901      	add	r1, sp, #4
1000df2e:	4c12      	ldr	r4, [pc, #72]	; (1000df78 <ble_slave_security_request_handler+0x1e0>)
1000df30:	47a0      	blx	r4
1000df32:	2800      	cmp	r0, #0
1000df34:	d00a      	beq.n	1000df4c <ble_slave_security_request_handler+0x1b4>
	{
		features.bond = false;
1000df36:	ab01      	add	r3, sp, #4
1000df38:	2200      	movs	r2, #0
1000df3a:	709a      	strb	r2, [r3, #2]
		features.mitm_protection = false;
1000df3c:	705a      	strb	r2, [r3, #1]
		DBG_LOG("Slave Security Req - Authentication Failed");
1000df3e:	4809      	ldr	r0, [pc, #36]	; (1000df64 <ble_slave_security_request_handler+0x1cc>)
1000df40:	4b09      	ldr	r3, [pc, #36]	; (1000df68 <ble_slave_security_request_handler+0x1d0>)
1000df42:	4798      	blx	r3
1000df44:	480d      	ldr	r0, [pc, #52]	; (1000df7c <ble_slave_security_request_handler+0x1e4>)
1000df46:	4b0a      	ldr	r3, [pc, #40]	; (1000df70 <ble_slave_security_request_handler+0x1d8>)
1000df48:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000df4a:	20e2      	movs	r0, #226	; 0xe2
	}
	return AT_BLE_SUCCESS;
}
1000df4c:	b004      	add	sp, #16
1000df4e:	bc1c      	pop	{r2, r3, r4}
1000df50:	4690      	mov	r8, r2
1000df52:	4699      	mov	r9, r3
1000df54:	46a2      	mov	sl, r4
1000df56:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000df58:	1001522d 	.word	0x1001522d
1000df5c:	1001a460 	.word	0x1001a460
1000df60:	10011641 	.word	0x10011641
1000df64:	1001663c 	.word	0x1001663c
1000df68:	10015495 	.word	0x10015495
1000df6c:	10017b74 	.word	0x10017b74
1000df70:	10015375 	.word	0x10015375
1000df74:	100154a9 	.word	0x100154a9
1000df78:	10011455 	.word	0x10011455
1000df7c:	10017b8c 	.word	0x10017b8c

1000df80 <ble_pair_request_handler>:

/** @brief function handles pair request */
at_ble_status_t ble_pair_request_handler(void *params)
{
1000df80:	b5f0      	push	{r4, r5, r6, r7, lr}
1000df82:	465f      	mov	r7, fp
1000df84:	4656      	mov	r6, sl
1000df86:	464d      	mov	r5, r9
1000df88:	4644      	mov	r4, r8
1000df8a:	b4f0      	push	{r4, r5, r6, r7}
1000df8c:	b085      	sub	sp, #20
1000df8e:	4680      	mov	r8, r0
	at_ble_pair_request_t* pair_req;
	pair_req = (at_ble_pair_request_t*)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == pair_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000df90:	8804      	ldrh	r4, [r0, #0]
1000df92:	4a54      	ldr	r2, [pc, #336]	; (1000e0e4 <ble_pair_request_handler+0x164>)
1000df94:	2100      	movs	r1, #0
	at_ble_pair_features_t features;
	uint8_t i = 0, idx;
	at_ble_pair_request_t* pair_req;
	pair_req = (at_ble_pair_request_t*)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000df96:	2300      	movs	r3, #0
	{
		if((ble_dev_info[idx].conn_info.handle == pair_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000df98:	8910      	ldrh	r0, [r2, #8]
1000df9a:	42a0      	cmp	r0, r4
1000df9c:	d10d      	bne.n	1000dfba <ble_pair_request_handler+0x3a>
1000df9e:	0010      	movs	r0, r2
1000dfa0:	305e      	adds	r0, #94	; 0x5e
1000dfa2:	7800      	ldrb	r0, [r0, #0]
1000dfa4:	2802      	cmp	r0, #2
1000dfa6:	d108      	bne.n	1000dfba <ble_pair_request_handler+0x3a>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
1000dfa8:	014a      	lsls	r2, r1, #5
1000dfaa:	1a52      	subs	r2, r2, r1
1000dfac:	0095      	lsls	r5, r2, #2
1000dfae:	4a4d      	ldr	r2, [pc, #308]	; (1000e0e4 <ble_pair_request_handler+0x164>)
1000dfb0:	1952      	adds	r2, r2, r5
1000dfb2:	325e      	adds	r2, #94	; 0x5e
1000dfb4:	2103      	movs	r1, #3
1000dfb6:	7011      	strb	r1, [r2, #0]
			break;
1000dfb8:	e005      	b.n	1000dfc6 <ble_pair_request_handler+0x46>
	at_ble_pair_features_t features;
	uint8_t i = 0, idx;
	at_ble_pair_request_t* pair_req;
	pair_req = (at_ble_pair_request_t*)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000dfba:	3301      	adds	r3, #1
1000dfbc:	b2db      	uxtb	r3, r3
1000dfbe:	3101      	adds	r1, #1
1000dfc0:	327c      	adds	r2, #124	; 0x7c
1000dfc2:	2b05      	cmp	r3, #5
1000dfc4:	d1e8      	bne.n	1000df98 <ble_pair_request_handler+0x18>
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
			break;
		}
	}
	
	features.desired_auth =  BLE_AUTHENTICATION_LEVEL; 
1000dfc6:	aa01      	add	r2, sp, #4
1000dfc8:	2100      	movs	r1, #0
1000dfca:	7211      	strb	r1, [r2, #8]
	features.bond = BLE_BOND_REQ;
1000dfcc:	7091      	strb	r1, [r2, #2]
	features.mitm_protection = BLE_MITM_REQ;
1000dfce:	7051      	strb	r1, [r2, #1]
	/* Device capabilities is display only , key will be generated
	and displayed */
	features.io_cababilities = BLE_IO_CAPABALITIES;
1000dfd0:	2003      	movs	r0, #3
1000dfd2:	7010      	strb	r0, [r2, #0]
	features.oob_avaiable = BLE_OOB_REQ;
1000dfd4:	70d1      	strb	r1, [r2, #3]
	
	/* Distribution of LTK is required */
	if (ble_dev_info[idx].conn_info.peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE)
1000dfd6:	001e      	movs	r6, r3
1000dfd8:	015a      	lsls	r2, r3, #5
1000dfda:	1ad2      	subs	r2, r2, r3
1000dfdc:	0092      	lsls	r2, r2, #2
1000dfde:	4941      	ldr	r1, [pc, #260]	; (1000e0e4 <ble_pair_request_handler+0x164>)
1000dfe0:	5c52      	ldrb	r2, [r2, r1]
1000dfe2:	2a02      	cmp	r2, #2
1000dfe4:	d104      	bne.n	1000dff0 <ble_pair_request_handler+0x70>
	{
		/* Distribution of IRK is required */
		features.initiator_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000dfe6:	aa01      	add	r2, sp, #4
1000dfe8:	2103      	movs	r1, #3
1000dfea:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000dfec:	71d1      	strb	r1, [r2, #7]
1000dfee:	e003      	b.n	1000dff8 <ble_pair_request_handler+0x78>
	}
	else
	{
		features.initiator_keys =   AT_BLE_KEY_DIST_ENC;
1000dff0:	aa01      	add	r2, sp, #4
1000dff2:	2101      	movs	r1, #1
1000dff4:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   AT_BLE_KEY_DIST_ENC;
1000dff6:	71d1      	strb	r1, [r2, #7]
	}
			
	features.max_key_size = 16;
1000dff8:	aa01      	add	r2, sp, #4
1000dffa:	2110      	movs	r1, #16
1000dffc:	7151      	strb	r1, [r2, #5]
	features.min_key_size = 16;
1000dffe:	7111      	strb	r1, [r2, #4]
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
1000e000:	0172      	lsls	r2, r6, #5
1000e002:	1b92      	subs	r2, r2, r6
1000e004:	0092      	lsls	r2, r2, #2
1000e006:	4937      	ldr	r1, [pc, #220]	; (1000e0e4 <ble_pair_request_handler+0x164>)
1000e008:	188a      	adds	r2, r1, r2
1000e00a:	7e12      	ldrb	r2, [r2, #24]
1000e00c:	2a40      	cmp	r2, #64	; 0x40
1000e00e:	d142      	bne.n	1000e096 <ble_pair_request_handler+0x116>
1000e010:	015f      	lsls	r7, r3, #5
1000e012:	1afb      	subs	r3, r7, r3
1000e014:	009b      	lsls	r3, r3, #2
1000e016:	469b      	mov	fp, r3
1000e018:	001c      	movs	r4, r3
1000e01a:	3460      	adds	r4, #96	; 0x60
1000e01c:	1864      	adds	r4, r4, r1
1000e01e:	465d      	mov	r5, fp
1000e020:	3568      	adds	r5, #104	; 0x68
1000e022:	186d      	adds	r5, r5, r1
1000e024:	0027      	movs	r7, r4
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
		{						
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000e026:	4b30      	ldr	r3, [pc, #192]	; (1000e0e8 <ble_pair_request_handler+0x168>)
1000e028:	469a      	mov	sl, r3
1000e02a:	230f      	movs	r3, #15
1000e02c:	4699      	mov	r9, r3
1000e02e:	47d0      	blx	sl
1000e030:	464b      	mov	r3, r9
1000e032:	4018      	ands	r0, r3
1000e034:	7038      	strb	r0, [r7, #0]
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
1000e036:	47d0      	blx	sl
1000e038:	464b      	mov	r3, r9
1000e03a:	4018      	ands	r0, r3
1000e03c:	74b8      	strb	r0, [r7, #18]
1000e03e:	3701      	adds	r7, #1
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
1000e040:	42af      	cmp	r7, r5
1000e042:	d1f4      	bne.n	1000e02e <ble_pair_request_handler+0xae>
1000e044:	465b      	mov	r3, fp
1000e046:	3370      	adds	r3, #112	; 0x70
1000e048:	4f26      	ldr	r7, [pc, #152]	; (1000e0e4 <ble_pair_request_handler+0x164>)
1000e04a:	19df      	adds	r7, r3, r7
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000e04c:	4b26      	ldr	r3, [pc, #152]	; (1000e0e8 <ble_pair_request_handler+0x168>)
1000e04e:	469a      	mov	sl, r3
1000e050:	230f      	movs	r3, #15
1000e052:	4699      	mov	r9, r3
1000e054:	47d0      	blx	sl
1000e056:	464b      	mov	r3, r9
1000e058:	4018      	ands	r0, r3
1000e05a:	7028      	strb	r0, [r5, #0]
1000e05c:	3501      	adds	r5, #1
		{						
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
1000e05e:	42bd      	cmp	r5, r7
1000e060:	d1f8      	bne.n	1000e054 <ble_pair_request_handler+0xd4>
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
		}
		DBG_LOG_DEV("Generated LTK: ");
1000e062:	4822      	ldr	r0, [pc, #136]	; (1000e0ec <ble_pair_request_handler+0x16c>)
1000e064:	4b22      	ldr	r3, [pc, #136]	; (1000e0f0 <ble_pair_request_handler+0x170>)
1000e066:	4798      	blx	r3
1000e068:	4822      	ldr	r0, [pc, #136]	; (1000e0f4 <ble_pair_request_handler+0x174>)
1000e06a:	4b23      	ldr	r3, [pc, #140]	; (1000e0f8 <ble_pair_request_handler+0x178>)
1000e06c:	4798      	blx	r3
		for (i = 0; i < 16; i++)
		{
			DBG_LOG_CONT_DEV("0x%02X ", ble_dev_info[idx].host_ltk.key[i]);
1000e06e:	4d22      	ldr	r5, [pc, #136]	; (1000e0f8 <ble_pair_request_handler+0x178>)
1000e070:	7821      	ldrb	r1, [r4, #0]
1000e072:	4822      	ldr	r0, [pc, #136]	; (1000e0fc <ble_pair_request_handler+0x17c>)
1000e074:	47a8      	blx	r5
1000e076:	3401      	adds	r4, #1
		for(i=8 ; i<16 ;i++)
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
		}
		DBG_LOG_DEV("Generated LTK: ");
		for (i = 0; i < 16; i++)
1000e078:	42bc      	cmp	r4, r7
1000e07a:	d1f9      	bne.n	1000e070 <ble_pair_request_handler+0xf0>
		{
			DBG_LOG_CONT_DEV("0x%02X ", ble_dev_info[idx].host_ltk.key[i]);
		}
		
		ble_dev_info[idx].host_ltk.ediv = rand()&0xffff;
1000e07c:	4b1a      	ldr	r3, [pc, #104]	; (1000e0e8 <ble_pair_request_handler+0x168>)
1000e07e:	4798      	blx	r3
1000e080:	0173      	lsls	r3, r6, #5
1000e082:	1b9b      	subs	r3, r3, r6
1000e084:	009b      	lsls	r3, r3, #2
1000e086:	4a17      	ldr	r2, [pc, #92]	; (1000e0e4 <ble_pair_request_handler+0x164>)
1000e088:	18d3      	adds	r3, r2, r3
1000e08a:	001a      	movs	r2, r3
1000e08c:	3270      	adds	r2, #112	; 0x70
1000e08e:	8010      	strh	r0, [r2, #0]
		ble_dev_info[idx].host_ltk.key_size = 16;
1000e090:	337a      	adds	r3, #122	; 0x7a
1000e092:	2210      	movs	r2, #16
1000e094:	701a      	strb	r2, [r3, #0]
		/* Bonding information already exists */
		
	}

	/* Send pairing response */
	DBG_LOG_DEV("Sending pairing response");
1000e096:	4815      	ldr	r0, [pc, #84]	; (1000e0ec <ble_pair_request_handler+0x16c>)
1000e098:	4b15      	ldr	r3, [pc, #84]	; (1000e0f0 <ble_pair_request_handler+0x170>)
1000e09a:	4798      	blx	r3
1000e09c:	4818      	ldr	r0, [pc, #96]	; (1000e100 <ble_pair_request_handler+0x180>)
1000e09e:	4b16      	ldr	r3, [pc, #88]	; (1000e0f8 <ble_pair_request_handler+0x178>)
1000e0a0:	4798      	blx	r3

	if(at_ble_authenticate(pair_req->handle, &features, &ble_dev_info[idx].host_ltk, NULL) != AT_BLE_SUCCESS)
1000e0a2:	0173      	lsls	r3, r6, #5
1000e0a4:	1b9b      	subs	r3, r3, r6
1000e0a6:	009b      	lsls	r3, r3, #2
1000e0a8:	3360      	adds	r3, #96	; 0x60
1000e0aa:	4a0e      	ldr	r2, [pc, #56]	; (1000e0e4 <ble_pair_request_handler+0x164>)
1000e0ac:	189a      	adds	r2, r3, r2
1000e0ae:	4643      	mov	r3, r8
1000e0b0:	8818      	ldrh	r0, [r3, #0]
1000e0b2:	2300      	movs	r3, #0
1000e0b4:	a901      	add	r1, sp, #4
1000e0b6:	4c13      	ldr	r4, [pc, #76]	; (1000e104 <ble_pair_request_handler+0x184>)
1000e0b8:	47a0      	blx	r4
1000e0ba:	2800      	cmp	r0, #0
1000e0bc:	d00a      	beq.n	1000e0d4 <ble_pair_request_handler+0x154>
	{
		features.bond = false;
1000e0be:	ab01      	add	r3, sp, #4
1000e0c0:	2200      	movs	r2, #0
1000e0c2:	709a      	strb	r2, [r3, #2]
		features.mitm_protection = false;
1000e0c4:	705a      	strb	r2, [r3, #1]
		DBG_LOG("Pair Request - Authentication Failed");
1000e0c6:	4809      	ldr	r0, [pc, #36]	; (1000e0ec <ble_pair_request_handler+0x16c>)
1000e0c8:	4b09      	ldr	r3, [pc, #36]	; (1000e0f0 <ble_pair_request_handler+0x170>)
1000e0ca:	4798      	blx	r3
1000e0cc:	480e      	ldr	r0, [pc, #56]	; (1000e108 <ble_pair_request_handler+0x188>)
1000e0ce:	4b0a      	ldr	r3, [pc, #40]	; (1000e0f8 <ble_pair_request_handler+0x178>)
1000e0d0:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000e0d2:	20e2      	movs	r0, #226	; 0xe2
	}
	return AT_BLE_SUCCESS;
}
1000e0d4:	b005      	add	sp, #20
1000e0d6:	bc3c      	pop	{r2, r3, r4, r5}
1000e0d8:	4690      	mov	r8, r2
1000e0da:	4699      	mov	r9, r3
1000e0dc:	46a2      	mov	sl, r4
1000e0de:	46ab      	mov	fp, r5
1000e0e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000e0e2:	46c0      	nop			; (mov r8, r8)
1000e0e4:	1001a460 	.word	0x1001a460
1000e0e8:	100154a9 	.word	0x100154a9
1000e0ec:	1001663c 	.word	0x1001663c
1000e0f0:	10015495 	.word	0x10015495
1000e0f4:	10017bb8 	.word	0x10017bb8
1000e0f8:	10015375 	.word	0x10015375
1000e0fc:	10017bc8 	.word	0x10017bc8
1000e100:	10017bd0 	.word	0x10017bd0
1000e104:	10011455 	.word	0x10011455
1000e108:	10017bec 	.word	0x10017bec

1000e10c <ble_pair_key_request_handler>:

/** @brief function handles pair key request */
at_ble_status_t ble_pair_key_request_handler (void *params)
{
1000e10c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000e10e:	b085      	sub	sp, #20
1000e110:	0005      	movs	r5, r0
	at_ble_pair_key_request_t *pair_key;
	pair_key = (at_ble_pair_key_request_t *)params;
	/* Passkey has fixed value in this example MSB */
	uint8_t passkey[6]={'1','2','3','4','5','6'};
1000e112:	2206      	movs	r2, #6
1000e114:	493d      	ldr	r1, [pc, #244]	; (1000e20c <ble_pair_key_request_handler+0x100>)
1000e116:	a802      	add	r0, sp, #8
1000e118:	4e3d      	ldr	r6, [pc, #244]	; (1000e210 <ble_pair_key_request_handler+0x104>)
1000e11a:	47b0      	blx	r6
	uint8_t idx = 0;
        uint8_t pin;
        
	at_ble_pair_key_request_t pair_key_request;
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
1000e11c:	ac01      	add	r4, sp, #4
1000e11e:	2204      	movs	r2, #4
1000e120:	0029      	movs	r1, r5
1000e122:	0020      	movs	r0, r4
1000e124:	47b0      	blx	r6
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
1000e126:	78e3      	ldrb	r3, [r4, #3]
1000e128:	2b00      	cmp	r3, #0
1000e12a:	d162      	bne.n	1000e1f2 <ble_pair_key_request_handler+0xe6>
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
1000e12c:	4839      	ldr	r0, [pc, #228]	; (1000e214 <ble_pair_key_request_handler+0x108>)
1000e12e:	4b3a      	ldr	r3, [pc, #232]	; (1000e218 <ble_pair_key_request_handler+0x10c>)
1000e130:	4798      	blx	r3
1000e132:	483a      	ldr	r0, [pc, #232]	; (1000e21c <ble_pair_key_request_handler+0x110>)
1000e134:	4b3a      	ldr	r3, [pc, #232]	; (1000e220 <ble_pair_key_request_handler+0x114>)
1000e136:	4798      	blx	r3
1000e138:	2600      	movs	r6, #0
		for (idx = 0; idx < 6;) {          
			pin = getchar_b11_timeout(CHECK_PAIRING_KEY_TIME_OUT);
1000e13a:	4c3a      	ldr	r4, [pc, #232]	; (1000e224 <ble_pair_key_request_handler+0x118>)
				return AT_BLE_FAILURE;
			}
			
			if ((pin >= '0') && ( pin <= '9')) {
			  passkey[idx++] = pin;
			  DBG_LOG_CONT("%c", pin);
1000e13c:	27ff      	movs	r7, #255	; 0xff
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
		for (idx = 0; idx < 6;) {          
			pin = getchar_b11_timeout(CHECK_PAIRING_KEY_TIME_OUT);
1000e13e:	201e      	movs	r0, #30
1000e140:	47a0      	blx	r4
1000e142:	b2c3      	uxtb	r3, r0

			if (!pin) {
1000e144:	2b00      	cmp	r3, #0
1000e146:	d11a      	bne.n	1000e17e <ble_pair_key_request_handler+0x72>
			DBG_LOG("Pin Timeout");
1000e148:	4f32      	ldr	r7, [pc, #200]	; (1000e214 <ble_pair_key_request_handler+0x108>)
1000e14a:	0038      	movs	r0, r7
1000e14c:	4e32      	ldr	r6, [pc, #200]	; (1000e218 <ble_pair_key_request_handler+0x10c>)
1000e14e:	47b0      	blx	r6
1000e150:	4835      	ldr	r0, [pc, #212]	; (1000e228 <ble_pair_key_request_handler+0x11c>)
1000e152:	4c33      	ldr	r4, [pc, #204]	; (1000e220 <ble_pair_key_request_handler+0x114>)
1000e154:	47a0      	blx	r4
				DBG_LOG("Disconnecting ...");
1000e156:	0038      	movs	r0, r7
1000e158:	47b0      	blx	r6
1000e15a:	4834      	ldr	r0, [pc, #208]	; (1000e22c <ble_pair_key_request_handler+0x120>)
1000e15c:	47a0      	blx	r4
				if (!(at_ble_disconnect(pair_key->handle,
1000e15e:	8828      	ldrh	r0, [r5, #0]
1000e160:	2113      	movs	r1, #19
1000e162:	4b33      	ldr	r3, [pc, #204]	; (1000e230 <ble_pair_key_request_handler+0x124>)
1000e164:	4798      	blx	r3
1000e166:	0003      	movs	r3, r0
							AT_BLE_TERMINATED_BY_USER) == AT_BLE_SUCCESS)) {
					DBG_LOG("Disconnect Request Failed");
				}
				return AT_BLE_FAILURE;
1000e168:	20e2      	movs	r0, #226	; 0xe2
			pin = getchar_b11_timeout(CHECK_PAIRING_KEY_TIME_OUT);

			if (!pin) {
			DBG_LOG("Pin Timeout");
				DBG_LOG("Disconnecting ...");
				if (!(at_ble_disconnect(pair_key->handle,
1000e16a:	2b00      	cmp	r3, #0
1000e16c:	d04c      	beq.n	1000e208 <ble_pair_key_request_handler+0xfc>
							AT_BLE_TERMINATED_BY_USER) == AT_BLE_SUCCESS)) {
					DBG_LOG("Disconnect Request Failed");
1000e16e:	4829      	ldr	r0, [pc, #164]	; (1000e214 <ble_pair_key_request_handler+0x108>)
1000e170:	4b29      	ldr	r3, [pc, #164]	; (1000e218 <ble_pair_key_request_handler+0x10c>)
1000e172:	4798      	blx	r3
1000e174:	482f      	ldr	r0, [pc, #188]	; (1000e234 <ble_pair_key_request_handler+0x128>)
1000e176:	4b2a      	ldr	r3, [pc, #168]	; (1000e220 <ble_pair_key_request_handler+0x114>)
1000e178:	4798      	blx	r3
				}
				return AT_BLE_FAILURE;
1000e17a:	20e2      	movs	r0, #226	; 0xe2
1000e17c:	e044      	b.n	1000e208 <ble_pair_key_request_handler+0xfc>
			}
			
			if ((pin >= '0') && ( pin <= '9')) {
1000e17e:	001a      	movs	r2, r3
1000e180:	3a30      	subs	r2, #48	; 0x30
1000e182:	2a09      	cmp	r2, #9
1000e184:	d8db      	bhi.n	1000e13e <ble_pair_key_request_handler+0x32>
			  passkey[idx++] = pin;
1000e186:	aa02      	add	r2, sp, #8
1000e188:	54b3      	strb	r3, [r6, r2]
			  DBG_LOG_CONT("%c", pin);
1000e18a:	4038      	ands	r0, r7
1000e18c:	4b2a      	ldr	r3, [pc, #168]	; (1000e238 <ble_pair_key_request_handler+0x12c>)
1000e18e:	4798      	blx	r3
1000e190:	3601      	adds	r6, #1
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
		for (idx = 0; idx < 6;) {          
1000e192:	2e06      	cmp	r6, #6
1000e194:	d026      	beq.n	1000e1e4 <ble_pair_key_request_handler+0xd8>
1000e196:	e7d2      	b.n	1000e13e <ble_pair_key_request_handler+0x32>
          {
            DBG_LOG("Entered Pass-code:");
          }
          else
          {
            DBG_LOG("Please Enter the following Pass-code(on other Device):");
1000e198:	481e      	ldr	r0, [pc, #120]	; (1000e214 <ble_pair_key_request_handler+0x108>)
1000e19a:	4b1f      	ldr	r3, [pc, #124]	; (1000e218 <ble_pair_key_request_handler+0x10c>)
1000e19c:	4798      	blx	r3
1000e19e:	4827      	ldr	r0, [pc, #156]	; (1000e23c <ble_pair_key_request_handler+0x130>)
1000e1a0:	4b1f      	ldr	r3, [pc, #124]	; (1000e220 <ble_pair_key_request_handler+0x114>)
1000e1a2:	4798      	blx	r3
	at_ble_pair_key_request_t pair_key_request;
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
1000e1a4:	2400      	movs	r4, #0
          
          /* Convert passkey to ASCII format */
          for(idx=0; idx<AT_BLE_PASSKEY_LEN; idx++)
          {
                  passkey[idx] = (passkey[idx]);
                  DBG_LOG_CONT("%c",passkey[idx]);
1000e1a6:	4e24      	ldr	r6, [pc, #144]	; (1000e238 <ble_pair_key_request_handler+0x12c>)
          }
          
          /* Convert passkey to ASCII format */
          for(idx=0; idx<AT_BLE_PASSKEY_LEN; idx++)
          {
                  passkey[idx] = (passkey[idx]);
1000e1a8:	ab02      	add	r3, sp, #8
                  DBG_LOG_CONT("%c",passkey[idx]);
1000e1aa:	5ce0      	ldrb	r0, [r4, r3]
1000e1ac:	47b0      	blx	r6
1000e1ae:	3401      	adds	r4, #1
          {
            DBG_LOG("Please Enter the following Pass-code(on other Device):");
          }
          
          /* Convert passkey to ASCII format */
          for(idx=0; idx<AT_BLE_PASSKEY_LEN; idx++)
1000e1b0:	2c06      	cmp	r4, #6
1000e1b2:	d1f9      	bne.n	1000e1a8 <ble_pair_key_request_handler+0x9c>
          {
                  passkey[idx] = (passkey[idx]);
                  DBG_LOG_CONT("%c",passkey[idx]);
          }		
          
          if(!((at_ble_pair_key_reply(pair_key->handle, pair_key_request.type, passkey)) == AT_BLE_SUCCESS))
1000e1b4:	ab01      	add	r3, sp, #4
1000e1b6:	7899      	ldrb	r1, [r3, #2]
1000e1b8:	8828      	ldrh	r0, [r5, #0]
1000e1ba:	aa02      	add	r2, sp, #8
1000e1bc:	4b20      	ldr	r3, [pc, #128]	; (1000e240 <ble_pair_key_request_handler+0x134>)
1000e1be:	4798      	blx	r3
1000e1c0:	2800      	cmp	r0, #0
1000e1c2:	d021      	beq.n	1000e208 <ble_pair_key_request_handler+0xfc>
          {
                  DBG_LOG("Pair-key reply failed");
1000e1c4:	4813      	ldr	r0, [pc, #76]	; (1000e214 <ble_pair_key_request_handler+0x108>)
1000e1c6:	4b14      	ldr	r3, [pc, #80]	; (1000e218 <ble_pair_key_request_handler+0x10c>)
1000e1c8:	4798      	blx	r3
1000e1ca:	481e      	ldr	r0, [pc, #120]	; (1000e244 <ble_pair_key_request_handler+0x138>)
1000e1cc:	4b14      	ldr	r3, [pc, #80]	; (1000e220 <ble_pair_key_request_handler+0x114>)
1000e1ce:	4798      	blx	r3
		if(pair_key_request.type == AT_BLE_PAIR_OOB)
		{
			DBG_LOG("OOB Feature Not supported");
		}
	}
	return AT_BLE_SUCCESS;	
1000e1d0:	2000      	movs	r0, #0
1000e1d2:	e019      	b.n	1000e208 <ble_pair_key_request_handler+0xfc>
	}
	else 
	{
		if(pair_key_request.type == AT_BLE_PAIR_OOB)
		{
			DBG_LOG("OOB Feature Not supported");
1000e1d4:	480f      	ldr	r0, [pc, #60]	; (1000e214 <ble_pair_key_request_handler+0x108>)
1000e1d6:	4b10      	ldr	r3, [pc, #64]	; (1000e218 <ble_pair_key_request_handler+0x10c>)
1000e1d8:	4798      	blx	r3
1000e1da:	481b      	ldr	r0, [pc, #108]	; (1000e248 <ble_pair_key_request_handler+0x13c>)
1000e1dc:	4b10      	ldr	r3, [pc, #64]	; (1000e220 <ble_pair_key_request_handler+0x114>)
1000e1de:	4798      	blx	r3
		}
	}
	return AT_BLE_SUCCESS;	
1000e1e0:	2000      	movs	r0, #0
1000e1e2:	e011      	b.n	1000e208 <ble_pair_key_request_handler+0xfc>
	if(((pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_DISPLAY) &&
	   (pair_key_request.type == AT_BLE_PAIR_PASSKEY)) || (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY))
	{
          if(pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY)
          {
            DBG_LOG("Entered Pass-code:");
1000e1e4:	480b      	ldr	r0, [pc, #44]	; (1000e214 <ble_pair_key_request_handler+0x108>)
1000e1e6:	4b0c      	ldr	r3, [pc, #48]	; (1000e218 <ble_pair_key_request_handler+0x10c>)
1000e1e8:	4798      	blx	r3
1000e1ea:	4818      	ldr	r0, [pc, #96]	; (1000e24c <ble_pair_key_request_handler+0x140>)
1000e1ec:	4b0c      	ldr	r3, [pc, #48]	; (1000e220 <ble_pair_key_request_handler+0x114>)
1000e1ee:	4798      	blx	r3
1000e1f0:	e7d8      	b.n	1000e1a4 <ble_pair_key_request_handler+0x98>
			} 
	  }
	}	
	
	/* Display passkey */
	if(((pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_DISPLAY) &&
1000e1f2:	ab01      	add	r3, sp, #4
1000e1f4:	885a      	ldrh	r2, [r3, #2]
1000e1f6:	2380      	movs	r3, #128	; 0x80
1000e1f8:	005b      	lsls	r3, r3, #1
1000e1fa:	429a      	cmp	r2, r3
1000e1fc:	d0cc      	beq.n	1000e198 <ble_pair_key_request_handler+0x8c>
                  DBG_LOG("Pair-key reply failed");
          }
	}
	else 
	{
		if(pair_key_request.type == AT_BLE_PAIR_OOB)
1000e1fe:	ab01      	add	r3, sp, #4
1000e200:	789b      	ldrb	r3, [r3, #2]
1000e202:	2b01      	cmp	r3, #1
1000e204:	d0e6      	beq.n	1000e1d4 <ble_pair_key_request_handler+0xc8>
		{
			DBG_LOG("OOB Feature Not supported");
		}
	}
	return AT_BLE_SUCCESS;	
1000e206:	2000      	movs	r0, #0
}
1000e208:	b005      	add	sp, #20
1000e20a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000e20c:	100177d4 	.word	0x100177d4
1000e210:	1001521b 	.word	0x1001521b
1000e214:	1001663c 	.word	0x1001663c
1000e218:	10015495 	.word	0x10015495
1000e21c:	10017c14 	.word	0x10017c14
1000e220:	10015375 	.word	0x10015375
1000e224:	1000ef35 	.word	0x1000ef35
1000e228:	10017c3c 	.word	0x10017c3c
1000e22c:	10017c48 	.word	0x10017c48
1000e230:	10010a5d 	.word	0x10010a5d
1000e234:	10017af4 	.word	0x10017af4
1000e238:	100153a9 	.word	0x100153a9
1000e23c:	10017c5c 	.word	0x10017c5c
1000e240:	10011585 	.word	0x10011585
1000e244:	10017c94 	.word	0x10017c94
1000e248:	10017cac 	.word	0x10017cac
1000e24c:	10017cc8 	.word	0x10017cc8

1000e250 <ble_encryption_request_handler>:
	return AT_BLE_SUCCESS;
}

/** @brief function handles encryption requests */
at_ble_status_t ble_encryption_request_handler(void *params)
{
1000e250:	b5f0      	push	{r4, r5, r6, r7, lr}
1000e252:	465f      	mov	r7, fp
1000e254:	4656      	mov	r6, sl
1000e256:	464d      	mov	r5, r9
1000e258:	b4e0      	push	{r5, r6, r7}
1000e25a:	0006      	movs	r6, r0
	uint8_t idx;
	enc_req = (at_ble_encryption_request_t *)params;

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == enc_req->handle) && (ble_dev_info[idx].conn_state != BLE_DEVICE_DISCONNECTED) &&
1000e25c:	8800      	ldrh	r0, [r0, #0]
1000e25e:	4b49      	ldr	r3, [pc, #292]	; (1000e384 <ble_encryption_request_handler+0x134>)
1000e260:	2200      	movs	r2, #0
	bool key_found = false;
	bool device_found = false;
	uint8_t idx;
	enc_req = (at_ble_encryption_request_t *)params;

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000e262:	2400      	movs	r4, #0
	{
		if((ble_dev_info[idx].conn_info.handle == enc_req->handle) && (ble_dev_info[idx].conn_state != BLE_DEVICE_DISCONNECTED) &&
1000e264:	8919      	ldrh	r1, [r3, #8]
1000e266:	4281      	cmp	r1, r0
1000e268:	d137      	bne.n	1000e2da <ble_encryption_request_handler+0x8a>
1000e26a:	0019      	movs	r1, r3
1000e26c:	315e      	adds	r1, #94	; 0x5e
1000e26e:	7809      	ldrb	r1, [r1, #0]
1000e270:	2901      	cmp	r1, #1
1000e272:	d932      	bls.n	1000e2da <ble_encryption_request_handler+0x8a>
		(ble_dev_info[idx].conn_state != BLE_DEVICE_DEFAULT_IDLE))
		{
			device_found = true;
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_STATE;
1000e274:	4f43      	ldr	r7, [pc, #268]	; (1000e384 <ble_encryption_request_handler+0x134>)
1000e276:	0153      	lsls	r3, r2, #5
1000e278:	1a9d      	subs	r5, r3, r2
1000e27a:	00ad      	lsls	r5, r5, #2
1000e27c:	197d      	adds	r5, r7, r5
1000e27e:	355e      	adds	r5, #94	; 0x5e
1000e280:	2306      	movs	r3, #6
1000e282:	702b      	strb	r3, [r5, #0]
			DBG_LOG_DEV("ENC-Req: Conn Handle Device Found:hdl:%d", enc_req->handle);
1000e284:	4840      	ldr	r0, [pc, #256]	; (1000e388 <ble_encryption_request_handler+0x138>)
1000e286:	4b41      	ldr	r3, [pc, #260]	; (1000e38c <ble_encryption_request_handler+0x13c>)
1000e288:	469a      	mov	sl, r3
1000e28a:	4798      	blx	r3
1000e28c:	8831      	ldrh	r1, [r6, #0]
1000e28e:	4840      	ldr	r0, [pc, #256]	; (1000e390 <ble_encryption_request_handler+0x140>)
1000e290:	4b40      	ldr	r3, [pc, #256]	; (1000e394 <ble_encryption_request_handler+0x144>)
1000e292:	4699      	mov	r9, r3
1000e294:	4798      	blx	r3
		}
	}
	
	if (device_found)
	{
		DBG_LOG_DEV("host device ediv %x",ble_dev_info[idx].host_ltk.ediv);
1000e296:	483c      	ldr	r0, [pc, #240]	; (1000e388 <ble_encryption_request_handler+0x138>)
1000e298:	47d0      	blx	sl
1000e29a:	0163      	lsls	r3, r4, #5
1000e29c:	1b1b      	subs	r3, r3, r4
1000e29e:	009b      	lsls	r3, r3, #2
1000e2a0:	18ff      	adds	r7, r7, r3
1000e2a2:	2370      	movs	r3, #112	; 0x70
1000e2a4:	469b      	mov	fp, r3
1000e2a6:	44bb      	add	fp, r7
1000e2a8:	465b      	mov	r3, fp
1000e2aa:	8819      	ldrh	r1, [r3, #0]
1000e2ac:	483a      	ldr	r0, [pc, #232]	; (1000e398 <ble_encryption_request_handler+0x148>)
1000e2ae:	47c8      	blx	r9
		DBG_LOG_DEV("peer device ediv %x",ble_dev_info[idx].bond_info.peer_ltk.ediv);
1000e2b0:	4835      	ldr	r0, [pc, #212]	; (1000e388 <ble_encryption_request_handler+0x138>)
1000e2b2:	47d0      	blx	sl
1000e2b4:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
1000e2b6:	4839      	ldr	r0, [pc, #228]	; (1000e39c <ble_encryption_request_handler+0x14c>)
1000e2b8:	47c8      	blx	r9
		DBG_LOG_DEV("enc_req ediv %x", enc_req->ediv);
1000e2ba:	4833      	ldr	r0, [pc, #204]	; (1000e388 <ble_encryption_request_handler+0x138>)
1000e2bc:	47d0      	blx	sl
1000e2be:	8871      	ldrh	r1, [r6, #2]
1000e2c0:	4837      	ldr	r0, [pc, #220]	; (1000e3a0 <ble_encryption_request_handler+0x150>)
1000e2c2:	47c8      	blx	r9
		DBG_LOG_DEV("The index is %d",idx);
1000e2c4:	4830      	ldr	r0, [pc, #192]	; (1000e388 <ble_encryption_request_handler+0x138>)
1000e2c6:	47d0      	blx	sl
1000e2c8:	0021      	movs	r1, r4
1000e2ca:	4836      	ldr	r0, [pc, #216]	; (1000e3a4 <ble_encryption_request_handler+0x154>)
1000e2cc:	47c8      	blx	r9
		if((ble_dev_info[idx].host_ltk.ediv == enc_req->ediv)
1000e2ce:	465b      	mov	r3, fp
1000e2d0:	881a      	ldrh	r2, [r3, #0]
1000e2d2:	8873      	ldrh	r3, [r6, #2]
1000e2d4:	429a      	cmp	r2, r3
1000e2d6:	d12a      	bne.n	1000e32e <ble_encryption_request_handler+0xde>
1000e2d8:	e006      	b.n	1000e2e8 <ble_encryption_request_handler+0x98>
	bool key_found = false;
	bool device_found = false;
	uint8_t idx;
	enc_req = (at_ble_encryption_request_t *)params;

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000e2da:	3401      	adds	r4, #1
1000e2dc:	b2e4      	uxtb	r4, r4
1000e2de:	3201      	adds	r2, #1
1000e2e0:	337c      	adds	r3, #124	; 0x7c
1000e2e2:	2c05      	cmp	r4, #5
1000e2e4:	d1be      	bne.n	1000e264 <ble_encryption_request_handler+0x14>
1000e2e6:	e022      	b.n	1000e32e <ble_encryption_request_handler+0xde>
		DBG_LOG_DEV("host device ediv %x",ble_dev_info[idx].host_ltk.ediv);
		DBG_LOG_DEV("peer device ediv %x",ble_dev_info[idx].bond_info.peer_ltk.ediv);
		DBG_LOG_DEV("enc_req ediv %x", enc_req->ediv);
		DBG_LOG_DEV("The index is %d",idx);
		if((ble_dev_info[idx].host_ltk.ediv == enc_req->ediv)
		&& !memcmp(&enc_req->nb[0],&ble_dev_info[idx].host_ltk.nb[0],8))
1000e2e8:	0161      	lsls	r1, r4, #5
1000e2ea:	1b09      	subs	r1, r1, r4
1000e2ec:	0089      	lsls	r1, r1, #2
1000e2ee:	4b25      	ldr	r3, [pc, #148]	; (1000e384 <ble_encryption_request_handler+0x134>)
1000e2f0:	1859      	adds	r1, r3, r1
1000e2f2:	3172      	adds	r1, #114	; 0x72
1000e2f4:	1d30      	adds	r0, r6, #4
1000e2f6:	2208      	movs	r2, #8
1000e2f8:	4b2b      	ldr	r3, [pc, #172]	; (1000e3a8 <ble_encryption_request_handler+0x158>)
1000e2fa:	4798      	blx	r3
1000e2fc:	2800      	cmp	r0, #0
1000e2fe:	d116      	bne.n	1000e32e <ble_encryption_request_handler+0xde>
		{
			key_found = true;
			DBG_LOG_DEV("ENC-Req: Key Found");
1000e300:	4821      	ldr	r0, [pc, #132]	; (1000e388 <ble_encryption_request_handler+0x138>)
1000e302:	4b22      	ldr	r3, [pc, #136]	; (1000e38c <ble_encryption_request_handler+0x13c>)
1000e304:	4798      	blx	r3
1000e306:	4829      	ldr	r0, [pc, #164]	; (1000e3ac <ble_encryption_request_handler+0x15c>)
1000e308:	4b22      	ldr	r3, [pc, #136]	; (1000e394 <ble_encryption_request_handler+0x144>)
1000e30a:	4798      	blx	r3
	    DBG_LOG("Please unpair the device from peer device(mobile) settings menu and start pairing again");
		at_ble_disconnect(ble_dev_info[idx].conn_info.handle, AT_BLE_AUTH_FAILURE);
		return AT_BLE_FAILURE;
    }

	if(!(at_ble_encryption_request_reply(enc_req->handle, ble_dev_info[idx].bond_info.auth, key_found, &ble_dev_info[idx].host_ltk) == AT_BLE_SUCCESS))
1000e30c:	0162      	lsls	r2, r4, #5
1000e30e:	1b13      	subs	r3, r2, r4
1000e310:	009b      	lsls	r3, r3, #2
1000e312:	3360      	adds	r3, #96	; 0x60
1000e314:	491b      	ldr	r1, [pc, #108]	; (1000e384 <ble_encryption_request_handler+0x134>)
1000e316:	185b      	adds	r3, r3, r1
1000e318:	1b12      	subs	r2, r2, r4
1000e31a:	0092      	lsls	r2, r2, #2
1000e31c:	188a      	adds	r2, r1, r2
1000e31e:	7d11      	ldrb	r1, [r2, #20]
1000e320:	8830      	ldrh	r0, [r6, #0]
1000e322:	2201      	movs	r2, #1
1000e324:	4c22      	ldr	r4, [pc, #136]	; (1000e3b0 <ble_encryption_request_handler+0x160>)
1000e326:	47a0      	blx	r4
1000e328:	1e04      	subs	r4, r0, #0
1000e32a:	d01e      	beq.n	1000e36a <ble_encryption_request_handler+0x11a>
1000e32c:	e015      	b.n	1000e35a <ble_encryption_request_handler+0x10a>
	}
	
	
    if(key_found == false)
    {
	    DBG_LOG("Pairing information of peer device is not available.");
1000e32e:	4f16      	ldr	r7, [pc, #88]	; (1000e388 <ble_encryption_request_handler+0x138>)
1000e330:	0038      	movs	r0, r7
1000e332:	4e16      	ldr	r6, [pc, #88]	; (1000e38c <ble_encryption_request_handler+0x13c>)
1000e334:	47b0      	blx	r6
1000e336:	481f      	ldr	r0, [pc, #124]	; (1000e3b4 <ble_encryption_request_handler+0x164>)
1000e338:	4d16      	ldr	r5, [pc, #88]	; (1000e394 <ble_encryption_request_handler+0x144>)
1000e33a:	47a8      	blx	r5
	    DBG_LOG("Please unpair the device from peer device(mobile) settings menu and start pairing again");
1000e33c:	0038      	movs	r0, r7
1000e33e:	47b0      	blx	r6
1000e340:	481d      	ldr	r0, [pc, #116]	; (1000e3b8 <ble_encryption_request_handler+0x168>)
1000e342:	47a8      	blx	r5
		at_ble_disconnect(ble_dev_info[idx].conn_info.handle, AT_BLE_AUTH_FAILURE);
1000e344:	0163      	lsls	r3, r4, #5
1000e346:	1b1c      	subs	r4, r3, r4
1000e348:	00a4      	lsls	r4, r4, #2
1000e34a:	4b0e      	ldr	r3, [pc, #56]	; (1000e384 <ble_encryption_request_handler+0x134>)
1000e34c:	191c      	adds	r4, r3, r4
1000e34e:	8920      	ldrh	r0, [r4, #8]
1000e350:	2105      	movs	r1, #5
1000e352:	4b1a      	ldr	r3, [pc, #104]	; (1000e3bc <ble_encryption_request_handler+0x16c>)
1000e354:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000e356:	24e2      	movs	r4, #226	; 0xe2
1000e358:	e00d      	b.n	1000e376 <ble_encryption_request_handler+0x126>
    }

	if(!(at_ble_encryption_request_reply(enc_req->handle, ble_dev_info[idx].bond_info.auth, key_found, &ble_dev_info[idx].host_ltk) == AT_BLE_SUCCESS))
	{
		DBG_LOG("Encryption Request Reply Failed");
1000e35a:	480b      	ldr	r0, [pc, #44]	; (1000e388 <ble_encryption_request_handler+0x138>)
1000e35c:	4b0b      	ldr	r3, [pc, #44]	; (1000e38c <ble_encryption_request_handler+0x13c>)
1000e35e:	4798      	blx	r3
1000e360:	4817      	ldr	r0, [pc, #92]	; (1000e3c0 <ble_encryption_request_handler+0x170>)
1000e362:	4b0c      	ldr	r3, [pc, #48]	; (1000e394 <ble_encryption_request_handler+0x144>)
1000e364:	4798      	blx	r3
	}
	else
	{      
		DBG_LOG_DEV("Encryption Request Reply");
	}
	return AT_BLE_SUCCESS;
1000e366:	2400      	movs	r4, #0
1000e368:	e005      	b.n	1000e376 <ble_encryption_request_handler+0x126>
	{
		DBG_LOG("Encryption Request Reply Failed");
	}
	else
	{      
		DBG_LOG_DEV("Encryption Request Reply");
1000e36a:	4807      	ldr	r0, [pc, #28]	; (1000e388 <ble_encryption_request_handler+0x138>)
1000e36c:	4b07      	ldr	r3, [pc, #28]	; (1000e38c <ble_encryption_request_handler+0x13c>)
1000e36e:	4798      	blx	r3
1000e370:	4814      	ldr	r0, [pc, #80]	; (1000e3c4 <ble_encryption_request_handler+0x174>)
1000e372:	4b08      	ldr	r3, [pc, #32]	; (1000e394 <ble_encryption_request_handler+0x144>)
1000e374:	4798      	blx	r3
	}
	return AT_BLE_SUCCESS;
}
1000e376:	0020      	movs	r0, r4
1000e378:	bc1c      	pop	{r2, r3, r4}
1000e37a:	4691      	mov	r9, r2
1000e37c:	469a      	mov	sl, r3
1000e37e:	46a3      	mov	fp, r4
1000e380:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000e382:	46c0      	nop			; (mov r8, r8)
1000e384:	1001a460 	.word	0x1001a460
1000e388:	1001663c 	.word	0x1001663c
1000e38c:	10015495 	.word	0x10015495
1000e390:	10017cdc 	.word	0x10017cdc
1000e394:	10015375 	.word	0x10015375
1000e398:	10017d08 	.word	0x10017d08
1000e39c:	10017d1c 	.word	0x10017d1c
1000e3a0:	10017d30 	.word	0x10017d30
1000e3a4:	10017d40 	.word	0x10017d40
1000e3a8:	100151fd 	.word	0x100151fd
1000e3ac:	10017d50 	.word	0x10017d50
1000e3b0:	100116b9 	.word	0x100116b9
1000e3b4:	10017d64 	.word	0x10017d64
1000e3b8:	10017d9c 	.word	0x10017d9c
1000e3bc:	10010a5d 	.word	0x10010a5d
1000e3c0:	10017df4 	.word	0x10017df4
1000e3c4:	10017e14 	.word	0x10017e14

1000e3c8 <ble_mgr_events_callback_handler>:
}

bool ble_mgr_events_callback_handler(ble_mgr_event_cb_t event_cb_type, 
									ble_mgr_event_t event_type,
									const ble_event_callback_t *ble_event_handler)
{
1000e3c8:	b530      	push	{r4, r5, lr}
	uint8_t idx;
	uint8_t max_event_handler = 0;
	bool status = true;
	const ble_event_callback_t **ble_event_cb_ptr = NULL;
	if (ble_event_handler != NULL)
1000e3ca:	2a00      	cmp	r2, #0
1000e3cc:	d047      	beq.n	1000e45e <ble_mgr_events_callback_handler+0x96>
	{
		switch(event_type)
1000e3ce:	2906      	cmp	r1, #6
1000e3d0:	d847      	bhi.n	1000e462 <ble_mgr_events_callback_handler+0x9a>
1000e3d2:	0089      	lsls	r1, r1, #2
1000e3d4:	4b28      	ldr	r3, [pc, #160]	; (1000e478 <ble_mgr_events_callback_handler+0xb0>)
1000e3d6:	585b      	ldr	r3, [r3, r1]
1000e3d8:	469f      	mov	pc, r3
			}
			break;
			
			case BLE_GATT_SERVER_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_gatt_server_event_cb;
1000e3da:	4b28      	ldr	r3, [pc, #160]	; (1000e47c <ble_mgr_events_callback_handler+0xb4>)
				max_event_handler = MAX_GATT_SERVER_SUBSCRIBERS;
1000e3dc:	2405      	movs	r4, #5
1000e3de:	e00a      	b.n	1000e3f6 <ble_mgr_events_callback_handler+0x2e>
			}
			break;
			
			case BLE_GATT_HTPT_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_htpt_event_cb;
1000e3e0:	4b27      	ldr	r3, [pc, #156]	; (1000e480 <ble_mgr_events_callback_handler+0xb8>)
				max_event_handler = MAX_HTPT_EVENT_SUBSCRIBERS;
1000e3e2:	2401      	movs	r4, #1
			}
			break;
1000e3e4:	e007      	b.n	1000e3f6 <ble_mgr_events_callback_handler+0x2e>
			
			case BLE_DTM_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_dtm_event_cb;
1000e3e6:	4b27      	ldr	r3, [pc, #156]	; (1000e484 <ble_mgr_events_callback_handler+0xbc>)
				max_event_handler = MAX_DTM_EVENT_SUBSCRIBERS;
1000e3e8:	2405      	movs	r4, #5
			}
			break;
1000e3ea:	e004      	b.n	1000e3f6 <ble_mgr_events_callback_handler+0x2e>
			
			case BLE_CUSTOM_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_custom_event_cb;
1000e3ec:	4b26      	ldr	r3, [pc, #152]	; (1000e488 <ble_mgr_events_callback_handler+0xc0>)
				max_event_handler = MAX_CUSTOM_EVENT_SUBSCRIBERS;
1000e3ee:	2401      	movs	r4, #1
			}
			break;
1000e3f0:	e001      	b.n	1000e3f6 <ble_mgr_events_callback_handler+0x2e>
	{
		switch(event_type)
		{
			case BLE_GAP_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_gap_event_cb;
1000e3f2:	4b26      	ldr	r3, [pc, #152]	; (1000e48c <ble_mgr_events_callback_handler+0xc4>)
				max_event_handler = MAX_GAP_EVENT_SUBSCRIBERS;
1000e3f4:	2405      	movs	r4, #5
		}
		
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
			if (event_cb_type == REGISTER_CALL_BACK)
1000e3f6:	2800      	cmp	r0, #0
1000e3f8:	d116      	bne.n	1000e428 <ble_mgr_events_callback_handler+0x60>
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == NULL)
1000e3fa:	6819      	ldr	r1, [r3, #0]
1000e3fc:	2900      	cmp	r1, #0
1000e3fe:	d10b      	bne.n	1000e418 <ble_mgr_events_callback_handler+0x50>
1000e400:	e006      	b.n	1000e410 <ble_mgr_events_callback_handler+0x48>
1000e402:	001d      	movs	r5, r3
1000e404:	3304      	adds	r3, #4
1000e406:	1f18      	subs	r0, r3, #4
1000e408:	6800      	ldr	r0, [r0, #0]
1000e40a:	2800      	cmp	r0, #0
1000e40c:	d106      	bne.n	1000e41c <ble_mgr_events_callback_handler+0x54>
1000e40e:	e000      	b.n	1000e412 <ble_mgr_events_callback_handler+0x4a>
1000e410:	001d      	movs	r5, r3
					{
						ble_event_cb_ptr[idx] = ble_event_handler;
1000e412:	602a      	str	r2, [r5, #0]
						status = true; //Successfully registered to table
1000e414:	2101      	movs	r1, #1
						break;
1000e416:	e02c      	b.n	1000e472 <ble_mgr_events_callback_handler+0xaa>
1000e418:	3304      	adds	r3, #4
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
			if (event_cb_type == REGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == NULL)
1000e41a:	2100      	movs	r1, #0
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
			if (event_cb_type == REGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
1000e41c:	3101      	adds	r1, #1
1000e41e:	b2c9      	uxtb	r1, r1
1000e420:	42a1      	cmp	r1, r4
1000e422:	d3ee      	bcc.n	1000e402 <ble_mgr_events_callback_handler+0x3a>
			break;
		}
		
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
1000e424:	2100      	movs	r1, #0
1000e426:	e024      	b.n	1000e472 <ble_mgr_events_callback_handler+0xaa>
1000e428:	2100      	movs	r1, #0
						status = true; //Successfully registered to table
						break;
					}
				}
			}
			else if(event_cb_type == UNREGISTER_CALL_BACK)
1000e42a:	2801      	cmp	r0, #1
1000e42c:	d121      	bne.n	1000e472 <ble_mgr_events_callback_handler+0xaa>
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == ble_event_handler)
1000e42e:	6819      	ldr	r1, [r3, #0]
1000e430:	428a      	cmp	r2, r1
1000e432:	d10c      	bne.n	1000e44e <ble_mgr_events_callback_handler+0x86>
1000e434:	e006      	b.n	1000e444 <ble_mgr_events_callback_handler+0x7c>
1000e436:	001d      	movs	r5, r3
1000e438:	3304      	adds	r3, #4
1000e43a:	1f18      	subs	r0, r3, #4
1000e43c:	6800      	ldr	r0, [r0, #0]
1000e43e:	4282      	cmp	r2, r0
1000e440:	d107      	bne.n	1000e452 <ble_mgr_events_callback_handler+0x8a>
1000e442:	e000      	b.n	1000e446 <ble_mgr_events_callback_handler+0x7e>
1000e444:	001d      	movs	r5, r3
					{
						ble_event_cb_ptr[idx] = NULL;
1000e446:	2300      	movs	r3, #0
1000e448:	602b      	str	r3, [r5, #0]
						status = true;//Successfully unregistered from table
1000e44a:	2101      	movs	r1, #1
						break;
1000e44c:	e011      	b.n	1000e472 <ble_mgr_events_callback_handler+0xaa>
1000e44e:	3304      	adds	r3, #4
			}
			else if(event_cb_type == UNREGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == ble_event_handler)
1000e450:	2100      	movs	r1, #0
					}
				}
			}
			else if(event_cb_type == UNREGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
1000e452:	3101      	adds	r1, #1
1000e454:	b2c9      	uxtb	r1, r1
1000e456:	42a1      	cmp	r1, r4
1000e458:	d3ed      	bcc.n	1000e436 <ble_mgr_events_callback_handler+0x6e>
			break;
		}
		
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
1000e45a:	2100      	movs	r1, #0
1000e45c:	e009      	b.n	1000e472 <ble_mgr_events_callback_handler+0xaa>
			}			
		}
	}
	else
	{
		status = false; //Invalid parameter
1000e45e:	2100      	movs	r1, #0
1000e460:	e007      	b.n	1000e472 <ble_mgr_events_callback_handler+0xaa>
	uint8_t max_event_handler = 0;
	bool status = true;
	const ble_event_callback_t **ble_event_cb_ptr = NULL;
	if (ble_event_handler != NULL)
	{
		switch(event_type)
1000e462:	2100      	movs	r1, #0
1000e464:	e005      	b.n	1000e472 <ble_mgr_events_callback_handler+0xaa>
			}
			break;
			
			case BLE_GATT_CLIENT_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_gatt_client_event_cb;
1000e466:	4b0a      	ldr	r3, [pc, #40]	; (1000e490 <ble_mgr_events_callback_handler+0xc8>)
				max_event_handler = MAX_GATT_CLIENT_SUBSCRIBERS;
1000e468:	2405      	movs	r4, #5
1000e46a:	e7c4      	b.n	1000e3f6 <ble_mgr_events_callback_handler+0x2e>
			}
			break;
			
			case BLE_L2CAP_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_l2cap_event_cb;
1000e46c:	4b09      	ldr	r3, [pc, #36]	; (1000e494 <ble_mgr_events_callback_handler+0xcc>)
				max_event_handler = MAX_L2CAP_EVENT_SUBSCRIBERS;
1000e46e:	2401      	movs	r4, #1
1000e470:	e7c1      	b.n	1000e3f6 <ble_mgr_events_callback_handler+0x2e>
	else
	{
		status = false; //Invalid parameter
	}
	return status;
}
1000e472:	0008      	movs	r0, r1
1000e474:	bd30      	pop	{r4, r5, pc}
1000e476:	46c0      	nop			; (mov r8, r8)
1000e478:	100176c8 	.word	0x100176c8
1000e47c:	1001a44c 	.word	0x1001a44c
1000e480:	1001a448 	.word	0x1001a448
1000e484:	1001a6d0 	.word	0x1001a6d0
1000e488:	1001ac84 	.word	0x1001ac84
1000e48c:	1001a6e4 	.word	0x1001a6e4
1000e490:	1001a6f8 	.word	0x1001a6f8
1000e494:	1001a740 	.word	0x1001a740

1000e498 <ble_device_init>:
volatile uint32_t 	event_params_memory[1024] 	= {0};


/** @brief BLE device initialization */
void ble_device_init(at_ble_addr_t *addr)
{
1000e498:	b5f0      	push	{r4, r5, r6, r7, lr}
1000e49a:	465f      	mov	r7, fp
1000e49c:	4656      	mov	r6, sl
1000e49e:	464d      	mov	r5, r9
1000e4a0:	4644      	mov	r4, r8
1000e4a2:	b4f0      	push	{r4, r5, r6, r7}
1000e4a4:	b091      	sub	sp, #68	; 0x44
1000e4a6:	0005      	movs	r5, r0
static bool ble_scan_duplication_check(at_ble_scan_info_t * info);
#endif

static void init_global_var(void)
{
	ble_user_event_cb = 0;
1000e4a8:	2400      	movs	r4, #0
1000e4aa:	4b7e      	ldr	r3, [pc, #504]	; (1000e6a4 <ble_device_init+0x20c>)
1000e4ac:	601c      	str	r4, [r3, #0]
	
	memset(&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
1000e4ae:	2207      	movs	r2, #7
1000e4b0:	2100      	movs	r1, #0
1000e4b2:	487d      	ldr	r0, [pc, #500]	; (1000e6a8 <ble_device_init+0x210>)
1000e4b4:	4e7d      	ldr	r6, [pc, #500]	; (1000e6ac <ble_device_init+0x214>)
1000e4b6:	47b0      	blx	r6
	memset(&connected_state_info, 0, sizeof(at_ble_connected_t));
1000e4b8:	2212      	movs	r2, #18
1000e4ba:	2100      	movs	r1, #0
1000e4bc:	487c      	ldr	r0, [pc, #496]	; (1000e6b0 <ble_device_init+0x218>)
1000e4be:	47b0      	blx	r6
		
#if defined ATT_DB_MEMORY
	memset(att_db_data, 0, sizeof(uint32_t) * BLE_ATT_DB_MEMORY_SIZE/4);
1000e4c0:	4a7c      	ldr	r2, [pc, #496]	; (1000e6b4 <ble_device_init+0x21c>)
1000e4c2:	2100      	movs	r1, #0
1000e4c4:	487c      	ldr	r0, [pc, #496]	; (1000e6b8 <ble_device_init+0x220>)
1000e4c6:	47b0      	blx	r6
#endif

	scan_response_count = 0;
1000e4c8:	4b7c      	ldr	r3, [pc, #496]	; (1000e6bc <ble_device_init+0x224>)
1000e4ca:	701c      	strb	r4, [r3, #0]
	memset(scan_info, 0, sizeof(scan_info));
1000e4cc:	22cd      	movs	r2, #205	; 0xcd
1000e4ce:	0092      	lsls	r2, r2, #2
1000e4d0:	2100      	movs	r1, #0
1000e4d2:	487b      	ldr	r0, [pc, #492]	; (1000e6c0 <ble_device_init+0x228>)
1000e4d4:	47b0      	blx	r6

	event = AT_BLE_UNDEFINED_EVENT;
1000e4d6:	4b7b      	ldr	r3, [pc, #492]	; (1000e6c4 <ble_device_init+0x22c>)
1000e4d8:	701c      	strb	r4, [r3, #0]
	memset(ble_event_params, 0, BLE_EVENT_PARAM_MAX_SIZE);
1000e4da:	2283      	movs	r2, #131	; 0x83
1000e4dc:	0092      	lsls	r2, r2, #2
1000e4de:	2100      	movs	r1, #0
1000e4e0:	4879      	ldr	r0, [pc, #484]	; (1000e6c8 <ble_device_init+0x230>)
1000e4e2:	47b0      	blx	r6
{
	uint8_t idx;	
	char *dev_name = NULL;
	init_global_var();

	memset((uint8_t *)event_pool_memory, 0, sizeof(event_pool_memory));
1000e4e4:	4b79      	ldr	r3, [pc, #484]	; (1000e6cc <ble_device_init+0x234>)
1000e4e6:	469b      	mov	fp, r3
1000e4e8:	2380      	movs	r3, #128	; 0x80
1000e4ea:	00db      	lsls	r3, r3, #3
1000e4ec:	469a      	mov	sl, r3
1000e4ee:	001a      	movs	r2, r3
1000e4f0:	2100      	movs	r1, #0
1000e4f2:	4658      	mov	r0, fp
1000e4f4:	47b0      	blx	r6
	memset((uint8_t *)event_params_memory, 0, sizeof(event_params_memory));
1000e4f6:	4b76      	ldr	r3, [pc, #472]	; (1000e6d0 <ble_device_init+0x238>)
1000e4f8:	4699      	mov	r9, r3
1000e4fa:	2380      	movs	r3, #128	; 0x80
1000e4fc:	015b      	lsls	r3, r3, #5
1000e4fe:	4698      	mov	r8, r3
1000e500:	001a      	movs	r2, r3
1000e502:	2100      	movs	r1, #0
1000e504:	4648      	mov	r0, r9
1000e506:	47b0      	blx	r6

	memset(&pf_cfg, 0, sizeof(pf_cfg));
1000e508:	4f72      	ldr	r7, [pc, #456]	; (1000e6d4 <ble_device_init+0x23c>)
1000e50a:	221c      	movs	r2, #28
1000e50c:	2100      	movs	r1, #0
1000e50e:	0038      	movs	r0, r7
1000e510:	47b0      	blx	r6

	pf_cfg.event_mem_pool.memStartAdd        = (uint8_t *)event_pool_memory;
1000e512:	465b      	mov	r3, fp
1000e514:	60bb      	str	r3, [r7, #8]
	pf_cfg.event_mem_pool.memSize            = sizeof(event_pool_memory);
1000e516:	4653      	mov	r3, sl
1000e518:	60fb      	str	r3, [r7, #12]
	pf_cfg.event_params_mem_pool.memStartAdd = (uint8_t *)event_params_memory;
1000e51a:	464b      	mov	r3, r9
1000e51c:	613b      	str	r3, [r7, #16]
	pf_cfg.event_params_mem_pool.memSize     = sizeof(event_params_memory);
1000e51e:	4643      	mov	r3, r8
1000e520:	617b      	str	r3, [r7, #20]

	/* Initialize the BLE Event callbacks */
	for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_gap_event_cb[idx] = NULL;
1000e522:	4b6d      	ldr	r3, [pc, #436]	; (1000e6d8 <ble_device_init+0x240>)
1000e524:	601c      	str	r4, [r3, #0]
1000e526:	605c      	str	r4, [r3, #4]
1000e528:	609c      	str	r4, [r3, #8]
1000e52a:	60dc      	str	r4, [r3, #12]
1000e52c:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_gatt_client_event_cb[idx] = NULL;
1000e52e:	4b6b      	ldr	r3, [pc, #428]	; (1000e6dc <ble_device_init+0x244>)
1000e530:	601c      	str	r4, [r3, #0]
1000e532:	605c      	str	r4, [r3, #4]
1000e534:	609c      	str	r4, [r3, #8]
1000e536:	60dc      	str	r4, [r3, #12]
1000e538:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
	{
		ble_mgr_gatt_server_event_cb[idx] = NULL;
1000e53a:	4b69      	ldr	r3, [pc, #420]	; (1000e6e0 <ble_device_init+0x248>)
1000e53c:	601c      	str	r4, [r3, #0]
1000e53e:	605c      	str	r4, [r3, #4]
1000e540:	609c      	str	r4, [r3, #8]
1000e542:	60dc      	str	r4, [r3, #12]
1000e544:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_L2CAP_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_l2cap_event_cb[idx] = NULL;
1000e546:	4b67      	ldr	r3, [pc, #412]	; (1000e6e4 <ble_device_init+0x24c>)
1000e548:	601c      	str	r4, [r3, #0]
	}
	
	for (idx = 0; idx < MAX_HTPT_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_htpt_event_cb[idx] = NULL;
1000e54a:	4b67      	ldr	r3, [pc, #412]	; (1000e6e8 <ble_device_init+0x250>)
1000e54c:	601c      	str	r4, [r3, #0]
	}
	
	for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_dtm_event_cb[idx] = NULL;
1000e54e:	4b67      	ldr	r3, [pc, #412]	; (1000e6ec <ble_device_init+0x254>)
1000e550:	601c      	str	r4, [r3, #0]
1000e552:	605c      	str	r4, [r3, #4]
1000e554:	609c      	str	r4, [r3, #8]
1000e556:	60dc      	str	r4, [r3, #12]
1000e558:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_CUSTOM_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_custom_event_cb[idx] = NULL;
1000e55a:	4b65      	ldr	r3, [pc, #404]	; (1000e6f0 <ble_device_init+0x258>)
1000e55c:	601c      	str	r4, [r3, #0]
1000e55e:	4c65      	ldr	r4, [pc, #404]	; (1000e6f4 <ble_device_init+0x25c>)
1000e560:	239b      	movs	r3, #155	; 0x9b
1000e562:	009b      	lsls	r3, r3, #2
1000e564:	4698      	mov	r8, r3
1000e566:	44a0      	add	r8, r4
	}
        
    /* Set the BLE Device connection state */
    for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
    {
        memset(&ble_dev_info[idx], 0, sizeof(ble_connected_dev_info_t));
1000e568:	4f50      	ldr	r7, [pc, #320]	; (1000e6ac <ble_device_init+0x214>)
		ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
		/* Set Invalid to Bonding information */
		ble_dev_info[idx].bond_info.status = AT_BLE_GAP_INVALID_PARAM;
1000e56a:	2640      	movs	r6, #64	; 0x40
	}
        
    /* Set the BLE Device connection state */
    for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
    {
        memset(&ble_dev_info[idx], 0, sizeof(ble_connected_dev_info_t));
1000e56c:	227c      	movs	r2, #124	; 0x7c
1000e56e:	2100      	movs	r1, #0
1000e570:	0020      	movs	r0, r4
1000e572:	47b8      	blx	r7
		ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
1000e574:	0023      	movs	r3, r4
1000e576:	335e      	adds	r3, #94	; 0x5e
1000e578:	2200      	movs	r2, #0
1000e57a:	701a      	strb	r2, [r3, #0]
		/* Set Invalid to Bonding information */
		ble_dev_info[idx].bond_info.status = AT_BLE_GAP_INVALID_PARAM;
1000e57c:	7626      	strb	r6, [r4, #24]
1000e57e:	347c      	adds	r4, #124	; 0x7c
	{
		ble_mgr_custom_event_cb[idx] = NULL;
	}
        
    /* Set the BLE Device connection state */
    for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000e580:	45a0      	cmp	r8, r4
1000e582:	d1f3      	bne.n	1000e56c <ble_device_init+0xd4>
		ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
		/* Set Invalid to Bonding information */
		ble_dev_info[idx].bond_info.status = AT_BLE_GAP_INVALID_PARAM;
    }
	/* Need to reset the count to 0 for storing it only in SRAM */
	ble_device_count = 0; 
1000e584:	4b5c      	ldr	r3, [pc, #368]	; (1000e6f8 <ble_device_init+0x260>)
1000e586:	701a      	strb	r2, [r3, #0]
	
	
#if defined ATT_DB_MEMORY
	pf_cfg.memPool.memSize = BLE_ATT_DB_MEMORY_SIZE;
1000e588:	4c52      	ldr	r4, [pc, #328]	; (1000e6d4 <ble_device_init+0x23c>)
1000e58a:	4b4a      	ldr	r3, [pc, #296]	; (1000e6b4 <ble_device_init+0x21c>)
1000e58c:	6063      	str	r3, [r4, #4]
	pf_cfg.memPool.memStartAdd = (uint8_t *)att_db_data;
1000e58e:	4b4a      	ldr	r3, [pc, #296]	; (1000e6b8 <ble_device_init+0x220>)
1000e590:	6023      	str	r3, [r4, #0]

/* Initialize the BLE */
static void ble_init(at_ble_init_config_t * args)
{
	/* Initialize the platform */
	DBG_LOG("[ble_init]\t\t\tInitializing SAMB11");
1000e592:	485a      	ldr	r0, [pc, #360]	; (1000e6fc <ble_device_init+0x264>)
1000e594:	4b5a      	ldr	r3, [pc, #360]	; (1000e700 <ble_device_init+0x268>)
1000e596:	4798      	blx	r3
1000e598:	485a      	ldr	r0, [pc, #360]	; (1000e704 <ble_device_init+0x26c>)
1000e59a:	4b5b      	ldr	r3, [pc, #364]	; (1000e708 <ble_device_init+0x270>)
1000e59c:	4798      	blx	r3
	
	/* Init BLE device */
	if(at_ble_init(args) != AT_BLE_SUCCESS)
1000e59e:	0020      	movs	r0, r4
1000e5a0:	4b5a      	ldr	r3, [pc, #360]	; (1000e70c <ble_device_init+0x274>)
1000e5a2:	4798      	blx	r3
1000e5a4:	2800      	cmp	r0, #0
1000e5a6:	d00b      	beq.n	1000e5c0 <ble_device_init+0x128>
	{
		DBG_LOG("[ble_init]\t\tSAMB11 Initialization failed");
1000e5a8:	4e54      	ldr	r6, [pc, #336]	; (1000e6fc <ble_device_init+0x264>)
1000e5aa:	0030      	movs	r0, r6
1000e5ac:	4d54      	ldr	r5, [pc, #336]	; (1000e700 <ble_device_init+0x268>)
1000e5ae:	47a8      	blx	r5
1000e5b0:	4857      	ldr	r0, [pc, #348]	; (1000e710 <ble_device_init+0x278>)
1000e5b2:	4c55      	ldr	r4, [pc, #340]	; (1000e708 <ble_device_init+0x270>)
1000e5b4:	47a0      	blx	r4
		DBG_LOG("[ble_init]\t\tPlease check the power and connection / hardware connector");	
1000e5b6:	0030      	movs	r0, r6
1000e5b8:	47a8      	blx	r5
1000e5ba:	4856      	ldr	r0, [pc, #344]	; (1000e714 <ble_device_init+0x27c>)
1000e5bc:	47a0      	blx	r4
1000e5be:	e7fe      	b.n	1000e5be <ble_device_init+0x126>
#endif
	
	ble_init(&pf_cfg);

	/* Register it in first index of callback handler */
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK, 
1000e5c0:	4a55      	ldr	r2, [pc, #340]	; (1000e718 <ble_device_init+0x280>)
1000e5c2:	2100      	movs	r1, #0
1000e5c4:	2000      	movs	r0, #0
1000e5c6:	4c55      	ldr	r4, [pc, #340]	; (1000e71c <ble_device_init+0x284>)
1000e5c8:	47a0      	blx	r4
									BLE_GAP_EVENT_TYPE, 
									ble_mgr_gap_handle);
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK,
1000e5ca:	4a55      	ldr	r2, [pc, #340]	; (1000e720 <ble_device_init+0x288>)
1000e5cc:	2102      	movs	r1, #2
1000e5ce:	2000      	movs	r0, #0
1000e5d0:	47a0      	blx	r4
{
	if ((name == NULL) || (name_len < 1))
	{
		return AT_BLE_INVALID_PARAM;
	}
	return at_ble_device_name_set(name, name_len);
1000e5d2:	2109      	movs	r1, #9
1000e5d4:	4853      	ldr	r0, [pc, #332]	; (1000e724 <ble_device_init+0x28c>)
1000e5d6:	4b54      	ldr	r3, [pc, #336]	; (1000e728 <ble_device_init+0x290>)
1000e5d8:	4798      	blx	r3
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK,
									BLE_GATT_SERVER_EVENT_TYPE,
									ble_mgr_gatt_server_handle);
									
	dev_name = (char *)BLE_DEVICE_NAME;
	if (ble_set_device_name((uint8_t *)dev_name, strlen(dev_name)) != AT_BLE_SUCCESS)
1000e5da:	2800      	cmp	r0, #0
1000e5dc:	d005      	beq.n	1000e5ea <ble_device_init+0x152>
	{
		DBG_LOG("Device name set failed");
1000e5de:	4847      	ldr	r0, [pc, #284]	; (1000e6fc <ble_device_init+0x264>)
1000e5e0:	4b47      	ldr	r3, [pc, #284]	; (1000e700 <ble_device_init+0x268>)
1000e5e2:	4798      	blx	r3
1000e5e4:	4851      	ldr	r0, [pc, #324]	; (1000e72c <ble_device_init+0x294>)
1000e5e6:	4b48      	ldr	r3, [pc, #288]	; (1000e708 <ble_device_init+0x270>)
1000e5e8:	4798      	blx	r3

/* Set BLE Address and device configuration, If address is NULL then it will use BD public address */
static void ble_set_dev_config(at_ble_addr_t *addr)
{
	at_ble_dev_config_t stDevConfig;
	at_ble_addr_t address = {AT_BLE_ADDRESS_PUBLIC, {0xAB, 0xCD, 0xEF, 0xAB, 0xCD, 0xEF}};
1000e5ea:	2207      	movs	r2, #7
1000e5ec:	4950      	ldr	r1, [pc, #320]	; (1000e730 <ble_device_init+0x298>)
1000e5ee:	3108      	adds	r1, #8
1000e5f0:	a804      	add	r0, sp, #16
1000e5f2:	4b50      	ldr	r3, [pc, #320]	; (1000e734 <ble_device_init+0x29c>)
1000e5f4:	4798      	blx	r3
	memset(&stDevConfig, 0, sizeof(at_ble_dev_config_t));
1000e5f6:	2226      	movs	r2, #38	; 0x26
1000e5f8:	2100      	movs	r1, #0
1000e5fa:	a806      	add	r0, sp, #24
1000e5fc:	4b2b      	ldr	r3, [pc, #172]	; (1000e6ac <ble_device_init+0x214>)
1000e5fe:	4798      	blx	r3
	
	if (addr == NULL)
1000e600:	2d00      	cmp	r5, #0
1000e602:	d10c      	bne.n	1000e61e <ble_device_init+0x186>
	{		
		/* get BD address from BLE device */
		if(at_ble_addr_get(&address) != AT_BLE_SUCCESS)
1000e604:	a804      	add	r0, sp, #16
1000e606:	4b4c      	ldr	r3, [pc, #304]	; (1000e738 <ble_device_init+0x2a0>)
1000e608:	4798      	blx	r3
		{
			DBG_LOG("[ble_set_dev_config]\t\tBD address get failed");
		}
		
		/* Copy the BD address into address pointer */
		addr = &address;
1000e60a:	ad04      	add	r5, sp, #16
	memset(&stDevConfig, 0, sizeof(at_ble_dev_config_t));
	
	if (addr == NULL)
	{		
		/* get BD address from BLE device */
		if(at_ble_addr_get(&address) != AT_BLE_SUCCESS)
1000e60c:	2800      	cmp	r0, #0
1000e60e:	d006      	beq.n	1000e61e <ble_device_init+0x186>
		{
			DBG_LOG("[ble_set_dev_config]\t\tBD address get failed");
1000e610:	483a      	ldr	r0, [pc, #232]	; (1000e6fc <ble_device_init+0x264>)
1000e612:	4b3b      	ldr	r3, [pc, #236]	; (1000e700 <ble_device_init+0x268>)
1000e614:	4798      	blx	r3
1000e616:	4849      	ldr	r0, [pc, #292]	; (1000e73c <ble_device_init+0x2a4>)
1000e618:	4b3b      	ldr	r3, [pc, #236]	; (1000e708 <ble_device_init+0x270>)
1000e61a:	4798      	blx	r3
		}
		
		/* Copy the BD address into address pointer */
		addr = &address;
1000e61c:	ad04      	add	r5, sp, #16
	}
	
	DBG_LOG("[ble_set_dev_config]\t\tBD Address:0x%02X%02X%02X%02X%02X%02X, Address Type:%d",
1000e61e:	4837      	ldr	r0, [pc, #220]	; (1000e6fc <ble_device_init+0x264>)
1000e620:	4b37      	ldr	r3, [pc, #220]	; (1000e700 <ble_device_init+0x268>)
1000e622:	4798      	blx	r3
1000e624:	792b      	ldrb	r3, [r5, #4]
1000e626:	796a      	ldrb	r2, [r5, #5]
1000e628:	79a9      	ldrb	r1, [r5, #6]
1000e62a:	7828      	ldrb	r0, [r5, #0]
1000e62c:	9003      	str	r0, [sp, #12]
1000e62e:	7868      	ldrb	r0, [r5, #1]
1000e630:	9002      	str	r0, [sp, #8]
1000e632:	78a8      	ldrb	r0, [r5, #2]
1000e634:	9001      	str	r0, [sp, #4]
1000e636:	78e8      	ldrb	r0, [r5, #3]
1000e638:	9000      	str	r0, [sp, #0]
1000e63a:	4841      	ldr	r0, [pc, #260]	; (1000e740 <ble_device_init+0x2a8>)
1000e63c:	4c32      	ldr	r4, [pc, #200]	; (1000e708 <ble_device_init+0x270>)
1000e63e:	47a0      	blx	r4
	addr->addr[1],
	addr->addr[0], addr->type);
	
	/* Set device configuration */
	/* Device role */
	stDevConfig.role = (at_ble_dev_role_t)BLE_DEVICE_ROLE;
1000e640:	ac06      	add	r4, sp, #24
1000e642:	230a      	movs	r3, #10
1000e644:	7023      	strb	r3, [r4, #0]
	/* device renew duration */
	stDevConfig.renew_dur = AT_RENEW_DUR_VAL_MIN;
1000e646:	4b3f      	ldr	r3, [pc, #252]	; (1000e744 <ble_device_init+0x2ac>)
1000e648:	8063      	strh	r3, [r4, #2]
	/* device address type */
	memcpy((uint8_t *)&stDevConfig.address, (uint8_t *)addr, sizeof(at_ble_addr_t));
1000e64a:	2207      	movs	r2, #7
1000e64c:	0029      	movs	r1, r5
1000e64e:	a807      	add	r0, sp, #28
1000e650:	4b38      	ldr	r3, [pc, #224]	; (1000e734 <ble_device_init+0x29c>)
1000e652:	4798      	blx	r3
	/* Attributes */
	stDevConfig.att_cfg.b2NamePerm = AT_BLE_WRITE_DISABLE;
1000e654:	2300      	movs	r3, #0
1000e656:	76e3      	strb	r3, [r4, #27]
	stDevConfig.att_cfg.b2AppearancePerm = AT_BLE_WRITE_DISABLE;
1000e658:	7723      	strb	r3, [r4, #28]
	stDevConfig.att_cfg.b1EnableSpcs = 0;
1000e65a:	7763      	strb	r3, [r4, #29]
	stDevConfig.att_cfg.b1EnableServiceChanged = 0;
1000e65c:	77a3      	strb	r3, [r4, #30]
	stDevConfig.att_cfg.b2Rfu = AT_BLE_WRITE_DISABLE;
1000e65e:	77e3      	strb	r3, [r4, #31]
	/* Handles */
	stDevConfig.gap_start_hdl = AT_BLE_AUTO_ALLOC_HANDLE;
1000e660:	8423      	strh	r3, [r4, #32]
	stDevConfig.gatt_start_hdl = AT_BLE_AUTO_ALLOC_HANDLE;
1000e662:	8463      	strh	r3, [r4, #34]	; 0x22
	/* MTU */
	stDevConfig.max_mtu = AT_MTU_VAL_RECOMMENDED;
1000e664:	2380      	movs	r3, #128	; 0x80
1000e666:	009b      	lsls	r3, r3, #2
1000e668:	84a3      	strh	r3, [r4, #36]	; 0x24
	
	if(at_ble_set_dev_config(&stDevConfig) != AT_BLE_SUCCESS)
1000e66a:	0020      	movs	r0, r4
1000e66c:	4b36      	ldr	r3, [pc, #216]	; (1000e748 <ble_device_init+0x2b0>)
1000e66e:	4798      	blx	r3
1000e670:	2800      	cmp	r0, #0
1000e672:	d005      	beq.n	1000e680 <ble_device_init+0x1e8>
	{
		DBG_LOG("[ble_set_dev_config]\tSet BLE Device configuration failed");
1000e674:	4821      	ldr	r0, [pc, #132]	; (1000e6fc <ble_device_init+0x264>)
1000e676:	4b22      	ldr	r3, [pc, #136]	; (1000e700 <ble_device_init+0x268>)
1000e678:	4798      	blx	r3
1000e67a:	4834      	ldr	r0, [pc, #208]	; (1000e74c <ble_device_init+0x2b4>)
1000e67c:	4b22      	ldr	r3, [pc, #136]	; (1000e708 <ble_device_init+0x270>)
1000e67e:	4798      	blx	r3
	}
	
	if (at_ble_addr_set(addr) != AT_BLE_SUCCESS)
1000e680:	0028      	movs	r0, r5
1000e682:	4b33      	ldr	r3, [pc, #204]	; (1000e750 <ble_device_init+0x2b8>)
1000e684:	4798      	blx	r3
1000e686:	2800      	cmp	r0, #0
1000e688:	d005      	beq.n	1000e696 <ble_device_init+0x1fe>
	{
		DBG_LOG("[ble_set_dev_config]\tSet BLE Device Address failed");
1000e68a:	481c      	ldr	r0, [pc, #112]	; (1000e6fc <ble_device_init+0x264>)
1000e68c:	4b1c      	ldr	r3, [pc, #112]	; (1000e700 <ble_device_init+0x268>)
1000e68e:	4798      	blx	r3
1000e690:	4830      	ldr	r0, [pc, #192]	; (1000e754 <ble_device_init+0x2bc>)
1000e692:	4b1d      	ldr	r3, [pc, #116]	; (1000e708 <ble_device_init+0x270>)
1000e694:	4798      	blx	r3
	{
		DBG_LOG("Device name set failed");
	}
	
	ble_set_dev_config(addr);	
}
1000e696:	b011      	add	sp, #68	; 0x44
1000e698:	bc3c      	pop	{r2, r3, r4, r5}
1000e69a:	4690      	mov	r8, r2
1000e69c:	4699      	mov	r9, r3
1000e69e:	46a2      	mov	sl, r4
1000e6a0:	46ab      	mov	fp, r5
1000e6a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000e6a4:	10018fc8 	.word	0x10018fc8
1000e6a8:	10018fd0 	.word	0x10018fd0
1000e6ac:	1001522d 	.word	0x1001522d
1000e6b0:	1001a70c 	.word	0x1001a70c
1000e6b4:	000004e2 	.word	0x000004e2
1000e6b8:	10018ae8 	.word	0x10018ae8
1000e6bc:	10018fcc 	.word	0x10018fcc
1000e6c0:	1001a744 	.word	0x1001a744
1000e6c4:	1001a73c 	.word	0x1001a73c
1000e6c8:	1001aa78 	.word	0x1001aa78
1000e6cc:	100186e8 	.word	0x100186e8
1000e6d0:	10018fd8 	.word	0x10018fd8
1000e6d4:	1001a720 	.word	0x1001a720
1000e6d8:	1001a6e4 	.word	0x1001a6e4
1000e6dc:	1001a6f8 	.word	0x1001a6f8
1000e6e0:	1001a44c 	.word	0x1001a44c
1000e6e4:	1001a740 	.word	0x1001a740
1000e6e8:	1001a448 	.word	0x1001a448
1000e6ec:	1001a6d0 	.word	0x1001a6d0
1000e6f0:	1001ac84 	.word	0x1001ac84
1000e6f4:	1001a460 	.word	0x1001a460
1000e6f8:	1001a6cc 	.word	0x1001a6cc
1000e6fc:	1001663c 	.word	0x1001663c
1000e700:	10015495 	.word	0x10015495
1000e704:	10017e30 	.word	0x10017e30
1000e708:	10015375 	.word	0x10015375
1000e70c:	10010669 	.word	0x10010669
1000e710:	10017e54 	.word	0x10017e54
1000e714:	10017e80 	.word	0x10017e80
1000e718:	10018230 	.word	0x10018230
1000e71c:	1000e3c9 	.word	0x1000e3c9
1000e720:	100177e4 	.word	0x100177e4
1000e724:	10017ec8 	.word	0x10017ec8
1000e728:	10010581 	.word	0x10010581
1000e72c:	10017ed4 	.word	0x10017ed4
1000e730:	100177d4 	.word	0x100177d4
1000e734:	1001521b 	.word	0x1001521b
1000e738:	100105b5 	.word	0x100105b5
1000e73c:	10017eec 	.word	0x10017eec
1000e740:	10017f18 	.word	0x10017f18
1000e744:	00003a98 	.word	0x00003a98
1000e748:	100105d9 	.word	0x100105d9
1000e74c:	10017f68 	.word	0x10017f68
1000e750:	1001081d 	.word	0x1001081d
1000e754:	10017fa4 	.word	0x10017fa4

1000e758 <ble_send_slave_sec_request>:
	return AT_BLE_FAILURE;
}

/** @brief function to send slave security request */
at_ble_status_t ble_send_slave_sec_request(at_ble_handle_t conn_handle)
{
1000e758:	b510      	push	{r4, lr}
	#if BLE_PAIR_ENABLE
		if (at_ble_send_slave_sec_request(conn_handle, BLE_MITM_REQ, BLE_BOND_REQ) == AT_BLE_SUCCESS)
1000e75a:	2200      	movs	r2, #0
1000e75c:	2100      	movs	r1, #0
1000e75e:	4b0a      	ldr	r3, [pc, #40]	; (1000e788 <ble_send_slave_sec_request+0x30>)
1000e760:	4798      	blx	r3
1000e762:	1e04      	subs	r4, r0, #0
1000e764:	d106      	bne.n	1000e774 <ble_send_slave_sec_request+0x1c>
		{
			DBG_LOG_DEV("Slave security request successful");
1000e766:	4809      	ldr	r0, [pc, #36]	; (1000e78c <ble_send_slave_sec_request+0x34>)
1000e768:	4b09      	ldr	r3, [pc, #36]	; (1000e790 <ble_send_slave_sec_request+0x38>)
1000e76a:	4798      	blx	r3
1000e76c:	4809      	ldr	r0, [pc, #36]	; (1000e794 <ble_send_slave_sec_request+0x3c>)
1000e76e:	4b0a      	ldr	r3, [pc, #40]	; (1000e798 <ble_send_slave_sec_request+0x40>)
1000e770:	4798      	blx	r3
			return AT_BLE_SUCCESS;
1000e772:	e006      	b.n	1000e782 <ble_send_slave_sec_request+0x2a>
		}
		else
		{
			DBG_LOG("Slave security request failed");
1000e774:	4805      	ldr	r0, [pc, #20]	; (1000e78c <ble_send_slave_sec_request+0x34>)
1000e776:	4b06      	ldr	r3, [pc, #24]	; (1000e790 <ble_send_slave_sec_request+0x38>)
1000e778:	4798      	blx	r3
1000e77a:	4808      	ldr	r0, [pc, #32]	; (1000e79c <ble_send_slave_sec_request+0x44>)
1000e77c:	4b06      	ldr	r3, [pc, #24]	; (1000e798 <ble_send_slave_sec_request+0x40>)
1000e77e:	4798      	blx	r3
		}
	#endif
	return AT_BLE_FAILURE;
1000e780:	24e2      	movs	r4, #226	; 0xe2
}
1000e782:	0020      	movs	r0, r4
1000e784:	bd10      	pop	{r4, pc}
1000e786:	46c0      	nop			; (mov r8, r8)
1000e788:	10011601 	.word	0x10011601
1000e78c:	1001663c 	.word	0x1001663c
1000e790:	10015495 	.word	0x10015495
1000e794:	10017ff4 	.word	0x10017ff4
1000e798:	10015375 	.word	0x10015375
1000e79c:	10018018 	.word	0x10018018

1000e7a0 <ble_connected_state_handler>:
	return status;
}

/** @brief function to handle connected event received from stack */
at_ble_status_t ble_connected_state_handler(void *params)
{
1000e7a0:	b5f0      	push	{r4, r5, r6, r7, lr}
1000e7a2:	465f      	mov	r7, fp
1000e7a4:	464e      	mov	r6, r9
1000e7a6:	4645      	mov	r5, r8
1000e7a8:	b4e0      	push	{r5, r6, r7}
1000e7aa:	b09a      	sub	sp, #104	; 0x68
1000e7ac:	0005      	movs	r5, r0
	at_ble_connected_t *conn_params;
	uint8_t idx = 0;
	conn_params = (at_ble_connected_t *)params;
	bool peripheral_device_added = false;
	
	if (conn_params->conn_status == AT_BLE_SUCCESS)
1000e7ae:	7a86      	ldrb	r6, [r0, #10]
1000e7b0:	2e00      	cmp	r6, #0
1000e7b2:	d000      	beq.n	1000e7b6 <ble_connected_state_handler+0x16>
1000e7b4:	e0cc      	b.n	1000e950 <ble_connected_state_handler+0x1b0>
	{
		DBG_LOG("Connected to peer device with address 0x%02x%02x%02x%02x%02x%02x",
1000e7b6:	4878      	ldr	r0, [pc, #480]	; (1000e998 <ble_connected_state_handler+0x1f8>)
1000e7b8:	4f78      	ldr	r7, [pc, #480]	; (1000e99c <ble_connected_state_handler+0x1fc>)
1000e7ba:	47b8      	blx	r7
1000e7bc:	792b      	ldrb	r3, [r5, #4]
1000e7be:	796a      	ldrb	r2, [r5, #5]
1000e7c0:	79a9      	ldrb	r1, [r5, #6]
1000e7c2:	7868      	ldrb	r0, [r5, #1]
1000e7c4:	9002      	str	r0, [sp, #8]
1000e7c6:	78a8      	ldrb	r0, [r5, #2]
1000e7c8:	9001      	str	r0, [sp, #4]
1000e7ca:	78e8      	ldrb	r0, [r5, #3]
1000e7cc:	9000      	str	r0, [sp, #0]
1000e7ce:	4874      	ldr	r0, [pc, #464]	; (1000e9a0 <ble_connected_state_handler+0x200>)
1000e7d0:	4c74      	ldr	r4, [pc, #464]	; (1000e9a4 <ble_connected_state_handler+0x204>)
1000e7d2:	47a0      	blx	r4
		conn_params->peer_addr.addr[3],
		conn_params->peer_addr.addr[2],
		conn_params->peer_addr.addr[1],
		conn_params->peer_addr.addr[0]);
		
		DBG_LOG("Connection Handle %d", conn_params->handle);
1000e7d4:	4870      	ldr	r0, [pc, #448]	; (1000e998 <ble_connected_state_handler+0x1f8>)
1000e7d6:	47b8      	blx	r7
1000e7d8:	8929      	ldrh	r1, [r5, #8]
1000e7da:	4873      	ldr	r0, [pc, #460]	; (1000e9a8 <ble_connected_state_handler+0x208>)
1000e7dc:	47a0      	blx	r4
		
		memcpy((uint8_t *)&connected_state_info, (uint8_t *)conn_params, sizeof(at_ble_connected_t));	
1000e7de:	2212      	movs	r2, #18
1000e7e0:	0029      	movs	r1, r5
1000e7e2:	4872      	ldr	r0, [pc, #456]	; (1000e9ac <ble_connected_state_handler+0x20c>)
1000e7e4:	4b72      	ldr	r3, [pc, #456]	; (1000e9b0 <ble_connected_state_handler+0x210>)
1000e7e6:	4798      	blx	r3
		if(memcmp((uint8_t *)&ble_peripheral_dev_address, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000e7e8:	9504      	str	r5, [sp, #16]
1000e7ea:	2207      	movs	r2, #7
1000e7ec:	0029      	movs	r1, r5
1000e7ee:	4871      	ldr	r0, [pc, #452]	; (1000e9b4 <ble_connected_state_handler+0x214>)
1000e7f0:	4b71      	ldr	r3, [pc, #452]	; (1000e9b8 <ble_connected_state_handler+0x218>)
1000e7f2:	4798      	blx	r3
1000e7f4:	2800      	cmp	r0, #0
1000e7f6:	d100      	bne.n	1000e7fa <ble_connected_state_handler+0x5a>
1000e7f8:	e0b3      	b.n	1000e962 <ble_connected_state_handler+0x1c2>
		{
			/* Peripheral Device */
			if (conn_params->peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE) 
1000e7fa:	782b      	ldrb	r3, [r5, #0]
1000e7fc:	2b02      	cmp	r3, #2
1000e7fe:	d000      	beq.n	1000e802 <ble_connected_state_handler+0x62>
1000e800:	e0af      	b.n	1000e962 <ble_connected_state_handler+0x1c2>
			{
				uint8_t idx1, idx2;
				uint16_t key_len = 0;
				uint8_t nb_keys = BLE_MAX_DEVICE_CONNECTED;
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
1000e802:	2250      	movs	r2, #80	; 0x50
1000e804:	2100      	movs	r1, #0
1000e806:	a806      	add	r0, sp, #24
1000e808:	4b6c      	ldr	r3, [pc, #432]	; (1000e9bc <ble_connected_state_handler+0x21c>)
1000e80a:	4798      	blx	r3
1000e80c:	4f6c      	ldr	r7, [pc, #432]	; (1000e9c0 <ble_connected_state_handler+0x220>)
		{
			/* Peripheral Device */
			if (conn_params->peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE) 
			{
				uint8_t idx1, idx2;
				uint16_t key_len = 0;
1000e80e:	2300      	movs	r3, #0
1000e810:	e00b      	b.n	1000e82a <ble_connected_state_handler+0x8a>
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
				for (idx1 = 0; idx1 < BLE_MAX_DEVICE_CONNECTED; idx1++)
				{
					for (idx2 = 0; idx2 < AT_BLE_MAX_KEY_LEN; idx2++)
					{
						irk_key[key_len++] = ble_dev_info[idx1].bond_info.peer_irk.key[idx2];
1000e812:	1c59      	adds	r1, r3, #1
1000e814:	7814      	ldrb	r4, [r2, #0]
1000e816:	a806      	add	r0, sp, #24
1000e818:	54c4      	strb	r4, [r0, r3]
1000e81a:	3201      	adds	r2, #1
1000e81c:	b28b      	uxth	r3, r1
				uint16_t key_len = 0;
				uint8_t nb_keys = BLE_MAX_DEVICE_CONNECTED;
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
				for (idx1 = 0; idx1 < BLE_MAX_DEVICE_CONNECTED; idx1++)
				{
					for (idx2 = 0; idx2 < AT_BLE_MAX_KEY_LEN; idx2++)
1000e81e:	42b3      	cmp	r3, r6
1000e820:	d1f7      	bne.n	1000e812 <ble_connected_state_handler+0x72>
1000e822:	377c      	adds	r7, #124	; 0x7c
					{
						irk_key[key_len++] = ble_dev_info[idx1].bond_info.peer_irk.key[idx2];
1000e824:	1e33      	subs	r3, r6, #0
			{
				uint8_t idx1, idx2;
				uint16_t key_len = 0;
				uint8_t nb_keys = BLE_MAX_DEVICE_CONNECTED;
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
				for (idx1 = 0; idx1 < BLE_MAX_DEVICE_CONNECTED; idx1++)
1000e826:	2b50      	cmp	r3, #80	; 0x50
1000e828:	d004      	beq.n	1000e834 <ble_connected_state_handler+0x94>
1000e82a:	001e      	movs	r6, r3
1000e82c:	3610      	adds	r6, #16
1000e82e:	b2b6      	uxth	r6, r6
	return status;
}

/** @brief function to handle connected event received from stack */
at_ble_status_t ble_connected_state_handler(void *params)
{
1000e830:	003a      	movs	r2, r7
1000e832:	e7ee      	b.n	1000e812 <ble_connected_state_handler+0x72>
					}
					
				}
				if (nb_keys)
				{
					if(at_ble_random_address_resolve(BLE_MAX_DEVICE_CONNECTED, &conn_params->peer_addr, irk_key) == AT_BLE_SUCCESS)
1000e834:	aa06      	add	r2, sp, #24
1000e836:	0029      	movs	r1, r5
1000e838:	2005      	movs	r0, #5
1000e83a:	4b62      	ldr	r3, [pc, #392]	; (1000e9c4 <ble_connected_state_handler+0x224>)
1000e83c:	4798      	blx	r3
1000e83e:	1e06      	subs	r6, r0, #0
1000e840:	d106      	bne.n	1000e850 <ble_connected_state_handler+0xb0>
					{
						DBG_LOG_DEV("Resolving Random address success**");
1000e842:	4855      	ldr	r0, [pc, #340]	; (1000e998 <ble_connected_state_handler+0x1f8>)
1000e844:	4b55      	ldr	r3, [pc, #340]	; (1000e99c <ble_connected_state_handler+0x1fc>)
1000e846:	4798      	blx	r3
1000e848:	485f      	ldr	r0, [pc, #380]	; (1000e9c8 <ble_connected_state_handler+0x228>)
1000e84a:	4b56      	ldr	r3, [pc, #344]	; (1000e9a4 <ble_connected_state_handler+0x204>)
1000e84c:	4798      	blx	r3
						return AT_BLE_SUCCESS;
1000e84e:	e09c      	b.n	1000e98a <ble_connected_state_handler+0x1ea>
					}
					else
					{
						DBG_LOG("Resolving Random address failed**");
1000e850:	4851      	ldr	r0, [pc, #324]	; (1000e998 <ble_connected_state_handler+0x1f8>)
1000e852:	4b52      	ldr	r3, [pc, #328]	; (1000e99c <ble_connected_state_handler+0x1fc>)
1000e854:	4798      	blx	r3
1000e856:	485d      	ldr	r0, [pc, #372]	; (1000e9cc <ble_connected_state_handler+0x22c>)
1000e858:	4b52      	ldr	r3, [pc, #328]	; (1000e9a4 <ble_connected_state_handler+0x204>)
1000e85a:	4798      	blx	r3
						return AT_BLE_FAILURE;
1000e85c:	26e2      	movs	r6, #226	; 0xe2
1000e85e:	e094      	b.n	1000e98a <ble_connected_state_handler+0x1ea>
1000e860:	b2e7      	uxtb	r7, r4
		if (ble_device_count < BLE_MAX_DEVICE_CONNECTED)
		{
			bool conn_exists = false;
			for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
			{
				if(!memcmp((uint8_t *)&ble_dev_info[idx].conn_info.peer_addr, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000e862:	9405      	str	r4, [sp, #20]
1000e864:	2207      	movs	r2, #7
1000e866:	9904      	ldr	r1, [sp, #16]
1000e868:	4648      	mov	r0, r9
1000e86a:	47d8      	blx	fp
1000e86c:	2800      	cmp	r0, #0
1000e86e:	d109      	bne.n	1000e884 <ble_connected_state_handler+0xe4>
				{
					ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000e870:	9a05      	ldr	r2, [sp, #20]
1000e872:	0153      	lsls	r3, r2, #5
1000e874:	1a9b      	subs	r3, r3, r2
1000e876:	009a      	lsls	r2, r3, #2
1000e878:	4b55      	ldr	r3, [pc, #340]	; (1000e9d0 <ble_connected_state_handler+0x230>)
1000e87a:	189b      	adds	r3, r3, r2
1000e87c:	335e      	adds	r3, #94	; 0x5e
1000e87e:	2202      	movs	r2, #2
1000e880:	701a      	strb	r2, [r3, #0]
1000e882:	e02b      	b.n	1000e8dc <ble_connected_state_handler+0x13c>
1000e884:	3401      	adds	r4, #1
1000e886:	237c      	movs	r3, #124	; 0x7c
1000e888:	469c      	mov	ip, r3
1000e88a:	44e1      	add	r9, ip
		}
			
		if (ble_device_count < BLE_MAX_DEVICE_CONNECTED)
		{
			bool conn_exists = false;
			for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000e88c:	2c05      	cmp	r4, #5
1000e88e:	d1e7      	bne.n	1000e860 <ble_connected_state_handler+0xc0>
1000e890:	e072      	b.n	1000e978 <ble_connected_state_handler+0x1d8>
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
				{
					if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000e892:	001c      	movs	r4, r3
1000e894:	7811      	ldrb	r1, [r2, #0]
1000e896:	2900      	cmp	r1, #0
1000e898:	d11a      	bne.n	1000e8d0 <ble_connected_state_handler+0x130>
1000e89a:	e001      	b.n	1000e8a0 <ble_connected_state_handler+0x100>
1000e89c:	2400      	movs	r4, #0
1000e89e:	2700      	movs	r7, #0
					{
						/* @Todo Need to Handle Random Address */
						memcpy(&ble_dev_info[idx].conn_info, (uint8_t *)conn_params, sizeof(at_ble_connected_t));
1000e8a0:	0163      	lsls	r3, r4, #5
1000e8a2:	4699      	mov	r9, r3
1000e8a4:	1b18      	subs	r0, r3, r4
1000e8a6:	0080      	lsls	r0, r0, #2
1000e8a8:	4b49      	ldr	r3, [pc, #292]	; (1000e9d0 <ble_connected_state_handler+0x230>)
1000e8aa:	4698      	mov	r8, r3
1000e8ac:	4440      	add	r0, r8
1000e8ae:	2212      	movs	r2, #18
1000e8b0:	0029      	movs	r1, r5
1000e8b2:	4b3f      	ldr	r3, [pc, #252]	; (1000e9b0 <ble_connected_state_handler+0x210>)
1000e8b4:	4798      	blx	r3
						ble_device_count++;
1000e8b6:	4a47      	ldr	r2, [pc, #284]	; (1000e9d4 <ble_connected_state_handler+0x234>)
1000e8b8:	7813      	ldrb	r3, [r2, #0]
1000e8ba:	3301      	adds	r3, #1
1000e8bc:	b2db      	uxtb	r3, r3
1000e8be:	7013      	strb	r3, [r2, #0]
						ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000e8c0:	464b      	mov	r3, r9
1000e8c2:	1b1b      	subs	r3, r3, r4
1000e8c4:	009b      	lsls	r3, r3, #2
1000e8c6:	4443      	add	r3, r8
1000e8c8:	335e      	adds	r3, #94	; 0x5e
1000e8ca:	2202      	movs	r2, #2
1000e8cc:	701a      	strb	r2, [r3, #0]
						break;
1000e8ce:	e005      	b.n	1000e8dc <ble_connected_state_handler+0x13c>
				}
			}
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000e8d0:	1c79      	adds	r1, r7, #1
1000e8d2:	b2cf      	uxtb	r7, r1
1000e8d4:	3301      	adds	r3, #1
1000e8d6:	327c      	adds	r2, #124	; 0x7c
1000e8d8:	2f05      	cmp	r7, #5
1000e8da:	d1da      	bne.n	1000e892 <ble_connected_state_handler+0xf2>
						break;
					}
				}
			}
			
			if(!memcmp((uint8_t *)&ble_peripheral_dev_address, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000e8dc:	2207      	movs	r2, #7
1000e8de:	0029      	movs	r1, r5
1000e8e0:	4834      	ldr	r0, [pc, #208]	; (1000e9b4 <ble_connected_state_handler+0x214>)
1000e8e2:	4b35      	ldr	r3, [pc, #212]	; (1000e9b8 <ble_connected_state_handler+0x218>)
1000e8e4:	4798      	blx	r3
1000e8e6:	2800      	cmp	r0, #0
1000e8e8:	d10c      	bne.n	1000e904 <ble_connected_state_handler+0x164>
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_CENTRAL;
1000e8ea:	017b      	lsls	r3, r7, #5
1000e8ec:	1bdb      	subs	r3, r3, r7
1000e8ee:	009b      	lsls	r3, r3, #2
1000e8f0:	4a37      	ldr	r2, [pc, #220]	; (1000e9d0 <ble_connected_state_handler+0x230>)
1000e8f2:	18d3      	adds	r3, r2, r3
1000e8f4:	2205      	movs	r2, #5
1000e8f6:	749a      	strb	r2, [r3, #18]
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
				peripheral_device_added = true;
			}
			/* Reset the ble_peripheral_dev_address to identify the initiator */
			memset((uint8_t *)&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
1000e8f8:	3202      	adds	r2, #2
1000e8fa:	2100      	movs	r1, #0
1000e8fc:	482d      	ldr	r0, [pc, #180]	; (1000e9b4 <ble_connected_state_handler+0x214>)
1000e8fe:	4b2f      	ldr	r3, [pc, #188]	; (1000e9bc <ble_connected_state_handler+0x21c>)
1000e900:	4798      	blx	r3
1000e902:	e042      	b.n	1000e98a <ble_connected_state_handler+0x1ea>
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_CENTRAL;
			}
			else
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
1000e904:	4b32      	ldr	r3, [pc, #200]	; (1000e9d0 <ble_connected_state_handler+0x230>)
1000e906:	4698      	mov	r8, r3
1000e908:	017c      	lsls	r4, r7, #5
1000e90a:	1be3      	subs	r3, r4, r7
1000e90c:	009b      	lsls	r3, r3, #2
1000e90e:	4443      	add	r3, r8
1000e910:	220a      	movs	r2, #10
1000e912:	749a      	strb	r2, [r3, #18]
				peripheral_device_added = true;
			}
			/* Reset the ble_peripheral_dev_address to identify the initiator */
			memset((uint8_t *)&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
1000e914:	3a03      	subs	r2, #3
1000e916:	2100      	movs	r1, #0
1000e918:	4826      	ldr	r0, [pc, #152]	; (1000e9b4 <ble_connected_state_handler+0x214>)
1000e91a:	4b28      	ldr	r3, [pc, #160]	; (1000e9bc <ble_connected_state_handler+0x21c>)
1000e91c:	4798      	blx	r3
			at_ble_disconnect(conn_params->handle, AT_BLE_TERMINATED_BY_USER);
		}		
		
#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
		
        if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
1000e91e:	1be4      	subs	r4, r4, r7
1000e920:	00a4      	lsls	r4, r4, #2
1000e922:	4444      	add	r4, r8
1000e924:	7ca3      	ldrb	r3, [r4, #18]
1000e926:	2b0a      	cmp	r3, #10
1000e928:	d12f      	bne.n	1000e98a <ble_connected_state_handler+0x1ea>
1000e92a:	e00d      	b.n	1000e948 <ble_connected_state_handler+0x1a8>
			memset((uint8_t *)&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
					
		}
		else
		{
			DBG_LOG("Max number of connection reached: %d ===>Disconnecting...", ble_device_count);
1000e92c:	481a      	ldr	r0, [pc, #104]	; (1000e998 <ble_connected_state_handler+0x1f8>)
1000e92e:	4b1b      	ldr	r3, [pc, #108]	; (1000e99c <ble_connected_state_handler+0x1fc>)
1000e930:	4798      	blx	r3
1000e932:	4b28      	ldr	r3, [pc, #160]	; (1000e9d4 <ble_connected_state_handler+0x234>)
1000e934:	7819      	ldrb	r1, [r3, #0]
1000e936:	b2c9      	uxtb	r1, r1
1000e938:	4827      	ldr	r0, [pc, #156]	; (1000e9d8 <ble_connected_state_handler+0x238>)
1000e93a:	4b1a      	ldr	r3, [pc, #104]	; (1000e9a4 <ble_connected_state_handler+0x204>)
1000e93c:	4798      	blx	r3
			at_ble_disconnect(conn_params->handle, AT_BLE_TERMINATED_BY_USER);
1000e93e:	8928      	ldrh	r0, [r5, #8]
1000e940:	2113      	movs	r1, #19
1000e942:	4b26      	ldr	r3, [pc, #152]	; (1000e9dc <ble_connected_state_handler+0x23c>)
1000e944:	4798      	blx	r3
1000e946:	e020      	b.n	1000e98a <ble_connected_state_handler+0x1ea>
		
#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
		
        if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
        {
	 		ble_send_slave_sec_request(conn_params->handle);
1000e948:	8928      	ldrh	r0, [r5, #8]
1000e94a:	4b25      	ldr	r3, [pc, #148]	; (1000e9e0 <ble_connected_state_handler+0x240>)
1000e94c:	4798      	blx	r3
1000e94e:	e01c      	b.n	1000e98a <ble_connected_state_handler+0x1ea>
        }
#endif
	} 
	else
	{
		DBG_LOG("Device Connection Failed - Status: %d", conn_params->conn_status);
1000e950:	4811      	ldr	r0, [pc, #68]	; (1000e998 <ble_connected_state_handler+0x1f8>)
1000e952:	4b12      	ldr	r3, [pc, #72]	; (1000e99c <ble_connected_state_handler+0x1fc>)
1000e954:	4798      	blx	r3
1000e956:	7aa9      	ldrb	r1, [r5, #10]
1000e958:	4822      	ldr	r0, [pc, #136]	; (1000e9e4 <ble_connected_state_handler+0x244>)
1000e95a:	4b12      	ldr	r3, [pc, #72]	; (1000e9a4 <ble_connected_state_handler+0x204>)
1000e95c:	4798      	blx	r3
	}
	ALL_UNUSED(peripheral_device_added);
	return AT_BLE_SUCCESS;
1000e95e:	2600      	movs	r6, #0
1000e960:	e013      	b.n	1000e98a <ble_connected_state_handler+0x1ea>
					DBG_LOG_DEV("New Connection");
				}				
			}
		}
			
		if (ble_device_count < BLE_MAX_DEVICE_CONNECTED)
1000e962:	4b1c      	ldr	r3, [pc, #112]	; (1000e9d4 <ble_connected_state_handler+0x234>)
1000e964:	781b      	ldrb	r3, [r3, #0]
1000e966:	b2db      	uxtb	r3, r3
1000e968:	2b04      	cmp	r3, #4
1000e96a:	d8df      	bhi.n	1000e92c <ble_connected_state_handler+0x18c>
1000e96c:	4b18      	ldr	r3, [pc, #96]	; (1000e9d0 <ble_connected_state_handler+0x230>)
1000e96e:	4699      	mov	r9, r3
1000e970:	2400      	movs	r4, #0
		{
			bool conn_exists = false;
			for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
			{
				if(!memcmp((uint8_t *)&ble_dev_info[idx].conn_info.peer_addr, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000e972:	4b11      	ldr	r3, [pc, #68]	; (1000e9b8 <ble_connected_state_handler+0x218>)
1000e974:	469b      	mov	fp, r3
1000e976:	e773      	b.n	1000e860 <ble_connected_state_handler+0xc0>
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
				{
					if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000e978:	235e      	movs	r3, #94	; 0x5e
1000e97a:	4a15      	ldr	r2, [pc, #84]	; (1000e9d0 <ble_connected_state_handler+0x230>)
1000e97c:	5cd3      	ldrb	r3, [r2, r3]
1000e97e:	2b00      	cmp	r3, #0
1000e980:	d08c      	beq.n	1000e89c <ble_connected_state_handler+0xfc>
1000e982:	4a19      	ldr	r2, [pc, #100]	; (1000e9e8 <ble_connected_state_handler+0x248>)
1000e984:	2301      	movs	r3, #1
				}
			}
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000e986:	2701      	movs	r7, #1
1000e988:	e783      	b.n	1000e892 <ble_connected_state_handler+0xf2>
	{
		DBG_LOG("Device Connection Failed - Status: %d", conn_params->conn_status);
	}
	ALL_UNUSED(peripheral_device_added);
	return AT_BLE_SUCCESS;
}
1000e98a:	0030      	movs	r0, r6
1000e98c:	b01a      	add	sp, #104	; 0x68
1000e98e:	bc1c      	pop	{r2, r3, r4}
1000e990:	4690      	mov	r8, r2
1000e992:	4699      	mov	r9, r3
1000e994:	46a3      	mov	fp, r4
1000e996:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000e998:	1001663c 	.word	0x1001663c
1000e99c:	10015495 	.word	0x10015495
1000e9a0:	10018038 	.word	0x10018038
1000e9a4:	10015375 	.word	0x10015375
1000e9a8:	1001807c 	.word	0x1001807c
1000e9ac:	1001a70c 	.word	0x1001a70c
1000e9b0:	1001521b 	.word	0x1001521b
1000e9b4:	10018fd0 	.word	0x10018fd0
1000e9b8:	100151fd 	.word	0x100151fd
1000e9bc:	1001522d 	.word	0x1001522d
1000e9c0:	1001a4a6 	.word	0x1001a4a6
1000e9c4:	10010a89 	.word	0x10010a89
1000e9c8:	10018094 	.word	0x10018094
1000e9cc:	100180b8 	.word	0x100180b8
1000e9d0:	1001a460 	.word	0x1001a460
1000e9d4:	1001a6cc 	.word	0x1001a6cc
1000e9d8:	100180dc 	.word	0x100180dc
1000e9dc:	10010a5d 	.word	0x10010a5d
1000e9e0:	1000e759 	.word	0x1000e759
1000e9e4:	10018118 	.word	0x10018118
1000e9e8:	1001a53a 	.word	0x1001a53a

1000e9ec <ble_resolv_rand_addr_handler>:

at_ble_status_t ble_resolv_rand_addr_handler(void *params)
{
1000e9ec:	b5f0      	push	{r4, r5, r6, r7, lr}
1000e9ee:	4647      	mov	r7, r8
1000e9f0:	b480      	push	{r7}
	uint8_t idx;	
	bool device_found = false;
	bool peripheral_device_added = false;
	ble_resolv_rand_addr_status = (at_ble_resolv_rand_addr_status_t *)params;	
	
	if(ble_resolv_rand_addr_status->status == AT_BLE_SUCCESS)
1000e9f2:	7803      	ldrb	r3, [r0, #0]
1000e9f4:	2b00      	cmp	r3, #0
1000e9f6:	d152      	bne.n	1000ea9e <ble_resolv_rand_addr_handler+0xb2>
1000e9f8:	4d3e      	ldr	r5, [pc, #248]	; (1000eaf4 <ble_resolv_rand_addr_handler+0x108>)
1000e9fa:	2400      	movs	r4, #0
	{		
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
		{
			/* Check the Resolved Address */
			if (!memcmp((uint8_t *)ble_resolv_rand_addr_status->irk, (uint8_t *)ble_dev_info[idx].bond_info.peer_irk.key, AT_BLE_MAX_KEY_LEN))
1000e9fc:	1c46      	adds	r6, r0, #1
1000e9fe:	4f3e      	ldr	r7, [pc, #248]	; (1000eaf8 <ble_resolv_rand_addr_handler+0x10c>)
1000ea00:	2210      	movs	r2, #16
1000ea02:	0029      	movs	r1, r5
1000ea04:	0030      	movs	r0, r6
1000ea06:	47b8      	blx	r7
1000ea08:	2800      	cmp	r0, #0
1000ea0a:	d031      	beq.n	1000ea70 <ble_resolv_rand_addr_handler+0x84>
	bool peripheral_device_added = false;
	ble_resolv_rand_addr_status = (at_ble_resolv_rand_addr_status_t *)params;	
	
	if(ble_resolv_rand_addr_status->status == AT_BLE_SUCCESS)
	{		
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000ea0c:	3401      	adds	r4, #1
1000ea0e:	b2e4      	uxtb	r4, r4
1000ea10:	357c      	adds	r5, #124	; 0x7c
1000ea12:	2c05      	cmp	r4, #5
1000ea14:	d1f4      	bne.n	1000ea00 <ble_resolv_rand_addr_handler+0x14>
1000ea16:	e042      	b.n	1000ea9e <ble_resolv_rand_addr_handler+0xb2>
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
		{
			if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000ea18:	001d      	movs	r5, r3
1000ea1a:	7811      	ldrb	r1, [r2, #0]
1000ea1c:	2900      	cmp	r1, #0
1000ea1e:	d11b      	bne.n	1000ea58 <ble_resolv_rand_addr_handler+0x6c>
1000ea20:	e001      	b.n	1000ea26 <ble_resolv_rand_addr_handler+0x3a>
1000ea22:	2500      	movs	r5, #0
		peripheral_device_added = true;
	}
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000ea24:	2400      	movs	r4, #0
		{
			if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
			{
				memcpy(&ble_dev_info[idx].conn_info, (uint8_t *)&connected_state_info, sizeof(at_ble_connected_t));
1000ea26:	4b35      	ldr	r3, [pc, #212]	; (1000eafc <ble_resolv_rand_addr_handler+0x110>)
1000ea28:	4698      	mov	r8, r3
1000ea2a:	016e      	lsls	r6, r5, #5
1000ea2c:	1b77      	subs	r7, r6, r5
1000ea2e:	00bf      	lsls	r7, r7, #2
1000ea30:	4447      	add	r7, r8
1000ea32:	2212      	movs	r2, #18
1000ea34:	4932      	ldr	r1, [pc, #200]	; (1000eb00 <ble_resolv_rand_addr_handler+0x114>)
1000ea36:	0038      	movs	r0, r7
1000ea38:	4b32      	ldr	r3, [pc, #200]	; (1000eb04 <ble_resolv_rand_addr_handler+0x118>)
1000ea3a:	4798      	blx	r3
				ble_device_count++;
1000ea3c:	4a32      	ldr	r2, [pc, #200]	; (1000eb08 <ble_resolv_rand_addr_handler+0x11c>)
1000ea3e:	7813      	ldrb	r3, [r2, #0]
1000ea40:	3301      	adds	r3, #1
1000ea42:	b2db      	uxtb	r3, r3
1000ea44:	7013      	strb	r3, [r2, #0]
				ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000ea46:	375e      	adds	r7, #94	; 0x5e
1000ea48:	2302      	movs	r3, #2
1000ea4a:	703b      	strb	r3, [r7, #0]
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
1000ea4c:	1b75      	subs	r5, r6, r5
1000ea4e:	00ad      	lsls	r5, r5, #2
1000ea50:	4445      	add	r5, r8
1000ea52:	3308      	adds	r3, #8
1000ea54:	74ab      	strb	r3, [r5, #18]
				peripheral_device_added = true;
				break;
1000ea56:	e031      	b.n	1000eabc <ble_resolv_rand_addr_handler+0xd0>
		peripheral_device_added = true;
	}
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000ea58:	3401      	adds	r4, #1
1000ea5a:	b2e4      	uxtb	r4, r4
1000ea5c:	3301      	adds	r3, #1
1000ea5e:	327c      	adds	r2, #124	; 0x7c
1000ea60:	2c05      	cmp	r4, #5
1000ea62:	d1d9      	bne.n	1000ea18 <ble_resolv_rand_addr_handler+0x2c>
1000ea64:	e03a      	b.n	1000eadc <ble_resolv_rand_addr_handler+0xf0>
	}
	DBG_LOG_DEV("Device idx:%d",idx);
	#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
	if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
	{
		ble_send_slave_sec_request(connected_state_info.handle);
1000ea66:	4b26      	ldr	r3, [pc, #152]	; (1000eb00 <ble_resolv_rand_addr_handler+0x114>)
1000ea68:	8918      	ldrh	r0, [r3, #8]
1000ea6a:	4b28      	ldr	r3, [pc, #160]	; (1000eb0c <ble_resolv_rand_addr_handler+0x120>)
1000ea6c:	4798      	blx	r3
1000ea6e:	e03c      	b.n	1000eaea <ble_resolv_rand_addr_handler+0xfe>
		
	}
	
	if (device_found)
	{
		DBG_LOG_DEV("##########Device Found");
1000ea70:	4827      	ldr	r0, [pc, #156]	; (1000eb10 <ble_resolv_rand_addr_handler+0x124>)
1000ea72:	4b28      	ldr	r3, [pc, #160]	; (1000eb14 <ble_resolv_rand_addr_handler+0x128>)
1000ea74:	4798      	blx	r3
1000ea76:	4828      	ldr	r0, [pc, #160]	; (1000eb18 <ble_resolv_rand_addr_handler+0x12c>)
1000ea78:	4b28      	ldr	r3, [pc, #160]	; (1000eb1c <ble_resolv_rand_addr_handler+0x130>)
1000ea7a:	4798      	blx	r3
		ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000ea7c:	481f      	ldr	r0, [pc, #124]	; (1000eafc <ble_resolv_rand_addr_handler+0x110>)
1000ea7e:	0163      	lsls	r3, r4, #5
1000ea80:	1b1a      	subs	r2, r3, r4
1000ea82:	0092      	lsls	r2, r2, #2
1000ea84:	1882      	adds	r2, r0, r2
1000ea86:	0011      	movs	r1, r2
1000ea88:	315e      	adds	r1, #94	; 0x5e
1000ea8a:	2502      	movs	r5, #2
1000ea8c:	700d      	strb	r5, [r1, #0]
		ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
1000ea8e:	210a      	movs	r1, #10
1000ea90:	7491      	strb	r1, [r2, #18]
		memcpy((uint8_t *)&ble_dev_info[idx].conn_info, (uint8_t *)&connected_state_info, sizeof(at_ble_connected_t));
1000ea92:	0010      	movs	r0, r2
1000ea94:	2212      	movs	r2, #18
1000ea96:	491a      	ldr	r1, [pc, #104]	; (1000eb00 <ble_resolv_rand_addr_handler+0x114>)
1000ea98:	4b1a      	ldr	r3, [pc, #104]	; (1000eb04 <ble_resolv_rand_addr_handler+0x118>)
1000ea9a:	4798      	blx	r3
1000ea9c:	e00e      	b.n	1000eabc <ble_resolv_rand_addr_handler+0xd0>
		peripheral_device_added = true;
	}
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
1000ea9e:	481c      	ldr	r0, [pc, #112]	; (1000eb10 <ble_resolv_rand_addr_handler+0x124>)
1000eaa0:	4b1c      	ldr	r3, [pc, #112]	; (1000eb14 <ble_resolv_rand_addr_handler+0x128>)
1000eaa2:	4798      	blx	r3
1000eaa4:	481e      	ldr	r0, [pc, #120]	; (1000eb20 <ble_resolv_rand_addr_handler+0x134>)
1000eaa6:	4b1d      	ldr	r3, [pc, #116]	; (1000eb1c <ble_resolv_rand_addr_handler+0x130>)
1000eaa8:	4798      	blx	r3
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
		{
			if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000eaaa:	235e      	movs	r3, #94	; 0x5e
1000eaac:	4a13      	ldr	r2, [pc, #76]	; (1000eafc <ble_resolv_rand_addr_handler+0x110>)
1000eaae:	5cd3      	ldrb	r3, [r2, r3]
1000eab0:	2b00      	cmp	r3, #0
1000eab2:	d0b6      	beq.n	1000ea22 <ble_resolv_rand_addr_handler+0x36>
1000eab4:	4a1b      	ldr	r2, [pc, #108]	; (1000eb24 <ble_resolv_rand_addr_handler+0x138>)
1000eab6:	2301      	movs	r3, #1
		peripheral_device_added = true;
	}
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000eab8:	2401      	movs	r4, #1
1000eaba:	e7ad      	b.n	1000ea18 <ble_resolv_rand_addr_handler+0x2c>
				peripheral_device_added = true;
				break;
			}
		}
	}
	DBG_LOG_DEV("Device idx:%d",idx);
1000eabc:	4814      	ldr	r0, [pc, #80]	; (1000eb10 <ble_resolv_rand_addr_handler+0x124>)
1000eabe:	4b15      	ldr	r3, [pc, #84]	; (1000eb14 <ble_resolv_rand_addr_handler+0x128>)
1000eac0:	4798      	blx	r3
1000eac2:	0021      	movs	r1, r4
1000eac4:	4818      	ldr	r0, [pc, #96]	; (1000eb28 <ble_resolv_rand_addr_handler+0x13c>)
1000eac6:	4b15      	ldr	r3, [pc, #84]	; (1000eb1c <ble_resolv_rand_addr_handler+0x130>)
1000eac8:	4798      	blx	r3
	#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
	if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
1000eaca:	0163      	lsls	r3, r4, #5
1000eacc:	1b1c      	subs	r4, r3, r4
1000eace:	00a4      	lsls	r4, r4, #2
1000ead0:	4b0a      	ldr	r3, [pc, #40]	; (1000eafc <ble_resolv_rand_addr_handler+0x110>)
1000ead2:	191c      	adds	r4, r3, r4
1000ead4:	7ca3      	ldrb	r3, [r4, #18]
1000ead6:	2b0a      	cmp	r3, #10
1000ead8:	d107      	bne.n	1000eaea <ble_resolv_rand_addr_handler+0xfe>
1000eada:	e7c4      	b.n	1000ea66 <ble_resolv_rand_addr_handler+0x7a>
				peripheral_device_added = true;
				break;
			}
		}
	}
	DBG_LOG_DEV("Device idx:%d",idx);
1000eadc:	480c      	ldr	r0, [pc, #48]	; (1000eb10 <ble_resolv_rand_addr_handler+0x124>)
1000eade:	4b0d      	ldr	r3, [pc, #52]	; (1000eb14 <ble_resolv_rand_addr_handler+0x128>)
1000eae0:	4798      	blx	r3
1000eae2:	2105      	movs	r1, #5
1000eae4:	4810      	ldr	r0, [pc, #64]	; (1000eb28 <ble_resolv_rand_addr_handler+0x13c>)
1000eae6:	4b0d      	ldr	r3, [pc, #52]	; (1000eb1c <ble_resolv_rand_addr_handler+0x130>)
1000eae8:	4798      	blx	r3
	#endif
	ALL_UNUSED(peripheral_device_added);

	return AT_BLE_SUCCESS;
	
}
1000eaea:	2000      	movs	r0, #0
1000eaec:	bc04      	pop	{r2}
1000eaee:	4690      	mov	r8, r2
1000eaf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000eaf2:	46c0      	nop			; (mov r8, r8)
1000eaf4:	1001a4a6 	.word	0x1001a4a6
1000eaf8:	100151fd 	.word	0x100151fd
1000eafc:	1001a460 	.word	0x1001a460
1000eb00:	1001a70c 	.word	0x1001a70c
1000eb04:	1001521b 	.word	0x1001521b
1000eb08:	1001a6cc 	.word	0x1001a6cc
1000eb0c:	1000e759 	.word	0x1000e759
1000eb10:	1001663c 	.word	0x1001663c
1000eb14:	10015495 	.word	0x10015495
1000eb18:	10018140 	.word	0x10018140
1000eb1c:	10015375 	.word	0x10015375
1000eb20:	10018158 	.word	0x10018158
1000eb24:	1001a53a 	.word	0x1001a53a
1000eb28:	10018174 	.word	0x10018174

1000eb2c <ble_event_manager>:
	}
	return AT_BLE_SUCCESS;
}

void ble_event_manager(at_ble_events_t events, void *event_params)
{
1000eb2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000eb2e:	0004      	movs	r4, r0
1000eb30:	000d      	movs	r5, r1
	DBG_LOG_DEV("\r\nBLE-Event:%d", events);
1000eb32:	4848      	ldr	r0, [pc, #288]	; (1000ec54 <ble_event_manager+0x128>)
1000eb34:	4b48      	ldr	r3, [pc, #288]	; (1000ec58 <ble_event_manager+0x12c>)
1000eb36:	4798      	blx	r3
1000eb38:	0021      	movs	r1, r4
1000eb3a:	4848      	ldr	r0, [pc, #288]	; (1000ec5c <ble_event_manager+0x130>)
1000eb3c:	4b48      	ldr	r3, [pc, #288]	; (1000ec60 <ble_event_manager+0x134>)
1000eb3e:	4798      	blx	r3
	switch(events)
1000eb40:	2c3b      	cmp	r4, #59	; 0x3b
1000eb42:	d879      	bhi.n	1000ec38 <ble_event_manager+0x10c>
1000eb44:	00a3      	lsls	r3, r4, #2
1000eb46:	4a47      	ldr	r2, [pc, #284]	; (1000ec64 <ble_event_manager+0x138>)
1000eb48:	58d3      	ldr	r3, [r2, r3]
1000eb4a:	469f      	mov	pc, r3
		for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gap_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gap_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000eb4c:	00a4      	lsls	r4, r4, #2
1000eb4e:	2600      	movs	r6, #0
		}
		#endif			
		
		for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gap_event_cb[idx] != NULL)
1000eb50:	4f45      	ldr	r7, [pc, #276]	; (1000ec68 <ble_event_manager+0x13c>)
1000eb52:	59bb      	ldr	r3, [r7, r6]
1000eb54:	2b00      	cmp	r3, #0
1000eb56:	d004      	beq.n	1000eb62 <ble_event_manager+0x36>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gap_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000eb58:	591b      	ldr	r3, [r3, r4]
1000eb5a:	2b00      	cmp	r3, #0
1000eb5c:	d001      	beq.n	1000eb62 <ble_event_manager+0x36>
				{
					event_cb_fn[events](event_params);		
1000eb5e:	0028      	movs	r0, r5
1000eb60:	4798      	blx	r3
1000eb62:	3604      	adds	r6, #4
			if( ble_scan_duplication_check((at_ble_scan_info_t*)event_params) )
				return;
		}
		#endif			
		
		for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
1000eb64:	2e14      	cmp	r6, #20
1000eb66:	d1f4      	bne.n	1000eb52 <ble_event_manager+0x26>
1000eb68:	e072      	b.n	1000ec50 <ble_event_manager+0x124>
		for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_client_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_client_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000eb6a:	3c13      	subs	r4, #19
1000eb6c:	b2e4      	uxtb	r4, r4
1000eb6e:	00a4      	lsls	r4, r4, #2
1000eb70:	2600      	movs	r6, #0
	{
		uint8_t idx;
		events -= (AT_BLE_CON_CHANNEL_MAP_IND + 1);
		for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_client_event_cb[idx] != NULL)
1000eb72:	4f3e      	ldr	r7, [pc, #248]	; (1000ec6c <ble_event_manager+0x140>)
1000eb74:	59bb      	ldr	r3, [r7, r6]
1000eb76:	2b00      	cmp	r3, #0
1000eb78:	d004      	beq.n	1000eb84 <ble_event_manager+0x58>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_client_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000eb7a:	591b      	ldr	r3, [r3, r4]
1000eb7c:	2b00      	cmp	r3, #0
1000eb7e:	d001      	beq.n	1000eb84 <ble_event_manager+0x58>
				{
					event_cb_fn[events](event_params);
1000eb80:	0028      	movs	r0, r5
1000eb82:	4798      	blx	r3
1000eb84:	3604      	adds	r6, #4
	case AT_BLE_NOTIFICATION_RECIEVED:
	case AT_BLE_INDICATION_RECIEVED:
	{
		uint8_t idx;
		events -= (AT_BLE_CON_CHANNEL_MAP_IND + 1);
		for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
1000eb86:	2e14      	cmp	r6, #20
1000eb88:	d1f4      	bne.n	1000eb74 <ble_event_manager+0x48>
1000eb8a:	e061      	b.n	1000ec50 <ble_event_manager+0x124>
	case AT_BLE_MTU_CHANGED_CMD_COMPLETE:
	case AT_BLE_CHARACTERISTIC_WRITE_CMD_CMP:
	case AT_BLE_READ_AUTHORIZE_REQUEST:
	{
		uint8_t idx;
		events -= (AT_BLE_INDICATION_RECIEVED + 1);
1000eb8c:	3c1d      	subs	r4, #29
1000eb8e:	b2e4      	uxtb	r4, r4
		DBG_LOG_DEV("GATT_Server Event:%d", events);
1000eb90:	4830      	ldr	r0, [pc, #192]	; (1000ec54 <ble_event_manager+0x128>)
1000eb92:	4b31      	ldr	r3, [pc, #196]	; (1000ec58 <ble_event_manager+0x12c>)
1000eb94:	4798      	blx	r3
1000eb96:	0021      	movs	r1, r4
1000eb98:	4835      	ldr	r0, [pc, #212]	; (1000ec70 <ble_event_manager+0x144>)
1000eb9a:	4b31      	ldr	r3, [pc, #196]	; (1000ec60 <ble_event_manager+0x134>)
1000eb9c:	4798      	blx	r3
		for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_server_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_server_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000eb9e:	00a4      	lsls	r4, r4, #2
1000eba0:	2600      	movs	r6, #0
		uint8_t idx;
		events -= (AT_BLE_INDICATION_RECIEVED + 1);
		DBG_LOG_DEV("GATT_Server Event:%d", events);
		for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_server_event_cb[idx] != NULL)
1000eba2:	4f34      	ldr	r7, [pc, #208]	; (1000ec74 <ble_event_manager+0x148>)
1000eba4:	59bb      	ldr	r3, [r7, r6]
1000eba6:	2b00      	cmp	r3, #0
1000eba8:	d004      	beq.n	1000ebb4 <ble_event_manager+0x88>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_server_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000ebaa:	591b      	ldr	r3, [r3, r4]
1000ebac:	2b00      	cmp	r3, #0
1000ebae:	d001      	beq.n	1000ebb4 <ble_event_manager+0x88>
				{
					event_cb_fn[events](event_params);
1000ebb0:	0028      	movs	r0, r5
1000ebb2:	4798      	blx	r3
1000ebb4:	3604      	adds	r6, #4
	case AT_BLE_READ_AUTHORIZE_REQUEST:
	{
		uint8_t idx;
		events -= (AT_BLE_INDICATION_RECIEVED + 1);
		DBG_LOG_DEV("GATT_Server Event:%d", events);
		for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
1000ebb6:	2e14      	cmp	r6, #20
1000ebb8:	d1f4      	bne.n	1000eba4 <ble_event_manager+0x78>
1000ebba:	e049      	b.n	1000ec50 <ble_event_manager+0x124>
	case AT_BLE_LECB_ADD_CREDIT_IND:
	case AT_BLE_LECB_SEND_RESP:
	case AT_BLE_LECB_DATA_RECIEVED:
	{
		uint8_t idx;
		events -= (AT_BLE_READ_AUTHORIZE_REQUEST + 1);
1000ebbc:	3c27      	subs	r4, #39	; 0x27
1000ebbe:	b2e4      	uxtb	r4, r4
		for (idx = 0; idx < MAX_L2CAP_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_l2cap_event_cb[idx] != NULL)
1000ebc0:	4b2d      	ldr	r3, [pc, #180]	; (1000ec78 <ble_event_manager+0x14c>)
1000ebc2:	681b      	ldr	r3, [r3, #0]
1000ebc4:	2b00      	cmp	r3, #0
1000ebc6:	d043      	beq.n	1000ec50 <ble_event_manager+0x124>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_l2cap_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000ebc8:	00a4      	lsls	r4, r4, #2
1000ebca:	58e3      	ldr	r3, [r4, r3]
1000ebcc:	2b00      	cmp	r3, #0
1000ebce:	d03f      	beq.n	1000ec50 <ble_event_manager+0x124>
				{
					event_cb_fn[events](event_params);
1000ebd0:	0028      	movs	r0, r5
1000ebd2:	4798      	blx	r3
1000ebd4:	e03c      	b.n	1000ec50 <ble_event_manager+0x124>
	case AT_BLE_HTPT_ENABLE_RSP:
	case AT_BLE_HTPT_MEAS_INTV_UPD_RSP:
	case AT_BLE_HTPT_MEAS_INTV_CHG_REQ:
	{
		uint8_t idx;
		events -= (AT_BLE_LECB_DATA_RECIEVED + 1);
1000ebd6:	3c2d      	subs	r4, #45	; 0x2d
1000ebd8:	b2e4      	uxtb	r4, r4
		for (idx = 0; idx < MAX_HTPT_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_htpt_event_cb[idx] != NULL)
1000ebda:	4b28      	ldr	r3, [pc, #160]	; (1000ec7c <ble_event_manager+0x150>)
1000ebdc:	681b      	ldr	r3, [r3, #0]
1000ebde:	2b00      	cmp	r3, #0
1000ebe0:	d036      	beq.n	1000ec50 <ble_event_manager+0x124>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_htpt_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000ebe2:	00a4      	lsls	r4, r4, #2
1000ebe4:	58e3      	ldr	r3, [r4, r3]
1000ebe6:	2b00      	cmp	r3, #0
1000ebe8:	d032      	beq.n	1000ec50 <ble_event_manager+0x124>
				{
					event_cb_fn[events](event_params);
1000ebea:	0028      	movs	r0, r5
1000ebec:	4798      	blx	r3
1000ebee:	e02f      	b.n	1000ec50 <ble_event_manager+0x124>
		for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_dtm_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_dtm_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000ebf0:	3c36      	subs	r4, #54	; 0x36
1000ebf2:	b2e4      	uxtb	r4, r4
1000ebf4:	00a4      	lsls	r4, r4, #2
1000ebf6:	2600      	movs	r6, #0
	{
		uint8_t idx;
		events -= (AT_BLE_HTPT_MEAS_INTV_CHG_REQ + 1);
		for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_dtm_event_cb[idx] != NULL)
1000ebf8:	4f21      	ldr	r7, [pc, #132]	; (1000ec80 <ble_event_manager+0x154>)
1000ebfa:	59bb      	ldr	r3, [r7, r6]
1000ebfc:	2b00      	cmp	r3, #0
1000ebfe:	d004      	beq.n	1000ec0a <ble_event_manager+0xde>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_dtm_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000ec00:	591b      	ldr	r3, [r3, r4]
1000ec02:	2b00      	cmp	r3, #0
1000ec04:	d001      	beq.n	1000ec0a <ble_event_manager+0xde>
				{
					event_cb_fn[events](event_params);
1000ec06:	0028      	movs	r0, r5
1000ec08:	4798      	blx	r3
1000ec0a:	3604      	adds	r6, #4
	case AT_BLE_LE_TEST_STATUS:
	case AT_BLE_LE_PACKET_REPORT:
	{
		uint8_t idx;
		events -= (AT_BLE_HTPT_MEAS_INTV_CHG_REQ + 1);
		for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
1000ec0c:	2e14      	cmp	r6, #20
1000ec0e:	d1f4      	bne.n	1000ebfa <ble_event_manager+0xce>
1000ec10:	e01e      	b.n	1000ec50 <ble_event_manager+0x124>
	case AT_BLE_CUSTOM_EVENT:
	case AT_BLE_DEVICE_READY:
	case AT_BLE_EVENT_MAX:
	{
		uint8_t idx;
		events -= (AT_BLE_LE_PACKET_REPORT + 1);
1000ec12:	3c38      	subs	r4, #56	; 0x38
1000ec14:	b2e4      	uxtb	r4, r4
		for (idx = 0; idx < MAX_CUSTOM_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_custom_event_cb[idx] != NULL)
1000ec16:	4b1b      	ldr	r3, [pc, #108]	; (1000ec84 <ble_event_manager+0x158>)
1000ec18:	681b      	ldr	r3, [r3, #0]
1000ec1a:	2b00      	cmp	r3, #0
1000ec1c:	d018      	beq.n	1000ec50 <ble_event_manager+0x124>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_custom_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000ec1e:	00a4      	lsls	r4, r4, #2
1000ec20:	58e3      	ldr	r3, [r4, r3]
1000ec22:	2b00      	cmp	r3, #0
1000ec24:	d014      	beq.n	1000ec50 <ble_event_manager+0x124>
				{
					event_cb_fn[events](event_params);
1000ec26:	0028      	movs	r0, r5
1000ec28:	4798      	blx	r3
1000ec2a:	e011      	b.n	1000ec50 <ble_event_manager+0x124>
	}
	break;

	case AT_PLATFORM_EVENT:
	{
		if (ble_user_event_cb) {
1000ec2c:	4b16      	ldr	r3, [pc, #88]	; (1000ec88 <ble_event_manager+0x15c>)
1000ec2e:	681b      	ldr	r3, [r3, #0]
1000ec30:	2b00      	cmp	r3, #0
1000ec32:	d00d      	beq.n	1000ec50 <ble_event_manager+0x124>
			ble_user_event_cb();
1000ec34:	4798      	blx	r3
1000ec36:	e00b      	b.n	1000ec50 <ble_event_manager+0x124>
	}
	break;

	default:
	{
		DBG_LOG_DEV("BLE-Manager:Unknown Event=0x%X", events);
1000ec38:	4e06      	ldr	r6, [pc, #24]	; (1000ec54 <ble_event_manager+0x128>)
1000ec3a:	0030      	movs	r0, r6
1000ec3c:	4d06      	ldr	r5, [pc, #24]	; (1000ec58 <ble_event_manager+0x12c>)
1000ec3e:	47a8      	blx	r5
1000ec40:	0021      	movs	r1, r4
1000ec42:	4812      	ldr	r0, [pc, #72]	; (1000ec8c <ble_event_manager+0x160>)
1000ec44:	4b06      	ldr	r3, [pc, #24]	; (1000ec60 <ble_event_manager+0x134>)
1000ec46:	4798      	blx	r3
		DBG_LOG("\r\n");
1000ec48:	0030      	movs	r0, r6
1000ec4a:	47a8      	blx	r5
1000ec4c:	0030      	movs	r0, r6
1000ec4e:	47a8      	blx	r5
	}
	break;		
	}
}
1000ec50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000ec52:	46c0      	nop			; (mov r8, r8)
1000ec54:	1001663c 	.word	0x1001663c
1000ec58:	10015495 	.word	0x10015495
1000ec5c:	10018184 	.word	0x10018184
1000ec60:	10015375 	.word	0x10015375
1000ec64:	100176e4 	.word	0x100176e4
1000ec68:	1001a6e4 	.word	0x1001a6e4
1000ec6c:	1001a6f8 	.word	0x1001a6f8
1000ec70:	10018194 	.word	0x10018194
1000ec74:	1001a44c 	.word	0x1001a44c
1000ec78:	1001a740 	.word	0x1001a740
1000ec7c:	1001a448 	.word	0x1001a448
1000ec80:	1001a6d0 	.word	0x1001a6d0
1000ec84:	1001ac84 	.word	0x1001ac84
1000ec88:	10018fc8 	.word	0x10018fc8
1000ec8c:	100181ac 	.word	0x100181ac

1000ec90 <ble_event_task>:
	return ulp_status;
}

/** @brief function to get event from stack */
at_ble_status_t ble_event_task(uint32_t timeout)
{
1000ec90:	b570      	push	{r4, r5, r6, lr}
1000ec92:	0004      	movs	r4, r0
	return status;
}

ble_ulp_mode_t ble_get_ulp_status(void)
{
	return ulp_status;
1000ec94:	4b0d      	ldr	r3, [pc, #52]	; (1000eccc <ble_event_task+0x3c>)
1000ec96:	781b      	ldrb	r3, [r3, #0]
/** @brief function to get event from stack */
at_ble_status_t ble_event_task(uint32_t timeout)
{
	at_ble_status_t status;
	
	if (ble_get_ulp_status() == BLE_ULP_MODE_SET)
1000ec98:	2b01      	cmp	r3, #1
1000ec9a:	d101      	bne.n	1000eca0 <ble_event_task+0x10>
	{
		release_sleep_lock();
1000ec9c:	4b0c      	ldr	r3, [pc, #48]	; (1000ecd0 <ble_event_task+0x40>)
1000ec9e:	4798      	blx	r3
	}	
	status = at_ble_event_get(&event, ble_event_params, timeout);
1000eca0:	0022      	movs	r2, r4
1000eca2:	490c      	ldr	r1, [pc, #48]	; (1000ecd4 <ble_event_task+0x44>)
1000eca4:	480c      	ldr	r0, [pc, #48]	; (1000ecd8 <ble_event_task+0x48>)
1000eca6:	4b0d      	ldr	r3, [pc, #52]	; (1000ecdc <ble_event_task+0x4c>)
1000eca8:	4798      	blx	r3
1000ecaa:	0004      	movs	r4, r0
1000ecac:	0005      	movs	r5, r0
	return status;
}

ble_ulp_mode_t ble_get_ulp_status(void)
{
	return ulp_status;
1000ecae:	4b07      	ldr	r3, [pc, #28]	; (1000eccc <ble_event_task+0x3c>)
1000ecb0:	781b      	ldrb	r3, [r3, #0]
	{
		release_sleep_lock();
	}	
	status = at_ble_event_get(&event, ble_event_params, timeout);
	
	if (ble_get_ulp_status() == BLE_ULP_MODE_SET)
1000ecb2:	2b01      	cmp	r3, #1
1000ecb4:	d101      	bne.n	1000ecba <ble_event_task+0x2a>
	{
		acquire_sleep_lock();
1000ecb6:	4b0a      	ldr	r3, [pc, #40]	; (1000ece0 <ble_event_task+0x50>)
1000ecb8:	4798      	blx	r3
	}
	
    if (status == AT_BLE_SUCCESS) 
1000ecba:	2d00      	cmp	r5, #0
1000ecbc:	d104      	bne.n	1000ecc8 <ble_event_task+0x38>
    {		
            ble_event_manager(event, ble_event_params);
1000ecbe:	4b06      	ldr	r3, [pc, #24]	; (1000ecd8 <ble_event_task+0x48>)
1000ecc0:	7818      	ldrb	r0, [r3, #0]
1000ecc2:	4904      	ldr	r1, [pc, #16]	; (1000ecd4 <ble_event_task+0x44>)
1000ecc4:	4b07      	ldr	r3, [pc, #28]	; (1000ece4 <ble_event_task+0x54>)
1000ecc6:	4798      	blx	r3
    }
    
    return status;
}
1000ecc8:	0020      	movs	r0, r4
1000ecca:	bd70      	pop	{r4, r5, r6, pc}
1000eccc:	10018fd7 	.word	0x10018fd7
1000ecd0:	1000f6ad 	.word	0x1000f6ad
1000ecd4:	1001aa78 	.word	0x1001aa78
1000ecd8:	1001a73c 	.word	0x1001a73c
1000ecdc:	1000fe11 	.word	0x1000fe11
1000ece0:	1000f685 	.word	0x1000f685
1000ece4:	1000eb2d 	.word	0x1000eb2d

1000ece8 <ble_advertisement_data_set>:
	}
}

/* Advertisement Data will be set based on the advertisement configuration */
at_ble_status_t ble_advertisement_data_set(void)
{
1000ece8:	b530      	push	{r4, r5, lr}
1000ecea:	b091      	sub	sp, #68	; 0x44
		uint8_t length_field_ind;
		uint8_t adv_element_len;
		adv_buf[adv_data_element.len] = adv_data_element.len;
		length_field_ind = adv_data_element.len;
		adv_data_element.len++;
		adv_buf[adv_data_element.len++] = COMPLETE_LIST_16BIT_SERV_UUIDS;
1000ecec:	ac08      	add	r4, sp, #32
1000ecee:	2203      	movs	r2, #3
1000ecf0:	7062      	strb	r2, [r4, #1]
		MREPEAT(SERVICE_UUID16_MAX_NUM, _CONF_SERVICE_16BIT_UUID, &adv_data_element);
1000ecf2:	2302      	movs	r3, #2
1000ecf4:	70a3      	strb	r3, [r4, #2]
1000ecf6:	3316      	adds	r3, #22
1000ecf8:	70e3      	strb	r3, [r4, #3]
1000ecfa:	7122      	strb	r2, [r4, #4]
1000ecfc:	7163      	strb	r3, [r4, #5]
1000ecfe:	3201      	adds	r2, #1
1000ed00:	71a2      	strb	r2, [r4, #6]
1000ed02:	71e3      	strb	r3, [r4, #7]
1000ed04:	320b      	adds	r2, #11
1000ed06:	7222      	strb	r2, [r4, #8]
1000ed08:	7263      	strb	r3, [r4, #9]
		adv_element_len = adv_data_element.len - (length_field_ind + ADV_ELEMENT_SIZE);
		if(adv_element_len) 
		{			
			adv_buf[length_field_ind] = adv_element_len+ADV_TYPE_SIZE;
1000ed0a:	2509      	movs	r5, #9
1000ed0c:	7025      	strb	r5, [r4, #0]
	#endif
	
	#if (BLE_GAP_ADV_COMPLETE_LOCAL_NAME_ENABLE && !BLE_GAP_ADV_SHORTENED_LOCAL_NAME_ENABLE)
	#if (BLE_GAP_ADV_COMPLETE_LOCAL_NAME_SCN_RSP_ENABLE != SCAN_RESPONSE_ONLY_ENABLE)
	if((adv_data_element.len) <= (AT_BLE_ADV_MAX_SIZE - (ADV_TYPE_FLAG_SIZE + ADV_ELEMENT_SIZE + BLE_GAP_ADV_DATA_COMPLETE_LOCAL_NAME_LENGTH))) {
		adv_buf[adv_data_element.len++] = BLE_GAP_ADV_DATA_COMPLETE_LOCAL_NAME_LENGTH + ADV_TYPE_SIZE;
1000ed0e:	3b0e      	subs	r3, #14
1000ed10:	72a3      	strb	r3, [r4, #10]
		adv_buf[adv_data_element.len++] = COMPLETE_LOCAL_NAME;
1000ed12:	72e5      	strb	r5, [r4, #11]
		memcpy(&adv_buf[adv_data_element.len], BLE_GAP_ADV_DATA_COMPLETE_LOCAL_NAME, BLE_GAP_ADV_DATA_COMPLETE_LOCAL_NAME_LENGTH);
1000ed14:	aa0b      	add	r2, sp, #44	; 0x2c
1000ed16:	4b16      	ldr	r3, [pc, #88]	; (1000ed70 <ble_advertisement_data_set+0x88>)
1000ed18:	cb03      	ldmia	r3!, {r0, r1}
1000ed1a:	c203      	stmia	r2!, {r0, r1}
1000ed1c:	781b      	ldrb	r3, [r3, #0]
1000ed1e:	7013      	strb	r3, [r2, #0]
	#endif
	#if ((BLE_GAP_ADV_SERVICE_SOLTN_128BIT_UUID_SCN_RSP_ENABLE == SCAN_RESPONSE_ENABLE) || (BLE_GAP_ADV_SERVICE_SOLTN_128BIT_UUID_SCN_RSP_ENABLE == SCAN_RESPONSE_ONLY_ENABLE))
	else if((scan_resp_data_element.len) <= (AT_BLE_ADV_MAX_SIZE - (ADV_ELEMENT_SIZE + BLE_GAP_ADV_SERVICE_128BIT_UUID_LENGTH))) {
		uint8_t length_field_ind;
		uint8_t scan_resp_element_len;
		scn_resp[scan_resp_data_element.len] = scan_resp_data_element.len;
1000ed20:	2300      	movs	r3, #0
1000ed22:	466a      	mov	r2, sp
1000ed24:	7013      	strb	r3, [r2, #0]
		length_field_ind = scan_resp_data_element.len;
		scan_resp_data_element.len++;
		scn_resp[scan_resp_data_element.len++] = LIST_128BIT_SERV_SOLICITATION_UUIDS;
1000ed26:	3315      	adds	r3, #21
1000ed28:	7053      	strb	r3, [r2, #1]
		return AT_BLE_GAP_INVALID_PARAM;
	}
	#endif
	
	#if BLE_GAP_ADV_MANUFACTURER_SPECIFIC_DATA_ENABLE
    DBG_LOG_DEV("[ble_manager]\t\t\tManufacturer specific data enabled");
1000ed2a:	4812      	ldr	r0, [pc, #72]	; (1000ed74 <ble_advertisement_data_set+0x8c>)
1000ed2c:	4b12      	ldr	r3, [pc, #72]	; (1000ed78 <ble_advertisement_data_set+0x90>)
1000ed2e:	4798      	blx	r3
1000ed30:	4812      	ldr	r0, [pc, #72]	; (1000ed7c <ble_advertisement_data_set+0x94>)
1000ed32:	4b13      	ldr	r3, [pc, #76]	; (1000ed80 <ble_advertisement_data_set+0x98>)
1000ed34:	4798      	blx	r3
    DBG_LOG_DEV("[ble_manager]\t\tManufacturer specific data NOT enabled");
	if(false){}
	#endif
	#if ((BLE_GAP_ADV_MANUFACTURER_SPECIFIC_DATA_SCN_RSP_ENABLE == SCAN_RESPONSE_ENABLE) || (BLE_GAP_ADV_MANUFACTURER_SPECIFIC_DATA_SCN_RSP_ENABLE == SCAN_RESPONSE_ONLY_ENABLE))
	else if((scan_resp_data_element.len) <= (AT_BLE_ADV_MAX_SIZE - (ADV_ELEMENT_SIZE + BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA_SIZE))) {
		scn_resp[scan_resp_data_element.len++] = BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA_SIZE + ADV_TYPE_SIZE;
1000ed36:	466b      	mov	r3, sp
1000ed38:	701d      	strb	r5, [r3, #0]
		scn_resp[scan_resp_data_element.len++] = MANUFACTURER_SPECIFIC_DATA;
1000ed3a:	23ff      	movs	r3, #255	; 0xff
1000ed3c:	466a      	mov	r2, sp
1000ed3e:	7053      	strb	r3, [r2, #1]
		memcpy(&scn_resp[scan_resp_data_element.len], BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA, BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA_SIZE);
1000ed40:	2208      	movs	r2, #8
1000ed42:	4910      	ldr	r1, [pc, #64]	; (1000ed84 <ble_advertisement_data_set+0x9c>)
1000ed44:	466b      	mov	r3, sp
1000ed46:	1c98      	adds	r0, r3, #2
1000ed48:	4b0f      	ldr	r3, [pc, #60]	; (1000ed88 <ble_advertisement_data_set+0xa0>)
1000ed4a:	4798      	blx	r3
		DBG_LOG_ADV("Failed to add Manufacturer specific data");
		return AT_BLE_GAP_INVALID_PARAM;
	}
	#endif
	
	if (at_ble_adv_data_set(adv_buf, adv_data_element.len, scn_resp,
1000ed4c:	230a      	movs	r3, #10
1000ed4e:	466a      	mov	r2, sp
1000ed50:	2115      	movs	r1, #21
1000ed52:	0020      	movs	r0, r4
1000ed54:	4c0d      	ldr	r4, [pc, #52]	; (1000ed8c <ble_advertisement_data_set+0xa4>)
1000ed56:	47a0      	blx	r4
1000ed58:	2800      	cmp	r0, #0
1000ed5a:	d005      	beq.n	1000ed68 <ble_advertisement_data_set+0x80>
	scan_resp_data_element.len) != AT_BLE_SUCCESS) {
		DBG_LOG("BLE Advertisement data set failed");
1000ed5c:	4805      	ldr	r0, [pc, #20]	; (1000ed74 <ble_advertisement_data_set+0x8c>)
1000ed5e:	4b06      	ldr	r3, [pc, #24]	; (1000ed78 <ble_advertisement_data_set+0x90>)
1000ed60:	4798      	blx	r3
1000ed62:	480b      	ldr	r0, [pc, #44]	; (1000ed90 <ble_advertisement_data_set+0xa8>)
1000ed64:	4b06      	ldr	r3, [pc, #24]	; (1000ed80 <ble_advertisement_data_set+0x98>)
1000ed66:	4798      	blx	r3
            //DBG_LOG_ADV("- 0x%02x(%c) ", adv_buf[i], adv_buf[i]);
        //}
		//DBG_LOG_ADV("BLE Advertisement data set success");
		return AT_BLE_SUCCESS;
    }
}
1000ed68:	2000      	movs	r0, #0
1000ed6a:	b011      	add	sp, #68	; 0x44
1000ed6c:	bd30      	pop	{r4, r5, pc}
1000ed6e:	46c0      	nop			; (mov r8, r8)
1000ed70:	10017ec8 	.word	0x10017ec8
1000ed74:	1001663c 	.word	0x1001663c
1000ed78:	10015495 	.word	0x10015495
1000ed7c:	100181cc 	.word	0x100181cc
1000ed80:	10015375 	.word	0x10015375
1000ed84:	10018200 	.word	0x10018200
1000ed88:	1001521b 	.word	0x1001521b
1000ed8c:	10010871 	.word	0x10010871
1000ed90:	1001820c 	.word	0x1001820c

1000ed94 <register_ble_user_event_cb>:

/** @brief function to register callback to be called when AT_BLE_PLATFORM_EVENT event triggered from stack */
void register_ble_user_event_cb(ble_user_event_callback_t cb_fn)
{
	ble_user_event_cb = cb_fn;
1000ed94:	4b01      	ldr	r3, [pc, #4]	; (1000ed9c <register_ble_user_event_cb+0x8>)
1000ed96:	6018      	str	r0, [r3, #0]
}
1000ed98:	4770      	bx	lr
1000ed9a:	46c0      	nop			; (mov r8, r8)
1000ed9c:	10018fc8 	.word	0x10018fc8

1000eda0 <uart_read_complete_callback>:

void _time_start(unsigned int sec);
unsigned int _time_done(void);

static void uart_read_complete_callback(struct uart_module *const module)
{
1000eda0:	b510      	push	{r4, lr}
	if(read_status == UART_READ_WAITING) {
1000eda2:	4b0e      	ldr	r3, [pc, #56]	; (1000eddc <uart_read_complete_callback+0x3c>)
1000eda4:	781b      	ldrb	r3, [r3, #0]
1000eda6:	2b01      	cmp	r3, #1
1000eda8:	d10b      	bne.n	1000edc2 <uart_read_complete_callback+0x22>
		read_status = UART_READ_DONE;
1000edaa:	2202      	movs	r2, #2
1000edac:	4b0b      	ldr	r3, [pc, #44]	; (1000eddc <uart_read_complete_callback+0x3c>)
1000edae:	701a      	strb	r2, [r3, #0]
		
		if(user_callback_func == NULL)
1000edb0:	4b0b      	ldr	r3, [pc, #44]	; (1000ede0 <uart_read_complete_callback+0x40>)
1000edb2:	681b      	ldr	r3, [r3, #0]
1000edb4:	2b00      	cmp	r3, #0
1000edb6:	d110      	bne.n	1000edda <uart_read_complete_callback+0x3a>
			uart_disable_callback(&uart_instance, UART_RX_COMPLETE);
1000edb8:	2102      	movs	r1, #2
1000edba:	480a      	ldr	r0, [pc, #40]	; (1000ede4 <uart_read_complete_callback+0x44>)
1000edbc:	4b0a      	ldr	r3, [pc, #40]	; (1000ede8 <uart_read_complete_callback+0x48>)
1000edbe:	4798      	blx	r3
1000edc0:	e00b      	b.n	1000edda <uart_read_complete_callback+0x3a>
	}
	else if(user_callback_func != NULL) {
1000edc2:	4b07      	ldr	r3, [pc, #28]	; (1000ede0 <uart_read_complete_callback+0x40>)
1000edc4:	681b      	ldr	r3, [r3, #0]
1000edc6:	2b00      	cmp	r3, #0
1000edc8:	d007      	beq.n	1000edda <uart_read_complete_callback+0x3a>
		user_callback_func(string_input[0]);
1000edca:	4c08      	ldr	r4, [pc, #32]	; (1000edec <uart_read_complete_callback+0x4c>)
1000edcc:	7820      	ldrb	r0, [r4, #0]
1000edce:	4798      	blx	r3
		uart_read_buffer_job(&uart_instance, string_input, sizeof(string_input));
1000edd0:	2201      	movs	r2, #1
1000edd2:	0021      	movs	r1, r4
1000edd4:	4803      	ldr	r0, [pc, #12]	; (1000ede4 <uart_read_complete_callback+0x44>)
1000edd6:	4b06      	ldr	r3, [pc, #24]	; (1000edf0 <uart_read_complete_callback+0x50>)
1000edd8:	4798      	blx	r3
	}
	else {
		//Nothing to do.
	}
}
1000edda:	bd10      	pop	{r4, pc}
1000eddc:	10019fdc 	.word	0x10019fdc
1000ede0:	10019fe4 	.word	0x10019fe4
1000ede4:	1001ac88 	.word	0x1001ac88
1000ede8:	1000d785 	.word	0x1000d785
1000edec:	10019fe0 	.word	0x10019fe0
1000edf0:	1000d729 	.word	0x1000d729

1000edf4 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct uart_module *const module,
		uint8_t *c)
{
1000edf4:	b570      	push	{r4, r5, r6, lr}
1000edf6:	0006      	movs	r6, r0
1000edf8:	000d      	movs	r5, r1
	while(STATUS_OK != uart_read_wait(module, c));
1000edfa:	4c03      	ldr	r4, [pc, #12]	; (1000ee08 <usart_serial_getchar+0x14>)
1000edfc:	0029      	movs	r1, r5
1000edfe:	0030      	movs	r0, r6
1000ee00:	47a0      	blx	r4
1000ee02:	2800      	cmp	r0, #0
1000ee04:	d1fa      	bne.n	1000edfc <usart_serial_getchar+0x8>
}
1000ee06:	bd70      	pop	{r4, r5, r6, pc}
1000ee08:	1000d715 	.word	0x1000d715

1000ee0c <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct uart_module *const module,
		uint8_t c)
{
1000ee0c:	b570      	push	{r4, r5, r6, lr}
1000ee0e:	0006      	movs	r6, r0
1000ee10:	000d      	movs	r5, r1
	while(STATUS_OK !=uart_write_wait(module, c));
1000ee12:	4c03      	ldr	r4, [pc, #12]	; (1000ee20 <usart_serial_putchar+0x14>)
1000ee14:	0029      	movs	r1, r5
1000ee16:	0030      	movs	r0, r6
1000ee18:	47a0      	blx	r4
1000ee1a:	2800      	cmp	r0, #0
1000ee1c:	d1fa      	bne.n	1000ee14 <usart_serial_putchar+0x8>

	return STATUS_OK;
}
1000ee1e:	bd70      	pop	{r4, r5, r6, pc}
1000ee20:	1000d705 	.word	0x1000d705

1000ee24 <serial_console_init>:

void serial_console_init(void)
{
1000ee24:	b570      	push	{r4, r5, r6, lr}
	system_clock_config(CLOCK_RESOURCE_XO_26_MHZ, CLOCK_FREQ_26_MHZ);
1000ee26:	2100      	movs	r1, #0
1000ee28:	2000      	movs	r0, #0
1000ee2a:	4b19      	ldr	r3, [pc, #100]	; (1000ee90 <serial_console_init+0x6c>)
1000ee2c:	4798      	blx	r3

	uart_get_config_defaults(&config_uart);
1000ee2e:	4c19      	ldr	r4, [pc, #100]	; (1000ee94 <serial_console_init+0x70>)
1000ee30:	0020      	movs	r0, r4
1000ee32:	4b19      	ldr	r3, [pc, #100]	; (1000ee98 <serial_console_init+0x74>)
1000ee34:	4798      	blx	r3

	config_uart.baud_rate = CONF_STDIO_BAUDRATE;
1000ee36:	23e1      	movs	r3, #225	; 0xe1
1000ee38:	025b      	lsls	r3, r3, #9
1000ee3a:	6023      	str	r3, [r4, #0]
	config_uart.pin_number_pad[0] = EDBG_CDC_PIN_PAD0;
1000ee3c:	2302      	movs	r3, #2
1000ee3e:	60a3      	str	r3, [r4, #8]
	config_uart.pin_number_pad[1] = EDBG_CDC_PIN_PAD1;
1000ee40:	2203      	movs	r2, #3
1000ee42:	60e2      	str	r2, [r4, #12]
	config_uart.pin_number_pad[2] = EDBG_CDC_PIN_PAD2;
1000ee44:	3201      	adds	r2, #1
1000ee46:	6122      	str	r2, [r4, #16]
	config_uart.pin_number_pad[3] = EDBG_CDC_PIN_PAD3;
1000ee48:	3201      	adds	r2, #1
1000ee4a:	6162      	str	r2, [r4, #20]
	
	config_uart.pinmux_sel_pad[0] = EDBG_CDC_MUX_PAD0;
1000ee4c:	61a3      	str	r3, [r4, #24]
	config_uart.pinmux_sel_pad[1] = EDBG_CDC_MUX_PAD1;
1000ee4e:	61e3      	str	r3, [r4, #28]
	config_uart.pinmux_sel_pad[2] = EDBG_CDC_MUX_PAD2;
1000ee50:	6223      	str	r3, [r4, #32]
	config_uart.pinmux_sel_pad[3] = EDBG_CDC_MUX_PAD3;
1000ee52:	6263      	str	r3, [r4, #36]	; 0x24
static inline void stdio_serial_init(
		struct uart_module *const module,
		Uart * const hw,
		const struct uart_config *const config)
{
	stdio_base = (void *)module;
1000ee54:	4d11      	ldr	r5, [pc, #68]	; (1000ee9c <serial_console_init+0x78>)
1000ee56:	4b12      	ldr	r3, [pc, #72]	; (1000eea0 <serial_console_init+0x7c>)
1000ee58:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
1000ee5a:	4a12      	ldr	r2, [pc, #72]	; (1000eea4 <serial_console_init+0x80>)
1000ee5c:	4b12      	ldr	r3, [pc, #72]	; (1000eea8 <serial_console_init+0x84>)
1000ee5e:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
1000ee60:	4a12      	ldr	r2, [pc, #72]	; (1000eeac <serial_console_init+0x88>)
1000ee62:	4b13      	ldr	r3, [pc, #76]	; (1000eeb0 <serial_console_init+0x8c>)
1000ee64:	601a      	str	r2, [r3, #0]
static inline bool usart_serial_init(
		struct uart_module *const module,
		Uart * const hw,
		const struct uart_config *const config)
{
	if (uart_init(module, hw, config) == STATUS_OK) {
1000ee66:	0022      	movs	r2, r4
1000ee68:	4912      	ldr	r1, [pc, #72]	; (1000eeb4 <serial_console_init+0x90>)
1000ee6a:	0028      	movs	r0, r5
1000ee6c:	4b12      	ldr	r3, [pc, #72]	; (1000eeb8 <serial_console_init+0x94>)
1000ee6e:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
1000ee70:	4e12      	ldr	r6, [pc, #72]	; (1000eebc <serial_console_init+0x98>)
1000ee72:	6833      	ldr	r3, [r6, #0]
1000ee74:	6898      	ldr	r0, [r3, #8]
1000ee76:	2100      	movs	r1, #0
1000ee78:	4c11      	ldr	r4, [pc, #68]	; (1000eec0 <serial_console_init+0x9c>)
1000ee7a:	47a0      	blx	r4
	setbuf(stdin, NULL);
1000ee7c:	6833      	ldr	r3, [r6, #0]
1000ee7e:	6858      	ldr	r0, [r3, #4]
1000ee80:	2100      	movs	r1, #0
1000ee82:	47a0      	blx	r4

	stdio_serial_init(&uart_instance, CONF_STDIO_USART_MODULE, &config_uart);
	
	uart_register_callback(&uart_instance, uart_read_complete_callback, UART_RX_COMPLETE);
1000ee84:	2202      	movs	r2, #2
1000ee86:	490f      	ldr	r1, [pc, #60]	; (1000eec4 <serial_console_init+0xa0>)
1000ee88:	0028      	movs	r0, r5
1000ee8a:	4b0f      	ldr	r3, [pc, #60]	; (1000eec8 <serial_console_init+0xa4>)
1000ee8c:	4798      	blx	r3
}
1000ee8e:	bd70      	pop	{r4, r5, r6, pc}
1000ee90:	1000c725 	.word	0x1000c725
1000ee94:	1001acac 	.word	0x1001acac
1000ee98:	1000d51d 	.word	0x1000d51d
1000ee9c:	1001ac88 	.word	0x1001ac88
1000eea0:	1001a444 	.word	0x1001a444
1000eea4:	1000ee0d 	.word	0x1000ee0d
1000eea8:	1001a440 	.word	0x1001a440
1000eeac:	1000edf5 	.word	0x1000edf5
1000eeb0:	1001a43c 	.word	0x1001a43c
1000eeb4:	40004000 	.word	0x40004000
1000eeb8:	1000d549 	.word	0x1000d549
1000eebc:	100186a8 	.word	0x100186a8
1000eec0:	10015545 	.word	0x10015545
1000eec4:	1000eda1 	.word	0x1000eda1
1000eec8:	1000d751 	.word	0x1000d751

1000eecc <_time_start>:

void _time_start(unsigned int sec)
{
1000eecc:	b5f0      	push	{r4, r5, r6, r7, lr}
1000eece:	b083      	sub	sp, #12
1000eed0:	0005      	movs	r5, r0
	system_clock_get_value();
1000eed2:	4c0d      	ldr	r4, [pc, #52]	; (1000ef08 <_time_start+0x3c>)
1000eed4:	47a0      	blx	r4
	unsigned int main_clk = system_clock_get_value();
1000eed6:	47a0      	blx	r4

	tick = (((double)(main_clk)) * ((double)0.0000493)) * (sec * 1000);
1000eed8:	4f0c      	ldr	r7, [pc, #48]	; (1000ef0c <_time_start+0x40>)
1000eeda:	47b8      	blx	r7
1000eedc:	4e0c      	ldr	r6, [pc, #48]	; (1000ef10 <_time_start+0x44>)
1000eede:	4a0d      	ldr	r2, [pc, #52]	; (1000ef14 <_time_start+0x48>)
1000eee0:	4b0d      	ldr	r3, [pc, #52]	; (1000ef18 <_time_start+0x4c>)
1000eee2:	47b0      	blx	r6
1000eee4:	9000      	str	r0, [sp, #0]
1000eee6:	9101      	str	r1, [sp, #4]
1000eee8:	20fa      	movs	r0, #250	; 0xfa
1000eeea:	0080      	lsls	r0, r0, #2
1000eeec:	4368      	muls	r0, r5
1000eeee:	47b8      	blx	r7
1000eef0:	0002      	movs	r2, r0
1000eef2:	000b      	movs	r3, r1
1000eef4:	9800      	ldr	r0, [sp, #0]
1000eef6:	9901      	ldr	r1, [sp, #4]
1000eef8:	47b0      	blx	r6
1000eefa:	4b08      	ldr	r3, [pc, #32]	; (1000ef1c <_time_start+0x50>)
1000eefc:	4798      	blx	r3
1000eefe:	4b08      	ldr	r3, [pc, #32]	; (1000ef20 <_time_start+0x54>)
1000ef00:	6018      	str	r0, [r3, #0]
}
1000ef02:	b003      	add	sp, #12
1000ef04:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000ef06:	46c0      	nop			; (mov r8, r8)
1000ef08:	1000c7a9 	.word	0x1000c7a9
1000ef0c:	100150f1 	.word	0x100150f1
1000ef10:	100144e9 	.word	0x100144e9
1000ef14:	19feaec7 	.word	0x19feaec7
1000ef18:	3f09d8ef 	.word	0x3f09d8ef
1000ef1c:	1001358d 	.word	0x1001358d
1000ef20:	10019fd8 	.word	0x10019fd8

1000ef24 <_time_done>:

unsigned int _time_done()
{
	return --tick;
1000ef24:	4b02      	ldr	r3, [pc, #8]	; (1000ef30 <_time_done+0xc>)
1000ef26:	681a      	ldr	r2, [r3, #0]
1000ef28:	1e50      	subs	r0, r2, #1
1000ef2a:	6018      	str	r0, [r3, #0]
}
1000ef2c:	4770      	bx	lr
1000ef2e:	46c0      	nop			; (mov r8, r8)
1000ef30:	10019fd8 	.word	0x10019fd8

1000ef34 <getchar_b11_timeout>:

int getchar_b11_timeout(unsigned int sec)
{
1000ef34:	b570      	push	{r4, r5, r6, lr}
1000ef36:	0004      	movs	r4, r0
	read_status = UART_READ_WAITING;
1000ef38:	2201      	movs	r2, #1
1000ef3a:	4b11      	ldr	r3, [pc, #68]	; (1000ef80 <getchar_b11_timeout+0x4c>)
1000ef3c:	701a      	strb	r2, [r3, #0]
	
	if(user_callback_func == NULL)
1000ef3e:	4b11      	ldr	r3, [pc, #68]	; (1000ef84 <getchar_b11_timeout+0x50>)
1000ef40:	681b      	ldr	r3, [r3, #0]
1000ef42:	2b00      	cmp	r3, #0
1000ef44:	d103      	bne.n	1000ef4e <getchar_b11_timeout+0x1a>
		uart_enable_callback(&uart_instance, UART_RX_COMPLETE);
1000ef46:	2102      	movs	r1, #2
1000ef48:	480f      	ldr	r0, [pc, #60]	; (1000ef88 <getchar_b11_timeout+0x54>)
1000ef4a:	4b10      	ldr	r3, [pc, #64]	; (1000ef8c <getchar_b11_timeout+0x58>)
1000ef4c:	4798      	blx	r3

	_time_start(sec);
1000ef4e:	0020      	movs	r0, r4
1000ef50:	4b0f      	ldr	r3, [pc, #60]	; (1000ef90 <getchar_b11_timeout+0x5c>)
1000ef52:	4798      	blx	r3
	
	string_input[0] = 0;
1000ef54:	490f      	ldr	r1, [pc, #60]	; (1000ef94 <getchar_b11_timeout+0x60>)
1000ef56:	2300      	movs	r3, #0
1000ef58:	700b      	strb	r3, [r1, #0]
	uart_read_buffer_job(&uart_instance, string_input, sizeof(string_input));
1000ef5a:	2201      	movs	r2, #1
1000ef5c:	480a      	ldr	r0, [pc, #40]	; (1000ef88 <getchar_b11_timeout+0x54>)
1000ef5e:	4b0e      	ldr	r3, [pc, #56]	; (1000ef98 <getchar_b11_timeout+0x64>)
1000ef60:	4798      	blx	r3
	
	while (read_status != UART_READ_DONE && _time_done() > 0 );
1000ef62:	4c07      	ldr	r4, [pc, #28]	; (1000ef80 <getchar_b11_timeout+0x4c>)
1000ef64:	4d0d      	ldr	r5, [pc, #52]	; (1000ef9c <getchar_b11_timeout+0x68>)
1000ef66:	7823      	ldrb	r3, [r4, #0]
1000ef68:	2b02      	cmp	r3, #2
1000ef6a:	d002      	beq.n	1000ef72 <getchar_b11_timeout+0x3e>
1000ef6c:	47a8      	blx	r5
1000ef6e:	2800      	cmp	r0, #0
1000ef70:	d1f9      	bne.n	1000ef66 <getchar_b11_timeout+0x32>
	
	read_status = UART_READ_NONE;
1000ef72:	2200      	movs	r2, #0
1000ef74:	4b02      	ldr	r3, [pc, #8]	; (1000ef80 <getchar_b11_timeout+0x4c>)
1000ef76:	701a      	strb	r2, [r3, #0]

	return string_input[0];
1000ef78:	4b06      	ldr	r3, [pc, #24]	; (1000ef94 <getchar_b11_timeout+0x60>)
1000ef7a:	7818      	ldrb	r0, [r3, #0]
}
1000ef7c:	bd70      	pop	{r4, r5, r6, pc}
1000ef7e:	46c0      	nop			; (mov r8, r8)
1000ef80:	10019fdc 	.word	0x10019fdc
1000ef84:	10019fe4 	.word	0x10019fe4
1000ef88:	1001ac88 	.word	0x1001ac88
1000ef8c:	1000d765 	.word	0x1000d765
1000ef90:	1000eecd 	.word	0x1000eecd
1000ef94:	10019fe0 	.word	0x10019fe0
1000ef98:	1000d729 	.word	0x1000d729
1000ef9c:	1000ef25 	.word	0x1000ef25

1000efa0 <platform_event_free>:
void platform_event_free(struct platform_event* event);
//struct str_watched_event watched_event;

void platform_event_free(struct platform_event* event)
{
	event->next = platform_event_free_list;
1000efa0:	4b02      	ldr	r3, [pc, #8]	; (1000efac <platform_event_free+0xc>)
1000efa2:	681a      	ldr	r2, [r3, #0]
1000efa4:	6002      	str	r2, [r0, #0]
	platform_event_free_list = event;
1000efa6:	6018      	str	r0, [r3, #0]
}
1000efa8:	4770      	bx	lr
1000efaa:	46c0      	nop			; (mov r8, r8)
1000efac:	10019fec 	.word	0x10019fec

1000efb0 <platform_event_post>:

void platform_event_post(uint16_t event_type, void * data, uint16_t data_len)
{
1000efb0:	b530      	push	{r4, r5, lr}
	// get a free event object
	struct platform_event* evt = platform_event_free_list;
1000efb2:	4b0b      	ldr	r3, [pc, #44]	; (1000efe0 <platform_event_post+0x30>)
1000efb4:	681c      	ldr	r4, [r3, #0]
	if(evt != NULL)
1000efb6:	2c00      	cmp	r4, #0
1000efb8:	d011      	beq.n	1000efde <platform_event_post+0x2e>
	{
		platform_event_free_list = evt->next;
1000efba:	6825      	ldr	r5, [r4, #0]
1000efbc:	601d      	str	r5, [r3, #0]
		
		evt->next = NULL;
1000efbe:	2300      	movs	r3, #0
1000efc0:	6023      	str	r3, [r4, #0]
		evt->data = data;
1000efc2:	60a1      	str	r1, [r4, #8]
		evt->data_len = data_len;
1000efc4:	80e2      	strh	r2, [r4, #6]
		evt->event_type = event_type;
1000efc6:	80a0      	strh	r0, [r4, #4]

		if(platform_event_pending_list == NULL)
1000efc8:	4b06      	ldr	r3, [pc, #24]	; (1000efe4 <platform_event_post+0x34>)
1000efca:	681a      	ldr	r2, [r3, #0]
1000efcc:	2a00      	cmp	r2, #0
1000efce:	d102      	bne.n	1000efd6 <platform_event_post+0x26>
		{
			platform_event_pending_list = evt;
1000efd0:	601c      	str	r4, [r3, #0]
1000efd2:	e004      	b.n	1000efde <platform_event_post+0x2e>
		else
		{
			struct platform_event* cur = platform_event_pending_list;
			while(cur->next != NULL)
			{
				cur = cur->next;
1000efd4:	001a      	movs	r2, r3
			platform_event_pending_list = evt;
		}
		else
		{
			struct platform_event* cur = platform_event_pending_list;
			while(cur->next != NULL)
1000efd6:	6813      	ldr	r3, [r2, #0]
1000efd8:	2b00      	cmp	r3, #0
1000efda:	d1fb      	bne.n	1000efd4 <platform_event_post+0x24>
			{
				cur = cur->next;
			}
			cur->next = evt;
1000efdc:	6014      	str	r4, [r2, #0]
		}
		
		//platform_event_signal();
	}
	
}
1000efde:	bd30      	pop	{r4, r5, pc}
1000efe0:	10019fec 	.word	0x10019fec
1000efe4:	10019fe8 	.word	0x10019fe8

1000efe8 <platform_event_init>:
	return status;
	
}

void platform_event_init()
{
1000efe8:	b570      	push	{r4, r5, r6, lr}
	uint32_t i;
	platform_event_free_list = NULL;
1000efea:	2300      	movs	r3, #0
1000efec:	4a06      	ldr	r2, [pc, #24]	; (1000f008 <platform_event_init+0x20>)
1000efee:	6013      	str	r3, [r2, #0]
	platform_event_pending_list = NULL;
1000eff0:	4a06      	ldr	r2, [pc, #24]	; (1000f00c <platform_event_init+0x24>)
1000eff2:	6013      	str	r3, [r2, #0]
1000eff4:	4c06      	ldr	r4, [pc, #24]	; (1000f010 <platform_event_init+0x28>)
1000eff6:	0026      	movs	r6, r4
1000eff8:	3678      	adds	r6, #120	; 0x78
	//memset(&watched_event,0,sizeof(struct str_watched_event));
	for(i = 0; i < PLATFORM_EVENT_POOL_DEPTH; i++)
	{
		platform_event_free(&platform_event_pool[i]);
1000effa:	4d06      	ldr	r5, [pc, #24]	; (1000f014 <platform_event_init+0x2c>)
1000effc:	0020      	movs	r0, r4
1000effe:	47a8      	blx	r5
1000f000:	340c      	adds	r4, #12
{
	uint32_t i;
	platform_event_free_list = NULL;
	platform_event_pending_list = NULL;
	//memset(&watched_event,0,sizeof(struct str_watched_event));
	for(i = 0; i < PLATFORM_EVENT_POOL_DEPTH; i++)
1000f002:	42b4      	cmp	r4, r6
1000f004:	d1fa      	bne.n	1000effc <platform_event_init+0x14>
	{
		platform_event_free(&platform_event_pool[i]);
	}
}
1000f006:	bd70      	pop	{r4, r5, r6, pc}
1000f008:	10019fec 	.word	0x10019fec
1000f00c:	10019fe8 	.word	0x10019fe8
1000f010:	10019ff0 	.word	0x10019ff0
1000f014:	1000efa1 	.word	0x1000efa1

1000f018 <at_ke_msg_send>:
	}
	return status;
}

static void at_ke_msg_send(void const * param_ptr)
{
1000f018:	b570      	push	{r4, r5, r6, lr}
1000f01a:	0004      	movs	r4, r0
	struct ke_msg *kemsg;
	uint8_t osc_en = REG_PL_RD(0x4000B1EC)&0x01;
1000f01c:	4b13      	ldr	r3, [pc, #76]	; (1000f06c <at_ke_msg_send+0x54>)
1000f01e:	681d      	ldr	r5, [r3, #0]
	ke_msg_send(param_ptr);
1000f020:	4b13      	ldr	r3, [pc, #76]	; (1000f070 <at_ke_msg_send+0x58>)
1000f022:	681b      	ldr	r3, [r3, #0]
1000f024:	4798      	blx	r3
	kemsg = ke_param2msg(param_ptr);

	if((kemsg != NULL) && (kemsg->dest_id != TASK_INTERNAL_APP)) {
1000f026:	2c0c      	cmp	r4, #12
1000f028:	d01f      	beq.n	1000f06a <at_ke_msg_send+0x52>
1000f02a:	3c0c      	subs	r4, #12
1000f02c:	88e3      	ldrh	r3, [r4, #6]
1000f02e:	2b05      	cmp	r3, #5
1000f030:	d01b      	beq.n	1000f06a <at_ke_msg_send+0x52>
		if(osc_en == 0)
1000f032:	07eb      	lsls	r3, r5, #31
1000f034:	d414      	bmi.n	1000f060 <at_ke_msg_send+0x48>
		{
			/* BLE Core is off, issue a wakeup request*/
			/* First, make sure PD4 is powered up and out of reset */
			pwr_enable_arm_wakeup(1<<1);
1000f036:	4b0f      	ldr	r3, [pc, #60]	; (1000f074 <at_ke_msg_send+0x5c>)
1000f038:	681b      	ldr	r3, [r3, #0]
1000f03a:	2002      	movs	r0, #2
1000f03c:	4798      	blx	r3
			pwr_arm_wakeup_req();
1000f03e:	4b0e      	ldr	r3, [pc, #56]	; (1000f078 <at_ke_msg_send+0x60>)
1000f040:	681b      	ldr	r3, [r3, #0]
1000f042:	4798      	blx	r3
			while (pwr_wait_BLE_out_of_reset(3));
1000f044:	4c0d      	ldr	r4, [pc, #52]	; (1000f07c <at_ke_msg_send+0x64>)
1000f046:	2003      	movs	r0, #3
1000f048:	6823      	ldr	r3, [r4, #0]
1000f04a:	4798      	blx	r3
1000f04c:	2800      	cmp	r0, #0
1000f04e:	d1fa      	bne.n	1000f046 <at_ke_msg_send+0x2e>
			pwr_disable_arm_wakeup(1<<1);
1000f050:	4b0b      	ldr	r3, [pc, #44]	; (1000f080 <at_ke_msg_send+0x68>)
1000f052:	681b      	ldr	r3, [r3, #0]
1000f054:	3002      	adds	r0, #2
1000f056:	4798      	blx	r3
			REG_PL_WR(0x4000B020, 1);
1000f058:	2201      	movs	r2, #1
1000f05a:	4b0a      	ldr	r3, [pc, #40]	; (1000f084 <at_ke_msg_send+0x6c>)
1000f05c:	601a      	str	r2, [r3, #0]
1000f05e:	e004      	b.n	1000f06a <at_ke_msg_send+0x52>
#endif	//CHIPVERSION_B0
		}
		else
		{
			/*  */
			os_sem_up(gstrFwSem);
1000f060:	4b09      	ldr	r3, [pc, #36]	; (1000f088 <at_ke_msg_send+0x70>)
1000f062:	6818      	ldr	r0, [r3, #0]
1000f064:	4b09      	ldr	r3, [pc, #36]	; (1000f08c <at_ke_msg_send+0x74>)
1000f066:	681b      	ldr	r3, [r3, #0]
1000f068:	4798      	blx	r3
		}
	}
}
1000f06a:	bd70      	pop	{r4, r5, r6, pc}
1000f06c:	4000b1ec 	.word	0x4000b1ec
1000f070:	1001a098 	.word	0x1001a098
1000f074:	1001a090 	.word	0x1001a090
1000f078:	1001a0a4 	.word	0x1001a0a4
1000f07c:	1001a078 	.word	0x1001a078
1000f080:	1001a080 	.word	0x1001a080
1000f084:	4000b020 	.word	0x4000b020
1000f088:	1001a084 	.word	0x1001a084
1000f08c:	1001a074 	.word	0x1001a074

1000f090 <samb11_plf_resume_callback>:
	rwip_prevent_sleep_clear(APP_PREVENT_SLEEP);
	return status;
}

void samb11_plf_resume_callback(void)
{
1000f090:	b510      	push	{r4, lr}
	//spi_flash_turn_off();
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0,default_samb11_clock_init[0]);
1000f092:	4b06      	ldr	r3, [pc, #24]	; (1000f0ac <samb11_plf_resume_callback+0x1c>)
1000f094:	4a06      	ldr	r2, [pc, #24]	; (1000f0b0 <samb11_plf_resume_callback+0x20>)
1000f096:	6819      	ldr	r1, [r3, #0]
1000f098:	6011      	str	r1, [r2, #0]
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1,default_samb11_clock_init[1]);
1000f09a:	685a      	ldr	r2, [r3, #4]
1000f09c:	4b05      	ldr	r3, [pc, #20]	; (1000f0b4 <samb11_plf_resume_callback+0x24>)
1000f09e:	601a      	str	r2, [r3, #0]
	if(samb11_app_resume_cb != NULL)
1000f0a0:	4b05      	ldr	r3, [pc, #20]	; (1000f0b8 <samb11_plf_resume_callback+0x28>)
1000f0a2:	681b      	ldr	r3, [r3, #0]
1000f0a4:	2b00      	cmp	r3, #0
1000f0a6:	d000      	beq.n	1000f0aa <samb11_plf_resume_callback+0x1a>
	{
		samb11_app_resume_cb();
1000f0a8:	4798      	blx	r3
	}
}
1000f0aa:	bd10      	pop	{r4, pc}
1000f0ac:	1001acd4 	.word	0x1001acd4
1000f0b0:	4000b00c 	.word	0x4000b00c
1000f0b4:	4000b010 	.word	0x4000b010
1000f0b8:	1001afb0 	.word	0x1001afb0

1000f0bc <init_port_list>:
port port_list[LPGPIO_MAX];
uint32_t default_samb11_clock_init[2];
void samb11_plf_resume_callback(void);

void init_port_list(void)
{
1000f0bc:	b570      	push	{r4, r5, r6, lr}
	uint8_t i;
	memset(port_list,0,sizeof(port_list));
1000f0be:	2232      	movs	r2, #50	; 0x32
1000f0c0:	2100      	movs	r1, #0
1000f0c2:	480d      	ldr	r0, [pc, #52]	; (1000f0f8 <init_port_list+0x3c>)
1000f0c4:	4b0d      	ldr	r3, [pc, #52]	; (1000f0fc <init_port_list+0x40>)
1000f0c6:	4798      	blx	r3
1000f0c8:	2100      	movs	r1, #0
	for(i=0;i<(sizeof(port_list)/sizeof(port_list[0]));i++) {
		port_list[i].bit.gpio_num = i;
1000f0ca:	480b      	ldr	r0, [pc, #44]	; (1000f0f8 <init_port_list+0x3c>)
		port_list[i].bit.available = 1;
1000f0cc:	2501      	movs	r5, #1
		port_list[i].bit.configured = 0;
1000f0ce:	2402      	movs	r4, #2
void init_port_list(void)
{
	uint8_t i;
	memset(port_list,0,sizeof(port_list));
	for(i=0;i<(sizeof(port_list)/sizeof(port_list[0]));i++) {
		port_list[i].bit.gpio_num = i;
1000f0d0:	004a      	lsls	r2, r1, #1
1000f0d2:	5411      	strb	r1, [r2, r0]
		port_list[i].bit.available = 1;
1000f0d4:	1882      	adds	r2, r0, r2
1000f0d6:	7853      	ldrb	r3, [r2, #1]
1000f0d8:	432b      	orrs	r3, r5
		port_list[i].bit.configured = 0;
1000f0da:	b2db      	uxtb	r3, r3
1000f0dc:	43a3      	bics	r3, r4
1000f0de:	7053      	strb	r3, [r2, #1]
1000f0e0:	3101      	adds	r1, #1

void init_port_list(void)
{
	uint8_t i;
	memset(port_list,0,sizeof(port_list));
	for(i=0;i<(sizeof(port_list)/sizeof(port_list[0]));i++) {
1000f0e2:	2919      	cmp	r1, #25
1000f0e4:	d1f4      	bne.n	1000f0d0 <init_port_list+0x14>
		port_list[i].bit.gpio_num = i;
		port_list[i].bit.available = 1;
		port_list[i].bit.configured = 0;
	}
	//Set the GPIO for SWD is not available
	port_list[0].bit.available = 0;
1000f0e6:	4b04      	ldr	r3, [pc, #16]	; (1000f0f8 <init_port_list+0x3c>)
1000f0e8:	785a      	ldrb	r2, [r3, #1]
1000f0ea:	3918      	subs	r1, #24
1000f0ec:	438a      	bics	r2, r1
1000f0ee:	705a      	strb	r2, [r3, #1]
	port_list[1].bit.available = 0;
1000f0f0:	78da      	ldrb	r2, [r3, #3]
1000f0f2:	438a      	bics	r2, r1
1000f0f4:	70da      	strb	r2, [r3, #3]
	//GPIO 14 is used for Coex and controlled by Firmware
	//port_list[14].bit.available = 0;
}
1000f0f6:	bd70      	pop	{r4, r5, r6, pc}
1000f0f8:	1001acf0 	.word	0x1001acf0
1000f0fc:	1001522d 	.word	0x1001522d

1000f100 <init_clock>:

void init_clock(void)
{
	uint32_t regval;
	regval = REG_PL_RD(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0);
1000f100:	4a06      	ldr	r2, [pc, #24]	; (1000f11c <init_clock+0x1c>)
1000f102:	6811      	ldr	r1, [r2, #0]
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WATCHDOG_1_CLK_EN);
	//disable UART core & interface clocks
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_CORE_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_IF_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_1_CORE_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_1_IF_CLK_EN);
1000f104:	4b06      	ldr	r3, [pc, #24]	; (1000f120 <init_clock+0x20>)
1000f106:	400b      	ands	r3, r1
	//disable I2C core 1 clocks
	//regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CORTUS_I2C1_CORE_CLK_EN);		//do not disable I2C because I2C driver in ASF will not enable.
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0,regval);
1000f108:	6013      	str	r3, [r2, #0]
	default_samb11_clock_init[0] = regval;
1000f10a:	4a06      	ldr	r2, [pc, #24]	; (1000f124 <init_clock+0x24>)
1000f10c:	6013      	str	r3, [r2, #0]
	
	regval = REG_PL_RD(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1);
1000f10e:	4906      	ldr	r1, [pc, #24]	; (1000f128 <init_clock+0x28>)
1000f110:	6808      	ldr	r0, [r1, #0]
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_4_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_5_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_6_CLK_EN);
	//disable SPI SCK Phase int clock 
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI0_SCK_PHASE_INT_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI1_SCK_PHASE_INT_CLK_EN);
1000f112:	4b06      	ldr	r3, [pc, #24]	; (1000f12c <init_clock+0x2c>)
1000f114:	4003      	ands	r3, r0
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1,regval);
1000f116:	600b      	str	r3, [r1, #0]
	default_samb11_clock_init[1] = regval;
1000f118:	6053      	str	r3, [r2, #4]
	//ARM debugger
	
	//store default values
}
1000f11a:	4770      	bx	lr
1000f11c:	4000b00c 	.word	0x4000b00c
1000f120:	fffe0fd3 	.word	0xfffe0fd3
1000f124:	1001acd4 	.word	0x1001acd4
1000f128:	4000b010 	.word	0x4000b010
1000f12c:	ffffe7c0 	.word	0xffffe7c0

1000f130 <platform_driver_init>:

plf_drv_status platform_driver_init()
{
1000f130:	b5f0      	push	{r4, r5, r6, r7, lr}
1000f132:	4657      	mov	r7, sl
1000f134:	464e      	mov	r6, r9
1000f136:	4645      	mov	r5, r8
1000f138:	b4e0      	push	{r5, r6, r7}
	plf_drv_status status = STATUS_NOT_INITIALIZED;
	if((platform_initialized == 0) || (platform_initialized != 1)) {
1000f13a:	4b4f      	ldr	r3, [pc, #316]	; (1000f278 <platform_driver_init+0x148>)
1000f13c:	781b      	ldrb	r3, [r3, #0]
1000f13e:	2b00      	cmp	r3, #0
1000f140:	d004      	beq.n	1000f14c <platform_driver_init+0x1c>
1000f142:	4b4d      	ldr	r3, [pc, #308]	; (1000f278 <platform_driver_init+0x148>)
1000f144:	781b      	ldrb	r3, [r3, #0]
1000f146:	2b01      	cmp	r3, #1
1000f148:	d100      	bne.n	1000f14c <platform_driver_init+0x1c>
1000f14a:	e08c      	b.n	1000f266 <platform_driver_init+0x136>
		init_port_list();
1000f14c:	4b4b      	ldr	r3, [pc, #300]	; (1000f27c <platform_driver_init+0x14c>)
1000f14e:	4798      	blx	r3
		init_clock();
1000f150:	4b4b      	ldr	r3, [pc, #300]	; (1000f280 <platform_driver_init+0x150>)
1000f152:	4798      	blx	r3
		// Initialize the ble stack message handler to NULL
		ble_stack_message_handler = NULL;
1000f154:	2300      	movs	r3, #0
1000f156:	4698      	mov	r8, r3
1000f158:	4b4a      	ldr	r3, [pc, #296]	; (1000f284 <platform_driver_init+0x154>)
1000f15a:	4642      	mov	r2, r8
1000f15c:	601a      	str	r2, [r3, #0]

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000f15e:	4c4a      	ldr	r4, [pc, #296]	; (1000f288 <platform_driver_init+0x158>)
1000f160:	2380      	movs	r3, #128	; 0x80
1000f162:	2280      	movs	r2, #128	; 0x80
1000f164:	0412      	lsls	r2, r2, #16
1000f166:	4692      	mov	sl, r2
1000f168:	50e2      	str	r2, [r4, r3]
1000f16a:	2280      	movs	r2, #128	; 0x80
1000f16c:	0452      	lsls	r2, r2, #17
1000f16e:	4691      	mov	r9, r2
1000f170:	50e2      	str	r2, [r4, r3]
#ifdef CHIPVERSION_B0
		NVIC_DisableIRQ(GPIO0_IRQn);
		NVIC_DisableIRQ(GPIO1_IRQn);
		/* NVIC_DisableIRQ(PORT0_COMB_IRQn); */
		/* NVIC_DisableIRQ(PORT1_COMB_IRQn); */
		platform_register_isr = (uint8_t (*)(uint8_t ,void *))0x000007d7;
1000f172:	4d46      	ldr	r5, [pc, #280]	; (1000f28c <platform_driver_init+0x15c>)
1000f174:	4b46      	ldr	r3, [pc, #280]	; (1000f290 <platform_driver_init+0x160>)
1000f176:	602b      	str	r3, [r5, #0]
		platform_unregister_isr = (uint8_t (*)(uint8_t ))0x000007bd;
1000f178:	4b46      	ldr	r3, [pc, #280]	; (1000f294 <platform_driver_init+0x164>)
1000f17a:	4a47      	ldr	r2, [pc, #284]	; (1000f298 <platform_driver_init+0x168>)
1000f17c:	6013      	str	r3, [r2, #0]
		handle_ext_wakeup_isr = (void (*)(void))0x1bc51;
1000f17e:	4947      	ldr	r1, [pc, #284]	; (1000f29c <platform_driver_init+0x16c>)
1000f180:	4a47      	ldr	r2, [pc, #284]	; (1000f2a0 <platform_driver_init+0x170>)
1000f182:	6011      	str	r1, [r2, #0]
		gapm_get_task_from_id = (ke_task_id_t (*)(ke_msg_id_t))(*((unsigned int *)0x100400bc));
1000f184:	4a47      	ldr	r2, [pc, #284]	; (1000f2a4 <platform_driver_init+0x174>)
1000f186:	6811      	ldr	r1, [r2, #0]
1000f188:	4a47      	ldr	r2, [pc, #284]	; (1000f2a8 <platform_driver_init+0x178>)
1000f18a:	6011      	str	r1, [r2, #0]
		gapm_get_id_from_task = (ke_task_id_t (*)(ke_msg_id_t))(*((unsigned int *)0x100400b8));
1000f18c:	4a47      	ldr	r2, [pc, #284]	; (1000f2ac <platform_driver_init+0x17c>)
1000f18e:	6811      	ldr	r1, [r2, #0]
1000f190:	4a47      	ldr	r2, [pc, #284]	; (1000f2b0 <platform_driver_init+0x180>)
1000f192:	6011      	str	r1, [r2, #0]
		rwip_prevent_sleep_set = (void (*)(uint16_t))0x0001b99f;
1000f194:	4947      	ldr	r1, [pc, #284]	; (1000f2b4 <platform_driver_init+0x184>)
1000f196:	4a48      	ldr	r2, [pc, #288]	; (1000f2b8 <platform_driver_init+0x188>)
1000f198:	6011      	str	r1, [r2, #0]
		rwip_prevent_sleep_clear = (void (*)(uint16_t))0x0001b9db;
1000f19a:	4948      	ldr	r1, [pc, #288]	; (1000f2bc <platform_driver_init+0x18c>)
1000f19c:	4a48      	ldr	r2, [pc, #288]	; (1000f2c0 <platform_driver_init+0x190>)
1000f19e:	6011      	str	r1, [r2, #0]
		apps_resume_cb = (uint32_t *)0x1004003c;
1000f1a0:	4f48      	ldr	r7, [pc, #288]	; (1000f2c4 <platform_driver_init+0x194>)
1000f1a2:	4a49      	ldr	r2, [pc, #292]	; (1000f2c8 <platform_driver_init+0x198>)
1000f1a4:	603a      	str	r2, [r7, #0]
		actualfreq = (uint32_t *)0x10041FC0; /* set to NULL for now as clock calibration is disabled for the time being */  /*(uint32_t *)0x10006bd8;*/
1000f1a6:	4949      	ldr	r1, [pc, #292]	; (1000f2cc <platform_driver_init+0x19c>)
1000f1a8:	4a49      	ldr	r2, [pc, #292]	; (1000f2d0 <platform_driver_init+0x1a0>)
1000f1aa:	6011      	str	r1, [r2, #0]
		updateuartbr_fp = (void (*)())0x10041FC4;
1000f1ac:	4949      	ldr	r1, [pc, #292]	; (1000f2d4 <platform_driver_init+0x1a4>)
1000f1ae:	4a4a      	ldr	r2, [pc, #296]	; (1000f2d8 <platform_driver_init+0x1a8>)
1000f1b0:	6011      	str	r1, [r2, #0]
		wakeup_source_active_cb = (uint32_t *)0x10041FD4;
1000f1b2:	4e4a      	ldr	r6, [pc, #296]	; (1000f2dc <platform_driver_init+0x1ac>)
1000f1b4:	4a4a      	ldr	r2, [pc, #296]	; (1000f2e0 <platform_driver_init+0x1b0>)
1000f1b6:	6032      	str	r2, [r6, #0]
		wakeup_event_pending = (uint32_t *)0x10041FD8;
1000f1b8:	494a      	ldr	r1, [pc, #296]	; (1000f2e4 <platform_driver_init+0x1b4>)
1000f1ba:	4a4b      	ldr	r2, [pc, #300]	; (1000f2e8 <platform_driver_init+0x1b8>)
1000f1bc:	6011      	str	r1, [r2, #0]
		/* power APIs */
		pwr_enable_arm_wakeup = (void (*)(uint32_t wakeup_domain))0x0001cbe9;
1000f1be:	494b      	ldr	r1, [pc, #300]	; (1000f2ec <platform_driver_init+0x1bc>)
1000f1c0:	4a4b      	ldr	r2, [pc, #300]	; (1000f2f0 <platform_driver_init+0x1c0>)
1000f1c2:	6011      	str	r1, [r2, #0]
		pwr_disable_arm_wakeup = (void (*)(uint32_t wakeup_domain))0x0001cd8f;
1000f1c4:	494b      	ldr	r1, [pc, #300]	; (1000f2f4 <platform_driver_init+0x1c4>)
1000f1c6:	4a4c      	ldr	r2, [pc, #304]	; (1000f2f8 <platform_driver_init+0x1c8>)
1000f1c8:	6011      	str	r1, [r2, #0]
		pwr_arm_wakeup_req = (int (*)(void))0x0001cea3;
1000f1ca:	494c      	ldr	r1, [pc, #304]	; (1000f2fc <platform_driver_init+0x1cc>)
1000f1cc:	4a4c      	ldr	r2, [pc, #304]	; (1000f300 <platform_driver_init+0x1d0>)
1000f1ce:	6011      	str	r1, [r2, #0]
		pwr_wait_BLE_out_of_reset = (int (*)(uint32_t threshold))0x0001cbcf;
1000f1d0:	494c      	ldr	r1, [pc, #304]	; (1000f304 <platform_driver_init+0x1d4>)
1000f1d2:	4a4d      	ldr	r2, [pc, #308]	; (1000f308 <platform_driver_init+0x1d8>)
1000f1d4:	6011      	str	r1, [r2, #0]
		NVIC_DisableIRQ(PORT1_ALL_IRQn);
		platform_register_isr = register_isr;
		platform_unregister_isr = unregister_isr;
		handle_ext_wakeup_isr = (void (*)(void))0x14085;
#endif
		platform_unregister_isr(GPIO1_COMBINED_VECTOR_TABLE_INDEX);
1000f1d6:	2028      	movs	r0, #40	; 0x28
1000f1d8:	4798      	blx	r3
		platform_register_isr(GPIO1_COMBINED_VECTOR_TABLE_INDEX,(void*)PORT1_COMB_Handler);
1000f1da:	494c      	ldr	r1, [pc, #304]	; (1000f30c <platform_driver_init+0x1dc>)
1000f1dc:	2028      	movs	r0, #40	; 0x28
1000f1de:	682b      	ldr	r3, [r5, #0]
1000f1e0:	4798      	blx	r3
		platform_register_isr(GPIO0_COMBINED_VECTOR_TABLE_INDEX,(void*)gpio0_combined_isr_handler);
1000f1e2:	682b      	ldr	r3, [r5, #0]
1000f1e4:	494a      	ldr	r1, [pc, #296]	; (1000f310 <platform_driver_init+0x1e0>)
1000f1e6:	2027      	movs	r0, #39	; 0x27
1000f1e8:	4798      	blx	r3
		//gstrFwSem               = (void *)0x100004e4;
		//NMI_MsgQueueRecv = (int (*)(void *, void ** )) 0x00017f67;
		//InternalAppMsgQHandle = (void *)0x10001158;
		//ke_free = (void (*)(void *)) 0x00015e3d;
#elif CHIPVERSION_B0
		ke_msg_send 	= (void (*)(void const *))(*((unsigned int *)0x100400e4));
1000f1ea:	4b4a      	ldr	r3, [pc, #296]	; (1000f314 <platform_driver_init+0x1e4>)
1000f1ec:	681a      	ldr	r2, [r3, #0]
1000f1ee:	4b4a      	ldr	r3, [pc, #296]	; (1000f318 <platform_driver_init+0x1e8>)
1000f1f0:	601a      	str	r2, [r3, #0]
		ke_msg_alloc 	= (void* (*)(ke_msg_id_t const id, ke_task_id_t const dest_id,
1000f1f2:	4a4a      	ldr	r2, [pc, #296]	; (1000f31c <platform_driver_init+0x1ec>)
1000f1f4:	4b4a      	ldr	r3, [pc, #296]	; (1000f320 <platform_driver_init+0x1f0>)
1000f1f6:	601a      	str	r2, [r3, #0]
										ke_task_id_t const src_id, uint16_t const param_len) )0x00019fe9;
		os_sem_up 		= (int (*)(void*))0x0001dbdd;
1000f1f8:	4a4a      	ldr	r2, [pc, #296]	; (1000f324 <platform_driver_init+0x1f4>)
1000f1fa:	4b4b      	ldr	r3, [pc, #300]	; (1000f328 <platform_driver_init+0x1f8>)
1000f1fc:	601a      	str	r2, [r3, #0]
		os_sem_down		= (int (*)(void*))0x0001dc5b;
1000f1fe:	4a4b      	ldr	r2, [pc, #300]	; (1000f32c <platform_driver_init+0x1fc>)
1000f200:	4b4b      	ldr	r3, [pc, #300]	; (1000f330 <platform_driver_init+0x200>)
1000f202:	601a      	str	r2, [r3, #0]
		gstrFwSem 		= (void*)0x100405ec;
1000f204:	4a4b      	ldr	r2, [pc, #300]	; (1000f334 <platform_driver_init+0x204>)
1000f206:	4b4c      	ldr	r3, [pc, #304]	; (1000f338 <platform_driver_init+0x208>)
1000f208:	601a      	str	r2, [r3, #0]
		NMI_MsgQueueRecv = (int(*)(void*, void ** ))0x0001d5e3;
1000f20a:	4a4c      	ldr	r2, [pc, #304]	; (1000f33c <platform_driver_init+0x20c>)
1000f20c:	4b4c      	ldr	r3, [pc, #304]	; (1000f340 <platform_driver_init+0x210>)
1000f20e:	601a      	str	r2, [r3, #0]
		InternalAppMsgQHandle = (void*)0x10040c20;
1000f210:	4a4c      	ldr	r2, [pc, #304]	; (1000f344 <platform_driver_init+0x214>)
1000f212:	4b4d      	ldr	r3, [pc, #308]	; (1000f348 <platform_driver_init+0x218>)
1000f214:	601a      	str	r2, [r3, #0]
		ke_free = (void(*)(void*))0x00019f09;
1000f216:	4a4d      	ldr	r2, [pc, #308]	; (1000f34c <platform_driver_init+0x21c>)
1000f218:	4b4d      	ldr	r3, [pc, #308]	; (1000f350 <platform_driver_init+0x220>)
1000f21a:	601a      	str	r2, [r3, #0]
#endif
		memset(rx_buffer,0,sizeof(rx_buffer));
1000f21c:	22a0      	movs	r2, #160	; 0xa0
1000f21e:	0092      	lsls	r2, r2, #2
1000f220:	2100      	movs	r1, #0
1000f222:	484c      	ldr	r0, [pc, #304]	; (1000f354 <platform_driver_init+0x224>)
1000f224:	4b4c      	ldr	r3, [pc, #304]	; (1000f358 <platform_driver_init+0x228>)
1000f226:	4798      	blx	r3
		plf_event_buff_index = PLF_EVENT_BUFFER_START_INDEX;
1000f228:	2280      	movs	r2, #128	; 0x80
1000f22a:	0092      	lsls	r2, r2, #2
1000f22c:	4b4b      	ldr	r3, [pc, #300]	; (1000f35c <platform_driver_init+0x22c>)
1000f22e:	801a      	strh	r2, [r3, #0]
		platform_event_init();
1000f230:	4b4b      	ldr	r3, [pc, #300]	; (1000f360 <platform_driver_init+0x230>)
1000f232:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000f234:	4653      	mov	r3, sl
1000f236:	6023      	str	r3, [r4, #0]
1000f238:	464b      	mov	r3, r9
1000f23a:	6023      	str	r3, [r4, #0]
		
#ifndef CHIPVERSION_B0		
		// spi_flash clock fix.
		spi_flash_clock_init();
#endif
		samb11_app_resume_cb = NULL;
1000f23c:	4b49      	ldr	r3, [pc, #292]	; (1000f364 <platform_driver_init+0x234>)
1000f23e:	4642      	mov	r2, r8
1000f240:	601a      	str	r2, [r3, #0]
		*apps_resume_cb = (uint32_t)((resume_callback)samb11_plf_resume_callback);
1000f242:	683b      	ldr	r3, [r7, #0]
1000f244:	4a48      	ldr	r2, [pc, #288]	; (1000f368 <platform_driver_init+0x238>)
1000f246:	601a      	str	r2, [r3, #0]
		*wakeup_source_active_cb = (uint32_t)((wakeup_source_active_callback)wakeup_active_event_callback);
1000f248:	6833      	ldr	r3, [r6, #0]
1000f24a:	4a48      	ldr	r2, [pc, #288]	; (1000f36c <platform_driver_init+0x23c>)
1000f24c:	601a      	str	r2, [r3, #0]
		wakeup_int_unregister_callback(0);
1000f24e:	2000      	movs	r0, #0
1000f250:	4c47      	ldr	r4, [pc, #284]	; (1000f370 <platform_driver_init+0x240>)
1000f252:	47a0      	blx	r4
		wakeup_int_unregister_callback(1);
1000f254:	2001      	movs	r0, #1
1000f256:	47a0      	blx	r4
		wakeup_int_unregister_callback(2);
1000f258:	2002      	movs	r0, #2
1000f25a:	47a0      	blx	r4
		platform_initialized = 1;
1000f25c:	2201      	movs	r2, #1
1000f25e:	4b06      	ldr	r3, [pc, #24]	; (1000f278 <platform_driver_init+0x148>)
1000f260:	701a      	strb	r2, [r3, #0]
		status = STATUS_SUCCESS;
1000f262:	2000      	movs	r0, #0
1000f264:	e003      	b.n	1000f26e <platform_driver_init+0x13e>
	}
	else {
		platform_initialized = 1;
1000f266:	2201      	movs	r2, #1
1000f268:	4b03      	ldr	r3, [pc, #12]	; (1000f278 <platform_driver_init+0x148>)
1000f26a:	701a      	strb	r2, [r3, #0]
		status = STATUS_ALREADY_INITIALIZED;
1000f26c:	2001      	movs	r0, #1
	}
	return status;
}
1000f26e:	bc1c      	pop	{r2, r3, r4}
1000f270:	4690      	mov	r8, r2
1000f272:	4699      	mov	r9, r3
1000f274:	46a2      	mov	sl, r4
1000f276:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000f278:	1001a07c 	.word	0x1001a07c
1000f27c:	1000f0bd 	.word	0x1000f0bd
1000f280:	1000f101 	.word	0x1000f101
1000f284:	1001a09c 	.word	0x1001a09c
1000f288:	e000e100 	.word	0xe000e100
1000f28c:	1001afa4 	.word	0x1001afa4
1000f290:	000007d7 	.word	0x000007d7
1000f294:	000007bd 	.word	0x000007bd
1000f298:	1001ace0 	.word	0x1001ace0
1000f29c:	0001bc51 	.word	0x0001bc51
1000f2a0:	1001afa8 	.word	0x1001afa8
1000f2a4:	100400bc 	.word	0x100400bc
1000f2a8:	1001a070 	.word	0x1001a070
1000f2ac:	100400b8 	.word	0x100400b8
1000f2b0:	1001a06c 	.word	0x1001a06c
1000f2b4:	0001b99f 	.word	0x0001b99f
1000f2b8:	1001acdc 	.word	0x1001acdc
1000f2bc:	0001b9db 	.word	0x0001b9db
1000f2c0:	1001ace8 	.word	0x1001ace8
1000f2c4:	1001afb8 	.word	0x1001afb8
1000f2c8:	1004003c 	.word	0x1004003c
1000f2cc:	10041fc0 	.word	0x10041fc0
1000f2d0:	1001acec 	.word	0x1001acec
1000f2d4:	10041fc4 	.word	0x10041fc4
1000f2d8:	1001afb4 	.word	0x1001afb4
1000f2dc:	1001afac 	.word	0x1001afac
1000f2e0:	10041fd4 	.word	0x10041fd4
1000f2e4:	10041fd8 	.word	0x10041fd8
1000f2e8:	1001ace4 	.word	0x1001ace4
1000f2ec:	0001cbe9 	.word	0x0001cbe9
1000f2f0:	1001a090 	.word	0x1001a090
1000f2f4:	0001cd8f 	.word	0x0001cd8f
1000f2f8:	1001a080 	.word	0x1001a080
1000f2fc:	0001cea3 	.word	0x0001cea3
1000f300:	1001a0a4 	.word	0x1001a0a4
1000f304:	0001cbcf 	.word	0x0001cbcf
1000f308:	1001a078 	.word	0x1001a078
1000f30c:	1000f7b9 	.word	0x1000f7b9
1000f310:	1000f74d 	.word	0x1000f74d
1000f314:	100400e4 	.word	0x100400e4
1000f318:	1001a098 	.word	0x1001a098
1000f31c:	00019fe9 	.word	0x00019fe9
1000f320:	1001a0a8 	.word	0x1001a0a8
1000f324:	0001dbdd 	.word	0x0001dbdd
1000f328:	1001a074 	.word	0x1001a074
1000f32c:	0001dc5b 	.word	0x0001dc5b
1000f330:	1001a088 	.word	0x1001a088
1000f334:	100405ec 	.word	0x100405ec
1000f338:	1001a084 	.word	0x1001a084
1000f33c:	0001d5e3 	.word	0x0001d5e3
1000f340:	1001a094 	.word	0x1001a094
1000f344:	10040c20 	.word	0x10040c20
1000f348:	1001a0ac 	.word	0x1001a0ac
1000f34c:	00019f09 	.word	0x00019f09
1000f350:	1001a068 	.word	0x1001a068
1000f354:	1001ad24 	.word	0x1001ad24
1000f358:	1001522d 	.word	0x1001522d
1000f35c:	1001afbc 	.word	0x1001afbc
1000f360:	1000efe9 	.word	0x1000efe9
1000f364:	1001afb0 	.word	0x1001afb0
1000f368:	1000f091 	.word	0x1000f091
1000f36c:	1000f815 	.word	0x1000f815
1000f370:	1000f7fd 	.word	0x1000f7fd

1000f374 <platform_register_ble_msg_handler>:


plf_drv_status platform_register_ble_msg_handler(platform_interface_callback fp)
{
	plf_drv_status status;
	if(platform_initialized == 1) {
1000f374:	4b04      	ldr	r3, [pc, #16]	; (1000f388 <platform_register_ble_msg_handler+0x14>)
1000f376:	781a      	ldrb	r2, [r3, #0]
		ble_stack_message_handler = fp;
		status = STATUS_SUCCESS;
	}
	else {
		status = STATUS_NOT_INITIALIZED;
1000f378:	2305      	movs	r3, #5


plf_drv_status platform_register_ble_msg_handler(platform_interface_callback fp)
{
	plf_drv_status status;
	if(platform_initialized == 1) {
1000f37a:	2a01      	cmp	r2, #1
1000f37c:	d102      	bne.n	1000f384 <platform_register_ble_msg_handler+0x10>
		ble_stack_message_handler = fp;
1000f37e:	4b03      	ldr	r3, [pc, #12]	; (1000f38c <platform_register_ble_msg_handler+0x18>)
1000f380:	6018      	str	r0, [r3, #0]
		status = STATUS_SUCCESS;
1000f382:	2300      	movs	r3, #0
	}
	else {
		status = STATUS_NOT_INITIALIZED;
	}
	return status;
}
1000f384:	0018      	movs	r0, r3
1000f386:	4770      	bx	lr
1000f388:	1001a07c 	.word	0x1001a07c
1000f38c:	1001a09c 	.word	0x1001a09c

1000f390 <platform_interface_send>:


//Sends a message through RW kernel messaging API
//struct ke_msg * p_msg;
void platform_interface_send(uint8_t* data, uint32_t len)
{
1000f390:	b570      	push	{r4, r5, r6, lr}
1000f392:	0004      	movs	r4, r0
	void* params;
	
	#if (CHIPVERSION_B0)
	ke_task_id_t dest_id;
	dest_id = p_msg_hdr->dest_id;
	if(gapm_get_task_from_id != NULL)
1000f394:	4b0e      	ldr	r3, [pc, #56]	; (1000f3d0 <platform_interface_send+0x40>)
1000f396:	681b      	ldr	r3, [r3, #0]
1000f398:	2b00      	cmp	r3, #0
1000f39a:	d002      	beq.n	1000f3a2 <platform_interface_send+0x12>
		p_msg_hdr->dest_id = gapm_get_task_from_id(dest_id);
1000f39c:	8840      	ldrh	r0, [r0, #2]
1000f39e:	4798      	blx	r3
1000f3a0:	8060      	strh	r0, [r4, #2]
	#endif	//CHIPVERSION_B0
	// Allocate the kernel message
	params = ke_msg_alloc(p_msg_hdr->id, p_msg_hdr->dest_id, p_msg_hdr->src_id, p_msg_hdr->param_len);
1000f3a2:	88e3      	ldrh	r3, [r4, #6]
1000f3a4:	88a2      	ldrh	r2, [r4, #4]
1000f3a6:	8861      	ldrh	r1, [r4, #2]
1000f3a8:	8820      	ldrh	r0, [r4, #0]
1000f3aa:	4d0a      	ldr	r5, [pc, #40]	; (1000f3d4 <platform_interface_send+0x44>)
1000f3ac:	682d      	ldr	r5, [r5, #0]
1000f3ae:	47a8      	blx	r5
1000f3b0:	0005      	movs	r5, r0
											
	//no params
	if (p_msg_hdr->param_len == 0)
1000f3b2:	88e2      	ldrh	r2, [r4, #6]
1000f3b4:	2a00      	cmp	r2, #0
1000f3b6:	d102      	bne.n	1000f3be <platform_interface_send+0x2e>
	{
		// Send message directly
		at_ke_msg_send(params);
1000f3b8:	4b07      	ldr	r3, [pc, #28]	; (1000f3d8 <platform_interface_send+0x48>)
1000f3ba:	4798      	blx	r3
1000f3bc:	e006      	b.n	1000f3cc <platform_interface_send+0x3c>
	}
	else
	{
		//copy params
		memcpy(params,&(data[KE_MSG_HDR_LENGTH]),p_msg_hdr->param_len);
1000f3be:	0021      	movs	r1, r4
1000f3c0:	3108      	adds	r1, #8
1000f3c2:	4b06      	ldr	r3, [pc, #24]	; (1000f3dc <platform_interface_send+0x4c>)
1000f3c4:	4798      	blx	r3
		// Send the kernel message
		at_ke_msg_send(params);
1000f3c6:	0028      	movs	r0, r5
1000f3c8:	4b03      	ldr	r3, [pc, #12]	; (1000f3d8 <platform_interface_send+0x48>)
1000f3ca:	4798      	blx	r3
	}
}
1000f3cc:	bd70      	pop	{r4, r5, r6, pc}
1000f3ce:	46c0      	nop			; (mov r8, r8)
1000f3d0:	1001a070 	.word	0x1001a070
1000f3d4:	1001a0a8 	.word	0x1001a0a8
1000f3d8:	1000f019 	.word	0x1000f019
1000f3dc:	1001521b 	.word	0x1001521b

1000f3e0 <send_plf_int_msg_ind>:

void send_plf_int_msg_ind(uint8_t intr_index, uint8_t callback_id, void *data, uint16_t data_len)
{
1000f3e0:	b570      	push	{r4, r5, r6, lr}
1000f3e2:	0015      	movs	r5, r2
1000f3e4:	001c      	movs	r4, r3
	void* params;
//#if (CHIPVERSION_A4)	
	//os_sem_up(gstrFwSem);
//#endif
	// Allocate the kernel message
	params = ke_msg_alloc(PERIPHERAL_INTERRUPT_EVENT, TASK_INTERNAL_APP, BUILD_INTR_SRCID(callback_id,intr_index), data_len);
1000f3e6:	020a      	lsls	r2, r1, #8
1000f3e8:	4302      	orrs	r2, r0
1000f3ea:	4b0a      	ldr	r3, [pc, #40]	; (1000f414 <send_plf_int_msg_ind+0x34>)
1000f3ec:	681e      	ldr	r6, [r3, #0]
1000f3ee:	0023      	movs	r3, r4
1000f3f0:	2105      	movs	r1, #5
1000f3f2:	20a0      	movs	r0, #160	; 0xa0
1000f3f4:	00c0      	lsls	r0, r0, #3
1000f3f6:	47b0      	blx	r6
1000f3f8:	1e06      	subs	r6, r0, #0
											
	//no params
	if(params != NULL) {
1000f3fa:	d00a      	beq.n	1000f412 <send_plf_int_msg_ind+0x32>
		if((data_len != 0) && (NULL != data))
1000f3fc:	2c00      	cmp	r4, #0
1000f3fe:	d005      	beq.n	1000f40c <send_plf_int_msg_ind+0x2c>
1000f400:	2d00      	cmp	r5, #0
1000f402:	d003      	beq.n	1000f40c <send_plf_int_msg_ind+0x2c>
		{
			//copy params
			memcpy(params, data, data_len);
1000f404:	0022      	movs	r2, r4
1000f406:	0029      	movs	r1, r5
1000f408:	4b03      	ldr	r3, [pc, #12]	; (1000f418 <send_plf_int_msg_ind+0x38>)
1000f40a:	4798      	blx	r3
		}
		// Send the kernel message
		at_ke_msg_send(params);
1000f40c:	0030      	movs	r0, r6
1000f40e:	4b03      	ldr	r3, [pc, #12]	; (1000f41c <send_plf_int_msg_ind+0x3c>)
1000f410:	4798      	blx	r3
	}
}
1000f412:	bd70      	pop	{r4, r5, r6, pc}
1000f414:	1001a0a8 	.word	0x1001a0a8
1000f418:	1001521b 	.word	0x1001521b
1000f41c:	1000f019 	.word	0x1000f019

1000f420 <platform_event_wait>:
//Waits on InternalAppMsgQHandle Queue
// This function won't busy wait if nothing on queue but will down the semaphore and go to a blocking state
// The OS then will move control to other higher priority tasks and will only return if these tasks finish processing AND the queue has received 
//a msg
plf_drv_status platform_event_wait(uint32_t timeout)
{
1000f420:	b5f0      	push	{r4, r5, r6, r7, lr}
1000f422:	465f      	mov	r7, fp
1000f424:	4656      	mov	r6, sl
1000f426:	464d      	mov	r5, r9
1000f428:	4644      	mov	r4, r8
1000f42a:	b4f0      	push	{r4, r5, r6, r7}
1000f42c:	b087      	sub	sp, #28
	static struct ke_msg* rcv_msg;
	static struct ke_msghdr	*ke_msg_hdr;
	plf_drv_status status = STATUS_SUCCESS;
	uint8_t bEventTimeoutFlag = 0;
	uint8_t bLoopAgain = 0;
	if(((uint32_t)-1 != timeout) && ((uint32_t)0 < timeout))
1000f42e:	1e44      	subs	r4, r0, #1
plf_drv_status platform_event_wait(uint32_t timeout)
{
	static struct ke_msg* rcv_msg;
	static struct ke_msghdr	*ke_msg_hdr;
	plf_drv_status status = STATUS_SUCCESS;
	uint8_t bEventTimeoutFlag = 0;
1000f430:	2300      	movs	r3, #0
1000f432:	4699      	mov	r9, r3
	uint8_t bLoopAgain = 0;
	if(((uint32_t)-1 != timeout) && ((uint32_t)0 < timeout))
1000f434:	1ce3      	adds	r3, r4, #3
1000f436:	d81c      	bhi.n	1000f472 <platform_event_wait+0x52>
	return num_of_freed;
}

static void platform_start_event_timeout(uint32_t timeout)
{
	uint8_t msg[8+5] = {0};
1000f438:	220d      	movs	r2, #13
1000f43a:	2100      	movs	r1, #0
1000f43c:	a802      	add	r0, sp, #8
1000f43e:	4b82      	ldr	r3, [pc, #520]	; (1000f648 <platform_event_wait+0x228>)
1000f440:	4798      	blx	r3
	uint8_t u16TxLen = 0;

	msg[u16TxLen++] = ((DBG_KE_TIMER_REQ) & 0x00FF );
1000f442:	2333      	movs	r3, #51	; 0x33
1000f444:	aa02      	add	r2, sp, #8
1000f446:	7013      	strb	r3, [r2, #0]
	msg[u16TxLen++] = (((DBG_KE_TIMER_REQ)>>8) & 0x00FF );
1000f448:	3b30      	subs	r3, #48	; 0x30
1000f44a:	7053      	strb	r3, [r2, #1]
	msg[u16TxLen++] = ((TASK_DBG) & 0x00FF );
1000f44c:	7093      	strb	r3, [r2, #2]
	msg[u16TxLen++] = (((TASK_DBG)>>8) & 0x00FF );	
	msg[u16TxLen++] = ((TASK_INTERNAL_APP) & 0x00FF );
1000f44e:	3302      	adds	r3, #2
1000f450:	7113      	strb	r3, [r2, #4]
	msg[u16TxLen++] = (((TASK_INTERNAL_APP)>>8) & 0x00FF );
	msg[u16TxLen++] = ((5) & 0x00FF );
1000f452:	7193      	strb	r3, [r2, #6]
	msg[u16TxLen++] = (((5)>>8) & 0x00FF );
	
	msg[u16TxLen++] = (uint8_t)((timeout) & 0x00FF );
1000f454:	7214      	strb	r4, [r2, #8]
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 8) & 0x00FF) ;
1000f456:	0a23      	lsrs	r3, r4, #8
1000f458:	7253      	strb	r3, [r2, #9]
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 16) & 0x00FF);
1000f45a:	0c23      	lsrs	r3, r4, #16
1000f45c:	7293      	strb	r3, [r2, #10]
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 24) & 0x00FF);
1000f45e:	0e24      	lsrs	r4, r4, #24
1000f460:	72d4      	strb	r4, [r2, #11]
	
	msg[u16TxLen++] = ((1) & 0x00FF );
1000f462:	2301      	movs	r3, #1
1000f464:	7313      	strb	r3, [r2, #12]
	
	platform_interface_send(msg, u16TxLen);
1000f466:	210d      	movs	r1, #13
1000f468:	0010      	movs	r0, r2
1000f46a:	4b78      	ldr	r3, [pc, #480]	; (1000f64c <platform_event_wait+0x22c>)
1000f46c:	4798      	blx	r3
	uint8_t bEventTimeoutFlag = 0;
	uint8_t bLoopAgain = 0;
	if(((uint32_t)-1 != timeout) && ((uint32_t)0 < timeout))
	{			
		platform_start_event_timeout(timeout-1);
		bEventTimeoutFlag = 1;
1000f46e:	2301      	movs	r3, #1
1000f470:	4699      	mov	r9, r3
1000f472:	2400      	movs	r4, #0
1000f474:	2500      	movs	r5, #0
	}

	do {
		if(NMI_MsgQueueRecv(InternalAppMsgQHandle, (void**)&rcv_msg) == STATUS_SUCCESS)
1000f476:	4f76      	ldr	r7, [pc, #472]	; (1000f650 <platform_event_wait+0x230>)
1000f478:	4e76      	ldr	r6, [pc, #472]	; (1000f654 <platform_event_wait+0x234>)
1000f47a:	4977      	ldr	r1, [pc, #476]	; (1000f658 <platform_event_wait+0x238>)
1000f47c:	6838      	ldr	r0, [r7, #0]
1000f47e:	6833      	ldr	r3, [r6, #0]
1000f480:	4798      	blx	r3
1000f482:	2800      	cmp	r0, #0
1000f484:	d000      	beq.n	1000f488 <platform_event_wait+0x68>
1000f486:	e088      	b.n	1000f59a <platform_event_wait+0x17a>
		{
			uint16_t msg_id = rcv_msg->id;
1000f488:	4b73      	ldr	r3, [pc, #460]	; (1000f658 <platform_event_wait+0x238>)
1000f48a:	681c      	ldr	r4, [r3, #0]
1000f48c:	88a3      	ldrh	r3, [r4, #4]
1000f48e:	469a      	mov	sl, r3
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
			
			if((rcv_msg->id != DBG_KE_TIMER_RESP) && (bEventTimeoutFlag))
1000f490:	23cd      	movs	r3, #205	; 0xcd
1000f492:	009b      	lsls	r3, r3, #2
1000f494:	459a      	cmp	sl, r3
1000f496:	d100      	bne.n	1000f49a <platform_event_wait+0x7a>
1000f498:	e0c7      	b.n	1000f62a <platform_event_wait+0x20a>

	do {
		if(NMI_MsgQueueRecv(InternalAppMsgQHandle, (void**)&rcv_msg) == STATUS_SUCCESS)
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
1000f49a:	8923      	ldrh	r3, [r4, #8]
1000f49c:	469b      	mov	fp, r3
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
1000f49e:	8963      	ldrh	r3, [r4, #10]
1000f4a0:	4698      	mov	r8, r3
			bLoopAgain = 0;
			
			if((rcv_msg->id != DBG_KE_TIMER_RESP) && (bEventTimeoutFlag))
1000f4a2:	464b      	mov	r3, r9
1000f4a4:	2b00      	cmp	r3, #0
1000f4a6:	d011      	beq.n	1000f4cc <platform_event_wait+0xac>
	platform_interface_send(msg, u16TxLen);
}

static void platform_stop_event_timeout(void)
{
	uint8_t msg[8+5] = {0};
1000f4a8:	220d      	movs	r2, #13
1000f4aa:	2100      	movs	r1, #0
1000f4ac:	a802      	add	r0, sp, #8
1000f4ae:	4b66      	ldr	r3, [pc, #408]	; (1000f648 <platform_event_wait+0x228>)
1000f4b0:	4798      	blx	r3
	uint8_t u16TxLen = 0;

	msg[u16TxLen++] = ((DBG_KE_TIMER_REQ) & 0x00FF );
1000f4b2:	2333      	movs	r3, #51	; 0x33
1000f4b4:	aa02      	add	r2, sp, #8
1000f4b6:	7013      	strb	r3, [r2, #0]
	msg[u16TxLen++] = (((DBG_KE_TIMER_REQ)>>8) & 0x00FF );
1000f4b8:	3b30      	subs	r3, #48	; 0x30
1000f4ba:	7053      	strb	r3, [r2, #1]
	msg[u16TxLen++] = ((TASK_DBG) & 0x00FF );
1000f4bc:	7093      	strb	r3, [r2, #2]
	msg[u16TxLen++] = (((TASK_DBG)>>8) & 0x00FF );	
	msg[u16TxLen++] = ((TASK_INTERNAL_APP) & 0x00FF );
1000f4be:	3302      	adds	r3, #2
1000f4c0:	7113      	strb	r3, [r2, #4]
	msg[u16TxLen++] = (((TASK_INTERNAL_APP)>>8) & 0x00FF );
	msg[u16TxLen++] = ((5) & 0x00FF );
1000f4c2:	7193      	strb	r3, [r2, #6]
	msg[u16TxLen++] = (uint8_t)(( (0) >> 16) & 0x00FF);
	msg[u16TxLen++] = (uint8_t)(( (0) >> 24) & 0x00FF);
	
	msg[u16TxLen++] = ((0) & 0x00FF );
	
	platform_interface_send(msg, u16TxLen);
1000f4c4:	210d      	movs	r1, #13
1000f4c6:	0010      	movs	r0, r2
1000f4c8:	4b60      	ldr	r3, [pc, #384]	; (1000f64c <platform_event_wait+0x22c>)
1000f4ca:	4798      	blx	r3
			{
				//Stop timer if it is still running
				platform_stop_event_timeout();
			}
				
			if(msg_id == PERIPHERAL_INTERRUPT_EVENT)
1000f4cc:	23a0      	movs	r3, #160	; 0xa0
1000f4ce:	00db      	lsls	r3, r3, #3
1000f4d0:	459a      	cmp	sl, r3
1000f4d2:	d121      	bne.n	1000f518 <platform_event_wait+0xf8>
			{
				if(plf_event_buff_index+len > MAX_EVT_BUFF_LEN)
1000f4d4:	4b61      	ldr	r3, [pc, #388]	; (1000f65c <platform_event_wait+0x23c>)
1000f4d6:	881b      	ldrh	r3, [r3, #0]
1000f4d8:	4443      	add	r3, r8
1000f4da:	22a0      	movs	r2, #160	; 0xa0
1000f4dc:	0092      	lsls	r2, r2, #2
1000f4de:	4293      	cmp	r3, r2
1000f4e0:	dd02      	ble.n	1000f4e8 <platform_event_wait+0xc8>
					plf_event_buff_index = PLF_EVENT_BUFFER_START_INDEX;
1000f4e2:	3a80      	subs	r2, #128	; 0x80
1000f4e4:	4b5d      	ldr	r3, [pc, #372]	; (1000f65c <platform_event_wait+0x23c>)
1000f4e6:	801a      	strh	r2, [r3, #0]
				memcpy(&rx_buffer[plf_event_buff_index],data,len);
1000f4e8:	4b5c      	ldr	r3, [pc, #368]	; (1000f65c <platform_event_wait+0x23c>)
1000f4ea:	469a      	mov	sl, r3
1000f4ec:	881d      	ldrh	r5, [r3, #0]
1000f4ee:	4b5c      	ldr	r3, [pc, #368]	; (1000f660 <platform_event_wait+0x240>)
1000f4f0:	18ed      	adds	r5, r5, r3
1000f4f2:	0021      	movs	r1, r4
1000f4f4:	310c      	adds	r1, #12
1000f4f6:	4642      	mov	r2, r8
1000f4f8:	0028      	movs	r0, r5
1000f4fa:	4b5a      	ldr	r3, [pc, #360]	; (1000f664 <platform_event_wait+0x244>)
1000f4fc:	4798      	blx	r3
				platform_event_post(src_id,&rx_buffer[plf_event_buff_index],len);
1000f4fe:	4642      	mov	r2, r8
1000f500:	0029      	movs	r1, r5
1000f502:	4658      	mov	r0, fp
1000f504:	4b58      	ldr	r3, [pc, #352]	; (1000f668 <platform_event_wait+0x248>)
1000f506:	4798      	blx	r3
				plf_event_buff_index += len;
1000f508:	4653      	mov	r3, sl
1000f50a:	881b      	ldrh	r3, [r3, #0]
1000f50c:	4443      	add	r3, r8
1000f50e:	4652      	mov	r2, sl
1000f510:	8013      	strh	r3, [r2, #0]
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000f512:	2400      	movs	r4, #0
				if(plf_event_buff_index+len > MAX_EVT_BUFF_LEN)
					plf_event_buff_index = PLF_EVENT_BUFFER_START_INDEX;
				memcpy(&rx_buffer[plf_event_buff_index],data,len);
				platform_event_post(src_id,&rx_buffer[plf_event_buff_index],len);
				plf_event_buff_index += len;
				status = STATUS_RECEIVED_PLF_EVENT_MSG;
1000f514:	2502      	movs	r5, #2
1000f516:	e03a      	b.n	1000f58e <platform_event_wait+0x16e>
			}
			else
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
1000f518:	4b54      	ldr	r3, [pc, #336]	; (1000f66c <platform_event_wait+0x24c>)
1000f51a:	681b      	ldr	r3, [r3, #0]
1000f51c:	2b00      	cmp	r3, #0
1000f51e:	d032      	beq.n	1000f586 <platform_event_wait+0x166>
					if(rcv_msg->id == DBG_KE_TIMER_RESP)
1000f520:	4b4d      	ldr	r3, [pc, #308]	; (1000f658 <platform_event_wait+0x238>)
1000f522:	681a      	ldr	r2, [r3, #0]
1000f524:	8893      	ldrh	r3, [r2, #4]
1000f526:	21cd      	movs	r1, #205	; 0xcd
1000f528:	0089      	lsls	r1, r1, #2
1000f52a:	428b      	cmp	r3, r1
1000f52c:	d104      	bne.n	1000f538 <platform_event_wait+0x118>
					{
						if(bEventTimeoutFlag)
1000f52e:	464b      	mov	r3, r9
						{
							status = STATUS_TIMEOUT;	
						}
						else
						{
							bLoopAgain = 1;
1000f530:	2401      	movs	r4, #1
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
					if(rcv_msg->id == DBG_KE_TIMER_RESP)
					{
						if(bEventTimeoutFlag)
1000f532:	2b00      	cmp	r3, #0
1000f534:	d02b      	beq.n	1000f58e <platform_event_wait+0x16e>
1000f536:	e028      	b.n	1000f58a <platform_event_wait+0x16a>
							bLoopAgain = 1;
						}
					}
					else
					{
						ke_msg_hdr = (struct ke_msghdr *)((void *)(rx_buffer+BLE_EVENT_BUFFER_START_INDEX));
1000f538:	4c4d      	ldr	r4, [pc, #308]	; (1000f670 <platform_event_wait+0x250>)
1000f53a:	4d49      	ldr	r5, [pc, #292]	; (1000f660 <platform_event_wait+0x240>)
1000f53c:	6025      	str	r5, [r4, #0]
						ke_msg_hdr->id = rcv_msg->id;
1000f53e:	702b      	strb	r3, [r5, #0]
1000f540:	0a1b      	lsrs	r3, r3, #8
1000f542:	706b      	strb	r3, [r5, #1]
//#if (CHIPVERSION_A3 || CHIPVERSION_A4)
					//ke_msg_hdr->src_id = rcv_msg->src_id;
//#else
					ke_msg_hdr->src_id = gapm_get_id_from_task(rcv_msg->src_id);
1000f544:	8910      	ldrh	r0, [r2, #8]
1000f546:	4b4b      	ldr	r3, [pc, #300]	; (1000f674 <platform_event_wait+0x254>)
1000f548:	681b      	ldr	r3, [r3, #0]
1000f54a:	4798      	blx	r3
1000f54c:	7128      	strb	r0, [r5, #4]
1000f54e:	0a00      	lsrs	r0, r0, #8
1000f550:	7168      	strb	r0, [r5, #5]
//#endif  /* (CHIPVERSION_A3 || CHIPVERSION_A4) */
						ke_msg_hdr->dest_id = rcv_msg->dest_id;
1000f552:	6820      	ldr	r0, [r4, #0]
1000f554:	4b40      	ldr	r3, [pc, #256]	; (1000f658 <platform_event_wait+0x238>)
1000f556:	681a      	ldr	r2, [r3, #0]
1000f558:	88d2      	ldrh	r2, [r2, #6]
1000f55a:	8042      	strh	r2, [r0, #2]
						ke_msg_hdr->param_len = rcv_msg->param_len;
1000f55c:	681d      	ldr	r5, [r3, #0]
1000f55e:	896b      	ldrh	r3, [r5, #10]
1000f560:	80c3      	strh	r3, [r0, #6]
						ke_msg_hdr++;
1000f562:	3008      	adds	r0, #8
1000f564:	6020      	str	r0, [r4, #0]
						if(rcv_msg->param_len > 0) {
1000f566:	896a      	ldrh	r2, [r5, #10]
1000f568:	2a00      	cmp	r2, #0
1000f56a:	d003      	beq.n	1000f574 <platform_event_wait+0x154>
							memcpy((void *)ke_msg_hdr,rcv_msg->param,rcv_msg->param_len);
1000f56c:	0029      	movs	r1, r5
1000f56e:	310c      	adds	r1, #12
1000f570:	4b3c      	ldr	r3, [pc, #240]	; (1000f664 <platform_event_wait+0x244>)
1000f572:	4798      	blx	r3
						}
						ble_stack_message_handler(rx_buffer,(rcv_msg->param_len + sizeof(struct ke_msghdr)));
1000f574:	8969      	ldrh	r1, [r5, #10]
1000f576:	3108      	adds	r1, #8
1000f578:	4b3c      	ldr	r3, [pc, #240]	; (1000f66c <platform_event_wait+0x24c>)
1000f57a:	681b      	ldr	r3, [r3, #0]
1000f57c:	4838      	ldr	r0, [pc, #224]	; (1000f660 <platform_event_wait+0x240>)
1000f57e:	4798      	blx	r3
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000f580:	2400      	movs	r4, #0
						ke_msg_hdr++;
						if(rcv_msg->param_len > 0) {
							memcpy((void *)ke_msg_hdr,rcv_msg->param,rcv_msg->param_len);
						}
						ble_stack_message_handler(rx_buffer,(rcv_msg->param_len + sizeof(struct ke_msghdr)));
						status = STATUS_RECEIVED_BLE_MSG;
1000f582:	2503      	movs	r5, #3
1000f584:	e003      	b.n	1000f58e <platform_event_wait+0x16e>
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000f586:	2400      	movs	r4, #0
1000f588:	e001      	b.n	1000f58e <platform_event_wait+0x16e>
1000f58a:	2400      	movs	r4, #0
				if(ble_stack_message_handler) {
					if(rcv_msg->id == DBG_KE_TIMER_RESP)
					{
						if(bEventTimeoutFlag)
						{
							status = STATUS_TIMEOUT;	
1000f58c:	25d0      	movs	r5, #208	; 0xd0
						ble_stack_message_handler(rx_buffer,(rcv_msg->param_len + sizeof(struct ke_msghdr)));
						status = STATUS_RECEIVED_BLE_MSG;
					}
				}
			}
			ke_free(rcv_msg);
1000f58e:	4b32      	ldr	r3, [pc, #200]	; (1000f658 <platform_event_wait+0x238>)
1000f590:	6818      	ldr	r0, [r3, #0]
1000f592:	4b39      	ldr	r3, [pc, #228]	; (1000f678 <platform_event_wait+0x258>)
1000f594:	681b      	ldr	r3, [r3, #0]
1000f596:	4798      	blx	r3
1000f598:	e000      	b.n	1000f59c <platform_event_wait+0x17c>
		}
		else
		{
			status = STATUS_FAILURE;
1000f59a:	2507      	movs	r5, #7
		}
	}while(bLoopAgain);
1000f59c:	2c00      	cmp	r4, #0
1000f59e:	d000      	beq.n	1000f5a2 <platform_event_wait+0x182>
1000f5a0:	e76b      	b.n	1000f47a <platform_event_wait+0x5a>
	
	if(bEventTimeoutFlag)
1000f5a2:	464b      	mov	r3, r9
1000f5a4:	2b00      	cmp	r3, #0
1000f5a6:	d046      	beq.n	1000f636 <platform_event_wait+0x216>
	{
		//CleanUp if there is any remaining DBG_KE_TIMER_RESP message in queue
		NMI_MsgQueueDestroyOnKeID(InternalAppMsgQHandle, DBG_KE_TIMER_RESP);
1000f5a8:	4b29      	ldr	r3, [pc, #164]	; (1000f650 <platform_event_wait+0x230>)
1000f5aa:	681e      	ldr	r6, [r3, #0]
#endif 
static int NMI_MsgQueueDestroyOnKeID(NMI_MsgQueueHandle* pHandle, ke_msg_id_t u16KeMsgId)
{
	int num_of_freed=0;
	Message * current , *prev = NULL;
	if((NULL == pHandle) && (NULL == pHandle->pstrMessageList))
1000f5ac:	2e00      	cmp	r6, #0
1000f5ae:	d104      	bne.n	1000f5ba <platform_event_wait+0x19a>
1000f5b0:	2300      	movs	r3, #0
1000f5b2:	6a1c      	ldr	r4, [r3, #32]
1000f5b4:	2c00      	cmp	r4, #0
1000f5b6:	d131      	bne.n	1000f61c <platform_event_wait+0x1fc>
1000f5b8:	e03d      	b.n	1000f636 <platform_event_wait+0x216>
	{
		return num_of_freed;
	}

	current = pHandle->pstrMessageList;
1000f5ba:	6a34      	ldr	r4, [r6, #32]
	os_sem_down(&pHandle->strCriticalSection);
1000f5bc:	2314      	movs	r3, #20
1000f5be:	469c      	mov	ip, r3
1000f5c0:	44b4      	add	ip, r6
1000f5c2:	4663      	mov	r3, ip
1000f5c4:	4660      	mov	r0, ip
1000f5c6:	9300      	str	r3, [sp, #0]
1000f5c8:	4b2c      	ldr	r3, [pc, #176]	; (1000f67c <platform_event_wait+0x25c>)
1000f5ca:	681b      	ldr	r3, [r3, #0]
1000f5cc:	4798      	blx	r3
	while(NULL != current)
1000f5ce:	2c00      	cmp	r4, #0
1000f5d0:	d01f      	beq.n	1000f612 <platform_event_wait+0x1f2>
			}
			ke_free(rcv_msg);
		}
		else
		{
			status = STATUS_FAILURE;
1000f5d2:	2700      	movs	r7, #0

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
	while(NULL != current)
	{
		if(u16KeMsgId == ((struct ke_msg*)current->pvBuffer)->id)
1000f5d4:	23cd      	movs	r3, #205	; 0xcd
1000f5d6:	009b      	lsls	r3, r3, #2
1000f5d8:	4698      	mov	r8, r3
		{
			num_of_freed++;
			if(NULL != prev)
			{
				prev->pstrNext = current->pstrNext;
				ke_free(current);
1000f5da:	4b27      	ldr	r3, [pc, #156]	; (1000f678 <platform_event_wait+0x258>)
1000f5dc:	469a      	mov	sl, r3
1000f5de:	0020      	movs	r0, r4

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
	while(NULL != current)
	{
		if(u16KeMsgId == ((struct ke_msg*)current->pvBuffer)->id)
1000f5e0:	6803      	ldr	r3, [r0, #0]
1000f5e2:	889b      	ldrh	r3, [r3, #4]
1000f5e4:	4543      	cmp	r3, r8
1000f5e6:	d110      	bne.n	1000f60a <platform_event_wait+0x1ea>
		{
			num_of_freed++;
			if(NULL != prev)
1000f5e8:	2f00      	cmp	r7, #0
1000f5ea:	d006      	beq.n	1000f5fa <platform_event_wait+0x1da>
			{
				prev->pstrNext = current->pstrNext;
1000f5ec:	6883      	ldr	r3, [r0, #8]
1000f5ee:	60bb      	str	r3, [r7, #8]
				ke_free(current);
1000f5f0:	4653      	mov	r3, sl
1000f5f2:	681b      	ldr	r3, [r3, #0]
1000f5f4:	4798      	blx	r3
				current = prev->pstrNext;
1000f5f6:	68b8      	ldr	r0, [r7, #8]
1000f5f8:	e009      	b.n	1000f60e <platform_event_wait+0x1ee>
			}
			else
			{
				pHandle->pstrMessageList = current->pstrNext;
1000f5fa:	6883      	ldr	r3, [r0, #8]
1000f5fc:	6233      	str	r3, [r6, #32]
				ke_free(current);
1000f5fe:	4b1e      	ldr	r3, [pc, #120]	; (1000f678 <platform_event_wait+0x258>)
1000f600:	681b      	ldr	r3, [r3, #0]
1000f602:	9301      	str	r3, [sp, #4]
1000f604:	4798      	blx	r3
				current = pHandle->pstrMessageList;
1000f606:	6a30      	ldr	r0, [r6, #32]
1000f608:	e001      	b.n	1000f60e <platform_event_wait+0x1ee>
			}
		}
		else
		{
			prev = current;
			current = current ->pstrNext;
1000f60a:	0007      	movs	r7, r0
1000f60c:	6880      	ldr	r0, [r0, #8]
		return num_of_freed;
	}

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
	while(NULL != current)
1000f60e:	2800      	cmp	r0, #0
1000f610:	d1e6      	bne.n	1000f5e0 <platform_event_wait+0x1c0>
		{
			prev = current;
			current = current ->pstrNext;
		}
	}
	os_sem_up(&pHandle->strCriticalSection);
1000f612:	4b1b      	ldr	r3, [pc, #108]	; (1000f680 <platform_event_wait+0x260>)
1000f614:	681b      	ldr	r3, [r3, #0]
1000f616:	9800      	ldr	r0, [sp, #0]
1000f618:	4798      	blx	r3
	if(bEventTimeoutFlag)
	{
		//CleanUp if there is any remaining DBG_KE_TIMER_RESP message in queue
		NMI_MsgQueueDestroyOnKeID(InternalAppMsgQHandle, DBG_KE_TIMER_RESP);
	}
	return status;
1000f61a:	e00c      	b.n	1000f636 <platform_event_wait+0x216>
	{
		return num_of_freed;
	}

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
1000f61c:	2314      	movs	r3, #20
1000f61e:	9300      	str	r3, [sp, #0]
1000f620:	4b16      	ldr	r3, [pc, #88]	; (1000f67c <platform_event_wait+0x25c>)
1000f622:	681b      	ldr	r3, [r3, #0]
1000f624:	2014      	movs	r0, #20
1000f626:	4798      	blx	r3
1000f628:	e7d3      	b.n	1000f5d2 <platform_event_wait+0x1b2>
				status = STATUS_RECEIVED_PLF_EVENT_MSG;
			}
			else
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
1000f62a:	4b10      	ldr	r3, [pc, #64]	; (1000f66c <platform_event_wait+0x24c>)
1000f62c:	681b      	ldr	r3, [r3, #0]
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000f62e:	2400      	movs	r4, #0
				status = STATUS_RECEIVED_PLF_EVENT_MSG;
			}
			else
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
1000f630:	2b00      	cmp	r3, #0
1000f632:	d0ac      	beq.n	1000f58e <platform_event_wait+0x16e>
1000f634:	e77b      	b.n	1000f52e <platform_event_wait+0x10e>
	{
		//CleanUp if there is any remaining DBG_KE_TIMER_RESP message in queue
		NMI_MsgQueueDestroyOnKeID(InternalAppMsgQHandle, DBG_KE_TIMER_RESP);
	}
	return status;
}
1000f636:	0028      	movs	r0, r5
1000f638:	b007      	add	sp, #28
1000f63a:	bc3c      	pop	{r2, r3, r4, r5}
1000f63c:	4690      	mov	r8, r2
1000f63e:	4699      	mov	r9, r3
1000f640:	46a2      	mov	sl, r4
1000f642:	46ab      	mov	fp, r5
1000f644:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000f646:	46c0      	nop			; (mov r8, r8)
1000f648:	1001522d 	.word	0x1001522d
1000f64c:	1000f391 	.word	0x1000f391
1000f650:	1001a0ac 	.word	0x1001a0ac
1000f654:	1001a094 	.word	0x1001a094
1000f658:	1001a0a0 	.word	0x1001a0a0
1000f65c:	1001afbc 	.word	0x1001afbc
1000f660:	1001ad24 	.word	0x1001ad24
1000f664:	1001521b 	.word	0x1001521b
1000f668:	1000efb1 	.word	0x1000efb1
1000f66c:	1001a09c 	.word	0x1001a09c
1000f670:	1001a08c 	.word	0x1001a08c
1000f674:	1001a06c 	.word	0x1001a06c
1000f678:	1001a068 	.word	0x1001a068
1000f67c:	1001a088 	.word	0x1001a088
1000f680:	1001a074 	.word	0x1001a074

1000f684 <acquire_sleep_lock>:

plf_drv_status acquire_sleep_lock()
{
1000f684:	b510      	push	{r4, lr}
    //DBG_LOG_DEV("[acquire_sleep_lock]\tDisabling ULP");
	plf_drv_status status = STATUS_RESOURCE_BUSY;
	//uint8_t osc_en = REG_PL_RD(0x4000B1EC)&0x01;
	
	rwip_prevent_sleep_set(APP_PREVENT_SLEEP);
1000f686:	4b03      	ldr	r3, [pc, #12]	; (1000f694 <acquire_sleep_lock+0x10>)
1000f688:	681b      	ldr	r3, [r3, #0]
1000f68a:	2080      	movs	r0, #128	; 0x80
1000f68c:	0200      	lsls	r0, r0, #8
1000f68e:	4798      	blx	r3
		/*  */
		os_sem_up(gstrFwSem);
	}
#endif	//0
	return status;
}
1000f690:	2008      	movs	r0, #8
1000f692:	bd10      	pop	{r4, pc}
1000f694:	1001acdc 	.word	0x1001acdc

1000f698 <release_message_lock>:

plf_drv_status release_message_lock()
{
1000f698:	b510      	push	{r4, lr}
	plf_drv_status status = STATUS_SUCCESS;
	rwip_prevent_sleep_clear(MSG_PREVENT_SLEEP);
1000f69a:	4b03      	ldr	r3, [pc, #12]	; (1000f6a8 <release_message_lock+0x10>)
1000f69c:	681b      	ldr	r3, [r3, #0]
1000f69e:	2080      	movs	r0, #128	; 0x80
1000f6a0:	01c0      	lsls	r0, r0, #7
1000f6a2:	4798      	blx	r3
	return status;
}
1000f6a4:	2000      	movs	r0, #0
1000f6a6:	bd10      	pop	{r4, pc}
1000f6a8:	1001ace8 	.word	0x1001ace8

1000f6ac <release_sleep_lock>:

plf_drv_status release_sleep_lock()
{
1000f6ac:	b510      	push	{r4, lr}
    //DBG_LOG_DEV("[release_sleep_lock]\tEnabling ULP");
	plf_drv_status status = STATUS_SUCCESS;
	rwip_prevent_sleep_clear(MSG_PREVENT_SLEEP);
1000f6ae:	4c05      	ldr	r4, [pc, #20]	; (1000f6c4 <release_sleep_lock+0x18>)
1000f6b0:	2080      	movs	r0, #128	; 0x80
1000f6b2:	01c0      	lsls	r0, r0, #7
1000f6b4:	6823      	ldr	r3, [r4, #0]
1000f6b6:	4798      	blx	r3
	rwip_prevent_sleep_clear(APP_PREVENT_SLEEP);
1000f6b8:	6823      	ldr	r3, [r4, #0]
1000f6ba:	2080      	movs	r0, #128	; 0x80
1000f6bc:	0200      	lsls	r0, r0, #8
1000f6be:	4798      	blx	r3
	return status;
}
1000f6c0:	2000      	movs	r0, #0
1000f6c2:	bd10      	pop	{r4, pc}
1000f6c4:	1001ace8 	.word	0x1001ace8

1000f6c8 <register_resume_callback>:
}

plf_drv_status register_resume_callback(resume_callback cb)
{
	plf_drv_status status = STATUS_SUCCESS;
	if(cb == NULL)
1000f6c8:	2800      	cmp	r0, #0
1000f6ca:	d003      	beq.n	1000f6d4 <register_resume_callback+0xc>
	{
		status = STATUS_INVALID_ARGUMENT;
	}
	else 
	{
		samb11_app_resume_cb = cb;
1000f6cc:	4b02      	ldr	r3, [pc, #8]	; (1000f6d8 <register_resume_callback+0x10>)
1000f6ce:	6018      	str	r0, [r3, #0]
	}
}

plf_drv_status register_resume_callback(resume_callback cb)
{
	plf_drv_status status = STATUS_SUCCESS;
1000f6d0:	2000      	movs	r0, #0
1000f6d2:	e000      	b.n	1000f6d6 <register_resume_callback+0xe>
	if(cb == NULL)
	{
		status = STATUS_INVALID_ARGUMENT;
1000f6d4:	2009      	movs	r0, #9
	{
		samb11_app_resume_cb = cb;
		//*apps_resume_cb = (uint32_t)cb;
	}
	return status;
}
1000f6d6:	4770      	bx	lr
1000f6d8:	1001afb0 	.word	0x1001afb0

1000f6dc <gpio1_combined_isr_handler>:

enum port_status_code wakeup_int_unregister_callback(enum port_wakeup_source wakeup_source);
void wakeup_active_event_callback(uint32_t wakeup_source);

void gpio1_combined_isr_handler(void)
{
1000f6dc:	b530      	push	{r4, r5, lr}
	uint8_t index = 0;
	/* portint_callback_t callback; */
	uint8_t port_gpio1 = LPGPIO_16;
	uint32_t intstatus = GPIO1->INTSTATUSCLEAR.reg; /* jeffy */
1000f6de:	4a18      	ldr	r2, [pc, #96]	; (1000f740 <gpio1_combined_isr_handler+0x64>)
1000f6e0:	8f13      	ldrh	r3, [r2, #56]	; 0x38
1000f6e2:	b29b      	uxth	r3, r3
	GPIO1->INTTYPESET.reg |= (1 << 15); /* jeffy */
1000f6e4:	8d10      	ldrh	r0, [r2, #40]	; 0x28
1000f6e6:	2180      	movs	r1, #128	; 0x80
1000f6e8:	0209      	lsls	r1, r1, #8
1000f6ea:	4301      	orrs	r1, r0
1000f6ec:	8511      	strh	r1, [r2, #40]	; 0x28
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO1->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO1->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000f6ee:	0010      	movs	r0, r2
1000f6f0:	4d14      	ldr	r5, [pc, #80]	; (1000f744 <gpio1_combined_isr_handler+0x68>)
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO1->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000f6f2:	2401      	movs	r4, #1
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000f6f4:	2200      	movs	r2, #0
	uint32_t intstatus = GPIO1->INTSTATUSCLEAR.reg; /* jeffy */
	GPIO1->INTTYPESET.reg |= (1 << 15); /* jeffy */

	do {
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000f6f6:	05db      	lsls	r3, r3, #23
1000f6f8:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
1000f6fa:	d011      	beq.n	1000f720 <gpio1_combined_isr_handler+0x44>
			port_gpio1 = (intstatus & ~(intstatus - 1));
1000f6fc:	b2db      	uxtb	r3, r3
1000f6fe:	4259      	negs	r1, r3
1000f700:	400b      	ands	r3, r1
			while (!(port_gpio1 == 1)) {
1000f702:	2b01      	cmp	r3, #1
1000f704:	d006      	beq.n	1000f714 <gpio1_combined_isr_handler+0x38>
1000f706:	0011      	movs	r1, r2
				port_gpio1 = port_gpio1 >> 1;
1000f708:	085b      	lsrs	r3, r3, #1
				index++;
1000f70a:	3101      	adds	r1, #1
1000f70c:	b2c9      	uxtb	r1, r1
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
			port_gpio1 = (intstatus & ~(intstatus - 1));
			while (!(port_gpio1 == 1)) {
1000f70e:	2b01      	cmp	r3, #1
1000f710:	d1fa      	bne.n	1000f708 <gpio1_combined_isr_handler+0x2c>
1000f712:	e000      	b.n	1000f716 <gpio1_combined_isr_handler+0x3a>
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000f714:	0011      	movs	r1, r2
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO1->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000f716:	0023      	movs	r3, r4
1000f718:	408b      	lsls	r3, r1
1000f71a:	b29b      	uxth	r3, r3
1000f71c:	8703      	strh	r3, [r0, #56]	; 0x38
1000f71e:	e003      	b.n	1000f728 <gpio1_combined_isr_handler+0x4c>
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO1->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000f720:	8f03      	ldrh	r3, [r0, #56]	; 0x38
1000f722:	432b      	orrs	r3, r5
1000f724:	b29b      	uxth	r3, r3
1000f726:	8703      	strh	r3, [r0, #56]	; 0x38
			/* REG_GPIO1_INTSTATUSCLEAR = REG_GPIO1_INTENSET; */
		}

		intstatus = GPIO1->INTSTATUSCLEAR.reg;
1000f728:	8f03      	ldrh	r3, [r0, #56]	; 0x38
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000f72a:	05db      	lsls	r3, r3, #23
1000f72c:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
	} while (intstatus != 0);
1000f72e:	d1e2      	bne.n	1000f6f6 <gpio1_combined_isr_handler+0x1a>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
1000f730:	2180      	movs	r1, #128	; 0x80
1000f732:	0049      	lsls	r1, r1, #1
1000f734:	3381      	adds	r3, #129	; 0x81
1000f736:	33ff      	adds	r3, #255	; 0xff
1000f738:	4a03      	ldr	r2, [pc, #12]	; (1000f748 <gpio1_combined_isr_handler+0x6c>)
1000f73a:	50d1      	str	r1, [r2, r3]

	NVIC_ClearPendingIRQ(8);
}
1000f73c:	bd30      	pop	{r4, r5, pc}
1000f73e:	46c0      	nop			; (mov r8, r8)
1000f740:	40011000 	.word	0x40011000
1000f744:	ffff8000 	.word	0xffff8000
1000f748:	e000e100 	.word	0xe000e100

1000f74c <gpio0_combined_isr_handler>:

void gpio0_combined_isr_handler(void)
{
1000f74c:	b530      	push	{r4, r5, lr}
	uint8_t index = 0;
	/* portint_callback_t callback; */
	uint8_t port_gpio0 = LPGPIO_0;
	uint32_t intstatus = GPIO0->INTSTATUSCLEAR.reg; /* jeffy */
1000f74e:	4a17      	ldr	r2, [pc, #92]	; (1000f7ac <gpio0_combined_isr_handler+0x60>)
1000f750:	8f13      	ldrh	r3, [r2, #56]	; 0x38
1000f752:	b29b      	uxth	r3, r3
	GPIO0->INTTYPESET.reg |= (1 << 15); /* jeffy */
1000f754:	8d10      	ldrh	r0, [r2, #40]	; 0x28
1000f756:	2180      	movs	r1, #128	; 0x80
1000f758:	0209      	lsls	r1, r1, #8
1000f75a:	4301      	orrs	r1, r0
1000f75c:	8511      	strh	r1, [r2, #40]	; 0x28
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO0->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO0->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000f75e:	0010      	movs	r0, r2
1000f760:	4d13      	ldr	r5, [pc, #76]	; (1000f7b0 <gpio0_combined_isr_handler+0x64>)
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO0->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000f762:	2401      	movs	r4, #1
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000f764:	2200      	movs	r2, #0
	uint32_t intstatus = GPIO0->INTSTATUSCLEAR.reg; /* jeffy */
	GPIO0->INTTYPESET.reg |= (1 << 15); /* jeffy */

	do {
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000f766:	05db      	lsls	r3, r3, #23
1000f768:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
1000f76a:	d011      	beq.n	1000f790 <gpio0_combined_isr_handler+0x44>
			port_gpio0 = (intstatus & ~(intstatus - 1));
1000f76c:	b2db      	uxtb	r3, r3
1000f76e:	4259      	negs	r1, r3
1000f770:	400b      	ands	r3, r1
			while (!(port_gpio0 == 1)) {
1000f772:	2b01      	cmp	r3, #1
1000f774:	d006      	beq.n	1000f784 <gpio0_combined_isr_handler+0x38>
1000f776:	0011      	movs	r1, r2
				port_gpio0 = port_gpio0 >> 1;
1000f778:	085b      	lsrs	r3, r3, #1
				index++;
1000f77a:	3101      	adds	r1, #1
1000f77c:	b2c9      	uxtb	r1, r1
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
			port_gpio0 = (intstatus & ~(intstatus - 1));
			while (!(port_gpio0 == 1)) {
1000f77e:	2b01      	cmp	r3, #1
1000f780:	d1fa      	bne.n	1000f778 <gpio0_combined_isr_handler+0x2c>
1000f782:	e000      	b.n	1000f786 <gpio0_combined_isr_handler+0x3a>
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000f784:	0011      	movs	r1, r2
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO0->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000f786:	0023      	movs	r3, r4
1000f788:	408b      	lsls	r3, r1
1000f78a:	b29b      	uxth	r3, r3
1000f78c:	8703      	strh	r3, [r0, #56]	; 0x38
1000f78e:	e003      	b.n	1000f798 <gpio0_combined_isr_handler+0x4c>
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO0->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000f790:	8f03      	ldrh	r3, [r0, #56]	; 0x38
1000f792:	432b      	orrs	r3, r5
1000f794:	b29b      	uxth	r3, r3
1000f796:	8703      	strh	r3, [r0, #56]	; 0x38
			/* REG_GPIO1_INTSTATUSCLEAR = REG_GPIO1_INTENSET; */
		}

		intstatus = GPIO0->INTSTATUSCLEAR.reg;
1000f798:	8f03      	ldrh	r3, [r0, #56]	; 0x38
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000f79a:	05db      	lsls	r3, r3, #23
1000f79c:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
	} while (intstatus != 0);
1000f79e:	d1e2      	bne.n	1000f766 <gpio0_combined_isr_handler+0x1a>
1000f7a0:	2180      	movs	r1, #128	; 0x80
1000f7a2:	3381      	adds	r3, #129	; 0x81
1000f7a4:	33ff      	adds	r3, #255	; 0xff
1000f7a6:	4a03      	ldr	r2, [pc, #12]	; (1000f7b4 <gpio0_combined_isr_handler+0x68>)
1000f7a8:	50d1      	str	r1, [r2, r3]

	NVIC_ClearPendingIRQ(7);
}
1000f7aa:	bd30      	pop	{r4, r5, pc}
1000f7ac:	40010000 	.word	0x40010000
1000f7b0:	ffff8000 	.word	0xffff8000
1000f7b4:	e000e100 	.word	0xe000e100

1000f7b8 <PORT1_COMB_Handler>:

#ifdef CHIPVERSION_B0
void PORT1_COMB_Handler(void)
{
1000f7b8:	b510      	push	{r4, lr}
	/* if(CMSDK_GPIO1->INTSTATUS & ((1<<15) | (1<<14) | (1<<13))) { */
	if (GPIO1->INTSTATUSCLEAR.reg & ((1 << 15) | (1 << 14) | (1 << 13))) {
1000f7ba:	4b0c      	ldr	r3, [pc, #48]	; (1000f7ec <PORT1_COMB_Handler+0x34>)
1000f7bc:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
1000f7be:	0b5b      	lsrs	r3, r3, #13
1000f7c0:	d010      	beq.n	1000f7e4 <PORT1_COMB_Handler+0x2c>
		handle_ext_wakeup_isr();
1000f7c2:	4b0b      	ldr	r3, [pc, #44]	; (1000f7f0 <PORT1_COMB_Handler+0x38>)
1000f7c4:	681b      	ldr	r3, [r3, #0]
1000f7c6:	4798      	blx	r3

		/* clear specific int pin status that caused the Interrupt */
		/* CMSDK_GPIO1->INTCLEAR |= CMSDK_GPIO1->INTSTATUS & ((1<<15) | (1<<14) | (1<<13)); */
		GPIO1->INTSTATUSCLEAR.reg |= GPIO1->INTSTATUSCLEAR.reg & ((1 << 15) | (1 << 14) | (1 << 13));
1000f7c8:	4a08      	ldr	r2, [pc, #32]	; (1000f7ec <PORT1_COMB_Handler+0x34>)
1000f7ca:	8f13      	ldrh	r3, [r2, #56]	; 0x38
1000f7cc:	8f11      	ldrh	r1, [r2, #56]	; 0x38
1000f7ce:	0b5b      	lsrs	r3, r3, #13
1000f7d0:	035b      	lsls	r3, r3, #13
1000f7d2:	430b      	orrs	r3, r1
1000f7d4:	8713      	strh	r3, [r2, #56]	; 0x38
1000f7d6:	2180      	movs	r1, #128	; 0x80
1000f7d8:	0049      	lsls	r1, r1, #1
1000f7da:	23c0      	movs	r3, #192	; 0xc0
1000f7dc:	005b      	lsls	r3, r3, #1
1000f7de:	4a05      	ldr	r2, [pc, #20]	; (1000f7f4 <PORT1_COMB_Handler+0x3c>)
1000f7e0:	50d1      	str	r1, [r2, r3]
1000f7e2:	e001      	b.n	1000f7e8 <PORT1_COMB_Handler+0x30>
		/* NVIC_ClearPendingIRQ(PORT1_COMB_IRQn); */
		NVIC_ClearPendingIRQ(8);
	} else {
		gpio1_combined_isr_handler();
1000f7e4:	4b04      	ldr	r3, [pc, #16]	; (1000f7f8 <PORT1_COMB_Handler+0x40>)
1000f7e6:	4798      	blx	r3
	}
}
1000f7e8:	bd10      	pop	{r4, pc}
1000f7ea:	46c0      	nop			; (mov r8, r8)
1000f7ec:	40011000 	.word	0x40011000
1000f7f0:	1001afa8 	.word	0x1001afa8
1000f7f4:	e000e100 	.word	0xe000e100
1000f7f8:	1000f6dd 	.word	0x1000f6dd

1000f7fc <wakeup_int_unregister_callback>:
	{
		wakeup_source_callback[wakeup_source] = 0;
	}
	else 
	{
		status = PORT_STATUS_ERR_INVALID_ARG;
1000f7fc:	2303      	movs	r3, #3
#endif  /* CHIPVERSION_B0 */

enum port_status_code wakeup_int_unregister_callback(enum port_wakeup_source wakeup_source)
{
	enum port_status_code status = PORT_STATUS_OK;
	if(	(wakeup_source == PORT_WAKEUP_SOURCE_AON_GPIO_0) || 
1000f7fe:	2802      	cmp	r0, #2
1000f800:	d804      	bhi.n	1000f80c <wakeup_int_unregister_callback+0x10>
		(wakeup_source == PORT_WAKEUP_SOURCE_AON_GPIO_1) || 
		(wakeup_source == PORT_WAKEUP_SOURCE_AON_GPIO_2) ) 
	{
		wakeup_source_callback[wakeup_source] = 0;
1000f802:	0080      	lsls	r0, r0, #2
1000f804:	2200      	movs	r2, #0
1000f806:	4b02      	ldr	r3, [pc, #8]	; (1000f810 <wakeup_int_unregister_callback+0x14>)
1000f808:	50c2      	str	r2, [r0, r3]

#endif  /* CHIPVERSION_B0 */

enum port_status_code wakeup_int_unregister_callback(enum port_wakeup_source wakeup_source)
{
	enum port_status_code status = PORT_STATUS_OK;
1000f80a:	2300      	movs	r3, #0
	else 
	{
		status = PORT_STATUS_ERR_INVALID_ARG;
	}
	return status;
}
1000f80c:	0018      	movs	r0, r3
1000f80e:	4770      	bx	lr
1000f810:	1001afc0 	.word	0x1001afc0

1000f814 <wakeup_active_event_callback>:

void wakeup_active_event_callback(uint32_t wakeup_source)
{
1000f814:	b510      	push	{r4, lr}
1000f816:	0004      	movs	r4, r0
	portint_callback_t callback;
	uint32_t *pu32WakeSource = (uint32_t *)wakeup_source;
	if((*pu32WakeSource & 0xFF) == 1)
1000f818:	7803      	ldrb	r3, [r0, #0]
1000f81a:	2b01      	cmp	r3, #1
1000f81c:	d108      	bne.n	1000f830 <wakeup_active_event_callback+0x1c>
	{
		if(wakeup_source_callback[0] != NULL) {
1000f81e:	4b11      	ldr	r3, [pc, #68]	; (1000f864 <wakeup_active_event_callback+0x50>)
1000f820:	681b      	ldr	r3, [r3, #0]
1000f822:	2b00      	cmp	r3, #0
1000f824:	d000      	beq.n	1000f828 <wakeup_active_event_callback+0x14>
			callback = wakeup_source_callback[0];
			callback();
1000f826:	4798      	blx	r3
		}
		*pu32WakeSource &= ~(0xFF);
1000f828:	23ff      	movs	r3, #255	; 0xff
1000f82a:	6822      	ldr	r2, [r4, #0]
1000f82c:	439a      	bics	r2, r3
1000f82e:	6022      	str	r2, [r4, #0]
	}
	if(((*pu32WakeSource >> 8) & 0xFF) == 1)
1000f830:	7863      	ldrb	r3, [r4, #1]
1000f832:	2b01      	cmp	r3, #1
1000f834:	d108      	bne.n	1000f848 <wakeup_active_event_callback+0x34>
	{
		if(wakeup_source_callback[1] != NULL) {
1000f836:	4b0b      	ldr	r3, [pc, #44]	; (1000f864 <wakeup_active_event_callback+0x50>)
1000f838:	685b      	ldr	r3, [r3, #4]
1000f83a:	2b00      	cmp	r3, #0
1000f83c:	d000      	beq.n	1000f840 <wakeup_active_event_callback+0x2c>
			callback = wakeup_source_callback[1];
			callback();
1000f83e:	4798      	blx	r3
		}
		*pu32WakeSource &= ~(0xFF << 8);
1000f840:	4b09      	ldr	r3, [pc, #36]	; (1000f868 <wakeup_active_event_callback+0x54>)
1000f842:	6822      	ldr	r2, [r4, #0]
1000f844:	4013      	ands	r3, r2
1000f846:	6023      	str	r3, [r4, #0]
	}
	if(((*pu32WakeSource >> 16) & 0xFF) == 1)
1000f848:	78a3      	ldrb	r3, [r4, #2]
1000f84a:	2b01      	cmp	r3, #1
1000f84c:	d108      	bne.n	1000f860 <wakeup_active_event_callback+0x4c>
	{
		if(wakeup_source_callback[2] != NULL) {
1000f84e:	4b05      	ldr	r3, [pc, #20]	; (1000f864 <wakeup_active_event_callback+0x50>)
1000f850:	689b      	ldr	r3, [r3, #8]
1000f852:	2b00      	cmp	r3, #0
1000f854:	d000      	beq.n	1000f858 <wakeup_active_event_callback+0x44>
			callback = wakeup_source_callback[2];
			callback();
1000f856:	4798      	blx	r3
		}
		*pu32WakeSource &= ~(0xFF << 16);
1000f858:	4b04      	ldr	r3, [pc, #16]	; (1000f86c <wakeup_active_event_callback+0x58>)
1000f85a:	6822      	ldr	r2, [r4, #0]
1000f85c:	4013      	ands	r3, r2
1000f85e:	6023      	str	r3, [r4, #0]
	}
}
1000f860:	bd10      	pop	{r4, pc}
1000f862:	46c0      	nop			; (mov r8, r8)
1000f864:	1001afc0 	.word	0x1001afc0
1000f868:	ffff00ff 	.word	0xffff00ff
1000f86c:	ff00ffff 	.word	0xff00ffff

1000f870 <sms_plf_event_cb>:
    //gpio_pin_set_output_level(SMS_PRESSURE_VCC_PIN, true);
}

static void sms_plf_event_cb(void)
{
    sms_current_interrupt.int_on = true;
1000f870:	2201      	movs	r2, #1
1000f872:	4b01      	ldr	r3, [pc, #4]	; (1000f878 <sms_plf_event_cb+0x8>)
1000f874:	705a      	strb	r2, [r3, #1]
}
1000f876:	4770      	bx	lr
1000f878:	1001a318 	.word	0x1001a318

1000f87c <resume_cb>:
    sms_ble_send_cnt = 0;
}


static void resume_cb(void)
{
1000f87c:	b510      	push	{r4, lr}
    init_port_list(); // re-initialize all ports
1000f87e:	4b0a      	ldr	r3, [pc, #40]	; (1000f8a8 <resume_cb+0x2c>)
1000f880:	4798      	blx	r3
    serial_console_init(); // GPIO (UART) for the console
1000f882:	4b0a      	ldr	r3, [pc, #40]	; (1000f8ac <resume_cb+0x30>)
1000f884:	4798      	blx	r3
    sms_dualtimer_init();
1000f886:	4b0a      	ldr	r3, [pc, #40]	; (1000f8b0 <resume_cb+0x34>)
1000f888:	4798      	blx	r3
    delay_init();
1000f88a:	4b0a      	ldr	r3, [pc, #40]	; (1000f8b4 <resume_cb+0x38>)
1000f88c:	4798      	blx	r3
    sms_button_configure_gpio(); // GPIO (AO_0 & AO_1) for the buttons
1000f88e:	4b0a      	ldr	r3, [pc, #40]	; (1000f8b8 <resume_cb+0x3c>)
1000f890:	4798      	blx	r3
    sms_led_gpio_init();
1000f892:	4b0a      	ldr	r3, [pc, #40]	; (1000f8bc <resume_cb+0x40>)
1000f894:	4798      	blx	r3
    sms_spi_master_configure();
1000f896:	4b0a      	ldr	r3, [pc, #40]	; (1000f8c0 <resume_cb+0x44>)
1000f898:	4798      	blx	r3
    sms_i2c_master_configure();
1000f89a:	4b0a      	ldr	r3, [pc, #40]	; (1000f8c4 <resume_cb+0x48>)
1000f89c:	4798      	blx	r3
    sms_mpu_configure_gpio();
1000f89e:	4b0a      	ldr	r3, [pc, #40]	; (1000f8c8 <resume_cb+0x4c>)
1000f8a0:	4798      	blx	r3
    sms_monitor_configure_gpio();
1000f8a2:	4b0a      	ldr	r3, [pc, #40]	; (1000f8cc <resume_cb+0x50>)
1000f8a4:	4798      	blx	r3
    //gpio_pin_set_output_level(SMS_PRESSURE_VCC_PIN, true);
}
1000f8a6:	bd10      	pop	{r4, pc}
1000f8a8:	1000f0bd 	.word	0x1000f0bd
1000f8ac:	1000ee25 	.word	0x1000ee25
1000f8b0:	1000b54d 	.word	0x1000b54d
1000f8b4:	100080e9 	.word	0x100080e9
1000f8b8:	1000a561 	.word	0x1000a561
1000f8bc:	1000af2d 	.word	0x1000af2d
1000f8c0:	1000b405 	.word	0x1000b405
1000f8c4:	1000ab01 	.word	0x1000ab01
1000f8c8:	1000ac8d 	.word	0x1000ac8d
1000f8cc:	1000a989 	.word	0x1000a989

1000f8d0 <sms_init_variables>:
 */
/*- Includes ---------------------------------------------------------------*/
#include "sms_peripheral1.h"

void sms_init_variables(void)
{
1000f8d0:	b510      	push	{r4, lr}
    // states
    ble_current_state = BLE_STATE_POWEROFF;
1000f8d2:	2300      	movs	r3, #0
1000f8d4:	4a10      	ldr	r2, [pc, #64]	; (1000f918 <sms_init_variables+0x48>)
1000f8d6:	7013      	strb	r3, [r2, #0]
    button_instance.current_state = BUTTON_STATE_NONE;
1000f8d8:	4a10      	ldr	r2, [pc, #64]	; (1000f91c <sms_init_variables+0x4c>)
1000f8da:	7053      	strb	r3, [r2, #1]
    pressure_device.ms58_device.current_state = MS58_STATE_NONE;
1000f8dc:	4810      	ldr	r0, [pc, #64]	; (1000f920 <sms_init_variables+0x50>)
1000f8de:	2225      	movs	r2, #37	; 0x25
1000f8e0:	5483      	strb	r3, [r0, r2]
    timer1_current_mode = TIMER1_MODE_NONE;
1000f8e2:	4a10      	ldr	r2, [pc, #64]	; (1000f924 <sms_init_variables+0x54>)
1000f8e4:	7013      	strb	r3, [r2, #0]
    timer2_current_mode = TIMER2_MODE_NONE;
1000f8e6:	4a10      	ldr	r2, [pc, #64]	; (1000f928 <sms_init_variables+0x58>)
1000f8e8:	7013      	strb	r3, [r2, #0]
    sms_working_mode = SMS_MODE_BUTTON_SOLO;
1000f8ea:	2101      	movs	r1, #1
1000f8ec:	4a0f      	ldr	r2, [pc, #60]	; (1000f92c <sms_init_variables+0x5c>)
1000f8ee:	7011      	strb	r1, [r2, #0]
    
    // button
    btn0_instance.id = SMS_BTN_0;
1000f8f0:	4a0f      	ldr	r2, [pc, #60]	; (1000f930 <sms_init_variables+0x60>)
1000f8f2:	7013      	strb	r3, [r2, #0]
    btn0_instance.gpio_pin = SMS_BTN_0_PIN;
1000f8f4:	241f      	movs	r4, #31
1000f8f6:	7054      	strb	r4, [r2, #1]
    btn0_instance.int_enabled = true;
1000f8f8:	7091      	strb	r1, [r2, #2]
    btn0_instance.char_value = 0;
1000f8fa:	70d3      	strb	r3, [r2, #3]
    
    pressure_device.state = PRESSURE_STATE_OFF;
1000f8fc:	2228      	movs	r2, #40	; 0x28
1000f8fe:	5483      	strb	r3, [r0, r2]
    ulp_ready = false;
1000f900:	4a0c      	ldr	r2, [pc, #48]	; (1000f934 <sms_init_variables+0x64>)
1000f902:	7013      	strb	r3, [r2, #0]
    
    
    btn1_instance.id = SMS_BTN_1;
1000f904:	4a0c      	ldr	r2, [pc, #48]	; (1000f938 <sms_init_variables+0x68>)
1000f906:	7011      	strb	r1, [r2, #0]
    btn1_instance.gpio_pin = SMS_BTN_1_PIN;
1000f908:	201d      	movs	r0, #29
1000f90a:	7050      	strb	r0, [r2, #1]
    btn1_instance.int_enabled = true;
1000f90c:	7091      	strb	r1, [r2, #2]
    btn1_instance.char_value = 0;
1000f90e:	70d3      	strb	r3, [r2, #3]
    
    sms_ble_send_cnt = 0;
1000f910:	4a0a      	ldr	r2, [pc, #40]	; (1000f93c <sms_init_variables+0x6c>)
1000f912:	8013      	strh	r3, [r2, #0]
}
1000f914:	bd10      	pop	{r4, pc}
1000f916:	46c0      	nop			; (mov r8, r8)
1000f918:	1001a330 	.word	0x1001a330
1000f91c:	1001a220 	.word	0x1001a220
1000f920:	1001a294 	.word	0x1001a294
1000f924:	1001a184 	.word	0x1001a184
1000f928:	1001a331 	.word	0x1001a331
1000f92c:	1001a218 	.word	0x1001a218
1000f930:	1001a180 	.word	0x1001a180
1000f934:	1001a219 	.word	0x1001a219
1000f938:	1001a21c 	.word	0x1001a21c
1000f93c:	1001a34c 	.word	0x1001a34c

1000f940 <main>:
    sms_current_interrupt.int_on = true;
}


int main(void)
{
1000f940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int res;
    
    /* Define current BLE state
     * ------------------------ */
    ble_current_state = BLE_STATE_STARTING;
1000f942:	2210      	movs	r2, #16
1000f944:	4ba7      	ldr	r3, [pc, #668]	; (1000fbe4 <main+0x2a4>)
1000f946:	701a      	strb	r2, [r3, #0]
    
    /* Initialize platform
     * ------------------- */
	platform_driver_init();
1000f948:	4ba7      	ldr	r3, [pc, #668]	; (1000fbe8 <main+0x2a8>)
1000f94a:	4798      	blx	r3
	gpio_init(); // GPIO
1000f94c:	4ba7      	ldr	r3, [pc, #668]	; (1000fbec <main+0x2ac>)
1000f94e:	4798      	blx	r3
	serial_console_init(); // serial console for debugging
1000f950:	4ba7      	ldr	r3, [pc, #668]	; (1000fbf0 <main+0x2b0>)
1000f952:	4798      	blx	r3
    
    /* Disable ULP
     * ----------- */
	acquire_sleep_lock();
1000f954:	4ba7      	ldr	r3, [pc, #668]	; (1000fbf4 <main+0x2b4>)
1000f956:	4798      	blx	r3
    

    /* Initialize SMS flags
     * -------------------- */
    sms_init_variables();
1000f958:	4ba7      	ldr	r3, [pc, #668]	; (1000fbf8 <main+0x2b8>)
1000f95a:	4798      	blx	r3
    
    
    /* Initialize hardware components
     * ------------------------------ */
    // Dualtimer
    sms_dualtimer_init();
1000f95c:	4ba7      	ldr	r3, [pc, #668]	; (1000fbfc <main+0x2bc>)
1000f95e:	4798      	blx	r3
	
    // Blocking delay (hacked from other SAM platforms)
    delay_init();
1000f960:	4ba7      	ldr	r3, [pc, #668]	; (1000fc00 <main+0x2c0>)
1000f962:	4798      	blx	r3

	// Buttons
    sms_button_configure_gpio();
1000f964:	4ba7      	ldr	r3, [pc, #668]	; (1000fc04 <main+0x2c4>)
1000f966:	4798      	blx	r3
    
    // LED
    sms_led_gpio_init();
1000f968:	4ba7      	ldr	r3, [pc, #668]	; (1000fc08 <main+0x2c8>)
1000f96a:	4798      	blx	r3
    
    // I2C
    sms_i2c_master_configure();
1000f96c:	4ba7      	ldr	r3, [pc, #668]	; (1000fc0c <main+0x2cc>)
1000f96e:	4798      	blx	r3
    
    // SPI
    sms_spi_master_configure();
1000f970:	4ba7      	ldr	r3, [pc, #668]	; (1000fc10 <main+0x2d0>)
1000f972:	4798      	blx	r3
    
    // MPU
    sms_mpu_configure_gpio();
1000f974:	4ba7      	ldr	r3, [pc, #668]	; (1000fc14 <main+0x2d4>)
1000f976:	4798      	blx	r3
    
    // MS58
    pressure_device.ms58_device.current_state = MS58_STATE_NONE;
1000f978:	2100      	movs	r1, #0
1000f97a:	2325      	movs	r3, #37	; 0x25
1000f97c:	4aa6      	ldr	r2, [pc, #664]	; (1000fc18 <main+0x2d8>)
1000f97e:	54d1      	strb	r1, [r2, r3]
    //ms58_device.reset_done = false;
    //ms58_device.init_ok = false;
    
    sms_monitor_configure_gpio();
1000f980:	4ba6      	ldr	r3, [pc, #664]	; (1000fc1c <main+0x2dc>)
1000f982:	4798      	blx	r3
    
    /* Initialize the BLE module
     * ------------------------- */
	ble_device_init(NULL); // initialize the BLE chip and set the device address 
1000f984:	2000      	movs	r0, #0
1000f986:	4ba6      	ldr	r3, [pc, #664]	; (1000fc20 <main+0x2e0>)
1000f988:	4798      	blx	r3
	
    
    /* Define BLE services
     * ------------------- */
    sms_button_define_services();
1000f98a:	4ba6      	ldr	r3, [pc, #664]	; (1000fc24 <main+0x2e4>)
1000f98c:	4798      	blx	r3
    sms_pressure_define_services();
1000f98e:	4ba6      	ldr	r3, [pc, #664]	; (1000fc28 <main+0x2e8>)
1000f990:	4798      	blx	r3
    sms_mpu_define_services();
1000f992:	4ba6      	ldr	r3, [pc, #664]	; (1000fc2c <main+0x2ec>)
1000f994:	4798      	blx	r3
    
    
    /* Register callbacks
     * ------------------ */
    // Recovering from ULP
    register_resume_callback(resume_cb); // register resume callback
1000f996:	48a6      	ldr	r0, [pc, #664]	; (1000fc30 <main+0x2f0>)
1000f998:	4ba6      	ldr	r3, [pc, #664]	; (1000fc34 <main+0x2f4>)
1000f99a:	4798      	blx	r3

    // Dualtimer (AON timer enables on registration... so do it later)    
    sms_dualtimer_register_callback(DUALTIMER_TIMER1, sms_dualtimer1_cb); // button pressing timer
1000f99c:	49a6      	ldr	r1, [pc, #664]	; (1000fc38 <main+0x2f8>)
1000f99e:	2000      	movs	r0, #0
1000f9a0:	4ca6      	ldr	r4, [pc, #664]	; (1000fc3c <main+0x2fc>)
1000f9a2:	47a0      	blx	r4
    sms_dualtimer_register_callback(DUALTIMER_TIMER2, sms_dualtimer2_cb); // LED blinking timer
1000f9a4:	49a6      	ldr	r1, [pc, #664]	; (1000fc40 <main+0x300>)
1000f9a6:	2001      	movs	r0, #1
1000f9a8:	47a0      	blx	r4

    // Buttons
    sms_button_register_callbacks();
1000f9aa:	4ba6      	ldr	r3, [pc, #664]	; (1000fc44 <main+0x304>)
1000f9ac:	4798      	blx	r3
    
    // MPU
    sms_mpu_register_callbacks();
1000f9ae:	4ba6      	ldr	r3, [pc, #664]	; (1000fc48 <main+0x308>)
1000f9b0:	4798      	blx	r3

    // BLE
    ble_mgr_events_callback_handler(REGISTER_CALL_BACK, BLE_GAP_EVENT_TYPE, sms_ble_gap_cb);
1000f9b2:	4aa6      	ldr	r2, [pc, #664]	; (1000fc4c <main+0x30c>)
1000f9b4:	2100      	movs	r1, #0
1000f9b6:	2000      	movs	r0, #0
1000f9b8:	4ca5      	ldr	r4, [pc, #660]	; (1000fc50 <main+0x310>)
1000f9ba:	47a0      	blx	r4
    ble_mgr_events_callback_handler(REGISTER_CALL_BACK, BLE_GATT_SERVER_EVENT_TYPE, sms_ble_gatt_server_cb);
1000f9bc:	4aa5      	ldr	r2, [pc, #660]	; (1000fc54 <main+0x314>)
1000f9be:	2102      	movs	r1, #2
1000f9c0:	2000      	movs	r0, #0
1000f9c2:	47a0      	blx	r4
    register_ble_user_event_cb(sms_plf_event_cb);
1000f9c4:	48a4      	ldr	r0, [pc, #656]	; (1000fc58 <main+0x318>)
1000f9c6:	4ba5      	ldr	r3, [pc, #660]	; (1000fc5c <main+0x31c>)
1000f9c8:	4798      	blx	r3

    //ble_set_ulp_mode(BLE_ULP_MODE_SET);
    
    /* Enable buttons interrupts
     * ------------------------- */
    sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
1000f9ca:	2100      	movs	r1, #0
1000f9cc:	2000      	movs	r0, #0
1000f9ce:	4ba4      	ldr	r3, [pc, #656]	; (1000fc60 <main+0x320>)
1000f9d0:	4798      	blx	r3
    //register int n21 asm("sp");
    //register int n22 asm("lr");
    //register int n23 asm("r15");
    //DBG_LOG("at post-init: sp 0x%x, lr 0x%x", n21, n22);
    
    res = sms_mpu_initialize();
1000f9d2:	4ba4      	ldr	r3, [pc, #656]	; (1000fc64 <main+0x324>)
1000f9d4:	4798      	blx	r3
    if(res) {
1000f9d6:	2800      	cmp	r0, #0
1000f9d8:	d006      	beq.n	1000f9e8 <main+0xa8>
        DBG_LOG("Could not initialize MPU!");
1000f9da:	48a3      	ldr	r0, [pc, #652]	; (1000fc68 <main+0x328>)
1000f9dc:	4ba3      	ldr	r3, [pc, #652]	; (1000fc6c <main+0x32c>)
1000f9de:	4798      	blx	r3
1000f9e0:	48a3      	ldr	r0, [pc, #652]	; (1000fc70 <main+0x330>)
1000f9e2:	4ba4      	ldr	r3, [pc, #656]	; (1000fc74 <main+0x334>)
1000f9e4:	4798      	blx	r3
1000f9e6:	e7fe      	b.n	1000f9e6 <main+0xa6>
        while(1) {}
    }
    sms_sensors_interrupt_toggle(true, false);
1000f9e8:	2100      	movs	r1, #0
1000f9ea:	2001      	movs	r0, #1
1000f9ec:	4ba2      	ldr	r3, [pc, #648]	; (1000fc78 <main+0x338>)
1000f9ee:	4798      	blx	r3

    
	while(true)
	{
		/* BLE Event task */
		ble_event_task(BLE_EVENT_TIMEOUT);
1000f9f0:	4da2      	ldr	r5, [pc, #648]	; (1000fc7c <main+0x33c>)
		
		/* Write application task */
        if(sms_current_interrupt.int_on)
1000f9f2:	4ca3      	ldr	r4, [pc, #652]	; (1000fc80 <main+0x340>)
        {
            if(ulp_active) {
1000f9f4:	4ea3      	ldr	r6, [pc, #652]	; (1000fc84 <main+0x344>)

    
	while(true)
	{
		/* BLE Event task */
		ble_event_task(BLE_EVENT_TIMEOUT);
1000f9f6:	2001      	movs	r0, #1
1000f9f8:	4240      	negs	r0, r0
1000f9fa:	47a8      	blx	r5
		
		/* Write application task */
        if(sms_current_interrupt.int_on)
1000f9fc:	7863      	ldrb	r3, [r4, #1]
1000f9fe:	2b00      	cmp	r3, #0
1000fa00:	d100      	bne.n	1000fa04 <main+0xc4>
1000fa02:	e0db      	b.n	1000fbbc <main+0x27c>
        {
            if(ulp_active) {
1000fa04:	7833      	ldrb	r3, [r6, #0]
1000fa06:	2b00      	cmp	r3, #0
1000fa08:	d009      	beq.n	1000fa1e <main+0xde>
                DBG_LOG_DEV("[main]\t\t\t\tWaking up...");
1000fa0a:	4897      	ldr	r0, [pc, #604]	; (1000fc68 <main+0x328>)
1000fa0c:	4b97      	ldr	r3, [pc, #604]	; (1000fc6c <main+0x32c>)
1000fa0e:	4798      	blx	r3
1000fa10:	489d      	ldr	r0, [pc, #628]	; (1000fc88 <main+0x348>)
1000fa12:	4f98      	ldr	r7, [pc, #608]	; (1000fc74 <main+0x334>)
1000fa14:	47b8      	blx	r7
                acquire_sleep_lock();
1000fa16:	4b77      	ldr	r3, [pc, #476]	; (1000fbf4 <main+0x2b4>)
1000fa18:	4798      	blx	r3
                DBG_LOG_CONT_DEV(" done!");
1000fa1a:	489c      	ldr	r0, [pc, #624]	; (1000fc8c <main+0x34c>)
1000fa1c:	47b8      	blx	r7
            }                
            //ulp_ready = false;
            DBG_LOG_DEV("[main]\t\t\t\tDisabling button int...");
1000fa1e:	4892      	ldr	r0, [pc, #584]	; (1000fc68 <main+0x328>)
1000fa20:	4b92      	ldr	r3, [pc, #584]	; (1000fc6c <main+0x32c>)
1000fa22:	4798      	blx	r3
1000fa24:	489a      	ldr	r0, [pc, #616]	; (1000fc90 <main+0x350>)
1000fa26:	4f93      	ldr	r7, [pc, #588]	; (1000fc74 <main+0x334>)
1000fa28:	47b8      	blx	r7
            sms_button_toggle_interrupt(SMS_BTN_INT_DISABLE, SMS_BTN_INT_DISABLE);
1000fa2a:	2101      	movs	r1, #1
1000fa2c:	2001      	movs	r0, #1
1000fa2e:	4b8c      	ldr	r3, [pc, #560]	; (1000fc60 <main+0x320>)
1000fa30:	4798      	blx	r3
            DBG_LOG_CONT_DEV(" done!");
1000fa32:	4896      	ldr	r0, [pc, #600]	; (1000fc8c <main+0x34c>)
1000fa34:	47b8      	blx	r7
            //psp = __get_PSP();
            //msp = __get_MSP();
            //printf("\r\n\@ main: psp 0x%lx, msp 0x%lx", psp, msp);
            switch(sms_current_interrupt.source)
1000fa36:	4b92      	ldr	r3, [pc, #584]	; (1000fc80 <main+0x340>)
1000fa38:	781b      	ldrb	r3, [r3, #0]
1000fa3a:	b2db      	uxtb	r3, r3
1000fa3c:	2b06      	cmp	r3, #6
1000fa3e:	d900      	bls.n	1000fa42 <main+0x102>
1000fa40:	e0a6      	b.n	1000fb90 <main+0x250>
1000fa42:	009b      	lsls	r3, r3, #2
1000fa44:	4a93      	ldr	r2, [pc, #588]	; (1000fc94 <main+0x354>)
1000fa46:	58d3      	ldr	r3, [r2, r3]
1000fa48:	469f      	mov	pc, r3
            {
                case INT_NONE:
                //sms_monitor_states("NONE");
                DBG_LOG_DEV("...NO SOURCE!!");
1000fa4a:	4887      	ldr	r0, [pc, #540]	; (1000fc68 <main+0x328>)
1000fa4c:	4b87      	ldr	r3, [pc, #540]	; (1000fc6c <main+0x32c>)
1000fa4e:	4798      	blx	r3
1000fa50:	4891      	ldr	r0, [pc, #580]	; (1000fc98 <main+0x358>)
1000fa52:	4b88      	ldr	r3, [pc, #544]	; (1000fc74 <main+0x334>)
1000fa54:	4798      	blx	r3
                //if(ulp_ready) {
                    //DBG_LOG_DEV("[main]\t\t\tULP...");
                    //release_sleep_lock();
                //}
                //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
                break;
1000fa56:	e0a1      	b.n	1000fb9c <main+0x25c>
                
                case INT_BTN0:
                //sms_monitor_states("INT_BTN0");
                DBG_LOG_DEV("...BTN0");
1000fa58:	4883      	ldr	r0, [pc, #524]	; (1000fc68 <main+0x328>)
1000fa5a:	4b84      	ldr	r3, [pc, #528]	; (1000fc6c <main+0x32c>)
1000fa5c:	4798      	blx	r3
1000fa5e:	488f      	ldr	r0, [pc, #572]	; (1000fc9c <main+0x35c>)
1000fa60:	4b84      	ldr	r3, [pc, #528]	; (1000fc74 <main+0x334>)
1000fa62:	4798      	blx	r3
                if((sms_working_mode == SMS_MODE_BUTTON_MPU) || (sms_working_mode == SMS_MODE_COMPLETE) || (sms_working_mode == SMS_MODE_BUTTON_SOLO) || (sms_working_mode == SMS_MODE_BUTTON_PRESSURE)) {
1000fa64:	4b8e      	ldr	r3, [pc, #568]	; (1000fca0 <main+0x360>)
1000fa66:	781b      	ldrb	r3, [r3, #0]
1000fa68:	2b04      	cmp	r3, #4
1000fa6a:	d00c      	beq.n	1000fa86 <main+0x146>
1000fa6c:	4b8c      	ldr	r3, [pc, #560]	; (1000fca0 <main+0x360>)
1000fa6e:	781b      	ldrb	r3, [r3, #0]
1000fa70:	2b07      	cmp	r3, #7
1000fa72:	d008      	beq.n	1000fa86 <main+0x146>
1000fa74:	4b8a      	ldr	r3, [pc, #552]	; (1000fca0 <main+0x360>)
1000fa76:	781b      	ldrb	r3, [r3, #0]
1000fa78:	2b01      	cmp	r3, #1
1000fa7a:	d004      	beq.n	1000fa86 <main+0x146>
1000fa7c:	4b88      	ldr	r3, [pc, #544]	; (1000fca0 <main+0x360>)
1000fa7e:	781b      	ldrb	r3, [r3, #0]
1000fa80:	2b05      	cmp	r3, #5
1000fa82:	d000      	beq.n	1000fa86 <main+0x146>
1000fa84:	e08a      	b.n	1000fb9c <main+0x25c>
                        //DBG_LOG_DEV("[main]\t\t\t\tDisabling sensor int...");
                        //sms_sensors_toggle_interrupt(SMS_EXTINT_DISABLE);
                        //DBG_LOG_CONT_DEV(" done!");
                    //}                        
                    //sms_button_toggle_interrupt(SMS_BTN_INT_DISABLE, SMS_BTN_INT_DISABLE);
                    if(sms_button_fn(SMS_BTN_0) < 0) {
1000fa86:	2000      	movs	r0, #0
1000fa88:	4b86      	ldr	r3, [pc, #536]	; (1000fca4 <main+0x364>)
1000fa8a:	4798      	blx	r3
1000fa8c:	2800      	cmp	r0, #0
1000fa8e:	db00      	blt.n	1000fa92 <main+0x152>
1000fa90:	e084      	b.n	1000fb9c <main+0x25c>
                        DBG_LOG("[main]\t\t\t\tError in sms_button_fn()!");
1000fa92:	4875      	ldr	r0, [pc, #468]	; (1000fc68 <main+0x328>)
1000fa94:	4b75      	ldr	r3, [pc, #468]	; (1000fc6c <main+0x32c>)
1000fa96:	4798      	blx	r3
1000fa98:	4883      	ldr	r0, [pc, #524]	; (1000fca8 <main+0x368>)
1000fa9a:	4b76      	ldr	r3, [pc, #472]	; (1000fc74 <main+0x334>)
1000fa9c:	4798      	blx	r3
1000fa9e:	e07d      	b.n	1000fb9c <main+0x25c>
                }                    
                break;
                
                case INT_BTN1:
                //sms_monitor_states("INT_BTN1");
                DBG_LOG_DEV("...BTN1");
1000faa0:	4871      	ldr	r0, [pc, #452]	; (1000fc68 <main+0x328>)
1000faa2:	4b72      	ldr	r3, [pc, #456]	; (1000fc6c <main+0x32c>)
1000faa4:	4798      	blx	r3
1000faa6:	4881      	ldr	r0, [pc, #516]	; (1000fcac <main+0x36c>)
1000faa8:	4b72      	ldr	r3, [pc, #456]	; (1000fc74 <main+0x334>)
1000faaa:	4798      	blx	r3
                if((sms_working_mode == SMS_MODE_BUTTON_MPU) || (sms_working_mode == SMS_MODE_COMPLETE) || (sms_working_mode == SMS_MODE_BUTTON_SOLO) || (sms_working_mode == SMS_MODE_BUTTON_PRESSURE)) {
1000faac:	4b7c      	ldr	r3, [pc, #496]	; (1000fca0 <main+0x360>)
1000faae:	781b      	ldrb	r3, [r3, #0]
1000fab0:	2b04      	cmp	r3, #4
1000fab2:	d00b      	beq.n	1000facc <main+0x18c>
1000fab4:	4b7a      	ldr	r3, [pc, #488]	; (1000fca0 <main+0x360>)
1000fab6:	781b      	ldrb	r3, [r3, #0]
1000fab8:	2b07      	cmp	r3, #7
1000faba:	d007      	beq.n	1000facc <main+0x18c>
1000fabc:	4b78      	ldr	r3, [pc, #480]	; (1000fca0 <main+0x360>)
1000fabe:	781b      	ldrb	r3, [r3, #0]
1000fac0:	2b01      	cmp	r3, #1
1000fac2:	d003      	beq.n	1000facc <main+0x18c>
1000fac4:	4b76      	ldr	r3, [pc, #472]	; (1000fca0 <main+0x360>)
1000fac6:	781b      	ldrb	r3, [r3, #0]
1000fac8:	2b05      	cmp	r3, #5
1000faca:	d167      	bne.n	1000fb9c <main+0x25c>
                        //DBG_LOG_DEV("[main]\t\t\t\tDisabling sensor int...");
                        //sms_sensors_toggle_interrupt(SMS_EXTINT_DISABLE);
                        //DBG_LOG_CONT_DEV(" done!");
                    //}                        
                    //sms_button_toggle_interrupt(SMS_BTN_INT_DISABLE, SMS_BTN_INT_DISABLE);
                    if(sms_button_fn(SMS_BTN_1) < 0) {
1000facc:	2001      	movs	r0, #1
1000face:	4b75      	ldr	r3, [pc, #468]	; (1000fca4 <main+0x364>)
1000fad0:	4798      	blx	r3
1000fad2:	2800      	cmp	r0, #0
1000fad4:	da62      	bge.n	1000fb9c <main+0x25c>
                        DBG_LOG("[main]\t\t\t\tError in sms_button_fn()!");
1000fad6:	4864      	ldr	r0, [pc, #400]	; (1000fc68 <main+0x328>)
1000fad8:	4b64      	ldr	r3, [pc, #400]	; (1000fc6c <main+0x32c>)
1000fada:	4798      	blx	r3
1000fadc:	4872      	ldr	r0, [pc, #456]	; (1000fca8 <main+0x368>)
1000fade:	4b65      	ldr	r3, [pc, #404]	; (1000fc74 <main+0x334>)
1000fae0:	4798      	blx	r3
1000fae2:	e05b      	b.n	1000fb9c <main+0x25c>
                }                    
                break;
                
                case INT_MPU_DRDY:
                //sms_monitor_states("INT_IMU_DRDY");
                DBG_LOG_DEV("...MPU_DRDY");
1000fae4:	4860      	ldr	r0, [pc, #384]	; (1000fc68 <main+0x328>)
1000fae6:	4b61      	ldr	r3, [pc, #388]	; (1000fc6c <main+0x32c>)
1000fae8:	4798      	blx	r3
1000faea:	4871      	ldr	r0, [pc, #452]	; (1000fcb0 <main+0x370>)
1000faec:	4b61      	ldr	r3, [pc, #388]	; (1000fc74 <main+0x334>)
1000faee:	4798      	blx	r3
                //if((sms_working_mode == SMS_MODE_BUTTON_MPU) || (sms_working_mode == SMS_MODE_COMPLETE) || (sms_working_mode == SMS_MODE_MPU_SOLO) || (sms_working_mode == SMS_MODE_MPU_PRESSURE)) {
                    sms_mpu_poll_data();
1000faf0:	4b70      	ldr	r3, [pc, #448]	; (1000fcb4 <main+0x374>)
1000faf2:	4798      	blx	r3
                //}                    
                break;
1000faf4:	e052      	b.n	1000fb9c <main+0x25c>
                
                case INT_AON_TIMER:
                //sms_monitor_states("INT_AON_TIMER");
                DBG_LOG_DEV("...AON_TIMER");
1000faf6:	485c      	ldr	r0, [pc, #368]	; (1000fc68 <main+0x328>)
1000faf8:	4b5c      	ldr	r3, [pc, #368]	; (1000fc6c <main+0x32c>)
1000fafa:	4798      	blx	r3
1000fafc:	486e      	ldr	r0, [pc, #440]	; (1000fcb8 <main+0x378>)
1000fafe:	4b5d      	ldr	r3, [pc, #372]	; (1000fc74 <main+0x334>)
1000fb00:	4798      	blx	r3
                if((sms_working_mode == SMS_MODE_BUTTON_PRESSURE) || (sms_working_mode == SMS_MODE_COMPLETE) || (sms_working_mode == SMS_MODE_PRESSURE_SOLO) || (sms_working_mode == SMS_MODE_MPU_PRESSURE)) {
1000fb02:	4b67      	ldr	r3, [pc, #412]	; (1000fca0 <main+0x360>)
1000fb04:	781b      	ldrb	r3, [r3, #0]
1000fb06:	2b05      	cmp	r3, #5
1000fb08:	d00b      	beq.n	1000fb22 <main+0x1e2>
1000fb0a:	4b65      	ldr	r3, [pc, #404]	; (1000fca0 <main+0x360>)
1000fb0c:	781b      	ldrb	r3, [r3, #0]
1000fb0e:	2b07      	cmp	r3, #7
1000fb10:	d007      	beq.n	1000fb22 <main+0x1e2>
1000fb12:	4b63      	ldr	r3, [pc, #396]	; (1000fca0 <main+0x360>)
1000fb14:	781b      	ldrb	r3, [r3, #0]
1000fb16:	2b03      	cmp	r3, #3
1000fb18:	d003      	beq.n	1000fb22 <main+0x1e2>
1000fb1a:	4b61      	ldr	r3, [pc, #388]	; (1000fca0 <main+0x360>)
1000fb1c:	781b      	ldrb	r3, [r3, #0]
1000fb1e:	2b06      	cmp	r3, #6
1000fb20:	d13c      	bne.n	1000fb9c <main+0x25c>
                    if(ble_current_state == BLE_STATE_PAIRED) {
1000fb22:	4b30      	ldr	r3, [pc, #192]	; (1000fbe4 <main+0x2a4>)
1000fb24:	781b      	ldrb	r3, [r3, #0]
1000fb26:	2b22      	cmp	r3, #34	; 0x22
1000fb28:	d10a      	bne.n	1000fb40 <main+0x200>
                        //DBG_LOG_DEV("[main]\t\t\tDisabling button int...");
                        //sms_button_toggle_interrupt(SMS_EXTINT_DISABLE);
                        //DBG_LOG_CONT_DEV(" done!");
                        DBG_LOG_DEV("[main]\t\t\t\tPolling pressure data...");
1000fb2a:	484f      	ldr	r0, [pc, #316]	; (1000fc68 <main+0x328>)
1000fb2c:	4b4f      	ldr	r3, [pc, #316]	; (1000fc6c <main+0x32c>)
1000fb2e:	4798      	blx	r3
1000fb30:	4862      	ldr	r0, [pc, #392]	; (1000fcbc <main+0x37c>)
1000fb32:	4f50      	ldr	r7, [pc, #320]	; (1000fc74 <main+0x334>)
1000fb34:	47b8      	blx	r7
                        sms_pressure_poll_data();
1000fb36:	4b62      	ldr	r3, [pc, #392]	; (1000fcc0 <main+0x380>)
1000fb38:	4798      	blx	r3
                        DBG_LOG_CONT_DEV(" done!");
1000fb3a:	4854      	ldr	r0, [pc, #336]	; (1000fc8c <main+0x34c>)
1000fb3c:	47b8      	blx	r7
1000fb3e:	e02d      	b.n	1000fb9c <main+0x25c>
                        //DBG_LOG_DEV("[main]\t\t\tEnabling button int...");
                        //sms_button_toggle_interrupt(SMS_EXTINT_ENABLE);
                        //DBG_LOG_CONT_DEV(" done!");
                    }
                    else if(ble_current_state == BLE_STATE_INDICATING) {
1000fb40:	4b28      	ldr	r3, [pc, #160]	; (1000fbe4 <main+0x2a4>)
1000fb42:	781b      	ldrb	r3, [r3, #0]
1000fb44:	2b23      	cmp	r3, #35	; 0x23
1000fb46:	d106      	bne.n	1000fb56 <main+0x216>
                        DBG_LOG_DEV("[main]\t\t\t\tAON timer ready while indicating... skipping");
1000fb48:	4847      	ldr	r0, [pc, #284]	; (1000fc68 <main+0x328>)
1000fb4a:	4b48      	ldr	r3, [pc, #288]	; (1000fc6c <main+0x32c>)
1000fb4c:	4798      	blx	r3
1000fb4e:	485d      	ldr	r0, [pc, #372]	; (1000fcc4 <main+0x384>)
1000fb50:	4b48      	ldr	r3, [pc, #288]	; (1000fc74 <main+0x334>)
1000fb52:	4798      	blx	r3
1000fb54:	e022      	b.n	1000fb9c <main+0x25c>
                    }
                    else {
                        sms_timer_aon_disable();
1000fb56:	4b5c      	ldr	r3, [pc, #368]	; (1000fcc8 <main+0x388>)
1000fb58:	4798      	blx	r3
                        sms_ble_power_down();
1000fb5a:	4b5c      	ldr	r3, [pc, #368]	; (1000fccc <main+0x38c>)
1000fb5c:	4798      	blx	r3
1000fb5e:	e01d      	b.n	1000fb9c <main+0x25c>
                }                    
                break;
                
                case INT_DUALTIMER1:
                //sms_monitor_states("INT_DUALTIMER1");
                DBG_LOG_DEV("...DUALTIMER1");
1000fb60:	4841      	ldr	r0, [pc, #260]	; (1000fc68 <main+0x328>)
1000fb62:	4b42      	ldr	r3, [pc, #264]	; (1000fc6c <main+0x32c>)
1000fb64:	4798      	blx	r3
1000fb66:	485a      	ldr	r0, [pc, #360]	; (1000fcd0 <main+0x390>)
1000fb68:	4b42      	ldr	r3, [pc, #264]	; (1000fc74 <main+0x334>)
1000fb6a:	4798      	blx	r3
                sms_dualtimer_stop(DUALTIMER_TIMER1);
1000fb6c:	2000      	movs	r0, #0
1000fb6e:	4b59      	ldr	r3, [pc, #356]	; (1000fcd4 <main+0x394>)
1000fb70:	4798      	blx	r3
                sms_dualtimer1_fn();
1000fb72:	4b59      	ldr	r3, [pc, #356]	; (1000fcd8 <main+0x398>)
1000fb74:	4798      	blx	r3
                break;
1000fb76:	e011      	b.n	1000fb9c <main+0x25c>
                
                case INT_DUALTIMER2:
                //sms_monitor_states("INT_DUALTIMER2");
                DBG_LOG_DEV("...DUALTIMER2");
1000fb78:	483b      	ldr	r0, [pc, #236]	; (1000fc68 <main+0x328>)
1000fb7a:	4b3c      	ldr	r3, [pc, #240]	; (1000fc6c <main+0x32c>)
1000fb7c:	4798      	blx	r3
1000fb7e:	4857      	ldr	r0, [pc, #348]	; (1000fcdc <main+0x39c>)
1000fb80:	4b3c      	ldr	r3, [pc, #240]	; (1000fc74 <main+0x334>)
1000fb82:	4798      	blx	r3
                sms_dualtimer_stop(DUALTIMER_TIMER2);
1000fb84:	2001      	movs	r0, #1
1000fb86:	4b53      	ldr	r3, [pc, #332]	; (1000fcd4 <main+0x394>)
1000fb88:	4798      	blx	r3
                sms_dualtimer2_fn();
1000fb8a:	4b55      	ldr	r3, [pc, #340]	; (1000fce0 <main+0x3a0>)
1000fb8c:	4798      	blx	r3
                break;
1000fb8e:	e005      	b.n	1000fb9c <main+0x25c>
                
                default:
                DBG_LOG_DEV("...??");
1000fb90:	4835      	ldr	r0, [pc, #212]	; (1000fc68 <main+0x328>)
1000fb92:	4b36      	ldr	r3, [pc, #216]	; (1000fc6c <main+0x32c>)
1000fb94:	4798      	blx	r3
1000fb96:	4853      	ldr	r0, [pc, #332]	; (1000fce4 <main+0x3a4>)
1000fb98:	4b36      	ldr	r3, [pc, #216]	; (1000fc74 <main+0x334>)
1000fb9a:	4798      	blx	r3
                //sms_monitor_states("ERROR!!");
                break;
            }
            
            DBG_LOG_DEV("[main]\t\t\t\tEnabling button int...");
1000fb9c:	4832      	ldr	r0, [pc, #200]	; (1000fc68 <main+0x328>)
1000fb9e:	4b33      	ldr	r3, [pc, #204]	; (1000fc6c <main+0x32c>)
1000fba0:	4798      	blx	r3
1000fba2:	4851      	ldr	r0, [pc, #324]	; (1000fce8 <main+0x3a8>)
1000fba4:	4f33      	ldr	r7, [pc, #204]	; (1000fc74 <main+0x334>)
1000fba6:	47b8      	blx	r7
            sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
1000fba8:	2100      	movs	r1, #0
1000fbaa:	2000      	movs	r0, #0
1000fbac:	4b2c      	ldr	r3, [pc, #176]	; (1000fc60 <main+0x320>)
1000fbae:	4798      	blx	r3
            DBG_LOG_CONT_DEV(" done!");
1000fbb0:	4836      	ldr	r0, [pc, #216]	; (1000fc8c <main+0x34c>)
1000fbb2:	47b8      	blx	r7
            sms_current_interrupt.int_on = false;
1000fbb4:	4b32      	ldr	r3, [pc, #200]	; (1000fc80 <main+0x340>)
1000fbb6:	2200      	movs	r2, #0
1000fbb8:	705a      	strb	r2, [r3, #1]
            sms_current_interrupt.source = INT_NONE;
1000fbba:	701a      	strb	r2, [r3, #0]
        }
        
        
        if(ulp_ready) {
1000fbbc:	4b4b      	ldr	r3, [pc, #300]	; (1000fcec <main+0x3ac>)
1000fbbe:	781b      	ldrb	r3, [r3, #0]
1000fbc0:	2b00      	cmp	r3, #0
1000fbc2:	d00b      	beq.n	1000fbdc <main+0x29c>
            DBG_LOG_DEV("[main]\t\t\t\tULP...");
1000fbc4:	4828      	ldr	r0, [pc, #160]	; (1000fc68 <main+0x328>)
1000fbc6:	4b29      	ldr	r3, [pc, #164]	; (1000fc6c <main+0x32c>)
1000fbc8:	4798      	blx	r3
1000fbca:	4849      	ldr	r0, [pc, #292]	; (1000fcf0 <main+0x3b0>)
1000fbcc:	4f29      	ldr	r7, [pc, #164]	; (1000fc74 <main+0x334>)
1000fbce:	47b8      	blx	r7
            ulp_active = true;
1000fbd0:	2201      	movs	r2, #1
1000fbd2:	4b2c      	ldr	r3, [pc, #176]	; (1000fc84 <main+0x344>)
1000fbd4:	701a      	strb	r2, [r3, #0]
            //release_sleep_lock();
            //DBG_LOG_CONT_DEV(" zzzz");
            DBG_LOG_CONT_DEV(" !!");
1000fbd6:	4847      	ldr	r0, [pc, #284]	; (1000fcf4 <main+0x3b4>)
1000fbd8:	47b8      	blx	r7
1000fbda:	e70c      	b.n	1000f9f6 <main+0xb6>
        }            
        else {
            ulp_active = false;
1000fbdc:	2200      	movs	r2, #0
1000fbde:	4b29      	ldr	r3, [pc, #164]	; (1000fc84 <main+0x344>)
1000fbe0:	701a      	strb	r2, [r3, #0]
1000fbe2:	e708      	b.n	1000f9f6 <main+0xb6>
1000fbe4:	1001a330 	.word	0x1001a330
1000fbe8:	1000f131 	.word	0x1000f131
1000fbec:	1000c6b9 	.word	0x1000c6b9
1000fbf0:	1000ee25 	.word	0x1000ee25
1000fbf4:	1000f685 	.word	0x1000f685
1000fbf8:	1000f8d1 	.word	0x1000f8d1
1000fbfc:	1000b54d 	.word	0x1000b54d
1000fc00:	100080e9 	.word	0x100080e9
1000fc04:	1000a561 	.word	0x1000a561
1000fc08:	1000af2d 	.word	0x1000af2d
1000fc0c:	1000ab01 	.word	0x1000ab01
1000fc10:	1000b405 	.word	0x1000b405
1000fc14:	1000ac8d 	.word	0x1000ac8d
1000fc18:	1001a294 	.word	0x1001a294
1000fc1c:	1000a989 	.word	0x1000a989
1000fc20:	1000e499 	.word	0x1000e499
1000fc24:	1000a921 	.word	0x1000a921
1000fc28:	1000b39d 	.word	0x1000b39d
1000fc2c:	1000aea1 	.word	0x1000aea1
1000fc30:	1000f87d 	.word	0x1000f87d
1000fc34:	1000f6c9 	.word	0x1000f6c9
1000fc38:	1000b60d 	.word	0x1000b60d
1000fc3c:	1000b589 	.word	0x1000b589
1000fc40:	1000b62d 	.word	0x1000b62d
1000fc44:	1000a615 	.word	0x1000a615
1000fc48:	1000ad0d 	.word	0x1000ad0d
1000fc4c:	10016bf8 	.word	0x10016bf8
1000fc50:	1000e3c9 	.word	0x1000e3c9
1000fc54:	10016c44 	.word	0x10016c44
1000fc58:	1000f871 	.word	0x1000f871
1000fc5c:	1000ed95 	.word	0x1000ed95
1000fc60:	1000a8d5 	.word	0x1000a8d5
1000fc64:	1000ad25 	.word	0x1000ad25
1000fc68:	1001663c 	.word	0x1001663c
1000fc6c:	10015495 	.word	0x10015495
1000fc70:	10018298 	.word	0x10018298
1000fc74:	10015375 	.word	0x10015375
1000fc78:	1000aa35 	.word	0x1000aa35
1000fc7c:	1000ec91 	.word	0x1000ec91
1000fc80:	1001a318 	.word	0x1001a318
1000fc84:	1001a337 	.word	0x1001a337
1000fc88:	100182b4 	.word	0x100182b4
1000fc8c:	100182cc 	.word	0x100182cc
1000fc90:	100182d4 	.word	0x100182d4
1000fc94:	1001827c 	.word	0x1001827c
1000fc98:	100182f8 	.word	0x100182f8
1000fc9c:	10018308 	.word	0x10018308
1000fca0:	1001a218 	.word	0x1001a218
1000fca4:	1000a691 	.word	0x1000a691
1000fca8:	10018310 	.word	0x10018310
1000fcac:	10018334 	.word	0x10018334
1000fcb0:	1001833c 	.word	0x1001833c
1000fcb4:	1000ae05 	.word	0x1000ae05
1000fcb8:	10018348 	.word	0x10018348
1000fcbc:	10018358 	.word	0x10018358
1000fcc0:	1000b32d 	.word	0x1000b32d
1000fcc4:	1001837c 	.word	0x1001837c
1000fcc8:	1000b501 	.word	0x1000b501
1000fccc:	10009f19 	.word	0x10009f19
1000fcd0:	100183b4 	.word	0x100183b4
1000fcd4:	1000b601 	.word	0x1000b601
1000fcd8:	1000b64d 	.word	0x1000b64d
1000fcdc:	100183c4 	.word	0x100183c4
1000fce0:	1000b94d 	.word	0x1000b94d
1000fce4:	100183d4 	.word	0x100183d4
1000fce8:	100183dc 	.word	0x100183dc
1000fcec:	1001a219 	.word	0x1001a219
1000fcf0:	10018400 	.word	0x10018400
1000fcf4:	10018414 	.word	0x10018414

1000fcf8 <internal_event_post>:
1000fcf8:	b570      	push	{r4, r5, r6, lr}
1000fcfa:	4d12      	ldr	r5, [pc, #72]	; (1000fd44 <internal_event_post+0x4c>)
1000fcfc:	682c      	ldr	r4, [r5, #0]
1000fcfe:	2c00      	cmp	r4, #0
1000fd00:	d014      	beq.n	1000fd2c <internal_event_post+0x34>
1000fd02:	6826      	ldr	r6, [r4, #0]
1000fd04:	60e2      	str	r2, [r4, #12]
1000fd06:	602e      	str	r6, [r5, #0]
1000fd08:	2500      	movs	r5, #0
1000fd0a:	4a0f      	ldr	r2, [pc, #60]	; (1000fd48 <internal_event_post+0x50>)
1000fd0c:	8123      	strh	r3, [r4, #8]
1000fd0e:	6813      	ldr	r3, [r2, #0]
1000fd10:	6025      	str	r5, [r4, #0]
1000fd12:	80a0      	strh	r0, [r4, #4]
1000fd14:	80e1      	strh	r1, [r4, #6]
1000fd16:	42ab      	cmp	r3, r5
1000fd18:	d101      	bne.n	1000fd1e <internal_event_post+0x26>
1000fd1a:	6014      	str	r4, [r2, #0]
1000fd1c:	e011      	b.n	1000fd42 <internal_event_post+0x4a>
1000fd1e:	681a      	ldr	r2, [r3, #0]
1000fd20:	2a00      	cmp	r2, #0
1000fd22:	d001      	beq.n	1000fd28 <internal_event_post+0x30>
1000fd24:	1c13      	adds	r3, r2, #0
1000fd26:	e7fa      	b.n	1000fd1e <internal_event_post+0x26>
1000fd28:	601c      	str	r4, [r3, #0]
1000fd2a:	e00a      	b.n	1000fd42 <internal_event_post+0x4a>
1000fd2c:	b2c4      	uxtb	r4, r0
1000fd2e:	2c00      	cmp	r4, #0
1000fd30:	d107      	bne.n	1000fd42 <internal_event_post+0x4a>
1000fd32:	4c06      	ldr	r4, [pc, #24]	; (1000fd4c <internal_event_post+0x54>)
1000fd34:	60e2      	str	r2, [r4, #12]
1000fd36:	2201      	movs	r2, #1
1000fd38:	8123      	strh	r3, [r4, #8]
1000fd3a:	4b05      	ldr	r3, [pc, #20]	; (1000fd50 <internal_event_post+0x58>)
1000fd3c:	80a0      	strh	r0, [r4, #4]
1000fd3e:	80e1      	strh	r1, [r4, #6]
1000fd40:	701a      	strb	r2, [r3, #0]
1000fd42:	bd70      	pop	{r4, r5, r6, pc}
1000fd44:	1001a0c8 	.word	0x1001a0c8
1000fd48:	1001a0c4 	.word	0x1001a0c4
1000fd4c:	1001a0b0 	.word	0x1001a0b0
1000fd50:	1001a0c0 	.word	0x1001a0c0

1000fd54 <internal_event_init>:
1000fd54:	b510      	push	{r4, lr}
1000fd56:	4b08      	ldr	r3, [pc, #32]	; (1000fd78 <internal_event_init+0x24>)
1000fd58:	0900      	lsrs	r0, r0, #4
1000fd5a:	0100      	lsls	r0, r0, #4
1000fd5c:	681a      	ldr	r2, [r3, #0]
1000fd5e:	1808      	adds	r0, r1, r0
1000fd60:	4281      	cmp	r1, r0
1000fd62:	d003      	beq.n	1000fd6c <internal_event_init+0x18>
1000fd64:	600a      	str	r2, [r1, #0]
1000fd66:	1c0a      	adds	r2, r1, #0
1000fd68:	3110      	adds	r1, #16
1000fd6a:	e7f9      	b.n	1000fd60 <internal_event_init+0xc>
1000fd6c:	601a      	str	r2, [r3, #0]
1000fd6e:	2200      	movs	r2, #0
1000fd70:	4b02      	ldr	r3, [pc, #8]	; (1000fd7c <internal_event_init+0x28>)
1000fd72:	601a      	str	r2, [r3, #0]
1000fd74:	bd10      	pop	{r4, pc}
1000fd76:	46c0      	nop			; (mov r8, r8)
1000fd78:	1001a0c8 	.word	0x1001a0c8
1000fd7c:	1001a0c4 	.word	0x1001a0c4

1000fd80 <special_events_handler>:
1000fd80:	b538      	push	{r3, r4, r5, lr}
1000fd82:	4c1b      	ldr	r4, [pc, #108]	; (1000fdf0 <special_events_handler+0x70>)
1000fd84:	1c03      	adds	r3, r0, #0
1000fd86:	8825      	ldrh	r5, [r4, #0]
1000fd88:	1c08      	adds	r0, r1, #0
1000fd8a:	1c21      	adds	r1, r4, #0
1000fd8c:	429d      	cmp	r5, r3
1000fd8e:	d107      	bne.n	1000fda0 <special_events_handler+0x20>
1000fd90:	88a5      	ldrh	r5, [r4, #4]
1000fd92:	4285      	cmp	r5, r0
1000fd94:	d104      	bne.n	1000fda0 <special_events_handler+0x20>
1000fd96:	2301      	movs	r3, #1
1000fd98:	425b      	negs	r3, r3
1000fd9a:	8023      	strh	r3, [r4, #0]
1000fd9c:	60a2      	str	r2, [r4, #8]
1000fd9e:	e009      	b.n	1000fdb4 <special_events_handler+0x34>
1000fda0:	884c      	ldrh	r4, [r1, #2]
1000fda2:	429c      	cmp	r4, r3
1000fda4:	d10a      	bne.n	1000fdbc <special_events_handler+0x3c>
1000fda6:	888c      	ldrh	r4, [r1, #4]
1000fda8:	4284      	cmp	r4, r0
1000fdaa:	d107      	bne.n	1000fdbc <special_events_handler+0x3c>
1000fdac:	2301      	movs	r3, #1
1000fdae:	425b      	negs	r3, r3
1000fdb0:	804b      	strh	r3, [r1, #2]
1000fdb2:	608a      	str	r2, [r1, #8]
1000fdb4:	4b0f      	ldr	r3, [pc, #60]	; (1000fdf4 <special_events_handler+0x74>)
1000fdb6:	4798      	blx	r3
1000fdb8:	2001      	movs	r0, #1
1000fdba:	e017      	b.n	1000fdec <special_events_handler+0x6c>
1000fdbc:	490e      	ldr	r1, [pc, #56]	; (1000fdf8 <special_events_handler+0x78>)
1000fdbe:	428b      	cmp	r3, r1
1000fdc0:	d00e      	beq.n	1000fde0 <special_events_handler+0x60>
1000fdc2:	490e      	ldr	r1, [pc, #56]	; (1000fdfc <special_events_handler+0x7c>)
1000fdc4:	428b      	cmp	r3, r1
1000fdc6:	d007      	beq.n	1000fdd8 <special_events_handler+0x58>
1000fdc8:	490d      	ldr	r1, [pc, #52]	; (1000fe00 <special_events_handler+0x80>)
1000fdca:	2000      	movs	r0, #0
1000fdcc:	428b      	cmp	r3, r1
1000fdce:	d10d      	bne.n	1000fdec <special_events_handler+0x6c>
1000fdd0:	1c10      	adds	r0, r2, #0
1000fdd2:	4b0c      	ldr	r3, [pc, #48]	; (1000fe04 <special_events_handler+0x84>)
1000fdd4:	4798      	blx	r3
1000fdd6:	e7ef      	b.n	1000fdb8 <special_events_handler+0x38>
1000fdd8:	1c11      	adds	r1, r2, #0
1000fdda:	4b0b      	ldr	r3, [pc, #44]	; (1000fe08 <special_events_handler+0x88>)
1000fddc:	2200      	movs	r2, #0
1000fdde:	e002      	b.n	1000fde6 <special_events_handler+0x66>
1000fde0:	1c11      	adds	r1, r2, #0
1000fde2:	2200      	movs	r2, #0
1000fde4:	4b09      	ldr	r3, [pc, #36]	; (1000fe0c <special_events_handler+0x8c>)
1000fde6:	4798      	blx	r3
1000fde8:	4243      	negs	r3, r0
1000fdea:	4158      	adcs	r0, r3
1000fdec:	bd38      	pop	{r3, r4, r5, pc}
1000fdee:	46c0      	nop			; (mov r8, r8)
1000fdf0:	1001afcc 	.word	0x1001afcc
1000fdf4:	100117dd 	.word	0x100117dd
1000fdf8:	00000e13 	.word	0x00000e13
1000fdfc:	00000e15 	.word	0x00000e15
1000fe00:	00000e01 	.word	0x00000e01
1000fe04:	10011b4d 	.word	0x10011b4d
1000fe08:	10011d0d 	.word	0x10011d0d
1000fe0c:	10011de5 	.word	0x10011de5

1000fe10 <at_ble_event_get>:
1000fe10:	2300      	movs	r3, #0
1000fe12:	b5f0      	push	{r4, r5, r6, r7, lr}
1000fe14:	b087      	sub	sp, #28
1000fe16:	9204      	str	r2, [sp, #16]
1000fe18:	7003      	strb	r3, [r0, #0]
1000fe1a:	9b04      	ldr	r3, [sp, #16]
1000fe1c:	9003      	str	r0, [sp, #12]
1000fe1e:	3b01      	subs	r3, #1
1000fe20:	1c0d      	adds	r5, r1, #0
1000fe22:	9305      	str	r3, [sp, #20]
1000fe24:	3303      	adds	r3, #3
1000fe26:	d802      	bhi.n	1000fe2e <at_ble_event_get+0x1e>
1000fe28:	9804      	ldr	r0, [sp, #16]
1000fe2a:	4bae      	ldr	r3, [pc, #696]	; (100100e4 <at_ble_event_get+0x2d4>)
1000fe2c:	4798      	blx	r3
1000fe2e:	9b05      	ldr	r3, [sp, #20]
1000fe30:	4cad      	ldr	r4, [pc, #692]	; (100100e8 <at_ble_event_get+0x2d8>)
1000fe32:	3303      	adds	r3, #3
1000fe34:	d902      	bls.n	1000fe3c <at_ble_event_get+0x2c>
1000fe36:	2300      	movs	r3, #0
1000fe38:	9302      	str	r3, [sp, #8]
1000fe3a:	e015      	b.n	1000fe68 <at_ble_event_get+0x58>
1000fe3c:	2300      	movs	r3, #0
1000fe3e:	9302      	str	r3, [sp, #8]
1000fe40:	6823      	ldr	r3, [r4, #0]
1000fe42:	2b00      	cmp	r3, #0
1000fe44:	d113      	bne.n	1000fe6e <at_ble_event_get+0x5e>
1000fe46:	9b02      	ldr	r3, [sp, #8]
1000fe48:	2bd0      	cmp	r3, #208	; 0xd0
1000fe4a:	d100      	bne.n	1000fe4e <at_ble_event_get+0x3e>
1000fe4c:	e2da      	b.n	10010404 <at_ble_event_get+0x5f4>
1000fe4e:	9804      	ldr	r0, [sp, #16]
1000fe50:	4ba6      	ldr	r3, [pc, #664]	; (100100ec <at_ble_event_get+0x2dc>)
1000fe52:	4798      	blx	r3
1000fe54:	9002      	str	r0, [sp, #8]
1000fe56:	2802      	cmp	r0, #2
1000fe58:	d1f2      	bne.n	1000fe40 <at_ble_event_get+0x30>
1000fe5a:	e03f      	b.n	1000fedc <at_ble_event_get+0xcc>
1000fe5c:	9804      	ldr	r0, [sp, #16]
1000fe5e:	4ba3      	ldr	r3, [pc, #652]	; (100100ec <at_ble_event_get+0x2dc>)
1000fe60:	4798      	blx	r3
1000fe62:	9002      	str	r0, [sp, #8]
1000fe64:	2802      	cmp	r0, #2
1000fe66:	d039      	beq.n	1000fedc <at_ble_event_get+0xcc>
1000fe68:	6823      	ldr	r3, [r4, #0]
1000fe6a:	2b00      	cmp	r3, #0
1000fe6c:	d0f6      	beq.n	1000fe5c <at_ble_event_get+0x4c>
1000fe6e:	9b02      	ldr	r3, [sp, #8]
1000fe70:	2bd0      	cmp	r3, #208	; 0xd0
1000fe72:	d100      	bne.n	1000fe76 <at_ble_event_get+0x66>
1000fe74:	e2c6      	b.n	10010404 <at_ble_event_get+0x5f4>
1000fe76:	9b02      	ldr	r3, [sp, #8]
1000fe78:	3b03      	subs	r3, #3
1000fe7a:	1e5a      	subs	r2, r3, #1
1000fe7c:	4193      	sbcs	r3, r2
1000fe7e:	9a02      	ldr	r2, [sp, #8]
1000fe80:	425b      	negs	r3, r3
1000fe82:	401a      	ands	r2, r3
1000fe84:	6823      	ldr	r3, [r4, #0]
1000fe86:	9202      	str	r2, [sp, #8]
1000fe88:	2b00      	cmp	r3, #0
1000fe8a:	d100      	bne.n	1000fe8e <at_ble_event_get+0x7e>
1000fe8c:	e2c2      	b.n	10010414 <at_ble_event_get+0x604>
1000fe8e:	681a      	ldr	r2, [r3, #0]
1000fe90:	68de      	ldr	r6, [r3, #12]
1000fe92:	6022      	str	r2, [r4, #0]
1000fe94:	88da      	ldrh	r2, [r3, #6]
1000fe96:	9201      	str	r2, [sp, #4]
1000fe98:	4a95      	ldr	r2, [pc, #596]	; (100100f0 <at_ble_event_get+0x2e0>)
1000fe9a:	889c      	ldrh	r4, [r3, #4]
1000fe9c:	6811      	ldr	r1, [r2, #0]
1000fe9e:	6013      	str	r3, [r2, #0]
1000fea0:	6019      	str	r1, [r3, #0]
1000fea2:	4b94      	ldr	r3, [pc, #592]	; (100100f4 <at_ble_event_get+0x2e4>)
1000fea4:	781b      	ldrb	r3, [r3, #0]
1000fea6:	2b01      	cmp	r3, #1
1000fea8:	d10f      	bne.n	1000feca <at_ble_event_get+0xba>
1000feaa:	4b93      	ldr	r3, [pc, #588]	; (100100f8 <at_ble_event_get+0x2e8>)
1000feac:	4a92      	ldr	r2, [pc, #584]	; (100100f8 <at_ble_event_get+0x2e8>)
1000feae:	8898      	ldrh	r0, [r3, #4]
1000feb0:	88d9      	ldrh	r1, [r3, #6]
1000feb2:	68d2      	ldr	r2, [r2, #12]
1000feb4:	891b      	ldrh	r3, [r3, #8]
1000feb6:	4f91      	ldr	r7, [pc, #580]	; (100100fc <at_ble_event_get+0x2ec>)
1000feb8:	47b8      	blx	r7
1000feba:	2210      	movs	r2, #16
1000febc:	4b90      	ldr	r3, [pc, #576]	; (10010100 <at_ble_event_get+0x2f0>)
1000febe:	488e      	ldr	r0, [pc, #568]	; (100100f8 <at_ble_event_get+0x2e8>)
1000fec0:	2100      	movs	r1, #0
1000fec2:	4798      	blx	r3
1000fec4:	2300      	movs	r3, #0
1000fec6:	4a8b      	ldr	r2, [pc, #556]	; (100100f4 <at_ble_event_get+0x2e4>)
1000fec8:	7013      	strb	r3, [r2, #0]
1000feca:	9b02      	ldr	r3, [sp, #8]
1000fecc:	2b00      	cmp	r3, #0
1000fece:	d114      	bne.n	1000fefa <at_ble_event_get+0xea>
1000fed0:	4b8c      	ldr	r3, [pc, #560]	; (10010104 <at_ble_event_get+0x2f4>)
1000fed2:	429c      	cmp	r4, r3
1000fed4:	d009      	beq.n	1000feea <at_ble_event_get+0xda>
1000fed6:	4b8c      	ldr	r3, [pc, #560]	; (10010108 <at_ble_event_get+0x2f8>)
1000fed8:	429c      	cmp	r4, r3
1000feda:	d127      	bne.n	1000ff2c <at_ble_event_get+0x11c>
1000fedc:	233a      	movs	r3, #58	; 0x3a
1000fede:	9a03      	ldr	r2, [sp, #12]
1000fee0:	7013      	strb	r3, [r2, #0]
1000fee2:	2300      	movs	r3, #0
1000fee4:	9302      	str	r3, [sp, #8]
1000fee6:	1c1d      	adds	r5, r3, #0
1000fee8:	e007      	b.n	1000fefa <at_ble_event_get+0xea>
1000feea:	9b01      	ldr	r3, [sp, #4]
1000feec:	42a3      	cmp	r3, r4
1000feee:	d000      	beq.n	1000fef2 <at_ble_event_get+0xe2>
1000fef0:	e28a      	b.n	10010408 <at_ble_event_get+0x5f8>
1000fef2:	2338      	movs	r3, #56	; 0x38
1000fef4:	9a03      	ldr	r2, [sp, #12]
1000fef6:	7013      	strb	r3, [r2, #0]
1000fef8:	602e      	str	r6, [r5, #0]
1000fefa:	9b03      	ldr	r3, [sp, #12]
1000fefc:	781b      	ldrb	r3, [r3, #0]
1000fefe:	2b3b      	cmp	r3, #59	; 0x3b
1000ff00:	d101      	bne.n	1000ff06 <at_ble_event_get+0xf6>
1000ff02:	4b82      	ldr	r3, [pc, #520]	; (1001010c <at_ble_event_get+0x2fc>)
1000ff04:	4798      	blx	r3
1000ff06:	9b03      	ldr	r3, [sp, #12]
1000ff08:	781b      	ldrb	r3, [r3, #0]
1000ff0a:	2b3b      	cmp	r3, #59	; 0x3b
1000ff0c:	d003      	beq.n	1000ff16 <at_ble_event_get+0x106>
1000ff0e:	9b05      	ldr	r3, [sp, #20]
1000ff10:	3303      	adds	r3, #3
1000ff12:	d904      	bls.n	1000ff1e <at_ble_event_get+0x10e>
1000ff14:	e283      	b.n	1001041e <at_ble_event_get+0x60e>
1000ff16:	9b02      	ldr	r3, [sp, #8]
1000ff18:	2b00      	cmp	r3, #0
1000ff1a:	d088      	beq.n	1000fe2e <at_ble_event_get+0x1e>
1000ff1c:	e7f7      	b.n	1000ff0e <at_ble_event_get+0xfe>
1000ff1e:	9b02      	ldr	r3, [sp, #8]
1000ff20:	2bd0      	cmp	r3, #208	; 0xd0
1000ff22:	d100      	bne.n	1000ff26 <at_ble_event_get+0x116>
1000ff24:	e27b      	b.n	1001041e <at_ble_event_get+0x60e>
1000ff26:	4b7a      	ldr	r3, [pc, #488]	; (10010110 <at_ble_event_get+0x300>)
1000ff28:	4798      	blx	r3
1000ff2a:	e278      	b.n	1001041e <at_ble_event_get+0x60e>
1000ff2c:	9b01      	ldr	r3, [sp, #4]
1000ff2e:	2bbb      	cmp	r3, #187	; 0xbb
1000ff30:	d125      	bne.n	1000ff7e <at_ble_event_get+0x16e>
1000ff32:	2cbb      	cmp	r4, #187	; 0xbb
1000ff34:	d123      	bne.n	1000ff7e <at_ble_event_get+0x16e>
1000ff36:	466b      	mov	r3, sp
1000ff38:	891b      	ldrh	r3, [r3, #8]
1000ff3a:	80ab      	strh	r3, [r5, #4]
1000ff3c:	78b3      	ldrb	r3, [r6, #2]
1000ff3e:	7872      	ldrb	r2, [r6, #1]
1000ff40:	78f0      	ldrb	r0, [r6, #3]
1000ff42:	021b      	lsls	r3, r3, #8
1000ff44:	4313      	orrs	r3, r2
1000ff46:	7971      	ldrb	r1, [r6, #5]
1000ff48:	7932      	ldrb	r2, [r6, #4]
1000ff4a:	70a8      	strb	r0, [r5, #2]
1000ff4c:	4871      	ldr	r0, [pc, #452]	; (10010114 <at_ble_event_get+0x304>)
1000ff4e:	802b      	strh	r3, [r5, #0]
1000ff50:	4283      	cmp	r3, r0
1000ff52:	d806      	bhi.n	1000ff62 <at_ble_event_get+0x152>
1000ff54:	4a70      	ldr	r2, [pc, #448]	; (10010118 <at_ble_event_get+0x308>)
1000ff56:	4293      	cmp	r3, r2
1000ff58:	d20b      	bcs.n	1000ff72 <at_ble_event_get+0x162>
1000ff5a:	4a70      	ldr	r2, [pc, #448]	; (1001011c <at_ble_event_get+0x30c>)
1000ff5c:	4293      	cmp	r3, r2
1000ff5e:	d008      	beq.n	1000ff72 <at_ble_event_get+0x162>
1000ff60:	e009      	b.n	1000ff76 <at_ble_event_get+0x166>
1000ff62:	486f      	ldr	r0, [pc, #444]	; (10010120 <at_ble_event_get+0x310>)
1000ff64:	4283      	cmp	r3, r0
1000ff66:	d106      	bne.n	1000ff76 <at_ble_event_get+0x166>
1000ff68:	020b      	lsls	r3, r1, #8
1000ff6a:	4313      	orrs	r3, r2
1000ff6c:	80ab      	strh	r3, [r5, #4]
1000ff6e:	2337      	movs	r3, #55	; 0x37
1000ff70:	e002      	b.n	1000ff78 <at_ble_event_get+0x168>
1000ff72:	2336      	movs	r3, #54	; 0x36
1000ff74:	e000      	b.n	1000ff78 <at_ble_event_get+0x168>
1000ff76:	2300      	movs	r3, #0
1000ff78:	9a03      	ldr	r2, [sp, #12]
1000ff7a:	7013      	strb	r3, [r2, #0]
1000ff7c:	e7bd      	b.n	1000fefa <at_ble_event_get+0xea>
1000ff7e:	4b69      	ldr	r3, [pc, #420]	; (10010124 <at_ble_event_get+0x314>)
1000ff80:	429c      	cmp	r4, r3
1000ff82:	d100      	bne.n	1000ff86 <at_ble_event_get+0x176>
1000ff84:	e144      	b.n	10010210 <at_ble_event_get+0x400>
1000ff86:	d865      	bhi.n	10010054 <at_ble_event_get+0x244>
1000ff88:	4b67      	ldr	r3, [pc, #412]	; (10010128 <at_ble_event_get+0x318>)
1000ff8a:	429c      	cmp	r4, r3
1000ff8c:	d100      	bne.n	1000ff90 <at_ble_event_get+0x180>
1000ff8e:	e1d5      	b.n	1001033c <at_ble_event_get+0x52c>
1000ff90:	d82f      	bhi.n	1000fff2 <at_ble_event_get+0x1e2>
1000ff92:	4b66      	ldr	r3, [pc, #408]	; (1001012c <at_ble_event_get+0x31c>)
1000ff94:	429c      	cmp	r4, r3
1000ff96:	d100      	bne.n	1000ff9a <at_ble_event_get+0x18a>
1000ff98:	e1e0      	b.n	1001035c <at_ble_event_get+0x54c>
1000ff9a:	d813      	bhi.n	1000ffc4 <at_ble_event_get+0x1b4>
1000ff9c:	4b64      	ldr	r3, [pc, #400]	; (10010130 <at_ble_event_get+0x320>)
1000ff9e:	429c      	cmp	r4, r3
1000ffa0:	d100      	bne.n	1000ffa4 <at_ble_event_get+0x194>
1000ffa2:	e1a3      	b.n	100102ec <at_ble_event_get+0x4dc>
1000ffa4:	d804      	bhi.n	1000ffb0 <at_ble_event_get+0x1a0>
1000ffa6:	2638      	movs	r6, #56	; 0x38
1000ffa8:	42b4      	cmp	r4, r6
1000ffaa:	d100      	bne.n	1000ffae <at_ble_event_get+0x19e>
1000ffac:	e225      	b.n	100103fa <at_ble_event_get+0x5ea>
1000ffae:	e117      	b.n	100101e0 <at_ble_event_get+0x3d0>
1000ffb0:	4b60      	ldr	r3, [pc, #384]	; (10010134 <at_ble_event_get+0x324>)
1000ffb2:	429c      	cmp	r4, r3
1000ffb4:	d100      	bne.n	1000ffb8 <at_ble_event_get+0x1a8>
1000ffb6:	e19f      	b.n	100102f8 <at_ble_event_get+0x4e8>
1000ffb8:	33fe      	adds	r3, #254	; 0xfe
1000ffba:	33ff      	adds	r3, #255	; 0xff
1000ffbc:	429c      	cmp	r4, r3
1000ffbe:	d100      	bne.n	1000ffc2 <at_ble_event_get+0x1b2>
1000ffc0:	e1d3      	b.n	1001036a <at_ble_event_get+0x55a>
1000ffc2:	e10d      	b.n	100101e0 <at_ble_event_get+0x3d0>
1000ffc4:	4b5c      	ldr	r3, [pc, #368]	; (10010138 <at_ble_event_get+0x328>)
1000ffc6:	429c      	cmp	r4, r3
1000ffc8:	d100      	bne.n	1000ffcc <at_ble_event_get+0x1bc>
1000ffca:	e1a9      	b.n	10010320 <at_ble_event_get+0x510>
1000ffcc:	d808      	bhi.n	1000ffe0 <at_ble_event_get+0x1d0>
1000ffce:	4b5b      	ldr	r3, [pc, #364]	; (1001013c <at_ble_event_get+0x32c>)
1000ffd0:	429c      	cmp	r4, r3
1000ffd2:	d100      	bne.n	1000ffd6 <at_ble_event_get+0x1c6>
1000ffd4:	e196      	b.n	10010304 <at_ble_event_get+0x4f4>
1000ffd6:	4b5a      	ldr	r3, [pc, #360]	; (10010140 <at_ble_event_get+0x330>)
1000ffd8:	429c      	cmp	r4, r3
1000ffda:	d100      	bne.n	1000ffde <at_ble_event_get+0x1ce>
1000ffdc:	e199      	b.n	10010312 <at_ble_event_get+0x502>
1000ffde:	e0ff      	b.n	100101e0 <at_ble_event_get+0x3d0>
1000ffe0:	4b58      	ldr	r3, [pc, #352]	; (10010144 <at_ble_event_get+0x334>)
1000ffe2:	429c      	cmp	r4, r3
1000ffe4:	d100      	bne.n	1000ffe8 <at_ble_event_get+0x1d8>
1000ffe6:	e1a2      	b.n	1001032e <at_ble_event_get+0x51e>
1000ffe8:	4b57      	ldr	r3, [pc, #348]	; (10010148 <at_ble_event_get+0x338>)
1000ffea:	429c      	cmp	r4, r3
1000ffec:	d100      	bne.n	1000fff0 <at_ble_event_get+0x1e0>
1000ffee:	e1d4      	b.n	1001039a <at_ble_event_get+0x58a>
1000fff0:	e0f6      	b.n	100101e0 <at_ble_event_get+0x3d0>
1000fff2:	4b56      	ldr	r3, [pc, #344]	; (1001014c <at_ble_event_get+0x33c>)
1000fff4:	429c      	cmp	r4, r3
1000fff6:	d100      	bne.n	1000fffa <at_ble_event_get+0x1ea>
1000fff8:	e1c8      	b.n	1001038c <at_ble_event_get+0x57c>
1000fffa:	d812      	bhi.n	10010022 <at_ble_event_get+0x212>
1000fffc:	4b54      	ldr	r3, [pc, #336]	; (10010150 <at_ble_event_get+0x340>)
1000fffe:	429c      	cmp	r4, r3
10010000:	d100      	bne.n	10010004 <at_ble_event_get+0x1f4>
10010002:	e1d1      	b.n	100103a8 <at_ble_event_get+0x598>
10010004:	d804      	bhi.n	10010010 <at_ble_event_get+0x200>
10010006:	4b53      	ldr	r3, [pc, #332]	; (10010154 <at_ble_event_get+0x344>)
10010008:	429c      	cmp	r4, r3
1001000a:	d100      	bne.n	1001000e <at_ble_event_get+0x1fe>
1001000c:	e19b      	b.n	10010346 <at_ble_event_get+0x536>
1001000e:	e0e7      	b.n	100101e0 <at_ble_event_get+0x3d0>
10010010:	4b51      	ldr	r3, [pc, #324]	; (10010158 <at_ble_event_get+0x348>)
10010012:	429c      	cmp	r4, r3
10010014:	d100      	bne.n	10010018 <at_ble_event_get+0x208>
10010016:	e1ad      	b.n	10010374 <at_ble_event_get+0x564>
10010018:	4b50      	ldr	r3, [pc, #320]	; (1001015c <at_ble_event_get+0x34c>)
1001001a:	429c      	cmp	r4, r3
1001001c:	d100      	bne.n	10010020 <at_ble_event_get+0x210>
1001001e:	e1b0      	b.n	10010382 <at_ble_event_get+0x572>
10010020:	e0de      	b.n	100101e0 <at_ble_event_get+0x3d0>
10010022:	4b4f      	ldr	r3, [pc, #316]	; (10010160 <at_ble_event_get+0x350>)
10010024:	429c      	cmp	r4, r3
10010026:	d100      	bne.n	1001002a <at_ble_event_get+0x21a>
10010028:	e0e0      	b.n	100101ec <at_ble_event_get+0x3dc>
1001002a:	d809      	bhi.n	10010040 <at_ble_event_get+0x230>
1001002c:	3b08      	subs	r3, #8
1001002e:	429c      	cmp	r4, r3
10010030:	d100      	bne.n	10010034 <at_ble_event_get+0x224>
10010032:	e0d7      	b.n	100101e4 <at_ble_event_get+0x3d4>
10010034:	4b4b      	ldr	r3, [pc, #300]	; (10010164 <at_ble_event_get+0x354>)
10010036:	2639      	movs	r6, #57	; 0x39
10010038:	429c      	cmp	r4, r3
1001003a:	d100      	bne.n	1001003e <at_ble_event_get+0x22e>
1001003c:	e1dd      	b.n	100103fa <at_ble_event_get+0x5ea>
1001003e:	e0cf      	b.n	100101e0 <at_ble_event_get+0x3d0>
10010040:	23d1      	movs	r3, #209	; 0xd1
10010042:	011b      	lsls	r3, r3, #4
10010044:	429c      	cmp	r4, r3
10010046:	d100      	bne.n	1001004a <at_ble_event_get+0x23a>
10010048:	e0d6      	b.n	100101f8 <at_ble_event_get+0x3e8>
1001004a:	4b47      	ldr	r3, [pc, #284]	; (10010168 <at_ble_event_get+0x358>)
1001004c:	429c      	cmp	r4, r3
1001004e:	d100      	bne.n	10010052 <at_ble_event_get+0x242>
10010050:	e0d8      	b.n	10010204 <at_ble_event_get+0x3f4>
10010052:	e0c5      	b.n	100101e0 <at_ble_event_get+0x3d0>
10010054:	4b45      	ldr	r3, [pc, #276]	; (1001016c <at_ble_event_get+0x35c>)
10010056:	429c      	cmp	r4, r3
10010058:	d100      	bne.n	1001005c <at_ble_event_get+0x24c>
1001005a:	e117      	b.n	1001028c <at_ble_event_get+0x47c>
1001005c:	d82e      	bhi.n	100100bc <at_ble_event_get+0x2ac>
1001005e:	4b44      	ldr	r3, [pc, #272]	; (10010170 <at_ble_event_get+0x360>)
10010060:	429c      	cmp	r4, r3
10010062:	d100      	bne.n	10010066 <at_ble_event_get+0x256>
10010064:	e13d      	b.n	100102e2 <at_ble_event_get+0x4d2>
10010066:	d812      	bhi.n	1001008e <at_ble_event_get+0x27e>
10010068:	4b42      	ldr	r3, [pc, #264]	; (10010174 <at_ble_event_get+0x364>)
1001006a:	429c      	cmp	r4, r3
1001006c:	d100      	bne.n	10010070 <at_ble_event_get+0x260>
1001006e:	e0e8      	b.n	10010242 <at_ble_event_get+0x432>
10010070:	d804      	bhi.n	1001007c <at_ble_event_get+0x26c>
10010072:	3b03      	subs	r3, #3
10010074:	429c      	cmp	r4, r3
10010076:	d100      	bne.n	1001007a <at_ble_event_get+0x26a>
10010078:	e0d0      	b.n	1001021c <at_ble_event_get+0x40c>
1001007a:	e0b1      	b.n	100101e0 <at_ble_event_get+0x3d0>
1001007c:	4b3e      	ldr	r3, [pc, #248]	; (10010178 <at_ble_event_get+0x368>)
1001007e:	429c      	cmp	r4, r3
10010080:	d100      	bne.n	10010084 <at_ble_event_get+0x274>
10010082:	e0d0      	b.n	10010226 <at_ble_event_get+0x416>
10010084:	4b3d      	ldr	r3, [pc, #244]	; (1001017c <at_ble_event_get+0x36c>)
10010086:	429c      	cmp	r4, r3
10010088:	d100      	bne.n	1001008c <at_ble_event_get+0x27c>
1001008a:	e0f9      	b.n	10010280 <at_ble_event_get+0x470>
1001008c:	e0a8      	b.n	100101e0 <at_ble_event_get+0x3d0>
1001008e:	4b3c      	ldr	r3, [pc, #240]	; (10010180 <at_ble_event_get+0x370>)
10010090:	429c      	cmp	r4, r3
10010092:	d100      	bne.n	10010096 <at_ble_event_get+0x286>
10010094:	e0db      	b.n	1001024e <at_ble_event_get+0x43e>
10010096:	d808      	bhi.n	100100aa <at_ble_event_get+0x29a>
10010098:	4b3a      	ldr	r3, [pc, #232]	; (10010184 <at_ble_event_get+0x374>)
1001009a:	429c      	cmp	r4, r3
1001009c:	d100      	bne.n	100100a0 <at_ble_event_get+0x290>
1001009e:	e11b      	b.n	100102d8 <at_ble_event_get+0x4c8>
100100a0:	4b39      	ldr	r3, [pc, #228]	; (10010188 <at_ble_event_get+0x378>)
100100a2:	429c      	cmp	r4, r3
100100a4:	d100      	bne.n	100100a8 <at_ble_event_get+0x298>
100100a6:	e0d8      	b.n	1001025a <at_ble_event_get+0x44a>
100100a8:	e09a      	b.n	100101e0 <at_ble_event_get+0x3d0>
100100aa:	4b38      	ldr	r3, [pc, #224]	; (1001018c <at_ble_event_get+0x37c>)
100100ac:	429c      	cmp	r4, r3
100100ae:	d100      	bne.n	100100b2 <at_ble_event_get+0x2a2>
100100b0:	e0d8      	b.n	10010264 <at_ble_event_get+0x454>
100100b2:	4b37      	ldr	r3, [pc, #220]	; (10010190 <at_ble_event_get+0x380>)
100100b4:	429c      	cmp	r4, r3
100100b6:	d100      	bne.n	100100ba <at_ble_event_get+0x2aa>
100100b8:	e0db      	b.n	10010272 <at_ble_event_get+0x462>
100100ba:	e091      	b.n	100101e0 <at_ble_event_get+0x3d0>
100100bc:	4b35      	ldr	r3, [pc, #212]	; (10010194 <at_ble_event_get+0x384>)
100100be:	429c      	cmp	r4, r3
100100c0:	d100      	bne.n	100100c4 <at_ble_event_get+0x2b4>
100100c2:	e0f7      	b.n	100102b4 <at_ble_event_get+0x4a4>
100100c4:	d876      	bhi.n	100101b4 <at_ble_event_get+0x3a4>
100100c6:	4b34      	ldr	r3, [pc, #208]	; (10010198 <at_ble_event_get+0x388>)
100100c8:	429c      	cmp	r4, r3
100100ca:	d100      	bne.n	100100ce <at_ble_event_get+0x2be>
100100cc:	e0f8      	b.n	100102c0 <at_ble_event_get+0x4b0>
100100ce:	d869      	bhi.n	100101a4 <at_ble_event_get+0x394>
100100d0:	4b32      	ldr	r3, [pc, #200]	; (1001019c <at_ble_event_get+0x38c>)
100100d2:	429c      	cmp	r4, r3
100100d4:	d100      	bne.n	100100d8 <at_ble_event_get+0x2c8>
100100d6:	e0e0      	b.n	1001029a <at_ble_event_get+0x48a>
100100d8:	4b31      	ldr	r3, [pc, #196]	; (100101a0 <at_ble_event_get+0x390>)
100100da:	429c      	cmp	r4, r3
100100dc:	d100      	bne.n	100100e0 <at_ble_event_get+0x2d0>
100100de:	e0a9      	b.n	10010234 <at_ble_event_get+0x424>
100100e0:	e07e      	b.n	100101e0 <at_ble_event_get+0x3d0>
100100e2:	46c0      	nop			; (mov r8, r8)
100100e4:	10011815 	.word	0x10011815
100100e8:	1001a0c4 	.word	0x1001a0c4
100100ec:	1000f421 	.word	0x1000f421
100100f0:	1001a0c8 	.word	0x1001a0c8
100100f4:	1001a0c0 	.word	0x1001a0c0
100100f8:	1001a0b0 	.word	0x1001a0b0
100100fc:	1000fcf9 	.word	0x1000fcf9
10010100:	1001522d 	.word	0x1001522d
10010104:	0000ffff 	.word	0x0000ffff
10010108:	0000fffe 	.word	0x0000fffe
1001010c:	1000f699 	.word	0x1000f699
10010110:	10011817 	.word	0x10011817
10010114:	0000201e 	.word	0x0000201e
10010118:	0000201d 	.word	0x0000201d
1001011c:	00000c03 	.word	0x00000c03
10010120:	0000201f 	.word	0x0000201f
10010124:	00000d1c 	.word	0x00000d1c
10010128:	00000c0c 	.word	0x00000c0c
1001012c:	00000c02 	.word	0x00000c02
10010130:	00000a02 	.word	0x00000a02
10010134:	00000a03 	.word	0x00000a03
10010138:	00000c06 	.word	0x00000c06
1001013c:	00000c04 	.word	0x00000c04
10010140:	00000c05 	.word	0x00000c05
10010144:	00000c07 	.word	0x00000c07
10010148:	00000c09 	.word	0x00000c09
1001014c:	00000c17 	.word	0x00000c17
10010150:	00000c12 	.word	0x00000c12
10010154:	00000c0d 	.word	0x00000c0d
10010158:	00000c13 	.word	0x00000c13
1001015c:	00000c15 	.word	0x00000c15
10010160:	00000d08 	.word	0x00000d08
10010164:	00000d01 	.word	0x00000d01
10010168:	00000d15 	.word	0x00000d15
1001016c:	00000e1b 	.word	0x00000e1b
10010170:	00000e0f 	.word	0x00000e0f
10010174:	00000e03 	.word	0x00000e03
10010178:	00000e06 	.word	0x00000e06
1001017c:	00000e0a 	.word	0x00000e0a
10010180:	00000e15 	.word	0x00000e15
10010184:	00000e11 	.word	0x00000e11
10010188:	00000e13 	.word	0x00000e13
1001018c:	00000e17 	.word	0x00000e17
10010190:	00000e19 	.word	0x00000e19
10010194:	00000e27 	.word	0x00000e27
10010198:	00000e21 	.word	0x00000e21
1001019c:	00000e1c 	.word	0x00000e1c
100101a0:	00000e1d 	.word	0x00000e1d
100101a4:	4b9f      	ldr	r3, [pc, #636]	; (10010424 <at_ble_event_get+0x614>)
100101a6:	429c      	cmp	r4, r3
100101a8:	d07e      	beq.n	100102a8 <at_ble_event_get+0x498>
100101aa:	4b9f      	ldr	r3, [pc, #636]	; (10010428 <at_ble_event_get+0x618>)
100101ac:	429c      	cmp	r4, r3
100101ae:	d100      	bne.n	100101b2 <at_ble_event_get+0x3a2>
100101b0:	e08c      	b.n	100102cc <at_ble_event_get+0x4bc>
100101b2:	e015      	b.n	100101e0 <at_ble_event_get+0x3d0>
100101b4:	4b9d      	ldr	r3, [pc, #628]	; (1001042c <at_ble_event_get+0x61c>)
100101b6:	429c      	cmp	r4, r3
100101b8:	d100      	bne.n	100101bc <at_ble_event_get+0x3ac>
100101ba:	e10a      	b.n	100103d2 <at_ble_event_get+0x5c2>
100101bc:	d808      	bhi.n	100101d0 <at_ble_event_get+0x3c0>
100101be:	4b9c      	ldr	r3, [pc, #624]	; (10010430 <at_ble_event_get+0x620>)
100101c0:	429c      	cmp	r4, r3
100101c2:	d100      	bne.n	100101c6 <at_ble_event_get+0x3b6>
100101c4:	e0f7      	b.n	100103b6 <at_ble_event_get+0x5a6>
100101c6:	4b9b      	ldr	r3, [pc, #620]	; (10010434 <at_ble_event_get+0x624>)
100101c8:	429c      	cmp	r4, r3
100101ca:	d100      	bne.n	100101ce <at_ble_event_get+0x3be>
100101cc:	e0fa      	b.n	100103c4 <at_ble_event_get+0x5b4>
100101ce:	e007      	b.n	100101e0 <at_ble_event_get+0x3d0>
100101d0:	4b99      	ldr	r3, [pc, #612]	; (10010438 <at_ble_event_get+0x628>)
100101d2:	429c      	cmp	r4, r3
100101d4:	d100      	bne.n	100101d8 <at_ble_event_get+0x3c8>
100101d6:	e103      	b.n	100103e0 <at_ble_event_get+0x5d0>
100101d8:	4b98      	ldr	r3, [pc, #608]	; (1001043c <at_ble_event_get+0x62c>)
100101da:	429c      	cmp	r4, r3
100101dc:	d100      	bne.n	100101e0 <at_ble_event_get+0x3d0>
100101de:	e106      	b.n	100103ee <at_ble_event_get+0x5de>
100101e0:	2600      	movs	r6, #0
100101e2:	e10a      	b.n	100103fa <at_ble_event_get+0x5ea>
100101e4:	1c30      	adds	r0, r6, #0
100101e6:	1c29      	adds	r1, r5, #0
100101e8:	4b95      	ldr	r3, [pc, #596]	; (10010440 <at_ble_event_get+0x630>)
100101ea:	e014      	b.n	10010216 <at_ble_event_get+0x406>
100101ec:	1c30      	adds	r0, r6, #0
100101ee:	1c29      	adds	r1, r5, #0
100101f0:	4b94      	ldr	r3, [pc, #592]	; (10010444 <at_ble_event_get+0x634>)
100101f2:	4798      	blx	r3
100101f4:	2604      	movs	r6, #4
100101f6:	e100      	b.n	100103fa <at_ble_event_get+0x5ea>
100101f8:	1c30      	adds	r0, r6, #0
100101fa:	1c29      	adds	r1, r5, #0
100101fc:	4b92      	ldr	r3, [pc, #584]	; (10010448 <at_ble_event_get+0x638>)
100101fe:	4798      	blx	r3
10010200:	2601      	movs	r6, #1
10010202:	e0fa      	b.n	100103fa <at_ble_event_get+0x5ea>
10010204:	1c30      	adds	r0, r6, #0
10010206:	1c29      	adds	r1, r5, #0
10010208:	4b90      	ldr	r3, [pc, #576]	; (1001044c <at_ble_event_get+0x63c>)
1001020a:	4798      	blx	r3
1001020c:	260f      	movs	r6, #15
1001020e:	e0f4      	b.n	100103fa <at_ble_event_get+0x5ea>
10010210:	1c30      	adds	r0, r6, #0
10010212:	1c29      	adds	r1, r5, #0
10010214:	4b8e      	ldr	r3, [pc, #568]	; (10010450 <at_ble_event_get+0x640>)
10010216:	4798      	blx	r3
10010218:	1c06      	adds	r6, r0, #0
1001021a:	e0ee      	b.n	100103fa <at_ble_event_get+0x5ea>
1001021c:	9801      	ldr	r0, [sp, #4]
1001021e:	1c31      	adds	r1, r6, #0
10010220:	1c2a      	adds	r2, r5, #0
10010222:	4b8c      	ldr	r3, [pc, #560]	; (10010454 <at_ble_event_get+0x644>)
10010224:	e017      	b.n	10010256 <at_ble_event_get+0x446>
10010226:	1c31      	adds	r1, r6, #0
10010228:	9801      	ldr	r0, [sp, #4]
1001022a:	1c2a      	adds	r2, r5, #0
1001022c:	4b8a      	ldr	r3, [pc, #552]	; (10010458 <at_ble_event_get+0x648>)
1001022e:	4798      	blx	r3
10010230:	2611      	movs	r6, #17
10010232:	e0e2      	b.n	100103fa <at_ble_event_get+0x5ea>
10010234:	1c31      	adds	r1, r6, #0
10010236:	9801      	ldr	r0, [sp, #4]
10010238:	1c2a      	adds	r2, r5, #0
1001023a:	4b88      	ldr	r3, [pc, #544]	; (1001045c <at_ble_event_get+0x64c>)
1001023c:	4798      	blx	r3
1001023e:	2612      	movs	r6, #18
10010240:	e0db      	b.n	100103fa <at_ble_event_get+0x5ea>
10010242:	1c30      	adds	r0, r6, #0
10010244:	1c29      	adds	r1, r5, #0
10010246:	4b86      	ldr	r3, [pc, #536]	; (10010460 <at_ble_event_get+0x650>)
10010248:	4798      	blx	r3
1001024a:	2606      	movs	r6, #6
1001024c:	e0d5      	b.n	100103fa <at_ble_event_get+0x5ea>
1001024e:	1c31      	adds	r1, r6, #0
10010250:	1c2a      	adds	r2, r5, #0
10010252:	9801      	ldr	r0, [sp, #4]
10010254:	4b83      	ldr	r3, [pc, #524]	; (10010464 <at_ble_event_get+0x654>)
10010256:	4798      	blx	r3
10010258:	e7de      	b.n	10010218 <at_ble_event_get+0x408>
1001025a:	9801      	ldr	r0, [sp, #4]
1001025c:	1c31      	adds	r1, r6, #0
1001025e:	1c2a      	adds	r2, r5, #0
10010260:	4b81      	ldr	r3, [pc, #516]	; (10010468 <at_ble_event_get+0x658>)
10010262:	e7f8      	b.n	10010256 <at_ble_event_get+0x446>
10010264:	1c31      	adds	r1, r6, #0
10010266:	9801      	ldr	r0, [sp, #4]
10010268:	1c2a      	adds	r2, r5, #0
1001026a:	4b80      	ldr	r3, [pc, #512]	; (1001046c <at_ble_event_get+0x65c>)
1001026c:	4798      	blx	r3
1001026e:	260d      	movs	r6, #13
10010270:	e0c3      	b.n	100103fa <at_ble_event_get+0x5ea>
10010272:	1c31      	adds	r1, r6, #0
10010274:	9801      	ldr	r0, [sp, #4]
10010276:	1c2a      	adds	r2, r5, #0
10010278:	4b7d      	ldr	r3, [pc, #500]	; (10010470 <at_ble_event_get+0x660>)
1001027a:	4798      	blx	r3
1001027c:	260e      	movs	r6, #14
1001027e:	e0bc      	b.n	100103fa <at_ble_event_get+0x5ea>
10010280:	9801      	ldr	r0, [sp, #4]
10010282:	1c31      	adds	r1, r6, #0
10010284:	1c2a      	adds	r2, r5, #0
10010286:	4b7b      	ldr	r3, [pc, #492]	; (10010474 <at_ble_event_get+0x664>)
10010288:	4798      	blx	r3
1001028a:	e084      	b.n	10010396 <at_ble_event_get+0x586>
1001028c:	1c31      	adds	r1, r6, #0
1001028e:	9801      	ldr	r0, [sp, #4]
10010290:	1c2a      	adds	r2, r5, #0
10010292:	4b79      	ldr	r3, [pc, #484]	; (10010478 <at_ble_event_get+0x668>)
10010294:	4798      	blx	r3
10010296:	260b      	movs	r6, #11
10010298:	e0af      	b.n	100103fa <at_ble_event_get+0x5ea>
1001029a:	1c31      	adds	r1, r6, #0
1001029c:	9801      	ldr	r0, [sp, #4]
1001029e:	1c2a      	adds	r2, r5, #0
100102a0:	4b76      	ldr	r3, [pc, #472]	; (1001047c <at_ble_event_get+0x66c>)
100102a2:	4798      	blx	r3
100102a4:	2610      	movs	r6, #16
100102a6:	e0a8      	b.n	100103fa <at_ble_event_get+0x5ea>
100102a8:	1c30      	adds	r0, r6, #0
100102aa:	1c29      	adds	r1, r5, #0
100102ac:	4b74      	ldr	r3, [pc, #464]	; (10010480 <at_ble_event_get+0x670>)
100102ae:	4798      	blx	r3
100102b0:	2628      	movs	r6, #40	; 0x28
100102b2:	e0a2      	b.n	100103fa <at_ble_event_get+0x5ea>
100102b4:	1c30      	adds	r0, r6, #0
100102b6:	1c29      	adds	r1, r5, #0
100102b8:	4b72      	ldr	r3, [pc, #456]	; (10010484 <at_ble_event_get+0x674>)
100102ba:	4798      	blx	r3
100102bc:	2629      	movs	r6, #41	; 0x29
100102be:	e09c      	b.n	100103fa <at_ble_event_get+0x5ea>
100102c0:	1c30      	adds	r0, r6, #0
100102c2:	1c29      	adds	r1, r5, #0
100102c4:	4b70      	ldr	r3, [pc, #448]	; (10010488 <at_ble_event_get+0x678>)
100102c6:	4798      	blx	r3
100102c8:	2627      	movs	r6, #39	; 0x27
100102ca:	e096      	b.n	100103fa <at_ble_event_get+0x5ea>
100102cc:	1c30      	adds	r0, r6, #0
100102ce:	1c29      	adds	r1, r5, #0
100102d0:	4b6e      	ldr	r3, [pc, #440]	; (1001048c <at_ble_event_get+0x67c>)
100102d2:	4798      	blx	r3
100102d4:	262a      	movs	r6, #42	; 0x2a
100102d6:	e090      	b.n	100103fa <at_ble_event_get+0x5ea>
100102d8:	9801      	ldr	r0, [sp, #4]
100102da:	1c31      	adds	r1, r6, #0
100102dc:	1c2a      	adds	r2, r5, #0
100102de:	4b6c      	ldr	r3, [pc, #432]	; (10010490 <at_ble_event_get+0x680>)
100102e0:	e7b9      	b.n	10010256 <at_ble_event_get+0x446>
100102e2:	9801      	ldr	r0, [sp, #4]
100102e4:	1c31      	adds	r1, r6, #0
100102e6:	1c2a      	adds	r2, r5, #0
100102e8:	4b6a      	ldr	r3, [pc, #424]	; (10010494 <at_ble_event_get+0x684>)
100102ea:	e7b4      	b.n	10010256 <at_ble_event_get+0x446>
100102ec:	1c30      	adds	r0, r6, #0
100102ee:	1c29      	adds	r1, r5, #0
100102f0:	4b69      	ldr	r3, [pc, #420]	; (10010498 <at_ble_event_get+0x688>)
100102f2:	4798      	blx	r3
100102f4:	262b      	movs	r6, #43	; 0x2b
100102f6:	e080      	b.n	100103fa <at_ble_event_get+0x5ea>
100102f8:	1c30      	adds	r0, r6, #0
100102fa:	1c29      	adds	r1, r5, #0
100102fc:	4b67      	ldr	r3, [pc, #412]	; (1001049c <at_ble_event_get+0x68c>)
100102fe:	4798      	blx	r3
10010300:	262c      	movs	r6, #44	; 0x2c
10010302:	e07a      	b.n	100103fa <at_ble_event_get+0x5ea>
10010304:	1c31      	adds	r1, r6, #0
10010306:	9801      	ldr	r0, [sp, #4]
10010308:	1c2a      	adds	r2, r5, #0
1001030a:	4b65      	ldr	r3, [pc, #404]	; (100104a0 <at_ble_event_get+0x690>)
1001030c:	4798      	blx	r3
1001030e:	2613      	movs	r6, #19
10010310:	e073      	b.n	100103fa <at_ble_event_get+0x5ea>
10010312:	1c31      	adds	r1, r6, #0
10010314:	9801      	ldr	r0, [sp, #4]
10010316:	1c2a      	adds	r2, r5, #0
10010318:	4b62      	ldr	r3, [pc, #392]	; (100104a4 <at_ble_event_get+0x694>)
1001031a:	4798      	blx	r3
1001031c:	2614      	movs	r6, #20
1001031e:	e06c      	b.n	100103fa <at_ble_event_get+0x5ea>
10010320:	1c31      	adds	r1, r6, #0
10010322:	9801      	ldr	r0, [sp, #4]
10010324:	1c2a      	adds	r2, r5, #0
10010326:	4b60      	ldr	r3, [pc, #384]	; (100104a8 <at_ble_event_get+0x698>)
10010328:	4798      	blx	r3
1001032a:	2615      	movs	r6, #21
1001032c:	e065      	b.n	100103fa <at_ble_event_get+0x5ea>
1001032e:	1c31      	adds	r1, r6, #0
10010330:	9801      	ldr	r0, [sp, #4]
10010332:	1c2a      	adds	r2, r5, #0
10010334:	4b5d      	ldr	r3, [pc, #372]	; (100104ac <at_ble_event_get+0x69c>)
10010336:	4798      	blx	r3
10010338:	2616      	movs	r6, #22
1001033a:	e05e      	b.n	100103fa <at_ble_event_get+0x5ea>
1001033c:	9801      	ldr	r0, [sp, #4]
1001033e:	1c31      	adds	r1, r6, #0
10010340:	1c2a      	adds	r2, r5, #0
10010342:	4b5b      	ldr	r3, [pc, #364]	; (100104b0 <at_ble_event_get+0x6a0>)
10010344:	e787      	b.n	10010256 <at_ble_event_get+0x446>
10010346:	1c31      	adds	r1, r6, #0
10010348:	9801      	ldr	r0, [sp, #4]
1001034a:	1c2a      	adds	r2, r5, #0
1001034c:	4b58      	ldr	r3, [pc, #352]	; (100104b0 <at_ble_event_get+0x6a0>)
1001034e:	4798      	blx	r3
10010350:	88a9      	ldrh	r1, [r5, #4]
10010352:	1c06      	adds	r6, r0, #0
10010354:	4b57      	ldr	r3, [pc, #348]	; (100104b4 <at_ble_event_get+0x6a4>)
10010356:	8828      	ldrh	r0, [r5, #0]
10010358:	4798      	blx	r3
1001035a:	e04e      	b.n	100103fa <at_ble_event_get+0x5ea>
1001035c:	1c31      	adds	r1, r6, #0
1001035e:	9801      	ldr	r0, [sp, #4]
10010360:	1c2a      	adds	r2, r5, #0
10010362:	4b55      	ldr	r3, [pc, #340]	; (100104b8 <at_ble_event_get+0x6a8>)
10010364:	4798      	blx	r3
10010366:	2623      	movs	r6, #35	; 0x23
10010368:	e047      	b.n	100103fa <at_ble_event_get+0x5ea>
1001036a:	9801      	ldr	r0, [sp, #4]
1001036c:	1c31      	adds	r1, r6, #0
1001036e:	1c2a      	adds	r2, r5, #0
10010370:	4b52      	ldr	r3, [pc, #328]	; (100104bc <at_ble_event_get+0x6ac>)
10010372:	e770      	b.n	10010256 <at_ble_event_get+0x446>
10010374:	9b01      	ldr	r3, [sp, #4]
10010376:	1c30      	adds	r0, r6, #0
10010378:	0a1f      	lsrs	r7, r3, #8
1001037a:	802f      	strh	r7, [r5, #0]
1001037c:	1c29      	adds	r1, r5, #0
1001037e:	4b50      	ldr	r3, [pc, #320]	; (100104c0 <at_ble_event_get+0x6b0>)
10010380:	e749      	b.n	10010216 <at_ble_event_get+0x406>
10010382:	9801      	ldr	r0, [sp, #4]
10010384:	1c31      	adds	r1, r6, #0
10010386:	1c2a      	adds	r2, r5, #0
10010388:	4b4e      	ldr	r3, [pc, #312]	; (100104c4 <at_ble_event_get+0x6b4>)
1001038a:	e764      	b.n	10010256 <at_ble_event_get+0x446>
1001038c:	1c30      	adds	r0, r6, #0
1001038e:	1c29      	adds	r1, r5, #0
10010390:	9a01      	ldr	r2, [sp, #4]
10010392:	4b4d      	ldr	r3, [pc, #308]	; (100104c8 <at_ble_event_get+0x6b8>)
10010394:	4798      	blx	r3
10010396:	263b      	movs	r6, #59	; 0x3b
10010398:	e02f      	b.n	100103fa <at_ble_event_get+0x5ea>
1001039a:	1c31      	adds	r1, r6, #0
1001039c:	9801      	ldr	r0, [sp, #4]
1001039e:	1c2a      	adds	r2, r5, #0
100103a0:	4b4a      	ldr	r3, [pc, #296]	; (100104cc <at_ble_event_get+0x6bc>)
100103a2:	4798      	blx	r3
100103a4:	2618      	movs	r6, #24
100103a6:	e028      	b.n	100103fa <at_ble_event_get+0x5ea>
100103a8:	1c31      	adds	r1, r6, #0
100103aa:	9801      	ldr	r0, [sp, #4]
100103ac:	1c2a      	adds	r2, r5, #0
100103ae:	4b48      	ldr	r3, [pc, #288]	; (100104d0 <at_ble_event_get+0x6c0>)
100103b0:	4798      	blx	r3
100103b2:	2620      	movs	r6, #32
100103b4:	e021      	b.n	100103fa <at_ble_event_get+0x5ea>
100103b6:	1c31      	adds	r1, r6, #0
100103b8:	9801      	ldr	r0, [sp, #4]
100103ba:	1c2a      	adds	r2, r5, #0
100103bc:	4b45      	ldr	r3, [pc, #276]	; (100104d4 <at_ble_event_get+0x6c4>)
100103be:	4798      	blx	r3
100103c0:	2633      	movs	r6, #51	; 0x33
100103c2:	e01a      	b.n	100103fa <at_ble_event_get+0x5ea>
100103c4:	1c31      	adds	r1, r6, #0
100103c6:	9801      	ldr	r0, [sp, #4]
100103c8:	1c2a      	adds	r2, r5, #0
100103ca:	4b43      	ldr	r3, [pc, #268]	; (100104d8 <at_ble_event_get+0x6c8>)
100103cc:	4798      	blx	r3
100103ce:	2630      	movs	r6, #48	; 0x30
100103d0:	e013      	b.n	100103fa <at_ble_event_get+0x5ea>
100103d2:	1c31      	adds	r1, r6, #0
100103d4:	9801      	ldr	r0, [sp, #4]
100103d6:	1c2a      	adds	r2, r5, #0
100103d8:	4b40      	ldr	r3, [pc, #256]	; (100104dc <at_ble_event_get+0x6cc>)
100103da:	4798      	blx	r3
100103dc:	2634      	movs	r6, #52	; 0x34
100103de:	e00c      	b.n	100103fa <at_ble_event_get+0x5ea>
100103e0:	1c31      	adds	r1, r6, #0
100103e2:	9801      	ldr	r0, [sp, #4]
100103e4:	1c2a      	adds	r2, r5, #0
100103e6:	4b3e      	ldr	r3, [pc, #248]	; (100104e0 <at_ble_event_get+0x6d0>)
100103e8:	4798      	blx	r3
100103ea:	2635      	movs	r6, #53	; 0x35
100103ec:	e005      	b.n	100103fa <at_ble_event_get+0x5ea>
100103ee:	1c31      	adds	r1, r6, #0
100103f0:	9801      	ldr	r0, [sp, #4]
100103f2:	1c2a      	adds	r2, r5, #0
100103f4:	4b3b      	ldr	r3, [pc, #236]	; (100104e4 <at_ble_event_get+0x6d4>)
100103f6:	4798      	blx	r3
100103f8:	2632      	movs	r6, #50	; 0x32
100103fa:	9b03      	ldr	r3, [sp, #12]
100103fc:	701e      	strb	r6, [r3, #0]
100103fe:	2300      	movs	r3, #0
10010400:	9302      	str	r3, [sp, #8]
10010402:	e57a      	b.n	1000fefa <at_ble_event_get+0xea>
10010404:	23d0      	movs	r3, #208	; 0xd0
10010406:	e7fb      	b.n	10010400 <at_ble_event_get+0x5f0>
10010408:	9b01      	ldr	r3, [sp, #4]
1001040a:	9e02      	ldr	r6, [sp, #8]
1001040c:	2bbb      	cmp	r3, #187	; 0xbb
1001040e:	d000      	beq.n	10010412 <at_ble_event_get+0x602>
10010410:	e6e6      	b.n	100101e0 <at_ble_event_get+0x3d0>
10010412:	e7f2      	b.n	100103fa <at_ble_event_get+0x5ea>
10010414:	9b02      	ldr	r3, [sp, #8]
10010416:	2b00      	cmp	r3, #0
10010418:	d000      	beq.n	1001041c <at_ble_event_get+0x60c>
1001041a:	e56e      	b.n	1000fefa <at_ble_event_get+0xea>
1001041c:	e6e0      	b.n	100101e0 <at_ble_event_get+0x3d0>
1001041e:	9802      	ldr	r0, [sp, #8]
10010420:	b007      	add	sp, #28
10010422:	bdf0      	pop	{r4, r5, r6, r7, pc}
10010424:	00000e22 	.word	0x00000e22
10010428:	00000e25 	.word	0x00000e25
1001042c:	00001b05 	.word	0x00001b05
10010430:	00001b01 	.word	0x00001b01
10010434:	00001b03 	.word	0x00001b03
10010438:	00001b06 	.word	0x00001b06
1001043c:	00001b08 	.word	0x00001b08
10010440:	10012641 	.word	0x10012641
10010444:	10012625 	.word	0x10012625
10010448:	100128c1 	.word	0x100128c1
1001044c:	100129b1 	.word	0x100129b1
10010450:	100129d5 	.word	0x100129d5
10010454:	100119b9 	.word	0x100119b9
10010458:	10012239 	.word	0x10012239
1001045c:	100122b5 	.word	0x100122b5
10010460:	10011c71 	.word	0x10011c71
10010464:	10011d0d 	.word	0x10011d0d
10010468:	10011de5 	.word	0x10011de5
1001046c:	1001206d 	.word	0x1001206d
10010470:	1001210d 	.word	0x1001210d
10010474:	100121c5 	.word	0x100121c5
10010478:	100121ed 	.word	0x100121ed
1001047c:	10012203 	.word	0x10012203
10010480:	100122cd 	.word	0x100122cd
10010484:	100122fb 	.word	0x100122fb
10010488:	10012311 	.word	0x10012311
1001048c:	1001233b 	.word	0x1001233b
10010490:	10012169 	.word	0x10012169
10010494:	10012193 	.word	0x10012193
10010498:	100113f9 	.word	0x100113f9
1001049c:	10011425 	.word	0x10011425
100104a0:	10012bf5 	.word	0x10012bf5
100104a4:	10012c31 	.word	0x10012c31
100104a8:	10012c79 	.word	0x10012c79
100104ac:	10012cbd 	.word	0x10012cbd
100104b0:	10012cf1 	.word	0x10012cf1
100104b4:	10012bb5 	.word	0x10012bb5
100104b8:	10012dbd 	.word	0x10012dbd
100104bc:	10012d45 	.word	0x10012d45
100104c0:	100112dd 	.word	0x100112dd
100104c4:	10011349 	.word	0x10011349
100104c8:	1001130d 	.word	0x1001130d
100104cc:	10012dcd 	.word	0x10012dcd
100104d0:	10012e0d 	.word	0x10012e0d
100104d4:	100130d5 	.word	0x100130d5
100104d8:	100130df 	.word	0x100130df
100104dc:	100130e5 	.word	0x100130e5
100104e0:	100130eb 	.word	0x100130eb
100104e4:	100130f7 	.word	0x100130f7

100104e8 <internal_event_flush>:
100104e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
100104ea:	490e      	ldr	r1, [pc, #56]	; (10010524 <internal_event_flush+0x3c>)
100104ec:	2400      	movs	r4, #0
100104ee:	680b      	ldr	r3, [r1, #0]
100104f0:	1c0f      	adds	r7, r1, #0
100104f2:	1c1e      	adds	r6, r3, #0
100104f4:	4a0c      	ldr	r2, [pc, #48]	; (10010528 <internal_event_flush+0x40>)
100104f6:	6815      	ldr	r5, [r2, #0]
100104f8:	9201      	str	r2, [sp, #4]
100104fa:	2b00      	cmp	r3, #0
100104fc:	d00e      	beq.n	1001051c <internal_event_flush+0x34>
100104fe:	889a      	ldrh	r2, [r3, #4]
10010500:	6819      	ldr	r1, [r3, #0]
10010502:	4282      	cmp	r2, r0
10010504:	d107      	bne.n	10010516 <internal_event_flush+0x2e>
10010506:	2c00      	cmp	r4, #0
10010508:	d001      	beq.n	1001050e <internal_event_flush+0x26>
1001050a:	6021      	str	r1, [r4, #0]
1001050c:	e000      	b.n	10010510 <internal_event_flush+0x28>
1001050e:	1c0e      	adds	r6, r1, #0
10010510:	601d      	str	r5, [r3, #0]
10010512:	1c1d      	adds	r5, r3, #0
10010514:	1c23      	adds	r3, r4, #0
10010516:	1c1c      	adds	r4, r3, #0
10010518:	1c0b      	adds	r3, r1, #0
1001051a:	e7ee      	b.n	100104fa <internal_event_flush+0x12>
1001051c:	9b01      	ldr	r3, [sp, #4]
1001051e:	603e      	str	r6, [r7, #0]
10010520:	601d      	str	r5, [r3, #0]
10010522:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
10010524:	1001a0c4 	.word	0x1001a0c4
10010528:	1001a0c8 	.word	0x1001a0c8

1001052c <internal_conn_flush>:
1001052c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1001052e:	4a12      	ldr	r2, [pc, #72]	; (10010578 <internal_conn_flush+0x4c>)
10010530:	9000      	str	r0, [sp, #0]
10010532:	6813      	ldr	r3, [r2, #0]
10010534:	4811      	ldr	r0, [pc, #68]	; (1001057c <internal_conn_flush+0x50>)
10010536:	1c1f      	adds	r7, r3, #0
10010538:	2100      	movs	r1, #0
1001053a:	4684      	mov	ip, r0
1001053c:	6804      	ldr	r4, [r0, #0]
1001053e:	9201      	str	r2, [sp, #4]
10010540:	2b00      	cmp	r3, #0
10010542:	d014      	beq.n	1001056e <internal_conn_flush+0x42>
10010544:	88d8      	ldrh	r0, [r3, #6]
10010546:	9a00      	ldr	r2, [sp, #0]
10010548:	681d      	ldr	r5, [r3, #0]
1001054a:	0a06      	lsrs	r6, r0, #8
1001054c:	4296      	cmp	r6, r2
1001054e:	d10b      	bne.n	10010568 <internal_conn_flush+0x3c>
10010550:	26fd      	movs	r6, #253	; 0xfd
10010552:	4006      	ands	r6, r0
10010554:	2e0c      	cmp	r6, #12
10010556:	d107      	bne.n	10010568 <internal_conn_flush+0x3c>
10010558:	2900      	cmp	r1, #0
1001055a:	d001      	beq.n	10010560 <internal_conn_flush+0x34>
1001055c:	600d      	str	r5, [r1, #0]
1001055e:	e000      	b.n	10010562 <internal_conn_flush+0x36>
10010560:	1c2f      	adds	r7, r5, #0
10010562:	601c      	str	r4, [r3, #0]
10010564:	1c1c      	adds	r4, r3, #0
10010566:	1c0b      	adds	r3, r1, #0
10010568:	1c19      	adds	r1, r3, #0
1001056a:	1c2b      	adds	r3, r5, #0
1001056c:	e7e8      	b.n	10010540 <internal_conn_flush+0x14>
1001056e:	9b01      	ldr	r3, [sp, #4]
10010570:	601f      	str	r7, [r3, #0]
10010572:	4663      	mov	r3, ip
10010574:	601c      	str	r4, [r3, #0]
10010576:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
10010578:	1001a0c4 	.word	0x1001a0c4
1001057c:	1001a0c8 	.word	0x1001a0c8

10010580 <at_ble_device_name_set>:
10010580:	b530      	push	{r4, r5, lr}
10010582:	23cf      	movs	r3, #207	; 0xcf
10010584:	2800      	cmp	r0, #0
10010586:	d010      	beq.n	100105aa <at_ble_device_name_set+0x2a>
10010588:	1e4a      	subs	r2, r1, #1
1001058a:	2a1f      	cmp	r2, #31
1001058c:	d80d      	bhi.n	100105aa <at_ble_device_name_set+0x2a>
1001058e:	4a08      	ldr	r2, [pc, #32]	; (100105b0 <at_ble_device_name_set+0x30>)
10010590:	1c13      	adds	r3, r2, #0
10010592:	33aa      	adds	r3, #170	; 0xaa
10010594:	8019      	strh	r1, [r3, #0]
10010596:	2300      	movs	r3, #0
10010598:	1c1c      	adds	r4, r3, #0
1001059a:	5cc5      	ldrb	r5, [r0, r3]
1001059c:	34ac      	adds	r4, #172	; 0xac
1001059e:	3301      	adds	r3, #1
100105a0:	5515      	strb	r5, [r2, r4]
100105a2:	b2dc      	uxtb	r4, r3
100105a4:	428c      	cmp	r4, r1
100105a6:	d3f7      	bcc.n	10010598 <at_ble_device_name_set+0x18>
100105a8:	2300      	movs	r3, #0
100105aa:	1c18      	adds	r0, r3, #0
100105ac:	bd30      	pop	{r4, r5, pc}
100105ae:	46c0      	nop			; (mov r8, r8)
100105b0:	1001b06a 	.word	0x1001b06a

100105b4 <at_ble_addr_get>:
100105b4:	b510      	push	{r4, lr}
100105b6:	1c04      	adds	r4, r0, #0
100105b8:	20cf      	movs	r0, #207	; 0xcf
100105ba:	2c00      	cmp	r4, #0
100105bc:	d006      	beq.n	100105cc <at_ble_addr_get+0x18>
100105be:	4b04      	ldr	r3, [pc, #16]	; (100105d0 <at_ble_addr_get+0x1c>)
100105c0:	38ce      	subs	r0, #206	; 0xce
100105c2:	1c21      	adds	r1, r4, #0
100105c4:	4798      	blx	r3
100105c6:	4b03      	ldr	r3, [pc, #12]	; (100105d4 <at_ble_addr_get+0x20>)
100105c8:	791b      	ldrb	r3, [r3, #4]
100105ca:	7023      	strb	r3, [r4, #0]
100105cc:	bd10      	pop	{r4, pc}
100105ce:	46c0      	nop			; (mov r8, r8)
100105d0:	100124d5 	.word	0x100124d5
100105d4:	1001b06a 	.word	0x1001b06a

100105d8 <at_ble_set_dev_config>:
100105d8:	b5f0      	push	{r4, r5, r6, r7, lr}
100105da:	7906      	ldrb	r6, [r0, #4]
100105dc:	b089      	sub	sp, #36	; 0x24
100105de:	25cf      	movs	r5, #207	; 0xcf
100105e0:	2e03      	cmp	r6, #3
100105e2:	d838      	bhi.n	10010656 <at_ble_set_dev_config+0x7e>
100105e4:	7803      	ldrb	r3, [r0, #0]
100105e6:	3511      	adds	r5, #17
100105e8:	2b0f      	cmp	r3, #15
100105ea:	d834      	bhi.n	10010656 <at_ble_set_dev_config+0x7e>
100105ec:	2380      	movs	r3, #128	; 0x80
100105ee:	8c87      	ldrh	r7, [r0, #36]	; 0x24
100105f0:	3d11      	subs	r5, #17
100105f2:	009b      	lsls	r3, r3, #2
100105f4:	429f      	cmp	r7, r3
100105f6:	d82e      	bhi.n	10010656 <at_ble_set_dev_config+0x7e>
100105f8:	7fc5      	ldrb	r5, [r0, #31]
100105fa:	7f83      	ldrb	r3, [r0, #30]
100105fc:	01ad      	lsls	r5, r5, #6
100105fe:	015b      	lsls	r3, r3, #5
10010600:	431d      	orrs	r5, r3
10010602:	7ec3      	ldrb	r3, [r0, #27]
10010604:	431d      	orrs	r5, r3
10010606:	7f43      	ldrb	r3, [r0, #29]
10010608:	011b      	lsls	r3, r3, #4
1001060a:	431d      	orrs	r5, r3
1001060c:	7f03      	ldrb	r3, [r0, #28]
1001060e:	009b      	lsls	r3, r3, #2
10010610:	431d      	orrs	r5, r3
10010612:	4b12      	ldr	r3, [pc, #72]	; (1001065c <at_ble_set_dev_config+0x84>)
10010614:	b2ed      	uxtb	r5, r5
10010616:	711e      	strb	r6, [r3, #4]
10010618:	7903      	ldrb	r3, [r0, #4]
1001061a:	3b02      	subs	r3, #2
1001061c:	2b01      	cmp	r3, #1
1001061e:	d801      	bhi.n	10010624 <at_ble_set_dev_config+0x4c>
10010620:	2302      	movs	r3, #2
10010622:	7103      	strb	r3, [r0, #4]
10010624:	1c04      	adds	r4, r0, #0
10010626:	1c23      	adds	r3, r4, #0
10010628:	330b      	adds	r3, #11
1001062a:	8861      	ldrh	r1, [r4, #2]
1001062c:	9307      	str	r3, [sp, #28]
1001062e:	7923      	ldrb	r3, [r4, #4]
10010630:	7800      	ldrb	r0, [r0, #0]
10010632:	9300      	str	r3, [sp, #0]
10010634:	9501      	str	r5, [sp, #4]
10010636:	8c25      	ldrh	r5, [r4, #32]
10010638:	1d62      	adds	r2, r4, #5
1001063a:	9502      	str	r5, [sp, #8]
1001063c:	8c65      	ldrh	r5, [r4, #34]	; 0x22
1001063e:	9b07      	ldr	r3, [sp, #28]
10010640:	9503      	str	r5, [sp, #12]
10010642:	9704      	str	r7, [sp, #16]
10010644:	4d06      	ldr	r5, [pc, #24]	; (10010660 <at_ble_set_dev_config+0x88>)
10010646:	47a8      	blx	r5
10010648:	7126      	strb	r6, [r4, #4]
1001064a:	1c05      	adds	r5, r0, #0
1001064c:	1c21      	adds	r1, r4, #0
1001064e:	4803      	ldr	r0, [pc, #12]	; (1001065c <at_ble_set_dev_config+0x84>)
10010650:	2226      	movs	r2, #38	; 0x26
10010652:	4b04      	ldr	r3, [pc, #16]	; (10010664 <at_ble_set_dev_config+0x8c>)
10010654:	4798      	blx	r3
10010656:	1c28      	adds	r0, r5, #0
10010658:	b009      	add	sp, #36	; 0x24
1001065a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001065c:	1001b06a 	.word	0x1001b06a
10010660:	100123cd 	.word	0x100123cd
10010664:	1001521b 	.word	0x1001521b

10010668 <at_ble_init>:
10010668:	b5f0      	push	{r4, r5, r6, r7, lr}
1001066a:	b087      	sub	sp, #28
1001066c:	af03      	add	r7, sp, #12
1001066e:	4954      	ldr	r1, [pc, #336]	; (100107c0 <at_ble_init+0x158>)
10010670:	220b      	movs	r2, #11
10010672:	4b54      	ldr	r3, [pc, #336]	; (100107c4 <at_ble_init+0x15c>)
10010674:	1c04      	adds	r4, r0, #0
10010676:	1c38      	adds	r0, r7, #0
10010678:	4798      	blx	r3
1001067a:	2205      	movs	r2, #5
1001067c:	4b52      	ldr	r3, [pc, #328]	; (100107c8 <at_ble_init+0x160>)
1001067e:	2640      	movs	r6, #64	; 0x40
10010680:	801a      	strh	r2, [r3, #0]
10010682:	2300      	movs	r3, #0
10010684:	4a51      	ldr	r2, [pc, #324]	; (100107cc <at_ble_init+0x164>)
10010686:	6013      	str	r3, [r2, #0]
10010688:	4a51      	ldr	r2, [pc, #324]	; (100107d0 <at_ble_init+0x168>)
1001068a:	7013      	strb	r3, [r2, #0]
1001068c:	4a51      	ldr	r2, [pc, #324]	; (100107d4 <at_ble_init+0x16c>)
1001068e:	7013      	strb	r3, [r2, #0]
10010690:	4b51      	ldr	r3, [pc, #324]	; (100107d8 <at_ble_init+0x170>)
10010692:	4798      	blx	r3
10010694:	4b51      	ldr	r3, [pc, #324]	; (100107dc <at_ble_init+0x174>)
10010696:	4798      	blx	r3
10010698:	4b51      	ldr	r3, [pc, #324]	; (100107e0 <at_ble_init+0x178>)
1001069a:	4798      	blx	r3
1001069c:	4b51      	ldr	r3, [pc, #324]	; (100107e4 <at_ble_init+0x17c>)
1001069e:	4798      	blx	r3
100106a0:	2c00      	cmp	r4, #0
100106a2:	d100      	bne.n	100106a6 <at_ble_init+0x3e>
100106a4:	e089      	b.n	100107ba <at_ble_init+0x152>
100106a6:	68a3      	ldr	r3, [r4, #8]
100106a8:	2b00      	cmp	r3, #0
100106aa:	d100      	bne.n	100106ae <at_ble_init+0x46>
100106ac:	e085      	b.n	100107ba <at_ble_init+0x152>
100106ae:	6923      	ldr	r3, [r4, #16]
100106b0:	2b00      	cmp	r3, #0
100106b2:	d100      	bne.n	100106b6 <at_ble_init+0x4e>
100106b4:	e081      	b.n	100107ba <at_ble_init+0x152>
100106b6:	6820      	ldr	r0, [r4, #0]
100106b8:	2800      	cmp	r0, #0
100106ba:	d102      	bne.n	100106c2 <at_ble_init+0x5a>
100106bc:	6863      	ldr	r3, [r4, #4]
100106be:	2b00      	cmp	r3, #0
100106c0:	d17b      	bne.n	100107ba <at_ble_init+0x152>
100106c2:	4b49      	ldr	r3, [pc, #292]	; (100107e8 <at_ble_init+0x180>)
100106c4:	6861      	ldr	r1, [r4, #4]
100106c6:	4798      	blx	r3
100106c8:	4b48      	ldr	r3, [pc, #288]	; (100107ec <at_ble_init+0x184>)
100106ca:	4798      	blx	r3
100106cc:	2801      	cmp	r0, #1
100106ce:	d901      	bls.n	100106d4 <at_ble_init+0x6c>
100106d0:	26e2      	movs	r6, #226	; 0xe2
100106d2:	e072      	b.n	100107ba <at_ble_init+0x152>
100106d4:	4846      	ldr	r0, [pc, #280]	; (100107f0 <at_ble_init+0x188>)
100106d6:	4b47      	ldr	r3, [pc, #284]	; (100107f4 <at_ble_init+0x18c>)
100106d8:	4798      	blx	r3
100106da:	2800      	cmp	r0, #0
100106dc:	d1f8      	bne.n	100106d0 <at_ble_init+0x68>
100106de:	1c20      	adds	r0, r4, #0
100106e0:	4b45      	ldr	r3, [pc, #276]	; (100107f8 <at_ble_init+0x190>)
100106e2:	4798      	blx	r3
100106e4:	68e0      	ldr	r0, [r4, #12]
100106e6:	68a1      	ldr	r1, [r4, #8]
100106e8:	4b44      	ldr	r3, [pc, #272]	; (100107fc <at_ble_init+0x194>)
100106ea:	4798      	blx	r3
100106ec:	466b      	mov	r3, sp
100106ee:	2201      	movs	r2, #1
100106f0:	1cdc      	adds	r4, r3, #3
100106f2:	1c20      	adds	r0, r4, #0
100106f4:	a901      	add	r1, sp, #4
100106f6:	4252      	negs	r2, r2
100106f8:	4b41      	ldr	r3, [pc, #260]	; (10010800 <at_ble_init+0x198>)
100106fa:	4798      	blx	r3
100106fc:	2800      	cmp	r0, #0
100106fe:	d102      	bne.n	10010706 <at_ble_init+0x9e>
10010700:	7823      	ldrb	r3, [r4, #0]
10010702:	2b39      	cmp	r3, #57	; 0x39
10010704:	d1f2      	bne.n	100106ec <at_ble_init+0x84>
10010706:	4b3f      	ldr	r3, [pc, #252]	; (10010804 <at_ble_init+0x19c>)
10010708:	4798      	blx	r3
1001070a:	1e06      	subs	r6, r0, #0
1001070c:	d155      	bne.n	100107ba <at_ble_init+0x152>
1001070e:	1c03      	adds	r3, r0, #0
10010710:	2101      	movs	r1, #1
10010712:	4a3d      	ldr	r2, [pc, #244]	; (10010808 <at_ble_init+0x1a0>)
10010714:	4249      	negs	r1, r1
10010716:	189a      	adds	r2, r3, r2
10010718:	3312      	adds	r3, #18
1001071a:	8151      	strh	r1, [r2, #10]
1001071c:	2b90      	cmp	r3, #144	; 0x90
1001071e:	d1f7      	bne.n	10010710 <at_ble_init+0xa8>
10010720:	4c3a      	ldr	r4, [pc, #232]	; (1001080c <at_ble_init+0x1a4>)
10010722:	3b81      	subs	r3, #129	; 0x81
10010724:	7023      	strb	r3, [r4, #0]
10010726:	4b3a      	ldr	r3, [pc, #232]	; (10010810 <at_ble_init+0x1a8>)
10010728:	4a3a      	ldr	r2, [pc, #232]	; (10010814 <at_ble_init+0x1ac>)
1001072a:	8063      	strh	r3, [r4, #2]
1001072c:	2300      	movs	r3, #0
1001072e:	7123      	strb	r3, [r4, #4]
10010730:	3301      	adds	r3, #1
10010732:	1e58      	subs	r0, r3, #1
10010734:	0119      	lsls	r1, r3, #4
10010736:	4301      	orrs	r1, r0
10010738:	3302      	adds	r3, #2
1001073a:	7011      	strb	r1, [r2, #0]
1001073c:	3201      	adds	r2, #1
1001073e:	2b21      	cmp	r3, #33	; 0x21
10010740:	d1f7      	bne.n	10010732 <at_ble_init+0xca>
10010742:	33e0      	adds	r3, #224	; 0xe0
10010744:	33ff      	adds	r3, #255	; 0xff
10010746:	84a3      	strh	r3, [r4, #36]	; 0x24
10010748:	1c23      	adds	r3, r4, #0
1001074a:	2500      	movs	r5, #0
1001074c:	3373      	adds	r3, #115	; 0x73
1001074e:	701d      	strb	r5, [r3, #0]
10010750:	1c23      	adds	r3, r4, #0
10010752:	3372      	adds	r3, #114	; 0x72
10010754:	701d      	strb	r5, [r3, #0]
10010756:	1c23      	adds	r3, r4, #0
10010758:	3376      	adds	r3, #118	; 0x76
1001075a:	701d      	strb	r5, [r3, #0]
1001075c:	1c23      	adds	r3, r4, #0
1001075e:	33cc      	adds	r3, #204	; 0xcc
10010760:	801d      	strh	r5, [r3, #0]
10010762:	1c22      	adds	r2, r4, #0
10010764:	23a0      	movs	r3, #160	; 0xa0
10010766:	32d0      	adds	r2, #208	; 0xd0
10010768:	005b      	lsls	r3, r3, #1
1001076a:	8013      	strh	r3, [r2, #0]
1001076c:	1c22      	adds	r2, r4, #0
1001076e:	32ce      	adds	r2, #206	; 0xce
10010770:	8013      	strh	r3, [r2, #0]
10010772:	1c23      	adds	r3, r4, #0
10010774:	33d2      	adds	r3, #210	; 0xd2
10010776:	801d      	strh	r5, [r3, #0]
10010778:	22fa      	movs	r2, #250	; 0xfa
1001077a:	1c23      	adds	r3, r4, #0
1001077c:	0052      	lsls	r2, r2, #1
1001077e:	33d4      	adds	r3, #212	; 0xd4
10010780:	801a      	strh	r2, [r3, #0]
10010782:	1c23      	adds	r3, r4, #0
10010784:	33d6      	adds	r3, #214	; 0xd6
10010786:	701d      	strb	r5, [r3, #0]
10010788:	1c20      	adds	r0, r4, #0
1001078a:	4b23      	ldr	r3, [pc, #140]	; (10010818 <at_ble_init+0x1b0>)
1001078c:	76e5      	strb	r5, [r4, #27]
1001078e:	7725      	strb	r5, [r4, #28]
10010790:	7765      	strb	r5, [r4, #29]
10010792:	77a5      	strb	r5, [r4, #30]
10010794:	77e5      	strb	r5, [r4, #31]
10010796:	8425      	strh	r5, [r4, #32]
10010798:	8465      	strh	r5, [r4, #34]	; 0x22
1001079a:	4798      	blx	r3
1001079c:	1c23      	adds	r3, r4, #0
1001079e:	2207      	movs	r2, #7
100107a0:	3374      	adds	r3, #116	; 0x74
100107a2:	701a      	strb	r2, [r3, #0]
100107a4:	1c23      	adds	r3, r4, #0
100107a6:	3204      	adds	r2, #4
100107a8:	33aa      	adds	r3, #170	; 0xaa
100107aa:	801a      	strh	r2, [r3, #0]
100107ac:	1c2b      	adds	r3, r5, #0
100107ae:	5d7a      	ldrb	r2, [r7, r5]
100107b0:	33ac      	adds	r3, #172	; 0xac
100107b2:	3501      	adds	r5, #1
100107b4:	54e2      	strb	r2, [r4, r3]
100107b6:	2d0b      	cmp	r5, #11
100107b8:	d1f8      	bne.n	100107ac <at_ble_init+0x144>
100107ba:	1c30      	adds	r0, r6, #0
100107bc:	b007      	add	sp, #28
100107be:	bdf0      	pop	{r4, r5, r6, r7, pc}
100107c0:	10018418 	.word	0x10018418
100107c4:	1001521b 	.word	0x1001521b
100107c8:	1001afd8 	.word	0x1001afd8
100107cc:	1001a174 	.word	0x1001a174
100107d0:	1001a0d4 	.word	0x1001a0d4
100107d4:	10018640 	.word	0x10018640
100107d8:	10012e1d 	.word	0x10012e1d
100107dc:	10010ad9 	.word	0x10010ad9
100107e0:	10011139 	.word	0x10011139
100107e4:	100113ed 	.word	0x100113ed
100107e8:	10011175 	.word	0x10011175
100107ec:	1000f131 	.word	0x1000f131
100107f0:	100116ed 	.word	0x100116ed
100107f4:	1000f375 	.word	0x1000f375
100107f8:	10011795 	.word	0x10011795
100107fc:	1000fd55 	.word	0x1000fd55
10010800:	1000fe11 	.word	0x1000fe11
10010804:	1001235d 	.word	0x1001235d
10010808:	1001afda 	.word	0x1001afda
1001080c:	1001b06a 	.word	0x1001b06a
10010810:	00003a98 	.word	0x00003a98
10010814:	1001b075 	.word	0x1001b075
10010818:	100105d9 	.word	0x100105d9

1001081c <at_ble_addr_set>:
1001081c:	b538      	push	{r3, r4, r5, lr}
1001081e:	1c45      	adds	r5, r0, #1
10010820:	1c03      	adds	r3, r0, #0
10010822:	20cf      	movs	r0, #207	; 0xcf
10010824:	2d00      	cmp	r5, #0
10010826:	d018      	beq.n	1001085a <at_ble_addr_set+0x3e>
10010828:	781a      	ldrb	r2, [r3, #0]
1001082a:	2a03      	cmp	r2, #3
1001082c:	d815      	bhi.n	1001085a <at_ble_addr_set+0x3e>
1001082e:	2a01      	cmp	r2, #1
10010830:	d102      	bne.n	10010838 <at_ble_addr_set+0x1c>
10010832:	785a      	ldrb	r2, [r3, #1]
10010834:	2a00      	cmp	r2, #0
10010836:	d010      	beq.n	1001085a <at_ble_addr_set+0x3e>
10010838:	1c1c      	adds	r4, r3, #0
1001083a:	1c29      	adds	r1, r5, #0
1001083c:	2206      	movs	r2, #6
1001083e:	4b07      	ldr	r3, [pc, #28]	; (1001085c <at_ble_addr_set+0x40>)
10010840:	4807      	ldr	r0, [pc, #28]	; (10010860 <at_ble_addr_set+0x44>)
10010842:	4798      	blx	r3
10010844:	7823      	ldrb	r3, [r4, #0]
10010846:	4807      	ldr	r0, [pc, #28]	; (10010864 <at_ble_addr_set+0x48>)
10010848:	7103      	strb	r3, [r0, #4]
1001084a:	4b07      	ldr	r3, [pc, #28]	; (10010868 <at_ble_addr_set+0x4c>)
1001084c:	4798      	blx	r3
1001084e:	7823      	ldrb	r3, [r4, #0]
10010850:	2b00      	cmp	r3, #0
10010852:	d102      	bne.n	1001085a <at_ble_addr_set+0x3e>
10010854:	1c28      	adds	r0, r5, #0
10010856:	4b05      	ldr	r3, [pc, #20]	; (1001086c <at_ble_addr_set+0x50>)
10010858:	4798      	blx	r3
1001085a:	bd38      	pop	{r3, r4, r5, pc}
1001085c:	1001521b 	.word	0x1001521b
10010860:	1001b06f 	.word	0x1001b06f
10010864:	1001b06a 	.word	0x1001b06a
10010868:	100105d9 	.word	0x100105d9
1001086c:	10011819 	.word	0x10011819

10010870 <at_ble_adv_data_set>:
10010870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10010872:	4684      	mov	ip, r0
10010874:	1c0f      	adds	r7, r1, #0
10010876:	1c16      	adds	r6, r2, #0
10010878:	1c1c      	adds	r4, r3, #0
1001087a:	2800      	cmp	r0, #0
1001087c:	d102      	bne.n	10010884 <at_ble_adv_data_set+0x14>
1001087e:	20e2      	movs	r0, #226	; 0xe2
10010880:	2a00      	cmp	r2, #0
10010882:	d02b      	beq.n	100108dc <at_ble_adv_data_set+0x6c>
10010884:	20cf      	movs	r0, #207	; 0xcf
10010886:	2f1f      	cmp	r7, #31
10010888:	d828      	bhi.n	100108dc <at_ble_adv_data_set+0x6c>
1001088a:	2c1f      	cmp	r4, #31
1001088c:	d826      	bhi.n	100108dc <at_ble_adv_data_set+0x6c>
1001088e:	4663      	mov	r3, ip
10010890:	2b00      	cmp	r3, #0
10010892:	d00e      	beq.n	100108b2 <at_ble_adv_data_set+0x42>
10010894:	4812      	ldr	r0, [pc, #72]	; (100108e0 <at_ble_adv_data_set+0x70>)
10010896:	4d13      	ldr	r5, [pc, #76]	; (100108e4 <at_ble_adv_data_set+0x74>)
10010898:	2f00      	cmp	r7, #0
1001089a:	d104      	bne.n	100108a6 <at_ble_adv_data_set+0x36>
1001089c:	1c39      	adds	r1, r7, #0
1001089e:	221f      	movs	r2, #31
100108a0:	4b11      	ldr	r3, [pc, #68]	; (100108e8 <at_ble_adv_data_set+0x78>)
100108a2:	4798      	blx	r3
100108a4:	e003      	b.n	100108ae <at_ble_adv_data_set+0x3e>
100108a6:	4661      	mov	r1, ip
100108a8:	1c3a      	adds	r2, r7, #0
100108aa:	4b10      	ldr	r3, [pc, #64]	; (100108ec <at_ble_adv_data_set+0x7c>)
100108ac:	4798      	blx	r3
100108ae:	3572      	adds	r5, #114	; 0x72
100108b0:	702f      	strb	r7, [r5, #0]
100108b2:	1e30      	subs	r0, r6, #0
100108b4:	d012      	beq.n	100108dc <at_ble_adv_data_set+0x6c>
100108b6:	4d0b      	ldr	r5, [pc, #44]	; (100108e4 <at_ble_adv_data_set+0x74>)
100108b8:	480d      	ldr	r0, [pc, #52]	; (100108f0 <at_ble_adv_data_set+0x80>)
100108ba:	2c00      	cmp	r4, #0
100108bc:	d107      	bne.n	100108ce <at_ble_adv_data_set+0x5e>
100108be:	1c21      	adds	r1, r4, #0
100108c0:	221f      	movs	r2, #31
100108c2:	4b09      	ldr	r3, [pc, #36]	; (100108e8 <at_ble_adv_data_set+0x78>)
100108c4:	3573      	adds	r5, #115	; 0x73
100108c6:	4798      	blx	r3
100108c8:	702c      	strb	r4, [r5, #0]
100108ca:	1c20      	adds	r0, r4, #0
100108cc:	e006      	b.n	100108dc <at_ble_adv_data_set+0x6c>
100108ce:	1c31      	adds	r1, r6, #0
100108d0:	1c22      	adds	r2, r4, #0
100108d2:	4b06      	ldr	r3, [pc, #24]	; (100108ec <at_ble_adv_data_set+0x7c>)
100108d4:	4798      	blx	r3
100108d6:	2000      	movs	r0, #0
100108d8:	3573      	adds	r5, #115	; 0x73
100108da:	702c      	strb	r4, [r5, #0]
100108dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100108de:	46c0      	nop			; (mov r8, r8)
100108e0:	1001b09e 	.word	0x1001b09e
100108e4:	1001b06a 	.word	0x1001b06a
100108e8:	1001522d 	.word	0x1001522d
100108ec:	1001521b 	.word	0x1001521b
100108f0:	1001b0bd 	.word	0x1001b0bd

100108f4 <at_ble_adv_start>:
100108f4:	b5f0      	push	{r4, r5, r6, r7, lr}
100108f6:	b091      	sub	sp, #68	; 0x44
100108f8:	1c1f      	adds	r7, r3, #0
100108fa:	ab16      	add	r3, sp, #88	; 0x58
100108fc:	881d      	ldrh	r5, [r3, #0]
100108fe:	ab17      	add	r3, sp, #92	; 0x5c
10010900:	881b      	ldrh	r3, [r3, #0]
10010902:	910d      	str	r1, [sp, #52]	; 0x34
10010904:	930e      	str	r3, [sp, #56]	; 0x38
10010906:	ab18      	add	r3, sp, #96	; 0x60
10010908:	781b      	ldrb	r3, [r3, #0]
1001090a:	1c04      	adds	r4, r0, #0
1001090c:	930f      	str	r3, [sp, #60]	; 0x3c
1001090e:	4b42      	ldr	r3, [pc, #264]	; (10010a18 <at_ble_adv_start+0x124>)
10010910:	1c16      	adds	r6, r2, #0
10010912:	3373      	adds	r3, #115	; 0x73
10010914:	781b      	ldrb	r3, [r3, #0]
10010916:	20cf      	movs	r0, #207	; 0xcf
10010918:	930c      	str	r3, [sp, #48]	; 0x30
1001091a:	2c01      	cmp	r4, #1
1001091c:	d103      	bne.n	10010926 <at_ble_adv_start+0x32>
1001091e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
10010920:	2b00      	cmp	r3, #0
10010922:	d176      	bne.n	10010a12 <at_ble_adv_start+0x11e>
10010924:	e024      	b.n	10010970 <at_ble_adv_start+0x7c>
10010926:	2c04      	cmp	r4, #4
10010928:	d873      	bhi.n	10010a12 <at_ble_adv_start+0x11e>
1001092a:	2380      	movs	r3, #128	; 0x80
1001092c:	01db      	lsls	r3, r3, #7
1001092e:	429d      	cmp	r5, r3
10010930:	d86f      	bhi.n	10010a12 <at_ble_adv_start+0x11e>
10010932:	2c00      	cmp	r4, #0
10010934:	d102      	bne.n	1001093c <at_ble_adv_start+0x48>
10010936:	2d1f      	cmp	r5, #31
10010938:	d96b      	bls.n	10010a12 <at_ble_adv_start+0x11e>
1001093a:	e003      	b.n	10010944 <at_ble_adv_start+0x50>
1001093c:	2d9f      	cmp	r5, #159	; 0x9f
1001093e:	d801      	bhi.n	10010944 <at_ble_adv_start+0x50>
10010940:	2c01      	cmp	r4, #1
10010942:	d166      	bne.n	10010a12 <at_ble_adv_start+0x11e>
10010944:	2f00      	cmp	r7, #0
10010946:	d009      	beq.n	1001095c <at_ble_adv_start+0x68>
10010948:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1001094a:	20cf      	movs	r0, #207	; 0xcf
1001094c:	3b01      	subs	r3, #1
1001094e:	2b01      	cmp	r3, #1
10010950:	d95f      	bls.n	10010a12 <at_ble_adv_start+0x11e>
10010952:	2c01      	cmp	r4, #1
10010954:	d102      	bne.n	1001095c <at_ble_adv_start+0x68>
10010956:	2d00      	cmp	r5, #0
10010958:	d100      	bne.n	1001095c <at_ble_adv_start+0x68>
1001095a:	3520      	adds	r5, #32
1001095c:	4b2f      	ldr	r3, [pc, #188]	; (10010a1c <at_ble_adv_start+0x128>)
1001095e:	4798      	blx	r3
10010960:	1c01      	adds	r1, r0, #0
10010962:	2e00      	cmp	r6, #0
10010964:	d043      	beq.n	100109ee <at_ble_adv_start+0xfa>
10010966:	7833      	ldrb	r3, [r6, #0]
10010968:	1e60      	subs	r0, r4, #1
1001096a:	2b00      	cmp	r3, #0
1001096c:	d109      	bne.n	10010982 <at_ble_adv_start+0x8e>
1001096e:	e03b      	b.n	100109e8 <at_ble_adv_start+0xf4>
10010970:	2380      	movs	r3, #128	; 0x80
10010972:	01db      	lsls	r3, r3, #7
10010974:	429d      	cmp	r5, r3
10010976:	d84c      	bhi.n	10010a12 <at_ble_adv_start+0x11e>
10010978:	2e00      	cmp	r6, #0
1001097a:	d04a      	beq.n	10010a12 <at_ble_adv_start+0x11e>
1001097c:	2f00      	cmp	r7, #0
1001097e:	d1e3      	bne.n	10010948 <at_ble_adv_start+0x54>
10010980:	e02b      	b.n	100109da <at_ble_adv_start+0xe6>
10010982:	2301      	movs	r3, #1
10010984:	2803      	cmp	r0, #3
10010986:	d93a      	bls.n	100109fe <at_ble_adv_start+0x10a>
10010988:	200d      	movs	r0, #13
1001098a:	1c72      	adds	r2, r6, #1
1001098c:	e002      	b.n	10010994 <at_ble_adv_start+0xa0>
1001098e:	200e      	movs	r0, #14
10010990:	1e32      	subs	r2, r6, #0
10010992:	d1fa      	bne.n	1001098a <at_ble_adv_start+0x96>
10010994:	4c20      	ldr	r4, [pc, #128]	; (10010a18 <at_ble_adv_start+0x124>)
10010996:	3474      	adds	r4, #116	; 0x74
10010998:	7826      	ldrb	r6, [r4, #0]
1001099a:	2407      	movs	r4, #7
1001099c:	2e00      	cmp	r6, #0
1001099e:	d000      	beq.n	100109a2 <at_ble_adv_start+0xae>
100109a0:	1c34      	adds	r4, r6, #0
100109a2:	9200      	str	r2, [sp, #0]
100109a4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
100109a6:	9403      	str	r4, [sp, #12]
100109a8:	9204      	str	r2, [sp, #16]
100109aa:	4a1b      	ldr	r2, [pc, #108]	; (10010a18 <at_ble_adv_start+0x124>)
100109ac:	9501      	str	r5, [sp, #4]
100109ae:	9502      	str	r5, [sp, #8]
100109b0:	9705      	str	r7, [sp, #20]
100109b2:	3272      	adds	r2, #114	; 0x72
100109b4:	7812      	ldrb	r2, [r2, #0]
100109b6:	9c0e      	ldr	r4, [sp, #56]	; 0x38
100109b8:	9206      	str	r2, [sp, #24]
100109ba:	4a19      	ldr	r2, [pc, #100]	; (10010a20 <at_ble_adv_start+0x12c>)
100109bc:	9207      	str	r2, [sp, #28]
100109be:	9a0c      	ldr	r2, [sp, #48]	; 0x30
100109c0:	9208      	str	r2, [sp, #32]
100109c2:	4a18      	ldr	r2, [pc, #96]	; (10010a24 <at_ble_adv_start+0x130>)
100109c4:	9209      	str	r2, [sp, #36]	; 0x24
100109c6:	2264      	movs	r2, #100	; 0x64
100109c8:	4362      	muls	r2, r4
100109ca:	b292      	uxth	r2, r2
100109cc:	920a      	str	r2, [sp, #40]	; 0x28
100109ce:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
100109d0:	4c15      	ldr	r4, [pc, #84]	; (10010a28 <at_ble_adv_start+0x134>)
100109d2:	920b      	str	r2, [sp, #44]	; 0x2c
100109d4:	4a15      	ldr	r2, [pc, #84]	; (10010a2c <at_ble_adv_start+0x138>)
100109d6:	47a0      	blx	r4
100109d8:	e01b      	b.n	10010a12 <at_ble_adv_start+0x11e>
100109da:	2d00      	cmp	r5, #0
100109dc:	d1be      	bne.n	1001095c <at_ble_adv_start+0x68>
100109de:	4b0f      	ldr	r3, [pc, #60]	; (10010a1c <at_ble_adv_start+0x128>)
100109e0:	4798      	blx	r3
100109e2:	2520      	movs	r5, #32
100109e4:	1c01      	adds	r1, r0, #0
100109e6:	e7be      	b.n	10010966 <at_ble_adv_start+0x72>
100109e8:	2803      	cmp	r0, #3
100109ea:	d8cd      	bhi.n	10010988 <at_ble_adv_start+0x94>
100109ec:	e006      	b.n	100109fc <at_ble_adv_start+0x108>
100109ee:	1e60      	subs	r0, r4, #1
100109f0:	2803      	cmp	r0, #3
100109f2:	d903      	bls.n	100109fc <at_ble_adv_start+0x108>
100109f4:	1c33      	adds	r3, r6, #0
100109f6:	200d      	movs	r0, #13
100109f8:	1c32      	adds	r2, r6, #0
100109fa:	e7cb      	b.n	10010994 <at_ble_adv_start+0xa0>
100109fc:	2300      	movs	r3, #0
100109fe:	f002 fb7f 	bl	10013100 <__gnu_thumb1_case_sqi>
10010a02:	06c6      	.short	0x06c6
10010a04:	0204      	.short	0x0204
10010a06:	200f      	movs	r0, #15
10010a08:	e7c2      	b.n	10010990 <at_ble_adv_start+0x9c>
10010a0a:	2200      	movs	r2, #0
10010a0c:	920c      	str	r2, [sp, #48]	; 0x30
10010a0e:	200c      	movs	r0, #12
10010a10:	e7be      	b.n	10010990 <at_ble_adv_start+0x9c>
10010a12:	b011      	add	sp, #68	; 0x44
10010a14:	bdf0      	pop	{r4, r5, r6, r7, pc}
10010a16:	46c0      	nop			; (mov r8, r8)
10010a18:	1001b06a 	.word	0x1001b06a
10010a1c:	100128a9 	.word	0x100128a9
10010a20:	1001b09e 	.word	0x1001b09e
10010a24:	1001b0bd 	.word	0x1001b0bd
10010a28:	10012789 	.word	0x10012789
10010a2c:	00003a98 	.word	0x00003a98

10010a30 <at_ble_adv_stop>:
10010a30:	b508      	push	{r3, lr}
10010a32:	4b01      	ldr	r3, [pc, #4]	; (10010a38 <at_ble_adv_stop+0x8>)
10010a34:	4798      	blx	r3
10010a36:	bd08      	pop	{r3, pc}
10010a38:	100125b5 	.word	0x100125b5

10010a3c <at_ble_scan_stop>:
10010a3c:	b510      	push	{r4, lr}
10010a3e:	4b05      	ldr	r3, [pc, #20]	; (10010a54 <at_ble_scan_stop+0x18>)
10010a40:	4798      	blx	r3
10010a42:	1e04      	subs	r4, r0, #0
10010a44:	d103      	bne.n	10010a4e <at_ble_scan_stop+0x12>
10010a46:	20d1      	movs	r0, #209	; 0xd1
10010a48:	4b03      	ldr	r3, [pc, #12]	; (10010a58 <at_ble_scan_stop+0x1c>)
10010a4a:	0100      	lsls	r0, r0, #4
10010a4c:	4798      	blx	r3
10010a4e:	1c20      	adds	r0, r4, #0
10010a50:	bd10      	pop	{r4, pc}
10010a52:	46c0      	nop			; (mov r8, r8)
10010a54:	100125b5 	.word	0x100125b5
10010a58:	100104e9 	.word	0x100104e9

10010a5c <at_ble_disconnect>:
10010a5c:	b538      	push	{r3, r4, r5, lr}
10010a5e:	1c04      	adds	r4, r0, #0
10010a60:	4b04      	ldr	r3, [pc, #16]	; (10010a74 <at_ble_disconnect+0x18>)
10010a62:	1c08      	adds	r0, r1, #0
10010a64:	1c21      	adds	r1, r4, #0
10010a66:	4798      	blx	r3
10010a68:	1c05      	adds	r5, r0, #0
10010a6a:	4b03      	ldr	r3, [pc, #12]	; (10010a78 <at_ble_disconnect+0x1c>)
10010a6c:	1c20      	adds	r0, r4, #0
10010a6e:	4798      	blx	r3
10010a70:	1c28      	adds	r0, r5, #0
10010a72:	bd38      	pop	{r3, r4, r5, pc}
10010a74:	10011c2d 	.word	0x10011c2d
10010a78:	1001052d 	.word	0x1001052d

10010a7c <at_ble_conn_update_reply>:
10010a7c:	b510      	push	{r4, lr}
10010a7e:	4c01      	ldr	r4, [pc, #4]	; (10010a84 <at_ble_conn_update_reply+0x8>)
10010a80:	47a0      	blx	r4
10010a82:	bd10      	pop	{r4, pc}
10010a84:	1001211d 	.word	0x1001211d

10010a88 <at_ble_random_address_resolve>:
10010a88:	b510      	push	{r4, lr}
10010a8a:	23cf      	movs	r3, #207	; 0xcf
10010a8c:	2800      	cmp	r0, #0
10010a8e:	d00a      	beq.n	10010aa6 <at_ble_random_address_resolve+0x1e>
10010a90:	2900      	cmp	r1, #0
10010a92:	d008      	beq.n	10010aa6 <at_ble_random_address_resolve+0x1e>
10010a94:	2a00      	cmp	r2, #0
10010a96:	d006      	beq.n	10010aa6 <at_ble_random_address_resolve+0x1e>
10010a98:	780c      	ldrb	r4, [r1, #0]
10010a9a:	2c02      	cmp	r4, #2
10010a9c:	d103      	bne.n	10010aa6 <at_ble_random_address_resolve+0x1e>
10010a9e:	4b03      	ldr	r3, [pc, #12]	; (10010aac <at_ble_random_address_resolve+0x24>)
10010aa0:	3101      	adds	r1, #1
10010aa2:	4798      	blx	r3
10010aa4:	2300      	movs	r3, #0
10010aa6:	1c18      	adds	r0, r3, #0
10010aa8:	bd10      	pop	{r4, pc}
10010aaa:	46c0      	nop			; (mov r8, r8)
10010aac:	10012949 	.word	0x10012949

10010ab0 <at_ble_uuid_type2len>:
10010ab0:	23cf      	movs	r3, #207	; 0xcf
10010ab2:	2802      	cmp	r0, #2
10010ab4:	d801      	bhi.n	10010aba <at_ble_uuid_type2len+0xa>
10010ab6:	4b02      	ldr	r3, [pc, #8]	; (10010ac0 <at_ble_uuid_type2len+0x10>)
10010ab8:	5c1b      	ldrb	r3, [r3, r0]
10010aba:	1c18      	adds	r0, r3, #0
10010abc:	4770      	bx	lr
10010abe:	46c0      	nop			; (mov r8, r8)
10010ac0:	10018423 	.word	0x10018423

10010ac4 <at_ble_uuid_len2type>:
10010ac4:	1e83      	subs	r3, r0, #2
10010ac6:	b2db      	uxtb	r3, r3
10010ac8:	2003      	movs	r0, #3
10010aca:	2b0e      	cmp	r3, #14
10010acc:	d801      	bhi.n	10010ad2 <at_ble_uuid_len2type+0xe>
10010ace:	4a01      	ldr	r2, [pc, #4]	; (10010ad4 <at_ble_uuid_len2type+0x10>)
10010ad0:	5cd0      	ldrb	r0, [r2, r3]
10010ad2:	4770      	bx	lr
10010ad4:	10018426 	.word	0x10018426

10010ad8 <init_gatt_client_module>:
10010ad8:	2200      	movs	r2, #0
10010ada:	4b01      	ldr	r3, [pc, #4]	; (10010ae0 <init_gatt_client_module+0x8>)
10010adc:	801a      	strh	r2, [r3, #0]
10010ade:	4770      	bx	lr
10010ae0:	1001a0cc 	.word	0x1001a0cc

10010ae4 <db_searchATT>:
10010ae4:	b570      	push	{r4, r5, r6, lr}
10010ae6:	1c05      	adds	r5, r0, #0
10010ae8:	2400      	movs	r4, #0
10010aea:	4b0c      	ldr	r3, [pc, #48]	; (10010b1c <db_searchATT+0x38>)
10010aec:	6819      	ldr	r1, [r3, #0]
10010aee:	4b0c      	ldr	r3, [pc, #48]	; (10010b20 <db_searchATT+0x3c>)
10010af0:	681e      	ldr	r6, [r3, #0]
10010af2:	428c      	cmp	r4, r1
10010af4:	dc10      	bgt.n	10010b18 <db_searchATT+0x34>
10010af6:	200c      	movs	r0, #12
10010af8:	1863      	adds	r3, r4, r1
10010afa:	0fda      	lsrs	r2, r3, #31
10010afc:	18d3      	adds	r3, r2, r3
10010afe:	1c02      	adds	r2, r0, #0
10010b00:	105b      	asrs	r3, r3, #1
10010b02:	435a      	muls	r2, r3
10010b04:	18b0      	adds	r0, r6, r2
10010b06:	8802      	ldrh	r2, [r0, #0]
10010b08:	42aa      	cmp	r2, r5
10010b0a:	d201      	bcs.n	10010b10 <db_searchATT+0x2c>
10010b0c:	1e59      	subs	r1, r3, #1
10010b0e:	e7f0      	b.n	10010af2 <db_searchATT+0xe>
10010b10:	42aa      	cmp	r2, r5
10010b12:	d902      	bls.n	10010b1a <db_searchATT+0x36>
10010b14:	1c5c      	adds	r4, r3, #1
10010b16:	e7ec      	b.n	10010af2 <db_searchATT+0xe>
10010b18:	2000      	movs	r0, #0
10010b1a:	bd70      	pop	{r4, r5, r6, pc}
10010b1c:	1001a0e0 	.word	0x1001a0e0
10010b20:	1001a0d8 	.word	0x1001a0d8

10010b24 <att_permissions>:
10010b24:	b530      	push	{r4, r5, lr}
10010b26:	2403      	movs	r4, #3
10010b28:	1c05      	adds	r5, r0, #0
10010b2a:	2301      	movs	r3, #1
10010b2c:	4025      	ands	r5, r4
10010b2e:	42a5      	cmp	r5, r4
10010b30:	d009      	beq.n	10010b46 <att_permissions+0x22>
10010b32:	1c23      	adds	r3, r4, #0
10010b34:	1924      	adds	r4, r4, r4
10010b36:	4220      	tst	r0, r4
10010b38:	d105      	bne.n	10010b46 <att_permissions+0x22>
10010b3a:	3b02      	subs	r3, #2
10010b3c:	4218      	tst	r0, r3
10010b3e:	d102      	bne.n	10010b46 <att_permissions+0x22>
10010b40:	1e4b      	subs	r3, r1, #1
10010b42:	4199      	sbcs	r1, r3
10010b44:	b28b      	uxth	r3, r1
10010b46:	2130      	movs	r1, #48	; 0x30
10010b48:	4001      	ands	r1, r0
10010b4a:	2930      	cmp	r1, #48	; 0x30
10010b4c:	d007      	beq.n	10010b5e <att_permissions+0x3a>
10010b4e:	0641      	lsls	r1, r0, #25
10010b50:	d401      	bmi.n	10010b56 <att_permissions+0x32>
10010b52:	0681      	lsls	r1, r0, #26
10010b54:	d501      	bpl.n	10010b5a <att_permissions+0x36>
10010b56:	4807      	ldr	r0, [pc, #28]	; (10010b74 <att_permissions+0x50>)
10010b58:	e009      	b.n	10010b6e <att_permissions+0x4a>
10010b5a:	06c1      	lsls	r1, r0, #27
10010b5c:	d501      	bpl.n	10010b62 <att_permissions+0x3e>
10010b5e:	4806      	ldr	r0, [pc, #24]	; (10010b78 <att_permissions+0x54>)
10010b60:	e005      	b.n	10010b6e <att_permissions+0x4a>
10010b62:	2a00      	cmp	r2, #0
10010b64:	d001      	beq.n	10010b6a <att_permissions+0x46>
10010b66:	2204      	movs	r2, #4
10010b68:	4313      	orrs	r3, r2
10010b6a:	2080      	movs	r0, #128	; 0x80
10010b6c:	0180      	lsls	r0, r0, #6
10010b6e:	4318      	orrs	r0, r3
10010b70:	bd30      	pop	{r4, r5, pc}
10010b72:	46c0      	nop			; (mov r8, r8)
10010b74:	0000200c 	.word	0x0000200c
10010b78:	00002004 	.word	0x00002004

10010b7c <char_permissions>:
10010b7c:	b530      	push	{r4, r5, lr}
10010b7e:	2300      	movs	r3, #0
10010b80:	0784      	lsls	r4, r0, #30
10010b82:	d503      	bpl.n	10010b8c <char_permissions+0x10>
10010b84:	3301      	adds	r3, #1
10010b86:	4219      	tst	r1, r3
10010b88:	d100      	bne.n	10010b8c <char_permissions+0x10>
10010b8a:	3302      	adds	r3, #2
10010b8c:	0704      	lsls	r4, r0, #28
10010b8e:	d508      	bpl.n	10010ba2 <char_permissions+0x26>
10010b90:	06cc      	lsls	r4, r1, #27
10010b92:	d501      	bpl.n	10010b98 <char_permissions+0x1c>
10010b94:	2404      	movs	r4, #4
10010b96:	e000      	b.n	10010b9a <char_permissions+0x1e>
10010b98:	240c      	movs	r4, #12
10010b9a:	4323      	orrs	r3, r4
10010b9c:	2480      	movs	r4, #128	; 0x80
10010b9e:	01a4      	lsls	r4, r4, #6
10010ba0:	4323      	orrs	r3, r4
10010ba2:	0684      	lsls	r4, r0, #26
10010ba4:	d506      	bpl.n	10010bb4 <char_permissions+0x38>
10010ba6:	2406      	movs	r4, #6
10010ba8:	4221      	tst	r1, r4
10010baa:	d101      	bne.n	10010bb0 <char_permissions+0x34>
10010bac:	340a      	adds	r4, #10
10010bae:	e000      	b.n	10010bb2 <char_permissions+0x36>
10010bb0:	2430      	movs	r4, #48	; 0x30
10010bb2:	4323      	orrs	r3, r4
10010bb4:	06c4      	lsls	r4, r0, #27
10010bb6:	d506      	bpl.n	10010bc6 <char_permissions+0x4a>
10010bb8:	2406      	movs	r4, #6
10010bba:	4221      	tst	r1, r4
10010bbc:	d101      	bne.n	10010bc2 <char_permissions+0x46>
10010bbe:	343a      	adds	r4, #58	; 0x3a
10010bc0:	e000      	b.n	10010bc4 <char_permissions+0x48>
10010bc2:	24c0      	movs	r4, #192	; 0xc0
10010bc4:	4323      	orrs	r3, r4
10010bc6:	2480      	movs	r4, #128	; 0x80
10010bc8:	0064      	lsls	r4, r4, #1
10010bca:	4220      	tst	r0, r4
10010bcc:	d000      	beq.n	10010bd0 <char_permissions+0x54>
10010bce:	4323      	orrs	r3, r4
10010bd0:	07c4      	lsls	r4, r0, #31
10010bd2:	d502      	bpl.n	10010bda <char_permissions+0x5e>
10010bd4:	2480      	movs	r4, #128	; 0x80
10010bd6:	00a4      	lsls	r4, r4, #2
10010bd8:	4323      	orrs	r3, r4
10010bda:	2404      	movs	r4, #4
10010bdc:	4220      	tst	r0, r4
10010bde:	d006      	beq.n	10010bee <char_permissions+0x72>
10010be0:	06cd      	lsls	r5, r1, #27
10010be2:	d400      	bmi.n	10010be6 <char_permissions+0x6a>
10010be4:	240c      	movs	r4, #12
10010be6:	4323      	orrs	r3, r4
10010be8:	2480      	movs	r4, #128	; 0x80
10010bea:	0124      	lsls	r4, r4, #4
10010bec:	4323      	orrs	r3, r4
10010bee:	0644      	lsls	r4, r0, #25
10010bf0:	d501      	bpl.n	10010bf6 <char_permissions+0x7a>
10010bf2:	4c08      	ldr	r4, [pc, #32]	; (10010c14 <char_permissions+0x98>)
10010bf4:	4323      	orrs	r3, r4
10010bf6:	0600      	lsls	r0, r0, #24
10010bf8:	d507      	bpl.n	10010c0a <char_permissions+0x8e>
10010bfa:	2004      	movs	r0, #4
10010bfc:	06c9      	lsls	r1, r1, #27
10010bfe:	d400      	bmi.n	10010c02 <char_permissions+0x86>
10010c00:	200c      	movs	r0, #12
10010c02:	4303      	orrs	r3, r0
10010c04:	2084      	movs	r0, #132	; 0x84
10010c06:	0180      	lsls	r0, r0, #6
10010c08:	4303      	orrs	r3, r0
10010c0a:	0390      	lsls	r0, r2, #14
10010c0c:	4303      	orrs	r3, r0
10010c0e:	b298      	uxth	r0, r3
10010c10:	bd30      	pop	{r4, r5, pc}
10010c12:	46c0      	nop			; (mov r8, r8)
10010c14:	00001004 	.word	0x00001004

10010c18 <presentation_format_define>:
10010c18:	b507      	push	{r0, r1, r2, lr}
10010c1a:	466a      	mov	r2, sp
10010c1c:	780b      	ldrb	r3, [r1, #0]
10010c1e:	7013      	strb	r3, [r2, #0]
10010c20:	784b      	ldrb	r3, [r1, #1]
10010c22:	7053      	strb	r3, [r2, #1]
10010c24:	884b      	ldrh	r3, [r1, #2]
10010c26:	7093      	strb	r3, [r2, #2]
10010c28:	0a1b      	lsrs	r3, r3, #8
10010c2a:	70d3      	strb	r3, [r2, #3]
10010c2c:	790b      	ldrb	r3, [r1, #4]
10010c2e:	7113      	strb	r3, [r2, #4]
10010c30:	88cb      	ldrh	r3, [r1, #6]
10010c32:	2107      	movs	r1, #7
10010c34:	7153      	strb	r3, [r2, #5]
10010c36:	0a1b      	lsrs	r3, r3, #8
10010c38:	7193      	strb	r3, [r2, #6]
10010c3a:	4b01      	ldr	r3, [pc, #4]	; (10010c40 <presentation_format_define+0x28>)
10010c3c:	4798      	blx	r3
10010c3e:	bd0e      	pop	{r1, r2, r3, pc}
10010c40:	10012fad 	.word	0x10012fad

10010c44 <db_addATT>:
10010c44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10010c46:	4c29      	ldr	r4, [pc, #164]	; (10010cec <db_addATT+0xa8>)
10010c48:	1c1d      	adds	r5, r3, #0
10010c4a:	6823      	ldr	r3, [r4, #0]
10010c4c:	9001      	str	r0, [sp, #4]
10010c4e:	26d3      	movs	r6, #211	; 0xd3
10010c50:	2b00      	cmp	r3, #0
10010c52:	d048      	beq.n	10010ce6 <db_addATT+0xa2>
10010c54:	1c1e      	adds	r6, r3, #0
10010c56:	3e0c      	subs	r6, #12
10010c58:	6026      	str	r6, [r4, #0]
10010c5a:	2900      	cmp	r1, #0
10010c5c:	d005      	beq.n	10010c6a <db_addATT+0x26>
10010c5e:	4f24      	ldr	r7, [pc, #144]	; (10010cf0 <db_addATT+0xac>)
10010c60:	46bc      	mov	ip, r7
10010c62:	4660      	mov	r0, ip
10010c64:	683f      	ldr	r7, [r7, #0]
10010c66:	18bf      	adds	r7, r7, r2
10010c68:	6007      	str	r7, [r0, #0]
10010c6a:	4821      	ldr	r0, [pc, #132]	; (10010cf0 <db_addATT+0xac>)
10010c6c:	6807      	ldr	r7, [r0, #0]
10010c6e:	4684      	mov	ip, r0
10010c70:	42be      	cmp	r6, r7
10010c72:	d932      	bls.n	10010cda <db_addATT+0x96>
10010c74:	4668      	mov	r0, sp
10010c76:	8880      	ldrh	r0, [r0, #4]
10010c78:	3b0c      	subs	r3, #12
10010c7a:	8018      	strh	r0, [r3, #0]
10010c7c:	6823      	ldr	r3, [r4, #0]
10010c7e:	2900      	cmp	r1, #0
10010c80:	d009      	beq.n	10010c96 <db_addATT+0x52>
10010c82:	2a00      	cmp	r2, #0
10010c84:	d007      	beq.n	10010c96 <db_addATT+0x52>
10010c86:	4660      	mov	r0, ip
10010c88:	6800      	ldr	r0, [r0, #0]
10010c8a:	809a      	strh	r2, [r3, #4]
10010c8c:	1a80      	subs	r0, r0, r2
10010c8e:	6098      	str	r0, [r3, #8]
10010c90:	4b18      	ldr	r3, [pc, #96]	; (10010cf4 <db_addATT+0xb0>)
10010c92:	4798      	blx	r3
10010c94:	e002      	b.n	10010c9c <db_addATT+0x58>
10010c96:	2100      	movs	r1, #0
10010c98:	809a      	strh	r2, [r3, #4]
10010c9a:	6099      	str	r1, [r3, #8]
10010c9c:	2300      	movs	r3, #0
10010c9e:	6822      	ldr	r2, [r4, #0]
10010ca0:	7093      	strb	r3, [r2, #2]
10010ca2:	3303      	adds	r3, #3
10010ca4:	402b      	ands	r3, r5
10010ca6:	2b03      	cmp	r3, #3
10010ca8:	d001      	beq.n	10010cae <db_addATT+0x6a>
10010caa:	076b      	lsls	r3, r5, #29
10010cac:	d504      	bpl.n	10010cb8 <db_addATT+0x74>
10010cae:	2101      	movs	r1, #1
10010cb0:	6822      	ldr	r2, [r4, #0]
10010cb2:	7893      	ldrb	r3, [r2, #2]
10010cb4:	430b      	orrs	r3, r1
10010cb6:	7093      	strb	r3, [r2, #2]
10010cb8:	2330      	movs	r3, #48	; 0x30
10010cba:	402b      	ands	r3, r5
10010cbc:	2b30      	cmp	r3, #48	; 0x30
10010cbe:	d001      	beq.n	10010cc4 <db_addATT+0x80>
10010cc0:	066b      	lsls	r3, r5, #25
10010cc2:	d504      	bpl.n	10010cce <db_addATT+0x8a>
10010cc4:	2102      	movs	r1, #2
10010cc6:	6822      	ldr	r2, [r4, #0]
10010cc8:	7893      	ldrb	r3, [r2, #2]
10010cca:	430b      	orrs	r3, r1
10010ccc:	7093      	strb	r3, [r2, #2]
10010cce:	4a0a      	ldr	r2, [pc, #40]	; (10010cf8 <db_addATT+0xb4>)
10010cd0:	2600      	movs	r6, #0
10010cd2:	6813      	ldr	r3, [r2, #0]
10010cd4:	3301      	adds	r3, #1
10010cd6:	6013      	str	r3, [r2, #0]
10010cd8:	e005      	b.n	10010ce6 <db_addATT+0xa2>
10010cda:	6023      	str	r3, [r4, #0]
10010cdc:	2611      	movs	r6, #17
10010cde:	2900      	cmp	r1, #0
10010ce0:	d001      	beq.n	10010ce6 <db_addATT+0xa2>
10010ce2:	1aba      	subs	r2, r7, r2
10010ce4:	6002      	str	r2, [r0, #0]
10010ce6:	1c30      	adds	r0, r6, #0
10010ce8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10010cea:	46c0      	nop			; (mov r8, r8)
10010cec:	1001a0d8 	.word	0x1001a0d8
10010cf0:	1001a0dc 	.word	0x1001a0dc
10010cf4:	1001521b 	.word	0x1001521b
10010cf8:	1001a0e0 	.word	0x1001a0e0

10010cfc <user_description_define>:
10010cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10010cfe:	1c05      	adds	r5, r0, #0
10010d00:	20cf      	movs	r0, #207	; 0xcf
10010d02:	2a00      	cmp	r2, #0
10010d04:	d01c      	beq.n	10010d40 <user_description_define+0x44>
10010d06:	1c14      	adds	r4, r2, #0
10010d08:	2203      	movs	r2, #3
10010d0a:	1c1e      	adds	r6, r3, #0
10010d0c:	400a      	ands	r2, r1
10010d0e:	1c0b      	adds	r3, r1, #0
10010d10:	3a03      	subs	r2, #3
10010d12:	4251      	negs	r1, r2
10010d14:	4151      	adcs	r1, r2
10010d16:	075a      	lsls	r2, r3, #29
10010d18:	0fd2      	lsrs	r2, r2, #31
10010d1a:	430a      	orrs	r2, r1
10010d1c:	03d2      	lsls	r2, r2, #15
10010d1e:	4f09      	ldr	r7, [pc, #36]	; (10010d44 <user_description_define+0x48>)
10010d20:	1c28      	adds	r0, r5, #0
10010d22:	2a00      	cmp	r2, #0
10010d24:	d003      	beq.n	10010d2e <user_description_define+0x32>
10010d26:	1c21      	adds	r1, r4, #0
10010d28:	1c32      	adds	r2, r6, #0
10010d2a:	47b8      	blx	r7
10010d2c:	e008      	b.n	10010d40 <user_description_define+0x44>
10010d2e:	1c11      	adds	r1, r2, #0
10010d30:	47b8      	blx	r7
10010d32:	2800      	cmp	r0, #0
10010d34:	d104      	bne.n	10010d40 <user_description_define+0x44>
10010d36:	1c28      	adds	r0, r5, #0
10010d38:	1c31      	adds	r1, r6, #0
10010d3a:	1c22      	adds	r2, r4, #0
10010d3c:	4b02      	ldr	r3, [pc, #8]	; (10010d48 <user_description_define+0x4c>)
10010d3e:	4798      	blx	r3
10010d40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10010d42:	46c0      	nop			; (mov r8, r8)
10010d44:	10010c45 	.word	0x10010c45
10010d48:	10012fad 	.word	0x10012fad

10010d4c <at_ble_read_authorize_reply.part.1>:
10010d4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
10010d4e:	4b09      	ldr	r3, [pc, #36]	; (10010d74 <at_ble_read_authorize_reply.part.1+0x28>)
10010d50:	1c05      	adds	r5, r0, #0
10010d52:	1c08      	adds	r0, r1, #0
10010d54:	1c0c      	adds	r4, r1, #0
10010d56:	4798      	blx	r3
10010d58:	2800      	cmp	r0, #0
10010d5a:	d009      	beq.n	10010d70 <at_ble_read_authorize_reply.part.1+0x24>
10010d5c:	6882      	ldr	r2, [r0, #8]
10010d5e:	2a00      	cmp	r2, #0
10010d60:	d006      	beq.n	10010d70 <at_ble_read_authorize_reply.part.1+0x24>
10010d62:	8883      	ldrh	r3, [r0, #4]
10010d64:	1c29      	adds	r1, r5, #0
10010d66:	9200      	str	r2, [sp, #0]
10010d68:	1c20      	adds	r0, r4, #0
10010d6a:	2200      	movs	r2, #0
10010d6c:	4c02      	ldr	r4, [pc, #8]	; (10010d78 <at_ble_read_authorize_reply.part.1+0x2c>)
10010d6e:	47a0      	blx	r4
10010d70:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
10010d72:	46c0      	nop			; (mov r8, r8)
10010d74:	10010ae5 	.word	0x10010ae5
10010d78:	10012a45 	.word	0x10012a45

10010d7c <internal_at_ble_service_define>:
10010d7c:	b5f0      	push	{r4, r5, r6, r7, lr}
10010d7e:	b08b      	sub	sp, #44	; 0x2c
10010d80:	9306      	str	r3, [sp, #24]
10010d82:	ab10      	add	r3, sp, #64	; 0x40
10010d84:	9202      	str	r2, [sp, #8]
10010d86:	cb04      	ldmia	r3!, {r2}
10010d88:	1c05      	adds	r5, r0, #0
10010d8a:	881b      	ldrh	r3, [r3, #0]
10010d8c:	9105      	str	r1, [sp, #20]
10010d8e:	9303      	str	r3, [sp, #12]
10010d90:	ab12      	add	r3, sp, #72	; 0x48
10010d92:	781b      	ldrb	r3, [r3, #0]
10010d94:	20cf      	movs	r0, #207	; 0xcf
10010d96:	9304      	str	r3, [sp, #16]
10010d98:	2d00      	cmp	r5, #0
10010d9a:	d100      	bne.n	10010d9e <internal_at_ble_service_define+0x22>
10010d9c:	e1ca      	b.n	10011134 <internal_at_ble_service_define+0x3b8>
10010d9e:	2900      	cmp	r1, #0
10010da0:	d100      	bne.n	10010da4 <internal_at_ble_service_define+0x28>
10010da2:	e1c7      	b.n	10011134 <internal_at_ble_service_define+0x3b8>
10010da4:	2a00      	cmp	r2, #0
10010da6:	d100      	bne.n	10010daa <internal_at_ble_service_define+0x2e>
10010da8:	e1c4      	b.n	10011134 <internal_at_ble_service_define+0x3b8>
10010daa:	9b03      	ldr	r3, [sp, #12]
10010dac:	2b00      	cmp	r3, #0
10010dae:	d100      	bne.n	10010db2 <internal_at_ble_service_define+0x36>
10010db0:	e1c0      	b.n	10011134 <internal_at_ble_service_define+0x3b8>
10010db2:	4bc9      	ldr	r3, [pc, #804]	; (100110d8 <internal_at_ble_service_define+0x35c>)
10010db4:	3004      	adds	r0, #4
10010db6:	681e      	ldr	r6, [r3, #0]
10010db8:	2e00      	cmp	r6, #0
10010dba:	d100      	bne.n	10010dbe <internal_at_ble_service_define+0x42>
10010dbc:	e1ba      	b.n	10011134 <internal_at_ble_service_define+0x3b8>
10010dbe:	2400      	movs	r4, #0
10010dc0:	4bc6      	ldr	r3, [pc, #792]	; (100110dc <internal_at_ble_service_define+0x360>)
10010dc2:	8034      	strh	r4, [r6, #0]
10010dc4:	881b      	ldrh	r3, [r3, #0]
10010dc6:	1db7      	adds	r7, r6, #6
10010dc8:	1c21      	adds	r1, r4, #0
10010dca:	2210      	movs	r2, #16
10010dcc:	8073      	strh	r3, [r6, #2]
10010dce:	1c38      	adds	r0, r7, #0
10010dd0:	4bc3      	ldr	r3, [pc, #780]	; (100110e0 <internal_at_ble_service_define+0x364>)
10010dd2:	4798      	blx	r3
10010dd4:	7828      	ldrb	r0, [r5, #0]
10010dd6:	4bc3      	ldr	r3, [pc, #780]	; (100110e4 <internal_at_ble_service_define+0x368>)
10010dd8:	4798      	blx	r3
10010dda:	1c69      	adds	r1, r5, #1
10010ddc:	1c02      	adds	r2, r0, #0
10010dde:	4bc2      	ldr	r3, [pc, #776]	; (100110e8 <internal_at_ble_service_define+0x36c>)
10010de0:	1c38      	adds	r0, r7, #0
10010de2:	4798      	blx	r3
10010de4:	2204      	movs	r2, #4
10010de6:	782b      	ldrb	r3, [r5, #0]
10010de8:	9d02      	ldr	r5, [sp, #8]
10010dea:	011b      	lsls	r3, r3, #4
10010dec:	4313      	orrs	r3, r2
10010dee:	9a04      	ldr	r2, [sp, #16]
10010df0:	7174      	strb	r4, [r6, #5]
10010df2:	0192      	lsls	r2, r2, #6
10010df4:	4313      	orrs	r3, r2
10010df6:	7133      	strb	r3, [r6, #4]
10010df8:	2316      	movs	r3, #22
10010dfa:	9a06      	ldr	r2, [sp, #24]
10010dfc:	3512      	adds	r5, #18
10010dfe:	4353      	muls	r3, r2
10010e00:	9a02      	ldr	r2, [sp, #8]
10010e02:	3312      	adds	r3, #18
10010e04:	18d7      	adds	r7, r2, r3
10010e06:	42bd      	cmp	r5, r7
10010e08:	d00f      	beq.n	10010e2a <internal_at_ble_service_define+0xae>
10010e0a:	4bb8      	ldr	r3, [pc, #736]	; (100110ec <internal_at_ble_service_define+0x370>)
10010e0c:	8829      	ldrh	r1, [r5, #0]
10010e0e:	9300      	str	r3, [sp, #0]
10010e10:	230e      	movs	r3, #14
10010e12:	aa06      	add	r2, sp, #24
10010e14:	189b      	adds	r3, r3, r2
10010e16:	9301      	str	r3, [sp, #4]
10010e18:	4cb5      	ldr	r4, [pc, #724]	; (100110f0 <internal_at_ble_service_define+0x374>)
10010e1a:	1c30      	adds	r0, r6, #0
10010e1c:	2201      	movs	r2, #1
10010e1e:	2302      	movs	r3, #2
10010e20:	47a0      	blx	r4
10010e22:	3516      	adds	r5, #22
10010e24:	1e04      	subs	r4, r0, #0
10010e26:	d0ee      	beq.n	10010e06 <internal_at_ble_service_define+0x8a>
10010e28:	e183      	b.n	10011132 <internal_at_ble_service_define+0x3b6>
10010e2a:	9f10      	ldr	r7, [sp, #64]	; 0x40
10010e2c:	2300      	movs	r3, #0
10010e2e:	3714      	adds	r7, #20
10010e30:	1c3d      	adds	r5, r7, #0
10010e32:	9302      	str	r3, [sp, #8]
10010e34:	9b02      	ldr	r3, [sp, #8]
10010e36:	9a03      	ldr	r2, [sp, #12]
10010e38:	4293      	cmp	r3, r2
10010e3a:	db00      	blt.n	10010e3e <internal_at_ble_service_define+0xc2>
10010e3c:	e0bf      	b.n	10010fbe <internal_at_ble_service_define+0x242>
10010e3e:	4bad      	ldr	r3, [pc, #692]	; (100110f4 <internal_at_ble_service_define+0x378>)
10010e40:	aa06      	add	r2, sp, #24
10010e42:	9300      	str	r3, [sp, #0]
10010e44:	230e      	movs	r3, #14
10010e46:	189b      	adds	r3, r3, r2
10010e48:	9301      	str	r3, [sp, #4]
10010e4a:	4ca9      	ldr	r4, [pc, #676]	; (100110f0 <internal_at_ble_service_define+0x374>)
10010e4c:	1c30      	adds	r0, r6, #0
10010e4e:	2104      	movs	r1, #4
10010e50:	2201      	movs	r2, #1
10010e52:	2302      	movs	r3, #2
10010e54:	47a0      	blx	r4
10010e56:	1e04      	subs	r4, r0, #0
10010e58:	d000      	beq.n	10010e5c <internal_at_ble_service_define+0xe0>
10010e5a:	e16a      	b.n	10011132 <internal_at_ble_service_define+0x3b6>
10010e5c:	1c2b      	adds	r3, r5, #0
10010e5e:	3b12      	subs	r3, #18
10010e60:	7b2c      	ldrb	r4, [r5, #12]
10010e62:	781b      	ldrb	r3, [r3, #0]
10010e64:	1c21      	adds	r1, r4, #0
10010e66:	1c1a      	adds	r2, r3, #0
10010e68:	9304      	str	r3, [sp, #16]
10010e6a:	8828      	ldrh	r0, [r5, #0]
10010e6c:	4ba2      	ldr	r3, [pc, #648]	; (100110f8 <internal_at_ble_service_define+0x37c>)
10010e6e:	4798      	blx	r3
10010e70:	2303      	movs	r3, #3
10010e72:	4023      	ands	r3, r4
10010e74:	3b03      	subs	r3, #3
10010e76:	4259      	negs	r1, r3
10010e78:	4159      	adcs	r1, r3
10010e7a:	2301      	movs	r3, #1
10010e7c:	08a4      	lsrs	r4, r4, #2
10010e7e:	401c      	ands	r4, r3
10010e80:	430c      	orrs	r4, r1
10010e82:	896b      	ldrh	r3, [r5, #10]
10010e84:	03e4      	lsls	r4, r4, #15
10010e86:	431c      	orrs	r4, r3
10010e88:	9007      	str	r0, [sp, #28]
10010e8a:	4b96      	ldr	r3, [pc, #600]	; (100110e4 <internal_at_ble_service_define+0x368>)
10010e8c:	9804      	ldr	r0, [sp, #16]
10010e8e:	4798      	blx	r3
10010e90:	1c2a      	adds	r2, r5, #0
10010e92:	3a11      	subs	r2, #17
10010e94:	9200      	str	r2, [sp, #0]
10010e96:	3a03      	subs	r2, #3
10010e98:	1c03      	adds	r3, r0, #0
10010e9a:	9201      	str	r2, [sp, #4]
10010e9c:	1c21      	adds	r1, r4, #0
10010e9e:	1c30      	adds	r0, r6, #0
10010ea0:	4c93      	ldr	r4, [pc, #588]	; (100110f0 <internal_at_ble_service_define+0x374>)
10010ea2:	9a07      	ldr	r2, [sp, #28]
10010ea4:	47a0      	blx	r4
10010ea6:	1e04      	subs	r4, r0, #0
10010ea8:	d000      	beq.n	10010eac <internal_at_ble_service_define+0x130>
10010eaa:	e142      	b.n	10011132 <internal_at_ble_service_define+0x3b6>
10010eac:	22c0      	movs	r2, #192	; 0xc0
10010eae:	882b      	ldrh	r3, [r5, #0]
10010eb0:	0052      	lsls	r2, r2, #1
10010eb2:	4213      	tst	r3, r2
10010eb4:	d104      	bne.n	10010ec0 <internal_at_ble_service_define+0x144>
10010eb6:	8aab      	ldrh	r3, [r5, #20]
10010eb8:	9304      	str	r3, [sp, #16]
10010eba:	2b00      	cmp	r3, #0
10010ebc:	d116      	bne.n	10010eec <internal_at_ble_service_define+0x170>
10010ebe:	e03a      	b.n	10010f36 <internal_at_ble_service_define+0x1ba>
10010ec0:	2201      	movs	r2, #1
10010ec2:	09d9      	lsrs	r1, r3, #7
10010ec4:	4011      	ands	r1, r2
10010ec6:	05db      	lsls	r3, r3, #23
10010ec8:	d501      	bpl.n	10010ece <internal_at_ble_service_define+0x152>
10010eca:	2302      	movs	r3, #2
10010ecc:	4319      	orrs	r1, r3
10010ece:	4b8b      	ldr	r3, [pc, #556]	; (100110fc <internal_at_ble_service_define+0x380>)
10010ed0:	aa06      	add	r2, sp, #24
10010ed2:	9300      	str	r3, [sp, #0]
10010ed4:	230e      	movs	r3, #14
10010ed6:	189b      	adds	r3, r3, r2
10010ed8:	9301      	str	r3, [sp, #4]
10010eda:	4c85      	ldr	r4, [pc, #532]	; (100110f0 <internal_at_ble_service_define+0x374>)
10010edc:	0209      	lsls	r1, r1, #8
10010ede:	1c30      	adds	r0, r6, #0
10010ee0:	2201      	movs	r2, #1
10010ee2:	2302      	movs	r3, #2
10010ee4:	47a0      	blx	r4
10010ee6:	1e04      	subs	r4, r0, #0
10010ee8:	d0e5      	beq.n	10010eb6 <internal_at_ble_service_define+0x13a>
10010eea:	e122      	b.n	10011132 <internal_at_ble_service_define+0x3b6>
10010eec:	2380      	movs	r3, #128	; 0x80
10010eee:	882a      	ldrh	r2, [r5, #0]
10010ef0:	7f2c      	ldrb	r4, [r5, #28]
10010ef2:	005b      	lsls	r3, r3, #1
10010ef4:	401a      	ands	r2, r3
10010ef6:	1c20      	adds	r0, r4, #0
10010ef8:	2101      	movs	r1, #1
10010efa:	2a00      	cmp	r2, #0
10010efc:	d000      	beq.n	10010f00 <internal_at_ble_service_define+0x184>
10010efe:	1c0a      	adds	r2, r1, #0
10010f00:	4b7f      	ldr	r3, [pc, #508]	; (10011100 <internal_at_ble_service_define+0x384>)
10010f02:	4798      	blx	r3
10010f04:	2203      	movs	r2, #3
10010f06:	4022      	ands	r2, r4
10010f08:	3a03      	subs	r2, #3
10010f0a:	4251      	negs	r1, r2
10010f0c:	4151      	adcs	r1, r2
10010f0e:	4b7d      	ldr	r3, [pc, #500]	; (10011104 <internal_at_ble_service_define+0x388>)
10010f10:	1c0a      	adds	r2, r1, #0
10010f12:	9300      	str	r3, [sp, #0]
10010f14:	1c2b      	adds	r3, r5, #0
10010f16:	0764      	lsls	r4, r4, #29
10010f18:	0fe4      	lsrs	r4, r4, #31
10010f1a:	4322      	orrs	r2, r4
10010f1c:	03d2      	lsls	r2, r2, #15
10010f1e:	4310      	orrs	r0, r2
10010f20:	3320      	adds	r3, #32
10010f22:	b282      	uxth	r2, r0
10010f24:	9301      	str	r3, [sp, #4]
10010f26:	4c72      	ldr	r4, [pc, #456]	; (100110f0 <internal_at_ble_service_define+0x374>)
10010f28:	1c30      	adds	r0, r6, #0
10010f2a:	9904      	ldr	r1, [sp, #16]
10010f2c:	2302      	movs	r3, #2
10010f2e:	47a0      	blx	r4
10010f30:	1e04      	subs	r4, r0, #0
10010f32:	d000      	beq.n	10010f36 <internal_at_ble_service_define+0x1ba>
10010f34:	e0fd      	b.n	10011132 <internal_at_ble_service_define+0x3b6>
10010f36:	2101      	movs	r1, #1
10010f38:	882b      	ldrh	r3, [r5, #0]
10010f3a:	420b      	tst	r3, r1
10010f3c:	d011      	beq.n	10010f62 <internal_at_ble_service_define+0x1e6>
10010f3e:	7fa8      	ldrb	r0, [r5, #30]
10010f40:	4b6f      	ldr	r3, [pc, #444]	; (10011100 <internal_at_ble_service_define+0x384>)
10010f42:	2200      	movs	r2, #0
10010f44:	4798      	blx	r3
10010f46:	4b70      	ldr	r3, [pc, #448]	; (10011108 <internal_at_ble_service_define+0x38c>)
10010f48:	1c02      	adds	r2, r0, #0
10010f4a:	9300      	str	r3, [sp, #0]
10010f4c:	1c2b      	adds	r3, r5, #0
10010f4e:	3324      	adds	r3, #36	; 0x24
10010f50:	9301      	str	r3, [sp, #4]
10010f52:	4c67      	ldr	r4, [pc, #412]	; (100110f0 <internal_at_ble_service_define+0x374>)
10010f54:	1c30      	adds	r0, r6, #0
10010f56:	496d      	ldr	r1, [pc, #436]	; (1001110c <internal_at_ble_service_define+0x390>)
10010f58:	2302      	movs	r3, #2
10010f5a:	47a0      	blx	r4
10010f5c:	1e04      	subs	r4, r0, #0
10010f5e:	d000      	beq.n	10010f62 <internal_at_ble_service_define+0x1e6>
10010f60:	e0e7      	b.n	10011132 <internal_at_ble_service_define+0x3b6>
10010f62:	2330      	movs	r3, #48	; 0x30
10010f64:	882a      	ldrh	r2, [r5, #0]
10010f66:	421a      	tst	r2, r3
10010f68:	d012      	beq.n	10010f90 <internal_at_ble_service_define+0x214>
10010f6a:	2101      	movs	r1, #1
10010f6c:	7f68      	ldrb	r0, [r5, #29]
10010f6e:	1c0a      	adds	r2, r1, #0
10010f70:	4b63      	ldr	r3, [pc, #396]	; (10011100 <internal_at_ble_service_define+0x384>)
10010f72:	4798      	blx	r3
10010f74:	4b66      	ldr	r3, [pc, #408]	; (10011110 <internal_at_ble_service_define+0x394>)
10010f76:	1c02      	adds	r2, r0, #0
10010f78:	9300      	str	r3, [sp, #0]
10010f7a:	1c2b      	adds	r3, r5, #0
10010f7c:	3322      	adds	r3, #34	; 0x22
10010f7e:	9301      	str	r3, [sp, #4]
10010f80:	4c5b      	ldr	r4, [pc, #364]	; (100110f0 <internal_at_ble_service_define+0x374>)
10010f82:	1c30      	adds	r0, r6, #0
10010f84:	4961      	ldr	r1, [pc, #388]	; (1001110c <internal_at_ble_service_define+0x390>)
10010f86:	2302      	movs	r3, #2
10010f88:	47a0      	blx	r4
10010f8a:	1e04      	subs	r4, r0, #0
10010f8c:	d000      	beq.n	10010f90 <internal_at_ble_service_define+0x214>
10010f8e:	e0d0      	b.n	10011132 <internal_at_ble_service_define+0x3b6>
10010f90:	69ab      	ldr	r3, [r5, #24]
10010f92:	2b00      	cmp	r3, #0
10010f94:	d00e      	beq.n	10010fb4 <internal_at_ble_service_define+0x238>
10010f96:	4b5f      	ldr	r3, [pc, #380]	; (10011114 <internal_at_ble_service_define+0x398>)
10010f98:	aa06      	add	r2, sp, #24
10010f9a:	9300      	str	r3, [sp, #0]
10010f9c:	230e      	movs	r3, #14
10010f9e:	189b      	adds	r3, r3, r2
10010fa0:	9301      	str	r3, [sp, #4]
10010fa2:	4c53      	ldr	r4, [pc, #332]	; (100110f0 <internal_at_ble_service_define+0x374>)
10010fa4:	1c30      	adds	r0, r6, #0
10010fa6:	2107      	movs	r1, #7
10010fa8:	2201      	movs	r2, #1
10010faa:	2302      	movs	r3, #2
10010fac:	47a0      	blx	r4
10010fae:	1e04      	subs	r4, r0, #0
10010fb0:	d000      	beq.n	10010fb4 <internal_at_ble_service_define+0x238>
10010fb2:	e0be      	b.n	10011132 <internal_at_ble_service_define+0x3b6>
10010fb4:	9b02      	ldr	r3, [sp, #8]
10010fb6:	353c      	adds	r5, #60	; 0x3c
10010fb8:	3301      	adds	r3, #1
10010fba:	9302      	str	r3, [sp, #8]
10010fbc:	e73a      	b.n	10010e34 <internal_at_ble_service_define+0xb8>
10010fbe:	1c30      	adds	r0, r6, #0
10010fc0:	4b55      	ldr	r3, [pc, #340]	; (10011118 <internal_at_ble_service_define+0x39c>)
10010fc2:	4798      	blx	r3
10010fc4:	1e04      	subs	r4, r0, #0
10010fc6:	d000      	beq.n	10010fca <internal_at_ble_service_define+0x24e>
10010fc8:	e0b3      	b.n	10011132 <internal_at_ble_service_define+0x3b6>
10010fca:	8833      	ldrh	r3, [r6, #0]
10010fcc:	9a05      	ldr	r2, [sp, #20]
10010fce:	8013      	strh	r3, [r2, #0]
10010fd0:	8836      	ldrh	r6, [r6, #0]
10010fd2:	9b06      	ldr	r3, [sp, #24]
10010fd4:	9a03      	ldr	r2, [sp, #12]
10010fd6:	18f6      	adds	r6, r6, r3
10010fd8:	b2b3      	uxth	r3, r6
10010fda:	9302      	str	r3, [sp, #8]
10010fdc:	233c      	movs	r3, #60	; 0x3c
10010fde:	4353      	muls	r3, r2
10010fe0:	9a10      	ldr	r2, [sp, #64]	; 0x40
10010fe2:	3314      	adds	r3, #20
10010fe4:	18d3      	adds	r3, r2, r3
10010fe6:	9304      	str	r3, [sp, #16]
10010fe8:	9b04      	ldr	r3, [sp, #16]
10010fea:	429f      	cmp	r7, r3
10010fec:	d100      	bne.n	10010ff0 <internal_at_ble_service_define+0x274>
10010fee:	e0a0      	b.n	10011132 <internal_at_ble_service_define+0x3b6>
10010ff0:	9b02      	ldr	r3, [sp, #8]
10010ff2:	1c9d      	adds	r5, r3, #2
10010ff4:	1c3b      	adds	r3, r7, #0
10010ff6:	b2ad      	uxth	r5, r5
10010ff8:	3b14      	subs	r3, #20
10010ffa:	801d      	strh	r5, [r3, #0]
10010ffc:	9303      	str	r3, [sp, #12]
10010ffe:	893b      	ldrh	r3, [r7, #8]
10011000:	2b00      	cmp	r3, #0
10011002:	d108      	bne.n	10011016 <internal_at_ble_service_define+0x29a>
10011004:	23c0      	movs	r3, #192	; 0xc0
10011006:	883a      	ldrh	r2, [r7, #0]
10011008:	005b      	lsls	r3, r3, #1
1001100a:	421a      	tst	r2, r3
1001100c:	d026      	beq.n	1001105c <internal_at_ble_service_define+0x2e0>
1001100e:	9e02      	ldr	r6, [sp, #8]
10011010:	3603      	adds	r6, #3
10011012:	b2b5      	uxth	r5, r6
10011014:	e022      	b.n	1001105c <internal_at_ble_service_define+0x2e0>
10011016:	2103      	movs	r1, #3
10011018:	7b3b      	ldrb	r3, [r7, #12]
1001101a:	4019      	ands	r1, r3
1001101c:	3903      	subs	r1, #3
1001101e:	424a      	negs	r2, r1
10011020:	414a      	adcs	r2, r1
10011022:	0759      	lsls	r1, r3, #29
10011024:	0fc9      	lsrs	r1, r1, #31
10011026:	4311      	orrs	r1, r2
10011028:	03c9      	lsls	r1, r1, #15
1001102a:	897a      	ldrh	r2, [r7, #10]
1001102c:	2900      	cmp	r1, #0
1001102e:	d007      	beq.n	10011040 <internal_at_ble_service_define+0x2c4>
10011030:	6879      	ldr	r1, [r7, #4]
10011032:	2900      	cmp	r1, #0
10011034:	d100      	bne.n	10011038 <internal_at_ble_service_define+0x2bc>
10011036:	4939      	ldr	r1, [pc, #228]	; (1001111c <internal_at_ble_service_define+0x3a0>)
10011038:	1c28      	adds	r0, r5, #0
1001103a:	4e39      	ldr	r6, [pc, #228]	; (10011120 <internal_at_ble_service_define+0x3a4>)
1001103c:	47b0      	blx	r6
1001103e:	e00a      	b.n	10011056 <internal_at_ble_service_define+0x2da>
10011040:	1c28      	adds	r0, r5, #0
10011042:	4e37      	ldr	r6, [pc, #220]	; (10011120 <internal_at_ble_service_define+0x3a4>)
10011044:	47b0      	blx	r6
10011046:	2800      	cmp	r0, #0
10011048:	d172      	bne.n	10011130 <internal_at_ble_service_define+0x3b4>
1001104a:	9b03      	ldr	r3, [sp, #12]
1001104c:	8939      	ldrh	r1, [r7, #8]
1001104e:	8818      	ldrh	r0, [r3, #0]
10011050:	687a      	ldr	r2, [r7, #4]
10011052:	4b34      	ldr	r3, [pc, #208]	; (10011124 <internal_at_ble_service_define+0x3a8>)
10011054:	4798      	blx	r3
10011056:	2800      	cmp	r0, #0
10011058:	d0d4      	beq.n	10011004 <internal_at_ble_service_define+0x288>
1001105a:	e069      	b.n	10011130 <internal_at_ble_service_define+0x3b4>
1001105c:	8abb      	ldrh	r3, [r7, #20]
1001105e:	2b00      	cmp	r3, #0
10011060:	d00a      	beq.n	10011078 <internal_at_ble_service_define+0x2fc>
10011062:	3501      	adds	r5, #1
10011064:	b2ad      	uxth	r5, r5
10011066:	843d      	strh	r5, [r7, #32]
10011068:	7f39      	ldrb	r1, [r7, #28]
1001106a:	8afb      	ldrh	r3, [r7, #22]
1001106c:	1c28      	adds	r0, r5, #0
1001106e:	693a      	ldr	r2, [r7, #16]
10011070:	4e2d      	ldr	r6, [pc, #180]	; (10011128 <internal_at_ble_service_define+0x3ac>)
10011072:	47b0      	blx	r6
10011074:	2800      	cmp	r0, #0
10011076:	d15b      	bne.n	10011130 <internal_at_ble_service_define+0x3b4>
10011078:	883b      	ldrh	r3, [r7, #0]
1001107a:	07db      	lsls	r3, r3, #31
1001107c:	d50d      	bpl.n	1001109a <internal_at_ble_service_define+0x31e>
1001107e:	2200      	movs	r2, #0
10011080:	3501      	adds	r5, #1
10011082:	b2ad      	uxth	r5, r5
10011084:	a909      	add	r1, sp, #36	; 0x24
10011086:	84bd      	strh	r5, [r7, #36]	; 0x24
10011088:	7fbb      	ldrb	r3, [r7, #30]
1001108a:	1c28      	adds	r0, r5, #0
1001108c:	700a      	strb	r2, [r1, #0]
1001108e:	704a      	strb	r2, [r1, #1]
10011090:	4e23      	ldr	r6, [pc, #140]	; (10011120 <internal_at_ble_service_define+0x3a4>)
10011092:	3202      	adds	r2, #2
10011094:	47b0      	blx	r6
10011096:	2800      	cmp	r0, #0
10011098:	d14a      	bne.n	10011130 <internal_at_ble_service_define+0x3b4>
1001109a:	2330      	movs	r3, #48	; 0x30
1001109c:	883a      	ldrh	r2, [r7, #0]
1001109e:	421a      	tst	r2, r3
100110a0:	d00d      	beq.n	100110be <internal_at_ble_service_define+0x342>
100110a2:	2200      	movs	r2, #0
100110a4:	3501      	adds	r5, #1
100110a6:	b2ad      	uxth	r5, r5
100110a8:	a909      	add	r1, sp, #36	; 0x24
100110aa:	847d      	strh	r5, [r7, #34]	; 0x22
100110ac:	7f7b      	ldrb	r3, [r7, #29]
100110ae:	1c28      	adds	r0, r5, #0
100110b0:	700a      	strb	r2, [r1, #0]
100110b2:	704a      	strb	r2, [r1, #1]
100110b4:	4e1a      	ldr	r6, [pc, #104]	; (10011120 <internal_at_ble_service_define+0x3a4>)
100110b6:	3202      	adds	r2, #2
100110b8:	47b0      	blx	r6
100110ba:	2800      	cmp	r0, #0
100110bc:	d138      	bne.n	10011130 <internal_at_ble_service_define+0x3b4>
100110be:	69b9      	ldr	r1, [r7, #24]
100110c0:	2900      	cmp	r1, #0
100110c2:	d006      	beq.n	100110d2 <internal_at_ble_service_define+0x356>
100110c4:	3501      	adds	r5, #1
100110c6:	b2ad      	uxth	r5, r5
100110c8:	1c28      	adds	r0, r5, #0
100110ca:	4b18      	ldr	r3, [pc, #96]	; (1001112c <internal_at_ble_service_define+0x3b0>)
100110cc:	4798      	blx	r3
100110ce:	2800      	cmp	r0, #0
100110d0:	d12e      	bne.n	10011130 <internal_at_ble_service_define+0x3b4>
100110d2:	373c      	adds	r7, #60	; 0x3c
100110d4:	9502      	str	r5, [sp, #8]
100110d6:	e787      	b.n	10010fe8 <internal_at_ble_service_define+0x26c>
100110d8:	1001a0e8 	.word	0x1001a0e8
100110dc:	1001afd8 	.word	0x1001afd8
100110e0:	1001522d 	.word	0x1001522d
100110e4:	10010ab1 	.word	0x10010ab1
100110e8:	1001521b 	.word	0x1001521b
100110ec:	1001843f 	.word	0x1001843f
100110f0:	10012f3d 	.word	0x10012f3d
100110f4:	10018441 	.word	0x10018441
100110f8:	10010b7d 	.word	0x10010b7d
100110fc:	1001843d 	.word	0x1001843d
10011100:	10010b25 	.word	0x10010b25
10011104:	10018439 	.word	0x10018439
10011108:	1001843b 	.word	0x1001843b
1001110c:	00008002 	.word	0x00008002
10011110:	10018435 	.word	0x10018435
10011114:	10018437 	.word	0x10018437
10011118:	10012e31 	.word	0x10012e31
1001111c:	1001a0d4 	.word	0x1001a0d4
10011120:	10010c45 	.word	0x10010c45
10011124:	10012fad 	.word	0x10012fad
10011128:	10010cfd 	.word	0x10010cfd
1001112c:	10010c19 	.word	0x10010c19
10011130:	1c04      	adds	r4, r0, #0
10011132:	1c20      	adds	r0, r4, #0
10011134:	b00b      	add	sp, #44	; 0x2c
10011136:	bdf0      	pop	{r4, r5, r6, r7, pc}

10011138 <initi_gatt_server_module>:
10011138:	2300      	movs	r3, #0
1001113a:	4a07      	ldr	r2, [pc, #28]	; (10011158 <initi_gatt_server_module+0x20>)
1001113c:	7013      	strb	r3, [r2, #0]
1001113e:	4a07      	ldr	r2, [pc, #28]	; (1001115c <initi_gatt_server_module+0x24>)
10011140:	6013      	str	r3, [r2, #0]
10011142:	4a07      	ldr	r2, [pc, #28]	; (10011160 <initi_gatt_server_module+0x28>)
10011144:	6013      	str	r3, [r2, #0]
10011146:	4a07      	ldr	r2, [pc, #28]	; (10011164 <initi_gatt_server_module+0x2c>)
10011148:	6013      	str	r3, [r2, #0]
1001114a:	4a07      	ldr	r2, [pc, #28]	; (10011168 <initi_gatt_server_module+0x30>)
1001114c:	6013      	str	r3, [r2, #0]
1001114e:	4a07      	ldr	r2, [pc, #28]	; (1001116c <initi_gatt_server_module+0x34>)
10011150:	6013      	str	r3, [r2, #0]
10011152:	4a07      	ldr	r2, [pc, #28]	; (10011170 <initi_gatt_server_module+0x38>)
10011154:	6013      	str	r3, [r2, #0]
10011156:	4770      	bx	lr
10011158:	1001a0d4 	.word	0x1001a0d4
1001115c:	1001a0e4 	.word	0x1001a0e4
10011160:	1001a0e0 	.word	0x1001a0e0
10011164:	1001a0d0 	.word	0x1001a0d0
10011168:	1001a0dc 	.word	0x1001a0dc
1001116c:	1001a0d8 	.word	0x1001a0d8
10011170:	1001a0e8 	.word	0x1001a0e8

10011174 <db_init>:
10011174:	4b0a      	ldr	r3, [pc, #40]	; (100111a0 <db_init+0x2c>)
10011176:	4a0b      	ldr	r2, [pc, #44]	; (100111a4 <db_init+0x30>)
10011178:	6018      	str	r0, [r3, #0]
1001117a:	084b      	lsrs	r3, r1, #1
1001117c:	6013      	str	r3, [r2, #0]
1001117e:	4a0a      	ldr	r2, [pc, #40]	; (100111a8 <db_init+0x34>)
10011180:	18c3      	adds	r3, r0, r3
10011182:	6013      	str	r3, [r2, #0]
10011184:	4a09      	ldr	r2, [pc, #36]	; (100111ac <db_init+0x38>)
10011186:	1841      	adds	r1, r0, r1
10011188:	6013      	str	r3, [r2, #0]
1001118a:	2303      	movs	r3, #3
1001118c:	2200      	movs	r2, #0
1001118e:	3103      	adds	r1, #3
10011190:	4399      	bics	r1, r3
10011192:	4b07      	ldr	r3, [pc, #28]	; (100111b0 <db_init+0x3c>)
10011194:	3904      	subs	r1, #4
10011196:	6019      	str	r1, [r3, #0]
10011198:	4b06      	ldr	r3, [pc, #24]	; (100111b4 <db_init+0x40>)
1001119a:	601a      	str	r2, [r3, #0]
1001119c:	4770      	bx	lr
1001119e:	46c0      	nop			; (mov r8, r8)
100111a0:	1001a0e8 	.word	0x1001a0e8
100111a4:	1001a0e4 	.word	0x1001a0e4
100111a8:	1001a0d0 	.word	0x1001a0d0
100111ac:	1001a0dc 	.word	0x1001a0dc
100111b0:	1001a0d8 	.word	0x1001a0d8
100111b4:	1001a0e0 	.word	0x1001a0e0

100111b8 <at_ble_primary_service_define>:
100111b8:	b530      	push	{r4, r5, lr}
100111ba:	b085      	sub	sp, #20
100111bc:	ac08      	add	r4, sp, #32
100111be:	cc20      	ldmia	r4!, {r5}
100111c0:	8824      	ldrh	r4, [r4, #0]
100111c2:	9500      	str	r5, [sp, #0]
100111c4:	9401      	str	r4, [sp, #4]
100111c6:	2401      	movs	r4, #1
100111c8:	9402      	str	r4, [sp, #8]
100111ca:	4c02      	ldr	r4, [pc, #8]	; (100111d4 <at_ble_primary_service_define+0x1c>)
100111cc:	47a0      	blx	r4
100111ce:	b005      	add	sp, #20
100111d0:	bd30      	pop	{r4, r5, pc}
100111d2:	46c0      	nop			; (mov r8, r8)
100111d4:	10010d7d 	.word	0x10010d7d

100111d8 <at_ble_characteristic_value_set>:
100111d8:	b570      	push	{r4, r5, r6, lr}
100111da:	4b0b      	ldr	r3, [pc, #44]	; (10011208 <at_ble_characteristic_value_set+0x30>)
100111dc:	1c06      	adds	r6, r0, #0
100111de:	1c0c      	adds	r4, r1, #0
100111e0:	1c15      	adds	r5, r2, #0
100111e2:	4798      	blx	r3
100111e4:	2800      	cmp	r0, #0
100111e6:	d008      	beq.n	100111fa <at_ble_characteristic_value_set+0x22>
100111e8:	6880      	ldr	r0, [r0, #8]
100111ea:	2800      	cmp	r0, #0
100111ec:	d005      	beq.n	100111fa <at_ble_characteristic_value_set+0x22>
100111ee:	1c21      	adds	r1, r4, #0
100111f0:	1c2a      	adds	r2, r5, #0
100111f2:	4b06      	ldr	r3, [pc, #24]	; (1001120c <at_ble_characteristic_value_set+0x34>)
100111f4:	4798      	blx	r3
100111f6:	2000      	movs	r0, #0
100111f8:	e004      	b.n	10011204 <at_ble_characteristic_value_set+0x2c>
100111fa:	1c30      	adds	r0, r6, #0
100111fc:	1c29      	adds	r1, r5, #0
100111fe:	1c22      	adds	r2, r4, #0
10011200:	4b03      	ldr	r3, [pc, #12]	; (10011210 <at_ble_characteristic_value_set+0x38>)
10011202:	4798      	blx	r3
10011204:	bd70      	pop	{r4, r5, r6, pc}
10011206:	46c0      	nop			; (mov r8, r8)
10011208:	10010ae5 	.word	0x10010ae5
1001120c:	1001521b 	.word	0x1001521b
10011210:	10012fad 	.word	0x10012fad

10011214 <at_ble_characteristic_value_get>:
10011214:	b570      	push	{r4, r5, r6, lr}
10011216:	4b0c      	ldr	r3, [pc, #48]	; (10011248 <at_ble_characteristic_value_get+0x34>)
10011218:	1c06      	adds	r6, r0, #0
1001121a:	1c0c      	adds	r4, r1, #0
1001121c:	1c15      	adds	r5, r2, #0
1001121e:	4798      	blx	r3
10011220:	2800      	cmp	r0, #0
10011222:	d00b      	beq.n	1001123c <at_ble_characteristic_value_get+0x28>
10011224:	6883      	ldr	r3, [r0, #8]
10011226:	2b00      	cmp	r3, #0
10011228:	d008      	beq.n	1001123c <at_ble_characteristic_value_get+0x28>
1001122a:	8883      	ldrh	r3, [r0, #4]
1001122c:	802b      	strh	r3, [r5, #0]
1001122e:	8882      	ldrh	r2, [r0, #4]
10011230:	6881      	ldr	r1, [r0, #8]
10011232:	4b06      	ldr	r3, [pc, #24]	; (1001124c <at_ble_characteristic_value_get+0x38>)
10011234:	1c20      	adds	r0, r4, #0
10011236:	4798      	blx	r3
10011238:	2000      	movs	r0, #0
1001123a:	e004      	b.n	10011246 <at_ble_characteristic_value_get+0x32>
1001123c:	1c30      	adds	r0, r6, #0
1001123e:	1c29      	adds	r1, r5, #0
10011240:	1c22      	adds	r2, r4, #0
10011242:	4b03      	ldr	r3, [pc, #12]	; (10011250 <at_ble_characteristic_value_get+0x3c>)
10011244:	4798      	blx	r3
10011246:	bd70      	pop	{r4, r5, r6, pc}
10011248:	10010ae5 	.word	0x10010ae5
1001124c:	1001521b 	.word	0x1001521b
10011250:	10013039 	.word	0x10013039

10011254 <at_ble_write_authorize_reply>:
10011254:	b5f0      	push	{r4, r5, r6, r7, lr}
10011256:	b085      	sub	sp, #20
10011258:	1c04      	adds	r4, r0, #0
1001125a:	9101      	str	r1, [sp, #4]
1001125c:	2900      	cmp	r1, #0
1001125e:	d128      	bne.n	100112b2 <at_ble_write_authorize_reply+0x5e>
10011260:	8843      	ldrh	r3, [r0, #2]
10011262:	1c27      	adds	r7, r4, #0
10011264:	9300      	str	r3, [sp, #0]
10011266:	1c18      	adds	r0, r3, #0
10011268:	4b16      	ldr	r3, [pc, #88]	; (100112c4 <at_ble_write_authorize_reply+0x70>)
1001126a:	4798      	blx	r3
1001126c:	3708      	adds	r7, #8
1001126e:	2800      	cmp	r0, #0
10011270:	d009      	beq.n	10011286 <at_ble_write_authorize_reply+0x32>
10011272:	6880      	ldr	r0, [r0, #8]
10011274:	2800      	cmp	r0, #0
10011276:	d006      	beq.n	10011286 <at_ble_write_authorize_reply+0x32>
10011278:	88a3      	ldrh	r3, [r4, #4]
1001127a:	88e2      	ldrh	r2, [r4, #6]
1001127c:	18c0      	adds	r0, r0, r3
1001127e:	1c39      	adds	r1, r7, #0
10011280:	4b11      	ldr	r3, [pc, #68]	; (100112c8 <at_ble_write_authorize_reply+0x74>)
10011282:	4798      	blx	r3
10011284:	e015      	b.n	100112b2 <at_ble_write_authorize_reply+0x5e>
10011286:	ab02      	add	r3, sp, #8
10011288:	1d9e      	adds	r6, r3, #6
1001128a:	2300      	movs	r3, #0
1001128c:	4d0f      	ldr	r5, [pc, #60]	; (100112cc <at_ble_write_authorize_reply+0x78>)
1001128e:	8033      	strh	r3, [r6, #0]
10011290:	6829      	ldr	r1, [r5, #0]
10011292:	1c32      	adds	r2, r6, #0
10011294:	4b0e      	ldr	r3, [pc, #56]	; (100112d0 <at_ble_write_authorize_reply+0x7c>)
10011296:	9800      	ldr	r0, [sp, #0]
10011298:	4798      	blx	r3
1001129a:	682b      	ldr	r3, [r5, #0]
1001129c:	88a0      	ldrh	r0, [r4, #4]
1001129e:	88e2      	ldrh	r2, [r4, #6]
100112a0:	1818      	adds	r0, r3, r0
100112a2:	1c39      	adds	r1, r7, #0
100112a4:	4b08      	ldr	r3, [pc, #32]	; (100112c8 <at_ble_write_authorize_reply+0x74>)
100112a6:	4798      	blx	r3
100112a8:	8860      	ldrh	r0, [r4, #2]
100112aa:	8832      	ldrh	r2, [r6, #0]
100112ac:	6829      	ldr	r1, [r5, #0]
100112ae:	4b09      	ldr	r3, [pc, #36]	; (100112d4 <at_ble_write_authorize_reply+0x80>)
100112b0:	4798      	blx	r3
100112b2:	8860      	ldrh	r0, [r4, #2]
100112b4:	8821      	ldrh	r1, [r4, #0]
100112b6:	9a01      	ldr	r2, [sp, #4]
100112b8:	4b07      	ldr	r3, [pc, #28]	; (100112d8 <at_ble_write_authorize_reply+0x84>)
100112ba:	4798      	blx	r3
100112bc:	2000      	movs	r0, #0
100112be:	b005      	add	sp, #20
100112c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
100112c2:	46c0      	nop			; (mov r8, r8)
100112c4:	10010ae5 	.word	0x10010ae5
100112c8:	1001521b 	.word	0x1001521b
100112cc:	10018644 	.word	0x10018644
100112d0:	10011215 	.word	0x10011215
100112d4:	100111d9 	.word	0x100111d9
100112d8:	10012ab1 	.word	0x10012ab1

100112dc <gatts_handle_read_req>:
100112dc:	b538      	push	{r3, r4, r5, lr}
100112de:	1c0c      	adds	r4, r1, #0
100112e0:	4b07      	ldr	r3, [pc, #28]	; (10011300 <gatts_handle_read_req+0x24>)
100112e2:	4798      	blx	r3
100112e4:	8865      	ldrh	r5, [r4, #2]
100112e6:	4b07      	ldr	r3, [pc, #28]	; (10011304 <gatts_handle_read_req+0x28>)
100112e8:	1c28      	adds	r0, r5, #0
100112ea:	4798      	blx	r3
100112ec:	7883      	ldrb	r3, [r0, #2]
100112ee:	2026      	movs	r0, #38	; 0x26
100112f0:	07db      	lsls	r3, r3, #31
100112f2:	d404      	bmi.n	100112fe <gatts_handle_read_req+0x22>
100112f4:	8820      	ldrh	r0, [r4, #0]
100112f6:	1c29      	adds	r1, r5, #0
100112f8:	4b03      	ldr	r3, [pc, #12]	; (10011308 <gatts_handle_read_req+0x2c>)
100112fa:	4798      	blx	r3
100112fc:	203b      	movs	r0, #59	; 0x3b
100112fe:	bd38      	pop	{r3, r4, r5, pc}
10011300:	100129f5 	.word	0x100129f5
10011304:	10010ae5 	.word	0x10010ae5
10011308:	10010d4d 	.word	0x10010d4d

1001130c <gatts_handle_att_info_req>:
1001130c:	b538      	push	{r3, r4, r5, lr}
1001130e:	1c0d      	adds	r5, r1, #0
10011310:	4b0a      	ldr	r3, [pc, #40]	; (1001133c <gatts_handle_att_info_req+0x30>)
10011312:	1c14      	adds	r4, r2, #0
10011314:	4798      	blx	r3
10011316:	882d      	ldrh	r5, [r5, #0]
10011318:	4b09      	ldr	r3, [pc, #36]	; (10011340 <gatts_handle_att_info_req+0x34>)
1001131a:	1c28      	adds	r0, r5, #0
1001131c:	4798      	blx	r3
1001131e:	0a22      	lsrs	r2, r4, #8
10011320:	1c03      	adds	r3, r0, #0
10011322:	4c08      	ldr	r4, [pc, #32]	; (10011344 <gatts_handle_att_info_req+0x38>)
10011324:	b291      	uxth	r1, r2
10011326:	2800      	cmp	r0, #0
10011328:	d003      	beq.n	10011332 <gatts_handle_att_info_req+0x26>
1001132a:	8882      	ldrh	r2, [r0, #4]
1001132c:	2300      	movs	r3, #0
1001132e:	1c28      	adds	r0, r5, #0
10011330:	e001      	b.n	10011336 <gatts_handle_att_info_req+0x2a>
10011332:	1c28      	adds	r0, r5, #0
10011334:	2201      	movs	r2, #1
10011336:	47a0      	blx	r4
10011338:	203b      	movs	r0, #59	; 0x3b
1001133a:	bd38      	pop	{r3, r4, r5, pc}
1001133c:	10012a39 	.word	0x10012a39
10011340:	10010ae5 	.word	0x10010ae5
10011344:	10012af5 	.word	0x10012af5

10011348 <gatts_handle_write_req>:
10011348:	b510      	push	{r4, lr}
1001134a:	1c14      	adds	r4, r2, #0
1001134c:	4b07      	ldr	r3, [pc, #28]	; (1001136c <gatts_handle_write_req+0x24>)
1001134e:	4798      	blx	r3
10011350:	4b07      	ldr	r3, [pc, #28]	; (10011370 <gatts_handle_write_req+0x28>)
10011352:	8860      	ldrh	r0, [r4, #2]
10011354:	4798      	blx	r3
10011356:	2302      	movs	r3, #2
10011358:	7881      	ldrb	r1, [r0, #2]
1001135a:	2022      	movs	r0, #34	; 0x22
1001135c:	4019      	ands	r1, r3
1001135e:	d103      	bne.n	10011368 <gatts_handle_write_req+0x20>
10011360:	1c20      	adds	r0, r4, #0
10011362:	4b04      	ldr	r3, [pc, #16]	; (10011374 <gatts_handle_write_req+0x2c>)
10011364:	4798      	blx	r3
10011366:	201f      	movs	r0, #31
10011368:	bd10      	pop	{r4, pc}
1001136a:	46c0      	nop			; (mov r8, r8)
1001136c:	10012a01 	.word	0x10012a01
10011370:	10010ae5 	.word	0x10010ae5
10011374:	10011255 	.word	0x10011255

10011378 <at_ble_notification_send>:
10011378:	b5f0      	push	{r4, r5, r6, r7, lr}
1001137a:	4d17      	ldr	r5, [pc, #92]	; (100113d8 <at_ble_notification_send+0x60>)
1001137c:	4c17      	ldr	r4, [pc, #92]	; (100113dc <at_ble_notification_send+0x64>)
1001137e:	682a      	ldr	r2, [r5, #0]
10011380:	44a5      	add	sp, r4
10011382:	23d2      	movs	r3, #210	; 0xd2
10011384:	2a04      	cmp	r2, #4
10011386:	d822      	bhi.n	100113ce <at_ble_notification_send+0x56>
10011388:	1c06      	adds	r6, r0, #0
1001138a:	4b15      	ldr	r3, [pc, #84]	; (100113e0 <at_ble_notification_send+0x68>)
1001138c:	1c08      	adds	r0, r1, #0
1001138e:	1c0c      	adds	r4, r1, #0
10011390:	4798      	blx	r3
10011392:	2800      	cmp	r0, #0
10011394:	d008      	beq.n	100113a8 <at_ble_notification_send+0x30>
10011396:	6883      	ldr	r3, [r0, #8]
10011398:	2b00      	cmp	r3, #0
1001139a:	d005      	beq.n	100113a8 <at_ble_notification_send+0x30>
1001139c:	8882      	ldrh	r2, [r0, #4]
1001139e:	1c21      	adds	r1, r4, #0
100113a0:	9200      	str	r2, [sp, #0]
100113a2:	2012      	movs	r0, #18
100113a4:	1c32      	adds	r2, r6, #0
100113a6:	e00c      	b.n	100113c2 <at_ble_notification_send+0x4a>
100113a8:	270e      	movs	r7, #14
100113aa:	446f      	add	r7, sp
100113ac:	1c39      	adds	r1, r7, #0
100113ae:	aa04      	add	r2, sp, #16
100113b0:	4b0c      	ldr	r3, [pc, #48]	; (100113e4 <at_ble_notification_send+0x6c>)
100113b2:	1c20      	adds	r0, r4, #0
100113b4:	4798      	blx	r3
100113b6:	2012      	movs	r0, #18
100113b8:	1c21      	adds	r1, r4, #0
100113ba:	1c32      	adds	r2, r6, #0
100113bc:	883b      	ldrh	r3, [r7, #0]
100113be:	9300      	str	r3, [sp, #0]
100113c0:	ab04      	add	r3, sp, #16
100113c2:	4c09      	ldr	r4, [pc, #36]	; (100113e8 <at_ble_notification_send+0x70>)
100113c4:	47a0      	blx	r4
100113c6:	682b      	ldr	r3, [r5, #0]
100113c8:	3301      	adds	r3, #1
100113ca:	602b      	str	r3, [r5, #0]
100113cc:	2300      	movs	r3, #0
100113ce:	1c18      	adds	r0, r3, #0
100113d0:	2385      	movs	r3, #133	; 0x85
100113d2:	009b      	lsls	r3, r3, #2
100113d4:	449d      	add	sp, r3
100113d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
100113d8:	1001a174 	.word	0x1001a174
100113dc:	fffffdec 	.word	0xfffffdec
100113e0:	10010ae5 	.word	0x10010ae5
100113e4:	10013039 	.word	0x10013039
100113e8:	10012b3d 	.word	0x10012b3d

100113ec <init_l2cc_task_module>:
100113ec:	220a      	movs	r2, #10
100113ee:	4b01      	ldr	r3, [pc, #4]	; (100113f4 <init_l2cc_task_module+0x8>)
100113f0:	701a      	strb	r2, [r3, #0]
100113f2:	4770      	bx	lr
100113f4:	10018640 	.word	0x10018640

100113f8 <l2cc_data_send_rsp_handler>:
100113f8:	b510      	push	{r4, lr}
100113fa:	7802      	ldrb	r2, [r0, #0]
100113fc:	700a      	strb	r2, [r1, #0]
100113fe:	7883      	ldrb	r3, [r0, #2]
10011400:	7844      	ldrb	r4, [r0, #1]
10011402:	021b      	lsls	r3, r3, #8
10011404:	4323      	orrs	r3, r4
10011406:	804b      	strh	r3, [r1, #2]
10011408:	7903      	ldrb	r3, [r0, #4]
1001140a:	78c0      	ldrb	r0, [r0, #3]
1001140c:	021b      	lsls	r3, r3, #8
1001140e:	4303      	orrs	r3, r0
10011410:	808b      	strh	r3, [r1, #4]
10011412:	2a00      	cmp	r2, #0
10011414:	d103      	bne.n	1001141e <l2cc_data_send_rsp_handler+0x26>
10011416:	4a02      	ldr	r2, [pc, #8]	; (10011420 <l2cc_data_send_rsp_handler+0x28>)
10011418:	7813      	ldrb	r3, [r2, #0]
1001141a:	3301      	adds	r3, #1
1001141c:	7013      	strb	r3, [r2, #0]
1001141e:	bd10      	pop	{r4, pc}
10011420:	10018640 	.word	0x10018640

10011424 <l2cc_data_received_handler>:
10011424:	b508      	push	{r3, lr}
10011426:	1c03      	adds	r3, r0, #0
10011428:	7842      	ldrb	r2, [r0, #1]
1001142a:	7800      	ldrb	r0, [r0, #0]
1001142c:	0212      	lsls	r2, r2, #8
1001142e:	4302      	orrs	r2, r0
10011430:	800a      	strh	r2, [r1, #0]
10011432:	78da      	ldrb	r2, [r3, #3]
10011434:	7898      	ldrb	r0, [r3, #2]
10011436:	0212      	lsls	r2, r2, #8
10011438:	4302      	orrs	r2, r0
1001143a:	804a      	strh	r2, [r1, #2]
1001143c:	795a      	ldrb	r2, [r3, #5]
1001143e:	7918      	ldrb	r0, [r3, #4]
10011440:	0212      	lsls	r2, r2, #8
10011442:	4302      	orrs	r2, r0
10011444:	808a      	strh	r2, [r1, #4]
10011446:	1d88      	adds	r0, r1, #6
10011448:	1d99      	adds	r1, r3, #6
1001144a:	4b01      	ldr	r3, [pc, #4]	; (10011450 <l2cc_data_received_handler+0x2c>)
1001144c:	4798      	blx	r3
1001144e:	bd08      	pop	{r3, pc}
10011450:	1001521b 	.word	0x1001521b

10011454 <at_ble_authenticate>:
10011454:	b5f0      	push	{r4, r5, r6, r7, lr}
10011456:	1c0c      	adds	r4, r1, #0
10011458:	211f      	movs	r1, #31
1001145a:	b08b      	sub	sp, #44	; 0x2c
1001145c:	9307      	str	r3, [sp, #28]
1001145e:	ab02      	add	r3, sp, #8
10011460:	18c9      	adds	r1, r1, r3
10011462:	230f      	movs	r3, #15
10011464:	700b      	strb	r3, [r1, #0]
10011466:	4b40      	ldr	r3, [pc, #256]	; (10011568 <at_ble_authenticate+0x114>)
10011468:	1c05      	adds	r5, r0, #0
1001146a:	1c16      	adds	r6, r2, #0
1001146c:	4798      	blx	r3
1001146e:	1c07      	adds	r7, r0, #0
10011470:	2001      	movs	r0, #1
10011472:	2f07      	cmp	r7, #7
10011474:	d875      	bhi.n	10011562 <at_ble_authenticate+0x10e>
10011476:	2c00      	cmp	r4, #0
10011478:	d113      	bne.n	100114a2 <at_ble_authenticate+0x4e>
1001147a:	2312      	movs	r3, #18
1001147c:	435f      	muls	r7, r3
1001147e:	4b3b      	ldr	r3, [pc, #236]	; (1001156c <at_ble_authenticate+0x118>)
10011480:	5cfb      	ldrb	r3, [r7, r3]
10011482:	4283      	cmp	r3, r0
10011484:	d001      	beq.n	1001148a <at_ble_authenticate+0x36>
10011486:	20cf      	movs	r0, #207	; 0xcf
10011488:	e06b      	b.n	10011562 <at_ble_authenticate+0x10e>
1001148a:	9504      	str	r5, [sp, #16]
1001148c:	9400      	str	r4, [sp, #0]
1001148e:	9401      	str	r4, [sp, #4]
10011490:	9402      	str	r4, [sp, #8]
10011492:	9403      	str	r4, [sp, #12]
10011494:	1c20      	adds	r0, r4, #0
10011496:	1c21      	adds	r1, r4, #0
10011498:	1c22      	adds	r2, r4, #0
1001149a:	1c23      	adds	r3, r4, #0
1001149c:	4d34      	ldr	r5, [pc, #208]	; (10011570 <at_ble_authenticate+0x11c>)
1001149e:	47a8      	blx	r5
100114a0:	e05e      	b.n	10011560 <at_ble_authenticate+0x10c>
100114a2:	7922      	ldrb	r2, [r4, #4]
100114a4:	2a06      	cmp	r2, #6
100114a6:	d9ee      	bls.n	10011486 <at_ble_authenticate+0x32>
100114a8:	7963      	ldrb	r3, [r4, #5]
100114aa:	2b10      	cmp	r3, #16
100114ac:	d8eb      	bhi.n	10011486 <at_ble_authenticate+0x32>
100114ae:	429a      	cmp	r2, r3
100114b0:	d8e9      	bhi.n	10011486 <at_ble_authenticate+0x32>
100114b2:	7a23      	ldrb	r3, [r4, #8]
100114b4:	2b04      	cmp	r3, #4
100114b6:	d8e6      	bhi.n	10011486 <at_ble_authenticate+0x32>
100114b8:	79a3      	ldrb	r3, [r4, #6]
100114ba:	2b07      	cmp	r3, #7
100114bc:	d8e3      	bhi.n	10011486 <at_ble_authenticate+0x32>
100114be:	79e3      	ldrb	r3, [r4, #7]
100114c0:	2b07      	cmp	r3, #7
100114c2:	d8e0      	bhi.n	10011486 <at_ble_authenticate+0x32>
100114c4:	78a3      	ldrb	r3, [r4, #2]
100114c6:	2b00      	cmp	r3, #0
100114c8:	d006      	beq.n	100114d8 <at_ble_authenticate+0x84>
100114ca:	2e00      	cmp	r6, #0
100114cc:	d0db      	beq.n	10011486 <at_ble_authenticate+0x32>
100114ce:	4829      	ldr	r0, [pc, #164]	; (10011574 <at_ble_authenticate+0x120>)
100114d0:	1c31      	adds	r1, r6, #0
100114d2:	221c      	movs	r2, #28
100114d4:	4b28      	ldr	r3, [pc, #160]	; (10011578 <at_ble_authenticate+0x124>)
100114d6:	4798      	blx	r3
100114d8:	9b07      	ldr	r3, [sp, #28]
100114da:	2b00      	cmp	r3, #0
100114dc:	d005      	beq.n	100114ea <at_ble_authenticate+0x96>
100114de:	4827      	ldr	r0, [pc, #156]	; (1001157c <at_ble_authenticate+0x128>)
100114e0:	1c19      	adds	r1, r3, #0
100114e2:	309a      	adds	r0, #154	; 0x9a
100114e4:	2210      	movs	r2, #16
100114e6:	4b24      	ldr	r3, [pc, #144]	; (10011578 <at_ble_authenticate+0x124>)
100114e8:	4798      	blx	r3
100114ea:	7863      	ldrb	r3, [r4, #1]
100114ec:	78a2      	ldrb	r2, [r4, #2]
100114ee:	009b      	lsls	r3, r3, #2
100114f0:	4313      	orrs	r3, r2
100114f2:	2212      	movs	r2, #18
100114f4:	4357      	muls	r7, r2
100114f6:	4a1d      	ldr	r2, [pc, #116]	; (1001156c <at_ble_authenticate+0x118>)
100114f8:	b2db      	uxtb	r3, r3
100114fa:	5cba      	ldrb	r2, [r7, r2]
100114fc:	2a00      	cmp	r2, #0
100114fe:	d116      	bne.n	1001152e <at_ble_authenticate+0xda>
10011500:	79a0      	ldrb	r0, [r4, #6]
10011502:	0742      	lsls	r2, r0, #29
10011504:	d502      	bpl.n	1001150c <at_ble_authenticate+0xb8>
10011506:	9a07      	ldr	r2, [sp, #28]
10011508:	2a00      	cmp	r2, #0
1001150a:	d0bc      	beq.n	10011486 <at_ble_authenticate+0x32>
1001150c:	07c2      	lsls	r2, r0, #31
1001150e:	d501      	bpl.n	10011514 <at_ble_authenticate+0xc0>
10011510:	2e00      	cmp	r6, #0
10011512:	d0b8      	beq.n	10011486 <at_ble_authenticate+0x32>
10011514:	7966      	ldrb	r6, [r4, #5]
10011516:	7821      	ldrb	r1, [r4, #0]
10011518:	78e2      	ldrb	r2, [r4, #3]
1001151a:	9600      	str	r6, [sp, #0]
1001151c:	9001      	str	r0, [sp, #4]
1001151e:	79e0      	ldrb	r0, [r4, #7]
10011520:	9002      	str	r0, [sp, #8]
10011522:	7a20      	ldrb	r0, [r4, #8]
10011524:	4c16      	ldr	r4, [pc, #88]	; (10011580 <at_ble_authenticate+0x12c>)
10011526:	9003      	str	r0, [sp, #12]
10011528:	1c28      	adds	r0, r5, #0
1001152a:	47a0      	blx	r4
1001152c:	e018      	b.n	10011560 <at_ble_authenticate+0x10c>
1001152e:	2a01      	cmp	r2, #1
10011530:	d1a9      	bne.n	10011486 <at_ble_authenticate+0x32>
10011532:	79e0      	ldrb	r0, [r4, #7]
10011534:	0742      	lsls	r2, r0, #29
10011536:	d502      	bpl.n	1001153e <at_ble_authenticate+0xea>
10011538:	9a07      	ldr	r2, [sp, #28]
1001153a:	2a00      	cmp	r2, #0
1001153c:	d0a3      	beq.n	10011486 <at_ble_authenticate+0x32>
1001153e:	07c2      	lsls	r2, r0, #31
10011540:	d501      	bpl.n	10011546 <at_ble_authenticate+0xf2>
10011542:	2e00      	cmp	r6, #0
10011544:	d09f      	beq.n	10011486 <at_ble_authenticate+0x32>
10011546:	7966      	ldrb	r6, [r4, #5]
10011548:	7821      	ldrb	r1, [r4, #0]
1001154a:	78e2      	ldrb	r2, [r4, #3]
1001154c:	9600      	str	r6, [sp, #0]
1001154e:	79a6      	ldrb	r6, [r4, #6]
10011550:	9002      	str	r0, [sp, #8]
10011552:	9601      	str	r6, [sp, #4]
10011554:	7a20      	ldrb	r0, [r4, #8]
10011556:	9504      	str	r5, [sp, #16]
10011558:	9003      	str	r0, [sp, #12]
1001155a:	4c05      	ldr	r4, [pc, #20]	; (10011570 <at_ble_authenticate+0x11c>)
1001155c:	2001      	movs	r0, #1
1001155e:	47a0      	blx	r4
10011560:	2000      	movs	r0, #0
10011562:	b00b      	add	sp, #44	; 0x2c
10011564:	bdf0      	pop	{r4, r5, r6, r7, pc}
10011566:	46c0      	nop			; (mov r8, r8)
10011568:	10011955 	.word	0x10011955
1001156c:	1001afda 	.word	0x1001afda
10011570:	10011ec5 	.word	0x10011ec5
10011574:	1001b0e8 	.word	0x1001b0e8
10011578:	1001521b 	.word	0x1001521b
1001157c:	1001b06a 	.word	0x1001b06a
10011580:	10011ca5 	.word	0x10011ca5

10011584 <at_ble_pair_key_reply>:
10011584:	b5f0      	push	{r4, r5, r6, r7, lr}
10011586:	b085      	sub	sp, #20
10011588:	1c05      	adds	r5, r0, #0
1001158a:	1c0c      	adds	r4, r1, #0
1001158c:	1c16      	adds	r6, r2, #0
1001158e:	2100      	movs	r1, #0
10011590:	4668      	mov	r0, sp
10011592:	2210      	movs	r2, #16
10011594:	4b18      	ldr	r3, [pc, #96]	; (100115f8 <at_ble_pair_key_reply+0x74>)
10011596:	4798      	blx	r3
10011598:	2101      	movs	r1, #1
1001159a:	2e00      	cmp	r6, #0
1001159c:	d101      	bne.n	100115a2 <at_ble_pair_key_reply+0x1e>
1001159e:	1c31      	adds	r1, r6, #0
100115a0:	466e      	mov	r6, sp
100115a2:	2c00      	cmp	r4, #0
100115a4:	d116      	bne.n	100115d4 <at_ble_pair_key_reply+0x50>
100115a6:	2701      	movs	r7, #1
100115a8:	1c23      	adds	r3, r4, #0
100115aa:	1d70      	adds	r0, r6, #5
100115ac:	3e01      	subs	r6, #1
100115ae:	7802      	ldrb	r2, [r0, #0]
100115b0:	3801      	subs	r0, #1
100115b2:	3a30      	subs	r2, #48	; 0x30
100115b4:	437a      	muls	r2, r7
100115b6:	189b      	adds	r3, r3, r2
100115b8:	220a      	movs	r2, #10
100115ba:	4357      	muls	r7, r2
100115bc:	42b0      	cmp	r0, r6
100115be:	d1f6      	bne.n	100115ae <at_ble_pair_key_reply+0x2a>
100115c0:	466a      	mov	r2, sp
100115c2:	4668      	mov	r0, sp
100115c4:	7013      	strb	r3, [r2, #0]
100115c6:	0a1a      	lsrs	r2, r3, #8
100115c8:	7042      	strb	r2, [r0, #1]
100115ca:	0c1a      	lsrs	r2, r3, #16
100115cc:	0e1b      	lsrs	r3, r3, #24
100115ce:	7082      	strb	r2, [r0, #2]
100115d0:	70c3      	strb	r3, [r0, #3]
100115d2:	e009      	b.n	100115e8 <at_ble_pair_key_reply+0x64>
100115d4:	20cf      	movs	r0, #207	; 0xcf
100115d6:	2c01      	cmp	r4, #1
100115d8:	d10c      	bne.n	100115f4 <at_ble_pair_key_reply+0x70>
100115da:	2300      	movs	r3, #0
100115dc:	4668      	mov	r0, sp
100115de:	5cf2      	ldrb	r2, [r6, r3]
100115e0:	54c2      	strb	r2, [r0, r3]
100115e2:	3301      	adds	r3, #1
100115e4:	2b10      	cmp	r3, #16
100115e6:	d1f9      	bne.n	100115dc <at_ble_pair_key_reply+0x58>
100115e8:	2004      	movs	r0, #4
100115ea:	466a      	mov	r2, sp
100115ec:	1c2b      	adds	r3, r5, #0
100115ee:	4c03      	ldr	r4, [pc, #12]	; (100115fc <at_ble_pair_key_reply+0x78>)
100115f0:	47a0      	blx	r4
100115f2:	2000      	movs	r0, #0
100115f4:	b005      	add	sp, #20
100115f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
100115f8:	1001522d 	.word	0x1001522d
100115fc:	10011f41 	.word	0x10011f41

10011600 <at_ble_send_slave_sec_request>:
10011600:	b570      	push	{r4, r5, r6, lr}
10011602:	4b0c      	ldr	r3, [pc, #48]	; (10011634 <at_ble_send_slave_sec_request+0x34>)
10011604:	1c0e      	adds	r6, r1, #0
10011606:	2100      	movs	r1, #0
10011608:	1c05      	adds	r5, r0, #0
1001160a:	1c14      	adds	r4, r2, #0
1001160c:	4798      	blx	r3
1001160e:	2301      	movs	r3, #1
10011610:	2807      	cmp	r0, #7
10011612:	d80d      	bhi.n	10011630 <at_ble_send_slave_sec_request+0x30>
10011614:	3311      	adds	r3, #17
10011616:	4358      	muls	r0, r3
10011618:	4b07      	ldr	r3, [pc, #28]	; (10011638 <at_ble_send_slave_sec_request+0x38>)
1001161a:	5cc2      	ldrb	r2, [r0, r3]
1001161c:	23e0      	movs	r3, #224	; 0xe0
1001161e:	2a01      	cmp	r2, #1
10011620:	d106      	bne.n	10011630 <at_ble_send_slave_sec_request+0x30>
10011622:	00b1      	lsls	r1, r6, #2
10011624:	430c      	orrs	r4, r1
10011626:	4b05      	ldr	r3, [pc, #20]	; (1001163c <at_ble_send_slave_sec_request+0x3c>)
10011628:	b2e1      	uxtb	r1, r4
1001162a:	1c28      	adds	r0, r5, #0
1001162c:	4798      	blx	r3
1001162e:	2300      	movs	r3, #0
10011630:	1c18      	adds	r0, r3, #0
10011632:	bd70      	pop	{r4, r5, r6, pc}
10011634:	10011955 	.word	0x10011955
10011638:	1001afda 	.word	0x1001afda
1001163c:	10011f91 	.word	0x10011f91

10011640 <at_ble_encryption_start>:
10011640:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10011642:	23cf      	movs	r3, #207	; 0xcf
10011644:	2900      	cmp	r1, #0
10011646:	d02b      	beq.n	100116a0 <at_ble_encryption_start+0x60>
10011648:	2a05      	cmp	r2, #5
1001164a:	d829      	bhi.n	100116a0 <at_ble_encryption_start+0x60>
1001164c:	2701      	movs	r7, #1
1001164e:	1c3d      	adds	r5, r7, #0
10011650:	2433      	movs	r4, #51	; 0x33
10011652:	4095      	lsls	r5, r2
10011654:	4225      	tst	r5, r4
10011656:	d023      	beq.n	100116a0 <at_ble_encryption_start+0x60>
10011658:	7e8c      	ldrb	r4, [r1, #26]
1001165a:	3c07      	subs	r4, #7
1001165c:	2c09      	cmp	r4, #9
1001165e:	d81f      	bhi.n	100116a0 <at_ble_encryption_start+0x60>
10011660:	4b10      	ldr	r3, [pc, #64]	; (100116a4 <at_ble_encryption_start+0x64>)
10011662:	1c0c      	adds	r4, r1, #0
10011664:	2100      	movs	r1, #0
10011666:	1c15      	adds	r5, r2, #0
10011668:	1c06      	adds	r6, r0, #0
1001166a:	4798      	blx	r3
1001166c:	1c3b      	adds	r3, r7, #0
1001166e:	2807      	cmp	r0, #7
10011670:	d816      	bhi.n	100116a0 <at_ble_encryption_start+0x60>
10011672:	2312      	movs	r3, #18
10011674:	4358      	muls	r0, r3
10011676:	4b0c      	ldr	r3, [pc, #48]	; (100116a8 <at_ble_encryption_start+0x68>)
10011678:	5cc7      	ldrb	r7, [r0, r3]
1001167a:	23e0      	movs	r3, #224	; 0xe0
1001167c:	2f00      	cmp	r7, #0
1001167e:	d10f      	bne.n	100116a0 <at_ble_encryption_start+0x60>
10011680:	1c21      	adds	r1, r4, #0
10011682:	221c      	movs	r2, #28
10011684:	4b09      	ldr	r3, [pc, #36]	; (100116ac <at_ble_encryption_start+0x6c>)
10011686:	480a      	ldr	r0, [pc, #40]	; (100116b0 <at_ble_encryption_start+0x70>)
10011688:	4798      	blx	r3
1001168a:	1c23      	adds	r3, r4, #0
1001168c:	7ea1      	ldrb	r1, [r4, #26]
1001168e:	8a22      	ldrh	r2, [r4, #16]
10011690:	3312      	adds	r3, #18
10011692:	9100      	str	r1, [sp, #0]
10011694:	9501      	str	r5, [sp, #4]
10011696:	1c21      	adds	r1, r4, #0
10011698:	1c30      	adds	r0, r6, #0
1001169a:	4c06      	ldr	r4, [pc, #24]	; (100116b4 <at_ble_encryption_start+0x74>)
1001169c:	47a0      	blx	r4
1001169e:	1c3b      	adds	r3, r7, #0
100116a0:	1c18      	adds	r0, r3, #0
100116a2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
100116a4:	10011955 	.word	0x10011955
100116a8:	1001afda 	.word	0x1001afda
100116ac:	1001521b 	.word	0x1001521b
100116b0:	1001b0e8 	.word	0x1001b0e8
100116b4:	10011fd1 	.word	0x10011fd1

100116b8 <at_ble_encryption_request_reply>:
100116b8:	b573      	push	{r0, r1, r4, r5, r6, lr}
100116ba:	24cf      	movs	r4, #207	; 0xcf
100116bc:	2b00      	cmp	r3, #0
100116be:	d011      	beq.n	100116e4 <at_ble_encryption_request_reply+0x2c>
100116c0:	2a00      	cmp	r2, #0
100116c2:	d00a      	beq.n	100116da <at_ble_encryption_request_reply+0x22>
100116c4:	2905      	cmp	r1, #5
100116c6:	d80d      	bhi.n	100116e4 <at_ble_encryption_request_reply+0x2c>
100116c8:	2501      	movs	r5, #1
100116ca:	2633      	movs	r6, #51	; 0x33
100116cc:	408d      	lsls	r5, r1
100116ce:	4235      	tst	r5, r6
100116d0:	d008      	beq.n	100116e4 <at_ble_encryption_request_reply+0x2c>
100116d2:	7e9d      	ldrb	r5, [r3, #26]
100116d4:	3d07      	subs	r5, #7
100116d6:	2d09      	cmp	r5, #9
100116d8:	d804      	bhi.n	100116e4 <at_ble_encryption_request_reply+0x2c>
100116da:	7e9c      	ldrb	r4, [r3, #26]
100116dc:	9400      	str	r4, [sp, #0]
100116de:	4c02      	ldr	r4, [pc, #8]	; (100116e8 <at_ble_encryption_request_reply+0x30>)
100116e0:	47a0      	blx	r4
100116e2:	2400      	movs	r4, #0
100116e4:	1c20      	adds	r0, r4, #0
100116e6:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
100116e8:	1001208d 	.word	0x1001208d

100116ec <rx_callback>:
100116ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
100116ee:	8883      	ldrh	r3, [r0, #4]
100116f0:	1c01      	adds	r1, r0, #0
100116f2:	9301      	str	r3, [sp, #4]
100116f4:	88c5      	ldrh	r5, [r0, #6]
100116f6:	8806      	ldrh	r6, [r0, #0]
100116f8:	2d00      	cmp	r5, #0
100116fa:	d10f      	bne.n	1001171c <rx_callback+0x30>
100116fc:	1c19      	adds	r1, r3, #0
100116fe:	1c30      	adds	r0, r6, #0
10011700:	4b19      	ldr	r3, [pc, #100]	; (10011768 <rx_callback+0x7c>)
10011702:	1c2a      	adds	r2, r5, #0
10011704:	4798      	blx	r3
10011706:	1e03      	subs	r3, r0, #0
10011708:	d105      	bne.n	10011716 <rx_callback+0x2a>
1001170a:	1c30      	adds	r0, r6, #0
1001170c:	9901      	ldr	r1, [sp, #4]
1001170e:	1c1a      	adds	r2, r3, #0
10011710:	4c16      	ldr	r4, [pc, #88]	; (1001176c <rx_callback+0x80>)
10011712:	47a0      	blx	r4
10011714:	e027      	b.n	10011766 <rx_callback+0x7a>
10011716:	4b16      	ldr	r3, [pc, #88]	; (10011770 <rx_callback+0x84>)
10011718:	4798      	blx	r3
1001171a:	e024      	b.n	10011766 <rx_callback+0x7a>
1001171c:	4c15      	ldr	r4, [pc, #84]	; (10011774 <rx_callback+0x88>)
1001171e:	4a16      	ldr	r2, [pc, #88]	; (10011778 <rx_callback+0x8c>)
10011720:	6823      	ldr	r3, [r4, #0]
10011722:	6812      	ldr	r2, [r2, #0]
10011724:	18eb      	adds	r3, r5, r3
10011726:	4293      	cmp	r3, r2
10011728:	d901      	bls.n	1001172e <rx_callback+0x42>
1001172a:	2300      	movs	r3, #0
1001172c:	6023      	str	r3, [r4, #0]
1001172e:	4f13      	ldr	r7, [pc, #76]	; (1001177c <rx_callback+0x90>)
10011730:	6822      	ldr	r2, [r4, #0]
10011732:	683b      	ldr	r3, [r7, #0]
10011734:	3108      	adds	r1, #8
10011736:	1898      	adds	r0, r3, r2
10011738:	1c2a      	adds	r2, r5, #0
1001173a:	4b11      	ldr	r3, [pc, #68]	; (10011780 <rx_callback+0x94>)
1001173c:	4798      	blx	r3
1001173e:	683b      	ldr	r3, [r7, #0]
10011740:	6822      	ldr	r2, [r4, #0]
10011742:	1c30      	adds	r0, r6, #0
10011744:	189a      	adds	r2, r3, r2
10011746:	9901      	ldr	r1, [sp, #4]
10011748:	4b07      	ldr	r3, [pc, #28]	; (10011768 <rx_callback+0x7c>)
1001174a:	4798      	blx	r3
1001174c:	2800      	cmp	r0, #0
1001174e:	d1e2      	bne.n	10011716 <rx_callback+0x2a>
10011750:	6823      	ldr	r3, [r4, #0]
10011752:	683a      	ldr	r2, [r7, #0]
10011754:	1c30      	adds	r0, r6, #0
10011756:	18d2      	adds	r2, r2, r3
10011758:	9901      	ldr	r1, [sp, #4]
1001175a:	1c2b      	adds	r3, r5, #0
1001175c:	4e03      	ldr	r6, [pc, #12]	; (1001176c <rx_callback+0x80>)
1001175e:	47b0      	blx	r6
10011760:	6823      	ldr	r3, [r4, #0]
10011762:	18ed      	adds	r5, r5, r3
10011764:	6025      	str	r5, [r4, #0]
10011766:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
10011768:	1000fd81 	.word	0x1000fd81
1001176c:	1000fcf9 	.word	0x1000fcf9
10011770:	1000f699 	.word	0x1000f699
10011774:	1001b144 	.word	0x1001b144
10011778:	1001a0f0 	.word	0x1001a0f0
1001177c:	1001a0ec 	.word	0x1001a0ec
10011780:	1001521b 	.word	0x1001521b

10011784 <interface_send>:
10011784:	b508      	push	{r3, lr}
10011786:	4b02      	ldr	r3, [pc, #8]	; (10011790 <interface_send+0xc>)
10011788:	4798      	blx	r3
1001178a:	2000      	movs	r0, #0
1001178c:	bd08      	pop	{r3, pc}
1001178e:	46c0      	nop			; (mov r8, r8)
10011790:	1000f391 	.word	0x1000f391

10011794 <interface_init>:
10011794:	2280      	movs	r2, #128	; 0x80
10011796:	b510      	push	{r4, lr}
10011798:	2100      	movs	r1, #0
1001179a:	1c04      	adds	r4, r0, #0
1001179c:	0092      	lsls	r2, r2, #2
1001179e:	4b08      	ldr	r3, [pc, #32]	; (100117c0 <interface_init+0x2c>)
100117a0:	4808      	ldr	r0, [pc, #32]	; (100117c4 <interface_init+0x30>)
100117a2:	4798      	blx	r3
100117a4:	2200      	movs	r2, #0
100117a6:	4b08      	ldr	r3, [pc, #32]	; (100117c8 <interface_init+0x34>)
100117a8:	601a      	str	r2, [r3, #0]
100117aa:	4a08      	ldr	r2, [pc, #32]	; (100117cc <interface_init+0x38>)
100117ac:	4b08      	ldr	r3, [pc, #32]	; (100117d0 <interface_init+0x3c>)
100117ae:	601a      	str	r2, [r3, #0]
100117b0:	4b08      	ldr	r3, [pc, #32]	; (100117d4 <interface_init+0x40>)
100117b2:	6922      	ldr	r2, [r4, #16]
100117b4:	601a      	str	r2, [r3, #0]
100117b6:	6962      	ldr	r2, [r4, #20]
100117b8:	4b07      	ldr	r3, [pc, #28]	; (100117d8 <interface_init+0x44>)
100117ba:	601a      	str	r2, [r3, #0]
100117bc:	bd10      	pop	{r4, pc}
100117be:	46c0      	nop			; (mov r8, r8)
100117c0:	1001522d 	.word	0x1001522d
100117c4:	1001b348 	.word	0x1001b348
100117c8:	1001b144 	.word	0x1001b144
100117cc:	1001b148 	.word	0x1001b148
100117d0:	10018644 	.word	0x10018644
100117d4:	1001a0ec 	.word	0x1001a0ec
100117d8:	1001a0f0 	.word	0x1001a0f0

100117dc <platform_cmd_cmpl_signal>:
100117dc:	2201      	movs	r2, #1
100117de:	4b01      	ldr	r3, [pc, #4]	; (100117e4 <platform_cmd_cmpl_signal+0x8>)
100117e0:	601a      	str	r2, [r3, #0]
100117e2:	4770      	bx	lr
100117e4:	1001a0f4 	.word	0x1001a0f4

100117e8 <platform_cmd_cmpl_wait>:
100117e8:	b510      	push	{r4, lr}
100117ea:	1c04      	adds	r4, r0, #0
100117ec:	4b07      	ldr	r3, [pc, #28]	; (1001180c <platform_cmd_cmpl_wait+0x24>)
100117ee:	681a      	ldr	r2, [r3, #0]
100117f0:	2a01      	cmp	r2, #1
100117f2:	d003      	beq.n	100117fc <platform_cmd_cmpl_wait+0x14>
100117f4:	4b06      	ldr	r3, [pc, #24]	; (10011810 <platform_cmd_cmpl_wait+0x28>)
100117f6:	2000      	movs	r0, #0
100117f8:	4798      	blx	r3
100117fa:	e7f7      	b.n	100117ec <platform_cmd_cmpl_wait+0x4>
100117fc:	6819      	ldr	r1, [r3, #0]
100117fe:	2901      	cmp	r1, #1
10011800:	d102      	bne.n	10011808 <platform_cmd_cmpl_wait+0x20>
10011802:	2200      	movs	r2, #0
10011804:	601a      	str	r2, [r3, #0]
10011806:	e000      	b.n	1001180a <platform_cmd_cmpl_wait+0x22>
10011808:	7022      	strb	r2, [r4, #0]
1001180a:	bd10      	pop	{r4, pc}
1001180c:	1001a0f4 	.word	0x1001a0f4
10011810:	1000f421 	.word	0x1000f421

10011814 <start_timer>:
10011814:	4770      	bx	lr

10011816 <stop_timer>:
10011816:	4770      	bx	lr

10011818 <dbg_le_set_bd_addr_req_handler>:
10011818:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1001181a:	466b      	mov	r3, sp
1001181c:	1dde      	adds	r6, r3, #7
1001181e:	2300      	movs	r3, #0
10011820:	7033      	strb	r3, [r6, #0]
10011822:	230f      	movs	r3, #15
10011824:	4c13      	ldr	r4, [pc, #76]	; (10011874 <dbg_le_set_bd_addr_req_handler+0x5c>)
10011826:	2703      	movs	r7, #3
10011828:	7023      	strb	r3, [r4, #0]
1001182a:	2300      	movs	r3, #0
1001182c:	70e3      	strb	r3, [r4, #3]
1001182e:	4b12      	ldr	r3, [pc, #72]	; (10011878 <dbg_le_set_bd_addr_req_handler+0x60>)
10011830:	1c01      	adds	r1, r0, #0
10011832:	881a      	ldrh	r2, [r3, #0]
10011834:	881b      	ldrh	r3, [r3, #0]
10011836:	7122      	strb	r2, [r4, #4]
10011838:	0a1b      	lsrs	r3, r3, #8
1001183a:	2206      	movs	r2, #6
1001183c:	7163      	strb	r3, [r4, #5]
1001183e:	480f      	ldr	r0, [pc, #60]	; (1001187c <dbg_le_set_bd_addr_req_handler+0x64>)
10011840:	4b0f      	ldr	r3, [pc, #60]	; (10011880 <dbg_le_set_bd_addr_req_handler+0x68>)
10011842:	7067      	strb	r7, [r4, #1]
10011844:	70a7      	strb	r7, [r4, #2]
10011846:	4798      	blx	r3
10011848:	4d0e      	ldr	r5, [pc, #56]	; (10011884 <dbg_le_set_bd_addr_req_handler+0x6c>)
1001184a:	4b0f      	ldr	r3, [pc, #60]	; (10011888 <dbg_le_set_bd_addr_req_handler+0x70>)
1001184c:	210e      	movs	r1, #14
1001184e:	802b      	strh	r3, [r5, #0]
10011850:	2306      	movs	r3, #6
10011852:	71a3      	strb	r3, [r4, #6]
10011854:	2300      	movs	r3, #0
10011856:	1c20      	adds	r0, r4, #0
10011858:	71e3      	strb	r3, [r4, #7]
1001185a:	4b0c      	ldr	r3, [pc, #48]	; (1001188c <dbg_le_set_bd_addr_req_handler+0x74>)
1001185c:	80af      	strh	r7, [r5, #4]
1001185e:	4798      	blx	r3
10011860:	1c30      	adds	r0, r6, #0
10011862:	4b0b      	ldr	r3, [pc, #44]	; (10011890 <dbg_le_set_bd_addr_req_handler+0x78>)
10011864:	4798      	blx	r3
10011866:	7833      	ldrb	r3, [r6, #0]
10011868:	20e2      	movs	r0, #226	; 0xe2
1001186a:	2b00      	cmp	r3, #0
1001186c:	d101      	bne.n	10011872 <dbg_le_set_bd_addr_req_handler+0x5a>
1001186e:	68ab      	ldr	r3, [r5, #8]
10011870:	7818      	ldrb	r0, [r3, #0]
10011872:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10011874:	1001b348 	.word	0x1001b348
10011878:	1001afd8 	.word	0x1001afd8
1001187c:	1001b350 	.word	0x1001b350
10011880:	1001521b 	.word	0x1001521b
10011884:	1001afcc 	.word	0x1001afcc
10011888:	00000329 	.word	0x00000329
1001188c:	10011785 	.word	0x10011785
10011890:	100117e9 	.word	0x100117e9

10011894 <gapc_get_dev_info_cfm.constprop.1>:
10011894:	b538      	push	{r3, r4, r5, lr}
10011896:	230b      	movs	r3, #11
10011898:	4c27      	ldr	r4, [pc, #156]	; (10011938 <gapc_get_dev_info_cfm.constprop.1+0xa4>)
1001189a:	7023      	strb	r3, [r4, #0]
1001189c:	3303      	adds	r3, #3
1001189e:	7063      	strb	r3, [r4, #1]
100118a0:	3329      	adds	r3, #41	; 0x29
100118a2:	70a3      	strb	r3, [r4, #2]
100118a4:	4b25      	ldr	r3, [pc, #148]	; (1001193c <gapc_get_dev_info_cfm.constprop.1+0xa8>)
100118a6:	70e1      	strb	r1, [r4, #3]
100118a8:	881a      	ldrh	r2, [r3, #0]
100118aa:	881b      	ldrh	r3, [r3, #0]
100118ac:	7122      	strb	r2, [r4, #4]
100118ae:	0a1b      	lsrs	r3, r3, #8
100118b0:	7163      	strb	r3, [r4, #5]
100118b2:	2300      	movs	r3, #0
100118b4:	7220      	strb	r0, [r4, #8]
100118b6:	7263      	strb	r3, [r4, #9]
100118b8:	2801      	cmp	r0, #1
100118ba:	d02b      	beq.n	10011914 <gapc_get_dev_info_cfm.constprop.1+0x80>
100118bc:	4298      	cmp	r0, r3
100118be:	d01b      	beq.n	100118f8 <gapc_get_dev_info_cfm.constprop.1+0x64>
100118c0:	2802      	cmp	r0, #2
100118c2:	d12f      	bne.n	10011924 <gapc_get_dev_info_cfm.constprop.1+0x90>
100118c4:	4b1e      	ldr	r3, [pc, #120]	; (10011940 <gapc_get_dev_info_cfm.constprop.1+0xac>)
100118c6:	2112      	movs	r1, #18
100118c8:	1c1a      	adds	r2, r3, #0
100118ca:	32ce      	adds	r2, #206	; 0xce
100118cc:	8812      	ldrh	r2, [r2, #0]
100118ce:	72a2      	strb	r2, [r4, #10]
100118d0:	0a12      	lsrs	r2, r2, #8
100118d2:	72e2      	strb	r2, [r4, #11]
100118d4:	1c1a      	adds	r2, r3, #0
100118d6:	32d0      	adds	r2, #208	; 0xd0
100118d8:	8812      	ldrh	r2, [r2, #0]
100118da:	7322      	strb	r2, [r4, #12]
100118dc:	0a12      	lsrs	r2, r2, #8
100118de:	7362      	strb	r2, [r4, #13]
100118e0:	1c1a      	adds	r2, r3, #0
100118e2:	32d2      	adds	r2, #210	; 0xd2
100118e4:	8812      	ldrh	r2, [r2, #0]
100118e6:	33d4      	adds	r3, #212	; 0xd4
100118e8:	73a2      	strb	r2, [r4, #14]
100118ea:	0a12      	lsrs	r2, r2, #8
100118ec:	73e2      	strb	r2, [r4, #15]
100118ee:	881b      	ldrh	r3, [r3, #0]
100118f0:	7423      	strb	r3, [r4, #16]
100118f2:	0a1b      	lsrs	r3, r3, #8
100118f4:	7463      	strb	r3, [r4, #17]
100118f6:	e016      	b.n	10011926 <gapc_get_dev_info_cfm.constprop.1+0x92>
100118f8:	4b11      	ldr	r3, [pc, #68]	; (10011940 <gapc_get_dev_info_cfm.constprop.1+0xac>)
100118fa:	4912      	ldr	r1, [pc, #72]	; (10011944 <gapc_get_dev_info_cfm.constprop.1+0xb0>)
100118fc:	33aa      	adds	r3, #170	; 0xaa
100118fe:	881d      	ldrh	r5, [r3, #0]
10011900:	4811      	ldr	r0, [pc, #68]	; (10011948 <gapc_get_dev_info_cfm.constprop.1+0xb4>)
10011902:	0a2b      	lsrs	r3, r5, #8
10011904:	72a5      	strb	r5, [r4, #10]
10011906:	72e3      	strb	r3, [r4, #11]
10011908:	1c2a      	adds	r2, r5, #0
1001190a:	4b10      	ldr	r3, [pc, #64]	; (1001194c <gapc_get_dev_info_cfm.constprop.1+0xb8>)
1001190c:	350c      	adds	r5, #12
1001190e:	4798      	blx	r3
10011910:	b2a9      	uxth	r1, r5
10011912:	e008      	b.n	10011926 <gapc_get_dev_info_cfm.constprop.1+0x92>
10011914:	4b0a      	ldr	r3, [pc, #40]	; (10011940 <gapc_get_dev_info_cfm.constprop.1+0xac>)
10011916:	210c      	movs	r1, #12
10011918:	33cc      	adds	r3, #204	; 0xcc
1001191a:	881b      	ldrh	r3, [r3, #0]
1001191c:	72a3      	strb	r3, [r4, #10]
1001191e:	0a1b      	lsrs	r3, r3, #8
10011920:	72e3      	strb	r3, [r4, #11]
10011922:	e000      	b.n	10011926 <gapc_get_dev_info_cfm.constprop.1+0x92>
10011924:	210a      	movs	r1, #10
10011926:	1c0b      	adds	r3, r1, #0
10011928:	3b08      	subs	r3, #8
1001192a:	71a3      	strb	r3, [r4, #6]
1001192c:	121b      	asrs	r3, r3, #8
1001192e:	71e3      	strb	r3, [r4, #7]
10011930:	1c20      	adds	r0, r4, #0
10011932:	4b07      	ldr	r3, [pc, #28]	; (10011950 <gapc_get_dev_info_cfm.constprop.1+0xbc>)
10011934:	4798      	blx	r3
10011936:	bd38      	pop	{r3, r4, r5, pc}
10011938:	1001b348 	.word	0x1001b348
1001193c:	1001afd8 	.word	0x1001afd8
10011940:	1001b06a 	.word	0x1001b06a
10011944:	1001b116 	.word	0x1001b116
10011948:	1001b354 	.word	0x1001b354
1001194c:	1001521b 	.word	0x1001521b
10011950:	10011785 	.word	0x10011785

10011954 <check_ConnData_idx_role>:
10011954:	4b0c      	ldr	r3, [pc, #48]	; (10011988 <check_ConnData_idx_role+0x34>)
10011956:	b570      	push	{r4, r5, r6, lr}
10011958:	1c04      	adds	r4, r0, #0
1001195a:	2008      	movs	r0, #8
1001195c:	429c      	cmp	r4, r3
1001195e:	d011      	beq.n	10011984 <check_ConnData_idx_role+0x30>
10011960:	2300      	movs	r3, #0
10011962:	2212      	movs	r2, #18
10011964:	435a      	muls	r2, r3
10011966:	4d09      	ldr	r5, [pc, #36]	; (1001198c <check_ConnData_idx_role+0x38>)
10011968:	b2d8      	uxtb	r0, r3
1001196a:	1956      	adds	r6, r2, r5
1001196c:	8976      	ldrh	r6, [r6, #10]
1001196e:	42a6      	cmp	r6, r4
10011970:	d104      	bne.n	1001197c <check_ConnData_idx_role+0x28>
10011972:	2900      	cmp	r1, #0
10011974:	d006      	beq.n	10011984 <check_ConnData_idx_role+0x30>
10011976:	5d53      	ldrb	r3, [r2, r5]
10011978:	700b      	strb	r3, [r1, #0]
1001197a:	e003      	b.n	10011984 <check_ConnData_idx_role+0x30>
1001197c:	3301      	adds	r3, #1
1001197e:	2b08      	cmp	r3, #8
10011980:	d1ef      	bne.n	10011962 <check_ConnData_idx_role+0xe>
10011982:	1c18      	adds	r0, r3, #0
10011984:	bd70      	pop	{r4, r5, r6, pc}
10011986:	46c0      	nop			; (mov r8, r8)
10011988:	0000ffff 	.word	0x0000ffff
1001198c:	1001afda 	.word	0x1001afda

10011990 <check_ConnData_emptyEntry>:
10011990:	2300      	movs	r3, #0
10011992:	2212      	movs	r2, #18
10011994:	435a      	muls	r2, r3
10011996:	4906      	ldr	r1, [pc, #24]	; (100119b0 <check_ConnData_emptyEntry+0x20>)
10011998:	b2d8      	uxtb	r0, r3
1001199a:	1852      	adds	r2, r2, r1
1001199c:	8951      	ldrh	r1, [r2, #10]
1001199e:	4a05      	ldr	r2, [pc, #20]	; (100119b4 <check_ConnData_emptyEntry+0x24>)
100119a0:	4291      	cmp	r1, r2
100119a2:	d003      	beq.n	100119ac <check_ConnData_emptyEntry+0x1c>
100119a4:	3301      	adds	r3, #1
100119a6:	2b08      	cmp	r3, #8
100119a8:	d1f3      	bne.n	10011992 <check_ConnData_emptyEntry+0x2>
100119aa:	1c18      	adds	r0, r3, #0
100119ac:	4770      	bx	lr
100119ae:	46c0      	nop			; (mov r8, r8)
100119b0:	1001afda 	.word	0x1001afda
100119b4:	0000ffff 	.word	0x0000ffff

100119b8 <gapc_cmp_evt>:
100119b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
100119ba:	780b      	ldrb	r3, [r1, #0]
100119bc:	1c05      	adds	r5, r0, #0
100119be:	1e58      	subs	r0, r3, #1
100119c0:	784e      	ldrb	r6, [r1, #1]
100119c2:	280f      	cmp	r0, #15
100119c4:	d85a      	bhi.n	10011a7c <gapc_cmp_evt+0xc4>
100119c6:	1c14      	adds	r4, r2, #0
100119c8:	f001 fba4 	bl	10013114 <__gnu_thumb1_case_uqi>
100119cc:	5858440a 	.word	0x5858440a
100119d0:	4b584444 	.word	0x4b584444
100119d4:	0825122d 	.word	0x0825122d
100119d8:	3e395858 	.word	0x3e395858
100119dc:	203b      	movs	r0, #59	; 0x3b
100119de:	e04e      	b.n	10011a7e <gapc_cmp_evt+0xc6>
100119e0:	203b      	movs	r0, #59	; 0x3b
100119e2:	2e00      	cmp	r6, #0
100119e4:	d04b      	beq.n	10011a7e <gapc_cmp_evt+0xc6>
100119e6:	0a2d      	lsrs	r5, r5, #8
100119e8:	8015      	strh	r5, [r2, #0]
100119ea:	7096      	strb	r6, [r2, #2]
100119ec:	3835      	subs	r0, #53	; 0x35
100119ee:	e046      	b.n	10011a7e <gapc_cmp_evt+0xc6>
100119f0:	466b      	mov	r3, sp
100119f2:	1ddf      	adds	r7, r3, #7
100119f4:	2301      	movs	r3, #1
100119f6:	0a2d      	lsrs	r5, r5, #8
100119f8:	703b      	strb	r3, [r7, #0]
100119fa:	1c28      	adds	r0, r5, #0
100119fc:	1c39      	adds	r1, r7, #0
100119fe:	4b20      	ldr	r3, [pc, #128]	; (10011a80 <gapc_cmp_evt+0xc8>)
10011a00:	4798      	blx	r3
10011a02:	2807      	cmp	r0, #7
10011a04:	d803      	bhi.n	10011a0e <gapc_cmp_evt+0x56>
10011a06:	783b      	ldrb	r3, [r7, #0]
10011a08:	203b      	movs	r0, #59	; 0x3b
10011a0a:	2b00      	cmp	r3, #0
10011a0c:	d037      	beq.n	10011a7e <gapc_cmp_evt+0xc6>
10011a0e:	8065      	strh	r5, [r4, #2]
10011a10:	7126      	strb	r6, [r4, #4]
10011a12:	2009      	movs	r0, #9
10011a14:	e033      	b.n	10011a7e <gapc_cmp_evt+0xc6>
10011a16:	203b      	movs	r0, #59	; 0x3b
10011a18:	2e00      	cmp	r6, #0
10011a1a:	d030      	beq.n	10011a7e <gapc_cmp_evt+0xc6>
10011a1c:	0a2d      	lsrs	r5, r5, #8
10011a1e:	8015      	strh	r5, [r2, #0]
10011a20:	7096      	strb	r6, [r2, #2]
10011a22:	382d      	subs	r0, #45	; 0x2d
10011a24:	e02b      	b.n	10011a7e <gapc_cmp_evt+0xc6>
10011a26:	203b      	movs	r0, #59	; 0x3b
10011a28:	2e00      	cmp	r6, #0
10011a2a:	d028      	beq.n	10011a7e <gapc_cmp_evt+0xc6>
10011a2c:	2300      	movs	r3, #0
10011a2e:	0a2d      	lsrs	r5, r5, #8
10011a30:	8015      	strh	r5, [r2, #0]
10011a32:	7096      	strb	r6, [r2, #2]
10011a34:	8093      	strh	r3, [r2, #4]
10011a36:	80d3      	strh	r3, [r2, #6]
10011a38:	8113      	strh	r3, [r2, #8]
10011a3a:	3834      	subs	r0, #52	; 0x34
10011a3c:	e01f      	b.n	10011a7e <gapc_cmp_evt+0xc6>
10011a3e:	203b      	movs	r0, #59	; 0x3b
10011a40:	2e00      	cmp	r6, #0
10011a42:	d01c      	beq.n	10011a7e <gapc_cmp_evt+0xc6>
10011a44:	7216      	strb	r6, [r2, #8]
10011a46:	e003      	b.n	10011a50 <gapc_cmp_evt+0x98>
10011a48:	203b      	movs	r0, #59	; 0x3b
10011a4a:	2e00      	cmp	r6, #0
10011a4c:	d017      	beq.n	10011a7e <gapc_cmp_evt+0xc6>
10011a4e:	7116      	strb	r6, [r2, #4]
10011a50:	3812      	subs	r0, #18
10011a52:	e014      	b.n	10011a7e <gapc_cmp_evt+0xc6>
10011a54:	203b      	movs	r0, #59	; 0x3b
10011a56:	2e00      	cmp	r6, #0
10011a58:	d011      	beq.n	10011a7e <gapc_cmp_evt+0xc6>
10011a5a:	7093      	strb	r3, [r2, #2]
10011a5c:	70d6      	strb	r6, [r2, #3]
10011a5e:	382a      	subs	r0, #42	; 0x2a
10011a60:	e00d      	b.n	10011a7e <gapc_cmp_evt+0xc6>
10011a62:	203b      	movs	r0, #59	; 0x3b
10011a64:	2e00      	cmp	r6, #0
10011a66:	d00a      	beq.n	10011a7e <gapc_cmp_evt+0xc6>
10011a68:	0a2d      	lsrs	r5, r5, #8
10011a6a:	7016      	strb	r6, [r2, #0]
10011a6c:	8055      	strh	r5, [r2, #2]
10011a6e:	1d10      	adds	r0, r2, #4
10011a70:	2100      	movs	r1, #0
10011a72:	2205      	movs	r2, #5
10011a74:	4b03      	ldr	r3, [pc, #12]	; (10011a84 <gapc_cmp_evt+0xcc>)
10011a76:	4798      	blx	r3
10011a78:	2012      	movs	r0, #18
10011a7a:	e000      	b.n	10011a7e <gapc_cmp_evt+0xc6>
10011a7c:	2000      	movs	r0, #0
10011a7e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10011a80:	10011955 	.word	0x10011955
10011a84:	1001522d 	.word	0x1001522d

10011a88 <gapc_connection_cfm_handler>:
10011a88:	b5f0      	push	{r4, r5, r6, r7, lr}
10011a8a:	b085      	sub	sp, #20
10011a8c:	1c1d      	adds	r5, r3, #0
10011a8e:	ab0a      	add	r3, sp, #40	; 0x28
10011a90:	781b      	ldrb	r3, [r3, #0]
10011a92:	9201      	str	r2, [sp, #4]
10011a94:	9302      	str	r3, [sp, #8]
10011a96:	ab0b      	add	r3, sp, #44	; 0x2c
10011a98:	781b      	ldrb	r3, [r3, #0]
10011a9a:	1c07      	adds	r7, r0, #0
10011a9c:	9303      	str	r3, [sp, #12]
10011a9e:	ab0c      	add	r3, sp, #48	; 0x30
10011aa0:	881a      	ldrh	r2, [r3, #0]
10011aa2:	2302      	movs	r3, #2
10011aa4:	1c0e      	adds	r6, r1, #0
10011aa6:	4c23      	ldr	r4, [pc, #140]	; (10011b34 <gapc_connection_cfm_handler+0xac>)
10011aa8:	1c39      	adds	r1, r7, #0
10011aaa:	7023      	strb	r3, [r4, #0]
10011aac:	330c      	adds	r3, #12
10011aae:	7063      	strb	r3, [r4, #1]
10011ab0:	70a3      	strb	r3, [r4, #2]
10011ab2:	4b21      	ldr	r3, [pc, #132]	; (10011b38 <gapc_connection_cfm_handler+0xb0>)
10011ab4:	70e2      	strb	r2, [r4, #3]
10011ab6:	881a      	ldrh	r2, [r3, #0]
10011ab8:	881b      	ldrh	r3, [r3, #0]
10011aba:	7122      	strb	r2, [r4, #4]
10011abc:	0a1b      	lsrs	r3, r3, #8
10011abe:	4f1f      	ldr	r7, [pc, #124]	; (10011b3c <gapc_connection_cfm_handler+0xb4>)
10011ac0:	2210      	movs	r2, #16
10011ac2:	481f      	ldr	r0, [pc, #124]	; (10011b40 <gapc_connection_cfm_handler+0xb8>)
10011ac4:	7163      	strb	r3, [r4, #5]
10011ac6:	47b8      	blx	r7
10011ac8:	0a33      	lsrs	r3, r6, #8
10011aca:	7626      	strb	r6, [r4, #24]
10011acc:	7663      	strb	r3, [r4, #25]
10011ace:	9901      	ldr	r1, [sp, #4]
10011ad0:	0c33      	lsrs	r3, r6, #16
10011ad2:	2210      	movs	r2, #16
10011ad4:	0e36      	lsrs	r6, r6, #24
10011ad6:	481b      	ldr	r0, [pc, #108]	; (10011b44 <gapc_connection_cfm_handler+0xbc>)
10011ad8:	76a3      	strb	r3, [r4, #26]
10011ada:	76e6      	strb	r6, [r4, #27]
10011adc:	47b8      	blx	r7
10011ade:	1c23      	adds	r3, r4, #0
10011ae0:	332c      	adds	r3, #44	; 0x2c
10011ae2:	701d      	strb	r5, [r3, #0]
10011ae4:	1c23      	adds	r3, r4, #0
10011ae6:	0a2a      	lsrs	r2, r5, #8
10011ae8:	332d      	adds	r3, #45	; 0x2d
10011aea:	701a      	strb	r2, [r3, #0]
10011aec:	1c23      	adds	r3, r4, #0
10011aee:	0c2a      	lsrs	r2, r5, #16
10011af0:	332e      	adds	r3, #46	; 0x2e
10011af2:	701a      	strb	r2, [r3, #0]
10011af4:	1c23      	adds	r3, r4, #0
10011af6:	0e2d      	lsrs	r5, r5, #24
10011af8:	332f      	adds	r3, #47	; 0x2f
10011afa:	466a      	mov	r2, sp
10011afc:	701d      	strb	r5, [r3, #0]
10011afe:	1c23      	adds	r3, r4, #0
10011b00:	7a12      	ldrb	r2, [r2, #8]
10011b02:	3330      	adds	r3, #48	; 0x30
10011b04:	701a      	strb	r2, [r3, #0]
10011b06:	1c23      	adds	r3, r4, #0
10011b08:	2500      	movs	r5, #0
10011b0a:	3331      	adds	r3, #49	; 0x31
10011b0c:	466a      	mov	r2, sp
10011b0e:	701d      	strb	r5, [r3, #0]
10011b10:	1c23      	adds	r3, r4, #0
10011b12:	7b12      	ldrb	r2, [r2, #12]
10011b14:	3332      	adds	r3, #50	; 0x32
10011b16:	701a      	strb	r2, [r3, #0]
10011b18:	1c23      	adds	r3, r4, #0
10011b1a:	3333      	adds	r3, #51	; 0x33
10011b1c:	701d      	strb	r5, [r3, #0]
10011b1e:	232c      	movs	r3, #44	; 0x2c
10011b20:	1c20      	adds	r0, r4, #0
10011b22:	71a3      	strb	r3, [r4, #6]
10011b24:	2134      	movs	r1, #52	; 0x34
10011b26:	4b08      	ldr	r3, [pc, #32]	; (10011b48 <gapc_connection_cfm_handler+0xc0>)
10011b28:	71e5      	strb	r5, [r4, #7]
10011b2a:	4798      	blx	r3
10011b2c:	1c28      	adds	r0, r5, #0
10011b2e:	b005      	add	sp, #20
10011b30:	bdf0      	pop	{r4, r5, r6, r7, pc}
10011b32:	46c0      	nop			; (mov r8, r8)
10011b34:	1001b348 	.word	0x1001b348
10011b38:	1001afd8 	.word	0x1001afd8
10011b3c:	1001521b 	.word	0x1001521b
10011b40:	1001b350 	.word	0x1001b350
10011b44:	1001b364 	.word	0x1001b364
10011b48:	10011785 	.word	0x10011785

10011b4c <gapc_con_req_ind>:
10011b4c:	b5f0      	push	{r4, r5, r6, r7, lr}
10011b4e:	7845      	ldrb	r5, [r0, #1]
10011b50:	7803      	ldrb	r3, [r0, #0]
10011b52:	4c30      	ldr	r4, [pc, #192]	; (10011c14 <gapc_con_req_ind+0xc8>)
10011b54:	022d      	lsls	r5, r5, #8
10011b56:	431d      	orrs	r5, r3
10011b58:	85a5      	strh	r5, [r4, #44]	; 0x2c
10011b5a:	78c3      	ldrb	r3, [r0, #3]
10011b5c:	7882      	ldrb	r2, [r0, #2]
10011b5e:	b08b      	sub	sp, #44	; 0x2c
10011b60:	021b      	lsls	r3, r3, #8
10011b62:	431a      	orrs	r2, r3
10011b64:	466b      	mov	r3, sp
10011b66:	9205      	str	r2, [sp, #20]
10011b68:	8a9b      	ldrh	r3, [r3, #20]
10011b6a:	2120      	movs	r1, #32
10011b6c:	85e3      	strh	r3, [r4, #46]	; 0x2e
10011b6e:	7943      	ldrb	r3, [r0, #5]
10011b70:	7902      	ldrb	r2, [r0, #4]
10011b72:	021b      	lsls	r3, r3, #8
10011b74:	431a      	orrs	r2, r3
10011b76:	466b      	mov	r3, sp
10011b78:	9206      	str	r2, [sp, #24]
10011b7a:	8b1b      	ldrh	r3, [r3, #24]
10011b7c:	1c06      	adds	r6, r0, #0
10011b7e:	8623      	strh	r3, [r4, #48]	; 0x30
10011b80:	79c3      	ldrb	r3, [r0, #7]
10011b82:	7982      	ldrb	r2, [r0, #6]
10011b84:	021b      	lsls	r3, r3, #8
10011b86:	431a      	orrs	r2, r3
10011b88:	466b      	mov	r3, sp
10011b8a:	9207      	str	r2, [sp, #28]
10011b8c:	466a      	mov	r2, sp
10011b8e:	8b9b      	ldrh	r3, [r3, #28]
10011b90:	1852      	adds	r2, r2, r1
10011b92:	8663      	strh	r3, [r4, #50]	; 0x32
10011b94:	7a43      	ldrb	r3, [r0, #9]
10011b96:	1c01      	adds	r1, r0, #0
10011b98:	9308      	str	r3, [sp, #32]
10011b9a:	1c23      	adds	r3, r4, #0
10011b9c:	7812      	ldrb	r2, [r2, #0]
10011b9e:	3377      	adds	r3, #119	; 0x77
10011ba0:	3478      	adds	r4, #120	; 0x78
10011ba2:	701a      	strb	r2, [r3, #0]
10011ba4:	310a      	adds	r1, #10
10011ba6:	2206      	movs	r2, #6
10011ba8:	4b1b      	ldr	r3, [pc, #108]	; (10011c18 <gapc_con_req_ind+0xcc>)
10011baa:	1c20      	adds	r0, r4, #0
10011bac:	4798      	blx	r3
10011bae:	7c33      	ldrb	r3, [r6, #16]
10011bb0:	9309      	str	r3, [sp, #36]	; 0x24
10011bb2:	4b1a      	ldr	r3, [pc, #104]	; (10011c1c <gapc_con_req_ind+0xd0>)
10011bb4:	4798      	blx	r3
10011bb6:	4e1a      	ldr	r6, [pc, #104]	; (10011c20 <gapc_con_req_ind+0xd4>)
10011bb8:	1e07      	subs	r7, r0, #0
10011bba:	2f07      	cmp	r7, #7
10011bbc:	d81b      	bhi.n	10011bf6 <gapc_con_req_ind+0xaa>
10011bbe:	2312      	movs	r3, #18
10011bc0:	4343      	muls	r3, r0
10011bc2:	18f0      	adds	r0, r6, r3
10011bc4:	8145      	strh	r5, [r0, #10]
10011bc6:	4669      	mov	r1, sp
10011bc8:	2524      	movs	r5, #36	; 0x24
10011bca:	1949      	adds	r1, r1, r5
10011bcc:	7809      	ldrb	r1, [r1, #0]
10011bce:	2206      	movs	r2, #6
10011bd0:	54f1      	strb	r1, [r6, r3]
10011bd2:	2120      	movs	r1, #32
10011bd4:	466b      	mov	r3, sp
10011bd6:	185b      	adds	r3, r3, r1
10011bd8:	781b      	ldrb	r3, [r3, #0]
10011bda:	1c21      	adds	r1, r4, #0
10011bdc:	7043      	strb	r3, [r0, #1]
10011bde:	466b      	mov	r3, sp
10011be0:	8a9b      	ldrh	r3, [r3, #20]
10011be2:	3002      	adds	r0, #2
10011be4:	8143      	strh	r3, [r0, #10]
10011be6:	466b      	mov	r3, sp
10011be8:	8b1b      	ldrh	r3, [r3, #24]
10011bea:	8183      	strh	r3, [r0, #12]
10011bec:	466b      	mov	r3, sp
10011bee:	8b9b      	ldrh	r3, [r3, #28]
10011bf0:	81c3      	strh	r3, [r0, #14]
10011bf2:	4b09      	ldr	r3, [pc, #36]	; (10011c18 <gapc_con_req_ind+0xcc>)
10011bf4:	4798      	blx	r3
10011bf6:	2112      	movs	r1, #18
10011bf8:	2300      	movs	r3, #0
10011bfa:	434f      	muls	r7, r1
10011bfc:	9300      	str	r3, [sp, #0]
10011bfe:	9301      	str	r3, [sp, #4]
10011c00:	19f6      	adds	r6, r6, r7
10011c02:	8971      	ldrh	r1, [r6, #10]
10011c04:	4a07      	ldr	r2, [pc, #28]	; (10011c24 <gapc_con_req_ind+0xd8>)
10011c06:	9102      	str	r1, [sp, #8]
10011c08:	1c10      	adds	r0, r2, #0
10011c0a:	1c19      	adds	r1, r3, #0
10011c0c:	4c06      	ldr	r4, [pc, #24]	; (10011c28 <gapc_con_req_ind+0xdc>)
10011c0e:	47a0      	blx	r4
10011c10:	b00b      	add	sp, #44	; 0x2c
10011c12:	bdf0      	pop	{r4, r5, r6, r7, pc}
10011c14:	1001b06a 	.word	0x1001b06a
10011c18:	1001521b 	.word	0x1001521b
10011c1c:	10011991 	.word	0x10011991
10011c20:	1001afda 	.word	0x1001afda
10011c24:	1001a0f8 	.word	0x1001a0f8
10011c28:	10011a89 	.word	0x10011a89

10011c2c <gapc_disconnect_cmd_handler>:
10011c2c:	2204      	movs	r2, #4
10011c2e:	b510      	push	{r4, lr}
10011c30:	4b0c      	ldr	r3, [pc, #48]	; (10011c64 <gapc_disconnect_cmd_handler+0x38>)
10011c32:	2400      	movs	r4, #0
10011c34:	701a      	strb	r2, [r3, #0]
10011c36:	320a      	adds	r2, #10
10011c38:	705a      	strb	r2, [r3, #1]
10011c3a:	709a      	strb	r2, [r3, #2]
10011c3c:	4a0a      	ldr	r2, [pc, #40]	; (10011c68 <gapc_disconnect_cmd_handler+0x3c>)
10011c3e:	70d9      	strb	r1, [r3, #3]
10011c40:	8811      	ldrh	r1, [r2, #0]
10011c42:	8812      	ldrh	r2, [r2, #0]
10011c44:	7119      	strb	r1, [r3, #4]
10011c46:	0a12      	lsrs	r2, r2, #8
10011c48:	715a      	strb	r2, [r3, #5]
10011c4a:	2201      	movs	r2, #1
10011c4c:	721a      	strb	r2, [r3, #8]
10011c4e:	1892      	adds	r2, r2, r2
10011c50:	7258      	strb	r0, [r3, #9]
10011c52:	719a      	strb	r2, [r3, #6]
10011c54:	71dc      	strb	r4, [r3, #7]
10011c56:	1c18      	adds	r0, r3, #0
10011c58:	210a      	movs	r1, #10
10011c5a:	4b04      	ldr	r3, [pc, #16]	; (10011c6c <gapc_disconnect_cmd_handler+0x40>)
10011c5c:	4798      	blx	r3
10011c5e:	1c20      	adds	r0, r4, #0
10011c60:	bd10      	pop	{r4, pc}
10011c62:	46c0      	nop			; (mov r8, r8)
10011c64:	1001b348 	.word	0x1001b348
10011c68:	1001afd8 	.word	0x1001afd8
10011c6c:	10011785 	.word	0x10011785

10011c70 <gapc_disconnect_ind>:
10011c70:	1c02      	adds	r2, r0, #0
10011c72:	b508      	push	{r3, lr}
10011c74:	7843      	ldrb	r3, [r0, #1]
10011c76:	7800      	ldrb	r0, [r0, #0]
10011c78:	021b      	lsls	r3, r3, #8
10011c7a:	4318      	orrs	r0, r3
10011c7c:	8008      	strh	r0, [r1, #0]
10011c7e:	7893      	ldrb	r3, [r2, #2]
10011c80:	708b      	strb	r3, [r1, #2]
10011c82:	2100      	movs	r1, #0
10011c84:	4b05      	ldr	r3, [pc, #20]	; (10011c9c <gapc_disconnect_ind+0x2c>)
10011c86:	4798      	blx	r3
10011c88:	2807      	cmp	r0, #7
10011c8a:	d806      	bhi.n	10011c9a <gapc_disconnect_ind+0x2a>
10011c8c:	2312      	movs	r3, #18
10011c8e:	4358      	muls	r0, r3
10011c90:	4b03      	ldr	r3, [pc, #12]	; (10011ca0 <gapc_disconnect_ind+0x30>)
10011c92:	1818      	adds	r0, r3, r0
10011c94:	2301      	movs	r3, #1
10011c96:	425b      	negs	r3, r3
10011c98:	8143      	strh	r3, [r0, #10]
10011c9a:	bd08      	pop	{r3, pc}
10011c9c:	10011955 	.word	0x10011955
10011ca0:	1001afda 	.word	0x1001afda

10011ca4 <gapc_bond_cmd_handler>:
10011ca4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10011ca6:	9300      	str	r3, [sp, #0]
10011ca8:	2312      	movs	r3, #18
10011caa:	1c04      	adds	r4, r0, #0
10011cac:	a808      	add	r0, sp, #32
10011cae:	7807      	ldrb	r7, [r0, #0]
10011cb0:	a809      	add	r0, sp, #36	; 0x24
10011cb2:	7806      	ldrb	r6, [r0, #0]
10011cb4:	a80a      	add	r0, sp, #40	; 0x28
10011cb6:	7805      	ldrb	r5, [r0, #0]
10011cb8:	a80b      	add	r0, sp, #44	; 0x2c
10011cba:	7800      	ldrb	r0, [r0, #0]
10011cbc:	9001      	str	r0, [sp, #4]
10011cbe:	4810      	ldr	r0, [pc, #64]	; (10011d00 <gapc_bond_cmd_handler+0x5c>)
10011cc0:	7003      	strb	r3, [r0, #0]
10011cc2:	230e      	movs	r3, #14
10011cc4:	70c4      	strb	r4, [r0, #3]
10011cc6:	4c0f      	ldr	r4, [pc, #60]	; (10011d04 <gapc_bond_cmd_handler+0x60>)
10011cc8:	7043      	strb	r3, [r0, #1]
10011cca:	7083      	strb	r3, [r0, #2]
10011ccc:	8823      	ldrh	r3, [r4, #0]
10011cce:	8824      	ldrh	r4, [r4, #0]
10011cd0:	7103      	strb	r3, [r0, #4]
10011cd2:	466b      	mov	r3, sp
10011cd4:	781b      	ldrb	r3, [r3, #0]
10011cd6:	0a24      	lsrs	r4, r4, #8
10011cd8:	72c3      	strb	r3, [r0, #11]
10011cda:	466b      	mov	r3, sp
10011cdc:	791b      	ldrb	r3, [r3, #4]
10011cde:	7144      	strb	r4, [r0, #5]
10011ce0:	73c3      	strb	r3, [r0, #15]
10011ce2:	2308      	movs	r3, #8
10011ce4:	7183      	strb	r3, [r0, #6]
10011ce6:	2300      	movs	r3, #0
10011ce8:	240a      	movs	r4, #10
10011cea:	7241      	strb	r1, [r0, #9]
10011cec:	71c3      	strb	r3, [r0, #7]
10011cee:	2110      	movs	r1, #16
10011cf0:	4b05      	ldr	r3, [pc, #20]	; (10011d08 <gapc_bond_cmd_handler+0x64>)
10011cf2:	7307      	strb	r7, [r0, #12]
10011cf4:	7346      	strb	r6, [r0, #13]
10011cf6:	7385      	strb	r5, [r0, #14]
10011cf8:	7204      	strb	r4, [r0, #8]
10011cfa:	7282      	strb	r2, [r0, #10]
10011cfc:	4798      	blx	r3
10011cfe:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
10011d00:	1001b348 	.word	0x1001b348
10011d04:	1001afd8 	.word	0x1001afd8
10011d08:	10011785 	.word	0x10011785

10011d0c <gapc_bond_ind>:
10011d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10011d0e:	780e      	ldrb	r6, [r1, #0]
10011d10:	1c03      	adds	r3, r0, #0
10011d12:	1eb0      	subs	r0, r6, #2
10011d14:	2805      	cmp	r0, #5
10011d16:	d85d      	bhi.n	10011dd4 <gapc_bond_ind+0xc8>
10011d18:	1c15      	adds	r5, r2, #0
10011d1a:	1c0c      	adds	r4, r1, #0
10011d1c:	f001 f9fa 	bl	10013114 <__gnu_thumb1_case_uqi>
10011d20:	2f5a030d 	.word	0x2f5a030d
10011d24:	4740      	.short	0x4740
10011d26:	2009      	movs	r0, #9
10011d28:	2a00      	cmp	r2, #0
10011d2a:	d054      	beq.n	10011dd6 <gapc_bond_ind+0xca>
10011d2c:	0a1b      	lsrs	r3, r3, #8
10011d2e:	8053      	strh	r3, [r2, #2]
10011d30:	788b      	ldrb	r3, [r1, #2]
10011d32:	4829      	ldr	r0, [pc, #164]	; (10011dd8 <gapc_bond_ind+0xcc>)
10011d34:	7113      	strb	r3, [r2, #4]
10011d36:	2100      	movs	r1, #0
10011d38:	e01c      	b.n	10011d74 <gapc_bond_ind+0x68>
10011d3a:	2009      	movs	r0, #9
10011d3c:	2a00      	cmp	r2, #0
10011d3e:	d04a      	beq.n	10011dd6 <gapc_bond_ind+0xca>
10011d40:	4c25      	ldr	r4, [pc, #148]	; (10011dd8 <gapc_bond_ind+0xcc>)
10011d42:	0a1b      	lsrs	r3, r3, #8
10011d44:	8053      	strh	r3, [r2, #2]
10011d46:	788b      	ldrb	r3, [r1, #2]
10011d48:	2700      	movs	r7, #0
10011d4a:	1c10      	adds	r0, r2, #0
10011d4c:	1c21      	adds	r1, r4, #0
10011d4e:	7013      	strb	r3, [r2, #0]
10011d50:	4e22      	ldr	r6, [pc, #136]	; (10011ddc <gapc_bond_ind+0xd0>)
10011d52:	7117      	strb	r7, [r2, #4]
10011d54:	312e      	adds	r1, #46	; 0x2e
10011d56:	2217      	movs	r2, #23
10011d58:	3032      	adds	r0, #50	; 0x32
10011d5a:	47b0      	blx	r6
10011d5c:	1c28      	adds	r0, r5, #0
10011d5e:	1c21      	adds	r1, r4, #0
10011d60:	2210      	movs	r2, #16
10011d62:	311e      	adds	r1, #30
10011d64:	3022      	adds	r0, #34	; 0x22
10011d66:	47b0      	blx	r6
10011d68:	1ca1      	adds	r1, r4, #2
10011d6a:	1da8      	adds	r0, r5, #6
10011d6c:	221c      	movs	r2, #28
10011d6e:	47b0      	blx	r6
10011d70:	1c20      	adds	r0, r4, #0
10011d72:	1c39      	adds	r1, r7, #0
10011d74:	2246      	movs	r2, #70	; 0x46
10011d76:	4b1a      	ldr	r3, [pc, #104]	; (10011de0 <gapc_bond_ind+0xd4>)
10011d78:	4798      	blx	r3
10011d7a:	2009      	movs	r0, #9
10011d7c:	e02b      	b.n	10011dd6 <gapc_bond_ind+0xca>
10011d7e:	4d16      	ldr	r5, [pc, #88]	; (10011dd8 <gapc_bond_ind+0xcc>)
10011d80:	3102      	adds	r1, #2
10011d82:	1c28      	adds	r0, r5, #0
10011d84:	2210      	movs	r2, #16
10011d86:	4e15      	ldr	r6, [pc, #84]	; (10011ddc <gapc_bond_ind+0xd0>)
10011d88:	302e      	adds	r0, #46	; 0x2e
10011d8a:	47b0      	blx	r6
10011d8c:	1c28      	adds	r0, r5, #0
10011d8e:	1c21      	adds	r1, r4, #0
10011d90:	303f      	adds	r0, #63	; 0x3f
10011d92:	3112      	adds	r1, #18
10011d94:	2206      	movs	r2, #6
10011d96:	47b0      	blx	r6
10011d98:	7e23      	ldrb	r3, [r4, #24]
10011d9a:	353e      	adds	r5, #62	; 0x3e
10011d9c:	702b      	strb	r3, [r5, #0]
10011d9e:	e019      	b.n	10011dd4 <gapc_bond_ind+0xc8>
10011da0:	480d      	ldr	r0, [pc, #52]	; (10011dd8 <gapc_bond_ind+0xcc>)
10011da2:	3102      	adds	r1, #2
10011da4:	2210      	movs	r2, #16
10011da6:	4b0d      	ldr	r3, [pc, #52]	; (10011ddc <gapc_bond_ind+0xd0>)
10011da8:	301e      	adds	r0, #30
10011daa:	4798      	blx	r3
10011dac:	e012      	b.n	10011dd4 <gapc_bond_ind+0xc8>
10011dae:	4d0a      	ldr	r5, [pc, #40]	; (10011dd8 <gapc_bond_ind+0xcc>)
10011db0:	3102      	adds	r1, #2
10011db2:	2210      	movs	r2, #16
10011db4:	4e09      	ldr	r6, [pc, #36]	; (10011ddc <gapc_bond_ind+0xd0>)
10011db6:	1ca8      	adds	r0, r5, #2
10011db8:	47b0      	blx	r6
10011dba:	1c28      	adds	r0, r5, #0
10011dbc:	1c21      	adds	r1, r4, #0
10011dbe:	7ce3      	ldrb	r3, [r4, #19]
10011dc0:	7ca2      	ldrb	r2, [r4, #18]
10011dc2:	021b      	lsls	r3, r3, #8
10011dc4:	4313      	orrs	r3, r2
10011dc6:	3014      	adds	r0, #20
10011dc8:	3114      	adds	r1, #20
10011dca:	2208      	movs	r2, #8
10011dcc:	826b      	strh	r3, [r5, #18]
10011dce:	47b0      	blx	r6
10011dd0:	7f23      	ldrb	r3, [r4, #28]
10011dd2:	772b      	strb	r3, [r5, #28]
10011dd4:	2000      	movs	r0, #0
10011dd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10011dd8:	1001a128 	.word	0x1001a128
10011ddc:	1001521b 	.word	0x1001521b
10011de0:	1001522d 	.word	0x1001522d

10011de4 <gapc_bond_req_ind>:
10011de4:	b570      	push	{r4, r5, r6, lr}
10011de6:	780c      	ldrb	r4, [r1, #0]
10011de8:	1c03      	adds	r3, r0, #0
10011dea:	7849      	ldrb	r1, [r1, #1]
10011dec:	2c07      	cmp	r4, #7
10011dee:	d85c      	bhi.n	10011eaa <gapc_bond_req_ind+0xc6>
10011df0:	1c20      	adds	r0, r4, #0
10011df2:	f001 f98f 	bl	10013114 <__gnu_thumb1_case_uqi>
10011df6:	5a04      	.short	0x5a04
10011df8:	5a0b5a5a 	.word	0x5a0b5a5a
10011dfc:	1f1f      	.short	0x1f1f
10011dfe:	200a      	movs	r0, #10
10011e00:	2a00      	cmp	r2, #0
10011e02:	d053      	beq.n	10011eac <gapc_bond_req_ind+0xc8>
10011e04:	0a1b      	lsrs	r3, r3, #8
10011e06:	8013      	strh	r3, [r2, #0]
10011e08:	7091      	strb	r1, [r2, #2]
10011e0a:	e04f      	b.n	10011eac <gapc_bond_req_ind+0xc8>
10011e0c:	2a00      	cmp	r2, #0
10011e0e:	d00b      	beq.n	10011e28 <gapc_bond_req_ind+0x44>
10011e10:	0a1b      	lsrs	r3, r3, #8
10011e12:	8013      	strh	r3, [r2, #0]
10011e14:	2900      	cmp	r1, #0
10011e16:	d102      	bne.n	10011e1e <gapc_bond_req_ind+0x3a>
10011e18:	2301      	movs	r3, #1
10011e1a:	7093      	strb	r3, [r2, #2]
10011e1c:	e004      	b.n	10011e28 <gapc_bond_req_ind+0x44>
10011e1e:	2300      	movs	r3, #0
10011e20:	7093      	strb	r3, [r2, #2]
10011e22:	2902      	cmp	r1, #2
10011e24:	d102      	bne.n	10011e2c <gapc_bond_req_ind+0x48>
10011e26:	70d3      	strb	r3, [r2, #3]
10011e28:	200c      	movs	r0, #12
10011e2a:	e03f      	b.n	10011eac <gapc_bond_req_ind+0xc8>
10011e2c:	2901      	cmp	r1, #1
10011e2e:	d1fb      	bne.n	10011e28 <gapc_bond_req_ind+0x44>
10011e30:	70d1      	strb	r1, [r2, #3]
10011e32:	e7f9      	b.n	10011e28 <gapc_bond_req_ind+0x44>
10011e34:	2214      	movs	r2, #20
10011e36:	481e      	ldr	r0, [pc, #120]	; (10011eb0 <gapc_bond_req_ind+0xcc>)
10011e38:	0a1b      	lsrs	r3, r3, #8
10011e3a:	70c3      	strb	r3, [r0, #3]
10011e3c:	4b1d      	ldr	r3, [pc, #116]	; (10011eb4 <gapc_bond_req_ind+0xd0>)
10011e3e:	7002      	strb	r2, [r0, #0]
10011e40:	3a06      	subs	r2, #6
10011e42:	7042      	strb	r2, [r0, #1]
10011e44:	7082      	strb	r2, [r0, #2]
10011e46:	881a      	ldrh	r2, [r3, #0]
10011e48:	881b      	ldrh	r3, [r3, #0]
10011e4a:	4e1b      	ldr	r6, [pc, #108]	; (10011eb8 <gapc_bond_req_ind+0xd4>)
10011e4c:	0a1b      	lsrs	r3, r3, #8
10011e4e:	7143      	strb	r3, [r0, #5]
10011e50:	2301      	movs	r3, #1
10011e52:	7102      	strb	r2, [r0, #4]
10011e54:	7204      	strb	r4, [r0, #8]
10011e56:	7243      	strb	r3, [r0, #9]
10011e58:	1c05      	adds	r5, r0, #0
10011e5a:	1c31      	adds	r1, r6, #0
10011e5c:	300a      	adds	r0, #10
10011e5e:	2c07      	cmp	r4, #7
10011e60:	d116      	bne.n	10011e90 <gapc_bond_req_ind+0xac>
10011e62:	317e      	adds	r1, #126	; 0x7e
10011e64:	2210      	movs	r2, #16
10011e66:	4c15      	ldr	r4, [pc, #84]	; (10011ebc <gapc_bond_req_ind+0xd8>)
10011e68:	47a0      	blx	r4
10011e6a:	1c33      	adds	r3, r6, #0
10011e6c:	1c31      	adds	r1, r6, #0
10011e6e:	1c28      	adds	r0, r5, #0
10011e70:	338e      	adds	r3, #142	; 0x8e
10011e72:	881b      	ldrh	r3, [r3, #0]
10011e74:	3190      	adds	r1, #144	; 0x90
10011e76:	76ab      	strb	r3, [r5, #26]
10011e78:	2208      	movs	r2, #8
10011e7a:	0a1b      	lsrs	r3, r3, #8
10011e7c:	301c      	adds	r0, #28
10011e7e:	76eb      	strb	r3, [r5, #27]
10011e80:	47a0      	blx	r4
10011e82:	1c31      	adds	r1, r6, #0
10011e84:	3198      	adds	r1, #152	; 0x98
10011e86:	780a      	ldrb	r2, [r1, #0]
10011e88:	1d6b      	adds	r3, r5, #5
10011e8a:	77da      	strb	r2, [r3, #31]
10011e8c:	2125      	movs	r1, #37	; 0x25
10011e8e:	e004      	b.n	10011e9a <gapc_bond_req_ind+0xb6>
10011e90:	319a      	adds	r1, #154	; 0x9a
10011e92:	2210      	movs	r2, #16
10011e94:	4b09      	ldr	r3, [pc, #36]	; (10011ebc <gapc_bond_req_ind+0xd8>)
10011e96:	4798      	blx	r3
10011e98:	211a      	movs	r1, #26
10011e9a:	1c0b      	adds	r3, r1, #0
10011e9c:	2400      	movs	r4, #0
10011e9e:	3b08      	subs	r3, #8
10011ea0:	71ab      	strb	r3, [r5, #6]
10011ea2:	1c28      	adds	r0, r5, #0
10011ea4:	4b06      	ldr	r3, [pc, #24]	; (10011ec0 <gapc_bond_req_ind+0xdc>)
10011ea6:	71ec      	strb	r4, [r5, #7]
10011ea8:	4798      	blx	r3
10011eaa:	2000      	movs	r0, #0
10011eac:	bd70      	pop	{r4, r5, r6, pc}
10011eae:	46c0      	nop			; (mov r8, r8)
10011eb0:	1001b348 	.word	0x1001b348
10011eb4:	1001afd8 	.word	0x1001afd8
10011eb8:	1001b06a 	.word	0x1001b06a
10011ebc:	1001521b 	.word	0x1001521b
10011ec0:	10011785 	.word	0x10011785

10011ec4 <gapc_bond_cfm_handler_pair_resp>:
10011ec4:	b5f0      	push	{r4, r5, r6, r7, lr}
10011ec6:	b085      	sub	sp, #20
10011ec8:	1c07      	adds	r7, r0, #0
10011eca:	a80a      	add	r0, sp, #40	; 0x28
10011ecc:	7806      	ldrb	r6, [r0, #0]
10011ece:	a80b      	add	r0, sp, #44	; 0x2c
10011ed0:	7805      	ldrb	r5, [r0, #0]
10011ed2:	a80c      	add	r0, sp, #48	; 0x30
10011ed4:	7800      	ldrb	r0, [r0, #0]
10011ed6:	2414      	movs	r4, #20
10011ed8:	9002      	str	r0, [sp, #8]
10011eda:	a80d      	add	r0, sp, #52	; 0x34
10011edc:	7800      	ldrb	r0, [r0, #0]
10011ede:	9301      	str	r3, [sp, #4]
10011ee0:	9003      	str	r0, [sp, #12]
10011ee2:	a80e      	add	r0, sp, #56	; 0x38
10011ee4:	8800      	ldrh	r0, [r0, #0]
10011ee6:	4684      	mov	ip, r0
10011ee8:	4812      	ldr	r0, [pc, #72]	; (10011f34 <gapc_bond_cfm_handler_pair_resp+0x70>)
10011eea:	7004      	strb	r4, [r0, #0]
10011eec:	3c06      	subs	r4, #6
10011eee:	7044      	strb	r4, [r0, #1]
10011ef0:	7084      	strb	r4, [r0, #2]
10011ef2:	4664      	mov	r4, ip
10011ef4:	70c4      	strb	r4, [r0, #3]
10011ef6:	4c10      	ldr	r4, [pc, #64]	; (10011f38 <gapc_bond_cfm_handler_pair_resp+0x74>)
10011ef8:	7247      	strb	r7, [r0, #9]
10011efa:	8823      	ldrh	r3, [r4, #0]
10011efc:	8824      	ldrh	r4, [r4, #0]
10011efe:	7103      	strb	r3, [r0, #4]
10011f00:	466b      	mov	r3, sp
10011f02:	791b      	ldrb	r3, [r3, #4]
10011f04:	0a24      	lsrs	r4, r4, #8
10011f06:	7303      	strb	r3, [r0, #12]
10011f08:	466b      	mov	r3, sp
10011f0a:	7a1b      	ldrb	r3, [r3, #8]
10011f0c:	7144      	strb	r4, [r0, #5]
10011f0e:	73c3      	strb	r3, [r0, #15]
10011f10:	466b      	mov	r3, sp
10011f12:	7b1b      	ldrb	r3, [r3, #12]
10011f14:	2401      	movs	r4, #1
10011f16:	7403      	strb	r3, [r0, #16]
10011f18:	2309      	movs	r3, #9
10011f1a:	7183      	strb	r3, [r0, #6]
10011f1c:	2300      	movs	r3, #0
10011f1e:	7204      	strb	r4, [r0, #8]
10011f20:	7281      	strb	r1, [r0, #10]
10011f22:	72c2      	strb	r2, [r0, #11]
10011f24:	7346      	strb	r6, [r0, #13]
10011f26:	7385      	strb	r5, [r0, #14]
10011f28:	71c3      	strb	r3, [r0, #7]
10011f2a:	2111      	movs	r1, #17
10011f2c:	4b03      	ldr	r3, [pc, #12]	; (10011f3c <gapc_bond_cfm_handler_pair_resp+0x78>)
10011f2e:	4798      	blx	r3
10011f30:	b005      	add	sp, #20
10011f32:	bdf0      	pop	{r4, r5, r6, r7, pc}
10011f34:	1001b348 	.word	0x1001b348
10011f38:	1001afd8 	.word	0x1001afd8
10011f3c:	10011785 	.word	0x10011785

10011f40 <gapc_bond_cfm_handler_key_exch>:
10011f40:	b538      	push	{r3, r4, r5, lr}
10011f42:	2514      	movs	r5, #20
10011f44:	4c0d      	ldr	r4, [pc, #52]	; (10011f7c <gapc_bond_cfm_handler_key_exch+0x3c>)
10011f46:	70e3      	strb	r3, [r4, #3]
10011f48:	4b0d      	ldr	r3, [pc, #52]	; (10011f80 <gapc_bond_cfm_handler_key_exch+0x40>)
10011f4a:	7025      	strb	r5, [r4, #0]
10011f4c:	3d06      	subs	r5, #6
10011f4e:	7065      	strb	r5, [r4, #1]
10011f50:	70a5      	strb	r5, [r4, #2]
10011f52:	881d      	ldrh	r5, [r3, #0]
10011f54:	881b      	ldrh	r3, [r3, #0]
10011f56:	7220      	strb	r0, [r4, #8]
10011f58:	0a1b      	lsrs	r3, r3, #8
10011f5a:	7163      	strb	r3, [r4, #5]
10011f5c:	7261      	strb	r1, [r4, #9]
10011f5e:	4b09      	ldr	r3, [pc, #36]	; (10011f84 <gapc_bond_cfm_handler_key_exch+0x44>)
10011f60:	1c11      	adds	r1, r2, #0
10011f62:	4809      	ldr	r0, [pc, #36]	; (10011f88 <gapc_bond_cfm_handler_key_exch+0x48>)
10011f64:	2210      	movs	r2, #16
10011f66:	7125      	strb	r5, [r4, #4]
10011f68:	4798      	blx	r3
10011f6a:	2312      	movs	r3, #18
10011f6c:	71a3      	strb	r3, [r4, #6]
10011f6e:	2300      	movs	r3, #0
10011f70:	1c20      	adds	r0, r4, #0
10011f72:	71e3      	strb	r3, [r4, #7]
10011f74:	211a      	movs	r1, #26
10011f76:	4b05      	ldr	r3, [pc, #20]	; (10011f8c <gapc_bond_cfm_handler_key_exch+0x4c>)
10011f78:	4798      	blx	r3
10011f7a:	bd38      	pop	{r3, r4, r5, pc}
10011f7c:	1001b348 	.word	0x1001b348
10011f80:	1001afd8 	.word	0x1001afd8
10011f84:	1001521b 	.word	0x1001521b
10011f88:	1001b352 	.word	0x1001b352
10011f8c:	10011785 	.word	0x10011785

10011f90 <gapc_security_cmd_handler>:
10011f90:	221a      	movs	r2, #26
10011f92:	b508      	push	{r3, lr}
10011f94:	4b0b      	ldr	r3, [pc, #44]	; (10011fc4 <gapc_security_cmd_handler+0x34>)
10011f96:	701a      	strb	r2, [r3, #0]
10011f98:	3a0c      	subs	r2, #12
10011f9a:	705a      	strb	r2, [r3, #1]
10011f9c:	709a      	strb	r2, [r3, #2]
10011f9e:	4a0a      	ldr	r2, [pc, #40]	; (10011fc8 <gapc_security_cmd_handler+0x38>)
10011fa0:	70d8      	strb	r0, [r3, #3]
10011fa2:	8810      	ldrh	r0, [r2, #0]
10011fa4:	8812      	ldrh	r2, [r2, #0]
10011fa6:	7118      	strb	r0, [r3, #4]
10011fa8:	0a12      	lsrs	r2, r2, #8
10011faa:	715a      	strb	r2, [r3, #5]
10011fac:	220c      	movs	r2, #12
10011fae:	721a      	strb	r2, [r3, #8]
10011fb0:	3a0a      	subs	r2, #10
10011fb2:	719a      	strb	r2, [r3, #6]
10011fb4:	2200      	movs	r2, #0
10011fb6:	7259      	strb	r1, [r3, #9]
10011fb8:	71da      	strb	r2, [r3, #7]
10011fba:	1c18      	adds	r0, r3, #0
10011fbc:	210a      	movs	r1, #10
10011fbe:	4b03      	ldr	r3, [pc, #12]	; (10011fcc <gapc_security_cmd_handler+0x3c>)
10011fc0:	4798      	blx	r3
10011fc2:	bd08      	pop	{r3, pc}
10011fc4:	1001b348 	.word	0x1001b348
10011fc8:	1001afd8 	.word	0x1001afd8
10011fcc:	10011785 	.word	0x10011785

10011fd0 <gapc_encrypt_cmd_handler>:
10011fd0:	b5f0      	push	{r4, r5, r6, r7, lr}
10011fd2:	2500      	movs	r5, #0
10011fd4:	b089      	sub	sp, #36	; 0x24
10011fd6:	9306      	str	r3, [sp, #24]
10011fd8:	ab0e      	add	r3, sp, #56	; 0x38
10011fda:	781b      	ldrb	r3, [r3, #0]
10011fdc:	1c17      	adds	r7, r2, #0
10011fde:	9307      	str	r3, [sp, #28]
10011fe0:	ab0f      	add	r3, sp, #60	; 0x3c
10011fe2:	781b      	ldrb	r3, [r3, #0]
10011fe4:	4a19      	ldr	r2, [pc, #100]	; (1001204c <gapc_encrypt_cmd_handler+0x7c>)
10011fe6:	1c06      	adds	r6, r0, #0
10011fe8:	9105      	str	r1, [sp, #20]
10011fea:	9300      	str	r3, [sp, #0]
10011fec:	9002      	str	r0, [sp, #8]
10011fee:	1c29      	adds	r1, r5, #0
10011ff0:	1c2b      	adds	r3, r5, #0
10011ff2:	9501      	str	r5, [sp, #4]
10011ff4:	1c10      	adds	r0, r2, #0
10011ff6:	4c16      	ldr	r4, [pc, #88]	; (10012050 <gapc_encrypt_cmd_handler+0x80>)
10011ff8:	47a0      	blx	r4
10011ffa:	2316      	movs	r3, #22
10011ffc:	4c15      	ldr	r4, [pc, #84]	; (10012054 <gapc_encrypt_cmd_handler+0x84>)
10011ffe:	9905      	ldr	r1, [sp, #20]
10012000:	7023      	strb	r3, [r4, #0]
10012002:	3b08      	subs	r3, #8
10012004:	7063      	strb	r3, [r4, #1]
10012006:	70a3      	strb	r3, [r4, #2]
10012008:	4b13      	ldr	r3, [pc, #76]	; (10012058 <gapc_encrypt_cmd_handler+0x88>)
1001200a:	70e6      	strb	r6, [r4, #3]
1001200c:	881a      	ldrh	r2, [r3, #0]
1001200e:	881b      	ldrh	r3, [r3, #0]
10012010:	7122      	strb	r2, [r4, #4]
10012012:	0a1b      	lsrs	r3, r3, #8
10012014:	7163      	strb	r3, [r4, #5]
10012016:	230b      	movs	r3, #11
10012018:	4e10      	ldr	r6, [pc, #64]	; (1001205c <gapc_encrypt_cmd_handler+0x8c>)
1001201a:	2210      	movs	r2, #16
1001201c:	4810      	ldr	r0, [pc, #64]	; (10012060 <gapc_encrypt_cmd_handler+0x90>)
1001201e:	7223      	strb	r3, [r4, #8]
10012020:	7265      	strb	r5, [r4, #9]
10012022:	47b0      	blx	r6
10012024:	0a3b      	lsrs	r3, r7, #8
10012026:	9906      	ldr	r1, [sp, #24]
10012028:	2208      	movs	r2, #8
1001202a:	480e      	ldr	r0, [pc, #56]	; (10012064 <gapc_encrypt_cmd_handler+0x94>)
1001202c:	76e3      	strb	r3, [r4, #27]
1001202e:	76a7      	strb	r7, [r4, #26]
10012030:	47b0      	blx	r6
10012032:	466a      	mov	r2, sp
10012034:	7f12      	ldrb	r2, [r2, #28]
10012036:	1d63      	adds	r3, r4, #5
10012038:	77da      	strb	r2, [r3, #31]
1001203a:	231d      	movs	r3, #29
1001203c:	1c20      	adds	r0, r4, #0
1001203e:	71a3      	strb	r3, [r4, #6]
10012040:	2125      	movs	r1, #37	; 0x25
10012042:	4b09      	ldr	r3, [pc, #36]	; (10012068 <gapc_encrypt_cmd_handler+0x98>)
10012044:	71e5      	strb	r5, [r4, #7]
10012046:	4798      	blx	r3
10012048:	b009      	add	sp, #36	; 0x24
1001204a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001204c:	1001a108 	.word	0x1001a108
10012050:	10011a89 	.word	0x10011a89
10012054:	1001b348 	.word	0x1001b348
10012058:	1001afd8 	.word	0x1001afd8
1001205c:	1001521b 	.word	0x1001521b
10012060:	1001b352 	.word	0x1001b352
10012064:	1001b364 	.word	0x1001b364
10012068:	10011785 	.word	0x10011785

1001206c <gapc_encrypt_req_ind>:
1001206c:	b508      	push	{r3, lr}
1001206e:	0a00      	lsrs	r0, r0, #8
10012070:	8010      	strh	r0, [r2, #0]
10012072:	784b      	ldrb	r3, [r1, #1]
10012074:	7808      	ldrb	r0, [r1, #0]
10012076:	021b      	lsls	r3, r3, #8
10012078:	4303      	orrs	r3, r0
1001207a:	8053      	strh	r3, [r2, #2]
1001207c:	1d10      	adds	r0, r2, #4
1001207e:	3102      	adds	r1, #2
10012080:	2208      	movs	r2, #8
10012082:	4b01      	ldr	r3, [pc, #4]	; (10012088 <gapc_encrypt_req_ind+0x1c>)
10012084:	4798      	blx	r3
10012086:	bd08      	pop	{r3, pc}
10012088:	1001521b 	.word	0x1001521b

1001208c <gapc_encrypt_cfm_handler>:
1001208c:	b5f0      	push	{r4, r5, r6, r7, lr}
1001208e:	2500      	movs	r5, #0
10012090:	b087      	sub	sp, #28
10012092:	9304      	str	r3, [sp, #16]
10012094:	ab0c      	add	r3, sp, #48	; 0x30
10012096:	781b      	ldrb	r3, [r3, #0]
10012098:	1c17      	adds	r7, r2, #0
1001209a:	4a15      	ldr	r2, [pc, #84]	; (100120f0 <gapc_encrypt_cfm_handler+0x64>)
1001209c:	1c06      	adds	r6, r0, #0
1001209e:	9305      	str	r3, [sp, #20]
100120a0:	9100      	str	r1, [sp, #0]
100120a2:	9002      	str	r0, [sp, #8]
100120a4:	1c29      	adds	r1, r5, #0
100120a6:	1c2b      	adds	r3, r5, #0
100120a8:	9501      	str	r5, [sp, #4]
100120aa:	1c10      	adds	r0, r2, #0
100120ac:	4c11      	ldr	r4, [pc, #68]	; (100120f4 <gapc_encrypt_cfm_handler+0x68>)
100120ae:	47a0      	blx	r4
100120b0:	2318      	movs	r3, #24
100120b2:	4c11      	ldr	r4, [pc, #68]	; (100120f8 <gapc_encrypt_cfm_handler+0x6c>)
100120b4:	9904      	ldr	r1, [sp, #16]
100120b6:	7023      	strb	r3, [r4, #0]
100120b8:	3b0a      	subs	r3, #10
100120ba:	7063      	strb	r3, [r4, #1]
100120bc:	70a3      	strb	r3, [r4, #2]
100120be:	4b0f      	ldr	r3, [pc, #60]	; (100120fc <gapc_encrypt_cfm_handler+0x70>)
100120c0:	480f      	ldr	r0, [pc, #60]	; (10012100 <gapc_encrypt_cfm_handler+0x74>)
100120c2:	881a      	ldrh	r2, [r3, #0]
100120c4:	881b      	ldrh	r3, [r3, #0]
100120c6:	7122      	strb	r2, [r4, #4]
100120c8:	0a1b      	lsrs	r3, r3, #8
100120ca:	7163      	strb	r3, [r4, #5]
100120cc:	2210      	movs	r2, #16
100120ce:	4b0d      	ldr	r3, [pc, #52]	; (10012104 <gapc_encrypt_cfm_handler+0x78>)
100120d0:	70e6      	strb	r6, [r4, #3]
100120d2:	7227      	strb	r7, [r4, #8]
100120d4:	4798      	blx	r3
100120d6:	466b      	mov	r3, sp
100120d8:	7d1b      	ldrb	r3, [r3, #20]
100120da:	1c20      	adds	r0, r4, #0
100120dc:	7663      	strb	r3, [r4, #25]
100120de:	2312      	movs	r3, #18
100120e0:	211a      	movs	r1, #26
100120e2:	71a3      	strb	r3, [r4, #6]
100120e4:	4b08      	ldr	r3, [pc, #32]	; (10012108 <gapc_encrypt_cfm_handler+0x7c>)
100120e6:	71e5      	strb	r5, [r4, #7]
100120e8:	4798      	blx	r3
100120ea:	b007      	add	sp, #28
100120ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
100120ee:	46c0      	nop			; (mov r8, r8)
100120f0:	1001a118 	.word	0x1001a118
100120f4:	10011a89 	.word	0x10011a89
100120f8:	1001b348 	.word	0x1001b348
100120fc:	1001afd8 	.word	0x1001afd8
10012100:	1001b351 	.word	0x1001b351
10012104:	1001521b 	.word	0x1001521b
10012108:	10011785 	.word	0x10011785

1001210c <gapc_encrypt_ind>:
1001210c:	780b      	ldrb	r3, [r1, #0]
1001210e:	0a00      	lsrs	r0, r0, #8
10012110:	70d3      	strb	r3, [r2, #3]
10012112:	2300      	movs	r3, #0
10012114:	8010      	strh	r0, [r2, #0]
10012116:	7093      	strb	r3, [r2, #2]
10012118:	4770      	bx	lr
	...

1001211c <gapc_param_update_cfm_handler>:
1001211c:	b538      	push	{r3, r4, r5, lr}
1001211e:	2410      	movs	r4, #16
10012120:	1c05      	adds	r5, r0, #0
10012122:	480e      	ldr	r0, [pc, #56]	; (1001215c <gapc_param_update_cfm_handler+0x40>)
10012124:	7004      	strb	r4, [r0, #0]
10012126:	3c02      	subs	r4, #2
10012128:	7044      	strb	r4, [r0, #1]
1001212a:	7084      	strb	r4, [r0, #2]
1001212c:	4c0c      	ldr	r4, [pc, #48]	; (10012160 <gapc_param_update_cfm_handler+0x44>)
1001212e:	70c5      	strb	r5, [r0, #3]
10012130:	8825      	ldrh	r5, [r4, #0]
10012132:	8824      	ldrh	r4, [r4, #0]
10012134:	72c3      	strb	r3, [r0, #11]
10012136:	0a1b      	lsrs	r3, r3, #8
10012138:	0a24      	lsrs	r4, r4, #8
1001213a:	7303      	strb	r3, [r0, #12]
1001213c:	2305      	movs	r3, #5
1001213e:	7144      	strb	r4, [r0, #5]
10012140:	2400      	movs	r4, #0
10012142:	7201      	strb	r1, [r0, #8]
10012144:	7242      	strb	r2, [r0, #9]
10012146:	7183      	strb	r3, [r0, #6]
10012148:	0a12      	lsrs	r2, r2, #8
1001214a:	210d      	movs	r1, #13
1001214c:	4b05      	ldr	r3, [pc, #20]	; (10012164 <gapc_param_update_cfm_handler+0x48>)
1001214e:	7105      	strb	r5, [r0, #4]
10012150:	7282      	strb	r2, [r0, #10]
10012152:	71c4      	strb	r4, [r0, #7]
10012154:	4798      	blx	r3
10012156:	1c20      	adds	r0, r4, #0
10012158:	bd38      	pop	{r3, r4, r5, pc}
1001215a:	46c0      	nop			; (mov r8, r8)
1001215c:	1001b348 	.word	0x1001b348
10012160:	1001afd8 	.word	0x1001afd8
10012164:	10011785 	.word	0x10011785

10012168 <gapc_param_updated_ind>:
10012168:	2300      	movs	r3, #0
1001216a:	0a00      	lsrs	r0, r0, #8
1001216c:	8010      	strh	r0, [r2, #0]
1001216e:	7093      	strb	r3, [r2, #2]
10012170:	784b      	ldrb	r3, [r1, #1]
10012172:	7808      	ldrb	r0, [r1, #0]
10012174:	021b      	lsls	r3, r3, #8
10012176:	4303      	orrs	r3, r0
10012178:	8093      	strh	r3, [r2, #4]
1001217a:	78cb      	ldrb	r3, [r1, #3]
1001217c:	7888      	ldrb	r0, [r1, #2]
1001217e:	021b      	lsls	r3, r3, #8
10012180:	4303      	orrs	r3, r0
10012182:	80d3      	strh	r3, [r2, #6]
10012184:	794b      	ldrb	r3, [r1, #5]
10012186:	7909      	ldrb	r1, [r1, #4]
10012188:	021b      	lsls	r3, r3, #8
1001218a:	430b      	orrs	r3, r1
1001218c:	2007      	movs	r0, #7
1001218e:	8113      	strh	r3, [r2, #8]
10012190:	4770      	bx	lr

10012192 <gapc_param_updated_req_ind>:
10012192:	0a00      	lsrs	r0, r0, #8
10012194:	8010      	strh	r0, [r2, #0]
10012196:	784b      	ldrb	r3, [r1, #1]
10012198:	7808      	ldrb	r0, [r1, #0]
1001219a:	021b      	lsls	r3, r3, #8
1001219c:	4303      	orrs	r3, r0
1001219e:	8053      	strh	r3, [r2, #2]
100121a0:	78cb      	ldrb	r3, [r1, #3]
100121a2:	7888      	ldrb	r0, [r1, #2]
100121a4:	021b      	lsls	r3, r3, #8
100121a6:	4303      	orrs	r3, r0
100121a8:	8093      	strh	r3, [r2, #4]
100121aa:	794b      	ldrb	r3, [r1, #5]
100121ac:	7908      	ldrb	r0, [r1, #4]
100121ae:	021b      	lsls	r3, r3, #8
100121b0:	4303      	orrs	r3, r0
100121b2:	80d3      	strh	r3, [r2, #6]
100121b4:	79cb      	ldrb	r3, [r1, #7]
100121b6:	7989      	ldrb	r1, [r1, #6]
100121b8:	021b      	lsls	r3, r3, #8
100121ba:	430b      	orrs	r3, r1
100121bc:	2008      	movs	r0, #8
100121be:	8113      	strh	r3, [r2, #8]
100121c0:	4770      	bx	lr
	...

100121c4 <gapc_dev_info_req_ind_handler>:
100121c4:	b508      	push	{r3, lr}
100121c6:	1c0b      	adds	r3, r1, #0
100121c8:	0a01      	lsrs	r1, r0, #8
100121ca:	8011      	strh	r1, [r2, #0]
100121cc:	7818      	ldrb	r0, [r3, #0]
100121ce:	7090      	strb	r0, [r2, #2]
100121d0:	2800      	cmp	r0, #0
100121d2:	d104      	bne.n	100121de <gapc_dev_info_req_ind_handler+0x1a>
100121d4:	4b03      	ldr	r3, [pc, #12]	; (100121e4 <gapc_dev_info_req_ind_handler+0x20>)
100121d6:	33aa      	adds	r3, #170	; 0xaa
100121d8:	881b      	ldrh	r3, [r3, #0]
100121da:	2b00      	cmp	r3, #0
100121dc:	d001      	beq.n	100121e2 <gapc_dev_info_req_ind_handler+0x1e>
100121de:	4b02      	ldr	r3, [pc, #8]	; (100121e8 <gapc_dev_info_req_ind_handler+0x24>)
100121e0:	4798      	blx	r3
100121e2:	bd08      	pop	{r3, pc}
100121e4:	1001b06a 	.word	0x1001b06a
100121e8:	10011895 	.word	0x10011895

100121ec <gapc_sec_req_ind>:
100121ec:	0a00      	lsrs	r0, r0, #8
100121ee:	8010      	strh	r0, [r2, #0]
100121f0:	7809      	ldrb	r1, [r1, #0]
100121f2:	2301      	movs	r3, #1
100121f4:	1c08      	adds	r0, r1, #0
100121f6:	0889      	lsrs	r1, r1, #2
100121f8:	4018      	ands	r0, r3
100121fa:	400b      	ands	r3, r1
100121fc:	70d0      	strb	r0, [r2, #3]
100121fe:	7113      	strb	r3, [r2, #4]
10012200:	4770      	bx	lr

10012202 <gapc_sign_counter_ind_handler>:
10012202:	0a00      	lsrs	r0, r0, #8
10012204:	8010      	strh	r0, [r2, #0]
10012206:	784b      	ldrb	r3, [r1, #1]
10012208:	0218      	lsls	r0, r3, #8
1001220a:	788b      	ldrb	r3, [r1, #2]
1001220c:	041b      	lsls	r3, r3, #16
1001220e:	4303      	orrs	r3, r0
10012210:	7808      	ldrb	r0, [r1, #0]
10012212:	4303      	orrs	r3, r0
10012214:	78c8      	ldrb	r0, [r1, #3]
10012216:	0600      	lsls	r0, r0, #24
10012218:	4303      	orrs	r3, r0
1001221a:	6053      	str	r3, [r2, #4]
1001221c:	794b      	ldrb	r3, [r1, #5]
1001221e:	0218      	lsls	r0, r3, #8
10012220:	798b      	ldrb	r3, [r1, #6]
10012222:	041b      	lsls	r3, r3, #16
10012224:	4303      	orrs	r3, r0
10012226:	7908      	ldrb	r0, [r1, #4]
10012228:	79c9      	ldrb	r1, [r1, #7]
1001222a:	4303      	orrs	r3, r0
1001222c:	0609      	lsls	r1, r1, #24
1001222e:	430b      	orrs	r3, r1
10012230:	2000      	movs	r0, #0
10012232:	6093      	str	r3, [r2, #8]
10012234:	4770      	bx	lr
	...

10012238 <gapc_peer_att_info_ind_handler>:
10012238:	b510      	push	{r4, lr}
1001223a:	0a00      	lsrs	r0, r0, #8
1001223c:	8010      	strh	r0, [r2, #0]
1001223e:	7808      	ldrb	r0, [r1, #0]
10012240:	7090      	strb	r0, [r2, #2]
10012242:	788b      	ldrb	r3, [r1, #2]
10012244:	784c      	ldrb	r4, [r1, #1]
10012246:	021b      	lsls	r3, r3, #8
10012248:	4323      	orrs	r3, r4
1001224a:	8093      	strh	r3, [r2, #4]
1001224c:	2801      	cmp	r0, #1
1001224e:	d027      	beq.n	100122a0 <gapc_peer_att_info_ind_handler+0x68>
10012250:	2800      	cmp	r0, #0
10012252:	d017      	beq.n	10012284 <gapc_peer_att_info_ind_handler+0x4c>
10012254:	2802      	cmp	r0, #2
10012256:	d12a      	bne.n	100122ae <gapc_peer_att_info_ind_handler+0x76>
10012258:	790b      	ldrb	r3, [r1, #4]
1001225a:	78c8      	ldrb	r0, [r1, #3]
1001225c:	021b      	lsls	r3, r3, #8
1001225e:	4303      	orrs	r3, r0
10012260:	8113      	strh	r3, [r2, #8]
10012262:	798b      	ldrb	r3, [r1, #6]
10012264:	7948      	ldrb	r0, [r1, #5]
10012266:	021b      	lsls	r3, r3, #8
10012268:	4303      	orrs	r3, r0
1001226a:	80d3      	strh	r3, [r2, #6]
1001226c:	7a0b      	ldrb	r3, [r1, #8]
1001226e:	79c8      	ldrb	r0, [r1, #7]
10012270:	021b      	lsls	r3, r3, #8
10012272:	4303      	orrs	r3, r0
10012274:	8193      	strh	r3, [r2, #12]
10012276:	7a8b      	ldrb	r3, [r1, #10]
10012278:	7a49      	ldrb	r1, [r1, #9]
1001227a:	021b      	lsls	r3, r3, #8
1001227c:	430b      	orrs	r3, r1
1001227e:	8153      	strh	r3, [r2, #10]
10012280:	2306      	movs	r3, #6
10012282:	e013      	b.n	100122ac <gapc_peer_att_info_ind_handler+0x74>
10012284:	1c14      	adds	r4, r2, #0
10012286:	1c20      	adds	r0, r4, #0
10012288:	790a      	ldrb	r2, [r1, #4]
1001228a:	78cb      	ldrb	r3, [r1, #3]
1001228c:	0212      	lsls	r2, r2, #8
1001228e:	431a      	orrs	r2, r3
10012290:	80e2      	strh	r2, [r4, #6]
10012292:	4b07      	ldr	r3, [pc, #28]	; (100122b0 <gapc_peer_att_info_ind_handler+0x78>)
10012294:	3008      	adds	r0, #8
10012296:	3105      	adds	r1, #5
10012298:	4798      	blx	r3
1001229a:	2302      	movs	r3, #2
1001229c:	70a3      	strb	r3, [r4, #2]
1001229e:	e006      	b.n	100122ae <gapc_peer_att_info_ind_handler+0x76>
100122a0:	790b      	ldrb	r3, [r1, #4]
100122a2:	78c9      	ldrb	r1, [r1, #3]
100122a4:	021b      	lsls	r3, r3, #8
100122a6:	430b      	orrs	r3, r1
100122a8:	80d3      	strh	r3, [r2, #6]
100122aa:	2305      	movs	r3, #5
100122ac:	7093      	strb	r3, [r2, #2]
100122ae:	bd10      	pop	{r4, pc}
100122b0:	1001521b 	.word	0x1001521b

100122b4 <gapc_con_channel_map_ind_handler>:
100122b4:	b508      	push	{r3, lr}
100122b6:	2300      	movs	r3, #0
100122b8:	0a00      	lsrs	r0, r0, #8
100122ba:	7013      	strb	r3, [r2, #0]
100122bc:	8050      	strh	r0, [r2, #2]
100122be:	4b02      	ldr	r3, [pc, #8]	; (100122c8 <gapc_con_channel_map_ind_handler+0x14>)
100122c0:	1d10      	adds	r0, r2, #4
100122c2:	2205      	movs	r2, #5
100122c4:	4798      	blx	r3
100122c6:	bd08      	pop	{r3, pc}
100122c8:	1001521b 	.word	0x1001521b

100122cc <gapc_lecb_connected>:
100122cc:	7843      	ldrb	r3, [r0, #1]
100122ce:	7802      	ldrb	r2, [r0, #0]
100122d0:	021b      	lsls	r3, r3, #8
100122d2:	4313      	orrs	r3, r2
100122d4:	800b      	strh	r3, [r1, #0]
100122d6:	78c3      	ldrb	r3, [r0, #3]
100122d8:	7882      	ldrb	r2, [r0, #2]
100122da:	021b      	lsls	r3, r3, #8
100122dc:	4313      	orrs	r3, r2
100122de:	804b      	strh	r3, [r1, #2]
100122e0:	7943      	ldrb	r3, [r0, #5]
100122e2:	7902      	ldrb	r2, [r0, #4]
100122e4:	021b      	lsls	r3, r3, #8
100122e6:	4313      	orrs	r3, r2
100122e8:	808b      	strh	r3, [r1, #4]
100122ea:	79c3      	ldrb	r3, [r0, #7]
100122ec:	7982      	ldrb	r2, [r0, #6]
100122ee:	021b      	lsls	r3, r3, #8
100122f0:	4313      	orrs	r3, r2
100122f2:	80cb      	strh	r3, [r1, #6]
100122f4:	2300      	movs	r3, #0
100122f6:	720b      	strb	r3, [r1, #8]
100122f8:	4770      	bx	lr

100122fa <gapc_lecb_disconnected>:
100122fa:	7843      	ldrb	r3, [r0, #1]
100122fc:	7802      	ldrb	r2, [r0, #0]
100122fe:	021b      	lsls	r3, r3, #8
10012300:	4313      	orrs	r3, r2
10012302:	800b      	strh	r3, [r1, #0]
10012304:	78c3      	ldrb	r3, [r0, #3]
10012306:	7882      	ldrb	r2, [r0, #2]
10012308:	021b      	lsls	r3, r3, #8
1001230a:	4313      	orrs	r3, r2
1001230c:	804b      	strh	r3, [r1, #2]
1001230e:	4770      	bx	lr

10012310 <gapc_lecb_connect_req_ind>:
10012310:	7843      	ldrb	r3, [r0, #1]
10012312:	7802      	ldrb	r2, [r0, #0]
10012314:	021b      	lsls	r3, r3, #8
10012316:	4313      	orrs	r3, r2
10012318:	800b      	strh	r3, [r1, #0]
1001231a:	78c3      	ldrb	r3, [r0, #3]
1001231c:	7882      	ldrb	r2, [r0, #2]
1001231e:	021b      	lsls	r3, r3, #8
10012320:	4313      	orrs	r3, r2
10012322:	804b      	strh	r3, [r1, #2]
10012324:	7943      	ldrb	r3, [r0, #5]
10012326:	7902      	ldrb	r2, [r0, #4]
10012328:	021b      	lsls	r3, r3, #8
1001232a:	4313      	orrs	r3, r2
1001232c:	808b      	strh	r3, [r1, #4]
1001232e:	79c3      	ldrb	r3, [r0, #7]
10012330:	7982      	ldrb	r2, [r0, #6]
10012332:	021b      	lsls	r3, r3, #8
10012334:	4313      	orrs	r3, r2
10012336:	80cb      	strh	r3, [r1, #6]
10012338:	4770      	bx	lr

1001233a <gapc_lecb_add_credit_resp_handler>:
1001233a:	7843      	ldrb	r3, [r0, #1]
1001233c:	7802      	ldrb	r2, [r0, #0]
1001233e:	021b      	lsls	r3, r3, #8
10012340:	4313      	orrs	r3, r2
10012342:	800b      	strh	r3, [r1, #0]
10012344:	78c3      	ldrb	r3, [r0, #3]
10012346:	7882      	ldrb	r2, [r0, #2]
10012348:	021b      	lsls	r3, r3, #8
1001234a:	4313      	orrs	r3, r2
1001234c:	804b      	strh	r3, [r1, #2]
1001234e:	7943      	ldrb	r3, [r0, #5]
10012350:	7902      	ldrb	r2, [r0, #4]
10012352:	021b      	lsls	r3, r3, #8
10012354:	4313      	orrs	r3, r2
10012356:	808b      	strh	r3, [r1, #4]
10012358:	4770      	bx	lr
	...

1001235c <gapm_reset_req_handler>:
1001235c:	b573      	push	{r0, r1, r4, r5, r6, lr}
1001235e:	466b      	mov	r3, sp
10012360:	4915      	ldr	r1, [pc, #84]	; (100123b8 <gapm_reset_req_handler+0x5c>)
10012362:	4816      	ldr	r0, [pc, #88]	; (100123bc <gapm_reset_req_handler+0x60>)
10012364:	880c      	ldrh	r4, [r1, #0]
10012366:	8809      	ldrh	r1, [r1, #0]
10012368:	1ddd      	adds	r5, r3, #7
1001236a:	0a09      	lsrs	r1, r1, #8
1001236c:	2300      	movs	r3, #0
1001236e:	2202      	movs	r2, #2
10012370:	7141      	strb	r1, [r0, #5]
10012372:	26d0      	movs	r6, #208	; 0xd0
10012374:	2101      	movs	r1, #1
10012376:	7104      	strb	r4, [r0, #4]
10012378:	4c11      	ldr	r4, [pc, #68]	; (100123c0 <gapm_reset_req_handler+0x64>)
1001237a:	702b      	strb	r3, [r5, #0]
1001237c:	7002      	strb	r2, [r0, #0]
1001237e:	70c3      	strb	r3, [r0, #3]
10012380:	320b      	adds	r2, #11
10012382:	7201      	strb	r1, [r0, #8]
10012384:	7181      	strb	r1, [r0, #6]
10012386:	71c3      	strb	r3, [r0, #7]
10012388:	3108      	adds	r1, #8
1001238a:	4b0e      	ldr	r3, [pc, #56]	; (100123c4 <gapm_reset_req_handler+0x68>)
1001238c:	0136      	lsls	r6, r6, #4
1001238e:	7042      	strb	r2, [r0, #1]
10012390:	7082      	strb	r2, [r0, #2]
10012392:	80a2      	strh	r2, [r4, #4]
10012394:	8026      	strh	r6, [r4, #0]
10012396:	4798      	blx	r3
10012398:	1c28      	adds	r0, r5, #0
1001239a:	4b0b      	ldr	r3, [pc, #44]	; (100123c8 <gapm_reset_req_handler+0x6c>)
1001239c:	4798      	blx	r3
1001239e:	782b      	ldrb	r3, [r5, #0]
100123a0:	20e2      	movs	r0, #226	; 0xe2
100123a2:	2b00      	cmp	r3, #0
100123a4:	d106      	bne.n	100123b4 <gapm_reset_req_handler+0x58>
100123a6:	68a3      	ldr	r3, [r4, #8]
100123a8:	20e2      	movs	r0, #226	; 0xe2
100123aa:	781a      	ldrb	r2, [r3, #0]
100123ac:	785b      	ldrb	r3, [r3, #1]
100123ae:	2a01      	cmp	r2, #1
100123b0:	d100      	bne.n	100123b4 <gapm_reset_req_handler+0x58>
100123b2:	1c18      	adds	r0, r3, #0
100123b4:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
100123b6:	46c0      	nop			; (mov r8, r8)
100123b8:	1001afd8 	.word	0x1001afd8
100123bc:	1001b348 	.word	0x1001b348
100123c0:	1001afcc 	.word	0x1001afcc
100123c4:	10011785 	.word	0x10011785
100123c8:	100117e9 	.word	0x100117e9

100123cc <gapm_set_dev_config_cmd_handler>:
100123cc:	b5f0      	push	{r4, r5, r6, r7, lr}
100123ce:	b089      	sub	sp, #36	; 0x24
100123d0:	9303      	str	r3, [sp, #12]
100123d2:	ab0e      	add	r3, sp, #56	; 0x38
100123d4:	781b      	ldrb	r3, [r3, #0]
100123d6:	4c37      	ldr	r4, [pc, #220]	; (100124b4 <gapm_set_dev_config_cmd_handler+0xe8>)
100123d8:	9304      	str	r3, [sp, #16]
100123da:	ab0f      	add	r3, sp, #60	; 0x3c
100123dc:	781b      	ldrb	r3, [r3, #0]
100123de:	270d      	movs	r7, #13
100123e0:	9305      	str	r3, [sp, #20]
100123e2:	ab10      	add	r3, sp, #64	; 0x40
100123e4:	881b      	ldrh	r3, [r3, #0]
100123e6:	72a1      	strb	r1, [r4, #10]
100123e8:	9300      	str	r3, [sp, #0]
100123ea:	ab11      	add	r3, sp, #68	; 0x44
100123ec:	881b      	ldrh	r3, [r3, #0]
100123ee:	0a09      	lsrs	r1, r1, #8
100123f0:	9301      	str	r3, [sp, #4]
100123f2:	ab12      	add	r3, sp, #72	; 0x48
100123f4:	881b      	ldrh	r3, [r3, #0]
100123f6:	7260      	strb	r0, [r4, #9]
100123f8:	9302      	str	r3, [sp, #8]
100123fa:	ab06      	add	r3, sp, #24
100123fc:	1dde      	adds	r6, r3, #7
100123fe:	2300      	movs	r3, #0
10012400:	7033      	strb	r3, [r6, #0]
10012402:	2304      	movs	r3, #4
10012404:	7023      	strb	r3, [r4, #0]
10012406:	2300      	movs	r3, #0
10012408:	70e3      	strb	r3, [r4, #3]
1001240a:	4b2b      	ldr	r3, [pc, #172]	; (100124b8 <gapm_set_dev_config_cmd_handler+0xec>)
1001240c:	72e1      	strb	r1, [r4, #11]
1001240e:	881d      	ldrh	r5, [r3, #0]
10012410:	881b      	ldrh	r3, [r3, #0]
10012412:	1c11      	adds	r1, r2, #0
10012414:	0a1b      	lsrs	r3, r3, #8
10012416:	7163      	strb	r3, [r4, #5]
10012418:	2303      	movs	r3, #3
1001241a:	7125      	strb	r5, [r4, #4]
1001241c:	2206      	movs	r2, #6
1001241e:	4d27      	ldr	r5, [pc, #156]	; (100124bc <gapm_set_dev_config_cmd_handler+0xf0>)
10012420:	4827      	ldr	r0, [pc, #156]	; (100124c0 <gapm_set_dev_config_cmd_handler+0xf4>)
10012422:	7223      	strb	r3, [r4, #8]
10012424:	7067      	strb	r7, [r4, #1]
10012426:	70a7      	strb	r7, [r4, #2]
10012428:	47a8      	blx	r5
1001242a:	9903      	ldr	r1, [sp, #12]
1001242c:	2210      	movs	r2, #16
1001242e:	4825      	ldr	r0, [pc, #148]	; (100124c4 <gapm_set_dev_config_cmd_handler+0xf8>)
10012430:	47a8      	blx	r5
10012432:	466a      	mov	r2, sp
10012434:	7c12      	ldrb	r2, [r2, #16]
10012436:	1ce3      	adds	r3, r4, #3
10012438:	77da      	strb	r2, [r3, #31]
1001243a:	466a      	mov	r2, sp
1001243c:	7d12      	ldrb	r2, [r2, #20]
1001243e:	1d23      	adds	r3, r4, #4
10012440:	77da      	strb	r2, [r3, #31]
10012442:	466a      	mov	r2, sp
10012444:	7812      	ldrb	r2, [r2, #0]
10012446:	1d63      	adds	r3, r4, #5
10012448:	77da      	strb	r2, [r3, #31]
1001244a:	9b00      	ldr	r3, [sp, #0]
1001244c:	1da2      	adds	r2, r4, #6
1001244e:	0a1b      	lsrs	r3, r3, #8
10012450:	77d3      	strb	r3, [r2, #31]
10012452:	466a      	mov	r2, sp
10012454:	7912      	ldrb	r2, [r2, #4]
10012456:	1de3      	adds	r3, r4, #7
10012458:	77da      	strb	r2, [r3, #31]
1001245a:	1c22      	adds	r2, r4, #0
1001245c:	9b01      	ldr	r3, [sp, #4]
1001245e:	3208      	adds	r2, #8
10012460:	0a1b      	lsrs	r3, r3, #8
10012462:	77d3      	strb	r3, [r2, #31]
10012464:	466a      	mov	r2, sp
10012466:	1c23      	adds	r3, r4, #0
10012468:	7a12      	ldrb	r2, [r2, #8]
1001246a:	3328      	adds	r3, #40	; 0x28
1001246c:	701a      	strb	r2, [r3, #0]
1001246e:	1c22      	adds	r2, r4, #0
10012470:	9b02      	ldr	r3, [sp, #8]
10012472:	3229      	adds	r2, #41	; 0x29
10012474:	0a1b      	lsrs	r3, r3, #8
10012476:	7013      	strb	r3, [r2, #0]
10012478:	23d0      	movs	r3, #208	; 0xd0
1001247a:	4d13      	ldr	r5, [pc, #76]	; (100124c8 <gapm_set_dev_config_cmd_handler+0xfc>)
1001247c:	011b      	lsls	r3, r3, #4
1001247e:	802b      	strh	r3, [r5, #0]
10012480:	2322      	movs	r3, #34	; 0x22
10012482:	71a3      	strb	r3, [r4, #6]
10012484:	2300      	movs	r3, #0
10012486:	212a      	movs	r1, #42	; 0x2a
10012488:	71e3      	strb	r3, [r4, #7]
1001248a:	1c20      	adds	r0, r4, #0
1001248c:	4b0f      	ldr	r3, [pc, #60]	; (100124cc <gapm_set_dev_config_cmd_handler+0x100>)
1001248e:	80af      	strh	r7, [r5, #4]
10012490:	4798      	blx	r3
10012492:	1c30      	adds	r0, r6, #0
10012494:	4b0e      	ldr	r3, [pc, #56]	; (100124d0 <gapm_set_dev_config_cmd_handler+0x104>)
10012496:	4798      	blx	r3
10012498:	7833      	ldrb	r3, [r6, #0]
1001249a:	20e2      	movs	r0, #226	; 0xe2
1001249c:	2b00      	cmp	r3, #0
1001249e:	d106      	bne.n	100124ae <gapm_set_dev_config_cmd_handler+0xe2>
100124a0:	68ab      	ldr	r3, [r5, #8]
100124a2:	20e2      	movs	r0, #226	; 0xe2
100124a4:	781a      	ldrb	r2, [r3, #0]
100124a6:	785b      	ldrb	r3, [r3, #1]
100124a8:	2a03      	cmp	r2, #3
100124aa:	d100      	bne.n	100124ae <gapm_set_dev_config_cmd_handler+0xe2>
100124ac:	1c18      	adds	r0, r3, #0
100124ae:	b009      	add	sp, #36	; 0x24
100124b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
100124b2:	46c0      	nop			; (mov r8, r8)
100124b4:	1001b348 	.word	0x1001b348
100124b8:	1001afd8 	.word	0x1001afd8
100124bc:	1001521b 	.word	0x1001521b
100124c0:	1001b354 	.word	0x1001b354
100124c4:	1001b35a 	.word	0x1001b35a
100124c8:	1001afcc 	.word	0x1001afcc
100124cc:	10011785 	.word	0x10011785
100124d0:	100117e9 	.word	0x100117e9

100124d4 <gapm_get_dev_config_cmd_handler>:
100124d4:	4684      	mov	ip, r0
100124d6:	4663      	mov	r3, ip
100124d8:	b5f0      	push	{r4, r5, r6, r7, lr}
100124da:	b085      	sub	sp, #20
100124dc:	9100      	str	r1, [sp, #0]
100124de:	20cf      	movs	r0, #207	; 0xcf
100124e0:	2b01      	cmp	r3, #1
100124e2:	d854      	bhi.n	1001258e <gapm_get_dev_config_cmd_handler+0xba>
100124e4:	2900      	cmp	r1, #0
100124e6:	d052      	beq.n	1001258e <gapm_get_dev_config_cmd_handler+0xba>
100124e8:	2200      	movs	r2, #0
100124ea:	492a      	ldr	r1, [pc, #168]	; (10012594 <gapm_get_dev_config_cmd_handler+0xc0>)
100124ec:	ab02      	add	r3, sp, #8
100124ee:	880c      	ldrh	r4, [r1, #0]
100124f0:	8809      	ldrh	r1, [r1, #0]
100124f2:	1d9f      	adds	r7, r3, #6
100124f4:	719a      	strb	r2, [r3, #6]
100124f6:	4b28      	ldr	r3, [pc, #160]	; (10012598 <gapm_get_dev_config_cmd_handler+0xc4>)
100124f8:	0a09      	lsrs	r1, r1, #8
100124fa:	250d      	movs	r5, #13
100124fc:	2606      	movs	r6, #6
100124fe:	7159      	strb	r1, [r3, #5]
10012500:	4661      	mov	r1, ip
10012502:	701e      	strb	r6, [r3, #0]
10012504:	705d      	strb	r5, [r3, #1]
10012506:	709d      	strb	r5, [r3, #2]
10012508:	70da      	strb	r2, [r3, #3]
1001250a:	711c      	strb	r4, [r3, #4]
1001250c:	2901      	cmp	r1, #1
1001250e:	d13e      	bne.n	1001258e <gapm_get_dev_config_cmd_handler+0xba>
10012510:	21d0      	movs	r1, #208	; 0xd0
10012512:	4c22      	ldr	r4, [pc, #136]	; (1001259c <gapm_get_dev_config_cmd_handler+0xc8>)
10012514:	0109      	lsls	r1, r1, #4
10012516:	8061      	strh	r1, [r4, #2]
10012518:	4921      	ldr	r1, [pc, #132]	; (100125a0 <gapm_get_dev_config_cmd_handler+0xcc>)
1001251a:	71da      	strb	r2, [r3, #7]
1001251c:	8021      	strh	r1, [r4, #0]
1001251e:	4661      	mov	r1, ip
10012520:	721e      	strb	r6, [r3, #8]
10012522:	7199      	strb	r1, [r3, #6]
10012524:	1c18      	adds	r0, r3, #0
10012526:	2109      	movs	r1, #9
10012528:	4b1e      	ldr	r3, [pc, #120]	; (100125a4 <gapm_get_dev_config_cmd_handler+0xd0>)
1001252a:	80a5      	strh	r5, [r4, #4]
1001252c:	4798      	blx	r3
1001252e:	1c38      	adds	r0, r7, #0
10012530:	4b1d      	ldr	r3, [pc, #116]	; (100125a8 <gapm_get_dev_config_cmd_handler+0xd4>)
10012532:	4798      	blx	r3
10012534:	783b      	ldrb	r3, [r7, #0]
10012536:	20e2      	movs	r0, #226	; 0xe2
10012538:	9301      	str	r3, [sp, #4]
1001253a:	2b00      	cmp	r3, #0
1001253c:	d127      	bne.n	1001258e <gapm_get_dev_config_cmd_handler+0xba>
1001253e:	8821      	ldrh	r1, [r4, #0]
10012540:	4a1a      	ldr	r2, [pc, #104]	; (100125ac <gapm_get_dev_config_cmd_handler+0xd8>)
10012542:	68a7      	ldr	r7, [r4, #8]
10012544:	3b01      	subs	r3, #1
10012546:	4291      	cmp	r1, r2
10012548:	d001      	beq.n	1001254e <gapm_get_dev_config_cmd_handler+0x7a>
1001254a:	8023      	strh	r3, [r4, #0]
1001254c:	e01a      	b.n	10012584 <gapm_get_dev_config_cmd_handler+0xb0>
1001254e:	8063      	strh	r3, [r4, #2]
10012550:	9b00      	ldr	r3, [sp, #0]
10012552:	1c39      	adds	r1, r7, #0
10012554:	1c58      	adds	r0, r3, #1
10012556:	1c32      	adds	r2, r6, #0
10012558:	4b15      	ldr	r3, [pc, #84]	; (100125b0 <gapm_get_dev_config_cmd_handler+0xdc>)
1001255a:	4798      	blx	r3
1001255c:	79bb      	ldrb	r3, [r7, #6]
1001255e:	9a00      	ldr	r2, [sp, #0]
10012560:	7013      	strb	r3, [r2, #0]
10012562:	23d0      	movs	r3, #208	; 0xd0
10012564:	011b      	lsls	r3, r3, #4
10012566:	8023      	strh	r3, [r4, #0]
10012568:	ab02      	add	r3, sp, #8
1001256a:	80a5      	strh	r5, [r4, #4]
1001256c:	1ddd      	adds	r5, r3, #7
1001256e:	466b      	mov	r3, sp
10012570:	791b      	ldrb	r3, [r3, #4]
10012572:	1c28      	adds	r0, r5, #0
10012574:	702b      	strb	r3, [r5, #0]
10012576:	4b0c      	ldr	r3, [pc, #48]	; (100125a8 <gapm_get_dev_config_cmd_handler+0xd4>)
10012578:	4798      	blx	r3
1001257a:	782b      	ldrb	r3, [r5, #0]
1001257c:	20d0      	movs	r0, #208	; 0xd0
1001257e:	2b00      	cmp	r3, #0
10012580:	d105      	bne.n	1001258e <gapm_get_dev_config_cmd_handler+0xba>
10012582:	68a7      	ldr	r7, [r4, #8]
10012584:	783b      	ldrb	r3, [r7, #0]
10012586:	7878      	ldrb	r0, [r7, #1]
10012588:	2b06      	cmp	r3, #6
1001258a:	d000      	beq.n	1001258e <gapm_get_dev_config_cmd_handler+0xba>
1001258c:	20e2      	movs	r0, #226	; 0xe2
1001258e:	b005      	add	sp, #20
10012590:	bdf0      	pop	{r4, r5, r6, r7, pc}
10012592:	46c0      	nop			; (mov r8, r8)
10012594:	1001afd8 	.word	0x1001afd8
10012598:	1001b348 	.word	0x1001b348
1001259c:	1001afcc 	.word	0x1001afcc
100125a0:	00000d08 	.word	0x00000d08
100125a4:	10011785 	.word	0x10011785
100125a8:	100117e9 	.word	0x100117e9
100125ac:	0000ffff 	.word	0x0000ffff
100125b0:	1001521b 	.word	0x1001521b

100125b4 <gapm_cancel_cmd_handler>:
100125b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
100125b6:	4916      	ldr	r1, [pc, #88]	; (10012610 <gapm_cancel_cmd_handler+0x5c>)
100125b8:	4816      	ldr	r0, [pc, #88]	; (10012614 <gapm_cancel_cmd_handler+0x60>)
100125ba:	880c      	ldrh	r4, [r1, #0]
100125bc:	8809      	ldrh	r1, [r1, #0]
100125be:	466b      	mov	r3, sp
100125c0:	0a09      	lsrs	r1, r1, #8
100125c2:	7141      	strb	r1, [r0, #5]
100125c4:	2102      	movs	r1, #2
100125c6:	2203      	movs	r2, #3
100125c8:	7201      	strb	r1, [r0, #8]
100125ca:	21d0      	movs	r1, #208	; 0xd0
100125cc:	1ddd      	adds	r5, r3, #7
100125ce:	2300      	movs	r3, #0
100125d0:	7104      	strb	r4, [r0, #4]
100125d2:	4c11      	ldr	r4, [pc, #68]	; (10012618 <gapm_cancel_cmd_handler+0x64>)
100125d4:	7002      	strb	r2, [r0, #0]
100125d6:	0109      	lsls	r1, r1, #4
100125d8:	320a      	adds	r2, #10
100125da:	702b      	strb	r3, [r5, #0]
100125dc:	7042      	strb	r2, [r0, #1]
100125de:	7082      	strb	r2, [r0, #2]
100125e0:	70c3      	strb	r3, [r0, #3]
100125e2:	8021      	strh	r1, [r4, #0]
100125e4:	80a2      	strh	r2, [r4, #4]
100125e6:	71c3      	strb	r3, [r0, #7]
100125e8:	3a0c      	subs	r2, #12
100125ea:	2109      	movs	r1, #9
100125ec:	4b0b      	ldr	r3, [pc, #44]	; (1001261c <gapm_cancel_cmd_handler+0x68>)
100125ee:	7182      	strb	r2, [r0, #6]
100125f0:	4798      	blx	r3
100125f2:	1c28      	adds	r0, r5, #0
100125f4:	4b0a      	ldr	r3, [pc, #40]	; (10012620 <gapm_cancel_cmd_handler+0x6c>)
100125f6:	4798      	blx	r3
100125f8:	7828      	ldrb	r0, [r5, #0]
100125fa:	2800      	cmp	r0, #0
100125fc:	d001      	beq.n	10012602 <gapm_cancel_cmd_handler+0x4e>
100125fe:	20e2      	movs	r0, #226	; 0xe2
10012600:	e004      	b.n	1001260c <gapm_cancel_cmd_handler+0x58>
10012602:	68a3      	ldr	r3, [r4, #8]
10012604:	785b      	ldrb	r3, [r3, #1]
10012606:	2b44      	cmp	r3, #68	; 0x44
10012608:	d000      	beq.n	1001260c <gapm_cancel_cmd_handler+0x58>
1001260a:	1c18      	adds	r0, r3, #0
1001260c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
1001260e:	46c0      	nop			; (mov r8, r8)
10012610:	1001afd8 	.word	0x1001afd8
10012614:	1001b348 	.word	0x1001b348
10012618:	1001afcc 	.word	0x1001afcc
1001261c:	10011785 	.word	0x10011785
10012620:	100117e9 	.word	0x100117e9

10012624 <gapm_dev_bdaddr_ind_handler>:
10012624:	b538      	push	{r3, r4, r5, lr}
10012626:	1c05      	adds	r5, r0, #0
10012628:	1c0c      	adds	r4, r1, #0
1001262a:	1c48      	adds	r0, r1, #1
1001262c:	2206      	movs	r2, #6
1001262e:	1c29      	adds	r1, r5, #0
10012630:	4b02      	ldr	r3, [pc, #8]	; (1001263c <gapm_dev_bdaddr_ind_handler+0x18>)
10012632:	4798      	blx	r3
10012634:	79ab      	ldrb	r3, [r5, #6]
10012636:	2000      	movs	r0, #0
10012638:	7023      	strb	r3, [r4, #0]
1001263a:	bd38      	pop	{r3, r4, r5, pc}
1001263c:	1001521b 	.word	0x1001521b

10012640 <gapm_cmp_evt>:
10012640:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10012642:	7803      	ldrb	r3, [r0, #0]
10012644:	7845      	ldrb	r5, [r0, #1]
10012646:	3b0c      	subs	r3, #12
10012648:	1e18      	subs	r0, r3, #0
1001264a:	280b      	cmp	r0, #11
1001264c:	d900      	bls.n	10012650 <gapm_cmp_evt+0x10>
1001264e:	e08d      	b.n	1001276c <gapm_cmp_evt+0x12c>
10012650:	1c0c      	adds	r4, r1, #0
10012652:	f000 fd5f 	bl	10013114 <__gnu_thumb1_case_uqi>
10012656:	1952      	.short	0x1952
10012658:	068b1919 	.word	0x068b1919
1001265c:	8b595906 	.word	0x8b595906
10012660:	0d8b      	.short	0x0d8b
10012662:	2300      	movs	r3, #0
10012664:	2d45      	cmp	r5, #69	; 0x45
10012666:	d000      	beq.n	1001266a <gapm_cmp_evt+0x2a>
10012668:	1c2b      	adds	r3, r5, #0
1001266a:	7023      	strb	r3, [r4, #0]
1001266c:	2002      	movs	r0, #2
1001266e:	e07e      	b.n	1001276e <gapm_cmp_evt+0x12e>
10012670:	203b      	movs	r0, #59	; 0x3b
10012672:	2d00      	cmp	r5, #0
10012674:	d100      	bne.n	10012678 <gapm_cmp_evt+0x38>
10012676:	e07a      	b.n	1001276e <gapm_cmp_evt+0x12e>
10012678:	700d      	strb	r5, [r1, #0]
1001267a:	1c48      	adds	r0, r1, #1
1001267c:	2210      	movs	r2, #16
1001267e:	2100      	movs	r1, #0
10012680:	4b3b      	ldr	r3, [pc, #236]	; (10012770 <gapm_cmp_evt+0x130>)
10012682:	4798      	blx	r3
10012684:	200f      	movs	r0, #15
10012686:	e072      	b.n	1001276e <gapm_cmp_evt+0x12e>
10012688:	2d00      	cmp	r5, #0
1001268a:	d134      	bne.n	100126f6 <gapm_cmp_evt+0xb6>
1001268c:	4b39      	ldr	r3, [pc, #228]	; (10012774 <gapm_cmp_evt+0x134>)
1001268e:	4798      	blx	r3
10012690:	1e43      	subs	r3, r0, #1
10012692:	b2db      	uxtb	r3, r3
10012694:	1c28      	adds	r0, r5, #0
10012696:	2b06      	cmp	r3, #6
10012698:	d869      	bhi.n	1001276e <gapm_cmp_evt+0x12e>
1001269a:	466b      	mov	r3, sp
1001269c:	4e36      	ldr	r6, [pc, #216]	; (10012778 <gapm_cmp_evt+0x138>)
1001269e:	1dd9      	adds	r1, r3, #7
100126a0:	8db0      	ldrh	r0, [r6, #44]	; 0x2c
100126a2:	4b36      	ldr	r3, [pc, #216]	; (1001277c <gapm_cmp_evt+0x13c>)
100126a4:	4798      	blx	r3
100126a6:	2312      	movs	r3, #18
100126a8:	4358      	muls	r0, r3
100126aa:	4935      	ldr	r1, [pc, #212]	; (10012780 <gapm_cmp_evt+0x140>)
100126ac:	1809      	adds	r1, r1, r0
100126ae:	1c0b      	adds	r3, r1, #0
100126b0:	894a      	ldrh	r2, [r1, #10]
100126b2:	3308      	adds	r3, #8
100126b4:	8122      	strh	r2, [r4, #8]
100126b6:	784f      	ldrb	r7, [r1, #1]
100126b8:	72a5      	strb	r5, [r4, #10]
100126ba:	7027      	strb	r7, [r4, #0]
100126bc:	898a      	ldrh	r2, [r1, #12]
100126be:	1c60      	adds	r0, r4, #1
100126c0:	81a2      	strh	r2, [r4, #12]
100126c2:	88db      	ldrh	r3, [r3, #6]
100126c4:	3102      	adds	r1, #2
100126c6:	81e3      	strh	r3, [r4, #14]
100126c8:	89cb      	ldrh	r3, [r1, #14]
100126ca:	2206      	movs	r2, #6
100126cc:	8223      	strh	r3, [r4, #16]
100126ce:	4b2d      	ldr	r3, [pc, #180]	; (10012784 <gapm_cmp_evt+0x144>)
100126d0:	4798      	blx	r3
100126d2:	2f00      	cmp	r7, #0
100126d4:	d00a      	beq.n	100126ec <gapm_cmp_evt+0xac>
100126d6:	79a3      	ldrb	r3, [r4, #6]
100126d8:	223f      	movs	r2, #63	; 0x3f
100126da:	1c19      	adds	r1, r3, #0
100126dc:	3501      	adds	r5, #1
100126de:	4391      	bics	r1, r2
100126e0:	29c0      	cmp	r1, #192	; 0xc0
100126e2:	d003      	beq.n	100126ec <gapm_cmp_evt+0xac>
100126e4:	065b      	lsls	r3, r3, #25
100126e6:	0fdb      	lsrs	r3, r3, #31
100126e8:	3502      	adds	r5, #2
100126ea:	1aed      	subs	r5, r5, r3
100126ec:	2301      	movs	r3, #1
100126ee:	425b      	negs	r3, r3
100126f0:	7025      	strb	r5, [r4, #0]
100126f2:	85b3      	strh	r3, [r6, #44]	; 0x2c
100126f4:	e038      	b.n	10012768 <gapm_cmp_evt+0x128>
100126f6:	700d      	strb	r5, [r1, #0]
100126f8:	e004      	b.n	10012704 <gapm_cmp_evt+0xc4>
100126fa:	2300      	movs	r3, #0
100126fc:	2d45      	cmp	r5, #69	; 0x45
100126fe:	d000      	beq.n	10012702 <gapm_cmp_evt+0xc2>
10012700:	1c2b      	adds	r3, r5, #0
10012702:	7023      	strb	r3, [r4, #0]
10012704:	2003      	movs	r0, #3
10012706:	e032      	b.n	1001276e <gapm_cmp_evt+0x12e>
10012708:	4e1b      	ldr	r6, [pc, #108]	; (10012778 <gapm_cmp_evt+0x138>)
1001270a:	2100      	movs	r1, #0
1001270c:	8db0      	ldrh	r0, [r6, #44]	; 0x2c
1001270e:	4b1b      	ldr	r3, [pc, #108]	; (1001277c <gapm_cmp_evt+0x13c>)
10012710:	4798      	blx	r3
10012712:	2807      	cmp	r0, #7
10012714:	d818      	bhi.n	10012748 <gapm_cmp_evt+0x108>
10012716:	2301      	movs	r3, #1
10012718:	425b      	negs	r3, r3
1001271a:	85b3      	strh	r3, [r6, #44]	; 0x2c
1001271c:	3313      	adds	r3, #19
1001271e:	4358      	muls	r0, r3
10012720:	4917      	ldr	r1, [pc, #92]	; (10012780 <gapm_cmp_evt+0x140>)
10012722:	1809      	adds	r1, r1, r0
10012724:	1c0b      	adds	r3, r1, #0
10012726:	894a      	ldrh	r2, [r1, #10]
10012728:	3308      	adds	r3, #8
1001272a:	8122      	strh	r2, [r4, #8]
1001272c:	784a      	ldrb	r2, [r1, #1]
1001272e:	72a5      	strb	r5, [r4, #10]
10012730:	7022      	strb	r2, [r4, #0]
10012732:	898a      	ldrh	r2, [r1, #12]
10012734:	1c60      	adds	r0, r4, #1
10012736:	81a2      	strh	r2, [r4, #12]
10012738:	88db      	ldrh	r3, [r3, #6]
1001273a:	3102      	adds	r1, #2
1001273c:	81e3      	strh	r3, [r4, #14]
1001273e:	89cb      	ldrh	r3, [r1, #14]
10012740:	2206      	movs	r2, #6
10012742:	8223      	strh	r3, [r4, #16]
10012744:	4b0f      	ldr	r3, [pc, #60]	; (10012784 <gapm_cmp_evt+0x144>)
10012746:	4798      	blx	r3
10012748:	2200      	movs	r2, #0
1001274a:	7823      	ldrb	r3, [r4, #0]
1001274c:	4293      	cmp	r3, r2
1001274e:	d00a      	beq.n	10012766 <gapm_cmp_evt+0x126>
10012750:	79a3      	ldrb	r3, [r4, #6]
10012752:	323f      	adds	r2, #63	; 0x3f
10012754:	1c19      	adds	r1, r3, #0
10012756:	4391      	bics	r1, r2
10012758:	3a3e      	subs	r2, #62	; 0x3e
1001275a:	29c0      	cmp	r1, #192	; 0xc0
1001275c:	d003      	beq.n	10012766 <gapm_cmp_evt+0x126>
1001275e:	065b      	lsls	r3, r3, #25
10012760:	0fdb      	lsrs	r3, r3, #31
10012762:	3202      	adds	r2, #2
10012764:	1ad2      	subs	r2, r2, r3
10012766:	7022      	strb	r2, [r4, #0]
10012768:	2005      	movs	r0, #5
1001276a:	e000      	b.n	1001276e <gapm_cmp_evt+0x12e>
1001276c:	2000      	movs	r0, #0
1001276e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10012770:	1001522d 	.word	0x1001522d
10012774:	10011991 	.word	0x10011991
10012778:	1001b06a 	.word	0x1001b06a
1001277c:	10011955 	.word	0x10011955
10012780:	1001afda 	.word	0x1001afda
10012784:	1001521b 	.word	0x1001521b

10012788 <gapm_start_adv_cmd_handler>:
10012788:	b5f0      	push	{r4, r5, r6, r7, lr}
1001278a:	b089      	sub	sp, #36	; 0x24
1001278c:	9303      	str	r3, [sp, #12]
1001278e:	ab0e      	add	r3, sp, #56	; 0x38
10012790:	9102      	str	r1, [sp, #8]
10012792:	cb02      	ldmia	r3!, {r1}
10012794:	aa08      	add	r2, sp, #32
10012796:	881b      	ldrh	r3, [r3, #0]
10012798:	4e3c      	ldr	r6, [pc, #240]	; (1001288c <gapm_start_adv_cmd_handler+0x104>)
1001279a:	9300      	str	r3, [sp, #0]
1001279c:	ab10      	add	r3, sp, #64	; 0x40
1001279e:	881b      	ldrh	r3, [r3, #0]
100127a0:	240d      	movs	r4, #13
100127a2:	469c      	mov	ip, r3
100127a4:	ab11      	add	r3, sp, #68	; 0x44
100127a6:	781b      	ldrb	r3, [r3, #0]
100127a8:	9304      	str	r3, [sp, #16]
100127aa:	ab12      	add	r3, sp, #72	; 0x48
100127ac:	781b      	ldrb	r3, [r3, #0]
100127ae:	9305      	str	r3, [sp, #20]
100127b0:	ab13      	add	r3, sp, #76	; 0x4c
100127b2:	781b      	ldrb	r3, [r3, #0]
100127b4:	9306      	str	r3, [sp, #24]
100127b6:	ab14      	add	r3, sp, #80	; 0x50
100127b8:	781b      	ldrb	r3, [r3, #0]
100127ba:	9301      	str	r3, [sp, #4]
100127bc:	2319      	movs	r3, #25
100127be:	189b      	adds	r3, r3, r2
100127c0:	7fdd      	ldrb	r5, [r3, #31]
100127c2:	ab18      	add	r3, sp, #96	; 0x60
100127c4:	881f      	ldrh	r7, [r3, #0]
100127c6:	ab19      	add	r3, sp, #100	; 0x64
100127c8:	781b      	ldrb	r3, [r3, #0]
100127ca:	8832      	ldrh	r2, [r6, #0]
100127cc:	9307      	str	r3, [sp, #28]
100127ce:	4b30      	ldr	r3, [pc, #192]	; (10012890 <gapm_start_adv_cmd_handler+0x108>)
100127d0:	8836      	ldrh	r6, [r6, #0]
100127d2:	711a      	strb	r2, [r3, #4]
100127d4:	466a      	mov	r2, sp
100127d6:	7a12      	ldrb	r2, [r2, #8]
100127d8:	701c      	strb	r4, [r3, #0]
100127da:	705c      	strb	r4, [r3, #1]
100127dc:	709c      	strb	r4, [r3, #2]
100127de:	725a      	strb	r2, [r3, #9]
100127e0:	2400      	movs	r4, #0
100127e2:	466a      	mov	r2, sp
100127e4:	0a36      	lsrs	r6, r6, #8
100127e6:	70dc      	strb	r4, [r3, #3]
100127e8:	7218      	strb	r0, [r3, #8]
100127ea:	729c      	strb	r4, [r3, #10]
100127ec:	715e      	strb	r6, [r3, #5]
100127ee:	72dc      	strb	r4, [r3, #11]
100127f0:	7812      	ldrb	r2, [r2, #0]
100127f2:	380e      	subs	r0, #14
100127f4:	731a      	strb	r2, [r3, #12]
100127f6:	9a00      	ldr	r2, [sp, #0]
100127f8:	0a14      	lsrs	r4, r2, #8
100127fa:	4662      	mov	r2, ip
100127fc:	739a      	strb	r2, [r3, #14]
100127fe:	4662      	mov	r2, ip
10012800:	735c      	strb	r4, [r3, #13]
10012802:	0a14      	lsrs	r4, r2, #8
10012804:	466a      	mov	r2, sp
10012806:	7c12      	ldrb	r2, [r2, #16]
10012808:	73dc      	strb	r4, [r3, #15]
1001280a:	741a      	strb	r2, [r3, #16]
1001280c:	1c1c      	adds	r4, r3, #0
1001280e:	2801      	cmp	r0, #1
10012810:	d809      	bhi.n	10012826 <gapm_start_adv_cmd_handler+0x9e>
10012812:	2900      	cmp	r1, #0
10012814:	d003      	beq.n	1001281e <gapm_start_adv_cmd_handler+0x96>
10012816:	481f      	ldr	r0, [pc, #124]	; (10012894 <gapm_start_adv_cmd_handler+0x10c>)
10012818:	2206      	movs	r2, #6
1001281a:	4b1f      	ldr	r3, [pc, #124]	; (10012898 <gapm_start_adv_cmd_handler+0x110>)
1001281c:	4798      	blx	r3
1001281e:	466b      	mov	r3, sp
10012820:	7b1b      	ldrb	r3, [r3, #12]
10012822:	75e3      	strb	r3, [r4, #23]
10012824:	e014      	b.n	10012850 <gapm_start_adv_cmd_handler+0xc8>
10012826:	466b      	mov	r3, sp
10012828:	7d1b      	ldrb	r3, [r3, #20]
1001282a:	9915      	ldr	r1, [sp, #84]	; 0x54
1001282c:	7463      	strb	r3, [r4, #17]
1001282e:	466b      	mov	r3, sp
10012830:	7e1b      	ldrb	r3, [r3, #24]
10012832:	9a01      	ldr	r2, [sp, #4]
10012834:	74a3      	strb	r3, [r4, #18]
10012836:	466b      	mov	r3, sp
10012838:	791b      	ldrb	r3, [r3, #4]
1001283a:	4818      	ldr	r0, [pc, #96]	; (1001289c <gapm_start_adv_cmd_handler+0x114>)
1001283c:	4e16      	ldr	r6, [pc, #88]	; (10012898 <gapm_start_adv_cmd_handler+0x110>)
1001283e:	74e3      	strb	r3, [r4, #19]
10012840:	47b0      	blx	r6
10012842:	1c23      	adds	r3, r4, #0
10012844:	4816      	ldr	r0, [pc, #88]	; (100128a0 <gapm_start_adv_cmd_handler+0x118>)
10012846:	3330      	adds	r3, #48	; 0x30
10012848:	9917      	ldr	r1, [sp, #92]	; 0x5c
1001284a:	1c2a      	adds	r2, r5, #0
1001284c:	701d      	strb	r5, [r3, #0]
1001284e:	47b0      	blx	r6
10012850:	1c22      	adds	r2, r4, #0
10012852:	23a5      	movs	r3, #165	; 0xa5
10012854:	3250      	adds	r2, #80	; 0x50
10012856:	7013      	strb	r3, [r2, #0]
10012858:	1c22      	adds	r2, r4, #0
1001285a:	3251      	adds	r2, #81	; 0x51
1001285c:	7013      	strb	r3, [r2, #0]
1001285e:	1c23      	adds	r3, r4, #0
10012860:	1c22      	adds	r2, r4, #0
10012862:	3352      	adds	r3, #82	; 0x52
10012864:	701f      	strb	r7, [r3, #0]
10012866:	3253      	adds	r2, #83	; 0x53
10012868:	0a3b      	lsrs	r3, r7, #8
1001286a:	7013      	strb	r3, [r2, #0]
1001286c:	466a      	mov	r2, sp
1001286e:	1c23      	adds	r3, r4, #0
10012870:	7f12      	ldrb	r2, [r2, #28]
10012872:	3354      	adds	r3, #84	; 0x54
10012874:	701a      	strb	r2, [r3, #0]
10012876:	234d      	movs	r3, #77	; 0x4d
10012878:	2500      	movs	r5, #0
1001287a:	71a3      	strb	r3, [r4, #6]
1001287c:	1c20      	adds	r0, r4, #0
1001287e:	2155      	movs	r1, #85	; 0x55
10012880:	4b08      	ldr	r3, [pc, #32]	; (100128a4 <gapm_start_adv_cmd_handler+0x11c>)
10012882:	71e5      	strb	r5, [r4, #7]
10012884:	4798      	blx	r3
10012886:	1c28      	adds	r0, r5, #0
10012888:	b009      	add	sp, #36	; 0x24
1001288a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001288c:	1001afd8 	.word	0x1001afd8
10012890:	1001b348 	.word	0x1001b348
10012894:	1001b359 	.word	0x1001b359
10012898:	1001521b 	.word	0x1001521b
1001289c:	1001b35c 	.word	0x1001b35c
100128a0:	1001b379 	.word	0x1001b379
100128a4:	10011785 	.word	0x10011785

100128a8 <get_gap_local_addr_type>:
100128a8:	4b04      	ldr	r3, [pc, #16]	; (100128bc <get_gap_local_addr_type+0x14>)
100128aa:	2001      	movs	r0, #1
100128ac:	791b      	ldrb	r3, [r3, #4]
100128ae:	2b02      	cmp	r3, #2
100128b0:	d003      	beq.n	100128ba <get_gap_local_addr_type+0x12>
100128b2:	3b03      	subs	r3, #3
100128b4:	4258      	negs	r0, r3
100128b6:	4158      	adcs	r0, r3
100128b8:	0040      	lsls	r0, r0, #1
100128ba:	4770      	bx	lr
100128bc:	1001b06a 	.word	0x1001b06a

100128c0 <gapm_adv_report_evt_handler>:
100128c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
100128c2:	7843      	ldrb	r3, [r0, #1]
100128c4:	1c05      	adds	r5, r0, #0
100128c6:	9301      	str	r3, [sp, #4]
100128c8:	466b      	mov	r3, sp
100128ca:	1c0c      	adds	r4, r1, #0
100128cc:	791b      	ldrb	r3, [r3, #4]
100128ce:	7806      	ldrb	r6, [r0, #0]
100128d0:	2206      	movs	r2, #6
100128d2:	704b      	strb	r3, [r1, #1]
100128d4:	1c88      	adds	r0, r1, #2
100128d6:	4f1b      	ldr	r7, [pc, #108]	; (10012944 <gapm_adv_report_evt_handler+0x84>)
100128d8:	1ca9      	adds	r1, r5, #2
100128da:	47b8      	blx	r7
100128dc:	1c20      	adds	r0, r4, #0
100128de:	1c29      	adds	r1, r5, #0
100128e0:	7a2a      	ldrb	r2, [r5, #8]
100128e2:	3008      	adds	r0, #8
100128e4:	77c2      	strb	r2, [r0, #31]
100128e6:	3109      	adds	r1, #9
100128e8:	3528      	adds	r5, #40	; 0x28
100128ea:	47b8      	blx	r7
100128ec:	782b      	ldrb	r3, [r5, #0]
100128ee:	b25a      	sxtb	r2, r3
100128f0:	2a00      	cmp	r2, #0
100128f2:	da01      	bge.n	100128f8 <gapm_adv_report_evt_handler+0x38>
100128f4:	3301      	adds	r3, #1
100128f6:	b2db      	uxtb	r3, r3
100128f8:	1c22      	adds	r2, r4, #0
100128fa:	3228      	adds	r2, #40	; 0x28
100128fc:	7013      	strb	r3, [r2, #0]
100128fe:	2200      	movs	r2, #0
10012900:	9b01      	ldr	r3, [sp, #4]
10012902:	4293      	cmp	r3, r2
10012904:	d00a      	beq.n	1001291c <gapm_adv_report_evt_handler+0x5c>
10012906:	79e3      	ldrb	r3, [r4, #7]
10012908:	323f      	adds	r2, #63	; 0x3f
1001290a:	1c19      	adds	r1, r3, #0
1001290c:	4391      	bics	r1, r2
1001290e:	3a3e      	subs	r2, #62	; 0x3e
10012910:	29c0      	cmp	r1, #192	; 0xc0
10012912:	d003      	beq.n	1001291c <gapm_adv_report_evt_handler+0x5c>
10012914:	065b      	lsls	r3, r3, #25
10012916:	0fdb      	lsrs	r3, r3, #31
10012918:	3202      	adds	r2, #2
1001291a:	1ad2      	subs	r2, r2, r3
1001291c:	7062      	strb	r2, [r4, #1]
1001291e:	2e04      	cmp	r6, #4
10012920:	d80f      	bhi.n	10012942 <gapm_adv_report_evt_handler+0x82>
10012922:	1c30      	adds	r0, r6, #0
10012924:	f000 fbf6 	bl	10013114 <__gnu_thumb1_case_uqi>
10012928:	09070503 	.word	0x09070503
1001292c:	0b          	.byte	0x0b
1001292d:	00          	.byte	0x00
1001292e:	2300      	movs	r3, #0
10012930:	e006      	b.n	10012940 <gapm_adv_report_evt_handler+0x80>
10012932:	2301      	movs	r3, #1
10012934:	e004      	b.n	10012940 <gapm_adv_report_evt_handler+0x80>
10012936:	2302      	movs	r3, #2
10012938:	e002      	b.n	10012940 <gapm_adv_report_evt_handler+0x80>
1001293a:	2303      	movs	r3, #3
1001293c:	e000      	b.n	10012940 <gapm_adv_report_evt_handler+0x80>
1001293e:	2305      	movs	r3, #5
10012940:	7023      	strb	r3, [r4, #0]
10012942:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
10012944:	1001521b 	.word	0x1001521b

10012948 <gapm_resolv_addr_cmd_handler>:
10012948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1001294a:	2314      	movs	r3, #20
1001294c:	4c12      	ldr	r4, [pc, #72]	; (10012998 <gapm_resolv_addr_cmd_handler+0x50>)
1001294e:	1c17      	adds	r7, r2, #0
10012950:	7023      	strb	r3, [r4, #0]
10012952:	3b07      	subs	r3, #7
10012954:	7063      	strb	r3, [r4, #1]
10012956:	70a3      	strb	r3, [r4, #2]
10012958:	2300      	movs	r3, #0
1001295a:	70e3      	strb	r3, [r4, #3]
1001295c:	4b0f      	ldr	r3, [pc, #60]	; (1001299c <gapm_resolv_addr_cmd_handler+0x54>)
1001295e:	1c05      	adds	r5, r0, #0
10012960:	881a      	ldrh	r2, [r3, #0]
10012962:	881b      	ldrh	r3, [r3, #0]
10012964:	4e0e      	ldr	r6, [pc, #56]	; (100129a0 <gapm_resolv_addr_cmd_handler+0x58>)
10012966:	0a1b      	lsrs	r3, r3, #8
10012968:	7163      	strb	r3, [r4, #5]
1001296a:	2317      	movs	r3, #23
1001296c:	012d      	lsls	r5, r5, #4
1001296e:	7122      	strb	r2, [r4, #4]
10012970:	7260      	strb	r0, [r4, #9]
10012972:	2206      	movs	r2, #6
10012974:	480b      	ldr	r0, [pc, #44]	; (100129a4 <gapm_resolv_addr_cmd_handler+0x5c>)
10012976:	7223      	strb	r3, [r4, #8]
10012978:	47b0      	blx	r6
1001297a:	1c39      	adds	r1, r7, #0
1001297c:	1c2a      	adds	r2, r5, #0
1001297e:	480a      	ldr	r0, [pc, #40]	; (100129a8 <gapm_resolv_addr_cmd_handler+0x60>)
10012980:	47b0      	blx	r6
10012982:	1c29      	adds	r1, r5, #0
10012984:	3110      	adds	r1, #16
10012986:	1c0b      	adds	r3, r1, #0
10012988:	3b08      	subs	r3, #8
1001298a:	71a3      	strb	r3, [r4, #6]
1001298c:	121b      	asrs	r3, r3, #8
1001298e:	71e3      	strb	r3, [r4, #7]
10012990:	1c20      	adds	r0, r4, #0
10012992:	4b06      	ldr	r3, [pc, #24]	; (100129ac <gapm_resolv_addr_cmd_handler+0x64>)
10012994:	4798      	blx	r3
10012996:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10012998:	1001b348 	.word	0x1001b348
1001299c:	1001afd8 	.word	0x1001afd8
100129a0:	1001521b 	.word	0x1001521b
100129a4:	1001b352 	.word	0x1001b352
100129a8:	1001b358 	.word	0x1001b358
100129ac:	10011785 	.word	0x10011785

100129b0 <gapm_addr_solved_ind_handler>:
100129b0:	b570      	push	{r4, r5, r6, lr}
100129b2:	1c04      	adds	r4, r0, #0
100129b4:	1c08      	adds	r0, r1, #0
100129b6:	1c0d      	adds	r5, r1, #0
100129b8:	4e05      	ldr	r6, [pc, #20]	; (100129d0 <gapm_addr_solved_ind_handler+0x20>)
100129ba:	1c21      	adds	r1, r4, #0
100129bc:	2206      	movs	r2, #6
100129be:	3011      	adds	r0, #17
100129c0:	47b0      	blx	r6
100129c2:	1c68      	adds	r0, r5, #1
100129c4:	1da1      	adds	r1, r4, #6
100129c6:	2210      	movs	r2, #16
100129c8:	47b0      	blx	r6
100129ca:	2300      	movs	r3, #0
100129cc:	702b      	strb	r3, [r5, #0]
100129ce:	bd70      	pop	{r4, r5, r6, pc}
100129d0:	1001521b 	.word	0x1001521b

100129d4 <gapm_profile_added_ind_handler>:
100129d4:	b510      	push	{r4, lr}
100129d6:	7843      	ldrb	r3, [r0, #1]
100129d8:	7902      	ldrb	r2, [r0, #4]
100129da:	7944      	ldrb	r4, [r0, #5]
100129dc:	7800      	ldrb	r0, [r0, #0]
100129de:	021b      	lsls	r3, r3, #8
100129e0:	4303      	orrs	r3, r0
100129e2:	2b1b      	cmp	r3, #27
100129e4:	d104      	bne.n	100129f0 <gapm_profile_added_ind_handler+0x1c>
100129e6:	2300      	movs	r3, #0
100129e8:	700b      	strb	r3, [r1, #0]
100129ea:	0223      	lsls	r3, r4, #8
100129ec:	4313      	orrs	r3, r2
100129ee:	804b      	strh	r3, [r1, #2]
100129f0:	203b      	movs	r0, #59	; 0x3b
100129f2:	bd10      	pop	{r4, pc}

100129f4 <gattc_read_req_ind_parser>:
100129f4:	7843      	ldrb	r3, [r0, #1]
100129f6:	7802      	ldrb	r2, [r0, #0]
100129f8:	021b      	lsls	r3, r3, #8
100129fa:	4313      	orrs	r3, r2
100129fc:	804b      	strh	r3, [r1, #2]
100129fe:	4770      	bx	lr

10012a00 <gattc_write_req_ind_parser>:
10012a00:	b508      	push	{r3, lr}
10012a02:	1c13      	adds	r3, r2, #0
10012a04:	0a00      	lsrs	r0, r0, #8
10012a06:	8010      	strh	r0, [r2, #0]
10012a08:	784a      	ldrb	r2, [r1, #1]
10012a0a:	7808      	ldrb	r0, [r1, #0]
10012a0c:	0212      	lsls	r2, r2, #8
10012a0e:	4302      	orrs	r2, r0
10012a10:	805a      	strh	r2, [r3, #2]
10012a12:	78ca      	ldrb	r2, [r1, #3]
10012a14:	7888      	ldrb	r0, [r1, #2]
10012a16:	0212      	lsls	r2, r2, #8
10012a18:	4302      	orrs	r2, r0
10012a1a:	809a      	strh	r2, [r3, #4]
10012a1c:	794a      	ldrb	r2, [r1, #5]
10012a1e:	7908      	ldrb	r0, [r1, #4]
10012a20:	0212      	lsls	r2, r2, #8
10012a22:	4302      	orrs	r2, r0
10012a24:	80da      	strh	r2, [r3, #6]
10012a26:	3308      	adds	r3, #8
10012a28:	1c18      	adds	r0, r3, #0
10012a2a:	3106      	adds	r1, #6
10012a2c:	4b01      	ldr	r3, [pc, #4]	; (10012a34 <gattc_write_req_ind_parser+0x34>)
10012a2e:	4798      	blx	r3
10012a30:	bd08      	pop	{r3, pc}
10012a32:	46c0      	nop			; (mov r8, r8)
10012a34:	1001521b 	.word	0x1001521b

10012a38 <gattc_att_info_req_parser>:
10012a38:	7843      	ldrb	r3, [r0, #1]
10012a3a:	7802      	ldrb	r2, [r0, #0]
10012a3c:	021b      	lsls	r3, r3, #8
10012a3e:	4313      	orrs	r3, r2
10012a40:	800b      	strh	r3, [r1, #0]
10012a42:	4770      	bx	lr

10012a44 <gattc_read_cfm>:
10012a44:	b538      	push	{r3, r4, r5, lr}
10012a46:	2514      	movs	r5, #20
10012a48:	1c1c      	adds	r4, r3, #0
10012a4a:	4b14      	ldr	r3, [pc, #80]	; (10012a9c <gattc_read_cfm+0x58>)
10012a4c:	70d9      	strb	r1, [r3, #3]
10012a4e:	4914      	ldr	r1, [pc, #80]	; (10012aa0 <gattc_read_cfm+0x5c>)
10012a50:	701d      	strb	r5, [r3, #0]
10012a52:	3d08      	subs	r5, #8
10012a54:	705d      	strb	r5, [r3, #1]
10012a56:	709d      	strb	r5, [r3, #2]
10012a58:	880d      	ldrh	r5, [r1, #0]
10012a5a:	8809      	ldrh	r1, [r1, #0]
10012a5c:	7218      	strb	r0, [r3, #8]
10012a5e:	0a09      	lsrs	r1, r1, #8
10012a60:	7159      	strb	r1, [r3, #5]
10012a62:	0a00      	lsrs	r0, r0, #8
10012a64:	0a21      	lsrs	r1, r4, #8
10012a66:	711d      	strb	r5, [r3, #4]
10012a68:	7258      	strb	r0, [r3, #9]
10012a6a:	729c      	strb	r4, [r3, #10]
10012a6c:	72d9      	strb	r1, [r3, #11]
10012a6e:	731a      	strb	r2, [r3, #12]
10012a70:	1c1d      	adds	r5, r3, #0
10012a72:	2c00      	cmp	r4, #0
10012a74:	d007      	beq.n	10012a86 <gattc_read_cfm+0x42>
10012a76:	9904      	ldr	r1, [sp, #16]
10012a78:	1c22      	adds	r2, r4, #0
10012a7a:	480a      	ldr	r0, [pc, #40]	; (10012aa4 <gattc_read_cfm+0x60>)
10012a7c:	4b0a      	ldr	r3, [pc, #40]	; (10012aa8 <gattc_read_cfm+0x64>)
10012a7e:	340d      	adds	r4, #13
10012a80:	4798      	blx	r3
10012a82:	b2a1      	uxth	r1, r4
10012a84:	e001      	b.n	10012a8a <gattc_read_cfm+0x46>
10012a86:	210e      	movs	r1, #14
10012a88:	735c      	strb	r4, [r3, #13]
10012a8a:	1c0b      	adds	r3, r1, #0
10012a8c:	3b08      	subs	r3, #8
10012a8e:	71ab      	strb	r3, [r5, #6]
10012a90:	121b      	asrs	r3, r3, #8
10012a92:	71eb      	strb	r3, [r5, #7]
10012a94:	1c28      	adds	r0, r5, #0
10012a96:	4b05      	ldr	r3, [pc, #20]	; (10012aac <gattc_read_cfm+0x68>)
10012a98:	4798      	blx	r3
10012a9a:	bd38      	pop	{r3, r4, r5, pc}
10012a9c:	1001b348 	.word	0x1001b348
10012aa0:	1001afd8 	.word	0x1001afd8
10012aa4:	1001b355 	.word	0x1001b355
10012aa8:	1001521b 	.word	0x1001521b
10012aac:	10011785 	.word	0x10011785

10012ab0 <gattc_write_cfm>:
10012ab0:	4b0d      	ldr	r3, [pc, #52]	; (10012ae8 <gattc_write_cfm+0x38>)
10012ab2:	b510      	push	{r4, lr}
10012ab4:	729a      	strb	r2, [r3, #10]
10012ab6:	2203      	movs	r2, #3
10012ab8:	2416      	movs	r4, #22
10012aba:	719a      	strb	r2, [r3, #6]
10012abc:	2200      	movs	r2, #0
10012abe:	70d9      	strb	r1, [r3, #3]
10012ac0:	490a      	ldr	r1, [pc, #40]	; (10012aec <gattc_write_cfm+0x3c>)
10012ac2:	701c      	strb	r4, [r3, #0]
10012ac4:	3c0a      	subs	r4, #10
10012ac6:	705c      	strb	r4, [r3, #1]
10012ac8:	709c      	strb	r4, [r3, #2]
10012aca:	880c      	ldrh	r4, [r1, #0]
10012acc:	8809      	ldrh	r1, [r1, #0]
10012ace:	7218      	strb	r0, [r3, #8]
10012ad0:	0a09      	lsrs	r1, r1, #8
10012ad2:	0a00      	lsrs	r0, r0, #8
10012ad4:	711c      	strb	r4, [r3, #4]
10012ad6:	7159      	strb	r1, [r3, #5]
10012ad8:	7258      	strb	r0, [r3, #9]
10012ada:	71da      	strb	r2, [r3, #7]
10012adc:	1c18      	adds	r0, r3, #0
10012ade:	210b      	movs	r1, #11
10012ae0:	4b03      	ldr	r3, [pc, #12]	; (10012af0 <gattc_write_cfm+0x40>)
10012ae2:	4798      	blx	r3
10012ae4:	bd10      	pop	{r4, pc}
10012ae6:	46c0      	nop			; (mov r8, r8)
10012ae8:	1001b348 	.word	0x1001b348
10012aec:	1001afd8 	.word	0x1001afd8
10012af0:	10011785 	.word	0x10011785

10012af4 <gattc_att_info_cfm>:
10012af4:	b538      	push	{r3, r4, r5, lr}
10012af6:	4c0e      	ldr	r4, [pc, #56]	; (10012b30 <gattc_att_info_cfm+0x3c>)
10012af8:	2518      	movs	r5, #24
10012afa:	7323      	strb	r3, [r4, #12]
10012afc:	2305      	movs	r3, #5
10012afe:	71a3      	strb	r3, [r4, #6]
10012b00:	2300      	movs	r3, #0
10012b02:	70e1      	strb	r1, [r4, #3]
10012b04:	490b      	ldr	r1, [pc, #44]	; (10012b34 <gattc_att_info_cfm+0x40>)
10012b06:	7025      	strb	r5, [r4, #0]
10012b08:	3d0c      	subs	r5, #12
10012b0a:	7065      	strb	r5, [r4, #1]
10012b0c:	70a5      	strb	r5, [r4, #2]
10012b0e:	880d      	ldrh	r5, [r1, #0]
10012b10:	8809      	ldrh	r1, [r1, #0]
10012b12:	7220      	strb	r0, [r4, #8]
10012b14:	0a09      	lsrs	r1, r1, #8
10012b16:	0a00      	lsrs	r0, r0, #8
10012b18:	7161      	strb	r1, [r4, #5]
10012b1a:	7260      	strb	r0, [r4, #9]
10012b1c:	72a2      	strb	r2, [r4, #10]
10012b1e:	71e3      	strb	r3, [r4, #7]
10012b20:	0a12      	lsrs	r2, r2, #8
10012b22:	1c20      	adds	r0, r4, #0
10012b24:	210d      	movs	r1, #13
10012b26:	4b04      	ldr	r3, [pc, #16]	; (10012b38 <gattc_att_info_cfm+0x44>)
10012b28:	7125      	strb	r5, [r4, #4]
10012b2a:	72e2      	strb	r2, [r4, #11]
10012b2c:	4798      	blx	r3
10012b2e:	bd38      	pop	{r3, r4, r5, pc}
10012b30:	1001b348 	.word	0x1001b348
10012b34:	1001afd8 	.word	0x1001afd8
10012b38:	10011785 	.word	0x10011785

10012b3c <gattc_send_evt_cmd_handler>:
10012b3c:	b570      	push	{r4, r5, r6, lr}
10012b3e:	2610      	movs	r6, #16
10012b40:	ac04      	add	r4, sp, #16
10012b42:	8825      	ldrh	r5, [r4, #0]
10012b44:	4c15      	ldr	r4, [pc, #84]	; (10012b9c <gattc_send_evt_cmd_handler+0x60>)
10012b46:	70e2      	strb	r2, [r4, #3]
10012b48:	4a15      	ldr	r2, [pc, #84]	; (10012ba0 <gattc_send_evt_cmd_handler+0x64>)
10012b4a:	7026      	strb	r6, [r4, #0]
10012b4c:	3e04      	subs	r6, #4
10012b4e:	7066      	strb	r6, [r4, #1]
10012b50:	70a6      	strb	r6, [r4, #2]
10012b52:	8816      	ldrh	r6, [r2, #0]
10012b54:	8812      	ldrh	r2, [r2, #0]
10012b56:	7220      	strb	r0, [r4, #8]
10012b58:	0a12      	lsrs	r2, r2, #8
10012b5a:	7162      	strb	r2, [r4, #5]
10012b5c:	4a11      	ldr	r2, [pc, #68]	; (10012ba4 <gattc_send_evt_cmd_handler+0x68>)
10012b5e:	7321      	strb	r1, [r4, #12]
10012b60:	8812      	ldrh	r2, [r2, #0]
10012b62:	73a5      	strb	r5, [r4, #14]
10012b64:	3201      	adds	r2, #1
10012b66:	7262      	strb	r2, [r4, #9]
10012b68:	1212      	asrs	r2, r2, #8
10012b6a:	72a2      	strb	r2, [r4, #10]
10012b6c:	2200      	movs	r2, #0
10012b6e:	72e2      	strb	r2, [r4, #11]
10012b70:	0a0a      	lsrs	r2, r1, #8
10012b72:	7362      	strb	r2, [r4, #13]
10012b74:	0a2a      	lsrs	r2, r5, #8
10012b76:	73e2      	strb	r2, [r4, #15]
10012b78:	1c19      	adds	r1, r3, #0
10012b7a:	1c2a      	adds	r2, r5, #0
10012b7c:	4b0a      	ldr	r3, [pc, #40]	; (10012ba8 <gattc_send_evt_cmd_handler+0x6c>)
10012b7e:	3510      	adds	r5, #16
10012b80:	480a      	ldr	r0, [pc, #40]	; (10012bac <gattc_send_evt_cmd_handler+0x70>)
10012b82:	7126      	strb	r6, [r4, #4]
10012b84:	4798      	blx	r3
10012b86:	b2a9      	uxth	r1, r5
10012b88:	1c0b      	adds	r3, r1, #0
10012b8a:	3b08      	subs	r3, #8
10012b8c:	71a3      	strb	r3, [r4, #6]
10012b8e:	121b      	asrs	r3, r3, #8
10012b90:	71e3      	strb	r3, [r4, #7]
10012b92:	1c20      	adds	r0, r4, #0
10012b94:	4b06      	ldr	r3, [pc, #24]	; (10012bb0 <gattc_send_evt_cmd_handler+0x74>)
10012b96:	4798      	blx	r3
10012b98:	bd70      	pop	{r4, r5, r6, pc}
10012b9a:	46c0      	nop			; (mov r8, r8)
10012b9c:	1001b348 	.word	0x1001b348
10012ba0:	1001afd8 	.word	0x1001afd8
10012ba4:	1001a170 	.word	0x1001a170
10012ba8:	1001521b 	.word	0x1001521b
10012bac:	1001b358 	.word	0x1001b358
10012bb0:	10011785 	.word	0x10011785

10012bb4 <gattc_event_cfm_handler>:
10012bb4:	220e      	movs	r2, #14
10012bb6:	b508      	push	{r3, lr}
10012bb8:	4b0b      	ldr	r3, [pc, #44]	; (10012be8 <gattc_event_cfm_handler+0x34>)
10012bba:	701a      	strb	r2, [r3, #0]
10012bbc:	3a02      	subs	r2, #2
10012bbe:	705a      	strb	r2, [r3, #1]
10012bc0:	709a      	strb	r2, [r3, #2]
10012bc2:	4a0a      	ldr	r2, [pc, #40]	; (10012bec <gattc_event_cfm_handler+0x38>)
10012bc4:	70d8      	strb	r0, [r3, #3]
10012bc6:	8810      	ldrh	r0, [r2, #0]
10012bc8:	8812      	ldrh	r2, [r2, #0]
10012bca:	7219      	strb	r1, [r3, #8]
10012bcc:	0a12      	lsrs	r2, r2, #8
10012bce:	715a      	strb	r2, [r3, #5]
10012bd0:	2202      	movs	r2, #2
10012bd2:	719a      	strb	r2, [r3, #6]
10012bd4:	2200      	movs	r2, #0
10012bd6:	0a09      	lsrs	r1, r1, #8
10012bd8:	7118      	strb	r0, [r3, #4]
10012bda:	7259      	strb	r1, [r3, #9]
10012bdc:	71da      	strb	r2, [r3, #7]
10012bde:	1c18      	adds	r0, r3, #0
10012be0:	210a      	movs	r1, #10
10012be2:	4b03      	ldr	r3, [pc, #12]	; (10012bf0 <gattc_event_cfm_handler+0x3c>)
10012be4:	4798      	blx	r3
10012be6:	bd08      	pop	{r3, pc}
10012be8:	1001b348 	.word	0x1001b348
10012bec:	1001afd8 	.word	0x1001afd8
10012bf0:	10011785 	.word	0x10011785

10012bf4 <gattc_disc_svc_ind_parser>:
10012bf4:	b570      	push	{r4, r5, r6, lr}
10012bf6:	1c15      	adds	r5, r2, #0
10012bf8:	0a00      	lsrs	r0, r0, #8
10012bfa:	8010      	strh	r0, [r2, #0]
10012bfc:	784b      	ldrb	r3, [r1, #1]
10012bfe:	780a      	ldrb	r2, [r1, #0]
10012c00:	021b      	lsls	r3, r3, #8
10012c02:	4313      	orrs	r3, r2
10012c04:	806b      	strh	r3, [r5, #2]
10012c06:	78cb      	ldrb	r3, [r1, #3]
10012c08:	788a      	ldrb	r2, [r1, #2]
10012c0a:	021b      	lsls	r3, r3, #8
10012c0c:	4313      	orrs	r3, r2
10012c0e:	80ab      	strh	r3, [r5, #4]
10012c10:	790e      	ldrb	r6, [r1, #4]
10012c12:	4b05      	ldr	r3, [pc, #20]	; (10012c28 <gattc_disc_svc_ind_parser+0x34>)
10012c14:	1c30      	adds	r0, r6, #0
10012c16:	1c0c      	adds	r4, r1, #0
10012c18:	4798      	blx	r3
10012c1a:	1c32      	adds	r2, r6, #0
10012c1c:	71a8      	strb	r0, [r5, #6]
10012c1e:	1d61      	adds	r1, r4, #5
10012c20:	1de8      	adds	r0, r5, #7
10012c22:	4b02      	ldr	r3, [pc, #8]	; (10012c2c <gattc_disc_svc_ind_parser+0x38>)
10012c24:	4798      	blx	r3
10012c26:	bd70      	pop	{r4, r5, r6, pc}
10012c28:	10010ac5 	.word	0x10010ac5
10012c2c:	1001521b 	.word	0x1001521b

10012c30 <gattc_disc_svc_incl_ind_parser>:
10012c30:	b570      	push	{r4, r5, r6, lr}
10012c32:	1c15      	adds	r5, r2, #0
10012c34:	0a00      	lsrs	r0, r0, #8
10012c36:	8010      	strh	r0, [r2, #0]
10012c38:	784b      	ldrb	r3, [r1, #1]
10012c3a:	780a      	ldrb	r2, [r1, #0]
10012c3c:	021b      	lsls	r3, r3, #8
10012c3e:	4313      	orrs	r3, r2
10012c40:	806b      	strh	r3, [r5, #2]
10012c42:	78cb      	ldrb	r3, [r1, #3]
10012c44:	788a      	ldrb	r2, [r1, #2]
10012c46:	021b      	lsls	r3, r3, #8
10012c48:	4313      	orrs	r3, r2
10012c4a:	80ab      	strh	r3, [r5, #4]
10012c4c:	794b      	ldrb	r3, [r1, #5]
10012c4e:	790a      	ldrb	r2, [r1, #4]
10012c50:	021b      	lsls	r3, r3, #8
10012c52:	4313      	orrs	r3, r2
10012c54:	80eb      	strh	r3, [r5, #6]
10012c56:	798e      	ldrb	r6, [r1, #6]
10012c58:	4b05      	ldr	r3, [pc, #20]	; (10012c70 <gattc_disc_svc_incl_ind_parser+0x40>)
10012c5a:	1c30      	adds	r0, r6, #0
10012c5c:	1c0c      	adds	r4, r1, #0
10012c5e:	4798      	blx	r3
10012c60:	7228      	strb	r0, [r5, #8]
10012c62:	1c28      	adds	r0, r5, #0
10012c64:	1c32      	adds	r2, r6, #0
10012c66:	1de1      	adds	r1, r4, #7
10012c68:	4b02      	ldr	r3, [pc, #8]	; (10012c74 <gattc_disc_svc_incl_ind_parser+0x44>)
10012c6a:	3009      	adds	r0, #9
10012c6c:	4798      	blx	r3
10012c6e:	bd70      	pop	{r4, r5, r6, pc}
10012c70:	10010ac5 	.word	0x10010ac5
10012c74:	1001521b 	.word	0x1001521b

10012c78 <gattc_disc_char_ind_parser>:
10012c78:	b570      	push	{r4, r5, r6, lr}
10012c7a:	1c15      	adds	r5, r2, #0
10012c7c:	0a00      	lsrs	r0, r0, #8
10012c7e:	8010      	strh	r0, [r2, #0]
10012c80:	784b      	ldrb	r3, [r1, #1]
10012c82:	780a      	ldrb	r2, [r1, #0]
10012c84:	021b      	lsls	r3, r3, #8
10012c86:	4313      	orrs	r3, r2
10012c88:	806b      	strh	r3, [r5, #2]
10012c8a:	78cb      	ldrb	r3, [r1, #3]
10012c8c:	788a      	ldrb	r2, [r1, #2]
10012c8e:	021b      	lsls	r3, r3, #8
10012c90:	4313      	orrs	r3, r2
10012c92:	80ab      	strh	r3, [r5, #4]
10012c94:	790b      	ldrb	r3, [r1, #4]
10012c96:	1c0c      	adds	r4, r1, #0
10012c98:	71ab      	strb	r3, [r5, #6]
10012c9a:	794e      	ldrb	r6, [r1, #5]
10012c9c:	4b05      	ldr	r3, [pc, #20]	; (10012cb4 <gattc_disc_char_ind_parser+0x3c>)
10012c9e:	1c30      	adds	r0, r6, #0
10012ca0:	4798      	blx	r3
10012ca2:	71e8      	strb	r0, [r5, #7]
10012ca4:	1c28      	adds	r0, r5, #0
10012ca6:	1c32      	adds	r2, r6, #0
10012ca8:	1da1      	adds	r1, r4, #6
10012caa:	4b03      	ldr	r3, [pc, #12]	; (10012cb8 <gattc_disc_char_ind_parser+0x40>)
10012cac:	3008      	adds	r0, #8
10012cae:	4798      	blx	r3
10012cb0:	bd70      	pop	{r4, r5, r6, pc}
10012cb2:	46c0      	nop			; (mov r8, r8)
10012cb4:	10010ac5 	.word	0x10010ac5
10012cb8:	1001521b 	.word	0x1001521b

10012cbc <gattc_disc_char_desc_ind_parser>:
10012cbc:	b570      	push	{r4, r5, r6, lr}
10012cbe:	1c15      	adds	r5, r2, #0
10012cc0:	0a00      	lsrs	r0, r0, #8
10012cc2:	8010      	strh	r0, [r2, #0]
10012cc4:	784b      	ldrb	r3, [r1, #1]
10012cc6:	780a      	ldrb	r2, [r1, #0]
10012cc8:	021b      	lsls	r3, r3, #8
10012cca:	4313      	orrs	r3, r2
10012ccc:	806b      	strh	r3, [r5, #2]
10012cce:	788e      	ldrb	r6, [r1, #2]
10012cd0:	4b05      	ldr	r3, [pc, #20]	; (10012ce8 <gattc_disc_char_desc_ind_parser+0x2c>)
10012cd2:	1c30      	adds	r0, r6, #0
10012cd4:	1c0c      	adds	r4, r1, #0
10012cd6:	4798      	blx	r3
10012cd8:	1c32      	adds	r2, r6, #0
10012cda:	7128      	strb	r0, [r5, #4]
10012cdc:	1ce1      	adds	r1, r4, #3
10012cde:	1d68      	adds	r0, r5, #5
10012ce0:	4b02      	ldr	r3, [pc, #8]	; (10012cec <gattc_disc_char_desc_ind_parser+0x30>)
10012ce2:	4798      	blx	r3
10012ce4:	bd70      	pop	{r4, r5, r6, pc}
10012ce6:	46c0      	nop			; (mov r8, r8)
10012ce8:	10010ac5 	.word	0x10010ac5
10012cec:	1001521b 	.word	0x1001521b

10012cf0 <gattc_event_ind_and_notification_parser>:
10012cf0:	b510      	push	{r4, lr}
10012cf2:	780c      	ldrb	r4, [r1, #0]
10012cf4:	1c13      	adds	r3, r2, #0
10012cf6:	2c12      	cmp	r4, #18
10012cf8:	d10e      	bne.n	10012d18 <gattc_event_ind_and_notification_parser+0x28>
10012cfa:	0a00      	lsrs	r0, r0, #8
10012cfc:	8010      	strh	r0, [r2, #0]
10012cfe:	788a      	ldrb	r2, [r1, #2]
10012d00:	709a      	strb	r2, [r3, #2]
10012d02:	7948      	ldrb	r0, [r1, #5]
10012d04:	790c      	ldrb	r4, [r1, #4]
10012d06:	0200      	lsls	r0, r0, #8
10012d08:	4320      	orrs	r0, r4
10012d0a:	8098      	strh	r0, [r3, #4]
10012d0c:	3106      	adds	r1, #6
10012d0e:	1d98      	adds	r0, r3, #6
10012d10:	4b0b      	ldr	r3, [pc, #44]	; (10012d40 <gattc_event_ind_and_notification_parser+0x50>)
10012d12:	4798      	blx	r3
10012d14:	221b      	movs	r2, #27
10012d16:	e010      	b.n	10012d3a <gattc_event_ind_and_notification_parser+0x4a>
10012d18:	2200      	movs	r2, #0
10012d1a:	2c13      	cmp	r4, #19
10012d1c:	d10d      	bne.n	10012d3a <gattc_event_ind_and_notification_parser+0x4a>
10012d1e:	0a00      	lsrs	r0, r0, #8
10012d20:	8018      	strh	r0, [r3, #0]
10012d22:	788a      	ldrb	r2, [r1, #2]
10012d24:	709a      	strb	r2, [r3, #2]
10012d26:	7908      	ldrb	r0, [r1, #4]
10012d28:	78cc      	ldrb	r4, [r1, #3]
10012d2a:	0200      	lsls	r0, r0, #8
10012d2c:	4320      	orrs	r0, r4
10012d2e:	8098      	strh	r0, [r3, #4]
10012d30:	3106      	adds	r1, #6
10012d32:	1d98      	adds	r0, r3, #6
10012d34:	4b02      	ldr	r3, [pc, #8]	; (10012d40 <gattc_event_ind_and_notification_parser+0x50>)
10012d36:	4798      	blx	r3
10012d38:	221c      	movs	r2, #28
10012d3a:	1c10      	adds	r0, r2, #0
10012d3c:	bd10      	pop	{r4, pc}
10012d3e:	46c0      	nop			; (mov r8, r8)
10012d40:	1001521b 	.word	0x1001521b

10012d44 <gattc_complete_evt_handler>:
10012d44:	b500      	push	{lr}
10012d46:	0a00      	lsrs	r0, r0, #8
10012d48:	8010      	strh	r0, [r2, #0]
10012d4a:	7808      	ldrb	r0, [r1, #0]
10012d4c:	7090      	strb	r0, [r2, #2]
10012d4e:	784b      	ldrb	r3, [r1, #1]
10012d50:	3801      	subs	r0, #1
10012d52:	70d3      	strb	r3, [r2, #3]
10012d54:	2813      	cmp	r0, #19
10012d56:	d82c      	bhi.n	10012db2 <gattc_complete_evt_handler+0x6e>
10012d58:	f000 f9dc 	bl	10013114 <__gnu_thumb1_case_uqi>
10012d5c:	0a0a0a0c 	.word	0x0a0a0a0c
10012d60:	210a0a0a 	.word	0x210a0a0a
10012d64:	111f2121 	.word	0x111f2121
10012d68:	2b111111 	.word	0x2b111111
10012d6c:	2919132b 	.word	0x2919132b
10012d70:	2017      	movs	r0, #23
10012d72:	e01f      	b.n	10012db4 <gattc_complete_evt_handler+0x70>
10012d74:	2024      	movs	r0, #36	; 0x24
10012d76:	2b00      	cmp	r3, #0
10012d78:	d11c      	bne.n	10012db4 <gattc_complete_evt_handler+0x70>
10012d7a:	3017      	adds	r0, #23
10012d7c:	e01a      	b.n	10012db4 <gattc_complete_evt_handler+0x70>
10012d7e:	2025      	movs	r0, #37	; 0x25
10012d80:	e018      	b.n	10012db4 <gattc_complete_evt_handler+0x70>
10012d82:	4a0d      	ldr	r2, [pc, #52]	; (10012db8 <gattc_complete_evt_handler+0x74>)
10012d84:	201d      	movs	r0, #29
10012d86:	6813      	ldr	r3, [r2, #0]
10012d88:	3b01      	subs	r3, #1
10012d8a:	6013      	str	r3, [r2, #0]
10012d8c:	e012      	b.n	10012db4 <gattc_complete_evt_handler+0x70>
10012d8e:	4a0a      	ldr	r2, [pc, #40]	; (10012db8 <gattc_complete_evt_handler+0x74>)
10012d90:	201e      	movs	r0, #30
10012d92:	6813      	ldr	r3, [r2, #0]
10012d94:	3b01      	subs	r3, #1
10012d96:	6013      	str	r3, [r2, #0]
10012d98:	e00c      	b.n	10012db4 <gattc_complete_evt_handler+0x70>
10012d9a:	2019      	movs	r0, #25
10012d9c:	e00a      	b.n	10012db4 <gattc_complete_evt_handler+0x70>
10012d9e:	203b      	movs	r0, #59	; 0x3b
10012da0:	2b00      	cmp	r3, #0
10012da2:	d007      	beq.n	10012db4 <gattc_complete_evt_handler+0x70>
10012da4:	2182      	movs	r1, #130	; 0x82
10012da6:	0089      	lsls	r1, r1, #2
10012da8:	5453      	strb	r3, [r2, r1]
10012daa:	3823      	subs	r0, #35	; 0x23
10012dac:	e002      	b.n	10012db4 <gattc_complete_evt_handler+0x70>
10012dae:	2021      	movs	r0, #33	; 0x21
10012db0:	e000      	b.n	10012db4 <gattc_complete_evt_handler+0x70>
10012db2:	2000      	movs	r0, #0
10012db4:	bd00      	pop	{pc}
10012db6:	46c0      	nop			; (mov r8, r8)
10012db8:	1001a174 	.word	0x1001a174

10012dbc <gattc_event_mtu_changed_ind_parser>:
10012dbc:	0a00      	lsrs	r0, r0, #8
10012dbe:	8010      	strh	r0, [r2, #0]
10012dc0:	784b      	ldrb	r3, [r1, #1]
10012dc2:	7809      	ldrb	r1, [r1, #0]
10012dc4:	021b      	lsls	r3, r3, #8
10012dc6:	430b      	orrs	r3, r1
10012dc8:	8053      	strh	r3, [r2, #2]
10012dca:	4770      	bx	lr

10012dcc <gattc_read_ind_parser>:
10012dcc:	0a00      	lsrs	r0, r0, #8
10012dce:	b508      	push	{r3, lr}
10012dd0:	8010      	strh	r0, [r2, #0]
10012dd2:	1c13      	adds	r3, r2, #0
10012dd4:	2282      	movs	r2, #130	; 0x82
10012dd6:	2000      	movs	r0, #0
10012dd8:	0092      	lsls	r2, r2, #2
10012dda:	5498      	strb	r0, [r3, r2]
10012ddc:	784a      	ldrb	r2, [r1, #1]
10012dde:	7808      	ldrb	r0, [r1, #0]
10012de0:	0212      	lsls	r2, r2, #8
10012de2:	4302      	orrs	r2, r0
10012de4:	805a      	strh	r2, [r3, #2]
10012de6:	78ca      	ldrb	r2, [r1, #3]
10012de8:	7888      	ldrb	r0, [r1, #2]
10012dea:	0212      	lsls	r2, r2, #8
10012dec:	4302      	orrs	r2, r0
10012dee:	80da      	strh	r2, [r3, #6]
10012df0:	794a      	ldrb	r2, [r1, #5]
10012df2:	7908      	ldrb	r0, [r1, #4]
10012df4:	0212      	lsls	r2, r2, #8
10012df6:	4302      	orrs	r2, r0
10012df8:	809a      	strh	r2, [r3, #4]
10012dfa:	3308      	adds	r3, #8
10012dfc:	1c18      	adds	r0, r3, #0
10012dfe:	3106      	adds	r1, #6
10012e00:	4b01      	ldr	r3, [pc, #4]	; (10012e08 <gattc_read_ind_parser+0x3c>)
10012e02:	4798      	blx	r3
10012e04:	bd08      	pop	{r3, pc}
10012e06:	46c0      	nop			; (mov r8, r8)
10012e08:	1001521b 	.word	0x1001521b

10012e0c <gattc_svc_changed_cfg_ind_parser>:
10012e0c:	0a00      	lsrs	r0, r0, #8
10012e0e:	8010      	strh	r0, [r2, #0]
10012e10:	784b      	ldrb	r3, [r1, #1]
10012e12:	7809      	ldrb	r1, [r1, #0]
10012e14:	021b      	lsls	r3, r3, #8
10012e16:	430b      	orrs	r3, r1
10012e18:	8053      	strh	r3, [r2, #2]
10012e1a:	4770      	bx	lr

10012e1c <init_gattc_task_module>:
10012e1c:	2300      	movs	r3, #0
10012e1e:	4a02      	ldr	r2, [pc, #8]	; (10012e28 <init_gattc_task_module+0xc>)
10012e20:	8013      	strh	r3, [r2, #0]
10012e22:	4a02      	ldr	r2, [pc, #8]	; (10012e2c <init_gattc_task_module+0x10>)
10012e24:	8013      	strh	r3, [r2, #0]
10012e26:	4770      	bx	lr
10012e28:	1001a16e 	.word	0x1001a16e
10012e2c:	1001a170 	.word	0x1001a170

10012e30 <gattm_add_svc_req_handler>:
10012e30:	2200      	movs	r2, #0
10012e32:	210b      	movs	r1, #11
10012e34:	b5f0      	push	{r4, r5, r6, r7, lr}
10012e36:	1c04      	adds	r4, r0, #0
10012e38:	7943      	ldrb	r3, [r0, #5]
10012e3a:	b085      	sub	sp, #20
10012e3c:	9301      	str	r3, [sp, #4]
10012e3e:	ab02      	add	r3, sp, #8
10012e40:	71da      	strb	r2, [r3, #7]
10012e42:	4b37      	ldr	r3, [pc, #220]	; (10012f20 <gattm_add_svc_req_handler+0xf0>)
10012e44:	7059      	strb	r1, [r3, #1]
10012e46:	7099      	strb	r1, [r3, #2]
10012e48:	4936      	ldr	r1, [pc, #216]	; (10012f24 <gattm_add_svc_req_handler+0xf4>)
10012e4a:	701a      	strb	r2, [r3, #0]
10012e4c:	8808      	ldrh	r0, [r1, #0]
10012e4e:	8809      	ldrh	r1, [r1, #0]
10012e50:	70da      	strb	r2, [r3, #3]
10012e52:	0a09      	lsrs	r1, r1, #8
10012e54:	7118      	strb	r0, [r3, #4]
10012e56:	7159      	strb	r1, [r3, #5]
10012e58:	8821      	ldrh	r1, [r4, #0]
10012e5a:	7219      	strb	r1, [r3, #8]
10012e5c:	8821      	ldrh	r1, [r4, #0]
10012e5e:	0a09      	lsrs	r1, r1, #8
10012e60:	7259      	strb	r1, [r3, #9]
10012e62:	8861      	ldrh	r1, [r4, #2]
10012e64:	7299      	strb	r1, [r3, #10]
10012e66:	8861      	ldrh	r1, [r4, #2]
10012e68:	0a09      	lsrs	r1, r1, #8
10012e6a:	72d9      	strb	r1, [r3, #11]
10012e6c:	7921      	ldrb	r1, [r4, #4]
10012e6e:	7319      	strb	r1, [r3, #12]
10012e70:	4669      	mov	r1, sp
10012e72:	7909      	ldrb	r1, [r1, #4]
10012e74:	7359      	strb	r1, [r3, #13]
10012e76:	18a1      	adds	r1, r4, r2
10012e78:	7988      	ldrb	r0, [r1, #6]
10012e7a:	1899      	adds	r1, r3, r2
10012e7c:	3201      	adds	r2, #1
10012e7e:	7388      	strb	r0, [r1, #14]
10012e80:	2a10      	cmp	r2, #16
10012e82:	d1f8      	bne.n	10012e76 <gattm_add_svc_req_handler+0x46>
10012e84:	1c27      	adds	r7, r4, #0
10012e86:	2300      	movs	r3, #0
10012e88:	251e      	movs	r5, #30
10012e8a:	3716      	adds	r7, #22
10012e8c:	9300      	str	r3, [sp, #0]
10012e8e:	9b00      	ldr	r3, [sp, #0]
10012e90:	9a01      	ldr	r2, [sp, #4]
10012e92:	4e23      	ldr	r6, [pc, #140]	; (10012f20 <gattm_add_svc_req_handler+0xf0>)
10012e94:	4293      	cmp	r3, r2
10012e96:	da21      	bge.n	10012edc <gattm_add_svc_req_handler+0xac>
10012e98:	1c39      	adds	r1, r7, #0
10012e9a:	1970      	adds	r0, r6, r5
10012e9c:	2210      	movs	r2, #16
10012e9e:	4b22      	ldr	r3, [pc, #136]	; (10012f28 <gattm_add_svc_req_handler+0xf8>)
10012ea0:	4798      	blx	r3
10012ea2:	1c2b      	adds	r3, r5, #0
10012ea4:	8a3a      	ldrh	r2, [r7, #16]
10012ea6:	3310      	adds	r3, #16
10012ea8:	b29b      	uxth	r3, r3
10012eaa:	54f2      	strb	r2, [r6, r3]
10012eac:	1c2b      	adds	r3, r5, #0
10012eae:	8a3a      	ldrh	r2, [r7, #16]
10012eb0:	3311      	adds	r3, #17
10012eb2:	b29b      	uxth	r3, r3
10012eb4:	0a12      	lsrs	r2, r2, #8
10012eb6:	54f2      	strb	r2, [r6, r3]
10012eb8:	1c2a      	adds	r2, r5, #0
10012eba:	1c2b      	adds	r3, r5, #0
10012ebc:	8a79      	ldrh	r1, [r7, #18]
10012ebe:	3212      	adds	r2, #18
10012ec0:	b292      	uxth	r2, r2
10012ec2:	54b1      	strb	r1, [r6, r2]
10012ec4:	8a7a      	ldrh	r2, [r7, #18]
10012ec6:	3313      	adds	r3, #19
10012ec8:	b29b      	uxth	r3, r3
10012eca:	0a12      	lsrs	r2, r2, #8
10012ecc:	54f2      	strb	r2, [r6, r3]
10012ece:	9b00      	ldr	r3, [sp, #0]
10012ed0:	3514      	adds	r5, #20
10012ed2:	3301      	adds	r3, #1
10012ed4:	b2ad      	uxth	r5, r5
10012ed6:	9300      	str	r3, [sp, #0]
10012ed8:	3714      	adds	r7, #20
10012eda:	e7d8      	b.n	10012e8e <gattm_add_svc_req_handler+0x5e>
10012edc:	2114      	movs	r1, #20
10012ede:	4d13      	ldr	r5, [pc, #76]	; (10012f2c <gattm_add_svc_req_handler+0xfc>)
10012ee0:	4b13      	ldr	r3, [pc, #76]	; (10012f30 <gattm_add_svc_req_handler+0x100>)
10012ee2:	4351      	muls	r1, r2
10012ee4:	802b      	strh	r3, [r5, #0]
10012ee6:	230b      	movs	r3, #11
10012ee8:	311e      	adds	r1, #30
10012eea:	80ab      	strh	r3, [r5, #4]
10012eec:	1c0b      	adds	r3, r1, #0
10012eee:	3b08      	subs	r3, #8
10012ef0:	71b3      	strb	r3, [r6, #6]
10012ef2:	121b      	asrs	r3, r3, #8
10012ef4:	71f3      	strb	r3, [r6, #7]
10012ef6:	1c30      	adds	r0, r6, #0
10012ef8:	4b0e      	ldr	r3, [pc, #56]	; (10012f34 <gattm_add_svc_req_handler+0x104>)
10012efa:	4798      	blx	r3
10012efc:	ab02      	add	r3, sp, #8
10012efe:	1dde      	adds	r6, r3, #7
10012f00:	1c30      	adds	r0, r6, #0
10012f02:	4b0d      	ldr	r3, [pc, #52]	; (10012f38 <gattm_add_svc_req_handler+0x108>)
10012f04:	4798      	blx	r3
10012f06:	7833      	ldrb	r3, [r6, #0]
10012f08:	20e2      	movs	r0, #226	; 0xe2
10012f0a:	2b00      	cmp	r3, #0
10012f0c:	d106      	bne.n	10012f1c <gattm_add_svc_req_handler+0xec>
10012f0e:	68aa      	ldr	r2, [r5, #8]
10012f10:	7853      	ldrb	r3, [r2, #1]
10012f12:	7811      	ldrb	r1, [r2, #0]
10012f14:	021b      	lsls	r3, r3, #8
10012f16:	430b      	orrs	r3, r1
10012f18:	8023      	strh	r3, [r4, #0]
10012f1a:	7890      	ldrb	r0, [r2, #2]
10012f1c:	b005      	add	sp, #20
10012f1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10012f20:	1001b348 	.word	0x1001b348
10012f24:	1001afd8 	.word	0x1001afd8
10012f28:	1001521b 	.word	0x1001521b
10012f2c:	1001afcc 	.word	0x1001afcc
10012f30:	00000b01 	.word	0x00000b01
10012f34:	10011785 	.word	0x10011785
10012f38:	100117e9 	.word	0x100117e9

10012f3c <gattm_add_attribute_req_handler>:
10012f3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10012f3e:	1c1f      	adds	r7, r3, #0
10012f40:	4b16      	ldr	r3, [pc, #88]	; (10012f9c <gattm_add_attribute_req_handler+0x60>)
10012f42:	9100      	str	r1, [sp, #0]
10012f44:	9201      	str	r2, [sp, #4]
10012f46:	1c05      	adds	r5, r0, #0
10012f48:	7946      	ldrb	r6, [r0, #5]
10012f4a:	6818      	ldr	r0, [r3, #0]
10012f4c:	2114      	movs	r1, #20
10012f4e:	4b14      	ldr	r3, [pc, #80]	; (10012fa0 <gattm_add_attribute_req_handler+0x64>)
10012f50:	382a      	subs	r0, #42	; 0x2a
10012f52:	4798      	blx	r3
10012f54:	2311      	movs	r3, #17
10012f56:	4286      	cmp	r6, r0
10012f58:	d21e      	bcs.n	10012f98 <gattm_add_attribute_req_handler+0x5c>
10012f5a:	2414      	movs	r4, #20
10012f5c:	4366      	muls	r6, r4
10012f5e:	19a8      	adds	r0, r5, r6
10012f60:	2100      	movs	r1, #0
10012f62:	2210      	movs	r2, #16
10012f64:	4b0f      	ldr	r3, [pc, #60]	; (10012fa4 <gattm_add_attribute_req_handler+0x68>)
10012f66:	3016      	adds	r0, #22
10012f68:	4798      	blx	r3
10012f6a:	7968      	ldrb	r0, [r5, #5]
10012f6c:	1c3a      	adds	r2, r7, #0
10012f6e:	4360      	muls	r0, r4
10012f70:	1828      	adds	r0, r5, r0
10012f72:	4b0d      	ldr	r3, [pc, #52]	; (10012fa8 <gattm_add_attribute_req_handler+0x6c>)
10012f74:	3016      	adds	r0, #22
10012f76:	9908      	ldr	r1, [sp, #32]
10012f78:	4798      	blx	r3
10012f7a:	466a      	mov	r2, sp
10012f7c:	796b      	ldrb	r3, [r5, #5]
10012f7e:	8812      	ldrh	r2, [r2, #0]
10012f80:	435c      	muls	r4, r3
10012f82:	192c      	adds	r4, r5, r4
10012f84:	8522      	strh	r2, [r4, #40]	; 0x28
10012f86:	466a      	mov	r2, sp
10012f88:	8892      	ldrh	r2, [r2, #4]
10012f8a:	84e2      	strh	r2, [r4, #38]	; 0x26
10012f8c:	9a09      	ldr	r2, [sp, #36]	; 0x24
10012f8e:	8013      	strh	r3, [r2, #0]
10012f90:	796b      	ldrb	r3, [r5, #5]
10012f92:	3301      	adds	r3, #1
10012f94:	716b      	strb	r3, [r5, #5]
10012f96:	2300      	movs	r3, #0
10012f98:	1c18      	adds	r0, r3, #0
10012f9a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10012f9c:	1001a0e4 	.word	0x1001a0e4
10012fa0:	10013129 	.word	0x10013129
10012fa4:	1001522d 	.word	0x1001522d
10012fa8:	1001521b 	.word	0x1001521b

10012fac <gattm_att_set_value_req_handler>:
10012fac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10012fae:	466b      	mov	r3, sp
10012fb0:	1dde      	adds	r6, r3, #7
10012fb2:	2300      	movs	r3, #0
10012fb4:	1c0d      	adds	r5, r1, #0
10012fb6:	210c      	movs	r1, #12
10012fb8:	270b      	movs	r7, #11
10012fba:	4c17      	ldr	r4, [pc, #92]	; (10013018 <gattm_att_set_value_req_handler+0x6c>)
10012fbc:	7033      	strb	r3, [r6, #0]
10012fbe:	70e3      	strb	r3, [r4, #3]
10012fc0:	4b16      	ldr	r3, [pc, #88]	; (1001301c <gattm_att_set_value_req_handler+0x70>)
10012fc2:	7021      	strb	r1, [r4, #0]
10012fc4:	8819      	ldrh	r1, [r3, #0]
10012fc6:	881b      	ldrh	r3, [r3, #0]
10012fc8:	7220      	strb	r0, [r4, #8]
10012fca:	0a1b      	lsrs	r3, r3, #8
10012fcc:	7163      	strb	r3, [r4, #5]
10012fce:	0a00      	lsrs	r0, r0, #8
10012fd0:	0a2b      	lsrs	r3, r5, #8
10012fd2:	7121      	strb	r1, [r4, #4]
10012fd4:	7260      	strb	r0, [r4, #9]
10012fd6:	1c11      	adds	r1, r2, #0
10012fd8:	72a5      	strb	r5, [r4, #10]
10012fda:	1c2a      	adds	r2, r5, #0
10012fdc:	72e3      	strb	r3, [r4, #11]
10012fde:	350c      	adds	r5, #12
10012fe0:	4b0f      	ldr	r3, [pc, #60]	; (10013020 <gattm_att_set_value_req_handler+0x74>)
10012fe2:	4810      	ldr	r0, [pc, #64]	; (10013024 <gattm_att_set_value_req_handler+0x78>)
10012fe4:	7067      	strb	r7, [r4, #1]
10012fe6:	70a7      	strb	r7, [r4, #2]
10012fe8:	4798      	blx	r3
10012fea:	b2a9      	uxth	r1, r5
10012fec:	4b0e      	ldr	r3, [pc, #56]	; (10013028 <gattm_att_set_value_req_handler+0x7c>)
10012fee:	4d0f      	ldr	r5, [pc, #60]	; (1001302c <gattm_att_set_value_req_handler+0x80>)
10012ff0:	1c20      	adds	r0, r4, #0
10012ff2:	802b      	strh	r3, [r5, #0]
10012ff4:	1c0b      	adds	r3, r1, #0
10012ff6:	3b08      	subs	r3, #8
10012ff8:	71a3      	strb	r3, [r4, #6]
10012ffa:	121b      	asrs	r3, r3, #8
10012ffc:	71e3      	strb	r3, [r4, #7]
10012ffe:	4b0c      	ldr	r3, [pc, #48]	; (10013030 <gattm_att_set_value_req_handler+0x84>)
10013000:	80af      	strh	r7, [r5, #4]
10013002:	4798      	blx	r3
10013004:	1c30      	adds	r0, r6, #0
10013006:	4b0b      	ldr	r3, [pc, #44]	; (10013034 <gattm_att_set_value_req_handler+0x88>)
10013008:	4798      	blx	r3
1001300a:	7833      	ldrb	r3, [r6, #0]
1001300c:	20e2      	movs	r0, #226	; 0xe2
1001300e:	2b00      	cmp	r3, #0
10013010:	d101      	bne.n	10013016 <gattm_att_set_value_req_handler+0x6a>
10013012:	68ab      	ldr	r3, [r5, #8]
10013014:	7898      	ldrb	r0, [r3, #2]
10013016:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10013018:	1001b348 	.word	0x1001b348
1001301c:	1001afd8 	.word	0x1001afd8
10013020:	1001521b 	.word	0x1001521b
10013024:	1001b354 	.word	0x1001b354
10013028:	00000b0d 	.word	0x00000b0d
1001302c:	1001afcc 	.word	0x1001afcc
10013030:	10011785 	.word	0x10011785
10013034:	100117e9 	.word	0x100117e9

10013038 <gattm_att_get_value_req_handler>:
10013038:	b5f0      	push	{r4, r5, r6, r7, lr}
1001303a:	b085      	sub	sp, #20
1001303c:	9201      	str	r2, [sp, #4]
1001303e:	220a      	movs	r2, #10
10013040:	1c04      	adds	r4, r0, #0
10013042:	481d      	ldr	r0, [pc, #116]	; (100130b8 <gattm_att_get_value_req_handler+0x80>)
10013044:	ab02      	add	r3, sp, #8
10013046:	1dde      	adds	r6, r3, #7
10013048:	7002      	strb	r2, [r0, #0]
1001304a:	2300      	movs	r3, #0
1001304c:	220b      	movs	r2, #11
1001304e:	4d1b      	ldr	r5, [pc, #108]	; (100130bc <gattm_att_get_value_req_handler+0x84>)
10013050:	1c0f      	adds	r7, r1, #0
10013052:	8829      	ldrh	r1, [r5, #0]
10013054:	882d      	ldrh	r5, [r5, #0]
10013056:	7101      	strb	r1, [r0, #4]
10013058:	0a2d      	lsrs	r5, r5, #8
1001305a:	7145      	strb	r5, [r0, #5]
1001305c:	0a25      	lsrs	r5, r4, #8
1001305e:	7245      	strb	r5, [r0, #9]
10013060:	4917      	ldr	r1, [pc, #92]	; (100130c0 <gattm_att_get_value_req_handler+0x88>)
10013062:	4d18      	ldr	r5, [pc, #96]	; (100130c4 <gattm_att_get_value_req_handler+0x8c>)
10013064:	7033      	strb	r3, [r6, #0]
10013066:	7042      	strb	r2, [r0, #1]
10013068:	7082      	strb	r2, [r0, #2]
1001306a:	70c3      	strb	r3, [r0, #3]
1001306c:	8029      	strh	r1, [r5, #0]
1001306e:	80aa      	strh	r2, [r5, #4]
10013070:	71c3      	strb	r3, [r0, #7]
10013072:	3a09      	subs	r2, #9
10013074:	210a      	movs	r1, #10
10013076:	4b14      	ldr	r3, [pc, #80]	; (100130c8 <gattm_att_get_value_req_handler+0x90>)
10013078:	7182      	strb	r2, [r0, #6]
1001307a:	7204      	strb	r4, [r0, #8]
1001307c:	4798      	blx	r3
1001307e:	1c30      	adds	r0, r6, #0
10013080:	4b12      	ldr	r3, [pc, #72]	; (100130cc <gattm_att_get_value_req_handler+0x94>)
10013082:	4798      	blx	r3
10013084:	7833      	ldrb	r3, [r6, #0]
10013086:	20e2      	movs	r0, #226	; 0xe2
10013088:	2b00      	cmp	r3, #0
1001308a:	d112      	bne.n	100130b2 <gattm_att_get_value_req_handler+0x7a>
1001308c:	68a9      	ldr	r1, [r5, #8]
1001308e:	9801      	ldr	r0, [sp, #4]
10013090:	784d      	ldrb	r5, [r1, #1]
10013092:	780b      	ldrb	r3, [r1, #0]
10013094:	78ca      	ldrb	r2, [r1, #3]
10013096:	022d      	lsls	r5, r5, #8
10013098:	431d      	orrs	r5, r3
1001309a:	788b      	ldrb	r3, [r1, #2]
1001309c:	0212      	lsls	r2, r2, #8
1001309e:	431a      	orrs	r2, r3
100130a0:	803a      	strh	r2, [r7, #0]
100130a2:	790e      	ldrb	r6, [r1, #4]
100130a4:	4b0a      	ldr	r3, [pc, #40]	; (100130d0 <gattm_att_get_value_req_handler+0x98>)
100130a6:	3105      	adds	r1, #5
100130a8:	4798      	blx	r3
100130aa:	20e2      	movs	r0, #226	; 0xe2
100130ac:	42ac      	cmp	r4, r5
100130ae:	d100      	bne.n	100130b2 <gattm_att_get_value_req_handler+0x7a>
100130b0:	1c30      	adds	r0, r6, #0
100130b2:	b005      	add	sp, #20
100130b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
100130b6:	46c0      	nop			; (mov r8, r8)
100130b8:	1001b348 	.word	0x1001b348
100130bc:	1001afd8 	.word	0x1001afd8
100130c0:	00000b0b 	.word	0x00000b0b
100130c4:	1001afcc 	.word	0x1001afcc
100130c8:	10011785 	.word	0x10011785
100130cc:	100117e9 	.word	0x100117e9
100130d0:	1001521b 	.word	0x1001521b

100130d4 <htpt_enable_rsp_handler>:
100130d4:	780b      	ldrb	r3, [r1, #0]
100130d6:	7013      	strb	r3, [r2, #0]
100130d8:	784b      	ldrb	r3, [r1, #1]
100130da:	7053      	strb	r3, [r2, #1]
100130dc:	4770      	bx	lr

100130de <htpt_temp_send_rsp_handler>:
100130de:	780b      	ldrb	r3, [r1, #0]
100130e0:	7013      	strb	r3, [r2, #0]
100130e2:	4770      	bx	lr

100130e4 <htpt_meas_intv_upd_rsp_handler>:
100130e4:	780b      	ldrb	r3, [r1, #0]
100130e6:	7013      	strb	r3, [r2, #0]
100130e8:	4770      	bx	lr

100130ea <htpt_meas_intv_chg_req_ind_handler>:
100130ea:	78cb      	ldrb	r3, [r1, #3]
100130ec:	7889      	ldrb	r1, [r1, #2]
100130ee:	021b      	lsls	r3, r3, #8
100130f0:	430b      	orrs	r3, r1
100130f2:	8013      	strh	r3, [r2, #0]
100130f4:	4770      	bx	lr

100130f6 <htpt_cfg_indntf_ind_handler>:
100130f6:	780b      	ldrb	r3, [r1, #0]
100130f8:	7013      	strb	r3, [r2, #0]
100130fa:	784b      	ldrb	r3, [r1, #1]
100130fc:	7053      	strb	r3, [r2, #1]
100130fe:	4770      	bx	lr

10013100 <__gnu_thumb1_case_sqi>:
10013100:	b402      	push	{r1}
10013102:	4671      	mov	r1, lr
10013104:	0849      	lsrs	r1, r1, #1
10013106:	0049      	lsls	r1, r1, #1
10013108:	5609      	ldrsb	r1, [r1, r0]
1001310a:	0049      	lsls	r1, r1, #1
1001310c:	448e      	add	lr, r1
1001310e:	bc02      	pop	{r1}
10013110:	4770      	bx	lr
10013112:	46c0      	nop			; (mov r8, r8)

10013114 <__gnu_thumb1_case_uqi>:
10013114:	b402      	push	{r1}
10013116:	4671      	mov	r1, lr
10013118:	0849      	lsrs	r1, r1, #1
1001311a:	0049      	lsls	r1, r1, #1
1001311c:	5c09      	ldrb	r1, [r1, r0]
1001311e:	0049      	lsls	r1, r1, #1
10013120:	448e      	add	lr, r1
10013122:	bc02      	pop	{r1}
10013124:	4770      	bx	lr
10013126:	46c0      	nop			; (mov r8, r8)

10013128 <__aeabi_uidiv>:
10013128:	2200      	movs	r2, #0
1001312a:	0843      	lsrs	r3, r0, #1
1001312c:	428b      	cmp	r3, r1
1001312e:	d374      	bcc.n	1001321a <__aeabi_uidiv+0xf2>
10013130:	0903      	lsrs	r3, r0, #4
10013132:	428b      	cmp	r3, r1
10013134:	d35f      	bcc.n	100131f6 <__aeabi_uidiv+0xce>
10013136:	0a03      	lsrs	r3, r0, #8
10013138:	428b      	cmp	r3, r1
1001313a:	d344      	bcc.n	100131c6 <__aeabi_uidiv+0x9e>
1001313c:	0b03      	lsrs	r3, r0, #12
1001313e:	428b      	cmp	r3, r1
10013140:	d328      	bcc.n	10013194 <__aeabi_uidiv+0x6c>
10013142:	0c03      	lsrs	r3, r0, #16
10013144:	428b      	cmp	r3, r1
10013146:	d30d      	bcc.n	10013164 <__aeabi_uidiv+0x3c>
10013148:	22ff      	movs	r2, #255	; 0xff
1001314a:	0209      	lsls	r1, r1, #8
1001314c:	ba12      	rev	r2, r2
1001314e:	0c03      	lsrs	r3, r0, #16
10013150:	428b      	cmp	r3, r1
10013152:	d302      	bcc.n	1001315a <__aeabi_uidiv+0x32>
10013154:	1212      	asrs	r2, r2, #8
10013156:	0209      	lsls	r1, r1, #8
10013158:	d065      	beq.n	10013226 <__aeabi_uidiv+0xfe>
1001315a:	0b03      	lsrs	r3, r0, #12
1001315c:	428b      	cmp	r3, r1
1001315e:	d319      	bcc.n	10013194 <__aeabi_uidiv+0x6c>
10013160:	e000      	b.n	10013164 <__aeabi_uidiv+0x3c>
10013162:	0a09      	lsrs	r1, r1, #8
10013164:	0bc3      	lsrs	r3, r0, #15
10013166:	428b      	cmp	r3, r1
10013168:	d301      	bcc.n	1001316e <__aeabi_uidiv+0x46>
1001316a:	03cb      	lsls	r3, r1, #15
1001316c:	1ac0      	subs	r0, r0, r3
1001316e:	4152      	adcs	r2, r2
10013170:	0b83      	lsrs	r3, r0, #14
10013172:	428b      	cmp	r3, r1
10013174:	d301      	bcc.n	1001317a <__aeabi_uidiv+0x52>
10013176:	038b      	lsls	r3, r1, #14
10013178:	1ac0      	subs	r0, r0, r3
1001317a:	4152      	adcs	r2, r2
1001317c:	0b43      	lsrs	r3, r0, #13
1001317e:	428b      	cmp	r3, r1
10013180:	d301      	bcc.n	10013186 <__aeabi_uidiv+0x5e>
10013182:	034b      	lsls	r3, r1, #13
10013184:	1ac0      	subs	r0, r0, r3
10013186:	4152      	adcs	r2, r2
10013188:	0b03      	lsrs	r3, r0, #12
1001318a:	428b      	cmp	r3, r1
1001318c:	d301      	bcc.n	10013192 <__aeabi_uidiv+0x6a>
1001318e:	030b      	lsls	r3, r1, #12
10013190:	1ac0      	subs	r0, r0, r3
10013192:	4152      	adcs	r2, r2
10013194:	0ac3      	lsrs	r3, r0, #11
10013196:	428b      	cmp	r3, r1
10013198:	d301      	bcc.n	1001319e <__aeabi_uidiv+0x76>
1001319a:	02cb      	lsls	r3, r1, #11
1001319c:	1ac0      	subs	r0, r0, r3
1001319e:	4152      	adcs	r2, r2
100131a0:	0a83      	lsrs	r3, r0, #10
100131a2:	428b      	cmp	r3, r1
100131a4:	d301      	bcc.n	100131aa <__aeabi_uidiv+0x82>
100131a6:	028b      	lsls	r3, r1, #10
100131a8:	1ac0      	subs	r0, r0, r3
100131aa:	4152      	adcs	r2, r2
100131ac:	0a43      	lsrs	r3, r0, #9
100131ae:	428b      	cmp	r3, r1
100131b0:	d301      	bcc.n	100131b6 <__aeabi_uidiv+0x8e>
100131b2:	024b      	lsls	r3, r1, #9
100131b4:	1ac0      	subs	r0, r0, r3
100131b6:	4152      	adcs	r2, r2
100131b8:	0a03      	lsrs	r3, r0, #8
100131ba:	428b      	cmp	r3, r1
100131bc:	d301      	bcc.n	100131c2 <__aeabi_uidiv+0x9a>
100131be:	020b      	lsls	r3, r1, #8
100131c0:	1ac0      	subs	r0, r0, r3
100131c2:	4152      	adcs	r2, r2
100131c4:	d2cd      	bcs.n	10013162 <__aeabi_uidiv+0x3a>
100131c6:	09c3      	lsrs	r3, r0, #7
100131c8:	428b      	cmp	r3, r1
100131ca:	d301      	bcc.n	100131d0 <__aeabi_uidiv+0xa8>
100131cc:	01cb      	lsls	r3, r1, #7
100131ce:	1ac0      	subs	r0, r0, r3
100131d0:	4152      	adcs	r2, r2
100131d2:	0983      	lsrs	r3, r0, #6
100131d4:	428b      	cmp	r3, r1
100131d6:	d301      	bcc.n	100131dc <__aeabi_uidiv+0xb4>
100131d8:	018b      	lsls	r3, r1, #6
100131da:	1ac0      	subs	r0, r0, r3
100131dc:	4152      	adcs	r2, r2
100131de:	0943      	lsrs	r3, r0, #5
100131e0:	428b      	cmp	r3, r1
100131e2:	d301      	bcc.n	100131e8 <__aeabi_uidiv+0xc0>
100131e4:	014b      	lsls	r3, r1, #5
100131e6:	1ac0      	subs	r0, r0, r3
100131e8:	4152      	adcs	r2, r2
100131ea:	0903      	lsrs	r3, r0, #4
100131ec:	428b      	cmp	r3, r1
100131ee:	d301      	bcc.n	100131f4 <__aeabi_uidiv+0xcc>
100131f0:	010b      	lsls	r3, r1, #4
100131f2:	1ac0      	subs	r0, r0, r3
100131f4:	4152      	adcs	r2, r2
100131f6:	08c3      	lsrs	r3, r0, #3
100131f8:	428b      	cmp	r3, r1
100131fa:	d301      	bcc.n	10013200 <__aeabi_uidiv+0xd8>
100131fc:	00cb      	lsls	r3, r1, #3
100131fe:	1ac0      	subs	r0, r0, r3
10013200:	4152      	adcs	r2, r2
10013202:	0883      	lsrs	r3, r0, #2
10013204:	428b      	cmp	r3, r1
10013206:	d301      	bcc.n	1001320c <__aeabi_uidiv+0xe4>
10013208:	008b      	lsls	r3, r1, #2
1001320a:	1ac0      	subs	r0, r0, r3
1001320c:	4152      	adcs	r2, r2
1001320e:	0843      	lsrs	r3, r0, #1
10013210:	428b      	cmp	r3, r1
10013212:	d301      	bcc.n	10013218 <__aeabi_uidiv+0xf0>
10013214:	004b      	lsls	r3, r1, #1
10013216:	1ac0      	subs	r0, r0, r3
10013218:	4152      	adcs	r2, r2
1001321a:	1a41      	subs	r1, r0, r1
1001321c:	d200      	bcs.n	10013220 <__aeabi_uidiv+0xf8>
1001321e:	4601      	mov	r1, r0
10013220:	4152      	adcs	r2, r2
10013222:	4610      	mov	r0, r2
10013224:	4770      	bx	lr
10013226:	e7ff      	b.n	10013228 <__aeabi_uidiv+0x100>
10013228:	b501      	push	{r0, lr}
1001322a:	2000      	movs	r0, #0
1001322c:	f000 f8f0 	bl	10013410 <__aeabi_idiv0>
10013230:	bd02      	pop	{r1, pc}
10013232:	46c0      	nop			; (mov r8, r8)

10013234 <__aeabi_uidivmod>:
10013234:	2900      	cmp	r1, #0
10013236:	d0f7      	beq.n	10013228 <__aeabi_uidiv+0x100>
10013238:	e776      	b.n	10013128 <__aeabi_uidiv>
1001323a:	4770      	bx	lr

1001323c <__aeabi_idiv>:
1001323c:	4603      	mov	r3, r0
1001323e:	430b      	orrs	r3, r1
10013240:	d47f      	bmi.n	10013342 <__aeabi_idiv+0x106>
10013242:	2200      	movs	r2, #0
10013244:	0843      	lsrs	r3, r0, #1
10013246:	428b      	cmp	r3, r1
10013248:	d374      	bcc.n	10013334 <__aeabi_idiv+0xf8>
1001324a:	0903      	lsrs	r3, r0, #4
1001324c:	428b      	cmp	r3, r1
1001324e:	d35f      	bcc.n	10013310 <__aeabi_idiv+0xd4>
10013250:	0a03      	lsrs	r3, r0, #8
10013252:	428b      	cmp	r3, r1
10013254:	d344      	bcc.n	100132e0 <__aeabi_idiv+0xa4>
10013256:	0b03      	lsrs	r3, r0, #12
10013258:	428b      	cmp	r3, r1
1001325a:	d328      	bcc.n	100132ae <__aeabi_idiv+0x72>
1001325c:	0c03      	lsrs	r3, r0, #16
1001325e:	428b      	cmp	r3, r1
10013260:	d30d      	bcc.n	1001327e <__aeabi_idiv+0x42>
10013262:	22ff      	movs	r2, #255	; 0xff
10013264:	0209      	lsls	r1, r1, #8
10013266:	ba12      	rev	r2, r2
10013268:	0c03      	lsrs	r3, r0, #16
1001326a:	428b      	cmp	r3, r1
1001326c:	d302      	bcc.n	10013274 <__aeabi_idiv+0x38>
1001326e:	1212      	asrs	r2, r2, #8
10013270:	0209      	lsls	r1, r1, #8
10013272:	d065      	beq.n	10013340 <__aeabi_idiv+0x104>
10013274:	0b03      	lsrs	r3, r0, #12
10013276:	428b      	cmp	r3, r1
10013278:	d319      	bcc.n	100132ae <__aeabi_idiv+0x72>
1001327a:	e000      	b.n	1001327e <__aeabi_idiv+0x42>
1001327c:	0a09      	lsrs	r1, r1, #8
1001327e:	0bc3      	lsrs	r3, r0, #15
10013280:	428b      	cmp	r3, r1
10013282:	d301      	bcc.n	10013288 <__aeabi_idiv+0x4c>
10013284:	03cb      	lsls	r3, r1, #15
10013286:	1ac0      	subs	r0, r0, r3
10013288:	4152      	adcs	r2, r2
1001328a:	0b83      	lsrs	r3, r0, #14
1001328c:	428b      	cmp	r3, r1
1001328e:	d301      	bcc.n	10013294 <__aeabi_idiv+0x58>
10013290:	038b      	lsls	r3, r1, #14
10013292:	1ac0      	subs	r0, r0, r3
10013294:	4152      	adcs	r2, r2
10013296:	0b43      	lsrs	r3, r0, #13
10013298:	428b      	cmp	r3, r1
1001329a:	d301      	bcc.n	100132a0 <__aeabi_idiv+0x64>
1001329c:	034b      	lsls	r3, r1, #13
1001329e:	1ac0      	subs	r0, r0, r3
100132a0:	4152      	adcs	r2, r2
100132a2:	0b03      	lsrs	r3, r0, #12
100132a4:	428b      	cmp	r3, r1
100132a6:	d301      	bcc.n	100132ac <__aeabi_idiv+0x70>
100132a8:	030b      	lsls	r3, r1, #12
100132aa:	1ac0      	subs	r0, r0, r3
100132ac:	4152      	adcs	r2, r2
100132ae:	0ac3      	lsrs	r3, r0, #11
100132b0:	428b      	cmp	r3, r1
100132b2:	d301      	bcc.n	100132b8 <__aeabi_idiv+0x7c>
100132b4:	02cb      	lsls	r3, r1, #11
100132b6:	1ac0      	subs	r0, r0, r3
100132b8:	4152      	adcs	r2, r2
100132ba:	0a83      	lsrs	r3, r0, #10
100132bc:	428b      	cmp	r3, r1
100132be:	d301      	bcc.n	100132c4 <__aeabi_idiv+0x88>
100132c0:	028b      	lsls	r3, r1, #10
100132c2:	1ac0      	subs	r0, r0, r3
100132c4:	4152      	adcs	r2, r2
100132c6:	0a43      	lsrs	r3, r0, #9
100132c8:	428b      	cmp	r3, r1
100132ca:	d301      	bcc.n	100132d0 <__aeabi_idiv+0x94>
100132cc:	024b      	lsls	r3, r1, #9
100132ce:	1ac0      	subs	r0, r0, r3
100132d0:	4152      	adcs	r2, r2
100132d2:	0a03      	lsrs	r3, r0, #8
100132d4:	428b      	cmp	r3, r1
100132d6:	d301      	bcc.n	100132dc <__aeabi_idiv+0xa0>
100132d8:	020b      	lsls	r3, r1, #8
100132da:	1ac0      	subs	r0, r0, r3
100132dc:	4152      	adcs	r2, r2
100132de:	d2cd      	bcs.n	1001327c <__aeabi_idiv+0x40>
100132e0:	09c3      	lsrs	r3, r0, #7
100132e2:	428b      	cmp	r3, r1
100132e4:	d301      	bcc.n	100132ea <__aeabi_idiv+0xae>
100132e6:	01cb      	lsls	r3, r1, #7
100132e8:	1ac0      	subs	r0, r0, r3
100132ea:	4152      	adcs	r2, r2
100132ec:	0983      	lsrs	r3, r0, #6
100132ee:	428b      	cmp	r3, r1
100132f0:	d301      	bcc.n	100132f6 <__aeabi_idiv+0xba>
100132f2:	018b      	lsls	r3, r1, #6
100132f4:	1ac0      	subs	r0, r0, r3
100132f6:	4152      	adcs	r2, r2
100132f8:	0943      	lsrs	r3, r0, #5
100132fa:	428b      	cmp	r3, r1
100132fc:	d301      	bcc.n	10013302 <__aeabi_idiv+0xc6>
100132fe:	014b      	lsls	r3, r1, #5
10013300:	1ac0      	subs	r0, r0, r3
10013302:	4152      	adcs	r2, r2
10013304:	0903      	lsrs	r3, r0, #4
10013306:	428b      	cmp	r3, r1
10013308:	d301      	bcc.n	1001330e <__aeabi_idiv+0xd2>
1001330a:	010b      	lsls	r3, r1, #4
1001330c:	1ac0      	subs	r0, r0, r3
1001330e:	4152      	adcs	r2, r2
10013310:	08c3      	lsrs	r3, r0, #3
10013312:	428b      	cmp	r3, r1
10013314:	d301      	bcc.n	1001331a <__aeabi_idiv+0xde>
10013316:	00cb      	lsls	r3, r1, #3
10013318:	1ac0      	subs	r0, r0, r3
1001331a:	4152      	adcs	r2, r2
1001331c:	0883      	lsrs	r3, r0, #2
1001331e:	428b      	cmp	r3, r1
10013320:	d301      	bcc.n	10013326 <__aeabi_idiv+0xea>
10013322:	008b      	lsls	r3, r1, #2
10013324:	1ac0      	subs	r0, r0, r3
10013326:	4152      	adcs	r2, r2
10013328:	0843      	lsrs	r3, r0, #1
1001332a:	428b      	cmp	r3, r1
1001332c:	d301      	bcc.n	10013332 <__aeabi_idiv+0xf6>
1001332e:	004b      	lsls	r3, r1, #1
10013330:	1ac0      	subs	r0, r0, r3
10013332:	4152      	adcs	r2, r2
10013334:	1a41      	subs	r1, r0, r1
10013336:	d200      	bcs.n	1001333a <__aeabi_idiv+0xfe>
10013338:	4601      	mov	r1, r0
1001333a:	4152      	adcs	r2, r2
1001333c:	4610      	mov	r0, r2
1001333e:	4770      	bx	lr
10013340:	e05d      	b.n	100133fe <__aeabi_idiv+0x1c2>
10013342:	0fca      	lsrs	r2, r1, #31
10013344:	d000      	beq.n	10013348 <__aeabi_idiv+0x10c>
10013346:	4249      	negs	r1, r1
10013348:	1003      	asrs	r3, r0, #32
1001334a:	d300      	bcc.n	1001334e <__aeabi_idiv+0x112>
1001334c:	4240      	negs	r0, r0
1001334e:	4053      	eors	r3, r2
10013350:	2200      	movs	r2, #0
10013352:	469c      	mov	ip, r3
10013354:	0903      	lsrs	r3, r0, #4
10013356:	428b      	cmp	r3, r1
10013358:	d32d      	bcc.n	100133b6 <__aeabi_idiv+0x17a>
1001335a:	0a03      	lsrs	r3, r0, #8
1001335c:	428b      	cmp	r3, r1
1001335e:	d312      	bcc.n	10013386 <__aeabi_idiv+0x14a>
10013360:	22fc      	movs	r2, #252	; 0xfc
10013362:	0189      	lsls	r1, r1, #6
10013364:	ba12      	rev	r2, r2
10013366:	0a03      	lsrs	r3, r0, #8
10013368:	428b      	cmp	r3, r1
1001336a:	d30c      	bcc.n	10013386 <__aeabi_idiv+0x14a>
1001336c:	0189      	lsls	r1, r1, #6
1001336e:	1192      	asrs	r2, r2, #6
10013370:	428b      	cmp	r3, r1
10013372:	d308      	bcc.n	10013386 <__aeabi_idiv+0x14a>
10013374:	0189      	lsls	r1, r1, #6
10013376:	1192      	asrs	r2, r2, #6
10013378:	428b      	cmp	r3, r1
1001337a:	d304      	bcc.n	10013386 <__aeabi_idiv+0x14a>
1001337c:	0189      	lsls	r1, r1, #6
1001337e:	d03a      	beq.n	100133f6 <__aeabi_idiv+0x1ba>
10013380:	1192      	asrs	r2, r2, #6
10013382:	e000      	b.n	10013386 <__aeabi_idiv+0x14a>
10013384:	0989      	lsrs	r1, r1, #6
10013386:	09c3      	lsrs	r3, r0, #7
10013388:	428b      	cmp	r3, r1
1001338a:	d301      	bcc.n	10013390 <__aeabi_idiv+0x154>
1001338c:	01cb      	lsls	r3, r1, #7
1001338e:	1ac0      	subs	r0, r0, r3
10013390:	4152      	adcs	r2, r2
10013392:	0983      	lsrs	r3, r0, #6
10013394:	428b      	cmp	r3, r1
10013396:	d301      	bcc.n	1001339c <__aeabi_idiv+0x160>
10013398:	018b      	lsls	r3, r1, #6
1001339a:	1ac0      	subs	r0, r0, r3
1001339c:	4152      	adcs	r2, r2
1001339e:	0943      	lsrs	r3, r0, #5
100133a0:	428b      	cmp	r3, r1
100133a2:	d301      	bcc.n	100133a8 <__aeabi_idiv+0x16c>
100133a4:	014b      	lsls	r3, r1, #5
100133a6:	1ac0      	subs	r0, r0, r3
100133a8:	4152      	adcs	r2, r2
100133aa:	0903      	lsrs	r3, r0, #4
100133ac:	428b      	cmp	r3, r1
100133ae:	d301      	bcc.n	100133b4 <__aeabi_idiv+0x178>
100133b0:	010b      	lsls	r3, r1, #4
100133b2:	1ac0      	subs	r0, r0, r3
100133b4:	4152      	adcs	r2, r2
100133b6:	08c3      	lsrs	r3, r0, #3
100133b8:	428b      	cmp	r3, r1
100133ba:	d301      	bcc.n	100133c0 <__aeabi_idiv+0x184>
100133bc:	00cb      	lsls	r3, r1, #3
100133be:	1ac0      	subs	r0, r0, r3
100133c0:	4152      	adcs	r2, r2
100133c2:	0883      	lsrs	r3, r0, #2
100133c4:	428b      	cmp	r3, r1
100133c6:	d301      	bcc.n	100133cc <__aeabi_idiv+0x190>
100133c8:	008b      	lsls	r3, r1, #2
100133ca:	1ac0      	subs	r0, r0, r3
100133cc:	4152      	adcs	r2, r2
100133ce:	d2d9      	bcs.n	10013384 <__aeabi_idiv+0x148>
100133d0:	0843      	lsrs	r3, r0, #1
100133d2:	428b      	cmp	r3, r1
100133d4:	d301      	bcc.n	100133da <__aeabi_idiv+0x19e>
100133d6:	004b      	lsls	r3, r1, #1
100133d8:	1ac0      	subs	r0, r0, r3
100133da:	4152      	adcs	r2, r2
100133dc:	1a41      	subs	r1, r0, r1
100133de:	d200      	bcs.n	100133e2 <__aeabi_idiv+0x1a6>
100133e0:	4601      	mov	r1, r0
100133e2:	4663      	mov	r3, ip
100133e4:	4152      	adcs	r2, r2
100133e6:	105b      	asrs	r3, r3, #1
100133e8:	4610      	mov	r0, r2
100133ea:	d301      	bcc.n	100133f0 <__aeabi_idiv+0x1b4>
100133ec:	4240      	negs	r0, r0
100133ee:	2b00      	cmp	r3, #0
100133f0:	d500      	bpl.n	100133f4 <__aeabi_idiv+0x1b8>
100133f2:	4249      	negs	r1, r1
100133f4:	4770      	bx	lr
100133f6:	4663      	mov	r3, ip
100133f8:	105b      	asrs	r3, r3, #1
100133fa:	d300      	bcc.n	100133fe <__aeabi_idiv+0x1c2>
100133fc:	4240      	negs	r0, r0
100133fe:	b501      	push	{r0, lr}
10013400:	2000      	movs	r0, #0
10013402:	f000 f805 	bl	10013410 <__aeabi_idiv0>
10013406:	bd02      	pop	{r1, pc}

10013408 <__aeabi_idivmod>:
10013408:	2900      	cmp	r1, #0
1001340a:	d0f8      	beq.n	100133fe <__aeabi_idiv+0x1c2>
1001340c:	e716      	b.n	1001323c <__aeabi_idiv>
1001340e:	4770      	bx	lr

10013410 <__aeabi_idiv0>:
10013410:	4770      	bx	lr
10013412:	46c0      	nop			; (mov r8, r8)

10013414 <__aeabi_cdrcmple>:
10013414:	4684      	mov	ip, r0
10013416:	1c10      	adds	r0, r2, #0
10013418:	4662      	mov	r2, ip
1001341a:	468c      	mov	ip, r1
1001341c:	1c19      	adds	r1, r3, #0
1001341e:	4663      	mov	r3, ip
10013420:	e000      	b.n	10013424 <__aeabi_cdcmpeq>
10013422:	46c0      	nop			; (mov r8, r8)

10013424 <__aeabi_cdcmpeq>:
10013424:	b51f      	push	{r0, r1, r2, r3, r4, lr}
10013426:	f000 fff5 	bl	10014414 <__ledf2>
1001342a:	2800      	cmp	r0, #0
1001342c:	d401      	bmi.n	10013432 <__aeabi_cdcmpeq+0xe>
1001342e:	2100      	movs	r1, #0
10013430:	42c8      	cmn	r0, r1
10013432:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

10013434 <__aeabi_dcmpeq>:
10013434:	b510      	push	{r4, lr}
10013436:	f000 ff49 	bl	100142cc <__eqdf2>
1001343a:	4240      	negs	r0, r0
1001343c:	3001      	adds	r0, #1
1001343e:	bd10      	pop	{r4, pc}

10013440 <__aeabi_dcmplt>:
10013440:	b510      	push	{r4, lr}
10013442:	f000 ffe7 	bl	10014414 <__ledf2>
10013446:	2800      	cmp	r0, #0
10013448:	db01      	blt.n	1001344e <__aeabi_dcmplt+0xe>
1001344a:	2000      	movs	r0, #0
1001344c:	bd10      	pop	{r4, pc}
1001344e:	2001      	movs	r0, #1
10013450:	bd10      	pop	{r4, pc}
10013452:	46c0      	nop			; (mov r8, r8)

10013454 <__aeabi_dcmple>:
10013454:	b510      	push	{r4, lr}
10013456:	f000 ffdd 	bl	10014414 <__ledf2>
1001345a:	2800      	cmp	r0, #0
1001345c:	dd01      	ble.n	10013462 <__aeabi_dcmple+0xe>
1001345e:	2000      	movs	r0, #0
10013460:	bd10      	pop	{r4, pc}
10013462:	2001      	movs	r0, #1
10013464:	bd10      	pop	{r4, pc}
10013466:	46c0      	nop			; (mov r8, r8)

10013468 <__aeabi_dcmpgt>:
10013468:	b510      	push	{r4, lr}
1001346a:	f000 ff6f 	bl	1001434c <__gedf2>
1001346e:	2800      	cmp	r0, #0
10013470:	dc01      	bgt.n	10013476 <__aeabi_dcmpgt+0xe>
10013472:	2000      	movs	r0, #0
10013474:	bd10      	pop	{r4, pc}
10013476:	2001      	movs	r0, #1
10013478:	bd10      	pop	{r4, pc}
1001347a:	46c0      	nop			; (mov r8, r8)

1001347c <__aeabi_dcmpge>:
1001347c:	b510      	push	{r4, lr}
1001347e:	f000 ff65 	bl	1001434c <__gedf2>
10013482:	2800      	cmp	r0, #0
10013484:	da01      	bge.n	1001348a <__aeabi_dcmpge+0xe>
10013486:	2000      	movs	r0, #0
10013488:	bd10      	pop	{r4, pc}
1001348a:	2001      	movs	r0, #1
1001348c:	bd10      	pop	{r4, pc}
1001348e:	46c0      	nop			; (mov r8, r8)

10013490 <__aeabi_cfrcmple>:
10013490:	4684      	mov	ip, r0
10013492:	1c08      	adds	r0, r1, #0
10013494:	4661      	mov	r1, ip
10013496:	e7ff      	b.n	10013498 <__aeabi_cfcmpeq>

10013498 <__aeabi_cfcmpeq>:
10013498:	b51f      	push	{r0, r1, r2, r3, r4, lr}
1001349a:	f000 fb91 	bl	10013bc0 <__lesf2>
1001349e:	2800      	cmp	r0, #0
100134a0:	d401      	bmi.n	100134a6 <__aeabi_cfcmpeq+0xe>
100134a2:	2100      	movs	r1, #0
100134a4:	42c8      	cmn	r0, r1
100134a6:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

100134a8 <__aeabi_fcmpeq>:
100134a8:	b510      	push	{r4, lr}
100134aa:	f000 fb1d 	bl	10013ae8 <__eqsf2>
100134ae:	4240      	negs	r0, r0
100134b0:	3001      	adds	r0, #1
100134b2:	bd10      	pop	{r4, pc}

100134b4 <__aeabi_fcmplt>:
100134b4:	b510      	push	{r4, lr}
100134b6:	f000 fb83 	bl	10013bc0 <__lesf2>
100134ba:	2800      	cmp	r0, #0
100134bc:	db01      	blt.n	100134c2 <__aeabi_fcmplt+0xe>
100134be:	2000      	movs	r0, #0
100134c0:	bd10      	pop	{r4, pc}
100134c2:	2001      	movs	r0, #1
100134c4:	bd10      	pop	{r4, pc}
100134c6:	46c0      	nop			; (mov r8, r8)

100134c8 <__aeabi_fcmple>:
100134c8:	b510      	push	{r4, lr}
100134ca:	f000 fb79 	bl	10013bc0 <__lesf2>
100134ce:	2800      	cmp	r0, #0
100134d0:	dd01      	ble.n	100134d6 <__aeabi_fcmple+0xe>
100134d2:	2000      	movs	r0, #0
100134d4:	bd10      	pop	{r4, pc}
100134d6:	2001      	movs	r0, #1
100134d8:	bd10      	pop	{r4, pc}
100134da:	46c0      	nop			; (mov r8, r8)

100134dc <__aeabi_fcmpgt>:
100134dc:	b510      	push	{r4, lr}
100134de:	f000 fb2b 	bl	10013b38 <__gesf2>
100134e2:	2800      	cmp	r0, #0
100134e4:	dc01      	bgt.n	100134ea <__aeabi_fcmpgt+0xe>
100134e6:	2000      	movs	r0, #0
100134e8:	bd10      	pop	{r4, pc}
100134ea:	2001      	movs	r0, #1
100134ec:	bd10      	pop	{r4, pc}
100134ee:	46c0      	nop			; (mov r8, r8)

100134f0 <__aeabi_fcmpge>:
100134f0:	b510      	push	{r4, lr}
100134f2:	f000 fb21 	bl	10013b38 <__gesf2>
100134f6:	2800      	cmp	r0, #0
100134f8:	da01      	bge.n	100134fe <__aeabi_fcmpge+0xe>
100134fa:	2000      	movs	r0, #0
100134fc:	bd10      	pop	{r4, pc}
100134fe:	2001      	movs	r0, #1
10013500:	bd10      	pop	{r4, pc}
10013502:	46c0      	nop			; (mov r8, r8)

10013504 <__aeabi_lmul>:
10013504:	b5f0      	push	{r4, r5, r6, r7, lr}
10013506:	464f      	mov	r7, r9
10013508:	4646      	mov	r6, r8
1001350a:	b4c0      	push	{r6, r7}
1001350c:	0416      	lsls	r6, r2, #16
1001350e:	0c36      	lsrs	r6, r6, #16
10013510:	4699      	mov	r9, r3
10013512:	0033      	movs	r3, r6
10013514:	0405      	lsls	r5, r0, #16
10013516:	0c2c      	lsrs	r4, r5, #16
10013518:	0c07      	lsrs	r7, r0, #16
1001351a:	0c15      	lsrs	r5, r2, #16
1001351c:	4363      	muls	r3, r4
1001351e:	437e      	muls	r6, r7
10013520:	436f      	muls	r7, r5
10013522:	4365      	muls	r5, r4
10013524:	0c1c      	lsrs	r4, r3, #16
10013526:	19ad      	adds	r5, r5, r6
10013528:	1964      	adds	r4, r4, r5
1001352a:	469c      	mov	ip, r3
1001352c:	42a6      	cmp	r6, r4
1001352e:	d903      	bls.n	10013538 <__aeabi_lmul+0x34>
10013530:	2380      	movs	r3, #128	; 0x80
10013532:	025b      	lsls	r3, r3, #9
10013534:	4698      	mov	r8, r3
10013536:	4447      	add	r7, r8
10013538:	4663      	mov	r3, ip
1001353a:	0c25      	lsrs	r5, r4, #16
1001353c:	19ef      	adds	r7, r5, r7
1001353e:	041d      	lsls	r5, r3, #16
10013540:	464b      	mov	r3, r9
10013542:	434a      	muls	r2, r1
10013544:	4343      	muls	r3, r0
10013546:	0c2d      	lsrs	r5, r5, #16
10013548:	0424      	lsls	r4, r4, #16
1001354a:	1964      	adds	r4, r4, r5
1001354c:	1899      	adds	r1, r3, r2
1001354e:	19c9      	adds	r1, r1, r7
10013550:	0020      	movs	r0, r4
10013552:	bc0c      	pop	{r2, r3}
10013554:	4690      	mov	r8, r2
10013556:	4699      	mov	r9, r3
10013558:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001355a:	46c0      	nop			; (mov r8, r8)

1001355c <__aeabi_f2uiz>:
1001355c:	219e      	movs	r1, #158	; 0x9e
1001355e:	b510      	push	{r4, lr}
10013560:	05c9      	lsls	r1, r1, #23
10013562:	1c04      	adds	r4, r0, #0
10013564:	f7ff ffc4 	bl	100134f0 <__aeabi_fcmpge>
10013568:	2800      	cmp	r0, #0
1001356a:	d103      	bne.n	10013574 <__aeabi_f2uiz+0x18>
1001356c:	1c20      	adds	r0, r4, #0
1001356e:	f000 fe05 	bl	1001417c <__aeabi_f2iz>
10013572:	bd10      	pop	{r4, pc}
10013574:	219e      	movs	r1, #158	; 0x9e
10013576:	1c20      	adds	r0, r4, #0
10013578:	05c9      	lsls	r1, r1, #23
1001357a:	f000 fc79 	bl	10013e70 <__aeabi_fsub>
1001357e:	f000 fdfd 	bl	1001417c <__aeabi_f2iz>
10013582:	2380      	movs	r3, #128	; 0x80
10013584:	061b      	lsls	r3, r3, #24
10013586:	469c      	mov	ip, r3
10013588:	4460      	add	r0, ip
1001358a:	e7f2      	b.n	10013572 <__aeabi_f2uiz+0x16>

1001358c <__aeabi_d2uiz>:
1001358c:	b570      	push	{r4, r5, r6, lr}
1001358e:	2200      	movs	r2, #0
10013590:	4b0c      	ldr	r3, [pc, #48]	; (100135c4 <__aeabi_d2uiz+0x38>)
10013592:	0004      	movs	r4, r0
10013594:	000d      	movs	r5, r1
10013596:	f7ff ff71 	bl	1001347c <__aeabi_dcmpge>
1001359a:	2800      	cmp	r0, #0
1001359c:	d104      	bne.n	100135a8 <__aeabi_d2uiz+0x1c>
1001359e:	0020      	movs	r0, r4
100135a0:	0029      	movs	r1, r5
100135a2:	f001 fd6f 	bl	10015084 <__aeabi_d2iz>
100135a6:	bd70      	pop	{r4, r5, r6, pc}
100135a8:	4b06      	ldr	r3, [pc, #24]	; (100135c4 <__aeabi_d2uiz+0x38>)
100135aa:	2200      	movs	r2, #0
100135ac:	0020      	movs	r0, r4
100135ae:	0029      	movs	r1, r5
100135b0:	f001 fa14 	bl	100149dc <__aeabi_dsub>
100135b4:	f001 fd66 	bl	10015084 <__aeabi_d2iz>
100135b8:	2380      	movs	r3, #128	; 0x80
100135ba:	061b      	lsls	r3, r3, #24
100135bc:	469c      	mov	ip, r3
100135be:	4460      	add	r0, ip
100135c0:	e7f1      	b.n	100135a6 <__aeabi_d2uiz+0x1a>
100135c2:	46c0      	nop			; (mov r8, r8)
100135c4:	41e00000 	.word	0x41e00000

100135c8 <__aeabi_fadd>:
100135c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100135ca:	024a      	lsls	r2, r1, #9
100135cc:	0243      	lsls	r3, r0, #9
100135ce:	0044      	lsls	r4, r0, #1
100135d0:	004e      	lsls	r6, r1, #1
100135d2:	0fc5      	lsrs	r5, r0, #31
100135d4:	0e24      	lsrs	r4, r4, #24
100135d6:	0028      	movs	r0, r5
100135d8:	099b      	lsrs	r3, r3, #6
100135da:	0e36      	lsrs	r6, r6, #24
100135dc:	0fc9      	lsrs	r1, r1, #31
100135de:	0992      	lsrs	r2, r2, #6
100135e0:	428d      	cmp	r5, r1
100135e2:	d059      	beq.n	10013698 <__aeabi_fadd+0xd0>
100135e4:	1ba0      	subs	r0, r4, r6
100135e6:	2800      	cmp	r0, #0
100135e8:	dc00      	bgt.n	100135ec <__aeabi_fadd+0x24>
100135ea:	e08d      	b.n	10013708 <__aeabi_fadd+0x140>
100135ec:	2e00      	cmp	r6, #0
100135ee:	d11a      	bne.n	10013626 <__aeabi_fadd+0x5e>
100135f0:	2a00      	cmp	r2, #0
100135f2:	d000      	beq.n	100135f6 <__aeabi_fadd+0x2e>
100135f4:	e079      	b.n	100136ea <__aeabi_fadd+0x122>
100135f6:	075a      	lsls	r2, r3, #29
100135f8:	d004      	beq.n	10013604 <__aeabi_fadd+0x3c>
100135fa:	220f      	movs	r2, #15
100135fc:	401a      	ands	r2, r3
100135fe:	2a04      	cmp	r2, #4
10013600:	d000      	beq.n	10013604 <__aeabi_fadd+0x3c>
10013602:	3304      	adds	r3, #4
10013604:	015a      	lsls	r2, r3, #5
10013606:	d538      	bpl.n	1001367a <__aeabi_fadd+0xb2>
10013608:	3401      	adds	r4, #1
1001360a:	2cff      	cmp	r4, #255	; 0xff
1001360c:	d100      	bne.n	10013610 <__aeabi_fadd+0x48>
1001360e:	e089      	b.n	10013724 <__aeabi_fadd+0x15c>
10013610:	0028      	movs	r0, r5
10013612:	019b      	lsls	r3, r3, #6
10013614:	0a5b      	lsrs	r3, r3, #9
10013616:	b2e4      	uxtb	r4, r4
10013618:	025b      	lsls	r3, r3, #9
1001361a:	05e4      	lsls	r4, r4, #23
1001361c:	0a5b      	lsrs	r3, r3, #9
1001361e:	4323      	orrs	r3, r4
10013620:	07c0      	lsls	r0, r0, #31
10013622:	4318      	orrs	r0, r3
10013624:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10013626:	2cff      	cmp	r4, #255	; 0xff
10013628:	d0e5      	beq.n	100135f6 <__aeabi_fadd+0x2e>
1001362a:	2180      	movs	r1, #128	; 0x80
1001362c:	04c9      	lsls	r1, r1, #19
1001362e:	430a      	orrs	r2, r1
10013630:	281b      	cmp	r0, #27
10013632:	dd00      	ble.n	10013636 <__aeabi_fadd+0x6e>
10013634:	e089      	b.n	1001374a <__aeabi_fadd+0x182>
10013636:	0016      	movs	r6, r2
10013638:	2120      	movs	r1, #32
1001363a:	40c6      	lsrs	r6, r0
1001363c:	1a08      	subs	r0, r1, r0
1001363e:	4082      	lsls	r2, r0
10013640:	1e51      	subs	r1, r2, #1
10013642:	418a      	sbcs	r2, r1
10013644:	4332      	orrs	r2, r6
10013646:	1a9b      	subs	r3, r3, r2
10013648:	015a      	lsls	r2, r3, #5
1001364a:	d514      	bpl.n	10013676 <__aeabi_fadd+0xae>
1001364c:	019b      	lsls	r3, r3, #6
1001364e:	099e      	lsrs	r6, r3, #6
10013650:	0030      	movs	r0, r6
10013652:	f001 fd85 	bl	10015160 <__clzsi2>
10013656:	3805      	subs	r0, #5
10013658:	4086      	lsls	r6, r0
1001365a:	4284      	cmp	r4, r0
1001365c:	dc65      	bgt.n	1001372a <__aeabi_fadd+0x162>
1001365e:	1b04      	subs	r4, r0, r4
10013660:	0033      	movs	r3, r6
10013662:	2020      	movs	r0, #32
10013664:	3401      	adds	r4, #1
10013666:	40e3      	lsrs	r3, r4
10013668:	1b04      	subs	r4, r0, r4
1001366a:	40a6      	lsls	r6, r4
1001366c:	1e72      	subs	r2, r6, #1
1001366e:	4196      	sbcs	r6, r2
10013670:	2400      	movs	r4, #0
10013672:	4333      	orrs	r3, r6
10013674:	e7bf      	b.n	100135f6 <__aeabi_fadd+0x2e>
10013676:	075a      	lsls	r2, r3, #29
10013678:	d1bf      	bne.n	100135fa <__aeabi_fadd+0x32>
1001367a:	08df      	lsrs	r7, r3, #3
1001367c:	0028      	movs	r0, r5
1001367e:	2cff      	cmp	r4, #255	; 0xff
10013680:	d12f      	bne.n	100136e2 <__aeabi_fadd+0x11a>
10013682:	2f00      	cmp	r7, #0
10013684:	d100      	bne.n	10013688 <__aeabi_fadd+0xc0>
10013686:	e087      	b.n	10013798 <__aeabi_fadd+0x1d0>
10013688:	2280      	movs	r2, #128	; 0x80
1001368a:	03d2      	lsls	r2, r2, #15
1001368c:	0013      	movs	r3, r2
1001368e:	433b      	orrs	r3, r7
10013690:	025b      	lsls	r3, r3, #9
10013692:	0a5b      	lsrs	r3, r3, #9
10013694:	24ff      	movs	r4, #255	; 0xff
10013696:	e7bf      	b.n	10013618 <__aeabi_fadd+0x50>
10013698:	1ba1      	subs	r1, r4, r6
1001369a:	2900      	cmp	r1, #0
1001369c:	dd49      	ble.n	10013732 <__aeabi_fadd+0x16a>
1001369e:	2e00      	cmp	r6, #0
100136a0:	d029      	beq.n	100136f6 <__aeabi_fadd+0x12e>
100136a2:	2cff      	cmp	r4, #255	; 0xff
100136a4:	d0a7      	beq.n	100135f6 <__aeabi_fadd+0x2e>
100136a6:	2680      	movs	r6, #128	; 0x80
100136a8:	04f6      	lsls	r6, r6, #19
100136aa:	4332      	orrs	r2, r6
100136ac:	291b      	cmp	r1, #27
100136ae:	dd00      	ble.n	100136b2 <__aeabi_fadd+0xea>
100136b0:	e08d      	b.n	100137ce <__aeabi_fadd+0x206>
100136b2:	0017      	movs	r7, r2
100136b4:	2620      	movs	r6, #32
100136b6:	40cf      	lsrs	r7, r1
100136b8:	1a71      	subs	r1, r6, r1
100136ba:	408a      	lsls	r2, r1
100136bc:	1e51      	subs	r1, r2, #1
100136be:	418a      	sbcs	r2, r1
100136c0:	433a      	orrs	r2, r7
100136c2:	189b      	adds	r3, r3, r2
100136c4:	015a      	lsls	r2, r3, #5
100136c6:	d5d6      	bpl.n	10013676 <__aeabi_fadd+0xae>
100136c8:	3401      	adds	r4, #1
100136ca:	2cff      	cmp	r4, #255	; 0xff
100136cc:	d064      	beq.n	10013798 <__aeabi_fadd+0x1d0>
100136ce:	2201      	movs	r2, #1
100136d0:	4976      	ldr	r1, [pc, #472]	; (100138ac <__aeabi_fadd+0x2e4>)
100136d2:	401a      	ands	r2, r3
100136d4:	085b      	lsrs	r3, r3, #1
100136d6:	400b      	ands	r3, r1
100136d8:	4313      	orrs	r3, r2
100136da:	e78c      	b.n	100135f6 <__aeabi_fadd+0x2e>
100136dc:	1e03      	subs	r3, r0, #0
100136de:	d1ca      	bne.n	10013676 <__aeabi_fadd+0xae>
100136e0:	2000      	movs	r0, #0
100136e2:	027b      	lsls	r3, r7, #9
100136e4:	0a5b      	lsrs	r3, r3, #9
100136e6:	b2e4      	uxtb	r4, r4
100136e8:	e796      	b.n	10013618 <__aeabi_fadd+0x50>
100136ea:	3801      	subs	r0, #1
100136ec:	2800      	cmp	r0, #0
100136ee:	d0aa      	beq.n	10013646 <__aeabi_fadd+0x7e>
100136f0:	2cff      	cmp	r4, #255	; 0xff
100136f2:	d19d      	bne.n	10013630 <__aeabi_fadd+0x68>
100136f4:	e77f      	b.n	100135f6 <__aeabi_fadd+0x2e>
100136f6:	2a00      	cmp	r2, #0
100136f8:	d100      	bne.n	100136fc <__aeabi_fadd+0x134>
100136fa:	e77c      	b.n	100135f6 <__aeabi_fadd+0x2e>
100136fc:	3901      	subs	r1, #1
100136fe:	2900      	cmp	r1, #0
10013700:	d0df      	beq.n	100136c2 <__aeabi_fadd+0xfa>
10013702:	2cff      	cmp	r4, #255	; 0xff
10013704:	d1d2      	bne.n	100136ac <__aeabi_fadd+0xe4>
10013706:	e776      	b.n	100135f6 <__aeabi_fadd+0x2e>
10013708:	2800      	cmp	r0, #0
1001370a:	d120      	bne.n	1001374e <__aeabi_fadd+0x186>
1001370c:	1c60      	adds	r0, r4, #1
1001370e:	b2c0      	uxtb	r0, r0
10013710:	2801      	cmp	r0, #1
10013712:	dd53      	ble.n	100137bc <__aeabi_fadd+0x1f4>
10013714:	2780      	movs	r7, #128	; 0x80
10013716:	1a9e      	subs	r6, r3, r2
10013718:	04ff      	lsls	r7, r7, #19
1001371a:	4037      	ands	r7, r6
1001371c:	d02f      	beq.n	1001377e <__aeabi_fadd+0x1b6>
1001371e:	1ad6      	subs	r6, r2, r3
10013720:	000d      	movs	r5, r1
10013722:	e795      	b.n	10013650 <__aeabi_fadd+0x88>
10013724:	0028      	movs	r0, r5
10013726:	2300      	movs	r3, #0
10013728:	e776      	b.n	10013618 <__aeabi_fadd+0x50>
1001372a:	4b61      	ldr	r3, [pc, #388]	; (100138b0 <__aeabi_fadd+0x2e8>)
1001372c:	1a24      	subs	r4, r4, r0
1001372e:	4033      	ands	r3, r6
10013730:	e761      	b.n	100135f6 <__aeabi_fadd+0x2e>
10013732:	2900      	cmp	r1, #0
10013734:	d14d      	bne.n	100137d2 <__aeabi_fadd+0x20a>
10013736:	1c61      	adds	r1, r4, #1
10013738:	b2ce      	uxtb	r6, r1
1001373a:	2e01      	cmp	r6, #1
1001373c:	dd2f      	ble.n	1001379e <__aeabi_fadd+0x1d6>
1001373e:	29ff      	cmp	r1, #255	; 0xff
10013740:	d02a      	beq.n	10013798 <__aeabi_fadd+0x1d0>
10013742:	189b      	adds	r3, r3, r2
10013744:	085b      	lsrs	r3, r3, #1
10013746:	000c      	movs	r4, r1
10013748:	e755      	b.n	100135f6 <__aeabi_fadd+0x2e>
1001374a:	2201      	movs	r2, #1
1001374c:	e77b      	b.n	10013646 <__aeabi_fadd+0x7e>
1001374e:	2c00      	cmp	r4, #0
10013750:	d11b      	bne.n	1001378a <__aeabi_fadd+0x1c2>
10013752:	2b00      	cmp	r3, #0
10013754:	d05b      	beq.n	1001380e <__aeabi_fadd+0x246>
10013756:	43c0      	mvns	r0, r0
10013758:	2800      	cmp	r0, #0
1001375a:	d00c      	beq.n	10013776 <__aeabi_fadd+0x1ae>
1001375c:	2eff      	cmp	r6, #255	; 0xff
1001375e:	d07e      	beq.n	1001385e <__aeabi_fadd+0x296>
10013760:	281b      	cmp	r0, #27
10013762:	dd00      	ble.n	10013766 <__aeabi_fadd+0x19e>
10013764:	e092      	b.n	1001388c <__aeabi_fadd+0x2c4>
10013766:	001d      	movs	r5, r3
10013768:	2420      	movs	r4, #32
1001376a:	40c5      	lsrs	r5, r0
1001376c:	1a20      	subs	r0, r4, r0
1001376e:	4083      	lsls	r3, r0
10013770:	1e58      	subs	r0, r3, #1
10013772:	4183      	sbcs	r3, r0
10013774:	432b      	orrs	r3, r5
10013776:	1ad3      	subs	r3, r2, r3
10013778:	0034      	movs	r4, r6
1001377a:	000d      	movs	r5, r1
1001377c:	e764      	b.n	10013648 <__aeabi_fadd+0x80>
1001377e:	2e00      	cmp	r6, #0
10013780:	d000      	beq.n	10013784 <__aeabi_fadd+0x1bc>
10013782:	e765      	b.n	10013650 <__aeabi_fadd+0x88>
10013784:	2000      	movs	r0, #0
10013786:	2400      	movs	r4, #0
10013788:	e7ab      	b.n	100136e2 <__aeabi_fadd+0x11a>
1001378a:	2eff      	cmp	r6, #255	; 0xff
1001378c:	d067      	beq.n	1001385e <__aeabi_fadd+0x296>
1001378e:	2480      	movs	r4, #128	; 0x80
10013790:	04e4      	lsls	r4, r4, #19
10013792:	4240      	negs	r0, r0
10013794:	4323      	orrs	r3, r4
10013796:	e7e3      	b.n	10013760 <__aeabi_fadd+0x198>
10013798:	24ff      	movs	r4, #255	; 0xff
1001379a:	2300      	movs	r3, #0
1001379c:	e73c      	b.n	10013618 <__aeabi_fadd+0x50>
1001379e:	2c00      	cmp	r4, #0
100137a0:	d161      	bne.n	10013866 <__aeabi_fadd+0x29e>
100137a2:	2b00      	cmp	r3, #0
100137a4:	d07e      	beq.n	100138a4 <__aeabi_fadd+0x2dc>
100137a6:	2a00      	cmp	r2, #0
100137a8:	d100      	bne.n	100137ac <__aeabi_fadd+0x1e4>
100137aa:	e724      	b.n	100135f6 <__aeabi_fadd+0x2e>
100137ac:	189b      	adds	r3, r3, r2
100137ae:	015a      	lsls	r2, r3, #5
100137b0:	d400      	bmi.n	100137b4 <__aeabi_fadd+0x1ec>
100137b2:	e760      	b.n	10013676 <__aeabi_fadd+0xae>
100137b4:	4a3e      	ldr	r2, [pc, #248]	; (100138b0 <__aeabi_fadd+0x2e8>)
100137b6:	000c      	movs	r4, r1
100137b8:	4013      	ands	r3, r2
100137ba:	e71c      	b.n	100135f6 <__aeabi_fadd+0x2e>
100137bc:	2c00      	cmp	r4, #0
100137be:	d11e      	bne.n	100137fe <__aeabi_fadd+0x236>
100137c0:	2b00      	cmp	r3, #0
100137c2:	d12f      	bne.n	10013824 <__aeabi_fadd+0x25c>
100137c4:	2a00      	cmp	r2, #0
100137c6:	d066      	beq.n	10013896 <__aeabi_fadd+0x2ce>
100137c8:	0013      	movs	r3, r2
100137ca:	000d      	movs	r5, r1
100137cc:	e713      	b.n	100135f6 <__aeabi_fadd+0x2e>
100137ce:	2201      	movs	r2, #1
100137d0:	e777      	b.n	100136c2 <__aeabi_fadd+0xfa>
100137d2:	2c00      	cmp	r4, #0
100137d4:	d11f      	bne.n	10013816 <__aeabi_fadd+0x24e>
100137d6:	2b00      	cmp	r3, #0
100137d8:	d05a      	beq.n	10013890 <__aeabi_fadd+0x2c8>
100137da:	43c9      	mvns	r1, r1
100137dc:	2900      	cmp	r1, #0
100137de:	d00b      	beq.n	100137f8 <__aeabi_fadd+0x230>
100137e0:	2eff      	cmp	r6, #255	; 0xff
100137e2:	d050      	beq.n	10013886 <__aeabi_fadd+0x2be>
100137e4:	291b      	cmp	r1, #27
100137e6:	dc5f      	bgt.n	100138a8 <__aeabi_fadd+0x2e0>
100137e8:	001f      	movs	r7, r3
100137ea:	2420      	movs	r4, #32
100137ec:	40cf      	lsrs	r7, r1
100137ee:	1a61      	subs	r1, r4, r1
100137f0:	408b      	lsls	r3, r1
100137f2:	1e59      	subs	r1, r3, #1
100137f4:	418b      	sbcs	r3, r1
100137f6:	433b      	orrs	r3, r7
100137f8:	189b      	adds	r3, r3, r2
100137fa:	0034      	movs	r4, r6
100137fc:	e762      	b.n	100136c4 <__aeabi_fadd+0xfc>
100137fe:	2b00      	cmp	r3, #0
10013800:	d11c      	bne.n	1001383c <__aeabi_fadd+0x274>
10013802:	2a00      	cmp	r2, #0
10013804:	d04a      	beq.n	1001389c <__aeabi_fadd+0x2d4>
10013806:	0013      	movs	r3, r2
10013808:	000d      	movs	r5, r1
1001380a:	24ff      	movs	r4, #255	; 0xff
1001380c:	e6f3      	b.n	100135f6 <__aeabi_fadd+0x2e>
1001380e:	0013      	movs	r3, r2
10013810:	0034      	movs	r4, r6
10013812:	000d      	movs	r5, r1
10013814:	e6ef      	b.n	100135f6 <__aeabi_fadd+0x2e>
10013816:	2eff      	cmp	r6, #255	; 0xff
10013818:	d035      	beq.n	10013886 <__aeabi_fadd+0x2be>
1001381a:	2480      	movs	r4, #128	; 0x80
1001381c:	04e4      	lsls	r4, r4, #19
1001381e:	4249      	negs	r1, r1
10013820:	4323      	orrs	r3, r4
10013822:	e7df      	b.n	100137e4 <__aeabi_fadd+0x21c>
10013824:	2a00      	cmp	r2, #0
10013826:	d100      	bne.n	1001382a <__aeabi_fadd+0x262>
10013828:	e6e5      	b.n	100135f6 <__aeabi_fadd+0x2e>
1001382a:	2780      	movs	r7, #128	; 0x80
1001382c:	1a98      	subs	r0, r3, r2
1001382e:	04ff      	lsls	r7, r7, #19
10013830:	4007      	ands	r7, r0
10013832:	d100      	bne.n	10013836 <__aeabi_fadd+0x26e>
10013834:	e752      	b.n	100136dc <__aeabi_fadd+0x114>
10013836:	1ad3      	subs	r3, r2, r3
10013838:	000d      	movs	r5, r1
1001383a:	e6dc      	b.n	100135f6 <__aeabi_fadd+0x2e>
1001383c:	24ff      	movs	r4, #255	; 0xff
1001383e:	2a00      	cmp	r2, #0
10013840:	d100      	bne.n	10013844 <__aeabi_fadd+0x27c>
10013842:	e6d8      	b.n	100135f6 <__aeabi_fadd+0x2e>
10013844:	2080      	movs	r0, #128	; 0x80
10013846:	08db      	lsrs	r3, r3, #3
10013848:	03c0      	lsls	r0, r0, #15
1001384a:	4203      	tst	r3, r0
1001384c:	d004      	beq.n	10013858 <__aeabi_fadd+0x290>
1001384e:	08d2      	lsrs	r2, r2, #3
10013850:	4202      	tst	r2, r0
10013852:	d101      	bne.n	10013858 <__aeabi_fadd+0x290>
10013854:	0013      	movs	r3, r2
10013856:	000d      	movs	r5, r1
10013858:	00db      	lsls	r3, r3, #3
1001385a:	24ff      	movs	r4, #255	; 0xff
1001385c:	e6cb      	b.n	100135f6 <__aeabi_fadd+0x2e>
1001385e:	0013      	movs	r3, r2
10013860:	24ff      	movs	r4, #255	; 0xff
10013862:	000d      	movs	r5, r1
10013864:	e6c7      	b.n	100135f6 <__aeabi_fadd+0x2e>
10013866:	2b00      	cmp	r3, #0
10013868:	d00d      	beq.n	10013886 <__aeabi_fadd+0x2be>
1001386a:	24ff      	movs	r4, #255	; 0xff
1001386c:	2a00      	cmp	r2, #0
1001386e:	d100      	bne.n	10013872 <__aeabi_fadd+0x2aa>
10013870:	e6c1      	b.n	100135f6 <__aeabi_fadd+0x2e>
10013872:	2180      	movs	r1, #128	; 0x80
10013874:	08db      	lsrs	r3, r3, #3
10013876:	03c9      	lsls	r1, r1, #15
10013878:	420b      	tst	r3, r1
1001387a:	d0ed      	beq.n	10013858 <__aeabi_fadd+0x290>
1001387c:	08d2      	lsrs	r2, r2, #3
1001387e:	420a      	tst	r2, r1
10013880:	d1ea      	bne.n	10013858 <__aeabi_fadd+0x290>
10013882:	0013      	movs	r3, r2
10013884:	e7e8      	b.n	10013858 <__aeabi_fadd+0x290>
10013886:	0013      	movs	r3, r2
10013888:	24ff      	movs	r4, #255	; 0xff
1001388a:	e6b4      	b.n	100135f6 <__aeabi_fadd+0x2e>
1001388c:	2301      	movs	r3, #1
1001388e:	e772      	b.n	10013776 <__aeabi_fadd+0x1ae>
10013890:	0013      	movs	r3, r2
10013892:	0034      	movs	r4, r6
10013894:	e6af      	b.n	100135f6 <__aeabi_fadd+0x2e>
10013896:	2700      	movs	r7, #0
10013898:	2000      	movs	r0, #0
1001389a:	e722      	b.n	100136e2 <__aeabi_fadd+0x11a>
1001389c:	2780      	movs	r7, #128	; 0x80
1001389e:	2000      	movs	r0, #0
100138a0:	03ff      	lsls	r7, r7, #15
100138a2:	e6f1      	b.n	10013688 <__aeabi_fadd+0xc0>
100138a4:	0013      	movs	r3, r2
100138a6:	e6a6      	b.n	100135f6 <__aeabi_fadd+0x2e>
100138a8:	2301      	movs	r3, #1
100138aa:	e7a5      	b.n	100137f8 <__aeabi_fadd+0x230>
100138ac:	7dffffff 	.word	0x7dffffff
100138b0:	fbffffff 	.word	0xfbffffff

100138b4 <__aeabi_fdiv>:
100138b4:	b5f0      	push	{r4, r5, r6, r7, lr}
100138b6:	4656      	mov	r6, sl
100138b8:	4644      	mov	r4, r8
100138ba:	465f      	mov	r7, fp
100138bc:	464d      	mov	r5, r9
100138be:	b4f0      	push	{r4, r5, r6, r7}
100138c0:	0244      	lsls	r4, r0, #9
100138c2:	0046      	lsls	r6, r0, #1
100138c4:	0fc7      	lsrs	r7, r0, #31
100138c6:	b083      	sub	sp, #12
100138c8:	4688      	mov	r8, r1
100138ca:	0a65      	lsrs	r5, r4, #9
100138cc:	0e36      	lsrs	r6, r6, #24
100138ce:	46ba      	mov	sl, r7
100138d0:	d03d      	beq.n	1001394e <__aeabi_fdiv+0x9a>
100138d2:	2eff      	cmp	r6, #255	; 0xff
100138d4:	d022      	beq.n	1001391c <__aeabi_fdiv+0x68>
100138d6:	2300      	movs	r3, #0
100138d8:	00ec      	lsls	r4, r5, #3
100138da:	2580      	movs	r5, #128	; 0x80
100138dc:	4699      	mov	r9, r3
100138de:	469b      	mov	fp, r3
100138e0:	04ed      	lsls	r5, r5, #19
100138e2:	4325      	orrs	r5, r4
100138e4:	3e7f      	subs	r6, #127	; 0x7f
100138e6:	4643      	mov	r3, r8
100138e8:	025c      	lsls	r4, r3, #9
100138ea:	0058      	lsls	r0, r3, #1
100138ec:	0fdb      	lsrs	r3, r3, #31
100138ee:	0a64      	lsrs	r4, r4, #9
100138f0:	0e00      	lsrs	r0, r0, #24
100138f2:	4698      	mov	r8, r3
100138f4:	d036      	beq.n	10013964 <__aeabi_fdiv+0xb0>
100138f6:	28ff      	cmp	r0, #255	; 0xff
100138f8:	d030      	beq.n	1001395c <__aeabi_fdiv+0xa8>
100138fa:	2380      	movs	r3, #128	; 0x80
100138fc:	2100      	movs	r1, #0
100138fe:	00e4      	lsls	r4, r4, #3
10013900:	04db      	lsls	r3, r3, #19
10013902:	431c      	orrs	r4, r3
10013904:	387f      	subs	r0, #127	; 0x7f
10013906:	1a30      	subs	r0, r6, r0
10013908:	9001      	str	r0, [sp, #4]
1001390a:	4648      	mov	r0, r9
1001390c:	4642      	mov	r2, r8
1001390e:	4308      	orrs	r0, r1
10013910:	4e72      	ldr	r6, [pc, #456]	; (10013adc <__aeabi_fdiv+0x228>)
10013912:	0080      	lsls	r0, r0, #2
10013914:	5830      	ldr	r0, [r6, r0]
10013916:	407a      	eors	r2, r7
10013918:	0013      	movs	r3, r2
1001391a:	4687      	mov	pc, r0
1001391c:	2d00      	cmp	r5, #0
1001391e:	d144      	bne.n	100139aa <__aeabi_fdiv+0xf6>
10013920:	2308      	movs	r3, #8
10013922:	4699      	mov	r9, r3
10013924:	3b06      	subs	r3, #6
10013926:	469b      	mov	fp, r3
10013928:	e7dd      	b.n	100138e6 <__aeabi_fdiv+0x32>
1001392a:	2201      	movs	r2, #1
1001392c:	20ff      	movs	r0, #255	; 0xff
1001392e:	2400      	movs	r4, #0
10013930:	401a      	ands	r2, r3
10013932:	0264      	lsls	r4, r4, #9
10013934:	05c3      	lsls	r3, r0, #23
10013936:	0a64      	lsrs	r4, r4, #9
10013938:	07d2      	lsls	r2, r2, #31
1001393a:	431c      	orrs	r4, r3
1001393c:	4314      	orrs	r4, r2
1001393e:	0020      	movs	r0, r4
10013940:	b003      	add	sp, #12
10013942:	bc3c      	pop	{r2, r3, r4, r5}
10013944:	4690      	mov	r8, r2
10013946:	4699      	mov	r9, r3
10013948:	46a2      	mov	sl, r4
1001394a:	46ab      	mov	fp, r5
1001394c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001394e:	2d00      	cmp	r5, #0
10013950:	d120      	bne.n	10013994 <__aeabi_fdiv+0xe0>
10013952:	2304      	movs	r3, #4
10013954:	4699      	mov	r9, r3
10013956:	3b03      	subs	r3, #3
10013958:	469b      	mov	fp, r3
1001395a:	e7c4      	b.n	100138e6 <__aeabi_fdiv+0x32>
1001395c:	2c00      	cmp	r4, #0
1001395e:	d117      	bne.n	10013990 <__aeabi_fdiv+0xdc>
10013960:	2102      	movs	r1, #2
10013962:	e002      	b.n	1001396a <__aeabi_fdiv+0xb6>
10013964:	2c00      	cmp	r4, #0
10013966:	d10a      	bne.n	1001397e <__aeabi_fdiv+0xca>
10013968:	2101      	movs	r1, #1
1001396a:	1a32      	subs	r2, r6, r0
1001396c:	9201      	str	r2, [sp, #4]
1001396e:	464a      	mov	r2, r9
10013970:	4643      	mov	r3, r8
10013972:	430a      	orrs	r2, r1
10013974:	485a      	ldr	r0, [pc, #360]	; (10013ae0 <__aeabi_fdiv+0x22c>)
10013976:	0092      	lsls	r2, r2, #2
10013978:	5882      	ldr	r2, [r0, r2]
1001397a:	407b      	eors	r3, r7
1001397c:	4697      	mov	pc, r2
1001397e:	0020      	movs	r0, r4
10013980:	f001 fbee 	bl	10015160 <__clzsi2>
10013984:	1f43      	subs	r3, r0, #5
10013986:	3076      	adds	r0, #118	; 0x76
10013988:	409c      	lsls	r4, r3
1001398a:	4240      	negs	r0, r0
1001398c:	2100      	movs	r1, #0
1001398e:	e7ba      	b.n	10013906 <__aeabi_fdiv+0x52>
10013990:	2103      	movs	r1, #3
10013992:	e7b8      	b.n	10013906 <__aeabi_fdiv+0x52>
10013994:	0028      	movs	r0, r5
10013996:	f001 fbe3 	bl	10015160 <__clzsi2>
1001399a:	1f43      	subs	r3, r0, #5
1001399c:	409d      	lsls	r5, r3
1001399e:	2300      	movs	r3, #0
100139a0:	3076      	adds	r0, #118	; 0x76
100139a2:	4246      	negs	r6, r0
100139a4:	4699      	mov	r9, r3
100139a6:	469b      	mov	fp, r3
100139a8:	e79d      	b.n	100138e6 <__aeabi_fdiv+0x32>
100139aa:	230c      	movs	r3, #12
100139ac:	4699      	mov	r9, r3
100139ae:	3b09      	subs	r3, #9
100139b0:	469b      	mov	fp, r3
100139b2:	e798      	b.n	100138e6 <__aeabi_fdiv+0x32>
100139b4:	2480      	movs	r4, #128	; 0x80
100139b6:	2200      	movs	r2, #0
100139b8:	03e4      	lsls	r4, r4, #15
100139ba:	20ff      	movs	r0, #255	; 0xff
100139bc:	e7b9      	b.n	10013932 <__aeabi_fdiv+0x7e>
100139be:	2400      	movs	r4, #0
100139c0:	46c2      	mov	sl, r8
100139c2:	468b      	mov	fp, r1
100139c4:	465a      	mov	r2, fp
100139c6:	4653      	mov	r3, sl
100139c8:	2a02      	cmp	r2, #2
100139ca:	d0ae      	beq.n	1001392a <__aeabi_fdiv+0x76>
100139cc:	2a03      	cmp	r2, #3
100139ce:	d07d      	beq.n	10013acc <__aeabi_fdiv+0x218>
100139d0:	2a01      	cmp	r2, #1
100139d2:	d131      	bne.n	10013a38 <__aeabi_fdiv+0x184>
100139d4:	2201      	movs	r2, #1
100139d6:	2000      	movs	r0, #0
100139d8:	401a      	ands	r2, r3
100139da:	2400      	movs	r4, #0
100139dc:	e7a9      	b.n	10013932 <__aeabi_fdiv+0x7e>
100139de:	2201      	movs	r2, #1
100139e0:	1a10      	subs	r0, r2, r0
100139e2:	281b      	cmp	r0, #27
100139e4:	dd56      	ble.n	10013a94 <__aeabi_fdiv+0x1e0>
100139e6:	401a      	ands	r2, r3
100139e8:	2000      	movs	r0, #0
100139ea:	2400      	movs	r4, #0
100139ec:	e7a1      	b.n	10013932 <__aeabi_fdiv+0x7e>
100139ee:	2380      	movs	r3, #128	; 0x80
100139f0:	03db      	lsls	r3, r3, #15
100139f2:	421d      	tst	r5, r3
100139f4:	d14b      	bne.n	10013a8e <__aeabi_fdiv+0x1da>
100139f6:	2380      	movs	r3, #128	; 0x80
100139f8:	03db      	lsls	r3, r3, #15
100139fa:	432b      	orrs	r3, r5
100139fc:	025c      	lsls	r4, r3, #9
100139fe:	0a64      	lsrs	r4, r4, #9
10013a00:	003a      	movs	r2, r7
10013a02:	20ff      	movs	r0, #255	; 0xff
10013a04:	e795      	b.n	10013932 <__aeabi_fdiv+0x7e>
10013a06:	016d      	lsls	r5, r5, #5
10013a08:	0160      	lsls	r0, r4, #5
10013a0a:	4285      	cmp	r5, r0
10013a0c:	d230      	bcs.n	10013a70 <__aeabi_fdiv+0x1bc>
10013a0e:	9a01      	ldr	r2, [sp, #4]
10013a10:	2400      	movs	r4, #0
10013a12:	3a01      	subs	r2, #1
10013a14:	9201      	str	r2, [sp, #4]
10013a16:	221b      	movs	r2, #27
10013a18:	2701      	movs	r7, #1
10013a1a:	0029      	movs	r1, r5
10013a1c:	0064      	lsls	r4, r4, #1
10013a1e:	006d      	lsls	r5, r5, #1
10013a20:	2900      	cmp	r1, #0
10013a22:	db01      	blt.n	10013a28 <__aeabi_fdiv+0x174>
10013a24:	42a8      	cmp	r0, r5
10013a26:	d801      	bhi.n	10013a2c <__aeabi_fdiv+0x178>
10013a28:	1a2d      	subs	r5, r5, r0
10013a2a:	433c      	orrs	r4, r7
10013a2c:	3a01      	subs	r2, #1
10013a2e:	2a00      	cmp	r2, #0
10013a30:	d1f3      	bne.n	10013a1a <__aeabi_fdiv+0x166>
10013a32:	1e6a      	subs	r2, r5, #1
10013a34:	4195      	sbcs	r5, r2
10013a36:	432c      	orrs	r4, r5
10013a38:	9801      	ldr	r0, [sp, #4]
10013a3a:	307f      	adds	r0, #127	; 0x7f
10013a3c:	2800      	cmp	r0, #0
10013a3e:	ddce      	ble.n	100139de <__aeabi_fdiv+0x12a>
10013a40:	0762      	lsls	r2, r4, #29
10013a42:	d004      	beq.n	10013a4e <__aeabi_fdiv+0x19a>
10013a44:	220f      	movs	r2, #15
10013a46:	4022      	ands	r2, r4
10013a48:	2a04      	cmp	r2, #4
10013a4a:	d000      	beq.n	10013a4e <__aeabi_fdiv+0x19a>
10013a4c:	3404      	adds	r4, #4
10013a4e:	0122      	lsls	r2, r4, #4
10013a50:	d503      	bpl.n	10013a5a <__aeabi_fdiv+0x1a6>
10013a52:	4a24      	ldr	r2, [pc, #144]	; (10013ae4 <__aeabi_fdiv+0x230>)
10013a54:	9801      	ldr	r0, [sp, #4]
10013a56:	4014      	ands	r4, r2
10013a58:	3080      	adds	r0, #128	; 0x80
10013a5a:	28fe      	cmp	r0, #254	; 0xfe
10013a5c:	dd00      	ble.n	10013a60 <__aeabi_fdiv+0x1ac>
10013a5e:	e764      	b.n	1001392a <__aeabi_fdiv+0x76>
10013a60:	2201      	movs	r2, #1
10013a62:	01a4      	lsls	r4, r4, #6
10013a64:	0a64      	lsrs	r4, r4, #9
10013a66:	b2c0      	uxtb	r0, r0
10013a68:	401a      	ands	r2, r3
10013a6a:	e762      	b.n	10013932 <__aeabi_fdiv+0x7e>
10013a6c:	002c      	movs	r4, r5
10013a6e:	e7a9      	b.n	100139c4 <__aeabi_fdiv+0x110>
10013a70:	1a2d      	subs	r5, r5, r0
10013a72:	221a      	movs	r2, #26
10013a74:	2401      	movs	r4, #1
10013a76:	e7cf      	b.n	10013a18 <__aeabi_fdiv+0x164>
10013a78:	026b      	lsls	r3, r5, #9
10013a7a:	d5bc      	bpl.n	100139f6 <__aeabi_fdiv+0x142>
10013a7c:	2400      	movs	r4, #0
10013a7e:	2380      	movs	r3, #128	; 0x80
10013a80:	03db      	lsls	r3, r3, #15
10013a82:	431c      	orrs	r4, r3
10013a84:	0264      	lsls	r4, r4, #9
10013a86:	0a64      	lsrs	r4, r4, #9
10013a88:	4642      	mov	r2, r8
10013a8a:	20ff      	movs	r0, #255	; 0xff
10013a8c:	e751      	b.n	10013932 <__aeabi_fdiv+0x7e>
10013a8e:	421c      	tst	r4, r3
10013a90:	d1b3      	bne.n	100139fa <__aeabi_fdiv+0x146>
10013a92:	e7f4      	b.n	10013a7e <__aeabi_fdiv+0x1ca>
10013a94:	0021      	movs	r1, r4
10013a96:	2220      	movs	r2, #32
10013a98:	40c1      	lsrs	r1, r0
10013a9a:	1a10      	subs	r0, r2, r0
10013a9c:	4084      	lsls	r4, r0
10013a9e:	1e62      	subs	r2, r4, #1
10013aa0:	4194      	sbcs	r4, r2
10013aa2:	430c      	orrs	r4, r1
10013aa4:	0762      	lsls	r2, r4, #29
10013aa6:	d004      	beq.n	10013ab2 <__aeabi_fdiv+0x1fe>
10013aa8:	220f      	movs	r2, #15
10013aaa:	4022      	ands	r2, r4
10013aac:	2a04      	cmp	r2, #4
10013aae:	d000      	beq.n	10013ab2 <__aeabi_fdiv+0x1fe>
10013ab0:	3404      	adds	r4, #4
10013ab2:	0162      	lsls	r2, r4, #5
10013ab4:	d504      	bpl.n	10013ac0 <__aeabi_fdiv+0x20c>
10013ab6:	2201      	movs	r2, #1
10013ab8:	2001      	movs	r0, #1
10013aba:	401a      	ands	r2, r3
10013abc:	2400      	movs	r4, #0
10013abe:	e738      	b.n	10013932 <__aeabi_fdiv+0x7e>
10013ac0:	2201      	movs	r2, #1
10013ac2:	01a4      	lsls	r4, r4, #6
10013ac4:	0a64      	lsrs	r4, r4, #9
10013ac6:	401a      	ands	r2, r3
10013ac8:	2000      	movs	r0, #0
10013aca:	e732      	b.n	10013932 <__aeabi_fdiv+0x7e>
10013acc:	2380      	movs	r3, #128	; 0x80
10013ace:	03db      	lsls	r3, r3, #15
10013ad0:	431c      	orrs	r4, r3
10013ad2:	0264      	lsls	r4, r4, #9
10013ad4:	0a64      	lsrs	r4, r4, #9
10013ad6:	4652      	mov	r2, sl
10013ad8:	20ff      	movs	r0, #255	; 0xff
10013ada:	e72a      	b.n	10013932 <__aeabi_fdiv+0x7e>
10013adc:	10018444 	.word	0x10018444
10013ae0:	10018484 	.word	0x10018484
10013ae4:	f7ffffff 	.word	0xf7ffffff

10013ae8 <__eqsf2>:
10013ae8:	0243      	lsls	r3, r0, #9
10013aea:	b570      	push	{r4, r5, r6, lr}
10013aec:	0042      	lsls	r2, r0, #1
10013aee:	004c      	lsls	r4, r1, #1
10013af0:	0a5d      	lsrs	r5, r3, #9
10013af2:	0fc3      	lsrs	r3, r0, #31
10013af4:	0248      	lsls	r0, r1, #9
10013af6:	0e12      	lsrs	r2, r2, #24
10013af8:	0a46      	lsrs	r6, r0, #9
10013afa:	0e24      	lsrs	r4, r4, #24
10013afc:	0fc9      	lsrs	r1, r1, #31
10013afe:	2aff      	cmp	r2, #255	; 0xff
10013b00:	d00f      	beq.n	10013b22 <__eqsf2+0x3a>
10013b02:	2cff      	cmp	r4, #255	; 0xff
10013b04:	d011      	beq.n	10013b2a <__eqsf2+0x42>
10013b06:	2001      	movs	r0, #1
10013b08:	42a2      	cmp	r2, r4
10013b0a:	d000      	beq.n	10013b0e <__eqsf2+0x26>
10013b0c:	bd70      	pop	{r4, r5, r6, pc}
10013b0e:	42b5      	cmp	r5, r6
10013b10:	d1fc      	bne.n	10013b0c <__eqsf2+0x24>
10013b12:	428b      	cmp	r3, r1
10013b14:	d00d      	beq.n	10013b32 <__eqsf2+0x4a>
10013b16:	2a00      	cmp	r2, #0
10013b18:	d1f8      	bne.n	10013b0c <__eqsf2+0x24>
10013b1a:	0028      	movs	r0, r5
10013b1c:	1e43      	subs	r3, r0, #1
10013b1e:	4198      	sbcs	r0, r3
10013b20:	e7f4      	b.n	10013b0c <__eqsf2+0x24>
10013b22:	2001      	movs	r0, #1
10013b24:	2d00      	cmp	r5, #0
10013b26:	d1f1      	bne.n	10013b0c <__eqsf2+0x24>
10013b28:	e7eb      	b.n	10013b02 <__eqsf2+0x1a>
10013b2a:	2001      	movs	r0, #1
10013b2c:	2e00      	cmp	r6, #0
10013b2e:	d1ed      	bne.n	10013b0c <__eqsf2+0x24>
10013b30:	e7e9      	b.n	10013b06 <__eqsf2+0x1e>
10013b32:	2000      	movs	r0, #0
10013b34:	e7ea      	b.n	10013b0c <__eqsf2+0x24>
10013b36:	46c0      	nop			; (mov r8, r8)

10013b38 <__gesf2>:
10013b38:	0243      	lsls	r3, r0, #9
10013b3a:	b5f0      	push	{r4, r5, r6, r7, lr}
10013b3c:	0042      	lsls	r2, r0, #1
10013b3e:	0a5d      	lsrs	r5, r3, #9
10013b40:	0fc3      	lsrs	r3, r0, #31
10013b42:	0248      	lsls	r0, r1, #9
10013b44:	0a44      	lsrs	r4, r0, #9
10013b46:	0048      	lsls	r0, r1, #1
10013b48:	0e12      	lsrs	r2, r2, #24
10013b4a:	0e00      	lsrs	r0, r0, #24
10013b4c:	0fc9      	lsrs	r1, r1, #31
10013b4e:	2aff      	cmp	r2, #255	; 0xff
10013b50:	d01f      	beq.n	10013b92 <__gesf2+0x5a>
10013b52:	28ff      	cmp	r0, #255	; 0xff
10013b54:	d022      	beq.n	10013b9c <__gesf2+0x64>
10013b56:	2a00      	cmp	r2, #0
10013b58:	d109      	bne.n	10013b6e <__gesf2+0x36>
10013b5a:	426e      	negs	r6, r5
10013b5c:	416e      	adcs	r6, r5
10013b5e:	2800      	cmp	r0, #0
10013b60:	d10f      	bne.n	10013b82 <__gesf2+0x4a>
10013b62:	2c00      	cmp	r4, #0
10013b64:	d10d      	bne.n	10013b82 <__gesf2+0x4a>
10013b66:	2000      	movs	r0, #0
10013b68:	2d00      	cmp	r5, #0
10013b6a:	d009      	beq.n	10013b80 <__gesf2+0x48>
10013b6c:	e005      	b.n	10013b7a <__gesf2+0x42>
10013b6e:	2800      	cmp	r0, #0
10013b70:	d101      	bne.n	10013b76 <__gesf2+0x3e>
10013b72:	2c00      	cmp	r4, #0
10013b74:	d001      	beq.n	10013b7a <__gesf2+0x42>
10013b76:	428b      	cmp	r3, r1
10013b78:	d013      	beq.n	10013ba2 <__gesf2+0x6a>
10013b7a:	4258      	negs	r0, r3
10013b7c:	2301      	movs	r3, #1
10013b7e:	4318      	orrs	r0, r3
10013b80:	bdf0      	pop	{r4, r5, r6, r7, pc}
10013b82:	2e00      	cmp	r6, #0
10013b84:	d0f7      	beq.n	10013b76 <__gesf2+0x3e>
10013b86:	4248      	negs	r0, r1
10013b88:	4141      	adcs	r1, r0
10013b8a:	2001      	movs	r0, #1
10013b8c:	4249      	negs	r1, r1
10013b8e:	4308      	orrs	r0, r1
10013b90:	e7f6      	b.n	10013b80 <__gesf2+0x48>
10013b92:	2d00      	cmp	r5, #0
10013b94:	d0dd      	beq.n	10013b52 <__gesf2+0x1a>
10013b96:	2002      	movs	r0, #2
10013b98:	4240      	negs	r0, r0
10013b9a:	e7f1      	b.n	10013b80 <__gesf2+0x48>
10013b9c:	2c00      	cmp	r4, #0
10013b9e:	d0da      	beq.n	10013b56 <__gesf2+0x1e>
10013ba0:	e7f9      	b.n	10013b96 <__gesf2+0x5e>
10013ba2:	4282      	cmp	r2, r0
10013ba4:	dce9      	bgt.n	10013b7a <__gesf2+0x42>
10013ba6:	db04      	blt.n	10013bb2 <__gesf2+0x7a>
10013ba8:	42a5      	cmp	r5, r4
10013baa:	d8e6      	bhi.n	10013b7a <__gesf2+0x42>
10013bac:	2000      	movs	r0, #0
10013bae:	42a5      	cmp	r5, r4
10013bb0:	d2e6      	bcs.n	10013b80 <__gesf2+0x48>
10013bb2:	4258      	negs	r0, r3
10013bb4:	4143      	adcs	r3, r0
10013bb6:	2001      	movs	r0, #1
10013bb8:	425b      	negs	r3, r3
10013bba:	4318      	orrs	r0, r3
10013bbc:	e7e0      	b.n	10013b80 <__gesf2+0x48>
10013bbe:	46c0      	nop			; (mov r8, r8)

10013bc0 <__lesf2>:
10013bc0:	0243      	lsls	r3, r0, #9
10013bc2:	b5f0      	push	{r4, r5, r6, r7, lr}
10013bc4:	0042      	lsls	r2, r0, #1
10013bc6:	004c      	lsls	r4, r1, #1
10013bc8:	0a5e      	lsrs	r6, r3, #9
10013bca:	0fc3      	lsrs	r3, r0, #31
10013bcc:	0248      	lsls	r0, r1, #9
10013bce:	0e12      	lsrs	r2, r2, #24
10013bd0:	0a45      	lsrs	r5, r0, #9
10013bd2:	0e24      	lsrs	r4, r4, #24
10013bd4:	0fc9      	lsrs	r1, r1, #31
10013bd6:	2aff      	cmp	r2, #255	; 0xff
10013bd8:	d017      	beq.n	10013c0a <__lesf2+0x4a>
10013bda:	2cff      	cmp	r4, #255	; 0xff
10013bdc:	d019      	beq.n	10013c12 <__lesf2+0x52>
10013bde:	2a00      	cmp	r2, #0
10013be0:	d10b      	bne.n	10013bfa <__lesf2+0x3a>
10013be2:	4270      	negs	r0, r6
10013be4:	4170      	adcs	r0, r6
10013be6:	2c00      	cmp	r4, #0
10013be8:	d017      	beq.n	10013c1a <__lesf2+0x5a>
10013bea:	2800      	cmp	r0, #0
10013bec:	d007      	beq.n	10013bfe <__lesf2+0x3e>
10013bee:	4248      	negs	r0, r1
10013bf0:	4141      	adcs	r1, r0
10013bf2:	2001      	movs	r0, #1
10013bf4:	4249      	negs	r1, r1
10013bf6:	4308      	orrs	r0, r1
10013bf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
10013bfa:	2c00      	cmp	r4, #0
10013bfc:	d013      	beq.n	10013c26 <__lesf2+0x66>
10013bfe:	428b      	cmp	r3, r1
10013c00:	d014      	beq.n	10013c2c <__lesf2+0x6c>
10013c02:	4258      	negs	r0, r3
10013c04:	2301      	movs	r3, #1
10013c06:	4318      	orrs	r0, r3
10013c08:	e7f6      	b.n	10013bf8 <__lesf2+0x38>
10013c0a:	2002      	movs	r0, #2
10013c0c:	2e00      	cmp	r6, #0
10013c0e:	d1f3      	bne.n	10013bf8 <__lesf2+0x38>
10013c10:	e7e3      	b.n	10013bda <__lesf2+0x1a>
10013c12:	2002      	movs	r0, #2
10013c14:	2d00      	cmp	r5, #0
10013c16:	d1ef      	bne.n	10013bf8 <__lesf2+0x38>
10013c18:	e7e1      	b.n	10013bde <__lesf2+0x1e>
10013c1a:	2d00      	cmp	r5, #0
10013c1c:	d1e5      	bne.n	10013bea <__lesf2+0x2a>
10013c1e:	2000      	movs	r0, #0
10013c20:	2e00      	cmp	r6, #0
10013c22:	d0e9      	beq.n	10013bf8 <__lesf2+0x38>
10013c24:	e7ed      	b.n	10013c02 <__lesf2+0x42>
10013c26:	2d00      	cmp	r5, #0
10013c28:	d1e9      	bne.n	10013bfe <__lesf2+0x3e>
10013c2a:	e7ea      	b.n	10013c02 <__lesf2+0x42>
10013c2c:	42a2      	cmp	r2, r4
10013c2e:	dce8      	bgt.n	10013c02 <__lesf2+0x42>
10013c30:	db04      	blt.n	10013c3c <__lesf2+0x7c>
10013c32:	42ae      	cmp	r6, r5
10013c34:	d8e5      	bhi.n	10013c02 <__lesf2+0x42>
10013c36:	2000      	movs	r0, #0
10013c38:	42ae      	cmp	r6, r5
10013c3a:	d2dd      	bcs.n	10013bf8 <__lesf2+0x38>
10013c3c:	4258      	negs	r0, r3
10013c3e:	4143      	adcs	r3, r0
10013c40:	2001      	movs	r0, #1
10013c42:	425b      	negs	r3, r3
10013c44:	4318      	orrs	r0, r3
10013c46:	e7d7      	b.n	10013bf8 <__lesf2+0x38>

10013c48 <__aeabi_fmul>:
10013c48:	b5f0      	push	{r4, r5, r6, r7, lr}
10013c4a:	4657      	mov	r7, sl
10013c4c:	464e      	mov	r6, r9
10013c4e:	4645      	mov	r5, r8
10013c50:	0043      	lsls	r3, r0, #1
10013c52:	b4e0      	push	{r5, r6, r7}
10013c54:	0246      	lsls	r6, r0, #9
10013c56:	4688      	mov	r8, r1
10013c58:	0a76      	lsrs	r6, r6, #9
10013c5a:	0e1f      	lsrs	r7, r3, #24
10013c5c:	0fc4      	lsrs	r4, r0, #31
10013c5e:	2f00      	cmp	r7, #0
10013c60:	d047      	beq.n	10013cf2 <__aeabi_fmul+0xaa>
10013c62:	2fff      	cmp	r7, #255	; 0xff
10013c64:	d025      	beq.n	10013cb2 <__aeabi_fmul+0x6a>
10013c66:	2300      	movs	r3, #0
10013c68:	2580      	movs	r5, #128	; 0x80
10013c6a:	469a      	mov	sl, r3
10013c6c:	4699      	mov	r9, r3
10013c6e:	00f6      	lsls	r6, r6, #3
10013c70:	04ed      	lsls	r5, r5, #19
10013c72:	432e      	orrs	r6, r5
10013c74:	3f7f      	subs	r7, #127	; 0x7f
10013c76:	4643      	mov	r3, r8
10013c78:	4642      	mov	r2, r8
10013c7a:	025d      	lsls	r5, r3, #9
10013c7c:	0fd2      	lsrs	r2, r2, #31
10013c7e:	005b      	lsls	r3, r3, #1
10013c80:	0a6d      	lsrs	r5, r5, #9
10013c82:	0e1b      	lsrs	r3, r3, #24
10013c84:	4690      	mov	r8, r2
10013c86:	d040      	beq.n	10013d0a <__aeabi_fmul+0xc2>
10013c88:	2bff      	cmp	r3, #255	; 0xff
10013c8a:	d039      	beq.n	10013d00 <__aeabi_fmul+0xb8>
10013c8c:	2280      	movs	r2, #128	; 0x80
10013c8e:	2000      	movs	r0, #0
10013c90:	00ed      	lsls	r5, r5, #3
10013c92:	04d2      	lsls	r2, r2, #19
10013c94:	4315      	orrs	r5, r2
10013c96:	3b7f      	subs	r3, #127	; 0x7f
10013c98:	18fb      	adds	r3, r7, r3
10013c9a:	4642      	mov	r2, r8
10013c9c:	4657      	mov	r7, sl
10013c9e:	1c59      	adds	r1, r3, #1
10013ca0:	4062      	eors	r2, r4
10013ca2:	468c      	mov	ip, r1
10013ca4:	4307      	orrs	r7, r0
10013ca6:	2f0f      	cmp	r7, #15
10013ca8:	d85c      	bhi.n	10013d64 <__aeabi_fmul+0x11c>
10013caa:	496f      	ldr	r1, [pc, #444]	; (10013e68 <__aeabi_fmul+0x220>)
10013cac:	00bf      	lsls	r7, r7, #2
10013cae:	59c9      	ldr	r1, [r1, r7]
10013cb0:	468f      	mov	pc, r1
10013cb2:	2e00      	cmp	r6, #0
10013cb4:	d145      	bne.n	10013d42 <__aeabi_fmul+0xfa>
10013cb6:	2308      	movs	r3, #8
10013cb8:	469a      	mov	sl, r3
10013cba:	3b06      	subs	r3, #6
10013cbc:	4699      	mov	r9, r3
10013cbe:	e7da      	b.n	10013c76 <__aeabi_fmul+0x2e>
10013cc0:	4642      	mov	r2, r8
10013cc2:	2802      	cmp	r0, #2
10013cc4:	d02d      	beq.n	10013d22 <__aeabi_fmul+0xda>
10013cc6:	2803      	cmp	r0, #3
10013cc8:	d100      	bne.n	10013ccc <__aeabi_fmul+0x84>
10013cca:	e0c3      	b.n	10013e54 <__aeabi_fmul+0x20c>
10013ccc:	2801      	cmp	r0, #1
10013cce:	d000      	beq.n	10013cd2 <__aeabi_fmul+0x8a>
10013cd0:	e0a2      	b.n	10013e18 <__aeabi_fmul+0x1d0>
10013cd2:	2500      	movs	r5, #0
10013cd4:	2600      	movs	r6, #0
10013cd6:	4002      	ands	r2, r0
10013cd8:	b2d4      	uxtb	r4, r2
10013cda:	0276      	lsls	r6, r6, #9
10013cdc:	05ed      	lsls	r5, r5, #23
10013cde:	0a76      	lsrs	r6, r6, #9
10013ce0:	432e      	orrs	r6, r5
10013ce2:	07e4      	lsls	r4, r4, #31
10013ce4:	4326      	orrs	r6, r4
10013ce6:	0030      	movs	r0, r6
10013ce8:	bc1c      	pop	{r2, r3, r4}
10013cea:	4690      	mov	r8, r2
10013cec:	4699      	mov	r9, r3
10013cee:	46a2      	mov	sl, r4
10013cf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
10013cf2:	2e00      	cmp	r6, #0
10013cf4:	d11a      	bne.n	10013d2c <__aeabi_fmul+0xe4>
10013cf6:	2304      	movs	r3, #4
10013cf8:	469a      	mov	sl, r3
10013cfa:	3b03      	subs	r3, #3
10013cfc:	4699      	mov	r9, r3
10013cfe:	e7ba      	b.n	10013c76 <__aeabi_fmul+0x2e>
10013d00:	002a      	movs	r2, r5
10013d02:	1e51      	subs	r1, r2, #1
10013d04:	418a      	sbcs	r2, r1
10013d06:	1c90      	adds	r0, r2, #2
10013d08:	e7c6      	b.n	10013c98 <__aeabi_fmul+0x50>
10013d0a:	2001      	movs	r0, #1
10013d0c:	2d00      	cmp	r5, #0
10013d0e:	d0c3      	beq.n	10013c98 <__aeabi_fmul+0x50>
10013d10:	0028      	movs	r0, r5
10013d12:	f001 fa25 	bl	10015160 <__clzsi2>
10013d16:	1f43      	subs	r3, r0, #5
10013d18:	3076      	adds	r0, #118	; 0x76
10013d1a:	409d      	lsls	r5, r3
10013d1c:	4243      	negs	r3, r0
10013d1e:	2000      	movs	r0, #0
10013d20:	e7ba      	b.n	10013c98 <__aeabi_fmul+0x50>
10013d22:	2401      	movs	r4, #1
10013d24:	25ff      	movs	r5, #255	; 0xff
10013d26:	4014      	ands	r4, r2
10013d28:	2600      	movs	r6, #0
10013d2a:	e7d6      	b.n	10013cda <__aeabi_fmul+0x92>
10013d2c:	0030      	movs	r0, r6
10013d2e:	f001 fa17 	bl	10015160 <__clzsi2>
10013d32:	1f43      	subs	r3, r0, #5
10013d34:	409e      	lsls	r6, r3
10013d36:	2300      	movs	r3, #0
10013d38:	3076      	adds	r0, #118	; 0x76
10013d3a:	4247      	negs	r7, r0
10013d3c:	469a      	mov	sl, r3
10013d3e:	4699      	mov	r9, r3
10013d40:	e799      	b.n	10013c76 <__aeabi_fmul+0x2e>
10013d42:	230c      	movs	r3, #12
10013d44:	469a      	mov	sl, r3
10013d46:	3b09      	subs	r3, #9
10013d48:	4699      	mov	r9, r3
10013d4a:	e794      	b.n	10013c76 <__aeabi_fmul+0x2e>
10013d4c:	2680      	movs	r6, #128	; 0x80
10013d4e:	2400      	movs	r4, #0
10013d50:	03f6      	lsls	r6, r6, #15
10013d52:	25ff      	movs	r5, #255	; 0xff
10013d54:	e7c1      	b.n	10013cda <__aeabi_fmul+0x92>
10013d56:	0035      	movs	r5, r6
10013d58:	4648      	mov	r0, r9
10013d5a:	e7b2      	b.n	10013cc2 <__aeabi_fmul+0x7a>
10013d5c:	0035      	movs	r5, r6
10013d5e:	0022      	movs	r2, r4
10013d60:	4648      	mov	r0, r9
10013d62:	e7ae      	b.n	10013cc2 <__aeabi_fmul+0x7a>
10013d64:	0429      	lsls	r1, r5, #16
10013d66:	0c09      	lsrs	r1, r1, #16
10013d68:	0008      	movs	r0, r1
10013d6a:	0c37      	lsrs	r7, r6, #16
10013d6c:	0436      	lsls	r6, r6, #16
10013d6e:	0c36      	lsrs	r6, r6, #16
10013d70:	0c2c      	lsrs	r4, r5, #16
10013d72:	4379      	muls	r1, r7
10013d74:	4370      	muls	r0, r6
10013d76:	4367      	muls	r7, r4
10013d78:	4374      	muls	r4, r6
10013d7a:	0c06      	lsrs	r6, r0, #16
10013d7c:	1864      	adds	r4, r4, r1
10013d7e:	1936      	adds	r6, r6, r4
10013d80:	42b1      	cmp	r1, r6
10013d82:	d903      	bls.n	10013d8c <__aeabi_fmul+0x144>
10013d84:	2180      	movs	r1, #128	; 0x80
10013d86:	0249      	lsls	r1, r1, #9
10013d88:	4688      	mov	r8, r1
10013d8a:	4447      	add	r7, r8
10013d8c:	0400      	lsls	r0, r0, #16
10013d8e:	0c00      	lsrs	r0, r0, #16
10013d90:	0431      	lsls	r1, r6, #16
10013d92:	1809      	adds	r1, r1, r0
10013d94:	018d      	lsls	r5, r1, #6
10013d96:	1e68      	subs	r0, r5, #1
10013d98:	4185      	sbcs	r5, r0
10013d9a:	0e89      	lsrs	r1, r1, #26
10013d9c:	4329      	orrs	r1, r5
10013d9e:	0c35      	lsrs	r5, r6, #16
10013da0:	19ed      	adds	r5, r5, r7
10013da2:	01ad      	lsls	r5, r5, #6
10013da4:	430d      	orrs	r5, r1
10013da6:	0129      	lsls	r1, r5, #4
10013da8:	d504      	bpl.n	10013db4 <__aeabi_fmul+0x16c>
10013daa:	2301      	movs	r3, #1
10013dac:	0869      	lsrs	r1, r5, #1
10013dae:	401d      	ands	r5, r3
10013db0:	4663      	mov	r3, ip
10013db2:	430d      	orrs	r5, r1
10013db4:	0019      	movs	r1, r3
10013db6:	317f      	adds	r1, #127	; 0x7f
10013db8:	2900      	cmp	r1, #0
10013dba:	dd25      	ble.n	10013e08 <__aeabi_fmul+0x1c0>
10013dbc:	0768      	lsls	r0, r5, #29
10013dbe:	d004      	beq.n	10013dca <__aeabi_fmul+0x182>
10013dc0:	200f      	movs	r0, #15
10013dc2:	4028      	ands	r0, r5
10013dc4:	2804      	cmp	r0, #4
10013dc6:	d000      	beq.n	10013dca <__aeabi_fmul+0x182>
10013dc8:	3504      	adds	r5, #4
10013dca:	0128      	lsls	r0, r5, #4
10013dcc:	d503      	bpl.n	10013dd6 <__aeabi_fmul+0x18e>
10013dce:	4927      	ldr	r1, [pc, #156]	; (10013e6c <__aeabi_fmul+0x224>)
10013dd0:	3380      	adds	r3, #128	; 0x80
10013dd2:	400d      	ands	r5, r1
10013dd4:	0019      	movs	r1, r3
10013dd6:	29fe      	cmp	r1, #254	; 0xfe
10013dd8:	dca3      	bgt.n	10013d22 <__aeabi_fmul+0xda>
10013dda:	2401      	movs	r4, #1
10013ddc:	01ad      	lsls	r5, r5, #6
10013dde:	0a6e      	lsrs	r6, r5, #9
10013de0:	4014      	ands	r4, r2
10013de2:	b2cd      	uxtb	r5, r1
10013de4:	e779      	b.n	10013cda <__aeabi_fmul+0x92>
10013de6:	2080      	movs	r0, #128	; 0x80
10013de8:	03c0      	lsls	r0, r0, #15
10013dea:	4206      	tst	r6, r0
10013dec:	d007      	beq.n	10013dfe <__aeabi_fmul+0x1b6>
10013dee:	4205      	tst	r5, r0
10013df0:	d105      	bne.n	10013dfe <__aeabi_fmul+0x1b6>
10013df2:	4328      	orrs	r0, r5
10013df4:	0246      	lsls	r6, r0, #9
10013df6:	0a76      	lsrs	r6, r6, #9
10013df8:	4644      	mov	r4, r8
10013dfa:	25ff      	movs	r5, #255	; 0xff
10013dfc:	e76d      	b.n	10013cda <__aeabi_fmul+0x92>
10013dfe:	4306      	orrs	r6, r0
10013e00:	0276      	lsls	r6, r6, #9
10013e02:	0a76      	lsrs	r6, r6, #9
10013e04:	25ff      	movs	r5, #255	; 0xff
10013e06:	e768      	b.n	10013cda <__aeabi_fmul+0x92>
10013e08:	2401      	movs	r4, #1
10013e0a:	1a61      	subs	r1, r4, r1
10013e0c:	291b      	cmp	r1, #27
10013e0e:	dd05      	ble.n	10013e1c <__aeabi_fmul+0x1d4>
10013e10:	4014      	ands	r4, r2
10013e12:	2500      	movs	r5, #0
10013e14:	2600      	movs	r6, #0
10013e16:	e760      	b.n	10013cda <__aeabi_fmul+0x92>
10013e18:	4663      	mov	r3, ip
10013e1a:	e7cb      	b.n	10013db4 <__aeabi_fmul+0x16c>
10013e1c:	002e      	movs	r6, r5
10013e1e:	2320      	movs	r3, #32
10013e20:	40ce      	lsrs	r6, r1
10013e22:	1a59      	subs	r1, r3, r1
10013e24:	408d      	lsls	r5, r1
10013e26:	1e6b      	subs	r3, r5, #1
10013e28:	419d      	sbcs	r5, r3
10013e2a:	432e      	orrs	r6, r5
10013e2c:	0773      	lsls	r3, r6, #29
10013e2e:	d004      	beq.n	10013e3a <__aeabi_fmul+0x1f2>
10013e30:	230f      	movs	r3, #15
10013e32:	4033      	ands	r3, r6
10013e34:	2b04      	cmp	r3, #4
10013e36:	d000      	beq.n	10013e3a <__aeabi_fmul+0x1f2>
10013e38:	3604      	adds	r6, #4
10013e3a:	0173      	lsls	r3, r6, #5
10013e3c:	d504      	bpl.n	10013e48 <__aeabi_fmul+0x200>
10013e3e:	2401      	movs	r4, #1
10013e40:	2501      	movs	r5, #1
10013e42:	4014      	ands	r4, r2
10013e44:	2600      	movs	r6, #0
10013e46:	e748      	b.n	10013cda <__aeabi_fmul+0x92>
10013e48:	2401      	movs	r4, #1
10013e4a:	01b6      	lsls	r6, r6, #6
10013e4c:	0a76      	lsrs	r6, r6, #9
10013e4e:	4014      	ands	r4, r2
10013e50:	2500      	movs	r5, #0
10013e52:	e742      	b.n	10013cda <__aeabi_fmul+0x92>
10013e54:	2680      	movs	r6, #128	; 0x80
10013e56:	2401      	movs	r4, #1
10013e58:	03f6      	lsls	r6, r6, #15
10013e5a:	432e      	orrs	r6, r5
10013e5c:	0276      	lsls	r6, r6, #9
10013e5e:	0a76      	lsrs	r6, r6, #9
10013e60:	4014      	ands	r4, r2
10013e62:	25ff      	movs	r5, #255	; 0xff
10013e64:	e739      	b.n	10013cda <__aeabi_fmul+0x92>
10013e66:	46c0      	nop			; (mov r8, r8)
10013e68:	100184c4 	.word	0x100184c4
10013e6c:	f7ffffff 	.word	0xf7ffffff

10013e70 <__aeabi_fsub>:
10013e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10013e72:	024a      	lsls	r2, r1, #9
10013e74:	004e      	lsls	r6, r1, #1
10013e76:	0243      	lsls	r3, r0, #9
10013e78:	0044      	lsls	r4, r0, #1
10013e7a:	0e24      	lsrs	r4, r4, #24
10013e7c:	0fc5      	lsrs	r5, r0, #31
10013e7e:	099b      	lsrs	r3, r3, #6
10013e80:	0e36      	lsrs	r6, r6, #24
10013e82:	0fc9      	lsrs	r1, r1, #31
10013e84:	0992      	lsrs	r2, r2, #6
10013e86:	2eff      	cmp	r6, #255	; 0xff
10013e88:	d100      	bne.n	10013e8c <__aeabi_fsub+0x1c>
10013e8a:	e083      	b.n	10013f94 <__aeabi_fsub+0x124>
10013e8c:	2001      	movs	r0, #1
10013e8e:	4041      	eors	r1, r0
10013e90:	1ba0      	subs	r0, r4, r6
10013e92:	42a9      	cmp	r1, r5
10013e94:	d05c      	beq.n	10013f50 <__aeabi_fsub+0xe0>
10013e96:	2800      	cmp	r0, #0
10013e98:	dc00      	bgt.n	10013e9c <__aeabi_fsub+0x2c>
10013e9a:	e095      	b.n	10013fc8 <__aeabi_fsub+0x158>
10013e9c:	2e00      	cmp	r6, #0
10013e9e:	d11c      	bne.n	10013eda <__aeabi_fsub+0x6a>
10013ea0:	2a00      	cmp	r2, #0
10013ea2:	d000      	beq.n	10013ea6 <__aeabi_fsub+0x36>
10013ea4:	e081      	b.n	10013faa <__aeabi_fsub+0x13a>
10013ea6:	075a      	lsls	r2, r3, #29
10013ea8:	d004      	beq.n	10013eb4 <__aeabi_fsub+0x44>
10013eaa:	220f      	movs	r2, #15
10013eac:	401a      	ands	r2, r3
10013eae:	2a04      	cmp	r2, #4
10013eb0:	d000      	beq.n	10013eb4 <__aeabi_fsub+0x44>
10013eb2:	3304      	adds	r3, #4
10013eb4:	015a      	lsls	r2, r3, #5
10013eb6:	d53b      	bpl.n	10013f30 <__aeabi_fsub+0xc0>
10013eb8:	3401      	adds	r4, #1
10013eba:	2cff      	cmp	r4, #255	; 0xff
10013ebc:	d100      	bne.n	10013ec0 <__aeabi_fsub+0x50>
10013ebe:	e091      	b.n	10013fe4 <__aeabi_fsub+0x174>
10013ec0:	2001      	movs	r0, #1
10013ec2:	019b      	lsls	r3, r3, #6
10013ec4:	0a5b      	lsrs	r3, r3, #9
10013ec6:	b2e4      	uxtb	r4, r4
10013ec8:	4005      	ands	r5, r0
10013eca:	025b      	lsls	r3, r3, #9
10013ecc:	05e4      	lsls	r4, r4, #23
10013ece:	0a5b      	lsrs	r3, r3, #9
10013ed0:	07ed      	lsls	r5, r5, #31
10013ed2:	4323      	orrs	r3, r4
10013ed4:	432b      	orrs	r3, r5
10013ed6:	0018      	movs	r0, r3
10013ed8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10013eda:	2cff      	cmp	r4, #255	; 0xff
10013edc:	d0e3      	beq.n	10013ea6 <__aeabi_fsub+0x36>
10013ede:	2180      	movs	r1, #128	; 0x80
10013ee0:	04c9      	lsls	r1, r1, #19
10013ee2:	430a      	orrs	r2, r1
10013ee4:	281b      	cmp	r0, #27
10013ee6:	dd00      	ble.n	10013eea <__aeabi_fsub+0x7a>
10013ee8:	e090      	b.n	1001400c <__aeabi_fsub+0x19c>
10013eea:	0016      	movs	r6, r2
10013eec:	2120      	movs	r1, #32
10013eee:	40c6      	lsrs	r6, r0
10013ef0:	1a08      	subs	r0, r1, r0
10013ef2:	4082      	lsls	r2, r0
10013ef4:	1e51      	subs	r1, r2, #1
10013ef6:	418a      	sbcs	r2, r1
10013ef8:	4332      	orrs	r2, r6
10013efa:	1a9b      	subs	r3, r3, r2
10013efc:	015a      	lsls	r2, r3, #5
10013efe:	d515      	bpl.n	10013f2c <__aeabi_fsub+0xbc>
10013f00:	019b      	lsls	r3, r3, #6
10013f02:	099e      	lsrs	r6, r3, #6
10013f04:	0030      	movs	r0, r6
10013f06:	f001 f92b 	bl	10015160 <__clzsi2>
10013f0a:	3805      	subs	r0, #5
10013f0c:	4086      	lsls	r6, r0
10013f0e:	4284      	cmp	r4, r0
10013f10:	dc6c      	bgt.n	10013fec <__aeabi_fsub+0x17c>
10013f12:	1b04      	subs	r4, r0, r4
10013f14:	0033      	movs	r3, r6
10013f16:	2020      	movs	r0, #32
10013f18:	3401      	adds	r4, #1
10013f1a:	40e3      	lsrs	r3, r4
10013f1c:	1b04      	subs	r4, r0, r4
10013f1e:	40a6      	lsls	r6, r4
10013f20:	1e72      	subs	r2, r6, #1
10013f22:	4196      	sbcs	r6, r2
10013f24:	2400      	movs	r4, #0
10013f26:	4333      	orrs	r3, r6
10013f28:	e7bd      	b.n	10013ea6 <__aeabi_fsub+0x36>
10013f2a:	000d      	movs	r5, r1
10013f2c:	075a      	lsls	r2, r3, #29
10013f2e:	d1bc      	bne.n	10013eaa <__aeabi_fsub+0x3a>
10013f30:	08df      	lsrs	r7, r3, #3
10013f32:	2301      	movs	r3, #1
10013f34:	401d      	ands	r5, r3
10013f36:	2cff      	cmp	r4, #255	; 0xff
10013f38:	d133      	bne.n	10013fa2 <__aeabi_fsub+0x132>
10013f3a:	2f00      	cmp	r7, #0
10013f3c:	d100      	bne.n	10013f40 <__aeabi_fsub+0xd0>
10013f3e:	e090      	b.n	10014062 <__aeabi_fsub+0x1f2>
10013f40:	2280      	movs	r2, #128	; 0x80
10013f42:	03d2      	lsls	r2, r2, #15
10013f44:	0013      	movs	r3, r2
10013f46:	433b      	orrs	r3, r7
10013f48:	025b      	lsls	r3, r3, #9
10013f4a:	0a5b      	lsrs	r3, r3, #9
10013f4c:	24ff      	movs	r4, #255	; 0xff
10013f4e:	e7bc      	b.n	10013eca <__aeabi_fsub+0x5a>
10013f50:	2800      	cmp	r0, #0
10013f52:	dd4f      	ble.n	10013ff4 <__aeabi_fsub+0x184>
10013f54:	2e00      	cmp	r6, #0
10013f56:	d02e      	beq.n	10013fb6 <__aeabi_fsub+0x146>
10013f58:	2cff      	cmp	r4, #255	; 0xff
10013f5a:	d0a4      	beq.n	10013ea6 <__aeabi_fsub+0x36>
10013f5c:	2580      	movs	r5, #128	; 0x80
10013f5e:	04ed      	lsls	r5, r5, #19
10013f60:	432a      	orrs	r2, r5
10013f62:	281b      	cmp	r0, #27
10013f64:	dd00      	ble.n	10013f68 <__aeabi_fsub+0xf8>
10013f66:	e097      	b.n	10014098 <__aeabi_fsub+0x228>
10013f68:	0016      	movs	r6, r2
10013f6a:	2520      	movs	r5, #32
10013f6c:	40c6      	lsrs	r6, r0
10013f6e:	1a28      	subs	r0, r5, r0
10013f70:	4082      	lsls	r2, r0
10013f72:	1e50      	subs	r0, r2, #1
10013f74:	4182      	sbcs	r2, r0
10013f76:	4332      	orrs	r2, r6
10013f78:	189b      	adds	r3, r3, r2
10013f7a:	015a      	lsls	r2, r3, #5
10013f7c:	d5d5      	bpl.n	10013f2a <__aeabi_fsub+0xba>
10013f7e:	3401      	adds	r4, #1
10013f80:	2cff      	cmp	r4, #255	; 0xff
10013f82:	d06d      	beq.n	10014060 <__aeabi_fsub+0x1f0>
10013f84:	2201      	movs	r2, #1
10013f86:	487b      	ldr	r0, [pc, #492]	; (10014174 <__aeabi_fsub+0x304>)
10013f88:	401a      	ands	r2, r3
10013f8a:	085b      	lsrs	r3, r3, #1
10013f8c:	4003      	ands	r3, r0
10013f8e:	4313      	orrs	r3, r2
10013f90:	000d      	movs	r5, r1
10013f92:	e788      	b.n	10013ea6 <__aeabi_fsub+0x36>
10013f94:	2a00      	cmp	r2, #0
10013f96:	d000      	beq.n	10013f9a <__aeabi_fsub+0x12a>
10013f98:	e77a      	b.n	10013e90 <__aeabi_fsub+0x20>
10013f9a:	e777      	b.n	10013e8c <__aeabi_fsub+0x1c>
10013f9c:	1e03      	subs	r3, r0, #0
10013f9e:	d1c5      	bne.n	10013f2c <__aeabi_fsub+0xbc>
10013fa0:	2500      	movs	r5, #0
10013fa2:	027b      	lsls	r3, r7, #9
10013fa4:	0a5b      	lsrs	r3, r3, #9
10013fa6:	b2e4      	uxtb	r4, r4
10013fa8:	e78f      	b.n	10013eca <__aeabi_fsub+0x5a>
10013faa:	3801      	subs	r0, #1
10013fac:	2800      	cmp	r0, #0
10013fae:	d0a4      	beq.n	10013efa <__aeabi_fsub+0x8a>
10013fb0:	2cff      	cmp	r4, #255	; 0xff
10013fb2:	d197      	bne.n	10013ee4 <__aeabi_fsub+0x74>
10013fb4:	e777      	b.n	10013ea6 <__aeabi_fsub+0x36>
10013fb6:	2a00      	cmp	r2, #0
10013fb8:	d100      	bne.n	10013fbc <__aeabi_fsub+0x14c>
10013fba:	e774      	b.n	10013ea6 <__aeabi_fsub+0x36>
10013fbc:	3801      	subs	r0, #1
10013fbe:	2800      	cmp	r0, #0
10013fc0:	d0da      	beq.n	10013f78 <__aeabi_fsub+0x108>
10013fc2:	2cff      	cmp	r4, #255	; 0xff
10013fc4:	d1cd      	bne.n	10013f62 <__aeabi_fsub+0xf2>
10013fc6:	e76e      	b.n	10013ea6 <__aeabi_fsub+0x36>
10013fc8:	2800      	cmp	r0, #0
10013fca:	d121      	bne.n	10014010 <__aeabi_fsub+0x1a0>
10013fcc:	1c60      	adds	r0, r4, #1
10013fce:	b2c0      	uxtb	r0, r0
10013fd0:	2801      	cmp	r0, #1
10013fd2:	dd58      	ble.n	10014086 <__aeabi_fsub+0x216>
10013fd4:	2780      	movs	r7, #128	; 0x80
10013fd6:	1a9e      	subs	r6, r3, r2
10013fd8:	04ff      	lsls	r7, r7, #19
10013fda:	4037      	ands	r7, r6
10013fdc:	d02f      	beq.n	1001403e <__aeabi_fsub+0x1ce>
10013fde:	1ad6      	subs	r6, r2, r3
10013fe0:	000d      	movs	r5, r1
10013fe2:	e78f      	b.n	10013f04 <__aeabi_fsub+0x94>
10013fe4:	2301      	movs	r3, #1
10013fe6:	401d      	ands	r5, r3
10013fe8:	2300      	movs	r3, #0
10013fea:	e76e      	b.n	10013eca <__aeabi_fsub+0x5a>
10013fec:	4b62      	ldr	r3, [pc, #392]	; (10014178 <__aeabi_fsub+0x308>)
10013fee:	1a24      	subs	r4, r4, r0
10013ff0:	4033      	ands	r3, r6
10013ff2:	e758      	b.n	10013ea6 <__aeabi_fsub+0x36>
10013ff4:	2800      	cmp	r0, #0
10013ff6:	d151      	bne.n	1001409c <__aeabi_fsub+0x22c>
10013ff8:	1c60      	adds	r0, r4, #1
10013ffa:	b2c6      	uxtb	r6, r0
10013ffc:	2e01      	cmp	r6, #1
10013ffe:	dd33      	ble.n	10014068 <__aeabi_fsub+0x1f8>
10014000:	28ff      	cmp	r0, #255	; 0xff
10014002:	d02d      	beq.n	10014060 <__aeabi_fsub+0x1f0>
10014004:	189b      	adds	r3, r3, r2
10014006:	085b      	lsrs	r3, r3, #1
10014008:	0004      	movs	r4, r0
1001400a:	e74c      	b.n	10013ea6 <__aeabi_fsub+0x36>
1001400c:	2201      	movs	r2, #1
1001400e:	e774      	b.n	10013efa <__aeabi_fsub+0x8a>
10014010:	2c00      	cmp	r4, #0
10014012:	d01a      	beq.n	1001404a <__aeabi_fsub+0x1da>
10014014:	2eff      	cmp	r6, #255	; 0xff
10014016:	d01f      	beq.n	10014058 <__aeabi_fsub+0x1e8>
10014018:	2480      	movs	r4, #128	; 0x80
1001401a:	04e4      	lsls	r4, r4, #19
1001401c:	4240      	negs	r0, r0
1001401e:	4323      	orrs	r3, r4
10014020:	281b      	cmp	r0, #27
10014022:	dd00      	ble.n	10014026 <__aeabi_fsub+0x1b6>
10014024:	e096      	b.n	10014154 <__aeabi_fsub+0x2e4>
10014026:	001d      	movs	r5, r3
10014028:	2420      	movs	r4, #32
1001402a:	40c5      	lsrs	r5, r0
1001402c:	1a20      	subs	r0, r4, r0
1001402e:	4083      	lsls	r3, r0
10014030:	1e58      	subs	r0, r3, #1
10014032:	4183      	sbcs	r3, r0
10014034:	432b      	orrs	r3, r5
10014036:	1ad3      	subs	r3, r2, r3
10014038:	0034      	movs	r4, r6
1001403a:	000d      	movs	r5, r1
1001403c:	e75e      	b.n	10013efc <__aeabi_fsub+0x8c>
1001403e:	2e00      	cmp	r6, #0
10014040:	d000      	beq.n	10014044 <__aeabi_fsub+0x1d4>
10014042:	e75f      	b.n	10013f04 <__aeabi_fsub+0x94>
10014044:	2500      	movs	r5, #0
10014046:	2400      	movs	r4, #0
10014048:	e7ab      	b.n	10013fa2 <__aeabi_fsub+0x132>
1001404a:	2b00      	cmp	r3, #0
1001404c:	d044      	beq.n	100140d8 <__aeabi_fsub+0x268>
1001404e:	43c0      	mvns	r0, r0
10014050:	2800      	cmp	r0, #0
10014052:	d0f0      	beq.n	10014036 <__aeabi_fsub+0x1c6>
10014054:	2eff      	cmp	r6, #255	; 0xff
10014056:	d1e3      	bne.n	10014020 <__aeabi_fsub+0x1b0>
10014058:	0013      	movs	r3, r2
1001405a:	24ff      	movs	r4, #255	; 0xff
1001405c:	000d      	movs	r5, r1
1001405e:	e722      	b.n	10013ea6 <__aeabi_fsub+0x36>
10014060:	000d      	movs	r5, r1
10014062:	24ff      	movs	r4, #255	; 0xff
10014064:	2300      	movs	r3, #0
10014066:	e730      	b.n	10013eca <__aeabi_fsub+0x5a>
10014068:	2c00      	cmp	r4, #0
1001406a:	d15d      	bne.n	10014128 <__aeabi_fsub+0x2b8>
1001406c:	2b00      	cmp	r3, #0
1001406e:	d07d      	beq.n	1001416c <__aeabi_fsub+0x2fc>
10014070:	2a00      	cmp	r2, #0
10014072:	d100      	bne.n	10014076 <__aeabi_fsub+0x206>
10014074:	e717      	b.n	10013ea6 <__aeabi_fsub+0x36>
10014076:	189b      	adds	r3, r3, r2
10014078:	015a      	lsls	r2, r3, #5
1001407a:	d400      	bmi.n	1001407e <__aeabi_fsub+0x20e>
1001407c:	e756      	b.n	10013f2c <__aeabi_fsub+0xbc>
1001407e:	4a3e      	ldr	r2, [pc, #248]	; (10014178 <__aeabi_fsub+0x308>)
10014080:	0004      	movs	r4, r0
10014082:	4013      	ands	r3, r2
10014084:	e70f      	b.n	10013ea6 <__aeabi_fsub+0x36>
10014086:	2c00      	cmp	r4, #0
10014088:	d11e      	bne.n	100140c8 <__aeabi_fsub+0x258>
1001408a:	2b00      	cmp	r3, #0
1001408c:	d12f      	bne.n	100140ee <__aeabi_fsub+0x27e>
1001408e:	2a00      	cmp	r2, #0
10014090:	d065      	beq.n	1001415e <__aeabi_fsub+0x2ee>
10014092:	0013      	movs	r3, r2
10014094:	000d      	movs	r5, r1
10014096:	e706      	b.n	10013ea6 <__aeabi_fsub+0x36>
10014098:	2201      	movs	r2, #1
1001409a:	e76d      	b.n	10013f78 <__aeabi_fsub+0x108>
1001409c:	2c00      	cmp	r4, #0
1001409e:	d11f      	bne.n	100140e0 <__aeabi_fsub+0x270>
100140a0:	2b00      	cmp	r3, #0
100140a2:	d059      	beq.n	10014158 <__aeabi_fsub+0x2e8>
100140a4:	43c0      	mvns	r0, r0
100140a6:	2800      	cmp	r0, #0
100140a8:	d00b      	beq.n	100140c2 <__aeabi_fsub+0x252>
100140aa:	2eff      	cmp	r6, #255	; 0xff
100140ac:	d04f      	beq.n	1001414e <__aeabi_fsub+0x2de>
100140ae:	281b      	cmp	r0, #27
100140b0:	dc5e      	bgt.n	10014170 <__aeabi_fsub+0x300>
100140b2:	001d      	movs	r5, r3
100140b4:	2420      	movs	r4, #32
100140b6:	40c5      	lsrs	r5, r0
100140b8:	1a20      	subs	r0, r4, r0
100140ba:	4083      	lsls	r3, r0
100140bc:	1e58      	subs	r0, r3, #1
100140be:	4183      	sbcs	r3, r0
100140c0:	432b      	orrs	r3, r5
100140c2:	189b      	adds	r3, r3, r2
100140c4:	0034      	movs	r4, r6
100140c6:	e758      	b.n	10013f7a <__aeabi_fsub+0x10a>
100140c8:	2b00      	cmp	r3, #0
100140ca:	d11c      	bne.n	10014106 <__aeabi_fsub+0x296>
100140cc:	2a00      	cmp	r2, #0
100140ce:	d049      	beq.n	10014164 <__aeabi_fsub+0x2f4>
100140d0:	0013      	movs	r3, r2
100140d2:	000d      	movs	r5, r1
100140d4:	24ff      	movs	r4, #255	; 0xff
100140d6:	e6e6      	b.n	10013ea6 <__aeabi_fsub+0x36>
100140d8:	0013      	movs	r3, r2
100140da:	0034      	movs	r4, r6
100140dc:	000d      	movs	r5, r1
100140de:	e6e2      	b.n	10013ea6 <__aeabi_fsub+0x36>
100140e0:	2eff      	cmp	r6, #255	; 0xff
100140e2:	d034      	beq.n	1001414e <__aeabi_fsub+0x2de>
100140e4:	2480      	movs	r4, #128	; 0x80
100140e6:	04e4      	lsls	r4, r4, #19
100140e8:	4240      	negs	r0, r0
100140ea:	4323      	orrs	r3, r4
100140ec:	e7df      	b.n	100140ae <__aeabi_fsub+0x23e>
100140ee:	2a00      	cmp	r2, #0
100140f0:	d100      	bne.n	100140f4 <__aeabi_fsub+0x284>
100140f2:	e6d8      	b.n	10013ea6 <__aeabi_fsub+0x36>
100140f4:	2780      	movs	r7, #128	; 0x80
100140f6:	1a98      	subs	r0, r3, r2
100140f8:	04ff      	lsls	r7, r7, #19
100140fa:	4007      	ands	r7, r0
100140fc:	d100      	bne.n	10014100 <__aeabi_fsub+0x290>
100140fe:	e74d      	b.n	10013f9c <__aeabi_fsub+0x12c>
10014100:	1ad3      	subs	r3, r2, r3
10014102:	000d      	movs	r5, r1
10014104:	e6cf      	b.n	10013ea6 <__aeabi_fsub+0x36>
10014106:	24ff      	movs	r4, #255	; 0xff
10014108:	2a00      	cmp	r2, #0
1001410a:	d100      	bne.n	1001410e <__aeabi_fsub+0x29e>
1001410c:	e6cb      	b.n	10013ea6 <__aeabi_fsub+0x36>
1001410e:	2080      	movs	r0, #128	; 0x80
10014110:	08db      	lsrs	r3, r3, #3
10014112:	03c0      	lsls	r0, r0, #15
10014114:	4203      	tst	r3, r0
10014116:	d004      	beq.n	10014122 <__aeabi_fsub+0x2b2>
10014118:	08d2      	lsrs	r2, r2, #3
1001411a:	4202      	tst	r2, r0
1001411c:	d101      	bne.n	10014122 <__aeabi_fsub+0x2b2>
1001411e:	0013      	movs	r3, r2
10014120:	000d      	movs	r5, r1
10014122:	00db      	lsls	r3, r3, #3
10014124:	24ff      	movs	r4, #255	; 0xff
10014126:	e6be      	b.n	10013ea6 <__aeabi_fsub+0x36>
10014128:	2b00      	cmp	r3, #0
1001412a:	d010      	beq.n	1001414e <__aeabi_fsub+0x2de>
1001412c:	24ff      	movs	r4, #255	; 0xff
1001412e:	2a00      	cmp	r2, #0
10014130:	d100      	bne.n	10014134 <__aeabi_fsub+0x2c4>
10014132:	e6b8      	b.n	10013ea6 <__aeabi_fsub+0x36>
10014134:	2080      	movs	r0, #128	; 0x80
10014136:	08db      	lsrs	r3, r3, #3
10014138:	03c0      	lsls	r0, r0, #15
1001413a:	4203      	tst	r3, r0
1001413c:	d003      	beq.n	10014146 <__aeabi_fsub+0x2d6>
1001413e:	08d2      	lsrs	r2, r2, #3
10014140:	4202      	tst	r2, r0
10014142:	d100      	bne.n	10014146 <__aeabi_fsub+0x2d6>
10014144:	0013      	movs	r3, r2
10014146:	00db      	lsls	r3, r3, #3
10014148:	000d      	movs	r5, r1
1001414a:	24ff      	movs	r4, #255	; 0xff
1001414c:	e6ab      	b.n	10013ea6 <__aeabi_fsub+0x36>
1001414e:	0013      	movs	r3, r2
10014150:	24ff      	movs	r4, #255	; 0xff
10014152:	e6a8      	b.n	10013ea6 <__aeabi_fsub+0x36>
10014154:	2301      	movs	r3, #1
10014156:	e76e      	b.n	10014036 <__aeabi_fsub+0x1c6>
10014158:	0013      	movs	r3, r2
1001415a:	0034      	movs	r4, r6
1001415c:	e6a3      	b.n	10013ea6 <__aeabi_fsub+0x36>
1001415e:	2700      	movs	r7, #0
10014160:	2500      	movs	r5, #0
10014162:	e71e      	b.n	10013fa2 <__aeabi_fsub+0x132>
10014164:	2780      	movs	r7, #128	; 0x80
10014166:	2500      	movs	r5, #0
10014168:	03ff      	lsls	r7, r7, #15
1001416a:	e6e9      	b.n	10013f40 <__aeabi_fsub+0xd0>
1001416c:	0013      	movs	r3, r2
1001416e:	e69a      	b.n	10013ea6 <__aeabi_fsub+0x36>
10014170:	2301      	movs	r3, #1
10014172:	e7a6      	b.n	100140c2 <__aeabi_fsub+0x252>
10014174:	7dffffff 	.word	0x7dffffff
10014178:	fbffffff 	.word	0xfbffffff

1001417c <__aeabi_f2iz>:
1001417c:	0243      	lsls	r3, r0, #9
1001417e:	0a59      	lsrs	r1, r3, #9
10014180:	0043      	lsls	r3, r0, #1
10014182:	0fc2      	lsrs	r2, r0, #31
10014184:	0e1b      	lsrs	r3, r3, #24
10014186:	2000      	movs	r0, #0
10014188:	2b7e      	cmp	r3, #126	; 0x7e
1001418a:	dd0e      	ble.n	100141aa <__aeabi_f2iz+0x2e>
1001418c:	2b9d      	cmp	r3, #157	; 0x9d
1001418e:	dc0d      	bgt.n	100141ac <__aeabi_f2iz+0x30>
10014190:	2080      	movs	r0, #128	; 0x80
10014192:	0400      	lsls	r0, r0, #16
10014194:	4301      	orrs	r1, r0
10014196:	2b95      	cmp	r3, #149	; 0x95
10014198:	dc0b      	bgt.n	100141b2 <__aeabi_f2iz+0x36>
1001419a:	2096      	movs	r0, #150	; 0x96
1001419c:	1ac3      	subs	r3, r0, r3
1001419e:	40d9      	lsrs	r1, r3
100141a0:	000b      	movs	r3, r1
100141a2:	4258      	negs	r0, r3
100141a4:	2a00      	cmp	r2, #0
100141a6:	d100      	bne.n	100141aa <__aeabi_f2iz+0x2e>
100141a8:	0018      	movs	r0, r3
100141aa:	4770      	bx	lr
100141ac:	4b03      	ldr	r3, [pc, #12]	; (100141bc <__aeabi_f2iz+0x40>)
100141ae:	18d0      	adds	r0, r2, r3
100141b0:	e7fb      	b.n	100141aa <__aeabi_f2iz+0x2e>
100141b2:	3b96      	subs	r3, #150	; 0x96
100141b4:	4099      	lsls	r1, r3
100141b6:	000b      	movs	r3, r1
100141b8:	e7f3      	b.n	100141a2 <__aeabi_f2iz+0x26>
100141ba:	46c0      	nop			; (mov r8, r8)
100141bc:	7fffffff 	.word	0x7fffffff

100141c0 <__aeabi_i2f>:
100141c0:	b570      	push	{r4, r5, r6, lr}
100141c2:	2800      	cmp	r0, #0
100141c4:	d030      	beq.n	10014228 <__aeabi_i2f+0x68>
100141c6:	17c3      	asrs	r3, r0, #31
100141c8:	18c5      	adds	r5, r0, r3
100141ca:	405d      	eors	r5, r3
100141cc:	0fc4      	lsrs	r4, r0, #31
100141ce:	0028      	movs	r0, r5
100141d0:	f000 ffc6 	bl	10015160 <__clzsi2>
100141d4:	239e      	movs	r3, #158	; 0x9e
100141d6:	1a1b      	subs	r3, r3, r0
100141d8:	2b96      	cmp	r3, #150	; 0x96
100141da:	dc0d      	bgt.n	100141f8 <__aeabi_i2f+0x38>
100141dc:	2296      	movs	r2, #150	; 0x96
100141de:	1ad2      	subs	r2, r2, r3
100141e0:	4095      	lsls	r5, r2
100141e2:	026a      	lsls	r2, r5, #9
100141e4:	0a52      	lsrs	r2, r2, #9
100141e6:	b2d8      	uxtb	r0, r3
100141e8:	0252      	lsls	r2, r2, #9
100141ea:	05c0      	lsls	r0, r0, #23
100141ec:	0a52      	lsrs	r2, r2, #9
100141ee:	07e4      	lsls	r4, r4, #31
100141f0:	4302      	orrs	r2, r0
100141f2:	4322      	orrs	r2, r4
100141f4:	0010      	movs	r0, r2
100141f6:	bd70      	pop	{r4, r5, r6, pc}
100141f8:	2b99      	cmp	r3, #153	; 0x99
100141fa:	dc19      	bgt.n	10014230 <__aeabi_i2f+0x70>
100141fc:	2299      	movs	r2, #153	; 0x99
100141fe:	1ad2      	subs	r2, r2, r3
10014200:	4095      	lsls	r5, r2
10014202:	4a12      	ldr	r2, [pc, #72]	; (1001424c <__aeabi_i2f+0x8c>)
10014204:	402a      	ands	r2, r5
10014206:	0769      	lsls	r1, r5, #29
10014208:	d004      	beq.n	10014214 <__aeabi_i2f+0x54>
1001420a:	210f      	movs	r1, #15
1001420c:	400d      	ands	r5, r1
1001420e:	2d04      	cmp	r5, #4
10014210:	d000      	beq.n	10014214 <__aeabi_i2f+0x54>
10014212:	3204      	adds	r2, #4
10014214:	0151      	lsls	r1, r2, #5
10014216:	d503      	bpl.n	10014220 <__aeabi_i2f+0x60>
10014218:	4b0c      	ldr	r3, [pc, #48]	; (1001424c <__aeabi_i2f+0x8c>)
1001421a:	401a      	ands	r2, r3
1001421c:	239f      	movs	r3, #159	; 0x9f
1001421e:	1a1b      	subs	r3, r3, r0
10014220:	0192      	lsls	r2, r2, #6
10014222:	0a52      	lsrs	r2, r2, #9
10014224:	b2d8      	uxtb	r0, r3
10014226:	e7df      	b.n	100141e8 <__aeabi_i2f+0x28>
10014228:	2400      	movs	r4, #0
1001422a:	2000      	movs	r0, #0
1001422c:	2200      	movs	r2, #0
1001422e:	e7db      	b.n	100141e8 <__aeabi_i2f+0x28>
10014230:	2205      	movs	r2, #5
10014232:	002e      	movs	r6, r5
10014234:	1a12      	subs	r2, r2, r0
10014236:	21b9      	movs	r1, #185	; 0xb9
10014238:	40d6      	lsrs	r6, r2
1001423a:	002a      	movs	r2, r5
1001423c:	1ac9      	subs	r1, r1, r3
1001423e:	408a      	lsls	r2, r1
10014240:	1e55      	subs	r5, r2, #1
10014242:	41aa      	sbcs	r2, r5
10014244:	0035      	movs	r5, r6
10014246:	4315      	orrs	r5, r2
10014248:	e7db      	b.n	10014202 <__aeabi_i2f+0x42>
1001424a:	46c0      	nop			; (mov r8, r8)
1001424c:	fbffffff 	.word	0xfbffffff

10014250 <__aeabi_ui2f>:
10014250:	b570      	push	{r4, r5, r6, lr}
10014252:	1e04      	subs	r4, r0, #0
10014254:	d028      	beq.n	100142a8 <__aeabi_ui2f+0x58>
10014256:	f000 ff83 	bl	10015160 <__clzsi2>
1001425a:	239e      	movs	r3, #158	; 0x9e
1001425c:	1a1b      	subs	r3, r3, r0
1001425e:	2b96      	cmp	r3, #150	; 0x96
10014260:	dc0a      	bgt.n	10014278 <__aeabi_ui2f+0x28>
10014262:	2296      	movs	r2, #150	; 0x96
10014264:	1ad2      	subs	r2, r2, r3
10014266:	4094      	lsls	r4, r2
10014268:	0262      	lsls	r2, r4, #9
1001426a:	0a52      	lsrs	r2, r2, #9
1001426c:	b2d8      	uxtb	r0, r3
1001426e:	0252      	lsls	r2, r2, #9
10014270:	0a52      	lsrs	r2, r2, #9
10014272:	05c0      	lsls	r0, r0, #23
10014274:	4310      	orrs	r0, r2
10014276:	bd70      	pop	{r4, r5, r6, pc}
10014278:	2b99      	cmp	r3, #153	; 0x99
1001427a:	dc18      	bgt.n	100142ae <__aeabi_ui2f+0x5e>
1001427c:	2299      	movs	r2, #153	; 0x99
1001427e:	1ad2      	subs	r2, r2, r3
10014280:	4094      	lsls	r4, r2
10014282:	4a11      	ldr	r2, [pc, #68]	; (100142c8 <__aeabi_ui2f+0x78>)
10014284:	4022      	ands	r2, r4
10014286:	0761      	lsls	r1, r4, #29
10014288:	d004      	beq.n	10014294 <__aeabi_ui2f+0x44>
1001428a:	210f      	movs	r1, #15
1001428c:	400c      	ands	r4, r1
1001428e:	2c04      	cmp	r4, #4
10014290:	d000      	beq.n	10014294 <__aeabi_ui2f+0x44>
10014292:	3204      	adds	r2, #4
10014294:	0151      	lsls	r1, r2, #5
10014296:	d503      	bpl.n	100142a0 <__aeabi_ui2f+0x50>
10014298:	4b0b      	ldr	r3, [pc, #44]	; (100142c8 <__aeabi_ui2f+0x78>)
1001429a:	401a      	ands	r2, r3
1001429c:	239f      	movs	r3, #159	; 0x9f
1001429e:	1a1b      	subs	r3, r3, r0
100142a0:	0192      	lsls	r2, r2, #6
100142a2:	0a52      	lsrs	r2, r2, #9
100142a4:	b2d8      	uxtb	r0, r3
100142a6:	e7e2      	b.n	1001426e <__aeabi_ui2f+0x1e>
100142a8:	2000      	movs	r0, #0
100142aa:	2200      	movs	r2, #0
100142ac:	e7df      	b.n	1001426e <__aeabi_ui2f+0x1e>
100142ae:	2205      	movs	r2, #5
100142b0:	0025      	movs	r5, r4
100142b2:	1a12      	subs	r2, r2, r0
100142b4:	21b9      	movs	r1, #185	; 0xb9
100142b6:	40d5      	lsrs	r5, r2
100142b8:	0022      	movs	r2, r4
100142ba:	1ac9      	subs	r1, r1, r3
100142bc:	408a      	lsls	r2, r1
100142be:	1e54      	subs	r4, r2, #1
100142c0:	41a2      	sbcs	r2, r4
100142c2:	002c      	movs	r4, r5
100142c4:	4314      	orrs	r4, r2
100142c6:	e7dc      	b.n	10014282 <__aeabi_ui2f+0x32>
100142c8:	fbffffff 	.word	0xfbffffff

100142cc <__eqdf2>:
100142cc:	b5f0      	push	{r4, r5, r6, r7, lr}
100142ce:	465f      	mov	r7, fp
100142d0:	4656      	mov	r6, sl
100142d2:	464d      	mov	r5, r9
100142d4:	4644      	mov	r4, r8
100142d6:	b4f0      	push	{r4, r5, r6, r7}
100142d8:	031f      	lsls	r7, r3, #12
100142da:	005c      	lsls	r4, r3, #1
100142dc:	0fdb      	lsrs	r3, r3, #31
100142de:	469a      	mov	sl, r3
100142e0:	4b19      	ldr	r3, [pc, #100]	; (10014348 <__eqdf2+0x7c>)
100142e2:	030e      	lsls	r6, r1, #12
100142e4:	004d      	lsls	r5, r1, #1
100142e6:	0fc9      	lsrs	r1, r1, #31
100142e8:	4680      	mov	r8, r0
100142ea:	0b36      	lsrs	r6, r6, #12
100142ec:	0d6d      	lsrs	r5, r5, #21
100142ee:	468b      	mov	fp, r1
100142f0:	4691      	mov	r9, r2
100142f2:	0b3f      	lsrs	r7, r7, #12
100142f4:	0d64      	lsrs	r4, r4, #21
100142f6:	429d      	cmp	r5, r3
100142f8:	d019      	beq.n	1001432e <__eqdf2+0x62>
100142fa:	4b13      	ldr	r3, [pc, #76]	; (10014348 <__eqdf2+0x7c>)
100142fc:	429c      	cmp	r4, r3
100142fe:	d01b      	beq.n	10014338 <__eqdf2+0x6c>
10014300:	2301      	movs	r3, #1
10014302:	42a5      	cmp	r5, r4
10014304:	d006      	beq.n	10014314 <__eqdf2+0x48>
10014306:	0018      	movs	r0, r3
10014308:	bc3c      	pop	{r2, r3, r4, r5}
1001430a:	4690      	mov	r8, r2
1001430c:	4699      	mov	r9, r3
1001430e:	46a2      	mov	sl, r4
10014310:	46ab      	mov	fp, r5
10014312:	bdf0      	pop	{r4, r5, r6, r7, pc}
10014314:	42be      	cmp	r6, r7
10014316:	d1f6      	bne.n	10014306 <__eqdf2+0x3a>
10014318:	45c8      	cmp	r8, r9
1001431a:	d1f4      	bne.n	10014306 <__eqdf2+0x3a>
1001431c:	45d3      	cmp	fp, sl
1001431e:	d010      	beq.n	10014342 <__eqdf2+0x76>
10014320:	2d00      	cmp	r5, #0
10014322:	d1f0      	bne.n	10014306 <__eqdf2+0x3a>
10014324:	4330      	orrs	r0, r6
10014326:	0003      	movs	r3, r0
10014328:	1e5a      	subs	r2, r3, #1
1001432a:	4193      	sbcs	r3, r2
1001432c:	e7eb      	b.n	10014306 <__eqdf2+0x3a>
1001432e:	0031      	movs	r1, r6
10014330:	2301      	movs	r3, #1
10014332:	4301      	orrs	r1, r0
10014334:	d1e7      	bne.n	10014306 <__eqdf2+0x3a>
10014336:	e7e0      	b.n	100142fa <__eqdf2+0x2e>
10014338:	433a      	orrs	r2, r7
1001433a:	2301      	movs	r3, #1
1001433c:	2a00      	cmp	r2, #0
1001433e:	d1e2      	bne.n	10014306 <__eqdf2+0x3a>
10014340:	e7de      	b.n	10014300 <__eqdf2+0x34>
10014342:	2300      	movs	r3, #0
10014344:	e7df      	b.n	10014306 <__eqdf2+0x3a>
10014346:	46c0      	nop			; (mov r8, r8)
10014348:	000007ff 	.word	0x000007ff

1001434c <__gedf2>:
1001434c:	b5f0      	push	{r4, r5, r6, r7, lr}
1001434e:	465f      	mov	r7, fp
10014350:	4644      	mov	r4, r8
10014352:	4656      	mov	r6, sl
10014354:	464d      	mov	r5, r9
10014356:	b4f0      	push	{r4, r5, r6, r7}
10014358:	031f      	lsls	r7, r3, #12
1001435a:	0b3c      	lsrs	r4, r7, #12
1001435c:	4f2c      	ldr	r7, [pc, #176]	; (10014410 <__gedf2+0xc4>)
1001435e:	030e      	lsls	r6, r1, #12
10014360:	004d      	lsls	r5, r1, #1
10014362:	46a3      	mov	fp, r4
10014364:	005c      	lsls	r4, r3, #1
10014366:	4684      	mov	ip, r0
10014368:	0b36      	lsrs	r6, r6, #12
1001436a:	0d6d      	lsrs	r5, r5, #21
1001436c:	0fc9      	lsrs	r1, r1, #31
1001436e:	4690      	mov	r8, r2
10014370:	0d64      	lsrs	r4, r4, #21
10014372:	0fdb      	lsrs	r3, r3, #31
10014374:	42bd      	cmp	r5, r7
10014376:	d02b      	beq.n	100143d0 <__gedf2+0x84>
10014378:	4f25      	ldr	r7, [pc, #148]	; (10014410 <__gedf2+0xc4>)
1001437a:	42bc      	cmp	r4, r7
1001437c:	d02e      	beq.n	100143dc <__gedf2+0x90>
1001437e:	2d00      	cmp	r5, #0
10014380:	d10e      	bne.n	100143a0 <__gedf2+0x54>
10014382:	4330      	orrs	r0, r6
10014384:	0007      	movs	r7, r0
10014386:	4681      	mov	r9, r0
10014388:	4278      	negs	r0, r7
1001438a:	4178      	adcs	r0, r7
1001438c:	2c00      	cmp	r4, #0
1001438e:	d117      	bne.n	100143c0 <__gedf2+0x74>
10014390:	465f      	mov	r7, fp
10014392:	433a      	orrs	r2, r7
10014394:	d114      	bne.n	100143c0 <__gedf2+0x74>
10014396:	464b      	mov	r3, r9
10014398:	2000      	movs	r0, #0
1001439a:	2b00      	cmp	r3, #0
1001439c:	d00a      	beq.n	100143b4 <__gedf2+0x68>
1001439e:	e006      	b.n	100143ae <__gedf2+0x62>
100143a0:	2c00      	cmp	r4, #0
100143a2:	d102      	bne.n	100143aa <__gedf2+0x5e>
100143a4:	4658      	mov	r0, fp
100143a6:	4302      	orrs	r2, r0
100143a8:	d001      	beq.n	100143ae <__gedf2+0x62>
100143aa:	4299      	cmp	r1, r3
100143ac:	d01a      	beq.n	100143e4 <__gedf2+0x98>
100143ae:	2301      	movs	r3, #1
100143b0:	4248      	negs	r0, r1
100143b2:	4318      	orrs	r0, r3
100143b4:	bc3c      	pop	{r2, r3, r4, r5}
100143b6:	4690      	mov	r8, r2
100143b8:	4699      	mov	r9, r3
100143ba:	46a2      	mov	sl, r4
100143bc:	46ab      	mov	fp, r5
100143be:	bdf0      	pop	{r4, r5, r6, r7, pc}
100143c0:	2800      	cmp	r0, #0
100143c2:	d0f2      	beq.n	100143aa <__gedf2+0x5e>
100143c4:	4258      	negs	r0, r3
100143c6:	4158      	adcs	r0, r3
100143c8:	2201      	movs	r2, #1
100143ca:	4240      	negs	r0, r0
100143cc:	4310      	orrs	r0, r2
100143ce:	e7f1      	b.n	100143b4 <__gedf2+0x68>
100143d0:	0037      	movs	r7, r6
100143d2:	4307      	orrs	r7, r0
100143d4:	d0d0      	beq.n	10014378 <__gedf2+0x2c>
100143d6:	2002      	movs	r0, #2
100143d8:	4240      	negs	r0, r0
100143da:	e7eb      	b.n	100143b4 <__gedf2+0x68>
100143dc:	465f      	mov	r7, fp
100143de:	4317      	orrs	r7, r2
100143e0:	d0cd      	beq.n	1001437e <__gedf2+0x32>
100143e2:	e7f8      	b.n	100143d6 <__gedf2+0x8a>
100143e4:	42a5      	cmp	r5, r4
100143e6:	dce2      	bgt.n	100143ae <__gedf2+0x62>
100143e8:	db05      	blt.n	100143f6 <__gedf2+0xaa>
100143ea:	455e      	cmp	r6, fp
100143ec:	d8df      	bhi.n	100143ae <__gedf2+0x62>
100143ee:	d008      	beq.n	10014402 <__gedf2+0xb6>
100143f0:	2000      	movs	r0, #0
100143f2:	455e      	cmp	r6, fp
100143f4:	d2de      	bcs.n	100143b4 <__gedf2+0x68>
100143f6:	4248      	negs	r0, r1
100143f8:	4148      	adcs	r0, r1
100143fa:	2301      	movs	r3, #1
100143fc:	4240      	negs	r0, r0
100143fe:	4318      	orrs	r0, r3
10014400:	e7d8      	b.n	100143b4 <__gedf2+0x68>
10014402:	45c4      	cmp	ip, r8
10014404:	d8d3      	bhi.n	100143ae <__gedf2+0x62>
10014406:	2000      	movs	r0, #0
10014408:	45c4      	cmp	ip, r8
1001440a:	d3f4      	bcc.n	100143f6 <__gedf2+0xaa>
1001440c:	e7d2      	b.n	100143b4 <__gedf2+0x68>
1001440e:	46c0      	nop			; (mov r8, r8)
10014410:	000007ff 	.word	0x000007ff

10014414 <__ledf2>:
10014414:	b5f0      	push	{r4, r5, r6, r7, lr}
10014416:	465f      	mov	r7, fp
10014418:	464d      	mov	r5, r9
1001441a:	4644      	mov	r4, r8
1001441c:	4656      	mov	r6, sl
1001441e:	b4f0      	push	{r4, r5, r6, r7}
10014420:	031c      	lsls	r4, r3, #12
10014422:	0b24      	lsrs	r4, r4, #12
10014424:	46a4      	mov	ip, r4
10014426:	4c2f      	ldr	r4, [pc, #188]	; (100144e4 <__ledf2+0xd0>)
10014428:	030f      	lsls	r7, r1, #12
1001442a:	004d      	lsls	r5, r1, #1
1001442c:	005e      	lsls	r6, r3, #1
1001442e:	0fc9      	lsrs	r1, r1, #31
10014430:	4680      	mov	r8, r0
10014432:	0b3f      	lsrs	r7, r7, #12
10014434:	0d6d      	lsrs	r5, r5, #21
10014436:	468b      	mov	fp, r1
10014438:	4691      	mov	r9, r2
1001443a:	0d76      	lsrs	r6, r6, #21
1001443c:	0fdb      	lsrs	r3, r3, #31
1001443e:	42a5      	cmp	r5, r4
10014440:	d020      	beq.n	10014484 <__ledf2+0x70>
10014442:	4c28      	ldr	r4, [pc, #160]	; (100144e4 <__ledf2+0xd0>)
10014444:	42a6      	cmp	r6, r4
10014446:	d022      	beq.n	1001448e <__ledf2+0x7a>
10014448:	2d00      	cmp	r5, #0
1001444a:	d112      	bne.n	10014472 <__ledf2+0x5e>
1001444c:	4338      	orrs	r0, r7
1001444e:	4244      	negs	r4, r0
10014450:	4144      	adcs	r4, r0
10014452:	2e00      	cmp	r6, #0
10014454:	d020      	beq.n	10014498 <__ledf2+0x84>
10014456:	2c00      	cmp	r4, #0
10014458:	d00d      	beq.n	10014476 <__ledf2+0x62>
1001445a:	425c      	negs	r4, r3
1001445c:	4163      	adcs	r3, r4
1001445e:	2401      	movs	r4, #1
10014460:	425b      	negs	r3, r3
10014462:	431c      	orrs	r4, r3
10014464:	0020      	movs	r0, r4
10014466:	bc3c      	pop	{r2, r3, r4, r5}
10014468:	4690      	mov	r8, r2
1001446a:	4699      	mov	r9, r3
1001446c:	46a2      	mov	sl, r4
1001446e:	46ab      	mov	fp, r5
10014470:	bdf0      	pop	{r4, r5, r6, r7, pc}
10014472:	2e00      	cmp	r6, #0
10014474:	d017      	beq.n	100144a6 <__ledf2+0x92>
10014476:	455b      	cmp	r3, fp
10014478:	d019      	beq.n	100144ae <__ledf2+0x9a>
1001447a:	465b      	mov	r3, fp
1001447c:	425c      	negs	r4, r3
1001447e:	2301      	movs	r3, #1
10014480:	431c      	orrs	r4, r3
10014482:	e7ef      	b.n	10014464 <__ledf2+0x50>
10014484:	0039      	movs	r1, r7
10014486:	2402      	movs	r4, #2
10014488:	4301      	orrs	r1, r0
1001448a:	d1eb      	bne.n	10014464 <__ledf2+0x50>
1001448c:	e7d9      	b.n	10014442 <__ledf2+0x2e>
1001448e:	4661      	mov	r1, ip
10014490:	2402      	movs	r4, #2
10014492:	4311      	orrs	r1, r2
10014494:	d1e6      	bne.n	10014464 <__ledf2+0x50>
10014496:	e7d7      	b.n	10014448 <__ledf2+0x34>
10014498:	4661      	mov	r1, ip
1001449a:	430a      	orrs	r2, r1
1001449c:	d1db      	bne.n	10014456 <__ledf2+0x42>
1001449e:	2400      	movs	r4, #0
100144a0:	2800      	cmp	r0, #0
100144a2:	d0df      	beq.n	10014464 <__ledf2+0x50>
100144a4:	e7e9      	b.n	1001447a <__ledf2+0x66>
100144a6:	4661      	mov	r1, ip
100144a8:	430a      	orrs	r2, r1
100144aa:	d1e4      	bne.n	10014476 <__ledf2+0x62>
100144ac:	e7e5      	b.n	1001447a <__ledf2+0x66>
100144ae:	42b5      	cmp	r5, r6
100144b0:	dd03      	ble.n	100144ba <__ledf2+0xa6>
100144b2:	2201      	movs	r2, #1
100144b4:	425c      	negs	r4, r3
100144b6:	4314      	orrs	r4, r2
100144b8:	e7d4      	b.n	10014464 <__ledf2+0x50>
100144ba:	42b5      	cmp	r5, r6
100144bc:	dbcd      	blt.n	1001445a <__ledf2+0x46>
100144be:	4567      	cmp	r7, ip
100144c0:	d8db      	bhi.n	1001447a <__ledf2+0x66>
100144c2:	d009      	beq.n	100144d8 <__ledf2+0xc4>
100144c4:	2400      	movs	r4, #0
100144c6:	4567      	cmp	r7, ip
100144c8:	d2cc      	bcs.n	10014464 <__ledf2+0x50>
100144ca:	4659      	mov	r1, fp
100144cc:	424c      	negs	r4, r1
100144ce:	4161      	adcs	r1, r4
100144d0:	2401      	movs	r4, #1
100144d2:	4249      	negs	r1, r1
100144d4:	430c      	orrs	r4, r1
100144d6:	e7c5      	b.n	10014464 <__ledf2+0x50>
100144d8:	45c8      	cmp	r8, r9
100144da:	d8ce      	bhi.n	1001447a <__ledf2+0x66>
100144dc:	2400      	movs	r4, #0
100144de:	45c8      	cmp	r8, r9
100144e0:	d3f3      	bcc.n	100144ca <__ledf2+0xb6>
100144e2:	e7bf      	b.n	10014464 <__ledf2+0x50>
100144e4:	000007ff 	.word	0x000007ff

100144e8 <__aeabi_dmul>:
100144e8:	b5f0      	push	{r4, r5, r6, r7, lr}
100144ea:	465f      	mov	r7, fp
100144ec:	4656      	mov	r6, sl
100144ee:	464d      	mov	r5, r9
100144f0:	4644      	mov	r4, r8
100144f2:	b4f0      	push	{r4, r5, r6, r7}
100144f4:	030d      	lsls	r5, r1, #12
100144f6:	4699      	mov	r9, r3
100144f8:	004e      	lsls	r6, r1, #1
100144fa:	0b2b      	lsrs	r3, r5, #12
100144fc:	b087      	sub	sp, #28
100144fe:	0007      	movs	r7, r0
10014500:	4692      	mov	sl, r2
10014502:	4680      	mov	r8, r0
10014504:	469b      	mov	fp, r3
10014506:	0d76      	lsrs	r6, r6, #21
10014508:	0fcc      	lsrs	r4, r1, #31
1001450a:	2e00      	cmp	r6, #0
1001450c:	d069      	beq.n	100145e2 <__aeabi_dmul+0xfa>
1001450e:	4b6d      	ldr	r3, [pc, #436]	; (100146c4 <__aeabi_dmul+0x1dc>)
10014510:	429e      	cmp	r6, r3
10014512:	d035      	beq.n	10014580 <__aeabi_dmul+0x98>
10014514:	465b      	mov	r3, fp
10014516:	2280      	movs	r2, #128	; 0x80
10014518:	00dd      	lsls	r5, r3, #3
1001451a:	0412      	lsls	r2, r2, #16
1001451c:	0f43      	lsrs	r3, r0, #29
1001451e:	4313      	orrs	r3, r2
10014520:	432b      	orrs	r3, r5
10014522:	469b      	mov	fp, r3
10014524:	00c3      	lsls	r3, r0, #3
10014526:	4698      	mov	r8, r3
10014528:	4b67      	ldr	r3, [pc, #412]	; (100146c8 <__aeabi_dmul+0x1e0>)
1001452a:	2700      	movs	r7, #0
1001452c:	469c      	mov	ip, r3
1001452e:	2300      	movs	r3, #0
10014530:	4466      	add	r6, ip
10014532:	9301      	str	r3, [sp, #4]
10014534:	464a      	mov	r2, r9
10014536:	0315      	lsls	r5, r2, #12
10014538:	0050      	lsls	r0, r2, #1
1001453a:	0fd2      	lsrs	r2, r2, #31
1001453c:	4653      	mov	r3, sl
1001453e:	0b2d      	lsrs	r5, r5, #12
10014540:	0d40      	lsrs	r0, r0, #21
10014542:	4691      	mov	r9, r2
10014544:	d100      	bne.n	10014548 <__aeabi_dmul+0x60>
10014546:	e076      	b.n	10014636 <__aeabi_dmul+0x14e>
10014548:	4a5e      	ldr	r2, [pc, #376]	; (100146c4 <__aeabi_dmul+0x1dc>)
1001454a:	4290      	cmp	r0, r2
1001454c:	d06c      	beq.n	10014628 <__aeabi_dmul+0x140>
1001454e:	2280      	movs	r2, #128	; 0x80
10014550:	0f5b      	lsrs	r3, r3, #29
10014552:	0412      	lsls	r2, r2, #16
10014554:	4313      	orrs	r3, r2
10014556:	4a5c      	ldr	r2, [pc, #368]	; (100146c8 <__aeabi_dmul+0x1e0>)
10014558:	00ed      	lsls	r5, r5, #3
1001455a:	4694      	mov	ip, r2
1001455c:	431d      	orrs	r5, r3
1001455e:	4653      	mov	r3, sl
10014560:	2200      	movs	r2, #0
10014562:	00db      	lsls	r3, r3, #3
10014564:	4460      	add	r0, ip
10014566:	4649      	mov	r1, r9
10014568:	1836      	adds	r6, r6, r0
1001456a:	1c70      	adds	r0, r6, #1
1001456c:	4061      	eors	r1, r4
1001456e:	9002      	str	r0, [sp, #8]
10014570:	4317      	orrs	r7, r2
10014572:	2f0f      	cmp	r7, #15
10014574:	d900      	bls.n	10014578 <__aeabi_dmul+0x90>
10014576:	e0af      	b.n	100146d8 <__aeabi_dmul+0x1f0>
10014578:	4854      	ldr	r0, [pc, #336]	; (100146cc <__aeabi_dmul+0x1e4>)
1001457a:	00bf      	lsls	r7, r7, #2
1001457c:	59c7      	ldr	r7, [r0, r7]
1001457e:	46bf      	mov	pc, r7
10014580:	465b      	mov	r3, fp
10014582:	431f      	orrs	r7, r3
10014584:	d000      	beq.n	10014588 <__aeabi_dmul+0xa0>
10014586:	e088      	b.n	1001469a <__aeabi_dmul+0x1b2>
10014588:	2300      	movs	r3, #0
1001458a:	469b      	mov	fp, r3
1001458c:	4698      	mov	r8, r3
1001458e:	3302      	adds	r3, #2
10014590:	2708      	movs	r7, #8
10014592:	9301      	str	r3, [sp, #4]
10014594:	e7ce      	b.n	10014534 <__aeabi_dmul+0x4c>
10014596:	4649      	mov	r1, r9
10014598:	2a02      	cmp	r2, #2
1001459a:	d06a      	beq.n	10014672 <__aeabi_dmul+0x18a>
1001459c:	2a03      	cmp	r2, #3
1001459e:	d100      	bne.n	100145a2 <__aeabi_dmul+0xba>
100145a0:	e209      	b.n	100149b6 <__aeabi_dmul+0x4ce>
100145a2:	2a01      	cmp	r2, #1
100145a4:	d000      	beq.n	100145a8 <__aeabi_dmul+0xc0>
100145a6:	e1bb      	b.n	10014920 <__aeabi_dmul+0x438>
100145a8:	4011      	ands	r1, r2
100145aa:	2200      	movs	r2, #0
100145ac:	2300      	movs	r3, #0
100145ae:	2500      	movs	r5, #0
100145b0:	4690      	mov	r8, r2
100145b2:	b2cc      	uxtb	r4, r1
100145b4:	2100      	movs	r1, #0
100145b6:	032d      	lsls	r5, r5, #12
100145b8:	0d0a      	lsrs	r2, r1, #20
100145ba:	0512      	lsls	r2, r2, #20
100145bc:	0b2d      	lsrs	r5, r5, #12
100145be:	4315      	orrs	r5, r2
100145c0:	4a43      	ldr	r2, [pc, #268]	; (100146d0 <__aeabi_dmul+0x1e8>)
100145c2:	051b      	lsls	r3, r3, #20
100145c4:	4015      	ands	r5, r2
100145c6:	431d      	orrs	r5, r3
100145c8:	006d      	lsls	r5, r5, #1
100145ca:	07e4      	lsls	r4, r4, #31
100145cc:	086d      	lsrs	r5, r5, #1
100145ce:	4325      	orrs	r5, r4
100145d0:	4640      	mov	r0, r8
100145d2:	0029      	movs	r1, r5
100145d4:	b007      	add	sp, #28
100145d6:	bc3c      	pop	{r2, r3, r4, r5}
100145d8:	4690      	mov	r8, r2
100145da:	4699      	mov	r9, r3
100145dc:	46a2      	mov	sl, r4
100145de:	46ab      	mov	fp, r5
100145e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
100145e2:	4303      	orrs	r3, r0
100145e4:	d052      	beq.n	1001468c <__aeabi_dmul+0x1a4>
100145e6:	465b      	mov	r3, fp
100145e8:	2b00      	cmp	r3, #0
100145ea:	d100      	bne.n	100145ee <__aeabi_dmul+0x106>
100145ec:	e18a      	b.n	10014904 <__aeabi_dmul+0x41c>
100145ee:	4658      	mov	r0, fp
100145f0:	f000 fdb6 	bl	10015160 <__clzsi2>
100145f4:	0003      	movs	r3, r0
100145f6:	3b0b      	subs	r3, #11
100145f8:	2b1c      	cmp	r3, #28
100145fa:	dd00      	ble.n	100145fe <__aeabi_dmul+0x116>
100145fc:	e17b      	b.n	100148f6 <__aeabi_dmul+0x40e>
100145fe:	221d      	movs	r2, #29
10014600:	1ad3      	subs	r3, r2, r3
10014602:	003a      	movs	r2, r7
10014604:	0001      	movs	r1, r0
10014606:	465d      	mov	r5, fp
10014608:	40da      	lsrs	r2, r3
1001460a:	3908      	subs	r1, #8
1001460c:	408d      	lsls	r5, r1
1001460e:	0013      	movs	r3, r2
10014610:	408f      	lsls	r7, r1
10014612:	432b      	orrs	r3, r5
10014614:	469b      	mov	fp, r3
10014616:	46b8      	mov	r8, r7
10014618:	4b2e      	ldr	r3, [pc, #184]	; (100146d4 <__aeabi_dmul+0x1ec>)
1001461a:	2700      	movs	r7, #0
1001461c:	469c      	mov	ip, r3
1001461e:	2300      	movs	r3, #0
10014620:	4460      	add	r0, ip
10014622:	4246      	negs	r6, r0
10014624:	9301      	str	r3, [sp, #4]
10014626:	e785      	b.n	10014534 <__aeabi_dmul+0x4c>
10014628:	4652      	mov	r2, sl
1001462a:	432a      	orrs	r2, r5
1001462c:	d12c      	bne.n	10014688 <__aeabi_dmul+0x1a0>
1001462e:	2500      	movs	r5, #0
10014630:	2300      	movs	r3, #0
10014632:	2202      	movs	r2, #2
10014634:	e797      	b.n	10014566 <__aeabi_dmul+0x7e>
10014636:	4652      	mov	r2, sl
10014638:	432a      	orrs	r2, r5
1001463a:	d021      	beq.n	10014680 <__aeabi_dmul+0x198>
1001463c:	2d00      	cmp	r5, #0
1001463e:	d100      	bne.n	10014642 <__aeabi_dmul+0x15a>
10014640:	e154      	b.n	100148ec <__aeabi_dmul+0x404>
10014642:	0028      	movs	r0, r5
10014644:	f000 fd8c 	bl	10015160 <__clzsi2>
10014648:	0003      	movs	r3, r0
1001464a:	3b0b      	subs	r3, #11
1001464c:	2b1c      	cmp	r3, #28
1001464e:	dd00      	ble.n	10014652 <__aeabi_dmul+0x16a>
10014650:	e146      	b.n	100148e0 <__aeabi_dmul+0x3f8>
10014652:	211d      	movs	r1, #29
10014654:	1acb      	subs	r3, r1, r3
10014656:	4651      	mov	r1, sl
10014658:	0002      	movs	r2, r0
1001465a:	40d9      	lsrs	r1, r3
1001465c:	4653      	mov	r3, sl
1001465e:	3a08      	subs	r2, #8
10014660:	4095      	lsls	r5, r2
10014662:	4093      	lsls	r3, r2
10014664:	430d      	orrs	r5, r1
10014666:	4a1b      	ldr	r2, [pc, #108]	; (100146d4 <__aeabi_dmul+0x1ec>)
10014668:	4694      	mov	ip, r2
1001466a:	4460      	add	r0, ip
1001466c:	4240      	negs	r0, r0
1001466e:	2200      	movs	r2, #0
10014670:	e779      	b.n	10014566 <__aeabi_dmul+0x7e>
10014672:	2401      	movs	r4, #1
10014674:	2200      	movs	r2, #0
10014676:	400c      	ands	r4, r1
10014678:	4b12      	ldr	r3, [pc, #72]	; (100146c4 <__aeabi_dmul+0x1dc>)
1001467a:	2500      	movs	r5, #0
1001467c:	4690      	mov	r8, r2
1001467e:	e799      	b.n	100145b4 <__aeabi_dmul+0xcc>
10014680:	2500      	movs	r5, #0
10014682:	2300      	movs	r3, #0
10014684:	2201      	movs	r2, #1
10014686:	e76e      	b.n	10014566 <__aeabi_dmul+0x7e>
10014688:	2203      	movs	r2, #3
1001468a:	e76c      	b.n	10014566 <__aeabi_dmul+0x7e>
1001468c:	2300      	movs	r3, #0
1001468e:	469b      	mov	fp, r3
10014690:	4698      	mov	r8, r3
10014692:	3301      	adds	r3, #1
10014694:	2704      	movs	r7, #4
10014696:	9301      	str	r3, [sp, #4]
10014698:	e74c      	b.n	10014534 <__aeabi_dmul+0x4c>
1001469a:	2303      	movs	r3, #3
1001469c:	270c      	movs	r7, #12
1001469e:	9301      	str	r3, [sp, #4]
100146a0:	e748      	b.n	10014534 <__aeabi_dmul+0x4c>
100146a2:	2300      	movs	r3, #0
100146a4:	2580      	movs	r5, #128	; 0x80
100146a6:	4698      	mov	r8, r3
100146a8:	2400      	movs	r4, #0
100146aa:	032d      	lsls	r5, r5, #12
100146ac:	4b05      	ldr	r3, [pc, #20]	; (100146c4 <__aeabi_dmul+0x1dc>)
100146ae:	e781      	b.n	100145b4 <__aeabi_dmul+0xcc>
100146b0:	465d      	mov	r5, fp
100146b2:	4643      	mov	r3, r8
100146b4:	9a01      	ldr	r2, [sp, #4]
100146b6:	e76f      	b.n	10014598 <__aeabi_dmul+0xb0>
100146b8:	465d      	mov	r5, fp
100146ba:	4643      	mov	r3, r8
100146bc:	0021      	movs	r1, r4
100146be:	9a01      	ldr	r2, [sp, #4]
100146c0:	e76a      	b.n	10014598 <__aeabi_dmul+0xb0>
100146c2:	46c0      	nop			; (mov r8, r8)
100146c4:	000007ff 	.word	0x000007ff
100146c8:	fffffc01 	.word	0xfffffc01
100146cc:	10018504 	.word	0x10018504
100146d0:	800fffff 	.word	0x800fffff
100146d4:	000003f3 	.word	0x000003f3
100146d8:	4642      	mov	r2, r8
100146da:	0c12      	lsrs	r2, r2, #16
100146dc:	4691      	mov	r9, r2
100146de:	0c1a      	lsrs	r2, r3, #16
100146e0:	4694      	mov	ip, r2
100146e2:	4642      	mov	r2, r8
100146e4:	0417      	lsls	r7, r2, #16
100146e6:	464a      	mov	r2, r9
100146e8:	041b      	lsls	r3, r3, #16
100146ea:	0c1b      	lsrs	r3, r3, #16
100146ec:	435a      	muls	r2, r3
100146ee:	4660      	mov	r0, ip
100146f0:	4690      	mov	r8, r2
100146f2:	464a      	mov	r2, r9
100146f4:	4342      	muls	r2, r0
100146f6:	0010      	movs	r0, r2
100146f8:	9203      	str	r2, [sp, #12]
100146fa:	4662      	mov	r2, ip
100146fc:	001c      	movs	r4, r3
100146fe:	0c3f      	lsrs	r7, r7, #16
10014700:	437a      	muls	r2, r7
10014702:	437c      	muls	r4, r7
10014704:	4442      	add	r2, r8
10014706:	9201      	str	r2, [sp, #4]
10014708:	0c22      	lsrs	r2, r4, #16
1001470a:	4692      	mov	sl, r2
1001470c:	9a01      	ldr	r2, [sp, #4]
1001470e:	4452      	add	r2, sl
10014710:	4590      	cmp	r8, r2
10014712:	d906      	bls.n	10014722 <__aeabi_dmul+0x23a>
10014714:	4682      	mov	sl, r0
10014716:	2080      	movs	r0, #128	; 0x80
10014718:	0240      	lsls	r0, r0, #9
1001471a:	4680      	mov	r8, r0
1001471c:	44c2      	add	sl, r8
1001471e:	4650      	mov	r0, sl
10014720:	9003      	str	r0, [sp, #12]
10014722:	0c10      	lsrs	r0, r2, #16
10014724:	9004      	str	r0, [sp, #16]
10014726:	4648      	mov	r0, r9
10014728:	0424      	lsls	r4, r4, #16
1001472a:	0c24      	lsrs	r4, r4, #16
1001472c:	0412      	lsls	r2, r2, #16
1001472e:	1912      	adds	r2, r2, r4
10014730:	9205      	str	r2, [sp, #20]
10014732:	0c2a      	lsrs	r2, r5, #16
10014734:	042d      	lsls	r5, r5, #16
10014736:	0c2d      	lsrs	r5, r5, #16
10014738:	4368      	muls	r0, r5
1001473a:	002c      	movs	r4, r5
1001473c:	4682      	mov	sl, r0
1001473e:	4648      	mov	r0, r9
10014740:	437c      	muls	r4, r7
10014742:	4350      	muls	r0, r2
10014744:	4681      	mov	r9, r0
10014746:	0c20      	lsrs	r0, r4, #16
10014748:	4680      	mov	r8, r0
1001474a:	4357      	muls	r7, r2
1001474c:	4457      	add	r7, sl
1001474e:	4447      	add	r7, r8
10014750:	45ba      	cmp	sl, r7
10014752:	d903      	bls.n	1001475c <__aeabi_dmul+0x274>
10014754:	2080      	movs	r0, #128	; 0x80
10014756:	0240      	lsls	r0, r0, #9
10014758:	4680      	mov	r8, r0
1001475a:	44c1      	add	r9, r8
1001475c:	0c38      	lsrs	r0, r7, #16
1001475e:	043f      	lsls	r7, r7, #16
10014760:	46b8      	mov	r8, r7
10014762:	4448      	add	r0, r9
10014764:	0424      	lsls	r4, r4, #16
10014766:	0c24      	lsrs	r4, r4, #16
10014768:	9001      	str	r0, [sp, #4]
1001476a:	9804      	ldr	r0, [sp, #16]
1001476c:	44a0      	add	r8, r4
1001476e:	4440      	add	r0, r8
10014770:	9004      	str	r0, [sp, #16]
10014772:	4658      	mov	r0, fp
10014774:	0c00      	lsrs	r0, r0, #16
10014776:	4681      	mov	r9, r0
10014778:	4658      	mov	r0, fp
1001477a:	0404      	lsls	r4, r0, #16
1001477c:	0c20      	lsrs	r0, r4, #16
1001477e:	4682      	mov	sl, r0
10014780:	0007      	movs	r7, r0
10014782:	4648      	mov	r0, r9
10014784:	435f      	muls	r7, r3
10014786:	464c      	mov	r4, r9
10014788:	4343      	muls	r3, r0
1001478a:	4660      	mov	r0, ip
1001478c:	4360      	muls	r0, r4
1001478e:	4664      	mov	r4, ip
10014790:	4683      	mov	fp, r0
10014792:	4650      	mov	r0, sl
10014794:	4344      	muls	r4, r0
10014796:	0c38      	lsrs	r0, r7, #16
10014798:	4684      	mov	ip, r0
1001479a:	18e4      	adds	r4, r4, r3
1001479c:	4464      	add	r4, ip
1001479e:	42a3      	cmp	r3, r4
100147a0:	d903      	bls.n	100147aa <__aeabi_dmul+0x2c2>
100147a2:	2380      	movs	r3, #128	; 0x80
100147a4:	025b      	lsls	r3, r3, #9
100147a6:	469c      	mov	ip, r3
100147a8:	44e3      	add	fp, ip
100147aa:	4648      	mov	r0, r9
100147ac:	043f      	lsls	r7, r7, #16
100147ae:	0c23      	lsrs	r3, r4, #16
100147b0:	0c3f      	lsrs	r7, r7, #16
100147b2:	0424      	lsls	r4, r4, #16
100147b4:	19e4      	adds	r4, r4, r7
100147b6:	4657      	mov	r7, sl
100147b8:	4368      	muls	r0, r5
100147ba:	436f      	muls	r7, r5
100147bc:	4684      	mov	ip, r0
100147be:	464d      	mov	r5, r9
100147c0:	4650      	mov	r0, sl
100147c2:	4355      	muls	r5, r2
100147c4:	4342      	muls	r2, r0
100147c6:	0c38      	lsrs	r0, r7, #16
100147c8:	4681      	mov	r9, r0
100147ca:	4462      	add	r2, ip
100147cc:	444a      	add	r2, r9
100147ce:	445b      	add	r3, fp
100147d0:	4594      	cmp	ip, r2
100147d2:	d903      	bls.n	100147dc <__aeabi_dmul+0x2f4>
100147d4:	2080      	movs	r0, #128	; 0x80
100147d6:	0240      	lsls	r0, r0, #9
100147d8:	4684      	mov	ip, r0
100147da:	4465      	add	r5, ip
100147dc:	9803      	ldr	r0, [sp, #12]
100147de:	043f      	lsls	r7, r7, #16
100147e0:	4683      	mov	fp, r0
100147e2:	9804      	ldr	r0, [sp, #16]
100147e4:	0c3f      	lsrs	r7, r7, #16
100147e6:	4684      	mov	ip, r0
100147e8:	44e3      	add	fp, ip
100147ea:	45c3      	cmp	fp, r8
100147ec:	4180      	sbcs	r0, r0
100147ee:	4240      	negs	r0, r0
100147f0:	4682      	mov	sl, r0
100147f2:	0410      	lsls	r0, r2, #16
100147f4:	4684      	mov	ip, r0
100147f6:	9801      	ldr	r0, [sp, #4]
100147f8:	4467      	add	r7, ip
100147fa:	4684      	mov	ip, r0
100147fc:	4467      	add	r7, ip
100147fe:	44a3      	add	fp, r4
10014800:	46bc      	mov	ip, r7
10014802:	45a3      	cmp	fp, r4
10014804:	41a4      	sbcs	r4, r4
10014806:	4699      	mov	r9, r3
10014808:	44d4      	add	ip, sl
1001480a:	4264      	negs	r4, r4
1001480c:	4287      	cmp	r7, r0
1001480e:	41bf      	sbcs	r7, r7
10014810:	45d4      	cmp	ip, sl
10014812:	4180      	sbcs	r0, r0
10014814:	44e1      	add	r9, ip
10014816:	46a0      	mov	r8, r4
10014818:	4599      	cmp	r9, r3
1001481a:	419b      	sbcs	r3, r3
1001481c:	427f      	negs	r7, r7
1001481e:	4240      	negs	r0, r0
10014820:	44c8      	add	r8, r9
10014822:	4307      	orrs	r7, r0
10014824:	0c12      	lsrs	r2, r2, #16
10014826:	18ba      	adds	r2, r7, r2
10014828:	45a0      	cmp	r8, r4
1001482a:	41a4      	sbcs	r4, r4
1001482c:	425f      	negs	r7, r3
1001482e:	003b      	movs	r3, r7
10014830:	4264      	negs	r4, r4
10014832:	4323      	orrs	r3, r4
10014834:	18d7      	adds	r7, r2, r3
10014836:	4643      	mov	r3, r8
10014838:	197d      	adds	r5, r7, r5
1001483a:	0ddb      	lsrs	r3, r3, #23
1001483c:	026d      	lsls	r5, r5, #9
1001483e:	431d      	orrs	r5, r3
10014840:	465b      	mov	r3, fp
10014842:	025a      	lsls	r2, r3, #9
10014844:	9b05      	ldr	r3, [sp, #20]
10014846:	431a      	orrs	r2, r3
10014848:	1e53      	subs	r3, r2, #1
1001484a:	419a      	sbcs	r2, r3
1001484c:	465b      	mov	r3, fp
1001484e:	0ddb      	lsrs	r3, r3, #23
10014850:	431a      	orrs	r2, r3
10014852:	4643      	mov	r3, r8
10014854:	025b      	lsls	r3, r3, #9
10014856:	4313      	orrs	r3, r2
10014858:	01ea      	lsls	r2, r5, #7
1001485a:	d507      	bpl.n	1001486c <__aeabi_dmul+0x384>
1001485c:	2201      	movs	r2, #1
1001485e:	085c      	lsrs	r4, r3, #1
10014860:	4013      	ands	r3, r2
10014862:	4323      	orrs	r3, r4
10014864:	07ea      	lsls	r2, r5, #31
10014866:	9e02      	ldr	r6, [sp, #8]
10014868:	4313      	orrs	r3, r2
1001486a:	086d      	lsrs	r5, r5, #1
1001486c:	4a57      	ldr	r2, [pc, #348]	; (100149cc <__aeabi_dmul+0x4e4>)
1001486e:	18b2      	adds	r2, r6, r2
10014870:	2a00      	cmp	r2, #0
10014872:	dd4b      	ble.n	1001490c <__aeabi_dmul+0x424>
10014874:	0758      	lsls	r0, r3, #29
10014876:	d009      	beq.n	1001488c <__aeabi_dmul+0x3a4>
10014878:	200f      	movs	r0, #15
1001487a:	4018      	ands	r0, r3
1001487c:	2804      	cmp	r0, #4
1001487e:	d005      	beq.n	1001488c <__aeabi_dmul+0x3a4>
10014880:	1d18      	adds	r0, r3, #4
10014882:	4298      	cmp	r0, r3
10014884:	419b      	sbcs	r3, r3
10014886:	425b      	negs	r3, r3
10014888:	18ed      	adds	r5, r5, r3
1001488a:	0003      	movs	r3, r0
1001488c:	01e8      	lsls	r0, r5, #7
1001488e:	d504      	bpl.n	1001489a <__aeabi_dmul+0x3b2>
10014890:	4a4f      	ldr	r2, [pc, #316]	; (100149d0 <__aeabi_dmul+0x4e8>)
10014892:	4015      	ands	r5, r2
10014894:	2280      	movs	r2, #128	; 0x80
10014896:	00d2      	lsls	r2, r2, #3
10014898:	18b2      	adds	r2, r6, r2
1001489a:	484e      	ldr	r0, [pc, #312]	; (100149d4 <__aeabi_dmul+0x4ec>)
1001489c:	4282      	cmp	r2, r0
1001489e:	dd00      	ble.n	100148a2 <__aeabi_dmul+0x3ba>
100148a0:	e6e7      	b.n	10014672 <__aeabi_dmul+0x18a>
100148a2:	2401      	movs	r4, #1
100148a4:	08db      	lsrs	r3, r3, #3
100148a6:	0768      	lsls	r0, r5, #29
100148a8:	4318      	orrs	r0, r3
100148aa:	026d      	lsls	r5, r5, #9
100148ac:	0553      	lsls	r3, r2, #21
100148ae:	4680      	mov	r8, r0
100148b0:	0b2d      	lsrs	r5, r5, #12
100148b2:	0d5b      	lsrs	r3, r3, #21
100148b4:	400c      	ands	r4, r1
100148b6:	e67d      	b.n	100145b4 <__aeabi_dmul+0xcc>
100148b8:	2280      	movs	r2, #128	; 0x80
100148ba:	4659      	mov	r1, fp
100148bc:	0312      	lsls	r2, r2, #12
100148be:	4211      	tst	r1, r2
100148c0:	d008      	beq.n	100148d4 <__aeabi_dmul+0x3ec>
100148c2:	4215      	tst	r5, r2
100148c4:	d106      	bne.n	100148d4 <__aeabi_dmul+0x3ec>
100148c6:	4315      	orrs	r5, r2
100148c8:	032d      	lsls	r5, r5, #12
100148ca:	4698      	mov	r8, r3
100148cc:	0b2d      	lsrs	r5, r5, #12
100148ce:	464c      	mov	r4, r9
100148d0:	4b41      	ldr	r3, [pc, #260]	; (100149d8 <__aeabi_dmul+0x4f0>)
100148d2:	e66f      	b.n	100145b4 <__aeabi_dmul+0xcc>
100148d4:	465d      	mov	r5, fp
100148d6:	4315      	orrs	r5, r2
100148d8:	032d      	lsls	r5, r5, #12
100148da:	0b2d      	lsrs	r5, r5, #12
100148dc:	4b3e      	ldr	r3, [pc, #248]	; (100149d8 <__aeabi_dmul+0x4f0>)
100148de:	e669      	b.n	100145b4 <__aeabi_dmul+0xcc>
100148e0:	0003      	movs	r3, r0
100148e2:	4655      	mov	r5, sl
100148e4:	3b28      	subs	r3, #40	; 0x28
100148e6:	409d      	lsls	r5, r3
100148e8:	2300      	movs	r3, #0
100148ea:	e6bc      	b.n	10014666 <__aeabi_dmul+0x17e>
100148ec:	4650      	mov	r0, sl
100148ee:	f000 fc37 	bl	10015160 <__clzsi2>
100148f2:	3020      	adds	r0, #32
100148f4:	e6a8      	b.n	10014648 <__aeabi_dmul+0x160>
100148f6:	0003      	movs	r3, r0
100148f8:	3b28      	subs	r3, #40	; 0x28
100148fa:	409f      	lsls	r7, r3
100148fc:	2300      	movs	r3, #0
100148fe:	46bb      	mov	fp, r7
10014900:	4698      	mov	r8, r3
10014902:	e689      	b.n	10014618 <__aeabi_dmul+0x130>
10014904:	f000 fc2c 	bl	10015160 <__clzsi2>
10014908:	3020      	adds	r0, #32
1001490a:	e673      	b.n	100145f4 <__aeabi_dmul+0x10c>
1001490c:	2401      	movs	r4, #1
1001490e:	1aa6      	subs	r6, r4, r2
10014910:	2e38      	cmp	r6, #56	; 0x38
10014912:	dd07      	ble.n	10014924 <__aeabi_dmul+0x43c>
10014914:	2200      	movs	r2, #0
10014916:	400c      	ands	r4, r1
10014918:	2300      	movs	r3, #0
1001491a:	2500      	movs	r5, #0
1001491c:	4690      	mov	r8, r2
1001491e:	e649      	b.n	100145b4 <__aeabi_dmul+0xcc>
10014920:	9e02      	ldr	r6, [sp, #8]
10014922:	e7a3      	b.n	1001486c <__aeabi_dmul+0x384>
10014924:	2e1f      	cmp	r6, #31
10014926:	dc20      	bgt.n	1001496a <__aeabi_dmul+0x482>
10014928:	2220      	movs	r2, #32
1001492a:	002c      	movs	r4, r5
1001492c:	0018      	movs	r0, r3
1001492e:	1b92      	subs	r2, r2, r6
10014930:	40f0      	lsrs	r0, r6
10014932:	4094      	lsls	r4, r2
10014934:	4093      	lsls	r3, r2
10014936:	4304      	orrs	r4, r0
10014938:	1e58      	subs	r0, r3, #1
1001493a:	4183      	sbcs	r3, r0
1001493c:	431c      	orrs	r4, r3
1001493e:	40f5      	lsrs	r5, r6
10014940:	0763      	lsls	r3, r4, #29
10014942:	d009      	beq.n	10014958 <__aeabi_dmul+0x470>
10014944:	230f      	movs	r3, #15
10014946:	4023      	ands	r3, r4
10014948:	2b04      	cmp	r3, #4
1001494a:	d005      	beq.n	10014958 <__aeabi_dmul+0x470>
1001494c:	0023      	movs	r3, r4
1001494e:	1d1c      	adds	r4, r3, #4
10014950:	429c      	cmp	r4, r3
10014952:	4192      	sbcs	r2, r2
10014954:	4252      	negs	r2, r2
10014956:	18ad      	adds	r5, r5, r2
10014958:	022b      	lsls	r3, r5, #8
1001495a:	d51f      	bpl.n	1001499c <__aeabi_dmul+0x4b4>
1001495c:	2401      	movs	r4, #1
1001495e:	2200      	movs	r2, #0
10014960:	400c      	ands	r4, r1
10014962:	2301      	movs	r3, #1
10014964:	2500      	movs	r5, #0
10014966:	4690      	mov	r8, r2
10014968:	e624      	b.n	100145b4 <__aeabi_dmul+0xcc>
1001496a:	201f      	movs	r0, #31
1001496c:	002c      	movs	r4, r5
1001496e:	4240      	negs	r0, r0
10014970:	1a82      	subs	r2, r0, r2
10014972:	40d4      	lsrs	r4, r2
10014974:	2e20      	cmp	r6, #32
10014976:	d01c      	beq.n	100149b2 <__aeabi_dmul+0x4ca>
10014978:	2240      	movs	r2, #64	; 0x40
1001497a:	1b96      	subs	r6, r2, r6
1001497c:	40b5      	lsls	r5, r6
1001497e:	432b      	orrs	r3, r5
10014980:	1e58      	subs	r0, r3, #1
10014982:	4183      	sbcs	r3, r0
10014984:	2007      	movs	r0, #7
10014986:	4323      	orrs	r3, r4
10014988:	4018      	ands	r0, r3
1001498a:	2500      	movs	r5, #0
1001498c:	2800      	cmp	r0, #0
1001498e:	d009      	beq.n	100149a4 <__aeabi_dmul+0x4bc>
10014990:	220f      	movs	r2, #15
10014992:	2500      	movs	r5, #0
10014994:	401a      	ands	r2, r3
10014996:	001c      	movs	r4, r3
10014998:	2a04      	cmp	r2, #4
1001499a:	d1d8      	bne.n	1001494e <__aeabi_dmul+0x466>
1001499c:	0023      	movs	r3, r4
1001499e:	0768      	lsls	r0, r5, #29
100149a0:	026d      	lsls	r5, r5, #9
100149a2:	0b2d      	lsrs	r5, r5, #12
100149a4:	2401      	movs	r4, #1
100149a6:	08db      	lsrs	r3, r3, #3
100149a8:	4303      	orrs	r3, r0
100149aa:	4698      	mov	r8, r3
100149ac:	400c      	ands	r4, r1
100149ae:	2300      	movs	r3, #0
100149b0:	e600      	b.n	100145b4 <__aeabi_dmul+0xcc>
100149b2:	2500      	movs	r5, #0
100149b4:	e7e3      	b.n	1001497e <__aeabi_dmul+0x496>
100149b6:	2280      	movs	r2, #128	; 0x80
100149b8:	2401      	movs	r4, #1
100149ba:	0312      	lsls	r2, r2, #12
100149bc:	4315      	orrs	r5, r2
100149be:	032d      	lsls	r5, r5, #12
100149c0:	4698      	mov	r8, r3
100149c2:	0b2d      	lsrs	r5, r5, #12
100149c4:	400c      	ands	r4, r1
100149c6:	4b04      	ldr	r3, [pc, #16]	; (100149d8 <__aeabi_dmul+0x4f0>)
100149c8:	e5f4      	b.n	100145b4 <__aeabi_dmul+0xcc>
100149ca:	46c0      	nop			; (mov r8, r8)
100149cc:	000003ff 	.word	0x000003ff
100149d0:	feffffff 	.word	0xfeffffff
100149d4:	000007fe 	.word	0x000007fe
100149d8:	000007ff 	.word	0x000007ff

100149dc <__aeabi_dsub>:
100149dc:	b5f0      	push	{r4, r5, r6, r7, lr}
100149de:	4657      	mov	r7, sl
100149e0:	464e      	mov	r6, r9
100149e2:	4645      	mov	r5, r8
100149e4:	b4e0      	push	{r5, r6, r7}
100149e6:	000e      	movs	r6, r1
100149e8:	0011      	movs	r1, r2
100149ea:	0ff2      	lsrs	r2, r6, #31
100149ec:	4692      	mov	sl, r2
100149ee:	00c5      	lsls	r5, r0, #3
100149f0:	0f42      	lsrs	r2, r0, #29
100149f2:	0318      	lsls	r0, r3, #12
100149f4:	0337      	lsls	r7, r6, #12
100149f6:	0074      	lsls	r4, r6, #1
100149f8:	0a40      	lsrs	r0, r0, #9
100149fa:	0f4e      	lsrs	r6, r1, #29
100149fc:	0a7f      	lsrs	r7, r7, #9
100149fe:	4330      	orrs	r0, r6
10014a00:	4ecf      	ldr	r6, [pc, #828]	; (10014d40 <__aeabi_dsub+0x364>)
10014a02:	4317      	orrs	r7, r2
10014a04:	005a      	lsls	r2, r3, #1
10014a06:	0d64      	lsrs	r4, r4, #21
10014a08:	0d52      	lsrs	r2, r2, #21
10014a0a:	0fdb      	lsrs	r3, r3, #31
10014a0c:	00c9      	lsls	r1, r1, #3
10014a0e:	42b2      	cmp	r2, r6
10014a10:	d100      	bne.n	10014a14 <__aeabi_dsub+0x38>
10014a12:	e0e5      	b.n	10014be0 <__aeabi_dsub+0x204>
10014a14:	2601      	movs	r6, #1
10014a16:	4073      	eors	r3, r6
10014a18:	1aa6      	subs	r6, r4, r2
10014a1a:	46b4      	mov	ip, r6
10014a1c:	4553      	cmp	r3, sl
10014a1e:	d100      	bne.n	10014a22 <__aeabi_dsub+0x46>
10014a20:	e0af      	b.n	10014b82 <__aeabi_dsub+0x1a6>
10014a22:	2e00      	cmp	r6, #0
10014a24:	dc00      	bgt.n	10014a28 <__aeabi_dsub+0x4c>
10014a26:	e10d      	b.n	10014c44 <__aeabi_dsub+0x268>
10014a28:	2a00      	cmp	r2, #0
10014a2a:	d13a      	bne.n	10014aa2 <__aeabi_dsub+0xc6>
10014a2c:	0003      	movs	r3, r0
10014a2e:	430b      	orrs	r3, r1
10014a30:	d000      	beq.n	10014a34 <__aeabi_dsub+0x58>
10014a32:	e0e4      	b.n	10014bfe <__aeabi_dsub+0x222>
10014a34:	076b      	lsls	r3, r5, #29
10014a36:	d009      	beq.n	10014a4c <__aeabi_dsub+0x70>
10014a38:	230f      	movs	r3, #15
10014a3a:	402b      	ands	r3, r5
10014a3c:	2b04      	cmp	r3, #4
10014a3e:	d005      	beq.n	10014a4c <__aeabi_dsub+0x70>
10014a40:	1d2b      	adds	r3, r5, #4
10014a42:	42ab      	cmp	r3, r5
10014a44:	41ad      	sbcs	r5, r5
10014a46:	426d      	negs	r5, r5
10014a48:	197f      	adds	r7, r7, r5
10014a4a:	001d      	movs	r5, r3
10014a4c:	023b      	lsls	r3, r7, #8
10014a4e:	d400      	bmi.n	10014a52 <__aeabi_dsub+0x76>
10014a50:	e088      	b.n	10014b64 <__aeabi_dsub+0x188>
10014a52:	4bbb      	ldr	r3, [pc, #748]	; (10014d40 <__aeabi_dsub+0x364>)
10014a54:	3401      	adds	r4, #1
10014a56:	429c      	cmp	r4, r3
10014a58:	d100      	bne.n	10014a5c <__aeabi_dsub+0x80>
10014a5a:	e110      	b.n	10014c7e <__aeabi_dsub+0x2a2>
10014a5c:	003a      	movs	r2, r7
10014a5e:	4bb9      	ldr	r3, [pc, #740]	; (10014d44 <__aeabi_dsub+0x368>)
10014a60:	4651      	mov	r1, sl
10014a62:	401a      	ands	r2, r3
10014a64:	2301      	movs	r3, #1
10014a66:	0750      	lsls	r0, r2, #29
10014a68:	08ed      	lsrs	r5, r5, #3
10014a6a:	0252      	lsls	r2, r2, #9
10014a6c:	0564      	lsls	r4, r4, #21
10014a6e:	4305      	orrs	r5, r0
10014a70:	0b12      	lsrs	r2, r2, #12
10014a72:	0d64      	lsrs	r4, r4, #21
10014a74:	400b      	ands	r3, r1
10014a76:	2100      	movs	r1, #0
10014a78:	0028      	movs	r0, r5
10014a7a:	0312      	lsls	r2, r2, #12
10014a7c:	0d0d      	lsrs	r5, r1, #20
10014a7e:	0b12      	lsrs	r2, r2, #12
10014a80:	0564      	lsls	r4, r4, #21
10014a82:	052d      	lsls	r5, r5, #20
10014a84:	4315      	orrs	r5, r2
10014a86:	0862      	lsrs	r2, r4, #1
10014a88:	4caf      	ldr	r4, [pc, #700]	; (10014d48 <__aeabi_dsub+0x36c>)
10014a8a:	07db      	lsls	r3, r3, #31
10014a8c:	402c      	ands	r4, r5
10014a8e:	4314      	orrs	r4, r2
10014a90:	0064      	lsls	r4, r4, #1
10014a92:	0864      	lsrs	r4, r4, #1
10014a94:	431c      	orrs	r4, r3
10014a96:	0021      	movs	r1, r4
10014a98:	bc1c      	pop	{r2, r3, r4}
10014a9a:	4690      	mov	r8, r2
10014a9c:	4699      	mov	r9, r3
10014a9e:	46a2      	mov	sl, r4
10014aa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
10014aa2:	4ba7      	ldr	r3, [pc, #668]	; (10014d40 <__aeabi_dsub+0x364>)
10014aa4:	429c      	cmp	r4, r3
10014aa6:	d0c5      	beq.n	10014a34 <__aeabi_dsub+0x58>
10014aa8:	2380      	movs	r3, #128	; 0x80
10014aaa:	041b      	lsls	r3, r3, #16
10014aac:	4318      	orrs	r0, r3
10014aae:	4663      	mov	r3, ip
10014ab0:	2b38      	cmp	r3, #56	; 0x38
10014ab2:	dd00      	ble.n	10014ab6 <__aeabi_dsub+0xda>
10014ab4:	e0fd      	b.n	10014cb2 <__aeabi_dsub+0x2d6>
10014ab6:	2b1f      	cmp	r3, #31
10014ab8:	dd00      	ble.n	10014abc <__aeabi_dsub+0xe0>
10014aba:	e130      	b.n	10014d1e <__aeabi_dsub+0x342>
10014abc:	4662      	mov	r2, ip
10014abe:	2320      	movs	r3, #32
10014ac0:	1a9b      	subs	r3, r3, r2
10014ac2:	0002      	movs	r2, r0
10014ac4:	409a      	lsls	r2, r3
10014ac6:	4666      	mov	r6, ip
10014ac8:	4690      	mov	r8, r2
10014aca:	000a      	movs	r2, r1
10014acc:	4099      	lsls	r1, r3
10014ace:	40f2      	lsrs	r2, r6
10014ad0:	4646      	mov	r6, r8
10014ad2:	1e4b      	subs	r3, r1, #1
10014ad4:	4199      	sbcs	r1, r3
10014ad6:	4332      	orrs	r2, r6
10014ad8:	4311      	orrs	r1, r2
10014ada:	4663      	mov	r3, ip
10014adc:	0002      	movs	r2, r0
10014ade:	40da      	lsrs	r2, r3
10014ae0:	1a69      	subs	r1, r5, r1
10014ae2:	428d      	cmp	r5, r1
10014ae4:	419b      	sbcs	r3, r3
10014ae6:	000d      	movs	r5, r1
10014ae8:	1aba      	subs	r2, r7, r2
10014aea:	425b      	negs	r3, r3
10014aec:	1ad7      	subs	r7, r2, r3
10014aee:	023b      	lsls	r3, r7, #8
10014af0:	d535      	bpl.n	10014b5e <__aeabi_dsub+0x182>
10014af2:	027a      	lsls	r2, r7, #9
10014af4:	0a53      	lsrs	r3, r2, #9
10014af6:	4698      	mov	r8, r3
10014af8:	4643      	mov	r3, r8
10014afa:	2b00      	cmp	r3, #0
10014afc:	d100      	bne.n	10014b00 <__aeabi_dsub+0x124>
10014afe:	e0c4      	b.n	10014c8a <__aeabi_dsub+0x2ae>
10014b00:	4640      	mov	r0, r8
10014b02:	f000 fb2d 	bl	10015160 <__clzsi2>
10014b06:	0003      	movs	r3, r0
10014b08:	3b08      	subs	r3, #8
10014b0a:	2b1f      	cmp	r3, #31
10014b0c:	dd00      	ble.n	10014b10 <__aeabi_dsub+0x134>
10014b0e:	e0c5      	b.n	10014c9c <__aeabi_dsub+0x2c0>
10014b10:	2220      	movs	r2, #32
10014b12:	0029      	movs	r1, r5
10014b14:	1ad2      	subs	r2, r2, r3
10014b16:	4647      	mov	r7, r8
10014b18:	40d1      	lsrs	r1, r2
10014b1a:	409f      	lsls	r7, r3
10014b1c:	000a      	movs	r2, r1
10014b1e:	409d      	lsls	r5, r3
10014b20:	433a      	orrs	r2, r7
10014b22:	429c      	cmp	r4, r3
10014b24:	dd00      	ble.n	10014b28 <__aeabi_dsub+0x14c>
10014b26:	e0c0      	b.n	10014caa <__aeabi_dsub+0x2ce>
10014b28:	1b1c      	subs	r4, r3, r4
10014b2a:	1c63      	adds	r3, r4, #1
10014b2c:	2b1f      	cmp	r3, #31
10014b2e:	dd00      	ble.n	10014b32 <__aeabi_dsub+0x156>
10014b30:	e0e4      	b.n	10014cfc <__aeabi_dsub+0x320>
10014b32:	2120      	movs	r1, #32
10014b34:	0014      	movs	r4, r2
10014b36:	0028      	movs	r0, r5
10014b38:	1ac9      	subs	r1, r1, r3
10014b3a:	40d8      	lsrs	r0, r3
10014b3c:	408c      	lsls	r4, r1
10014b3e:	408d      	lsls	r5, r1
10014b40:	4304      	orrs	r4, r0
10014b42:	40da      	lsrs	r2, r3
10014b44:	1e68      	subs	r0, r5, #1
10014b46:	4185      	sbcs	r5, r0
10014b48:	0017      	movs	r7, r2
10014b4a:	4325      	orrs	r5, r4
10014b4c:	2400      	movs	r4, #0
10014b4e:	e771      	b.n	10014a34 <__aeabi_dsub+0x58>
10014b50:	4642      	mov	r2, r8
10014b52:	4663      	mov	r3, ip
10014b54:	431a      	orrs	r2, r3
10014b56:	d100      	bne.n	10014b5a <__aeabi_dsub+0x17e>
10014b58:	e24c      	b.n	10014ff4 <__aeabi_dsub+0x618>
10014b5a:	4667      	mov	r7, ip
10014b5c:	4645      	mov	r5, r8
10014b5e:	076b      	lsls	r3, r5, #29
10014b60:	d000      	beq.n	10014b64 <__aeabi_dsub+0x188>
10014b62:	e769      	b.n	10014a38 <__aeabi_dsub+0x5c>
10014b64:	2301      	movs	r3, #1
10014b66:	4651      	mov	r1, sl
10014b68:	0778      	lsls	r0, r7, #29
10014b6a:	08ed      	lsrs	r5, r5, #3
10014b6c:	08fa      	lsrs	r2, r7, #3
10014b6e:	400b      	ands	r3, r1
10014b70:	4305      	orrs	r5, r0
10014b72:	4973      	ldr	r1, [pc, #460]	; (10014d40 <__aeabi_dsub+0x364>)
10014b74:	428c      	cmp	r4, r1
10014b76:	d038      	beq.n	10014bea <__aeabi_dsub+0x20e>
10014b78:	0312      	lsls	r2, r2, #12
10014b7a:	0564      	lsls	r4, r4, #21
10014b7c:	0b12      	lsrs	r2, r2, #12
10014b7e:	0d64      	lsrs	r4, r4, #21
10014b80:	e779      	b.n	10014a76 <__aeabi_dsub+0x9a>
10014b82:	2e00      	cmp	r6, #0
10014b84:	dc00      	bgt.n	10014b88 <__aeabi_dsub+0x1ac>
10014b86:	e09a      	b.n	10014cbe <__aeabi_dsub+0x2e2>
10014b88:	2a00      	cmp	r2, #0
10014b8a:	d047      	beq.n	10014c1c <__aeabi_dsub+0x240>
10014b8c:	4a6c      	ldr	r2, [pc, #432]	; (10014d40 <__aeabi_dsub+0x364>)
10014b8e:	4294      	cmp	r4, r2
10014b90:	d100      	bne.n	10014b94 <__aeabi_dsub+0x1b8>
10014b92:	e74f      	b.n	10014a34 <__aeabi_dsub+0x58>
10014b94:	2280      	movs	r2, #128	; 0x80
10014b96:	0412      	lsls	r2, r2, #16
10014b98:	4310      	orrs	r0, r2
10014b9a:	4662      	mov	r2, ip
10014b9c:	2a38      	cmp	r2, #56	; 0x38
10014b9e:	dc00      	bgt.n	10014ba2 <__aeabi_dsub+0x1c6>
10014ba0:	e108      	b.n	10014db4 <__aeabi_dsub+0x3d8>
10014ba2:	4301      	orrs	r1, r0
10014ba4:	1e48      	subs	r0, r1, #1
10014ba6:	4181      	sbcs	r1, r0
10014ba8:	2200      	movs	r2, #0
10014baa:	b2c9      	uxtb	r1, r1
10014bac:	1949      	adds	r1, r1, r5
10014bae:	19d2      	adds	r2, r2, r7
10014bb0:	42a9      	cmp	r1, r5
10014bb2:	41bf      	sbcs	r7, r7
10014bb4:	000d      	movs	r5, r1
10014bb6:	427f      	negs	r7, r7
10014bb8:	18bf      	adds	r7, r7, r2
10014bba:	023a      	lsls	r2, r7, #8
10014bbc:	d400      	bmi.n	10014bc0 <__aeabi_dsub+0x1e4>
10014bbe:	e142      	b.n	10014e46 <__aeabi_dsub+0x46a>
10014bc0:	4a5f      	ldr	r2, [pc, #380]	; (10014d40 <__aeabi_dsub+0x364>)
10014bc2:	3401      	adds	r4, #1
10014bc4:	4294      	cmp	r4, r2
10014bc6:	d100      	bne.n	10014bca <__aeabi_dsub+0x1ee>
10014bc8:	e14e      	b.n	10014e68 <__aeabi_dsub+0x48c>
10014bca:	2001      	movs	r0, #1
10014bcc:	4a5d      	ldr	r2, [pc, #372]	; (10014d44 <__aeabi_dsub+0x368>)
10014bce:	0869      	lsrs	r1, r5, #1
10014bd0:	403a      	ands	r2, r7
10014bd2:	4028      	ands	r0, r5
10014bd4:	4308      	orrs	r0, r1
10014bd6:	07d5      	lsls	r5, r2, #31
10014bd8:	4305      	orrs	r5, r0
10014bda:	0857      	lsrs	r7, r2, #1
10014bdc:	469a      	mov	sl, r3
10014bde:	e729      	b.n	10014a34 <__aeabi_dsub+0x58>
10014be0:	0006      	movs	r6, r0
10014be2:	430e      	orrs	r6, r1
10014be4:	d000      	beq.n	10014be8 <__aeabi_dsub+0x20c>
10014be6:	e717      	b.n	10014a18 <__aeabi_dsub+0x3c>
10014be8:	e714      	b.n	10014a14 <__aeabi_dsub+0x38>
10014bea:	0029      	movs	r1, r5
10014bec:	4311      	orrs	r1, r2
10014bee:	d100      	bne.n	10014bf2 <__aeabi_dsub+0x216>
10014bf0:	e1f9      	b.n	10014fe6 <__aeabi_dsub+0x60a>
10014bf2:	2180      	movs	r1, #128	; 0x80
10014bf4:	0309      	lsls	r1, r1, #12
10014bf6:	430a      	orrs	r2, r1
10014bf8:	0312      	lsls	r2, r2, #12
10014bfa:	0b12      	lsrs	r2, r2, #12
10014bfc:	e73b      	b.n	10014a76 <__aeabi_dsub+0x9a>
10014bfe:	2301      	movs	r3, #1
10014c00:	425b      	negs	r3, r3
10014c02:	4698      	mov	r8, r3
10014c04:	44c4      	add	ip, r8
10014c06:	4663      	mov	r3, ip
10014c08:	2b00      	cmp	r3, #0
10014c0a:	d172      	bne.n	10014cf2 <__aeabi_dsub+0x316>
10014c0c:	1a69      	subs	r1, r5, r1
10014c0e:	428d      	cmp	r5, r1
10014c10:	419b      	sbcs	r3, r3
10014c12:	1a3f      	subs	r7, r7, r0
10014c14:	425b      	negs	r3, r3
10014c16:	1aff      	subs	r7, r7, r3
10014c18:	000d      	movs	r5, r1
10014c1a:	e768      	b.n	10014aee <__aeabi_dsub+0x112>
10014c1c:	0002      	movs	r2, r0
10014c1e:	430a      	orrs	r2, r1
10014c20:	d100      	bne.n	10014c24 <__aeabi_dsub+0x248>
10014c22:	e707      	b.n	10014a34 <__aeabi_dsub+0x58>
10014c24:	2201      	movs	r2, #1
10014c26:	4252      	negs	r2, r2
10014c28:	4690      	mov	r8, r2
10014c2a:	44c4      	add	ip, r8
10014c2c:	4662      	mov	r2, ip
10014c2e:	2a00      	cmp	r2, #0
10014c30:	d000      	beq.n	10014c34 <__aeabi_dsub+0x258>
10014c32:	e0e6      	b.n	10014e02 <__aeabi_dsub+0x426>
10014c34:	1869      	adds	r1, r5, r1
10014c36:	42a9      	cmp	r1, r5
10014c38:	41b6      	sbcs	r6, r6
10014c3a:	183f      	adds	r7, r7, r0
10014c3c:	4276      	negs	r6, r6
10014c3e:	19f7      	adds	r7, r6, r7
10014c40:	000d      	movs	r5, r1
10014c42:	e7ba      	b.n	10014bba <__aeabi_dsub+0x1de>
10014c44:	2e00      	cmp	r6, #0
10014c46:	d000      	beq.n	10014c4a <__aeabi_dsub+0x26e>
10014c48:	e080      	b.n	10014d4c <__aeabi_dsub+0x370>
10014c4a:	1c62      	adds	r2, r4, #1
10014c4c:	0552      	lsls	r2, r2, #21
10014c4e:	0d52      	lsrs	r2, r2, #21
10014c50:	2a01      	cmp	r2, #1
10014c52:	dc00      	bgt.n	10014c56 <__aeabi_dsub+0x27a>
10014c54:	e0f9      	b.n	10014e4a <__aeabi_dsub+0x46e>
10014c56:	1a6a      	subs	r2, r5, r1
10014c58:	4691      	mov	r9, r2
10014c5a:	454d      	cmp	r5, r9
10014c5c:	41b6      	sbcs	r6, r6
10014c5e:	1a3a      	subs	r2, r7, r0
10014c60:	4276      	negs	r6, r6
10014c62:	1b92      	subs	r2, r2, r6
10014c64:	4690      	mov	r8, r2
10014c66:	0212      	lsls	r2, r2, #8
10014c68:	d400      	bmi.n	10014c6c <__aeabi_dsub+0x290>
10014c6a:	e099      	b.n	10014da0 <__aeabi_dsub+0x3c4>
10014c6c:	1b4d      	subs	r5, r1, r5
10014c6e:	42a9      	cmp	r1, r5
10014c70:	4189      	sbcs	r1, r1
10014c72:	1bc7      	subs	r7, r0, r7
10014c74:	4249      	negs	r1, r1
10014c76:	1a7a      	subs	r2, r7, r1
10014c78:	4690      	mov	r8, r2
10014c7a:	469a      	mov	sl, r3
10014c7c:	e73c      	b.n	10014af8 <__aeabi_dsub+0x11c>
10014c7e:	4652      	mov	r2, sl
10014c80:	2301      	movs	r3, #1
10014c82:	2500      	movs	r5, #0
10014c84:	4013      	ands	r3, r2
10014c86:	2200      	movs	r2, #0
10014c88:	e6f5      	b.n	10014a76 <__aeabi_dsub+0x9a>
10014c8a:	0028      	movs	r0, r5
10014c8c:	f000 fa68 	bl	10015160 <__clzsi2>
10014c90:	3020      	adds	r0, #32
10014c92:	0003      	movs	r3, r0
10014c94:	3b08      	subs	r3, #8
10014c96:	2b1f      	cmp	r3, #31
10014c98:	dc00      	bgt.n	10014c9c <__aeabi_dsub+0x2c0>
10014c9a:	e739      	b.n	10014b10 <__aeabi_dsub+0x134>
10014c9c:	002a      	movs	r2, r5
10014c9e:	3828      	subs	r0, #40	; 0x28
10014ca0:	4082      	lsls	r2, r0
10014ca2:	2500      	movs	r5, #0
10014ca4:	429c      	cmp	r4, r3
10014ca6:	dc00      	bgt.n	10014caa <__aeabi_dsub+0x2ce>
10014ca8:	e73e      	b.n	10014b28 <__aeabi_dsub+0x14c>
10014caa:	4f26      	ldr	r7, [pc, #152]	; (10014d44 <__aeabi_dsub+0x368>)
10014cac:	1ae4      	subs	r4, r4, r3
10014cae:	4017      	ands	r7, r2
10014cb0:	e6c0      	b.n	10014a34 <__aeabi_dsub+0x58>
10014cb2:	4301      	orrs	r1, r0
10014cb4:	1e48      	subs	r0, r1, #1
10014cb6:	4181      	sbcs	r1, r0
10014cb8:	2200      	movs	r2, #0
10014cba:	b2c9      	uxtb	r1, r1
10014cbc:	e710      	b.n	10014ae0 <__aeabi_dsub+0x104>
10014cbe:	2e00      	cmp	r6, #0
10014cc0:	d000      	beq.n	10014cc4 <__aeabi_dsub+0x2e8>
10014cc2:	e0f1      	b.n	10014ea8 <__aeabi_dsub+0x4cc>
10014cc4:	1c62      	adds	r2, r4, #1
10014cc6:	4694      	mov	ip, r2
10014cc8:	0552      	lsls	r2, r2, #21
10014cca:	0d52      	lsrs	r2, r2, #21
10014ccc:	2a01      	cmp	r2, #1
10014cce:	dc00      	bgt.n	10014cd2 <__aeabi_dsub+0x2f6>
10014cd0:	e0a0      	b.n	10014e14 <__aeabi_dsub+0x438>
10014cd2:	4a1b      	ldr	r2, [pc, #108]	; (10014d40 <__aeabi_dsub+0x364>)
10014cd4:	4594      	cmp	ip, r2
10014cd6:	d100      	bne.n	10014cda <__aeabi_dsub+0x2fe>
10014cd8:	e0c5      	b.n	10014e66 <__aeabi_dsub+0x48a>
10014cda:	1869      	adds	r1, r5, r1
10014cdc:	42a9      	cmp	r1, r5
10014cde:	4192      	sbcs	r2, r2
10014ce0:	183f      	adds	r7, r7, r0
10014ce2:	4252      	negs	r2, r2
10014ce4:	19d2      	adds	r2, r2, r7
10014ce6:	0849      	lsrs	r1, r1, #1
10014ce8:	07d5      	lsls	r5, r2, #31
10014cea:	430d      	orrs	r5, r1
10014cec:	0857      	lsrs	r7, r2, #1
10014cee:	4664      	mov	r4, ip
10014cf0:	e6a0      	b.n	10014a34 <__aeabi_dsub+0x58>
10014cf2:	4b13      	ldr	r3, [pc, #76]	; (10014d40 <__aeabi_dsub+0x364>)
10014cf4:	429c      	cmp	r4, r3
10014cf6:	d000      	beq.n	10014cfa <__aeabi_dsub+0x31e>
10014cf8:	e6d9      	b.n	10014aae <__aeabi_dsub+0xd2>
10014cfa:	e69b      	b.n	10014a34 <__aeabi_dsub+0x58>
10014cfc:	0011      	movs	r1, r2
10014cfe:	3c1f      	subs	r4, #31
10014d00:	40e1      	lsrs	r1, r4
10014d02:	000c      	movs	r4, r1
10014d04:	2b20      	cmp	r3, #32
10014d06:	d100      	bne.n	10014d0a <__aeabi_dsub+0x32e>
10014d08:	e080      	b.n	10014e0c <__aeabi_dsub+0x430>
10014d0a:	2140      	movs	r1, #64	; 0x40
10014d0c:	1acb      	subs	r3, r1, r3
10014d0e:	409a      	lsls	r2, r3
10014d10:	4315      	orrs	r5, r2
10014d12:	1e6a      	subs	r2, r5, #1
10014d14:	4195      	sbcs	r5, r2
10014d16:	2700      	movs	r7, #0
10014d18:	4325      	orrs	r5, r4
10014d1a:	2400      	movs	r4, #0
10014d1c:	e71f      	b.n	10014b5e <__aeabi_dsub+0x182>
10014d1e:	4663      	mov	r3, ip
10014d20:	0002      	movs	r2, r0
10014d22:	3b20      	subs	r3, #32
10014d24:	40da      	lsrs	r2, r3
10014d26:	4663      	mov	r3, ip
10014d28:	2b20      	cmp	r3, #32
10014d2a:	d071      	beq.n	10014e10 <__aeabi_dsub+0x434>
10014d2c:	2340      	movs	r3, #64	; 0x40
10014d2e:	4666      	mov	r6, ip
10014d30:	1b9b      	subs	r3, r3, r6
10014d32:	4098      	lsls	r0, r3
10014d34:	4301      	orrs	r1, r0
10014d36:	1e48      	subs	r0, r1, #1
10014d38:	4181      	sbcs	r1, r0
10014d3a:	4311      	orrs	r1, r2
10014d3c:	2200      	movs	r2, #0
10014d3e:	e6cf      	b.n	10014ae0 <__aeabi_dsub+0x104>
10014d40:	000007ff 	.word	0x000007ff
10014d44:	ff7fffff 	.word	0xff7fffff
10014d48:	800fffff 	.word	0x800fffff
10014d4c:	2c00      	cmp	r4, #0
10014d4e:	d048      	beq.n	10014de2 <__aeabi_dsub+0x406>
10014d50:	4cca      	ldr	r4, [pc, #808]	; (1001507c <__aeabi_dsub+0x6a0>)
10014d52:	42a2      	cmp	r2, r4
10014d54:	d100      	bne.n	10014d58 <__aeabi_dsub+0x37c>
10014d56:	e0a2      	b.n	10014e9e <__aeabi_dsub+0x4c2>
10014d58:	4274      	negs	r4, r6
10014d5a:	46a1      	mov	r9, r4
10014d5c:	2480      	movs	r4, #128	; 0x80
10014d5e:	0424      	lsls	r4, r4, #16
10014d60:	4327      	orrs	r7, r4
10014d62:	464c      	mov	r4, r9
10014d64:	2c38      	cmp	r4, #56	; 0x38
10014d66:	dd00      	ble.n	10014d6a <__aeabi_dsub+0x38e>
10014d68:	e0db      	b.n	10014f22 <__aeabi_dsub+0x546>
10014d6a:	2c1f      	cmp	r4, #31
10014d6c:	dd00      	ble.n	10014d70 <__aeabi_dsub+0x394>
10014d6e:	e144      	b.n	10014ffa <__aeabi_dsub+0x61e>
10014d70:	464e      	mov	r6, r9
10014d72:	2420      	movs	r4, #32
10014d74:	1ba4      	subs	r4, r4, r6
10014d76:	003e      	movs	r6, r7
10014d78:	40a6      	lsls	r6, r4
10014d7a:	46a2      	mov	sl, r4
10014d7c:	46b0      	mov	r8, r6
10014d7e:	464c      	mov	r4, r9
10014d80:	002e      	movs	r6, r5
10014d82:	40e6      	lsrs	r6, r4
10014d84:	46b4      	mov	ip, r6
10014d86:	4646      	mov	r6, r8
10014d88:	4664      	mov	r4, ip
10014d8a:	4326      	orrs	r6, r4
10014d8c:	4654      	mov	r4, sl
10014d8e:	40a5      	lsls	r5, r4
10014d90:	1e6c      	subs	r4, r5, #1
10014d92:	41a5      	sbcs	r5, r4
10014d94:	0034      	movs	r4, r6
10014d96:	432c      	orrs	r4, r5
10014d98:	464d      	mov	r5, r9
10014d9a:	40ef      	lsrs	r7, r5
10014d9c:	1b0d      	subs	r5, r1, r4
10014d9e:	e028      	b.n	10014df2 <__aeabi_dsub+0x416>
10014da0:	464a      	mov	r2, r9
10014da2:	4643      	mov	r3, r8
10014da4:	464d      	mov	r5, r9
10014da6:	431a      	orrs	r2, r3
10014da8:	d000      	beq.n	10014dac <__aeabi_dsub+0x3d0>
10014daa:	e6a5      	b.n	10014af8 <__aeabi_dsub+0x11c>
10014dac:	2300      	movs	r3, #0
10014dae:	2400      	movs	r4, #0
10014db0:	2500      	movs	r5, #0
10014db2:	e6de      	b.n	10014b72 <__aeabi_dsub+0x196>
10014db4:	2a1f      	cmp	r2, #31
10014db6:	dc5a      	bgt.n	10014e6e <__aeabi_dsub+0x492>
10014db8:	4666      	mov	r6, ip
10014dba:	2220      	movs	r2, #32
10014dbc:	1b92      	subs	r2, r2, r6
10014dbe:	0006      	movs	r6, r0
10014dc0:	4096      	lsls	r6, r2
10014dc2:	4691      	mov	r9, r2
10014dc4:	46b0      	mov	r8, r6
10014dc6:	4662      	mov	r2, ip
10014dc8:	000e      	movs	r6, r1
10014dca:	40d6      	lsrs	r6, r2
10014dcc:	4642      	mov	r2, r8
10014dce:	4316      	orrs	r6, r2
10014dd0:	464a      	mov	r2, r9
10014dd2:	4091      	lsls	r1, r2
10014dd4:	1e4a      	subs	r2, r1, #1
10014dd6:	4191      	sbcs	r1, r2
10014dd8:	0002      	movs	r2, r0
10014dda:	4660      	mov	r0, ip
10014ddc:	4331      	orrs	r1, r6
10014dde:	40c2      	lsrs	r2, r0
10014de0:	e6e4      	b.n	10014bac <__aeabi_dsub+0x1d0>
10014de2:	003c      	movs	r4, r7
10014de4:	432c      	orrs	r4, r5
10014de6:	d05a      	beq.n	10014e9e <__aeabi_dsub+0x4c2>
10014de8:	43f4      	mvns	r4, r6
10014dea:	46a1      	mov	r9, r4
10014dec:	2c00      	cmp	r4, #0
10014dee:	d152      	bne.n	10014e96 <__aeabi_dsub+0x4ba>
10014df0:	1b4d      	subs	r5, r1, r5
10014df2:	42a9      	cmp	r1, r5
10014df4:	4189      	sbcs	r1, r1
10014df6:	1bc7      	subs	r7, r0, r7
10014df8:	4249      	negs	r1, r1
10014dfa:	1a7f      	subs	r7, r7, r1
10014dfc:	0014      	movs	r4, r2
10014dfe:	469a      	mov	sl, r3
10014e00:	e675      	b.n	10014aee <__aeabi_dsub+0x112>
10014e02:	4a9e      	ldr	r2, [pc, #632]	; (1001507c <__aeabi_dsub+0x6a0>)
10014e04:	4294      	cmp	r4, r2
10014e06:	d000      	beq.n	10014e0a <__aeabi_dsub+0x42e>
10014e08:	e6c7      	b.n	10014b9a <__aeabi_dsub+0x1be>
10014e0a:	e613      	b.n	10014a34 <__aeabi_dsub+0x58>
10014e0c:	2200      	movs	r2, #0
10014e0e:	e77f      	b.n	10014d10 <__aeabi_dsub+0x334>
10014e10:	2000      	movs	r0, #0
10014e12:	e78f      	b.n	10014d34 <__aeabi_dsub+0x358>
10014e14:	2c00      	cmp	r4, #0
10014e16:	d000      	beq.n	10014e1a <__aeabi_dsub+0x43e>
10014e18:	e0c8      	b.n	10014fac <__aeabi_dsub+0x5d0>
10014e1a:	003b      	movs	r3, r7
10014e1c:	432b      	orrs	r3, r5
10014e1e:	d100      	bne.n	10014e22 <__aeabi_dsub+0x446>
10014e20:	e10f      	b.n	10015042 <__aeabi_dsub+0x666>
10014e22:	0003      	movs	r3, r0
10014e24:	430b      	orrs	r3, r1
10014e26:	d100      	bne.n	10014e2a <__aeabi_dsub+0x44e>
10014e28:	e604      	b.n	10014a34 <__aeabi_dsub+0x58>
10014e2a:	1869      	adds	r1, r5, r1
10014e2c:	42a9      	cmp	r1, r5
10014e2e:	419b      	sbcs	r3, r3
10014e30:	183f      	adds	r7, r7, r0
10014e32:	425b      	negs	r3, r3
10014e34:	19df      	adds	r7, r3, r7
10014e36:	023b      	lsls	r3, r7, #8
10014e38:	d400      	bmi.n	10014e3c <__aeabi_dsub+0x460>
10014e3a:	e11a      	b.n	10015072 <__aeabi_dsub+0x696>
10014e3c:	4b90      	ldr	r3, [pc, #576]	; (10015080 <__aeabi_dsub+0x6a4>)
10014e3e:	000d      	movs	r5, r1
10014e40:	401f      	ands	r7, r3
10014e42:	4664      	mov	r4, ip
10014e44:	e5f6      	b.n	10014a34 <__aeabi_dsub+0x58>
10014e46:	469a      	mov	sl, r3
10014e48:	e689      	b.n	10014b5e <__aeabi_dsub+0x182>
10014e4a:	003a      	movs	r2, r7
10014e4c:	432a      	orrs	r2, r5
10014e4e:	2c00      	cmp	r4, #0
10014e50:	d15c      	bne.n	10014f0c <__aeabi_dsub+0x530>
10014e52:	2a00      	cmp	r2, #0
10014e54:	d175      	bne.n	10014f42 <__aeabi_dsub+0x566>
10014e56:	0002      	movs	r2, r0
10014e58:	430a      	orrs	r2, r1
10014e5a:	d100      	bne.n	10014e5e <__aeabi_dsub+0x482>
10014e5c:	e0ca      	b.n	10014ff4 <__aeabi_dsub+0x618>
10014e5e:	0007      	movs	r7, r0
10014e60:	000d      	movs	r5, r1
10014e62:	469a      	mov	sl, r3
10014e64:	e5e6      	b.n	10014a34 <__aeabi_dsub+0x58>
10014e66:	4664      	mov	r4, ip
10014e68:	2200      	movs	r2, #0
10014e6a:	2500      	movs	r5, #0
10014e6c:	e681      	b.n	10014b72 <__aeabi_dsub+0x196>
10014e6e:	4662      	mov	r2, ip
10014e70:	0006      	movs	r6, r0
10014e72:	3a20      	subs	r2, #32
10014e74:	40d6      	lsrs	r6, r2
10014e76:	4662      	mov	r2, ip
10014e78:	46b0      	mov	r8, r6
10014e7a:	2a20      	cmp	r2, #32
10014e7c:	d100      	bne.n	10014e80 <__aeabi_dsub+0x4a4>
10014e7e:	e0b7      	b.n	10014ff0 <__aeabi_dsub+0x614>
10014e80:	2240      	movs	r2, #64	; 0x40
10014e82:	4666      	mov	r6, ip
10014e84:	1b92      	subs	r2, r2, r6
10014e86:	4090      	lsls	r0, r2
10014e88:	4301      	orrs	r1, r0
10014e8a:	4642      	mov	r2, r8
10014e8c:	1e48      	subs	r0, r1, #1
10014e8e:	4181      	sbcs	r1, r0
10014e90:	4311      	orrs	r1, r2
10014e92:	2200      	movs	r2, #0
10014e94:	e68a      	b.n	10014bac <__aeabi_dsub+0x1d0>
10014e96:	4c79      	ldr	r4, [pc, #484]	; (1001507c <__aeabi_dsub+0x6a0>)
10014e98:	42a2      	cmp	r2, r4
10014e9a:	d000      	beq.n	10014e9e <__aeabi_dsub+0x4c2>
10014e9c:	e761      	b.n	10014d62 <__aeabi_dsub+0x386>
10014e9e:	0007      	movs	r7, r0
10014ea0:	000d      	movs	r5, r1
10014ea2:	0014      	movs	r4, r2
10014ea4:	469a      	mov	sl, r3
10014ea6:	e5c5      	b.n	10014a34 <__aeabi_dsub+0x58>
10014ea8:	2c00      	cmp	r4, #0
10014eaa:	d141      	bne.n	10014f30 <__aeabi_dsub+0x554>
10014eac:	003c      	movs	r4, r7
10014eae:	432c      	orrs	r4, r5
10014eb0:	d078      	beq.n	10014fa4 <__aeabi_dsub+0x5c8>
10014eb2:	43f4      	mvns	r4, r6
10014eb4:	46a1      	mov	r9, r4
10014eb6:	2c00      	cmp	r4, #0
10014eb8:	d020      	beq.n	10014efc <__aeabi_dsub+0x520>
10014eba:	4c70      	ldr	r4, [pc, #448]	; (1001507c <__aeabi_dsub+0x6a0>)
10014ebc:	42a2      	cmp	r2, r4
10014ebe:	d071      	beq.n	10014fa4 <__aeabi_dsub+0x5c8>
10014ec0:	464c      	mov	r4, r9
10014ec2:	2c38      	cmp	r4, #56	; 0x38
10014ec4:	dd00      	ble.n	10014ec8 <__aeabi_dsub+0x4ec>
10014ec6:	e0b2      	b.n	1001502e <__aeabi_dsub+0x652>
10014ec8:	2c1f      	cmp	r4, #31
10014eca:	dd00      	ble.n	10014ece <__aeabi_dsub+0x4f2>
10014ecc:	e0bc      	b.n	10015048 <__aeabi_dsub+0x66c>
10014ece:	2620      	movs	r6, #32
10014ed0:	1b34      	subs	r4, r6, r4
10014ed2:	46a2      	mov	sl, r4
10014ed4:	003c      	movs	r4, r7
10014ed6:	4656      	mov	r6, sl
10014ed8:	40b4      	lsls	r4, r6
10014eda:	464e      	mov	r6, r9
10014edc:	46a0      	mov	r8, r4
10014ede:	002c      	movs	r4, r5
10014ee0:	40f4      	lsrs	r4, r6
10014ee2:	46a4      	mov	ip, r4
10014ee4:	4644      	mov	r4, r8
10014ee6:	4666      	mov	r6, ip
10014ee8:	4334      	orrs	r4, r6
10014eea:	46a4      	mov	ip, r4
10014eec:	4654      	mov	r4, sl
10014eee:	40a5      	lsls	r5, r4
10014ef0:	4664      	mov	r4, ip
10014ef2:	1e6e      	subs	r6, r5, #1
10014ef4:	41b5      	sbcs	r5, r6
10014ef6:	4325      	orrs	r5, r4
10014ef8:	464c      	mov	r4, r9
10014efa:	40e7      	lsrs	r7, r4
10014efc:	186d      	adds	r5, r5, r1
10014efe:	428d      	cmp	r5, r1
10014f00:	4189      	sbcs	r1, r1
10014f02:	183f      	adds	r7, r7, r0
10014f04:	4249      	negs	r1, r1
10014f06:	19cf      	adds	r7, r1, r7
10014f08:	0014      	movs	r4, r2
10014f0a:	e656      	b.n	10014bba <__aeabi_dsub+0x1de>
10014f0c:	2a00      	cmp	r2, #0
10014f0e:	d12f      	bne.n	10014f70 <__aeabi_dsub+0x594>
10014f10:	0002      	movs	r2, r0
10014f12:	430a      	orrs	r2, r1
10014f14:	d100      	bne.n	10014f18 <__aeabi_dsub+0x53c>
10014f16:	e084      	b.n	10015022 <__aeabi_dsub+0x646>
10014f18:	0007      	movs	r7, r0
10014f1a:	000d      	movs	r5, r1
10014f1c:	469a      	mov	sl, r3
10014f1e:	4c57      	ldr	r4, [pc, #348]	; (1001507c <__aeabi_dsub+0x6a0>)
10014f20:	e588      	b.n	10014a34 <__aeabi_dsub+0x58>
10014f22:	433d      	orrs	r5, r7
10014f24:	1e6f      	subs	r7, r5, #1
10014f26:	41bd      	sbcs	r5, r7
10014f28:	b2ec      	uxtb	r4, r5
10014f2a:	2700      	movs	r7, #0
10014f2c:	1b0d      	subs	r5, r1, r4
10014f2e:	e760      	b.n	10014df2 <__aeabi_dsub+0x416>
10014f30:	4c52      	ldr	r4, [pc, #328]	; (1001507c <__aeabi_dsub+0x6a0>)
10014f32:	42a2      	cmp	r2, r4
10014f34:	d036      	beq.n	10014fa4 <__aeabi_dsub+0x5c8>
10014f36:	4274      	negs	r4, r6
10014f38:	2680      	movs	r6, #128	; 0x80
10014f3a:	0436      	lsls	r6, r6, #16
10014f3c:	46a1      	mov	r9, r4
10014f3e:	4337      	orrs	r7, r6
10014f40:	e7be      	b.n	10014ec0 <__aeabi_dsub+0x4e4>
10014f42:	0002      	movs	r2, r0
10014f44:	430a      	orrs	r2, r1
10014f46:	d100      	bne.n	10014f4a <__aeabi_dsub+0x56e>
10014f48:	e574      	b.n	10014a34 <__aeabi_dsub+0x58>
10014f4a:	1a6a      	subs	r2, r5, r1
10014f4c:	4690      	mov	r8, r2
10014f4e:	4545      	cmp	r5, r8
10014f50:	41b6      	sbcs	r6, r6
10014f52:	1a3a      	subs	r2, r7, r0
10014f54:	4276      	negs	r6, r6
10014f56:	1b92      	subs	r2, r2, r6
10014f58:	4694      	mov	ip, r2
10014f5a:	0212      	lsls	r2, r2, #8
10014f5c:	d400      	bmi.n	10014f60 <__aeabi_dsub+0x584>
10014f5e:	e5f7      	b.n	10014b50 <__aeabi_dsub+0x174>
10014f60:	1b4d      	subs	r5, r1, r5
10014f62:	42a9      	cmp	r1, r5
10014f64:	4189      	sbcs	r1, r1
10014f66:	1bc7      	subs	r7, r0, r7
10014f68:	4249      	negs	r1, r1
10014f6a:	1a7f      	subs	r7, r7, r1
10014f6c:	469a      	mov	sl, r3
10014f6e:	e561      	b.n	10014a34 <__aeabi_dsub+0x58>
10014f70:	0002      	movs	r2, r0
10014f72:	430a      	orrs	r2, r1
10014f74:	d03a      	beq.n	10014fec <__aeabi_dsub+0x610>
10014f76:	08ed      	lsrs	r5, r5, #3
10014f78:	077c      	lsls	r4, r7, #29
10014f7a:	432c      	orrs	r4, r5
10014f7c:	2580      	movs	r5, #128	; 0x80
10014f7e:	08fa      	lsrs	r2, r7, #3
10014f80:	032d      	lsls	r5, r5, #12
10014f82:	422a      	tst	r2, r5
10014f84:	d008      	beq.n	10014f98 <__aeabi_dsub+0x5bc>
10014f86:	08c7      	lsrs	r7, r0, #3
10014f88:	422f      	tst	r7, r5
10014f8a:	d105      	bne.n	10014f98 <__aeabi_dsub+0x5bc>
10014f8c:	0745      	lsls	r5, r0, #29
10014f8e:	002c      	movs	r4, r5
10014f90:	003a      	movs	r2, r7
10014f92:	469a      	mov	sl, r3
10014f94:	08c9      	lsrs	r1, r1, #3
10014f96:	430c      	orrs	r4, r1
10014f98:	0f67      	lsrs	r7, r4, #29
10014f9a:	00d2      	lsls	r2, r2, #3
10014f9c:	00e5      	lsls	r5, r4, #3
10014f9e:	4317      	orrs	r7, r2
10014fa0:	4c36      	ldr	r4, [pc, #216]	; (1001507c <__aeabi_dsub+0x6a0>)
10014fa2:	e547      	b.n	10014a34 <__aeabi_dsub+0x58>
10014fa4:	0007      	movs	r7, r0
10014fa6:	000d      	movs	r5, r1
10014fa8:	0014      	movs	r4, r2
10014faa:	e543      	b.n	10014a34 <__aeabi_dsub+0x58>
10014fac:	003a      	movs	r2, r7
10014fae:	432a      	orrs	r2, r5
10014fb0:	d043      	beq.n	1001503a <__aeabi_dsub+0x65e>
10014fb2:	0002      	movs	r2, r0
10014fb4:	430a      	orrs	r2, r1
10014fb6:	d019      	beq.n	10014fec <__aeabi_dsub+0x610>
10014fb8:	08ed      	lsrs	r5, r5, #3
10014fba:	077c      	lsls	r4, r7, #29
10014fbc:	432c      	orrs	r4, r5
10014fbe:	2580      	movs	r5, #128	; 0x80
10014fc0:	08fa      	lsrs	r2, r7, #3
10014fc2:	032d      	lsls	r5, r5, #12
10014fc4:	422a      	tst	r2, r5
10014fc6:	d007      	beq.n	10014fd8 <__aeabi_dsub+0x5fc>
10014fc8:	08c6      	lsrs	r6, r0, #3
10014fca:	422e      	tst	r6, r5
10014fcc:	d104      	bne.n	10014fd8 <__aeabi_dsub+0x5fc>
10014fce:	0747      	lsls	r7, r0, #29
10014fd0:	003c      	movs	r4, r7
10014fd2:	0032      	movs	r2, r6
10014fd4:	08c9      	lsrs	r1, r1, #3
10014fd6:	430c      	orrs	r4, r1
10014fd8:	00d7      	lsls	r7, r2, #3
10014fda:	0f62      	lsrs	r2, r4, #29
10014fdc:	00e5      	lsls	r5, r4, #3
10014fde:	4317      	orrs	r7, r2
10014fe0:	469a      	mov	sl, r3
10014fe2:	4c26      	ldr	r4, [pc, #152]	; (1001507c <__aeabi_dsub+0x6a0>)
10014fe4:	e526      	b.n	10014a34 <__aeabi_dsub+0x58>
10014fe6:	2200      	movs	r2, #0
10014fe8:	2500      	movs	r5, #0
10014fea:	e544      	b.n	10014a76 <__aeabi_dsub+0x9a>
10014fec:	4c23      	ldr	r4, [pc, #140]	; (1001507c <__aeabi_dsub+0x6a0>)
10014fee:	e521      	b.n	10014a34 <__aeabi_dsub+0x58>
10014ff0:	2000      	movs	r0, #0
10014ff2:	e749      	b.n	10014e88 <__aeabi_dsub+0x4ac>
10014ff4:	2300      	movs	r3, #0
10014ff6:	2500      	movs	r5, #0
10014ff8:	e5bb      	b.n	10014b72 <__aeabi_dsub+0x196>
10014ffa:	464c      	mov	r4, r9
10014ffc:	003e      	movs	r6, r7
10014ffe:	3c20      	subs	r4, #32
10015000:	40e6      	lsrs	r6, r4
10015002:	464c      	mov	r4, r9
10015004:	46b4      	mov	ip, r6
10015006:	2c20      	cmp	r4, #32
10015008:	d031      	beq.n	1001506e <__aeabi_dsub+0x692>
1001500a:	2440      	movs	r4, #64	; 0x40
1001500c:	464e      	mov	r6, r9
1001500e:	1ba6      	subs	r6, r4, r6
10015010:	40b7      	lsls	r7, r6
10015012:	433d      	orrs	r5, r7
10015014:	1e6c      	subs	r4, r5, #1
10015016:	41a5      	sbcs	r5, r4
10015018:	4664      	mov	r4, ip
1001501a:	432c      	orrs	r4, r5
1001501c:	2700      	movs	r7, #0
1001501e:	1b0d      	subs	r5, r1, r4
10015020:	e6e7      	b.n	10014df2 <__aeabi_dsub+0x416>
10015022:	2280      	movs	r2, #128	; 0x80
10015024:	2300      	movs	r3, #0
10015026:	0312      	lsls	r2, r2, #12
10015028:	4c14      	ldr	r4, [pc, #80]	; (1001507c <__aeabi_dsub+0x6a0>)
1001502a:	2500      	movs	r5, #0
1001502c:	e5a1      	b.n	10014b72 <__aeabi_dsub+0x196>
1001502e:	433d      	orrs	r5, r7
10015030:	1e6f      	subs	r7, r5, #1
10015032:	41bd      	sbcs	r5, r7
10015034:	2700      	movs	r7, #0
10015036:	b2ed      	uxtb	r5, r5
10015038:	e760      	b.n	10014efc <__aeabi_dsub+0x520>
1001503a:	0007      	movs	r7, r0
1001503c:	000d      	movs	r5, r1
1001503e:	4c0f      	ldr	r4, [pc, #60]	; (1001507c <__aeabi_dsub+0x6a0>)
10015040:	e4f8      	b.n	10014a34 <__aeabi_dsub+0x58>
10015042:	0007      	movs	r7, r0
10015044:	000d      	movs	r5, r1
10015046:	e4f5      	b.n	10014a34 <__aeabi_dsub+0x58>
10015048:	464e      	mov	r6, r9
1001504a:	003c      	movs	r4, r7
1001504c:	3e20      	subs	r6, #32
1001504e:	40f4      	lsrs	r4, r6
10015050:	46a0      	mov	r8, r4
10015052:	464c      	mov	r4, r9
10015054:	2c20      	cmp	r4, #32
10015056:	d00e      	beq.n	10015076 <__aeabi_dsub+0x69a>
10015058:	2440      	movs	r4, #64	; 0x40
1001505a:	464e      	mov	r6, r9
1001505c:	1ba4      	subs	r4, r4, r6
1001505e:	40a7      	lsls	r7, r4
10015060:	433d      	orrs	r5, r7
10015062:	1e6f      	subs	r7, r5, #1
10015064:	41bd      	sbcs	r5, r7
10015066:	4644      	mov	r4, r8
10015068:	2700      	movs	r7, #0
1001506a:	4325      	orrs	r5, r4
1001506c:	e746      	b.n	10014efc <__aeabi_dsub+0x520>
1001506e:	2700      	movs	r7, #0
10015070:	e7cf      	b.n	10015012 <__aeabi_dsub+0x636>
10015072:	000d      	movs	r5, r1
10015074:	e573      	b.n	10014b5e <__aeabi_dsub+0x182>
10015076:	2700      	movs	r7, #0
10015078:	e7f2      	b.n	10015060 <__aeabi_dsub+0x684>
1001507a:	46c0      	nop			; (mov r8, r8)
1001507c:	000007ff 	.word	0x000007ff
10015080:	ff7fffff 	.word	0xff7fffff

10015084 <__aeabi_d2iz>:
10015084:	030b      	lsls	r3, r1, #12
10015086:	b530      	push	{r4, r5, lr}
10015088:	4d13      	ldr	r5, [pc, #76]	; (100150d8 <__aeabi_d2iz+0x54>)
1001508a:	0b1a      	lsrs	r2, r3, #12
1001508c:	004b      	lsls	r3, r1, #1
1001508e:	0d5b      	lsrs	r3, r3, #21
10015090:	0fc9      	lsrs	r1, r1, #31
10015092:	2400      	movs	r4, #0
10015094:	42ab      	cmp	r3, r5
10015096:	dd11      	ble.n	100150bc <__aeabi_d2iz+0x38>
10015098:	4c10      	ldr	r4, [pc, #64]	; (100150dc <__aeabi_d2iz+0x58>)
1001509a:	42a3      	cmp	r3, r4
1001509c:	dc10      	bgt.n	100150c0 <__aeabi_d2iz+0x3c>
1001509e:	2480      	movs	r4, #128	; 0x80
100150a0:	0364      	lsls	r4, r4, #13
100150a2:	4322      	orrs	r2, r4
100150a4:	4c0e      	ldr	r4, [pc, #56]	; (100150e0 <__aeabi_d2iz+0x5c>)
100150a6:	1ae4      	subs	r4, r4, r3
100150a8:	2c1f      	cmp	r4, #31
100150aa:	dd0c      	ble.n	100150c6 <__aeabi_d2iz+0x42>
100150ac:	480d      	ldr	r0, [pc, #52]	; (100150e4 <__aeabi_d2iz+0x60>)
100150ae:	1ac3      	subs	r3, r0, r3
100150b0:	40da      	lsrs	r2, r3
100150b2:	0013      	movs	r3, r2
100150b4:	425c      	negs	r4, r3
100150b6:	2900      	cmp	r1, #0
100150b8:	d100      	bne.n	100150bc <__aeabi_d2iz+0x38>
100150ba:	001c      	movs	r4, r3
100150bc:	0020      	movs	r0, r4
100150be:	bd30      	pop	{r4, r5, pc}
100150c0:	4b09      	ldr	r3, [pc, #36]	; (100150e8 <__aeabi_d2iz+0x64>)
100150c2:	18cc      	adds	r4, r1, r3
100150c4:	e7fa      	b.n	100150bc <__aeabi_d2iz+0x38>
100150c6:	40e0      	lsrs	r0, r4
100150c8:	4c08      	ldr	r4, [pc, #32]	; (100150ec <__aeabi_d2iz+0x68>)
100150ca:	46a4      	mov	ip, r4
100150cc:	4463      	add	r3, ip
100150ce:	409a      	lsls	r2, r3
100150d0:	0013      	movs	r3, r2
100150d2:	4303      	orrs	r3, r0
100150d4:	e7ee      	b.n	100150b4 <__aeabi_d2iz+0x30>
100150d6:	46c0      	nop			; (mov r8, r8)
100150d8:	000003fe 	.word	0x000003fe
100150dc:	0000041d 	.word	0x0000041d
100150e0:	00000433 	.word	0x00000433
100150e4:	00000413 	.word	0x00000413
100150e8:	7fffffff 	.word	0x7fffffff
100150ec:	fffffbed 	.word	0xfffffbed

100150f0 <__aeabi_ui2d>:
100150f0:	b570      	push	{r4, r5, r6, lr}
100150f2:	1e05      	subs	r5, r0, #0
100150f4:	d028      	beq.n	10015148 <__aeabi_ui2d+0x58>
100150f6:	f000 f833 	bl	10015160 <__clzsi2>
100150fa:	4b15      	ldr	r3, [pc, #84]	; (10015150 <__aeabi_ui2d+0x60>)
100150fc:	4a15      	ldr	r2, [pc, #84]	; (10015154 <__aeabi_ui2d+0x64>)
100150fe:	1a1b      	subs	r3, r3, r0
10015100:	1ad2      	subs	r2, r2, r3
10015102:	2a1f      	cmp	r2, #31
10015104:	dd16      	ble.n	10015134 <__aeabi_ui2d+0x44>
10015106:	002c      	movs	r4, r5
10015108:	4a13      	ldr	r2, [pc, #76]	; (10015158 <__aeabi_ui2d+0x68>)
1001510a:	2500      	movs	r5, #0
1001510c:	1ad2      	subs	r2, r2, r3
1001510e:	4094      	lsls	r4, r2
10015110:	055a      	lsls	r2, r3, #21
10015112:	0324      	lsls	r4, r4, #12
10015114:	0b24      	lsrs	r4, r4, #12
10015116:	0d52      	lsrs	r2, r2, #21
10015118:	2100      	movs	r1, #0
1001511a:	0324      	lsls	r4, r4, #12
1001511c:	0d0b      	lsrs	r3, r1, #20
1001511e:	0b24      	lsrs	r4, r4, #12
10015120:	051b      	lsls	r3, r3, #20
10015122:	4323      	orrs	r3, r4
10015124:	4c0d      	ldr	r4, [pc, #52]	; (1001515c <__aeabi_ui2d+0x6c>)
10015126:	0512      	lsls	r2, r2, #20
10015128:	4023      	ands	r3, r4
1001512a:	4313      	orrs	r3, r2
1001512c:	005b      	lsls	r3, r3, #1
1001512e:	0028      	movs	r0, r5
10015130:	0859      	lsrs	r1, r3, #1
10015132:	bd70      	pop	{r4, r5, r6, pc}
10015134:	210b      	movs	r1, #11
10015136:	002c      	movs	r4, r5
10015138:	1a08      	subs	r0, r1, r0
1001513a:	40c4      	lsrs	r4, r0
1001513c:	4095      	lsls	r5, r2
1001513e:	0324      	lsls	r4, r4, #12
10015140:	055a      	lsls	r2, r3, #21
10015142:	0b24      	lsrs	r4, r4, #12
10015144:	0d52      	lsrs	r2, r2, #21
10015146:	e7e7      	b.n	10015118 <__aeabi_ui2d+0x28>
10015148:	2200      	movs	r2, #0
1001514a:	2400      	movs	r4, #0
1001514c:	e7e4      	b.n	10015118 <__aeabi_ui2d+0x28>
1001514e:	46c0      	nop			; (mov r8, r8)
10015150:	0000041e 	.word	0x0000041e
10015154:	00000433 	.word	0x00000433
10015158:	00000413 	.word	0x00000413
1001515c:	800fffff 	.word	0x800fffff

10015160 <__clzsi2>:
10015160:	211c      	movs	r1, #28
10015162:	2301      	movs	r3, #1
10015164:	041b      	lsls	r3, r3, #16
10015166:	4298      	cmp	r0, r3
10015168:	d301      	bcc.n	1001516e <__clzsi2+0xe>
1001516a:	0c00      	lsrs	r0, r0, #16
1001516c:	3910      	subs	r1, #16
1001516e:	0a1b      	lsrs	r3, r3, #8
10015170:	4298      	cmp	r0, r3
10015172:	d301      	bcc.n	10015178 <__clzsi2+0x18>
10015174:	0a00      	lsrs	r0, r0, #8
10015176:	3908      	subs	r1, #8
10015178:	091b      	lsrs	r3, r3, #4
1001517a:	4298      	cmp	r0, r3
1001517c:	d301      	bcc.n	10015182 <__clzsi2+0x22>
1001517e:	0900      	lsrs	r0, r0, #4
10015180:	3904      	subs	r1, #4
10015182:	a202      	add	r2, pc, #8	; (adr r2, 1001518c <__clzsi2+0x2c>)
10015184:	5c10      	ldrb	r0, [r2, r0]
10015186:	1840      	adds	r0, r0, r1
10015188:	4770      	bx	lr
1001518a:	46c0      	nop			; (mov r8, r8)
1001518c:	02020304 	.word	0x02020304
10015190:	01010101 	.word	0x01010101
	...

1001519c <__libc_init_array>:
1001519c:	4b0e      	ldr	r3, [pc, #56]	; (100151d8 <__libc_init_array+0x3c>)
1001519e:	b570      	push	{r4, r5, r6, lr}
100151a0:	2500      	movs	r5, #0
100151a2:	001e      	movs	r6, r3
100151a4:	4c0d      	ldr	r4, [pc, #52]	; (100151dc <__libc_init_array+0x40>)
100151a6:	1ae4      	subs	r4, r4, r3
100151a8:	10a4      	asrs	r4, r4, #2
100151aa:	42a5      	cmp	r5, r4
100151ac:	d004      	beq.n	100151b8 <__libc_init_array+0x1c>
100151ae:	00ab      	lsls	r3, r5, #2
100151b0:	58f3      	ldr	r3, [r6, r3]
100151b2:	4798      	blx	r3
100151b4:	3501      	adds	r5, #1
100151b6:	e7f8      	b.n	100151aa <__libc_init_array+0xe>
100151b8:	f003 fa12 	bl	100185e0 <_init>
100151bc:	4b08      	ldr	r3, [pc, #32]	; (100151e0 <__libc_init_array+0x44>)
100151be:	2500      	movs	r5, #0
100151c0:	001e      	movs	r6, r3
100151c2:	4c08      	ldr	r4, [pc, #32]	; (100151e4 <__libc_init_array+0x48>)
100151c4:	1ae4      	subs	r4, r4, r3
100151c6:	10a4      	asrs	r4, r4, #2
100151c8:	42a5      	cmp	r5, r4
100151ca:	d004      	beq.n	100151d6 <__libc_init_array+0x3a>
100151cc:	00ab      	lsls	r3, r5, #2
100151ce:	58f3      	ldr	r3, [r6, r3]
100151d0:	4798      	blx	r3
100151d2:	3501      	adds	r5, #1
100151d4:	e7f8      	b.n	100151c8 <__libc_init_array+0x2c>
100151d6:	bd70      	pop	{r4, r5, r6, pc}
100151d8:	100185ec 	.word	0x100185ec
100151dc:	100185ec 	.word	0x100185ec
100151e0:	100185ec 	.word	0x100185ec
100151e4:	100185f0 	.word	0x100185f0

100151e8 <malloc>:
100151e8:	b510      	push	{r4, lr}
100151ea:	4b03      	ldr	r3, [pc, #12]	; (100151f8 <malloc+0x10>)
100151ec:	0001      	movs	r1, r0
100151ee:	6818      	ldr	r0, [r3, #0]
100151f0:	f000 f86a 	bl	100152c8 <_malloc_r>
100151f4:	bd10      	pop	{r4, pc}
100151f6:	46c0      	nop			; (mov r8, r8)
100151f8:	100186a8 	.word	0x100186a8

100151fc <memcmp>:
100151fc:	b530      	push	{r4, r5, lr}
100151fe:	2400      	movs	r4, #0
10015200:	42a2      	cmp	r2, r4
10015202:	d008      	beq.n	10015216 <memcmp+0x1a>
10015204:	5d03      	ldrb	r3, [r0, r4]
10015206:	1c65      	adds	r5, r4, #1
10015208:	5d0c      	ldrb	r4, [r1, r4]
1001520a:	42a3      	cmp	r3, r4
1001520c:	d001      	beq.n	10015212 <memcmp+0x16>
1001520e:	1b18      	subs	r0, r3, r4
10015210:	e002      	b.n	10015218 <memcmp+0x1c>
10015212:	002c      	movs	r4, r5
10015214:	e7f4      	b.n	10015200 <memcmp+0x4>
10015216:	2000      	movs	r0, #0
10015218:	bd30      	pop	{r4, r5, pc}

1001521a <memcpy>:
1001521a:	2300      	movs	r3, #0
1001521c:	b510      	push	{r4, lr}
1001521e:	429a      	cmp	r2, r3
10015220:	d003      	beq.n	1001522a <memcpy+0x10>
10015222:	5ccc      	ldrb	r4, [r1, r3]
10015224:	54c4      	strb	r4, [r0, r3]
10015226:	3301      	adds	r3, #1
10015228:	e7f9      	b.n	1001521e <memcpy+0x4>
1001522a:	bd10      	pop	{r4, pc}

1001522c <memset>:
1001522c:	0003      	movs	r3, r0
1001522e:	1882      	adds	r2, r0, r2
10015230:	4293      	cmp	r3, r2
10015232:	d002      	beq.n	1001523a <memset+0xe>
10015234:	7019      	strb	r1, [r3, #0]
10015236:	3301      	adds	r3, #1
10015238:	e7fa      	b.n	10015230 <memset+0x4>
1001523a:	4770      	bx	lr

1001523c <_free_r>:
1001523c:	b530      	push	{r4, r5, lr}
1001523e:	2900      	cmp	r1, #0
10015240:	d03e      	beq.n	100152c0 <_free_r+0x84>
10015242:	3904      	subs	r1, #4
10015244:	680b      	ldr	r3, [r1, #0]
10015246:	2b00      	cmp	r3, #0
10015248:	da00      	bge.n	1001524c <_free_r+0x10>
1001524a:	18c9      	adds	r1, r1, r3
1001524c:	4a1d      	ldr	r2, [pc, #116]	; (100152c4 <_free_r+0x88>)
1001524e:	6813      	ldr	r3, [r2, #0]
10015250:	0014      	movs	r4, r2
10015252:	2b00      	cmp	r3, #0
10015254:	d102      	bne.n	1001525c <_free_r+0x20>
10015256:	604b      	str	r3, [r1, #4]
10015258:	6011      	str	r1, [r2, #0]
1001525a:	e031      	b.n	100152c0 <_free_r+0x84>
1001525c:	428b      	cmp	r3, r1
1001525e:	d90d      	bls.n	1001527c <_free_r+0x40>
10015260:	680a      	ldr	r2, [r1, #0]
10015262:	1888      	adds	r0, r1, r2
10015264:	4283      	cmp	r3, r0
10015266:	d103      	bne.n	10015270 <_free_r+0x34>
10015268:	6818      	ldr	r0, [r3, #0]
1001526a:	685b      	ldr	r3, [r3, #4]
1001526c:	1882      	adds	r2, r0, r2
1001526e:	600a      	str	r2, [r1, #0]
10015270:	604b      	str	r3, [r1, #4]
10015272:	6021      	str	r1, [r4, #0]
10015274:	e024      	b.n	100152c0 <_free_r+0x84>
10015276:	428a      	cmp	r2, r1
10015278:	d803      	bhi.n	10015282 <_free_r+0x46>
1001527a:	0013      	movs	r3, r2
1001527c:	685a      	ldr	r2, [r3, #4]
1001527e:	2a00      	cmp	r2, #0
10015280:	d1f9      	bne.n	10015276 <_free_r+0x3a>
10015282:	681d      	ldr	r5, [r3, #0]
10015284:	195c      	adds	r4, r3, r5
10015286:	428c      	cmp	r4, r1
10015288:	d10b      	bne.n	100152a2 <_free_r+0x66>
1001528a:	6809      	ldr	r1, [r1, #0]
1001528c:	1869      	adds	r1, r5, r1
1001528e:	1858      	adds	r0, r3, r1
10015290:	6019      	str	r1, [r3, #0]
10015292:	4282      	cmp	r2, r0
10015294:	d114      	bne.n	100152c0 <_free_r+0x84>
10015296:	6810      	ldr	r0, [r2, #0]
10015298:	6852      	ldr	r2, [r2, #4]
1001529a:	1841      	adds	r1, r0, r1
1001529c:	6019      	str	r1, [r3, #0]
1001529e:	605a      	str	r2, [r3, #4]
100152a0:	e00e      	b.n	100152c0 <_free_r+0x84>
100152a2:	428c      	cmp	r4, r1
100152a4:	d902      	bls.n	100152ac <_free_r+0x70>
100152a6:	230c      	movs	r3, #12
100152a8:	6003      	str	r3, [r0, #0]
100152aa:	e009      	b.n	100152c0 <_free_r+0x84>
100152ac:	6808      	ldr	r0, [r1, #0]
100152ae:	180c      	adds	r4, r1, r0
100152b0:	42a2      	cmp	r2, r4
100152b2:	d103      	bne.n	100152bc <_free_r+0x80>
100152b4:	6814      	ldr	r4, [r2, #0]
100152b6:	6852      	ldr	r2, [r2, #4]
100152b8:	1820      	adds	r0, r4, r0
100152ba:	6008      	str	r0, [r1, #0]
100152bc:	604a      	str	r2, [r1, #4]
100152be:	6059      	str	r1, [r3, #4]
100152c0:	bd30      	pop	{r4, r5, pc}
100152c2:	46c0      	nop			; (mov r8, r8)
100152c4:	1001a17c 	.word	0x1001a17c

100152c8 <_malloc_r>:
100152c8:	2303      	movs	r3, #3
100152ca:	b570      	push	{r4, r5, r6, lr}
100152cc:	1ccd      	adds	r5, r1, #3
100152ce:	439d      	bics	r5, r3
100152d0:	3508      	adds	r5, #8
100152d2:	0006      	movs	r6, r0
100152d4:	2d0c      	cmp	r5, #12
100152d6:	d201      	bcs.n	100152dc <_malloc_r+0x14>
100152d8:	250c      	movs	r5, #12
100152da:	e005      	b.n	100152e8 <_malloc_r+0x20>
100152dc:	2d00      	cmp	r5, #0
100152de:	da03      	bge.n	100152e8 <_malloc_r+0x20>
100152e0:	230c      	movs	r3, #12
100152e2:	2000      	movs	r0, #0
100152e4:	6033      	str	r3, [r6, #0]
100152e6:	e040      	b.n	1001536a <_malloc_r+0xa2>
100152e8:	42a9      	cmp	r1, r5
100152ea:	d8f9      	bhi.n	100152e0 <_malloc_r+0x18>
100152ec:	4b1f      	ldr	r3, [pc, #124]	; (1001536c <_malloc_r+0xa4>)
100152ee:	681c      	ldr	r4, [r3, #0]
100152f0:	001a      	movs	r2, r3
100152f2:	0021      	movs	r1, r4
100152f4:	2900      	cmp	r1, #0
100152f6:	d013      	beq.n	10015320 <_malloc_r+0x58>
100152f8:	680b      	ldr	r3, [r1, #0]
100152fa:	1b5b      	subs	r3, r3, r5
100152fc:	d40d      	bmi.n	1001531a <_malloc_r+0x52>
100152fe:	2b0b      	cmp	r3, #11
10015300:	d902      	bls.n	10015308 <_malloc_r+0x40>
10015302:	600b      	str	r3, [r1, #0]
10015304:	18cc      	adds	r4, r1, r3
10015306:	e01e      	b.n	10015346 <_malloc_r+0x7e>
10015308:	428c      	cmp	r4, r1
1001530a:	d102      	bne.n	10015312 <_malloc_r+0x4a>
1001530c:	6863      	ldr	r3, [r4, #4]
1001530e:	6013      	str	r3, [r2, #0]
10015310:	e01a      	b.n	10015348 <_malloc_r+0x80>
10015312:	684b      	ldr	r3, [r1, #4]
10015314:	6063      	str	r3, [r4, #4]
10015316:	000c      	movs	r4, r1
10015318:	e016      	b.n	10015348 <_malloc_r+0x80>
1001531a:	000c      	movs	r4, r1
1001531c:	6849      	ldr	r1, [r1, #4]
1001531e:	e7e9      	b.n	100152f4 <_malloc_r+0x2c>
10015320:	4c13      	ldr	r4, [pc, #76]	; (10015370 <_malloc_r+0xa8>)
10015322:	6823      	ldr	r3, [r4, #0]
10015324:	2b00      	cmp	r3, #0
10015326:	d103      	bne.n	10015330 <_malloc_r+0x68>
10015328:	0030      	movs	r0, r6
1001532a:	f000 f8f9 	bl	10015520 <_sbrk_r>
1001532e:	6020      	str	r0, [r4, #0]
10015330:	0029      	movs	r1, r5
10015332:	0030      	movs	r0, r6
10015334:	f000 f8f4 	bl	10015520 <_sbrk_r>
10015338:	1c43      	adds	r3, r0, #1
1001533a:	d0d1      	beq.n	100152e0 <_malloc_r+0x18>
1001533c:	2303      	movs	r3, #3
1001533e:	1cc4      	adds	r4, r0, #3
10015340:	439c      	bics	r4, r3
10015342:	42a0      	cmp	r0, r4
10015344:	d10a      	bne.n	1001535c <_malloc_r+0x94>
10015346:	6025      	str	r5, [r4, #0]
10015348:	0020      	movs	r0, r4
1001534a:	2207      	movs	r2, #7
1001534c:	300b      	adds	r0, #11
1001534e:	1d23      	adds	r3, r4, #4
10015350:	4390      	bics	r0, r2
10015352:	1ac3      	subs	r3, r0, r3
10015354:	d009      	beq.n	1001536a <_malloc_r+0xa2>
10015356:	425a      	negs	r2, r3
10015358:	50e2      	str	r2, [r4, r3]
1001535a:	e006      	b.n	1001536a <_malloc_r+0xa2>
1001535c:	1a21      	subs	r1, r4, r0
1001535e:	0030      	movs	r0, r6
10015360:	f000 f8de 	bl	10015520 <_sbrk_r>
10015364:	1c43      	adds	r3, r0, #1
10015366:	d1ee      	bne.n	10015346 <_malloc_r+0x7e>
10015368:	e7ba      	b.n	100152e0 <_malloc_r+0x18>
1001536a:	bd70      	pop	{r4, r5, r6, pc}
1001536c:	1001a17c 	.word	0x1001a17c
10015370:	1001a178 	.word	0x1001a178

10015374 <iprintf>:
10015374:	b40f      	push	{r0, r1, r2, r3}
10015376:	4b0b      	ldr	r3, [pc, #44]	; (100153a4 <iprintf+0x30>)
10015378:	b513      	push	{r0, r1, r4, lr}
1001537a:	681c      	ldr	r4, [r3, #0]
1001537c:	2c00      	cmp	r4, #0
1001537e:	d005      	beq.n	1001538c <iprintf+0x18>
10015380:	69a3      	ldr	r3, [r4, #24]
10015382:	2b00      	cmp	r3, #0
10015384:	d102      	bne.n	1001538c <iprintf+0x18>
10015386:	0020      	movs	r0, r4
10015388:	f000 fb58 	bl	10015a3c <__sinit>
1001538c:	ab05      	add	r3, sp, #20
1001538e:	9a04      	ldr	r2, [sp, #16]
10015390:	68a1      	ldr	r1, [r4, #8]
10015392:	0020      	movs	r0, r4
10015394:	9301      	str	r3, [sp, #4]
10015396:	f000 fc71 	bl	10015c7c <_vfiprintf_r>
1001539a:	bc16      	pop	{r1, r2, r4}
1001539c:	bc08      	pop	{r3}
1001539e:	b004      	add	sp, #16
100153a0:	4718      	bx	r3
100153a2:	46c0      	nop			; (mov r8, r8)
100153a4:	100186a8 	.word	0x100186a8

100153a8 <putchar>:
100153a8:	4b08      	ldr	r3, [pc, #32]	; (100153cc <putchar+0x24>)
100153aa:	b570      	push	{r4, r5, r6, lr}
100153ac:	681c      	ldr	r4, [r3, #0]
100153ae:	0005      	movs	r5, r0
100153b0:	2c00      	cmp	r4, #0
100153b2:	d005      	beq.n	100153c0 <putchar+0x18>
100153b4:	69a3      	ldr	r3, [r4, #24]
100153b6:	2b00      	cmp	r3, #0
100153b8:	d102      	bne.n	100153c0 <putchar+0x18>
100153ba:	0020      	movs	r0, r4
100153bc:	f000 fb3e 	bl	10015a3c <__sinit>
100153c0:	0029      	movs	r1, r5
100153c2:	68a2      	ldr	r2, [r4, #8]
100153c4:	0020      	movs	r0, r4
100153c6:	f000 ff05 	bl	100161d4 <_putc_r>
100153ca:	bd70      	pop	{r4, r5, r6, pc}
100153cc:	100186a8 	.word	0x100186a8

100153d0 <_puts_r>:
100153d0:	b570      	push	{r4, r5, r6, lr}
100153d2:	0005      	movs	r5, r0
100153d4:	000e      	movs	r6, r1
100153d6:	2800      	cmp	r0, #0
100153d8:	d004      	beq.n	100153e4 <_puts_r+0x14>
100153da:	6983      	ldr	r3, [r0, #24]
100153dc:	2b00      	cmp	r3, #0
100153de:	d101      	bne.n	100153e4 <_puts_r+0x14>
100153e0:	f000 fb2c 	bl	10015a3c <__sinit>
100153e4:	69ab      	ldr	r3, [r5, #24]
100153e6:	68ac      	ldr	r4, [r5, #8]
100153e8:	2b00      	cmp	r3, #0
100153ea:	d102      	bne.n	100153f2 <_puts_r+0x22>
100153ec:	0028      	movs	r0, r5
100153ee:	f000 fb25 	bl	10015a3c <__sinit>
100153f2:	4b25      	ldr	r3, [pc, #148]	; (10015488 <_puts_r+0xb8>)
100153f4:	429c      	cmp	r4, r3
100153f6:	d101      	bne.n	100153fc <_puts_r+0x2c>
100153f8:	686c      	ldr	r4, [r5, #4]
100153fa:	e008      	b.n	1001540e <_puts_r+0x3e>
100153fc:	4b23      	ldr	r3, [pc, #140]	; (1001548c <_puts_r+0xbc>)
100153fe:	429c      	cmp	r4, r3
10015400:	d101      	bne.n	10015406 <_puts_r+0x36>
10015402:	68ac      	ldr	r4, [r5, #8]
10015404:	e003      	b.n	1001540e <_puts_r+0x3e>
10015406:	4b22      	ldr	r3, [pc, #136]	; (10015490 <_puts_r+0xc0>)
10015408:	429c      	cmp	r4, r3
1001540a:	d100      	bne.n	1001540e <_puts_r+0x3e>
1001540c:	68ec      	ldr	r4, [r5, #12]
1001540e:	89a3      	ldrh	r3, [r4, #12]
10015410:	071b      	lsls	r3, r3, #28
10015412:	d502      	bpl.n	1001541a <_puts_r+0x4a>
10015414:	6923      	ldr	r3, [r4, #16]
10015416:	2b00      	cmp	r3, #0
10015418:	d111      	bne.n	1001543e <_puts_r+0x6e>
1001541a:	0021      	movs	r1, r4
1001541c:	0028      	movs	r0, r5
1001541e:	f000 f9a3 	bl	10015768 <__swsetup_r>
10015422:	2800      	cmp	r0, #0
10015424:	d00b      	beq.n	1001543e <_puts_r+0x6e>
10015426:	2001      	movs	r0, #1
10015428:	4240      	negs	r0, r0
1001542a:	e02b      	b.n	10015484 <_puts_r+0xb4>
1001542c:	3b01      	subs	r3, #1
1001542e:	3601      	adds	r6, #1
10015430:	60a3      	str	r3, [r4, #8]
10015432:	2b00      	cmp	r3, #0
10015434:	db08      	blt.n	10015448 <_puts_r+0x78>
10015436:	6823      	ldr	r3, [r4, #0]
10015438:	1c5a      	adds	r2, r3, #1
1001543a:	6022      	str	r2, [r4, #0]
1001543c:	7019      	strb	r1, [r3, #0]
1001543e:	7831      	ldrb	r1, [r6, #0]
10015440:	68a3      	ldr	r3, [r4, #8]
10015442:	2900      	cmp	r1, #0
10015444:	d1f2      	bne.n	1001542c <_puts_r+0x5c>
10015446:	e00b      	b.n	10015460 <_puts_r+0x90>
10015448:	69a2      	ldr	r2, [r4, #24]
1001544a:	4293      	cmp	r3, r2
1001544c:	db01      	blt.n	10015452 <_puts_r+0x82>
1001544e:	290a      	cmp	r1, #10
10015450:	d1f1      	bne.n	10015436 <_puts_r+0x66>
10015452:	0022      	movs	r2, r4
10015454:	0028      	movs	r0, r5
10015456:	f000 f92f 	bl	100156b8 <__swbuf_r>
1001545a:	1c43      	adds	r3, r0, #1
1001545c:	d1ef      	bne.n	1001543e <_puts_r+0x6e>
1001545e:	e7e2      	b.n	10015426 <_puts_r+0x56>
10015460:	3b01      	subs	r3, #1
10015462:	60a3      	str	r3, [r4, #8]
10015464:	2b00      	cmp	r3, #0
10015466:	da08      	bge.n	1001547a <_puts_r+0xaa>
10015468:	0022      	movs	r2, r4
1001546a:	310a      	adds	r1, #10
1001546c:	0028      	movs	r0, r5
1001546e:	f000 f923 	bl	100156b8 <__swbuf_r>
10015472:	1c43      	adds	r3, r0, #1
10015474:	d0d7      	beq.n	10015426 <_puts_r+0x56>
10015476:	200a      	movs	r0, #10
10015478:	e004      	b.n	10015484 <_puts_r+0xb4>
1001547a:	200a      	movs	r0, #10
1001547c:	6823      	ldr	r3, [r4, #0]
1001547e:	1c5a      	adds	r2, r3, #1
10015480:	6022      	str	r2, [r4, #0]
10015482:	7018      	strb	r0, [r3, #0]
10015484:	bd70      	pop	{r4, r5, r6, pc}
10015486:	46c0      	nop			; (mov r8, r8)
10015488:	1001854c 	.word	0x1001854c
1001548c:	1001856c 	.word	0x1001856c
10015490:	1001858c 	.word	0x1001858c

10015494 <puts>:
10015494:	b510      	push	{r4, lr}
10015496:	4b03      	ldr	r3, [pc, #12]	; (100154a4 <puts+0x10>)
10015498:	0001      	movs	r1, r0
1001549a:	6818      	ldr	r0, [r3, #0]
1001549c:	f7ff ff98 	bl	100153d0 <_puts_r>
100154a0:	bd10      	pop	{r4, pc}
100154a2:	46c0      	nop			; (mov r8, r8)
100154a4:	100186a8 	.word	0x100186a8

100154a8 <rand>:
100154a8:	4b15      	ldr	r3, [pc, #84]	; (10015500 <rand+0x58>)
100154aa:	b510      	push	{r4, lr}
100154ac:	681c      	ldr	r4, [r3, #0]
100154ae:	6ba3      	ldr	r3, [r4, #56]	; 0x38
100154b0:	2b00      	cmp	r3, #0
100154b2:	d115      	bne.n	100154e0 <rand+0x38>
100154b4:	2018      	movs	r0, #24
100154b6:	f7ff fe97 	bl	100151e8 <malloc>
100154ba:	4b12      	ldr	r3, [pc, #72]	; (10015504 <rand+0x5c>)
100154bc:	63a0      	str	r0, [r4, #56]	; 0x38
100154be:	8003      	strh	r3, [r0, #0]
100154c0:	4b11      	ldr	r3, [pc, #68]	; (10015508 <rand+0x60>)
100154c2:	2201      	movs	r2, #1
100154c4:	8043      	strh	r3, [r0, #2]
100154c6:	4b11      	ldr	r3, [pc, #68]	; (1001550c <rand+0x64>)
100154c8:	8083      	strh	r3, [r0, #4]
100154ca:	4b11      	ldr	r3, [pc, #68]	; (10015510 <rand+0x68>)
100154cc:	80c3      	strh	r3, [r0, #6]
100154ce:	4b11      	ldr	r3, [pc, #68]	; (10015514 <rand+0x6c>)
100154d0:	8103      	strh	r3, [r0, #8]
100154d2:	2305      	movs	r3, #5
100154d4:	8143      	strh	r3, [r0, #10]
100154d6:	3306      	adds	r3, #6
100154d8:	8183      	strh	r3, [r0, #12]
100154da:	2300      	movs	r3, #0
100154dc:	6102      	str	r2, [r0, #16]
100154de:	6143      	str	r3, [r0, #20]
100154e0:	6ba4      	ldr	r4, [r4, #56]	; 0x38
100154e2:	4a0d      	ldr	r2, [pc, #52]	; (10015518 <rand+0x70>)
100154e4:	6920      	ldr	r0, [r4, #16]
100154e6:	6961      	ldr	r1, [r4, #20]
100154e8:	4b0c      	ldr	r3, [pc, #48]	; (1001551c <rand+0x74>)
100154ea:	f7fe f80b 	bl	10013504 <__aeabi_lmul>
100154ee:	2201      	movs	r2, #1
100154f0:	2300      	movs	r3, #0
100154f2:	1880      	adds	r0, r0, r2
100154f4:	4159      	adcs	r1, r3
100154f6:	6120      	str	r0, [r4, #16]
100154f8:	6161      	str	r1, [r4, #20]
100154fa:	0048      	lsls	r0, r1, #1
100154fc:	0840      	lsrs	r0, r0, #1
100154fe:	bd10      	pop	{r4, pc}
10015500:	100186a8 	.word	0x100186a8
10015504:	0000330e 	.word	0x0000330e
10015508:	ffffabcd 	.word	0xffffabcd
1001550c:	00001234 	.word	0x00001234
10015510:	ffffe66d 	.word	0xffffe66d
10015514:	ffffdeec 	.word	0xffffdeec
10015518:	4c957f2d 	.word	0x4c957f2d
1001551c:	5851f42d 	.word	0x5851f42d

10015520 <_sbrk_r>:
10015520:	2300      	movs	r3, #0
10015522:	b570      	push	{r4, r5, r6, lr}
10015524:	4c06      	ldr	r4, [pc, #24]	; (10015540 <_sbrk_r+0x20>)
10015526:	0005      	movs	r5, r0
10015528:	0008      	movs	r0, r1
1001552a:	6023      	str	r3, [r4, #0]
1001552c:	f7f8 f982 	bl	1000d834 <_sbrk>
10015530:	1c43      	adds	r3, r0, #1
10015532:	d103      	bne.n	1001553c <_sbrk_r+0x1c>
10015534:	6823      	ldr	r3, [r4, #0]
10015536:	2b00      	cmp	r3, #0
10015538:	d000      	beq.n	1001553c <_sbrk_r+0x1c>
1001553a:	602b      	str	r3, [r5, #0]
1001553c:	bd70      	pop	{r4, r5, r6, pc}
1001553e:	46c0      	nop			; (mov r8, r8)
10015540:	1001b548 	.word	0x1001b548

10015544 <setbuf>:
10015544:	424a      	negs	r2, r1
10015546:	414a      	adcs	r2, r1
10015548:	2380      	movs	r3, #128	; 0x80
1001554a:	b510      	push	{r4, lr}
1001554c:	0052      	lsls	r2, r2, #1
1001554e:	00db      	lsls	r3, r3, #3
10015550:	f000 f802 	bl	10015558 <setvbuf>
10015554:	bd10      	pop	{r4, pc}
	...

10015558 <setvbuf>:
10015558:	b5f0      	push	{r4, r5, r6, r7, lr}
1001555a:	001d      	movs	r5, r3
1001555c:	4b51      	ldr	r3, [pc, #324]	; (100156a4 <setvbuf+0x14c>)
1001555e:	b085      	sub	sp, #20
10015560:	681e      	ldr	r6, [r3, #0]
10015562:	0004      	movs	r4, r0
10015564:	000f      	movs	r7, r1
10015566:	9200      	str	r2, [sp, #0]
10015568:	2e00      	cmp	r6, #0
1001556a:	d005      	beq.n	10015578 <setvbuf+0x20>
1001556c:	69b3      	ldr	r3, [r6, #24]
1001556e:	2b00      	cmp	r3, #0
10015570:	d102      	bne.n	10015578 <setvbuf+0x20>
10015572:	0030      	movs	r0, r6
10015574:	f000 fa62 	bl	10015a3c <__sinit>
10015578:	4b4b      	ldr	r3, [pc, #300]	; (100156a8 <setvbuf+0x150>)
1001557a:	429c      	cmp	r4, r3
1001557c:	d101      	bne.n	10015582 <setvbuf+0x2a>
1001557e:	6874      	ldr	r4, [r6, #4]
10015580:	e008      	b.n	10015594 <setvbuf+0x3c>
10015582:	4b4a      	ldr	r3, [pc, #296]	; (100156ac <setvbuf+0x154>)
10015584:	429c      	cmp	r4, r3
10015586:	d101      	bne.n	1001558c <setvbuf+0x34>
10015588:	68b4      	ldr	r4, [r6, #8]
1001558a:	e003      	b.n	10015594 <setvbuf+0x3c>
1001558c:	4b48      	ldr	r3, [pc, #288]	; (100156b0 <setvbuf+0x158>)
1001558e:	429c      	cmp	r4, r3
10015590:	d100      	bne.n	10015594 <setvbuf+0x3c>
10015592:	68f4      	ldr	r4, [r6, #12]
10015594:	9b00      	ldr	r3, [sp, #0]
10015596:	2b02      	cmp	r3, #2
10015598:	d005      	beq.n	100155a6 <setvbuf+0x4e>
1001559a:	2b01      	cmp	r3, #1
1001559c:	d900      	bls.n	100155a0 <setvbuf+0x48>
1001559e:	e07c      	b.n	1001569a <setvbuf+0x142>
100155a0:	2d00      	cmp	r5, #0
100155a2:	da00      	bge.n	100155a6 <setvbuf+0x4e>
100155a4:	e079      	b.n	1001569a <setvbuf+0x142>
100155a6:	0021      	movs	r1, r4
100155a8:	0030      	movs	r0, r6
100155aa:	f000 f9d9 	bl	10015960 <_fflush_r>
100155ae:	6b61      	ldr	r1, [r4, #52]	; 0x34
100155b0:	2900      	cmp	r1, #0
100155b2:	d008      	beq.n	100155c6 <setvbuf+0x6e>
100155b4:	0023      	movs	r3, r4
100155b6:	3344      	adds	r3, #68	; 0x44
100155b8:	4299      	cmp	r1, r3
100155ba:	d002      	beq.n	100155c2 <setvbuf+0x6a>
100155bc:	0030      	movs	r0, r6
100155be:	f7ff fe3d 	bl	1001523c <_free_r>
100155c2:	2300      	movs	r3, #0
100155c4:	6363      	str	r3, [r4, #52]	; 0x34
100155c6:	2300      	movs	r3, #0
100155c8:	61a3      	str	r3, [r4, #24]
100155ca:	6063      	str	r3, [r4, #4]
100155cc:	89a3      	ldrh	r3, [r4, #12]
100155ce:	061b      	lsls	r3, r3, #24
100155d0:	d503      	bpl.n	100155da <setvbuf+0x82>
100155d2:	6921      	ldr	r1, [r4, #16]
100155d4:	0030      	movs	r0, r6
100155d6:	f7ff fe31 	bl	1001523c <_free_r>
100155da:	89a2      	ldrh	r2, [r4, #12]
100155dc:	4b35      	ldr	r3, [pc, #212]	; (100156b4 <setvbuf+0x15c>)
100155de:	4013      	ands	r3, r2
100155e0:	81a3      	strh	r3, [r4, #12]
100155e2:	9b00      	ldr	r3, [sp, #0]
100155e4:	2b02      	cmp	r3, #2
100155e6:	d021      	beq.n	1001562c <setvbuf+0xd4>
100155e8:	ab03      	add	r3, sp, #12
100155ea:	aa02      	add	r2, sp, #8
100155ec:	0021      	movs	r1, r4
100155ee:	0030      	movs	r0, r6
100155f0:	f000 fab8 	bl	10015b64 <__swhatbuf_r>
100155f4:	89a3      	ldrh	r3, [r4, #12]
100155f6:	4318      	orrs	r0, r3
100155f8:	81a0      	strh	r0, [r4, #12]
100155fa:	2d00      	cmp	r5, #0
100155fc:	d101      	bne.n	10015602 <setvbuf+0xaa>
100155fe:	9d02      	ldr	r5, [sp, #8]
10015600:	e001      	b.n	10015606 <setvbuf+0xae>
10015602:	2f00      	cmp	r7, #0
10015604:	d125      	bne.n	10015652 <setvbuf+0xfa>
10015606:	0028      	movs	r0, r5
10015608:	f7ff fdee 	bl	100151e8 <malloc>
1001560c:	9501      	str	r5, [sp, #4]
1001560e:	1e07      	subs	r7, r0, #0
10015610:	d11a      	bne.n	10015648 <setvbuf+0xf0>
10015612:	9b02      	ldr	r3, [sp, #8]
10015614:	9301      	str	r3, [sp, #4]
10015616:	42ab      	cmp	r3, r5
10015618:	d102      	bne.n	10015620 <setvbuf+0xc8>
1001561a:	2001      	movs	r0, #1
1001561c:	4240      	negs	r0, r0
1001561e:	e006      	b.n	1001562e <setvbuf+0xd6>
10015620:	9801      	ldr	r0, [sp, #4]
10015622:	f7ff fde1 	bl	100151e8 <malloc>
10015626:	1e07      	subs	r7, r0, #0
10015628:	d10e      	bne.n	10015648 <setvbuf+0xf0>
1001562a:	e7f6      	b.n	1001561a <setvbuf+0xc2>
1001562c:	2000      	movs	r0, #0
1001562e:	2202      	movs	r2, #2
10015630:	89a3      	ldrh	r3, [r4, #12]
10015632:	4313      	orrs	r3, r2
10015634:	81a3      	strh	r3, [r4, #12]
10015636:	2300      	movs	r3, #0
10015638:	60a3      	str	r3, [r4, #8]
1001563a:	0023      	movs	r3, r4
1001563c:	3347      	adds	r3, #71	; 0x47
1001563e:	6023      	str	r3, [r4, #0]
10015640:	6123      	str	r3, [r4, #16]
10015642:	2301      	movs	r3, #1
10015644:	6163      	str	r3, [r4, #20]
10015646:	e02a      	b.n	1001569e <setvbuf+0x146>
10015648:	2280      	movs	r2, #128	; 0x80
1001564a:	89a3      	ldrh	r3, [r4, #12]
1001564c:	9d01      	ldr	r5, [sp, #4]
1001564e:	4313      	orrs	r3, r2
10015650:	81a3      	strh	r3, [r4, #12]
10015652:	69b3      	ldr	r3, [r6, #24]
10015654:	2b00      	cmp	r3, #0
10015656:	d102      	bne.n	1001565e <setvbuf+0x106>
10015658:	0030      	movs	r0, r6
1001565a:	f000 f9ef 	bl	10015a3c <__sinit>
1001565e:	9b00      	ldr	r3, [sp, #0]
10015660:	2b01      	cmp	r3, #1
10015662:	d103      	bne.n	1001566c <setvbuf+0x114>
10015664:	89a3      	ldrh	r3, [r4, #12]
10015666:	9a00      	ldr	r2, [sp, #0]
10015668:	431a      	orrs	r2, r3
1001566a:	81a2      	strh	r2, [r4, #12]
1001566c:	2308      	movs	r3, #8
1001566e:	89a2      	ldrh	r2, [r4, #12]
10015670:	6027      	str	r7, [r4, #0]
10015672:	4013      	ands	r3, r2
10015674:	6127      	str	r7, [r4, #16]
10015676:	6165      	str	r5, [r4, #20]
10015678:	1e18      	subs	r0, r3, #0
1001567a:	d00c      	beq.n	10015696 <setvbuf+0x13e>
1001567c:	2301      	movs	r3, #1
1001567e:	401a      	ands	r2, r3
10015680:	2300      	movs	r3, #0
10015682:	1e10      	subs	r0, r2, #0
10015684:	4298      	cmp	r0, r3
10015686:	d004      	beq.n	10015692 <setvbuf+0x13a>
10015688:	426d      	negs	r5, r5
1001568a:	60a3      	str	r3, [r4, #8]
1001568c:	61a5      	str	r5, [r4, #24]
1001568e:	0018      	movs	r0, r3
10015690:	e005      	b.n	1001569e <setvbuf+0x146>
10015692:	60a5      	str	r5, [r4, #8]
10015694:	e003      	b.n	1001569e <setvbuf+0x146>
10015696:	60a3      	str	r3, [r4, #8]
10015698:	e001      	b.n	1001569e <setvbuf+0x146>
1001569a:	2001      	movs	r0, #1
1001569c:	4240      	negs	r0, r0
1001569e:	b005      	add	sp, #20
100156a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
100156a2:	46c0      	nop			; (mov r8, r8)
100156a4:	100186a8 	.word	0x100186a8
100156a8:	1001854c 	.word	0x1001854c
100156ac:	1001856c 	.word	0x1001856c
100156b0:	1001858c 	.word	0x1001858c
100156b4:	fffff35c 	.word	0xfffff35c

100156b8 <__swbuf_r>:
100156b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100156ba:	0005      	movs	r5, r0
100156bc:	000f      	movs	r7, r1
100156be:	0014      	movs	r4, r2
100156c0:	2800      	cmp	r0, #0
100156c2:	d004      	beq.n	100156ce <__swbuf_r+0x16>
100156c4:	6983      	ldr	r3, [r0, #24]
100156c6:	2b00      	cmp	r3, #0
100156c8:	d101      	bne.n	100156ce <__swbuf_r+0x16>
100156ca:	f000 f9b7 	bl	10015a3c <__sinit>
100156ce:	4b23      	ldr	r3, [pc, #140]	; (1001575c <__swbuf_r+0xa4>)
100156d0:	429c      	cmp	r4, r3
100156d2:	d101      	bne.n	100156d8 <__swbuf_r+0x20>
100156d4:	686c      	ldr	r4, [r5, #4]
100156d6:	e008      	b.n	100156ea <__swbuf_r+0x32>
100156d8:	4b21      	ldr	r3, [pc, #132]	; (10015760 <__swbuf_r+0xa8>)
100156da:	429c      	cmp	r4, r3
100156dc:	d101      	bne.n	100156e2 <__swbuf_r+0x2a>
100156de:	68ac      	ldr	r4, [r5, #8]
100156e0:	e003      	b.n	100156ea <__swbuf_r+0x32>
100156e2:	4b20      	ldr	r3, [pc, #128]	; (10015764 <__swbuf_r+0xac>)
100156e4:	429c      	cmp	r4, r3
100156e6:	d100      	bne.n	100156ea <__swbuf_r+0x32>
100156e8:	68ec      	ldr	r4, [r5, #12]
100156ea:	69a3      	ldr	r3, [r4, #24]
100156ec:	60a3      	str	r3, [r4, #8]
100156ee:	89a3      	ldrh	r3, [r4, #12]
100156f0:	071b      	lsls	r3, r3, #28
100156f2:	d50a      	bpl.n	1001570a <__swbuf_r+0x52>
100156f4:	6923      	ldr	r3, [r4, #16]
100156f6:	2b00      	cmp	r3, #0
100156f8:	d007      	beq.n	1001570a <__swbuf_r+0x52>
100156fa:	6823      	ldr	r3, [r4, #0]
100156fc:	6922      	ldr	r2, [r4, #16]
100156fe:	b2fe      	uxtb	r6, r7
10015700:	1a98      	subs	r0, r3, r2
10015702:	6963      	ldr	r3, [r4, #20]
10015704:	4298      	cmp	r0, r3
10015706:	db0f      	blt.n	10015728 <__swbuf_r+0x70>
10015708:	e008      	b.n	1001571c <__swbuf_r+0x64>
1001570a:	0021      	movs	r1, r4
1001570c:	0028      	movs	r0, r5
1001570e:	f000 f82b 	bl	10015768 <__swsetup_r>
10015712:	2800      	cmp	r0, #0
10015714:	d0f1      	beq.n	100156fa <__swbuf_r+0x42>
10015716:	2001      	movs	r0, #1
10015718:	4240      	negs	r0, r0
1001571a:	e01d      	b.n	10015758 <__swbuf_r+0xa0>
1001571c:	0021      	movs	r1, r4
1001571e:	0028      	movs	r0, r5
10015720:	f000 f91e 	bl	10015960 <_fflush_r>
10015724:	2800      	cmp	r0, #0
10015726:	d1f6      	bne.n	10015716 <__swbuf_r+0x5e>
10015728:	68a3      	ldr	r3, [r4, #8]
1001572a:	3001      	adds	r0, #1
1001572c:	3b01      	subs	r3, #1
1001572e:	60a3      	str	r3, [r4, #8]
10015730:	6823      	ldr	r3, [r4, #0]
10015732:	1c5a      	adds	r2, r3, #1
10015734:	6022      	str	r2, [r4, #0]
10015736:	701f      	strb	r7, [r3, #0]
10015738:	6963      	ldr	r3, [r4, #20]
1001573a:	4298      	cmp	r0, r3
1001573c:	d005      	beq.n	1001574a <__swbuf_r+0x92>
1001573e:	89a3      	ldrh	r3, [r4, #12]
10015740:	0030      	movs	r0, r6
10015742:	07db      	lsls	r3, r3, #31
10015744:	d508      	bpl.n	10015758 <__swbuf_r+0xa0>
10015746:	2e0a      	cmp	r6, #10
10015748:	d106      	bne.n	10015758 <__swbuf_r+0xa0>
1001574a:	0021      	movs	r1, r4
1001574c:	0028      	movs	r0, r5
1001574e:	f000 f907 	bl	10015960 <_fflush_r>
10015752:	2800      	cmp	r0, #0
10015754:	d1df      	bne.n	10015716 <__swbuf_r+0x5e>
10015756:	0030      	movs	r0, r6
10015758:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1001575a:	46c0      	nop			; (mov r8, r8)
1001575c:	1001854c 	.word	0x1001854c
10015760:	1001856c 	.word	0x1001856c
10015764:	1001858c 	.word	0x1001858c

10015768 <__swsetup_r>:
10015768:	4b36      	ldr	r3, [pc, #216]	; (10015844 <__swsetup_r+0xdc>)
1001576a:	b570      	push	{r4, r5, r6, lr}
1001576c:	681d      	ldr	r5, [r3, #0]
1001576e:	0006      	movs	r6, r0
10015770:	000c      	movs	r4, r1
10015772:	2d00      	cmp	r5, #0
10015774:	d005      	beq.n	10015782 <__swsetup_r+0x1a>
10015776:	69ab      	ldr	r3, [r5, #24]
10015778:	2b00      	cmp	r3, #0
1001577a:	d102      	bne.n	10015782 <__swsetup_r+0x1a>
1001577c:	0028      	movs	r0, r5
1001577e:	f000 f95d 	bl	10015a3c <__sinit>
10015782:	4b31      	ldr	r3, [pc, #196]	; (10015848 <__swsetup_r+0xe0>)
10015784:	429c      	cmp	r4, r3
10015786:	d101      	bne.n	1001578c <__swsetup_r+0x24>
10015788:	686c      	ldr	r4, [r5, #4]
1001578a:	e008      	b.n	1001579e <__swsetup_r+0x36>
1001578c:	4b2f      	ldr	r3, [pc, #188]	; (1001584c <__swsetup_r+0xe4>)
1001578e:	429c      	cmp	r4, r3
10015790:	d101      	bne.n	10015796 <__swsetup_r+0x2e>
10015792:	68ac      	ldr	r4, [r5, #8]
10015794:	e003      	b.n	1001579e <__swsetup_r+0x36>
10015796:	4b2e      	ldr	r3, [pc, #184]	; (10015850 <__swsetup_r+0xe8>)
10015798:	429c      	cmp	r4, r3
1001579a:	d100      	bne.n	1001579e <__swsetup_r+0x36>
1001579c:	68ec      	ldr	r4, [r5, #12]
1001579e:	220c      	movs	r2, #12
100157a0:	5ea3      	ldrsh	r3, [r4, r2]
100157a2:	b29a      	uxth	r2, r3
100157a4:	0711      	lsls	r1, r2, #28
100157a6:	d423      	bmi.n	100157f0 <__swsetup_r+0x88>
100157a8:	06d1      	lsls	r1, r2, #27
100157aa:	d407      	bmi.n	100157bc <__swsetup_r+0x54>
100157ac:	2209      	movs	r2, #9
100157ae:	2001      	movs	r0, #1
100157b0:	6032      	str	r2, [r6, #0]
100157b2:	3237      	adds	r2, #55	; 0x37
100157b4:	4313      	orrs	r3, r2
100157b6:	81a3      	strh	r3, [r4, #12]
100157b8:	4240      	negs	r0, r0
100157ba:	e042      	b.n	10015842 <__swsetup_r+0xda>
100157bc:	0753      	lsls	r3, r2, #29
100157be:	d513      	bpl.n	100157e8 <__swsetup_r+0x80>
100157c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
100157c2:	2900      	cmp	r1, #0
100157c4:	d008      	beq.n	100157d8 <__swsetup_r+0x70>
100157c6:	0023      	movs	r3, r4
100157c8:	3344      	adds	r3, #68	; 0x44
100157ca:	4299      	cmp	r1, r3
100157cc:	d002      	beq.n	100157d4 <__swsetup_r+0x6c>
100157ce:	0030      	movs	r0, r6
100157d0:	f7ff fd34 	bl	1001523c <_free_r>
100157d4:	2300      	movs	r3, #0
100157d6:	6363      	str	r3, [r4, #52]	; 0x34
100157d8:	2224      	movs	r2, #36	; 0x24
100157da:	89a3      	ldrh	r3, [r4, #12]
100157dc:	4393      	bics	r3, r2
100157de:	81a3      	strh	r3, [r4, #12]
100157e0:	2300      	movs	r3, #0
100157e2:	6063      	str	r3, [r4, #4]
100157e4:	6923      	ldr	r3, [r4, #16]
100157e6:	6023      	str	r3, [r4, #0]
100157e8:	2208      	movs	r2, #8
100157ea:	89a3      	ldrh	r3, [r4, #12]
100157ec:	4313      	orrs	r3, r2
100157ee:	81a3      	strh	r3, [r4, #12]
100157f0:	6923      	ldr	r3, [r4, #16]
100157f2:	2b00      	cmp	r3, #0
100157f4:	d10b      	bne.n	1001580e <__swsetup_r+0xa6>
100157f6:	23a0      	movs	r3, #160	; 0xa0
100157f8:	89a2      	ldrh	r2, [r4, #12]
100157fa:	009b      	lsls	r3, r3, #2
100157fc:	4013      	ands	r3, r2
100157fe:	2280      	movs	r2, #128	; 0x80
10015800:	0092      	lsls	r2, r2, #2
10015802:	4293      	cmp	r3, r2
10015804:	d003      	beq.n	1001580e <__swsetup_r+0xa6>
10015806:	0021      	movs	r1, r4
10015808:	0030      	movs	r0, r6
1001580a:	f000 f9d1 	bl	10015bb0 <__smakebuf_r>
1001580e:	2301      	movs	r3, #1
10015810:	89a2      	ldrh	r2, [r4, #12]
10015812:	4013      	ands	r3, r2
10015814:	d005      	beq.n	10015822 <__swsetup_r+0xba>
10015816:	2300      	movs	r3, #0
10015818:	60a3      	str	r3, [r4, #8]
1001581a:	6963      	ldr	r3, [r4, #20]
1001581c:	425b      	negs	r3, r3
1001581e:	61a3      	str	r3, [r4, #24]
10015820:	e003      	b.n	1001582a <__swsetup_r+0xc2>
10015822:	0792      	lsls	r2, r2, #30
10015824:	d400      	bmi.n	10015828 <__swsetup_r+0xc0>
10015826:	6963      	ldr	r3, [r4, #20]
10015828:	60a3      	str	r3, [r4, #8]
1001582a:	2000      	movs	r0, #0
1001582c:	6923      	ldr	r3, [r4, #16]
1001582e:	4283      	cmp	r3, r0
10015830:	d107      	bne.n	10015842 <__swsetup_r+0xda>
10015832:	220c      	movs	r2, #12
10015834:	5ea3      	ldrsh	r3, [r4, r2]
10015836:	061a      	lsls	r2, r3, #24
10015838:	d503      	bpl.n	10015842 <__swsetup_r+0xda>
1001583a:	2240      	movs	r2, #64	; 0x40
1001583c:	4313      	orrs	r3, r2
1001583e:	81a3      	strh	r3, [r4, #12]
10015840:	3801      	subs	r0, #1
10015842:	bd70      	pop	{r4, r5, r6, pc}
10015844:	100186a8 	.word	0x100186a8
10015848:	1001854c 	.word	0x1001854c
1001584c:	1001856c 	.word	0x1001856c
10015850:	1001858c 	.word	0x1001858c

10015854 <__sflush_r>:
10015854:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10015856:	898a      	ldrh	r2, [r1, #12]
10015858:	0005      	movs	r5, r0
1001585a:	000c      	movs	r4, r1
1001585c:	0713      	lsls	r3, r2, #28
1001585e:	d45a      	bmi.n	10015916 <__sflush_r+0xc2>
10015860:	684b      	ldr	r3, [r1, #4]
10015862:	2b00      	cmp	r3, #0
10015864:	dc02      	bgt.n	1001586c <__sflush_r+0x18>
10015866:	6c0b      	ldr	r3, [r1, #64]	; 0x40
10015868:	2b00      	cmp	r3, #0
1001586a:	dd19      	ble.n	100158a0 <__sflush_r+0x4c>
1001586c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
1001586e:	2f00      	cmp	r7, #0
10015870:	d016      	beq.n	100158a0 <__sflush_r+0x4c>
10015872:	2300      	movs	r3, #0
10015874:	682e      	ldr	r6, [r5, #0]
10015876:	602b      	str	r3, [r5, #0]
10015878:	2380      	movs	r3, #128	; 0x80
1001587a:	015b      	lsls	r3, r3, #5
1001587c:	401a      	ands	r2, r3
1001587e:	d001      	beq.n	10015884 <__sflush_r+0x30>
10015880:	6d60      	ldr	r0, [r4, #84]	; 0x54
10015882:	e014      	b.n	100158ae <__sflush_r+0x5a>
10015884:	2301      	movs	r3, #1
10015886:	6a21      	ldr	r1, [r4, #32]
10015888:	0028      	movs	r0, r5
1001588a:	47b8      	blx	r7
1001588c:	1c43      	adds	r3, r0, #1
1001588e:	d10e      	bne.n	100158ae <__sflush_r+0x5a>
10015890:	682b      	ldr	r3, [r5, #0]
10015892:	2b00      	cmp	r3, #0
10015894:	d00b      	beq.n	100158ae <__sflush_r+0x5a>
10015896:	2b1d      	cmp	r3, #29
10015898:	d001      	beq.n	1001589e <__sflush_r+0x4a>
1001589a:	2b16      	cmp	r3, #22
1001589c:	d102      	bne.n	100158a4 <__sflush_r+0x50>
1001589e:	602e      	str	r6, [r5, #0]
100158a0:	2000      	movs	r0, #0
100158a2:	e05a      	b.n	1001595a <__sflush_r+0x106>
100158a4:	2240      	movs	r2, #64	; 0x40
100158a6:	89a3      	ldrh	r3, [r4, #12]
100158a8:	4313      	orrs	r3, r2
100158aa:	81a3      	strh	r3, [r4, #12]
100158ac:	e055      	b.n	1001595a <__sflush_r+0x106>
100158ae:	89a3      	ldrh	r3, [r4, #12]
100158b0:	075b      	lsls	r3, r3, #29
100158b2:	d506      	bpl.n	100158c2 <__sflush_r+0x6e>
100158b4:	6863      	ldr	r3, [r4, #4]
100158b6:	1ac0      	subs	r0, r0, r3
100158b8:	6b63      	ldr	r3, [r4, #52]	; 0x34
100158ba:	2b00      	cmp	r3, #0
100158bc:	d001      	beq.n	100158c2 <__sflush_r+0x6e>
100158be:	6c23      	ldr	r3, [r4, #64]	; 0x40
100158c0:	1ac0      	subs	r0, r0, r3
100158c2:	2300      	movs	r3, #0
100158c4:	0002      	movs	r2, r0
100158c6:	6a21      	ldr	r1, [r4, #32]
100158c8:	0028      	movs	r0, r5
100158ca:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
100158cc:	47b8      	blx	r7
100158ce:	89a3      	ldrh	r3, [r4, #12]
100158d0:	1c42      	adds	r2, r0, #1
100158d2:	d106      	bne.n	100158e2 <__sflush_r+0x8e>
100158d4:	6829      	ldr	r1, [r5, #0]
100158d6:	291d      	cmp	r1, #29
100158d8:	d83a      	bhi.n	10015950 <__sflush_r+0xfc>
100158da:	4a20      	ldr	r2, [pc, #128]	; (1001595c <__sflush_r+0x108>)
100158dc:	40ca      	lsrs	r2, r1
100158de:	07d2      	lsls	r2, r2, #31
100158e0:	d536      	bpl.n	10015950 <__sflush_r+0xfc>
100158e2:	2200      	movs	r2, #0
100158e4:	6062      	str	r2, [r4, #4]
100158e6:	6922      	ldr	r2, [r4, #16]
100158e8:	6022      	str	r2, [r4, #0]
100158ea:	04db      	lsls	r3, r3, #19
100158ec:	d505      	bpl.n	100158fa <__sflush_r+0xa6>
100158ee:	1c43      	adds	r3, r0, #1
100158f0:	d102      	bne.n	100158f8 <__sflush_r+0xa4>
100158f2:	682b      	ldr	r3, [r5, #0]
100158f4:	2b00      	cmp	r3, #0
100158f6:	d100      	bne.n	100158fa <__sflush_r+0xa6>
100158f8:	6560      	str	r0, [r4, #84]	; 0x54
100158fa:	6b61      	ldr	r1, [r4, #52]	; 0x34
100158fc:	602e      	str	r6, [r5, #0]
100158fe:	2900      	cmp	r1, #0
10015900:	d0ce      	beq.n	100158a0 <__sflush_r+0x4c>
10015902:	0023      	movs	r3, r4
10015904:	3344      	adds	r3, #68	; 0x44
10015906:	4299      	cmp	r1, r3
10015908:	d002      	beq.n	10015910 <__sflush_r+0xbc>
1001590a:	0028      	movs	r0, r5
1001590c:	f7ff fc96 	bl	1001523c <_free_r>
10015910:	2000      	movs	r0, #0
10015912:	6360      	str	r0, [r4, #52]	; 0x34
10015914:	e021      	b.n	1001595a <__sflush_r+0x106>
10015916:	690f      	ldr	r7, [r1, #16]
10015918:	2f00      	cmp	r7, #0
1001591a:	d0c1      	beq.n	100158a0 <__sflush_r+0x4c>
1001591c:	680b      	ldr	r3, [r1, #0]
1001591e:	600f      	str	r7, [r1, #0]
10015920:	1bdb      	subs	r3, r3, r7
10015922:	9301      	str	r3, [sp, #4]
10015924:	2300      	movs	r3, #0
10015926:	0792      	lsls	r2, r2, #30
10015928:	d100      	bne.n	1001592c <__sflush_r+0xd8>
1001592a:	694b      	ldr	r3, [r1, #20]
1001592c:	60a3      	str	r3, [r4, #8]
1001592e:	e003      	b.n	10015938 <__sflush_r+0xe4>
10015930:	9b01      	ldr	r3, [sp, #4]
10015932:	183f      	adds	r7, r7, r0
10015934:	1a1b      	subs	r3, r3, r0
10015936:	9301      	str	r3, [sp, #4]
10015938:	9b01      	ldr	r3, [sp, #4]
1001593a:	2b00      	cmp	r3, #0
1001593c:	ddb0      	ble.n	100158a0 <__sflush_r+0x4c>
1001593e:	9b01      	ldr	r3, [sp, #4]
10015940:	003a      	movs	r2, r7
10015942:	6a21      	ldr	r1, [r4, #32]
10015944:	0028      	movs	r0, r5
10015946:	6aa6      	ldr	r6, [r4, #40]	; 0x28
10015948:	47b0      	blx	r6
1001594a:	2800      	cmp	r0, #0
1001594c:	dcf0      	bgt.n	10015930 <__sflush_r+0xdc>
1001594e:	89a3      	ldrh	r3, [r4, #12]
10015950:	2240      	movs	r2, #64	; 0x40
10015952:	2001      	movs	r0, #1
10015954:	4313      	orrs	r3, r2
10015956:	81a3      	strh	r3, [r4, #12]
10015958:	4240      	negs	r0, r0
1001595a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1001595c:	20400001 	.word	0x20400001

10015960 <_fflush_r>:
10015960:	690b      	ldr	r3, [r1, #16]
10015962:	b570      	push	{r4, r5, r6, lr}
10015964:	0005      	movs	r5, r0
10015966:	000c      	movs	r4, r1
10015968:	2b00      	cmp	r3, #0
1001596a:	d101      	bne.n	10015970 <_fflush_r+0x10>
1001596c:	2000      	movs	r0, #0
1001596e:	e01c      	b.n	100159aa <_fflush_r+0x4a>
10015970:	2800      	cmp	r0, #0
10015972:	d004      	beq.n	1001597e <_fflush_r+0x1e>
10015974:	6983      	ldr	r3, [r0, #24]
10015976:	2b00      	cmp	r3, #0
10015978:	d101      	bne.n	1001597e <_fflush_r+0x1e>
1001597a:	f000 f85f 	bl	10015a3c <__sinit>
1001597e:	4b0b      	ldr	r3, [pc, #44]	; (100159ac <_fflush_r+0x4c>)
10015980:	429c      	cmp	r4, r3
10015982:	d101      	bne.n	10015988 <_fflush_r+0x28>
10015984:	686c      	ldr	r4, [r5, #4]
10015986:	e008      	b.n	1001599a <_fflush_r+0x3a>
10015988:	4b09      	ldr	r3, [pc, #36]	; (100159b0 <_fflush_r+0x50>)
1001598a:	429c      	cmp	r4, r3
1001598c:	d101      	bne.n	10015992 <_fflush_r+0x32>
1001598e:	68ac      	ldr	r4, [r5, #8]
10015990:	e003      	b.n	1001599a <_fflush_r+0x3a>
10015992:	4b08      	ldr	r3, [pc, #32]	; (100159b4 <_fflush_r+0x54>)
10015994:	429c      	cmp	r4, r3
10015996:	d100      	bne.n	1001599a <_fflush_r+0x3a>
10015998:	68ec      	ldr	r4, [r5, #12]
1001599a:	220c      	movs	r2, #12
1001599c:	5ea3      	ldrsh	r3, [r4, r2]
1001599e:	2b00      	cmp	r3, #0
100159a0:	d0e4      	beq.n	1001596c <_fflush_r+0xc>
100159a2:	0021      	movs	r1, r4
100159a4:	0028      	movs	r0, r5
100159a6:	f7ff ff55 	bl	10015854 <__sflush_r>
100159aa:	bd70      	pop	{r4, r5, r6, pc}
100159ac:	1001854c 	.word	0x1001854c
100159b0:	1001856c 	.word	0x1001856c
100159b4:	1001858c 	.word	0x1001858c

100159b8 <_cleanup_r>:
100159b8:	b510      	push	{r4, lr}
100159ba:	4902      	ldr	r1, [pc, #8]	; (100159c4 <_cleanup_r+0xc>)
100159bc:	f000 f8b0 	bl	10015b20 <_fwalk_reent>
100159c0:	bd10      	pop	{r4, pc}
100159c2:	46c0      	nop			; (mov r8, r8)
100159c4:	10015961 	.word	0x10015961

100159c8 <std.isra.0>:
100159c8:	2300      	movs	r3, #0
100159ca:	b510      	push	{r4, lr}
100159cc:	0004      	movs	r4, r0
100159ce:	6003      	str	r3, [r0, #0]
100159d0:	6043      	str	r3, [r0, #4]
100159d2:	6083      	str	r3, [r0, #8]
100159d4:	8181      	strh	r1, [r0, #12]
100159d6:	6643      	str	r3, [r0, #100]	; 0x64
100159d8:	81c2      	strh	r2, [r0, #14]
100159da:	6103      	str	r3, [r0, #16]
100159dc:	6143      	str	r3, [r0, #20]
100159de:	6183      	str	r3, [r0, #24]
100159e0:	0019      	movs	r1, r3
100159e2:	2208      	movs	r2, #8
100159e4:	305c      	adds	r0, #92	; 0x5c
100159e6:	f7ff fc21 	bl	1001522c <memset>
100159ea:	4b05      	ldr	r3, [pc, #20]	; (10015a00 <std.isra.0+0x38>)
100159ec:	6224      	str	r4, [r4, #32]
100159ee:	6263      	str	r3, [r4, #36]	; 0x24
100159f0:	4b04      	ldr	r3, [pc, #16]	; (10015a04 <std.isra.0+0x3c>)
100159f2:	62a3      	str	r3, [r4, #40]	; 0x28
100159f4:	4b04      	ldr	r3, [pc, #16]	; (10015a08 <std.isra.0+0x40>)
100159f6:	62e3      	str	r3, [r4, #44]	; 0x2c
100159f8:	4b04      	ldr	r3, [pc, #16]	; (10015a0c <std.isra.0+0x44>)
100159fa:	6323      	str	r3, [r4, #48]	; 0x30
100159fc:	bd10      	pop	{r4, pc}
100159fe:	46c0      	nop			; (mov r8, r8)
10015a00:	10016241 	.word	0x10016241
10015a04:	10016269 	.word	0x10016269
10015a08:	100162a1 	.word	0x100162a1
10015a0c:	100162cd 	.word	0x100162cd

10015a10 <__sfmoreglue>:
10015a10:	b570      	push	{r4, r5, r6, lr}
10015a12:	2568      	movs	r5, #104	; 0x68
10015a14:	1e4b      	subs	r3, r1, #1
10015a16:	435d      	muls	r5, r3
10015a18:	000e      	movs	r6, r1
10015a1a:	0029      	movs	r1, r5
10015a1c:	3174      	adds	r1, #116	; 0x74
10015a1e:	f7ff fc53 	bl	100152c8 <_malloc_r>
10015a22:	1e04      	subs	r4, r0, #0
10015a24:	d008      	beq.n	10015a38 <__sfmoreglue+0x28>
10015a26:	2100      	movs	r1, #0
10015a28:	002a      	movs	r2, r5
10015a2a:	6001      	str	r1, [r0, #0]
10015a2c:	6046      	str	r6, [r0, #4]
10015a2e:	300c      	adds	r0, #12
10015a30:	60a0      	str	r0, [r4, #8]
10015a32:	3268      	adds	r2, #104	; 0x68
10015a34:	f7ff fbfa 	bl	1001522c <memset>
10015a38:	0020      	movs	r0, r4
10015a3a:	bd70      	pop	{r4, r5, r6, pc}

10015a3c <__sinit>:
10015a3c:	6983      	ldr	r3, [r0, #24]
10015a3e:	b513      	push	{r0, r1, r4, lr}
10015a40:	0004      	movs	r4, r0
10015a42:	2b00      	cmp	r3, #0
10015a44:	d128      	bne.n	10015a98 <__sinit+0x5c>
10015a46:	6483      	str	r3, [r0, #72]	; 0x48
10015a48:	64c3      	str	r3, [r0, #76]	; 0x4c
10015a4a:	6503      	str	r3, [r0, #80]	; 0x50
10015a4c:	4b13      	ldr	r3, [pc, #76]	; (10015a9c <__sinit+0x60>)
10015a4e:	4a14      	ldr	r2, [pc, #80]	; (10015aa0 <__sinit+0x64>)
10015a50:	681b      	ldr	r3, [r3, #0]
10015a52:	6282      	str	r2, [r0, #40]	; 0x28
10015a54:	9301      	str	r3, [sp, #4]
10015a56:	4298      	cmp	r0, r3
10015a58:	d101      	bne.n	10015a5e <__sinit+0x22>
10015a5a:	2301      	movs	r3, #1
10015a5c:	6183      	str	r3, [r0, #24]
10015a5e:	0020      	movs	r0, r4
10015a60:	f000 f820 	bl	10015aa4 <__sfp>
10015a64:	6060      	str	r0, [r4, #4]
10015a66:	0020      	movs	r0, r4
10015a68:	f000 f81c 	bl	10015aa4 <__sfp>
10015a6c:	60a0      	str	r0, [r4, #8]
10015a6e:	0020      	movs	r0, r4
10015a70:	f000 f818 	bl	10015aa4 <__sfp>
10015a74:	2200      	movs	r2, #0
10015a76:	60e0      	str	r0, [r4, #12]
10015a78:	2104      	movs	r1, #4
10015a7a:	6860      	ldr	r0, [r4, #4]
10015a7c:	f7ff ffa4 	bl	100159c8 <std.isra.0>
10015a80:	2201      	movs	r2, #1
10015a82:	2109      	movs	r1, #9
10015a84:	68a0      	ldr	r0, [r4, #8]
10015a86:	f7ff ff9f 	bl	100159c8 <std.isra.0>
10015a8a:	2202      	movs	r2, #2
10015a8c:	2112      	movs	r1, #18
10015a8e:	68e0      	ldr	r0, [r4, #12]
10015a90:	f7ff ff9a 	bl	100159c8 <std.isra.0>
10015a94:	2301      	movs	r3, #1
10015a96:	61a3      	str	r3, [r4, #24]
10015a98:	bd13      	pop	{r0, r1, r4, pc}
10015a9a:	46c0      	nop			; (mov r8, r8)
10015a9c:	10018548 	.word	0x10018548
10015aa0:	100159b9 	.word	0x100159b9

10015aa4 <__sfp>:
10015aa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10015aa6:	4b1d      	ldr	r3, [pc, #116]	; (10015b1c <__sfp+0x78>)
10015aa8:	0006      	movs	r6, r0
10015aaa:	681d      	ldr	r5, [r3, #0]
10015aac:	69ab      	ldr	r3, [r5, #24]
10015aae:	2b00      	cmp	r3, #0
10015ab0:	d102      	bne.n	10015ab8 <__sfp+0x14>
10015ab2:	0028      	movs	r0, r5
10015ab4:	f7ff ffc2 	bl	10015a3c <__sinit>
10015ab8:	3548      	adds	r5, #72	; 0x48
10015aba:	68ac      	ldr	r4, [r5, #8]
10015abc:	686b      	ldr	r3, [r5, #4]
10015abe:	3b01      	subs	r3, #1
10015ac0:	d405      	bmi.n	10015ace <__sfp+0x2a>
10015ac2:	220c      	movs	r2, #12
10015ac4:	5ea7      	ldrsh	r7, [r4, r2]
10015ac6:	2f00      	cmp	r7, #0
10015ac8:	d010      	beq.n	10015aec <__sfp+0x48>
10015aca:	3468      	adds	r4, #104	; 0x68
10015acc:	e7f7      	b.n	10015abe <__sfp+0x1a>
10015ace:	682b      	ldr	r3, [r5, #0]
10015ad0:	2b00      	cmp	r3, #0
10015ad2:	d001      	beq.n	10015ad8 <__sfp+0x34>
10015ad4:	682d      	ldr	r5, [r5, #0]
10015ad6:	e7f0      	b.n	10015aba <__sfp+0x16>
10015ad8:	2104      	movs	r1, #4
10015ada:	0030      	movs	r0, r6
10015adc:	f7ff ff98 	bl	10015a10 <__sfmoreglue>
10015ae0:	6028      	str	r0, [r5, #0]
10015ae2:	2800      	cmp	r0, #0
10015ae4:	d1f6      	bne.n	10015ad4 <__sfp+0x30>
10015ae6:	230c      	movs	r3, #12
10015ae8:	6033      	str	r3, [r6, #0]
10015aea:	e016      	b.n	10015b1a <__sfp+0x76>
10015aec:	2301      	movs	r3, #1
10015aee:	0020      	movs	r0, r4
10015af0:	425b      	negs	r3, r3
10015af2:	81e3      	strh	r3, [r4, #14]
10015af4:	3302      	adds	r3, #2
10015af6:	81a3      	strh	r3, [r4, #12]
10015af8:	6667      	str	r7, [r4, #100]	; 0x64
10015afa:	6027      	str	r7, [r4, #0]
10015afc:	60a7      	str	r7, [r4, #8]
10015afe:	6067      	str	r7, [r4, #4]
10015b00:	6127      	str	r7, [r4, #16]
10015b02:	6167      	str	r7, [r4, #20]
10015b04:	61a7      	str	r7, [r4, #24]
10015b06:	305c      	adds	r0, #92	; 0x5c
10015b08:	2208      	movs	r2, #8
10015b0a:	0039      	movs	r1, r7
10015b0c:	f7ff fb8e 	bl	1001522c <memset>
10015b10:	0020      	movs	r0, r4
10015b12:	6367      	str	r7, [r4, #52]	; 0x34
10015b14:	63a7      	str	r7, [r4, #56]	; 0x38
10015b16:	64a7      	str	r7, [r4, #72]	; 0x48
10015b18:	64e7      	str	r7, [r4, #76]	; 0x4c
10015b1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10015b1c:	10018548 	.word	0x10018548

10015b20 <_fwalk_reent>:
10015b20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10015b22:	0004      	movs	r4, r0
10015b24:	0007      	movs	r7, r0
10015b26:	2600      	movs	r6, #0
10015b28:	9101      	str	r1, [sp, #4]
10015b2a:	3448      	adds	r4, #72	; 0x48
10015b2c:	2c00      	cmp	r4, #0
10015b2e:	d016      	beq.n	10015b5e <_fwalk_reent+0x3e>
10015b30:	6863      	ldr	r3, [r4, #4]
10015b32:	68a5      	ldr	r5, [r4, #8]
10015b34:	9300      	str	r3, [sp, #0]
10015b36:	9b00      	ldr	r3, [sp, #0]
10015b38:	3b01      	subs	r3, #1
10015b3a:	9300      	str	r3, [sp, #0]
10015b3c:	d40d      	bmi.n	10015b5a <_fwalk_reent+0x3a>
10015b3e:	89ab      	ldrh	r3, [r5, #12]
10015b40:	2b01      	cmp	r3, #1
10015b42:	d908      	bls.n	10015b56 <_fwalk_reent+0x36>
10015b44:	220e      	movs	r2, #14
10015b46:	5eab      	ldrsh	r3, [r5, r2]
10015b48:	3301      	adds	r3, #1
10015b4a:	d004      	beq.n	10015b56 <_fwalk_reent+0x36>
10015b4c:	0029      	movs	r1, r5
10015b4e:	0038      	movs	r0, r7
10015b50:	9b01      	ldr	r3, [sp, #4]
10015b52:	4798      	blx	r3
10015b54:	4306      	orrs	r6, r0
10015b56:	3568      	adds	r5, #104	; 0x68
10015b58:	e7ed      	b.n	10015b36 <_fwalk_reent+0x16>
10015b5a:	6824      	ldr	r4, [r4, #0]
10015b5c:	e7e6      	b.n	10015b2c <_fwalk_reent+0xc>
10015b5e:	0030      	movs	r0, r6
10015b60:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

10015b64 <__swhatbuf_r>:
10015b64:	b570      	push	{r4, r5, r6, lr}
10015b66:	000e      	movs	r6, r1
10015b68:	001d      	movs	r5, r3
10015b6a:	230e      	movs	r3, #14
10015b6c:	5ec9      	ldrsh	r1, [r1, r3]
10015b6e:	b090      	sub	sp, #64	; 0x40
10015b70:	0014      	movs	r4, r2
10015b72:	2900      	cmp	r1, #0
10015b74:	da06      	bge.n	10015b84 <__swhatbuf_r+0x20>
10015b76:	2300      	movs	r3, #0
10015b78:	602b      	str	r3, [r5, #0]
10015b7a:	89b3      	ldrh	r3, [r6, #12]
10015b7c:	061b      	lsls	r3, r3, #24
10015b7e:	d50f      	bpl.n	10015ba0 <__swhatbuf_r+0x3c>
10015b80:	2340      	movs	r3, #64	; 0x40
10015b82:	e00f      	b.n	10015ba4 <__swhatbuf_r+0x40>
10015b84:	aa01      	add	r2, sp, #4
10015b86:	f000 fbcd 	bl	10016324 <_fstat_r>
10015b8a:	2800      	cmp	r0, #0
10015b8c:	dbf3      	blt.n	10015b76 <__swhatbuf_r+0x12>
10015b8e:	23f0      	movs	r3, #240	; 0xf0
10015b90:	9a02      	ldr	r2, [sp, #8]
10015b92:	021b      	lsls	r3, r3, #8
10015b94:	4013      	ands	r3, r2
10015b96:	4a05      	ldr	r2, [pc, #20]	; (10015bac <__swhatbuf_r+0x48>)
10015b98:	189b      	adds	r3, r3, r2
10015b9a:	425a      	negs	r2, r3
10015b9c:	4153      	adcs	r3, r2
10015b9e:	602b      	str	r3, [r5, #0]
10015ba0:	2380      	movs	r3, #128	; 0x80
10015ba2:	00db      	lsls	r3, r3, #3
10015ba4:	2000      	movs	r0, #0
10015ba6:	6023      	str	r3, [r4, #0]
10015ba8:	b010      	add	sp, #64	; 0x40
10015baa:	bd70      	pop	{r4, r5, r6, pc}
10015bac:	ffffe000 	.word	0xffffe000

10015bb0 <__smakebuf_r>:
10015bb0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10015bb2:	2602      	movs	r6, #2
10015bb4:	898b      	ldrh	r3, [r1, #12]
10015bb6:	0005      	movs	r5, r0
10015bb8:	000c      	movs	r4, r1
10015bba:	4233      	tst	r3, r6
10015bbc:	d110      	bne.n	10015be0 <__smakebuf_r+0x30>
10015bbe:	ab01      	add	r3, sp, #4
10015bc0:	466a      	mov	r2, sp
10015bc2:	f7ff ffcf 	bl	10015b64 <__swhatbuf_r>
10015bc6:	9900      	ldr	r1, [sp, #0]
10015bc8:	0007      	movs	r7, r0
10015bca:	0028      	movs	r0, r5
10015bcc:	f7ff fb7c 	bl	100152c8 <_malloc_r>
10015bd0:	2800      	cmp	r0, #0
10015bd2:	d10c      	bne.n	10015bee <__smakebuf_r+0x3e>
10015bd4:	220c      	movs	r2, #12
10015bd6:	5ea3      	ldrsh	r3, [r4, r2]
10015bd8:	059a      	lsls	r2, r3, #22
10015bda:	d423      	bmi.n	10015c24 <__smakebuf_r+0x74>
10015bdc:	4333      	orrs	r3, r6
10015bde:	81a3      	strh	r3, [r4, #12]
10015be0:	0023      	movs	r3, r4
10015be2:	3347      	adds	r3, #71	; 0x47
10015be4:	6023      	str	r3, [r4, #0]
10015be6:	6123      	str	r3, [r4, #16]
10015be8:	2301      	movs	r3, #1
10015bea:	6163      	str	r3, [r4, #20]
10015bec:	e01a      	b.n	10015c24 <__smakebuf_r+0x74>
10015bee:	2280      	movs	r2, #128	; 0x80
10015bf0:	4b0d      	ldr	r3, [pc, #52]	; (10015c28 <__smakebuf_r+0x78>)
10015bf2:	62ab      	str	r3, [r5, #40]	; 0x28
10015bf4:	89a3      	ldrh	r3, [r4, #12]
10015bf6:	6020      	str	r0, [r4, #0]
10015bf8:	4313      	orrs	r3, r2
10015bfa:	81a3      	strh	r3, [r4, #12]
10015bfc:	9b00      	ldr	r3, [sp, #0]
10015bfe:	6120      	str	r0, [r4, #16]
10015c00:	6163      	str	r3, [r4, #20]
10015c02:	9b01      	ldr	r3, [sp, #4]
10015c04:	2b00      	cmp	r3, #0
10015c06:	d00a      	beq.n	10015c1e <__smakebuf_r+0x6e>
10015c08:	230e      	movs	r3, #14
10015c0a:	5ee1      	ldrsh	r1, [r4, r3]
10015c0c:	0028      	movs	r0, r5
10015c0e:	f000 fb9b 	bl	10016348 <_isatty_r>
10015c12:	2800      	cmp	r0, #0
10015c14:	d003      	beq.n	10015c1e <__smakebuf_r+0x6e>
10015c16:	2201      	movs	r2, #1
10015c18:	89a3      	ldrh	r3, [r4, #12]
10015c1a:	4313      	orrs	r3, r2
10015c1c:	81a3      	strh	r3, [r4, #12]
10015c1e:	89a3      	ldrh	r3, [r4, #12]
10015c20:	431f      	orrs	r7, r3
10015c22:	81a7      	strh	r7, [r4, #12]
10015c24:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
10015c26:	46c0      	nop			; (mov r8, r8)
10015c28:	100159b9 	.word	0x100159b9

10015c2c <__sfputc_r>:
10015c2c:	6893      	ldr	r3, [r2, #8]
10015c2e:	b510      	push	{r4, lr}
10015c30:	3b01      	subs	r3, #1
10015c32:	6093      	str	r3, [r2, #8]
10015c34:	2b00      	cmp	r3, #0
10015c36:	da05      	bge.n	10015c44 <__sfputc_r+0x18>
10015c38:	6994      	ldr	r4, [r2, #24]
10015c3a:	42a3      	cmp	r3, r4
10015c3c:	db08      	blt.n	10015c50 <__sfputc_r+0x24>
10015c3e:	b2cb      	uxtb	r3, r1
10015c40:	2b0a      	cmp	r3, #10
10015c42:	d005      	beq.n	10015c50 <__sfputc_r+0x24>
10015c44:	6813      	ldr	r3, [r2, #0]
10015c46:	1c58      	adds	r0, r3, #1
10015c48:	6010      	str	r0, [r2, #0]
10015c4a:	7019      	strb	r1, [r3, #0]
10015c4c:	b2c8      	uxtb	r0, r1
10015c4e:	e001      	b.n	10015c54 <__sfputc_r+0x28>
10015c50:	f7ff fd32 	bl	100156b8 <__swbuf_r>
10015c54:	bd10      	pop	{r4, pc}

10015c56 <__sfputs_r>:
10015c56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10015c58:	0006      	movs	r6, r0
10015c5a:	000f      	movs	r7, r1
10015c5c:	0014      	movs	r4, r2
10015c5e:	18d5      	adds	r5, r2, r3
10015c60:	42ac      	cmp	r4, r5
10015c62:	d008      	beq.n	10015c76 <__sfputs_r+0x20>
10015c64:	7821      	ldrb	r1, [r4, #0]
10015c66:	003a      	movs	r2, r7
10015c68:	0030      	movs	r0, r6
10015c6a:	f7ff ffdf 	bl	10015c2c <__sfputc_r>
10015c6e:	3401      	adds	r4, #1
10015c70:	1c43      	adds	r3, r0, #1
10015c72:	d1f5      	bne.n	10015c60 <__sfputs_r+0xa>
10015c74:	e000      	b.n	10015c78 <__sfputs_r+0x22>
10015c76:	2000      	movs	r0, #0
10015c78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

10015c7c <_vfiprintf_r>:
10015c7c:	b5f0      	push	{r4, r5, r6, r7, lr}
10015c7e:	b09f      	sub	sp, #124	; 0x7c
10015c80:	0006      	movs	r6, r0
10015c82:	000f      	movs	r7, r1
10015c84:	9202      	str	r2, [sp, #8]
10015c86:	9305      	str	r3, [sp, #20]
10015c88:	2800      	cmp	r0, #0
10015c8a:	d004      	beq.n	10015c96 <_vfiprintf_r+0x1a>
10015c8c:	6983      	ldr	r3, [r0, #24]
10015c8e:	2b00      	cmp	r3, #0
10015c90:	d101      	bne.n	10015c96 <_vfiprintf_r+0x1a>
10015c92:	f7ff fed3 	bl	10015a3c <__sinit>
10015c96:	4b7f      	ldr	r3, [pc, #508]	; (10015e94 <_vfiprintf_r+0x218>)
10015c98:	429f      	cmp	r7, r3
10015c9a:	d101      	bne.n	10015ca0 <_vfiprintf_r+0x24>
10015c9c:	6877      	ldr	r7, [r6, #4]
10015c9e:	e008      	b.n	10015cb2 <_vfiprintf_r+0x36>
10015ca0:	4b7d      	ldr	r3, [pc, #500]	; (10015e98 <_vfiprintf_r+0x21c>)
10015ca2:	429f      	cmp	r7, r3
10015ca4:	d101      	bne.n	10015caa <_vfiprintf_r+0x2e>
10015ca6:	68b7      	ldr	r7, [r6, #8]
10015ca8:	e003      	b.n	10015cb2 <_vfiprintf_r+0x36>
10015caa:	4b7c      	ldr	r3, [pc, #496]	; (10015e9c <_vfiprintf_r+0x220>)
10015cac:	429f      	cmp	r7, r3
10015cae:	d100      	bne.n	10015cb2 <_vfiprintf_r+0x36>
10015cb0:	68f7      	ldr	r7, [r6, #12]
10015cb2:	89bb      	ldrh	r3, [r7, #12]
10015cb4:	071b      	lsls	r3, r3, #28
10015cb6:	d50a      	bpl.n	10015cce <_vfiprintf_r+0x52>
10015cb8:	693b      	ldr	r3, [r7, #16]
10015cba:	2b00      	cmp	r3, #0
10015cbc:	d007      	beq.n	10015cce <_vfiprintf_r+0x52>
10015cbe:	2300      	movs	r3, #0
10015cc0:	ad06      	add	r5, sp, #24
10015cc2:	616b      	str	r3, [r5, #20]
10015cc4:	3320      	adds	r3, #32
10015cc6:	766b      	strb	r3, [r5, #25]
10015cc8:	3310      	adds	r3, #16
10015cca:	76ab      	strb	r3, [r5, #26]
10015ccc:	e03d      	b.n	10015d4a <_vfiprintf_r+0xce>
10015cce:	0039      	movs	r1, r7
10015cd0:	0030      	movs	r0, r6
10015cd2:	f7ff fd49 	bl	10015768 <__swsetup_r>
10015cd6:	2800      	cmp	r0, #0
10015cd8:	d0f1      	beq.n	10015cbe <_vfiprintf_r+0x42>
10015cda:	2001      	movs	r0, #1
10015cdc:	4240      	negs	r0, r0
10015cde:	e0d6      	b.n	10015e8e <_vfiprintf_r+0x212>
10015ce0:	9a05      	ldr	r2, [sp, #20]
10015ce2:	1d11      	adds	r1, r2, #4
10015ce4:	6812      	ldr	r2, [r2, #0]
10015ce6:	9105      	str	r1, [sp, #20]
10015ce8:	2a00      	cmp	r2, #0
10015cea:	da00      	bge.n	10015cee <_vfiprintf_r+0x72>
10015cec:	e07f      	b.n	10015dee <_vfiprintf_r+0x172>
10015cee:	9209      	str	r2, [sp, #36]	; 0x24
10015cf0:	3401      	adds	r4, #1
10015cf2:	7823      	ldrb	r3, [r4, #0]
10015cf4:	2b2e      	cmp	r3, #46	; 0x2e
10015cf6:	d100      	bne.n	10015cfa <_vfiprintf_r+0x7e>
10015cf8:	e08d      	b.n	10015e16 <_vfiprintf_r+0x19a>
10015cfa:	7821      	ldrb	r1, [r4, #0]
10015cfc:	2203      	movs	r2, #3
10015cfe:	4868      	ldr	r0, [pc, #416]	; (10015ea0 <_vfiprintf_r+0x224>)
10015d00:	f000 fb48 	bl	10016394 <memchr>
10015d04:	2800      	cmp	r0, #0
10015d06:	d007      	beq.n	10015d18 <_vfiprintf_r+0x9c>
10015d08:	4b65      	ldr	r3, [pc, #404]	; (10015ea0 <_vfiprintf_r+0x224>)
10015d0a:	682a      	ldr	r2, [r5, #0]
10015d0c:	1ac0      	subs	r0, r0, r3
10015d0e:	2340      	movs	r3, #64	; 0x40
10015d10:	4083      	lsls	r3, r0
10015d12:	4313      	orrs	r3, r2
10015d14:	602b      	str	r3, [r5, #0]
10015d16:	3401      	adds	r4, #1
10015d18:	7821      	ldrb	r1, [r4, #0]
10015d1a:	1c63      	adds	r3, r4, #1
10015d1c:	2206      	movs	r2, #6
10015d1e:	4861      	ldr	r0, [pc, #388]	; (10015ea4 <_vfiprintf_r+0x228>)
10015d20:	9302      	str	r3, [sp, #8]
10015d22:	7629      	strb	r1, [r5, #24]
10015d24:	f000 fb36 	bl	10016394 <memchr>
10015d28:	2800      	cmp	r0, #0
10015d2a:	d100      	bne.n	10015d2e <_vfiprintf_r+0xb2>
10015d2c:	e09d      	b.n	10015e6a <_vfiprintf_r+0x1ee>
10015d2e:	4b5e      	ldr	r3, [pc, #376]	; (10015ea8 <_vfiprintf_r+0x22c>)
10015d30:	2b00      	cmp	r3, #0
10015d32:	d000      	beq.n	10015d36 <_vfiprintf_r+0xba>
10015d34:	e090      	b.n	10015e58 <_vfiprintf_r+0x1dc>
10015d36:	2207      	movs	r2, #7
10015d38:	9b05      	ldr	r3, [sp, #20]
10015d3a:	3307      	adds	r3, #7
10015d3c:	4393      	bics	r3, r2
10015d3e:	3308      	adds	r3, #8
10015d40:	9305      	str	r3, [sp, #20]
10015d42:	696b      	ldr	r3, [r5, #20]
10015d44:	9a03      	ldr	r2, [sp, #12]
10015d46:	189b      	adds	r3, r3, r2
10015d48:	616b      	str	r3, [r5, #20]
10015d4a:	9c02      	ldr	r4, [sp, #8]
10015d4c:	7823      	ldrb	r3, [r4, #0]
10015d4e:	2b00      	cmp	r3, #0
10015d50:	d104      	bne.n	10015d5c <_vfiprintf_r+0xe0>
10015d52:	9b02      	ldr	r3, [sp, #8]
10015d54:	1ae3      	subs	r3, r4, r3
10015d56:	9304      	str	r3, [sp, #16]
10015d58:	d012      	beq.n	10015d80 <_vfiprintf_r+0x104>
10015d5a:	e003      	b.n	10015d64 <_vfiprintf_r+0xe8>
10015d5c:	2b25      	cmp	r3, #37	; 0x25
10015d5e:	d0f8      	beq.n	10015d52 <_vfiprintf_r+0xd6>
10015d60:	3401      	adds	r4, #1
10015d62:	e7f3      	b.n	10015d4c <_vfiprintf_r+0xd0>
10015d64:	9b04      	ldr	r3, [sp, #16]
10015d66:	9a02      	ldr	r2, [sp, #8]
10015d68:	0039      	movs	r1, r7
10015d6a:	0030      	movs	r0, r6
10015d6c:	f7ff ff73 	bl	10015c56 <__sfputs_r>
10015d70:	1c43      	adds	r3, r0, #1
10015d72:	d100      	bne.n	10015d76 <_vfiprintf_r+0xfa>
10015d74:	e086      	b.n	10015e84 <_vfiprintf_r+0x208>
10015d76:	696a      	ldr	r2, [r5, #20]
10015d78:	9b04      	ldr	r3, [sp, #16]
10015d7a:	4694      	mov	ip, r2
10015d7c:	4463      	add	r3, ip
10015d7e:	616b      	str	r3, [r5, #20]
10015d80:	7823      	ldrb	r3, [r4, #0]
10015d82:	2b00      	cmp	r3, #0
10015d84:	d07e      	beq.n	10015e84 <_vfiprintf_r+0x208>
10015d86:	2201      	movs	r2, #1
10015d88:	2300      	movs	r3, #0
10015d8a:	4252      	negs	r2, r2
10015d8c:	606a      	str	r2, [r5, #4]
10015d8e:	a902      	add	r1, sp, #8
10015d90:	3254      	adds	r2, #84	; 0x54
10015d92:	1852      	adds	r2, r2, r1
10015d94:	3401      	adds	r4, #1
10015d96:	602b      	str	r3, [r5, #0]
10015d98:	60eb      	str	r3, [r5, #12]
10015d9a:	60ab      	str	r3, [r5, #8]
10015d9c:	7013      	strb	r3, [r2, #0]
10015d9e:	65ab      	str	r3, [r5, #88]	; 0x58
10015da0:	7821      	ldrb	r1, [r4, #0]
10015da2:	2205      	movs	r2, #5
10015da4:	4841      	ldr	r0, [pc, #260]	; (10015eac <_vfiprintf_r+0x230>)
10015da6:	f000 faf5 	bl	10016394 <memchr>
10015daa:	2800      	cmp	r0, #0
10015dac:	d008      	beq.n	10015dc0 <_vfiprintf_r+0x144>
10015dae:	4b3f      	ldr	r3, [pc, #252]	; (10015eac <_vfiprintf_r+0x230>)
10015db0:	682a      	ldr	r2, [r5, #0]
10015db2:	1ac0      	subs	r0, r0, r3
10015db4:	2301      	movs	r3, #1
10015db6:	4083      	lsls	r3, r0
10015db8:	4313      	orrs	r3, r2
10015dba:	602b      	str	r3, [r5, #0]
10015dbc:	3401      	adds	r4, #1
10015dbe:	e7ef      	b.n	10015da0 <_vfiprintf_r+0x124>
10015dc0:	682b      	ldr	r3, [r5, #0]
10015dc2:	06da      	lsls	r2, r3, #27
10015dc4:	d504      	bpl.n	10015dd0 <_vfiprintf_r+0x154>
10015dc6:	2253      	movs	r2, #83	; 0x53
10015dc8:	2120      	movs	r1, #32
10015dca:	a802      	add	r0, sp, #8
10015dcc:	1812      	adds	r2, r2, r0
10015dce:	7011      	strb	r1, [r2, #0]
10015dd0:	071a      	lsls	r2, r3, #28
10015dd2:	d504      	bpl.n	10015dde <_vfiprintf_r+0x162>
10015dd4:	2253      	movs	r2, #83	; 0x53
10015dd6:	212b      	movs	r1, #43	; 0x2b
10015dd8:	a802      	add	r0, sp, #8
10015dda:	1812      	adds	r2, r2, r0
10015ddc:	7011      	strb	r1, [r2, #0]
10015dde:	7822      	ldrb	r2, [r4, #0]
10015de0:	2a2a      	cmp	r2, #42	; 0x2a
10015de2:	d100      	bne.n	10015de6 <_vfiprintf_r+0x16a>
10015de4:	e77c      	b.n	10015ce0 <_vfiprintf_r+0x64>
10015de6:	9b09      	ldr	r3, [sp, #36]	; 0x24
10015de8:	2000      	movs	r0, #0
10015dea:	210a      	movs	r1, #10
10015dec:	e005      	b.n	10015dfa <_vfiprintf_r+0x17e>
10015dee:	4252      	negs	r2, r2
10015df0:	60ea      	str	r2, [r5, #12]
10015df2:	2202      	movs	r2, #2
10015df4:	4313      	orrs	r3, r2
10015df6:	602b      	str	r3, [r5, #0]
10015df8:	e77a      	b.n	10015cf0 <_vfiprintf_r+0x74>
10015dfa:	7822      	ldrb	r2, [r4, #0]
10015dfc:	3a30      	subs	r2, #48	; 0x30
10015dfe:	2a09      	cmp	r2, #9
10015e00:	d804      	bhi.n	10015e0c <_vfiprintf_r+0x190>
10015e02:	434b      	muls	r3, r1
10015e04:	3401      	adds	r4, #1
10015e06:	189b      	adds	r3, r3, r2
10015e08:	2001      	movs	r0, #1
10015e0a:	e7f6      	b.n	10015dfa <_vfiprintf_r+0x17e>
10015e0c:	2800      	cmp	r0, #0
10015e0e:	d100      	bne.n	10015e12 <_vfiprintf_r+0x196>
10015e10:	e76f      	b.n	10015cf2 <_vfiprintf_r+0x76>
10015e12:	9309      	str	r3, [sp, #36]	; 0x24
10015e14:	e76d      	b.n	10015cf2 <_vfiprintf_r+0x76>
10015e16:	7863      	ldrb	r3, [r4, #1]
10015e18:	2b2a      	cmp	r3, #42	; 0x2a
10015e1a:	d10a      	bne.n	10015e32 <_vfiprintf_r+0x1b6>
10015e1c:	9b05      	ldr	r3, [sp, #20]
10015e1e:	3402      	adds	r4, #2
10015e20:	1d1a      	adds	r2, r3, #4
10015e22:	681b      	ldr	r3, [r3, #0]
10015e24:	9205      	str	r2, [sp, #20]
10015e26:	2b00      	cmp	r3, #0
10015e28:	da01      	bge.n	10015e2e <_vfiprintf_r+0x1b2>
10015e2a:	2301      	movs	r3, #1
10015e2c:	425b      	negs	r3, r3
10015e2e:	9307      	str	r3, [sp, #28]
10015e30:	e763      	b.n	10015cfa <_vfiprintf_r+0x7e>
10015e32:	2300      	movs	r3, #0
10015e34:	200a      	movs	r0, #10
10015e36:	001a      	movs	r2, r3
10015e38:	3401      	adds	r4, #1
10015e3a:	606b      	str	r3, [r5, #4]
10015e3c:	7821      	ldrb	r1, [r4, #0]
10015e3e:	3930      	subs	r1, #48	; 0x30
10015e40:	2909      	cmp	r1, #9
10015e42:	d804      	bhi.n	10015e4e <_vfiprintf_r+0x1d2>
10015e44:	4342      	muls	r2, r0
10015e46:	3401      	adds	r4, #1
10015e48:	1852      	adds	r2, r2, r1
10015e4a:	2301      	movs	r3, #1
10015e4c:	e7f6      	b.n	10015e3c <_vfiprintf_r+0x1c0>
10015e4e:	2b00      	cmp	r3, #0
10015e50:	d100      	bne.n	10015e54 <_vfiprintf_r+0x1d8>
10015e52:	e752      	b.n	10015cfa <_vfiprintf_r+0x7e>
10015e54:	9207      	str	r2, [sp, #28]
10015e56:	e750      	b.n	10015cfa <_vfiprintf_r+0x7e>
10015e58:	ab05      	add	r3, sp, #20
10015e5a:	9300      	str	r3, [sp, #0]
10015e5c:	003a      	movs	r2, r7
10015e5e:	4b14      	ldr	r3, [pc, #80]	; (10015eb0 <_vfiprintf_r+0x234>)
10015e60:	0029      	movs	r1, r5
10015e62:	0030      	movs	r0, r6
10015e64:	e000      	b.n	10015e68 <_vfiprintf_r+0x1ec>
10015e66:	bf00      	nop
10015e68:	e007      	b.n	10015e7a <_vfiprintf_r+0x1fe>
10015e6a:	ab05      	add	r3, sp, #20
10015e6c:	9300      	str	r3, [sp, #0]
10015e6e:	003a      	movs	r2, r7
10015e70:	4b0f      	ldr	r3, [pc, #60]	; (10015eb0 <_vfiprintf_r+0x234>)
10015e72:	0029      	movs	r1, r5
10015e74:	0030      	movs	r0, r6
10015e76:	f000 f88b 	bl	10015f90 <_printf_i>
10015e7a:	9003      	str	r0, [sp, #12]
10015e7c:	9b03      	ldr	r3, [sp, #12]
10015e7e:	3301      	adds	r3, #1
10015e80:	d000      	beq.n	10015e84 <_vfiprintf_r+0x208>
10015e82:	e75e      	b.n	10015d42 <_vfiprintf_r+0xc6>
10015e84:	89bb      	ldrh	r3, [r7, #12]
10015e86:	065b      	lsls	r3, r3, #25
10015e88:	d500      	bpl.n	10015e8c <_vfiprintf_r+0x210>
10015e8a:	e726      	b.n	10015cda <_vfiprintf_r+0x5e>
10015e8c:	980b      	ldr	r0, [sp, #44]	; 0x2c
10015e8e:	b01f      	add	sp, #124	; 0x7c
10015e90:	bdf0      	pop	{r4, r5, r6, r7, pc}
10015e92:	46c0      	nop			; (mov r8, r8)
10015e94:	1001854c 	.word	0x1001854c
10015e98:	1001856c 	.word	0x1001856c
10015e9c:	1001858c 	.word	0x1001858c
10015ea0:	100185b2 	.word	0x100185b2
10015ea4:	100185b6 	.word	0x100185b6
10015ea8:	00000000 	.word	0x00000000
10015eac:	100185ac 	.word	0x100185ac
10015eb0:	10015c57 	.word	0x10015c57

10015eb4 <_printf_common>:
10015eb4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10015eb6:	0017      	movs	r7, r2
10015eb8:	9301      	str	r3, [sp, #4]
10015eba:	688a      	ldr	r2, [r1, #8]
10015ebc:	690b      	ldr	r3, [r1, #16]
10015ebe:	9000      	str	r0, [sp, #0]
10015ec0:	000c      	movs	r4, r1
10015ec2:	4293      	cmp	r3, r2
10015ec4:	da00      	bge.n	10015ec8 <_printf_common+0x14>
10015ec6:	0013      	movs	r3, r2
10015ec8:	0022      	movs	r2, r4
10015eca:	603b      	str	r3, [r7, #0]
10015ecc:	3243      	adds	r2, #67	; 0x43
10015ece:	7812      	ldrb	r2, [r2, #0]
10015ed0:	2a00      	cmp	r2, #0
10015ed2:	d001      	beq.n	10015ed8 <_printf_common+0x24>
10015ed4:	3301      	adds	r3, #1
10015ed6:	603b      	str	r3, [r7, #0]
10015ed8:	6823      	ldr	r3, [r4, #0]
10015eda:	069b      	lsls	r3, r3, #26
10015edc:	d502      	bpl.n	10015ee4 <_printf_common+0x30>
10015ede:	683b      	ldr	r3, [r7, #0]
10015ee0:	3302      	adds	r3, #2
10015ee2:	603b      	str	r3, [r7, #0]
10015ee4:	2506      	movs	r5, #6
10015ee6:	6823      	ldr	r3, [r4, #0]
10015ee8:	401d      	ands	r5, r3
10015eea:	d01e      	beq.n	10015f2a <_printf_common+0x76>
10015eec:	0023      	movs	r3, r4
10015eee:	3343      	adds	r3, #67	; 0x43
10015ef0:	781b      	ldrb	r3, [r3, #0]
10015ef2:	1e5a      	subs	r2, r3, #1
10015ef4:	4193      	sbcs	r3, r2
10015ef6:	6822      	ldr	r2, [r4, #0]
10015ef8:	0692      	lsls	r2, r2, #26
10015efa:	d51c      	bpl.n	10015f36 <_printf_common+0x82>
10015efc:	2030      	movs	r0, #48	; 0x30
10015efe:	18e1      	adds	r1, r4, r3
10015f00:	3143      	adds	r1, #67	; 0x43
10015f02:	7008      	strb	r0, [r1, #0]
10015f04:	0021      	movs	r1, r4
10015f06:	1c5a      	adds	r2, r3, #1
10015f08:	3145      	adds	r1, #69	; 0x45
10015f0a:	7809      	ldrb	r1, [r1, #0]
10015f0c:	18a2      	adds	r2, r4, r2
10015f0e:	3243      	adds	r2, #67	; 0x43
10015f10:	3302      	adds	r3, #2
10015f12:	7011      	strb	r1, [r2, #0]
10015f14:	e00f      	b.n	10015f36 <_printf_common+0x82>
10015f16:	0022      	movs	r2, r4
10015f18:	2301      	movs	r3, #1
10015f1a:	3219      	adds	r2, #25
10015f1c:	9901      	ldr	r1, [sp, #4]
10015f1e:	9800      	ldr	r0, [sp, #0]
10015f20:	9e08      	ldr	r6, [sp, #32]
10015f22:	47b0      	blx	r6
10015f24:	1c43      	adds	r3, r0, #1
10015f26:	d00e      	beq.n	10015f46 <_printf_common+0x92>
10015f28:	3501      	adds	r5, #1
10015f2a:	68e3      	ldr	r3, [r4, #12]
10015f2c:	683a      	ldr	r2, [r7, #0]
10015f2e:	1a9b      	subs	r3, r3, r2
10015f30:	429d      	cmp	r5, r3
10015f32:	dbf0      	blt.n	10015f16 <_printf_common+0x62>
10015f34:	e7da      	b.n	10015eec <_printf_common+0x38>
10015f36:	0022      	movs	r2, r4
10015f38:	9901      	ldr	r1, [sp, #4]
10015f3a:	3243      	adds	r2, #67	; 0x43
10015f3c:	9800      	ldr	r0, [sp, #0]
10015f3e:	9d08      	ldr	r5, [sp, #32]
10015f40:	47a8      	blx	r5
10015f42:	1c43      	adds	r3, r0, #1
10015f44:	d102      	bne.n	10015f4c <_printf_common+0x98>
10015f46:	2001      	movs	r0, #1
10015f48:	4240      	negs	r0, r0
10015f4a:	e020      	b.n	10015f8e <_printf_common+0xda>
10015f4c:	2306      	movs	r3, #6
10015f4e:	6820      	ldr	r0, [r4, #0]
10015f50:	68e1      	ldr	r1, [r4, #12]
10015f52:	683a      	ldr	r2, [r7, #0]
10015f54:	4003      	ands	r3, r0
10015f56:	2500      	movs	r5, #0
10015f58:	2b04      	cmp	r3, #4
10015f5a:	d103      	bne.n	10015f64 <_printf_common+0xb0>
10015f5c:	1a8d      	subs	r5, r1, r2
10015f5e:	43eb      	mvns	r3, r5
10015f60:	17db      	asrs	r3, r3, #31
10015f62:	401d      	ands	r5, r3
10015f64:	68a3      	ldr	r3, [r4, #8]
10015f66:	6922      	ldr	r2, [r4, #16]
10015f68:	4293      	cmp	r3, r2
10015f6a:	dd01      	ble.n	10015f70 <_printf_common+0xbc>
10015f6c:	1a9b      	subs	r3, r3, r2
10015f6e:	18ed      	adds	r5, r5, r3
10015f70:	2700      	movs	r7, #0
10015f72:	42bd      	cmp	r5, r7
10015f74:	d00a      	beq.n	10015f8c <_printf_common+0xd8>
10015f76:	0022      	movs	r2, r4
10015f78:	2301      	movs	r3, #1
10015f7a:	321a      	adds	r2, #26
10015f7c:	9901      	ldr	r1, [sp, #4]
10015f7e:	9800      	ldr	r0, [sp, #0]
10015f80:	9e08      	ldr	r6, [sp, #32]
10015f82:	47b0      	blx	r6
10015f84:	1c43      	adds	r3, r0, #1
10015f86:	d0de      	beq.n	10015f46 <_printf_common+0x92>
10015f88:	3701      	adds	r7, #1
10015f8a:	e7f2      	b.n	10015f72 <_printf_common+0xbe>
10015f8c:	2000      	movs	r0, #0
10015f8e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

10015f90 <_printf_i>:
10015f90:	b5f0      	push	{r4, r5, r6, r7, lr}
10015f92:	b08b      	sub	sp, #44	; 0x2c
10015f94:	9206      	str	r2, [sp, #24]
10015f96:	000a      	movs	r2, r1
10015f98:	3243      	adds	r2, #67	; 0x43
10015f9a:	9307      	str	r3, [sp, #28]
10015f9c:	9005      	str	r0, [sp, #20]
10015f9e:	9204      	str	r2, [sp, #16]
10015fa0:	7e0a      	ldrb	r2, [r1, #24]
10015fa2:	000c      	movs	r4, r1
10015fa4:	9b10      	ldr	r3, [sp, #64]	; 0x40
10015fa6:	2a6e      	cmp	r2, #110	; 0x6e
10015fa8:	d100      	bne.n	10015fac <_printf_i+0x1c>
10015faa:	e0ab      	b.n	10016104 <_printf_i+0x174>
10015fac:	d811      	bhi.n	10015fd2 <_printf_i+0x42>
10015fae:	2a63      	cmp	r2, #99	; 0x63
10015fb0:	d022      	beq.n	10015ff8 <_printf_i+0x68>
10015fb2:	d809      	bhi.n	10015fc8 <_printf_i+0x38>
10015fb4:	2a00      	cmp	r2, #0
10015fb6:	d100      	bne.n	10015fba <_printf_i+0x2a>
10015fb8:	e0b5      	b.n	10016126 <_printf_i+0x196>
10015fba:	2a58      	cmp	r2, #88	; 0x58
10015fbc:	d000      	beq.n	10015fc0 <_printf_i+0x30>
10015fbe:	e0c5      	b.n	1001614c <_printf_i+0x1bc>
10015fc0:	3145      	adds	r1, #69	; 0x45
10015fc2:	700a      	strb	r2, [r1, #0]
10015fc4:	4a81      	ldr	r2, [pc, #516]	; (100161cc <_printf_i+0x23c>)
10015fc6:	e04f      	b.n	10016068 <_printf_i+0xd8>
10015fc8:	2a64      	cmp	r2, #100	; 0x64
10015fca:	d01d      	beq.n	10016008 <_printf_i+0x78>
10015fcc:	2a69      	cmp	r2, #105	; 0x69
10015fce:	d01b      	beq.n	10016008 <_printf_i+0x78>
10015fd0:	e0bc      	b.n	1001614c <_printf_i+0x1bc>
10015fd2:	2a73      	cmp	r2, #115	; 0x73
10015fd4:	d100      	bne.n	10015fd8 <_printf_i+0x48>
10015fd6:	e0aa      	b.n	1001612e <_printf_i+0x19e>
10015fd8:	d809      	bhi.n	10015fee <_printf_i+0x5e>
10015fda:	2a6f      	cmp	r2, #111	; 0x6f
10015fdc:	d029      	beq.n	10016032 <_printf_i+0xa2>
10015fde:	2a70      	cmp	r2, #112	; 0x70
10015fe0:	d000      	beq.n	10015fe4 <_printf_i+0x54>
10015fe2:	e0b3      	b.n	1001614c <_printf_i+0x1bc>
10015fe4:	2220      	movs	r2, #32
10015fe6:	6809      	ldr	r1, [r1, #0]
10015fe8:	430a      	orrs	r2, r1
10015fea:	6022      	str	r2, [r4, #0]
10015fec:	e037      	b.n	1001605e <_printf_i+0xce>
10015fee:	2a75      	cmp	r2, #117	; 0x75
10015ff0:	d01f      	beq.n	10016032 <_printf_i+0xa2>
10015ff2:	2a78      	cmp	r2, #120	; 0x78
10015ff4:	d033      	beq.n	1001605e <_printf_i+0xce>
10015ff6:	e0a9      	b.n	1001614c <_printf_i+0x1bc>
10015ff8:	000e      	movs	r6, r1
10015ffa:	681a      	ldr	r2, [r3, #0]
10015ffc:	3642      	adds	r6, #66	; 0x42
10015ffe:	1d11      	adds	r1, r2, #4
10016000:	6019      	str	r1, [r3, #0]
10016002:	6813      	ldr	r3, [r2, #0]
10016004:	7033      	strb	r3, [r6, #0]
10016006:	e0a4      	b.n	10016152 <_printf_i+0x1c2>
10016008:	6821      	ldr	r1, [r4, #0]
1001600a:	681a      	ldr	r2, [r3, #0]
1001600c:	0608      	lsls	r0, r1, #24
1001600e:	d406      	bmi.n	1001601e <_printf_i+0x8e>
10016010:	0649      	lsls	r1, r1, #25
10016012:	d504      	bpl.n	1001601e <_printf_i+0x8e>
10016014:	1d11      	adds	r1, r2, #4
10016016:	6019      	str	r1, [r3, #0]
10016018:	2300      	movs	r3, #0
1001601a:	5ed5      	ldrsh	r5, [r2, r3]
1001601c:	e002      	b.n	10016024 <_printf_i+0x94>
1001601e:	1d11      	adds	r1, r2, #4
10016020:	6019      	str	r1, [r3, #0]
10016022:	6815      	ldr	r5, [r2, #0]
10016024:	2d00      	cmp	r5, #0
10016026:	da3b      	bge.n	100160a0 <_printf_i+0x110>
10016028:	232d      	movs	r3, #45	; 0x2d
1001602a:	9a04      	ldr	r2, [sp, #16]
1001602c:	426d      	negs	r5, r5
1001602e:	7013      	strb	r3, [r2, #0]
10016030:	e036      	b.n	100160a0 <_printf_i+0x110>
10016032:	6821      	ldr	r1, [r4, #0]
10016034:	681a      	ldr	r2, [r3, #0]
10016036:	0608      	lsls	r0, r1, #24
10016038:	d406      	bmi.n	10016048 <_printf_i+0xb8>
1001603a:	0649      	lsls	r1, r1, #25
1001603c:	d504      	bpl.n	10016048 <_printf_i+0xb8>
1001603e:	6815      	ldr	r5, [r2, #0]
10016040:	1d11      	adds	r1, r2, #4
10016042:	6019      	str	r1, [r3, #0]
10016044:	b2ad      	uxth	r5, r5
10016046:	e002      	b.n	1001604e <_printf_i+0xbe>
10016048:	1d11      	adds	r1, r2, #4
1001604a:	6019      	str	r1, [r3, #0]
1001604c:	6815      	ldr	r5, [r2, #0]
1001604e:	4b5f      	ldr	r3, [pc, #380]	; (100161cc <_printf_i+0x23c>)
10016050:	7e22      	ldrb	r2, [r4, #24]
10016052:	9303      	str	r3, [sp, #12]
10016054:	2708      	movs	r7, #8
10016056:	2a6f      	cmp	r2, #111	; 0x6f
10016058:	d01d      	beq.n	10016096 <_printf_i+0x106>
1001605a:	270a      	movs	r7, #10
1001605c:	e01b      	b.n	10016096 <_printf_i+0x106>
1001605e:	0022      	movs	r2, r4
10016060:	2178      	movs	r1, #120	; 0x78
10016062:	3245      	adds	r2, #69	; 0x45
10016064:	7011      	strb	r1, [r2, #0]
10016066:	4a5a      	ldr	r2, [pc, #360]	; (100161d0 <_printf_i+0x240>)
10016068:	6819      	ldr	r1, [r3, #0]
1001606a:	9203      	str	r2, [sp, #12]
1001606c:	1d08      	adds	r0, r1, #4
1001606e:	6822      	ldr	r2, [r4, #0]
10016070:	6018      	str	r0, [r3, #0]
10016072:	680d      	ldr	r5, [r1, #0]
10016074:	0610      	lsls	r0, r2, #24
10016076:	d402      	bmi.n	1001607e <_printf_i+0xee>
10016078:	0650      	lsls	r0, r2, #25
1001607a:	d500      	bpl.n	1001607e <_printf_i+0xee>
1001607c:	b2ad      	uxth	r5, r5
1001607e:	07d3      	lsls	r3, r2, #31
10016080:	d502      	bpl.n	10016088 <_printf_i+0xf8>
10016082:	2320      	movs	r3, #32
10016084:	431a      	orrs	r2, r3
10016086:	6022      	str	r2, [r4, #0]
10016088:	2710      	movs	r7, #16
1001608a:	2d00      	cmp	r5, #0
1001608c:	d103      	bne.n	10016096 <_printf_i+0x106>
1001608e:	2320      	movs	r3, #32
10016090:	6822      	ldr	r2, [r4, #0]
10016092:	439a      	bics	r2, r3
10016094:	6022      	str	r2, [r4, #0]
10016096:	0023      	movs	r3, r4
10016098:	2200      	movs	r2, #0
1001609a:	3343      	adds	r3, #67	; 0x43
1001609c:	701a      	strb	r2, [r3, #0]
1001609e:	e002      	b.n	100160a6 <_printf_i+0x116>
100160a0:	270a      	movs	r7, #10
100160a2:	4b4a      	ldr	r3, [pc, #296]	; (100161cc <_printf_i+0x23c>)
100160a4:	9303      	str	r3, [sp, #12]
100160a6:	6863      	ldr	r3, [r4, #4]
100160a8:	60a3      	str	r3, [r4, #8]
100160aa:	2b00      	cmp	r3, #0
100160ac:	db09      	blt.n	100160c2 <_printf_i+0x132>
100160ae:	2204      	movs	r2, #4
100160b0:	6821      	ldr	r1, [r4, #0]
100160b2:	4391      	bics	r1, r2
100160b4:	6021      	str	r1, [r4, #0]
100160b6:	2d00      	cmp	r5, #0
100160b8:	d105      	bne.n	100160c6 <_printf_i+0x136>
100160ba:	9e04      	ldr	r6, [sp, #16]
100160bc:	2b00      	cmp	r3, #0
100160be:	d011      	beq.n	100160e4 <_printf_i+0x154>
100160c0:	e07b      	b.n	100161ba <_printf_i+0x22a>
100160c2:	2d00      	cmp	r5, #0
100160c4:	d079      	beq.n	100161ba <_printf_i+0x22a>
100160c6:	9e04      	ldr	r6, [sp, #16]
100160c8:	0028      	movs	r0, r5
100160ca:	0039      	movs	r1, r7
100160cc:	f7fd f8b2 	bl	10013234 <__aeabi_uidivmod>
100160d0:	9b03      	ldr	r3, [sp, #12]
100160d2:	3e01      	subs	r6, #1
100160d4:	5c5b      	ldrb	r3, [r3, r1]
100160d6:	0028      	movs	r0, r5
100160d8:	7033      	strb	r3, [r6, #0]
100160da:	0039      	movs	r1, r7
100160dc:	f7fd f824 	bl	10013128 <__aeabi_uidiv>
100160e0:	1e05      	subs	r5, r0, #0
100160e2:	d1f1      	bne.n	100160c8 <_printf_i+0x138>
100160e4:	2f08      	cmp	r7, #8
100160e6:	d109      	bne.n	100160fc <_printf_i+0x16c>
100160e8:	6823      	ldr	r3, [r4, #0]
100160ea:	07db      	lsls	r3, r3, #31
100160ec:	d506      	bpl.n	100160fc <_printf_i+0x16c>
100160ee:	6863      	ldr	r3, [r4, #4]
100160f0:	6922      	ldr	r2, [r4, #16]
100160f2:	4293      	cmp	r3, r2
100160f4:	dc02      	bgt.n	100160fc <_printf_i+0x16c>
100160f6:	2330      	movs	r3, #48	; 0x30
100160f8:	3e01      	subs	r6, #1
100160fa:	7033      	strb	r3, [r6, #0]
100160fc:	9b04      	ldr	r3, [sp, #16]
100160fe:	1b9b      	subs	r3, r3, r6
10016100:	6123      	str	r3, [r4, #16]
10016102:	e02b      	b.n	1001615c <_printf_i+0x1cc>
10016104:	6809      	ldr	r1, [r1, #0]
10016106:	681a      	ldr	r2, [r3, #0]
10016108:	0608      	lsls	r0, r1, #24
1001610a:	d407      	bmi.n	1001611c <_printf_i+0x18c>
1001610c:	0649      	lsls	r1, r1, #25
1001610e:	d505      	bpl.n	1001611c <_printf_i+0x18c>
10016110:	1d11      	adds	r1, r2, #4
10016112:	6019      	str	r1, [r3, #0]
10016114:	6813      	ldr	r3, [r2, #0]
10016116:	8aa2      	ldrh	r2, [r4, #20]
10016118:	801a      	strh	r2, [r3, #0]
1001611a:	e004      	b.n	10016126 <_printf_i+0x196>
1001611c:	1d11      	adds	r1, r2, #4
1001611e:	6019      	str	r1, [r3, #0]
10016120:	6813      	ldr	r3, [r2, #0]
10016122:	6962      	ldr	r2, [r4, #20]
10016124:	601a      	str	r2, [r3, #0]
10016126:	2300      	movs	r3, #0
10016128:	9e04      	ldr	r6, [sp, #16]
1001612a:	6123      	str	r3, [r4, #16]
1001612c:	e016      	b.n	1001615c <_printf_i+0x1cc>
1001612e:	681a      	ldr	r2, [r3, #0]
10016130:	1d11      	adds	r1, r2, #4
10016132:	6019      	str	r1, [r3, #0]
10016134:	6816      	ldr	r6, [r2, #0]
10016136:	2100      	movs	r1, #0
10016138:	6862      	ldr	r2, [r4, #4]
1001613a:	0030      	movs	r0, r6
1001613c:	f000 f92a 	bl	10016394 <memchr>
10016140:	2800      	cmp	r0, #0
10016142:	d001      	beq.n	10016148 <_printf_i+0x1b8>
10016144:	1b80      	subs	r0, r0, r6
10016146:	6060      	str	r0, [r4, #4]
10016148:	6863      	ldr	r3, [r4, #4]
1001614a:	e003      	b.n	10016154 <_printf_i+0x1c4>
1001614c:	0026      	movs	r6, r4
1001614e:	3642      	adds	r6, #66	; 0x42
10016150:	7032      	strb	r2, [r6, #0]
10016152:	2301      	movs	r3, #1
10016154:	6123      	str	r3, [r4, #16]
10016156:	2300      	movs	r3, #0
10016158:	9a04      	ldr	r2, [sp, #16]
1001615a:	7013      	strb	r3, [r2, #0]
1001615c:	9b07      	ldr	r3, [sp, #28]
1001615e:	aa09      	add	r2, sp, #36	; 0x24
10016160:	9300      	str	r3, [sp, #0]
10016162:	0021      	movs	r1, r4
10016164:	9b06      	ldr	r3, [sp, #24]
10016166:	9805      	ldr	r0, [sp, #20]
10016168:	f7ff fea4 	bl	10015eb4 <_printf_common>
1001616c:	1c43      	adds	r3, r0, #1
1001616e:	d102      	bne.n	10016176 <_printf_i+0x1e6>
10016170:	2001      	movs	r0, #1
10016172:	4240      	negs	r0, r0
10016174:	e027      	b.n	100161c6 <_printf_i+0x236>
10016176:	6923      	ldr	r3, [r4, #16]
10016178:	0032      	movs	r2, r6
1001617a:	9906      	ldr	r1, [sp, #24]
1001617c:	9805      	ldr	r0, [sp, #20]
1001617e:	9d07      	ldr	r5, [sp, #28]
10016180:	47a8      	blx	r5
10016182:	1c43      	adds	r3, r0, #1
10016184:	d0f4      	beq.n	10016170 <_printf_i+0x1e0>
10016186:	6823      	ldr	r3, [r4, #0]
10016188:	2500      	movs	r5, #0
1001618a:	079b      	lsls	r3, r3, #30
1001618c:	d40f      	bmi.n	100161ae <_printf_i+0x21e>
1001618e:	9b09      	ldr	r3, [sp, #36]	; 0x24
10016190:	68e0      	ldr	r0, [r4, #12]
10016192:	4298      	cmp	r0, r3
10016194:	da17      	bge.n	100161c6 <_printf_i+0x236>
10016196:	0018      	movs	r0, r3
10016198:	e015      	b.n	100161c6 <_printf_i+0x236>
1001619a:	0022      	movs	r2, r4
1001619c:	2301      	movs	r3, #1
1001619e:	3219      	adds	r2, #25
100161a0:	9906      	ldr	r1, [sp, #24]
100161a2:	9805      	ldr	r0, [sp, #20]
100161a4:	9e07      	ldr	r6, [sp, #28]
100161a6:	47b0      	blx	r6
100161a8:	1c43      	adds	r3, r0, #1
100161aa:	d0e1      	beq.n	10016170 <_printf_i+0x1e0>
100161ac:	3501      	adds	r5, #1
100161ae:	68e3      	ldr	r3, [r4, #12]
100161b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
100161b2:	1a9b      	subs	r3, r3, r2
100161b4:	429d      	cmp	r5, r3
100161b6:	dbf0      	blt.n	1001619a <_printf_i+0x20a>
100161b8:	e7e9      	b.n	1001618e <_printf_i+0x1fe>
100161ba:	0026      	movs	r6, r4
100161bc:	9b03      	ldr	r3, [sp, #12]
100161be:	3642      	adds	r6, #66	; 0x42
100161c0:	781b      	ldrb	r3, [r3, #0]
100161c2:	7033      	strb	r3, [r6, #0]
100161c4:	e78e      	b.n	100160e4 <_printf_i+0x154>
100161c6:	b00b      	add	sp, #44	; 0x2c
100161c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
100161ca:	46c0      	nop			; (mov r8, r8)
100161cc:	100185bd 	.word	0x100185bd
100161d0:	100185ce 	.word	0x100185ce

100161d4 <_putc_r>:
100161d4:	b570      	push	{r4, r5, r6, lr}
100161d6:	0006      	movs	r6, r0
100161d8:	000d      	movs	r5, r1
100161da:	0014      	movs	r4, r2
100161dc:	2800      	cmp	r0, #0
100161de:	d004      	beq.n	100161ea <_putc_r+0x16>
100161e0:	6983      	ldr	r3, [r0, #24]
100161e2:	2b00      	cmp	r3, #0
100161e4:	d101      	bne.n	100161ea <_putc_r+0x16>
100161e6:	f7ff fc29 	bl	10015a3c <__sinit>
100161ea:	4b12      	ldr	r3, [pc, #72]	; (10016234 <_putc_r+0x60>)
100161ec:	429c      	cmp	r4, r3
100161ee:	d101      	bne.n	100161f4 <_putc_r+0x20>
100161f0:	6874      	ldr	r4, [r6, #4]
100161f2:	e008      	b.n	10016206 <_putc_r+0x32>
100161f4:	4b10      	ldr	r3, [pc, #64]	; (10016238 <_putc_r+0x64>)
100161f6:	429c      	cmp	r4, r3
100161f8:	d101      	bne.n	100161fe <_putc_r+0x2a>
100161fa:	68b4      	ldr	r4, [r6, #8]
100161fc:	e003      	b.n	10016206 <_putc_r+0x32>
100161fe:	4b0f      	ldr	r3, [pc, #60]	; (1001623c <_putc_r+0x68>)
10016200:	429c      	cmp	r4, r3
10016202:	d100      	bne.n	10016206 <_putc_r+0x32>
10016204:	68f4      	ldr	r4, [r6, #12]
10016206:	68a3      	ldr	r3, [r4, #8]
10016208:	3b01      	subs	r3, #1
1001620a:	60a3      	str	r3, [r4, #8]
1001620c:	2b00      	cmp	r3, #0
1001620e:	da05      	bge.n	1001621c <_putc_r+0x48>
10016210:	69a2      	ldr	r2, [r4, #24]
10016212:	4293      	cmp	r3, r2
10016214:	db08      	blt.n	10016228 <_putc_r+0x54>
10016216:	b2eb      	uxtb	r3, r5
10016218:	2b0a      	cmp	r3, #10
1001621a:	d005      	beq.n	10016228 <_putc_r+0x54>
1001621c:	6823      	ldr	r3, [r4, #0]
1001621e:	b2e8      	uxtb	r0, r5
10016220:	1c5a      	adds	r2, r3, #1
10016222:	6022      	str	r2, [r4, #0]
10016224:	701d      	strb	r5, [r3, #0]
10016226:	e004      	b.n	10016232 <_putc_r+0x5e>
10016228:	0022      	movs	r2, r4
1001622a:	0029      	movs	r1, r5
1001622c:	0030      	movs	r0, r6
1001622e:	f7ff fa43 	bl	100156b8 <__swbuf_r>
10016232:	bd70      	pop	{r4, r5, r6, pc}
10016234:	1001854c 	.word	0x1001854c
10016238:	1001856c 	.word	0x1001856c
1001623c:	1001858c 	.word	0x1001858c

10016240 <__sread>:
10016240:	b570      	push	{r4, r5, r6, lr}
10016242:	000c      	movs	r4, r1
10016244:	250e      	movs	r5, #14
10016246:	5f49      	ldrsh	r1, [r1, r5]
10016248:	f000 f8b0 	bl	100163ac <_read_r>
1001624c:	2800      	cmp	r0, #0
1001624e:	db03      	blt.n	10016258 <__sread+0x18>
10016250:	6d63      	ldr	r3, [r4, #84]	; 0x54
10016252:	181b      	adds	r3, r3, r0
10016254:	6563      	str	r3, [r4, #84]	; 0x54
10016256:	e003      	b.n	10016260 <__sread+0x20>
10016258:	89a2      	ldrh	r2, [r4, #12]
1001625a:	4b02      	ldr	r3, [pc, #8]	; (10016264 <__sread+0x24>)
1001625c:	4013      	ands	r3, r2
1001625e:	81a3      	strh	r3, [r4, #12]
10016260:	bd70      	pop	{r4, r5, r6, pc}
10016262:	46c0      	nop			; (mov r8, r8)
10016264:	ffffefff 	.word	0xffffefff

10016268 <__swrite>:
10016268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1001626a:	001f      	movs	r7, r3
1001626c:	898b      	ldrh	r3, [r1, #12]
1001626e:	0005      	movs	r5, r0
10016270:	000c      	movs	r4, r1
10016272:	0016      	movs	r6, r2
10016274:	05db      	lsls	r3, r3, #23
10016276:	d505      	bpl.n	10016284 <__swrite+0x1c>
10016278:	230e      	movs	r3, #14
1001627a:	5ec9      	ldrsh	r1, [r1, r3]
1001627c:	2200      	movs	r2, #0
1001627e:	2302      	movs	r3, #2
10016280:	f000 f874 	bl	1001636c <_lseek_r>
10016284:	89a2      	ldrh	r2, [r4, #12]
10016286:	4b05      	ldr	r3, [pc, #20]	; (1001629c <__swrite+0x34>)
10016288:	0028      	movs	r0, r5
1001628a:	4013      	ands	r3, r2
1001628c:	81a3      	strh	r3, [r4, #12]
1001628e:	0032      	movs	r2, r6
10016290:	230e      	movs	r3, #14
10016292:	5ee1      	ldrsh	r1, [r4, r3]
10016294:	003b      	movs	r3, r7
10016296:	f000 f81f 	bl	100162d8 <_write_r>
1001629a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1001629c:	ffffefff 	.word	0xffffefff

100162a0 <__sseek>:
100162a0:	b570      	push	{r4, r5, r6, lr}
100162a2:	000c      	movs	r4, r1
100162a4:	250e      	movs	r5, #14
100162a6:	5f49      	ldrsh	r1, [r1, r5]
100162a8:	f000 f860 	bl	1001636c <_lseek_r>
100162ac:	89a3      	ldrh	r3, [r4, #12]
100162ae:	1c42      	adds	r2, r0, #1
100162b0:	d103      	bne.n	100162ba <__sseek+0x1a>
100162b2:	4a05      	ldr	r2, [pc, #20]	; (100162c8 <__sseek+0x28>)
100162b4:	4013      	ands	r3, r2
100162b6:	81a3      	strh	r3, [r4, #12]
100162b8:	e004      	b.n	100162c4 <__sseek+0x24>
100162ba:	2280      	movs	r2, #128	; 0x80
100162bc:	0152      	lsls	r2, r2, #5
100162be:	4313      	orrs	r3, r2
100162c0:	81a3      	strh	r3, [r4, #12]
100162c2:	6560      	str	r0, [r4, #84]	; 0x54
100162c4:	bd70      	pop	{r4, r5, r6, pc}
100162c6:	46c0      	nop			; (mov r8, r8)
100162c8:	ffffefff 	.word	0xffffefff

100162cc <__sclose>:
100162cc:	b510      	push	{r4, lr}
100162ce:	230e      	movs	r3, #14
100162d0:	5ec9      	ldrsh	r1, [r1, r3]
100162d2:	f000 f815 	bl	10016300 <_close_r>
100162d6:	bd10      	pop	{r4, pc}

100162d8 <_write_r>:
100162d8:	b570      	push	{r4, r5, r6, lr}
100162da:	0005      	movs	r5, r0
100162dc:	0008      	movs	r0, r1
100162de:	0011      	movs	r1, r2
100162e0:	2200      	movs	r2, #0
100162e2:	4c06      	ldr	r4, [pc, #24]	; (100162fc <_write_r+0x24>)
100162e4:	6022      	str	r2, [r4, #0]
100162e6:	001a      	movs	r2, r3
100162e8:	f7f7 fa7c 	bl	1000d7e4 <_write>
100162ec:	1c43      	adds	r3, r0, #1
100162ee:	d103      	bne.n	100162f8 <_write_r+0x20>
100162f0:	6823      	ldr	r3, [r4, #0]
100162f2:	2b00      	cmp	r3, #0
100162f4:	d000      	beq.n	100162f8 <_write_r+0x20>
100162f6:	602b      	str	r3, [r5, #0]
100162f8:	bd70      	pop	{r4, r5, r6, pc}
100162fa:	46c0      	nop			; (mov r8, r8)
100162fc:	1001b548 	.word	0x1001b548

10016300 <_close_r>:
10016300:	2300      	movs	r3, #0
10016302:	b570      	push	{r4, r5, r6, lr}
10016304:	4c06      	ldr	r4, [pc, #24]	; (10016320 <_close_r+0x20>)
10016306:	0005      	movs	r5, r0
10016308:	0008      	movs	r0, r1
1001630a:	6023      	str	r3, [r4, #0]
1001630c:	f7f7 faa4 	bl	1000d858 <_close>
10016310:	1c43      	adds	r3, r0, #1
10016312:	d103      	bne.n	1001631c <_close_r+0x1c>
10016314:	6823      	ldr	r3, [r4, #0]
10016316:	2b00      	cmp	r3, #0
10016318:	d000      	beq.n	1001631c <_close_r+0x1c>
1001631a:	602b      	str	r3, [r5, #0]
1001631c:	bd70      	pop	{r4, r5, r6, pc}
1001631e:	46c0      	nop			; (mov r8, r8)
10016320:	1001b548 	.word	0x1001b548

10016324 <_fstat_r>:
10016324:	2300      	movs	r3, #0
10016326:	b570      	push	{r4, r5, r6, lr}
10016328:	4c06      	ldr	r4, [pc, #24]	; (10016344 <_fstat_r+0x20>)
1001632a:	0005      	movs	r5, r0
1001632c:	0008      	movs	r0, r1
1001632e:	0011      	movs	r1, r2
10016330:	6023      	str	r3, [r4, #0]
10016332:	f7f7 fa95 	bl	1000d860 <_fstat>
10016336:	1c43      	adds	r3, r0, #1
10016338:	d103      	bne.n	10016342 <_fstat_r+0x1e>
1001633a:	6823      	ldr	r3, [r4, #0]
1001633c:	2b00      	cmp	r3, #0
1001633e:	d000      	beq.n	10016342 <_fstat_r+0x1e>
10016340:	602b      	str	r3, [r5, #0]
10016342:	bd70      	pop	{r4, r5, r6, pc}
10016344:	1001b548 	.word	0x1001b548

10016348 <_isatty_r>:
10016348:	2300      	movs	r3, #0
1001634a:	b570      	push	{r4, r5, r6, lr}
1001634c:	4c06      	ldr	r4, [pc, #24]	; (10016368 <_isatty_r+0x20>)
1001634e:	0005      	movs	r5, r0
10016350:	0008      	movs	r0, r1
10016352:	6023      	str	r3, [r4, #0]
10016354:	f7f7 fa8a 	bl	1000d86c <_isatty>
10016358:	1c43      	adds	r3, r0, #1
1001635a:	d103      	bne.n	10016364 <_isatty_r+0x1c>
1001635c:	6823      	ldr	r3, [r4, #0]
1001635e:	2b00      	cmp	r3, #0
10016360:	d000      	beq.n	10016364 <_isatty_r+0x1c>
10016362:	602b      	str	r3, [r5, #0]
10016364:	bd70      	pop	{r4, r5, r6, pc}
10016366:	46c0      	nop			; (mov r8, r8)
10016368:	1001b548 	.word	0x1001b548

1001636c <_lseek_r>:
1001636c:	b570      	push	{r4, r5, r6, lr}
1001636e:	0005      	movs	r5, r0
10016370:	0008      	movs	r0, r1
10016372:	0011      	movs	r1, r2
10016374:	2200      	movs	r2, #0
10016376:	4c06      	ldr	r4, [pc, #24]	; (10016390 <_lseek_r+0x24>)
10016378:	6022      	str	r2, [r4, #0]
1001637a:	001a      	movs	r2, r3
1001637c:	f7f7 fa78 	bl	1000d870 <_lseek>
10016380:	1c43      	adds	r3, r0, #1
10016382:	d103      	bne.n	1001638c <_lseek_r+0x20>
10016384:	6823      	ldr	r3, [r4, #0]
10016386:	2b00      	cmp	r3, #0
10016388:	d000      	beq.n	1001638c <_lseek_r+0x20>
1001638a:	602b      	str	r3, [r5, #0]
1001638c:	bd70      	pop	{r4, r5, r6, pc}
1001638e:	46c0      	nop			; (mov r8, r8)
10016390:	1001b548 	.word	0x1001b548

10016394 <memchr>:
10016394:	b2c9      	uxtb	r1, r1
10016396:	1882      	adds	r2, r0, r2
10016398:	4290      	cmp	r0, r2
1001639a:	d004      	beq.n	100163a6 <memchr+0x12>
1001639c:	7803      	ldrb	r3, [r0, #0]
1001639e:	428b      	cmp	r3, r1
100163a0:	d002      	beq.n	100163a8 <memchr+0x14>
100163a2:	3001      	adds	r0, #1
100163a4:	e7f8      	b.n	10016398 <memchr+0x4>
100163a6:	2000      	movs	r0, #0
100163a8:	4770      	bx	lr
	...

100163ac <_read_r>:
100163ac:	b570      	push	{r4, r5, r6, lr}
100163ae:	0005      	movs	r5, r0
100163b0:	0008      	movs	r0, r1
100163b2:	0011      	movs	r1, r2
100163b4:	2200      	movs	r2, #0
100163b6:	4c06      	ldr	r4, [pc, #24]	; (100163d0 <_read_r+0x24>)
100163b8:	6022      	str	r2, [r4, #0]
100163ba:	001a      	movs	r2, r3
100163bc:	f7f7 f9f2 	bl	1000d7a4 <_read>
100163c0:	1c43      	adds	r3, r0, #1
100163c2:	d103      	bne.n	100163cc <_read_r+0x20>
100163c4:	6823      	ldr	r3, [r4, #0]
100163c6:	2b00      	cmp	r3, #0
100163c8:	d000      	beq.n	100163cc <_read_r+0x20>
100163ca:	602b      	str	r3, [r5, #0]
100163cc:	bd70      	pop	{r4, r5, r6, pc}
100163ce:	46c0      	nop			; (mov r8, r8)
100163d0:	1001b548 	.word	0x1001b548
100163d4:	000003e8 	.word	0x000003e8

100163d8 <test>:
100163d8:	00000083 00004000 00000200 00c800c8     .....@..........
100163e8:	41a00000 42700000 3f000000 3e666666     ...A..pB...?fff>
100163f8:	3f2ccccd 3f000000 3f000000 0000000a     ..,?...?...?....
10016408:	72617453 676e6974 61694220 6f4c2073     Starting Bias Lo
10016418:	5220706f 73646165 00000000 706d6153     op Reads....Samp
10016428:	3a73656c 0a642520 00000000 65636341     les: %d.....Acce
10016438:	666f206c 74657366 74616420 57482061     l offset data HW
10016448:	62205453 253d7469 25203a64 66342e37     ST bit=%d: %7.4f
10016458:	2e372520 25206634 66342e37 00000a0d      %7.4f %7.4f....
10016468:	6f727947 66666f20 20746573 61746164     Gyro offset data
10016478:	53574820 69622054 64253d74 3725203a      HWST bit=%d: %7
10016488:	2066342e 342e3725 37252066 0d66342e     .4f %7.4f %7.4f.
10016498:	0000000a 78352325 2325203a 0a0d7835     ....%#5x: %#5x..
100164a8:	00000000 706d6f43 20737361 20746f6e     ....Compass not 
100164b8:	6e756f66 00002e64 72617453 676e6974     found...Starting
100164c8:	55504d20 30303536 53574820 000d2154      MPU6500 HWST!..
100164d8:	72746552 69766569 4220676e 65736169     Retrieving Biase
100164e8:	00000d73 72746552 69766569 4220676e     s...Retrieving B
100164f8:	65736169 72452073 20726f72 6f70202d     iases Error - po
10016508:	62697373 4920656c 65204332 726f7272     ssible I2C error
10016518:	00000000 72746552 69766569 5320676e     ....Retrieving S
10016528:	69422054 73657361 00000000 72746552     T Biases....Retr
10016538:	69766569 5320676e 69422054 73657361     ieving ST Biases
10016548:	72724520 2d20726f 736f7020 6c626973      Error - possibl
10016558:	32492065 72652043 00726f72 64616552     e I2C error.Read
10016568:	20676e69 2050544f 69676552 72657473     ing OTP Register
10016578:	72724520 002e726f 65636341 544f206c      Error..Accel OT
10016588:	64253a50 6425202c 6425202c 0000000a     P:%d, %d, %d....
10016598:	45434341 52433a4c 52455449 41204149     ACCEL:CRITERIA A
100165a8:	00000000 73616942 6968535f 253d7466     ....Bias_Shift=%
100165b8:	66342e37 6942202c 525f7361 253d6765     7.4f, Bias_Reg=%
100165c8:	66342e37 6942202c 485f7361 3d545357     7.4f, Bias_HWST=
100165d8:	342e3725 000a0d66 2050544f 756c6176     %7.4f...OTP valu
100165e8:	25203a65 66342e37 00000a0d 69746172     e: %7.4f....rati
100165f8:	37253d6f 2c66342e 72687420 6f687365     o=%7.4f, thresho
10016608:	253d646c 66342e37 00000a0d 45434341     ld=%7.4f....ACCE
10016618:	6146204c 41206c69 20736978 6425203d     L Fail Axis = %d
10016628:	0000000a 45434341 52433a4c 52455449     ....ACCEL:CRITER
10016638:	42204149 0000000d 206e694d 203a474d     IA B....Min MG: 
10016648:	342e3725 000a0d66 2078614d 203a474d     %7.4f...Max MG: 
10016658:	342e3725 000a0d66 73616942 6968735f     %7.4f...Bias_shi
10016668:	253d7466 66342e37 7473202c 2e37253d     ft=%7.4f, st=%7.
10016678:	202c6634 3d676572 342e3725 00000a66     4f, reg=%7.4f...
10016688:	65636341 4146206c 61204c49 3a736978     Accel FAIL axis:
10016698:	3c206425 3232203d 20676d35 3e20726f     %d <= 225mg or >
100166a8:	3736203d 0a676d35 00000000 65636341     = 675mg.....Acce
100166b8:	52433a6c 52455449 43204149 6962203a     l:CRITERIA C: bi
100166c8:	6c207361 20737365 6e616874 2e372520     as less than %7.
100166d8:	000a6634 4c494146 203a4445 65636341     4f..FAILED: Acce
100166e8:	7861206c 253a7369 203d2064 20646c25     l axis:%d = %ld 
100166f8:	3035203e 0a676d30 00000000 65636341     > 500mg.....Acce
10016708:	6553206c 5420666c 20747365 75736552     l Self Test Resu
10016718:	3a73746c 0a642520 00000000 6f727947     lts: %d.....Gyro
10016728:	50544f20 2c64253a 2c642520 0d642520      OTP:%d, %d, %d.
10016738:	0000000a 4f525947 4952433a 49524554     ....GYRO:CRITERI
10016748:	00412041 6f727947 69614620 7841206c     A A.Gyro Fail Ax
10016758:	3d207369 0a642520 00000000 4f525947     is = %d.....GYRO
10016768:	4952433a 49524554 0d422041 00000000     :CRITERIA B.....
10016778:	2078614d 3a535044 2e372520 0a0d6634     Max DPS: %7.4f..
10016788:	00000000 4f525947 49414620 7861204c     ....GYRO FAIL ax
10016798:	253a7369 72672064 65746165 68742072     is:%d greater th
100167a8:	36206e61 73706430 0000000a 6f727947     an 60dps....Gyro
100167b8:	4952433a 49524554 3a432041 61696220     :CRITERIA C: bia
100167c8:	656c2073 74207373 206e6168 342e3725     s less than %7.4
100167d8:	00000a66 4c494146 203a4445 6f727947     f...FAILED: Gyro
100167e8:	69786120 64253a73 25203d20 3e20646c      axis:%d = %ld >
100167f8:	64303220 000a7370 6f727947 6c655320      20dps..Gyro Sel
10016808:	65542066 52207473 6c757365 203a7374     f Test Results: 
10016818:	000a6425 706d6f43 20737361 666c6553     %d..Compass Self
10016828:	73655420 65522074 746c7573 25203a73      Test Results: %
10016838:	00000a64 74697845 20676e69 54535748     d...Exiting HWST
10016848:	00000000                                ....

1001684c <hw>:
1001684c:	04000069 01410080 01000000 00001333     i.....A.....3...

1001685c <reg>:
1001685c:	0c1a1975 1c1b236a 201f1e1d 3b437472     u...j#..... rtC;
1001686c:	3a393841 376c6b69 6d24776f 2625706e     A89:ikl7ow$mnp%&
1001687c:	2a292827 67646334 00000049 006ccd4c     '()*4cdgI...L.l.
1001688c:	002cc90c 00765636 00664626 c4abf2fe     ..,.6Vv.&Ff.....
1001689c:	dfdff1aa dfdfafbb 8db3aab8 350d98b4     ...............5
100168ac:	0000005d aaaaaab8 c5c388b0 000000c7     ]...............
100168bc:	f3b9b1d8 b691a38b 00d9b409 f3b9b1da     ................
100168cc:	b691a38b 00dab4da 736d735b 656c625f     ........[sms_ble
100168dc:	6961705f 65725f72 73657571 6e665f74     _pair_request_fn
100168ec:	6150095d 6e697269 65722067 73657571     ].Pairing reques
100168fc:	2e2e2e74 656e4220 64252077 4c42202c     t... Bnew %d, BL
1001690c:	78302045 78323025 3154202c 2c642520     E 0x%02x, T1 %d,
1001691c:	20325420 00006425 736d735b 656c625f      T2 %d..[sms_ble
1001692c:	776f705f 645f7265 5d6e776f 00000000     _power_down]....
1001693c:	736d735b 656c625f 776f705f 645f7265     [sms_ble_power_d
1001694c:	5d6e776f 6f745309 6e697070 6f632067     own].Stopping co
1001695c:	6e616d6d 65722064 76696563 64206465     mmand received d
1001696c:	6e697275 64612067 74726576 6d657369     uring advertisem
1001697c:	2e746e65 6f745320 6e697070 2e2e2e67     ent. Stopping...
1001698c:	00000020 6c696166 21216465 00000021      ...failed!!!...
1001699c:	656e6f64 00000021 736d735b 656c625f     done!...[sms_ble
100169ac:	776f705f 645f7265 5d6e776f 65440909     _power_down]..De
100169bc:	65636976 69617020 2e646572 64202e2e     vice paired... d
100169cc:	62617369 676e696c 746e6920 75727265     isabling interru
100169dc:	20737470 77732026 68637469 20676e69     pts & switching 
100169ec:	6e776f64 6e657320 73726f73 00000000     down sensors....
100169fc:	736d735b 656c625f 776f705f 645f7265     [sms_ble_power_d
10016a0c:	5d6e776f 75430909 6e657272 20796c74     own]..Currently 
10016a1c:	69646e69 69746163 0000676e 736d735b     indicating..[sms
10016a2c:	656c625f 776f705f 645f7265 5d6e776f     _ble_power_down]
10016a3c:	65440909 65636976 6e6f6320 7463656e     ..Device connect
10016a4c:	2e2e6465 6964202e 6e6f6373 7463656e     ed... disconnect
10016a5c:	00676e69 736d735b 656c625f 7664615f     ing.[sms_ble_adv
10016a6c:	7065725f 5f74726f 095d6e66 65766441     _report_fn].Adve
10016a7c:	73697472 6e656d65 69742074 756f656d     rtisement timeou
10016a8c:	2e2e2e74 00000000 736d735b 656c625f     t.......[sms_ble
10016a9c:	6e6f635f 7463656e 665f6465 09095d6e     _connected_fn]..
10016aac:	69766544 20736563 6e6e6f63 65746365     Devices connecte
10016abc:	2e2e2e64 00000000 736d735b 656c625f     d.......[sms_ble
10016acc:	6961705f 5f646572 005d6e66 736d735b     _paired_fn].[sms
10016adc:	656c625f 7664615f 69747265 095d6573     _ble_advertise].
10016aec:	65766441 73697472 6e656d65 61642074     Advertisement da
10016afc:	73206174 66207465 656c6961 00002164     ta set failed!..
10016b0c:	736d735b 656c625f 7664615f 69747265     [sms_ble_adverti
10016b1c:	095d6573 454c4209 61745320 64657472     se]..BLE Started
10016b2c:	76644120 69747265 656d6573 0000746e      Advertisement..
10016b3c:	736d735b 7265735f 65636976 7664615f     [sms_service_adv
10016b4c:	69747265 095d6573 20454c42 65766441     ertise].BLE Adve
10016b5c:	73697472 6e656d65 74732074 20747261     rtisement start 
10016b6c:	6c696166 203a6465 73616572 30206e6f     failed: reason 0
10016b7c:	00782578 736d735b 656c625f 7369645f     x%x.[sms_ble_dis
10016b8c:	6e6e6f63 65746365 6e665f64 6550095d     connected_fn].Pe
10016b9c:	64207265 6f637369 63656e6e 2e646574     er disconnected.
10016bac:	42202e2e 2077656e 202c6425 20454c42     .. Bnew %d, BLE 
10016bbc:	30257830 202c7832 25203154 54202c64     0x%02x, T1 %d, T
10016bcc:	64252032 00000000 646e6553 3a676e69     2 %d....Sending:
10016bdc:	00000020 30257830 30257832 00207832      ...0x%02x%02x .
10016bec:	6e630a0d 25203a74 00000064              ..cnt: %d...

10016bf8 <sms_ble_gap_cb>:
	...
10016c04:	1000a021 00000000 1000a055 1000a165     !.......U...e...
	...
10016c1c:	1000a09d 10009e3d 00000000 00000000     ....=...........
	...

10016c44 <sms_ble_gatt_server_cb>:
10016c44:	10009e89 10009ec5 00000000 00000000     ................
	...
10016c6c:	736d735b 7475625f 5f6e6f74 666e6f63     [sms_button_conf
10016c7c:	72756769 70095d65 6c626f72 77206d65     igure].problem w
10016c8c:	656c6968 74657320 676e6974 20707520     hile setting up 
10016c9c:	74747562 00306e6f 736d735b 7475625f     button0.[sms_but
10016cac:	5f6e6f74 666e6f63 72756769 50095d65     ton_configure].P
10016cbc:	6c626f72 77206d65 656c6968 74657320     roblem while set
10016ccc:	676e6974 20707520 74747562 00316e6f     ting up button1.
10016cdc:	736d735b 7475625f 5f6e6f74 666e6f63     [sms_button_conf
10016cec:	72756769 50095d65 6c626f72 77206d65     igure].Problem w
10016cfc:	656c6968 74657320 676e6974 20707520     hile setting up 
10016d0c:	414c5058 44454e49 65737520 75622072     XPLAINED user bu
10016d1c:	6e6f7474 00000000 736d735b 7475625f     tton....[sms_but
10016d2c:	5f6e6f74 5f746567 74617473 09095d65     ton_get_state]..
10016d3c:	74747542 73206e6f 65746174 6425203a     Button state: %d
10016d4c:	00642520 736d735b 7475625f 5f6e6f74      %d.[sms_button_
10016d5c:	2d5d6e66 00000030 736d735b 7475625f     fn]-0...[sms_but
10016d6c:	5f6e6f74 2d5d6e66 00000031 736d735b     ton_fn]-1...[sms
10016d7c:	7475625f 5f6e6f74 095d6e66 61745309     _button_fn]..Sta
10016d8c:	6e697472 65732067 726f736e 42282073     rting sensors (B
10016d9c:	00002930 736d735b 7475625f 5f6e6f74     0)..[sms_button_
10016dac:	095d6e66 6f4e0909 73752074 73206465     fn]...Not used s
10016dbc:	65746174 2e2e2e73 00000000 736d735b     tates.......[sms
10016dcc:	7475625f 5f6e6f74 095d6e66 61745309     _button_fn]..Sta
10016ddc:	6e697472 65732067 726f736e 42282073     rting sensors (B
10016dec:	00002931 736d735b 7475625f 5f6e6f74     1)..[sms_button_
10016dfc:	095d6e66 6c697453 6e69206c 61636964     fn].Still indica
10016e0c:	676e6974 002e2e2e 736d735b 7475625f     ting....[sms_but
10016e1c:	5f6e6f74 69666564 735f656e 69767265     ton_define_servi
10016e2c:	5d736563 72655309 65636976 65642073     ces].Services de
10016e3c:	696e6966 6620676e 656c6961 72202c64     fining failed, r
10016e4c:	6f736165 7830206e 00007825 736d735b     eason 0x%x..[sms
10016e5c:	7475625f 5f6e6f74 69666564 735f656e     _button_define_s
10016e6c:	69767265 5d736563 72655309 65636976     ervices].Service
10016e7c:	65642073 656e6966 53202c64 6220534d     s defined, SMS b
10016e8c:	6f747475 6168206e 656c646e 6425203a     utton handle: %d
10016e9c:	00000000 626f7250 206d656c 6c696877     ....Problem whil
10016eac:	65732065 6e697474 70672067 70206f69     e setting gpio p
10016ebc:	00006e69 2e2e7325 4209092e 6572702d     in..%s.....B-pre
10016ecc:	64252076 2d42202c 20727563 202c6425     v %d, B-cur %d, 
10016edc:	20454c42 30257830 202c7832 25203154     BLE 0x%02x, T1 %
10016eec:	54202c64 64252032 4d53202c 64252053     d, T2 %d, SMS %d
10016efc:	00000000 736d735b 756d695f 6e6f635f     ....[sms_imu_con
10016f0c:	75676966 675f6572 5d6f6970 6f725009     figure_gpio].Pro
10016f1c:	6d656c62 69687720 7320656c 69747465     blem while setti
10016f2c:	7520676e 4d492070 52442055 70205944     ng up IMU DRDY p
10016f3c:	00006e69 736d735b 756d695f 6e6f635f     in..[sms_imu_con
10016f4c:	75676966 675f6572 5d6f6970 6f725009     figure_gpio].Pro
10016f5c:	6d656c62 69687720 7320656c 69747465     blem while setti
10016f6c:	7520676e 4d492070 43562055 69702043     ng up IMU VCC pi
10016f7c:	0000006e 74696e49 696c6169 676e697a     n...Initializing
10016f8c:	55504d20 002e2e2e 69616620 2164656c      MPU.... failed!
10016f9c:	00000000 74746553 20676e69 4d207075     ....Setting up M
10016fac:	2e2e5550 0000002e 736d735b 75706d5f     PU......[sms_mpu
10016fbc:	6665645f 5f656e69 76726573 73656369     _define_services
10016fcc:	6553095d 63697672 64207365 6e696665     ].Services defin
10016fdc:	20676e69 6c696166 202c6465 73616572     ing failed, reas
10016fec:	30206e6f 00782578 736d735b 75706d5f     on 0x%x.[sms_mpu
10016ffc:	6665645f 5f656e69 76726573 73656369     _define_services
1001700c:	6553095d 63697672 64207365 6e696665     ].Services defin
1001701c:	202c6465 20534d53 2055504d 646e6168     ed, SMS MPU hand
1001702c:	203a656c 00006425 736d735b 64656c5f     le: %d..[sms_led
1001703c:	6970675f 6e695f6f 095d7469 626f7270     _gpio_init].prob
1001704c:	206d656c 6c696877 65732065 6e697474     lem while settin
1001705c:	70752067 64656c20 00000030 736d735b     g up led0...[sms
1001706c:	6572705f 72757373 6f635f65 6769666e     _pressure_config
1001707c:	5f657275 6f697067 7270095d 656c626f     ure_gpio].proble
1001708c:	6877206d 20656c69 74746573 20676e69     m while setting 
1001709c:	56207075 70206363 00006e69 736d735b     up Vcc pin..[sms
100170ac:	6572705f 72757373 74735f65 75747261     _pressure_startu
100170bc:	09095d70 72617453 676e6974 65727020     p]..Starting pre
100170cc:	72757373 65732065 726f736e 00000000     ssure sensor....
100170dc:	736d735b 6572705f 72757373 736d5f65     [sms_pressure_ms
100170ec:	635f3835 75636c61 6574616c 6574205d     58_calculate] te
100170fc:	7265706d 72757461 203d2065 20646c25     mperature = %ld 
1001710c:	65727020 72757373 203d2065 00646c25      pressure = %ld.
1001711c:	736d735b 6572705f 72757373 6f705f65     [sms_pressure_po
1001712c:	645f6c6c 5d617461 61745309 6e697472     ll_data].Startin
1001713c:	61642067 70206174 696c6c6f 0000676e     g data polling..
1001714c:	736d735b 6572705f 72757373 736d5f65     [sms_pressure_ms
1001715c:	705f3835 5f6c6c6f 61746164 7270205d     58_poll_data] pr
1001716c:	656c626f 6572206d 6e696461 736d2067     oblem reading ms
1001717c:	64203835 00617461 736d735b 6572705f     58 data.[sms_pre
1001718c:	72757373 65645f65 656e6966 7265735f     ssure_define_ser
1001719c:	65636976 53095d73 69767265 20736563     vices].Services 
100171ac:	69666564 676e696e 69616620 2c64656c     defining failed,
100171bc:	61657220 206e6f73 78257830 00000000      reason 0x%x....
100171cc:	736d735b 6572705f 72757373 65645f65     [sms_pressure_de
100171dc:	656e6966 7265735f 65636976 53095d73     fine_services].S
100171ec:	69767265 20736563 69666564 2c64656e     ervices defined,
100171fc:	534d5320 65727020 72757373 61682065      SMS pressure ha
1001720c:	656c646e 6425203a 00000000 736d735b     ndle: %d....[sms
1001721c:	6175645f 6d69746c 5f317265 095d6e66     _dualtimer1_fn].
1001722c:	6c696146 74206465 6e69206f 6d207469     Failed to init m
1001723c:	20383573 69766564 00006563 736d735b     s58 device..[sms
1001724c:	6175645f 6d69746c 5f317265 095d6e66     _dualtimer1_fn].
1001725c:	6c696146 74206465 6e69206f 61697469     Failed to initia
1001726c:	657a696c 65727020 72757373 65732065     lize pressure se
1001727c:	726f736e 6f57202e 6e696b72 6f6d2067     nsor. Working mo
1001728c:	3d206564 54554220 5f4e4f54 4f4c4f53     de = BUTTON_SOLO
1001729c:	00000000 736d735b 6175645f 6d69746c     ....[sms_dualtim
100172ac:	5f317265 095d6e66 61745309 6e697472     er1_fn]..Startin
100172bc:	65732067 726f736e 4d282073 20383553     g sensors (MS58 
100172cc:	65736572 2e2e2974 0000002e 736d735b     reset)......[sms
100172dc:	6175645f 6d69746c 5f317265 005d6e66     _dualtimer1_fn].
100172ec:	736d735b 6175645f 6d69746c 5f317265     [sms_dualtimer1_
100172fc:	095d6e66 61745309 6e697472 65732067     fn]..Starting se
1001730c:	726f736e 73282073 74747568 20676e69     nsors (shutting 
1001731c:	6e776f64 2e2e2e29 00000000 736d735b     down).......[sms
1001732c:	6175645f 6d69746c 5f327265 005d6e66     _dualtimer2_fn].
1001733c:	2e2e2e20 69766967 7520676e 00002170      ...giving up!..
1001734c:	2e2e2e20 74696177 2e676e69 63202e2e      ...waiting... c
1001735c:	746e756f 203a7265 00006425 736d735b     ounter: %d..[sms
1001736c:	6175645f 6d69746c 5f327265 095d6e66     _dualtimer2_fn].
1001737c:	696c4209 6e696b6e 74732067 75747261     .Blinking startu
1001738c:	2e2e2e70 00000000 736d735b 6175645f     p.......[sms_dua
1001739c:	6d69746c 5f327265 095d6e66 696c4209     ltimer2_fn]..Bli
100173ac:	6e696b6e 68732067 6f647475 2e2e6e77     nking shutdown..
100173bc:	0000002e 736d735b 6175645f 6d69746c     ....[sms_dualtim
100173cc:	5f327265 095d6e66 776f5009 6e697265     er2_fn]..Powerin
100173dc:	666f2067 2e2e2e66 00000000 1000c7c4     g off...........
100173ec:	1000c7d2 1000c7e0 1000c7ee 1000c7fc     ................
100173fc:	1000c80a 1000c818 1000c828 1000c838     ........(...8...
1001740c:	1000c848 1000c858 1000c868 1000c878     H...X...h...x...
1001741c:	1000c888 1000c898 1000c8a8 1000c8b8     ................
1001742c:	1000c8c8 1000c8d8 1000c8e8 1000c8f8     ................
1001743c:	1000c908 1000c918 1000c928 1000c938     ........(...8...
1001744c:	1000c948 1000c958 1000c968 1000c976     H...X...h...v...
1001745c:	1000c984 1000c992 1000c9a0 1000c9ae     ................
1001746c:	1000c9bc 1000c9ca 1000c9d8 1000c9e8     ................
1001747c:	1000c9f8 1000ca08 1000ca18 1000ca28     ............(...
1001748c:	1000ca38 1000ca48 1000ca58 1000ca68     8...H...X...h...
1001749c:	1000ca78 1000ca88 1000ca98 1000caa8     x...............
100174ac:	1000cab8 1000cac8 1000cad8 1000cae6     ................
100174bc:	1000caf4 1000cb20 1000cb2e 1000cb3c     .... .......<...
100174cc:	1000cb4a 1000cb58 1000cb66 1000cb74     J...X...f...t...
100174dc:	1000cb82 1000cb90 1000cb9e 1000cbac     ................
100174ec:	1000cbba 1000cbc8 1000cbd6 1000cbe4     ................
100174fc:	1000cbf2 1000cc00 1000cc0e 1000cc1c     ................
1001750c:	1000cc2a 1000cc38 1000cc46 1000cc54     *...8...F...T...
1001751c:	1000cc62 1000cc70 1000cc7e 1000cc8c     b...p...~.......
1001752c:	1000cc9a 1000cca8 1000ccb6 1000ccc4     ................
1001753c:	1000ccd2 1000cce0 1000ccee 1000ccfc     ................
1001754c:	1000cd0a 1000cd18 1000cd26 1000cd34     ........&...4...
1001755c:	1000cd42 1000cd50 1000cd5e 1000cd6c     B...P...^...l...
1001756c:	1000cd7a 1000cd88 1000cd96 1000cda4     z...............
1001757c:	1000cdb2 1000cdc0 1000cdce 1000cddc     ................
1001758c:	1000cdea 1000cdf8 1000ce06 1000cea0     ................
1001759c:	1000cec8 1000cef0 1000cf18 1000d158     ............X...
100175ac:	1000cf48 1000cf60 1000cfd8 1000cff0     H...`...........
100175bc:	1000cf78 1000cf90 1000cfa8 1000cfc0     x...............
100175cc:	1000d008 1000d2cc 1000d2cc 1000d2cc     ................
100175dc:	1000d2cc 1000d2cc 1000d2cc 1000d2cc     ................
100175ec:	1000d2cc 1000d0b0 1000d0c8 1000d0e0     ................
100175fc:	1000d16e 1000d038 1000d2cc 1000d2cc     n...8...........
1001760c:	1000d2cc 1000d2cc 1000d2cc 1000d2cc     ................
1001761c:	1000d0f8 1000d110 1000d128 1000d140     ........(...@...
1001762c:	1000d2cc 1000d284 1000d29c 1000d2cc     ................
1001763c:	1000d2cc 1000d19a 1000d1b0 1000d1c6     ................
1001764c:	1000d1dc 1000d2cc 1000d2cc 1000d2cc     ................
1001765c:	1000d2cc 1000d2cc 1000d2cc 1000d2cc     ................
1001766c:	1000d2cc 1000ce8c 1000ceb4 1000cedc     ................
1001767c:	1000cf04 1000cf30 1000d020 1000d050     ....0... ...P...
1001768c:	1000d068 1000d080 1000d098 1000d184     h...............
1001769c:	1000d1f2 1000d26c 1000d2b4 1000d9ee     ....l...........
100176ac:	1000da00 1000d9d6 1000d9d6 1000d9d6     ................
100176bc:	1000d9ee 1000d9d6 1000d9d6 1000e3f2     ................
100176cc:	1000e466 1000e3da 1000e46c 1000e3e0     f.......l.......
100176dc:	1000e3e6 1000e3ec 1000eb4c 1000eb4c     ........L...L...
100176ec:	1000eb4c 1000eb4c 1000eb4c 1000eb4c     L...L...L...L...
100176fc:	1000eb4c 1000eb4c 1000eb4c 1000eb4c     L...L...L...L...
1001770c:	1000eb4c 1000eb4c 1000eb4c 1000eb4c     L...L...L...L...
1001771c:	1000eb4c 1000eb4c 1000eb4c 1000eb4c     L...L...L...L...
1001772c:	1000eb4c 1000eb6a 1000eb6a 1000eb6a     L...j...j...j...
1001773c:	1000eb6a 1000eb6a 1000eb6a 1000eb6a     j...j...j...j...
1001774c:	1000eb6a 1000eb6a 1000eb6a 1000eb8c     j...j...j.......
1001775c:	1000eb8c 1000eb8c 1000eb8c 1000eb8c     ................
1001776c:	1000eb8c 1000eb8c 1000eb8c 1000eb8c     ................
1001777c:	1000eb8c 1000ebbc 1000ebbc 1000ebbc     ................
1001778c:	1000ebbc 1000ebbc 1000ebbc 1000ebd6     ................
1001779c:	1000ebd6 1000ebd6 1000ebd6 1000ebd6     ................
100177ac:	1000ebd6 1000ebd6 1000ebd6 1000ebd6     ................
100177bc:	1000ebf0 1000ebf0 1000ec12 1000ec12     ................
100177cc:	1000ec2c 1000ec12 34333231 00003635     ,.......123456..
100177dc:	efcdab00 00efcdab                       ........

100177e4 <ble_mgr_gatt_server_handle>:
	...
100177fc:	1000d8e9 1000d911 1000d959 00000000     ........Y.......
1001780c:	65646e55 656e6966 76452064 20746e65     Undefined Event 
1001781c:	65636552 64657669 00000000 6e616353     Received....Scan
1001782c:	676e696e 61662020 64656c69 00000000     ning  failed....
1001783c:	65766441 73697472 20676e69 6c696166     Advertising fail
1001784c:	00006465 2d454c42 2055544d 6e616843     ed..BLE-MTU Chan
1001785c:	2c646567 6e6f4320 7463656e 206e6f69     ged, Connection 
1001786c:	646e6148 203a656c 202c6425 2077654e     Handle: %d, New 
1001787c:	756c6156 25203a65 00000064 2055544d     Value: %d...MTU 
1001788c:	6e616843 2c646567 6e6f4320 7463656e     Changed, Connect
1001789c:	206e6f69 646e6148 253a656c 4f202c64     ion Handle:%d, O
100178ac:	61726570 6e6f6974 0064253a 2055544d     peration:%d.MTU 
100178bc:	6e616843 46206567 656c6961 43202c64     Change Failed, C
100178cc:	656e6e6f 6f697463 6148206e 656c646e     onnection Handle
100178dc:	2c64253a 65704f20 69746172 253a6e6f     :%d, Operation:%
100178ec:	00000064 72616843 69725720 43206574     d...Char Write C
100178fc:	4320646d 6c706d6f 2c657465 6e6f4320     md Complete, Con
1001790c:	7463656e 206e6f69 646e6148 253a656c     nection Handle:%
1001791c:	4f202c64 61726570 6e6f6974 0064253a     d, Operation:%d.
1001792c:	72616843 69725720 43206574 4620646d     Char Write Cmd F
1001793c:	656c6961 43202c64 656e6e6f 6f697463     ailed, Connectio
1001794c:	6148206e 656c646e 2c64253a 65704f20     n Handle:%d, Ope
1001795c:	69746172 253a6e6f 00000064 74617453     ration:%d...Stat
1001796c:	6f4e2065 61482074 656c646e 64252064     e Not Handled %d
1001797c:	00000000 69766544 64206563 6f637369     ....Device disco
1001798c:	63656e6e 20646574 73616552 303a6e6f     nnected Reason:0
1001799c:	32302578 61482078 656c646e 2578303d     x%02x Handle=0x%
100179ac:	00000078 425f5441 435f454c 5f4e4e4f     x...AT_BLE_CONN_
100179bc:	41524150 50555f4d 45544144 00000020     PARAM_UPDATE ...
100179cc:	72636e45 69747079 66206e6f 656c6961     Encryption faile
100179dc:	00000064 72636e45 69747079 63206e6f     d...Encryption c
100179ec:	6c706d6f 64657465 63757320 73736563     ompleted success
100179fc:	6c6c7566 00000079 20454c42 69766544     fully...BLE Devi
10017a0c:	6e206563 6620746f 646e756f 636e6520     ce not found enc
10017a1c:	74707972 206e6f69 6f666e69 00000000     ryption info....
10017a2c:	6f666e49 7665443a 20656369 6e756f66     Info:Device foun
10017a3c:	64612064 73657264 255b2073 20205d64     d address [%d]  
10017a4c:	30257830 30255832 30255832 30255832     0x%02X%02X%02X%0
10017a5c:	30255832 30255832 00205832 6f666e49     2X%02X%02X .Info
10017a6c:	78616d3a 6d756d69 2e6f6e20 7320666f     :maximum no.of s
10017a7c:	206e6163 69766564 72206563 68636165     can device reach
10017a8c:	2e2e6465 6f74532e 6e697070 63532067     ed...Stopping Sc
10017a9c:	00006e61 6c696146 74206465 7473206f     an..Failed to st
10017aac:	7320706f 6e6e6163 00676e69 30257830     op scanning.0x%0
10017abc:	202c5832 00000000 4b525343 0000203a     2X, ....CSRK: ..
10017acc:	3a4b5249 00000000 72696150 20676e69     IRK:....Pairing 
10017adc:	6c696166 2e2e6465 7369442e 6e6e6f63     failed...Disconn
10017aec:	69746365 0000676e 63736944 656e6e6f     ecting..Disconne
10017afc:	52207463 65757165 46207473 656c6961     ct Request Faile
10017b0c:	00000064 72696150 20676e69 636f7270     d...Pairing proc
10017b1c:	72756465 6f632065 656c706d 20646574     edure completed 
10017b2c:	63637573 66737365 796c6c75 00000000     successfully....
10017b3c:	20454c42 69766544 6e206563 6620746f     BLE Device not f
10017b4c:	646e756f 206f7420 726f7473 68742065     ound to store th
10017b5c:	61702065 6e697269 6e692067 00006f66     e pairing info..
10017b6c:	3a4b544c 00000020 72636e45 69747079     LTK: ...Encrypti
10017b7c:	4e206e6f 7320746f 74726174 00006465     on Not started..
10017b8c:	76616c53 65532065 69727563 52207974     Slave Security R
10017b9c:	2d207165 74754120 746e6568 74616369     eq - Authenticat
10017bac:	206e6f69 6c696146 00006465 656e6547     ion Failed..Gene
10017bbc:	65746172 544c2064 00203a4b 30257830     rated LTK: .0x%0
10017bcc:	00205832 646e6553 20676e69 72696170     2X .Sending pair
10017bdc:	20676e69 70736572 65736e6f 00000000     ing response....
10017bec:	72696150 71655220 74736575 41202d20     Pair Request - A
10017bfc:	65687475 6369746e 6f697461 6146206e     uthentication Fa
10017c0c:	64656c69 00000000 65746e45 68742072     iled....Enter th
10017c1c:	61502065 656b7373 2d362879 69676944     e Passkey(6-Digi
10017c2c:	69202974 6554206e 6e696d72 003a6c61     t) in Terminal:.
10017c3c:	206e6950 656d6954 0074756f 63736944     Pin Timeout.Disc
10017c4c:	656e6e6f 6e697463 2e2e2067 0000002e     onnecting ......
10017c5c:	61656c50 45206573 7265746e 65687420     Please Enter the
10017c6c:	6c6f6620 69776f6c 5020676e 2d737361      following Pass-
10017c7c:	65646f63 206e6f28 6568746f 65442072     code(on other De
10017c8c:	65636976 00003a29 72696150 79656b2d     vice):..Pair-key
10017c9c:	70657220 6620796c 656c6961 00000064      reply failed...
10017cac:	20424f4f 74616546 20657275 20746f4e     OOB Feature Not 
10017cbc:	70707573 6574726f 00000064 65746e45     supported...Ente
10017ccc:	20646572 73736150 646f632d 00003a65     red Pass-code:..
10017cdc:	2d434e45 3a716552 6e6f4320 6148206e     ENC-Req: Conn Ha
10017cec:	656c646e 76654420 20656369 6e756f46     ndle Device Foun
10017cfc:	64683a64 64253a6c 00000000 74736f68     d:hdl:%d....host
10017d0c:	76656420 20656369 76696465 00782520      device ediv %x.
10017d1c:	72656570 76656420 20656369 76696465     peer device ediv
10017d2c:	00782520 5f636e65 20716572 76696465      %x.enc_req ediv
10017d3c:	00782520 20656854 65646e69 73692078      %x.The index is
10017d4c:	00642520 2d434e45 3a716552 79654b20      %d.ENC-Req: Key
10017d5c:	756f4620 0000646e 72696150 20676e69      Found..Pairing 
10017d6c:	6f666e69 74616d72 206e6f69 7020666f     information of p
10017d7c:	20726565 69766564 69206563 6f6e2073     eer device is no
10017d8c:	76612074 616c6961 2e656c62 00000000     t available.....
10017d9c:	61656c50 75206573 6961706e 68742072     Please unpair th
10017dac:	65642065 65636976 6f726620 6570206d     e device from pe
10017dbc:	64207265 63697665 6f6d2865 656c6962     er device(mobile
10017dcc:	65732029 6e697474 6d207367 20756e65     ) settings menu 
10017ddc:	20646e61 72617473 61702074 6e697269     and start pairin
10017dec:	67612067 006e6961 72636e45 69747079     g again.Encrypti
10017dfc:	52206e6f 65757165 52207473 796c7065     on Request Reply
10017e0c:	69614620 0064656c 72636e45 69747079      Failed.Encrypti
10017e1c:	52206e6f 65757165 52207473 796c7065     on Request Reply
10017e2c:	00000000 656c625b 696e695f 09095d74     ....[ble_init]..
10017e3c:	696e4909 6c616974 6e697a69 41532067     .Initializing SA
10017e4c:	3131424d 00000000 656c625b 696e695f     MB11....[ble_ini
10017e5c:	09095d74 424d4153 49203131 6974696e     t]..SAMB11 Initi
10017e6c:	7a696c61 6f697461 6166206e 64656c69     alization failed
10017e7c:	00000000 656c625b 696e695f 09095d74     ....[ble_init]..
10017e8c:	61656c50 63206573 6b636568 65687420     Please check the
10017e9c:	776f7020 61207265 6320646e 656e6e6f      power and conne
10017eac:	6f697463 202f206e 64726168 65726177     ction / hardware
10017ebc:	6e6f6320 7463656e 0000726f 52424153      connector..SABR
10017ecc:	4d532d65 00000053 69766544 6e206563     e-SMS...Device n
10017edc:	20656d61 20746573 6c696166 00006465     ame set failed..
10017eec:	656c625b 7465735f 7665645f 6e6f635f     [ble_set_dev_con
10017efc:	5d676966 44420909 64646120 73736572     fig]..BD address
10017f0c:	74656720 69616620 0064656c 656c625b      get failed.[ble
10017f1c:	7465735f 7665645f 6e6f635f 5d676966     _set_dev_config]
10017f2c:	44420909 64644120 73736572 2578303a     ..BD Address:0x%
10017f3c:	25583230 25583230 25583230 25583230     02X%02X%02X%02X%
10017f4c:	25583230 2c583230 64644120 73736572     02X%02X, Address
10017f5c:	70795420 64253a65 00000000 656c625b      Type:%d....[ble
10017f6c:	7465735f 7665645f 6e6f635f 5d676966     _set_dev_config]
10017f7c:	74655309 454c4220 76654420 20656369     .Set BLE Device 
10017f8c:	666e6f63 72756769 6f697461 6166206e     configuration fa
10017f9c:	64656c69 00000000 656c625b 7465735f     iled....[ble_set
10017fac:	7665645f 6e6f635f 5d676966 74655309     _dev_config].Set
10017fbc:	454c4220 76654420 20656369 72646441      BLE Device Addr
10017fcc:	20737365 6c696166 00006465 6e616353     ess failed..Scan
10017fdc:	676e696e 502e2e2e 7361656c 61772065     ning...Please wa
10017fec:	2e2e7469 0000002e 76616c53 65732065     it......Slave se
10017ffc:	69727563 72207974 65757165 73207473     curity request s
1001800c:	65636375 75667373 0000006c 76616c53     uccessful...Slav
1001801c:	65732065 69727563 72207974 65757165     e security reque
1001802c:	66207473 656c6961 00000064 6e6e6f43     st failed...Conn
1001803c:	65746365 6f742064 65657020 65642072     ected to peer de
1001804c:	65636976 74697720 64612068 73657264     vice with addres
1001805c:	78302073 78323025 78323025 78323025     s 0x%02x%02x%02x
1001806c:	78323025 78323025 78323025 00000000     %02x%02x%02x....
1001807c:	6e6e6f43 69746365 48206e6f 6c646e61     Connection Handl
1001808c:	64252065 00000000 6f736552 6e69766c     e %d....Resolvin
1001809c:	61522067 6d6f646e 64646120 73736572     g Random address
100180ac:	63757320 73736563 00002a2a 6f736552      success**..Reso
100180bc:	6e69766c 61522067 6d6f646e 64646120     lving Random add
100180cc:	73736572 69616620 2a64656c 0000002a     ress failed**...
100180dc:	2078614d 626d756e 6f207265 6f632066     Max number of co
100180ec:	63656e6e 6e6f6974 61657220 64656863     nnection reached
100180fc:	6425203a 3d3d3d20 7369443e 6e6e6f63     : %d ===>Disconn
1001810c:	69746365 2e2e676e 0000002e 69766544     ecting......Devi
1001811c:	43206563 656e6e6f 6f697463 6146206e     ce Connection Fa
1001812c:	64656c69 53202d20 75746174 25203a73     iled - Status: %
1001813c:	00000064 23232323 23232323 65442323     d...##########De
1001814c:	65636976 756f4620 0000646e 23232323     vice Found..####
1001815c:	23232323 65442323 65636976 746f4e20     ######Device Not
1001816c:	756f4620 0000646e 69766544 69206563      Found..Device i
1001817c:	253a7864 00000064 4c420a0d 76452d45     dx:%d.....BLE-Ev
1001818c:	3a746e65 00006425 54544147 7265535f     ent:%d..GATT_Ser
1001819c:	20726576 6e657645 64253a74 00000000     ver Event:%d....
100181ac:	2d454c42 616e614d 3a726567 6e6b6e55     BLE-Manager:Unkn
100181bc:	206e776f 6e657645 78303d74 00005825     own Event=0x%X..
100181cc:	656c625b 6e616d5f 72656761 0909095d     [ble_manager]...
100181dc:	756e614d 74636166 72657275 65707320     Manufacturer spe
100181ec:	69666963 61642063 65206174 6c62616e     cific data enabl
100181fc:	00006465 5a2d571c 50532dbe 00000000     ed...W-Z.-SP....
1001820c:	20454c42 65766441 73697472 6e656d65     BLE Advertisemen
1001821c:	61642074 73206174 66207465 656c6961     t data set faile
1001822c:	00000064                                d...

10018230 <ble_mgr_gap_handle>:
10018230:	1000d875 1000db25 1000d899 1000d8c1     u...%...........
10018240:	00000000 1000e7a1 1000d9a1 1000da3d     ............=...
10018250:	1000dd81 1000dbd1 1000df81 1000dd99     ................
10018260:	1000e10d 1000e251 1000da61 1000e9ed     ....Q...a.......
	...
1001827c:	1000fa4a 1000fa58 1000faa0 1000fae4     J...X...........
1001828c:	1000faf6 1000fb60 1000fb78 6c756f43     ....`...x...Coul
1001829c:	6f6e2064 6e692074 61697469 657a696c     d not initialize
100182ac:	55504d20 00000021 69616d5b 09095d6e      MPU!...[main]..
100182bc:	61570909 676e696b 2e707520 00002e2e     ..Waking up.....
100182cc:	6e6f6420 00002165 69616d5b 09095d6e      done!..[main]..
100182dc:	69440909 6c626173 20676e69 74747562     ..Disabling butt
100182ec:	69206e6f 2e2e746e 0000002e 4e2e2e2e     on int.........N
100182fc:	4f53204f 45435255 00002121 422e2e2e     O SOURCE!!.....B
1001830c:	00304e54 69616d5b 09095d6e 72450909     TN0.[main]....Er
1001831c:	20726f72 73206e69 625f736d 6f747475     ror in sms_butto
1001832c:	6e665f6e 00212928 422e2e2e 00314e54     n_fn()!....BTN1.
1001833c:	4d2e2e2e 445f5550 00594452 412e2e2e     ...MPU_DRDY....A
1001834c:	545f4e4f 52454d49 00000000 69616d5b     ON_TIMER....[mai
1001835c:	09095d6e 6f500909 6e696c6c 72702067     n]....Polling pr
1001836c:	75737365 64206572 2e617461 00002e2e     essure data.....
1001837c:	69616d5b 09095d6e 4f410909 6974204e     [main]....AON ti
1001838c:	2072656d 64616572 68772079 20656c69     mer ready while 
1001839c:	69646e69 69746163 2e2e676e 6b73202e     indicating... sk
100183ac:	69707069 0000676e 442e2e2e 544c4155     ipping.....DUALT
100183bc:	52454d49 00000031 442e2e2e 544c4155     IMER1......DUALT
100183cc:	52454d49 00000032 3f2e2e2e 0000003f     IMER2......??...
100183dc:	69616d5b 09095d6e 6e450909 696c6261     [main]....Enabli
100183ec:	6220676e 6f747475 6e69206e 2e2e2e74     ng button int...
100183fc:	00000000 69616d5b 09095d6e 4c550909     ....[main]....UL
1001840c:	2e2e2e50 00000000 00212120 656d7441     P....... !!.Atme
1001841c:	6f43206c 022e7072                                l Corp.

10018423 <CSWTCH.45>:
10018423:	00100402                                         ...

10018426 <CSWTCH.47>:
10018426:	03010300 03030303 03030303 02020303              ...............

10018435 <client_conf_uuid>:
10018435:	29042902                                         .)

10018437 <presentation_format_uuid>:
10018437:	29012904                                         .)

10018439 <user_desc_uuid>:
10018439:	29032901                                         .)

1001843b <server_conf_uuid>:
1001843b:	29002903                                         .)

1001843d <extended_props_uuid>:
1001843d:	28022900                                         .)

1001843f <include_uuid>:
1001843f:	28032802                                         .(

10018441 <char_uuid>:
10018441:	06002803 2a10013a e8100139 c0100139     .(..:..*9...9...
10018451:	e8100139 b4100139 e8100139 c0100139     9...9...9...9...
10018461:	2a100139 2a100139 b4100139 c0100139     9..*9..*9...9...
10018471:	6c100139 6c10013a 6c10013a ee10013a     9..l:..l:..l:...
10018481:	2a100139 2a100139 d4100139 be100139     9..*9..*9...9...
10018491:	d4100139 b4100139 d4100139 be100139     9...9...9...9...
100184a1:	2a100139 2a100139 b4100139 be100139     9..*9..*9...9...
100184b1:	6c100139 6c10013a 6c10013a 7810013a     9..l:..l:..l:..x
100184c1:	6410013a c210013d c210013c c010013c     :..d=...<...<...
100184d1:	5610013c 5610013d 4c10013d c010013d     <..V=..V=..L=...
100184e1:	5610013c 4c10013d 5610013d c010013d     <..V=..L=..V=...
100184f1:	5c10013c 5c10013d 5c10013d e610013d     <..\=..\=..\=...
10018501:	d810013d 98100146 98100145 96100145     =...F...E...E...
10018511:	b0100145 b0100146 a2100146 96100146     E...F...F...F...
10018521:	b0100145 a2100146 b0100146 96100146     E...F...F...F...
10018531:	b8100145 b8100146 b8100146 b8100146     E...F...F...F...
10018541:	43100148 48000000                                H..C...

10018548 <_global_impure_ptr>:
10018548:	10018648                                H...

1001854c <__sf_fake_stdin>:
	...

1001856c <__sf_fake_stdout>:
	...

1001858c <__sf_fake_stderr>:
	...
100185ac:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
100185bc:	32313000 36353433 41393837 45444342     .0123456789ABCDE
100185cc:	31300046 35343332 39383736 64636261     F.0123456789abcd
100185dc:	00006665                                ef..

100185e0 <_init>:
100185e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100185e2:	46c0      	nop			; (mov r8, r8)
100185e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
100185e6:	bc08      	pop	{r3}
100185e8:	469e      	mov	lr, r3
100185ea:	4770      	bx	lr

100185ec <__init_array_start>:
100185ec:	100080b1 	.word	0x100080b1

100185f0 <_fini>:
100185f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100185f2:	46c0      	nop			; (mov r8, r8)
100185f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
100185f6:	bc08      	pop	{r3}
100185f8:	469e      	mov	lr, r3
100185fa:	4770      	bx	lr

100185fc <__fini_array_start>:
100185fc:	10008089 	.word	0x10008089
