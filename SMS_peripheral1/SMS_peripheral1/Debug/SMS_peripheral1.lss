
SMS_peripheral1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00010344  10008000  10008000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000000ac  10018344  10018344  00018344  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00002ea4  100183f0  100183f0  000183f0  2**2
                  ALLOC
  3 .stack        00001804  1001b294  1001b294  000183f0  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000183f0  2**0
                  CONTENTS, READONLY
  5 .comment      000000b4  00000000  00000000  00018418  2**0
                  CONTENTS, READONLY
  6 .debug_info   00051158  00000000  00000000  000184cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000058c0  00000000  00000000  00069624  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000b9ef  00000000  00000000  0006eee4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000d78  00000000  00000000  0007a8d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000df0  00000000  00000000  0007b64b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  000295d9  00000000  00000000  0007c43b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00018d59  00000000  00000000  000a5a14  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00147238  00000000  00000000  000be76d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00002fdc  00000000  00000000  002059a8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

10008000 <app_entry>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void app_entry(void)
{
10008000:	b510      	push	{r4, lr}

    /* Initialize the relocate segment */
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
10008002:	4b18      	ldr	r3, [pc, #96]	; (10008064 <app_entry+0x64>)
10008004:	4a18      	ldr	r2, [pc, #96]	; (10008068 <app_entry+0x68>)
10008006:	429a      	cmp	r2, r3
10008008:	d003      	beq.n	10008012 <app_entry+0x12>
        for (; pDest < &_erelocate;) {
1000800a:	4b18      	ldr	r3, [pc, #96]	; (1000806c <app_entry+0x6c>)
1000800c:	4a15      	ldr	r2, [pc, #84]	; (10008064 <app_entry+0x64>)
1000800e:	429a      	cmp	r2, r3
10008010:	d304      	bcc.n	1000801c <app_entry+0x1c>
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
10008012:	4b17      	ldr	r3, [pc, #92]	; (10008070 <app_entry+0x70>)
10008014:	4a17      	ldr	r2, [pc, #92]	; (10008074 <app_entry+0x74>)
10008016:	429a      	cmp	r2, r3
10008018:	d310      	bcc.n	1000803c <app_entry+0x3c>
1000801a:	e01e      	b.n	1000805a <app_entry+0x5a>
1000801c:	4b16      	ldr	r3, [pc, #88]	; (10008078 <app_entry+0x78>)
1000801e:	4a13      	ldr	r2, [pc, #76]	; (1000806c <app_entry+0x6c>)
10008020:	3203      	adds	r2, #3
10008022:	1ad2      	subs	r2, r2, r3
10008024:	0892      	lsrs	r2, r2, #2
10008026:	3201      	adds	r2, #1
10008028:	0092      	lsls	r2, r2, #2
    /* Initialize the relocate segment */
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
        for (; pDest < &_erelocate;) {
1000802a:	2300      	movs	r3, #0
            *pDest++ = *pSrc++;
1000802c:	480d      	ldr	r0, [pc, #52]	; (10008064 <app_entry+0x64>)
1000802e:	490e      	ldr	r1, [pc, #56]	; (10008068 <app_entry+0x68>)
10008030:	58cc      	ldr	r4, [r1, r3]
10008032:	50c4      	str	r4, [r0, r3]
10008034:	3304      	adds	r3, #4
    /* Initialize the relocate segment */
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
        for (; pDest < &_erelocate;) {
10008036:	4293      	cmp	r3, r2
10008038:	d1fa      	bne.n	10008030 <app_entry+0x30>
1000803a:	e7ea      	b.n	10008012 <app_entry+0x12>
1000803c:	4b0f      	ldr	r3, [pc, #60]	; (1000807c <app_entry+0x7c>)
1000803e:	490c      	ldr	r1, [pc, #48]	; (10008070 <app_entry+0x70>)
10008040:	3103      	adds	r1, #3
10008042:	1ac9      	subs	r1, r1, r3
10008044:	0889      	lsrs	r1, r1, #2
10008046:	3101      	adds	r1, #1
10008048:	0089      	lsls	r1, r1, #2
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
1000804a:	2300      	movs	r3, #0
        *pDest++ = 0;
1000804c:	4c09      	ldr	r4, [pc, #36]	; (10008074 <app_entry+0x74>)
1000804e:	2000      	movs	r0, #0
10008050:	191a      	adds	r2, r3, r4
10008052:	6010      	str	r0, [r2, #0]
10008054:	3304      	adds	r3, #4
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
10008056:	428b      	cmp	r3, r1
10008058:	d1fa      	bne.n	10008050 <app_entry+0x50>
        *pDest++ = 0;
    }

    /* Initialize the C library */
    __libc_init_array();
1000805a:	4b09      	ldr	r3, [pc, #36]	; (10008080 <app_entry+0x80>)
1000805c:	4798      	blx	r3

    /* Branch to main function */
    main();
1000805e:	4b09      	ldr	r3, [pc, #36]	; (10008084 <app_entry+0x84>)
10008060:	4798      	blx	r3

    /* return to BLE OS*/
    return;
}
10008062:	bd10      	pop	{r4, pc}
10008064:	10018344 	.word	0x10018344
10008068:	10018344 	.word	0x10018344
1000806c:	100183f0 	.word	0x100183f0
10008070:	1001b294 	.word	0x1001b294
10008074:	100183f0 	.word	0x100183f0
10008078:	10018348 	.word	0x10018348
1000807c:	100183f4 	.word	0x100183f4
10008080:	10015085 	.word	0x10015085
10008084:	1000f899 	.word	0x1000f899

10008088 <__do_global_dtors_aux>:
10008088:	b510      	push	{r4, lr}
1000808a:	4c06      	ldr	r4, [pc, #24]	; (100080a4 <__do_global_dtors_aux+0x1c>)
1000808c:	7823      	ldrb	r3, [r4, #0]
1000808e:	2b00      	cmp	r3, #0
10008090:	d107      	bne.n	100080a2 <__do_global_dtors_aux+0x1a>
10008092:	4b05      	ldr	r3, [pc, #20]	; (100080a8 <__do_global_dtors_aux+0x20>)
10008094:	2b00      	cmp	r3, #0
10008096:	d002      	beq.n	1000809e <__do_global_dtors_aux+0x16>
10008098:	4804      	ldr	r0, [pc, #16]	; (100080ac <__do_global_dtors_aux+0x24>)
1000809a:	e000      	b.n	1000809e <__do_global_dtors_aux+0x16>
1000809c:	bf00      	nop
1000809e:	2301      	movs	r3, #1
100080a0:	7023      	strb	r3, [r4, #0]
100080a2:	bd10      	pop	{r4, pc}
100080a4:	100183f0 	.word	0x100183f0
100080a8:	00000000 	.word	0x00000000
100080ac:	10018344 	.word	0x10018344

100080b0 <frame_dummy>:
100080b0:	4b08      	ldr	r3, [pc, #32]	; (100080d4 <frame_dummy+0x24>)
100080b2:	b510      	push	{r4, lr}
100080b4:	2b00      	cmp	r3, #0
100080b6:	d003      	beq.n	100080c0 <frame_dummy+0x10>
100080b8:	4907      	ldr	r1, [pc, #28]	; (100080d8 <frame_dummy+0x28>)
100080ba:	4808      	ldr	r0, [pc, #32]	; (100080dc <frame_dummy+0x2c>)
100080bc:	e000      	b.n	100080c0 <frame_dummy+0x10>
100080be:	bf00      	nop
100080c0:	4807      	ldr	r0, [pc, #28]	; (100080e0 <frame_dummy+0x30>)
100080c2:	6803      	ldr	r3, [r0, #0]
100080c4:	2b00      	cmp	r3, #0
100080c6:	d100      	bne.n	100080ca <frame_dummy+0x1a>
100080c8:	bd10      	pop	{r4, pc}
100080ca:	4b06      	ldr	r3, [pc, #24]	; (100080e4 <frame_dummy+0x34>)
100080cc:	2b00      	cmp	r3, #0
100080ce:	d0fb      	beq.n	100080c8 <frame_dummy+0x18>
100080d0:	4798      	blx	r3
100080d2:	e7f9      	b.n	100080c8 <frame_dummy+0x18>
100080d4:	00000000 	.word	0x00000000
100080d8:	100183f4 	.word	0x100183f4
100080dc:	10018344 	.word	0x10018344
100080e0:	10018344 	.word	0x10018344
100080e4:	00000000 	.word	0x00000000

100080e8 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
100080e8:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_clock_get_value();
100080ea:	4b09      	ldr	r3, [pc, #36]	; (10008110 <delay_init+0x28>)
100080ec:	4798      	blx	r3
100080ee:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
100080f0:	4c08      	ldr	r4, [pc, #32]	; (10008114 <delay_init+0x2c>)
100080f2:	21fa      	movs	r1, #250	; 0xfa
100080f4:	0089      	lsls	r1, r1, #2
100080f6:	47a0      	blx	r4
100080f8:	4b07      	ldr	r3, [pc, #28]	; (10008118 <delay_init+0x30>)
100080fa:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
100080fc:	4907      	ldr	r1, [pc, #28]	; (1000811c <delay_init+0x34>)
100080fe:	0028      	movs	r0, r5
10008100:	47a0      	blx	r4
10008102:	4b07      	ldr	r3, [pc, #28]	; (10008120 <delay_init+0x38>)
10008104:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
10008106:	2205      	movs	r2, #5
10008108:	4b06      	ldr	r3, [pc, #24]	; (10008124 <delay_init+0x3c>)
1000810a:	601a      	str	r2, [r3, #0]
}
1000810c:	bd70      	pop	{r4, r5, r6, pc}
1000810e:	46c0      	nop			; (mov r8, r8)
10008110:	1000c71d 	.word	0x1000c71d
10008114:	10013011 	.word	0x10013011
10008118:	10018348 	.word	0x10018348
1000811c:	000f4240 	.word	0x000f4240
10008120:	10018344 	.word	0x10018344
10008124:	e000e010 	.word	0xe000e010

10008128 <delay_cycles_ms>:
 * \brief Delay loop to delay at least n number of milliseconds
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(uint32_t n)
{
10008128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000812a:	0005      	movs	r5, r0
	while (n--) {
		printf(".");
1000812c:	4f0b      	ldr	r7, [pc, #44]	; (1000815c <delay_cycles_ms+0x34>)
		/* Divide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
1000812e:	4e0c      	ldr	r6, [pc, #48]	; (10008160 <delay_cycles_ms+0x38>)
 * \param n Number of cycles
 */
static inline void delay_cycles(const uint32_t n)
{
    if(n > 0) {
        SysTick->LOAD = n;
10008130:	4c0c      	ldr	r4, [pc, #48]	; (10008164 <delay_cycles_ms+0x3c>)
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(uint32_t n)
{
	while (n--) {
10008132:	e00d      	b.n	10008150 <delay_cycles_ms+0x28>
		printf(".");
10008134:	202e      	movs	r0, #46	; 0x2e
10008136:	47b8      	blx	r7
		/* Divide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
10008138:	6833      	ldr	r3, [r6, #0]
 *
 * \param n Number of cycles
 */
static inline void delay_cycles(const uint32_t n)
{
    if(n > 0) {
1000813a:	2b00      	cmp	r3, #0
1000813c:	d007      	beq.n	1000814e <delay_cycles_ms+0x26>
        SysTick->LOAD = n;
1000813e:	6063      	str	r3, [r4, #4]
        SysTick->VAL = 0;
10008140:	2300      	movs	r3, #0
10008142:	60a3      	str	r3, [r4, #8]
        while(!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
10008144:	2280      	movs	r2, #128	; 0x80
10008146:	0252      	lsls	r2, r2, #9
10008148:	6823      	ldr	r3, [r4, #0]
1000814a:	4213      	tst	r3, r2
1000814c:	d0fc      	beq.n	10008148 <delay_cycles_ms+0x20>
1000814e:	3d01      	subs	r5, #1
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(uint32_t n)
{
	while (n--) {
10008150:	2d00      	cmp	r5, #0
10008152:	d1ef      	bne.n	10008134 <delay_cycles_ms+0xc>
		printf(".");
		/* Divide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
	}
	printf("\n\r");
10008154:	4804      	ldr	r0, [pc, #16]	; (10008168 <delay_cycles_ms+0x40>)
10008156:	4b05      	ldr	r3, [pc, #20]	; (1000816c <delay_cycles_ms+0x44>)
10008158:	4798      	blx	r3
}
1000815a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000815c:	10015291 	.word	0x10015291
10008160:	10018348 	.word	0x10018348
10008164:	e000e010 	.word	0xe000e010
10008168:	100162bc 	.word	0x100162bc
1000816c:	1001525d 	.word	0x1001525d

10008170 <aon_sleep_timer_get_config_defaults>:
 * \param[out]  config  Pointer to a AON Sleep Timer module configuration structure to set
 */
void aon_sleep_timer_get_config_defaults(struct aon_sleep_timer_config *config)
{
	/* Default configuration values */
	config->wakeup = AON_SLEEP_TIMER_WAKEUP_ARM;
10008170:	2301      	movs	r3, #1
10008172:	7003      	strb	r3, [r0, #0]
	config->mode = AON_SLEEP_TIMER_SINGLE_MODE;
10008174:	7043      	strb	r3, [r0, #1]
	config->counter = 32000;
10008176:	23fa      	movs	r3, #250	; 0xfa
10008178:	01db      	lsls	r3, r3, #7
1000817a:	6043      	str	r3, [r0, #4]
}
1000817c:	4770      	bx	lr
1000817e:	46c0      	nop			; (mov r8, r8)

10008180 <aon_sleep_timer_disable>:
 */
void aon_sleep_timer_disable(void)
{
	uint32_t regval;

	AON_SLEEP_TIMER0->SINGLE_COUNT_DURATION.reg = 0;
10008180:	4b06      	ldr	r3, [pc, #24]	; (1000819c <aon_sleep_timer_disable+0x1c>)
10008182:	2200      	movs	r2, #0
10008184:	605a      	str	r2, [r3, #4]
	regval = AON_SLEEP_TIMER0->CONTROL.reg;
10008186:	681a      	ldr	r2, [r3, #0]
	regval &= ~AON_SLEEP_TIMER_CONTROL_RELOAD_ENABLE;
	regval &= ~AON_SLEEP_TIMER_CONTROL_SINGLE_COUNT_ENABLE;
10008188:	2103      	movs	r1, #3
1000818a:	438a      	bics	r2, r1
	AON_SLEEP_TIMER0->CONTROL.reg = regval;
1000818c:	601a      	str	r2, [r3, #0]

	while (AON_SLEEP_TIMER0->CONTROL.reg & (1 << 14)) {
1000818e:	0019      	movs	r1, r3
10008190:	2280      	movs	r2, #128	; 0x80
10008192:	01d2      	lsls	r2, r2, #7
10008194:	680b      	ldr	r3, [r1, #0]
10008196:	4213      	tst	r3, r2
10008198:	d1fc      	bne.n	10008194 <aon_sleep_timer_disable+0x14>
	}
}
1000819a:	4770      	bx	lr
1000819c:	4000d000 	.word	0x4000d000

100081a0 <aon_sleep_timer_clear_interrup>:
 * This flag will be cleared automatically once the IRQ
 * has been seen on the sleep clock.
 */
void aon_sleep_timer_clear_interrup(void)
{
	AON_SLEEP_TIMER0->CONTROL.reg |= AON_SLEEP_TIMER_CONTROL_IRQ_CLEAR;
100081a0:	4a02      	ldr	r2, [pc, #8]	; (100081ac <aon_sleep_timer_clear_interrup+0xc>)
100081a2:	6811      	ldr	r1, [r2, #0]
100081a4:	2310      	movs	r3, #16
100081a6:	430b      	orrs	r3, r1
100081a8:	6013      	str	r3, [r2, #0]
}
100081aa:	4770      	bx	lr
100081ac:	4000d000 	.word	0x4000d000

100081b0 <aon_sleep_timer_isr_handler>:
 *
 * Timer ISR handler.
 *
 */
static void aon_sleep_timer_isr_handler(void)
{
100081b0:	b510      	push	{r4, lr}
	aon_sleep_timer_clear_interrup();
100081b2:	4b04      	ldr	r3, [pc, #16]	; (100081c4 <aon_sleep_timer_isr_handler+0x14>)
100081b4:	4798      	blx	r3

	if (aon_sleep_timer_callback) {
100081b6:	4b04      	ldr	r3, [pc, #16]	; (100081c8 <aon_sleep_timer_isr_handler+0x18>)
100081b8:	681b      	ldr	r3, [r3, #0]
100081ba:	2b00      	cmp	r3, #0
100081bc:	d000      	beq.n	100081c0 <aon_sleep_timer_isr_handler+0x10>
		aon_sleep_timer_callback();
100081be:	4798      	blx	r3
	}
}
100081c0:	bd10      	pop	{r4, pc}
100081c2:	46c0      	nop			; (mov r8, r8)
100081c4:	100081a1 	.word	0x100081a1
100081c8:	1001840c 	.word	0x1001840c

100081cc <aon_sleep_timer_register_callback>:
 *
 * \param[in]     callback_func Pointer to callback function
 */
void aon_sleep_timer_register_callback(aon_sleep_timer_callback_t fun)
{
	aon_sleep_timer_callback = fun;
100081cc:	4b01      	ldr	r3, [pc, #4]	; (100081d4 <aon_sleep_timer_register_callback+0x8>)
100081ce:	6018      	str	r0, [r3, #0]
}
100081d0:	4770      	bx	lr
100081d2:	46c0      	nop			; (mov r8, r8)
100081d4:	1001840c 	.word	0x1001840c

100081d8 <aon_sleep_timer_unregister_callback>:
 * Unregisters and disable a callback function implemented by the user.
 *
 */
void aon_sleep_timer_unregister_callback(void)
{
	aon_sleep_timer_callback = NULL;
100081d8:	2200      	movs	r2, #0
100081da:	4b01      	ldr	r3, [pc, #4]	; (100081e0 <aon_sleep_timer_unregister_callback+0x8>)
100081dc:	601a      	str	r2, [r3, #0]
}
100081de:	4770      	bx	lr
100081e0:	1001840c 	.word	0x1001840c

100081e4 <aon_sleep_timer_init>:
 *
 * \param[in]     config       Pointer to the AON Sleep Timer configuration options struct
 *
 */
void aon_sleep_timer_init(const struct aon_sleep_timer_config *config)
{
100081e4:	b5f0      	push	{r4, r5, r6, r7, lr}
100081e6:	b083      	sub	sp, #12
	uint32_t aon_st_ctrl = 0;

	AON_PWR_SEQ0->AON_ST_WAKEUP_CTRL.reg = AON_PWR_SEQ_AON_ST_WAKEUP_CTRL_RESETVALUE;
100081e8:	2200      	movs	r2, #0
100081ea:	4b2b      	ldr	r3, [pc, #172]	; (10008298 <aon_sleep_timer_init+0xb4>)
100081ec:	731a      	strb	r2, [r3, #12]
	if (config->wakeup == AON_SLEEP_TIMER_WAKEUP_ARM_BLE) {
100081ee:	7803      	ldrb	r3, [r0, #0]
100081f0:	2b02      	cmp	r3, #2
100081f2:	d105      	bne.n	10008200 <aon_sleep_timer_init+0x1c>
		AON_PWR_SEQ0->AON_ST_WAKEUP_CTRL.reg |=
100081f4:	4a28      	ldr	r2, [pc, #160]	; (10008298 <aon_sleep_timer_init+0xb4>)
100081f6:	7b11      	ldrb	r1, [r2, #12]
100081f8:	3301      	adds	r3, #1
100081fa:	430b      	orrs	r3, r1
100081fc:	7313      	strb	r3, [r2, #12]
100081fe:	e005      	b.n	1000820c <aon_sleep_timer_init+0x28>
				AON_PWR_SEQ_AON_ST_WAKEUP_CTRL_ARM_ENABLE |
				AON_PWR_SEQ_AON_ST_WAKEUP_CTRL_BLE_ENABLE;
	} else if (config->wakeup == AON_SLEEP_TIMER_WAKEUP_ARM) {
10008200:	2b01      	cmp	r3, #1
10008202:	d103      	bne.n	1000820c <aon_sleep_timer_init+0x28>
		AON_PWR_SEQ0->AON_ST_WAKEUP_CTRL.reg |=
10008204:	4a24      	ldr	r2, [pc, #144]	; (10008298 <aon_sleep_timer_init+0xb4>)
10008206:	7b11      	ldrb	r1, [r2, #12]
10008208:	430b      	orrs	r3, r1
1000820a:	7313      	strb	r3, [r2, #12]
				AON_PWR_SEQ_AON_ST_WAKEUP_CTRL_ARM_ENABLE;
	}

	aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
1000820c:	4b23      	ldr	r3, [pc, #140]	; (1000829c <aon_sleep_timer_init+0xb8>)
1000820e:	681a      	ldr	r2, [r3, #0]
	while (aon_st_ctrl & ((1UL << 31) - 1)) {
10008210:	0053      	lsls	r3, r2, #1
10008212:	d01f      	beq.n	10008254 <aon_sleep_timer_init+0x70>
		AON_SLEEP_TIMER0->CONTROL.reg = 0;
10008214:	4d21      	ldr	r5, [pc, #132]	; (1000829c <aon_sleep_timer_init+0xb8>)
10008216:	2700      	movs	r7, #0

static void delay_cycle(uint32_t cycles)
{
	volatile uint32_t i = 0;

	for (i = 0; i < cycles*100; i++) {
10008218:	262c      	movs	r6, #44	; 0x2c
1000821a:	36ff      	adds	r6, #255	; 0xff
1000821c:	2180      	movs	r1, #128	; 0x80
1000821e:	01c9      	lsls	r1, r1, #7
				AON_PWR_SEQ_AON_ST_WAKEUP_CTRL_ARM_ENABLE;
	}

	aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
	while (aon_st_ctrl & ((1UL << 31) - 1)) {
		AON_SLEEP_TIMER0->CONTROL.reg = 0;
10008220:	602f      	str	r7, [r5, #0]

static aon_sleep_timer_callback_t aon_sleep_timer_callback = NULL;

static void delay_cycle(uint32_t cycles)
{
	volatile uint32_t i = 0;
10008222:	9701      	str	r7, [sp, #4]

	for (i = 0; i < cycles*100; i++) {
10008224:	9701      	str	r7, [sp, #4]
10008226:	9b01      	ldr	r3, [sp, #4]
10008228:	42b3      	cmp	r3, r6
1000822a:	d806      	bhi.n	1000823a <aon_sleep_timer_init+0x56>
		asm volatile ("nop");
1000822c:	46c0      	nop			; (mov r8, r8)

static void delay_cycle(uint32_t cycles)
{
	volatile uint32_t i = 0;

	for (i = 0; i < cycles*100; i++) {
1000822e:	9b01      	ldr	r3, [sp, #4]
10008230:	3301      	adds	r3, #1
10008232:	9301      	str	r3, [sp, #4]
10008234:	9b01      	ldr	r3, [sp, #4]
10008236:	42b3      	cmp	r3, r6
10008238:	d9f8      	bls.n	1000822c <aon_sleep_timer_init+0x48>
1000823a:	7844      	ldrb	r4, [r0, #1]
1000823c:	000b      	movs	r3, r1
1000823e:	2c00      	cmp	r4, #0
10008240:	d103      	bne.n	1000824a <aon_sleep_timer_init+0x66>
10008242:	2380      	movs	r3, #128	; 0x80
10008244:	009b      	lsls	r3, r3, #2
10008246:	e000      	b.n	1000824a <aon_sleep_timer_init+0x66>
	while (aon_st_ctrl & ((1UL << 31) - 1)) {
		AON_SLEEP_TIMER0->CONTROL.reg = 0;
		delay_cycle(3);
		while (aon_st_ctrl & ((config->mode == AON_SLEEP_TIMER_RELOAD_MODE) ?
				(1 << 9) : (1 << 14))) {
			aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
10008248:	682a      	ldr	r2, [r5, #0]

	aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
	while (aon_st_ctrl & ((1UL << 31) - 1)) {
		AON_SLEEP_TIMER0->CONTROL.reg = 0;
		delay_cycle(3);
		while (aon_st_ctrl & ((config->mode == AON_SLEEP_TIMER_RELOAD_MODE) ?
1000824a:	4213      	tst	r3, r2
1000824c:	d1fc      	bne.n	10008248 <aon_sleep_timer_init+0x64>
				(1 << 9) : (1 << 14))) {
			aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
		}
		aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
1000824e:	682a      	ldr	r2, [r5, #0]
		AON_PWR_SEQ0->AON_ST_WAKEUP_CTRL.reg |=
				AON_PWR_SEQ_AON_ST_WAKEUP_CTRL_ARM_ENABLE;
	}

	aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
	while (aon_st_ctrl & ((1UL << 31) - 1)) {
10008250:	0053      	lsls	r3, r2, #1
10008252:	d1e5      	bne.n	10008220 <aon_sleep_timer_init+0x3c>
			aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
		}
		aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
	}

	if (config->mode == AON_SLEEP_TIMER_RELOAD_MODE) {
10008254:	7843      	ldrb	r3, [r0, #1]
10008256:	2b00      	cmp	r3, #0
10008258:	d105      	bne.n	10008266 <aon_sleep_timer_init+0x82>
		/* Reload counter will start here */
		AON_SLEEP_TIMER0->SINGLE_COUNT_DURATION.reg = config->counter;
1000825a:	4b10      	ldr	r3, [pc, #64]	; (1000829c <aon_sleep_timer_init+0xb8>)
1000825c:	6842      	ldr	r2, [r0, #4]
1000825e:	605a      	str	r2, [r3, #4]
		AON_SLEEP_TIMER0->CONTROL.reg = AON_SLEEP_TIMER_CONTROL_RELOAD_ENABLE;
10008260:	2201      	movs	r2, #1
10008262:	601a      	str	r2, [r3, #0]
10008264:	e004      	b.n	10008270 <aon_sleep_timer_init+0x8c>
	} else {
		/* Single counter will start here */
		AON_SLEEP_TIMER0->SINGLE_COUNT_DURATION.reg = config->counter;
10008266:	4b0d      	ldr	r3, [pc, #52]	; (1000829c <aon_sleep_timer_init+0xb8>)
10008268:	6842      	ldr	r2, [r0, #4]
1000826a:	605a      	str	r2, [r3, #4]
		AON_SLEEP_TIMER0->CONTROL.reg = AON_SLEEP_TIMER_CONTROL_SINGLE_COUNT_ENABLE;
1000826c:	2202      	movs	r2, #2
1000826e:	601a      	str	r2, [r3, #0]
	}

	if (config->mode == AON_SLEEP_TIMER_SINGLE_MODE) {
10008270:	7843      	ldrb	r3, [r0, #1]
10008272:	2b01      	cmp	r3, #1
10008274:	d109      	bne.n	1000828a <aon_sleep_timer_init+0xa6>
		while ((AON_SLEEP_TIMER0->CONTROL.reg &
10008276:	4909      	ldr	r1, [pc, #36]	; (1000829c <aon_sleep_timer_init+0xb8>)
10008278:	22e0      	movs	r2, #224	; 0xe0
1000827a:	01d2      	lsls	r2, r2, #7
1000827c:	680b      	ldr	r3, [r1, #0]
1000827e:	4013      	ands	r3, r2
10008280:	4293      	cmp	r3, r2
10008282:	d1fb      	bne.n	1000827c <aon_sleep_timer_init+0x98>
				AON_SLEEP_TIMER_CONTROL_SLP_TIMER_SINGLE_COUNT_ENABLE_DLY_Msk)
				!= AON_SLEEP_TIMER_CONTROL_SLP_TIMER_SINGLE_COUNT_ENABLE_DLY_Msk) {
		}
		AON_SLEEP_TIMER0->CONTROL.reg = 0;
10008284:	2200      	movs	r2, #0
10008286:	4b05      	ldr	r3, [pc, #20]	; (1000829c <aon_sleep_timer_init+0xb8>)
10008288:	601a      	str	r2, [r3, #0]
	}

	system_register_isr(RAM_ISR_TABLE_AON_SLEEP_TIMER_INDEX, (uint32_t)aon_sleep_timer_isr_handler);
1000828a:	4905      	ldr	r1, [pc, #20]	; (100082a0 <aon_sleep_timer_init+0xbc>)
1000828c:	202b      	movs	r0, #43	; 0x2b
1000828e:	4b05      	ldr	r3, [pc, #20]	; (100082a4 <aon_sleep_timer_init+0xc0>)
10008290:	4798      	blx	r3
}
10008292:	b003      	add	sp, #12
10008294:	bdf0      	pop	{r4, r5, r6, r7, pc}
10008296:	46c0      	nop			; (mov r8, r8)
10008298:	4000e000 	.word	0x4000e000
1000829c:	4000d000 	.word	0x4000d000
100082a0:	100081b1 	.word	0x100081b1
100082a4:	1000d259 	.word	0x1000d259

100082a8 <_i2c_master_read_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
100082a8:	b5f0      	push	{r4, r5, r6, r7, lr}
100082aa:	464f      	mov	r7, r9
100082ac:	4646      	mov	r6, r8
100082ae:	b4c0      	push	{r6, r7}
100082b0:	4681      	mov	r9, r0
	Assert(config);
	
	uint16_t counter = 0;
	uint32_t status  = 0;
	I2c *const i2c_module    = (module->hw);
	uint16_t length = packet->data_length;
100082b2:	884d      	ldrh	r5, [r1, #2]

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
100082b4:	2317      	movs	r3, #23
	uint16_t counter = 0;
	uint32_t status  = 0;
	I2c *const i2c_module    = (module->hw);
	uint16_t length = packet->data_length;

	if (length == 0) {
100082b6:	2d00      	cmp	r5, #0
100082b8:	d02f      	beq.n	1000831a <_i2c_master_read_packet+0x72>
	Assert(module->hw);
	Assert(config);
	
	uint16_t counter = 0;
	uint32_t status  = 0;
	I2c *const i2c_module    = (module->hw);
100082ba:	6802      	ldr	r2, [r0, #0]
 *
 * \param[in]  i2c_module  Pointer to software module structure
 */
static inline void i2c_wait_for_idle(I2c *const i2c_module)
{
	while (i2c_module->I2C_STATUS.bit.I2C_ACTIVE) {
100082bc:	2428      	movs	r4, #40	; 0x28
100082be:	5d13      	ldrb	r3, [r2, r4]
100082c0:	07db      	lsls	r3, r3, #31
100082c2:	d4fc      	bmi.n	100082be <_i2c_master_read_packet+0x16>
	}

	i2c_wait_for_idle(i2c_module);

	/* Flush the FIFO */
	i2c_module->I2C_FLUSH.reg = 1;
100082c4:	2301      	movs	r3, #1
100082c6:	2434      	movs	r4, #52	; 0x34
100082c8:	5513      	strb	r3, [r2, r4]

	/* Enable I2C on bus (start condition). */
	i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_1;
100082ca:	3c14      	subs	r4, #20
100082cc:	5513      	strb	r3, [r2, r4]
	/* Address I2C slave in case of Master mode enabled. */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 |
100082ce:	880b      	ldrh	r3, [r1, #0]
100082d0:	005b      	lsls	r3, r3, #1
100082d2:	2402      	movs	r4, #2
100082d4:	34ff      	adds	r4, #255	; 0xff
100082d6:	4323      	orrs	r3, r4
100082d8:	b29b      	uxth	r3, r3
100082da:	8013      	strh	r3, [r2, #0]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(config);
	
	uint16_t counter = 0;
100082dc:	2400      	movs	r4, #0
	/* Address I2C slave in case of Master mode enabled. */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 |
			(packet->address << 1) | I2C_TRANSFER_READ;
	do {
		status = i2c_module->RECEIVE_STATUS.reg;
		if (status & I2C_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY)
100082de:	2301      	movs	r3, #1
100082e0:	4698      	mov	r8, r3
	i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_1;
	/* Address I2C slave in case of Master mode enabled. */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 |
			(packet->address << 1) | I2C_TRANSFER_READ;
	do {
		status = i2c_module->RECEIVE_STATUS.reg;
100082e2:	7b13      	ldrb	r3, [r2, #12]
100082e4:	b2db      	uxtb	r3, r3
		if (status & I2C_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY)
100082e6:	4640      	mov	r0, r8
100082e8:	4218      	tst	r0, r3
100082ea:	d006      	beq.n	100082fa <_i2c_master_read_packet+0x52>
			packet->data[counter++] = i2c_module->RECEIVE_DATA.reg;
100082ec:	1c67      	adds	r7, r4, #1
100082ee:	7910      	ldrb	r0, [r2, #4]
100082f0:	4684      	mov	ip, r0
100082f2:	6848      	ldr	r0, [r1, #4]
100082f4:	4666      	mov	r6, ip
100082f6:	5506      	strb	r6, [r0, r4]
100082f8:	b2bc      	uxth	r4, r7
	} while (counter < length); 
100082fa:	42ac      	cmp	r4, r5
100082fc:	d3f1      	bcc.n	100082e2 <_i2c_master_read_packet+0x3a>

	/* Now check whether the core has sent the data out and free the bus. */
	while (!(status & I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY)) {
100082fe:	06db      	lsls	r3, r3, #27
10008300:	d403      	bmi.n	1000830a <_i2c_master_read_packet+0x62>
10008302:	2110      	movs	r1, #16
		status = i2c_module->TRANSMIT_STATUS.reg;
10008304:	7a13      	ldrb	r3, [r2, #8]
		if (status & I2C_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY)
			packet->data[counter++] = i2c_module->RECEIVE_DATA.reg;
	} while (counter < length); 

	/* Now check whether the core has sent the data out and free the bus. */
	while (!(status & I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY)) {
10008306:	420b      	tst	r3, r1
10008308:	d0fc      	beq.n	10008304 <_i2c_master_read_packet+0x5c>
		status = i2c_module->TRANSMIT_STATUS.reg;
	}

	/* Send stop condition. */
	if (!module->no_stop) {
1000830a:	464b      	mov	r3, r9
1000830c:	7959      	ldrb	r1, [r3, #5]
		i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_0;
	}

	return STATUS_OK;
1000830e:	2300      	movs	r3, #0
	while (!(status & I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY)) {
		status = i2c_module->TRANSMIT_STATUS.reg;
	}

	/* Send stop condition. */
	if (!module->no_stop) {
10008310:	2900      	cmp	r1, #0
10008312:	d102      	bne.n	1000831a <_i2c_master_read_packet+0x72>
		i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_0;
10008314:	3320      	adds	r3, #32
10008316:	54d1      	strb	r1, [r2, r3]
	}

	return STATUS_OK;
10008318:	2300      	movs	r3, #0
}
1000831a:	0018      	movs	r0, r3
1000831c:	bc0c      	pop	{r2, r3}
1000831e:	4690      	mov	r8, r2
10008320:	4699      	mov	r9, r3
10008322:	bdf0      	pop	{r4, r5, r6, r7, pc}

10008324 <_i2c_master_write_packet>:
 * \retval STATUS_OK                    The packet was write successfully
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
10008324:	b5f0      	push	{r4, r5, r6, r7, lr}
10008326:	b083      	sub	sp, #12
10008328:	4684      	mov	ip, r0
1000832a:	0008      	movs	r0, r1
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(packet);
	
	I2c *const i2c_module = (module->hw);
1000832c:	4663      	mov	r3, ip
1000832e:	681c      	ldr	r4, [r3, #0]
	volatile uint16_t counter = 0;
10008330:	2200      	movs	r2, #0
10008332:	466b      	mov	r3, sp
10008334:	80da      	strh	r2, [r3, #6]
	uint32_t status  = 0;

	uint16_t length = packet->data_length;
10008336:	8849      	ldrh	r1, [r1, #2]
10008338:	3228      	adds	r2, #40	; 0x28
1000833a:	5ca3      	ldrb	r3, [r4, r2]
1000833c:	07db      	lsls	r3, r3, #31
1000833e:	d4fc      	bmi.n	1000833a <_i2c_master_write_packet+0x16>

	i2c_wait_for_idle(i2c_module);

	/* Flush the FIFO */
	i2c_module->I2C_FLUSH.reg = 1;
10008340:	2301      	movs	r3, #1
10008342:	2234      	movs	r2, #52	; 0x34
10008344:	54a3      	strb	r3, [r4, r2]

	/* Enable I2C on bus (start condition) */
	i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_1;
10008346:	3a14      	subs	r2, #20
10008348:	54a3      	strb	r3, [r4, r2]

	/* Address I2C slave in case of Master mode enabled */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 | 
1000834a:	8803      	ldrh	r3, [r0, #0]
1000834c:	005b      	lsls	r3, r3, #1
1000834e:	32e0      	adds	r2, #224	; 0xe0
10008350:	4313      	orrs	r3, r2
10008352:	b29b      	uxth	r3, r3
10008354:	8023      	strh	r3, [r4, #0]
			((packet->address) << 1) | I2C_TRANSFER_WRITE;
	do {
		status = i2c_module->TRANSMIT_STATUS.reg;
		if (status & I2C_TRANSMIT_STATUS_TX_FIFO_NOT_FULL_Msk) {
10008356:	2701      	movs	r7, #1
			i2c_module->TRANSMIT_DATA.reg = packet->data[counter++];
10008358:	466b      	mov	r3, sp
1000835a:	1d9d      	adds	r5, r3, #6

	/* Address I2C slave in case of Master mode enabled */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 | 
			((packet->address) << 1) | I2C_TRANSFER_WRITE;
	do {
		status = i2c_module->TRANSMIT_STATUS.reg;
1000835c:	7a23      	ldrb	r3, [r4, #8]
1000835e:	b2db      	uxtb	r3, r3
		if (status & I2C_TRANSMIT_STATUS_TX_FIFO_NOT_FULL_Msk) {
10008360:	421f      	tst	r7, r3
10008362:	d007      	beq.n	10008374 <_i2c_master_write_packet+0x50>
			i2c_module->TRANSMIT_DATA.reg = packet->data[counter++];
10008364:	882a      	ldrh	r2, [r5, #0]
10008366:	b292      	uxth	r2, r2
10008368:	1c56      	adds	r6, r2, #1
1000836a:	b2b6      	uxth	r6, r6
1000836c:	802e      	strh	r6, [r5, #0]
1000836e:	6846      	ldr	r6, [r0, #4]
10008370:	5cb2      	ldrb	r2, [r6, r2]
10008372:	8022      	strh	r2, [r4, #0]
		}
	} while (counter < length); 
10008374:	882a      	ldrh	r2, [r5, #0]
10008376:	b292      	uxth	r2, r2
10008378:	4291      	cmp	r1, r2
1000837a:	d8ef      	bhi.n	1000835c <_i2c_master_write_packet+0x38>

	/* Now check whether the core has sent the data out and free the bus */
	while (!(status & I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY)) {
1000837c:	06db      	lsls	r3, r3, #27
1000837e:	d403      	bmi.n	10008388 <_i2c_master_write_packet+0x64>
10008380:	2210      	movs	r2, #16
			status = i2c_module->TRANSMIT_STATUS.reg;
10008382:	7a23      	ldrb	r3, [r4, #8]
			i2c_module->TRANSMIT_DATA.reg = packet->data[counter++];
		}
	} while (counter < length); 

	/* Now check whether the core has sent the data out and free the bus */
	while (!(status & I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY)) {
10008384:	4213      	tst	r3, r2
10008386:	d0fc      	beq.n	10008382 <_i2c_master_write_packet+0x5e>
			status = i2c_module->TRANSMIT_STATUS.reg;
	}

	/* Send stop condition */
	if (!module->no_stop) {
10008388:	4663      	mov	r3, ip
1000838a:	795b      	ldrb	r3, [r3, #5]
1000838c:	2b00      	cmp	r3, #0
1000838e:	d102      	bne.n	10008396 <_i2c_master_write_packet+0x72>
		i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_0;
10008390:	2200      	movs	r2, #0
10008392:	3320      	adds	r3, #32
10008394:	54e2      	strb	r2, [r4, r3]
	}

	return STATUS_OK;
}
10008396:	2000      	movs	r0, #0
10008398:	b003      	add	sp, #12
1000839a:	bdf0      	pop	{r4, r5, r6, r7, pc}

1000839c <i2c_master_get_config_defaults>:
		struct i2c_master_config *const config)
{
	/* Sanity check */
	Assert(config);
	
	config->clock_source    = I2C_CLK_INPUT_3;
1000839c:	2303      	movs	r3, #3
1000839e:	7003      	strb	r3, [r0, #0]
	config->clock_divider   = 0x10;
100083a0:	330d      	adds	r3, #13
100083a2:	8043      	strh	r3, [r0, #2]
	config->pin_number_pad0 = PIN_LP_GPIO_8;
100083a4:	3b08      	subs	r3, #8
100083a6:	6043      	str	r3, [r0, #4]
	config->pin_number_pad1 = PIN_LP_GPIO_9;
100083a8:	3301      	adds	r3, #1
100083aa:	60c3      	str	r3, [r0, #12]
	config->pinmux_sel_pad0 = MUX_LP_GPIO_8_I2C0_SDA;
100083ac:	3b07      	subs	r3, #7
100083ae:	6083      	str	r3, [r0, #8]
	config->pinmux_sel_pad1 = MUX_LP_GPIO_9_I2C0_SCL;
100083b0:	6103      	str	r3, [r0, #16]
}
100083b2:	4770      	bx	lr

100083b4 <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		I2c *const hw,
		const struct i2c_master_config *const config)
{
100083b4:	b570      	push	{r4, r5, r6, lr}
100083b6:	0004      	movs	r4, r0
100083b8:	0015      	movs	r5, r2
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(config);
	
	module->hw = hw;
100083ba:	6001      	str	r1, [r0, #0]

	/* Sanity check arguments. */
	if ((module == NULL) || (config == NULL))
100083bc:	2800      	cmp	r0, #0
100083be:	d026      	beq.n	1000840e <i2c_master_init+0x5a>
100083c0:	2a00      	cmp	r2, #0
100083c2:	d026      	beq.n	10008412 <i2c_master_init+0x5e>
100083c4:	2228      	movs	r2, #40	; 0x28
100083c6:	5c8b      	ldrb	r3, [r1, r2]
100083c8:	07db      	lsls	r3, r3, #31
100083ca:	d4fc      	bmi.n	100083c6 <i2c_master_init+0x12>
 *
 */
static inline void i2c_disable(I2c *const i2c_module)
{
	i2c_wait_for_idle(i2c_module);
	i2c_module->I2C_MODULE_ENABLE.reg = 0;
100083cc:	2300      	movs	r3, #0
100083ce:	750b      	strb	r3, [r1, #20]
		return STATUS_ERR_INVALID_ARG;

	i2c_disable(module->hw);
	if (module->hw == I2C0) {
100083d0:	6823      	ldr	r3, [r4, #0]
100083d2:	4a11      	ldr	r2, [pc, #68]	; (10008418 <i2c_master_init+0x64>)
100083d4:	4293      	cmp	r3, r2
100083d6:	d103      	bne.n	100083e0 <i2c_master_init+0x2c>
		system_peripheral_reset(PERIPHERAL_I2C0_CORE);
100083d8:	2003      	movs	r0, #3
100083da:	4b10      	ldr	r3, [pc, #64]	; (1000841c <i2c_master_init+0x68>)
100083dc:	4798      	blx	r3
100083de:	e006      	b.n	100083ee <i2c_master_init+0x3a>
	} else if (module->hw == I2C1) {
		system_peripheral_reset(PERIPHERAL_I2C1_CORE);
	} else {
		return STATUS_ERR_INVALID_ARG;
100083e0:	2017      	movs	r0, #23
		return STATUS_ERR_INVALID_ARG;

	i2c_disable(module->hw);
	if (module->hw == I2C0) {
		system_peripheral_reset(PERIPHERAL_I2C0_CORE);
	} else if (module->hw == I2C1) {
100083e2:	4a0f      	ldr	r2, [pc, #60]	; (10008420 <i2c_master_init+0x6c>)
100083e4:	4293      	cmp	r3, r2
100083e6:	d115      	bne.n	10008414 <i2c_master_init+0x60>
		system_peripheral_reset(PERIPHERAL_I2C1_CORE);
100083e8:	3002      	adds	r0, #2
100083ea:	4b0c      	ldr	r3, [pc, #48]	; (1000841c <i2c_master_init+0x68>)
100083ec:	4798      	blx	r3
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(config);

	I2c *const i2c_module = (module->hw);
100083ee:	6824      	ldr	r4, [r4, #0]

	/* Set the pinmux for this i2c module. */
	gpio_pinmux_cofiguration(config->pin_number_pad0, (uint16_t)(config->pinmux_sel_pad0));
100083f0:	8929      	ldrh	r1, [r5, #8]
100083f2:	7928      	ldrb	r0, [r5, #4]
100083f4:	4e0b      	ldr	r6, [pc, #44]	; (10008424 <i2c_master_init+0x70>)
100083f6:	47b0      	blx	r6
	gpio_pinmux_cofiguration(config->pin_number_pad1, (uint16_t)(config->pinmux_sel_pad1));
100083f8:	8a29      	ldrh	r1, [r5, #16]
100083fa:	7b28      	ldrb	r0, [r5, #12]
100083fc:	47b0      	blx	r6
	/* Set clock. */
	i2c_module->CLOCK_SOURCE_SELECT.reg = config->clock_source;
100083fe:	782b      	ldrb	r3, [r5, #0]
10008400:	7423      	strb	r3, [r4, #16]
	i2c_module->I2C_CLK_DIVIDER.reg = I2C_CLK_DIVIDER_I2C_DIVIDE_RATIO(config->clock_divider);
10008402:	886b      	ldrh	r3, [r5, #2]
10008404:	8323      	strh	r3, [r4, #24]
	/* Enable master mode. */
	i2c_module->I2C_MASTER_MODE.reg = I2C_MASTER_MODE_MASTER_ENABLE_1;
10008406:	2301      	movs	r3, #1
10008408:	7723      	strb	r3, [r4, #28]
#endif

	/* Set config and return status. */
	_i2c_master_set_config(module, config);

	return STATUS_OK;
1000840a:	2000      	movs	r0, #0
1000840c:	e002      	b.n	10008414 <i2c_master_init+0x60>
	
	module->hw = hw;

	/* Sanity check arguments. */
	if ((module == NULL) || (config == NULL))
		return STATUS_ERR_INVALID_ARG;
1000840e:	2017      	movs	r0, #23
10008410:	e000      	b.n	10008414 <i2c_master_init+0x60>
10008412:	2017      	movs	r0, #23

	/* Set config and return status. */
	_i2c_master_set_config(module, config);

	return STATUS_OK;
}
10008414:	bd70      	pop	{r4, r5, r6, pc}
10008416:	46c0      	nop			; (mov r8, r8)
10008418:	40003000 	.word	0x40003000
1000841c:	1000cdf1 	.word	0x1000cdf1
10008420:	40003400 	.word	0x40003400
10008424:	1000c379 	.word	0x1000c379

10008428 <i2c_master_read_packet_wait>:
 * \retval STATUS_BUSY                  If module has a pending request.
 */
enum status_code i2c_master_read_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
10008428:	b510      	push	{r4, lr}
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL))
1000842a:	2800      	cmp	r0, #0
1000842c:	d008      	beq.n	10008440 <i2c_master_read_packet_wait+0x18>
		return STATUS_ERR_INVALID_ARG;
1000842e:	2317      	movs	r3, #23
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL))
10008430:	2900      	cmp	r1, #0
10008432:	d006      	beq.n	10008442 <i2c_master_read_packet_wait+0x1a>
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->no_stop = false;
10008434:	2300      	movs	r3, #0
10008436:	7143      	strb	r3, [r0, #5]

	return _i2c_master_read_packet(module, packet);
10008438:	4b03      	ldr	r3, [pc, #12]	; (10008448 <i2c_master_read_packet_wait+0x20>)
1000843a:	4798      	blx	r3
1000843c:	0003      	movs	r3, r0
1000843e:	e000      	b.n	10008442 <i2c_master_read_packet_wait+0x1a>
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL))
		return STATUS_ERR_INVALID_ARG;
10008440:	2317      	movs	r3, #23
#endif

	module->no_stop = false;

	return _i2c_master_read_packet(module, packet);
}
10008442:	0018      	movs	r0, r3
10008444:	bd10      	pop	{r4, pc}
10008446:	46c0      	nop			; (mov r8, r8)
10008448:	100082a9 	.word	0x100082a9

1000844c <i2c_master_write_packet_wait>:
 * \retval STATUS_BUSY                  If module has a pending request.
 */
enum status_code i2c_master_write_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
1000844c:	b510      	push	{r4, lr}
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if ((module == NULL) || (packet == NULL)) {
1000844e:	2800      	cmp	r0, #0
10008450:	d008      	beq.n	10008464 <i2c_master_write_packet_wait+0x18>
		return STATUS_ERR_INVALID_ARG;
10008452:	2317      	movs	r3, #23
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if ((module == NULL) || (packet == NULL)) {
10008454:	2900      	cmp	r1, #0
10008456:	d006      	beq.n	10008466 <i2c_master_write_packet_wait+0x1a>
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->no_stop = false;
10008458:	2300      	movs	r3, #0
1000845a:	7143      	strb	r3, [r0, #5]

	return _i2c_master_write_packet(module, packet);
1000845c:	4b03      	ldr	r3, [pc, #12]	; (1000846c <i2c_master_write_packet_wait+0x20>)
1000845e:	4798      	blx	r3
10008460:	0003      	movs	r3, r0
10008462:	e000      	b.n	10008466 <i2c_master_write_packet_wait+0x1a>
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if ((module == NULL) || (packet == NULL)) {
		return STATUS_ERR_INVALID_ARG;
10008464:	2317      	movs	r3, #23
#endif

	module->no_stop = false;

	return _i2c_master_write_packet(module, packet);
}
10008466:	0018      	movs	r0, r3
10008468:	bd10      	pop	{r4, pc}
1000846a:	46c0      	nop			; (mov r8, r8)
1000846c:	10008325 	.word	0x10008325

10008470 <i2c_master_write_packet_wait_no_stop>:
 * \retval STATUS_BUSY                  If module has a pending request.
 */
enum status_code i2c_master_write_packet_wait_no_stop(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
10008470:	b510      	push	{r4, lr}
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL)) {
10008472:	2800      	cmp	r0, #0
10008474:	d008      	beq.n	10008488 <i2c_master_write_packet_wait_no_stop+0x18>
		return STATUS_ERR_INVALID_ARG;
10008476:	2317      	movs	r3, #23
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL)) {
10008478:	2900      	cmp	r1, #0
1000847a:	d006      	beq.n	1000848a <i2c_master_write_packet_wait_no_stop+0x1a>
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->no_stop = true;
1000847c:	3b16      	subs	r3, #22
1000847e:	7143      	strb	r3, [r0, #5]

	return _i2c_master_write_packet(module, packet);
10008480:	4b03      	ldr	r3, [pc, #12]	; (10008490 <i2c_master_write_packet_wait_no_stop+0x20>)
10008482:	4798      	blx	r3
10008484:	0003      	movs	r3, r0
10008486:	e000      	b.n	1000848a <i2c_master_write_packet_wait_no_stop+0x1a>
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL)) {
		return STATUS_ERR_INVALID_ARG;
10008488:	2317      	movs	r3, #23
#endif

	module->no_stop = true;

	return _i2c_master_write_packet(module, packet);
}
1000848a:	0018      	movs	r0, r3
1000848c:	bd10      	pop	{r4, pc}
1000848e:	46c0      	nop			; (mov r8, r8)
10008490:	10008325 	.word	0x10008325

10008494 <set_int_enable>:
 *  interrupt is used.
 *  @param[in]  enable      1 to enable interrupt.
 *  @return     0 if successful.
 */
static int set_int_enable(unsigned char enable)
{
10008494:	b510      	push	{r4, lr}
10008496:	b082      	sub	sp, #8
    unsigned char tmp;

    if (st.chip_cfg.dmp_on) {
10008498:	2324      	movs	r3, #36	; 0x24
1000849a:	4a25      	ldr	r2, [pc, #148]	; (10008530 <set_int_enable+0x9c>)
1000849c:	5cd3      	ldrb	r3, [r2, r3]
1000849e:	2b00      	cmp	r3, #0
100084a0:	d019      	beq.n	100084d6 <set_int_enable+0x42>
        if (enable)
100084a2:	2800      	cmp	r0, #0
100084a4:	d003      	beq.n	100084ae <set_int_enable+0x1a>
            tmp = BIT_DMP_INT_EN;
100084a6:	2202      	movs	r2, #2
100084a8:	466b      	mov	r3, sp
100084aa:	71da      	strb	r2, [r3, #7]
100084ac:	e002      	b.n	100084b4 <set_int_enable+0x20>
        else
            tmp = 0x00;
100084ae:	2200      	movs	r2, #0
100084b0:	466b      	mov	r3, sp
100084b2:	71da      	strb	r2, [r3, #7]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
100084b4:	4b1e      	ldr	r3, [pc, #120]	; (10008530 <set_int_enable+0x9c>)
100084b6:	681a      	ldr	r2, [r3, #0]
100084b8:	7c51      	ldrb	r1, [r2, #17]
100084ba:	685b      	ldr	r3, [r3, #4]
100084bc:	7818      	ldrb	r0, [r3, #0]
100084be:	466b      	mov	r3, sp
100084c0:	3307      	adds	r3, #7
100084c2:	2201      	movs	r2, #1
100084c4:	4c1b      	ldr	r4, [pc, #108]	; (10008534 <set_int_enable+0xa0>)
100084c6:	47a0      	blx	r4
100084c8:	2800      	cmp	r0, #0
100084ca:	d127      	bne.n	1000851c <set_int_enable+0x88>
            return -1;
        st.chip_cfg.int_enable = tmp;
100084cc:	466b      	mov	r3, sp
100084ce:	79da      	ldrb	r2, [r3, #7]
100084d0:	4b17      	ldr	r3, [pc, #92]	; (10008530 <set_int_enable+0x9c>)
100084d2:	745a      	strb	r2, [r3, #17]
100084d4:	e02a      	b.n	1000852c <set_int_enable+0x98>
    } else {
        if (!st.chip_cfg.sensors)
100084d6:	4b16      	ldr	r3, [pc, #88]	; (10008530 <set_int_enable+0x9c>)
100084d8:	7a9b      	ldrb	r3, [r3, #10]
100084da:	2b00      	cmp	r3, #0
100084dc:	d021      	beq.n	10008522 <set_int_enable+0x8e>
            return -1;
        if (enable && st.chip_cfg.int_enable)
100084de:	2800      	cmp	r0, #0
100084e0:	d008      	beq.n	100084f4 <set_int_enable+0x60>
100084e2:	4b13      	ldr	r3, [pc, #76]	; (10008530 <set_int_enable+0x9c>)
100084e4:	7c5b      	ldrb	r3, [r3, #17]
            return 0;
100084e6:	2000      	movs	r0, #0
            return -1;
        st.chip_cfg.int_enable = tmp;
    } else {
        if (!st.chip_cfg.sensors)
            return -1;
        if (enable && st.chip_cfg.int_enable)
100084e8:	2b00      	cmp	r3, #0
100084ea:	d11f      	bne.n	1000852c <set_int_enable+0x98>
            return 0;
        if (enable)
            tmp = BIT_DATA_RDY_EN;
100084ec:	2201      	movs	r2, #1
100084ee:	466b      	mov	r3, sp
100084f0:	71da      	strb	r2, [r3, #7]
100084f2:	e002      	b.n	100084fa <set_int_enable+0x66>
        else
            tmp = 0x00;
100084f4:	2200      	movs	r2, #0
100084f6:	466b      	mov	r3, sp
100084f8:	71da      	strb	r2, [r3, #7]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
100084fa:	4b0d      	ldr	r3, [pc, #52]	; (10008530 <set_int_enable+0x9c>)
100084fc:	681a      	ldr	r2, [r3, #0]
100084fe:	7c51      	ldrb	r1, [r2, #17]
10008500:	685b      	ldr	r3, [r3, #4]
10008502:	7818      	ldrb	r0, [r3, #0]
10008504:	466b      	mov	r3, sp
10008506:	3307      	adds	r3, #7
10008508:	2201      	movs	r2, #1
1000850a:	4c0a      	ldr	r4, [pc, #40]	; (10008534 <set_int_enable+0xa0>)
1000850c:	47a0      	blx	r4
1000850e:	2800      	cmp	r0, #0
10008510:	d10a      	bne.n	10008528 <set_int_enable+0x94>
            return -1;
        st.chip_cfg.int_enable = tmp;
10008512:	466b      	mov	r3, sp
10008514:	79da      	ldrb	r2, [r3, #7]
10008516:	4b06      	ldr	r3, [pc, #24]	; (10008530 <set_int_enable+0x9c>)
10008518:	745a      	strb	r2, [r3, #17]
1000851a:	e007      	b.n	1000852c <set_int_enable+0x98>
        if (enable)
            tmp = BIT_DMP_INT_EN;
        else
            tmp = 0x00;
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
            return -1;
1000851c:	2001      	movs	r0, #1
1000851e:	4240      	negs	r0, r0
10008520:	e004      	b.n	1000852c <set_int_enable+0x98>
        st.chip_cfg.int_enable = tmp;
    } else {
        if (!st.chip_cfg.sensors)
            return -1;
10008522:	2001      	movs	r0, #1
10008524:	4240      	negs	r0, r0
10008526:	e001      	b.n	1000852c <set_int_enable+0x98>
        if (enable)
            tmp = BIT_DATA_RDY_EN;
        else
            tmp = 0x00;
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
            return -1;
10008528:	2001      	movs	r0, #1
1000852a:	4240      	negs	r0, r0
        st.chip_cfg.int_enable = tmp;
    }
    return 0;
}
1000852c:	b002      	add	sp, #8
1000852e:	bd10      	pop	{r4, pc}
10008530:	1001834c 	.word	0x1001834c
10008534:	1000aa19 	.word	0x1000aa19

10008538 <mpu_get_temperature>:
 *  @param[out] data        Data in q16 format.
 *  @param[out] timestamp   Timestamp in milliseconds. Null if not needed.
 *  @return     0 if successful.
 */
int mpu_get_temperature(long *data, unsigned long *timestamp)
{
10008538:	b5f0      	push	{r4, r5, r6, r7, lr}
1000853a:	b085      	sub	sp, #20
1000853c:	0007      	movs	r7, r0
1000853e:	000e      	movs	r6, r1
    unsigned char tmp[2];
    short raw;

    if (!(st.chip_cfg.sensors))
10008540:	4b21      	ldr	r3, [pc, #132]	; (100085c8 <mpu_get_temperature+0x90>)
10008542:	7a9b      	ldrb	r3, [r3, #10]
10008544:	2b00      	cmp	r3, #0
10008546:	d035      	beq.n	100085b4 <mpu_get_temperature+0x7c>
        return -1;

    if (i2c_read(st.hw->addr, st.reg->temp, 2, tmp))
10008548:	4b1f      	ldr	r3, [pc, #124]	; (100085c8 <mpu_get_temperature+0x90>)
1000854a:	681a      	ldr	r2, [r3, #0]
1000854c:	7c11      	ldrb	r1, [r2, #16]
1000854e:	685b      	ldr	r3, [r3, #4]
10008550:	7818      	ldrb	r0, [r3, #0]
10008552:	ab03      	add	r3, sp, #12
10008554:	2202      	movs	r2, #2
10008556:	4c1d      	ldr	r4, [pc, #116]	; (100085cc <mpu_get_temperature+0x94>)
10008558:	47a0      	blx	r4
1000855a:	9001      	str	r0, [sp, #4]
1000855c:	2800      	cmp	r0, #0
1000855e:	d12d      	bne.n	100085bc <mpu_get_temperature+0x84>
        return -1;
    raw = (tmp[0] << 8) | tmp[1];
10008560:	ab03      	add	r3, sp, #12
10008562:	781c      	ldrb	r4, [r3, #0]
10008564:	0224      	lsls	r4, r4, #8
10008566:	785b      	ldrb	r3, [r3, #1]
10008568:	431c      	orrs	r4, r3
1000856a:	b224      	sxth	r4, r4
    if (timestamp)
1000856c:	2e00      	cmp	r6, #0
1000856e:	d002      	beq.n	10008576 <mpu_get_temperature+0x3e>
        get_ms(timestamp);
10008570:	0030      	movs	r0, r6
10008572:	4b17      	ldr	r3, [pc, #92]	; (100085d0 <mpu_get_temperature+0x98>)
10008574:	4798      	blx	r3

    data[0] = (long)((35 + ((raw - (float)st.hw->temp_offset) / st.hw->temp_sens)) * 65536L);
10008576:	4b14      	ldr	r3, [pc, #80]	; (100085c8 <mpu_get_temperature+0x90>)
10008578:	685d      	ldr	r5, [r3, #4]
1000857a:	4e16      	ldr	r6, [pc, #88]	; (100085d4 <mpu_get_temperature+0x9c>)
1000857c:	0020      	movs	r0, r4
1000857e:	47b0      	blx	r6
10008580:	1c04      	adds	r4, r0, #0
10008582:	2308      	movs	r3, #8
10008584:	5ee8      	ldrsh	r0, [r5, r3]
10008586:	47b0      	blx	r6
10008588:	1c01      	adds	r1, r0, #0
1000858a:	1c20      	adds	r0, r4, #0
1000858c:	4b12      	ldr	r3, [pc, #72]	; (100085d8 <mpu_get_temperature+0xa0>)
1000858e:	4798      	blx	r3
10008590:	1c04      	adds	r4, r0, #0
10008592:	88e8      	ldrh	r0, [r5, #6]
10008594:	47b0      	blx	r6
10008596:	1c01      	adds	r1, r0, #0
10008598:	1c20      	adds	r0, r4, #0
1000859a:	4b10      	ldr	r3, [pc, #64]	; (100085dc <mpu_get_temperature+0xa4>)
1000859c:	4798      	blx	r3
1000859e:	4910      	ldr	r1, [pc, #64]	; (100085e0 <mpu_get_temperature+0xa8>)
100085a0:	4b10      	ldr	r3, [pc, #64]	; (100085e4 <mpu_get_temperature+0xac>)
100085a2:	4798      	blx	r3
100085a4:	218f      	movs	r1, #143	; 0x8f
100085a6:	05c9      	lsls	r1, r1, #23
100085a8:	4b0f      	ldr	r3, [pc, #60]	; (100085e8 <mpu_get_temperature+0xb0>)
100085aa:	4798      	blx	r3
100085ac:	4b0f      	ldr	r3, [pc, #60]	; (100085ec <mpu_get_temperature+0xb4>)
100085ae:	4798      	blx	r3
100085b0:	6038      	str	r0, [r7, #0]
    return 0;
100085b2:	e006      	b.n	100085c2 <mpu_get_temperature+0x8a>
{
    unsigned char tmp[2];
    short raw;

    if (!(st.chip_cfg.sensors))
        return -1;
100085b4:	2301      	movs	r3, #1
100085b6:	425b      	negs	r3, r3
100085b8:	9301      	str	r3, [sp, #4]
100085ba:	e002      	b.n	100085c2 <mpu_get_temperature+0x8a>

    if (i2c_read(st.hw->addr, st.reg->temp, 2, tmp))
        return -1;
100085bc:	2301      	movs	r3, #1
100085be:	425b      	negs	r3, r3
100085c0:	9301      	str	r3, [sp, #4]
    if (timestamp)
        get_ms(timestamp);

    data[0] = (long)((35 + ((raw - (float)st.hw->temp_offset) / st.hw->temp_sens)) * 65536L);
    return 0;
}
100085c2:	9801      	ldr	r0, [sp, #4]
100085c4:	b005      	add	sp, #20
100085c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
100085c8:	1001834c 	.word	0x1001834c
100085cc:	1000aa75 	.word	0x1000aa75
100085d0:	1000b57d 	.word	0x1000b57d
100085d4:	100140a9 	.word	0x100140a9
100085d8:	10013d59 	.word	0x10013d59
100085dc:	1001379d 	.word	0x1001379d
100085e0:	420c0000 	.word	0x420c0000
100085e4:	100134b1 	.word	0x100134b1
100085e8:	10013b31 	.word	0x10013b31
100085ec:	10014065 	.word	0x10014065

100085f0 <mpu_reset_fifo>:
/**
 *  @brief  Reset FIFO read/write pointers.
 *  @return 0 if successful.
 */
int mpu_reset_fifo(void)
{
100085f0:	b510      	push	{r4, lr}
100085f2:	b082      	sub	sp, #8
    unsigned char data;

    if (!(st.chip_cfg.sensors))
100085f4:	4b79      	ldr	r3, [pc, #484]	; (100087dc <mpu_reset_fifo+0x1ec>)
100085f6:	7a9b      	ldrb	r3, [r3, #10]
100085f8:	2b00      	cmp	r3, #0
100085fa:	d100      	bne.n	100085fe <mpu_reset_fifo+0xe>
100085fc:	e0ce      	b.n	1000879c <mpu_reset_fifo+0x1ac>
        return -1;

    data = 0;
100085fe:	466b      	mov	r3, sp
10008600:	3307      	adds	r3, #7
10008602:	2200      	movs	r2, #0
10008604:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
10008606:	4a75      	ldr	r2, [pc, #468]	; (100087dc <mpu_reset_fifo+0x1ec>)
10008608:	6811      	ldr	r1, [r2, #0]
1000860a:	7c49      	ldrb	r1, [r1, #17]
1000860c:	6852      	ldr	r2, [r2, #4]
1000860e:	7810      	ldrb	r0, [r2, #0]
10008610:	2201      	movs	r2, #1
10008612:	4c73      	ldr	r4, [pc, #460]	; (100087e0 <mpu_reset_fifo+0x1f0>)
10008614:	47a0      	blx	r4
10008616:	2800      	cmp	r0, #0
10008618:	d000      	beq.n	1000861c <mpu_reset_fifo+0x2c>
1000861a:	e0c2      	b.n	100087a2 <mpu_reset_fifo+0x1b2>
        return -1;
    if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
1000861c:	4b6f      	ldr	r3, [pc, #444]	; (100087dc <mpu_reset_fifo+0x1ec>)
1000861e:	681a      	ldr	r2, [r3, #0]
10008620:	7951      	ldrb	r1, [r2, #5]
10008622:	685b      	ldr	r3, [r3, #4]
10008624:	7818      	ldrb	r0, [r3, #0]
10008626:	466b      	mov	r3, sp
10008628:	3307      	adds	r3, #7
1000862a:	2201      	movs	r2, #1
1000862c:	4c6c      	ldr	r4, [pc, #432]	; (100087e0 <mpu_reset_fifo+0x1f0>)
1000862e:	47a0      	blx	r4
10008630:	2800      	cmp	r0, #0
10008632:	d000      	beq.n	10008636 <mpu_reset_fifo+0x46>
10008634:	e0b8      	b.n	100087a8 <mpu_reset_fifo+0x1b8>
        return -1;
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
10008636:	4b69      	ldr	r3, [pc, #420]	; (100087dc <mpu_reset_fifo+0x1ec>)
10008638:	681a      	ldr	r2, [r3, #0]
1000863a:	7911      	ldrb	r1, [r2, #4]
1000863c:	685b      	ldr	r3, [r3, #4]
1000863e:	7818      	ldrb	r0, [r3, #0]
10008640:	466b      	mov	r3, sp
10008642:	3307      	adds	r3, #7
10008644:	2201      	movs	r2, #1
10008646:	4c66      	ldr	r4, [pc, #408]	; (100087e0 <mpu_reset_fifo+0x1f0>)
10008648:	47a0      	blx	r4
1000864a:	2800      	cmp	r0, #0
1000864c:	d000      	beq.n	10008650 <mpu_reset_fifo+0x60>
1000864e:	e0ae      	b.n	100087ae <mpu_reset_fifo+0x1be>
        return -1;

    if (st.chip_cfg.dmp_on) {
10008650:	2324      	movs	r3, #36	; 0x24
10008652:	4a62      	ldr	r2, [pc, #392]	; (100087dc <mpu_reset_fifo+0x1ec>)
10008654:	5cd3      	ldrb	r3, [r2, r3]
10008656:	2b00      	cmp	r3, #0
10008658:	d04f      	beq.n	100086fa <mpu_reset_fifo+0x10a>
        data = BIT_FIFO_RST | BIT_DMP_RST;
1000865a:	466b      	mov	r3, sp
1000865c:	3307      	adds	r3, #7
1000865e:	220c      	movs	r2, #12
10008660:	701a      	strb	r2, [r3, #0]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
10008662:	4a5e      	ldr	r2, [pc, #376]	; (100087dc <mpu_reset_fifo+0x1ec>)
10008664:	6811      	ldr	r1, [r2, #0]
10008666:	7909      	ldrb	r1, [r1, #4]
10008668:	6852      	ldr	r2, [r2, #4]
1000866a:	7810      	ldrb	r0, [r2, #0]
1000866c:	2201      	movs	r2, #1
1000866e:	4c5c      	ldr	r4, [pc, #368]	; (100087e0 <mpu_reset_fifo+0x1f0>)
10008670:	47a0      	blx	r4
10008672:	2800      	cmp	r0, #0
10008674:	d000      	beq.n	10008678 <mpu_reset_fifo+0x88>
10008676:	e09d      	b.n	100087b4 <mpu_reset_fifo+0x1c4>
            return -1;
        delay_ms(50);
10008678:	3032      	adds	r0, #50	; 0x32
1000867a:	4b5a      	ldr	r3, [pc, #360]	; (100087e4 <mpu_reset_fifo+0x1f4>)
1000867c:	4798      	blx	r3
        data = BIT_DMP_EN | BIT_FIFO_EN;
1000867e:	22c0      	movs	r2, #192	; 0xc0
10008680:	466b      	mov	r3, sp
10008682:	71da      	strb	r2, [r3, #7]
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
10008684:	4b55      	ldr	r3, [pc, #340]	; (100087dc <mpu_reset_fifo+0x1ec>)
10008686:	7a9b      	ldrb	r3, [r3, #10]
10008688:	07db      	lsls	r3, r3, #31
1000868a:	d502      	bpl.n	10008692 <mpu_reset_fifo+0xa2>
            data |= BIT_AUX_IF_EN;
1000868c:	3220      	adds	r2, #32
1000868e:	466b      	mov	r3, sp
10008690:	71da      	strb	r2, [r3, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
10008692:	4b52      	ldr	r3, [pc, #328]	; (100087dc <mpu_reset_fifo+0x1ec>)
10008694:	681a      	ldr	r2, [r3, #0]
10008696:	7911      	ldrb	r1, [r2, #4]
10008698:	685b      	ldr	r3, [r3, #4]
1000869a:	7818      	ldrb	r0, [r3, #0]
1000869c:	466b      	mov	r3, sp
1000869e:	3307      	adds	r3, #7
100086a0:	2201      	movs	r2, #1
100086a2:	4c4f      	ldr	r4, [pc, #316]	; (100087e0 <mpu_reset_fifo+0x1f0>)
100086a4:	47a0      	blx	r4
100086a6:	2800      	cmp	r0, #0
100086a8:	d000      	beq.n	100086ac <mpu_reset_fifo+0xbc>
100086aa:	e086      	b.n	100087ba <mpu_reset_fifo+0x1ca>
            return -1;
        if (st.chip_cfg.int_enable)
100086ac:	4b4b      	ldr	r3, [pc, #300]	; (100087dc <mpu_reset_fifo+0x1ec>)
100086ae:	7c5b      	ldrb	r3, [r3, #17]
100086b0:	2b00      	cmp	r3, #0
100086b2:	d003      	beq.n	100086bc <mpu_reset_fifo+0xcc>
            data = BIT_DMP_INT_EN;
100086b4:	2202      	movs	r2, #2
100086b6:	466b      	mov	r3, sp
100086b8:	71da      	strb	r2, [r3, #7]
100086ba:	e002      	b.n	100086c2 <mpu_reset_fifo+0xd2>
        else
            data = 0;
100086bc:	2200      	movs	r2, #0
100086be:	466b      	mov	r3, sp
100086c0:	71da      	strb	r2, [r3, #7]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
100086c2:	4b46      	ldr	r3, [pc, #280]	; (100087dc <mpu_reset_fifo+0x1ec>)
100086c4:	681a      	ldr	r2, [r3, #0]
100086c6:	7c51      	ldrb	r1, [r2, #17]
100086c8:	685b      	ldr	r3, [r3, #4]
100086ca:	7818      	ldrb	r0, [r3, #0]
100086cc:	466b      	mov	r3, sp
100086ce:	3307      	adds	r3, #7
100086d0:	2201      	movs	r2, #1
100086d2:	4c43      	ldr	r4, [pc, #268]	; (100087e0 <mpu_reset_fifo+0x1f0>)
100086d4:	47a0      	blx	r4
100086d6:	2800      	cmp	r0, #0
100086d8:	d172      	bne.n	100087c0 <mpu_reset_fifo+0x1d0>
            return -1;
        data = 0;
100086da:	466b      	mov	r3, sp
100086dc:	3307      	adds	r3, #7
100086de:	2200      	movs	r2, #0
100086e0:	701a      	strb	r2, [r3, #0]
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
100086e2:	4a3e      	ldr	r2, [pc, #248]	; (100087dc <mpu_reset_fifo+0x1ec>)
100086e4:	6811      	ldr	r1, [r2, #0]
100086e6:	7949      	ldrb	r1, [r1, #5]
100086e8:	6852      	ldr	r2, [r2, #4]
100086ea:	7810      	ldrb	r0, [r2, #0]
100086ec:	2201      	movs	r2, #1
100086ee:	4c3c      	ldr	r4, [pc, #240]	; (100087e0 <mpu_reset_fifo+0x1f0>)
100086f0:	47a0      	blx	r4
100086f2:	1e43      	subs	r3, r0, #1
100086f4:	4198      	sbcs	r0, r3
100086f6:	4240      	negs	r0, r0
100086f8:	e06d      	b.n	100087d6 <mpu_reset_fifo+0x1e6>
            return -1;
    } else {
        data = BIT_FIFO_RST;
100086fa:	466b      	mov	r3, sp
100086fc:	3307      	adds	r3, #7
100086fe:	2204      	movs	r2, #4
10008700:	701a      	strb	r2, [r3, #0]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
10008702:	4a36      	ldr	r2, [pc, #216]	; (100087dc <mpu_reset_fifo+0x1ec>)
10008704:	6811      	ldr	r1, [r2, #0]
10008706:	7909      	ldrb	r1, [r1, #4]
10008708:	6852      	ldr	r2, [r2, #4]
1000870a:	7810      	ldrb	r0, [r2, #0]
1000870c:	2201      	movs	r2, #1
1000870e:	4c34      	ldr	r4, [pc, #208]	; (100087e0 <mpu_reset_fifo+0x1f0>)
10008710:	47a0      	blx	r4
10008712:	2800      	cmp	r0, #0
10008714:	d157      	bne.n	100087c6 <mpu_reset_fifo+0x1d6>
            return -1;
        if (st.chip_cfg.bypass_mode || !(st.chip_cfg.sensors & INV_XYZ_COMPASS))
10008716:	4b31      	ldr	r3, [pc, #196]	; (100087dc <mpu_reset_fifo+0x1ec>)
10008718:	7c9b      	ldrb	r3, [r3, #18]
1000871a:	2b00      	cmp	r3, #0
1000871c:	d103      	bne.n	10008726 <mpu_reset_fifo+0x136>
1000871e:	4b2f      	ldr	r3, [pc, #188]	; (100087dc <mpu_reset_fifo+0x1ec>)
10008720:	7a9b      	ldrb	r3, [r3, #10]
10008722:	07db      	lsls	r3, r3, #31
10008724:	d403      	bmi.n	1000872e <mpu_reset_fifo+0x13e>
            data = BIT_FIFO_EN;
10008726:	2240      	movs	r2, #64	; 0x40
10008728:	466b      	mov	r3, sp
1000872a:	71da      	strb	r2, [r3, #7]
1000872c:	e002      	b.n	10008734 <mpu_reset_fifo+0x144>
        else
            data = BIT_FIFO_EN | BIT_AUX_IF_EN;
1000872e:	2260      	movs	r2, #96	; 0x60
10008730:	466b      	mov	r3, sp
10008732:	71da      	strb	r2, [r3, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
10008734:	4b29      	ldr	r3, [pc, #164]	; (100087dc <mpu_reset_fifo+0x1ec>)
10008736:	681a      	ldr	r2, [r3, #0]
10008738:	7911      	ldrb	r1, [r2, #4]
1000873a:	685b      	ldr	r3, [r3, #4]
1000873c:	7818      	ldrb	r0, [r3, #0]
1000873e:	466b      	mov	r3, sp
10008740:	3307      	adds	r3, #7
10008742:	2201      	movs	r2, #1
10008744:	4c26      	ldr	r4, [pc, #152]	; (100087e0 <mpu_reset_fifo+0x1f0>)
10008746:	47a0      	blx	r4
10008748:	2800      	cmp	r0, #0
1000874a:	d13f      	bne.n	100087cc <mpu_reset_fifo+0x1dc>
            return -1;
        delay_ms(50);
1000874c:	3032      	adds	r0, #50	; 0x32
1000874e:	4b25      	ldr	r3, [pc, #148]	; (100087e4 <mpu_reset_fifo+0x1f4>)
10008750:	4798      	blx	r3
        if (st.chip_cfg.int_enable)
10008752:	4b22      	ldr	r3, [pc, #136]	; (100087dc <mpu_reset_fifo+0x1ec>)
10008754:	7c5b      	ldrb	r3, [r3, #17]
10008756:	2b00      	cmp	r3, #0
10008758:	d003      	beq.n	10008762 <mpu_reset_fifo+0x172>
            data = BIT_DATA_RDY_EN;
1000875a:	2201      	movs	r2, #1
1000875c:	466b      	mov	r3, sp
1000875e:	71da      	strb	r2, [r3, #7]
10008760:	e002      	b.n	10008768 <mpu_reset_fifo+0x178>
        else
            data = 0;
10008762:	2200      	movs	r2, #0
10008764:	466b      	mov	r3, sp
10008766:	71da      	strb	r2, [r3, #7]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
10008768:	4b1c      	ldr	r3, [pc, #112]	; (100087dc <mpu_reset_fifo+0x1ec>)
1000876a:	681a      	ldr	r2, [r3, #0]
1000876c:	7c51      	ldrb	r1, [r2, #17]
1000876e:	685b      	ldr	r3, [r3, #4]
10008770:	7818      	ldrb	r0, [r3, #0]
10008772:	466b      	mov	r3, sp
10008774:	3307      	adds	r3, #7
10008776:	2201      	movs	r2, #1
10008778:	4c19      	ldr	r4, [pc, #100]	; (100087e0 <mpu_reset_fifo+0x1f0>)
1000877a:	47a0      	blx	r4
1000877c:	2800      	cmp	r0, #0
1000877e:	d128      	bne.n	100087d2 <mpu_reset_fifo+0x1e2>
            return -1;
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &st.chip_cfg.fifo_enable))
10008780:	4a16      	ldr	r2, [pc, #88]	; (100087dc <mpu_reset_fifo+0x1ec>)
10008782:	0013      	movs	r3, r2
10008784:	3310      	adds	r3, #16
10008786:	6811      	ldr	r1, [r2, #0]
10008788:	7949      	ldrb	r1, [r1, #5]
1000878a:	6852      	ldr	r2, [r2, #4]
1000878c:	7810      	ldrb	r0, [r2, #0]
1000878e:	2201      	movs	r2, #1
10008790:	4c13      	ldr	r4, [pc, #76]	; (100087e0 <mpu_reset_fifo+0x1f0>)
10008792:	47a0      	blx	r4
10008794:	1e43      	subs	r3, r0, #1
10008796:	4198      	sbcs	r0, r3
10008798:	4240      	negs	r0, r0
1000879a:	e01c      	b.n	100087d6 <mpu_reset_fifo+0x1e6>
int mpu_reset_fifo(void)
{
    unsigned char data;

    if (!(st.chip_cfg.sensors))
        return -1;
1000879c:	2001      	movs	r0, #1
1000879e:	4240      	negs	r0, r0
100087a0:	e019      	b.n	100087d6 <mpu_reset_fifo+0x1e6>

    data = 0;
    if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
        return -1;
100087a2:	2001      	movs	r0, #1
100087a4:	4240      	negs	r0, r0
100087a6:	e016      	b.n	100087d6 <mpu_reset_fifo+0x1e6>
    if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
        return -1;
100087a8:	2001      	movs	r0, #1
100087aa:	4240      	negs	r0, r0
100087ac:	e013      	b.n	100087d6 <mpu_reset_fifo+0x1e6>
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
        return -1;
100087ae:	2001      	movs	r0, #1
100087b0:	4240      	negs	r0, r0
100087b2:	e010      	b.n	100087d6 <mpu_reset_fifo+0x1e6>

    if (st.chip_cfg.dmp_on) {
        data = BIT_FIFO_RST | BIT_DMP_RST;
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
            return -1;
100087b4:	2001      	movs	r0, #1
100087b6:	4240      	negs	r0, r0
100087b8:	e00d      	b.n	100087d6 <mpu_reset_fifo+0x1e6>
        delay_ms(50);
        data = BIT_DMP_EN | BIT_FIFO_EN;
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
            data |= BIT_AUX_IF_EN;
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
            return -1;
100087ba:	2001      	movs	r0, #1
100087bc:	4240      	negs	r0, r0
100087be:	e00a      	b.n	100087d6 <mpu_reset_fifo+0x1e6>
        if (st.chip_cfg.int_enable)
            data = BIT_DMP_INT_EN;
        else
            data = 0;
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
            return -1;
100087c0:	2001      	movs	r0, #1
100087c2:	4240      	negs	r0, r0
100087c4:	e007      	b.n	100087d6 <mpu_reset_fifo+0x1e6>
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
            return -1;
    } else {
        data = BIT_FIFO_RST;
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
            return -1;
100087c6:	2001      	movs	r0, #1
100087c8:	4240      	negs	r0, r0
100087ca:	e004      	b.n	100087d6 <mpu_reset_fifo+0x1e6>
        if (st.chip_cfg.bypass_mode || !(st.chip_cfg.sensors & INV_XYZ_COMPASS))
            data = BIT_FIFO_EN;
        else
            data = BIT_FIFO_EN | BIT_AUX_IF_EN;
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
            return -1;
100087cc:	2001      	movs	r0, #1
100087ce:	4240      	negs	r0, r0
100087d0:	e001      	b.n	100087d6 <mpu_reset_fifo+0x1e6>
        if (st.chip_cfg.int_enable)
            data = BIT_DATA_RDY_EN;
        else
            data = 0;
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
            return -1;
100087d2:	2001      	movs	r0, #1
100087d4:	4240      	negs	r0, r0
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &st.chip_cfg.fifo_enable))
            return -1;
    }
    return 0;
}
100087d6:	b002      	add	sp, #8
100087d8:	bd10      	pop	{r4, pc}
100087da:	46c0      	nop			; (mov r8, r8)
100087dc:	1001834c 	.word	0x1001834c
100087e0:	1000aa19 	.word	0x1000aa19
100087e4:	10008129 	.word	0x10008129

100087e8 <mpu_set_gyro_fsr>:
 *  @brief      Set the gyro full-scale range.
 *  @param[in]  fsr Desired full-scale range.
 *  @return     0 if successful.
 */
int mpu_set_gyro_fsr(unsigned short fsr)
{
100087e8:	b510      	push	{r4, lr}
100087ea:	b082      	sub	sp, #8
    unsigned char data;

    if (!(st.chip_cfg.sensors))
100087ec:	4b24      	ldr	r3, [pc, #144]	; (10008880 <mpu_set_gyro_fsr+0x98>)
100087ee:	7a9b      	ldrb	r3, [r3, #10]
100087f0:	2b00      	cmp	r3, #0
100087f2:	d03b      	beq.n	1000886c <mpu_set_gyro_fsr+0x84>
        return -1;

    switch (fsr) {
100087f4:	23fa      	movs	r3, #250	; 0xfa
100087f6:	005b      	lsls	r3, r3, #1
100087f8:	4298      	cmp	r0, r3
100087fa:	d010      	beq.n	1000881e <mpu_set_gyro_fsr+0x36>
100087fc:	d802      	bhi.n	10008804 <mpu_set_gyro_fsr+0x1c>
100087fe:	28fa      	cmp	r0, #250	; 0xfa
10008800:	d009      	beq.n	10008816 <mpu_set_gyro_fsr+0x2e>
10008802:	e036      	b.n	10008872 <mpu_set_gyro_fsr+0x8a>
10008804:	23fa      	movs	r3, #250	; 0xfa
10008806:	009b      	lsls	r3, r3, #2
10008808:	4298      	cmp	r0, r3
1000880a:	d00c      	beq.n	10008826 <mpu_set_gyro_fsr+0x3e>
1000880c:	23fa      	movs	r3, #250	; 0xfa
1000880e:	00db      	lsls	r3, r3, #3
10008810:	4298      	cmp	r0, r3
10008812:	d00c      	beq.n	1000882e <mpu_set_gyro_fsr+0x46>
10008814:	e02d      	b.n	10008872 <mpu_set_gyro_fsr+0x8a>
    case 250:
        data = INV_FSR_250DPS << 3;
10008816:	2200      	movs	r2, #0
10008818:	466b      	mov	r3, sp
1000881a:	71da      	strb	r2, [r3, #7]
        break;
1000881c:	e00a      	b.n	10008834 <mpu_set_gyro_fsr+0x4c>
    case 500:
        data = INV_FSR_500DPS << 3;
1000881e:	2208      	movs	r2, #8
10008820:	466b      	mov	r3, sp
10008822:	71da      	strb	r2, [r3, #7]
        break;
10008824:	e006      	b.n	10008834 <mpu_set_gyro_fsr+0x4c>
    case 1000:
        data = INV_FSR_1000DPS << 3;
10008826:	2210      	movs	r2, #16
10008828:	466b      	mov	r3, sp
1000882a:	71da      	strb	r2, [r3, #7]
        break;
1000882c:	e002      	b.n	10008834 <mpu_set_gyro_fsr+0x4c>
    case 2000:
        data = INV_FSR_2000DPS << 3;
1000882e:	2218      	movs	r2, #24
10008830:	466b      	mov	r3, sp
10008832:	71da      	strb	r2, [r3, #7]
        break;
    default:
        return -1;
    }

    if (st.chip_cfg.gyro_fsr == (data >> 3))
10008834:	466b      	mov	r3, sp
10008836:	3307      	adds	r3, #7
10008838:	781b      	ldrb	r3, [r3, #0]
1000883a:	4a11      	ldr	r2, [pc, #68]	; (10008880 <mpu_set_gyro_fsr+0x98>)
1000883c:	7a12      	ldrb	r2, [r2, #8]
1000883e:	08db      	lsrs	r3, r3, #3
        return 0;
10008840:	2000      	movs	r0, #0
        break;
    default:
        return -1;
    }

    if (st.chip_cfg.gyro_fsr == (data >> 3))
10008842:	429a      	cmp	r2, r3
10008844:	d01a      	beq.n	1000887c <mpu_set_gyro_fsr+0x94>
        return 0;
    if (i2c_write(st.hw->addr, st.reg->gyro_cfg, 1, &data))
10008846:	4b0e      	ldr	r3, [pc, #56]	; (10008880 <mpu_set_gyro_fsr+0x98>)
10008848:	681a      	ldr	r2, [r3, #0]
1000884a:	7991      	ldrb	r1, [r2, #6]
1000884c:	685b      	ldr	r3, [r3, #4]
1000884e:	7818      	ldrb	r0, [r3, #0]
10008850:	466b      	mov	r3, sp
10008852:	3307      	adds	r3, #7
10008854:	2201      	movs	r2, #1
10008856:	4c0b      	ldr	r4, [pc, #44]	; (10008884 <mpu_set_gyro_fsr+0x9c>)
10008858:	47a0      	blx	r4
1000885a:	2800      	cmp	r0, #0
1000885c:	d10c      	bne.n	10008878 <mpu_set_gyro_fsr+0x90>
        return -1;
    st.chip_cfg.gyro_fsr = data >> 3;
1000885e:	466b      	mov	r3, sp
10008860:	3307      	adds	r3, #7
10008862:	781b      	ldrb	r3, [r3, #0]
10008864:	08db      	lsrs	r3, r3, #3
10008866:	4a06      	ldr	r2, [pc, #24]	; (10008880 <mpu_set_gyro_fsr+0x98>)
10008868:	7213      	strb	r3, [r2, #8]
    return 0;
1000886a:	e007      	b.n	1000887c <mpu_set_gyro_fsr+0x94>
int mpu_set_gyro_fsr(unsigned short fsr)
{
    unsigned char data;

    if (!(st.chip_cfg.sensors))
        return -1;
1000886c:	2001      	movs	r0, #1
1000886e:	4240      	negs	r0, r0
10008870:	e004      	b.n	1000887c <mpu_set_gyro_fsr+0x94>
        break;
    case 2000:
        data = INV_FSR_2000DPS << 3;
        break;
    default:
        return -1;
10008872:	2001      	movs	r0, #1
10008874:	4240      	negs	r0, r0
10008876:	e001      	b.n	1000887c <mpu_set_gyro_fsr+0x94>
    }

    if (st.chip_cfg.gyro_fsr == (data >> 3))
        return 0;
    if (i2c_write(st.hw->addr, st.reg->gyro_cfg, 1, &data))
        return -1;
10008878:	2001      	movs	r0, #1
1000887a:	4240      	negs	r0, r0
    st.chip_cfg.gyro_fsr = data >> 3;
    return 0;
}
1000887c:	b002      	add	sp, #8
1000887e:	bd10      	pop	{r4, pc}
10008880:	1001834c 	.word	0x1001834c
10008884:	1000aa19 	.word	0x1000aa19

10008888 <mpu_get_accel_fsr>:
 *  @param[out] fsr Current full-scale range.
 *  @return     0 if successful.
 */
int mpu_get_accel_fsr(unsigned char *fsr)
{
    switch (st.chip_cfg.accel_fsr) {
10008888:	4b11      	ldr	r3, [pc, #68]	; (100088d0 <mpu_get_accel_fsr+0x48>)
1000888a:	7a5b      	ldrb	r3, [r3, #9]
1000888c:	2b01      	cmp	r3, #1
1000888e:	d009      	beq.n	100088a4 <mpu_get_accel_fsr+0x1c>
10008890:	2b00      	cmp	r3, #0
10008892:	d004      	beq.n	1000889e <mpu_get_accel_fsr+0x16>
10008894:	2b02      	cmp	r3, #2
10008896:	d008      	beq.n	100088aa <mpu_get_accel_fsr+0x22>
10008898:	2b03      	cmp	r3, #3
1000889a:	d009      	beq.n	100088b0 <mpu_get_accel_fsr+0x28>
1000889c:	e014      	b.n	100088c8 <mpu_get_accel_fsr+0x40>
    case INV_FSR_2G:
        fsr[0] = 2;
1000889e:	2302      	movs	r3, #2
100088a0:	7003      	strb	r3, [r0, #0]
        break;
100088a2:	e007      	b.n	100088b4 <mpu_get_accel_fsr+0x2c>
    case INV_FSR_4G:
        fsr[0] = 4;
100088a4:	2304      	movs	r3, #4
100088a6:	7003      	strb	r3, [r0, #0]
        break;
100088a8:	e004      	b.n	100088b4 <mpu_get_accel_fsr+0x2c>
    case INV_FSR_8G:
        fsr[0] = 8;
100088aa:	2308      	movs	r3, #8
100088ac:	7003      	strb	r3, [r0, #0]
        break;
100088ae:	e001      	b.n	100088b4 <mpu_get_accel_fsr+0x2c>
    case INV_FSR_16G:
        fsr[0] = 16;
100088b0:	2310      	movs	r3, #16
100088b2:	7003      	strb	r3, [r0, #0]
        break;
    default:
        return -1;
    }
    if (st.chip_cfg.accel_half)
100088b4:	4b06      	ldr	r3, [pc, #24]	; (100088d0 <mpu_get_accel_fsr+0x48>)
100088b6:	7cda      	ldrb	r2, [r3, #19]
        fsr[0] <<= 1;
    return 0;
100088b8:	2300      	movs	r3, #0
        fsr[0] = 16;
        break;
    default:
        return -1;
    }
    if (st.chip_cfg.accel_half)
100088ba:	2a00      	cmp	r2, #0
100088bc:	d006      	beq.n	100088cc <mpu_get_accel_fsr+0x44>
        fsr[0] <<= 1;
100088be:	7803      	ldrb	r3, [r0, #0]
100088c0:	005b      	lsls	r3, r3, #1
100088c2:	7003      	strb	r3, [r0, #0]
    return 0;
100088c4:	2300      	movs	r3, #0
100088c6:	e001      	b.n	100088cc <mpu_get_accel_fsr+0x44>
        break;
    case INV_FSR_16G:
        fsr[0] = 16;
        break;
    default:
        return -1;
100088c8:	2301      	movs	r3, #1
100088ca:	425b      	negs	r3, r3
    }
    if (st.chip_cfg.accel_half)
        fsr[0] <<= 1;
    return 0;
}
100088cc:	0018      	movs	r0, r3
100088ce:	4770      	bx	lr
100088d0:	1001834c 	.word	0x1001834c

100088d4 <mpu_set_accel_fsr>:
 *  @brief      Set the accel full-scale range.
 *  @param[in]  fsr Desired full-scale range.
 *  @return     0 if successful.
 */
int mpu_set_accel_fsr(unsigned char fsr)
{
100088d4:	b510      	push	{r4, lr}
100088d6:	b082      	sub	sp, #8
    unsigned char data;

    if (!(st.chip_cfg.sensors))
100088d8:	4b21      	ldr	r3, [pc, #132]	; (10008960 <mpu_set_accel_fsr+0x8c>)
100088da:	7a9b      	ldrb	r3, [r3, #10]
100088dc:	2b00      	cmp	r3, #0
100088de:	d035      	beq.n	1000894c <mpu_set_accel_fsr+0x78>
        return -1;

    switch (fsr) {
100088e0:	2804      	cmp	r0, #4
100088e2:	d00c      	beq.n	100088fe <mpu_set_accel_fsr+0x2a>
100088e4:	d802      	bhi.n	100088ec <mpu_set_accel_fsr+0x18>
100088e6:	2802      	cmp	r0, #2
100088e8:	d005      	beq.n	100088f6 <mpu_set_accel_fsr+0x22>
100088ea:	e032      	b.n	10008952 <mpu_set_accel_fsr+0x7e>
100088ec:	2808      	cmp	r0, #8
100088ee:	d00a      	beq.n	10008906 <mpu_set_accel_fsr+0x32>
100088f0:	2810      	cmp	r0, #16
100088f2:	d00c      	beq.n	1000890e <mpu_set_accel_fsr+0x3a>
100088f4:	e02d      	b.n	10008952 <mpu_set_accel_fsr+0x7e>
    case 2:
        data = INV_FSR_2G << 3;
100088f6:	2200      	movs	r2, #0
100088f8:	466b      	mov	r3, sp
100088fa:	71da      	strb	r2, [r3, #7]
        break;
100088fc:	e00a      	b.n	10008914 <mpu_set_accel_fsr+0x40>
    case 4:
        data = INV_FSR_4G << 3;
100088fe:	2208      	movs	r2, #8
10008900:	466b      	mov	r3, sp
10008902:	71da      	strb	r2, [r3, #7]
        break;
10008904:	e006      	b.n	10008914 <mpu_set_accel_fsr+0x40>
    case 8:
        data = INV_FSR_8G << 3;
10008906:	2210      	movs	r2, #16
10008908:	466b      	mov	r3, sp
1000890a:	71da      	strb	r2, [r3, #7]
        break;
1000890c:	e002      	b.n	10008914 <mpu_set_accel_fsr+0x40>
    case 16:
        data = INV_FSR_16G << 3;
1000890e:	2218      	movs	r2, #24
10008910:	466b      	mov	r3, sp
10008912:	71da      	strb	r2, [r3, #7]
        break;
    default:
        return -1;
    }

    if (st.chip_cfg.accel_fsr == (data >> 3))
10008914:	466b      	mov	r3, sp
10008916:	3307      	adds	r3, #7
10008918:	781b      	ldrb	r3, [r3, #0]
1000891a:	4a11      	ldr	r2, [pc, #68]	; (10008960 <mpu_set_accel_fsr+0x8c>)
1000891c:	7a52      	ldrb	r2, [r2, #9]
1000891e:	08db      	lsrs	r3, r3, #3
        return 0;
10008920:	2000      	movs	r0, #0
        break;
    default:
        return -1;
    }

    if (st.chip_cfg.accel_fsr == (data >> 3))
10008922:	429a      	cmp	r2, r3
10008924:	d01a      	beq.n	1000895c <mpu_set_accel_fsr+0x88>
        return 0;
    if (i2c_write(st.hw->addr, st.reg->accel_cfg, 1, &data))
10008926:	4b0e      	ldr	r3, [pc, #56]	; (10008960 <mpu_set_accel_fsr+0x8c>)
10008928:	681a      	ldr	r2, [r3, #0]
1000892a:	79d1      	ldrb	r1, [r2, #7]
1000892c:	685b      	ldr	r3, [r3, #4]
1000892e:	7818      	ldrb	r0, [r3, #0]
10008930:	466b      	mov	r3, sp
10008932:	3307      	adds	r3, #7
10008934:	2201      	movs	r2, #1
10008936:	4c0b      	ldr	r4, [pc, #44]	; (10008964 <mpu_set_accel_fsr+0x90>)
10008938:	47a0      	blx	r4
1000893a:	2800      	cmp	r0, #0
1000893c:	d10c      	bne.n	10008958 <mpu_set_accel_fsr+0x84>
        return -1;
    st.chip_cfg.accel_fsr = data >> 3;
1000893e:	466b      	mov	r3, sp
10008940:	3307      	adds	r3, #7
10008942:	781b      	ldrb	r3, [r3, #0]
10008944:	08db      	lsrs	r3, r3, #3
10008946:	4a06      	ldr	r2, [pc, #24]	; (10008960 <mpu_set_accel_fsr+0x8c>)
10008948:	7253      	strb	r3, [r2, #9]
    return 0;
1000894a:	e007      	b.n	1000895c <mpu_set_accel_fsr+0x88>
int mpu_set_accel_fsr(unsigned char fsr)
{
    unsigned char data;

    if (!(st.chip_cfg.sensors))
        return -1;
1000894c:	2001      	movs	r0, #1
1000894e:	4240      	negs	r0, r0
10008950:	e004      	b.n	1000895c <mpu_set_accel_fsr+0x88>
        break;
    case 16:
        data = INV_FSR_16G << 3;
        break;
    default:
        return -1;
10008952:	2001      	movs	r0, #1
10008954:	4240      	negs	r0, r0
10008956:	e001      	b.n	1000895c <mpu_set_accel_fsr+0x88>
    }

    if (st.chip_cfg.accel_fsr == (data >> 3))
        return 0;
    if (i2c_write(st.hw->addr, st.reg->accel_cfg, 1, &data))
        return -1;
10008958:	2001      	movs	r0, #1
1000895a:	4240      	negs	r0, r0
    st.chip_cfg.accel_fsr = data >> 3;
    return 0;
}
1000895c:	b002      	add	sp, #8
1000895e:	bd10      	pop	{r4, pc}
10008960:	1001834c 	.word	0x1001834c
10008964:	1000aa19 	.word	0x1000aa19

10008968 <mpu_set_lpf>:
 *  The following LPF settings are supported: 188, 98, 42, 20, 10, 5.
 *  @param[in]  lpf Desired LPF setting.
 *  @return     0 if successful.
 */
int mpu_set_lpf(unsigned short lpf)
{
10008968:	b510      	push	{r4, lr}
1000896a:	b082      	sub	sp, #8
    unsigned char data;

    if (!(st.chip_cfg.sensors))
1000896c:	4b2b      	ldr	r3, [pc, #172]	; (10008a1c <mpu_set_lpf+0xb4>)
1000896e:	7a9b      	ldrb	r3, [r3, #10]
10008970:	2b00      	cmp	r3, #0
10008972:	d049      	beq.n	10008a08 <mpu_set_lpf+0xa0>
        return -1;

    if (lpf >= 188)
10008974:	28bb      	cmp	r0, #187	; 0xbb
10008976:	d903      	bls.n	10008980 <mpu_set_lpf+0x18>
        data = INV_FILTER_188HZ;
10008978:	2201      	movs	r2, #1
1000897a:	466b      	mov	r3, sp
1000897c:	71da      	strb	r2, [r3, #7]
1000897e:	e01a      	b.n	100089b6 <mpu_set_lpf+0x4e>
    else if (lpf >= 98)
10008980:	2861      	cmp	r0, #97	; 0x61
10008982:	d903      	bls.n	1000898c <mpu_set_lpf+0x24>
        data = INV_FILTER_98HZ;
10008984:	2202      	movs	r2, #2
10008986:	466b      	mov	r3, sp
10008988:	71da      	strb	r2, [r3, #7]
1000898a:	e014      	b.n	100089b6 <mpu_set_lpf+0x4e>
    else if (lpf >= 42)
1000898c:	2829      	cmp	r0, #41	; 0x29
1000898e:	d903      	bls.n	10008998 <mpu_set_lpf+0x30>
        data = INV_FILTER_42HZ;
10008990:	2203      	movs	r2, #3
10008992:	466b      	mov	r3, sp
10008994:	71da      	strb	r2, [r3, #7]
10008996:	e00e      	b.n	100089b6 <mpu_set_lpf+0x4e>
    else if (lpf >= 20)
10008998:	2813      	cmp	r0, #19
1000899a:	d903      	bls.n	100089a4 <mpu_set_lpf+0x3c>
        data = INV_FILTER_20HZ;
1000899c:	2204      	movs	r2, #4
1000899e:	466b      	mov	r3, sp
100089a0:	71da      	strb	r2, [r3, #7]
100089a2:	e008      	b.n	100089b6 <mpu_set_lpf+0x4e>
    else if (lpf >= 10)
100089a4:	2809      	cmp	r0, #9
100089a6:	d903      	bls.n	100089b0 <mpu_set_lpf+0x48>
        data = INV_FILTER_10HZ;
100089a8:	2205      	movs	r2, #5
100089aa:	466b      	mov	r3, sp
100089ac:	71da      	strb	r2, [r3, #7]
100089ae:	e002      	b.n	100089b6 <mpu_set_lpf+0x4e>
    else
        data = INV_FILTER_5HZ;
100089b0:	2206      	movs	r2, #6
100089b2:	466b      	mov	r3, sp
100089b4:	71da      	strb	r2, [r3, #7]

    if (st.chip_cfg.lpf == data)
100089b6:	4b19      	ldr	r3, [pc, #100]	; (10008a1c <mpu_set_lpf+0xb4>)
100089b8:	7ada      	ldrb	r2, [r3, #11]
100089ba:	466b      	mov	r3, sp
100089bc:	3307      	adds	r3, #7
100089be:	781b      	ldrb	r3, [r3, #0]
        return 0;
100089c0:	2000      	movs	r0, #0
    else if (lpf >= 10)
        data = INV_FILTER_10HZ;
    else
        data = INV_FILTER_5HZ;

    if (st.chip_cfg.lpf == data)
100089c2:	429a      	cmp	r2, r3
100089c4:	d028      	beq.n	10008a18 <mpu_set_lpf+0xb0>
        return 0;
    if (i2c_write(st.hw->addr, st.reg->lpf, 1, &data))
100089c6:	4b15      	ldr	r3, [pc, #84]	; (10008a1c <mpu_set_lpf+0xb4>)
100089c8:	681a      	ldr	r2, [r3, #0]
100089ca:	7891      	ldrb	r1, [r2, #2]
100089cc:	685b      	ldr	r3, [r3, #4]
100089ce:	7818      	ldrb	r0, [r3, #0]
100089d0:	466b      	mov	r3, sp
100089d2:	3307      	adds	r3, #7
100089d4:	2201      	movs	r2, #1
100089d6:	4c12      	ldr	r4, [pc, #72]	; (10008a20 <mpu_set_lpf+0xb8>)
100089d8:	47a0      	blx	r4
100089da:	2800      	cmp	r0, #0
100089dc:	d117      	bne.n	10008a0e <mpu_set_lpf+0xa6>
        return -1;
#ifdef MPU6500
    data = BIT_FIFO_SIZE_1024 | data;
100089de:	466b      	mov	r3, sp
100089e0:	3307      	adds	r3, #7
100089e2:	7819      	ldrb	r1, [r3, #0]
100089e4:	2240      	movs	r2, #64	; 0x40
100089e6:	430a      	orrs	r2, r1
100089e8:	701a      	strb	r2, [r3, #0]

    if (i2c_write(st.hw->addr, st.reg->accel_cfg2, 1, &data))
100089ea:	4a0c      	ldr	r2, [pc, #48]	; (10008a1c <mpu_set_lpf+0xb4>)
100089ec:	6811      	ldr	r1, [r2, #0]
100089ee:	7a09      	ldrb	r1, [r1, #8]
100089f0:	6852      	ldr	r2, [r2, #4]
100089f2:	7810      	ldrb	r0, [r2, #0]
100089f4:	2201      	movs	r2, #1
100089f6:	4c0a      	ldr	r4, [pc, #40]	; (10008a20 <mpu_set_lpf+0xb8>)
100089f8:	47a0      	blx	r4
100089fa:	2800      	cmp	r0, #0
100089fc:	d10a      	bne.n	10008a14 <mpu_set_lpf+0xac>
            return -1;
#endif
    st.chip_cfg.lpf = data;
100089fe:	466b      	mov	r3, sp
10008a00:	79da      	ldrb	r2, [r3, #7]
10008a02:	4b06      	ldr	r3, [pc, #24]	; (10008a1c <mpu_set_lpf+0xb4>)
10008a04:	72da      	strb	r2, [r3, #11]
    return 0;
10008a06:	e007      	b.n	10008a18 <mpu_set_lpf+0xb0>
int mpu_set_lpf(unsigned short lpf)
{
    unsigned char data;

    if (!(st.chip_cfg.sensors))
        return -1;
10008a08:	2001      	movs	r0, #1
10008a0a:	4240      	negs	r0, r0
10008a0c:	e004      	b.n	10008a18 <mpu_set_lpf+0xb0>
        data = INV_FILTER_5HZ;

    if (st.chip_cfg.lpf == data)
        return 0;
    if (i2c_write(st.hw->addr, st.reg->lpf, 1, &data))
        return -1;
10008a0e:	2001      	movs	r0, #1
10008a10:	4240      	negs	r0, r0
10008a12:	e001      	b.n	10008a18 <mpu_set_lpf+0xb0>
#ifdef MPU6500
    data = BIT_FIFO_SIZE_1024 | data;

    if (i2c_write(st.hw->addr, st.reg->accel_cfg2, 1, &data))
            return -1;
10008a14:	2001      	movs	r0, #1
10008a16:	4240      	negs	r0, r0
#endif
    st.chip_cfg.lpf = data;
    return 0;
}
10008a18:	b002      	add	sp, #8
10008a1a:	bd10      	pop	{r4, pc}
10008a1c:	1001834c 	.word	0x1001834c
10008a20:	1000aa19 	.word	0x1000aa19

10008a24 <mpu_get_sample_rate>:
 *  @param[out] rate    Current sampling rate (Hz).
 *  @return     0 if successful.
 */
int mpu_get_sample_rate(unsigned short *rate)
{
    if (st.chip_cfg.dmp_on)
10008a24:	2324      	movs	r3, #36	; 0x24
10008a26:	4a05      	ldr	r2, [pc, #20]	; (10008a3c <mpu_get_sample_rate+0x18>)
10008a28:	5cd3      	ldrb	r3, [r2, r3]
10008a2a:	2b00      	cmp	r3, #0
10008a2c:	d103      	bne.n	10008a36 <mpu_get_sample_rate+0x12>
        return -1;
    else
        rate[0] = st.chip_cfg.sample_rate;
10008a2e:	89d3      	ldrh	r3, [r2, #14]
10008a30:	8003      	strh	r3, [r0, #0]
    return 0;
10008a32:	2000      	movs	r0, #0
10008a34:	e001      	b.n	10008a3a <mpu_get_sample_rate+0x16>
 *  @return     0 if successful.
 */
int mpu_get_sample_rate(unsigned short *rate)
{
    if (st.chip_cfg.dmp_on)
        return -1;
10008a36:	2001      	movs	r0, #1
10008a38:	4240      	negs	r0, r0
    else
        rate[0] = st.chip_cfg.sample_rate;
    return 0;
}
10008a3a:	4770      	bx	lr
10008a3c:	1001834c 	.word	0x1001834c

10008a40 <mpu_set_compass_sample_rate>:
 *  mpu_get_compass_sample_rate to check the actual setting.
 *  @param[in]  rate    Desired compass sampling rate (Hz).
 *  @return     0 if successful.
 */
int mpu_set_compass_sample_rate(unsigned short rate)
{
10008a40:	b530      	push	{r4, r5, lr}
10008a42:	b083      	sub	sp, #12
10008a44:	1e01      	subs	r1, r0, #0
#ifdef AK89xx_SECONDARY
    unsigned char div;
    if (!rate || rate > st.chip_cfg.sample_rate || rate > MAX_COMPASS_SAMPLE_RATE)
10008a46:	d020      	beq.n	10008a8a <mpu_set_compass_sample_rate+0x4a>
10008a48:	4b17      	ldr	r3, [pc, #92]	; (10008aa8 <mpu_set_compass_sample_rate+0x68>)
10008a4a:	89d8      	ldrh	r0, [r3, #14]
10008a4c:	4281      	cmp	r1, r0
10008a4e:	d81f      	bhi.n	10008a90 <mpu_set_compass_sample_rate+0x50>
10008a50:	2964      	cmp	r1, #100	; 0x64
10008a52:	d820      	bhi.n	10008a96 <mpu_set_compass_sample_rate+0x56>
        return -1;

    div = st.chip_cfg.sample_rate / rate - 1;
10008a54:	466b      	mov	r3, sp
10008a56:	1ddc      	adds	r4, r3, #7
10008a58:	4b14      	ldr	r3, [pc, #80]	; (10008aac <mpu_set_compass_sample_rate+0x6c>)
10008a5a:	4798      	blx	r3
10008a5c:	3801      	subs	r0, #1
10008a5e:	7020      	strb	r0, [r4, #0]
    if (i2c_write(st.hw->addr, st.reg->s4_ctrl, 1, &div))
10008a60:	4b11      	ldr	r3, [pc, #68]	; (10008aa8 <mpu_set_compass_sample_rate+0x68>)
10008a62:	2224      	movs	r2, #36	; 0x24
10008a64:	6819      	ldr	r1, [r3, #0]
10008a66:	5c89      	ldrb	r1, [r1, r2]
10008a68:	685b      	ldr	r3, [r3, #4]
10008a6a:	7818      	ldrb	r0, [r3, #0]
10008a6c:	0023      	movs	r3, r4
10008a6e:	3a23      	subs	r2, #35	; 0x23
10008a70:	4c0f      	ldr	r4, [pc, #60]	; (10008ab0 <mpu_set_compass_sample_rate+0x70>)
10008a72:	47a0      	blx	r4
10008a74:	1e04      	subs	r4, r0, #0
10008a76:	d111      	bne.n	10008a9c <mpu_set_compass_sample_rate+0x5c>
        return -1;
    st.chip_cfg.compass_sample_rate = st.chip_cfg.sample_rate / (div + 1);
10008a78:	4d0b      	ldr	r5, [pc, #44]	; (10008aa8 <mpu_set_compass_sample_rate+0x68>)
10008a7a:	89e8      	ldrh	r0, [r5, #14]
10008a7c:	466b      	mov	r3, sp
10008a7e:	79d9      	ldrb	r1, [r3, #7]
10008a80:	3101      	adds	r1, #1
10008a82:	4b0c      	ldr	r3, [pc, #48]	; (10008ab4 <mpu_set_compass_sample_rate+0x74>)
10008a84:	4798      	blx	r3
10008a86:	8528      	strh	r0, [r5, #40]	; 0x28
    return 0;
10008a88:	e00a      	b.n	10008aa0 <mpu_set_compass_sample_rate+0x60>
int mpu_set_compass_sample_rate(unsigned short rate)
{
#ifdef AK89xx_SECONDARY
    unsigned char div;
    if (!rate || rate > st.chip_cfg.sample_rate || rate > MAX_COMPASS_SAMPLE_RATE)
        return -1;
10008a8a:	2401      	movs	r4, #1
10008a8c:	4264      	negs	r4, r4
10008a8e:	e007      	b.n	10008aa0 <mpu_set_compass_sample_rate+0x60>
10008a90:	2401      	movs	r4, #1
10008a92:	4264      	negs	r4, r4
10008a94:	e004      	b.n	10008aa0 <mpu_set_compass_sample_rate+0x60>
10008a96:	2401      	movs	r4, #1
10008a98:	4264      	negs	r4, r4
10008a9a:	e001      	b.n	10008aa0 <mpu_set_compass_sample_rate+0x60>

    div = st.chip_cfg.sample_rate / rate - 1;
    if (i2c_write(st.hw->addr, st.reg->s4_ctrl, 1, &div))
        return -1;
10008a9c:	2401      	movs	r4, #1
10008a9e:	4264      	negs	r4, r4
    st.chip_cfg.compass_sample_rate = st.chip_cfg.sample_rate / (div + 1);
    return 0;
#else
    return -1;
#endif
}
10008aa0:	0020      	movs	r0, r4
10008aa2:	b003      	add	sp, #12
10008aa4:	bd30      	pop	{r4, r5, pc}
10008aa6:	46c0      	nop			; (mov r8, r8)
10008aa8:	1001834c 	.word	0x1001834c
10008aac:	10013011 	.word	0x10013011
10008ab0:	1000aa19 	.word	0x1000aa19
10008ab4:	10013125 	.word	0x10013125

10008ab8 <mpu_configure_fifo>:
 *  \n INV_XYZ_ACCEL
 *  @param[in]  sensors Mask of sensors to push to FIFO.
 *  @return     0 if successful.
 */
int mpu_configure_fifo(unsigned char sensors)
{
10008ab8:	b570      	push	{r4, r5, r6, lr}
    int result = 0;

    /* Compass data isn't going into the FIFO. Stop trying. */
    sensors &= ~INV_XYZ_COMPASS;

    if (st.chip_cfg.dmp_on)
10008aba:	2324      	movs	r3, #36	; 0x24
10008abc:	4a16      	ldr	r2, [pc, #88]	; (10008b18 <mpu_configure_fifo+0x60>)
10008abe:	5cd3      	ldrb	r3, [r2, r3]
        return 0;
10008ac0:	2400      	movs	r4, #0
    int result = 0;

    /* Compass data isn't going into the FIFO. Stop trying. */
    sensors &= ~INV_XYZ_COMPASS;

    if (st.chip_cfg.dmp_on)
10008ac2:	2b00      	cmp	r3, #0
10008ac4:	d126      	bne.n	10008b14 <mpu_configure_fifo+0x5c>
        return 0;
    else {
        if (!(st.chip_cfg.sensors))
10008ac6:	7a94      	ldrb	r4, [r2, #10]
10008ac8:	2c00      	cmp	r4, #0
10008aca:	d015      	beq.n	10008af8 <mpu_configure_fifo+0x40>
{
    unsigned char prev;
    int result = 0;

    /* Compass data isn't going into the FIFO. Stop trying. */
    sensors &= ~INV_XYZ_COMPASS;
10008acc:	2301      	movs	r3, #1
10008ace:	4398      	bics	r0, r3
    if (st.chip_cfg.dmp_on)
        return 0;
    else {
        if (!(st.chip_cfg.sensors))
            return -1;
        prev = st.chip_cfg.fifo_enable;
10008ad0:	7c15      	ldrb	r5, [r2, #16]
        st.chip_cfg.fifo_enable = sensors & st.chip_cfg.sensors;
10008ad2:	4004      	ands	r4, r0
10008ad4:	7414      	strb	r4, [r2, #16]
        if (st.chip_cfg.fifo_enable != sensors)
10008ad6:	1b04      	subs	r4, r0, r4
10008ad8:	1e63      	subs	r3, r4, #1
10008ada:	419c      	sbcs	r4, r3
10008adc:	4264      	negs	r4, r4
             * asleep.
             */
            result = -1;
        else
            result = 0;
        if (sensors || st.chip_cfg.lp_accel_mode)
10008ade:	2800      	cmp	r0, #0
10008ae0:	d10d      	bne.n	10008afe <mpu_configure_fifo+0x46>
10008ae2:	7d13      	ldrb	r3, [r2, #20]
10008ae4:	2b00      	cmp	r3, #0
10008ae6:	d112      	bne.n	10008b0e <mpu_configure_fifo+0x56>
            set_int_enable(1);
        else
            set_int_enable(0);
10008ae8:	4b0c      	ldr	r3, [pc, #48]	; (10008b1c <mpu_configure_fifo+0x64>)
10008aea:	4798      	blx	r3
10008aec:	e012      	b.n	10008b14 <mpu_configure_fifo+0x5c>
        if (sensors) {
            if (mpu_reset_fifo()) {
                st.chip_cfg.fifo_enable = prev;
10008aee:	4b0a      	ldr	r3, [pc, #40]	; (10008b18 <mpu_configure_fifo+0x60>)
10008af0:	741d      	strb	r5, [r3, #16]
                return -1;
10008af2:	2401      	movs	r4, #1
10008af4:	4264      	negs	r4, r4
10008af6:	e00d      	b.n	10008b14 <mpu_configure_fifo+0x5c>

    if (st.chip_cfg.dmp_on)
        return 0;
    else {
        if (!(st.chip_cfg.sensors))
            return -1;
10008af8:	2401      	movs	r4, #1
10008afa:	4264      	negs	r4, r4
10008afc:	e00a      	b.n	10008b14 <mpu_configure_fifo+0x5c>
             */
            result = -1;
        else
            result = 0;
        if (sensors || st.chip_cfg.lp_accel_mode)
            set_int_enable(1);
10008afe:	2001      	movs	r0, #1
10008b00:	4b06      	ldr	r3, [pc, #24]	; (10008b1c <mpu_configure_fifo+0x64>)
10008b02:	4798      	blx	r3
        else
            set_int_enable(0);
        if (sensors) {
            if (mpu_reset_fifo()) {
10008b04:	4b06      	ldr	r3, [pc, #24]	; (10008b20 <mpu_configure_fifo+0x68>)
10008b06:	4798      	blx	r3
10008b08:	2800      	cmp	r0, #0
10008b0a:	d003      	beq.n	10008b14 <mpu_configure_fifo+0x5c>
10008b0c:	e7ef      	b.n	10008aee <mpu_configure_fifo+0x36>
             */
            result = -1;
        else
            result = 0;
        if (sensors || st.chip_cfg.lp_accel_mode)
            set_int_enable(1);
10008b0e:	2001      	movs	r0, #1
10008b10:	4b02      	ldr	r3, [pc, #8]	; (10008b1c <mpu_configure_fifo+0x64>)
10008b12:	4798      	blx	r3
            }
        }
    }

    return result;
}
10008b14:	0020      	movs	r0, r4
10008b16:	bd70      	pop	{r4, r5, r6, pc}
10008b18:	1001834c 	.word	0x1001834c
10008b1c:	10008495 	.word	0x10008495
10008b20:	100085f1 	.word	0x100085f1

10008b24 <mpu_read_fifo>:
 *  @param[out] more        Number of remaining packets.
 *  @return     0 if successful.
 */
int mpu_read_fifo(short *gyro, short *accel, unsigned long *timestamp,
        unsigned char *sensors, unsigned char *more)
{
10008b24:	b5f0      	push	{r4, r5, r6, r7, lr}
10008b26:	464f      	mov	r7, r9
10008b28:	b480      	push	{r7}
10008b2a:	b088      	sub	sp, #32
10008b2c:	9001      	str	r0, [sp, #4]
10008b2e:	9103      	str	r1, [sp, #12]
10008b30:	9202      	str	r2, [sp, #8]
10008b32:	001e      	movs	r6, r3
    /* Assumes maximum packet size is gyro (6) + accel (6). */
    unsigned char data[MAX_PACKET_LENGTH];
    unsigned char packet_size = 0;
    unsigned short fifo_count, index = 0;

    if (st.chip_cfg.dmp_on)
10008b34:	2324      	movs	r3, #36	; 0x24
10008b36:	4a69      	ldr	r2, [pc, #420]	; (10008cdc <mpu_read_fifo+0x1b8>)
10008b38:	5cd3      	ldrb	r3, [r2, r3]
10008b3a:	2b00      	cmp	r3, #0
10008b3c:	d000      	beq.n	10008b40 <mpu_read_fifo+0x1c>
10008b3e:	e0b6      	b.n	10008cae <mpu_read_fifo+0x18a>
        return -1;

    sensors[0] = 0;
10008b40:	7033      	strb	r3, [r6, #0]
    if (!st.chip_cfg.sensors)
10008b42:	7a93      	ldrb	r3, [r2, #10]
10008b44:	2b00      	cmp	r3, #0
10008b46:	d100      	bne.n	10008b4a <mpu_read_fifo+0x26>
10008b48:	e0b4      	b.n	10008cb4 <mpu_read_fifo+0x190>
        return -1;
    if (!st.chip_cfg.fifo_enable)
10008b4a:	7c13      	ldrb	r3, [r2, #16]
10008b4c:	2b00      	cmp	r3, #0
10008b4e:	d100      	bne.n	10008b52 <mpu_read_fifo+0x2e>
10008b50:	e0b3      	b.n	10008cba <mpu_read_fifo+0x196>
        return -1;

    if (st.chip_cfg.fifo_enable & INV_X_GYRO)
10008b52:	065a      	lsls	r2, r3, #25
        packet_size += 2;
10008b54:	0fd2      	lsrs	r2, r2, #31
10008b56:	0055      	lsls	r5, r2, #1
    if (st.chip_cfg.fifo_enable & INV_Y_GYRO)
10008b58:	069a      	lsls	r2, r3, #26
10008b5a:	d501      	bpl.n	10008b60 <mpu_read_fifo+0x3c>
        packet_size += 2;
10008b5c:	1caa      	adds	r2, r5, #2
10008b5e:	b2d5      	uxtb	r5, r2
    if (st.chip_cfg.fifo_enable & INV_Z_GYRO)
10008b60:	06da      	lsls	r2, r3, #27
10008b62:	d501      	bpl.n	10008b68 <mpu_read_fifo+0x44>
        packet_size += 2;
10008b64:	1caa      	adds	r2, r5, #2
10008b66:	b2d5      	uxtb	r5, r2
    if (st.chip_cfg.fifo_enable & INV_XYZ_ACCEL)
10008b68:	071b      	lsls	r3, r3, #28
10008b6a:	d501      	bpl.n	10008b70 <mpu_read_fifo+0x4c>
        packet_size += 6;
10008b6c:	1dab      	adds	r3, r5, #6
10008b6e:	b2dd      	uxtb	r5, r3

    if (i2c_read(st.hw->addr, st.reg->fifo_count_h, 2, data))
10008b70:	4b5a      	ldr	r3, [pc, #360]	; (10008cdc <mpu_read_fifo+0x1b8>)
10008b72:	681a      	ldr	r2, [r3, #0]
10008b74:	7b11      	ldrb	r1, [r2, #12]
10008b76:	685b      	ldr	r3, [r3, #4]
10008b78:	7818      	ldrb	r0, [r3, #0]
10008b7a:	ab05      	add	r3, sp, #20
10008b7c:	2202      	movs	r2, #2
10008b7e:	4c58      	ldr	r4, [pc, #352]	; (10008ce0 <mpu_read_fifo+0x1bc>)
10008b80:	47a0      	blx	r4
10008b82:	1e04      	subs	r4, r0, #0
10008b84:	d000      	beq.n	10008b88 <mpu_read_fifo+0x64>
10008b86:	e09b      	b.n	10008cc0 <mpu_read_fifo+0x19c>
        return -1;
    fifo_count = (data[0] << 8) | data[1];
10008b88:	aa05      	add	r2, sp, #20
10008b8a:	7813      	ldrb	r3, [r2, #0]
10008b8c:	021b      	lsls	r3, r3, #8
10008b8e:	7852      	ldrb	r2, [r2, #1]
10008b90:	431a      	orrs	r2, r3
10008b92:	4691      	mov	r9, r2
    if (fifo_count < packet_size)
10008b94:	b2af      	uxth	r7, r5
10008b96:	42ba      	cmp	r2, r7
10008b98:	d200      	bcs.n	10008b9c <mpu_read_fifo+0x78>
10008b9a:	e099      	b.n	10008cd0 <mpu_read_fifo+0x1ac>
        return 0;
//    log_i("FIFO count: %hd\n", fifo_count);
    if (fifo_count > (st.hw->max_fifo >> 1)) {
10008b9c:	4b4f      	ldr	r3, [pc, #316]	; (10008cdc <mpu_read_fifo+0x1b8>)
10008b9e:	685a      	ldr	r2, [r3, #4]
10008ba0:	8853      	ldrh	r3, [r2, #2]
10008ba2:	085b      	lsrs	r3, r3, #1
10008ba4:	4599      	cmp	r9, r3
10008ba6:	d913      	bls.n	10008bd0 <mpu_read_fifo+0xac>
        /* FIFO is 50% full, better check overflow bit. */
        if (i2c_read(st.hw->addr, st.reg->int_status, 1, data))
10008ba8:	4b4c      	ldr	r3, [pc, #304]	; (10008cdc <mpu_read_fifo+0x1b8>)
10008baa:	681b      	ldr	r3, [r3, #0]
10008bac:	7cd9      	ldrb	r1, [r3, #19]
10008bae:	7810      	ldrb	r0, [r2, #0]
10008bb0:	ab05      	add	r3, sp, #20
10008bb2:	2201      	movs	r2, #1
10008bb4:	4c4a      	ldr	r4, [pc, #296]	; (10008ce0 <mpu_read_fifo+0x1bc>)
10008bb6:	47a0      	blx	r4
10008bb8:	2800      	cmp	r0, #0
10008bba:	d000      	beq.n	10008bbe <mpu_read_fifo+0x9a>
10008bbc:	e083      	b.n	10008cc6 <mpu_read_fifo+0x1a2>
            return -1;
        if (data[0] & BIT_FIFO_OVERFLOW) {
10008bbe:	ab05      	add	r3, sp, #20
10008bc0:	781b      	ldrb	r3, [r3, #0]
10008bc2:	06db      	lsls	r3, r3, #27
10008bc4:	d504      	bpl.n	10008bd0 <mpu_read_fifo+0xac>
            mpu_reset_fifo();
10008bc6:	4b47      	ldr	r3, [pc, #284]	; (10008ce4 <mpu_read_fifo+0x1c0>)
10008bc8:	4798      	blx	r3
            return -2;
10008bca:	2402      	movs	r4, #2
10008bcc:	4264      	negs	r4, r4
10008bce:	e07f      	b.n	10008cd0 <mpu_read_fifo+0x1ac>
        }
    }
    get_ms((unsigned long*)timestamp);
10008bd0:	9802      	ldr	r0, [sp, #8]
10008bd2:	4b45      	ldr	r3, [pc, #276]	; (10008ce8 <mpu_read_fifo+0x1c4>)
10008bd4:	4798      	blx	r3

    if (i2c_read(st.hw->addr, st.reg->fifo_r_w, packet_size, data))
10008bd6:	4b41      	ldr	r3, [pc, #260]	; (10008cdc <mpu_read_fifo+0x1b8>)
10008bd8:	681a      	ldr	r2, [r3, #0]
10008bda:	7b51      	ldrb	r1, [r2, #13]
10008bdc:	685b      	ldr	r3, [r3, #4]
10008bde:	7818      	ldrb	r0, [r3, #0]
10008be0:	ab05      	add	r3, sp, #20
10008be2:	002a      	movs	r2, r5
10008be4:	4c3e      	ldr	r4, [pc, #248]	; (10008ce0 <mpu_read_fifo+0x1bc>)
10008be6:	47a0      	blx	r4
10008be8:	1e04      	subs	r4, r0, #0
10008bea:	d16f      	bne.n	10008ccc <mpu_read_fifo+0x1a8>
        return -1;
    more[0] = fifo_count / packet_size - 1;
10008bec:	0029      	movs	r1, r5
10008bee:	4648      	mov	r0, r9
10008bf0:	4b3e      	ldr	r3, [pc, #248]	; (10008cec <mpu_read_fifo+0x1c8>)
10008bf2:	4798      	blx	r3
10008bf4:	3801      	subs	r0, #1
10008bf6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
10008bf8:	7018      	strb	r0, [r3, #0]
    sensors[0] = 0;
10008bfa:	2300      	movs	r3, #0
10008bfc:	7033      	strb	r3, [r6, #0]

    if ((index != packet_size) && st.chip_cfg.fifo_enable & INV_XYZ_ACCEL) {
10008bfe:	2d00      	cmp	r5, #0
10008c00:	d01a      	beq.n	10008c38 <mpu_read_fifo+0x114>
10008c02:	4b36      	ldr	r3, [pc, #216]	; (10008cdc <mpu_read_fifo+0x1b8>)
10008c04:	7c1a      	ldrb	r2, [r3, #16]
        unsigned char *sensors, unsigned char *more)
{
    /* Assumes maximum packet size is gyro (6) + accel (6). */
    unsigned char data[MAX_PACKET_LENGTH];
    unsigned char packet_size = 0;
    unsigned short fifo_count, index = 0;
10008c06:	2300      	movs	r3, #0
    if (i2c_read(st.hw->addr, st.reg->fifo_r_w, packet_size, data))
        return -1;
    more[0] = fifo_count / packet_size - 1;
    sensors[0] = 0;

    if ((index != packet_size) && st.chip_cfg.fifo_enable & INV_XYZ_ACCEL) {
10008c08:	0712      	lsls	r2, r2, #28
10008c0a:	d515      	bpl.n	10008c38 <mpu_read_fifo+0x114>
        accel[0] = (data[index+0] << 8) | data[index+1];
10008c0c:	ab05      	add	r3, sp, #20
10008c0e:	781a      	ldrb	r2, [r3, #0]
10008c10:	0212      	lsls	r2, r2, #8
10008c12:	7859      	ldrb	r1, [r3, #1]
10008c14:	430a      	orrs	r2, r1
10008c16:	9803      	ldr	r0, [sp, #12]
10008c18:	8002      	strh	r2, [r0, #0]
        accel[1] = (data[index+2] << 8) | data[index+3];
10008c1a:	789a      	ldrb	r2, [r3, #2]
10008c1c:	0212      	lsls	r2, r2, #8
10008c1e:	78d9      	ldrb	r1, [r3, #3]
10008c20:	430a      	orrs	r2, r1
10008c22:	8042      	strh	r2, [r0, #2]
        accel[2] = (data[index+4] << 8) | data[index+5];
10008c24:	791a      	ldrb	r2, [r3, #4]
10008c26:	0212      	lsls	r2, r2, #8
10008c28:	795b      	ldrb	r3, [r3, #5]
10008c2a:	4313      	orrs	r3, r2
10008c2c:	8083      	strh	r3, [r0, #4]
        sensors[0] |= INV_XYZ_ACCEL;
10008c2e:	7832      	ldrb	r2, [r6, #0]
10008c30:	2308      	movs	r3, #8
10008c32:	4313      	orrs	r3, r2
10008c34:	7033      	strb	r3, [r6, #0]
        index += 6;
10008c36:	2306      	movs	r3, #6
    }
    if ((index != packet_size) && st.chip_cfg.fifo_enable & INV_X_GYRO) {
10008c38:	42bb      	cmp	r3, r7
10008c3a:	d049      	beq.n	10008cd0 <mpu_read_fifo+0x1ac>
10008c3c:	4a27      	ldr	r2, [pc, #156]	; (10008cdc <mpu_read_fifo+0x1b8>)
10008c3e:	7c12      	ldrb	r2, [r2, #16]
10008c40:	0652      	lsls	r2, r2, #25
10008c42:	d50f      	bpl.n	10008c64 <mpu_read_fifo+0x140>
        gyro[0] = (data[index+0] << 8) | data[index+1];
10008c44:	a905      	add	r1, sp, #20
10008c46:	5cca      	ldrb	r2, [r1, r3]
10008c48:	0212      	lsls	r2, r2, #8
10008c4a:	18c9      	adds	r1, r1, r3
10008c4c:	7849      	ldrb	r1, [r1, #1]
10008c4e:	430a      	orrs	r2, r1
10008c50:	9901      	ldr	r1, [sp, #4]
10008c52:	800a      	strh	r2, [r1, #0]
        sensors[0] |= INV_X_GYRO;
10008c54:	7831      	ldrb	r1, [r6, #0]
10008c56:	2240      	movs	r2, #64	; 0x40
10008c58:	430a      	orrs	r2, r1
10008c5a:	7032      	strb	r2, [r6, #0]
        index += 2;
10008c5c:	3302      	adds	r3, #2
10008c5e:	b29b      	uxth	r3, r3
    }
    if ((index != packet_size) && st.chip_cfg.fifo_enable & INV_Y_GYRO) {
10008c60:	429f      	cmp	r7, r3
10008c62:	d035      	beq.n	10008cd0 <mpu_read_fifo+0x1ac>
10008c64:	4a1d      	ldr	r2, [pc, #116]	; (10008cdc <mpu_read_fifo+0x1b8>)
10008c66:	7c12      	ldrb	r2, [r2, #16]
10008c68:	0692      	lsls	r2, r2, #26
10008c6a:	d50f      	bpl.n	10008c8c <mpu_read_fifo+0x168>
        gyro[1] = (data[index+0] << 8) | data[index+1];
10008c6c:	a905      	add	r1, sp, #20
10008c6e:	5cca      	ldrb	r2, [r1, r3]
10008c70:	0212      	lsls	r2, r2, #8
10008c72:	18c9      	adds	r1, r1, r3
10008c74:	7849      	ldrb	r1, [r1, #1]
10008c76:	430a      	orrs	r2, r1
10008c78:	9901      	ldr	r1, [sp, #4]
10008c7a:	804a      	strh	r2, [r1, #2]
        sensors[0] |= INV_Y_GYRO;
10008c7c:	7831      	ldrb	r1, [r6, #0]
10008c7e:	2220      	movs	r2, #32
10008c80:	430a      	orrs	r2, r1
10008c82:	7032      	strb	r2, [r6, #0]
        index += 2;
10008c84:	3302      	adds	r3, #2
10008c86:	b29b      	uxth	r3, r3
    }
    if ((index != packet_size) && st.chip_cfg.fifo_enable & INV_Z_GYRO) {
10008c88:	429f      	cmp	r7, r3
10008c8a:	d021      	beq.n	10008cd0 <mpu_read_fifo+0x1ac>
10008c8c:	4a13      	ldr	r2, [pc, #76]	; (10008cdc <mpu_read_fifo+0x1b8>)
10008c8e:	7c12      	ldrb	r2, [r2, #16]
10008c90:	06d2      	lsls	r2, r2, #27
10008c92:	d51d      	bpl.n	10008cd0 <mpu_read_fifo+0x1ac>
        gyro[2] = (data[index+0] << 8) | data[index+1];
10008c94:	a905      	add	r1, sp, #20
10008c96:	5cca      	ldrb	r2, [r1, r3]
10008c98:	0212      	lsls	r2, r2, #8
10008c9a:	18cb      	adds	r3, r1, r3
10008c9c:	785b      	ldrb	r3, [r3, #1]
10008c9e:	4313      	orrs	r3, r2
10008ca0:	9a01      	ldr	r2, [sp, #4]
10008ca2:	8093      	strh	r3, [r2, #4]
        sensors[0] |= INV_Z_GYRO;
10008ca4:	7832      	ldrb	r2, [r6, #0]
10008ca6:	2310      	movs	r3, #16
10008ca8:	4313      	orrs	r3, r2
10008caa:	7033      	strb	r3, [r6, #0]
10008cac:	e010      	b.n	10008cd0 <mpu_read_fifo+0x1ac>
    unsigned char data[MAX_PACKET_LENGTH];
    unsigned char packet_size = 0;
    unsigned short fifo_count, index = 0;

    if (st.chip_cfg.dmp_on)
        return -1;
10008cae:	2401      	movs	r4, #1
10008cb0:	4264      	negs	r4, r4
10008cb2:	e00d      	b.n	10008cd0 <mpu_read_fifo+0x1ac>

    sensors[0] = 0;
    if (!st.chip_cfg.sensors)
        return -1;
10008cb4:	2401      	movs	r4, #1
10008cb6:	4264      	negs	r4, r4
10008cb8:	e00a      	b.n	10008cd0 <mpu_read_fifo+0x1ac>
    if (!st.chip_cfg.fifo_enable)
        return -1;
10008cba:	2401      	movs	r4, #1
10008cbc:	4264      	negs	r4, r4
10008cbe:	e007      	b.n	10008cd0 <mpu_read_fifo+0x1ac>
        packet_size += 2;
    if (st.chip_cfg.fifo_enable & INV_XYZ_ACCEL)
        packet_size += 6;

    if (i2c_read(st.hw->addr, st.reg->fifo_count_h, 2, data))
        return -1;
10008cc0:	2401      	movs	r4, #1
10008cc2:	4264      	negs	r4, r4
10008cc4:	e004      	b.n	10008cd0 <mpu_read_fifo+0x1ac>
        return 0;
//    log_i("FIFO count: %hd\n", fifo_count);
    if (fifo_count > (st.hw->max_fifo >> 1)) {
        /* FIFO is 50% full, better check overflow bit. */
        if (i2c_read(st.hw->addr, st.reg->int_status, 1, data))
            return -1;
10008cc6:	2401      	movs	r4, #1
10008cc8:	4264      	negs	r4, r4
10008cca:	e001      	b.n	10008cd0 <mpu_read_fifo+0x1ac>
        }
    }
    get_ms((unsigned long*)timestamp);

    if (i2c_read(st.hw->addr, st.reg->fifo_r_w, packet_size, data))
        return -1;
10008ccc:	2401      	movs	r4, #1
10008cce:	4264      	negs	r4, r4
        sensors[0] |= INV_Z_GYRO;
        index += 2;
    }

    return 0;
}
10008cd0:	0020      	movs	r0, r4
10008cd2:	b008      	add	sp, #32
10008cd4:	bc04      	pop	{r2}
10008cd6:	4691      	mov	r9, r2
10008cd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
10008cda:	46c0      	nop			; (mov r8, r8)
10008cdc:	1001834c 	.word	0x1001834c
10008ce0:	1000aa75 	.word	0x1000aa75
10008ce4:	100085f1 	.word	0x100085f1
10008ce8:	1000b57d 	.word	0x1000b57d
10008cec:	10013125 	.word	0x10013125

10008cf0 <mpu_set_bypass>:
 *  @brief      Set device to bypass mode.
 *  @param[in]  bypass_on   1 to enable bypass mode.
 *  @return     0 if successful.
 */
int mpu_set_bypass(unsigned char bypass_on)
{
10008cf0:	b530      	push	{r4, r5, lr}
10008cf2:	b083      	sub	sp, #12
10008cf4:	0004      	movs	r4, r0
    unsigned char tmp;

    if (st.chip_cfg.bypass_mode == bypass_on)
10008cf6:	4b59      	ldr	r3, [pc, #356]	; (10008e5c <mpu_set_bypass+0x16c>)
10008cf8:	7c9b      	ldrb	r3, [r3, #18]
10008cfa:	4283      	cmp	r3, r0
10008cfc:	d100      	bne.n	10008d00 <mpu_set_bypass+0x10>
10008cfe:	e097      	b.n	10008e30 <mpu_set_bypass+0x140>
        return 0;

    if (bypass_on) {
10008d00:	2800      	cmp	r0, #0
10008d02:	d042      	beq.n	10008d8a <mpu_set_bypass+0x9a>
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
10008d04:	4b55      	ldr	r3, [pc, #340]	; (10008e5c <mpu_set_bypass+0x16c>)
10008d06:	681a      	ldr	r2, [r3, #0]
10008d08:	7911      	ldrb	r1, [r2, #4]
10008d0a:	685b      	ldr	r3, [r3, #4]
10008d0c:	7818      	ldrb	r0, [r3, #0]
10008d0e:	466b      	mov	r3, sp
10008d10:	3307      	adds	r3, #7
10008d12:	2201      	movs	r2, #1
10008d14:	4d52      	ldr	r5, [pc, #328]	; (10008e60 <mpu_set_bypass+0x170>)
10008d16:	47a8      	blx	r5
10008d18:	2800      	cmp	r0, #0
10008d1a:	d000      	beq.n	10008d1e <mpu_set_bypass+0x2e>
10008d1c:	e08a      	b.n	10008e34 <mpu_set_bypass+0x144>
            return -1;
        tmp &= ~BIT_AUX_IF_EN;
10008d1e:	466b      	mov	r3, sp
10008d20:	3307      	adds	r3, #7
10008d22:	781a      	ldrb	r2, [r3, #0]
10008d24:	2120      	movs	r1, #32
10008d26:	438a      	bics	r2, r1
10008d28:	701a      	strb	r2, [r3, #0]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
10008d2a:	4a4c      	ldr	r2, [pc, #304]	; (10008e5c <mpu_set_bypass+0x16c>)
10008d2c:	6811      	ldr	r1, [r2, #0]
10008d2e:	7909      	ldrb	r1, [r1, #4]
10008d30:	6852      	ldr	r2, [r2, #4]
10008d32:	7810      	ldrb	r0, [r2, #0]
10008d34:	2201      	movs	r2, #1
10008d36:	4d4b      	ldr	r5, [pc, #300]	; (10008e64 <mpu_set_bypass+0x174>)
10008d38:	47a8      	blx	r5
10008d3a:	2800      	cmp	r0, #0
10008d3c:	d17d      	bne.n	10008e3a <mpu_set_bypass+0x14a>
            return -1;
        delay_ms(3);
10008d3e:	3003      	adds	r0, #3
10008d40:	4b49      	ldr	r3, [pc, #292]	; (10008e68 <mpu_set_bypass+0x178>)
10008d42:	4798      	blx	r3
        tmp = BIT_BYPASS_EN;
10008d44:	2202      	movs	r2, #2
10008d46:	466b      	mov	r3, sp
10008d48:	71da      	strb	r2, [r3, #7]
        if (st.chip_cfg.active_low_int)
10008d4a:	2322      	movs	r3, #34	; 0x22
10008d4c:	4a43      	ldr	r2, [pc, #268]	; (10008e5c <mpu_set_bypass+0x16c>)
10008d4e:	5cd3      	ldrb	r3, [r2, r3]
10008d50:	2b00      	cmp	r3, #0
10008d52:	d002      	beq.n	10008d5a <mpu_set_bypass+0x6a>
            tmp |= BIT_ACTL;
10008d54:	2282      	movs	r2, #130	; 0x82
10008d56:	466b      	mov	r3, sp
10008d58:	71da      	strb	r2, [r3, #7]
        if (st.chip_cfg.latched_int)
10008d5a:	2323      	movs	r3, #35	; 0x23
10008d5c:	4a3f      	ldr	r2, [pc, #252]	; (10008e5c <mpu_set_bypass+0x16c>)
10008d5e:	5cd3      	ldrb	r3, [r2, r3]
10008d60:	2b00      	cmp	r3, #0
10008d62:	d005      	beq.n	10008d70 <mpu_set_bypass+0x80>
            tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
10008d64:	466b      	mov	r3, sp
10008d66:	1dda      	adds	r2, r3, #7
10008d68:	79d9      	ldrb	r1, [r3, #7]
10008d6a:	2330      	movs	r3, #48	; 0x30
10008d6c:	430b      	orrs	r3, r1
10008d6e:	7013      	strb	r3, [r2, #0]
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
10008d70:	4b3a      	ldr	r3, [pc, #232]	; (10008e5c <mpu_set_bypass+0x16c>)
10008d72:	681a      	ldr	r2, [r3, #0]
10008d74:	7dd1      	ldrb	r1, [r2, #23]
10008d76:	685b      	ldr	r3, [r3, #4]
10008d78:	7818      	ldrb	r0, [r3, #0]
10008d7a:	466b      	mov	r3, sp
10008d7c:	3307      	adds	r3, #7
10008d7e:	2201      	movs	r2, #1
10008d80:	4d38      	ldr	r5, [pc, #224]	; (10008e64 <mpu_set_bypass+0x174>)
10008d82:	47a8      	blx	r5
10008d84:	2800      	cmp	r0, #0
10008d86:	d04f      	beq.n	10008e28 <mpu_set_bypass+0x138>
10008d88:	e05a      	b.n	10008e40 <mpu_set_bypass+0x150>
            return -1;
    } else {
        /* Enable I2C master mode if compass is being used. */
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
10008d8a:	4b34      	ldr	r3, [pc, #208]	; (10008e5c <mpu_set_bypass+0x16c>)
10008d8c:	681a      	ldr	r2, [r3, #0]
10008d8e:	7911      	ldrb	r1, [r2, #4]
10008d90:	685b      	ldr	r3, [r3, #4]
10008d92:	7818      	ldrb	r0, [r3, #0]
10008d94:	466b      	mov	r3, sp
10008d96:	3307      	adds	r3, #7
10008d98:	2201      	movs	r2, #1
10008d9a:	4d31      	ldr	r5, [pc, #196]	; (10008e60 <mpu_set_bypass+0x170>)
10008d9c:	47a8      	blx	r5
10008d9e:	2800      	cmp	r0, #0
10008da0:	d151      	bne.n	10008e46 <mpu_set_bypass+0x156>
            return -1;
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
10008da2:	4b2e      	ldr	r3, [pc, #184]	; (10008e5c <mpu_set_bypass+0x16c>)
10008da4:	7a9b      	ldrb	r3, [r3, #10]
10008da6:	07db      	lsls	r3, r3, #31
10008da8:	d506      	bpl.n	10008db8 <mpu_set_bypass+0xc8>
            tmp |= BIT_AUX_IF_EN;
10008daa:	466b      	mov	r3, sp
10008dac:	1dda      	adds	r2, r3, #7
10008dae:	79d9      	ldrb	r1, [r3, #7]
10008db0:	2320      	movs	r3, #32
10008db2:	430b      	orrs	r3, r1
10008db4:	7013      	strb	r3, [r2, #0]
10008db6:	e005      	b.n	10008dc4 <mpu_set_bypass+0xd4>
        else
            tmp &= ~BIT_AUX_IF_EN;
10008db8:	466b      	mov	r3, sp
10008dba:	1dda      	adds	r2, r3, #7
10008dbc:	79db      	ldrb	r3, [r3, #7]
10008dbe:	2120      	movs	r1, #32
10008dc0:	438b      	bics	r3, r1
10008dc2:	7013      	strb	r3, [r2, #0]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
10008dc4:	4b25      	ldr	r3, [pc, #148]	; (10008e5c <mpu_set_bypass+0x16c>)
10008dc6:	681a      	ldr	r2, [r3, #0]
10008dc8:	7911      	ldrb	r1, [r2, #4]
10008dca:	685b      	ldr	r3, [r3, #4]
10008dcc:	7818      	ldrb	r0, [r3, #0]
10008dce:	466b      	mov	r3, sp
10008dd0:	3307      	adds	r3, #7
10008dd2:	2201      	movs	r2, #1
10008dd4:	4d23      	ldr	r5, [pc, #140]	; (10008e64 <mpu_set_bypass+0x174>)
10008dd6:	47a8      	blx	r5
10008dd8:	2800      	cmp	r0, #0
10008dda:	d137      	bne.n	10008e4c <mpu_set_bypass+0x15c>
            return -1;
        delay_ms(3);
10008ddc:	3003      	adds	r0, #3
10008dde:	4b22      	ldr	r3, [pc, #136]	; (10008e68 <mpu_set_bypass+0x178>)
10008de0:	4798      	blx	r3
        if (st.chip_cfg.active_low_int)
10008de2:	2322      	movs	r3, #34	; 0x22
10008de4:	4a1d      	ldr	r2, [pc, #116]	; (10008e5c <mpu_set_bypass+0x16c>)
10008de6:	5cd3      	ldrb	r3, [r2, r3]
10008de8:	2b00      	cmp	r3, #0
10008dea:	d003      	beq.n	10008df4 <mpu_set_bypass+0x104>
            tmp = BIT_ACTL;
10008dec:	2280      	movs	r2, #128	; 0x80
10008dee:	466b      	mov	r3, sp
10008df0:	71da      	strb	r2, [r3, #7]
10008df2:	e002      	b.n	10008dfa <mpu_set_bypass+0x10a>
        else
            tmp = 0;
10008df4:	2200      	movs	r2, #0
10008df6:	466b      	mov	r3, sp
10008df8:	71da      	strb	r2, [r3, #7]
        if (st.chip_cfg.latched_int)
10008dfa:	2323      	movs	r3, #35	; 0x23
10008dfc:	4a17      	ldr	r2, [pc, #92]	; (10008e5c <mpu_set_bypass+0x16c>)
10008dfe:	5cd3      	ldrb	r3, [r2, r3]
10008e00:	2b00      	cmp	r3, #0
10008e02:	d005      	beq.n	10008e10 <mpu_set_bypass+0x120>
            tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
10008e04:	466b      	mov	r3, sp
10008e06:	1dda      	adds	r2, r3, #7
10008e08:	79d9      	ldrb	r1, [r3, #7]
10008e0a:	2330      	movs	r3, #48	; 0x30
10008e0c:	430b      	orrs	r3, r1
10008e0e:	7013      	strb	r3, [r2, #0]
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
10008e10:	4b12      	ldr	r3, [pc, #72]	; (10008e5c <mpu_set_bypass+0x16c>)
10008e12:	681a      	ldr	r2, [r3, #0]
10008e14:	7dd1      	ldrb	r1, [r2, #23]
10008e16:	685b      	ldr	r3, [r3, #4]
10008e18:	7818      	ldrb	r0, [r3, #0]
10008e1a:	466b      	mov	r3, sp
10008e1c:	3307      	adds	r3, #7
10008e1e:	2201      	movs	r2, #1
10008e20:	4d10      	ldr	r5, [pc, #64]	; (10008e64 <mpu_set_bypass+0x174>)
10008e22:	47a8      	blx	r5
10008e24:	2800      	cmp	r0, #0
10008e26:	d114      	bne.n	10008e52 <mpu_set_bypass+0x162>
            return -1;
    }
    st.chip_cfg.bypass_mode = bypass_on;
10008e28:	4b0c      	ldr	r3, [pc, #48]	; (10008e5c <mpu_set_bypass+0x16c>)
10008e2a:	749c      	strb	r4, [r3, #18]
    return 0;
10008e2c:	2000      	movs	r0, #0
10008e2e:	e012      	b.n	10008e56 <mpu_set_bypass+0x166>
int mpu_set_bypass(unsigned char bypass_on)
{
    unsigned char tmp;

    if (st.chip_cfg.bypass_mode == bypass_on)
        return 0;
10008e30:	2000      	movs	r0, #0
10008e32:	e010      	b.n	10008e56 <mpu_set_bypass+0x166>

    if (bypass_on) {
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
            return -1;
10008e34:	2001      	movs	r0, #1
10008e36:	4240      	negs	r0, r0
10008e38:	e00d      	b.n	10008e56 <mpu_set_bypass+0x166>
        tmp &= ~BIT_AUX_IF_EN;
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
            return -1;
10008e3a:	2001      	movs	r0, #1
10008e3c:	4240      	negs	r0, r0
10008e3e:	e00a      	b.n	10008e56 <mpu_set_bypass+0x166>
        if (st.chip_cfg.active_low_int)
            tmp |= BIT_ACTL;
        if (st.chip_cfg.latched_int)
            tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
            return -1;
10008e40:	2001      	movs	r0, #1
10008e42:	4240      	negs	r0, r0
10008e44:	e007      	b.n	10008e56 <mpu_set_bypass+0x166>
    } else {
        /* Enable I2C master mode if compass is being used. */
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
            return -1;
10008e46:	2001      	movs	r0, #1
10008e48:	4240      	negs	r0, r0
10008e4a:	e004      	b.n	10008e56 <mpu_set_bypass+0x166>
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
            tmp |= BIT_AUX_IF_EN;
        else
            tmp &= ~BIT_AUX_IF_EN;
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
            return -1;
10008e4c:	2001      	movs	r0, #1
10008e4e:	4240      	negs	r0, r0
10008e50:	e001      	b.n	10008e56 <mpu_set_bypass+0x166>
        else
            tmp = 0;
        if (st.chip_cfg.latched_int)
            tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
            return -1;
10008e52:	2001      	movs	r0, #1
10008e54:	4240      	negs	r0, r0
    }
    st.chip_cfg.bypass_mode = bypass_on;
    return 0;
}
10008e56:	b003      	add	sp, #12
10008e58:	bd30      	pop	{r4, r5, pc}
10008e5a:	46c0      	nop			; (mov r8, r8)
10008e5c:	1001834c 	.word	0x1001834c
10008e60:	1000aa75 	.word	0x1000aa75
10008e64:	1000aa19 	.word	0x1000aa19
10008e68:	10008129 	.word	0x10008129

10008e6c <mpu_set_int_latched>:
 *  Any MPU register will clear the interrupt.
 *  @param[in]  enable  1 to enable, 0 to disable.
 *  @return     0 if successful.
 */
int mpu_set_int_latched(unsigned char enable)
{
10008e6c:	b530      	push	{r4, r5, lr}
10008e6e:	b083      	sub	sp, #12
10008e70:	0004      	movs	r4, r0
    unsigned char tmp;
    if (st.chip_cfg.latched_int == enable)
10008e72:	2323      	movs	r3, #35	; 0x23
10008e74:	4a1c      	ldr	r2, [pc, #112]	; (10008ee8 <mpu_set_int_latched+0x7c>)
10008e76:	5cd3      	ldrb	r3, [r2, r3]
10008e78:	4283      	cmp	r3, r0
10008e7a:	d02e      	beq.n	10008eda <mpu_set_int_latched+0x6e>
        return 0;

    if (enable)
10008e7c:	2800      	cmp	r0, #0
10008e7e:	d003      	beq.n	10008e88 <mpu_set_int_latched+0x1c>
        tmp = BIT_LATCH_EN | BIT_ANY_RD_CLR;
10008e80:	2230      	movs	r2, #48	; 0x30
10008e82:	466b      	mov	r3, sp
10008e84:	71da      	strb	r2, [r3, #7]
10008e86:	e002      	b.n	10008e8e <mpu_set_int_latched+0x22>
    else
        tmp = 0;
10008e88:	2200      	movs	r2, #0
10008e8a:	466b      	mov	r3, sp
10008e8c:	71da      	strb	r2, [r3, #7]
    if (st.chip_cfg.bypass_mode)
10008e8e:	4b16      	ldr	r3, [pc, #88]	; (10008ee8 <mpu_set_int_latched+0x7c>)
10008e90:	7c9b      	ldrb	r3, [r3, #18]
10008e92:	2b00      	cmp	r3, #0
10008e94:	d005      	beq.n	10008ea2 <mpu_set_int_latched+0x36>
        tmp |= BIT_BYPASS_EN;
10008e96:	466b      	mov	r3, sp
10008e98:	1dda      	adds	r2, r3, #7
10008e9a:	79d9      	ldrb	r1, [r3, #7]
10008e9c:	2302      	movs	r3, #2
10008e9e:	430b      	orrs	r3, r1
10008ea0:	7013      	strb	r3, [r2, #0]
    if (st.chip_cfg.active_low_int)
10008ea2:	2322      	movs	r3, #34	; 0x22
10008ea4:	4a10      	ldr	r2, [pc, #64]	; (10008ee8 <mpu_set_int_latched+0x7c>)
10008ea6:	5cd3      	ldrb	r3, [r2, r3]
10008ea8:	2b00      	cmp	r3, #0
10008eaa:	d006      	beq.n	10008eba <mpu_set_int_latched+0x4e>
        tmp |= BIT_ACTL;
10008eac:	466b      	mov	r3, sp
10008eae:	1dda      	adds	r2, r3, #7
10008eb0:	79db      	ldrb	r3, [r3, #7]
10008eb2:	2180      	movs	r1, #128	; 0x80
10008eb4:	4249      	negs	r1, r1
10008eb6:	430b      	orrs	r3, r1
10008eb8:	7013      	strb	r3, [r2, #0]
    if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
10008eba:	4b0b      	ldr	r3, [pc, #44]	; (10008ee8 <mpu_set_int_latched+0x7c>)
10008ebc:	681a      	ldr	r2, [r3, #0]
10008ebe:	7dd1      	ldrb	r1, [r2, #23]
10008ec0:	685b      	ldr	r3, [r3, #4]
10008ec2:	7818      	ldrb	r0, [r3, #0]
10008ec4:	466b      	mov	r3, sp
10008ec6:	3307      	adds	r3, #7
10008ec8:	2201      	movs	r2, #1
10008eca:	4d08      	ldr	r5, [pc, #32]	; (10008eec <mpu_set_int_latched+0x80>)
10008ecc:	47a8      	blx	r5
10008ece:	2800      	cmp	r0, #0
10008ed0:	d105      	bne.n	10008ede <mpu_set_int_latched+0x72>
        return -1;
    st.chip_cfg.latched_int = enable;
10008ed2:	2323      	movs	r3, #35	; 0x23
10008ed4:	4a04      	ldr	r2, [pc, #16]	; (10008ee8 <mpu_set_int_latched+0x7c>)
10008ed6:	54d4      	strb	r4, [r2, r3]
    return 0;
10008ed8:	e003      	b.n	10008ee2 <mpu_set_int_latched+0x76>
 */
int mpu_set_int_latched(unsigned char enable)
{
    unsigned char tmp;
    if (st.chip_cfg.latched_int == enable)
        return 0;
10008eda:	2000      	movs	r0, #0
10008edc:	e001      	b.n	10008ee2 <mpu_set_int_latched+0x76>
    if (st.chip_cfg.bypass_mode)
        tmp |= BIT_BYPASS_EN;
    if (st.chip_cfg.active_low_int)
        tmp |= BIT_ACTL;
    if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
        return -1;
10008ede:	2001      	movs	r0, #1
10008ee0:	4240      	negs	r0, r0
    st.chip_cfg.latched_int = enable;
    return 0;
}
10008ee2:	b003      	add	sp, #12
10008ee4:	bd30      	pop	{r4, r5, pc}
10008ee6:	46c0      	nop			; (mov r8, r8)
10008ee8:	1001834c 	.word	0x1001834c
10008eec:	1000aa19 	.word	0x1000aa19

10008ef0 <mpu_lp_accel_mode>:
 *  @param[in]  rate        Minimum sampling rate, or zero to disable LP
 *                          accel mode.
 *  @return     0 if successful.
 */
int mpu_lp_accel_mode(unsigned short rate)
{
10008ef0:	b510      	push	{r4, lr}
10008ef2:	b082      	sub	sp, #8
10008ef4:	1e04      	subs	r4, r0, #0
    unsigned char tmp[2];

    if (rate > 40)
10008ef6:	2c28      	cmp	r4, #40	; 0x28
10008ef8:	d878      	bhi.n	10008fec <mpu_lp_accel_mode+0xfc>
        return -1;

    if (!rate) {
10008efa:	2800      	cmp	r0, #0
10008efc:	d115      	bne.n	10008f2a <mpu_lp_accel_mode+0x3a>
        mpu_set_int_latched(0);
10008efe:	2000      	movs	r0, #0
10008f00:	4b44      	ldr	r3, [pc, #272]	; (10009014 <mpu_lp_accel_mode+0x124>)
10008f02:	4798      	blx	r3
        tmp[0] = 0;
10008f04:	ab01      	add	r3, sp, #4
10008f06:	2200      	movs	r2, #0
10008f08:	701a      	strb	r2, [r3, #0]
        tmp[1] = BIT_STBY_XYZG;
10008f0a:	3207      	adds	r2, #7
10008f0c:	705a      	strb	r2, [r3, #1]
        if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
10008f0e:	4a42      	ldr	r2, [pc, #264]	; (10009018 <mpu_lp_accel_mode+0x128>)
10008f10:	6811      	ldr	r1, [r2, #0]
10008f12:	7d49      	ldrb	r1, [r1, #21]
10008f14:	6852      	ldr	r2, [r2, #4]
10008f16:	7810      	ldrb	r0, [r2, #0]
10008f18:	2202      	movs	r2, #2
10008f1a:	4c40      	ldr	r4, [pc, #256]	; (1000901c <mpu_lp_accel_mode+0x12c>)
10008f1c:	47a0      	blx	r4
10008f1e:	1e04      	subs	r4, r0, #0
10008f20:	d167      	bne.n	10008ff2 <mpu_lp_accel_mode+0x102>
            return -1;
        st.chip_cfg.lp_accel_mode = 0;
10008f22:	2200      	movs	r2, #0
10008f24:	4b3c      	ldr	r3, [pc, #240]	; (10009018 <mpu_lp_accel_mode+0x128>)
10008f26:	751a      	strb	r2, [r3, #20]
        return 0;
10008f28:	e071      	b.n	1000900e <mpu_lp_accel_mode+0x11e>
     * it gets a chance to deassert the interrupt pin; therefore, we shift this
     * responsibility over to the MCU.
     *
     * Any register read will clear the interrupt.
     */
    mpu_set_int_latched(1);
10008f2a:	2001      	movs	r0, #1
10008f2c:	4b39      	ldr	r3, [pc, #228]	; (10009014 <mpu_lp_accel_mode+0x124>)
10008f2e:	4798      	blx	r3
    tmp[1] = (tmp[1] << 6) | BIT_STBY_XYZG;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
        return -1;
#elif defined MPU6500
    /* Set wake frequency. */
    if (rate == 1)
10008f30:	2c01      	cmp	r4, #1
10008f32:	d103      	bne.n	10008f3c <mpu_lp_accel_mode+0x4c>
        tmp[0] = INV_LPA_1_25HZ;
10008f34:	2202      	movs	r2, #2
10008f36:	ab01      	add	r3, sp, #4
10008f38:	701a      	strb	r2, [r3, #0]
10008f3a:	e01a      	b.n	10008f72 <mpu_lp_accel_mode+0x82>
    else if (rate == 2)
10008f3c:	2c02      	cmp	r4, #2
10008f3e:	d103      	bne.n	10008f48 <mpu_lp_accel_mode+0x58>
        tmp[0] = INV_LPA_2_5HZ;
10008f40:	2203      	movs	r2, #3
10008f42:	ab01      	add	r3, sp, #4
10008f44:	701a      	strb	r2, [r3, #0]
10008f46:	e014      	b.n	10008f72 <mpu_lp_accel_mode+0x82>
    else if (rate <= 5)
10008f48:	2c05      	cmp	r4, #5
10008f4a:	d803      	bhi.n	10008f54 <mpu_lp_accel_mode+0x64>
        tmp[0] = INV_LPA_5HZ;
10008f4c:	2204      	movs	r2, #4
10008f4e:	ab01      	add	r3, sp, #4
10008f50:	701a      	strb	r2, [r3, #0]
10008f52:	e00e      	b.n	10008f72 <mpu_lp_accel_mode+0x82>
    else if (rate <= 10)
10008f54:	2c0a      	cmp	r4, #10
10008f56:	d803      	bhi.n	10008f60 <mpu_lp_accel_mode+0x70>
        tmp[0] = INV_LPA_10HZ;
10008f58:	2205      	movs	r2, #5
10008f5a:	ab01      	add	r3, sp, #4
10008f5c:	701a      	strb	r2, [r3, #0]
10008f5e:	e008      	b.n	10008f72 <mpu_lp_accel_mode+0x82>
    else if (rate <= 20)
10008f60:	2c14      	cmp	r4, #20
10008f62:	d803      	bhi.n	10008f6c <mpu_lp_accel_mode+0x7c>
        tmp[0] = INV_LPA_20HZ;
10008f64:	2206      	movs	r2, #6
10008f66:	ab01      	add	r3, sp, #4
10008f68:	701a      	strb	r2, [r3, #0]
10008f6a:	e002      	b.n	10008f72 <mpu_lp_accel_mode+0x82>
    else if (rate <= 40)
        tmp[0] = INV_LPA_40HZ;
10008f6c:	2207      	movs	r2, #7
10008f6e:	ab01      	add	r3, sp, #4
10008f70:	701a      	strb	r2, [r3, #0]
        tmp[0] = INV_LPA_160HZ;
    else if (rate <= 320)
        tmp[0] = INV_LPA_320HZ;
    else
        tmp[0] = INV_LPA_640HZ;
    if (i2c_write(st.hw->addr, st.reg->lp_accel_odr, 1, tmp))
10008f72:	4b29      	ldr	r3, [pc, #164]	; (10009018 <mpu_lp_accel_mode+0x128>)
10008f74:	681a      	ldr	r2, [r3, #0]
10008f76:	7a51      	ldrb	r1, [r2, #9]
10008f78:	685b      	ldr	r3, [r3, #4]
10008f7a:	7818      	ldrb	r0, [r3, #0]
10008f7c:	ab01      	add	r3, sp, #4
10008f7e:	2201      	movs	r2, #1
10008f80:	4c26      	ldr	r4, [pc, #152]	; (1000901c <mpu_lp_accel_mode+0x12c>)
10008f82:	47a0      	blx	r4
10008f84:	2800      	cmp	r0, #0
10008f86:	d137      	bne.n	10008ff8 <mpu_lp_accel_mode+0x108>
        return -1;
    /* Enable LP ACCEL mode, ACCEL_FCHOICE_B=1*/
    if (i2c_read(st.hw->addr, st.reg->accel_cfg2, 1, tmp))
10008f88:	4b23      	ldr	r3, [pc, #140]	; (10009018 <mpu_lp_accel_mode+0x128>)
10008f8a:	681a      	ldr	r2, [r3, #0]
10008f8c:	7a11      	ldrb	r1, [r2, #8]
10008f8e:	685b      	ldr	r3, [r3, #4]
10008f90:	7818      	ldrb	r0, [r3, #0]
10008f92:	ab01      	add	r3, sp, #4
10008f94:	2201      	movs	r2, #1
10008f96:	4c22      	ldr	r4, [pc, #136]	; (10009020 <mpu_lp_accel_mode+0x130>)
10008f98:	47a0      	blx	r4
10008f9a:	2800      	cmp	r0, #0
10008f9c:	d12f      	bne.n	10008ffe <mpu_lp_accel_mode+0x10e>
       	return -1;

    tmp[0] = BIT_ACCL_FC_B | tmp[0];
10008f9e:	ab01      	add	r3, sp, #4
10008fa0:	7819      	ldrb	r1, [r3, #0]
10008fa2:	2208      	movs	r2, #8
10008fa4:	430a      	orrs	r2, r1
10008fa6:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->accel_cfg2, 1, tmp))
10008fa8:	4a1b      	ldr	r2, [pc, #108]	; (10009018 <mpu_lp_accel_mode+0x128>)
10008faa:	6811      	ldr	r1, [r2, #0]
10008fac:	7a09      	ldrb	r1, [r1, #8]
10008fae:	6852      	ldr	r2, [r2, #4]
10008fb0:	7810      	ldrb	r0, [r2, #0]
10008fb2:	2201      	movs	r2, #1
10008fb4:	4c19      	ldr	r4, [pc, #100]	; (1000901c <mpu_lp_accel_mode+0x12c>)
10008fb6:	47a0      	blx	r4
10008fb8:	2800      	cmp	r0, #0
10008fba:	d123      	bne.n	10009004 <mpu_lp_accel_mode+0x114>
    	return -1;
    tmp[0] = BIT_LPA_CYCLE;
10008fbc:	ab01      	add	r3, sp, #4
10008fbe:	2220      	movs	r2, #32
10008fc0:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, tmp))
10008fc2:	4a15      	ldr	r2, [pc, #84]	; (10009018 <mpu_lp_accel_mode+0x128>)
10008fc4:	6811      	ldr	r1, [r2, #0]
10008fc6:	7d49      	ldrb	r1, [r1, #21]
10008fc8:	6852      	ldr	r2, [r2, #4]
10008fca:	7810      	ldrb	r0, [r2, #0]
10008fcc:	2201      	movs	r2, #1
10008fce:	4c13      	ldr	r4, [pc, #76]	; (1000901c <mpu_lp_accel_mode+0x12c>)
10008fd0:	47a0      	blx	r4
10008fd2:	1e04      	subs	r4, r0, #0
10008fd4:	d119      	bne.n	1000900a <mpu_lp_accel_mode+0x11a>
        return -1;
#endif
    st.chip_cfg.sensors = INV_XYZ_ACCEL;
10008fd6:	4b10      	ldr	r3, [pc, #64]	; (10009018 <mpu_lp_accel_mode+0x128>)
10008fd8:	2208      	movs	r2, #8
10008fda:	729a      	strb	r2, [r3, #10]
    st.chip_cfg.clk_src = 0;
10008fdc:	2200      	movs	r2, #0
10008fde:	731a      	strb	r2, [r3, #12]
    st.chip_cfg.lp_accel_mode = 1;
10008fe0:	3201      	adds	r2, #1
10008fe2:	751a      	strb	r2, [r3, #20]
    mpu_configure_fifo(0);
10008fe4:	2000      	movs	r0, #0
10008fe6:	4b0f      	ldr	r3, [pc, #60]	; (10009024 <mpu_lp_accel_mode+0x134>)
10008fe8:	4798      	blx	r3

    return 0;
10008fea:	e010      	b.n	1000900e <mpu_lp_accel_mode+0x11e>
int mpu_lp_accel_mode(unsigned short rate)
{
    unsigned char tmp[2];

    if (rate > 40)
        return -1;
10008fec:	2401      	movs	r4, #1
10008fee:	4264      	negs	r4, r4
10008ff0:	e00d      	b.n	1000900e <mpu_lp_accel_mode+0x11e>
    if (!rate) {
        mpu_set_int_latched(0);
        tmp[0] = 0;
        tmp[1] = BIT_STBY_XYZG;
        if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
            return -1;
10008ff2:	2401      	movs	r4, #1
10008ff4:	4264      	negs	r4, r4
10008ff6:	e00a      	b.n	1000900e <mpu_lp_accel_mode+0x11e>
    else if (rate <= 320)
        tmp[0] = INV_LPA_320HZ;
    else
        tmp[0] = INV_LPA_640HZ;
    if (i2c_write(st.hw->addr, st.reg->lp_accel_odr, 1, tmp))
        return -1;
10008ff8:	2401      	movs	r4, #1
10008ffa:	4264      	negs	r4, r4
10008ffc:	e007      	b.n	1000900e <mpu_lp_accel_mode+0x11e>
    /* Enable LP ACCEL mode, ACCEL_FCHOICE_B=1*/
    if (i2c_read(st.hw->addr, st.reg->accel_cfg2, 1, tmp))
       	return -1;
10008ffe:	2401      	movs	r4, #1
10009000:	4264      	negs	r4, r4
10009002:	e004      	b.n	1000900e <mpu_lp_accel_mode+0x11e>

    tmp[0] = BIT_ACCL_FC_B | tmp[0];
    if (i2c_write(st.hw->addr, st.reg->accel_cfg2, 1, tmp))
    	return -1;
10009004:	2401      	movs	r4, #1
10009006:	4264      	negs	r4, r4
10009008:	e001      	b.n	1000900e <mpu_lp_accel_mode+0x11e>
    tmp[0] = BIT_LPA_CYCLE;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, tmp))
        return -1;
1000900a:	2401      	movs	r4, #1
1000900c:	4264      	negs	r4, r4
    st.chip_cfg.clk_src = 0;
    st.chip_cfg.lp_accel_mode = 1;
    mpu_configure_fifo(0);

    return 0;
}
1000900e:	0020      	movs	r0, r4
10009010:	b002      	add	sp, #8
10009012:	bd10      	pop	{r4, pc}
10009014:	10008e6d 	.word	0x10008e6d
10009018:	1001834c 	.word	0x1001834c
1000901c:	1000aa19 	.word	0x1000aa19
10009020:	1000aa75 	.word	0x1000aa75
10009024:	10008ab9 	.word	0x10008ab9

10009028 <mpu_set_sample_rate>:
 *  Sampling rate must be between 4Hz and 1kHz.
 *  @param[in]  rate    Desired sampling rate (Hz).
 *  @return     0 if successful.
 */
int mpu_set_sample_rate(unsigned short rate)
{
10009028:	b530      	push	{r4, r5, lr}
1000902a:	b083      	sub	sp, #12
1000902c:	0004      	movs	r4, r0
    unsigned char data;

    if (!(st.chip_cfg.sensors))
1000902e:	4b2c      	ldr	r3, [pc, #176]	; (100090e0 <mpu_set_sample_rate+0xb8>)
10009030:	7a9b      	ldrb	r3, [r3, #10]
10009032:	2b00      	cmp	r3, #0
10009034:	d048      	beq.n	100090c8 <mpu_set_sample_rate+0xa0>
        return -1;

    if (st.chip_cfg.dmp_on)
10009036:	2324      	movs	r3, #36	; 0x24
10009038:	4a29      	ldr	r2, [pc, #164]	; (100090e0 <mpu_set_sample_rate+0xb8>)
1000903a:	5cd3      	ldrb	r3, [r2, r3]
1000903c:	2b00      	cmp	r3, #0
1000903e:	d146      	bne.n	100090ce <mpu_set_sample_rate+0xa6>
        return -1;
    else {
        if (st.chip_cfg.lp_accel_mode) {
10009040:	7d13      	ldrb	r3, [r2, #20]
10009042:	2b00      	cmp	r3, #0
10009044:	d00a      	beq.n	1000905c <mpu_set_sample_rate+0x34>
            if (rate && (rate <= 40)) {
10009046:	1e43      	subs	r3, r0, #1
10009048:	b29b      	uxth	r3, r3
1000904a:	2b27      	cmp	r3, #39	; 0x27
1000904c:	d803      	bhi.n	10009056 <mpu_set_sample_rate+0x2e>
                /* Just stay in low-power accel mode. */
                mpu_lp_accel_mode(rate);
1000904e:	4b25      	ldr	r3, [pc, #148]	; (100090e4 <mpu_set_sample_rate+0xbc>)
10009050:	4798      	blx	r3
                return 0;
10009052:	2400      	movs	r4, #0
10009054:	e040      	b.n	100090d8 <mpu_set_sample_rate+0xb0>
            }
            /* Requested rate exceeds the allowed frequencies in LP accel mode,
             * switch back to full-power mode.
             */
            mpu_lp_accel_mode(0);
10009056:	2000      	movs	r0, #0
10009058:	4b22      	ldr	r3, [pc, #136]	; (100090e4 <mpu_set_sample_rate+0xbc>)
1000905a:	4798      	blx	r3
        }
        if (rate < 4)
            rate = 4;
1000905c:	2104      	movs	r1, #4
            /* Requested rate exceeds the allowed frequencies in LP accel mode,
             * switch back to full-power mode.
             */
            mpu_lp_accel_mode(0);
        }
        if (rate < 4)
1000905e:	2c03      	cmp	r4, #3
10009060:	d907      	bls.n	10009072 <mpu_set_sample_rate+0x4a>
10009062:	1c21      	adds	r1, r4, #0
10009064:	23fa      	movs	r3, #250	; 0xfa
10009066:	009b      	lsls	r3, r3, #2
10009068:	429c      	cmp	r4, r3
1000906a:	d901      	bls.n	10009070 <mpu_set_sample_rate+0x48>
1000906c:	4b1e      	ldr	r3, [pc, #120]	; (100090e8 <mpu_set_sample_rate+0xc0>)
1000906e:	8819      	ldrh	r1, [r3, #0]
10009070:	b289      	uxth	r1, r1
            rate = 4;
        else if (rate > 1000)
            rate = 1000;

        data = 1000 / rate - 1;
10009072:	466b      	mov	r3, sp
10009074:	1ddc      	adds	r4, r3, #7
10009076:	20fa      	movs	r0, #250	; 0xfa
10009078:	0080      	lsls	r0, r0, #2
1000907a:	4b1c      	ldr	r3, [pc, #112]	; (100090ec <mpu_set_sample_rate+0xc4>)
1000907c:	4798      	blx	r3
1000907e:	3801      	subs	r0, #1
10009080:	7020      	strb	r0, [r4, #0]
        if (i2c_write(st.hw->addr, st.reg->rate_div, 1, &data))
10009082:	4b17      	ldr	r3, [pc, #92]	; (100090e0 <mpu_set_sample_rate+0xb8>)
10009084:	681a      	ldr	r2, [r3, #0]
10009086:	7851      	ldrb	r1, [r2, #1]
10009088:	685b      	ldr	r3, [r3, #4]
1000908a:	7818      	ldrb	r0, [r3, #0]
1000908c:	0023      	movs	r3, r4
1000908e:	2201      	movs	r2, #1
10009090:	4c17      	ldr	r4, [pc, #92]	; (100090f0 <mpu_set_sample_rate+0xc8>)
10009092:	47a0      	blx	r4
10009094:	1e04      	subs	r4, r0, #0
10009096:	d11d      	bne.n	100090d4 <mpu_set_sample_rate+0xac>
            return -1;

        st.chip_cfg.sample_rate = 1000 / (1 + data);
10009098:	4d11      	ldr	r5, [pc, #68]	; (100090e0 <mpu_set_sample_rate+0xb8>)
1000909a:	466b      	mov	r3, sp
1000909c:	79d9      	ldrb	r1, [r3, #7]
1000909e:	3101      	adds	r1, #1
100090a0:	20fa      	movs	r0, #250	; 0xfa
100090a2:	0080      	lsls	r0, r0, #2
100090a4:	4b11      	ldr	r3, [pc, #68]	; (100090ec <mpu_set_sample_rate+0xc4>)
100090a6:	4798      	blx	r3
100090a8:	81e8      	strh	r0, [r5, #14]

#ifdef AK89xx_SECONDARY
        mpu_set_compass_sample_rate(min(st.chip_cfg.compass_sample_rate, MAX_COMPASS_SAMPLE_RATE));
100090aa:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
100090ac:	1c18      	adds	r0, r3, #0
100090ae:	b29b      	uxth	r3, r3
100090b0:	2b64      	cmp	r3, #100	; 0x64
100090b2:	d900      	bls.n	100090b6 <mpu_set_sample_rate+0x8e>
100090b4:	2064      	movs	r0, #100	; 0x64
100090b6:	b280      	uxth	r0, r0
100090b8:	4b0e      	ldr	r3, [pc, #56]	; (100090f4 <mpu_set_sample_rate+0xcc>)
100090ba:	4798      	blx	r3
#endif

        /* Automatically set LPF to 1/2 sampling rate. */
        mpu_set_lpf(st.chip_cfg.sample_rate >> 1);
100090bc:	4b08      	ldr	r3, [pc, #32]	; (100090e0 <mpu_set_sample_rate+0xb8>)
100090be:	89d8      	ldrh	r0, [r3, #14]
100090c0:	0840      	lsrs	r0, r0, #1
100090c2:	4b0d      	ldr	r3, [pc, #52]	; (100090f8 <mpu_set_sample_rate+0xd0>)
100090c4:	4798      	blx	r3
        return 0;
100090c6:	e007      	b.n	100090d8 <mpu_set_sample_rate+0xb0>
int mpu_set_sample_rate(unsigned short rate)
{
    unsigned char data;

    if (!(st.chip_cfg.sensors))
        return -1;
100090c8:	2401      	movs	r4, #1
100090ca:	4264      	negs	r4, r4
100090cc:	e004      	b.n	100090d8 <mpu_set_sample_rate+0xb0>

    if (st.chip_cfg.dmp_on)
        return -1;
100090ce:	2401      	movs	r4, #1
100090d0:	4264      	negs	r4, r4
100090d2:	e001      	b.n	100090d8 <mpu_set_sample_rate+0xb0>
        else if (rate > 1000)
            rate = 1000;

        data = 1000 / rate - 1;
        if (i2c_write(st.hw->addr, st.reg->rate_div, 1, &data))
            return -1;
100090d4:	2401      	movs	r4, #1
100090d6:	4264      	negs	r4, r4

        /* Automatically set LPF to 1/2 sampling rate. */
        mpu_set_lpf(st.chip_cfg.sample_rate >> 1);
        return 0;
    }
}
100090d8:	0020      	movs	r0, r4
100090da:	b003      	add	sp, #12
100090dc:	bd30      	pop	{r4, r5, pc}
100090de:	46c0      	nop			; (mov r8, r8)
100090e0:	1001834c 	.word	0x1001834c
100090e4:	10008ef1 	.word	0x10008ef1
100090e8:	100162c0 	.word	0x100162c0
100090ec:	10013125 	.word	0x10013125
100090f0:	1000aa19 	.word	0x1000aa19
100090f4:	10008a41 	.word	0x10008a41
100090f8:	10008969 	.word	0x10008969

100090fc <mpu_set_sensors>:
 *  \n INV_XYZ_COMPASS
 *  @param[in]  sensors    Mask of sensors to wake.
 *  @return     0 if successful.
 */
int mpu_set_sensors(unsigned char sensors)
{
100090fc:	b530      	push	{r4, r5, lr}
100090fe:	b083      	sub	sp, #12
10009100:	0004      	movs	r4, r0
    unsigned char data;
#ifdef AK89xx_SECONDARY
    unsigned char user_ctrl;
#endif

    if (sensors & INV_XYZ_GYRO)
10009102:	2370      	movs	r3, #112	; 0x70
10009104:	4203      	tst	r3, r0
10009106:	d003      	beq.n	10009110 <mpu_set_sensors+0x14>
        data = INV_CLK_PLL;
10009108:	2201      	movs	r2, #1
1000910a:	466b      	mov	r3, sp
1000910c:	71da      	strb	r2, [r3, #7]
1000910e:	e015      	b.n	1000913c <mpu_set_sensors+0x40>
    else if (sensors)
10009110:	2800      	cmp	r0, #0
10009112:	d003      	beq.n	1000911c <mpu_set_sensors+0x20>
        data = 0;
10009114:	2200      	movs	r2, #0
10009116:	466b      	mov	r3, sp
10009118:	71da      	strb	r2, [r3, #7]
1000911a:	e00f      	b.n	1000913c <mpu_set_sensors+0x40>
    else
        data = BIT_SLEEP;
1000911c:	466b      	mov	r3, sp
1000911e:	3307      	adds	r3, #7
10009120:	2240      	movs	r2, #64	; 0x40
10009122:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, &data)) {
10009124:	4a6a      	ldr	r2, [pc, #424]	; (100092d0 <mpu_set_sensors+0x1d4>)
10009126:	6811      	ldr	r1, [r2, #0]
10009128:	7d49      	ldrb	r1, [r1, #21]
1000912a:	6852      	ldr	r2, [r2, #4]
1000912c:	7810      	ldrb	r0, [r2, #0]
1000912e:	2201      	movs	r2, #1
10009130:	4d68      	ldr	r5, [pc, #416]	; (100092d4 <mpu_set_sensors+0x1d8>)
10009132:	47a8      	blx	r5
10009134:	2800      	cmp	r0, #0
10009136:	d100      	bne.n	1000913a <mpu_set_sensors+0x3e>
10009138:	e0b2      	b.n	100092a0 <mpu_set_sensors+0x1a4>
1000913a:	e00b      	b.n	10009154 <mpu_set_sensors+0x58>
1000913c:	4b64      	ldr	r3, [pc, #400]	; (100092d0 <mpu_set_sensors+0x1d4>)
1000913e:	681a      	ldr	r2, [r3, #0]
10009140:	7d51      	ldrb	r1, [r2, #21]
10009142:	685b      	ldr	r3, [r3, #4]
10009144:	7818      	ldrb	r0, [r3, #0]
10009146:	466b      	mov	r3, sp
10009148:	3307      	adds	r3, #7
1000914a:	2201      	movs	r2, #1
1000914c:	4d61      	ldr	r5, [pc, #388]	; (100092d4 <mpu_set_sensors+0x1d8>)
1000914e:	47a8      	blx	r5
10009150:	2800      	cmp	r0, #0
10009152:	d005      	beq.n	10009160 <mpu_set_sensors+0x64>
        st.chip_cfg.sensors = 0;
10009154:	2200      	movs	r2, #0
10009156:	4b5e      	ldr	r3, [pc, #376]	; (100092d0 <mpu_set_sensors+0x1d4>)
10009158:	729a      	strb	r2, [r3, #10]
        return -1;
1000915a:	2501      	movs	r5, #1
1000915c:	426d      	negs	r5, r5
1000915e:	e0b4      	b.n	100092ca <mpu_set_sensors+0x1ce>
    }
    st.chip_cfg.clk_src = data & ~BIT_SLEEP;
10009160:	466b      	mov	r3, sp
10009162:	1dda      	adds	r2, r3, #7
10009164:	79db      	ldrb	r3, [r3, #7]
10009166:	2140      	movs	r1, #64	; 0x40
10009168:	438b      	bics	r3, r1
1000916a:	4959      	ldr	r1, [pc, #356]	; (100092d0 <mpu_set_sensors+0x1d4>)
1000916c:	730b      	strb	r3, [r1, #12]

    data = 0;
1000916e:	2300      	movs	r3, #0
10009170:	7013      	strb	r3, [r2, #0]
    if (!(sensors & INV_X_GYRO))
10009172:	0663      	lsls	r3, r4, #25
10009174:	d402      	bmi.n	1000917c <mpu_set_sensors+0x80>
        data |= BIT_STBY_XG;
10009176:	2204      	movs	r2, #4
10009178:	466b      	mov	r3, sp
1000917a:	71da      	strb	r2, [r3, #7]
    if (!(sensors & INV_Y_GYRO))
1000917c:	06a3      	lsls	r3, r4, #26
1000917e:	d405      	bmi.n	1000918c <mpu_set_sensors+0x90>
        data |= BIT_STBY_YG;
10009180:	466b      	mov	r3, sp
10009182:	1dda      	adds	r2, r3, #7
10009184:	79d9      	ldrb	r1, [r3, #7]
10009186:	2302      	movs	r3, #2
10009188:	430b      	orrs	r3, r1
1000918a:	7013      	strb	r3, [r2, #0]
    if (!(sensors & INV_Z_GYRO))
1000918c:	06e3      	lsls	r3, r4, #27
1000918e:	d405      	bmi.n	1000919c <mpu_set_sensors+0xa0>
        data |= BIT_STBY_ZG;
10009190:	466b      	mov	r3, sp
10009192:	1dda      	adds	r2, r3, #7
10009194:	79d9      	ldrb	r1, [r3, #7]
10009196:	2301      	movs	r3, #1
10009198:	430b      	orrs	r3, r1
1000919a:	7013      	strb	r3, [r2, #0]
    if (!(sensors & INV_XYZ_ACCEL))
1000919c:	0723      	lsls	r3, r4, #28
1000919e:	d405      	bmi.n	100091ac <mpu_set_sensors+0xb0>
        data |= BIT_STBY_XYZA;
100091a0:	466b      	mov	r3, sp
100091a2:	1dda      	adds	r2, r3, #7
100091a4:	79d9      	ldrb	r1, [r3, #7]
100091a6:	2338      	movs	r3, #56	; 0x38
100091a8:	430b      	orrs	r3, r1
100091aa:	7013      	strb	r3, [r2, #0]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_2, 1, &data)) {
100091ac:	4b48      	ldr	r3, [pc, #288]	; (100092d0 <mpu_set_sensors+0x1d4>)
100091ae:	681a      	ldr	r2, [r3, #0]
100091b0:	7d91      	ldrb	r1, [r2, #22]
100091b2:	685b      	ldr	r3, [r3, #4]
100091b4:	7818      	ldrb	r0, [r3, #0]
100091b6:	466b      	mov	r3, sp
100091b8:	3307      	adds	r3, #7
100091ba:	2201      	movs	r2, #1
100091bc:	4d45      	ldr	r5, [pc, #276]	; (100092d4 <mpu_set_sensors+0x1d8>)
100091be:	47a8      	blx	r5
100091c0:	2800      	cmp	r0, #0
100091c2:	d005      	beq.n	100091d0 <mpu_set_sensors+0xd4>
        st.chip_cfg.sensors = 0;
100091c4:	2200      	movs	r2, #0
100091c6:	4b42      	ldr	r3, [pc, #264]	; (100092d0 <mpu_set_sensors+0x1d4>)
100091c8:	729a      	strb	r2, [r3, #10]
        return -1;
100091ca:	2501      	movs	r5, #1
100091cc:	426d      	negs	r5, r5
100091ce:	e07c      	b.n	100092ca <mpu_set_sensors+0x1ce>
    }

    if (sensors && (sensors != INV_XYZ_ACCEL))
100091d0:	2308      	movs	r3, #8
100091d2:	0022      	movs	r2, r4
100091d4:	439a      	bics	r2, r3
100091d6:	d06b      	beq.n	100092b0 <mpu_set_sensors+0x1b4>
        /* Latched interrupts only used in LP accel mode. */
        mpu_set_int_latched(0);
100091d8:	2000      	movs	r0, #0
100091da:	4b3f      	ldr	r3, [pc, #252]	; (100092d8 <mpu_set_sensors+0x1dc>)
100091dc:	4798      	blx	r3
    if (sensors & INV_XYZ_COMPASS)
        mpu_set_bypass(1);
    else
        mpu_set_bypass(0);
#else
    if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
100091de:	4b3c      	ldr	r3, [pc, #240]	; (100092d0 <mpu_set_sensors+0x1d4>)
100091e0:	681a      	ldr	r2, [r3, #0]
100091e2:	7911      	ldrb	r1, [r2, #4]
100091e4:	685b      	ldr	r3, [r3, #4]
100091e6:	7818      	ldrb	r0, [r3, #0]
100091e8:	466b      	mov	r3, sp
100091ea:	3306      	adds	r3, #6
100091ec:	2201      	movs	r2, #1
100091ee:	4d3b      	ldr	r5, [pc, #236]	; (100092dc <mpu_set_sensors+0x1e0>)
100091f0:	47a8      	blx	r5
100091f2:	2800      	cmp	r0, #0
100091f4:	d148      	bne.n	10009288 <mpu_set_sensors+0x18c>
        return -1;
    /* Handle AKM power management. */
    if (sensors & INV_XYZ_COMPASS) {
100091f6:	07e3      	lsls	r3, r4, #31
100091f8:	d509      	bpl.n	1000920e <mpu_set_sensors+0x112>
        data = AKM_SINGLE_MEASUREMENT;
100091fa:	2211      	movs	r2, #17
100091fc:	466b      	mov	r3, sp
100091fe:	71da      	strb	r2, [r3, #7]
        user_ctrl |= BIT_AUX_IF_EN;
10009200:	466b      	mov	r3, sp
10009202:	1d9a      	adds	r2, r3, #6
10009204:	7999      	ldrb	r1, [r3, #6]
10009206:	2320      	movs	r3, #32
10009208:	430b      	orrs	r3, r1
1000920a:	7013      	strb	r3, [r2, #0]
1000920c:	e008      	b.n	10009220 <mpu_set_sensors+0x124>
    } else {
        data = AKM_POWER_DOWN;
1000920e:	2210      	movs	r2, #16
10009210:	466b      	mov	r3, sp
10009212:	71da      	strb	r2, [r3, #7]
        user_ctrl &= ~BIT_AUX_IF_EN;
10009214:	466b      	mov	r3, sp
10009216:	1d9a      	adds	r2, r3, #6
10009218:	799b      	ldrb	r3, [r3, #6]
1000921a:	2120      	movs	r1, #32
1000921c:	438b      	bics	r3, r1
1000921e:	7013      	strb	r3, [r2, #0]
    }
    if (st.chip_cfg.dmp_on)
10009220:	2324      	movs	r3, #36	; 0x24
10009222:	4a2b      	ldr	r2, [pc, #172]	; (100092d0 <mpu_set_sensors+0x1d4>)
10009224:	5cd3      	ldrb	r3, [r2, r3]
10009226:	2b00      	cmp	r3, #0
10009228:	d007      	beq.n	1000923a <mpu_set_sensors+0x13e>
        user_ctrl |= BIT_DMP_EN;
1000922a:	466b      	mov	r3, sp
1000922c:	1d9a      	adds	r2, r3, #6
1000922e:	799b      	ldrb	r3, [r3, #6]
10009230:	2180      	movs	r1, #128	; 0x80
10009232:	4249      	negs	r1, r1
10009234:	430b      	orrs	r3, r1
10009236:	7013      	strb	r3, [r2, #0]
10009238:	e005      	b.n	10009246 <mpu_set_sensors+0x14a>
    else
        user_ctrl &= ~BIT_DMP_EN;
1000923a:	466b      	mov	r3, sp
1000923c:	1d9a      	adds	r2, r3, #6
1000923e:	799b      	ldrb	r3, [r3, #6]
10009240:	217f      	movs	r1, #127	; 0x7f
10009242:	400b      	ands	r3, r1
10009244:	7013      	strb	r3, [r2, #0]
    if (i2c_write(st.hw->addr, st.reg->s1_do, 1, &data))
10009246:	4b22      	ldr	r3, [pc, #136]	; (100092d0 <mpu_set_sensors+0x1d4>)
10009248:	2226      	movs	r2, #38	; 0x26
1000924a:	6819      	ldr	r1, [r3, #0]
1000924c:	5c89      	ldrb	r1, [r1, r2]
1000924e:	685b      	ldr	r3, [r3, #4]
10009250:	7818      	ldrb	r0, [r3, #0]
10009252:	466b      	mov	r3, sp
10009254:	3307      	adds	r3, #7
10009256:	3a25      	subs	r2, #37	; 0x25
10009258:	4d1e      	ldr	r5, [pc, #120]	; (100092d4 <mpu_set_sensors+0x1d8>)
1000925a:	47a8      	blx	r5
1000925c:	2800      	cmp	r0, #0
1000925e:	d116      	bne.n	1000928e <mpu_set_sensors+0x192>
        return -1;
    /* Enable/disable I2C master mode. */
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
10009260:	4b1b      	ldr	r3, [pc, #108]	; (100092d0 <mpu_set_sensors+0x1d4>)
10009262:	681a      	ldr	r2, [r3, #0]
10009264:	7911      	ldrb	r1, [r2, #4]
10009266:	685b      	ldr	r3, [r3, #4]
10009268:	7818      	ldrb	r0, [r3, #0]
1000926a:	466b      	mov	r3, sp
1000926c:	3306      	adds	r3, #6
1000926e:	2201      	movs	r2, #1
10009270:	4d18      	ldr	r5, [pc, #96]	; (100092d4 <mpu_set_sensors+0x1d8>)
10009272:	47a8      	blx	r5
10009274:	1e05      	subs	r5, r0, #0
10009276:	d10d      	bne.n	10009294 <mpu_set_sensors+0x198>
        return -1;
#endif
#endif

    st.chip_cfg.sensors = sensors;
10009278:	4b15      	ldr	r3, [pc, #84]	; (100092d0 <mpu_set_sensors+0x1d4>)
1000927a:	729c      	strb	r4, [r3, #10]
    st.chip_cfg.lp_accel_mode = 0;
1000927c:	2200      	movs	r2, #0
1000927e:	751a      	strb	r2, [r3, #20]
    delay_ms(50);
10009280:	2032      	movs	r0, #50	; 0x32
10009282:	4b17      	ldr	r3, [pc, #92]	; (100092e0 <mpu_set_sensors+0x1e4>)
10009284:	4798      	blx	r3
    return 0;
10009286:	e020      	b.n	100092ca <mpu_set_sensors+0x1ce>
        mpu_set_bypass(1);
    else
        mpu_set_bypass(0);
#else
    if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
        return -1;
10009288:	2501      	movs	r5, #1
1000928a:	426d      	negs	r5, r5
1000928c:	e01d      	b.n	100092ca <mpu_set_sensors+0x1ce>
    if (st.chip_cfg.dmp_on)
        user_ctrl |= BIT_DMP_EN;
    else
        user_ctrl &= ~BIT_DMP_EN;
    if (i2c_write(st.hw->addr, st.reg->s1_do, 1, &data))
        return -1;
1000928e:	2501      	movs	r5, #1
10009290:	426d      	negs	r5, r5
10009292:	e01a      	b.n	100092ca <mpu_set_sensors+0x1ce>
    /* Enable/disable I2C master mode. */
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
        return -1;
10009294:	2501      	movs	r5, #1
10009296:	426d      	negs	r5, r5
10009298:	e017      	b.n	100092ca <mpu_set_sensors+0x1ce>
        mpu_set_bypass(1);
    else
        mpu_set_bypass(0);
#else
    if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
        return -1;
1000929a:	2501      	movs	r5, #1
1000929c:	426d      	negs	r5, r5
1000929e:	e014      	b.n	100092ca <mpu_set_sensors+0x1ce>
        data = BIT_SLEEP;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, &data)) {
        st.chip_cfg.sensors = 0;
        return -1;
    }
    st.chip_cfg.clk_src = data & ~BIT_SLEEP;
100092a0:	466b      	mov	r3, sp
100092a2:	3307      	adds	r3, #7
100092a4:	781b      	ldrb	r3, [r3, #0]
100092a6:	2240      	movs	r2, #64	; 0x40
100092a8:	4393      	bics	r3, r2
100092aa:	4a09      	ldr	r2, [pc, #36]	; (100092d0 <mpu_set_sensors+0x1d4>)
100092ac:	7313      	strb	r3, [r2, #12]
100092ae:	e762      	b.n	10009176 <mpu_set_sensors+0x7a>
    if (sensors & INV_XYZ_COMPASS)
        mpu_set_bypass(1);
    else
        mpu_set_bypass(0);
#else
    if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
100092b0:	4b07      	ldr	r3, [pc, #28]	; (100092d0 <mpu_set_sensors+0x1d4>)
100092b2:	681a      	ldr	r2, [r3, #0]
100092b4:	7911      	ldrb	r1, [r2, #4]
100092b6:	685b      	ldr	r3, [r3, #4]
100092b8:	7818      	ldrb	r0, [r3, #0]
100092ba:	466b      	mov	r3, sp
100092bc:	3306      	adds	r3, #6
100092be:	2201      	movs	r2, #1
100092c0:	4d06      	ldr	r5, [pc, #24]	; (100092dc <mpu_set_sensors+0x1e0>)
100092c2:	47a8      	blx	r5
100092c4:	2800      	cmp	r0, #0
100092c6:	d0a2      	beq.n	1000920e <mpu_set_sensors+0x112>
100092c8:	e7e7      	b.n	1000929a <mpu_set_sensors+0x19e>

    st.chip_cfg.sensors = sensors;
    st.chip_cfg.lp_accel_mode = 0;
    delay_ms(50);
    return 0;
}
100092ca:	0028      	movs	r0, r5
100092cc:	b003      	add	sp, #12
100092ce:	bd30      	pop	{r4, r5, pc}
100092d0:	1001834c 	.word	0x1001834c
100092d4:	1000aa19 	.word	0x1000aa19
100092d8:	10008e6d 	.word	0x10008e6d
100092dc:	1000aa75 	.word	0x1000aa75
100092e0:	10008129 	.word	0x10008129

100092e4 <mpu_init>:
 *  Data ready interrupt: Disabled, active low, unlatched.
 *  @param[in]  int_param   Platform-specific parameters to interrupt API.
 *  @return     0 if successful.
 */
int mpu_init(struct int_param_s *int_param)
{
100092e4:	b530      	push	{r4, r5, lr}
100092e6:	b085      	sub	sp, #20
    unsigned char data[6];

    /* Reset device. */
    data[0] = BIT_RESET;
100092e8:	ab02      	add	r3, sp, #8
100092ea:	2280      	movs	r2, #128	; 0x80
100092ec:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
100092ee:	4ab9      	ldr	r2, [pc, #740]	; (100095d4 <mpu_init+0x2f0>)
100092f0:	6811      	ldr	r1, [r2, #0]
100092f2:	7d49      	ldrb	r1, [r1, #21]
100092f4:	6852      	ldr	r2, [r2, #4]
100092f6:	7810      	ldrb	r0, [r2, #0]
100092f8:	2201      	movs	r2, #1
100092fa:	4cb7      	ldr	r4, [pc, #732]	; (100095d8 <mpu_init+0x2f4>)
100092fc:	47a0      	blx	r4
100092fe:	2800      	cmp	r0, #0
10009300:	d000      	beq.n	10009304 <mpu_init+0x20>
10009302:	e149      	b.n	10009598 <mpu_init+0x2b4>
        return -1;
    delay_ms(100);
10009304:	3064      	adds	r0, #100	; 0x64
10009306:	4bb5      	ldr	r3, [pc, #724]	; (100095dc <mpu_init+0x2f8>)
10009308:	4798      	blx	r3

    /* Wake up chip. */
    data[0] = 0x00;
1000930a:	ab02      	add	r3, sp, #8
1000930c:	2200      	movs	r2, #0
1000930e:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
10009310:	4ab0      	ldr	r2, [pc, #704]	; (100095d4 <mpu_init+0x2f0>)
10009312:	6811      	ldr	r1, [r2, #0]
10009314:	7d49      	ldrb	r1, [r1, #21]
10009316:	6852      	ldr	r2, [r2, #4]
10009318:	7810      	ldrb	r0, [r2, #0]
1000931a:	2201      	movs	r2, #1
1000931c:	4cae      	ldr	r4, [pc, #696]	; (100095d8 <mpu_init+0x2f4>)
1000931e:	47a0      	blx	r4
10009320:	2800      	cmp	r0, #0
10009322:	d000      	beq.n	10009326 <mpu_init+0x42>
10009324:	e13b      	b.n	1000959e <mpu_init+0x2ba>
        return -1;

   st.chip_cfg.accel_half = 0;
10009326:	4aab      	ldr	r2, [pc, #684]	; (100095d4 <mpu_init+0x2f0>)
10009328:	2300      	movs	r3, #0
1000932a:	74d3      	strb	r3, [r2, #19]

#ifdef MPU6500
    /* MPU6500 shares 4kB of memory between the DMP and the FIFO. Since the
     * first 3kB are needed by the DMP, we'll use the last 1kB for the FIFO.
     */
    data[0] = BIT_FIFO_SIZE_1024;
1000932c:	ab02      	add	r3, sp, #8
1000932e:	2140      	movs	r1, #64	; 0x40
10009330:	7019      	strb	r1, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->accel_cfg2, 1, data))
10009332:	6811      	ldr	r1, [r2, #0]
10009334:	7a09      	ldrb	r1, [r1, #8]
10009336:	6852      	ldr	r2, [r2, #4]
10009338:	7810      	ldrb	r0, [r2, #0]
1000933a:	2201      	movs	r2, #1
1000933c:	4ca6      	ldr	r4, [pc, #664]	; (100095d8 <mpu_init+0x2f4>)
1000933e:	47a0      	blx	r4
10009340:	2800      	cmp	r0, #0
10009342:	d000      	beq.n	10009346 <mpu_init+0x62>
10009344:	e12e      	b.n	100095a4 <mpu_init+0x2c0>
        return -1;
#endif

    /* Set to invalid values to ensure no I2C writes are skipped. */
    st.chip_cfg.sensors = 0xFF;
10009346:	4ca3      	ldr	r4, [pc, #652]	; (100095d4 <mpu_init+0x2f0>)
10009348:	23ff      	movs	r3, #255	; 0xff
1000934a:	72a3      	strb	r3, [r4, #10]
    st.chip_cfg.gyro_fsr = 0xFF;
1000934c:	7223      	strb	r3, [r4, #8]
    st.chip_cfg.accel_fsr = 0xFF;
1000934e:	7263      	strb	r3, [r4, #9]
    st.chip_cfg.lpf = 0xFF;
10009350:	72e3      	strb	r3, [r4, #11]
    st.chip_cfg.sample_rate = 0xFFFF;
10009352:	2201      	movs	r2, #1
10009354:	4252      	negs	r2, r2
10009356:	81e2      	strh	r2, [r4, #14]
    st.chip_cfg.fifo_enable = 0xFF;
10009358:	7423      	strb	r3, [r4, #16]
    st.chip_cfg.bypass_mode = 0xFF;
1000935a:	74a3      	strb	r3, [r4, #18]
#ifdef AK89xx_SECONDARY
    st.chip_cfg.compass_sample_rate = 0xFFFF;
1000935c:	8522      	strh	r2, [r4, #40]	; 0x28
#endif
    /* mpu_set_sensors always preserves this setting. */
    st.chip_cfg.clk_src = INV_CLK_PLL;
1000935e:	3bfe      	subs	r3, #254	; 0xfe
10009360:	7323      	strb	r3, [r4, #12]
    /* Handled in next call to mpu_set_bypass. */
    st.chip_cfg.active_low_int = 0; // --> interrupt active high!!
10009362:	2500      	movs	r5, #0
10009364:	3321      	adds	r3, #33	; 0x21
10009366:	54e5      	strb	r5, [r4, r3]
    st.chip_cfg.latched_int = 0;
10009368:	3301      	adds	r3, #1
1000936a:	54e5      	strb	r5, [r4, r3]
    st.chip_cfg.int_motion_only = 0;
1000936c:	7565      	strb	r5, [r4, #21]
    st.chip_cfg.lp_accel_mode = 0;
1000936e:	7525      	strb	r5, [r4, #20]
    memset(&st.chip_cfg.cache, 0, sizeof(st.chip_cfg.cache));
10009370:	0020      	movs	r0, r4
10009372:	3016      	adds	r0, #22
10009374:	320d      	adds	r2, #13
10009376:	2100      	movs	r1, #0
10009378:	4b99      	ldr	r3, [pc, #612]	; (100095e0 <mpu_init+0x2fc>)
1000937a:	4798      	blx	r3
    st.chip_cfg.dmp_on = 0;
1000937c:	2324      	movs	r3, #36	; 0x24
1000937e:	54e5      	strb	r5, [r4, r3]
    st.chip_cfg.dmp_loaded = 0;
10009380:	3301      	adds	r3, #1
10009382:	54e5      	strb	r5, [r4, r3]
    st.chip_cfg.dmp_sample_rate = 0;
10009384:	84e5      	strh	r5, [r4, #38]	; 0x26

    if (mpu_set_gyro_fsr(SMS_MPU_GYRO_FS))
10009386:	20fa      	movs	r0, #250	; 0xfa
10009388:	00c0      	lsls	r0, r0, #3
1000938a:	4b96      	ldr	r3, [pc, #600]	; (100095e4 <mpu_init+0x300>)
1000938c:	4798      	blx	r3
1000938e:	2800      	cmp	r0, #0
10009390:	d000      	beq.n	10009394 <mpu_init+0xb0>
10009392:	e10a      	b.n	100095aa <mpu_init+0x2c6>
        return -1;
    if (mpu_set_accel_fsr(SMS_MPU_ACCEL_FS))
10009394:	3002      	adds	r0, #2
10009396:	4b94      	ldr	r3, [pc, #592]	; (100095e8 <mpu_init+0x304>)
10009398:	4798      	blx	r3
1000939a:	2800      	cmp	r0, #0
1000939c:	d000      	beq.n	100093a0 <mpu_init+0xbc>
1000939e:	e107      	b.n	100095b0 <mpu_init+0x2cc>
        return -1;
    if (mpu_set_lpf(42))
100093a0:	302a      	adds	r0, #42	; 0x2a
100093a2:	4b92      	ldr	r3, [pc, #584]	; (100095ec <mpu_init+0x308>)
100093a4:	4798      	blx	r3
100093a6:	2800      	cmp	r0, #0
100093a8:	d000      	beq.n	100093ac <mpu_init+0xc8>
100093aa:	e104      	b.n	100095b6 <mpu_init+0x2d2>
        return -1;
    if (mpu_set_sample_rate(50))
100093ac:	3032      	adds	r0, #50	; 0x32
100093ae:	4b90      	ldr	r3, [pc, #576]	; (100095f0 <mpu_init+0x30c>)
100093b0:	4798      	blx	r3
100093b2:	2800      	cmp	r0, #0
100093b4:	d000      	beq.n	100093b8 <mpu_init+0xd4>
100093b6:	e101      	b.n	100095bc <mpu_init+0x2d8>
        return -1;
    if (mpu_configure_fifo(0))
100093b8:	4b8e      	ldr	r3, [pc, #568]	; (100095f4 <mpu_init+0x310>)
100093ba:	4798      	blx	r3
100093bc:	2800      	cmp	r0, #0
100093be:	d000      	beq.n	100093c2 <mpu_init+0xde>
100093c0:	e0ff      	b.n	100095c2 <mpu_init+0x2de>
/* This initialization is similar to the one in ak8975.c. */
static int setup_compass(void)
{
    unsigned char data[4], akm_addr;

    mpu_set_bypass(1);
100093c2:	3001      	adds	r0, #1
100093c4:	4b8c      	ldr	r3, [pc, #560]	; (100095f8 <mpu_init+0x314>)
100093c6:	4798      	blx	r3

    /* Find compass. Possible addresses range from 0x0C to 0x0F. */
    for (akm_addr = 0x0C; akm_addr <= 0x0F; akm_addr++) {
100093c8:	240c      	movs	r4, #12
        int result;
        result = i2c_read(akm_addr, AKM_REG_WHOAMI, 1, data);
100093ca:	4d8c      	ldr	r5, [pc, #560]	; (100095fc <mpu_init+0x318>)
100093cc:	ab01      	add	r3, sp, #4
100093ce:	2201      	movs	r2, #1
100093d0:	2100      	movs	r1, #0
100093d2:	0020      	movs	r0, r4
100093d4:	47a8      	blx	r5
        if (!result && (data[0] == AKM_WHOAMI))
100093d6:	2800      	cmp	r0, #0
100093d8:	d103      	bne.n	100093e2 <mpu_init+0xfe>
100093da:	466b      	mov	r3, sp
100093dc:	791b      	ldrb	r3, [r3, #4]
100093de:	2b48      	cmp	r3, #72	; 0x48
100093e0:	d004      	beq.n	100093ec <mpu_init+0x108>
    unsigned char data[4], akm_addr;

    mpu_set_bypass(1);

    /* Find compass. Possible addresses range from 0x0C to 0x0F. */
    for (akm_addr = 0x0C; akm_addr <= 0x0F; akm_addr++) {
100093e2:	3401      	adds	r4, #1
100093e4:	b2e4      	uxtb	r4, r4
100093e6:	2c10      	cmp	r4, #16
100093e8:	d1f0      	bne.n	100093cc <mpu_init+0xe8>
100093ea:	e001      	b.n	100093f0 <mpu_init+0x10c>
        result = i2c_read(akm_addr, AKM_REG_WHOAMI, 1, data);
        if (!result && (data[0] == AKM_WHOAMI))
            break;
    }

    if (akm_addr > 0x0F) {
100093ec:	2c0f      	cmp	r4, #15
100093ee:	d905      	bls.n	100093fc <mpu_init+0x118>
        /* TODO: Handle this case in all compass-related functions. */
        log_e("Compass not found.\n");
100093f0:	4883      	ldr	r0, [pc, #524]	; (10009600 <mpu_init+0x31c>)
100093f2:	4c84      	ldr	r4, [pc, #528]	; (10009604 <mpu_init+0x320>)
100093f4:	47a0      	blx	r4
100093f6:	4884      	ldr	r0, [pc, #528]	; (10009608 <mpu_init+0x324>)
100093f8:	47a0      	blx	r4
100093fa:	e0c4      	b.n	10009586 <mpu_init+0x2a2>
        return -1;
    }

    st.chip_cfg.compass_addr = akm_addr;
100093fc:	232a      	movs	r3, #42	; 0x2a
100093fe:	4a75      	ldr	r2, [pc, #468]	; (100095d4 <mpu_init+0x2f0>)
10009400:	54d4      	strb	r4, [r2, r3]

    data[0] = AKM_POWER_DOWN;
10009402:	ab01      	add	r3, sp, #4
10009404:	2210      	movs	r2, #16
10009406:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
10009408:	3a0f      	subs	r2, #15
1000940a:	210a      	movs	r1, #10
1000940c:	0020      	movs	r0, r4
1000940e:	4c72      	ldr	r4, [pc, #456]	; (100095d8 <mpu_init+0x2f4>)
10009410:	47a0      	blx	r4
10009412:	2800      	cmp	r0, #0
10009414:	d000      	beq.n	10009418 <mpu_init+0x134>
10009416:	e0b6      	b.n	10009586 <mpu_init+0x2a2>
        return -1;
    delay_ms(1);
10009418:	3001      	adds	r0, #1
1000941a:	4b70      	ldr	r3, [pc, #448]	; (100095dc <mpu_init+0x2f8>)
1000941c:	4798      	blx	r3

    data[0] = AKM_FUSE_ROM_ACCESS;
1000941e:	ab01      	add	r3, sp, #4
10009420:	221f      	movs	r2, #31
10009422:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
10009424:	320b      	adds	r2, #11
10009426:	496b      	ldr	r1, [pc, #428]	; (100095d4 <mpu_init+0x2f0>)
10009428:	5c88      	ldrb	r0, [r1, r2]
1000942a:	3a29      	subs	r2, #41	; 0x29
1000942c:	210a      	movs	r1, #10
1000942e:	4c6a      	ldr	r4, [pc, #424]	; (100095d8 <mpu_init+0x2f4>)
10009430:	47a0      	blx	r4
10009432:	2800      	cmp	r0, #0
10009434:	d000      	beq.n	10009438 <mpu_init+0x154>
10009436:	e0a6      	b.n	10009586 <mpu_init+0x2a2>
        return -1;
    delay_ms(1);
10009438:	3001      	adds	r0, #1
1000943a:	4b68      	ldr	r3, [pc, #416]	; (100095dc <mpu_init+0x2f8>)
1000943c:	4798      	blx	r3

    /* Get sensitivity adjustment data from fuse ROM. */
    if (i2c_read(st.chip_cfg.compass_addr, AKM_REG_ASAX, 3, data))
1000943e:	232a      	movs	r3, #42	; 0x2a
10009440:	4a64      	ldr	r2, [pc, #400]	; (100095d4 <mpu_init+0x2f0>)
10009442:	5cd0      	ldrb	r0, [r2, r3]
10009444:	ab01      	add	r3, sp, #4
10009446:	2203      	movs	r2, #3
10009448:	2110      	movs	r1, #16
1000944a:	4c6c      	ldr	r4, [pc, #432]	; (100095fc <mpu_init+0x318>)
1000944c:	47a0      	blx	r4
1000944e:	2800      	cmp	r0, #0
10009450:	d000      	beq.n	10009454 <mpu_init+0x170>
10009452:	e098      	b.n	10009586 <mpu_init+0x2a2>
        return -1;
    st.chip_cfg.mag_sens_adj[0] = (long)data[0] + 128;
10009454:	4a5f      	ldr	r2, [pc, #380]	; (100095d4 <mpu_init+0x2f0>)
10009456:	ab01      	add	r3, sp, #4
10009458:	7819      	ldrb	r1, [r3, #0]
1000945a:	3180      	adds	r1, #128	; 0x80
1000945c:	8591      	strh	r1, [r2, #44]	; 0x2c
    st.chip_cfg.mag_sens_adj[1] = (long)data[1] + 128;
1000945e:	7859      	ldrb	r1, [r3, #1]
10009460:	3180      	adds	r1, #128	; 0x80
10009462:	85d1      	strh	r1, [r2, #46]	; 0x2e
    st.chip_cfg.mag_sens_adj[2] = (long)data[2] + 128;
10009464:	7899      	ldrb	r1, [r3, #2]
10009466:	3180      	adds	r1, #128	; 0x80
10009468:	8611      	strh	r1, [r2, #48]	; 0x30

    data[0] = AKM_POWER_DOWN;
1000946a:	2110      	movs	r1, #16
1000946c:	7019      	strb	r1, [r3, #0]
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
1000946e:	311a      	adds	r1, #26
10009470:	5c50      	ldrb	r0, [r2, r1]
10009472:	2201      	movs	r2, #1
10009474:	3920      	subs	r1, #32
10009476:	4c58      	ldr	r4, [pc, #352]	; (100095d8 <mpu_init+0x2f4>)
10009478:	47a0      	blx	r4
1000947a:	2800      	cmp	r0, #0
1000947c:	d000      	beq.n	10009480 <mpu_init+0x19c>
1000947e:	e082      	b.n	10009586 <mpu_init+0x2a2>
        return -1;
    delay_ms(1);
10009480:	3001      	adds	r0, #1
10009482:	4b56      	ldr	r3, [pc, #344]	; (100095dc <mpu_init+0x2f8>)
10009484:	4798      	blx	r3

    mpu_set_bypass(0);
10009486:	2000      	movs	r0, #0
10009488:	4b5b      	ldr	r3, [pc, #364]	; (100095f8 <mpu_init+0x314>)
1000948a:	4798      	blx	r3

    /* Set up master mode, master clock, and ES bit. */
    data[0] = 0x40;
1000948c:	ab01      	add	r3, sp, #4
1000948e:	2240      	movs	r2, #64	; 0x40
10009490:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->i2c_mst, 1, data))
10009492:	4a50      	ldr	r2, [pc, #320]	; (100095d4 <mpu_init+0x2f0>)
10009494:	6811      	ldr	r1, [r2, #0]
10009496:	7e89      	ldrb	r1, [r1, #26]
10009498:	6852      	ldr	r2, [r2, #4]
1000949a:	7810      	ldrb	r0, [r2, #0]
1000949c:	2201      	movs	r2, #1
1000949e:	4c4e      	ldr	r4, [pc, #312]	; (100095d8 <mpu_init+0x2f4>)
100094a0:	47a0      	blx	r4
100094a2:	2800      	cmp	r0, #0
100094a4:	d16f      	bne.n	10009586 <mpu_init+0x2a2>
        return -1;

    /* Slave 0 reads from AKM data registers. */
    data[0] = BIT_I2C_READ | st.chip_cfg.compass_addr;
100094a6:	ab01      	add	r3, sp, #4
100094a8:	4a4a      	ldr	r2, [pc, #296]	; (100095d4 <mpu_init+0x2f0>)
100094aa:	212a      	movs	r1, #42	; 0x2a
100094ac:	5c51      	ldrb	r1, [r2, r1]
100094ae:	3880      	subs	r0, #128	; 0x80
100094b0:	4301      	orrs	r1, r0
100094b2:	7019      	strb	r1, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->s0_addr, 1, data))
100094b4:	6811      	ldr	r1, [r2, #0]
100094b6:	7f89      	ldrb	r1, [r1, #30]
100094b8:	6852      	ldr	r2, [r2, #4]
100094ba:	7810      	ldrb	r0, [r2, #0]
100094bc:	2201      	movs	r2, #1
100094be:	4c46      	ldr	r4, [pc, #280]	; (100095d8 <mpu_init+0x2f4>)
100094c0:	47a0      	blx	r4
100094c2:	2800      	cmp	r0, #0
100094c4:	d15f      	bne.n	10009586 <mpu_init+0x2a2>
        return -1;

    /* Compass reads start at this register. */
    data[0] = AKM_REG_ST1;
100094c6:	ab01      	add	r3, sp, #4
100094c8:	2202      	movs	r2, #2
100094ca:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->s0_reg, 1, data))
100094cc:	4a41      	ldr	r2, [pc, #260]	; (100095d4 <mpu_init+0x2f0>)
100094ce:	6811      	ldr	r1, [r2, #0]
100094d0:	7fc9      	ldrb	r1, [r1, #31]
100094d2:	6852      	ldr	r2, [r2, #4]
100094d4:	7810      	ldrb	r0, [r2, #0]
100094d6:	2201      	movs	r2, #1
100094d8:	4c3f      	ldr	r4, [pc, #252]	; (100095d8 <mpu_init+0x2f4>)
100094da:	47a0      	blx	r4
100094dc:	2800      	cmp	r0, #0
100094de:	d152      	bne.n	10009586 <mpu_init+0x2a2>
        return -1;

    /* Enable slave 0, 8-byte reads. */
    data[0] = BIT_SLAVE_EN | 8;
100094e0:	ab01      	add	r3, sp, #4
100094e2:	2288      	movs	r2, #136	; 0x88
100094e4:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->s0_ctrl, 1, data))
100094e6:	4a3b      	ldr	r2, [pc, #236]	; (100095d4 <mpu_init+0x2f0>)
100094e8:	2120      	movs	r1, #32
100094ea:	6810      	ldr	r0, [r2, #0]
100094ec:	5c41      	ldrb	r1, [r0, r1]
100094ee:	6852      	ldr	r2, [r2, #4]
100094f0:	7810      	ldrb	r0, [r2, #0]
100094f2:	2201      	movs	r2, #1
100094f4:	4c38      	ldr	r4, [pc, #224]	; (100095d8 <mpu_init+0x2f4>)
100094f6:	47a0      	blx	r4
100094f8:	2800      	cmp	r0, #0
100094fa:	d144      	bne.n	10009586 <mpu_init+0x2a2>
        return -1;

    /* Slave 1 changes AKM measurement mode. */
    data[0] = st.chip_cfg.compass_addr;
100094fc:	ab01      	add	r3, sp, #4
100094fe:	4a35      	ldr	r2, [pc, #212]	; (100095d4 <mpu_init+0x2f0>)
10009500:	212a      	movs	r1, #42	; 0x2a
10009502:	5c51      	ldrb	r1, [r2, r1]
10009504:	7019      	strb	r1, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->s1_addr, 1, data))
10009506:	2121      	movs	r1, #33	; 0x21
10009508:	6810      	ldr	r0, [r2, #0]
1000950a:	5c41      	ldrb	r1, [r0, r1]
1000950c:	6852      	ldr	r2, [r2, #4]
1000950e:	7810      	ldrb	r0, [r2, #0]
10009510:	2201      	movs	r2, #1
10009512:	4c31      	ldr	r4, [pc, #196]	; (100095d8 <mpu_init+0x2f4>)
10009514:	47a0      	blx	r4
10009516:	2800      	cmp	r0, #0
10009518:	d135      	bne.n	10009586 <mpu_init+0x2a2>
        return -1;

    /* AKM measurement mode register. */
    data[0] = AKM_REG_CNTL;
1000951a:	ab01      	add	r3, sp, #4
1000951c:	220a      	movs	r2, #10
1000951e:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->s1_reg, 1, data))
10009520:	4a2c      	ldr	r2, [pc, #176]	; (100095d4 <mpu_init+0x2f0>)
10009522:	2122      	movs	r1, #34	; 0x22
10009524:	6810      	ldr	r0, [r2, #0]
10009526:	5c41      	ldrb	r1, [r0, r1]
10009528:	6852      	ldr	r2, [r2, #4]
1000952a:	7810      	ldrb	r0, [r2, #0]
1000952c:	2201      	movs	r2, #1
1000952e:	4c2a      	ldr	r4, [pc, #168]	; (100095d8 <mpu_init+0x2f4>)
10009530:	47a0      	blx	r4
10009532:	2800      	cmp	r0, #0
10009534:	d127      	bne.n	10009586 <mpu_init+0x2a2>
        return -1;

    /* Enable slave 1, 1-byte writes. */
    data[0] = BIT_SLAVE_EN | 1;
10009536:	ab01      	add	r3, sp, #4
10009538:	2281      	movs	r2, #129	; 0x81
1000953a:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->s1_ctrl, 1, data))
1000953c:	4a25      	ldr	r2, [pc, #148]	; (100095d4 <mpu_init+0x2f0>)
1000953e:	2123      	movs	r1, #35	; 0x23
10009540:	6810      	ldr	r0, [r2, #0]
10009542:	5c41      	ldrb	r1, [r0, r1]
10009544:	6852      	ldr	r2, [r2, #4]
10009546:	7810      	ldrb	r0, [r2, #0]
10009548:	2201      	movs	r2, #1
1000954a:	4c23      	ldr	r4, [pc, #140]	; (100095d8 <mpu_init+0x2f4>)
1000954c:	47a0      	blx	r4
1000954e:	2800      	cmp	r0, #0
10009550:	d119      	bne.n	10009586 <mpu_init+0x2a2>
        return -1;

    /* Set slave 1 data. */
    data[0] = AKM_SINGLE_MEASUREMENT;
10009552:	ab01      	add	r3, sp, #4
10009554:	2211      	movs	r2, #17
10009556:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->s1_do, 1, data))
10009558:	4a1e      	ldr	r2, [pc, #120]	; (100095d4 <mpu_init+0x2f0>)
1000955a:	2126      	movs	r1, #38	; 0x26
1000955c:	6810      	ldr	r0, [r2, #0]
1000955e:	5c41      	ldrb	r1, [r0, r1]
10009560:	6852      	ldr	r2, [r2, #4]
10009562:	7810      	ldrb	r0, [r2, #0]
10009564:	2201      	movs	r2, #1
10009566:	4c1c      	ldr	r4, [pc, #112]	; (100095d8 <mpu_init+0x2f4>)
10009568:	47a0      	blx	r4
1000956a:	2800      	cmp	r0, #0
1000956c:	d10b      	bne.n	10009586 <mpu_init+0x2a2>
        return -1;

    /* Trigger slave 0 and slave 1 actions at each sample. */
    data[0] = 0x03;
1000956e:	ab01      	add	r3, sp, #4
10009570:	2203      	movs	r2, #3
10009572:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->i2c_delay_ctrl, 1, data))
10009574:	4a17      	ldr	r2, [pc, #92]	; (100095d4 <mpu_init+0x2f0>)
10009576:	2127      	movs	r1, #39	; 0x27
10009578:	6810      	ldr	r0, [r2, #0]
1000957a:	5c41      	ldrb	r1, [r0, r1]
1000957c:	6852      	ldr	r2, [r2, #4]
1000957e:	7810      	ldrb	r0, [r2, #0]
10009580:	2201      	movs	r2, #1
10009582:	4c15      	ldr	r4, [pc, #84]	; (100095d8 <mpu_init+0x2f4>)
10009584:	47a0      	blx	r4
    //if (int_param)
        //reg_int_cb(int_param);

#ifdef AK89xx_SECONDARY
    setup_compass();
    if (mpu_set_compass_sample_rate(10))
10009586:	200a      	movs	r0, #10
10009588:	4b20      	ldr	r3, [pc, #128]	; (1000960c <mpu_init+0x328>)
1000958a:	4798      	blx	r3
1000958c:	1e04      	subs	r4, r0, #0
1000958e:	d11b      	bne.n	100095c8 <mpu_init+0x2e4>
    /* Already disabled by setup_compass. */
    if (mpu_set_bypass(0))
        return -1;
#endif

    mpu_set_sensors(0);
10009590:	2000      	movs	r0, #0
10009592:	4b1f      	ldr	r3, [pc, #124]	; (10009610 <mpu_init+0x32c>)
10009594:	4798      	blx	r3
    return 0;
10009596:	e019      	b.n	100095cc <mpu_init+0x2e8>
    unsigned char data[6];

    /* Reset device. */
    data[0] = BIT_RESET;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
        return -1;
10009598:	2401      	movs	r4, #1
1000959a:	4264      	negs	r4, r4
1000959c:	e016      	b.n	100095cc <mpu_init+0x2e8>
    delay_ms(100);

    /* Wake up chip. */
    data[0] = 0x00;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
        return -1;
1000959e:	2401      	movs	r4, #1
100095a0:	4264      	negs	r4, r4
100095a2:	e013      	b.n	100095cc <mpu_init+0x2e8>
    /* MPU6500 shares 4kB of memory between the DMP and the FIFO. Since the
     * first 3kB are needed by the DMP, we'll use the last 1kB for the FIFO.
     */
    data[0] = BIT_FIFO_SIZE_1024;
    if (i2c_write(st.hw->addr, st.reg->accel_cfg2, 1, data))
        return -1;
100095a4:	2401      	movs	r4, #1
100095a6:	4264      	negs	r4, r4
100095a8:	e010      	b.n	100095cc <mpu_init+0x2e8>
    st.chip_cfg.dmp_on = 0;
    st.chip_cfg.dmp_loaded = 0;
    st.chip_cfg.dmp_sample_rate = 0;

    if (mpu_set_gyro_fsr(SMS_MPU_GYRO_FS))
        return -1;
100095aa:	2401      	movs	r4, #1
100095ac:	4264      	negs	r4, r4
100095ae:	e00d      	b.n	100095cc <mpu_init+0x2e8>
    if (mpu_set_accel_fsr(SMS_MPU_ACCEL_FS))
        return -1;
100095b0:	2401      	movs	r4, #1
100095b2:	4264      	negs	r4, r4
100095b4:	e00a      	b.n	100095cc <mpu_init+0x2e8>
    if (mpu_set_lpf(42))
        return -1;
100095b6:	2401      	movs	r4, #1
100095b8:	4264      	negs	r4, r4
100095ba:	e007      	b.n	100095cc <mpu_init+0x2e8>
    if (mpu_set_sample_rate(50))
        return -1;
100095bc:	2401      	movs	r4, #1
100095be:	4264      	negs	r4, r4
100095c0:	e004      	b.n	100095cc <mpu_init+0x2e8>
    if (mpu_configure_fifo(0))
        return -1;
100095c2:	2401      	movs	r4, #1
100095c4:	4264      	negs	r4, r4
100095c6:	e001      	b.n	100095cc <mpu_init+0x2e8>
        //reg_int_cb(int_param);

#ifdef AK89xx_SECONDARY
    setup_compass();
    if (mpu_set_compass_sample_rate(10))
        return -1;
100095c8:	2401      	movs	r4, #1
100095ca:	4264      	negs	r4, r4
        return -1;
#endif

    mpu_set_sensors(0);
    return 0;
}
100095cc:	0020      	movs	r0, r4
100095ce:	b005      	add	sp, #20
100095d0:	bd30      	pop	{r4, r5, pc}
100095d2:	46c0      	nop			; (mov r8, r8)
100095d4:	1001834c 	.word	0x1001834c
100095d8:	1000aa19 	.word	0x1000aa19
100095dc:	10008129 	.word	0x10008129
100095e0:	10015115 	.word	0x10015115
100095e4:	100087e9 	.word	0x100087e9
100095e8:	100088d5 	.word	0x100088d5
100095ec:	10008969 	.word	0x10008969
100095f0:	10009029 	.word	0x10009029
100095f4:	10008ab9 	.word	0x10008ab9
100095f8:	10008cf1 	.word	0x10008cf1
100095fc:	1000aa75 	.word	0x1000aa75
10009600:	10016528 	.word	0x10016528
10009604:	1001537d 	.word	0x1001537d
10009608:	10016398 	.word	0x10016398
1000960c:	10008a41 	.word	0x10008a41
10009610:	100090fd 	.word	0x100090fd

10009614 <mpu_write_mem>:
 *  @param[in]  data        Bytes to write to memory.
 *  @return     0 if successful.
 */
int mpu_write_mem(unsigned short mem_addr, unsigned short length,
        unsigned char *data)
{
10009614:	b570      	push	{r4, r5, r6, lr}
10009616:	b082      	sub	sp, #8
10009618:	000c      	movs	r4, r1
1000961a:	1e15      	subs	r5, r2, #0
    unsigned char tmp[2];

    if (!data)
1000961c:	d025      	beq.n	1000966a <mpu_write_mem+0x56>
        return -1;
    if (!st.chip_cfg.sensors)
1000961e:	4b19      	ldr	r3, [pc, #100]	; (10009684 <mpu_write_mem+0x70>)
10009620:	7a9b      	ldrb	r3, [r3, #10]
10009622:	2b00      	cmp	r3, #0
10009624:	d024      	beq.n	10009670 <mpu_write_mem+0x5c>
        return -1;

    tmp[0] = (unsigned char)(mem_addr >> 8);
10009626:	ab01      	add	r3, sp, #4
10009628:	0a02      	lsrs	r2, r0, #8
1000962a:	701a      	strb	r2, [r3, #0]
    tmp[1] = (unsigned char)(mem_addr & 0xFF);
1000962c:	b2c0      	uxtb	r0, r0
1000962e:	7058      	strb	r0, [r3, #1]

    /* Check bank boundaries. */
    if (tmp[1] + length > st.hw->bank_size)
10009630:	4b14      	ldr	r3, [pc, #80]	; (10009684 <mpu_write_mem+0x70>)
10009632:	685b      	ldr	r3, [r3, #4]
10009634:	1840      	adds	r0, r0, r1
10009636:	895a      	ldrh	r2, [r3, #10]
10009638:	4290      	cmp	r0, r2
1000963a:	dc1c      	bgt.n	10009676 <mpu_write_mem+0x62>
        return -1;

    if (i2c_write(st.hw->addr, st.reg->bank_sel, 2, tmp))
1000963c:	4a11      	ldr	r2, [pc, #68]	; (10009684 <mpu_write_mem+0x70>)
1000963e:	6812      	ldr	r2, [r2, #0]
10009640:	7ed1      	ldrb	r1, [r2, #27]
10009642:	7818      	ldrb	r0, [r3, #0]
10009644:	ab01      	add	r3, sp, #4
10009646:	2202      	movs	r2, #2
10009648:	4e0f      	ldr	r6, [pc, #60]	; (10009688 <mpu_write_mem+0x74>)
1000964a:	47b0      	blx	r6
1000964c:	2800      	cmp	r0, #0
1000964e:	d115      	bne.n	1000967c <mpu_write_mem+0x68>
        return -1;
    if (i2c_write(st.hw->addr, st.reg->mem_r_w, length, data))
10009650:	b2e2      	uxtb	r2, r4
10009652:	4b0c      	ldr	r3, [pc, #48]	; (10009684 <mpu_write_mem+0x70>)
10009654:	6819      	ldr	r1, [r3, #0]
10009656:	7e09      	ldrb	r1, [r1, #24]
10009658:	685b      	ldr	r3, [r3, #4]
1000965a:	7818      	ldrb	r0, [r3, #0]
1000965c:	002b      	movs	r3, r5
1000965e:	4c0a      	ldr	r4, [pc, #40]	; (10009688 <mpu_write_mem+0x74>)
10009660:	47a0      	blx	r4
10009662:	1e43      	subs	r3, r0, #1
10009664:	4198      	sbcs	r0, r3
10009666:	4240      	negs	r0, r0
10009668:	e00a      	b.n	10009680 <mpu_write_mem+0x6c>
        unsigned char *data)
{
    unsigned char tmp[2];

    if (!data)
        return -1;
1000966a:	2001      	movs	r0, #1
1000966c:	4240      	negs	r0, r0
1000966e:	e007      	b.n	10009680 <mpu_write_mem+0x6c>
    if (!st.chip_cfg.sensors)
        return -1;
10009670:	2001      	movs	r0, #1
10009672:	4240      	negs	r0, r0
10009674:	e004      	b.n	10009680 <mpu_write_mem+0x6c>
    tmp[0] = (unsigned char)(mem_addr >> 8);
    tmp[1] = (unsigned char)(mem_addr & 0xFF);

    /* Check bank boundaries. */
    if (tmp[1] + length > st.hw->bank_size)
        return -1;
10009676:	2001      	movs	r0, #1
10009678:	4240      	negs	r0, r0
1000967a:	e001      	b.n	10009680 <mpu_write_mem+0x6c>

    if (i2c_write(st.hw->addr, st.reg->bank_sel, 2, tmp))
        return -1;
1000967c:	2001      	movs	r0, #1
1000967e:	4240      	negs	r0, r0
    if (i2c_write(st.hw->addr, st.reg->mem_r_w, length, data))
        return -1;
    return 0;
}
10009680:	b002      	add	sp, #8
10009682:	bd70      	pop	{r4, r5, r6, pc}
10009684:	1001834c 	.word	0x1001834c
10009688:	1000aa19 	.word	0x1000aa19

1000968c <mpu_set_dmp_state>:
 *  @brief      Enable/disable DMP support.
 *  @param[in]  enable  1 to turn on the DMP.
 *  @return     0 if successful.
 */
int mpu_set_dmp_state(unsigned char enable)
{
1000968c:	b570      	push	{r4, r5, r6, lr}
1000968e:	b082      	sub	sp, #8
    unsigned char tmp;
    if (st.chip_cfg.dmp_on == enable)
10009690:	2324      	movs	r3, #36	; 0x24
10009692:	4a21      	ldr	r2, [pc, #132]	; (10009718 <mpu_set_dmp_state+0x8c>)
10009694:	5cd3      	ldrb	r3, [r2, r3]
10009696:	4283      	cmp	r3, r0
10009698:	d037      	beq.n	1000970a <mpu_set_dmp_state+0x7e>
        return 0;

    if (enable) {
1000969a:	2800      	cmp	r0, #0
1000969c:	d020      	beq.n	100096e0 <mpu_set_dmp_state+0x54>
        if (!st.chip_cfg.dmp_loaded)
1000969e:	2325      	movs	r3, #37	; 0x25
100096a0:	5cd3      	ldrb	r3, [r2, r3]
100096a2:	2b00      	cmp	r3, #0
100096a4:	d033      	beq.n	1000970e <mpu_set_dmp_state+0x82>
            return -1;
        /* Disable data ready interrupt. */
        set_int_enable(0);
100096a6:	2000      	movs	r0, #0
100096a8:	4d1c      	ldr	r5, [pc, #112]	; (1000971c <mpu_set_dmp_state+0x90>)
100096aa:	47a8      	blx	r5
        /* Disable bypass mode. */
        mpu_set_bypass(0);
100096ac:	2000      	movs	r0, #0
100096ae:	4b1c      	ldr	r3, [pc, #112]	; (10009720 <mpu_set_dmp_state+0x94>)
100096b0:	4798      	blx	r3
        /* Keep constant sample rate, FIFO rate controlled by DMP. */
        mpu_set_sample_rate(st.chip_cfg.dmp_sample_rate);
100096b2:	4c19      	ldr	r4, [pc, #100]	; (10009718 <mpu_set_dmp_state+0x8c>)
100096b4:	8ce0      	ldrh	r0, [r4, #38]	; 0x26
100096b6:	4b1b      	ldr	r3, [pc, #108]	; (10009724 <mpu_set_dmp_state+0x98>)
100096b8:	4798      	blx	r3
        /* Remove FIFO elements. */
        tmp = 0;
100096ba:	466b      	mov	r3, sp
100096bc:	3307      	adds	r3, #7
100096be:	2200      	movs	r2, #0
100096c0:	701a      	strb	r2, [r3, #0]
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
100096c2:	6862      	ldr	r2, [r4, #4]
100096c4:	7810      	ldrb	r0, [r2, #0]
100096c6:	2201      	movs	r2, #1
100096c8:	2123      	movs	r1, #35	; 0x23
100096ca:	4e17      	ldr	r6, [pc, #92]	; (10009728 <mpu_set_dmp_state+0x9c>)
100096cc:	47b0      	blx	r6
        st.chip_cfg.dmp_on = 1;
100096ce:	2201      	movs	r2, #1
100096d0:	2324      	movs	r3, #36	; 0x24
100096d2:	54e2      	strb	r2, [r4, r3]
        /* Enable DMP interrupt. */
        set_int_enable(1);
100096d4:	2001      	movs	r0, #1
100096d6:	47a8      	blx	r5
        mpu_reset_fifo();
100096d8:	4b14      	ldr	r3, [pc, #80]	; (1000972c <mpu_set_dmp_state+0xa0>)
100096da:	4798      	blx	r3
        tmp = st.chip_cfg.fifo_enable;
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
        st.chip_cfg.dmp_on = 0;
        mpu_reset_fifo();
    }
    return 0;
100096dc:	2000      	movs	r0, #0
100096de:	e018      	b.n	10009712 <mpu_set_dmp_state+0x86>
        /* Enable DMP interrupt. */
        set_int_enable(1);
        mpu_reset_fifo();
    } else {
        /* Disable DMP interrupt. */
        set_int_enable(0);
100096e0:	2000      	movs	r0, #0
100096e2:	4b0e      	ldr	r3, [pc, #56]	; (1000971c <mpu_set_dmp_state+0x90>)
100096e4:	4798      	blx	r3
        /* Restore FIFO settings. */
        tmp = st.chip_cfg.fifo_enable;
100096e6:	466b      	mov	r3, sp
100096e8:	3307      	adds	r3, #7
100096ea:	4c0b      	ldr	r4, [pc, #44]	; (10009718 <mpu_set_dmp_state+0x8c>)
100096ec:	7c22      	ldrb	r2, [r4, #16]
100096ee:	701a      	strb	r2, [r3, #0]
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
100096f0:	6862      	ldr	r2, [r4, #4]
100096f2:	7810      	ldrb	r0, [r2, #0]
100096f4:	2201      	movs	r2, #1
100096f6:	2123      	movs	r1, #35	; 0x23
100096f8:	4d0b      	ldr	r5, [pc, #44]	; (10009728 <mpu_set_dmp_state+0x9c>)
100096fa:	47a8      	blx	r5
        st.chip_cfg.dmp_on = 0;
100096fc:	2200      	movs	r2, #0
100096fe:	2324      	movs	r3, #36	; 0x24
10009700:	54e2      	strb	r2, [r4, r3]
        mpu_reset_fifo();
10009702:	4b0a      	ldr	r3, [pc, #40]	; (1000972c <mpu_set_dmp_state+0xa0>)
10009704:	4798      	blx	r3
    }
    return 0;
10009706:	2000      	movs	r0, #0
10009708:	e003      	b.n	10009712 <mpu_set_dmp_state+0x86>
 */
int mpu_set_dmp_state(unsigned char enable)
{
    unsigned char tmp;
    if (st.chip_cfg.dmp_on == enable)
        return 0;
1000970a:	2000      	movs	r0, #0
1000970c:	e001      	b.n	10009712 <mpu_set_dmp_state+0x86>

    if (enable) {
        if (!st.chip_cfg.dmp_loaded)
            return -1;
1000970e:	2001      	movs	r0, #1
10009710:	4240      	negs	r0, r0
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
        st.chip_cfg.dmp_on = 0;
        mpu_reset_fifo();
    }
    return 0;
}
10009712:	b002      	add	sp, #8
10009714:	bd70      	pop	{r4, r5, r6, pc}
10009716:	46c0      	nop			; (mov r8, r8)
10009718:	1001834c 	.word	0x1001834c
1000971c:	10008495 	.word	0x10008495
10009720:	10008cf1 	.word	0x10008cf1
10009724:	10009029 	.word	0x10009029
10009728:	1000aa19 	.word	0x1000aa19
1000972c:	100085f1 	.word	0x100085f1

10009730 <mpu_get_compass_reg>:
 *  @param[out] data        Raw data in hardware units.
 *  @param[out] timestamp   Timestamp in milliseconds. Null if not needed.
 *  @return     0 if successful.
 */
int mpu_get_compass_reg(short *data, unsigned long *timestamp)
{
10009730:	b5f0      	push	{r4, r5, r6, r7, lr}
10009732:	b085      	sub	sp, #20
10009734:	0006      	movs	r6, r0
10009736:	000d      	movs	r5, r1
#ifdef AK89xx_SECONDARY
    unsigned char tmp[9];

    if (!(st.chip_cfg.sensors & INV_XYZ_COMPASS))
10009738:	4b29      	ldr	r3, [pc, #164]	; (100097e0 <mpu_get_compass_reg+0xb0>)
1000973a:	7a9b      	ldrb	r3, [r3, #10]
1000973c:	07db      	lsls	r3, r3, #31
1000973e:	d540      	bpl.n	100097c2 <mpu_get_compass_reg+0x92>
        return -1;
    tmp[8] = AKM_SINGLE_MEASUREMENT;
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, tmp+8))
        return -1;
#else
    if (i2c_read(st.hw->addr, st.reg->raw_compass, 8, tmp))
10009740:	4b27      	ldr	r3, [pc, #156]	; (100097e0 <mpu_get_compass_reg+0xb0>)
10009742:	2228      	movs	r2, #40	; 0x28
10009744:	6819      	ldr	r1, [r3, #0]
10009746:	5c89      	ldrb	r1, [r1, r2]
10009748:	685b      	ldr	r3, [r3, #4]
1000974a:	7818      	ldrb	r0, [r3, #0]
1000974c:	ab01      	add	r3, sp, #4
1000974e:	3a20      	subs	r2, #32
10009750:	4c24      	ldr	r4, [pc, #144]	; (100097e4 <mpu_get_compass_reg+0xb4>)
10009752:	47a0      	blx	r4
10009754:	1e04      	subs	r4, r0, #0
10009756:	d137      	bne.n	100097c8 <mpu_get_compass_reg+0x98>
        return -2;
    if ((tmp[7] & AKM_OVERFLOW) || (tmp[7] & AKM_DATA_ERROR))
        return -3;
#elif defined AK8963_SECONDARY
    /* AK8963 doesn't have the data read error bit. */
    if (!(tmp[0] & AKM_DATA_READY) || (tmp[0] & AKM_DATA_OVERRUN))
10009758:	ab01      	add	r3, sp, #4
1000975a:	781b      	ldrb	r3, [r3, #0]
1000975c:	2203      	movs	r2, #3
1000975e:	4013      	ands	r3, r2
10009760:	2b01      	cmp	r3, #1
10009762:	d134      	bne.n	100097ce <mpu_get_compass_reg+0x9e>
        return -2;
    if (tmp[7] & AKM_OVERFLOW)
10009764:	ab01      	add	r3, sp, #4
10009766:	79db      	ldrb	r3, [r3, #7]
10009768:	2b7f      	cmp	r3, #127	; 0x7f
1000976a:	d833      	bhi.n	100097d4 <mpu_get_compass_reg+0xa4>
        return -3;
#endif
    data[0] = (tmp[2] << 8) | tmp[1];
1000976c:	a801      	add	r0, sp, #4
1000976e:	7881      	ldrb	r1, [r0, #2]
10009770:	0209      	lsls	r1, r1, #8
10009772:	7843      	ldrb	r3, [r0, #1]
10009774:	4319      	orrs	r1, r3
10009776:	b209      	sxth	r1, r1
10009778:	8031      	strh	r1, [r6, #0]
    data[1] = (tmp[4] << 8) | tmp[3];
1000977a:	7902      	ldrb	r2, [r0, #4]
1000977c:	0212      	lsls	r2, r2, #8
1000977e:	78c3      	ldrb	r3, [r0, #3]
10009780:	431a      	orrs	r2, r3
10009782:	b212      	sxth	r2, r2
10009784:	8072      	strh	r2, [r6, #2]
    data[2] = (tmp[6] << 8) | tmp[5];
10009786:	7983      	ldrb	r3, [r0, #6]
10009788:	021b      	lsls	r3, r3, #8
1000978a:	7940      	ldrb	r0, [r0, #5]
1000978c:	4303      	orrs	r3, r0
1000978e:	b21b      	sxth	r3, r3
10009790:	469c      	mov	ip, r3
10009792:	80b3      	strh	r3, [r6, #4]

    data[0] = ((long)data[0] * st.chip_cfg.mag_sens_adj[0]) >> 8;
10009794:	4812      	ldr	r0, [pc, #72]	; (100097e0 <mpu_get_compass_reg+0xb0>)
10009796:	232c      	movs	r3, #44	; 0x2c
10009798:	5ec7      	ldrsh	r7, [r0, r3]
1000979a:	4379      	muls	r1, r7
1000979c:	1209      	asrs	r1, r1, #8
1000979e:	8031      	strh	r1, [r6, #0]
    data[1] = ((long)data[1] * st.chip_cfg.mag_sens_adj[1]) >> 8;
100097a0:	232e      	movs	r3, #46	; 0x2e
100097a2:	5ec1      	ldrsh	r1, [r0, r3]
100097a4:	434a      	muls	r2, r1
100097a6:	1212      	asrs	r2, r2, #8
100097a8:	8072      	strh	r2, [r6, #2]
    data[2] = ((long)data[2] * st.chip_cfg.mag_sens_adj[2]) >> 8;
100097aa:	2330      	movs	r3, #48	; 0x30
100097ac:	5ec2      	ldrsh	r2, [r0, r3]
100097ae:	4663      	mov	r3, ip
100097b0:	4353      	muls	r3, r2
100097b2:	121b      	asrs	r3, r3, #8
100097b4:	80b3      	strh	r3, [r6, #4]

    if (timestamp)
100097b6:	2d00      	cmp	r5, #0
100097b8:	d00e      	beq.n	100097d8 <mpu_get_compass_reg+0xa8>
        get_ms(timestamp);
100097ba:	0028      	movs	r0, r5
100097bc:	4b0a      	ldr	r3, [pc, #40]	; (100097e8 <mpu_get_compass_reg+0xb8>)
100097be:	4798      	blx	r3
100097c0:	e00a      	b.n	100097d8 <mpu_get_compass_reg+0xa8>
{
#ifdef AK89xx_SECONDARY
    unsigned char tmp[9];

    if (!(st.chip_cfg.sensors & INV_XYZ_COMPASS))
        return -1;
100097c2:	2401      	movs	r4, #1
100097c4:	4264      	negs	r4, r4
100097c6:	e007      	b.n	100097d8 <mpu_get_compass_reg+0xa8>
    tmp[8] = AKM_SINGLE_MEASUREMENT;
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, tmp+8))
        return -1;
#else
    if (i2c_read(st.hw->addr, st.reg->raw_compass, 8, tmp))
        return -1;
100097c8:	2401      	movs	r4, #1
100097ca:	4264      	negs	r4, r4
100097cc:	e004      	b.n	100097d8 <mpu_get_compass_reg+0xa8>
    if ((tmp[7] & AKM_OVERFLOW) || (tmp[7] & AKM_DATA_ERROR))
        return -3;
#elif defined AK8963_SECONDARY
    /* AK8963 doesn't have the data read error bit. */
    if (!(tmp[0] & AKM_DATA_READY) || (tmp[0] & AKM_DATA_OVERRUN))
        return -2;
100097ce:	2402      	movs	r4, #2
100097d0:	4264      	negs	r4, r4
100097d2:	e001      	b.n	100097d8 <mpu_get_compass_reg+0xa8>
    if (tmp[7] & AKM_OVERFLOW)
        return -3;
100097d4:	2403      	movs	r4, #3
100097d6:	4264      	negs	r4, r4
        get_ms(timestamp);
    return 0;
#else
    return -1;
#endif
}
100097d8:	0020      	movs	r0, r4
100097da:	b005      	add	sp, #20
100097dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
100097de:	46c0      	nop			; (mov r8, r8)
100097e0:	1001834c 	.word	0x1001834c
100097e4:	1000aa75 	.word	0x1000aa75
100097e8:	1000b57d 	.word	0x1000b57d

100097ec <mpu_get_compass_fsr>:
 *  @return     0 if successful.
 */
int mpu_get_compass_fsr(unsigned short *fsr)
{
#ifdef AK89xx_SECONDARY
    fsr[0] = st.hw->compass_fsr;
100097ec:	4b02      	ldr	r3, [pc, #8]	; (100097f8 <mpu_get_compass_fsr+0xc>)
100097ee:	685b      	ldr	r3, [r3, #4]
100097f0:	899b      	ldrh	r3, [r3, #12]
100097f2:	8003      	strh	r3, [r0, #0]
    return 0;
#else
    return -1;
#endif
}
100097f4:	2000      	movs	r0, #0
100097f6:	4770      	bx	lr
100097f8:	1001834c 	.word	0x1001834c

100097fc <dmp_set_fifo_rate>:
 *  Only used when DMP is on.
 *  @param[in]  rate    Desired fifo rate (Hz).
 *  @return     0 if successful.
 */
int dmp_set_fifo_rate(unsigned short rate)
{
100097fc:	b510      	push	{r4, lr}
100097fe:	b086      	sub	sp, #24
10009800:	0004      	movs	r4, r0
    const unsigned char regs_end[12] = {DINAFE, DINAF2, DINAAB,
10009802:	220c      	movs	r2, #12
10009804:	4915      	ldr	r1, [pc, #84]	; (1000985c <dmp_set_fifo_rate+0x60>)
10009806:	3110      	adds	r1, #16
10009808:	a803      	add	r0, sp, #12
1000980a:	4b15      	ldr	r3, [pc, #84]	; (10009860 <dmp_set_fifo_rate+0x64>)
1000980c:	4798      	blx	r3
        0xc4, DINAAA, DINAF1, DINADF, DINADF, 0xBB, 0xAF, DINADF, DINADF};
    unsigned short div;
    unsigned char tmp[8];

    if (rate > DMP_SAMPLE_RATE)
1000980e:	2cc8      	cmp	r4, #200	; 0xc8
10009810:	d819      	bhi.n	10009846 <dmp_set_fifo_rate+0x4a>
        return -1;
    div = DMP_SAMPLE_RATE / rate - 1;
10009812:	0021      	movs	r1, r4
10009814:	20c8      	movs	r0, #200	; 0xc8
10009816:	4b13      	ldr	r3, [pc, #76]	; (10009864 <dmp_set_fifo_rate+0x68>)
10009818:	4798      	blx	r3
1000981a:	3801      	subs	r0, #1
1000981c:	b280      	uxth	r0, r0
    tmp[0] = (unsigned char)((div >> 8) & 0xFF);
1000981e:	aa01      	add	r2, sp, #4
10009820:	0a03      	lsrs	r3, r0, #8
10009822:	7013      	strb	r3, [r2, #0]
    tmp[1] = (unsigned char)(div & 0xFF);
10009824:	7050      	strb	r0, [r2, #1]
    if (mpu_write_mem(D_0_22, 2, tmp))
10009826:	2102      	movs	r1, #2
10009828:	480f      	ldr	r0, [pc, #60]	; (10009868 <dmp_set_fifo_rate+0x6c>)
1000982a:	4b10      	ldr	r3, [pc, #64]	; (1000986c <dmp_set_fifo_rate+0x70>)
1000982c:	4798      	blx	r3
1000982e:	2800      	cmp	r0, #0
10009830:	d10c      	bne.n	1000984c <dmp_set_fifo_rate+0x50>
        return -1;
    if (mpu_write_mem(CFG_6, 12, (unsigned char*)regs_end))
10009832:	aa03      	add	r2, sp, #12
10009834:	210c      	movs	r1, #12
10009836:	480e      	ldr	r0, [pc, #56]	; (10009870 <dmp_set_fifo_rate+0x74>)
10009838:	4b0c      	ldr	r3, [pc, #48]	; (1000986c <dmp_set_fifo_rate+0x70>)
1000983a:	4798      	blx	r3
1000983c:	2800      	cmp	r0, #0
1000983e:	d108      	bne.n	10009852 <dmp_set_fifo_rate+0x56>
        return -1;

    dmp.fifo_rate = rate;
10009840:	4b0c      	ldr	r3, [pc, #48]	; (10009874 <dmp_set_fifo_rate+0x78>)
10009842:	819c      	strh	r4, [r3, #12]
    return 0;
10009844:	e007      	b.n	10009856 <dmp_set_fifo_rate+0x5a>
        0xc4, DINAAA, DINAF1, DINADF, DINADF, 0xBB, 0xAF, DINADF, DINADF};
    unsigned short div;
    unsigned char tmp[8];

    if (rate > DMP_SAMPLE_RATE)
        return -1;
10009846:	2001      	movs	r0, #1
10009848:	4240      	negs	r0, r0
1000984a:	e004      	b.n	10009856 <dmp_set_fifo_rate+0x5a>
    div = DMP_SAMPLE_RATE / rate - 1;
    tmp[0] = (unsigned char)((div >> 8) & 0xFF);
    tmp[1] = (unsigned char)(div & 0xFF);
    if (mpu_write_mem(D_0_22, 2, tmp))
        return -1;
1000984c:	2001      	movs	r0, #1
1000984e:	4240      	negs	r0, r0
10009850:	e001      	b.n	10009856 <dmp_set_fifo_rate+0x5a>
    if (mpu_write_mem(CFG_6, 12, (unsigned char*)regs_end))
        return -1;
10009852:	2001      	movs	r0, #1
10009854:	4240      	negs	r0, r0

    dmp.fifo_rate = rate;
    return 0;
}
10009856:	b006      	add	sp, #24
10009858:	bd10      	pop	{r4, pc}
1000985a:	46c0      	nop			; (mov r8, r8)
1000985c:	10016774 	.word	0x10016774
10009860:	10015103 	.word	0x10015103
10009864:	10013125 	.word	0x10013125
10009868:	00000216 	.word	0x00000216
1000986c:	10009615 	.word	0x10009615
10009870:	00000ac1 	.word	0x00000ac1
10009874:	10018410 	.word	0x10018410

10009878 <dmp_set_tap_thresh>:
 *  @param[in]  axis    1, 2, and 4 for XYZ accel, respectively.
 *  @param[in]  thresh  Tap threshold, in mg/ms.
 *  @return     0 if successful.
 */
int dmp_set_tap_thresh(unsigned char axis, unsigned short thresh)
{
10009878:	b5f0      	push	{r4, r5, r6, r7, lr}
1000987a:	4647      	mov	r7, r8
1000987c:	b480      	push	{r7}
1000987e:	b082      	sub	sp, #8
10009880:	0004      	movs	r4, r0
    unsigned char tmp[4], accel_fsr;
    float scaled_thresh;
    unsigned short dmp_thresh, dmp_thresh_2;
    if (!(axis & TAP_XYZ) || thresh > 1600)
10009882:	0743      	lsls	r3, r0, #29
10009884:	d100      	bne.n	10009888 <dmp_set_tap_thresh+0x10>
10009886:	e09c      	b.n	100099c2 <dmp_set_tap_thresh+0x14a>
10009888:	23c8      	movs	r3, #200	; 0xc8
1000988a:	00db      	lsls	r3, r3, #3
1000988c:	4299      	cmp	r1, r3
1000988e:	d900      	bls.n	10009892 <dmp_set_tap_thresh+0x1a>
10009890:	e09a      	b.n	100099c8 <dmp_set_tap_thresh+0x150>
        return -1;

    scaled_thresh = (float)thresh / DMP_SAMPLE_RATE;
10009892:	0008      	movs	r0, r1
10009894:	4b58      	ldr	r3, [pc, #352]	; (100099f8 <dmp_set_tap_thresh+0x180>)
10009896:	4798      	blx	r3
10009898:	4958      	ldr	r1, [pc, #352]	; (100099fc <dmp_set_tap_thresh+0x184>)
1000989a:	4b59      	ldr	r3, [pc, #356]	; (10009a00 <dmp_set_tap_thresh+0x188>)
1000989c:	4798      	blx	r3
1000989e:	1c06      	adds	r6, r0, #0

    mpu_get_accel_fsr(&accel_fsr);
100098a0:	466b      	mov	r3, sp
100098a2:	1cdd      	adds	r5, r3, #3
100098a4:	0028      	movs	r0, r5
100098a6:	4b57      	ldr	r3, [pc, #348]	; (10009a04 <dmp_set_tap_thresh+0x18c>)
100098a8:	4798      	blx	r3
    switch (accel_fsr) {
100098aa:	782b      	ldrb	r3, [r5, #0]
100098ac:	2b04      	cmp	r3, #4
100098ae:	d019      	beq.n	100098e4 <dmp_set_tap_thresh+0x6c>
100098b0:	b2da      	uxtb	r2, r3
100098b2:	2a04      	cmp	r2, #4
100098b4:	d802      	bhi.n	100098bc <dmp_set_tap_thresh+0x44>
100098b6:	2b02      	cmp	r3, #2
100098b8:	d005      	beq.n	100098c6 <dmp_set_tap_thresh+0x4e>
100098ba:	e088      	b.n	100099ce <dmp_set_tap_thresh+0x156>
100098bc:	2b08      	cmp	r3, #8
100098be:	d020      	beq.n	10009902 <dmp_set_tap_thresh+0x8a>
100098c0:	2b10      	cmp	r3, #16
100098c2:	d02d      	beq.n	10009920 <dmp_set_tap_thresh+0xa8>
100098c4:	e083      	b.n	100099ce <dmp_set_tap_thresh+0x156>
    case 2:
        dmp_thresh = (unsigned short)(scaled_thresh * 16384);
100098c6:	4b50      	ldr	r3, [pc, #320]	; (10009a08 <dmp_set_tap_thresh+0x190>)
100098c8:	4698      	mov	r8, r3
100098ca:	218d      	movs	r1, #141	; 0x8d
100098cc:	05c9      	lsls	r1, r1, #23
100098ce:	1c30      	adds	r0, r6, #0
100098d0:	4798      	blx	r3
100098d2:	4f4e      	ldr	r7, [pc, #312]	; (10009a0c <dmp_set_tap_thresh+0x194>)
100098d4:	47b8      	blx	r7
100098d6:	b285      	uxth	r5, r0
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 12288);
100098d8:	494d      	ldr	r1, [pc, #308]	; (10009a10 <dmp_set_tap_thresh+0x198>)
100098da:	1c30      	adds	r0, r6, #0
100098dc:	47c0      	blx	r8
100098de:	47b8      	blx	r7
100098e0:	b280      	uxth	r0, r0
        break;
100098e2:	e02b      	b.n	1000993c <dmp_set_tap_thresh+0xc4>
    case 4:
        dmp_thresh = (unsigned short)(scaled_thresh * 8192);
100098e4:	4b48      	ldr	r3, [pc, #288]	; (10009a08 <dmp_set_tap_thresh+0x190>)
100098e6:	4698      	mov	r8, r3
100098e8:	218c      	movs	r1, #140	; 0x8c
100098ea:	05c9      	lsls	r1, r1, #23
100098ec:	1c30      	adds	r0, r6, #0
100098ee:	4798      	blx	r3
100098f0:	4f46      	ldr	r7, [pc, #280]	; (10009a0c <dmp_set_tap_thresh+0x194>)
100098f2:	47b8      	blx	r7
100098f4:	b285      	uxth	r5, r0
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 6144);
100098f6:	4947      	ldr	r1, [pc, #284]	; (10009a14 <dmp_set_tap_thresh+0x19c>)
100098f8:	1c30      	adds	r0, r6, #0
100098fa:	47c0      	blx	r8
100098fc:	47b8      	blx	r7
100098fe:	b280      	uxth	r0, r0
        break;
10009900:	e01c      	b.n	1000993c <dmp_set_tap_thresh+0xc4>
    case 8:
        dmp_thresh = (unsigned short)(scaled_thresh * 4096);
10009902:	4b41      	ldr	r3, [pc, #260]	; (10009a08 <dmp_set_tap_thresh+0x190>)
10009904:	4698      	mov	r8, r3
10009906:	218b      	movs	r1, #139	; 0x8b
10009908:	05c9      	lsls	r1, r1, #23
1000990a:	1c30      	adds	r0, r6, #0
1000990c:	4798      	blx	r3
1000990e:	4f3f      	ldr	r7, [pc, #252]	; (10009a0c <dmp_set_tap_thresh+0x194>)
10009910:	47b8      	blx	r7
10009912:	b285      	uxth	r5, r0
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 3072);
10009914:	4940      	ldr	r1, [pc, #256]	; (10009a18 <dmp_set_tap_thresh+0x1a0>)
10009916:	1c30      	adds	r0, r6, #0
10009918:	47c0      	blx	r8
1000991a:	47b8      	blx	r7
1000991c:	b280      	uxth	r0, r0
        break;
1000991e:	e00d      	b.n	1000993c <dmp_set_tap_thresh+0xc4>
    case 16:
        dmp_thresh = (unsigned short)(scaled_thresh * 2048);
10009920:	4b39      	ldr	r3, [pc, #228]	; (10009a08 <dmp_set_tap_thresh+0x190>)
10009922:	4698      	mov	r8, r3
10009924:	218a      	movs	r1, #138	; 0x8a
10009926:	05c9      	lsls	r1, r1, #23
10009928:	1c30      	adds	r0, r6, #0
1000992a:	4798      	blx	r3
1000992c:	4f37      	ldr	r7, [pc, #220]	; (10009a0c <dmp_set_tap_thresh+0x194>)
1000992e:	47b8      	blx	r7
10009930:	b285      	uxth	r5, r0
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 1536);
10009932:	493a      	ldr	r1, [pc, #232]	; (10009a1c <dmp_set_tap_thresh+0x1a4>)
10009934:	1c30      	adds	r0, r6, #0
10009936:	47c0      	blx	r8
10009938:	47b8      	blx	r7
1000993a:	b280      	uxth	r0, r0
        break;
    default:
        return -1;
    }
    tmp[0] = (unsigned char)(dmp_thresh >> 8);
1000993c:	ab01      	add	r3, sp, #4
1000993e:	0a2a      	lsrs	r2, r5, #8
10009940:	701a      	strb	r2, [r3, #0]
    tmp[1] = (unsigned char)(dmp_thresh & 0xFF);
10009942:	705d      	strb	r5, [r3, #1]
    tmp[2] = (unsigned char)(dmp_thresh_2 >> 8);
10009944:	0a02      	lsrs	r2, r0, #8
10009946:	709a      	strb	r2, [r3, #2]
    tmp[3] = (unsigned char)(dmp_thresh_2 & 0xFF);
10009948:	70d8      	strb	r0, [r3, #3]

    if (axis & TAP_X) {
1000994a:	07e3      	lsls	r3, r4, #31
1000994c:	d510      	bpl.n	10009970 <dmp_set_tap_thresh+0xf8>
        if (mpu_write_mem(DMP_TAP_THX, 2, tmp))
1000994e:	aa01      	add	r2, sp, #4
10009950:	2102      	movs	r1, #2
10009952:	20ea      	movs	r0, #234	; 0xea
10009954:	0040      	lsls	r0, r0, #1
10009956:	4b32      	ldr	r3, [pc, #200]	; (10009a20 <dmp_set_tap_thresh+0x1a8>)
10009958:	4798      	blx	r3
1000995a:	2800      	cmp	r0, #0
1000995c:	d13a      	bne.n	100099d4 <dmp_set_tap_thresh+0x15c>
            return -1;
        if (mpu_write_mem(D_1_36, 2, tmp+2))
1000995e:	466b      	mov	r3, sp
10009960:	1d9a      	adds	r2, r3, #6
10009962:	2102      	movs	r1, #2
10009964:	3025      	adds	r0, #37	; 0x25
10009966:	30ff      	adds	r0, #255	; 0xff
10009968:	4b2d      	ldr	r3, [pc, #180]	; (10009a20 <dmp_set_tap_thresh+0x1a8>)
1000996a:	4798      	blx	r3
1000996c:	2800      	cmp	r0, #0
1000996e:	d134      	bne.n	100099da <dmp_set_tap_thresh+0x162>
            return -1;
    }
    if (axis & TAP_Y) {
10009970:	07a3      	lsls	r3, r4, #30
10009972:	d510      	bpl.n	10009996 <dmp_set_tap_thresh+0x11e>
        if (mpu_write_mem(DMP_TAP_THY, 2, tmp))
10009974:	aa01      	add	r2, sp, #4
10009976:	2102      	movs	r1, #2
10009978:	20ec      	movs	r0, #236	; 0xec
1000997a:	0040      	lsls	r0, r0, #1
1000997c:	4b28      	ldr	r3, [pc, #160]	; (10009a20 <dmp_set_tap_thresh+0x1a8>)
1000997e:	4798      	blx	r3
10009980:	2800      	cmp	r0, #0
10009982:	d12d      	bne.n	100099e0 <dmp_set_tap_thresh+0x168>
            return -1;
        if (mpu_write_mem(D_1_40, 2, tmp+2))
10009984:	466b      	mov	r3, sp
10009986:	1d9a      	adds	r2, r3, #6
10009988:	2102      	movs	r1, #2
1000998a:	3029      	adds	r0, #41	; 0x29
1000998c:	30ff      	adds	r0, #255	; 0xff
1000998e:	4b24      	ldr	r3, [pc, #144]	; (10009a20 <dmp_set_tap_thresh+0x1a8>)
10009990:	4798      	blx	r3
10009992:	2800      	cmp	r0, #0
10009994:	d127      	bne.n	100099e6 <dmp_set_tap_thresh+0x16e>
        if (mpu_write_mem(DMP_TAP_THZ, 2, tmp))
            return -1;
        if (mpu_write_mem(D_1_44, 2, tmp+2))
            return -1;
    }
    return 0;
10009996:	2000      	movs	r0, #0
        if (mpu_write_mem(DMP_TAP_THY, 2, tmp))
            return -1;
        if (mpu_write_mem(D_1_40, 2, tmp+2))
            return -1;
    }
    if (axis & TAP_Z) {
10009998:	0763      	lsls	r3, r4, #29
1000999a:	d529      	bpl.n	100099f0 <dmp_set_tap_thresh+0x178>
        if (mpu_write_mem(DMP_TAP_THZ, 2, tmp))
1000999c:	aa01      	add	r2, sp, #4
1000999e:	2102      	movs	r1, #2
100099a0:	30dd      	adds	r0, #221	; 0xdd
100099a2:	30ff      	adds	r0, #255	; 0xff
100099a4:	4b1e      	ldr	r3, [pc, #120]	; (10009a20 <dmp_set_tap_thresh+0x1a8>)
100099a6:	4798      	blx	r3
100099a8:	2800      	cmp	r0, #0
100099aa:	d11f      	bne.n	100099ec <dmp_set_tap_thresh+0x174>
            return -1;
        if (mpu_write_mem(D_1_44, 2, tmp+2))
100099ac:	466b      	mov	r3, sp
100099ae:	1d9a      	adds	r2, r3, #6
100099b0:	2102      	movs	r1, #2
100099b2:	302d      	adds	r0, #45	; 0x2d
100099b4:	30ff      	adds	r0, #255	; 0xff
100099b6:	4b1a      	ldr	r3, [pc, #104]	; (10009a20 <dmp_set_tap_thresh+0x1a8>)
100099b8:	4798      	blx	r3
100099ba:	1e43      	subs	r3, r0, #1
100099bc:	4198      	sbcs	r0, r3
100099be:	4240      	negs	r0, r0
100099c0:	e016      	b.n	100099f0 <dmp_set_tap_thresh+0x178>
{
    unsigned char tmp[4], accel_fsr;
    float scaled_thresh;
    unsigned short dmp_thresh, dmp_thresh_2;
    if (!(axis & TAP_XYZ) || thresh > 1600)
        return -1;
100099c2:	2001      	movs	r0, #1
100099c4:	4240      	negs	r0, r0
100099c6:	e013      	b.n	100099f0 <dmp_set_tap_thresh+0x178>
100099c8:	2001      	movs	r0, #1
100099ca:	4240      	negs	r0, r0
100099cc:	e010      	b.n	100099f0 <dmp_set_tap_thresh+0x178>
        dmp_thresh = (unsigned short)(scaled_thresh * 2048);
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 1536);
        break;
    default:
        return -1;
100099ce:	2001      	movs	r0, #1
100099d0:	4240      	negs	r0, r0
100099d2:	e00d      	b.n	100099f0 <dmp_set_tap_thresh+0x178>
    tmp[2] = (unsigned char)(dmp_thresh_2 >> 8);
    tmp[3] = (unsigned char)(dmp_thresh_2 & 0xFF);

    if (axis & TAP_X) {
        if (mpu_write_mem(DMP_TAP_THX, 2, tmp))
            return -1;
100099d4:	2001      	movs	r0, #1
100099d6:	4240      	negs	r0, r0
100099d8:	e00a      	b.n	100099f0 <dmp_set_tap_thresh+0x178>
        if (mpu_write_mem(D_1_36, 2, tmp+2))
            return -1;
100099da:	2001      	movs	r0, #1
100099dc:	4240      	negs	r0, r0
100099de:	e007      	b.n	100099f0 <dmp_set_tap_thresh+0x178>
    }
    if (axis & TAP_Y) {
        if (mpu_write_mem(DMP_TAP_THY, 2, tmp))
            return -1;
100099e0:	2001      	movs	r0, #1
100099e2:	4240      	negs	r0, r0
100099e4:	e004      	b.n	100099f0 <dmp_set_tap_thresh+0x178>
        if (mpu_write_mem(D_1_40, 2, tmp+2))
            return -1;
100099e6:	2001      	movs	r0, #1
100099e8:	4240      	negs	r0, r0
100099ea:	e001      	b.n	100099f0 <dmp_set_tap_thresh+0x178>
    }
    if (axis & TAP_Z) {
        if (mpu_write_mem(DMP_TAP_THZ, 2, tmp))
            return -1;
100099ec:	2001      	movs	r0, #1
100099ee:	4240      	negs	r0, r0
        if (mpu_write_mem(D_1_44, 2, tmp+2))
            return -1;
    }
    return 0;
}
100099f0:	b002      	add	sp, #8
100099f2:	bc04      	pop	{r2}
100099f4:	4690      	mov	r8, r2
100099f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
100099f8:	10014139 	.word	0x10014139
100099fc:	43480000 	.word	0x43480000
10009a00:	1001379d 	.word	0x1001379d
10009a04:	10008889 	.word	0x10008889
10009a08:	10013b31 	.word	0x10013b31
10009a0c:	10013445 	.word	0x10013445
10009a10:	46400000 	.word	0x46400000
10009a14:	45c00000 	.word	0x45c00000
10009a18:	45400000 	.word	0x45400000
10009a1c:	44c00000 	.word	0x44c00000
10009a20:	10009615 	.word	0x10009615

10009a24 <dmp_set_tap_axes>:
 *  @brief      Set which axes will register a tap.
 *  @param[in]  axis    1, 2, and 4 for XYZ, respectively.
 *  @return     0 if successful.
 */
int dmp_set_tap_axes(unsigned char axis)
{
10009a24:	b500      	push	{lr}
10009a26:	b083      	sub	sp, #12
    unsigned char tmp = 0;

    if (axis & TAP_X)
10009a28:	07c3      	lsls	r3, r0, #31
10009a2a:	d403      	bmi.n	10009a34 <dmp_set_tap_axes+0x10>
 *  @param[in]  axis    1, 2, and 4 for XYZ, respectively.
 *  @return     0 if successful.
 */
int dmp_set_tap_axes(unsigned char axis)
{
    unsigned char tmp = 0;
10009a2c:	2200      	movs	r2, #0
10009a2e:	466b      	mov	r3, sp
10009a30:	71da      	strb	r2, [r3, #7]
10009a32:	e002      	b.n	10009a3a <dmp_set_tap_axes+0x16>

    if (axis & TAP_X)
        tmp |= 0x30;
10009a34:	2230      	movs	r2, #48	; 0x30
10009a36:	466b      	mov	r3, sp
10009a38:	71da      	strb	r2, [r3, #7]
    if (axis & TAP_Y)
10009a3a:	0783      	lsls	r3, r0, #30
10009a3c:	d505      	bpl.n	10009a4a <dmp_set_tap_axes+0x26>
        tmp |= 0x0C;
10009a3e:	466b      	mov	r3, sp
10009a40:	1dda      	adds	r2, r3, #7
10009a42:	79d9      	ldrb	r1, [r3, #7]
10009a44:	230c      	movs	r3, #12
10009a46:	430b      	orrs	r3, r1
10009a48:	7013      	strb	r3, [r2, #0]
    if (axis & TAP_Z)
10009a4a:	0743      	lsls	r3, r0, #29
10009a4c:	d505      	bpl.n	10009a5a <dmp_set_tap_axes+0x36>
        tmp |= 0x03;
10009a4e:	466b      	mov	r3, sp
10009a50:	1dda      	adds	r2, r3, #7
10009a52:	79d9      	ldrb	r1, [r3, #7]
10009a54:	2303      	movs	r3, #3
10009a56:	430b      	orrs	r3, r1
10009a58:	7013      	strb	r3, [r2, #0]
    return mpu_write_mem(D_1_72, 1, &tmp);
10009a5a:	466b      	mov	r3, sp
10009a5c:	1dda      	adds	r2, r3, #7
10009a5e:	2101      	movs	r1, #1
10009a60:	20a4      	movs	r0, #164	; 0xa4
10009a62:	0040      	lsls	r0, r0, #1
10009a64:	4b01      	ldr	r3, [pc, #4]	; (10009a6c <dmp_set_tap_axes+0x48>)
10009a66:	4798      	blx	r3
}
10009a68:	b003      	add	sp, #12
10009a6a:	bd00      	pop	{pc}
10009a6c:	10009615 	.word	0x10009615

10009a70 <dmp_set_tap_count>:
 *  @brief      Set minimum number of taps needed for an interrupt.
 *  @param[in]  min_taps    Minimum consecutive taps (1-4).
 *  @return     0 if successful.
 */
int dmp_set_tap_count(unsigned char min_taps)
{
10009a70:	b500      	push	{lr}
10009a72:	b083      	sub	sp, #12
    unsigned char tmp;

    if (min_taps < 1)
        min_taps = 1;
10009a74:	2301      	movs	r3, #1
 */
int dmp_set_tap_count(unsigned char min_taps)
{
    unsigned char tmp;

    if (min_taps < 1)
10009a76:	2800      	cmp	r0, #0
10009a78:	d004      	beq.n	10009a84 <dmp_set_tap_count+0x14>
10009a7a:	1c03      	adds	r3, r0, #0
10009a7c:	2804      	cmp	r0, #4
10009a7e:	d900      	bls.n	10009a82 <dmp_set_tap_count+0x12>
10009a80:	2304      	movs	r3, #4
10009a82:	b2db      	uxtb	r3, r3
        min_taps = 1;
    else if (min_taps > 4)
        min_taps = 4;

    tmp = min_taps - 1;
10009a84:	466a      	mov	r2, sp
10009a86:	3207      	adds	r2, #7
10009a88:	3b01      	subs	r3, #1
10009a8a:	7013      	strb	r3, [r2, #0]
    return mpu_write_mem(D_1_79, 1, &tmp);
10009a8c:	2101      	movs	r1, #1
10009a8e:	2050      	movs	r0, #80	; 0x50
10009a90:	30ff      	adds	r0, #255	; 0xff
10009a92:	4b02      	ldr	r3, [pc, #8]	; (10009a9c <dmp_set_tap_count+0x2c>)
10009a94:	4798      	blx	r3
}
10009a96:	b003      	add	sp, #12
10009a98:	bd00      	pop	{pc}
10009a9a:	46c0      	nop			; (mov r8, r8)
10009a9c:	10009615 	.word	0x10009615

10009aa0 <dmp_set_tap_time>:
 *  @brief      Set length between valid taps.
 *  @param[in]  time    Milliseconds between taps.
 *  @return     0 if successful.
 */
int dmp_set_tap_time(unsigned short time)
{
10009aa0:	b500      	push	{lr}
10009aa2:	b083      	sub	sp, #12
    unsigned short dmp_time;
    unsigned char tmp[2];

    dmp_time = time / (1000 / DMP_SAMPLE_RATE);
10009aa4:	2105      	movs	r1, #5
10009aa6:	4b07      	ldr	r3, [pc, #28]	; (10009ac4 <dmp_set_tap_time+0x24>)
10009aa8:	4798      	blx	r3
10009aaa:	b280      	uxth	r0, r0
    tmp[0] = (unsigned char)(dmp_time >> 8);
10009aac:	aa01      	add	r2, sp, #4
10009aae:	0a03      	lsrs	r3, r0, #8
10009ab0:	7013      	strb	r3, [r2, #0]
    tmp[1] = (unsigned char)(dmp_time & 0xFF);
10009ab2:	7050      	strb	r0, [r2, #1]
    return mpu_write_mem(DMP_TAPW_MIN, 2, tmp);
10009ab4:	2102      	movs	r1, #2
10009ab6:	20ef      	movs	r0, #239	; 0xef
10009ab8:	0040      	lsls	r0, r0, #1
10009aba:	4b03      	ldr	r3, [pc, #12]	; (10009ac8 <dmp_set_tap_time+0x28>)
10009abc:	4798      	blx	r3
}
10009abe:	b003      	add	sp, #12
10009ac0:	bd00      	pop	{pc}
10009ac2:	46c0      	nop			; (mov r8, r8)
10009ac4:	10013011 	.word	0x10013011
10009ac8:	10009615 	.word	0x10009615

10009acc <dmp_set_tap_time_multi>:
 *  @brief      Set max time between taps to register as a multi-tap.
 *  @param[in]  time    Max milliseconds between taps.
 *  @return     0 if successful.
 */
int dmp_set_tap_time_multi(unsigned short time)
{
10009acc:	b500      	push	{lr}
10009ace:	b083      	sub	sp, #12
    unsigned short dmp_time;
    unsigned char tmp[2];

    dmp_time = time / (1000 / DMP_SAMPLE_RATE);
10009ad0:	2105      	movs	r1, #5
10009ad2:	4b07      	ldr	r3, [pc, #28]	; (10009af0 <dmp_set_tap_time_multi+0x24>)
10009ad4:	4798      	blx	r3
10009ad6:	b280      	uxth	r0, r0
    tmp[0] = (unsigned char)(dmp_time >> 8);
10009ad8:	aa01      	add	r2, sp, #4
10009ada:	0a03      	lsrs	r3, r0, #8
10009adc:	7013      	strb	r3, [r2, #0]
    tmp[1] = (unsigned char)(dmp_time & 0xFF);
10009ade:	7050      	strb	r0, [r2, #1]
    return mpu_write_mem(D_1_218, 2, tmp);
10009ae0:	2102      	movs	r1, #2
10009ae2:	20ed      	movs	r0, #237	; 0xed
10009ae4:	0040      	lsls	r0, r0, #1
10009ae6:	4b03      	ldr	r3, [pc, #12]	; (10009af4 <dmp_set_tap_time_multi+0x28>)
10009ae8:	4798      	blx	r3
}
10009aea:	b003      	add	sp, #12
10009aec:	bd00      	pop	{pc}
10009aee:	46c0      	nop			; (mov r8, r8)
10009af0:	10013011 	.word	0x10013011
10009af4:	10009615 	.word	0x10009615

10009af8 <dmp_set_shake_reject_thresh>:
 *  @param[in]  sf      Gyro scale factor.
 *  @param[in]  thresh  Gyro threshold in dps.
 *  @return     0 if successful.
 */
int dmp_set_shake_reject_thresh(long sf, unsigned short thresh)
{
10009af8:	b510      	push	{r4, lr}
10009afa:	b082      	sub	sp, #8
10009afc:	000c      	movs	r4, r1
    unsigned char tmp[4];
    long thresh_scaled = sf / 1000 * thresh;
10009afe:	21fa      	movs	r1, #250	; 0xfa
10009b00:	0089      	lsls	r1, r1, #2
10009b02:	4b09      	ldr	r3, [pc, #36]	; (10009b28 <dmp_set_shake_reject_thresh+0x30>)
10009b04:	4798      	blx	r3
10009b06:	4360      	muls	r0, r4
    tmp[0] = (unsigned char)(((long)thresh_scaled >> 24) & 0xFF);
10009b08:	aa01      	add	r2, sp, #4
10009b0a:	1603      	asrs	r3, r0, #24
10009b0c:	7013      	strb	r3, [r2, #0]
    tmp[1] = (unsigned char)(((long)thresh_scaled >> 16) & 0xFF);
10009b0e:	1403      	asrs	r3, r0, #16
10009b10:	7053      	strb	r3, [r2, #1]
    tmp[2] = (unsigned char)(((long)thresh_scaled >> 8) & 0xFF);
10009b12:	1203      	asrs	r3, r0, #8
10009b14:	7093      	strb	r3, [r2, #2]
    tmp[3] = (unsigned char)((long)thresh_scaled & 0xFF);
10009b16:	70d0      	strb	r0, [r2, #3]
    return mpu_write_mem(D_1_92, 4, tmp);
10009b18:	2104      	movs	r1, #4
10009b1a:	20ae      	movs	r0, #174	; 0xae
10009b1c:	0040      	lsls	r0, r0, #1
10009b1e:	4b03      	ldr	r3, [pc, #12]	; (10009b2c <dmp_set_shake_reject_thresh+0x34>)
10009b20:	4798      	blx	r3
}
10009b22:	b002      	add	sp, #8
10009b24:	bd10      	pop	{r4, pc}
10009b26:	46c0      	nop			; (mov r8, r8)
10009b28:	10013125 	.word	0x10013125
10009b2c:	10009615 	.word	0x10009615

10009b30 <dmp_set_shake_reject_time>:
 *  60 ms is added to this parameter.
 *  @param[in]  time    Time in milliseconds.
 *  @return     0 if successful.
 */
int dmp_set_shake_reject_time(unsigned short time)
{
10009b30:	b500      	push	{lr}
10009b32:	b083      	sub	sp, #12
    unsigned char tmp[2];

    time /= (1000 / DMP_SAMPLE_RATE);
10009b34:	2105      	movs	r1, #5
10009b36:	4b07      	ldr	r3, [pc, #28]	; (10009b54 <dmp_set_shake_reject_time+0x24>)
10009b38:	4798      	blx	r3
10009b3a:	b280      	uxth	r0, r0
    tmp[0] = time >> 8;
10009b3c:	aa01      	add	r2, sp, #4
10009b3e:	0a03      	lsrs	r3, r0, #8
10009b40:	7013      	strb	r3, [r2, #0]
    tmp[1] = time & 0xFF;
10009b42:	7050      	strb	r0, [r2, #1]
    return mpu_write_mem(D_1_90,2,tmp);
10009b44:	2102      	movs	r1, #2
10009b46:	20ad      	movs	r0, #173	; 0xad
10009b48:	0040      	lsls	r0, r0, #1
10009b4a:	4b03      	ldr	r3, [pc, #12]	; (10009b58 <dmp_set_shake_reject_time+0x28>)
10009b4c:	4798      	blx	r3
}
10009b4e:	b003      	add	sp, #12
10009b50:	bd00      	pop	{pc}
10009b52:	46c0      	nop			; (mov r8, r8)
10009b54:	10013011 	.word	0x10013011
10009b58:	10009615 	.word	0x10009615

10009b5c <dmp_set_shake_reject_timeout>:
 *  60 ms is added to this parameter.
 *  @param[in]  time    Time in milliseconds.
 *  @return     0 if successful.
 */
int dmp_set_shake_reject_timeout(unsigned short time)
{
10009b5c:	b500      	push	{lr}
10009b5e:	b083      	sub	sp, #12
    unsigned char tmp[2];

    time /= (1000 / DMP_SAMPLE_RATE);
10009b60:	2105      	movs	r1, #5
10009b62:	4b07      	ldr	r3, [pc, #28]	; (10009b80 <dmp_set_shake_reject_timeout+0x24>)
10009b64:	4798      	blx	r3
10009b66:	b280      	uxth	r0, r0
    tmp[0] = time >> 8;
10009b68:	aa01      	add	r2, sp, #4
10009b6a:	0a03      	lsrs	r3, r0, #8
10009b6c:	7013      	strb	r3, [r2, #0]
    tmp[1] = time & 0xFF;
10009b6e:	7050      	strb	r0, [r2, #1]
    return mpu_write_mem(D_1_88,2,tmp);
10009b70:	2102      	movs	r1, #2
10009b72:	20ac      	movs	r0, #172	; 0xac
10009b74:	0040      	lsls	r0, r0, #1
10009b76:	4b03      	ldr	r3, [pc, #12]	; (10009b84 <dmp_set_shake_reject_timeout+0x28>)
10009b78:	4798      	blx	r3
}
10009b7a:	b003      	add	sp, #12
10009b7c:	bd00      	pop	{pc}
10009b7e:	46c0      	nop			; (mov r8, r8)
10009b80:	10013011 	.word	0x10013011
10009b84:	10009615 	.word	0x10009615

10009b88 <dmp_enable_gyro_cal>:
 *  subtracted from the gyro output.
 *  @param[in]  enable  1 to enable gyro calibration.
 *  @return     0 if successful.
 */
int dmp_enable_gyro_cal(unsigned char enable)
{
10009b88:	b500      	push	{lr}
10009b8a:	b085      	sub	sp, #20
    if (enable) {
10009b8c:	2800      	cmp	r0, #0
10009b8e:	d00c      	beq.n	10009baa <dmp_enable_gyro_cal+0x22>
        unsigned char regs[9] = {0xb8, 0xaa, 0xb3, 0x8d, 0xb4, 0x98, 0x0d, 0x35, 0x5d};
10009b90:	2209      	movs	r2, #9
10009b92:	490d      	ldr	r1, [pc, #52]	; (10009bc8 <dmp_enable_gyro_cal+0x40>)
10009b94:	311c      	adds	r1, #28
10009b96:	a801      	add	r0, sp, #4
10009b98:	4b0c      	ldr	r3, [pc, #48]	; (10009bcc <dmp_enable_gyro_cal+0x44>)
10009b9a:	4798      	blx	r3
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
10009b9c:	aa01      	add	r2, sp, #4
10009b9e:	2109      	movs	r1, #9
10009ba0:	2097      	movs	r0, #151	; 0x97
10009ba2:	00c0      	lsls	r0, r0, #3
10009ba4:	4b0a      	ldr	r3, [pc, #40]	; (10009bd0 <dmp_enable_gyro_cal+0x48>)
10009ba6:	4798      	blx	r3
10009ba8:	e00b      	b.n	10009bc2 <dmp_enable_gyro_cal+0x3a>
    } else {
        unsigned char regs[9] = {0xb8, 0xaa, 0xaa, 0xaa, 0xb0, 0x88, 0xc3, 0xc5, 0xc7};
10009baa:	2209      	movs	r2, #9
10009bac:	4906      	ldr	r1, [pc, #24]	; (10009bc8 <dmp_enable_gyro_cal+0x40>)
10009bae:	3128      	adds	r1, #40	; 0x28
10009bb0:	a801      	add	r0, sp, #4
10009bb2:	4b06      	ldr	r3, [pc, #24]	; (10009bcc <dmp_enable_gyro_cal+0x44>)
10009bb4:	4798      	blx	r3
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
10009bb6:	aa01      	add	r2, sp, #4
10009bb8:	2109      	movs	r1, #9
10009bba:	2097      	movs	r0, #151	; 0x97
10009bbc:	00c0      	lsls	r0, r0, #3
10009bbe:	4b04      	ldr	r3, [pc, #16]	; (10009bd0 <dmp_enable_gyro_cal+0x48>)
10009bc0:	4798      	blx	r3
    }
}
10009bc2:	b005      	add	sp, #20
10009bc4:	bd00      	pop	{pc}
10009bc6:	46c0      	nop			; (mov r8, r8)
10009bc8:	10016774 	.word	0x10016774
10009bcc:	10015103 	.word	0x10015103
10009bd0:	10009615 	.word	0x10009615

10009bd4 <dmp_enable_lp_quat>:
 *  exclusive.
 *  @param[in]  enable  1 to enable 3-axis quaternion.
 *  @return     0 if successful.
 */
int dmp_enable_lp_quat(unsigned char enable)
{
10009bd4:	b500      	push	{lr}
10009bd6:	b083      	sub	sp, #12
    unsigned char regs[4];
    if (enable) {
10009bd8:	2800      	cmp	r0, #0
10009bda:	d009      	beq.n	10009bf0 <dmp_enable_lp_quat+0x1c>
        regs[0] = DINBC0;
10009bdc:	ab01      	add	r3, sp, #4
10009bde:	22c0      	movs	r2, #192	; 0xc0
10009be0:	701a      	strb	r2, [r3, #0]
        regs[1] = DINBC2;
10009be2:	3202      	adds	r2, #2
10009be4:	705a      	strb	r2, [r3, #1]
        regs[2] = DINBC4;
10009be6:	3202      	adds	r2, #2
10009be8:	709a      	strb	r2, [r3, #2]
        regs[3] = DINBC6;
10009bea:	3202      	adds	r2, #2
10009bec:	70da      	strb	r2, [r3, #3]
10009bee:	e001      	b.n	10009bf4 <dmp_enable_lp_quat+0x20>
    }
    else
        memset(regs, 0x8B, 4);
10009bf0:	4b05      	ldr	r3, [pc, #20]	; (10009c08 <dmp_enable_lp_quat+0x34>)
10009bf2:	9301      	str	r3, [sp, #4]

    mpu_write_mem(CFG_LP_QUAT, 4, regs);
10009bf4:	aa01      	add	r2, sp, #4
10009bf6:	2104      	movs	r1, #4
10009bf8:	4804      	ldr	r0, [pc, #16]	; (10009c0c <dmp_enable_lp_quat+0x38>)
10009bfa:	4b05      	ldr	r3, [pc, #20]	; (10009c10 <dmp_enable_lp_quat+0x3c>)
10009bfc:	4798      	blx	r3

    return mpu_reset_fifo();
10009bfe:	4b05      	ldr	r3, [pc, #20]	; (10009c14 <dmp_enable_lp_quat+0x40>)
10009c00:	4798      	blx	r3
}
10009c02:	b003      	add	sp, #12
10009c04:	bd00      	pop	{pc}
10009c06:	46c0      	nop			; (mov r8, r8)
10009c08:	8b8b8b8b 	.word	0x8b8b8b8b
10009c0c:	00000a98 	.word	0x00000a98
10009c10:	10009615 	.word	0x10009615
10009c14:	100085f1 	.word	0x100085f1

10009c18 <dmp_enable_6x_lp_quat>:
 *  exclusive.
 *  @param[in]   enable  1 to enable 6-axis quaternion.
 *  @return      0 if successful.
 */
int dmp_enable_6x_lp_quat(unsigned char enable)
{
10009c18:	b500      	push	{lr}
10009c1a:	b083      	sub	sp, #12
    unsigned char regs[4];
    if (enable) {
10009c1c:	2800      	cmp	r0, #0
10009c1e:	d009      	beq.n	10009c34 <dmp_enable_6x_lp_quat+0x1c>
        regs[0] = DINA20;
10009c20:	ab01      	add	r3, sp, #4
10009c22:	2220      	movs	r2, #32
10009c24:	701a      	strb	r2, [r3, #0]
        regs[1] = DINA28;
10009c26:	3208      	adds	r2, #8
10009c28:	705a      	strb	r2, [r3, #1]
        regs[2] = DINA30;
10009c2a:	3208      	adds	r2, #8
10009c2c:	709a      	strb	r2, [r3, #2]
        regs[3] = DINA38;
10009c2e:	3208      	adds	r2, #8
10009c30:	70da      	strb	r2, [r3, #3]
10009c32:	e001      	b.n	10009c38 <dmp_enable_6x_lp_quat+0x20>
    } else
        memset(regs, 0xA3, 4);
10009c34:	4b05      	ldr	r3, [pc, #20]	; (10009c4c <dmp_enable_6x_lp_quat+0x34>)
10009c36:	9301      	str	r3, [sp, #4]

    mpu_write_mem(CFG_8, 4, regs);
10009c38:	aa01      	add	r2, sp, #4
10009c3a:	2104      	movs	r1, #4
10009c3c:	4804      	ldr	r0, [pc, #16]	; (10009c50 <dmp_enable_6x_lp_quat+0x38>)
10009c3e:	4b05      	ldr	r3, [pc, #20]	; (10009c54 <dmp_enable_6x_lp_quat+0x3c>)
10009c40:	4798      	blx	r3

    return mpu_reset_fifo();
10009c42:	4b05      	ldr	r3, [pc, #20]	; (10009c58 <dmp_enable_6x_lp_quat+0x40>)
10009c44:	4798      	blx	r3
}
10009c46:	b003      	add	sp, #12
10009c48:	bd00      	pop	{pc}
10009c4a:	46c0      	nop			; (mov r8, r8)
10009c4c:	a3a3a3a3 	.word	0xa3a3a3a3
10009c50:	00000a9e 	.word	0x00000a9e
10009c54:	10009615 	.word	0x10009615
10009c58:	100085f1 	.word	0x100085f1

10009c5c <dmp_enable_feature>:
 *  mutually exclusive.
 *  @param[in]  mask    Mask of features to enable.
 *  @return     0 if successful.
 */
int dmp_enable_feature(unsigned short mask)
{
10009c5c:	b5f0      	push	{r4, r5, r6, r7, lr}
10009c5e:	b085      	sub	sp, #20
10009c60:	0004      	movs	r4, r0

    /* TODO: All of these settings can probably be integrated into the default
     * DMP image.
     */
    /* Set integration scale factor. */
    tmp[0] = (unsigned char)((GYRO_SF >> 24) & 0xFF);
10009c62:	ad01      	add	r5, sp, #4
10009c64:	2302      	movs	r3, #2
10009c66:	702b      	strb	r3, [r5, #0]
    tmp[1] = (unsigned char)((GYRO_SF >> 16) & 0xFF);
10009c68:	33c8      	adds	r3, #200	; 0xc8
10009c6a:	706b      	strb	r3, [r5, #1]
    tmp[2] = (unsigned char)((GYRO_SF >> 8) & 0xFF);
10009c6c:	3319      	adds	r3, #25
10009c6e:	70ab      	strb	r3, [r5, #2]
    tmp[3] = (unsigned char)(GYRO_SF & 0xFF);
10009c70:	3bda      	subs	r3, #218	; 0xda
10009c72:	70eb      	strb	r3, [r5, #3]
    mpu_write_mem(D_0_104, 4, tmp);
10009c74:	002a      	movs	r2, r5
10009c76:	2104      	movs	r1, #4
10009c78:	2068      	movs	r0, #104	; 0x68
10009c7a:	4b6a      	ldr	r3, [pc, #424]	; (10009e24 <dmp_enable_feature+0x1c8>)
10009c7c:	4798      	blx	r3

    /* Send sensor data to the FIFO. */
    tmp[0] = 0xA3;
10009c7e:	23a3      	movs	r3, #163	; 0xa3
10009c80:	702b      	strb	r3, [r5, #0]
10009c82:	2740      	movs	r7, #64	; 0x40
10009c84:	4027      	ands	r7, r4
    if (mask & DMP_FEATURE_SEND_RAW_ACCEL) {
10009c86:	d007      	beq.n	10009c98 <dmp_enable_feature+0x3c>
        tmp[1] = 0xC0;
10009c88:	ab01      	add	r3, sp, #4
10009c8a:	22c0      	movs	r2, #192	; 0xc0
10009c8c:	705a      	strb	r2, [r3, #1]
        tmp[2] = 0xC8;
10009c8e:	3208      	adds	r2, #8
10009c90:	709a      	strb	r2, [r3, #2]
        tmp[3] = 0xC2;
10009c92:	3a06      	subs	r2, #6
10009c94:	70da      	strb	r2, [r3, #3]
10009c96:	e004      	b.n	10009ca2 <dmp_enable_feature+0x46>
    } else {
        tmp[1] = 0xA3;
10009c98:	ab01      	add	r3, sp, #4
10009c9a:	22a3      	movs	r2, #163	; 0xa3
10009c9c:	705a      	strb	r2, [r3, #1]
        tmp[2] = 0xA3;
10009c9e:	709a      	strb	r2, [r3, #2]
        tmp[3] = 0xA3;
10009ca0:	70da      	strb	r2, [r3, #3]
10009ca2:	25c0      	movs	r5, #192	; 0xc0
10009ca4:	006d      	lsls	r5, r5, #1
10009ca6:	4025      	ands	r5, r4
    }
    if (mask & DMP_FEATURE_SEND_ANY_GYRO) {
10009ca8:	d007      	beq.n	10009cba <dmp_enable_feature+0x5e>
        tmp[4] = 0xC4;
10009caa:	ab01      	add	r3, sp, #4
10009cac:	22c4      	movs	r2, #196	; 0xc4
10009cae:	711a      	strb	r2, [r3, #4]
        tmp[5] = 0xCC;
10009cb0:	3208      	adds	r2, #8
10009cb2:	715a      	strb	r2, [r3, #5]
        tmp[6] = 0xC6;
10009cb4:	3a06      	subs	r2, #6
10009cb6:	719a      	strb	r2, [r3, #6]
10009cb8:	e004      	b.n	10009cc4 <dmp_enable_feature+0x68>
    } else {
        tmp[4] = 0xA3;
10009cba:	ab01      	add	r3, sp, #4
10009cbc:	22a3      	movs	r2, #163	; 0xa3
10009cbe:	711a      	strb	r2, [r3, #4]
        tmp[5] = 0xA3;
10009cc0:	715a      	strb	r2, [r3, #5]
        tmp[6] = 0xA3;
10009cc2:	719a      	strb	r2, [r3, #6]
    }
    tmp[7] = 0xA3;
10009cc4:	aa01      	add	r2, sp, #4
10009cc6:	23a3      	movs	r3, #163	; 0xa3
10009cc8:	71d3      	strb	r3, [r2, #7]
    tmp[8] = 0xA3;
10009cca:	7213      	strb	r3, [r2, #8]
    tmp[9] = 0xA3;
10009ccc:	7253      	strb	r3, [r2, #9]
    mpu_write_mem(CFG_15,10,tmp);
10009cce:	210a      	movs	r1, #10
10009cd0:	4855      	ldr	r0, [pc, #340]	; (10009e28 <dmp_enable_feature+0x1cc>)
10009cd2:	4b54      	ldr	r3, [pc, #336]	; (10009e24 <dmp_enable_feature+0x1c8>)
10009cd4:	4798      	blx	r3
10009cd6:	2603      	movs	r6, #3
10009cd8:	4026      	ands	r6, r4

    /* Send gesture data to the FIFO. */
    if (mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
10009cda:	d003      	beq.n	10009ce4 <dmp_enable_feature+0x88>
        tmp[0] = DINA20;
10009cdc:	2220      	movs	r2, #32
10009cde:	ab01      	add	r3, sp, #4
10009ce0:	701a      	strb	r2, [r3, #0]
10009ce2:	e002      	b.n	10009cea <dmp_enable_feature+0x8e>
    else
        tmp[0] = 0xD8;
10009ce4:	22d8      	movs	r2, #216	; 0xd8
10009ce6:	ab01      	add	r3, sp, #4
10009ce8:	701a      	strb	r2, [r3, #0]
    mpu_write_mem(CFG_27,1,tmp);
10009cea:	aa01      	add	r2, sp, #4
10009cec:	2101      	movs	r1, #1
10009cee:	484f      	ldr	r0, [pc, #316]	; (10009e2c <dmp_enable_feature+0x1d0>)
10009cf0:	4b4c      	ldr	r3, [pc, #304]	; (10009e24 <dmp_enable_feature+0x1c8>)
10009cf2:	4798      	blx	r3

    if (mask & DMP_FEATURE_GYRO_CAL)
10009cf4:	06a3      	lsls	r3, r4, #26
10009cf6:	d503      	bpl.n	10009d00 <dmp_enable_feature+0xa4>
        dmp_enable_gyro_cal(1);
10009cf8:	2001      	movs	r0, #1
10009cfa:	4b4d      	ldr	r3, [pc, #308]	; (10009e30 <dmp_enable_feature+0x1d4>)
10009cfc:	4798      	blx	r3
10009cfe:	e002      	b.n	10009d06 <dmp_enable_feature+0xaa>
    else
        dmp_enable_gyro_cal(0);
10009d00:	2000      	movs	r0, #0
10009d02:	4b4b      	ldr	r3, [pc, #300]	; (10009e30 <dmp_enable_feature+0x1d4>)
10009d04:	4798      	blx	r3

    if (mask & DMP_FEATURE_SEND_ANY_GYRO) {
10009d06:	2d00      	cmp	r5, #0
10009d08:	d019      	beq.n	10009d3e <dmp_enable_feature+0xe2>
        if (mask & DMP_FEATURE_SEND_CAL_GYRO) {
10009d0a:	05e3      	lsls	r3, r4, #23
10009d0c:	d509      	bpl.n	10009d22 <dmp_enable_feature+0xc6>
            tmp[0] = 0xB2;
10009d0e:	ab01      	add	r3, sp, #4
10009d10:	22b2      	movs	r2, #178	; 0xb2
10009d12:	701a      	strb	r2, [r3, #0]
            tmp[1] = 0x8B;
10009d14:	3a27      	subs	r2, #39	; 0x27
10009d16:	705a      	strb	r2, [r3, #1]
            tmp[2] = 0xB6;
10009d18:	322b      	adds	r2, #43	; 0x2b
10009d1a:	709a      	strb	r2, [r3, #2]
            tmp[3] = 0x9B;
10009d1c:	3a1b      	subs	r2, #27
10009d1e:	70da      	strb	r2, [r3, #3]
10009d20:	e008      	b.n	10009d34 <dmp_enable_feature+0xd8>
        } else {
            tmp[0] = DINAC0;
10009d22:	ab01      	add	r3, sp, #4
10009d24:	22b0      	movs	r2, #176	; 0xb0
10009d26:	701a      	strb	r2, [r3, #0]
            tmp[1] = DINA80;
10009d28:	3a30      	subs	r2, #48	; 0x30
10009d2a:	705a      	strb	r2, [r3, #1]
            tmp[2] = DINAC2;
10009d2c:	3234      	adds	r2, #52	; 0x34
10009d2e:	709a      	strb	r2, [r3, #2]
            tmp[3] = DINA90;
10009d30:	3a24      	subs	r2, #36	; 0x24
10009d32:	70da      	strb	r2, [r3, #3]
        }
        mpu_write_mem(CFG_GYRO_RAW_DATA, 4, tmp);
10009d34:	aa01      	add	r2, sp, #4
10009d36:	2104      	movs	r1, #4
10009d38:	483e      	ldr	r0, [pc, #248]	; (10009e34 <dmp_enable_feature+0x1d8>)
10009d3a:	4b3a      	ldr	r3, [pc, #232]	; (10009e24 <dmp_enable_feature+0x1c8>)
10009d3c:	4798      	blx	r3
    }

    if (mask & DMP_FEATURE_TAP) {
10009d3e:	07e3      	lsls	r3, r4, #31
10009d40:	d523      	bpl.n	10009d8a <dmp_enable_feature+0x12e>
        /* Enable tap. */
        tmp[0] = 0xF8;
10009d42:	aa01      	add	r2, sp, #4
10009d44:	23f8      	movs	r3, #248	; 0xf8
10009d46:	7013      	strb	r3, [r2, #0]
        mpu_write_mem(CFG_20, 1, tmp);
10009d48:	2101      	movs	r1, #1
10009d4a:	208b      	movs	r0, #139	; 0x8b
10009d4c:	0100      	lsls	r0, r0, #4
10009d4e:	4b35      	ldr	r3, [pc, #212]	; (10009e24 <dmp_enable_feature+0x1c8>)
10009d50:	4798      	blx	r3
        dmp_set_tap_thresh(TAP_XYZ, 250);
10009d52:	21fa      	movs	r1, #250	; 0xfa
10009d54:	2007      	movs	r0, #7
10009d56:	4b38      	ldr	r3, [pc, #224]	; (10009e38 <dmp_enable_feature+0x1dc>)
10009d58:	4798      	blx	r3
        dmp_set_tap_axes(TAP_XYZ);
10009d5a:	2007      	movs	r0, #7
10009d5c:	4b37      	ldr	r3, [pc, #220]	; (10009e3c <dmp_enable_feature+0x1e0>)
10009d5e:	4798      	blx	r3
        dmp_set_tap_count(1);
10009d60:	2001      	movs	r0, #1
10009d62:	4b37      	ldr	r3, [pc, #220]	; (10009e40 <dmp_enable_feature+0x1e4>)
10009d64:	4798      	blx	r3
        dmp_set_tap_time(100);
10009d66:	2064      	movs	r0, #100	; 0x64
10009d68:	4b36      	ldr	r3, [pc, #216]	; (10009e44 <dmp_enable_feature+0x1e8>)
10009d6a:	4798      	blx	r3
        dmp_set_tap_time_multi(500);
10009d6c:	20fa      	movs	r0, #250	; 0xfa
10009d6e:	0040      	lsls	r0, r0, #1
10009d70:	4b35      	ldr	r3, [pc, #212]	; (10009e48 <dmp_enable_feature+0x1ec>)
10009d72:	4798      	blx	r3

        dmp_set_shake_reject_thresh(GYRO_SF, 200);
10009d74:	21c8      	movs	r1, #200	; 0xc8
10009d76:	4835      	ldr	r0, [pc, #212]	; (10009e4c <dmp_enable_feature+0x1f0>)
10009d78:	4b35      	ldr	r3, [pc, #212]	; (10009e50 <dmp_enable_feature+0x1f4>)
10009d7a:	4798      	blx	r3
        dmp_set_shake_reject_time(40);
10009d7c:	2028      	movs	r0, #40	; 0x28
10009d7e:	4b35      	ldr	r3, [pc, #212]	; (10009e54 <dmp_enable_feature+0x1f8>)
10009d80:	4798      	blx	r3
        dmp_set_shake_reject_timeout(10);
10009d82:	200a      	movs	r0, #10
10009d84:	4b34      	ldr	r3, [pc, #208]	; (10009e58 <dmp_enable_feature+0x1fc>)
10009d86:	4798      	blx	r3
10009d88:	e007      	b.n	10009d9a <dmp_enable_feature+0x13e>
    } else {
        tmp[0] = 0xD8;
10009d8a:	aa01      	add	r2, sp, #4
10009d8c:	23d8      	movs	r3, #216	; 0xd8
10009d8e:	7013      	strb	r3, [r2, #0]
        mpu_write_mem(CFG_20, 1, tmp);
10009d90:	2101      	movs	r1, #1
10009d92:	208b      	movs	r0, #139	; 0x8b
10009d94:	0100      	lsls	r0, r0, #4
10009d96:	4b23      	ldr	r3, [pc, #140]	; (10009e24 <dmp_enable_feature+0x1c8>)
10009d98:	4798      	blx	r3
    }

    if (mask & DMP_FEATURE_ANDROID_ORIENT) {
10009d9a:	07a3      	lsls	r3, r4, #30
10009d9c:	d503      	bpl.n	10009da6 <dmp_enable_feature+0x14a>
        tmp[0] = 0xD9;
10009d9e:	22d9      	movs	r2, #217	; 0xd9
10009da0:	ab01      	add	r3, sp, #4
10009da2:	701a      	strb	r2, [r3, #0]
10009da4:	e002      	b.n	10009dac <dmp_enable_feature+0x150>
    } else
        tmp[0] = 0xD8;
10009da6:	22d8      	movs	r2, #216	; 0xd8
10009da8:	ab01      	add	r3, sp, #4
10009daa:	701a      	strb	r2, [r3, #0]
    mpu_write_mem(CFG_ANDROID_ORIENT_INT, 1, tmp);
10009dac:	aa01      	add	r2, sp, #4
10009dae:	2101      	movs	r1, #1
10009db0:	482a      	ldr	r0, [pc, #168]	; (10009e5c <dmp_enable_feature+0x200>)
10009db2:	4b1c      	ldr	r3, [pc, #112]	; (10009e24 <dmp_enable_feature+0x1c8>)
10009db4:	4798      	blx	r3

    if (mask & DMP_FEATURE_LP_QUAT)
10009db6:	0763      	lsls	r3, r4, #29
10009db8:	d503      	bpl.n	10009dc2 <dmp_enable_feature+0x166>
        dmp_enable_lp_quat(1);
10009dba:	2001      	movs	r0, #1
10009dbc:	4b28      	ldr	r3, [pc, #160]	; (10009e60 <dmp_enable_feature+0x204>)
10009dbe:	4798      	blx	r3
10009dc0:	e002      	b.n	10009dc8 <dmp_enable_feature+0x16c>
    else
        dmp_enable_lp_quat(0);
10009dc2:	2000      	movs	r0, #0
10009dc4:	4b26      	ldr	r3, [pc, #152]	; (10009e60 <dmp_enable_feature+0x204>)
10009dc6:	4798      	blx	r3

    if (mask & DMP_FEATURE_6X_LP_QUAT)
10009dc8:	06e3      	lsls	r3, r4, #27
10009dca:	d503      	bpl.n	10009dd4 <dmp_enable_feature+0x178>
        dmp_enable_6x_lp_quat(1);
10009dcc:	2001      	movs	r0, #1
10009dce:	4b25      	ldr	r3, [pc, #148]	; (10009e64 <dmp_enable_feature+0x208>)
10009dd0:	4798      	blx	r3
10009dd2:	e002      	b.n	10009dda <dmp_enable_feature+0x17e>
    else
        dmp_enable_6x_lp_quat(0);
10009dd4:	2000      	movs	r0, #0
10009dd6:	4b23      	ldr	r3, [pc, #140]	; (10009e64 <dmp_enable_feature+0x208>)
10009dd8:	4798      	blx	r3

    /* Pedometer is always enabled. */
    dmp.feature_mask = mask | DMP_FEATURE_PEDOMETER;
10009dda:	2308      	movs	r3, #8
10009ddc:	4323      	orrs	r3, r4
10009dde:	4a22      	ldr	r2, [pc, #136]	; (10009e68 <dmp_enable_feature+0x20c>)
10009de0:	8153      	strh	r3, [r2, #10]
    mpu_reset_fifo();
10009de2:	4b22      	ldr	r3, [pc, #136]	; (10009e6c <dmp_enable_feature+0x210>)
10009de4:	4798      	blx	r3

    dmp.packet_length = 0;
    if (mask & DMP_FEATURE_SEND_RAW_ACCEL)
10009de6:	2f00      	cmp	r7, #0
10009de8:	d103      	bne.n	10009df2 <dmp_enable_feature+0x196>

    /* Pedometer is always enabled. */
    dmp.feature_mask = mask | DMP_FEATURE_PEDOMETER;
    mpu_reset_fifo();

    dmp.packet_length = 0;
10009dea:	2200      	movs	r2, #0
10009dec:	4b1e      	ldr	r3, [pc, #120]	; (10009e68 <dmp_enable_feature+0x20c>)
10009dee:	739a      	strb	r2, [r3, #14]
10009df0:	e002      	b.n	10009df8 <dmp_enable_feature+0x19c>
    if (mask & DMP_FEATURE_SEND_RAW_ACCEL)
        dmp.packet_length += 6;
10009df2:	2206      	movs	r2, #6
10009df4:	4b1c      	ldr	r3, [pc, #112]	; (10009e68 <dmp_enable_feature+0x20c>)
10009df6:	739a      	strb	r2, [r3, #14]
    if (mask & DMP_FEATURE_SEND_ANY_GYRO)
10009df8:	2d00      	cmp	r5, #0
10009dfa:	d003      	beq.n	10009e04 <dmp_enable_feature+0x1a8>
        dmp.packet_length += 6;
10009dfc:	4a1a      	ldr	r2, [pc, #104]	; (10009e68 <dmp_enable_feature+0x20c>)
10009dfe:	7b93      	ldrb	r3, [r2, #14]
10009e00:	3306      	adds	r3, #6
10009e02:	7393      	strb	r3, [r2, #14]
    if (mask & (DMP_FEATURE_LP_QUAT | DMP_FEATURE_6X_LP_QUAT))
10009e04:	2314      	movs	r3, #20
10009e06:	4223      	tst	r3, r4
10009e08:	d003      	beq.n	10009e12 <dmp_enable_feature+0x1b6>
        dmp.packet_length += 16;
10009e0a:	4a17      	ldr	r2, [pc, #92]	; (10009e68 <dmp_enable_feature+0x20c>)
10009e0c:	7b93      	ldrb	r3, [r2, #14]
10009e0e:	3310      	adds	r3, #16
10009e10:	7393      	strb	r3, [r2, #14]
    if (mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
10009e12:	2e00      	cmp	r6, #0
10009e14:	d003      	beq.n	10009e1e <dmp_enable_feature+0x1c2>
        dmp.packet_length += 4;
10009e16:	4a14      	ldr	r2, [pc, #80]	; (10009e68 <dmp_enable_feature+0x20c>)
10009e18:	7b93      	ldrb	r3, [r2, #14]
10009e1a:	3304      	adds	r3, #4
10009e1c:	7393      	strb	r3, [r2, #14]

    return 0;
}
10009e1e:	2000      	movs	r0, #0
10009e20:	b005      	add	sp, #20
10009e22:	bdf0      	pop	{r4, r5, r6, r7, pc}
10009e24:	10009615 	.word	0x10009615
10009e28:	00000aa7 	.word	0x00000aa7
10009e2c:	00000ab6 	.word	0x00000ab6
10009e30:	10009b89 	.word	0x10009b89
10009e34:	00000aa2 	.word	0x00000aa2
10009e38:	10009879 	.word	0x10009879
10009e3c:	10009a25 	.word	0x10009a25
10009e40:	10009a71 	.word	0x10009a71
10009e44:	10009aa1 	.word	0x10009aa1
10009e48:	10009acd 	.word	0x10009acd
10009e4c:	02cae309 	.word	0x02cae309
10009e50:	10009af9 	.word	0x10009af9
10009e54:	10009b31 	.word	0x10009b31
10009e58:	10009b5d 	.word	0x10009b5d
10009e5c:	0000073d 	.word	0x0000073d
10009e60:	10009bd5 	.word	0x10009bd5
10009e64:	10009c19 	.word	0x10009c19
10009e68:	10018410 	.word	0x10018410
10009e6c:	100085f1 	.word	0x100085f1

10009e70 <sms_ble_pair_request_fn>:
    return AT_BLE_SUCCESS;
}

/* AT_BLE_PAIR_REQUEST (#10) */
at_ble_status_t sms_ble_pair_request_fn(void *params)
{
10009e70:	b510      	push	{r4, lr}
10009e72:	b082      	sub	sp, #8
    at_ble_pair_request_t *request = (at_ble_pair_request_t *)params;
    DBG_LOG_DEV("[sms_ble_pair_request_fn]\tPairing request... Bnew %d, BLE 0x%02x, T1 %d, T2 %d", button_instance.current_state, ble_current_state, timer1_current_mode, timer2_current_mode);
10009e74:	4809      	ldr	r0, [pc, #36]	; (10009e9c <sms_ble_pair_request_fn+0x2c>)
10009e76:	4b0a      	ldr	r3, [pc, #40]	; (10009ea0 <sms_ble_pair_request_fn+0x30>)
10009e78:	4798      	blx	r3
10009e7a:	4b0a      	ldr	r3, [pc, #40]	; (10009ea4 <sms_ble_pair_request_fn+0x34>)
10009e7c:	781a      	ldrb	r2, [r3, #0]
10009e7e:	b2d2      	uxtb	r2, r2
10009e80:	4b09      	ldr	r3, [pc, #36]	; (10009ea8 <sms_ble_pair_request_fn+0x38>)
10009e82:	781b      	ldrb	r3, [r3, #0]
10009e84:	b2db      	uxtb	r3, r3
10009e86:	4909      	ldr	r1, [pc, #36]	; (10009eac <sms_ble_pair_request_fn+0x3c>)
10009e88:	7808      	ldrb	r0, [r1, #0]
10009e8a:	4909      	ldr	r1, [pc, #36]	; (10009eb0 <sms_ble_pair_request_fn+0x40>)
10009e8c:	7b49      	ldrb	r1, [r1, #13]
10009e8e:	9000      	str	r0, [sp, #0]
10009e90:	4808      	ldr	r0, [pc, #32]	; (10009eb4 <sms_ble_pair_request_fn+0x44>)
10009e92:	4c09      	ldr	r4, [pc, #36]	; (10009eb8 <sms_ble_pair_request_fn+0x48>)
10009e94:	47a0      	blx	r4
    //DBG_LOG_DEV("- conn handle: 0x%04x\r\n- peer features: 0x%02x", request->handle, request->peer_features);
    return AT_BLE_SUCCESS;
}
10009e96:	2000      	movs	r0, #0
10009e98:	b002      	add	sp, #8
10009e9a:	bd10      	pop	{r4, pc}
10009e9c:	10016528 	.word	0x10016528
10009ea0:	1001537d 	.word	0x1001537d
10009ea4:	1001a074 	.word	0x1001a074
10009ea8:	10019ec4 	.word	0x10019ec4
10009eac:	1001a07b 	.word	0x1001a07b
10009eb0:	10019f58 	.word	0x10019f58
10009eb4:	100167c0 	.word	0x100167c0
10009eb8:	1001525d 	.word	0x1001525d

10009ebc <sms_ble_notification_confirmed_fn>:

/* AT_BLE_NOTIFICATION_CONFIRMED (#29) */
at_ble_status_t sms_ble_notification_confirmed_fn(void *params)
{
10009ebc:	b510      	push	{r4, lr}
    //gpio_pin_set_output_level(dbg_pin, DBG_PIN_HIGH);
    
    at_ble_cmd_complete_event_t *notification_status = (at_ble_cmd_complete_event_t *)params;
	sms_ble_sending = false;
10009ebe:	2400      	movs	r4, #0
10009ec0:	4b09      	ldr	r3, [pc, #36]	; (10009ee8 <sms_ble_notification_confirmed_fn+0x2c>)
10009ec2:	701c      	strb	r4, [r3, #0]
    //button_instance.current_state = sms_button_get_state();
    //DBG_LOG_DEV("[sms_ble_notification_confirmed_fn]\tNotification sent... Bnew %d, BLE 0x%02x, T1 %d, T2 %d", button_instance.current_state, ble_current_state, timer1_current_mode, timer2_current_mode);
    //DBG_LOG_DEV("- conn handle: 0x%04x\r\n- operation: 0x%02x\r\n- status: 0x%02x", notification_status->conn_handle, notification_status->operation, notification_status->status);
    sms_dualtimer_stop(DUALTIMER_TIMER2);
10009ec4:	2001      	movs	r0, #1
10009ec6:	4b09      	ldr	r3, [pc, #36]	; (10009eec <sms_ble_notification_confirmed_fn+0x30>)
10009ec8:	4798      	blx	r3
    timer2_current_mode = TIMER2_MODE_NONE;
10009eca:	4b09      	ldr	r3, [pc, #36]	; (10009ef0 <sms_ble_notification_confirmed_fn+0x34>)
10009ecc:	701c      	strb	r4, [r3, #0]
    ble_current_state = BLE_STATE_PAIRED;
10009ece:	2222      	movs	r2, #34	; 0x22
10009ed0:	4b08      	ldr	r3, [pc, #32]	; (10009ef4 <sms_ble_notification_confirmed_fn+0x38>)
10009ed2:	701a      	strb	r2, [r3, #0]
    //DBG_LOG_CONT_DEV(" done!");

    //gpio_pin_set_output_level(dbg_pin, DBG_PIN_LOW);
    
    //DBG_LOG_DEV("Timer1 current mode: %d", timer1_current_mode);
    if(timer1_current_mode == TIMER1_MODE_NONE) {
10009ed4:	4b08      	ldr	r3, [pc, #32]	; (10009ef8 <sms_ble_notification_confirmed_fn+0x3c>)
10009ed6:	781b      	ldrb	r3, [r3, #0]
10009ed8:	2b00      	cmp	r3, #0
10009eda:	d102      	bne.n	10009ee2 <sms_ble_notification_confirmed_fn+0x26>
        ulp_ready = true;
10009edc:	3a21      	subs	r2, #33	; 0x21
10009ede:	4b07      	ldr	r3, [pc, #28]	; (10009efc <sms_ble_notification_confirmed_fn+0x40>)
10009ee0:	701a      	strb	r2, [r3, #0]
    }
    return AT_BLE_SUCCESS;
}
10009ee2:	2000      	movs	r0, #0
10009ee4:	bd10      	pop	{r4, pc}
10009ee6:	46c0      	nop			; (mov r8, r8)
10009ee8:	10019ec5 	.word	0x10019ec5
10009eec:	1000b635 	.word	0x1000b635
10009ef0:	1001a07b 	.word	0x1001a07b
10009ef4:	1001a074 	.word	0x1001a074
10009ef8:	10019ec4 	.word	0x10019ec4
10009efc:	10019f55 	.word	0x10019f55

10009f00 <sms_ble_indication_confirmed_fn>:

/* AT_BLE_INDICATION_CONFIRMED (#30) */
at_ble_status_t sms_ble_indication_confirmed_fn(void *params)
{
10009f00:	b510      	push	{r4, lr}
    
    at_ble_indication_confirmed_t *indication_status = (at_ble_indication_confirmed_t *)params;
    //button_instance.current_state = sms_button_get_state();
    //DBG_LOG_DEV("[sms_ble_indication_confirmed]\tIndication confirmed... Bnew %d, BLE 0x%02x, T1 %d, T2 %d", button_instance.current_state, ble_current_state, timer1_current_mode, timer2_current_mode);
    //DBG_LOG_DEV("- conn handle: 0x%04x\r\n- char handle: 0x%04x\r\n- status: 0x%02x", indication_status->conn_handle, indication_status->char_handle, indication_status->status);
    sms_dualtimer_stop(DUALTIMER_TIMER2);
10009f02:	2001      	movs	r0, #1
10009f04:	4b08      	ldr	r3, [pc, #32]	; (10009f28 <sms_ble_indication_confirmed_fn+0x28>)
10009f06:	4798      	blx	r3
    timer2_current_mode = TIMER2_MODE_NONE;
10009f08:	2200      	movs	r2, #0
10009f0a:	4b08      	ldr	r3, [pc, #32]	; (10009f2c <sms_ble_indication_confirmed_fn+0x2c>)
10009f0c:	701a      	strb	r2, [r3, #0]
    ble_current_state = BLE_STATE_PAIRED;
10009f0e:	3222      	adds	r2, #34	; 0x22
10009f10:	4b07      	ldr	r3, [pc, #28]	; (10009f30 <sms_ble_indication_confirmed_fn+0x30>)
10009f12:	701a      	strb	r2, [r3, #0]
    //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
    //sms_sensors_toggle_interrupt(SMS_EXTINT_ENABLE);
    
    //gpio_pin_set_output_level(dbg_pin, DBG_PIN_LOW);
    
    if(timer1_current_mode == TIMER1_MODE_NONE) {
10009f14:	4b07      	ldr	r3, [pc, #28]	; (10009f34 <sms_ble_indication_confirmed_fn+0x34>)
10009f16:	781b      	ldrb	r3, [r3, #0]
10009f18:	2b00      	cmp	r3, #0
10009f1a:	d102      	bne.n	10009f22 <sms_ble_indication_confirmed_fn+0x22>
        ulp_ready = true;
10009f1c:	3a21      	subs	r2, #33	; 0x21
10009f1e:	4b06      	ldr	r3, [pc, #24]	; (10009f38 <sms_ble_indication_confirmed_fn+0x38>)
10009f20:	701a      	strb	r2, [r3, #0]
    }        
    return AT_BLE_SUCCESS;
}
10009f22:	2000      	movs	r0, #0
10009f24:	bd10      	pop	{r4, pc}
10009f26:	46c0      	nop			; (mov r8, r8)
10009f28:	1000b635 	.word	0x1000b635
10009f2c:	1001a07b 	.word	0x1001a07b
10009f30:	1001a074 	.word	0x1001a074
10009f34:	10019ec4 	.word	0x10019ec4
10009f38:	10019f55 	.word	0x10019f55

10009f3c <sms_ble_startup>:
#include <stdio.h>
//#include <stdlib.h>
#include "sms_peripheral1.h"

void sms_ble_startup(void)
{
10009f3c:	b510      	push	{r4, lr}
    //sms_button_toggle_interrupt(SMS_BTN_INT_DISABLE, SMS_BTN_INT_DISABLE);
    timer2_current_mode = TIMER2_MODE_LED_STARTUP;
10009f3e:	2202      	movs	r2, #2
10009f40:	4b02      	ldr	r3, [pc, #8]	; (10009f4c <sms_ble_startup+0x10>)
10009f42:	701a      	strb	r2, [r3, #0]
    sms_led_blink_start(SMS_LED_0_PIN);
10009f44:	2016      	movs	r0, #22
10009f46:	4b02      	ldr	r3, [pc, #8]	; (10009f50 <sms_ble_startup+0x14>)
10009f48:	4798      	blx	r3
}
10009f4a:	bd10      	pop	{r4, pc}
10009f4c:	1001a07b 	.word	0x1001a07b
10009f50:	1000ae89 	.word	0x1000ae89

10009f54 <sms_ble_power_down>:

void sms_ble_power_down(void)
{
10009f54:	b510      	push	{r4, lr}
    sms_monitor_get_states("[sms_ble_power_down]");
10009f56:	482c      	ldr	r0, [pc, #176]	; (1000a008 <sms_ble_power_down+0xb4>)
10009f58:	4b2c      	ldr	r3, [pc, #176]	; (1000a00c <sms_ble_power_down+0xb8>)
10009f5a:	4798      	blx	r3
    if(ble_current_state == BLE_STATE_POWEROFF) {
10009f5c:	4b2c      	ldr	r3, [pc, #176]	; (1000a010 <sms_ble_power_down+0xbc>)
10009f5e:	781b      	ldrb	r3, [r3, #0]
10009f60:	2b00      	cmp	r3, #0
10009f62:	d105      	bne.n	10009f70 <sms_ble_power_down+0x1c>
        /* If already power off state, then go back sleeping */
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        ulp_ready = true;
10009f64:	2201      	movs	r2, #1
10009f66:	4b2b      	ldr	r3, [pc, #172]	; (1000a014 <sms_ble_power_down+0xc0>)
10009f68:	701a      	strb	r2, [r3, #0]
        release_sleep_lock();
10009f6a:	4b2b      	ldr	r3, [pc, #172]	; (1000a018 <sms_ble_power_down+0xc4>)
10009f6c:	4798      	blx	r3
10009f6e:	e049      	b.n	1000a004 <sms_ble_power_down+0xb0>
    }
    else {
        /* Disable button interrupts */
        //sms_button_toggle_interrupt(SMS_BTN_INT_DISABLE, SMS_BTN_INT_DISABLE);        
        /* Disconnect if necessary from BLE network */
        switch(ble_current_state) {
10009f70:	4b27      	ldr	r3, [pc, #156]	; (1000a010 <sms_ble_power_down+0xbc>)
10009f72:	781b      	ldrb	r3, [r3, #0]
10009f74:	b2db      	uxtb	r3, r3
10009f76:	2b21      	cmp	r3, #33	; 0x21
10009f78:	d030      	beq.n	10009fdc <sms_ble_power_down+0x88>
10009f7a:	d802      	bhi.n	10009f82 <sms_ble_power_down+0x2e>
10009f7c:	2b20      	cmp	r3, #32
10009f7e:	d005      	beq.n	10009f8c <sms_ble_power_down+0x38>
10009f80:	e037      	b.n	10009ff2 <sms_ble_power_down+0x9e>
10009f82:	2b22      	cmp	r3, #34	; 0x22
10009f84:	d017      	beq.n	10009fb6 <sms_ble_power_down+0x62>
10009f86:	2b23      	cmp	r3, #35	; 0x23
10009f88:	d01b      	beq.n	10009fc2 <sms_ble_power_down+0x6e>
10009f8a:	e032      	b.n	10009ff2 <sms_ble_power_down+0x9e>
            case BLE_STATE_ADVERTISING:
            DBG_LOG_DEV("[sms_ble_power_down]\tStopping command received during advertisement. Stopping... ");
10009f8c:	4823      	ldr	r0, [pc, #140]	; (1000a01c <sms_ble_power_down+0xc8>)
10009f8e:	4b24      	ldr	r3, [pc, #144]	; (1000a020 <sms_ble_power_down+0xcc>)
10009f90:	4798      	blx	r3
10009f92:	4824      	ldr	r0, [pc, #144]	; (1000a024 <sms_ble_power_down+0xd0>)
10009f94:	4b24      	ldr	r3, [pc, #144]	; (1000a028 <sms_ble_power_down+0xd4>)
10009f96:	4798      	blx	r3
            if(at_ble_adv_stop() != AT_BLE_SUCCESS) {
10009f98:	4b24      	ldr	r3, [pc, #144]	; (1000a02c <sms_ble_power_down+0xd8>)
10009f9a:	4798      	blx	r3
10009f9c:	2800      	cmp	r0, #0
10009f9e:	d003      	beq.n	10009fa8 <sms_ble_power_down+0x54>
                DBG_LOG_CONT_DEV("failed!!!");
10009fa0:	4823      	ldr	r0, [pc, #140]	; (1000a030 <sms_ble_power_down+0xdc>)
10009fa2:	4b21      	ldr	r3, [pc, #132]	; (1000a028 <sms_ble_power_down+0xd4>)
10009fa4:	4798      	blx	r3
10009fa6:	e024      	b.n	10009ff2 <sms_ble_power_down+0x9e>
                //#pragma TBD: manage adv_stop failure
            }
            else {
                DBG_LOG_CONT_DEV("done!");
10009fa8:	4822      	ldr	r0, [pc, #136]	; (1000a034 <sms_ble_power_down+0xe0>)
10009faa:	4b1f      	ldr	r3, [pc, #124]	; (1000a028 <sms_ble_power_down+0xd4>)
10009fac:	4798      	blx	r3
                ble_current_state = BLE_STATE_DISCONNECTED;
10009fae:	2211      	movs	r2, #17
10009fb0:	4b17      	ldr	r3, [pc, #92]	; (1000a010 <sms_ble_power_down+0xbc>)
10009fb2:	701a      	strb	r2, [r3, #0]
10009fb4:	e01d      	b.n	10009ff2 <sms_ble_power_down+0x9e>
            }
            break;
            
            case BLE_STATE_PAIRED:
            DBG_LOG_DEV("[sms_ble_power_down]\t\tDevice paired... disabling interrupts & switching down sensors");
10009fb6:	4819      	ldr	r0, [pc, #100]	; (1000a01c <sms_ble_power_down+0xc8>)
10009fb8:	4b19      	ldr	r3, [pc, #100]	; (1000a020 <sms_ble_power_down+0xcc>)
10009fba:	4798      	blx	r3
10009fbc:	481e      	ldr	r0, [pc, #120]	; (1000a038 <sms_ble_power_down+0xe4>)
10009fbe:	4b1a      	ldr	r3, [pc, #104]	; (1000a028 <sms_ble_power_down+0xd4>)
10009fc0:	4798      	blx	r3
            
            case BLE_STATE_INDICATING:
            DBG_LOG_DEV("[sms_ble_power_down]\t\tCurrently indicating");
10009fc2:	4816      	ldr	r0, [pc, #88]	; (1000a01c <sms_ble_power_down+0xc8>)
10009fc4:	4b16      	ldr	r3, [pc, #88]	; (1000a020 <sms_ble_power_down+0xcc>)
10009fc6:	4798      	blx	r3
10009fc8:	481c      	ldr	r0, [pc, #112]	; (1000a03c <sms_ble_power_down+0xe8>)
10009fca:	4b17      	ldr	r3, [pc, #92]	; (1000a028 <sms_ble_power_down+0xd4>)
10009fcc:	4798      	blx	r3
            pressure_device.state = PRESSURE_STATE_OFF;
10009fce:	2100      	movs	r1, #0
10009fd0:	232b      	movs	r3, #43	; 0x2b
10009fd2:	4a1b      	ldr	r2, [pc, #108]	; (1000a040 <sms_ble_power_down+0xec>)
10009fd4:	54d1      	strb	r1, [r2, r3]
            sms_sensors_interrupt_toggle(false, false);
10009fd6:	2000      	movs	r0, #0
10009fd8:	4b1a      	ldr	r3, [pc, #104]	; (1000a044 <sms_ble_power_down+0xf0>)
10009fda:	4798      	blx	r3
            //#pragma TBD: switch-off sensors to save current
            //sms_sensors_switch(false);
            
            case BLE_STATE_CONNECTED:
            DBG_LOG_DEV("[sms_ble_power_down]\t\tDevice connected... disconnecting");
10009fdc:	480f      	ldr	r0, [pc, #60]	; (1000a01c <sms_ble_power_down+0xc8>)
10009fde:	4b10      	ldr	r3, [pc, #64]	; (1000a020 <sms_ble_power_down+0xcc>)
10009fe0:	4798      	blx	r3
10009fe2:	4819      	ldr	r0, [pc, #100]	; (1000a048 <sms_ble_power_down+0xf4>)
10009fe4:	4b10      	ldr	r3, [pc, #64]	; (1000a028 <sms_ble_power_down+0xd4>)
10009fe6:	4798      	blx	r3
            at_ble_disconnect(sms_connection_handle, AT_BLE_TERMINATED_BY_USER);
10009fe8:	4b18      	ldr	r3, [pc, #96]	; (1000a04c <sms_ble_power_down+0xf8>)
10009fea:	8818      	ldrh	r0, [r3, #0]
10009fec:	2113      	movs	r1, #19
10009fee:	4b18      	ldr	r3, [pc, #96]	; (1000a050 <sms_ble_power_down+0xfc>)
10009ff0:	4798      	blx	r3
            
            default:
            break;
        }
        
        ble_current_state = BLE_STATE_DISCONNECTED;
10009ff2:	2211      	movs	r2, #17
10009ff4:	4b06      	ldr	r3, [pc, #24]	; (1000a010 <sms_ble_power_down+0xbc>)
10009ff6:	701a      	strb	r2, [r3, #0]
        timer2_current_mode = TIMER2_MODE_LED_SHUTDOWN;
10009ff8:	3a0e      	subs	r2, #14
10009ffa:	4b16      	ldr	r3, [pc, #88]	; (1000a054 <sms_ble_power_down+0x100>)
10009ffc:	701a      	strb	r2, [r3, #0]
        sms_led_blink_start(SMS_LED_0_PIN);
10009ffe:	2016      	movs	r0, #22
1000a000:	4b15      	ldr	r3, [pc, #84]	; (1000a058 <sms_ble_power_down+0x104>)
1000a002:	4798      	blx	r3
    }
}
1000a004:	bd10      	pop	{r4, pc}
1000a006:	46c0      	nop			; (mov r8, r8)
1000a008:	10016810 	.word	0x10016810
1000a00c:	1000a949 	.word	0x1000a949
1000a010:	1001a074 	.word	0x1001a074
1000a014:	10019f55 	.word	0x10019f55
1000a018:	1000f615 	.word	0x1000f615
1000a01c:	10016528 	.word	0x10016528
1000a020:	1001537d 	.word	0x1001537d
1000a024:	10016828 	.word	0x10016828
1000a028:	1001525d 	.word	0x1001525d
1000a02c:	10010919 	.word	0x10010919
1000a030:	1001687c 	.word	0x1001687c
1000a034:	10016888 	.word	0x10016888
1000a038:	10016890 	.word	0x10016890
1000a03c:	100168e8 	.word	0x100168e8
1000a040:	10019fdc 	.word	0x10019fdc
1000a044:	1000b321 	.word	0x1000b321
1000a048:	10016914 	.word	0x10016914
1000a04c:	10019f56 	.word	0x10019f56
1000a050:	10010945 	.word	0x10010945
1000a054:	1001a07b 	.word	0x1001a07b
1000a058:	1000ae89 	.word	0x1000ae89

1000a05c <sms_ble_adv_report_fn>:
    return AT_BLE_FAILURE;
}

/* AT_BLE_ADV_REPORT (#3) */
at_ble_status_t sms_ble_adv_report_fn(void *params)
{
1000a05c:	b510      	push	{r4, lr}
    at_ble_adv_report_t *adv_report = (at_ble_adv_report_t *)params;
    ble_current_state = BLE_STATE_DISCONNECTED;
1000a05e:	2211      	movs	r2, #17
1000a060:	4b05      	ldr	r3, [pc, #20]	; (1000a078 <sms_ble_adv_report_fn+0x1c>)
1000a062:	701a      	strb	r2, [r3, #0]
    DBG_LOG_DEV("[sms_ble_adv_report_fn]\tAdvertisement timeout...");
1000a064:	4805      	ldr	r0, [pc, #20]	; (1000a07c <sms_ble_adv_report_fn+0x20>)
1000a066:	4b06      	ldr	r3, [pc, #24]	; (1000a080 <sms_ble_adv_report_fn+0x24>)
1000a068:	4798      	blx	r3
1000a06a:	4806      	ldr	r0, [pc, #24]	; (1000a084 <sms_ble_adv_report_fn+0x28>)
1000a06c:	4b06      	ldr	r3, [pc, #24]	; (1000a088 <sms_ble_adv_report_fn+0x2c>)
1000a06e:	4798      	blx	r3
    //DBG_LOG_DEV("- status: 0x%02x", adv_report->status);
    sms_ble_power_down();
1000a070:	4b06      	ldr	r3, [pc, #24]	; (1000a08c <sms_ble_adv_report_fn+0x30>)
1000a072:	4798      	blx	r3
    return AT_BLE_SUCCESS;
}
1000a074:	2000      	movs	r0, #0
1000a076:	bd10      	pop	{r4, pc}
1000a078:	1001a074 	.word	0x1001a074
1000a07c:	10016528 	.word	0x10016528
1000a080:	1001537d 	.word	0x1001537d
1000a084:	1001694c 	.word	0x1001694c
1000a088:	1001525d 	.word	0x1001525d
1000a08c:	10009f55 	.word	0x10009f55

1000a090 <sms_ble_connected_fn>:

/* AT_BLE_CONNECTED (#5) */
at_ble_status_t sms_ble_connected_fn(void *params)
{
1000a090:	b510      	push	{r4, lr}
    if(ble_current_state == BLE_STATE_ADVERTISING) {
1000a092:	4b0a      	ldr	r3, [pc, #40]	; (1000a0bc <sms_ble_connected_fn+0x2c>)
1000a094:	781b      	ldrb	r3, [r3, #0]
1000a096:	2b20      	cmp	r3, #32
1000a098:	d10c      	bne.n	1000a0b4 <sms_ble_connected_fn+0x24>
        at_ble_connected_t *connected = (at_ble_connected_t *)params;
        sms_ble_conn_handle = connected->handle;
1000a09a:	8902      	ldrh	r2, [r0, #8]
1000a09c:	4b08      	ldr	r3, [pc, #32]	; (1000a0c0 <sms_ble_connected_fn+0x30>)
1000a09e:	801a      	strh	r2, [r3, #0]
        ble_current_state = BLE_STATE_CONNECTED;
1000a0a0:	2221      	movs	r2, #33	; 0x21
1000a0a2:	4b06      	ldr	r3, [pc, #24]	; (1000a0bc <sms_ble_connected_fn+0x2c>)
1000a0a4:	701a      	strb	r2, [r3, #0]
        DBG_LOG_DEV("[sms_ble_connected_fn]\t\tDevices connected...");
1000a0a6:	4807      	ldr	r0, [pc, #28]	; (1000a0c4 <sms_ble_connected_fn+0x34>)
1000a0a8:	4b07      	ldr	r3, [pc, #28]	; (1000a0c8 <sms_ble_connected_fn+0x38>)
1000a0aa:	4798      	blx	r3
1000a0ac:	4807      	ldr	r0, [pc, #28]	; (1000a0cc <sms_ble_connected_fn+0x3c>)
1000a0ae:	4b08      	ldr	r3, [pc, #32]	; (1000a0d0 <sms_ble_connected_fn+0x40>)
1000a0b0:	4798      	blx	r3
1000a0b2:	e001      	b.n	1000a0b8 <sms_ble_connected_fn+0x28>
        //for(uint8_t i = 0; i < AT_BLE_ADDR_LEN; i++) {
            //DBG_LOG_CONT_DEV("%02x",connected->peer_addr.addr[AT_BLE_ADDR_LEN - (i+1)]);
        //}            
    }
    else {
        sms_ble_power_down();
1000a0b4:	4b07      	ldr	r3, [pc, #28]	; (1000a0d4 <sms_ble_connected_fn+0x44>)
1000a0b6:	4798      	blx	r3
    }    
    return AT_BLE_SUCCESS;
}
1000a0b8:	2000      	movs	r0, #0
1000a0ba:	bd10      	pop	{r4, pc}
1000a0bc:	1001a074 	.word	0x1001a074
1000a0c0:	1001a06a 	.word	0x1001a06a
1000a0c4:	10016528 	.word	0x10016528
1000a0c8:	1001537d 	.word	0x1001537d
1000a0cc:	10016980 	.word	0x10016980
1000a0d0:	1001525d 	.word	0x1001525d
1000a0d4:	10009f55 	.word	0x10009f55

1000a0d8 <sms_ble_paired_fn>:
    return AT_BLE_SUCCESS;
}

/* AT_BLE_PAIR_DONE (#9) */
at_ble_status_t sms_ble_paired_fn(void *params)
{
1000a0d8:	b510      	push	{r4, lr}
    if(ble_current_state == BLE_STATE_CONNECTED) {
1000a0da:	4b09      	ldr	r3, [pc, #36]	; (1000a100 <sms_ble_paired_fn+0x28>)
1000a0dc:	781b      	ldrb	r3, [r3, #0]
1000a0de:	2b21      	cmp	r3, #33	; 0x21
1000a0e0:	d10a      	bne.n	1000a0f8 <sms_ble_paired_fn+0x20>
        ble_current_state = BLE_STATE_PAIRED;
1000a0e2:	2222      	movs	r2, #34	; 0x22
1000a0e4:	4b06      	ldr	r3, [pc, #24]	; (1000a100 <sms_ble_paired_fn+0x28>)
1000a0e6:	701a      	strb	r2, [r3, #0]
        at_ble_pair_done_t *pair_status = (at_ble_pair_done_t *)params;
        sms_monitor_get_states("[sms_ble_paired_fn]");
1000a0e8:	4806      	ldr	r0, [pc, #24]	; (1000a104 <sms_ble_paired_fn+0x2c>)
1000a0ea:	4b07      	ldr	r3, [pc, #28]	; (1000a108 <sms_ble_paired_fn+0x30>)
1000a0ec:	4798      	blx	r3
        //DBG_LOG_DEV("- conn handle: 0x%04x\r\n- authorization: 0x%02x\r\n- status: 0x%02x", pair_status->handle, pair_status->auth, pair_status->status);
        sms_sensors_switch(true, true); // ! Release sleep lock & enable buttons interrupt after reset done!
1000a0ee:	2101      	movs	r1, #1
1000a0f0:	2001      	movs	r0, #1
1000a0f2:	4b06      	ldr	r3, [pc, #24]	; (1000a10c <sms_ble_paired_fn+0x34>)
1000a0f4:	4798      	blx	r3
1000a0f6:	e001      	b.n	1000a0fc <sms_ble_paired_fn+0x24>
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
    }
    else {
        sms_ble_power_down();
1000a0f8:	4b05      	ldr	r3, [pc, #20]	; (1000a110 <sms_ble_paired_fn+0x38>)
1000a0fa:	4798      	blx	r3
    }        
    return AT_BLE_SUCCESS;
}
1000a0fc:	2000      	movs	r0, #0
1000a0fe:	bd10      	pop	{r4, pc}
1000a100:	1001a074 	.word	0x1001a074
1000a104:	100169b0 	.word	0x100169b0
1000a108:	1000a949 	.word	0x1000a949
1000a10c:	1000b3ad 	.word	0x1000b3ad
1000a110:	10009f55 	.word	0x10009f55

1000a114 <sms_ble_advertise>:
        sms_led_blink_start(SMS_LED_0_PIN);
    }
}

at_ble_status_t sms_ble_advertise(void)
{
1000a114:	b510      	push	{r4, lr}
1000a116:	b084      	sub	sp, #16
    at_ble_status_t status = AT_BLE_FAILURE;
    ble_current_state = BLE_STATE_ADVERTISING;
1000a118:	2220      	movs	r2, #32
1000a11a:	4b17      	ldr	r3, [pc, #92]	; (1000a178 <sms_ble_advertise+0x64>)
1000a11c:	701a      	strb	r2, [r3, #0]

    /* Set the advertisement data */
    if((status = ble_advertisement_data_set()) != AT_BLE_SUCCESS) {
1000a11e:	4b17      	ldr	r3, [pc, #92]	; (1000a17c <sms_ble_advertise+0x68>)
1000a120:	4798      	blx	r3
1000a122:	1e04      	subs	r4, r0, #0
1000a124:	d007      	beq.n	1000a136 <sms_ble_advertise+0x22>
        DBG_LOG("[sms_ble_advertise]\tAdvertisement data set failed!");
1000a126:	4816      	ldr	r0, [pc, #88]	; (1000a180 <sms_ble_advertise+0x6c>)
1000a128:	4b16      	ldr	r3, [pc, #88]	; (1000a184 <sms_ble_advertise+0x70>)
1000a12a:	4798      	blx	r3
1000a12c:	4816      	ldr	r0, [pc, #88]	; (1000a188 <sms_ble_advertise+0x74>)
1000a12e:	4b17      	ldr	r3, [pc, #92]	; (1000a18c <sms_ble_advertise+0x78>)
1000a130:	4798      	blx	r3
        return status;
1000a132:	0020      	movs	r0, r4
1000a134:	e01e      	b.n	1000a174 <sms_ble_advertise+0x60>
    }

    /* Start of advertisement */
    if((status = at_ble_adv_start(AT_BLE_ADV_TYPE_UNDIRECTED, AT_BLE_ADV_GEN_DISCOVERABLE, NULL, AT_BLE_ADV_FP_ANY, APP_FAST_ADV, APP_ADV_TIMEOUT, 0)) == AT_BLE_SUCCESS)
1000a136:	2300      	movs	r3, #0
1000a138:	9302      	str	r3, [sp, #8]
1000a13a:	4b15      	ldr	r3, [pc, #84]	; (1000a190 <sms_ble_advertise+0x7c>)
1000a13c:	9301      	str	r3, [sp, #4]
1000a13e:	23c8      	movs	r3, #200	; 0xc8
1000a140:	00db      	lsls	r3, r3, #3
1000a142:	9300      	str	r3, [sp, #0]
1000a144:	2300      	movs	r3, #0
1000a146:	2200      	movs	r2, #0
1000a148:	2101      	movs	r1, #1
1000a14a:	2000      	movs	r0, #0
1000a14c:	4c11      	ldr	r4, [pc, #68]	; (1000a194 <sms_ble_advertise+0x80>)
1000a14e:	47a0      	blx	r4
1000a150:	1e04      	subs	r4, r0, #0
1000a152:	d107      	bne.n	1000a164 <sms_ble_advertise+0x50>
    {
        DBG_LOG_DEV("[sms_ble_advertise]\t\tBLE Started Advertisement");
1000a154:	480a      	ldr	r0, [pc, #40]	; (1000a180 <sms_ble_advertise+0x6c>)
1000a156:	4b0b      	ldr	r3, [pc, #44]	; (1000a184 <sms_ble_advertise+0x70>)
1000a158:	4798      	blx	r3
1000a15a:	480f      	ldr	r0, [pc, #60]	; (1000a198 <sms_ble_advertise+0x84>)
1000a15c:	4b0b      	ldr	r3, [pc, #44]	; (1000a18c <sms_ble_advertise+0x78>)
1000a15e:	4798      	blx	r3
        return AT_BLE_SUCCESS;
1000a160:	2000      	movs	r0, #0
1000a162:	e007      	b.n	1000a174 <sms_ble_advertise+0x60>
    } 
    else {
        DBG_LOG("[sms_service_advertise]\tBLE Advertisement start failed: reason 0x%x", status);
1000a164:	4806      	ldr	r0, [pc, #24]	; (1000a180 <sms_ble_advertise+0x6c>)
1000a166:	4b07      	ldr	r3, [pc, #28]	; (1000a184 <sms_ble_advertise+0x70>)
1000a168:	4798      	blx	r3
1000a16a:	0021      	movs	r1, r4
1000a16c:	480b      	ldr	r0, [pc, #44]	; (1000a19c <sms_ble_advertise+0x88>)
1000a16e:	4b07      	ldr	r3, [pc, #28]	; (1000a18c <sms_ble_advertise+0x78>)
1000a170:	4798      	blx	r3
    }
    return AT_BLE_FAILURE;
1000a172:	20e2      	movs	r0, #226	; 0xe2
}
1000a174:	b004      	add	sp, #16
1000a176:	bd10      	pop	{r4, pc}
1000a178:	1001a074 	.word	0x1001a074
1000a17c:	1000ec5d 	.word	0x1000ec5d
1000a180:	10016528 	.word	0x10016528
1000a184:	1001537d 	.word	0x1001537d
1000a188:	100169c4 	.word	0x100169c4
1000a18c:	1001525d 	.word	0x1001525d
1000a190:	0000028f 	.word	0x0000028f
1000a194:	100107dd 	.word	0x100107dd
1000a198:	100169f8 	.word	0x100169f8
1000a19c:	10016a28 	.word	0x10016a28

1000a1a0 <sms_ble_disconnected_fn>:
    return AT_BLE_SUCCESS;
}

/* AT_BLE_DISCONNECTED (#6) */
at_ble_status_t sms_ble_disconnected_fn(void *params)
{
1000a1a0:	b530      	push	{r4, r5, lr}
1000a1a2:	b083      	sub	sp, #12
1000a1a4:	0005      	movs	r5, r0
    at_ble_disconnected_t *disconnect = (at_ble_disconnected_t *)params;
    if(ble_current_state == BLE_STATE_PAIRED) {
1000a1a6:	4b1c      	ldr	r3, [pc, #112]	; (1000a218 <sms_ble_disconnected_fn+0x78>)
1000a1a8:	781b      	ldrb	r3, [r3, #0]
1000a1aa:	2b22      	cmp	r3, #34	; 0x22
1000a1ac:	d10a      	bne.n	1000a1c4 <sms_ble_disconnected_fn+0x24>
        pressure_device.state = PRESSURE_STATE_OFF;
1000a1ae:	2100      	movs	r1, #0
1000a1b0:	3309      	adds	r3, #9
1000a1b2:	4a1a      	ldr	r2, [pc, #104]	; (1000a21c <sms_ble_disconnected_fn+0x7c>)
1000a1b4:	54d1      	strb	r1, [r2, r3]
        sms_sensors_interrupt_toggle(false, false);
1000a1b6:	2000      	movs	r0, #0
1000a1b8:	4b19      	ldr	r3, [pc, #100]	; (1000a220 <sms_ble_disconnected_fn+0x80>)
1000a1ba:	4798      	blx	r3
        sms_sensors_switch(false, false);
1000a1bc:	2100      	movs	r1, #0
1000a1be:	2000      	movs	r0, #0
1000a1c0:	4b18      	ldr	r3, [pc, #96]	; (1000a224 <sms_ble_disconnected_fn+0x84>)
1000a1c2:	4798      	blx	r3
    }
    ble_current_state = BLE_STATE_DISCONNECTED;
1000a1c4:	4c14      	ldr	r4, [pc, #80]	; (1000a218 <sms_ble_disconnected_fn+0x78>)
1000a1c6:	2311      	movs	r3, #17
1000a1c8:	7023      	strb	r3, [r4, #0]
    DBG_LOG_DEV("[sms_ble_disconnected_fn]\tPeer disconnected... Bnew %d, BLE 0x%02x, T1 %d, T2 %d", button_instance.current_state, ble_current_state, timer1_current_mode, timer2_current_mode);
1000a1ca:	4817      	ldr	r0, [pc, #92]	; (1000a228 <sms_ble_disconnected_fn+0x88>)
1000a1cc:	4b17      	ldr	r3, [pc, #92]	; (1000a22c <sms_ble_disconnected_fn+0x8c>)
1000a1ce:	4798      	blx	r3
1000a1d0:	7822      	ldrb	r2, [r4, #0]
1000a1d2:	b2d2      	uxtb	r2, r2
1000a1d4:	4b16      	ldr	r3, [pc, #88]	; (1000a230 <sms_ble_disconnected_fn+0x90>)
1000a1d6:	781b      	ldrb	r3, [r3, #0]
1000a1d8:	b2db      	uxtb	r3, r3
1000a1da:	4916      	ldr	r1, [pc, #88]	; (1000a234 <sms_ble_disconnected_fn+0x94>)
1000a1dc:	7808      	ldrb	r0, [r1, #0]
1000a1de:	4916      	ldr	r1, [pc, #88]	; (1000a238 <sms_ble_disconnected_fn+0x98>)
1000a1e0:	7b49      	ldrb	r1, [r1, #13]
1000a1e2:	9000      	str	r0, [sp, #0]
1000a1e4:	4815      	ldr	r0, [pc, #84]	; (1000a23c <sms_ble_disconnected_fn+0x9c>)
1000a1e6:	4c16      	ldr	r4, [pc, #88]	; (1000a240 <sms_ble_disconnected_fn+0xa0>)
1000a1e8:	47a0      	blx	r4
    //DBG_LOG_DEV("- conn handle: 0x%04x\r\n- reason: 0x%02x", disconnect->handle, disconnect->reason);
    switch(disconnect->reason) {
1000a1ea:	78ab      	ldrb	r3, [r5, #2]
1000a1ec:	2b1a      	cmp	r3, #26
1000a1ee:	d00b      	beq.n	1000a208 <sms_ble_disconnected_fn+0x68>
1000a1f0:	b2da      	uxtb	r2, r3
1000a1f2:	2a1a      	cmp	r2, #26
1000a1f4:	d804      	bhi.n	1000a200 <sms_ble_disconnected_fn+0x60>
1000a1f6:	2b05      	cmp	r3, #5
1000a1f8:	d006      	beq.n	1000a208 <sms_ble_disconnected_fn+0x68>
1000a1fa:	2b08      	cmp	r3, #8
1000a1fc:	d107      	bne.n	1000a20e <sms_ble_disconnected_fn+0x6e>
1000a1fe:	e003      	b.n	1000a208 <sms_ble_disconnected_fn+0x68>
1000a200:	2b29      	cmp	r3, #41	; 0x29
1000a202:	d001      	beq.n	1000a208 <sms_ble_disconnected_fn+0x68>
1000a204:	2b3b      	cmp	r3, #59	; 0x3b
1000a206:	d102      	bne.n	1000a20e <sms_ble_disconnected_fn+0x6e>
        case AT_BLE_AUTH_FAILURE: //0x05
        case AT_BLE_SUPERVISION_TIMEOUT: //0x08
        case AT_BLE_UNSUPPORTED_REMOTE_FEATURE: // 0x1A
        case AT_BLE_PAIRING_WITH_UNIT_KEY_NOT_SUP: // 0x29
        case AT_BLE_UNACCEPTABLE_INTERVAL: // 0x3B
        sms_ble_advertise();
1000a208:	4b0e      	ldr	r3, [pc, #56]	; (1000a244 <sms_ble_disconnected_fn+0xa4>)
1000a20a:	4798      	blx	r3
        break;
1000a20c:	e001      	b.n	1000a212 <sms_ble_disconnected_fn+0x72>
        case AT_BLE_TERMINATED_BY_USER: // 0x13
        case AT_BLE_REMOTE_DEV_TERM_LOW_RESOURCES: //0x14
        case AT_BLE_REMOTE_DEV_POWER_OFF: //0x15
        case AT_BLE_CON_TERM_BY_LOCAL_HOST: //0x16
        default:
        sms_ble_power_down();
1000a20e:	4b0e      	ldr	r3, [pc, #56]	; (1000a248 <sms_ble_disconnected_fn+0xa8>)
1000a210:	4798      	blx	r3
        break;
    }
    
    return AT_BLE_SUCCESS;
}
1000a212:	2000      	movs	r0, #0
1000a214:	b003      	add	sp, #12
1000a216:	bd30      	pop	{r4, r5, pc}
1000a218:	1001a074 	.word	0x1001a074
1000a21c:	10019fdc 	.word	0x10019fdc
1000a220:	1000b321 	.word	0x1000b321
1000a224:	1000b3ad 	.word	0x1000b3ad
1000a228:	10016528 	.word	0x10016528
1000a22c:	1001537d 	.word	0x1001537d
1000a230:	10019ec4 	.word	0x10019ec4
1000a234:	1001a07b 	.word	0x1001a07b
1000a238:	10019f58 	.word	0x10019f58
1000a23c:	10016a6c 	.word	0x10016a6c
1000a240:	1001525d 	.word	0x1001525d
1000a244:	1000a115 	.word	0x1000a115
1000a248:	10009f55 	.word	0x10009f55

1000a24c <sms_ble_send_characteristic>:
    NULL, //ble_characteristic_write_cmd_cmp
    NULL //ble_read_authorize_request_handler
};

at_ble_status_t sms_ble_send_characteristic(enum sms_ble_char_type ch)
{
1000a24c:	b570      	push	{r4, r5, r6, lr}
1000a24e:	b086      	sub	sp, #24
    at_ble_status_t status = AT_BLE_SUCCESS;
    at_ble_handle_t val_handle = 0;
    uint8_t length = 0;
    uint8_t char_size = 0;
    uint8_t send_val[BLE_CHAR_SIZE_MAX];
    ble_current_state = BLE_STATE_INDICATING;
1000a250:	2223      	movs	r2, #35	; 0x23
1000a252:	4b64      	ldr	r3, [pc, #400]	; (1000a3e4 <sms_ble_send_characteristic+0x198>)
1000a254:	701a      	strb	r2, [r3, #0]

    
	sms_ble_sending = true;
1000a256:	3a22      	subs	r2, #34	; 0x22
1000a258:	4b63      	ldr	r3, [pc, #396]	; (1000a3e8 <sms_ble_send_characteristic+0x19c>)
1000a25a:	701a      	strb	r2, [r3, #0]
    sms_ble_send_cnt++;
1000a25c:	4a63      	ldr	r2, [pc, #396]	; (1000a3ec <sms_ble_send_characteristic+0x1a0>)
1000a25e:	8813      	ldrh	r3, [r2, #0]
1000a260:	3301      	adds	r3, #1
1000a262:	8013      	strh	r3, [r2, #0]
    
    switch(ch) {
1000a264:	2801      	cmp	r0, #1
1000a266:	d02d      	beq.n	1000a2c4 <sms_ble_send_characteristic+0x78>
1000a268:	2800      	cmp	r0, #0
1000a26a:	d002      	beq.n	1000a272 <sms_ble_send_characteristic+0x26>
1000a26c:	2802      	cmp	r0, #2
1000a26e:	d03f      	beq.n	1000a2f0 <sms_ble_send_characteristic+0xa4>
1000a270:	e097      	b.n	1000a3a2 <sms_ble_send_characteristic+0x156>
        case BLE_CHAR_BTN:
		send_val[0] = 0x00;
1000a272:	2200      	movs	r2, #0
1000a274:	ab01      	add	r3, sp, #4
1000a276:	701a      	strb	r2, [r3, #0]
		if(button_instance.btn0.new_char) {
1000a278:	4b5d      	ldr	r3, [pc, #372]	; (1000a3f0 <sms_ble_send_characteristic+0x1a4>)
1000a27a:	791b      	ldrb	r3, [r3, #4]
1000a27c:	2b00      	cmp	r3, #0
1000a27e:	d00a      	beq.n	1000a296 <sms_ble_send_characteristic+0x4a>
			button_instance.btn0.char_value = ((button_instance.btn0.char_value >= 0x7f) ? 0 : (button_instance.btn0.char_value + 1));
1000a280:	4b5b      	ldr	r3, [pc, #364]	; (1000a3f0 <sms_ble_send_characteristic+0x1a4>)
1000a282:	795a      	ldrb	r2, [r3, #5]
1000a284:	2300      	movs	r3, #0
1000a286:	2a7e      	cmp	r2, #126	; 0x7e
1000a288:	d801      	bhi.n	1000a28e <sms_ble_send_characteristic+0x42>
1000a28a:	3201      	adds	r2, #1
1000a28c:	b2d3      	uxtb	r3, r2
1000a28e:	4a58      	ldr	r2, [pc, #352]	; (1000a3f0 <sms_ble_send_characteristic+0x1a4>)
1000a290:	7153      	strb	r3, [r2, #5]
			send_val[0] |= button_instance.btn0.char_value;
1000a292:	aa01      	add	r2, sp, #4
1000a294:	7013      	strb	r3, [r2, #0]
		}
		if(button_instance.btn1.new_char) {
1000a296:	4b56      	ldr	r3, [pc, #344]	; (1000a3f0 <sms_ble_send_characteristic+0x1a4>)
1000a298:	7a9b      	ldrb	r3, [r3, #10]
1000a29a:	2b00      	cmp	r3, #0
1000a29c:	d00e      	beq.n	1000a2bc <sms_ble_send_characteristic+0x70>
	        button_instance.btn1.char_value = ((button_instance.btn1.char_value >= 0xff) ? 0 : (button_instance.btn1.char_value + 1));
1000a29e:	4b54      	ldr	r3, [pc, #336]	; (1000a3f0 <sms_ble_send_characteristic+0x1a4>)
1000a2a0:	7adb      	ldrb	r3, [r3, #11]
1000a2a2:	2bff      	cmp	r3, #255	; 0xff
1000a2a4:	d002      	beq.n	1000a2ac <sms_ble_send_characteristic+0x60>
1000a2a6:	3301      	adds	r3, #1
1000a2a8:	b2db      	uxtb	r3, r3
1000a2aa:	e000      	b.n	1000a2ae <sms_ble_send_characteristic+0x62>
1000a2ac:	2300      	movs	r3, #0
1000a2ae:	4a50      	ldr	r2, [pc, #320]	; (1000a3f0 <sms_ble_send_characteristic+0x1a4>)
1000a2b0:	72d3      	strb	r3, [r2, #11]
			send_val[0] |= button_instance.btn1.char_value + 0x80;
1000a2b2:	aa01      	add	r2, sp, #4
1000a2b4:	3b80      	subs	r3, #128	; 0x80
1000a2b6:	7811      	ldrb	r1, [r2, #0]
1000a2b8:	430b      	orrs	r3, r1
1000a2ba:	7013      	strb	r3, [r2, #0]
		}
        val_handle = button_instance.service_handler.serv_chars.char_val_handle;
1000a2bc:	4b4c      	ldr	r3, [pc, #304]	; (1000a3f0 <sms_ble_send_characteristic+0x1a4>)
1000a2be:	8c9d      	ldrh	r5, [r3, #36]	; 0x24
        length = BLE_CHAR_SIZE_BUTTON;
1000a2c0:	2201      	movs	r2, #1
        break;
1000a2c2:	e070      	b.n	1000a3a6 <sms_ble_send_characteristic+0x15a>
                
        case BLE_CHAR_PRESS:
        send_val[0] = (uint8_t)((pressure_device.hal.temperature >>24) & 0xff);
1000a2c4:	494b      	ldr	r1, [pc, #300]	; (1000a3f4 <sms_ble_send_characteristic+0x1a8>)
1000a2c6:	6a0a      	ldr	r2, [r1, #32]
1000a2c8:	ab01      	add	r3, sp, #4
1000a2ca:	1610      	asrs	r0, r2, #24
1000a2cc:	7018      	strb	r0, [r3, #0]
        send_val[1] = (uint8_t)((pressure_device.hal.temperature >> 16) & 0xff);
1000a2ce:	1410      	asrs	r0, r2, #16
1000a2d0:	7058      	strb	r0, [r3, #1]
        send_val[2] = (uint8_t)((pressure_device.hal.temperature >> 8) & 0xff);
1000a2d2:	1210      	asrs	r0, r2, #8
1000a2d4:	7098      	strb	r0, [r3, #2]
        send_val[3] = (uint8_t)((pressure_device.hal.temperature) & 0xff);
1000a2d6:	70da      	strb	r2, [r3, #3]
        send_val[4] = (uint8_t)((pressure_device.hal.pressure >> 24) & 0xff);
1000a2d8:	69ca      	ldr	r2, [r1, #28]
1000a2da:	1610      	asrs	r0, r2, #24
1000a2dc:	7118      	strb	r0, [r3, #4]
        send_val[5] = (uint8_t)((pressure_device.hal.pressure >> 16) & 0xff);
1000a2de:	1410      	asrs	r0, r2, #16
1000a2e0:	7158      	strb	r0, [r3, #5]
        send_val[6] = (uint8_t)((pressure_device.hal.pressure >> 8) & 0xff);
1000a2e2:	1210      	asrs	r0, r2, #8
1000a2e4:	7198      	strb	r0, [r3, #6]
        send_val[7] = (uint8_t)((pressure_device.hal.pressure) & 0xff);
1000a2e6:	71da      	strb	r2, [r3, #7]
        val_handle = pressure_device.service_handler.serv_chars.char_val_handle;
1000a2e8:	2340      	movs	r3, #64	; 0x40
1000a2ea:	5acd      	ldrh	r5, [r1, r3]
        length = BLE_CHAR_SIZE_PRESSURE;
1000a2ec:	2208      	movs	r2, #8
        break;
1000a2ee:	e05a      	b.n	1000a3a6 <sms_ble_send_characteristic+0x15a>
        
        case BLE_CHAR_MPU:
        send_val[0] = (uint8_t)(mpu_device.hal.accel[0] & 0xff);
1000a2f0:	4a41      	ldr	r2, [pc, #260]	; (1000a3f8 <sms_ble_send_characteristic+0x1ac>)
1000a2f2:	230e      	movs	r3, #14
1000a2f4:	5ed1      	ldrsh	r1, [r2, r3]
1000a2f6:	ab01      	add	r3, sp, #4
1000a2f8:	7019      	strb	r1, [r3, #0]
        send_val[1] = (uint8_t)((mpu_device.hal.accel[0] >> 8) & 0xff);
1000a2fa:	1209      	asrs	r1, r1, #8
1000a2fc:	7059      	strb	r1, [r3, #1]
        send_val[2] = (uint8_t)(mpu_device.hal.accel[1] & 0xff);
1000a2fe:	2010      	movs	r0, #16
1000a300:	5e11      	ldrsh	r1, [r2, r0]
1000a302:	7099      	strb	r1, [r3, #2]
        send_val[3] = (uint8_t)((mpu_device.hal.accel[1] >> 8) & 0xff);
1000a304:	1209      	asrs	r1, r1, #8
1000a306:	70d9      	strb	r1, [r3, #3]
        send_val[4] = (uint8_t)(mpu_device.hal.accel[2] & 0xff);
1000a308:	2012      	movs	r0, #18
1000a30a:	5e11      	ldrsh	r1, [r2, r0]
1000a30c:	7119      	strb	r1, [r3, #4]
        send_val[5] = (uint8_t)((mpu_device.hal.accel[2] >> 8) & 0xff);
1000a30e:	1209      	asrs	r1, r1, #8
1000a310:	7159      	strb	r1, [r3, #5]
        send_val[6] = (uint8_t)(mpu_device.hal.gyro[0] & 0xff);
1000a312:	2008      	movs	r0, #8
1000a314:	5e11      	ldrsh	r1, [r2, r0]
1000a316:	7199      	strb	r1, [r3, #6]
        send_val[7] = (uint8_t)((mpu_device.hal.gyro[0] >> 8) & 0xff);
1000a318:	1209      	asrs	r1, r1, #8
1000a31a:	71d9      	strb	r1, [r3, #7]
        send_val[8] = (uint8_t)(mpu_device.hal.gyro[1] & 0xff);
1000a31c:	200a      	movs	r0, #10
1000a31e:	5e11      	ldrsh	r1, [r2, r0]
1000a320:	7219      	strb	r1, [r3, #8]
        send_val[9] = (uint8_t)((mpu_device.hal.gyro[1] >> 8) & 0xff);
1000a322:	1209      	asrs	r1, r1, #8
1000a324:	7259      	strb	r1, [r3, #9]
        send_val[10] = (uint8_t)(mpu_device.hal.gyro[2] & 0xff);
1000a326:	200c      	movs	r0, #12
1000a328:	5e11      	ldrsh	r1, [r2, r0]
1000a32a:	7299      	strb	r1, [r3, #10]
        send_val[11] = (uint8_t)((mpu_device.hal.gyro[2] >> 8) & 0xff);
1000a32c:	1209      	asrs	r1, r1, #8
1000a32e:	72d9      	strb	r1, [r3, #11]
        val_handle = mpu_device.service_handler.serv_chars.char_val_handle;
1000a330:	2344      	movs	r3, #68	; 0x44
1000a332:	5ad5      	ldrh	r5, [r2, r3]
        length = BLE_CHAR_SIZE_MPU_G_A;
        
        if(mpu_device.new_compass) {
1000a334:	3b18      	subs	r3, #24
1000a336:	5cd3      	ldrb	r3, [r2, r3]
1000a338:	2b00      	cmp	r3, #0
1000a33a:	d014      	beq.n	1000a366 <sms_ble_send_characteristic+0x11a>
            send_val[12] = (uint8_t)(mpu_device.hal.compass[0] & 0xff);
1000a33c:	2314      	movs	r3, #20
1000a33e:	5ed1      	ldrsh	r1, [r2, r3]
1000a340:	ab01      	add	r3, sp, #4
1000a342:	7319      	strb	r1, [r3, #12]
            send_val[13] = (uint8_t)((mpu_device.hal.compass[0] >> 8) & 0xff);
1000a344:	1209      	asrs	r1, r1, #8
1000a346:	7359      	strb	r1, [r3, #13]
            send_val[14] = (uint8_t)(mpu_device.hal.compass[1] & 0xff);
1000a348:	2016      	movs	r0, #22
1000a34a:	5e11      	ldrsh	r1, [r2, r0]
1000a34c:	7399      	strb	r1, [r3, #14]
            send_val[15] = (uint8_t)((mpu_device.hal.compass[1] >> 8) & 0xff);
1000a34e:	1209      	asrs	r1, r1, #8
1000a350:	73d9      	strb	r1, [r3, #15]
            send_val[16] = (uint8_t)(mpu_device.hal.compass[2] & 0xff);
1000a352:	2018      	movs	r0, #24
1000a354:	5e11      	ldrsh	r1, [r2, r0]
1000a356:	7419      	strb	r1, [r3, #16]
            send_val[17] = (uint8_t)((mpu_device.hal.compass[2] >> 8) & 0xff);
1000a358:	1209      	asrs	r1, r1, #8
1000a35a:	7459      	strb	r1, [r3, #17]
            length = BLE_CHAR_SIZE_MPU_G_A_C;
            mpu_device.new_compass = false;
1000a35c:	2100      	movs	r1, #0
1000a35e:	232c      	movs	r3, #44	; 0x2c
1000a360:	54d1      	strb	r1, [r2, r3]
            send_val[13] = (uint8_t)((mpu_device.hal.compass[0] >> 8) & 0xff);
            send_val[14] = (uint8_t)(mpu_device.hal.compass[1] & 0xff);
            send_val[15] = (uint8_t)((mpu_device.hal.compass[1] >> 8) & 0xff);
            send_val[16] = (uint8_t)(mpu_device.hal.compass[2] & 0xff);
            send_val[17] = (uint8_t)((mpu_device.hal.compass[2] >> 8) & 0xff);
            length = BLE_CHAR_SIZE_MPU_G_A_C;
1000a362:	2212      	movs	r2, #18
1000a364:	e008      	b.n	1000a378 <sms_ble_send_characteristic+0x12c>
            mpu_device.new_compass = false;
        }
        else {
            for(uint8_t i = 0; i < 6; i++) {
                send_val[12+i] = 0;
1000a366:	ab01      	add	r3, sp, #4
1000a368:	2200      	movs	r2, #0
1000a36a:	731a      	strb	r2, [r3, #12]
1000a36c:	735a      	strb	r2, [r3, #13]
1000a36e:	739a      	strb	r2, [r3, #14]
1000a370:	73da      	strb	r2, [r3, #15]
1000a372:	741a      	strb	r2, [r3, #16]
1000a374:	745a      	strb	r2, [r3, #17]
        send_val[8] = (uint8_t)(mpu_device.hal.gyro[1] & 0xff);
        send_val[9] = (uint8_t)((mpu_device.hal.gyro[1] >> 8) & 0xff);
        send_val[10] = (uint8_t)(mpu_device.hal.gyro[2] & 0xff);
        send_val[11] = (uint8_t)((mpu_device.hal.gyro[2] >> 8) & 0xff);
        val_handle = mpu_device.service_handler.serv_chars.char_val_handle;
        length = BLE_CHAR_SIZE_MPU_G_A;
1000a376:	320c      	adds	r2, #12
            for(uint8_t i = 0; i < 6; i++) {
                send_val[12+i] = 0;
            }
        }
        
        if(mpu_device.new_temp) {
1000a378:	232d      	movs	r3, #45	; 0x2d
1000a37a:	491f      	ldr	r1, [pc, #124]	; (1000a3f8 <sms_ble_send_characteristic+0x1ac>)
1000a37c:	5ccb      	ldrb	r3, [r1, r3]
1000a37e:	2b00      	cmp	r3, #0
1000a380:	d00a      	beq.n	1000a398 <sms_ble_send_characteristic+0x14c>
            send_val[18] = (uint8_t)(mpu_device.hal.temperature & 0xff);
1000a382:	000a      	movs	r2, r1
1000a384:	69cb      	ldr	r3, [r1, #28]
1000a386:	a901      	add	r1, sp, #4
1000a388:	748b      	strb	r3, [r1, #18]
            send_val[19] = (uint8_t)((mpu_device.hal.temperature >> 8) & 0xff);
1000a38a:	121b      	asrs	r3, r3, #8
1000a38c:	74cb      	strb	r3, [r1, #19]
            length = BLE_CHAR_SIZE_MPU_G_A_C_T;
            mpu_device.new_temp = false;
1000a38e:	2100      	movs	r1, #0
1000a390:	232d      	movs	r3, #45	; 0x2d
1000a392:	54d1      	strb	r1, [r2, r3]
        }
        
        if(mpu_device.new_temp) {
            send_val[18] = (uint8_t)(mpu_device.hal.temperature & 0xff);
            send_val[19] = (uint8_t)((mpu_device.hal.temperature >> 8) & 0xff);
            length = BLE_CHAR_SIZE_MPU_G_A_C_T;
1000a394:	2214      	movs	r2, #20
1000a396:	e006      	b.n	1000a3a6 <sms_ble_send_characteristic+0x15a>
            mpu_device.new_temp = false;
        }
        else {
            for(uint8_t i = 0; i < 2; i++) {
                send_val[18+i] = 0;
1000a398:	ab01      	add	r3, sp, #4
1000a39a:	2100      	movs	r1, #0
1000a39c:	7499      	strb	r1, [r3, #18]
1000a39e:	74d9      	strb	r1, [r3, #19]
1000a3a0:	e001      	b.n	1000a3a6 <sms_ble_send_characteristic+0x15a>

at_ble_status_t sms_ble_send_characteristic(enum sms_ble_char_type ch)
{
    at_ble_status_t status = AT_BLE_SUCCESS;
    at_ble_handle_t val_handle = 0;
    uint8_t length = 0;
1000a3a2:	2200      	movs	r2, #0
};

at_ble_status_t sms_ble_send_characteristic(enum sms_ble_char_type ch)
{
    at_ble_status_t status = AT_BLE_SUCCESS;
    at_ble_handle_t val_handle = 0;
1000a3a4:	2500      	movs	r5, #0
    
    //DBG_LOG_DEV("Sending: ");
    //for(int i = 0; i < 20; i += 2) {
        //DBG_LOG_CONT_DEV("0x%02x%02x ", send_val[i], send_val[i+1]);
    //}
    status = at_ble_characteristic_value_set(val_handle, send_val, (length * sizeof(uint8_t)));
1000a3a6:	b292      	uxth	r2, r2
1000a3a8:	a901      	add	r1, sp, #4
1000a3aa:	0028      	movs	r0, r5
1000a3ac:	4b13      	ldr	r3, [pc, #76]	; (1000a3fc <sms_ble_send_characteristic+0x1b0>)
1000a3ae:	4798      	blx	r3
1000a3b0:	1e04      	subs	r4, r0, #0
    if(status == AT_BLE_SUCCESS) {
1000a3b2:	d10e      	bne.n	1000a3d2 <sms_ble_send_characteristic+0x186>
		DBG_LOG_CONT_DEV(" SET! ");
1000a3b4:	4812      	ldr	r0, [pc, #72]	; (1000a400 <sms_ble_send_characteristic+0x1b4>)
1000a3b6:	4e13      	ldr	r6, [pc, #76]	; (1000a404 <sms_ble_send_characteristic+0x1b8>)
1000a3b8:	47b0      	blx	r6
//#   if SMS_SENDING_WITH_ACK == true
        //sms_ble_ind_retry = 0;
        //status = at_ble_indication_send(sms_connection_handle, val_handle);
//#   else
        status = at_ble_notification_send(sms_connection_handle, val_handle);
1000a3ba:	4b13      	ldr	r3, [pc, #76]	; (1000a408 <sms_ble_send_characteristic+0x1bc>)
1000a3bc:	8818      	ldrh	r0, [r3, #0]
1000a3be:	0029      	movs	r1, r5
1000a3c0:	4b12      	ldr	r3, [pc, #72]	; (1000a40c <sms_ble_send_characteristic+0x1c0>)
1000a3c2:	4798      	blx	r3
1000a3c4:	0002      	movs	r2, r0
1000a3c6:	0004      	movs	r4, r0
		DBG_LOG_CONT_DEV(" %d GONE? %d ", sms_ble_send_cnt, status);
1000a3c8:	4b08      	ldr	r3, [pc, #32]	; (1000a3ec <sms_ble_send_characteristic+0x1a0>)
1000a3ca:	8819      	ldrh	r1, [r3, #0]
1000a3cc:	4810      	ldr	r0, [pc, #64]	; (1000a410 <sms_ble_send_characteristic+0x1c4>)
1000a3ce:	47b0      	blx	r6
1000a3d0:	e005      	b.n	1000a3de <sms_ble_send_characteristic+0x192>
			//DBG_LOG_DEV(" NOT gone? ");
            //#pragma TBD: handle sending error...
        //}
    }
	else {
		DBG_LOG_DEV(" NOT set? ");
1000a3d2:	4810      	ldr	r0, [pc, #64]	; (1000a414 <sms_ble_send_characteristic+0x1c8>)
1000a3d4:	4b10      	ldr	r3, [pc, #64]	; (1000a418 <sms_ble_send_characteristic+0x1cc>)
1000a3d6:	4798      	blx	r3
1000a3d8:	4810      	ldr	r0, [pc, #64]	; (1000a41c <sms_ble_send_characteristic+0x1d0>)
1000a3da:	4b0a      	ldr	r3, [pc, #40]	; (1000a404 <sms_ble_send_characteristic+0x1b8>)
1000a3dc:	4798      	blx	r3
	}
    return status;
}
1000a3de:	0020      	movs	r0, r4
1000a3e0:	b006      	add	sp, #24
1000a3e2:	bd70      	pop	{r4, r5, r6, pc}
1000a3e4:	1001a074 	.word	0x1001a074
1000a3e8:	10019ec5 	.word	0x10019ec5
1000a3ec:	1001a094 	.word	0x1001a094
1000a3f0:	10019f58 	.word	0x10019f58
1000a3f4:	10019fdc 	.word	0x10019fdc
1000a3f8:	10019ec8 	.word	0x10019ec8
1000a3fc:	100110c1 	.word	0x100110c1
1000a400:	10016ac0 	.word	0x10016ac0
1000a404:	1001525d 	.word	0x1001525d
1000a408:	10019f56 	.word	0x10019f56
1000a40c:	10011261 	.word	0x10011261
1000a410:	10016ac8 	.word	0x10016ac8
1000a414:	10016528 	.word	0x10016528
1000a418:	1001537d 	.word	0x1001537d
1000a41c:	10016ad8 	.word	0x10016ad8

1000a420 <sms_ble_primary_service_define>:


at_ble_status_t sms_ble_primary_service_define(gatt_service_handler_t *service)
{
1000a420:	b510      	push	{r4, lr}
1000a422:	b082      	sub	sp, #8
    //DBG_LOG_DEV("[sms_ble_primary_service_define]\n\r  defining primary service\r\n- uuid: 0x%02x\r\n- handle: 0x%02x\r\n- char uuid: 0x%02x%02x\r\n- char init value: %d", (unsigned int)service->serv_uuid.uuid, service->serv_handle, service->serv_chars.uuid.uuid[1], service->serv_chars.uuid.uuid[0], service->serv_chars.value_init_len);
    return(at_ble_primary_service_define(&service->serv_uuid, &service->serv_handle, NULL, 0, &service->serv_chars, 1));
1000a424:	0001      	movs	r1, r0
1000a426:	3112      	adds	r1, #18
1000a428:	2301      	movs	r3, #1
1000a42a:	9301      	str	r3, [sp, #4]
1000a42c:	0003      	movs	r3, r0
1000a42e:	3314      	adds	r3, #20
1000a430:	9300      	str	r3, [sp, #0]
1000a432:	2300      	movs	r3, #0
1000a434:	2200      	movs	r2, #0
1000a436:	4c02      	ldr	r4, [pc, #8]	; (1000a440 <sms_ble_primary_service_define+0x20>)
1000a438:	47a0      	blx	r4
}
1000a43a:	b002      	add	sp, #8
1000a43c:	bd10      	pop	{r4, pc}
1000a43e:	46c0      	nop			; (mov r8, r8)
1000a440:	100110a1 	.word	0x100110a1

1000a444 <sms_ble_service_init>:


void sms_ble_service_init(enum sms_ble_serv_type type, gatt_service_handler_t *service, uint8_t *value)
{
1000a444:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a446:	464f      	mov	r7, r9
1000a448:	4646      	mov	r6, r8
1000a44a:	b4c0      	push	{r6, r7}
1000a44c:	b083      	sub	sp, #12
1000a44e:	4694      	mov	ip, r2
    at_ble_handle_t handle = 0;
    uint8_t uuid[16] = {0};
    uint8_t char_size = 0;
    switch(type) {
1000a450:	2801      	cmp	r0, #1
1000a452:	d010      	beq.n	1000a476 <sms_ble_service_init+0x32>
1000a454:	2800      	cmp	r0, #0
1000a456:	d002      	beq.n	1000a45e <sms_ble_service_init+0x1a>
1000a458:	2802      	cmp	r0, #2
1000a45a:	d019      	beq.n	1000a490 <sms_ble_service_init+0x4c>
1000a45c:	e025      	b.n	1000a4aa <sms_ble_service_init+0x66>
        uuid[1] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1) & 0xFF);
        uuid[4] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 24) & 0xFF);
        uuid[5] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 16) & 0xFF);
        uuid[6] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 8) & 0xFF);
1000a45e:	23bb      	movs	r3, #187	; 0xbb
        uuid[0] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1) & 0xFF);
        uuid[4] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 24) & 0xFF);
        uuid[5] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 16) & 0xFF);
1000a460:	2450      	movs	r4, #80	; 0x50
        handle = 1;
        uuid[0] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1) & 0xFF);
        uuid[4] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 24) & 0xFF);
1000a462:	2553      	movs	r5, #83	; 0x53
        case BLE_SERV_BUTTON:
        handle = 1;
        uuid[0] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1) & 0xFF);
1000a464:	26be      	movs	r6, #190	; 0xbe
    switch(type) {
        case BLE_SERV_BUTTON:
        handle = 1;
        uuid[0] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 8) & 0xFF);
1000a466:	275a      	movs	r7, #90	; 0x5a
    uint8_t char_size = 0;
    switch(type) {
        case BLE_SERV_BUTTON:
        handle = 1;
        uuid[0] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 16) & 0xFF);
1000a468:	2057      	movs	r0, #87	; 0x57
    uint8_t uuid[16] = {0};
    uint8_t char_size = 0;
    switch(type) {
        case BLE_SERV_BUTTON:
        handle = 1;
        uuid[0] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 24) & 0xFF);
1000a46a:	221c      	movs	r2, #28
1000a46c:	4690      	mov	r8, r2
        uuid[11] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_3) & 0xFF);
        uuid[12] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_4 >> 24) & 0xFF);
        uuid[13] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_4 >> 16) & 0xFF);
        uuid[14] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_4 >> 8) & 0xFF);
        uuid[15] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_4) & 0xFF);
        char_size = 1;
1000a46e:	3a1b      	subs	r2, #27
1000a470:	9201      	str	r2, [sp, #4]
    at_ble_handle_t handle = 0;
    uint8_t uuid[16] = {0};
    uint8_t char_size = 0;
    switch(type) {
        case BLE_SERV_BUTTON:
        handle = 1;
1000a472:	4691      	mov	r9, r2
1000a474:	e023      	b.n	1000a4be <sms_ble_service_init+0x7a>
        uuid[1] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1) & 0xFF);
        uuid[4] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 24) & 0xFF);
        uuid[5] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 16) & 0xFF);
        uuid[6] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 8) & 0xFF);
1000a476:	23ee      	movs	r3, #238	; 0xee
        uuid[0] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1) & 0xFF);
        uuid[4] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 24) & 0xFF);
        uuid[5] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 16) & 0xFF);
1000a478:	2450      	movs	r4, #80	; 0x50
        handle = 2;
        uuid[0] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1) & 0xFF);
        uuid[4] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 24) & 0xFF);
1000a47a:	2553      	movs	r5, #83	; 0x53
        case BLE_SERV_PRESSURE:
        handle = 2;
        uuid[0] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1) & 0xFF);
1000a47c:	26be      	movs	r6, #190	; 0xbe
        
        case BLE_SERV_PRESSURE:
        handle = 2;
        uuid[0] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 8) & 0xFF);
1000a47e:	275a      	movs	r7, #90	; 0x5a
        break;
        
        case BLE_SERV_PRESSURE:
        handle = 2;
        uuid[0] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 16) & 0xFF);
1000a480:	2057      	movs	r0, #87	; 0x57
        char_size = 1;
        break;
        
        case BLE_SERV_PRESSURE:
        handle = 2;
        uuid[0] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 24) & 0xFF);
1000a482:	221c      	movs	r2, #28
1000a484:	4690      	mov	r8, r2
        uuid[11] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_3) & 0xFF);
        uuid[12] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 24) & 0xFF);
        uuid[13] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 16) & 0xFF);
        uuid[14] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 8) & 0xFF);
        uuid[15] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4) & 0xFF);
        char_size = 8;
1000a486:	3a14      	subs	r2, #20
1000a488:	9201      	str	r2, [sp, #4]
        uuid[15] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_4) & 0xFF);
        char_size = 1;
        break;
        
        case BLE_SERV_PRESSURE:
        handle = 2;
1000a48a:	3a06      	subs	r2, #6
1000a48c:	4691      	mov	r9, r2
        uuid[12] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 24) & 0xFF);
        uuid[13] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 16) & 0xFF);
        uuid[14] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 8) & 0xFF);
        uuid[15] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4) & 0xFF);
        char_size = 8;
        break;
1000a48e:	e016      	b.n	1000a4be <sms_ble_service_init+0x7a>
        uuid[1] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1) & 0xFF);
        uuid[4] = (uint8_t) ((SMS_MPU_SERVICE_UUID_2 >> 24) & 0xFF);
        uuid[5] = (uint8_t) ((SMS_MPU_SERVICE_UUID_2 >> 16) & 0xFF);
        uuid[6] = (uint8_t) ((SMS_MPU_SERVICE_UUID_2 >> 8) & 0xFF);
1000a490:	2311      	movs	r3, #17
        uuid[0] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1) & 0xFF);
        uuid[4] = (uint8_t) ((SMS_MPU_SERVICE_UUID_2 >> 24) & 0xFF);
        uuid[5] = (uint8_t) ((SMS_MPU_SERVICE_UUID_2 >> 16) & 0xFF);
1000a492:	2450      	movs	r4, #80	; 0x50
        handle = 3;
        uuid[0] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1) & 0xFF);
        uuid[4] = (uint8_t) ((SMS_MPU_SERVICE_UUID_2 >> 24) & 0xFF);
1000a494:	2553      	movs	r5, #83	; 0x53
        case BLE_SERV_MPU:
        handle = 3;
        uuid[0] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1) & 0xFF);
1000a496:	26be      	movs	r6, #190	; 0xbe
        
        case BLE_SERV_MPU:
        handle = 3;
        uuid[0] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 8) & 0xFF);
1000a498:	275a      	movs	r7, #90	; 0x5a
        break;
        
        case BLE_SERV_MPU:
        handle = 3;
        uuid[0] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 16) & 0xFF);
1000a49a:	2057      	movs	r0, #87	; 0x57
        char_size = 8;
        break;
        
        case BLE_SERV_MPU:
        handle = 3;
        uuid[0] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 24) & 0xFF);
1000a49c:	221c      	movs	r2, #28
1000a49e:	4690      	mov	r8, r2
        uuid[11] = (uint8_t) ((SMS_MPU_SERVICE_UUID_3) & 0xFF);
        uuid[12] = (uint8_t) ((SMS_MPU_SERVICE_UUID_4 >> 24) & 0xFF);
        uuid[13] = (uint8_t) ((SMS_MPU_SERVICE_UUID_4 >> 16) & 0xFF);
        uuid[14] = (uint8_t) ((SMS_MPU_SERVICE_UUID_4 >> 8) & 0xFF);
        uuid[15] = (uint8_t) ((SMS_MPU_SERVICE_UUID_4) & 0xFF);
        char_size = 20;
1000a4a0:	3a08      	subs	r2, #8
1000a4a2:	9201      	str	r2, [sp, #4]
        uuid[15] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4) & 0xFF);
        char_size = 8;
        break;
        
        case BLE_SERV_MPU:
        handle = 3;
1000a4a4:	3a11      	subs	r2, #17
1000a4a6:	4691      	mov	r9, r2
        uuid[12] = (uint8_t) ((SMS_MPU_SERVICE_UUID_4 >> 24) & 0xFF);
        uuid[13] = (uint8_t) ((SMS_MPU_SERVICE_UUID_4 >> 16) & 0xFF);
        uuid[14] = (uint8_t) ((SMS_MPU_SERVICE_UUID_4 >> 8) & 0xFF);
        uuid[15] = (uint8_t) ((SMS_MPU_SERVICE_UUID_4) & 0xFF);
        char_size = 20;
        break;
1000a4a8:	e009      	b.n	1000a4be <sms_ble_service_init+0x7a>


void sms_ble_service_init(enum sms_ble_serv_type type, gatt_service_handler_t *service, uint8_t *value)
{
    at_ble_handle_t handle = 0;
    uint8_t uuid[16] = {0};
1000a4aa:	2300      	movs	r3, #0
1000a4ac:	2400      	movs	r4, #0
1000a4ae:	2500      	movs	r5, #0
1000a4b0:	2600      	movs	r6, #0
1000a4b2:	2700      	movs	r7, #0
1000a4b4:	2000      	movs	r0, #0
1000a4b6:	2200      	movs	r2, #0
1000a4b8:	4690      	mov	r8, r2
    uint8_t char_size = 0;
1000a4ba:	9201      	str	r2, [sp, #4]
}


void sms_ble_service_init(enum sms_ble_serv_type type, gatt_service_handler_t *service, uint8_t *value)
{
    at_ble_handle_t handle = 0;
1000a4bc:	4691      	mov	r9, r2
        
        default:
        break;
    }
    //SMS button service characteristic
    service->serv_handle = handle;
1000a4be:	464a      	mov	r2, r9
1000a4c0:	824a      	strh	r2, [r1, #18]
    service->serv_uuid.type = AT_BLE_UUID_128;
1000a4c2:	2202      	movs	r2, #2
1000a4c4:	700a      	strb	r2, [r1, #0]
    service->serv_uuid.uuid[0] = uuid[0];
1000a4c6:	4642      	mov	r2, r8
1000a4c8:	704a      	strb	r2, [r1, #1]
    service->serv_uuid.uuid[1] = uuid[1];
1000a4ca:	7088      	strb	r0, [r1, #2]
    service->serv_uuid.uuid[2] = uuid[2];
1000a4cc:	70cf      	strb	r7, [r1, #3]
    service->serv_uuid.uuid[3] = uuid[3];
1000a4ce:	710e      	strb	r6, [r1, #4]
    service->serv_uuid.uuid[4] = uuid[4];
1000a4d0:	714d      	strb	r5, [r1, #5]
    service->serv_uuid.uuid[5] = uuid[5];
1000a4d2:	718c      	strb	r4, [r1, #6]
    service->serv_uuid.uuid[6] = uuid[6];
1000a4d4:	71cb      	strb	r3, [r1, #7]
    service->serv_uuid.uuid[7] = uuid[7];
1000a4d6:	720b      	strb	r3, [r1, #8]
    service->serv_uuid.uuid[8] = uuid[8];
1000a4d8:	2300      	movs	r3, #0
1000a4da:	724b      	strb	r3, [r1, #9]
    service->serv_uuid.uuid[9] = uuid[9];
1000a4dc:	728b      	strb	r3, [r1, #10]
    service->serv_uuid.uuid[10] = uuid[10];
1000a4de:	72cb      	strb	r3, [r1, #11]
    service->serv_uuid.uuid[11] = uuid[11];
1000a4e0:	730b      	strb	r3, [r1, #12]
    service->serv_uuid.uuid[12] = uuid[12];
1000a4e2:	734b      	strb	r3, [r1, #13]
    service->serv_uuid.uuid[13] = uuid[13];
1000a4e4:	738b      	strb	r3, [r1, #14]
    service->serv_uuid.uuid[14] = uuid[14];
1000a4e6:	73cb      	strb	r3, [r1, #15]
    service->serv_uuid.uuid[15] = uuid[15];
1000a4e8:	740b      	strb	r3, [r1, #16]
    
    #   if SMS_SENDING_WITH_ACK == true
    service->serv_chars.properties = (AT_BLE_CHAR_READ | AT_BLE_CHAR_INDICATE); // properties
    #   else
    service->serv_chars.properties = (AT_BLE_CHAR_READ | AT_BLE_CHAR_NOTIFY); // properties
1000a4ea:	2412      	movs	r4, #18
1000a4ec:	850c      	strh	r4, [r1, #40]	; 0x28
    #   endif
    service->serv_chars.init_value = value; // value
1000a4ee:	4662      	mov	r2, ip
1000a4f0:	62ca      	str	r2, [r1, #44]	; 0x2c
    service->serv_chars.value_init_len = char_size * sizeof(uint8_t);
1000a4f2:	466a      	mov	r2, sp
1000a4f4:	8892      	ldrh	r2, [r2, #4]
1000a4f6:	860a      	strh	r2, [r1, #48]	; 0x30
    service->serv_chars.value_max_len = char_size * sizeof(uint8_t);
1000a4f8:	864a      	strh	r2, [r1, #50]	; 0x32
    service->serv_chars.value_permissions = (AT_BLE_ATTR_READABLE_NO_AUTHN_NO_AUTHR | AT_BLE_ATTR_WRITABLE_NO_AUTHN_NO_AUTHR); // permissions
1000a4fa:	2011      	movs	r0, #17
1000a4fc:	2234      	movs	r2, #52	; 0x34
1000a4fe:	5488      	strb	r0, [r1, r2]
    service->serv_chars.user_desc = NULL; //user defined name
1000a500:	638b      	str	r3, [r1, #56]	; 0x38
    service->serv_chars.user_desc_len = 0;
1000a502:	2200      	movs	r2, #0
1000a504:	878b      	strh	r3, [r1, #60]	; 0x3c
    service->serv_chars.user_desc_max_len = 0;
1000a506:	87cb      	strh	r3, [r1, #62]	; 0x3e
    service->serv_chars.user_desc_permissions = AT_BLE_ATTR_NO_PERMISSIONS; // user description permissions
1000a508:	3033      	adds	r0, #51	; 0x33
1000a50a:	540a      	strb	r2, [r1, r0]
    service->serv_chars.client_config_permissions = AT_BLE_ATTR_NO_PERMISSIONS; // client config permissions
1000a50c:	3001      	adds	r0, #1
1000a50e:	540a      	strb	r2, [r1, r0]
    service->serv_chars.server_config_permissions = AT_BLE_ATTR_NO_PERMISSIONS; // server config permissions
1000a510:	3001      	adds	r0, #1
1000a512:	540a      	strb	r2, [r1, r0]
    service->serv_chars.user_desc_handle = 0; // user description handles
1000a514:	2248      	movs	r2, #72	; 0x48
1000a516:	528b      	strh	r3, [r1, r2]
    service->serv_chars.client_config_handle = 0; // client config handles
1000a518:	3202      	adds	r2, #2
1000a51a:	528b      	strh	r3, [r1, r2]
    service->serv_chars.server_config_handle = 0; // server config handles
1000a51c:	3202      	adds	r2, #2
1000a51e:	528b      	strh	r3, [r1, r2]
    
    service->serv_chars.presentation_format = NULL; //presentation format
1000a520:	640b      	str	r3, [r1, #64]	; 0x40
1000a522:	b003      	add	sp, #12
1000a524:	bc0c      	pop	{r2, r3}
1000a526:	4690      	mov	r8, r2
1000a528:	4699      	mov	r9, r3
1000a52a:	bdf0      	pop	{r4, r5, r6, r7, pc}

1000a52c <sms_button_bt0_callback>:
        gpio_disable_callback(button_instance.btn1.gpio_pin);
    }
}
/* Callbacks --> sending interrupt message to platform */
void sms_button_bt0_callback(void)
{
1000a52c:	b510      	push	{r4, lr}
    button_instance.btn0.new_int = true;
1000a52e:	4b05      	ldr	r3, [pc, #20]	; (1000a544 <sms_button_bt0_callback+0x18>)
1000a530:	2201      	movs	r2, #1
1000a532:	70da      	strb	r2, [r3, #3]
    send_plf_int_msg_ind(button_instance.btn0.gpio_pin, GPIO_CALLBACK_RISING, NULL, 0);
1000a534:	7858      	ldrb	r0, [r3, #1]
1000a536:	2300      	movs	r3, #0
1000a538:	2200      	movs	r2, #0
1000a53a:	2102      	movs	r1, #2
1000a53c:	4c02      	ldr	r4, [pc, #8]	; (1000a548 <sms_button_bt0_callback+0x1c>)
1000a53e:	47a0      	blx	r4
}
1000a540:	bd10      	pop	{r4, pc}
1000a542:	46c0      	nop			; (mov r8, r8)
1000a544:	10019f58 	.word	0x10019f58
1000a548:	1000f349 	.word	0x1000f349

1000a54c <sms_button_bt1_callback>:
void sms_button_bt1_callback(void)
{
1000a54c:	b510      	push	{r4, lr}
	button_instance.btn1.new_int = true;
1000a54e:	4b05      	ldr	r3, [pc, #20]	; (1000a564 <sms_button_bt1_callback+0x18>)
1000a550:	2201      	movs	r2, #1
1000a552:	725a      	strb	r2, [r3, #9]
    send_plf_int_msg_ind(button_instance.btn1.gpio_pin, GPIO_CALLBACK_RISING, NULL, 0);
1000a554:	79d8      	ldrb	r0, [r3, #7]
1000a556:	2300      	movs	r3, #0
1000a558:	2200      	movs	r2, #0
1000a55a:	2102      	movs	r1, #2
1000a55c:	4c02      	ldr	r4, [pc, #8]	; (1000a568 <sms_button_bt1_callback+0x1c>)
1000a55e:	47a0      	blx	r4
}
1000a560:	bd10      	pop	{r4, pc}
1000a562:	46c0      	nop			; (mov r8, r8)
1000a564:	10019f58 	.word	0x10019f58
1000a568:	1000f349 	.word	0x1000f349

1000a56c <sms_button_configure_gpio>:
/* Callback functions --> doing things                                  */
/************************************************************************/

/* Initialize gpio for button inputs */
void sms_button_configure_gpio(void)
{
1000a56c:	b510      	push	{r4, lr}
1000a56e:	b082      	sub	sp, #8
    struct gpio_config config_gpio_pin;

    /* Button0 @ PIN_AO_GPIO_0 */
    gpio_get_config_defaults(&config_gpio_pin);
1000a570:	ac01      	add	r4, sp, #4
1000a572:	0020      	movs	r0, r4
1000a574:	4b20      	ldr	r3, [pc, #128]	; (1000a5f8 <sms_button_configure_gpio+0x8c>)
1000a576:	4798      	blx	r3
    config_gpio_pin.direction = GPIO_PIN_DIR_INPUT;
1000a578:	2300      	movs	r3, #0
1000a57a:	7023      	strb	r3, [r4, #0]
    config_gpio_pin.input_pull = GPIO_PIN_PULL_DOWN;
1000a57c:	3302      	adds	r3, #2
1000a57e:	7063      	strb	r3, [r4, #1]
    config_gpio_pin.aon_wakeup = true;
1000a580:	3b01      	subs	r3, #1
1000a582:	70e3      	strb	r3, [r4, #3]
    if(gpio_pin_set_config(button_instance.btn0.gpio_pin, &config_gpio_pin) != STATUS_OK) {
1000a584:	4b1d      	ldr	r3, [pc, #116]	; (1000a5fc <sms_button_configure_gpio+0x90>)
1000a586:	7858      	ldrb	r0, [r3, #1]
1000a588:	0021      	movs	r1, r4
1000a58a:	4b1d      	ldr	r3, [pc, #116]	; (1000a600 <sms_button_configure_gpio+0x94>)
1000a58c:	4798      	blx	r3
1000a58e:	2800      	cmp	r0, #0
1000a590:	d005      	beq.n	1000a59e <sms_button_configure_gpio+0x32>
        DBG_LOG_DEV("[sms_button_configure]\tproblem while setting up button0");
1000a592:	481c      	ldr	r0, [pc, #112]	; (1000a604 <sms_button_configure_gpio+0x98>)
1000a594:	4b1c      	ldr	r3, [pc, #112]	; (1000a608 <sms_button_configure_gpio+0x9c>)
1000a596:	4798      	blx	r3
1000a598:	481c      	ldr	r0, [pc, #112]	; (1000a60c <sms_button_configure_gpio+0xa0>)
1000a59a:	4b1d      	ldr	r3, [pc, #116]	; (1000a610 <sms_button_configure_gpio+0xa4>)
1000a59c:	4798      	blx	r3
    }
    
    /* Button1 @ PIN_AO_GPIO_2 */
    gpio_get_config_defaults(&config_gpio_pin);
1000a59e:	ac01      	add	r4, sp, #4
1000a5a0:	0020      	movs	r0, r4
1000a5a2:	4b15      	ldr	r3, [pc, #84]	; (1000a5f8 <sms_button_configure_gpio+0x8c>)
1000a5a4:	4798      	blx	r3
    config_gpio_pin.direction = GPIO_PIN_DIR_INPUT;
1000a5a6:	2300      	movs	r3, #0
1000a5a8:	7023      	strb	r3, [r4, #0]
    config_gpio_pin.input_pull = GPIO_PIN_PULL_DOWN;
1000a5aa:	3302      	adds	r3, #2
1000a5ac:	7063      	strb	r3, [r4, #1]
    config_gpio_pin.aon_wakeup = true;
1000a5ae:	3b01      	subs	r3, #1
1000a5b0:	70e3      	strb	r3, [r4, #3]
    if(gpio_pin_set_config(button_instance.btn1.gpio_pin, &config_gpio_pin) != STATUS_OK) {
1000a5b2:	4b12      	ldr	r3, [pc, #72]	; (1000a5fc <sms_button_configure_gpio+0x90>)
1000a5b4:	79d8      	ldrb	r0, [r3, #7]
1000a5b6:	0021      	movs	r1, r4
1000a5b8:	4b11      	ldr	r3, [pc, #68]	; (1000a600 <sms_button_configure_gpio+0x94>)
1000a5ba:	4798      	blx	r3
1000a5bc:	2800      	cmp	r0, #0
1000a5be:	d005      	beq.n	1000a5cc <sms_button_configure_gpio+0x60>
        DBG_LOG("[sms_button_configure]\tProblem while setting up button1");
1000a5c0:	4810      	ldr	r0, [pc, #64]	; (1000a604 <sms_button_configure_gpio+0x98>)
1000a5c2:	4b11      	ldr	r3, [pc, #68]	; (1000a608 <sms_button_configure_gpio+0x9c>)
1000a5c4:	4798      	blx	r3
1000a5c6:	4813      	ldr	r0, [pc, #76]	; (1000a614 <sms_button_configure_gpio+0xa8>)
1000a5c8:	4b11      	ldr	r3, [pc, #68]	; (1000a610 <sms_button_configure_gpio+0xa4>)
1000a5ca:	4798      	blx	r3
    }

    /* Button 0 on SAMB11 XPLAINED */
    gpio_get_config_defaults(&config_gpio_pin);
1000a5cc:	ac01      	add	r4, sp, #4
1000a5ce:	0020      	movs	r0, r4
1000a5d0:	4b09      	ldr	r3, [pc, #36]	; (1000a5f8 <sms_button_configure_gpio+0x8c>)
1000a5d2:	4798      	blx	r3
    config_gpio_pin.direction = GPIO_PIN_DIR_INPUT;
1000a5d4:	2300      	movs	r3, #0
1000a5d6:	7023      	strb	r3, [r4, #0]
    config_gpio_pin.input_pull = GPIO_PIN_PULL_NONE;
1000a5d8:	7063      	strb	r3, [r4, #1]
    if(gpio_pin_set_config(BUTTON_0_PIN, &config_gpio_pin) != STATUS_OK) {
1000a5da:	0021      	movs	r1, r4
1000a5dc:	2017      	movs	r0, #23
1000a5de:	4b08      	ldr	r3, [pc, #32]	; (1000a600 <sms_button_configure_gpio+0x94>)
1000a5e0:	4798      	blx	r3
1000a5e2:	2800      	cmp	r0, #0
1000a5e4:	d005      	beq.n	1000a5f2 <sms_button_configure_gpio+0x86>
        DBG_LOG("[sms_button_configure]\tProblem while setting up XPLAINED user button");
1000a5e6:	4807      	ldr	r0, [pc, #28]	; (1000a604 <sms_button_configure_gpio+0x98>)
1000a5e8:	4b07      	ldr	r3, [pc, #28]	; (1000a608 <sms_button_configure_gpio+0x9c>)
1000a5ea:	4798      	blx	r3
1000a5ec:	480a      	ldr	r0, [pc, #40]	; (1000a618 <sms_button_configure_gpio+0xac>)
1000a5ee:	4b08      	ldr	r3, [pc, #32]	; (1000a610 <sms_button_configure_gpio+0xa4>)
1000a5f0:	4798      	blx	r3
    }
}
1000a5f2:	b002      	add	sp, #8
1000a5f4:	bd10      	pop	{r4, pc}
1000a5f6:	46c0      	nop			; (mov r8, r8)
1000a5f8:	1000c085 	.word	0x1000c085
1000a5fc:	10019f58 	.word	0x10019f58
1000a600:	1000c095 	.word	0x1000c095
1000a604:	10016528 	.word	0x10016528
1000a608:	1001537d 	.word	0x1001537d
1000a60c:	10016b58 	.word	0x10016b58
1000a610:	1001525d 	.word	0x1001525d
1000a614:	10016b90 	.word	0x10016b90
1000a618:	10016bc8 	.word	0x10016bc8

1000a61c <sms_button_register_callbacks>:

/* Register button input callbacks */
void sms_button_register_callbacks(void)
{
1000a61c:	b570      	push	{r4, r5, r6, lr}
    /* Button0 callback */
    gpio_register_callback(button_instance.btn0.gpio_pin, sms_button_bt0_callback, GPIO_CALLBACK_RISING);
1000a61e:	4d05      	ldr	r5, [pc, #20]	; (1000a634 <sms_button_register_callbacks+0x18>)
1000a620:	7868      	ldrb	r0, [r5, #1]
1000a622:	2202      	movs	r2, #2
1000a624:	4904      	ldr	r1, [pc, #16]	; (1000a638 <sms_button_register_callbacks+0x1c>)
1000a626:	4c05      	ldr	r4, [pc, #20]	; (1000a63c <sms_button_register_callbacks+0x20>)
1000a628:	47a0      	blx	r4
    //gpio_enable_callback(SMS_BTN_0_PIN);
    
    /* Button1 callback */
    gpio_register_callback(button_instance.btn1.gpio_pin, sms_button_bt1_callback, GPIO_CALLBACK_RISING);
1000a62a:	79e8      	ldrb	r0, [r5, #7]
1000a62c:	2202      	movs	r2, #2
1000a62e:	4904      	ldr	r1, [pc, #16]	; (1000a640 <sms_button_register_callbacks+0x24>)
1000a630:	47a0      	blx	r4
    //gpio_enable_callback(SMS_BTN_1_PIN);
    
    /* User button callback */
}
1000a632:	bd70      	pop	{r4, r5, r6, pc}
1000a634:	10019f58 	.word	0x10019f58
1000a638:	1000a52d 	.word	0x1000a52d
1000a63c:	1000c4c5 	.word	0x1000c4c5
1000a640:	1000a54d 	.word	0x1000a54d

1000a644 <sms_button_get_state>:
    gpio_disable_callback(SMS_BTN_1_PIN);
}

/* Get current buttons state */
enum sms_button_state sms_button_get_state(void)
{
1000a644:	b570      	push	{r4, r5, r6, lr}
    bool b0 = gpio_pin_get_input_level(SMS_BTN_0_PIN);
1000a646:	201f      	movs	r0, #31
1000a648:	4d0c      	ldr	r5, [pc, #48]	; (1000a67c <sms_button_get_state+0x38>)
1000a64a:	47a8      	blx	r5
1000a64c:	0004      	movs	r4, r0
    bool b1 = gpio_pin_get_input_level(SMS_BTN_1_PIN);
1000a64e:	201d      	movs	r0, #29
1000a650:	47a8      	blx	r5
1000a652:	0005      	movs	r5, r0
1000a654:	0006      	movs	r6, r0
    DBG_LOG("[sms_button_get_state]\t\tButton state: %d %d", b1, b0);
1000a656:	480a      	ldr	r0, [pc, #40]	; (1000a680 <sms_button_get_state+0x3c>)
1000a658:	4b0a      	ldr	r3, [pc, #40]	; (1000a684 <sms_button_get_state+0x40>)
1000a65a:	4798      	blx	r3
1000a65c:	0022      	movs	r2, r4
1000a65e:	0029      	movs	r1, r5
1000a660:	4809      	ldr	r0, [pc, #36]	; (1000a688 <sms_button_get_state+0x44>)
1000a662:	4b0a      	ldr	r3, [pc, #40]	; (1000a68c <sms_button_get_state+0x48>)
1000a664:	4798      	blx	r3
    if(b0 && b1) return BUTTON_STATE_BOTH;
1000a666:	2c00      	cmp	r4, #0
1000a668:	d004      	beq.n	1000a674 <sms_button_get_state+0x30>
1000a66a:	2003      	movs	r0, #3
1000a66c:	2d00      	cmp	r5, #0
1000a66e:	d104      	bne.n	1000a67a <sms_button_get_state+0x36>
    else if(b0 && !b1) return BUTTON_STATE_B0;
1000a670:	3802      	subs	r0, #2
1000a672:	e002      	b.n	1000a67a <sms_button_get_state+0x36>
    else if(!b0 && b1) return BUTTON_STATE_B1;
    else return BUTTON_STATE_NONE;
1000a674:	1e70      	subs	r0, r6, #1
1000a676:	4186      	sbcs	r6, r0
1000a678:	0070      	lsls	r0, r6, #1
}
1000a67a:	bd70      	pop	{r4, r5, r6, pc}
1000a67c:	1000c24d 	.word	0x1000c24d
1000a680:	10016528 	.word	0x10016528
1000a684:	1001537d 	.word	0x1001537d
1000a688:	10016c10 	.word	0x10016c10
1000a68c:	1001525d 	.word	0x1001525d

1000a690 <sms_button_fn>:
/************************************************************************/
/* Callback functions --> doing things                                  */
/************************************************************************/
/* BUTTON_0 */
int sms_button_fn(enum sms_btn_ids btn)
{
1000a690:	b570      	push	{r4, r5, r6, lr}
1000a692:	0005      	movs	r5, r0
    button_instance.previous_state = button_instance.current_state;
1000a694:	4c4f      	ldr	r4, [pc, #316]	; (1000a7d4 <sms_button_fn+0x144>)
1000a696:	7b63      	ldrb	r3, [r4, #13]
1000a698:	7323      	strb	r3, [r4, #12]
    button_instance.current_state = sms_button_get_state();
1000a69a:	4b4f      	ldr	r3, [pc, #316]	; (1000a7d8 <sms_button_fn+0x148>)
1000a69c:	4798      	blx	r3
1000a69e:	7360      	strb	r0, [r4, #13]
    
    if(btn == SMS_BTN_0) sms_monitor_get_states("[sms_button_fn]-0");
1000a6a0:	2d00      	cmp	r5, #0
1000a6a2:	d103      	bne.n	1000a6ac <sms_button_fn+0x1c>
1000a6a4:	484d      	ldr	r0, [pc, #308]	; (1000a7dc <sms_button_fn+0x14c>)
1000a6a6:	4b4e      	ldr	r3, [pc, #312]	; (1000a7e0 <sms_button_fn+0x150>)
1000a6a8:	4798      	blx	r3
1000a6aa:	e005      	b.n	1000a6b8 <sms_button_fn+0x28>
    else if(btn == SMS_BTN_1) sms_monitor_get_states("[sms_button_fn]-1");
1000a6ac:	2d01      	cmp	r5, #1
1000a6ae:	d000      	beq.n	1000a6b2 <sms_button_fn+0x22>
1000a6b0:	e088      	b.n	1000a7c4 <sms_button_fn+0x134>
1000a6b2:	484c      	ldr	r0, [pc, #304]	; (1000a7e4 <sms_button_fn+0x154>)
1000a6b4:	4b4a      	ldr	r3, [pc, #296]	; (1000a7e0 <sms_button_fn+0x150>)
1000a6b6:	4798      	blx	r3
    else return -1;
    
    switch(button_instance.current_state) {
1000a6b8:	4b46      	ldr	r3, [pc, #280]	; (1000a7d4 <sms_button_fn+0x144>)
1000a6ba:	7b5b      	ldrb	r3, [r3, #13]
1000a6bc:	2b01      	cmp	r3, #1
1000a6be:	d006      	beq.n	1000a6ce <sms_button_fn+0x3e>
1000a6c0:	2b00      	cmp	r3, #0
1000a6c2:	d07a      	beq.n	1000a7ba <sms_button_fn+0x12a>
1000a6c4:	2b02      	cmp	r3, #2
1000a6c6:	d02d      	beq.n	1000a724 <sms_button_fn+0x94>
1000a6c8:	2b03      	cmp	r3, #3
1000a6ca:	d056      	beq.n	1000a77a <sms_button_fn+0xea>
1000a6cc:	e07d      	b.n	1000a7ca <sms_button_fn+0x13a>
        // --- current state ---
        case BUTTON_STATE_B0:
        switch(ble_current_state) {
1000a6ce:	4b46      	ldr	r3, [pc, #280]	; (1000a7e8 <sms_button_fn+0x158>)
1000a6d0:	781b      	ldrb	r3, [r3, #0]
1000a6d2:	b2db      	uxtb	r3, r3
1000a6d4:	2b00      	cmp	r3, #0
1000a6d6:	d003      	beq.n	1000a6e0 <sms_button_fn+0x50>
1000a6d8:	3b22      	subs	r3, #34	; 0x22
1000a6da:	2b01      	cmp	r3, #1
1000a6dc:	d819      	bhi.n	1000a712 <sms_button_fn+0x82>
1000a6de:	e00e      	b.n	1000a6fe <sms_button_fn+0x6e>
            case BLE_STATE_POWEROFF:
            timer1_current_mode = TIMER1_MODE_STARTUP;
1000a6e0:	2201      	movs	r2, #1
1000a6e2:	4b42      	ldr	r3, [pc, #264]	; (1000a7ec <sms_button_fn+0x15c>)
1000a6e4:	701a      	strb	r2, [r3, #0]
            timer2_current_mode = TIMER2_MODE_NONE;
1000a6e6:	2300      	movs	r3, #0
1000a6e8:	4a41      	ldr	r2, [pc, #260]	; (1000a7f0 <sms_button_fn+0x160>)
1000a6ea:	7013      	strb	r3, [r2, #0]
            sms_btn_cnt = 0;
1000a6ec:	4a41      	ldr	r2, [pc, #260]	; (1000a7f4 <sms_button_fn+0x164>)
1000a6ee:	7013      	strb	r3, [r2, #0]
            //ulp_ready = false;
            sms_dualtimer_start(TIMER_UNIT_MS, SMS_BTN_STARTUP_MS, DUALTIMER_TIMER1);
1000a6f0:	2200      	movs	r2, #0
1000a6f2:	21fa      	movs	r1, #250	; 0xfa
1000a6f4:	2001      	movs	r0, #1
1000a6f6:	4b40      	ldr	r3, [pc, #256]	; (1000a7f8 <sms_button_fn+0x168>)
1000a6f8:	4798      	blx	r3
        ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
1000a6fa:	2000      	movs	r0, #0
            timer1_current_mode = TIMER1_MODE_STARTUP;
            timer2_current_mode = TIMER2_MODE_NONE;
            sms_btn_cnt = 0;
            //ulp_ready = false;
            sms_dualtimer_start(TIMER_UNIT_MS, SMS_BTN_STARTUP_MS, DUALTIMER_TIMER1);
            break;
1000a6fc:	e069      	b.n	1000a7d2 <sms_button_fn+0x142>
            case BLE_STATE_INDICATING:
            //if(pressure_device.state == PRESSURE_STATE_STDBY) {
                //DBG_LOG_DEV("[sms_button_fn]\t\tStarting sensors (B0)");
                //sms_sensors_interrupt_toggle(false, true);
            //}
            timer1_current_mode = TIMER1_MODE_NONE;
1000a6fe:	2300      	movs	r3, #0
1000a700:	4a3a      	ldr	r2, [pc, #232]	; (1000a7ec <sms_button_fn+0x15c>)
1000a702:	7013      	strb	r3, [r2, #0]
            timer2_current_mode = TIMER2_MODE_NONE;
1000a704:	4a3a      	ldr	r2, [pc, #232]	; (1000a7f0 <sms_button_fn+0x160>)
1000a706:	7013      	strb	r3, [r2, #0]
			sms_ble_send_characteristic(BLE_CHAR_BTN);
1000a708:	2000      	movs	r0, #0
1000a70a:	4b3c      	ldr	r3, [pc, #240]	; (1000a7fc <sms_button_fn+0x16c>)
1000a70c:	4798      	blx	r3
        ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
1000a70e:	2000      	movs	r0, #0
                //sms_sensors_interrupt_toggle(false, true);
            //}
            timer1_current_mode = TIMER1_MODE_NONE;
            timer2_current_mode = TIMER2_MODE_NONE;
			sms_ble_send_characteristic(BLE_CHAR_BTN);
            break;
1000a710:	e05f      	b.n	1000a7d2 <sms_button_fn+0x142>
            
            case BLE_STATE_DISCONNECTED:
            case BLE_STATE_ADVERTISING:
            case BLE_STATE_CONNECTED:
            default:
            DBG_LOG_DEV("[sms_button_fn]\t\t\tNot used states...");
1000a712:	483b      	ldr	r0, [pc, #236]	; (1000a800 <sms_button_fn+0x170>)
1000a714:	4b3b      	ldr	r3, [pc, #236]	; (1000a804 <sms_button_fn+0x174>)
1000a716:	4798      	blx	r3
1000a718:	483b      	ldr	r0, [pc, #236]	; (1000a808 <sms_button_fn+0x178>)
1000a71a:	4b3c      	ldr	r3, [pc, #240]	; (1000a80c <sms_button_fn+0x17c>)
1000a71c:	4798      	blx	r3
            return -1;
1000a71e:	2001      	movs	r0, #1
1000a720:	4240      	negs	r0, r0
1000a722:	e056      	b.n	1000a7d2 <sms_button_fn+0x142>
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        break;
        
        // --- current state ---
        case BUTTON_STATE_B1:
        switch(ble_current_state) {
1000a724:	4b30      	ldr	r3, [pc, #192]	; (1000a7e8 <sms_button_fn+0x158>)
1000a726:	781b      	ldrb	r3, [r3, #0]
1000a728:	b2db      	uxtb	r3, r3
1000a72a:	2b22      	cmp	r3, #34	; 0x22
1000a72c:	d012      	beq.n	1000a754 <sms_button_fn+0xc4>
1000a72e:	2b23      	cmp	r3, #35	; 0x23
1000a730:	d01a      	beq.n	1000a768 <sms_button_fn+0xd8>
1000a732:	2b00      	cmp	r3, #0
1000a734:	d14b      	bne.n	1000a7ce <sms_button_fn+0x13e>
            case BLE_STATE_POWEROFF:
            timer1_current_mode = TIMER1_MODE_STARTUP;
1000a736:	2201      	movs	r2, #1
1000a738:	4b2c      	ldr	r3, [pc, #176]	; (1000a7ec <sms_button_fn+0x15c>)
1000a73a:	701a      	strb	r2, [r3, #0]
            timer2_current_mode = TIMER2_MODE_NONE;
1000a73c:	2300      	movs	r3, #0
1000a73e:	4a2c      	ldr	r2, [pc, #176]	; (1000a7f0 <sms_button_fn+0x160>)
1000a740:	7013      	strb	r3, [r2, #0]
            sms_btn_cnt = 0;
1000a742:	4a2c      	ldr	r2, [pc, #176]	; (1000a7f4 <sms_button_fn+0x164>)
1000a744:	7013      	strb	r3, [r2, #0]
            //ulp_ready = false;
            sms_dualtimer_start(TIMER_UNIT_MS, SMS_BTN_STARTUP_MS, DUALTIMER_TIMER1);
1000a746:	2200      	movs	r2, #0
1000a748:	21fa      	movs	r1, #250	; 0xfa
1000a74a:	2001      	movs	r0, #1
1000a74c:	4b2a      	ldr	r3, [pc, #168]	; (1000a7f8 <sms_button_fn+0x168>)
1000a74e:	4798      	blx	r3
        ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
1000a750:	2000      	movs	r0, #0
            timer1_current_mode = TIMER1_MODE_STARTUP;
            timer2_current_mode = TIMER2_MODE_NONE;
            sms_btn_cnt = 0;
            //ulp_ready = false;
            sms_dualtimer_start(TIMER_UNIT_MS, SMS_BTN_STARTUP_MS, DUALTIMER_TIMER1);
            break;
1000a752:	e03e      	b.n	1000a7d2 <sms_button_fn+0x142>
            case BLE_STATE_PAIRED:
            //if(pressure_device.state == PRESSURE_STATE_STDBY) {
                //DBG_LOG_DEV("[sms_button_fn]\t\tStarting sensors (B1)");
                //sms_sensors_interrupt_toggle(false, true);
            //}
            timer1_current_mode = TIMER1_MODE_NONE;
1000a754:	2300      	movs	r3, #0
1000a756:	4a25      	ldr	r2, [pc, #148]	; (1000a7ec <sms_button_fn+0x15c>)
1000a758:	7013      	strb	r3, [r2, #0]
            timer2_current_mode = TIMER2_MODE_NONE;
1000a75a:	4a25      	ldr	r2, [pc, #148]	; (1000a7f0 <sms_button_fn+0x160>)
1000a75c:	7013      	strb	r3, [r2, #0]
            //sms_ble_ind_retry = 0;
            sms_ble_send_characteristic(BLE_CHAR_BTN);
1000a75e:	2000      	movs	r0, #0
1000a760:	4b26      	ldr	r3, [pc, #152]	; (1000a7fc <sms_button_fn+0x16c>)
1000a762:	4798      	blx	r3
        ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
1000a764:	2000      	movs	r0, #0
            //}
            timer1_current_mode = TIMER1_MODE_NONE;
            timer2_current_mode = TIMER2_MODE_NONE;
            //sms_ble_ind_retry = 0;
            sms_ble_send_characteristic(BLE_CHAR_BTN);
            break;
1000a766:	e034      	b.n	1000a7d2 <sms_button_fn+0x142>
            
            case BLE_STATE_INDICATING:
            DBG_LOG_DEV("[sms_button_fn]\tStill indicating...");
1000a768:	4825      	ldr	r0, [pc, #148]	; (1000a800 <sms_button_fn+0x170>)
1000a76a:	4b26      	ldr	r3, [pc, #152]	; (1000a804 <sms_button_fn+0x174>)
1000a76c:	4798      	blx	r3
1000a76e:	4828      	ldr	r0, [pc, #160]	; (1000a810 <sms_button_fn+0x180>)
1000a770:	4b26      	ldr	r3, [pc, #152]	; (1000a80c <sms_button_fn+0x17c>)
1000a772:	4798      	blx	r3
            return -1;
1000a774:	2001      	movs	r0, #1
1000a776:	4240      	negs	r0, r0
1000a778:	e02b      	b.n	1000a7d2 <sms_button_fn+0x142>
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        break;
        
        // --- current state ---
        case BUTTON_STATE_BOTH:
        if(ble_current_state == BLE_STATE_POWEROFF) {
1000a77a:	4b1b      	ldr	r3, [pc, #108]	; (1000a7e8 <sms_button_fn+0x158>)
1000a77c:	781b      	ldrb	r3, [r3, #0]
1000a77e:	2b00      	cmp	r3, #0
1000a780:	d108      	bne.n	1000a794 <sms_button_fn+0x104>
            timer1_current_mode = TIMER1_MODE_NONE;
1000a782:	4a1a      	ldr	r2, [pc, #104]	; (1000a7ec <sms_button_fn+0x15c>)
1000a784:	7013      	strb	r3, [r2, #0]
            timer2_current_mode = TIMER2_MODE_NONE;
1000a786:	4a1a      	ldr	r2, [pc, #104]	; (1000a7f0 <sms_button_fn+0x160>)
1000a788:	7013      	strb	r3, [r2, #0]
            ulp_ready = true;
1000a78a:	2201      	movs	r2, #1
1000a78c:	4b21      	ldr	r3, [pc, #132]	; (1000a814 <sms_button_fn+0x184>)
1000a78e:	701a      	strb	r2, [r3, #0]
        ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
1000a790:	2000      	movs	r0, #0
1000a792:	e01e      	b.n	1000a7d2 <sms_button_fn+0x142>
                //pressure_device.state = PRESSURE_STATE_STDBY;
            //}
            //else {
                //pressure_device.state = PRESSURE_STATE_OFF;
            //}
            sms_sensors_interrupt_toggle(false, false);
1000a794:	2100      	movs	r1, #0
1000a796:	2000      	movs	r0, #0
1000a798:	4b1f      	ldr	r3, [pc, #124]	; (1000a818 <sms_button_fn+0x188>)
1000a79a:	4798      	blx	r3
            timer1_current_mode = TIMER1_MODE_SHUTDOWN;
1000a79c:	2202      	movs	r2, #2
1000a79e:	4b13      	ldr	r3, [pc, #76]	; (1000a7ec <sms_button_fn+0x15c>)
1000a7a0:	701a      	strb	r2, [r3, #0]
            timer2_current_mode = TIMER2_MODE_NONE;
1000a7a2:	2300      	movs	r3, #0
1000a7a4:	4a12      	ldr	r2, [pc, #72]	; (1000a7f0 <sms_button_fn+0x160>)
1000a7a6:	7013      	strb	r3, [r2, #0]
            sms_btn_cnt = 0;
1000a7a8:	4a12      	ldr	r2, [pc, #72]	; (1000a7f4 <sms_button_fn+0x164>)
1000a7aa:	7013      	strb	r3, [r2, #0]
            //ulp_ready = false;
            sms_dualtimer_start(TIMER_UNIT_MS, SMS_BTN_SHTDWN_MS, DUALTIMER_TIMER1);
1000a7ac:	2200      	movs	r2, #0
1000a7ae:	21fa      	movs	r1, #250	; 0xfa
1000a7b0:	2001      	movs	r0, #1
1000a7b2:	4b11      	ldr	r3, [pc, #68]	; (1000a7f8 <sms_button_fn+0x168>)
1000a7b4:	4798      	blx	r3
        ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
1000a7b6:	2000      	movs	r0, #0
1000a7b8:	e00b      	b.n	1000a7d2 <sms_button_fn+0x142>
        }
        break;
        
        // --- current state ---
        case BUTTON_STATE_NONE:
        ulp_ready = true;
1000a7ba:	2201      	movs	r2, #1
1000a7bc:	4b15      	ldr	r3, [pc, #84]	; (1000a814 <sms_button_fn+0x184>)
1000a7be:	701a      	strb	r2, [r3, #0]
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
1000a7c0:	2000      	movs	r0, #0
        // --- current state ---
        case BUTTON_STATE_NONE:
        ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
1000a7c2:	e006      	b.n	1000a7d2 <sms_button_fn+0x142>
    button_instance.previous_state = button_instance.current_state;
    button_instance.current_state = sms_button_get_state();
    
    if(btn == SMS_BTN_0) sms_monitor_get_states("[sms_button_fn]-0");
    else if(btn == SMS_BTN_1) sms_monitor_get_states("[sms_button_fn]-1");
    else return -1;
1000a7c4:	2001      	movs	r0, #1
1000a7c6:	4240      	negs	r0, r0
1000a7c8:	e003      	b.n	1000a7d2 <sms_button_fn+0x142>
        ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
1000a7ca:	2000      	movs	r0, #0
1000a7cc:	e001      	b.n	1000a7d2 <sms_button_fn+0x142>
            
            case BLE_STATE_DISCONNECTED:
            case BLE_STATE_ADVERTISING:
            case BLE_STATE_CONNECTED:
            default:
            return -1;
1000a7ce:	2001      	movs	r0, #1
1000a7d0:	4240      	negs	r0, r0
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
}
1000a7d2:	bd70      	pop	{r4, r5, r6, pc}
1000a7d4:	10019f58 	.word	0x10019f58
1000a7d8:	1000a645 	.word	0x1000a645
1000a7dc:	10016c3c 	.word	0x10016c3c
1000a7e0:	1000a949 	.word	0x1000a949
1000a7e4:	10016c50 	.word	0x10016c50
1000a7e8:	1001a074 	.word	0x1001a074
1000a7ec:	10019ec4 	.word	0x10019ec4
1000a7f0:	1001a07b 	.word	0x1001a07b
1000a7f4:	1001a096 	.word	0x1001a096
1000a7f8:	1000b5d5 	.word	0x1000b5d5
1000a7fc:	1000a24d 	.word	0x1000a24d
1000a800:	10016528 	.word	0x10016528
1000a804:	1001537d 	.word	0x1001537d
1000a808:	10016c64 	.word	0x10016c64
1000a80c:	1001525d 	.word	0x1001525d
1000a810:	10016c8c 	.word	0x10016c8c
1000a814:	10019f55 	.word	0x10019f55
1000a818:	1000b321 	.word	0x1000b321

1000a81c <sms_button_toggle_interrupt>:
    else return BUTTON_STATE_NONE;
}

/* En- or disable button interrupts */
void sms_button_toggle_interrupt(enum sms_btn_int_tog tog0, enum sms_btn_int_tog tog1)
{
1000a81c:	b510      	push	{r4, lr}
1000a81e:	000c      	movs	r4, r1
    if(tog0 == SMS_BTN_INT_ENABLE) {
1000a820:	2800      	cmp	r0, #0
1000a822:	d104      	bne.n	1000a82e <sms_button_toggle_interrupt+0x12>
        gpio_enable_callback(button_instance.btn0.gpio_pin);
1000a824:	4b0c      	ldr	r3, [pc, #48]	; (1000a858 <sms_button_toggle_interrupt+0x3c>)
1000a826:	7858      	ldrb	r0, [r3, #1]
1000a828:	4b0c      	ldr	r3, [pc, #48]	; (1000a85c <sms_button_toggle_interrupt+0x40>)
1000a82a:	4798      	blx	r3
1000a82c:	e005      	b.n	1000a83a <sms_button_toggle_interrupt+0x1e>
    }
    else if(tog0 == SMS_BTN_INT_DISABLE) {
1000a82e:	2801      	cmp	r0, #1
1000a830:	d103      	bne.n	1000a83a <sms_button_toggle_interrupt+0x1e>
        gpio_disable_callback(button_instance.btn0.gpio_pin);
1000a832:	4b09      	ldr	r3, [pc, #36]	; (1000a858 <sms_button_toggle_interrupt+0x3c>)
1000a834:	7858      	ldrb	r0, [r3, #1]
1000a836:	4b0a      	ldr	r3, [pc, #40]	; (1000a860 <sms_button_toggle_interrupt+0x44>)
1000a838:	4798      	blx	r3
    }
    
    if(tog1 == SMS_BTN_INT_ENABLE) {
1000a83a:	2c00      	cmp	r4, #0
1000a83c:	d104      	bne.n	1000a848 <sms_button_toggle_interrupt+0x2c>
        gpio_enable_callback(button_instance.btn1.gpio_pin);
1000a83e:	4b06      	ldr	r3, [pc, #24]	; (1000a858 <sms_button_toggle_interrupt+0x3c>)
1000a840:	79d8      	ldrb	r0, [r3, #7]
1000a842:	4b06      	ldr	r3, [pc, #24]	; (1000a85c <sms_button_toggle_interrupt+0x40>)
1000a844:	4798      	blx	r3
1000a846:	e005      	b.n	1000a854 <sms_button_toggle_interrupt+0x38>
    }
    else if(tog1 == SMS_BTN_INT_DISABLE) {
1000a848:	2c01      	cmp	r4, #1
1000a84a:	d103      	bne.n	1000a854 <sms_button_toggle_interrupt+0x38>
        gpio_disable_callback(button_instance.btn1.gpio_pin);
1000a84c:	4b02      	ldr	r3, [pc, #8]	; (1000a858 <sms_button_toggle_interrupt+0x3c>)
1000a84e:	79d8      	ldrb	r0, [r3, #7]
1000a850:	4b03      	ldr	r3, [pc, #12]	; (1000a860 <sms_button_toggle_interrupt+0x44>)
1000a852:	4798      	blx	r3
    }
}
1000a854:	bd10      	pop	{r4, pc}
1000a856:	46c0      	nop			; (mov r8, r8)
1000a858:	10019f58 	.word	0x10019f58
1000a85c:	1000c595 	.word	0x1000c595
1000a860:	1000c5f1 	.word	0x1000c5f1

1000a864 <sms_button_define_services>:
    send_plf_int_msg_ind(button_instance.btn1.gpio_pin, GPIO_CALLBACK_RISING, NULL, 0);
}

/* Define BLE service for buttons */
void sms_button_define_services(void)
{
1000a864:	b510      	push	{r4, lr}
1000a866:	b082      	sub	sp, #8
    at_ble_status_t status;
    uint8_t init_value = 0;
1000a868:	466b      	mov	r3, sp
1000a86a:	1dda      	adds	r2, r3, #7
1000a86c:	2300      	movs	r3, #0
1000a86e:	7013      	strb	r3, [r2, #0]
    sms_ble_service_init(BLE_SERV_BUTTON, &button_instance.service_handler, &init_value);
1000a870:	4c0d      	ldr	r4, [pc, #52]	; (1000a8a8 <sms_button_define_services+0x44>)
1000a872:	0021      	movs	r1, r4
1000a874:	2000      	movs	r0, #0
1000a876:	4b0d      	ldr	r3, [pc, #52]	; (1000a8ac <sms_button_define_services+0x48>)
1000a878:	4798      	blx	r3
    if((status = sms_ble_primary_service_define(&button_instance.service_handler)) != AT_BLE_SUCCESS) {
1000a87a:	0020      	movs	r0, r4
1000a87c:	4b0c      	ldr	r3, [pc, #48]	; (1000a8b0 <sms_button_define_services+0x4c>)
1000a87e:	4798      	blx	r3
1000a880:	1e04      	subs	r4, r0, #0
1000a882:	d007      	beq.n	1000a894 <sms_button_define_services+0x30>
        DBG_LOG("[sms_button_define_services]\tServices defining failed, reason 0x%x", status);
1000a884:	480b      	ldr	r0, [pc, #44]	; (1000a8b4 <sms_button_define_services+0x50>)
1000a886:	4b0c      	ldr	r3, [pc, #48]	; (1000a8b8 <sms_button_define_services+0x54>)
1000a888:	4798      	blx	r3
1000a88a:	0021      	movs	r1, r4
1000a88c:	480b      	ldr	r0, [pc, #44]	; (1000a8bc <sms_button_define_services+0x58>)
1000a88e:	4b0c      	ldr	r3, [pc, #48]	; (1000a8c0 <sms_button_define_services+0x5c>)
1000a890:	4798      	blx	r3
1000a892:	e007      	b.n	1000a8a4 <sms_button_define_services+0x40>
    }
    else {
        DBG_LOG_DEV("[sms_button_define_services]\tServices defined, SMS button handle: %d", button_instance.service_handler.serv_handle);
1000a894:	4807      	ldr	r0, [pc, #28]	; (1000a8b4 <sms_button_define_services+0x50>)
1000a896:	4b08      	ldr	r3, [pc, #32]	; (1000a8b8 <sms_button_define_services+0x54>)
1000a898:	4798      	blx	r3
1000a89a:	4b0a      	ldr	r3, [pc, #40]	; (1000a8c4 <sms_button_define_services+0x60>)
1000a89c:	8c59      	ldrh	r1, [r3, #34]	; 0x22
1000a89e:	480a      	ldr	r0, [pc, #40]	; (1000a8c8 <sms_button_define_services+0x64>)
1000a8a0:	4b07      	ldr	r3, [pc, #28]	; (1000a8c0 <sms_button_define_services+0x5c>)
1000a8a2:	4798      	blx	r3
    }
1000a8a4:	b002      	add	sp, #8
1000a8a6:	bd10      	pop	{r4, pc}
1000a8a8:	10019f68 	.word	0x10019f68
1000a8ac:	1000a445 	.word	0x1000a445
1000a8b0:	1000a421 	.word	0x1000a421
1000a8b4:	10016528 	.word	0x10016528
1000a8b8:	1001537d 	.word	0x1001537d
1000a8bc:	10016cb0 	.word	0x10016cb0
1000a8c0:	1001525d 	.word	0x1001525d
1000a8c4:	10019f58 	.word	0x10019f58
1000a8c8:	10016cf4 	.word	0x10016cf4

1000a8cc <sms_monitor_configure_gpio>:

#include "sms_common.h"

/* General functions */
void sms_monitor_configure_gpio(void)
{
1000a8cc:	b510      	push	{r4, lr}
1000a8ce:	b082      	sub	sp, #8
    struct gpio_config config_gpio_pin;
    gpio_get_config_defaults(&config_gpio_pin);
1000a8d0:	ac01      	add	r4, sp, #4
1000a8d2:	0020      	movs	r0, r4
1000a8d4:	4b15      	ldr	r3, [pc, #84]	; (1000a92c <sms_monitor_configure_gpio+0x60>)
1000a8d6:	4798      	blx	r3
    config_gpio_pin.direction  = GPIO_PIN_DIR_OUTPUT;
1000a8d8:	2301      	movs	r3, #1
1000a8da:	7023      	strb	r3, [r4, #0]
    if(gpio_pin_set_config(DBG_PIN_1, &config_gpio_pin) != STATUS_OK) {
1000a8dc:	0021      	movs	r1, r4
1000a8de:	200e      	movs	r0, #14
1000a8e0:	4b13      	ldr	r3, [pc, #76]	; (1000a930 <sms_monitor_configure_gpio+0x64>)
1000a8e2:	4798      	blx	r3
1000a8e4:	2800      	cmp	r0, #0
1000a8e6:	d005      	beq.n	1000a8f4 <sms_monitor_configure_gpio+0x28>
        DBG_LOG("Problem while setting gpio pin");
1000a8e8:	4812      	ldr	r0, [pc, #72]	; (1000a934 <sms_monitor_configure_gpio+0x68>)
1000a8ea:	4b13      	ldr	r3, [pc, #76]	; (1000a938 <sms_monitor_configure_gpio+0x6c>)
1000a8ec:	4798      	blx	r3
1000a8ee:	4813      	ldr	r0, [pc, #76]	; (1000a93c <sms_monitor_configure_gpio+0x70>)
1000a8f0:	4b13      	ldr	r3, [pc, #76]	; (1000a940 <sms_monitor_configure_gpio+0x74>)
1000a8f2:	4798      	blx	r3
    }
    gpio_pin_set_output_level(DBG_PIN_1, DBG_PIN_LOW);
1000a8f4:	2100      	movs	r1, #0
1000a8f6:	200e      	movs	r0, #14
1000a8f8:	4b12      	ldr	r3, [pc, #72]	; (1000a944 <sms_monitor_configure_gpio+0x78>)
1000a8fa:	4798      	blx	r3
	
	gpio_get_config_defaults(&config_gpio_pin);
1000a8fc:	ac01      	add	r4, sp, #4
1000a8fe:	0020      	movs	r0, r4
1000a900:	4b0a      	ldr	r3, [pc, #40]	; (1000a92c <sms_monitor_configure_gpio+0x60>)
1000a902:	4798      	blx	r3
	config_gpio_pin.direction = GPIO_PIN_DIR_OUTPUT;
1000a904:	2301      	movs	r3, #1
1000a906:	7023      	strb	r3, [r4, #0]
	if(gpio_pin_set_config(DBG_PIN_2, &config_gpio_pin) != STATUS_OK) {
1000a908:	0021      	movs	r1, r4
1000a90a:	200f      	movs	r0, #15
1000a90c:	4b08      	ldr	r3, [pc, #32]	; (1000a930 <sms_monitor_configure_gpio+0x64>)
1000a90e:	4798      	blx	r3
1000a910:	2800      	cmp	r0, #0
1000a912:	d005      	beq.n	1000a920 <sms_monitor_configure_gpio+0x54>
		DBG_LOG("Problem while setting gpio pin");
1000a914:	4807      	ldr	r0, [pc, #28]	; (1000a934 <sms_monitor_configure_gpio+0x68>)
1000a916:	4b08      	ldr	r3, [pc, #32]	; (1000a938 <sms_monitor_configure_gpio+0x6c>)
1000a918:	4798      	blx	r3
1000a91a:	4808      	ldr	r0, [pc, #32]	; (1000a93c <sms_monitor_configure_gpio+0x70>)
1000a91c:	4b08      	ldr	r3, [pc, #32]	; (1000a940 <sms_monitor_configure_gpio+0x74>)
1000a91e:	4798      	blx	r3
	}
	gpio_pin_set_output_level(DBG_PIN_2, DBG_PIN_LOW);
1000a920:	2100      	movs	r1, #0
1000a922:	200f      	movs	r0, #15
1000a924:	4b07      	ldr	r3, [pc, #28]	; (1000a944 <sms_monitor_configure_gpio+0x78>)
1000a926:	4798      	blx	r3
}
1000a928:	b002      	add	sp, #8
1000a92a:	bd10      	pop	{r4, pc}
1000a92c:	1000c085 	.word	0x1000c085
1000a930:	1000c095 	.word	0x1000c095
1000a934:	10016528 	.word	0x10016528
1000a938:	1001537d 	.word	0x1001537d
1000a93c:	10016d3c 	.word	0x10016d3c
1000a940:	1001525d 	.word	0x1001525d
1000a944:	1000c2ed 	.word	0x1000c2ed

1000a948 <sms_monitor_get_states>:

void sms_monitor_get_states(const char *label)
{
1000a948:	b570      	push	{r4, r5, r6, lr}
1000a94a:	b084      	sub	sp, #16
1000a94c:	0004      	movs	r4, r0
    DBG_LOG_DEV("%s...\t\tB-prev %d, B-cur %d, BLE 0x%02x, T1 %d, T2 %d, SMS %d", label, button_instance.previous_state, button_instance.current_state, ble_current_state, timer1_current_mode, timer2_current_mode, sms_working_mode);
1000a94e:	480c      	ldr	r0, [pc, #48]	; (1000a980 <sms_monitor_get_states+0x38>)
1000a950:	4b0c      	ldr	r3, [pc, #48]	; (1000a984 <sms_monitor_get_states+0x3c>)
1000a952:	4798      	blx	r3
1000a954:	4b0c      	ldr	r3, [pc, #48]	; (1000a988 <sms_monitor_get_states+0x40>)
1000a956:	7819      	ldrb	r1, [r3, #0]
1000a958:	4b0c      	ldr	r3, [pc, #48]	; (1000a98c <sms_monitor_get_states+0x44>)
1000a95a:	7818      	ldrb	r0, [r3, #0]
1000a95c:	4b0c      	ldr	r3, [pc, #48]	; (1000a990 <sms_monitor_get_states+0x48>)
1000a95e:	781d      	ldrb	r5, [r3, #0]
1000a960:	4b0c      	ldr	r3, [pc, #48]	; (1000a994 <sms_monitor_get_states+0x4c>)
1000a962:	781e      	ldrb	r6, [r3, #0]
1000a964:	4a0c      	ldr	r2, [pc, #48]	; (1000a998 <sms_monitor_get_states+0x50>)
1000a966:	7b53      	ldrb	r3, [r2, #13]
1000a968:	7b12      	ldrb	r2, [r2, #12]
1000a96a:	9603      	str	r6, [sp, #12]
1000a96c:	9502      	str	r5, [sp, #8]
1000a96e:	9001      	str	r0, [sp, #4]
1000a970:	9100      	str	r1, [sp, #0]
1000a972:	0021      	movs	r1, r4
1000a974:	4809      	ldr	r0, [pc, #36]	; (1000a99c <sms_monitor_get_states+0x54>)
1000a976:	4c0a      	ldr	r4, [pc, #40]	; (1000a9a0 <sms_monitor_get_states+0x58>)
1000a978:	47a0      	blx	r4
}
1000a97a:	b004      	add	sp, #16
1000a97c:	bd70      	pop	{r4, r5, r6, pc}
1000a97e:	46c0      	nop			; (mov r8, r8)
1000a980:	10016528 	.word	0x10016528
1000a984:	1001537d 	.word	0x1001537d
1000a988:	1001a074 	.word	0x1001a074
1000a98c:	10019ec4 	.word	0x10019ec4
1000a990:	1001a07b 	.word	0x1001a07b
1000a994:	10019f54 	.word	0x10019f54
1000a998:	10019f58 	.word	0x10019f58
1000a99c:	10016d5c 	.word	0x10016d5c
1000a9a0:	1001525d 	.word	0x1001525d

1000a9a4 <sms_i2c_master_configure>:
#include <stdlib.h>
#include "sms_i2c.h"


void sms_i2c_master_configure(void)
{
1000a9a4:	b530      	push	{r4, r5, lr}
1000a9a6:	b087      	sub	sp, #28
    i2c_wpacket.data = malloc(I2C_DATA_LENGTH * sizeof(uint8_t));
1000a9a8:	2010      	movs	r0, #16
1000a9aa:	4c14      	ldr	r4, [pc, #80]	; (1000a9fc <sms_i2c_master_configure+0x58>)
1000a9ac:	47a0      	blx	r4
1000a9ae:	4b14      	ldr	r3, [pc, #80]	; (1000aa00 <sms_i2c_master_configure+0x5c>)
1000a9b0:	6058      	str	r0, [r3, #4]
    i2c_rpacket.data = malloc(I2C_DATA_LENGTH * sizeof(uint8_t));
1000a9b2:	2010      	movs	r0, #16
1000a9b4:	47a0      	blx	r4
1000a9b6:	4b13      	ldr	r3, [pc, #76]	; (1000aa04 <sms_i2c_master_configure+0x60>)
1000a9b8:	6058      	str	r0, [r3, #4]

    struct i2c_master_config config_i2c_master;
    i2c_master_get_config_defaults(&config_i2c_master);
1000a9ba:	ac01      	add	r4, sp, #4
1000a9bc:	0020      	movs	r0, r4
1000a9be:	4b12      	ldr	r3, [pc, #72]	; (1000aa08 <sms_i2c_master_configure+0x64>)
1000a9c0:	4798      	blx	r3
    config_i2c_master.clock_source = SMS_I2C_MASTER_CLK_SRC;
1000a9c2:	2300      	movs	r3, #0
1000a9c4:	7023      	strb	r3, [r4, #0]
    config_i2c_master.clock_divider = SMS_I2C_MASTER_CLK_DIV;
1000a9c6:	3341      	adds	r3, #65	; 0x41
1000a9c8:	8063      	strh	r3, [r4, #2]
    config_i2c_master.pin_number_pad0 = SMS_I2C_MASTER_PIN_SDA;
1000a9ca:	3b39      	subs	r3, #57	; 0x39
1000a9cc:	6063      	str	r3, [r4, #4]
    config_i2c_master.pin_number_pad1 = SMS_I2C_MASTER_PIN_SCL;
1000a9ce:	3301      	adds	r3, #1
1000a9d0:	60e3      	str	r3, [r4, #12]
    config_i2c_master.pinmux_sel_pad0 = SMS_I2C_MASTER_MUX_SDA;
1000a9d2:	3b07      	subs	r3, #7
1000a9d4:	60a3      	str	r3, [r4, #8]
    config_i2c_master.pinmux_sel_pad1 = SMS_I2C_MASTER_MUX_SCL;
1000a9d6:	6123      	str	r3, [r4, #16]
    while(i2c_master_init(&i2c_master_instance, SMS_I2C_MASTER_PORT, &config_i2c_master) != STATUS_OK);
1000a9d8:	4d0c      	ldr	r5, [pc, #48]	; (1000aa0c <sms_i2c_master_configure+0x68>)
1000a9da:	4c0d      	ldr	r4, [pc, #52]	; (1000aa10 <sms_i2c_master_configure+0x6c>)
1000a9dc:	aa01      	add	r2, sp, #4
1000a9de:	490d      	ldr	r1, [pc, #52]	; (1000aa14 <sms_i2c_master_configure+0x70>)
1000a9e0:	0028      	movs	r0, r5
1000a9e2:	47a0      	blx	r4
1000a9e4:	2800      	cmp	r0, #0
1000a9e6:	d1f9      	bne.n	1000a9dc <sms_i2c_master_configure+0x38>

    i2c_enable(i2c_master_instance.hw);
1000a9e8:	4b08      	ldr	r3, [pc, #32]	; (1000aa0c <sms_i2c_master_configure+0x68>)
1000a9ea:	681a      	ldr	r2, [r3, #0]
 *
 * \param[in]  i2c_module  Pointer to software module structure
 */
static inline void i2c_wait_for_idle(I2c *const i2c_module)
{
	while (i2c_module->I2C_STATUS.bit.I2C_ACTIVE) {
1000a9ec:	2128      	movs	r1, #40	; 0x28
1000a9ee:	5c53      	ldrb	r3, [r2, r1]
1000a9f0:	07db      	lsls	r3, r3, #31
1000a9f2:	d4fc      	bmi.n	1000a9ee <sms_i2c_master_configure+0x4a>
static inline void i2c_enable(I2c *const i2c_module)
{
	/* Wait for module to sync. */
	i2c_wait_for_idle(i2c_module);
	/* Enable module. */
	i2c_module->I2C_MODULE_ENABLE.reg = (1 << I2C_MODULE_ENABLE_ENABLE_Pos);
1000a9f4:	2301      	movs	r3, #1
1000a9f6:	7513      	strb	r3, [r2, #20]
}
1000a9f8:	b007      	add	sp, #28
1000a9fa:	bd30      	pop	{r4, r5, pc}
1000a9fc:	100150d1 	.word	0x100150d1
1000aa00:	1001a080 	.word	0x1001a080
1000aa04:	1001a060 	.word	0x1001a060
1000aa08:	1000839d 	.word	0x1000839d
1000aa0c:	1001a06c 	.word	0x1001a06c
1000aa10:	100083b5 	.word	0x100083b5
1000aa14:	40003000 	.word	0x40003000

1000aa18 <sms_i2c_master_write>:

int sms_i2c_master_write(uint8_t slave_addr, uint8_t reg_addr, uint8_t data_len, uint8_t const *data)
{
1000aa18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    //DBG_LOG_DEV("i2c writing to 0x%02x at 0x%02x... data: ", slave_addr, reg_addr);
    uint16_t timeout = 0;
    i2c_wpacket.address = (uint8_t)slave_addr;
1000aa1a:	4c12      	ldr	r4, [pc, #72]	; (1000aa64 <sms_i2c_master_write+0x4c>)
1000aa1c:	8020      	strh	r0, [r4, #0]
    i2c_wpacket.data_length = (uint8_t)(data_len + 1);
1000aa1e:	1c50      	adds	r0, r2, #1
1000aa20:	b2c0      	uxtb	r0, r0
1000aa22:	8060      	strh	r0, [r4, #2]
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
1000aa24:	6860      	ldr	r0, [r4, #4]
1000aa26:	7001      	strb	r1, [r0, #0]
    for(uint8_t i = 0; i < data_len; i++) {
1000aa28:	2a00      	cmp	r2, #0
1000aa2a:	d00e      	beq.n	1000aa4a <sms_i2c_master_write+0x32>
1000aa2c:	2000      	movs	r0, #0
1000aa2e:	1c41      	adds	r1, r0, #1
        i2c_wpacket.data[i+1] = (uint8_t)data[i];
1000aa30:	5c18      	ldrb	r0, [r3, r0]
1000aa32:	6865      	ldr	r5, [r4, #4]
1000aa34:	5468      	strb	r0, [r5, r1]
1000aa36:	0008      	movs	r0, r1
    //DBG_LOG_DEV("i2c writing to 0x%02x at 0x%02x... data: ", slave_addr, reg_addr);
    uint16_t timeout = 0;
    i2c_wpacket.address = (uint8_t)slave_addr;
    i2c_wpacket.data_length = (uint8_t)(data_len + 1);
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
    for(uint8_t i = 0; i < data_len; i++) {
1000aa38:	b2c9      	uxtb	r1, r1
1000aa3a:	428a      	cmp	r2, r1
1000aa3c:	d8f7      	bhi.n	1000aa2e <sms_i2c_master_write+0x16>
1000aa3e:	e004      	b.n	1000aa4a <sms_i2c_master_write+0x32>
1000aa40:	3c01      	subs	r4, #1
1000aa42:	b2a4      	uxth	r4, r4
        i2c_wpacket.data[i+1] = (uint8_t)data[i];
        //DBG_LOG_CONT_DEV("0x%02x ", i2c_wpacket.data[i+1]);
    }
    while (i2c_master_write_packet_wait(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) {
        /* Increment timeout counter and check if timed out. */
        if (timeout++ >= I2C_TIMEOUT) {
1000aa44:	2c00      	cmp	r4, #0
1000aa46:	d104      	bne.n	1000aa52 <sms_i2c_master_write+0x3a>
1000aa48:	e009      	b.n	1000aa5e <sms_i2c_master_write+0x46>
    //DBG_LOG_DEV("i2c writing to 0x%02x at 0x%02x... data: ", slave_addr, reg_addr);
    uint16_t timeout = 0;
    i2c_wpacket.address = (uint8_t)slave_addr;
    i2c_wpacket.data_length = (uint8_t)(data_len + 1);
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
    for(uint8_t i = 0; i < data_len; i++) {
1000aa4a:	4c07      	ldr	r4, [pc, #28]	; (1000aa68 <sms_i2c_master_write+0x50>)
        i2c_wpacket.data[i+1] = (uint8_t)data[i];
        //DBG_LOG_CONT_DEV("0x%02x ", i2c_wpacket.data[i+1]);
    }
    while (i2c_master_write_packet_wait(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) {
1000aa4c:	4e05      	ldr	r6, [pc, #20]	; (1000aa64 <sms_i2c_master_write+0x4c>)
1000aa4e:	4d07      	ldr	r5, [pc, #28]	; (1000aa6c <sms_i2c_master_write+0x54>)
1000aa50:	4f07      	ldr	r7, [pc, #28]	; (1000aa70 <sms_i2c_master_write+0x58>)
1000aa52:	0031      	movs	r1, r6
1000aa54:	0028      	movs	r0, r5
1000aa56:	47b8      	blx	r7
1000aa58:	2800      	cmp	r0, #0
1000aa5a:	d1f1      	bne.n	1000aa40 <sms_i2c_master_write+0x28>
1000aa5c:	e001      	b.n	1000aa62 <sms_i2c_master_write+0x4a>
        /* Increment timeout counter and check if timed out. */
        if (timeout++ >= I2C_TIMEOUT) {
            return -1;
1000aa5e:	2001      	movs	r0, #1
1000aa60:	4240      	negs	r0, r0
        }
    }
    return 0;
}
1000aa62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000aa64:	1001a080 	.word	0x1001a080
1000aa68:	000003e9 	.word	0x000003e9
1000aa6c:	1001a06c 	.word	0x1001a06c
1000aa70:	1000844d 	.word	0x1000844d

1000aa74 <sms_i2c_master_read>:

int sms_i2c_master_read(uint8_t slave_addr, uint8_t reg_addr, uint8_t data_len, uint8_t *data)
{
1000aa74:	b5f0      	push	{r4, r5, r6, r7, lr}
1000aa76:	4647      	mov	r7, r8
1000aa78:	b480      	push	{r7}
1000aa7a:	0017      	movs	r7, r2
1000aa7c:	4698      	mov	r8, r3
    //DBG_LOG("i2c reading from 0x%02x at 0x%02x... data: ", slave_addr, reg_addr);
    uint16_t timeout;
    i2c_wpacket.address = (uint8_t)slave_addr;
1000aa7e:	b280      	uxth	r0, r0
1000aa80:	4b24      	ldr	r3, [pc, #144]	; (1000ab14 <sms_i2c_master_read+0xa0>)
1000aa82:	8018      	strh	r0, [r3, #0]
    i2c_wpacket.data_length = 1;
1000aa84:	2201      	movs	r2, #1
1000aa86:	805a      	strh	r2, [r3, #2]
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
1000aa88:	685b      	ldr	r3, [r3, #4]
1000aa8a:	7019      	strb	r1, [r3, #0]
    i2c_rpacket.address = (uint8_t)slave_addr;
1000aa8c:	4b22      	ldr	r3, [pc, #136]	; (1000ab18 <sms_i2c_master_read+0xa4>)
1000aa8e:	8018      	strh	r0, [r3, #0]
    i2c_rpacket.data_length = (uint8_t)data_len;
1000aa90:	805f      	strh	r7, [r3, #2]
    
    timeout = 0;
    while(i2c_master_write_packet_wait_no_stop(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) {
1000aa92:	2400      	movs	r4, #0
1000aa94:	4e1f      	ldr	r6, [pc, #124]	; (1000ab14 <sms_i2c_master_read+0xa0>)
1000aa96:	4d21      	ldr	r5, [pc, #132]	; (1000ab1c <sms_i2c_master_read+0xa8>)
1000aa98:	e00a      	b.n	1000aab0 <sms_i2c_master_read+0x3c>
		DBG_LOG_DEV("t/o %d", timeout);
1000aa9a:	4821      	ldr	r0, [pc, #132]	; (1000ab20 <sms_i2c_master_read+0xac>)
1000aa9c:	4b21      	ldr	r3, [pc, #132]	; (1000ab24 <sms_i2c_master_read+0xb0>)
1000aa9e:	4798      	blx	r3
1000aaa0:	0021      	movs	r1, r4
1000aaa2:	4821      	ldr	r0, [pc, #132]	; (1000ab28 <sms_i2c_master_read+0xb4>)
1000aaa4:	4b21      	ldr	r3, [pc, #132]	; (1000ab2c <sms_i2c_master_read+0xb8>)
1000aaa6:	4798      	blx	r3
1000aaa8:	3401      	adds	r4, #1
        if(timeout++ >= I2C_TIMEOUT) {
1000aaaa:	4b21      	ldr	r3, [pc, #132]	; (1000ab30 <sms_i2c_master_read+0xbc>)
1000aaac:	429c      	cmp	r4, r3
1000aaae:	d026      	beq.n	1000aafe <sms_i2c_master_read+0x8a>
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
    i2c_rpacket.address = (uint8_t)slave_addr;
    i2c_rpacket.data_length = (uint8_t)data_len;
    
    timeout = 0;
    while(i2c_master_write_packet_wait_no_stop(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) {
1000aab0:	0031      	movs	r1, r6
1000aab2:	4820      	ldr	r0, [pc, #128]	; (1000ab34 <sms_i2c_master_read+0xc0>)
1000aab4:	47a8      	blx	r5
1000aab6:	2800      	cmp	r0, #0
1000aab8:	d1ef      	bne.n	1000aa9a <sms_i2c_master_read+0x26>
1000aaba:	2400      	movs	r4, #0
            return -1;
        }
    }
    
    timeout = 0;
    while(i2c_master_read_packet_wait(&i2c_master_instance, &i2c_rpacket) != STATUS_OK) {
1000aabc:	4e16      	ldr	r6, [pc, #88]	; (1000ab18 <sms_i2c_master_read+0xa4>)
1000aabe:	4d1e      	ldr	r5, [pc, #120]	; (1000ab38 <sms_i2c_master_read+0xc4>)
1000aac0:	e00a      	b.n	1000aad8 <sms_i2c_master_read+0x64>
		DBG_LOG_DEV("t/o %d", timeout);
1000aac2:	4817      	ldr	r0, [pc, #92]	; (1000ab20 <sms_i2c_master_read+0xac>)
1000aac4:	4b17      	ldr	r3, [pc, #92]	; (1000ab24 <sms_i2c_master_read+0xb0>)
1000aac6:	4798      	blx	r3
1000aac8:	0021      	movs	r1, r4
1000aaca:	4817      	ldr	r0, [pc, #92]	; (1000ab28 <sms_i2c_master_read+0xb4>)
1000aacc:	4b17      	ldr	r3, [pc, #92]	; (1000ab2c <sms_i2c_master_read+0xb8>)
1000aace:	4798      	blx	r3
1000aad0:	3401      	adds	r4, #1
        if(timeout++ >= I2C_TIMEOUT) {
1000aad2:	4b17      	ldr	r3, [pc, #92]	; (1000ab30 <sms_i2c_master_read+0xbc>)
1000aad4:	429c      	cmp	r4, r3
1000aad6:	d015      	beq.n	1000ab04 <sms_i2c_master_read+0x90>
            return -1;
        }
    }
    
    timeout = 0;
    while(i2c_master_read_packet_wait(&i2c_master_instance, &i2c_rpacket) != STATUS_OK) {
1000aad8:	0031      	movs	r1, r6
1000aada:	4816      	ldr	r0, [pc, #88]	; (1000ab34 <sms_i2c_master_read+0xc0>)
1000aadc:	47a8      	blx	r5
1000aade:	2800      	cmp	r0, #0
1000aae0:	d1ef      	bne.n	1000aac2 <sms_i2c_master_read+0x4e>
		DBG_LOG_DEV("t/o %d", timeout);
        if(timeout++ >= I2C_TIMEOUT) {
            return -1;
        }
    }
    for(uint8_t i = 0; i < data_len; i++) {
1000aae2:	2f00      	cmp	r7, #0
1000aae4:	d011      	beq.n	1000ab0a <sms_i2c_master_read+0x96>
1000aae6:	2300      	movs	r3, #0
        data[i] = i2c_rpacket.data[i];
1000aae8:	490b      	ldr	r1, [pc, #44]	; (1000ab18 <sms_i2c_master_read+0xa4>)
1000aaea:	684a      	ldr	r2, [r1, #4]
1000aaec:	5cd2      	ldrb	r2, [r2, r3]
1000aaee:	4640      	mov	r0, r8
1000aaf0:	54c2      	strb	r2, [r0, r3]
1000aaf2:	3301      	adds	r3, #1
		DBG_LOG_DEV("t/o %d", timeout);
        if(timeout++ >= I2C_TIMEOUT) {
            return -1;
        }
    }
    for(uint8_t i = 0; i < data_len; i++) {
1000aaf4:	b2da      	uxtb	r2, r3
1000aaf6:	4297      	cmp	r7, r2
1000aaf8:	d8f7      	bhi.n	1000aaea <sms_i2c_master_read+0x76>
        data[i] = i2c_rpacket.data[i];
        //DBG_LOG("0x%02x ", data[i]);
    }
    return 0;
1000aafa:	2000      	movs	r0, #0
1000aafc:	e006      	b.n	1000ab0c <sms_i2c_master_read+0x98>
    
    timeout = 0;
    while(i2c_master_write_packet_wait_no_stop(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) {
		DBG_LOG_DEV("t/o %d", timeout);
        if(timeout++ >= I2C_TIMEOUT) {
            return -1;
1000aafe:	2001      	movs	r0, #1
1000ab00:	4240      	negs	r0, r0
1000ab02:	e003      	b.n	1000ab0c <sms_i2c_master_read+0x98>
    
    timeout = 0;
    while(i2c_master_read_packet_wait(&i2c_master_instance, &i2c_rpacket) != STATUS_OK) {
		DBG_LOG_DEV("t/o %d", timeout);
        if(timeout++ >= I2C_TIMEOUT) {
            return -1;
1000ab04:	2001      	movs	r0, #1
1000ab06:	4240      	negs	r0, r0
1000ab08:	e000      	b.n	1000ab0c <sms_i2c_master_read+0x98>
    }
    for(uint8_t i = 0; i < data_len; i++) {
        data[i] = i2c_rpacket.data[i];
        //DBG_LOG("0x%02x ", data[i]);
    }
    return 0;
1000ab0a:	2000      	movs	r0, #0
1000ab0c:	bc04      	pop	{r2}
1000ab0e:	4690      	mov	r8, r2
1000ab10:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000ab12:	46c0      	nop			; (mov r8, r8)
1000ab14:	1001a080 	.word	0x1001a080
1000ab18:	1001a060 	.word	0x1001a060
1000ab1c:	10008471 	.word	0x10008471
1000ab20:	10016528 	.word	0x10016528
1000ab24:	1001537d 	.word	0x1001537d
1000ab28:	10016d9c 	.word	0x10016d9c
1000ab2c:	1001525d 	.word	0x1001525d
1000ab30:	000003e9 	.word	0x000003e9
1000ab34:	1001a06c 	.word	0x1001a06c
1000ab38:	10008429 	.word	0x10008429

1000ab3c <sms_mpu_interrupt_callback>:
	mpu_device.int_enabled = false;
}

/* Callback --> send interrupt message to platform */
void sms_mpu_interrupt_callback(void)
{
1000ab3c:	b510      	push	{r4, lr}
	if(mpu_device.int_enabled) {
1000ab3e:	2328      	movs	r3, #40	; 0x28
1000ab40:	4a06      	ldr	r2, [pc, #24]	; (1000ab5c <sms_mpu_interrupt_callback+0x20>)
1000ab42:	5cd3      	ldrb	r3, [r2, r3]
1000ab44:	2b00      	cmp	r3, #0
1000ab46:	d008      	beq.n	1000ab5a <sms_mpu_interrupt_callback+0x1e>
		mpu_device.new_int = true;
1000ab48:	2101      	movs	r1, #1
1000ab4a:	2329      	movs	r3, #41	; 0x29
1000ab4c:	54d1      	strb	r1, [r2, r3]
		send_plf_int_msg_ind(SMS_MPU_DRDY_PIN, GPIO_CALLBACK_RISING, NULL, 0);
1000ab4e:	2300      	movs	r3, #0
1000ab50:	2200      	movs	r2, #0
1000ab52:	3101      	adds	r1, #1
1000ab54:	201e      	movs	r0, #30
1000ab56:	4c02      	ldr	r4, [pc, #8]	; (1000ab60 <sms_mpu_interrupt_callback+0x24>)
1000ab58:	47a0      	blx	r4
	}
}
1000ab5a:	bd10      	pop	{r4, pc}
1000ab5c:	10019ec8 	.word	0x10019ec8
1000ab60:	1000f349 	.word	0x1000f349

1000ab64 <sms_mpu_configure_gpio>:
#include "sms_peripheral1.h"

//static struct hal_s hal = {0};
    
void sms_mpu_configure_gpio(void)
{
1000ab64:	b510      	push	{r4, lr}
1000ab66:	b082      	sub	sp, #8
    struct gpio_config config_gpio_pin;

    /* Data ready interrupt from IMU */
    gpio_get_config_defaults(&config_gpio_pin);
1000ab68:	ac01      	add	r4, sp, #4
1000ab6a:	0020      	movs	r0, r4
1000ab6c:	4b15      	ldr	r3, [pc, #84]	; (1000abc4 <sms_mpu_configure_gpio+0x60>)
1000ab6e:	4798      	blx	r3
    config_gpio_pin.direction = GPIO_PIN_DIR_INPUT;
1000ab70:	2300      	movs	r3, #0
1000ab72:	7023      	strb	r3, [r4, #0]
    config_gpio_pin.input_pull = GPIO_PIN_PULL_DOWN;
1000ab74:	3302      	adds	r3, #2
1000ab76:	7063      	strb	r3, [r4, #1]
    config_gpio_pin.aon_wakeup = true;
1000ab78:	3b01      	subs	r3, #1
1000ab7a:	70e3      	strb	r3, [r4, #3]
    if(gpio_pin_set_config(SMS_MPU_DRDY_PIN, &config_gpio_pin) != STATUS_OK) {
1000ab7c:	0021      	movs	r1, r4
1000ab7e:	201e      	movs	r0, #30
1000ab80:	4b11      	ldr	r3, [pc, #68]	; (1000abc8 <sms_mpu_configure_gpio+0x64>)
1000ab82:	4798      	blx	r3
1000ab84:	2800      	cmp	r0, #0
1000ab86:	d005      	beq.n	1000ab94 <sms_mpu_configure_gpio+0x30>
        DBG_LOG("[sms_imu_configure_gpio]\tProblem while setting up IMU DRDY pin");
1000ab88:	4810      	ldr	r0, [pc, #64]	; (1000abcc <sms_mpu_configure_gpio+0x68>)
1000ab8a:	4b11      	ldr	r3, [pc, #68]	; (1000abd0 <sms_mpu_configure_gpio+0x6c>)
1000ab8c:	4798      	blx	r3
1000ab8e:	4811      	ldr	r0, [pc, #68]	; (1000abd4 <sms_mpu_configure_gpio+0x70>)
1000ab90:	4b11      	ldr	r3, [pc, #68]	; (1000abd8 <sms_mpu_configure_gpio+0x74>)
1000ab92:	4798      	blx	r3
    }

    /* Pin output to supply IMU */
    gpio_get_config_defaults(&config_gpio_pin);
1000ab94:	ac01      	add	r4, sp, #4
1000ab96:	0020      	movs	r0, r4
1000ab98:	4b0a      	ldr	r3, [pc, #40]	; (1000abc4 <sms_mpu_configure_gpio+0x60>)
1000ab9a:	4798      	blx	r3
    config_gpio_pin.direction = GPIO_PIN_DIR_OUTPUT;
1000ab9c:	2301      	movs	r3, #1
1000ab9e:	7023      	strb	r3, [r4, #0]
    if(!gpio_pin_set_config(SMS_MPU_VCC_PIN, &config_gpio_pin) != STATUS_OK) {
1000aba0:	0021      	movs	r1, r4
1000aba2:	2006      	movs	r0, #6
1000aba4:	4b08      	ldr	r3, [pc, #32]	; (1000abc8 <sms_mpu_configure_gpio+0x64>)
1000aba6:	4798      	blx	r3
1000aba8:	2800      	cmp	r0, #0
1000abaa:	d105      	bne.n	1000abb8 <sms_mpu_configure_gpio+0x54>
        DBG_LOG("[sms_imu_configure_gpio]\tProblem while setting up MPU VCC pin");
1000abac:	4807      	ldr	r0, [pc, #28]	; (1000abcc <sms_mpu_configure_gpio+0x68>)
1000abae:	4b08      	ldr	r3, [pc, #32]	; (1000abd0 <sms_mpu_configure_gpio+0x6c>)
1000abb0:	4798      	blx	r3
1000abb2:	480a      	ldr	r0, [pc, #40]	; (1000abdc <sms_mpu_configure_gpio+0x78>)
1000abb4:	4b08      	ldr	r3, [pc, #32]	; (1000abd8 <sms_mpu_configure_gpio+0x74>)
1000abb6:	4798      	blx	r3
    }
    gpio_pin_set_output_level(SMS_MPU_VCC_PIN, true);
1000abb8:	2101      	movs	r1, #1
1000abba:	2006      	movs	r0, #6
1000abbc:	4b08      	ldr	r3, [pc, #32]	; (1000abe0 <sms_mpu_configure_gpio+0x7c>)
1000abbe:	4798      	blx	r3
}
1000abc0:	b002      	add	sp, #8
1000abc2:	bd10      	pop	{r4, pc}
1000abc4:	1000c085 	.word	0x1000c085
1000abc8:	1000c095 	.word	0x1000c095
1000abcc:	10016528 	.word	0x10016528
1000abd0:	1001537d 	.word	0x1001537d
1000abd4:	10016da4 	.word	0x10016da4
1000abd8:	1001525d 	.word	0x1001525d
1000abdc:	10016de4 	.word	0x10016de4
1000abe0:	1000c2ed 	.word	0x1000c2ed

1000abe4 <sms_mpu_register_callbacks>:

/* Register GPIO interrupt callback */
void sms_mpu_register_callbacks(void)
{
1000abe4:	b510      	push	{r4, lr}
    /* MPU-9250 interrupt callback */
    gpio_register_callback(SMS_MPU_DRDY_PIN, sms_mpu_interrupt_callback, GPIO_CALLBACK_RISING);
1000abe6:	2202      	movs	r2, #2
1000abe8:	4902      	ldr	r1, [pc, #8]	; (1000abf4 <sms_mpu_register_callbacks+0x10>)
1000abea:	201e      	movs	r0, #30
1000abec:	4b02      	ldr	r3, [pc, #8]	; (1000abf8 <sms_mpu_register_callbacks+0x14>)
1000abee:	4798      	blx	r3
}
1000abf0:	bd10      	pop	{r4, pc}
1000abf2:	46c0      	nop			; (mov r8, r8)
1000abf4:	1000ab3d 	.word	0x1000ab3d
1000abf8:	1000c4c5 	.word	0x1000c4c5

1000abfc <sms_mpu_initialize>:
		mpu_device.new_int = true;
		send_plf_int_msg_ind(SMS_MPU_DRDY_PIN, GPIO_CALLBACK_RISING, NULL, 0);
	}
}

int sms_mpu_initialize(void) {
1000abfc:	b570      	push	{r4, r5, r6, lr}
    int res;
    //unsigned char accel_fsr = 0;
    //unsigned short gyro_rate, gyro_fsr, compass_fsr;
    
    /* Initialize MPU-9250 without interrupt parameter since this has to be set independently */
    DBG_LOG_DEV("Initializing MPU...");
1000abfe:	4829      	ldr	r0, [pc, #164]	; (1000aca4 <sms_mpu_initialize+0xa8>)
1000ac00:	4b29      	ldr	r3, [pc, #164]	; (1000aca8 <sms_mpu_initialize+0xac>)
1000ac02:	4798      	blx	r3
1000ac04:	4829      	ldr	r0, [pc, #164]	; (1000acac <sms_mpu_initialize+0xb0>)
1000ac06:	4b2a      	ldr	r3, [pc, #168]	; (1000acb0 <sms_mpu_initialize+0xb4>)
1000ac08:	4798      	blx	r3
    res = mpu_init(NULL);
1000ac0a:	2000      	movs	r0, #0
1000ac0c:	4b29      	ldr	r3, [pc, #164]	; (1000acb4 <sms_mpu_initialize+0xb8>)
1000ac0e:	4798      	blx	r3
    if(res) {
1000ac10:	2800      	cmp	r0, #0
1000ac12:	d005      	beq.n	1000ac20 <sms_mpu_initialize+0x24>
        DBG_LOG_CONT_DEV(" failed!");
1000ac14:	4828      	ldr	r0, [pc, #160]	; (1000acb8 <sms_mpu_initialize+0xbc>)
1000ac16:	4b26      	ldr	r3, [pc, #152]	; (1000acb0 <sms_mpu_initialize+0xb4>)
1000ac18:	4798      	blx	r3
        return -1;
1000ac1a:	2001      	movs	r0, #1
1000ac1c:	4240      	negs	r0, r0
1000ac1e:	e03f      	b.n	1000aca0 <sms_mpu_initialize+0xa4>
    }
    DBG_LOG_DEV("Setting up MPU...");
1000ac20:	4820      	ldr	r0, [pc, #128]	; (1000aca4 <sms_mpu_initialize+0xa8>)
1000ac22:	4b21      	ldr	r3, [pc, #132]	; (1000aca8 <sms_mpu_initialize+0xac>)
1000ac24:	4798      	blx	r3
1000ac26:	4825      	ldr	r0, [pc, #148]	; (1000acbc <sms_mpu_initialize+0xc0>)
1000ac28:	4b21      	ldr	r3, [pc, #132]	; (1000acb0 <sms_mpu_initialize+0xb4>)
1000ac2a:	4798      	blx	r3
    mpu_set_sensors(INV_XYZ_GYRO | INV_XYZ_ACCEL | INV_XYZ_COMPASS);
1000ac2c:	2079      	movs	r0, #121	; 0x79
1000ac2e:	4b24      	ldr	r3, [pc, #144]	; (1000acc0 <sms_mpu_initialize+0xc4>)
1000ac30:	4798      	blx	r3
    mpu_configure_fifo(INV_XYZ_GYRO | INV_XYZ_ACCEL);
1000ac32:	2078      	movs	r0, #120	; 0x78
1000ac34:	4b23      	ldr	r3, [pc, #140]	; (1000acc4 <sms_mpu_initialize+0xc8>)
1000ac36:	4798      	blx	r3
    mpu_set_sample_rate(SMS_MPU_SAMPLE_RATE_HZ);
1000ac38:	2032      	movs	r0, #50	; 0x32
1000ac3a:	4b23      	ldr	r3, [pc, #140]	; (1000acc8 <sms_mpu_initialize+0xcc>)
1000ac3c:	4798      	blx	r3
    mpu_set_compass_sample_rate(SMS_MPU_COMPASS_RATE_HZ);
1000ac3e:	2032      	movs	r0, #50	; 0x32
1000ac40:	4b22      	ldr	r3, [pc, #136]	; (1000accc <sms_mpu_initialize+0xd0>)
1000ac42:	4798      	blx	r3
    mpu_get_sample_rate(&mpu_device.hal.sample_rate);
1000ac44:	4d22      	ldr	r5, [pc, #136]	; (1000acd0 <sms_mpu_initialize+0xd4>)
1000ac46:	0028      	movs	r0, r5
1000ac48:	4b22      	ldr	r3, [pc, #136]	; (1000acd4 <sms_mpu_initialize+0xd8>)
1000ac4a:	4798      	blx	r3
    mpu_get_accel_fsr(&mpu_device.hal.accel_fsr);
1000ac4c:	1f68      	subs	r0, r5, #5
1000ac4e:	4b22      	ldr	r3, [pc, #136]	; (1000acd8 <sms_mpu_initialize+0xdc>)
1000ac50:	4798      	blx	r3
    mpu_get_compass_fsr(&mpu_device.hal.compass_fsr);
1000ac52:	1ea8      	subs	r0, r5, #2
1000ac54:	4b21      	ldr	r3, [pc, #132]	; (1000acdc <sms_mpu_initialize+0xe0>)
1000ac56:	4798      	blx	r3
    
    mpu_device.hal.sensors = (SMS_MPU_ACCEL_ON | SMS_MPU_GYRO_ON | SMS_MPU_COMPASS_ON);
1000ac58:	1fac      	subs	r4, r5, #6
1000ac5a:	2307      	movs	r3, #7
1000ac5c:	76eb      	strb	r3, [r5, #27]
    mpu_device.hal.dmp_features = (DMP_FEATURE_GYRO_CAL | DMP_FEATURE_SEND_RAW_ACCEL | DMP_FEATURE_SEND_ANY_GYRO);
1000ac5e:	20f0      	movs	r0, #240	; 0xf0
1000ac60:	0040      	lsls	r0, r0, #1
1000ac62:	83e8      	strh	r0, [r5, #30]
    dmp_enable_feature(mpu_device.hal.dmp_features);
1000ac64:	4b1e      	ldr	r3, [pc, #120]	; (1000ace0 <sms_mpu_initialize+0xe4>)
1000ac66:	4798      	blx	r3
    dmp_set_fifo_rate(SMS_MPU_SAMPLE_RATE_HZ);
1000ac68:	2032      	movs	r0, #50	; 0x32
1000ac6a:	4b1e      	ldr	r3, [pc, #120]	; (1000ace4 <sms_mpu_initialize+0xe8>)
1000ac6c:	4798      	blx	r3
    mpu_set_dmp_state(1);
1000ac6e:	2001      	movs	r0, #1
1000ac70:	4b1d      	ldr	r3, [pc, #116]	; (1000ace8 <sms_mpu_initialize+0xec>)
1000ac72:	4798      	blx	r3
    mpu_device.hal.dmp_on = 1;
1000ac74:	2301      	movs	r3, #1
1000ac76:	2222      	movs	r2, #34	; 0x22
1000ac78:	54a3      	strb	r3, [r4, r2]
	mpu_device.int_enabled = true;
1000ac7a:	3206      	adds	r2, #6
1000ac7c:	54a3      	strb	r3, [r4, r2]
	mpu_device.new_int = false;
1000ac7e:	2300      	movs	r3, #0
1000ac80:	3201      	adds	r2, #1
1000ac82:	54a3      	strb	r3, [r4, r2]
    mpu_device.compass_cnt = 0;
1000ac84:	3201      	adds	r2, #1
1000ac86:	54a3      	strb	r3, [r4, r2]
    mpu_device.temp_cnt = 0;
1000ac88:	3201      	adds	r2, #1
1000ac8a:	54a3      	strb	r3, [r4, r2]
    mpu_device.new_compass = false;
1000ac8c:	3201      	adds	r2, #1
1000ac8e:	54a3      	strb	r3, [r4, r2]
    mpu_device.new_temp = false;
1000ac90:	3201      	adds	r2, #1
1000ac92:	54a3      	strb	r3, [r4, r2]
	mpu_device.rts = false;
1000ac94:	3201      	adds	r2, #1
1000ac96:	54a3      	strb	r3, [r4, r2]
	mpu_device.state = MPU_STATE_ON;
1000ac98:	3a2c      	subs	r2, #44	; 0x2c
1000ac9a:	332f      	adds	r3, #47	; 0x2f
1000ac9c:	54e2      	strb	r2, [r4, r3]
    
    return 0;
1000ac9e:	2000      	movs	r0, #0
}
1000aca0:	bd70      	pop	{r4, r5, r6, pc}
1000aca2:	46c0      	nop			; (mov r8, r8)
1000aca4:	10016528 	.word	0x10016528
1000aca8:	1001537d 	.word	0x1001537d
1000acac:	10016e24 	.word	0x10016e24
1000acb0:	1001525d 	.word	0x1001525d
1000acb4:	100092e5 	.word	0x100092e5
1000acb8:	10016e38 	.word	0x10016e38
1000acbc:	10016e44 	.word	0x10016e44
1000acc0:	100090fd 	.word	0x100090fd
1000acc4:	10008ab9 	.word	0x10008ab9
1000acc8:	10009029 	.word	0x10009029
1000accc:	10008a41 	.word	0x10008a41
1000acd0:	10019ece 	.word	0x10019ece
1000acd4:	10008a25 	.word	0x10008a25
1000acd8:	10008889 	.word	0x10008889
1000acdc:	100097ed 	.word	0x100097ed
1000ace0:	10009c5d 	.word	0x10009c5d
1000ace4:	100097fd 	.word	0x100097fd
1000ace8:	1000968d 	.word	0x1000968d

1000acec <sms_mpu_poll_data>:

/* Extract available IMU data */
int sms_mpu_poll_data(void)
{
1000acec:	b530      	push	{r4, r5, lr}
1000acee:	b085      	sub	sp, #20
    unsigned char sensors;
    unsigned char more;
    unsigned long sensor_timestamp;
    int res;
    
    mpu_device.hal.new_data = 0;
1000acf0:	4c20      	ldr	r4, [pc, #128]	; (1000ad74 <sms_mpu_poll_data+0x88>)
1000acf2:	2200      	movs	r2, #0
1000acf4:	2320      	movs	r3, #32
1000acf6:	54e2      	strb	r2, [r4, r3]
    
    mpu_read_fifo(mpu_device.hal.gyro, mpu_device.hal.accel, &sensor_timestamp, &sensors, &more);
1000acf8:	0021      	movs	r1, r4
1000acfa:	310e      	adds	r1, #14
1000acfc:	0020      	movs	r0, r4
1000acfe:	3008      	adds	r0, #8
1000ad00:	3b12      	subs	r3, #18
1000ad02:	446b      	add	r3, sp
1000ad04:	9300      	str	r3, [sp, #0]
1000ad06:	230f      	movs	r3, #15
1000ad08:	446b      	add	r3, sp
1000ad0a:	aa02      	add	r2, sp, #8
1000ad0c:	4d1a      	ldr	r5, [pc, #104]	; (1000ad78 <sms_mpu_poll_data+0x8c>)
1000ad0e:	47a8      	blx	r5
    
    //if(more) {
        //mpu_device.hal.new_data = 1;
    //}
    
    if(mpu_device.temp_cnt++ > SMS_MPU_TEMP_MULTIPLIER) {
1000ad10:	232b      	movs	r3, #43	; 0x2b
1000ad12:	5ce3      	ldrb	r3, [r4, r3]
1000ad14:	2b01      	cmp	r3, #1
1000ad16:	d804      	bhi.n	1000ad22 <sms_mpu_poll_data+0x36>
1000ad18:	3301      	adds	r3, #1
1000ad1a:	222b      	movs	r2, #43	; 0x2b
1000ad1c:	4915      	ldr	r1, [pc, #84]	; (1000ad74 <sms_mpu_poll_data+0x88>)
1000ad1e:	548b      	strb	r3, [r1, r2]
1000ad20:	e00b      	b.n	1000ad3a <sms_mpu_poll_data+0x4e>
        mpu_device.temp_cnt = 0;
1000ad22:	4c14      	ldr	r4, [pc, #80]	; (1000ad74 <sms_mpu_poll_data+0x88>)
1000ad24:	2200      	movs	r2, #0
1000ad26:	232b      	movs	r3, #43	; 0x2b
1000ad28:	54e2      	strb	r2, [r4, r3]
        mpu_get_temperature(&mpu_device.hal.temperature, &sensor_timestamp);
1000ad2a:	0020      	movs	r0, r4
1000ad2c:	301c      	adds	r0, #28
1000ad2e:	a902      	add	r1, sp, #8
1000ad30:	4b12      	ldr	r3, [pc, #72]	; (1000ad7c <sms_mpu_poll_data+0x90>)
1000ad32:	4798      	blx	r3
        mpu_device.new_temp = true;
1000ad34:	2201      	movs	r2, #1
1000ad36:	232d      	movs	r3, #45	; 0x2d
1000ad38:	54e2      	strb	r2, [r4, r3]
    }
    
    if(mpu_device.compass_cnt++ > SMS_MPU_COMPASS_MULTIPLIER) {
1000ad3a:	232a      	movs	r3, #42	; 0x2a
1000ad3c:	4a0d      	ldr	r2, [pc, #52]	; (1000ad74 <sms_mpu_poll_data+0x88>)
1000ad3e:	5cd3      	ldrb	r3, [r2, r3]
1000ad40:	2b01      	cmp	r3, #1
1000ad42:	d804      	bhi.n	1000ad4e <sms_mpu_poll_data+0x62>
1000ad44:	3301      	adds	r3, #1
1000ad46:	222a      	movs	r2, #42	; 0x2a
1000ad48:	490a      	ldr	r1, [pc, #40]	; (1000ad74 <sms_mpu_poll_data+0x88>)
1000ad4a:	548b      	strb	r3, [r1, r2]
1000ad4c:	e00b      	b.n	1000ad66 <sms_mpu_poll_data+0x7a>
        mpu_device.compass_cnt = 0;
1000ad4e:	4c09      	ldr	r4, [pc, #36]	; (1000ad74 <sms_mpu_poll_data+0x88>)
1000ad50:	2200      	movs	r2, #0
1000ad52:	232a      	movs	r3, #42	; 0x2a
1000ad54:	54e2      	strb	r2, [r4, r3]
        mpu_get_compass_reg(mpu_device.hal.compass, &sensor_timestamp);
1000ad56:	0020      	movs	r0, r4
1000ad58:	3014      	adds	r0, #20
1000ad5a:	a902      	add	r1, sp, #8
1000ad5c:	4b08      	ldr	r3, [pc, #32]	; (1000ad80 <sms_mpu_poll_data+0x94>)
1000ad5e:	4798      	blx	r3
        mpu_device.new_compass = true;
1000ad60:	2201      	movs	r2, #1
1000ad62:	232c      	movs	r3, #44	; 0x2c
1000ad64:	54e2      	strb	r2, [r4, r3]
    }
	
	mpu_device.rts = true;
1000ad66:	2101      	movs	r1, #1
1000ad68:	232e      	movs	r3, #46	; 0x2e
1000ad6a:	4a02      	ldr	r2, [pc, #8]	; (1000ad74 <sms_mpu_poll_data+0x88>)
1000ad6c:	54d1      	strb	r1, [r2, r3]

    return 0;
}
1000ad6e:	2000      	movs	r0, #0
1000ad70:	b005      	add	sp, #20
1000ad72:	bd30      	pop	{r4, r5, pc}
1000ad74:	10019ec8 	.word	0x10019ec8
1000ad78:	10008b25 	.word	0x10008b25
1000ad7c:	10008539 	.word	0x10008539
1000ad80:	10009731 	.word	0x10009731

1000ad84 <sms_mpu_define_services>:

void sms_mpu_define_services(void)
{
1000ad84:	b510      	push	{r4, lr}
1000ad86:	b082      	sub	sp, #8
    at_ble_status_t status;
    uint8_t init_value = 0;
1000ad88:	466b      	mov	r3, sp
1000ad8a:	1dda      	adds	r2, r3, #7
1000ad8c:	2300      	movs	r3, #0
1000ad8e:	7013      	strb	r3, [r2, #0]
    sms_ble_service_init(BLE_SERV_MPU, &mpu_device.service_handler, &init_value);
1000ad90:	4c0e      	ldr	r4, [pc, #56]	; (1000adcc <sms_mpu_define_services+0x48>)
1000ad92:	0021      	movs	r1, r4
1000ad94:	2002      	movs	r0, #2
1000ad96:	4b0e      	ldr	r3, [pc, #56]	; (1000add0 <sms_mpu_define_services+0x4c>)
1000ad98:	4798      	blx	r3
    if((status = sms_ble_primary_service_define(&mpu_device.service_handler)) != AT_BLE_SUCCESS) {
1000ad9a:	0020      	movs	r0, r4
1000ad9c:	4b0d      	ldr	r3, [pc, #52]	; (1000add4 <sms_mpu_define_services+0x50>)
1000ad9e:	4798      	blx	r3
1000ada0:	1e04      	subs	r4, r0, #0
1000ada2:	d007      	beq.n	1000adb4 <sms_mpu_define_services+0x30>
        DBG_LOG("[sms_mpu_define_services]\tServices defining failed, reason 0x%x", status);
1000ada4:	480c      	ldr	r0, [pc, #48]	; (1000add8 <sms_mpu_define_services+0x54>)
1000ada6:	4b0d      	ldr	r3, [pc, #52]	; (1000addc <sms_mpu_define_services+0x58>)
1000ada8:	4798      	blx	r3
1000adaa:	0021      	movs	r1, r4
1000adac:	480c      	ldr	r0, [pc, #48]	; (1000ade0 <sms_mpu_define_services+0x5c>)
1000adae:	4b0d      	ldr	r3, [pc, #52]	; (1000ade4 <sms_mpu_define_services+0x60>)
1000adb0:	4798      	blx	r3
1000adb2:	e008      	b.n	1000adc6 <sms_mpu_define_services+0x42>
    }
    else {
        DBG_LOG_DEV("[sms_mpu_define_services]\tServices defined, SMS MPU handle: %d", mpu_device.service_handler.serv_handle);
1000adb4:	4808      	ldr	r0, [pc, #32]	; (1000add8 <sms_mpu_define_services+0x54>)
1000adb6:	4b09      	ldr	r3, [pc, #36]	; (1000addc <sms_mpu_define_services+0x58>)
1000adb8:	4798      	blx	r3
1000adba:	2342      	movs	r3, #66	; 0x42
1000adbc:	4a0a      	ldr	r2, [pc, #40]	; (1000ade8 <sms_mpu_define_services+0x64>)
1000adbe:	5ad1      	ldrh	r1, [r2, r3]
1000adc0:	480a      	ldr	r0, [pc, #40]	; (1000adec <sms_mpu_define_services+0x68>)
1000adc2:	4b08      	ldr	r3, [pc, #32]	; (1000ade4 <sms_mpu_define_services+0x60>)
1000adc4:	4798      	blx	r3
    }
1000adc6:	b002      	add	sp, #8
1000adc8:	bd10      	pop	{r4, pc}
1000adca:	46c0      	nop			; (mov r8, r8)
1000adcc:	10019ef8 	.word	0x10019ef8
1000add0:	1000a445 	.word	0x1000a445
1000add4:	1000a421 	.word	0x1000a421
1000add8:	10016528 	.word	0x10016528
1000addc:	1001537d 	.word	0x1001537d
1000ade0:	10016e58 	.word	0x10016e58
1000ade4:	1001525d 	.word	0x1001525d
1000ade8:	10019ec8 	.word	0x10019ec8
1000adec:	10016e98 	.word	0x10016e98

1000adf0 <sms_led_switch_on>:
    sms_led_switch_off(SMS_LED_0_PIN);
}


void sms_led_switch_on(enum sms_leds led)
{
1000adf0:	b510      	push	{r4, lr}
    gpio_pin_set_output_level(led, SMS_LED_ACTIVE);
1000adf2:	2100      	movs	r1, #0
1000adf4:	4b01      	ldr	r3, [pc, #4]	; (1000adfc <sms_led_switch_on+0xc>)
1000adf6:	4798      	blx	r3
}
1000adf8:	bd10      	pop	{r4, pc}
1000adfa:	46c0      	nop			; (mov r8, r8)
1000adfc:	1000c2ed 	.word	0x1000c2ed

1000ae00 <sms_led_switch_off>:


void sms_led_switch_off(enum sms_leds led)
{
1000ae00:	b510      	push	{r4, lr}
    gpio_pin_set_output_level(led, SMS_LED_INACTIVE);
1000ae02:	2101      	movs	r1, #1
1000ae04:	4b01      	ldr	r3, [pc, #4]	; (1000ae0c <sms_led_switch_off+0xc>)
1000ae06:	4798      	blx	r3
}
1000ae08:	bd10      	pop	{r4, pc}
1000ae0a:	46c0      	nop			; (mov r8, r8)
1000ae0c:	1000c2ed 	.word	0x1000c2ed

1000ae10 <sms_led_gpio_init>:
 */ 

#include "sms_led.h"

void sms_led_gpio_init(void)
{
1000ae10:	b510      	push	{r4, lr}
1000ae12:	b082      	sub	sp, #8
    struct gpio_config config_gpio_pin;

    /* LED0 @ GPIO_LP_GPIO_22 */
    gpio_get_config_defaults(&config_gpio_pin);
1000ae14:	ac01      	add	r4, sp, #4
1000ae16:	0020      	movs	r0, r4
1000ae18:	4b0a      	ldr	r3, [pc, #40]	; (1000ae44 <sms_led_gpio_init+0x34>)
1000ae1a:	4798      	blx	r3
    config_gpio_pin.direction = GPIO_PIN_DIR_OUTPUT;
1000ae1c:	2301      	movs	r3, #1
1000ae1e:	7023      	strb	r3, [r4, #0]
    if(gpio_pin_set_config(SMS_LED_0_PIN, &config_gpio_pin) != STATUS_OK) {
1000ae20:	0021      	movs	r1, r4
1000ae22:	2016      	movs	r0, #22
1000ae24:	4b08      	ldr	r3, [pc, #32]	; (1000ae48 <sms_led_gpio_init+0x38>)
1000ae26:	4798      	blx	r3
1000ae28:	2800      	cmp	r0, #0
1000ae2a:	d005      	beq.n	1000ae38 <sms_led_gpio_init+0x28>
        DBG_LOG_DEV("[sms_led_gpio_init]\tproblem while setting up led0");
1000ae2c:	4807      	ldr	r0, [pc, #28]	; (1000ae4c <sms_led_gpio_init+0x3c>)
1000ae2e:	4b08      	ldr	r3, [pc, #32]	; (1000ae50 <sms_led_gpio_init+0x40>)
1000ae30:	4798      	blx	r3
1000ae32:	4808      	ldr	r0, [pc, #32]	; (1000ae54 <sms_led_gpio_init+0x44>)
1000ae34:	4b08      	ldr	r3, [pc, #32]	; (1000ae58 <sms_led_gpio_init+0x48>)
1000ae36:	4798      	blx	r3
    }
    sms_led_switch_off(SMS_LED_0_PIN);
1000ae38:	2016      	movs	r0, #22
1000ae3a:	4b08      	ldr	r3, [pc, #32]	; (1000ae5c <sms_led_gpio_init+0x4c>)
1000ae3c:	4798      	blx	r3
}
1000ae3e:	b002      	add	sp, #8
1000ae40:	bd10      	pop	{r4, pc}
1000ae42:	46c0      	nop			; (mov r8, r8)
1000ae44:	1000c085 	.word	0x1000c085
1000ae48:	1000c095 	.word	0x1000c095
1000ae4c:	10016528 	.word	0x10016528
1000ae50:	1001537d 	.word	0x1001537d
1000ae54:	10016ed8 	.word	0x10016ed8
1000ae58:	1001525d 	.word	0x1001525d
1000ae5c:	1000ae01 	.word	0x1000ae01

1000ae60 <sms_led_toggle>:
    gpio_pin_set_output_level(led, SMS_LED_INACTIVE);
}


void sms_led_toggle(enum sms_leds led)
{
1000ae60:	b510      	push	{r4, lr}
1000ae62:	0004      	movs	r4, r0
}


bool sms_led_get_state(enum sms_leds led)
{
    return gpio_pin_get_output_level(led);
1000ae64:	4b05      	ldr	r3, [pc, #20]	; (1000ae7c <sms_led_toggle+0x1c>)
1000ae66:	4798      	blx	r3


void sms_led_toggle(enum sms_leds led)
{
    bool state = sms_led_get_state(led);
    if(state == SMS_LED_ACTIVE) sms_led_switch_off(led);
1000ae68:	2800      	cmp	r0, #0
1000ae6a:	d103      	bne.n	1000ae74 <sms_led_toggle+0x14>
1000ae6c:	0020      	movs	r0, r4
1000ae6e:	4b04      	ldr	r3, [pc, #16]	; (1000ae80 <sms_led_toggle+0x20>)
1000ae70:	4798      	blx	r3
1000ae72:	e002      	b.n	1000ae7a <sms_led_toggle+0x1a>
    else sms_led_switch_on(led);
1000ae74:	0020      	movs	r0, r4
1000ae76:	4b03      	ldr	r3, [pc, #12]	; (1000ae84 <sms_led_toggle+0x24>)
1000ae78:	4798      	blx	r3
}
1000ae7a:	bd10      	pop	{r4, pc}
1000ae7c:	1000c29d 	.word	0x1000c29d
1000ae80:	1000ae01 	.word	0x1000ae01
1000ae84:	1000adf1 	.word	0x1000adf1

1000ae88 <sms_led_blink_start>:
    return gpio_pin_get_output_level(led);
}


void sms_led_blink_start(enum sms_leds led)
{
1000ae88:	b510      	push	{r4, lr}
    sms_led_switch_on(led);
1000ae8a:	4b0c      	ldr	r3, [pc, #48]	; (1000aebc <sms_led_blink_start+0x34>)
1000ae8c:	4798      	blx	r3
    sms_led_blink_cnt = 0;
1000ae8e:	2200      	movs	r2, #0
1000ae90:	4b0b      	ldr	r3, [pc, #44]	; (1000aec0 <sms_led_blink_start+0x38>)
1000ae92:	701a      	strb	r2, [r3, #0]
    uint32_t delay = 0;
    switch(timer2_current_mode) {
1000ae94:	4b0b      	ldr	r3, [pc, #44]	; (1000aec4 <sms_led_blink_start+0x3c>)
1000ae96:	781b      	ldrb	r3, [r3, #0]
1000ae98:	b2db      	uxtb	r3, r3
1000ae9a:	2b02      	cmp	r3, #2
1000ae9c:	d002      	beq.n	1000aea4 <sms_led_blink_start+0x1c>
1000ae9e:	2b03      	cmp	r3, #3
1000aea0:	d002      	beq.n	1000aea8 <sms_led_blink_start+0x20>
1000aea2:	e004      	b.n	1000aeae <sms_led_blink_start+0x26>
        case TIMER2_MODE_LED_STARTUP:
        delay = SMS_BLINK_STARTUP_MS;
1000aea4:	2164      	movs	r1, #100	; 0x64
1000aea6:	e003      	b.n	1000aeb0 <sms_led_blink_start+0x28>
        break;
        
        case TIMER2_MODE_LED_SHUTDOWN:
        delay = SMS_BLINK_SHTDWN_MS;
1000aea8:	21c8      	movs	r1, #200	; 0xc8
1000aeaa:	0049      	lsls	r1, r1, #1
        break;
1000aeac:	e000      	b.n	1000aeb0 <sms_led_blink_start+0x28>

void sms_led_blink_start(enum sms_leds led)
{
    sms_led_switch_on(led);
    sms_led_blink_cnt = 0;
    uint32_t delay = 0;
1000aeae:	2100      	movs	r1, #0
        
        default:
        break;
    }

    sms_dualtimer_start(TIMER_UNIT_MS, delay, DUALTIMER_TIMER2);
1000aeb0:	2201      	movs	r2, #1
1000aeb2:	2001      	movs	r0, #1
1000aeb4:	4b04      	ldr	r3, [pc, #16]	; (1000aec8 <sms_led_blink_start+0x40>)
1000aeb6:	4798      	blx	r3
}
1000aeb8:	bd10      	pop	{r4, pc}
1000aeba:	46c0      	nop			; (mov r8, r8)
1000aebc:	1000adf1 	.word	0x1000adf1
1000aec0:	1001a09c 	.word	0x1001a09c
1000aec4:	1001a07b 	.word	0x1001a07b
1000aec8:	1000b5d5 	.word	0x1000b5d5

1000aecc <sms_pressure_ms58_reset>:
    }
    return STATUS_ERR_IO;
}

void sms_pressure_ms58_reset(void)
{
1000aecc:	b510      	push	{r4, lr}
1000aece:	b082      	sub	sp, #8
    //DBG_LOG_DEV("[sms_pressure_ms58_reset]\twriting reset command");
    spi_wdata[0] = MS58_RESET;
1000aed0:	4a05      	ldr	r2, [pc, #20]	; (1000aee8 <sms_pressure_ms58_reset+0x1c>)
1000aed2:	231e      	movs	r3, #30
1000aed4:	7013      	strb	r3, [r2, #0]
    sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 1);
1000aed6:	3b1d      	subs	r3, #29
1000aed8:	9300      	str	r3, [sp, #0]
1000aeda:	4b04      	ldr	r3, [pc, #16]	; (1000aeec <sms_pressure_ms58_reset+0x20>)
1000aedc:	4904      	ldr	r1, [pc, #16]	; (1000aef0 <sms_pressure_ms58_reset+0x24>)
1000aede:	4805      	ldr	r0, [pc, #20]	; (1000aef4 <sms_pressure_ms58_reset+0x28>)
1000aee0:	4c05      	ldr	r4, [pc, #20]	; (1000aef8 <sms_pressure_ms58_reset+0x2c>)
1000aee2:	47a0      	blx	r4
}
1000aee4:	b002      	add	sp, #8
1000aee6:	bd10      	pop	{r4, pc}
1000aee8:	10019fcc 	.word	0x10019fcc
1000aeec:	10019fb8 	.word	0x10019fb8
1000aef0:	1001a07c 	.word	0x1001a07c
1000aef4:	1001a088 	.word	0x1001a088
1000aef8:	1000b4a9 	.word	0x1000b4a9

1000aefc <sms_pressure_ms58_read_prom>:

enum status_code sms_pressure_ms58_read_prom(void)
{
1000aefc:	b5f0      	push	{r4, r5, r6, r7, lr}
1000aefe:	4657      	mov	r7, sl
1000af00:	b480      	push	{r7}
1000af02:	b082      	sub	sp, #8
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] reading bytes... ");
    spi_wdata[0] = MS58_PROM_READ_1;
1000af04:	4d37      	ldr	r5, [pc, #220]	; (1000afe4 <sms_pressure_ms58_read_prom+0xe8>)
1000af06:	23a2      	movs	r3, #162	; 0xa2
1000af08:	702b      	strb	r3, [r5, #0]
    spi_wdata[1] = 0x00;
1000af0a:	2300      	movs	r3, #0
1000af0c:	706b      	strb	r3, [r5, #1]
    spi_wdata[2] = 0x00;
1000af0e:	70ab      	strb	r3, [r5, #2]
    sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3);
1000af10:	4c35      	ldr	r4, [pc, #212]	; (1000afe8 <sms_pressure_ms58_read_prom+0xec>)
1000af12:	3303      	adds	r3, #3
1000af14:	469a      	mov	sl, r3
1000af16:	9300      	str	r3, [sp, #0]
1000af18:	0023      	movs	r3, r4
1000af1a:	002a      	movs	r2, r5
1000af1c:	4933      	ldr	r1, [pc, #204]	; (1000afec <sms_pressure_ms58_read_prom+0xf0>)
1000af1e:	4834      	ldr	r0, [pc, #208]	; (1000aff0 <sms_pressure_ms58_read_prom+0xf4>)
1000af20:	4f34      	ldr	r7, [pc, #208]	; (1000aff4 <sms_pressure_ms58_read_prom+0xf8>)
1000af22:	47b8      	blx	r7
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.hal.prom_values[1] = (spi_rdata[1] << 8) | (spi_rdata[2]);
1000af24:	4e34      	ldr	r6, [pc, #208]	; (1000aff8 <sms_pressure_ms58_read_prom+0xfc>)
1000af26:	7863      	ldrb	r3, [r4, #1]
1000af28:	021b      	lsls	r3, r3, #8
1000af2a:	78a2      	ldrb	r2, [r4, #2]
1000af2c:	4313      	orrs	r3, r2
1000af2e:	80f3      	strh	r3, [r6, #6]

    spi_wdata[0] = MS58_PROM_READ_2;
1000af30:	23a4      	movs	r3, #164	; 0xa4
1000af32:	702b      	strb	r3, [r5, #0]
    sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3);
1000af34:	4653      	mov	r3, sl
1000af36:	9300      	str	r3, [sp, #0]
1000af38:	0023      	movs	r3, r4
1000af3a:	002a      	movs	r2, r5
1000af3c:	492b      	ldr	r1, [pc, #172]	; (1000afec <sms_pressure_ms58_read_prom+0xf0>)
1000af3e:	482c      	ldr	r0, [pc, #176]	; (1000aff0 <sms_pressure_ms58_read_prom+0xf4>)
1000af40:	47b8      	blx	r7
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r  wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r  wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.hal.prom_values[2] = (spi_rdata[1] << 8) | (spi_rdata[2]);
1000af42:	7863      	ldrb	r3, [r4, #1]
1000af44:	021b      	lsls	r3, r3, #8
1000af46:	78a2      	ldrb	r2, [r4, #2]
1000af48:	4313      	orrs	r3, r2
1000af4a:	8133      	strh	r3, [r6, #8]

    spi_wdata[0] = MS58_PROM_READ_3;
1000af4c:	23a6      	movs	r3, #166	; 0xa6
1000af4e:	702b      	strb	r3, [r5, #0]
    sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3);
1000af50:	4653      	mov	r3, sl
1000af52:	9300      	str	r3, [sp, #0]
1000af54:	0023      	movs	r3, r4
1000af56:	002a      	movs	r2, r5
1000af58:	4924      	ldr	r1, [pc, #144]	; (1000afec <sms_pressure_ms58_read_prom+0xf0>)
1000af5a:	4825      	ldr	r0, [pc, #148]	; (1000aff0 <sms_pressure_ms58_read_prom+0xf4>)
1000af5c:	47b8      	blx	r7
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r  wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r  wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.hal.prom_values[3] = (spi_rdata[1] << 8) | (spi_rdata[2]);
1000af5e:	7863      	ldrb	r3, [r4, #1]
1000af60:	021b      	lsls	r3, r3, #8
1000af62:	78a2      	ldrb	r2, [r4, #2]
1000af64:	4313      	orrs	r3, r2
1000af66:	8173      	strh	r3, [r6, #10]

    spi_wdata[0] = MS58_PROM_READ_4;
1000af68:	23a8      	movs	r3, #168	; 0xa8
1000af6a:	702b      	strb	r3, [r5, #0]
    sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3);
1000af6c:	4653      	mov	r3, sl
1000af6e:	9300      	str	r3, [sp, #0]
1000af70:	0023      	movs	r3, r4
1000af72:	002a      	movs	r2, r5
1000af74:	491d      	ldr	r1, [pc, #116]	; (1000afec <sms_pressure_ms58_read_prom+0xf0>)
1000af76:	481e      	ldr	r0, [pc, #120]	; (1000aff0 <sms_pressure_ms58_read_prom+0xf4>)
1000af78:	47b8      	blx	r7
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r  wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r  wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.hal.prom_values[4] = (spi_rdata[1] << 8) | (spi_rdata[2]);
1000af7a:	7863      	ldrb	r3, [r4, #1]
1000af7c:	021b      	lsls	r3, r3, #8
1000af7e:	78a2      	ldrb	r2, [r4, #2]
1000af80:	4313      	orrs	r3, r2
1000af82:	81b3      	strh	r3, [r6, #12]

    spi_wdata[0] = MS58_PROM_READ_5;
1000af84:	23aa      	movs	r3, #170	; 0xaa
1000af86:	702b      	strb	r3, [r5, #0]
    sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3);
1000af88:	4653      	mov	r3, sl
1000af8a:	9300      	str	r3, [sp, #0]
1000af8c:	0023      	movs	r3, r4
1000af8e:	002a      	movs	r2, r5
1000af90:	4916      	ldr	r1, [pc, #88]	; (1000afec <sms_pressure_ms58_read_prom+0xf0>)
1000af92:	4817      	ldr	r0, [pc, #92]	; (1000aff0 <sms_pressure_ms58_read_prom+0xf4>)
1000af94:	47b8      	blx	r7
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r  wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r  wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.hal.prom_values[5] = (spi_rdata[1] << 8) | (spi_rdata[2]);
1000af96:	7863      	ldrb	r3, [r4, #1]
1000af98:	021b      	lsls	r3, r3, #8
1000af9a:	78a2      	ldrb	r2, [r4, #2]
1000af9c:	4313      	orrs	r3, r2
1000af9e:	81f3      	strh	r3, [r6, #14]

    spi_wdata[0] = MS58_PROM_READ_6;
1000afa0:	23ac      	movs	r3, #172	; 0xac
1000afa2:	702b      	strb	r3, [r5, #0]
    sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3);
1000afa4:	4653      	mov	r3, sl
1000afa6:	9300      	str	r3, [sp, #0]
1000afa8:	0023      	movs	r3, r4
1000afaa:	002a      	movs	r2, r5
1000afac:	490f      	ldr	r1, [pc, #60]	; (1000afec <sms_pressure_ms58_read_prom+0xf0>)
1000afae:	4810      	ldr	r0, [pc, #64]	; (1000aff0 <sms_pressure_ms58_read_prom+0xf4>)
1000afb0:	47b8      	blx	r7
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r  wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r  wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.hal.prom_values[6] = (spi_rdata[1] << 8) | (spi_rdata[2]);
1000afb2:	7863      	ldrb	r3, [r4, #1]
1000afb4:	021b      	lsls	r3, r3, #8
1000afb6:	78a2      	ldrb	r2, [r4, #2]
1000afb8:	4313      	orrs	r3, r2
1000afba:	8233      	strh	r3, [r6, #16]

    spi_wdata[0] = MS58_PROM_READ_7;
1000afbc:	23ae      	movs	r3, #174	; 0xae
1000afbe:	702b      	strb	r3, [r5, #0]
    sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3);
1000afc0:	4653      	mov	r3, sl
1000afc2:	9300      	str	r3, [sp, #0]
1000afc4:	0023      	movs	r3, r4
1000afc6:	002a      	movs	r2, r5
1000afc8:	4908      	ldr	r1, [pc, #32]	; (1000afec <sms_pressure_ms58_read_prom+0xf0>)
1000afca:	4809      	ldr	r0, [pc, #36]	; (1000aff0 <sms_pressure_ms58_read_prom+0xf4>)
1000afcc:	47b8      	blx	r7
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r  wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r  wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.hal.prom_values[7] = (spi_rdata[1] << 8) | (spi_rdata[2]);
1000afce:	7863      	ldrb	r3, [r4, #1]
1000afd0:	021b      	lsls	r3, r3, #8
1000afd2:	78a2      	ldrb	r2, [r4, #2]
1000afd4:	4313      	orrs	r3, r2
1000afd6:	8273      	strh	r3, [r6, #18]
    //for(uint8_t i = 1; i < MS58_PROM_VALUES_MAX; i++) {
        //DBG_LOG_DEV("  C%d -> %d", (i+1), ms58_device.prom_values[i]);
    //}

    return STATUS_OK;
}
1000afd8:	2000      	movs	r0, #0
1000afda:	b002      	add	sp, #8
1000afdc:	bc04      	pop	{r2}
1000afde:	4692      	mov	sl, r2
1000afe0:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000afe2:	46c0      	nop			; (mov r8, r8)
1000afe4:	10019fcc 	.word	0x10019fcc
1000afe8:	10019fb8 	.word	0x10019fb8
1000afec:	1001a07c 	.word	0x1001a07c
1000aff0:	1001a088 	.word	0x1001a088
1000aff4:	1000b4a9 	.word	0x1000b4a9
1000aff8:	10019fdc 	.word	0x10019fdc

1000affc <sms_pressure_init>:
    
    ulp_ready = true;
}

enum status_code sms_pressure_init(void)
{
1000affc:	b510      	push	{r4, lr}
    /* Read the PROM values */
    if(sms_pressure_ms58_read_prom() == STATUS_OK) {
1000affe:	4b0a      	ldr	r3, [pc, #40]	; (1000b028 <sms_pressure_init+0x2c>)
1000b000:	4798      	blx	r3
1000b002:	2800      	cmp	r0, #0
1000b004:	d10d      	bne.n	1000b022 <sms_pressure_init+0x26>
        pressure_device.hal.init_ok = true;
1000b006:	4b09      	ldr	r3, [pc, #36]	; (1000b02c <sms_pressure_init+0x30>)
1000b008:	2201      	movs	r2, #1
1000b00a:	705a      	strb	r2, [r3, #1]
        pressure_device.hal.current_state = MS58_STATE_READY;
1000b00c:	2402      	movs	r4, #2
1000b00e:	2125      	movs	r1, #37	; 0x25
1000b010:	545c      	strb	r4, [r3, r1]
		pressure_device.int_enabled = true;
1000b012:	3103      	adds	r1, #3
1000b014:	545a      	strb	r2, [r3, r1]
		pressure_device.new_int = false;
1000b016:	2200      	movs	r2, #0
1000b018:	3101      	adds	r1, #1
1000b01a:	545a      	strb	r2, [r3, r1]
		pressure_device.rts = false;
1000b01c:	3101      	adds	r1, #1
1000b01e:	545a      	strb	r2, [r3, r1]
        return STATUS_OK;
1000b020:	e000      	b.n	1000b024 <sms_pressure_init+0x28>
    }
    return STATUS_ERR_IO;
1000b022:	2010      	movs	r0, #16
}
1000b024:	bd10      	pop	{r4, pc}
1000b026:	46c0      	nop			; (mov r8, r8)
1000b028:	1000aefd 	.word	0x1000aefd
1000b02c:	10019fdc 	.word	0x10019fdc

1000b030 <sms_pressure_startup>:
    gpio_pin_set_output_level(SMS_PRESSURE_VCC_PIN, false);
}


void sms_pressure_startup(void)
{
1000b030:	b510      	push	{r4, lr}
    DBG_LOG_DEV("[sms_pressure_startup]\t\tStarting pressure sensor");
1000b032:	4817      	ldr	r0, [pc, #92]	; (1000b090 <sms_pressure_startup+0x60>)
1000b034:	4b17      	ldr	r3, [pc, #92]	; (1000b094 <sms_pressure_startup+0x64>)
1000b036:	4798      	blx	r3
1000b038:	4817      	ldr	r0, [pc, #92]	; (1000b098 <sms_pressure_startup+0x68>)
1000b03a:	4b18      	ldr	r3, [pc, #96]	; (1000b09c <sms_pressure_startup+0x6c>)
1000b03c:	4798      	blx	r3
    //gpio_pin_set_output_level(SMS_PRESSURE_VCC_PIN, true); // switch on MS58 pressure sensor
    /* Disable buttons for reset time (~3 ms) to avoid conflict with dualtimer1 */
    sms_button_toggle_interrupt(SMS_BTN_INT_DISABLE, SMS_BTN_INT_DISABLE);
1000b03e:	2101      	movs	r1, #1
1000b040:	2001      	movs	r0, #1
1000b042:	4b17      	ldr	r3, [pc, #92]	; (1000b0a0 <sms_pressure_startup+0x70>)
1000b044:	4798      	blx	r3
    pressure_device.hal.current_state = MS58_STATE_RESETTING;
1000b046:	2101      	movs	r1, #1
1000b048:	2325      	movs	r3, #37	; 0x25
1000b04a:	4a16      	ldr	r2, [pc, #88]	; (1000b0a4 <sms_pressure_startup+0x74>)
1000b04c:	54d1      	strb	r1, [r2, r3]
    /* Write the reset command to MS58 */
    sms_pressure_ms58_reset();
1000b04e:	4b16      	ldr	r3, [pc, #88]	; (1000b0a8 <sms_pressure_startup+0x78>)
1000b050:	4798      	blx	r3
    delay_ms(3);
1000b052:	2003      	movs	r0, #3
1000b054:	4b15      	ldr	r3, [pc, #84]	; (1000b0ac <sms_pressure_startup+0x7c>)
1000b056:	4798      	blx	r3
    if(sms_pressure_init() != STATUS_OK) {
1000b058:	4b15      	ldr	r3, [pc, #84]	; (1000b0b0 <sms_pressure_startup+0x80>)
1000b05a:	4798      	blx	r3
1000b05c:	2800      	cmp	r0, #0
1000b05e:	d006      	beq.n	1000b06e <sms_pressure_startup+0x3e>
        DBG_LOG_DEV("[sms_pressure_startup]\t\t\tFailed to initialize pressure device");
1000b060:	480b      	ldr	r0, [pc, #44]	; (1000b090 <sms_pressure_startup+0x60>)
1000b062:	4b0c      	ldr	r3, [pc, #48]	; (1000b094 <sms_pressure_startup+0x64>)
1000b064:	4798      	blx	r3
1000b066:	4813      	ldr	r0, [pc, #76]	; (1000b0b4 <sms_pressure_startup+0x84>)
1000b068:	4b0c      	ldr	r3, [pc, #48]	; (1000b09c <sms_pressure_startup+0x6c>)
1000b06a:	4798      	blx	r3
1000b06c:	e7fe      	b.n	1000b06c <sms_pressure_startup+0x3c>
        pressure_device.hal.init_ok = false;
        while(1){};
    }
    pressure_device.hal.current_state = MS58_STATE_READY;
1000b06e:	4b0d      	ldr	r3, [pc, #52]	; (1000b0a4 <sms_pressure_startup+0x74>)
1000b070:	2102      	movs	r1, #2
1000b072:	2225      	movs	r2, #37	; 0x25
1000b074:	5499      	strb	r1, [r3, r2]
    pressure_device.hal.init_ok = true;
1000b076:	2401      	movs	r4, #1
1000b078:	705c      	strb	r4, [r3, #1]
    sms_working_mode = SMS_MODE_COMPLETE;
1000b07a:	3a1e      	subs	r2, #30
1000b07c:	4b0e      	ldr	r3, [pc, #56]	; (1000b0b8 <sms_pressure_startup+0x88>)
1000b07e:	701a      	strb	r2, [r3, #0]
    sms_sensors_interrupt_toggle(true, true);
1000b080:	3901      	subs	r1, #1
1000b082:	2001      	movs	r0, #1
1000b084:	4b0d      	ldr	r3, [pc, #52]	; (1000b0bc <sms_pressure_startup+0x8c>)
1000b086:	4798      	blx	r3
    
    ulp_ready = true;
1000b088:	4b0d      	ldr	r3, [pc, #52]	; (1000b0c0 <sms_pressure_startup+0x90>)
1000b08a:	701c      	strb	r4, [r3, #0]
}
1000b08c:	bd10      	pop	{r4, pc}
1000b08e:	46c0      	nop			; (mov r8, r8)
1000b090:	10016528 	.word	0x10016528
1000b094:	1001537d 	.word	0x1001537d
1000b098:	10016f4c 	.word	0x10016f4c
1000b09c:	1001525d 	.word	0x1001525d
1000b0a0:	1000a81d 	.word	0x1000a81d
1000b0a4:	10019fdc 	.word	0x10019fdc
1000b0a8:	1000aecd 	.word	0x1000aecd
1000b0ac:	10008129 	.word	0x10008129
1000b0b0:	1000affd 	.word	0x1000affd
1000b0b4:	10016f80 	.word	0x10016f80
1000b0b8:	10019f54 	.word	0x10019f54
1000b0bc:	1000b321 	.word	0x1000b321
1000b0c0:	10019f55 	.word	0x10019f55

1000b0c4 <sms_pressure_ms58_read_data>:
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
    }        
}

enum status_code sms_pressure_ms58_read_data(void)
{
1000b0c4:	b5f0      	push	{r4, r5, r6, r7, lr}
1000b0c6:	4657      	mov	r7, sl
1000b0c8:	464e      	mov	r6, r9
1000b0ca:	b4c0      	push	{r6, r7}
1000b0cc:	b083      	sub	sp, #12
    switch(pressure_device.hal.current_state) {
1000b0ce:	2325      	movs	r3, #37	; 0x25
1000b0d0:	4a2c      	ldr	r2, [pc, #176]	; (1000b184 <sms_pressure_ms58_read_data+0xc0>)
1000b0d2:	5cd3      	ldrb	r3, [r2, r3]
1000b0d4:	2b03      	cmp	r3, #3
1000b0d6:	d002      	beq.n	1000b0de <sms_pressure_ms58_read_data+0x1a>
1000b0d8:	2b04      	cmp	r3, #4
1000b0da:	d025      	beq.n	1000b128 <sms_pressure_ms58_read_data+0x64>
1000b0dc:	e04b      	b.n	1000b176 <sms_pressure_ms58_read_data+0xb2>
        case MS58_STATE_CONV_PRESSURE:
        //DBG_LOG_DEV("[sms_pressure_ms58_read_data] reading ADC pressure values...");
        spi_wdata[0] = MS58_ADC_READ;
1000b0de:	4c2a      	ldr	r4, [pc, #168]	; (1000b188 <sms_pressure_ms58_read_data+0xc4>)
1000b0e0:	2300      	movs	r3, #0
1000b0e2:	7023      	strb	r3, [r4, #0]
        spi_wdata[1] = MS58_ADC_READ;
1000b0e4:	7063      	strb	r3, [r4, #1]
        spi_wdata[2] = MS58_ADC_READ;
1000b0e6:	70a3      	strb	r3, [r4, #2]
        spi_wdata[3] = MS58_ADC_READ;
1000b0e8:	70e3      	strb	r3, [r4, #3]
        sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 4);
1000b0ea:	4d28      	ldr	r5, [pc, #160]	; (1000b18c <sms_pressure_ms58_read_data+0xc8>)
1000b0ec:	2704      	movs	r7, #4
1000b0ee:	9700      	str	r7, [sp, #0]
1000b0f0:	002b      	movs	r3, r5
1000b0f2:	0022      	movs	r2, r4
1000b0f4:	4926      	ldr	r1, [pc, #152]	; (1000b190 <sms_pressure_ms58_read_data+0xcc>)
1000b0f6:	4827      	ldr	r0, [pc, #156]	; (1000b194 <sms_pressure_ms58_read_data+0xd0>)
1000b0f8:	4e27      	ldr	r6, [pc, #156]	; (1000b198 <sms_pressure_ms58_read_data+0xd4>)
1000b0fa:	46b2      	mov	sl, r6
1000b0fc:	47b0      	blx	r6
        pressure_device.hal.adc_values[MS58_TYPE_PRESS] = ((spi_rdata[1] << 16) | (spi_rdata[2] << 8) | (spi_rdata[3]));
1000b0fe:	4e21      	ldr	r6, [pc, #132]	; (1000b184 <sms_pressure_ms58_read_data+0xc0>)
1000b100:	786b      	ldrb	r3, [r5, #1]
1000b102:	041a      	lsls	r2, r3, #16
1000b104:	78ab      	ldrb	r3, [r5, #2]
1000b106:	021b      	lsls	r3, r3, #8
1000b108:	4313      	orrs	r3, r2
1000b10a:	78ea      	ldrb	r2, [r5, #3]
1000b10c:	4313      	orrs	r3, r2
1000b10e:	6173      	str	r3, [r6, #20]
        //DBG_LOG_DEV("[sms_pressure_ms58_read_data] D1 -> %ld", ms58_device.adc_values[MS58_TYPE_PRESS]);
        
        //DBG_LOG_DEV("[sms_pressure_ms58_read_data] starting D2 conversion");
        spi_wdata[0] = MS58_CONV_D2_512;
1000b110:	2352      	movs	r3, #82	; 0x52
1000b112:	7023      	strb	r3, [r4, #0]
        sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 1);
1000b114:	3b51      	subs	r3, #81	; 0x51
1000b116:	9300      	str	r3, [sp, #0]
1000b118:	002b      	movs	r3, r5
1000b11a:	0022      	movs	r2, r4
1000b11c:	491c      	ldr	r1, [pc, #112]	; (1000b190 <sms_pressure_ms58_read_data+0xcc>)
1000b11e:	481d      	ldr	r0, [pc, #116]	; (1000b194 <sms_pressure_ms58_read_data+0xd0>)
1000b120:	47d0      	blx	sl
        pressure_device.hal.current_state = MS58_STATE_CONV_TEMPERATURE;
1000b122:	2325      	movs	r3, #37	; 0x25
1000b124:	54f7      	strb	r7, [r6, r3]
        break;
1000b126:	e026      	b.n	1000b176 <sms_pressure_ms58_read_data+0xb2>
        
        case MS58_STATE_CONV_TEMPERATURE:
        //DBG_LOG_DEV("[sms_pressure_ms58_read_data] reading ADC temperature values...");
        spi_wdata[0] = MS58_ADC_READ;
1000b128:	4c17      	ldr	r4, [pc, #92]	; (1000b188 <sms_pressure_ms58_read_data+0xc4>)
1000b12a:	2300      	movs	r3, #0
1000b12c:	7023      	strb	r3, [r4, #0]
        spi_wdata[1] = MS58_ADC_READ;
1000b12e:	7063      	strb	r3, [r4, #1]
        spi_wdata[2] = MS58_ADC_READ;
1000b130:	70a3      	strb	r3, [r4, #2]
        spi_wdata[3] = MS58_ADC_READ;
1000b132:	70e3      	strb	r3, [r4, #3]
        sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 4);
1000b134:	4d15      	ldr	r5, [pc, #84]	; (1000b18c <sms_pressure_ms58_read_data+0xc8>)
1000b136:	3304      	adds	r3, #4
1000b138:	9300      	str	r3, [sp, #0]
1000b13a:	002b      	movs	r3, r5
1000b13c:	0022      	movs	r2, r4
1000b13e:	4914      	ldr	r1, [pc, #80]	; (1000b190 <sms_pressure_ms58_read_data+0xcc>)
1000b140:	4814      	ldr	r0, [pc, #80]	; (1000b194 <sms_pressure_ms58_read_data+0xd0>)
1000b142:	4e15      	ldr	r6, [pc, #84]	; (1000b198 <sms_pressure_ms58_read_data+0xd4>)
1000b144:	46b1      	mov	r9, r6
1000b146:	47b0      	blx	r6
        pressure_device.hal.adc_values[MS58_TYPE_TEMP] = ((spi_rdata[1] << 16) | (spi_rdata[2] << 8) | (spi_rdata[3]));
1000b148:	4e0e      	ldr	r6, [pc, #56]	; (1000b184 <sms_pressure_ms58_read_data+0xc0>)
1000b14a:	786b      	ldrb	r3, [r5, #1]
1000b14c:	041a      	lsls	r2, r3, #16
1000b14e:	78ab      	ldrb	r3, [r5, #2]
1000b150:	021b      	lsls	r3, r3, #8
1000b152:	4313      	orrs	r3, r2
1000b154:	78ea      	ldrb	r2, [r5, #3]
1000b156:	4313      	orrs	r3, r2
1000b158:	61b3      	str	r3, [r6, #24]
        //DBG_LOG_DEV("[sms_pressure_ms58_read_data] D2 -> %ld", ms58_device.adc_values[MS58_TYPE_TEMP]);
        
        //DBG_LOG_DEV("[sms_pressure_ms58_read_data] starting D1 conversion");
        spi_wdata[0] = MS58_CONV_D1_512;
1000b15a:	2342      	movs	r3, #66	; 0x42
1000b15c:	7023      	strb	r3, [r4, #0]
        sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 1);
1000b15e:	2701      	movs	r7, #1
1000b160:	9700      	str	r7, [sp, #0]
1000b162:	002b      	movs	r3, r5
1000b164:	0022      	movs	r2, r4
1000b166:	490a      	ldr	r1, [pc, #40]	; (1000b190 <sms_pressure_ms58_read_data+0xcc>)
1000b168:	480a      	ldr	r0, [pc, #40]	; (1000b194 <sms_pressure_ms58_read_data+0xd0>)
1000b16a:	47c8      	blx	r9
        pressure_device.hal.current_state = MS58_STATE_CONV_PRESSURE;
1000b16c:	2203      	movs	r2, #3
1000b16e:	2325      	movs	r3, #37	; 0x25
1000b170:	54f2      	strb	r2, [r6, r3]
        pressure_device.hal.data_complete = true;
1000b172:	3b01      	subs	r3, #1
1000b174:	54f7      	strb	r7, [r6, r3]
        case MS58_STATE_NONE:
        default:
        break;
    }
    return STATUS_OK;
}
1000b176:	2000      	movs	r0, #0
1000b178:	b003      	add	sp, #12
1000b17a:	bc0c      	pop	{r2, r3}
1000b17c:	4691      	mov	r9, r2
1000b17e:	469a      	mov	sl, r3
1000b180:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000b182:	46c0      	nop			; (mov r8, r8)
1000b184:	10019fdc 	.word	0x10019fdc
1000b188:	10019fcc 	.word	0x10019fcc
1000b18c:	10019fb8 	.word	0x10019fb8
1000b190:	1001a07c 	.word	0x1001a07c
1000b194:	1001a088 	.word	0x1001a088
1000b198:	1000b4a9 	.word	0x1000b4a9

1000b19c <sms_pressure_ms58_calculate>:

void sms_pressure_ms58_calculate(void)
{
1000b19c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000b19e:	464f      	mov	r7, r9
1000b1a0:	b480      	push	{r7}
1000b1a2:	b082      	sub	sp, #8
    ***************************/
    /* dT = D2 - Tref = D2 - C5*2^8 */
    /* tv1: 33464 * 2^8 = 8566784 */
    tv1 = ((int64_t)(pressure_device.hal.prom_values[5]) << 8);
    /* deltaT: 8569150 - 8566784 = 2366 */
    deltaT = (int32_t)((int64_t)pressure_device.hal.adc_values[MS58_TYPE_TEMP] - tv1);
1000b1a4:	4d26      	ldr	r5, [pc, #152]	; (1000b240 <sms_pressure_ms58_calculate+0xa4>)

    /* TEMP = 20°C + dT*TEMPSENS = 2000 + dT * C6/2^23 */
    /* tv1: 28312 * 2366 = 66986192 */
    tv1 = ((int64_t)pressure_device.hal.prom_values[6] * (int64_t)deltaT);
1000b1a6:	89ec      	ldrh	r4, [r5, #14]
1000b1a8:	0224      	lsls	r4, r4, #8
1000b1aa:	69ab      	ldr	r3, [r5, #24]
1000b1ac:	1b1c      	subs	r4, r3, r4
1000b1ae:	17e3      	asrs	r3, r4, #31
1000b1b0:	001e      	movs	r6, r3
    /* tv2: 66986192 / 2^23 = 7(.985376358) */
    tv2 = (tv1 >> 23);
    /* temp: 7 + 2000 = 2007 */
    pressure_device.hal.temperature = (int32_t)(tv2 + 2000);
1000b1b2:	8a28      	ldrh	r0, [r5, #16]
1000b1b4:	4a23      	ldr	r2, [pc, #140]	; (1000b244 <sms_pressure_ms58_calculate+0xa8>)
1000b1b6:	4691      	mov	r9, r2
1000b1b8:	0022      	movs	r2, r4
1000b1ba:	2100      	movs	r1, #0
1000b1bc:	47c8      	blx	r9
1000b1be:	0249      	lsls	r1, r1, #9
1000b1c0:	0dc0      	lsrs	r0, r0, #23
1000b1c2:	4308      	orrs	r0, r1
1000b1c4:	23fa      	movs	r3, #250	; 0xfa
1000b1c6:	00db      	lsls	r3, r3, #3
1000b1c8:	469c      	mov	ip, r3
1000b1ca:	4460      	add	r0, ip
1000b1cc:	6228      	str	r0, [r5, #32]
    /* tv2: 23282 * 2366 = 55085212 */
    tv2 = ((int64_t)pressure_device.hal.prom_values[4] * (int64_t)deltaT);
    /* tv3: 55085212 / 2^7 = 430353(.21875) */
    tv3 = (tv2 >> 7);
    /* offset: 2419851264 + 430353 = 2420281617 */
    offset = (tv1 + tv3);
1000b1ce:	89a8      	ldrh	r0, [r5, #12]
1000b1d0:	0022      	movs	r2, r4
1000b1d2:	9601      	str	r6, [sp, #4]
1000b1d4:	0033      	movs	r3, r6
1000b1d6:	2100      	movs	r1, #0
1000b1d8:	47c8      	blx	r9
1000b1da:	064e      	lsls	r6, r1, #25
1000b1dc:	09c2      	lsrs	r2, r0, #7
1000b1de:	4332      	orrs	r2, r6
1000b1e0:	11cb      	asrs	r3, r1, #7
1000b1e2:	892e      	ldrh	r6, [r5, #8]
1000b1e4:	2100      	movs	r1, #0
1000b1e6:	0430      	lsls	r0, r6, #16
1000b1e8:	1812      	adds	r2, r2, r0
1000b1ea:	414b      	adcs	r3, r1
1000b1ec:	0016      	movs	r6, r2
1000b1ee:	001f      	movs	r7, r3
    /* sensitivity: 1314881536 + 215500 = 1315097036 */
    sensitivity = (tv1 + tv3);

    /* P = D1*SENS - OFF = (D1*SENS/2^21 - OFF)/2^15 */
    /* tv1: (9085466 * 1315097036) / 2^21 = 5697378829(.612148284) */
    tv1 = (((int64_t)pressure_device.hal.adc_values[MS58_TYPE_PRESS] * sensitivity) >> 21);
1000b1f0:	8968      	ldrh	r0, [r5, #10]
1000b1f2:	0022      	movs	r2, r4
1000b1f4:	9b01      	ldr	r3, [sp, #4]
1000b1f6:	2100      	movs	r1, #0
1000b1f8:	47c8      	blx	r9
1000b1fa:	060c      	lsls	r4, r1, #24
1000b1fc:	0a02      	lsrs	r2, r0, #8
1000b1fe:	4322      	orrs	r2, r4
1000b200:	120b      	asrs	r3, r1, #8
1000b202:	88ec      	ldrh	r4, [r5, #6]
1000b204:	2100      	movs	r1, #0
1000b206:	03e0      	lsls	r0, r4, #15
1000b208:	1880      	adds	r0, r0, r2
1000b20a:	4159      	adcs	r1, r3
1000b20c:	696a      	ldr	r2, [r5, #20]
1000b20e:	2300      	movs	r3, #0
1000b210:	47c8      	blx	r9
    /* tv2: 5697378829 - 2420281617 = 3277097212 */
    tv2 = tv1 - offset;
    /* press: 3277097212 / 2^15 = 100009(.070190) */
    pressure_device.hal.pressure = (int32_t)(tv2 >> 15);
1000b212:	02cc      	lsls	r4, r1, #11
1000b214:	0d42      	lsrs	r2, r0, #21
1000b216:	4322      	orrs	r2, r4
1000b218:	154b      	asrs	r3, r1, #21
1000b21a:	1b92      	subs	r2, r2, r6
1000b21c:	41bb      	sbcs	r3, r7
1000b21e:	0011      	movs	r1, r2
1000b220:	045b      	lsls	r3, r3, #17
1000b222:	0bca      	lsrs	r2, r1, #15
1000b224:	431a      	orrs	r2, r3
1000b226:	61ea      	str	r2, [r5, #28]

    DBG_LOG_DEV("[sms_pressure_ms58_calculate] temperature = %ld  pressure = %ld", pressure_device.hal.temperature, pressure_device.hal.pressure);
1000b228:	4807      	ldr	r0, [pc, #28]	; (1000b248 <sms_pressure_ms58_calculate+0xac>)
1000b22a:	4b08      	ldr	r3, [pc, #32]	; (1000b24c <sms_pressure_ms58_calculate+0xb0>)
1000b22c:	4798      	blx	r3
1000b22e:	69ea      	ldr	r2, [r5, #28]
1000b230:	6a29      	ldr	r1, [r5, #32]
1000b232:	4807      	ldr	r0, [pc, #28]	; (1000b250 <sms_pressure_ms58_calculate+0xb4>)
1000b234:	4b07      	ldr	r3, [pc, #28]	; (1000b254 <sms_pressure_ms58_calculate+0xb8>)
1000b236:	4798      	blx	r3
}
1000b238:	b002      	add	sp, #8
1000b23a:	bc04      	pop	{r2}
1000b23c:	4691      	mov	r9, r2
1000b23e:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000b240:	10019fdc 	.word	0x10019fdc
1000b244:	100133ed 	.word	0x100133ed
1000b248:	10016528 	.word	0x10016528
1000b24c:	1001537d 	.word	0x1001537d
1000b250:	10016fc0 	.word	0x10016fc0
1000b254:	1001525d 	.word	0x1001525d

1000b258 <sms_pressure_poll_data>:

    return STATUS_OK;
}

void sms_pressure_poll_data(void)
{
1000b258:	b510      	push	{r4, lr}
    if(ble_current_state == BLE_STATE_PAIRED) {
1000b25a:	4b0f      	ldr	r3, [pc, #60]	; (1000b298 <sms_pressure_poll_data+0x40>)
1000b25c:	781b      	ldrb	r3, [r3, #0]
1000b25e:	2b22      	cmp	r3, #34	; 0x22
1000b260:	d118      	bne.n	1000b294 <sms_pressure_poll_data+0x3c>
        //DBG_LOG_DEV("[sms_pressure_poll_data]\tStarting data polling");
        if(sms_pressure_ms58_read_data() != STATUS_OK) {
1000b262:	4b0e      	ldr	r3, [pc, #56]	; (1000b29c <sms_pressure_poll_data+0x44>)
1000b264:	4798      	blx	r3
1000b266:	2800      	cmp	r0, #0
1000b268:	d006      	beq.n	1000b278 <sms_pressure_poll_data+0x20>
            DBG_LOG_DEV("[sms_pressure_ms58_poll_data] problem reading ms58 data");
1000b26a:	480d      	ldr	r0, [pc, #52]	; (1000b2a0 <sms_pressure_poll_data+0x48>)
1000b26c:	4b0d      	ldr	r3, [pc, #52]	; (1000b2a4 <sms_pressure_poll_data+0x4c>)
1000b26e:	4798      	blx	r3
1000b270:	480d      	ldr	r0, [pc, #52]	; (1000b2a8 <sms_pressure_poll_data+0x50>)
1000b272:	4b0e      	ldr	r3, [pc, #56]	; (1000b2ac <sms_pressure_poll_data+0x54>)
1000b274:	4798      	blx	r3
1000b276:	e00d      	b.n	1000b294 <sms_pressure_poll_data+0x3c>
        }
        else {
            if(pressure_device.hal.data_complete) {
1000b278:	2324      	movs	r3, #36	; 0x24
1000b27a:	4a0d      	ldr	r2, [pc, #52]	; (1000b2b0 <sms_pressure_poll_data+0x58>)
1000b27c:	5cd3      	ldrb	r3, [r2, r3]
1000b27e:	2b00      	cmp	r3, #0
1000b280:	d008      	beq.n	1000b294 <sms_pressure_poll_data+0x3c>
                pressure_device.hal.data_complete = false;
1000b282:	0014      	movs	r4, r2
1000b284:	2200      	movs	r2, #0
1000b286:	2324      	movs	r3, #36	; 0x24
1000b288:	54e2      	strb	r2, [r4, r3]
                sms_pressure_ms58_calculate();
1000b28a:	4b0a      	ldr	r3, [pc, #40]	; (1000b2b4 <sms_pressure_poll_data+0x5c>)
1000b28c:	4798      	blx	r3
				pressure_device.rts = true;
1000b28e:	2201      	movs	r2, #1
1000b290:	232a      	movs	r3, #42	; 0x2a
1000b292:	54e2      	strb	r2, [r4, r3]
        }
    }
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
    }        
}
1000b294:	bd10      	pop	{r4, pc}
1000b296:	46c0      	nop			; (mov r8, r8)
1000b298:	1001a074 	.word	0x1001a074
1000b29c:	1000b0c5 	.word	0x1000b0c5
1000b2a0:	10016528 	.word	0x10016528
1000b2a4:	1001537d 	.word	0x1001537d
1000b2a8:	10017000 	.word	0x10017000
1000b2ac:	1001525d 	.word	0x1001525d
1000b2b0:	10019fdc 	.word	0x10019fdc
1000b2b4:	1000b19d 	.word	0x1000b19d

1000b2b8 <sms_pressure_define_services>:
    DBG_LOG_DEV("[sms_pressure_ms58_calculate] temperature = %ld  pressure = %ld", pressure_device.hal.temperature, pressure_device.hal.pressure);
}


void sms_pressure_define_services(void)
{
1000b2b8:	b510      	push	{r4, lr}
1000b2ba:	b082      	sub	sp, #8
    at_ble_status_t status;
    uint8_t init_value = 0;
1000b2bc:	466b      	mov	r3, sp
1000b2be:	1dda      	adds	r2, r3, #7
1000b2c0:	2300      	movs	r3, #0
1000b2c2:	7013      	strb	r3, [r2, #0]
    sms_ble_service_init(BLE_SERV_PRESSURE, &pressure_device.service_handler, &init_value);
1000b2c4:	4c0d      	ldr	r4, [pc, #52]	; (1000b2fc <sms_pressure_define_services+0x44>)
1000b2c6:	0021      	movs	r1, r4
1000b2c8:	2001      	movs	r0, #1
1000b2ca:	4b0d      	ldr	r3, [pc, #52]	; (1000b300 <sms_pressure_define_services+0x48>)
1000b2cc:	4798      	blx	r3
    if((status = sms_ble_primary_service_define(&pressure_device.service_handler)) != AT_BLE_SUCCESS) {
1000b2ce:	0020      	movs	r0, r4
1000b2d0:	4b0c      	ldr	r3, [pc, #48]	; (1000b304 <sms_pressure_define_services+0x4c>)
1000b2d2:	4798      	blx	r3
1000b2d4:	1e04      	subs	r4, r0, #0
1000b2d6:	d007      	beq.n	1000b2e8 <sms_pressure_define_services+0x30>
        DBG_LOG("[sms_pressure_define_services]\tServices defining failed, reason 0x%x", status);
1000b2d8:	480b      	ldr	r0, [pc, #44]	; (1000b308 <sms_pressure_define_services+0x50>)
1000b2da:	4b0c      	ldr	r3, [pc, #48]	; (1000b30c <sms_pressure_define_services+0x54>)
1000b2dc:	4798      	blx	r3
1000b2de:	0021      	movs	r1, r4
1000b2e0:	480b      	ldr	r0, [pc, #44]	; (1000b310 <sms_pressure_define_services+0x58>)
1000b2e2:	4b0c      	ldr	r3, [pc, #48]	; (1000b314 <sms_pressure_define_services+0x5c>)
1000b2e4:	4798      	blx	r3
1000b2e6:	e007      	b.n	1000b2f8 <sms_pressure_define_services+0x40>
    }
    else {
        DBG_LOG_DEV("[sms_pressure_define_services]\tServices defined, SMS pressure handle: %d", pressure_device.service_handler.serv_handle);
1000b2e8:	4807      	ldr	r0, [pc, #28]	; (1000b308 <sms_pressure_define_services+0x50>)
1000b2ea:	4b08      	ldr	r3, [pc, #32]	; (1000b30c <sms_pressure_define_services+0x54>)
1000b2ec:	4798      	blx	r3
1000b2ee:	4b0a      	ldr	r3, [pc, #40]	; (1000b318 <sms_pressure_define_services+0x60>)
1000b2f0:	8fd9      	ldrh	r1, [r3, #62]	; 0x3e
1000b2f2:	480a      	ldr	r0, [pc, #40]	; (1000b31c <sms_pressure_define_services+0x64>)
1000b2f4:	4b07      	ldr	r3, [pc, #28]	; (1000b314 <sms_pressure_define_services+0x5c>)
1000b2f6:	4798      	blx	r3
    }
1000b2f8:	b002      	add	sp, #8
1000b2fa:	bd10      	pop	{r4, pc}
1000b2fc:	1001a008 	.word	0x1001a008
1000b300:	1000a445 	.word	0x1000a445
1000b304:	1000a421 	.word	0x1000a421
1000b308:	10016528 	.word	0x10016528
1000b30c:	1001537d 	.word	0x1001537d
1000b310:	10017038 	.word	0x10017038
1000b314:	1001525d 	.word	0x1001525d
1000b318:	10019fdc 	.word	0x10019fdc
1000b31c:	10017080 	.word	0x10017080

1000b320 <sms_sensors_interrupt_toggle>:
 */ 

#include "sms_sensors.h"

/* Sensors-related functions */
void sms_sensors_interrupt_toggle(bool mpu_int, bool press_int) {
1000b320:	b510      	push	{r4, lr}
1000b322:	000c      	movs	r4, r1
    /* IMU --> IMU_DRDY */
    if(mpu_int) {
1000b324:	2800      	cmp	r0, #0
1000b326:	d007      	beq.n	1000b338 <sms_sensors_interrupt_toggle+0x18>
        mpu_device.state = MPU_STATE_ON;
1000b328:	2102      	movs	r1, #2
1000b32a:	232f      	movs	r3, #47	; 0x2f
1000b32c:	4a15      	ldr	r2, [pc, #84]	; (1000b384 <sms_sensors_interrupt_toggle+0x64>)
1000b32e:	54d1      	strb	r1, [r2, r3]
        gpio_enable_callback(SMS_MPU_DRDY_PIN);
1000b330:	201e      	movs	r0, #30
1000b332:	4b15      	ldr	r3, [pc, #84]	; (1000b388 <sms_sensors_interrupt_toggle+0x68>)
1000b334:	4798      	blx	r3
1000b336:	e006      	b.n	1000b346 <sms_sensors_interrupt_toggle+0x26>
    }
    else {
        mpu_device.state = MPU_STATE_OFF;
1000b338:	2100      	movs	r1, #0
1000b33a:	232f      	movs	r3, #47	; 0x2f
1000b33c:	4a11      	ldr	r2, [pc, #68]	; (1000b384 <sms_sensors_interrupt_toggle+0x64>)
1000b33e:	54d1      	strb	r1, [r2, r3]
        gpio_disable_callback(SMS_MPU_DRDY_PIN);
1000b340:	201e      	movs	r0, #30
1000b342:	4b12      	ldr	r3, [pc, #72]	; (1000b38c <sms_sensors_interrupt_toggle+0x6c>)
1000b344:	4798      	blx	r3
     * Note: Since there is no direct mechanism to simply enable and disable
     *       the AON sleep timer interruption, we have to initialize it each
     *       time (and it starts running) and register the corresponding
     *       callback (and it enables the interrupt)
     */
    if(press_int) {
1000b346:	2c00      	cmp	r4, #0
1000b348:	d010      	beq.n	1000b36c <sms_sensors_interrupt_toggle+0x4c>
        pressure_device.hal.current_state = MS58_STATE_CONV_PRESSURE;
1000b34a:	4b11      	ldr	r3, [pc, #68]	; (1000b390 <sms_sensors_interrupt_toggle+0x70>)
1000b34c:	2103      	movs	r1, #3
1000b34e:	2225      	movs	r2, #37	; 0x25
1000b350:	5499      	strb	r1, [r3, r2]
        pressure_device.state = PRESSURE_STATE_ON;
1000b352:	3901      	subs	r1, #1
1000b354:	3206      	adds	r2, #6
1000b356:	5499      	strb	r1, [r3, r2]
        sms_timer_aon_init(SMS_PRESSURE_CONVERT_MS, AON_SLEEP_TIMER_RELOAD_MODE);
1000b358:	2100      	movs	r1, #0
1000b35a:	480e      	ldr	r0, [pc, #56]	; (1000b394 <sms_sensors_interrupt_toggle+0x74>)
1000b35c:	4b0e      	ldr	r3, [pc, #56]	; (1000b398 <sms_sensors_interrupt_toggle+0x78>)
1000b35e:	4798      	blx	r3
        sms_timer_aon_register_callback();
1000b360:	4b0e      	ldr	r3, [pc, #56]	; (1000b39c <sms_sensors_interrupt_toggle+0x7c>)
1000b362:	4798      	blx	r3
        sensors_active = true;
1000b364:	2201      	movs	r2, #1
1000b366:	4b0e      	ldr	r3, [pc, #56]	; (1000b3a0 <sms_sensors_interrupt_toggle+0x80>)
1000b368:	701a      	strb	r2, [r3, #0]
1000b36a:	e00a      	b.n	1000b382 <sms_sensors_interrupt_toggle+0x62>
    }
    else {
        pressure_device.hal.current_state = MS58_STATE_READY;
1000b36c:	2102      	movs	r1, #2
1000b36e:	2325      	movs	r3, #37	; 0x25
1000b370:	4a07      	ldr	r2, [pc, #28]	; (1000b390 <sms_sensors_interrupt_toggle+0x70>)
1000b372:	54d1      	strb	r1, [r2, r3]
        sms_timer_aon_disable();
1000b374:	4b0b      	ldr	r3, [pc, #44]	; (1000b3a4 <sms_sensors_interrupt_toggle+0x84>)
1000b376:	4798      	blx	r3
        sms_timer_aon_unregister_callback();
1000b378:	4b0b      	ldr	r3, [pc, #44]	; (1000b3a8 <sms_sensors_interrupt_toggle+0x88>)
1000b37a:	4798      	blx	r3
        sensors_active = false;
1000b37c:	2200      	movs	r2, #0
1000b37e:	4b08      	ldr	r3, [pc, #32]	; (1000b3a0 <sms_sensors_interrupt_toggle+0x80>)
1000b380:	701a      	strb	r2, [r3, #0]
    }
}
1000b382:	bd10      	pop	{r4, pc}
1000b384:	10019ec8 	.word	0x10019ec8
1000b388:	1000c595 	.word	0x1000c595
1000b38c:	1000c5f1 	.word	0x1000c5f1
1000b390:	10019fdc 	.word	0x10019fdc
1000b394:	000003d5 	.word	0x000003d5
1000b398:	1000b50d 	.word	0x1000b50d
1000b39c:	1000b541 	.word	0x1000b541
1000b3a0:	1001a068 	.word	0x1001a068
1000b3a4:	1000b535 	.word	0x1000b535
1000b3a8:	1000b561 	.word	0x1000b561

1000b3ac <sms_sensors_switch>:
    

void sms_sensors_switch(bool mpu_en, bool press_en)
{
1000b3ac:	b510      	push	{r4, lr}
1000b3ae:	000c      	movs	r4, r1
    /* IMU */
    if(mpu_en) {
1000b3b0:	2800      	cmp	r0, #0
1000b3b2:	d016      	beq.n	1000b3e2 <sms_sensors_switch+0x36>
        if(sms_mpu_initialize()) {
1000b3b4:	4b14      	ldr	r3, [pc, #80]	; (1000b408 <sms_sensors_switch+0x5c>)
1000b3b6:	4798      	blx	r3
1000b3b8:	2800      	cmp	r0, #0
1000b3ba:	d00a      	beq.n	1000b3d2 <sms_sensors_switch+0x26>
            DBG_LOG_DEV("[sms_sensors_switch]\t\t\tCouldn't initialize MPU");
1000b3bc:	4813      	ldr	r0, [pc, #76]	; (1000b40c <sms_sensors_switch+0x60>)
1000b3be:	4b14      	ldr	r3, [pc, #80]	; (1000b410 <sms_sensors_switch+0x64>)
1000b3c0:	4798      	blx	r3
1000b3c2:	4814      	ldr	r0, [pc, #80]	; (1000b414 <sms_sensors_switch+0x68>)
1000b3c4:	4b14      	ldr	r3, [pc, #80]	; (1000b418 <sms_sensors_switch+0x6c>)
1000b3c6:	4798      	blx	r3
            gpio_pin_set_output_level(SMS_MPU_VCC_PIN, false);
1000b3c8:	2100      	movs	r1, #0
1000b3ca:	2006      	movs	r0, #6
1000b3cc:	4b13      	ldr	r3, [pc, #76]	; (1000b41c <sms_sensors_switch+0x70>)
1000b3ce:	4798      	blx	r3
1000b3d0:	e00b      	b.n	1000b3ea <sms_sensors_switch+0x3e>
        }
        else {
            mpu_device.hal.init_ok = true;
1000b3d2:	2201      	movs	r2, #1
1000b3d4:	4b12      	ldr	r3, [pc, #72]	; (1000b420 <sms_sensors_switch+0x74>)
1000b3d6:	701a      	strb	r2, [r3, #0]
            sms_sensors_interrupt_toggle(true, false);
1000b3d8:	2100      	movs	r1, #0
1000b3da:	2001      	movs	r0, #1
1000b3dc:	4b11      	ldr	r3, [pc, #68]	; (1000b424 <sms_sensors_switch+0x78>)
1000b3de:	4798      	blx	r3
1000b3e0:	e003      	b.n	1000b3ea <sms_sensors_switch+0x3e>
        }
    }
    else {
        gpio_pin_set_output_level(SMS_MPU_VCC_PIN, false);
1000b3e2:	2100      	movs	r1, #0
1000b3e4:	2006      	movs	r0, #6
1000b3e6:	4b0d      	ldr	r3, [pc, #52]	; (1000b41c <sms_sensors_switch+0x70>)
1000b3e8:	4798      	blx	r3
    }
    
    /* Pressure */
    if(press_en) {                
1000b3ea:	2c00      	cmp	r4, #0
1000b3ec:	d006      	beq.n	1000b3fc <sms_sensors_switch+0x50>
        pressure_device.hal.current_state = MS58_STATE_RESETTING;
1000b3ee:	2101      	movs	r1, #1
1000b3f0:	2325      	movs	r3, #37	; 0x25
1000b3f2:	4a0d      	ldr	r2, [pc, #52]	; (1000b428 <sms_sensors_switch+0x7c>)
1000b3f4:	54d1      	strb	r1, [r2, r3]
        //pressure_device.hal.reset_done = false;
        //pressure_device.hal.init_ok = false;
        sms_pressure_startup();
1000b3f6:	4b0d      	ldr	r3, [pc, #52]	; (1000b42c <sms_sensors_switch+0x80>)
1000b3f8:	4798      	blx	r3
1000b3fa:	e003      	b.n	1000b404 <sms_sensors_switch+0x58>
    }
    else {
        gpio_pin_set_output_level(SMS_PRESSURE_VCC_PIN, false);
1000b3fc:	2100      	movs	r1, #0
1000b3fe:	2007      	movs	r0, #7
1000b400:	4b06      	ldr	r3, [pc, #24]	; (1000b41c <sms_sensors_switch+0x70>)
1000b402:	4798      	blx	r3
    }
}
1000b404:	bd10      	pop	{r4, pc}
1000b406:	46c0      	nop			; (mov r8, r8)
1000b408:	1000abfd 	.word	0x1000abfd
1000b40c:	10016528 	.word	0x10016528
1000b410:	1001537d 	.word	0x1001537d
1000b414:	100170cc 	.word	0x100170cc
1000b418:	1001525d 	.word	0x1001525d
1000b41c:	1000c2ed 	.word	0x1000c2ed
1000b420:	10019ec8 	.word	0x10019ec8
1000b424:	1000b321 	.word	0x1000b321
1000b428:	10019fdc 	.word	0x10019fdc
1000b42c:	1000b031 	.word	0x1000b031

1000b430 <sms_spi_master_configure>:
 *   + mode 3 on SPI0 @ 1 MHz for MPU-9250 IMU
 * - assign SS pin for each slave device
 * - enable SPI
 */ 
void sms_spi_master_configure(void)
{
1000b430:	b530      	push	{r4, r5, lr}
1000b432:	b08d      	sub	sp, #52	; 0x34
    //DBG_LOG_DEV("[spi_master_configure]\tconfiguring SPI masters and attaching slaves...");

    /* Initialize ms58 spi slave device */
    struct spi_config spi_master_config;
    struct spi_slave_inst_config spi_slave_ms58_config;
    spi_slave_inst_get_config_defaults(&spi_slave_ms58_config);
1000b434:	ac01      	add	r4, sp, #4
1000b436:	0020      	movs	r0, r4
1000b438:	4b13      	ldr	r3, [pc, #76]	; (1000b488 <sms_spi_master_configure+0x58>)
1000b43a:	4798      	blx	r3
    spi_slave_ms58_config.ss_pin = SMS_PRESSURE_SPI_SS_PIN;
1000b43c:	2310      	movs	r3, #16
1000b43e:	7023      	strb	r3, [r4, #0]
    spi_attach_slave(&spi_slave_ms58_instance, &spi_slave_ms58_config);
1000b440:	0021      	movs	r1, r4
1000b442:	4812      	ldr	r0, [pc, #72]	; (1000b48c <sms_spi_master_configure+0x5c>)
1000b444:	4b12      	ldr	r3, [pc, #72]	; (1000b490 <sms_spi_master_configure+0x60>)
1000b446:	4798      	blx	r3
    

    /* Initialize SPI1 master for ms58 */
    spi_get_config_defaults(&spi_master_config);
1000b448:	ac02      	add	r4, sp, #8
1000b44a:	0020      	movs	r0, r4
1000b44c:	4b11      	ldr	r3, [pc, #68]	; (1000b494 <sms_spi_master_configure+0x64>)
1000b44e:	4798      	blx	r3
    spi_master_config.clock_divider = SPI_MASTER_MS58_CLOCK_DIV;
1000b450:	2368      	movs	r3, #104	; 0x68
1000b452:	7123      	strb	r3, [r4, #4]
    spi_master_config.transfer_mode = SPI_MASTER_MS58_MODE;
1000b454:	2300      	movs	r3, #0
1000b456:	70a3      	strb	r3, [r4, #2]
    spi_master_config.pin_number_pad[0] = SPI_MASTER_MS58_PIN_SCK;
1000b458:	3311      	adds	r3, #17
1000b45a:	60a3      	str	r3, [r4, #8]
    spi_master_config.pinmux_sel_pad[0] = SPI_MASTER_MS58_MUX_SCK;
1000b45c:	3b0d      	subs	r3, #13
1000b45e:	61a3      	str	r3, [r4, #24]
    spi_master_config.pin_number_pad[1] = SPI_MASTER_MS58_PIN_MOSI;
1000b460:	2213      	movs	r2, #19
1000b462:	60e2      	str	r2, [r4, #12]
    spi_master_config.pinmux_sel_pad[1] = SPI_MASTER_MS58_MUX_MOSI;
1000b464:	61e3      	str	r3, [r4, #28]
    spi_master_config.pin_number_pad[2] = SPI_MASTER_MS58_PIN_SSN;
1000b466:	3a14      	subs	r2, #20
1000b468:	6122      	str	r2, [r4, #16]
    spi_master_config.pinmux_sel_pad[2] = SPI_MASTER_MS58_MUX_SSN;
1000b46a:	6222      	str	r2, [r4, #32]
    spi_master_config.pin_number_pad[3] = SPI_MASTER_MS58_MISO;
1000b46c:	3213      	adds	r2, #19
1000b46e:	6162      	str	r2, [r4, #20]
    spi_master_config.pinmux_sel_pad[3] = SPI_MASTER_MS58_MUX_MISO;
1000b470:	6263      	str	r3, [r4, #36]	; 0x24
    spi_init(&spi_master_ms58_instance, SPI_MASTER_MS58_PORT, &spi_master_config);
1000b472:	4d09      	ldr	r5, [pc, #36]	; (1000b498 <sms_spi_master_configure+0x68>)
1000b474:	0022      	movs	r2, r4
1000b476:	4909      	ldr	r1, [pc, #36]	; (1000b49c <sms_spi_master_configure+0x6c>)
1000b478:	0028      	movs	r0, r5
1000b47a:	4b09      	ldr	r3, [pc, #36]	; (1000b4a0 <sms_spi_master_configure+0x70>)
1000b47c:	4798      	blx	r3
    spi_enable(&spi_master_ms58_instance);
1000b47e:	0028      	movs	r0, r5
1000b480:	4b08      	ldr	r3, [pc, #32]	; (1000b4a4 <sms_spi_master_configure+0x74>)
1000b482:	4798      	blx	r3
}
1000b484:	b00d      	add	sp, #52	; 0x34
1000b486:	bd30      	pop	{r4, r5, pc}
1000b488:	1000ba31 	.word	0x1000ba31
1000b48c:	1001a07c 	.word	0x1001a07c
1000b490:	1000ba69 	.word	0x1000ba69
1000b494:	1000ba3d 	.word	0x1000ba3d
1000b498:	1001a088 	.word	0x1001a088
1000b49c:	40007000 	.word	0x40007000
1000b4a0:	1000bb39 	.word	0x1000bb39
1000b4a4:	1000baa9 	.word	0x1000baa9

1000b4a8 <sms_spi_master_transceive>:
/* SPI transceive function:
 * - enable selected slave
 * - start transceive blocking job
 * - when job returned, disable selected slave
 */
enum status_code sms_spi_master_transceive(struct spi_module *const module, struct spi_slave_inst *const slave, uint8_t *tx_data, uint8_t *rx_data, uint16_t len) {
1000b4a8:	b5f0      	push	{r4, r5, r6, r7, lr}
1000b4aa:	b083      	sub	sp, #12
1000b4ac:	0004      	movs	r4, r0
1000b4ae:	000d      	movs	r5, r1
1000b4b0:	9200      	str	r2, [sp, #0]
1000b4b2:	9301      	str	r3, [sp, #4]
1000b4b4:	ab08      	add	r3, sp, #32
1000b4b6:	881e      	ldrh	r6, [r3, #0]
    enum status_code retVal;
    /* Enable slave */
    //DBG_LOG_CONT_DEV(" selecting slave...");
    spi_select_slave(module, slave, true);
1000b4b8:	2201      	movs	r2, #1
1000b4ba:	4f08      	ldr	r7, [pc, #32]	; (1000b4dc <sms_spi_master_transceive+0x34>)
1000b4bc:	47b8      	blx	r7
    /* Write SPI data */
    //DBG_LOG_CONT_DEV(" writing data...");
    retVal = spi_transceive_buffer_wait(module, tx_data, rx_data, len);
1000b4be:	0033      	movs	r3, r6
1000b4c0:	9a01      	ldr	r2, [sp, #4]
1000b4c2:	9900      	ldr	r1, [sp, #0]
1000b4c4:	0020      	movs	r0, r4
1000b4c6:	4e06      	ldr	r6, [pc, #24]	; (1000b4e0 <sms_spi_master_transceive+0x38>)
1000b4c8:	47b0      	blx	r6
1000b4ca:	0006      	movs	r6, r0
    /* Disable slave */
    //DBG_LOG_CONT_DEV(" de-selecting slave...");
    spi_select_slave(module, slave, false);
1000b4cc:	2200      	movs	r2, #0
1000b4ce:	0029      	movs	r1, r5
1000b4d0:	0020      	movs	r0, r4
1000b4d2:	47b8      	blx	r7
    //DBG_LOG_CONT_DEV(" done!");
    return retVal;
}
1000b4d4:	0030      	movs	r0, r6
1000b4d6:	b003      	add	sp, #12
1000b4d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000b4da:	46c0      	nop			; (mov r8, r8)
1000b4dc:	1000bd21 	.word	0x1000bd21
1000b4e0:	1000bc9d 	.word	0x1000bc9d

1000b4e4 <sms_timer_aon_callback>:

#include "sms_timer.h"

/* AON SLEEP TIMER */
void sms_timer_aon_callback(void)
{
1000b4e4:	b510      	push	{r4, lr}
    if(pressure_device.int_enabled) {
1000b4e6:	2328      	movs	r3, #40	; 0x28
1000b4e8:	4a06      	ldr	r2, [pc, #24]	; (1000b504 <sms_timer_aon_callback+0x20>)
1000b4ea:	5cd3      	ldrb	r3, [r2, r3]
1000b4ec:	2b00      	cmp	r3, #0
1000b4ee:	d008      	beq.n	1000b502 <sms_timer_aon_callback+0x1e>
		pressure_device.new_int = true;
1000b4f0:	2101      	movs	r1, #1
1000b4f2:	2329      	movs	r3, #41	; 0x29
1000b4f4:	54d1      	strb	r1, [r2, r3]
	    send_plf_int_msg_ind(AON_SLEEP_TIMER_EXPIRY_CALLBACK, AON_TIMER_EXPIRED, NULL, 0);
1000b4f6:	2300      	movs	r3, #0
1000b4f8:	2200      	movs	r2, #0
1000b4fa:	3102      	adds	r1, #2
1000b4fc:	2042      	movs	r0, #66	; 0x42
1000b4fe:	4c02      	ldr	r4, [pc, #8]	; (1000b508 <sms_timer_aon_callback+0x24>)
1000b500:	47a0      	blx	r4
	}
}
1000b502:	bd10      	pop	{r4, pc}
1000b504:	10019fdc 	.word	0x10019fdc
1000b508:	1000f349 	.word	0x1000f349

1000b50c <sms_timer_aon_init>:

void sms_timer_aon_init(uint32_t cnt, enum aon_sleep_timer_mode cnt_mode)
{
1000b50c:	b530      	push	{r4, r5, lr}
1000b50e:	b083      	sub	sp, #12
1000b510:	0004      	movs	r4, r0
1000b512:	000d      	movs	r5, r1
    struct aon_sleep_timer_config config_aon_sleep_timer;
    aon_sleep_timer_get_config_defaults(&config_aon_sleep_timer);
1000b514:	4668      	mov	r0, sp
1000b516:	4b05      	ldr	r3, [pc, #20]	; (1000b52c <sms_timer_aon_init+0x20>)
1000b518:	4798      	blx	r3
    config_aon_sleep_timer.mode = cnt_mode;
1000b51a:	466b      	mov	r3, sp
1000b51c:	705d      	strb	r5, [r3, #1]
    config_aon_sleep_timer.counter = cnt;
1000b51e:	9401      	str	r4, [sp, #4]
    aon_sleep_timer_init(&config_aon_sleep_timer);
1000b520:	4668      	mov	r0, sp
1000b522:	4b03      	ldr	r3, [pc, #12]	; (1000b530 <sms_timer_aon_init+0x24>)
1000b524:	4798      	blx	r3
}
1000b526:	b003      	add	sp, #12
1000b528:	bd30      	pop	{r4, r5, pc}
1000b52a:	46c0      	nop			; (mov r8, r8)
1000b52c:	10008171 	.word	0x10008171
1000b530:	100081e5 	.word	0x100081e5

1000b534 <sms_timer_aon_disable>:

void sms_timer_aon_disable(void)
{
1000b534:	b510      	push	{r4, lr}
    aon_sleep_timer_disable();
1000b536:	4b01      	ldr	r3, [pc, #4]	; (1000b53c <sms_timer_aon_disable+0x8>)
1000b538:	4798      	blx	r3
}
1000b53a:	bd10      	pop	{r4, pc}
1000b53c:	10008181 	.word	0x10008181

1000b540 <sms_timer_aon_register_callback>:

void sms_timer_aon_register_callback(void)
{
1000b540:	b510      	push	{r4, lr}
    aon_sleep_timer_register_callback(sms_timer_aon_callback);
1000b542:	4804      	ldr	r0, [pc, #16]	; (1000b554 <sms_timer_aon_register_callback+0x14>)
1000b544:	4b04      	ldr	r3, [pc, #16]	; (1000b558 <sms_timer_aon_register_callback+0x18>)
1000b546:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000b548:	2280      	movs	r2, #128	; 0x80
1000b54a:	0512      	lsls	r2, r2, #20
1000b54c:	4b03      	ldr	r3, [pc, #12]	; (1000b55c <sms_timer_aon_register_callback+0x1c>)
1000b54e:	601a      	str	r2, [r3, #0]
    NVIC_EnableIRQ(AON_SLEEP_TIMER0_IRQn);
}
1000b550:	bd10      	pop	{r4, pc}
1000b552:	46c0      	nop			; (mov r8, r8)
1000b554:	1000b4e5 	.word	0x1000b4e5
1000b558:	100081cd 	.word	0x100081cd
1000b55c:	e000e100 	.word	0xe000e100

1000b560 <sms_timer_aon_unregister_callback>:

void sms_timer_aon_unregister_callback(void)
{
1000b560:	b510      	push	{r4, lr}
    aon_sleep_timer_unregister_callback();
1000b562:	4b04      	ldr	r3, [pc, #16]	; (1000b574 <sms_timer_aon_unregister_callback+0x14>)
1000b564:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000b566:	2180      	movs	r1, #128	; 0x80
1000b568:	0509      	lsls	r1, r1, #20
1000b56a:	2380      	movs	r3, #128	; 0x80
1000b56c:	4a02      	ldr	r2, [pc, #8]	; (1000b578 <sms_timer_aon_unregister_callback+0x18>)
1000b56e:	50d1      	str	r1, [r2, r3]
    NVIC_DisableIRQ(AON_SLEEP_TIMER0_IRQn);
}
1000b570:	bd10      	pop	{r4, pc}
1000b572:	46c0      	nop			; (mov r8, r8)
1000b574:	100081d9 	.word	0x100081d9
1000b578:	e000e100 	.word	0xe000e100

1000b57c <sms_timer_aon_get_ms>:

void sms_timer_aon_get_ms(uint32_t *count)
{
    count = (uint32_t *)0;
}
1000b57c:	4770      	bx	lr
1000b57e:	46c0      	nop			; (mov r8, r8)

1000b580 <sms_dualtimer_init>:

/* DUALTIMER */
void sms_dualtimer_init(void)
{
1000b580:	b510      	push	{r4, lr}
1000b582:	b088      	sub	sp, #32
    struct dualtimer_config config_dualtimer;
    dualtimer_get_config_defaults(&config_dualtimer);
1000b584:	ac01      	add	r4, sp, #4
1000b586:	0020      	movs	r0, r4
1000b588:	4b08      	ldr	r3, [pc, #32]	; (1000b5ac <sms_dualtimer_init+0x2c>)
1000b58a:	4798      	blx	r3

    config_dualtimer.timer1.load_value = SMS_DUALTIMER_LOAD_S;
1000b58c:	4a08      	ldr	r2, [pc, #32]	; (1000b5b0 <sms_dualtimer_init+0x30>)
1000b58e:	60a2      	str	r2, [r4, #8]
    config_dualtimer.timer1.counter_mode = DUALTIMER_ONE_SHOT_MODE;
1000b590:	2300      	movs	r3, #0
1000b592:	7063      	strb	r3, [r4, #1]
    config_dualtimer.timer2.load_value = SMS_DUALTIMER_LOAD_S;
1000b594:	6162      	str	r2, [r4, #20]
    config_dualtimer.timer2.counter_mode = DUALTIMER_ONE_SHOT_MODE;
1000b596:	7363      	strb	r3, [r4, #13]

    dualtimer_init(&config_dualtimer);
1000b598:	0020      	movs	r0, r4
1000b59a:	4b06      	ldr	r3, [pc, #24]	; (1000b5b4 <sms_dualtimer_init+0x34>)
1000b59c:	4798      	blx	r3
    dualtimer_disable(DUALTIMER_TIMER1);
1000b59e:	2000      	movs	r0, #0
1000b5a0:	4c05      	ldr	r4, [pc, #20]	; (1000b5b8 <sms_dualtimer_init+0x38>)
1000b5a2:	47a0      	blx	r4
    dualtimer_disable(DUALTIMER_TIMER2);
1000b5a4:	2001      	movs	r0, #1
1000b5a6:	47a0      	blx	r4
}
1000b5a8:	b008      	add	sp, #32
1000b5aa:	bd10      	pop	{r4, pc}
1000b5ac:	1000bd85 	.word	0x1000bd85
1000b5b0:	018cba80 	.word	0x018cba80
1000b5b4:	1000be19 	.word	0x1000be19
1000b5b8:	1000bdf5 	.word	0x1000bdf5

1000b5bc <sms_dualtimer_register_callback>:

void sms_dualtimer_register_callback(enum dualtimer_timer tmr, sms_dualtimer_callback_t cb_handler)
{
1000b5bc:	b510      	push	{r4, lr}
1000b5be:	0004      	movs	r4, r0
    dualtimer_register_callback(tmr, cb_handler);
1000b5c0:	4b02      	ldr	r3, [pc, #8]	; (1000b5cc <sms_dualtimer_register_callback+0x10>)
1000b5c2:	4798      	blx	r3
    NVIC_EnableIRQ(DUALTIMER0_IRQn);
}

void sms_dualtimer_stop(enum dualtimer_timer tmr)
{
    dualtimer_disable(tmr);
1000b5c4:	0020      	movs	r0, r4
1000b5c6:	4b02      	ldr	r3, [pc, #8]	; (1000b5d0 <sms_dualtimer_register_callback+0x14>)
1000b5c8:	4798      	blx	r3

void sms_dualtimer_register_callback(enum dualtimer_timer tmr, sms_dualtimer_callback_t cb_handler)
{
    dualtimer_register_callback(tmr, cb_handler);
    sms_dualtimer_stop(tmr);
}
1000b5ca:	bd10      	pop	{r4, pc}
1000b5cc:	1000bf1d 	.word	0x1000bf1d
1000b5d0:	1000bdf5 	.word	0x1000bdf5

1000b5d4 <sms_dualtimer_start>:

void sms_dualtimer_start(timer_unit_type_t unit, uint32_t delay, enum dualtimer_timer tmr)
{
1000b5d4:	b510      	push	{r4, lr}
1000b5d6:	0014      	movs	r4, r2
    uint32_t timer_load = 1;
    switch(unit) {
1000b5d8:	2801      	cmp	r0, #1
1000b5da:	d006      	beq.n	1000b5ea <sms_dualtimer_start+0x16>
1000b5dc:	2800      	cmp	r0, #0
1000b5de:	d002      	beq.n	1000b5e6 <sms_dualtimer_start+0x12>
1000b5e0:	2802      	cmp	r0, #2
1000b5e2:	d004      	beq.n	1000b5ee <sms_dualtimer_start+0x1a>
1000b5e4:	e005      	b.n	1000b5f2 <sms_dualtimer_start+0x1e>
        case TIMER_UNIT_US:
        timer_load = SMS_DUALTIMER_LOAD_US;
1000b5e6:	221a      	movs	r2, #26
1000b5e8:	e004      	b.n	1000b5f4 <sms_dualtimer_start+0x20>
        break;
        
        case TIMER_UNIT_MS:
        timer_load = SMS_DUALTIMER_LOAD_MS;
1000b5ea:	4a0c      	ldr	r2, [pc, #48]	; (1000b61c <sms_dualtimer_start+0x48>)
        break;
1000b5ec:	e002      	b.n	1000b5f4 <sms_dualtimer_start+0x20>
        
        case TIMER_UNIT_S:
        timer_load = SMS_DUALTIMER_LOAD_S;
1000b5ee:	4a0c      	ldr	r2, [pc, #48]	; (1000b620 <sms_dualtimer_start+0x4c>)
        break;
1000b5f0:	e000      	b.n	1000b5f4 <sms_dualtimer_start+0x20>
    sms_dualtimer_stop(tmr);
}

void sms_dualtimer_start(timer_unit_type_t unit, uint32_t delay, enum dualtimer_timer tmr)
{
    uint32_t timer_load = 1;
1000b5f2:	2201      	movs	r2, #1
        
        default:
        break;
    }
    
    if(delay <= 0) {
1000b5f4:	2900      	cmp	r1, #0
1000b5f6:	d101      	bne.n	1000b5fc <sms_dualtimer_start+0x28>
        //DBG_LOG("[sms_dualtimer_start]\tWarning! Delay value < 0... setting to 1000");
        delay = 1000;
1000b5f8:	21fa      	movs	r1, #250	; 0xfa
1000b5fa:	0089      	lsls	r1, r1, #2
    }
    
    ulp_ready = false;
1000b5fc:	2000      	movs	r0, #0
1000b5fe:	4b09      	ldr	r3, [pc, #36]	; (1000b624 <sms_dualtimer_start+0x50>)
1000b600:	7018      	strb	r0, [r3, #0]
    //DBG_LOG_DEV("[sms_dualtimer_start]\t\tStarting timer%d... load: %ld, delay: %ld", (tmr+1), timer_load, delay);
    dualtimer_set_counter(tmr, DUALTIMER_SET_CURRUNT_REG, timer_load * delay);
1000b602:	434a      	muls	r2, r1
1000b604:	2100      	movs	r1, #0
1000b606:	0020      	movs	r0, r4
1000b608:	4b07      	ldr	r3, [pc, #28]	; (1000b628 <sms_dualtimer_start+0x54>)
1000b60a:	4798      	blx	r3
    dualtimer_enable(tmr);
1000b60c:	0020      	movs	r0, r4
1000b60e:	4b07      	ldr	r3, [pc, #28]	; (1000b62c <sms_dualtimer_start+0x58>)
1000b610:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000b612:	2280      	movs	r2, #128	; 0x80
1000b614:	01d2      	lsls	r2, r2, #7
1000b616:	4b06      	ldr	r3, [pc, #24]	; (1000b630 <sms_dualtimer_start+0x5c>)
1000b618:	601a      	str	r2, [r3, #0]
    NVIC_EnableIRQ(DUALTIMER0_IRQn);
}
1000b61a:	bd10      	pop	{r4, pc}
1000b61c:	00006590 	.word	0x00006590
1000b620:	018cba80 	.word	0x018cba80
1000b624:	10019f55 	.word	0x10019f55
1000b628:	1000bda9 	.word	0x1000bda9
1000b62c:	1000bdd1 	.word	0x1000bdd1
1000b630:	e000e100 	.word	0xe000e100

1000b634 <sms_dualtimer_stop>:

void sms_dualtimer_stop(enum dualtimer_timer tmr)
{
1000b634:	b510      	push	{r4, lr}
    dualtimer_disable(tmr);
1000b636:	4b01      	ldr	r3, [pc, #4]	; (1000b63c <sms_dualtimer_stop+0x8>)
1000b638:	4798      	blx	r3
}
1000b63a:	bd10      	pop	{r4, pc}
1000b63c:	1000bdf5 	.word	0x1000bdf5

1000b640 <sms_dualtimer1_cb>:

void sms_dualtimer1_cb(void)
{
1000b640:	b510      	push	{r4, lr}
    timer1_instance.new_int = true;
1000b642:	2201      	movs	r2, #1
1000b644:	4b04      	ldr	r3, [pc, #16]	; (1000b658 <sms_dualtimer1_cb+0x18>)
1000b646:	709a      	strb	r2, [r3, #2]
    send_plf_int_msg_ind(DUALTIMER_TIMER1_CALLBACK, TIMER_EXPIRED_CALLBACK_TYPE_DETECT, NULL, 0);
1000b648:	2300      	movs	r3, #0
1000b64a:	2200      	movs	r2, #0
1000b64c:	2101      	movs	r1, #1
1000b64e:	2040      	movs	r0, #64	; 0x40
1000b650:	4c02      	ldr	r4, [pc, #8]	; (1000b65c <sms_dualtimer1_cb+0x1c>)
1000b652:	47a0      	blx	r4
}
1000b654:	bd10      	pop	{r4, pc}
1000b656:	46c0      	nop			; (mov r8, r8)
1000b658:	10019fc8 	.word	0x10019fc8
1000b65c:	1000f349 	.word	0x1000f349

1000b660 <sms_dualtimer2_cb>:

void sms_dualtimer2_cb(void)
{
1000b660:	b510      	push	{r4, lr}
    timer2_instance.new_int = true;
1000b662:	2201      	movs	r2, #1
1000b664:	4b04      	ldr	r3, [pc, #16]	; (1000b678 <sms_dualtimer2_cb+0x18>)
1000b666:	709a      	strb	r2, [r3, #2]
    send_plf_int_msg_ind(DUALTIMER_TIMER2_CALLBACK, TIMER_EXPIRED_CALLBACK_TYPE_DETECT, NULL, 0);
1000b668:	2300      	movs	r3, #0
1000b66a:	2200      	movs	r2, #0
1000b66c:	2101      	movs	r1, #1
1000b66e:	2041      	movs	r0, #65	; 0x41
1000b670:	4c02      	ldr	r4, [pc, #8]	; (1000b67c <sms_dualtimer2_cb+0x1c>)
1000b672:	47a0      	blx	r4
}
1000b674:	bd10      	pop	{r4, pc}
1000b676:	46c0      	nop			; (mov r8, r8)
1000b678:	1001a078 	.word	0x1001a078
1000b67c:	1000f349 	.word	0x1000f349

1000b680 <sms_dualtimer1_fn>:


void sms_dualtimer1_fn(void)
{
1000b680:	b510      	push	{r4, lr}
    //sms_button_toggle_interrupt(SMS_BTN_INT_DISABLE, SMS_BTN_INT_DISABLE);
    switch(timer1_current_mode) {
1000b682:	4b7c      	ldr	r3, [pc, #496]	; (1000b874 <sms_dualtimer1_fn+0x1f4>)
1000b684:	781b      	ldrb	r3, [r3, #0]
1000b686:	b2db      	uxtb	r3, r3
1000b688:	2b01      	cmp	r3, #1
1000b68a:	d003      	beq.n	1000b694 <sms_dualtimer1_fn+0x14>
1000b68c:	2b02      	cmp	r3, #2
1000b68e:	d100      	bne.n	1000b692 <sms_dualtimer1_fn+0x12>
1000b690:	e0ae      	b.n	1000b7f0 <sms_dualtimer1_fn+0x170>
1000b692:	e0e7      	b.n	1000b864 <sms_dualtimer1_fn+0x1e4>
        /* Timer1 mode = STARTUP */
        case TIMER1_MODE_STARTUP:
        {
            timer1_current_mode = TIMER1_MODE_NONE;
1000b694:	2200      	movs	r2, #0
1000b696:	4b77      	ldr	r3, [pc, #476]	; (1000b874 <sms_dualtimer1_fn+0x1f4>)
1000b698:	701a      	strb	r2, [r3, #0]
            button_instance.previous_state = button_instance.current_state;
1000b69a:	4c77      	ldr	r4, [pc, #476]	; (1000b878 <sms_dualtimer1_fn+0x1f8>)
1000b69c:	7b63      	ldrb	r3, [r4, #13]
1000b69e:	7323      	strb	r3, [r4, #12]
            button_instance.current_state = sms_button_get_state();
1000b6a0:	4b76      	ldr	r3, [pc, #472]	; (1000b87c <sms_dualtimer1_fn+0x1fc>)
1000b6a2:	4798      	blx	r3
1000b6a4:	7360      	strb	r0, [r4, #13]
            sms_monitor_get_states("[sms_dualtimer1_fn]");
1000b6a6:	4876      	ldr	r0, [pc, #472]	; (1000b880 <sms_dualtimer1_fn+0x200>)
1000b6a8:	4b76      	ldr	r3, [pc, #472]	; (1000b884 <sms_dualtimer1_fn+0x204>)
1000b6aa:	4798      	blx	r3
            
            switch(button_instance.previous_state) {
1000b6ac:	7b23      	ldrb	r3, [r4, #12]
1000b6ae:	2b01      	cmp	r3, #1
1000b6b0:	d002      	beq.n	1000b6b8 <sms_dualtimer1_fn+0x38>
1000b6b2:	2b02      	cmp	r3, #2
1000b6b4:	d04c      	beq.n	1000b750 <sms_dualtimer1_fn+0xd0>
1000b6b6:	e093      	b.n	1000b7e0 <sms_dualtimer1_fn+0x160>
                // --- Timer1 mode = STARTUP: switch prev_state ---
                case BUTTON_STATE_B0:
                switch(button_instance.current_state) {
1000b6b8:	4b6f      	ldr	r3, [pc, #444]	; (1000b878 <sms_dualtimer1_fn+0x1f8>)
1000b6ba:	7b5b      	ldrb	r3, [r3, #13]
1000b6bc:	2b01      	cmp	r3, #1
1000b6be:	d002      	beq.n	1000b6c6 <sms_dualtimer1_fn+0x46>
1000b6c0:	2b02      	cmp	r3, #2
1000b6c2:	d023      	beq.n	1000b70c <sms_dualtimer1_fn+0x8c>
1000b6c4:	e03b      	b.n	1000b73e <sms_dualtimer1_fn+0xbe>
                    // --- prev_state = b0: switch current_state ---
                    case BUTTON_STATE_B0:
                    if(ble_current_state == BLE_STATE_POWEROFF) {
1000b6c6:	4b70      	ldr	r3, [pc, #448]	; (1000b888 <sms_dualtimer1_fn+0x208>)
1000b6c8:	781b      	ldrb	r3, [r3, #0]
1000b6ca:	2b00      	cmp	r3, #0
1000b6cc:	d115      	bne.n	1000b6fa <sms_dualtimer1_fn+0x7a>
                        sms_btn_cnt++;
1000b6ce:	4a6f      	ldr	r2, [pc, #444]	; (1000b88c <sms_dualtimer1_fn+0x20c>)
1000b6d0:	7813      	ldrb	r3, [r2, #0]
1000b6d2:	3301      	adds	r3, #1
1000b6d4:	b2db      	uxtb	r3, r3
1000b6d6:	7013      	strb	r3, [r2, #0]
                        if(sms_btn_cnt >= SMS_BTN_STARTUP_CNT) {
1000b6d8:	2b0f      	cmp	r3, #15
1000b6da:	d905      	bls.n	1000b6e8 <sms_dualtimer1_fn+0x68>
                            timer1_current_mode = TIMER1_MODE_NONE;
1000b6dc:	2200      	movs	r2, #0
1000b6de:	4b65      	ldr	r3, [pc, #404]	; (1000b874 <sms_dualtimer1_fn+0x1f4>)
1000b6e0:	701a      	strb	r2, [r3, #0]
                            sms_ble_startup();
1000b6e2:	4b6b      	ldr	r3, [pc, #428]	; (1000b890 <sms_dualtimer1_fn+0x210>)
1000b6e4:	4798      	blx	r3
1000b6e6:	e0c4      	b.n	1000b872 <sms_dualtimer1_fn+0x1f2>
                        }
                        else {
                            //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                            timer1_current_mode = TIMER1_MODE_STARTUP;
1000b6e8:	2201      	movs	r2, #1
1000b6ea:	4b62      	ldr	r3, [pc, #392]	; (1000b874 <sms_dualtimer1_fn+0x1f4>)
1000b6ec:	701a      	strb	r2, [r3, #0]
                            //ulp_ready = false;
                            sms_dualtimer_start(TIMER_UNIT_MS, SMS_BTN_STARTUP_MS, DUALTIMER_TIMER1);
1000b6ee:	2200      	movs	r2, #0
1000b6f0:	21fa      	movs	r1, #250	; 0xfa
1000b6f2:	2001      	movs	r0, #1
1000b6f4:	4b67      	ldr	r3, [pc, #412]	; (1000b894 <sms_dualtimer1_fn+0x214>)
1000b6f6:	4798      	blx	r3
1000b6f8:	e0bb      	b.n	1000b872 <sms_dualtimer1_fn+0x1f2>
                        }
                    }
                    else {
                        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                        if(timer2_current_mode == TIMER2_MODE_NONE) {
1000b6fa:	4b67      	ldr	r3, [pc, #412]	; (1000b898 <sms_dualtimer1_fn+0x218>)
1000b6fc:	781b      	ldrb	r3, [r3, #0]
1000b6fe:	2b00      	cmp	r3, #0
1000b700:	d000      	beq.n	1000b704 <sms_dualtimer1_fn+0x84>
1000b702:	e0b6      	b.n	1000b872 <sms_dualtimer1_fn+0x1f2>
                            //release_sleep_lock();
                            ulp_ready = true;
1000b704:	2201      	movs	r2, #1
1000b706:	4b65      	ldr	r3, [pc, #404]	; (1000b89c <sms_dualtimer1_fn+0x21c>)
1000b708:	701a      	strb	r2, [r3, #0]
1000b70a:	e0b2      	b.n	1000b872 <sms_dualtimer1_fn+0x1f2>
                    }
                    break;
                    
                    // --- prev_state = b0: switch current_state ---
                    case BUTTON_STATE_B1:
                    if(ble_current_state == BLE_STATE_POWEROFF) {
1000b70c:	4b5e      	ldr	r3, [pc, #376]	; (1000b888 <sms_dualtimer1_fn+0x208>)
1000b70e:	781b      	ldrb	r3, [r3, #0]
1000b710:	2b00      	cmp	r3, #0
1000b712:	d10b      	bne.n	1000b72c <sms_dualtimer1_fn+0xac>
                        sms_btn_cnt = 0;
1000b714:	2200      	movs	r2, #0
1000b716:	4b5d      	ldr	r3, [pc, #372]	; (1000b88c <sms_dualtimer1_fn+0x20c>)
1000b718:	701a      	strb	r2, [r3, #0]
                        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                        timer1_current_mode = TIMER1_MODE_STARTUP;
1000b71a:	3201      	adds	r2, #1
1000b71c:	4b55      	ldr	r3, [pc, #340]	; (1000b874 <sms_dualtimer1_fn+0x1f4>)
1000b71e:	701a      	strb	r2, [r3, #0]
                        //ulp_ready = false;
                        sms_dualtimer_start(TIMER_UNIT_MS, SMS_BLINK_STARTUP_MS, DUALTIMER_TIMER1);
1000b720:	2200      	movs	r2, #0
1000b722:	2164      	movs	r1, #100	; 0x64
1000b724:	2001      	movs	r0, #1
1000b726:	4b5b      	ldr	r3, [pc, #364]	; (1000b894 <sms_dualtimer1_fn+0x214>)
1000b728:	4798      	blx	r3
1000b72a:	e0a2      	b.n	1000b872 <sms_dualtimer1_fn+0x1f2>
                    }
                    else {
                        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                        if(timer2_current_mode == TIMER2_MODE_NONE) {
1000b72c:	4b5a      	ldr	r3, [pc, #360]	; (1000b898 <sms_dualtimer1_fn+0x218>)
1000b72e:	781b      	ldrb	r3, [r3, #0]
1000b730:	2b00      	cmp	r3, #0
1000b732:	d000      	beq.n	1000b736 <sms_dualtimer1_fn+0xb6>
1000b734:	e09d      	b.n	1000b872 <sms_dualtimer1_fn+0x1f2>
                            //release_sleep_lock();
                            ulp_ready = true;
1000b736:	2201      	movs	r2, #1
1000b738:	4b58      	ldr	r3, [pc, #352]	; (1000b89c <sms_dualtimer1_fn+0x21c>)
1000b73a:	701a      	strb	r2, [r3, #0]
1000b73c:	e099      	b.n	1000b872 <sms_dualtimer1_fn+0x1f2>
                    // --- prev_state = b0: switch current_state ---
                    case BUTTON_STATE_BOTH:
                    case BUTTON_STATE_NONE:
                    default:
                    //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                    if(timer2_current_mode == TIMER2_MODE_NONE) {
1000b73e:	4b56      	ldr	r3, [pc, #344]	; (1000b898 <sms_dualtimer1_fn+0x218>)
1000b740:	781b      	ldrb	r3, [r3, #0]
1000b742:	2b00      	cmp	r3, #0
1000b744:	d000      	beq.n	1000b748 <sms_dualtimer1_fn+0xc8>
1000b746:	e094      	b.n	1000b872 <sms_dualtimer1_fn+0x1f2>
                        //release_sleep_lock();
                        ulp_ready = true;
1000b748:	2201      	movs	r2, #1
1000b74a:	4b54      	ldr	r3, [pc, #336]	; (1000b89c <sms_dualtimer1_fn+0x21c>)
1000b74c:	701a      	strb	r2, [r3, #0]
1000b74e:	e090      	b.n	1000b872 <sms_dualtimer1_fn+0x1f2>
                }
                break;
                
                // --- Timer1 mode = STARTUP: switch prev_state ---
                case BUTTON_STATE_B1:
                switch(button_instance.current_state) {
1000b750:	4b49      	ldr	r3, [pc, #292]	; (1000b878 <sms_dualtimer1_fn+0x1f8>)
1000b752:	7b5b      	ldrb	r3, [r3, #13]
1000b754:	2b01      	cmp	r3, #1
1000b756:	d023      	beq.n	1000b7a0 <sms_dualtimer1_fn+0x120>
1000b758:	2b02      	cmp	r3, #2
1000b75a:	d139      	bne.n	1000b7d0 <sms_dualtimer1_fn+0x150>
                    // --- prev_state = b1: switch current_state ---
                    case BUTTON_STATE_B1:
                    if(ble_current_state == BLE_STATE_POWEROFF) {
1000b75c:	4b4a      	ldr	r3, [pc, #296]	; (1000b888 <sms_dualtimer1_fn+0x208>)
1000b75e:	781b      	ldrb	r3, [r3, #0]
1000b760:	2b00      	cmp	r3, #0
1000b762:	d115      	bne.n	1000b790 <sms_dualtimer1_fn+0x110>
                        sms_btn_cnt++;
1000b764:	4a49      	ldr	r2, [pc, #292]	; (1000b88c <sms_dualtimer1_fn+0x20c>)
1000b766:	7813      	ldrb	r3, [r2, #0]
1000b768:	3301      	adds	r3, #1
1000b76a:	b2db      	uxtb	r3, r3
1000b76c:	7013      	strb	r3, [r2, #0]
                        if(sms_btn_cnt >= SMS_BTN_STARTUP_CNT) {
1000b76e:	2b0f      	cmp	r3, #15
1000b770:	d905      	bls.n	1000b77e <sms_dualtimer1_fn+0xfe>
                            timer1_current_mode = TIMER1_MODE_NONE;
1000b772:	2200      	movs	r2, #0
1000b774:	4b3f      	ldr	r3, [pc, #252]	; (1000b874 <sms_dualtimer1_fn+0x1f4>)
1000b776:	701a      	strb	r2, [r3, #0]
                            sms_ble_startup();
1000b778:	4b45      	ldr	r3, [pc, #276]	; (1000b890 <sms_dualtimer1_fn+0x210>)
1000b77a:	4798      	blx	r3
1000b77c:	e079      	b.n	1000b872 <sms_dualtimer1_fn+0x1f2>
                        }
                        else {
                            //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                            timer1_current_mode = TIMER1_MODE_STARTUP;
1000b77e:	2201      	movs	r2, #1
1000b780:	4b3c      	ldr	r3, [pc, #240]	; (1000b874 <sms_dualtimer1_fn+0x1f4>)
1000b782:	701a      	strb	r2, [r3, #0]
                            //ulp_ready = false;
                            sms_dualtimer_start(TIMER_UNIT_MS, SMS_BTN_STARTUP_MS, DUALTIMER_TIMER1);
1000b784:	2200      	movs	r2, #0
1000b786:	21fa      	movs	r1, #250	; 0xfa
1000b788:	2001      	movs	r0, #1
1000b78a:	4b42      	ldr	r3, [pc, #264]	; (1000b894 <sms_dualtimer1_fn+0x214>)
1000b78c:	4798      	blx	r3
1000b78e:	e070      	b.n	1000b872 <sms_dualtimer1_fn+0x1f2>
                        }
                    }
                    else {
                        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                        if(timer2_current_mode == TIMER2_MODE_NONE) {
1000b790:	4b41      	ldr	r3, [pc, #260]	; (1000b898 <sms_dualtimer1_fn+0x218>)
1000b792:	781b      	ldrb	r3, [r3, #0]
1000b794:	2b00      	cmp	r3, #0
1000b796:	d16c      	bne.n	1000b872 <sms_dualtimer1_fn+0x1f2>
                            //release_sleep_lock();
                            ulp_ready = true;
1000b798:	2201      	movs	r2, #1
1000b79a:	4b40      	ldr	r3, [pc, #256]	; (1000b89c <sms_dualtimer1_fn+0x21c>)
1000b79c:	701a      	strb	r2, [r3, #0]
1000b79e:	e068      	b.n	1000b872 <sms_dualtimer1_fn+0x1f2>
                    }
                    break;
                    
                    // --- prev_state = b1: switch current_state ---
                    case BUTTON_STATE_B0:
                    if(ble_current_state == BLE_STATE_POWEROFF) {
1000b7a0:	4b39      	ldr	r3, [pc, #228]	; (1000b888 <sms_dualtimer1_fn+0x208>)
1000b7a2:	781b      	ldrb	r3, [r3, #0]
1000b7a4:	2b00      	cmp	r3, #0
1000b7a6:	d10b      	bne.n	1000b7c0 <sms_dualtimer1_fn+0x140>
                        sms_btn_cnt = 0;
1000b7a8:	2200      	movs	r2, #0
1000b7aa:	4b38      	ldr	r3, [pc, #224]	; (1000b88c <sms_dualtimer1_fn+0x20c>)
1000b7ac:	701a      	strb	r2, [r3, #0]
                        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                        timer1_current_mode = TIMER1_MODE_STARTUP;
1000b7ae:	3201      	adds	r2, #1
1000b7b0:	4b30      	ldr	r3, [pc, #192]	; (1000b874 <sms_dualtimer1_fn+0x1f4>)
1000b7b2:	701a      	strb	r2, [r3, #0]
                        //ulp_ready = false;
                        sms_dualtimer_start(TIMER_UNIT_MS, SMS_BLINK_STARTUP_MS, DUALTIMER_TIMER1);
1000b7b4:	2200      	movs	r2, #0
1000b7b6:	2164      	movs	r1, #100	; 0x64
1000b7b8:	2001      	movs	r0, #1
1000b7ba:	4b36      	ldr	r3, [pc, #216]	; (1000b894 <sms_dualtimer1_fn+0x214>)
1000b7bc:	4798      	blx	r3
1000b7be:	e058      	b.n	1000b872 <sms_dualtimer1_fn+0x1f2>
                    }
                    else {
                        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                        if(timer2_current_mode == TIMER2_MODE_NONE) {
1000b7c0:	4b35      	ldr	r3, [pc, #212]	; (1000b898 <sms_dualtimer1_fn+0x218>)
1000b7c2:	781b      	ldrb	r3, [r3, #0]
1000b7c4:	2b00      	cmp	r3, #0
1000b7c6:	d154      	bne.n	1000b872 <sms_dualtimer1_fn+0x1f2>
                            //release_sleep_lock();
                            ulp_ready = true;
1000b7c8:	2201      	movs	r2, #1
1000b7ca:	4b34      	ldr	r3, [pc, #208]	; (1000b89c <sms_dualtimer1_fn+0x21c>)
1000b7cc:	701a      	strb	r2, [r3, #0]
1000b7ce:	e050      	b.n	1000b872 <sms_dualtimer1_fn+0x1f2>
                    // --- prev_state = b1: switch current_state ---
                    case BUTTON_STATE_NONE:
                    case BUTTON_STATE_BOTH:
                    default:
                    //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                    if(timer2_current_mode == TIMER2_MODE_NONE) {
1000b7d0:	4b31      	ldr	r3, [pc, #196]	; (1000b898 <sms_dualtimer1_fn+0x218>)
1000b7d2:	781b      	ldrb	r3, [r3, #0]
1000b7d4:	2b00      	cmp	r3, #0
1000b7d6:	d14c      	bne.n	1000b872 <sms_dualtimer1_fn+0x1f2>
                        //release_sleep_lock();
                        ulp_ready = true;
1000b7d8:	2201      	movs	r2, #1
1000b7da:	4b30      	ldr	r3, [pc, #192]	; (1000b89c <sms_dualtimer1_fn+0x21c>)
1000b7dc:	701a      	strb	r2, [r3, #0]
1000b7de:	e048      	b.n	1000b872 <sms_dualtimer1_fn+0x1f2>
                case BUTTON_STATE_NONE:
                case BUTTON_STATE_BOTH:
                default:
                {
                    //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                    if(timer2_current_mode == TIMER2_MODE_NONE) {
1000b7e0:	4b2d      	ldr	r3, [pc, #180]	; (1000b898 <sms_dualtimer1_fn+0x218>)
1000b7e2:	781b      	ldrb	r3, [r3, #0]
1000b7e4:	2b00      	cmp	r3, #0
1000b7e6:	d144      	bne.n	1000b872 <sms_dualtimer1_fn+0x1f2>
                        //release_sleep_lock();
                        ulp_ready = true;
1000b7e8:	2201      	movs	r2, #1
1000b7ea:	4b2c      	ldr	r3, [pc, #176]	; (1000b89c <sms_dualtimer1_fn+0x21c>)
1000b7ec:	701a      	strb	r2, [r3, #0]
1000b7ee:	e040      	b.n	1000b872 <sms_dualtimer1_fn+0x1f2>
        
        /* Timer1 mode = SHUTDOWN */
        case TIMER1_MODE_SHUTDOWN:
        {
            //timer1_current_mode = TIMER1_MODE_NONE;
            button_instance.previous_state = button_instance.current_state;
1000b7f0:	4c21      	ldr	r4, [pc, #132]	; (1000b878 <sms_dualtimer1_fn+0x1f8>)
1000b7f2:	7b63      	ldrb	r3, [r4, #13]
1000b7f4:	7323      	strb	r3, [r4, #12]
            button_instance.current_state = sms_button_get_state();
1000b7f6:	4b21      	ldr	r3, [pc, #132]	; (1000b87c <sms_dualtimer1_fn+0x1fc>)
1000b7f8:	4798      	blx	r3
1000b7fa:	7360      	strb	r0, [r4, #13]
            sms_monitor_get_states("[sms_dualtimer1_fn]");
1000b7fc:	4820      	ldr	r0, [pc, #128]	; (1000b880 <sms_dualtimer1_fn+0x200>)
1000b7fe:	4b21      	ldr	r3, [pc, #132]	; (1000b884 <sms_dualtimer1_fn+0x204>)
1000b800:	4798      	blx	r3
            
            if((button_instance.previous_state == BUTTON_STATE_BOTH) && (button_instance.current_state == BUTTON_STATE_BOTH)) {
1000b802:	89a2      	ldrh	r2, [r4, #12]
1000b804:	4b26      	ldr	r3, [pc, #152]	; (1000b8a0 <sms_dualtimer1_fn+0x220>)
1000b806:	429a      	cmp	r2, r3
1000b808:	d112      	bne.n	1000b830 <sms_dualtimer1_fn+0x1b0>
                sms_btn_cnt++;
1000b80a:	4a20      	ldr	r2, [pc, #128]	; (1000b88c <sms_dualtimer1_fn+0x20c>)
1000b80c:	7813      	ldrb	r3, [r2, #0]
1000b80e:	3301      	adds	r3, #1
1000b810:	b2db      	uxtb	r3, r3
1000b812:	7013      	strb	r3, [r2, #0]
                if(sms_btn_cnt >= SMS_BTN_SHTDWN_CNT) {
1000b814:	2b09      	cmp	r3, #9
1000b816:	d902      	bls.n	1000b81e <sms_dualtimer1_fn+0x19e>
                    sms_ble_power_down();
1000b818:	4b22      	ldr	r3, [pc, #136]	; (1000b8a4 <sms_dualtimer1_fn+0x224>)
1000b81a:	4798      	blx	r3
1000b81c:	e029      	b.n	1000b872 <sms_dualtimer1_fn+0x1f2>
                }
                else {
                    //sms_sensors_toggle_interrupt(SMS_EXTINT_DISABLE);
                    timer1_current_mode = TIMER1_MODE_SHUTDOWN;
1000b81e:	2202      	movs	r2, #2
1000b820:	4b14      	ldr	r3, [pc, #80]	; (1000b874 <sms_dualtimer1_fn+0x1f4>)
1000b822:	701a      	strb	r2, [r3, #0]
                    sms_dualtimer_start(TIMER_UNIT_MS, SMS_BTN_SHTDWN_MS, DUALTIMER_TIMER1);
1000b824:	2200      	movs	r2, #0
1000b826:	21fa      	movs	r1, #250	; 0xfa
1000b828:	2001      	movs	r0, #1
1000b82a:	4b1a      	ldr	r3, [pc, #104]	; (1000b894 <sms_dualtimer1_fn+0x214>)
1000b82c:	4798      	blx	r3
1000b82e:	e020      	b.n	1000b872 <sms_dualtimer1_fn+0x1f2>
                }
            }
            else {
                if(pressure_device.state == PRESSURE_STATE_STDBY) {
1000b830:	232b      	movs	r3, #43	; 0x2b
1000b832:	4a1d      	ldr	r2, [pc, #116]	; (1000b8a8 <sms_dualtimer1_fn+0x228>)
1000b834:	5cd3      	ldrb	r3, [r2, r3]
1000b836:	2b01      	cmp	r3, #1
1000b838:	d109      	bne.n	1000b84e <sms_dualtimer1_fn+0x1ce>
                    DBG_LOG_DEV("[sms_dualtimer1_fn]\t\tStarting sensors (shutting down)...");
1000b83a:	481c      	ldr	r0, [pc, #112]	; (1000b8ac <sms_dualtimer1_fn+0x22c>)
1000b83c:	4b1c      	ldr	r3, [pc, #112]	; (1000b8b0 <sms_dualtimer1_fn+0x230>)
1000b83e:	4798      	blx	r3
1000b840:	481c      	ldr	r0, [pc, #112]	; (1000b8b4 <sms_dualtimer1_fn+0x234>)
1000b842:	4b1d      	ldr	r3, [pc, #116]	; (1000b8b8 <sms_dualtimer1_fn+0x238>)
1000b844:	4798      	blx	r3
                    sms_sensors_interrupt_toggle(false, true);
1000b846:	2101      	movs	r1, #1
1000b848:	2000      	movs	r0, #0
1000b84a:	4b1c      	ldr	r3, [pc, #112]	; (1000b8bc <sms_dualtimer1_fn+0x23c>)
1000b84c:	4798      	blx	r3
                }                    
                timer1_current_mode = TIMER1_MODE_NONE;
1000b84e:	2200      	movs	r2, #0
1000b850:	4b08      	ldr	r3, [pc, #32]	; (1000b874 <sms_dualtimer1_fn+0x1f4>)
1000b852:	701a      	strb	r2, [r3, #0]
                if(timer2_current_mode == TIMER2_MODE_NONE) {
1000b854:	4b10      	ldr	r3, [pc, #64]	; (1000b898 <sms_dualtimer1_fn+0x218>)
1000b856:	781b      	ldrb	r3, [r3, #0]
1000b858:	2b00      	cmp	r3, #0
1000b85a:	d10a      	bne.n	1000b872 <sms_dualtimer1_fn+0x1f2>
                    ulp_ready = true;
1000b85c:	3201      	adds	r2, #1
1000b85e:	4b0f      	ldr	r3, [pc, #60]	; (1000b89c <sms_dualtimer1_fn+0x21c>)
1000b860:	701a      	strb	r2, [r3, #0]
1000b862:	e006      	b.n	1000b872 <sms_dualtimer1_fn+0x1f2>
        }
        
        case TIMER1_MODE_NONE:
        default:
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
        if(timer2_current_mode == TIMER2_MODE_NONE) {
1000b864:	4b0c      	ldr	r3, [pc, #48]	; (1000b898 <sms_dualtimer1_fn+0x218>)
1000b866:	781b      	ldrb	r3, [r3, #0]
1000b868:	2b00      	cmp	r3, #0
1000b86a:	d102      	bne.n	1000b872 <sms_dualtimer1_fn+0x1f2>
            //release_sleep_lock();
            ulp_ready = true;
1000b86c:	2201      	movs	r2, #1
1000b86e:	4b0b      	ldr	r3, [pc, #44]	; (1000b89c <sms_dualtimer1_fn+0x21c>)
1000b870:	701a      	strb	r2, [r3, #0]
        }            
        break;
    } // switch(timer1_current_mode)
}
1000b872:	bd10      	pop	{r4, pc}
1000b874:	10019ec4 	.word	0x10019ec4
1000b878:	10019f58 	.word	0x10019f58
1000b87c:	1000a645 	.word	0x1000a645
1000b880:	100170fc 	.word	0x100170fc
1000b884:	1000a949 	.word	0x1000a949
1000b888:	1001a074 	.word	0x1001a074
1000b88c:	1001a096 	.word	0x1001a096
1000b890:	10009f3d 	.word	0x10009f3d
1000b894:	1000b5d5 	.word	0x1000b5d5
1000b898:	1001a07b 	.word	0x1001a07b
1000b89c:	10019f55 	.word	0x10019f55
1000b8a0:	00000303 	.word	0x00000303
1000b8a4:	10009f55 	.word	0x10009f55
1000b8a8:	10019fdc 	.word	0x10019fdc
1000b8ac:	10016528 	.word	0x10016528
1000b8b0:	1001537d 	.word	0x1001537d
1000b8b4:	10017110 	.word	0x10017110
1000b8b8:	1001525d 	.word	0x1001525d
1000b8bc:	1000b321 	.word	0x1000b321

1000b8c0 <sms_dualtimer2_fn>:

void sms_dualtimer2_fn(void)
{
1000b8c0:	b510      	push	{r4, lr}
    //sms_button_toggle_interrupt(SMS_BTN_INT_DISABLE, SMS_BTN_INT_DISABLE);
    sms_monitor_get_states("[sms_dualtimer2_fn]");
1000b8c2:	4846      	ldr	r0, [pc, #280]	; (1000b9dc <sms_dualtimer2_fn+0x11c>)
1000b8c4:	4b46      	ldr	r3, [pc, #280]	; (1000b9e0 <sms_dualtimer2_fn+0x120>)
1000b8c6:	4798      	blx	r3
    switch(timer2_current_mode) {
1000b8c8:	4b46      	ldr	r3, [pc, #280]	; (1000b9e4 <sms_dualtimer2_fn+0x124>)
1000b8ca:	781b      	ldrb	r3, [r3, #0]
1000b8cc:	b2db      	uxtb	r3, r3
1000b8ce:	2b02      	cmp	r3, #2
1000b8d0:	d02f      	beq.n	1000b932 <sms_dualtimer2_fn+0x72>
1000b8d2:	2b03      	cmp	r3, #3
1000b8d4:	d054      	beq.n	1000b980 <sms_dualtimer2_fn+0xc0>
1000b8d6:	2b01      	cmp	r3, #1
1000b8d8:	d17f      	bne.n	1000b9da <sms_dualtimer2_fn+0x11a>
        case TIMER2_MODE_INDICATION_TOUT:
        timer2_current_mode = TIMER2_MODE_NONE;
1000b8da:	2200      	movs	r2, #0
1000b8dc:	4b41      	ldr	r3, [pc, #260]	; (1000b9e4 <sms_dualtimer2_fn+0x124>)
1000b8de:	701a      	strb	r2, [r3, #0]
        if(ble_current_state == BLE_STATE_PAIRED) {
1000b8e0:	4b41      	ldr	r3, [pc, #260]	; (1000b9e8 <sms_dualtimer2_fn+0x128>)
1000b8e2:	781b      	ldrb	r3, [r3, #0]
1000b8e4:	2b22      	cmp	r3, #34	; 0x22
1000b8e6:	d107      	bne.n	1000b8f8 <sms_dualtimer2_fn+0x38>
            //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
            if(timer1_current_mode == TIMER1_MODE_NONE) {
1000b8e8:	4b40      	ldr	r3, [pc, #256]	; (1000b9ec <sms_dualtimer2_fn+0x12c>)
1000b8ea:	781b      	ldrb	r3, [r3, #0]
1000b8ec:	2b00      	cmp	r3, #0
1000b8ee:	d174      	bne.n	1000b9da <sms_dualtimer2_fn+0x11a>
                //release_sleep_lock();
                ulp_ready = true;
1000b8f0:	3201      	adds	r2, #1
1000b8f2:	4b3f      	ldr	r3, [pc, #252]	; (1000b9f0 <sms_dualtimer2_fn+0x130>)
1000b8f4:	701a      	strb	r2, [r3, #0]
1000b8f6:	e070      	b.n	1000b9da <sms_dualtimer2_fn+0x11a>
            }                
        }
        else {
            sms_ble_ind_retry++;
1000b8f8:	4a3e      	ldr	r2, [pc, #248]	; (1000b9f4 <sms_dualtimer2_fn+0x134>)
1000b8fa:	7813      	ldrb	r3, [r2, #0]
1000b8fc:	3301      	adds	r3, #1
1000b8fe:	b2db      	uxtb	r3, r3
1000b900:	7013      	strb	r3, [r2, #0]
            if(sms_ble_ind_retry >= BLE_INDICATION_RETRY_MAX) {
1000b902:	2b00      	cmp	r3, #0
1000b904:	d009      	beq.n	1000b91a <sms_dualtimer2_fn+0x5a>
                DBG_LOG_CONT_DEV(" ...giving up!");
1000b906:	483c      	ldr	r0, [pc, #240]	; (1000b9f8 <sms_dualtimer2_fn+0x138>)
1000b908:	4b3c      	ldr	r3, [pc, #240]	; (1000b9fc <sms_dualtimer2_fn+0x13c>)
1000b90a:	4798      	blx	r3
                //DBG_LOG_DEV("[sms_dualtimer2_fn]\tTimer1 mode: %d", timer1_current_mode);
                timer2_current_mode = TIMER2_MODE_NONE;
1000b90c:	2200      	movs	r2, #0
1000b90e:	4b35      	ldr	r3, [pc, #212]	; (1000b9e4 <sms_dualtimer2_fn+0x124>)
1000b910:	701a      	strb	r2, [r3, #0]
                ble_current_state = BLE_STATE_PAIRED;
1000b912:	3222      	adds	r2, #34	; 0x22
1000b914:	4b34      	ldr	r3, [pc, #208]	; (1000b9e8 <sms_dualtimer2_fn+0x128>)
1000b916:	701a      	strb	r2, [r3, #0]
1000b918:	e05f      	b.n	1000b9da <sms_dualtimer2_fn+0x11a>
                //DBG_LOG_DEV("[sms_dualtimer2_fn]\t\tStarting sensors...");
                //sms_sensors_toggle_interrupt(SMS_EXTINT_ENABLE);
                //if(timer1_current_mode == TIMER1_MODE_NONE) release_sleep_lock();
            }
            else {
                DBG_LOG_CONT_DEV(" ...waiting... counter: %d", sms_ble_ind_retry);
1000b91a:	2100      	movs	r1, #0
1000b91c:	4838      	ldr	r0, [pc, #224]	; (1000ba00 <sms_dualtimer2_fn+0x140>)
1000b91e:	4b37      	ldr	r3, [pc, #220]	; (1000b9fc <sms_dualtimer2_fn+0x13c>)
1000b920:	4798      	blx	r3
                //sms_ble_send_characteristic(BLE_CHAR_PRESSURE);
                timer2_current_mode = TIMER2_MODE_INDICATION_TOUT;
1000b922:	2201      	movs	r2, #1
1000b924:	4b2f      	ldr	r3, [pc, #188]	; (1000b9e4 <sms_dualtimer2_fn+0x124>)
1000b926:	701a      	strb	r2, [r3, #0]
                //ulp_ready = false;
                sms_dualtimer_start(TIMER_UNIT_MS, BLE_INDICATION_TOUT_MS, DUALTIMER_TIMER2);
1000b928:	2164      	movs	r1, #100	; 0x64
1000b92a:	2001      	movs	r0, #1
1000b92c:	4b35      	ldr	r3, [pc, #212]	; (1000ba04 <sms_dualtimer2_fn+0x144>)
1000b92e:	4798      	blx	r3
1000b930:	e053      	b.n	1000b9da <sms_dualtimer2_fn+0x11a>
            }
        }
        break;
        
        case TIMER2_MODE_LED_STARTUP:
        DBG_LOG_DEV("[sms_dualtimer2_fn]\t\tBlinking startup...");
1000b932:	4835      	ldr	r0, [pc, #212]	; (1000ba08 <sms_dualtimer2_fn+0x148>)
1000b934:	4b35      	ldr	r3, [pc, #212]	; (1000ba0c <sms_dualtimer2_fn+0x14c>)
1000b936:	4798      	blx	r3
1000b938:	4835      	ldr	r0, [pc, #212]	; (1000ba10 <sms_dualtimer2_fn+0x150>)
1000b93a:	4b30      	ldr	r3, [pc, #192]	; (1000b9fc <sms_dualtimer2_fn+0x13c>)
1000b93c:	4798      	blx	r3
        timer2_current_mode = TIMER2_MODE_NONE;
1000b93e:	2200      	movs	r2, #0
1000b940:	4b28      	ldr	r3, [pc, #160]	; (1000b9e4 <sms_dualtimer2_fn+0x124>)
1000b942:	701a      	strb	r2, [r3, #0]
        sms_led_blink_cnt++;
1000b944:	4a33      	ldr	r2, [pc, #204]	; (1000ba14 <sms_dualtimer2_fn+0x154>)
1000b946:	7813      	ldrb	r3, [r2, #0]
1000b948:	3301      	adds	r3, #1
1000b94a:	b2db      	uxtb	r3, r3
1000b94c:	7013      	strb	r3, [r2, #0]
        if(sms_led_blink_cnt >= SMS_BLINK_STARTUP_CNT) {
1000b94e:	7813      	ldrb	r3, [r2, #0]
1000b950:	b2db      	uxtb	r3, r3
1000b952:	2b07      	cmp	r3, #7
1000b954:	d908      	bls.n	1000b968 <sms_dualtimer2_fn+0xa8>
            sms_led_switch_off(SMS_LED_0_PIN);
1000b956:	2016      	movs	r0, #22
1000b958:	4b2f      	ldr	r3, [pc, #188]	; (1000ba18 <sms_dualtimer2_fn+0x158>)
1000b95a:	4798      	blx	r3
            //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
            /* Blinking done... starting ble advertisement */
            //DBG_LOG_DEV("[sms_dualtimer2_fn]\tSMS awake... starting advertisement");
            sms_ble_advertise();
1000b95c:	4b2f      	ldr	r3, [pc, #188]	; (1000ba1c <sms_dualtimer2_fn+0x15c>)
1000b95e:	4798      	blx	r3
            ulp_ready = true;
1000b960:	2201      	movs	r2, #1
1000b962:	4b23      	ldr	r3, [pc, #140]	; (1000b9f0 <sms_dualtimer2_fn+0x130>)
1000b964:	701a      	strb	r2, [r3, #0]
1000b966:	e038      	b.n	1000b9da <sms_dualtimer2_fn+0x11a>
        }
        else {
            //DBG_LOG_DEV("[sms_dualtimer2_fn]\tBlinking up... cnt = %d", sms_led_blink_cnt);
            sms_led_toggle(SMS_LED_0_PIN);
1000b968:	2016      	movs	r0, #22
1000b96a:	4b2d      	ldr	r3, [pc, #180]	; (1000ba20 <sms_dualtimer2_fn+0x160>)
1000b96c:	4798      	blx	r3
            timer2_current_mode = TIMER2_MODE_LED_STARTUP;
1000b96e:	2202      	movs	r2, #2
1000b970:	4b1c      	ldr	r3, [pc, #112]	; (1000b9e4 <sms_dualtimer2_fn+0x124>)
1000b972:	701a      	strb	r2, [r3, #0]
            //ulp_ready = false;
            sms_dualtimer_start(TIMER_UNIT_MS, SMS_BLINK_STARTUP_MS, DUALTIMER_TIMER2);
1000b974:	3a01      	subs	r2, #1
1000b976:	2164      	movs	r1, #100	; 0x64
1000b978:	2001      	movs	r0, #1
1000b97a:	4b22      	ldr	r3, [pc, #136]	; (1000ba04 <sms_dualtimer2_fn+0x144>)
1000b97c:	4798      	blx	r3
1000b97e:	e02c      	b.n	1000b9da <sms_dualtimer2_fn+0x11a>
        }
        break;
        
        case TIMER2_MODE_LED_SHUTDOWN:
        DBG_LOG_DEV("[sms_dualtimer2_fn]\t\tBlinking shutdown...");
1000b980:	4821      	ldr	r0, [pc, #132]	; (1000ba08 <sms_dualtimer2_fn+0x148>)
1000b982:	4b22      	ldr	r3, [pc, #136]	; (1000ba0c <sms_dualtimer2_fn+0x14c>)
1000b984:	4798      	blx	r3
1000b986:	4827      	ldr	r0, [pc, #156]	; (1000ba24 <sms_dualtimer2_fn+0x164>)
1000b988:	4b1c      	ldr	r3, [pc, #112]	; (1000b9fc <sms_dualtimer2_fn+0x13c>)
1000b98a:	4798      	blx	r3
        timer2_current_mode = TIMER2_MODE_NONE;
1000b98c:	2200      	movs	r2, #0
1000b98e:	4b15      	ldr	r3, [pc, #84]	; (1000b9e4 <sms_dualtimer2_fn+0x124>)
1000b990:	701a      	strb	r2, [r3, #0]
        sms_led_blink_cnt++;
1000b992:	4a20      	ldr	r2, [pc, #128]	; (1000ba14 <sms_dualtimer2_fn+0x154>)
1000b994:	7813      	ldrb	r3, [r2, #0]
1000b996:	3301      	adds	r3, #1
1000b998:	b2db      	uxtb	r3, r3
1000b99a:	7013      	strb	r3, [r2, #0]
        if(sms_led_blink_cnt >= SMS_BLINK_SHTDWN_CNT) {
1000b99c:	7813      	ldrb	r3, [r2, #0]
1000b99e:	b2db      	uxtb	r3, r3
1000b9a0:	2b03      	cmp	r3, #3
1000b9a2:	d90e      	bls.n	1000b9c2 <sms_dualtimer2_fn+0x102>
            sms_led_switch_off(SMS_LED_0_PIN);
1000b9a4:	2016      	movs	r0, #22
1000b9a6:	4b1c      	ldr	r3, [pc, #112]	; (1000ba18 <sms_dualtimer2_fn+0x158>)
1000b9a8:	4798      	blx	r3
            DBG_LOG_DEV("[sms_dualtimer2_fn]\t\tPowering off...");
1000b9aa:	4817      	ldr	r0, [pc, #92]	; (1000ba08 <sms_dualtimer2_fn+0x148>)
1000b9ac:	4b17      	ldr	r3, [pc, #92]	; (1000ba0c <sms_dualtimer2_fn+0x14c>)
1000b9ae:	4798      	blx	r3
1000b9b0:	481d      	ldr	r0, [pc, #116]	; (1000ba28 <sms_dualtimer2_fn+0x168>)
1000b9b2:	4b12      	ldr	r3, [pc, #72]	; (1000b9fc <sms_dualtimer2_fn+0x13c>)
1000b9b4:	4798      	blx	r3
            //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
            sms_init_variables();
1000b9b6:	4b1d      	ldr	r3, [pc, #116]	; (1000ba2c <sms_dualtimer2_fn+0x16c>)
1000b9b8:	4798      	blx	r3
            ulp_ready = true;
1000b9ba:	2201      	movs	r2, #1
1000b9bc:	4b0c      	ldr	r3, [pc, #48]	; (1000b9f0 <sms_dualtimer2_fn+0x130>)
1000b9be:	701a      	strb	r2, [r3, #0]
1000b9c0:	e00b      	b.n	1000b9da <sms_dualtimer2_fn+0x11a>
            //release_sleep_lock();
        }
        else {
            //DBG_LOG_DEV("[sms_dualtimer2_fn]\tBLinking off... cnt = %d", sms_led_blink_cnt);
            sms_led_toggle(SMS_LED_0_PIN);
1000b9c2:	2016      	movs	r0, #22
1000b9c4:	4b16      	ldr	r3, [pc, #88]	; (1000ba20 <sms_dualtimer2_fn+0x160>)
1000b9c6:	4798      	blx	r3
            timer2_current_mode = TIMER2_MODE_LED_SHUTDOWN;
1000b9c8:	2203      	movs	r2, #3
1000b9ca:	4b06      	ldr	r3, [pc, #24]	; (1000b9e4 <sms_dualtimer2_fn+0x124>)
1000b9cc:	701a      	strb	r2, [r3, #0]
            //ulp_ready = false;
            sms_dualtimer_start(TIMER_UNIT_MS, SMS_BLINK_SHTDWN_MS, DUALTIMER_TIMER2);
1000b9ce:	3a02      	subs	r2, #2
1000b9d0:	21c8      	movs	r1, #200	; 0xc8
1000b9d2:	0049      	lsls	r1, r1, #1
1000b9d4:	2001      	movs	r0, #1
1000b9d6:	4b0b      	ldr	r3, [pc, #44]	; (1000ba04 <sms_dualtimer2_fn+0x144>)
1000b9d8:	4798      	blx	r3
        case TIMER2_MODE_LED_CONNECTION_LOST:
        case TIMER2_MODE_NONE:
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
        break;
    }
1000b9da:	bd10      	pop	{r4, pc}
1000b9dc:	1001714c 	.word	0x1001714c
1000b9e0:	1000a949 	.word	0x1000a949
1000b9e4:	1001a07b 	.word	0x1001a07b
1000b9e8:	1001a074 	.word	0x1001a074
1000b9ec:	10019ec4 	.word	0x10019ec4
1000b9f0:	10019f55 	.word	0x10019f55
1000b9f4:	1001a069 	.word	0x1001a069
1000b9f8:	10017160 	.word	0x10017160
1000b9fc:	1001525d 	.word	0x1001525d
1000ba00:	10017170 	.word	0x10017170
1000ba04:	1000b5d5 	.word	0x1000b5d5
1000ba08:	10016528 	.word	0x10016528
1000ba0c:	1001537d 	.word	0x1001537d
1000ba10:	1001718c 	.word	0x1001718c
1000ba14:	1001a09c 	.word	0x1001a09c
1000ba18:	1000ae01 	.word	0x1000ae01
1000ba1c:	1000a115 	.word	0x1000a115
1000ba20:	1000ae61 	.word	0x1000ae61
1000ba24:	100171b8 	.word	0x100171b8
1000ba28:	100171e4 	.word	0x100171e4
1000ba2c:	1000f825 	.word	0x1000f825

1000ba30 <spi_slave_inst_get_config_defaults>:
void spi_slave_inst_get_config_defaults(
		struct spi_slave_inst_config *const config)
{
	Assert(config);

	config->ss_pin          = PIN_LP_GPIO_12;
1000ba30:	230c      	movs	r3, #12
1000ba32:	7003      	strb	r3, [r0, #0]
	config->address_enabled = false;
1000ba34:	2300      	movs	r3, #0
1000ba36:	7043      	strb	r3, [r0, #1]
	config->address         = 0;
1000ba38:	7083      	strb	r3, [r0, #2]
}
1000ba3a:	4770      	bx	lr

1000ba3c <spi_get_config_defaults>:
void spi_get_config_defaults(
		struct spi_config *const config)
{
	Assert(config);

	config->mode             = SPI_MODE_MASTER;
1000ba3c:	2301      	movs	r3, #1
1000ba3e:	7003      	strb	r3, [r0, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
1000ba40:	2300      	movs	r3, #0
1000ba42:	7043      	strb	r3, [r0, #1]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
1000ba44:	7083      	strb	r3, [r0, #2]
	config->clock_source     = SPI_CLK_INPUT_0;
1000ba46:	70c3      	strb	r3, [r0, #3]
	config->clock_divider    = 129;
1000ba48:	3381      	adds	r3, #129	; 0x81
1000ba4a:	7103      	strb	r3, [r0, #4]

	config->pin_number_pad[0] = PIN_LP_GPIO_10;
1000ba4c:	3b77      	subs	r3, #119	; 0x77
1000ba4e:	6083      	str	r3, [r0, #8]
	config->pin_number_pad[1] = PIN_LP_GPIO_11;
1000ba50:	3301      	adds	r3, #1
1000ba52:	60c3      	str	r3, [r0, #12]
	config->pin_number_pad[2] = PIN_LP_GPIO_12;
1000ba54:	3301      	adds	r3, #1
1000ba56:	6103      	str	r3, [r0, #16]
	config->pin_number_pad[3] = PIN_LP_GPIO_13;
1000ba58:	3301      	adds	r3, #1
1000ba5a:	6143      	str	r3, [r0, #20]

	config->pinmux_sel_pad[0] = MUX_LP_GPIO_10_SPI0_SCK;
1000ba5c:	3b0b      	subs	r3, #11
1000ba5e:	6183      	str	r3, [r0, #24]
	config->pinmux_sel_pad[1] = MUX_LP_GPIO_11_SPI0_MOSI;
1000ba60:	61c3      	str	r3, [r0, #28]
	config->pinmux_sel_pad[2] = MUX_LP_GPIO_12_SPI0_SSN;
1000ba62:	6203      	str	r3, [r0, #32]
	config->pinmux_sel_pad[3] = MUX_LP_GPIO_13_SPI0_MISO;
1000ba64:	6243      	str	r3, [r0, #36]	; 0x24
};
1000ba66:	4770      	bx	lr

1000ba68 <spi_attach_slave>:
 *
 */
void spi_attach_slave(
		struct spi_slave_inst *const slave,
		struct spi_slave_inst_config *const config)
{
1000ba68:	b530      	push	{r4, r5, lr}
1000ba6a:	b083      	sub	sp, #12
1000ba6c:	0004      	movs	r4, r0
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
1000ba6e:	780b      	ldrb	r3, [r1, #0]
1000ba70:	7003      	strb	r3, [r0, #0]
	slave->address_enabled = config->address_enabled;
1000ba72:	784b      	ldrb	r3, [r1, #1]
1000ba74:	7043      	strb	r3, [r0, #1]
	slave->address         = config->address;
1000ba76:	788b      	ldrb	r3, [r1, #2]
1000ba78:	7083      	strb	r3, [r0, #2]

	struct gpio_config config_gpio;
	gpio_get_config_defaults(&config_gpio);
1000ba7a:	ad01      	add	r5, sp, #4
1000ba7c:	0028      	movs	r0, r5
1000ba7e:	4b07      	ldr	r3, [pc, #28]	; (1000ba9c <spi_attach_slave+0x34>)
1000ba80:	4798      	blx	r3
	config_gpio.direction = GPIO_PIN_DIR_OUTPUT;
1000ba82:	2301      	movs	r3, #1
1000ba84:	702b      	strb	r3, [r5, #0]
	gpio_pin_set_config(slave->ss_pin, &config_gpio);
1000ba86:	7820      	ldrb	r0, [r4, #0]
1000ba88:	0029      	movs	r1, r5
1000ba8a:	4b05      	ldr	r3, [pc, #20]	; (1000baa0 <spi_attach_slave+0x38>)
1000ba8c:	4798      	blx	r3

	gpio_pin_set_output_level(slave->ss_pin, true);
1000ba8e:	7820      	ldrb	r0, [r4, #0]
1000ba90:	2101      	movs	r1, #1
1000ba92:	4b04      	ldr	r3, [pc, #16]	; (1000baa4 <spi_attach_slave+0x3c>)
1000ba94:	4798      	blx	r3
}
1000ba96:	b003      	add	sp, #12
1000ba98:	bd30      	pop	{r4, r5, pc}
1000ba9a:	46c0      	nop			; (mov r8, r8)
1000ba9c:	1000c085 	.word	0x1000c085
1000baa0:	1000c095 	.word	0x1000c095
1000baa4:	1000c2ed 	.word	0x1000c2ed

1000baa8 <spi_enable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void spi_enable(struct spi_module *const module)
{
	Spi *const spi_module = (module->hw);
1000baa8:	6803      	ldr	r3, [r0, #0]
		NVIC_EnableIRQ(SPI1_TX_IRQn);
	}
#endif

	/* Enable SPI */
	spi_module->SPI_MODULE_ENABLE.reg = SPI_MODULE_ENABLE_ENABLE;
1000baaa:	2201      	movs	r2, #1
1000baac:	761a      	strb	r2, [r3, #24]
}
1000baae:	4770      	bx	lr

1000bab0 <spi_disable>:
 * This function will disable the SPI module.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void spi_disable(struct spi_module *const module)
{
1000bab0:	b510      	push	{r4, lr}
		NVIC_DisableIRQ(SPI1_TX_IRQn);
	}
#  endif

	/* Disable SPI */
	spi_module->SPI_MODULE_ENABLE.reg = (0x0ul << SPI_MODULE_ENABLE_ENABLE_Pos);
1000bab2:	2300      	movs	r3, #0
1000bab4:	6802      	ldr	r2, [r0, #0]
1000bab6:	7613      	strb	r3, [r2, #24]
 */
static void _spi_clock_disable(struct spi_module *const module)
{
	Assert(module);

	Spi *const spi_module = (module->hw);
1000bab8:	6803      	ldr	r3, [r0, #0]

	if (spi_module == (void *)SPI0) {
1000baba:	4a0d      	ldr	r2, [pc, #52]	; (1000baf0 <spi_disable+0x40>)
1000babc:	4293      	cmp	r3, r2
1000babe:	d109      	bne.n	1000bad4 <spi_disable+0x24>
		system_clock_peripheral_disable(PERIPHERAL_SPI0_SCK_CLK);
1000bac0:	2041      	movs	r0, #65	; 0x41
1000bac2:	4c0c      	ldr	r4, [pc, #48]	; (1000baf4 <spi_disable+0x44>)
1000bac4:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI0_SCK_PHASE);
1000bac6:	2026      	movs	r0, #38	; 0x26
1000bac8:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI0_IF);
1000baca:	2038      	movs	r0, #56	; 0x38
1000bacc:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI0_CORE);
1000bace:	2001      	movs	r0, #1
1000bad0:	47a0      	blx	r4
1000bad2:	e00b      	b.n	1000baec <spi_disable+0x3c>
	} else if (spi_module == (void *)SPI1) {
1000bad4:	4a08      	ldr	r2, [pc, #32]	; (1000baf8 <spi_disable+0x48>)
1000bad6:	4293      	cmp	r3, r2
1000bad8:	d108      	bne.n	1000baec <spi_disable+0x3c>
		system_clock_peripheral_disable(PERIPHERAL_SPI1_SCK_CLK);
1000bada:	2042      	movs	r0, #66	; 0x42
1000badc:	4c05      	ldr	r4, [pc, #20]	; (1000baf4 <spi_disable+0x44>)
1000bade:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI1_SCK_PHASE);
1000bae0:	2027      	movs	r0, #39	; 0x27
1000bae2:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI1_IF);
1000bae4:	2039      	movs	r0, #57	; 0x39
1000bae6:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI1_CORE);
1000bae8:	2002      	movs	r0, #2
1000baea:	47a0      	blx	r4
#  endif

	/* Disable SPI */
	spi_module->SPI_MODULE_ENABLE.reg = (0x0ul << SPI_MODULE_ENABLE_ENABLE_Pos);
	_spi_clock_disable(module);
}
1000baec:	bd10      	pop	{r4, pc}
1000baee:	46c0      	nop			; (mov r8, r8)
1000baf0:	40006000 	.word	0x40006000
1000baf4:	1000ca85 	.word	0x1000ca85
1000baf8:	40007000 	.word	0x40007000

1000bafc <spi_reset>:
 * disable it.
 *
 * \param[in,out] module Pointer to the software instance struct
 */
void spi_reset(struct spi_module *const module)
{
1000bafc:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Spi *const spi_module = (module->hw);
1000bafe:	6804      	ldr	r4, [r0, #0]

	/* Disable the module */
	spi_disable(module);
1000bb00:	4b09      	ldr	r3, [pc, #36]	; (1000bb28 <spi_reset+0x2c>)
1000bb02:	4798      	blx	r3

	/* Software reset the module */
	if(spi_module == (void *)SPI0) {
1000bb04:	4b09      	ldr	r3, [pc, #36]	; (1000bb2c <spi_reset+0x30>)
1000bb06:	429c      	cmp	r4, r3
1000bb08:	d105      	bne.n	1000bb16 <spi_reset+0x1a>
		system_peripheral_reset(PERIPHERAL_SPI0_CORE);
1000bb0a:	2001      	movs	r0, #1
1000bb0c:	4c08      	ldr	r4, [pc, #32]	; (1000bb30 <spi_reset+0x34>)
1000bb0e:	47a0      	blx	r4
		system_peripheral_reset(PERIPHERAL_SPI0_IF);
1000bb10:	2038      	movs	r0, #56	; 0x38
1000bb12:	47a0      	blx	r4
1000bb14:	e007      	b.n	1000bb26 <spi_reset+0x2a>
	} else if (spi_module == (void *)SPI1) {
1000bb16:	4b07      	ldr	r3, [pc, #28]	; (1000bb34 <spi_reset+0x38>)
1000bb18:	429c      	cmp	r4, r3
1000bb1a:	d104      	bne.n	1000bb26 <spi_reset+0x2a>
		system_peripheral_reset(PERIPHERAL_SPI1_CORE);
1000bb1c:	2002      	movs	r0, #2
1000bb1e:	4c04      	ldr	r4, [pc, #16]	; (1000bb30 <spi_reset+0x34>)
1000bb20:	47a0      	blx	r4
		system_peripheral_reset(PERIPHERAL_SPI1_IF);
1000bb22:	2039      	movs	r0, #57	; 0x39
1000bb24:	47a0      	blx	r4
	}
}
1000bb26:	bd10      	pop	{r4, pc}
1000bb28:	1000bab1 	.word	0x1000bab1
1000bb2c:	40006000 	.word	0x40006000
1000bb30:	1000cdf1 	.word	0x1000cdf1
1000bb34:	40007000 	.word	0x40007000

1000bb38 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Spi *const hw,
		const struct spi_config *const config)
{
1000bb38:	b5f0      	push	{r4, r5, r6, r7, lr}
1000bb3a:	465f      	mov	r7, fp
1000bb3c:	4646      	mov	r6, r8
1000bb3e:	b4c0      	push	{r6, r7}
1000bb40:	b083      	sub	sp, #12
1000bb42:	0006      	movs	r6, r0
1000bb44:	4688      	mov	r8, r1
1000bb46:	0015      	movs	r5, r2
	Assert(config);

	uint8_t idx;

	/* Initialize device instance */
	module->hw = hw;
1000bb48:	6031      	str	r1, [r6, #0]

	Spi *const spi_module = (module->hw);

	/* Check if module is enabled. */
	if (spi_module->SPI_MODULE_ENABLE.reg & SPI_MODULE_ENABLE_MASK) {
1000bb4a:	7e0b      	ldrb	r3, [r1, #24]
1000bb4c:	07db      	lsls	r3, r3, #31
1000bb4e:	d501      	bpl.n	1000bb54 <spi_init+0x1c>
		spi_module->SPI_MODULE_ENABLE.reg = (0x0ul << SPI_MODULE_ENABLE_ENABLE_Pos);
1000bb50:	2300      	movs	r3, #0
1000bb52:	760b      	strb	r3, [r1, #24]
	}

	spi_reset(module);
1000bb54:	0030      	movs	r0, r6
1000bb56:	4b4a      	ldr	r3, [pc, #296]	; (1000bc80 <spi_init+0x148>)
1000bb58:	4798      	blx	r3
 */
static void _spi_clock_enable(struct spi_module *const module)
{
	Assert(module);

	Spi *const spi_module = (module->hw);
1000bb5a:	6833      	ldr	r3, [r6, #0]

	if (spi_module == (void *)SPI0) {
1000bb5c:	4a49      	ldr	r2, [pc, #292]	; (1000bc84 <spi_init+0x14c>)
1000bb5e:	4293      	cmp	r3, r2
1000bb60:	d109      	bne.n	1000bb76 <spi_init+0x3e>
		system_clock_peripheral_enable(PERIPHERAL_SPI0_SCK_CLK);
1000bb62:	2041      	movs	r0, #65	; 0x41
1000bb64:	4c48      	ldr	r4, [pc, #288]	; (1000bc88 <spi_init+0x150>)
1000bb66:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI0_SCK_PHASE);
1000bb68:	2026      	movs	r0, #38	; 0x26
1000bb6a:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI0_IF);
1000bb6c:	2038      	movs	r0, #56	; 0x38
1000bb6e:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI0_CORE);
1000bb70:	2001      	movs	r0, #1
1000bb72:	47a0      	blx	r4
1000bb74:	e00b      	b.n	1000bb8e <spi_init+0x56>
	} else if (spi_module == (void *)SPI1) {
1000bb76:	4a45      	ldr	r2, [pc, #276]	; (1000bc8c <spi_init+0x154>)
1000bb78:	4293      	cmp	r3, r2
1000bb7a:	d108      	bne.n	1000bb8e <spi_init+0x56>
		system_clock_peripheral_enable(PERIPHERAL_SPI1_SCK_CLK);
1000bb7c:	2042      	movs	r0, #66	; 0x42
1000bb7e:	4c42      	ldr	r4, [pc, #264]	; (1000bc88 <spi_init+0x150>)
1000bb80:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI1_SCK_PHASE);
1000bb82:	2027      	movs	r0, #39	; 0x27
1000bb84:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI1_IF);
1000bb86:	2039      	movs	r0, #57	; 0x39
1000bb88:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI1_CORE);
1000bb8a:	2002      	movs	r0, #2
1000bb8c:	47a0      	blx	r4
	}
#endif

	//Program the pinmux.
	struct gpio_config config_gpio;
	gpio_get_config_defaults(&config_gpio);
1000bb8e:	a801      	add	r0, sp, #4
1000bb90:	4b3f      	ldr	r3, [pc, #252]	; (1000bc90 <spi_init+0x158>)
1000bb92:	4798      	blx	r3
1000bb94:	002c      	movs	r4, r5
1000bb96:	3408      	adds	r4, #8
1000bb98:	2318      	movs	r3, #24
1000bb9a:	469b      	mov	fp, r3
1000bb9c:	44ab      	add	fp, r5
1000bb9e:	0027      	movs	r7, r4

	/* Set the pinmux for this spi module. */
	for(idx = 0; idx < 4; idx++) {
		if (config->pin_number_pad[idx] != PINMUX_UNUSED) {
1000bba0:	6820      	ldr	r0, [r4, #0]
1000bba2:	1c43      	adds	r3, r0, #1
1000bba4:	d011      	beq.n	1000bbca <spi_init+0x92>
			if (config->mode == SPI_MODE_MASTER) {
1000bba6:	782b      	ldrb	r3, [r5, #0]
1000bba8:	2b01      	cmp	r3, #1
1000bbaa:	d102      	bne.n	1000bbb2 <spi_init+0x7a>
				config_gpio.direction = GPIO_PIN_DIR_OUTPUT;
1000bbac:	466a      	mov	r2, sp
1000bbae:	7113      	strb	r3, [r2, #4]
1000bbb0:	e003      	b.n	1000bbba <spi_init+0x82>
			} else if (config->mode == SPI_MODE_SLAVE) {
1000bbb2:	2b00      	cmp	r3, #0
1000bbb4:	d101      	bne.n	1000bbba <spi_init+0x82>
				config_gpio.direction = GPIO_PIN_DIR_INPUT;
1000bbb6:	466a      	mov	r2, sp
1000bbb8:	7113      	strb	r3, [r2, #4]
			}
			gpio_pin_set_config(config->pin_number_pad[idx], &config_gpio);
1000bbba:	b2c0      	uxtb	r0, r0
1000bbbc:	a901      	add	r1, sp, #4
1000bbbe:	4b35      	ldr	r3, [pc, #212]	; (1000bc94 <spi_init+0x15c>)
1000bbc0:	4798      	blx	r3
			gpio_pinmux_cofiguration(config->pin_number_pad[idx], \
1000bbc2:	8a39      	ldrh	r1, [r7, #16]
1000bbc4:	7838      	ldrb	r0, [r7, #0]
1000bbc6:	4b34      	ldr	r3, [pc, #208]	; (1000bc98 <spi_init+0x160>)
1000bbc8:	4798      	blx	r3
1000bbca:	3404      	adds	r4, #4
	//Program the pinmux.
	struct gpio_config config_gpio;
	gpio_get_config_defaults(&config_gpio);

	/* Set the pinmux for this spi module. */
	for(idx = 0; idx < 4; idx++) {
1000bbcc:	455c      	cmp	r4, fp
1000bbce:	d1e6      	bne.n	1000bb9e <spi_init+0x66>
						(uint16_t)(config->pinmux_sel_pad[idx]));
		}
	}

	/* Set up the input clock for the module */
	spi_module->CLOCK_SOURCE_SELECT.reg = config->clock_source;
1000bbd0:	78eb      	ldrb	r3, [r5, #3]
1000bbd2:	4642      	mov	r2, r8
1000bbd4:	7413      	strb	r3, [r2, #16]

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
1000bbd6:	782b      	ldrb	r3, [r5, #0]
1000bbd8:	2b01      	cmp	r3, #1
1000bbda:	d100      	bne.n	1000bbde <spi_init+0xa6>
		/* Set the mode in SPI master mode */
		spi_module->SPI_MASTER_MODE.reg = SPI_MODE_MASTER;
1000bbdc:	7713      	strb	r3, [r2, #28]
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
1000bbde:	782b      	ldrb	r3, [r5, #0]
1000bbe0:	2b00      	cmp	r3, #0
1000bbe2:	d101      	bne.n	1000bbe8 <spi_init+0xb0>
		/* Set the mode in SPI slave mode */
		spi_module->SPI_MASTER_MODE.reg = SPI_MODE_SLAVE;
1000bbe4:	4642      	mov	r2, r8
1000bbe6:	7713      	strb	r3, [r2, #28]
		const struct spi_config *const config)
{
	Assert(module);
	Assert(config);

	Spi *const spi_module = (module->hw);
1000bbe8:	6833      	ldr	r3, [r6, #0]

	module->mode  = config->mode;
1000bbea:	782a      	ldrb	r2, [r5, #0]
1000bbec:	7172      	strb	r2, [r6, #5]

#if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
1000bbee:	782a      	ldrb	r2, [r5, #0]
1000bbf0:	2a01      	cmp	r2, #1
1000bbf2:	d101      	bne.n	1000bbf8 <spi_init+0xc0>
		spi_module->SPI_CLK_DIVIDER.reg = config->clock_divider;
1000bbf4:	792a      	ldrb	r2, [r5, #4]
1000bbf6:	829a      	strh	r2, [r3, #20]
	}
#endif

	/* Set data order */
	if (config->data_order == SPI_DATA_ORDER_LSB) {
1000bbf8:	786a      	ldrb	r2, [r5, #1]
1000bbfa:	2a04      	cmp	r2, #4
1000bbfc:	d104      	bne.n	1000bc08 <spi_init+0xd0>
		spi_module->SPI_CONFIGURATION.bit.LSB_FIRST_ENABLE = 0x1;
1000bbfe:	2124      	movs	r1, #36	; 0x24
1000bc00:	5c58      	ldrb	r0, [r3, r1]
1000bc02:	4302      	orrs	r2, r0
1000bc04:	545a      	strb	r2, [r3, r1]
1000bc06:	e004      	b.n	1000bc12 <spi_init+0xda>
	} else {
		spi_module->SPI_CONFIGURATION.bit.LSB_FIRST_ENABLE = 0x0;
1000bc08:	2124      	movs	r1, #36	; 0x24
1000bc0a:	5c5a      	ldrb	r2, [r3, r1]
1000bc0c:	2004      	movs	r0, #4
1000bc0e:	4382      	bics	r2, r0
1000bc10:	545a      	strb	r2, [r3, r1]
	}

	/* Set clock polarity and clock phase */
	switch(config->transfer_mode)
1000bc12:	78aa      	ldrb	r2, [r5, #2]
1000bc14:	2a01      	cmp	r2, #1
1000bc16:	d01a      	beq.n	1000bc4e <spi_init+0x116>
1000bc18:	2a00      	cmp	r2, #0
1000bc1a:	d004      	beq.n	1000bc26 <spi_init+0xee>
1000bc1c:	2a02      	cmp	r2, #2
1000bc1e:	d00c      	beq.n	1000bc3a <spi_init+0x102>
1000bc20:	2a03      	cmp	r2, #3
1000bc22:	d01e      	beq.n	1000bc62 <spi_init+0x12a>
1000bc24:	e026      	b.n	1000bc74 <spi_init+0x13c>
	{
		case SPI_TRANSFER_MODE_0:
			spi_module->SPI_CONFIGURATION.bit.SCK_PHASE = 0x0;
1000bc26:	2224      	movs	r2, #36	; 0x24
1000bc28:	5c99      	ldrb	r1, [r3, r2]
1000bc2a:	2002      	movs	r0, #2
1000bc2c:	4381      	bics	r1, r0
1000bc2e:	5499      	strb	r1, [r3, r2]
			spi_module->SPI_CONFIGURATION.bit.SCK_POLARITY = 0x0;
1000bc30:	5c99      	ldrb	r1, [r3, r2]
1000bc32:	3801      	subs	r0, #1
1000bc34:	4381      	bics	r1, r0
1000bc36:	5499      	strb	r1, [r3, r2]
1000bc38:	e01c      	b.n	1000bc74 <spi_init+0x13c>
			break;
		case SPI_TRANSFER_MODE_1:
			spi_module->SPI_CONFIGURATION.bit.SCK_PHASE = 0x1;
1000bc3a:	2224      	movs	r2, #36	; 0x24
1000bc3c:	5c98      	ldrb	r0, [r3, r2]
1000bc3e:	2102      	movs	r1, #2
1000bc40:	4301      	orrs	r1, r0
1000bc42:	5499      	strb	r1, [r3, r2]
			spi_module->SPI_CONFIGURATION.bit.SCK_POLARITY = 0x0;
1000bc44:	5c99      	ldrb	r1, [r3, r2]
1000bc46:	2001      	movs	r0, #1
1000bc48:	4381      	bics	r1, r0
1000bc4a:	5499      	strb	r1, [r3, r2]
1000bc4c:	e012      	b.n	1000bc74 <spi_init+0x13c>
			break;
		case SPI_TRANSFER_MODE_2:
			spi_module->SPI_CONFIGURATION.bit.SCK_PHASE = 0x0;
1000bc4e:	2224      	movs	r2, #36	; 0x24
1000bc50:	5c99      	ldrb	r1, [r3, r2]
1000bc52:	2002      	movs	r0, #2
1000bc54:	4381      	bics	r1, r0
1000bc56:	5499      	strb	r1, [r3, r2]
			spi_module->SPI_CONFIGURATION.bit.SCK_POLARITY = 0x1;
1000bc58:	5c98      	ldrb	r0, [r3, r2]
1000bc5a:	2101      	movs	r1, #1
1000bc5c:	4301      	orrs	r1, r0
1000bc5e:	5499      	strb	r1, [r3, r2]
1000bc60:	e008      	b.n	1000bc74 <spi_init+0x13c>
			break;
		case SPI_TRANSFER_MODE_3:
			spi_module->SPI_CONFIGURATION.bit.SCK_PHASE = 0x1;
1000bc62:	2224      	movs	r2, #36	; 0x24
1000bc64:	5c98      	ldrb	r0, [r3, r2]
1000bc66:	2102      	movs	r1, #2
1000bc68:	4301      	orrs	r1, r0
1000bc6a:	5499      	strb	r1, [r3, r2]
			spi_module->SPI_CONFIGURATION.bit.SCK_POLARITY = 0x1;
1000bc6c:	5c98      	ldrb	r0, [r3, r2]
1000bc6e:	2101      	movs	r1, #1
1000bc70:	4301      	orrs	r1, r0
1000bc72:	5499      	strb	r1, [r3, r2]
	module->locked                     = 0;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
1000bc74:	2000      	movs	r0, #0
1000bc76:	b003      	add	sp, #12
1000bc78:	bc0c      	pop	{r2, r3}
1000bc7a:	4690      	mov	r8, r2
1000bc7c:	469b      	mov	fp, r3
1000bc7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000bc80:	1000bafd 	.word	0x1000bafd
1000bc84:	40006000 	.word	0x40006000
1000bc88:	1000c729 	.word	0x1000c729
1000bc8c:	40007000 	.word	0x40007000
1000bc90:	1000c085 	.word	0x1000c085
1000bc94:	1000c095 	.word	0x1000c095
1000bc98:	1000c379 	.word	0x1000c379

1000bc9c <spi_transceive_buffer_wait>:
enum status_code spi_transceive_buffer_wait(
		struct spi_module *const module,
		uint8_t *tx_data,
		uint8_t *rx_data,
		uint16_t length)
{
1000bc9c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000bc9e:	b083      	sub	sp, #12
	Spi *spi_module = module->hw;
1000bca0:	6804      	ldr	r4, [r0, #0]
	uint8_t dummy = 0;
1000bca2:	2600      	movs	r6, #0
1000bca4:	466d      	mov	r5, sp
1000bca6:	71ee      	strb	r6, [r5, #7]
1000bca8:	3507      	adds	r5, #7
	uint8_t skip_mosi = 0;
	uint8_t skip_miso = 0;
	uint8_t status;
	uint16_t transfer_len = 0;

	if(spi_module == 0) {
1000bcaa:	2c00      	cmp	r4, #0
1000bcac:	d034      	beq.n	1000bd18 <spi_transceive_buffer_wait+0x7c>
		return STATUS_ERR_NOT_INITIALIZED;
	}
	if(!tx_data) {
1000bcae:	2900      	cmp	r1, #0
1000bcb0:	d104      	bne.n	1000bcbc <spi_transceive_buffer_wait+0x20>
		tx_data = &dummy;
		*tx_data = module->tx_dummy_byte;
1000bcb2:	0029      	movs	r1, r5
1000bcb4:	7980      	ldrb	r0, [r0, #6]
1000bcb6:	7028      	strb	r0, [r5, #0]
		skip_mosi = 1;
1000bcb8:	2701      	movs	r7, #1
1000bcba:	e00b      	b.n	1000bcd4 <spi_transceive_buffer_wait+0x38>
	} else if(!rx_data) {
1000bcbc:	2a00      	cmp	r2, #0
1000bcbe:	d005      	beq.n	1000bccc <spi_transceive_buffer_wait+0x30>
		rx_data = &dummy;
		skip_miso = 1;
	} else if(length == 0) {
		return STATUS_ERR_INVALID_ARG;
1000bcc0:	2017      	movs	r0, #23
		*tx_data = module->tx_dummy_byte;
		skip_mosi = 1;
	} else if(!rx_data) {
		rx_data = &dummy;
		skip_miso = 1;
	} else if(length == 0) {
1000bcc2:	2b00      	cmp	r3, #0
1000bcc4:	d029      	beq.n	1000bd1a <spi_transceive_buffer_wait+0x7e>
		uint16_t length)
{
	Spi *spi_module = module->hw;
	uint8_t dummy = 0;
	uint8_t skip_mosi = 0;
	uint8_t skip_miso = 0;
1000bcc6:	2600      	movs	r6, #0
		uint8_t *rx_data,
		uint16_t length)
{
	Spi *spi_module = module->hw;
	uint8_t dummy = 0;
	uint8_t skip_mosi = 0;
1000bcc8:	2700      	movs	r7, #0
1000bcca:	e003      	b.n	1000bcd4 <spi_transceive_buffer_wait+0x38>
		tx_data = &dummy;
		*tx_data = module->tx_dummy_byte;
		skip_mosi = 1;
	} else if(!rx_data) {
		rx_data = &dummy;
		skip_miso = 1;
1000bccc:	2601      	movs	r6, #1
		uint8_t *rx_data,
		uint16_t length)
{
	Spi *spi_module = module->hw;
	uint8_t dummy = 0;
	uint8_t skip_mosi = 0;
1000bcce:	2700      	movs	r7, #0
	if(!tx_data) {
		tx_data = &dummy;
		*tx_data = module->tx_dummy_byte;
		skip_mosi = 1;
	} else if(!rx_data) {
		rx_data = &dummy;
1000bcd0:	466a      	mov	r2, sp
1000bcd2:	3207      	adds	r2, #7
 */
static bool _spi_is_active(Spi *const spi_module)
{
	Assert(spi_module);

	return spi_module->SPI_BUS_STATUS.bit.SPI_ACTIVE;
1000bcd4:	2528      	movs	r5, #40	; 0x28
1000bcd6:	5d60      	ldrb	r0, [r4, r5]
	}

	/* Check for Idle */
	do {
		status = _spi_is_active(spi_module);
	}while(status);
1000bcd8:	07c0      	lsls	r0, r0, #31
1000bcda:	d4fc      	bmi.n	1000bcd6 <spi_transceive_buffer_wait+0x3a>

	/* Clear all status registers */
	spi_module->RECEIVE_STATUS.reg;
1000bcdc:	7b20      	ldrb	r0, [r4, #12]
	spi_module->TRANSMIT_STATUS.reg;
1000bcde:	7a20      	ldrb	r0, [r4, #8]

	/* Start transfer */
	while(transfer_len < length) {
1000bce0:	2b00      	cmp	r3, #0
1000bce2:	d014      	beq.n	1000bd0e <spi_transceive_buffer_wait+0x72>
1000bce4:	2500      	movs	r5, #0
		/* Read data shifted from MISO */
		while(!_spi_is_ready_to_read(spi_module));
		*rx_data = spi_module->RECEIVE_DATA.reg;
		transfer_len++;
		if (!skip_mosi) {
			tx_data++;
1000bce6:	4278      	negs	r0, r7
1000bce8:	4147      	adcs	r7, r0
		}
		if (!skip_miso) {
			rx_data++;
1000bcea:	4270      	negs	r0, r6
1000bcec:	4146      	adcs	r6, r0
		Spi *const spi_module)
{
	Assert(spi_module);

	/* Check interrupt flag */
	return (spi_module->TRANSMIT_STATUS.bit.TX_FIFO_NOT_FULL);
1000bcee:	7a20      	ldrb	r0, [r4, #8]
	spi_module->TRANSMIT_STATUS.reg;

	/* Start transfer */
	while(transfer_len < length) {
		/* Write data to MOSI */
		while(!_spi_is_ready_to_write(spi_module));
1000bcf0:	07c0      	lsls	r0, r0, #31
1000bcf2:	d5fc      	bpl.n	1000bcee <spi_transceive_buffer_wait+0x52>
		spi_module->TRANSMIT_DATA.reg = *tx_data;
1000bcf4:	7808      	ldrb	r0, [r1, #0]
1000bcf6:	7020      	strb	r0, [r4, #0]
		Spi *const spi_module)
{
	Assert(spi_module);

	/* Check interrupt flag */
	return (spi_module->RECEIVE_STATUS.bit.RX_FIFO_NOT_EMPTY);
1000bcf8:	7b20      	ldrb	r0, [r4, #12]
	while(transfer_len < length) {
		/* Write data to MOSI */
		while(!_spi_is_ready_to_write(spi_module));
		spi_module->TRANSMIT_DATA.reg = *tx_data;
		/* Read data shifted from MISO */
		while(!_spi_is_ready_to_read(spi_module));
1000bcfa:	07c0      	lsls	r0, r0, #31
1000bcfc:	d5fc      	bpl.n	1000bcf8 <spi_transceive_buffer_wait+0x5c>
		*rx_data = spi_module->RECEIVE_DATA.reg;
1000bcfe:	7920      	ldrb	r0, [r4, #4]
1000bd00:	7010      	strb	r0, [r2, #0]
		transfer_len++;
1000bd02:	3501      	adds	r5, #1
1000bd04:	b2ad      	uxth	r5, r5
		if (!skip_mosi) {
			tx_data++;
1000bd06:	19c9      	adds	r1, r1, r7
		}
		if (!skip_miso) {
			rx_data++;
1000bd08:	1992      	adds	r2, r2, r6
	/* Clear all status registers */
	spi_module->RECEIVE_STATUS.reg;
	spi_module->TRANSMIT_STATUS.reg;

	/* Start transfer */
	while(transfer_len < length) {
1000bd0a:	42ab      	cmp	r3, r5
1000bd0c:	d1ef      	bne.n	1000bcee <spi_transceive_buffer_wait+0x52>
		Spi *const spi_module)
{
	Assert(spi_module);

	/* Check interrupt flag */
	return (spi_module->TRANSMIT_STATUS.bit.TX_FIFO_EMPTY);
1000bd0e:	7a23      	ldrb	r3, [r4, #8]
		}
	}
	/* check TXFIFO is empty */
	do {
		status = _spi_is_write_complete(spi_module);
	}while(!status);
1000bd10:	06db      	lsls	r3, r3, #27
1000bd12:	d5fc      	bpl.n	1000bd0e <spi_transceive_buffer_wait+0x72>

	return STATUS_OK;
1000bd14:	2000      	movs	r0, #0
1000bd16:	e000      	b.n	1000bd1a <spi_transceive_buffer_wait+0x7e>
	uint8_t skip_miso = 0;
	uint8_t status;
	uint16_t transfer_len = 0;

	if(spi_module == 0) {
		return STATUS_ERR_NOT_INITIALIZED;
1000bd18:	201f      	movs	r0, #31
		status = _spi_is_write_complete(spi_module);
	}while(!status);

	return STATUS_OK;

}
1000bd1a:	b003      	add	sp, #12
1000bd1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000bd1e:	46c0      	nop			; (mov r8, r8)

1000bd20 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		bool select)
{
1000bd20:	b510      	push	{r4, lr}
	uint8_t gpio_num = slave->ss_pin;
1000bd22:	7808      	ldrb	r0, [r1, #0]
	if(select) {
1000bd24:	2a00      	cmp	r2, #0
1000bd26:	d003      	beq.n	1000bd30 <spi_select_slave+0x10>
		/* ASSERT Slave select pin */
		gpio_pin_set_output_level(gpio_num, false);
1000bd28:	2100      	movs	r1, #0
1000bd2a:	4b04      	ldr	r3, [pc, #16]	; (1000bd3c <spi_select_slave+0x1c>)
1000bd2c:	4798      	blx	r3
1000bd2e:	e002      	b.n	1000bd36 <spi_select_slave+0x16>
	} else {
		/* DEASSERT Slave select pin */
		gpio_pin_set_output_level(gpio_num, true);
1000bd30:	2101      	movs	r1, #1
1000bd32:	4b02      	ldr	r3, [pc, #8]	; (1000bd3c <spi_select_slave+0x1c>)
1000bd34:	4798      	blx	r3
	}

	return STATUS_OK;
}
1000bd36:	2000      	movs	r0, #0
1000bd38:	bd10      	pop	{r4, pc}
1000bd3a:	46c0      	nop			; (mov r8, r8)
1000bd3c:	1000c2ed 	.word	0x1000c2ed

1000bd40 <dualtimer_isr_handler>:
 *
 * Dualtimer ISR handler.
 *
 */
static void dualtimer_isr_handler(void)
{
1000bd40:	b510      	push	{r4, lr}
 * \retval The interrupt status of timer1/timer2
 */
uint8_t dualtimer_get_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		return DUALTIMER0->TIMER1MIS.reg;
1000bd42:	4b0d      	ldr	r3, [pc, #52]	; (1000bd78 <dualtimer_isr_handler+0x38>)
1000bd44:	7d1b      	ldrb	r3, [r3, #20]
 * Dualtimer ISR handler.
 *
 */
static void dualtimer_isr_handler(void)
{
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER1)) {
1000bd46:	2b00      	cmp	r3, #0
1000bd48:	d007      	beq.n	1000bd5a <dualtimer_isr_handler+0x1a>
 * \param[in]     timer        Timer1/Timer2
 */
void dualtimer_clear_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		DUALTIMER0->TIMER1INTCLR.reg = 1;
1000bd4a:	2201      	movs	r2, #1
1000bd4c:	4b0a      	ldr	r3, [pc, #40]	; (1000bd78 <dualtimer_isr_handler+0x38>)
1000bd4e:	731a      	strb	r2, [r3, #12]
 */
static void dualtimer_isr_handler(void)
{
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER1)) {
		dualtimer_clear_interrupt_status(DUALTIMER_TIMER1);
		if (dualtimer_callback_timer1)
1000bd50:	4b0a      	ldr	r3, [pc, #40]	; (1000bd7c <dualtimer_isr_handler+0x3c>)
1000bd52:	681b      	ldr	r3, [r3, #0]
1000bd54:	2b00      	cmp	r3, #0
1000bd56:	d000      	beq.n	1000bd5a <dualtimer_isr_handler+0x1a>
			dualtimer_callback_timer1();
1000bd58:	4798      	blx	r3
uint8_t dualtimer_get_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		return DUALTIMER0->TIMER1MIS.reg;
	} else {
		return DUALTIMER0->TIMER2MIS.reg;
1000bd5a:	2334      	movs	r3, #52	; 0x34
1000bd5c:	4a06      	ldr	r2, [pc, #24]	; (1000bd78 <dualtimer_isr_handler+0x38>)
1000bd5e:	5cd3      	ldrb	r3, [r2, r3]
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER1)) {
		dualtimer_clear_interrupt_status(DUALTIMER_TIMER1);
		if (dualtimer_callback_timer1)
			dualtimer_callback_timer1();
	}
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER2)) {
1000bd60:	2b00      	cmp	r3, #0
1000bd62:	d007      	beq.n	1000bd74 <dualtimer_isr_handler+0x34>
void dualtimer_clear_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		DUALTIMER0->TIMER1INTCLR.reg = 1;
	} else {
		DUALTIMER0->TIMER2INTCLR.reg = 1;
1000bd64:	2101      	movs	r1, #1
1000bd66:	232c      	movs	r3, #44	; 0x2c
1000bd68:	54d1      	strb	r1, [r2, r3]
		if (dualtimer_callback_timer1)
			dualtimer_callback_timer1();
	}
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER2)) {
		dualtimer_clear_interrupt_status(DUALTIMER_TIMER2);
		if (dualtimer_callback_timer2)
1000bd6a:	4b05      	ldr	r3, [pc, #20]	; (1000bd80 <dualtimer_isr_handler+0x40>)
1000bd6c:	681b      	ldr	r3, [r3, #0]
1000bd6e:	2b00      	cmp	r3, #0
1000bd70:	d000      	beq.n	1000bd74 <dualtimer_isr_handler+0x34>
			dualtimer_callback_timer2();
1000bd72:	4798      	blx	r3
	}
}
1000bd74:	bd10      	pop	{r4, pc}
1000bd76:	46c0      	nop			; (mov r8, r8)
1000bd78:	40001000 	.word	0x40001000
1000bd7c:	10018420 	.word	0x10018420
1000bd80:	10018424 	.word	0x10018424

1000bd84 <dualtimer_get_config_defaults>:
 *
 * \param[out]  config  Pointer to a DUALTIMER module configuration structure to set
 */
void dualtimer_get_config_defaults(struct dualtimer_config *config)
{
	config->timer1.timer_enable = true;
1000bd84:	2301      	movs	r3, #1
1000bd86:	7003      	strb	r3, [r0, #0]
	config->timer2.timer_enable = true;
1000bd88:	7303      	strb	r3, [r0, #12]

	config->timer1.counter_mode = DUALTIMER_PERIODIC_MODE;
1000bd8a:	2202      	movs	r2, #2
1000bd8c:	7042      	strb	r2, [r0, #1]
	config->timer2.counter_mode = DUALTIMER_PERIODIC_MODE;
1000bd8e:	7342      	strb	r2, [r0, #13]

	config->timer1.counter_size = DUALTIMER_COUNTER_SIZE_32BIT;
1000bd90:	7083      	strb	r3, [r0, #2]
	config->timer2.counter_size = DUALTIMER_COUNTER_SIZE_32BIT;
1000bd92:	7383      	strb	r3, [r0, #14]

	config->timer1.clock_prescaler = DUALTIMER_CLOCK_PRESCALER_DIV1;
1000bd94:	2200      	movs	r2, #0
1000bd96:	70c2      	strb	r2, [r0, #3]
	config->timer2.clock_prescaler = DUALTIMER_CLOCK_PRESCALER_DIV1;
1000bd98:	73c2      	strb	r2, [r0, #15]

	config->timer1.interrup_enable = true;
1000bd9a:	7103      	strb	r3, [r0, #4]
	config->timer2.interrup_enable = true;
1000bd9c:	7403      	strb	r3, [r0, #16]

	config->timer1.load_value = 0;
1000bd9e:	6082      	str	r2, [r0, #8]
	config->timer2.load_value = 0;
1000bda0:	6142      	str	r2, [r0, #20]

	config->clock_source = DUALTIMER_CLK_INPUT_0;
1000bda2:	7602      	strb	r2, [r0, #24]
}
1000bda4:	4770      	bx	lr
1000bda6:	46c0      	nop			; (mov r8, r8)

1000bda8 <dualtimer_set_counter>:
 * \param[in]     value        Load value
 */
void dualtimer_set_counter(enum dualtimer_timer timer,
		enum dualtimer_set_register cur_bg, uint32_t value)
{
	if (timer == DUALTIMER_TIMER1) {
1000bda8:	2800      	cmp	r0, #0
1000bdaa:	d107      	bne.n	1000bdbc <dualtimer_set_counter+0x14>
		if (cur_bg == DUALTIMER_SET_CURRUNT_REG) {
1000bdac:	2900      	cmp	r1, #0
1000bdae:	d102      	bne.n	1000bdb6 <dualtimer_set_counter+0xe>
			DUALTIMER0->TIMER1LOAD.reg = value;
1000bdb0:	4b06      	ldr	r3, [pc, #24]	; (1000bdcc <dualtimer_set_counter+0x24>)
1000bdb2:	601a      	str	r2, [r3, #0]
1000bdb4:	e009      	b.n	1000bdca <dualtimer_set_counter+0x22>
		} else {
			DUALTIMER0->TIMER1BGLOAD.reg = value;
1000bdb6:	4b05      	ldr	r3, [pc, #20]	; (1000bdcc <dualtimer_set_counter+0x24>)
1000bdb8:	619a      	str	r2, [r3, #24]
1000bdba:	e006      	b.n	1000bdca <dualtimer_set_counter+0x22>
		}
	} else {
		if (cur_bg == DUALTIMER_SET_CURRUNT_REG) {
1000bdbc:	2900      	cmp	r1, #0
1000bdbe:	d102      	bne.n	1000bdc6 <dualtimer_set_counter+0x1e>
			DUALTIMER0->TIMER2LOAD.reg = value;
1000bdc0:	4b02      	ldr	r3, [pc, #8]	; (1000bdcc <dualtimer_set_counter+0x24>)
1000bdc2:	621a      	str	r2, [r3, #32]
1000bdc4:	e001      	b.n	1000bdca <dualtimer_set_counter+0x22>
			} else {
			DUALTIMER0->TIMER2BGLOAD.reg = value;
1000bdc6:	4b01      	ldr	r3, [pc, #4]	; (1000bdcc <dualtimer_set_counter+0x24>)
1000bdc8:	639a      	str	r2, [r3, #56]	; 0x38
		}
	}
}
1000bdca:	4770      	bx	lr
1000bdcc:	40001000 	.word	0x40001000

1000bdd0 <dualtimer_enable>:
 *
 * \param[in]     timer        Timer1/Timer2
 */
void dualtimer_enable(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
1000bdd0:	2800      	cmp	r0, #0
1000bdd2:	d105      	bne.n	1000bde0 <dualtimer_enable+0x10>
		DUALTIMER0->TIMER1CONTROL.reg |= DUALTIMER_TIMER1CONTROL_TIMER_ENABLE;
1000bdd4:	4a06      	ldr	r2, [pc, #24]	; (1000bdf0 <dualtimer_enable+0x20>)
1000bdd6:	7a11      	ldrb	r1, [r2, #8]
1000bdd8:	2380      	movs	r3, #128	; 0x80
1000bdda:	430b      	orrs	r3, r1
1000bddc:	7213      	strb	r3, [r2, #8]
1000bdde:	e005      	b.n	1000bdec <dualtimer_enable+0x1c>
	} else {
		DUALTIMER0->TIMER2CONTROL.reg |= DUALTIMER_TIMER2CONTROL_TIMER_ENABLE;
1000bde0:	4903      	ldr	r1, [pc, #12]	; (1000bdf0 <dualtimer_enable+0x20>)
1000bde2:	2228      	movs	r2, #40	; 0x28
1000bde4:	5c88      	ldrb	r0, [r1, r2]
1000bde6:	2380      	movs	r3, #128	; 0x80
1000bde8:	4303      	orrs	r3, r0
1000bdea:	548b      	strb	r3, [r1, r2]
	}
}
1000bdec:	4770      	bx	lr
1000bdee:	46c0      	nop			; (mov r8, r8)
1000bdf0:	40001000 	.word	0x40001000

1000bdf4 <dualtimer_disable>:
 *
 * \param[in]     timer        Timer1/Timer2
 */
void dualtimer_disable(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
1000bdf4:	2800      	cmp	r0, #0
1000bdf6:	d105      	bne.n	1000be04 <dualtimer_disable+0x10>
		DUALTIMER0->TIMER1CONTROL.reg &= ~DUALTIMER_TIMER1CONTROL_TIMER_ENABLE;
1000bdf8:	4a06      	ldr	r2, [pc, #24]	; (1000be14 <dualtimer_disable+0x20>)
1000bdfa:	7a11      	ldrb	r1, [r2, #8]
1000bdfc:	237f      	movs	r3, #127	; 0x7f
1000bdfe:	400b      	ands	r3, r1
1000be00:	7213      	strb	r3, [r2, #8]
1000be02:	e005      	b.n	1000be10 <dualtimer_disable+0x1c>
	} else {
		DUALTIMER0->TIMER2CONTROL.reg &= ~DUALTIMER_TIMER2CONTROL_TIMER_ENABLE;
1000be04:	4903      	ldr	r1, [pc, #12]	; (1000be14 <dualtimer_disable+0x20>)
1000be06:	2228      	movs	r2, #40	; 0x28
1000be08:	5c88      	ldrb	r0, [r1, r2]
1000be0a:	237f      	movs	r3, #127	; 0x7f
1000be0c:	4003      	ands	r3, r0
1000be0e:	548b      	strb	r3, [r1, r2]
	}
}
1000be10:	4770      	bx	lr
1000be12:	46c0      	nop			; (mov r8, r8)
1000be14:	40001000 	.word	0x40001000

1000be18 <dualtimer_init>:
 * \param[in]     config       Pointer to the Dualtimer configuration options struct
 *
 * \return Status of the initialization procedure.
 */
void dualtimer_init(const struct dualtimer_config *config)
{
1000be18:	b570      	push	{r4, r5, r6, lr}
1000be1a:	0004      	movs	r4, r0
	uint8_t regval = 0;

	/* Global reset */
	system_peripheral_reset(PERIPHERAL_DUALT_TIMER);
1000be1c:	2004      	movs	r0, #4
1000be1e:	4b39      	ldr	r3, [pc, #228]	; (1000bf04 <dualtimer_init+0xec>)
1000be20:	4798      	blx	r3

	/* Common config */
	if (config->timer1.timer_enable || config->timer2.timer_enable) {
1000be22:	7823      	ldrb	r3, [r4, #0]
1000be24:	2b00      	cmp	r3, #0
1000be26:	d102      	bne.n	1000be2e <dualtimer_init+0x16>
1000be28:	7b23      	ldrb	r3, [r4, #12]
1000be2a:	2b00      	cmp	r3, #0
1000be2c:	d065      	beq.n	1000befa <dualtimer_init+0xe2>
		LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |=
1000be2e:	4936      	ldr	r1, [pc, #216]	; (1000bf08 <dualtimer_init+0xf0>)
1000be30:	68ca      	ldr	r2, [r1, #12]
1000be32:	2320      	movs	r3, #32
1000be34:	4313      	orrs	r3, r2
1000be36:	60cb      	str	r3, [r1, #12]
		LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_DUALTIMER0_CLK_EN;
		LPMCU_MISC_REGS0->LPMCU_CTRL.bit.DUALTIMER0_CLK_SEL = config->clock_source;
1000be38:	7e22      	ldrb	r2, [r4, #24]
1000be3a:	698b      	ldr	r3, [r1, #24]
1000be3c:	2003      	movs	r0, #3
1000be3e:	4002      	ands	r2, r0
1000be40:	0112      	lsls	r2, r2, #4
1000be42:	302d      	adds	r0, #45	; 0x2d
1000be44:	4383      	bics	r3, r0
1000be46:	4313      	orrs	r3, r2
1000be48:	618b      	str	r3, [r1, #24]
	}
	
	/* Timer1 config */
	if (config->timer1.timer_enable) {
1000be4a:	7823      	ldrb	r3, [r4, #0]
1000be4c:	2b00      	cmp	r3, #0
1000be4e:	d026      	beq.n	1000be9e <dualtimer_init+0x86>
		if (config->timer1.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
1000be50:	7863      	ldrb	r3, [r4, #1]
			regval = DUALTIMER_TIMER1CONTROL_ONE_SHOT_COUNT_1;
1000be52:	2101      	movs	r1, #1
		LPMCU_MISC_REGS0->LPMCU_CTRL.bit.DUALTIMER0_CLK_SEL = config->clock_source;
	}
	
	/* Timer1 config */
	if (config->timer1.timer_enable) {
		if (config->timer1.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
1000be54:	2b00      	cmp	r3, #0
1000be56:	d003      	beq.n	1000be60 <dualtimer_init+0x48>
			regval = DUALTIMER_TIMER1CONTROL_ONE_SHOT_COUNT_1;
		} else if (config->timer1.counter_mode == DUALTIMER_FREE_RUNNING_MODE) {
			regval = DUALTIMER_TIMER1CONTROL_TIMER_MODE_0;
		} else if (config->timer1.counter_mode == DUALTIMER_PERIODIC_MODE) {
			regval = DUALTIMER_TIMER1CONTROL_TIMER_MODE_1;
1000be58:	3b02      	subs	r3, #2
1000be5a:	425d      	negs	r5, r3
1000be5c:	415d      	adcs	r5, r3
1000be5e:	01a9      	lsls	r1, r5, #6
		}
		regval |= (DUALTIMER_TIMER1CONTROL_TIMER_SIZE &
1000be60:	78a2      	ldrb	r2, [r4, #2]
1000be62:	0052      	lsls	r2, r2, #1
1000be64:	2502      	movs	r5, #2
1000be66:	402a      	ands	r2, r5
1000be68:	78e3      	ldrb	r3, [r4, #3]
1000be6a:	009b      	lsls	r3, r3, #2
1000be6c:	350a      	adds	r5, #10
1000be6e:	402b      	ands	r3, r5
1000be70:	431a      	orrs	r2, r3
1000be72:	0015      	movs	r5, r2
1000be74:	430d      	orrs	r5, r1
				((config->timer1.counter_size) << DUALTIMER_TIMER1CONTROL_TIMER_SIZE_Pos)) |
				DUALTIMER_TIMER1CONTROL_TIMERPRE(config->timer1.clock_prescaler);
		if (config->timer1.interrup_enable) {
1000be76:	7923      	ldrb	r3, [r4, #4]
1000be78:	2b00      	cmp	r3, #0
1000be7a:	d001      	beq.n	1000be80 <dualtimer_init+0x68>
			regval |= DUALTIMER_TIMER1CONTROL_INTERRUPT_ENABLE;
1000be7c:	2320      	movs	r3, #32
1000be7e:	431d      	orrs	r5, r3
		}
		DUALTIMER0->TIMER1LOAD.reg = config->timer1.load_value;
1000be80:	4b22      	ldr	r3, [pc, #136]	; (1000bf0c <dualtimer_init+0xf4>)
1000be82:	68a2      	ldr	r2, [r4, #8]
1000be84:	601a      	str	r2, [r3, #0]
		DUALTIMER0->TIMER1CONTROL.reg = regval;
1000be86:	721d      	strb	r5, [r3, #8]
		LPMCU_MISC_REGS0->DUALTIMER0_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER0_CTRL_CNTR_1_ENABLE;
1000be88:	491f      	ldr	r1, [pc, #124]	; (1000bf08 <dualtimer_init+0xf0>)
1000be8a:	22c4      	movs	r2, #196	; 0xc4
1000be8c:	0052      	lsls	r2, r2, #1
1000be8e:	5c88      	ldrb	r0, [r1, r2]
1000be90:	2301      	movs	r3, #1
1000be92:	4303      	orrs	r3, r0
1000be94:	548b      	strb	r3, [r1, r2]
		dualtimer_enable(DUALTIMER_TIMER1);
1000be96:	2000      	movs	r0, #0
1000be98:	4b1d      	ldr	r3, [pc, #116]	; (1000bf10 <dualtimer_init+0xf8>)
1000be9a:	4798      	blx	r3
1000be9c:	e000      	b.n	1000bea0 <dualtimer_init+0x88>
 *
 * \return Status of the initialization procedure.
 */
void dualtimer_init(const struct dualtimer_config *config)
{
	uint8_t regval = 0;
1000be9e:	2500      	movs	r5, #0
		LPMCU_MISC_REGS0->DUALTIMER0_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER0_CTRL_CNTR_1_ENABLE;
		dualtimer_enable(DUALTIMER_TIMER1);
	}

	/* Timer2 config */
	if (config->timer2.timer_enable) {
1000bea0:	7b23      	ldrb	r3, [r4, #12]
1000bea2:	2b00      	cmp	r3, #0
1000bea4:	d029      	beq.n	1000befa <dualtimer_init+0xe2>
		if (config->timer2.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
1000bea6:	7b63      	ldrb	r3, [r4, #13]
1000bea8:	2b00      	cmp	r3, #0
1000beaa:	d005      	beq.n	1000beb8 <dualtimer_init+0xa0>
			regval = DUALTIMER_TIMER2CONTROL_ONE_SHOT_COUNT_1;
		} else if (config->timer2.counter_mode == DUALTIMER_FREE_RUNNING_MODE) {
1000beac:	2b01      	cmp	r3, #1
1000beae:	d005      	beq.n	1000bebc <dualtimer_init+0xa4>
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_0;
		} else if (config->timer2.counter_mode == DUALTIMER_PERIODIC_MODE) {
1000beb0:	2b02      	cmp	r3, #2
1000beb2:	d104      	bne.n	1000bebe <dualtimer_init+0xa6>
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_1;
1000beb4:	2540      	movs	r5, #64	; 0x40
1000beb6:	e002      	b.n	1000bebe <dualtimer_init+0xa6>
	}

	/* Timer2 config */
	if (config->timer2.timer_enable) {
		if (config->timer2.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
			regval = DUALTIMER_TIMER2CONTROL_ONE_SHOT_COUNT_1;
1000beb8:	2501      	movs	r5, #1
1000beba:	e000      	b.n	1000bebe <dualtimer_init+0xa6>
		} else if (config->timer2.counter_mode == DUALTIMER_FREE_RUNNING_MODE) {
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_0;
1000bebc:	2500      	movs	r5, #0
		} else if (config->timer2.counter_mode == DUALTIMER_PERIODIC_MODE) {
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_1;
		}
		regval |= (DUALTIMER_TIMER2CONTROL_TIMER_SIZE &
1000bebe:	7ba3      	ldrb	r3, [r4, #14]
1000bec0:	005b      	lsls	r3, r3, #1
1000bec2:	2102      	movs	r1, #2
1000bec4:	4019      	ands	r1, r3
1000bec6:	7be2      	ldrb	r2, [r4, #15]
1000bec8:	0092      	lsls	r2, r2, #2
1000beca:	230c      	movs	r3, #12
1000becc:	4013      	ands	r3, r2
1000bece:	430b      	orrs	r3, r1
1000bed0:	431d      	orrs	r5, r3
				((config->timer2.counter_size) << DUALTIMER_TIMER2CONTROL_TIMER_SIZE_Pos)) |
				DUALTIMER_TIMER2CONTROL_TIMERPRE(config->timer2.clock_prescaler);
		if (config->timer2.interrup_enable) {
1000bed2:	7c23      	ldrb	r3, [r4, #16]
1000bed4:	2b00      	cmp	r3, #0
1000bed6:	d001      	beq.n	1000bedc <dualtimer_init+0xc4>
			regval |= DUALTIMER_TIMER2CONTROL_INTERRUPT_ENABLE;
1000bed8:	2320      	movs	r3, #32
1000beda:	431d      	orrs	r5, r3
		}
		DUALTIMER0->TIMER2LOAD.reg = config->timer2.load_value;
1000bedc:	6962      	ldr	r2, [r4, #20]
1000bede:	4b0b      	ldr	r3, [pc, #44]	; (1000bf0c <dualtimer_init+0xf4>)
1000bee0:	621a      	str	r2, [r3, #32]
		DUALTIMER0->TIMER2CONTROL.reg = regval;
1000bee2:	2228      	movs	r2, #40	; 0x28
1000bee4:	549d      	strb	r5, [r3, r2]
		LPMCU_MISC_REGS0->DUALTIMER0_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER0_CTRL_CNTR_2_ENABLE;
1000bee6:	4908      	ldr	r1, [pc, #32]	; (1000bf08 <dualtimer_init+0xf0>)
1000bee8:	3261      	adds	r2, #97	; 0x61
1000beea:	32ff      	adds	r2, #255	; 0xff
1000beec:	5c88      	ldrb	r0, [r1, r2]
1000beee:	2302      	movs	r3, #2
1000bef0:	4303      	orrs	r3, r0
1000bef2:	548b      	strb	r3, [r1, r2]
		dualtimer_enable(DUALTIMER_TIMER2);
1000bef4:	2001      	movs	r0, #1
1000bef6:	4b06      	ldr	r3, [pc, #24]	; (1000bf10 <dualtimer_init+0xf8>)
1000bef8:	4798      	blx	r3
	}

	system_register_isr(RAM_ISR_TABLE_DUALTIMER_INDEX, (uint32_t)dualtimer_isr_handler);
1000befa:	4906      	ldr	r1, [pc, #24]	; (1000bf14 <dualtimer_init+0xfc>)
1000befc:	201e      	movs	r0, #30
1000befe:	4b06      	ldr	r3, [pc, #24]	; (1000bf18 <dualtimer_init+0x100>)
1000bf00:	4798      	blx	r3
}
1000bf02:	bd70      	pop	{r4, r5, r6, pc}
1000bf04:	1000cdf1 	.word	0x1000cdf1
1000bf08:	4000b000 	.word	0x4000b000
1000bf0c:	40001000 	.word	0x40001000
1000bf10:	1000bdd1 	.word	0x1000bdd1
1000bf14:	1000bd41 	.word	0x1000bd41
1000bf18:	1000d259 	.word	0x1000d259

1000bf1c <dualtimer_register_callback>:
 *
 * \param[in]     callback_func Pointer to callback function
 */
void dualtimer_register_callback(enum dualtimer_timer timer, dualtimer_callback_t fun)
{
	if (timer == DUALTIMER_TIMER1) {
1000bf1c:	2800      	cmp	r0, #0
1000bf1e:	d102      	bne.n	1000bf26 <dualtimer_register_callback+0xa>
		dualtimer_callback_timer1 = fun;
1000bf20:	4b02      	ldr	r3, [pc, #8]	; (1000bf2c <dualtimer_register_callback+0x10>)
1000bf22:	6019      	str	r1, [r3, #0]
1000bf24:	e001      	b.n	1000bf2a <dualtimer_register_callback+0xe>
	} else {
		dualtimer_callback_timer2 = fun;
1000bf26:	4b02      	ldr	r3, [pc, #8]	; (1000bf30 <dualtimer_register_callback+0x14>)
1000bf28:	6019      	str	r1, [r3, #0]
	}
}
1000bf2a:	4770      	bx	lr
1000bf2c:	10018420 	.word	0x10018420
1000bf30:	10018424 	.word	0x10018424

1000bf34 <gpio_port0_isr_handler>:
 *
 * This function will enter interrupt.
 *
 */
static void gpio_port0_isr_handler(void)
{
1000bf34:	b570      	push	{r4, r5, r6, lr}
	uint32_t flag = _gpio_instances[0].hw->INTSTATUSCLEAR.reg;
1000bf36:	4b16      	ldr	r3, [pc, #88]	; (1000bf90 <gpio_port0_isr_handler+0x5c>)
1000bf38:	681d      	ldr	r5, [r3, #0]
1000bf3a:	8f29      	ldrh	r1, [r5, #56]	; 0x38
1000bf3c:	b289      	uxth	r1, r1

	for (uint8_t i = 0; i < 16; i++){
		if (flag & (1 << i)) {
1000bf3e:	07cb      	lsls	r3, r1, #31
1000bf40:	d407      	bmi.n	1000bf52 <gpio_port0_isr_handler+0x1e>
1000bf42:	2301      	movs	r3, #1
1000bf44:	2401      	movs	r4, #1
1000bf46:	0018      	movs	r0, r3
1000bf48:	0022      	movs	r2, r4
1000bf4a:	409a      	lsls	r2, r3
1000bf4c:	4211      	tst	r1, r2
1000bf4e:	d014      	beq.n	1000bf7a <gpio_port0_isr_handler+0x46>
1000bf50:	e001      	b.n	1000bf56 <gpio_port0_isr_handler+0x22>
1000bf52:	2201      	movs	r2, #1
1000bf54:	2000      	movs	r0, #0
			/* Clear interrupt flag */
			_gpio_instances[0].hw->INTSTATUSCLEAR.reg = (1 << i);
1000bf56:	b292      	uxth	r2, r2
1000bf58:	872a      	strh	r2, [r5, #56]	; 0x38
			if ((_gpio_instances[0].callback_enable_mask & (1 << i)) && \
1000bf5a:	2346      	movs	r3, #70	; 0x46
1000bf5c:	4a0c      	ldr	r2, [pc, #48]	; (1000bf90 <gpio_port0_isr_handler+0x5c>)
1000bf5e:	5ad3      	ldrh	r3, [r2, r3]
1000bf60:	4103      	asrs	r3, r0
1000bf62:	07db      	lsls	r3, r3, #31
1000bf64:	d50c      	bpl.n	1000bf80 <gpio_port0_isr_handler+0x4c>
                    (_gpio_instances[0].callback_reg_mask & (1 << i)))
1000bf66:	2344      	movs	r3, #68	; 0x44

	for (uint8_t i = 0; i < 16; i++){
		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[0].hw->INTSTATUSCLEAR.reg = (1 << i);
			if ((_gpio_instances[0].callback_enable_mask & (1 << i)) && \
1000bf68:	5ad3      	ldrh	r3, [r2, r3]
1000bf6a:	4103      	asrs	r3, r0
1000bf6c:	07db      	lsls	r3, r3, #31
1000bf6e:	d507      	bpl.n	1000bf80 <gpio_port0_isr_handler+0x4c>
                    (_gpio_instances[0].callback_reg_mask & (1 << i)))
                _gpio_instances[0].callback[i]();
1000bf70:	0080      	lsls	r0, r0, #2
1000bf72:	1810      	adds	r0, r2, r0
1000bf74:	6843      	ldr	r3, [r0, #4]
1000bf76:	4798      	blx	r3
1000bf78:	e002      	b.n	1000bf80 <gpio_port0_isr_handler+0x4c>
1000bf7a:	3301      	adds	r3, #1
 */
static void gpio_port0_isr_handler(void)
{
	uint32_t flag = _gpio_instances[0].hw->INTSTATUSCLEAR.reg;

	for (uint8_t i = 0; i < 16; i++){
1000bf7c:	2b10      	cmp	r3, #16
1000bf7e:	d1e2      	bne.n	1000bf46 <gpio_port0_isr_handler+0x12>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
1000bf80:	2180      	movs	r1, #128	; 0x80
1000bf82:	0409      	lsls	r1, r1, #16
1000bf84:	23c0      	movs	r3, #192	; 0xc0
1000bf86:	005b      	lsls	r3, r3, #1
1000bf88:	4a02      	ldr	r2, [pc, #8]	; (1000bf94 <gpio_port0_isr_handler+0x60>)
1000bf8a:	50d1      	str	r1, [r2, r3]
                _gpio_instances[0].callback[i]();
			break;
		}
	}
	NVIC_ClearPendingIRQ(GPIO0_IRQn);
}
1000bf8c:	bd70      	pop	{r4, r5, r6, pc}
1000bf8e:	46c0      	nop			; (mov r8, r8)
1000bf90:	1001a0a0 	.word	0x1001a0a0
1000bf94:	e000e100 	.word	0xe000e100

1000bf98 <gpio_port1_isr_handler>:
 *
 * This function will enter interrupt.
 *
 */
static void gpio_port1_isr_handler(void)
{
1000bf98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t flag = _gpio_instances[1].hw->INTSTATUSCLEAR.reg;
1000bf9a:	4b18      	ldr	r3, [pc, #96]	; (1000bffc <gpio_port1_isr_handler+0x64>)
1000bf9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
1000bf9e:	8f1e      	ldrh	r6, [r3, #56]	; 0x38
1000bfa0:	b2b6      	uxth	r6, r6
1000bfa2:	0037      	movs	r7, r6
1000bfa4:	2400      	movs	r4, #0

	for (uint8_t i = 0; i < 16; i++){
		/* For AON wakeup pin clear interrupt */
		if (flag & ((1<<15) | (1<<14) | (1<<13))) {
1000bfa6:	0b76      	lsrs	r6, r6, #13
1000bfa8:	0376      	lsls	r6, r6, #13
			aon_handle_ext_wakeup_isr();
		}

		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[1].hw->INTSTATUSCLEAR.reg = (1 << i);
1000bfaa:	4d14      	ldr	r5, [pc, #80]	; (1000bffc <gpio_port1_isr_handler+0x64>)
{
	uint32_t flag = _gpio_instances[1].hw->INTSTATUSCLEAR.reg;

	for (uint8_t i = 0; i < 16; i++){
		/* For AON wakeup pin clear interrupt */
		if (flag & ((1<<15) | (1<<14) | (1<<13))) {
1000bfac:	2e00      	cmp	r6, #0
1000bfae:	d001      	beq.n	1000bfb4 <gpio_port1_isr_handler+0x1c>
			aon_handle_ext_wakeup_isr();
1000bfb0:	4b13      	ldr	r3, [pc, #76]	; (1000c000 <gpio_port1_isr_handler+0x68>)
1000bfb2:	4798      	blx	r3
		}

		if (flag & (1 << i)) {
1000bfb4:	0022      	movs	r2, r4
1000bfb6:	2301      	movs	r3, #1
1000bfb8:	40a3      	lsls	r3, r4
1000bfba:	421f      	tst	r7, r3
1000bfbc:	d013      	beq.n	1000bfe6 <gpio_port1_isr_handler+0x4e>
			/* Clear interrupt flag */
			_gpio_instances[1].hw->INTSTATUSCLEAR.reg = (1 << i);
1000bfbe:	b29b      	uxth	r3, r3
1000bfc0:	6ca9      	ldr	r1, [r5, #72]	; 0x48
1000bfc2:	870b      	strh	r3, [r1, #56]	; 0x38
			if ((_gpio_instances[1].callback_enable_mask & (1 << i)) && \
1000bfc4:	238e      	movs	r3, #142	; 0x8e
1000bfc6:	5aeb      	ldrh	r3, [r5, r3]
1000bfc8:	4123      	asrs	r3, r4
1000bfca:	07db      	lsls	r3, r3, #31
1000bfcc:	d50b      	bpl.n	1000bfe6 <gpio_port1_isr_handler+0x4e>
			(_gpio_instances[1].callback_reg_mask & (1 << i))) {
1000bfce:	238c      	movs	r3, #140	; 0x8c
		}

		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[1].hw->INTSTATUSCLEAR.reg = (1 << i);
			if ((_gpio_instances[1].callback_enable_mask & (1 << i)) && \
1000bfd0:	490a      	ldr	r1, [pc, #40]	; (1000bffc <gpio_port1_isr_handler+0x64>)
1000bfd2:	5acb      	ldrh	r3, [r1, r3]
1000bfd4:	4123      	asrs	r3, r4
1000bfd6:	07db      	lsls	r3, r3, #31
1000bfd8:	d505      	bpl.n	1000bfe6 <gpio_port1_isr_handler+0x4e>
			(_gpio_instances[1].callback_reg_mask & (1 << i))) {
				_gpio_instances[1].callback[i]();
1000bfda:	3212      	adds	r2, #18
1000bfdc:	0092      	lsls	r2, r2, #2
1000bfde:	188a      	adds	r2, r1, r2
1000bfe0:	6853      	ldr	r3, [r2, #4]
1000bfe2:	4798      	blx	r3
				break;
1000bfe4:	e002      	b.n	1000bfec <gpio_port1_isr_handler+0x54>
1000bfe6:	3401      	adds	r4, #1
 */
static void gpio_port1_isr_handler(void)
{
	uint32_t flag = _gpio_instances[1].hw->INTSTATUSCLEAR.reg;

	for (uint8_t i = 0; i < 16; i++){
1000bfe8:	2c10      	cmp	r4, #16
1000bfea:	d1df      	bne.n	1000bfac <gpio_port1_isr_handler+0x14>
1000bfec:	2180      	movs	r1, #128	; 0x80
1000bfee:	0449      	lsls	r1, r1, #17
1000bff0:	23c0      	movs	r3, #192	; 0xc0
1000bff2:	005b      	lsls	r3, r3, #1
1000bff4:	4a03      	ldr	r2, [pc, #12]	; (1000c004 <gpio_port1_isr_handler+0x6c>)
1000bff6:	50d1      	str	r1, [r2, r3]
				break;
			}
		}
	}
	NVIC_ClearPendingIRQ(GPIO1_IRQn);
}
1000bff8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000bffa:	46c0      	nop			; (mov r8, r8)
1000bffc:	1001a0a0 	.word	0x1001a0a0
1000c000:	0001bc51 	.word	0x0001bc51
1000c004:	e000e100 	.word	0xe000e100

1000c008 <gpio_port2_isr_handler>:
 *
 * This function will enter interrupt.
 *
 */
static void gpio_port2_isr_handler(void)
{
1000c008:	b510      	push	{r4, lr}
	uint32_t flag = _gpio_instances[2].hw->INTSTATUSCLEAR.reg;
1000c00a:	2390      	movs	r3, #144	; 0x90
1000c00c:	4a1b      	ldr	r2, [pc, #108]	; (1000c07c <gpio_port2_isr_handler+0x74>)
1000c00e:	58d2      	ldr	r2, [r2, r3]
1000c010:	8f13      	ldrh	r3, [r2, #56]	; 0x38
1000c012:	b29b      	uxth	r3, r3

	for (uint8_t i = 12; i < 16; i++){
		if (flag & (1 << i)) {
1000c014:	04d9      	lsls	r1, r3, #19
1000c016:	d414      	bmi.n	1000c042 <gpio_port2_isr_handler+0x3a>
1000c018:	0499      	lsls	r1, r3, #18
1000c01a:	d40a      	bmi.n	1000c032 <gpio_port2_isr_handler+0x2a>
1000c01c:	0459      	lsls	r1, r3, #17
1000c01e:	d40c      	bmi.n	1000c03a <gpio_port2_isr_handler+0x32>
1000c020:	0bdb      	lsrs	r3, r3, #15
1000c022:	03db      	lsls	r3, r3, #15
1000c024:	b29b      	uxth	r3, r3
1000c026:	2b00      	cmp	r3, #0
1000c028:	d020      	beq.n	1000c06c <gpio_port2_isr_handler+0x64>
1000c02a:	2380      	movs	r3, #128	; 0x80
1000c02c:	021b      	lsls	r3, r3, #8
1000c02e:	210f      	movs	r1, #15
1000c030:	e00a      	b.n	1000c048 <gpio_port2_isr_handler+0x40>
1000c032:	2380      	movs	r3, #128	; 0x80
1000c034:	019b      	lsls	r3, r3, #6
1000c036:	210d      	movs	r1, #13
1000c038:	e006      	b.n	1000c048 <gpio_port2_isr_handler+0x40>
1000c03a:	2380      	movs	r3, #128	; 0x80
1000c03c:	01db      	lsls	r3, r3, #7
1000c03e:	210e      	movs	r1, #14
1000c040:	e002      	b.n	1000c048 <gpio_port2_isr_handler+0x40>
1000c042:	2380      	movs	r3, #128	; 0x80
1000c044:	015b      	lsls	r3, r3, #5
1000c046:	210c      	movs	r1, #12
			/* Clear interrupt flag */
			_gpio_instances[2].hw->INTSTATUSCLEAR.reg = (1 << i);
1000c048:	b29b      	uxth	r3, r3
1000c04a:	8713      	strh	r3, [r2, #56]	; 0x38
			if ((_gpio_instances[2].callback_enable_mask & (1 << i)) && \
1000c04c:	23d6      	movs	r3, #214	; 0xd6
1000c04e:	4a0b      	ldr	r2, [pc, #44]	; (1000c07c <gpio_port2_isr_handler+0x74>)
1000c050:	5ad3      	ldrh	r3, [r2, r3]
1000c052:	410b      	asrs	r3, r1
1000c054:	07db      	lsls	r3, r3, #31
1000c056:	d509      	bpl.n	1000c06c <gpio_port2_isr_handler+0x64>
                    (_gpio_instances[2].callback_reg_mask & (1 << i)))
1000c058:	23d4      	movs	r3, #212	; 0xd4

	for (uint8_t i = 12; i < 16; i++){
		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[2].hw->INTSTATUSCLEAR.reg = (1 << i);
			if ((_gpio_instances[2].callback_enable_mask & (1 << i)) && \
1000c05a:	5ad3      	ldrh	r3, [r2, r3]
1000c05c:	410b      	asrs	r3, r1
1000c05e:	07db      	lsls	r3, r3, #31
1000c060:	d504      	bpl.n	1000c06c <gpio_port2_isr_handler+0x64>
                    (_gpio_instances[2].callback_reg_mask & (1 << i)))
                _gpio_instances[2].callback[i]();
1000c062:	3124      	adds	r1, #36	; 0x24
1000c064:	0089      	lsls	r1, r1, #2
1000c066:	1851      	adds	r1, r2, r1
1000c068:	684b      	ldr	r3, [r1, #4]
1000c06a:	4798      	blx	r3
1000c06c:	2180      	movs	r1, #128	; 0x80
1000c06e:	0489      	lsls	r1, r1, #18
1000c070:	23c0      	movs	r3, #192	; 0xc0
1000c072:	005b      	lsls	r3, r3, #1
1000c074:	4a02      	ldr	r2, [pc, #8]	; (1000c080 <gpio_port2_isr_handler+0x78>)
1000c076:	50d1      	str	r1, [r2, r3]
			break;
		}
	}
	NVIC_ClearPendingIRQ(GPIO2_IRQn);
}
1000c078:	bd10      	pop	{r4, pc}
1000c07a:	46c0      	nop			; (mov r8, r8)
1000c07c:	1001a0a0 	.word	0x1001a0a0
1000c080:	e000e100 	.word	0xe000e100

1000c084 <gpio_get_config_defaults>:
 *  \param[out] config  Configuration structure to initialize to default values.
 */
void gpio_get_config_defaults(struct gpio_config *const config)
{
	/* Default configuration values */
	config->direction  = GPIO_PIN_DIR_INPUT;
1000c084:	2300      	movs	r3, #0
1000c086:	7003      	strb	r3, [r0, #0]
	config->input_pull = GPIO_PIN_PULL_UP;
1000c088:	2201      	movs	r2, #1
1000c08a:	7042      	strb	r2, [r0, #1]
	config->powersave  = false;
1000c08c:	7083      	strb	r3, [r0, #2]
	config->aon_wakeup = false;
1000c08e:	70c3      	strb	r3, [r0, #3]
}
1000c090:	4770      	bx	lr
1000c092:	46c0      	nop			; (mov r8, r8)

1000c094 <gpio_pin_set_config>:
 *  \retval STATUS_RESOURCE_NOT_AVAILABLE   Requested gpio is already in use.
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
1000c094:	b570      	push	{r4, r5, r6, lr}
	* GPIO_0 & GPIO_1 are used for SWD.
	*/
	if ((gpio_pin == PIN_LP_GPIO_0) || \
		(gpio_pin == PIN_LP_GPIO_1))
	{
		status = STATUS_ERR_INVALID_ARG;
1000c096:	2317      	movs	r3, #23
	enum status_code status = STATUS_OK;

	/* Following GPIO's should never be modified by user.
	* GPIO_0 & GPIO_1 are used for SWD.
	*/
	if ((gpio_pin == PIN_LP_GPIO_0) || \
1000c098:	2801      	cmp	r0, #1
1000c09a:	d800      	bhi.n	1000c09e <gpio_pin_set_config+0xa>
1000c09c:	e0c8      	b.n	1000c230 <gpio_pin_set_config+0x19c>
		(gpio_pin == PIN_LP_GPIO_1))
	{
		status = STATUS_ERR_INVALID_ARG;
	} else {
		if (gpio_pin <= 7) {
1000c09e:	2807      	cmp	r0, #7
1000c0a0:	d809      	bhi.n	1000c0b6 <gpio_pin_set_config+0x22>
			LPMCU_MISC_REGS0->PINMUX_SEL_0.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000c0a2:	4d64      	ldr	r5, [pc, #400]	; (1000c234 <gpio_pin_set_config+0x1a0>)
1000c0a4:	6c6a      	ldr	r2, [r5, #68]	; 0x44
1000c0a6:	3b10      	subs	r3, #16
1000c0a8:	4003      	ands	r3, r0
1000c0aa:	009b      	lsls	r3, r3, #2
1000c0ac:	2407      	movs	r4, #7
1000c0ae:	409c      	lsls	r4, r3
1000c0b0:	43a2      	bics	r2, r4
1000c0b2:	646a      	str	r2, [r5, #68]	; 0x44
1000c0b4:	e029      	b.n	1000c10a <gpio_pin_set_config+0x76>
		} else if (gpio_pin <= 15) {
1000c0b6:	280f      	cmp	r0, #15
1000c0b8:	d809      	bhi.n	1000c0ce <gpio_pin_set_config+0x3a>
			LPMCU_MISC_REGS0->PINMUX_SEL_1.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000c0ba:	4d5e      	ldr	r5, [pc, #376]	; (1000c234 <gpio_pin_set_config+0x1a0>)
1000c0bc:	6caa      	ldr	r2, [r5, #72]	; 0x48
1000c0be:	2307      	movs	r3, #7
1000c0c0:	4003      	ands	r3, r0
1000c0c2:	009b      	lsls	r3, r3, #2
1000c0c4:	2407      	movs	r4, #7
1000c0c6:	409c      	lsls	r4, r3
1000c0c8:	43a2      	bics	r2, r4
1000c0ca:	64aa      	str	r2, [r5, #72]	; 0x48
1000c0cc:	e01d      	b.n	1000c10a <gpio_pin_set_config+0x76>
		} else if (gpio_pin <= 23) {
1000c0ce:	2817      	cmp	r0, #23
1000c0d0:	d809      	bhi.n	1000c0e6 <gpio_pin_set_config+0x52>
			LPMCU_MISC_REGS0->PINMUX_SEL_2.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000c0d2:	4d58      	ldr	r5, [pc, #352]	; (1000c234 <gpio_pin_set_config+0x1a0>)
1000c0d4:	6cea      	ldr	r2, [r5, #76]	; 0x4c
1000c0d6:	2307      	movs	r3, #7
1000c0d8:	4003      	ands	r3, r0
1000c0da:	009b      	lsls	r3, r3, #2
1000c0dc:	2407      	movs	r4, #7
1000c0de:	409c      	lsls	r4, r3
1000c0e0:	43a2      	bics	r2, r4
1000c0e2:	64ea      	str	r2, [r5, #76]	; 0x4c
1000c0e4:	e011      	b.n	1000c10a <gpio_pin_set_config+0x76>
		} else if (44 <= gpio_pin  && gpio_pin < 48) {
1000c0e6:	0003      	movs	r3, r0
1000c0e8:	3b2c      	subs	r3, #44	; 0x2c
1000c0ea:	2b03      	cmp	r3, #3
1000c0ec:	d80d      	bhi.n	1000c10a <gpio_pin_set_config+0x76>
			/* Set GPIO_MSx as digital mode */
			AON_GP_REGS0->MS_GPIO_MODE.vec.ANALOG_ENABLE_ &= ~(1 << (gpio_pin - PIN_GPIO_MS4));
1000c0ee:	4d52      	ldr	r5, [pc, #328]	; (1000c238 <gpio_pin_set_config+0x1a4>)
1000c0f0:	2482      	movs	r4, #130	; 0x82
1000c0f2:	00e4      	lsls	r4, r4, #3
1000c0f4:	5d2a      	ldrb	r2, [r5, r4]
1000c0f6:	0712      	lsls	r2, r2, #28
1000c0f8:	2601      	movs	r6, #1
1000c0fa:	409e      	lsls	r6, r3
1000c0fc:	0f12      	lsrs	r2, r2, #28
1000c0fe:	5d2b      	ldrb	r3, [r5, r4]
1000c100:	43b2      	bics	r2, r6
1000c102:	260f      	movs	r6, #15
1000c104:	43b3      	bics	r3, r6
1000c106:	4313      	orrs	r3, r2
1000c108:	552b      	strb	r3, [r5, r4]
		}
	
		if ((gpio_pin == PIN_AO_GPIO_0) || (gpio_pin == PIN_AO_GPIO_1) ||
1000c10a:	0003      	movs	r3, r0
1000c10c:	3b1d      	subs	r3, #29
1000c10e:	2b02      	cmp	r3, #2
1000c110:	d829      	bhi.n	1000c166 <gpio_pin_set_config+0xd2>
				(gpio_pin == PIN_AO_GPIO_2)) {
			/* Active Low, Always On Pull Enable Control */
			if (config->input_pull == GPIO_PIN_PULL_UP) {
1000c112:	784b      	ldrb	r3, [r1, #1]
1000c114:	2b01      	cmp	r3, #1
1000c116:	d108      	bne.n	1000c12a <gpio_pin_set_config+0x96>
				AON_GP_REGS0->AON_PULL_ENABLE.reg &= ~(1 << (31 - gpio_pin));
1000c118:	4d47      	ldr	r5, [pc, #284]	; (1000c238 <gpio_pin_set_config+0x1a4>)
1000c11a:	7d2b      	ldrb	r3, [r5, #20]
1000c11c:	241f      	movs	r4, #31
1000c11e:	1a24      	subs	r4, r4, r0
1000c120:	2201      	movs	r2, #1
1000c122:	40a2      	lsls	r2, r4
1000c124:	4393      	bics	r3, r2
1000c126:	752b      	strb	r3, [r5, #20]
1000c128:	e008      	b.n	1000c13c <gpio_pin_set_config+0xa8>
			} else {
				AON_GP_REGS0->AON_PULL_ENABLE.reg |= 1 << (31 - gpio_pin);
1000c12a:	4c43      	ldr	r4, [pc, #268]	; (1000c238 <gpio_pin_set_config+0x1a4>)
1000c12c:	7d25      	ldrb	r5, [r4, #20]
1000c12e:	221f      	movs	r2, #31
1000c130:	1a12      	subs	r2, r2, r0
1000c132:	2301      	movs	r3, #1
1000c134:	4093      	lsls	r3, r2
1000c136:	432b      	orrs	r3, r5
1000c138:	b2db      	uxtb	r3, r3
1000c13a:	7523      	strb	r3, [r4, #20]
			}
			if (config->aon_wakeup) {
1000c13c:	78ca      	ldrb	r2, [r1, #3]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000c13e:	2300      	movs	r3, #0
			if (config->input_pull == GPIO_PIN_PULL_UP) {
				AON_GP_REGS0->AON_PULL_ENABLE.reg &= ~(1 << (31 - gpio_pin));
			} else {
				AON_GP_REGS0->AON_PULL_ENABLE.reg |= 1 << (31 - gpio_pin);
			}
			if (config->aon_wakeup) {
1000c140:	2a00      	cmp	r2, #0
1000c142:	d075      	beq.n	1000c230 <gpio_pin_set_config+0x19c>
				/* Enable AON_GPIO_x to be a wakeup MCU from sleep mode */
				AON_GP_REGS0->AON_PINMUX_SEL.reg |= 1 << (4 * (31 - gpio_pin));
1000c144:	493c      	ldr	r1, [pc, #240]	; (1000c238 <gpio_pin_set_config+0x1a4>)
1000c146:	880c      	ldrh	r4, [r1, #0]
1000c148:	221f      	movs	r2, #31
1000c14a:	1a10      	subs	r0, r2, r0
1000c14c:	0080      	lsls	r0, r0, #2
1000c14e:	3301      	adds	r3, #1
1000c150:	4083      	lsls	r3, r0
1000c152:	4323      	orrs	r3, r4
1000c154:	b29b      	uxth	r3, r3
1000c156:	800b      	strh	r3, [r1, #0]
				/* Enable AON_GPIO_x to wake up the BLE domain from sleep mode */
				AON_PWR_SEQ0->GPIO_WAKEUP_CTRL.bit.BLE_ENABLE = 1;
1000c158:	4a38      	ldr	r2, [pc, #224]	; (1000c23c <gpio_pin_set_config+0x1a8>)
1000c15a:	7811      	ldrb	r1, [r2, #0]
1000c15c:	2302      	movs	r3, #2
1000c15e:	430b      	orrs	r3, r1
1000c160:	7013      	strb	r3, [r2, #0]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000c162:	2300      	movs	r3, #0
1000c164:	e064      	b.n	1000c230 <gpio_pin_set_config+0x19c>
				AON_GP_REGS0->AON_PINMUX_SEL.reg |= 1 << (4 * (31 - gpio_pin));
				/* Enable AON_GPIO_x to wake up the BLE domain from sleep mode */
				AON_PWR_SEQ0->GPIO_WAKEUP_CTRL.bit.BLE_ENABLE = 1;
			}
		} else {
			if(config->direction == GPIO_PIN_DIR_INPUT) {
1000c166:	780a      	ldrb	r2, [r1, #0]
1000c168:	2a00      	cmp	r2, #0
1000c16a:	d140      	bne.n	1000c1ee <gpio_pin_set_config+0x15a>
				if(gpio_pin < 16) {
1000c16c:	280f      	cmp	r0, #15
1000c16e:	d808      	bhi.n	1000c182 <gpio_pin_set_config+0xee>
					GPIO0->OUTENCLR.reg = (1 << gpio_pin);
1000c170:	2301      	movs	r3, #1
1000c172:	4083      	lsls	r3, r0
1000c174:	b29b      	uxth	r3, r3
1000c176:	4a32      	ldr	r2, [pc, #200]	; (1000c240 <gpio_pin_set_config+0x1ac>)
1000c178:	8293      	strh	r3, [r2, #20]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000c17a:	2300      	movs	r3, #0
					GPIO1->OUTENCLR.reg = (1 << (gpio_pin % 16));
				} else {
					GPIO2->OUTENCLR.reg = (1 << (gpio_pin % 16));
				}
				/* pull_enable. */
				if (gpio_pin < 32) {
1000c17c:	281f      	cmp	r0, #31
1000c17e:	d857      	bhi.n	1000c230 <gpio_pin_set_config+0x19c>
1000c180:	e012      	b.n	1000c1a8 <gpio_pin_set_config+0x114>
			}
		} else {
			if(config->direction == GPIO_PIN_DIR_INPUT) {
				if(gpio_pin < 16) {
					GPIO0->OUTENCLR.reg = (1 << gpio_pin);
				} else if (gpio_pin < 32){
1000c182:	281f      	cmp	r0, #31
1000c184:	d807      	bhi.n	1000c196 <gpio_pin_set_config+0x102>
					GPIO1->OUTENCLR.reg = (1 << (gpio_pin % 16));
1000c186:	220f      	movs	r2, #15
1000c188:	4002      	ands	r2, r0
1000c18a:	2301      	movs	r3, #1
1000c18c:	4093      	lsls	r3, r2
1000c18e:	b29b      	uxth	r3, r3
1000c190:	4a2c      	ldr	r2, [pc, #176]	; (1000c244 <gpio_pin_set_config+0x1b0>)
1000c192:	8293      	strh	r3, [r2, #20]
1000c194:	e008      	b.n	1000c1a8 <gpio_pin_set_config+0x114>
				} else {
					GPIO2->OUTENCLR.reg = (1 << (gpio_pin % 16));
1000c196:	230f      	movs	r3, #15
1000c198:	4018      	ands	r0, r3
1000c19a:	3b0e      	subs	r3, #14
1000c19c:	4083      	lsls	r3, r0
1000c19e:	b29b      	uxth	r3, r3
1000c1a0:	4a29      	ldr	r2, [pc, #164]	; (1000c248 <gpio_pin_set_config+0x1b4>)
1000c1a2:	8293      	strh	r3, [r2, #20]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000c1a4:	2300      	movs	r3, #0
1000c1a6:	e043      	b.n	1000c230 <gpio_pin_set_config+0x19c>
				} else {
					GPIO2->OUTENCLR.reg = (1 << (gpio_pin % 16));
				}
				/* pull_enable. */
				if (gpio_pin < 32) {
					switch(config->input_pull) {
1000c1a8:	784b      	ldrb	r3, [r1, #1]
1000c1aa:	2b01      	cmp	r3, #1
1000c1ac:	d00c      	beq.n	1000c1c8 <gpio_pin_set_config+0x134>
1000c1ae:	2b00      	cmp	r3, #0
1000c1b0:	d002      	beq.n	1000c1b8 <gpio_pin_set_config+0x124>
1000c1b2:	2b02      	cmp	r3, #2
1000c1b4:	d010      	beq.n	1000c1d8 <gpio_pin_set_config+0x144>
1000c1b6:	e03a      	b.n	1000c22e <gpio_pin_set_config+0x19a>
						case GPIO_PIN_PULL_NONE:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg |= (1 << gpio_pin);
1000c1b8:	491e      	ldr	r1, [pc, #120]	; (1000c234 <gpio_pin_set_config+0x1a0>)
1000c1ba:	6d0a      	ldr	r2, [r1, #80]	; 0x50
1000c1bc:	2301      	movs	r3, #1
1000c1be:	4083      	lsls	r3, r0
1000c1c0:	4313      	orrs	r3, r2
1000c1c2:	650b      	str	r3, [r1, #80]	; 0x50
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000c1c4:	2300      	movs	r3, #0
				/* pull_enable. */
				if (gpio_pin < 32) {
					switch(config->input_pull) {
						case GPIO_PIN_PULL_NONE:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg |= (1 << gpio_pin);
							break;
1000c1c6:	e033      	b.n	1000c230 <gpio_pin_set_config+0x19c>
						case GPIO_PIN_PULL_UP:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
1000c1c8:	491a      	ldr	r1, [pc, #104]	; (1000c234 <gpio_pin_set_config+0x1a0>)
1000c1ca:	6d0b      	ldr	r3, [r1, #80]	; 0x50
1000c1cc:	2201      	movs	r2, #1
1000c1ce:	4082      	lsls	r2, r0
1000c1d0:	4393      	bics	r3, r2
1000c1d2:	650b      	str	r3, [r1, #80]	; 0x50
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000c1d4:	2300      	movs	r3, #0
						case GPIO_PIN_PULL_NONE:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg |= (1 << gpio_pin);
							break;
						case GPIO_PIN_PULL_UP:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
							break;
1000c1d6:	e02b      	b.n	1000c230 <gpio_pin_set_config+0x19c>
						case GPIO_PIN_PULL_DOWN:
							/* Set R-Type */
							LPMCU_MISC_REGS0->RTYPE_PAD_0.reg |= (1 << gpio_pin);
1000c1d8:	4b16      	ldr	r3, [pc, #88]	; (1000c234 <gpio_pin_set_config+0x1a0>)
1000c1da:	6d59      	ldr	r1, [r3, #84]	; 0x54
1000c1dc:	2201      	movs	r2, #1
1000c1de:	4082      	lsls	r2, r0
1000c1e0:	4311      	orrs	r1, r2
1000c1e2:	6559      	str	r1, [r3, #84]	; 0x54
							/* Set REN */
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
1000c1e4:	6d19      	ldr	r1, [r3, #80]	; 0x50
1000c1e6:	4391      	bics	r1, r2
1000c1e8:	6519      	str	r1, [r3, #80]	; 0x50
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000c1ea:	2300      	movs	r3, #0
						case GPIO_PIN_PULL_DOWN:
							/* Set R-Type */
							LPMCU_MISC_REGS0->RTYPE_PAD_0.reg |= (1 << gpio_pin);
							/* Set REN */
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
							break;
1000c1ec:	e020      	b.n	1000c230 <gpio_pin_set_config+0x19c>
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000c1ee:	2300      	movs	r3, #0
						default:
							status = STATUS_ERR_INVALID_ARG;
							break;
					}
				}
			} else if(config->direction == GPIO_PIN_DIR_OUTPUT) {
1000c1f0:	2a01      	cmp	r2, #1
1000c1f2:	d11d      	bne.n	1000c230 <gpio_pin_set_config+0x19c>
				if (gpio_pin < 16) {
1000c1f4:	280f      	cmp	r0, #15
1000c1f6:	d806      	bhi.n	1000c206 <gpio_pin_set_config+0x172>
					GPIO0->OUTENSET.reg = (1 << gpio_pin);
1000c1f8:	3301      	adds	r3, #1
1000c1fa:	4083      	lsls	r3, r0
1000c1fc:	b29b      	uxth	r3, r3
1000c1fe:	4a10      	ldr	r2, [pc, #64]	; (1000c240 <gpio_pin_set_config+0x1ac>)
1000c200:	8213      	strh	r3, [r2, #16]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000c202:	2300      	movs	r3, #0
1000c204:	e014      	b.n	1000c230 <gpio_pin_set_config+0x19c>
					}
				}
			} else if(config->direction == GPIO_PIN_DIR_OUTPUT) {
				if (gpio_pin < 16) {
					GPIO0->OUTENSET.reg = (1 << gpio_pin);
				} else if (gpio_pin < 32) {
1000c206:	281f      	cmp	r0, #31
1000c208:	d808      	bhi.n	1000c21c <gpio_pin_set_config+0x188>
					GPIO1->OUTENSET.reg = (1 << (gpio_pin % 16));
1000c20a:	230f      	movs	r3, #15
1000c20c:	4018      	ands	r0, r3
1000c20e:	3b0e      	subs	r3, #14
1000c210:	4083      	lsls	r3, r0
1000c212:	b29b      	uxth	r3, r3
1000c214:	4a0b      	ldr	r2, [pc, #44]	; (1000c244 <gpio_pin_set_config+0x1b0>)
1000c216:	8213      	strh	r3, [r2, #16]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000c218:	2300      	movs	r3, #0
1000c21a:	e009      	b.n	1000c230 <gpio_pin_set_config+0x19c>
				if (gpio_pin < 16) {
					GPIO0->OUTENSET.reg = (1 << gpio_pin);
				} else if (gpio_pin < 32) {
					GPIO1->OUTENSET.reg = (1 << (gpio_pin % 16));
				} else {
					GPIO2->OUTENSET.reg = (1 << (gpio_pin % 16));
1000c21c:	230f      	movs	r3, #15
1000c21e:	4018      	ands	r0, r3
1000c220:	3b0e      	subs	r3, #14
1000c222:	4083      	lsls	r3, r0
1000c224:	b29b      	uxth	r3, r3
1000c226:	4a08      	ldr	r2, [pc, #32]	; (1000c248 <gpio_pin_set_config+0x1b4>)
1000c228:	8213      	strh	r3, [r2, #16]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000c22a:	2300      	movs	r3, #0
1000c22c:	e000      	b.n	1000c230 <gpio_pin_set_config+0x19c>
							LPMCU_MISC_REGS0->RTYPE_PAD_0.reg |= (1 << gpio_pin);
							/* Set REN */
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
							break;
						default:
							status = STATUS_ERR_INVALID_ARG;
1000c22e:	2317      	movs	r3, #23
				}
			}
		}
	}
	return status;
}
1000c230:	0018      	movs	r0, r3
1000c232:	bd70      	pop	{r4, r5, r6, pc}
1000c234:	4000b000 	.word	0x4000b000
1000c238:	4000f000 	.word	0x4000f000
1000c23c:	4000e000 	.word	0x4000e000
1000c240:	40010000 	.word	0x40010000
1000c244:	40011000 	.word	0x40011000
1000c248:	40013000 	.word	0x40013000

1000c24c <gpio_pin_get_input_level>:
 */
bool gpio_pin_get_input_level(const uint8_t gpio_pin)
{
	uint32_t regval = 0;

	if (gpio_pin < 16) {
1000c24c:	280f      	cmp	r0, #15
1000c24e:	d806      	bhi.n	1000c25e <gpio_pin_get_input_level+0x12>
		regval = GPIO0->DATA.reg;
1000c250:	4b0f      	ldr	r3, [pc, #60]	; (1000c290 <gpio_pin_get_input_level+0x44>)
1000c252:	8819      	ldrh	r1, [r3, #0]
		regval &= (1 << gpio_pin);
1000c254:	2301      	movs	r3, #1
1000c256:	4083      	lsls	r3, r0
1000c258:	0018      	movs	r0, r3
1000c25a:	4008      	ands	r0, r1
1000c25c:	e014      	b.n	1000c288 <gpio_pin_get_input_level+0x3c>
	} else if (gpio_pin < 32) {
1000c25e:	281f      	cmp	r0, #31
1000c260:	d809      	bhi.n	1000c276 <gpio_pin_get_input_level+0x2a>
		regval = GPIO1->DATA.reg;
1000c262:	4b0c      	ldr	r3, [pc, #48]	; (1000c294 <gpio_pin_get_input_level+0x48>)
1000c264:	8819      	ldrh	r1, [r3, #0]
		regval &= (1 << (gpio_pin % 16));
1000c266:	230f      	movs	r3, #15
1000c268:	4003      	ands	r3, r0
1000c26a:	001a      	movs	r2, r3
1000c26c:	2301      	movs	r3, #1
1000c26e:	4093      	lsls	r3, r2
1000c270:	0018      	movs	r0, r3
1000c272:	4008      	ands	r0, r1
1000c274:	e008      	b.n	1000c288 <gpio_pin_get_input_level+0x3c>
	} else {
		regval = GPIO2->DATA.reg;
1000c276:	4b08      	ldr	r3, [pc, #32]	; (1000c298 <gpio_pin_get_input_level+0x4c>)
1000c278:	8819      	ldrh	r1, [r3, #0]
		regval &= (1 << (gpio_pin % 16));
1000c27a:	230f      	movs	r3, #15
1000c27c:	4003      	ands	r3, r0
1000c27e:	001a      	movs	r2, r3
1000c280:	2301      	movs	r3, #1
1000c282:	4093      	lsls	r3, r2
1000c284:	0018      	movs	r0, r3
1000c286:	4008      	ands	r0, r1
	}

	return regval;
1000c288:	1e43      	subs	r3, r0, #1
1000c28a:	4198      	sbcs	r0, r3
1000c28c:	b2c0      	uxtb	r0, r0
}
1000c28e:	4770      	bx	lr
1000c290:	40010000 	.word	0x40010000
1000c294:	40011000 	.word	0x40011000
1000c298:	40013000 	.word	0x40013000

1000c29c <gpio_pin_get_output_level>:
 */
bool gpio_pin_get_output_level(const uint8_t gpio_pin)
{
	uint32_t regval = 0;

	if (gpio_pin < 16) {
1000c29c:	280f      	cmp	r0, #15
1000c29e:	d806      	bhi.n	1000c2ae <gpio_pin_get_output_level+0x12>
		regval = GPIO0->DATAOUT.reg;
1000c2a0:	4b0f      	ldr	r3, [pc, #60]	; (1000c2e0 <gpio_pin_get_output_level+0x44>)
1000c2a2:	8899      	ldrh	r1, [r3, #4]
		regval &= (1 << gpio_pin);
1000c2a4:	2301      	movs	r3, #1
1000c2a6:	4083      	lsls	r3, r0
1000c2a8:	0018      	movs	r0, r3
1000c2aa:	4008      	ands	r0, r1
1000c2ac:	e014      	b.n	1000c2d8 <gpio_pin_get_output_level+0x3c>
	} else if (gpio_pin < 32) {
1000c2ae:	281f      	cmp	r0, #31
1000c2b0:	d809      	bhi.n	1000c2c6 <gpio_pin_get_output_level+0x2a>
		regval = GPIO1->DATAOUT.reg;
1000c2b2:	4b0c      	ldr	r3, [pc, #48]	; (1000c2e4 <gpio_pin_get_output_level+0x48>)
1000c2b4:	8899      	ldrh	r1, [r3, #4]
		regval &= (1 << (gpio_pin % 16));
1000c2b6:	230f      	movs	r3, #15
1000c2b8:	4003      	ands	r3, r0
1000c2ba:	001a      	movs	r2, r3
1000c2bc:	2301      	movs	r3, #1
1000c2be:	4093      	lsls	r3, r2
1000c2c0:	0018      	movs	r0, r3
1000c2c2:	4008      	ands	r0, r1
1000c2c4:	e008      	b.n	1000c2d8 <gpio_pin_get_output_level+0x3c>
	} else {
		regval = GPIO2->DATAOUT.reg;
1000c2c6:	4b08      	ldr	r3, [pc, #32]	; (1000c2e8 <gpio_pin_get_output_level+0x4c>)
1000c2c8:	8899      	ldrh	r1, [r3, #4]
		regval &= (1 << (gpio_pin % 16));
1000c2ca:	230f      	movs	r3, #15
1000c2cc:	4003      	ands	r3, r0
1000c2ce:	001a      	movs	r2, r3
1000c2d0:	2301      	movs	r3, #1
1000c2d2:	4093      	lsls	r3, r2
1000c2d4:	0018      	movs	r0, r3
1000c2d6:	4008      	ands	r0, r1
	}

	return regval;
1000c2d8:	1e43      	subs	r3, r0, #1
1000c2da:	4198      	sbcs	r0, r3
1000c2dc:	b2c0      	uxtb	r0, r0
}
1000c2de:	4770      	bx	lr
1000c2e0:	40010000 	.word	0x40010000
1000c2e4:	40011000 	.word	0x40011000
1000c2e8:	40013000 	.word	0x40013000

1000c2ec <gpio_pin_set_output_level>:
 *
 *  \param[in] gpio_pin  Index of the GPIO pin to write to.
 *  \param[in] level     Logical level to set the given pin to.
 */
void gpio_pin_set_output_level(const uint8_t gpio_pin, const bool level)
{
1000c2ec:	b510      	push	{r4, lr}
	if (gpio_pin < 16) {
1000c2ee:	280f      	cmp	r0, #15
1000c2f0:	d810      	bhi.n	1000c314 <gpio_pin_set_output_level+0x28>
		if(level) {
1000c2f2:	2900      	cmp	r1, #0
1000c2f4:	d007      	beq.n	1000c306 <gpio_pin_set_output_level+0x1a>
			GPIO0->DATAOUT.reg |= (1 << gpio_pin);
1000c2f6:	4a1d      	ldr	r2, [pc, #116]	; (1000c36c <gpio_pin_set_output_level+0x80>)
1000c2f8:	8891      	ldrh	r1, [r2, #4]
1000c2fa:	2301      	movs	r3, #1
1000c2fc:	4083      	lsls	r3, r0
1000c2fe:	430b      	orrs	r3, r1
1000c300:	b29b      	uxth	r3, r3
1000c302:	8093      	strh	r3, [r2, #4]
1000c304:	e031      	b.n	1000c36a <gpio_pin_set_output_level+0x7e>
		} else {
			GPIO0->DATAOUT.reg &= ~(1 << gpio_pin);
1000c306:	4919      	ldr	r1, [pc, #100]	; (1000c36c <gpio_pin_set_output_level+0x80>)
1000c308:	888b      	ldrh	r3, [r1, #4]
1000c30a:	2201      	movs	r2, #1
1000c30c:	4082      	lsls	r2, r0
1000c30e:	4393      	bics	r3, r2
1000c310:	808b      	strh	r3, [r1, #4]
1000c312:	e02a      	b.n	1000c36a <gpio_pin_set_output_level+0x7e>
		}
	} else if (gpio_pin < 32) {
1000c314:	281f      	cmp	r0, #31
1000c316:	d814      	bhi.n	1000c342 <gpio_pin_set_output_level+0x56>
		if(level) {
1000c318:	2900      	cmp	r1, #0
1000c31a:	d009      	beq.n	1000c330 <gpio_pin_set_output_level+0x44>
			GPIO1->DATAOUT.reg |= (1 << (gpio_pin % 16));
1000c31c:	4914      	ldr	r1, [pc, #80]	; (1000c370 <gpio_pin_set_output_level+0x84>)
1000c31e:	888c      	ldrh	r4, [r1, #4]
1000c320:	220f      	movs	r2, #15
1000c322:	4010      	ands	r0, r2
1000c324:	2301      	movs	r3, #1
1000c326:	4083      	lsls	r3, r0
1000c328:	4323      	orrs	r3, r4
1000c32a:	b29b      	uxth	r3, r3
1000c32c:	808b      	strh	r3, [r1, #4]
1000c32e:	e01c      	b.n	1000c36a <gpio_pin_set_output_level+0x7e>
		} else {
			GPIO1->DATAOUT.reg &= ~(1 << (gpio_pin % 16));
1000c330:	490f      	ldr	r1, [pc, #60]	; (1000c370 <gpio_pin_set_output_level+0x84>)
1000c332:	888b      	ldrh	r3, [r1, #4]
1000c334:	220f      	movs	r2, #15
1000c336:	4010      	ands	r0, r2
1000c338:	3a0e      	subs	r2, #14
1000c33a:	4082      	lsls	r2, r0
1000c33c:	4393      	bics	r3, r2
1000c33e:	808b      	strh	r3, [r1, #4]
1000c340:	e013      	b.n	1000c36a <gpio_pin_set_output_level+0x7e>
		}
	} else {
		if(level) {
1000c342:	2900      	cmp	r1, #0
1000c344:	d009      	beq.n	1000c35a <gpio_pin_set_output_level+0x6e>
			GPIO2->DATAOUT.reg |= (1 << (gpio_pin % 16));
1000c346:	490b      	ldr	r1, [pc, #44]	; (1000c374 <gpio_pin_set_output_level+0x88>)
1000c348:	888c      	ldrh	r4, [r1, #4]
1000c34a:	220f      	movs	r2, #15
1000c34c:	4010      	ands	r0, r2
1000c34e:	2301      	movs	r3, #1
1000c350:	4083      	lsls	r3, r0
1000c352:	4323      	orrs	r3, r4
1000c354:	b29b      	uxth	r3, r3
1000c356:	808b      	strh	r3, [r1, #4]
1000c358:	e007      	b.n	1000c36a <gpio_pin_set_output_level+0x7e>
		} else {
			GPIO2->DATAOUT.reg &= ~(1 << (gpio_pin % 16));
1000c35a:	4906      	ldr	r1, [pc, #24]	; (1000c374 <gpio_pin_set_output_level+0x88>)
1000c35c:	888b      	ldrh	r3, [r1, #4]
1000c35e:	220f      	movs	r2, #15
1000c360:	4010      	ands	r0, r2
1000c362:	3a0e      	subs	r2, #14
1000c364:	4082      	lsls	r2, r0
1000c366:	4393      	bics	r3, r2
1000c368:	808b      	strh	r3, [r1, #4]
		}
	}
}
1000c36a:	bd10      	pop	{r4, pc}
1000c36c:	40010000 	.word	0x40010000
1000c370:	40011000 	.word	0x40011000
1000c374:	40013000 	.word	0x40013000

1000c378 <gpio_pinmux_cofiguration>:
 *
 *  \param[in] gpio_pin   Index of the GPIO pin to toggle.
 *  \param[in] pinmux_sel PINMUX selection.
 */
void gpio_pinmux_cofiguration(const uint8_t gpio_pin, uint16_t pinmux_sel)
{
1000c378:	b570      	push	{r4, r5, r6, lr}
	uint8_t megamux_sel = (pinmux_sel >> 8) & 0xFF;
1000c37a:	0a0d      	lsrs	r5, r1, #8

	pinmux_sel &= 0xFF;
1000c37c:	23ff      	movs	r3, #255	; 0xff
1000c37e:	4019      	ands	r1, r3

	if (gpio_pin <= 7) {
1000c380:	2807      	cmp	r0, #7
1000c382:	d833      	bhi.n	1000c3ec <gpio_pinmux_cofiguration+0x74>
		LPMCU_MISC_REGS0->PINMUX_SEL_0.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000c384:	4a4e      	ldr	r2, [pc, #312]	; (1000c4c0 <gpio_pinmux_cofiguration+0x148>)
1000c386:	6c54      	ldr	r4, [r2, #68]	; 0x44
1000c388:	3bf8      	subs	r3, #248	; 0xf8
1000c38a:	4003      	ands	r3, r0
1000c38c:	009b      	lsls	r3, r3, #2
1000c38e:	2607      	movs	r6, #7
1000c390:	409e      	lsls	r6, r3
1000c392:	43b4      	bics	r4, r6
1000c394:	6454      	str	r4, [r2, #68]	; 0x44
		LPMCU_MISC_REGS0->PINMUX_SEL_0.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
1000c396:	6c54      	ldr	r4, [r2, #68]	; 0x44
1000c398:	000e      	movs	r6, r1
1000c39a:	409e      	lsls	r6, r3
1000c39c:	0033      	movs	r3, r6
1000c39e:	4323      	orrs	r3, r4
1000c3a0:	6453      	str	r3, [r2, #68]	; 0x44
		if (pinmux_sel == 0x01) {
1000c3a2:	2901      	cmp	r1, #1
1000c3a4:	d000      	beq.n	1000c3a8 <gpio_pinmux_cofiguration+0x30>
1000c3a6:	e08a      	b.n	1000c4be <gpio_pinmux_cofiguration+0x146>
			if (gpio_pin <= 3) {
1000c3a8:	2803      	cmp	r0, #3
1000c3aa:	d80f      	bhi.n	1000c3cc <gpio_pinmux_cofiguration+0x54>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_0.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000c3ac:	0011      	movs	r1, r2
1000c3ae:	22d0      	movs	r2, #208	; 0xd0
1000c3b0:	0052      	lsls	r2, r2, #1
1000c3b2:	588c      	ldr	r4, [r1, r2]
1000c3b4:	2303      	movs	r3, #3
1000c3b6:	4018      	ands	r0, r3
1000c3b8:	00c0      	lsls	r0, r0, #3
1000c3ba:	333c      	adds	r3, #60	; 0x3c
1000c3bc:	4083      	lsls	r3, r0
1000c3be:	439c      	bics	r4, r3
1000c3c0:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_0.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000c3c2:	588b      	ldr	r3, [r1, r2]
1000c3c4:	4085      	lsls	r5, r0
1000c3c6:	431d      	orrs	r5, r3
1000c3c8:	508d      	str	r5, [r1, r2]
1000c3ca:	e078      	b.n	1000c4be <gpio_pinmux_cofiguration+0x146>
			} else if (gpio_pin <= 7) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_1.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000c3cc:	493c      	ldr	r1, [pc, #240]	; (1000c4c0 <gpio_pinmux_cofiguration+0x148>)
1000c3ce:	22d2      	movs	r2, #210	; 0xd2
1000c3d0:	0052      	lsls	r2, r2, #1
1000c3d2:	588c      	ldr	r4, [r1, r2]
1000c3d4:	2303      	movs	r3, #3
1000c3d6:	4018      	ands	r0, r3
1000c3d8:	00c0      	lsls	r0, r0, #3
1000c3da:	333c      	adds	r3, #60	; 0x3c
1000c3dc:	4083      	lsls	r3, r0
1000c3de:	439c      	bics	r4, r3
1000c3e0:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_1.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000c3e2:	588b      	ldr	r3, [r1, r2]
1000c3e4:	4085      	lsls	r5, r0
1000c3e6:	431d      	orrs	r5, r3
1000c3e8:	508d      	str	r5, [r1, r2]
1000c3ea:	e068      	b.n	1000c4be <gpio_pinmux_cofiguration+0x146>
			}
		}
	} else if (gpio_pin <= 15) {
1000c3ec:	280f      	cmp	r0, #15
1000c3ee:	d832      	bhi.n	1000c456 <gpio_pinmux_cofiguration+0xde>
		LPMCU_MISC_REGS0->PINMUX_SEL_1.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000c3f0:	4a33      	ldr	r2, [pc, #204]	; (1000c4c0 <gpio_pinmux_cofiguration+0x148>)
1000c3f2:	6c94      	ldr	r4, [r2, #72]	; 0x48
1000c3f4:	2307      	movs	r3, #7
1000c3f6:	4003      	ands	r3, r0
1000c3f8:	009b      	lsls	r3, r3, #2
1000c3fa:	2607      	movs	r6, #7
1000c3fc:	409e      	lsls	r6, r3
1000c3fe:	43b4      	bics	r4, r6
1000c400:	6494      	str	r4, [r2, #72]	; 0x48
		LPMCU_MISC_REGS0->PINMUX_SEL_1.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
1000c402:	6c94      	ldr	r4, [r2, #72]	; 0x48
1000c404:	000e      	movs	r6, r1
1000c406:	409e      	lsls	r6, r3
1000c408:	0033      	movs	r3, r6
1000c40a:	4323      	orrs	r3, r4
1000c40c:	6493      	str	r3, [r2, #72]	; 0x48
		if (pinmux_sel == 0x01) {
1000c40e:	2901      	cmp	r1, #1
1000c410:	d155      	bne.n	1000c4be <gpio_pinmux_cofiguration+0x146>
			if (gpio_pin <= 11) {
1000c412:	280b      	cmp	r0, #11
1000c414:	d80f      	bhi.n	1000c436 <gpio_pinmux_cofiguration+0xbe>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_2.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000c416:	0011      	movs	r1, r2
1000c418:	22d4      	movs	r2, #212	; 0xd4
1000c41a:	0052      	lsls	r2, r2, #1
1000c41c:	588c      	ldr	r4, [r1, r2]
1000c41e:	2303      	movs	r3, #3
1000c420:	4018      	ands	r0, r3
1000c422:	00c0      	lsls	r0, r0, #3
1000c424:	333c      	adds	r3, #60	; 0x3c
1000c426:	4083      	lsls	r3, r0
1000c428:	439c      	bics	r4, r3
1000c42a:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_2.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000c42c:	588b      	ldr	r3, [r1, r2]
1000c42e:	4085      	lsls	r5, r0
1000c430:	431d      	orrs	r5, r3
1000c432:	508d      	str	r5, [r1, r2]
1000c434:	e043      	b.n	1000c4be <gpio_pinmux_cofiguration+0x146>
			} else if (gpio_pin <= 15) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_3.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000c436:	4922      	ldr	r1, [pc, #136]	; (1000c4c0 <gpio_pinmux_cofiguration+0x148>)
1000c438:	22d6      	movs	r2, #214	; 0xd6
1000c43a:	0052      	lsls	r2, r2, #1
1000c43c:	588c      	ldr	r4, [r1, r2]
1000c43e:	2303      	movs	r3, #3
1000c440:	4018      	ands	r0, r3
1000c442:	00c0      	lsls	r0, r0, #3
1000c444:	333c      	adds	r3, #60	; 0x3c
1000c446:	4083      	lsls	r3, r0
1000c448:	439c      	bics	r4, r3
1000c44a:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_3.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000c44c:	588b      	ldr	r3, [r1, r2]
1000c44e:	4085      	lsls	r5, r0
1000c450:	431d      	orrs	r5, r3
1000c452:	508d      	str	r5, [r1, r2]
1000c454:	e033      	b.n	1000c4be <gpio_pinmux_cofiguration+0x146>
			}
		}
	} else if (gpio_pin <= 23) {
1000c456:	2817      	cmp	r0, #23
1000c458:	d831      	bhi.n	1000c4be <gpio_pinmux_cofiguration+0x146>
		LPMCU_MISC_REGS0->PINMUX_SEL_2.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000c45a:	4a19      	ldr	r2, [pc, #100]	; (1000c4c0 <gpio_pinmux_cofiguration+0x148>)
1000c45c:	6cd4      	ldr	r4, [r2, #76]	; 0x4c
1000c45e:	2307      	movs	r3, #7
1000c460:	4003      	ands	r3, r0
1000c462:	009b      	lsls	r3, r3, #2
1000c464:	2607      	movs	r6, #7
1000c466:	409e      	lsls	r6, r3
1000c468:	43b4      	bics	r4, r6
1000c46a:	64d4      	str	r4, [r2, #76]	; 0x4c
		LPMCU_MISC_REGS0->PINMUX_SEL_2.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
1000c46c:	6cd4      	ldr	r4, [r2, #76]	; 0x4c
1000c46e:	000e      	movs	r6, r1
1000c470:	409e      	lsls	r6, r3
1000c472:	0033      	movs	r3, r6
1000c474:	4323      	orrs	r3, r4
1000c476:	64d3      	str	r3, [r2, #76]	; 0x4c
		if (pinmux_sel == 0x01) {
1000c478:	2901      	cmp	r1, #1
1000c47a:	d120      	bne.n	1000c4be <gpio_pinmux_cofiguration+0x146>
			if (gpio_pin <= 19) {
1000c47c:	2813      	cmp	r0, #19
1000c47e:	d80f      	bhi.n	1000c4a0 <gpio_pinmux_cofiguration+0x128>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_4.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000c480:	0011      	movs	r1, r2
1000c482:	22d8      	movs	r2, #216	; 0xd8
1000c484:	0052      	lsls	r2, r2, #1
1000c486:	588c      	ldr	r4, [r1, r2]
1000c488:	2303      	movs	r3, #3
1000c48a:	4018      	ands	r0, r3
1000c48c:	00c0      	lsls	r0, r0, #3
1000c48e:	333c      	adds	r3, #60	; 0x3c
1000c490:	4083      	lsls	r3, r0
1000c492:	439c      	bics	r4, r3
1000c494:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_4.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000c496:	588b      	ldr	r3, [r1, r2]
1000c498:	4085      	lsls	r5, r0
1000c49a:	431d      	orrs	r5, r3
1000c49c:	508d      	str	r5, [r1, r2]
1000c49e:	e00e      	b.n	1000c4be <gpio_pinmux_cofiguration+0x146>
			} else if (gpio_pin <= 23) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_5.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000c4a0:	4a07      	ldr	r2, [pc, #28]	; (1000c4c0 <gpio_pinmux_cofiguration+0x148>)
1000c4a2:	23da      	movs	r3, #218	; 0xda
1000c4a4:	005b      	lsls	r3, r3, #1
1000c4a6:	58d1      	ldr	r1, [r2, r3]
1000c4a8:	2403      	movs	r4, #3
1000c4aa:	4020      	ands	r0, r4
1000c4ac:	00c0      	lsls	r0, r0, #3
1000c4ae:	343c      	adds	r4, #60	; 0x3c
1000c4b0:	4084      	lsls	r4, r0
1000c4b2:	43a1      	bics	r1, r4
1000c4b4:	50d1      	str	r1, [r2, r3]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_5.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000c4b6:	58d1      	ldr	r1, [r2, r3]
1000c4b8:	4085      	lsls	r5, r0
1000c4ba:	430d      	orrs	r5, r1
1000c4bc:	50d5      	str	r5, [r2, r3]
			}
		}
	}
}
1000c4be:	bd70      	pop	{r4, r5, r6, pc}
1000c4c0:	4000b000 	.word	0x4000b000

1000c4c4 <gpio_register_callback>:
 * \param[in]  callback_type  Callback type given by an enum
 *
 */
void gpio_register_callback(uint8_t gpio_pin, gpio_callback_t callback_func,
				enum gpio_callback callback_type)
{
1000c4c4:	b5f0      	push	{r4, r5, r6, r7, lr}
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
		gpio_port = 0;
1000c4c6:	2300      	movs	r3, #0
	Assert(callback_func);
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
1000c4c8:	280f      	cmp	r0, #15
1000c4ca:	d904      	bls.n	1000c4d6 <gpio_register_callback+0x12>
		gpio_port = 0;
	} else if (gpio_pin < 32) {
		gpio_port = 1;
	} else {
		gpio_port = 2;
1000c4cc:	241f      	movs	r4, #31
1000c4ce:	4284      	cmp	r4, r0
1000c4d0:	415b      	adcs	r3, r3
1000c4d2:	3c1d      	subs	r4, #29
1000c4d4:	1ae3      	subs	r3, r4, r3
	}
	switch (callback_type) {
1000c4d6:	2a01      	cmp	r2, #1
1000c4d8:	d016      	beq.n	1000c508 <gpio_register_callback+0x44>
1000c4da:	2a00      	cmp	r2, #0
1000c4dc:	d004      	beq.n	1000c4e8 <gpio_register_callback+0x24>
1000c4de:	2a02      	cmp	r2, #2
1000c4e0:	d022      	beq.n	1000c528 <gpio_register_callback+0x64>
1000c4e2:	2a03      	cmp	r2, #3
1000c4e4:	d030      	beq.n	1000c548 <gpio_register_callback+0x84>
1000c4e6:	e03e      	b.n	1000c566 <gpio_register_callback+0xa2>
	case GPIO_CALLBACK_LOW:
		_gpio_instances[gpio_port].hw->INTTYPECLR.reg = 1 << (gpio_pin % 16);
1000c4e8:	4e29      	ldr	r6, [pc, #164]	; (1000c590 <gpio_register_callback+0xcc>)
1000c4ea:	00dc      	lsls	r4, r3, #3
1000c4ec:	18e2      	adds	r2, r4, r3
1000c4ee:	00d2      	lsls	r2, r2, #3
1000c4f0:	5997      	ldr	r7, [r2, r6]
1000c4f2:	250f      	movs	r5, #15
1000c4f4:	4005      	ands	r5, r0
1000c4f6:	2201      	movs	r2, #1
1000c4f8:	40aa      	lsls	r2, r5
1000c4fa:	b292      	uxth	r2, r2
1000c4fc:	85ba      	strh	r2, [r7, #44]	; 0x2c
		_gpio_instances[gpio_port].hw->INTPOLCLR.reg = 1 << (gpio_pin % 16);
1000c4fe:	18e4      	adds	r4, r4, r3
1000c500:	00e4      	lsls	r4, r4, #3
1000c502:	59a4      	ldr	r4, [r4, r6]
1000c504:	86a2      	strh	r2, [r4, #52]	; 0x34
		break;
1000c506:	e02e      	b.n	1000c566 <gpio_register_callback+0xa2>

	case GPIO_CALLBACK_HIGH:
		_gpio_instances[gpio_port].hw->INTTYPECLR.reg = 1 << (gpio_pin % 16);
1000c508:	4e21      	ldr	r6, [pc, #132]	; (1000c590 <gpio_register_callback+0xcc>)
1000c50a:	00dc      	lsls	r4, r3, #3
1000c50c:	18e2      	adds	r2, r4, r3
1000c50e:	00d2      	lsls	r2, r2, #3
1000c510:	5997      	ldr	r7, [r2, r6]
1000c512:	250f      	movs	r5, #15
1000c514:	4005      	ands	r5, r0
1000c516:	2201      	movs	r2, #1
1000c518:	40aa      	lsls	r2, r5
1000c51a:	b292      	uxth	r2, r2
1000c51c:	85ba      	strh	r2, [r7, #44]	; 0x2c
		_gpio_instances[gpio_port].hw->INTPOLSET.reg = 1 << (gpio_pin % 16);
1000c51e:	18e4      	adds	r4, r4, r3
1000c520:	00e4      	lsls	r4, r4, #3
1000c522:	59a4      	ldr	r4, [r4, r6]
1000c524:	8622      	strh	r2, [r4, #48]	; 0x30
		break;
1000c526:	e01e      	b.n	1000c566 <gpio_register_callback+0xa2>

	case GPIO_CALLBACK_RISING:
		_gpio_instances[gpio_port].hw->INTTYPESET.reg = 1 << (gpio_pin % 16);
1000c528:	4e19      	ldr	r6, [pc, #100]	; (1000c590 <gpio_register_callback+0xcc>)
1000c52a:	00dc      	lsls	r4, r3, #3
1000c52c:	18e2      	adds	r2, r4, r3
1000c52e:	00d2      	lsls	r2, r2, #3
1000c530:	5997      	ldr	r7, [r2, r6]
1000c532:	250f      	movs	r5, #15
1000c534:	4005      	ands	r5, r0
1000c536:	2201      	movs	r2, #1
1000c538:	40aa      	lsls	r2, r5
1000c53a:	b292      	uxth	r2, r2
1000c53c:	853a      	strh	r2, [r7, #40]	; 0x28
		_gpio_instances[gpio_port].hw->INTPOLSET.reg = 1 << (gpio_pin % 16);
1000c53e:	18e4      	adds	r4, r4, r3
1000c540:	00e4      	lsls	r4, r4, #3
1000c542:	59a4      	ldr	r4, [r4, r6]
1000c544:	8622      	strh	r2, [r4, #48]	; 0x30
		break;
1000c546:	e00e      	b.n	1000c566 <gpio_register_callback+0xa2>

	case GPIO_CALLBACK_FALLING:
		_gpio_instances[gpio_port].hw->INTTYPESET.reg = 1 << (gpio_pin % 16);
1000c548:	4e11      	ldr	r6, [pc, #68]	; (1000c590 <gpio_register_callback+0xcc>)
1000c54a:	00dc      	lsls	r4, r3, #3
1000c54c:	18e2      	adds	r2, r4, r3
1000c54e:	00d2      	lsls	r2, r2, #3
1000c550:	5997      	ldr	r7, [r2, r6]
1000c552:	250f      	movs	r5, #15
1000c554:	4005      	ands	r5, r0
1000c556:	2201      	movs	r2, #1
1000c558:	40aa      	lsls	r2, r5
1000c55a:	b292      	uxth	r2, r2
1000c55c:	853a      	strh	r2, [r7, #40]	; 0x28
		_gpio_instances[gpio_port].hw->INTPOLCLR.reg = (1 << (gpio_pin % 16));
1000c55e:	18e4      	adds	r4, r4, r3
1000c560:	00e4      	lsls	r4, r4, #3
1000c562:	59a4      	ldr	r4, [r4, r6]
1000c564:	86a2      	strh	r2, [r4, #52]	; 0x34

	case GPIO_CALLBACK_N:
		break;
	}
	/* Register callback function */
	_gpio_instances[gpio_port].callback[gpio_pin % 16] = callback_func;
1000c566:	220f      	movs	r2, #15
1000c568:	4010      	ands	r0, r2
1000c56a:	4c09      	ldr	r4, [pc, #36]	; (1000c590 <gpio_register_callback+0xcc>)
1000c56c:	00dd      	lsls	r5, r3, #3
1000c56e:	18ea      	adds	r2, r5, r3
1000c570:	0052      	lsls	r2, r2, #1
1000c572:	1812      	adds	r2, r2, r0
1000c574:	0092      	lsls	r2, r2, #2
1000c576:	18a2      	adds	r2, r4, r2
1000c578:	6051      	str	r1, [r2, #4]
	/* Set the bit corresponding to the gpio pin */
	_gpio_instances[gpio_port].callback_reg_mask |= (1 << (gpio_pin % 16));
1000c57a:	18ea      	adds	r2, r5, r3
1000c57c:	00d2      	lsls	r2, r2, #3
1000c57e:	18a2      	adds	r2, r4, r2
1000c580:	3244      	adds	r2, #68	; 0x44
1000c582:	2101      	movs	r1, #1
1000c584:	4081      	lsls	r1, r0
1000c586:	8813      	ldrh	r3, [r2, #0]
1000c588:	430b      	orrs	r3, r1
1000c58a:	8013      	strh	r3, [r2, #0]
}
1000c58c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000c58e:	46c0      	nop			; (mov r8, r8)
1000c590:	1001a0a0 	.word	0x1001a0a0

1000c594 <gpio_enable_callback>:
 * conditions for the callback type are met.
 *
 * \param[in]  gpio_pin   GPIO pin
 */
void gpio_enable_callback(uint8_t gpio_pin)
{
1000c594:	b530      	push	{r4, r5, lr}
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
1000c596:	280f      	cmp	r0, #15
1000c598:	d805      	bhi.n	1000c5a6 <gpio_enable_callback+0x12>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000c59a:	2280      	movs	r2, #128	; 0x80
1000c59c:	0412      	lsls	r2, r2, #16
1000c59e:	4b12      	ldr	r3, [pc, #72]	; (1000c5e8 <gpio_enable_callback+0x54>)
1000c5a0:	601a      	str	r2, [r3, #0]
		gpio_port = 0;
1000c5a2:	2200      	movs	r2, #0
1000c5a4:	e00c      	b.n	1000c5c0 <gpio_enable_callback+0x2c>
		NVIC_EnableIRQ(GPIO0_IRQn);
	} else if (gpio_pin < 32) {
1000c5a6:	281f      	cmp	r0, #31
1000c5a8:	d805      	bhi.n	1000c5b6 <gpio_enable_callback+0x22>
1000c5aa:	2280      	movs	r2, #128	; 0x80
1000c5ac:	0452      	lsls	r2, r2, #17
1000c5ae:	4b0e      	ldr	r3, [pc, #56]	; (1000c5e8 <gpio_enable_callback+0x54>)
1000c5b0:	601a      	str	r2, [r3, #0]
		gpio_port = 1;
1000c5b2:	2201      	movs	r2, #1
1000c5b4:	e004      	b.n	1000c5c0 <gpio_enable_callback+0x2c>
1000c5b6:	2280      	movs	r2, #128	; 0x80
1000c5b8:	0492      	lsls	r2, r2, #18
1000c5ba:	4b0b      	ldr	r3, [pc, #44]	; (1000c5e8 <gpio_enable_callback+0x54>)
1000c5bc:	601a      	str	r2, [r3, #0]
		NVIC_EnableIRQ(GPIO1_IRQn);
	} else {
		gpio_port = 2;
1000c5be:	2202      	movs	r2, #2
		NVIC_EnableIRQ(GPIO2_IRQn);
	}

	/* Enable callback */
	_gpio_instances[gpio_port].callback_enable_mask |= (1 << (gpio_pin % 16));
1000c5c0:	230f      	movs	r3, #15
1000c5c2:	4018      	ands	r0, r3
1000c5c4:	2101      	movs	r1, #1
1000c5c6:	4081      	lsls	r1, r0
1000c5c8:	4c08      	ldr	r4, [pc, #32]	; (1000c5ec <gpio_enable_callback+0x58>)
1000c5ca:	00d5      	lsls	r5, r2, #3
1000c5cc:	18ab      	adds	r3, r5, r2
1000c5ce:	00db      	lsls	r3, r3, #3
1000c5d0:	18e3      	adds	r3, r4, r3
1000c5d2:	3346      	adds	r3, #70	; 0x46
1000c5d4:	8818      	ldrh	r0, [r3, #0]
1000c5d6:	4308      	orrs	r0, r1
1000c5d8:	8018      	strh	r0, [r3, #0]
	_gpio_instances[gpio_port].hw->INTENSET.reg = (1 << (gpio_pin % 16));
1000c5da:	18aa      	adds	r2, r5, r2
1000c5dc:	00d2      	lsls	r2, r2, #3
1000c5de:	5913      	ldr	r3, [r2, r4]
1000c5e0:	b289      	uxth	r1, r1
1000c5e2:	8419      	strh	r1, [r3, #32]
}
1000c5e4:	bd30      	pop	{r4, r5, pc}
1000c5e6:	46c0      	nop			; (mov r8, r8)
1000c5e8:	e000e100 	.word	0xe000e100
1000c5ec:	1001a0a0 	.word	0x1001a0a0

1000c5f0 <gpio_disable_callback>:
 * The callback function will not be called from the interrupt handler.
 *
 * \param[in]  gpio_pin   GPIO pin
 */
void gpio_disable_callback(uint8_t gpio_pin)
{
1000c5f0:	b530      	push	{r4, r5, lr}
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
		gpio_port = 0;
1000c5f2:	2300      	movs	r3, #0
{
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
1000c5f4:	280f      	cmp	r0, #15
1000c5f6:	d904      	bls.n	1000c602 <gpio_disable_callback+0x12>
		gpio_port = 0;
	} else if (gpio_pin < 32) {
		gpio_port = 1;
	} else {
		gpio_port = 2;
1000c5f8:	221f      	movs	r2, #31
1000c5fa:	4282      	cmp	r2, r0
1000c5fc:	415b      	adcs	r3, r3
1000c5fe:	3a1d      	subs	r2, #29
1000c600:	1ad3      	subs	r3, r2, r3
	}

	/* Enable callback */
	_gpio_instances[gpio_port].callback_enable_mask &= ~(1 << (gpio_pin % 16));
1000c602:	220f      	movs	r2, #15
1000c604:	4010      	ands	r0, r2
1000c606:	2101      	movs	r1, #1
1000c608:	4081      	lsls	r1, r0
1000c60a:	4c07      	ldr	r4, [pc, #28]	; (1000c628 <gpio_disable_callback+0x38>)
1000c60c:	00dd      	lsls	r5, r3, #3
1000c60e:	18ea      	adds	r2, r5, r3
1000c610:	00d2      	lsls	r2, r2, #3
1000c612:	18a2      	adds	r2, r4, r2
1000c614:	3246      	adds	r2, #70	; 0x46
1000c616:	8810      	ldrh	r0, [r2, #0]
1000c618:	4388      	bics	r0, r1
1000c61a:	8010      	strh	r0, [r2, #0]
	_gpio_instances[gpio_port].hw->INTENCLR.reg = (1 << (gpio_pin % 16));
1000c61c:	18eb      	adds	r3, r5, r3
1000c61e:	00db      	lsls	r3, r3, #3
1000c620:	591b      	ldr	r3, [r3, r4]
1000c622:	b289      	uxth	r1, r1
1000c624:	8499      	strh	r1, [r3, #36]	; 0x24
}
1000c626:	bd30      	pop	{r4, r5, pc}
1000c628:	1001a0a0 	.word	0x1001a0a0

1000c62c <gpio_init>:
 *
 * This function will init GPIO callback.
 *
 */
void gpio_init(void)
{
1000c62c:	b510      	push	{r4, lr}
1000c62e:	4a11      	ldr	r2, [pc, #68]	; (1000c674 <gpio_init+0x48>)
1000c630:	0010      	movs	r0, r2
1000c632:	30d8      	adds	r0, #216	; 0xd8
	uint8_t i, j;

	for(i = 0; i < 3; i++) {
		for(j = 0; j < 16; j++) {
			_gpio_instances[i].callback[j] = NULL;
1000c634:	2100      	movs	r1, #0
1000c636:	e007      	b.n	1000c648 <gpio_init+0x1c>
1000c638:	c302      	stmia	r3!, {r1}
void gpio_init(void)
{
	uint8_t i, j;

	for(i = 0; i < 3; i++) {
		for(j = 0; j < 16; j++) {
1000c63a:	4293      	cmp	r3, r2
1000c63c:	d1fc      	bne.n	1000c638 <gpio_init+0xc>
			_gpio_instances[i].callback[j] = NULL;
		}
		_gpio_instances[i].callback_enable_mask = 0;
1000c63e:	8051      	strh	r1, [r2, #2]
		_gpio_instances[i].callback_reg_mask = 0;
1000c640:	8011      	strh	r1, [r2, #0]
1000c642:	3248      	adds	r2, #72	; 0x48
 */
void gpio_init(void)
{
	uint8_t i, j;

	for(i = 0; i < 3; i++) {
1000c644:	4282      	cmp	r2, r0
1000c646:	d002      	beq.n	1000c64e <gpio_init+0x22>
1000c648:	0013      	movs	r3, r2
1000c64a:	3b40      	subs	r3, #64	; 0x40
1000c64c:	e7f4      	b.n	1000c638 <gpio_init+0xc>
			_gpio_instances[i].callback[j] = NULL;
		}
		_gpio_instances[i].callback_enable_mask = 0;
		_gpio_instances[i].callback_reg_mask = 0;
	}
	_gpio_instances[0].hw = (void *)GPIO0;
1000c64e:	4b0a      	ldr	r3, [pc, #40]	; (1000c678 <gpio_init+0x4c>)
1000c650:	4a0a      	ldr	r2, [pc, #40]	; (1000c67c <gpio_init+0x50>)
1000c652:	601a      	str	r2, [r3, #0]
	_gpio_instances[1].hw = (void *)GPIO1;
1000c654:	4a0a      	ldr	r2, [pc, #40]	; (1000c680 <gpio_init+0x54>)
1000c656:	649a      	str	r2, [r3, #72]	; 0x48
	_gpio_instances[2].hw = (void *)GPIO2;
1000c658:	490a      	ldr	r1, [pc, #40]	; (1000c684 <gpio_init+0x58>)
1000c65a:	2290      	movs	r2, #144	; 0x90
1000c65c:	5099      	str	r1, [r3, r2]
	system_register_isr(RAM_ISR_TABLE_PORT0_COMB_INDEX, (uint32_t)gpio_port0_isr_handler);
1000c65e:	490a      	ldr	r1, [pc, #40]	; (1000c688 <gpio_init+0x5c>)
1000c660:	2027      	movs	r0, #39	; 0x27
1000c662:	4c0a      	ldr	r4, [pc, #40]	; (1000c68c <gpio_init+0x60>)
1000c664:	47a0      	blx	r4
	system_register_isr(RAM_ISR_TABLE_PORT1_COMB_INDEX, (uint32_t)gpio_port1_isr_handler);
1000c666:	490a      	ldr	r1, [pc, #40]	; (1000c690 <gpio_init+0x64>)
1000c668:	2028      	movs	r0, #40	; 0x28
1000c66a:	47a0      	blx	r4
	system_register_isr(RAM_ISR_TABLE_PORT2_COMB_INDEX, (uint32_t)gpio_port2_isr_handler);
1000c66c:	4909      	ldr	r1, [pc, #36]	; (1000c694 <gpio_init+0x68>)
1000c66e:	2029      	movs	r0, #41	; 0x29
1000c670:	47a0      	blx	r4
}
1000c672:	bd10      	pop	{r4, pc}
1000c674:	1001a0e4 	.word	0x1001a0e4
1000c678:	1001a0a0 	.word	0x1001a0a0
1000c67c:	40010000 	.word	0x40010000
1000c680:	40011000 	.word	0x40011000
1000c684:	40013000 	.word	0x40013000
1000c688:	1000bf35 	.word	0x1000bf35
1000c68c:	1000d259 	.word	0x1000d259
1000c690:	1000bf99 	.word	0x1000bf99
1000c694:	1000c009 	.word	0x1000c009

1000c698 <system_clock_config>:
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_clock_config(enum system_clock_resource resoure, \
				enum system_clock_freq freq)
{
	switch (resoure) {
1000c698:	2801      	cmp	r0, #1
1000c69a:	d00d      	beq.n	1000c6b8 <system_clock_config+0x20>
1000c69c:	2800      	cmp	r0, #0
1000c69e:	d002      	beq.n	1000c6a6 <system_clock_config+0xe>
1000c6a0:	2802      	cmp	r0, #2
1000c6a2:	d01c      	beq.n	1000c6de <system_clock_config+0x46>
1000c6a4:	e02e      	b.n	1000c704 <system_clock_config+0x6c>
		case CLOCK_RESOURCE_XO_26_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
1000c6a6:	4a18      	ldr	r2, [pc, #96]	; (1000c708 <system_clock_config+0x70>)
1000c6a8:	6990      	ldr	r0, [r2, #24]
1000c6aa:	230c      	movs	r3, #12
1000c6ac:	4303      	orrs	r3, r0
1000c6ae:	6193      	str	r3, [r2, #24]
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_BT26M_CLK | \
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK;
			system_clock_value = 26000000;
1000c6b0:	4a16      	ldr	r2, [pc, #88]	; (1000c70c <system_clock_config+0x74>)
1000c6b2:	4b17      	ldr	r3, [pc, #92]	; (1000c710 <system_clock_config+0x78>)
1000c6b4:	601a      	str	r2, [r3, #0]
			break;
1000c6b6:	e01a      	b.n	1000c6ee <system_clock_config+0x56>

		case CLOCK_RESOURCE_LP_2_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
1000c6b8:	4b13      	ldr	r3, [pc, #76]	; (1000c708 <system_clock_config+0x70>)
1000c6ba:	6998      	ldr	r0, [r3, #24]
1000c6bc:	2208      	movs	r2, #8
1000c6be:	4302      	orrs	r2, r0
1000c6c0:	619a      	str	r2, [r3, #24]
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK;
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg &= \
1000c6c2:	699a      	ldr	r2, [r3, #24]
1000c6c4:	2004      	movs	r0, #4
1000c6c6:	4382      	bics	r2, r0
1000c6c8:	619a      	str	r2, [r3, #24]
					~LPMCU_MISC_REGS_LPMCU_CTRL_USE_BT26M_CLK;
			AON_GP_REGS0->AON_PMU_CTRL.reg |= \
1000c6ca:	4a12      	ldr	r2, [pc, #72]	; (1000c714 <system_clock_config+0x7c>)
1000c6cc:	6853      	ldr	r3, [r2, #4]
1000c6ce:	2080      	movs	r0, #128	; 0x80
1000c6d0:	0300      	lsls	r0, r0, #12
1000c6d2:	4303      	orrs	r3, r0
1000c6d4:	6053      	str	r3, [r2, #4]
					AON_GP_REGS_AON_PMU_CTRL_PMU_2MHZ_CLK_EN;
			system_clock_value = 2000000;
1000c6d6:	4a10      	ldr	r2, [pc, #64]	; (1000c718 <system_clock_config+0x80>)
1000c6d8:	4b0d      	ldr	r3, [pc, #52]	; (1000c710 <system_clock_config+0x78>)
1000c6da:	601a      	str	r2, [r3, #0]
			break;
1000c6dc:	e007      	b.n	1000c6ee <system_clock_config+0x56>

		case CLOCK_RESOURCE_RC_26_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg &= \
1000c6de:	4a0a      	ldr	r2, [pc, #40]	; (1000c708 <system_clock_config+0x70>)
1000c6e0:	6993      	ldr	r3, [r2, #24]
1000c6e2:	200c      	movs	r0, #12
1000c6e4:	4383      	bics	r3, r0
1000c6e6:	6193      	str	r3, [r2, #24]
					~(LPMCU_MISC_REGS_LPMCU_CTRL_USE_BT26M_CLK | \
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK);
			system_clock_value = 26000000;
1000c6e8:	4a08      	ldr	r2, [pc, #32]	; (1000c70c <system_clock_config+0x74>)
1000c6ea:	4b09      	ldr	r3, [pc, #36]	; (1000c710 <system_clock_config+0x78>)
1000c6ec:	601a      	str	r2, [r3, #0]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	LPMCU_MISC_REGS0->LPMCU_CTRL.reg &= \
1000c6ee:	4b06      	ldr	r3, [pc, #24]	; (1000c708 <system_clock_config+0x70>)
1000c6f0:	699a      	ldr	r2, [r3, #24]
1000c6f2:	2003      	movs	r0, #3
1000c6f4:	4382      	bics	r2, r0
1000c6f6:	619a      	str	r2, [r3, #24]
		~LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL_Msk;
	LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
1000c6f8:	699a      	ldr	r2, [r3, #24]
1000c6fa:	4001      	ands	r1, r0
1000c6fc:	4311      	orrs	r1, r2
1000c6fe:	6199      	str	r1, [r3, #24]
		LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL(freq);

	return STATUS_OK;
1000c700:	2000      	movs	r0, #0
1000c702:	e000      	b.n	1000c706 <system_clock_config+0x6e>
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK);
			system_clock_value = 26000000;
			break;

		default:
			return STATUS_ERR_INVALID_ARG;
1000c704:	2017      	movs	r0, #23
		~LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL_Msk;
	LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
		LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL(freq);

	return STATUS_OK;
}
1000c706:	4770      	bx	lr
1000c708:	4000b000 	.word	0x4000b000
1000c70c:	018cba80 	.word	0x018cba80
1000c710:	1001a178 	.word	0x1001a178
1000c714:	4000f000 	.word	0x4000f000
1000c718:	001e8480 	.word	0x001e8480

1000c71c <system_clock_get_value>:
 *
 * \return system clock value.
 */
uint32_t system_clock_get_value(void)
{
	return system_clock_value;
1000c71c:	4b01      	ldr	r3, [pc, #4]	; (1000c724 <system_clock_get_value+0x8>)
1000c71e:	6818      	ldr	r0, [r3, #0]
}
1000c720:	4770      	bx	lr
1000c722:	46c0      	nop			; (mov r8, r8)
1000c724:	1001a178 	.word	0x1001a178

1000c728 <system_clock_peripheral_enable>:
 * \return Status of operation.
 * \retval STATUS_OK               Clock config correctly
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_clock_peripheral_enable(enum system_peripheral peripheral)
{
1000c728:	b500      	push	{lr}
	switch (peripheral) {
1000c72a:	2835      	cmp	r0, #53	; 0x35
1000c72c:	d900      	bls.n	1000c730 <system_clock_peripheral_enable+0x8>
1000c72e:	e1a2      	b.n	1000ca76 <system_clock_peripheral_enable+0x34e>
1000c730:	0080      	lsls	r0, r0, #2
1000c732:	4bd2      	ldr	r3, [pc, #840]	; (1000ca7c <system_clock_peripheral_enable+0x354>)
1000c734:	581b      	ldr	r3, [r3, r0]
1000c736:	469f      	mov	pc, r3
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c738:	4ad1      	ldr	r2, [pc, #836]	; (1000ca80 <system_clock_peripheral_enable+0x358>)
1000c73a:	68d1      	ldr	r1, [r2, #12]
1000c73c:	2302      	movs	r3, #2
1000c73e:	430b      	orrs	r3, r1
1000c740:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c742:	2000      	movs	r0, #0
{
	switch (peripheral) {
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI_FLASH0_CLK_EN;
		break;
1000c744:	e198      	b.n	1000ca78 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c746:	4ace      	ldr	r2, [pc, #824]	; (1000ca80 <system_clock_peripheral_enable+0x358>)
1000c748:	68d1      	ldr	r1, [r2, #12]
1000c74a:	2304      	movs	r3, #4
1000c74c:	430b      	orrs	r3, r1
1000c74e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c750:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI0_CORE_CLK_EN;
		break;
1000c752:	e191      	b.n	1000ca78 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c754:	4aca      	ldr	r2, [pc, #808]	; (1000ca80 <system_clock_peripheral_enable+0x358>)
1000c756:	68d1      	ldr	r1, [r2, #12]
1000c758:	2308      	movs	r3, #8
1000c75a:	430b      	orrs	r3, r1
1000c75c:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c75e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI1_CORE_CLK_EN;
		break;
1000c760:	e18a      	b.n	1000ca78 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c762:	4ac7      	ldr	r2, [pc, #796]	; (1000ca80 <system_clock_peripheral_enable+0x358>)
1000c764:	68d1      	ldr	r1, [r2, #12]
1000c766:	2310      	movs	r3, #16
1000c768:	430b      	orrs	r3, r1
1000c76a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c76c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C0_CORE_CLK_EN;
		break;
1000c76e:	e183      	b.n	1000ca78 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c770:	4ac3      	ldr	r2, [pc, #780]	; (1000ca80 <system_clock_peripheral_enable+0x358>)
1000c772:	68d1      	ldr	r1, [r2, #12]
1000c774:	2320      	movs	r3, #32
1000c776:	430b      	orrs	r3, r1
1000c778:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c77a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_DUALTIMER0_CLK_EN;
		break;
1000c77c:	e17c      	b.n	1000ca78 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c77e:	4ac0      	ldr	r2, [pc, #768]	; (1000ca80 <system_clock_peripheral_enable+0x358>)
1000c780:	68d1      	ldr	r1, [r2, #12]
1000c782:	2380      	movs	r3, #128	; 0x80
1000c784:	430b      	orrs	r3, r1
1000c786:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c788:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_GPIO_CLK_EN;
		break;
1000c78a:	e175      	b.n	1000ca78 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c78c:	4abc      	ldr	r2, [pc, #752]	; (1000ca80 <system_clock_peripheral_enable+0x358>)
1000c78e:	68d3      	ldr	r3, [r2, #12]
1000c790:	2180      	movs	r1, #128	; 0x80
1000c792:	0049      	lsls	r1, r1, #1
1000c794:	430b      	orrs	r3, r1
1000c796:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c798:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_TIMER0_CLK_EN;
		break;
1000c79a:	e16d      	b.n	1000ca78 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c79c:	4ab8      	ldr	r2, [pc, #736]	; (1000ca80 <system_clock_peripheral_enable+0x358>)
1000c79e:	68d3      	ldr	r3, [r2, #12]
1000c7a0:	2180      	movs	r1, #128	; 0x80
1000c7a2:	0109      	lsls	r1, r1, #4
1000c7a4:	430b      	orrs	r3, r1
1000c7a6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c7a8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WDT0_CLK_EN;
		break;
1000c7aa:	e165      	b.n	1000ca78 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c7ac:	4ab4      	ldr	r2, [pc, #720]	; (1000ca80 <system_clock_peripheral_enable+0x358>)
1000c7ae:	68d3      	ldr	r3, [r2, #12]
1000c7b0:	2180      	movs	r1, #128	; 0x80
1000c7b2:	0149      	lsls	r1, r1, #5
1000c7b4:	430b      	orrs	r3, r1
1000c7b6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c7b8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WDT1_CLK_EN;
		break;
1000c7ba:	e15d      	b.n	1000ca78 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c7bc:	4ab0      	ldr	r2, [pc, #704]	; (1000ca80 <system_clock_peripheral_enable+0x358>)
1000c7be:	68d3      	ldr	r3, [r2, #12]
1000c7c0:	2180      	movs	r1, #128	; 0x80
1000c7c2:	0189      	lsls	r1, r1, #6
1000c7c4:	430b      	orrs	r3, r1
1000c7c6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c7c8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART0_CORE_CLK_EN;
		break;
1000c7ca:	e155      	b.n	1000ca78 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c7cc:	4aac      	ldr	r2, [pc, #688]	; (1000ca80 <system_clock_peripheral_enable+0x358>)
1000c7ce:	68d3      	ldr	r3, [r2, #12]
1000c7d0:	2180      	movs	r1, #128	; 0x80
1000c7d2:	01c9      	lsls	r1, r1, #7
1000c7d4:	430b      	orrs	r3, r1
1000c7d6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c7d8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART0_IF_CLK_EN;
		break;
1000c7da:	e14d      	b.n	1000ca78 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c7dc:	4aa8      	ldr	r2, [pc, #672]	; (1000ca80 <system_clock_peripheral_enable+0x358>)
1000c7de:	68d3      	ldr	r3, [r2, #12]
1000c7e0:	2180      	movs	r1, #128	; 0x80
1000c7e2:	0209      	lsls	r1, r1, #8
1000c7e4:	430b      	orrs	r3, r1
1000c7e6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c7e8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART1_CORE_CLK_EN;
		break;
1000c7ea:	e145      	b.n	1000ca78 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c7ec:	4aa4      	ldr	r2, [pc, #656]	; (1000ca80 <system_clock_peripheral_enable+0x358>)
1000c7ee:	68d3      	ldr	r3, [r2, #12]
1000c7f0:	2180      	movs	r1, #128	; 0x80
1000c7f2:	0249      	lsls	r1, r1, #9
1000c7f4:	430b      	orrs	r3, r1
1000c7f6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c7f8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART1_IF_CLK_EN;
		break;
1000c7fa:	e13d      	b.n	1000ca78 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c7fc:	4aa0      	ldr	r2, [pc, #640]	; (1000ca80 <system_clock_peripheral_enable+0x358>)
1000c7fe:	68d3      	ldr	r3, [r2, #12]
1000c800:	2180      	movs	r1, #128	; 0x80
1000c802:	0289      	lsls	r1, r1, #10
1000c804:	430b      	orrs	r3, r1
1000c806:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c808:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IRQ_CTRLR_CORE_CLK_EN;
		break;
1000c80a:	e135      	b.n	1000ca78 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c80c:	4a9c      	ldr	r2, [pc, #624]	; (1000ca80 <system_clock_peripheral_enable+0x358>)
1000c80e:	68d3      	ldr	r3, [r2, #12]
1000c810:	2180      	movs	r1, #128	; 0x80
1000c812:	02c9      	lsls	r1, r1, #11
1000c814:	430b      	orrs	r3, r1
1000c816:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c818:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_1_GL_MEM_CLK_EN;
		break;
1000c81a:	e12d      	b.n	1000ca78 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c81c:	4a98      	ldr	r2, [pc, #608]	; (1000ca80 <system_clock_peripheral_enable+0x358>)
1000c81e:	68d3      	ldr	r3, [r2, #12]
1000c820:	2180      	movs	r1, #128	; 0x80
1000c822:	0309      	lsls	r1, r1, #12
1000c824:	430b      	orrs	r3, r1
1000c826:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c828:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_2_GL_MEM_CLK_EN;
		break;
1000c82a:	e125      	b.n	1000ca78 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c82c:	4a94      	ldr	r2, [pc, #592]	; (1000ca80 <system_clock_peripheral_enable+0x358>)
1000c82e:	68d3      	ldr	r3, [r2, #12]
1000c830:	2180      	movs	r1, #128	; 0x80
1000c832:	0349      	lsls	r1, r1, #13
1000c834:	430b      	orrs	r3, r1
1000c836:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c838:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ROM_MEM_CLK_EN;
		break;
1000c83a:	e11d      	b.n	1000ca78 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c83c:	4a90      	ldr	r2, [pc, #576]	; (1000ca80 <system_clock_peripheral_enable+0x358>)
1000c83e:	68d3      	ldr	r3, [r2, #12]
1000c840:	2180      	movs	r1, #128	; 0x80
1000c842:	0389      	lsls	r1, r1, #14
1000c844:	430b      	orrs	r3, r1
1000c846:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c848:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_XBAR_IF_CLK_EN;
		break;
1000c84a:	e115      	b.n	1000ca78 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c84c:	4a8c      	ldr	r2, [pc, #560]	; (1000ca80 <system_clock_peripheral_enable+0x358>)
1000c84e:	68d3      	ldr	r3, [r2, #12]
1000c850:	2180      	movs	r1, #128	; 0x80
1000c852:	03c9      	lsls	r1, r1, #15
1000c854:	430b      	orrs	r3, r1
1000c856:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c858:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_AON_WRAPPER_CLK_EN;
		break;
1000c85a:	e10d      	b.n	1000ca78 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c85c:	4a88      	ldr	r2, [pc, #544]	; (1000ca80 <system_clock_peripheral_enable+0x358>)
1000c85e:	68d3      	ldr	r3, [r2, #12]
1000c860:	2180      	movs	r1, #128	; 0x80
1000c862:	0409      	lsls	r1, r1, #16
1000c864:	430b      	orrs	r3, r1
1000c866:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c868:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLK_EN;
		break;
1000c86a:	e105      	b.n	1000ca78 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c86c:	4a84      	ldr	r2, [pc, #528]	; (1000ca80 <system_clock_peripheral_enable+0x358>)
1000c86e:	68d3      	ldr	r3, [r2, #12]
1000c870:	2180      	movs	r1, #128	; 0x80
1000c872:	0449      	lsls	r1, r1, #17
1000c874:	430b      	orrs	r3, r1
1000c876:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c878:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLKG_EN;
		break;
1000c87a:	e0fd      	b.n	1000ca78 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c87c:	4a80      	ldr	r2, [pc, #512]	; (1000ca80 <system_clock_peripheral_enable+0x358>)
1000c87e:	68d3      	ldr	r3, [r2, #12]
1000c880:	2180      	movs	r1, #128	; 0x80
1000c882:	0489      	lsls	r1, r1, #18
1000c884:	430b      	orrs	r3, r1
1000c886:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c888:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_BLE_MEM_CLK_EN;
		break;
1000c88a:	e0f5      	b.n	1000ca78 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c88c:	4a7c      	ldr	r2, [pc, #496]	; (1000ca80 <system_clock_peripheral_enable+0x358>)
1000c88e:	68d3      	ldr	r3, [r2, #12]
1000c890:	2180      	movs	r1, #128	; 0x80
1000c892:	04c9      	lsls	r1, r1, #19
1000c894:	430b      	orrs	r3, r1
1000c896:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c898:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC0_CLK_EN;
		break;
1000c89a:	e0ed      	b.n	1000ca78 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c89c:	4a78      	ldr	r2, [pc, #480]	; (1000ca80 <system_clock_peripheral_enable+0x358>)
1000c89e:	68d3      	ldr	r3, [r2, #12]
1000c8a0:	2180      	movs	r1, #128	; 0x80
1000c8a2:	0509      	lsls	r1, r1, #20
1000c8a4:	430b      	orrs	r3, r1
1000c8a6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c8a8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC1_CLK_EN;
		break;
1000c8aa:	e0e5      	b.n	1000ca78 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c8ac:	4a74      	ldr	r2, [pc, #464]	; (1000ca80 <system_clock_peripheral_enable+0x358>)
1000c8ae:	68d3      	ldr	r3, [r2, #12]
1000c8b0:	2180      	movs	r1, #128	; 0x80
1000c8b2:	0549      	lsls	r1, r1, #21
1000c8b4:	430b      	orrs	r3, r1
1000c8b6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c8b8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC2_CLK_EN;
		break;
1000c8ba:	e0dd      	b.n	1000ca78 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c8bc:	4a70      	ldr	r2, [pc, #448]	; (1000ca80 <system_clock_peripheral_enable+0x358>)
1000c8be:	68d3      	ldr	r3, [r2, #12]
1000c8c0:	2180      	movs	r1, #128	; 0x80
1000c8c2:	0589      	lsls	r1, r1, #22
1000c8c4:	430b      	orrs	r3, r1
1000c8c6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c8c8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C1_CORE_CLK_EN;
		break;
1000c8ca:	e0d5      	b.n	1000ca78 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c8cc:	4a6c      	ldr	r2, [pc, #432]	; (1000ca80 <system_clock_peripheral_enable+0x358>)
1000c8ce:	68d3      	ldr	r3, [r2, #12]
1000c8d0:	2180      	movs	r1, #128	; 0x80
1000c8d2:	05c9      	lsls	r1, r1, #23
1000c8d4:	430b      	orrs	r3, r1
1000c8d6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c8d8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_CLK_EN;
		break;
1000c8da:	e0cd      	b.n	1000ca78 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c8dc:	4a68      	ldr	r2, [pc, #416]	; (1000ca80 <system_clock_peripheral_enable+0x358>)
1000c8de:	6911      	ldr	r1, [r2, #16]
1000c8e0:	2301      	movs	r3, #1
1000c8e2:	430b      	orrs	r3, r1
1000c8e4:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c8e6:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE0_CLK_EN;
		break;
1000c8e8:	e0c6      	b.n	1000ca78 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c8ea:	4a65      	ldr	r2, [pc, #404]	; (1000ca80 <system_clock_peripheral_enable+0x358>)
1000c8ec:	6911      	ldr	r1, [r2, #16]
1000c8ee:	2302      	movs	r3, #2
1000c8f0:	430b      	orrs	r3, r1
1000c8f2:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c8f4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE1_CLK_EN;
		break;
1000c8f6:	e0bf      	b.n	1000ca78 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c8f8:	4a61      	ldr	r2, [pc, #388]	; (1000ca80 <system_clock_peripheral_enable+0x358>)
1000c8fa:	6911      	ldr	r1, [r2, #16]
1000c8fc:	2304      	movs	r3, #4
1000c8fe:	430b      	orrs	r3, r1
1000c900:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c902:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE2_CLK_EN;
		break;
1000c904:	e0b8      	b.n	1000ca78 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c906:	4a5e      	ldr	r2, [pc, #376]	; (1000ca80 <system_clock_peripheral_enable+0x358>)
1000c908:	6911      	ldr	r1, [r2, #16]
1000c90a:	2308      	movs	r3, #8
1000c90c:	430b      	orrs	r3, r1
1000c90e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c910:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE3_CLK_EN;
		break;
1000c912:	e0b1      	b.n	1000ca78 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c914:	4a5a      	ldr	r2, [pc, #360]	; (1000ca80 <system_clock_peripheral_enable+0x358>)
1000c916:	6911      	ldr	r1, [r2, #16]
1000c918:	2310      	movs	r3, #16
1000c91a:	430b      	orrs	r3, r1
1000c91c:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c91e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE4_CLK_EN;
		break;
1000c920:	e0aa      	b.n	1000ca78 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c922:	4a57      	ldr	r2, [pc, #348]	; (1000ca80 <system_clock_peripheral_enable+0x358>)
1000c924:	6911      	ldr	r1, [r2, #16]
1000c926:	2320      	movs	r3, #32
1000c928:	430b      	orrs	r3, r1
1000c92a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c92c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE5_CLK_EN;
		break;
1000c92e:	e0a3      	b.n	1000ca78 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c930:	4a53      	ldr	r2, [pc, #332]	; (1000ca80 <system_clock_peripheral_enable+0x358>)
1000c932:	6911      	ldr	r1, [r2, #16]
1000c934:	2340      	movs	r3, #64	; 0x40
1000c936:	430b      	orrs	r3, r1
1000c938:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c93a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM0_CLK_EN;
		break;
1000c93c:	e09c      	b.n	1000ca78 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c93e:	4a50      	ldr	r2, [pc, #320]	; (1000ca80 <system_clock_peripheral_enable+0x358>)
1000c940:	6911      	ldr	r1, [r2, #16]
1000c942:	2380      	movs	r3, #128	; 0x80
1000c944:	430b      	orrs	r3, r1
1000c946:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c948:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM1_CLK_EN;
		break;
1000c94a:	e095      	b.n	1000ca78 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c94c:	4a4c      	ldr	r2, [pc, #304]	; (1000ca80 <system_clock_peripheral_enable+0x358>)
1000c94e:	6913      	ldr	r3, [r2, #16]
1000c950:	2180      	movs	r1, #128	; 0x80
1000c952:	0049      	lsls	r1, r1, #1
1000c954:	430b      	orrs	r3, r1
1000c956:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c958:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM2_CLK_EN;
		break;
1000c95a:	e08d      	b.n	1000ca78 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c95c:	4a48      	ldr	r2, [pc, #288]	; (1000ca80 <system_clock_peripheral_enable+0x358>)
1000c95e:	6913      	ldr	r3, [r2, #16]
1000c960:	2180      	movs	r1, #128	; 0x80
1000c962:	0089      	lsls	r1, r1, #2
1000c964:	430b      	orrs	r3, r1
1000c966:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c968:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM3_CLK_EN;
		break;
1000c96a:	e085      	b.n	1000ca78 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c96c:	4a44      	ldr	r2, [pc, #272]	; (1000ca80 <system_clock_peripheral_enable+0x358>)
1000c96e:	6913      	ldr	r3, [r2, #16]
1000c970:	2180      	movs	r1, #128	; 0x80
1000c972:	00c9      	lsls	r1, r1, #3
1000c974:	430b      	orrs	r3, r1
1000c976:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c978:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SENS_ADC_CLK_EN;
		break;
1000c97a:	e07d      	b.n	1000ca78 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c97c:	4a40      	ldr	r2, [pc, #256]	; (1000ca80 <system_clock_peripheral_enable+0x358>)
1000c97e:	6913      	ldr	r3, [r2, #16]
1000c980:	2180      	movs	r1, #128	; 0x80
1000c982:	0109      	lsls	r1, r1, #4
1000c984:	430b      	orrs	r3, r1
1000c986:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c988:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI0_SCK_PHASE_INT_CLK_EN;
		break;
1000c98a:	e075      	b.n	1000ca78 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c98c:	4a3c      	ldr	r2, [pc, #240]	; (1000ca80 <system_clock_peripheral_enable+0x358>)
1000c98e:	6913      	ldr	r3, [r2, #16]
1000c990:	2180      	movs	r1, #128	; 0x80
1000c992:	0149      	lsls	r1, r1, #5
1000c994:	430b      	orrs	r3, r1
1000c996:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c998:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI1_SCK_PHASE_INT_CLK_EN;
		break;
1000c99a:	e06d      	b.n	1000ca78 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c99c:	4a38      	ldr	r2, [pc, #224]	; (1000ca80 <system_clock_peripheral_enable+0x358>)
1000c99e:	6913      	ldr	r3, [r2, #16]
1000c9a0:	2180      	movs	r1, #128	; 0x80
1000c9a2:	0189      	lsls	r1, r1, #6
1000c9a4:	430b      	orrs	r3, r1
1000c9a6:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c9a8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_GPIO_GCLK_EN;
		break;
1000c9aa:	e065      	b.n	1000ca78 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c9ac:	4a34      	ldr	r2, [pc, #208]	; (1000ca80 <system_clock_peripheral_enable+0x358>)
1000c9ae:	6913      	ldr	r3, [r2, #16]
1000c9b0:	2180      	movs	r1, #128	; 0x80
1000c9b2:	01c9      	lsls	r1, r1, #7
1000c9b4:	430b      	orrs	r3, r1
1000c9b6:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c9b8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_TIMER0_PGCLK_EN;
		break;
1000c9ba:	e05d      	b.n	1000ca78 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c9bc:	4a30      	ldr	r2, [pc, #192]	; (1000ca80 <system_clock_peripheral_enable+0x358>)
1000c9be:	6913      	ldr	r3, [r2, #16]
1000c9c0:	2180      	movs	r1, #128	; 0x80
1000c9c2:	0209      	lsls	r1, r1, #8
1000c9c4:	430b      	orrs	r3, r1
1000c9c6:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c9c8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_CORE_CLK_EN;
		break;
1000c9ca:	e055      	b.n	1000ca78 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c9cc:	4a2c      	ldr	r2, [pc, #176]	; (1000ca80 <system_clock_peripheral_enable+0x358>)
1000c9ce:	6913      	ldr	r3, [r2, #16]
1000c9d0:	2180      	movs	r1, #128	; 0x80
1000c9d2:	0249      	lsls	r1, r1, #9
1000c9d4:	430b      	orrs	r3, r1
1000c9d6:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c9d8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_AHB_CLK_EN;
		break;
1000c9da:	e04d      	b.n	1000ca78 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c9dc:	4a28      	ldr	r2, [pc, #160]	; (1000ca80 <system_clock_peripheral_enable+0x358>)
1000c9de:	6913      	ldr	r3, [r2, #16]
1000c9e0:	2180      	movs	r1, #128	; 0x80
1000c9e2:	0289      	lsls	r1, r1, #10
1000c9e4:	430b      	orrs	r3, r1
1000c9e6:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c9e8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_CORE_CLK_EN;
		break;
1000c9ea:	e045      	b.n	1000ca78 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c9ec:	4a24      	ldr	r2, [pc, #144]	; (1000ca80 <system_clock_peripheral_enable+0x358>)
1000c9ee:	6913      	ldr	r3, [r2, #16]
1000c9f0:	2180      	movs	r1, #128	; 0x80
1000c9f2:	02c9      	lsls	r1, r1, #11
1000c9f4:	430b      	orrs	r3, r1
1000c9f6:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c9f8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_AHB_CLK_EN;
		break;
1000c9fa:	e03d      	b.n	1000ca78 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c9fc:	4a20      	ldr	r2, [pc, #128]	; (1000ca80 <system_clock_peripheral_enable+0x358>)
1000c9fe:	6913      	ldr	r3, [r2, #16]
1000ca00:	2180      	movs	r1, #128	; 0x80
1000ca02:	0309      	lsls	r1, r1, #12
1000ca04:	430b      	orrs	r3, r1
1000ca06:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ca08:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_0_MEM_CLK_EN;
		break;
1000ca0a:	e035      	b.n	1000ca78 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000ca0c:	4a1c      	ldr	r2, [pc, #112]	; (1000ca80 <system_clock_peripheral_enable+0x358>)
1000ca0e:	6913      	ldr	r3, [r2, #16]
1000ca10:	2180      	movs	r1, #128	; 0x80
1000ca12:	0349      	lsls	r1, r1, #13
1000ca14:	430b      	orrs	r3, r1
1000ca16:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ca18:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_1_MEM_CLK_EN;
		break;
1000ca1a:	e02d      	b.n	1000ca78 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000ca1c:	4a18      	ldr	r2, [pc, #96]	; (1000ca80 <system_clock_peripheral_enable+0x358>)
1000ca1e:	6913      	ldr	r3, [r2, #16]
1000ca20:	2180      	movs	r1, #128	; 0x80
1000ca22:	0389      	lsls	r1, r1, #14
1000ca24:	430b      	orrs	r3, r1
1000ca26:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ca28:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_2_MEM_CLK_EN;
		break;
1000ca2a:	e025      	b.n	1000ca78 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000ca2c:	4a14      	ldr	r2, [pc, #80]	; (1000ca80 <system_clock_peripheral_enable+0x358>)
1000ca2e:	6913      	ldr	r3, [r2, #16]
1000ca30:	2180      	movs	r1, #128	; 0x80
1000ca32:	03c9      	lsls	r1, r1, #15
1000ca34:	430b      	orrs	r3, r1
1000ca36:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ca38:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_0_MEM_CLK_EN;
		break;
1000ca3a:	e01d      	b.n	1000ca78 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000ca3c:	4a10      	ldr	r2, [pc, #64]	; (1000ca80 <system_clock_peripheral_enable+0x358>)
1000ca3e:	6913      	ldr	r3, [r2, #16]
1000ca40:	2180      	movs	r1, #128	; 0x80
1000ca42:	0409      	lsls	r1, r1, #16
1000ca44:	430b      	orrs	r3, r1
1000ca46:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ca48:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_1_MEM_CLK_EN;
		break;
1000ca4a:	e015      	b.n	1000ca78 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
1000ca4c:	4a0c      	ldr	r2, [pc, #48]	; (1000ca80 <system_clock_peripheral_enable+0x358>)
1000ca4e:	7d11      	ldrb	r1, [r2, #20]
1000ca50:	2301      	movs	r3, #1
1000ca52:	430b      	orrs	r3, r1
1000ca54:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ca56:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CTRL_RXTX_SEQ_CLK_EN;
		break;
1000ca58:	e00e      	b.n	1000ca78 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
1000ca5a:	4a09      	ldr	r2, [pc, #36]	; (1000ca80 <system_clock_peripheral_enable+0x358>)
1000ca5c:	7d11      	ldrb	r1, [r2, #20]
1000ca5e:	2302      	movs	r3, #2
1000ca60:	430b      	orrs	r3, r1
1000ca62:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ca64:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CTRL_AHB_CLK_EN;
		break;
1000ca66:	e007      	b.n	1000ca78 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
1000ca68:	4a05      	ldr	r2, [pc, #20]	; (1000ca80 <system_clock_peripheral_enable+0x358>)
1000ca6a:	7d11      	ldrb	r1, [r2, #20]
1000ca6c:	2304      	movs	r3, #4
1000ca6e:	430b      	orrs	r3, r1
1000ca70:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ca72:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CTRL_PERIPH_REGS_CLK_EN;
		break;
1000ca74:	e000      	b.n	1000ca78 <system_clock_peripheral_enable+0x350>

		default:
			return STATUS_ERR_INVALID_ARG;
1000ca76:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
1000ca78:	bd00      	pop	{pc}
1000ca7a:	46c0      	nop			; (mov r8, r8)
1000ca7c:	1001720c 	.word	0x1001720c
1000ca80:	4000b000 	.word	0x4000b000

1000ca84 <system_clock_peripheral_disable>:
 * \return Status of operation.
 * \retval STATUS_OK               Clock config correctly
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_clock_peripheral_disable(enum system_peripheral peripheral)
{
1000ca84:	b500      	push	{lr}
	switch (peripheral) {
1000ca86:	2835      	cmp	r0, #53	; 0x35
1000ca88:	d900      	bls.n	1000ca8c <system_clock_peripheral_disable+0x8>
1000ca8a:	e17d      	b.n	1000cd88 <system_clock_peripheral_disable+0x304>
1000ca8c:	0080      	lsls	r0, r0, #2
1000ca8e:	4bbf      	ldr	r3, [pc, #764]	; (1000cd8c <system_clock_peripheral_disable+0x308>)
1000ca90:	581b      	ldr	r3, [r3, r0]
1000ca92:	469f      	mov	pc, r3
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000ca94:	4abe      	ldr	r2, [pc, #760]	; (1000cd90 <system_clock_peripheral_disable+0x30c>)
1000ca96:	68d3      	ldr	r3, [r2, #12]
1000ca98:	2102      	movs	r1, #2
1000ca9a:	438b      	bics	r3, r1
1000ca9c:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ca9e:	2000      	movs	r0, #0
{
	switch (peripheral) {
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI_FLASH0_CLK_EN;
		break;
1000caa0:	e173      	b.n	1000cd8a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000caa2:	4abb      	ldr	r2, [pc, #748]	; (1000cd90 <system_clock_peripheral_disable+0x30c>)
1000caa4:	68d3      	ldr	r3, [r2, #12]
1000caa6:	2104      	movs	r1, #4
1000caa8:	438b      	bics	r3, r1
1000caaa:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000caac:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI0_CORE_CLK_EN;
		break;
1000caae:	e16c      	b.n	1000cd8a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000cab0:	4ab7      	ldr	r2, [pc, #732]	; (1000cd90 <system_clock_peripheral_disable+0x30c>)
1000cab2:	68d3      	ldr	r3, [r2, #12]
1000cab4:	2108      	movs	r1, #8
1000cab6:	438b      	bics	r3, r1
1000cab8:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000caba:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI1_CORE_CLK_EN;
		break;
1000cabc:	e165      	b.n	1000cd8a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000cabe:	4ab4      	ldr	r2, [pc, #720]	; (1000cd90 <system_clock_peripheral_disable+0x30c>)
1000cac0:	68d3      	ldr	r3, [r2, #12]
1000cac2:	2110      	movs	r1, #16
1000cac4:	438b      	bics	r3, r1
1000cac6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cac8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C0_CORE_CLK_EN;
		break;
1000caca:	e15e      	b.n	1000cd8a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000cacc:	4ab0      	ldr	r2, [pc, #704]	; (1000cd90 <system_clock_peripheral_disable+0x30c>)
1000cace:	68d3      	ldr	r3, [r2, #12]
1000cad0:	2120      	movs	r1, #32
1000cad2:	438b      	bics	r3, r1
1000cad4:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cad6:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_DUALTIMER0_CLK_EN;
		break;
1000cad8:	e157      	b.n	1000cd8a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000cada:	4aad      	ldr	r2, [pc, #692]	; (1000cd90 <system_clock_peripheral_disable+0x30c>)
1000cadc:	68d3      	ldr	r3, [r2, #12]
1000cade:	2180      	movs	r1, #128	; 0x80
1000cae0:	438b      	bics	r3, r1
1000cae2:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cae4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_GPIO_CLK_EN;
		break;
1000cae6:	e150      	b.n	1000cd8a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000cae8:	4aa9      	ldr	r2, [pc, #676]	; (1000cd90 <system_clock_peripheral_disable+0x30c>)
1000caea:	68d1      	ldr	r1, [r2, #12]
1000caec:	4ba9      	ldr	r3, [pc, #676]	; (1000cd94 <system_clock_peripheral_disable+0x310>)
1000caee:	400b      	ands	r3, r1
1000caf0:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000caf2:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_TIMER0_CLK_EN;
		break;
1000caf4:	e149      	b.n	1000cd8a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000caf6:	4aa6      	ldr	r2, [pc, #664]	; (1000cd90 <system_clock_peripheral_disable+0x30c>)
1000caf8:	68d1      	ldr	r1, [r2, #12]
1000cafa:	4ba7      	ldr	r3, [pc, #668]	; (1000cd98 <system_clock_peripheral_disable+0x314>)
1000cafc:	400b      	ands	r3, r1
1000cafe:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cb00:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WDT0_CLK_EN;
		break;
1000cb02:	e142      	b.n	1000cd8a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000cb04:	4aa2      	ldr	r2, [pc, #648]	; (1000cd90 <system_clock_peripheral_disable+0x30c>)
1000cb06:	68d1      	ldr	r1, [r2, #12]
1000cb08:	4ba4      	ldr	r3, [pc, #656]	; (1000cd9c <system_clock_peripheral_disable+0x318>)
1000cb0a:	400b      	ands	r3, r1
1000cb0c:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cb0e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WDT1_CLK_EN;
		break;
1000cb10:	e13b      	b.n	1000cd8a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000cb12:	4a9f      	ldr	r2, [pc, #636]	; (1000cd90 <system_clock_peripheral_disable+0x30c>)
1000cb14:	68d1      	ldr	r1, [r2, #12]
1000cb16:	4ba2      	ldr	r3, [pc, #648]	; (1000cda0 <system_clock_peripheral_disable+0x31c>)
1000cb18:	400b      	ands	r3, r1
1000cb1a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cb1c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART0_CORE_CLK_EN;
		break;
1000cb1e:	e134      	b.n	1000cd8a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000cb20:	4a9b      	ldr	r2, [pc, #620]	; (1000cd90 <system_clock_peripheral_disable+0x30c>)
1000cb22:	68d1      	ldr	r1, [r2, #12]
1000cb24:	4b9f      	ldr	r3, [pc, #636]	; (1000cda4 <system_clock_peripheral_disable+0x320>)
1000cb26:	400b      	ands	r3, r1
1000cb28:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cb2a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART0_IF_CLK_EN;
		break;
1000cb2c:	e12d      	b.n	1000cd8a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000cb2e:	4a98      	ldr	r2, [pc, #608]	; (1000cd90 <system_clock_peripheral_disable+0x30c>)
1000cb30:	68d1      	ldr	r1, [r2, #12]
1000cb32:	4b9d      	ldr	r3, [pc, #628]	; (1000cda8 <system_clock_peripheral_disable+0x324>)
1000cb34:	400b      	ands	r3, r1
1000cb36:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cb38:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART1_CORE_CLK_EN;
		break;
1000cb3a:	e126      	b.n	1000cd8a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000cb3c:	4a94      	ldr	r2, [pc, #592]	; (1000cd90 <system_clock_peripheral_disable+0x30c>)
1000cb3e:	68d1      	ldr	r1, [r2, #12]
1000cb40:	4b9a      	ldr	r3, [pc, #616]	; (1000cdac <system_clock_peripheral_disable+0x328>)
1000cb42:	400b      	ands	r3, r1
1000cb44:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cb46:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART1_IF_CLK_EN;
		break;
1000cb48:	e11f      	b.n	1000cd8a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000cb4a:	4a91      	ldr	r2, [pc, #580]	; (1000cd90 <system_clock_peripheral_disable+0x30c>)
1000cb4c:	68d1      	ldr	r1, [r2, #12]
1000cb4e:	4b98      	ldr	r3, [pc, #608]	; (1000cdb0 <system_clock_peripheral_disable+0x32c>)
1000cb50:	400b      	ands	r3, r1
1000cb52:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cb54:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IRQ_CTRLR_CORE_CLK_EN;
		break;
1000cb56:	e118      	b.n	1000cd8a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000cb58:	4a8d      	ldr	r2, [pc, #564]	; (1000cd90 <system_clock_peripheral_disable+0x30c>)
1000cb5a:	68d1      	ldr	r1, [r2, #12]
1000cb5c:	4b95      	ldr	r3, [pc, #596]	; (1000cdb4 <system_clock_peripheral_disable+0x330>)
1000cb5e:	400b      	ands	r3, r1
1000cb60:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cb62:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_1_GL_MEM_CLK_EN;
		break;
1000cb64:	e111      	b.n	1000cd8a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000cb66:	4a8a      	ldr	r2, [pc, #552]	; (1000cd90 <system_clock_peripheral_disable+0x30c>)
1000cb68:	68d1      	ldr	r1, [r2, #12]
1000cb6a:	4b93      	ldr	r3, [pc, #588]	; (1000cdb8 <system_clock_peripheral_disable+0x334>)
1000cb6c:	400b      	ands	r3, r1
1000cb6e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cb70:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_2_GL_MEM_CLK_EN;
		break;
1000cb72:	e10a      	b.n	1000cd8a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000cb74:	4a86      	ldr	r2, [pc, #536]	; (1000cd90 <system_clock_peripheral_disable+0x30c>)
1000cb76:	68d1      	ldr	r1, [r2, #12]
1000cb78:	4b90      	ldr	r3, [pc, #576]	; (1000cdbc <system_clock_peripheral_disable+0x338>)
1000cb7a:	400b      	ands	r3, r1
1000cb7c:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cb7e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ROM_MEM_CLK_EN;
		break;
1000cb80:	e103      	b.n	1000cd8a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000cb82:	4a83      	ldr	r2, [pc, #524]	; (1000cd90 <system_clock_peripheral_disable+0x30c>)
1000cb84:	68d1      	ldr	r1, [r2, #12]
1000cb86:	4b8e      	ldr	r3, [pc, #568]	; (1000cdc0 <system_clock_peripheral_disable+0x33c>)
1000cb88:	400b      	ands	r3, r1
1000cb8a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cb8c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_XBAR_IF_CLK_EN;
		break;
1000cb8e:	e0fc      	b.n	1000cd8a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000cb90:	4a7f      	ldr	r2, [pc, #508]	; (1000cd90 <system_clock_peripheral_disable+0x30c>)
1000cb92:	68d1      	ldr	r1, [r2, #12]
1000cb94:	4b8b      	ldr	r3, [pc, #556]	; (1000cdc4 <system_clock_peripheral_disable+0x340>)
1000cb96:	400b      	ands	r3, r1
1000cb98:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cb9a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_AON_WRAPPER_CLK_EN;
		break;
1000cb9c:	e0f5      	b.n	1000cd8a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000cb9e:	4a7c      	ldr	r2, [pc, #496]	; (1000cd90 <system_clock_peripheral_disable+0x30c>)
1000cba0:	68d1      	ldr	r1, [r2, #12]
1000cba2:	4b89      	ldr	r3, [pc, #548]	; (1000cdc8 <system_clock_peripheral_disable+0x344>)
1000cba4:	400b      	ands	r3, r1
1000cba6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cba8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLK_EN;
		break;
1000cbaa:	e0ee      	b.n	1000cd8a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000cbac:	4a78      	ldr	r2, [pc, #480]	; (1000cd90 <system_clock_peripheral_disable+0x30c>)
1000cbae:	68d1      	ldr	r1, [r2, #12]
1000cbb0:	4b86      	ldr	r3, [pc, #536]	; (1000cdcc <system_clock_peripheral_disable+0x348>)
1000cbb2:	400b      	ands	r3, r1
1000cbb4:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cbb6:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLKG_EN;
		break;
1000cbb8:	e0e7      	b.n	1000cd8a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000cbba:	4a75      	ldr	r2, [pc, #468]	; (1000cd90 <system_clock_peripheral_disable+0x30c>)
1000cbbc:	68d1      	ldr	r1, [r2, #12]
1000cbbe:	4b84      	ldr	r3, [pc, #528]	; (1000cdd0 <system_clock_peripheral_disable+0x34c>)
1000cbc0:	400b      	ands	r3, r1
1000cbc2:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cbc4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_BLE_MEM_CLK_EN;
		break;
1000cbc6:	e0e0      	b.n	1000cd8a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000cbc8:	4a71      	ldr	r2, [pc, #452]	; (1000cd90 <system_clock_peripheral_disable+0x30c>)
1000cbca:	68d1      	ldr	r1, [r2, #12]
1000cbcc:	4b81      	ldr	r3, [pc, #516]	; (1000cdd4 <system_clock_peripheral_disable+0x350>)
1000cbce:	400b      	ands	r3, r1
1000cbd0:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cbd2:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC0_CLK_EN;
		break;
1000cbd4:	e0d9      	b.n	1000cd8a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000cbd6:	4a6e      	ldr	r2, [pc, #440]	; (1000cd90 <system_clock_peripheral_disable+0x30c>)
1000cbd8:	68d1      	ldr	r1, [r2, #12]
1000cbda:	4b7f      	ldr	r3, [pc, #508]	; (1000cdd8 <system_clock_peripheral_disable+0x354>)
1000cbdc:	400b      	ands	r3, r1
1000cbde:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cbe0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC1_CLK_EN;
		break;
1000cbe2:	e0d2      	b.n	1000cd8a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000cbe4:	4a6a      	ldr	r2, [pc, #424]	; (1000cd90 <system_clock_peripheral_disable+0x30c>)
1000cbe6:	68d1      	ldr	r1, [r2, #12]
1000cbe8:	4b7c      	ldr	r3, [pc, #496]	; (1000cddc <system_clock_peripheral_disable+0x358>)
1000cbea:	400b      	ands	r3, r1
1000cbec:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cbee:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC2_CLK_EN;
		break;
1000cbf0:	e0cb      	b.n	1000cd8a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000cbf2:	4a67      	ldr	r2, [pc, #412]	; (1000cd90 <system_clock_peripheral_disable+0x30c>)
1000cbf4:	68d1      	ldr	r1, [r2, #12]
1000cbf6:	4b7a      	ldr	r3, [pc, #488]	; (1000cde0 <system_clock_peripheral_disable+0x35c>)
1000cbf8:	400b      	ands	r3, r1
1000cbfa:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cbfc:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C1_CORE_CLK_EN;
		break;
1000cbfe:	e0c4      	b.n	1000cd8a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000cc00:	4a63      	ldr	r2, [pc, #396]	; (1000cd90 <system_clock_peripheral_disable+0x30c>)
1000cc02:	68d1      	ldr	r1, [r2, #12]
1000cc04:	4b77      	ldr	r3, [pc, #476]	; (1000cde4 <system_clock_peripheral_disable+0x360>)
1000cc06:	400b      	ands	r3, r1
1000cc08:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cc0a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_CLK_EN;
		break;
1000cc0c:	e0bd      	b.n	1000cd8a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000cc0e:	4a60      	ldr	r2, [pc, #384]	; (1000cd90 <system_clock_peripheral_disable+0x30c>)
1000cc10:	6913      	ldr	r3, [r2, #16]
1000cc12:	2101      	movs	r1, #1
1000cc14:	438b      	bics	r3, r1
1000cc16:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cc18:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE0_CLK_EN;
		break;
1000cc1a:	e0b6      	b.n	1000cd8a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000cc1c:	4a5c      	ldr	r2, [pc, #368]	; (1000cd90 <system_clock_peripheral_disable+0x30c>)
1000cc1e:	6913      	ldr	r3, [r2, #16]
1000cc20:	2102      	movs	r1, #2
1000cc22:	438b      	bics	r3, r1
1000cc24:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cc26:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE1_CLK_EN;
		break;
1000cc28:	e0af      	b.n	1000cd8a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000cc2a:	4a59      	ldr	r2, [pc, #356]	; (1000cd90 <system_clock_peripheral_disable+0x30c>)
1000cc2c:	6913      	ldr	r3, [r2, #16]
1000cc2e:	2104      	movs	r1, #4
1000cc30:	438b      	bics	r3, r1
1000cc32:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cc34:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE2_CLK_EN;
		break;
1000cc36:	e0a8      	b.n	1000cd8a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000cc38:	4a55      	ldr	r2, [pc, #340]	; (1000cd90 <system_clock_peripheral_disable+0x30c>)
1000cc3a:	6913      	ldr	r3, [r2, #16]
1000cc3c:	2108      	movs	r1, #8
1000cc3e:	438b      	bics	r3, r1
1000cc40:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cc42:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE3_CLK_EN;
		break;
1000cc44:	e0a1      	b.n	1000cd8a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000cc46:	4a52      	ldr	r2, [pc, #328]	; (1000cd90 <system_clock_peripheral_disable+0x30c>)
1000cc48:	6913      	ldr	r3, [r2, #16]
1000cc4a:	2110      	movs	r1, #16
1000cc4c:	438b      	bics	r3, r1
1000cc4e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cc50:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE4_CLK_EN;
		break;
1000cc52:	e09a      	b.n	1000cd8a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000cc54:	4a4e      	ldr	r2, [pc, #312]	; (1000cd90 <system_clock_peripheral_disable+0x30c>)
1000cc56:	6913      	ldr	r3, [r2, #16]
1000cc58:	2120      	movs	r1, #32
1000cc5a:	438b      	bics	r3, r1
1000cc5c:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cc5e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE5_CLK_EN;
		break;
1000cc60:	e093      	b.n	1000cd8a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000cc62:	4a4b      	ldr	r2, [pc, #300]	; (1000cd90 <system_clock_peripheral_disable+0x30c>)
1000cc64:	6913      	ldr	r3, [r2, #16]
1000cc66:	2140      	movs	r1, #64	; 0x40
1000cc68:	438b      	bics	r3, r1
1000cc6a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cc6c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM0_CLK_EN;
		break;
1000cc6e:	e08c      	b.n	1000cd8a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000cc70:	4a47      	ldr	r2, [pc, #284]	; (1000cd90 <system_clock_peripheral_disable+0x30c>)
1000cc72:	6913      	ldr	r3, [r2, #16]
1000cc74:	2180      	movs	r1, #128	; 0x80
1000cc76:	438b      	bics	r3, r1
1000cc78:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cc7a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM1_CLK_EN;
		break;
1000cc7c:	e085      	b.n	1000cd8a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000cc7e:	4a44      	ldr	r2, [pc, #272]	; (1000cd90 <system_clock_peripheral_disable+0x30c>)
1000cc80:	6911      	ldr	r1, [r2, #16]
1000cc82:	4b44      	ldr	r3, [pc, #272]	; (1000cd94 <system_clock_peripheral_disable+0x310>)
1000cc84:	400b      	ands	r3, r1
1000cc86:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cc88:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM2_CLK_EN;
		break;
1000cc8a:	e07e      	b.n	1000cd8a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000cc8c:	4a40      	ldr	r2, [pc, #256]	; (1000cd90 <system_clock_peripheral_disable+0x30c>)
1000cc8e:	6911      	ldr	r1, [r2, #16]
1000cc90:	4b55      	ldr	r3, [pc, #340]	; (1000cde8 <system_clock_peripheral_disable+0x364>)
1000cc92:	400b      	ands	r3, r1
1000cc94:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cc96:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM3_CLK_EN;
		break;
1000cc98:	e077      	b.n	1000cd8a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000cc9a:	4a3d      	ldr	r2, [pc, #244]	; (1000cd90 <system_clock_peripheral_disable+0x30c>)
1000cc9c:	6911      	ldr	r1, [r2, #16]
1000cc9e:	4b53      	ldr	r3, [pc, #332]	; (1000cdec <system_clock_peripheral_disable+0x368>)
1000cca0:	400b      	ands	r3, r1
1000cca2:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cca4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SENS_ADC_CLK_EN;
		break;
1000cca6:	e070      	b.n	1000cd8a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000cca8:	4a39      	ldr	r2, [pc, #228]	; (1000cd90 <system_clock_peripheral_disable+0x30c>)
1000ccaa:	6911      	ldr	r1, [r2, #16]
1000ccac:	4b3a      	ldr	r3, [pc, #232]	; (1000cd98 <system_clock_peripheral_disable+0x314>)
1000ccae:	400b      	ands	r3, r1
1000ccb0:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ccb2:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI0_SCK_PHASE_INT_CLK_EN;
		break;
1000ccb4:	e069      	b.n	1000cd8a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000ccb6:	4a36      	ldr	r2, [pc, #216]	; (1000cd90 <system_clock_peripheral_disable+0x30c>)
1000ccb8:	6911      	ldr	r1, [r2, #16]
1000ccba:	4b38      	ldr	r3, [pc, #224]	; (1000cd9c <system_clock_peripheral_disable+0x318>)
1000ccbc:	400b      	ands	r3, r1
1000ccbe:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ccc0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI1_SCK_PHASE_INT_CLK_EN;
		break;
1000ccc2:	e062      	b.n	1000cd8a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000ccc4:	4a32      	ldr	r2, [pc, #200]	; (1000cd90 <system_clock_peripheral_disable+0x30c>)
1000ccc6:	6911      	ldr	r1, [r2, #16]
1000ccc8:	4b35      	ldr	r3, [pc, #212]	; (1000cda0 <system_clock_peripheral_disable+0x31c>)
1000ccca:	400b      	ands	r3, r1
1000cccc:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ccce:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_GPIO_GCLK_EN;
		break;
1000ccd0:	e05b      	b.n	1000cd8a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000ccd2:	4a2f      	ldr	r2, [pc, #188]	; (1000cd90 <system_clock_peripheral_disable+0x30c>)
1000ccd4:	6911      	ldr	r1, [r2, #16]
1000ccd6:	4b33      	ldr	r3, [pc, #204]	; (1000cda4 <system_clock_peripheral_disable+0x320>)
1000ccd8:	400b      	ands	r3, r1
1000ccda:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ccdc:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_TIMER0_PGCLK_EN;
		break;
1000ccde:	e054      	b.n	1000cd8a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000cce0:	4a2b      	ldr	r2, [pc, #172]	; (1000cd90 <system_clock_peripheral_disable+0x30c>)
1000cce2:	6911      	ldr	r1, [r2, #16]
1000cce4:	4b30      	ldr	r3, [pc, #192]	; (1000cda8 <system_clock_peripheral_disable+0x324>)
1000cce6:	400b      	ands	r3, r1
1000cce8:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ccea:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_CORE_CLK_EN;
		break;
1000ccec:	e04d      	b.n	1000cd8a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000ccee:	4a28      	ldr	r2, [pc, #160]	; (1000cd90 <system_clock_peripheral_disable+0x30c>)
1000ccf0:	6911      	ldr	r1, [r2, #16]
1000ccf2:	4b2e      	ldr	r3, [pc, #184]	; (1000cdac <system_clock_peripheral_disable+0x328>)
1000ccf4:	400b      	ands	r3, r1
1000ccf6:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ccf8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_AHB_CLK_EN;
		break;
1000ccfa:	e046      	b.n	1000cd8a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000ccfc:	4a24      	ldr	r2, [pc, #144]	; (1000cd90 <system_clock_peripheral_disable+0x30c>)
1000ccfe:	6911      	ldr	r1, [r2, #16]
1000cd00:	4b2b      	ldr	r3, [pc, #172]	; (1000cdb0 <system_clock_peripheral_disable+0x32c>)
1000cd02:	400b      	ands	r3, r1
1000cd04:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cd06:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_CORE_CLK_EN;
		break;
1000cd08:	e03f      	b.n	1000cd8a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000cd0a:	4a21      	ldr	r2, [pc, #132]	; (1000cd90 <system_clock_peripheral_disable+0x30c>)
1000cd0c:	6911      	ldr	r1, [r2, #16]
1000cd0e:	4b29      	ldr	r3, [pc, #164]	; (1000cdb4 <system_clock_peripheral_disable+0x330>)
1000cd10:	400b      	ands	r3, r1
1000cd12:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cd14:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_AHB_CLK_EN;
		break;
1000cd16:	e038      	b.n	1000cd8a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000cd18:	4a1d      	ldr	r2, [pc, #116]	; (1000cd90 <system_clock_peripheral_disable+0x30c>)
1000cd1a:	6911      	ldr	r1, [r2, #16]
1000cd1c:	4b26      	ldr	r3, [pc, #152]	; (1000cdb8 <system_clock_peripheral_disable+0x334>)
1000cd1e:	400b      	ands	r3, r1
1000cd20:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cd22:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_0_MEM_CLK_EN;
		break;
1000cd24:	e031      	b.n	1000cd8a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000cd26:	4a1a      	ldr	r2, [pc, #104]	; (1000cd90 <system_clock_peripheral_disable+0x30c>)
1000cd28:	6911      	ldr	r1, [r2, #16]
1000cd2a:	4b24      	ldr	r3, [pc, #144]	; (1000cdbc <system_clock_peripheral_disable+0x338>)
1000cd2c:	400b      	ands	r3, r1
1000cd2e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cd30:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_1_MEM_CLK_EN;
		break;
1000cd32:	e02a      	b.n	1000cd8a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000cd34:	4a16      	ldr	r2, [pc, #88]	; (1000cd90 <system_clock_peripheral_disable+0x30c>)
1000cd36:	6911      	ldr	r1, [r2, #16]
1000cd38:	4b21      	ldr	r3, [pc, #132]	; (1000cdc0 <system_clock_peripheral_disable+0x33c>)
1000cd3a:	400b      	ands	r3, r1
1000cd3c:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cd3e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_2_MEM_CLK_EN;
		break;
1000cd40:	e023      	b.n	1000cd8a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000cd42:	4a13      	ldr	r2, [pc, #76]	; (1000cd90 <system_clock_peripheral_disable+0x30c>)
1000cd44:	6911      	ldr	r1, [r2, #16]
1000cd46:	4b1f      	ldr	r3, [pc, #124]	; (1000cdc4 <system_clock_peripheral_disable+0x340>)
1000cd48:	400b      	ands	r3, r1
1000cd4a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cd4c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_0_MEM_CLK_EN;
		break;
1000cd4e:	e01c      	b.n	1000cd8a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000cd50:	4a0f      	ldr	r2, [pc, #60]	; (1000cd90 <system_clock_peripheral_disable+0x30c>)
1000cd52:	6911      	ldr	r1, [r2, #16]
1000cd54:	4b1c      	ldr	r3, [pc, #112]	; (1000cdc8 <system_clock_peripheral_disable+0x344>)
1000cd56:	400b      	ands	r3, r1
1000cd58:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cd5a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_1_MEM_CLK_EN;
		break;
1000cd5c:	e015      	b.n	1000cd8a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
1000cd5e:	4a0c      	ldr	r2, [pc, #48]	; (1000cd90 <system_clock_peripheral_disable+0x30c>)
1000cd60:	7d13      	ldrb	r3, [r2, #20]
1000cd62:	2101      	movs	r1, #1
1000cd64:	438b      	bics	r3, r1
1000cd66:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cd68:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
				~LPMCU_MISC_REGS_BTMCU_CTRL_RXTX_SEQ_CLK_EN;
		break;
1000cd6a:	e00e      	b.n	1000cd8a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
1000cd6c:	4a08      	ldr	r2, [pc, #32]	; (1000cd90 <system_clock_peripheral_disable+0x30c>)
1000cd6e:	7d13      	ldrb	r3, [r2, #20]
1000cd70:	2102      	movs	r1, #2
1000cd72:	438b      	bics	r3, r1
1000cd74:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cd76:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
				~LPMCU_MISC_REGS_BTMCU_CTRL_AHB_CLK_EN;
		break;
1000cd78:	e007      	b.n	1000cd8a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
1000cd7a:	4a05      	ldr	r2, [pc, #20]	; (1000cd90 <system_clock_peripheral_disable+0x30c>)
1000cd7c:	7d13      	ldrb	r3, [r2, #20]
1000cd7e:	2104      	movs	r1, #4
1000cd80:	438b      	bics	r3, r1
1000cd82:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cd84:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
				~LPMCU_MISC_REGS_BTMCU_CTRL_PERIPH_REGS_CLK_EN;
		break;
1000cd86:	e000      	b.n	1000cd8a <system_clock_peripheral_disable+0x306>

		default:
			return STATUS_ERR_INVALID_ARG;
1000cd88:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
1000cd8a:	bd00      	pop	{pc}
1000cd8c:	100172e4 	.word	0x100172e4
1000cd90:	4000b000 	.word	0x4000b000
1000cd94:	fffffeff 	.word	0xfffffeff
1000cd98:	fffff7ff 	.word	0xfffff7ff
1000cd9c:	ffffefff 	.word	0xffffefff
1000cda0:	ffffdfff 	.word	0xffffdfff
1000cda4:	ffffbfff 	.word	0xffffbfff
1000cda8:	ffff7fff 	.word	0xffff7fff
1000cdac:	fffeffff 	.word	0xfffeffff
1000cdb0:	fffdffff 	.word	0xfffdffff
1000cdb4:	fffbffff 	.word	0xfffbffff
1000cdb8:	fff7ffff 	.word	0xfff7ffff
1000cdbc:	ffefffff 	.word	0xffefffff
1000cdc0:	ffdfffff 	.word	0xffdfffff
1000cdc4:	ffbfffff 	.word	0xffbfffff
1000cdc8:	ff7fffff 	.word	0xff7fffff
1000cdcc:	feffffff 	.word	0xfeffffff
1000cdd0:	fdffffff 	.word	0xfdffffff
1000cdd4:	fbffffff 	.word	0xfbffffff
1000cdd8:	f7ffffff 	.word	0xf7ffffff
1000cddc:	efffffff 	.word	0xefffffff
1000cde0:	dfffffff 	.word	0xdfffffff
1000cde4:	bfffffff 	.word	0xbfffffff
1000cde8:	fffffdff 	.word	0xfffffdff
1000cdec:	fffffbff 	.word	0xfffffbff

1000cdf0 <system_peripheral_reset>:
 * \return Status of operation.
 * \retval STATUS_OK               Clock config correctly
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_peripheral_reset(enum system_peripheral peripheral)
{
1000cdf0:	b500      	push	{lr}
	switch (peripheral) {
1000cdf2:	2843      	cmp	r0, #67	; 0x43
1000cdf4:	d900      	bls.n	1000cdf8 <system_peripheral_reset+0x8>
1000cdf6:	e223      	b.n	1000d240 <system_peripheral_reset+0x450>
1000cdf8:	0080      	lsls	r0, r0, #2
1000cdfa:	4be0      	ldr	r3, [pc, #896]	; (1000d17c <system_peripheral_reset+0x38c>)
1000cdfc:	581b      	ldr	r3, [r3, r0]
1000cdfe:	469f      	mov	pc, r3
		case PERIPHERAL_LPMCU_CPU:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000ce00:	4bdf      	ldr	r3, [pc, #892]	; (1000d180 <system_peripheral_reset+0x390>)
1000ce02:	6859      	ldr	r1, [r3, #4]
1000ce04:	2202      	movs	r2, #2
1000ce06:	4391      	bics	r1, r2
1000ce08:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000ce0a:	6859      	ldr	r1, [r3, #4]
1000ce0c:	430a      	orrs	r2, r1
1000ce0e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ce10:	2000      	movs	r0, #0
		case PERIPHERAL_LPMCU_CPU:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN;
		break;
1000ce12:	e216      	b.n	1000d242 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000ce14:	4bda      	ldr	r3, [pc, #872]	; (1000d180 <system_peripheral_reset+0x390>)
1000ce16:	6859      	ldr	r1, [r3, #4]
1000ce18:	2204      	movs	r2, #4
1000ce1a:	4391      	bics	r1, r2
1000ce1c:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_SYS_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000ce1e:	6859      	ldr	r1, [r3, #4]
1000ce20:	430a      	orrs	r2, r1
1000ce22:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ce24:	2000      	movs	r0, #0
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_SYS_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_SYS_RSTN;
		break;
1000ce26:	e20c      	b.n	1000d242 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI_FLASH_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000ce28:	4bd5      	ldr	r3, [pc, #852]	; (1000d180 <system_peripheral_reset+0x390>)
1000ce2a:	6859      	ldr	r1, [r3, #4]
1000ce2c:	2208      	movs	r2, #8
1000ce2e:	4391      	bics	r1, r2
1000ce30:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000ce32:	6859      	ldr	r1, [r3, #4]
1000ce34:	430a      	orrs	r2, r1
1000ce36:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ce38:	2000      	movs	r0, #0
		case PERIPHERAL_SPI_FLASH_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_RSTN;
		break;
1000ce3a:	e202      	b.n	1000d242 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000ce3c:	4bd0      	ldr	r3, [pc, #832]	; (1000d180 <system_peripheral_reset+0x390>)
1000ce3e:	6859      	ldr	r1, [r3, #4]
1000ce40:	2210      	movs	r2, #16
1000ce42:	4391      	bics	r1, r2
1000ce44:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000ce46:	6859      	ldr	r1, [r3, #4]
1000ce48:	430a      	orrs	r2, r1
1000ce4a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ce4c:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_CORE_RSTN;
		break;
1000ce4e:	e1f8      	b.n	1000d242 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000ce50:	4bcb      	ldr	r3, [pc, #812]	; (1000d180 <system_peripheral_reset+0x390>)
1000ce52:	6859      	ldr	r1, [r3, #4]
1000ce54:	2220      	movs	r2, #32
1000ce56:	4391      	bics	r1, r2
1000ce58:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000ce5a:	6859      	ldr	r1, [r3, #4]
1000ce5c:	430a      	orrs	r2, r1
1000ce5e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ce60:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_IF_RSTN;
		break;
1000ce62:	e1ee      	b.n	1000d242 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000ce64:	4bc6      	ldr	r3, [pc, #792]	; (1000d180 <system_peripheral_reset+0x390>)
1000ce66:	6859      	ldr	r1, [r3, #4]
1000ce68:	2240      	movs	r2, #64	; 0x40
1000ce6a:	4391      	bics	r1, r2
1000ce6c:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_CORE_RESETN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000ce6e:	6859      	ldr	r1, [r3, #4]
1000ce70:	430a      	orrs	r2, r1
1000ce72:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ce74:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_CORE_RESETN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_CORE_RESETN;
		break;
1000ce76:	e1e4      	b.n	1000d242 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000ce78:	4bc1      	ldr	r3, [pc, #772]	; (1000d180 <system_peripheral_reset+0x390>)
1000ce7a:	6859      	ldr	r1, [r3, #4]
1000ce7c:	2280      	movs	r2, #128	; 0x80
1000ce7e:	4391      	bics	r1, r2
1000ce80:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000ce82:	6859      	ldr	r1, [r3, #4]
1000ce84:	430a      	orrs	r2, r1
1000ce86:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ce88:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_IF_RSTN;
		break;
1000ce8a:	e1da      	b.n	1000d242 <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000ce8c:	4bbc      	ldr	r3, [pc, #752]	; (1000d180 <system_peripheral_reset+0x390>)
1000ce8e:	6859      	ldr	r1, [r3, #4]
1000ce90:	4abc      	ldr	r2, [pc, #752]	; (1000d184 <system_peripheral_reset+0x394>)
1000ce92:	400a      	ands	r2, r1
1000ce94:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000ce96:	685a      	ldr	r2, [r3, #4]
1000ce98:	2180      	movs	r1, #128	; 0x80
1000ce9a:	0049      	lsls	r1, r1, #1
1000ce9c:	430a      	orrs	r2, r1
1000ce9e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cea0:	2000      	movs	r0, #0
		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_CORE_RSTN;
		break;
1000cea2:	e1ce      	b.n	1000d242 <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cea4:	4bb6      	ldr	r3, [pc, #728]	; (1000d180 <system_peripheral_reset+0x390>)
1000cea6:	6859      	ldr	r1, [r3, #4]
1000cea8:	4ab7      	ldr	r2, [pc, #732]	; (1000d188 <system_peripheral_reset+0x398>)
1000ceaa:	400a      	ands	r2, r1
1000ceac:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000ceae:	685a      	ldr	r2, [r3, #4]
1000ceb0:	2180      	movs	r1, #128	; 0x80
1000ceb2:	0089      	lsls	r1, r1, #2
1000ceb4:	430a      	orrs	r2, r1
1000ceb6:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ceb8:	2000      	movs	r0, #0
		case PERIPHERAL_I2C0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_IF_RSTN;
		break;
1000ceba:	e1c2      	b.n	1000d242 <system_peripheral_reset+0x452>

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cebc:	4bb0      	ldr	r3, [pc, #704]	; (1000d180 <system_peripheral_reset+0x390>)
1000cebe:	6859      	ldr	r1, [r3, #4]
1000cec0:	4ab2      	ldr	r2, [pc, #712]	; (1000d18c <system_peripheral_reset+0x39c>)
1000cec2:	400a      	ands	r2, r1
1000cec4:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cec6:	685a      	ldr	r2, [r3, #4]
1000cec8:	2180      	movs	r1, #128	; 0x80
1000ceca:	00c9      	lsls	r1, r1, #3
1000cecc:	430a      	orrs	r2, r1
1000cece:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ced0:	2000      	movs	r0, #0
		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
		break;
1000ced2:	e1b6      	b.n	1000d242 <system_peripheral_reset+0x452>

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000ced4:	4baa      	ldr	r3, [pc, #680]	; (1000d180 <system_peripheral_reset+0x390>)
1000ced6:	6859      	ldr	r1, [r3, #4]
1000ced8:	4aad      	ldr	r2, [pc, #692]	; (1000d190 <system_peripheral_reset+0x3a0>)
1000ceda:	400a      	ands	r2, r1
1000cedc:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_TIMER0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cede:	685a      	ldr	r2, [r3, #4]
1000cee0:	2180      	movs	r1, #128	; 0x80
1000cee2:	0109      	lsls	r1, r1, #4
1000cee4:	430a      	orrs	r2, r1
1000cee6:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cee8:	2000      	movs	r0, #0
		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_TIMER0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_TIMER0_RSTN;
		break;
1000ceea:	e1aa      	b.n	1000d242 <system_peripheral_reset+0x452>

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000ceec:	4ba4      	ldr	r3, [pc, #656]	; (1000d180 <system_peripheral_reset+0x390>)
1000ceee:	6859      	ldr	r1, [r3, #4]
1000cef0:	4aa8      	ldr	r2, [pc, #672]	; (1000d194 <system_peripheral_reset+0x3a4>)
1000cef2:	400a      	ands	r2, r1
1000cef4:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cef6:	685a      	ldr	r2, [r3, #4]
1000cef8:	2180      	movs	r1, #128	; 0x80
1000cefa:	0149      	lsls	r1, r1, #5
1000cefc:	430a      	orrs	r2, r1
1000cefe:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cf00:	2000      	movs	r0, #0
		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_CORE_RSTN;
		break;
1000cf02:	e19e      	b.n	1000d242 <system_peripheral_reset+0x452>

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cf04:	4b9e      	ldr	r3, [pc, #632]	; (1000d180 <system_peripheral_reset+0x390>)
1000cf06:	6859      	ldr	r1, [r3, #4]
1000cf08:	4aa3      	ldr	r2, [pc, #652]	; (1000d198 <system_peripheral_reset+0x3a8>)
1000cf0a:	400a      	ands	r2, r1
1000cf0c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cf0e:	685a      	ldr	r2, [r3, #4]
1000cf10:	2180      	movs	r1, #128	; 0x80
1000cf12:	0189      	lsls	r1, r1, #6
1000cf14:	430a      	orrs	r2, r1
1000cf16:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cf18:	2000      	movs	r0, #0
		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_IF_RSTN;
		break;
1000cf1a:	e192      	b.n	1000d242 <system_peripheral_reset+0x452>

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cf1c:	4b98      	ldr	r3, [pc, #608]	; (1000d180 <system_peripheral_reset+0x390>)
1000cf1e:	6859      	ldr	r1, [r3, #4]
1000cf20:	4a9e      	ldr	r2, [pc, #632]	; (1000d19c <system_peripheral_reset+0x3ac>)
1000cf22:	400a      	ands	r2, r1
1000cf24:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cf26:	685a      	ldr	r2, [r3, #4]
1000cf28:	2180      	movs	r1, #128	; 0x80
1000cf2a:	01c9      	lsls	r1, r1, #7
1000cf2c:	430a      	orrs	r2, r1
1000cf2e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cf30:	2000      	movs	r0, #0
		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_CORE_RSTN;
		break;
1000cf32:	e186      	b.n	1000d242 <system_peripheral_reset+0x452>

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cf34:	4b92      	ldr	r3, [pc, #584]	; (1000d180 <system_peripheral_reset+0x390>)
1000cf36:	6859      	ldr	r1, [r3, #4]
1000cf38:	4a99      	ldr	r2, [pc, #612]	; (1000d1a0 <system_peripheral_reset+0x3b0>)
1000cf3a:	400a      	ands	r2, r1
1000cf3c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cf3e:	685a      	ldr	r2, [r3, #4]
1000cf40:	2180      	movs	r1, #128	; 0x80
1000cf42:	0209      	lsls	r1, r1, #8
1000cf44:	430a      	orrs	r2, r1
1000cf46:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cf48:	2000      	movs	r0, #0
		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_IF_RSTN;
		break;
1000cf4a:	e17a      	b.n	1000d242 <system_peripheral_reset+0x452>

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cf4c:	4b8c      	ldr	r3, [pc, #560]	; (1000d180 <system_peripheral_reset+0x390>)
1000cf4e:	6859      	ldr	r1, [r3, #4]
1000cf50:	4a94      	ldr	r2, [pc, #592]	; (1000d1a4 <system_peripheral_reset+0x3b4>)
1000cf52:	400a      	ands	r2, r1
1000cf54:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cf56:	685a      	ldr	r2, [r3, #4]
1000cf58:	2180      	movs	r1, #128	; 0x80
1000cf5a:	0249      	lsls	r1, r1, #9
1000cf5c:	430a      	orrs	r2, r1
1000cf5e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cf60:	2000      	movs	r0, #0
		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT0_RSTN;
		break;
1000cf62:	e16e      	b.n	1000d242 <system_peripheral_reset+0x452>

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cf64:	4b86      	ldr	r3, [pc, #536]	; (1000d180 <system_peripheral_reset+0x390>)
1000cf66:	6859      	ldr	r1, [r3, #4]
1000cf68:	4a8f      	ldr	r2, [pc, #572]	; (1000d1a8 <system_peripheral_reset+0x3b8>)
1000cf6a:	400a      	ands	r2, r1
1000cf6c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cf6e:	685a      	ldr	r2, [r3, #4]
1000cf70:	2180      	movs	r1, #128	; 0x80
1000cf72:	0289      	lsls	r1, r1, #10
1000cf74:	430a      	orrs	r2, r1
1000cf76:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cf78:	2000      	movs	r0, #0
		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT1_RSTN;
		break;
1000cf7a:	e162      	b.n	1000d242 <system_peripheral_reset+0x452>

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cf7c:	4b80      	ldr	r3, [pc, #512]	; (1000d180 <system_peripheral_reset+0x390>)
1000cf7e:	6859      	ldr	r1, [r3, #4]
1000cf80:	4a8a      	ldr	r2, [pc, #552]	; (1000d1ac <system_peripheral_reset+0x3bc>)
1000cf82:	400a      	ands	r2, r1
1000cf84:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cf86:	685a      	ldr	r2, [r3, #4]
1000cf88:	2180      	movs	r1, #128	; 0x80
1000cf8a:	02c9      	lsls	r1, r1, #11
1000cf8c:	430a      	orrs	r2, r1
1000cf8e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cf90:	2000      	movs	r0, #0
		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
		break;
1000cf92:	e156      	b.n	1000d242 <system_peripheral_reset+0x452>

		case PERIPHERAL_MBIST:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cf94:	4b7a      	ldr	r3, [pc, #488]	; (1000d180 <system_peripheral_reset+0x390>)
1000cf96:	6859      	ldr	r1, [r3, #4]
1000cf98:	4a85      	ldr	r2, [pc, #532]	; (1000d1b0 <system_peripheral_reset+0x3c0>)
1000cf9a:	400a      	ands	r2, r1
1000cf9c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cf9e:	685a      	ldr	r2, [r3, #4]
1000cfa0:	2180      	movs	r1, #128	; 0x80
1000cfa2:	0309      	lsls	r1, r1, #12
1000cfa4:	430a      	orrs	r2, r1
1000cfa6:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cfa8:	2000      	movs	r0, #0
		case PERIPHERAL_MBIST:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
		break;
1000cfaa:	e14a      	b.n	1000d242 <system_peripheral_reset+0x452>

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cfac:	4b74      	ldr	r3, [pc, #464]	; (1000d180 <system_peripheral_reset+0x390>)
1000cfae:	6859      	ldr	r1, [r3, #4]
1000cfb0:	4a80      	ldr	r2, [pc, #512]	; (1000d1b4 <system_peripheral_reset+0x3c4>)
1000cfb2:	400a      	ands	r2, r1
1000cfb4:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cfb6:	685a      	ldr	r2, [r3, #4]
1000cfb8:	2180      	movs	r1, #128	; 0x80
1000cfba:	0349      	lsls	r1, r1, #13
1000cfbc:	430a      	orrs	r2, r1
1000cfbe:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cfc0:	2000      	movs	r0, #0
		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
		break;
1000cfc2:	e13e      	b.n	1000d242 <system_peripheral_reset+0x452>

		case PERIPHERAL_LOW_POWER_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cfc4:	4b6e      	ldr	r3, [pc, #440]	; (1000d180 <system_peripheral_reset+0x390>)
1000cfc6:	6859      	ldr	r1, [r3, #4]
1000cfc8:	4a7b      	ldr	r2, [pc, #492]	; (1000d1b8 <system_peripheral_reset+0x3c8>)
1000cfca:	400a      	ands	r2, r1
1000cfcc:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cfce:	685a      	ldr	r2, [r3, #4]
1000cfd0:	2180      	movs	r1, #128	; 0x80
1000cfd2:	0389      	lsls	r1, r1, #14
1000cfd4:	430a      	orrs	r2, r1
1000cfd6:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cfd8:	2000      	movs	r0, #0
		case PERIPHERAL_LOW_POWER_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
		break;
1000cfda:	e132      	b.n	1000d242 <system_peripheral_reset+0x452>

		case PERIPHERAL_LPMCU_DEBUG:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cfdc:	4b68      	ldr	r3, [pc, #416]	; (1000d180 <system_peripheral_reset+0x390>)
1000cfde:	6859      	ldr	r1, [r3, #4]
1000cfe0:	4a76      	ldr	r2, [pc, #472]	; (1000d1bc <system_peripheral_reset+0x3cc>)
1000cfe2:	400a      	ands	r2, r1
1000cfe4:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cfe6:	685a      	ldr	r2, [r3, #4]
1000cfe8:	2180      	movs	r1, #128	; 0x80
1000cfea:	03c9      	lsls	r1, r1, #15
1000cfec:	430a      	orrs	r2, r1
1000cfee:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cff0:	2000      	movs	r0, #0
		case PERIPHERAL_LPMCU_DEBUG:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
		break;
1000cff2:	e126      	b.n	1000d242 <system_peripheral_reset+0x452>

		case PERIPHERAL_ARM_FREE_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cff4:	4b62      	ldr	r3, [pc, #392]	; (1000d180 <system_peripheral_reset+0x390>)
1000cff6:	6859      	ldr	r1, [r3, #4]
1000cff8:	4a71      	ldr	r2, [pc, #452]	; (1000d1c0 <system_peripheral_reset+0x3d0>)
1000cffa:	400a      	ands	r2, r1
1000cffc:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cffe:	685a      	ldr	r2, [r3, #4]
1000d000:	2180      	movs	r1, #128	; 0x80
1000d002:	0409      	lsls	r1, r1, #16
1000d004:	430a      	orrs	r2, r1
1000d006:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d008:	2000      	movs	r0, #0
		case PERIPHERAL_ARM_FREE_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
		break;
1000d00a:	e11a      	b.n	1000d242 <system_peripheral_reset+0x452>

		case PERIPHERAL_ARM_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000d00c:	4b5c      	ldr	r3, [pc, #368]	; (1000d180 <system_peripheral_reset+0x390>)
1000d00e:	6859      	ldr	r1, [r3, #4]
1000d010:	4a6c      	ldr	r2, [pc, #432]	; (1000d1c4 <system_peripheral_reset+0x3d4>)
1000d012:	400a      	ands	r2, r1
1000d014:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000d016:	685a      	ldr	r2, [r3, #4]
1000d018:	2180      	movs	r1, #128	; 0x80
1000d01a:	0449      	lsls	r1, r1, #17
1000d01c:	430a      	orrs	r2, r1
1000d01e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d020:	2000      	movs	r0, #0
		case PERIPHERAL_ARM_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
		break;
1000d022:	e10e      	b.n	1000d242 <system_peripheral_reset+0x452>

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000d024:	4b56      	ldr	r3, [pc, #344]	; (1000d180 <system_peripheral_reset+0x390>)
1000d026:	6859      	ldr	r1, [r3, #4]
1000d028:	4a67      	ldr	r2, [pc, #412]	; (1000d1c8 <system_peripheral_reset+0x3d8>)
1000d02a:	400a      	ands	r2, r1
1000d02c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000d02e:	685a      	ldr	r2, [r3, #4]
1000d030:	2180      	movs	r1, #128	; 0x80
1000d032:	0489      	lsls	r1, r1, #18
1000d034:	430a      	orrs	r2, r1
1000d036:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d038:	2000      	movs	r0, #0
		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC0_RSTN;
		break;
1000d03a:	e102      	b.n	1000d242 <system_peripheral_reset+0x452>

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000d03c:	4b50      	ldr	r3, [pc, #320]	; (1000d180 <system_peripheral_reset+0x390>)
1000d03e:	6859      	ldr	r1, [r3, #4]
1000d040:	4a62      	ldr	r2, [pc, #392]	; (1000d1cc <system_peripheral_reset+0x3dc>)
1000d042:	400a      	ands	r2, r1
1000d044:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000d046:	685a      	ldr	r2, [r3, #4]
1000d048:	2180      	movs	r1, #128	; 0x80
1000d04a:	04c9      	lsls	r1, r1, #19
1000d04c:	430a      	orrs	r2, r1
1000d04e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d050:	2000      	movs	r0, #0
		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC1_RSTN;
		break;
1000d052:	e0f6      	b.n	1000d242 <system_peripheral_reset+0x452>

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000d054:	4b4a      	ldr	r3, [pc, #296]	; (1000d180 <system_peripheral_reset+0x390>)
1000d056:	6859      	ldr	r1, [r3, #4]
1000d058:	4a5d      	ldr	r2, [pc, #372]	; (1000d1d0 <system_peripheral_reset+0x3e0>)
1000d05a:	400a      	ands	r2, r1
1000d05c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000d05e:	685a      	ldr	r2, [r3, #4]
1000d060:	2180      	movs	r1, #128	; 0x80
1000d062:	0509      	lsls	r1, r1, #20
1000d064:	430a      	orrs	r2, r1
1000d066:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d068:	2000      	movs	r0, #0
		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC2_RSTN;
		break;
1000d06a:	e0ea      	b.n	1000d242 <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000d06c:	4b44      	ldr	r3, [pc, #272]	; (1000d180 <system_peripheral_reset+0x390>)
1000d06e:	6859      	ldr	r1, [r3, #4]
1000d070:	4a58      	ldr	r2, [pc, #352]	; (1000d1d4 <system_peripheral_reset+0x3e4>)
1000d072:	400a      	ands	r2, r1
1000d074:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000d076:	685a      	ldr	r2, [r3, #4]
1000d078:	2180      	movs	r1, #128	; 0x80
1000d07a:	0549      	lsls	r1, r1, #21
1000d07c:	430a      	orrs	r2, r1
1000d07e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d080:	2000      	movs	r0, #0
		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM0_RSTN;
		break;
1000d082:	e0de      	b.n	1000d242 <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000d084:	4b3e      	ldr	r3, [pc, #248]	; (1000d180 <system_peripheral_reset+0x390>)
1000d086:	6859      	ldr	r1, [r3, #4]
1000d088:	4a53      	ldr	r2, [pc, #332]	; (1000d1d8 <system_peripheral_reset+0x3e8>)
1000d08a:	400a      	ands	r2, r1
1000d08c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000d08e:	685a      	ldr	r2, [r3, #4]
1000d090:	2180      	movs	r1, #128	; 0x80
1000d092:	0589      	lsls	r1, r1, #22
1000d094:	430a      	orrs	r2, r1
1000d096:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d098:	2000      	movs	r0, #0
		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM1_RSTN;
		break;
1000d09a:	e0d2      	b.n	1000d242 <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000d09c:	4b38      	ldr	r3, [pc, #224]	; (1000d180 <system_peripheral_reset+0x390>)
1000d09e:	6859      	ldr	r1, [r3, #4]
1000d0a0:	4a4e      	ldr	r2, [pc, #312]	; (1000d1dc <system_peripheral_reset+0x3ec>)
1000d0a2:	400a      	ands	r2, r1
1000d0a4:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000d0a6:	685a      	ldr	r2, [r3, #4]
1000d0a8:	2180      	movs	r1, #128	; 0x80
1000d0aa:	05c9      	lsls	r1, r1, #23
1000d0ac:	430a      	orrs	r2, r1
1000d0ae:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d0b0:	2000      	movs	r0, #0
		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM2_RSTN;
		break;
1000d0b2:	e0c6      	b.n	1000d242 <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000d0b4:	4a32      	ldr	r2, [pc, #200]	; (1000d180 <system_peripheral_reset+0x390>)
1000d0b6:	6853      	ldr	r3, [r2, #4]
1000d0b8:	005b      	lsls	r3, r3, #1
1000d0ba:	085b      	lsrs	r3, r3, #1
1000d0bc:	6053      	str	r3, [r2, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM3_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000d0be:	6853      	ldr	r3, [r2, #4]
1000d0c0:	2180      	movs	r1, #128	; 0x80
1000d0c2:	0609      	lsls	r1, r1, #24
1000d0c4:	430b      	orrs	r3, r1
1000d0c6:	6053      	str	r3, [r2, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d0c8:	2000      	movs	r0, #0
		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM3_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM3_RSTN;
		break;
1000d0ca:	e0ba      	b.n	1000d242 <system_peripheral_reset+0x452>

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000d0cc:	4b2c      	ldr	r3, [pc, #176]	; (1000d180 <system_peripheral_reset+0x390>)
1000d0ce:	891a      	ldrh	r2, [r3, #8]
1000d0d0:	2101      	movs	r1, #1
1000d0d2:	438a      	bics	r2, r1
1000d0d4:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000d0d6:	8919      	ldrh	r1, [r3, #8]
1000d0d8:	2201      	movs	r2, #1
1000d0da:	430a      	orrs	r2, r1
1000d0dc:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d0de:	2000      	movs	r0, #0
		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER0_RSTN;
		break;
1000d0e0:	e0af      	b.n	1000d242 <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000d0e2:	4b27      	ldr	r3, [pc, #156]	; (1000d180 <system_peripheral_reset+0x390>)
1000d0e4:	891a      	ldrh	r2, [r3, #8]
1000d0e6:	2102      	movs	r1, #2
1000d0e8:	438a      	bics	r2, r1
1000d0ea:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000d0ec:	8919      	ldrh	r1, [r3, #8]
1000d0ee:	2202      	movs	r2, #2
1000d0f0:	430a      	orrs	r2, r1
1000d0f2:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d0f4:	2000      	movs	r0, #0
		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_CORE_RSTN;
		break;
1000d0f6:	e0a4      	b.n	1000d242 <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000d0f8:	4b21      	ldr	r3, [pc, #132]	; (1000d180 <system_peripheral_reset+0x390>)
1000d0fa:	891a      	ldrh	r2, [r3, #8]
1000d0fc:	2104      	movs	r1, #4
1000d0fe:	438a      	bics	r2, r1
1000d100:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000d102:	8919      	ldrh	r1, [r3, #8]
1000d104:	2204      	movs	r2, #4
1000d106:	430a      	orrs	r2, r1
1000d108:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d10a:	2000      	movs	r0, #0
		case PERIPHERAL_I2C1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_IF_RSTN;
		break;
1000d10c:	e099      	b.n	1000d242 <system_peripheral_reset+0x452>

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000d10e:	4b1c      	ldr	r3, [pc, #112]	; (1000d180 <system_peripheral_reset+0x390>)
1000d110:	891a      	ldrh	r2, [r3, #8]
1000d112:	2108      	movs	r1, #8
1000d114:	438a      	bics	r2, r1
1000d116:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000d118:	8919      	ldrh	r1, [r3, #8]
1000d11a:	2208      	movs	r2, #8
1000d11c:	430a      	orrs	r2, r1
1000d11e:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d120:	2000      	movs	r0, #0
		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
		break;
1000d122:	e08e      	b.n	1000d242 <system_peripheral_reset+0x452>

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000d124:	4b16      	ldr	r3, [pc, #88]	; (1000d180 <system_peripheral_reset+0x390>)
1000d126:	891a      	ldrh	r2, [r3, #8]
1000d128:	2110      	movs	r1, #16
1000d12a:	438a      	bics	r2, r1
1000d12c:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000d12e:	8919      	ldrh	r1, [r3, #8]
1000d130:	2210      	movs	r2, #16
1000d132:	430a      	orrs	r2, r1
1000d134:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d136:	2000      	movs	r0, #0
		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
		break;
1000d138:	e083      	b.n	1000d242 <system_peripheral_reset+0x452>

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000d13a:	4b11      	ldr	r3, [pc, #68]	; (1000d180 <system_peripheral_reset+0x390>)
1000d13c:	891a      	ldrh	r2, [r3, #8]
1000d13e:	2120      	movs	r1, #32
1000d140:	438a      	bics	r2, r1
1000d142:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000d144:	8919      	ldrh	r1, [r3, #8]
1000d146:	2220      	movs	r2, #32
1000d148:	430a      	orrs	r2, r1
1000d14a:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d14c:	2000      	movs	r0, #0
		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
		break;
1000d14e:	e078      	b.n	1000d242 <system_peripheral_reset+0x452>

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000d150:	4b0b      	ldr	r3, [pc, #44]	; (1000d180 <system_peripheral_reset+0x390>)
1000d152:	891a      	ldrh	r2, [r3, #8]
1000d154:	2140      	movs	r1, #64	; 0x40
1000d156:	438a      	bics	r2, r1
1000d158:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000d15a:	8919      	ldrh	r1, [r3, #8]
1000d15c:	2240      	movs	r2, #64	; 0x40
1000d15e:	430a      	orrs	r2, r1
1000d160:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d162:	2000      	movs	r0, #0
		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
		break;
1000d164:	e06d      	b.n	1000d242 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000d166:	4b06      	ldr	r3, [pc, #24]	; (1000d180 <system_peripheral_reset+0x390>)
1000d168:	891a      	ldrh	r2, [r3, #8]
1000d16a:	2180      	movs	r1, #128	; 0x80
1000d16c:	438a      	bics	r2, r1
1000d16e:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000d170:	8919      	ldrh	r1, [r3, #8]
1000d172:	2280      	movs	r2, #128	; 0x80
1000d174:	430a      	orrs	r2, r1
1000d176:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d178:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_CLK_RSTN;
		break;
1000d17a:	e062      	b.n	1000d242 <system_peripheral_reset+0x452>
1000d17c:	100173bc 	.word	0x100173bc
1000d180:	4000b000 	.word	0x4000b000
1000d184:	fffffeff 	.word	0xfffffeff
1000d188:	fffffdff 	.word	0xfffffdff
1000d18c:	fffffbff 	.word	0xfffffbff
1000d190:	fffff7ff 	.word	0xfffff7ff
1000d194:	ffffefff 	.word	0xffffefff
1000d198:	ffffdfff 	.word	0xffffdfff
1000d19c:	ffffbfff 	.word	0xffffbfff
1000d1a0:	ffff7fff 	.word	0xffff7fff
1000d1a4:	fffeffff 	.word	0xfffeffff
1000d1a8:	fffdffff 	.word	0xfffdffff
1000d1ac:	fffbffff 	.word	0xfffbffff
1000d1b0:	fff7ffff 	.word	0xfff7ffff
1000d1b4:	ffefffff 	.word	0xffefffff
1000d1b8:	ffdfffff 	.word	0xffdfffff
1000d1bc:	ffbfffff 	.word	0xffbfffff
1000d1c0:	ff7fffff 	.word	0xff7fffff
1000d1c4:	feffffff 	.word	0xfeffffff
1000d1c8:	fdffffff 	.word	0xfdffffff
1000d1cc:	fbffffff 	.word	0xfbffffff
1000d1d0:	f7ffffff 	.word	0xf7ffffff
1000d1d4:	efffffff 	.word	0xefffffff
1000d1d8:	dfffffff 	.word	0xdfffffff
1000d1dc:	bfffffff 	.word	0xbfffffff

		case PERIPHERAL_SPI1_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000d1e0:	4b18      	ldr	r3, [pc, #96]	; (1000d244 <system_peripheral_reset+0x454>)
1000d1e2:	8919      	ldrh	r1, [r3, #8]
1000d1e4:	4a18      	ldr	r2, [pc, #96]	; (1000d248 <system_peripheral_reset+0x458>)
1000d1e6:	400a      	ands	r2, r1
1000d1e8:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000d1ea:	8919      	ldrh	r1, [r3, #8]
1000d1ec:	2280      	movs	r2, #128	; 0x80
1000d1ee:	0052      	lsls	r2, r2, #1
1000d1f0:	430a      	orrs	r2, r1
1000d1f2:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d1f4:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_CLK_RSTN;
		break;
1000d1f6:	e024      	b.n	1000d242 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000d1f8:	4b12      	ldr	r3, [pc, #72]	; (1000d244 <system_peripheral_reset+0x454>)
1000d1fa:	8919      	ldrh	r1, [r3, #8]
1000d1fc:	4a13      	ldr	r2, [pc, #76]	; (1000d24c <system_peripheral_reset+0x45c>)
1000d1fe:	400a      	ands	r2, r1
1000d200:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000d202:	8919      	ldrh	r1, [r3, #8]
1000d204:	2280      	movs	r2, #128	; 0x80
1000d206:	0092      	lsls	r2, r2, #2
1000d208:	430a      	orrs	r2, r1
1000d20a:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d20c:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_PHASE_INT_CLK_RSTN;
		break;
1000d20e:	e018      	b.n	1000d242 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000d210:	4b0c      	ldr	r3, [pc, #48]	; (1000d244 <system_peripheral_reset+0x454>)
1000d212:	8919      	ldrh	r1, [r3, #8]
1000d214:	4a0e      	ldr	r2, [pc, #56]	; (1000d250 <system_peripheral_reset+0x460>)
1000d216:	400a      	ands	r2, r1
1000d218:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000d21a:	8919      	ldrh	r1, [r3, #8]
1000d21c:	2280      	movs	r2, #128	; 0x80
1000d21e:	00d2      	lsls	r2, r2, #3
1000d220:	430a      	orrs	r2, r1
1000d222:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d224:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_PHASE_INT_CLK_RSTN;
		break;
1000d226:	e00c      	b.n	1000d242 <system_peripheral_reset+0x452>

		case PERIPHERAL_DMA:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000d228:	4b06      	ldr	r3, [pc, #24]	; (1000d244 <system_peripheral_reset+0x454>)
1000d22a:	8919      	ldrh	r1, [r3, #8]
1000d22c:	4a09      	ldr	r2, [pc, #36]	; (1000d254 <system_peripheral_reset+0x464>)
1000d22e:	400a      	ands	r2, r1
1000d230:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_PROV_DMA_CTRL0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000d232:	8919      	ldrh	r1, [r3, #8]
1000d234:	2280      	movs	r2, #128	; 0x80
1000d236:	0112      	lsls	r2, r2, #4
1000d238:	430a      	orrs	r2, r1
1000d23a:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d23c:	2000      	movs	r0, #0
		case PERIPHERAL_DMA:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_PROV_DMA_CTRL0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_PROV_DMA_CTRL0_RSTN;
		break;
1000d23e:	e000      	b.n	1000d242 <system_peripheral_reset+0x452>

		default:
			return STATUS_ERR_INVALID_ARG;
1000d240:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
1000d242:	bd00      	pop	{pc}
1000d244:	4000b000 	.word	0x4000b000
1000d248:	fffffeff 	.word	0xfffffeff
1000d24c:	fffffdff 	.word	0xfffffdff
1000d250:	fffffbff 	.word	0xfffffbff
1000d254:	fffff7ff 	.word	0xfffff7ff

1000d258 <system_register_isr>:
void system_register_isr(enum ram_isr_table_index isr_index,
		uint32_t isr_address)
{
	uint32_t *temp;
	temp = (uint32_t *)(isr_index * 4 + ISR_RAM_MAP_START_ADDRESS);
	*temp = isr_address;
1000d258:	2380      	movs	r3, #128	; 0x80
1000d25a:	04db      	lsls	r3, r3, #19
1000d25c:	469c      	mov	ip, r3
1000d25e:	4460      	add	r0, ip
1000d260:	0080      	lsls	r0, r0, #2
1000d262:	6001      	str	r1, [r0, #0]
}
1000d264:	4770      	bx	lr
1000d266:	46c0      	nop			; (mov r8, r8)

1000d268 <uart_rx0_isr_handler>:
	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
}

static void uart_rx0_isr_handler(void)
{
1000d268:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[0];
1000d26a:	4b20      	ldr	r3, [pc, #128]	; (1000d2ec <uart_rx0_isr_handler+0x84>)
1000d26c:	681c      	ldr	r4, [r3, #0]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->RECEIVE_STATUS.reg;
1000d26e:	6823      	ldr	r3, [r4, #0]
1000d270:	7d1d      	ldrb	r5, [r3, #20]
1000d272:	b2ed      	uxtb	r5, r5
	if (flags & UART_RECEIVE_STATUS_FIFO_OVERRUN) {
1000d274:	066a      	lsls	r2, r5, #25
1000d276:	d513      	bpl.n	1000d2a0 <uart_rx0_isr_handler+0x38>
		/* Store the error code */
		module->status = STATUS_ERR_OVERFLOW;
1000d278:	211e      	movs	r1, #30
1000d27a:	2222      	movs	r2, #34	; 0x22
1000d27c:	54a1      	strb	r1, [r4, r2]
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
1000d27e:	7e1a      	ldrb	r2, [r3, #24]
1000d280:	3123      	adds	r1, #35	; 0x23
1000d282:	438a      	bics	r2, r1
1000d284:	761a      	strb	r2, [r3, #24]
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
1000d286:	2321      	movs	r3, #33	; 0x21
1000d288:	5ce3      	ldrb	r3, [r4, r3]
1000d28a:	071b      	lsls	r3, r3, #28
1000d28c:	d506      	bpl.n	1000d29c <uart_rx0_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
1000d28e:	2320      	movs	r3, #32
		module->status = STATUS_ERR_OVERFLOW;
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
1000d290:	5ce3      	ldrb	r3, [r4, r3]
1000d292:	071b      	lsls	r3, r3, #28
1000d294:	d502      	bpl.n	1000d29c <uart_rx0_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
			(module->callback[UART_RX_FIFO_OVERRUN])(module);
1000d296:	0020      	movs	r0, r4
1000d298:	6923      	ldr	r3, [r4, #16]
1000d29a:	4798      	blx	r3
		}
		/* Flush */
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
1000d29c:	6823      	ldr	r3, [r4, #0]
1000d29e:	7c1b      	ldrb	r3, [r3, #16]
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1000d2a0:	07eb      	lsls	r3, r5, #31
1000d2a2:	d522      	bpl.n	1000d2ea <uart_rx0_isr_handler+0x82>
		struct uart_module *const module)
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	uint16_t received_data = (uart_hw->RECEIVE_DATA.reg & UART_RECEIVE_DATA_MASK);
1000d2a4:	6823      	ldr	r3, [r4, #0]
1000d2a6:	7c1b      	ldrb	r3, [r3, #16]
1000d2a8:	b2db      	uxtb	r3, r3

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
1000d2aa:	6962      	ldr	r2, [r4, #20]
1000d2ac:	7013      	strb	r3, [r2, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
1000d2ae:	6963      	ldr	r3, [r4, #20]
1000d2b0:	3301      	adds	r3, #1
1000d2b2:	6163      	str	r3, [r4, #20]

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
1000d2b4:	8ba3      	ldrh	r3, [r4, #28]
1000d2b6:	3b01      	subs	r3, #1
1000d2b8:	b29b      	uxth	r3, r3
1000d2ba:	83a3      	strh	r3, [r4, #28]
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
1000d2bc:	8ba3      	ldrh	r3, [r4, #28]
1000d2be:	b29b      	uxth	r3, r3
1000d2c0:	2b00      	cmp	r3, #0
1000d2c2:	d112      	bne.n	1000d2ea <uart_rx0_isr_handler+0x82>
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
1000d2c4:	3321      	adds	r3, #33	; 0x21
1000d2c6:	5ce3      	ldrb	r3, [r4, r3]
1000d2c8:	075b      	lsls	r3, r3, #29
1000d2ca:	d50e      	bpl.n	1000d2ea <uart_rx0_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
1000d2cc:	2320      	movs	r3, #32
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
1000d2ce:	5ce3      	ldrb	r3, [r4, r3]
1000d2d0:	075b      	lsls	r3, r3, #29
1000d2d2:	d50a      	bpl.n	1000d2ea <uart_rx0_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
				module->status = STATUS_OK;
1000d2d4:	2200      	movs	r2, #0
1000d2d6:	2322      	movs	r3, #34	; 0x22
1000d2d8:	54e2      	strb	r2, [r4, r3]
				module->hw->RX_INTERRUPT_MASK.reg &=
1000d2da:	6822      	ldr	r2, [r4, #0]
1000d2dc:	7e13      	ldrb	r3, [r2, #24]
1000d2de:	2101      	movs	r1, #1
1000d2e0:	438b      	bics	r3, r1
1000d2e2:	7613      	strb	r3, [r2, #24]
					~(UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
				(module->callback[UART_RX_COMPLETE])(module);
1000d2e4:	68e3      	ldr	r3, [r4, #12]
1000d2e6:	0020      	movs	r0, r4
1000d2e8:	4798      	blx	r3
			}
		}
	}
}
1000d2ea:	bd70      	pop	{r4, r5, r6, pc}
1000d2ec:	1001a17c 	.word	0x1001a17c

1000d2f0 <uart_tx0_isr_handler>:

static void uart_tx0_isr_handler(void)
{
1000d2f0:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[0];
1000d2f2:	4b21      	ldr	r3, [pc, #132]	; (1000d378 <uart_tx0_isr_handler+0x88>)
1000d2f4:	681c      	ldr	r4, [r3, #0]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
1000d2f6:	6823      	ldr	r3, [r4, #0]
1000d2f8:	791d      	ldrb	r5, [r3, #4]
1000d2fa:	b2ed      	uxtb	r5, r5
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
1000d2fc:	07ea      	lsls	r2, r5, #31
1000d2fe:	d517      	bpl.n	1000d330 <uart_tx0_isr_handler+0x40>
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	/* Write value will be at least 8-bits long */
	uint8_t data_to_send = *(module->tx_buffer_ptr);
1000d300:	69a2      	ldr	r2, [r4, #24]
1000d302:	7811      	ldrb	r1, [r2, #0]
1000d304:	b2c9      	uxtb	r1, r1
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
1000d306:	3201      	adds	r2, #1
1000d308:	61a2      	str	r2, [r4, #24]

	/* Write the data to send*/
	uart_hw->TRANSMIT_DATA.reg = data_to_send & UART_TRANSMIT_DATA_MASK;
1000d30a:	7019      	strb	r1, [r3, #0]

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
1000d30c:	8be3      	ldrh	r3, [r4, #30]
1000d30e:	3b01      	subs	r3, #1
1000d310:	b29b      	uxth	r3, r3
1000d312:	83e3      	strh	r3, [r4, #30]
	struct uart_module *module = _uart_instances[0];
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
		_uart_write(module);
		if (module->remaining_tx_buffer_length == 0) {
1000d314:	8be3      	ldrh	r3, [r4, #30]
1000d316:	b29b      	uxth	r3, r3
1000d318:	2b00      	cmp	r3, #0
1000d31a:	d109      	bne.n	1000d330 <uart_tx0_isr_handler+0x40>
			module->hw->TX_INTERRUPT_MASK.reg &=
1000d31c:	6822      	ldr	r2, [r4, #0]
1000d31e:	7a13      	ldrb	r3, [r2, #8]
1000d320:	2101      	movs	r1, #1
1000d322:	438b      	bics	r3, r1
1000d324:	7213      	strb	r3, [r2, #8]
					~UART_TX_INTERRUPT_MASK_TX_FIFO_NOT_FULL_MASK;
			module->hw->TX_INTERRUPT_MASK.reg |=
1000d326:	6822      	ldr	r2, [r4, #0]
1000d328:	7a11      	ldrb	r1, [r2, #8]
1000d32a:	2310      	movs	r3, #16
1000d32c:	430b      	orrs	r3, r1
1000d32e:	7213      	strb	r3, [r2, #8]
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
1000d330:	06eb      	lsls	r3, r5, #27
1000d332:	d512      	bpl.n	1000d35a <uart_tx0_isr_handler+0x6a>
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
1000d334:	2321      	movs	r3, #33	; 0x21
1000d336:	5ce3      	ldrb	r3, [r4, r3]
1000d338:	07db      	lsls	r3, r3, #31
1000d33a:	d50e      	bpl.n	1000d35a <uart_tx0_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
1000d33c:	2320      	movs	r3, #32
			module->hw->TX_INTERRUPT_MASK.reg |=
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
1000d33e:	5ce3      	ldrb	r3, [r4, r3]
1000d340:	07db      	lsls	r3, r3, #31
1000d342:	d50a      	bpl.n	1000d35a <uart_tx0_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
			module->status = STATUS_OK;
1000d344:	2200      	movs	r2, #0
1000d346:	2322      	movs	r3, #34	; 0x22
1000d348:	54e2      	strb	r2, [r4, r3]
			/* Disable interrupt */
			module->hw->TX_INTERRUPT_MASK.reg &=
1000d34a:	6822      	ldr	r2, [r4, #0]
1000d34c:	7a13      	ldrb	r3, [r2, #8]
1000d34e:	2110      	movs	r1, #16
1000d350:	438b      	bics	r3, r1
1000d352:	7213      	strb	r3, [r2, #8]
				~UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
			(module->callback[UART_TX_COMPLETE])(module);
1000d354:	0020      	movs	r0, r4
1000d356:	6863      	ldr	r3, [r4, #4]
1000d358:	4798      	blx	r3
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
1000d35a:	06ab      	lsls	r3, r5, #26
1000d35c:	d50a      	bpl.n	1000d374 <uart_tx0_isr_handler+0x84>
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
1000d35e:	2321      	movs	r3, #33	; 0x21
1000d360:	5ce3      	ldrb	r3, [r4, r3]
1000d362:	079b      	lsls	r3, r3, #30
1000d364:	d506      	bpl.n	1000d374 <uart_tx0_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
1000d366:	2320      	movs	r3, #32
			(module->callback[UART_TX_COMPLETE])(module);
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
1000d368:	5ce3      	ldrb	r3, [r4, r3]
1000d36a:	079b      	lsls	r3, r3, #30
1000d36c:	d502      	bpl.n	1000d374 <uart_tx0_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
			(module->callback[UART_CTS_ACTIVE])(module);
1000d36e:	68a3      	ldr	r3, [r4, #8]
1000d370:	0020      	movs	r0, r4
1000d372:	4798      	blx	r3
		}

	}
}
1000d374:	bd70      	pop	{r4, r5, r6, pc}
1000d376:	46c0      	nop			; (mov r8, r8)
1000d378:	1001a17c 	.word	0x1001a17c

1000d37c <uart_rx1_isr_handler>:

static void uart_rx1_isr_handler(void)
{
1000d37c:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[1];
1000d37e:	4b20      	ldr	r3, [pc, #128]	; (1000d400 <uart_rx1_isr_handler+0x84>)
1000d380:	685c      	ldr	r4, [r3, #4]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->RECEIVE_STATUS.reg;
1000d382:	6823      	ldr	r3, [r4, #0]
1000d384:	7d1d      	ldrb	r5, [r3, #20]
1000d386:	b2ed      	uxtb	r5, r5
	if (flags & UART_RECEIVE_STATUS_FIFO_OVERRUN) {
1000d388:	066a      	lsls	r2, r5, #25
1000d38a:	d513      	bpl.n	1000d3b4 <uart_rx1_isr_handler+0x38>
		/* Store the error code */
		module->status = STATUS_ERR_OVERFLOW;
1000d38c:	211e      	movs	r1, #30
1000d38e:	2222      	movs	r2, #34	; 0x22
1000d390:	54a1      	strb	r1, [r4, r2]
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
1000d392:	7e1a      	ldrb	r2, [r3, #24]
1000d394:	3123      	adds	r1, #35	; 0x23
1000d396:	438a      	bics	r2, r1
1000d398:	761a      	strb	r2, [r3, #24]
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
1000d39a:	2321      	movs	r3, #33	; 0x21
1000d39c:	5ce3      	ldrb	r3, [r4, r3]
1000d39e:	071b      	lsls	r3, r3, #28
1000d3a0:	d506      	bpl.n	1000d3b0 <uart_rx1_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
1000d3a2:	2320      	movs	r3, #32
		module->status = STATUS_ERR_OVERFLOW;
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
1000d3a4:	5ce3      	ldrb	r3, [r4, r3]
1000d3a6:	071b      	lsls	r3, r3, #28
1000d3a8:	d502      	bpl.n	1000d3b0 <uart_rx1_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
			(module->callback[UART_RX_FIFO_OVERRUN])(module);
1000d3aa:	0020      	movs	r0, r4
1000d3ac:	6923      	ldr	r3, [r4, #16]
1000d3ae:	4798      	blx	r3
		}
		/* Flush */
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
1000d3b0:	6823      	ldr	r3, [r4, #0]
1000d3b2:	7c1b      	ldrb	r3, [r3, #16]
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1000d3b4:	07eb      	lsls	r3, r5, #31
1000d3b6:	d522      	bpl.n	1000d3fe <uart_rx1_isr_handler+0x82>
		struct uart_module *const module)
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	uint16_t received_data = (uart_hw->RECEIVE_DATA.reg & UART_RECEIVE_DATA_MASK);
1000d3b8:	6823      	ldr	r3, [r4, #0]
1000d3ba:	7c1b      	ldrb	r3, [r3, #16]
1000d3bc:	b2db      	uxtb	r3, r3

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
1000d3be:	6962      	ldr	r2, [r4, #20]
1000d3c0:	7013      	strb	r3, [r2, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
1000d3c2:	6963      	ldr	r3, [r4, #20]
1000d3c4:	3301      	adds	r3, #1
1000d3c6:	6163      	str	r3, [r4, #20]

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
1000d3c8:	8ba3      	ldrh	r3, [r4, #28]
1000d3ca:	3b01      	subs	r3, #1
1000d3cc:	b29b      	uxth	r3, r3
1000d3ce:	83a3      	strh	r3, [r4, #28]
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
1000d3d0:	8ba3      	ldrh	r3, [r4, #28]
1000d3d2:	b29b      	uxth	r3, r3
1000d3d4:	2b00      	cmp	r3, #0
1000d3d6:	d112      	bne.n	1000d3fe <uart_rx1_isr_handler+0x82>
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
1000d3d8:	3321      	adds	r3, #33	; 0x21
1000d3da:	5ce3      	ldrb	r3, [r4, r3]
1000d3dc:	075b      	lsls	r3, r3, #29
1000d3de:	d50e      	bpl.n	1000d3fe <uart_rx1_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
1000d3e0:	2320      	movs	r3, #32
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
1000d3e2:	5ce3      	ldrb	r3, [r4, r3]
1000d3e4:	075b      	lsls	r3, r3, #29
1000d3e6:	d50a      	bpl.n	1000d3fe <uart_rx1_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
				module->status = STATUS_OK;
1000d3e8:	2200      	movs	r2, #0
1000d3ea:	2322      	movs	r3, #34	; 0x22
1000d3ec:	54e2      	strb	r2, [r4, r3]
				module->hw->RX_INTERRUPT_MASK.reg &=
1000d3ee:	6822      	ldr	r2, [r4, #0]
1000d3f0:	7e13      	ldrb	r3, [r2, #24]
1000d3f2:	2101      	movs	r1, #1
1000d3f4:	438b      	bics	r3, r1
1000d3f6:	7613      	strb	r3, [r2, #24]
					~(UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
				(module->callback[UART_RX_COMPLETE])(module);
1000d3f8:	68e3      	ldr	r3, [r4, #12]
1000d3fa:	0020      	movs	r0, r4
1000d3fc:	4798      	blx	r3
			}
		}
	}
}
1000d3fe:	bd70      	pop	{r4, r5, r6, pc}
1000d400:	1001a17c 	.word	0x1001a17c

1000d404 <uart_tx1_isr_handler>:

static void uart_tx1_isr_handler(void)
{
1000d404:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[1];
1000d406:	4b21      	ldr	r3, [pc, #132]	; (1000d48c <uart_tx1_isr_handler+0x88>)
1000d408:	685c      	ldr	r4, [r3, #4]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
1000d40a:	6823      	ldr	r3, [r4, #0]
1000d40c:	791d      	ldrb	r5, [r3, #4]
1000d40e:	b2ed      	uxtb	r5, r5
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
1000d410:	07ea      	lsls	r2, r5, #31
1000d412:	d517      	bpl.n	1000d444 <uart_tx1_isr_handler+0x40>
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	/* Write value will be at least 8-bits long */
	uint8_t data_to_send = *(module->tx_buffer_ptr);
1000d414:	69a2      	ldr	r2, [r4, #24]
1000d416:	7811      	ldrb	r1, [r2, #0]
1000d418:	b2c9      	uxtb	r1, r1
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
1000d41a:	3201      	adds	r2, #1
1000d41c:	61a2      	str	r2, [r4, #24]

	/* Write the data to send*/
	uart_hw->TRANSMIT_DATA.reg = data_to_send & UART_TRANSMIT_DATA_MASK;
1000d41e:	7019      	strb	r1, [r3, #0]

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
1000d420:	8be3      	ldrh	r3, [r4, #30]
1000d422:	3b01      	subs	r3, #1
1000d424:	b29b      	uxth	r3, r3
1000d426:	83e3      	strh	r3, [r4, #30]
	struct uart_module *module = _uart_instances[1];
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
		_uart_write(module);
		if (module->remaining_tx_buffer_length == 0) {
1000d428:	8be3      	ldrh	r3, [r4, #30]
1000d42a:	b29b      	uxth	r3, r3
1000d42c:	2b00      	cmp	r3, #0
1000d42e:	d109      	bne.n	1000d444 <uart_tx1_isr_handler+0x40>
			module->hw->TX_INTERRUPT_MASK.reg &=
1000d430:	6822      	ldr	r2, [r4, #0]
1000d432:	7a13      	ldrb	r3, [r2, #8]
1000d434:	2101      	movs	r1, #1
1000d436:	438b      	bics	r3, r1
1000d438:	7213      	strb	r3, [r2, #8]
					~UART_TX_INTERRUPT_MASK_TX_FIFO_NOT_FULL_MASK;
			module->hw->TX_INTERRUPT_MASK.reg |=
1000d43a:	6822      	ldr	r2, [r4, #0]
1000d43c:	7a11      	ldrb	r1, [r2, #8]
1000d43e:	2310      	movs	r3, #16
1000d440:	430b      	orrs	r3, r1
1000d442:	7213      	strb	r3, [r2, #8]
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
1000d444:	06eb      	lsls	r3, r5, #27
1000d446:	d512      	bpl.n	1000d46e <uart_tx1_isr_handler+0x6a>
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
1000d448:	2321      	movs	r3, #33	; 0x21
1000d44a:	5ce3      	ldrb	r3, [r4, r3]
1000d44c:	07db      	lsls	r3, r3, #31
1000d44e:	d50e      	bpl.n	1000d46e <uart_tx1_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
1000d450:	2320      	movs	r3, #32
			module->hw->TX_INTERRUPT_MASK.reg |=
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
1000d452:	5ce3      	ldrb	r3, [r4, r3]
1000d454:	07db      	lsls	r3, r3, #31
1000d456:	d50a      	bpl.n	1000d46e <uart_tx1_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
			module->status = STATUS_OK;
1000d458:	2200      	movs	r2, #0
1000d45a:	2322      	movs	r3, #34	; 0x22
1000d45c:	54e2      	strb	r2, [r4, r3]
			/* Disable interrupt */
			module->hw->TX_INTERRUPT_MASK.reg &=
1000d45e:	6822      	ldr	r2, [r4, #0]
1000d460:	7a13      	ldrb	r3, [r2, #8]
1000d462:	2110      	movs	r1, #16
1000d464:	438b      	bics	r3, r1
1000d466:	7213      	strb	r3, [r2, #8]
				~UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
			(module->callback[UART_TX_COMPLETE])(module);
1000d468:	0020      	movs	r0, r4
1000d46a:	6863      	ldr	r3, [r4, #4]
1000d46c:	4798      	blx	r3
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
1000d46e:	06ab      	lsls	r3, r5, #26
1000d470:	d50a      	bpl.n	1000d488 <uart_tx1_isr_handler+0x84>
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
1000d472:	2321      	movs	r3, #33	; 0x21
1000d474:	5ce3      	ldrb	r3, [r4, r3]
1000d476:	079b      	lsls	r3, r3, #30
1000d478:	d506      	bpl.n	1000d488 <uart_tx1_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
1000d47a:	2320      	movs	r3, #32
			(module->callback[UART_TX_COMPLETE])(module);
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
1000d47c:	5ce3      	ldrb	r3, [r4, r3]
1000d47e:	079b      	lsls	r3, r3, #30
1000d480:	d502      	bpl.n	1000d488 <uart_tx1_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
			(module->callback[UART_CTS_ACTIVE])(module);
1000d482:	68a3      	ldr	r3, [r4, #8]
1000d484:	0020      	movs	r0, r4
1000d486:	4798      	blx	r3
		}

	}
}
1000d488:	bd70      	pop	{r4, r5, r6, pc}
1000d48a:	46c0      	nop			; (mov r8, r8)
1000d48c:	1001a17c 	.word	0x1001a17c

1000d490 <uart_get_config_defaults>:
 * \param[out] config  Pointer to configuration structure to be initiated
 */
void uart_get_config_defaults(
		struct uart_config *const config)
{
	config->baud_rate = 115200;
1000d490:	23e1      	movs	r3, #225	; 0xe1
1000d492:	025b      	lsls	r3, r3, #9
1000d494:	6003      	str	r3, [r0, #0]
	config->data_bits = UART_8_BITS;
1000d496:	2300      	movs	r3, #0
1000d498:	7103      	strb	r3, [r0, #4]
	config->stop_bits = UART_1_STOP_BIT;
1000d49a:	7143      	strb	r3, [r0, #5]
	config->parity = UART_NO_PARITY;
1000d49c:	7183      	strb	r3, [r0, #6]
	config->flow_control = false;
1000d49e:	71c3      	strb	r3, [r0, #7]

	config->pin_number_pad[0] = PIN_LP_GPIO_2;
1000d4a0:	3302      	adds	r3, #2
1000d4a2:	6083      	str	r3, [r0, #8]
	config->pin_number_pad[1] = PIN_LP_GPIO_3;
1000d4a4:	2203      	movs	r2, #3
1000d4a6:	60c2      	str	r2, [r0, #12]
	config->pin_number_pad[2] = PIN_LP_GPIO_4;
1000d4a8:	3201      	adds	r2, #1
1000d4aa:	6102      	str	r2, [r0, #16]
	config->pin_number_pad[3] = PIN_LP_GPIO_5;
1000d4ac:	3201      	adds	r2, #1
1000d4ae:	6142      	str	r2, [r0, #20]

	config->pinmux_sel_pad[0] = MUX_LP_GPIO_2_UART0_RXD;
1000d4b0:	6183      	str	r3, [r0, #24]
	config->pinmux_sel_pad[1] = MUX_LP_GPIO_3_UART0_TXD;
1000d4b2:	61c3      	str	r3, [r0, #28]
	config->pinmux_sel_pad[2] = MUX_LP_GPIO_4_UART0_CTS;
1000d4b4:	6203      	str	r3, [r0, #32]
	config->pinmux_sel_pad[3] = MUX_LP_GPIO_5_UART0_RTS;
1000d4b6:	6243      	str	r3, [r0, #36]	; 0x24
}
1000d4b8:	4770      	bx	lr
1000d4ba:	46c0      	nop			; (mov r8, r8)

1000d4bc <uart_init>:
 *
 * \retval STATUS_OK                       The initialization was successful
 */
enum status_code uart_init(struct uart_module *const module, Uart * const hw,
		const struct uart_config *const config)
{
1000d4bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000d4be:	464f      	mov	r7, r9
1000d4c0:	4646      	mov	r6, r8
1000d4c2:	b4c0      	push	{r6, r7}
1000d4c4:	0005      	movs	r5, r0
1000d4c6:	0017      	movs	r7, r2

	uint8_t config_temp = 0;
	uint8_t i,index;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
1000d4c8:	6001      	str	r1, [r0, #0]

	for (i = 0; i < UART_CALLBACK_N; i++) {
		module->callback[i] = NULL;
1000d4ca:	2300      	movs	r3, #0
1000d4cc:	6043      	str	r3, [r0, #4]
1000d4ce:	6083      	str	r3, [r0, #8]
1000d4d0:	60c3      	str	r3, [r0, #12]
1000d4d2:	6103      	str	r3, [r0, #16]
	}
	module->rx_buffer_ptr = NULL;
1000d4d4:	6143      	str	r3, [r0, #20]
	module->tx_buffer_ptr = NULL;
1000d4d6:	6183      	str	r3, [r0, #24]
	module->remaining_rx_buffer_length = 0;
1000d4d8:	2200      	movs	r2, #0
1000d4da:	8383      	strh	r3, [r0, #28]
	module->remaining_tx_buffer_length = 0;
1000d4dc:	83c3      	strh	r3, [r0, #30]
	module->callback_reg_mask = 0;
1000d4de:	3320      	adds	r3, #32
1000d4e0:	54c2      	strb	r2, [r0, r3]
	module->callback_enable_mask = 0;
1000d4e2:	3301      	adds	r3, #1
1000d4e4:	54c2      	strb	r2, [r0, r3]
	module->status = STATUS_OK;
1000d4e6:	3301      	adds	r3, #1
1000d4e8:	54c2      	strb	r2, [r0, r3]

	if (hw == UART0) {
1000d4ea:	4b55      	ldr	r3, [pc, #340]	; (1000d640 <uart_init+0x184>)
1000d4ec:	4299      	cmp	r1, r3
1000d4ee:	d118      	bne.n	1000d522 <uart_init+0x66>
		system_peripheral_reset(PERIPHERAL_UART0_CORE);
1000d4f0:	2009      	movs	r0, #9
1000d4f2:	4c54      	ldr	r4, [pc, #336]	; (1000d644 <uart_init+0x188>)
1000d4f4:	47a0      	blx	r4
		system_peripheral_reset(PERIPHERAL_UART0_IF);
1000d4f6:	200a      	movs	r0, #10
1000d4f8:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART0_CORE);
1000d4fa:	2009      	movs	r0, #9
1000d4fc:	4c52      	ldr	r4, [pc, #328]	; (1000d648 <uart_init+0x18c>)
1000d4fe:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART0_IF);
1000d500:	200a      	movs	r0, #10
1000d502:	47a0      	blx	r4
		_uart_instances[0] = module;
1000d504:	4b51      	ldr	r3, [pc, #324]	; (1000d64c <uart_init+0x190>)
1000d506:	601d      	str	r5, [r3, #0]
		system_register_isr(RAM_ISR_TABLE_UARTRX0_INDEX, (uint32_t)uart_rx0_isr_handler);
1000d508:	4951      	ldr	r1, [pc, #324]	; (1000d650 <uart_init+0x194>)
1000d50a:	2010      	movs	r0, #16
1000d50c:	4c51      	ldr	r4, [pc, #324]	; (1000d654 <uart_init+0x198>)
1000d50e:	47a0      	blx	r4
		system_register_isr(RAM_ISR_TABLE_UARTTX0_INDEX, (uint32_t)uart_tx0_isr_handler);
1000d510:	4951      	ldr	r1, [pc, #324]	; (1000d658 <uart_init+0x19c>)
1000d512:	2011      	movs	r0, #17
1000d514:	47a0      	blx	r4
1000d516:	4b51      	ldr	r3, [pc, #324]	; (1000d65c <uart_init+0x1a0>)
1000d518:	2201      	movs	r2, #1
1000d51a:	601a      	str	r2, [r3, #0]
1000d51c:	3201      	adds	r2, #1
1000d51e:	601a      	str	r2, [r3, #0]
1000d520:	e01a      	b.n	1000d558 <uart_init+0x9c>
		NVIC_EnableIRQ(UART0_RX_IRQn);
		NVIC_EnableIRQ(UART0_TX_IRQn);
	} else if (hw == UART1) {
1000d522:	4b4f      	ldr	r3, [pc, #316]	; (1000d660 <uart_init+0x1a4>)
1000d524:	4299      	cmp	r1, r3
1000d526:	d117      	bne.n	1000d558 <uart_init+0x9c>
		system_peripheral_reset(PERIPHERAL_UART1_CORE);
1000d528:	200b      	movs	r0, #11
1000d52a:	4c46      	ldr	r4, [pc, #280]	; (1000d644 <uart_init+0x188>)
1000d52c:	47a0      	blx	r4
		system_peripheral_reset(PERIPHERAL_UART1_IF);
1000d52e:	200c      	movs	r0, #12
1000d530:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART1_CORE);
1000d532:	200b      	movs	r0, #11
1000d534:	4c44      	ldr	r4, [pc, #272]	; (1000d648 <uart_init+0x18c>)
1000d536:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART1_IF);
1000d538:	200c      	movs	r0, #12
1000d53a:	47a0      	blx	r4
		_uart_instances[1] = module;
1000d53c:	4b43      	ldr	r3, [pc, #268]	; (1000d64c <uart_init+0x190>)
1000d53e:	605d      	str	r5, [r3, #4]
		system_register_isr(RAM_ISR_TABLE_UARTRX1_INDEX, (uint32_t)uart_rx1_isr_handler);
1000d540:	4948      	ldr	r1, [pc, #288]	; (1000d664 <uart_init+0x1a8>)
1000d542:	2012      	movs	r0, #18
1000d544:	4c43      	ldr	r4, [pc, #268]	; (1000d654 <uart_init+0x198>)
1000d546:	47a0      	blx	r4
		system_register_isr(RAM_ISR_TABLE_UARTTX1_INDEX, (uint32_t)uart_tx1_isr_handler);
1000d548:	4947      	ldr	r1, [pc, #284]	; (1000d668 <uart_init+0x1ac>)
1000d54a:	2013      	movs	r0, #19
1000d54c:	47a0      	blx	r4
1000d54e:	4b43      	ldr	r3, [pc, #268]	; (1000d65c <uart_init+0x1a0>)
1000d550:	2204      	movs	r2, #4
1000d552:	601a      	str	r2, [r3, #0]
1000d554:	3204      	adds	r2, #4
1000d556:	601a      	str	r2, [r3, #0]
		NVIC_EnableIRQ(UART1_RX_IRQn);
		NVIC_EnableIRQ(UART1_TX_IRQn);
	}

	/* Set the pinmux for this UART module. */
	if(config->flow_control) {
1000d558:	79fb      	ldrb	r3, [r7, #7]
		index = 4;
1000d55a:	2204      	movs	r2, #4
1000d55c:	4690      	mov	r8, r2
		NVIC_EnableIRQ(UART1_RX_IRQn);
		NVIC_EnableIRQ(UART1_TX_IRQn);
	}

	/* Set the pinmux for this UART module. */
	if(config->flow_control) {
1000d55e:	2b00      	cmp	r3, #0
1000d560:	d152      	bne.n	1000d608 <uart_init+0x14c>
		index = 4;
	} else {
		index = 2;
1000d562:	3302      	adds	r3, #2
1000d564:	4698      	mov	r8, r3
1000d566:	e04f      	b.n	1000d608 <uart_init+0x14c>
#if (BTLC1000)
    index = 2;  /* BTLC1000 has no flow control function. */
#endif

	for(i = 0; i < index; i++) {
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
1000d568:	8a31      	ldrh	r1, [r6, #16]
1000d56a:	ce01      	ldmia	r6!, {r0}
1000d56c:	b2c0      	uxtb	r0, r0
1000d56e:	47c8      	blx	r9

#if (BTLC1000)
    index = 2;  /* BTLC1000 has no flow control function. */
#endif

	for(i = 0; i < index; i++) {
1000d570:	3401      	adds	r4, #1
1000d572:	b2e4      	uxtb	r4, r4
1000d574:	4544      	cmp	r4, r8
1000d576:	d3f7      	bcc.n	1000d568 <uart_init+0xac>
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
								(uint16_t)(config->pinmux_sel_pad[i]));
	}

	/* empty UART FIFO */
	while (module->hw->RECEIVE_STATUS.reg & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1000d578:	682b      	ldr	r3, [r5, #0]
1000d57a:	7d1a      	ldrb	r2, [r3, #20]
1000d57c:	07d2      	lsls	r2, r2, #31
1000d57e:	d504      	bpl.n	1000d58a <uart_init+0xce>
1000d580:	2101      	movs	r1, #1
		i = module->hw->RECEIVE_DATA.reg;
1000d582:	7c1a      	ldrb	r2, [r3, #16]
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
								(uint16_t)(config->pinmux_sel_pad[i]));
	}

	/* empty UART FIFO */
	while (module->hw->RECEIVE_STATUS.reg & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1000d584:	7d1a      	ldrb	r2, [r3, #20]
1000d586:	420a      	tst	r2, r1
1000d588:	d1fb      	bne.n	1000d582 <uart_init+0xc6>
		i = module->hw->RECEIVE_DATA.reg;
	}
	
	/* reset configuration register */
	module->hw->UART_CONFIGURATION.reg = 0;
1000d58a:	2100      	movs	r1, #0
1000d58c:	2220      	movs	r2, #32
1000d58e:	5499      	strb	r1, [r3, r2]

	/* program the uart configuration. */
	if(config->flow_control) {
1000d590:	79fb      	ldrb	r3, [r7, #7]
		config_temp |= UART_CONFIGURATION_CTS_ENABLE_1;
1000d592:	1e59      	subs	r1, r3, #1
1000d594:	418b      	sbcs	r3, r1
1000d596:	0159      	lsls	r1, r3, #5
	}
	config_temp |= config->data_bits;
	config_temp |= config->stop_bits;
1000d598:	793b      	ldrb	r3, [r7, #4]
1000d59a:	797a      	ldrb	r2, [r7, #5]
1000d59c:	4313      	orrs	r3, r2
1000d59e:	430b      	orrs	r3, r1
	switch(config->parity) {
1000d5a0:	79ba      	ldrb	r2, [r7, #6]
1000d5a2:	2a02      	cmp	r2, #2
1000d5a4:	d00d      	beq.n	1000d5c2 <uart_init+0x106>
1000d5a6:	b2d1      	uxtb	r1, r2
1000d5a8:	2902      	cmp	r1, #2
1000d5aa:	d802      	bhi.n	1000d5b2 <uart_init+0xf6>
1000d5ac:	2a01      	cmp	r2, #1
1000d5ae:	d005      	beq.n	1000d5bc <uart_init+0x100>
1000d5b0:	e00f      	b.n	1000d5d2 <uart_init+0x116>
1000d5b2:	2a03      	cmp	r2, #3
1000d5b4:	d008      	beq.n	1000d5c8 <uart_init+0x10c>
1000d5b6:	2a04      	cmp	r2, #4
1000d5b8:	d009      	beq.n	1000d5ce <uart_init+0x112>
1000d5ba:	e00a      	b.n	1000d5d2 <uart_init+0x116>
		case UART_NO_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_0;
			break;

		case UART_EVEN_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_1;
1000d5bc:	2202      	movs	r2, #2
1000d5be:	4313      	orrs	r3, r2
			config_temp |= UART_CONFIGURATION_PARITY_MODE_0;
			break;
1000d5c0:	e007      	b.n	1000d5d2 <uart_init+0x116>

		case UART_ODD_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_1;
			config_temp |= UART_CONFIGURATION_PARITY_MODE_1;
1000d5c2:	2206      	movs	r2, #6
1000d5c4:	4313      	orrs	r3, r2
			break;
1000d5c6:	e004      	b.n	1000d5d2 <uart_init+0x116>

		case UART_SPACE_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_1;
			config_temp |= UART_CONFIGURATION_PARITY_MODE_2;
1000d5c8:	220a      	movs	r2, #10
1000d5ca:	4313      	orrs	r3, r2
			break;
1000d5cc:	e001      	b.n	1000d5d2 <uart_init+0x116>

		case UART_MARK_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_1;
			config_temp |= UART_CONFIGURATION_PARITY_MODE_3;
1000d5ce:	220e      	movs	r2, #14
1000d5d0:	4313      	orrs	r3, r2
			break;

		default:
			break;
	}	
	module->hw->UART_CONFIGURATION.reg = config_temp;
1000d5d2:	2220      	movs	r2, #32
1000d5d4:	6829      	ldr	r1, [r5, #0]
1000d5d6:	548b      	strb	r3, [r1, r2]

	/* Calculate the baud rate. */
	uart_set_baudrate(module, config->baud_rate);
1000d5d8:	683e      	ldr	r6, [r7, #0]
	uint16_t integerpart = 0;
	uint8_t fractionalpart = 0;
	uint32_t diff;
	uint8_t i = 0;

	clock = system_clock_get_value();
1000d5da:	4b24      	ldr	r3, [pc, #144]	; (1000d66c <uart_init+0x1b0>)
1000d5dc:	4798      	blx	r3
1000d5de:	0004      	movs	r4, r0
	integerpart = clock / baud_rate;
1000d5e0:	0031      	movs	r1, r6
1000d5e2:	4b23      	ldr	r3, [pc, #140]	; (1000d670 <uart_init+0x1b4>)
1000d5e4:	4798      	blx	r3
1000d5e6:	b282      	uxth	r2, r0
	diff = clock - (baud_rate * integerpart);
1000d5e8:	0400      	lsls	r0, r0, #16
1000d5ea:	0c00      	lsrs	r0, r0, #16
1000d5ec:	4370      	muls	r0, r6
1000d5ee:	1a20      	subs	r0, r4, r0
	i = 0;
	while(diff > (baud_rate / 16)) {
1000d5f0:	0931      	lsrs	r1, r6, #4
1000d5f2:	4288      	cmp	r0, r1
1000d5f4:	d906      	bls.n	1000d604 <uart_init+0x148>
1000d5f6:	2300      	movs	r3, #0
		i++;
1000d5f8:	3301      	adds	r3, #1
1000d5fa:	b2db      	uxtb	r3, r3
		diff -= (baud_rate / 16);
1000d5fc:	1a40      	subs	r0, r0, r1

	clock = system_clock_get_value();
	integerpart = clock / baud_rate;
	diff = clock - (baud_rate * integerpart);
	i = 0;
	while(diff > (baud_rate / 16)) {
1000d5fe:	4288      	cmp	r0, r1
1000d600:	d8fa      	bhi.n	1000d5f8 <uart_init+0x13c>
1000d602:	e007      	b.n	1000d614 <uart_init+0x158>
	uint8_t i = 0;

	clock = system_clock_get_value();
	integerpart = clock / baud_rate;
	diff = clock - (baud_rate * integerpart);
	i = 0;
1000d604:	2300      	movs	r3, #0
1000d606:	e005      	b.n	1000d614 <uart_init+0x158>
1000d608:	003e      	movs	r6, r7
1000d60a:	3608      	adds	r6, #8
 *
 * \retval STATUS_OK                       The initialization was successful
 */
enum status_code uart_init(struct uart_module *const module, Uart * const hw,
		const struct uart_config *const config)
{
1000d60c:	2400      	movs	r4, #0
#if (BTLC1000)
    index = 2;  /* BTLC1000 has no flow control function. */
#endif

	for(i = 0; i < index; i++) {
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
1000d60e:	4b19      	ldr	r3, [pc, #100]	; (1000d674 <uart_init+0x1b8>)
1000d610:	4699      	mov	r9, r3
1000d612:	e7a9      	b.n	1000d568 <uart_init+0xac>
		i++;
		diff -= (baud_rate / 16);
	}
	fractionalpart = (i + 1) / 2;

	module->hw->UART_CLOCK_SOURCE.reg = UART_CLOCK_SOURCE_CLOCK_SELECT_0;
1000d614:	2100      	movs	r1, #0
1000d616:	2028      	movs	r0, #40	; 0x28
1000d618:	682c      	ldr	r4, [r5, #0]
1000d61a:	5421      	strb	r1, [r4, r0]
	module->hw->UART_BAUD_RATE.reg =
1000d61c:	3301      	adds	r3, #1
1000d61e:	071b      	lsls	r3, r3, #28
1000d620:	0f5b      	lsrs	r3, r3, #29
1000d622:	00d2      	lsls	r2, r2, #3
1000d624:	4313      	orrs	r3, r2
1000d626:	b29b      	uxth	r3, r3
1000d628:	682a      	ldr	r2, [r5, #0]
1000d62a:	8493      	strh	r3, [r2, #36]	; 0x24
	module->hw->UART_CONFIGURATION.reg = config_temp;

	/* Calculate the baud rate. */
	uart_set_baudrate(module, config->baud_rate);

	module->hw->RX_INTERRUPT_MASK.reg = 0;	// disable int at initialization, enable it at read time
1000d62c:	682b      	ldr	r3, [r5, #0]
1000d62e:	7619      	strb	r1, [r3, #24]
	module->hw->TX_INTERRUPT_MASK.reg = 0;	// disable int at initialization, enable it at write time
1000d630:	682b      	ldr	r3, [r5, #0]
1000d632:	7219      	strb	r1, [r3, #8]
	
	return STATUS_OK;
}
1000d634:	2000      	movs	r0, #0
1000d636:	bc0c      	pop	{r2, r3}
1000d638:	4690      	mov	r8, r2
1000d63a:	4699      	mov	r9, r3
1000d63c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000d63e:	46c0      	nop			; (mov r8, r8)
1000d640:	40004000 	.word	0x40004000
1000d644:	1000cdf1 	.word	0x1000cdf1
1000d648:	1000c729 	.word	0x1000c729
1000d64c:	1001a17c 	.word	0x1001a17c
1000d650:	1000d269 	.word	0x1000d269
1000d654:	1000d259 	.word	0x1000d259
1000d658:	1000d2f1 	.word	0x1000d2f1
1000d65c:	e000e100 	.word	0xe000e100
1000d660:	40005000 	.word	0x40005000
1000d664:	1000d37d 	.word	0x1000d37d
1000d668:	1000d405 	.word	0x1000d405
1000d66c:	1000c71d 	.word	0x1000c71d
1000d670:	10013011 	.word	0x10013011
1000d674:	1000c379 	.word	0x1000c379

1000d678 <uart_write_wait>:
* \retval STATUS_OK         If the operation was completed
*/
enum status_code uart_write_wait(struct uart_module *const module,
		const uint8_t tx_data)
{
	while (!(module->hw->TRANSMIT_STATUS.reg & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL));
1000d678:	6802      	ldr	r2, [r0, #0]
1000d67a:	2001      	movs	r0, #1
1000d67c:	7913      	ldrb	r3, [r2, #4]
1000d67e:	4203      	tst	r3, r0
1000d680:	d0fc      	beq.n	1000d67c <uart_write_wait+0x4>

	module->hw->TRANSMIT_DATA.reg = tx_data;
1000d682:	7011      	strb	r1, [r2, #0]
	
	return STATUS_OK;
}
1000d684:	2000      	movs	r0, #0
1000d686:	4770      	bx	lr

1000d688 <uart_read_wait>:
* \retval STATUS_OK                If the operation was completed
*/
enum status_code uart_read_wait(struct uart_module *const module,
		uint8_t *const rx_data)
{
	while (!(module->hw->RECEIVE_STATUS.reg & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY));
1000d688:	6802      	ldr	r2, [r0, #0]
1000d68a:	2001      	movs	r0, #1
1000d68c:	7d13      	ldrb	r3, [r2, #20]
1000d68e:	4203      	tst	r3, r0
1000d690:	d0fc      	beq.n	1000d68c <uart_read_wait+0x4>

	*rx_data = module->hw->RECEIVE_DATA.reg;
1000d692:	7c13      	ldrb	r3, [r2, #16]
1000d694:	700b      	strb	r3, [r1, #0]
	
	return STATUS_OK;
}
1000d696:	2000      	movs	r0, #0
1000d698:	4770      	bx	lr
1000d69a:	46c0      	nop			; (mov r8, r8)

1000d69c <uart_read_buffer_job>:
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
1000d69c:	2317      	movs	r3, #23
{
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
1000d69e:	2a00      	cmp	r2, #0
1000d6a0:	d00d      	beq.n	1000d6be <uart_read_buffer_job+0x22>
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check if the UART is busy transmitting or slave waiting for TXC*/
	if (module->status == STATUS_BUSY) {
1000d6a2:	330b      	adds	r3, #11
1000d6a4:	5cc3      	ldrb	r3, [r0, r3]
1000d6a6:	b2db      	uxtb	r3, r3
1000d6a8:	2b05      	cmp	r3, #5
1000d6aa:	d008      	beq.n	1000d6be <uart_read_buffer_job+0x22>
	Assert(module);
	Assert(rx_data);

	/* Set length for the buffer and the pointer, and let
	 * the interrupt handler do the rest */
	module->remaining_rx_buffer_length = length;
1000d6ac:	8382      	strh	r2, [r0, #28]
	module->rx_buffer_ptr = rx_data;
1000d6ae:	6141      	str	r1, [r0, #20]
	module->status = STATUS_BUSY;
1000d6b0:	2205      	movs	r2, #5
1000d6b2:	2322      	movs	r3, #34	; 0x22
1000d6b4:	54c2      	strb	r2, [r0, r3]

	module->hw->RX_INTERRUPT_MASK.reg = UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK;
1000d6b6:	6803      	ldr	r3, [r0, #0]
1000d6b8:	3a04      	subs	r2, #4
1000d6ba:	761a      	strb	r2, [r3, #24]
		return STATUS_BUSY;
	}

	/* Issue internal read */
	_uart_read_buffer(module, rx_data, length);
	return STATUS_OK;
1000d6bc:	2300      	movs	r3, #0
}
1000d6be:	0018      	movs	r0, r3
1000d6c0:	4770      	bx	lr
1000d6c2:	46c0      	nop			; (mov r8, r8)

1000d6c4 <uart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
1000d6c4:	0093      	lsls	r3, r2, #2
1000d6c6:	18c3      	adds	r3, r0, r3
1000d6c8:	6059      	str	r1, [r3, #4]
	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
1000d6ca:	2120      	movs	r1, #32
1000d6cc:	2301      	movs	r3, #1
1000d6ce:	4093      	lsls	r3, r2
1000d6d0:	5c42      	ldrb	r2, [r0, r1]
1000d6d2:	4313      	orrs	r3, r2
1000d6d4:	5443      	strb	r3, [r0, r1]
}
1000d6d6:	4770      	bx	lr

1000d6d8 <uart_enable_callback>:
 * \param[in]  module         Pointer to UART software instance struct
 * \param[in]  callback_type  Callback type given by an enum
 */
void uart_enable_callback(struct uart_module *const module,
		enum uart_callback callback_type)
{
1000d6d8:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
1000d6da:	2221      	movs	r2, #33	; 0x21
1000d6dc:	2301      	movs	r3, #1
1000d6de:	408b      	lsls	r3, r1
1000d6e0:	5c84      	ldrb	r4, [r0, r2]
1000d6e2:	4323      	orrs	r3, r4
1000d6e4:	5483      	strb	r3, [r0, r2]

	if (callback_type == UART_CTS_ACTIVE) {
1000d6e6:	2901      	cmp	r1, #1
1000d6e8:	d104      	bne.n	1000d6f4 <uart_enable_callback+0x1c>
		module->hw->TX_INTERRUPT_MASK.reg |= UART_TX_INTERRUPT_MASK_CTS_ACTIVE_MASK;
1000d6ea:	6802      	ldr	r2, [r0, #0]
1000d6ec:	7a11      	ldrb	r1, [r2, #8]
1000d6ee:	2320      	movs	r3, #32
1000d6f0:	430b      	orrs	r3, r1
1000d6f2:	7213      	strb	r3, [r2, #8]
	}
}
1000d6f4:	bd10      	pop	{r4, pc}
1000d6f6:	46c0      	nop			; (mov r8, r8)

1000d6f8 <uart_disable_callback>:
 * \param[in]  module         Pointer to UART software instance struct
 * \param[in]  callback_type  Callback type given by an enum
 */
void uart_disable_callback(struct uart_module *const module,
		enum uart_callback callback_type)
{
1000d6f8:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);

	/* Disable callback */
	module->callback_enable_mask &= ~(1 << callback_type);
1000d6fa:	2201      	movs	r2, #1
1000d6fc:	408a      	lsls	r2, r1
1000d6fe:	2421      	movs	r4, #33	; 0x21
1000d700:	5d03      	ldrb	r3, [r0, r4]
1000d702:	4393      	bics	r3, r2
1000d704:	5503      	strb	r3, [r0, r4]

	if (callback_type == UART_CTS_ACTIVE) {
1000d706:	2901      	cmp	r1, #1
1000d708:	d104      	bne.n	1000d714 <uart_disable_callback+0x1c>
		module->hw->TX_INTERRUPT_MASK.reg &= ~UART_TX_INTERRUPT_MASK_CTS_ACTIVE_MASK;
1000d70a:	6802      	ldr	r2, [r0, #0]
1000d70c:	7a13      	ldrb	r3, [r2, #8]
1000d70e:	311f      	adds	r1, #31
1000d710:	438b      	bics	r3, r1
1000d712:	7213      	strb	r3, [r2, #8]
	}

}
1000d714:	bd10      	pop	{r4, pc}
1000d716:	46c0      	nop			; (mov r8, r8)

1000d718 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
1000d718:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d71a:	4647      	mov	r7, r8
1000d71c:	b480      	push	{r7}
1000d71e:	000c      	movs	r4, r1
1000d720:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
1000d722:	2800      	cmp	r0, #0
1000d724:	d10d      	bne.n	1000d742 <_read+0x2a>
		return -1;
	}

	for (; len > 0; --len) {
1000d726:	2a00      	cmp	r2, #0
1000d728:	dd0e      	ble.n	1000d748 <_read+0x30>
1000d72a:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
1000d72c:	4e08      	ldr	r6, [pc, #32]	; (1000d750 <_read+0x38>)
1000d72e:	4d09      	ldr	r5, [pc, #36]	; (1000d754 <_read+0x3c>)
1000d730:	6830      	ldr	r0, [r6, #0]
1000d732:	0021      	movs	r1, r4
1000d734:	682b      	ldr	r3, [r5, #0]
1000d736:	4798      	blx	r3
		ptr++;
1000d738:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
1000d73a:	42a7      	cmp	r7, r4
1000d73c:	d1f8      	bne.n	1000d730 <_read+0x18>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
1000d73e:	4640      	mov	r0, r8
1000d740:	e003      	b.n	1000d74a <_read+0x32>
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
1000d742:	2001      	movs	r0, #1
1000d744:	4240      	negs	r0, r0
1000d746:	e000      	b.n	1000d74a <_read+0x32>
	}

	for (; len > 0; --len) {
1000d748:	2000      	movs	r0, #0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
1000d74a:	bc04      	pop	{r2}
1000d74c:	4690      	mov	r8, r2
1000d74e:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d750:	1001a18c 	.word	0x1001a18c
1000d754:	1001a184 	.word	0x1001a184

1000d758 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
1000d758:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d75a:	4647      	mov	r7, r8
1000d75c:	b480      	push	{r7}
1000d75e:	000e      	movs	r6, r1
1000d760:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
1000d762:	3801      	subs	r0, #1
1000d764:	2802      	cmp	r0, #2
1000d766:	d811      	bhi.n	1000d78c <_write+0x34>
		return -1;
	}

	for (; len != 0; --len) {
1000d768:	2a00      	cmp	r2, #0
1000d76a:	d012      	beq.n	1000d792 <_write+0x3a>
1000d76c:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
1000d76e:	4b0c      	ldr	r3, [pc, #48]	; (1000d7a0 <_write+0x48>)
1000d770:	4698      	mov	r8, r3
1000d772:	4f0c      	ldr	r7, [pc, #48]	; (1000d7a4 <_write+0x4c>)
1000d774:	4643      	mov	r3, r8
1000d776:	6818      	ldr	r0, [r3, #0]
1000d778:	5d31      	ldrb	r1, [r6, r4]
1000d77a:	683b      	ldr	r3, [r7, #0]
1000d77c:	4798      	blx	r3
1000d77e:	2800      	cmp	r0, #0
1000d780:	db09      	blt.n	1000d796 <_write+0x3e>
			return -1;
		}
		++nChars;
1000d782:	3401      	adds	r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
1000d784:	42a5      	cmp	r5, r4
1000d786:	d1f5      	bne.n	1000d774 <_write+0x1c>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
1000d788:	0020      	movs	r0, r4
1000d78a:	e006      	b.n	1000d79a <_write+0x42>
_write (int file, char * ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
1000d78c:	2001      	movs	r0, #1
1000d78e:	4240      	negs	r0, r0
1000d790:	e003      	b.n	1000d79a <_write+0x42>
	}

	for (; len != 0; --len) {
1000d792:	2000      	movs	r0, #0
1000d794:	e001      	b.n	1000d79a <_write+0x42>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
1000d796:	2001      	movs	r0, #1
1000d798:	4240      	negs	r0, r0
		}
		++nChars;
	}
	return nChars;
}
1000d79a:	bc04      	pop	{r2}
1000d79c:	4690      	mov	r8, r2
1000d79e:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d7a0:	1001a18c 	.word	0x1001a18c
1000d7a4:	1001a188 	.word	0x1001a188

1000d7a8 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
1000d7a8:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
1000d7aa:	4a06      	ldr	r2, [pc, #24]	; (1000d7c4 <_sbrk+0x1c>)
1000d7ac:	6812      	ldr	r2, [r2, #0]
1000d7ae:	2a00      	cmp	r2, #0
1000d7b0:	d102      	bne.n	1000d7b8 <_sbrk+0x10>
		heap = (unsigned char *)&_end;
1000d7b2:	4905      	ldr	r1, [pc, #20]	; (1000d7c8 <_sbrk+0x20>)
1000d7b4:	4a03      	ldr	r2, [pc, #12]	; (1000d7c4 <_sbrk+0x1c>)
1000d7b6:	6011      	str	r1, [r2, #0]
	}
	prev_heap = heap;
1000d7b8:	4a02      	ldr	r2, [pc, #8]	; (1000d7c4 <_sbrk+0x1c>)
1000d7ba:	6810      	ldr	r0, [r2, #0]

	heap += incr;
1000d7bc:	18c3      	adds	r3, r0, r3
1000d7be:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
1000d7c0:	4770      	bx	lr
1000d7c2:	46c0      	nop			; (mov r8, r8)
1000d7c4:	10018428 	.word	0x10018428
1000d7c8:	1001ca98 	.word	0x1001ca98

1000d7cc <_close>:
}

extern int _close(int file)
{
	return -1;
}
1000d7cc:	2001      	movs	r0, #1
1000d7ce:	4240      	negs	r0, r0
1000d7d0:	4770      	bx	lr
1000d7d2:	46c0      	nop			; (mov r8, r8)

1000d7d4 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
1000d7d4:	2380      	movs	r3, #128	; 0x80
1000d7d6:	019b      	lsls	r3, r3, #6
1000d7d8:	604b      	str	r3, [r1, #4]

	return 0;
}
1000d7da:	2000      	movs	r0, #0
1000d7dc:	4770      	bx	lr
1000d7de:	46c0      	nop			; (mov r8, r8)

1000d7e0 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
1000d7e0:	2001      	movs	r0, #1
1000d7e2:	4770      	bx	lr

1000d7e4 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
1000d7e4:	2000      	movs	r0, #0
1000d7e6:	4770      	bx	lr

1000d7e8 <ble_undefined_event_handler>:
	}
	return status;
}

at_ble_status_t ble_undefined_event_handler(void *params)
{
1000d7e8:	b510      	push	{r4, lr}
	DBG_LOG_DEV("Undefined Event Received");
1000d7ea:	4804      	ldr	r0, [pc, #16]	; (1000d7fc <ble_undefined_event_handler+0x14>)
1000d7ec:	4b04      	ldr	r3, [pc, #16]	; (1000d800 <ble_undefined_event_handler+0x18>)
1000d7ee:	4798      	blx	r3
1000d7f0:	4804      	ldr	r0, [pc, #16]	; (1000d804 <ble_undefined_event_handler+0x1c>)
1000d7f2:	4b05      	ldr	r3, [pc, #20]	; (1000d808 <ble_undefined_event_handler+0x20>)
1000d7f4:	4798      	blx	r3
    ALL_UNUSED(params);
	return AT_BLE_SUCCESS;
}
1000d7f6:	2000      	movs	r0, #0
1000d7f8:	bd10      	pop	{r4, pc}
1000d7fa:	46c0      	nop			; (mov r8, r8)
1000d7fc:	10016528 	.word	0x10016528
1000d800:	1001537d 	.word	0x1001537d
1000d804:	10017630 	.word	0x10017630
1000d808:	1001525d 	.word	0x1001525d

1000d80c <ble_scan_report_handler>:
	}
}

/** @brief function handles scan report */
at_ble_status_t ble_scan_report_handler(void *params)
{
1000d80c:	b510      	push	{r4, lr}
	at_ble_scan_report_t *scan_report;
	scan_report = (at_ble_scan_report_t *)params;
	if (scan_report->status == AT_BLE_SUCCESS)
1000d80e:	7800      	ldrb	r0, [r0, #0]
1000d810:	2800      	cmp	r0, #0
1000d812:	d006      	beq.n	1000d822 <ble_scan_report_handler+0x16>
		/* All scan data should be handled */
		return AT_BLE_SUCCESS;
	}
	else
	{
		DBG_LOG("Scanning  failed");
1000d814:	4803      	ldr	r0, [pc, #12]	; (1000d824 <ble_scan_report_handler+0x18>)
1000d816:	4b04      	ldr	r3, [pc, #16]	; (1000d828 <ble_scan_report_handler+0x1c>)
1000d818:	4798      	blx	r3
1000d81a:	4804      	ldr	r0, [pc, #16]	; (1000d82c <ble_scan_report_handler+0x20>)
1000d81c:	4b04      	ldr	r3, [pc, #16]	; (1000d830 <ble_scan_report_handler+0x24>)
1000d81e:	4798      	blx	r3
	}
	return AT_BLE_FAILURE;
1000d820:	20e2      	movs	r0, #226	; 0xe2
}
1000d822:	bd10      	pop	{r4, pc}
1000d824:	10016528 	.word	0x10016528
1000d828:	1001537d 	.word	0x1001537d
1000d82c:	1001764c 	.word	0x1001764c
1000d830:	1001525d 	.word	0x1001525d

1000d834 <ble_adv_report_handler>:

/** @brief function handles advertising report */
at_ble_status_t ble_adv_report_handler(void *params)
{
1000d834:	b510      	push	{r4, lr}
    at_ble_adv_report_t *adv_report;
    adv_report = (at_ble_adv_report_t *)params;
    if(adv_report->status == AT_BLE_SUCCESS)
1000d836:	7800      	ldrb	r0, [r0, #0]
1000d838:	2800      	cmp	r0, #0
1000d83a:	d006      	beq.n	1000d84a <ble_adv_report_handler+0x16>
    {
        return AT_BLE_SUCCESS;
    }
    else 
    {
        DBG_LOG("Advertising failed");
1000d83c:	4803      	ldr	r0, [pc, #12]	; (1000d84c <ble_adv_report_handler+0x18>)
1000d83e:	4b04      	ldr	r3, [pc, #16]	; (1000d850 <ble_adv_report_handler+0x1c>)
1000d840:	4798      	blx	r3
1000d842:	4804      	ldr	r0, [pc, #16]	; (1000d854 <ble_adv_report_handler+0x20>)
1000d844:	4b04      	ldr	r3, [pc, #16]	; (1000d858 <ble_adv_report_handler+0x24>)
1000d846:	4798      	blx	r3
    }
    return AT_BLE_FAILURE;
1000d848:	20e2      	movs	r0, #226	; 0xe2
}
1000d84a:	bd10      	pop	{r4, pc}
1000d84c:	10016528 	.word	0x10016528
1000d850:	1001537d 	.word	0x1001537d
1000d854:	10017660 	.word	0x10017660
1000d858:	1001525d 	.word	0x1001525d

1000d85c <ble_mtu_changed_indication_handler>:
	return AT_BLE_SUCCESS;
	
}

at_ble_status_t ble_mtu_changed_indication_handler(void *params)
{
1000d85c:	b510      	push	{r4, lr}
1000d85e:	0004      	movs	r4, r0
	at_ble_mtu_changed_ind_t *mtu_changed_ind;
	mtu_changed_ind = (at_ble_mtu_changed_ind_t *)params;
	DBG_LOG_DEV("BLE-MTU Changed, Connection Handle: %d, New Value: %d", 
1000d860:	4804      	ldr	r0, [pc, #16]	; (1000d874 <ble_mtu_changed_indication_handler+0x18>)
1000d862:	4b05      	ldr	r3, [pc, #20]	; (1000d878 <ble_mtu_changed_indication_handler+0x1c>)
1000d864:	4798      	blx	r3
1000d866:	8862      	ldrh	r2, [r4, #2]
1000d868:	8821      	ldrh	r1, [r4, #0]
1000d86a:	4804      	ldr	r0, [pc, #16]	; (1000d87c <ble_mtu_changed_indication_handler+0x20>)
1000d86c:	4b04      	ldr	r3, [pc, #16]	; (1000d880 <ble_mtu_changed_indication_handler+0x24>)
1000d86e:	4798      	blx	r3
										mtu_changed_ind->conhdl, 
										mtu_changed_ind->mtu_value);
	return AT_BLE_SUCCESS;
}
1000d870:	2000      	movs	r0, #0
1000d872:	bd10      	pop	{r4, pc}
1000d874:	10016528 	.word	0x10016528
1000d878:	1001537d 	.word	0x1001537d
1000d87c:	10017674 	.word	0x10017674
1000d880:	1001525d 	.word	0x1001525d

1000d884 <ble_mtu_changed_cmd_complete_handler>:

at_ble_status_t ble_mtu_changed_cmd_complete_handler(void *params)
{
1000d884:	b570      	push	{r4, r5, r6, lr}
1000d886:	0004      	movs	r4, r0
	at_ble_cmd_complete_event_t *cmd_complete_event;
	cmd_complete_event = (at_ble_cmd_complete_event_t *)params;
	
	if (cmd_complete_event->status == AT_BLE_SUCCESS)
1000d888:	78c5      	ldrb	r5, [r0, #3]
1000d88a:	2d00      	cmp	r5, #0
1000d88c:	d108      	bne.n	1000d8a0 <ble_mtu_changed_cmd_complete_handler+0x1c>
	{
		DBG_LOG_DEV("MTU Changed, Connection Handle:%d, Operation:%d", 
1000d88e:	480a      	ldr	r0, [pc, #40]	; (1000d8b8 <ble_mtu_changed_cmd_complete_handler+0x34>)
1000d890:	4b0a      	ldr	r3, [pc, #40]	; (1000d8bc <ble_mtu_changed_cmd_complete_handler+0x38>)
1000d892:	4798      	blx	r3
1000d894:	78a2      	ldrb	r2, [r4, #2]
1000d896:	8821      	ldrh	r1, [r4, #0]
1000d898:	4809      	ldr	r0, [pc, #36]	; (1000d8c0 <ble_mtu_changed_cmd_complete_handler+0x3c>)
1000d89a:	4b0a      	ldr	r3, [pc, #40]	; (1000d8c4 <ble_mtu_changed_cmd_complete_handler+0x40>)
1000d89c:	4798      	blx	r3
		cmd_complete_event->conn_handle, 
		cmd_complete_event->operation);
		return AT_BLE_SUCCESS;
1000d89e:	e008      	b.n	1000d8b2 <ble_mtu_changed_cmd_complete_handler+0x2e>
	}
	else
	{
		DBG_LOG("MTU Change Failed, Connection Handle:%d, Operation:%d",
1000d8a0:	4805      	ldr	r0, [pc, #20]	; (1000d8b8 <ble_mtu_changed_cmd_complete_handler+0x34>)
1000d8a2:	4b06      	ldr	r3, [pc, #24]	; (1000d8bc <ble_mtu_changed_cmd_complete_handler+0x38>)
1000d8a4:	4798      	blx	r3
1000d8a6:	78a2      	ldrb	r2, [r4, #2]
1000d8a8:	8821      	ldrh	r1, [r4, #0]
1000d8aa:	4807      	ldr	r0, [pc, #28]	; (1000d8c8 <ble_mtu_changed_cmd_complete_handler+0x44>)
1000d8ac:	4b05      	ldr	r3, [pc, #20]	; (1000d8c4 <ble_mtu_changed_cmd_complete_handler+0x40>)
1000d8ae:	4798      	blx	r3
		cmd_complete_event->conn_handle,
		cmd_complete_event->operation);
	}
	return AT_BLE_FAILURE;
1000d8b0:	25e2      	movs	r5, #226	; 0xe2
}
1000d8b2:	0028      	movs	r0, r5
1000d8b4:	bd70      	pop	{r4, r5, r6, pc}
1000d8b6:	46c0      	nop			; (mov r8, r8)
1000d8b8:	10016528 	.word	0x10016528
1000d8bc:	1001537d 	.word	0x1001537d
1000d8c0:	100176ac 	.word	0x100176ac
1000d8c4:	1001525d 	.word	0x1001525d
1000d8c8:	100176dc 	.word	0x100176dc

1000d8cc <ble_characteristic_write_cmd_complete_handler>:

at_ble_status_t ble_characteristic_write_cmd_complete_handler(void *params)
{
1000d8cc:	b570      	push	{r4, r5, r6, lr}
1000d8ce:	0004      	movs	r4, r0
	at_ble_cmd_complete_event_t *cmd_complete_event;
	cmd_complete_event = (at_ble_cmd_complete_event_t *)params;
	if (cmd_complete_event->status == AT_BLE_SUCCESS)
1000d8d0:	78c5      	ldrb	r5, [r0, #3]
1000d8d2:	2d00      	cmp	r5, #0
1000d8d4:	d108      	bne.n	1000d8e8 <ble_characteristic_write_cmd_complete_handler+0x1c>
	{
		DBG_LOG_DEV("Char Write Cmd Complete, Connection Handle:%d, Operation:%d",
1000d8d6:	480a      	ldr	r0, [pc, #40]	; (1000d900 <ble_characteristic_write_cmd_complete_handler+0x34>)
1000d8d8:	4b0a      	ldr	r3, [pc, #40]	; (1000d904 <ble_characteristic_write_cmd_complete_handler+0x38>)
1000d8da:	4798      	blx	r3
1000d8dc:	78a2      	ldrb	r2, [r4, #2]
1000d8de:	8821      	ldrh	r1, [r4, #0]
1000d8e0:	4809      	ldr	r0, [pc, #36]	; (1000d908 <ble_characteristic_write_cmd_complete_handler+0x3c>)
1000d8e2:	4b0a      	ldr	r3, [pc, #40]	; (1000d90c <ble_characteristic_write_cmd_complete_handler+0x40>)
1000d8e4:	4798      	blx	r3
		cmd_complete_event->conn_handle,
		cmd_complete_event->operation);
		return AT_BLE_SUCCESS;
1000d8e6:	e008      	b.n	1000d8fa <ble_characteristic_write_cmd_complete_handler+0x2e>
	}
	else
	{
		DBG_LOG_DEV("Char Write Cmd Failed, Connection Handle:%d, Operation:%d",
1000d8e8:	4805      	ldr	r0, [pc, #20]	; (1000d900 <ble_characteristic_write_cmd_complete_handler+0x34>)
1000d8ea:	4b06      	ldr	r3, [pc, #24]	; (1000d904 <ble_characteristic_write_cmd_complete_handler+0x38>)
1000d8ec:	4798      	blx	r3
1000d8ee:	78a2      	ldrb	r2, [r4, #2]
1000d8f0:	8821      	ldrh	r1, [r4, #0]
1000d8f2:	4807      	ldr	r0, [pc, #28]	; (1000d910 <ble_characteristic_write_cmd_complete_handler+0x44>)
1000d8f4:	4b05      	ldr	r3, [pc, #20]	; (1000d90c <ble_characteristic_write_cmd_complete_handler+0x40>)
1000d8f6:	4798      	blx	r3
		cmd_complete_event->conn_handle,
		cmd_complete_event->operation);
	}
	return AT_BLE_FAILURE;
1000d8f8:	25e2      	movs	r5, #226	; 0xe2
}
1000d8fa:	0028      	movs	r0, r5
1000d8fc:	bd70      	pop	{r4, r5, r6, pc}
1000d8fe:	46c0      	nop			; (mov r8, r8)
1000d900:	10016528 	.word	0x10016528
1000d904:	1001537d 	.word	0x1001537d
1000d908:	10017714 	.word	0x10017714
1000d90c:	1001525d 	.word	0x1001525d
1000d910:	10017750 	.word	0x10017750

1000d914 <ble_disconnected_state_handler>:

/** @brief function handles disconnection event received from stack */
at_ble_status_t ble_disconnected_state_handler(void *params)
{
1000d914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000d916:	0006      	movs	r6, r0
1000d918:	4c1d      	ldr	r4, [pc, #116]	; (1000d990 <ble_disconnected_state_handler+0x7c>)
1000d91a:	239b      	movs	r3, #155	; 0x9b
1000d91c:	009b      	lsls	r3, r3, #2
1000d91e:	18e7      	adds	r7, r4, r3
1000d920:	0025      	movs	r5, r4
	uint8_t idx;
	disconnect = (at_ble_disconnected_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == disconnect->handle) && 
1000d922:	0023      	movs	r3, r4
1000d924:	3b56      	subs	r3, #86	; 0x56
1000d926:	881a      	ldrh	r2, [r3, #0]
1000d928:	8833      	ldrh	r3, [r6, #0]
1000d92a:	429a      	cmp	r2, r3
1000d92c:	d122      	bne.n	1000d974 <ble_disconnected_state_handler+0x60>
		((ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRED) || (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_COMPLETED)))
1000d92e:	7823      	ldrb	r3, [r4, #0]
	uint8_t idx;
	disconnect = (at_ble_disconnected_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == disconnect->handle) && 
1000d930:	2b05      	cmp	r3, #5
1000d932:	d001      	beq.n	1000d938 <ble_disconnected_state_handler+0x24>
		((ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRED) || (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_COMPLETED)))
1000d934:	2b08      	cmp	r3, #8
1000d936:	d102      	bne.n	1000d93e <ble_disconnected_state_handler+0x2a>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_DISCONNECTED;
1000d938:	2301      	movs	r3, #1
1000d93a:	702b      	strb	r3, [r5, #0]
1000d93c:	e01a      	b.n	1000d974 <ble_disconnected_state_handler+0x60>
		}		
		else if(ble_dev_info[idx].conn_info.handle == disconnect->handle)
		{
			switch (ble_dev_info[idx].conn_state)
1000d93e:	2b07      	cmp	r3, #7
1000d940:	d80f      	bhi.n	1000d962 <ble_disconnected_state_handler+0x4e>
1000d942:	009b      	lsls	r3, r3, #2
1000d944:	4a13      	ldr	r2, [pc, #76]	; (1000d994 <ble_disconnected_state_handler+0x80>)
1000d946:	58d3      	ldr	r3, [r2, r3]
1000d948:	469f      	mov	pc, r3
				case BLE_DEVICE_PAIRING_FAILED:
				case BLE_DEVICE_ENCRYPTION_STATE:
				case BLE_DEVICE_ENCRYPTION_FAILED:
				{
					/* Device is not paired so remove the device information */
					ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
1000d94a:	2300      	movs	r3, #0
1000d94c:	7023      	strb	r3, [r4, #0]
					if (ble_device_count > 0)
1000d94e:	4b12      	ldr	r3, [pc, #72]	; (1000d998 <ble_disconnected_state_handler+0x84>)
1000d950:	781b      	ldrb	r3, [r3, #0]
1000d952:	2b00      	cmp	r3, #0
1000d954:	d00e      	beq.n	1000d974 <ble_disconnected_state_handler+0x60>
					{
						ble_device_count--;
1000d956:	4a10      	ldr	r2, [pc, #64]	; (1000d998 <ble_disconnected_state_handler+0x84>)
1000d958:	7813      	ldrb	r3, [r2, #0]
1000d95a:	3b01      	subs	r3, #1
1000d95c:	b2db      	uxtb	r3, r3
1000d95e:	7013      	strb	r3, [r2, #0]
1000d960:	e008      	b.n	1000d974 <ble_disconnected_state_handler+0x60>
				
				case BLE_DEVICE_DISCONNECTED:
				break;
				
				default:
				DBG_LOG_DEV("State Not Handled %d", ble_dev_info[idx].conn_state);
1000d962:	480e      	ldr	r0, [pc, #56]	; (1000d99c <ble_disconnected_state_handler+0x88>)
1000d964:	4b0e      	ldr	r3, [pc, #56]	; (1000d9a0 <ble_disconnected_state_handler+0x8c>)
1000d966:	4798      	blx	r3
1000d968:	7829      	ldrb	r1, [r5, #0]
1000d96a:	480e      	ldr	r0, [pc, #56]	; (1000d9a4 <ble_disconnected_state_handler+0x90>)
1000d96c:	4b0e      	ldr	r3, [pc, #56]	; (1000d9a8 <ble_disconnected_state_handler+0x94>)
1000d96e:	4798      	blx	r3
				ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
1000d970:	2300      	movs	r3, #0
1000d972:	702b      	strb	r3, [r5, #0]
1000d974:	347c      	adds	r4, #124	; 0x7c
{
	at_ble_disconnected_t *disconnect;
	uint8_t idx;
	disconnect = (at_ble_disconnected_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000d976:	42bc      	cmp	r4, r7
1000d978:	d1d2      	bne.n	1000d920 <ble_disconnected_state_handler+0xc>
				break;				
			}
		} 
	}
	
	DBG_LOG("Device disconnected Reason:0x%02x Handle=0x%x", disconnect->reason, disconnect->handle);
1000d97a:	4808      	ldr	r0, [pc, #32]	; (1000d99c <ble_disconnected_state_handler+0x88>)
1000d97c:	4b08      	ldr	r3, [pc, #32]	; (1000d9a0 <ble_disconnected_state_handler+0x8c>)
1000d97e:	4798      	blx	r3
1000d980:	8832      	ldrh	r2, [r6, #0]
1000d982:	78b1      	ldrb	r1, [r6, #2]
1000d984:	4809      	ldr	r0, [pc, #36]	; (1000d9ac <ble_disconnected_state_handler+0x98>)
1000d986:	4b08      	ldr	r3, [pc, #32]	; (1000d9a8 <ble_disconnected_state_handler+0x94>)
1000d988:	4798      	blx	r3
	return AT_BLE_SUCCESS;
}
1000d98a:	2000      	movs	r0, #0
1000d98c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000d98e:	46c0      	nop			; (mov r8, r8)
1000d990:	1001a206 	.word	0x1001a206
1000d994:	100174cc 	.word	0x100174cc
1000d998:	1001a414 	.word	0x1001a414
1000d99c:	10016528 	.word	0x10016528
1000d9a0:	1001537d 	.word	0x1001537d
1000d9a4:	1001778c 	.word	0x1001778c
1000d9a8:	1001525d 	.word	0x1001525d
1000d9ac:	100177a4 	.word	0x100177a4

1000d9b0 <ble_conn_param_update>:

/** @brief connection update parameter function */
at_ble_status_t ble_conn_param_update(void *params)
{
1000d9b0:	b510      	push	{r4, lr}
	at_ble_conn_param_update_done_t * conn_param_update;
	conn_param_update = (at_ble_conn_param_update_done_t *)params;
	DBG_LOG_DEV("AT_BLE_CONN_PARAM_UPDATE ");
1000d9b2:	4804      	ldr	r0, [pc, #16]	; (1000d9c4 <ble_conn_param_update+0x14>)
1000d9b4:	4b04      	ldr	r3, [pc, #16]	; (1000d9c8 <ble_conn_param_update+0x18>)
1000d9b6:	4798      	blx	r3
1000d9b8:	4804      	ldr	r0, [pc, #16]	; (1000d9cc <ble_conn_param_update+0x1c>)
1000d9ba:	4b05      	ldr	r3, [pc, #20]	; (1000d9d0 <ble_conn_param_update+0x20>)
1000d9bc:	4798      	blx	r3
	ALL_UNUSED(conn_param_update);  //To avoid compiler warning
	return AT_BLE_SUCCESS;
}
1000d9be:	2000      	movs	r0, #0
1000d9c0:	bd10      	pop	{r4, pc}
1000d9c2:	46c0      	nop			; (mov r8, r8)
1000d9c4:	10016528 	.word	0x10016528
1000d9c8:	1001537d 	.word	0x1001537d
1000d9cc:	100177d4 	.word	0x100177d4
1000d9d0:	1001525d 	.word	0x1001525d

1000d9d4 <ble_encryption_status_change_handler>:
	return AT_BLE_SUCCESS;
}

/** @brief function handles encryption status change */
at_ble_status_t ble_encryption_status_change_handler(void *params)
{
1000d9d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000d9d6:	0006      	movs	r6, r0
	
	enc_status = (at_ble_encryption_status_changed_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == enc_status->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_STATE))
1000d9d8:	8801      	ldrh	r1, [r0, #0]
1000d9da:	4b28      	ldr	r3, [pc, #160]	; (1000da7c <ble_encryption_status_change_handler+0xa8>)
	uint8_t idx;
	bool device_found = false;
	
	enc_status = (at_ble_encryption_status_changed_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000d9dc:	2400      	movs	r4, #0
	{
		if((ble_dev_info[idx].conn_info.handle == enc_status->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_STATE))
1000d9de:	891a      	ldrh	r2, [r3, #8]
1000d9e0:	428a      	cmp	r2, r1
1000d9e2:	d104      	bne.n	1000d9ee <ble_encryption_status_change_handler+0x1a>
1000d9e4:	001a      	movs	r2, r3
1000d9e6:	325e      	adds	r2, #94	; 0x5e
1000d9e8:	7812      	ldrb	r2, [r2, #0]
1000d9ea:	2a06      	cmp	r2, #6
1000d9ec:	d02e      	beq.n	1000da4c <ble_encryption_status_change_handler+0x78>
	uint8_t idx;
	bool device_found = false;
	
	enc_status = (at_ble_encryption_status_changed_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000d9ee:	3401      	adds	r4, #1
1000d9f0:	b2e4      	uxtb	r4, r4
1000d9f2:	337c      	adds	r3, #124	; 0x7c
1000d9f4:	2c05      	cmp	r4, #5
1000d9f6:	d1f2      	bne.n	1000d9de <ble_encryption_status_change_handler+0xa>
1000d9f8:	e039      	b.n	1000da6e <ble_encryption_status_change_handler+0x9a>
			return AT_BLE_FAILURE;
		}
	}
	else
	{
		ble_dev_info[idx].bond_info.status = enc_status->status;
1000d9fa:	4920      	ldr	r1, [pc, #128]	; (1000da7c <ble_encryption_status_change_handler+0xa8>)
1000d9fc:	0163      	lsls	r3, r4, #5
1000d9fe:	1b1a      	subs	r2, r3, r4
1000da00:	0092      	lsls	r2, r2, #2
1000da02:	188a      	adds	r2, r1, r2
1000da04:	7615      	strb	r5, [r2, #24]
		ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_FAILED;
1000da06:	0014      	movs	r4, r2
1000da08:	345e      	adds	r4, #94	; 0x5e
1000da0a:	2307      	movs	r3, #7
1000da0c:	7023      	strb	r3, [r4, #0]
		DBG_LOG("Encryption failed");
1000da0e:	481c      	ldr	r0, [pc, #112]	; (1000da80 <ble_encryption_status_change_handler+0xac>)
1000da10:	4b1c      	ldr	r3, [pc, #112]	; (1000da84 <ble_encryption_status_change_handler+0xb0>)
1000da12:	4798      	blx	r3
1000da14:	481c      	ldr	r0, [pc, #112]	; (1000da88 <ble_encryption_status_change_handler+0xb4>)
1000da16:	4b1d      	ldr	r3, [pc, #116]	; (1000da8c <ble_encryption_status_change_handler+0xb8>)
1000da18:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000da1a:	25e2      	movs	r5, #226	; 0xe2
1000da1c:	e02b      	b.n	1000da76 <ble_encryption_status_change_handler+0xa2>
		}
	}
	
	if(enc_status->status == AT_BLE_SUCCESS)
	{
		DBG_LOG("Encryption completed successfully");
1000da1e:	4818      	ldr	r0, [pc, #96]	; (1000da80 <ble_encryption_status_change_handler+0xac>)
1000da20:	4b18      	ldr	r3, [pc, #96]	; (1000da84 <ble_encryption_status_change_handler+0xb0>)
1000da22:	4798      	blx	r3
1000da24:	481a      	ldr	r0, [pc, #104]	; (1000da90 <ble_encryption_status_change_handler+0xbc>)
1000da26:	4b19      	ldr	r3, [pc, #100]	; (1000da8c <ble_encryption_status_change_handler+0xb8>)
1000da28:	4798      	blx	r3
		if (device_found)
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_COMPLETED;
1000da2a:	4914      	ldr	r1, [pc, #80]	; (1000da7c <ble_encryption_status_change_handler+0xa8>)
1000da2c:	0163      	lsls	r3, r4, #5
1000da2e:	1b1a      	subs	r2, r3, r4
1000da30:	0092      	lsls	r2, r2, #2
1000da32:	188a      	adds	r2, r1, r2
1000da34:	0010      	movs	r0, r2
1000da36:	305e      	adds	r0, #94	; 0x5e
1000da38:	2708      	movs	r7, #8
1000da3a:	7007      	strb	r7, [r0, #0]
			ble_dev_info[idx].bond_info.auth = enc_status->authen;
1000da3c:	78f0      	ldrb	r0, [r6, #3]
1000da3e:	7510      	strb	r0, [r2, #20]
			ble_dev_info[idx].bond_info.status = enc_status->status;
1000da40:	78b2      	ldrb	r2, [r6, #2]
1000da42:	1b1c      	subs	r4, r3, r4
1000da44:	00a4      	lsls	r4, r4, #2
1000da46:	190c      	adds	r4, r1, r4
1000da48:	7622      	strb	r2, [r4, #24]
		ble_dev_info[idx].bond_info.status = enc_status->status;
		ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_FAILED;
		DBG_LOG("Encryption failed");
		return AT_BLE_FAILURE;
	}
	return AT_BLE_SUCCESS;
1000da4a:	e014      	b.n	1000da76 <ble_encryption_status_change_handler+0xa2>
			device_found = true;
			break;
		}
	}
	
	if(enc_status->status == AT_BLE_SUCCESS)
1000da4c:	78b5      	ldrb	r5, [r6, #2]
1000da4e:	2d00      	cmp	r5, #0
1000da50:	d0e5      	beq.n	1000da1e <ble_encryption_status_change_handler+0x4a>
1000da52:	e7d2      	b.n	1000d9fa <ble_encryption_status_change_handler+0x26>
	{
		DBG_LOG("Encryption completed successfully");
1000da54:	4e0a      	ldr	r6, [pc, #40]	; (1000da80 <ble_encryption_status_change_handler+0xac>)
1000da56:	0030      	movs	r0, r6
1000da58:	4d0a      	ldr	r5, [pc, #40]	; (1000da84 <ble_encryption_status_change_handler+0xb0>)
1000da5a:	47a8      	blx	r5
1000da5c:	480c      	ldr	r0, [pc, #48]	; (1000da90 <ble_encryption_status_change_handler+0xbc>)
1000da5e:	4c0b      	ldr	r4, [pc, #44]	; (1000da8c <ble_encryption_status_change_handler+0xb8>)
1000da60:	47a0      	blx	r4
			ble_dev_info[idx].bond_info.auth = enc_status->authen;
			ble_dev_info[idx].bond_info.status = enc_status->status;
		}
		else
		{
			DBG_LOG("BLE Device not found encryption info");
1000da62:	0030      	movs	r0, r6
1000da64:	47a8      	blx	r5
1000da66:	480b      	ldr	r0, [pc, #44]	; (1000da94 <ble_encryption_status_change_handler+0xc0>)
1000da68:	47a0      	blx	r4
			return AT_BLE_FAILURE;
1000da6a:	25e2      	movs	r5, #226	; 0xe2
1000da6c:	e003      	b.n	1000da76 <ble_encryption_status_change_handler+0xa2>
			device_found = true;
			break;
		}
	}
	
	if(enc_status->status == AT_BLE_SUCCESS)
1000da6e:	78b5      	ldrb	r5, [r6, #2]
1000da70:	2d00      	cmp	r5, #0
1000da72:	d1c2      	bne.n	1000d9fa <ble_encryption_status_change_handler+0x26>
1000da74:	e7ee      	b.n	1000da54 <ble_encryption_status_change_handler+0x80>
		ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_FAILED;
		DBG_LOG("Encryption failed");
		return AT_BLE_FAILURE;
	}
	return AT_BLE_SUCCESS;
}
1000da76:	0028      	movs	r0, r5
1000da78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000da7a:	46c0      	nop			; (mov r8, r8)
1000da7c:	1001a1a8 	.word	0x1001a1a8
1000da80:	10016528 	.word	0x10016528
1000da84:	1001537d 	.word	0x1001537d
1000da88:	100177f0 	.word	0x100177f0
1000da8c:	1001525d 	.word	0x1001525d
1000da90:	10017804 	.word	0x10017804
1000da94:	10017828 	.word	0x10017828

1000da98 <ble_scan_info_handler>:
	return found;
}
#endif
/** @brief function handling scaned information */
at_ble_status_t ble_scan_info_handler(void *params)
{
1000da98:	b530      	push	{r4, r5, lr}
1000da9a:	b085      	sub	sp, #20
1000da9c:	0004      	movs	r4, r0
	at_ble_scan_info_t *scan_param;
	scan_param = (at_ble_scan_info_t *)params;
	if(scan_response_count < MAX_SCAN_DEVICE)
1000da9e:	4b1f      	ldr	r3, [pc, #124]	; (1000db1c <ble_scan_info_handler+0x84>)
1000daa0:	781b      	ldrb	r3, [r3, #0]
1000daa2:	b2db      	uxtb	r3, r3
1000daa4:	2b13      	cmp	r3, #19
1000daa6:	d824      	bhi.n	1000daf2 <ble_scan_info_handler+0x5a>
	{
		memcpy((uint8_t *)&scan_info[scan_response_count], scan_param, sizeof(at_ble_scan_info_t));
1000daa8:	4d1c      	ldr	r5, [pc, #112]	; (1000db1c <ble_scan_info_handler+0x84>)
1000daaa:	782b      	ldrb	r3, [r5, #0]
1000daac:	b2db      	uxtb	r3, r3
1000daae:	0098      	lsls	r0, r3, #2
1000dab0:	18c0      	adds	r0, r0, r3
1000dab2:	00c0      	lsls	r0, r0, #3
1000dab4:	18c3      	adds	r3, r0, r3
1000dab6:	481a      	ldr	r0, [pc, #104]	; (1000db20 <ble_scan_info_handler+0x88>)
1000dab8:	1818      	adds	r0, r3, r0
1000daba:	2229      	movs	r2, #41	; 0x29
1000dabc:	0021      	movs	r1, r4
1000dabe:	4b19      	ldr	r3, [pc, #100]	; (1000db24 <ble_scan_info_handler+0x8c>)
1000dac0:	4798      	blx	r3
		DBG_LOG_DEV("Info:Device found address [%d]  0x%02X%02X%02X%02X%02X%02X ",
1000dac2:	4819      	ldr	r0, [pc, #100]	; (1000db28 <ble_scan_info_handler+0x90>)
1000dac4:	4b19      	ldr	r3, [pc, #100]	; (1000db2c <ble_scan_info_handler+0x94>)
1000dac6:	4798      	blx	r3
1000dac8:	7829      	ldrb	r1, [r5, #0]
1000daca:	b2c9      	uxtb	r1, r1
1000dacc:	79a3      	ldrb	r3, [r4, #6]
1000dace:	79e2      	ldrb	r2, [r4, #7]
1000dad0:	78a0      	ldrb	r0, [r4, #2]
1000dad2:	9003      	str	r0, [sp, #12]
1000dad4:	78e0      	ldrb	r0, [r4, #3]
1000dad6:	9002      	str	r0, [sp, #8]
1000dad8:	7920      	ldrb	r0, [r4, #4]
1000dada:	9001      	str	r0, [sp, #4]
1000dadc:	7960      	ldrb	r0, [r4, #5]
1000dade:	9000      	str	r0, [sp, #0]
1000dae0:	4813      	ldr	r0, [pc, #76]	; (1000db30 <ble_scan_info_handler+0x98>)
1000dae2:	4c14      	ldr	r4, [pc, #80]	; (1000db34 <ble_scan_info_handler+0x9c>)
1000dae4:	47a0      	blx	r4
		scan_param->dev_addr.addr[4],
		scan_param->dev_addr.addr[3],
		scan_param->dev_addr.addr[2],
		scan_param->dev_addr.addr[1],
		scan_param->dev_addr.addr[0]);
		scan_response_count++;
1000dae6:	782b      	ldrb	r3, [r5, #0]
1000dae8:	3301      	adds	r3, #1
1000daea:	b2db      	uxtb	r3, r3
1000daec:	702b      	strb	r3, [r5, #0]
		return AT_BLE_SUCCESS;
1000daee:	2300      	movs	r3, #0
1000daf0:	e011      	b.n	1000db16 <ble_scan_info_handler+0x7e>
	}
	else
	{
		DBG_LOG("Info:maximum no.of scan device reached...Stopping Scan");
1000daf2:	480d      	ldr	r0, [pc, #52]	; (1000db28 <ble_scan_info_handler+0x90>)
1000daf4:	4b0d      	ldr	r3, [pc, #52]	; (1000db2c <ble_scan_info_handler+0x94>)
1000daf6:	4798      	blx	r3
1000daf8:	480f      	ldr	r0, [pc, #60]	; (1000db38 <ble_scan_info_handler+0xa0>)
1000dafa:	4b0e      	ldr	r3, [pc, #56]	; (1000db34 <ble_scan_info_handler+0x9c>)
1000dafc:	4798      	blx	r3
		if(at_ble_scan_stop() != AT_BLE_SUCCESS)
1000dafe:	4b0f      	ldr	r3, [pc, #60]	; (1000db3c <ble_scan_info_handler+0xa4>)
1000db00:	4798      	blx	r3
				}
			}
		}
	
		#endif
		return AT_BLE_FAILURE;
1000db02:	23e2      	movs	r3, #226	; 0xe2
		return AT_BLE_SUCCESS;
	}
	else
	{
		DBG_LOG("Info:maximum no.of scan device reached...Stopping Scan");
		if(at_ble_scan_stop() != AT_BLE_SUCCESS)
1000db04:	2800      	cmp	r0, #0
1000db06:	d006      	beq.n	1000db16 <ble_scan_info_handler+0x7e>
		{
			DBG_LOG("Failed to stop scanning");
1000db08:	4807      	ldr	r0, [pc, #28]	; (1000db28 <ble_scan_info_handler+0x90>)
1000db0a:	4b08      	ldr	r3, [pc, #32]	; (1000db2c <ble_scan_info_handler+0x94>)
1000db0c:	4798      	blx	r3
1000db0e:	480c      	ldr	r0, [pc, #48]	; (1000db40 <ble_scan_info_handler+0xa8>)
1000db10:	4b08      	ldr	r3, [pc, #32]	; (1000db34 <ble_scan_info_handler+0x9c>)
1000db12:	4798      	blx	r3
				}
			}
		}
	
		#endif
		return AT_BLE_FAILURE;
1000db14:	23e2      	movs	r3, #226	; 0xe2
	}
}
1000db16:	0018      	movs	r0, r3
1000db18:	b005      	add	sp, #20
1000db1a:	bd30      	pop	{r4, r5, pc}
1000db1c:	10018d10 	.word	0x10018d10
1000db20:	1001a48c 	.word	0x1001a48c
1000db24:	10015103 	.word	0x10015103
1000db28:	10016528 	.word	0x10016528
1000db2c:	1001537d 	.word	0x1001537d
1000db30:	10017850 	.word	0x10017850
1000db34:	1001525d 	.word	0x1001525d
1000db38:	1001788c 	.word	0x1001788c
1000db3c:	10010925 	.word	0x10010925
1000db40:	100178c4 	.word	0x100178c4

1000db44 <ble_pair_done_handler>:
	return AT_BLE_SUCCESS;	
}

/** @brief function handles pair done event */
at_ble_status_t ble_pair_done_handler(void *params)
{
1000db44:	b5f0      	push	{r4, r5, r6, r7, lr}
1000db46:	465f      	mov	r7, fp
1000db48:	4656      	mov	r6, sl
1000db4a:	464d      	mov	r5, r9
1000db4c:	4644      	mov	r4, r8
1000db4e:	b4f0      	push	{r4, r5, r6, r7}
1000db50:	b083      	sub	sp, #12
1000db52:	0005      	movs	r5, r0
	bool device_found = false;
	pairing_params = (at_ble_pair_done_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == pairing_params->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRING))
1000db54:	8841      	ldrh	r1, [r0, #2]
1000db56:	4b59      	ldr	r3, [pc, #356]	; (1000dcbc <ble_pair_done_handler+0x178>)
	at_ble_pair_done_t *pairing_params;
	uint8_t idx;
	bool device_found = false;
	pairing_params = (at_ble_pair_done_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000db58:	2400      	movs	r4, #0
	{
		if((ble_dev_info[idx].conn_info.handle == pairing_params->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRING))
1000db5a:	891a      	ldrh	r2, [r3, #8]
1000db5c:	428a      	cmp	r2, r1
1000db5e:	d105      	bne.n	1000db6c <ble_pair_done_handler+0x28>
1000db60:	001a      	movs	r2, r3
1000db62:	325e      	adds	r2, #94	; 0x5e
1000db64:	7812      	ldrb	r2, [r2, #0]
1000db66:	2a03      	cmp	r2, #3
1000db68:	d100      	bne.n	1000db6c <ble_pair_done_handler+0x28>
1000db6a:	e09a      	b.n	1000dca2 <ble_pair_done_handler+0x15e>
	at_ble_pair_done_t *pairing_params;
	uint8_t idx;
	bool device_found = false;
	pairing_params = (at_ble_pair_done_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000db6c:	3401      	adds	r4, #1
1000db6e:	b2e4      	uxtb	r4, r4
1000db70:	337c      	adds	r3, #124	; 0x7c
1000db72:	2c05      	cmp	r4, #5
1000db74:	d1f1      	bne.n	1000db5a <ble_pair_done_handler+0x16>
1000db76:	e057      	b.n	1000dc28 <ble_pair_done_handler+0xe4>
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_ltk, (uint8_t *)&pairing_params->peer_ltk, sizeof(at_ble_LTK_t));
			
			DBG_LOG_DEV("LTK: ");
			for (idx = 0; idx < 16; idx++)
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_ltk.key[idx]);
1000db78:	7821      	ldrb	r1, [r4, #0]
1000db7a:	0030      	movs	r0, r6
1000db7c:	47b8      	blx	r7
1000db7e:	3401      	adds	r4, #1
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_csrk, (uint8_t *)&pairing_params->peer_csrk, sizeof(at_ble_CSRK_t));
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_irk, (uint8_t *)&pairing_params->peer_irk, sizeof(at_ble_IRK_t));
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_ltk, (uint8_t *)&pairing_params->peer_ltk, sizeof(at_ble_LTK_t));
			
			DBG_LOG_DEV("LTK: ");
			for (idx = 0; idx < 16; idx++)
1000db80:	454c      	cmp	r4, r9
1000db82:	d1f9      	bne.n	1000db78 <ble_pair_done_handler+0x34>
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_ltk.key[idx]);
				
			}
			DBG_LOG_DEV("CSRK: ");
1000db84:	484e      	ldr	r0, [pc, #312]	; (1000dcc0 <ble_pair_done_handler+0x17c>)
1000db86:	4b4f      	ldr	r3, [pc, #316]	; (1000dcc4 <ble_pair_done_handler+0x180>)
1000db88:	4798      	blx	r3
1000db8a:	484f      	ldr	r0, [pc, #316]	; (1000dcc8 <ble_pair_done_handler+0x184>)
1000db8c:	4b4f      	ldr	r3, [pc, #316]	; (1000dccc <ble_pair_done_handler+0x188>)
1000db8e:	4798      	blx	r3
1000db90:	002e      	movs	r6, r5
1000db92:	3622      	adds	r6, #34	; 0x22
1000db94:	002c      	movs	r4, r5
1000db96:	3432      	adds	r4, #50	; 0x32
			for (idx = 0; idx < 16; idx++)
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_csrk.key[idx]);
1000db98:	4f4c      	ldr	r7, [pc, #304]	; (1000dccc <ble_pair_done_handler+0x188>)
1000db9a:	7831      	ldrb	r1, [r6, #0]
1000db9c:	484c      	ldr	r0, [pc, #304]	; (1000dcd0 <ble_pair_done_handler+0x18c>)
1000db9e:	47b8      	blx	r7
1000dba0:	3601      	adds	r6, #1
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_ltk.key[idx]);
				
			}
			DBG_LOG_DEV("CSRK: ");
			for (idx = 0; idx < 16; idx++)
1000dba2:	42a6      	cmp	r6, r4
1000dba4:	d1f9      	bne.n	1000db9a <ble_pair_done_handler+0x56>
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_csrk.key[idx]);
				
			}
			DBG_LOG_DEV("IRK:");
1000dba6:	4846      	ldr	r0, [pc, #280]	; (1000dcc0 <ble_pair_done_handler+0x17c>)
1000dba8:	4b46      	ldr	r3, [pc, #280]	; (1000dcc4 <ble_pair_done_handler+0x180>)
1000dbaa:	4798      	blx	r3
1000dbac:	4849      	ldr	r0, [pc, #292]	; (1000dcd4 <ble_pair_done_handler+0x190>)
1000dbae:	4b47      	ldr	r3, [pc, #284]	; (1000dccc <ble_pair_done_handler+0x188>)
1000dbb0:	4798      	blx	r3
1000dbb2:	3542      	adds	r5, #66	; 0x42
1000dbb4:	002f      	movs	r7, r5
			for (idx = 0; idx < 16; idx++)
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_irk.key[idx]);
1000dbb6:	4e46      	ldr	r6, [pc, #280]	; (1000dcd0 <ble_pair_done_handler+0x18c>)
1000dbb8:	4d44      	ldr	r5, [pc, #272]	; (1000dccc <ble_pair_done_handler+0x188>)
1000dbba:	7821      	ldrb	r1, [r4, #0]
1000dbbc:	0030      	movs	r0, r6
1000dbbe:	47a8      	blx	r5
1000dbc0:	3401      	adds	r4, #1
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_csrk.key[idx]);
				
			}
			DBG_LOG_DEV("IRK:");
			for (idx = 0; idx < 16; idx++)
1000dbc2:	42bc      	cmp	r4, r7
1000dbc4:	d1f9      	bne.n	1000dbba <ble_pair_done_handler+0x76>
1000dbc6:	e071      	b.n	1000dcac <ble_pair_done_handler+0x168>
			return AT_BLE_FAILURE;
		}		
	}
	else
	{
		if(ble_dev_info[idx].conn_state != BLE_DEVICE_DEFAULT_IDLE && ble_dev_info[idx].conn_state != BLE_DEVICE_DISCONNECTED) {
1000dbc8:	0163      	lsls	r3, r4, #5
1000dbca:	1b1c      	subs	r4, r3, r4
1000dbcc:	00a4      	lsls	r4, r4, #2
1000dbce:	4b3b      	ldr	r3, [pc, #236]	; (1000dcbc <ble_pair_done_handler+0x178>)
1000dbd0:	191c      	adds	r4, r3, r4
1000dbd2:	345e      	adds	r4, #94	; 0x5e
1000dbd4:	7823      	ldrb	r3, [r4, #0]
1000dbd6:	2b01      	cmp	r3, #1
1000dbd8:	d915      	bls.n	1000dc06 <ble_pair_done_handler+0xc2>
			DBG_LOG("Pairing failed...Disconnecting");
1000dbda:	4839      	ldr	r0, [pc, #228]	; (1000dcc0 <ble_pair_done_handler+0x17c>)
1000dbdc:	4b39      	ldr	r3, [pc, #228]	; (1000dcc4 <ble_pair_done_handler+0x180>)
1000dbde:	4798      	blx	r3
1000dbe0:	483d      	ldr	r0, [pc, #244]	; (1000dcd8 <ble_pair_done_handler+0x194>)
1000dbe2:	4b3a      	ldr	r3, [pc, #232]	; (1000dccc <ble_pair_done_handler+0x188>)
1000dbe4:	4798      	blx	r3
			if(!(at_ble_disconnect(pairing_params->handle, AT_BLE_TERMINATED_BY_USER) == AT_BLE_SUCCESS))
1000dbe6:	8868      	ldrh	r0, [r5, #2]
1000dbe8:	2113      	movs	r1, #19
1000dbea:	4b3c      	ldr	r3, [pc, #240]	; (1000dcdc <ble_pair_done_handler+0x198>)
1000dbec:	4798      	blx	r3
1000dbee:	9001      	str	r0, [sp, #4]
1000dbf0:	2800      	cmp	r0, #0
1000dbf2:	d05b      	beq.n	1000dcac <ble_pair_done_handler+0x168>
			{
				DBG_LOG("Disconnect Request Failed");
1000dbf4:	4832      	ldr	r0, [pc, #200]	; (1000dcc0 <ble_pair_done_handler+0x17c>)
1000dbf6:	4b33      	ldr	r3, [pc, #204]	; (1000dcc4 <ble_pair_done_handler+0x180>)
1000dbf8:	4798      	blx	r3
1000dbfa:	4839      	ldr	r0, [pc, #228]	; (1000dce0 <ble_pair_done_handler+0x19c>)
1000dbfc:	4b33      	ldr	r3, [pc, #204]	; (1000dccc <ble_pair_done_handler+0x188>)
1000dbfe:	4798      	blx	r3
				return AT_BLE_FAILURE;
1000dc00:	23e2      	movs	r3, #226	; 0xe2
1000dc02:	9301      	str	r3, [sp, #4]
1000dc04:	e052      	b.n	1000dcac <ble_pair_done_handler+0x168>
			}
		}
	}
	return AT_BLE_SUCCESS;
1000dc06:	2300      	movs	r3, #0
1000dc08:	9301      	str	r3, [sp, #4]
1000dc0a:	e04f      	b.n	1000dcac <ble_pair_done_handler+0x168>
		}
	}
	
	if(pairing_params->status == AT_BLE_SUCCESS)
	{
		DBG_LOG("Pairing procedure completed successfully");
1000dc0c:	4e2c      	ldr	r6, [pc, #176]	; (1000dcc0 <ble_pair_done_handler+0x17c>)
1000dc0e:	0030      	movs	r0, r6
1000dc10:	4d2c      	ldr	r5, [pc, #176]	; (1000dcc4 <ble_pair_done_handler+0x180>)
1000dc12:	47a8      	blx	r5
1000dc14:	4833      	ldr	r0, [pc, #204]	; (1000dce4 <ble_pair_done_handler+0x1a0>)
1000dc16:	4c2d      	ldr	r4, [pc, #180]	; (1000dccc <ble_pair_done_handler+0x188>)
1000dc18:	47a0      	blx	r4
				
			}
		}
		else
		{
			DBG_LOG("BLE Device not found to store the pairing info");
1000dc1a:	0030      	movs	r0, r6
1000dc1c:	47a8      	blx	r5
1000dc1e:	4832      	ldr	r0, [pc, #200]	; (1000dce8 <ble_pair_done_handler+0x1a4>)
1000dc20:	47a0      	blx	r4
			return AT_BLE_FAILURE;
1000dc22:	23e2      	movs	r3, #226	; 0xe2
1000dc24:	9301      	str	r3, [sp, #4]
1000dc26:	e041      	b.n	1000dcac <ble_pair_done_handler+0x168>
			device_found = true;
			break;
		}
	}
	
	if(pairing_params->status == AT_BLE_SUCCESS)
1000dc28:	792b      	ldrb	r3, [r5, #4]
1000dc2a:	2b00      	cmp	r3, #0
1000dc2c:	d1cc      	bne.n	1000dbc8 <ble_pair_done_handler+0x84>
1000dc2e:	e7ed      	b.n	1000dc0c <ble_pair_done_handler+0xc8>
	{
		DBG_LOG("Pairing procedure completed successfully");
1000dc30:	4823      	ldr	r0, [pc, #140]	; (1000dcc0 <ble_pair_done_handler+0x17c>)
1000dc32:	4b24      	ldr	r3, [pc, #144]	; (1000dcc4 <ble_pair_done_handler+0x180>)
1000dc34:	469b      	mov	fp, r3
1000dc36:	4798      	blx	r3
1000dc38:	482a      	ldr	r0, [pc, #168]	; (1000dce4 <ble_pair_done_handler+0x1a0>)
1000dc3a:	4b24      	ldr	r3, [pc, #144]	; (1000dccc <ble_pair_done_handler+0x188>)
1000dc3c:	469a      	mov	sl, r3
1000dc3e:	4798      	blx	r3
		if (device_found)
		{
			ble_dev_info[idx].bond_info.auth = pairing_params->auth;
1000dc40:	782a      	ldrb	r2, [r5, #0]
1000dc42:	4b1e      	ldr	r3, [pc, #120]	; (1000dcbc <ble_pair_done_handler+0x178>)
1000dc44:	4698      	mov	r8, r3
1000dc46:	0167      	lsls	r7, r4, #5
1000dc48:	1b3b      	subs	r3, r7, r4
1000dc4a:	009b      	lsls	r3, r3, #2
1000dc4c:	4443      	add	r3, r8
1000dc4e:	751a      	strb	r2, [r3, #20]
			ble_dev_info[idx].bond_info.status = pairing_params->status;
1000dc50:	792a      	ldrb	r2, [r5, #4]
1000dc52:	761a      	strb	r2, [r3, #24]
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRED;
1000dc54:	335e      	adds	r3, #94	; 0x5e
1000dc56:	2205      	movs	r2, #5
1000dc58:	701a      	strb	r2, [r3, #0]
			
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_csrk, (uint8_t *)&pairing_params->peer_csrk, sizeof(at_ble_CSRK_t));
1000dc5a:	1b38      	subs	r0, r7, r4
1000dc5c:	0080      	lsls	r0, r0, #2
1000dc5e:	4440      	add	r0, r8
1000dc60:	3036      	adds	r0, #54	; 0x36
1000dc62:	320b      	adds	r2, #11
1000dc64:	0029      	movs	r1, r5
1000dc66:	3122      	adds	r1, #34	; 0x22
1000dc68:	4b20      	ldr	r3, [pc, #128]	; (1000dcec <ble_pair_done_handler+0x1a8>)
1000dc6a:	4699      	mov	r9, r3
1000dc6c:	4798      	blx	r3
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_irk, (uint8_t *)&pairing_params->peer_irk, sizeof(at_ble_IRK_t));
1000dc6e:	1b38      	subs	r0, r7, r4
1000dc70:	0080      	lsls	r0, r0, #2
1000dc72:	4440      	add	r0, r8
1000dc74:	3046      	adds	r0, #70	; 0x46
1000dc76:	2217      	movs	r2, #23
1000dc78:	0029      	movs	r1, r5
1000dc7a:	3132      	adds	r1, #50	; 0x32
1000dc7c:	47c8      	blx	r9
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_ltk, (uint8_t *)&pairing_params->peer_ltk, sizeof(at_ble_LTK_t));
1000dc7e:	1b38      	subs	r0, r7, r4
1000dc80:	0080      	lsls	r0, r0, #2
1000dc82:	4440      	add	r0, r8
1000dc84:	301a      	adds	r0, #26
1000dc86:	1dac      	adds	r4, r5, #6
1000dc88:	221c      	movs	r2, #28
1000dc8a:	0021      	movs	r1, r4
1000dc8c:	47c8      	blx	r9
			
			DBG_LOG_DEV("LTK: ");
1000dc8e:	480c      	ldr	r0, [pc, #48]	; (1000dcc0 <ble_pair_done_handler+0x17c>)
1000dc90:	47d8      	blx	fp
1000dc92:	4817      	ldr	r0, [pc, #92]	; (1000dcf0 <ble_pair_done_handler+0x1ac>)
1000dc94:	47d0      	blx	sl
1000dc96:	2316      	movs	r3, #22
1000dc98:	4699      	mov	r9, r3
1000dc9a:	44a9      	add	r9, r5
			for (idx = 0; idx < 16; idx++)
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_ltk.key[idx]);
1000dc9c:	4e0c      	ldr	r6, [pc, #48]	; (1000dcd0 <ble_pair_done_handler+0x18c>)
1000dc9e:	4f0b      	ldr	r7, [pc, #44]	; (1000dccc <ble_pair_done_handler+0x188>)
1000dca0:	e76a      	b.n	1000db78 <ble_pair_done_handler+0x34>
			device_found = true;
			break;
		}
	}
	
	if(pairing_params->status == AT_BLE_SUCCESS)
1000dca2:	792b      	ldrb	r3, [r5, #4]
1000dca4:	9301      	str	r3, [sp, #4]
1000dca6:	2b00      	cmp	r3, #0
1000dca8:	d0c2      	beq.n	1000dc30 <ble_pair_done_handler+0xec>
1000dcaa:	e78d      	b.n	1000dbc8 <ble_pair_done_handler+0x84>
				return AT_BLE_FAILURE;
			}
		}
	}
	return AT_BLE_SUCCESS;
}
1000dcac:	9801      	ldr	r0, [sp, #4]
1000dcae:	b003      	add	sp, #12
1000dcb0:	bc3c      	pop	{r2, r3, r4, r5}
1000dcb2:	4690      	mov	r8, r2
1000dcb4:	4699      	mov	r9, r3
1000dcb6:	46a2      	mov	sl, r4
1000dcb8:	46ab      	mov	fp, r5
1000dcba:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000dcbc:	1001a1a8 	.word	0x1001a1a8
1000dcc0:	10016528 	.word	0x10016528
1000dcc4:	1001537d 	.word	0x1001537d
1000dcc8:	100178e8 	.word	0x100178e8
1000dccc:	1001525d 	.word	0x1001525d
1000dcd0:	100178dc 	.word	0x100178dc
1000dcd4:	100178f0 	.word	0x100178f0
1000dcd8:	100178f8 	.word	0x100178f8
1000dcdc:	10010945 	.word	0x10010945
1000dce0:	10017918 	.word	0x10017918
1000dce4:	10017934 	.word	0x10017934
1000dce8:	10017960 	.word	0x10017960
1000dcec:	10015103 	.word	0x10015103
1000dcf0:	10017990 	.word	0x10017990

1000dcf4 <ble_conn_param_update_req>:
	ALL_UNUSED(conn_param_update);  //To avoid compiler warning
	return AT_BLE_SUCCESS;
}

at_ble_status_t ble_conn_param_update_req(void *params)
{
1000dcf4:	b510      	push	{r4, lr}
	at_ble_conn_param_update_request_t * conn_param_req;
	conn_param_req = (at_ble_conn_param_update_request_t *)params;
	at_ble_conn_update_reply(conn_param_req->handle, true, 1, 120);
1000dcf6:	8800      	ldrh	r0, [r0, #0]
1000dcf8:	2378      	movs	r3, #120	; 0x78
1000dcfa:	2201      	movs	r2, #1
1000dcfc:	2101      	movs	r1, #1
1000dcfe:	4c02      	ldr	r4, [pc, #8]	; (1000dd08 <ble_conn_param_update_req+0x14>)
1000dd00:	47a0      	blx	r4
	return AT_BLE_SUCCESS;
}
1000dd02:	2000      	movs	r0, #0
1000dd04:	bd10      	pop	{r4, pc}
1000dd06:	46c0      	nop			; (mov r8, r8)
1000dd08:	10010965 	.word	0x10010965

1000dd0c <ble_slave_security_request_handler>:

at_ble_status_t ble_slave_security_request_handler(void* params)
{
1000dd0c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000dd0e:	4657      	mov	r7, sl
1000dd10:	464e      	mov	r6, r9
1000dd12:	4645      	mov	r5, r8
1000dd14:	b4e0      	push	{r5, r6, r7}
1000dd16:	b084      	sub	sp, #16
1000dd18:	0004      	movs	r4, r0
	uint8_t i = 0, idx;
	at_ble_slave_sec_request_t* slave_sec_req;
	bool device_found = false;
	
	slave_sec_req = (at_ble_slave_sec_request_t*)params;	
	memset(&features, 0x00, sizeof(at_ble_pair_features_t));
1000dd1a:	2209      	movs	r2, #9
1000dd1c:	2100      	movs	r1, #0
1000dd1e:	a801      	add	r0, sp, #4
1000dd20:	4b6a      	ldr	r3, [pc, #424]	; (1000decc <ble_slave_security_request_handler+0x1c0>)
1000dd22:	4798      	blx	r3
		//@Todo Status is not handled in the Library
	//}

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == slave_sec_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000dd24:	8825      	ldrh	r5, [r4, #0]
1000dd26:	496a      	ldr	r1, [pc, #424]	; (1000ded0 <ble_slave_security_request_handler+0x1c4>)
1000dd28:	000a      	movs	r2, r1
1000dd2a:	2300      	movs	r3, #0
1000dd2c:	8910      	ldrh	r0, [r2, #8]
1000dd2e:	42a8      	cmp	r0, r5
1000dd30:	d116      	bne.n	1000dd60 <ble_slave_security_request_handler+0x54>
1000dd32:	0010      	movs	r0, r2
1000dd34:	305e      	adds	r0, #94	; 0x5e
1000dd36:	7800      	ldrb	r0, [r0, #0]
1000dd38:	2802      	cmp	r0, #2
1000dd3a:	d111      	bne.n	1000dd60 <ble_slave_security_request_handler+0x54>
		{
			device_found = true;
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_STATE;
1000dd3c:	4864      	ldr	r0, [pc, #400]	; (1000ded0 <ble_slave_security_request_handler+0x1c4>)
1000dd3e:	015a      	lsls	r2, r3, #5
1000dd40:	1ad6      	subs	r6, r2, r3
1000dd42:	00b6      	lsls	r6, r6, #2
1000dd44:	1986      	adds	r6, r0, r6
1000dd46:	365e      	adds	r6, #94	; 0x5e
1000dd48:	2206      	movs	r2, #6
1000dd4a:	7032      	strb	r2, [r6, #0]
		}
	}
	
	if (device_found)
	{
		if((ble_dev_info[idx].bond_info.auth & AT_BLE_AUTH_NO_MITM_BOND) && (slave_sec_req->bond == true))
1000dd4c:	32f9      	adds	r2, #249	; 0xf9
1000dd4e:	4013      	ands	r3, r2
1000dd50:	015a      	lsls	r2, r3, #5
1000dd52:	1ad2      	subs	r2, r2, r3
1000dd54:	0092      	lsls	r2, r2, #2
1000dd56:	1882      	adds	r2, r0, r2
1000dd58:	7d12      	ldrb	r2, [r2, #20]
1000dd5a:	07d0      	lsls	r0, r2, #31
1000dd5c:	d405      	bmi.n	1000dd6a <ble_slave_security_request_handler+0x5e>
1000dd5e:	e01b      	b.n	1000dd98 <ble_slave_security_request_handler+0x8c>
1000dd60:	3301      	adds	r3, #1
1000dd62:	327c      	adds	r2, #124	; 0x7c
		//at_ble_disconnect(slave_sec_req->handle, AT_BLE_AUTH_FAILURE);		
		//return AT_BLE_FAILURE;
		//@Todo Status is not handled in the Library
	//}

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000dd64:	2b05      	cmp	r3, #5
1000dd66:	d1e1      	bne.n	1000dd2c <ble_slave_security_request_handler+0x20>
1000dd68:	e01e      	b.n	1000dda8 <ble_slave_security_request_handler+0x9c>
		}
	}
	
	if (device_found)
	{
		if((ble_dev_info[idx].bond_info.auth & AT_BLE_AUTH_NO_MITM_BOND) && (slave_sec_req->bond == true))
1000dd6a:	78e0      	ldrb	r0, [r4, #3]
1000dd6c:	2800      	cmp	r0, #0
1000dd6e:	d013      	beq.n	1000dd98 <ble_slave_security_request_handler+0x8c>
		{
			if(at_ble_encryption_start(slave_sec_req->handle, &ble_dev_info[idx].bond_info.peer_ltk, ble_dev_info[idx].bond_info.auth) == AT_BLE_SUCCESS)
1000dd70:	0159      	lsls	r1, r3, #5
1000dd72:	1ac9      	subs	r1, r1, r3
1000dd74:	008b      	lsls	r3, r1, #2
1000dd76:	4956      	ldr	r1, [pc, #344]	; (1000ded0 <ble_slave_security_request_handler+0x1c4>)
1000dd78:	18c9      	adds	r1, r1, r3
1000dd7a:	311a      	adds	r1, #26
1000dd7c:	8820      	ldrh	r0, [r4, #0]
1000dd7e:	4b55      	ldr	r3, [pc, #340]	; (1000ded4 <ble_slave_security_request_handler+0x1c8>)
1000dd80:	4798      	blx	r3
1000dd82:	2800      	cmp	r0, #0
1000dd84:	d100      	bne.n	1000dd88 <ble_slave_security_request_handler+0x7c>
1000dd86:	e09b      	b.n	1000dec0 <ble_slave_security_request_handler+0x1b4>
			{
				return  AT_BLE_SUCCESS;
			}
			else
			{
				DBG_LOG("Encryption Not started");
1000dd88:	4853      	ldr	r0, [pc, #332]	; (1000ded8 <ble_slave_security_request_handler+0x1cc>)
1000dd8a:	4b54      	ldr	r3, [pc, #336]	; (1000dedc <ble_slave_security_request_handler+0x1d0>)
1000dd8c:	4798      	blx	r3
1000dd8e:	4854      	ldr	r0, [pc, #336]	; (1000dee0 <ble_slave_security_request_handler+0x1d4>)
1000dd90:	4b54      	ldr	r3, [pc, #336]	; (1000dee4 <ble_slave_security_request_handler+0x1d8>)
1000dd92:	4798      	blx	r3
				return AT_BLE_FAILURE;
1000dd94:	20e2      	movs	r0, #226	; 0xe2
1000dd96:	e093      	b.n	1000dec0 <ble_slave_security_request_handler+0x1b4>
			}			
		}
		else
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000dd98:	015a      	lsls	r2, r3, #5
1000dd9a:	1ad3      	subs	r3, r2, r3
1000dd9c:	009b      	lsls	r3, r3, #2
1000dd9e:	4a4c      	ldr	r2, [pc, #304]	; (1000ded0 <ble_slave_security_request_handler+0x1c4>)
1000dda0:	18d3      	adds	r3, r2, r3
1000dda2:	335e      	adds	r3, #94	; 0x5e
1000dda4:	2202      	movs	r2, #2
1000dda6:	701a      	strb	r2, [r3, #0]
		}
	}
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == slave_sec_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000dda8:	8825      	ldrh	r5, [r4, #0]
1000ddaa:	2200      	movs	r2, #0
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
		}
	}
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000ddac:	2300      	movs	r3, #0
	{
		if((ble_dev_info[idx].conn_info.handle == slave_sec_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000ddae:	0016      	movs	r6, r2
1000ddb0:	8908      	ldrh	r0, [r1, #8]
1000ddb2:	42a8      	cmp	r0, r5
1000ddb4:	d10d      	bne.n	1000ddd2 <ble_slave_security_request_handler+0xc6>
1000ddb6:	0008      	movs	r0, r1
1000ddb8:	305e      	adds	r0, #94	; 0x5e
1000ddba:	7800      	ldrb	r0, [r0, #0]
1000ddbc:	2802      	cmp	r0, #2
1000ddbe:	d108      	bne.n	1000ddd2 <ble_slave_security_request_handler+0xc6>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
1000ddc0:	0152      	lsls	r2, r2, #5
1000ddc2:	1b92      	subs	r2, r2, r6
1000ddc4:	0096      	lsls	r6, r2, #2
1000ddc6:	4a42      	ldr	r2, [pc, #264]	; (1000ded0 <ble_slave_security_request_handler+0x1c4>)
1000ddc8:	1992      	adds	r2, r2, r6
1000ddca:	325e      	adds	r2, #94	; 0x5e
1000ddcc:	2103      	movs	r1, #3
1000ddce:	7011      	strb	r1, [r2, #0]
			break;
1000ddd0:	e005      	b.n	1000ddde <ble_slave_security_request_handler+0xd2>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
		}
	}
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000ddd2:	3301      	adds	r3, #1
1000ddd4:	b2db      	uxtb	r3, r3
1000ddd6:	3201      	adds	r2, #1
1000ddd8:	317c      	adds	r1, #124	; 0x7c
1000ddda:	2b05      	cmp	r3, #5
1000dddc:	d1e7      	bne.n	1000ddae <ble_slave_security_request_handler+0xa2>
			break;
		}
	}
	
	features.desired_auth =  BLE_AUTHENTICATION_LEVEL; 
	features.bond = slave_sec_req->bond;
1000ddde:	aa01      	add	r2, sp, #4
1000dde0:	78e1      	ldrb	r1, [r4, #3]
1000dde2:	7091      	strb	r1, [r2, #2]
	features.mitm_protection = true;
1000dde4:	2101      	movs	r1, #1
1000dde6:	7051      	strb	r1, [r2, #1]
	/* Device capabilities is display only , key will be generated
	and displayed */
	features.io_cababilities = AT_BLE_IO_CAP_KB_DISPLAY;
1000dde8:	3103      	adds	r1, #3
1000ddea:	7011      	strb	r1, [r2, #0]

	features.oob_avaiable = false;
			
	/* Distribution of LTK is required */
	if (ble_dev_info[idx].conn_info.peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE)
1000ddec:	001f      	movs	r7, r3
1000ddee:	015a      	lsls	r2, r3, #5
1000ddf0:	1ad2      	subs	r2, r2, r3
1000ddf2:	0092      	lsls	r2, r2, #2
1000ddf4:	4936      	ldr	r1, [pc, #216]	; (1000ded0 <ble_slave_security_request_handler+0x1c4>)
1000ddf6:	5c52      	ldrb	r2, [r2, r1]
1000ddf8:	2a02      	cmp	r2, #2
1000ddfa:	d104      	bne.n	1000de06 <ble_slave_security_request_handler+0xfa>
	{
		features.initiator_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000ddfc:	aa01      	add	r2, sp, #4
1000ddfe:	2103      	movs	r1, #3
1000de00:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000de02:	71d1      	strb	r1, [r2, #7]
1000de04:	e003      	b.n	1000de0e <ble_slave_security_request_handler+0x102>
	}
	else
	{
		features.initiator_keys =   AT_BLE_KEY_DIST_ENC;
1000de06:	aa01      	add	r2, sp, #4
1000de08:	2101      	movs	r1, #1
1000de0a:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   AT_BLE_KEY_DIST_ENC;
1000de0c:	71d1      	strb	r1, [r2, #7]
	}
	features.max_key_size = 16;
1000de0e:	aa01      	add	r2, sp, #4
1000de10:	2110      	movs	r1, #16
1000de12:	7151      	strb	r1, [r2, #5]
	features.min_key_size = 16;
1000de14:	7111      	strb	r1, [r2, #4]
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
1000de16:	017a      	lsls	r2, r7, #5
1000de18:	1bd2      	subs	r2, r2, r7
1000de1a:	0092      	lsls	r2, r2, #2
1000de1c:	492c      	ldr	r1, [pc, #176]	; (1000ded0 <ble_slave_security_request_handler+0x1c4>)
1000de1e:	188a      	adds	r2, r1, r2
1000de20:	7e12      	ldrb	r2, [r2, #24]
1000de22:	2a40      	cmp	r2, #64	; 0x40
1000de24:	d134      	bne.n	1000de90 <ble_slave_security_request_handler+0x184>
1000de26:	015a      	lsls	r2, r3, #5
1000de28:	1ad3      	subs	r3, r2, r3
1000de2a:	009b      	lsls	r3, r3, #2
1000de2c:	469a      	mov	sl, r3
1000de2e:	001e      	movs	r6, r3
1000de30:	3660      	adds	r6, #96	; 0x60
1000de32:	1876      	adds	r6, r6, r1
1000de34:	4655      	mov	r5, sl
1000de36:	3568      	adds	r5, #104	; 0x68
1000de38:	186d      	adds	r5, r5, r1
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
		{			
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000de3a:	4b2b      	ldr	r3, [pc, #172]	; (1000dee8 <ble_slave_security_request_handler+0x1dc>)
1000de3c:	4699      	mov	r9, r3
1000de3e:	230f      	movs	r3, #15
1000de40:	4698      	mov	r8, r3
1000de42:	47c8      	blx	r9
1000de44:	4643      	mov	r3, r8
1000de46:	4018      	ands	r0, r3
1000de48:	7030      	strb	r0, [r6, #0]
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
1000de4a:	47c8      	blx	r9
1000de4c:	4643      	mov	r3, r8
1000de4e:	4018      	ands	r0, r3
1000de50:	74b0      	strb	r0, [r6, #18]
1000de52:	3601      	adds	r6, #1
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
1000de54:	42ae      	cmp	r6, r5
1000de56:	d1f4      	bne.n	1000de42 <ble_slave_security_request_handler+0x136>
1000de58:	4656      	mov	r6, sl
1000de5a:	3670      	adds	r6, #112	; 0x70
1000de5c:	4a1c      	ldr	r2, [pc, #112]	; (1000ded0 <ble_slave_security_request_handler+0x1c4>)
1000de5e:	18b6      	adds	r6, r6, r2
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000de60:	4b21      	ldr	r3, [pc, #132]	; (1000dee8 <ble_slave_security_request_handler+0x1dc>)
1000de62:	4699      	mov	r9, r3
1000de64:	230f      	movs	r3, #15
1000de66:	4698      	mov	r8, r3
1000de68:	47c8      	blx	r9
1000de6a:	4643      	mov	r3, r8
1000de6c:	4018      	ands	r0, r3
1000de6e:	7028      	strb	r0, [r5, #0]
1000de70:	3501      	adds	r5, #1
		{			
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
1000de72:	42b5      	cmp	r5, r6
1000de74:	d1f8      	bne.n	1000de68 <ble_slave_security_request_handler+0x15c>
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
		}
		
		ble_dev_info[idx].host_ltk.ediv = rand()&0xffff;
1000de76:	4b1c      	ldr	r3, [pc, #112]	; (1000dee8 <ble_slave_security_request_handler+0x1dc>)
1000de78:	4798      	blx	r3
1000de7a:	017b      	lsls	r3, r7, #5
1000de7c:	1bdb      	subs	r3, r3, r7
1000de7e:	009b      	lsls	r3, r3, #2
1000de80:	4a13      	ldr	r2, [pc, #76]	; (1000ded0 <ble_slave_security_request_handler+0x1c4>)
1000de82:	18d3      	adds	r3, r2, r3
1000de84:	001a      	movs	r2, r3
1000de86:	3270      	adds	r2, #112	; 0x70
1000de88:	8010      	strh	r0, [r2, #0]
		ble_dev_info[idx].host_ltk.key_size = 16;
1000de8a:	337a      	adds	r3, #122	; 0x7a
1000de8c:	2210      	movs	r2, #16
1000de8e:	701a      	strb	r2, [r3, #0]
	{
		/* Bonding information already exists */
		
	}

	if(at_ble_authenticate(slave_sec_req->handle, &features, &ble_dev_info[idx].host_ltk, NULL) != AT_BLE_SUCCESS)
1000de90:	017a      	lsls	r2, r7, #5
1000de92:	1bd7      	subs	r7, r2, r7
1000de94:	00bf      	lsls	r7, r7, #2
1000de96:	3760      	adds	r7, #96	; 0x60
1000de98:	4a0d      	ldr	r2, [pc, #52]	; (1000ded0 <ble_slave_security_request_handler+0x1c4>)
1000de9a:	18ba      	adds	r2, r7, r2
1000de9c:	8820      	ldrh	r0, [r4, #0]
1000de9e:	2300      	movs	r3, #0
1000dea0:	a901      	add	r1, sp, #4
1000dea2:	4c12      	ldr	r4, [pc, #72]	; (1000deec <ble_slave_security_request_handler+0x1e0>)
1000dea4:	47a0      	blx	r4
1000dea6:	2800      	cmp	r0, #0
1000dea8:	d00a      	beq.n	1000dec0 <ble_slave_security_request_handler+0x1b4>
	{
		features.bond = false;
1000deaa:	ab01      	add	r3, sp, #4
1000deac:	2200      	movs	r2, #0
1000deae:	709a      	strb	r2, [r3, #2]
		features.mitm_protection = false;
1000deb0:	705a      	strb	r2, [r3, #1]
		DBG_LOG("Slave Security Req - Authentication Failed");
1000deb2:	4809      	ldr	r0, [pc, #36]	; (1000ded8 <ble_slave_security_request_handler+0x1cc>)
1000deb4:	4b09      	ldr	r3, [pc, #36]	; (1000dedc <ble_slave_security_request_handler+0x1d0>)
1000deb6:	4798      	blx	r3
1000deb8:	480d      	ldr	r0, [pc, #52]	; (1000def0 <ble_slave_security_request_handler+0x1e4>)
1000deba:	4b0a      	ldr	r3, [pc, #40]	; (1000dee4 <ble_slave_security_request_handler+0x1d8>)
1000debc:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000debe:	20e2      	movs	r0, #226	; 0xe2
	}
	return AT_BLE_SUCCESS;
}
1000dec0:	b004      	add	sp, #16
1000dec2:	bc1c      	pop	{r2, r3, r4}
1000dec4:	4690      	mov	r8, r2
1000dec6:	4699      	mov	r9, r3
1000dec8:	46a2      	mov	sl, r4
1000deca:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000decc:	10015115 	.word	0x10015115
1000ded0:	1001a1a8 	.word	0x1001a1a8
1000ded4:	10011529 	.word	0x10011529
1000ded8:	10016528 	.word	0x10016528
1000dedc:	1001537d 	.word	0x1001537d
1000dee0:	10017998 	.word	0x10017998
1000dee4:	1001525d 	.word	0x1001525d
1000dee8:	10015391 	.word	0x10015391
1000deec:	1001133d 	.word	0x1001133d
1000def0:	100179b0 	.word	0x100179b0

1000def4 <ble_pair_request_handler>:

/** @brief function handles pair request */
at_ble_status_t ble_pair_request_handler(void *params)
{
1000def4:	b5f0      	push	{r4, r5, r6, r7, lr}
1000def6:	465f      	mov	r7, fp
1000def8:	4656      	mov	r6, sl
1000defa:	464d      	mov	r5, r9
1000defc:	4644      	mov	r4, r8
1000defe:	b4f0      	push	{r4, r5, r6, r7}
1000df00:	b085      	sub	sp, #20
1000df02:	4680      	mov	r8, r0
	at_ble_pair_request_t* pair_req;
	pair_req = (at_ble_pair_request_t*)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == pair_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000df04:	8804      	ldrh	r4, [r0, #0]
1000df06:	4a54      	ldr	r2, [pc, #336]	; (1000e058 <ble_pair_request_handler+0x164>)
1000df08:	2100      	movs	r1, #0
	at_ble_pair_features_t features;
	uint8_t i = 0, idx;
	at_ble_pair_request_t* pair_req;
	pair_req = (at_ble_pair_request_t*)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000df0a:	2300      	movs	r3, #0
	{
		if((ble_dev_info[idx].conn_info.handle == pair_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000df0c:	8910      	ldrh	r0, [r2, #8]
1000df0e:	42a0      	cmp	r0, r4
1000df10:	d10d      	bne.n	1000df2e <ble_pair_request_handler+0x3a>
1000df12:	0010      	movs	r0, r2
1000df14:	305e      	adds	r0, #94	; 0x5e
1000df16:	7800      	ldrb	r0, [r0, #0]
1000df18:	2802      	cmp	r0, #2
1000df1a:	d108      	bne.n	1000df2e <ble_pair_request_handler+0x3a>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
1000df1c:	014a      	lsls	r2, r1, #5
1000df1e:	1a52      	subs	r2, r2, r1
1000df20:	0095      	lsls	r5, r2, #2
1000df22:	4a4d      	ldr	r2, [pc, #308]	; (1000e058 <ble_pair_request_handler+0x164>)
1000df24:	1952      	adds	r2, r2, r5
1000df26:	325e      	adds	r2, #94	; 0x5e
1000df28:	2103      	movs	r1, #3
1000df2a:	7011      	strb	r1, [r2, #0]
			break;
1000df2c:	e005      	b.n	1000df3a <ble_pair_request_handler+0x46>
	at_ble_pair_features_t features;
	uint8_t i = 0, idx;
	at_ble_pair_request_t* pair_req;
	pair_req = (at_ble_pair_request_t*)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000df2e:	3301      	adds	r3, #1
1000df30:	b2db      	uxtb	r3, r3
1000df32:	3101      	adds	r1, #1
1000df34:	327c      	adds	r2, #124	; 0x7c
1000df36:	2b05      	cmp	r3, #5
1000df38:	d1e8      	bne.n	1000df0c <ble_pair_request_handler+0x18>
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
			break;
		}
	}
	
	features.desired_auth =  BLE_AUTHENTICATION_LEVEL; 
1000df3a:	aa01      	add	r2, sp, #4
1000df3c:	2100      	movs	r1, #0
1000df3e:	7211      	strb	r1, [r2, #8]
	features.bond = BLE_BOND_REQ;
1000df40:	7091      	strb	r1, [r2, #2]
	features.mitm_protection = BLE_MITM_REQ;
1000df42:	7051      	strb	r1, [r2, #1]
	/* Device capabilities is display only , key will be generated
	and displayed */
	features.io_cababilities = BLE_IO_CAPABALITIES;
1000df44:	2003      	movs	r0, #3
1000df46:	7010      	strb	r0, [r2, #0]
	features.oob_avaiable = BLE_OOB_REQ;
1000df48:	70d1      	strb	r1, [r2, #3]
	
	/* Distribution of LTK is required */
	if (ble_dev_info[idx].conn_info.peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE)
1000df4a:	001e      	movs	r6, r3
1000df4c:	015a      	lsls	r2, r3, #5
1000df4e:	1ad2      	subs	r2, r2, r3
1000df50:	0092      	lsls	r2, r2, #2
1000df52:	4941      	ldr	r1, [pc, #260]	; (1000e058 <ble_pair_request_handler+0x164>)
1000df54:	5c52      	ldrb	r2, [r2, r1]
1000df56:	2a02      	cmp	r2, #2
1000df58:	d104      	bne.n	1000df64 <ble_pair_request_handler+0x70>
	{
		/* Distribution of IRK is required */
		features.initiator_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000df5a:	aa01      	add	r2, sp, #4
1000df5c:	2103      	movs	r1, #3
1000df5e:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000df60:	71d1      	strb	r1, [r2, #7]
1000df62:	e003      	b.n	1000df6c <ble_pair_request_handler+0x78>
	}
	else
	{
		features.initiator_keys =   AT_BLE_KEY_DIST_ENC;
1000df64:	aa01      	add	r2, sp, #4
1000df66:	2101      	movs	r1, #1
1000df68:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   AT_BLE_KEY_DIST_ENC;
1000df6a:	71d1      	strb	r1, [r2, #7]
	}
			
	features.max_key_size = 16;
1000df6c:	aa01      	add	r2, sp, #4
1000df6e:	2110      	movs	r1, #16
1000df70:	7151      	strb	r1, [r2, #5]
	features.min_key_size = 16;
1000df72:	7111      	strb	r1, [r2, #4]
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
1000df74:	0172      	lsls	r2, r6, #5
1000df76:	1b92      	subs	r2, r2, r6
1000df78:	0092      	lsls	r2, r2, #2
1000df7a:	4937      	ldr	r1, [pc, #220]	; (1000e058 <ble_pair_request_handler+0x164>)
1000df7c:	188a      	adds	r2, r1, r2
1000df7e:	7e12      	ldrb	r2, [r2, #24]
1000df80:	2a40      	cmp	r2, #64	; 0x40
1000df82:	d142      	bne.n	1000e00a <ble_pair_request_handler+0x116>
1000df84:	015f      	lsls	r7, r3, #5
1000df86:	1afb      	subs	r3, r7, r3
1000df88:	009b      	lsls	r3, r3, #2
1000df8a:	469b      	mov	fp, r3
1000df8c:	001c      	movs	r4, r3
1000df8e:	3460      	adds	r4, #96	; 0x60
1000df90:	1864      	adds	r4, r4, r1
1000df92:	465d      	mov	r5, fp
1000df94:	3568      	adds	r5, #104	; 0x68
1000df96:	186d      	adds	r5, r5, r1
1000df98:	0027      	movs	r7, r4
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
		{						
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000df9a:	4b30      	ldr	r3, [pc, #192]	; (1000e05c <ble_pair_request_handler+0x168>)
1000df9c:	469a      	mov	sl, r3
1000df9e:	230f      	movs	r3, #15
1000dfa0:	4699      	mov	r9, r3
1000dfa2:	47d0      	blx	sl
1000dfa4:	464b      	mov	r3, r9
1000dfa6:	4018      	ands	r0, r3
1000dfa8:	7038      	strb	r0, [r7, #0]
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
1000dfaa:	47d0      	blx	sl
1000dfac:	464b      	mov	r3, r9
1000dfae:	4018      	ands	r0, r3
1000dfb0:	74b8      	strb	r0, [r7, #18]
1000dfb2:	3701      	adds	r7, #1
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
1000dfb4:	42af      	cmp	r7, r5
1000dfb6:	d1f4      	bne.n	1000dfa2 <ble_pair_request_handler+0xae>
1000dfb8:	465b      	mov	r3, fp
1000dfba:	3370      	adds	r3, #112	; 0x70
1000dfbc:	4f26      	ldr	r7, [pc, #152]	; (1000e058 <ble_pair_request_handler+0x164>)
1000dfbe:	19df      	adds	r7, r3, r7
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000dfc0:	4b26      	ldr	r3, [pc, #152]	; (1000e05c <ble_pair_request_handler+0x168>)
1000dfc2:	469a      	mov	sl, r3
1000dfc4:	230f      	movs	r3, #15
1000dfc6:	4699      	mov	r9, r3
1000dfc8:	47d0      	blx	sl
1000dfca:	464b      	mov	r3, r9
1000dfcc:	4018      	ands	r0, r3
1000dfce:	7028      	strb	r0, [r5, #0]
1000dfd0:	3501      	adds	r5, #1
		{						
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
1000dfd2:	42bd      	cmp	r5, r7
1000dfd4:	d1f8      	bne.n	1000dfc8 <ble_pair_request_handler+0xd4>
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
		}
		DBG_LOG_DEV("Generated LTK: ");
1000dfd6:	4822      	ldr	r0, [pc, #136]	; (1000e060 <ble_pair_request_handler+0x16c>)
1000dfd8:	4b22      	ldr	r3, [pc, #136]	; (1000e064 <ble_pair_request_handler+0x170>)
1000dfda:	4798      	blx	r3
1000dfdc:	4822      	ldr	r0, [pc, #136]	; (1000e068 <ble_pair_request_handler+0x174>)
1000dfde:	4b23      	ldr	r3, [pc, #140]	; (1000e06c <ble_pair_request_handler+0x178>)
1000dfe0:	4798      	blx	r3
		for (i = 0; i < 16; i++)
		{
			DBG_LOG_CONT_DEV("0x%02X ", ble_dev_info[idx].host_ltk.key[i]);
1000dfe2:	4d22      	ldr	r5, [pc, #136]	; (1000e06c <ble_pair_request_handler+0x178>)
1000dfe4:	7821      	ldrb	r1, [r4, #0]
1000dfe6:	4822      	ldr	r0, [pc, #136]	; (1000e070 <ble_pair_request_handler+0x17c>)
1000dfe8:	47a8      	blx	r5
1000dfea:	3401      	adds	r4, #1
		for(i=8 ; i<16 ;i++)
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
		}
		DBG_LOG_DEV("Generated LTK: ");
		for (i = 0; i < 16; i++)
1000dfec:	42bc      	cmp	r4, r7
1000dfee:	d1f9      	bne.n	1000dfe4 <ble_pair_request_handler+0xf0>
		{
			DBG_LOG_CONT_DEV("0x%02X ", ble_dev_info[idx].host_ltk.key[i]);
		}
		
		ble_dev_info[idx].host_ltk.ediv = rand()&0xffff;
1000dff0:	4b1a      	ldr	r3, [pc, #104]	; (1000e05c <ble_pair_request_handler+0x168>)
1000dff2:	4798      	blx	r3
1000dff4:	0173      	lsls	r3, r6, #5
1000dff6:	1b9b      	subs	r3, r3, r6
1000dff8:	009b      	lsls	r3, r3, #2
1000dffa:	4a17      	ldr	r2, [pc, #92]	; (1000e058 <ble_pair_request_handler+0x164>)
1000dffc:	18d3      	adds	r3, r2, r3
1000dffe:	001a      	movs	r2, r3
1000e000:	3270      	adds	r2, #112	; 0x70
1000e002:	8010      	strh	r0, [r2, #0]
		ble_dev_info[idx].host_ltk.key_size = 16;
1000e004:	337a      	adds	r3, #122	; 0x7a
1000e006:	2210      	movs	r2, #16
1000e008:	701a      	strb	r2, [r3, #0]
		/* Bonding information already exists */
		
	}

	/* Send pairing response */
	DBG_LOG_DEV("Sending pairing response");
1000e00a:	4815      	ldr	r0, [pc, #84]	; (1000e060 <ble_pair_request_handler+0x16c>)
1000e00c:	4b15      	ldr	r3, [pc, #84]	; (1000e064 <ble_pair_request_handler+0x170>)
1000e00e:	4798      	blx	r3
1000e010:	4818      	ldr	r0, [pc, #96]	; (1000e074 <ble_pair_request_handler+0x180>)
1000e012:	4b16      	ldr	r3, [pc, #88]	; (1000e06c <ble_pair_request_handler+0x178>)
1000e014:	4798      	blx	r3

	if(at_ble_authenticate(pair_req->handle, &features, &ble_dev_info[idx].host_ltk, NULL) != AT_BLE_SUCCESS)
1000e016:	0173      	lsls	r3, r6, #5
1000e018:	1b9b      	subs	r3, r3, r6
1000e01a:	009b      	lsls	r3, r3, #2
1000e01c:	3360      	adds	r3, #96	; 0x60
1000e01e:	4a0e      	ldr	r2, [pc, #56]	; (1000e058 <ble_pair_request_handler+0x164>)
1000e020:	189a      	adds	r2, r3, r2
1000e022:	4643      	mov	r3, r8
1000e024:	8818      	ldrh	r0, [r3, #0]
1000e026:	2300      	movs	r3, #0
1000e028:	a901      	add	r1, sp, #4
1000e02a:	4c13      	ldr	r4, [pc, #76]	; (1000e078 <ble_pair_request_handler+0x184>)
1000e02c:	47a0      	blx	r4
1000e02e:	2800      	cmp	r0, #0
1000e030:	d00a      	beq.n	1000e048 <ble_pair_request_handler+0x154>
	{
		features.bond = false;
1000e032:	ab01      	add	r3, sp, #4
1000e034:	2200      	movs	r2, #0
1000e036:	709a      	strb	r2, [r3, #2]
		features.mitm_protection = false;
1000e038:	705a      	strb	r2, [r3, #1]
		DBG_LOG("Pair Request - Authentication Failed");
1000e03a:	4809      	ldr	r0, [pc, #36]	; (1000e060 <ble_pair_request_handler+0x16c>)
1000e03c:	4b09      	ldr	r3, [pc, #36]	; (1000e064 <ble_pair_request_handler+0x170>)
1000e03e:	4798      	blx	r3
1000e040:	480e      	ldr	r0, [pc, #56]	; (1000e07c <ble_pair_request_handler+0x188>)
1000e042:	4b0a      	ldr	r3, [pc, #40]	; (1000e06c <ble_pair_request_handler+0x178>)
1000e044:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000e046:	20e2      	movs	r0, #226	; 0xe2
	}
	return AT_BLE_SUCCESS;
}
1000e048:	b005      	add	sp, #20
1000e04a:	bc3c      	pop	{r2, r3, r4, r5}
1000e04c:	4690      	mov	r8, r2
1000e04e:	4699      	mov	r9, r3
1000e050:	46a2      	mov	sl, r4
1000e052:	46ab      	mov	fp, r5
1000e054:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000e056:	46c0      	nop			; (mov r8, r8)
1000e058:	1001a1a8 	.word	0x1001a1a8
1000e05c:	10015391 	.word	0x10015391
1000e060:	10016528 	.word	0x10016528
1000e064:	1001537d 	.word	0x1001537d
1000e068:	100179dc 	.word	0x100179dc
1000e06c:	1001525d 	.word	0x1001525d
1000e070:	100179ec 	.word	0x100179ec
1000e074:	100179f4 	.word	0x100179f4
1000e078:	1001133d 	.word	0x1001133d
1000e07c:	10017a10 	.word	0x10017a10

1000e080 <ble_pair_key_request_handler>:

/** @brief function handles pair key request */
at_ble_status_t ble_pair_key_request_handler (void *params)
{
1000e080:	b5f0      	push	{r4, r5, r6, r7, lr}
1000e082:	b085      	sub	sp, #20
1000e084:	0005      	movs	r5, r0
	at_ble_pair_key_request_t *pair_key;
	pair_key = (at_ble_pair_key_request_t *)params;
	/* Passkey has fixed value in this example MSB */
	uint8_t passkey[6]={'1','2','3','4','5','6'};
1000e086:	2206      	movs	r2, #6
1000e088:	493d      	ldr	r1, [pc, #244]	; (1000e180 <ble_pair_key_request_handler+0x100>)
1000e08a:	a802      	add	r0, sp, #8
1000e08c:	4e3d      	ldr	r6, [pc, #244]	; (1000e184 <ble_pair_key_request_handler+0x104>)
1000e08e:	47b0      	blx	r6
	uint8_t idx = 0;
        uint8_t pin;
        
	at_ble_pair_key_request_t pair_key_request;
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
1000e090:	ac01      	add	r4, sp, #4
1000e092:	2204      	movs	r2, #4
1000e094:	0029      	movs	r1, r5
1000e096:	0020      	movs	r0, r4
1000e098:	47b0      	blx	r6
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
1000e09a:	78e3      	ldrb	r3, [r4, #3]
1000e09c:	2b00      	cmp	r3, #0
1000e09e:	d162      	bne.n	1000e166 <ble_pair_key_request_handler+0xe6>
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
1000e0a0:	4839      	ldr	r0, [pc, #228]	; (1000e188 <ble_pair_key_request_handler+0x108>)
1000e0a2:	4b3a      	ldr	r3, [pc, #232]	; (1000e18c <ble_pair_key_request_handler+0x10c>)
1000e0a4:	4798      	blx	r3
1000e0a6:	483a      	ldr	r0, [pc, #232]	; (1000e190 <ble_pair_key_request_handler+0x110>)
1000e0a8:	4b3a      	ldr	r3, [pc, #232]	; (1000e194 <ble_pair_key_request_handler+0x114>)
1000e0aa:	4798      	blx	r3
1000e0ac:	2600      	movs	r6, #0
		for (idx = 0; idx < 6;) {          
			pin = getchar_b11_timeout(CHECK_PAIRING_KEY_TIME_OUT);
1000e0ae:	4c3a      	ldr	r4, [pc, #232]	; (1000e198 <ble_pair_key_request_handler+0x118>)
				return AT_BLE_FAILURE;
			}
			
			if ((pin >= '0') && ( pin <= '9')) {
			  passkey[idx++] = pin;
			  DBG_LOG_CONT("%c", pin);
1000e0b0:	27ff      	movs	r7, #255	; 0xff
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
		for (idx = 0; idx < 6;) {          
			pin = getchar_b11_timeout(CHECK_PAIRING_KEY_TIME_OUT);
1000e0b2:	201e      	movs	r0, #30
1000e0b4:	47a0      	blx	r4
1000e0b6:	b2c3      	uxtb	r3, r0

			if (!pin) {
1000e0b8:	2b00      	cmp	r3, #0
1000e0ba:	d11a      	bne.n	1000e0f2 <ble_pair_key_request_handler+0x72>
			DBG_LOG("Pin Timeout");
1000e0bc:	4f32      	ldr	r7, [pc, #200]	; (1000e188 <ble_pair_key_request_handler+0x108>)
1000e0be:	0038      	movs	r0, r7
1000e0c0:	4e32      	ldr	r6, [pc, #200]	; (1000e18c <ble_pair_key_request_handler+0x10c>)
1000e0c2:	47b0      	blx	r6
1000e0c4:	4835      	ldr	r0, [pc, #212]	; (1000e19c <ble_pair_key_request_handler+0x11c>)
1000e0c6:	4c33      	ldr	r4, [pc, #204]	; (1000e194 <ble_pair_key_request_handler+0x114>)
1000e0c8:	47a0      	blx	r4
				DBG_LOG("Disconnecting ...");
1000e0ca:	0038      	movs	r0, r7
1000e0cc:	47b0      	blx	r6
1000e0ce:	4834      	ldr	r0, [pc, #208]	; (1000e1a0 <ble_pair_key_request_handler+0x120>)
1000e0d0:	47a0      	blx	r4
				if (!(at_ble_disconnect(pair_key->handle,
1000e0d2:	8828      	ldrh	r0, [r5, #0]
1000e0d4:	2113      	movs	r1, #19
1000e0d6:	4b33      	ldr	r3, [pc, #204]	; (1000e1a4 <ble_pair_key_request_handler+0x124>)
1000e0d8:	4798      	blx	r3
1000e0da:	0003      	movs	r3, r0
							AT_BLE_TERMINATED_BY_USER) == AT_BLE_SUCCESS)) {
					DBG_LOG("Disconnect Request Failed");
				}
				return AT_BLE_FAILURE;
1000e0dc:	20e2      	movs	r0, #226	; 0xe2
			pin = getchar_b11_timeout(CHECK_PAIRING_KEY_TIME_OUT);

			if (!pin) {
			DBG_LOG("Pin Timeout");
				DBG_LOG("Disconnecting ...");
				if (!(at_ble_disconnect(pair_key->handle,
1000e0de:	2b00      	cmp	r3, #0
1000e0e0:	d04c      	beq.n	1000e17c <ble_pair_key_request_handler+0xfc>
							AT_BLE_TERMINATED_BY_USER) == AT_BLE_SUCCESS)) {
					DBG_LOG("Disconnect Request Failed");
1000e0e2:	4829      	ldr	r0, [pc, #164]	; (1000e188 <ble_pair_key_request_handler+0x108>)
1000e0e4:	4b29      	ldr	r3, [pc, #164]	; (1000e18c <ble_pair_key_request_handler+0x10c>)
1000e0e6:	4798      	blx	r3
1000e0e8:	482f      	ldr	r0, [pc, #188]	; (1000e1a8 <ble_pair_key_request_handler+0x128>)
1000e0ea:	4b2a      	ldr	r3, [pc, #168]	; (1000e194 <ble_pair_key_request_handler+0x114>)
1000e0ec:	4798      	blx	r3
				}
				return AT_BLE_FAILURE;
1000e0ee:	20e2      	movs	r0, #226	; 0xe2
1000e0f0:	e044      	b.n	1000e17c <ble_pair_key_request_handler+0xfc>
			}
			
			if ((pin >= '0') && ( pin <= '9')) {
1000e0f2:	001a      	movs	r2, r3
1000e0f4:	3a30      	subs	r2, #48	; 0x30
1000e0f6:	2a09      	cmp	r2, #9
1000e0f8:	d8db      	bhi.n	1000e0b2 <ble_pair_key_request_handler+0x32>
			  passkey[idx++] = pin;
1000e0fa:	aa02      	add	r2, sp, #8
1000e0fc:	54b3      	strb	r3, [r6, r2]
			  DBG_LOG_CONT("%c", pin);
1000e0fe:	4038      	ands	r0, r7
1000e100:	4b2a      	ldr	r3, [pc, #168]	; (1000e1ac <ble_pair_key_request_handler+0x12c>)
1000e102:	4798      	blx	r3
1000e104:	3601      	adds	r6, #1
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
		for (idx = 0; idx < 6;) {          
1000e106:	2e06      	cmp	r6, #6
1000e108:	d026      	beq.n	1000e158 <ble_pair_key_request_handler+0xd8>
1000e10a:	e7d2      	b.n	1000e0b2 <ble_pair_key_request_handler+0x32>
          {
            DBG_LOG("Entered Pass-code:");
          }
          else
          {
            DBG_LOG("Please Enter the following Pass-code(on other Device):");
1000e10c:	481e      	ldr	r0, [pc, #120]	; (1000e188 <ble_pair_key_request_handler+0x108>)
1000e10e:	4b1f      	ldr	r3, [pc, #124]	; (1000e18c <ble_pair_key_request_handler+0x10c>)
1000e110:	4798      	blx	r3
1000e112:	4827      	ldr	r0, [pc, #156]	; (1000e1b0 <ble_pair_key_request_handler+0x130>)
1000e114:	4b1f      	ldr	r3, [pc, #124]	; (1000e194 <ble_pair_key_request_handler+0x114>)
1000e116:	4798      	blx	r3
	at_ble_pair_key_request_t pair_key_request;
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
1000e118:	2400      	movs	r4, #0
          
          /* Convert passkey to ASCII format */
          for(idx=0; idx<AT_BLE_PASSKEY_LEN; idx++)
          {
                  passkey[idx] = (passkey[idx]);
                  DBG_LOG_CONT("%c",passkey[idx]);
1000e11a:	4e24      	ldr	r6, [pc, #144]	; (1000e1ac <ble_pair_key_request_handler+0x12c>)
          }
          
          /* Convert passkey to ASCII format */
          for(idx=0; idx<AT_BLE_PASSKEY_LEN; idx++)
          {
                  passkey[idx] = (passkey[idx]);
1000e11c:	ab02      	add	r3, sp, #8
                  DBG_LOG_CONT("%c",passkey[idx]);
1000e11e:	5ce0      	ldrb	r0, [r4, r3]
1000e120:	47b0      	blx	r6
1000e122:	3401      	adds	r4, #1
          {
            DBG_LOG("Please Enter the following Pass-code(on other Device):");
          }
          
          /* Convert passkey to ASCII format */
          for(idx=0; idx<AT_BLE_PASSKEY_LEN; idx++)
1000e124:	2c06      	cmp	r4, #6
1000e126:	d1f9      	bne.n	1000e11c <ble_pair_key_request_handler+0x9c>
          {
                  passkey[idx] = (passkey[idx]);
                  DBG_LOG_CONT("%c",passkey[idx]);
          }		
          
          if(!((at_ble_pair_key_reply(pair_key->handle, pair_key_request.type, passkey)) == AT_BLE_SUCCESS))
1000e128:	ab01      	add	r3, sp, #4
1000e12a:	7899      	ldrb	r1, [r3, #2]
1000e12c:	8828      	ldrh	r0, [r5, #0]
1000e12e:	aa02      	add	r2, sp, #8
1000e130:	4b20      	ldr	r3, [pc, #128]	; (1000e1b4 <ble_pair_key_request_handler+0x134>)
1000e132:	4798      	blx	r3
1000e134:	2800      	cmp	r0, #0
1000e136:	d021      	beq.n	1000e17c <ble_pair_key_request_handler+0xfc>
          {
                  DBG_LOG("Pair-key reply failed");
1000e138:	4813      	ldr	r0, [pc, #76]	; (1000e188 <ble_pair_key_request_handler+0x108>)
1000e13a:	4b14      	ldr	r3, [pc, #80]	; (1000e18c <ble_pair_key_request_handler+0x10c>)
1000e13c:	4798      	blx	r3
1000e13e:	481e      	ldr	r0, [pc, #120]	; (1000e1b8 <ble_pair_key_request_handler+0x138>)
1000e140:	4b14      	ldr	r3, [pc, #80]	; (1000e194 <ble_pair_key_request_handler+0x114>)
1000e142:	4798      	blx	r3
		if(pair_key_request.type == AT_BLE_PAIR_OOB)
		{
			DBG_LOG("OOB Feature Not supported");
		}
	}
	return AT_BLE_SUCCESS;	
1000e144:	2000      	movs	r0, #0
1000e146:	e019      	b.n	1000e17c <ble_pair_key_request_handler+0xfc>
	}
	else 
	{
		if(pair_key_request.type == AT_BLE_PAIR_OOB)
		{
			DBG_LOG("OOB Feature Not supported");
1000e148:	480f      	ldr	r0, [pc, #60]	; (1000e188 <ble_pair_key_request_handler+0x108>)
1000e14a:	4b10      	ldr	r3, [pc, #64]	; (1000e18c <ble_pair_key_request_handler+0x10c>)
1000e14c:	4798      	blx	r3
1000e14e:	481b      	ldr	r0, [pc, #108]	; (1000e1bc <ble_pair_key_request_handler+0x13c>)
1000e150:	4b10      	ldr	r3, [pc, #64]	; (1000e194 <ble_pair_key_request_handler+0x114>)
1000e152:	4798      	blx	r3
		}
	}
	return AT_BLE_SUCCESS;	
1000e154:	2000      	movs	r0, #0
1000e156:	e011      	b.n	1000e17c <ble_pair_key_request_handler+0xfc>
	if(((pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_DISPLAY) &&
	   (pair_key_request.type == AT_BLE_PAIR_PASSKEY)) || (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY))
	{
          if(pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY)
          {
            DBG_LOG("Entered Pass-code:");
1000e158:	480b      	ldr	r0, [pc, #44]	; (1000e188 <ble_pair_key_request_handler+0x108>)
1000e15a:	4b0c      	ldr	r3, [pc, #48]	; (1000e18c <ble_pair_key_request_handler+0x10c>)
1000e15c:	4798      	blx	r3
1000e15e:	4818      	ldr	r0, [pc, #96]	; (1000e1c0 <ble_pair_key_request_handler+0x140>)
1000e160:	4b0c      	ldr	r3, [pc, #48]	; (1000e194 <ble_pair_key_request_handler+0x114>)
1000e162:	4798      	blx	r3
1000e164:	e7d8      	b.n	1000e118 <ble_pair_key_request_handler+0x98>
			} 
	  }
	}	
	
	/* Display passkey */
	if(((pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_DISPLAY) &&
1000e166:	ab01      	add	r3, sp, #4
1000e168:	885a      	ldrh	r2, [r3, #2]
1000e16a:	2380      	movs	r3, #128	; 0x80
1000e16c:	005b      	lsls	r3, r3, #1
1000e16e:	429a      	cmp	r2, r3
1000e170:	d0cc      	beq.n	1000e10c <ble_pair_key_request_handler+0x8c>
                  DBG_LOG("Pair-key reply failed");
          }
	}
	else 
	{
		if(pair_key_request.type == AT_BLE_PAIR_OOB)
1000e172:	ab01      	add	r3, sp, #4
1000e174:	789b      	ldrb	r3, [r3, #2]
1000e176:	2b01      	cmp	r3, #1
1000e178:	d0e6      	beq.n	1000e148 <ble_pair_key_request_handler+0xc8>
		{
			DBG_LOG("OOB Feature Not supported");
		}
	}
	return AT_BLE_SUCCESS;	
1000e17a:	2000      	movs	r0, #0
}
1000e17c:	b005      	add	sp, #20
1000e17e:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000e180:	100175f8 	.word	0x100175f8
1000e184:	10015103 	.word	0x10015103
1000e188:	10016528 	.word	0x10016528
1000e18c:	1001537d 	.word	0x1001537d
1000e190:	10017a38 	.word	0x10017a38
1000e194:	1001525d 	.word	0x1001525d
1000e198:	1000ee9d 	.word	0x1000ee9d
1000e19c:	10017a60 	.word	0x10017a60
1000e1a0:	10017a6c 	.word	0x10017a6c
1000e1a4:	10010945 	.word	0x10010945
1000e1a8:	10017918 	.word	0x10017918
1000e1ac:	10015291 	.word	0x10015291
1000e1b0:	10017a80 	.word	0x10017a80
1000e1b4:	1001146d 	.word	0x1001146d
1000e1b8:	10017ab8 	.word	0x10017ab8
1000e1bc:	10017ad0 	.word	0x10017ad0
1000e1c0:	10017aec 	.word	0x10017aec

1000e1c4 <ble_encryption_request_handler>:
	return AT_BLE_SUCCESS;
}

/** @brief function handles encryption requests */
at_ble_status_t ble_encryption_request_handler(void *params)
{
1000e1c4:	b5f0      	push	{r4, r5, r6, r7, lr}
1000e1c6:	465f      	mov	r7, fp
1000e1c8:	4656      	mov	r6, sl
1000e1ca:	464d      	mov	r5, r9
1000e1cc:	b4e0      	push	{r5, r6, r7}
1000e1ce:	0006      	movs	r6, r0
	uint8_t idx;
	enc_req = (at_ble_encryption_request_t *)params;

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == enc_req->handle) && (ble_dev_info[idx].conn_state != BLE_DEVICE_DISCONNECTED) &&
1000e1d0:	8800      	ldrh	r0, [r0, #0]
1000e1d2:	4b49      	ldr	r3, [pc, #292]	; (1000e2f8 <ble_encryption_request_handler+0x134>)
1000e1d4:	2200      	movs	r2, #0
	bool key_found = false;
	bool device_found = false;
	uint8_t idx;
	enc_req = (at_ble_encryption_request_t *)params;

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000e1d6:	2400      	movs	r4, #0
	{
		if((ble_dev_info[idx].conn_info.handle == enc_req->handle) && (ble_dev_info[idx].conn_state != BLE_DEVICE_DISCONNECTED) &&
1000e1d8:	8919      	ldrh	r1, [r3, #8]
1000e1da:	4281      	cmp	r1, r0
1000e1dc:	d137      	bne.n	1000e24e <ble_encryption_request_handler+0x8a>
1000e1de:	0019      	movs	r1, r3
1000e1e0:	315e      	adds	r1, #94	; 0x5e
1000e1e2:	7809      	ldrb	r1, [r1, #0]
1000e1e4:	2901      	cmp	r1, #1
1000e1e6:	d932      	bls.n	1000e24e <ble_encryption_request_handler+0x8a>
		(ble_dev_info[idx].conn_state != BLE_DEVICE_DEFAULT_IDLE))
		{
			device_found = true;
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_STATE;
1000e1e8:	4f43      	ldr	r7, [pc, #268]	; (1000e2f8 <ble_encryption_request_handler+0x134>)
1000e1ea:	0153      	lsls	r3, r2, #5
1000e1ec:	1a9d      	subs	r5, r3, r2
1000e1ee:	00ad      	lsls	r5, r5, #2
1000e1f0:	197d      	adds	r5, r7, r5
1000e1f2:	355e      	adds	r5, #94	; 0x5e
1000e1f4:	2306      	movs	r3, #6
1000e1f6:	702b      	strb	r3, [r5, #0]
			DBG_LOG_DEV("ENC-Req: Conn Handle Device Found:hdl:%d", enc_req->handle);
1000e1f8:	4840      	ldr	r0, [pc, #256]	; (1000e2fc <ble_encryption_request_handler+0x138>)
1000e1fa:	4b41      	ldr	r3, [pc, #260]	; (1000e300 <ble_encryption_request_handler+0x13c>)
1000e1fc:	469a      	mov	sl, r3
1000e1fe:	4798      	blx	r3
1000e200:	8831      	ldrh	r1, [r6, #0]
1000e202:	4840      	ldr	r0, [pc, #256]	; (1000e304 <ble_encryption_request_handler+0x140>)
1000e204:	4b40      	ldr	r3, [pc, #256]	; (1000e308 <ble_encryption_request_handler+0x144>)
1000e206:	4699      	mov	r9, r3
1000e208:	4798      	blx	r3
		}
	}
	
	if (device_found)
	{
		DBG_LOG_DEV("host device ediv %x",ble_dev_info[idx].host_ltk.ediv);
1000e20a:	483c      	ldr	r0, [pc, #240]	; (1000e2fc <ble_encryption_request_handler+0x138>)
1000e20c:	47d0      	blx	sl
1000e20e:	0163      	lsls	r3, r4, #5
1000e210:	1b1b      	subs	r3, r3, r4
1000e212:	009b      	lsls	r3, r3, #2
1000e214:	18ff      	adds	r7, r7, r3
1000e216:	2370      	movs	r3, #112	; 0x70
1000e218:	469b      	mov	fp, r3
1000e21a:	44bb      	add	fp, r7
1000e21c:	465b      	mov	r3, fp
1000e21e:	8819      	ldrh	r1, [r3, #0]
1000e220:	483a      	ldr	r0, [pc, #232]	; (1000e30c <ble_encryption_request_handler+0x148>)
1000e222:	47c8      	blx	r9
		DBG_LOG_DEV("peer device ediv %x",ble_dev_info[idx].bond_info.peer_ltk.ediv);
1000e224:	4835      	ldr	r0, [pc, #212]	; (1000e2fc <ble_encryption_request_handler+0x138>)
1000e226:	47d0      	blx	sl
1000e228:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
1000e22a:	4839      	ldr	r0, [pc, #228]	; (1000e310 <ble_encryption_request_handler+0x14c>)
1000e22c:	47c8      	blx	r9
		DBG_LOG_DEV("enc_req ediv %x", enc_req->ediv);
1000e22e:	4833      	ldr	r0, [pc, #204]	; (1000e2fc <ble_encryption_request_handler+0x138>)
1000e230:	47d0      	blx	sl
1000e232:	8871      	ldrh	r1, [r6, #2]
1000e234:	4837      	ldr	r0, [pc, #220]	; (1000e314 <ble_encryption_request_handler+0x150>)
1000e236:	47c8      	blx	r9
		DBG_LOG_DEV("The index is %d",idx);
1000e238:	4830      	ldr	r0, [pc, #192]	; (1000e2fc <ble_encryption_request_handler+0x138>)
1000e23a:	47d0      	blx	sl
1000e23c:	0021      	movs	r1, r4
1000e23e:	4836      	ldr	r0, [pc, #216]	; (1000e318 <ble_encryption_request_handler+0x154>)
1000e240:	47c8      	blx	r9
		if((ble_dev_info[idx].host_ltk.ediv == enc_req->ediv)
1000e242:	465b      	mov	r3, fp
1000e244:	881a      	ldrh	r2, [r3, #0]
1000e246:	8873      	ldrh	r3, [r6, #2]
1000e248:	429a      	cmp	r2, r3
1000e24a:	d12a      	bne.n	1000e2a2 <ble_encryption_request_handler+0xde>
1000e24c:	e006      	b.n	1000e25c <ble_encryption_request_handler+0x98>
	bool key_found = false;
	bool device_found = false;
	uint8_t idx;
	enc_req = (at_ble_encryption_request_t *)params;

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000e24e:	3401      	adds	r4, #1
1000e250:	b2e4      	uxtb	r4, r4
1000e252:	3201      	adds	r2, #1
1000e254:	337c      	adds	r3, #124	; 0x7c
1000e256:	2c05      	cmp	r4, #5
1000e258:	d1be      	bne.n	1000e1d8 <ble_encryption_request_handler+0x14>
1000e25a:	e022      	b.n	1000e2a2 <ble_encryption_request_handler+0xde>
		DBG_LOG_DEV("host device ediv %x",ble_dev_info[idx].host_ltk.ediv);
		DBG_LOG_DEV("peer device ediv %x",ble_dev_info[idx].bond_info.peer_ltk.ediv);
		DBG_LOG_DEV("enc_req ediv %x", enc_req->ediv);
		DBG_LOG_DEV("The index is %d",idx);
		if((ble_dev_info[idx].host_ltk.ediv == enc_req->ediv)
		&& !memcmp(&enc_req->nb[0],&ble_dev_info[idx].host_ltk.nb[0],8))
1000e25c:	0161      	lsls	r1, r4, #5
1000e25e:	1b09      	subs	r1, r1, r4
1000e260:	0089      	lsls	r1, r1, #2
1000e262:	4b25      	ldr	r3, [pc, #148]	; (1000e2f8 <ble_encryption_request_handler+0x134>)
1000e264:	1859      	adds	r1, r3, r1
1000e266:	3172      	adds	r1, #114	; 0x72
1000e268:	1d30      	adds	r0, r6, #4
1000e26a:	2208      	movs	r2, #8
1000e26c:	4b2b      	ldr	r3, [pc, #172]	; (1000e31c <ble_encryption_request_handler+0x158>)
1000e26e:	4798      	blx	r3
1000e270:	2800      	cmp	r0, #0
1000e272:	d116      	bne.n	1000e2a2 <ble_encryption_request_handler+0xde>
		{
			key_found = true;
			DBG_LOG_DEV("ENC-Req: Key Found");
1000e274:	4821      	ldr	r0, [pc, #132]	; (1000e2fc <ble_encryption_request_handler+0x138>)
1000e276:	4b22      	ldr	r3, [pc, #136]	; (1000e300 <ble_encryption_request_handler+0x13c>)
1000e278:	4798      	blx	r3
1000e27a:	4829      	ldr	r0, [pc, #164]	; (1000e320 <ble_encryption_request_handler+0x15c>)
1000e27c:	4b22      	ldr	r3, [pc, #136]	; (1000e308 <ble_encryption_request_handler+0x144>)
1000e27e:	4798      	blx	r3
	    DBG_LOG("Please unpair the device from peer device(mobile) settings menu and start pairing again");
		at_ble_disconnect(ble_dev_info[idx].conn_info.handle, AT_BLE_AUTH_FAILURE);
		return AT_BLE_FAILURE;
    }

	if(!(at_ble_encryption_request_reply(enc_req->handle, ble_dev_info[idx].bond_info.auth, key_found, &ble_dev_info[idx].host_ltk) == AT_BLE_SUCCESS))
1000e280:	0162      	lsls	r2, r4, #5
1000e282:	1b13      	subs	r3, r2, r4
1000e284:	009b      	lsls	r3, r3, #2
1000e286:	3360      	adds	r3, #96	; 0x60
1000e288:	491b      	ldr	r1, [pc, #108]	; (1000e2f8 <ble_encryption_request_handler+0x134>)
1000e28a:	185b      	adds	r3, r3, r1
1000e28c:	1b12      	subs	r2, r2, r4
1000e28e:	0092      	lsls	r2, r2, #2
1000e290:	188a      	adds	r2, r1, r2
1000e292:	7d11      	ldrb	r1, [r2, #20]
1000e294:	8830      	ldrh	r0, [r6, #0]
1000e296:	2201      	movs	r2, #1
1000e298:	4c22      	ldr	r4, [pc, #136]	; (1000e324 <ble_encryption_request_handler+0x160>)
1000e29a:	47a0      	blx	r4
1000e29c:	1e04      	subs	r4, r0, #0
1000e29e:	d01e      	beq.n	1000e2de <ble_encryption_request_handler+0x11a>
1000e2a0:	e015      	b.n	1000e2ce <ble_encryption_request_handler+0x10a>
	}
	
	
    if(key_found == false)
    {
	    DBG_LOG("Pairing information of peer device is not available.");
1000e2a2:	4f16      	ldr	r7, [pc, #88]	; (1000e2fc <ble_encryption_request_handler+0x138>)
1000e2a4:	0038      	movs	r0, r7
1000e2a6:	4e16      	ldr	r6, [pc, #88]	; (1000e300 <ble_encryption_request_handler+0x13c>)
1000e2a8:	47b0      	blx	r6
1000e2aa:	481f      	ldr	r0, [pc, #124]	; (1000e328 <ble_encryption_request_handler+0x164>)
1000e2ac:	4d16      	ldr	r5, [pc, #88]	; (1000e308 <ble_encryption_request_handler+0x144>)
1000e2ae:	47a8      	blx	r5
	    DBG_LOG("Please unpair the device from peer device(mobile) settings menu and start pairing again");
1000e2b0:	0038      	movs	r0, r7
1000e2b2:	47b0      	blx	r6
1000e2b4:	481d      	ldr	r0, [pc, #116]	; (1000e32c <ble_encryption_request_handler+0x168>)
1000e2b6:	47a8      	blx	r5
		at_ble_disconnect(ble_dev_info[idx].conn_info.handle, AT_BLE_AUTH_FAILURE);
1000e2b8:	0163      	lsls	r3, r4, #5
1000e2ba:	1b1c      	subs	r4, r3, r4
1000e2bc:	00a4      	lsls	r4, r4, #2
1000e2be:	4b0e      	ldr	r3, [pc, #56]	; (1000e2f8 <ble_encryption_request_handler+0x134>)
1000e2c0:	191c      	adds	r4, r3, r4
1000e2c2:	8920      	ldrh	r0, [r4, #8]
1000e2c4:	2105      	movs	r1, #5
1000e2c6:	4b1a      	ldr	r3, [pc, #104]	; (1000e330 <ble_encryption_request_handler+0x16c>)
1000e2c8:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000e2ca:	24e2      	movs	r4, #226	; 0xe2
1000e2cc:	e00d      	b.n	1000e2ea <ble_encryption_request_handler+0x126>
    }

	if(!(at_ble_encryption_request_reply(enc_req->handle, ble_dev_info[idx].bond_info.auth, key_found, &ble_dev_info[idx].host_ltk) == AT_BLE_SUCCESS))
	{
		DBG_LOG("Encryption Request Reply Failed");
1000e2ce:	480b      	ldr	r0, [pc, #44]	; (1000e2fc <ble_encryption_request_handler+0x138>)
1000e2d0:	4b0b      	ldr	r3, [pc, #44]	; (1000e300 <ble_encryption_request_handler+0x13c>)
1000e2d2:	4798      	blx	r3
1000e2d4:	4817      	ldr	r0, [pc, #92]	; (1000e334 <ble_encryption_request_handler+0x170>)
1000e2d6:	4b0c      	ldr	r3, [pc, #48]	; (1000e308 <ble_encryption_request_handler+0x144>)
1000e2d8:	4798      	blx	r3
	}
	else
	{      
		DBG_LOG_DEV("Encryption Request Reply");
	}
	return AT_BLE_SUCCESS;
1000e2da:	2400      	movs	r4, #0
1000e2dc:	e005      	b.n	1000e2ea <ble_encryption_request_handler+0x126>
	{
		DBG_LOG("Encryption Request Reply Failed");
	}
	else
	{      
		DBG_LOG_DEV("Encryption Request Reply");
1000e2de:	4807      	ldr	r0, [pc, #28]	; (1000e2fc <ble_encryption_request_handler+0x138>)
1000e2e0:	4b07      	ldr	r3, [pc, #28]	; (1000e300 <ble_encryption_request_handler+0x13c>)
1000e2e2:	4798      	blx	r3
1000e2e4:	4814      	ldr	r0, [pc, #80]	; (1000e338 <ble_encryption_request_handler+0x174>)
1000e2e6:	4b08      	ldr	r3, [pc, #32]	; (1000e308 <ble_encryption_request_handler+0x144>)
1000e2e8:	4798      	blx	r3
	}
	return AT_BLE_SUCCESS;
}
1000e2ea:	0020      	movs	r0, r4
1000e2ec:	bc1c      	pop	{r2, r3, r4}
1000e2ee:	4691      	mov	r9, r2
1000e2f0:	469a      	mov	sl, r3
1000e2f2:	46a3      	mov	fp, r4
1000e2f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000e2f6:	46c0      	nop			; (mov r8, r8)
1000e2f8:	1001a1a8 	.word	0x1001a1a8
1000e2fc:	10016528 	.word	0x10016528
1000e300:	1001537d 	.word	0x1001537d
1000e304:	10017b00 	.word	0x10017b00
1000e308:	1001525d 	.word	0x1001525d
1000e30c:	10017b2c 	.word	0x10017b2c
1000e310:	10017b40 	.word	0x10017b40
1000e314:	10017b54 	.word	0x10017b54
1000e318:	10017b64 	.word	0x10017b64
1000e31c:	100150e5 	.word	0x100150e5
1000e320:	10017b74 	.word	0x10017b74
1000e324:	100115a1 	.word	0x100115a1
1000e328:	10017b88 	.word	0x10017b88
1000e32c:	10017bc0 	.word	0x10017bc0
1000e330:	10010945 	.word	0x10010945
1000e334:	10017c18 	.word	0x10017c18
1000e338:	10017c38 	.word	0x10017c38

1000e33c <ble_mgr_events_callback_handler>:
}

bool ble_mgr_events_callback_handler(ble_mgr_event_cb_t event_cb_type, 
									ble_mgr_event_t event_type,
									const ble_event_callback_t *ble_event_handler)
{
1000e33c:	b530      	push	{r4, r5, lr}
	uint8_t idx;
	uint8_t max_event_handler = 0;
	bool status = true;
	const ble_event_callback_t **ble_event_cb_ptr = NULL;
	if (ble_event_handler != NULL)
1000e33e:	2a00      	cmp	r2, #0
1000e340:	d047      	beq.n	1000e3d2 <ble_mgr_events_callback_handler+0x96>
	{
		switch(event_type)
1000e342:	2906      	cmp	r1, #6
1000e344:	d847      	bhi.n	1000e3d6 <ble_mgr_events_callback_handler+0x9a>
1000e346:	0089      	lsls	r1, r1, #2
1000e348:	4b28      	ldr	r3, [pc, #160]	; (1000e3ec <ble_mgr_events_callback_handler+0xb0>)
1000e34a:	585b      	ldr	r3, [r3, r1]
1000e34c:	469f      	mov	pc, r3
			}
			break;
			
			case BLE_GATT_SERVER_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_gatt_server_event_cb;
1000e34e:	4b28      	ldr	r3, [pc, #160]	; (1000e3f0 <ble_mgr_events_callback_handler+0xb4>)
				max_event_handler = MAX_GATT_SERVER_SUBSCRIBERS;
1000e350:	2405      	movs	r4, #5
1000e352:	e00a      	b.n	1000e36a <ble_mgr_events_callback_handler+0x2e>
			}
			break;
			
			case BLE_GATT_HTPT_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_htpt_event_cb;
1000e354:	4b27      	ldr	r3, [pc, #156]	; (1000e3f4 <ble_mgr_events_callback_handler+0xb8>)
				max_event_handler = MAX_HTPT_EVENT_SUBSCRIBERS;
1000e356:	2401      	movs	r4, #1
			}
			break;
1000e358:	e007      	b.n	1000e36a <ble_mgr_events_callback_handler+0x2e>
			
			case BLE_DTM_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_dtm_event_cb;
1000e35a:	4b27      	ldr	r3, [pc, #156]	; (1000e3f8 <ble_mgr_events_callback_handler+0xbc>)
				max_event_handler = MAX_DTM_EVENT_SUBSCRIBERS;
1000e35c:	2405      	movs	r4, #5
			}
			break;
1000e35e:	e004      	b.n	1000e36a <ble_mgr_events_callback_handler+0x2e>
			
			case BLE_CUSTOM_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_custom_event_cb;
1000e360:	4b26      	ldr	r3, [pc, #152]	; (1000e3fc <ble_mgr_events_callback_handler+0xc0>)
				max_event_handler = MAX_CUSTOM_EVENT_SUBSCRIBERS;
1000e362:	2401      	movs	r4, #1
			}
			break;
1000e364:	e001      	b.n	1000e36a <ble_mgr_events_callback_handler+0x2e>
	{
		switch(event_type)
		{
			case BLE_GAP_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_gap_event_cb;
1000e366:	4b26      	ldr	r3, [pc, #152]	; (1000e400 <ble_mgr_events_callback_handler+0xc4>)
				max_event_handler = MAX_GAP_EVENT_SUBSCRIBERS;
1000e368:	2405      	movs	r4, #5
		}
		
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
			if (event_cb_type == REGISTER_CALL_BACK)
1000e36a:	2800      	cmp	r0, #0
1000e36c:	d116      	bne.n	1000e39c <ble_mgr_events_callback_handler+0x60>
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == NULL)
1000e36e:	6819      	ldr	r1, [r3, #0]
1000e370:	2900      	cmp	r1, #0
1000e372:	d10b      	bne.n	1000e38c <ble_mgr_events_callback_handler+0x50>
1000e374:	e006      	b.n	1000e384 <ble_mgr_events_callback_handler+0x48>
1000e376:	001d      	movs	r5, r3
1000e378:	3304      	adds	r3, #4
1000e37a:	1f18      	subs	r0, r3, #4
1000e37c:	6800      	ldr	r0, [r0, #0]
1000e37e:	2800      	cmp	r0, #0
1000e380:	d106      	bne.n	1000e390 <ble_mgr_events_callback_handler+0x54>
1000e382:	e000      	b.n	1000e386 <ble_mgr_events_callback_handler+0x4a>
1000e384:	001d      	movs	r5, r3
					{
						ble_event_cb_ptr[idx] = ble_event_handler;
1000e386:	602a      	str	r2, [r5, #0]
						status = true; //Successfully registered to table
1000e388:	2101      	movs	r1, #1
						break;
1000e38a:	e02c      	b.n	1000e3e6 <ble_mgr_events_callback_handler+0xaa>
1000e38c:	3304      	adds	r3, #4
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
			if (event_cb_type == REGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == NULL)
1000e38e:	2100      	movs	r1, #0
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
			if (event_cb_type == REGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
1000e390:	3101      	adds	r1, #1
1000e392:	b2c9      	uxtb	r1, r1
1000e394:	42a1      	cmp	r1, r4
1000e396:	d3ee      	bcc.n	1000e376 <ble_mgr_events_callback_handler+0x3a>
			break;
		}
		
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
1000e398:	2100      	movs	r1, #0
1000e39a:	e024      	b.n	1000e3e6 <ble_mgr_events_callback_handler+0xaa>
1000e39c:	2100      	movs	r1, #0
						status = true; //Successfully registered to table
						break;
					}
				}
			}
			else if(event_cb_type == UNREGISTER_CALL_BACK)
1000e39e:	2801      	cmp	r0, #1
1000e3a0:	d121      	bne.n	1000e3e6 <ble_mgr_events_callback_handler+0xaa>
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == ble_event_handler)
1000e3a2:	6819      	ldr	r1, [r3, #0]
1000e3a4:	428a      	cmp	r2, r1
1000e3a6:	d10c      	bne.n	1000e3c2 <ble_mgr_events_callback_handler+0x86>
1000e3a8:	e006      	b.n	1000e3b8 <ble_mgr_events_callback_handler+0x7c>
1000e3aa:	001d      	movs	r5, r3
1000e3ac:	3304      	adds	r3, #4
1000e3ae:	1f18      	subs	r0, r3, #4
1000e3b0:	6800      	ldr	r0, [r0, #0]
1000e3b2:	4282      	cmp	r2, r0
1000e3b4:	d107      	bne.n	1000e3c6 <ble_mgr_events_callback_handler+0x8a>
1000e3b6:	e000      	b.n	1000e3ba <ble_mgr_events_callback_handler+0x7e>
1000e3b8:	001d      	movs	r5, r3
					{
						ble_event_cb_ptr[idx] = NULL;
1000e3ba:	2300      	movs	r3, #0
1000e3bc:	602b      	str	r3, [r5, #0]
						status = true;//Successfully unregistered from table
1000e3be:	2101      	movs	r1, #1
						break;
1000e3c0:	e011      	b.n	1000e3e6 <ble_mgr_events_callback_handler+0xaa>
1000e3c2:	3304      	adds	r3, #4
			}
			else if(event_cb_type == UNREGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == ble_event_handler)
1000e3c4:	2100      	movs	r1, #0
					}
				}
			}
			else if(event_cb_type == UNREGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
1000e3c6:	3101      	adds	r1, #1
1000e3c8:	b2c9      	uxtb	r1, r1
1000e3ca:	42a1      	cmp	r1, r4
1000e3cc:	d3ed      	bcc.n	1000e3aa <ble_mgr_events_callback_handler+0x6e>
			break;
		}
		
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
1000e3ce:	2100      	movs	r1, #0
1000e3d0:	e009      	b.n	1000e3e6 <ble_mgr_events_callback_handler+0xaa>
			}			
		}
	}
	else
	{
		status = false; //Invalid parameter
1000e3d2:	2100      	movs	r1, #0
1000e3d4:	e007      	b.n	1000e3e6 <ble_mgr_events_callback_handler+0xaa>
	uint8_t max_event_handler = 0;
	bool status = true;
	const ble_event_callback_t **ble_event_cb_ptr = NULL;
	if (ble_event_handler != NULL)
	{
		switch(event_type)
1000e3d6:	2100      	movs	r1, #0
1000e3d8:	e005      	b.n	1000e3e6 <ble_mgr_events_callback_handler+0xaa>
			}
			break;
			
			case BLE_GATT_CLIENT_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_gatt_client_event_cb;
1000e3da:	4b0a      	ldr	r3, [pc, #40]	; (1000e404 <ble_mgr_events_callback_handler+0xc8>)
				max_event_handler = MAX_GATT_CLIENT_SUBSCRIBERS;
1000e3dc:	2405      	movs	r4, #5
1000e3de:	e7c4      	b.n	1000e36a <ble_mgr_events_callback_handler+0x2e>
			}
			break;
			
			case BLE_L2CAP_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_l2cap_event_cb;
1000e3e0:	4b09      	ldr	r3, [pc, #36]	; (1000e408 <ble_mgr_events_callback_handler+0xcc>)
				max_event_handler = MAX_L2CAP_EVENT_SUBSCRIBERS;
1000e3e2:	2401      	movs	r4, #1
1000e3e4:	e7c1      	b.n	1000e36a <ble_mgr_events_callback_handler+0x2e>
	else
	{
		status = false; //Invalid parameter
	}
	return status;
}
1000e3e6:	0008      	movs	r0, r1
1000e3e8:	bd30      	pop	{r4, r5, pc}
1000e3ea:	46c0      	nop			; (mov r8, r8)
1000e3ec:	100174ec 	.word	0x100174ec
1000e3f0:	1001a194 	.word	0x1001a194
1000e3f4:	1001a190 	.word	0x1001a190
1000e3f8:	1001a418 	.word	0x1001a418
1000e3fc:	1001a9cc 	.word	0x1001a9cc
1000e400:	1001a42c 	.word	0x1001a42c
1000e404:	1001a440 	.word	0x1001a440
1000e408:	1001a488 	.word	0x1001a488

1000e40c <ble_device_init>:
volatile uint32_t 	event_params_memory[1024] 	= {0};


/** @brief BLE device initialization */
void ble_device_init(at_ble_addr_t *addr)
{
1000e40c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000e40e:	465f      	mov	r7, fp
1000e410:	4656      	mov	r6, sl
1000e412:	464d      	mov	r5, r9
1000e414:	4644      	mov	r4, r8
1000e416:	b4f0      	push	{r4, r5, r6, r7}
1000e418:	b091      	sub	sp, #68	; 0x44
1000e41a:	0005      	movs	r5, r0
static bool ble_scan_duplication_check(at_ble_scan_info_t * info);
#endif

static void init_global_var(void)
{
	ble_user_event_cb = 0;
1000e41c:	2400      	movs	r4, #0
1000e41e:	4b7e      	ldr	r3, [pc, #504]	; (1000e618 <ble_device_init+0x20c>)
1000e420:	601c      	str	r4, [r3, #0]
	
	memset(&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
1000e422:	2207      	movs	r2, #7
1000e424:	2100      	movs	r1, #0
1000e426:	487d      	ldr	r0, [pc, #500]	; (1000e61c <ble_device_init+0x210>)
1000e428:	4e7d      	ldr	r6, [pc, #500]	; (1000e620 <ble_device_init+0x214>)
1000e42a:	47b0      	blx	r6
	memset(&connected_state_info, 0, sizeof(at_ble_connected_t));
1000e42c:	2212      	movs	r2, #18
1000e42e:	2100      	movs	r1, #0
1000e430:	487c      	ldr	r0, [pc, #496]	; (1000e624 <ble_device_init+0x218>)
1000e432:	47b0      	blx	r6
		
#if defined ATT_DB_MEMORY
	memset(att_db_data, 0, sizeof(uint32_t) * BLE_ATT_DB_MEMORY_SIZE/4);
1000e434:	4a7c      	ldr	r2, [pc, #496]	; (1000e628 <ble_device_init+0x21c>)
1000e436:	2100      	movs	r1, #0
1000e438:	487c      	ldr	r0, [pc, #496]	; (1000e62c <ble_device_init+0x220>)
1000e43a:	47b0      	blx	r6
#endif

	scan_response_count = 0;
1000e43c:	4b7c      	ldr	r3, [pc, #496]	; (1000e630 <ble_device_init+0x224>)
1000e43e:	701c      	strb	r4, [r3, #0]
	memset(scan_info, 0, sizeof(scan_info));
1000e440:	22cd      	movs	r2, #205	; 0xcd
1000e442:	0092      	lsls	r2, r2, #2
1000e444:	2100      	movs	r1, #0
1000e446:	487b      	ldr	r0, [pc, #492]	; (1000e634 <ble_device_init+0x228>)
1000e448:	47b0      	blx	r6

	event = AT_BLE_UNDEFINED_EVENT;
1000e44a:	4b7b      	ldr	r3, [pc, #492]	; (1000e638 <ble_device_init+0x22c>)
1000e44c:	701c      	strb	r4, [r3, #0]
	memset(ble_event_params, 0, BLE_EVENT_PARAM_MAX_SIZE);
1000e44e:	2283      	movs	r2, #131	; 0x83
1000e450:	0092      	lsls	r2, r2, #2
1000e452:	2100      	movs	r1, #0
1000e454:	4879      	ldr	r0, [pc, #484]	; (1000e63c <ble_device_init+0x230>)
1000e456:	47b0      	blx	r6
{
	uint8_t idx;	
	char *dev_name = NULL;
	init_global_var();

	memset((uint8_t *)event_pool_memory, 0, sizeof(event_pool_memory));
1000e458:	4b79      	ldr	r3, [pc, #484]	; (1000e640 <ble_device_init+0x234>)
1000e45a:	469b      	mov	fp, r3
1000e45c:	2380      	movs	r3, #128	; 0x80
1000e45e:	00db      	lsls	r3, r3, #3
1000e460:	469a      	mov	sl, r3
1000e462:	001a      	movs	r2, r3
1000e464:	2100      	movs	r1, #0
1000e466:	4658      	mov	r0, fp
1000e468:	47b0      	blx	r6
	memset((uint8_t *)event_params_memory, 0, sizeof(event_params_memory));
1000e46a:	4b76      	ldr	r3, [pc, #472]	; (1000e644 <ble_device_init+0x238>)
1000e46c:	4699      	mov	r9, r3
1000e46e:	2380      	movs	r3, #128	; 0x80
1000e470:	015b      	lsls	r3, r3, #5
1000e472:	4698      	mov	r8, r3
1000e474:	001a      	movs	r2, r3
1000e476:	2100      	movs	r1, #0
1000e478:	4648      	mov	r0, r9
1000e47a:	47b0      	blx	r6

	memset(&pf_cfg, 0, sizeof(pf_cfg));
1000e47c:	4f72      	ldr	r7, [pc, #456]	; (1000e648 <ble_device_init+0x23c>)
1000e47e:	221c      	movs	r2, #28
1000e480:	2100      	movs	r1, #0
1000e482:	0038      	movs	r0, r7
1000e484:	47b0      	blx	r6

	pf_cfg.event_mem_pool.memStartAdd        = (uint8_t *)event_pool_memory;
1000e486:	465b      	mov	r3, fp
1000e488:	60bb      	str	r3, [r7, #8]
	pf_cfg.event_mem_pool.memSize            = sizeof(event_pool_memory);
1000e48a:	4653      	mov	r3, sl
1000e48c:	60fb      	str	r3, [r7, #12]
	pf_cfg.event_params_mem_pool.memStartAdd = (uint8_t *)event_params_memory;
1000e48e:	464b      	mov	r3, r9
1000e490:	613b      	str	r3, [r7, #16]
	pf_cfg.event_params_mem_pool.memSize     = sizeof(event_params_memory);
1000e492:	4643      	mov	r3, r8
1000e494:	617b      	str	r3, [r7, #20]

	/* Initialize the BLE Event callbacks */
	for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_gap_event_cb[idx] = NULL;
1000e496:	4b6d      	ldr	r3, [pc, #436]	; (1000e64c <ble_device_init+0x240>)
1000e498:	601c      	str	r4, [r3, #0]
1000e49a:	605c      	str	r4, [r3, #4]
1000e49c:	609c      	str	r4, [r3, #8]
1000e49e:	60dc      	str	r4, [r3, #12]
1000e4a0:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_gatt_client_event_cb[idx] = NULL;
1000e4a2:	4b6b      	ldr	r3, [pc, #428]	; (1000e650 <ble_device_init+0x244>)
1000e4a4:	601c      	str	r4, [r3, #0]
1000e4a6:	605c      	str	r4, [r3, #4]
1000e4a8:	609c      	str	r4, [r3, #8]
1000e4aa:	60dc      	str	r4, [r3, #12]
1000e4ac:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
	{
		ble_mgr_gatt_server_event_cb[idx] = NULL;
1000e4ae:	4b69      	ldr	r3, [pc, #420]	; (1000e654 <ble_device_init+0x248>)
1000e4b0:	601c      	str	r4, [r3, #0]
1000e4b2:	605c      	str	r4, [r3, #4]
1000e4b4:	609c      	str	r4, [r3, #8]
1000e4b6:	60dc      	str	r4, [r3, #12]
1000e4b8:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_L2CAP_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_l2cap_event_cb[idx] = NULL;
1000e4ba:	4b67      	ldr	r3, [pc, #412]	; (1000e658 <ble_device_init+0x24c>)
1000e4bc:	601c      	str	r4, [r3, #0]
	}
	
	for (idx = 0; idx < MAX_HTPT_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_htpt_event_cb[idx] = NULL;
1000e4be:	4b67      	ldr	r3, [pc, #412]	; (1000e65c <ble_device_init+0x250>)
1000e4c0:	601c      	str	r4, [r3, #0]
	}
	
	for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_dtm_event_cb[idx] = NULL;
1000e4c2:	4b67      	ldr	r3, [pc, #412]	; (1000e660 <ble_device_init+0x254>)
1000e4c4:	601c      	str	r4, [r3, #0]
1000e4c6:	605c      	str	r4, [r3, #4]
1000e4c8:	609c      	str	r4, [r3, #8]
1000e4ca:	60dc      	str	r4, [r3, #12]
1000e4cc:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_CUSTOM_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_custom_event_cb[idx] = NULL;
1000e4ce:	4b65      	ldr	r3, [pc, #404]	; (1000e664 <ble_device_init+0x258>)
1000e4d0:	601c      	str	r4, [r3, #0]
1000e4d2:	4c65      	ldr	r4, [pc, #404]	; (1000e668 <ble_device_init+0x25c>)
1000e4d4:	239b      	movs	r3, #155	; 0x9b
1000e4d6:	009b      	lsls	r3, r3, #2
1000e4d8:	4698      	mov	r8, r3
1000e4da:	44a0      	add	r8, r4
	}
        
    /* Set the BLE Device connection state */
    for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
    {
        memset(&ble_dev_info[idx], 0, sizeof(ble_connected_dev_info_t));
1000e4dc:	4f50      	ldr	r7, [pc, #320]	; (1000e620 <ble_device_init+0x214>)
		ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
		/* Set Invalid to Bonding information */
		ble_dev_info[idx].bond_info.status = AT_BLE_GAP_INVALID_PARAM;
1000e4de:	2640      	movs	r6, #64	; 0x40
	}
        
    /* Set the BLE Device connection state */
    for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
    {
        memset(&ble_dev_info[idx], 0, sizeof(ble_connected_dev_info_t));
1000e4e0:	227c      	movs	r2, #124	; 0x7c
1000e4e2:	2100      	movs	r1, #0
1000e4e4:	0020      	movs	r0, r4
1000e4e6:	47b8      	blx	r7
		ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
1000e4e8:	0023      	movs	r3, r4
1000e4ea:	335e      	adds	r3, #94	; 0x5e
1000e4ec:	2200      	movs	r2, #0
1000e4ee:	701a      	strb	r2, [r3, #0]
		/* Set Invalid to Bonding information */
		ble_dev_info[idx].bond_info.status = AT_BLE_GAP_INVALID_PARAM;
1000e4f0:	7626      	strb	r6, [r4, #24]
1000e4f2:	347c      	adds	r4, #124	; 0x7c
	{
		ble_mgr_custom_event_cb[idx] = NULL;
	}
        
    /* Set the BLE Device connection state */
    for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000e4f4:	45a0      	cmp	r8, r4
1000e4f6:	d1f3      	bne.n	1000e4e0 <ble_device_init+0xd4>
		ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
		/* Set Invalid to Bonding information */
		ble_dev_info[idx].bond_info.status = AT_BLE_GAP_INVALID_PARAM;
    }
	/* Need to reset the count to 0 for storing it only in SRAM */
	ble_device_count = 0; 
1000e4f8:	4b5c      	ldr	r3, [pc, #368]	; (1000e66c <ble_device_init+0x260>)
1000e4fa:	701a      	strb	r2, [r3, #0]
	
	
#if defined ATT_DB_MEMORY
	pf_cfg.memPool.memSize = BLE_ATT_DB_MEMORY_SIZE;
1000e4fc:	4c52      	ldr	r4, [pc, #328]	; (1000e648 <ble_device_init+0x23c>)
1000e4fe:	4b4a      	ldr	r3, [pc, #296]	; (1000e628 <ble_device_init+0x21c>)
1000e500:	6063      	str	r3, [r4, #4]
	pf_cfg.memPool.memStartAdd = (uint8_t *)att_db_data;
1000e502:	4b4a      	ldr	r3, [pc, #296]	; (1000e62c <ble_device_init+0x220>)
1000e504:	6023      	str	r3, [r4, #0]

/* Initialize the BLE */
static void ble_init(at_ble_init_config_t * args)
{
	/* Initialize the platform */
	DBG_LOG("[ble_init]\t\t\tInitializing SAMB11");
1000e506:	485a      	ldr	r0, [pc, #360]	; (1000e670 <ble_device_init+0x264>)
1000e508:	4b5a      	ldr	r3, [pc, #360]	; (1000e674 <ble_device_init+0x268>)
1000e50a:	4798      	blx	r3
1000e50c:	485a      	ldr	r0, [pc, #360]	; (1000e678 <ble_device_init+0x26c>)
1000e50e:	4b5b      	ldr	r3, [pc, #364]	; (1000e67c <ble_device_init+0x270>)
1000e510:	4798      	blx	r3
	
	/* Init BLE device */
	if(at_ble_init(args) != AT_BLE_SUCCESS)
1000e512:	0020      	movs	r0, r4
1000e514:	4b5a      	ldr	r3, [pc, #360]	; (1000e680 <ble_device_init+0x274>)
1000e516:	4798      	blx	r3
1000e518:	2800      	cmp	r0, #0
1000e51a:	d00b      	beq.n	1000e534 <ble_device_init+0x128>
	{
		DBG_LOG("[ble_init]\t\tSAMB11 Initialization failed");
1000e51c:	4e54      	ldr	r6, [pc, #336]	; (1000e670 <ble_device_init+0x264>)
1000e51e:	0030      	movs	r0, r6
1000e520:	4d54      	ldr	r5, [pc, #336]	; (1000e674 <ble_device_init+0x268>)
1000e522:	47a8      	blx	r5
1000e524:	4857      	ldr	r0, [pc, #348]	; (1000e684 <ble_device_init+0x278>)
1000e526:	4c55      	ldr	r4, [pc, #340]	; (1000e67c <ble_device_init+0x270>)
1000e528:	47a0      	blx	r4
		DBG_LOG("[ble_init]\t\tPlease check the power and connection / hardware connector");	
1000e52a:	0030      	movs	r0, r6
1000e52c:	47a8      	blx	r5
1000e52e:	4856      	ldr	r0, [pc, #344]	; (1000e688 <ble_device_init+0x27c>)
1000e530:	47a0      	blx	r4
1000e532:	e7fe      	b.n	1000e532 <ble_device_init+0x126>
#endif
	
	ble_init(&pf_cfg);

	/* Register it in first index of callback handler */
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK, 
1000e534:	4a55      	ldr	r2, [pc, #340]	; (1000e68c <ble_device_init+0x280>)
1000e536:	2100      	movs	r1, #0
1000e538:	2000      	movs	r0, #0
1000e53a:	4c55      	ldr	r4, [pc, #340]	; (1000e690 <ble_device_init+0x284>)
1000e53c:	47a0      	blx	r4
									BLE_GAP_EVENT_TYPE, 
									ble_mgr_gap_handle);
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK,
1000e53e:	4a55      	ldr	r2, [pc, #340]	; (1000e694 <ble_device_init+0x288>)
1000e540:	2102      	movs	r1, #2
1000e542:	2000      	movs	r0, #0
1000e544:	47a0      	blx	r4
{
	if ((name == NULL) || (name_len < 1))
	{
		return AT_BLE_INVALID_PARAM;
	}
	return at_ble_device_name_set(name, name_len);
1000e546:	2109      	movs	r1, #9
1000e548:	4853      	ldr	r0, [pc, #332]	; (1000e698 <ble_device_init+0x28c>)
1000e54a:	4b54      	ldr	r3, [pc, #336]	; (1000e69c <ble_device_init+0x290>)
1000e54c:	4798      	blx	r3
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK,
									BLE_GATT_SERVER_EVENT_TYPE,
									ble_mgr_gatt_server_handle);
									
	dev_name = (char *)BLE_DEVICE_NAME;
	if (ble_set_device_name((uint8_t *)dev_name, strlen(dev_name)) != AT_BLE_SUCCESS)
1000e54e:	2800      	cmp	r0, #0
1000e550:	d005      	beq.n	1000e55e <ble_device_init+0x152>
	{
		DBG_LOG("Device name set failed");
1000e552:	4847      	ldr	r0, [pc, #284]	; (1000e670 <ble_device_init+0x264>)
1000e554:	4b47      	ldr	r3, [pc, #284]	; (1000e674 <ble_device_init+0x268>)
1000e556:	4798      	blx	r3
1000e558:	4851      	ldr	r0, [pc, #324]	; (1000e6a0 <ble_device_init+0x294>)
1000e55a:	4b48      	ldr	r3, [pc, #288]	; (1000e67c <ble_device_init+0x270>)
1000e55c:	4798      	blx	r3

/* Set BLE Address and device configuration, If address is NULL then it will use BD public address */
static void ble_set_dev_config(at_ble_addr_t *addr)
{
	at_ble_dev_config_t stDevConfig;
	at_ble_addr_t address = {AT_BLE_ADDRESS_PUBLIC, {0xAB, 0xCD, 0xEF, 0xAB, 0xCD, 0xEF}};
1000e55e:	2207      	movs	r2, #7
1000e560:	4950      	ldr	r1, [pc, #320]	; (1000e6a4 <ble_device_init+0x298>)
1000e562:	3108      	adds	r1, #8
1000e564:	a804      	add	r0, sp, #16
1000e566:	4b50      	ldr	r3, [pc, #320]	; (1000e6a8 <ble_device_init+0x29c>)
1000e568:	4798      	blx	r3
	memset(&stDevConfig, 0, sizeof(at_ble_dev_config_t));
1000e56a:	2226      	movs	r2, #38	; 0x26
1000e56c:	2100      	movs	r1, #0
1000e56e:	a806      	add	r0, sp, #24
1000e570:	4b2b      	ldr	r3, [pc, #172]	; (1000e620 <ble_device_init+0x214>)
1000e572:	4798      	blx	r3
	
	if (addr == NULL)
1000e574:	2d00      	cmp	r5, #0
1000e576:	d10c      	bne.n	1000e592 <ble_device_init+0x186>
	{		
		/* get BD address from BLE device */
		if(at_ble_addr_get(&address) != AT_BLE_SUCCESS)
1000e578:	a804      	add	r0, sp, #16
1000e57a:	4b4c      	ldr	r3, [pc, #304]	; (1000e6ac <ble_device_init+0x2a0>)
1000e57c:	4798      	blx	r3
		{
			DBG_LOG("[ble_set_dev_config]\t\tBD address get failed");
		}
		
		/* Copy the BD address into address pointer */
		addr = &address;
1000e57e:	ad04      	add	r5, sp, #16
	memset(&stDevConfig, 0, sizeof(at_ble_dev_config_t));
	
	if (addr == NULL)
	{		
		/* get BD address from BLE device */
		if(at_ble_addr_get(&address) != AT_BLE_SUCCESS)
1000e580:	2800      	cmp	r0, #0
1000e582:	d006      	beq.n	1000e592 <ble_device_init+0x186>
		{
			DBG_LOG("[ble_set_dev_config]\t\tBD address get failed");
1000e584:	483a      	ldr	r0, [pc, #232]	; (1000e670 <ble_device_init+0x264>)
1000e586:	4b3b      	ldr	r3, [pc, #236]	; (1000e674 <ble_device_init+0x268>)
1000e588:	4798      	blx	r3
1000e58a:	4849      	ldr	r0, [pc, #292]	; (1000e6b0 <ble_device_init+0x2a4>)
1000e58c:	4b3b      	ldr	r3, [pc, #236]	; (1000e67c <ble_device_init+0x270>)
1000e58e:	4798      	blx	r3
		}
		
		/* Copy the BD address into address pointer */
		addr = &address;
1000e590:	ad04      	add	r5, sp, #16
	}
	
	DBG_LOG("[ble_set_dev_config]\t\tBD Address:0x%02X%02X%02X%02X%02X%02X, Address Type:%d",
1000e592:	4837      	ldr	r0, [pc, #220]	; (1000e670 <ble_device_init+0x264>)
1000e594:	4b37      	ldr	r3, [pc, #220]	; (1000e674 <ble_device_init+0x268>)
1000e596:	4798      	blx	r3
1000e598:	792b      	ldrb	r3, [r5, #4]
1000e59a:	796a      	ldrb	r2, [r5, #5]
1000e59c:	79a9      	ldrb	r1, [r5, #6]
1000e59e:	7828      	ldrb	r0, [r5, #0]
1000e5a0:	9003      	str	r0, [sp, #12]
1000e5a2:	7868      	ldrb	r0, [r5, #1]
1000e5a4:	9002      	str	r0, [sp, #8]
1000e5a6:	78a8      	ldrb	r0, [r5, #2]
1000e5a8:	9001      	str	r0, [sp, #4]
1000e5aa:	78e8      	ldrb	r0, [r5, #3]
1000e5ac:	9000      	str	r0, [sp, #0]
1000e5ae:	4841      	ldr	r0, [pc, #260]	; (1000e6b4 <ble_device_init+0x2a8>)
1000e5b0:	4c32      	ldr	r4, [pc, #200]	; (1000e67c <ble_device_init+0x270>)
1000e5b2:	47a0      	blx	r4
	addr->addr[1],
	addr->addr[0], addr->type);
	
	/* Set device configuration */
	/* Device role */
	stDevConfig.role = (at_ble_dev_role_t)BLE_DEVICE_ROLE;
1000e5b4:	ac06      	add	r4, sp, #24
1000e5b6:	230a      	movs	r3, #10
1000e5b8:	7023      	strb	r3, [r4, #0]
	/* device renew duration */
	stDevConfig.renew_dur = AT_RENEW_DUR_VAL_MIN;
1000e5ba:	4b3f      	ldr	r3, [pc, #252]	; (1000e6b8 <ble_device_init+0x2ac>)
1000e5bc:	8063      	strh	r3, [r4, #2]
	/* device address type */
	memcpy((uint8_t *)&stDevConfig.address, (uint8_t *)addr, sizeof(at_ble_addr_t));
1000e5be:	2207      	movs	r2, #7
1000e5c0:	0029      	movs	r1, r5
1000e5c2:	a807      	add	r0, sp, #28
1000e5c4:	4b38      	ldr	r3, [pc, #224]	; (1000e6a8 <ble_device_init+0x29c>)
1000e5c6:	4798      	blx	r3
	/* Attributes */
	stDevConfig.att_cfg.b2NamePerm = AT_BLE_WRITE_DISABLE;
1000e5c8:	2300      	movs	r3, #0
1000e5ca:	76e3      	strb	r3, [r4, #27]
	stDevConfig.att_cfg.b2AppearancePerm = AT_BLE_WRITE_DISABLE;
1000e5cc:	7723      	strb	r3, [r4, #28]
	stDevConfig.att_cfg.b1EnableSpcs = 0;
1000e5ce:	7763      	strb	r3, [r4, #29]
	stDevConfig.att_cfg.b1EnableServiceChanged = 0;
1000e5d0:	77a3      	strb	r3, [r4, #30]
	stDevConfig.att_cfg.b2Rfu = AT_BLE_WRITE_DISABLE;
1000e5d2:	77e3      	strb	r3, [r4, #31]
	/* Handles */
	stDevConfig.gap_start_hdl = AT_BLE_AUTO_ALLOC_HANDLE;
1000e5d4:	8423      	strh	r3, [r4, #32]
	stDevConfig.gatt_start_hdl = AT_BLE_AUTO_ALLOC_HANDLE;
1000e5d6:	8463      	strh	r3, [r4, #34]	; 0x22
	/* MTU */
	stDevConfig.max_mtu = AT_MTU_VAL_RECOMMENDED;
1000e5d8:	2380      	movs	r3, #128	; 0x80
1000e5da:	009b      	lsls	r3, r3, #2
1000e5dc:	84a3      	strh	r3, [r4, #36]	; 0x24
	
	if(at_ble_set_dev_config(&stDevConfig) != AT_BLE_SUCCESS)
1000e5de:	0020      	movs	r0, r4
1000e5e0:	4b36      	ldr	r3, [pc, #216]	; (1000e6bc <ble_device_init+0x2b0>)
1000e5e2:	4798      	blx	r3
1000e5e4:	2800      	cmp	r0, #0
1000e5e6:	d005      	beq.n	1000e5f4 <ble_device_init+0x1e8>
	{
		DBG_LOG("[ble_set_dev_config]\tSet BLE Device configuration failed");
1000e5e8:	4821      	ldr	r0, [pc, #132]	; (1000e670 <ble_device_init+0x264>)
1000e5ea:	4b22      	ldr	r3, [pc, #136]	; (1000e674 <ble_device_init+0x268>)
1000e5ec:	4798      	blx	r3
1000e5ee:	4834      	ldr	r0, [pc, #208]	; (1000e6c0 <ble_device_init+0x2b4>)
1000e5f0:	4b22      	ldr	r3, [pc, #136]	; (1000e67c <ble_device_init+0x270>)
1000e5f2:	4798      	blx	r3
	}
	
	if (at_ble_addr_set(addr) != AT_BLE_SUCCESS)
1000e5f4:	0028      	movs	r0, r5
1000e5f6:	4b33      	ldr	r3, [pc, #204]	; (1000e6c4 <ble_device_init+0x2b8>)
1000e5f8:	4798      	blx	r3
1000e5fa:	2800      	cmp	r0, #0
1000e5fc:	d005      	beq.n	1000e60a <ble_device_init+0x1fe>
	{
		DBG_LOG("[ble_set_dev_config]\tSet BLE Device Address failed");
1000e5fe:	481c      	ldr	r0, [pc, #112]	; (1000e670 <ble_device_init+0x264>)
1000e600:	4b1c      	ldr	r3, [pc, #112]	; (1000e674 <ble_device_init+0x268>)
1000e602:	4798      	blx	r3
1000e604:	4830      	ldr	r0, [pc, #192]	; (1000e6c8 <ble_device_init+0x2bc>)
1000e606:	4b1d      	ldr	r3, [pc, #116]	; (1000e67c <ble_device_init+0x270>)
1000e608:	4798      	blx	r3
	{
		DBG_LOG("Device name set failed");
	}
	
	ble_set_dev_config(addr);	
}
1000e60a:	b011      	add	sp, #68	; 0x44
1000e60c:	bc3c      	pop	{r2, r3, r4, r5}
1000e60e:	4690      	mov	r8, r2
1000e610:	4699      	mov	r9, r3
1000e612:	46a2      	mov	sl, r4
1000e614:	46ab      	mov	fp, r5
1000e616:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000e618:	10018d0c 	.word	0x10018d0c
1000e61c:	10018d14 	.word	0x10018d14
1000e620:	10015115 	.word	0x10015115
1000e624:	1001a454 	.word	0x1001a454
1000e628:	000004e2 	.word	0x000004e2
1000e62c:	1001882c 	.word	0x1001882c
1000e630:	10018d10 	.word	0x10018d10
1000e634:	1001a48c 	.word	0x1001a48c
1000e638:	1001a484 	.word	0x1001a484
1000e63c:	1001a7c0 	.word	0x1001a7c0
1000e640:	1001842c 	.word	0x1001842c
1000e644:	10018d1c 	.word	0x10018d1c
1000e648:	1001a468 	.word	0x1001a468
1000e64c:	1001a42c 	.word	0x1001a42c
1000e650:	1001a440 	.word	0x1001a440
1000e654:	1001a194 	.word	0x1001a194
1000e658:	1001a488 	.word	0x1001a488
1000e65c:	1001a190 	.word	0x1001a190
1000e660:	1001a418 	.word	0x1001a418
1000e664:	1001a9cc 	.word	0x1001a9cc
1000e668:	1001a1a8 	.word	0x1001a1a8
1000e66c:	1001a414 	.word	0x1001a414
1000e670:	10016528 	.word	0x10016528
1000e674:	1001537d 	.word	0x1001537d
1000e678:	10017c54 	.word	0x10017c54
1000e67c:	1001525d 	.word	0x1001525d
1000e680:	10010551 	.word	0x10010551
1000e684:	10017c78 	.word	0x10017c78
1000e688:	10017ca4 	.word	0x10017ca4
1000e68c:	10018050 	.word	0x10018050
1000e690:	1000e33d 	.word	0x1000e33d
1000e694:	10017608 	.word	0x10017608
1000e698:	10017cec 	.word	0x10017cec
1000e69c:	10010469 	.word	0x10010469
1000e6a0:	10017cf8 	.word	0x10017cf8
1000e6a4:	100175f8 	.word	0x100175f8
1000e6a8:	10015103 	.word	0x10015103
1000e6ac:	1001049d 	.word	0x1001049d
1000e6b0:	10017d10 	.word	0x10017d10
1000e6b4:	10017d3c 	.word	0x10017d3c
1000e6b8:	00003a98 	.word	0x00003a98
1000e6bc:	100104c1 	.word	0x100104c1
1000e6c0:	10017d8c 	.word	0x10017d8c
1000e6c4:	10010705 	.word	0x10010705
1000e6c8:	10017dc8 	.word	0x10017dc8

1000e6cc <ble_send_slave_sec_request>:
	return AT_BLE_FAILURE;
}

/** @brief function to send slave security request */
at_ble_status_t ble_send_slave_sec_request(at_ble_handle_t conn_handle)
{
1000e6cc:	b510      	push	{r4, lr}
	#if BLE_PAIR_ENABLE
		if (at_ble_send_slave_sec_request(conn_handle, BLE_MITM_REQ, BLE_BOND_REQ) == AT_BLE_SUCCESS)
1000e6ce:	2200      	movs	r2, #0
1000e6d0:	2100      	movs	r1, #0
1000e6d2:	4b0a      	ldr	r3, [pc, #40]	; (1000e6fc <ble_send_slave_sec_request+0x30>)
1000e6d4:	4798      	blx	r3
1000e6d6:	1e04      	subs	r4, r0, #0
1000e6d8:	d106      	bne.n	1000e6e8 <ble_send_slave_sec_request+0x1c>
		{
			DBG_LOG_DEV("Slave security request successful");
1000e6da:	4809      	ldr	r0, [pc, #36]	; (1000e700 <ble_send_slave_sec_request+0x34>)
1000e6dc:	4b09      	ldr	r3, [pc, #36]	; (1000e704 <ble_send_slave_sec_request+0x38>)
1000e6de:	4798      	blx	r3
1000e6e0:	4809      	ldr	r0, [pc, #36]	; (1000e708 <ble_send_slave_sec_request+0x3c>)
1000e6e2:	4b0a      	ldr	r3, [pc, #40]	; (1000e70c <ble_send_slave_sec_request+0x40>)
1000e6e4:	4798      	blx	r3
			return AT_BLE_SUCCESS;
1000e6e6:	e006      	b.n	1000e6f6 <ble_send_slave_sec_request+0x2a>
		}
		else
		{
			DBG_LOG("Slave security request failed");
1000e6e8:	4805      	ldr	r0, [pc, #20]	; (1000e700 <ble_send_slave_sec_request+0x34>)
1000e6ea:	4b06      	ldr	r3, [pc, #24]	; (1000e704 <ble_send_slave_sec_request+0x38>)
1000e6ec:	4798      	blx	r3
1000e6ee:	4808      	ldr	r0, [pc, #32]	; (1000e710 <ble_send_slave_sec_request+0x44>)
1000e6f0:	4b06      	ldr	r3, [pc, #24]	; (1000e70c <ble_send_slave_sec_request+0x40>)
1000e6f2:	4798      	blx	r3
		}
	#endif
	return AT_BLE_FAILURE;
1000e6f4:	24e2      	movs	r4, #226	; 0xe2
}
1000e6f6:	0020      	movs	r0, r4
1000e6f8:	bd10      	pop	{r4, pc}
1000e6fa:	46c0      	nop			; (mov r8, r8)
1000e6fc:	100114e9 	.word	0x100114e9
1000e700:	10016528 	.word	0x10016528
1000e704:	1001537d 	.word	0x1001537d
1000e708:	10017e18 	.word	0x10017e18
1000e70c:	1001525d 	.word	0x1001525d
1000e710:	10017e3c 	.word	0x10017e3c

1000e714 <ble_connected_state_handler>:
	return status;
}

/** @brief function to handle connected event received from stack */
at_ble_status_t ble_connected_state_handler(void *params)
{
1000e714:	b5f0      	push	{r4, r5, r6, r7, lr}
1000e716:	465f      	mov	r7, fp
1000e718:	464e      	mov	r6, r9
1000e71a:	4645      	mov	r5, r8
1000e71c:	b4e0      	push	{r5, r6, r7}
1000e71e:	b09a      	sub	sp, #104	; 0x68
1000e720:	0005      	movs	r5, r0
	at_ble_connected_t *conn_params;
	uint8_t idx = 0;
	conn_params = (at_ble_connected_t *)params;
	bool peripheral_device_added = false;
	
	if (conn_params->conn_status == AT_BLE_SUCCESS)
1000e722:	7a86      	ldrb	r6, [r0, #10]
1000e724:	2e00      	cmp	r6, #0
1000e726:	d000      	beq.n	1000e72a <ble_connected_state_handler+0x16>
1000e728:	e0cc      	b.n	1000e8c4 <ble_connected_state_handler+0x1b0>
	{
		DBG_LOG("Connected to peer device with address 0x%02x%02x%02x%02x%02x%02x",
1000e72a:	4878      	ldr	r0, [pc, #480]	; (1000e90c <ble_connected_state_handler+0x1f8>)
1000e72c:	4f78      	ldr	r7, [pc, #480]	; (1000e910 <ble_connected_state_handler+0x1fc>)
1000e72e:	47b8      	blx	r7
1000e730:	792b      	ldrb	r3, [r5, #4]
1000e732:	796a      	ldrb	r2, [r5, #5]
1000e734:	79a9      	ldrb	r1, [r5, #6]
1000e736:	7868      	ldrb	r0, [r5, #1]
1000e738:	9002      	str	r0, [sp, #8]
1000e73a:	78a8      	ldrb	r0, [r5, #2]
1000e73c:	9001      	str	r0, [sp, #4]
1000e73e:	78e8      	ldrb	r0, [r5, #3]
1000e740:	9000      	str	r0, [sp, #0]
1000e742:	4874      	ldr	r0, [pc, #464]	; (1000e914 <ble_connected_state_handler+0x200>)
1000e744:	4c74      	ldr	r4, [pc, #464]	; (1000e918 <ble_connected_state_handler+0x204>)
1000e746:	47a0      	blx	r4
		conn_params->peer_addr.addr[3],
		conn_params->peer_addr.addr[2],
		conn_params->peer_addr.addr[1],
		conn_params->peer_addr.addr[0]);
		
		DBG_LOG("Connection Handle %d", conn_params->handle);
1000e748:	4870      	ldr	r0, [pc, #448]	; (1000e90c <ble_connected_state_handler+0x1f8>)
1000e74a:	47b8      	blx	r7
1000e74c:	8929      	ldrh	r1, [r5, #8]
1000e74e:	4873      	ldr	r0, [pc, #460]	; (1000e91c <ble_connected_state_handler+0x208>)
1000e750:	47a0      	blx	r4
		
		memcpy((uint8_t *)&connected_state_info, (uint8_t *)conn_params, sizeof(at_ble_connected_t));	
1000e752:	2212      	movs	r2, #18
1000e754:	0029      	movs	r1, r5
1000e756:	4872      	ldr	r0, [pc, #456]	; (1000e920 <ble_connected_state_handler+0x20c>)
1000e758:	4b72      	ldr	r3, [pc, #456]	; (1000e924 <ble_connected_state_handler+0x210>)
1000e75a:	4798      	blx	r3
		if(memcmp((uint8_t *)&ble_peripheral_dev_address, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000e75c:	9504      	str	r5, [sp, #16]
1000e75e:	2207      	movs	r2, #7
1000e760:	0029      	movs	r1, r5
1000e762:	4871      	ldr	r0, [pc, #452]	; (1000e928 <ble_connected_state_handler+0x214>)
1000e764:	4b71      	ldr	r3, [pc, #452]	; (1000e92c <ble_connected_state_handler+0x218>)
1000e766:	4798      	blx	r3
1000e768:	2800      	cmp	r0, #0
1000e76a:	d100      	bne.n	1000e76e <ble_connected_state_handler+0x5a>
1000e76c:	e0b3      	b.n	1000e8d6 <ble_connected_state_handler+0x1c2>
		{
			/* Peripheral Device */
			if (conn_params->peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE) 
1000e76e:	782b      	ldrb	r3, [r5, #0]
1000e770:	2b02      	cmp	r3, #2
1000e772:	d000      	beq.n	1000e776 <ble_connected_state_handler+0x62>
1000e774:	e0af      	b.n	1000e8d6 <ble_connected_state_handler+0x1c2>
			{
				uint8_t idx1, idx2;
				uint16_t key_len = 0;
				uint8_t nb_keys = BLE_MAX_DEVICE_CONNECTED;
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
1000e776:	2250      	movs	r2, #80	; 0x50
1000e778:	2100      	movs	r1, #0
1000e77a:	a806      	add	r0, sp, #24
1000e77c:	4b6c      	ldr	r3, [pc, #432]	; (1000e930 <ble_connected_state_handler+0x21c>)
1000e77e:	4798      	blx	r3
1000e780:	4f6c      	ldr	r7, [pc, #432]	; (1000e934 <ble_connected_state_handler+0x220>)
		{
			/* Peripheral Device */
			if (conn_params->peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE) 
			{
				uint8_t idx1, idx2;
				uint16_t key_len = 0;
1000e782:	2300      	movs	r3, #0
1000e784:	e00b      	b.n	1000e79e <ble_connected_state_handler+0x8a>
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
				for (idx1 = 0; idx1 < BLE_MAX_DEVICE_CONNECTED; idx1++)
				{
					for (idx2 = 0; idx2 < AT_BLE_MAX_KEY_LEN; idx2++)
					{
						irk_key[key_len++] = ble_dev_info[idx1].bond_info.peer_irk.key[idx2];
1000e786:	1c59      	adds	r1, r3, #1
1000e788:	7814      	ldrb	r4, [r2, #0]
1000e78a:	a806      	add	r0, sp, #24
1000e78c:	54c4      	strb	r4, [r0, r3]
1000e78e:	3201      	adds	r2, #1
1000e790:	b28b      	uxth	r3, r1
				uint16_t key_len = 0;
				uint8_t nb_keys = BLE_MAX_DEVICE_CONNECTED;
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
				for (idx1 = 0; idx1 < BLE_MAX_DEVICE_CONNECTED; idx1++)
				{
					for (idx2 = 0; idx2 < AT_BLE_MAX_KEY_LEN; idx2++)
1000e792:	42b3      	cmp	r3, r6
1000e794:	d1f7      	bne.n	1000e786 <ble_connected_state_handler+0x72>
1000e796:	377c      	adds	r7, #124	; 0x7c
					{
						irk_key[key_len++] = ble_dev_info[idx1].bond_info.peer_irk.key[idx2];
1000e798:	1e33      	subs	r3, r6, #0
			{
				uint8_t idx1, idx2;
				uint16_t key_len = 0;
				uint8_t nb_keys = BLE_MAX_DEVICE_CONNECTED;
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
				for (idx1 = 0; idx1 < BLE_MAX_DEVICE_CONNECTED; idx1++)
1000e79a:	2b50      	cmp	r3, #80	; 0x50
1000e79c:	d004      	beq.n	1000e7a8 <ble_connected_state_handler+0x94>
1000e79e:	001e      	movs	r6, r3
1000e7a0:	3610      	adds	r6, #16
1000e7a2:	b2b6      	uxth	r6, r6
	return status;
}

/** @brief function to handle connected event received from stack */
at_ble_status_t ble_connected_state_handler(void *params)
{
1000e7a4:	003a      	movs	r2, r7
1000e7a6:	e7ee      	b.n	1000e786 <ble_connected_state_handler+0x72>
					}
					
				}
				if (nb_keys)
				{
					if(at_ble_random_address_resolve(BLE_MAX_DEVICE_CONNECTED, &conn_params->peer_addr, irk_key) == AT_BLE_SUCCESS)
1000e7a8:	aa06      	add	r2, sp, #24
1000e7aa:	0029      	movs	r1, r5
1000e7ac:	2005      	movs	r0, #5
1000e7ae:	4b62      	ldr	r3, [pc, #392]	; (1000e938 <ble_connected_state_handler+0x224>)
1000e7b0:	4798      	blx	r3
1000e7b2:	1e06      	subs	r6, r0, #0
1000e7b4:	d106      	bne.n	1000e7c4 <ble_connected_state_handler+0xb0>
					{
						DBG_LOG_DEV("Resolving Random address success**");
1000e7b6:	4855      	ldr	r0, [pc, #340]	; (1000e90c <ble_connected_state_handler+0x1f8>)
1000e7b8:	4b55      	ldr	r3, [pc, #340]	; (1000e910 <ble_connected_state_handler+0x1fc>)
1000e7ba:	4798      	blx	r3
1000e7bc:	485f      	ldr	r0, [pc, #380]	; (1000e93c <ble_connected_state_handler+0x228>)
1000e7be:	4b56      	ldr	r3, [pc, #344]	; (1000e918 <ble_connected_state_handler+0x204>)
1000e7c0:	4798      	blx	r3
						return AT_BLE_SUCCESS;
1000e7c2:	e09c      	b.n	1000e8fe <ble_connected_state_handler+0x1ea>
					}
					else
					{
						DBG_LOG("Resolving Random address failed**");
1000e7c4:	4851      	ldr	r0, [pc, #324]	; (1000e90c <ble_connected_state_handler+0x1f8>)
1000e7c6:	4b52      	ldr	r3, [pc, #328]	; (1000e910 <ble_connected_state_handler+0x1fc>)
1000e7c8:	4798      	blx	r3
1000e7ca:	485d      	ldr	r0, [pc, #372]	; (1000e940 <ble_connected_state_handler+0x22c>)
1000e7cc:	4b52      	ldr	r3, [pc, #328]	; (1000e918 <ble_connected_state_handler+0x204>)
1000e7ce:	4798      	blx	r3
						return AT_BLE_FAILURE;
1000e7d0:	26e2      	movs	r6, #226	; 0xe2
1000e7d2:	e094      	b.n	1000e8fe <ble_connected_state_handler+0x1ea>
1000e7d4:	b2e7      	uxtb	r7, r4
		if (ble_device_count < BLE_MAX_DEVICE_CONNECTED)
		{
			bool conn_exists = false;
			for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
			{
				if(!memcmp((uint8_t *)&ble_dev_info[idx].conn_info.peer_addr, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000e7d6:	9405      	str	r4, [sp, #20]
1000e7d8:	2207      	movs	r2, #7
1000e7da:	9904      	ldr	r1, [sp, #16]
1000e7dc:	4648      	mov	r0, r9
1000e7de:	47d8      	blx	fp
1000e7e0:	2800      	cmp	r0, #0
1000e7e2:	d109      	bne.n	1000e7f8 <ble_connected_state_handler+0xe4>
				{
					ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000e7e4:	9a05      	ldr	r2, [sp, #20]
1000e7e6:	0153      	lsls	r3, r2, #5
1000e7e8:	1a9b      	subs	r3, r3, r2
1000e7ea:	009a      	lsls	r2, r3, #2
1000e7ec:	4b55      	ldr	r3, [pc, #340]	; (1000e944 <ble_connected_state_handler+0x230>)
1000e7ee:	189b      	adds	r3, r3, r2
1000e7f0:	335e      	adds	r3, #94	; 0x5e
1000e7f2:	2202      	movs	r2, #2
1000e7f4:	701a      	strb	r2, [r3, #0]
1000e7f6:	e02b      	b.n	1000e850 <ble_connected_state_handler+0x13c>
1000e7f8:	3401      	adds	r4, #1
1000e7fa:	237c      	movs	r3, #124	; 0x7c
1000e7fc:	469c      	mov	ip, r3
1000e7fe:	44e1      	add	r9, ip
		}
			
		if (ble_device_count < BLE_MAX_DEVICE_CONNECTED)
		{
			bool conn_exists = false;
			for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000e800:	2c05      	cmp	r4, #5
1000e802:	d1e7      	bne.n	1000e7d4 <ble_connected_state_handler+0xc0>
1000e804:	e072      	b.n	1000e8ec <ble_connected_state_handler+0x1d8>
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
				{
					if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000e806:	001c      	movs	r4, r3
1000e808:	7811      	ldrb	r1, [r2, #0]
1000e80a:	2900      	cmp	r1, #0
1000e80c:	d11a      	bne.n	1000e844 <ble_connected_state_handler+0x130>
1000e80e:	e001      	b.n	1000e814 <ble_connected_state_handler+0x100>
1000e810:	2400      	movs	r4, #0
1000e812:	2700      	movs	r7, #0
					{
						/* @Todo Need to Handle Random Address */
						memcpy(&ble_dev_info[idx].conn_info, (uint8_t *)conn_params, sizeof(at_ble_connected_t));
1000e814:	0163      	lsls	r3, r4, #5
1000e816:	4699      	mov	r9, r3
1000e818:	1b18      	subs	r0, r3, r4
1000e81a:	0080      	lsls	r0, r0, #2
1000e81c:	4b49      	ldr	r3, [pc, #292]	; (1000e944 <ble_connected_state_handler+0x230>)
1000e81e:	4698      	mov	r8, r3
1000e820:	4440      	add	r0, r8
1000e822:	2212      	movs	r2, #18
1000e824:	0029      	movs	r1, r5
1000e826:	4b3f      	ldr	r3, [pc, #252]	; (1000e924 <ble_connected_state_handler+0x210>)
1000e828:	4798      	blx	r3
						ble_device_count++;
1000e82a:	4a47      	ldr	r2, [pc, #284]	; (1000e948 <ble_connected_state_handler+0x234>)
1000e82c:	7813      	ldrb	r3, [r2, #0]
1000e82e:	3301      	adds	r3, #1
1000e830:	b2db      	uxtb	r3, r3
1000e832:	7013      	strb	r3, [r2, #0]
						ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000e834:	464b      	mov	r3, r9
1000e836:	1b1b      	subs	r3, r3, r4
1000e838:	009b      	lsls	r3, r3, #2
1000e83a:	4443      	add	r3, r8
1000e83c:	335e      	adds	r3, #94	; 0x5e
1000e83e:	2202      	movs	r2, #2
1000e840:	701a      	strb	r2, [r3, #0]
						break;
1000e842:	e005      	b.n	1000e850 <ble_connected_state_handler+0x13c>
				}
			}
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000e844:	1c79      	adds	r1, r7, #1
1000e846:	b2cf      	uxtb	r7, r1
1000e848:	3301      	adds	r3, #1
1000e84a:	327c      	adds	r2, #124	; 0x7c
1000e84c:	2f05      	cmp	r7, #5
1000e84e:	d1da      	bne.n	1000e806 <ble_connected_state_handler+0xf2>
						break;
					}
				}
			}
			
			if(!memcmp((uint8_t *)&ble_peripheral_dev_address, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000e850:	2207      	movs	r2, #7
1000e852:	0029      	movs	r1, r5
1000e854:	4834      	ldr	r0, [pc, #208]	; (1000e928 <ble_connected_state_handler+0x214>)
1000e856:	4b35      	ldr	r3, [pc, #212]	; (1000e92c <ble_connected_state_handler+0x218>)
1000e858:	4798      	blx	r3
1000e85a:	2800      	cmp	r0, #0
1000e85c:	d10c      	bne.n	1000e878 <ble_connected_state_handler+0x164>
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_CENTRAL;
1000e85e:	017b      	lsls	r3, r7, #5
1000e860:	1bdb      	subs	r3, r3, r7
1000e862:	009b      	lsls	r3, r3, #2
1000e864:	4a37      	ldr	r2, [pc, #220]	; (1000e944 <ble_connected_state_handler+0x230>)
1000e866:	18d3      	adds	r3, r2, r3
1000e868:	2205      	movs	r2, #5
1000e86a:	749a      	strb	r2, [r3, #18]
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
				peripheral_device_added = true;
			}
			/* Reset the ble_peripheral_dev_address to identify the initiator */
			memset((uint8_t *)&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
1000e86c:	3202      	adds	r2, #2
1000e86e:	2100      	movs	r1, #0
1000e870:	482d      	ldr	r0, [pc, #180]	; (1000e928 <ble_connected_state_handler+0x214>)
1000e872:	4b2f      	ldr	r3, [pc, #188]	; (1000e930 <ble_connected_state_handler+0x21c>)
1000e874:	4798      	blx	r3
1000e876:	e042      	b.n	1000e8fe <ble_connected_state_handler+0x1ea>
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_CENTRAL;
			}
			else
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
1000e878:	4b32      	ldr	r3, [pc, #200]	; (1000e944 <ble_connected_state_handler+0x230>)
1000e87a:	4698      	mov	r8, r3
1000e87c:	017c      	lsls	r4, r7, #5
1000e87e:	1be3      	subs	r3, r4, r7
1000e880:	009b      	lsls	r3, r3, #2
1000e882:	4443      	add	r3, r8
1000e884:	220a      	movs	r2, #10
1000e886:	749a      	strb	r2, [r3, #18]
				peripheral_device_added = true;
			}
			/* Reset the ble_peripheral_dev_address to identify the initiator */
			memset((uint8_t *)&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
1000e888:	3a03      	subs	r2, #3
1000e88a:	2100      	movs	r1, #0
1000e88c:	4826      	ldr	r0, [pc, #152]	; (1000e928 <ble_connected_state_handler+0x214>)
1000e88e:	4b28      	ldr	r3, [pc, #160]	; (1000e930 <ble_connected_state_handler+0x21c>)
1000e890:	4798      	blx	r3
			at_ble_disconnect(conn_params->handle, AT_BLE_TERMINATED_BY_USER);
		}		
		
#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
		
        if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
1000e892:	1be4      	subs	r4, r4, r7
1000e894:	00a4      	lsls	r4, r4, #2
1000e896:	4444      	add	r4, r8
1000e898:	7ca3      	ldrb	r3, [r4, #18]
1000e89a:	2b0a      	cmp	r3, #10
1000e89c:	d12f      	bne.n	1000e8fe <ble_connected_state_handler+0x1ea>
1000e89e:	e00d      	b.n	1000e8bc <ble_connected_state_handler+0x1a8>
			memset((uint8_t *)&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
					
		}
		else
		{
			DBG_LOG("Max number of connection reached: %d ===>Disconnecting...", ble_device_count);
1000e8a0:	481a      	ldr	r0, [pc, #104]	; (1000e90c <ble_connected_state_handler+0x1f8>)
1000e8a2:	4b1b      	ldr	r3, [pc, #108]	; (1000e910 <ble_connected_state_handler+0x1fc>)
1000e8a4:	4798      	blx	r3
1000e8a6:	4b28      	ldr	r3, [pc, #160]	; (1000e948 <ble_connected_state_handler+0x234>)
1000e8a8:	7819      	ldrb	r1, [r3, #0]
1000e8aa:	b2c9      	uxtb	r1, r1
1000e8ac:	4827      	ldr	r0, [pc, #156]	; (1000e94c <ble_connected_state_handler+0x238>)
1000e8ae:	4b1a      	ldr	r3, [pc, #104]	; (1000e918 <ble_connected_state_handler+0x204>)
1000e8b0:	4798      	blx	r3
			at_ble_disconnect(conn_params->handle, AT_BLE_TERMINATED_BY_USER);
1000e8b2:	8928      	ldrh	r0, [r5, #8]
1000e8b4:	2113      	movs	r1, #19
1000e8b6:	4b26      	ldr	r3, [pc, #152]	; (1000e950 <ble_connected_state_handler+0x23c>)
1000e8b8:	4798      	blx	r3
1000e8ba:	e020      	b.n	1000e8fe <ble_connected_state_handler+0x1ea>
		
#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
		
        if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
        {
	 		ble_send_slave_sec_request(conn_params->handle);
1000e8bc:	8928      	ldrh	r0, [r5, #8]
1000e8be:	4b25      	ldr	r3, [pc, #148]	; (1000e954 <ble_connected_state_handler+0x240>)
1000e8c0:	4798      	blx	r3
1000e8c2:	e01c      	b.n	1000e8fe <ble_connected_state_handler+0x1ea>
        }
#endif
	} 
	else
	{
		DBG_LOG("Device Connection Failed - Status: %d", conn_params->conn_status);
1000e8c4:	4811      	ldr	r0, [pc, #68]	; (1000e90c <ble_connected_state_handler+0x1f8>)
1000e8c6:	4b12      	ldr	r3, [pc, #72]	; (1000e910 <ble_connected_state_handler+0x1fc>)
1000e8c8:	4798      	blx	r3
1000e8ca:	7aa9      	ldrb	r1, [r5, #10]
1000e8cc:	4822      	ldr	r0, [pc, #136]	; (1000e958 <ble_connected_state_handler+0x244>)
1000e8ce:	4b12      	ldr	r3, [pc, #72]	; (1000e918 <ble_connected_state_handler+0x204>)
1000e8d0:	4798      	blx	r3
	}
	ALL_UNUSED(peripheral_device_added);
	return AT_BLE_SUCCESS;
1000e8d2:	2600      	movs	r6, #0
1000e8d4:	e013      	b.n	1000e8fe <ble_connected_state_handler+0x1ea>
					DBG_LOG_DEV("New Connection");
				}				
			}
		}
			
		if (ble_device_count < BLE_MAX_DEVICE_CONNECTED)
1000e8d6:	4b1c      	ldr	r3, [pc, #112]	; (1000e948 <ble_connected_state_handler+0x234>)
1000e8d8:	781b      	ldrb	r3, [r3, #0]
1000e8da:	b2db      	uxtb	r3, r3
1000e8dc:	2b04      	cmp	r3, #4
1000e8de:	d8df      	bhi.n	1000e8a0 <ble_connected_state_handler+0x18c>
1000e8e0:	4b18      	ldr	r3, [pc, #96]	; (1000e944 <ble_connected_state_handler+0x230>)
1000e8e2:	4699      	mov	r9, r3
1000e8e4:	2400      	movs	r4, #0
		{
			bool conn_exists = false;
			for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
			{
				if(!memcmp((uint8_t *)&ble_dev_info[idx].conn_info.peer_addr, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000e8e6:	4b11      	ldr	r3, [pc, #68]	; (1000e92c <ble_connected_state_handler+0x218>)
1000e8e8:	469b      	mov	fp, r3
1000e8ea:	e773      	b.n	1000e7d4 <ble_connected_state_handler+0xc0>
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
				{
					if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000e8ec:	235e      	movs	r3, #94	; 0x5e
1000e8ee:	4a15      	ldr	r2, [pc, #84]	; (1000e944 <ble_connected_state_handler+0x230>)
1000e8f0:	5cd3      	ldrb	r3, [r2, r3]
1000e8f2:	2b00      	cmp	r3, #0
1000e8f4:	d08c      	beq.n	1000e810 <ble_connected_state_handler+0xfc>
1000e8f6:	4a19      	ldr	r2, [pc, #100]	; (1000e95c <ble_connected_state_handler+0x248>)
1000e8f8:	2301      	movs	r3, #1
				}
			}
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000e8fa:	2701      	movs	r7, #1
1000e8fc:	e783      	b.n	1000e806 <ble_connected_state_handler+0xf2>
	{
		DBG_LOG("Device Connection Failed - Status: %d", conn_params->conn_status);
	}
	ALL_UNUSED(peripheral_device_added);
	return AT_BLE_SUCCESS;
}
1000e8fe:	0030      	movs	r0, r6
1000e900:	b01a      	add	sp, #104	; 0x68
1000e902:	bc1c      	pop	{r2, r3, r4}
1000e904:	4690      	mov	r8, r2
1000e906:	4699      	mov	r9, r3
1000e908:	46a3      	mov	fp, r4
1000e90a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000e90c:	10016528 	.word	0x10016528
1000e910:	1001537d 	.word	0x1001537d
1000e914:	10017e5c 	.word	0x10017e5c
1000e918:	1001525d 	.word	0x1001525d
1000e91c:	10017ea0 	.word	0x10017ea0
1000e920:	1001a454 	.word	0x1001a454
1000e924:	10015103 	.word	0x10015103
1000e928:	10018d14 	.word	0x10018d14
1000e92c:	100150e5 	.word	0x100150e5
1000e930:	10015115 	.word	0x10015115
1000e934:	1001a1ee 	.word	0x1001a1ee
1000e938:	10010971 	.word	0x10010971
1000e93c:	10017eb8 	.word	0x10017eb8
1000e940:	10017edc 	.word	0x10017edc
1000e944:	1001a1a8 	.word	0x1001a1a8
1000e948:	1001a414 	.word	0x1001a414
1000e94c:	10017f00 	.word	0x10017f00
1000e950:	10010945 	.word	0x10010945
1000e954:	1000e6cd 	.word	0x1000e6cd
1000e958:	10017f3c 	.word	0x10017f3c
1000e95c:	1001a282 	.word	0x1001a282

1000e960 <ble_resolv_rand_addr_handler>:

at_ble_status_t ble_resolv_rand_addr_handler(void *params)
{
1000e960:	b5f0      	push	{r4, r5, r6, r7, lr}
1000e962:	4647      	mov	r7, r8
1000e964:	b480      	push	{r7}
	uint8_t idx;	
	bool device_found = false;
	bool peripheral_device_added = false;
	ble_resolv_rand_addr_status = (at_ble_resolv_rand_addr_status_t *)params;	
	
	if(ble_resolv_rand_addr_status->status == AT_BLE_SUCCESS)
1000e966:	7803      	ldrb	r3, [r0, #0]
1000e968:	2b00      	cmp	r3, #0
1000e96a:	d152      	bne.n	1000ea12 <ble_resolv_rand_addr_handler+0xb2>
1000e96c:	4d3e      	ldr	r5, [pc, #248]	; (1000ea68 <ble_resolv_rand_addr_handler+0x108>)
1000e96e:	2400      	movs	r4, #0
	{		
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
		{
			/* Check the Resolved Address */
			if (!memcmp((uint8_t *)ble_resolv_rand_addr_status->irk, (uint8_t *)ble_dev_info[idx].bond_info.peer_irk.key, AT_BLE_MAX_KEY_LEN))
1000e970:	1c46      	adds	r6, r0, #1
1000e972:	4f3e      	ldr	r7, [pc, #248]	; (1000ea6c <ble_resolv_rand_addr_handler+0x10c>)
1000e974:	2210      	movs	r2, #16
1000e976:	0029      	movs	r1, r5
1000e978:	0030      	movs	r0, r6
1000e97a:	47b8      	blx	r7
1000e97c:	2800      	cmp	r0, #0
1000e97e:	d031      	beq.n	1000e9e4 <ble_resolv_rand_addr_handler+0x84>
	bool peripheral_device_added = false;
	ble_resolv_rand_addr_status = (at_ble_resolv_rand_addr_status_t *)params;	
	
	if(ble_resolv_rand_addr_status->status == AT_BLE_SUCCESS)
	{		
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000e980:	3401      	adds	r4, #1
1000e982:	b2e4      	uxtb	r4, r4
1000e984:	357c      	adds	r5, #124	; 0x7c
1000e986:	2c05      	cmp	r4, #5
1000e988:	d1f4      	bne.n	1000e974 <ble_resolv_rand_addr_handler+0x14>
1000e98a:	e042      	b.n	1000ea12 <ble_resolv_rand_addr_handler+0xb2>
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
		{
			if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000e98c:	001d      	movs	r5, r3
1000e98e:	7811      	ldrb	r1, [r2, #0]
1000e990:	2900      	cmp	r1, #0
1000e992:	d11b      	bne.n	1000e9cc <ble_resolv_rand_addr_handler+0x6c>
1000e994:	e001      	b.n	1000e99a <ble_resolv_rand_addr_handler+0x3a>
1000e996:	2500      	movs	r5, #0
		peripheral_device_added = true;
	}
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000e998:	2400      	movs	r4, #0
		{
			if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
			{
				memcpy(&ble_dev_info[idx].conn_info, (uint8_t *)&connected_state_info, sizeof(at_ble_connected_t));
1000e99a:	4b35      	ldr	r3, [pc, #212]	; (1000ea70 <ble_resolv_rand_addr_handler+0x110>)
1000e99c:	4698      	mov	r8, r3
1000e99e:	016e      	lsls	r6, r5, #5
1000e9a0:	1b77      	subs	r7, r6, r5
1000e9a2:	00bf      	lsls	r7, r7, #2
1000e9a4:	4447      	add	r7, r8
1000e9a6:	2212      	movs	r2, #18
1000e9a8:	4932      	ldr	r1, [pc, #200]	; (1000ea74 <ble_resolv_rand_addr_handler+0x114>)
1000e9aa:	0038      	movs	r0, r7
1000e9ac:	4b32      	ldr	r3, [pc, #200]	; (1000ea78 <ble_resolv_rand_addr_handler+0x118>)
1000e9ae:	4798      	blx	r3
				ble_device_count++;
1000e9b0:	4a32      	ldr	r2, [pc, #200]	; (1000ea7c <ble_resolv_rand_addr_handler+0x11c>)
1000e9b2:	7813      	ldrb	r3, [r2, #0]
1000e9b4:	3301      	adds	r3, #1
1000e9b6:	b2db      	uxtb	r3, r3
1000e9b8:	7013      	strb	r3, [r2, #0]
				ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000e9ba:	375e      	adds	r7, #94	; 0x5e
1000e9bc:	2302      	movs	r3, #2
1000e9be:	703b      	strb	r3, [r7, #0]
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
1000e9c0:	1b75      	subs	r5, r6, r5
1000e9c2:	00ad      	lsls	r5, r5, #2
1000e9c4:	4445      	add	r5, r8
1000e9c6:	3308      	adds	r3, #8
1000e9c8:	74ab      	strb	r3, [r5, #18]
				peripheral_device_added = true;
				break;
1000e9ca:	e031      	b.n	1000ea30 <ble_resolv_rand_addr_handler+0xd0>
		peripheral_device_added = true;
	}
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000e9cc:	3401      	adds	r4, #1
1000e9ce:	b2e4      	uxtb	r4, r4
1000e9d0:	3301      	adds	r3, #1
1000e9d2:	327c      	adds	r2, #124	; 0x7c
1000e9d4:	2c05      	cmp	r4, #5
1000e9d6:	d1d9      	bne.n	1000e98c <ble_resolv_rand_addr_handler+0x2c>
1000e9d8:	e03a      	b.n	1000ea50 <ble_resolv_rand_addr_handler+0xf0>
	}
	DBG_LOG_DEV("Device idx:%d",idx);
	#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
	if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
	{
		ble_send_slave_sec_request(connected_state_info.handle);
1000e9da:	4b26      	ldr	r3, [pc, #152]	; (1000ea74 <ble_resolv_rand_addr_handler+0x114>)
1000e9dc:	8918      	ldrh	r0, [r3, #8]
1000e9de:	4b28      	ldr	r3, [pc, #160]	; (1000ea80 <ble_resolv_rand_addr_handler+0x120>)
1000e9e0:	4798      	blx	r3
1000e9e2:	e03c      	b.n	1000ea5e <ble_resolv_rand_addr_handler+0xfe>
		
	}
	
	if (device_found)
	{
		DBG_LOG_DEV("##########Device Found");
1000e9e4:	4827      	ldr	r0, [pc, #156]	; (1000ea84 <ble_resolv_rand_addr_handler+0x124>)
1000e9e6:	4b28      	ldr	r3, [pc, #160]	; (1000ea88 <ble_resolv_rand_addr_handler+0x128>)
1000e9e8:	4798      	blx	r3
1000e9ea:	4828      	ldr	r0, [pc, #160]	; (1000ea8c <ble_resolv_rand_addr_handler+0x12c>)
1000e9ec:	4b28      	ldr	r3, [pc, #160]	; (1000ea90 <ble_resolv_rand_addr_handler+0x130>)
1000e9ee:	4798      	blx	r3
		ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000e9f0:	481f      	ldr	r0, [pc, #124]	; (1000ea70 <ble_resolv_rand_addr_handler+0x110>)
1000e9f2:	0163      	lsls	r3, r4, #5
1000e9f4:	1b1a      	subs	r2, r3, r4
1000e9f6:	0092      	lsls	r2, r2, #2
1000e9f8:	1882      	adds	r2, r0, r2
1000e9fa:	0011      	movs	r1, r2
1000e9fc:	315e      	adds	r1, #94	; 0x5e
1000e9fe:	2502      	movs	r5, #2
1000ea00:	700d      	strb	r5, [r1, #0]
		ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
1000ea02:	210a      	movs	r1, #10
1000ea04:	7491      	strb	r1, [r2, #18]
		memcpy((uint8_t *)&ble_dev_info[idx].conn_info, (uint8_t *)&connected_state_info, sizeof(at_ble_connected_t));
1000ea06:	0010      	movs	r0, r2
1000ea08:	2212      	movs	r2, #18
1000ea0a:	491a      	ldr	r1, [pc, #104]	; (1000ea74 <ble_resolv_rand_addr_handler+0x114>)
1000ea0c:	4b1a      	ldr	r3, [pc, #104]	; (1000ea78 <ble_resolv_rand_addr_handler+0x118>)
1000ea0e:	4798      	blx	r3
1000ea10:	e00e      	b.n	1000ea30 <ble_resolv_rand_addr_handler+0xd0>
		peripheral_device_added = true;
	}
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
1000ea12:	481c      	ldr	r0, [pc, #112]	; (1000ea84 <ble_resolv_rand_addr_handler+0x124>)
1000ea14:	4b1c      	ldr	r3, [pc, #112]	; (1000ea88 <ble_resolv_rand_addr_handler+0x128>)
1000ea16:	4798      	blx	r3
1000ea18:	481e      	ldr	r0, [pc, #120]	; (1000ea94 <ble_resolv_rand_addr_handler+0x134>)
1000ea1a:	4b1d      	ldr	r3, [pc, #116]	; (1000ea90 <ble_resolv_rand_addr_handler+0x130>)
1000ea1c:	4798      	blx	r3
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
		{
			if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000ea1e:	235e      	movs	r3, #94	; 0x5e
1000ea20:	4a13      	ldr	r2, [pc, #76]	; (1000ea70 <ble_resolv_rand_addr_handler+0x110>)
1000ea22:	5cd3      	ldrb	r3, [r2, r3]
1000ea24:	2b00      	cmp	r3, #0
1000ea26:	d0b6      	beq.n	1000e996 <ble_resolv_rand_addr_handler+0x36>
1000ea28:	4a1b      	ldr	r2, [pc, #108]	; (1000ea98 <ble_resolv_rand_addr_handler+0x138>)
1000ea2a:	2301      	movs	r3, #1
		peripheral_device_added = true;
	}
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000ea2c:	2401      	movs	r4, #1
1000ea2e:	e7ad      	b.n	1000e98c <ble_resolv_rand_addr_handler+0x2c>
				peripheral_device_added = true;
				break;
			}
		}
	}
	DBG_LOG_DEV("Device idx:%d",idx);
1000ea30:	4814      	ldr	r0, [pc, #80]	; (1000ea84 <ble_resolv_rand_addr_handler+0x124>)
1000ea32:	4b15      	ldr	r3, [pc, #84]	; (1000ea88 <ble_resolv_rand_addr_handler+0x128>)
1000ea34:	4798      	blx	r3
1000ea36:	0021      	movs	r1, r4
1000ea38:	4818      	ldr	r0, [pc, #96]	; (1000ea9c <ble_resolv_rand_addr_handler+0x13c>)
1000ea3a:	4b15      	ldr	r3, [pc, #84]	; (1000ea90 <ble_resolv_rand_addr_handler+0x130>)
1000ea3c:	4798      	blx	r3
	#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
	if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
1000ea3e:	0163      	lsls	r3, r4, #5
1000ea40:	1b1c      	subs	r4, r3, r4
1000ea42:	00a4      	lsls	r4, r4, #2
1000ea44:	4b0a      	ldr	r3, [pc, #40]	; (1000ea70 <ble_resolv_rand_addr_handler+0x110>)
1000ea46:	191c      	adds	r4, r3, r4
1000ea48:	7ca3      	ldrb	r3, [r4, #18]
1000ea4a:	2b0a      	cmp	r3, #10
1000ea4c:	d107      	bne.n	1000ea5e <ble_resolv_rand_addr_handler+0xfe>
1000ea4e:	e7c4      	b.n	1000e9da <ble_resolv_rand_addr_handler+0x7a>
				peripheral_device_added = true;
				break;
			}
		}
	}
	DBG_LOG_DEV("Device idx:%d",idx);
1000ea50:	480c      	ldr	r0, [pc, #48]	; (1000ea84 <ble_resolv_rand_addr_handler+0x124>)
1000ea52:	4b0d      	ldr	r3, [pc, #52]	; (1000ea88 <ble_resolv_rand_addr_handler+0x128>)
1000ea54:	4798      	blx	r3
1000ea56:	2105      	movs	r1, #5
1000ea58:	4810      	ldr	r0, [pc, #64]	; (1000ea9c <ble_resolv_rand_addr_handler+0x13c>)
1000ea5a:	4b0d      	ldr	r3, [pc, #52]	; (1000ea90 <ble_resolv_rand_addr_handler+0x130>)
1000ea5c:	4798      	blx	r3
	#endif
	ALL_UNUSED(peripheral_device_added);

	return AT_BLE_SUCCESS;
	
}
1000ea5e:	2000      	movs	r0, #0
1000ea60:	bc04      	pop	{r2}
1000ea62:	4690      	mov	r8, r2
1000ea64:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000ea66:	46c0      	nop			; (mov r8, r8)
1000ea68:	1001a1ee 	.word	0x1001a1ee
1000ea6c:	100150e5 	.word	0x100150e5
1000ea70:	1001a1a8 	.word	0x1001a1a8
1000ea74:	1001a454 	.word	0x1001a454
1000ea78:	10015103 	.word	0x10015103
1000ea7c:	1001a414 	.word	0x1001a414
1000ea80:	1000e6cd 	.word	0x1000e6cd
1000ea84:	10016528 	.word	0x10016528
1000ea88:	1001537d 	.word	0x1001537d
1000ea8c:	10017f64 	.word	0x10017f64
1000ea90:	1001525d 	.word	0x1001525d
1000ea94:	10017f7c 	.word	0x10017f7c
1000ea98:	1001a282 	.word	0x1001a282
1000ea9c:	10017f98 	.word	0x10017f98

1000eaa0 <ble_event_manager>:
	}
	return AT_BLE_SUCCESS;
}

void ble_event_manager(at_ble_events_t events, void *event_params)
{
1000eaa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000eaa2:	0004      	movs	r4, r0
1000eaa4:	000d      	movs	r5, r1
	DBG_LOG_DEV("\r\nBLE-Event:%d", events);
1000eaa6:	4848      	ldr	r0, [pc, #288]	; (1000ebc8 <ble_event_manager+0x128>)
1000eaa8:	4b48      	ldr	r3, [pc, #288]	; (1000ebcc <ble_event_manager+0x12c>)
1000eaaa:	4798      	blx	r3
1000eaac:	0021      	movs	r1, r4
1000eaae:	4848      	ldr	r0, [pc, #288]	; (1000ebd0 <ble_event_manager+0x130>)
1000eab0:	4b48      	ldr	r3, [pc, #288]	; (1000ebd4 <ble_event_manager+0x134>)
1000eab2:	4798      	blx	r3
	switch(events)
1000eab4:	2c3b      	cmp	r4, #59	; 0x3b
1000eab6:	d879      	bhi.n	1000ebac <ble_event_manager+0x10c>
1000eab8:	00a3      	lsls	r3, r4, #2
1000eaba:	4a47      	ldr	r2, [pc, #284]	; (1000ebd8 <ble_event_manager+0x138>)
1000eabc:	58d3      	ldr	r3, [r2, r3]
1000eabe:	469f      	mov	pc, r3
		for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gap_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gap_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000eac0:	00a4      	lsls	r4, r4, #2
1000eac2:	2600      	movs	r6, #0
		}
		#endif			
		
		for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gap_event_cb[idx] != NULL)
1000eac4:	4f45      	ldr	r7, [pc, #276]	; (1000ebdc <ble_event_manager+0x13c>)
1000eac6:	59bb      	ldr	r3, [r7, r6]
1000eac8:	2b00      	cmp	r3, #0
1000eaca:	d004      	beq.n	1000ead6 <ble_event_manager+0x36>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gap_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000eacc:	591b      	ldr	r3, [r3, r4]
1000eace:	2b00      	cmp	r3, #0
1000ead0:	d001      	beq.n	1000ead6 <ble_event_manager+0x36>
				{
					event_cb_fn[events](event_params);		
1000ead2:	0028      	movs	r0, r5
1000ead4:	4798      	blx	r3
1000ead6:	3604      	adds	r6, #4
			if( ble_scan_duplication_check((at_ble_scan_info_t*)event_params) )
				return;
		}
		#endif			
		
		for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
1000ead8:	2e14      	cmp	r6, #20
1000eada:	d1f4      	bne.n	1000eac6 <ble_event_manager+0x26>
1000eadc:	e072      	b.n	1000ebc4 <ble_event_manager+0x124>
		for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_client_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_client_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000eade:	3c13      	subs	r4, #19
1000eae0:	b2e4      	uxtb	r4, r4
1000eae2:	00a4      	lsls	r4, r4, #2
1000eae4:	2600      	movs	r6, #0
	{
		uint8_t idx;
		events -= (AT_BLE_CON_CHANNEL_MAP_IND + 1);
		for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_client_event_cb[idx] != NULL)
1000eae6:	4f3e      	ldr	r7, [pc, #248]	; (1000ebe0 <ble_event_manager+0x140>)
1000eae8:	59bb      	ldr	r3, [r7, r6]
1000eaea:	2b00      	cmp	r3, #0
1000eaec:	d004      	beq.n	1000eaf8 <ble_event_manager+0x58>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_client_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000eaee:	591b      	ldr	r3, [r3, r4]
1000eaf0:	2b00      	cmp	r3, #0
1000eaf2:	d001      	beq.n	1000eaf8 <ble_event_manager+0x58>
				{
					event_cb_fn[events](event_params);
1000eaf4:	0028      	movs	r0, r5
1000eaf6:	4798      	blx	r3
1000eaf8:	3604      	adds	r6, #4
	case AT_BLE_NOTIFICATION_RECIEVED:
	case AT_BLE_INDICATION_RECIEVED:
	{
		uint8_t idx;
		events -= (AT_BLE_CON_CHANNEL_MAP_IND + 1);
		for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
1000eafa:	2e14      	cmp	r6, #20
1000eafc:	d1f4      	bne.n	1000eae8 <ble_event_manager+0x48>
1000eafe:	e061      	b.n	1000ebc4 <ble_event_manager+0x124>
	case AT_BLE_MTU_CHANGED_CMD_COMPLETE:
	case AT_BLE_CHARACTERISTIC_WRITE_CMD_CMP:
	case AT_BLE_READ_AUTHORIZE_REQUEST:
	{
		uint8_t idx;
		events -= (AT_BLE_INDICATION_RECIEVED + 1);
1000eb00:	3c1d      	subs	r4, #29
1000eb02:	b2e4      	uxtb	r4, r4
		DBG_LOG_DEV("GATT_Server Event:%d", events);
1000eb04:	4830      	ldr	r0, [pc, #192]	; (1000ebc8 <ble_event_manager+0x128>)
1000eb06:	4b31      	ldr	r3, [pc, #196]	; (1000ebcc <ble_event_manager+0x12c>)
1000eb08:	4798      	blx	r3
1000eb0a:	0021      	movs	r1, r4
1000eb0c:	4835      	ldr	r0, [pc, #212]	; (1000ebe4 <ble_event_manager+0x144>)
1000eb0e:	4b31      	ldr	r3, [pc, #196]	; (1000ebd4 <ble_event_manager+0x134>)
1000eb10:	4798      	blx	r3
		for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_server_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_server_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000eb12:	00a4      	lsls	r4, r4, #2
1000eb14:	2600      	movs	r6, #0
		uint8_t idx;
		events -= (AT_BLE_INDICATION_RECIEVED + 1);
		DBG_LOG_DEV("GATT_Server Event:%d", events);
		for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_server_event_cb[idx] != NULL)
1000eb16:	4f34      	ldr	r7, [pc, #208]	; (1000ebe8 <ble_event_manager+0x148>)
1000eb18:	59bb      	ldr	r3, [r7, r6]
1000eb1a:	2b00      	cmp	r3, #0
1000eb1c:	d004      	beq.n	1000eb28 <ble_event_manager+0x88>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_server_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000eb1e:	591b      	ldr	r3, [r3, r4]
1000eb20:	2b00      	cmp	r3, #0
1000eb22:	d001      	beq.n	1000eb28 <ble_event_manager+0x88>
				{
					event_cb_fn[events](event_params);
1000eb24:	0028      	movs	r0, r5
1000eb26:	4798      	blx	r3
1000eb28:	3604      	adds	r6, #4
	case AT_BLE_READ_AUTHORIZE_REQUEST:
	{
		uint8_t idx;
		events -= (AT_BLE_INDICATION_RECIEVED + 1);
		DBG_LOG_DEV("GATT_Server Event:%d", events);
		for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
1000eb2a:	2e14      	cmp	r6, #20
1000eb2c:	d1f4      	bne.n	1000eb18 <ble_event_manager+0x78>
1000eb2e:	e049      	b.n	1000ebc4 <ble_event_manager+0x124>
	case AT_BLE_LECB_ADD_CREDIT_IND:
	case AT_BLE_LECB_SEND_RESP:
	case AT_BLE_LECB_DATA_RECIEVED:
	{
		uint8_t idx;
		events -= (AT_BLE_READ_AUTHORIZE_REQUEST + 1);
1000eb30:	3c27      	subs	r4, #39	; 0x27
1000eb32:	b2e4      	uxtb	r4, r4
		for (idx = 0; idx < MAX_L2CAP_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_l2cap_event_cb[idx] != NULL)
1000eb34:	4b2d      	ldr	r3, [pc, #180]	; (1000ebec <ble_event_manager+0x14c>)
1000eb36:	681b      	ldr	r3, [r3, #0]
1000eb38:	2b00      	cmp	r3, #0
1000eb3a:	d043      	beq.n	1000ebc4 <ble_event_manager+0x124>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_l2cap_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000eb3c:	00a4      	lsls	r4, r4, #2
1000eb3e:	58e3      	ldr	r3, [r4, r3]
1000eb40:	2b00      	cmp	r3, #0
1000eb42:	d03f      	beq.n	1000ebc4 <ble_event_manager+0x124>
				{
					event_cb_fn[events](event_params);
1000eb44:	0028      	movs	r0, r5
1000eb46:	4798      	blx	r3
1000eb48:	e03c      	b.n	1000ebc4 <ble_event_manager+0x124>
	case AT_BLE_HTPT_ENABLE_RSP:
	case AT_BLE_HTPT_MEAS_INTV_UPD_RSP:
	case AT_BLE_HTPT_MEAS_INTV_CHG_REQ:
	{
		uint8_t idx;
		events -= (AT_BLE_LECB_DATA_RECIEVED + 1);
1000eb4a:	3c2d      	subs	r4, #45	; 0x2d
1000eb4c:	b2e4      	uxtb	r4, r4
		for (idx = 0; idx < MAX_HTPT_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_htpt_event_cb[idx] != NULL)
1000eb4e:	4b28      	ldr	r3, [pc, #160]	; (1000ebf0 <ble_event_manager+0x150>)
1000eb50:	681b      	ldr	r3, [r3, #0]
1000eb52:	2b00      	cmp	r3, #0
1000eb54:	d036      	beq.n	1000ebc4 <ble_event_manager+0x124>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_htpt_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000eb56:	00a4      	lsls	r4, r4, #2
1000eb58:	58e3      	ldr	r3, [r4, r3]
1000eb5a:	2b00      	cmp	r3, #0
1000eb5c:	d032      	beq.n	1000ebc4 <ble_event_manager+0x124>
				{
					event_cb_fn[events](event_params);
1000eb5e:	0028      	movs	r0, r5
1000eb60:	4798      	blx	r3
1000eb62:	e02f      	b.n	1000ebc4 <ble_event_manager+0x124>
		for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_dtm_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_dtm_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000eb64:	3c36      	subs	r4, #54	; 0x36
1000eb66:	b2e4      	uxtb	r4, r4
1000eb68:	00a4      	lsls	r4, r4, #2
1000eb6a:	2600      	movs	r6, #0
	{
		uint8_t idx;
		events -= (AT_BLE_HTPT_MEAS_INTV_CHG_REQ + 1);
		for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_dtm_event_cb[idx] != NULL)
1000eb6c:	4f21      	ldr	r7, [pc, #132]	; (1000ebf4 <ble_event_manager+0x154>)
1000eb6e:	59bb      	ldr	r3, [r7, r6]
1000eb70:	2b00      	cmp	r3, #0
1000eb72:	d004      	beq.n	1000eb7e <ble_event_manager+0xde>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_dtm_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000eb74:	591b      	ldr	r3, [r3, r4]
1000eb76:	2b00      	cmp	r3, #0
1000eb78:	d001      	beq.n	1000eb7e <ble_event_manager+0xde>
				{
					event_cb_fn[events](event_params);
1000eb7a:	0028      	movs	r0, r5
1000eb7c:	4798      	blx	r3
1000eb7e:	3604      	adds	r6, #4
	case AT_BLE_LE_TEST_STATUS:
	case AT_BLE_LE_PACKET_REPORT:
	{
		uint8_t idx;
		events -= (AT_BLE_HTPT_MEAS_INTV_CHG_REQ + 1);
		for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
1000eb80:	2e14      	cmp	r6, #20
1000eb82:	d1f4      	bne.n	1000eb6e <ble_event_manager+0xce>
1000eb84:	e01e      	b.n	1000ebc4 <ble_event_manager+0x124>
	case AT_BLE_CUSTOM_EVENT:
	case AT_BLE_DEVICE_READY:
	case AT_BLE_EVENT_MAX:
	{
		uint8_t idx;
		events -= (AT_BLE_LE_PACKET_REPORT + 1);
1000eb86:	3c38      	subs	r4, #56	; 0x38
1000eb88:	b2e4      	uxtb	r4, r4
		for (idx = 0; idx < MAX_CUSTOM_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_custom_event_cb[idx] != NULL)
1000eb8a:	4b1b      	ldr	r3, [pc, #108]	; (1000ebf8 <ble_event_manager+0x158>)
1000eb8c:	681b      	ldr	r3, [r3, #0]
1000eb8e:	2b00      	cmp	r3, #0
1000eb90:	d018      	beq.n	1000ebc4 <ble_event_manager+0x124>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_custom_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000eb92:	00a4      	lsls	r4, r4, #2
1000eb94:	58e3      	ldr	r3, [r4, r3]
1000eb96:	2b00      	cmp	r3, #0
1000eb98:	d014      	beq.n	1000ebc4 <ble_event_manager+0x124>
				{
					event_cb_fn[events](event_params);
1000eb9a:	0028      	movs	r0, r5
1000eb9c:	4798      	blx	r3
1000eb9e:	e011      	b.n	1000ebc4 <ble_event_manager+0x124>
	}
	break;

	case AT_PLATFORM_EVENT:
	{
		if (ble_user_event_cb) {
1000eba0:	4b16      	ldr	r3, [pc, #88]	; (1000ebfc <ble_event_manager+0x15c>)
1000eba2:	681b      	ldr	r3, [r3, #0]
1000eba4:	2b00      	cmp	r3, #0
1000eba6:	d00d      	beq.n	1000ebc4 <ble_event_manager+0x124>
			ble_user_event_cb();
1000eba8:	4798      	blx	r3
1000ebaa:	e00b      	b.n	1000ebc4 <ble_event_manager+0x124>
	}
	break;

	default:
	{
		DBG_LOG_DEV("BLE-Manager:Unknown Event=0x%X", events);
1000ebac:	4e06      	ldr	r6, [pc, #24]	; (1000ebc8 <ble_event_manager+0x128>)
1000ebae:	0030      	movs	r0, r6
1000ebb0:	4d06      	ldr	r5, [pc, #24]	; (1000ebcc <ble_event_manager+0x12c>)
1000ebb2:	47a8      	blx	r5
1000ebb4:	0021      	movs	r1, r4
1000ebb6:	4812      	ldr	r0, [pc, #72]	; (1000ec00 <ble_event_manager+0x160>)
1000ebb8:	4b06      	ldr	r3, [pc, #24]	; (1000ebd4 <ble_event_manager+0x134>)
1000ebba:	4798      	blx	r3
		DBG_LOG("\r\n");
1000ebbc:	0030      	movs	r0, r6
1000ebbe:	47a8      	blx	r5
1000ebc0:	0030      	movs	r0, r6
1000ebc2:	47a8      	blx	r5
	}
	break;		
	}
}
1000ebc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000ebc6:	46c0      	nop			; (mov r8, r8)
1000ebc8:	10016528 	.word	0x10016528
1000ebcc:	1001537d 	.word	0x1001537d
1000ebd0:	10017fa8 	.word	0x10017fa8
1000ebd4:	1001525d 	.word	0x1001525d
1000ebd8:	10017508 	.word	0x10017508
1000ebdc:	1001a42c 	.word	0x1001a42c
1000ebe0:	1001a440 	.word	0x1001a440
1000ebe4:	10017fb8 	.word	0x10017fb8
1000ebe8:	1001a194 	.word	0x1001a194
1000ebec:	1001a488 	.word	0x1001a488
1000ebf0:	1001a190 	.word	0x1001a190
1000ebf4:	1001a418 	.word	0x1001a418
1000ebf8:	1001a9cc 	.word	0x1001a9cc
1000ebfc:	10018d0c 	.word	0x10018d0c
1000ec00:	10017fd0 	.word	0x10017fd0

1000ec04 <ble_event_task>:
	return ulp_status;
}

/** @brief function to get event from stack */
at_ble_status_t ble_event_task(uint32_t timeout)
{
1000ec04:	b570      	push	{r4, r5, r6, lr}
1000ec06:	0004      	movs	r4, r0
	return status;
}

ble_ulp_mode_t ble_get_ulp_status(void)
{
	return ulp_status;
1000ec08:	4b0d      	ldr	r3, [pc, #52]	; (1000ec40 <ble_event_task+0x3c>)
1000ec0a:	781b      	ldrb	r3, [r3, #0]
/** @brief function to get event from stack */
at_ble_status_t ble_event_task(uint32_t timeout)
{
	at_ble_status_t status;
	
	if (ble_get_ulp_status() == BLE_ULP_MODE_SET)
1000ec0c:	2b01      	cmp	r3, #1
1000ec0e:	d101      	bne.n	1000ec14 <ble_event_task+0x10>
	{
		release_sleep_lock();
1000ec10:	4b0c      	ldr	r3, [pc, #48]	; (1000ec44 <ble_event_task+0x40>)
1000ec12:	4798      	blx	r3
	}	
	status = at_ble_event_get(&event, ble_event_params, timeout);
1000ec14:	0022      	movs	r2, r4
1000ec16:	490c      	ldr	r1, [pc, #48]	; (1000ec48 <ble_event_task+0x44>)
1000ec18:	480c      	ldr	r0, [pc, #48]	; (1000ec4c <ble_event_task+0x48>)
1000ec1a:	4b0d      	ldr	r3, [pc, #52]	; (1000ec50 <ble_event_task+0x4c>)
1000ec1c:	4798      	blx	r3
1000ec1e:	0004      	movs	r4, r0
1000ec20:	0005      	movs	r5, r0
	return status;
}

ble_ulp_mode_t ble_get_ulp_status(void)
{
	return ulp_status;
1000ec22:	4b07      	ldr	r3, [pc, #28]	; (1000ec40 <ble_event_task+0x3c>)
1000ec24:	781b      	ldrb	r3, [r3, #0]
	{
		release_sleep_lock();
	}	
	status = at_ble_event_get(&event, ble_event_params, timeout);
	
	if (ble_get_ulp_status() == BLE_ULP_MODE_SET)
1000ec26:	2b01      	cmp	r3, #1
1000ec28:	d101      	bne.n	1000ec2e <ble_event_task+0x2a>
	{
		acquire_sleep_lock();
1000ec2a:	4b0a      	ldr	r3, [pc, #40]	; (1000ec54 <ble_event_task+0x50>)
1000ec2c:	4798      	blx	r3
	}
	
    if (status == AT_BLE_SUCCESS) 
1000ec2e:	2d00      	cmp	r5, #0
1000ec30:	d104      	bne.n	1000ec3c <ble_event_task+0x38>
    {		
            ble_event_manager(event, ble_event_params);
1000ec32:	4b06      	ldr	r3, [pc, #24]	; (1000ec4c <ble_event_task+0x48>)
1000ec34:	7818      	ldrb	r0, [r3, #0]
1000ec36:	4904      	ldr	r1, [pc, #16]	; (1000ec48 <ble_event_task+0x44>)
1000ec38:	4b07      	ldr	r3, [pc, #28]	; (1000ec58 <ble_event_task+0x54>)
1000ec3a:	4798      	blx	r3
    }
    
    return status;
}
1000ec3c:	0020      	movs	r0, r4
1000ec3e:	bd70      	pop	{r4, r5, r6, pc}
1000ec40:	10018d1b 	.word	0x10018d1b
1000ec44:	1000f615 	.word	0x1000f615
1000ec48:	1001a7c0 	.word	0x1001a7c0
1000ec4c:	1001a484 	.word	0x1001a484
1000ec50:	1000fcf9 	.word	0x1000fcf9
1000ec54:	1000f5ed 	.word	0x1000f5ed
1000ec58:	1000eaa1 	.word	0x1000eaa1

1000ec5c <ble_advertisement_data_set>:
	}
}

/* Advertisement Data will be set based on the advertisement configuration */
at_ble_status_t ble_advertisement_data_set(void)
{
1000ec5c:	b510      	push	{r4, lr}
1000ec5e:	b090      	sub	sp, #64	; 0x40
		uint8_t length_field_ind;
		uint8_t adv_element_len;
		adv_buf[adv_data_element.len] = adv_data_element.len;
		length_field_ind = adv_data_element.len;
		adv_data_element.len++;
		adv_buf[adv_data_element.len++] = COMPLETE_LIST_16BIT_SERV_UUIDS;
1000ec60:	ac08      	add	r4, sp, #32
1000ec62:	2203      	movs	r2, #3
1000ec64:	7062      	strb	r2, [r4, #1]
		MREPEAT(SERVICE_UUID16_MAX_NUM, _CONF_SERVICE_16BIT_UUID, &adv_data_element);
1000ec66:	2302      	movs	r3, #2
1000ec68:	70a3      	strb	r3, [r4, #2]
1000ec6a:	3316      	adds	r3, #22
1000ec6c:	70e3      	strb	r3, [r4, #3]
1000ec6e:	7122      	strb	r2, [r4, #4]
1000ec70:	7163      	strb	r3, [r4, #5]
1000ec72:	3201      	adds	r2, #1
1000ec74:	71a2      	strb	r2, [r4, #6]
1000ec76:	71e3      	strb	r3, [r4, #7]
1000ec78:	320b      	adds	r2, #11
1000ec7a:	7222      	strb	r2, [r4, #8]
1000ec7c:	7263      	strb	r3, [r4, #9]
		adv_element_len = adv_data_element.len - (length_field_ind + ADV_ELEMENT_SIZE);
		if(adv_element_len) 
		{			
			adv_buf[length_field_ind] = adv_element_len+ADV_TYPE_SIZE;
1000ec7e:	3b0f      	subs	r3, #15
1000ec80:	7023      	strb	r3, [r4, #0]
	#endif
	
	#if (BLE_GAP_ADV_COMPLETE_LOCAL_NAME_ENABLE && !BLE_GAP_ADV_SHORTENED_LOCAL_NAME_ENABLE)
	#if (BLE_GAP_ADV_COMPLETE_LOCAL_NAME_SCN_RSP_ENABLE != SCAN_RESPONSE_ONLY_ENABLE)
	if((adv_data_element.len) <= (AT_BLE_ADV_MAX_SIZE - (ADV_TYPE_FLAG_SIZE + ADV_ELEMENT_SIZE + BLE_GAP_ADV_DATA_COMPLETE_LOCAL_NAME_LENGTH))) {
		adv_buf[adv_data_element.len++] = BLE_GAP_ADV_DATA_COMPLETE_LOCAL_NAME_LENGTH + ADV_TYPE_SIZE;
1000ec82:	3a05      	subs	r2, #5
1000ec84:	72a2      	strb	r2, [r4, #10]
		adv_buf[adv_data_element.len++] = COMPLETE_LOCAL_NAME;
1000ec86:	72e3      	strb	r3, [r4, #11]
		memcpy(&adv_buf[adv_data_element.len], BLE_GAP_ADV_DATA_COMPLETE_LOCAL_NAME, BLE_GAP_ADV_DATA_COMPLETE_LOCAL_NAME_LENGTH);
1000ec88:	aa0b      	add	r2, sp, #44	; 0x2c
1000ec8a:	4b16      	ldr	r3, [pc, #88]	; (1000ece4 <ble_advertisement_data_set+0x88>)
1000ec8c:	cb03      	ldmia	r3!, {r0, r1}
1000ec8e:	c203      	stmia	r2!, {r0, r1}
1000ec90:	781b      	ldrb	r3, [r3, #0]
1000ec92:	7013      	strb	r3, [r2, #0]
	#endif
	#if ((BLE_GAP_ADV_SERVICE_SOLTN_128BIT_UUID_SCN_RSP_ENABLE == SCAN_RESPONSE_ENABLE) || (BLE_GAP_ADV_SERVICE_SOLTN_128BIT_UUID_SCN_RSP_ENABLE == SCAN_RESPONSE_ONLY_ENABLE))
	else if((scan_resp_data_element.len) <= (AT_BLE_ADV_MAX_SIZE - (ADV_ELEMENT_SIZE + BLE_GAP_ADV_SERVICE_128BIT_UUID_LENGTH))) {
		uint8_t length_field_ind;
		uint8_t scan_resp_element_len;
		scn_resp[scan_resp_data_element.len] = scan_resp_data_element.len;
1000ec94:	2300      	movs	r3, #0
1000ec96:	466a      	mov	r2, sp
1000ec98:	7013      	strb	r3, [r2, #0]
		length_field_ind = scan_resp_data_element.len;
		scan_resp_data_element.len++;
		scn_resp[scan_resp_data_element.len++] = LIST_128BIT_SERV_SOLICITATION_UUIDS;
1000ec9a:	3315      	adds	r3, #21
1000ec9c:	7053      	strb	r3, [r2, #1]
		return AT_BLE_GAP_INVALID_PARAM;
	}
	#endif
	
	#if BLE_GAP_ADV_MANUFACTURER_SPECIFIC_DATA_ENABLE
    DBG_LOG_DEV("[ble_manager]\t\t\tManufacturer specific data enabled");
1000ec9e:	4812      	ldr	r0, [pc, #72]	; (1000ece8 <ble_advertisement_data_set+0x8c>)
1000eca0:	4b12      	ldr	r3, [pc, #72]	; (1000ecec <ble_advertisement_data_set+0x90>)
1000eca2:	4798      	blx	r3
1000eca4:	4812      	ldr	r0, [pc, #72]	; (1000ecf0 <ble_advertisement_data_set+0x94>)
1000eca6:	4b13      	ldr	r3, [pc, #76]	; (1000ecf4 <ble_advertisement_data_set+0x98>)
1000eca8:	4798      	blx	r3
    DBG_LOG_DEV("[ble_manager]\t\tManufacturer specific data NOT enabled");
	if(false){}
	#endif
	#if ((BLE_GAP_ADV_MANUFACTURER_SPECIFIC_DATA_SCN_RSP_ENABLE == SCAN_RESPONSE_ENABLE) || (BLE_GAP_ADV_MANUFACTURER_SPECIFIC_DATA_SCN_RSP_ENABLE == SCAN_RESPONSE_ONLY_ENABLE))
	else if((scan_resp_data_element.len) <= (AT_BLE_ADV_MAX_SIZE - (ADV_ELEMENT_SIZE + BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA_SIZE))) {
		scn_resp[scan_resp_data_element.len++] = BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA_SIZE + ADV_TYPE_SIZE;
1000ecaa:	2307      	movs	r3, #7
1000ecac:	466a      	mov	r2, sp
1000ecae:	7013      	strb	r3, [r2, #0]
		scn_resp[scan_resp_data_element.len++] = MANUFACTURER_SPECIFIC_DATA;
1000ecb0:	33f8      	adds	r3, #248	; 0xf8
1000ecb2:	7053      	strb	r3, [r2, #1]
		memcpy(&scn_resp[scan_resp_data_element.len], BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA, BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA_SIZE);
1000ecb4:	2206      	movs	r2, #6
1000ecb6:	4910      	ldr	r1, [pc, #64]	; (1000ecf8 <ble_advertisement_data_set+0x9c>)
1000ecb8:	466b      	mov	r3, sp
1000ecba:	1c98      	adds	r0, r3, #2
1000ecbc:	4b0f      	ldr	r3, [pc, #60]	; (1000ecfc <ble_advertisement_data_set+0xa0>)
1000ecbe:	4798      	blx	r3
		DBG_LOG_ADV("Failed to add Manufacturer specific data");
		return AT_BLE_GAP_INVALID_PARAM;
	}
	#endif
	
	if (at_ble_adv_data_set(adv_buf, adv_data_element.len, scn_resp,
1000ecc0:	2308      	movs	r3, #8
1000ecc2:	466a      	mov	r2, sp
1000ecc4:	2115      	movs	r1, #21
1000ecc6:	0020      	movs	r0, r4
1000ecc8:	4c0d      	ldr	r4, [pc, #52]	; (1000ed00 <ble_advertisement_data_set+0xa4>)
1000ecca:	47a0      	blx	r4
1000eccc:	2800      	cmp	r0, #0
1000ecce:	d005      	beq.n	1000ecdc <ble_advertisement_data_set+0x80>
	scan_resp_data_element.len) != AT_BLE_SUCCESS) {
		DBG_LOG("BLE Advertisement data set failed");
1000ecd0:	4805      	ldr	r0, [pc, #20]	; (1000ece8 <ble_advertisement_data_set+0x8c>)
1000ecd2:	4b06      	ldr	r3, [pc, #24]	; (1000ecec <ble_advertisement_data_set+0x90>)
1000ecd4:	4798      	blx	r3
1000ecd6:	480b      	ldr	r0, [pc, #44]	; (1000ed04 <ble_advertisement_data_set+0xa8>)
1000ecd8:	4b06      	ldr	r3, [pc, #24]	; (1000ecf4 <ble_advertisement_data_set+0x98>)
1000ecda:	4798      	blx	r3
            //DBG_LOG_ADV("- 0x%02x(%c) ", adv_buf[i], adv_buf[i]);
        //}
		//DBG_LOG_ADV("BLE Advertisement data set success");
		return AT_BLE_SUCCESS;
    }
}
1000ecdc:	2000      	movs	r0, #0
1000ecde:	b010      	add	sp, #64	; 0x40
1000ece0:	bd10      	pop	{r4, pc}
1000ece2:	46c0      	nop			; (mov r8, r8)
1000ece4:	10017cec 	.word	0x10017cec
1000ece8:	10016528 	.word	0x10016528
1000ecec:	1001537d 	.word	0x1001537d
1000ecf0:	10017ff0 	.word	0x10017ff0
1000ecf4:	1001525d 	.word	0x1001525d
1000ecf8:	10018024 	.word	0x10018024
1000ecfc:	10015103 	.word	0x10015103
1000ed00:	10010759 	.word	0x10010759
1000ed04:	1001802c 	.word	0x1001802c

1000ed08 <uart_read_complete_callback>:

void _time_start(unsigned int sec);
unsigned int _time_done(void);

static void uart_read_complete_callback(struct uart_module *const module)
{
1000ed08:	b510      	push	{r4, lr}
	if(read_status == UART_READ_WAITING) {
1000ed0a:	4b0e      	ldr	r3, [pc, #56]	; (1000ed44 <uart_read_complete_callback+0x3c>)
1000ed0c:	781b      	ldrb	r3, [r3, #0]
1000ed0e:	2b01      	cmp	r3, #1
1000ed10:	d10b      	bne.n	1000ed2a <uart_read_complete_callback+0x22>
		read_status = UART_READ_DONE;
1000ed12:	2202      	movs	r2, #2
1000ed14:	4b0b      	ldr	r3, [pc, #44]	; (1000ed44 <uart_read_complete_callback+0x3c>)
1000ed16:	701a      	strb	r2, [r3, #0]
		
		if(user_callback_func == NULL)
1000ed18:	4b0b      	ldr	r3, [pc, #44]	; (1000ed48 <uart_read_complete_callback+0x40>)
1000ed1a:	681b      	ldr	r3, [r3, #0]
1000ed1c:	2b00      	cmp	r3, #0
1000ed1e:	d110      	bne.n	1000ed42 <uart_read_complete_callback+0x3a>
			uart_disable_callback(&uart_instance, UART_RX_COMPLETE);
1000ed20:	2102      	movs	r1, #2
1000ed22:	480a      	ldr	r0, [pc, #40]	; (1000ed4c <uart_read_complete_callback+0x44>)
1000ed24:	4b0a      	ldr	r3, [pc, #40]	; (1000ed50 <uart_read_complete_callback+0x48>)
1000ed26:	4798      	blx	r3
1000ed28:	e00b      	b.n	1000ed42 <uart_read_complete_callback+0x3a>
	}
	else if(user_callback_func != NULL) {
1000ed2a:	4b07      	ldr	r3, [pc, #28]	; (1000ed48 <uart_read_complete_callback+0x40>)
1000ed2c:	681b      	ldr	r3, [r3, #0]
1000ed2e:	2b00      	cmp	r3, #0
1000ed30:	d007      	beq.n	1000ed42 <uart_read_complete_callback+0x3a>
		user_callback_func(string_input[0]);
1000ed32:	4c08      	ldr	r4, [pc, #32]	; (1000ed54 <uart_read_complete_callback+0x4c>)
1000ed34:	7820      	ldrb	r0, [r4, #0]
1000ed36:	4798      	blx	r3
		uart_read_buffer_job(&uart_instance, string_input, sizeof(string_input));
1000ed38:	2201      	movs	r2, #1
1000ed3a:	0021      	movs	r1, r4
1000ed3c:	4803      	ldr	r0, [pc, #12]	; (1000ed4c <uart_read_complete_callback+0x44>)
1000ed3e:	4b06      	ldr	r3, [pc, #24]	; (1000ed58 <uart_read_complete_callback+0x50>)
1000ed40:	4798      	blx	r3
	}
	else {
		//Nothing to do.
	}
}
1000ed42:	bd10      	pop	{r4, pc}
1000ed44:	10019d20 	.word	0x10019d20
1000ed48:	10019d28 	.word	0x10019d28
1000ed4c:	1001a9d0 	.word	0x1001a9d0
1000ed50:	1000d6f9 	.word	0x1000d6f9
1000ed54:	10019d24 	.word	0x10019d24
1000ed58:	1000d69d 	.word	0x1000d69d

1000ed5c <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct uart_module *const module,
		uint8_t *c)
{
1000ed5c:	b570      	push	{r4, r5, r6, lr}
1000ed5e:	0006      	movs	r6, r0
1000ed60:	000d      	movs	r5, r1
	while(STATUS_OK != uart_read_wait(module, c));
1000ed62:	4c03      	ldr	r4, [pc, #12]	; (1000ed70 <usart_serial_getchar+0x14>)
1000ed64:	0029      	movs	r1, r5
1000ed66:	0030      	movs	r0, r6
1000ed68:	47a0      	blx	r4
1000ed6a:	2800      	cmp	r0, #0
1000ed6c:	d1fa      	bne.n	1000ed64 <usart_serial_getchar+0x8>
}
1000ed6e:	bd70      	pop	{r4, r5, r6, pc}
1000ed70:	1000d689 	.word	0x1000d689

1000ed74 <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct uart_module *const module,
		uint8_t c)
{
1000ed74:	b570      	push	{r4, r5, r6, lr}
1000ed76:	0006      	movs	r6, r0
1000ed78:	000d      	movs	r5, r1
	while(STATUS_OK !=uart_write_wait(module, c));
1000ed7a:	4c03      	ldr	r4, [pc, #12]	; (1000ed88 <usart_serial_putchar+0x14>)
1000ed7c:	0029      	movs	r1, r5
1000ed7e:	0030      	movs	r0, r6
1000ed80:	47a0      	blx	r4
1000ed82:	2800      	cmp	r0, #0
1000ed84:	d1fa      	bne.n	1000ed7c <usart_serial_putchar+0x8>

	return STATUS_OK;
}
1000ed86:	bd70      	pop	{r4, r5, r6, pc}
1000ed88:	1000d679 	.word	0x1000d679

1000ed8c <serial_console_init>:

void serial_console_init(void)
{
1000ed8c:	b570      	push	{r4, r5, r6, lr}
	system_clock_config(CLOCK_RESOURCE_XO_26_MHZ, CLOCK_FREQ_26_MHZ);
1000ed8e:	2100      	movs	r1, #0
1000ed90:	2000      	movs	r0, #0
1000ed92:	4b19      	ldr	r3, [pc, #100]	; (1000edf8 <serial_console_init+0x6c>)
1000ed94:	4798      	blx	r3

	uart_get_config_defaults(&config_uart);
1000ed96:	4c19      	ldr	r4, [pc, #100]	; (1000edfc <serial_console_init+0x70>)
1000ed98:	0020      	movs	r0, r4
1000ed9a:	4b19      	ldr	r3, [pc, #100]	; (1000ee00 <serial_console_init+0x74>)
1000ed9c:	4798      	blx	r3

	config_uart.baud_rate = CONF_STDIO_BAUDRATE;
1000ed9e:	23e1      	movs	r3, #225	; 0xe1
1000eda0:	025b      	lsls	r3, r3, #9
1000eda2:	6023      	str	r3, [r4, #0]
	config_uart.pin_number_pad[0] = EDBG_CDC_PIN_PAD0;
1000eda4:	2302      	movs	r3, #2
1000eda6:	60a3      	str	r3, [r4, #8]
	config_uart.pin_number_pad[1] = EDBG_CDC_PIN_PAD1;
1000eda8:	2203      	movs	r2, #3
1000edaa:	60e2      	str	r2, [r4, #12]
	config_uart.pin_number_pad[2] = EDBG_CDC_PIN_PAD2;
1000edac:	3201      	adds	r2, #1
1000edae:	6122      	str	r2, [r4, #16]
	config_uart.pin_number_pad[3] = EDBG_CDC_PIN_PAD3;
1000edb0:	3201      	adds	r2, #1
1000edb2:	6162      	str	r2, [r4, #20]
	
	config_uart.pinmux_sel_pad[0] = EDBG_CDC_MUX_PAD0;
1000edb4:	61a3      	str	r3, [r4, #24]
	config_uart.pinmux_sel_pad[1] = EDBG_CDC_MUX_PAD1;
1000edb6:	61e3      	str	r3, [r4, #28]
	config_uart.pinmux_sel_pad[2] = EDBG_CDC_MUX_PAD2;
1000edb8:	6223      	str	r3, [r4, #32]
	config_uart.pinmux_sel_pad[3] = EDBG_CDC_MUX_PAD3;
1000edba:	6263      	str	r3, [r4, #36]	; 0x24
static inline void stdio_serial_init(
		struct uart_module *const module,
		Uart * const hw,
		const struct uart_config *const config)
{
	stdio_base = (void *)module;
1000edbc:	4d11      	ldr	r5, [pc, #68]	; (1000ee04 <serial_console_init+0x78>)
1000edbe:	4b12      	ldr	r3, [pc, #72]	; (1000ee08 <serial_console_init+0x7c>)
1000edc0:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
1000edc2:	4a12      	ldr	r2, [pc, #72]	; (1000ee0c <serial_console_init+0x80>)
1000edc4:	4b12      	ldr	r3, [pc, #72]	; (1000ee10 <serial_console_init+0x84>)
1000edc6:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
1000edc8:	4a12      	ldr	r2, [pc, #72]	; (1000ee14 <serial_console_init+0x88>)
1000edca:	4b13      	ldr	r3, [pc, #76]	; (1000ee18 <serial_console_init+0x8c>)
1000edcc:	601a      	str	r2, [r3, #0]
static inline bool usart_serial_init(
		struct uart_module *const module,
		Uart * const hw,
		const struct uart_config *const config)
{
	if (uart_init(module, hw, config) == STATUS_OK) {
1000edce:	0022      	movs	r2, r4
1000edd0:	4912      	ldr	r1, [pc, #72]	; (1000ee1c <serial_console_init+0x90>)
1000edd2:	0028      	movs	r0, r5
1000edd4:	4b12      	ldr	r3, [pc, #72]	; (1000ee20 <serial_console_init+0x94>)
1000edd6:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
1000edd8:	4e12      	ldr	r6, [pc, #72]	; (1000ee24 <serial_console_init+0x98>)
1000edda:	6833      	ldr	r3, [r6, #0]
1000eddc:	6898      	ldr	r0, [r3, #8]
1000edde:	2100      	movs	r1, #0
1000ede0:	4c11      	ldr	r4, [pc, #68]	; (1000ee28 <serial_console_init+0x9c>)
1000ede2:	47a0      	blx	r4
	setbuf(stdin, NULL);
1000ede4:	6833      	ldr	r3, [r6, #0]
1000ede6:	6858      	ldr	r0, [r3, #4]
1000ede8:	2100      	movs	r1, #0
1000edea:	47a0      	blx	r4

	stdio_serial_init(&uart_instance, CONF_STDIO_USART_MODULE, &config_uart);
	
	uart_register_callback(&uart_instance, uart_read_complete_callback, UART_RX_COMPLETE);
1000edec:	2202      	movs	r2, #2
1000edee:	490f      	ldr	r1, [pc, #60]	; (1000ee2c <serial_console_init+0xa0>)
1000edf0:	0028      	movs	r0, r5
1000edf2:	4b0f      	ldr	r3, [pc, #60]	; (1000ee30 <serial_console_init+0xa4>)
1000edf4:	4798      	blx	r3
}
1000edf6:	bd70      	pop	{r4, r5, r6, pc}
1000edf8:	1000c699 	.word	0x1000c699
1000edfc:	1001a9f4 	.word	0x1001a9f4
1000ee00:	1000d491 	.word	0x1000d491
1000ee04:	1001a9d0 	.word	0x1001a9d0
1000ee08:	1001a18c 	.word	0x1001a18c
1000ee0c:	1000ed75 	.word	0x1000ed75
1000ee10:	1001a188 	.word	0x1001a188
1000ee14:	1000ed5d 	.word	0x1000ed5d
1000ee18:	1001a184 	.word	0x1001a184
1000ee1c:	40004000 	.word	0x40004000
1000ee20:	1000d4bd 	.word	0x1000d4bd
1000ee24:	100183ec 	.word	0x100183ec
1000ee28:	1001542d 	.word	0x1001542d
1000ee2c:	1000ed09 	.word	0x1000ed09
1000ee30:	1000d6c5 	.word	0x1000d6c5

1000ee34 <_time_start>:

void _time_start(unsigned int sec)
{
1000ee34:	b5f0      	push	{r4, r5, r6, r7, lr}
1000ee36:	b083      	sub	sp, #12
1000ee38:	0005      	movs	r5, r0
	system_clock_get_value();
1000ee3a:	4c0d      	ldr	r4, [pc, #52]	; (1000ee70 <_time_start+0x3c>)
1000ee3c:	47a0      	blx	r4
	unsigned int main_clk = system_clock_get_value();
1000ee3e:	47a0      	blx	r4

	tick = (((double)(main_clk)) * ((double)0.0000493)) * (sec * 1000);
1000ee40:	4f0c      	ldr	r7, [pc, #48]	; (1000ee74 <_time_start+0x40>)
1000ee42:	47b8      	blx	r7
1000ee44:	4e0c      	ldr	r6, [pc, #48]	; (1000ee78 <_time_start+0x44>)
1000ee46:	4a0d      	ldr	r2, [pc, #52]	; (1000ee7c <_time_start+0x48>)
1000ee48:	4b0d      	ldr	r3, [pc, #52]	; (1000ee80 <_time_start+0x4c>)
1000ee4a:	47b0      	blx	r6
1000ee4c:	9000      	str	r0, [sp, #0]
1000ee4e:	9101      	str	r1, [sp, #4]
1000ee50:	20fa      	movs	r0, #250	; 0xfa
1000ee52:	0080      	lsls	r0, r0, #2
1000ee54:	4368      	muls	r0, r5
1000ee56:	47b8      	blx	r7
1000ee58:	0002      	movs	r2, r0
1000ee5a:	000b      	movs	r3, r1
1000ee5c:	9800      	ldr	r0, [sp, #0]
1000ee5e:	9901      	ldr	r1, [sp, #4]
1000ee60:	47b0      	blx	r6
1000ee62:	4b08      	ldr	r3, [pc, #32]	; (1000ee84 <_time_start+0x50>)
1000ee64:	4798      	blx	r3
1000ee66:	4b08      	ldr	r3, [pc, #32]	; (1000ee88 <_time_start+0x54>)
1000ee68:	6018      	str	r0, [r3, #0]
}
1000ee6a:	b003      	add	sp, #12
1000ee6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000ee6e:	46c0      	nop			; (mov r8, r8)
1000ee70:	1000c71d 	.word	0x1000c71d
1000ee74:	10014fd9 	.word	0x10014fd9
1000ee78:	100143d1 	.word	0x100143d1
1000ee7c:	19feaec7 	.word	0x19feaec7
1000ee80:	3f09d8ef 	.word	0x3f09d8ef
1000ee84:	10013475 	.word	0x10013475
1000ee88:	10019d1c 	.word	0x10019d1c

1000ee8c <_time_done>:

unsigned int _time_done()
{
	return --tick;
1000ee8c:	4b02      	ldr	r3, [pc, #8]	; (1000ee98 <_time_done+0xc>)
1000ee8e:	681a      	ldr	r2, [r3, #0]
1000ee90:	1e50      	subs	r0, r2, #1
1000ee92:	6018      	str	r0, [r3, #0]
}
1000ee94:	4770      	bx	lr
1000ee96:	46c0      	nop			; (mov r8, r8)
1000ee98:	10019d1c 	.word	0x10019d1c

1000ee9c <getchar_b11_timeout>:

int getchar_b11_timeout(unsigned int sec)
{
1000ee9c:	b570      	push	{r4, r5, r6, lr}
1000ee9e:	0004      	movs	r4, r0
	read_status = UART_READ_WAITING;
1000eea0:	2201      	movs	r2, #1
1000eea2:	4b11      	ldr	r3, [pc, #68]	; (1000eee8 <getchar_b11_timeout+0x4c>)
1000eea4:	701a      	strb	r2, [r3, #0]
	
	if(user_callback_func == NULL)
1000eea6:	4b11      	ldr	r3, [pc, #68]	; (1000eeec <getchar_b11_timeout+0x50>)
1000eea8:	681b      	ldr	r3, [r3, #0]
1000eeaa:	2b00      	cmp	r3, #0
1000eeac:	d103      	bne.n	1000eeb6 <getchar_b11_timeout+0x1a>
		uart_enable_callback(&uart_instance, UART_RX_COMPLETE);
1000eeae:	2102      	movs	r1, #2
1000eeb0:	480f      	ldr	r0, [pc, #60]	; (1000eef0 <getchar_b11_timeout+0x54>)
1000eeb2:	4b10      	ldr	r3, [pc, #64]	; (1000eef4 <getchar_b11_timeout+0x58>)
1000eeb4:	4798      	blx	r3

	_time_start(sec);
1000eeb6:	0020      	movs	r0, r4
1000eeb8:	4b0f      	ldr	r3, [pc, #60]	; (1000eef8 <getchar_b11_timeout+0x5c>)
1000eeba:	4798      	blx	r3
	
	string_input[0] = 0;
1000eebc:	490f      	ldr	r1, [pc, #60]	; (1000eefc <getchar_b11_timeout+0x60>)
1000eebe:	2300      	movs	r3, #0
1000eec0:	700b      	strb	r3, [r1, #0]
	uart_read_buffer_job(&uart_instance, string_input, sizeof(string_input));
1000eec2:	2201      	movs	r2, #1
1000eec4:	480a      	ldr	r0, [pc, #40]	; (1000eef0 <getchar_b11_timeout+0x54>)
1000eec6:	4b0e      	ldr	r3, [pc, #56]	; (1000ef00 <getchar_b11_timeout+0x64>)
1000eec8:	4798      	blx	r3
	
	while (read_status != UART_READ_DONE && _time_done() > 0 );
1000eeca:	4c07      	ldr	r4, [pc, #28]	; (1000eee8 <getchar_b11_timeout+0x4c>)
1000eecc:	4d0d      	ldr	r5, [pc, #52]	; (1000ef04 <getchar_b11_timeout+0x68>)
1000eece:	7823      	ldrb	r3, [r4, #0]
1000eed0:	2b02      	cmp	r3, #2
1000eed2:	d002      	beq.n	1000eeda <getchar_b11_timeout+0x3e>
1000eed4:	47a8      	blx	r5
1000eed6:	2800      	cmp	r0, #0
1000eed8:	d1f9      	bne.n	1000eece <getchar_b11_timeout+0x32>
	
	read_status = UART_READ_NONE;
1000eeda:	2200      	movs	r2, #0
1000eedc:	4b02      	ldr	r3, [pc, #8]	; (1000eee8 <getchar_b11_timeout+0x4c>)
1000eede:	701a      	strb	r2, [r3, #0]

	return string_input[0];
1000eee0:	4b06      	ldr	r3, [pc, #24]	; (1000eefc <getchar_b11_timeout+0x60>)
1000eee2:	7818      	ldrb	r0, [r3, #0]
}
1000eee4:	bd70      	pop	{r4, r5, r6, pc}
1000eee6:	46c0      	nop			; (mov r8, r8)
1000eee8:	10019d20 	.word	0x10019d20
1000eeec:	10019d28 	.word	0x10019d28
1000eef0:	1001a9d0 	.word	0x1001a9d0
1000eef4:	1000d6d9 	.word	0x1000d6d9
1000eef8:	1000ee35 	.word	0x1000ee35
1000eefc:	10019d24 	.word	0x10019d24
1000ef00:	1000d69d 	.word	0x1000d69d
1000ef04:	1000ee8d 	.word	0x1000ee8d

1000ef08 <platform_event_free>:
void platform_event_free(struct platform_event* event);
//struct str_watched_event watched_event;

void platform_event_free(struct platform_event* event)
{
	event->next = platform_event_free_list;
1000ef08:	4b02      	ldr	r3, [pc, #8]	; (1000ef14 <platform_event_free+0xc>)
1000ef0a:	681a      	ldr	r2, [r3, #0]
1000ef0c:	6002      	str	r2, [r0, #0]
	platform_event_free_list = event;
1000ef0e:	6018      	str	r0, [r3, #0]
}
1000ef10:	4770      	bx	lr
1000ef12:	46c0      	nop			; (mov r8, r8)
1000ef14:	10019d30 	.word	0x10019d30

1000ef18 <platform_event_post>:

void platform_event_post(uint16_t event_type, void * data, uint16_t data_len)
{
1000ef18:	b530      	push	{r4, r5, lr}
	// get a free event object
	struct platform_event* evt = platform_event_free_list;
1000ef1a:	4b0b      	ldr	r3, [pc, #44]	; (1000ef48 <platform_event_post+0x30>)
1000ef1c:	681c      	ldr	r4, [r3, #0]
	if(evt != NULL)
1000ef1e:	2c00      	cmp	r4, #0
1000ef20:	d011      	beq.n	1000ef46 <platform_event_post+0x2e>
	{
		platform_event_free_list = evt->next;
1000ef22:	6825      	ldr	r5, [r4, #0]
1000ef24:	601d      	str	r5, [r3, #0]
		
		evt->next = NULL;
1000ef26:	2300      	movs	r3, #0
1000ef28:	6023      	str	r3, [r4, #0]
		evt->data = data;
1000ef2a:	60a1      	str	r1, [r4, #8]
		evt->data_len = data_len;
1000ef2c:	80e2      	strh	r2, [r4, #6]
		evt->event_type = event_type;
1000ef2e:	80a0      	strh	r0, [r4, #4]

		if(platform_event_pending_list == NULL)
1000ef30:	4b06      	ldr	r3, [pc, #24]	; (1000ef4c <platform_event_post+0x34>)
1000ef32:	681a      	ldr	r2, [r3, #0]
1000ef34:	2a00      	cmp	r2, #0
1000ef36:	d102      	bne.n	1000ef3e <platform_event_post+0x26>
		{
			platform_event_pending_list = evt;
1000ef38:	601c      	str	r4, [r3, #0]
1000ef3a:	e004      	b.n	1000ef46 <platform_event_post+0x2e>
		else
		{
			struct platform_event* cur = platform_event_pending_list;
			while(cur->next != NULL)
			{
				cur = cur->next;
1000ef3c:	001a      	movs	r2, r3
			platform_event_pending_list = evt;
		}
		else
		{
			struct platform_event* cur = platform_event_pending_list;
			while(cur->next != NULL)
1000ef3e:	6813      	ldr	r3, [r2, #0]
1000ef40:	2b00      	cmp	r3, #0
1000ef42:	d1fb      	bne.n	1000ef3c <platform_event_post+0x24>
			{
				cur = cur->next;
			}
			cur->next = evt;
1000ef44:	6014      	str	r4, [r2, #0]
		}
		
		//platform_event_signal();
	}
	
}
1000ef46:	bd30      	pop	{r4, r5, pc}
1000ef48:	10019d30 	.word	0x10019d30
1000ef4c:	10019d2c 	.word	0x10019d2c

1000ef50 <platform_event_init>:
	return status;
	
}

void platform_event_init()
{
1000ef50:	b570      	push	{r4, r5, r6, lr}
	uint32_t i;
	platform_event_free_list = NULL;
1000ef52:	2300      	movs	r3, #0
1000ef54:	4a06      	ldr	r2, [pc, #24]	; (1000ef70 <platform_event_init+0x20>)
1000ef56:	6013      	str	r3, [r2, #0]
	platform_event_pending_list = NULL;
1000ef58:	4a06      	ldr	r2, [pc, #24]	; (1000ef74 <platform_event_init+0x24>)
1000ef5a:	6013      	str	r3, [r2, #0]
1000ef5c:	4c06      	ldr	r4, [pc, #24]	; (1000ef78 <platform_event_init+0x28>)
1000ef5e:	0026      	movs	r6, r4
1000ef60:	3678      	adds	r6, #120	; 0x78
	//memset(&watched_event,0,sizeof(struct str_watched_event));
	for(i = 0; i < PLATFORM_EVENT_POOL_DEPTH; i++)
	{
		platform_event_free(&platform_event_pool[i]);
1000ef62:	4d06      	ldr	r5, [pc, #24]	; (1000ef7c <platform_event_init+0x2c>)
1000ef64:	0020      	movs	r0, r4
1000ef66:	47a8      	blx	r5
1000ef68:	340c      	adds	r4, #12
{
	uint32_t i;
	platform_event_free_list = NULL;
	platform_event_pending_list = NULL;
	//memset(&watched_event,0,sizeof(struct str_watched_event));
	for(i = 0; i < PLATFORM_EVENT_POOL_DEPTH; i++)
1000ef6a:	42b4      	cmp	r4, r6
1000ef6c:	d1fa      	bne.n	1000ef64 <platform_event_init+0x14>
	{
		platform_event_free(&platform_event_pool[i]);
	}
}
1000ef6e:	bd70      	pop	{r4, r5, r6, pc}
1000ef70:	10019d30 	.word	0x10019d30
1000ef74:	10019d2c 	.word	0x10019d2c
1000ef78:	10019d34 	.word	0x10019d34
1000ef7c:	1000ef09 	.word	0x1000ef09

1000ef80 <at_ke_msg_send>:
	}
	return status;
}

static void at_ke_msg_send(void const * param_ptr)
{
1000ef80:	b570      	push	{r4, r5, r6, lr}
1000ef82:	0004      	movs	r4, r0
	struct ke_msg *kemsg;
	uint8_t osc_en = REG_PL_RD(0x4000B1EC)&0x01;
1000ef84:	4b13      	ldr	r3, [pc, #76]	; (1000efd4 <at_ke_msg_send+0x54>)
1000ef86:	681d      	ldr	r5, [r3, #0]
	ke_msg_send(param_ptr);
1000ef88:	4b13      	ldr	r3, [pc, #76]	; (1000efd8 <at_ke_msg_send+0x58>)
1000ef8a:	681b      	ldr	r3, [r3, #0]
1000ef8c:	4798      	blx	r3
	kemsg = ke_param2msg(param_ptr);

	if((kemsg != NULL) && (kemsg->dest_id != TASK_INTERNAL_APP)) {
1000ef8e:	2c0c      	cmp	r4, #12
1000ef90:	d01f      	beq.n	1000efd2 <at_ke_msg_send+0x52>
1000ef92:	3c0c      	subs	r4, #12
1000ef94:	88e3      	ldrh	r3, [r4, #6]
1000ef96:	2b05      	cmp	r3, #5
1000ef98:	d01b      	beq.n	1000efd2 <at_ke_msg_send+0x52>
		if(osc_en == 0)
1000ef9a:	07eb      	lsls	r3, r5, #31
1000ef9c:	d414      	bmi.n	1000efc8 <at_ke_msg_send+0x48>
		{
			/* BLE Core is off, issue a wakeup request*/
			/* First, make sure PD4 is powered up and out of reset */
			pwr_enable_arm_wakeup(1<<1);
1000ef9e:	4b0f      	ldr	r3, [pc, #60]	; (1000efdc <at_ke_msg_send+0x5c>)
1000efa0:	681b      	ldr	r3, [r3, #0]
1000efa2:	2002      	movs	r0, #2
1000efa4:	4798      	blx	r3
			pwr_arm_wakeup_req();
1000efa6:	4b0e      	ldr	r3, [pc, #56]	; (1000efe0 <at_ke_msg_send+0x60>)
1000efa8:	681b      	ldr	r3, [r3, #0]
1000efaa:	4798      	blx	r3
			while (pwr_wait_BLE_out_of_reset(3));
1000efac:	4c0d      	ldr	r4, [pc, #52]	; (1000efe4 <at_ke_msg_send+0x64>)
1000efae:	2003      	movs	r0, #3
1000efb0:	6823      	ldr	r3, [r4, #0]
1000efb2:	4798      	blx	r3
1000efb4:	2800      	cmp	r0, #0
1000efb6:	d1fa      	bne.n	1000efae <at_ke_msg_send+0x2e>
			pwr_disable_arm_wakeup(1<<1);
1000efb8:	4b0b      	ldr	r3, [pc, #44]	; (1000efe8 <at_ke_msg_send+0x68>)
1000efba:	681b      	ldr	r3, [r3, #0]
1000efbc:	3002      	adds	r0, #2
1000efbe:	4798      	blx	r3
			REG_PL_WR(0x4000B020, 1);
1000efc0:	2201      	movs	r2, #1
1000efc2:	4b0a      	ldr	r3, [pc, #40]	; (1000efec <at_ke_msg_send+0x6c>)
1000efc4:	601a      	str	r2, [r3, #0]
1000efc6:	e004      	b.n	1000efd2 <at_ke_msg_send+0x52>
#endif	//CHIPVERSION_B0
		}
		else
		{
			/*  */
			os_sem_up(gstrFwSem);
1000efc8:	4b09      	ldr	r3, [pc, #36]	; (1000eff0 <at_ke_msg_send+0x70>)
1000efca:	6818      	ldr	r0, [r3, #0]
1000efcc:	4b09      	ldr	r3, [pc, #36]	; (1000eff4 <at_ke_msg_send+0x74>)
1000efce:	681b      	ldr	r3, [r3, #0]
1000efd0:	4798      	blx	r3
		}
	}
}
1000efd2:	bd70      	pop	{r4, r5, r6, pc}
1000efd4:	4000b1ec 	.word	0x4000b1ec
1000efd8:	10019ddc 	.word	0x10019ddc
1000efdc:	10019dd4 	.word	0x10019dd4
1000efe0:	10019de8 	.word	0x10019de8
1000efe4:	10019dbc 	.word	0x10019dbc
1000efe8:	10019dc4 	.word	0x10019dc4
1000efec:	4000b020 	.word	0x4000b020
1000eff0:	10019dc8 	.word	0x10019dc8
1000eff4:	10019db8 	.word	0x10019db8

1000eff8 <samb11_plf_resume_callback>:
	rwip_prevent_sleep_clear(APP_PREVENT_SLEEP);
	return status;
}

void samb11_plf_resume_callback(void)
{
1000eff8:	b510      	push	{r4, lr}
	//spi_flash_turn_off();
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0,default_samb11_clock_init[0]);
1000effa:	4b06      	ldr	r3, [pc, #24]	; (1000f014 <samb11_plf_resume_callback+0x1c>)
1000effc:	4a06      	ldr	r2, [pc, #24]	; (1000f018 <samb11_plf_resume_callback+0x20>)
1000effe:	6819      	ldr	r1, [r3, #0]
1000f000:	6011      	str	r1, [r2, #0]
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1,default_samb11_clock_init[1]);
1000f002:	685a      	ldr	r2, [r3, #4]
1000f004:	4b05      	ldr	r3, [pc, #20]	; (1000f01c <samb11_plf_resume_callback+0x24>)
1000f006:	601a      	str	r2, [r3, #0]
	if(samb11_app_resume_cb != NULL)
1000f008:	4b05      	ldr	r3, [pc, #20]	; (1000f020 <samb11_plf_resume_callback+0x28>)
1000f00a:	681b      	ldr	r3, [r3, #0]
1000f00c:	2b00      	cmp	r3, #0
1000f00e:	d000      	beq.n	1000f012 <samb11_plf_resume_callback+0x1a>
	{
		samb11_app_resume_cb();
1000f010:	4798      	blx	r3
	}
}
1000f012:	bd10      	pop	{r4, pc}
1000f014:	1001aa1c 	.word	0x1001aa1c
1000f018:	4000b00c 	.word	0x4000b00c
1000f01c:	4000b010 	.word	0x4000b010
1000f020:	1001acf8 	.word	0x1001acf8

1000f024 <init_port_list>:
port port_list[LPGPIO_MAX];
uint32_t default_samb11_clock_init[2];
void samb11_plf_resume_callback(void);

void init_port_list(void)
{
1000f024:	b570      	push	{r4, r5, r6, lr}
	uint8_t i;
	memset(port_list,0,sizeof(port_list));
1000f026:	2232      	movs	r2, #50	; 0x32
1000f028:	2100      	movs	r1, #0
1000f02a:	480d      	ldr	r0, [pc, #52]	; (1000f060 <init_port_list+0x3c>)
1000f02c:	4b0d      	ldr	r3, [pc, #52]	; (1000f064 <init_port_list+0x40>)
1000f02e:	4798      	blx	r3
1000f030:	2100      	movs	r1, #0
	for(i=0;i<(sizeof(port_list)/sizeof(port_list[0]));i++) {
		port_list[i].bit.gpio_num = i;
1000f032:	480b      	ldr	r0, [pc, #44]	; (1000f060 <init_port_list+0x3c>)
		port_list[i].bit.available = 1;
1000f034:	2501      	movs	r5, #1
		port_list[i].bit.configured = 0;
1000f036:	2402      	movs	r4, #2
void init_port_list(void)
{
	uint8_t i;
	memset(port_list,0,sizeof(port_list));
	for(i=0;i<(sizeof(port_list)/sizeof(port_list[0]));i++) {
		port_list[i].bit.gpio_num = i;
1000f038:	004a      	lsls	r2, r1, #1
1000f03a:	5411      	strb	r1, [r2, r0]
		port_list[i].bit.available = 1;
1000f03c:	1882      	adds	r2, r0, r2
1000f03e:	7853      	ldrb	r3, [r2, #1]
1000f040:	432b      	orrs	r3, r5
		port_list[i].bit.configured = 0;
1000f042:	b2db      	uxtb	r3, r3
1000f044:	43a3      	bics	r3, r4
1000f046:	7053      	strb	r3, [r2, #1]
1000f048:	3101      	adds	r1, #1

void init_port_list(void)
{
	uint8_t i;
	memset(port_list,0,sizeof(port_list));
	for(i=0;i<(sizeof(port_list)/sizeof(port_list[0]));i++) {
1000f04a:	2919      	cmp	r1, #25
1000f04c:	d1f4      	bne.n	1000f038 <init_port_list+0x14>
		port_list[i].bit.gpio_num = i;
		port_list[i].bit.available = 1;
		port_list[i].bit.configured = 0;
	}
	//Set the GPIO for SWD is not available
	port_list[0].bit.available = 0;
1000f04e:	4b04      	ldr	r3, [pc, #16]	; (1000f060 <init_port_list+0x3c>)
1000f050:	785a      	ldrb	r2, [r3, #1]
1000f052:	3918      	subs	r1, #24
1000f054:	438a      	bics	r2, r1
1000f056:	705a      	strb	r2, [r3, #1]
	port_list[1].bit.available = 0;
1000f058:	78da      	ldrb	r2, [r3, #3]
1000f05a:	438a      	bics	r2, r1
1000f05c:	70da      	strb	r2, [r3, #3]
	//GPIO 14 is used for Coex and controlled by Firmware
	//port_list[14].bit.available = 0;
}
1000f05e:	bd70      	pop	{r4, r5, r6, pc}
1000f060:	1001aa38 	.word	0x1001aa38
1000f064:	10015115 	.word	0x10015115

1000f068 <init_clock>:

void init_clock(void)
{
	uint32_t regval;
	regval = REG_PL_RD(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0);
1000f068:	4a06      	ldr	r2, [pc, #24]	; (1000f084 <init_clock+0x1c>)
1000f06a:	6811      	ldr	r1, [r2, #0]
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WATCHDOG_1_CLK_EN);
	//disable UART core & interface clocks
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_CORE_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_IF_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_1_CORE_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_1_IF_CLK_EN);
1000f06c:	4b06      	ldr	r3, [pc, #24]	; (1000f088 <init_clock+0x20>)
1000f06e:	400b      	ands	r3, r1
	//disable I2C core 1 clocks
	//regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CORTUS_I2C1_CORE_CLK_EN);		//do not disable I2C because I2C driver in ASF will not enable.
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0,regval);
1000f070:	6013      	str	r3, [r2, #0]
	default_samb11_clock_init[0] = regval;
1000f072:	4a06      	ldr	r2, [pc, #24]	; (1000f08c <init_clock+0x24>)
1000f074:	6013      	str	r3, [r2, #0]
	
	regval = REG_PL_RD(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1);
1000f076:	4906      	ldr	r1, [pc, #24]	; (1000f090 <init_clock+0x28>)
1000f078:	6808      	ldr	r0, [r1, #0]
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_4_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_5_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_6_CLK_EN);
	//disable SPI SCK Phase int clock 
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI0_SCK_PHASE_INT_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI1_SCK_PHASE_INT_CLK_EN);
1000f07a:	4b06      	ldr	r3, [pc, #24]	; (1000f094 <init_clock+0x2c>)
1000f07c:	4003      	ands	r3, r0
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1,regval);
1000f07e:	600b      	str	r3, [r1, #0]
	default_samb11_clock_init[1] = regval;
1000f080:	6053      	str	r3, [r2, #4]
	//ARM debugger
	
	//store default values
}
1000f082:	4770      	bx	lr
1000f084:	4000b00c 	.word	0x4000b00c
1000f088:	fffe0fd3 	.word	0xfffe0fd3
1000f08c:	1001aa1c 	.word	0x1001aa1c
1000f090:	4000b010 	.word	0x4000b010
1000f094:	ffffe7c0 	.word	0xffffe7c0

1000f098 <platform_driver_init>:

plf_drv_status platform_driver_init()
{
1000f098:	b5f0      	push	{r4, r5, r6, r7, lr}
1000f09a:	4657      	mov	r7, sl
1000f09c:	464e      	mov	r6, r9
1000f09e:	4645      	mov	r5, r8
1000f0a0:	b4e0      	push	{r5, r6, r7}
	plf_drv_status status = STATUS_NOT_INITIALIZED;
	if((platform_initialized == 0) || (platform_initialized != 1)) {
1000f0a2:	4b4f      	ldr	r3, [pc, #316]	; (1000f1e0 <platform_driver_init+0x148>)
1000f0a4:	781b      	ldrb	r3, [r3, #0]
1000f0a6:	2b00      	cmp	r3, #0
1000f0a8:	d004      	beq.n	1000f0b4 <platform_driver_init+0x1c>
1000f0aa:	4b4d      	ldr	r3, [pc, #308]	; (1000f1e0 <platform_driver_init+0x148>)
1000f0ac:	781b      	ldrb	r3, [r3, #0]
1000f0ae:	2b01      	cmp	r3, #1
1000f0b0:	d100      	bne.n	1000f0b4 <platform_driver_init+0x1c>
1000f0b2:	e08c      	b.n	1000f1ce <platform_driver_init+0x136>
		init_port_list();
1000f0b4:	4b4b      	ldr	r3, [pc, #300]	; (1000f1e4 <platform_driver_init+0x14c>)
1000f0b6:	4798      	blx	r3
		init_clock();
1000f0b8:	4b4b      	ldr	r3, [pc, #300]	; (1000f1e8 <platform_driver_init+0x150>)
1000f0ba:	4798      	blx	r3
		// Initialize the ble stack message handler to NULL
		ble_stack_message_handler = NULL;
1000f0bc:	2300      	movs	r3, #0
1000f0be:	4698      	mov	r8, r3
1000f0c0:	4b4a      	ldr	r3, [pc, #296]	; (1000f1ec <platform_driver_init+0x154>)
1000f0c2:	4642      	mov	r2, r8
1000f0c4:	601a      	str	r2, [r3, #0]

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000f0c6:	4c4a      	ldr	r4, [pc, #296]	; (1000f1f0 <platform_driver_init+0x158>)
1000f0c8:	2380      	movs	r3, #128	; 0x80
1000f0ca:	2280      	movs	r2, #128	; 0x80
1000f0cc:	0412      	lsls	r2, r2, #16
1000f0ce:	4692      	mov	sl, r2
1000f0d0:	50e2      	str	r2, [r4, r3]
1000f0d2:	2280      	movs	r2, #128	; 0x80
1000f0d4:	0452      	lsls	r2, r2, #17
1000f0d6:	4691      	mov	r9, r2
1000f0d8:	50e2      	str	r2, [r4, r3]
#ifdef CHIPVERSION_B0
		NVIC_DisableIRQ(GPIO0_IRQn);
		NVIC_DisableIRQ(GPIO1_IRQn);
		/* NVIC_DisableIRQ(PORT0_COMB_IRQn); */
		/* NVIC_DisableIRQ(PORT1_COMB_IRQn); */
		platform_register_isr = (uint8_t (*)(uint8_t ,void *))0x000007d7;
1000f0da:	4d46      	ldr	r5, [pc, #280]	; (1000f1f4 <platform_driver_init+0x15c>)
1000f0dc:	4b46      	ldr	r3, [pc, #280]	; (1000f1f8 <platform_driver_init+0x160>)
1000f0de:	602b      	str	r3, [r5, #0]
		platform_unregister_isr = (uint8_t (*)(uint8_t ))0x000007bd;
1000f0e0:	4b46      	ldr	r3, [pc, #280]	; (1000f1fc <platform_driver_init+0x164>)
1000f0e2:	4a47      	ldr	r2, [pc, #284]	; (1000f200 <platform_driver_init+0x168>)
1000f0e4:	6013      	str	r3, [r2, #0]
		handle_ext_wakeup_isr = (void (*)(void))0x1bc51;
1000f0e6:	4947      	ldr	r1, [pc, #284]	; (1000f204 <platform_driver_init+0x16c>)
1000f0e8:	4a47      	ldr	r2, [pc, #284]	; (1000f208 <platform_driver_init+0x170>)
1000f0ea:	6011      	str	r1, [r2, #0]
		gapm_get_task_from_id = (ke_task_id_t (*)(ke_msg_id_t))(*((unsigned int *)0x100400bc));
1000f0ec:	4a47      	ldr	r2, [pc, #284]	; (1000f20c <platform_driver_init+0x174>)
1000f0ee:	6811      	ldr	r1, [r2, #0]
1000f0f0:	4a47      	ldr	r2, [pc, #284]	; (1000f210 <platform_driver_init+0x178>)
1000f0f2:	6011      	str	r1, [r2, #0]
		gapm_get_id_from_task = (ke_task_id_t (*)(ke_msg_id_t))(*((unsigned int *)0x100400b8));
1000f0f4:	4a47      	ldr	r2, [pc, #284]	; (1000f214 <platform_driver_init+0x17c>)
1000f0f6:	6811      	ldr	r1, [r2, #0]
1000f0f8:	4a47      	ldr	r2, [pc, #284]	; (1000f218 <platform_driver_init+0x180>)
1000f0fa:	6011      	str	r1, [r2, #0]
		rwip_prevent_sleep_set = (void (*)(uint16_t))0x0001b99f;
1000f0fc:	4947      	ldr	r1, [pc, #284]	; (1000f21c <platform_driver_init+0x184>)
1000f0fe:	4a48      	ldr	r2, [pc, #288]	; (1000f220 <platform_driver_init+0x188>)
1000f100:	6011      	str	r1, [r2, #0]
		rwip_prevent_sleep_clear = (void (*)(uint16_t))0x0001b9db;
1000f102:	4948      	ldr	r1, [pc, #288]	; (1000f224 <platform_driver_init+0x18c>)
1000f104:	4a48      	ldr	r2, [pc, #288]	; (1000f228 <platform_driver_init+0x190>)
1000f106:	6011      	str	r1, [r2, #0]
		apps_resume_cb = (uint32_t *)0x1004003c;
1000f108:	4f48      	ldr	r7, [pc, #288]	; (1000f22c <platform_driver_init+0x194>)
1000f10a:	4a49      	ldr	r2, [pc, #292]	; (1000f230 <platform_driver_init+0x198>)
1000f10c:	603a      	str	r2, [r7, #0]
		actualfreq = (uint32_t *)0x10041FC0; /* set to NULL for now as clock calibration is disabled for the time being */  /*(uint32_t *)0x10006bd8;*/
1000f10e:	4949      	ldr	r1, [pc, #292]	; (1000f234 <platform_driver_init+0x19c>)
1000f110:	4a49      	ldr	r2, [pc, #292]	; (1000f238 <platform_driver_init+0x1a0>)
1000f112:	6011      	str	r1, [r2, #0]
		updateuartbr_fp = (void (*)())0x10041FC4;
1000f114:	4949      	ldr	r1, [pc, #292]	; (1000f23c <platform_driver_init+0x1a4>)
1000f116:	4a4a      	ldr	r2, [pc, #296]	; (1000f240 <platform_driver_init+0x1a8>)
1000f118:	6011      	str	r1, [r2, #0]
		wakeup_source_active_cb = (uint32_t *)0x10041FD4;
1000f11a:	4e4a      	ldr	r6, [pc, #296]	; (1000f244 <platform_driver_init+0x1ac>)
1000f11c:	4a4a      	ldr	r2, [pc, #296]	; (1000f248 <platform_driver_init+0x1b0>)
1000f11e:	6032      	str	r2, [r6, #0]
		wakeup_event_pending = (uint32_t *)0x10041FD8;
1000f120:	494a      	ldr	r1, [pc, #296]	; (1000f24c <platform_driver_init+0x1b4>)
1000f122:	4a4b      	ldr	r2, [pc, #300]	; (1000f250 <platform_driver_init+0x1b8>)
1000f124:	6011      	str	r1, [r2, #0]
		/* power APIs */
		pwr_enable_arm_wakeup = (void (*)(uint32_t wakeup_domain))0x0001cbe9;
1000f126:	494b      	ldr	r1, [pc, #300]	; (1000f254 <platform_driver_init+0x1bc>)
1000f128:	4a4b      	ldr	r2, [pc, #300]	; (1000f258 <platform_driver_init+0x1c0>)
1000f12a:	6011      	str	r1, [r2, #0]
		pwr_disable_arm_wakeup = (void (*)(uint32_t wakeup_domain))0x0001cd8f;
1000f12c:	494b      	ldr	r1, [pc, #300]	; (1000f25c <platform_driver_init+0x1c4>)
1000f12e:	4a4c      	ldr	r2, [pc, #304]	; (1000f260 <platform_driver_init+0x1c8>)
1000f130:	6011      	str	r1, [r2, #0]
		pwr_arm_wakeup_req = (int (*)(void))0x0001cea3;
1000f132:	494c      	ldr	r1, [pc, #304]	; (1000f264 <platform_driver_init+0x1cc>)
1000f134:	4a4c      	ldr	r2, [pc, #304]	; (1000f268 <platform_driver_init+0x1d0>)
1000f136:	6011      	str	r1, [r2, #0]
		pwr_wait_BLE_out_of_reset = (int (*)(uint32_t threshold))0x0001cbcf;
1000f138:	494c      	ldr	r1, [pc, #304]	; (1000f26c <platform_driver_init+0x1d4>)
1000f13a:	4a4d      	ldr	r2, [pc, #308]	; (1000f270 <platform_driver_init+0x1d8>)
1000f13c:	6011      	str	r1, [r2, #0]
		NVIC_DisableIRQ(PORT1_ALL_IRQn);
		platform_register_isr = register_isr;
		platform_unregister_isr = unregister_isr;
		handle_ext_wakeup_isr = (void (*)(void))0x14085;
#endif
		platform_unregister_isr(GPIO1_COMBINED_VECTOR_TABLE_INDEX);
1000f13e:	2028      	movs	r0, #40	; 0x28
1000f140:	4798      	blx	r3
		platform_register_isr(GPIO1_COMBINED_VECTOR_TABLE_INDEX,(void*)PORT1_COMB_Handler);
1000f142:	494c      	ldr	r1, [pc, #304]	; (1000f274 <platform_driver_init+0x1dc>)
1000f144:	2028      	movs	r0, #40	; 0x28
1000f146:	682b      	ldr	r3, [r5, #0]
1000f148:	4798      	blx	r3
		platform_register_isr(GPIO0_COMBINED_VECTOR_TABLE_INDEX,(void*)gpio0_combined_isr_handler);
1000f14a:	682b      	ldr	r3, [r5, #0]
1000f14c:	494a      	ldr	r1, [pc, #296]	; (1000f278 <platform_driver_init+0x1e0>)
1000f14e:	2027      	movs	r0, #39	; 0x27
1000f150:	4798      	blx	r3
		//gstrFwSem               = (void *)0x100004e4;
		//NMI_MsgQueueRecv = (int (*)(void *, void ** )) 0x00017f67;
		//InternalAppMsgQHandle = (void *)0x10001158;
		//ke_free = (void (*)(void *)) 0x00015e3d;
#elif CHIPVERSION_B0
		ke_msg_send 	= (void (*)(void const *))(*((unsigned int *)0x100400e4));
1000f152:	4b4a      	ldr	r3, [pc, #296]	; (1000f27c <platform_driver_init+0x1e4>)
1000f154:	681a      	ldr	r2, [r3, #0]
1000f156:	4b4a      	ldr	r3, [pc, #296]	; (1000f280 <platform_driver_init+0x1e8>)
1000f158:	601a      	str	r2, [r3, #0]
		ke_msg_alloc 	= (void* (*)(ke_msg_id_t const id, ke_task_id_t const dest_id,
1000f15a:	4a4a      	ldr	r2, [pc, #296]	; (1000f284 <platform_driver_init+0x1ec>)
1000f15c:	4b4a      	ldr	r3, [pc, #296]	; (1000f288 <platform_driver_init+0x1f0>)
1000f15e:	601a      	str	r2, [r3, #0]
										ke_task_id_t const src_id, uint16_t const param_len) )0x00019fe9;
		os_sem_up 		= (int (*)(void*))0x0001dbdd;
1000f160:	4a4a      	ldr	r2, [pc, #296]	; (1000f28c <platform_driver_init+0x1f4>)
1000f162:	4b4b      	ldr	r3, [pc, #300]	; (1000f290 <platform_driver_init+0x1f8>)
1000f164:	601a      	str	r2, [r3, #0]
		os_sem_down		= (int (*)(void*))0x0001dc5b;
1000f166:	4a4b      	ldr	r2, [pc, #300]	; (1000f294 <platform_driver_init+0x1fc>)
1000f168:	4b4b      	ldr	r3, [pc, #300]	; (1000f298 <platform_driver_init+0x200>)
1000f16a:	601a      	str	r2, [r3, #0]
		gstrFwSem 		= (void*)0x100405ec;
1000f16c:	4a4b      	ldr	r2, [pc, #300]	; (1000f29c <platform_driver_init+0x204>)
1000f16e:	4b4c      	ldr	r3, [pc, #304]	; (1000f2a0 <platform_driver_init+0x208>)
1000f170:	601a      	str	r2, [r3, #0]
		NMI_MsgQueueRecv = (int(*)(void*, void ** ))0x0001d5e3;
1000f172:	4a4c      	ldr	r2, [pc, #304]	; (1000f2a4 <platform_driver_init+0x20c>)
1000f174:	4b4c      	ldr	r3, [pc, #304]	; (1000f2a8 <platform_driver_init+0x210>)
1000f176:	601a      	str	r2, [r3, #0]
		InternalAppMsgQHandle = (void*)0x10040c20;
1000f178:	4a4c      	ldr	r2, [pc, #304]	; (1000f2ac <platform_driver_init+0x214>)
1000f17a:	4b4d      	ldr	r3, [pc, #308]	; (1000f2b0 <platform_driver_init+0x218>)
1000f17c:	601a      	str	r2, [r3, #0]
		ke_free = (void(*)(void*))0x00019f09;
1000f17e:	4a4d      	ldr	r2, [pc, #308]	; (1000f2b4 <platform_driver_init+0x21c>)
1000f180:	4b4d      	ldr	r3, [pc, #308]	; (1000f2b8 <platform_driver_init+0x220>)
1000f182:	601a      	str	r2, [r3, #0]
#endif
		memset(rx_buffer,0,sizeof(rx_buffer));
1000f184:	22a0      	movs	r2, #160	; 0xa0
1000f186:	0092      	lsls	r2, r2, #2
1000f188:	2100      	movs	r1, #0
1000f18a:	484c      	ldr	r0, [pc, #304]	; (1000f2bc <platform_driver_init+0x224>)
1000f18c:	4b4c      	ldr	r3, [pc, #304]	; (1000f2c0 <platform_driver_init+0x228>)
1000f18e:	4798      	blx	r3
		plf_event_buff_index = PLF_EVENT_BUFFER_START_INDEX;
1000f190:	2280      	movs	r2, #128	; 0x80
1000f192:	0092      	lsls	r2, r2, #2
1000f194:	4b4b      	ldr	r3, [pc, #300]	; (1000f2c4 <platform_driver_init+0x22c>)
1000f196:	801a      	strh	r2, [r3, #0]
		platform_event_init();
1000f198:	4b4b      	ldr	r3, [pc, #300]	; (1000f2c8 <platform_driver_init+0x230>)
1000f19a:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000f19c:	4653      	mov	r3, sl
1000f19e:	6023      	str	r3, [r4, #0]
1000f1a0:	464b      	mov	r3, r9
1000f1a2:	6023      	str	r3, [r4, #0]
		
#ifndef CHIPVERSION_B0		
		// spi_flash clock fix.
		spi_flash_clock_init();
#endif
		samb11_app_resume_cb = NULL;
1000f1a4:	4b49      	ldr	r3, [pc, #292]	; (1000f2cc <platform_driver_init+0x234>)
1000f1a6:	4642      	mov	r2, r8
1000f1a8:	601a      	str	r2, [r3, #0]
		*apps_resume_cb = (uint32_t)((resume_callback)samb11_plf_resume_callback);
1000f1aa:	683b      	ldr	r3, [r7, #0]
1000f1ac:	4a48      	ldr	r2, [pc, #288]	; (1000f2d0 <platform_driver_init+0x238>)
1000f1ae:	601a      	str	r2, [r3, #0]
		*wakeup_source_active_cb = (uint32_t)((wakeup_source_active_callback)wakeup_active_event_callback);
1000f1b0:	6833      	ldr	r3, [r6, #0]
1000f1b2:	4a48      	ldr	r2, [pc, #288]	; (1000f2d4 <platform_driver_init+0x23c>)
1000f1b4:	601a      	str	r2, [r3, #0]
		wakeup_int_unregister_callback(0);
1000f1b6:	2000      	movs	r0, #0
1000f1b8:	4c47      	ldr	r4, [pc, #284]	; (1000f2d8 <platform_driver_init+0x240>)
1000f1ba:	47a0      	blx	r4
		wakeup_int_unregister_callback(1);
1000f1bc:	2001      	movs	r0, #1
1000f1be:	47a0      	blx	r4
		wakeup_int_unregister_callback(2);
1000f1c0:	2002      	movs	r0, #2
1000f1c2:	47a0      	blx	r4
		platform_initialized = 1;
1000f1c4:	2201      	movs	r2, #1
1000f1c6:	4b06      	ldr	r3, [pc, #24]	; (1000f1e0 <platform_driver_init+0x148>)
1000f1c8:	701a      	strb	r2, [r3, #0]
		status = STATUS_SUCCESS;
1000f1ca:	2000      	movs	r0, #0
1000f1cc:	e003      	b.n	1000f1d6 <platform_driver_init+0x13e>
	}
	else {
		platform_initialized = 1;
1000f1ce:	2201      	movs	r2, #1
1000f1d0:	4b03      	ldr	r3, [pc, #12]	; (1000f1e0 <platform_driver_init+0x148>)
1000f1d2:	701a      	strb	r2, [r3, #0]
		status = STATUS_ALREADY_INITIALIZED;
1000f1d4:	2001      	movs	r0, #1
	}
	return status;
}
1000f1d6:	bc1c      	pop	{r2, r3, r4}
1000f1d8:	4690      	mov	r8, r2
1000f1da:	4699      	mov	r9, r3
1000f1dc:	46a2      	mov	sl, r4
1000f1de:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000f1e0:	10019dc0 	.word	0x10019dc0
1000f1e4:	1000f025 	.word	0x1000f025
1000f1e8:	1000f069 	.word	0x1000f069
1000f1ec:	10019de0 	.word	0x10019de0
1000f1f0:	e000e100 	.word	0xe000e100
1000f1f4:	1001acec 	.word	0x1001acec
1000f1f8:	000007d7 	.word	0x000007d7
1000f1fc:	000007bd 	.word	0x000007bd
1000f200:	1001aa28 	.word	0x1001aa28
1000f204:	0001bc51 	.word	0x0001bc51
1000f208:	1001acf0 	.word	0x1001acf0
1000f20c:	100400bc 	.word	0x100400bc
1000f210:	10019db4 	.word	0x10019db4
1000f214:	100400b8 	.word	0x100400b8
1000f218:	10019db0 	.word	0x10019db0
1000f21c:	0001b99f 	.word	0x0001b99f
1000f220:	1001aa24 	.word	0x1001aa24
1000f224:	0001b9db 	.word	0x0001b9db
1000f228:	1001aa30 	.word	0x1001aa30
1000f22c:	1001ad00 	.word	0x1001ad00
1000f230:	1004003c 	.word	0x1004003c
1000f234:	10041fc0 	.word	0x10041fc0
1000f238:	1001aa34 	.word	0x1001aa34
1000f23c:	10041fc4 	.word	0x10041fc4
1000f240:	1001acfc 	.word	0x1001acfc
1000f244:	1001acf4 	.word	0x1001acf4
1000f248:	10041fd4 	.word	0x10041fd4
1000f24c:	10041fd8 	.word	0x10041fd8
1000f250:	1001aa2c 	.word	0x1001aa2c
1000f254:	0001cbe9 	.word	0x0001cbe9
1000f258:	10019dd4 	.word	0x10019dd4
1000f25c:	0001cd8f 	.word	0x0001cd8f
1000f260:	10019dc4 	.word	0x10019dc4
1000f264:	0001cea3 	.word	0x0001cea3
1000f268:	10019de8 	.word	0x10019de8
1000f26c:	0001cbcf 	.word	0x0001cbcf
1000f270:	10019dbc 	.word	0x10019dbc
1000f274:	1000f721 	.word	0x1000f721
1000f278:	1000f6b5 	.word	0x1000f6b5
1000f27c:	100400e4 	.word	0x100400e4
1000f280:	10019ddc 	.word	0x10019ddc
1000f284:	00019fe9 	.word	0x00019fe9
1000f288:	10019dec 	.word	0x10019dec
1000f28c:	0001dbdd 	.word	0x0001dbdd
1000f290:	10019db8 	.word	0x10019db8
1000f294:	0001dc5b 	.word	0x0001dc5b
1000f298:	10019dcc 	.word	0x10019dcc
1000f29c:	100405ec 	.word	0x100405ec
1000f2a0:	10019dc8 	.word	0x10019dc8
1000f2a4:	0001d5e3 	.word	0x0001d5e3
1000f2a8:	10019dd8 	.word	0x10019dd8
1000f2ac:	10040c20 	.word	0x10040c20
1000f2b0:	10019df0 	.word	0x10019df0
1000f2b4:	00019f09 	.word	0x00019f09
1000f2b8:	10019dac 	.word	0x10019dac
1000f2bc:	1001aa6c 	.word	0x1001aa6c
1000f2c0:	10015115 	.word	0x10015115
1000f2c4:	1001ad04 	.word	0x1001ad04
1000f2c8:	1000ef51 	.word	0x1000ef51
1000f2cc:	1001acf8 	.word	0x1001acf8
1000f2d0:	1000eff9 	.word	0x1000eff9
1000f2d4:	1000f77d 	.word	0x1000f77d
1000f2d8:	1000f765 	.word	0x1000f765

1000f2dc <platform_register_ble_msg_handler>:


plf_drv_status platform_register_ble_msg_handler(platform_interface_callback fp)
{
	plf_drv_status status;
	if(platform_initialized == 1) {
1000f2dc:	4b04      	ldr	r3, [pc, #16]	; (1000f2f0 <platform_register_ble_msg_handler+0x14>)
1000f2de:	781a      	ldrb	r2, [r3, #0]
		ble_stack_message_handler = fp;
		status = STATUS_SUCCESS;
	}
	else {
		status = STATUS_NOT_INITIALIZED;
1000f2e0:	2305      	movs	r3, #5


plf_drv_status platform_register_ble_msg_handler(platform_interface_callback fp)
{
	plf_drv_status status;
	if(platform_initialized == 1) {
1000f2e2:	2a01      	cmp	r2, #1
1000f2e4:	d102      	bne.n	1000f2ec <platform_register_ble_msg_handler+0x10>
		ble_stack_message_handler = fp;
1000f2e6:	4b03      	ldr	r3, [pc, #12]	; (1000f2f4 <platform_register_ble_msg_handler+0x18>)
1000f2e8:	6018      	str	r0, [r3, #0]
		status = STATUS_SUCCESS;
1000f2ea:	2300      	movs	r3, #0
	}
	else {
		status = STATUS_NOT_INITIALIZED;
	}
	return status;
}
1000f2ec:	0018      	movs	r0, r3
1000f2ee:	4770      	bx	lr
1000f2f0:	10019dc0 	.word	0x10019dc0
1000f2f4:	10019de0 	.word	0x10019de0

1000f2f8 <platform_interface_send>:


//Sends a message through RW kernel messaging API
//struct ke_msg * p_msg;
void platform_interface_send(uint8_t* data, uint32_t len)
{
1000f2f8:	b570      	push	{r4, r5, r6, lr}
1000f2fa:	0004      	movs	r4, r0
	void* params;
	
	#if (CHIPVERSION_B0)
	ke_task_id_t dest_id;
	dest_id = p_msg_hdr->dest_id;
	if(gapm_get_task_from_id != NULL)
1000f2fc:	4b0e      	ldr	r3, [pc, #56]	; (1000f338 <platform_interface_send+0x40>)
1000f2fe:	681b      	ldr	r3, [r3, #0]
1000f300:	2b00      	cmp	r3, #0
1000f302:	d002      	beq.n	1000f30a <platform_interface_send+0x12>
		p_msg_hdr->dest_id = gapm_get_task_from_id(dest_id);
1000f304:	8840      	ldrh	r0, [r0, #2]
1000f306:	4798      	blx	r3
1000f308:	8060      	strh	r0, [r4, #2]
	#endif	//CHIPVERSION_B0
	// Allocate the kernel message
	params = ke_msg_alloc(p_msg_hdr->id, p_msg_hdr->dest_id, p_msg_hdr->src_id, p_msg_hdr->param_len);
1000f30a:	88e3      	ldrh	r3, [r4, #6]
1000f30c:	88a2      	ldrh	r2, [r4, #4]
1000f30e:	8861      	ldrh	r1, [r4, #2]
1000f310:	8820      	ldrh	r0, [r4, #0]
1000f312:	4d0a      	ldr	r5, [pc, #40]	; (1000f33c <platform_interface_send+0x44>)
1000f314:	682d      	ldr	r5, [r5, #0]
1000f316:	47a8      	blx	r5
1000f318:	0005      	movs	r5, r0
											
	//no params
	if (p_msg_hdr->param_len == 0)
1000f31a:	88e2      	ldrh	r2, [r4, #6]
1000f31c:	2a00      	cmp	r2, #0
1000f31e:	d102      	bne.n	1000f326 <platform_interface_send+0x2e>
	{
		// Send message directly
		at_ke_msg_send(params);
1000f320:	4b07      	ldr	r3, [pc, #28]	; (1000f340 <platform_interface_send+0x48>)
1000f322:	4798      	blx	r3
1000f324:	e006      	b.n	1000f334 <platform_interface_send+0x3c>
	}
	else
	{
		//copy params
		memcpy(params,&(data[KE_MSG_HDR_LENGTH]),p_msg_hdr->param_len);
1000f326:	0021      	movs	r1, r4
1000f328:	3108      	adds	r1, #8
1000f32a:	4b06      	ldr	r3, [pc, #24]	; (1000f344 <platform_interface_send+0x4c>)
1000f32c:	4798      	blx	r3
		// Send the kernel message
		at_ke_msg_send(params);
1000f32e:	0028      	movs	r0, r5
1000f330:	4b03      	ldr	r3, [pc, #12]	; (1000f340 <platform_interface_send+0x48>)
1000f332:	4798      	blx	r3
	}
}
1000f334:	bd70      	pop	{r4, r5, r6, pc}
1000f336:	46c0      	nop			; (mov r8, r8)
1000f338:	10019db4 	.word	0x10019db4
1000f33c:	10019dec 	.word	0x10019dec
1000f340:	1000ef81 	.word	0x1000ef81
1000f344:	10015103 	.word	0x10015103

1000f348 <send_plf_int_msg_ind>:

void send_plf_int_msg_ind(uint8_t intr_index, uint8_t callback_id, void *data, uint16_t data_len)
{
1000f348:	b570      	push	{r4, r5, r6, lr}
1000f34a:	0015      	movs	r5, r2
1000f34c:	001c      	movs	r4, r3
	void* params;
//#if (CHIPVERSION_A4)	
	//os_sem_up(gstrFwSem);
//#endif
	// Allocate the kernel message
	params = ke_msg_alloc(PERIPHERAL_INTERRUPT_EVENT, TASK_INTERNAL_APP, BUILD_INTR_SRCID(callback_id,intr_index), data_len);
1000f34e:	020a      	lsls	r2, r1, #8
1000f350:	4302      	orrs	r2, r0
1000f352:	4b0a      	ldr	r3, [pc, #40]	; (1000f37c <send_plf_int_msg_ind+0x34>)
1000f354:	681e      	ldr	r6, [r3, #0]
1000f356:	0023      	movs	r3, r4
1000f358:	2105      	movs	r1, #5
1000f35a:	20a0      	movs	r0, #160	; 0xa0
1000f35c:	00c0      	lsls	r0, r0, #3
1000f35e:	47b0      	blx	r6
1000f360:	1e06      	subs	r6, r0, #0
											
	//no params
	if(params != NULL) {
1000f362:	d00a      	beq.n	1000f37a <send_plf_int_msg_ind+0x32>
		if((data_len != 0) && (NULL != data))
1000f364:	2c00      	cmp	r4, #0
1000f366:	d005      	beq.n	1000f374 <send_plf_int_msg_ind+0x2c>
1000f368:	2d00      	cmp	r5, #0
1000f36a:	d003      	beq.n	1000f374 <send_plf_int_msg_ind+0x2c>
		{
			//copy params
			memcpy(params, data, data_len);
1000f36c:	0022      	movs	r2, r4
1000f36e:	0029      	movs	r1, r5
1000f370:	4b03      	ldr	r3, [pc, #12]	; (1000f380 <send_plf_int_msg_ind+0x38>)
1000f372:	4798      	blx	r3
		}
		// Send the kernel message
		at_ke_msg_send(params);
1000f374:	0030      	movs	r0, r6
1000f376:	4b03      	ldr	r3, [pc, #12]	; (1000f384 <send_plf_int_msg_ind+0x3c>)
1000f378:	4798      	blx	r3
	}
}
1000f37a:	bd70      	pop	{r4, r5, r6, pc}
1000f37c:	10019dec 	.word	0x10019dec
1000f380:	10015103 	.word	0x10015103
1000f384:	1000ef81 	.word	0x1000ef81

1000f388 <platform_event_wait>:
//Waits on InternalAppMsgQHandle Queue
// This function won't busy wait if nothing on queue but will down the semaphore and go to a blocking state
// The OS then will move control to other higher priority tasks and will only return if these tasks finish processing AND the queue has received 
//a msg
plf_drv_status platform_event_wait(uint32_t timeout)
{
1000f388:	b5f0      	push	{r4, r5, r6, r7, lr}
1000f38a:	465f      	mov	r7, fp
1000f38c:	4656      	mov	r6, sl
1000f38e:	464d      	mov	r5, r9
1000f390:	4644      	mov	r4, r8
1000f392:	b4f0      	push	{r4, r5, r6, r7}
1000f394:	b087      	sub	sp, #28
	static struct ke_msg* rcv_msg;
	static struct ke_msghdr	*ke_msg_hdr;
	plf_drv_status status = STATUS_SUCCESS;
	uint8_t bEventTimeoutFlag = 0;
	uint8_t bLoopAgain = 0;
	if(((uint32_t)-1 != timeout) && ((uint32_t)0 < timeout))
1000f396:	1e44      	subs	r4, r0, #1
plf_drv_status platform_event_wait(uint32_t timeout)
{
	static struct ke_msg* rcv_msg;
	static struct ke_msghdr	*ke_msg_hdr;
	plf_drv_status status = STATUS_SUCCESS;
	uint8_t bEventTimeoutFlag = 0;
1000f398:	2300      	movs	r3, #0
1000f39a:	4699      	mov	r9, r3
	uint8_t bLoopAgain = 0;
	if(((uint32_t)-1 != timeout) && ((uint32_t)0 < timeout))
1000f39c:	1ce3      	adds	r3, r4, #3
1000f39e:	d81c      	bhi.n	1000f3da <platform_event_wait+0x52>
	return num_of_freed;
}

static void platform_start_event_timeout(uint32_t timeout)
{
	uint8_t msg[8+5] = {0};
1000f3a0:	220d      	movs	r2, #13
1000f3a2:	2100      	movs	r1, #0
1000f3a4:	a802      	add	r0, sp, #8
1000f3a6:	4b82      	ldr	r3, [pc, #520]	; (1000f5b0 <platform_event_wait+0x228>)
1000f3a8:	4798      	blx	r3
	uint8_t u16TxLen = 0;

	msg[u16TxLen++] = ((DBG_KE_TIMER_REQ) & 0x00FF );
1000f3aa:	2333      	movs	r3, #51	; 0x33
1000f3ac:	aa02      	add	r2, sp, #8
1000f3ae:	7013      	strb	r3, [r2, #0]
	msg[u16TxLen++] = (((DBG_KE_TIMER_REQ)>>8) & 0x00FF );
1000f3b0:	3b30      	subs	r3, #48	; 0x30
1000f3b2:	7053      	strb	r3, [r2, #1]
	msg[u16TxLen++] = ((TASK_DBG) & 0x00FF );
1000f3b4:	7093      	strb	r3, [r2, #2]
	msg[u16TxLen++] = (((TASK_DBG)>>8) & 0x00FF );	
	msg[u16TxLen++] = ((TASK_INTERNAL_APP) & 0x00FF );
1000f3b6:	3302      	adds	r3, #2
1000f3b8:	7113      	strb	r3, [r2, #4]
	msg[u16TxLen++] = (((TASK_INTERNAL_APP)>>8) & 0x00FF );
	msg[u16TxLen++] = ((5) & 0x00FF );
1000f3ba:	7193      	strb	r3, [r2, #6]
	msg[u16TxLen++] = (((5)>>8) & 0x00FF );
	
	msg[u16TxLen++] = (uint8_t)((timeout) & 0x00FF );
1000f3bc:	7214      	strb	r4, [r2, #8]
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 8) & 0x00FF) ;
1000f3be:	0a23      	lsrs	r3, r4, #8
1000f3c0:	7253      	strb	r3, [r2, #9]
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 16) & 0x00FF);
1000f3c2:	0c23      	lsrs	r3, r4, #16
1000f3c4:	7293      	strb	r3, [r2, #10]
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 24) & 0x00FF);
1000f3c6:	0e24      	lsrs	r4, r4, #24
1000f3c8:	72d4      	strb	r4, [r2, #11]
	
	msg[u16TxLen++] = ((1) & 0x00FF );
1000f3ca:	2301      	movs	r3, #1
1000f3cc:	7313      	strb	r3, [r2, #12]
	
	platform_interface_send(msg, u16TxLen);
1000f3ce:	210d      	movs	r1, #13
1000f3d0:	0010      	movs	r0, r2
1000f3d2:	4b78      	ldr	r3, [pc, #480]	; (1000f5b4 <platform_event_wait+0x22c>)
1000f3d4:	4798      	blx	r3
	uint8_t bEventTimeoutFlag = 0;
	uint8_t bLoopAgain = 0;
	if(((uint32_t)-1 != timeout) && ((uint32_t)0 < timeout))
	{			
		platform_start_event_timeout(timeout-1);
		bEventTimeoutFlag = 1;
1000f3d6:	2301      	movs	r3, #1
1000f3d8:	4699      	mov	r9, r3
1000f3da:	2400      	movs	r4, #0
1000f3dc:	2500      	movs	r5, #0
	}

	do {
		if(NMI_MsgQueueRecv(InternalAppMsgQHandle, (void**)&rcv_msg) == STATUS_SUCCESS)
1000f3de:	4f76      	ldr	r7, [pc, #472]	; (1000f5b8 <platform_event_wait+0x230>)
1000f3e0:	4e76      	ldr	r6, [pc, #472]	; (1000f5bc <platform_event_wait+0x234>)
1000f3e2:	4977      	ldr	r1, [pc, #476]	; (1000f5c0 <platform_event_wait+0x238>)
1000f3e4:	6838      	ldr	r0, [r7, #0]
1000f3e6:	6833      	ldr	r3, [r6, #0]
1000f3e8:	4798      	blx	r3
1000f3ea:	2800      	cmp	r0, #0
1000f3ec:	d000      	beq.n	1000f3f0 <platform_event_wait+0x68>
1000f3ee:	e088      	b.n	1000f502 <platform_event_wait+0x17a>
		{
			uint16_t msg_id = rcv_msg->id;
1000f3f0:	4b73      	ldr	r3, [pc, #460]	; (1000f5c0 <platform_event_wait+0x238>)
1000f3f2:	681c      	ldr	r4, [r3, #0]
1000f3f4:	88a3      	ldrh	r3, [r4, #4]
1000f3f6:	469a      	mov	sl, r3
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
			
			if((rcv_msg->id != DBG_KE_TIMER_RESP) && (bEventTimeoutFlag))
1000f3f8:	23cd      	movs	r3, #205	; 0xcd
1000f3fa:	009b      	lsls	r3, r3, #2
1000f3fc:	459a      	cmp	sl, r3
1000f3fe:	d100      	bne.n	1000f402 <platform_event_wait+0x7a>
1000f400:	e0c7      	b.n	1000f592 <platform_event_wait+0x20a>

	do {
		if(NMI_MsgQueueRecv(InternalAppMsgQHandle, (void**)&rcv_msg) == STATUS_SUCCESS)
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
1000f402:	8923      	ldrh	r3, [r4, #8]
1000f404:	469b      	mov	fp, r3
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
1000f406:	8963      	ldrh	r3, [r4, #10]
1000f408:	4698      	mov	r8, r3
			bLoopAgain = 0;
			
			if((rcv_msg->id != DBG_KE_TIMER_RESP) && (bEventTimeoutFlag))
1000f40a:	464b      	mov	r3, r9
1000f40c:	2b00      	cmp	r3, #0
1000f40e:	d011      	beq.n	1000f434 <platform_event_wait+0xac>
	platform_interface_send(msg, u16TxLen);
}

static void platform_stop_event_timeout(void)
{
	uint8_t msg[8+5] = {0};
1000f410:	220d      	movs	r2, #13
1000f412:	2100      	movs	r1, #0
1000f414:	a802      	add	r0, sp, #8
1000f416:	4b66      	ldr	r3, [pc, #408]	; (1000f5b0 <platform_event_wait+0x228>)
1000f418:	4798      	blx	r3
	uint8_t u16TxLen = 0;

	msg[u16TxLen++] = ((DBG_KE_TIMER_REQ) & 0x00FF );
1000f41a:	2333      	movs	r3, #51	; 0x33
1000f41c:	aa02      	add	r2, sp, #8
1000f41e:	7013      	strb	r3, [r2, #0]
	msg[u16TxLen++] = (((DBG_KE_TIMER_REQ)>>8) & 0x00FF );
1000f420:	3b30      	subs	r3, #48	; 0x30
1000f422:	7053      	strb	r3, [r2, #1]
	msg[u16TxLen++] = ((TASK_DBG) & 0x00FF );
1000f424:	7093      	strb	r3, [r2, #2]
	msg[u16TxLen++] = (((TASK_DBG)>>8) & 0x00FF );	
	msg[u16TxLen++] = ((TASK_INTERNAL_APP) & 0x00FF );
1000f426:	3302      	adds	r3, #2
1000f428:	7113      	strb	r3, [r2, #4]
	msg[u16TxLen++] = (((TASK_INTERNAL_APP)>>8) & 0x00FF );
	msg[u16TxLen++] = ((5) & 0x00FF );
1000f42a:	7193      	strb	r3, [r2, #6]
	msg[u16TxLen++] = (uint8_t)(( (0) >> 16) & 0x00FF);
	msg[u16TxLen++] = (uint8_t)(( (0) >> 24) & 0x00FF);
	
	msg[u16TxLen++] = ((0) & 0x00FF );
	
	platform_interface_send(msg, u16TxLen);
1000f42c:	210d      	movs	r1, #13
1000f42e:	0010      	movs	r0, r2
1000f430:	4b60      	ldr	r3, [pc, #384]	; (1000f5b4 <platform_event_wait+0x22c>)
1000f432:	4798      	blx	r3
			{
				//Stop timer if it is still running
				platform_stop_event_timeout();
			}
				
			if(msg_id == PERIPHERAL_INTERRUPT_EVENT)
1000f434:	23a0      	movs	r3, #160	; 0xa0
1000f436:	00db      	lsls	r3, r3, #3
1000f438:	459a      	cmp	sl, r3
1000f43a:	d121      	bne.n	1000f480 <platform_event_wait+0xf8>
			{
				if(plf_event_buff_index+len > MAX_EVT_BUFF_LEN)
1000f43c:	4b61      	ldr	r3, [pc, #388]	; (1000f5c4 <platform_event_wait+0x23c>)
1000f43e:	881b      	ldrh	r3, [r3, #0]
1000f440:	4443      	add	r3, r8
1000f442:	22a0      	movs	r2, #160	; 0xa0
1000f444:	0092      	lsls	r2, r2, #2
1000f446:	4293      	cmp	r3, r2
1000f448:	dd02      	ble.n	1000f450 <platform_event_wait+0xc8>
					plf_event_buff_index = PLF_EVENT_BUFFER_START_INDEX;
1000f44a:	3a80      	subs	r2, #128	; 0x80
1000f44c:	4b5d      	ldr	r3, [pc, #372]	; (1000f5c4 <platform_event_wait+0x23c>)
1000f44e:	801a      	strh	r2, [r3, #0]
				memcpy(&rx_buffer[plf_event_buff_index],data,len);
1000f450:	4b5c      	ldr	r3, [pc, #368]	; (1000f5c4 <platform_event_wait+0x23c>)
1000f452:	469a      	mov	sl, r3
1000f454:	881d      	ldrh	r5, [r3, #0]
1000f456:	4b5c      	ldr	r3, [pc, #368]	; (1000f5c8 <platform_event_wait+0x240>)
1000f458:	18ed      	adds	r5, r5, r3
1000f45a:	0021      	movs	r1, r4
1000f45c:	310c      	adds	r1, #12
1000f45e:	4642      	mov	r2, r8
1000f460:	0028      	movs	r0, r5
1000f462:	4b5a      	ldr	r3, [pc, #360]	; (1000f5cc <platform_event_wait+0x244>)
1000f464:	4798      	blx	r3
				platform_event_post(src_id,&rx_buffer[plf_event_buff_index],len);
1000f466:	4642      	mov	r2, r8
1000f468:	0029      	movs	r1, r5
1000f46a:	4658      	mov	r0, fp
1000f46c:	4b58      	ldr	r3, [pc, #352]	; (1000f5d0 <platform_event_wait+0x248>)
1000f46e:	4798      	blx	r3
				plf_event_buff_index += len;
1000f470:	4653      	mov	r3, sl
1000f472:	881b      	ldrh	r3, [r3, #0]
1000f474:	4443      	add	r3, r8
1000f476:	4652      	mov	r2, sl
1000f478:	8013      	strh	r3, [r2, #0]
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000f47a:	2400      	movs	r4, #0
				if(plf_event_buff_index+len > MAX_EVT_BUFF_LEN)
					plf_event_buff_index = PLF_EVENT_BUFFER_START_INDEX;
				memcpy(&rx_buffer[plf_event_buff_index],data,len);
				platform_event_post(src_id,&rx_buffer[plf_event_buff_index],len);
				plf_event_buff_index += len;
				status = STATUS_RECEIVED_PLF_EVENT_MSG;
1000f47c:	2502      	movs	r5, #2
1000f47e:	e03a      	b.n	1000f4f6 <platform_event_wait+0x16e>
			}
			else
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
1000f480:	4b54      	ldr	r3, [pc, #336]	; (1000f5d4 <platform_event_wait+0x24c>)
1000f482:	681b      	ldr	r3, [r3, #0]
1000f484:	2b00      	cmp	r3, #0
1000f486:	d032      	beq.n	1000f4ee <platform_event_wait+0x166>
					if(rcv_msg->id == DBG_KE_TIMER_RESP)
1000f488:	4b4d      	ldr	r3, [pc, #308]	; (1000f5c0 <platform_event_wait+0x238>)
1000f48a:	681a      	ldr	r2, [r3, #0]
1000f48c:	8893      	ldrh	r3, [r2, #4]
1000f48e:	21cd      	movs	r1, #205	; 0xcd
1000f490:	0089      	lsls	r1, r1, #2
1000f492:	428b      	cmp	r3, r1
1000f494:	d104      	bne.n	1000f4a0 <platform_event_wait+0x118>
					{
						if(bEventTimeoutFlag)
1000f496:	464b      	mov	r3, r9
						{
							status = STATUS_TIMEOUT;	
						}
						else
						{
							bLoopAgain = 1;
1000f498:	2401      	movs	r4, #1
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
					if(rcv_msg->id == DBG_KE_TIMER_RESP)
					{
						if(bEventTimeoutFlag)
1000f49a:	2b00      	cmp	r3, #0
1000f49c:	d02b      	beq.n	1000f4f6 <platform_event_wait+0x16e>
1000f49e:	e028      	b.n	1000f4f2 <platform_event_wait+0x16a>
							bLoopAgain = 1;
						}
					}
					else
					{
						ke_msg_hdr = (struct ke_msghdr *)((void *)(rx_buffer+BLE_EVENT_BUFFER_START_INDEX));
1000f4a0:	4c4d      	ldr	r4, [pc, #308]	; (1000f5d8 <platform_event_wait+0x250>)
1000f4a2:	4d49      	ldr	r5, [pc, #292]	; (1000f5c8 <platform_event_wait+0x240>)
1000f4a4:	6025      	str	r5, [r4, #0]
						ke_msg_hdr->id = rcv_msg->id;
1000f4a6:	702b      	strb	r3, [r5, #0]
1000f4a8:	0a1b      	lsrs	r3, r3, #8
1000f4aa:	706b      	strb	r3, [r5, #1]
//#if (CHIPVERSION_A3 || CHIPVERSION_A4)
					//ke_msg_hdr->src_id = rcv_msg->src_id;
//#else
					ke_msg_hdr->src_id = gapm_get_id_from_task(rcv_msg->src_id);
1000f4ac:	8910      	ldrh	r0, [r2, #8]
1000f4ae:	4b4b      	ldr	r3, [pc, #300]	; (1000f5dc <platform_event_wait+0x254>)
1000f4b0:	681b      	ldr	r3, [r3, #0]
1000f4b2:	4798      	blx	r3
1000f4b4:	7128      	strb	r0, [r5, #4]
1000f4b6:	0a00      	lsrs	r0, r0, #8
1000f4b8:	7168      	strb	r0, [r5, #5]
//#endif  /* (CHIPVERSION_A3 || CHIPVERSION_A4) */
						ke_msg_hdr->dest_id = rcv_msg->dest_id;
1000f4ba:	6820      	ldr	r0, [r4, #0]
1000f4bc:	4b40      	ldr	r3, [pc, #256]	; (1000f5c0 <platform_event_wait+0x238>)
1000f4be:	681a      	ldr	r2, [r3, #0]
1000f4c0:	88d2      	ldrh	r2, [r2, #6]
1000f4c2:	8042      	strh	r2, [r0, #2]
						ke_msg_hdr->param_len = rcv_msg->param_len;
1000f4c4:	681d      	ldr	r5, [r3, #0]
1000f4c6:	896b      	ldrh	r3, [r5, #10]
1000f4c8:	80c3      	strh	r3, [r0, #6]
						ke_msg_hdr++;
1000f4ca:	3008      	adds	r0, #8
1000f4cc:	6020      	str	r0, [r4, #0]
						if(rcv_msg->param_len > 0) {
1000f4ce:	896a      	ldrh	r2, [r5, #10]
1000f4d0:	2a00      	cmp	r2, #0
1000f4d2:	d003      	beq.n	1000f4dc <platform_event_wait+0x154>
							memcpy((void *)ke_msg_hdr,rcv_msg->param,rcv_msg->param_len);
1000f4d4:	0029      	movs	r1, r5
1000f4d6:	310c      	adds	r1, #12
1000f4d8:	4b3c      	ldr	r3, [pc, #240]	; (1000f5cc <platform_event_wait+0x244>)
1000f4da:	4798      	blx	r3
						}
						ble_stack_message_handler(rx_buffer,(rcv_msg->param_len + sizeof(struct ke_msghdr)));
1000f4dc:	8969      	ldrh	r1, [r5, #10]
1000f4de:	3108      	adds	r1, #8
1000f4e0:	4b3c      	ldr	r3, [pc, #240]	; (1000f5d4 <platform_event_wait+0x24c>)
1000f4e2:	681b      	ldr	r3, [r3, #0]
1000f4e4:	4838      	ldr	r0, [pc, #224]	; (1000f5c8 <platform_event_wait+0x240>)
1000f4e6:	4798      	blx	r3
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000f4e8:	2400      	movs	r4, #0
						ke_msg_hdr++;
						if(rcv_msg->param_len > 0) {
							memcpy((void *)ke_msg_hdr,rcv_msg->param,rcv_msg->param_len);
						}
						ble_stack_message_handler(rx_buffer,(rcv_msg->param_len + sizeof(struct ke_msghdr)));
						status = STATUS_RECEIVED_BLE_MSG;
1000f4ea:	2503      	movs	r5, #3
1000f4ec:	e003      	b.n	1000f4f6 <platform_event_wait+0x16e>
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000f4ee:	2400      	movs	r4, #0
1000f4f0:	e001      	b.n	1000f4f6 <platform_event_wait+0x16e>
1000f4f2:	2400      	movs	r4, #0
				if(ble_stack_message_handler) {
					if(rcv_msg->id == DBG_KE_TIMER_RESP)
					{
						if(bEventTimeoutFlag)
						{
							status = STATUS_TIMEOUT;	
1000f4f4:	25d0      	movs	r5, #208	; 0xd0
						ble_stack_message_handler(rx_buffer,(rcv_msg->param_len + sizeof(struct ke_msghdr)));
						status = STATUS_RECEIVED_BLE_MSG;
					}
				}
			}
			ke_free(rcv_msg);
1000f4f6:	4b32      	ldr	r3, [pc, #200]	; (1000f5c0 <platform_event_wait+0x238>)
1000f4f8:	6818      	ldr	r0, [r3, #0]
1000f4fa:	4b39      	ldr	r3, [pc, #228]	; (1000f5e0 <platform_event_wait+0x258>)
1000f4fc:	681b      	ldr	r3, [r3, #0]
1000f4fe:	4798      	blx	r3
1000f500:	e000      	b.n	1000f504 <platform_event_wait+0x17c>
		}
		else
		{
			status = STATUS_FAILURE;
1000f502:	2507      	movs	r5, #7
		}
	}while(bLoopAgain);
1000f504:	2c00      	cmp	r4, #0
1000f506:	d000      	beq.n	1000f50a <platform_event_wait+0x182>
1000f508:	e76b      	b.n	1000f3e2 <platform_event_wait+0x5a>
	
	if(bEventTimeoutFlag)
1000f50a:	464b      	mov	r3, r9
1000f50c:	2b00      	cmp	r3, #0
1000f50e:	d046      	beq.n	1000f59e <platform_event_wait+0x216>
	{
		//CleanUp if there is any remaining DBG_KE_TIMER_RESP message in queue
		NMI_MsgQueueDestroyOnKeID(InternalAppMsgQHandle, DBG_KE_TIMER_RESP);
1000f510:	4b29      	ldr	r3, [pc, #164]	; (1000f5b8 <platform_event_wait+0x230>)
1000f512:	681e      	ldr	r6, [r3, #0]
#endif 
static int NMI_MsgQueueDestroyOnKeID(NMI_MsgQueueHandle* pHandle, ke_msg_id_t u16KeMsgId)
{
	int num_of_freed=0;
	Message * current , *prev = NULL;
	if((NULL == pHandle) && (NULL == pHandle->pstrMessageList))
1000f514:	2e00      	cmp	r6, #0
1000f516:	d104      	bne.n	1000f522 <platform_event_wait+0x19a>
1000f518:	2300      	movs	r3, #0
1000f51a:	6a1c      	ldr	r4, [r3, #32]
1000f51c:	2c00      	cmp	r4, #0
1000f51e:	d131      	bne.n	1000f584 <platform_event_wait+0x1fc>
1000f520:	e03d      	b.n	1000f59e <platform_event_wait+0x216>
	{
		return num_of_freed;
	}

	current = pHandle->pstrMessageList;
1000f522:	6a34      	ldr	r4, [r6, #32]
	os_sem_down(&pHandle->strCriticalSection);
1000f524:	2314      	movs	r3, #20
1000f526:	469c      	mov	ip, r3
1000f528:	44b4      	add	ip, r6
1000f52a:	4663      	mov	r3, ip
1000f52c:	4660      	mov	r0, ip
1000f52e:	9300      	str	r3, [sp, #0]
1000f530:	4b2c      	ldr	r3, [pc, #176]	; (1000f5e4 <platform_event_wait+0x25c>)
1000f532:	681b      	ldr	r3, [r3, #0]
1000f534:	4798      	blx	r3
	while(NULL != current)
1000f536:	2c00      	cmp	r4, #0
1000f538:	d01f      	beq.n	1000f57a <platform_event_wait+0x1f2>
			}
			ke_free(rcv_msg);
		}
		else
		{
			status = STATUS_FAILURE;
1000f53a:	2700      	movs	r7, #0

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
	while(NULL != current)
	{
		if(u16KeMsgId == ((struct ke_msg*)current->pvBuffer)->id)
1000f53c:	23cd      	movs	r3, #205	; 0xcd
1000f53e:	009b      	lsls	r3, r3, #2
1000f540:	4698      	mov	r8, r3
		{
			num_of_freed++;
			if(NULL != prev)
			{
				prev->pstrNext = current->pstrNext;
				ke_free(current);
1000f542:	4b27      	ldr	r3, [pc, #156]	; (1000f5e0 <platform_event_wait+0x258>)
1000f544:	469a      	mov	sl, r3
1000f546:	0020      	movs	r0, r4

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
	while(NULL != current)
	{
		if(u16KeMsgId == ((struct ke_msg*)current->pvBuffer)->id)
1000f548:	6803      	ldr	r3, [r0, #0]
1000f54a:	889b      	ldrh	r3, [r3, #4]
1000f54c:	4543      	cmp	r3, r8
1000f54e:	d110      	bne.n	1000f572 <platform_event_wait+0x1ea>
		{
			num_of_freed++;
			if(NULL != prev)
1000f550:	2f00      	cmp	r7, #0
1000f552:	d006      	beq.n	1000f562 <platform_event_wait+0x1da>
			{
				prev->pstrNext = current->pstrNext;
1000f554:	6883      	ldr	r3, [r0, #8]
1000f556:	60bb      	str	r3, [r7, #8]
				ke_free(current);
1000f558:	4653      	mov	r3, sl
1000f55a:	681b      	ldr	r3, [r3, #0]
1000f55c:	4798      	blx	r3
				current = prev->pstrNext;
1000f55e:	68b8      	ldr	r0, [r7, #8]
1000f560:	e009      	b.n	1000f576 <platform_event_wait+0x1ee>
			}
			else
			{
				pHandle->pstrMessageList = current->pstrNext;
1000f562:	6883      	ldr	r3, [r0, #8]
1000f564:	6233      	str	r3, [r6, #32]
				ke_free(current);
1000f566:	4b1e      	ldr	r3, [pc, #120]	; (1000f5e0 <platform_event_wait+0x258>)
1000f568:	681b      	ldr	r3, [r3, #0]
1000f56a:	9301      	str	r3, [sp, #4]
1000f56c:	4798      	blx	r3
				current = pHandle->pstrMessageList;
1000f56e:	6a30      	ldr	r0, [r6, #32]
1000f570:	e001      	b.n	1000f576 <platform_event_wait+0x1ee>
			}
		}
		else
		{
			prev = current;
			current = current ->pstrNext;
1000f572:	0007      	movs	r7, r0
1000f574:	6880      	ldr	r0, [r0, #8]
		return num_of_freed;
	}

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
	while(NULL != current)
1000f576:	2800      	cmp	r0, #0
1000f578:	d1e6      	bne.n	1000f548 <platform_event_wait+0x1c0>
		{
			prev = current;
			current = current ->pstrNext;
		}
	}
	os_sem_up(&pHandle->strCriticalSection);
1000f57a:	4b1b      	ldr	r3, [pc, #108]	; (1000f5e8 <platform_event_wait+0x260>)
1000f57c:	681b      	ldr	r3, [r3, #0]
1000f57e:	9800      	ldr	r0, [sp, #0]
1000f580:	4798      	blx	r3
	if(bEventTimeoutFlag)
	{
		//CleanUp if there is any remaining DBG_KE_TIMER_RESP message in queue
		NMI_MsgQueueDestroyOnKeID(InternalAppMsgQHandle, DBG_KE_TIMER_RESP);
	}
	return status;
1000f582:	e00c      	b.n	1000f59e <platform_event_wait+0x216>
	{
		return num_of_freed;
	}

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
1000f584:	2314      	movs	r3, #20
1000f586:	9300      	str	r3, [sp, #0]
1000f588:	4b16      	ldr	r3, [pc, #88]	; (1000f5e4 <platform_event_wait+0x25c>)
1000f58a:	681b      	ldr	r3, [r3, #0]
1000f58c:	2014      	movs	r0, #20
1000f58e:	4798      	blx	r3
1000f590:	e7d3      	b.n	1000f53a <platform_event_wait+0x1b2>
				status = STATUS_RECEIVED_PLF_EVENT_MSG;
			}
			else
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
1000f592:	4b10      	ldr	r3, [pc, #64]	; (1000f5d4 <platform_event_wait+0x24c>)
1000f594:	681b      	ldr	r3, [r3, #0]
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000f596:	2400      	movs	r4, #0
				status = STATUS_RECEIVED_PLF_EVENT_MSG;
			}
			else
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
1000f598:	2b00      	cmp	r3, #0
1000f59a:	d0ac      	beq.n	1000f4f6 <platform_event_wait+0x16e>
1000f59c:	e77b      	b.n	1000f496 <platform_event_wait+0x10e>
	{
		//CleanUp if there is any remaining DBG_KE_TIMER_RESP message in queue
		NMI_MsgQueueDestroyOnKeID(InternalAppMsgQHandle, DBG_KE_TIMER_RESP);
	}
	return status;
}
1000f59e:	0028      	movs	r0, r5
1000f5a0:	b007      	add	sp, #28
1000f5a2:	bc3c      	pop	{r2, r3, r4, r5}
1000f5a4:	4690      	mov	r8, r2
1000f5a6:	4699      	mov	r9, r3
1000f5a8:	46a2      	mov	sl, r4
1000f5aa:	46ab      	mov	fp, r5
1000f5ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000f5ae:	46c0      	nop			; (mov r8, r8)
1000f5b0:	10015115 	.word	0x10015115
1000f5b4:	1000f2f9 	.word	0x1000f2f9
1000f5b8:	10019df0 	.word	0x10019df0
1000f5bc:	10019dd8 	.word	0x10019dd8
1000f5c0:	10019de4 	.word	0x10019de4
1000f5c4:	1001ad04 	.word	0x1001ad04
1000f5c8:	1001aa6c 	.word	0x1001aa6c
1000f5cc:	10015103 	.word	0x10015103
1000f5d0:	1000ef19 	.word	0x1000ef19
1000f5d4:	10019de0 	.word	0x10019de0
1000f5d8:	10019dd0 	.word	0x10019dd0
1000f5dc:	10019db0 	.word	0x10019db0
1000f5e0:	10019dac 	.word	0x10019dac
1000f5e4:	10019dcc 	.word	0x10019dcc
1000f5e8:	10019db8 	.word	0x10019db8

1000f5ec <acquire_sleep_lock>:

plf_drv_status acquire_sleep_lock()
{
1000f5ec:	b510      	push	{r4, lr}
    //DBG_LOG_DEV("[acquire_sleep_lock]\tDisabling ULP");
	plf_drv_status status = STATUS_RESOURCE_BUSY;
	//uint8_t osc_en = REG_PL_RD(0x4000B1EC)&0x01;
	
	rwip_prevent_sleep_set(APP_PREVENT_SLEEP);
1000f5ee:	4b03      	ldr	r3, [pc, #12]	; (1000f5fc <acquire_sleep_lock+0x10>)
1000f5f0:	681b      	ldr	r3, [r3, #0]
1000f5f2:	2080      	movs	r0, #128	; 0x80
1000f5f4:	0200      	lsls	r0, r0, #8
1000f5f6:	4798      	blx	r3
		/*  */
		os_sem_up(gstrFwSem);
	}
#endif	//0
	return status;
}
1000f5f8:	2008      	movs	r0, #8
1000f5fa:	bd10      	pop	{r4, pc}
1000f5fc:	1001aa24 	.word	0x1001aa24

1000f600 <release_message_lock>:

plf_drv_status release_message_lock()
{
1000f600:	b510      	push	{r4, lr}
	plf_drv_status status = STATUS_SUCCESS;
	rwip_prevent_sleep_clear(MSG_PREVENT_SLEEP);
1000f602:	4b03      	ldr	r3, [pc, #12]	; (1000f610 <release_message_lock+0x10>)
1000f604:	681b      	ldr	r3, [r3, #0]
1000f606:	2080      	movs	r0, #128	; 0x80
1000f608:	01c0      	lsls	r0, r0, #7
1000f60a:	4798      	blx	r3
	return status;
}
1000f60c:	2000      	movs	r0, #0
1000f60e:	bd10      	pop	{r4, pc}
1000f610:	1001aa30 	.word	0x1001aa30

1000f614 <release_sleep_lock>:

plf_drv_status release_sleep_lock()
{
1000f614:	b510      	push	{r4, lr}
    //DBG_LOG_DEV("[release_sleep_lock]\tEnabling ULP");
	plf_drv_status status = STATUS_SUCCESS;
	rwip_prevent_sleep_clear(MSG_PREVENT_SLEEP);
1000f616:	4c05      	ldr	r4, [pc, #20]	; (1000f62c <release_sleep_lock+0x18>)
1000f618:	2080      	movs	r0, #128	; 0x80
1000f61a:	01c0      	lsls	r0, r0, #7
1000f61c:	6823      	ldr	r3, [r4, #0]
1000f61e:	4798      	blx	r3
	rwip_prevent_sleep_clear(APP_PREVENT_SLEEP);
1000f620:	6823      	ldr	r3, [r4, #0]
1000f622:	2080      	movs	r0, #128	; 0x80
1000f624:	0200      	lsls	r0, r0, #8
1000f626:	4798      	blx	r3
	return status;
}
1000f628:	2000      	movs	r0, #0
1000f62a:	bd10      	pop	{r4, pc}
1000f62c:	1001aa30 	.word	0x1001aa30

1000f630 <register_resume_callback>:
}

plf_drv_status register_resume_callback(resume_callback cb)
{
	plf_drv_status status = STATUS_SUCCESS;
	if(cb == NULL)
1000f630:	2800      	cmp	r0, #0
1000f632:	d003      	beq.n	1000f63c <register_resume_callback+0xc>
	{
		status = STATUS_INVALID_ARGUMENT;
	}
	else 
	{
		samb11_app_resume_cb = cb;
1000f634:	4b02      	ldr	r3, [pc, #8]	; (1000f640 <register_resume_callback+0x10>)
1000f636:	6018      	str	r0, [r3, #0]
	}
}

plf_drv_status register_resume_callback(resume_callback cb)
{
	plf_drv_status status = STATUS_SUCCESS;
1000f638:	2000      	movs	r0, #0
1000f63a:	e000      	b.n	1000f63e <register_resume_callback+0xe>
	if(cb == NULL)
	{
		status = STATUS_INVALID_ARGUMENT;
1000f63c:	2009      	movs	r0, #9
	{
		samb11_app_resume_cb = cb;
		//*apps_resume_cb = (uint32_t)cb;
	}
	return status;
}
1000f63e:	4770      	bx	lr
1000f640:	1001acf8 	.word	0x1001acf8

1000f644 <gpio1_combined_isr_handler>:

enum port_status_code wakeup_int_unregister_callback(enum port_wakeup_source wakeup_source);
void wakeup_active_event_callback(uint32_t wakeup_source);

void gpio1_combined_isr_handler(void)
{
1000f644:	b530      	push	{r4, r5, lr}
	uint8_t index = 0;
	/* portint_callback_t callback; */
	uint8_t port_gpio1 = LPGPIO_16;
	uint32_t intstatus = GPIO1->INTSTATUSCLEAR.reg; /* jeffy */
1000f646:	4a18      	ldr	r2, [pc, #96]	; (1000f6a8 <gpio1_combined_isr_handler+0x64>)
1000f648:	8f13      	ldrh	r3, [r2, #56]	; 0x38
1000f64a:	b29b      	uxth	r3, r3
	GPIO1->INTTYPESET.reg |= (1 << 15); /* jeffy */
1000f64c:	8d10      	ldrh	r0, [r2, #40]	; 0x28
1000f64e:	2180      	movs	r1, #128	; 0x80
1000f650:	0209      	lsls	r1, r1, #8
1000f652:	4301      	orrs	r1, r0
1000f654:	8511      	strh	r1, [r2, #40]	; 0x28
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO1->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO1->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000f656:	0010      	movs	r0, r2
1000f658:	4d14      	ldr	r5, [pc, #80]	; (1000f6ac <gpio1_combined_isr_handler+0x68>)
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO1->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000f65a:	2401      	movs	r4, #1
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000f65c:	2200      	movs	r2, #0
	uint32_t intstatus = GPIO1->INTSTATUSCLEAR.reg; /* jeffy */
	GPIO1->INTTYPESET.reg |= (1 << 15); /* jeffy */

	do {
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000f65e:	05db      	lsls	r3, r3, #23
1000f660:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
1000f662:	d011      	beq.n	1000f688 <gpio1_combined_isr_handler+0x44>
			port_gpio1 = (intstatus & ~(intstatus - 1));
1000f664:	b2db      	uxtb	r3, r3
1000f666:	4259      	negs	r1, r3
1000f668:	400b      	ands	r3, r1
			while (!(port_gpio1 == 1)) {
1000f66a:	2b01      	cmp	r3, #1
1000f66c:	d006      	beq.n	1000f67c <gpio1_combined_isr_handler+0x38>
1000f66e:	0011      	movs	r1, r2
				port_gpio1 = port_gpio1 >> 1;
1000f670:	085b      	lsrs	r3, r3, #1
				index++;
1000f672:	3101      	adds	r1, #1
1000f674:	b2c9      	uxtb	r1, r1
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
			port_gpio1 = (intstatus & ~(intstatus - 1));
			while (!(port_gpio1 == 1)) {
1000f676:	2b01      	cmp	r3, #1
1000f678:	d1fa      	bne.n	1000f670 <gpio1_combined_isr_handler+0x2c>
1000f67a:	e000      	b.n	1000f67e <gpio1_combined_isr_handler+0x3a>
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000f67c:	0011      	movs	r1, r2
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO1->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000f67e:	0023      	movs	r3, r4
1000f680:	408b      	lsls	r3, r1
1000f682:	b29b      	uxth	r3, r3
1000f684:	8703      	strh	r3, [r0, #56]	; 0x38
1000f686:	e003      	b.n	1000f690 <gpio1_combined_isr_handler+0x4c>
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO1->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000f688:	8f03      	ldrh	r3, [r0, #56]	; 0x38
1000f68a:	432b      	orrs	r3, r5
1000f68c:	b29b      	uxth	r3, r3
1000f68e:	8703      	strh	r3, [r0, #56]	; 0x38
			/* REG_GPIO1_INTSTATUSCLEAR = REG_GPIO1_INTENSET; */
		}

		intstatus = GPIO1->INTSTATUSCLEAR.reg;
1000f690:	8f03      	ldrh	r3, [r0, #56]	; 0x38
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000f692:	05db      	lsls	r3, r3, #23
1000f694:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
	} while (intstatus != 0);
1000f696:	d1e2      	bne.n	1000f65e <gpio1_combined_isr_handler+0x1a>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
1000f698:	2180      	movs	r1, #128	; 0x80
1000f69a:	0049      	lsls	r1, r1, #1
1000f69c:	3381      	adds	r3, #129	; 0x81
1000f69e:	33ff      	adds	r3, #255	; 0xff
1000f6a0:	4a03      	ldr	r2, [pc, #12]	; (1000f6b0 <gpio1_combined_isr_handler+0x6c>)
1000f6a2:	50d1      	str	r1, [r2, r3]

	NVIC_ClearPendingIRQ(8);
}
1000f6a4:	bd30      	pop	{r4, r5, pc}
1000f6a6:	46c0      	nop			; (mov r8, r8)
1000f6a8:	40011000 	.word	0x40011000
1000f6ac:	ffff8000 	.word	0xffff8000
1000f6b0:	e000e100 	.word	0xe000e100

1000f6b4 <gpio0_combined_isr_handler>:

void gpio0_combined_isr_handler(void)
{
1000f6b4:	b530      	push	{r4, r5, lr}
	uint8_t index = 0;
	/* portint_callback_t callback; */
	uint8_t port_gpio0 = LPGPIO_0;
	uint32_t intstatus = GPIO0->INTSTATUSCLEAR.reg; /* jeffy */
1000f6b6:	4a17      	ldr	r2, [pc, #92]	; (1000f714 <gpio0_combined_isr_handler+0x60>)
1000f6b8:	8f13      	ldrh	r3, [r2, #56]	; 0x38
1000f6ba:	b29b      	uxth	r3, r3
	GPIO0->INTTYPESET.reg |= (1 << 15); /* jeffy */
1000f6bc:	8d10      	ldrh	r0, [r2, #40]	; 0x28
1000f6be:	2180      	movs	r1, #128	; 0x80
1000f6c0:	0209      	lsls	r1, r1, #8
1000f6c2:	4301      	orrs	r1, r0
1000f6c4:	8511      	strh	r1, [r2, #40]	; 0x28
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO0->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO0->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000f6c6:	0010      	movs	r0, r2
1000f6c8:	4d13      	ldr	r5, [pc, #76]	; (1000f718 <gpio0_combined_isr_handler+0x64>)
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO0->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000f6ca:	2401      	movs	r4, #1
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000f6cc:	2200      	movs	r2, #0
	uint32_t intstatus = GPIO0->INTSTATUSCLEAR.reg; /* jeffy */
	GPIO0->INTTYPESET.reg |= (1 << 15); /* jeffy */

	do {
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000f6ce:	05db      	lsls	r3, r3, #23
1000f6d0:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
1000f6d2:	d011      	beq.n	1000f6f8 <gpio0_combined_isr_handler+0x44>
			port_gpio0 = (intstatus & ~(intstatus - 1));
1000f6d4:	b2db      	uxtb	r3, r3
1000f6d6:	4259      	negs	r1, r3
1000f6d8:	400b      	ands	r3, r1
			while (!(port_gpio0 == 1)) {
1000f6da:	2b01      	cmp	r3, #1
1000f6dc:	d006      	beq.n	1000f6ec <gpio0_combined_isr_handler+0x38>
1000f6de:	0011      	movs	r1, r2
				port_gpio0 = port_gpio0 >> 1;
1000f6e0:	085b      	lsrs	r3, r3, #1
				index++;
1000f6e2:	3101      	adds	r1, #1
1000f6e4:	b2c9      	uxtb	r1, r1
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
			port_gpio0 = (intstatus & ~(intstatus - 1));
			while (!(port_gpio0 == 1)) {
1000f6e6:	2b01      	cmp	r3, #1
1000f6e8:	d1fa      	bne.n	1000f6e0 <gpio0_combined_isr_handler+0x2c>
1000f6ea:	e000      	b.n	1000f6ee <gpio0_combined_isr_handler+0x3a>
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000f6ec:	0011      	movs	r1, r2
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO0->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000f6ee:	0023      	movs	r3, r4
1000f6f0:	408b      	lsls	r3, r1
1000f6f2:	b29b      	uxth	r3, r3
1000f6f4:	8703      	strh	r3, [r0, #56]	; 0x38
1000f6f6:	e003      	b.n	1000f700 <gpio0_combined_isr_handler+0x4c>
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO0->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000f6f8:	8f03      	ldrh	r3, [r0, #56]	; 0x38
1000f6fa:	432b      	orrs	r3, r5
1000f6fc:	b29b      	uxth	r3, r3
1000f6fe:	8703      	strh	r3, [r0, #56]	; 0x38
			/* REG_GPIO1_INTSTATUSCLEAR = REG_GPIO1_INTENSET; */
		}

		intstatus = GPIO0->INTSTATUSCLEAR.reg;
1000f700:	8f03      	ldrh	r3, [r0, #56]	; 0x38
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000f702:	05db      	lsls	r3, r3, #23
1000f704:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
	} while (intstatus != 0);
1000f706:	d1e2      	bne.n	1000f6ce <gpio0_combined_isr_handler+0x1a>
1000f708:	2180      	movs	r1, #128	; 0x80
1000f70a:	3381      	adds	r3, #129	; 0x81
1000f70c:	33ff      	adds	r3, #255	; 0xff
1000f70e:	4a03      	ldr	r2, [pc, #12]	; (1000f71c <gpio0_combined_isr_handler+0x68>)
1000f710:	50d1      	str	r1, [r2, r3]

	NVIC_ClearPendingIRQ(7);
}
1000f712:	bd30      	pop	{r4, r5, pc}
1000f714:	40010000 	.word	0x40010000
1000f718:	ffff8000 	.word	0xffff8000
1000f71c:	e000e100 	.word	0xe000e100

1000f720 <PORT1_COMB_Handler>:

#ifdef CHIPVERSION_B0
void PORT1_COMB_Handler(void)
{
1000f720:	b510      	push	{r4, lr}
	/* if(CMSDK_GPIO1->INTSTATUS & ((1<<15) | (1<<14) | (1<<13))) { */
	if (GPIO1->INTSTATUSCLEAR.reg & ((1 << 15) | (1 << 14) | (1 << 13))) {
1000f722:	4b0c      	ldr	r3, [pc, #48]	; (1000f754 <PORT1_COMB_Handler+0x34>)
1000f724:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
1000f726:	0b5b      	lsrs	r3, r3, #13
1000f728:	d010      	beq.n	1000f74c <PORT1_COMB_Handler+0x2c>
		handle_ext_wakeup_isr();
1000f72a:	4b0b      	ldr	r3, [pc, #44]	; (1000f758 <PORT1_COMB_Handler+0x38>)
1000f72c:	681b      	ldr	r3, [r3, #0]
1000f72e:	4798      	blx	r3

		/* clear specific int pin status that caused the Interrupt */
		/* CMSDK_GPIO1->INTCLEAR |= CMSDK_GPIO1->INTSTATUS & ((1<<15) | (1<<14) | (1<<13)); */
		GPIO1->INTSTATUSCLEAR.reg |= GPIO1->INTSTATUSCLEAR.reg & ((1 << 15) | (1 << 14) | (1 << 13));
1000f730:	4a08      	ldr	r2, [pc, #32]	; (1000f754 <PORT1_COMB_Handler+0x34>)
1000f732:	8f13      	ldrh	r3, [r2, #56]	; 0x38
1000f734:	8f11      	ldrh	r1, [r2, #56]	; 0x38
1000f736:	0b5b      	lsrs	r3, r3, #13
1000f738:	035b      	lsls	r3, r3, #13
1000f73a:	430b      	orrs	r3, r1
1000f73c:	8713      	strh	r3, [r2, #56]	; 0x38
1000f73e:	2180      	movs	r1, #128	; 0x80
1000f740:	0049      	lsls	r1, r1, #1
1000f742:	23c0      	movs	r3, #192	; 0xc0
1000f744:	005b      	lsls	r3, r3, #1
1000f746:	4a05      	ldr	r2, [pc, #20]	; (1000f75c <PORT1_COMB_Handler+0x3c>)
1000f748:	50d1      	str	r1, [r2, r3]
1000f74a:	e001      	b.n	1000f750 <PORT1_COMB_Handler+0x30>
		/* NVIC_ClearPendingIRQ(PORT1_COMB_IRQn); */
		NVIC_ClearPendingIRQ(8);
	} else {
		gpio1_combined_isr_handler();
1000f74c:	4b04      	ldr	r3, [pc, #16]	; (1000f760 <PORT1_COMB_Handler+0x40>)
1000f74e:	4798      	blx	r3
	}
}
1000f750:	bd10      	pop	{r4, pc}
1000f752:	46c0      	nop			; (mov r8, r8)
1000f754:	40011000 	.word	0x40011000
1000f758:	1001acf0 	.word	0x1001acf0
1000f75c:	e000e100 	.word	0xe000e100
1000f760:	1000f645 	.word	0x1000f645

1000f764 <wakeup_int_unregister_callback>:
	{
		wakeup_source_callback[wakeup_source] = 0;
	}
	else 
	{
		status = PORT_STATUS_ERR_INVALID_ARG;
1000f764:	2303      	movs	r3, #3
#endif  /* CHIPVERSION_B0 */

enum port_status_code wakeup_int_unregister_callback(enum port_wakeup_source wakeup_source)
{
	enum port_status_code status = PORT_STATUS_OK;
	if(	(wakeup_source == PORT_WAKEUP_SOURCE_AON_GPIO_0) || 
1000f766:	2802      	cmp	r0, #2
1000f768:	d804      	bhi.n	1000f774 <wakeup_int_unregister_callback+0x10>
		(wakeup_source == PORT_WAKEUP_SOURCE_AON_GPIO_1) || 
		(wakeup_source == PORT_WAKEUP_SOURCE_AON_GPIO_2) ) 
	{
		wakeup_source_callback[wakeup_source] = 0;
1000f76a:	0080      	lsls	r0, r0, #2
1000f76c:	2200      	movs	r2, #0
1000f76e:	4b02      	ldr	r3, [pc, #8]	; (1000f778 <wakeup_int_unregister_callback+0x14>)
1000f770:	50c2      	str	r2, [r0, r3]

#endif  /* CHIPVERSION_B0 */

enum port_status_code wakeup_int_unregister_callback(enum port_wakeup_source wakeup_source)
{
	enum port_status_code status = PORT_STATUS_OK;
1000f772:	2300      	movs	r3, #0
	else 
	{
		status = PORT_STATUS_ERR_INVALID_ARG;
	}
	return status;
}
1000f774:	0018      	movs	r0, r3
1000f776:	4770      	bx	lr
1000f778:	1001ad08 	.word	0x1001ad08

1000f77c <wakeup_active_event_callback>:

void wakeup_active_event_callback(uint32_t wakeup_source)
{
1000f77c:	b510      	push	{r4, lr}
1000f77e:	0004      	movs	r4, r0
	portint_callback_t callback;
	uint32_t *pu32WakeSource = (uint32_t *)wakeup_source;
	if((*pu32WakeSource & 0xFF) == 1)
1000f780:	7803      	ldrb	r3, [r0, #0]
1000f782:	2b01      	cmp	r3, #1
1000f784:	d108      	bne.n	1000f798 <wakeup_active_event_callback+0x1c>
	{
		if(wakeup_source_callback[0] != NULL) {
1000f786:	4b11      	ldr	r3, [pc, #68]	; (1000f7cc <wakeup_active_event_callback+0x50>)
1000f788:	681b      	ldr	r3, [r3, #0]
1000f78a:	2b00      	cmp	r3, #0
1000f78c:	d000      	beq.n	1000f790 <wakeup_active_event_callback+0x14>
			callback = wakeup_source_callback[0];
			callback();
1000f78e:	4798      	blx	r3
		}
		*pu32WakeSource &= ~(0xFF);
1000f790:	23ff      	movs	r3, #255	; 0xff
1000f792:	6822      	ldr	r2, [r4, #0]
1000f794:	439a      	bics	r2, r3
1000f796:	6022      	str	r2, [r4, #0]
	}
	if(((*pu32WakeSource >> 8) & 0xFF) == 1)
1000f798:	7863      	ldrb	r3, [r4, #1]
1000f79a:	2b01      	cmp	r3, #1
1000f79c:	d108      	bne.n	1000f7b0 <wakeup_active_event_callback+0x34>
	{
		if(wakeup_source_callback[1] != NULL) {
1000f79e:	4b0b      	ldr	r3, [pc, #44]	; (1000f7cc <wakeup_active_event_callback+0x50>)
1000f7a0:	685b      	ldr	r3, [r3, #4]
1000f7a2:	2b00      	cmp	r3, #0
1000f7a4:	d000      	beq.n	1000f7a8 <wakeup_active_event_callback+0x2c>
			callback = wakeup_source_callback[1];
			callback();
1000f7a6:	4798      	blx	r3
		}
		*pu32WakeSource &= ~(0xFF << 8);
1000f7a8:	4b09      	ldr	r3, [pc, #36]	; (1000f7d0 <wakeup_active_event_callback+0x54>)
1000f7aa:	6822      	ldr	r2, [r4, #0]
1000f7ac:	4013      	ands	r3, r2
1000f7ae:	6023      	str	r3, [r4, #0]
	}
	if(((*pu32WakeSource >> 16) & 0xFF) == 1)
1000f7b0:	78a3      	ldrb	r3, [r4, #2]
1000f7b2:	2b01      	cmp	r3, #1
1000f7b4:	d108      	bne.n	1000f7c8 <wakeup_active_event_callback+0x4c>
	{
		if(wakeup_source_callback[2] != NULL) {
1000f7b6:	4b05      	ldr	r3, [pc, #20]	; (1000f7cc <wakeup_active_event_callback+0x50>)
1000f7b8:	689b      	ldr	r3, [r3, #8]
1000f7ba:	2b00      	cmp	r3, #0
1000f7bc:	d000      	beq.n	1000f7c0 <wakeup_active_event_callback+0x44>
			callback = wakeup_source_callback[2];
			callback();
1000f7be:	4798      	blx	r3
		}
		*pu32WakeSource &= ~(0xFF << 16);
1000f7c0:	4b04      	ldr	r3, [pc, #16]	; (1000f7d4 <wakeup_active_event_callback+0x58>)
1000f7c2:	6822      	ldr	r2, [r4, #0]
1000f7c4:	4013      	ands	r3, r2
1000f7c6:	6023      	str	r3, [r4, #0]
	}
}
1000f7c8:	bd10      	pop	{r4, pc}
1000f7ca:	46c0      	nop			; (mov r8, r8)
1000f7cc:	1001ad08 	.word	0x1001ad08
1000f7d0:	ffff00ff 	.word	0xffff00ff
1000f7d4:	ff00ffff 	.word	0xff00ffff

1000f7d8 <resume_cb>:
	pressure_device.new_int = false;
}


static void resume_cb(void)
{
1000f7d8:	b510      	push	{r4, lr}
    init_port_list(); // re-initialize all ports
1000f7da:	4b09      	ldr	r3, [pc, #36]	; (1000f800 <resume_cb+0x28>)
1000f7dc:	4798      	blx	r3
    serial_console_init(); // GPIO (UART) for the console
1000f7de:	4b09      	ldr	r3, [pc, #36]	; (1000f804 <resume_cb+0x2c>)
1000f7e0:	4798      	blx	r3
    sms_dualtimer_init();
1000f7e2:	4b09      	ldr	r3, [pc, #36]	; (1000f808 <resume_cb+0x30>)
1000f7e4:	4798      	blx	r3
    delay_init();
1000f7e6:	4b09      	ldr	r3, [pc, #36]	; (1000f80c <resume_cb+0x34>)
1000f7e8:	4798      	blx	r3
    sms_button_configure_gpio(); // GPIO (AO_0 & AO_1) for the buttons
1000f7ea:	4b09      	ldr	r3, [pc, #36]	; (1000f810 <resume_cb+0x38>)
1000f7ec:	4798      	blx	r3
    sms_led_gpio_init();
1000f7ee:	4b09      	ldr	r3, [pc, #36]	; (1000f814 <resume_cb+0x3c>)
1000f7f0:	4798      	blx	r3
    sms_spi_master_configure();
1000f7f2:	4b09      	ldr	r3, [pc, #36]	; (1000f818 <resume_cb+0x40>)
1000f7f4:	4798      	blx	r3
    sms_i2c_master_configure();
1000f7f6:	4b09      	ldr	r3, [pc, #36]	; (1000f81c <resume_cb+0x44>)
1000f7f8:	4798      	blx	r3
    //sms_mpu_configure_gpio();
    sms_monitor_configure_gpio();
1000f7fa:	4b09      	ldr	r3, [pc, #36]	; (1000f820 <resume_cb+0x48>)
1000f7fc:	4798      	blx	r3
    //gpio_pin_set_output_level(SMS_PRESSURE_VCC_PIN, true);
}
1000f7fe:	bd10      	pop	{r4, pc}
1000f800:	1000f025 	.word	0x1000f025
1000f804:	1000ed8d 	.word	0x1000ed8d
1000f808:	1000b581 	.word	0x1000b581
1000f80c:	100080e9 	.word	0x100080e9
1000f810:	1000a56d 	.word	0x1000a56d
1000f814:	1000ae11 	.word	0x1000ae11
1000f818:	1000b431 	.word	0x1000b431
1000f81c:	1000a9a5 	.word	0x1000a9a5
1000f820:	1000a8cd 	.word	0x1000a8cd

1000f824 <sms_init_variables>:
/*- Includes ---------------------------------------------------------------*/
#include "sms_peripheral1.h"

void sms_init_variables(void)
{
    timer1_current_mode = TIMER1_MODE_NONE;
1000f824:	2300      	movs	r3, #0
1000f826:	2200      	movs	r2, #0
1000f828:	4913      	ldr	r1, [pc, #76]	; (1000f878 <sms_init_variables+0x54>)
1000f82a:	700b      	strb	r3, [r1, #0]
    timer2_current_mode = TIMER2_MODE_NONE;
1000f82c:	4913      	ldr	r1, [pc, #76]	; (1000f87c <sms_init_variables+0x58>)
1000f82e:	700b      	strb	r3, [r1, #0]
    sms_working_mode = SMS_MODE_BUTTON_SOLO;
1000f830:	2101      	movs	r1, #1
1000f832:	4813      	ldr	r0, [pc, #76]	; (1000f880 <sms_init_variables+0x5c>)
1000f834:	7001      	strb	r1, [r0, #0]
    ulp_ready = false;
1000f836:	4813      	ldr	r0, [pc, #76]	; (1000f884 <sms_init_variables+0x60>)
1000f838:	7003      	strb	r3, [r0, #0]

	// BLE
    ble_current_state = BLE_STATE_POWEROFF;
1000f83a:	4813      	ldr	r0, [pc, #76]	; (1000f888 <sms_init_variables+0x64>)
1000f83c:	7003      	strb	r3, [r0, #0]
    sms_ble_send_cnt = 0;
1000f83e:	4813      	ldr	r0, [pc, #76]	; (1000f88c <sms_init_variables+0x68>)
1000f840:	8003      	strh	r3, [r0, #0]

	// button
    button_instance.current_state = BUTTON_STATE_NONE;
1000f842:	4b13      	ldr	r3, [pc, #76]	; (1000f890 <sms_init_variables+0x6c>)
1000f844:	2000      	movs	r0, #0
1000f846:	7358      	strb	r0, [r3, #13]
    button_instance.btn0.id = SMS_BTN_0;
1000f848:	701a      	strb	r2, [r3, #0]
    button_instance.btn0.gpio_pin = SMS_BTN_0_PIN;
1000f84a:	201f      	movs	r0, #31
1000f84c:	7058      	strb	r0, [r3, #1]
    button_instance.btn0.int_enabled = true;
1000f84e:	7099      	strb	r1, [r3, #2]
	button_instance.btn0.new_int = false;
1000f850:	70da      	strb	r2, [r3, #3]
    button_instance.btn0.char_value = 0;
1000f852:	715a      	strb	r2, [r3, #5]
    button_instance.btn1.id = SMS_BTN_1;
1000f854:	7199      	strb	r1, [r3, #6]
    button_instance.btn1.gpio_pin = SMS_BTN_1_PIN;
1000f856:	3802      	subs	r0, #2
1000f858:	71d8      	strb	r0, [r3, #7]
    button_instance.btn1.int_enabled = true;
1000f85a:	7219      	strb	r1, [r3, #8]
	button_instance.btn1.new_int = false;
1000f85c:	725a      	strb	r2, [r3, #9]
    button_instance.btn1.char_value = 0;
1000f85e:	72da      	strb	r2, [r3, #11]
	
	// pressure
    pressure_device.hal.current_state = MS58_STATE_NONE;
1000f860:	4b0c      	ldr	r3, [pc, #48]	; (1000f894 <sms_init_variables+0x70>)
1000f862:	3124      	adds	r1, #36	; 0x24
1000f864:	545a      	strb	r2, [r3, r1]
    pressure_device.state = PRESSURE_STATE_OFF;
1000f866:	3106      	adds	r1, #6
1000f868:	545a      	strb	r2, [r3, r1]
	pressure_device.rts = false;
1000f86a:	3901      	subs	r1, #1
1000f86c:	545a      	strb	r2, [r3, r1]
	pressure_device.int_enabled = false;
1000f86e:	3902      	subs	r1, #2
1000f870:	545a      	strb	r2, [r3, r1]
	pressure_device.new_int = false;
1000f872:	3101      	adds	r1, #1
1000f874:	545a      	strb	r2, [r3, r1]
}
1000f876:	4770      	bx	lr
1000f878:	10019ec4 	.word	0x10019ec4
1000f87c:	1001a07b 	.word	0x1001a07b
1000f880:	10019f54 	.word	0x10019f54
1000f884:	10019f55 	.word	0x10019f55
1000f888:	1001a074 	.word	0x1001a074
1000f88c:	1001a094 	.word	0x1001a094
1000f890:	10019f58 	.word	0x10019f58
1000f894:	10019fdc 	.word	0x10019fdc

1000f898 <main>:
	//sms_current_interrupt.int_on = true;
//}


int main(void)
{
1000f898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000f89a:	464f      	mov	r7, r9
1000f89c:	4646      	mov	r6, r8
1000f89e:	b4c0      	push	{r6, r7}
    /* Define current BLE state
     * ------------------------ */
    ble_current_state = BLE_STATE_STARTING;
1000f8a0:	2210      	movs	r2, #16
1000f8a2:	4b95      	ldr	r3, [pc, #596]	; (1000faf8 <main+0x260>)
1000f8a4:	701a      	strb	r2, [r3, #0]
    
    /* Initialize platform
     * ------------------- */
	platform_driver_init();
1000f8a6:	4b95      	ldr	r3, [pc, #596]	; (1000fafc <main+0x264>)
1000f8a8:	4798      	blx	r3
	gpio_init(); // GPIO
1000f8aa:	4b95      	ldr	r3, [pc, #596]	; (1000fb00 <main+0x268>)
1000f8ac:	4798      	blx	r3
	serial_console_init(); // serial console for debugging
1000f8ae:	4b95      	ldr	r3, [pc, #596]	; (1000fb04 <main+0x26c>)
1000f8b0:	4798      	blx	r3
    
    /* Disable ULP
     * ----------- */
	acquire_sleep_lock();
1000f8b2:	4b95      	ldr	r3, [pc, #596]	; (1000fb08 <main+0x270>)
1000f8b4:	4798      	blx	r3
    

    /* Initialize SMS flags
     * -------------------- */
    sms_init_variables();
1000f8b6:	4b95      	ldr	r3, [pc, #596]	; (1000fb0c <main+0x274>)
1000f8b8:	4798      	blx	r3
    
    
    /* Initialize hardware components
     * ------------------------------ */
    // Dualtimer
    sms_dualtimer_init();
1000f8ba:	4b95      	ldr	r3, [pc, #596]	; (1000fb10 <main+0x278>)
1000f8bc:	4798      	blx	r3
	
    // Blocking delay (hacked from other SAM platforms)
    delay_init();
1000f8be:	4b95      	ldr	r3, [pc, #596]	; (1000fb14 <main+0x27c>)
1000f8c0:	4798      	blx	r3

	// Buttons
    sms_button_configure_gpio();
1000f8c2:	4b95      	ldr	r3, [pc, #596]	; (1000fb18 <main+0x280>)
1000f8c4:	4798      	blx	r3
    
    // LED
    sms_led_gpio_init();
1000f8c6:	4b95      	ldr	r3, [pc, #596]	; (1000fb1c <main+0x284>)
1000f8c8:	4798      	blx	r3
    
    // I2C
    sms_i2c_master_configure();
1000f8ca:	4b95      	ldr	r3, [pc, #596]	; (1000fb20 <main+0x288>)
1000f8cc:	4798      	blx	r3
    
    // SPI
    sms_spi_master_configure();
1000f8ce:	4b95      	ldr	r3, [pc, #596]	; (1000fb24 <main+0x28c>)
1000f8d0:	4798      	blx	r3
    
    // MPU
    sms_mpu_configure_gpio();
1000f8d2:	4b95      	ldr	r3, [pc, #596]	; (1000fb28 <main+0x290>)
1000f8d4:	4798      	blx	r3
    
	// monitoring...
    sms_monitor_configure_gpio();
1000f8d6:	4b95      	ldr	r3, [pc, #596]	; (1000fb2c <main+0x294>)
1000f8d8:	4798      	blx	r3
    
    /* Initialize the BLE module
     * ------------------------- */
	ble_device_init(NULL); // initialize the BLE chip and set the device address 
1000f8da:	2000      	movs	r0, #0
1000f8dc:	4b94      	ldr	r3, [pc, #592]	; (1000fb30 <main+0x298>)
1000f8de:	4798      	blx	r3
	
    
    /* Define BLE services
     * ------------------- */
    sms_button_define_services();
1000f8e0:	4b94      	ldr	r3, [pc, #592]	; (1000fb34 <main+0x29c>)
1000f8e2:	4798      	blx	r3
    sms_pressure_define_services();
1000f8e4:	4b94      	ldr	r3, [pc, #592]	; (1000fb38 <main+0x2a0>)
1000f8e6:	4798      	blx	r3
    sms_mpu_define_services();
1000f8e8:	4b94      	ldr	r3, [pc, #592]	; (1000fb3c <main+0x2a4>)
1000f8ea:	4798      	blx	r3
    
    
    /* Register callbacks
     * ------------------ */
    // Recovering from ULP
    register_resume_callback(resume_cb); // register resume callback
1000f8ec:	4894      	ldr	r0, [pc, #592]	; (1000fb40 <main+0x2a8>)
1000f8ee:	4b95      	ldr	r3, [pc, #596]	; (1000fb44 <main+0x2ac>)
1000f8f0:	4798      	blx	r3

    // Dualtimer (AON timer enables on registration... so do it later)    
    sms_dualtimer_register_callback(DUALTIMER_TIMER1, sms_dualtimer1_cb); // button pressing timer
1000f8f2:	4995      	ldr	r1, [pc, #596]	; (1000fb48 <main+0x2b0>)
1000f8f4:	2000      	movs	r0, #0
1000f8f6:	4c95      	ldr	r4, [pc, #596]	; (1000fb4c <main+0x2b4>)
1000f8f8:	47a0      	blx	r4
    sms_dualtimer_register_callback(DUALTIMER_TIMER2, sms_dualtimer2_cb); // LED blinking timer
1000f8fa:	4995      	ldr	r1, [pc, #596]	; (1000fb50 <main+0x2b8>)
1000f8fc:	2001      	movs	r0, #1
1000f8fe:	47a0      	blx	r4

    // Buttons
    sms_button_register_callbacks();
1000f900:	4b94      	ldr	r3, [pc, #592]	; (1000fb54 <main+0x2bc>)
1000f902:	4798      	blx	r3
    
    // MPU
    sms_mpu_register_callbacks();
1000f904:	4b94      	ldr	r3, [pc, #592]	; (1000fb58 <main+0x2c0>)
1000f906:	4798      	blx	r3

    // BLE
    ble_mgr_events_callback_handler(REGISTER_CALL_BACK, BLE_GAP_EVENT_TYPE, sms_ble_gap_cb);
1000f908:	4a94      	ldr	r2, [pc, #592]	; (1000fb5c <main+0x2c4>)
1000f90a:	2100      	movs	r1, #0
1000f90c:	2000      	movs	r0, #0
1000f90e:	4c94      	ldr	r4, [pc, #592]	; (1000fb60 <main+0x2c8>)
1000f910:	47a0      	blx	r4
    ble_mgr_events_callback_handler(REGISTER_CALL_BACK, BLE_GATT_SERVER_EVENT_TYPE, sms_ble_gatt_server_cb);
1000f912:	4a94      	ldr	r2, [pc, #592]	; (1000fb64 <main+0x2cc>)
1000f914:	2102      	movs	r1, #2
1000f916:	2000      	movs	r0, #0
1000f918:	47a0      	blx	r4

    //ble_set_ulp_mode(BLE_ULP_MODE_SET);
    
    /* Enable buttons interrupts
     * ------------------------- */
    sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
1000f91a:	2100      	movs	r1, #0
1000f91c:	2000      	movs	r0, #0
1000f91e:	4b92      	ldr	r3, [pc, #584]	; (1000fb68 <main+0x2d0>)
1000f920:	4798      	blx	r3
    //sms_sensors_interrupt_toggle(true, false);
    //while(1) {}
    
    /* Goto sleep
     * ---------- */
    sms_ble_power_down();
1000f922:	4b92      	ldr	r3, [pc, #584]	; (1000fb6c <main+0x2d4>)
1000f924:	4798      	blx	r3

    
	while(true)
	{
		/* BLE Event task */
		ble_event_task(BLE_EVENT_TIMEOUT);
1000f926:	4f92      	ldr	r7, [pc, #584]	; (1000fb70 <main+0x2d8>)
			}
			// here
			button_instance.btn1.new_int = false;
			DBG_LOG_CONT_DEV("done");
		}
		if(mpu_device.new_int) {
1000f928:	2429      	movs	r4, #41	; 0x29
		if(pressure_device.new_int) {
			DBG_LOG_DEV("Press int (%d)... ", sms_ble_sending);
			gpio_pin_set_output_level(DBG_PIN_2, DBG_PIN_HIGH);
			sms_pressure_poll_data();
			pressure_device.new_int = false;
			pressure_device.rts = true;
1000f92a:	252a      	movs	r5, #42	; 0x2a
	{
		/* BLE Event task */
		ble_event_task(BLE_EVENT_TIMEOUT);
		
		/* Sensor interrupt region */
		if(button_instance.btn0.new_int) {
1000f92c:	4e91      	ldr	r6, [pc, #580]	; (1000fb74 <main+0x2dc>)

    
	while(true)
	{
		/* BLE Event task */
		ble_event_task(BLE_EVENT_TIMEOUT);
1000f92e:	2001      	movs	r0, #1
1000f930:	4240      	negs	r0, r0
1000f932:	47b8      	blx	r7
		
		/* Sensor interrupt region */
		if(button_instance.btn0.new_int) {
1000f934:	78f3      	ldrb	r3, [r6, #3]
1000f936:	2b00      	cmp	r3, #0
1000f938:	d016      	beq.n	1000f968 <main+0xd0>
			DBG_LOG_DEV("Btn0 int... ");
1000f93a:	488f      	ldr	r0, [pc, #572]	; (1000fb78 <main+0x2e0>)
1000f93c:	4b8f      	ldr	r3, [pc, #572]	; (1000fb7c <main+0x2e4>)
1000f93e:	4798      	blx	r3
1000f940:	488f      	ldr	r0, [pc, #572]	; (1000fb80 <main+0x2e8>)
1000f942:	4b90      	ldr	r3, [pc, #576]	; (1000fb84 <main+0x2ec>)
1000f944:	4798      	blx	r3
			if(sms_button_fn(SMS_BTN_0) < 0) {
1000f946:	2000      	movs	r0, #0
1000f948:	4b8f      	ldr	r3, [pc, #572]	; (1000fb88 <main+0x2f0>)
1000f94a:	4798      	blx	r3
1000f94c:	2800      	cmp	r0, #0
1000f94e:	da05      	bge.n	1000f95c <main+0xc4>
				DBG_LOG_DEV("Error in sms_button_fn()");
1000f950:	4889      	ldr	r0, [pc, #548]	; (1000fb78 <main+0x2e0>)
1000f952:	4b8a      	ldr	r3, [pc, #552]	; (1000fb7c <main+0x2e4>)
1000f954:	4798      	blx	r3
1000f956:	488d      	ldr	r0, [pc, #564]	; (1000fb8c <main+0x2f4>)
1000f958:	4b8a      	ldr	r3, [pc, #552]	; (1000fb84 <main+0x2ec>)
1000f95a:	4798      	blx	r3
			}
			// here
			button_instance.btn0.new_int = false;
1000f95c:	2200      	movs	r2, #0
1000f95e:	4b85      	ldr	r3, [pc, #532]	; (1000fb74 <main+0x2dc>)
1000f960:	70da      	strb	r2, [r3, #3]
			DBG_LOG_CONT_DEV("done");
1000f962:	488b      	ldr	r0, [pc, #556]	; (1000fb90 <main+0x2f8>)
1000f964:	4b87      	ldr	r3, [pc, #540]	; (1000fb84 <main+0x2ec>)
1000f966:	4798      	blx	r3
		}
		if(button_instance.btn1.new_int) {
1000f968:	4b82      	ldr	r3, [pc, #520]	; (1000fb74 <main+0x2dc>)
1000f96a:	7a5b      	ldrb	r3, [r3, #9]
1000f96c:	2b00      	cmp	r3, #0
1000f96e:	d016      	beq.n	1000f99e <main+0x106>
			DBG_LOG_DEV("btn1 int... ");
1000f970:	4881      	ldr	r0, [pc, #516]	; (1000fb78 <main+0x2e0>)
1000f972:	4b82      	ldr	r3, [pc, #520]	; (1000fb7c <main+0x2e4>)
1000f974:	4798      	blx	r3
1000f976:	4887      	ldr	r0, [pc, #540]	; (1000fb94 <main+0x2fc>)
1000f978:	4b82      	ldr	r3, [pc, #520]	; (1000fb84 <main+0x2ec>)
1000f97a:	4798      	blx	r3
			if(sms_button_fn(SMS_BTN_1) < 0) {
1000f97c:	2001      	movs	r0, #1
1000f97e:	4b82      	ldr	r3, [pc, #520]	; (1000fb88 <main+0x2f0>)
1000f980:	4798      	blx	r3
1000f982:	2800      	cmp	r0, #0
1000f984:	da05      	bge.n	1000f992 <main+0xfa>
				DBG_LOG_DEV("Error in sms_button_fn()");
1000f986:	487c      	ldr	r0, [pc, #496]	; (1000fb78 <main+0x2e0>)
1000f988:	4b7c      	ldr	r3, [pc, #496]	; (1000fb7c <main+0x2e4>)
1000f98a:	4798      	blx	r3
1000f98c:	487f      	ldr	r0, [pc, #508]	; (1000fb8c <main+0x2f4>)
1000f98e:	4b7d      	ldr	r3, [pc, #500]	; (1000fb84 <main+0x2ec>)
1000f990:	4798      	blx	r3
			}
			// here
			button_instance.btn1.new_int = false;
1000f992:	2200      	movs	r2, #0
1000f994:	4b77      	ldr	r3, [pc, #476]	; (1000fb74 <main+0x2dc>)
1000f996:	725a      	strb	r2, [r3, #9]
			DBG_LOG_CONT_DEV("done");
1000f998:	487d      	ldr	r0, [pc, #500]	; (1000fb90 <main+0x2f8>)
1000f99a:	4b7a      	ldr	r3, [pc, #488]	; (1000fb84 <main+0x2ec>)
1000f99c:	4798      	blx	r3
		}
		if(mpu_device.new_int) {
1000f99e:	4b7e      	ldr	r3, [pc, #504]	; (1000fb98 <main+0x300>)
1000f9a0:	5d1b      	ldrb	r3, [r3, r4]
1000f9a2:	2b00      	cmp	r3, #0
1000f9a4:	d01b      	beq.n	1000f9de <main+0x146>
			DBG_LOG_DEV("MPU int (%d)... ", sms_ble_sending);
1000f9a6:	4874      	ldr	r0, [pc, #464]	; (1000fb78 <main+0x2e0>)
1000f9a8:	4b74      	ldr	r3, [pc, #464]	; (1000fb7c <main+0x2e4>)
1000f9aa:	4798      	blx	r3
1000f9ac:	4b7b      	ldr	r3, [pc, #492]	; (1000fb9c <main+0x304>)
1000f9ae:	7819      	ldrb	r1, [r3, #0]
1000f9b0:	b2c9      	uxtb	r1, r1
1000f9b2:	487b      	ldr	r0, [pc, #492]	; (1000fba0 <main+0x308>)
1000f9b4:	4b73      	ldr	r3, [pc, #460]	; (1000fb84 <main+0x2ec>)
1000f9b6:	4698      	mov	r8, r3
1000f9b8:	4798      	blx	r3
			gpio_pin_set_output_level(DBG_PIN_1, DBG_PIN_HIGH);
1000f9ba:	2101      	movs	r1, #1
1000f9bc:	200e      	movs	r0, #14
1000f9be:	4b79      	ldr	r3, [pc, #484]	; (1000fba4 <main+0x30c>)
1000f9c0:	4699      	mov	r9, r3
1000f9c2:	4798      	blx	r3
			sms_mpu_poll_data();
1000f9c4:	4b78      	ldr	r3, [pc, #480]	; (1000fba8 <main+0x310>)
1000f9c6:	4798      	blx	r3
			mpu_device.new_int = false;
1000f9c8:	4b73      	ldr	r3, [pc, #460]	; (1000fb98 <main+0x300>)
1000f9ca:	2200      	movs	r2, #0
1000f9cc:	551a      	strb	r2, [r3, r4]
			mpu_device.rts = true;
1000f9ce:	2101      	movs	r1, #1
1000f9d0:	322e      	adds	r2, #46	; 0x2e
1000f9d2:	5499      	strb	r1, [r3, r2]
			gpio_pin_set_output_level(DBG_PIN_1, DBG_PIN_LOW);
1000f9d4:	2100      	movs	r1, #0
1000f9d6:	200e      	movs	r0, #14
1000f9d8:	47c8      	blx	r9
			DBG_LOG_CONT_DEV("done");
1000f9da:	486d      	ldr	r0, [pc, #436]	; (1000fb90 <main+0x2f8>)
1000f9dc:	47c0      	blx	r8
		}
		if(pressure_device.new_int) {
1000f9de:	4b73      	ldr	r3, [pc, #460]	; (1000fbac <main+0x314>)
1000f9e0:	5d1b      	ldrb	r3, [r3, r4]
1000f9e2:	2b00      	cmp	r3, #0
1000f9e4:	d01a      	beq.n	1000fa1c <main+0x184>
			DBG_LOG_DEV("Press int (%d)... ", sms_ble_sending);
1000f9e6:	4864      	ldr	r0, [pc, #400]	; (1000fb78 <main+0x2e0>)
1000f9e8:	4b64      	ldr	r3, [pc, #400]	; (1000fb7c <main+0x2e4>)
1000f9ea:	4798      	blx	r3
1000f9ec:	4b6b      	ldr	r3, [pc, #428]	; (1000fb9c <main+0x304>)
1000f9ee:	7819      	ldrb	r1, [r3, #0]
1000f9f0:	b2c9      	uxtb	r1, r1
1000f9f2:	486f      	ldr	r0, [pc, #444]	; (1000fbb0 <main+0x318>)
1000f9f4:	4b63      	ldr	r3, [pc, #396]	; (1000fb84 <main+0x2ec>)
1000f9f6:	4698      	mov	r8, r3
1000f9f8:	4798      	blx	r3
			gpio_pin_set_output_level(DBG_PIN_2, DBG_PIN_HIGH);
1000f9fa:	2101      	movs	r1, #1
1000f9fc:	200f      	movs	r0, #15
1000f9fe:	4b69      	ldr	r3, [pc, #420]	; (1000fba4 <main+0x30c>)
1000fa00:	4699      	mov	r9, r3
1000fa02:	4798      	blx	r3
			sms_pressure_poll_data();
1000fa04:	4b6b      	ldr	r3, [pc, #428]	; (1000fbb4 <main+0x31c>)
1000fa06:	4798      	blx	r3
			pressure_device.new_int = false;
1000fa08:	4b68      	ldr	r3, [pc, #416]	; (1000fbac <main+0x314>)
1000fa0a:	2200      	movs	r2, #0
1000fa0c:	551a      	strb	r2, [r3, r4]
			pressure_device.rts = true;
1000fa0e:	3201      	adds	r2, #1
1000fa10:	555a      	strb	r2, [r3, r5]
			gpio_pin_set_output_level(DBG_PIN_2, DBG_PIN_LOW);
1000fa12:	2100      	movs	r1, #0
1000fa14:	200f      	movs	r0, #15
1000fa16:	47c8      	blx	r9
			DBG_LOG_CONT_DEV("done");
1000fa18:	485d      	ldr	r0, [pc, #372]	; (1000fb90 <main+0x2f8>)
1000fa1a:	47c0      	blx	r8
		}
		
		/* Timer interrupt region */
		if(timer1_instance.new_int) {
1000fa1c:	4b66      	ldr	r3, [pc, #408]	; (1000fbb8 <main+0x320>)
1000fa1e:	789b      	ldrb	r3, [r3, #2]
1000fa20:	2b00      	cmp	r3, #0
1000fa22:	d010      	beq.n	1000fa46 <main+0x1ae>
			DBG_LOG_DEV("Timer1 int... ");
1000fa24:	4854      	ldr	r0, [pc, #336]	; (1000fb78 <main+0x2e0>)
1000fa26:	4b55      	ldr	r3, [pc, #340]	; (1000fb7c <main+0x2e4>)
1000fa28:	4798      	blx	r3
1000fa2a:	4864      	ldr	r0, [pc, #400]	; (1000fbbc <main+0x324>)
1000fa2c:	4b55      	ldr	r3, [pc, #340]	; (1000fb84 <main+0x2ec>)
1000fa2e:	4698      	mov	r8, r3
1000fa30:	4798      	blx	r3
			sms_dualtimer_stop(DUALTIMER_TIMER1);
1000fa32:	2000      	movs	r0, #0
1000fa34:	4b62      	ldr	r3, [pc, #392]	; (1000fbc0 <main+0x328>)
1000fa36:	4798      	blx	r3
			sms_dualtimer1_fn();
1000fa38:	4b62      	ldr	r3, [pc, #392]	; (1000fbc4 <main+0x32c>)
1000fa3a:	4798      	blx	r3
			DBG_LOG_CONT_DEV("done");
1000fa3c:	4854      	ldr	r0, [pc, #336]	; (1000fb90 <main+0x2f8>)
1000fa3e:	47c0      	blx	r8
			timer1_instance.new_int = false;
1000fa40:	2200      	movs	r2, #0
1000fa42:	4b5d      	ldr	r3, [pc, #372]	; (1000fbb8 <main+0x320>)
1000fa44:	709a      	strb	r2, [r3, #2]
		}
		if(timer2_instance.new_int) {
1000fa46:	4b60      	ldr	r3, [pc, #384]	; (1000fbc8 <main+0x330>)
1000fa48:	789b      	ldrb	r3, [r3, #2]
1000fa4a:	2b00      	cmp	r3, #0
1000fa4c:	d010      	beq.n	1000fa70 <main+0x1d8>
			DBG_LOG_DEV("Timer2 int... ");
1000fa4e:	484a      	ldr	r0, [pc, #296]	; (1000fb78 <main+0x2e0>)
1000fa50:	4b4a      	ldr	r3, [pc, #296]	; (1000fb7c <main+0x2e4>)
1000fa52:	4798      	blx	r3
1000fa54:	485d      	ldr	r0, [pc, #372]	; (1000fbcc <main+0x334>)
1000fa56:	4b4b      	ldr	r3, [pc, #300]	; (1000fb84 <main+0x2ec>)
1000fa58:	4698      	mov	r8, r3
1000fa5a:	4798      	blx	r3
			sms_dualtimer_stop(DUALTIMER_TIMER2);
1000fa5c:	2001      	movs	r0, #1
1000fa5e:	4b58      	ldr	r3, [pc, #352]	; (1000fbc0 <main+0x328>)
1000fa60:	4798      	blx	r3
			sms_dualtimer2_fn();
1000fa62:	4b5b      	ldr	r3, [pc, #364]	; (1000fbd0 <main+0x338>)
1000fa64:	4798      	blx	r3
			DBG_LOG_CONT_DEV("done");
1000fa66:	484a      	ldr	r0, [pc, #296]	; (1000fb90 <main+0x2f8>)
1000fa68:	47c0      	blx	r8
			timer2_instance.new_int = false;
1000fa6a:	2200      	movs	r2, #0
1000fa6c:	4b56      	ldr	r3, [pc, #344]	; (1000fbc8 <main+0x330>)
1000fa6e:	709a      	strb	r2, [r3, #2]
		}
		
		/* Sending region */
		if(mpu_device.rts) {
1000fa70:	232e      	movs	r3, #46	; 0x2e
1000fa72:	4a49      	ldr	r2, [pc, #292]	; (1000fb98 <main+0x300>)
1000fa74:	5cd3      	ldrb	r3, [r2, r3]
1000fa76:	2b00      	cmp	r3, #0
1000fa78:	d01c      	beq.n	1000fab4 <main+0x21c>
			DBG_LOG_DEV("MPU sending (%d/%d)... ", pressure_device.new_int, sms_ble_sending);
1000fa7a:	483f      	ldr	r0, [pc, #252]	; (1000fb78 <main+0x2e0>)
1000fa7c:	4b3f      	ldr	r3, [pc, #252]	; (1000fb7c <main+0x2e4>)
1000fa7e:	4798      	blx	r3
1000fa80:	4b4a      	ldr	r3, [pc, #296]	; (1000fbac <main+0x314>)
1000fa82:	5d19      	ldrb	r1, [r3, r4]
1000fa84:	b2c9      	uxtb	r1, r1
1000fa86:	4b45      	ldr	r3, [pc, #276]	; (1000fb9c <main+0x304>)
1000fa88:	781a      	ldrb	r2, [r3, #0]
1000fa8a:	b2d2      	uxtb	r2, r2
1000fa8c:	4851      	ldr	r0, [pc, #324]	; (1000fbd4 <main+0x33c>)
1000fa8e:	4b3d      	ldr	r3, [pc, #244]	; (1000fb84 <main+0x2ec>)
1000fa90:	4698      	mov	r8, r3
1000fa92:	4798      	blx	r3
			gpio_pin_set_output_level(DBG_PIN_1, DBG_PIN_HIGH);
1000fa94:	2101      	movs	r1, #1
1000fa96:	200e      	movs	r0, #14
1000fa98:	4b42      	ldr	r3, [pc, #264]	; (1000fba4 <main+0x30c>)
1000fa9a:	4699      	mov	r9, r3
1000fa9c:	4798      	blx	r3
			sms_ble_send_characteristic(BLE_CHAR_MPU);
1000fa9e:	2002      	movs	r0, #2
1000faa0:	4b4d      	ldr	r3, [pc, #308]	; (1000fbd8 <main+0x340>)
1000faa2:	4798      	blx	r3
			mpu_device.rts = false;
1000faa4:	2100      	movs	r1, #0
1000faa6:	232e      	movs	r3, #46	; 0x2e
1000faa8:	4a3b      	ldr	r2, [pc, #236]	; (1000fb98 <main+0x300>)
1000faaa:	54d1      	strb	r1, [r2, r3]
			gpio_pin_set_output_level(DBG_PIN_1, DBG_PIN_LOW);
1000faac:	200e      	movs	r0, #14
1000faae:	47c8      	blx	r9
			DBG_LOG_CONT_DEV("done");
1000fab0:	4837      	ldr	r0, [pc, #220]	; (1000fb90 <main+0x2f8>)
1000fab2:	47c0      	blx	r8
		}
		if(pressure_device.rts) {
1000fab4:	4b3d      	ldr	r3, [pc, #244]	; (1000fbac <main+0x314>)
1000fab6:	5d5b      	ldrb	r3, [r3, r5]
1000fab8:	2b00      	cmp	r3, #0
1000faba:	d100      	bne.n	1000fabe <main+0x226>
1000fabc:	e737      	b.n	1000f92e <main+0x96>
			DBG_LOG_DEV("Press sending (%d/%d)... ", mpu_device.new_int, sms_ble_sending);
1000fabe:	482e      	ldr	r0, [pc, #184]	; (1000fb78 <main+0x2e0>)
1000fac0:	4b2e      	ldr	r3, [pc, #184]	; (1000fb7c <main+0x2e4>)
1000fac2:	4798      	blx	r3
1000fac4:	4b34      	ldr	r3, [pc, #208]	; (1000fb98 <main+0x300>)
1000fac6:	5d19      	ldrb	r1, [r3, r4]
1000fac8:	b2c9      	uxtb	r1, r1
1000faca:	4b34      	ldr	r3, [pc, #208]	; (1000fb9c <main+0x304>)
1000facc:	781a      	ldrb	r2, [r3, #0]
1000face:	b2d2      	uxtb	r2, r2
1000fad0:	4842      	ldr	r0, [pc, #264]	; (1000fbdc <main+0x344>)
1000fad2:	4e2c      	ldr	r6, [pc, #176]	; (1000fb84 <main+0x2ec>)
1000fad4:	47b0      	blx	r6
			gpio_pin_set_output_level(DBG_PIN_2, DBG_PIN_HIGH);
1000fad6:	2101      	movs	r1, #1
1000fad8:	200f      	movs	r0, #15
1000fada:	4b32      	ldr	r3, [pc, #200]	; (1000fba4 <main+0x30c>)
1000fadc:	4698      	mov	r8, r3
1000fade:	4798      	blx	r3
			sms_ble_send_characteristic(BLE_CHAR_PRESS);
1000fae0:	2001      	movs	r0, #1
1000fae2:	4b3d      	ldr	r3, [pc, #244]	; (1000fbd8 <main+0x340>)
1000fae4:	4798      	blx	r3
			pressure_device.rts = false;
1000fae6:	2200      	movs	r2, #0
1000fae8:	4b30      	ldr	r3, [pc, #192]	; (1000fbac <main+0x314>)
1000faea:	555a      	strb	r2, [r3, r5]
			gpio_pin_set_output_level(DBG_PIN_2, DBG_PIN_LOW);
1000faec:	2100      	movs	r1, #0
1000faee:	200f      	movs	r0, #15
1000faf0:	47c0      	blx	r8
			DBG_LOG_CONT_DEV("done");
1000faf2:	4827      	ldr	r0, [pc, #156]	; (1000fb90 <main+0x2f8>)
1000faf4:	47b0      	blx	r6
1000faf6:	e719      	b.n	1000f92c <main+0x94>
1000faf8:	1001a074 	.word	0x1001a074
1000fafc:	1000f099 	.word	0x1000f099
1000fb00:	1000c62d 	.word	0x1000c62d
1000fb04:	1000ed8d 	.word	0x1000ed8d
1000fb08:	1000f5ed 	.word	0x1000f5ed
1000fb0c:	1000f825 	.word	0x1000f825
1000fb10:	1000b581 	.word	0x1000b581
1000fb14:	100080e9 	.word	0x100080e9
1000fb18:	1000a56d 	.word	0x1000a56d
1000fb1c:	1000ae11 	.word	0x1000ae11
1000fb20:	1000a9a5 	.word	0x1000a9a5
1000fb24:	1000b431 	.word	0x1000b431
1000fb28:	1000ab65 	.word	0x1000ab65
1000fb2c:	1000a8cd 	.word	0x1000a8cd
1000fb30:	1000e40d 	.word	0x1000e40d
1000fb34:	1000a865 	.word	0x1000a865
1000fb38:	1000b2b9 	.word	0x1000b2b9
1000fb3c:	1000ad85 	.word	0x1000ad85
1000fb40:	1000f7d9 	.word	0x1000f7d9
1000fb44:	1000f631 	.word	0x1000f631
1000fb48:	1000b641 	.word	0x1000b641
1000fb4c:	1000b5bd 	.word	0x1000b5bd
1000fb50:	1000b661 	.word	0x1000b661
1000fb54:	1000a61d 	.word	0x1000a61d
1000fb58:	1000abe5 	.word	0x1000abe5
1000fb5c:	10016ae4 	.word	0x10016ae4
1000fb60:	1000e33d 	.word	0x1000e33d
1000fb64:	10016b30 	.word	0x10016b30
1000fb68:	1000a81d 	.word	0x1000a81d
1000fb6c:	10009f55 	.word	0x10009f55
1000fb70:	1000ec05 	.word	0x1000ec05
1000fb74:	10019f58 	.word	0x10019f58
1000fb78:	10016528 	.word	0x10016528
1000fb7c:	1001537d 	.word	0x1001537d
1000fb80:	1001809c 	.word	0x1001809c
1000fb84:	1001525d 	.word	0x1001525d
1000fb88:	1000a691 	.word	0x1000a691
1000fb8c:	100180ac 	.word	0x100180ac
1000fb90:	100180c8 	.word	0x100180c8
1000fb94:	100180d0 	.word	0x100180d0
1000fb98:	10019ec8 	.word	0x10019ec8
1000fb9c:	10019ec5 	.word	0x10019ec5
1000fba0:	100180e0 	.word	0x100180e0
1000fba4:	1000c2ed 	.word	0x1000c2ed
1000fba8:	1000aced 	.word	0x1000aced
1000fbac:	10019fdc 	.word	0x10019fdc
1000fbb0:	100180f4 	.word	0x100180f4
1000fbb4:	1000b259 	.word	0x1000b259
1000fbb8:	10019fc8 	.word	0x10019fc8
1000fbbc:	10018108 	.word	0x10018108
1000fbc0:	1000b635 	.word	0x1000b635
1000fbc4:	1000b681 	.word	0x1000b681
1000fbc8:	1001a078 	.word	0x1001a078
1000fbcc:	10018118 	.word	0x10018118
1000fbd0:	1000b8c1 	.word	0x1000b8c1
1000fbd4:	10018128 	.word	0x10018128
1000fbd8:	1000a24d 	.word	0x1000a24d
1000fbdc:	10018140 	.word	0x10018140

1000fbe0 <internal_event_post>:
1000fbe0:	b570      	push	{r4, r5, r6, lr}
1000fbe2:	4d12      	ldr	r5, [pc, #72]	; (1000fc2c <internal_event_post+0x4c>)
1000fbe4:	682c      	ldr	r4, [r5, #0]
1000fbe6:	2c00      	cmp	r4, #0
1000fbe8:	d014      	beq.n	1000fc14 <internal_event_post+0x34>
1000fbea:	6826      	ldr	r6, [r4, #0]
1000fbec:	60e2      	str	r2, [r4, #12]
1000fbee:	602e      	str	r6, [r5, #0]
1000fbf0:	2500      	movs	r5, #0
1000fbf2:	4a0f      	ldr	r2, [pc, #60]	; (1000fc30 <internal_event_post+0x50>)
1000fbf4:	8123      	strh	r3, [r4, #8]
1000fbf6:	6813      	ldr	r3, [r2, #0]
1000fbf8:	6025      	str	r5, [r4, #0]
1000fbfa:	80a0      	strh	r0, [r4, #4]
1000fbfc:	80e1      	strh	r1, [r4, #6]
1000fbfe:	42ab      	cmp	r3, r5
1000fc00:	d101      	bne.n	1000fc06 <internal_event_post+0x26>
1000fc02:	6014      	str	r4, [r2, #0]
1000fc04:	e011      	b.n	1000fc2a <internal_event_post+0x4a>
1000fc06:	681a      	ldr	r2, [r3, #0]
1000fc08:	2a00      	cmp	r2, #0
1000fc0a:	d001      	beq.n	1000fc10 <internal_event_post+0x30>
1000fc0c:	1c13      	adds	r3, r2, #0
1000fc0e:	e7fa      	b.n	1000fc06 <internal_event_post+0x26>
1000fc10:	601c      	str	r4, [r3, #0]
1000fc12:	e00a      	b.n	1000fc2a <internal_event_post+0x4a>
1000fc14:	b2c4      	uxtb	r4, r0
1000fc16:	2c00      	cmp	r4, #0
1000fc18:	d107      	bne.n	1000fc2a <internal_event_post+0x4a>
1000fc1a:	4c06      	ldr	r4, [pc, #24]	; (1000fc34 <internal_event_post+0x54>)
1000fc1c:	60e2      	str	r2, [r4, #12]
1000fc1e:	2201      	movs	r2, #1
1000fc20:	8123      	strh	r3, [r4, #8]
1000fc22:	4b05      	ldr	r3, [pc, #20]	; (1000fc38 <internal_event_post+0x58>)
1000fc24:	80a0      	strh	r0, [r4, #4]
1000fc26:	80e1      	strh	r1, [r4, #6]
1000fc28:	701a      	strb	r2, [r3, #0]
1000fc2a:	bd70      	pop	{r4, r5, r6, pc}
1000fc2c:	10019e0c 	.word	0x10019e0c
1000fc30:	10019e08 	.word	0x10019e08
1000fc34:	10019df4 	.word	0x10019df4
1000fc38:	10019e04 	.word	0x10019e04

1000fc3c <internal_event_init>:
1000fc3c:	b510      	push	{r4, lr}
1000fc3e:	4b08      	ldr	r3, [pc, #32]	; (1000fc60 <internal_event_init+0x24>)
1000fc40:	0900      	lsrs	r0, r0, #4
1000fc42:	0100      	lsls	r0, r0, #4
1000fc44:	681a      	ldr	r2, [r3, #0]
1000fc46:	1808      	adds	r0, r1, r0
1000fc48:	4281      	cmp	r1, r0
1000fc4a:	d003      	beq.n	1000fc54 <internal_event_init+0x18>
1000fc4c:	600a      	str	r2, [r1, #0]
1000fc4e:	1c0a      	adds	r2, r1, #0
1000fc50:	3110      	adds	r1, #16
1000fc52:	e7f9      	b.n	1000fc48 <internal_event_init+0xc>
1000fc54:	601a      	str	r2, [r3, #0]
1000fc56:	2200      	movs	r2, #0
1000fc58:	4b02      	ldr	r3, [pc, #8]	; (1000fc64 <internal_event_init+0x28>)
1000fc5a:	601a      	str	r2, [r3, #0]
1000fc5c:	bd10      	pop	{r4, pc}
1000fc5e:	46c0      	nop			; (mov r8, r8)
1000fc60:	10019e0c 	.word	0x10019e0c
1000fc64:	10019e08 	.word	0x10019e08

1000fc68 <special_events_handler>:
1000fc68:	b538      	push	{r3, r4, r5, lr}
1000fc6a:	4c1b      	ldr	r4, [pc, #108]	; (1000fcd8 <special_events_handler+0x70>)
1000fc6c:	1c03      	adds	r3, r0, #0
1000fc6e:	8825      	ldrh	r5, [r4, #0]
1000fc70:	1c08      	adds	r0, r1, #0
1000fc72:	1c21      	adds	r1, r4, #0
1000fc74:	429d      	cmp	r5, r3
1000fc76:	d107      	bne.n	1000fc88 <special_events_handler+0x20>
1000fc78:	88a5      	ldrh	r5, [r4, #4]
1000fc7a:	4285      	cmp	r5, r0
1000fc7c:	d104      	bne.n	1000fc88 <special_events_handler+0x20>
1000fc7e:	2301      	movs	r3, #1
1000fc80:	425b      	negs	r3, r3
1000fc82:	8023      	strh	r3, [r4, #0]
1000fc84:	60a2      	str	r2, [r4, #8]
1000fc86:	e009      	b.n	1000fc9c <special_events_handler+0x34>
1000fc88:	884c      	ldrh	r4, [r1, #2]
1000fc8a:	429c      	cmp	r4, r3
1000fc8c:	d10a      	bne.n	1000fca4 <special_events_handler+0x3c>
1000fc8e:	888c      	ldrh	r4, [r1, #4]
1000fc90:	4284      	cmp	r4, r0
1000fc92:	d107      	bne.n	1000fca4 <special_events_handler+0x3c>
1000fc94:	2301      	movs	r3, #1
1000fc96:	425b      	negs	r3, r3
1000fc98:	804b      	strh	r3, [r1, #2]
1000fc9a:	608a      	str	r2, [r1, #8]
1000fc9c:	4b0f      	ldr	r3, [pc, #60]	; (1000fcdc <special_events_handler+0x74>)
1000fc9e:	4798      	blx	r3
1000fca0:	2001      	movs	r0, #1
1000fca2:	e017      	b.n	1000fcd4 <special_events_handler+0x6c>
1000fca4:	490e      	ldr	r1, [pc, #56]	; (1000fce0 <special_events_handler+0x78>)
1000fca6:	428b      	cmp	r3, r1
1000fca8:	d00e      	beq.n	1000fcc8 <special_events_handler+0x60>
1000fcaa:	490e      	ldr	r1, [pc, #56]	; (1000fce4 <special_events_handler+0x7c>)
1000fcac:	428b      	cmp	r3, r1
1000fcae:	d007      	beq.n	1000fcc0 <special_events_handler+0x58>
1000fcb0:	490d      	ldr	r1, [pc, #52]	; (1000fce8 <special_events_handler+0x80>)
1000fcb2:	2000      	movs	r0, #0
1000fcb4:	428b      	cmp	r3, r1
1000fcb6:	d10d      	bne.n	1000fcd4 <special_events_handler+0x6c>
1000fcb8:	1c10      	adds	r0, r2, #0
1000fcba:	4b0c      	ldr	r3, [pc, #48]	; (1000fcec <special_events_handler+0x84>)
1000fcbc:	4798      	blx	r3
1000fcbe:	e7ef      	b.n	1000fca0 <special_events_handler+0x38>
1000fcc0:	1c11      	adds	r1, r2, #0
1000fcc2:	4b0b      	ldr	r3, [pc, #44]	; (1000fcf0 <special_events_handler+0x88>)
1000fcc4:	2200      	movs	r2, #0
1000fcc6:	e002      	b.n	1000fcce <special_events_handler+0x66>
1000fcc8:	1c11      	adds	r1, r2, #0
1000fcca:	2200      	movs	r2, #0
1000fccc:	4b09      	ldr	r3, [pc, #36]	; (1000fcf4 <special_events_handler+0x8c>)
1000fcce:	4798      	blx	r3
1000fcd0:	4243      	negs	r3, r0
1000fcd2:	4158      	adcs	r0, r3
1000fcd4:	bd38      	pop	{r3, r4, r5, pc}
1000fcd6:	46c0      	nop			; (mov r8, r8)
1000fcd8:	1001ad14 	.word	0x1001ad14
1000fcdc:	100116c5 	.word	0x100116c5
1000fce0:	00000e13 	.word	0x00000e13
1000fce4:	00000e15 	.word	0x00000e15
1000fce8:	00000e01 	.word	0x00000e01
1000fcec:	10011a35 	.word	0x10011a35
1000fcf0:	10011bf5 	.word	0x10011bf5
1000fcf4:	10011ccd 	.word	0x10011ccd

1000fcf8 <at_ble_event_get>:
1000fcf8:	2300      	movs	r3, #0
1000fcfa:	b5f0      	push	{r4, r5, r6, r7, lr}
1000fcfc:	b087      	sub	sp, #28
1000fcfe:	9204      	str	r2, [sp, #16]
1000fd00:	7003      	strb	r3, [r0, #0]
1000fd02:	9b04      	ldr	r3, [sp, #16]
1000fd04:	9003      	str	r0, [sp, #12]
1000fd06:	3b01      	subs	r3, #1
1000fd08:	1c0d      	adds	r5, r1, #0
1000fd0a:	9305      	str	r3, [sp, #20]
1000fd0c:	3303      	adds	r3, #3
1000fd0e:	d802      	bhi.n	1000fd16 <at_ble_event_get+0x1e>
1000fd10:	9804      	ldr	r0, [sp, #16]
1000fd12:	4bae      	ldr	r3, [pc, #696]	; (1000ffcc <at_ble_event_get+0x2d4>)
1000fd14:	4798      	blx	r3
1000fd16:	9b05      	ldr	r3, [sp, #20]
1000fd18:	4cad      	ldr	r4, [pc, #692]	; (1000ffd0 <at_ble_event_get+0x2d8>)
1000fd1a:	3303      	adds	r3, #3
1000fd1c:	d902      	bls.n	1000fd24 <at_ble_event_get+0x2c>
1000fd1e:	2300      	movs	r3, #0
1000fd20:	9302      	str	r3, [sp, #8]
1000fd22:	e015      	b.n	1000fd50 <at_ble_event_get+0x58>
1000fd24:	2300      	movs	r3, #0
1000fd26:	9302      	str	r3, [sp, #8]
1000fd28:	6823      	ldr	r3, [r4, #0]
1000fd2a:	2b00      	cmp	r3, #0
1000fd2c:	d113      	bne.n	1000fd56 <at_ble_event_get+0x5e>
1000fd2e:	9b02      	ldr	r3, [sp, #8]
1000fd30:	2bd0      	cmp	r3, #208	; 0xd0
1000fd32:	d100      	bne.n	1000fd36 <at_ble_event_get+0x3e>
1000fd34:	e2da      	b.n	100102ec <at_ble_event_get+0x5f4>
1000fd36:	9804      	ldr	r0, [sp, #16]
1000fd38:	4ba6      	ldr	r3, [pc, #664]	; (1000ffd4 <at_ble_event_get+0x2dc>)
1000fd3a:	4798      	blx	r3
1000fd3c:	9002      	str	r0, [sp, #8]
1000fd3e:	2802      	cmp	r0, #2
1000fd40:	d1f2      	bne.n	1000fd28 <at_ble_event_get+0x30>
1000fd42:	e03f      	b.n	1000fdc4 <at_ble_event_get+0xcc>
1000fd44:	9804      	ldr	r0, [sp, #16]
1000fd46:	4ba3      	ldr	r3, [pc, #652]	; (1000ffd4 <at_ble_event_get+0x2dc>)
1000fd48:	4798      	blx	r3
1000fd4a:	9002      	str	r0, [sp, #8]
1000fd4c:	2802      	cmp	r0, #2
1000fd4e:	d039      	beq.n	1000fdc4 <at_ble_event_get+0xcc>
1000fd50:	6823      	ldr	r3, [r4, #0]
1000fd52:	2b00      	cmp	r3, #0
1000fd54:	d0f6      	beq.n	1000fd44 <at_ble_event_get+0x4c>
1000fd56:	9b02      	ldr	r3, [sp, #8]
1000fd58:	2bd0      	cmp	r3, #208	; 0xd0
1000fd5a:	d100      	bne.n	1000fd5e <at_ble_event_get+0x66>
1000fd5c:	e2c6      	b.n	100102ec <at_ble_event_get+0x5f4>
1000fd5e:	9b02      	ldr	r3, [sp, #8]
1000fd60:	3b03      	subs	r3, #3
1000fd62:	1e5a      	subs	r2, r3, #1
1000fd64:	4193      	sbcs	r3, r2
1000fd66:	9a02      	ldr	r2, [sp, #8]
1000fd68:	425b      	negs	r3, r3
1000fd6a:	401a      	ands	r2, r3
1000fd6c:	6823      	ldr	r3, [r4, #0]
1000fd6e:	9202      	str	r2, [sp, #8]
1000fd70:	2b00      	cmp	r3, #0
1000fd72:	d100      	bne.n	1000fd76 <at_ble_event_get+0x7e>
1000fd74:	e2c2      	b.n	100102fc <at_ble_event_get+0x604>
1000fd76:	681a      	ldr	r2, [r3, #0]
1000fd78:	68de      	ldr	r6, [r3, #12]
1000fd7a:	6022      	str	r2, [r4, #0]
1000fd7c:	88da      	ldrh	r2, [r3, #6]
1000fd7e:	9201      	str	r2, [sp, #4]
1000fd80:	4a95      	ldr	r2, [pc, #596]	; (1000ffd8 <at_ble_event_get+0x2e0>)
1000fd82:	889c      	ldrh	r4, [r3, #4]
1000fd84:	6811      	ldr	r1, [r2, #0]
1000fd86:	6013      	str	r3, [r2, #0]
1000fd88:	6019      	str	r1, [r3, #0]
1000fd8a:	4b94      	ldr	r3, [pc, #592]	; (1000ffdc <at_ble_event_get+0x2e4>)
1000fd8c:	781b      	ldrb	r3, [r3, #0]
1000fd8e:	2b01      	cmp	r3, #1
1000fd90:	d10f      	bne.n	1000fdb2 <at_ble_event_get+0xba>
1000fd92:	4b93      	ldr	r3, [pc, #588]	; (1000ffe0 <at_ble_event_get+0x2e8>)
1000fd94:	4a92      	ldr	r2, [pc, #584]	; (1000ffe0 <at_ble_event_get+0x2e8>)
1000fd96:	8898      	ldrh	r0, [r3, #4]
1000fd98:	88d9      	ldrh	r1, [r3, #6]
1000fd9a:	68d2      	ldr	r2, [r2, #12]
1000fd9c:	891b      	ldrh	r3, [r3, #8]
1000fd9e:	4f91      	ldr	r7, [pc, #580]	; (1000ffe4 <at_ble_event_get+0x2ec>)
1000fda0:	47b8      	blx	r7
1000fda2:	2210      	movs	r2, #16
1000fda4:	4b90      	ldr	r3, [pc, #576]	; (1000ffe8 <at_ble_event_get+0x2f0>)
1000fda6:	488e      	ldr	r0, [pc, #568]	; (1000ffe0 <at_ble_event_get+0x2e8>)
1000fda8:	2100      	movs	r1, #0
1000fdaa:	4798      	blx	r3
1000fdac:	2300      	movs	r3, #0
1000fdae:	4a8b      	ldr	r2, [pc, #556]	; (1000ffdc <at_ble_event_get+0x2e4>)
1000fdb0:	7013      	strb	r3, [r2, #0]
1000fdb2:	9b02      	ldr	r3, [sp, #8]
1000fdb4:	2b00      	cmp	r3, #0
1000fdb6:	d114      	bne.n	1000fde2 <at_ble_event_get+0xea>
1000fdb8:	4b8c      	ldr	r3, [pc, #560]	; (1000ffec <at_ble_event_get+0x2f4>)
1000fdba:	429c      	cmp	r4, r3
1000fdbc:	d009      	beq.n	1000fdd2 <at_ble_event_get+0xda>
1000fdbe:	4b8c      	ldr	r3, [pc, #560]	; (1000fff0 <at_ble_event_get+0x2f8>)
1000fdc0:	429c      	cmp	r4, r3
1000fdc2:	d127      	bne.n	1000fe14 <at_ble_event_get+0x11c>
1000fdc4:	233a      	movs	r3, #58	; 0x3a
1000fdc6:	9a03      	ldr	r2, [sp, #12]
1000fdc8:	7013      	strb	r3, [r2, #0]
1000fdca:	2300      	movs	r3, #0
1000fdcc:	9302      	str	r3, [sp, #8]
1000fdce:	1c1d      	adds	r5, r3, #0
1000fdd0:	e007      	b.n	1000fde2 <at_ble_event_get+0xea>
1000fdd2:	9b01      	ldr	r3, [sp, #4]
1000fdd4:	42a3      	cmp	r3, r4
1000fdd6:	d000      	beq.n	1000fdda <at_ble_event_get+0xe2>
1000fdd8:	e28a      	b.n	100102f0 <at_ble_event_get+0x5f8>
1000fdda:	2338      	movs	r3, #56	; 0x38
1000fddc:	9a03      	ldr	r2, [sp, #12]
1000fdde:	7013      	strb	r3, [r2, #0]
1000fde0:	602e      	str	r6, [r5, #0]
1000fde2:	9b03      	ldr	r3, [sp, #12]
1000fde4:	781b      	ldrb	r3, [r3, #0]
1000fde6:	2b3b      	cmp	r3, #59	; 0x3b
1000fde8:	d101      	bne.n	1000fdee <at_ble_event_get+0xf6>
1000fdea:	4b82      	ldr	r3, [pc, #520]	; (1000fff4 <at_ble_event_get+0x2fc>)
1000fdec:	4798      	blx	r3
1000fdee:	9b03      	ldr	r3, [sp, #12]
1000fdf0:	781b      	ldrb	r3, [r3, #0]
1000fdf2:	2b3b      	cmp	r3, #59	; 0x3b
1000fdf4:	d003      	beq.n	1000fdfe <at_ble_event_get+0x106>
1000fdf6:	9b05      	ldr	r3, [sp, #20]
1000fdf8:	3303      	adds	r3, #3
1000fdfa:	d904      	bls.n	1000fe06 <at_ble_event_get+0x10e>
1000fdfc:	e283      	b.n	10010306 <at_ble_event_get+0x60e>
1000fdfe:	9b02      	ldr	r3, [sp, #8]
1000fe00:	2b00      	cmp	r3, #0
1000fe02:	d088      	beq.n	1000fd16 <at_ble_event_get+0x1e>
1000fe04:	e7f7      	b.n	1000fdf6 <at_ble_event_get+0xfe>
1000fe06:	9b02      	ldr	r3, [sp, #8]
1000fe08:	2bd0      	cmp	r3, #208	; 0xd0
1000fe0a:	d100      	bne.n	1000fe0e <at_ble_event_get+0x116>
1000fe0c:	e27b      	b.n	10010306 <at_ble_event_get+0x60e>
1000fe0e:	4b7a      	ldr	r3, [pc, #488]	; (1000fff8 <at_ble_event_get+0x300>)
1000fe10:	4798      	blx	r3
1000fe12:	e278      	b.n	10010306 <at_ble_event_get+0x60e>
1000fe14:	9b01      	ldr	r3, [sp, #4]
1000fe16:	2bbb      	cmp	r3, #187	; 0xbb
1000fe18:	d125      	bne.n	1000fe66 <at_ble_event_get+0x16e>
1000fe1a:	2cbb      	cmp	r4, #187	; 0xbb
1000fe1c:	d123      	bne.n	1000fe66 <at_ble_event_get+0x16e>
1000fe1e:	466b      	mov	r3, sp
1000fe20:	891b      	ldrh	r3, [r3, #8]
1000fe22:	80ab      	strh	r3, [r5, #4]
1000fe24:	78b3      	ldrb	r3, [r6, #2]
1000fe26:	7872      	ldrb	r2, [r6, #1]
1000fe28:	78f0      	ldrb	r0, [r6, #3]
1000fe2a:	021b      	lsls	r3, r3, #8
1000fe2c:	4313      	orrs	r3, r2
1000fe2e:	7971      	ldrb	r1, [r6, #5]
1000fe30:	7932      	ldrb	r2, [r6, #4]
1000fe32:	70a8      	strb	r0, [r5, #2]
1000fe34:	4871      	ldr	r0, [pc, #452]	; (1000fffc <at_ble_event_get+0x304>)
1000fe36:	802b      	strh	r3, [r5, #0]
1000fe38:	4283      	cmp	r3, r0
1000fe3a:	d806      	bhi.n	1000fe4a <at_ble_event_get+0x152>
1000fe3c:	4a70      	ldr	r2, [pc, #448]	; (10010000 <at_ble_event_get+0x308>)
1000fe3e:	4293      	cmp	r3, r2
1000fe40:	d20b      	bcs.n	1000fe5a <at_ble_event_get+0x162>
1000fe42:	4a70      	ldr	r2, [pc, #448]	; (10010004 <at_ble_event_get+0x30c>)
1000fe44:	4293      	cmp	r3, r2
1000fe46:	d008      	beq.n	1000fe5a <at_ble_event_get+0x162>
1000fe48:	e009      	b.n	1000fe5e <at_ble_event_get+0x166>
1000fe4a:	486f      	ldr	r0, [pc, #444]	; (10010008 <at_ble_event_get+0x310>)
1000fe4c:	4283      	cmp	r3, r0
1000fe4e:	d106      	bne.n	1000fe5e <at_ble_event_get+0x166>
1000fe50:	020b      	lsls	r3, r1, #8
1000fe52:	4313      	orrs	r3, r2
1000fe54:	80ab      	strh	r3, [r5, #4]
1000fe56:	2337      	movs	r3, #55	; 0x37
1000fe58:	e002      	b.n	1000fe60 <at_ble_event_get+0x168>
1000fe5a:	2336      	movs	r3, #54	; 0x36
1000fe5c:	e000      	b.n	1000fe60 <at_ble_event_get+0x168>
1000fe5e:	2300      	movs	r3, #0
1000fe60:	9a03      	ldr	r2, [sp, #12]
1000fe62:	7013      	strb	r3, [r2, #0]
1000fe64:	e7bd      	b.n	1000fde2 <at_ble_event_get+0xea>
1000fe66:	4b69      	ldr	r3, [pc, #420]	; (1001000c <at_ble_event_get+0x314>)
1000fe68:	429c      	cmp	r4, r3
1000fe6a:	d100      	bne.n	1000fe6e <at_ble_event_get+0x176>
1000fe6c:	e144      	b.n	100100f8 <at_ble_event_get+0x400>
1000fe6e:	d865      	bhi.n	1000ff3c <at_ble_event_get+0x244>
1000fe70:	4b67      	ldr	r3, [pc, #412]	; (10010010 <at_ble_event_get+0x318>)
1000fe72:	429c      	cmp	r4, r3
1000fe74:	d100      	bne.n	1000fe78 <at_ble_event_get+0x180>
1000fe76:	e1d5      	b.n	10010224 <at_ble_event_get+0x52c>
1000fe78:	d82f      	bhi.n	1000feda <at_ble_event_get+0x1e2>
1000fe7a:	4b66      	ldr	r3, [pc, #408]	; (10010014 <at_ble_event_get+0x31c>)
1000fe7c:	429c      	cmp	r4, r3
1000fe7e:	d100      	bne.n	1000fe82 <at_ble_event_get+0x18a>
1000fe80:	e1e0      	b.n	10010244 <at_ble_event_get+0x54c>
1000fe82:	d813      	bhi.n	1000feac <at_ble_event_get+0x1b4>
1000fe84:	4b64      	ldr	r3, [pc, #400]	; (10010018 <at_ble_event_get+0x320>)
1000fe86:	429c      	cmp	r4, r3
1000fe88:	d100      	bne.n	1000fe8c <at_ble_event_get+0x194>
1000fe8a:	e1a3      	b.n	100101d4 <at_ble_event_get+0x4dc>
1000fe8c:	d804      	bhi.n	1000fe98 <at_ble_event_get+0x1a0>
1000fe8e:	2638      	movs	r6, #56	; 0x38
1000fe90:	42b4      	cmp	r4, r6
1000fe92:	d100      	bne.n	1000fe96 <at_ble_event_get+0x19e>
1000fe94:	e225      	b.n	100102e2 <at_ble_event_get+0x5ea>
1000fe96:	e117      	b.n	100100c8 <at_ble_event_get+0x3d0>
1000fe98:	4b60      	ldr	r3, [pc, #384]	; (1001001c <at_ble_event_get+0x324>)
1000fe9a:	429c      	cmp	r4, r3
1000fe9c:	d100      	bne.n	1000fea0 <at_ble_event_get+0x1a8>
1000fe9e:	e19f      	b.n	100101e0 <at_ble_event_get+0x4e8>
1000fea0:	33fe      	adds	r3, #254	; 0xfe
1000fea2:	33ff      	adds	r3, #255	; 0xff
1000fea4:	429c      	cmp	r4, r3
1000fea6:	d100      	bne.n	1000feaa <at_ble_event_get+0x1b2>
1000fea8:	e1d3      	b.n	10010252 <at_ble_event_get+0x55a>
1000feaa:	e10d      	b.n	100100c8 <at_ble_event_get+0x3d0>
1000feac:	4b5c      	ldr	r3, [pc, #368]	; (10010020 <at_ble_event_get+0x328>)
1000feae:	429c      	cmp	r4, r3
1000feb0:	d100      	bne.n	1000feb4 <at_ble_event_get+0x1bc>
1000feb2:	e1a9      	b.n	10010208 <at_ble_event_get+0x510>
1000feb4:	d808      	bhi.n	1000fec8 <at_ble_event_get+0x1d0>
1000feb6:	4b5b      	ldr	r3, [pc, #364]	; (10010024 <at_ble_event_get+0x32c>)
1000feb8:	429c      	cmp	r4, r3
1000feba:	d100      	bne.n	1000febe <at_ble_event_get+0x1c6>
1000febc:	e196      	b.n	100101ec <at_ble_event_get+0x4f4>
1000febe:	4b5a      	ldr	r3, [pc, #360]	; (10010028 <at_ble_event_get+0x330>)
1000fec0:	429c      	cmp	r4, r3
1000fec2:	d100      	bne.n	1000fec6 <at_ble_event_get+0x1ce>
1000fec4:	e199      	b.n	100101fa <at_ble_event_get+0x502>
1000fec6:	e0ff      	b.n	100100c8 <at_ble_event_get+0x3d0>
1000fec8:	4b58      	ldr	r3, [pc, #352]	; (1001002c <at_ble_event_get+0x334>)
1000feca:	429c      	cmp	r4, r3
1000fecc:	d100      	bne.n	1000fed0 <at_ble_event_get+0x1d8>
1000fece:	e1a2      	b.n	10010216 <at_ble_event_get+0x51e>
1000fed0:	4b57      	ldr	r3, [pc, #348]	; (10010030 <at_ble_event_get+0x338>)
1000fed2:	429c      	cmp	r4, r3
1000fed4:	d100      	bne.n	1000fed8 <at_ble_event_get+0x1e0>
1000fed6:	e1d4      	b.n	10010282 <at_ble_event_get+0x58a>
1000fed8:	e0f6      	b.n	100100c8 <at_ble_event_get+0x3d0>
1000feda:	4b56      	ldr	r3, [pc, #344]	; (10010034 <at_ble_event_get+0x33c>)
1000fedc:	429c      	cmp	r4, r3
1000fede:	d100      	bne.n	1000fee2 <at_ble_event_get+0x1ea>
1000fee0:	e1c8      	b.n	10010274 <at_ble_event_get+0x57c>
1000fee2:	d812      	bhi.n	1000ff0a <at_ble_event_get+0x212>
1000fee4:	4b54      	ldr	r3, [pc, #336]	; (10010038 <at_ble_event_get+0x340>)
1000fee6:	429c      	cmp	r4, r3
1000fee8:	d100      	bne.n	1000feec <at_ble_event_get+0x1f4>
1000feea:	e1d1      	b.n	10010290 <at_ble_event_get+0x598>
1000feec:	d804      	bhi.n	1000fef8 <at_ble_event_get+0x200>
1000feee:	4b53      	ldr	r3, [pc, #332]	; (1001003c <at_ble_event_get+0x344>)
1000fef0:	429c      	cmp	r4, r3
1000fef2:	d100      	bne.n	1000fef6 <at_ble_event_get+0x1fe>
1000fef4:	e19b      	b.n	1001022e <at_ble_event_get+0x536>
1000fef6:	e0e7      	b.n	100100c8 <at_ble_event_get+0x3d0>
1000fef8:	4b51      	ldr	r3, [pc, #324]	; (10010040 <at_ble_event_get+0x348>)
1000fefa:	429c      	cmp	r4, r3
1000fefc:	d100      	bne.n	1000ff00 <at_ble_event_get+0x208>
1000fefe:	e1ad      	b.n	1001025c <at_ble_event_get+0x564>
1000ff00:	4b50      	ldr	r3, [pc, #320]	; (10010044 <at_ble_event_get+0x34c>)
1000ff02:	429c      	cmp	r4, r3
1000ff04:	d100      	bne.n	1000ff08 <at_ble_event_get+0x210>
1000ff06:	e1b0      	b.n	1001026a <at_ble_event_get+0x572>
1000ff08:	e0de      	b.n	100100c8 <at_ble_event_get+0x3d0>
1000ff0a:	4b4f      	ldr	r3, [pc, #316]	; (10010048 <at_ble_event_get+0x350>)
1000ff0c:	429c      	cmp	r4, r3
1000ff0e:	d100      	bne.n	1000ff12 <at_ble_event_get+0x21a>
1000ff10:	e0e0      	b.n	100100d4 <at_ble_event_get+0x3dc>
1000ff12:	d809      	bhi.n	1000ff28 <at_ble_event_get+0x230>
1000ff14:	3b08      	subs	r3, #8
1000ff16:	429c      	cmp	r4, r3
1000ff18:	d100      	bne.n	1000ff1c <at_ble_event_get+0x224>
1000ff1a:	e0d7      	b.n	100100cc <at_ble_event_get+0x3d4>
1000ff1c:	4b4b      	ldr	r3, [pc, #300]	; (1001004c <at_ble_event_get+0x354>)
1000ff1e:	2639      	movs	r6, #57	; 0x39
1000ff20:	429c      	cmp	r4, r3
1000ff22:	d100      	bne.n	1000ff26 <at_ble_event_get+0x22e>
1000ff24:	e1dd      	b.n	100102e2 <at_ble_event_get+0x5ea>
1000ff26:	e0cf      	b.n	100100c8 <at_ble_event_get+0x3d0>
1000ff28:	23d1      	movs	r3, #209	; 0xd1
1000ff2a:	011b      	lsls	r3, r3, #4
1000ff2c:	429c      	cmp	r4, r3
1000ff2e:	d100      	bne.n	1000ff32 <at_ble_event_get+0x23a>
1000ff30:	e0d6      	b.n	100100e0 <at_ble_event_get+0x3e8>
1000ff32:	4b47      	ldr	r3, [pc, #284]	; (10010050 <at_ble_event_get+0x358>)
1000ff34:	429c      	cmp	r4, r3
1000ff36:	d100      	bne.n	1000ff3a <at_ble_event_get+0x242>
1000ff38:	e0d8      	b.n	100100ec <at_ble_event_get+0x3f4>
1000ff3a:	e0c5      	b.n	100100c8 <at_ble_event_get+0x3d0>
1000ff3c:	4b45      	ldr	r3, [pc, #276]	; (10010054 <at_ble_event_get+0x35c>)
1000ff3e:	429c      	cmp	r4, r3
1000ff40:	d100      	bne.n	1000ff44 <at_ble_event_get+0x24c>
1000ff42:	e117      	b.n	10010174 <at_ble_event_get+0x47c>
1000ff44:	d82e      	bhi.n	1000ffa4 <at_ble_event_get+0x2ac>
1000ff46:	4b44      	ldr	r3, [pc, #272]	; (10010058 <at_ble_event_get+0x360>)
1000ff48:	429c      	cmp	r4, r3
1000ff4a:	d100      	bne.n	1000ff4e <at_ble_event_get+0x256>
1000ff4c:	e13d      	b.n	100101ca <at_ble_event_get+0x4d2>
1000ff4e:	d812      	bhi.n	1000ff76 <at_ble_event_get+0x27e>
1000ff50:	4b42      	ldr	r3, [pc, #264]	; (1001005c <at_ble_event_get+0x364>)
1000ff52:	429c      	cmp	r4, r3
1000ff54:	d100      	bne.n	1000ff58 <at_ble_event_get+0x260>
1000ff56:	e0e8      	b.n	1001012a <at_ble_event_get+0x432>
1000ff58:	d804      	bhi.n	1000ff64 <at_ble_event_get+0x26c>
1000ff5a:	3b03      	subs	r3, #3
1000ff5c:	429c      	cmp	r4, r3
1000ff5e:	d100      	bne.n	1000ff62 <at_ble_event_get+0x26a>
1000ff60:	e0d0      	b.n	10010104 <at_ble_event_get+0x40c>
1000ff62:	e0b1      	b.n	100100c8 <at_ble_event_get+0x3d0>
1000ff64:	4b3e      	ldr	r3, [pc, #248]	; (10010060 <at_ble_event_get+0x368>)
1000ff66:	429c      	cmp	r4, r3
1000ff68:	d100      	bne.n	1000ff6c <at_ble_event_get+0x274>
1000ff6a:	e0d0      	b.n	1001010e <at_ble_event_get+0x416>
1000ff6c:	4b3d      	ldr	r3, [pc, #244]	; (10010064 <at_ble_event_get+0x36c>)
1000ff6e:	429c      	cmp	r4, r3
1000ff70:	d100      	bne.n	1000ff74 <at_ble_event_get+0x27c>
1000ff72:	e0f9      	b.n	10010168 <at_ble_event_get+0x470>
1000ff74:	e0a8      	b.n	100100c8 <at_ble_event_get+0x3d0>
1000ff76:	4b3c      	ldr	r3, [pc, #240]	; (10010068 <at_ble_event_get+0x370>)
1000ff78:	429c      	cmp	r4, r3
1000ff7a:	d100      	bne.n	1000ff7e <at_ble_event_get+0x286>
1000ff7c:	e0db      	b.n	10010136 <at_ble_event_get+0x43e>
1000ff7e:	d808      	bhi.n	1000ff92 <at_ble_event_get+0x29a>
1000ff80:	4b3a      	ldr	r3, [pc, #232]	; (1001006c <at_ble_event_get+0x374>)
1000ff82:	429c      	cmp	r4, r3
1000ff84:	d100      	bne.n	1000ff88 <at_ble_event_get+0x290>
1000ff86:	e11b      	b.n	100101c0 <at_ble_event_get+0x4c8>
1000ff88:	4b39      	ldr	r3, [pc, #228]	; (10010070 <at_ble_event_get+0x378>)
1000ff8a:	429c      	cmp	r4, r3
1000ff8c:	d100      	bne.n	1000ff90 <at_ble_event_get+0x298>
1000ff8e:	e0d8      	b.n	10010142 <at_ble_event_get+0x44a>
1000ff90:	e09a      	b.n	100100c8 <at_ble_event_get+0x3d0>
1000ff92:	4b38      	ldr	r3, [pc, #224]	; (10010074 <at_ble_event_get+0x37c>)
1000ff94:	429c      	cmp	r4, r3
1000ff96:	d100      	bne.n	1000ff9a <at_ble_event_get+0x2a2>
1000ff98:	e0d8      	b.n	1001014c <at_ble_event_get+0x454>
1000ff9a:	4b37      	ldr	r3, [pc, #220]	; (10010078 <at_ble_event_get+0x380>)
1000ff9c:	429c      	cmp	r4, r3
1000ff9e:	d100      	bne.n	1000ffa2 <at_ble_event_get+0x2aa>
1000ffa0:	e0db      	b.n	1001015a <at_ble_event_get+0x462>
1000ffa2:	e091      	b.n	100100c8 <at_ble_event_get+0x3d0>
1000ffa4:	4b35      	ldr	r3, [pc, #212]	; (1001007c <at_ble_event_get+0x384>)
1000ffa6:	429c      	cmp	r4, r3
1000ffa8:	d100      	bne.n	1000ffac <at_ble_event_get+0x2b4>
1000ffaa:	e0f7      	b.n	1001019c <at_ble_event_get+0x4a4>
1000ffac:	d876      	bhi.n	1001009c <at_ble_event_get+0x3a4>
1000ffae:	4b34      	ldr	r3, [pc, #208]	; (10010080 <at_ble_event_get+0x388>)
1000ffb0:	429c      	cmp	r4, r3
1000ffb2:	d100      	bne.n	1000ffb6 <at_ble_event_get+0x2be>
1000ffb4:	e0f8      	b.n	100101a8 <at_ble_event_get+0x4b0>
1000ffb6:	d869      	bhi.n	1001008c <at_ble_event_get+0x394>
1000ffb8:	4b32      	ldr	r3, [pc, #200]	; (10010084 <at_ble_event_get+0x38c>)
1000ffba:	429c      	cmp	r4, r3
1000ffbc:	d100      	bne.n	1000ffc0 <at_ble_event_get+0x2c8>
1000ffbe:	e0e0      	b.n	10010182 <at_ble_event_get+0x48a>
1000ffc0:	4b31      	ldr	r3, [pc, #196]	; (10010088 <at_ble_event_get+0x390>)
1000ffc2:	429c      	cmp	r4, r3
1000ffc4:	d100      	bne.n	1000ffc8 <at_ble_event_get+0x2d0>
1000ffc6:	e0a9      	b.n	1001011c <at_ble_event_get+0x424>
1000ffc8:	e07e      	b.n	100100c8 <at_ble_event_get+0x3d0>
1000ffca:	46c0      	nop			; (mov r8, r8)
1000ffcc:	100116fd 	.word	0x100116fd
1000ffd0:	10019e08 	.word	0x10019e08
1000ffd4:	1000f389 	.word	0x1000f389
1000ffd8:	10019e0c 	.word	0x10019e0c
1000ffdc:	10019e04 	.word	0x10019e04
1000ffe0:	10019df4 	.word	0x10019df4
1000ffe4:	1000fbe1 	.word	0x1000fbe1
1000ffe8:	10015115 	.word	0x10015115
1000ffec:	0000ffff 	.word	0x0000ffff
1000fff0:	0000fffe 	.word	0x0000fffe
1000fff4:	1000f601 	.word	0x1000f601
1000fff8:	100116ff 	.word	0x100116ff
1000fffc:	0000201e 	.word	0x0000201e
10010000:	0000201d 	.word	0x0000201d
10010004:	00000c03 	.word	0x00000c03
10010008:	0000201f 	.word	0x0000201f
1001000c:	00000d1c 	.word	0x00000d1c
10010010:	00000c0c 	.word	0x00000c0c
10010014:	00000c02 	.word	0x00000c02
10010018:	00000a02 	.word	0x00000a02
1001001c:	00000a03 	.word	0x00000a03
10010020:	00000c06 	.word	0x00000c06
10010024:	00000c04 	.word	0x00000c04
10010028:	00000c05 	.word	0x00000c05
1001002c:	00000c07 	.word	0x00000c07
10010030:	00000c09 	.word	0x00000c09
10010034:	00000c17 	.word	0x00000c17
10010038:	00000c12 	.word	0x00000c12
1001003c:	00000c0d 	.word	0x00000c0d
10010040:	00000c13 	.word	0x00000c13
10010044:	00000c15 	.word	0x00000c15
10010048:	00000d08 	.word	0x00000d08
1001004c:	00000d01 	.word	0x00000d01
10010050:	00000d15 	.word	0x00000d15
10010054:	00000e1b 	.word	0x00000e1b
10010058:	00000e0f 	.word	0x00000e0f
1001005c:	00000e03 	.word	0x00000e03
10010060:	00000e06 	.word	0x00000e06
10010064:	00000e0a 	.word	0x00000e0a
10010068:	00000e15 	.word	0x00000e15
1001006c:	00000e11 	.word	0x00000e11
10010070:	00000e13 	.word	0x00000e13
10010074:	00000e17 	.word	0x00000e17
10010078:	00000e19 	.word	0x00000e19
1001007c:	00000e27 	.word	0x00000e27
10010080:	00000e21 	.word	0x00000e21
10010084:	00000e1c 	.word	0x00000e1c
10010088:	00000e1d 	.word	0x00000e1d
1001008c:	4b9f      	ldr	r3, [pc, #636]	; (1001030c <at_ble_event_get+0x614>)
1001008e:	429c      	cmp	r4, r3
10010090:	d07e      	beq.n	10010190 <at_ble_event_get+0x498>
10010092:	4b9f      	ldr	r3, [pc, #636]	; (10010310 <at_ble_event_get+0x618>)
10010094:	429c      	cmp	r4, r3
10010096:	d100      	bne.n	1001009a <at_ble_event_get+0x3a2>
10010098:	e08c      	b.n	100101b4 <at_ble_event_get+0x4bc>
1001009a:	e015      	b.n	100100c8 <at_ble_event_get+0x3d0>
1001009c:	4b9d      	ldr	r3, [pc, #628]	; (10010314 <at_ble_event_get+0x61c>)
1001009e:	429c      	cmp	r4, r3
100100a0:	d100      	bne.n	100100a4 <at_ble_event_get+0x3ac>
100100a2:	e10a      	b.n	100102ba <at_ble_event_get+0x5c2>
100100a4:	d808      	bhi.n	100100b8 <at_ble_event_get+0x3c0>
100100a6:	4b9c      	ldr	r3, [pc, #624]	; (10010318 <at_ble_event_get+0x620>)
100100a8:	429c      	cmp	r4, r3
100100aa:	d100      	bne.n	100100ae <at_ble_event_get+0x3b6>
100100ac:	e0f7      	b.n	1001029e <at_ble_event_get+0x5a6>
100100ae:	4b9b      	ldr	r3, [pc, #620]	; (1001031c <at_ble_event_get+0x624>)
100100b0:	429c      	cmp	r4, r3
100100b2:	d100      	bne.n	100100b6 <at_ble_event_get+0x3be>
100100b4:	e0fa      	b.n	100102ac <at_ble_event_get+0x5b4>
100100b6:	e007      	b.n	100100c8 <at_ble_event_get+0x3d0>
100100b8:	4b99      	ldr	r3, [pc, #612]	; (10010320 <at_ble_event_get+0x628>)
100100ba:	429c      	cmp	r4, r3
100100bc:	d100      	bne.n	100100c0 <at_ble_event_get+0x3c8>
100100be:	e103      	b.n	100102c8 <at_ble_event_get+0x5d0>
100100c0:	4b98      	ldr	r3, [pc, #608]	; (10010324 <at_ble_event_get+0x62c>)
100100c2:	429c      	cmp	r4, r3
100100c4:	d100      	bne.n	100100c8 <at_ble_event_get+0x3d0>
100100c6:	e106      	b.n	100102d6 <at_ble_event_get+0x5de>
100100c8:	2600      	movs	r6, #0
100100ca:	e10a      	b.n	100102e2 <at_ble_event_get+0x5ea>
100100cc:	1c30      	adds	r0, r6, #0
100100ce:	1c29      	adds	r1, r5, #0
100100d0:	4b95      	ldr	r3, [pc, #596]	; (10010328 <at_ble_event_get+0x630>)
100100d2:	e014      	b.n	100100fe <at_ble_event_get+0x406>
100100d4:	1c30      	adds	r0, r6, #0
100100d6:	1c29      	adds	r1, r5, #0
100100d8:	4b94      	ldr	r3, [pc, #592]	; (1001032c <at_ble_event_get+0x634>)
100100da:	4798      	blx	r3
100100dc:	2604      	movs	r6, #4
100100de:	e100      	b.n	100102e2 <at_ble_event_get+0x5ea>
100100e0:	1c30      	adds	r0, r6, #0
100100e2:	1c29      	adds	r1, r5, #0
100100e4:	4b92      	ldr	r3, [pc, #584]	; (10010330 <at_ble_event_get+0x638>)
100100e6:	4798      	blx	r3
100100e8:	2601      	movs	r6, #1
100100ea:	e0fa      	b.n	100102e2 <at_ble_event_get+0x5ea>
100100ec:	1c30      	adds	r0, r6, #0
100100ee:	1c29      	adds	r1, r5, #0
100100f0:	4b90      	ldr	r3, [pc, #576]	; (10010334 <at_ble_event_get+0x63c>)
100100f2:	4798      	blx	r3
100100f4:	260f      	movs	r6, #15
100100f6:	e0f4      	b.n	100102e2 <at_ble_event_get+0x5ea>
100100f8:	1c30      	adds	r0, r6, #0
100100fa:	1c29      	adds	r1, r5, #0
100100fc:	4b8e      	ldr	r3, [pc, #568]	; (10010338 <at_ble_event_get+0x640>)
100100fe:	4798      	blx	r3
10010100:	1c06      	adds	r6, r0, #0
10010102:	e0ee      	b.n	100102e2 <at_ble_event_get+0x5ea>
10010104:	9801      	ldr	r0, [sp, #4]
10010106:	1c31      	adds	r1, r6, #0
10010108:	1c2a      	adds	r2, r5, #0
1001010a:	4b8c      	ldr	r3, [pc, #560]	; (1001033c <at_ble_event_get+0x644>)
1001010c:	e017      	b.n	1001013e <at_ble_event_get+0x446>
1001010e:	1c31      	adds	r1, r6, #0
10010110:	9801      	ldr	r0, [sp, #4]
10010112:	1c2a      	adds	r2, r5, #0
10010114:	4b8a      	ldr	r3, [pc, #552]	; (10010340 <at_ble_event_get+0x648>)
10010116:	4798      	blx	r3
10010118:	2611      	movs	r6, #17
1001011a:	e0e2      	b.n	100102e2 <at_ble_event_get+0x5ea>
1001011c:	1c31      	adds	r1, r6, #0
1001011e:	9801      	ldr	r0, [sp, #4]
10010120:	1c2a      	adds	r2, r5, #0
10010122:	4b88      	ldr	r3, [pc, #544]	; (10010344 <at_ble_event_get+0x64c>)
10010124:	4798      	blx	r3
10010126:	2612      	movs	r6, #18
10010128:	e0db      	b.n	100102e2 <at_ble_event_get+0x5ea>
1001012a:	1c30      	adds	r0, r6, #0
1001012c:	1c29      	adds	r1, r5, #0
1001012e:	4b86      	ldr	r3, [pc, #536]	; (10010348 <at_ble_event_get+0x650>)
10010130:	4798      	blx	r3
10010132:	2606      	movs	r6, #6
10010134:	e0d5      	b.n	100102e2 <at_ble_event_get+0x5ea>
10010136:	1c31      	adds	r1, r6, #0
10010138:	1c2a      	adds	r2, r5, #0
1001013a:	9801      	ldr	r0, [sp, #4]
1001013c:	4b83      	ldr	r3, [pc, #524]	; (1001034c <at_ble_event_get+0x654>)
1001013e:	4798      	blx	r3
10010140:	e7de      	b.n	10010100 <at_ble_event_get+0x408>
10010142:	9801      	ldr	r0, [sp, #4]
10010144:	1c31      	adds	r1, r6, #0
10010146:	1c2a      	adds	r2, r5, #0
10010148:	4b81      	ldr	r3, [pc, #516]	; (10010350 <at_ble_event_get+0x658>)
1001014a:	e7f8      	b.n	1001013e <at_ble_event_get+0x446>
1001014c:	1c31      	adds	r1, r6, #0
1001014e:	9801      	ldr	r0, [sp, #4]
10010150:	1c2a      	adds	r2, r5, #0
10010152:	4b80      	ldr	r3, [pc, #512]	; (10010354 <at_ble_event_get+0x65c>)
10010154:	4798      	blx	r3
10010156:	260d      	movs	r6, #13
10010158:	e0c3      	b.n	100102e2 <at_ble_event_get+0x5ea>
1001015a:	1c31      	adds	r1, r6, #0
1001015c:	9801      	ldr	r0, [sp, #4]
1001015e:	1c2a      	adds	r2, r5, #0
10010160:	4b7d      	ldr	r3, [pc, #500]	; (10010358 <at_ble_event_get+0x660>)
10010162:	4798      	blx	r3
10010164:	260e      	movs	r6, #14
10010166:	e0bc      	b.n	100102e2 <at_ble_event_get+0x5ea>
10010168:	9801      	ldr	r0, [sp, #4]
1001016a:	1c31      	adds	r1, r6, #0
1001016c:	1c2a      	adds	r2, r5, #0
1001016e:	4b7b      	ldr	r3, [pc, #492]	; (1001035c <at_ble_event_get+0x664>)
10010170:	4798      	blx	r3
10010172:	e084      	b.n	1001027e <at_ble_event_get+0x586>
10010174:	1c31      	adds	r1, r6, #0
10010176:	9801      	ldr	r0, [sp, #4]
10010178:	1c2a      	adds	r2, r5, #0
1001017a:	4b79      	ldr	r3, [pc, #484]	; (10010360 <at_ble_event_get+0x668>)
1001017c:	4798      	blx	r3
1001017e:	260b      	movs	r6, #11
10010180:	e0af      	b.n	100102e2 <at_ble_event_get+0x5ea>
10010182:	1c31      	adds	r1, r6, #0
10010184:	9801      	ldr	r0, [sp, #4]
10010186:	1c2a      	adds	r2, r5, #0
10010188:	4b76      	ldr	r3, [pc, #472]	; (10010364 <at_ble_event_get+0x66c>)
1001018a:	4798      	blx	r3
1001018c:	2610      	movs	r6, #16
1001018e:	e0a8      	b.n	100102e2 <at_ble_event_get+0x5ea>
10010190:	1c30      	adds	r0, r6, #0
10010192:	1c29      	adds	r1, r5, #0
10010194:	4b74      	ldr	r3, [pc, #464]	; (10010368 <at_ble_event_get+0x670>)
10010196:	4798      	blx	r3
10010198:	2628      	movs	r6, #40	; 0x28
1001019a:	e0a2      	b.n	100102e2 <at_ble_event_get+0x5ea>
1001019c:	1c30      	adds	r0, r6, #0
1001019e:	1c29      	adds	r1, r5, #0
100101a0:	4b72      	ldr	r3, [pc, #456]	; (1001036c <at_ble_event_get+0x674>)
100101a2:	4798      	blx	r3
100101a4:	2629      	movs	r6, #41	; 0x29
100101a6:	e09c      	b.n	100102e2 <at_ble_event_get+0x5ea>
100101a8:	1c30      	adds	r0, r6, #0
100101aa:	1c29      	adds	r1, r5, #0
100101ac:	4b70      	ldr	r3, [pc, #448]	; (10010370 <at_ble_event_get+0x678>)
100101ae:	4798      	blx	r3
100101b0:	2627      	movs	r6, #39	; 0x27
100101b2:	e096      	b.n	100102e2 <at_ble_event_get+0x5ea>
100101b4:	1c30      	adds	r0, r6, #0
100101b6:	1c29      	adds	r1, r5, #0
100101b8:	4b6e      	ldr	r3, [pc, #440]	; (10010374 <at_ble_event_get+0x67c>)
100101ba:	4798      	blx	r3
100101bc:	262a      	movs	r6, #42	; 0x2a
100101be:	e090      	b.n	100102e2 <at_ble_event_get+0x5ea>
100101c0:	9801      	ldr	r0, [sp, #4]
100101c2:	1c31      	adds	r1, r6, #0
100101c4:	1c2a      	adds	r2, r5, #0
100101c6:	4b6c      	ldr	r3, [pc, #432]	; (10010378 <at_ble_event_get+0x680>)
100101c8:	e7b9      	b.n	1001013e <at_ble_event_get+0x446>
100101ca:	9801      	ldr	r0, [sp, #4]
100101cc:	1c31      	adds	r1, r6, #0
100101ce:	1c2a      	adds	r2, r5, #0
100101d0:	4b6a      	ldr	r3, [pc, #424]	; (1001037c <at_ble_event_get+0x684>)
100101d2:	e7b4      	b.n	1001013e <at_ble_event_get+0x446>
100101d4:	1c30      	adds	r0, r6, #0
100101d6:	1c29      	adds	r1, r5, #0
100101d8:	4b69      	ldr	r3, [pc, #420]	; (10010380 <at_ble_event_get+0x688>)
100101da:	4798      	blx	r3
100101dc:	262b      	movs	r6, #43	; 0x2b
100101de:	e080      	b.n	100102e2 <at_ble_event_get+0x5ea>
100101e0:	1c30      	adds	r0, r6, #0
100101e2:	1c29      	adds	r1, r5, #0
100101e4:	4b67      	ldr	r3, [pc, #412]	; (10010384 <at_ble_event_get+0x68c>)
100101e6:	4798      	blx	r3
100101e8:	262c      	movs	r6, #44	; 0x2c
100101ea:	e07a      	b.n	100102e2 <at_ble_event_get+0x5ea>
100101ec:	1c31      	adds	r1, r6, #0
100101ee:	9801      	ldr	r0, [sp, #4]
100101f0:	1c2a      	adds	r2, r5, #0
100101f2:	4b65      	ldr	r3, [pc, #404]	; (10010388 <at_ble_event_get+0x690>)
100101f4:	4798      	blx	r3
100101f6:	2613      	movs	r6, #19
100101f8:	e073      	b.n	100102e2 <at_ble_event_get+0x5ea>
100101fa:	1c31      	adds	r1, r6, #0
100101fc:	9801      	ldr	r0, [sp, #4]
100101fe:	1c2a      	adds	r2, r5, #0
10010200:	4b62      	ldr	r3, [pc, #392]	; (1001038c <at_ble_event_get+0x694>)
10010202:	4798      	blx	r3
10010204:	2614      	movs	r6, #20
10010206:	e06c      	b.n	100102e2 <at_ble_event_get+0x5ea>
10010208:	1c31      	adds	r1, r6, #0
1001020a:	9801      	ldr	r0, [sp, #4]
1001020c:	1c2a      	adds	r2, r5, #0
1001020e:	4b60      	ldr	r3, [pc, #384]	; (10010390 <at_ble_event_get+0x698>)
10010210:	4798      	blx	r3
10010212:	2615      	movs	r6, #21
10010214:	e065      	b.n	100102e2 <at_ble_event_get+0x5ea>
10010216:	1c31      	adds	r1, r6, #0
10010218:	9801      	ldr	r0, [sp, #4]
1001021a:	1c2a      	adds	r2, r5, #0
1001021c:	4b5d      	ldr	r3, [pc, #372]	; (10010394 <at_ble_event_get+0x69c>)
1001021e:	4798      	blx	r3
10010220:	2616      	movs	r6, #22
10010222:	e05e      	b.n	100102e2 <at_ble_event_get+0x5ea>
10010224:	9801      	ldr	r0, [sp, #4]
10010226:	1c31      	adds	r1, r6, #0
10010228:	1c2a      	adds	r2, r5, #0
1001022a:	4b5b      	ldr	r3, [pc, #364]	; (10010398 <at_ble_event_get+0x6a0>)
1001022c:	e787      	b.n	1001013e <at_ble_event_get+0x446>
1001022e:	1c31      	adds	r1, r6, #0
10010230:	9801      	ldr	r0, [sp, #4]
10010232:	1c2a      	adds	r2, r5, #0
10010234:	4b58      	ldr	r3, [pc, #352]	; (10010398 <at_ble_event_get+0x6a0>)
10010236:	4798      	blx	r3
10010238:	88a9      	ldrh	r1, [r5, #4]
1001023a:	1c06      	adds	r6, r0, #0
1001023c:	4b57      	ldr	r3, [pc, #348]	; (1001039c <at_ble_event_get+0x6a4>)
1001023e:	8828      	ldrh	r0, [r5, #0]
10010240:	4798      	blx	r3
10010242:	e04e      	b.n	100102e2 <at_ble_event_get+0x5ea>
10010244:	1c31      	adds	r1, r6, #0
10010246:	9801      	ldr	r0, [sp, #4]
10010248:	1c2a      	adds	r2, r5, #0
1001024a:	4b55      	ldr	r3, [pc, #340]	; (100103a0 <at_ble_event_get+0x6a8>)
1001024c:	4798      	blx	r3
1001024e:	2623      	movs	r6, #35	; 0x23
10010250:	e047      	b.n	100102e2 <at_ble_event_get+0x5ea>
10010252:	9801      	ldr	r0, [sp, #4]
10010254:	1c31      	adds	r1, r6, #0
10010256:	1c2a      	adds	r2, r5, #0
10010258:	4b52      	ldr	r3, [pc, #328]	; (100103a4 <at_ble_event_get+0x6ac>)
1001025a:	e770      	b.n	1001013e <at_ble_event_get+0x446>
1001025c:	9b01      	ldr	r3, [sp, #4]
1001025e:	1c30      	adds	r0, r6, #0
10010260:	0a1f      	lsrs	r7, r3, #8
10010262:	802f      	strh	r7, [r5, #0]
10010264:	1c29      	adds	r1, r5, #0
10010266:	4b50      	ldr	r3, [pc, #320]	; (100103a8 <at_ble_event_get+0x6b0>)
10010268:	e749      	b.n	100100fe <at_ble_event_get+0x406>
1001026a:	9801      	ldr	r0, [sp, #4]
1001026c:	1c31      	adds	r1, r6, #0
1001026e:	1c2a      	adds	r2, r5, #0
10010270:	4b4e      	ldr	r3, [pc, #312]	; (100103ac <at_ble_event_get+0x6b4>)
10010272:	e764      	b.n	1001013e <at_ble_event_get+0x446>
10010274:	1c30      	adds	r0, r6, #0
10010276:	1c29      	adds	r1, r5, #0
10010278:	9a01      	ldr	r2, [sp, #4]
1001027a:	4b4d      	ldr	r3, [pc, #308]	; (100103b0 <at_ble_event_get+0x6b8>)
1001027c:	4798      	blx	r3
1001027e:	263b      	movs	r6, #59	; 0x3b
10010280:	e02f      	b.n	100102e2 <at_ble_event_get+0x5ea>
10010282:	1c31      	adds	r1, r6, #0
10010284:	9801      	ldr	r0, [sp, #4]
10010286:	1c2a      	adds	r2, r5, #0
10010288:	4b4a      	ldr	r3, [pc, #296]	; (100103b4 <at_ble_event_get+0x6bc>)
1001028a:	4798      	blx	r3
1001028c:	2618      	movs	r6, #24
1001028e:	e028      	b.n	100102e2 <at_ble_event_get+0x5ea>
10010290:	1c31      	adds	r1, r6, #0
10010292:	9801      	ldr	r0, [sp, #4]
10010294:	1c2a      	adds	r2, r5, #0
10010296:	4b48      	ldr	r3, [pc, #288]	; (100103b8 <at_ble_event_get+0x6c0>)
10010298:	4798      	blx	r3
1001029a:	2620      	movs	r6, #32
1001029c:	e021      	b.n	100102e2 <at_ble_event_get+0x5ea>
1001029e:	1c31      	adds	r1, r6, #0
100102a0:	9801      	ldr	r0, [sp, #4]
100102a2:	1c2a      	adds	r2, r5, #0
100102a4:	4b45      	ldr	r3, [pc, #276]	; (100103bc <at_ble_event_get+0x6c4>)
100102a6:	4798      	blx	r3
100102a8:	2633      	movs	r6, #51	; 0x33
100102aa:	e01a      	b.n	100102e2 <at_ble_event_get+0x5ea>
100102ac:	1c31      	adds	r1, r6, #0
100102ae:	9801      	ldr	r0, [sp, #4]
100102b0:	1c2a      	adds	r2, r5, #0
100102b2:	4b43      	ldr	r3, [pc, #268]	; (100103c0 <at_ble_event_get+0x6c8>)
100102b4:	4798      	blx	r3
100102b6:	2630      	movs	r6, #48	; 0x30
100102b8:	e013      	b.n	100102e2 <at_ble_event_get+0x5ea>
100102ba:	1c31      	adds	r1, r6, #0
100102bc:	9801      	ldr	r0, [sp, #4]
100102be:	1c2a      	adds	r2, r5, #0
100102c0:	4b40      	ldr	r3, [pc, #256]	; (100103c4 <at_ble_event_get+0x6cc>)
100102c2:	4798      	blx	r3
100102c4:	2634      	movs	r6, #52	; 0x34
100102c6:	e00c      	b.n	100102e2 <at_ble_event_get+0x5ea>
100102c8:	1c31      	adds	r1, r6, #0
100102ca:	9801      	ldr	r0, [sp, #4]
100102cc:	1c2a      	adds	r2, r5, #0
100102ce:	4b3e      	ldr	r3, [pc, #248]	; (100103c8 <at_ble_event_get+0x6d0>)
100102d0:	4798      	blx	r3
100102d2:	2635      	movs	r6, #53	; 0x35
100102d4:	e005      	b.n	100102e2 <at_ble_event_get+0x5ea>
100102d6:	1c31      	adds	r1, r6, #0
100102d8:	9801      	ldr	r0, [sp, #4]
100102da:	1c2a      	adds	r2, r5, #0
100102dc:	4b3b      	ldr	r3, [pc, #236]	; (100103cc <at_ble_event_get+0x6d4>)
100102de:	4798      	blx	r3
100102e0:	2632      	movs	r6, #50	; 0x32
100102e2:	9b03      	ldr	r3, [sp, #12]
100102e4:	701e      	strb	r6, [r3, #0]
100102e6:	2300      	movs	r3, #0
100102e8:	9302      	str	r3, [sp, #8]
100102ea:	e57a      	b.n	1000fde2 <at_ble_event_get+0xea>
100102ec:	23d0      	movs	r3, #208	; 0xd0
100102ee:	e7fb      	b.n	100102e8 <at_ble_event_get+0x5f0>
100102f0:	9b01      	ldr	r3, [sp, #4]
100102f2:	9e02      	ldr	r6, [sp, #8]
100102f4:	2bbb      	cmp	r3, #187	; 0xbb
100102f6:	d000      	beq.n	100102fa <at_ble_event_get+0x602>
100102f8:	e6e6      	b.n	100100c8 <at_ble_event_get+0x3d0>
100102fa:	e7f2      	b.n	100102e2 <at_ble_event_get+0x5ea>
100102fc:	9b02      	ldr	r3, [sp, #8]
100102fe:	2b00      	cmp	r3, #0
10010300:	d000      	beq.n	10010304 <at_ble_event_get+0x60c>
10010302:	e56e      	b.n	1000fde2 <at_ble_event_get+0xea>
10010304:	e6e0      	b.n	100100c8 <at_ble_event_get+0x3d0>
10010306:	9802      	ldr	r0, [sp, #8]
10010308:	b007      	add	sp, #28
1001030a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001030c:	00000e22 	.word	0x00000e22
10010310:	00000e25 	.word	0x00000e25
10010314:	00001b05 	.word	0x00001b05
10010318:	00001b01 	.word	0x00001b01
1001031c:	00001b03 	.word	0x00001b03
10010320:	00001b06 	.word	0x00001b06
10010324:	00001b08 	.word	0x00001b08
10010328:	10012529 	.word	0x10012529
1001032c:	1001250d 	.word	0x1001250d
10010330:	100127a9 	.word	0x100127a9
10010334:	10012899 	.word	0x10012899
10010338:	100128bd 	.word	0x100128bd
1001033c:	100118a1 	.word	0x100118a1
10010340:	10012121 	.word	0x10012121
10010344:	1001219d 	.word	0x1001219d
10010348:	10011b59 	.word	0x10011b59
1001034c:	10011bf5 	.word	0x10011bf5
10010350:	10011ccd 	.word	0x10011ccd
10010354:	10011f55 	.word	0x10011f55
10010358:	10011ff5 	.word	0x10011ff5
1001035c:	100120ad 	.word	0x100120ad
10010360:	100120d5 	.word	0x100120d5
10010364:	100120eb 	.word	0x100120eb
10010368:	100121b5 	.word	0x100121b5
1001036c:	100121e3 	.word	0x100121e3
10010370:	100121f9 	.word	0x100121f9
10010374:	10012223 	.word	0x10012223
10010378:	10012051 	.word	0x10012051
1001037c:	1001207b 	.word	0x1001207b
10010380:	100112e1 	.word	0x100112e1
10010384:	1001130d 	.word	0x1001130d
10010388:	10012add 	.word	0x10012add
1001038c:	10012b19 	.word	0x10012b19
10010390:	10012b61 	.word	0x10012b61
10010394:	10012ba5 	.word	0x10012ba5
10010398:	10012bd9 	.word	0x10012bd9
1001039c:	10012a9d 	.word	0x10012a9d
100103a0:	10012ca5 	.word	0x10012ca5
100103a4:	10012c2d 	.word	0x10012c2d
100103a8:	100111c5 	.word	0x100111c5
100103ac:	10011231 	.word	0x10011231
100103b0:	100111f5 	.word	0x100111f5
100103b4:	10012cb5 	.word	0x10012cb5
100103b8:	10012cf5 	.word	0x10012cf5
100103bc:	10012fbd 	.word	0x10012fbd
100103c0:	10012fc7 	.word	0x10012fc7
100103c4:	10012fcd 	.word	0x10012fcd
100103c8:	10012fd3 	.word	0x10012fd3
100103cc:	10012fdf 	.word	0x10012fdf

100103d0 <internal_event_flush>:
100103d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
100103d2:	490e      	ldr	r1, [pc, #56]	; (1001040c <internal_event_flush+0x3c>)
100103d4:	2400      	movs	r4, #0
100103d6:	680b      	ldr	r3, [r1, #0]
100103d8:	1c0f      	adds	r7, r1, #0
100103da:	1c1e      	adds	r6, r3, #0
100103dc:	4a0c      	ldr	r2, [pc, #48]	; (10010410 <internal_event_flush+0x40>)
100103de:	6815      	ldr	r5, [r2, #0]
100103e0:	9201      	str	r2, [sp, #4]
100103e2:	2b00      	cmp	r3, #0
100103e4:	d00e      	beq.n	10010404 <internal_event_flush+0x34>
100103e6:	889a      	ldrh	r2, [r3, #4]
100103e8:	6819      	ldr	r1, [r3, #0]
100103ea:	4282      	cmp	r2, r0
100103ec:	d107      	bne.n	100103fe <internal_event_flush+0x2e>
100103ee:	2c00      	cmp	r4, #0
100103f0:	d001      	beq.n	100103f6 <internal_event_flush+0x26>
100103f2:	6021      	str	r1, [r4, #0]
100103f4:	e000      	b.n	100103f8 <internal_event_flush+0x28>
100103f6:	1c0e      	adds	r6, r1, #0
100103f8:	601d      	str	r5, [r3, #0]
100103fa:	1c1d      	adds	r5, r3, #0
100103fc:	1c23      	adds	r3, r4, #0
100103fe:	1c1c      	adds	r4, r3, #0
10010400:	1c0b      	adds	r3, r1, #0
10010402:	e7ee      	b.n	100103e2 <internal_event_flush+0x12>
10010404:	9b01      	ldr	r3, [sp, #4]
10010406:	603e      	str	r6, [r7, #0]
10010408:	601d      	str	r5, [r3, #0]
1001040a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1001040c:	10019e08 	.word	0x10019e08
10010410:	10019e0c 	.word	0x10019e0c

10010414 <internal_conn_flush>:
10010414:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10010416:	4a12      	ldr	r2, [pc, #72]	; (10010460 <internal_conn_flush+0x4c>)
10010418:	9000      	str	r0, [sp, #0]
1001041a:	6813      	ldr	r3, [r2, #0]
1001041c:	4811      	ldr	r0, [pc, #68]	; (10010464 <internal_conn_flush+0x50>)
1001041e:	1c1f      	adds	r7, r3, #0
10010420:	2100      	movs	r1, #0
10010422:	4684      	mov	ip, r0
10010424:	6804      	ldr	r4, [r0, #0]
10010426:	9201      	str	r2, [sp, #4]
10010428:	2b00      	cmp	r3, #0
1001042a:	d014      	beq.n	10010456 <internal_conn_flush+0x42>
1001042c:	88d8      	ldrh	r0, [r3, #6]
1001042e:	9a00      	ldr	r2, [sp, #0]
10010430:	681d      	ldr	r5, [r3, #0]
10010432:	0a06      	lsrs	r6, r0, #8
10010434:	4296      	cmp	r6, r2
10010436:	d10b      	bne.n	10010450 <internal_conn_flush+0x3c>
10010438:	26fd      	movs	r6, #253	; 0xfd
1001043a:	4006      	ands	r6, r0
1001043c:	2e0c      	cmp	r6, #12
1001043e:	d107      	bne.n	10010450 <internal_conn_flush+0x3c>
10010440:	2900      	cmp	r1, #0
10010442:	d001      	beq.n	10010448 <internal_conn_flush+0x34>
10010444:	600d      	str	r5, [r1, #0]
10010446:	e000      	b.n	1001044a <internal_conn_flush+0x36>
10010448:	1c2f      	adds	r7, r5, #0
1001044a:	601c      	str	r4, [r3, #0]
1001044c:	1c1c      	adds	r4, r3, #0
1001044e:	1c0b      	adds	r3, r1, #0
10010450:	1c19      	adds	r1, r3, #0
10010452:	1c2b      	adds	r3, r5, #0
10010454:	e7e8      	b.n	10010428 <internal_conn_flush+0x14>
10010456:	9b01      	ldr	r3, [sp, #4]
10010458:	601f      	str	r7, [r3, #0]
1001045a:	4663      	mov	r3, ip
1001045c:	601c      	str	r4, [r3, #0]
1001045e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
10010460:	10019e08 	.word	0x10019e08
10010464:	10019e0c 	.word	0x10019e0c

10010468 <at_ble_device_name_set>:
10010468:	b530      	push	{r4, r5, lr}
1001046a:	23cf      	movs	r3, #207	; 0xcf
1001046c:	2800      	cmp	r0, #0
1001046e:	d010      	beq.n	10010492 <at_ble_device_name_set+0x2a>
10010470:	1e4a      	subs	r2, r1, #1
10010472:	2a1f      	cmp	r2, #31
10010474:	d80d      	bhi.n	10010492 <at_ble_device_name_set+0x2a>
10010476:	4a08      	ldr	r2, [pc, #32]	; (10010498 <at_ble_device_name_set+0x30>)
10010478:	1c13      	adds	r3, r2, #0
1001047a:	33aa      	adds	r3, #170	; 0xaa
1001047c:	8019      	strh	r1, [r3, #0]
1001047e:	2300      	movs	r3, #0
10010480:	1c1c      	adds	r4, r3, #0
10010482:	5cc5      	ldrb	r5, [r0, r3]
10010484:	34ac      	adds	r4, #172	; 0xac
10010486:	3301      	adds	r3, #1
10010488:	5515      	strb	r5, [r2, r4]
1001048a:	b2dc      	uxtb	r4, r3
1001048c:	428c      	cmp	r4, r1
1001048e:	d3f7      	bcc.n	10010480 <at_ble_device_name_set+0x18>
10010490:	2300      	movs	r3, #0
10010492:	1c18      	adds	r0, r3, #0
10010494:	bd30      	pop	{r4, r5, pc}
10010496:	46c0      	nop			; (mov r8, r8)
10010498:	1001adb2 	.word	0x1001adb2

1001049c <at_ble_addr_get>:
1001049c:	b510      	push	{r4, lr}
1001049e:	1c04      	adds	r4, r0, #0
100104a0:	20cf      	movs	r0, #207	; 0xcf
100104a2:	2c00      	cmp	r4, #0
100104a4:	d006      	beq.n	100104b4 <at_ble_addr_get+0x18>
100104a6:	4b04      	ldr	r3, [pc, #16]	; (100104b8 <at_ble_addr_get+0x1c>)
100104a8:	38ce      	subs	r0, #206	; 0xce
100104aa:	1c21      	adds	r1, r4, #0
100104ac:	4798      	blx	r3
100104ae:	4b03      	ldr	r3, [pc, #12]	; (100104bc <at_ble_addr_get+0x20>)
100104b0:	791b      	ldrb	r3, [r3, #4]
100104b2:	7023      	strb	r3, [r4, #0]
100104b4:	bd10      	pop	{r4, pc}
100104b6:	46c0      	nop			; (mov r8, r8)
100104b8:	100123bd 	.word	0x100123bd
100104bc:	1001adb2 	.word	0x1001adb2

100104c0 <at_ble_set_dev_config>:
100104c0:	b5f0      	push	{r4, r5, r6, r7, lr}
100104c2:	7906      	ldrb	r6, [r0, #4]
100104c4:	b089      	sub	sp, #36	; 0x24
100104c6:	25cf      	movs	r5, #207	; 0xcf
100104c8:	2e03      	cmp	r6, #3
100104ca:	d838      	bhi.n	1001053e <at_ble_set_dev_config+0x7e>
100104cc:	7803      	ldrb	r3, [r0, #0]
100104ce:	3511      	adds	r5, #17
100104d0:	2b0f      	cmp	r3, #15
100104d2:	d834      	bhi.n	1001053e <at_ble_set_dev_config+0x7e>
100104d4:	2380      	movs	r3, #128	; 0x80
100104d6:	8c87      	ldrh	r7, [r0, #36]	; 0x24
100104d8:	3d11      	subs	r5, #17
100104da:	009b      	lsls	r3, r3, #2
100104dc:	429f      	cmp	r7, r3
100104de:	d82e      	bhi.n	1001053e <at_ble_set_dev_config+0x7e>
100104e0:	7fc5      	ldrb	r5, [r0, #31]
100104e2:	7f83      	ldrb	r3, [r0, #30]
100104e4:	01ad      	lsls	r5, r5, #6
100104e6:	015b      	lsls	r3, r3, #5
100104e8:	431d      	orrs	r5, r3
100104ea:	7ec3      	ldrb	r3, [r0, #27]
100104ec:	431d      	orrs	r5, r3
100104ee:	7f43      	ldrb	r3, [r0, #29]
100104f0:	011b      	lsls	r3, r3, #4
100104f2:	431d      	orrs	r5, r3
100104f4:	7f03      	ldrb	r3, [r0, #28]
100104f6:	009b      	lsls	r3, r3, #2
100104f8:	431d      	orrs	r5, r3
100104fa:	4b12      	ldr	r3, [pc, #72]	; (10010544 <at_ble_set_dev_config+0x84>)
100104fc:	b2ed      	uxtb	r5, r5
100104fe:	711e      	strb	r6, [r3, #4]
10010500:	7903      	ldrb	r3, [r0, #4]
10010502:	3b02      	subs	r3, #2
10010504:	2b01      	cmp	r3, #1
10010506:	d801      	bhi.n	1001050c <at_ble_set_dev_config+0x4c>
10010508:	2302      	movs	r3, #2
1001050a:	7103      	strb	r3, [r0, #4]
1001050c:	1c04      	adds	r4, r0, #0
1001050e:	1c23      	adds	r3, r4, #0
10010510:	330b      	adds	r3, #11
10010512:	8861      	ldrh	r1, [r4, #2]
10010514:	9307      	str	r3, [sp, #28]
10010516:	7923      	ldrb	r3, [r4, #4]
10010518:	7800      	ldrb	r0, [r0, #0]
1001051a:	9300      	str	r3, [sp, #0]
1001051c:	9501      	str	r5, [sp, #4]
1001051e:	8c25      	ldrh	r5, [r4, #32]
10010520:	1d62      	adds	r2, r4, #5
10010522:	9502      	str	r5, [sp, #8]
10010524:	8c65      	ldrh	r5, [r4, #34]	; 0x22
10010526:	9b07      	ldr	r3, [sp, #28]
10010528:	9503      	str	r5, [sp, #12]
1001052a:	9704      	str	r7, [sp, #16]
1001052c:	4d06      	ldr	r5, [pc, #24]	; (10010548 <at_ble_set_dev_config+0x88>)
1001052e:	47a8      	blx	r5
10010530:	7126      	strb	r6, [r4, #4]
10010532:	1c05      	adds	r5, r0, #0
10010534:	1c21      	adds	r1, r4, #0
10010536:	4803      	ldr	r0, [pc, #12]	; (10010544 <at_ble_set_dev_config+0x84>)
10010538:	2226      	movs	r2, #38	; 0x26
1001053a:	4b04      	ldr	r3, [pc, #16]	; (1001054c <at_ble_set_dev_config+0x8c>)
1001053c:	4798      	blx	r3
1001053e:	1c28      	adds	r0, r5, #0
10010540:	b009      	add	sp, #36	; 0x24
10010542:	bdf0      	pop	{r4, r5, r6, r7, pc}
10010544:	1001adb2 	.word	0x1001adb2
10010548:	100122b5 	.word	0x100122b5
1001054c:	10015103 	.word	0x10015103

10010550 <at_ble_init>:
10010550:	b5f0      	push	{r4, r5, r6, r7, lr}
10010552:	b087      	sub	sp, #28
10010554:	af03      	add	r7, sp, #12
10010556:	4954      	ldr	r1, [pc, #336]	; (100106a8 <at_ble_init+0x158>)
10010558:	220b      	movs	r2, #11
1001055a:	4b54      	ldr	r3, [pc, #336]	; (100106ac <at_ble_init+0x15c>)
1001055c:	1c04      	adds	r4, r0, #0
1001055e:	1c38      	adds	r0, r7, #0
10010560:	4798      	blx	r3
10010562:	2205      	movs	r2, #5
10010564:	4b52      	ldr	r3, [pc, #328]	; (100106b0 <at_ble_init+0x160>)
10010566:	2640      	movs	r6, #64	; 0x40
10010568:	801a      	strh	r2, [r3, #0]
1001056a:	2300      	movs	r3, #0
1001056c:	4a51      	ldr	r2, [pc, #324]	; (100106b4 <at_ble_init+0x164>)
1001056e:	6013      	str	r3, [r2, #0]
10010570:	4a51      	ldr	r2, [pc, #324]	; (100106b8 <at_ble_init+0x168>)
10010572:	7013      	strb	r3, [r2, #0]
10010574:	4a51      	ldr	r2, [pc, #324]	; (100106bc <at_ble_init+0x16c>)
10010576:	7013      	strb	r3, [r2, #0]
10010578:	4b51      	ldr	r3, [pc, #324]	; (100106c0 <at_ble_init+0x170>)
1001057a:	4798      	blx	r3
1001057c:	4b51      	ldr	r3, [pc, #324]	; (100106c4 <at_ble_init+0x174>)
1001057e:	4798      	blx	r3
10010580:	4b51      	ldr	r3, [pc, #324]	; (100106c8 <at_ble_init+0x178>)
10010582:	4798      	blx	r3
10010584:	4b51      	ldr	r3, [pc, #324]	; (100106cc <at_ble_init+0x17c>)
10010586:	4798      	blx	r3
10010588:	2c00      	cmp	r4, #0
1001058a:	d100      	bne.n	1001058e <at_ble_init+0x3e>
1001058c:	e089      	b.n	100106a2 <at_ble_init+0x152>
1001058e:	68a3      	ldr	r3, [r4, #8]
10010590:	2b00      	cmp	r3, #0
10010592:	d100      	bne.n	10010596 <at_ble_init+0x46>
10010594:	e085      	b.n	100106a2 <at_ble_init+0x152>
10010596:	6923      	ldr	r3, [r4, #16]
10010598:	2b00      	cmp	r3, #0
1001059a:	d100      	bne.n	1001059e <at_ble_init+0x4e>
1001059c:	e081      	b.n	100106a2 <at_ble_init+0x152>
1001059e:	6820      	ldr	r0, [r4, #0]
100105a0:	2800      	cmp	r0, #0
100105a2:	d102      	bne.n	100105aa <at_ble_init+0x5a>
100105a4:	6863      	ldr	r3, [r4, #4]
100105a6:	2b00      	cmp	r3, #0
100105a8:	d17b      	bne.n	100106a2 <at_ble_init+0x152>
100105aa:	4b49      	ldr	r3, [pc, #292]	; (100106d0 <at_ble_init+0x180>)
100105ac:	6861      	ldr	r1, [r4, #4]
100105ae:	4798      	blx	r3
100105b0:	4b48      	ldr	r3, [pc, #288]	; (100106d4 <at_ble_init+0x184>)
100105b2:	4798      	blx	r3
100105b4:	2801      	cmp	r0, #1
100105b6:	d901      	bls.n	100105bc <at_ble_init+0x6c>
100105b8:	26e2      	movs	r6, #226	; 0xe2
100105ba:	e072      	b.n	100106a2 <at_ble_init+0x152>
100105bc:	4846      	ldr	r0, [pc, #280]	; (100106d8 <at_ble_init+0x188>)
100105be:	4b47      	ldr	r3, [pc, #284]	; (100106dc <at_ble_init+0x18c>)
100105c0:	4798      	blx	r3
100105c2:	2800      	cmp	r0, #0
100105c4:	d1f8      	bne.n	100105b8 <at_ble_init+0x68>
100105c6:	1c20      	adds	r0, r4, #0
100105c8:	4b45      	ldr	r3, [pc, #276]	; (100106e0 <at_ble_init+0x190>)
100105ca:	4798      	blx	r3
100105cc:	68e0      	ldr	r0, [r4, #12]
100105ce:	68a1      	ldr	r1, [r4, #8]
100105d0:	4b44      	ldr	r3, [pc, #272]	; (100106e4 <at_ble_init+0x194>)
100105d2:	4798      	blx	r3
100105d4:	466b      	mov	r3, sp
100105d6:	2201      	movs	r2, #1
100105d8:	1cdc      	adds	r4, r3, #3
100105da:	1c20      	adds	r0, r4, #0
100105dc:	a901      	add	r1, sp, #4
100105de:	4252      	negs	r2, r2
100105e0:	4b41      	ldr	r3, [pc, #260]	; (100106e8 <at_ble_init+0x198>)
100105e2:	4798      	blx	r3
100105e4:	2800      	cmp	r0, #0
100105e6:	d102      	bne.n	100105ee <at_ble_init+0x9e>
100105e8:	7823      	ldrb	r3, [r4, #0]
100105ea:	2b39      	cmp	r3, #57	; 0x39
100105ec:	d1f2      	bne.n	100105d4 <at_ble_init+0x84>
100105ee:	4b3f      	ldr	r3, [pc, #252]	; (100106ec <at_ble_init+0x19c>)
100105f0:	4798      	blx	r3
100105f2:	1e06      	subs	r6, r0, #0
100105f4:	d155      	bne.n	100106a2 <at_ble_init+0x152>
100105f6:	1c03      	adds	r3, r0, #0
100105f8:	2101      	movs	r1, #1
100105fa:	4a3d      	ldr	r2, [pc, #244]	; (100106f0 <at_ble_init+0x1a0>)
100105fc:	4249      	negs	r1, r1
100105fe:	189a      	adds	r2, r3, r2
10010600:	3312      	adds	r3, #18
10010602:	8151      	strh	r1, [r2, #10]
10010604:	2b90      	cmp	r3, #144	; 0x90
10010606:	d1f7      	bne.n	100105f8 <at_ble_init+0xa8>
10010608:	4c3a      	ldr	r4, [pc, #232]	; (100106f4 <at_ble_init+0x1a4>)
1001060a:	3b81      	subs	r3, #129	; 0x81
1001060c:	7023      	strb	r3, [r4, #0]
1001060e:	4b3a      	ldr	r3, [pc, #232]	; (100106f8 <at_ble_init+0x1a8>)
10010610:	4a3a      	ldr	r2, [pc, #232]	; (100106fc <at_ble_init+0x1ac>)
10010612:	8063      	strh	r3, [r4, #2]
10010614:	2300      	movs	r3, #0
10010616:	7123      	strb	r3, [r4, #4]
10010618:	3301      	adds	r3, #1
1001061a:	1e58      	subs	r0, r3, #1
1001061c:	0119      	lsls	r1, r3, #4
1001061e:	4301      	orrs	r1, r0
10010620:	3302      	adds	r3, #2
10010622:	7011      	strb	r1, [r2, #0]
10010624:	3201      	adds	r2, #1
10010626:	2b21      	cmp	r3, #33	; 0x21
10010628:	d1f7      	bne.n	1001061a <at_ble_init+0xca>
1001062a:	33e0      	adds	r3, #224	; 0xe0
1001062c:	33ff      	adds	r3, #255	; 0xff
1001062e:	84a3      	strh	r3, [r4, #36]	; 0x24
10010630:	1c23      	adds	r3, r4, #0
10010632:	2500      	movs	r5, #0
10010634:	3373      	adds	r3, #115	; 0x73
10010636:	701d      	strb	r5, [r3, #0]
10010638:	1c23      	adds	r3, r4, #0
1001063a:	3372      	adds	r3, #114	; 0x72
1001063c:	701d      	strb	r5, [r3, #0]
1001063e:	1c23      	adds	r3, r4, #0
10010640:	3376      	adds	r3, #118	; 0x76
10010642:	701d      	strb	r5, [r3, #0]
10010644:	1c23      	adds	r3, r4, #0
10010646:	33cc      	adds	r3, #204	; 0xcc
10010648:	801d      	strh	r5, [r3, #0]
1001064a:	1c22      	adds	r2, r4, #0
1001064c:	23a0      	movs	r3, #160	; 0xa0
1001064e:	32d0      	adds	r2, #208	; 0xd0
10010650:	005b      	lsls	r3, r3, #1
10010652:	8013      	strh	r3, [r2, #0]
10010654:	1c22      	adds	r2, r4, #0
10010656:	32ce      	adds	r2, #206	; 0xce
10010658:	8013      	strh	r3, [r2, #0]
1001065a:	1c23      	adds	r3, r4, #0
1001065c:	33d2      	adds	r3, #210	; 0xd2
1001065e:	801d      	strh	r5, [r3, #0]
10010660:	22fa      	movs	r2, #250	; 0xfa
10010662:	1c23      	adds	r3, r4, #0
10010664:	0052      	lsls	r2, r2, #1
10010666:	33d4      	adds	r3, #212	; 0xd4
10010668:	801a      	strh	r2, [r3, #0]
1001066a:	1c23      	adds	r3, r4, #0
1001066c:	33d6      	adds	r3, #214	; 0xd6
1001066e:	701d      	strb	r5, [r3, #0]
10010670:	1c20      	adds	r0, r4, #0
10010672:	4b23      	ldr	r3, [pc, #140]	; (10010700 <at_ble_init+0x1b0>)
10010674:	76e5      	strb	r5, [r4, #27]
10010676:	7725      	strb	r5, [r4, #28]
10010678:	7765      	strb	r5, [r4, #29]
1001067a:	77a5      	strb	r5, [r4, #30]
1001067c:	77e5      	strb	r5, [r4, #31]
1001067e:	8425      	strh	r5, [r4, #32]
10010680:	8465      	strh	r5, [r4, #34]	; 0x22
10010682:	4798      	blx	r3
10010684:	1c23      	adds	r3, r4, #0
10010686:	2207      	movs	r2, #7
10010688:	3374      	adds	r3, #116	; 0x74
1001068a:	701a      	strb	r2, [r3, #0]
1001068c:	1c23      	adds	r3, r4, #0
1001068e:	3204      	adds	r2, #4
10010690:	33aa      	adds	r3, #170	; 0xaa
10010692:	801a      	strh	r2, [r3, #0]
10010694:	1c2b      	adds	r3, r5, #0
10010696:	5d7a      	ldrb	r2, [r7, r5]
10010698:	33ac      	adds	r3, #172	; 0xac
1001069a:	3501      	adds	r5, #1
1001069c:	54e2      	strb	r2, [r4, r3]
1001069e:	2d0b      	cmp	r5, #11
100106a0:	d1f8      	bne.n	10010694 <at_ble_init+0x144>
100106a2:	1c30      	adds	r0, r6, #0
100106a4:	b007      	add	sp, #28
100106a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
100106a8:	1001815c 	.word	0x1001815c
100106ac:	10015103 	.word	0x10015103
100106b0:	1001ad20 	.word	0x1001ad20
100106b4:	10019eb8 	.word	0x10019eb8
100106b8:	10019e18 	.word	0x10019e18
100106bc:	10018384 	.word	0x10018384
100106c0:	10012d05 	.word	0x10012d05
100106c4:	100109c1 	.word	0x100109c1
100106c8:	10011021 	.word	0x10011021
100106cc:	100112d5 	.word	0x100112d5
100106d0:	1001105d 	.word	0x1001105d
100106d4:	1000f099 	.word	0x1000f099
100106d8:	100115d5 	.word	0x100115d5
100106dc:	1000f2dd 	.word	0x1000f2dd
100106e0:	1001167d 	.word	0x1001167d
100106e4:	1000fc3d 	.word	0x1000fc3d
100106e8:	1000fcf9 	.word	0x1000fcf9
100106ec:	10012245 	.word	0x10012245
100106f0:	1001ad22 	.word	0x1001ad22
100106f4:	1001adb2 	.word	0x1001adb2
100106f8:	00003a98 	.word	0x00003a98
100106fc:	1001adbd 	.word	0x1001adbd
10010700:	100104c1 	.word	0x100104c1

10010704 <at_ble_addr_set>:
10010704:	b538      	push	{r3, r4, r5, lr}
10010706:	1c45      	adds	r5, r0, #1
10010708:	1c03      	adds	r3, r0, #0
1001070a:	20cf      	movs	r0, #207	; 0xcf
1001070c:	2d00      	cmp	r5, #0
1001070e:	d018      	beq.n	10010742 <at_ble_addr_set+0x3e>
10010710:	781a      	ldrb	r2, [r3, #0]
10010712:	2a03      	cmp	r2, #3
10010714:	d815      	bhi.n	10010742 <at_ble_addr_set+0x3e>
10010716:	2a01      	cmp	r2, #1
10010718:	d102      	bne.n	10010720 <at_ble_addr_set+0x1c>
1001071a:	785a      	ldrb	r2, [r3, #1]
1001071c:	2a00      	cmp	r2, #0
1001071e:	d010      	beq.n	10010742 <at_ble_addr_set+0x3e>
10010720:	1c1c      	adds	r4, r3, #0
10010722:	1c29      	adds	r1, r5, #0
10010724:	2206      	movs	r2, #6
10010726:	4b07      	ldr	r3, [pc, #28]	; (10010744 <at_ble_addr_set+0x40>)
10010728:	4807      	ldr	r0, [pc, #28]	; (10010748 <at_ble_addr_set+0x44>)
1001072a:	4798      	blx	r3
1001072c:	7823      	ldrb	r3, [r4, #0]
1001072e:	4807      	ldr	r0, [pc, #28]	; (1001074c <at_ble_addr_set+0x48>)
10010730:	7103      	strb	r3, [r0, #4]
10010732:	4b07      	ldr	r3, [pc, #28]	; (10010750 <at_ble_addr_set+0x4c>)
10010734:	4798      	blx	r3
10010736:	7823      	ldrb	r3, [r4, #0]
10010738:	2b00      	cmp	r3, #0
1001073a:	d102      	bne.n	10010742 <at_ble_addr_set+0x3e>
1001073c:	1c28      	adds	r0, r5, #0
1001073e:	4b05      	ldr	r3, [pc, #20]	; (10010754 <at_ble_addr_set+0x50>)
10010740:	4798      	blx	r3
10010742:	bd38      	pop	{r3, r4, r5, pc}
10010744:	10015103 	.word	0x10015103
10010748:	1001adb7 	.word	0x1001adb7
1001074c:	1001adb2 	.word	0x1001adb2
10010750:	100104c1 	.word	0x100104c1
10010754:	10011701 	.word	0x10011701

10010758 <at_ble_adv_data_set>:
10010758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1001075a:	4684      	mov	ip, r0
1001075c:	1c0f      	adds	r7, r1, #0
1001075e:	1c16      	adds	r6, r2, #0
10010760:	1c1c      	adds	r4, r3, #0
10010762:	2800      	cmp	r0, #0
10010764:	d102      	bne.n	1001076c <at_ble_adv_data_set+0x14>
10010766:	20e2      	movs	r0, #226	; 0xe2
10010768:	2a00      	cmp	r2, #0
1001076a:	d02b      	beq.n	100107c4 <at_ble_adv_data_set+0x6c>
1001076c:	20cf      	movs	r0, #207	; 0xcf
1001076e:	2f1f      	cmp	r7, #31
10010770:	d828      	bhi.n	100107c4 <at_ble_adv_data_set+0x6c>
10010772:	2c1f      	cmp	r4, #31
10010774:	d826      	bhi.n	100107c4 <at_ble_adv_data_set+0x6c>
10010776:	4663      	mov	r3, ip
10010778:	2b00      	cmp	r3, #0
1001077a:	d00e      	beq.n	1001079a <at_ble_adv_data_set+0x42>
1001077c:	4812      	ldr	r0, [pc, #72]	; (100107c8 <at_ble_adv_data_set+0x70>)
1001077e:	4d13      	ldr	r5, [pc, #76]	; (100107cc <at_ble_adv_data_set+0x74>)
10010780:	2f00      	cmp	r7, #0
10010782:	d104      	bne.n	1001078e <at_ble_adv_data_set+0x36>
10010784:	1c39      	adds	r1, r7, #0
10010786:	221f      	movs	r2, #31
10010788:	4b11      	ldr	r3, [pc, #68]	; (100107d0 <at_ble_adv_data_set+0x78>)
1001078a:	4798      	blx	r3
1001078c:	e003      	b.n	10010796 <at_ble_adv_data_set+0x3e>
1001078e:	4661      	mov	r1, ip
10010790:	1c3a      	adds	r2, r7, #0
10010792:	4b10      	ldr	r3, [pc, #64]	; (100107d4 <at_ble_adv_data_set+0x7c>)
10010794:	4798      	blx	r3
10010796:	3572      	adds	r5, #114	; 0x72
10010798:	702f      	strb	r7, [r5, #0]
1001079a:	1e30      	subs	r0, r6, #0
1001079c:	d012      	beq.n	100107c4 <at_ble_adv_data_set+0x6c>
1001079e:	4d0b      	ldr	r5, [pc, #44]	; (100107cc <at_ble_adv_data_set+0x74>)
100107a0:	480d      	ldr	r0, [pc, #52]	; (100107d8 <at_ble_adv_data_set+0x80>)
100107a2:	2c00      	cmp	r4, #0
100107a4:	d107      	bne.n	100107b6 <at_ble_adv_data_set+0x5e>
100107a6:	1c21      	adds	r1, r4, #0
100107a8:	221f      	movs	r2, #31
100107aa:	4b09      	ldr	r3, [pc, #36]	; (100107d0 <at_ble_adv_data_set+0x78>)
100107ac:	3573      	adds	r5, #115	; 0x73
100107ae:	4798      	blx	r3
100107b0:	702c      	strb	r4, [r5, #0]
100107b2:	1c20      	adds	r0, r4, #0
100107b4:	e006      	b.n	100107c4 <at_ble_adv_data_set+0x6c>
100107b6:	1c31      	adds	r1, r6, #0
100107b8:	1c22      	adds	r2, r4, #0
100107ba:	4b06      	ldr	r3, [pc, #24]	; (100107d4 <at_ble_adv_data_set+0x7c>)
100107bc:	4798      	blx	r3
100107be:	2000      	movs	r0, #0
100107c0:	3573      	adds	r5, #115	; 0x73
100107c2:	702c      	strb	r4, [r5, #0]
100107c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100107c6:	46c0      	nop			; (mov r8, r8)
100107c8:	1001ade6 	.word	0x1001ade6
100107cc:	1001adb2 	.word	0x1001adb2
100107d0:	10015115 	.word	0x10015115
100107d4:	10015103 	.word	0x10015103
100107d8:	1001ae05 	.word	0x1001ae05

100107dc <at_ble_adv_start>:
100107dc:	b5f0      	push	{r4, r5, r6, r7, lr}
100107de:	b091      	sub	sp, #68	; 0x44
100107e0:	1c1f      	adds	r7, r3, #0
100107e2:	ab16      	add	r3, sp, #88	; 0x58
100107e4:	881d      	ldrh	r5, [r3, #0]
100107e6:	ab17      	add	r3, sp, #92	; 0x5c
100107e8:	881b      	ldrh	r3, [r3, #0]
100107ea:	910d      	str	r1, [sp, #52]	; 0x34
100107ec:	930e      	str	r3, [sp, #56]	; 0x38
100107ee:	ab18      	add	r3, sp, #96	; 0x60
100107f0:	781b      	ldrb	r3, [r3, #0]
100107f2:	1c04      	adds	r4, r0, #0
100107f4:	930f      	str	r3, [sp, #60]	; 0x3c
100107f6:	4b42      	ldr	r3, [pc, #264]	; (10010900 <at_ble_adv_start+0x124>)
100107f8:	1c16      	adds	r6, r2, #0
100107fa:	3373      	adds	r3, #115	; 0x73
100107fc:	781b      	ldrb	r3, [r3, #0]
100107fe:	20cf      	movs	r0, #207	; 0xcf
10010800:	930c      	str	r3, [sp, #48]	; 0x30
10010802:	2c01      	cmp	r4, #1
10010804:	d103      	bne.n	1001080e <at_ble_adv_start+0x32>
10010806:	9b0e      	ldr	r3, [sp, #56]	; 0x38
10010808:	2b00      	cmp	r3, #0
1001080a:	d176      	bne.n	100108fa <at_ble_adv_start+0x11e>
1001080c:	e024      	b.n	10010858 <at_ble_adv_start+0x7c>
1001080e:	2c04      	cmp	r4, #4
10010810:	d873      	bhi.n	100108fa <at_ble_adv_start+0x11e>
10010812:	2380      	movs	r3, #128	; 0x80
10010814:	01db      	lsls	r3, r3, #7
10010816:	429d      	cmp	r5, r3
10010818:	d86f      	bhi.n	100108fa <at_ble_adv_start+0x11e>
1001081a:	2c00      	cmp	r4, #0
1001081c:	d102      	bne.n	10010824 <at_ble_adv_start+0x48>
1001081e:	2d1f      	cmp	r5, #31
10010820:	d96b      	bls.n	100108fa <at_ble_adv_start+0x11e>
10010822:	e003      	b.n	1001082c <at_ble_adv_start+0x50>
10010824:	2d9f      	cmp	r5, #159	; 0x9f
10010826:	d801      	bhi.n	1001082c <at_ble_adv_start+0x50>
10010828:	2c01      	cmp	r4, #1
1001082a:	d166      	bne.n	100108fa <at_ble_adv_start+0x11e>
1001082c:	2f00      	cmp	r7, #0
1001082e:	d009      	beq.n	10010844 <at_ble_adv_start+0x68>
10010830:	9b0d      	ldr	r3, [sp, #52]	; 0x34
10010832:	20cf      	movs	r0, #207	; 0xcf
10010834:	3b01      	subs	r3, #1
10010836:	2b01      	cmp	r3, #1
10010838:	d95f      	bls.n	100108fa <at_ble_adv_start+0x11e>
1001083a:	2c01      	cmp	r4, #1
1001083c:	d102      	bne.n	10010844 <at_ble_adv_start+0x68>
1001083e:	2d00      	cmp	r5, #0
10010840:	d100      	bne.n	10010844 <at_ble_adv_start+0x68>
10010842:	3520      	adds	r5, #32
10010844:	4b2f      	ldr	r3, [pc, #188]	; (10010904 <at_ble_adv_start+0x128>)
10010846:	4798      	blx	r3
10010848:	1c01      	adds	r1, r0, #0
1001084a:	2e00      	cmp	r6, #0
1001084c:	d043      	beq.n	100108d6 <at_ble_adv_start+0xfa>
1001084e:	7833      	ldrb	r3, [r6, #0]
10010850:	1e60      	subs	r0, r4, #1
10010852:	2b00      	cmp	r3, #0
10010854:	d109      	bne.n	1001086a <at_ble_adv_start+0x8e>
10010856:	e03b      	b.n	100108d0 <at_ble_adv_start+0xf4>
10010858:	2380      	movs	r3, #128	; 0x80
1001085a:	01db      	lsls	r3, r3, #7
1001085c:	429d      	cmp	r5, r3
1001085e:	d84c      	bhi.n	100108fa <at_ble_adv_start+0x11e>
10010860:	2e00      	cmp	r6, #0
10010862:	d04a      	beq.n	100108fa <at_ble_adv_start+0x11e>
10010864:	2f00      	cmp	r7, #0
10010866:	d1e3      	bne.n	10010830 <at_ble_adv_start+0x54>
10010868:	e02b      	b.n	100108c2 <at_ble_adv_start+0xe6>
1001086a:	2301      	movs	r3, #1
1001086c:	2803      	cmp	r0, #3
1001086e:	d93a      	bls.n	100108e6 <at_ble_adv_start+0x10a>
10010870:	200d      	movs	r0, #13
10010872:	1c72      	adds	r2, r6, #1
10010874:	e002      	b.n	1001087c <at_ble_adv_start+0xa0>
10010876:	200e      	movs	r0, #14
10010878:	1e32      	subs	r2, r6, #0
1001087a:	d1fa      	bne.n	10010872 <at_ble_adv_start+0x96>
1001087c:	4c20      	ldr	r4, [pc, #128]	; (10010900 <at_ble_adv_start+0x124>)
1001087e:	3474      	adds	r4, #116	; 0x74
10010880:	7826      	ldrb	r6, [r4, #0]
10010882:	2407      	movs	r4, #7
10010884:	2e00      	cmp	r6, #0
10010886:	d000      	beq.n	1001088a <at_ble_adv_start+0xae>
10010888:	1c34      	adds	r4, r6, #0
1001088a:	9200      	str	r2, [sp, #0]
1001088c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
1001088e:	9403      	str	r4, [sp, #12]
10010890:	9204      	str	r2, [sp, #16]
10010892:	4a1b      	ldr	r2, [pc, #108]	; (10010900 <at_ble_adv_start+0x124>)
10010894:	9501      	str	r5, [sp, #4]
10010896:	9502      	str	r5, [sp, #8]
10010898:	9705      	str	r7, [sp, #20]
1001089a:	3272      	adds	r2, #114	; 0x72
1001089c:	7812      	ldrb	r2, [r2, #0]
1001089e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
100108a0:	9206      	str	r2, [sp, #24]
100108a2:	4a19      	ldr	r2, [pc, #100]	; (10010908 <at_ble_adv_start+0x12c>)
100108a4:	9207      	str	r2, [sp, #28]
100108a6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
100108a8:	9208      	str	r2, [sp, #32]
100108aa:	4a18      	ldr	r2, [pc, #96]	; (1001090c <at_ble_adv_start+0x130>)
100108ac:	9209      	str	r2, [sp, #36]	; 0x24
100108ae:	2264      	movs	r2, #100	; 0x64
100108b0:	4362      	muls	r2, r4
100108b2:	b292      	uxth	r2, r2
100108b4:	920a      	str	r2, [sp, #40]	; 0x28
100108b6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
100108b8:	4c15      	ldr	r4, [pc, #84]	; (10010910 <at_ble_adv_start+0x134>)
100108ba:	920b      	str	r2, [sp, #44]	; 0x2c
100108bc:	4a15      	ldr	r2, [pc, #84]	; (10010914 <at_ble_adv_start+0x138>)
100108be:	47a0      	blx	r4
100108c0:	e01b      	b.n	100108fa <at_ble_adv_start+0x11e>
100108c2:	2d00      	cmp	r5, #0
100108c4:	d1be      	bne.n	10010844 <at_ble_adv_start+0x68>
100108c6:	4b0f      	ldr	r3, [pc, #60]	; (10010904 <at_ble_adv_start+0x128>)
100108c8:	4798      	blx	r3
100108ca:	2520      	movs	r5, #32
100108cc:	1c01      	adds	r1, r0, #0
100108ce:	e7be      	b.n	1001084e <at_ble_adv_start+0x72>
100108d0:	2803      	cmp	r0, #3
100108d2:	d8cd      	bhi.n	10010870 <at_ble_adv_start+0x94>
100108d4:	e006      	b.n	100108e4 <at_ble_adv_start+0x108>
100108d6:	1e60      	subs	r0, r4, #1
100108d8:	2803      	cmp	r0, #3
100108da:	d903      	bls.n	100108e4 <at_ble_adv_start+0x108>
100108dc:	1c33      	adds	r3, r6, #0
100108de:	200d      	movs	r0, #13
100108e0:	1c32      	adds	r2, r6, #0
100108e2:	e7cb      	b.n	1001087c <at_ble_adv_start+0xa0>
100108e4:	2300      	movs	r3, #0
100108e6:	f002 fb7f 	bl	10012fe8 <__gnu_thumb1_case_sqi>
100108ea:	06c6      	.short	0x06c6
100108ec:	0204      	.short	0x0204
100108ee:	200f      	movs	r0, #15
100108f0:	e7c2      	b.n	10010878 <at_ble_adv_start+0x9c>
100108f2:	2200      	movs	r2, #0
100108f4:	920c      	str	r2, [sp, #48]	; 0x30
100108f6:	200c      	movs	r0, #12
100108f8:	e7be      	b.n	10010878 <at_ble_adv_start+0x9c>
100108fa:	b011      	add	sp, #68	; 0x44
100108fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
100108fe:	46c0      	nop			; (mov r8, r8)
10010900:	1001adb2 	.word	0x1001adb2
10010904:	10012791 	.word	0x10012791
10010908:	1001ade6 	.word	0x1001ade6
1001090c:	1001ae05 	.word	0x1001ae05
10010910:	10012671 	.word	0x10012671
10010914:	00003a98 	.word	0x00003a98

10010918 <at_ble_adv_stop>:
10010918:	b508      	push	{r3, lr}
1001091a:	4b01      	ldr	r3, [pc, #4]	; (10010920 <at_ble_adv_stop+0x8>)
1001091c:	4798      	blx	r3
1001091e:	bd08      	pop	{r3, pc}
10010920:	1001249d 	.word	0x1001249d

10010924 <at_ble_scan_stop>:
10010924:	b510      	push	{r4, lr}
10010926:	4b05      	ldr	r3, [pc, #20]	; (1001093c <at_ble_scan_stop+0x18>)
10010928:	4798      	blx	r3
1001092a:	1e04      	subs	r4, r0, #0
1001092c:	d103      	bne.n	10010936 <at_ble_scan_stop+0x12>
1001092e:	20d1      	movs	r0, #209	; 0xd1
10010930:	4b03      	ldr	r3, [pc, #12]	; (10010940 <at_ble_scan_stop+0x1c>)
10010932:	0100      	lsls	r0, r0, #4
10010934:	4798      	blx	r3
10010936:	1c20      	adds	r0, r4, #0
10010938:	bd10      	pop	{r4, pc}
1001093a:	46c0      	nop			; (mov r8, r8)
1001093c:	1001249d 	.word	0x1001249d
10010940:	100103d1 	.word	0x100103d1

10010944 <at_ble_disconnect>:
10010944:	b538      	push	{r3, r4, r5, lr}
10010946:	1c04      	adds	r4, r0, #0
10010948:	4b04      	ldr	r3, [pc, #16]	; (1001095c <at_ble_disconnect+0x18>)
1001094a:	1c08      	adds	r0, r1, #0
1001094c:	1c21      	adds	r1, r4, #0
1001094e:	4798      	blx	r3
10010950:	1c05      	adds	r5, r0, #0
10010952:	4b03      	ldr	r3, [pc, #12]	; (10010960 <at_ble_disconnect+0x1c>)
10010954:	1c20      	adds	r0, r4, #0
10010956:	4798      	blx	r3
10010958:	1c28      	adds	r0, r5, #0
1001095a:	bd38      	pop	{r3, r4, r5, pc}
1001095c:	10011b15 	.word	0x10011b15
10010960:	10010415 	.word	0x10010415

10010964 <at_ble_conn_update_reply>:
10010964:	b510      	push	{r4, lr}
10010966:	4c01      	ldr	r4, [pc, #4]	; (1001096c <at_ble_conn_update_reply+0x8>)
10010968:	47a0      	blx	r4
1001096a:	bd10      	pop	{r4, pc}
1001096c:	10012005 	.word	0x10012005

10010970 <at_ble_random_address_resolve>:
10010970:	b510      	push	{r4, lr}
10010972:	23cf      	movs	r3, #207	; 0xcf
10010974:	2800      	cmp	r0, #0
10010976:	d00a      	beq.n	1001098e <at_ble_random_address_resolve+0x1e>
10010978:	2900      	cmp	r1, #0
1001097a:	d008      	beq.n	1001098e <at_ble_random_address_resolve+0x1e>
1001097c:	2a00      	cmp	r2, #0
1001097e:	d006      	beq.n	1001098e <at_ble_random_address_resolve+0x1e>
10010980:	780c      	ldrb	r4, [r1, #0]
10010982:	2c02      	cmp	r4, #2
10010984:	d103      	bne.n	1001098e <at_ble_random_address_resolve+0x1e>
10010986:	4b03      	ldr	r3, [pc, #12]	; (10010994 <at_ble_random_address_resolve+0x24>)
10010988:	3101      	adds	r1, #1
1001098a:	4798      	blx	r3
1001098c:	2300      	movs	r3, #0
1001098e:	1c18      	adds	r0, r3, #0
10010990:	bd10      	pop	{r4, pc}
10010992:	46c0      	nop			; (mov r8, r8)
10010994:	10012831 	.word	0x10012831

10010998 <at_ble_uuid_type2len>:
10010998:	23cf      	movs	r3, #207	; 0xcf
1001099a:	2802      	cmp	r0, #2
1001099c:	d801      	bhi.n	100109a2 <at_ble_uuid_type2len+0xa>
1001099e:	4b02      	ldr	r3, [pc, #8]	; (100109a8 <at_ble_uuid_type2len+0x10>)
100109a0:	5c1b      	ldrb	r3, [r3, r0]
100109a2:	1c18      	adds	r0, r3, #0
100109a4:	4770      	bx	lr
100109a6:	46c0      	nop			; (mov r8, r8)
100109a8:	10018167 	.word	0x10018167

100109ac <at_ble_uuid_len2type>:
100109ac:	1e83      	subs	r3, r0, #2
100109ae:	b2db      	uxtb	r3, r3
100109b0:	2003      	movs	r0, #3
100109b2:	2b0e      	cmp	r3, #14
100109b4:	d801      	bhi.n	100109ba <at_ble_uuid_len2type+0xe>
100109b6:	4a01      	ldr	r2, [pc, #4]	; (100109bc <at_ble_uuid_len2type+0x10>)
100109b8:	5cd0      	ldrb	r0, [r2, r3]
100109ba:	4770      	bx	lr
100109bc:	1001816a 	.word	0x1001816a

100109c0 <init_gatt_client_module>:
100109c0:	2200      	movs	r2, #0
100109c2:	4b01      	ldr	r3, [pc, #4]	; (100109c8 <init_gatt_client_module+0x8>)
100109c4:	801a      	strh	r2, [r3, #0]
100109c6:	4770      	bx	lr
100109c8:	10019e10 	.word	0x10019e10

100109cc <db_searchATT>:
100109cc:	b570      	push	{r4, r5, r6, lr}
100109ce:	1c05      	adds	r5, r0, #0
100109d0:	2400      	movs	r4, #0
100109d2:	4b0c      	ldr	r3, [pc, #48]	; (10010a04 <db_searchATT+0x38>)
100109d4:	6819      	ldr	r1, [r3, #0]
100109d6:	4b0c      	ldr	r3, [pc, #48]	; (10010a08 <db_searchATT+0x3c>)
100109d8:	681e      	ldr	r6, [r3, #0]
100109da:	428c      	cmp	r4, r1
100109dc:	dc10      	bgt.n	10010a00 <db_searchATT+0x34>
100109de:	200c      	movs	r0, #12
100109e0:	1863      	adds	r3, r4, r1
100109e2:	0fda      	lsrs	r2, r3, #31
100109e4:	18d3      	adds	r3, r2, r3
100109e6:	1c02      	adds	r2, r0, #0
100109e8:	105b      	asrs	r3, r3, #1
100109ea:	435a      	muls	r2, r3
100109ec:	18b0      	adds	r0, r6, r2
100109ee:	8802      	ldrh	r2, [r0, #0]
100109f0:	42aa      	cmp	r2, r5
100109f2:	d201      	bcs.n	100109f8 <db_searchATT+0x2c>
100109f4:	1e59      	subs	r1, r3, #1
100109f6:	e7f0      	b.n	100109da <db_searchATT+0xe>
100109f8:	42aa      	cmp	r2, r5
100109fa:	d902      	bls.n	10010a02 <db_searchATT+0x36>
100109fc:	1c5c      	adds	r4, r3, #1
100109fe:	e7ec      	b.n	100109da <db_searchATT+0xe>
10010a00:	2000      	movs	r0, #0
10010a02:	bd70      	pop	{r4, r5, r6, pc}
10010a04:	10019e24 	.word	0x10019e24
10010a08:	10019e1c 	.word	0x10019e1c

10010a0c <att_permissions>:
10010a0c:	b530      	push	{r4, r5, lr}
10010a0e:	2403      	movs	r4, #3
10010a10:	1c05      	adds	r5, r0, #0
10010a12:	2301      	movs	r3, #1
10010a14:	4025      	ands	r5, r4
10010a16:	42a5      	cmp	r5, r4
10010a18:	d009      	beq.n	10010a2e <att_permissions+0x22>
10010a1a:	1c23      	adds	r3, r4, #0
10010a1c:	1924      	adds	r4, r4, r4
10010a1e:	4220      	tst	r0, r4
10010a20:	d105      	bne.n	10010a2e <att_permissions+0x22>
10010a22:	3b02      	subs	r3, #2
10010a24:	4218      	tst	r0, r3
10010a26:	d102      	bne.n	10010a2e <att_permissions+0x22>
10010a28:	1e4b      	subs	r3, r1, #1
10010a2a:	4199      	sbcs	r1, r3
10010a2c:	b28b      	uxth	r3, r1
10010a2e:	2130      	movs	r1, #48	; 0x30
10010a30:	4001      	ands	r1, r0
10010a32:	2930      	cmp	r1, #48	; 0x30
10010a34:	d007      	beq.n	10010a46 <att_permissions+0x3a>
10010a36:	0641      	lsls	r1, r0, #25
10010a38:	d401      	bmi.n	10010a3e <att_permissions+0x32>
10010a3a:	0681      	lsls	r1, r0, #26
10010a3c:	d501      	bpl.n	10010a42 <att_permissions+0x36>
10010a3e:	4807      	ldr	r0, [pc, #28]	; (10010a5c <att_permissions+0x50>)
10010a40:	e009      	b.n	10010a56 <att_permissions+0x4a>
10010a42:	06c1      	lsls	r1, r0, #27
10010a44:	d501      	bpl.n	10010a4a <att_permissions+0x3e>
10010a46:	4806      	ldr	r0, [pc, #24]	; (10010a60 <att_permissions+0x54>)
10010a48:	e005      	b.n	10010a56 <att_permissions+0x4a>
10010a4a:	2a00      	cmp	r2, #0
10010a4c:	d001      	beq.n	10010a52 <att_permissions+0x46>
10010a4e:	2204      	movs	r2, #4
10010a50:	4313      	orrs	r3, r2
10010a52:	2080      	movs	r0, #128	; 0x80
10010a54:	0180      	lsls	r0, r0, #6
10010a56:	4318      	orrs	r0, r3
10010a58:	bd30      	pop	{r4, r5, pc}
10010a5a:	46c0      	nop			; (mov r8, r8)
10010a5c:	0000200c 	.word	0x0000200c
10010a60:	00002004 	.word	0x00002004

10010a64 <char_permissions>:
10010a64:	b530      	push	{r4, r5, lr}
10010a66:	2300      	movs	r3, #0
10010a68:	0784      	lsls	r4, r0, #30
10010a6a:	d503      	bpl.n	10010a74 <char_permissions+0x10>
10010a6c:	3301      	adds	r3, #1
10010a6e:	4219      	tst	r1, r3
10010a70:	d100      	bne.n	10010a74 <char_permissions+0x10>
10010a72:	3302      	adds	r3, #2
10010a74:	0704      	lsls	r4, r0, #28
10010a76:	d508      	bpl.n	10010a8a <char_permissions+0x26>
10010a78:	06cc      	lsls	r4, r1, #27
10010a7a:	d501      	bpl.n	10010a80 <char_permissions+0x1c>
10010a7c:	2404      	movs	r4, #4
10010a7e:	e000      	b.n	10010a82 <char_permissions+0x1e>
10010a80:	240c      	movs	r4, #12
10010a82:	4323      	orrs	r3, r4
10010a84:	2480      	movs	r4, #128	; 0x80
10010a86:	01a4      	lsls	r4, r4, #6
10010a88:	4323      	orrs	r3, r4
10010a8a:	0684      	lsls	r4, r0, #26
10010a8c:	d506      	bpl.n	10010a9c <char_permissions+0x38>
10010a8e:	2406      	movs	r4, #6
10010a90:	4221      	tst	r1, r4
10010a92:	d101      	bne.n	10010a98 <char_permissions+0x34>
10010a94:	340a      	adds	r4, #10
10010a96:	e000      	b.n	10010a9a <char_permissions+0x36>
10010a98:	2430      	movs	r4, #48	; 0x30
10010a9a:	4323      	orrs	r3, r4
10010a9c:	06c4      	lsls	r4, r0, #27
10010a9e:	d506      	bpl.n	10010aae <char_permissions+0x4a>
10010aa0:	2406      	movs	r4, #6
10010aa2:	4221      	tst	r1, r4
10010aa4:	d101      	bne.n	10010aaa <char_permissions+0x46>
10010aa6:	343a      	adds	r4, #58	; 0x3a
10010aa8:	e000      	b.n	10010aac <char_permissions+0x48>
10010aaa:	24c0      	movs	r4, #192	; 0xc0
10010aac:	4323      	orrs	r3, r4
10010aae:	2480      	movs	r4, #128	; 0x80
10010ab0:	0064      	lsls	r4, r4, #1
10010ab2:	4220      	tst	r0, r4
10010ab4:	d000      	beq.n	10010ab8 <char_permissions+0x54>
10010ab6:	4323      	orrs	r3, r4
10010ab8:	07c4      	lsls	r4, r0, #31
10010aba:	d502      	bpl.n	10010ac2 <char_permissions+0x5e>
10010abc:	2480      	movs	r4, #128	; 0x80
10010abe:	00a4      	lsls	r4, r4, #2
10010ac0:	4323      	orrs	r3, r4
10010ac2:	2404      	movs	r4, #4
10010ac4:	4220      	tst	r0, r4
10010ac6:	d006      	beq.n	10010ad6 <char_permissions+0x72>
10010ac8:	06cd      	lsls	r5, r1, #27
10010aca:	d400      	bmi.n	10010ace <char_permissions+0x6a>
10010acc:	240c      	movs	r4, #12
10010ace:	4323      	orrs	r3, r4
10010ad0:	2480      	movs	r4, #128	; 0x80
10010ad2:	0124      	lsls	r4, r4, #4
10010ad4:	4323      	orrs	r3, r4
10010ad6:	0644      	lsls	r4, r0, #25
10010ad8:	d501      	bpl.n	10010ade <char_permissions+0x7a>
10010ada:	4c08      	ldr	r4, [pc, #32]	; (10010afc <char_permissions+0x98>)
10010adc:	4323      	orrs	r3, r4
10010ade:	0600      	lsls	r0, r0, #24
10010ae0:	d507      	bpl.n	10010af2 <char_permissions+0x8e>
10010ae2:	2004      	movs	r0, #4
10010ae4:	06c9      	lsls	r1, r1, #27
10010ae6:	d400      	bmi.n	10010aea <char_permissions+0x86>
10010ae8:	200c      	movs	r0, #12
10010aea:	4303      	orrs	r3, r0
10010aec:	2084      	movs	r0, #132	; 0x84
10010aee:	0180      	lsls	r0, r0, #6
10010af0:	4303      	orrs	r3, r0
10010af2:	0390      	lsls	r0, r2, #14
10010af4:	4303      	orrs	r3, r0
10010af6:	b298      	uxth	r0, r3
10010af8:	bd30      	pop	{r4, r5, pc}
10010afa:	46c0      	nop			; (mov r8, r8)
10010afc:	00001004 	.word	0x00001004

10010b00 <presentation_format_define>:
10010b00:	b507      	push	{r0, r1, r2, lr}
10010b02:	466a      	mov	r2, sp
10010b04:	780b      	ldrb	r3, [r1, #0]
10010b06:	7013      	strb	r3, [r2, #0]
10010b08:	784b      	ldrb	r3, [r1, #1]
10010b0a:	7053      	strb	r3, [r2, #1]
10010b0c:	884b      	ldrh	r3, [r1, #2]
10010b0e:	7093      	strb	r3, [r2, #2]
10010b10:	0a1b      	lsrs	r3, r3, #8
10010b12:	70d3      	strb	r3, [r2, #3]
10010b14:	790b      	ldrb	r3, [r1, #4]
10010b16:	7113      	strb	r3, [r2, #4]
10010b18:	88cb      	ldrh	r3, [r1, #6]
10010b1a:	2107      	movs	r1, #7
10010b1c:	7153      	strb	r3, [r2, #5]
10010b1e:	0a1b      	lsrs	r3, r3, #8
10010b20:	7193      	strb	r3, [r2, #6]
10010b22:	4b01      	ldr	r3, [pc, #4]	; (10010b28 <presentation_format_define+0x28>)
10010b24:	4798      	blx	r3
10010b26:	bd0e      	pop	{r1, r2, r3, pc}
10010b28:	10012e95 	.word	0x10012e95

10010b2c <db_addATT>:
10010b2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10010b2e:	4c29      	ldr	r4, [pc, #164]	; (10010bd4 <db_addATT+0xa8>)
10010b30:	1c1d      	adds	r5, r3, #0
10010b32:	6823      	ldr	r3, [r4, #0]
10010b34:	9001      	str	r0, [sp, #4]
10010b36:	26d3      	movs	r6, #211	; 0xd3
10010b38:	2b00      	cmp	r3, #0
10010b3a:	d048      	beq.n	10010bce <db_addATT+0xa2>
10010b3c:	1c1e      	adds	r6, r3, #0
10010b3e:	3e0c      	subs	r6, #12
10010b40:	6026      	str	r6, [r4, #0]
10010b42:	2900      	cmp	r1, #0
10010b44:	d005      	beq.n	10010b52 <db_addATT+0x26>
10010b46:	4f24      	ldr	r7, [pc, #144]	; (10010bd8 <db_addATT+0xac>)
10010b48:	46bc      	mov	ip, r7
10010b4a:	4660      	mov	r0, ip
10010b4c:	683f      	ldr	r7, [r7, #0]
10010b4e:	18bf      	adds	r7, r7, r2
10010b50:	6007      	str	r7, [r0, #0]
10010b52:	4821      	ldr	r0, [pc, #132]	; (10010bd8 <db_addATT+0xac>)
10010b54:	6807      	ldr	r7, [r0, #0]
10010b56:	4684      	mov	ip, r0
10010b58:	42be      	cmp	r6, r7
10010b5a:	d932      	bls.n	10010bc2 <db_addATT+0x96>
10010b5c:	4668      	mov	r0, sp
10010b5e:	8880      	ldrh	r0, [r0, #4]
10010b60:	3b0c      	subs	r3, #12
10010b62:	8018      	strh	r0, [r3, #0]
10010b64:	6823      	ldr	r3, [r4, #0]
10010b66:	2900      	cmp	r1, #0
10010b68:	d009      	beq.n	10010b7e <db_addATT+0x52>
10010b6a:	2a00      	cmp	r2, #0
10010b6c:	d007      	beq.n	10010b7e <db_addATT+0x52>
10010b6e:	4660      	mov	r0, ip
10010b70:	6800      	ldr	r0, [r0, #0]
10010b72:	809a      	strh	r2, [r3, #4]
10010b74:	1a80      	subs	r0, r0, r2
10010b76:	6098      	str	r0, [r3, #8]
10010b78:	4b18      	ldr	r3, [pc, #96]	; (10010bdc <db_addATT+0xb0>)
10010b7a:	4798      	blx	r3
10010b7c:	e002      	b.n	10010b84 <db_addATT+0x58>
10010b7e:	2100      	movs	r1, #0
10010b80:	809a      	strh	r2, [r3, #4]
10010b82:	6099      	str	r1, [r3, #8]
10010b84:	2300      	movs	r3, #0
10010b86:	6822      	ldr	r2, [r4, #0]
10010b88:	7093      	strb	r3, [r2, #2]
10010b8a:	3303      	adds	r3, #3
10010b8c:	402b      	ands	r3, r5
10010b8e:	2b03      	cmp	r3, #3
10010b90:	d001      	beq.n	10010b96 <db_addATT+0x6a>
10010b92:	076b      	lsls	r3, r5, #29
10010b94:	d504      	bpl.n	10010ba0 <db_addATT+0x74>
10010b96:	2101      	movs	r1, #1
10010b98:	6822      	ldr	r2, [r4, #0]
10010b9a:	7893      	ldrb	r3, [r2, #2]
10010b9c:	430b      	orrs	r3, r1
10010b9e:	7093      	strb	r3, [r2, #2]
10010ba0:	2330      	movs	r3, #48	; 0x30
10010ba2:	402b      	ands	r3, r5
10010ba4:	2b30      	cmp	r3, #48	; 0x30
10010ba6:	d001      	beq.n	10010bac <db_addATT+0x80>
10010ba8:	066b      	lsls	r3, r5, #25
10010baa:	d504      	bpl.n	10010bb6 <db_addATT+0x8a>
10010bac:	2102      	movs	r1, #2
10010bae:	6822      	ldr	r2, [r4, #0]
10010bb0:	7893      	ldrb	r3, [r2, #2]
10010bb2:	430b      	orrs	r3, r1
10010bb4:	7093      	strb	r3, [r2, #2]
10010bb6:	4a0a      	ldr	r2, [pc, #40]	; (10010be0 <db_addATT+0xb4>)
10010bb8:	2600      	movs	r6, #0
10010bba:	6813      	ldr	r3, [r2, #0]
10010bbc:	3301      	adds	r3, #1
10010bbe:	6013      	str	r3, [r2, #0]
10010bc0:	e005      	b.n	10010bce <db_addATT+0xa2>
10010bc2:	6023      	str	r3, [r4, #0]
10010bc4:	2611      	movs	r6, #17
10010bc6:	2900      	cmp	r1, #0
10010bc8:	d001      	beq.n	10010bce <db_addATT+0xa2>
10010bca:	1aba      	subs	r2, r7, r2
10010bcc:	6002      	str	r2, [r0, #0]
10010bce:	1c30      	adds	r0, r6, #0
10010bd0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10010bd2:	46c0      	nop			; (mov r8, r8)
10010bd4:	10019e1c 	.word	0x10019e1c
10010bd8:	10019e20 	.word	0x10019e20
10010bdc:	10015103 	.word	0x10015103
10010be0:	10019e24 	.word	0x10019e24

10010be4 <user_description_define>:
10010be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10010be6:	1c05      	adds	r5, r0, #0
10010be8:	20cf      	movs	r0, #207	; 0xcf
10010bea:	2a00      	cmp	r2, #0
10010bec:	d01c      	beq.n	10010c28 <user_description_define+0x44>
10010bee:	1c14      	adds	r4, r2, #0
10010bf0:	2203      	movs	r2, #3
10010bf2:	1c1e      	adds	r6, r3, #0
10010bf4:	400a      	ands	r2, r1
10010bf6:	1c0b      	adds	r3, r1, #0
10010bf8:	3a03      	subs	r2, #3
10010bfa:	4251      	negs	r1, r2
10010bfc:	4151      	adcs	r1, r2
10010bfe:	075a      	lsls	r2, r3, #29
10010c00:	0fd2      	lsrs	r2, r2, #31
10010c02:	430a      	orrs	r2, r1
10010c04:	03d2      	lsls	r2, r2, #15
10010c06:	4f09      	ldr	r7, [pc, #36]	; (10010c2c <user_description_define+0x48>)
10010c08:	1c28      	adds	r0, r5, #0
10010c0a:	2a00      	cmp	r2, #0
10010c0c:	d003      	beq.n	10010c16 <user_description_define+0x32>
10010c0e:	1c21      	adds	r1, r4, #0
10010c10:	1c32      	adds	r2, r6, #0
10010c12:	47b8      	blx	r7
10010c14:	e008      	b.n	10010c28 <user_description_define+0x44>
10010c16:	1c11      	adds	r1, r2, #0
10010c18:	47b8      	blx	r7
10010c1a:	2800      	cmp	r0, #0
10010c1c:	d104      	bne.n	10010c28 <user_description_define+0x44>
10010c1e:	1c28      	adds	r0, r5, #0
10010c20:	1c31      	adds	r1, r6, #0
10010c22:	1c22      	adds	r2, r4, #0
10010c24:	4b02      	ldr	r3, [pc, #8]	; (10010c30 <user_description_define+0x4c>)
10010c26:	4798      	blx	r3
10010c28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10010c2a:	46c0      	nop			; (mov r8, r8)
10010c2c:	10010b2d 	.word	0x10010b2d
10010c30:	10012e95 	.word	0x10012e95

10010c34 <at_ble_read_authorize_reply.part.1>:
10010c34:	b537      	push	{r0, r1, r2, r4, r5, lr}
10010c36:	4b09      	ldr	r3, [pc, #36]	; (10010c5c <at_ble_read_authorize_reply.part.1+0x28>)
10010c38:	1c05      	adds	r5, r0, #0
10010c3a:	1c08      	adds	r0, r1, #0
10010c3c:	1c0c      	adds	r4, r1, #0
10010c3e:	4798      	blx	r3
10010c40:	2800      	cmp	r0, #0
10010c42:	d009      	beq.n	10010c58 <at_ble_read_authorize_reply.part.1+0x24>
10010c44:	6882      	ldr	r2, [r0, #8]
10010c46:	2a00      	cmp	r2, #0
10010c48:	d006      	beq.n	10010c58 <at_ble_read_authorize_reply.part.1+0x24>
10010c4a:	8883      	ldrh	r3, [r0, #4]
10010c4c:	1c29      	adds	r1, r5, #0
10010c4e:	9200      	str	r2, [sp, #0]
10010c50:	1c20      	adds	r0, r4, #0
10010c52:	2200      	movs	r2, #0
10010c54:	4c02      	ldr	r4, [pc, #8]	; (10010c60 <at_ble_read_authorize_reply.part.1+0x2c>)
10010c56:	47a0      	blx	r4
10010c58:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
10010c5a:	46c0      	nop			; (mov r8, r8)
10010c5c:	100109cd 	.word	0x100109cd
10010c60:	1001292d 	.word	0x1001292d

10010c64 <internal_at_ble_service_define>:
10010c64:	b5f0      	push	{r4, r5, r6, r7, lr}
10010c66:	b08b      	sub	sp, #44	; 0x2c
10010c68:	9306      	str	r3, [sp, #24]
10010c6a:	ab10      	add	r3, sp, #64	; 0x40
10010c6c:	9202      	str	r2, [sp, #8]
10010c6e:	cb04      	ldmia	r3!, {r2}
10010c70:	1c05      	adds	r5, r0, #0
10010c72:	881b      	ldrh	r3, [r3, #0]
10010c74:	9105      	str	r1, [sp, #20]
10010c76:	9303      	str	r3, [sp, #12]
10010c78:	ab12      	add	r3, sp, #72	; 0x48
10010c7a:	781b      	ldrb	r3, [r3, #0]
10010c7c:	20cf      	movs	r0, #207	; 0xcf
10010c7e:	9304      	str	r3, [sp, #16]
10010c80:	2d00      	cmp	r5, #0
10010c82:	d100      	bne.n	10010c86 <internal_at_ble_service_define+0x22>
10010c84:	e1ca      	b.n	1001101c <internal_at_ble_service_define+0x3b8>
10010c86:	2900      	cmp	r1, #0
10010c88:	d100      	bne.n	10010c8c <internal_at_ble_service_define+0x28>
10010c8a:	e1c7      	b.n	1001101c <internal_at_ble_service_define+0x3b8>
10010c8c:	2a00      	cmp	r2, #0
10010c8e:	d100      	bne.n	10010c92 <internal_at_ble_service_define+0x2e>
10010c90:	e1c4      	b.n	1001101c <internal_at_ble_service_define+0x3b8>
10010c92:	9b03      	ldr	r3, [sp, #12]
10010c94:	2b00      	cmp	r3, #0
10010c96:	d100      	bne.n	10010c9a <internal_at_ble_service_define+0x36>
10010c98:	e1c0      	b.n	1001101c <internal_at_ble_service_define+0x3b8>
10010c9a:	4bc9      	ldr	r3, [pc, #804]	; (10010fc0 <internal_at_ble_service_define+0x35c>)
10010c9c:	3004      	adds	r0, #4
10010c9e:	681e      	ldr	r6, [r3, #0]
10010ca0:	2e00      	cmp	r6, #0
10010ca2:	d100      	bne.n	10010ca6 <internal_at_ble_service_define+0x42>
10010ca4:	e1ba      	b.n	1001101c <internal_at_ble_service_define+0x3b8>
10010ca6:	2400      	movs	r4, #0
10010ca8:	4bc6      	ldr	r3, [pc, #792]	; (10010fc4 <internal_at_ble_service_define+0x360>)
10010caa:	8034      	strh	r4, [r6, #0]
10010cac:	881b      	ldrh	r3, [r3, #0]
10010cae:	1db7      	adds	r7, r6, #6
10010cb0:	1c21      	adds	r1, r4, #0
10010cb2:	2210      	movs	r2, #16
10010cb4:	8073      	strh	r3, [r6, #2]
10010cb6:	1c38      	adds	r0, r7, #0
10010cb8:	4bc3      	ldr	r3, [pc, #780]	; (10010fc8 <internal_at_ble_service_define+0x364>)
10010cba:	4798      	blx	r3
10010cbc:	7828      	ldrb	r0, [r5, #0]
10010cbe:	4bc3      	ldr	r3, [pc, #780]	; (10010fcc <internal_at_ble_service_define+0x368>)
10010cc0:	4798      	blx	r3
10010cc2:	1c69      	adds	r1, r5, #1
10010cc4:	1c02      	adds	r2, r0, #0
10010cc6:	4bc2      	ldr	r3, [pc, #776]	; (10010fd0 <internal_at_ble_service_define+0x36c>)
10010cc8:	1c38      	adds	r0, r7, #0
10010cca:	4798      	blx	r3
10010ccc:	2204      	movs	r2, #4
10010cce:	782b      	ldrb	r3, [r5, #0]
10010cd0:	9d02      	ldr	r5, [sp, #8]
10010cd2:	011b      	lsls	r3, r3, #4
10010cd4:	4313      	orrs	r3, r2
10010cd6:	9a04      	ldr	r2, [sp, #16]
10010cd8:	7174      	strb	r4, [r6, #5]
10010cda:	0192      	lsls	r2, r2, #6
10010cdc:	4313      	orrs	r3, r2
10010cde:	7133      	strb	r3, [r6, #4]
10010ce0:	2316      	movs	r3, #22
10010ce2:	9a06      	ldr	r2, [sp, #24]
10010ce4:	3512      	adds	r5, #18
10010ce6:	4353      	muls	r3, r2
10010ce8:	9a02      	ldr	r2, [sp, #8]
10010cea:	3312      	adds	r3, #18
10010cec:	18d7      	adds	r7, r2, r3
10010cee:	42bd      	cmp	r5, r7
10010cf0:	d00f      	beq.n	10010d12 <internal_at_ble_service_define+0xae>
10010cf2:	4bb8      	ldr	r3, [pc, #736]	; (10010fd4 <internal_at_ble_service_define+0x370>)
10010cf4:	8829      	ldrh	r1, [r5, #0]
10010cf6:	9300      	str	r3, [sp, #0]
10010cf8:	230e      	movs	r3, #14
10010cfa:	aa06      	add	r2, sp, #24
10010cfc:	189b      	adds	r3, r3, r2
10010cfe:	9301      	str	r3, [sp, #4]
10010d00:	4cb5      	ldr	r4, [pc, #724]	; (10010fd8 <internal_at_ble_service_define+0x374>)
10010d02:	1c30      	adds	r0, r6, #0
10010d04:	2201      	movs	r2, #1
10010d06:	2302      	movs	r3, #2
10010d08:	47a0      	blx	r4
10010d0a:	3516      	adds	r5, #22
10010d0c:	1e04      	subs	r4, r0, #0
10010d0e:	d0ee      	beq.n	10010cee <internal_at_ble_service_define+0x8a>
10010d10:	e183      	b.n	1001101a <internal_at_ble_service_define+0x3b6>
10010d12:	9f10      	ldr	r7, [sp, #64]	; 0x40
10010d14:	2300      	movs	r3, #0
10010d16:	3714      	adds	r7, #20
10010d18:	1c3d      	adds	r5, r7, #0
10010d1a:	9302      	str	r3, [sp, #8]
10010d1c:	9b02      	ldr	r3, [sp, #8]
10010d1e:	9a03      	ldr	r2, [sp, #12]
10010d20:	4293      	cmp	r3, r2
10010d22:	db00      	blt.n	10010d26 <internal_at_ble_service_define+0xc2>
10010d24:	e0bf      	b.n	10010ea6 <internal_at_ble_service_define+0x242>
10010d26:	4bad      	ldr	r3, [pc, #692]	; (10010fdc <internal_at_ble_service_define+0x378>)
10010d28:	aa06      	add	r2, sp, #24
10010d2a:	9300      	str	r3, [sp, #0]
10010d2c:	230e      	movs	r3, #14
10010d2e:	189b      	adds	r3, r3, r2
10010d30:	9301      	str	r3, [sp, #4]
10010d32:	4ca9      	ldr	r4, [pc, #676]	; (10010fd8 <internal_at_ble_service_define+0x374>)
10010d34:	1c30      	adds	r0, r6, #0
10010d36:	2104      	movs	r1, #4
10010d38:	2201      	movs	r2, #1
10010d3a:	2302      	movs	r3, #2
10010d3c:	47a0      	blx	r4
10010d3e:	1e04      	subs	r4, r0, #0
10010d40:	d000      	beq.n	10010d44 <internal_at_ble_service_define+0xe0>
10010d42:	e16a      	b.n	1001101a <internal_at_ble_service_define+0x3b6>
10010d44:	1c2b      	adds	r3, r5, #0
10010d46:	3b12      	subs	r3, #18
10010d48:	7b2c      	ldrb	r4, [r5, #12]
10010d4a:	781b      	ldrb	r3, [r3, #0]
10010d4c:	1c21      	adds	r1, r4, #0
10010d4e:	1c1a      	adds	r2, r3, #0
10010d50:	9304      	str	r3, [sp, #16]
10010d52:	8828      	ldrh	r0, [r5, #0]
10010d54:	4ba2      	ldr	r3, [pc, #648]	; (10010fe0 <internal_at_ble_service_define+0x37c>)
10010d56:	4798      	blx	r3
10010d58:	2303      	movs	r3, #3
10010d5a:	4023      	ands	r3, r4
10010d5c:	3b03      	subs	r3, #3
10010d5e:	4259      	negs	r1, r3
10010d60:	4159      	adcs	r1, r3
10010d62:	2301      	movs	r3, #1
10010d64:	08a4      	lsrs	r4, r4, #2
10010d66:	401c      	ands	r4, r3
10010d68:	430c      	orrs	r4, r1
10010d6a:	896b      	ldrh	r3, [r5, #10]
10010d6c:	03e4      	lsls	r4, r4, #15
10010d6e:	431c      	orrs	r4, r3
10010d70:	9007      	str	r0, [sp, #28]
10010d72:	4b96      	ldr	r3, [pc, #600]	; (10010fcc <internal_at_ble_service_define+0x368>)
10010d74:	9804      	ldr	r0, [sp, #16]
10010d76:	4798      	blx	r3
10010d78:	1c2a      	adds	r2, r5, #0
10010d7a:	3a11      	subs	r2, #17
10010d7c:	9200      	str	r2, [sp, #0]
10010d7e:	3a03      	subs	r2, #3
10010d80:	1c03      	adds	r3, r0, #0
10010d82:	9201      	str	r2, [sp, #4]
10010d84:	1c21      	adds	r1, r4, #0
10010d86:	1c30      	adds	r0, r6, #0
10010d88:	4c93      	ldr	r4, [pc, #588]	; (10010fd8 <internal_at_ble_service_define+0x374>)
10010d8a:	9a07      	ldr	r2, [sp, #28]
10010d8c:	47a0      	blx	r4
10010d8e:	1e04      	subs	r4, r0, #0
10010d90:	d000      	beq.n	10010d94 <internal_at_ble_service_define+0x130>
10010d92:	e142      	b.n	1001101a <internal_at_ble_service_define+0x3b6>
10010d94:	22c0      	movs	r2, #192	; 0xc0
10010d96:	882b      	ldrh	r3, [r5, #0]
10010d98:	0052      	lsls	r2, r2, #1
10010d9a:	4213      	tst	r3, r2
10010d9c:	d104      	bne.n	10010da8 <internal_at_ble_service_define+0x144>
10010d9e:	8aab      	ldrh	r3, [r5, #20]
10010da0:	9304      	str	r3, [sp, #16]
10010da2:	2b00      	cmp	r3, #0
10010da4:	d116      	bne.n	10010dd4 <internal_at_ble_service_define+0x170>
10010da6:	e03a      	b.n	10010e1e <internal_at_ble_service_define+0x1ba>
10010da8:	2201      	movs	r2, #1
10010daa:	09d9      	lsrs	r1, r3, #7
10010dac:	4011      	ands	r1, r2
10010dae:	05db      	lsls	r3, r3, #23
10010db0:	d501      	bpl.n	10010db6 <internal_at_ble_service_define+0x152>
10010db2:	2302      	movs	r3, #2
10010db4:	4319      	orrs	r1, r3
10010db6:	4b8b      	ldr	r3, [pc, #556]	; (10010fe4 <internal_at_ble_service_define+0x380>)
10010db8:	aa06      	add	r2, sp, #24
10010dba:	9300      	str	r3, [sp, #0]
10010dbc:	230e      	movs	r3, #14
10010dbe:	189b      	adds	r3, r3, r2
10010dc0:	9301      	str	r3, [sp, #4]
10010dc2:	4c85      	ldr	r4, [pc, #532]	; (10010fd8 <internal_at_ble_service_define+0x374>)
10010dc4:	0209      	lsls	r1, r1, #8
10010dc6:	1c30      	adds	r0, r6, #0
10010dc8:	2201      	movs	r2, #1
10010dca:	2302      	movs	r3, #2
10010dcc:	47a0      	blx	r4
10010dce:	1e04      	subs	r4, r0, #0
10010dd0:	d0e5      	beq.n	10010d9e <internal_at_ble_service_define+0x13a>
10010dd2:	e122      	b.n	1001101a <internal_at_ble_service_define+0x3b6>
10010dd4:	2380      	movs	r3, #128	; 0x80
10010dd6:	882a      	ldrh	r2, [r5, #0]
10010dd8:	7f2c      	ldrb	r4, [r5, #28]
10010dda:	005b      	lsls	r3, r3, #1
10010ddc:	401a      	ands	r2, r3
10010dde:	1c20      	adds	r0, r4, #0
10010de0:	2101      	movs	r1, #1
10010de2:	2a00      	cmp	r2, #0
10010de4:	d000      	beq.n	10010de8 <internal_at_ble_service_define+0x184>
10010de6:	1c0a      	adds	r2, r1, #0
10010de8:	4b7f      	ldr	r3, [pc, #508]	; (10010fe8 <internal_at_ble_service_define+0x384>)
10010dea:	4798      	blx	r3
10010dec:	2203      	movs	r2, #3
10010dee:	4022      	ands	r2, r4
10010df0:	3a03      	subs	r2, #3
10010df2:	4251      	negs	r1, r2
10010df4:	4151      	adcs	r1, r2
10010df6:	4b7d      	ldr	r3, [pc, #500]	; (10010fec <internal_at_ble_service_define+0x388>)
10010df8:	1c0a      	adds	r2, r1, #0
10010dfa:	9300      	str	r3, [sp, #0]
10010dfc:	1c2b      	adds	r3, r5, #0
10010dfe:	0764      	lsls	r4, r4, #29
10010e00:	0fe4      	lsrs	r4, r4, #31
10010e02:	4322      	orrs	r2, r4
10010e04:	03d2      	lsls	r2, r2, #15
10010e06:	4310      	orrs	r0, r2
10010e08:	3320      	adds	r3, #32
10010e0a:	b282      	uxth	r2, r0
10010e0c:	9301      	str	r3, [sp, #4]
10010e0e:	4c72      	ldr	r4, [pc, #456]	; (10010fd8 <internal_at_ble_service_define+0x374>)
10010e10:	1c30      	adds	r0, r6, #0
10010e12:	9904      	ldr	r1, [sp, #16]
10010e14:	2302      	movs	r3, #2
10010e16:	47a0      	blx	r4
10010e18:	1e04      	subs	r4, r0, #0
10010e1a:	d000      	beq.n	10010e1e <internal_at_ble_service_define+0x1ba>
10010e1c:	e0fd      	b.n	1001101a <internal_at_ble_service_define+0x3b6>
10010e1e:	2101      	movs	r1, #1
10010e20:	882b      	ldrh	r3, [r5, #0]
10010e22:	420b      	tst	r3, r1
10010e24:	d011      	beq.n	10010e4a <internal_at_ble_service_define+0x1e6>
10010e26:	7fa8      	ldrb	r0, [r5, #30]
10010e28:	4b6f      	ldr	r3, [pc, #444]	; (10010fe8 <internal_at_ble_service_define+0x384>)
10010e2a:	2200      	movs	r2, #0
10010e2c:	4798      	blx	r3
10010e2e:	4b70      	ldr	r3, [pc, #448]	; (10010ff0 <internal_at_ble_service_define+0x38c>)
10010e30:	1c02      	adds	r2, r0, #0
10010e32:	9300      	str	r3, [sp, #0]
10010e34:	1c2b      	adds	r3, r5, #0
10010e36:	3324      	adds	r3, #36	; 0x24
10010e38:	9301      	str	r3, [sp, #4]
10010e3a:	4c67      	ldr	r4, [pc, #412]	; (10010fd8 <internal_at_ble_service_define+0x374>)
10010e3c:	1c30      	adds	r0, r6, #0
10010e3e:	496d      	ldr	r1, [pc, #436]	; (10010ff4 <internal_at_ble_service_define+0x390>)
10010e40:	2302      	movs	r3, #2
10010e42:	47a0      	blx	r4
10010e44:	1e04      	subs	r4, r0, #0
10010e46:	d000      	beq.n	10010e4a <internal_at_ble_service_define+0x1e6>
10010e48:	e0e7      	b.n	1001101a <internal_at_ble_service_define+0x3b6>
10010e4a:	2330      	movs	r3, #48	; 0x30
10010e4c:	882a      	ldrh	r2, [r5, #0]
10010e4e:	421a      	tst	r2, r3
10010e50:	d012      	beq.n	10010e78 <internal_at_ble_service_define+0x214>
10010e52:	2101      	movs	r1, #1
10010e54:	7f68      	ldrb	r0, [r5, #29]
10010e56:	1c0a      	adds	r2, r1, #0
10010e58:	4b63      	ldr	r3, [pc, #396]	; (10010fe8 <internal_at_ble_service_define+0x384>)
10010e5a:	4798      	blx	r3
10010e5c:	4b66      	ldr	r3, [pc, #408]	; (10010ff8 <internal_at_ble_service_define+0x394>)
10010e5e:	1c02      	adds	r2, r0, #0
10010e60:	9300      	str	r3, [sp, #0]
10010e62:	1c2b      	adds	r3, r5, #0
10010e64:	3322      	adds	r3, #34	; 0x22
10010e66:	9301      	str	r3, [sp, #4]
10010e68:	4c5b      	ldr	r4, [pc, #364]	; (10010fd8 <internal_at_ble_service_define+0x374>)
10010e6a:	1c30      	adds	r0, r6, #0
10010e6c:	4961      	ldr	r1, [pc, #388]	; (10010ff4 <internal_at_ble_service_define+0x390>)
10010e6e:	2302      	movs	r3, #2
10010e70:	47a0      	blx	r4
10010e72:	1e04      	subs	r4, r0, #0
10010e74:	d000      	beq.n	10010e78 <internal_at_ble_service_define+0x214>
10010e76:	e0d0      	b.n	1001101a <internal_at_ble_service_define+0x3b6>
10010e78:	69ab      	ldr	r3, [r5, #24]
10010e7a:	2b00      	cmp	r3, #0
10010e7c:	d00e      	beq.n	10010e9c <internal_at_ble_service_define+0x238>
10010e7e:	4b5f      	ldr	r3, [pc, #380]	; (10010ffc <internal_at_ble_service_define+0x398>)
10010e80:	aa06      	add	r2, sp, #24
10010e82:	9300      	str	r3, [sp, #0]
10010e84:	230e      	movs	r3, #14
10010e86:	189b      	adds	r3, r3, r2
10010e88:	9301      	str	r3, [sp, #4]
10010e8a:	4c53      	ldr	r4, [pc, #332]	; (10010fd8 <internal_at_ble_service_define+0x374>)
10010e8c:	1c30      	adds	r0, r6, #0
10010e8e:	2107      	movs	r1, #7
10010e90:	2201      	movs	r2, #1
10010e92:	2302      	movs	r3, #2
10010e94:	47a0      	blx	r4
10010e96:	1e04      	subs	r4, r0, #0
10010e98:	d000      	beq.n	10010e9c <internal_at_ble_service_define+0x238>
10010e9a:	e0be      	b.n	1001101a <internal_at_ble_service_define+0x3b6>
10010e9c:	9b02      	ldr	r3, [sp, #8]
10010e9e:	353c      	adds	r5, #60	; 0x3c
10010ea0:	3301      	adds	r3, #1
10010ea2:	9302      	str	r3, [sp, #8]
10010ea4:	e73a      	b.n	10010d1c <internal_at_ble_service_define+0xb8>
10010ea6:	1c30      	adds	r0, r6, #0
10010ea8:	4b55      	ldr	r3, [pc, #340]	; (10011000 <internal_at_ble_service_define+0x39c>)
10010eaa:	4798      	blx	r3
10010eac:	1e04      	subs	r4, r0, #0
10010eae:	d000      	beq.n	10010eb2 <internal_at_ble_service_define+0x24e>
10010eb0:	e0b3      	b.n	1001101a <internal_at_ble_service_define+0x3b6>
10010eb2:	8833      	ldrh	r3, [r6, #0]
10010eb4:	9a05      	ldr	r2, [sp, #20]
10010eb6:	8013      	strh	r3, [r2, #0]
10010eb8:	8836      	ldrh	r6, [r6, #0]
10010eba:	9b06      	ldr	r3, [sp, #24]
10010ebc:	9a03      	ldr	r2, [sp, #12]
10010ebe:	18f6      	adds	r6, r6, r3
10010ec0:	b2b3      	uxth	r3, r6
10010ec2:	9302      	str	r3, [sp, #8]
10010ec4:	233c      	movs	r3, #60	; 0x3c
10010ec6:	4353      	muls	r3, r2
10010ec8:	9a10      	ldr	r2, [sp, #64]	; 0x40
10010eca:	3314      	adds	r3, #20
10010ecc:	18d3      	adds	r3, r2, r3
10010ece:	9304      	str	r3, [sp, #16]
10010ed0:	9b04      	ldr	r3, [sp, #16]
10010ed2:	429f      	cmp	r7, r3
10010ed4:	d100      	bne.n	10010ed8 <internal_at_ble_service_define+0x274>
10010ed6:	e0a0      	b.n	1001101a <internal_at_ble_service_define+0x3b6>
10010ed8:	9b02      	ldr	r3, [sp, #8]
10010eda:	1c9d      	adds	r5, r3, #2
10010edc:	1c3b      	adds	r3, r7, #0
10010ede:	b2ad      	uxth	r5, r5
10010ee0:	3b14      	subs	r3, #20
10010ee2:	801d      	strh	r5, [r3, #0]
10010ee4:	9303      	str	r3, [sp, #12]
10010ee6:	893b      	ldrh	r3, [r7, #8]
10010ee8:	2b00      	cmp	r3, #0
10010eea:	d108      	bne.n	10010efe <internal_at_ble_service_define+0x29a>
10010eec:	23c0      	movs	r3, #192	; 0xc0
10010eee:	883a      	ldrh	r2, [r7, #0]
10010ef0:	005b      	lsls	r3, r3, #1
10010ef2:	421a      	tst	r2, r3
10010ef4:	d026      	beq.n	10010f44 <internal_at_ble_service_define+0x2e0>
10010ef6:	9e02      	ldr	r6, [sp, #8]
10010ef8:	3603      	adds	r6, #3
10010efa:	b2b5      	uxth	r5, r6
10010efc:	e022      	b.n	10010f44 <internal_at_ble_service_define+0x2e0>
10010efe:	2103      	movs	r1, #3
10010f00:	7b3b      	ldrb	r3, [r7, #12]
10010f02:	4019      	ands	r1, r3
10010f04:	3903      	subs	r1, #3
10010f06:	424a      	negs	r2, r1
10010f08:	414a      	adcs	r2, r1
10010f0a:	0759      	lsls	r1, r3, #29
10010f0c:	0fc9      	lsrs	r1, r1, #31
10010f0e:	4311      	orrs	r1, r2
10010f10:	03c9      	lsls	r1, r1, #15
10010f12:	897a      	ldrh	r2, [r7, #10]
10010f14:	2900      	cmp	r1, #0
10010f16:	d007      	beq.n	10010f28 <internal_at_ble_service_define+0x2c4>
10010f18:	6879      	ldr	r1, [r7, #4]
10010f1a:	2900      	cmp	r1, #0
10010f1c:	d100      	bne.n	10010f20 <internal_at_ble_service_define+0x2bc>
10010f1e:	4939      	ldr	r1, [pc, #228]	; (10011004 <internal_at_ble_service_define+0x3a0>)
10010f20:	1c28      	adds	r0, r5, #0
10010f22:	4e39      	ldr	r6, [pc, #228]	; (10011008 <internal_at_ble_service_define+0x3a4>)
10010f24:	47b0      	blx	r6
10010f26:	e00a      	b.n	10010f3e <internal_at_ble_service_define+0x2da>
10010f28:	1c28      	adds	r0, r5, #0
10010f2a:	4e37      	ldr	r6, [pc, #220]	; (10011008 <internal_at_ble_service_define+0x3a4>)
10010f2c:	47b0      	blx	r6
10010f2e:	2800      	cmp	r0, #0
10010f30:	d172      	bne.n	10011018 <internal_at_ble_service_define+0x3b4>
10010f32:	9b03      	ldr	r3, [sp, #12]
10010f34:	8939      	ldrh	r1, [r7, #8]
10010f36:	8818      	ldrh	r0, [r3, #0]
10010f38:	687a      	ldr	r2, [r7, #4]
10010f3a:	4b34      	ldr	r3, [pc, #208]	; (1001100c <internal_at_ble_service_define+0x3a8>)
10010f3c:	4798      	blx	r3
10010f3e:	2800      	cmp	r0, #0
10010f40:	d0d4      	beq.n	10010eec <internal_at_ble_service_define+0x288>
10010f42:	e069      	b.n	10011018 <internal_at_ble_service_define+0x3b4>
10010f44:	8abb      	ldrh	r3, [r7, #20]
10010f46:	2b00      	cmp	r3, #0
10010f48:	d00a      	beq.n	10010f60 <internal_at_ble_service_define+0x2fc>
10010f4a:	3501      	adds	r5, #1
10010f4c:	b2ad      	uxth	r5, r5
10010f4e:	843d      	strh	r5, [r7, #32]
10010f50:	7f39      	ldrb	r1, [r7, #28]
10010f52:	8afb      	ldrh	r3, [r7, #22]
10010f54:	1c28      	adds	r0, r5, #0
10010f56:	693a      	ldr	r2, [r7, #16]
10010f58:	4e2d      	ldr	r6, [pc, #180]	; (10011010 <internal_at_ble_service_define+0x3ac>)
10010f5a:	47b0      	blx	r6
10010f5c:	2800      	cmp	r0, #0
10010f5e:	d15b      	bne.n	10011018 <internal_at_ble_service_define+0x3b4>
10010f60:	883b      	ldrh	r3, [r7, #0]
10010f62:	07db      	lsls	r3, r3, #31
10010f64:	d50d      	bpl.n	10010f82 <internal_at_ble_service_define+0x31e>
10010f66:	2200      	movs	r2, #0
10010f68:	3501      	adds	r5, #1
10010f6a:	b2ad      	uxth	r5, r5
10010f6c:	a909      	add	r1, sp, #36	; 0x24
10010f6e:	84bd      	strh	r5, [r7, #36]	; 0x24
10010f70:	7fbb      	ldrb	r3, [r7, #30]
10010f72:	1c28      	adds	r0, r5, #0
10010f74:	700a      	strb	r2, [r1, #0]
10010f76:	704a      	strb	r2, [r1, #1]
10010f78:	4e23      	ldr	r6, [pc, #140]	; (10011008 <internal_at_ble_service_define+0x3a4>)
10010f7a:	3202      	adds	r2, #2
10010f7c:	47b0      	blx	r6
10010f7e:	2800      	cmp	r0, #0
10010f80:	d14a      	bne.n	10011018 <internal_at_ble_service_define+0x3b4>
10010f82:	2330      	movs	r3, #48	; 0x30
10010f84:	883a      	ldrh	r2, [r7, #0]
10010f86:	421a      	tst	r2, r3
10010f88:	d00d      	beq.n	10010fa6 <internal_at_ble_service_define+0x342>
10010f8a:	2200      	movs	r2, #0
10010f8c:	3501      	adds	r5, #1
10010f8e:	b2ad      	uxth	r5, r5
10010f90:	a909      	add	r1, sp, #36	; 0x24
10010f92:	847d      	strh	r5, [r7, #34]	; 0x22
10010f94:	7f7b      	ldrb	r3, [r7, #29]
10010f96:	1c28      	adds	r0, r5, #0
10010f98:	700a      	strb	r2, [r1, #0]
10010f9a:	704a      	strb	r2, [r1, #1]
10010f9c:	4e1a      	ldr	r6, [pc, #104]	; (10011008 <internal_at_ble_service_define+0x3a4>)
10010f9e:	3202      	adds	r2, #2
10010fa0:	47b0      	blx	r6
10010fa2:	2800      	cmp	r0, #0
10010fa4:	d138      	bne.n	10011018 <internal_at_ble_service_define+0x3b4>
10010fa6:	69b9      	ldr	r1, [r7, #24]
10010fa8:	2900      	cmp	r1, #0
10010faa:	d006      	beq.n	10010fba <internal_at_ble_service_define+0x356>
10010fac:	3501      	adds	r5, #1
10010fae:	b2ad      	uxth	r5, r5
10010fb0:	1c28      	adds	r0, r5, #0
10010fb2:	4b18      	ldr	r3, [pc, #96]	; (10011014 <internal_at_ble_service_define+0x3b0>)
10010fb4:	4798      	blx	r3
10010fb6:	2800      	cmp	r0, #0
10010fb8:	d12e      	bne.n	10011018 <internal_at_ble_service_define+0x3b4>
10010fba:	373c      	adds	r7, #60	; 0x3c
10010fbc:	9502      	str	r5, [sp, #8]
10010fbe:	e787      	b.n	10010ed0 <internal_at_ble_service_define+0x26c>
10010fc0:	10019e2c 	.word	0x10019e2c
10010fc4:	1001ad20 	.word	0x1001ad20
10010fc8:	10015115 	.word	0x10015115
10010fcc:	10010999 	.word	0x10010999
10010fd0:	10015103 	.word	0x10015103
10010fd4:	10018183 	.word	0x10018183
10010fd8:	10012e25 	.word	0x10012e25
10010fdc:	10018185 	.word	0x10018185
10010fe0:	10010a65 	.word	0x10010a65
10010fe4:	10018181 	.word	0x10018181
10010fe8:	10010a0d 	.word	0x10010a0d
10010fec:	1001817d 	.word	0x1001817d
10010ff0:	1001817f 	.word	0x1001817f
10010ff4:	00008002 	.word	0x00008002
10010ff8:	10018179 	.word	0x10018179
10010ffc:	1001817b 	.word	0x1001817b
10011000:	10012d19 	.word	0x10012d19
10011004:	10019e18 	.word	0x10019e18
10011008:	10010b2d 	.word	0x10010b2d
1001100c:	10012e95 	.word	0x10012e95
10011010:	10010be5 	.word	0x10010be5
10011014:	10010b01 	.word	0x10010b01
10011018:	1c04      	adds	r4, r0, #0
1001101a:	1c20      	adds	r0, r4, #0
1001101c:	b00b      	add	sp, #44	; 0x2c
1001101e:	bdf0      	pop	{r4, r5, r6, r7, pc}

10011020 <initi_gatt_server_module>:
10011020:	2300      	movs	r3, #0
10011022:	4a07      	ldr	r2, [pc, #28]	; (10011040 <initi_gatt_server_module+0x20>)
10011024:	7013      	strb	r3, [r2, #0]
10011026:	4a07      	ldr	r2, [pc, #28]	; (10011044 <initi_gatt_server_module+0x24>)
10011028:	6013      	str	r3, [r2, #0]
1001102a:	4a07      	ldr	r2, [pc, #28]	; (10011048 <initi_gatt_server_module+0x28>)
1001102c:	6013      	str	r3, [r2, #0]
1001102e:	4a07      	ldr	r2, [pc, #28]	; (1001104c <initi_gatt_server_module+0x2c>)
10011030:	6013      	str	r3, [r2, #0]
10011032:	4a07      	ldr	r2, [pc, #28]	; (10011050 <initi_gatt_server_module+0x30>)
10011034:	6013      	str	r3, [r2, #0]
10011036:	4a07      	ldr	r2, [pc, #28]	; (10011054 <initi_gatt_server_module+0x34>)
10011038:	6013      	str	r3, [r2, #0]
1001103a:	4a07      	ldr	r2, [pc, #28]	; (10011058 <initi_gatt_server_module+0x38>)
1001103c:	6013      	str	r3, [r2, #0]
1001103e:	4770      	bx	lr
10011040:	10019e18 	.word	0x10019e18
10011044:	10019e28 	.word	0x10019e28
10011048:	10019e24 	.word	0x10019e24
1001104c:	10019e14 	.word	0x10019e14
10011050:	10019e20 	.word	0x10019e20
10011054:	10019e1c 	.word	0x10019e1c
10011058:	10019e2c 	.word	0x10019e2c

1001105c <db_init>:
1001105c:	4b0a      	ldr	r3, [pc, #40]	; (10011088 <db_init+0x2c>)
1001105e:	4a0b      	ldr	r2, [pc, #44]	; (1001108c <db_init+0x30>)
10011060:	6018      	str	r0, [r3, #0]
10011062:	084b      	lsrs	r3, r1, #1
10011064:	6013      	str	r3, [r2, #0]
10011066:	4a0a      	ldr	r2, [pc, #40]	; (10011090 <db_init+0x34>)
10011068:	18c3      	adds	r3, r0, r3
1001106a:	6013      	str	r3, [r2, #0]
1001106c:	4a09      	ldr	r2, [pc, #36]	; (10011094 <db_init+0x38>)
1001106e:	1841      	adds	r1, r0, r1
10011070:	6013      	str	r3, [r2, #0]
10011072:	2303      	movs	r3, #3
10011074:	2200      	movs	r2, #0
10011076:	3103      	adds	r1, #3
10011078:	4399      	bics	r1, r3
1001107a:	4b07      	ldr	r3, [pc, #28]	; (10011098 <db_init+0x3c>)
1001107c:	3904      	subs	r1, #4
1001107e:	6019      	str	r1, [r3, #0]
10011080:	4b06      	ldr	r3, [pc, #24]	; (1001109c <db_init+0x40>)
10011082:	601a      	str	r2, [r3, #0]
10011084:	4770      	bx	lr
10011086:	46c0      	nop			; (mov r8, r8)
10011088:	10019e2c 	.word	0x10019e2c
1001108c:	10019e28 	.word	0x10019e28
10011090:	10019e14 	.word	0x10019e14
10011094:	10019e20 	.word	0x10019e20
10011098:	10019e1c 	.word	0x10019e1c
1001109c:	10019e24 	.word	0x10019e24

100110a0 <at_ble_primary_service_define>:
100110a0:	b530      	push	{r4, r5, lr}
100110a2:	b085      	sub	sp, #20
100110a4:	ac08      	add	r4, sp, #32
100110a6:	cc20      	ldmia	r4!, {r5}
100110a8:	8824      	ldrh	r4, [r4, #0]
100110aa:	9500      	str	r5, [sp, #0]
100110ac:	9401      	str	r4, [sp, #4]
100110ae:	2401      	movs	r4, #1
100110b0:	9402      	str	r4, [sp, #8]
100110b2:	4c02      	ldr	r4, [pc, #8]	; (100110bc <at_ble_primary_service_define+0x1c>)
100110b4:	47a0      	blx	r4
100110b6:	b005      	add	sp, #20
100110b8:	bd30      	pop	{r4, r5, pc}
100110ba:	46c0      	nop			; (mov r8, r8)
100110bc:	10010c65 	.word	0x10010c65

100110c0 <at_ble_characteristic_value_set>:
100110c0:	b570      	push	{r4, r5, r6, lr}
100110c2:	4b0b      	ldr	r3, [pc, #44]	; (100110f0 <at_ble_characteristic_value_set+0x30>)
100110c4:	1c06      	adds	r6, r0, #0
100110c6:	1c0c      	adds	r4, r1, #0
100110c8:	1c15      	adds	r5, r2, #0
100110ca:	4798      	blx	r3
100110cc:	2800      	cmp	r0, #0
100110ce:	d008      	beq.n	100110e2 <at_ble_characteristic_value_set+0x22>
100110d0:	6880      	ldr	r0, [r0, #8]
100110d2:	2800      	cmp	r0, #0
100110d4:	d005      	beq.n	100110e2 <at_ble_characteristic_value_set+0x22>
100110d6:	1c21      	adds	r1, r4, #0
100110d8:	1c2a      	adds	r2, r5, #0
100110da:	4b06      	ldr	r3, [pc, #24]	; (100110f4 <at_ble_characteristic_value_set+0x34>)
100110dc:	4798      	blx	r3
100110de:	2000      	movs	r0, #0
100110e0:	e004      	b.n	100110ec <at_ble_characteristic_value_set+0x2c>
100110e2:	1c30      	adds	r0, r6, #0
100110e4:	1c29      	adds	r1, r5, #0
100110e6:	1c22      	adds	r2, r4, #0
100110e8:	4b03      	ldr	r3, [pc, #12]	; (100110f8 <at_ble_characteristic_value_set+0x38>)
100110ea:	4798      	blx	r3
100110ec:	bd70      	pop	{r4, r5, r6, pc}
100110ee:	46c0      	nop			; (mov r8, r8)
100110f0:	100109cd 	.word	0x100109cd
100110f4:	10015103 	.word	0x10015103
100110f8:	10012e95 	.word	0x10012e95

100110fc <at_ble_characteristic_value_get>:
100110fc:	b570      	push	{r4, r5, r6, lr}
100110fe:	4b0c      	ldr	r3, [pc, #48]	; (10011130 <at_ble_characteristic_value_get+0x34>)
10011100:	1c06      	adds	r6, r0, #0
10011102:	1c0c      	adds	r4, r1, #0
10011104:	1c15      	adds	r5, r2, #0
10011106:	4798      	blx	r3
10011108:	2800      	cmp	r0, #0
1001110a:	d00b      	beq.n	10011124 <at_ble_characteristic_value_get+0x28>
1001110c:	6883      	ldr	r3, [r0, #8]
1001110e:	2b00      	cmp	r3, #0
10011110:	d008      	beq.n	10011124 <at_ble_characteristic_value_get+0x28>
10011112:	8883      	ldrh	r3, [r0, #4]
10011114:	802b      	strh	r3, [r5, #0]
10011116:	8882      	ldrh	r2, [r0, #4]
10011118:	6881      	ldr	r1, [r0, #8]
1001111a:	4b06      	ldr	r3, [pc, #24]	; (10011134 <at_ble_characteristic_value_get+0x38>)
1001111c:	1c20      	adds	r0, r4, #0
1001111e:	4798      	blx	r3
10011120:	2000      	movs	r0, #0
10011122:	e004      	b.n	1001112e <at_ble_characteristic_value_get+0x32>
10011124:	1c30      	adds	r0, r6, #0
10011126:	1c29      	adds	r1, r5, #0
10011128:	1c22      	adds	r2, r4, #0
1001112a:	4b03      	ldr	r3, [pc, #12]	; (10011138 <at_ble_characteristic_value_get+0x3c>)
1001112c:	4798      	blx	r3
1001112e:	bd70      	pop	{r4, r5, r6, pc}
10011130:	100109cd 	.word	0x100109cd
10011134:	10015103 	.word	0x10015103
10011138:	10012f21 	.word	0x10012f21

1001113c <at_ble_write_authorize_reply>:
1001113c:	b5f0      	push	{r4, r5, r6, r7, lr}
1001113e:	b085      	sub	sp, #20
10011140:	1c04      	adds	r4, r0, #0
10011142:	9101      	str	r1, [sp, #4]
10011144:	2900      	cmp	r1, #0
10011146:	d128      	bne.n	1001119a <at_ble_write_authorize_reply+0x5e>
10011148:	8843      	ldrh	r3, [r0, #2]
1001114a:	1c27      	adds	r7, r4, #0
1001114c:	9300      	str	r3, [sp, #0]
1001114e:	1c18      	adds	r0, r3, #0
10011150:	4b16      	ldr	r3, [pc, #88]	; (100111ac <at_ble_write_authorize_reply+0x70>)
10011152:	4798      	blx	r3
10011154:	3708      	adds	r7, #8
10011156:	2800      	cmp	r0, #0
10011158:	d009      	beq.n	1001116e <at_ble_write_authorize_reply+0x32>
1001115a:	6880      	ldr	r0, [r0, #8]
1001115c:	2800      	cmp	r0, #0
1001115e:	d006      	beq.n	1001116e <at_ble_write_authorize_reply+0x32>
10011160:	88a3      	ldrh	r3, [r4, #4]
10011162:	88e2      	ldrh	r2, [r4, #6]
10011164:	18c0      	adds	r0, r0, r3
10011166:	1c39      	adds	r1, r7, #0
10011168:	4b11      	ldr	r3, [pc, #68]	; (100111b0 <at_ble_write_authorize_reply+0x74>)
1001116a:	4798      	blx	r3
1001116c:	e015      	b.n	1001119a <at_ble_write_authorize_reply+0x5e>
1001116e:	ab02      	add	r3, sp, #8
10011170:	1d9e      	adds	r6, r3, #6
10011172:	2300      	movs	r3, #0
10011174:	4d0f      	ldr	r5, [pc, #60]	; (100111b4 <at_ble_write_authorize_reply+0x78>)
10011176:	8033      	strh	r3, [r6, #0]
10011178:	6829      	ldr	r1, [r5, #0]
1001117a:	1c32      	adds	r2, r6, #0
1001117c:	4b0e      	ldr	r3, [pc, #56]	; (100111b8 <at_ble_write_authorize_reply+0x7c>)
1001117e:	9800      	ldr	r0, [sp, #0]
10011180:	4798      	blx	r3
10011182:	682b      	ldr	r3, [r5, #0]
10011184:	88a0      	ldrh	r0, [r4, #4]
10011186:	88e2      	ldrh	r2, [r4, #6]
10011188:	1818      	adds	r0, r3, r0
1001118a:	1c39      	adds	r1, r7, #0
1001118c:	4b08      	ldr	r3, [pc, #32]	; (100111b0 <at_ble_write_authorize_reply+0x74>)
1001118e:	4798      	blx	r3
10011190:	8860      	ldrh	r0, [r4, #2]
10011192:	8832      	ldrh	r2, [r6, #0]
10011194:	6829      	ldr	r1, [r5, #0]
10011196:	4b09      	ldr	r3, [pc, #36]	; (100111bc <at_ble_write_authorize_reply+0x80>)
10011198:	4798      	blx	r3
1001119a:	8860      	ldrh	r0, [r4, #2]
1001119c:	8821      	ldrh	r1, [r4, #0]
1001119e:	9a01      	ldr	r2, [sp, #4]
100111a0:	4b07      	ldr	r3, [pc, #28]	; (100111c0 <at_ble_write_authorize_reply+0x84>)
100111a2:	4798      	blx	r3
100111a4:	2000      	movs	r0, #0
100111a6:	b005      	add	sp, #20
100111a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
100111aa:	46c0      	nop			; (mov r8, r8)
100111ac:	100109cd 	.word	0x100109cd
100111b0:	10015103 	.word	0x10015103
100111b4:	10018388 	.word	0x10018388
100111b8:	100110fd 	.word	0x100110fd
100111bc:	100110c1 	.word	0x100110c1
100111c0:	10012999 	.word	0x10012999

100111c4 <gatts_handle_read_req>:
100111c4:	b538      	push	{r3, r4, r5, lr}
100111c6:	1c0c      	adds	r4, r1, #0
100111c8:	4b07      	ldr	r3, [pc, #28]	; (100111e8 <gatts_handle_read_req+0x24>)
100111ca:	4798      	blx	r3
100111cc:	8865      	ldrh	r5, [r4, #2]
100111ce:	4b07      	ldr	r3, [pc, #28]	; (100111ec <gatts_handle_read_req+0x28>)
100111d0:	1c28      	adds	r0, r5, #0
100111d2:	4798      	blx	r3
100111d4:	7883      	ldrb	r3, [r0, #2]
100111d6:	2026      	movs	r0, #38	; 0x26
100111d8:	07db      	lsls	r3, r3, #31
100111da:	d404      	bmi.n	100111e6 <gatts_handle_read_req+0x22>
100111dc:	8820      	ldrh	r0, [r4, #0]
100111de:	1c29      	adds	r1, r5, #0
100111e0:	4b03      	ldr	r3, [pc, #12]	; (100111f0 <gatts_handle_read_req+0x2c>)
100111e2:	4798      	blx	r3
100111e4:	203b      	movs	r0, #59	; 0x3b
100111e6:	bd38      	pop	{r3, r4, r5, pc}
100111e8:	100128dd 	.word	0x100128dd
100111ec:	100109cd 	.word	0x100109cd
100111f0:	10010c35 	.word	0x10010c35

100111f4 <gatts_handle_att_info_req>:
100111f4:	b538      	push	{r3, r4, r5, lr}
100111f6:	1c0d      	adds	r5, r1, #0
100111f8:	4b0a      	ldr	r3, [pc, #40]	; (10011224 <gatts_handle_att_info_req+0x30>)
100111fa:	1c14      	adds	r4, r2, #0
100111fc:	4798      	blx	r3
100111fe:	882d      	ldrh	r5, [r5, #0]
10011200:	4b09      	ldr	r3, [pc, #36]	; (10011228 <gatts_handle_att_info_req+0x34>)
10011202:	1c28      	adds	r0, r5, #0
10011204:	4798      	blx	r3
10011206:	0a22      	lsrs	r2, r4, #8
10011208:	1c03      	adds	r3, r0, #0
1001120a:	4c08      	ldr	r4, [pc, #32]	; (1001122c <gatts_handle_att_info_req+0x38>)
1001120c:	b291      	uxth	r1, r2
1001120e:	2800      	cmp	r0, #0
10011210:	d003      	beq.n	1001121a <gatts_handle_att_info_req+0x26>
10011212:	8882      	ldrh	r2, [r0, #4]
10011214:	2300      	movs	r3, #0
10011216:	1c28      	adds	r0, r5, #0
10011218:	e001      	b.n	1001121e <gatts_handle_att_info_req+0x2a>
1001121a:	1c28      	adds	r0, r5, #0
1001121c:	2201      	movs	r2, #1
1001121e:	47a0      	blx	r4
10011220:	203b      	movs	r0, #59	; 0x3b
10011222:	bd38      	pop	{r3, r4, r5, pc}
10011224:	10012921 	.word	0x10012921
10011228:	100109cd 	.word	0x100109cd
1001122c:	100129dd 	.word	0x100129dd

10011230 <gatts_handle_write_req>:
10011230:	b510      	push	{r4, lr}
10011232:	1c14      	adds	r4, r2, #0
10011234:	4b07      	ldr	r3, [pc, #28]	; (10011254 <gatts_handle_write_req+0x24>)
10011236:	4798      	blx	r3
10011238:	4b07      	ldr	r3, [pc, #28]	; (10011258 <gatts_handle_write_req+0x28>)
1001123a:	8860      	ldrh	r0, [r4, #2]
1001123c:	4798      	blx	r3
1001123e:	2302      	movs	r3, #2
10011240:	7881      	ldrb	r1, [r0, #2]
10011242:	2022      	movs	r0, #34	; 0x22
10011244:	4019      	ands	r1, r3
10011246:	d103      	bne.n	10011250 <gatts_handle_write_req+0x20>
10011248:	1c20      	adds	r0, r4, #0
1001124a:	4b04      	ldr	r3, [pc, #16]	; (1001125c <gatts_handle_write_req+0x2c>)
1001124c:	4798      	blx	r3
1001124e:	201f      	movs	r0, #31
10011250:	bd10      	pop	{r4, pc}
10011252:	46c0      	nop			; (mov r8, r8)
10011254:	100128e9 	.word	0x100128e9
10011258:	100109cd 	.word	0x100109cd
1001125c:	1001113d 	.word	0x1001113d

10011260 <at_ble_notification_send>:
10011260:	b5f0      	push	{r4, r5, r6, r7, lr}
10011262:	4d17      	ldr	r5, [pc, #92]	; (100112c0 <at_ble_notification_send+0x60>)
10011264:	4c17      	ldr	r4, [pc, #92]	; (100112c4 <at_ble_notification_send+0x64>)
10011266:	682a      	ldr	r2, [r5, #0]
10011268:	44a5      	add	sp, r4
1001126a:	23d2      	movs	r3, #210	; 0xd2
1001126c:	2a04      	cmp	r2, #4
1001126e:	d822      	bhi.n	100112b6 <at_ble_notification_send+0x56>
10011270:	1c06      	adds	r6, r0, #0
10011272:	4b15      	ldr	r3, [pc, #84]	; (100112c8 <at_ble_notification_send+0x68>)
10011274:	1c08      	adds	r0, r1, #0
10011276:	1c0c      	adds	r4, r1, #0
10011278:	4798      	blx	r3
1001127a:	2800      	cmp	r0, #0
1001127c:	d008      	beq.n	10011290 <at_ble_notification_send+0x30>
1001127e:	6883      	ldr	r3, [r0, #8]
10011280:	2b00      	cmp	r3, #0
10011282:	d005      	beq.n	10011290 <at_ble_notification_send+0x30>
10011284:	8882      	ldrh	r2, [r0, #4]
10011286:	1c21      	adds	r1, r4, #0
10011288:	9200      	str	r2, [sp, #0]
1001128a:	2012      	movs	r0, #18
1001128c:	1c32      	adds	r2, r6, #0
1001128e:	e00c      	b.n	100112aa <at_ble_notification_send+0x4a>
10011290:	270e      	movs	r7, #14
10011292:	446f      	add	r7, sp
10011294:	1c39      	adds	r1, r7, #0
10011296:	aa04      	add	r2, sp, #16
10011298:	4b0c      	ldr	r3, [pc, #48]	; (100112cc <at_ble_notification_send+0x6c>)
1001129a:	1c20      	adds	r0, r4, #0
1001129c:	4798      	blx	r3
1001129e:	2012      	movs	r0, #18
100112a0:	1c21      	adds	r1, r4, #0
100112a2:	1c32      	adds	r2, r6, #0
100112a4:	883b      	ldrh	r3, [r7, #0]
100112a6:	9300      	str	r3, [sp, #0]
100112a8:	ab04      	add	r3, sp, #16
100112aa:	4c09      	ldr	r4, [pc, #36]	; (100112d0 <at_ble_notification_send+0x70>)
100112ac:	47a0      	blx	r4
100112ae:	682b      	ldr	r3, [r5, #0]
100112b0:	3301      	adds	r3, #1
100112b2:	602b      	str	r3, [r5, #0]
100112b4:	2300      	movs	r3, #0
100112b6:	1c18      	adds	r0, r3, #0
100112b8:	2385      	movs	r3, #133	; 0x85
100112ba:	009b      	lsls	r3, r3, #2
100112bc:	449d      	add	sp, r3
100112be:	bdf0      	pop	{r4, r5, r6, r7, pc}
100112c0:	10019eb8 	.word	0x10019eb8
100112c4:	fffffdec 	.word	0xfffffdec
100112c8:	100109cd 	.word	0x100109cd
100112cc:	10012f21 	.word	0x10012f21
100112d0:	10012a25 	.word	0x10012a25

100112d4 <init_l2cc_task_module>:
100112d4:	220a      	movs	r2, #10
100112d6:	4b01      	ldr	r3, [pc, #4]	; (100112dc <init_l2cc_task_module+0x8>)
100112d8:	701a      	strb	r2, [r3, #0]
100112da:	4770      	bx	lr
100112dc:	10018384 	.word	0x10018384

100112e0 <l2cc_data_send_rsp_handler>:
100112e0:	b510      	push	{r4, lr}
100112e2:	7802      	ldrb	r2, [r0, #0]
100112e4:	700a      	strb	r2, [r1, #0]
100112e6:	7883      	ldrb	r3, [r0, #2]
100112e8:	7844      	ldrb	r4, [r0, #1]
100112ea:	021b      	lsls	r3, r3, #8
100112ec:	4323      	orrs	r3, r4
100112ee:	804b      	strh	r3, [r1, #2]
100112f0:	7903      	ldrb	r3, [r0, #4]
100112f2:	78c0      	ldrb	r0, [r0, #3]
100112f4:	021b      	lsls	r3, r3, #8
100112f6:	4303      	orrs	r3, r0
100112f8:	808b      	strh	r3, [r1, #4]
100112fa:	2a00      	cmp	r2, #0
100112fc:	d103      	bne.n	10011306 <l2cc_data_send_rsp_handler+0x26>
100112fe:	4a02      	ldr	r2, [pc, #8]	; (10011308 <l2cc_data_send_rsp_handler+0x28>)
10011300:	7813      	ldrb	r3, [r2, #0]
10011302:	3301      	adds	r3, #1
10011304:	7013      	strb	r3, [r2, #0]
10011306:	bd10      	pop	{r4, pc}
10011308:	10018384 	.word	0x10018384

1001130c <l2cc_data_received_handler>:
1001130c:	b508      	push	{r3, lr}
1001130e:	1c03      	adds	r3, r0, #0
10011310:	7842      	ldrb	r2, [r0, #1]
10011312:	7800      	ldrb	r0, [r0, #0]
10011314:	0212      	lsls	r2, r2, #8
10011316:	4302      	orrs	r2, r0
10011318:	800a      	strh	r2, [r1, #0]
1001131a:	78da      	ldrb	r2, [r3, #3]
1001131c:	7898      	ldrb	r0, [r3, #2]
1001131e:	0212      	lsls	r2, r2, #8
10011320:	4302      	orrs	r2, r0
10011322:	804a      	strh	r2, [r1, #2]
10011324:	795a      	ldrb	r2, [r3, #5]
10011326:	7918      	ldrb	r0, [r3, #4]
10011328:	0212      	lsls	r2, r2, #8
1001132a:	4302      	orrs	r2, r0
1001132c:	808a      	strh	r2, [r1, #4]
1001132e:	1d88      	adds	r0, r1, #6
10011330:	1d99      	adds	r1, r3, #6
10011332:	4b01      	ldr	r3, [pc, #4]	; (10011338 <l2cc_data_received_handler+0x2c>)
10011334:	4798      	blx	r3
10011336:	bd08      	pop	{r3, pc}
10011338:	10015103 	.word	0x10015103

1001133c <at_ble_authenticate>:
1001133c:	b5f0      	push	{r4, r5, r6, r7, lr}
1001133e:	1c0c      	adds	r4, r1, #0
10011340:	211f      	movs	r1, #31
10011342:	b08b      	sub	sp, #44	; 0x2c
10011344:	9307      	str	r3, [sp, #28]
10011346:	ab02      	add	r3, sp, #8
10011348:	18c9      	adds	r1, r1, r3
1001134a:	230f      	movs	r3, #15
1001134c:	700b      	strb	r3, [r1, #0]
1001134e:	4b40      	ldr	r3, [pc, #256]	; (10011450 <at_ble_authenticate+0x114>)
10011350:	1c05      	adds	r5, r0, #0
10011352:	1c16      	adds	r6, r2, #0
10011354:	4798      	blx	r3
10011356:	1c07      	adds	r7, r0, #0
10011358:	2001      	movs	r0, #1
1001135a:	2f07      	cmp	r7, #7
1001135c:	d875      	bhi.n	1001144a <at_ble_authenticate+0x10e>
1001135e:	2c00      	cmp	r4, #0
10011360:	d113      	bne.n	1001138a <at_ble_authenticate+0x4e>
10011362:	2312      	movs	r3, #18
10011364:	435f      	muls	r7, r3
10011366:	4b3b      	ldr	r3, [pc, #236]	; (10011454 <at_ble_authenticate+0x118>)
10011368:	5cfb      	ldrb	r3, [r7, r3]
1001136a:	4283      	cmp	r3, r0
1001136c:	d001      	beq.n	10011372 <at_ble_authenticate+0x36>
1001136e:	20cf      	movs	r0, #207	; 0xcf
10011370:	e06b      	b.n	1001144a <at_ble_authenticate+0x10e>
10011372:	9504      	str	r5, [sp, #16]
10011374:	9400      	str	r4, [sp, #0]
10011376:	9401      	str	r4, [sp, #4]
10011378:	9402      	str	r4, [sp, #8]
1001137a:	9403      	str	r4, [sp, #12]
1001137c:	1c20      	adds	r0, r4, #0
1001137e:	1c21      	adds	r1, r4, #0
10011380:	1c22      	adds	r2, r4, #0
10011382:	1c23      	adds	r3, r4, #0
10011384:	4d34      	ldr	r5, [pc, #208]	; (10011458 <at_ble_authenticate+0x11c>)
10011386:	47a8      	blx	r5
10011388:	e05e      	b.n	10011448 <at_ble_authenticate+0x10c>
1001138a:	7922      	ldrb	r2, [r4, #4]
1001138c:	2a06      	cmp	r2, #6
1001138e:	d9ee      	bls.n	1001136e <at_ble_authenticate+0x32>
10011390:	7963      	ldrb	r3, [r4, #5]
10011392:	2b10      	cmp	r3, #16
10011394:	d8eb      	bhi.n	1001136e <at_ble_authenticate+0x32>
10011396:	429a      	cmp	r2, r3
10011398:	d8e9      	bhi.n	1001136e <at_ble_authenticate+0x32>
1001139a:	7a23      	ldrb	r3, [r4, #8]
1001139c:	2b04      	cmp	r3, #4
1001139e:	d8e6      	bhi.n	1001136e <at_ble_authenticate+0x32>
100113a0:	79a3      	ldrb	r3, [r4, #6]
100113a2:	2b07      	cmp	r3, #7
100113a4:	d8e3      	bhi.n	1001136e <at_ble_authenticate+0x32>
100113a6:	79e3      	ldrb	r3, [r4, #7]
100113a8:	2b07      	cmp	r3, #7
100113aa:	d8e0      	bhi.n	1001136e <at_ble_authenticate+0x32>
100113ac:	78a3      	ldrb	r3, [r4, #2]
100113ae:	2b00      	cmp	r3, #0
100113b0:	d006      	beq.n	100113c0 <at_ble_authenticate+0x84>
100113b2:	2e00      	cmp	r6, #0
100113b4:	d0db      	beq.n	1001136e <at_ble_authenticate+0x32>
100113b6:	4829      	ldr	r0, [pc, #164]	; (1001145c <at_ble_authenticate+0x120>)
100113b8:	1c31      	adds	r1, r6, #0
100113ba:	221c      	movs	r2, #28
100113bc:	4b28      	ldr	r3, [pc, #160]	; (10011460 <at_ble_authenticate+0x124>)
100113be:	4798      	blx	r3
100113c0:	9b07      	ldr	r3, [sp, #28]
100113c2:	2b00      	cmp	r3, #0
100113c4:	d005      	beq.n	100113d2 <at_ble_authenticate+0x96>
100113c6:	4827      	ldr	r0, [pc, #156]	; (10011464 <at_ble_authenticate+0x128>)
100113c8:	1c19      	adds	r1, r3, #0
100113ca:	309a      	adds	r0, #154	; 0x9a
100113cc:	2210      	movs	r2, #16
100113ce:	4b24      	ldr	r3, [pc, #144]	; (10011460 <at_ble_authenticate+0x124>)
100113d0:	4798      	blx	r3
100113d2:	7863      	ldrb	r3, [r4, #1]
100113d4:	78a2      	ldrb	r2, [r4, #2]
100113d6:	009b      	lsls	r3, r3, #2
100113d8:	4313      	orrs	r3, r2
100113da:	2212      	movs	r2, #18
100113dc:	4357      	muls	r7, r2
100113de:	4a1d      	ldr	r2, [pc, #116]	; (10011454 <at_ble_authenticate+0x118>)
100113e0:	b2db      	uxtb	r3, r3
100113e2:	5cba      	ldrb	r2, [r7, r2]
100113e4:	2a00      	cmp	r2, #0
100113e6:	d116      	bne.n	10011416 <at_ble_authenticate+0xda>
100113e8:	79a0      	ldrb	r0, [r4, #6]
100113ea:	0742      	lsls	r2, r0, #29
100113ec:	d502      	bpl.n	100113f4 <at_ble_authenticate+0xb8>
100113ee:	9a07      	ldr	r2, [sp, #28]
100113f0:	2a00      	cmp	r2, #0
100113f2:	d0bc      	beq.n	1001136e <at_ble_authenticate+0x32>
100113f4:	07c2      	lsls	r2, r0, #31
100113f6:	d501      	bpl.n	100113fc <at_ble_authenticate+0xc0>
100113f8:	2e00      	cmp	r6, #0
100113fa:	d0b8      	beq.n	1001136e <at_ble_authenticate+0x32>
100113fc:	7966      	ldrb	r6, [r4, #5]
100113fe:	7821      	ldrb	r1, [r4, #0]
10011400:	78e2      	ldrb	r2, [r4, #3]
10011402:	9600      	str	r6, [sp, #0]
10011404:	9001      	str	r0, [sp, #4]
10011406:	79e0      	ldrb	r0, [r4, #7]
10011408:	9002      	str	r0, [sp, #8]
1001140a:	7a20      	ldrb	r0, [r4, #8]
1001140c:	4c16      	ldr	r4, [pc, #88]	; (10011468 <at_ble_authenticate+0x12c>)
1001140e:	9003      	str	r0, [sp, #12]
10011410:	1c28      	adds	r0, r5, #0
10011412:	47a0      	blx	r4
10011414:	e018      	b.n	10011448 <at_ble_authenticate+0x10c>
10011416:	2a01      	cmp	r2, #1
10011418:	d1a9      	bne.n	1001136e <at_ble_authenticate+0x32>
1001141a:	79e0      	ldrb	r0, [r4, #7]
1001141c:	0742      	lsls	r2, r0, #29
1001141e:	d502      	bpl.n	10011426 <at_ble_authenticate+0xea>
10011420:	9a07      	ldr	r2, [sp, #28]
10011422:	2a00      	cmp	r2, #0
10011424:	d0a3      	beq.n	1001136e <at_ble_authenticate+0x32>
10011426:	07c2      	lsls	r2, r0, #31
10011428:	d501      	bpl.n	1001142e <at_ble_authenticate+0xf2>
1001142a:	2e00      	cmp	r6, #0
1001142c:	d09f      	beq.n	1001136e <at_ble_authenticate+0x32>
1001142e:	7966      	ldrb	r6, [r4, #5]
10011430:	7821      	ldrb	r1, [r4, #0]
10011432:	78e2      	ldrb	r2, [r4, #3]
10011434:	9600      	str	r6, [sp, #0]
10011436:	79a6      	ldrb	r6, [r4, #6]
10011438:	9002      	str	r0, [sp, #8]
1001143a:	9601      	str	r6, [sp, #4]
1001143c:	7a20      	ldrb	r0, [r4, #8]
1001143e:	9504      	str	r5, [sp, #16]
10011440:	9003      	str	r0, [sp, #12]
10011442:	4c05      	ldr	r4, [pc, #20]	; (10011458 <at_ble_authenticate+0x11c>)
10011444:	2001      	movs	r0, #1
10011446:	47a0      	blx	r4
10011448:	2000      	movs	r0, #0
1001144a:	b00b      	add	sp, #44	; 0x2c
1001144c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001144e:	46c0      	nop			; (mov r8, r8)
10011450:	1001183d 	.word	0x1001183d
10011454:	1001ad22 	.word	0x1001ad22
10011458:	10011dad 	.word	0x10011dad
1001145c:	1001ae30 	.word	0x1001ae30
10011460:	10015103 	.word	0x10015103
10011464:	1001adb2 	.word	0x1001adb2
10011468:	10011b8d 	.word	0x10011b8d

1001146c <at_ble_pair_key_reply>:
1001146c:	b5f0      	push	{r4, r5, r6, r7, lr}
1001146e:	b085      	sub	sp, #20
10011470:	1c05      	adds	r5, r0, #0
10011472:	1c0c      	adds	r4, r1, #0
10011474:	1c16      	adds	r6, r2, #0
10011476:	2100      	movs	r1, #0
10011478:	4668      	mov	r0, sp
1001147a:	2210      	movs	r2, #16
1001147c:	4b18      	ldr	r3, [pc, #96]	; (100114e0 <at_ble_pair_key_reply+0x74>)
1001147e:	4798      	blx	r3
10011480:	2101      	movs	r1, #1
10011482:	2e00      	cmp	r6, #0
10011484:	d101      	bne.n	1001148a <at_ble_pair_key_reply+0x1e>
10011486:	1c31      	adds	r1, r6, #0
10011488:	466e      	mov	r6, sp
1001148a:	2c00      	cmp	r4, #0
1001148c:	d116      	bne.n	100114bc <at_ble_pair_key_reply+0x50>
1001148e:	2701      	movs	r7, #1
10011490:	1c23      	adds	r3, r4, #0
10011492:	1d70      	adds	r0, r6, #5
10011494:	3e01      	subs	r6, #1
10011496:	7802      	ldrb	r2, [r0, #0]
10011498:	3801      	subs	r0, #1
1001149a:	3a30      	subs	r2, #48	; 0x30
1001149c:	437a      	muls	r2, r7
1001149e:	189b      	adds	r3, r3, r2
100114a0:	220a      	movs	r2, #10
100114a2:	4357      	muls	r7, r2
100114a4:	42b0      	cmp	r0, r6
100114a6:	d1f6      	bne.n	10011496 <at_ble_pair_key_reply+0x2a>
100114a8:	466a      	mov	r2, sp
100114aa:	4668      	mov	r0, sp
100114ac:	7013      	strb	r3, [r2, #0]
100114ae:	0a1a      	lsrs	r2, r3, #8
100114b0:	7042      	strb	r2, [r0, #1]
100114b2:	0c1a      	lsrs	r2, r3, #16
100114b4:	0e1b      	lsrs	r3, r3, #24
100114b6:	7082      	strb	r2, [r0, #2]
100114b8:	70c3      	strb	r3, [r0, #3]
100114ba:	e009      	b.n	100114d0 <at_ble_pair_key_reply+0x64>
100114bc:	20cf      	movs	r0, #207	; 0xcf
100114be:	2c01      	cmp	r4, #1
100114c0:	d10c      	bne.n	100114dc <at_ble_pair_key_reply+0x70>
100114c2:	2300      	movs	r3, #0
100114c4:	4668      	mov	r0, sp
100114c6:	5cf2      	ldrb	r2, [r6, r3]
100114c8:	54c2      	strb	r2, [r0, r3]
100114ca:	3301      	adds	r3, #1
100114cc:	2b10      	cmp	r3, #16
100114ce:	d1f9      	bne.n	100114c4 <at_ble_pair_key_reply+0x58>
100114d0:	2004      	movs	r0, #4
100114d2:	466a      	mov	r2, sp
100114d4:	1c2b      	adds	r3, r5, #0
100114d6:	4c03      	ldr	r4, [pc, #12]	; (100114e4 <at_ble_pair_key_reply+0x78>)
100114d8:	47a0      	blx	r4
100114da:	2000      	movs	r0, #0
100114dc:	b005      	add	sp, #20
100114de:	bdf0      	pop	{r4, r5, r6, r7, pc}
100114e0:	10015115 	.word	0x10015115
100114e4:	10011e29 	.word	0x10011e29

100114e8 <at_ble_send_slave_sec_request>:
100114e8:	b570      	push	{r4, r5, r6, lr}
100114ea:	4b0c      	ldr	r3, [pc, #48]	; (1001151c <at_ble_send_slave_sec_request+0x34>)
100114ec:	1c0e      	adds	r6, r1, #0
100114ee:	2100      	movs	r1, #0
100114f0:	1c05      	adds	r5, r0, #0
100114f2:	1c14      	adds	r4, r2, #0
100114f4:	4798      	blx	r3
100114f6:	2301      	movs	r3, #1
100114f8:	2807      	cmp	r0, #7
100114fa:	d80d      	bhi.n	10011518 <at_ble_send_slave_sec_request+0x30>
100114fc:	3311      	adds	r3, #17
100114fe:	4358      	muls	r0, r3
10011500:	4b07      	ldr	r3, [pc, #28]	; (10011520 <at_ble_send_slave_sec_request+0x38>)
10011502:	5cc2      	ldrb	r2, [r0, r3]
10011504:	23e0      	movs	r3, #224	; 0xe0
10011506:	2a01      	cmp	r2, #1
10011508:	d106      	bne.n	10011518 <at_ble_send_slave_sec_request+0x30>
1001150a:	00b1      	lsls	r1, r6, #2
1001150c:	430c      	orrs	r4, r1
1001150e:	4b05      	ldr	r3, [pc, #20]	; (10011524 <at_ble_send_slave_sec_request+0x3c>)
10011510:	b2e1      	uxtb	r1, r4
10011512:	1c28      	adds	r0, r5, #0
10011514:	4798      	blx	r3
10011516:	2300      	movs	r3, #0
10011518:	1c18      	adds	r0, r3, #0
1001151a:	bd70      	pop	{r4, r5, r6, pc}
1001151c:	1001183d 	.word	0x1001183d
10011520:	1001ad22 	.word	0x1001ad22
10011524:	10011e79 	.word	0x10011e79

10011528 <at_ble_encryption_start>:
10011528:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1001152a:	23cf      	movs	r3, #207	; 0xcf
1001152c:	2900      	cmp	r1, #0
1001152e:	d02b      	beq.n	10011588 <at_ble_encryption_start+0x60>
10011530:	2a05      	cmp	r2, #5
10011532:	d829      	bhi.n	10011588 <at_ble_encryption_start+0x60>
10011534:	2701      	movs	r7, #1
10011536:	1c3d      	adds	r5, r7, #0
10011538:	2433      	movs	r4, #51	; 0x33
1001153a:	4095      	lsls	r5, r2
1001153c:	4225      	tst	r5, r4
1001153e:	d023      	beq.n	10011588 <at_ble_encryption_start+0x60>
10011540:	7e8c      	ldrb	r4, [r1, #26]
10011542:	3c07      	subs	r4, #7
10011544:	2c09      	cmp	r4, #9
10011546:	d81f      	bhi.n	10011588 <at_ble_encryption_start+0x60>
10011548:	4b10      	ldr	r3, [pc, #64]	; (1001158c <at_ble_encryption_start+0x64>)
1001154a:	1c0c      	adds	r4, r1, #0
1001154c:	2100      	movs	r1, #0
1001154e:	1c15      	adds	r5, r2, #0
10011550:	1c06      	adds	r6, r0, #0
10011552:	4798      	blx	r3
10011554:	1c3b      	adds	r3, r7, #0
10011556:	2807      	cmp	r0, #7
10011558:	d816      	bhi.n	10011588 <at_ble_encryption_start+0x60>
1001155a:	2312      	movs	r3, #18
1001155c:	4358      	muls	r0, r3
1001155e:	4b0c      	ldr	r3, [pc, #48]	; (10011590 <at_ble_encryption_start+0x68>)
10011560:	5cc7      	ldrb	r7, [r0, r3]
10011562:	23e0      	movs	r3, #224	; 0xe0
10011564:	2f00      	cmp	r7, #0
10011566:	d10f      	bne.n	10011588 <at_ble_encryption_start+0x60>
10011568:	1c21      	adds	r1, r4, #0
1001156a:	221c      	movs	r2, #28
1001156c:	4b09      	ldr	r3, [pc, #36]	; (10011594 <at_ble_encryption_start+0x6c>)
1001156e:	480a      	ldr	r0, [pc, #40]	; (10011598 <at_ble_encryption_start+0x70>)
10011570:	4798      	blx	r3
10011572:	1c23      	adds	r3, r4, #0
10011574:	7ea1      	ldrb	r1, [r4, #26]
10011576:	8a22      	ldrh	r2, [r4, #16]
10011578:	3312      	adds	r3, #18
1001157a:	9100      	str	r1, [sp, #0]
1001157c:	9501      	str	r5, [sp, #4]
1001157e:	1c21      	adds	r1, r4, #0
10011580:	1c30      	adds	r0, r6, #0
10011582:	4c06      	ldr	r4, [pc, #24]	; (1001159c <at_ble_encryption_start+0x74>)
10011584:	47a0      	blx	r4
10011586:	1c3b      	adds	r3, r7, #0
10011588:	1c18      	adds	r0, r3, #0
1001158a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1001158c:	1001183d 	.word	0x1001183d
10011590:	1001ad22 	.word	0x1001ad22
10011594:	10015103 	.word	0x10015103
10011598:	1001ae30 	.word	0x1001ae30
1001159c:	10011eb9 	.word	0x10011eb9

100115a0 <at_ble_encryption_request_reply>:
100115a0:	b573      	push	{r0, r1, r4, r5, r6, lr}
100115a2:	24cf      	movs	r4, #207	; 0xcf
100115a4:	2b00      	cmp	r3, #0
100115a6:	d011      	beq.n	100115cc <at_ble_encryption_request_reply+0x2c>
100115a8:	2a00      	cmp	r2, #0
100115aa:	d00a      	beq.n	100115c2 <at_ble_encryption_request_reply+0x22>
100115ac:	2905      	cmp	r1, #5
100115ae:	d80d      	bhi.n	100115cc <at_ble_encryption_request_reply+0x2c>
100115b0:	2501      	movs	r5, #1
100115b2:	2633      	movs	r6, #51	; 0x33
100115b4:	408d      	lsls	r5, r1
100115b6:	4235      	tst	r5, r6
100115b8:	d008      	beq.n	100115cc <at_ble_encryption_request_reply+0x2c>
100115ba:	7e9d      	ldrb	r5, [r3, #26]
100115bc:	3d07      	subs	r5, #7
100115be:	2d09      	cmp	r5, #9
100115c0:	d804      	bhi.n	100115cc <at_ble_encryption_request_reply+0x2c>
100115c2:	7e9c      	ldrb	r4, [r3, #26]
100115c4:	9400      	str	r4, [sp, #0]
100115c6:	4c02      	ldr	r4, [pc, #8]	; (100115d0 <at_ble_encryption_request_reply+0x30>)
100115c8:	47a0      	blx	r4
100115ca:	2400      	movs	r4, #0
100115cc:	1c20      	adds	r0, r4, #0
100115ce:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
100115d0:	10011f75 	.word	0x10011f75

100115d4 <rx_callback>:
100115d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
100115d6:	8883      	ldrh	r3, [r0, #4]
100115d8:	1c01      	adds	r1, r0, #0
100115da:	9301      	str	r3, [sp, #4]
100115dc:	88c5      	ldrh	r5, [r0, #6]
100115de:	8806      	ldrh	r6, [r0, #0]
100115e0:	2d00      	cmp	r5, #0
100115e2:	d10f      	bne.n	10011604 <rx_callback+0x30>
100115e4:	1c19      	adds	r1, r3, #0
100115e6:	1c30      	adds	r0, r6, #0
100115e8:	4b19      	ldr	r3, [pc, #100]	; (10011650 <rx_callback+0x7c>)
100115ea:	1c2a      	adds	r2, r5, #0
100115ec:	4798      	blx	r3
100115ee:	1e03      	subs	r3, r0, #0
100115f0:	d105      	bne.n	100115fe <rx_callback+0x2a>
100115f2:	1c30      	adds	r0, r6, #0
100115f4:	9901      	ldr	r1, [sp, #4]
100115f6:	1c1a      	adds	r2, r3, #0
100115f8:	4c16      	ldr	r4, [pc, #88]	; (10011654 <rx_callback+0x80>)
100115fa:	47a0      	blx	r4
100115fc:	e027      	b.n	1001164e <rx_callback+0x7a>
100115fe:	4b16      	ldr	r3, [pc, #88]	; (10011658 <rx_callback+0x84>)
10011600:	4798      	blx	r3
10011602:	e024      	b.n	1001164e <rx_callback+0x7a>
10011604:	4c15      	ldr	r4, [pc, #84]	; (1001165c <rx_callback+0x88>)
10011606:	4a16      	ldr	r2, [pc, #88]	; (10011660 <rx_callback+0x8c>)
10011608:	6823      	ldr	r3, [r4, #0]
1001160a:	6812      	ldr	r2, [r2, #0]
1001160c:	18eb      	adds	r3, r5, r3
1001160e:	4293      	cmp	r3, r2
10011610:	d901      	bls.n	10011616 <rx_callback+0x42>
10011612:	2300      	movs	r3, #0
10011614:	6023      	str	r3, [r4, #0]
10011616:	4f13      	ldr	r7, [pc, #76]	; (10011664 <rx_callback+0x90>)
10011618:	6822      	ldr	r2, [r4, #0]
1001161a:	683b      	ldr	r3, [r7, #0]
1001161c:	3108      	adds	r1, #8
1001161e:	1898      	adds	r0, r3, r2
10011620:	1c2a      	adds	r2, r5, #0
10011622:	4b11      	ldr	r3, [pc, #68]	; (10011668 <rx_callback+0x94>)
10011624:	4798      	blx	r3
10011626:	683b      	ldr	r3, [r7, #0]
10011628:	6822      	ldr	r2, [r4, #0]
1001162a:	1c30      	adds	r0, r6, #0
1001162c:	189a      	adds	r2, r3, r2
1001162e:	9901      	ldr	r1, [sp, #4]
10011630:	4b07      	ldr	r3, [pc, #28]	; (10011650 <rx_callback+0x7c>)
10011632:	4798      	blx	r3
10011634:	2800      	cmp	r0, #0
10011636:	d1e2      	bne.n	100115fe <rx_callback+0x2a>
10011638:	6823      	ldr	r3, [r4, #0]
1001163a:	683a      	ldr	r2, [r7, #0]
1001163c:	1c30      	adds	r0, r6, #0
1001163e:	18d2      	adds	r2, r2, r3
10011640:	9901      	ldr	r1, [sp, #4]
10011642:	1c2b      	adds	r3, r5, #0
10011644:	4e03      	ldr	r6, [pc, #12]	; (10011654 <rx_callback+0x80>)
10011646:	47b0      	blx	r6
10011648:	6823      	ldr	r3, [r4, #0]
1001164a:	18ed      	adds	r5, r5, r3
1001164c:	6025      	str	r5, [r4, #0]
1001164e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
10011650:	1000fc69 	.word	0x1000fc69
10011654:	1000fbe1 	.word	0x1000fbe1
10011658:	1000f601 	.word	0x1000f601
1001165c:	1001ae8c 	.word	0x1001ae8c
10011660:	10019e34 	.word	0x10019e34
10011664:	10019e30 	.word	0x10019e30
10011668:	10015103 	.word	0x10015103

1001166c <interface_send>:
1001166c:	b508      	push	{r3, lr}
1001166e:	4b02      	ldr	r3, [pc, #8]	; (10011678 <interface_send+0xc>)
10011670:	4798      	blx	r3
10011672:	2000      	movs	r0, #0
10011674:	bd08      	pop	{r3, pc}
10011676:	46c0      	nop			; (mov r8, r8)
10011678:	1000f2f9 	.word	0x1000f2f9

1001167c <interface_init>:
1001167c:	2280      	movs	r2, #128	; 0x80
1001167e:	b510      	push	{r4, lr}
10011680:	2100      	movs	r1, #0
10011682:	1c04      	adds	r4, r0, #0
10011684:	0092      	lsls	r2, r2, #2
10011686:	4b08      	ldr	r3, [pc, #32]	; (100116a8 <interface_init+0x2c>)
10011688:	4808      	ldr	r0, [pc, #32]	; (100116ac <interface_init+0x30>)
1001168a:	4798      	blx	r3
1001168c:	2200      	movs	r2, #0
1001168e:	4b08      	ldr	r3, [pc, #32]	; (100116b0 <interface_init+0x34>)
10011690:	601a      	str	r2, [r3, #0]
10011692:	4a08      	ldr	r2, [pc, #32]	; (100116b4 <interface_init+0x38>)
10011694:	4b08      	ldr	r3, [pc, #32]	; (100116b8 <interface_init+0x3c>)
10011696:	601a      	str	r2, [r3, #0]
10011698:	4b08      	ldr	r3, [pc, #32]	; (100116bc <interface_init+0x40>)
1001169a:	6922      	ldr	r2, [r4, #16]
1001169c:	601a      	str	r2, [r3, #0]
1001169e:	6962      	ldr	r2, [r4, #20]
100116a0:	4b07      	ldr	r3, [pc, #28]	; (100116c0 <interface_init+0x44>)
100116a2:	601a      	str	r2, [r3, #0]
100116a4:	bd10      	pop	{r4, pc}
100116a6:	46c0      	nop			; (mov r8, r8)
100116a8:	10015115 	.word	0x10015115
100116ac:	1001b090 	.word	0x1001b090
100116b0:	1001ae8c 	.word	0x1001ae8c
100116b4:	1001ae90 	.word	0x1001ae90
100116b8:	10018388 	.word	0x10018388
100116bc:	10019e30 	.word	0x10019e30
100116c0:	10019e34 	.word	0x10019e34

100116c4 <platform_cmd_cmpl_signal>:
100116c4:	2201      	movs	r2, #1
100116c6:	4b01      	ldr	r3, [pc, #4]	; (100116cc <platform_cmd_cmpl_signal+0x8>)
100116c8:	601a      	str	r2, [r3, #0]
100116ca:	4770      	bx	lr
100116cc:	10019e38 	.word	0x10019e38

100116d0 <platform_cmd_cmpl_wait>:
100116d0:	b510      	push	{r4, lr}
100116d2:	1c04      	adds	r4, r0, #0
100116d4:	4b07      	ldr	r3, [pc, #28]	; (100116f4 <platform_cmd_cmpl_wait+0x24>)
100116d6:	681a      	ldr	r2, [r3, #0]
100116d8:	2a01      	cmp	r2, #1
100116da:	d003      	beq.n	100116e4 <platform_cmd_cmpl_wait+0x14>
100116dc:	4b06      	ldr	r3, [pc, #24]	; (100116f8 <platform_cmd_cmpl_wait+0x28>)
100116de:	2000      	movs	r0, #0
100116e0:	4798      	blx	r3
100116e2:	e7f7      	b.n	100116d4 <platform_cmd_cmpl_wait+0x4>
100116e4:	6819      	ldr	r1, [r3, #0]
100116e6:	2901      	cmp	r1, #1
100116e8:	d102      	bne.n	100116f0 <platform_cmd_cmpl_wait+0x20>
100116ea:	2200      	movs	r2, #0
100116ec:	601a      	str	r2, [r3, #0]
100116ee:	e000      	b.n	100116f2 <platform_cmd_cmpl_wait+0x22>
100116f0:	7022      	strb	r2, [r4, #0]
100116f2:	bd10      	pop	{r4, pc}
100116f4:	10019e38 	.word	0x10019e38
100116f8:	1000f389 	.word	0x1000f389

100116fc <start_timer>:
100116fc:	4770      	bx	lr

100116fe <stop_timer>:
100116fe:	4770      	bx	lr

10011700 <dbg_le_set_bd_addr_req_handler>:
10011700:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10011702:	466b      	mov	r3, sp
10011704:	1dde      	adds	r6, r3, #7
10011706:	2300      	movs	r3, #0
10011708:	7033      	strb	r3, [r6, #0]
1001170a:	230f      	movs	r3, #15
1001170c:	4c13      	ldr	r4, [pc, #76]	; (1001175c <dbg_le_set_bd_addr_req_handler+0x5c>)
1001170e:	2703      	movs	r7, #3
10011710:	7023      	strb	r3, [r4, #0]
10011712:	2300      	movs	r3, #0
10011714:	70e3      	strb	r3, [r4, #3]
10011716:	4b12      	ldr	r3, [pc, #72]	; (10011760 <dbg_le_set_bd_addr_req_handler+0x60>)
10011718:	1c01      	adds	r1, r0, #0
1001171a:	881a      	ldrh	r2, [r3, #0]
1001171c:	881b      	ldrh	r3, [r3, #0]
1001171e:	7122      	strb	r2, [r4, #4]
10011720:	0a1b      	lsrs	r3, r3, #8
10011722:	2206      	movs	r2, #6
10011724:	7163      	strb	r3, [r4, #5]
10011726:	480f      	ldr	r0, [pc, #60]	; (10011764 <dbg_le_set_bd_addr_req_handler+0x64>)
10011728:	4b0f      	ldr	r3, [pc, #60]	; (10011768 <dbg_le_set_bd_addr_req_handler+0x68>)
1001172a:	7067      	strb	r7, [r4, #1]
1001172c:	70a7      	strb	r7, [r4, #2]
1001172e:	4798      	blx	r3
10011730:	4d0e      	ldr	r5, [pc, #56]	; (1001176c <dbg_le_set_bd_addr_req_handler+0x6c>)
10011732:	4b0f      	ldr	r3, [pc, #60]	; (10011770 <dbg_le_set_bd_addr_req_handler+0x70>)
10011734:	210e      	movs	r1, #14
10011736:	802b      	strh	r3, [r5, #0]
10011738:	2306      	movs	r3, #6
1001173a:	71a3      	strb	r3, [r4, #6]
1001173c:	2300      	movs	r3, #0
1001173e:	1c20      	adds	r0, r4, #0
10011740:	71e3      	strb	r3, [r4, #7]
10011742:	4b0c      	ldr	r3, [pc, #48]	; (10011774 <dbg_le_set_bd_addr_req_handler+0x74>)
10011744:	80af      	strh	r7, [r5, #4]
10011746:	4798      	blx	r3
10011748:	1c30      	adds	r0, r6, #0
1001174a:	4b0b      	ldr	r3, [pc, #44]	; (10011778 <dbg_le_set_bd_addr_req_handler+0x78>)
1001174c:	4798      	blx	r3
1001174e:	7833      	ldrb	r3, [r6, #0]
10011750:	20e2      	movs	r0, #226	; 0xe2
10011752:	2b00      	cmp	r3, #0
10011754:	d101      	bne.n	1001175a <dbg_le_set_bd_addr_req_handler+0x5a>
10011756:	68ab      	ldr	r3, [r5, #8]
10011758:	7818      	ldrb	r0, [r3, #0]
1001175a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1001175c:	1001b090 	.word	0x1001b090
10011760:	1001ad20 	.word	0x1001ad20
10011764:	1001b098 	.word	0x1001b098
10011768:	10015103 	.word	0x10015103
1001176c:	1001ad14 	.word	0x1001ad14
10011770:	00000329 	.word	0x00000329
10011774:	1001166d 	.word	0x1001166d
10011778:	100116d1 	.word	0x100116d1

1001177c <gapc_get_dev_info_cfm.constprop.1>:
1001177c:	b538      	push	{r3, r4, r5, lr}
1001177e:	230b      	movs	r3, #11
10011780:	4c27      	ldr	r4, [pc, #156]	; (10011820 <gapc_get_dev_info_cfm.constprop.1+0xa4>)
10011782:	7023      	strb	r3, [r4, #0]
10011784:	3303      	adds	r3, #3
10011786:	7063      	strb	r3, [r4, #1]
10011788:	3329      	adds	r3, #41	; 0x29
1001178a:	70a3      	strb	r3, [r4, #2]
1001178c:	4b25      	ldr	r3, [pc, #148]	; (10011824 <gapc_get_dev_info_cfm.constprop.1+0xa8>)
1001178e:	70e1      	strb	r1, [r4, #3]
10011790:	881a      	ldrh	r2, [r3, #0]
10011792:	881b      	ldrh	r3, [r3, #0]
10011794:	7122      	strb	r2, [r4, #4]
10011796:	0a1b      	lsrs	r3, r3, #8
10011798:	7163      	strb	r3, [r4, #5]
1001179a:	2300      	movs	r3, #0
1001179c:	7220      	strb	r0, [r4, #8]
1001179e:	7263      	strb	r3, [r4, #9]
100117a0:	2801      	cmp	r0, #1
100117a2:	d02b      	beq.n	100117fc <gapc_get_dev_info_cfm.constprop.1+0x80>
100117a4:	4298      	cmp	r0, r3
100117a6:	d01b      	beq.n	100117e0 <gapc_get_dev_info_cfm.constprop.1+0x64>
100117a8:	2802      	cmp	r0, #2
100117aa:	d12f      	bne.n	1001180c <gapc_get_dev_info_cfm.constprop.1+0x90>
100117ac:	4b1e      	ldr	r3, [pc, #120]	; (10011828 <gapc_get_dev_info_cfm.constprop.1+0xac>)
100117ae:	2112      	movs	r1, #18
100117b0:	1c1a      	adds	r2, r3, #0
100117b2:	32ce      	adds	r2, #206	; 0xce
100117b4:	8812      	ldrh	r2, [r2, #0]
100117b6:	72a2      	strb	r2, [r4, #10]
100117b8:	0a12      	lsrs	r2, r2, #8
100117ba:	72e2      	strb	r2, [r4, #11]
100117bc:	1c1a      	adds	r2, r3, #0
100117be:	32d0      	adds	r2, #208	; 0xd0
100117c0:	8812      	ldrh	r2, [r2, #0]
100117c2:	7322      	strb	r2, [r4, #12]
100117c4:	0a12      	lsrs	r2, r2, #8
100117c6:	7362      	strb	r2, [r4, #13]
100117c8:	1c1a      	adds	r2, r3, #0
100117ca:	32d2      	adds	r2, #210	; 0xd2
100117cc:	8812      	ldrh	r2, [r2, #0]
100117ce:	33d4      	adds	r3, #212	; 0xd4
100117d0:	73a2      	strb	r2, [r4, #14]
100117d2:	0a12      	lsrs	r2, r2, #8
100117d4:	73e2      	strb	r2, [r4, #15]
100117d6:	881b      	ldrh	r3, [r3, #0]
100117d8:	7423      	strb	r3, [r4, #16]
100117da:	0a1b      	lsrs	r3, r3, #8
100117dc:	7463      	strb	r3, [r4, #17]
100117de:	e016      	b.n	1001180e <gapc_get_dev_info_cfm.constprop.1+0x92>
100117e0:	4b11      	ldr	r3, [pc, #68]	; (10011828 <gapc_get_dev_info_cfm.constprop.1+0xac>)
100117e2:	4912      	ldr	r1, [pc, #72]	; (1001182c <gapc_get_dev_info_cfm.constprop.1+0xb0>)
100117e4:	33aa      	adds	r3, #170	; 0xaa
100117e6:	881d      	ldrh	r5, [r3, #0]
100117e8:	4811      	ldr	r0, [pc, #68]	; (10011830 <gapc_get_dev_info_cfm.constprop.1+0xb4>)
100117ea:	0a2b      	lsrs	r3, r5, #8
100117ec:	72a5      	strb	r5, [r4, #10]
100117ee:	72e3      	strb	r3, [r4, #11]
100117f0:	1c2a      	adds	r2, r5, #0
100117f2:	4b10      	ldr	r3, [pc, #64]	; (10011834 <gapc_get_dev_info_cfm.constprop.1+0xb8>)
100117f4:	350c      	adds	r5, #12
100117f6:	4798      	blx	r3
100117f8:	b2a9      	uxth	r1, r5
100117fa:	e008      	b.n	1001180e <gapc_get_dev_info_cfm.constprop.1+0x92>
100117fc:	4b0a      	ldr	r3, [pc, #40]	; (10011828 <gapc_get_dev_info_cfm.constprop.1+0xac>)
100117fe:	210c      	movs	r1, #12
10011800:	33cc      	adds	r3, #204	; 0xcc
10011802:	881b      	ldrh	r3, [r3, #0]
10011804:	72a3      	strb	r3, [r4, #10]
10011806:	0a1b      	lsrs	r3, r3, #8
10011808:	72e3      	strb	r3, [r4, #11]
1001180a:	e000      	b.n	1001180e <gapc_get_dev_info_cfm.constprop.1+0x92>
1001180c:	210a      	movs	r1, #10
1001180e:	1c0b      	adds	r3, r1, #0
10011810:	3b08      	subs	r3, #8
10011812:	71a3      	strb	r3, [r4, #6]
10011814:	121b      	asrs	r3, r3, #8
10011816:	71e3      	strb	r3, [r4, #7]
10011818:	1c20      	adds	r0, r4, #0
1001181a:	4b07      	ldr	r3, [pc, #28]	; (10011838 <gapc_get_dev_info_cfm.constprop.1+0xbc>)
1001181c:	4798      	blx	r3
1001181e:	bd38      	pop	{r3, r4, r5, pc}
10011820:	1001b090 	.word	0x1001b090
10011824:	1001ad20 	.word	0x1001ad20
10011828:	1001adb2 	.word	0x1001adb2
1001182c:	1001ae5e 	.word	0x1001ae5e
10011830:	1001b09c 	.word	0x1001b09c
10011834:	10015103 	.word	0x10015103
10011838:	1001166d 	.word	0x1001166d

1001183c <check_ConnData_idx_role>:
1001183c:	4b0c      	ldr	r3, [pc, #48]	; (10011870 <check_ConnData_idx_role+0x34>)
1001183e:	b570      	push	{r4, r5, r6, lr}
10011840:	1c04      	adds	r4, r0, #0
10011842:	2008      	movs	r0, #8
10011844:	429c      	cmp	r4, r3
10011846:	d011      	beq.n	1001186c <check_ConnData_idx_role+0x30>
10011848:	2300      	movs	r3, #0
1001184a:	2212      	movs	r2, #18
1001184c:	435a      	muls	r2, r3
1001184e:	4d09      	ldr	r5, [pc, #36]	; (10011874 <check_ConnData_idx_role+0x38>)
10011850:	b2d8      	uxtb	r0, r3
10011852:	1956      	adds	r6, r2, r5
10011854:	8976      	ldrh	r6, [r6, #10]
10011856:	42a6      	cmp	r6, r4
10011858:	d104      	bne.n	10011864 <check_ConnData_idx_role+0x28>
1001185a:	2900      	cmp	r1, #0
1001185c:	d006      	beq.n	1001186c <check_ConnData_idx_role+0x30>
1001185e:	5d53      	ldrb	r3, [r2, r5]
10011860:	700b      	strb	r3, [r1, #0]
10011862:	e003      	b.n	1001186c <check_ConnData_idx_role+0x30>
10011864:	3301      	adds	r3, #1
10011866:	2b08      	cmp	r3, #8
10011868:	d1ef      	bne.n	1001184a <check_ConnData_idx_role+0xe>
1001186a:	1c18      	adds	r0, r3, #0
1001186c:	bd70      	pop	{r4, r5, r6, pc}
1001186e:	46c0      	nop			; (mov r8, r8)
10011870:	0000ffff 	.word	0x0000ffff
10011874:	1001ad22 	.word	0x1001ad22

10011878 <check_ConnData_emptyEntry>:
10011878:	2300      	movs	r3, #0
1001187a:	2212      	movs	r2, #18
1001187c:	435a      	muls	r2, r3
1001187e:	4906      	ldr	r1, [pc, #24]	; (10011898 <check_ConnData_emptyEntry+0x20>)
10011880:	b2d8      	uxtb	r0, r3
10011882:	1852      	adds	r2, r2, r1
10011884:	8951      	ldrh	r1, [r2, #10]
10011886:	4a05      	ldr	r2, [pc, #20]	; (1001189c <check_ConnData_emptyEntry+0x24>)
10011888:	4291      	cmp	r1, r2
1001188a:	d003      	beq.n	10011894 <check_ConnData_emptyEntry+0x1c>
1001188c:	3301      	adds	r3, #1
1001188e:	2b08      	cmp	r3, #8
10011890:	d1f3      	bne.n	1001187a <check_ConnData_emptyEntry+0x2>
10011892:	1c18      	adds	r0, r3, #0
10011894:	4770      	bx	lr
10011896:	46c0      	nop			; (mov r8, r8)
10011898:	1001ad22 	.word	0x1001ad22
1001189c:	0000ffff 	.word	0x0000ffff

100118a0 <gapc_cmp_evt>:
100118a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
100118a2:	780b      	ldrb	r3, [r1, #0]
100118a4:	1c05      	adds	r5, r0, #0
100118a6:	1e58      	subs	r0, r3, #1
100118a8:	784e      	ldrb	r6, [r1, #1]
100118aa:	280f      	cmp	r0, #15
100118ac:	d85a      	bhi.n	10011964 <gapc_cmp_evt+0xc4>
100118ae:	1c14      	adds	r4, r2, #0
100118b0:	f001 fba4 	bl	10012ffc <__gnu_thumb1_case_uqi>
100118b4:	5858440a 	.word	0x5858440a
100118b8:	4b584444 	.word	0x4b584444
100118bc:	0825122d 	.word	0x0825122d
100118c0:	3e395858 	.word	0x3e395858
100118c4:	203b      	movs	r0, #59	; 0x3b
100118c6:	e04e      	b.n	10011966 <gapc_cmp_evt+0xc6>
100118c8:	203b      	movs	r0, #59	; 0x3b
100118ca:	2e00      	cmp	r6, #0
100118cc:	d04b      	beq.n	10011966 <gapc_cmp_evt+0xc6>
100118ce:	0a2d      	lsrs	r5, r5, #8
100118d0:	8015      	strh	r5, [r2, #0]
100118d2:	7096      	strb	r6, [r2, #2]
100118d4:	3835      	subs	r0, #53	; 0x35
100118d6:	e046      	b.n	10011966 <gapc_cmp_evt+0xc6>
100118d8:	466b      	mov	r3, sp
100118da:	1ddf      	adds	r7, r3, #7
100118dc:	2301      	movs	r3, #1
100118de:	0a2d      	lsrs	r5, r5, #8
100118e0:	703b      	strb	r3, [r7, #0]
100118e2:	1c28      	adds	r0, r5, #0
100118e4:	1c39      	adds	r1, r7, #0
100118e6:	4b20      	ldr	r3, [pc, #128]	; (10011968 <gapc_cmp_evt+0xc8>)
100118e8:	4798      	blx	r3
100118ea:	2807      	cmp	r0, #7
100118ec:	d803      	bhi.n	100118f6 <gapc_cmp_evt+0x56>
100118ee:	783b      	ldrb	r3, [r7, #0]
100118f0:	203b      	movs	r0, #59	; 0x3b
100118f2:	2b00      	cmp	r3, #0
100118f4:	d037      	beq.n	10011966 <gapc_cmp_evt+0xc6>
100118f6:	8065      	strh	r5, [r4, #2]
100118f8:	7126      	strb	r6, [r4, #4]
100118fa:	2009      	movs	r0, #9
100118fc:	e033      	b.n	10011966 <gapc_cmp_evt+0xc6>
100118fe:	203b      	movs	r0, #59	; 0x3b
10011900:	2e00      	cmp	r6, #0
10011902:	d030      	beq.n	10011966 <gapc_cmp_evt+0xc6>
10011904:	0a2d      	lsrs	r5, r5, #8
10011906:	8015      	strh	r5, [r2, #0]
10011908:	7096      	strb	r6, [r2, #2]
1001190a:	382d      	subs	r0, #45	; 0x2d
1001190c:	e02b      	b.n	10011966 <gapc_cmp_evt+0xc6>
1001190e:	203b      	movs	r0, #59	; 0x3b
10011910:	2e00      	cmp	r6, #0
10011912:	d028      	beq.n	10011966 <gapc_cmp_evt+0xc6>
10011914:	2300      	movs	r3, #0
10011916:	0a2d      	lsrs	r5, r5, #8
10011918:	8015      	strh	r5, [r2, #0]
1001191a:	7096      	strb	r6, [r2, #2]
1001191c:	8093      	strh	r3, [r2, #4]
1001191e:	80d3      	strh	r3, [r2, #6]
10011920:	8113      	strh	r3, [r2, #8]
10011922:	3834      	subs	r0, #52	; 0x34
10011924:	e01f      	b.n	10011966 <gapc_cmp_evt+0xc6>
10011926:	203b      	movs	r0, #59	; 0x3b
10011928:	2e00      	cmp	r6, #0
1001192a:	d01c      	beq.n	10011966 <gapc_cmp_evt+0xc6>
1001192c:	7216      	strb	r6, [r2, #8]
1001192e:	e003      	b.n	10011938 <gapc_cmp_evt+0x98>
10011930:	203b      	movs	r0, #59	; 0x3b
10011932:	2e00      	cmp	r6, #0
10011934:	d017      	beq.n	10011966 <gapc_cmp_evt+0xc6>
10011936:	7116      	strb	r6, [r2, #4]
10011938:	3812      	subs	r0, #18
1001193a:	e014      	b.n	10011966 <gapc_cmp_evt+0xc6>
1001193c:	203b      	movs	r0, #59	; 0x3b
1001193e:	2e00      	cmp	r6, #0
10011940:	d011      	beq.n	10011966 <gapc_cmp_evt+0xc6>
10011942:	7093      	strb	r3, [r2, #2]
10011944:	70d6      	strb	r6, [r2, #3]
10011946:	382a      	subs	r0, #42	; 0x2a
10011948:	e00d      	b.n	10011966 <gapc_cmp_evt+0xc6>
1001194a:	203b      	movs	r0, #59	; 0x3b
1001194c:	2e00      	cmp	r6, #0
1001194e:	d00a      	beq.n	10011966 <gapc_cmp_evt+0xc6>
10011950:	0a2d      	lsrs	r5, r5, #8
10011952:	7016      	strb	r6, [r2, #0]
10011954:	8055      	strh	r5, [r2, #2]
10011956:	1d10      	adds	r0, r2, #4
10011958:	2100      	movs	r1, #0
1001195a:	2205      	movs	r2, #5
1001195c:	4b03      	ldr	r3, [pc, #12]	; (1001196c <gapc_cmp_evt+0xcc>)
1001195e:	4798      	blx	r3
10011960:	2012      	movs	r0, #18
10011962:	e000      	b.n	10011966 <gapc_cmp_evt+0xc6>
10011964:	2000      	movs	r0, #0
10011966:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10011968:	1001183d 	.word	0x1001183d
1001196c:	10015115 	.word	0x10015115

10011970 <gapc_connection_cfm_handler>:
10011970:	b5f0      	push	{r4, r5, r6, r7, lr}
10011972:	b085      	sub	sp, #20
10011974:	1c1d      	adds	r5, r3, #0
10011976:	ab0a      	add	r3, sp, #40	; 0x28
10011978:	781b      	ldrb	r3, [r3, #0]
1001197a:	9201      	str	r2, [sp, #4]
1001197c:	9302      	str	r3, [sp, #8]
1001197e:	ab0b      	add	r3, sp, #44	; 0x2c
10011980:	781b      	ldrb	r3, [r3, #0]
10011982:	1c07      	adds	r7, r0, #0
10011984:	9303      	str	r3, [sp, #12]
10011986:	ab0c      	add	r3, sp, #48	; 0x30
10011988:	881a      	ldrh	r2, [r3, #0]
1001198a:	2302      	movs	r3, #2
1001198c:	1c0e      	adds	r6, r1, #0
1001198e:	4c23      	ldr	r4, [pc, #140]	; (10011a1c <gapc_connection_cfm_handler+0xac>)
10011990:	1c39      	adds	r1, r7, #0
10011992:	7023      	strb	r3, [r4, #0]
10011994:	330c      	adds	r3, #12
10011996:	7063      	strb	r3, [r4, #1]
10011998:	70a3      	strb	r3, [r4, #2]
1001199a:	4b21      	ldr	r3, [pc, #132]	; (10011a20 <gapc_connection_cfm_handler+0xb0>)
1001199c:	70e2      	strb	r2, [r4, #3]
1001199e:	881a      	ldrh	r2, [r3, #0]
100119a0:	881b      	ldrh	r3, [r3, #0]
100119a2:	7122      	strb	r2, [r4, #4]
100119a4:	0a1b      	lsrs	r3, r3, #8
100119a6:	4f1f      	ldr	r7, [pc, #124]	; (10011a24 <gapc_connection_cfm_handler+0xb4>)
100119a8:	2210      	movs	r2, #16
100119aa:	481f      	ldr	r0, [pc, #124]	; (10011a28 <gapc_connection_cfm_handler+0xb8>)
100119ac:	7163      	strb	r3, [r4, #5]
100119ae:	47b8      	blx	r7
100119b0:	0a33      	lsrs	r3, r6, #8
100119b2:	7626      	strb	r6, [r4, #24]
100119b4:	7663      	strb	r3, [r4, #25]
100119b6:	9901      	ldr	r1, [sp, #4]
100119b8:	0c33      	lsrs	r3, r6, #16
100119ba:	2210      	movs	r2, #16
100119bc:	0e36      	lsrs	r6, r6, #24
100119be:	481b      	ldr	r0, [pc, #108]	; (10011a2c <gapc_connection_cfm_handler+0xbc>)
100119c0:	76a3      	strb	r3, [r4, #26]
100119c2:	76e6      	strb	r6, [r4, #27]
100119c4:	47b8      	blx	r7
100119c6:	1c23      	adds	r3, r4, #0
100119c8:	332c      	adds	r3, #44	; 0x2c
100119ca:	701d      	strb	r5, [r3, #0]
100119cc:	1c23      	adds	r3, r4, #0
100119ce:	0a2a      	lsrs	r2, r5, #8
100119d0:	332d      	adds	r3, #45	; 0x2d
100119d2:	701a      	strb	r2, [r3, #0]
100119d4:	1c23      	adds	r3, r4, #0
100119d6:	0c2a      	lsrs	r2, r5, #16
100119d8:	332e      	adds	r3, #46	; 0x2e
100119da:	701a      	strb	r2, [r3, #0]
100119dc:	1c23      	adds	r3, r4, #0
100119de:	0e2d      	lsrs	r5, r5, #24
100119e0:	332f      	adds	r3, #47	; 0x2f
100119e2:	466a      	mov	r2, sp
100119e4:	701d      	strb	r5, [r3, #0]
100119e6:	1c23      	adds	r3, r4, #0
100119e8:	7a12      	ldrb	r2, [r2, #8]
100119ea:	3330      	adds	r3, #48	; 0x30
100119ec:	701a      	strb	r2, [r3, #0]
100119ee:	1c23      	adds	r3, r4, #0
100119f0:	2500      	movs	r5, #0
100119f2:	3331      	adds	r3, #49	; 0x31
100119f4:	466a      	mov	r2, sp
100119f6:	701d      	strb	r5, [r3, #0]
100119f8:	1c23      	adds	r3, r4, #0
100119fa:	7b12      	ldrb	r2, [r2, #12]
100119fc:	3332      	adds	r3, #50	; 0x32
100119fe:	701a      	strb	r2, [r3, #0]
10011a00:	1c23      	adds	r3, r4, #0
10011a02:	3333      	adds	r3, #51	; 0x33
10011a04:	701d      	strb	r5, [r3, #0]
10011a06:	232c      	movs	r3, #44	; 0x2c
10011a08:	1c20      	adds	r0, r4, #0
10011a0a:	71a3      	strb	r3, [r4, #6]
10011a0c:	2134      	movs	r1, #52	; 0x34
10011a0e:	4b08      	ldr	r3, [pc, #32]	; (10011a30 <gapc_connection_cfm_handler+0xc0>)
10011a10:	71e5      	strb	r5, [r4, #7]
10011a12:	4798      	blx	r3
10011a14:	1c28      	adds	r0, r5, #0
10011a16:	b005      	add	sp, #20
10011a18:	bdf0      	pop	{r4, r5, r6, r7, pc}
10011a1a:	46c0      	nop			; (mov r8, r8)
10011a1c:	1001b090 	.word	0x1001b090
10011a20:	1001ad20 	.word	0x1001ad20
10011a24:	10015103 	.word	0x10015103
10011a28:	1001b098 	.word	0x1001b098
10011a2c:	1001b0ac 	.word	0x1001b0ac
10011a30:	1001166d 	.word	0x1001166d

10011a34 <gapc_con_req_ind>:
10011a34:	b5f0      	push	{r4, r5, r6, r7, lr}
10011a36:	7845      	ldrb	r5, [r0, #1]
10011a38:	7803      	ldrb	r3, [r0, #0]
10011a3a:	4c30      	ldr	r4, [pc, #192]	; (10011afc <gapc_con_req_ind+0xc8>)
10011a3c:	022d      	lsls	r5, r5, #8
10011a3e:	431d      	orrs	r5, r3
10011a40:	85a5      	strh	r5, [r4, #44]	; 0x2c
10011a42:	78c3      	ldrb	r3, [r0, #3]
10011a44:	7882      	ldrb	r2, [r0, #2]
10011a46:	b08b      	sub	sp, #44	; 0x2c
10011a48:	021b      	lsls	r3, r3, #8
10011a4a:	431a      	orrs	r2, r3
10011a4c:	466b      	mov	r3, sp
10011a4e:	9205      	str	r2, [sp, #20]
10011a50:	8a9b      	ldrh	r3, [r3, #20]
10011a52:	2120      	movs	r1, #32
10011a54:	85e3      	strh	r3, [r4, #46]	; 0x2e
10011a56:	7943      	ldrb	r3, [r0, #5]
10011a58:	7902      	ldrb	r2, [r0, #4]
10011a5a:	021b      	lsls	r3, r3, #8
10011a5c:	431a      	orrs	r2, r3
10011a5e:	466b      	mov	r3, sp
10011a60:	9206      	str	r2, [sp, #24]
10011a62:	8b1b      	ldrh	r3, [r3, #24]
10011a64:	1c06      	adds	r6, r0, #0
10011a66:	8623      	strh	r3, [r4, #48]	; 0x30
10011a68:	79c3      	ldrb	r3, [r0, #7]
10011a6a:	7982      	ldrb	r2, [r0, #6]
10011a6c:	021b      	lsls	r3, r3, #8
10011a6e:	431a      	orrs	r2, r3
10011a70:	466b      	mov	r3, sp
10011a72:	9207      	str	r2, [sp, #28]
10011a74:	466a      	mov	r2, sp
10011a76:	8b9b      	ldrh	r3, [r3, #28]
10011a78:	1852      	adds	r2, r2, r1
10011a7a:	8663      	strh	r3, [r4, #50]	; 0x32
10011a7c:	7a43      	ldrb	r3, [r0, #9]
10011a7e:	1c01      	adds	r1, r0, #0
10011a80:	9308      	str	r3, [sp, #32]
10011a82:	1c23      	adds	r3, r4, #0
10011a84:	7812      	ldrb	r2, [r2, #0]
10011a86:	3377      	adds	r3, #119	; 0x77
10011a88:	3478      	adds	r4, #120	; 0x78
10011a8a:	701a      	strb	r2, [r3, #0]
10011a8c:	310a      	adds	r1, #10
10011a8e:	2206      	movs	r2, #6
10011a90:	4b1b      	ldr	r3, [pc, #108]	; (10011b00 <gapc_con_req_ind+0xcc>)
10011a92:	1c20      	adds	r0, r4, #0
10011a94:	4798      	blx	r3
10011a96:	7c33      	ldrb	r3, [r6, #16]
10011a98:	9309      	str	r3, [sp, #36]	; 0x24
10011a9a:	4b1a      	ldr	r3, [pc, #104]	; (10011b04 <gapc_con_req_ind+0xd0>)
10011a9c:	4798      	blx	r3
10011a9e:	4e1a      	ldr	r6, [pc, #104]	; (10011b08 <gapc_con_req_ind+0xd4>)
10011aa0:	1e07      	subs	r7, r0, #0
10011aa2:	2f07      	cmp	r7, #7
10011aa4:	d81b      	bhi.n	10011ade <gapc_con_req_ind+0xaa>
10011aa6:	2312      	movs	r3, #18
10011aa8:	4343      	muls	r3, r0
10011aaa:	18f0      	adds	r0, r6, r3
10011aac:	8145      	strh	r5, [r0, #10]
10011aae:	4669      	mov	r1, sp
10011ab0:	2524      	movs	r5, #36	; 0x24
10011ab2:	1949      	adds	r1, r1, r5
10011ab4:	7809      	ldrb	r1, [r1, #0]
10011ab6:	2206      	movs	r2, #6
10011ab8:	54f1      	strb	r1, [r6, r3]
10011aba:	2120      	movs	r1, #32
10011abc:	466b      	mov	r3, sp
10011abe:	185b      	adds	r3, r3, r1
10011ac0:	781b      	ldrb	r3, [r3, #0]
10011ac2:	1c21      	adds	r1, r4, #0
10011ac4:	7043      	strb	r3, [r0, #1]
10011ac6:	466b      	mov	r3, sp
10011ac8:	8a9b      	ldrh	r3, [r3, #20]
10011aca:	3002      	adds	r0, #2
10011acc:	8143      	strh	r3, [r0, #10]
10011ace:	466b      	mov	r3, sp
10011ad0:	8b1b      	ldrh	r3, [r3, #24]
10011ad2:	8183      	strh	r3, [r0, #12]
10011ad4:	466b      	mov	r3, sp
10011ad6:	8b9b      	ldrh	r3, [r3, #28]
10011ad8:	81c3      	strh	r3, [r0, #14]
10011ada:	4b09      	ldr	r3, [pc, #36]	; (10011b00 <gapc_con_req_ind+0xcc>)
10011adc:	4798      	blx	r3
10011ade:	2112      	movs	r1, #18
10011ae0:	2300      	movs	r3, #0
10011ae2:	434f      	muls	r7, r1
10011ae4:	9300      	str	r3, [sp, #0]
10011ae6:	9301      	str	r3, [sp, #4]
10011ae8:	19f6      	adds	r6, r6, r7
10011aea:	8971      	ldrh	r1, [r6, #10]
10011aec:	4a07      	ldr	r2, [pc, #28]	; (10011b0c <gapc_con_req_ind+0xd8>)
10011aee:	9102      	str	r1, [sp, #8]
10011af0:	1c10      	adds	r0, r2, #0
10011af2:	1c19      	adds	r1, r3, #0
10011af4:	4c06      	ldr	r4, [pc, #24]	; (10011b10 <gapc_con_req_ind+0xdc>)
10011af6:	47a0      	blx	r4
10011af8:	b00b      	add	sp, #44	; 0x2c
10011afa:	bdf0      	pop	{r4, r5, r6, r7, pc}
10011afc:	1001adb2 	.word	0x1001adb2
10011b00:	10015103 	.word	0x10015103
10011b04:	10011879 	.word	0x10011879
10011b08:	1001ad22 	.word	0x1001ad22
10011b0c:	10019e3c 	.word	0x10019e3c
10011b10:	10011971 	.word	0x10011971

10011b14 <gapc_disconnect_cmd_handler>:
10011b14:	2204      	movs	r2, #4
10011b16:	b510      	push	{r4, lr}
10011b18:	4b0c      	ldr	r3, [pc, #48]	; (10011b4c <gapc_disconnect_cmd_handler+0x38>)
10011b1a:	2400      	movs	r4, #0
10011b1c:	701a      	strb	r2, [r3, #0]
10011b1e:	320a      	adds	r2, #10
10011b20:	705a      	strb	r2, [r3, #1]
10011b22:	709a      	strb	r2, [r3, #2]
10011b24:	4a0a      	ldr	r2, [pc, #40]	; (10011b50 <gapc_disconnect_cmd_handler+0x3c>)
10011b26:	70d9      	strb	r1, [r3, #3]
10011b28:	8811      	ldrh	r1, [r2, #0]
10011b2a:	8812      	ldrh	r2, [r2, #0]
10011b2c:	7119      	strb	r1, [r3, #4]
10011b2e:	0a12      	lsrs	r2, r2, #8
10011b30:	715a      	strb	r2, [r3, #5]
10011b32:	2201      	movs	r2, #1
10011b34:	721a      	strb	r2, [r3, #8]
10011b36:	1892      	adds	r2, r2, r2
10011b38:	7258      	strb	r0, [r3, #9]
10011b3a:	719a      	strb	r2, [r3, #6]
10011b3c:	71dc      	strb	r4, [r3, #7]
10011b3e:	1c18      	adds	r0, r3, #0
10011b40:	210a      	movs	r1, #10
10011b42:	4b04      	ldr	r3, [pc, #16]	; (10011b54 <gapc_disconnect_cmd_handler+0x40>)
10011b44:	4798      	blx	r3
10011b46:	1c20      	adds	r0, r4, #0
10011b48:	bd10      	pop	{r4, pc}
10011b4a:	46c0      	nop			; (mov r8, r8)
10011b4c:	1001b090 	.word	0x1001b090
10011b50:	1001ad20 	.word	0x1001ad20
10011b54:	1001166d 	.word	0x1001166d

10011b58 <gapc_disconnect_ind>:
10011b58:	1c02      	adds	r2, r0, #0
10011b5a:	b508      	push	{r3, lr}
10011b5c:	7843      	ldrb	r3, [r0, #1]
10011b5e:	7800      	ldrb	r0, [r0, #0]
10011b60:	021b      	lsls	r3, r3, #8
10011b62:	4318      	orrs	r0, r3
10011b64:	8008      	strh	r0, [r1, #0]
10011b66:	7893      	ldrb	r3, [r2, #2]
10011b68:	708b      	strb	r3, [r1, #2]
10011b6a:	2100      	movs	r1, #0
10011b6c:	4b05      	ldr	r3, [pc, #20]	; (10011b84 <gapc_disconnect_ind+0x2c>)
10011b6e:	4798      	blx	r3
10011b70:	2807      	cmp	r0, #7
10011b72:	d806      	bhi.n	10011b82 <gapc_disconnect_ind+0x2a>
10011b74:	2312      	movs	r3, #18
10011b76:	4358      	muls	r0, r3
10011b78:	4b03      	ldr	r3, [pc, #12]	; (10011b88 <gapc_disconnect_ind+0x30>)
10011b7a:	1818      	adds	r0, r3, r0
10011b7c:	2301      	movs	r3, #1
10011b7e:	425b      	negs	r3, r3
10011b80:	8143      	strh	r3, [r0, #10]
10011b82:	bd08      	pop	{r3, pc}
10011b84:	1001183d 	.word	0x1001183d
10011b88:	1001ad22 	.word	0x1001ad22

10011b8c <gapc_bond_cmd_handler>:
10011b8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10011b8e:	9300      	str	r3, [sp, #0]
10011b90:	2312      	movs	r3, #18
10011b92:	1c04      	adds	r4, r0, #0
10011b94:	a808      	add	r0, sp, #32
10011b96:	7807      	ldrb	r7, [r0, #0]
10011b98:	a809      	add	r0, sp, #36	; 0x24
10011b9a:	7806      	ldrb	r6, [r0, #0]
10011b9c:	a80a      	add	r0, sp, #40	; 0x28
10011b9e:	7805      	ldrb	r5, [r0, #0]
10011ba0:	a80b      	add	r0, sp, #44	; 0x2c
10011ba2:	7800      	ldrb	r0, [r0, #0]
10011ba4:	9001      	str	r0, [sp, #4]
10011ba6:	4810      	ldr	r0, [pc, #64]	; (10011be8 <gapc_bond_cmd_handler+0x5c>)
10011ba8:	7003      	strb	r3, [r0, #0]
10011baa:	230e      	movs	r3, #14
10011bac:	70c4      	strb	r4, [r0, #3]
10011bae:	4c0f      	ldr	r4, [pc, #60]	; (10011bec <gapc_bond_cmd_handler+0x60>)
10011bb0:	7043      	strb	r3, [r0, #1]
10011bb2:	7083      	strb	r3, [r0, #2]
10011bb4:	8823      	ldrh	r3, [r4, #0]
10011bb6:	8824      	ldrh	r4, [r4, #0]
10011bb8:	7103      	strb	r3, [r0, #4]
10011bba:	466b      	mov	r3, sp
10011bbc:	781b      	ldrb	r3, [r3, #0]
10011bbe:	0a24      	lsrs	r4, r4, #8
10011bc0:	72c3      	strb	r3, [r0, #11]
10011bc2:	466b      	mov	r3, sp
10011bc4:	791b      	ldrb	r3, [r3, #4]
10011bc6:	7144      	strb	r4, [r0, #5]
10011bc8:	73c3      	strb	r3, [r0, #15]
10011bca:	2308      	movs	r3, #8
10011bcc:	7183      	strb	r3, [r0, #6]
10011bce:	2300      	movs	r3, #0
10011bd0:	240a      	movs	r4, #10
10011bd2:	7241      	strb	r1, [r0, #9]
10011bd4:	71c3      	strb	r3, [r0, #7]
10011bd6:	2110      	movs	r1, #16
10011bd8:	4b05      	ldr	r3, [pc, #20]	; (10011bf0 <gapc_bond_cmd_handler+0x64>)
10011bda:	7307      	strb	r7, [r0, #12]
10011bdc:	7346      	strb	r6, [r0, #13]
10011bde:	7385      	strb	r5, [r0, #14]
10011be0:	7204      	strb	r4, [r0, #8]
10011be2:	7282      	strb	r2, [r0, #10]
10011be4:	4798      	blx	r3
10011be6:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
10011be8:	1001b090 	.word	0x1001b090
10011bec:	1001ad20 	.word	0x1001ad20
10011bf0:	1001166d 	.word	0x1001166d

10011bf4 <gapc_bond_ind>:
10011bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10011bf6:	780e      	ldrb	r6, [r1, #0]
10011bf8:	1c03      	adds	r3, r0, #0
10011bfa:	1eb0      	subs	r0, r6, #2
10011bfc:	2805      	cmp	r0, #5
10011bfe:	d85d      	bhi.n	10011cbc <gapc_bond_ind+0xc8>
10011c00:	1c15      	adds	r5, r2, #0
10011c02:	1c0c      	adds	r4, r1, #0
10011c04:	f001 f9fa 	bl	10012ffc <__gnu_thumb1_case_uqi>
10011c08:	2f5a030d 	.word	0x2f5a030d
10011c0c:	4740      	.short	0x4740
10011c0e:	2009      	movs	r0, #9
10011c10:	2a00      	cmp	r2, #0
10011c12:	d054      	beq.n	10011cbe <gapc_bond_ind+0xca>
10011c14:	0a1b      	lsrs	r3, r3, #8
10011c16:	8053      	strh	r3, [r2, #2]
10011c18:	788b      	ldrb	r3, [r1, #2]
10011c1a:	4829      	ldr	r0, [pc, #164]	; (10011cc0 <gapc_bond_ind+0xcc>)
10011c1c:	7113      	strb	r3, [r2, #4]
10011c1e:	2100      	movs	r1, #0
10011c20:	e01c      	b.n	10011c5c <gapc_bond_ind+0x68>
10011c22:	2009      	movs	r0, #9
10011c24:	2a00      	cmp	r2, #0
10011c26:	d04a      	beq.n	10011cbe <gapc_bond_ind+0xca>
10011c28:	4c25      	ldr	r4, [pc, #148]	; (10011cc0 <gapc_bond_ind+0xcc>)
10011c2a:	0a1b      	lsrs	r3, r3, #8
10011c2c:	8053      	strh	r3, [r2, #2]
10011c2e:	788b      	ldrb	r3, [r1, #2]
10011c30:	2700      	movs	r7, #0
10011c32:	1c10      	adds	r0, r2, #0
10011c34:	1c21      	adds	r1, r4, #0
10011c36:	7013      	strb	r3, [r2, #0]
10011c38:	4e22      	ldr	r6, [pc, #136]	; (10011cc4 <gapc_bond_ind+0xd0>)
10011c3a:	7117      	strb	r7, [r2, #4]
10011c3c:	312e      	adds	r1, #46	; 0x2e
10011c3e:	2217      	movs	r2, #23
10011c40:	3032      	adds	r0, #50	; 0x32
10011c42:	47b0      	blx	r6
10011c44:	1c28      	adds	r0, r5, #0
10011c46:	1c21      	adds	r1, r4, #0
10011c48:	2210      	movs	r2, #16
10011c4a:	311e      	adds	r1, #30
10011c4c:	3022      	adds	r0, #34	; 0x22
10011c4e:	47b0      	blx	r6
10011c50:	1ca1      	adds	r1, r4, #2
10011c52:	1da8      	adds	r0, r5, #6
10011c54:	221c      	movs	r2, #28
10011c56:	47b0      	blx	r6
10011c58:	1c20      	adds	r0, r4, #0
10011c5a:	1c39      	adds	r1, r7, #0
10011c5c:	2246      	movs	r2, #70	; 0x46
10011c5e:	4b1a      	ldr	r3, [pc, #104]	; (10011cc8 <gapc_bond_ind+0xd4>)
10011c60:	4798      	blx	r3
10011c62:	2009      	movs	r0, #9
10011c64:	e02b      	b.n	10011cbe <gapc_bond_ind+0xca>
10011c66:	4d16      	ldr	r5, [pc, #88]	; (10011cc0 <gapc_bond_ind+0xcc>)
10011c68:	3102      	adds	r1, #2
10011c6a:	1c28      	adds	r0, r5, #0
10011c6c:	2210      	movs	r2, #16
10011c6e:	4e15      	ldr	r6, [pc, #84]	; (10011cc4 <gapc_bond_ind+0xd0>)
10011c70:	302e      	adds	r0, #46	; 0x2e
10011c72:	47b0      	blx	r6
10011c74:	1c28      	adds	r0, r5, #0
10011c76:	1c21      	adds	r1, r4, #0
10011c78:	303f      	adds	r0, #63	; 0x3f
10011c7a:	3112      	adds	r1, #18
10011c7c:	2206      	movs	r2, #6
10011c7e:	47b0      	blx	r6
10011c80:	7e23      	ldrb	r3, [r4, #24]
10011c82:	353e      	adds	r5, #62	; 0x3e
10011c84:	702b      	strb	r3, [r5, #0]
10011c86:	e019      	b.n	10011cbc <gapc_bond_ind+0xc8>
10011c88:	480d      	ldr	r0, [pc, #52]	; (10011cc0 <gapc_bond_ind+0xcc>)
10011c8a:	3102      	adds	r1, #2
10011c8c:	2210      	movs	r2, #16
10011c8e:	4b0d      	ldr	r3, [pc, #52]	; (10011cc4 <gapc_bond_ind+0xd0>)
10011c90:	301e      	adds	r0, #30
10011c92:	4798      	blx	r3
10011c94:	e012      	b.n	10011cbc <gapc_bond_ind+0xc8>
10011c96:	4d0a      	ldr	r5, [pc, #40]	; (10011cc0 <gapc_bond_ind+0xcc>)
10011c98:	3102      	adds	r1, #2
10011c9a:	2210      	movs	r2, #16
10011c9c:	4e09      	ldr	r6, [pc, #36]	; (10011cc4 <gapc_bond_ind+0xd0>)
10011c9e:	1ca8      	adds	r0, r5, #2
10011ca0:	47b0      	blx	r6
10011ca2:	1c28      	adds	r0, r5, #0
10011ca4:	1c21      	adds	r1, r4, #0
10011ca6:	7ce3      	ldrb	r3, [r4, #19]
10011ca8:	7ca2      	ldrb	r2, [r4, #18]
10011caa:	021b      	lsls	r3, r3, #8
10011cac:	4313      	orrs	r3, r2
10011cae:	3014      	adds	r0, #20
10011cb0:	3114      	adds	r1, #20
10011cb2:	2208      	movs	r2, #8
10011cb4:	826b      	strh	r3, [r5, #18]
10011cb6:	47b0      	blx	r6
10011cb8:	7f23      	ldrb	r3, [r4, #28]
10011cba:	772b      	strb	r3, [r5, #28]
10011cbc:	2000      	movs	r0, #0
10011cbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10011cc0:	10019e6c 	.word	0x10019e6c
10011cc4:	10015103 	.word	0x10015103
10011cc8:	10015115 	.word	0x10015115

10011ccc <gapc_bond_req_ind>:
10011ccc:	b570      	push	{r4, r5, r6, lr}
10011cce:	780c      	ldrb	r4, [r1, #0]
10011cd0:	1c03      	adds	r3, r0, #0
10011cd2:	7849      	ldrb	r1, [r1, #1]
10011cd4:	2c07      	cmp	r4, #7
10011cd6:	d85c      	bhi.n	10011d92 <gapc_bond_req_ind+0xc6>
10011cd8:	1c20      	adds	r0, r4, #0
10011cda:	f001 f98f 	bl	10012ffc <__gnu_thumb1_case_uqi>
10011cde:	5a04      	.short	0x5a04
10011ce0:	5a0b5a5a 	.word	0x5a0b5a5a
10011ce4:	1f1f      	.short	0x1f1f
10011ce6:	200a      	movs	r0, #10
10011ce8:	2a00      	cmp	r2, #0
10011cea:	d053      	beq.n	10011d94 <gapc_bond_req_ind+0xc8>
10011cec:	0a1b      	lsrs	r3, r3, #8
10011cee:	8013      	strh	r3, [r2, #0]
10011cf0:	7091      	strb	r1, [r2, #2]
10011cf2:	e04f      	b.n	10011d94 <gapc_bond_req_ind+0xc8>
10011cf4:	2a00      	cmp	r2, #0
10011cf6:	d00b      	beq.n	10011d10 <gapc_bond_req_ind+0x44>
10011cf8:	0a1b      	lsrs	r3, r3, #8
10011cfa:	8013      	strh	r3, [r2, #0]
10011cfc:	2900      	cmp	r1, #0
10011cfe:	d102      	bne.n	10011d06 <gapc_bond_req_ind+0x3a>
10011d00:	2301      	movs	r3, #1
10011d02:	7093      	strb	r3, [r2, #2]
10011d04:	e004      	b.n	10011d10 <gapc_bond_req_ind+0x44>
10011d06:	2300      	movs	r3, #0
10011d08:	7093      	strb	r3, [r2, #2]
10011d0a:	2902      	cmp	r1, #2
10011d0c:	d102      	bne.n	10011d14 <gapc_bond_req_ind+0x48>
10011d0e:	70d3      	strb	r3, [r2, #3]
10011d10:	200c      	movs	r0, #12
10011d12:	e03f      	b.n	10011d94 <gapc_bond_req_ind+0xc8>
10011d14:	2901      	cmp	r1, #1
10011d16:	d1fb      	bne.n	10011d10 <gapc_bond_req_ind+0x44>
10011d18:	70d1      	strb	r1, [r2, #3]
10011d1a:	e7f9      	b.n	10011d10 <gapc_bond_req_ind+0x44>
10011d1c:	2214      	movs	r2, #20
10011d1e:	481e      	ldr	r0, [pc, #120]	; (10011d98 <gapc_bond_req_ind+0xcc>)
10011d20:	0a1b      	lsrs	r3, r3, #8
10011d22:	70c3      	strb	r3, [r0, #3]
10011d24:	4b1d      	ldr	r3, [pc, #116]	; (10011d9c <gapc_bond_req_ind+0xd0>)
10011d26:	7002      	strb	r2, [r0, #0]
10011d28:	3a06      	subs	r2, #6
10011d2a:	7042      	strb	r2, [r0, #1]
10011d2c:	7082      	strb	r2, [r0, #2]
10011d2e:	881a      	ldrh	r2, [r3, #0]
10011d30:	881b      	ldrh	r3, [r3, #0]
10011d32:	4e1b      	ldr	r6, [pc, #108]	; (10011da0 <gapc_bond_req_ind+0xd4>)
10011d34:	0a1b      	lsrs	r3, r3, #8
10011d36:	7143      	strb	r3, [r0, #5]
10011d38:	2301      	movs	r3, #1
10011d3a:	7102      	strb	r2, [r0, #4]
10011d3c:	7204      	strb	r4, [r0, #8]
10011d3e:	7243      	strb	r3, [r0, #9]
10011d40:	1c05      	adds	r5, r0, #0
10011d42:	1c31      	adds	r1, r6, #0
10011d44:	300a      	adds	r0, #10
10011d46:	2c07      	cmp	r4, #7
10011d48:	d116      	bne.n	10011d78 <gapc_bond_req_ind+0xac>
10011d4a:	317e      	adds	r1, #126	; 0x7e
10011d4c:	2210      	movs	r2, #16
10011d4e:	4c15      	ldr	r4, [pc, #84]	; (10011da4 <gapc_bond_req_ind+0xd8>)
10011d50:	47a0      	blx	r4
10011d52:	1c33      	adds	r3, r6, #0
10011d54:	1c31      	adds	r1, r6, #0
10011d56:	1c28      	adds	r0, r5, #0
10011d58:	338e      	adds	r3, #142	; 0x8e
10011d5a:	881b      	ldrh	r3, [r3, #0]
10011d5c:	3190      	adds	r1, #144	; 0x90
10011d5e:	76ab      	strb	r3, [r5, #26]
10011d60:	2208      	movs	r2, #8
10011d62:	0a1b      	lsrs	r3, r3, #8
10011d64:	301c      	adds	r0, #28
10011d66:	76eb      	strb	r3, [r5, #27]
10011d68:	47a0      	blx	r4
10011d6a:	1c31      	adds	r1, r6, #0
10011d6c:	3198      	adds	r1, #152	; 0x98
10011d6e:	780a      	ldrb	r2, [r1, #0]
10011d70:	1d6b      	adds	r3, r5, #5
10011d72:	77da      	strb	r2, [r3, #31]
10011d74:	2125      	movs	r1, #37	; 0x25
10011d76:	e004      	b.n	10011d82 <gapc_bond_req_ind+0xb6>
10011d78:	319a      	adds	r1, #154	; 0x9a
10011d7a:	2210      	movs	r2, #16
10011d7c:	4b09      	ldr	r3, [pc, #36]	; (10011da4 <gapc_bond_req_ind+0xd8>)
10011d7e:	4798      	blx	r3
10011d80:	211a      	movs	r1, #26
10011d82:	1c0b      	adds	r3, r1, #0
10011d84:	2400      	movs	r4, #0
10011d86:	3b08      	subs	r3, #8
10011d88:	71ab      	strb	r3, [r5, #6]
10011d8a:	1c28      	adds	r0, r5, #0
10011d8c:	4b06      	ldr	r3, [pc, #24]	; (10011da8 <gapc_bond_req_ind+0xdc>)
10011d8e:	71ec      	strb	r4, [r5, #7]
10011d90:	4798      	blx	r3
10011d92:	2000      	movs	r0, #0
10011d94:	bd70      	pop	{r4, r5, r6, pc}
10011d96:	46c0      	nop			; (mov r8, r8)
10011d98:	1001b090 	.word	0x1001b090
10011d9c:	1001ad20 	.word	0x1001ad20
10011da0:	1001adb2 	.word	0x1001adb2
10011da4:	10015103 	.word	0x10015103
10011da8:	1001166d 	.word	0x1001166d

10011dac <gapc_bond_cfm_handler_pair_resp>:
10011dac:	b5f0      	push	{r4, r5, r6, r7, lr}
10011dae:	b085      	sub	sp, #20
10011db0:	1c07      	adds	r7, r0, #0
10011db2:	a80a      	add	r0, sp, #40	; 0x28
10011db4:	7806      	ldrb	r6, [r0, #0]
10011db6:	a80b      	add	r0, sp, #44	; 0x2c
10011db8:	7805      	ldrb	r5, [r0, #0]
10011dba:	a80c      	add	r0, sp, #48	; 0x30
10011dbc:	7800      	ldrb	r0, [r0, #0]
10011dbe:	2414      	movs	r4, #20
10011dc0:	9002      	str	r0, [sp, #8]
10011dc2:	a80d      	add	r0, sp, #52	; 0x34
10011dc4:	7800      	ldrb	r0, [r0, #0]
10011dc6:	9301      	str	r3, [sp, #4]
10011dc8:	9003      	str	r0, [sp, #12]
10011dca:	a80e      	add	r0, sp, #56	; 0x38
10011dcc:	8800      	ldrh	r0, [r0, #0]
10011dce:	4684      	mov	ip, r0
10011dd0:	4812      	ldr	r0, [pc, #72]	; (10011e1c <gapc_bond_cfm_handler_pair_resp+0x70>)
10011dd2:	7004      	strb	r4, [r0, #0]
10011dd4:	3c06      	subs	r4, #6
10011dd6:	7044      	strb	r4, [r0, #1]
10011dd8:	7084      	strb	r4, [r0, #2]
10011dda:	4664      	mov	r4, ip
10011ddc:	70c4      	strb	r4, [r0, #3]
10011dde:	4c10      	ldr	r4, [pc, #64]	; (10011e20 <gapc_bond_cfm_handler_pair_resp+0x74>)
10011de0:	7247      	strb	r7, [r0, #9]
10011de2:	8823      	ldrh	r3, [r4, #0]
10011de4:	8824      	ldrh	r4, [r4, #0]
10011de6:	7103      	strb	r3, [r0, #4]
10011de8:	466b      	mov	r3, sp
10011dea:	791b      	ldrb	r3, [r3, #4]
10011dec:	0a24      	lsrs	r4, r4, #8
10011dee:	7303      	strb	r3, [r0, #12]
10011df0:	466b      	mov	r3, sp
10011df2:	7a1b      	ldrb	r3, [r3, #8]
10011df4:	7144      	strb	r4, [r0, #5]
10011df6:	73c3      	strb	r3, [r0, #15]
10011df8:	466b      	mov	r3, sp
10011dfa:	7b1b      	ldrb	r3, [r3, #12]
10011dfc:	2401      	movs	r4, #1
10011dfe:	7403      	strb	r3, [r0, #16]
10011e00:	2309      	movs	r3, #9
10011e02:	7183      	strb	r3, [r0, #6]
10011e04:	2300      	movs	r3, #0
10011e06:	7204      	strb	r4, [r0, #8]
10011e08:	7281      	strb	r1, [r0, #10]
10011e0a:	72c2      	strb	r2, [r0, #11]
10011e0c:	7346      	strb	r6, [r0, #13]
10011e0e:	7385      	strb	r5, [r0, #14]
10011e10:	71c3      	strb	r3, [r0, #7]
10011e12:	2111      	movs	r1, #17
10011e14:	4b03      	ldr	r3, [pc, #12]	; (10011e24 <gapc_bond_cfm_handler_pair_resp+0x78>)
10011e16:	4798      	blx	r3
10011e18:	b005      	add	sp, #20
10011e1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
10011e1c:	1001b090 	.word	0x1001b090
10011e20:	1001ad20 	.word	0x1001ad20
10011e24:	1001166d 	.word	0x1001166d

10011e28 <gapc_bond_cfm_handler_key_exch>:
10011e28:	b538      	push	{r3, r4, r5, lr}
10011e2a:	2514      	movs	r5, #20
10011e2c:	4c0d      	ldr	r4, [pc, #52]	; (10011e64 <gapc_bond_cfm_handler_key_exch+0x3c>)
10011e2e:	70e3      	strb	r3, [r4, #3]
10011e30:	4b0d      	ldr	r3, [pc, #52]	; (10011e68 <gapc_bond_cfm_handler_key_exch+0x40>)
10011e32:	7025      	strb	r5, [r4, #0]
10011e34:	3d06      	subs	r5, #6
10011e36:	7065      	strb	r5, [r4, #1]
10011e38:	70a5      	strb	r5, [r4, #2]
10011e3a:	881d      	ldrh	r5, [r3, #0]
10011e3c:	881b      	ldrh	r3, [r3, #0]
10011e3e:	7220      	strb	r0, [r4, #8]
10011e40:	0a1b      	lsrs	r3, r3, #8
10011e42:	7163      	strb	r3, [r4, #5]
10011e44:	7261      	strb	r1, [r4, #9]
10011e46:	4b09      	ldr	r3, [pc, #36]	; (10011e6c <gapc_bond_cfm_handler_key_exch+0x44>)
10011e48:	1c11      	adds	r1, r2, #0
10011e4a:	4809      	ldr	r0, [pc, #36]	; (10011e70 <gapc_bond_cfm_handler_key_exch+0x48>)
10011e4c:	2210      	movs	r2, #16
10011e4e:	7125      	strb	r5, [r4, #4]
10011e50:	4798      	blx	r3
10011e52:	2312      	movs	r3, #18
10011e54:	71a3      	strb	r3, [r4, #6]
10011e56:	2300      	movs	r3, #0
10011e58:	1c20      	adds	r0, r4, #0
10011e5a:	71e3      	strb	r3, [r4, #7]
10011e5c:	211a      	movs	r1, #26
10011e5e:	4b05      	ldr	r3, [pc, #20]	; (10011e74 <gapc_bond_cfm_handler_key_exch+0x4c>)
10011e60:	4798      	blx	r3
10011e62:	bd38      	pop	{r3, r4, r5, pc}
10011e64:	1001b090 	.word	0x1001b090
10011e68:	1001ad20 	.word	0x1001ad20
10011e6c:	10015103 	.word	0x10015103
10011e70:	1001b09a 	.word	0x1001b09a
10011e74:	1001166d 	.word	0x1001166d

10011e78 <gapc_security_cmd_handler>:
10011e78:	221a      	movs	r2, #26
10011e7a:	b508      	push	{r3, lr}
10011e7c:	4b0b      	ldr	r3, [pc, #44]	; (10011eac <gapc_security_cmd_handler+0x34>)
10011e7e:	701a      	strb	r2, [r3, #0]
10011e80:	3a0c      	subs	r2, #12
10011e82:	705a      	strb	r2, [r3, #1]
10011e84:	709a      	strb	r2, [r3, #2]
10011e86:	4a0a      	ldr	r2, [pc, #40]	; (10011eb0 <gapc_security_cmd_handler+0x38>)
10011e88:	70d8      	strb	r0, [r3, #3]
10011e8a:	8810      	ldrh	r0, [r2, #0]
10011e8c:	8812      	ldrh	r2, [r2, #0]
10011e8e:	7118      	strb	r0, [r3, #4]
10011e90:	0a12      	lsrs	r2, r2, #8
10011e92:	715a      	strb	r2, [r3, #5]
10011e94:	220c      	movs	r2, #12
10011e96:	721a      	strb	r2, [r3, #8]
10011e98:	3a0a      	subs	r2, #10
10011e9a:	719a      	strb	r2, [r3, #6]
10011e9c:	2200      	movs	r2, #0
10011e9e:	7259      	strb	r1, [r3, #9]
10011ea0:	71da      	strb	r2, [r3, #7]
10011ea2:	1c18      	adds	r0, r3, #0
10011ea4:	210a      	movs	r1, #10
10011ea6:	4b03      	ldr	r3, [pc, #12]	; (10011eb4 <gapc_security_cmd_handler+0x3c>)
10011ea8:	4798      	blx	r3
10011eaa:	bd08      	pop	{r3, pc}
10011eac:	1001b090 	.word	0x1001b090
10011eb0:	1001ad20 	.word	0x1001ad20
10011eb4:	1001166d 	.word	0x1001166d

10011eb8 <gapc_encrypt_cmd_handler>:
10011eb8:	b5f0      	push	{r4, r5, r6, r7, lr}
10011eba:	2500      	movs	r5, #0
10011ebc:	b089      	sub	sp, #36	; 0x24
10011ebe:	9306      	str	r3, [sp, #24]
10011ec0:	ab0e      	add	r3, sp, #56	; 0x38
10011ec2:	781b      	ldrb	r3, [r3, #0]
10011ec4:	1c17      	adds	r7, r2, #0
10011ec6:	9307      	str	r3, [sp, #28]
10011ec8:	ab0f      	add	r3, sp, #60	; 0x3c
10011eca:	781b      	ldrb	r3, [r3, #0]
10011ecc:	4a19      	ldr	r2, [pc, #100]	; (10011f34 <gapc_encrypt_cmd_handler+0x7c>)
10011ece:	1c06      	adds	r6, r0, #0
10011ed0:	9105      	str	r1, [sp, #20]
10011ed2:	9300      	str	r3, [sp, #0]
10011ed4:	9002      	str	r0, [sp, #8]
10011ed6:	1c29      	adds	r1, r5, #0
10011ed8:	1c2b      	adds	r3, r5, #0
10011eda:	9501      	str	r5, [sp, #4]
10011edc:	1c10      	adds	r0, r2, #0
10011ede:	4c16      	ldr	r4, [pc, #88]	; (10011f38 <gapc_encrypt_cmd_handler+0x80>)
10011ee0:	47a0      	blx	r4
10011ee2:	2316      	movs	r3, #22
10011ee4:	4c15      	ldr	r4, [pc, #84]	; (10011f3c <gapc_encrypt_cmd_handler+0x84>)
10011ee6:	9905      	ldr	r1, [sp, #20]
10011ee8:	7023      	strb	r3, [r4, #0]
10011eea:	3b08      	subs	r3, #8
10011eec:	7063      	strb	r3, [r4, #1]
10011eee:	70a3      	strb	r3, [r4, #2]
10011ef0:	4b13      	ldr	r3, [pc, #76]	; (10011f40 <gapc_encrypt_cmd_handler+0x88>)
10011ef2:	70e6      	strb	r6, [r4, #3]
10011ef4:	881a      	ldrh	r2, [r3, #0]
10011ef6:	881b      	ldrh	r3, [r3, #0]
10011ef8:	7122      	strb	r2, [r4, #4]
10011efa:	0a1b      	lsrs	r3, r3, #8
10011efc:	7163      	strb	r3, [r4, #5]
10011efe:	230b      	movs	r3, #11
10011f00:	4e10      	ldr	r6, [pc, #64]	; (10011f44 <gapc_encrypt_cmd_handler+0x8c>)
10011f02:	2210      	movs	r2, #16
10011f04:	4810      	ldr	r0, [pc, #64]	; (10011f48 <gapc_encrypt_cmd_handler+0x90>)
10011f06:	7223      	strb	r3, [r4, #8]
10011f08:	7265      	strb	r5, [r4, #9]
10011f0a:	47b0      	blx	r6
10011f0c:	0a3b      	lsrs	r3, r7, #8
10011f0e:	9906      	ldr	r1, [sp, #24]
10011f10:	2208      	movs	r2, #8
10011f12:	480e      	ldr	r0, [pc, #56]	; (10011f4c <gapc_encrypt_cmd_handler+0x94>)
10011f14:	76e3      	strb	r3, [r4, #27]
10011f16:	76a7      	strb	r7, [r4, #26]
10011f18:	47b0      	blx	r6
10011f1a:	466a      	mov	r2, sp
10011f1c:	7f12      	ldrb	r2, [r2, #28]
10011f1e:	1d63      	adds	r3, r4, #5
10011f20:	77da      	strb	r2, [r3, #31]
10011f22:	231d      	movs	r3, #29
10011f24:	1c20      	adds	r0, r4, #0
10011f26:	71a3      	strb	r3, [r4, #6]
10011f28:	2125      	movs	r1, #37	; 0x25
10011f2a:	4b09      	ldr	r3, [pc, #36]	; (10011f50 <gapc_encrypt_cmd_handler+0x98>)
10011f2c:	71e5      	strb	r5, [r4, #7]
10011f2e:	4798      	blx	r3
10011f30:	b009      	add	sp, #36	; 0x24
10011f32:	bdf0      	pop	{r4, r5, r6, r7, pc}
10011f34:	10019e4c 	.word	0x10019e4c
10011f38:	10011971 	.word	0x10011971
10011f3c:	1001b090 	.word	0x1001b090
10011f40:	1001ad20 	.word	0x1001ad20
10011f44:	10015103 	.word	0x10015103
10011f48:	1001b09a 	.word	0x1001b09a
10011f4c:	1001b0ac 	.word	0x1001b0ac
10011f50:	1001166d 	.word	0x1001166d

10011f54 <gapc_encrypt_req_ind>:
10011f54:	b508      	push	{r3, lr}
10011f56:	0a00      	lsrs	r0, r0, #8
10011f58:	8010      	strh	r0, [r2, #0]
10011f5a:	784b      	ldrb	r3, [r1, #1]
10011f5c:	7808      	ldrb	r0, [r1, #0]
10011f5e:	021b      	lsls	r3, r3, #8
10011f60:	4303      	orrs	r3, r0
10011f62:	8053      	strh	r3, [r2, #2]
10011f64:	1d10      	adds	r0, r2, #4
10011f66:	3102      	adds	r1, #2
10011f68:	2208      	movs	r2, #8
10011f6a:	4b01      	ldr	r3, [pc, #4]	; (10011f70 <gapc_encrypt_req_ind+0x1c>)
10011f6c:	4798      	blx	r3
10011f6e:	bd08      	pop	{r3, pc}
10011f70:	10015103 	.word	0x10015103

10011f74 <gapc_encrypt_cfm_handler>:
10011f74:	b5f0      	push	{r4, r5, r6, r7, lr}
10011f76:	2500      	movs	r5, #0
10011f78:	b087      	sub	sp, #28
10011f7a:	9304      	str	r3, [sp, #16]
10011f7c:	ab0c      	add	r3, sp, #48	; 0x30
10011f7e:	781b      	ldrb	r3, [r3, #0]
10011f80:	1c17      	adds	r7, r2, #0
10011f82:	4a15      	ldr	r2, [pc, #84]	; (10011fd8 <gapc_encrypt_cfm_handler+0x64>)
10011f84:	1c06      	adds	r6, r0, #0
10011f86:	9305      	str	r3, [sp, #20]
10011f88:	9100      	str	r1, [sp, #0]
10011f8a:	9002      	str	r0, [sp, #8]
10011f8c:	1c29      	adds	r1, r5, #0
10011f8e:	1c2b      	adds	r3, r5, #0
10011f90:	9501      	str	r5, [sp, #4]
10011f92:	1c10      	adds	r0, r2, #0
10011f94:	4c11      	ldr	r4, [pc, #68]	; (10011fdc <gapc_encrypt_cfm_handler+0x68>)
10011f96:	47a0      	blx	r4
10011f98:	2318      	movs	r3, #24
10011f9a:	4c11      	ldr	r4, [pc, #68]	; (10011fe0 <gapc_encrypt_cfm_handler+0x6c>)
10011f9c:	9904      	ldr	r1, [sp, #16]
10011f9e:	7023      	strb	r3, [r4, #0]
10011fa0:	3b0a      	subs	r3, #10
10011fa2:	7063      	strb	r3, [r4, #1]
10011fa4:	70a3      	strb	r3, [r4, #2]
10011fa6:	4b0f      	ldr	r3, [pc, #60]	; (10011fe4 <gapc_encrypt_cfm_handler+0x70>)
10011fa8:	480f      	ldr	r0, [pc, #60]	; (10011fe8 <gapc_encrypt_cfm_handler+0x74>)
10011faa:	881a      	ldrh	r2, [r3, #0]
10011fac:	881b      	ldrh	r3, [r3, #0]
10011fae:	7122      	strb	r2, [r4, #4]
10011fb0:	0a1b      	lsrs	r3, r3, #8
10011fb2:	7163      	strb	r3, [r4, #5]
10011fb4:	2210      	movs	r2, #16
10011fb6:	4b0d      	ldr	r3, [pc, #52]	; (10011fec <gapc_encrypt_cfm_handler+0x78>)
10011fb8:	70e6      	strb	r6, [r4, #3]
10011fba:	7227      	strb	r7, [r4, #8]
10011fbc:	4798      	blx	r3
10011fbe:	466b      	mov	r3, sp
10011fc0:	7d1b      	ldrb	r3, [r3, #20]
10011fc2:	1c20      	adds	r0, r4, #0
10011fc4:	7663      	strb	r3, [r4, #25]
10011fc6:	2312      	movs	r3, #18
10011fc8:	211a      	movs	r1, #26
10011fca:	71a3      	strb	r3, [r4, #6]
10011fcc:	4b08      	ldr	r3, [pc, #32]	; (10011ff0 <gapc_encrypt_cfm_handler+0x7c>)
10011fce:	71e5      	strb	r5, [r4, #7]
10011fd0:	4798      	blx	r3
10011fd2:	b007      	add	sp, #28
10011fd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
10011fd6:	46c0      	nop			; (mov r8, r8)
10011fd8:	10019e5c 	.word	0x10019e5c
10011fdc:	10011971 	.word	0x10011971
10011fe0:	1001b090 	.word	0x1001b090
10011fe4:	1001ad20 	.word	0x1001ad20
10011fe8:	1001b099 	.word	0x1001b099
10011fec:	10015103 	.word	0x10015103
10011ff0:	1001166d 	.word	0x1001166d

10011ff4 <gapc_encrypt_ind>:
10011ff4:	780b      	ldrb	r3, [r1, #0]
10011ff6:	0a00      	lsrs	r0, r0, #8
10011ff8:	70d3      	strb	r3, [r2, #3]
10011ffa:	2300      	movs	r3, #0
10011ffc:	8010      	strh	r0, [r2, #0]
10011ffe:	7093      	strb	r3, [r2, #2]
10012000:	4770      	bx	lr
	...

10012004 <gapc_param_update_cfm_handler>:
10012004:	b538      	push	{r3, r4, r5, lr}
10012006:	2410      	movs	r4, #16
10012008:	1c05      	adds	r5, r0, #0
1001200a:	480e      	ldr	r0, [pc, #56]	; (10012044 <gapc_param_update_cfm_handler+0x40>)
1001200c:	7004      	strb	r4, [r0, #0]
1001200e:	3c02      	subs	r4, #2
10012010:	7044      	strb	r4, [r0, #1]
10012012:	7084      	strb	r4, [r0, #2]
10012014:	4c0c      	ldr	r4, [pc, #48]	; (10012048 <gapc_param_update_cfm_handler+0x44>)
10012016:	70c5      	strb	r5, [r0, #3]
10012018:	8825      	ldrh	r5, [r4, #0]
1001201a:	8824      	ldrh	r4, [r4, #0]
1001201c:	72c3      	strb	r3, [r0, #11]
1001201e:	0a1b      	lsrs	r3, r3, #8
10012020:	0a24      	lsrs	r4, r4, #8
10012022:	7303      	strb	r3, [r0, #12]
10012024:	2305      	movs	r3, #5
10012026:	7144      	strb	r4, [r0, #5]
10012028:	2400      	movs	r4, #0
1001202a:	7201      	strb	r1, [r0, #8]
1001202c:	7242      	strb	r2, [r0, #9]
1001202e:	7183      	strb	r3, [r0, #6]
10012030:	0a12      	lsrs	r2, r2, #8
10012032:	210d      	movs	r1, #13
10012034:	4b05      	ldr	r3, [pc, #20]	; (1001204c <gapc_param_update_cfm_handler+0x48>)
10012036:	7105      	strb	r5, [r0, #4]
10012038:	7282      	strb	r2, [r0, #10]
1001203a:	71c4      	strb	r4, [r0, #7]
1001203c:	4798      	blx	r3
1001203e:	1c20      	adds	r0, r4, #0
10012040:	bd38      	pop	{r3, r4, r5, pc}
10012042:	46c0      	nop			; (mov r8, r8)
10012044:	1001b090 	.word	0x1001b090
10012048:	1001ad20 	.word	0x1001ad20
1001204c:	1001166d 	.word	0x1001166d

10012050 <gapc_param_updated_ind>:
10012050:	2300      	movs	r3, #0
10012052:	0a00      	lsrs	r0, r0, #8
10012054:	8010      	strh	r0, [r2, #0]
10012056:	7093      	strb	r3, [r2, #2]
10012058:	784b      	ldrb	r3, [r1, #1]
1001205a:	7808      	ldrb	r0, [r1, #0]
1001205c:	021b      	lsls	r3, r3, #8
1001205e:	4303      	orrs	r3, r0
10012060:	8093      	strh	r3, [r2, #4]
10012062:	78cb      	ldrb	r3, [r1, #3]
10012064:	7888      	ldrb	r0, [r1, #2]
10012066:	021b      	lsls	r3, r3, #8
10012068:	4303      	orrs	r3, r0
1001206a:	80d3      	strh	r3, [r2, #6]
1001206c:	794b      	ldrb	r3, [r1, #5]
1001206e:	7909      	ldrb	r1, [r1, #4]
10012070:	021b      	lsls	r3, r3, #8
10012072:	430b      	orrs	r3, r1
10012074:	2007      	movs	r0, #7
10012076:	8113      	strh	r3, [r2, #8]
10012078:	4770      	bx	lr

1001207a <gapc_param_updated_req_ind>:
1001207a:	0a00      	lsrs	r0, r0, #8
1001207c:	8010      	strh	r0, [r2, #0]
1001207e:	784b      	ldrb	r3, [r1, #1]
10012080:	7808      	ldrb	r0, [r1, #0]
10012082:	021b      	lsls	r3, r3, #8
10012084:	4303      	orrs	r3, r0
10012086:	8053      	strh	r3, [r2, #2]
10012088:	78cb      	ldrb	r3, [r1, #3]
1001208a:	7888      	ldrb	r0, [r1, #2]
1001208c:	021b      	lsls	r3, r3, #8
1001208e:	4303      	orrs	r3, r0
10012090:	8093      	strh	r3, [r2, #4]
10012092:	794b      	ldrb	r3, [r1, #5]
10012094:	7908      	ldrb	r0, [r1, #4]
10012096:	021b      	lsls	r3, r3, #8
10012098:	4303      	orrs	r3, r0
1001209a:	80d3      	strh	r3, [r2, #6]
1001209c:	79cb      	ldrb	r3, [r1, #7]
1001209e:	7989      	ldrb	r1, [r1, #6]
100120a0:	021b      	lsls	r3, r3, #8
100120a2:	430b      	orrs	r3, r1
100120a4:	2008      	movs	r0, #8
100120a6:	8113      	strh	r3, [r2, #8]
100120a8:	4770      	bx	lr
	...

100120ac <gapc_dev_info_req_ind_handler>:
100120ac:	b508      	push	{r3, lr}
100120ae:	1c0b      	adds	r3, r1, #0
100120b0:	0a01      	lsrs	r1, r0, #8
100120b2:	8011      	strh	r1, [r2, #0]
100120b4:	7818      	ldrb	r0, [r3, #0]
100120b6:	7090      	strb	r0, [r2, #2]
100120b8:	2800      	cmp	r0, #0
100120ba:	d104      	bne.n	100120c6 <gapc_dev_info_req_ind_handler+0x1a>
100120bc:	4b03      	ldr	r3, [pc, #12]	; (100120cc <gapc_dev_info_req_ind_handler+0x20>)
100120be:	33aa      	adds	r3, #170	; 0xaa
100120c0:	881b      	ldrh	r3, [r3, #0]
100120c2:	2b00      	cmp	r3, #0
100120c4:	d001      	beq.n	100120ca <gapc_dev_info_req_ind_handler+0x1e>
100120c6:	4b02      	ldr	r3, [pc, #8]	; (100120d0 <gapc_dev_info_req_ind_handler+0x24>)
100120c8:	4798      	blx	r3
100120ca:	bd08      	pop	{r3, pc}
100120cc:	1001adb2 	.word	0x1001adb2
100120d0:	1001177d 	.word	0x1001177d

100120d4 <gapc_sec_req_ind>:
100120d4:	0a00      	lsrs	r0, r0, #8
100120d6:	8010      	strh	r0, [r2, #0]
100120d8:	7809      	ldrb	r1, [r1, #0]
100120da:	2301      	movs	r3, #1
100120dc:	1c08      	adds	r0, r1, #0
100120de:	0889      	lsrs	r1, r1, #2
100120e0:	4018      	ands	r0, r3
100120e2:	400b      	ands	r3, r1
100120e4:	70d0      	strb	r0, [r2, #3]
100120e6:	7113      	strb	r3, [r2, #4]
100120e8:	4770      	bx	lr

100120ea <gapc_sign_counter_ind_handler>:
100120ea:	0a00      	lsrs	r0, r0, #8
100120ec:	8010      	strh	r0, [r2, #0]
100120ee:	784b      	ldrb	r3, [r1, #1]
100120f0:	0218      	lsls	r0, r3, #8
100120f2:	788b      	ldrb	r3, [r1, #2]
100120f4:	041b      	lsls	r3, r3, #16
100120f6:	4303      	orrs	r3, r0
100120f8:	7808      	ldrb	r0, [r1, #0]
100120fa:	4303      	orrs	r3, r0
100120fc:	78c8      	ldrb	r0, [r1, #3]
100120fe:	0600      	lsls	r0, r0, #24
10012100:	4303      	orrs	r3, r0
10012102:	6053      	str	r3, [r2, #4]
10012104:	794b      	ldrb	r3, [r1, #5]
10012106:	0218      	lsls	r0, r3, #8
10012108:	798b      	ldrb	r3, [r1, #6]
1001210a:	041b      	lsls	r3, r3, #16
1001210c:	4303      	orrs	r3, r0
1001210e:	7908      	ldrb	r0, [r1, #4]
10012110:	79c9      	ldrb	r1, [r1, #7]
10012112:	4303      	orrs	r3, r0
10012114:	0609      	lsls	r1, r1, #24
10012116:	430b      	orrs	r3, r1
10012118:	2000      	movs	r0, #0
1001211a:	6093      	str	r3, [r2, #8]
1001211c:	4770      	bx	lr
	...

10012120 <gapc_peer_att_info_ind_handler>:
10012120:	b510      	push	{r4, lr}
10012122:	0a00      	lsrs	r0, r0, #8
10012124:	8010      	strh	r0, [r2, #0]
10012126:	7808      	ldrb	r0, [r1, #0]
10012128:	7090      	strb	r0, [r2, #2]
1001212a:	788b      	ldrb	r3, [r1, #2]
1001212c:	784c      	ldrb	r4, [r1, #1]
1001212e:	021b      	lsls	r3, r3, #8
10012130:	4323      	orrs	r3, r4
10012132:	8093      	strh	r3, [r2, #4]
10012134:	2801      	cmp	r0, #1
10012136:	d027      	beq.n	10012188 <gapc_peer_att_info_ind_handler+0x68>
10012138:	2800      	cmp	r0, #0
1001213a:	d017      	beq.n	1001216c <gapc_peer_att_info_ind_handler+0x4c>
1001213c:	2802      	cmp	r0, #2
1001213e:	d12a      	bne.n	10012196 <gapc_peer_att_info_ind_handler+0x76>
10012140:	790b      	ldrb	r3, [r1, #4]
10012142:	78c8      	ldrb	r0, [r1, #3]
10012144:	021b      	lsls	r3, r3, #8
10012146:	4303      	orrs	r3, r0
10012148:	8113      	strh	r3, [r2, #8]
1001214a:	798b      	ldrb	r3, [r1, #6]
1001214c:	7948      	ldrb	r0, [r1, #5]
1001214e:	021b      	lsls	r3, r3, #8
10012150:	4303      	orrs	r3, r0
10012152:	80d3      	strh	r3, [r2, #6]
10012154:	7a0b      	ldrb	r3, [r1, #8]
10012156:	79c8      	ldrb	r0, [r1, #7]
10012158:	021b      	lsls	r3, r3, #8
1001215a:	4303      	orrs	r3, r0
1001215c:	8193      	strh	r3, [r2, #12]
1001215e:	7a8b      	ldrb	r3, [r1, #10]
10012160:	7a49      	ldrb	r1, [r1, #9]
10012162:	021b      	lsls	r3, r3, #8
10012164:	430b      	orrs	r3, r1
10012166:	8153      	strh	r3, [r2, #10]
10012168:	2306      	movs	r3, #6
1001216a:	e013      	b.n	10012194 <gapc_peer_att_info_ind_handler+0x74>
1001216c:	1c14      	adds	r4, r2, #0
1001216e:	1c20      	adds	r0, r4, #0
10012170:	790a      	ldrb	r2, [r1, #4]
10012172:	78cb      	ldrb	r3, [r1, #3]
10012174:	0212      	lsls	r2, r2, #8
10012176:	431a      	orrs	r2, r3
10012178:	80e2      	strh	r2, [r4, #6]
1001217a:	4b07      	ldr	r3, [pc, #28]	; (10012198 <gapc_peer_att_info_ind_handler+0x78>)
1001217c:	3008      	adds	r0, #8
1001217e:	3105      	adds	r1, #5
10012180:	4798      	blx	r3
10012182:	2302      	movs	r3, #2
10012184:	70a3      	strb	r3, [r4, #2]
10012186:	e006      	b.n	10012196 <gapc_peer_att_info_ind_handler+0x76>
10012188:	790b      	ldrb	r3, [r1, #4]
1001218a:	78c9      	ldrb	r1, [r1, #3]
1001218c:	021b      	lsls	r3, r3, #8
1001218e:	430b      	orrs	r3, r1
10012190:	80d3      	strh	r3, [r2, #6]
10012192:	2305      	movs	r3, #5
10012194:	7093      	strb	r3, [r2, #2]
10012196:	bd10      	pop	{r4, pc}
10012198:	10015103 	.word	0x10015103

1001219c <gapc_con_channel_map_ind_handler>:
1001219c:	b508      	push	{r3, lr}
1001219e:	2300      	movs	r3, #0
100121a0:	0a00      	lsrs	r0, r0, #8
100121a2:	7013      	strb	r3, [r2, #0]
100121a4:	8050      	strh	r0, [r2, #2]
100121a6:	4b02      	ldr	r3, [pc, #8]	; (100121b0 <gapc_con_channel_map_ind_handler+0x14>)
100121a8:	1d10      	adds	r0, r2, #4
100121aa:	2205      	movs	r2, #5
100121ac:	4798      	blx	r3
100121ae:	bd08      	pop	{r3, pc}
100121b0:	10015103 	.word	0x10015103

100121b4 <gapc_lecb_connected>:
100121b4:	7843      	ldrb	r3, [r0, #1]
100121b6:	7802      	ldrb	r2, [r0, #0]
100121b8:	021b      	lsls	r3, r3, #8
100121ba:	4313      	orrs	r3, r2
100121bc:	800b      	strh	r3, [r1, #0]
100121be:	78c3      	ldrb	r3, [r0, #3]
100121c0:	7882      	ldrb	r2, [r0, #2]
100121c2:	021b      	lsls	r3, r3, #8
100121c4:	4313      	orrs	r3, r2
100121c6:	804b      	strh	r3, [r1, #2]
100121c8:	7943      	ldrb	r3, [r0, #5]
100121ca:	7902      	ldrb	r2, [r0, #4]
100121cc:	021b      	lsls	r3, r3, #8
100121ce:	4313      	orrs	r3, r2
100121d0:	808b      	strh	r3, [r1, #4]
100121d2:	79c3      	ldrb	r3, [r0, #7]
100121d4:	7982      	ldrb	r2, [r0, #6]
100121d6:	021b      	lsls	r3, r3, #8
100121d8:	4313      	orrs	r3, r2
100121da:	80cb      	strh	r3, [r1, #6]
100121dc:	2300      	movs	r3, #0
100121de:	720b      	strb	r3, [r1, #8]
100121e0:	4770      	bx	lr

100121e2 <gapc_lecb_disconnected>:
100121e2:	7843      	ldrb	r3, [r0, #1]
100121e4:	7802      	ldrb	r2, [r0, #0]
100121e6:	021b      	lsls	r3, r3, #8
100121e8:	4313      	orrs	r3, r2
100121ea:	800b      	strh	r3, [r1, #0]
100121ec:	78c3      	ldrb	r3, [r0, #3]
100121ee:	7882      	ldrb	r2, [r0, #2]
100121f0:	021b      	lsls	r3, r3, #8
100121f2:	4313      	orrs	r3, r2
100121f4:	804b      	strh	r3, [r1, #2]
100121f6:	4770      	bx	lr

100121f8 <gapc_lecb_connect_req_ind>:
100121f8:	7843      	ldrb	r3, [r0, #1]
100121fa:	7802      	ldrb	r2, [r0, #0]
100121fc:	021b      	lsls	r3, r3, #8
100121fe:	4313      	orrs	r3, r2
10012200:	800b      	strh	r3, [r1, #0]
10012202:	78c3      	ldrb	r3, [r0, #3]
10012204:	7882      	ldrb	r2, [r0, #2]
10012206:	021b      	lsls	r3, r3, #8
10012208:	4313      	orrs	r3, r2
1001220a:	804b      	strh	r3, [r1, #2]
1001220c:	7943      	ldrb	r3, [r0, #5]
1001220e:	7902      	ldrb	r2, [r0, #4]
10012210:	021b      	lsls	r3, r3, #8
10012212:	4313      	orrs	r3, r2
10012214:	808b      	strh	r3, [r1, #4]
10012216:	79c3      	ldrb	r3, [r0, #7]
10012218:	7982      	ldrb	r2, [r0, #6]
1001221a:	021b      	lsls	r3, r3, #8
1001221c:	4313      	orrs	r3, r2
1001221e:	80cb      	strh	r3, [r1, #6]
10012220:	4770      	bx	lr

10012222 <gapc_lecb_add_credit_resp_handler>:
10012222:	7843      	ldrb	r3, [r0, #1]
10012224:	7802      	ldrb	r2, [r0, #0]
10012226:	021b      	lsls	r3, r3, #8
10012228:	4313      	orrs	r3, r2
1001222a:	800b      	strh	r3, [r1, #0]
1001222c:	78c3      	ldrb	r3, [r0, #3]
1001222e:	7882      	ldrb	r2, [r0, #2]
10012230:	021b      	lsls	r3, r3, #8
10012232:	4313      	orrs	r3, r2
10012234:	804b      	strh	r3, [r1, #2]
10012236:	7943      	ldrb	r3, [r0, #5]
10012238:	7902      	ldrb	r2, [r0, #4]
1001223a:	021b      	lsls	r3, r3, #8
1001223c:	4313      	orrs	r3, r2
1001223e:	808b      	strh	r3, [r1, #4]
10012240:	4770      	bx	lr
	...

10012244 <gapm_reset_req_handler>:
10012244:	b573      	push	{r0, r1, r4, r5, r6, lr}
10012246:	466b      	mov	r3, sp
10012248:	4915      	ldr	r1, [pc, #84]	; (100122a0 <gapm_reset_req_handler+0x5c>)
1001224a:	4816      	ldr	r0, [pc, #88]	; (100122a4 <gapm_reset_req_handler+0x60>)
1001224c:	880c      	ldrh	r4, [r1, #0]
1001224e:	8809      	ldrh	r1, [r1, #0]
10012250:	1ddd      	adds	r5, r3, #7
10012252:	0a09      	lsrs	r1, r1, #8
10012254:	2300      	movs	r3, #0
10012256:	2202      	movs	r2, #2
10012258:	7141      	strb	r1, [r0, #5]
1001225a:	26d0      	movs	r6, #208	; 0xd0
1001225c:	2101      	movs	r1, #1
1001225e:	7104      	strb	r4, [r0, #4]
10012260:	4c11      	ldr	r4, [pc, #68]	; (100122a8 <gapm_reset_req_handler+0x64>)
10012262:	702b      	strb	r3, [r5, #0]
10012264:	7002      	strb	r2, [r0, #0]
10012266:	70c3      	strb	r3, [r0, #3]
10012268:	320b      	adds	r2, #11
1001226a:	7201      	strb	r1, [r0, #8]
1001226c:	7181      	strb	r1, [r0, #6]
1001226e:	71c3      	strb	r3, [r0, #7]
10012270:	3108      	adds	r1, #8
10012272:	4b0e      	ldr	r3, [pc, #56]	; (100122ac <gapm_reset_req_handler+0x68>)
10012274:	0136      	lsls	r6, r6, #4
10012276:	7042      	strb	r2, [r0, #1]
10012278:	7082      	strb	r2, [r0, #2]
1001227a:	80a2      	strh	r2, [r4, #4]
1001227c:	8026      	strh	r6, [r4, #0]
1001227e:	4798      	blx	r3
10012280:	1c28      	adds	r0, r5, #0
10012282:	4b0b      	ldr	r3, [pc, #44]	; (100122b0 <gapm_reset_req_handler+0x6c>)
10012284:	4798      	blx	r3
10012286:	782b      	ldrb	r3, [r5, #0]
10012288:	20e2      	movs	r0, #226	; 0xe2
1001228a:	2b00      	cmp	r3, #0
1001228c:	d106      	bne.n	1001229c <gapm_reset_req_handler+0x58>
1001228e:	68a3      	ldr	r3, [r4, #8]
10012290:	20e2      	movs	r0, #226	; 0xe2
10012292:	781a      	ldrb	r2, [r3, #0]
10012294:	785b      	ldrb	r3, [r3, #1]
10012296:	2a01      	cmp	r2, #1
10012298:	d100      	bne.n	1001229c <gapm_reset_req_handler+0x58>
1001229a:	1c18      	adds	r0, r3, #0
1001229c:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
1001229e:	46c0      	nop			; (mov r8, r8)
100122a0:	1001ad20 	.word	0x1001ad20
100122a4:	1001b090 	.word	0x1001b090
100122a8:	1001ad14 	.word	0x1001ad14
100122ac:	1001166d 	.word	0x1001166d
100122b0:	100116d1 	.word	0x100116d1

100122b4 <gapm_set_dev_config_cmd_handler>:
100122b4:	b5f0      	push	{r4, r5, r6, r7, lr}
100122b6:	b089      	sub	sp, #36	; 0x24
100122b8:	9303      	str	r3, [sp, #12]
100122ba:	ab0e      	add	r3, sp, #56	; 0x38
100122bc:	781b      	ldrb	r3, [r3, #0]
100122be:	4c37      	ldr	r4, [pc, #220]	; (1001239c <gapm_set_dev_config_cmd_handler+0xe8>)
100122c0:	9304      	str	r3, [sp, #16]
100122c2:	ab0f      	add	r3, sp, #60	; 0x3c
100122c4:	781b      	ldrb	r3, [r3, #0]
100122c6:	270d      	movs	r7, #13
100122c8:	9305      	str	r3, [sp, #20]
100122ca:	ab10      	add	r3, sp, #64	; 0x40
100122cc:	881b      	ldrh	r3, [r3, #0]
100122ce:	72a1      	strb	r1, [r4, #10]
100122d0:	9300      	str	r3, [sp, #0]
100122d2:	ab11      	add	r3, sp, #68	; 0x44
100122d4:	881b      	ldrh	r3, [r3, #0]
100122d6:	0a09      	lsrs	r1, r1, #8
100122d8:	9301      	str	r3, [sp, #4]
100122da:	ab12      	add	r3, sp, #72	; 0x48
100122dc:	881b      	ldrh	r3, [r3, #0]
100122de:	7260      	strb	r0, [r4, #9]
100122e0:	9302      	str	r3, [sp, #8]
100122e2:	ab06      	add	r3, sp, #24
100122e4:	1dde      	adds	r6, r3, #7
100122e6:	2300      	movs	r3, #0
100122e8:	7033      	strb	r3, [r6, #0]
100122ea:	2304      	movs	r3, #4
100122ec:	7023      	strb	r3, [r4, #0]
100122ee:	2300      	movs	r3, #0
100122f0:	70e3      	strb	r3, [r4, #3]
100122f2:	4b2b      	ldr	r3, [pc, #172]	; (100123a0 <gapm_set_dev_config_cmd_handler+0xec>)
100122f4:	72e1      	strb	r1, [r4, #11]
100122f6:	881d      	ldrh	r5, [r3, #0]
100122f8:	881b      	ldrh	r3, [r3, #0]
100122fa:	1c11      	adds	r1, r2, #0
100122fc:	0a1b      	lsrs	r3, r3, #8
100122fe:	7163      	strb	r3, [r4, #5]
10012300:	2303      	movs	r3, #3
10012302:	7125      	strb	r5, [r4, #4]
10012304:	2206      	movs	r2, #6
10012306:	4d27      	ldr	r5, [pc, #156]	; (100123a4 <gapm_set_dev_config_cmd_handler+0xf0>)
10012308:	4827      	ldr	r0, [pc, #156]	; (100123a8 <gapm_set_dev_config_cmd_handler+0xf4>)
1001230a:	7223      	strb	r3, [r4, #8]
1001230c:	7067      	strb	r7, [r4, #1]
1001230e:	70a7      	strb	r7, [r4, #2]
10012310:	47a8      	blx	r5
10012312:	9903      	ldr	r1, [sp, #12]
10012314:	2210      	movs	r2, #16
10012316:	4825      	ldr	r0, [pc, #148]	; (100123ac <gapm_set_dev_config_cmd_handler+0xf8>)
10012318:	47a8      	blx	r5
1001231a:	466a      	mov	r2, sp
1001231c:	7c12      	ldrb	r2, [r2, #16]
1001231e:	1ce3      	adds	r3, r4, #3
10012320:	77da      	strb	r2, [r3, #31]
10012322:	466a      	mov	r2, sp
10012324:	7d12      	ldrb	r2, [r2, #20]
10012326:	1d23      	adds	r3, r4, #4
10012328:	77da      	strb	r2, [r3, #31]
1001232a:	466a      	mov	r2, sp
1001232c:	7812      	ldrb	r2, [r2, #0]
1001232e:	1d63      	adds	r3, r4, #5
10012330:	77da      	strb	r2, [r3, #31]
10012332:	9b00      	ldr	r3, [sp, #0]
10012334:	1da2      	adds	r2, r4, #6
10012336:	0a1b      	lsrs	r3, r3, #8
10012338:	77d3      	strb	r3, [r2, #31]
1001233a:	466a      	mov	r2, sp
1001233c:	7912      	ldrb	r2, [r2, #4]
1001233e:	1de3      	adds	r3, r4, #7
10012340:	77da      	strb	r2, [r3, #31]
10012342:	1c22      	adds	r2, r4, #0
10012344:	9b01      	ldr	r3, [sp, #4]
10012346:	3208      	adds	r2, #8
10012348:	0a1b      	lsrs	r3, r3, #8
1001234a:	77d3      	strb	r3, [r2, #31]
1001234c:	466a      	mov	r2, sp
1001234e:	1c23      	adds	r3, r4, #0
10012350:	7a12      	ldrb	r2, [r2, #8]
10012352:	3328      	adds	r3, #40	; 0x28
10012354:	701a      	strb	r2, [r3, #0]
10012356:	1c22      	adds	r2, r4, #0
10012358:	9b02      	ldr	r3, [sp, #8]
1001235a:	3229      	adds	r2, #41	; 0x29
1001235c:	0a1b      	lsrs	r3, r3, #8
1001235e:	7013      	strb	r3, [r2, #0]
10012360:	23d0      	movs	r3, #208	; 0xd0
10012362:	4d13      	ldr	r5, [pc, #76]	; (100123b0 <gapm_set_dev_config_cmd_handler+0xfc>)
10012364:	011b      	lsls	r3, r3, #4
10012366:	802b      	strh	r3, [r5, #0]
10012368:	2322      	movs	r3, #34	; 0x22
1001236a:	71a3      	strb	r3, [r4, #6]
1001236c:	2300      	movs	r3, #0
1001236e:	212a      	movs	r1, #42	; 0x2a
10012370:	71e3      	strb	r3, [r4, #7]
10012372:	1c20      	adds	r0, r4, #0
10012374:	4b0f      	ldr	r3, [pc, #60]	; (100123b4 <gapm_set_dev_config_cmd_handler+0x100>)
10012376:	80af      	strh	r7, [r5, #4]
10012378:	4798      	blx	r3
1001237a:	1c30      	adds	r0, r6, #0
1001237c:	4b0e      	ldr	r3, [pc, #56]	; (100123b8 <gapm_set_dev_config_cmd_handler+0x104>)
1001237e:	4798      	blx	r3
10012380:	7833      	ldrb	r3, [r6, #0]
10012382:	20e2      	movs	r0, #226	; 0xe2
10012384:	2b00      	cmp	r3, #0
10012386:	d106      	bne.n	10012396 <gapm_set_dev_config_cmd_handler+0xe2>
10012388:	68ab      	ldr	r3, [r5, #8]
1001238a:	20e2      	movs	r0, #226	; 0xe2
1001238c:	781a      	ldrb	r2, [r3, #0]
1001238e:	785b      	ldrb	r3, [r3, #1]
10012390:	2a03      	cmp	r2, #3
10012392:	d100      	bne.n	10012396 <gapm_set_dev_config_cmd_handler+0xe2>
10012394:	1c18      	adds	r0, r3, #0
10012396:	b009      	add	sp, #36	; 0x24
10012398:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001239a:	46c0      	nop			; (mov r8, r8)
1001239c:	1001b090 	.word	0x1001b090
100123a0:	1001ad20 	.word	0x1001ad20
100123a4:	10015103 	.word	0x10015103
100123a8:	1001b09c 	.word	0x1001b09c
100123ac:	1001b0a2 	.word	0x1001b0a2
100123b0:	1001ad14 	.word	0x1001ad14
100123b4:	1001166d 	.word	0x1001166d
100123b8:	100116d1 	.word	0x100116d1

100123bc <gapm_get_dev_config_cmd_handler>:
100123bc:	4684      	mov	ip, r0
100123be:	4663      	mov	r3, ip
100123c0:	b5f0      	push	{r4, r5, r6, r7, lr}
100123c2:	b085      	sub	sp, #20
100123c4:	9100      	str	r1, [sp, #0]
100123c6:	20cf      	movs	r0, #207	; 0xcf
100123c8:	2b01      	cmp	r3, #1
100123ca:	d854      	bhi.n	10012476 <gapm_get_dev_config_cmd_handler+0xba>
100123cc:	2900      	cmp	r1, #0
100123ce:	d052      	beq.n	10012476 <gapm_get_dev_config_cmd_handler+0xba>
100123d0:	2200      	movs	r2, #0
100123d2:	492a      	ldr	r1, [pc, #168]	; (1001247c <gapm_get_dev_config_cmd_handler+0xc0>)
100123d4:	ab02      	add	r3, sp, #8
100123d6:	880c      	ldrh	r4, [r1, #0]
100123d8:	8809      	ldrh	r1, [r1, #0]
100123da:	1d9f      	adds	r7, r3, #6
100123dc:	719a      	strb	r2, [r3, #6]
100123de:	4b28      	ldr	r3, [pc, #160]	; (10012480 <gapm_get_dev_config_cmd_handler+0xc4>)
100123e0:	0a09      	lsrs	r1, r1, #8
100123e2:	250d      	movs	r5, #13
100123e4:	2606      	movs	r6, #6
100123e6:	7159      	strb	r1, [r3, #5]
100123e8:	4661      	mov	r1, ip
100123ea:	701e      	strb	r6, [r3, #0]
100123ec:	705d      	strb	r5, [r3, #1]
100123ee:	709d      	strb	r5, [r3, #2]
100123f0:	70da      	strb	r2, [r3, #3]
100123f2:	711c      	strb	r4, [r3, #4]
100123f4:	2901      	cmp	r1, #1
100123f6:	d13e      	bne.n	10012476 <gapm_get_dev_config_cmd_handler+0xba>
100123f8:	21d0      	movs	r1, #208	; 0xd0
100123fa:	4c22      	ldr	r4, [pc, #136]	; (10012484 <gapm_get_dev_config_cmd_handler+0xc8>)
100123fc:	0109      	lsls	r1, r1, #4
100123fe:	8061      	strh	r1, [r4, #2]
10012400:	4921      	ldr	r1, [pc, #132]	; (10012488 <gapm_get_dev_config_cmd_handler+0xcc>)
10012402:	71da      	strb	r2, [r3, #7]
10012404:	8021      	strh	r1, [r4, #0]
10012406:	4661      	mov	r1, ip
10012408:	721e      	strb	r6, [r3, #8]
1001240a:	7199      	strb	r1, [r3, #6]
1001240c:	1c18      	adds	r0, r3, #0
1001240e:	2109      	movs	r1, #9
10012410:	4b1e      	ldr	r3, [pc, #120]	; (1001248c <gapm_get_dev_config_cmd_handler+0xd0>)
10012412:	80a5      	strh	r5, [r4, #4]
10012414:	4798      	blx	r3
10012416:	1c38      	adds	r0, r7, #0
10012418:	4b1d      	ldr	r3, [pc, #116]	; (10012490 <gapm_get_dev_config_cmd_handler+0xd4>)
1001241a:	4798      	blx	r3
1001241c:	783b      	ldrb	r3, [r7, #0]
1001241e:	20e2      	movs	r0, #226	; 0xe2
10012420:	9301      	str	r3, [sp, #4]
10012422:	2b00      	cmp	r3, #0
10012424:	d127      	bne.n	10012476 <gapm_get_dev_config_cmd_handler+0xba>
10012426:	8821      	ldrh	r1, [r4, #0]
10012428:	4a1a      	ldr	r2, [pc, #104]	; (10012494 <gapm_get_dev_config_cmd_handler+0xd8>)
1001242a:	68a7      	ldr	r7, [r4, #8]
1001242c:	3b01      	subs	r3, #1
1001242e:	4291      	cmp	r1, r2
10012430:	d001      	beq.n	10012436 <gapm_get_dev_config_cmd_handler+0x7a>
10012432:	8023      	strh	r3, [r4, #0]
10012434:	e01a      	b.n	1001246c <gapm_get_dev_config_cmd_handler+0xb0>
10012436:	8063      	strh	r3, [r4, #2]
10012438:	9b00      	ldr	r3, [sp, #0]
1001243a:	1c39      	adds	r1, r7, #0
1001243c:	1c58      	adds	r0, r3, #1
1001243e:	1c32      	adds	r2, r6, #0
10012440:	4b15      	ldr	r3, [pc, #84]	; (10012498 <gapm_get_dev_config_cmd_handler+0xdc>)
10012442:	4798      	blx	r3
10012444:	79bb      	ldrb	r3, [r7, #6]
10012446:	9a00      	ldr	r2, [sp, #0]
10012448:	7013      	strb	r3, [r2, #0]
1001244a:	23d0      	movs	r3, #208	; 0xd0
1001244c:	011b      	lsls	r3, r3, #4
1001244e:	8023      	strh	r3, [r4, #0]
10012450:	ab02      	add	r3, sp, #8
10012452:	80a5      	strh	r5, [r4, #4]
10012454:	1ddd      	adds	r5, r3, #7
10012456:	466b      	mov	r3, sp
10012458:	791b      	ldrb	r3, [r3, #4]
1001245a:	1c28      	adds	r0, r5, #0
1001245c:	702b      	strb	r3, [r5, #0]
1001245e:	4b0c      	ldr	r3, [pc, #48]	; (10012490 <gapm_get_dev_config_cmd_handler+0xd4>)
10012460:	4798      	blx	r3
10012462:	782b      	ldrb	r3, [r5, #0]
10012464:	20d0      	movs	r0, #208	; 0xd0
10012466:	2b00      	cmp	r3, #0
10012468:	d105      	bne.n	10012476 <gapm_get_dev_config_cmd_handler+0xba>
1001246a:	68a7      	ldr	r7, [r4, #8]
1001246c:	783b      	ldrb	r3, [r7, #0]
1001246e:	7878      	ldrb	r0, [r7, #1]
10012470:	2b06      	cmp	r3, #6
10012472:	d000      	beq.n	10012476 <gapm_get_dev_config_cmd_handler+0xba>
10012474:	20e2      	movs	r0, #226	; 0xe2
10012476:	b005      	add	sp, #20
10012478:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001247a:	46c0      	nop			; (mov r8, r8)
1001247c:	1001ad20 	.word	0x1001ad20
10012480:	1001b090 	.word	0x1001b090
10012484:	1001ad14 	.word	0x1001ad14
10012488:	00000d08 	.word	0x00000d08
1001248c:	1001166d 	.word	0x1001166d
10012490:	100116d1 	.word	0x100116d1
10012494:	0000ffff 	.word	0x0000ffff
10012498:	10015103 	.word	0x10015103

1001249c <gapm_cancel_cmd_handler>:
1001249c:	b537      	push	{r0, r1, r2, r4, r5, lr}
1001249e:	4916      	ldr	r1, [pc, #88]	; (100124f8 <gapm_cancel_cmd_handler+0x5c>)
100124a0:	4816      	ldr	r0, [pc, #88]	; (100124fc <gapm_cancel_cmd_handler+0x60>)
100124a2:	880c      	ldrh	r4, [r1, #0]
100124a4:	8809      	ldrh	r1, [r1, #0]
100124a6:	466b      	mov	r3, sp
100124a8:	0a09      	lsrs	r1, r1, #8
100124aa:	7141      	strb	r1, [r0, #5]
100124ac:	2102      	movs	r1, #2
100124ae:	2203      	movs	r2, #3
100124b0:	7201      	strb	r1, [r0, #8]
100124b2:	21d0      	movs	r1, #208	; 0xd0
100124b4:	1ddd      	adds	r5, r3, #7
100124b6:	2300      	movs	r3, #0
100124b8:	7104      	strb	r4, [r0, #4]
100124ba:	4c11      	ldr	r4, [pc, #68]	; (10012500 <gapm_cancel_cmd_handler+0x64>)
100124bc:	7002      	strb	r2, [r0, #0]
100124be:	0109      	lsls	r1, r1, #4
100124c0:	320a      	adds	r2, #10
100124c2:	702b      	strb	r3, [r5, #0]
100124c4:	7042      	strb	r2, [r0, #1]
100124c6:	7082      	strb	r2, [r0, #2]
100124c8:	70c3      	strb	r3, [r0, #3]
100124ca:	8021      	strh	r1, [r4, #0]
100124cc:	80a2      	strh	r2, [r4, #4]
100124ce:	71c3      	strb	r3, [r0, #7]
100124d0:	3a0c      	subs	r2, #12
100124d2:	2109      	movs	r1, #9
100124d4:	4b0b      	ldr	r3, [pc, #44]	; (10012504 <gapm_cancel_cmd_handler+0x68>)
100124d6:	7182      	strb	r2, [r0, #6]
100124d8:	4798      	blx	r3
100124da:	1c28      	adds	r0, r5, #0
100124dc:	4b0a      	ldr	r3, [pc, #40]	; (10012508 <gapm_cancel_cmd_handler+0x6c>)
100124de:	4798      	blx	r3
100124e0:	7828      	ldrb	r0, [r5, #0]
100124e2:	2800      	cmp	r0, #0
100124e4:	d001      	beq.n	100124ea <gapm_cancel_cmd_handler+0x4e>
100124e6:	20e2      	movs	r0, #226	; 0xe2
100124e8:	e004      	b.n	100124f4 <gapm_cancel_cmd_handler+0x58>
100124ea:	68a3      	ldr	r3, [r4, #8]
100124ec:	785b      	ldrb	r3, [r3, #1]
100124ee:	2b44      	cmp	r3, #68	; 0x44
100124f0:	d000      	beq.n	100124f4 <gapm_cancel_cmd_handler+0x58>
100124f2:	1c18      	adds	r0, r3, #0
100124f4:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
100124f6:	46c0      	nop			; (mov r8, r8)
100124f8:	1001ad20 	.word	0x1001ad20
100124fc:	1001b090 	.word	0x1001b090
10012500:	1001ad14 	.word	0x1001ad14
10012504:	1001166d 	.word	0x1001166d
10012508:	100116d1 	.word	0x100116d1

1001250c <gapm_dev_bdaddr_ind_handler>:
1001250c:	b538      	push	{r3, r4, r5, lr}
1001250e:	1c05      	adds	r5, r0, #0
10012510:	1c0c      	adds	r4, r1, #0
10012512:	1c48      	adds	r0, r1, #1
10012514:	2206      	movs	r2, #6
10012516:	1c29      	adds	r1, r5, #0
10012518:	4b02      	ldr	r3, [pc, #8]	; (10012524 <gapm_dev_bdaddr_ind_handler+0x18>)
1001251a:	4798      	blx	r3
1001251c:	79ab      	ldrb	r3, [r5, #6]
1001251e:	2000      	movs	r0, #0
10012520:	7023      	strb	r3, [r4, #0]
10012522:	bd38      	pop	{r3, r4, r5, pc}
10012524:	10015103 	.word	0x10015103

10012528 <gapm_cmp_evt>:
10012528:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1001252a:	7803      	ldrb	r3, [r0, #0]
1001252c:	7845      	ldrb	r5, [r0, #1]
1001252e:	3b0c      	subs	r3, #12
10012530:	1e18      	subs	r0, r3, #0
10012532:	280b      	cmp	r0, #11
10012534:	d900      	bls.n	10012538 <gapm_cmp_evt+0x10>
10012536:	e08d      	b.n	10012654 <gapm_cmp_evt+0x12c>
10012538:	1c0c      	adds	r4, r1, #0
1001253a:	f000 fd5f 	bl	10012ffc <__gnu_thumb1_case_uqi>
1001253e:	1952      	.short	0x1952
10012540:	068b1919 	.word	0x068b1919
10012544:	8b595906 	.word	0x8b595906
10012548:	0d8b      	.short	0x0d8b
1001254a:	2300      	movs	r3, #0
1001254c:	2d45      	cmp	r5, #69	; 0x45
1001254e:	d000      	beq.n	10012552 <gapm_cmp_evt+0x2a>
10012550:	1c2b      	adds	r3, r5, #0
10012552:	7023      	strb	r3, [r4, #0]
10012554:	2002      	movs	r0, #2
10012556:	e07e      	b.n	10012656 <gapm_cmp_evt+0x12e>
10012558:	203b      	movs	r0, #59	; 0x3b
1001255a:	2d00      	cmp	r5, #0
1001255c:	d100      	bne.n	10012560 <gapm_cmp_evt+0x38>
1001255e:	e07a      	b.n	10012656 <gapm_cmp_evt+0x12e>
10012560:	700d      	strb	r5, [r1, #0]
10012562:	1c48      	adds	r0, r1, #1
10012564:	2210      	movs	r2, #16
10012566:	2100      	movs	r1, #0
10012568:	4b3b      	ldr	r3, [pc, #236]	; (10012658 <gapm_cmp_evt+0x130>)
1001256a:	4798      	blx	r3
1001256c:	200f      	movs	r0, #15
1001256e:	e072      	b.n	10012656 <gapm_cmp_evt+0x12e>
10012570:	2d00      	cmp	r5, #0
10012572:	d134      	bne.n	100125de <gapm_cmp_evt+0xb6>
10012574:	4b39      	ldr	r3, [pc, #228]	; (1001265c <gapm_cmp_evt+0x134>)
10012576:	4798      	blx	r3
10012578:	1e43      	subs	r3, r0, #1
1001257a:	b2db      	uxtb	r3, r3
1001257c:	1c28      	adds	r0, r5, #0
1001257e:	2b06      	cmp	r3, #6
10012580:	d869      	bhi.n	10012656 <gapm_cmp_evt+0x12e>
10012582:	466b      	mov	r3, sp
10012584:	4e36      	ldr	r6, [pc, #216]	; (10012660 <gapm_cmp_evt+0x138>)
10012586:	1dd9      	adds	r1, r3, #7
10012588:	8db0      	ldrh	r0, [r6, #44]	; 0x2c
1001258a:	4b36      	ldr	r3, [pc, #216]	; (10012664 <gapm_cmp_evt+0x13c>)
1001258c:	4798      	blx	r3
1001258e:	2312      	movs	r3, #18
10012590:	4358      	muls	r0, r3
10012592:	4935      	ldr	r1, [pc, #212]	; (10012668 <gapm_cmp_evt+0x140>)
10012594:	1809      	adds	r1, r1, r0
10012596:	1c0b      	adds	r3, r1, #0
10012598:	894a      	ldrh	r2, [r1, #10]
1001259a:	3308      	adds	r3, #8
1001259c:	8122      	strh	r2, [r4, #8]
1001259e:	784f      	ldrb	r7, [r1, #1]
100125a0:	72a5      	strb	r5, [r4, #10]
100125a2:	7027      	strb	r7, [r4, #0]
100125a4:	898a      	ldrh	r2, [r1, #12]
100125a6:	1c60      	adds	r0, r4, #1
100125a8:	81a2      	strh	r2, [r4, #12]
100125aa:	88db      	ldrh	r3, [r3, #6]
100125ac:	3102      	adds	r1, #2
100125ae:	81e3      	strh	r3, [r4, #14]
100125b0:	89cb      	ldrh	r3, [r1, #14]
100125b2:	2206      	movs	r2, #6
100125b4:	8223      	strh	r3, [r4, #16]
100125b6:	4b2d      	ldr	r3, [pc, #180]	; (1001266c <gapm_cmp_evt+0x144>)
100125b8:	4798      	blx	r3
100125ba:	2f00      	cmp	r7, #0
100125bc:	d00a      	beq.n	100125d4 <gapm_cmp_evt+0xac>
100125be:	79a3      	ldrb	r3, [r4, #6]
100125c0:	223f      	movs	r2, #63	; 0x3f
100125c2:	1c19      	adds	r1, r3, #0
100125c4:	3501      	adds	r5, #1
100125c6:	4391      	bics	r1, r2
100125c8:	29c0      	cmp	r1, #192	; 0xc0
100125ca:	d003      	beq.n	100125d4 <gapm_cmp_evt+0xac>
100125cc:	065b      	lsls	r3, r3, #25
100125ce:	0fdb      	lsrs	r3, r3, #31
100125d0:	3502      	adds	r5, #2
100125d2:	1aed      	subs	r5, r5, r3
100125d4:	2301      	movs	r3, #1
100125d6:	425b      	negs	r3, r3
100125d8:	7025      	strb	r5, [r4, #0]
100125da:	85b3      	strh	r3, [r6, #44]	; 0x2c
100125dc:	e038      	b.n	10012650 <gapm_cmp_evt+0x128>
100125de:	700d      	strb	r5, [r1, #0]
100125e0:	e004      	b.n	100125ec <gapm_cmp_evt+0xc4>
100125e2:	2300      	movs	r3, #0
100125e4:	2d45      	cmp	r5, #69	; 0x45
100125e6:	d000      	beq.n	100125ea <gapm_cmp_evt+0xc2>
100125e8:	1c2b      	adds	r3, r5, #0
100125ea:	7023      	strb	r3, [r4, #0]
100125ec:	2003      	movs	r0, #3
100125ee:	e032      	b.n	10012656 <gapm_cmp_evt+0x12e>
100125f0:	4e1b      	ldr	r6, [pc, #108]	; (10012660 <gapm_cmp_evt+0x138>)
100125f2:	2100      	movs	r1, #0
100125f4:	8db0      	ldrh	r0, [r6, #44]	; 0x2c
100125f6:	4b1b      	ldr	r3, [pc, #108]	; (10012664 <gapm_cmp_evt+0x13c>)
100125f8:	4798      	blx	r3
100125fa:	2807      	cmp	r0, #7
100125fc:	d818      	bhi.n	10012630 <gapm_cmp_evt+0x108>
100125fe:	2301      	movs	r3, #1
10012600:	425b      	negs	r3, r3
10012602:	85b3      	strh	r3, [r6, #44]	; 0x2c
10012604:	3313      	adds	r3, #19
10012606:	4358      	muls	r0, r3
10012608:	4917      	ldr	r1, [pc, #92]	; (10012668 <gapm_cmp_evt+0x140>)
1001260a:	1809      	adds	r1, r1, r0
1001260c:	1c0b      	adds	r3, r1, #0
1001260e:	894a      	ldrh	r2, [r1, #10]
10012610:	3308      	adds	r3, #8
10012612:	8122      	strh	r2, [r4, #8]
10012614:	784a      	ldrb	r2, [r1, #1]
10012616:	72a5      	strb	r5, [r4, #10]
10012618:	7022      	strb	r2, [r4, #0]
1001261a:	898a      	ldrh	r2, [r1, #12]
1001261c:	1c60      	adds	r0, r4, #1
1001261e:	81a2      	strh	r2, [r4, #12]
10012620:	88db      	ldrh	r3, [r3, #6]
10012622:	3102      	adds	r1, #2
10012624:	81e3      	strh	r3, [r4, #14]
10012626:	89cb      	ldrh	r3, [r1, #14]
10012628:	2206      	movs	r2, #6
1001262a:	8223      	strh	r3, [r4, #16]
1001262c:	4b0f      	ldr	r3, [pc, #60]	; (1001266c <gapm_cmp_evt+0x144>)
1001262e:	4798      	blx	r3
10012630:	2200      	movs	r2, #0
10012632:	7823      	ldrb	r3, [r4, #0]
10012634:	4293      	cmp	r3, r2
10012636:	d00a      	beq.n	1001264e <gapm_cmp_evt+0x126>
10012638:	79a3      	ldrb	r3, [r4, #6]
1001263a:	323f      	adds	r2, #63	; 0x3f
1001263c:	1c19      	adds	r1, r3, #0
1001263e:	4391      	bics	r1, r2
10012640:	3a3e      	subs	r2, #62	; 0x3e
10012642:	29c0      	cmp	r1, #192	; 0xc0
10012644:	d003      	beq.n	1001264e <gapm_cmp_evt+0x126>
10012646:	065b      	lsls	r3, r3, #25
10012648:	0fdb      	lsrs	r3, r3, #31
1001264a:	3202      	adds	r2, #2
1001264c:	1ad2      	subs	r2, r2, r3
1001264e:	7022      	strb	r2, [r4, #0]
10012650:	2005      	movs	r0, #5
10012652:	e000      	b.n	10012656 <gapm_cmp_evt+0x12e>
10012654:	2000      	movs	r0, #0
10012656:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10012658:	10015115 	.word	0x10015115
1001265c:	10011879 	.word	0x10011879
10012660:	1001adb2 	.word	0x1001adb2
10012664:	1001183d 	.word	0x1001183d
10012668:	1001ad22 	.word	0x1001ad22
1001266c:	10015103 	.word	0x10015103

10012670 <gapm_start_adv_cmd_handler>:
10012670:	b5f0      	push	{r4, r5, r6, r7, lr}
10012672:	b089      	sub	sp, #36	; 0x24
10012674:	9303      	str	r3, [sp, #12]
10012676:	ab0e      	add	r3, sp, #56	; 0x38
10012678:	9102      	str	r1, [sp, #8]
1001267a:	cb02      	ldmia	r3!, {r1}
1001267c:	aa08      	add	r2, sp, #32
1001267e:	881b      	ldrh	r3, [r3, #0]
10012680:	4e3c      	ldr	r6, [pc, #240]	; (10012774 <gapm_start_adv_cmd_handler+0x104>)
10012682:	9300      	str	r3, [sp, #0]
10012684:	ab10      	add	r3, sp, #64	; 0x40
10012686:	881b      	ldrh	r3, [r3, #0]
10012688:	240d      	movs	r4, #13
1001268a:	469c      	mov	ip, r3
1001268c:	ab11      	add	r3, sp, #68	; 0x44
1001268e:	781b      	ldrb	r3, [r3, #0]
10012690:	9304      	str	r3, [sp, #16]
10012692:	ab12      	add	r3, sp, #72	; 0x48
10012694:	781b      	ldrb	r3, [r3, #0]
10012696:	9305      	str	r3, [sp, #20]
10012698:	ab13      	add	r3, sp, #76	; 0x4c
1001269a:	781b      	ldrb	r3, [r3, #0]
1001269c:	9306      	str	r3, [sp, #24]
1001269e:	ab14      	add	r3, sp, #80	; 0x50
100126a0:	781b      	ldrb	r3, [r3, #0]
100126a2:	9301      	str	r3, [sp, #4]
100126a4:	2319      	movs	r3, #25
100126a6:	189b      	adds	r3, r3, r2
100126a8:	7fdd      	ldrb	r5, [r3, #31]
100126aa:	ab18      	add	r3, sp, #96	; 0x60
100126ac:	881f      	ldrh	r7, [r3, #0]
100126ae:	ab19      	add	r3, sp, #100	; 0x64
100126b0:	781b      	ldrb	r3, [r3, #0]
100126b2:	8832      	ldrh	r2, [r6, #0]
100126b4:	9307      	str	r3, [sp, #28]
100126b6:	4b30      	ldr	r3, [pc, #192]	; (10012778 <gapm_start_adv_cmd_handler+0x108>)
100126b8:	8836      	ldrh	r6, [r6, #0]
100126ba:	711a      	strb	r2, [r3, #4]
100126bc:	466a      	mov	r2, sp
100126be:	7a12      	ldrb	r2, [r2, #8]
100126c0:	701c      	strb	r4, [r3, #0]
100126c2:	705c      	strb	r4, [r3, #1]
100126c4:	709c      	strb	r4, [r3, #2]
100126c6:	725a      	strb	r2, [r3, #9]
100126c8:	2400      	movs	r4, #0
100126ca:	466a      	mov	r2, sp
100126cc:	0a36      	lsrs	r6, r6, #8
100126ce:	70dc      	strb	r4, [r3, #3]
100126d0:	7218      	strb	r0, [r3, #8]
100126d2:	729c      	strb	r4, [r3, #10]
100126d4:	715e      	strb	r6, [r3, #5]
100126d6:	72dc      	strb	r4, [r3, #11]
100126d8:	7812      	ldrb	r2, [r2, #0]
100126da:	380e      	subs	r0, #14
100126dc:	731a      	strb	r2, [r3, #12]
100126de:	9a00      	ldr	r2, [sp, #0]
100126e0:	0a14      	lsrs	r4, r2, #8
100126e2:	4662      	mov	r2, ip
100126e4:	739a      	strb	r2, [r3, #14]
100126e6:	4662      	mov	r2, ip
100126e8:	735c      	strb	r4, [r3, #13]
100126ea:	0a14      	lsrs	r4, r2, #8
100126ec:	466a      	mov	r2, sp
100126ee:	7c12      	ldrb	r2, [r2, #16]
100126f0:	73dc      	strb	r4, [r3, #15]
100126f2:	741a      	strb	r2, [r3, #16]
100126f4:	1c1c      	adds	r4, r3, #0
100126f6:	2801      	cmp	r0, #1
100126f8:	d809      	bhi.n	1001270e <gapm_start_adv_cmd_handler+0x9e>
100126fa:	2900      	cmp	r1, #0
100126fc:	d003      	beq.n	10012706 <gapm_start_adv_cmd_handler+0x96>
100126fe:	481f      	ldr	r0, [pc, #124]	; (1001277c <gapm_start_adv_cmd_handler+0x10c>)
10012700:	2206      	movs	r2, #6
10012702:	4b1f      	ldr	r3, [pc, #124]	; (10012780 <gapm_start_adv_cmd_handler+0x110>)
10012704:	4798      	blx	r3
10012706:	466b      	mov	r3, sp
10012708:	7b1b      	ldrb	r3, [r3, #12]
1001270a:	75e3      	strb	r3, [r4, #23]
1001270c:	e014      	b.n	10012738 <gapm_start_adv_cmd_handler+0xc8>
1001270e:	466b      	mov	r3, sp
10012710:	7d1b      	ldrb	r3, [r3, #20]
10012712:	9915      	ldr	r1, [sp, #84]	; 0x54
10012714:	7463      	strb	r3, [r4, #17]
10012716:	466b      	mov	r3, sp
10012718:	7e1b      	ldrb	r3, [r3, #24]
1001271a:	9a01      	ldr	r2, [sp, #4]
1001271c:	74a3      	strb	r3, [r4, #18]
1001271e:	466b      	mov	r3, sp
10012720:	791b      	ldrb	r3, [r3, #4]
10012722:	4818      	ldr	r0, [pc, #96]	; (10012784 <gapm_start_adv_cmd_handler+0x114>)
10012724:	4e16      	ldr	r6, [pc, #88]	; (10012780 <gapm_start_adv_cmd_handler+0x110>)
10012726:	74e3      	strb	r3, [r4, #19]
10012728:	47b0      	blx	r6
1001272a:	1c23      	adds	r3, r4, #0
1001272c:	4816      	ldr	r0, [pc, #88]	; (10012788 <gapm_start_adv_cmd_handler+0x118>)
1001272e:	3330      	adds	r3, #48	; 0x30
10012730:	9917      	ldr	r1, [sp, #92]	; 0x5c
10012732:	1c2a      	adds	r2, r5, #0
10012734:	701d      	strb	r5, [r3, #0]
10012736:	47b0      	blx	r6
10012738:	1c22      	adds	r2, r4, #0
1001273a:	23a5      	movs	r3, #165	; 0xa5
1001273c:	3250      	adds	r2, #80	; 0x50
1001273e:	7013      	strb	r3, [r2, #0]
10012740:	1c22      	adds	r2, r4, #0
10012742:	3251      	adds	r2, #81	; 0x51
10012744:	7013      	strb	r3, [r2, #0]
10012746:	1c23      	adds	r3, r4, #0
10012748:	1c22      	adds	r2, r4, #0
1001274a:	3352      	adds	r3, #82	; 0x52
1001274c:	701f      	strb	r7, [r3, #0]
1001274e:	3253      	adds	r2, #83	; 0x53
10012750:	0a3b      	lsrs	r3, r7, #8
10012752:	7013      	strb	r3, [r2, #0]
10012754:	466a      	mov	r2, sp
10012756:	1c23      	adds	r3, r4, #0
10012758:	7f12      	ldrb	r2, [r2, #28]
1001275a:	3354      	adds	r3, #84	; 0x54
1001275c:	701a      	strb	r2, [r3, #0]
1001275e:	234d      	movs	r3, #77	; 0x4d
10012760:	2500      	movs	r5, #0
10012762:	71a3      	strb	r3, [r4, #6]
10012764:	1c20      	adds	r0, r4, #0
10012766:	2155      	movs	r1, #85	; 0x55
10012768:	4b08      	ldr	r3, [pc, #32]	; (1001278c <gapm_start_adv_cmd_handler+0x11c>)
1001276a:	71e5      	strb	r5, [r4, #7]
1001276c:	4798      	blx	r3
1001276e:	1c28      	adds	r0, r5, #0
10012770:	b009      	add	sp, #36	; 0x24
10012772:	bdf0      	pop	{r4, r5, r6, r7, pc}
10012774:	1001ad20 	.word	0x1001ad20
10012778:	1001b090 	.word	0x1001b090
1001277c:	1001b0a1 	.word	0x1001b0a1
10012780:	10015103 	.word	0x10015103
10012784:	1001b0a4 	.word	0x1001b0a4
10012788:	1001b0c1 	.word	0x1001b0c1
1001278c:	1001166d 	.word	0x1001166d

10012790 <get_gap_local_addr_type>:
10012790:	4b04      	ldr	r3, [pc, #16]	; (100127a4 <get_gap_local_addr_type+0x14>)
10012792:	2001      	movs	r0, #1
10012794:	791b      	ldrb	r3, [r3, #4]
10012796:	2b02      	cmp	r3, #2
10012798:	d003      	beq.n	100127a2 <get_gap_local_addr_type+0x12>
1001279a:	3b03      	subs	r3, #3
1001279c:	4258      	negs	r0, r3
1001279e:	4158      	adcs	r0, r3
100127a0:	0040      	lsls	r0, r0, #1
100127a2:	4770      	bx	lr
100127a4:	1001adb2 	.word	0x1001adb2

100127a8 <gapm_adv_report_evt_handler>:
100127a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
100127aa:	7843      	ldrb	r3, [r0, #1]
100127ac:	1c05      	adds	r5, r0, #0
100127ae:	9301      	str	r3, [sp, #4]
100127b0:	466b      	mov	r3, sp
100127b2:	1c0c      	adds	r4, r1, #0
100127b4:	791b      	ldrb	r3, [r3, #4]
100127b6:	7806      	ldrb	r6, [r0, #0]
100127b8:	2206      	movs	r2, #6
100127ba:	704b      	strb	r3, [r1, #1]
100127bc:	1c88      	adds	r0, r1, #2
100127be:	4f1b      	ldr	r7, [pc, #108]	; (1001282c <gapm_adv_report_evt_handler+0x84>)
100127c0:	1ca9      	adds	r1, r5, #2
100127c2:	47b8      	blx	r7
100127c4:	1c20      	adds	r0, r4, #0
100127c6:	1c29      	adds	r1, r5, #0
100127c8:	7a2a      	ldrb	r2, [r5, #8]
100127ca:	3008      	adds	r0, #8
100127cc:	77c2      	strb	r2, [r0, #31]
100127ce:	3109      	adds	r1, #9
100127d0:	3528      	adds	r5, #40	; 0x28
100127d2:	47b8      	blx	r7
100127d4:	782b      	ldrb	r3, [r5, #0]
100127d6:	b25a      	sxtb	r2, r3
100127d8:	2a00      	cmp	r2, #0
100127da:	da01      	bge.n	100127e0 <gapm_adv_report_evt_handler+0x38>
100127dc:	3301      	adds	r3, #1
100127de:	b2db      	uxtb	r3, r3
100127e0:	1c22      	adds	r2, r4, #0
100127e2:	3228      	adds	r2, #40	; 0x28
100127e4:	7013      	strb	r3, [r2, #0]
100127e6:	2200      	movs	r2, #0
100127e8:	9b01      	ldr	r3, [sp, #4]
100127ea:	4293      	cmp	r3, r2
100127ec:	d00a      	beq.n	10012804 <gapm_adv_report_evt_handler+0x5c>
100127ee:	79e3      	ldrb	r3, [r4, #7]
100127f0:	323f      	adds	r2, #63	; 0x3f
100127f2:	1c19      	adds	r1, r3, #0
100127f4:	4391      	bics	r1, r2
100127f6:	3a3e      	subs	r2, #62	; 0x3e
100127f8:	29c0      	cmp	r1, #192	; 0xc0
100127fa:	d003      	beq.n	10012804 <gapm_adv_report_evt_handler+0x5c>
100127fc:	065b      	lsls	r3, r3, #25
100127fe:	0fdb      	lsrs	r3, r3, #31
10012800:	3202      	adds	r2, #2
10012802:	1ad2      	subs	r2, r2, r3
10012804:	7062      	strb	r2, [r4, #1]
10012806:	2e04      	cmp	r6, #4
10012808:	d80f      	bhi.n	1001282a <gapm_adv_report_evt_handler+0x82>
1001280a:	1c30      	adds	r0, r6, #0
1001280c:	f000 fbf6 	bl	10012ffc <__gnu_thumb1_case_uqi>
10012810:	09070503 	.word	0x09070503
10012814:	0b          	.byte	0x0b
10012815:	00          	.byte	0x00
10012816:	2300      	movs	r3, #0
10012818:	e006      	b.n	10012828 <gapm_adv_report_evt_handler+0x80>
1001281a:	2301      	movs	r3, #1
1001281c:	e004      	b.n	10012828 <gapm_adv_report_evt_handler+0x80>
1001281e:	2302      	movs	r3, #2
10012820:	e002      	b.n	10012828 <gapm_adv_report_evt_handler+0x80>
10012822:	2303      	movs	r3, #3
10012824:	e000      	b.n	10012828 <gapm_adv_report_evt_handler+0x80>
10012826:	2305      	movs	r3, #5
10012828:	7023      	strb	r3, [r4, #0]
1001282a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1001282c:	10015103 	.word	0x10015103

10012830 <gapm_resolv_addr_cmd_handler>:
10012830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10012832:	2314      	movs	r3, #20
10012834:	4c12      	ldr	r4, [pc, #72]	; (10012880 <gapm_resolv_addr_cmd_handler+0x50>)
10012836:	1c17      	adds	r7, r2, #0
10012838:	7023      	strb	r3, [r4, #0]
1001283a:	3b07      	subs	r3, #7
1001283c:	7063      	strb	r3, [r4, #1]
1001283e:	70a3      	strb	r3, [r4, #2]
10012840:	2300      	movs	r3, #0
10012842:	70e3      	strb	r3, [r4, #3]
10012844:	4b0f      	ldr	r3, [pc, #60]	; (10012884 <gapm_resolv_addr_cmd_handler+0x54>)
10012846:	1c05      	adds	r5, r0, #0
10012848:	881a      	ldrh	r2, [r3, #0]
1001284a:	881b      	ldrh	r3, [r3, #0]
1001284c:	4e0e      	ldr	r6, [pc, #56]	; (10012888 <gapm_resolv_addr_cmd_handler+0x58>)
1001284e:	0a1b      	lsrs	r3, r3, #8
10012850:	7163      	strb	r3, [r4, #5]
10012852:	2317      	movs	r3, #23
10012854:	012d      	lsls	r5, r5, #4
10012856:	7122      	strb	r2, [r4, #4]
10012858:	7260      	strb	r0, [r4, #9]
1001285a:	2206      	movs	r2, #6
1001285c:	480b      	ldr	r0, [pc, #44]	; (1001288c <gapm_resolv_addr_cmd_handler+0x5c>)
1001285e:	7223      	strb	r3, [r4, #8]
10012860:	47b0      	blx	r6
10012862:	1c39      	adds	r1, r7, #0
10012864:	1c2a      	adds	r2, r5, #0
10012866:	480a      	ldr	r0, [pc, #40]	; (10012890 <gapm_resolv_addr_cmd_handler+0x60>)
10012868:	47b0      	blx	r6
1001286a:	1c29      	adds	r1, r5, #0
1001286c:	3110      	adds	r1, #16
1001286e:	1c0b      	adds	r3, r1, #0
10012870:	3b08      	subs	r3, #8
10012872:	71a3      	strb	r3, [r4, #6]
10012874:	121b      	asrs	r3, r3, #8
10012876:	71e3      	strb	r3, [r4, #7]
10012878:	1c20      	adds	r0, r4, #0
1001287a:	4b06      	ldr	r3, [pc, #24]	; (10012894 <gapm_resolv_addr_cmd_handler+0x64>)
1001287c:	4798      	blx	r3
1001287e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10012880:	1001b090 	.word	0x1001b090
10012884:	1001ad20 	.word	0x1001ad20
10012888:	10015103 	.word	0x10015103
1001288c:	1001b09a 	.word	0x1001b09a
10012890:	1001b0a0 	.word	0x1001b0a0
10012894:	1001166d 	.word	0x1001166d

10012898 <gapm_addr_solved_ind_handler>:
10012898:	b570      	push	{r4, r5, r6, lr}
1001289a:	1c04      	adds	r4, r0, #0
1001289c:	1c08      	adds	r0, r1, #0
1001289e:	1c0d      	adds	r5, r1, #0
100128a0:	4e05      	ldr	r6, [pc, #20]	; (100128b8 <gapm_addr_solved_ind_handler+0x20>)
100128a2:	1c21      	adds	r1, r4, #0
100128a4:	2206      	movs	r2, #6
100128a6:	3011      	adds	r0, #17
100128a8:	47b0      	blx	r6
100128aa:	1c68      	adds	r0, r5, #1
100128ac:	1da1      	adds	r1, r4, #6
100128ae:	2210      	movs	r2, #16
100128b0:	47b0      	blx	r6
100128b2:	2300      	movs	r3, #0
100128b4:	702b      	strb	r3, [r5, #0]
100128b6:	bd70      	pop	{r4, r5, r6, pc}
100128b8:	10015103 	.word	0x10015103

100128bc <gapm_profile_added_ind_handler>:
100128bc:	b510      	push	{r4, lr}
100128be:	7843      	ldrb	r3, [r0, #1]
100128c0:	7902      	ldrb	r2, [r0, #4]
100128c2:	7944      	ldrb	r4, [r0, #5]
100128c4:	7800      	ldrb	r0, [r0, #0]
100128c6:	021b      	lsls	r3, r3, #8
100128c8:	4303      	orrs	r3, r0
100128ca:	2b1b      	cmp	r3, #27
100128cc:	d104      	bne.n	100128d8 <gapm_profile_added_ind_handler+0x1c>
100128ce:	2300      	movs	r3, #0
100128d0:	700b      	strb	r3, [r1, #0]
100128d2:	0223      	lsls	r3, r4, #8
100128d4:	4313      	orrs	r3, r2
100128d6:	804b      	strh	r3, [r1, #2]
100128d8:	203b      	movs	r0, #59	; 0x3b
100128da:	bd10      	pop	{r4, pc}

100128dc <gattc_read_req_ind_parser>:
100128dc:	7843      	ldrb	r3, [r0, #1]
100128de:	7802      	ldrb	r2, [r0, #0]
100128e0:	021b      	lsls	r3, r3, #8
100128e2:	4313      	orrs	r3, r2
100128e4:	804b      	strh	r3, [r1, #2]
100128e6:	4770      	bx	lr

100128e8 <gattc_write_req_ind_parser>:
100128e8:	b508      	push	{r3, lr}
100128ea:	1c13      	adds	r3, r2, #0
100128ec:	0a00      	lsrs	r0, r0, #8
100128ee:	8010      	strh	r0, [r2, #0]
100128f0:	784a      	ldrb	r2, [r1, #1]
100128f2:	7808      	ldrb	r0, [r1, #0]
100128f4:	0212      	lsls	r2, r2, #8
100128f6:	4302      	orrs	r2, r0
100128f8:	805a      	strh	r2, [r3, #2]
100128fa:	78ca      	ldrb	r2, [r1, #3]
100128fc:	7888      	ldrb	r0, [r1, #2]
100128fe:	0212      	lsls	r2, r2, #8
10012900:	4302      	orrs	r2, r0
10012902:	809a      	strh	r2, [r3, #4]
10012904:	794a      	ldrb	r2, [r1, #5]
10012906:	7908      	ldrb	r0, [r1, #4]
10012908:	0212      	lsls	r2, r2, #8
1001290a:	4302      	orrs	r2, r0
1001290c:	80da      	strh	r2, [r3, #6]
1001290e:	3308      	adds	r3, #8
10012910:	1c18      	adds	r0, r3, #0
10012912:	3106      	adds	r1, #6
10012914:	4b01      	ldr	r3, [pc, #4]	; (1001291c <gattc_write_req_ind_parser+0x34>)
10012916:	4798      	blx	r3
10012918:	bd08      	pop	{r3, pc}
1001291a:	46c0      	nop			; (mov r8, r8)
1001291c:	10015103 	.word	0x10015103

10012920 <gattc_att_info_req_parser>:
10012920:	7843      	ldrb	r3, [r0, #1]
10012922:	7802      	ldrb	r2, [r0, #0]
10012924:	021b      	lsls	r3, r3, #8
10012926:	4313      	orrs	r3, r2
10012928:	800b      	strh	r3, [r1, #0]
1001292a:	4770      	bx	lr

1001292c <gattc_read_cfm>:
1001292c:	b538      	push	{r3, r4, r5, lr}
1001292e:	2514      	movs	r5, #20
10012930:	1c1c      	adds	r4, r3, #0
10012932:	4b14      	ldr	r3, [pc, #80]	; (10012984 <gattc_read_cfm+0x58>)
10012934:	70d9      	strb	r1, [r3, #3]
10012936:	4914      	ldr	r1, [pc, #80]	; (10012988 <gattc_read_cfm+0x5c>)
10012938:	701d      	strb	r5, [r3, #0]
1001293a:	3d08      	subs	r5, #8
1001293c:	705d      	strb	r5, [r3, #1]
1001293e:	709d      	strb	r5, [r3, #2]
10012940:	880d      	ldrh	r5, [r1, #0]
10012942:	8809      	ldrh	r1, [r1, #0]
10012944:	7218      	strb	r0, [r3, #8]
10012946:	0a09      	lsrs	r1, r1, #8
10012948:	7159      	strb	r1, [r3, #5]
1001294a:	0a00      	lsrs	r0, r0, #8
1001294c:	0a21      	lsrs	r1, r4, #8
1001294e:	711d      	strb	r5, [r3, #4]
10012950:	7258      	strb	r0, [r3, #9]
10012952:	729c      	strb	r4, [r3, #10]
10012954:	72d9      	strb	r1, [r3, #11]
10012956:	731a      	strb	r2, [r3, #12]
10012958:	1c1d      	adds	r5, r3, #0
1001295a:	2c00      	cmp	r4, #0
1001295c:	d007      	beq.n	1001296e <gattc_read_cfm+0x42>
1001295e:	9904      	ldr	r1, [sp, #16]
10012960:	1c22      	adds	r2, r4, #0
10012962:	480a      	ldr	r0, [pc, #40]	; (1001298c <gattc_read_cfm+0x60>)
10012964:	4b0a      	ldr	r3, [pc, #40]	; (10012990 <gattc_read_cfm+0x64>)
10012966:	340d      	adds	r4, #13
10012968:	4798      	blx	r3
1001296a:	b2a1      	uxth	r1, r4
1001296c:	e001      	b.n	10012972 <gattc_read_cfm+0x46>
1001296e:	210e      	movs	r1, #14
10012970:	735c      	strb	r4, [r3, #13]
10012972:	1c0b      	adds	r3, r1, #0
10012974:	3b08      	subs	r3, #8
10012976:	71ab      	strb	r3, [r5, #6]
10012978:	121b      	asrs	r3, r3, #8
1001297a:	71eb      	strb	r3, [r5, #7]
1001297c:	1c28      	adds	r0, r5, #0
1001297e:	4b05      	ldr	r3, [pc, #20]	; (10012994 <gattc_read_cfm+0x68>)
10012980:	4798      	blx	r3
10012982:	bd38      	pop	{r3, r4, r5, pc}
10012984:	1001b090 	.word	0x1001b090
10012988:	1001ad20 	.word	0x1001ad20
1001298c:	1001b09d 	.word	0x1001b09d
10012990:	10015103 	.word	0x10015103
10012994:	1001166d 	.word	0x1001166d

10012998 <gattc_write_cfm>:
10012998:	4b0d      	ldr	r3, [pc, #52]	; (100129d0 <gattc_write_cfm+0x38>)
1001299a:	b510      	push	{r4, lr}
1001299c:	729a      	strb	r2, [r3, #10]
1001299e:	2203      	movs	r2, #3
100129a0:	2416      	movs	r4, #22
100129a2:	719a      	strb	r2, [r3, #6]
100129a4:	2200      	movs	r2, #0
100129a6:	70d9      	strb	r1, [r3, #3]
100129a8:	490a      	ldr	r1, [pc, #40]	; (100129d4 <gattc_write_cfm+0x3c>)
100129aa:	701c      	strb	r4, [r3, #0]
100129ac:	3c0a      	subs	r4, #10
100129ae:	705c      	strb	r4, [r3, #1]
100129b0:	709c      	strb	r4, [r3, #2]
100129b2:	880c      	ldrh	r4, [r1, #0]
100129b4:	8809      	ldrh	r1, [r1, #0]
100129b6:	7218      	strb	r0, [r3, #8]
100129b8:	0a09      	lsrs	r1, r1, #8
100129ba:	0a00      	lsrs	r0, r0, #8
100129bc:	711c      	strb	r4, [r3, #4]
100129be:	7159      	strb	r1, [r3, #5]
100129c0:	7258      	strb	r0, [r3, #9]
100129c2:	71da      	strb	r2, [r3, #7]
100129c4:	1c18      	adds	r0, r3, #0
100129c6:	210b      	movs	r1, #11
100129c8:	4b03      	ldr	r3, [pc, #12]	; (100129d8 <gattc_write_cfm+0x40>)
100129ca:	4798      	blx	r3
100129cc:	bd10      	pop	{r4, pc}
100129ce:	46c0      	nop			; (mov r8, r8)
100129d0:	1001b090 	.word	0x1001b090
100129d4:	1001ad20 	.word	0x1001ad20
100129d8:	1001166d 	.word	0x1001166d

100129dc <gattc_att_info_cfm>:
100129dc:	b538      	push	{r3, r4, r5, lr}
100129de:	4c0e      	ldr	r4, [pc, #56]	; (10012a18 <gattc_att_info_cfm+0x3c>)
100129e0:	2518      	movs	r5, #24
100129e2:	7323      	strb	r3, [r4, #12]
100129e4:	2305      	movs	r3, #5
100129e6:	71a3      	strb	r3, [r4, #6]
100129e8:	2300      	movs	r3, #0
100129ea:	70e1      	strb	r1, [r4, #3]
100129ec:	490b      	ldr	r1, [pc, #44]	; (10012a1c <gattc_att_info_cfm+0x40>)
100129ee:	7025      	strb	r5, [r4, #0]
100129f0:	3d0c      	subs	r5, #12
100129f2:	7065      	strb	r5, [r4, #1]
100129f4:	70a5      	strb	r5, [r4, #2]
100129f6:	880d      	ldrh	r5, [r1, #0]
100129f8:	8809      	ldrh	r1, [r1, #0]
100129fa:	7220      	strb	r0, [r4, #8]
100129fc:	0a09      	lsrs	r1, r1, #8
100129fe:	0a00      	lsrs	r0, r0, #8
10012a00:	7161      	strb	r1, [r4, #5]
10012a02:	7260      	strb	r0, [r4, #9]
10012a04:	72a2      	strb	r2, [r4, #10]
10012a06:	71e3      	strb	r3, [r4, #7]
10012a08:	0a12      	lsrs	r2, r2, #8
10012a0a:	1c20      	adds	r0, r4, #0
10012a0c:	210d      	movs	r1, #13
10012a0e:	4b04      	ldr	r3, [pc, #16]	; (10012a20 <gattc_att_info_cfm+0x44>)
10012a10:	7125      	strb	r5, [r4, #4]
10012a12:	72e2      	strb	r2, [r4, #11]
10012a14:	4798      	blx	r3
10012a16:	bd38      	pop	{r3, r4, r5, pc}
10012a18:	1001b090 	.word	0x1001b090
10012a1c:	1001ad20 	.word	0x1001ad20
10012a20:	1001166d 	.word	0x1001166d

10012a24 <gattc_send_evt_cmd_handler>:
10012a24:	b570      	push	{r4, r5, r6, lr}
10012a26:	2610      	movs	r6, #16
10012a28:	ac04      	add	r4, sp, #16
10012a2a:	8825      	ldrh	r5, [r4, #0]
10012a2c:	4c15      	ldr	r4, [pc, #84]	; (10012a84 <gattc_send_evt_cmd_handler+0x60>)
10012a2e:	70e2      	strb	r2, [r4, #3]
10012a30:	4a15      	ldr	r2, [pc, #84]	; (10012a88 <gattc_send_evt_cmd_handler+0x64>)
10012a32:	7026      	strb	r6, [r4, #0]
10012a34:	3e04      	subs	r6, #4
10012a36:	7066      	strb	r6, [r4, #1]
10012a38:	70a6      	strb	r6, [r4, #2]
10012a3a:	8816      	ldrh	r6, [r2, #0]
10012a3c:	8812      	ldrh	r2, [r2, #0]
10012a3e:	7220      	strb	r0, [r4, #8]
10012a40:	0a12      	lsrs	r2, r2, #8
10012a42:	7162      	strb	r2, [r4, #5]
10012a44:	4a11      	ldr	r2, [pc, #68]	; (10012a8c <gattc_send_evt_cmd_handler+0x68>)
10012a46:	7321      	strb	r1, [r4, #12]
10012a48:	8812      	ldrh	r2, [r2, #0]
10012a4a:	73a5      	strb	r5, [r4, #14]
10012a4c:	3201      	adds	r2, #1
10012a4e:	7262      	strb	r2, [r4, #9]
10012a50:	1212      	asrs	r2, r2, #8
10012a52:	72a2      	strb	r2, [r4, #10]
10012a54:	2200      	movs	r2, #0
10012a56:	72e2      	strb	r2, [r4, #11]
10012a58:	0a0a      	lsrs	r2, r1, #8
10012a5a:	7362      	strb	r2, [r4, #13]
10012a5c:	0a2a      	lsrs	r2, r5, #8
10012a5e:	73e2      	strb	r2, [r4, #15]
10012a60:	1c19      	adds	r1, r3, #0
10012a62:	1c2a      	adds	r2, r5, #0
10012a64:	4b0a      	ldr	r3, [pc, #40]	; (10012a90 <gattc_send_evt_cmd_handler+0x6c>)
10012a66:	3510      	adds	r5, #16
10012a68:	480a      	ldr	r0, [pc, #40]	; (10012a94 <gattc_send_evt_cmd_handler+0x70>)
10012a6a:	7126      	strb	r6, [r4, #4]
10012a6c:	4798      	blx	r3
10012a6e:	b2a9      	uxth	r1, r5
10012a70:	1c0b      	adds	r3, r1, #0
10012a72:	3b08      	subs	r3, #8
10012a74:	71a3      	strb	r3, [r4, #6]
10012a76:	121b      	asrs	r3, r3, #8
10012a78:	71e3      	strb	r3, [r4, #7]
10012a7a:	1c20      	adds	r0, r4, #0
10012a7c:	4b06      	ldr	r3, [pc, #24]	; (10012a98 <gattc_send_evt_cmd_handler+0x74>)
10012a7e:	4798      	blx	r3
10012a80:	bd70      	pop	{r4, r5, r6, pc}
10012a82:	46c0      	nop			; (mov r8, r8)
10012a84:	1001b090 	.word	0x1001b090
10012a88:	1001ad20 	.word	0x1001ad20
10012a8c:	10019eb4 	.word	0x10019eb4
10012a90:	10015103 	.word	0x10015103
10012a94:	1001b0a0 	.word	0x1001b0a0
10012a98:	1001166d 	.word	0x1001166d

10012a9c <gattc_event_cfm_handler>:
10012a9c:	220e      	movs	r2, #14
10012a9e:	b508      	push	{r3, lr}
10012aa0:	4b0b      	ldr	r3, [pc, #44]	; (10012ad0 <gattc_event_cfm_handler+0x34>)
10012aa2:	701a      	strb	r2, [r3, #0]
10012aa4:	3a02      	subs	r2, #2
10012aa6:	705a      	strb	r2, [r3, #1]
10012aa8:	709a      	strb	r2, [r3, #2]
10012aaa:	4a0a      	ldr	r2, [pc, #40]	; (10012ad4 <gattc_event_cfm_handler+0x38>)
10012aac:	70d8      	strb	r0, [r3, #3]
10012aae:	8810      	ldrh	r0, [r2, #0]
10012ab0:	8812      	ldrh	r2, [r2, #0]
10012ab2:	7219      	strb	r1, [r3, #8]
10012ab4:	0a12      	lsrs	r2, r2, #8
10012ab6:	715a      	strb	r2, [r3, #5]
10012ab8:	2202      	movs	r2, #2
10012aba:	719a      	strb	r2, [r3, #6]
10012abc:	2200      	movs	r2, #0
10012abe:	0a09      	lsrs	r1, r1, #8
10012ac0:	7118      	strb	r0, [r3, #4]
10012ac2:	7259      	strb	r1, [r3, #9]
10012ac4:	71da      	strb	r2, [r3, #7]
10012ac6:	1c18      	adds	r0, r3, #0
10012ac8:	210a      	movs	r1, #10
10012aca:	4b03      	ldr	r3, [pc, #12]	; (10012ad8 <gattc_event_cfm_handler+0x3c>)
10012acc:	4798      	blx	r3
10012ace:	bd08      	pop	{r3, pc}
10012ad0:	1001b090 	.word	0x1001b090
10012ad4:	1001ad20 	.word	0x1001ad20
10012ad8:	1001166d 	.word	0x1001166d

10012adc <gattc_disc_svc_ind_parser>:
10012adc:	b570      	push	{r4, r5, r6, lr}
10012ade:	1c15      	adds	r5, r2, #0
10012ae0:	0a00      	lsrs	r0, r0, #8
10012ae2:	8010      	strh	r0, [r2, #0]
10012ae4:	784b      	ldrb	r3, [r1, #1]
10012ae6:	780a      	ldrb	r2, [r1, #0]
10012ae8:	021b      	lsls	r3, r3, #8
10012aea:	4313      	orrs	r3, r2
10012aec:	806b      	strh	r3, [r5, #2]
10012aee:	78cb      	ldrb	r3, [r1, #3]
10012af0:	788a      	ldrb	r2, [r1, #2]
10012af2:	021b      	lsls	r3, r3, #8
10012af4:	4313      	orrs	r3, r2
10012af6:	80ab      	strh	r3, [r5, #4]
10012af8:	790e      	ldrb	r6, [r1, #4]
10012afa:	4b05      	ldr	r3, [pc, #20]	; (10012b10 <gattc_disc_svc_ind_parser+0x34>)
10012afc:	1c30      	adds	r0, r6, #0
10012afe:	1c0c      	adds	r4, r1, #0
10012b00:	4798      	blx	r3
10012b02:	1c32      	adds	r2, r6, #0
10012b04:	71a8      	strb	r0, [r5, #6]
10012b06:	1d61      	adds	r1, r4, #5
10012b08:	1de8      	adds	r0, r5, #7
10012b0a:	4b02      	ldr	r3, [pc, #8]	; (10012b14 <gattc_disc_svc_ind_parser+0x38>)
10012b0c:	4798      	blx	r3
10012b0e:	bd70      	pop	{r4, r5, r6, pc}
10012b10:	100109ad 	.word	0x100109ad
10012b14:	10015103 	.word	0x10015103

10012b18 <gattc_disc_svc_incl_ind_parser>:
10012b18:	b570      	push	{r4, r5, r6, lr}
10012b1a:	1c15      	adds	r5, r2, #0
10012b1c:	0a00      	lsrs	r0, r0, #8
10012b1e:	8010      	strh	r0, [r2, #0]
10012b20:	784b      	ldrb	r3, [r1, #1]
10012b22:	780a      	ldrb	r2, [r1, #0]
10012b24:	021b      	lsls	r3, r3, #8
10012b26:	4313      	orrs	r3, r2
10012b28:	806b      	strh	r3, [r5, #2]
10012b2a:	78cb      	ldrb	r3, [r1, #3]
10012b2c:	788a      	ldrb	r2, [r1, #2]
10012b2e:	021b      	lsls	r3, r3, #8
10012b30:	4313      	orrs	r3, r2
10012b32:	80ab      	strh	r3, [r5, #4]
10012b34:	794b      	ldrb	r3, [r1, #5]
10012b36:	790a      	ldrb	r2, [r1, #4]
10012b38:	021b      	lsls	r3, r3, #8
10012b3a:	4313      	orrs	r3, r2
10012b3c:	80eb      	strh	r3, [r5, #6]
10012b3e:	798e      	ldrb	r6, [r1, #6]
10012b40:	4b05      	ldr	r3, [pc, #20]	; (10012b58 <gattc_disc_svc_incl_ind_parser+0x40>)
10012b42:	1c30      	adds	r0, r6, #0
10012b44:	1c0c      	adds	r4, r1, #0
10012b46:	4798      	blx	r3
10012b48:	7228      	strb	r0, [r5, #8]
10012b4a:	1c28      	adds	r0, r5, #0
10012b4c:	1c32      	adds	r2, r6, #0
10012b4e:	1de1      	adds	r1, r4, #7
10012b50:	4b02      	ldr	r3, [pc, #8]	; (10012b5c <gattc_disc_svc_incl_ind_parser+0x44>)
10012b52:	3009      	adds	r0, #9
10012b54:	4798      	blx	r3
10012b56:	bd70      	pop	{r4, r5, r6, pc}
10012b58:	100109ad 	.word	0x100109ad
10012b5c:	10015103 	.word	0x10015103

10012b60 <gattc_disc_char_ind_parser>:
10012b60:	b570      	push	{r4, r5, r6, lr}
10012b62:	1c15      	adds	r5, r2, #0
10012b64:	0a00      	lsrs	r0, r0, #8
10012b66:	8010      	strh	r0, [r2, #0]
10012b68:	784b      	ldrb	r3, [r1, #1]
10012b6a:	780a      	ldrb	r2, [r1, #0]
10012b6c:	021b      	lsls	r3, r3, #8
10012b6e:	4313      	orrs	r3, r2
10012b70:	806b      	strh	r3, [r5, #2]
10012b72:	78cb      	ldrb	r3, [r1, #3]
10012b74:	788a      	ldrb	r2, [r1, #2]
10012b76:	021b      	lsls	r3, r3, #8
10012b78:	4313      	orrs	r3, r2
10012b7a:	80ab      	strh	r3, [r5, #4]
10012b7c:	790b      	ldrb	r3, [r1, #4]
10012b7e:	1c0c      	adds	r4, r1, #0
10012b80:	71ab      	strb	r3, [r5, #6]
10012b82:	794e      	ldrb	r6, [r1, #5]
10012b84:	4b05      	ldr	r3, [pc, #20]	; (10012b9c <gattc_disc_char_ind_parser+0x3c>)
10012b86:	1c30      	adds	r0, r6, #0
10012b88:	4798      	blx	r3
10012b8a:	71e8      	strb	r0, [r5, #7]
10012b8c:	1c28      	adds	r0, r5, #0
10012b8e:	1c32      	adds	r2, r6, #0
10012b90:	1da1      	adds	r1, r4, #6
10012b92:	4b03      	ldr	r3, [pc, #12]	; (10012ba0 <gattc_disc_char_ind_parser+0x40>)
10012b94:	3008      	adds	r0, #8
10012b96:	4798      	blx	r3
10012b98:	bd70      	pop	{r4, r5, r6, pc}
10012b9a:	46c0      	nop			; (mov r8, r8)
10012b9c:	100109ad 	.word	0x100109ad
10012ba0:	10015103 	.word	0x10015103

10012ba4 <gattc_disc_char_desc_ind_parser>:
10012ba4:	b570      	push	{r4, r5, r6, lr}
10012ba6:	1c15      	adds	r5, r2, #0
10012ba8:	0a00      	lsrs	r0, r0, #8
10012baa:	8010      	strh	r0, [r2, #0]
10012bac:	784b      	ldrb	r3, [r1, #1]
10012bae:	780a      	ldrb	r2, [r1, #0]
10012bb0:	021b      	lsls	r3, r3, #8
10012bb2:	4313      	orrs	r3, r2
10012bb4:	806b      	strh	r3, [r5, #2]
10012bb6:	788e      	ldrb	r6, [r1, #2]
10012bb8:	4b05      	ldr	r3, [pc, #20]	; (10012bd0 <gattc_disc_char_desc_ind_parser+0x2c>)
10012bba:	1c30      	adds	r0, r6, #0
10012bbc:	1c0c      	adds	r4, r1, #0
10012bbe:	4798      	blx	r3
10012bc0:	1c32      	adds	r2, r6, #0
10012bc2:	7128      	strb	r0, [r5, #4]
10012bc4:	1ce1      	adds	r1, r4, #3
10012bc6:	1d68      	adds	r0, r5, #5
10012bc8:	4b02      	ldr	r3, [pc, #8]	; (10012bd4 <gattc_disc_char_desc_ind_parser+0x30>)
10012bca:	4798      	blx	r3
10012bcc:	bd70      	pop	{r4, r5, r6, pc}
10012bce:	46c0      	nop			; (mov r8, r8)
10012bd0:	100109ad 	.word	0x100109ad
10012bd4:	10015103 	.word	0x10015103

10012bd8 <gattc_event_ind_and_notification_parser>:
10012bd8:	b510      	push	{r4, lr}
10012bda:	780c      	ldrb	r4, [r1, #0]
10012bdc:	1c13      	adds	r3, r2, #0
10012bde:	2c12      	cmp	r4, #18
10012be0:	d10e      	bne.n	10012c00 <gattc_event_ind_and_notification_parser+0x28>
10012be2:	0a00      	lsrs	r0, r0, #8
10012be4:	8010      	strh	r0, [r2, #0]
10012be6:	788a      	ldrb	r2, [r1, #2]
10012be8:	709a      	strb	r2, [r3, #2]
10012bea:	7948      	ldrb	r0, [r1, #5]
10012bec:	790c      	ldrb	r4, [r1, #4]
10012bee:	0200      	lsls	r0, r0, #8
10012bf0:	4320      	orrs	r0, r4
10012bf2:	8098      	strh	r0, [r3, #4]
10012bf4:	3106      	adds	r1, #6
10012bf6:	1d98      	adds	r0, r3, #6
10012bf8:	4b0b      	ldr	r3, [pc, #44]	; (10012c28 <gattc_event_ind_and_notification_parser+0x50>)
10012bfa:	4798      	blx	r3
10012bfc:	221b      	movs	r2, #27
10012bfe:	e010      	b.n	10012c22 <gattc_event_ind_and_notification_parser+0x4a>
10012c00:	2200      	movs	r2, #0
10012c02:	2c13      	cmp	r4, #19
10012c04:	d10d      	bne.n	10012c22 <gattc_event_ind_and_notification_parser+0x4a>
10012c06:	0a00      	lsrs	r0, r0, #8
10012c08:	8018      	strh	r0, [r3, #0]
10012c0a:	788a      	ldrb	r2, [r1, #2]
10012c0c:	709a      	strb	r2, [r3, #2]
10012c0e:	7908      	ldrb	r0, [r1, #4]
10012c10:	78cc      	ldrb	r4, [r1, #3]
10012c12:	0200      	lsls	r0, r0, #8
10012c14:	4320      	orrs	r0, r4
10012c16:	8098      	strh	r0, [r3, #4]
10012c18:	3106      	adds	r1, #6
10012c1a:	1d98      	adds	r0, r3, #6
10012c1c:	4b02      	ldr	r3, [pc, #8]	; (10012c28 <gattc_event_ind_and_notification_parser+0x50>)
10012c1e:	4798      	blx	r3
10012c20:	221c      	movs	r2, #28
10012c22:	1c10      	adds	r0, r2, #0
10012c24:	bd10      	pop	{r4, pc}
10012c26:	46c0      	nop			; (mov r8, r8)
10012c28:	10015103 	.word	0x10015103

10012c2c <gattc_complete_evt_handler>:
10012c2c:	b500      	push	{lr}
10012c2e:	0a00      	lsrs	r0, r0, #8
10012c30:	8010      	strh	r0, [r2, #0]
10012c32:	7808      	ldrb	r0, [r1, #0]
10012c34:	7090      	strb	r0, [r2, #2]
10012c36:	784b      	ldrb	r3, [r1, #1]
10012c38:	3801      	subs	r0, #1
10012c3a:	70d3      	strb	r3, [r2, #3]
10012c3c:	2813      	cmp	r0, #19
10012c3e:	d82c      	bhi.n	10012c9a <gattc_complete_evt_handler+0x6e>
10012c40:	f000 f9dc 	bl	10012ffc <__gnu_thumb1_case_uqi>
10012c44:	0a0a0a0c 	.word	0x0a0a0a0c
10012c48:	210a0a0a 	.word	0x210a0a0a
10012c4c:	111f2121 	.word	0x111f2121
10012c50:	2b111111 	.word	0x2b111111
10012c54:	2919132b 	.word	0x2919132b
10012c58:	2017      	movs	r0, #23
10012c5a:	e01f      	b.n	10012c9c <gattc_complete_evt_handler+0x70>
10012c5c:	2024      	movs	r0, #36	; 0x24
10012c5e:	2b00      	cmp	r3, #0
10012c60:	d11c      	bne.n	10012c9c <gattc_complete_evt_handler+0x70>
10012c62:	3017      	adds	r0, #23
10012c64:	e01a      	b.n	10012c9c <gattc_complete_evt_handler+0x70>
10012c66:	2025      	movs	r0, #37	; 0x25
10012c68:	e018      	b.n	10012c9c <gattc_complete_evt_handler+0x70>
10012c6a:	4a0d      	ldr	r2, [pc, #52]	; (10012ca0 <gattc_complete_evt_handler+0x74>)
10012c6c:	201d      	movs	r0, #29
10012c6e:	6813      	ldr	r3, [r2, #0]
10012c70:	3b01      	subs	r3, #1
10012c72:	6013      	str	r3, [r2, #0]
10012c74:	e012      	b.n	10012c9c <gattc_complete_evt_handler+0x70>
10012c76:	4a0a      	ldr	r2, [pc, #40]	; (10012ca0 <gattc_complete_evt_handler+0x74>)
10012c78:	201e      	movs	r0, #30
10012c7a:	6813      	ldr	r3, [r2, #0]
10012c7c:	3b01      	subs	r3, #1
10012c7e:	6013      	str	r3, [r2, #0]
10012c80:	e00c      	b.n	10012c9c <gattc_complete_evt_handler+0x70>
10012c82:	2019      	movs	r0, #25
10012c84:	e00a      	b.n	10012c9c <gattc_complete_evt_handler+0x70>
10012c86:	203b      	movs	r0, #59	; 0x3b
10012c88:	2b00      	cmp	r3, #0
10012c8a:	d007      	beq.n	10012c9c <gattc_complete_evt_handler+0x70>
10012c8c:	2182      	movs	r1, #130	; 0x82
10012c8e:	0089      	lsls	r1, r1, #2
10012c90:	5453      	strb	r3, [r2, r1]
10012c92:	3823      	subs	r0, #35	; 0x23
10012c94:	e002      	b.n	10012c9c <gattc_complete_evt_handler+0x70>
10012c96:	2021      	movs	r0, #33	; 0x21
10012c98:	e000      	b.n	10012c9c <gattc_complete_evt_handler+0x70>
10012c9a:	2000      	movs	r0, #0
10012c9c:	bd00      	pop	{pc}
10012c9e:	46c0      	nop			; (mov r8, r8)
10012ca0:	10019eb8 	.word	0x10019eb8

10012ca4 <gattc_event_mtu_changed_ind_parser>:
10012ca4:	0a00      	lsrs	r0, r0, #8
10012ca6:	8010      	strh	r0, [r2, #0]
10012ca8:	784b      	ldrb	r3, [r1, #1]
10012caa:	7809      	ldrb	r1, [r1, #0]
10012cac:	021b      	lsls	r3, r3, #8
10012cae:	430b      	orrs	r3, r1
10012cb0:	8053      	strh	r3, [r2, #2]
10012cb2:	4770      	bx	lr

10012cb4 <gattc_read_ind_parser>:
10012cb4:	0a00      	lsrs	r0, r0, #8
10012cb6:	b508      	push	{r3, lr}
10012cb8:	8010      	strh	r0, [r2, #0]
10012cba:	1c13      	adds	r3, r2, #0
10012cbc:	2282      	movs	r2, #130	; 0x82
10012cbe:	2000      	movs	r0, #0
10012cc0:	0092      	lsls	r2, r2, #2
10012cc2:	5498      	strb	r0, [r3, r2]
10012cc4:	784a      	ldrb	r2, [r1, #1]
10012cc6:	7808      	ldrb	r0, [r1, #0]
10012cc8:	0212      	lsls	r2, r2, #8
10012cca:	4302      	orrs	r2, r0
10012ccc:	805a      	strh	r2, [r3, #2]
10012cce:	78ca      	ldrb	r2, [r1, #3]
10012cd0:	7888      	ldrb	r0, [r1, #2]
10012cd2:	0212      	lsls	r2, r2, #8
10012cd4:	4302      	orrs	r2, r0
10012cd6:	80da      	strh	r2, [r3, #6]
10012cd8:	794a      	ldrb	r2, [r1, #5]
10012cda:	7908      	ldrb	r0, [r1, #4]
10012cdc:	0212      	lsls	r2, r2, #8
10012cde:	4302      	orrs	r2, r0
10012ce0:	809a      	strh	r2, [r3, #4]
10012ce2:	3308      	adds	r3, #8
10012ce4:	1c18      	adds	r0, r3, #0
10012ce6:	3106      	adds	r1, #6
10012ce8:	4b01      	ldr	r3, [pc, #4]	; (10012cf0 <gattc_read_ind_parser+0x3c>)
10012cea:	4798      	blx	r3
10012cec:	bd08      	pop	{r3, pc}
10012cee:	46c0      	nop			; (mov r8, r8)
10012cf0:	10015103 	.word	0x10015103

10012cf4 <gattc_svc_changed_cfg_ind_parser>:
10012cf4:	0a00      	lsrs	r0, r0, #8
10012cf6:	8010      	strh	r0, [r2, #0]
10012cf8:	784b      	ldrb	r3, [r1, #1]
10012cfa:	7809      	ldrb	r1, [r1, #0]
10012cfc:	021b      	lsls	r3, r3, #8
10012cfe:	430b      	orrs	r3, r1
10012d00:	8053      	strh	r3, [r2, #2]
10012d02:	4770      	bx	lr

10012d04 <init_gattc_task_module>:
10012d04:	2300      	movs	r3, #0
10012d06:	4a02      	ldr	r2, [pc, #8]	; (10012d10 <init_gattc_task_module+0xc>)
10012d08:	8013      	strh	r3, [r2, #0]
10012d0a:	4a02      	ldr	r2, [pc, #8]	; (10012d14 <init_gattc_task_module+0x10>)
10012d0c:	8013      	strh	r3, [r2, #0]
10012d0e:	4770      	bx	lr
10012d10:	10019eb2 	.word	0x10019eb2
10012d14:	10019eb4 	.word	0x10019eb4

10012d18 <gattm_add_svc_req_handler>:
10012d18:	2200      	movs	r2, #0
10012d1a:	210b      	movs	r1, #11
10012d1c:	b5f0      	push	{r4, r5, r6, r7, lr}
10012d1e:	1c04      	adds	r4, r0, #0
10012d20:	7943      	ldrb	r3, [r0, #5]
10012d22:	b085      	sub	sp, #20
10012d24:	9301      	str	r3, [sp, #4]
10012d26:	ab02      	add	r3, sp, #8
10012d28:	71da      	strb	r2, [r3, #7]
10012d2a:	4b37      	ldr	r3, [pc, #220]	; (10012e08 <gattm_add_svc_req_handler+0xf0>)
10012d2c:	7059      	strb	r1, [r3, #1]
10012d2e:	7099      	strb	r1, [r3, #2]
10012d30:	4936      	ldr	r1, [pc, #216]	; (10012e0c <gattm_add_svc_req_handler+0xf4>)
10012d32:	701a      	strb	r2, [r3, #0]
10012d34:	8808      	ldrh	r0, [r1, #0]
10012d36:	8809      	ldrh	r1, [r1, #0]
10012d38:	70da      	strb	r2, [r3, #3]
10012d3a:	0a09      	lsrs	r1, r1, #8
10012d3c:	7118      	strb	r0, [r3, #4]
10012d3e:	7159      	strb	r1, [r3, #5]
10012d40:	8821      	ldrh	r1, [r4, #0]
10012d42:	7219      	strb	r1, [r3, #8]
10012d44:	8821      	ldrh	r1, [r4, #0]
10012d46:	0a09      	lsrs	r1, r1, #8
10012d48:	7259      	strb	r1, [r3, #9]
10012d4a:	8861      	ldrh	r1, [r4, #2]
10012d4c:	7299      	strb	r1, [r3, #10]
10012d4e:	8861      	ldrh	r1, [r4, #2]
10012d50:	0a09      	lsrs	r1, r1, #8
10012d52:	72d9      	strb	r1, [r3, #11]
10012d54:	7921      	ldrb	r1, [r4, #4]
10012d56:	7319      	strb	r1, [r3, #12]
10012d58:	4669      	mov	r1, sp
10012d5a:	7909      	ldrb	r1, [r1, #4]
10012d5c:	7359      	strb	r1, [r3, #13]
10012d5e:	18a1      	adds	r1, r4, r2
10012d60:	7988      	ldrb	r0, [r1, #6]
10012d62:	1899      	adds	r1, r3, r2
10012d64:	3201      	adds	r2, #1
10012d66:	7388      	strb	r0, [r1, #14]
10012d68:	2a10      	cmp	r2, #16
10012d6a:	d1f8      	bne.n	10012d5e <gattm_add_svc_req_handler+0x46>
10012d6c:	1c27      	adds	r7, r4, #0
10012d6e:	2300      	movs	r3, #0
10012d70:	251e      	movs	r5, #30
10012d72:	3716      	adds	r7, #22
10012d74:	9300      	str	r3, [sp, #0]
10012d76:	9b00      	ldr	r3, [sp, #0]
10012d78:	9a01      	ldr	r2, [sp, #4]
10012d7a:	4e23      	ldr	r6, [pc, #140]	; (10012e08 <gattm_add_svc_req_handler+0xf0>)
10012d7c:	4293      	cmp	r3, r2
10012d7e:	da21      	bge.n	10012dc4 <gattm_add_svc_req_handler+0xac>
10012d80:	1c39      	adds	r1, r7, #0
10012d82:	1970      	adds	r0, r6, r5
10012d84:	2210      	movs	r2, #16
10012d86:	4b22      	ldr	r3, [pc, #136]	; (10012e10 <gattm_add_svc_req_handler+0xf8>)
10012d88:	4798      	blx	r3
10012d8a:	1c2b      	adds	r3, r5, #0
10012d8c:	8a3a      	ldrh	r2, [r7, #16]
10012d8e:	3310      	adds	r3, #16
10012d90:	b29b      	uxth	r3, r3
10012d92:	54f2      	strb	r2, [r6, r3]
10012d94:	1c2b      	adds	r3, r5, #0
10012d96:	8a3a      	ldrh	r2, [r7, #16]
10012d98:	3311      	adds	r3, #17
10012d9a:	b29b      	uxth	r3, r3
10012d9c:	0a12      	lsrs	r2, r2, #8
10012d9e:	54f2      	strb	r2, [r6, r3]
10012da0:	1c2a      	adds	r2, r5, #0
10012da2:	1c2b      	adds	r3, r5, #0
10012da4:	8a79      	ldrh	r1, [r7, #18]
10012da6:	3212      	adds	r2, #18
10012da8:	b292      	uxth	r2, r2
10012daa:	54b1      	strb	r1, [r6, r2]
10012dac:	8a7a      	ldrh	r2, [r7, #18]
10012dae:	3313      	adds	r3, #19
10012db0:	b29b      	uxth	r3, r3
10012db2:	0a12      	lsrs	r2, r2, #8
10012db4:	54f2      	strb	r2, [r6, r3]
10012db6:	9b00      	ldr	r3, [sp, #0]
10012db8:	3514      	adds	r5, #20
10012dba:	3301      	adds	r3, #1
10012dbc:	b2ad      	uxth	r5, r5
10012dbe:	9300      	str	r3, [sp, #0]
10012dc0:	3714      	adds	r7, #20
10012dc2:	e7d8      	b.n	10012d76 <gattm_add_svc_req_handler+0x5e>
10012dc4:	2114      	movs	r1, #20
10012dc6:	4d13      	ldr	r5, [pc, #76]	; (10012e14 <gattm_add_svc_req_handler+0xfc>)
10012dc8:	4b13      	ldr	r3, [pc, #76]	; (10012e18 <gattm_add_svc_req_handler+0x100>)
10012dca:	4351      	muls	r1, r2
10012dcc:	802b      	strh	r3, [r5, #0]
10012dce:	230b      	movs	r3, #11
10012dd0:	311e      	adds	r1, #30
10012dd2:	80ab      	strh	r3, [r5, #4]
10012dd4:	1c0b      	adds	r3, r1, #0
10012dd6:	3b08      	subs	r3, #8
10012dd8:	71b3      	strb	r3, [r6, #6]
10012dda:	121b      	asrs	r3, r3, #8
10012ddc:	71f3      	strb	r3, [r6, #7]
10012dde:	1c30      	adds	r0, r6, #0
10012de0:	4b0e      	ldr	r3, [pc, #56]	; (10012e1c <gattm_add_svc_req_handler+0x104>)
10012de2:	4798      	blx	r3
10012de4:	ab02      	add	r3, sp, #8
10012de6:	1dde      	adds	r6, r3, #7
10012de8:	1c30      	adds	r0, r6, #0
10012dea:	4b0d      	ldr	r3, [pc, #52]	; (10012e20 <gattm_add_svc_req_handler+0x108>)
10012dec:	4798      	blx	r3
10012dee:	7833      	ldrb	r3, [r6, #0]
10012df0:	20e2      	movs	r0, #226	; 0xe2
10012df2:	2b00      	cmp	r3, #0
10012df4:	d106      	bne.n	10012e04 <gattm_add_svc_req_handler+0xec>
10012df6:	68aa      	ldr	r2, [r5, #8]
10012df8:	7853      	ldrb	r3, [r2, #1]
10012dfa:	7811      	ldrb	r1, [r2, #0]
10012dfc:	021b      	lsls	r3, r3, #8
10012dfe:	430b      	orrs	r3, r1
10012e00:	8023      	strh	r3, [r4, #0]
10012e02:	7890      	ldrb	r0, [r2, #2]
10012e04:	b005      	add	sp, #20
10012e06:	bdf0      	pop	{r4, r5, r6, r7, pc}
10012e08:	1001b090 	.word	0x1001b090
10012e0c:	1001ad20 	.word	0x1001ad20
10012e10:	10015103 	.word	0x10015103
10012e14:	1001ad14 	.word	0x1001ad14
10012e18:	00000b01 	.word	0x00000b01
10012e1c:	1001166d 	.word	0x1001166d
10012e20:	100116d1 	.word	0x100116d1

10012e24 <gattm_add_attribute_req_handler>:
10012e24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10012e26:	1c1f      	adds	r7, r3, #0
10012e28:	4b16      	ldr	r3, [pc, #88]	; (10012e84 <gattm_add_attribute_req_handler+0x60>)
10012e2a:	9100      	str	r1, [sp, #0]
10012e2c:	9201      	str	r2, [sp, #4]
10012e2e:	1c05      	adds	r5, r0, #0
10012e30:	7946      	ldrb	r6, [r0, #5]
10012e32:	6818      	ldr	r0, [r3, #0]
10012e34:	2114      	movs	r1, #20
10012e36:	4b14      	ldr	r3, [pc, #80]	; (10012e88 <gattm_add_attribute_req_handler+0x64>)
10012e38:	382a      	subs	r0, #42	; 0x2a
10012e3a:	4798      	blx	r3
10012e3c:	2311      	movs	r3, #17
10012e3e:	4286      	cmp	r6, r0
10012e40:	d21e      	bcs.n	10012e80 <gattm_add_attribute_req_handler+0x5c>
10012e42:	2414      	movs	r4, #20
10012e44:	4366      	muls	r6, r4
10012e46:	19a8      	adds	r0, r5, r6
10012e48:	2100      	movs	r1, #0
10012e4a:	2210      	movs	r2, #16
10012e4c:	4b0f      	ldr	r3, [pc, #60]	; (10012e8c <gattm_add_attribute_req_handler+0x68>)
10012e4e:	3016      	adds	r0, #22
10012e50:	4798      	blx	r3
10012e52:	7968      	ldrb	r0, [r5, #5]
10012e54:	1c3a      	adds	r2, r7, #0
10012e56:	4360      	muls	r0, r4
10012e58:	1828      	adds	r0, r5, r0
10012e5a:	4b0d      	ldr	r3, [pc, #52]	; (10012e90 <gattm_add_attribute_req_handler+0x6c>)
10012e5c:	3016      	adds	r0, #22
10012e5e:	9908      	ldr	r1, [sp, #32]
10012e60:	4798      	blx	r3
10012e62:	466a      	mov	r2, sp
10012e64:	796b      	ldrb	r3, [r5, #5]
10012e66:	8812      	ldrh	r2, [r2, #0]
10012e68:	435c      	muls	r4, r3
10012e6a:	192c      	adds	r4, r5, r4
10012e6c:	8522      	strh	r2, [r4, #40]	; 0x28
10012e6e:	466a      	mov	r2, sp
10012e70:	8892      	ldrh	r2, [r2, #4]
10012e72:	84e2      	strh	r2, [r4, #38]	; 0x26
10012e74:	9a09      	ldr	r2, [sp, #36]	; 0x24
10012e76:	8013      	strh	r3, [r2, #0]
10012e78:	796b      	ldrb	r3, [r5, #5]
10012e7a:	3301      	adds	r3, #1
10012e7c:	716b      	strb	r3, [r5, #5]
10012e7e:	2300      	movs	r3, #0
10012e80:	1c18      	adds	r0, r3, #0
10012e82:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10012e84:	10019e28 	.word	0x10019e28
10012e88:	10013011 	.word	0x10013011
10012e8c:	10015115 	.word	0x10015115
10012e90:	10015103 	.word	0x10015103

10012e94 <gattm_att_set_value_req_handler>:
10012e94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10012e96:	466b      	mov	r3, sp
10012e98:	1dde      	adds	r6, r3, #7
10012e9a:	2300      	movs	r3, #0
10012e9c:	1c0d      	adds	r5, r1, #0
10012e9e:	210c      	movs	r1, #12
10012ea0:	270b      	movs	r7, #11
10012ea2:	4c17      	ldr	r4, [pc, #92]	; (10012f00 <gattm_att_set_value_req_handler+0x6c>)
10012ea4:	7033      	strb	r3, [r6, #0]
10012ea6:	70e3      	strb	r3, [r4, #3]
10012ea8:	4b16      	ldr	r3, [pc, #88]	; (10012f04 <gattm_att_set_value_req_handler+0x70>)
10012eaa:	7021      	strb	r1, [r4, #0]
10012eac:	8819      	ldrh	r1, [r3, #0]
10012eae:	881b      	ldrh	r3, [r3, #0]
10012eb0:	7220      	strb	r0, [r4, #8]
10012eb2:	0a1b      	lsrs	r3, r3, #8
10012eb4:	7163      	strb	r3, [r4, #5]
10012eb6:	0a00      	lsrs	r0, r0, #8
10012eb8:	0a2b      	lsrs	r3, r5, #8
10012eba:	7121      	strb	r1, [r4, #4]
10012ebc:	7260      	strb	r0, [r4, #9]
10012ebe:	1c11      	adds	r1, r2, #0
10012ec0:	72a5      	strb	r5, [r4, #10]
10012ec2:	1c2a      	adds	r2, r5, #0
10012ec4:	72e3      	strb	r3, [r4, #11]
10012ec6:	350c      	adds	r5, #12
10012ec8:	4b0f      	ldr	r3, [pc, #60]	; (10012f08 <gattm_att_set_value_req_handler+0x74>)
10012eca:	4810      	ldr	r0, [pc, #64]	; (10012f0c <gattm_att_set_value_req_handler+0x78>)
10012ecc:	7067      	strb	r7, [r4, #1]
10012ece:	70a7      	strb	r7, [r4, #2]
10012ed0:	4798      	blx	r3
10012ed2:	b2a9      	uxth	r1, r5
10012ed4:	4b0e      	ldr	r3, [pc, #56]	; (10012f10 <gattm_att_set_value_req_handler+0x7c>)
10012ed6:	4d0f      	ldr	r5, [pc, #60]	; (10012f14 <gattm_att_set_value_req_handler+0x80>)
10012ed8:	1c20      	adds	r0, r4, #0
10012eda:	802b      	strh	r3, [r5, #0]
10012edc:	1c0b      	adds	r3, r1, #0
10012ede:	3b08      	subs	r3, #8
10012ee0:	71a3      	strb	r3, [r4, #6]
10012ee2:	121b      	asrs	r3, r3, #8
10012ee4:	71e3      	strb	r3, [r4, #7]
10012ee6:	4b0c      	ldr	r3, [pc, #48]	; (10012f18 <gattm_att_set_value_req_handler+0x84>)
10012ee8:	80af      	strh	r7, [r5, #4]
10012eea:	4798      	blx	r3
10012eec:	1c30      	adds	r0, r6, #0
10012eee:	4b0b      	ldr	r3, [pc, #44]	; (10012f1c <gattm_att_set_value_req_handler+0x88>)
10012ef0:	4798      	blx	r3
10012ef2:	7833      	ldrb	r3, [r6, #0]
10012ef4:	20e2      	movs	r0, #226	; 0xe2
10012ef6:	2b00      	cmp	r3, #0
10012ef8:	d101      	bne.n	10012efe <gattm_att_set_value_req_handler+0x6a>
10012efa:	68ab      	ldr	r3, [r5, #8]
10012efc:	7898      	ldrb	r0, [r3, #2]
10012efe:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10012f00:	1001b090 	.word	0x1001b090
10012f04:	1001ad20 	.word	0x1001ad20
10012f08:	10015103 	.word	0x10015103
10012f0c:	1001b09c 	.word	0x1001b09c
10012f10:	00000b0d 	.word	0x00000b0d
10012f14:	1001ad14 	.word	0x1001ad14
10012f18:	1001166d 	.word	0x1001166d
10012f1c:	100116d1 	.word	0x100116d1

10012f20 <gattm_att_get_value_req_handler>:
10012f20:	b5f0      	push	{r4, r5, r6, r7, lr}
10012f22:	b085      	sub	sp, #20
10012f24:	9201      	str	r2, [sp, #4]
10012f26:	220a      	movs	r2, #10
10012f28:	1c04      	adds	r4, r0, #0
10012f2a:	481d      	ldr	r0, [pc, #116]	; (10012fa0 <gattm_att_get_value_req_handler+0x80>)
10012f2c:	ab02      	add	r3, sp, #8
10012f2e:	1dde      	adds	r6, r3, #7
10012f30:	7002      	strb	r2, [r0, #0]
10012f32:	2300      	movs	r3, #0
10012f34:	220b      	movs	r2, #11
10012f36:	4d1b      	ldr	r5, [pc, #108]	; (10012fa4 <gattm_att_get_value_req_handler+0x84>)
10012f38:	1c0f      	adds	r7, r1, #0
10012f3a:	8829      	ldrh	r1, [r5, #0]
10012f3c:	882d      	ldrh	r5, [r5, #0]
10012f3e:	7101      	strb	r1, [r0, #4]
10012f40:	0a2d      	lsrs	r5, r5, #8
10012f42:	7145      	strb	r5, [r0, #5]
10012f44:	0a25      	lsrs	r5, r4, #8
10012f46:	7245      	strb	r5, [r0, #9]
10012f48:	4917      	ldr	r1, [pc, #92]	; (10012fa8 <gattm_att_get_value_req_handler+0x88>)
10012f4a:	4d18      	ldr	r5, [pc, #96]	; (10012fac <gattm_att_get_value_req_handler+0x8c>)
10012f4c:	7033      	strb	r3, [r6, #0]
10012f4e:	7042      	strb	r2, [r0, #1]
10012f50:	7082      	strb	r2, [r0, #2]
10012f52:	70c3      	strb	r3, [r0, #3]
10012f54:	8029      	strh	r1, [r5, #0]
10012f56:	80aa      	strh	r2, [r5, #4]
10012f58:	71c3      	strb	r3, [r0, #7]
10012f5a:	3a09      	subs	r2, #9
10012f5c:	210a      	movs	r1, #10
10012f5e:	4b14      	ldr	r3, [pc, #80]	; (10012fb0 <gattm_att_get_value_req_handler+0x90>)
10012f60:	7182      	strb	r2, [r0, #6]
10012f62:	7204      	strb	r4, [r0, #8]
10012f64:	4798      	blx	r3
10012f66:	1c30      	adds	r0, r6, #0
10012f68:	4b12      	ldr	r3, [pc, #72]	; (10012fb4 <gattm_att_get_value_req_handler+0x94>)
10012f6a:	4798      	blx	r3
10012f6c:	7833      	ldrb	r3, [r6, #0]
10012f6e:	20e2      	movs	r0, #226	; 0xe2
10012f70:	2b00      	cmp	r3, #0
10012f72:	d112      	bne.n	10012f9a <gattm_att_get_value_req_handler+0x7a>
10012f74:	68a9      	ldr	r1, [r5, #8]
10012f76:	9801      	ldr	r0, [sp, #4]
10012f78:	784d      	ldrb	r5, [r1, #1]
10012f7a:	780b      	ldrb	r3, [r1, #0]
10012f7c:	78ca      	ldrb	r2, [r1, #3]
10012f7e:	022d      	lsls	r5, r5, #8
10012f80:	431d      	orrs	r5, r3
10012f82:	788b      	ldrb	r3, [r1, #2]
10012f84:	0212      	lsls	r2, r2, #8
10012f86:	431a      	orrs	r2, r3
10012f88:	803a      	strh	r2, [r7, #0]
10012f8a:	790e      	ldrb	r6, [r1, #4]
10012f8c:	4b0a      	ldr	r3, [pc, #40]	; (10012fb8 <gattm_att_get_value_req_handler+0x98>)
10012f8e:	3105      	adds	r1, #5
10012f90:	4798      	blx	r3
10012f92:	20e2      	movs	r0, #226	; 0xe2
10012f94:	42ac      	cmp	r4, r5
10012f96:	d100      	bne.n	10012f9a <gattm_att_get_value_req_handler+0x7a>
10012f98:	1c30      	adds	r0, r6, #0
10012f9a:	b005      	add	sp, #20
10012f9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
10012f9e:	46c0      	nop			; (mov r8, r8)
10012fa0:	1001b090 	.word	0x1001b090
10012fa4:	1001ad20 	.word	0x1001ad20
10012fa8:	00000b0b 	.word	0x00000b0b
10012fac:	1001ad14 	.word	0x1001ad14
10012fb0:	1001166d 	.word	0x1001166d
10012fb4:	100116d1 	.word	0x100116d1
10012fb8:	10015103 	.word	0x10015103

10012fbc <htpt_enable_rsp_handler>:
10012fbc:	780b      	ldrb	r3, [r1, #0]
10012fbe:	7013      	strb	r3, [r2, #0]
10012fc0:	784b      	ldrb	r3, [r1, #1]
10012fc2:	7053      	strb	r3, [r2, #1]
10012fc4:	4770      	bx	lr

10012fc6 <htpt_temp_send_rsp_handler>:
10012fc6:	780b      	ldrb	r3, [r1, #0]
10012fc8:	7013      	strb	r3, [r2, #0]
10012fca:	4770      	bx	lr

10012fcc <htpt_meas_intv_upd_rsp_handler>:
10012fcc:	780b      	ldrb	r3, [r1, #0]
10012fce:	7013      	strb	r3, [r2, #0]
10012fd0:	4770      	bx	lr

10012fd2 <htpt_meas_intv_chg_req_ind_handler>:
10012fd2:	78cb      	ldrb	r3, [r1, #3]
10012fd4:	7889      	ldrb	r1, [r1, #2]
10012fd6:	021b      	lsls	r3, r3, #8
10012fd8:	430b      	orrs	r3, r1
10012fda:	8013      	strh	r3, [r2, #0]
10012fdc:	4770      	bx	lr

10012fde <htpt_cfg_indntf_ind_handler>:
10012fde:	780b      	ldrb	r3, [r1, #0]
10012fe0:	7013      	strb	r3, [r2, #0]
10012fe2:	784b      	ldrb	r3, [r1, #1]
10012fe4:	7053      	strb	r3, [r2, #1]
10012fe6:	4770      	bx	lr

10012fe8 <__gnu_thumb1_case_sqi>:
10012fe8:	b402      	push	{r1}
10012fea:	4671      	mov	r1, lr
10012fec:	0849      	lsrs	r1, r1, #1
10012fee:	0049      	lsls	r1, r1, #1
10012ff0:	5609      	ldrsb	r1, [r1, r0]
10012ff2:	0049      	lsls	r1, r1, #1
10012ff4:	448e      	add	lr, r1
10012ff6:	bc02      	pop	{r1}
10012ff8:	4770      	bx	lr
10012ffa:	46c0      	nop			; (mov r8, r8)

10012ffc <__gnu_thumb1_case_uqi>:
10012ffc:	b402      	push	{r1}
10012ffe:	4671      	mov	r1, lr
10013000:	0849      	lsrs	r1, r1, #1
10013002:	0049      	lsls	r1, r1, #1
10013004:	5c09      	ldrb	r1, [r1, r0]
10013006:	0049      	lsls	r1, r1, #1
10013008:	448e      	add	lr, r1
1001300a:	bc02      	pop	{r1}
1001300c:	4770      	bx	lr
1001300e:	46c0      	nop			; (mov r8, r8)

10013010 <__aeabi_uidiv>:
10013010:	2200      	movs	r2, #0
10013012:	0843      	lsrs	r3, r0, #1
10013014:	428b      	cmp	r3, r1
10013016:	d374      	bcc.n	10013102 <__aeabi_uidiv+0xf2>
10013018:	0903      	lsrs	r3, r0, #4
1001301a:	428b      	cmp	r3, r1
1001301c:	d35f      	bcc.n	100130de <__aeabi_uidiv+0xce>
1001301e:	0a03      	lsrs	r3, r0, #8
10013020:	428b      	cmp	r3, r1
10013022:	d344      	bcc.n	100130ae <__aeabi_uidiv+0x9e>
10013024:	0b03      	lsrs	r3, r0, #12
10013026:	428b      	cmp	r3, r1
10013028:	d328      	bcc.n	1001307c <__aeabi_uidiv+0x6c>
1001302a:	0c03      	lsrs	r3, r0, #16
1001302c:	428b      	cmp	r3, r1
1001302e:	d30d      	bcc.n	1001304c <__aeabi_uidiv+0x3c>
10013030:	22ff      	movs	r2, #255	; 0xff
10013032:	0209      	lsls	r1, r1, #8
10013034:	ba12      	rev	r2, r2
10013036:	0c03      	lsrs	r3, r0, #16
10013038:	428b      	cmp	r3, r1
1001303a:	d302      	bcc.n	10013042 <__aeabi_uidiv+0x32>
1001303c:	1212      	asrs	r2, r2, #8
1001303e:	0209      	lsls	r1, r1, #8
10013040:	d065      	beq.n	1001310e <__aeabi_uidiv+0xfe>
10013042:	0b03      	lsrs	r3, r0, #12
10013044:	428b      	cmp	r3, r1
10013046:	d319      	bcc.n	1001307c <__aeabi_uidiv+0x6c>
10013048:	e000      	b.n	1001304c <__aeabi_uidiv+0x3c>
1001304a:	0a09      	lsrs	r1, r1, #8
1001304c:	0bc3      	lsrs	r3, r0, #15
1001304e:	428b      	cmp	r3, r1
10013050:	d301      	bcc.n	10013056 <__aeabi_uidiv+0x46>
10013052:	03cb      	lsls	r3, r1, #15
10013054:	1ac0      	subs	r0, r0, r3
10013056:	4152      	adcs	r2, r2
10013058:	0b83      	lsrs	r3, r0, #14
1001305a:	428b      	cmp	r3, r1
1001305c:	d301      	bcc.n	10013062 <__aeabi_uidiv+0x52>
1001305e:	038b      	lsls	r3, r1, #14
10013060:	1ac0      	subs	r0, r0, r3
10013062:	4152      	adcs	r2, r2
10013064:	0b43      	lsrs	r3, r0, #13
10013066:	428b      	cmp	r3, r1
10013068:	d301      	bcc.n	1001306e <__aeabi_uidiv+0x5e>
1001306a:	034b      	lsls	r3, r1, #13
1001306c:	1ac0      	subs	r0, r0, r3
1001306e:	4152      	adcs	r2, r2
10013070:	0b03      	lsrs	r3, r0, #12
10013072:	428b      	cmp	r3, r1
10013074:	d301      	bcc.n	1001307a <__aeabi_uidiv+0x6a>
10013076:	030b      	lsls	r3, r1, #12
10013078:	1ac0      	subs	r0, r0, r3
1001307a:	4152      	adcs	r2, r2
1001307c:	0ac3      	lsrs	r3, r0, #11
1001307e:	428b      	cmp	r3, r1
10013080:	d301      	bcc.n	10013086 <__aeabi_uidiv+0x76>
10013082:	02cb      	lsls	r3, r1, #11
10013084:	1ac0      	subs	r0, r0, r3
10013086:	4152      	adcs	r2, r2
10013088:	0a83      	lsrs	r3, r0, #10
1001308a:	428b      	cmp	r3, r1
1001308c:	d301      	bcc.n	10013092 <__aeabi_uidiv+0x82>
1001308e:	028b      	lsls	r3, r1, #10
10013090:	1ac0      	subs	r0, r0, r3
10013092:	4152      	adcs	r2, r2
10013094:	0a43      	lsrs	r3, r0, #9
10013096:	428b      	cmp	r3, r1
10013098:	d301      	bcc.n	1001309e <__aeabi_uidiv+0x8e>
1001309a:	024b      	lsls	r3, r1, #9
1001309c:	1ac0      	subs	r0, r0, r3
1001309e:	4152      	adcs	r2, r2
100130a0:	0a03      	lsrs	r3, r0, #8
100130a2:	428b      	cmp	r3, r1
100130a4:	d301      	bcc.n	100130aa <__aeabi_uidiv+0x9a>
100130a6:	020b      	lsls	r3, r1, #8
100130a8:	1ac0      	subs	r0, r0, r3
100130aa:	4152      	adcs	r2, r2
100130ac:	d2cd      	bcs.n	1001304a <__aeabi_uidiv+0x3a>
100130ae:	09c3      	lsrs	r3, r0, #7
100130b0:	428b      	cmp	r3, r1
100130b2:	d301      	bcc.n	100130b8 <__aeabi_uidiv+0xa8>
100130b4:	01cb      	lsls	r3, r1, #7
100130b6:	1ac0      	subs	r0, r0, r3
100130b8:	4152      	adcs	r2, r2
100130ba:	0983      	lsrs	r3, r0, #6
100130bc:	428b      	cmp	r3, r1
100130be:	d301      	bcc.n	100130c4 <__aeabi_uidiv+0xb4>
100130c0:	018b      	lsls	r3, r1, #6
100130c2:	1ac0      	subs	r0, r0, r3
100130c4:	4152      	adcs	r2, r2
100130c6:	0943      	lsrs	r3, r0, #5
100130c8:	428b      	cmp	r3, r1
100130ca:	d301      	bcc.n	100130d0 <__aeabi_uidiv+0xc0>
100130cc:	014b      	lsls	r3, r1, #5
100130ce:	1ac0      	subs	r0, r0, r3
100130d0:	4152      	adcs	r2, r2
100130d2:	0903      	lsrs	r3, r0, #4
100130d4:	428b      	cmp	r3, r1
100130d6:	d301      	bcc.n	100130dc <__aeabi_uidiv+0xcc>
100130d8:	010b      	lsls	r3, r1, #4
100130da:	1ac0      	subs	r0, r0, r3
100130dc:	4152      	adcs	r2, r2
100130de:	08c3      	lsrs	r3, r0, #3
100130e0:	428b      	cmp	r3, r1
100130e2:	d301      	bcc.n	100130e8 <__aeabi_uidiv+0xd8>
100130e4:	00cb      	lsls	r3, r1, #3
100130e6:	1ac0      	subs	r0, r0, r3
100130e8:	4152      	adcs	r2, r2
100130ea:	0883      	lsrs	r3, r0, #2
100130ec:	428b      	cmp	r3, r1
100130ee:	d301      	bcc.n	100130f4 <__aeabi_uidiv+0xe4>
100130f0:	008b      	lsls	r3, r1, #2
100130f2:	1ac0      	subs	r0, r0, r3
100130f4:	4152      	adcs	r2, r2
100130f6:	0843      	lsrs	r3, r0, #1
100130f8:	428b      	cmp	r3, r1
100130fa:	d301      	bcc.n	10013100 <__aeabi_uidiv+0xf0>
100130fc:	004b      	lsls	r3, r1, #1
100130fe:	1ac0      	subs	r0, r0, r3
10013100:	4152      	adcs	r2, r2
10013102:	1a41      	subs	r1, r0, r1
10013104:	d200      	bcs.n	10013108 <__aeabi_uidiv+0xf8>
10013106:	4601      	mov	r1, r0
10013108:	4152      	adcs	r2, r2
1001310a:	4610      	mov	r0, r2
1001310c:	4770      	bx	lr
1001310e:	e7ff      	b.n	10013110 <__aeabi_uidiv+0x100>
10013110:	b501      	push	{r0, lr}
10013112:	2000      	movs	r0, #0
10013114:	f000 f8f0 	bl	100132f8 <__aeabi_idiv0>
10013118:	bd02      	pop	{r1, pc}
1001311a:	46c0      	nop			; (mov r8, r8)

1001311c <__aeabi_uidivmod>:
1001311c:	2900      	cmp	r1, #0
1001311e:	d0f7      	beq.n	10013110 <__aeabi_uidiv+0x100>
10013120:	e776      	b.n	10013010 <__aeabi_uidiv>
10013122:	4770      	bx	lr

10013124 <__aeabi_idiv>:
10013124:	4603      	mov	r3, r0
10013126:	430b      	orrs	r3, r1
10013128:	d47f      	bmi.n	1001322a <__aeabi_idiv+0x106>
1001312a:	2200      	movs	r2, #0
1001312c:	0843      	lsrs	r3, r0, #1
1001312e:	428b      	cmp	r3, r1
10013130:	d374      	bcc.n	1001321c <__aeabi_idiv+0xf8>
10013132:	0903      	lsrs	r3, r0, #4
10013134:	428b      	cmp	r3, r1
10013136:	d35f      	bcc.n	100131f8 <__aeabi_idiv+0xd4>
10013138:	0a03      	lsrs	r3, r0, #8
1001313a:	428b      	cmp	r3, r1
1001313c:	d344      	bcc.n	100131c8 <__aeabi_idiv+0xa4>
1001313e:	0b03      	lsrs	r3, r0, #12
10013140:	428b      	cmp	r3, r1
10013142:	d328      	bcc.n	10013196 <__aeabi_idiv+0x72>
10013144:	0c03      	lsrs	r3, r0, #16
10013146:	428b      	cmp	r3, r1
10013148:	d30d      	bcc.n	10013166 <__aeabi_idiv+0x42>
1001314a:	22ff      	movs	r2, #255	; 0xff
1001314c:	0209      	lsls	r1, r1, #8
1001314e:	ba12      	rev	r2, r2
10013150:	0c03      	lsrs	r3, r0, #16
10013152:	428b      	cmp	r3, r1
10013154:	d302      	bcc.n	1001315c <__aeabi_idiv+0x38>
10013156:	1212      	asrs	r2, r2, #8
10013158:	0209      	lsls	r1, r1, #8
1001315a:	d065      	beq.n	10013228 <__aeabi_idiv+0x104>
1001315c:	0b03      	lsrs	r3, r0, #12
1001315e:	428b      	cmp	r3, r1
10013160:	d319      	bcc.n	10013196 <__aeabi_idiv+0x72>
10013162:	e000      	b.n	10013166 <__aeabi_idiv+0x42>
10013164:	0a09      	lsrs	r1, r1, #8
10013166:	0bc3      	lsrs	r3, r0, #15
10013168:	428b      	cmp	r3, r1
1001316a:	d301      	bcc.n	10013170 <__aeabi_idiv+0x4c>
1001316c:	03cb      	lsls	r3, r1, #15
1001316e:	1ac0      	subs	r0, r0, r3
10013170:	4152      	adcs	r2, r2
10013172:	0b83      	lsrs	r3, r0, #14
10013174:	428b      	cmp	r3, r1
10013176:	d301      	bcc.n	1001317c <__aeabi_idiv+0x58>
10013178:	038b      	lsls	r3, r1, #14
1001317a:	1ac0      	subs	r0, r0, r3
1001317c:	4152      	adcs	r2, r2
1001317e:	0b43      	lsrs	r3, r0, #13
10013180:	428b      	cmp	r3, r1
10013182:	d301      	bcc.n	10013188 <__aeabi_idiv+0x64>
10013184:	034b      	lsls	r3, r1, #13
10013186:	1ac0      	subs	r0, r0, r3
10013188:	4152      	adcs	r2, r2
1001318a:	0b03      	lsrs	r3, r0, #12
1001318c:	428b      	cmp	r3, r1
1001318e:	d301      	bcc.n	10013194 <__aeabi_idiv+0x70>
10013190:	030b      	lsls	r3, r1, #12
10013192:	1ac0      	subs	r0, r0, r3
10013194:	4152      	adcs	r2, r2
10013196:	0ac3      	lsrs	r3, r0, #11
10013198:	428b      	cmp	r3, r1
1001319a:	d301      	bcc.n	100131a0 <__aeabi_idiv+0x7c>
1001319c:	02cb      	lsls	r3, r1, #11
1001319e:	1ac0      	subs	r0, r0, r3
100131a0:	4152      	adcs	r2, r2
100131a2:	0a83      	lsrs	r3, r0, #10
100131a4:	428b      	cmp	r3, r1
100131a6:	d301      	bcc.n	100131ac <__aeabi_idiv+0x88>
100131a8:	028b      	lsls	r3, r1, #10
100131aa:	1ac0      	subs	r0, r0, r3
100131ac:	4152      	adcs	r2, r2
100131ae:	0a43      	lsrs	r3, r0, #9
100131b0:	428b      	cmp	r3, r1
100131b2:	d301      	bcc.n	100131b8 <__aeabi_idiv+0x94>
100131b4:	024b      	lsls	r3, r1, #9
100131b6:	1ac0      	subs	r0, r0, r3
100131b8:	4152      	adcs	r2, r2
100131ba:	0a03      	lsrs	r3, r0, #8
100131bc:	428b      	cmp	r3, r1
100131be:	d301      	bcc.n	100131c4 <__aeabi_idiv+0xa0>
100131c0:	020b      	lsls	r3, r1, #8
100131c2:	1ac0      	subs	r0, r0, r3
100131c4:	4152      	adcs	r2, r2
100131c6:	d2cd      	bcs.n	10013164 <__aeabi_idiv+0x40>
100131c8:	09c3      	lsrs	r3, r0, #7
100131ca:	428b      	cmp	r3, r1
100131cc:	d301      	bcc.n	100131d2 <__aeabi_idiv+0xae>
100131ce:	01cb      	lsls	r3, r1, #7
100131d0:	1ac0      	subs	r0, r0, r3
100131d2:	4152      	adcs	r2, r2
100131d4:	0983      	lsrs	r3, r0, #6
100131d6:	428b      	cmp	r3, r1
100131d8:	d301      	bcc.n	100131de <__aeabi_idiv+0xba>
100131da:	018b      	lsls	r3, r1, #6
100131dc:	1ac0      	subs	r0, r0, r3
100131de:	4152      	adcs	r2, r2
100131e0:	0943      	lsrs	r3, r0, #5
100131e2:	428b      	cmp	r3, r1
100131e4:	d301      	bcc.n	100131ea <__aeabi_idiv+0xc6>
100131e6:	014b      	lsls	r3, r1, #5
100131e8:	1ac0      	subs	r0, r0, r3
100131ea:	4152      	adcs	r2, r2
100131ec:	0903      	lsrs	r3, r0, #4
100131ee:	428b      	cmp	r3, r1
100131f0:	d301      	bcc.n	100131f6 <__aeabi_idiv+0xd2>
100131f2:	010b      	lsls	r3, r1, #4
100131f4:	1ac0      	subs	r0, r0, r3
100131f6:	4152      	adcs	r2, r2
100131f8:	08c3      	lsrs	r3, r0, #3
100131fa:	428b      	cmp	r3, r1
100131fc:	d301      	bcc.n	10013202 <__aeabi_idiv+0xde>
100131fe:	00cb      	lsls	r3, r1, #3
10013200:	1ac0      	subs	r0, r0, r3
10013202:	4152      	adcs	r2, r2
10013204:	0883      	lsrs	r3, r0, #2
10013206:	428b      	cmp	r3, r1
10013208:	d301      	bcc.n	1001320e <__aeabi_idiv+0xea>
1001320a:	008b      	lsls	r3, r1, #2
1001320c:	1ac0      	subs	r0, r0, r3
1001320e:	4152      	adcs	r2, r2
10013210:	0843      	lsrs	r3, r0, #1
10013212:	428b      	cmp	r3, r1
10013214:	d301      	bcc.n	1001321a <__aeabi_idiv+0xf6>
10013216:	004b      	lsls	r3, r1, #1
10013218:	1ac0      	subs	r0, r0, r3
1001321a:	4152      	adcs	r2, r2
1001321c:	1a41      	subs	r1, r0, r1
1001321e:	d200      	bcs.n	10013222 <__aeabi_idiv+0xfe>
10013220:	4601      	mov	r1, r0
10013222:	4152      	adcs	r2, r2
10013224:	4610      	mov	r0, r2
10013226:	4770      	bx	lr
10013228:	e05d      	b.n	100132e6 <__aeabi_idiv+0x1c2>
1001322a:	0fca      	lsrs	r2, r1, #31
1001322c:	d000      	beq.n	10013230 <__aeabi_idiv+0x10c>
1001322e:	4249      	negs	r1, r1
10013230:	1003      	asrs	r3, r0, #32
10013232:	d300      	bcc.n	10013236 <__aeabi_idiv+0x112>
10013234:	4240      	negs	r0, r0
10013236:	4053      	eors	r3, r2
10013238:	2200      	movs	r2, #0
1001323a:	469c      	mov	ip, r3
1001323c:	0903      	lsrs	r3, r0, #4
1001323e:	428b      	cmp	r3, r1
10013240:	d32d      	bcc.n	1001329e <__aeabi_idiv+0x17a>
10013242:	0a03      	lsrs	r3, r0, #8
10013244:	428b      	cmp	r3, r1
10013246:	d312      	bcc.n	1001326e <__aeabi_idiv+0x14a>
10013248:	22fc      	movs	r2, #252	; 0xfc
1001324a:	0189      	lsls	r1, r1, #6
1001324c:	ba12      	rev	r2, r2
1001324e:	0a03      	lsrs	r3, r0, #8
10013250:	428b      	cmp	r3, r1
10013252:	d30c      	bcc.n	1001326e <__aeabi_idiv+0x14a>
10013254:	0189      	lsls	r1, r1, #6
10013256:	1192      	asrs	r2, r2, #6
10013258:	428b      	cmp	r3, r1
1001325a:	d308      	bcc.n	1001326e <__aeabi_idiv+0x14a>
1001325c:	0189      	lsls	r1, r1, #6
1001325e:	1192      	asrs	r2, r2, #6
10013260:	428b      	cmp	r3, r1
10013262:	d304      	bcc.n	1001326e <__aeabi_idiv+0x14a>
10013264:	0189      	lsls	r1, r1, #6
10013266:	d03a      	beq.n	100132de <__aeabi_idiv+0x1ba>
10013268:	1192      	asrs	r2, r2, #6
1001326a:	e000      	b.n	1001326e <__aeabi_idiv+0x14a>
1001326c:	0989      	lsrs	r1, r1, #6
1001326e:	09c3      	lsrs	r3, r0, #7
10013270:	428b      	cmp	r3, r1
10013272:	d301      	bcc.n	10013278 <__aeabi_idiv+0x154>
10013274:	01cb      	lsls	r3, r1, #7
10013276:	1ac0      	subs	r0, r0, r3
10013278:	4152      	adcs	r2, r2
1001327a:	0983      	lsrs	r3, r0, #6
1001327c:	428b      	cmp	r3, r1
1001327e:	d301      	bcc.n	10013284 <__aeabi_idiv+0x160>
10013280:	018b      	lsls	r3, r1, #6
10013282:	1ac0      	subs	r0, r0, r3
10013284:	4152      	adcs	r2, r2
10013286:	0943      	lsrs	r3, r0, #5
10013288:	428b      	cmp	r3, r1
1001328a:	d301      	bcc.n	10013290 <__aeabi_idiv+0x16c>
1001328c:	014b      	lsls	r3, r1, #5
1001328e:	1ac0      	subs	r0, r0, r3
10013290:	4152      	adcs	r2, r2
10013292:	0903      	lsrs	r3, r0, #4
10013294:	428b      	cmp	r3, r1
10013296:	d301      	bcc.n	1001329c <__aeabi_idiv+0x178>
10013298:	010b      	lsls	r3, r1, #4
1001329a:	1ac0      	subs	r0, r0, r3
1001329c:	4152      	adcs	r2, r2
1001329e:	08c3      	lsrs	r3, r0, #3
100132a0:	428b      	cmp	r3, r1
100132a2:	d301      	bcc.n	100132a8 <__aeabi_idiv+0x184>
100132a4:	00cb      	lsls	r3, r1, #3
100132a6:	1ac0      	subs	r0, r0, r3
100132a8:	4152      	adcs	r2, r2
100132aa:	0883      	lsrs	r3, r0, #2
100132ac:	428b      	cmp	r3, r1
100132ae:	d301      	bcc.n	100132b4 <__aeabi_idiv+0x190>
100132b0:	008b      	lsls	r3, r1, #2
100132b2:	1ac0      	subs	r0, r0, r3
100132b4:	4152      	adcs	r2, r2
100132b6:	d2d9      	bcs.n	1001326c <__aeabi_idiv+0x148>
100132b8:	0843      	lsrs	r3, r0, #1
100132ba:	428b      	cmp	r3, r1
100132bc:	d301      	bcc.n	100132c2 <__aeabi_idiv+0x19e>
100132be:	004b      	lsls	r3, r1, #1
100132c0:	1ac0      	subs	r0, r0, r3
100132c2:	4152      	adcs	r2, r2
100132c4:	1a41      	subs	r1, r0, r1
100132c6:	d200      	bcs.n	100132ca <__aeabi_idiv+0x1a6>
100132c8:	4601      	mov	r1, r0
100132ca:	4663      	mov	r3, ip
100132cc:	4152      	adcs	r2, r2
100132ce:	105b      	asrs	r3, r3, #1
100132d0:	4610      	mov	r0, r2
100132d2:	d301      	bcc.n	100132d8 <__aeabi_idiv+0x1b4>
100132d4:	4240      	negs	r0, r0
100132d6:	2b00      	cmp	r3, #0
100132d8:	d500      	bpl.n	100132dc <__aeabi_idiv+0x1b8>
100132da:	4249      	negs	r1, r1
100132dc:	4770      	bx	lr
100132de:	4663      	mov	r3, ip
100132e0:	105b      	asrs	r3, r3, #1
100132e2:	d300      	bcc.n	100132e6 <__aeabi_idiv+0x1c2>
100132e4:	4240      	negs	r0, r0
100132e6:	b501      	push	{r0, lr}
100132e8:	2000      	movs	r0, #0
100132ea:	f000 f805 	bl	100132f8 <__aeabi_idiv0>
100132ee:	bd02      	pop	{r1, pc}

100132f0 <__aeabi_idivmod>:
100132f0:	2900      	cmp	r1, #0
100132f2:	d0f8      	beq.n	100132e6 <__aeabi_idiv+0x1c2>
100132f4:	e716      	b.n	10013124 <__aeabi_idiv>
100132f6:	4770      	bx	lr

100132f8 <__aeabi_idiv0>:
100132f8:	4770      	bx	lr
100132fa:	46c0      	nop			; (mov r8, r8)

100132fc <__aeabi_cdrcmple>:
100132fc:	4684      	mov	ip, r0
100132fe:	1c10      	adds	r0, r2, #0
10013300:	4662      	mov	r2, ip
10013302:	468c      	mov	ip, r1
10013304:	1c19      	adds	r1, r3, #0
10013306:	4663      	mov	r3, ip
10013308:	e000      	b.n	1001330c <__aeabi_cdcmpeq>
1001330a:	46c0      	nop			; (mov r8, r8)

1001330c <__aeabi_cdcmpeq>:
1001330c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
1001330e:	f000 fff5 	bl	100142fc <__ledf2>
10013312:	2800      	cmp	r0, #0
10013314:	d401      	bmi.n	1001331a <__aeabi_cdcmpeq+0xe>
10013316:	2100      	movs	r1, #0
10013318:	42c8      	cmn	r0, r1
1001331a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

1001331c <__aeabi_dcmpeq>:
1001331c:	b510      	push	{r4, lr}
1001331e:	f000 ff49 	bl	100141b4 <__eqdf2>
10013322:	4240      	negs	r0, r0
10013324:	3001      	adds	r0, #1
10013326:	bd10      	pop	{r4, pc}

10013328 <__aeabi_dcmplt>:
10013328:	b510      	push	{r4, lr}
1001332a:	f000 ffe7 	bl	100142fc <__ledf2>
1001332e:	2800      	cmp	r0, #0
10013330:	db01      	blt.n	10013336 <__aeabi_dcmplt+0xe>
10013332:	2000      	movs	r0, #0
10013334:	bd10      	pop	{r4, pc}
10013336:	2001      	movs	r0, #1
10013338:	bd10      	pop	{r4, pc}
1001333a:	46c0      	nop			; (mov r8, r8)

1001333c <__aeabi_dcmple>:
1001333c:	b510      	push	{r4, lr}
1001333e:	f000 ffdd 	bl	100142fc <__ledf2>
10013342:	2800      	cmp	r0, #0
10013344:	dd01      	ble.n	1001334a <__aeabi_dcmple+0xe>
10013346:	2000      	movs	r0, #0
10013348:	bd10      	pop	{r4, pc}
1001334a:	2001      	movs	r0, #1
1001334c:	bd10      	pop	{r4, pc}
1001334e:	46c0      	nop			; (mov r8, r8)

10013350 <__aeabi_dcmpgt>:
10013350:	b510      	push	{r4, lr}
10013352:	f000 ff6f 	bl	10014234 <__gedf2>
10013356:	2800      	cmp	r0, #0
10013358:	dc01      	bgt.n	1001335e <__aeabi_dcmpgt+0xe>
1001335a:	2000      	movs	r0, #0
1001335c:	bd10      	pop	{r4, pc}
1001335e:	2001      	movs	r0, #1
10013360:	bd10      	pop	{r4, pc}
10013362:	46c0      	nop			; (mov r8, r8)

10013364 <__aeabi_dcmpge>:
10013364:	b510      	push	{r4, lr}
10013366:	f000 ff65 	bl	10014234 <__gedf2>
1001336a:	2800      	cmp	r0, #0
1001336c:	da01      	bge.n	10013372 <__aeabi_dcmpge+0xe>
1001336e:	2000      	movs	r0, #0
10013370:	bd10      	pop	{r4, pc}
10013372:	2001      	movs	r0, #1
10013374:	bd10      	pop	{r4, pc}
10013376:	46c0      	nop			; (mov r8, r8)

10013378 <__aeabi_cfrcmple>:
10013378:	4684      	mov	ip, r0
1001337a:	1c08      	adds	r0, r1, #0
1001337c:	4661      	mov	r1, ip
1001337e:	e7ff      	b.n	10013380 <__aeabi_cfcmpeq>

10013380 <__aeabi_cfcmpeq>:
10013380:	b51f      	push	{r0, r1, r2, r3, r4, lr}
10013382:	f000 fb91 	bl	10013aa8 <__lesf2>
10013386:	2800      	cmp	r0, #0
10013388:	d401      	bmi.n	1001338e <__aeabi_cfcmpeq+0xe>
1001338a:	2100      	movs	r1, #0
1001338c:	42c8      	cmn	r0, r1
1001338e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

10013390 <__aeabi_fcmpeq>:
10013390:	b510      	push	{r4, lr}
10013392:	f000 fb1d 	bl	100139d0 <__eqsf2>
10013396:	4240      	negs	r0, r0
10013398:	3001      	adds	r0, #1
1001339a:	bd10      	pop	{r4, pc}

1001339c <__aeabi_fcmplt>:
1001339c:	b510      	push	{r4, lr}
1001339e:	f000 fb83 	bl	10013aa8 <__lesf2>
100133a2:	2800      	cmp	r0, #0
100133a4:	db01      	blt.n	100133aa <__aeabi_fcmplt+0xe>
100133a6:	2000      	movs	r0, #0
100133a8:	bd10      	pop	{r4, pc}
100133aa:	2001      	movs	r0, #1
100133ac:	bd10      	pop	{r4, pc}
100133ae:	46c0      	nop			; (mov r8, r8)

100133b0 <__aeabi_fcmple>:
100133b0:	b510      	push	{r4, lr}
100133b2:	f000 fb79 	bl	10013aa8 <__lesf2>
100133b6:	2800      	cmp	r0, #0
100133b8:	dd01      	ble.n	100133be <__aeabi_fcmple+0xe>
100133ba:	2000      	movs	r0, #0
100133bc:	bd10      	pop	{r4, pc}
100133be:	2001      	movs	r0, #1
100133c0:	bd10      	pop	{r4, pc}
100133c2:	46c0      	nop			; (mov r8, r8)

100133c4 <__aeabi_fcmpgt>:
100133c4:	b510      	push	{r4, lr}
100133c6:	f000 fb2b 	bl	10013a20 <__gesf2>
100133ca:	2800      	cmp	r0, #0
100133cc:	dc01      	bgt.n	100133d2 <__aeabi_fcmpgt+0xe>
100133ce:	2000      	movs	r0, #0
100133d0:	bd10      	pop	{r4, pc}
100133d2:	2001      	movs	r0, #1
100133d4:	bd10      	pop	{r4, pc}
100133d6:	46c0      	nop			; (mov r8, r8)

100133d8 <__aeabi_fcmpge>:
100133d8:	b510      	push	{r4, lr}
100133da:	f000 fb21 	bl	10013a20 <__gesf2>
100133de:	2800      	cmp	r0, #0
100133e0:	da01      	bge.n	100133e6 <__aeabi_fcmpge+0xe>
100133e2:	2000      	movs	r0, #0
100133e4:	bd10      	pop	{r4, pc}
100133e6:	2001      	movs	r0, #1
100133e8:	bd10      	pop	{r4, pc}
100133ea:	46c0      	nop			; (mov r8, r8)

100133ec <__aeabi_lmul>:
100133ec:	b5f0      	push	{r4, r5, r6, r7, lr}
100133ee:	464f      	mov	r7, r9
100133f0:	4646      	mov	r6, r8
100133f2:	b4c0      	push	{r6, r7}
100133f4:	0416      	lsls	r6, r2, #16
100133f6:	0c36      	lsrs	r6, r6, #16
100133f8:	4699      	mov	r9, r3
100133fa:	0033      	movs	r3, r6
100133fc:	0405      	lsls	r5, r0, #16
100133fe:	0c2c      	lsrs	r4, r5, #16
10013400:	0c07      	lsrs	r7, r0, #16
10013402:	0c15      	lsrs	r5, r2, #16
10013404:	4363      	muls	r3, r4
10013406:	437e      	muls	r6, r7
10013408:	436f      	muls	r7, r5
1001340a:	4365      	muls	r5, r4
1001340c:	0c1c      	lsrs	r4, r3, #16
1001340e:	19ad      	adds	r5, r5, r6
10013410:	1964      	adds	r4, r4, r5
10013412:	469c      	mov	ip, r3
10013414:	42a6      	cmp	r6, r4
10013416:	d903      	bls.n	10013420 <__aeabi_lmul+0x34>
10013418:	2380      	movs	r3, #128	; 0x80
1001341a:	025b      	lsls	r3, r3, #9
1001341c:	4698      	mov	r8, r3
1001341e:	4447      	add	r7, r8
10013420:	4663      	mov	r3, ip
10013422:	0c25      	lsrs	r5, r4, #16
10013424:	19ef      	adds	r7, r5, r7
10013426:	041d      	lsls	r5, r3, #16
10013428:	464b      	mov	r3, r9
1001342a:	434a      	muls	r2, r1
1001342c:	4343      	muls	r3, r0
1001342e:	0c2d      	lsrs	r5, r5, #16
10013430:	0424      	lsls	r4, r4, #16
10013432:	1964      	adds	r4, r4, r5
10013434:	1899      	adds	r1, r3, r2
10013436:	19c9      	adds	r1, r1, r7
10013438:	0020      	movs	r0, r4
1001343a:	bc0c      	pop	{r2, r3}
1001343c:	4690      	mov	r8, r2
1001343e:	4699      	mov	r9, r3
10013440:	bdf0      	pop	{r4, r5, r6, r7, pc}
10013442:	46c0      	nop			; (mov r8, r8)

10013444 <__aeabi_f2uiz>:
10013444:	219e      	movs	r1, #158	; 0x9e
10013446:	b510      	push	{r4, lr}
10013448:	05c9      	lsls	r1, r1, #23
1001344a:	1c04      	adds	r4, r0, #0
1001344c:	f7ff ffc4 	bl	100133d8 <__aeabi_fcmpge>
10013450:	2800      	cmp	r0, #0
10013452:	d103      	bne.n	1001345c <__aeabi_f2uiz+0x18>
10013454:	1c20      	adds	r0, r4, #0
10013456:	f000 fe05 	bl	10014064 <__aeabi_f2iz>
1001345a:	bd10      	pop	{r4, pc}
1001345c:	219e      	movs	r1, #158	; 0x9e
1001345e:	1c20      	adds	r0, r4, #0
10013460:	05c9      	lsls	r1, r1, #23
10013462:	f000 fc79 	bl	10013d58 <__aeabi_fsub>
10013466:	f000 fdfd 	bl	10014064 <__aeabi_f2iz>
1001346a:	2380      	movs	r3, #128	; 0x80
1001346c:	061b      	lsls	r3, r3, #24
1001346e:	469c      	mov	ip, r3
10013470:	4460      	add	r0, ip
10013472:	e7f2      	b.n	1001345a <__aeabi_f2uiz+0x16>

10013474 <__aeabi_d2uiz>:
10013474:	b570      	push	{r4, r5, r6, lr}
10013476:	2200      	movs	r2, #0
10013478:	4b0c      	ldr	r3, [pc, #48]	; (100134ac <__aeabi_d2uiz+0x38>)
1001347a:	0004      	movs	r4, r0
1001347c:	000d      	movs	r5, r1
1001347e:	f7ff ff71 	bl	10013364 <__aeabi_dcmpge>
10013482:	2800      	cmp	r0, #0
10013484:	d104      	bne.n	10013490 <__aeabi_d2uiz+0x1c>
10013486:	0020      	movs	r0, r4
10013488:	0029      	movs	r1, r5
1001348a:	f001 fd6f 	bl	10014f6c <__aeabi_d2iz>
1001348e:	bd70      	pop	{r4, r5, r6, pc}
10013490:	4b06      	ldr	r3, [pc, #24]	; (100134ac <__aeabi_d2uiz+0x38>)
10013492:	2200      	movs	r2, #0
10013494:	0020      	movs	r0, r4
10013496:	0029      	movs	r1, r5
10013498:	f001 fa14 	bl	100148c4 <__aeabi_dsub>
1001349c:	f001 fd66 	bl	10014f6c <__aeabi_d2iz>
100134a0:	2380      	movs	r3, #128	; 0x80
100134a2:	061b      	lsls	r3, r3, #24
100134a4:	469c      	mov	ip, r3
100134a6:	4460      	add	r0, ip
100134a8:	e7f1      	b.n	1001348e <__aeabi_d2uiz+0x1a>
100134aa:	46c0      	nop			; (mov r8, r8)
100134ac:	41e00000 	.word	0x41e00000

100134b0 <__aeabi_fadd>:
100134b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100134b2:	024a      	lsls	r2, r1, #9
100134b4:	0243      	lsls	r3, r0, #9
100134b6:	0044      	lsls	r4, r0, #1
100134b8:	004e      	lsls	r6, r1, #1
100134ba:	0fc5      	lsrs	r5, r0, #31
100134bc:	0e24      	lsrs	r4, r4, #24
100134be:	0028      	movs	r0, r5
100134c0:	099b      	lsrs	r3, r3, #6
100134c2:	0e36      	lsrs	r6, r6, #24
100134c4:	0fc9      	lsrs	r1, r1, #31
100134c6:	0992      	lsrs	r2, r2, #6
100134c8:	428d      	cmp	r5, r1
100134ca:	d059      	beq.n	10013580 <__aeabi_fadd+0xd0>
100134cc:	1ba0      	subs	r0, r4, r6
100134ce:	2800      	cmp	r0, #0
100134d0:	dc00      	bgt.n	100134d4 <__aeabi_fadd+0x24>
100134d2:	e08d      	b.n	100135f0 <__aeabi_fadd+0x140>
100134d4:	2e00      	cmp	r6, #0
100134d6:	d11a      	bne.n	1001350e <__aeabi_fadd+0x5e>
100134d8:	2a00      	cmp	r2, #0
100134da:	d000      	beq.n	100134de <__aeabi_fadd+0x2e>
100134dc:	e079      	b.n	100135d2 <__aeabi_fadd+0x122>
100134de:	075a      	lsls	r2, r3, #29
100134e0:	d004      	beq.n	100134ec <__aeabi_fadd+0x3c>
100134e2:	220f      	movs	r2, #15
100134e4:	401a      	ands	r2, r3
100134e6:	2a04      	cmp	r2, #4
100134e8:	d000      	beq.n	100134ec <__aeabi_fadd+0x3c>
100134ea:	3304      	adds	r3, #4
100134ec:	015a      	lsls	r2, r3, #5
100134ee:	d538      	bpl.n	10013562 <__aeabi_fadd+0xb2>
100134f0:	3401      	adds	r4, #1
100134f2:	2cff      	cmp	r4, #255	; 0xff
100134f4:	d100      	bne.n	100134f8 <__aeabi_fadd+0x48>
100134f6:	e089      	b.n	1001360c <__aeabi_fadd+0x15c>
100134f8:	0028      	movs	r0, r5
100134fa:	019b      	lsls	r3, r3, #6
100134fc:	0a5b      	lsrs	r3, r3, #9
100134fe:	b2e4      	uxtb	r4, r4
10013500:	025b      	lsls	r3, r3, #9
10013502:	05e4      	lsls	r4, r4, #23
10013504:	0a5b      	lsrs	r3, r3, #9
10013506:	4323      	orrs	r3, r4
10013508:	07c0      	lsls	r0, r0, #31
1001350a:	4318      	orrs	r0, r3
1001350c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1001350e:	2cff      	cmp	r4, #255	; 0xff
10013510:	d0e5      	beq.n	100134de <__aeabi_fadd+0x2e>
10013512:	2180      	movs	r1, #128	; 0x80
10013514:	04c9      	lsls	r1, r1, #19
10013516:	430a      	orrs	r2, r1
10013518:	281b      	cmp	r0, #27
1001351a:	dd00      	ble.n	1001351e <__aeabi_fadd+0x6e>
1001351c:	e089      	b.n	10013632 <__aeabi_fadd+0x182>
1001351e:	0016      	movs	r6, r2
10013520:	2120      	movs	r1, #32
10013522:	40c6      	lsrs	r6, r0
10013524:	1a08      	subs	r0, r1, r0
10013526:	4082      	lsls	r2, r0
10013528:	1e51      	subs	r1, r2, #1
1001352a:	418a      	sbcs	r2, r1
1001352c:	4332      	orrs	r2, r6
1001352e:	1a9b      	subs	r3, r3, r2
10013530:	015a      	lsls	r2, r3, #5
10013532:	d514      	bpl.n	1001355e <__aeabi_fadd+0xae>
10013534:	019b      	lsls	r3, r3, #6
10013536:	099e      	lsrs	r6, r3, #6
10013538:	0030      	movs	r0, r6
1001353a:	f001 fd85 	bl	10015048 <__clzsi2>
1001353e:	3805      	subs	r0, #5
10013540:	4086      	lsls	r6, r0
10013542:	4284      	cmp	r4, r0
10013544:	dc65      	bgt.n	10013612 <__aeabi_fadd+0x162>
10013546:	1b04      	subs	r4, r0, r4
10013548:	0033      	movs	r3, r6
1001354a:	2020      	movs	r0, #32
1001354c:	3401      	adds	r4, #1
1001354e:	40e3      	lsrs	r3, r4
10013550:	1b04      	subs	r4, r0, r4
10013552:	40a6      	lsls	r6, r4
10013554:	1e72      	subs	r2, r6, #1
10013556:	4196      	sbcs	r6, r2
10013558:	2400      	movs	r4, #0
1001355a:	4333      	orrs	r3, r6
1001355c:	e7bf      	b.n	100134de <__aeabi_fadd+0x2e>
1001355e:	075a      	lsls	r2, r3, #29
10013560:	d1bf      	bne.n	100134e2 <__aeabi_fadd+0x32>
10013562:	08df      	lsrs	r7, r3, #3
10013564:	0028      	movs	r0, r5
10013566:	2cff      	cmp	r4, #255	; 0xff
10013568:	d12f      	bne.n	100135ca <__aeabi_fadd+0x11a>
1001356a:	2f00      	cmp	r7, #0
1001356c:	d100      	bne.n	10013570 <__aeabi_fadd+0xc0>
1001356e:	e087      	b.n	10013680 <__aeabi_fadd+0x1d0>
10013570:	2280      	movs	r2, #128	; 0x80
10013572:	03d2      	lsls	r2, r2, #15
10013574:	0013      	movs	r3, r2
10013576:	433b      	orrs	r3, r7
10013578:	025b      	lsls	r3, r3, #9
1001357a:	0a5b      	lsrs	r3, r3, #9
1001357c:	24ff      	movs	r4, #255	; 0xff
1001357e:	e7bf      	b.n	10013500 <__aeabi_fadd+0x50>
10013580:	1ba1      	subs	r1, r4, r6
10013582:	2900      	cmp	r1, #0
10013584:	dd49      	ble.n	1001361a <__aeabi_fadd+0x16a>
10013586:	2e00      	cmp	r6, #0
10013588:	d029      	beq.n	100135de <__aeabi_fadd+0x12e>
1001358a:	2cff      	cmp	r4, #255	; 0xff
1001358c:	d0a7      	beq.n	100134de <__aeabi_fadd+0x2e>
1001358e:	2680      	movs	r6, #128	; 0x80
10013590:	04f6      	lsls	r6, r6, #19
10013592:	4332      	orrs	r2, r6
10013594:	291b      	cmp	r1, #27
10013596:	dd00      	ble.n	1001359a <__aeabi_fadd+0xea>
10013598:	e08d      	b.n	100136b6 <__aeabi_fadd+0x206>
1001359a:	0017      	movs	r7, r2
1001359c:	2620      	movs	r6, #32
1001359e:	40cf      	lsrs	r7, r1
100135a0:	1a71      	subs	r1, r6, r1
100135a2:	408a      	lsls	r2, r1
100135a4:	1e51      	subs	r1, r2, #1
100135a6:	418a      	sbcs	r2, r1
100135a8:	433a      	orrs	r2, r7
100135aa:	189b      	adds	r3, r3, r2
100135ac:	015a      	lsls	r2, r3, #5
100135ae:	d5d6      	bpl.n	1001355e <__aeabi_fadd+0xae>
100135b0:	3401      	adds	r4, #1
100135b2:	2cff      	cmp	r4, #255	; 0xff
100135b4:	d064      	beq.n	10013680 <__aeabi_fadd+0x1d0>
100135b6:	2201      	movs	r2, #1
100135b8:	4976      	ldr	r1, [pc, #472]	; (10013794 <__aeabi_fadd+0x2e4>)
100135ba:	401a      	ands	r2, r3
100135bc:	085b      	lsrs	r3, r3, #1
100135be:	400b      	ands	r3, r1
100135c0:	4313      	orrs	r3, r2
100135c2:	e78c      	b.n	100134de <__aeabi_fadd+0x2e>
100135c4:	1e03      	subs	r3, r0, #0
100135c6:	d1ca      	bne.n	1001355e <__aeabi_fadd+0xae>
100135c8:	2000      	movs	r0, #0
100135ca:	027b      	lsls	r3, r7, #9
100135cc:	0a5b      	lsrs	r3, r3, #9
100135ce:	b2e4      	uxtb	r4, r4
100135d0:	e796      	b.n	10013500 <__aeabi_fadd+0x50>
100135d2:	3801      	subs	r0, #1
100135d4:	2800      	cmp	r0, #0
100135d6:	d0aa      	beq.n	1001352e <__aeabi_fadd+0x7e>
100135d8:	2cff      	cmp	r4, #255	; 0xff
100135da:	d19d      	bne.n	10013518 <__aeabi_fadd+0x68>
100135dc:	e77f      	b.n	100134de <__aeabi_fadd+0x2e>
100135de:	2a00      	cmp	r2, #0
100135e0:	d100      	bne.n	100135e4 <__aeabi_fadd+0x134>
100135e2:	e77c      	b.n	100134de <__aeabi_fadd+0x2e>
100135e4:	3901      	subs	r1, #1
100135e6:	2900      	cmp	r1, #0
100135e8:	d0df      	beq.n	100135aa <__aeabi_fadd+0xfa>
100135ea:	2cff      	cmp	r4, #255	; 0xff
100135ec:	d1d2      	bne.n	10013594 <__aeabi_fadd+0xe4>
100135ee:	e776      	b.n	100134de <__aeabi_fadd+0x2e>
100135f0:	2800      	cmp	r0, #0
100135f2:	d120      	bne.n	10013636 <__aeabi_fadd+0x186>
100135f4:	1c60      	adds	r0, r4, #1
100135f6:	b2c0      	uxtb	r0, r0
100135f8:	2801      	cmp	r0, #1
100135fa:	dd53      	ble.n	100136a4 <__aeabi_fadd+0x1f4>
100135fc:	2780      	movs	r7, #128	; 0x80
100135fe:	1a9e      	subs	r6, r3, r2
10013600:	04ff      	lsls	r7, r7, #19
10013602:	4037      	ands	r7, r6
10013604:	d02f      	beq.n	10013666 <__aeabi_fadd+0x1b6>
10013606:	1ad6      	subs	r6, r2, r3
10013608:	000d      	movs	r5, r1
1001360a:	e795      	b.n	10013538 <__aeabi_fadd+0x88>
1001360c:	0028      	movs	r0, r5
1001360e:	2300      	movs	r3, #0
10013610:	e776      	b.n	10013500 <__aeabi_fadd+0x50>
10013612:	4b61      	ldr	r3, [pc, #388]	; (10013798 <__aeabi_fadd+0x2e8>)
10013614:	1a24      	subs	r4, r4, r0
10013616:	4033      	ands	r3, r6
10013618:	e761      	b.n	100134de <__aeabi_fadd+0x2e>
1001361a:	2900      	cmp	r1, #0
1001361c:	d14d      	bne.n	100136ba <__aeabi_fadd+0x20a>
1001361e:	1c61      	adds	r1, r4, #1
10013620:	b2ce      	uxtb	r6, r1
10013622:	2e01      	cmp	r6, #1
10013624:	dd2f      	ble.n	10013686 <__aeabi_fadd+0x1d6>
10013626:	29ff      	cmp	r1, #255	; 0xff
10013628:	d02a      	beq.n	10013680 <__aeabi_fadd+0x1d0>
1001362a:	189b      	adds	r3, r3, r2
1001362c:	085b      	lsrs	r3, r3, #1
1001362e:	000c      	movs	r4, r1
10013630:	e755      	b.n	100134de <__aeabi_fadd+0x2e>
10013632:	2201      	movs	r2, #1
10013634:	e77b      	b.n	1001352e <__aeabi_fadd+0x7e>
10013636:	2c00      	cmp	r4, #0
10013638:	d11b      	bne.n	10013672 <__aeabi_fadd+0x1c2>
1001363a:	2b00      	cmp	r3, #0
1001363c:	d05b      	beq.n	100136f6 <__aeabi_fadd+0x246>
1001363e:	43c0      	mvns	r0, r0
10013640:	2800      	cmp	r0, #0
10013642:	d00c      	beq.n	1001365e <__aeabi_fadd+0x1ae>
10013644:	2eff      	cmp	r6, #255	; 0xff
10013646:	d07e      	beq.n	10013746 <__aeabi_fadd+0x296>
10013648:	281b      	cmp	r0, #27
1001364a:	dd00      	ble.n	1001364e <__aeabi_fadd+0x19e>
1001364c:	e092      	b.n	10013774 <__aeabi_fadd+0x2c4>
1001364e:	001d      	movs	r5, r3
10013650:	2420      	movs	r4, #32
10013652:	40c5      	lsrs	r5, r0
10013654:	1a20      	subs	r0, r4, r0
10013656:	4083      	lsls	r3, r0
10013658:	1e58      	subs	r0, r3, #1
1001365a:	4183      	sbcs	r3, r0
1001365c:	432b      	orrs	r3, r5
1001365e:	1ad3      	subs	r3, r2, r3
10013660:	0034      	movs	r4, r6
10013662:	000d      	movs	r5, r1
10013664:	e764      	b.n	10013530 <__aeabi_fadd+0x80>
10013666:	2e00      	cmp	r6, #0
10013668:	d000      	beq.n	1001366c <__aeabi_fadd+0x1bc>
1001366a:	e765      	b.n	10013538 <__aeabi_fadd+0x88>
1001366c:	2000      	movs	r0, #0
1001366e:	2400      	movs	r4, #0
10013670:	e7ab      	b.n	100135ca <__aeabi_fadd+0x11a>
10013672:	2eff      	cmp	r6, #255	; 0xff
10013674:	d067      	beq.n	10013746 <__aeabi_fadd+0x296>
10013676:	2480      	movs	r4, #128	; 0x80
10013678:	04e4      	lsls	r4, r4, #19
1001367a:	4240      	negs	r0, r0
1001367c:	4323      	orrs	r3, r4
1001367e:	e7e3      	b.n	10013648 <__aeabi_fadd+0x198>
10013680:	24ff      	movs	r4, #255	; 0xff
10013682:	2300      	movs	r3, #0
10013684:	e73c      	b.n	10013500 <__aeabi_fadd+0x50>
10013686:	2c00      	cmp	r4, #0
10013688:	d161      	bne.n	1001374e <__aeabi_fadd+0x29e>
1001368a:	2b00      	cmp	r3, #0
1001368c:	d07e      	beq.n	1001378c <__aeabi_fadd+0x2dc>
1001368e:	2a00      	cmp	r2, #0
10013690:	d100      	bne.n	10013694 <__aeabi_fadd+0x1e4>
10013692:	e724      	b.n	100134de <__aeabi_fadd+0x2e>
10013694:	189b      	adds	r3, r3, r2
10013696:	015a      	lsls	r2, r3, #5
10013698:	d400      	bmi.n	1001369c <__aeabi_fadd+0x1ec>
1001369a:	e760      	b.n	1001355e <__aeabi_fadd+0xae>
1001369c:	4a3e      	ldr	r2, [pc, #248]	; (10013798 <__aeabi_fadd+0x2e8>)
1001369e:	000c      	movs	r4, r1
100136a0:	4013      	ands	r3, r2
100136a2:	e71c      	b.n	100134de <__aeabi_fadd+0x2e>
100136a4:	2c00      	cmp	r4, #0
100136a6:	d11e      	bne.n	100136e6 <__aeabi_fadd+0x236>
100136a8:	2b00      	cmp	r3, #0
100136aa:	d12f      	bne.n	1001370c <__aeabi_fadd+0x25c>
100136ac:	2a00      	cmp	r2, #0
100136ae:	d066      	beq.n	1001377e <__aeabi_fadd+0x2ce>
100136b0:	0013      	movs	r3, r2
100136b2:	000d      	movs	r5, r1
100136b4:	e713      	b.n	100134de <__aeabi_fadd+0x2e>
100136b6:	2201      	movs	r2, #1
100136b8:	e777      	b.n	100135aa <__aeabi_fadd+0xfa>
100136ba:	2c00      	cmp	r4, #0
100136bc:	d11f      	bne.n	100136fe <__aeabi_fadd+0x24e>
100136be:	2b00      	cmp	r3, #0
100136c0:	d05a      	beq.n	10013778 <__aeabi_fadd+0x2c8>
100136c2:	43c9      	mvns	r1, r1
100136c4:	2900      	cmp	r1, #0
100136c6:	d00b      	beq.n	100136e0 <__aeabi_fadd+0x230>
100136c8:	2eff      	cmp	r6, #255	; 0xff
100136ca:	d050      	beq.n	1001376e <__aeabi_fadd+0x2be>
100136cc:	291b      	cmp	r1, #27
100136ce:	dc5f      	bgt.n	10013790 <__aeabi_fadd+0x2e0>
100136d0:	001f      	movs	r7, r3
100136d2:	2420      	movs	r4, #32
100136d4:	40cf      	lsrs	r7, r1
100136d6:	1a61      	subs	r1, r4, r1
100136d8:	408b      	lsls	r3, r1
100136da:	1e59      	subs	r1, r3, #1
100136dc:	418b      	sbcs	r3, r1
100136de:	433b      	orrs	r3, r7
100136e0:	189b      	adds	r3, r3, r2
100136e2:	0034      	movs	r4, r6
100136e4:	e762      	b.n	100135ac <__aeabi_fadd+0xfc>
100136e6:	2b00      	cmp	r3, #0
100136e8:	d11c      	bne.n	10013724 <__aeabi_fadd+0x274>
100136ea:	2a00      	cmp	r2, #0
100136ec:	d04a      	beq.n	10013784 <__aeabi_fadd+0x2d4>
100136ee:	0013      	movs	r3, r2
100136f0:	000d      	movs	r5, r1
100136f2:	24ff      	movs	r4, #255	; 0xff
100136f4:	e6f3      	b.n	100134de <__aeabi_fadd+0x2e>
100136f6:	0013      	movs	r3, r2
100136f8:	0034      	movs	r4, r6
100136fa:	000d      	movs	r5, r1
100136fc:	e6ef      	b.n	100134de <__aeabi_fadd+0x2e>
100136fe:	2eff      	cmp	r6, #255	; 0xff
10013700:	d035      	beq.n	1001376e <__aeabi_fadd+0x2be>
10013702:	2480      	movs	r4, #128	; 0x80
10013704:	04e4      	lsls	r4, r4, #19
10013706:	4249      	negs	r1, r1
10013708:	4323      	orrs	r3, r4
1001370a:	e7df      	b.n	100136cc <__aeabi_fadd+0x21c>
1001370c:	2a00      	cmp	r2, #0
1001370e:	d100      	bne.n	10013712 <__aeabi_fadd+0x262>
10013710:	e6e5      	b.n	100134de <__aeabi_fadd+0x2e>
10013712:	2780      	movs	r7, #128	; 0x80
10013714:	1a98      	subs	r0, r3, r2
10013716:	04ff      	lsls	r7, r7, #19
10013718:	4007      	ands	r7, r0
1001371a:	d100      	bne.n	1001371e <__aeabi_fadd+0x26e>
1001371c:	e752      	b.n	100135c4 <__aeabi_fadd+0x114>
1001371e:	1ad3      	subs	r3, r2, r3
10013720:	000d      	movs	r5, r1
10013722:	e6dc      	b.n	100134de <__aeabi_fadd+0x2e>
10013724:	24ff      	movs	r4, #255	; 0xff
10013726:	2a00      	cmp	r2, #0
10013728:	d100      	bne.n	1001372c <__aeabi_fadd+0x27c>
1001372a:	e6d8      	b.n	100134de <__aeabi_fadd+0x2e>
1001372c:	2080      	movs	r0, #128	; 0x80
1001372e:	08db      	lsrs	r3, r3, #3
10013730:	03c0      	lsls	r0, r0, #15
10013732:	4203      	tst	r3, r0
10013734:	d004      	beq.n	10013740 <__aeabi_fadd+0x290>
10013736:	08d2      	lsrs	r2, r2, #3
10013738:	4202      	tst	r2, r0
1001373a:	d101      	bne.n	10013740 <__aeabi_fadd+0x290>
1001373c:	0013      	movs	r3, r2
1001373e:	000d      	movs	r5, r1
10013740:	00db      	lsls	r3, r3, #3
10013742:	24ff      	movs	r4, #255	; 0xff
10013744:	e6cb      	b.n	100134de <__aeabi_fadd+0x2e>
10013746:	0013      	movs	r3, r2
10013748:	24ff      	movs	r4, #255	; 0xff
1001374a:	000d      	movs	r5, r1
1001374c:	e6c7      	b.n	100134de <__aeabi_fadd+0x2e>
1001374e:	2b00      	cmp	r3, #0
10013750:	d00d      	beq.n	1001376e <__aeabi_fadd+0x2be>
10013752:	24ff      	movs	r4, #255	; 0xff
10013754:	2a00      	cmp	r2, #0
10013756:	d100      	bne.n	1001375a <__aeabi_fadd+0x2aa>
10013758:	e6c1      	b.n	100134de <__aeabi_fadd+0x2e>
1001375a:	2180      	movs	r1, #128	; 0x80
1001375c:	08db      	lsrs	r3, r3, #3
1001375e:	03c9      	lsls	r1, r1, #15
10013760:	420b      	tst	r3, r1
10013762:	d0ed      	beq.n	10013740 <__aeabi_fadd+0x290>
10013764:	08d2      	lsrs	r2, r2, #3
10013766:	420a      	tst	r2, r1
10013768:	d1ea      	bne.n	10013740 <__aeabi_fadd+0x290>
1001376a:	0013      	movs	r3, r2
1001376c:	e7e8      	b.n	10013740 <__aeabi_fadd+0x290>
1001376e:	0013      	movs	r3, r2
10013770:	24ff      	movs	r4, #255	; 0xff
10013772:	e6b4      	b.n	100134de <__aeabi_fadd+0x2e>
10013774:	2301      	movs	r3, #1
10013776:	e772      	b.n	1001365e <__aeabi_fadd+0x1ae>
10013778:	0013      	movs	r3, r2
1001377a:	0034      	movs	r4, r6
1001377c:	e6af      	b.n	100134de <__aeabi_fadd+0x2e>
1001377e:	2700      	movs	r7, #0
10013780:	2000      	movs	r0, #0
10013782:	e722      	b.n	100135ca <__aeabi_fadd+0x11a>
10013784:	2780      	movs	r7, #128	; 0x80
10013786:	2000      	movs	r0, #0
10013788:	03ff      	lsls	r7, r7, #15
1001378a:	e6f1      	b.n	10013570 <__aeabi_fadd+0xc0>
1001378c:	0013      	movs	r3, r2
1001378e:	e6a6      	b.n	100134de <__aeabi_fadd+0x2e>
10013790:	2301      	movs	r3, #1
10013792:	e7a5      	b.n	100136e0 <__aeabi_fadd+0x230>
10013794:	7dffffff 	.word	0x7dffffff
10013798:	fbffffff 	.word	0xfbffffff

1001379c <__aeabi_fdiv>:
1001379c:	b5f0      	push	{r4, r5, r6, r7, lr}
1001379e:	4656      	mov	r6, sl
100137a0:	4644      	mov	r4, r8
100137a2:	465f      	mov	r7, fp
100137a4:	464d      	mov	r5, r9
100137a6:	b4f0      	push	{r4, r5, r6, r7}
100137a8:	0244      	lsls	r4, r0, #9
100137aa:	0046      	lsls	r6, r0, #1
100137ac:	0fc7      	lsrs	r7, r0, #31
100137ae:	b083      	sub	sp, #12
100137b0:	4688      	mov	r8, r1
100137b2:	0a65      	lsrs	r5, r4, #9
100137b4:	0e36      	lsrs	r6, r6, #24
100137b6:	46ba      	mov	sl, r7
100137b8:	d03d      	beq.n	10013836 <__aeabi_fdiv+0x9a>
100137ba:	2eff      	cmp	r6, #255	; 0xff
100137bc:	d022      	beq.n	10013804 <__aeabi_fdiv+0x68>
100137be:	2300      	movs	r3, #0
100137c0:	00ec      	lsls	r4, r5, #3
100137c2:	2580      	movs	r5, #128	; 0x80
100137c4:	4699      	mov	r9, r3
100137c6:	469b      	mov	fp, r3
100137c8:	04ed      	lsls	r5, r5, #19
100137ca:	4325      	orrs	r5, r4
100137cc:	3e7f      	subs	r6, #127	; 0x7f
100137ce:	4643      	mov	r3, r8
100137d0:	025c      	lsls	r4, r3, #9
100137d2:	0058      	lsls	r0, r3, #1
100137d4:	0fdb      	lsrs	r3, r3, #31
100137d6:	0a64      	lsrs	r4, r4, #9
100137d8:	0e00      	lsrs	r0, r0, #24
100137da:	4698      	mov	r8, r3
100137dc:	d036      	beq.n	1001384c <__aeabi_fdiv+0xb0>
100137de:	28ff      	cmp	r0, #255	; 0xff
100137e0:	d030      	beq.n	10013844 <__aeabi_fdiv+0xa8>
100137e2:	2380      	movs	r3, #128	; 0x80
100137e4:	2100      	movs	r1, #0
100137e6:	00e4      	lsls	r4, r4, #3
100137e8:	04db      	lsls	r3, r3, #19
100137ea:	431c      	orrs	r4, r3
100137ec:	387f      	subs	r0, #127	; 0x7f
100137ee:	1a30      	subs	r0, r6, r0
100137f0:	9001      	str	r0, [sp, #4]
100137f2:	4648      	mov	r0, r9
100137f4:	4642      	mov	r2, r8
100137f6:	4308      	orrs	r0, r1
100137f8:	4e72      	ldr	r6, [pc, #456]	; (100139c4 <__aeabi_fdiv+0x228>)
100137fa:	0080      	lsls	r0, r0, #2
100137fc:	5830      	ldr	r0, [r6, r0]
100137fe:	407a      	eors	r2, r7
10013800:	0013      	movs	r3, r2
10013802:	4687      	mov	pc, r0
10013804:	2d00      	cmp	r5, #0
10013806:	d144      	bne.n	10013892 <__aeabi_fdiv+0xf6>
10013808:	2308      	movs	r3, #8
1001380a:	4699      	mov	r9, r3
1001380c:	3b06      	subs	r3, #6
1001380e:	469b      	mov	fp, r3
10013810:	e7dd      	b.n	100137ce <__aeabi_fdiv+0x32>
10013812:	2201      	movs	r2, #1
10013814:	20ff      	movs	r0, #255	; 0xff
10013816:	2400      	movs	r4, #0
10013818:	401a      	ands	r2, r3
1001381a:	0264      	lsls	r4, r4, #9
1001381c:	05c3      	lsls	r3, r0, #23
1001381e:	0a64      	lsrs	r4, r4, #9
10013820:	07d2      	lsls	r2, r2, #31
10013822:	431c      	orrs	r4, r3
10013824:	4314      	orrs	r4, r2
10013826:	0020      	movs	r0, r4
10013828:	b003      	add	sp, #12
1001382a:	bc3c      	pop	{r2, r3, r4, r5}
1001382c:	4690      	mov	r8, r2
1001382e:	4699      	mov	r9, r3
10013830:	46a2      	mov	sl, r4
10013832:	46ab      	mov	fp, r5
10013834:	bdf0      	pop	{r4, r5, r6, r7, pc}
10013836:	2d00      	cmp	r5, #0
10013838:	d120      	bne.n	1001387c <__aeabi_fdiv+0xe0>
1001383a:	2304      	movs	r3, #4
1001383c:	4699      	mov	r9, r3
1001383e:	3b03      	subs	r3, #3
10013840:	469b      	mov	fp, r3
10013842:	e7c4      	b.n	100137ce <__aeabi_fdiv+0x32>
10013844:	2c00      	cmp	r4, #0
10013846:	d117      	bne.n	10013878 <__aeabi_fdiv+0xdc>
10013848:	2102      	movs	r1, #2
1001384a:	e002      	b.n	10013852 <__aeabi_fdiv+0xb6>
1001384c:	2c00      	cmp	r4, #0
1001384e:	d10a      	bne.n	10013866 <__aeabi_fdiv+0xca>
10013850:	2101      	movs	r1, #1
10013852:	1a32      	subs	r2, r6, r0
10013854:	9201      	str	r2, [sp, #4]
10013856:	464a      	mov	r2, r9
10013858:	4643      	mov	r3, r8
1001385a:	430a      	orrs	r2, r1
1001385c:	485a      	ldr	r0, [pc, #360]	; (100139c8 <__aeabi_fdiv+0x22c>)
1001385e:	0092      	lsls	r2, r2, #2
10013860:	5882      	ldr	r2, [r0, r2]
10013862:	407b      	eors	r3, r7
10013864:	4697      	mov	pc, r2
10013866:	0020      	movs	r0, r4
10013868:	f001 fbee 	bl	10015048 <__clzsi2>
1001386c:	1f43      	subs	r3, r0, #5
1001386e:	3076      	adds	r0, #118	; 0x76
10013870:	409c      	lsls	r4, r3
10013872:	4240      	negs	r0, r0
10013874:	2100      	movs	r1, #0
10013876:	e7ba      	b.n	100137ee <__aeabi_fdiv+0x52>
10013878:	2103      	movs	r1, #3
1001387a:	e7b8      	b.n	100137ee <__aeabi_fdiv+0x52>
1001387c:	0028      	movs	r0, r5
1001387e:	f001 fbe3 	bl	10015048 <__clzsi2>
10013882:	1f43      	subs	r3, r0, #5
10013884:	409d      	lsls	r5, r3
10013886:	2300      	movs	r3, #0
10013888:	3076      	adds	r0, #118	; 0x76
1001388a:	4246      	negs	r6, r0
1001388c:	4699      	mov	r9, r3
1001388e:	469b      	mov	fp, r3
10013890:	e79d      	b.n	100137ce <__aeabi_fdiv+0x32>
10013892:	230c      	movs	r3, #12
10013894:	4699      	mov	r9, r3
10013896:	3b09      	subs	r3, #9
10013898:	469b      	mov	fp, r3
1001389a:	e798      	b.n	100137ce <__aeabi_fdiv+0x32>
1001389c:	2480      	movs	r4, #128	; 0x80
1001389e:	2200      	movs	r2, #0
100138a0:	03e4      	lsls	r4, r4, #15
100138a2:	20ff      	movs	r0, #255	; 0xff
100138a4:	e7b9      	b.n	1001381a <__aeabi_fdiv+0x7e>
100138a6:	2400      	movs	r4, #0
100138a8:	46c2      	mov	sl, r8
100138aa:	468b      	mov	fp, r1
100138ac:	465a      	mov	r2, fp
100138ae:	4653      	mov	r3, sl
100138b0:	2a02      	cmp	r2, #2
100138b2:	d0ae      	beq.n	10013812 <__aeabi_fdiv+0x76>
100138b4:	2a03      	cmp	r2, #3
100138b6:	d07d      	beq.n	100139b4 <__aeabi_fdiv+0x218>
100138b8:	2a01      	cmp	r2, #1
100138ba:	d131      	bne.n	10013920 <__aeabi_fdiv+0x184>
100138bc:	2201      	movs	r2, #1
100138be:	2000      	movs	r0, #0
100138c0:	401a      	ands	r2, r3
100138c2:	2400      	movs	r4, #0
100138c4:	e7a9      	b.n	1001381a <__aeabi_fdiv+0x7e>
100138c6:	2201      	movs	r2, #1
100138c8:	1a10      	subs	r0, r2, r0
100138ca:	281b      	cmp	r0, #27
100138cc:	dd56      	ble.n	1001397c <__aeabi_fdiv+0x1e0>
100138ce:	401a      	ands	r2, r3
100138d0:	2000      	movs	r0, #0
100138d2:	2400      	movs	r4, #0
100138d4:	e7a1      	b.n	1001381a <__aeabi_fdiv+0x7e>
100138d6:	2380      	movs	r3, #128	; 0x80
100138d8:	03db      	lsls	r3, r3, #15
100138da:	421d      	tst	r5, r3
100138dc:	d14b      	bne.n	10013976 <__aeabi_fdiv+0x1da>
100138de:	2380      	movs	r3, #128	; 0x80
100138e0:	03db      	lsls	r3, r3, #15
100138e2:	432b      	orrs	r3, r5
100138e4:	025c      	lsls	r4, r3, #9
100138e6:	0a64      	lsrs	r4, r4, #9
100138e8:	003a      	movs	r2, r7
100138ea:	20ff      	movs	r0, #255	; 0xff
100138ec:	e795      	b.n	1001381a <__aeabi_fdiv+0x7e>
100138ee:	016d      	lsls	r5, r5, #5
100138f0:	0160      	lsls	r0, r4, #5
100138f2:	4285      	cmp	r5, r0
100138f4:	d230      	bcs.n	10013958 <__aeabi_fdiv+0x1bc>
100138f6:	9a01      	ldr	r2, [sp, #4]
100138f8:	2400      	movs	r4, #0
100138fa:	3a01      	subs	r2, #1
100138fc:	9201      	str	r2, [sp, #4]
100138fe:	221b      	movs	r2, #27
10013900:	2701      	movs	r7, #1
10013902:	0029      	movs	r1, r5
10013904:	0064      	lsls	r4, r4, #1
10013906:	006d      	lsls	r5, r5, #1
10013908:	2900      	cmp	r1, #0
1001390a:	db01      	blt.n	10013910 <__aeabi_fdiv+0x174>
1001390c:	42a8      	cmp	r0, r5
1001390e:	d801      	bhi.n	10013914 <__aeabi_fdiv+0x178>
10013910:	1a2d      	subs	r5, r5, r0
10013912:	433c      	orrs	r4, r7
10013914:	3a01      	subs	r2, #1
10013916:	2a00      	cmp	r2, #0
10013918:	d1f3      	bne.n	10013902 <__aeabi_fdiv+0x166>
1001391a:	1e6a      	subs	r2, r5, #1
1001391c:	4195      	sbcs	r5, r2
1001391e:	432c      	orrs	r4, r5
10013920:	9801      	ldr	r0, [sp, #4]
10013922:	307f      	adds	r0, #127	; 0x7f
10013924:	2800      	cmp	r0, #0
10013926:	ddce      	ble.n	100138c6 <__aeabi_fdiv+0x12a>
10013928:	0762      	lsls	r2, r4, #29
1001392a:	d004      	beq.n	10013936 <__aeabi_fdiv+0x19a>
1001392c:	220f      	movs	r2, #15
1001392e:	4022      	ands	r2, r4
10013930:	2a04      	cmp	r2, #4
10013932:	d000      	beq.n	10013936 <__aeabi_fdiv+0x19a>
10013934:	3404      	adds	r4, #4
10013936:	0122      	lsls	r2, r4, #4
10013938:	d503      	bpl.n	10013942 <__aeabi_fdiv+0x1a6>
1001393a:	4a24      	ldr	r2, [pc, #144]	; (100139cc <__aeabi_fdiv+0x230>)
1001393c:	9801      	ldr	r0, [sp, #4]
1001393e:	4014      	ands	r4, r2
10013940:	3080      	adds	r0, #128	; 0x80
10013942:	28fe      	cmp	r0, #254	; 0xfe
10013944:	dd00      	ble.n	10013948 <__aeabi_fdiv+0x1ac>
10013946:	e764      	b.n	10013812 <__aeabi_fdiv+0x76>
10013948:	2201      	movs	r2, #1
1001394a:	01a4      	lsls	r4, r4, #6
1001394c:	0a64      	lsrs	r4, r4, #9
1001394e:	b2c0      	uxtb	r0, r0
10013950:	401a      	ands	r2, r3
10013952:	e762      	b.n	1001381a <__aeabi_fdiv+0x7e>
10013954:	002c      	movs	r4, r5
10013956:	e7a9      	b.n	100138ac <__aeabi_fdiv+0x110>
10013958:	1a2d      	subs	r5, r5, r0
1001395a:	221a      	movs	r2, #26
1001395c:	2401      	movs	r4, #1
1001395e:	e7cf      	b.n	10013900 <__aeabi_fdiv+0x164>
10013960:	026b      	lsls	r3, r5, #9
10013962:	d5bc      	bpl.n	100138de <__aeabi_fdiv+0x142>
10013964:	2400      	movs	r4, #0
10013966:	2380      	movs	r3, #128	; 0x80
10013968:	03db      	lsls	r3, r3, #15
1001396a:	431c      	orrs	r4, r3
1001396c:	0264      	lsls	r4, r4, #9
1001396e:	0a64      	lsrs	r4, r4, #9
10013970:	4642      	mov	r2, r8
10013972:	20ff      	movs	r0, #255	; 0xff
10013974:	e751      	b.n	1001381a <__aeabi_fdiv+0x7e>
10013976:	421c      	tst	r4, r3
10013978:	d1b3      	bne.n	100138e2 <__aeabi_fdiv+0x146>
1001397a:	e7f4      	b.n	10013966 <__aeabi_fdiv+0x1ca>
1001397c:	0021      	movs	r1, r4
1001397e:	2220      	movs	r2, #32
10013980:	40c1      	lsrs	r1, r0
10013982:	1a10      	subs	r0, r2, r0
10013984:	4084      	lsls	r4, r0
10013986:	1e62      	subs	r2, r4, #1
10013988:	4194      	sbcs	r4, r2
1001398a:	430c      	orrs	r4, r1
1001398c:	0762      	lsls	r2, r4, #29
1001398e:	d004      	beq.n	1001399a <__aeabi_fdiv+0x1fe>
10013990:	220f      	movs	r2, #15
10013992:	4022      	ands	r2, r4
10013994:	2a04      	cmp	r2, #4
10013996:	d000      	beq.n	1001399a <__aeabi_fdiv+0x1fe>
10013998:	3404      	adds	r4, #4
1001399a:	0162      	lsls	r2, r4, #5
1001399c:	d504      	bpl.n	100139a8 <__aeabi_fdiv+0x20c>
1001399e:	2201      	movs	r2, #1
100139a0:	2001      	movs	r0, #1
100139a2:	401a      	ands	r2, r3
100139a4:	2400      	movs	r4, #0
100139a6:	e738      	b.n	1001381a <__aeabi_fdiv+0x7e>
100139a8:	2201      	movs	r2, #1
100139aa:	01a4      	lsls	r4, r4, #6
100139ac:	0a64      	lsrs	r4, r4, #9
100139ae:	401a      	ands	r2, r3
100139b0:	2000      	movs	r0, #0
100139b2:	e732      	b.n	1001381a <__aeabi_fdiv+0x7e>
100139b4:	2380      	movs	r3, #128	; 0x80
100139b6:	03db      	lsls	r3, r3, #15
100139b8:	431c      	orrs	r4, r3
100139ba:	0264      	lsls	r4, r4, #9
100139bc:	0a64      	lsrs	r4, r4, #9
100139be:	4652      	mov	r2, sl
100139c0:	20ff      	movs	r0, #255	; 0xff
100139c2:	e72a      	b.n	1001381a <__aeabi_fdiv+0x7e>
100139c4:	10018188 	.word	0x10018188
100139c8:	100181c8 	.word	0x100181c8
100139cc:	f7ffffff 	.word	0xf7ffffff

100139d0 <__eqsf2>:
100139d0:	0243      	lsls	r3, r0, #9
100139d2:	b570      	push	{r4, r5, r6, lr}
100139d4:	0042      	lsls	r2, r0, #1
100139d6:	004c      	lsls	r4, r1, #1
100139d8:	0a5d      	lsrs	r5, r3, #9
100139da:	0fc3      	lsrs	r3, r0, #31
100139dc:	0248      	lsls	r0, r1, #9
100139de:	0e12      	lsrs	r2, r2, #24
100139e0:	0a46      	lsrs	r6, r0, #9
100139e2:	0e24      	lsrs	r4, r4, #24
100139e4:	0fc9      	lsrs	r1, r1, #31
100139e6:	2aff      	cmp	r2, #255	; 0xff
100139e8:	d00f      	beq.n	10013a0a <__eqsf2+0x3a>
100139ea:	2cff      	cmp	r4, #255	; 0xff
100139ec:	d011      	beq.n	10013a12 <__eqsf2+0x42>
100139ee:	2001      	movs	r0, #1
100139f0:	42a2      	cmp	r2, r4
100139f2:	d000      	beq.n	100139f6 <__eqsf2+0x26>
100139f4:	bd70      	pop	{r4, r5, r6, pc}
100139f6:	42b5      	cmp	r5, r6
100139f8:	d1fc      	bne.n	100139f4 <__eqsf2+0x24>
100139fa:	428b      	cmp	r3, r1
100139fc:	d00d      	beq.n	10013a1a <__eqsf2+0x4a>
100139fe:	2a00      	cmp	r2, #0
10013a00:	d1f8      	bne.n	100139f4 <__eqsf2+0x24>
10013a02:	0028      	movs	r0, r5
10013a04:	1e43      	subs	r3, r0, #1
10013a06:	4198      	sbcs	r0, r3
10013a08:	e7f4      	b.n	100139f4 <__eqsf2+0x24>
10013a0a:	2001      	movs	r0, #1
10013a0c:	2d00      	cmp	r5, #0
10013a0e:	d1f1      	bne.n	100139f4 <__eqsf2+0x24>
10013a10:	e7eb      	b.n	100139ea <__eqsf2+0x1a>
10013a12:	2001      	movs	r0, #1
10013a14:	2e00      	cmp	r6, #0
10013a16:	d1ed      	bne.n	100139f4 <__eqsf2+0x24>
10013a18:	e7e9      	b.n	100139ee <__eqsf2+0x1e>
10013a1a:	2000      	movs	r0, #0
10013a1c:	e7ea      	b.n	100139f4 <__eqsf2+0x24>
10013a1e:	46c0      	nop			; (mov r8, r8)

10013a20 <__gesf2>:
10013a20:	0243      	lsls	r3, r0, #9
10013a22:	b5f0      	push	{r4, r5, r6, r7, lr}
10013a24:	0042      	lsls	r2, r0, #1
10013a26:	0a5d      	lsrs	r5, r3, #9
10013a28:	0fc3      	lsrs	r3, r0, #31
10013a2a:	0248      	lsls	r0, r1, #9
10013a2c:	0a44      	lsrs	r4, r0, #9
10013a2e:	0048      	lsls	r0, r1, #1
10013a30:	0e12      	lsrs	r2, r2, #24
10013a32:	0e00      	lsrs	r0, r0, #24
10013a34:	0fc9      	lsrs	r1, r1, #31
10013a36:	2aff      	cmp	r2, #255	; 0xff
10013a38:	d01f      	beq.n	10013a7a <__gesf2+0x5a>
10013a3a:	28ff      	cmp	r0, #255	; 0xff
10013a3c:	d022      	beq.n	10013a84 <__gesf2+0x64>
10013a3e:	2a00      	cmp	r2, #0
10013a40:	d109      	bne.n	10013a56 <__gesf2+0x36>
10013a42:	426e      	negs	r6, r5
10013a44:	416e      	adcs	r6, r5
10013a46:	2800      	cmp	r0, #0
10013a48:	d10f      	bne.n	10013a6a <__gesf2+0x4a>
10013a4a:	2c00      	cmp	r4, #0
10013a4c:	d10d      	bne.n	10013a6a <__gesf2+0x4a>
10013a4e:	2000      	movs	r0, #0
10013a50:	2d00      	cmp	r5, #0
10013a52:	d009      	beq.n	10013a68 <__gesf2+0x48>
10013a54:	e005      	b.n	10013a62 <__gesf2+0x42>
10013a56:	2800      	cmp	r0, #0
10013a58:	d101      	bne.n	10013a5e <__gesf2+0x3e>
10013a5a:	2c00      	cmp	r4, #0
10013a5c:	d001      	beq.n	10013a62 <__gesf2+0x42>
10013a5e:	428b      	cmp	r3, r1
10013a60:	d013      	beq.n	10013a8a <__gesf2+0x6a>
10013a62:	4258      	negs	r0, r3
10013a64:	2301      	movs	r3, #1
10013a66:	4318      	orrs	r0, r3
10013a68:	bdf0      	pop	{r4, r5, r6, r7, pc}
10013a6a:	2e00      	cmp	r6, #0
10013a6c:	d0f7      	beq.n	10013a5e <__gesf2+0x3e>
10013a6e:	4248      	negs	r0, r1
10013a70:	4141      	adcs	r1, r0
10013a72:	2001      	movs	r0, #1
10013a74:	4249      	negs	r1, r1
10013a76:	4308      	orrs	r0, r1
10013a78:	e7f6      	b.n	10013a68 <__gesf2+0x48>
10013a7a:	2d00      	cmp	r5, #0
10013a7c:	d0dd      	beq.n	10013a3a <__gesf2+0x1a>
10013a7e:	2002      	movs	r0, #2
10013a80:	4240      	negs	r0, r0
10013a82:	e7f1      	b.n	10013a68 <__gesf2+0x48>
10013a84:	2c00      	cmp	r4, #0
10013a86:	d0da      	beq.n	10013a3e <__gesf2+0x1e>
10013a88:	e7f9      	b.n	10013a7e <__gesf2+0x5e>
10013a8a:	4282      	cmp	r2, r0
10013a8c:	dce9      	bgt.n	10013a62 <__gesf2+0x42>
10013a8e:	db04      	blt.n	10013a9a <__gesf2+0x7a>
10013a90:	42a5      	cmp	r5, r4
10013a92:	d8e6      	bhi.n	10013a62 <__gesf2+0x42>
10013a94:	2000      	movs	r0, #0
10013a96:	42a5      	cmp	r5, r4
10013a98:	d2e6      	bcs.n	10013a68 <__gesf2+0x48>
10013a9a:	4258      	negs	r0, r3
10013a9c:	4143      	adcs	r3, r0
10013a9e:	2001      	movs	r0, #1
10013aa0:	425b      	negs	r3, r3
10013aa2:	4318      	orrs	r0, r3
10013aa4:	e7e0      	b.n	10013a68 <__gesf2+0x48>
10013aa6:	46c0      	nop			; (mov r8, r8)

10013aa8 <__lesf2>:
10013aa8:	0243      	lsls	r3, r0, #9
10013aaa:	b5f0      	push	{r4, r5, r6, r7, lr}
10013aac:	0042      	lsls	r2, r0, #1
10013aae:	004c      	lsls	r4, r1, #1
10013ab0:	0a5e      	lsrs	r6, r3, #9
10013ab2:	0fc3      	lsrs	r3, r0, #31
10013ab4:	0248      	lsls	r0, r1, #9
10013ab6:	0e12      	lsrs	r2, r2, #24
10013ab8:	0a45      	lsrs	r5, r0, #9
10013aba:	0e24      	lsrs	r4, r4, #24
10013abc:	0fc9      	lsrs	r1, r1, #31
10013abe:	2aff      	cmp	r2, #255	; 0xff
10013ac0:	d017      	beq.n	10013af2 <__lesf2+0x4a>
10013ac2:	2cff      	cmp	r4, #255	; 0xff
10013ac4:	d019      	beq.n	10013afa <__lesf2+0x52>
10013ac6:	2a00      	cmp	r2, #0
10013ac8:	d10b      	bne.n	10013ae2 <__lesf2+0x3a>
10013aca:	4270      	negs	r0, r6
10013acc:	4170      	adcs	r0, r6
10013ace:	2c00      	cmp	r4, #0
10013ad0:	d017      	beq.n	10013b02 <__lesf2+0x5a>
10013ad2:	2800      	cmp	r0, #0
10013ad4:	d007      	beq.n	10013ae6 <__lesf2+0x3e>
10013ad6:	4248      	negs	r0, r1
10013ad8:	4141      	adcs	r1, r0
10013ada:	2001      	movs	r0, #1
10013adc:	4249      	negs	r1, r1
10013ade:	4308      	orrs	r0, r1
10013ae0:	bdf0      	pop	{r4, r5, r6, r7, pc}
10013ae2:	2c00      	cmp	r4, #0
10013ae4:	d013      	beq.n	10013b0e <__lesf2+0x66>
10013ae6:	428b      	cmp	r3, r1
10013ae8:	d014      	beq.n	10013b14 <__lesf2+0x6c>
10013aea:	4258      	negs	r0, r3
10013aec:	2301      	movs	r3, #1
10013aee:	4318      	orrs	r0, r3
10013af0:	e7f6      	b.n	10013ae0 <__lesf2+0x38>
10013af2:	2002      	movs	r0, #2
10013af4:	2e00      	cmp	r6, #0
10013af6:	d1f3      	bne.n	10013ae0 <__lesf2+0x38>
10013af8:	e7e3      	b.n	10013ac2 <__lesf2+0x1a>
10013afa:	2002      	movs	r0, #2
10013afc:	2d00      	cmp	r5, #0
10013afe:	d1ef      	bne.n	10013ae0 <__lesf2+0x38>
10013b00:	e7e1      	b.n	10013ac6 <__lesf2+0x1e>
10013b02:	2d00      	cmp	r5, #0
10013b04:	d1e5      	bne.n	10013ad2 <__lesf2+0x2a>
10013b06:	2000      	movs	r0, #0
10013b08:	2e00      	cmp	r6, #0
10013b0a:	d0e9      	beq.n	10013ae0 <__lesf2+0x38>
10013b0c:	e7ed      	b.n	10013aea <__lesf2+0x42>
10013b0e:	2d00      	cmp	r5, #0
10013b10:	d1e9      	bne.n	10013ae6 <__lesf2+0x3e>
10013b12:	e7ea      	b.n	10013aea <__lesf2+0x42>
10013b14:	42a2      	cmp	r2, r4
10013b16:	dce8      	bgt.n	10013aea <__lesf2+0x42>
10013b18:	db04      	blt.n	10013b24 <__lesf2+0x7c>
10013b1a:	42ae      	cmp	r6, r5
10013b1c:	d8e5      	bhi.n	10013aea <__lesf2+0x42>
10013b1e:	2000      	movs	r0, #0
10013b20:	42ae      	cmp	r6, r5
10013b22:	d2dd      	bcs.n	10013ae0 <__lesf2+0x38>
10013b24:	4258      	negs	r0, r3
10013b26:	4143      	adcs	r3, r0
10013b28:	2001      	movs	r0, #1
10013b2a:	425b      	negs	r3, r3
10013b2c:	4318      	orrs	r0, r3
10013b2e:	e7d7      	b.n	10013ae0 <__lesf2+0x38>

10013b30 <__aeabi_fmul>:
10013b30:	b5f0      	push	{r4, r5, r6, r7, lr}
10013b32:	4657      	mov	r7, sl
10013b34:	464e      	mov	r6, r9
10013b36:	4645      	mov	r5, r8
10013b38:	0043      	lsls	r3, r0, #1
10013b3a:	b4e0      	push	{r5, r6, r7}
10013b3c:	0246      	lsls	r6, r0, #9
10013b3e:	4688      	mov	r8, r1
10013b40:	0a76      	lsrs	r6, r6, #9
10013b42:	0e1f      	lsrs	r7, r3, #24
10013b44:	0fc4      	lsrs	r4, r0, #31
10013b46:	2f00      	cmp	r7, #0
10013b48:	d047      	beq.n	10013bda <__aeabi_fmul+0xaa>
10013b4a:	2fff      	cmp	r7, #255	; 0xff
10013b4c:	d025      	beq.n	10013b9a <__aeabi_fmul+0x6a>
10013b4e:	2300      	movs	r3, #0
10013b50:	2580      	movs	r5, #128	; 0x80
10013b52:	469a      	mov	sl, r3
10013b54:	4699      	mov	r9, r3
10013b56:	00f6      	lsls	r6, r6, #3
10013b58:	04ed      	lsls	r5, r5, #19
10013b5a:	432e      	orrs	r6, r5
10013b5c:	3f7f      	subs	r7, #127	; 0x7f
10013b5e:	4643      	mov	r3, r8
10013b60:	4642      	mov	r2, r8
10013b62:	025d      	lsls	r5, r3, #9
10013b64:	0fd2      	lsrs	r2, r2, #31
10013b66:	005b      	lsls	r3, r3, #1
10013b68:	0a6d      	lsrs	r5, r5, #9
10013b6a:	0e1b      	lsrs	r3, r3, #24
10013b6c:	4690      	mov	r8, r2
10013b6e:	d040      	beq.n	10013bf2 <__aeabi_fmul+0xc2>
10013b70:	2bff      	cmp	r3, #255	; 0xff
10013b72:	d039      	beq.n	10013be8 <__aeabi_fmul+0xb8>
10013b74:	2280      	movs	r2, #128	; 0x80
10013b76:	2000      	movs	r0, #0
10013b78:	00ed      	lsls	r5, r5, #3
10013b7a:	04d2      	lsls	r2, r2, #19
10013b7c:	4315      	orrs	r5, r2
10013b7e:	3b7f      	subs	r3, #127	; 0x7f
10013b80:	18fb      	adds	r3, r7, r3
10013b82:	4642      	mov	r2, r8
10013b84:	4657      	mov	r7, sl
10013b86:	1c59      	adds	r1, r3, #1
10013b88:	4062      	eors	r2, r4
10013b8a:	468c      	mov	ip, r1
10013b8c:	4307      	orrs	r7, r0
10013b8e:	2f0f      	cmp	r7, #15
10013b90:	d85c      	bhi.n	10013c4c <__aeabi_fmul+0x11c>
10013b92:	496f      	ldr	r1, [pc, #444]	; (10013d50 <__aeabi_fmul+0x220>)
10013b94:	00bf      	lsls	r7, r7, #2
10013b96:	59c9      	ldr	r1, [r1, r7]
10013b98:	468f      	mov	pc, r1
10013b9a:	2e00      	cmp	r6, #0
10013b9c:	d145      	bne.n	10013c2a <__aeabi_fmul+0xfa>
10013b9e:	2308      	movs	r3, #8
10013ba0:	469a      	mov	sl, r3
10013ba2:	3b06      	subs	r3, #6
10013ba4:	4699      	mov	r9, r3
10013ba6:	e7da      	b.n	10013b5e <__aeabi_fmul+0x2e>
10013ba8:	4642      	mov	r2, r8
10013baa:	2802      	cmp	r0, #2
10013bac:	d02d      	beq.n	10013c0a <__aeabi_fmul+0xda>
10013bae:	2803      	cmp	r0, #3
10013bb0:	d100      	bne.n	10013bb4 <__aeabi_fmul+0x84>
10013bb2:	e0c3      	b.n	10013d3c <__aeabi_fmul+0x20c>
10013bb4:	2801      	cmp	r0, #1
10013bb6:	d000      	beq.n	10013bba <__aeabi_fmul+0x8a>
10013bb8:	e0a2      	b.n	10013d00 <__aeabi_fmul+0x1d0>
10013bba:	2500      	movs	r5, #0
10013bbc:	2600      	movs	r6, #0
10013bbe:	4002      	ands	r2, r0
10013bc0:	b2d4      	uxtb	r4, r2
10013bc2:	0276      	lsls	r6, r6, #9
10013bc4:	05ed      	lsls	r5, r5, #23
10013bc6:	0a76      	lsrs	r6, r6, #9
10013bc8:	432e      	orrs	r6, r5
10013bca:	07e4      	lsls	r4, r4, #31
10013bcc:	4326      	orrs	r6, r4
10013bce:	0030      	movs	r0, r6
10013bd0:	bc1c      	pop	{r2, r3, r4}
10013bd2:	4690      	mov	r8, r2
10013bd4:	4699      	mov	r9, r3
10013bd6:	46a2      	mov	sl, r4
10013bd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
10013bda:	2e00      	cmp	r6, #0
10013bdc:	d11a      	bne.n	10013c14 <__aeabi_fmul+0xe4>
10013bde:	2304      	movs	r3, #4
10013be0:	469a      	mov	sl, r3
10013be2:	3b03      	subs	r3, #3
10013be4:	4699      	mov	r9, r3
10013be6:	e7ba      	b.n	10013b5e <__aeabi_fmul+0x2e>
10013be8:	002a      	movs	r2, r5
10013bea:	1e51      	subs	r1, r2, #1
10013bec:	418a      	sbcs	r2, r1
10013bee:	1c90      	adds	r0, r2, #2
10013bf0:	e7c6      	b.n	10013b80 <__aeabi_fmul+0x50>
10013bf2:	2001      	movs	r0, #1
10013bf4:	2d00      	cmp	r5, #0
10013bf6:	d0c3      	beq.n	10013b80 <__aeabi_fmul+0x50>
10013bf8:	0028      	movs	r0, r5
10013bfa:	f001 fa25 	bl	10015048 <__clzsi2>
10013bfe:	1f43      	subs	r3, r0, #5
10013c00:	3076      	adds	r0, #118	; 0x76
10013c02:	409d      	lsls	r5, r3
10013c04:	4243      	negs	r3, r0
10013c06:	2000      	movs	r0, #0
10013c08:	e7ba      	b.n	10013b80 <__aeabi_fmul+0x50>
10013c0a:	2401      	movs	r4, #1
10013c0c:	25ff      	movs	r5, #255	; 0xff
10013c0e:	4014      	ands	r4, r2
10013c10:	2600      	movs	r6, #0
10013c12:	e7d6      	b.n	10013bc2 <__aeabi_fmul+0x92>
10013c14:	0030      	movs	r0, r6
10013c16:	f001 fa17 	bl	10015048 <__clzsi2>
10013c1a:	1f43      	subs	r3, r0, #5
10013c1c:	409e      	lsls	r6, r3
10013c1e:	2300      	movs	r3, #0
10013c20:	3076      	adds	r0, #118	; 0x76
10013c22:	4247      	negs	r7, r0
10013c24:	469a      	mov	sl, r3
10013c26:	4699      	mov	r9, r3
10013c28:	e799      	b.n	10013b5e <__aeabi_fmul+0x2e>
10013c2a:	230c      	movs	r3, #12
10013c2c:	469a      	mov	sl, r3
10013c2e:	3b09      	subs	r3, #9
10013c30:	4699      	mov	r9, r3
10013c32:	e794      	b.n	10013b5e <__aeabi_fmul+0x2e>
10013c34:	2680      	movs	r6, #128	; 0x80
10013c36:	2400      	movs	r4, #0
10013c38:	03f6      	lsls	r6, r6, #15
10013c3a:	25ff      	movs	r5, #255	; 0xff
10013c3c:	e7c1      	b.n	10013bc2 <__aeabi_fmul+0x92>
10013c3e:	0035      	movs	r5, r6
10013c40:	4648      	mov	r0, r9
10013c42:	e7b2      	b.n	10013baa <__aeabi_fmul+0x7a>
10013c44:	0035      	movs	r5, r6
10013c46:	0022      	movs	r2, r4
10013c48:	4648      	mov	r0, r9
10013c4a:	e7ae      	b.n	10013baa <__aeabi_fmul+0x7a>
10013c4c:	0429      	lsls	r1, r5, #16
10013c4e:	0c09      	lsrs	r1, r1, #16
10013c50:	0008      	movs	r0, r1
10013c52:	0c37      	lsrs	r7, r6, #16
10013c54:	0436      	lsls	r6, r6, #16
10013c56:	0c36      	lsrs	r6, r6, #16
10013c58:	0c2c      	lsrs	r4, r5, #16
10013c5a:	4379      	muls	r1, r7
10013c5c:	4370      	muls	r0, r6
10013c5e:	4367      	muls	r7, r4
10013c60:	4374      	muls	r4, r6
10013c62:	0c06      	lsrs	r6, r0, #16
10013c64:	1864      	adds	r4, r4, r1
10013c66:	1936      	adds	r6, r6, r4
10013c68:	42b1      	cmp	r1, r6
10013c6a:	d903      	bls.n	10013c74 <__aeabi_fmul+0x144>
10013c6c:	2180      	movs	r1, #128	; 0x80
10013c6e:	0249      	lsls	r1, r1, #9
10013c70:	4688      	mov	r8, r1
10013c72:	4447      	add	r7, r8
10013c74:	0400      	lsls	r0, r0, #16
10013c76:	0c00      	lsrs	r0, r0, #16
10013c78:	0431      	lsls	r1, r6, #16
10013c7a:	1809      	adds	r1, r1, r0
10013c7c:	018d      	lsls	r5, r1, #6
10013c7e:	1e68      	subs	r0, r5, #1
10013c80:	4185      	sbcs	r5, r0
10013c82:	0e89      	lsrs	r1, r1, #26
10013c84:	4329      	orrs	r1, r5
10013c86:	0c35      	lsrs	r5, r6, #16
10013c88:	19ed      	adds	r5, r5, r7
10013c8a:	01ad      	lsls	r5, r5, #6
10013c8c:	430d      	orrs	r5, r1
10013c8e:	0129      	lsls	r1, r5, #4
10013c90:	d504      	bpl.n	10013c9c <__aeabi_fmul+0x16c>
10013c92:	2301      	movs	r3, #1
10013c94:	0869      	lsrs	r1, r5, #1
10013c96:	401d      	ands	r5, r3
10013c98:	4663      	mov	r3, ip
10013c9a:	430d      	orrs	r5, r1
10013c9c:	0019      	movs	r1, r3
10013c9e:	317f      	adds	r1, #127	; 0x7f
10013ca0:	2900      	cmp	r1, #0
10013ca2:	dd25      	ble.n	10013cf0 <__aeabi_fmul+0x1c0>
10013ca4:	0768      	lsls	r0, r5, #29
10013ca6:	d004      	beq.n	10013cb2 <__aeabi_fmul+0x182>
10013ca8:	200f      	movs	r0, #15
10013caa:	4028      	ands	r0, r5
10013cac:	2804      	cmp	r0, #4
10013cae:	d000      	beq.n	10013cb2 <__aeabi_fmul+0x182>
10013cb0:	3504      	adds	r5, #4
10013cb2:	0128      	lsls	r0, r5, #4
10013cb4:	d503      	bpl.n	10013cbe <__aeabi_fmul+0x18e>
10013cb6:	4927      	ldr	r1, [pc, #156]	; (10013d54 <__aeabi_fmul+0x224>)
10013cb8:	3380      	adds	r3, #128	; 0x80
10013cba:	400d      	ands	r5, r1
10013cbc:	0019      	movs	r1, r3
10013cbe:	29fe      	cmp	r1, #254	; 0xfe
10013cc0:	dca3      	bgt.n	10013c0a <__aeabi_fmul+0xda>
10013cc2:	2401      	movs	r4, #1
10013cc4:	01ad      	lsls	r5, r5, #6
10013cc6:	0a6e      	lsrs	r6, r5, #9
10013cc8:	4014      	ands	r4, r2
10013cca:	b2cd      	uxtb	r5, r1
10013ccc:	e779      	b.n	10013bc2 <__aeabi_fmul+0x92>
10013cce:	2080      	movs	r0, #128	; 0x80
10013cd0:	03c0      	lsls	r0, r0, #15
10013cd2:	4206      	tst	r6, r0
10013cd4:	d007      	beq.n	10013ce6 <__aeabi_fmul+0x1b6>
10013cd6:	4205      	tst	r5, r0
10013cd8:	d105      	bne.n	10013ce6 <__aeabi_fmul+0x1b6>
10013cda:	4328      	orrs	r0, r5
10013cdc:	0246      	lsls	r6, r0, #9
10013cde:	0a76      	lsrs	r6, r6, #9
10013ce0:	4644      	mov	r4, r8
10013ce2:	25ff      	movs	r5, #255	; 0xff
10013ce4:	e76d      	b.n	10013bc2 <__aeabi_fmul+0x92>
10013ce6:	4306      	orrs	r6, r0
10013ce8:	0276      	lsls	r6, r6, #9
10013cea:	0a76      	lsrs	r6, r6, #9
10013cec:	25ff      	movs	r5, #255	; 0xff
10013cee:	e768      	b.n	10013bc2 <__aeabi_fmul+0x92>
10013cf0:	2401      	movs	r4, #1
10013cf2:	1a61      	subs	r1, r4, r1
10013cf4:	291b      	cmp	r1, #27
10013cf6:	dd05      	ble.n	10013d04 <__aeabi_fmul+0x1d4>
10013cf8:	4014      	ands	r4, r2
10013cfa:	2500      	movs	r5, #0
10013cfc:	2600      	movs	r6, #0
10013cfe:	e760      	b.n	10013bc2 <__aeabi_fmul+0x92>
10013d00:	4663      	mov	r3, ip
10013d02:	e7cb      	b.n	10013c9c <__aeabi_fmul+0x16c>
10013d04:	002e      	movs	r6, r5
10013d06:	2320      	movs	r3, #32
10013d08:	40ce      	lsrs	r6, r1
10013d0a:	1a59      	subs	r1, r3, r1
10013d0c:	408d      	lsls	r5, r1
10013d0e:	1e6b      	subs	r3, r5, #1
10013d10:	419d      	sbcs	r5, r3
10013d12:	432e      	orrs	r6, r5
10013d14:	0773      	lsls	r3, r6, #29
10013d16:	d004      	beq.n	10013d22 <__aeabi_fmul+0x1f2>
10013d18:	230f      	movs	r3, #15
10013d1a:	4033      	ands	r3, r6
10013d1c:	2b04      	cmp	r3, #4
10013d1e:	d000      	beq.n	10013d22 <__aeabi_fmul+0x1f2>
10013d20:	3604      	adds	r6, #4
10013d22:	0173      	lsls	r3, r6, #5
10013d24:	d504      	bpl.n	10013d30 <__aeabi_fmul+0x200>
10013d26:	2401      	movs	r4, #1
10013d28:	2501      	movs	r5, #1
10013d2a:	4014      	ands	r4, r2
10013d2c:	2600      	movs	r6, #0
10013d2e:	e748      	b.n	10013bc2 <__aeabi_fmul+0x92>
10013d30:	2401      	movs	r4, #1
10013d32:	01b6      	lsls	r6, r6, #6
10013d34:	0a76      	lsrs	r6, r6, #9
10013d36:	4014      	ands	r4, r2
10013d38:	2500      	movs	r5, #0
10013d3a:	e742      	b.n	10013bc2 <__aeabi_fmul+0x92>
10013d3c:	2680      	movs	r6, #128	; 0x80
10013d3e:	2401      	movs	r4, #1
10013d40:	03f6      	lsls	r6, r6, #15
10013d42:	432e      	orrs	r6, r5
10013d44:	0276      	lsls	r6, r6, #9
10013d46:	0a76      	lsrs	r6, r6, #9
10013d48:	4014      	ands	r4, r2
10013d4a:	25ff      	movs	r5, #255	; 0xff
10013d4c:	e739      	b.n	10013bc2 <__aeabi_fmul+0x92>
10013d4e:	46c0      	nop			; (mov r8, r8)
10013d50:	10018208 	.word	0x10018208
10013d54:	f7ffffff 	.word	0xf7ffffff

10013d58 <__aeabi_fsub>:
10013d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10013d5a:	024a      	lsls	r2, r1, #9
10013d5c:	004e      	lsls	r6, r1, #1
10013d5e:	0243      	lsls	r3, r0, #9
10013d60:	0044      	lsls	r4, r0, #1
10013d62:	0e24      	lsrs	r4, r4, #24
10013d64:	0fc5      	lsrs	r5, r0, #31
10013d66:	099b      	lsrs	r3, r3, #6
10013d68:	0e36      	lsrs	r6, r6, #24
10013d6a:	0fc9      	lsrs	r1, r1, #31
10013d6c:	0992      	lsrs	r2, r2, #6
10013d6e:	2eff      	cmp	r6, #255	; 0xff
10013d70:	d100      	bne.n	10013d74 <__aeabi_fsub+0x1c>
10013d72:	e083      	b.n	10013e7c <__aeabi_fsub+0x124>
10013d74:	2001      	movs	r0, #1
10013d76:	4041      	eors	r1, r0
10013d78:	1ba0      	subs	r0, r4, r6
10013d7a:	42a9      	cmp	r1, r5
10013d7c:	d05c      	beq.n	10013e38 <__aeabi_fsub+0xe0>
10013d7e:	2800      	cmp	r0, #0
10013d80:	dc00      	bgt.n	10013d84 <__aeabi_fsub+0x2c>
10013d82:	e095      	b.n	10013eb0 <__aeabi_fsub+0x158>
10013d84:	2e00      	cmp	r6, #0
10013d86:	d11c      	bne.n	10013dc2 <__aeabi_fsub+0x6a>
10013d88:	2a00      	cmp	r2, #0
10013d8a:	d000      	beq.n	10013d8e <__aeabi_fsub+0x36>
10013d8c:	e081      	b.n	10013e92 <__aeabi_fsub+0x13a>
10013d8e:	075a      	lsls	r2, r3, #29
10013d90:	d004      	beq.n	10013d9c <__aeabi_fsub+0x44>
10013d92:	220f      	movs	r2, #15
10013d94:	401a      	ands	r2, r3
10013d96:	2a04      	cmp	r2, #4
10013d98:	d000      	beq.n	10013d9c <__aeabi_fsub+0x44>
10013d9a:	3304      	adds	r3, #4
10013d9c:	015a      	lsls	r2, r3, #5
10013d9e:	d53b      	bpl.n	10013e18 <__aeabi_fsub+0xc0>
10013da0:	3401      	adds	r4, #1
10013da2:	2cff      	cmp	r4, #255	; 0xff
10013da4:	d100      	bne.n	10013da8 <__aeabi_fsub+0x50>
10013da6:	e091      	b.n	10013ecc <__aeabi_fsub+0x174>
10013da8:	2001      	movs	r0, #1
10013daa:	019b      	lsls	r3, r3, #6
10013dac:	0a5b      	lsrs	r3, r3, #9
10013dae:	b2e4      	uxtb	r4, r4
10013db0:	4005      	ands	r5, r0
10013db2:	025b      	lsls	r3, r3, #9
10013db4:	05e4      	lsls	r4, r4, #23
10013db6:	0a5b      	lsrs	r3, r3, #9
10013db8:	07ed      	lsls	r5, r5, #31
10013dba:	4323      	orrs	r3, r4
10013dbc:	432b      	orrs	r3, r5
10013dbe:	0018      	movs	r0, r3
10013dc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10013dc2:	2cff      	cmp	r4, #255	; 0xff
10013dc4:	d0e3      	beq.n	10013d8e <__aeabi_fsub+0x36>
10013dc6:	2180      	movs	r1, #128	; 0x80
10013dc8:	04c9      	lsls	r1, r1, #19
10013dca:	430a      	orrs	r2, r1
10013dcc:	281b      	cmp	r0, #27
10013dce:	dd00      	ble.n	10013dd2 <__aeabi_fsub+0x7a>
10013dd0:	e090      	b.n	10013ef4 <__aeabi_fsub+0x19c>
10013dd2:	0016      	movs	r6, r2
10013dd4:	2120      	movs	r1, #32
10013dd6:	40c6      	lsrs	r6, r0
10013dd8:	1a08      	subs	r0, r1, r0
10013dda:	4082      	lsls	r2, r0
10013ddc:	1e51      	subs	r1, r2, #1
10013dde:	418a      	sbcs	r2, r1
10013de0:	4332      	orrs	r2, r6
10013de2:	1a9b      	subs	r3, r3, r2
10013de4:	015a      	lsls	r2, r3, #5
10013de6:	d515      	bpl.n	10013e14 <__aeabi_fsub+0xbc>
10013de8:	019b      	lsls	r3, r3, #6
10013dea:	099e      	lsrs	r6, r3, #6
10013dec:	0030      	movs	r0, r6
10013dee:	f001 f92b 	bl	10015048 <__clzsi2>
10013df2:	3805      	subs	r0, #5
10013df4:	4086      	lsls	r6, r0
10013df6:	4284      	cmp	r4, r0
10013df8:	dc6c      	bgt.n	10013ed4 <__aeabi_fsub+0x17c>
10013dfa:	1b04      	subs	r4, r0, r4
10013dfc:	0033      	movs	r3, r6
10013dfe:	2020      	movs	r0, #32
10013e00:	3401      	adds	r4, #1
10013e02:	40e3      	lsrs	r3, r4
10013e04:	1b04      	subs	r4, r0, r4
10013e06:	40a6      	lsls	r6, r4
10013e08:	1e72      	subs	r2, r6, #1
10013e0a:	4196      	sbcs	r6, r2
10013e0c:	2400      	movs	r4, #0
10013e0e:	4333      	orrs	r3, r6
10013e10:	e7bd      	b.n	10013d8e <__aeabi_fsub+0x36>
10013e12:	000d      	movs	r5, r1
10013e14:	075a      	lsls	r2, r3, #29
10013e16:	d1bc      	bne.n	10013d92 <__aeabi_fsub+0x3a>
10013e18:	08df      	lsrs	r7, r3, #3
10013e1a:	2301      	movs	r3, #1
10013e1c:	401d      	ands	r5, r3
10013e1e:	2cff      	cmp	r4, #255	; 0xff
10013e20:	d133      	bne.n	10013e8a <__aeabi_fsub+0x132>
10013e22:	2f00      	cmp	r7, #0
10013e24:	d100      	bne.n	10013e28 <__aeabi_fsub+0xd0>
10013e26:	e090      	b.n	10013f4a <__aeabi_fsub+0x1f2>
10013e28:	2280      	movs	r2, #128	; 0x80
10013e2a:	03d2      	lsls	r2, r2, #15
10013e2c:	0013      	movs	r3, r2
10013e2e:	433b      	orrs	r3, r7
10013e30:	025b      	lsls	r3, r3, #9
10013e32:	0a5b      	lsrs	r3, r3, #9
10013e34:	24ff      	movs	r4, #255	; 0xff
10013e36:	e7bc      	b.n	10013db2 <__aeabi_fsub+0x5a>
10013e38:	2800      	cmp	r0, #0
10013e3a:	dd4f      	ble.n	10013edc <__aeabi_fsub+0x184>
10013e3c:	2e00      	cmp	r6, #0
10013e3e:	d02e      	beq.n	10013e9e <__aeabi_fsub+0x146>
10013e40:	2cff      	cmp	r4, #255	; 0xff
10013e42:	d0a4      	beq.n	10013d8e <__aeabi_fsub+0x36>
10013e44:	2580      	movs	r5, #128	; 0x80
10013e46:	04ed      	lsls	r5, r5, #19
10013e48:	432a      	orrs	r2, r5
10013e4a:	281b      	cmp	r0, #27
10013e4c:	dd00      	ble.n	10013e50 <__aeabi_fsub+0xf8>
10013e4e:	e097      	b.n	10013f80 <__aeabi_fsub+0x228>
10013e50:	0016      	movs	r6, r2
10013e52:	2520      	movs	r5, #32
10013e54:	40c6      	lsrs	r6, r0
10013e56:	1a28      	subs	r0, r5, r0
10013e58:	4082      	lsls	r2, r0
10013e5a:	1e50      	subs	r0, r2, #1
10013e5c:	4182      	sbcs	r2, r0
10013e5e:	4332      	orrs	r2, r6
10013e60:	189b      	adds	r3, r3, r2
10013e62:	015a      	lsls	r2, r3, #5
10013e64:	d5d5      	bpl.n	10013e12 <__aeabi_fsub+0xba>
10013e66:	3401      	adds	r4, #1
10013e68:	2cff      	cmp	r4, #255	; 0xff
10013e6a:	d06d      	beq.n	10013f48 <__aeabi_fsub+0x1f0>
10013e6c:	2201      	movs	r2, #1
10013e6e:	487b      	ldr	r0, [pc, #492]	; (1001405c <__aeabi_fsub+0x304>)
10013e70:	401a      	ands	r2, r3
10013e72:	085b      	lsrs	r3, r3, #1
10013e74:	4003      	ands	r3, r0
10013e76:	4313      	orrs	r3, r2
10013e78:	000d      	movs	r5, r1
10013e7a:	e788      	b.n	10013d8e <__aeabi_fsub+0x36>
10013e7c:	2a00      	cmp	r2, #0
10013e7e:	d000      	beq.n	10013e82 <__aeabi_fsub+0x12a>
10013e80:	e77a      	b.n	10013d78 <__aeabi_fsub+0x20>
10013e82:	e777      	b.n	10013d74 <__aeabi_fsub+0x1c>
10013e84:	1e03      	subs	r3, r0, #0
10013e86:	d1c5      	bne.n	10013e14 <__aeabi_fsub+0xbc>
10013e88:	2500      	movs	r5, #0
10013e8a:	027b      	lsls	r3, r7, #9
10013e8c:	0a5b      	lsrs	r3, r3, #9
10013e8e:	b2e4      	uxtb	r4, r4
10013e90:	e78f      	b.n	10013db2 <__aeabi_fsub+0x5a>
10013e92:	3801      	subs	r0, #1
10013e94:	2800      	cmp	r0, #0
10013e96:	d0a4      	beq.n	10013de2 <__aeabi_fsub+0x8a>
10013e98:	2cff      	cmp	r4, #255	; 0xff
10013e9a:	d197      	bne.n	10013dcc <__aeabi_fsub+0x74>
10013e9c:	e777      	b.n	10013d8e <__aeabi_fsub+0x36>
10013e9e:	2a00      	cmp	r2, #0
10013ea0:	d100      	bne.n	10013ea4 <__aeabi_fsub+0x14c>
10013ea2:	e774      	b.n	10013d8e <__aeabi_fsub+0x36>
10013ea4:	3801      	subs	r0, #1
10013ea6:	2800      	cmp	r0, #0
10013ea8:	d0da      	beq.n	10013e60 <__aeabi_fsub+0x108>
10013eaa:	2cff      	cmp	r4, #255	; 0xff
10013eac:	d1cd      	bne.n	10013e4a <__aeabi_fsub+0xf2>
10013eae:	e76e      	b.n	10013d8e <__aeabi_fsub+0x36>
10013eb0:	2800      	cmp	r0, #0
10013eb2:	d121      	bne.n	10013ef8 <__aeabi_fsub+0x1a0>
10013eb4:	1c60      	adds	r0, r4, #1
10013eb6:	b2c0      	uxtb	r0, r0
10013eb8:	2801      	cmp	r0, #1
10013eba:	dd58      	ble.n	10013f6e <__aeabi_fsub+0x216>
10013ebc:	2780      	movs	r7, #128	; 0x80
10013ebe:	1a9e      	subs	r6, r3, r2
10013ec0:	04ff      	lsls	r7, r7, #19
10013ec2:	4037      	ands	r7, r6
10013ec4:	d02f      	beq.n	10013f26 <__aeabi_fsub+0x1ce>
10013ec6:	1ad6      	subs	r6, r2, r3
10013ec8:	000d      	movs	r5, r1
10013eca:	e78f      	b.n	10013dec <__aeabi_fsub+0x94>
10013ecc:	2301      	movs	r3, #1
10013ece:	401d      	ands	r5, r3
10013ed0:	2300      	movs	r3, #0
10013ed2:	e76e      	b.n	10013db2 <__aeabi_fsub+0x5a>
10013ed4:	4b62      	ldr	r3, [pc, #392]	; (10014060 <__aeabi_fsub+0x308>)
10013ed6:	1a24      	subs	r4, r4, r0
10013ed8:	4033      	ands	r3, r6
10013eda:	e758      	b.n	10013d8e <__aeabi_fsub+0x36>
10013edc:	2800      	cmp	r0, #0
10013ede:	d151      	bne.n	10013f84 <__aeabi_fsub+0x22c>
10013ee0:	1c60      	adds	r0, r4, #1
10013ee2:	b2c6      	uxtb	r6, r0
10013ee4:	2e01      	cmp	r6, #1
10013ee6:	dd33      	ble.n	10013f50 <__aeabi_fsub+0x1f8>
10013ee8:	28ff      	cmp	r0, #255	; 0xff
10013eea:	d02d      	beq.n	10013f48 <__aeabi_fsub+0x1f0>
10013eec:	189b      	adds	r3, r3, r2
10013eee:	085b      	lsrs	r3, r3, #1
10013ef0:	0004      	movs	r4, r0
10013ef2:	e74c      	b.n	10013d8e <__aeabi_fsub+0x36>
10013ef4:	2201      	movs	r2, #1
10013ef6:	e774      	b.n	10013de2 <__aeabi_fsub+0x8a>
10013ef8:	2c00      	cmp	r4, #0
10013efa:	d01a      	beq.n	10013f32 <__aeabi_fsub+0x1da>
10013efc:	2eff      	cmp	r6, #255	; 0xff
10013efe:	d01f      	beq.n	10013f40 <__aeabi_fsub+0x1e8>
10013f00:	2480      	movs	r4, #128	; 0x80
10013f02:	04e4      	lsls	r4, r4, #19
10013f04:	4240      	negs	r0, r0
10013f06:	4323      	orrs	r3, r4
10013f08:	281b      	cmp	r0, #27
10013f0a:	dd00      	ble.n	10013f0e <__aeabi_fsub+0x1b6>
10013f0c:	e096      	b.n	1001403c <__aeabi_fsub+0x2e4>
10013f0e:	001d      	movs	r5, r3
10013f10:	2420      	movs	r4, #32
10013f12:	40c5      	lsrs	r5, r0
10013f14:	1a20      	subs	r0, r4, r0
10013f16:	4083      	lsls	r3, r0
10013f18:	1e58      	subs	r0, r3, #1
10013f1a:	4183      	sbcs	r3, r0
10013f1c:	432b      	orrs	r3, r5
10013f1e:	1ad3      	subs	r3, r2, r3
10013f20:	0034      	movs	r4, r6
10013f22:	000d      	movs	r5, r1
10013f24:	e75e      	b.n	10013de4 <__aeabi_fsub+0x8c>
10013f26:	2e00      	cmp	r6, #0
10013f28:	d000      	beq.n	10013f2c <__aeabi_fsub+0x1d4>
10013f2a:	e75f      	b.n	10013dec <__aeabi_fsub+0x94>
10013f2c:	2500      	movs	r5, #0
10013f2e:	2400      	movs	r4, #0
10013f30:	e7ab      	b.n	10013e8a <__aeabi_fsub+0x132>
10013f32:	2b00      	cmp	r3, #0
10013f34:	d044      	beq.n	10013fc0 <__aeabi_fsub+0x268>
10013f36:	43c0      	mvns	r0, r0
10013f38:	2800      	cmp	r0, #0
10013f3a:	d0f0      	beq.n	10013f1e <__aeabi_fsub+0x1c6>
10013f3c:	2eff      	cmp	r6, #255	; 0xff
10013f3e:	d1e3      	bne.n	10013f08 <__aeabi_fsub+0x1b0>
10013f40:	0013      	movs	r3, r2
10013f42:	24ff      	movs	r4, #255	; 0xff
10013f44:	000d      	movs	r5, r1
10013f46:	e722      	b.n	10013d8e <__aeabi_fsub+0x36>
10013f48:	000d      	movs	r5, r1
10013f4a:	24ff      	movs	r4, #255	; 0xff
10013f4c:	2300      	movs	r3, #0
10013f4e:	e730      	b.n	10013db2 <__aeabi_fsub+0x5a>
10013f50:	2c00      	cmp	r4, #0
10013f52:	d15d      	bne.n	10014010 <__aeabi_fsub+0x2b8>
10013f54:	2b00      	cmp	r3, #0
10013f56:	d07d      	beq.n	10014054 <__aeabi_fsub+0x2fc>
10013f58:	2a00      	cmp	r2, #0
10013f5a:	d100      	bne.n	10013f5e <__aeabi_fsub+0x206>
10013f5c:	e717      	b.n	10013d8e <__aeabi_fsub+0x36>
10013f5e:	189b      	adds	r3, r3, r2
10013f60:	015a      	lsls	r2, r3, #5
10013f62:	d400      	bmi.n	10013f66 <__aeabi_fsub+0x20e>
10013f64:	e756      	b.n	10013e14 <__aeabi_fsub+0xbc>
10013f66:	4a3e      	ldr	r2, [pc, #248]	; (10014060 <__aeabi_fsub+0x308>)
10013f68:	0004      	movs	r4, r0
10013f6a:	4013      	ands	r3, r2
10013f6c:	e70f      	b.n	10013d8e <__aeabi_fsub+0x36>
10013f6e:	2c00      	cmp	r4, #0
10013f70:	d11e      	bne.n	10013fb0 <__aeabi_fsub+0x258>
10013f72:	2b00      	cmp	r3, #0
10013f74:	d12f      	bne.n	10013fd6 <__aeabi_fsub+0x27e>
10013f76:	2a00      	cmp	r2, #0
10013f78:	d065      	beq.n	10014046 <__aeabi_fsub+0x2ee>
10013f7a:	0013      	movs	r3, r2
10013f7c:	000d      	movs	r5, r1
10013f7e:	e706      	b.n	10013d8e <__aeabi_fsub+0x36>
10013f80:	2201      	movs	r2, #1
10013f82:	e76d      	b.n	10013e60 <__aeabi_fsub+0x108>
10013f84:	2c00      	cmp	r4, #0
10013f86:	d11f      	bne.n	10013fc8 <__aeabi_fsub+0x270>
10013f88:	2b00      	cmp	r3, #0
10013f8a:	d059      	beq.n	10014040 <__aeabi_fsub+0x2e8>
10013f8c:	43c0      	mvns	r0, r0
10013f8e:	2800      	cmp	r0, #0
10013f90:	d00b      	beq.n	10013faa <__aeabi_fsub+0x252>
10013f92:	2eff      	cmp	r6, #255	; 0xff
10013f94:	d04f      	beq.n	10014036 <__aeabi_fsub+0x2de>
10013f96:	281b      	cmp	r0, #27
10013f98:	dc5e      	bgt.n	10014058 <__aeabi_fsub+0x300>
10013f9a:	001d      	movs	r5, r3
10013f9c:	2420      	movs	r4, #32
10013f9e:	40c5      	lsrs	r5, r0
10013fa0:	1a20      	subs	r0, r4, r0
10013fa2:	4083      	lsls	r3, r0
10013fa4:	1e58      	subs	r0, r3, #1
10013fa6:	4183      	sbcs	r3, r0
10013fa8:	432b      	orrs	r3, r5
10013faa:	189b      	adds	r3, r3, r2
10013fac:	0034      	movs	r4, r6
10013fae:	e758      	b.n	10013e62 <__aeabi_fsub+0x10a>
10013fb0:	2b00      	cmp	r3, #0
10013fb2:	d11c      	bne.n	10013fee <__aeabi_fsub+0x296>
10013fb4:	2a00      	cmp	r2, #0
10013fb6:	d049      	beq.n	1001404c <__aeabi_fsub+0x2f4>
10013fb8:	0013      	movs	r3, r2
10013fba:	000d      	movs	r5, r1
10013fbc:	24ff      	movs	r4, #255	; 0xff
10013fbe:	e6e6      	b.n	10013d8e <__aeabi_fsub+0x36>
10013fc0:	0013      	movs	r3, r2
10013fc2:	0034      	movs	r4, r6
10013fc4:	000d      	movs	r5, r1
10013fc6:	e6e2      	b.n	10013d8e <__aeabi_fsub+0x36>
10013fc8:	2eff      	cmp	r6, #255	; 0xff
10013fca:	d034      	beq.n	10014036 <__aeabi_fsub+0x2de>
10013fcc:	2480      	movs	r4, #128	; 0x80
10013fce:	04e4      	lsls	r4, r4, #19
10013fd0:	4240      	negs	r0, r0
10013fd2:	4323      	orrs	r3, r4
10013fd4:	e7df      	b.n	10013f96 <__aeabi_fsub+0x23e>
10013fd6:	2a00      	cmp	r2, #0
10013fd8:	d100      	bne.n	10013fdc <__aeabi_fsub+0x284>
10013fda:	e6d8      	b.n	10013d8e <__aeabi_fsub+0x36>
10013fdc:	2780      	movs	r7, #128	; 0x80
10013fde:	1a98      	subs	r0, r3, r2
10013fe0:	04ff      	lsls	r7, r7, #19
10013fe2:	4007      	ands	r7, r0
10013fe4:	d100      	bne.n	10013fe8 <__aeabi_fsub+0x290>
10013fe6:	e74d      	b.n	10013e84 <__aeabi_fsub+0x12c>
10013fe8:	1ad3      	subs	r3, r2, r3
10013fea:	000d      	movs	r5, r1
10013fec:	e6cf      	b.n	10013d8e <__aeabi_fsub+0x36>
10013fee:	24ff      	movs	r4, #255	; 0xff
10013ff0:	2a00      	cmp	r2, #0
10013ff2:	d100      	bne.n	10013ff6 <__aeabi_fsub+0x29e>
10013ff4:	e6cb      	b.n	10013d8e <__aeabi_fsub+0x36>
10013ff6:	2080      	movs	r0, #128	; 0x80
10013ff8:	08db      	lsrs	r3, r3, #3
10013ffa:	03c0      	lsls	r0, r0, #15
10013ffc:	4203      	tst	r3, r0
10013ffe:	d004      	beq.n	1001400a <__aeabi_fsub+0x2b2>
10014000:	08d2      	lsrs	r2, r2, #3
10014002:	4202      	tst	r2, r0
10014004:	d101      	bne.n	1001400a <__aeabi_fsub+0x2b2>
10014006:	0013      	movs	r3, r2
10014008:	000d      	movs	r5, r1
1001400a:	00db      	lsls	r3, r3, #3
1001400c:	24ff      	movs	r4, #255	; 0xff
1001400e:	e6be      	b.n	10013d8e <__aeabi_fsub+0x36>
10014010:	2b00      	cmp	r3, #0
10014012:	d010      	beq.n	10014036 <__aeabi_fsub+0x2de>
10014014:	24ff      	movs	r4, #255	; 0xff
10014016:	2a00      	cmp	r2, #0
10014018:	d100      	bne.n	1001401c <__aeabi_fsub+0x2c4>
1001401a:	e6b8      	b.n	10013d8e <__aeabi_fsub+0x36>
1001401c:	2080      	movs	r0, #128	; 0x80
1001401e:	08db      	lsrs	r3, r3, #3
10014020:	03c0      	lsls	r0, r0, #15
10014022:	4203      	tst	r3, r0
10014024:	d003      	beq.n	1001402e <__aeabi_fsub+0x2d6>
10014026:	08d2      	lsrs	r2, r2, #3
10014028:	4202      	tst	r2, r0
1001402a:	d100      	bne.n	1001402e <__aeabi_fsub+0x2d6>
1001402c:	0013      	movs	r3, r2
1001402e:	00db      	lsls	r3, r3, #3
10014030:	000d      	movs	r5, r1
10014032:	24ff      	movs	r4, #255	; 0xff
10014034:	e6ab      	b.n	10013d8e <__aeabi_fsub+0x36>
10014036:	0013      	movs	r3, r2
10014038:	24ff      	movs	r4, #255	; 0xff
1001403a:	e6a8      	b.n	10013d8e <__aeabi_fsub+0x36>
1001403c:	2301      	movs	r3, #1
1001403e:	e76e      	b.n	10013f1e <__aeabi_fsub+0x1c6>
10014040:	0013      	movs	r3, r2
10014042:	0034      	movs	r4, r6
10014044:	e6a3      	b.n	10013d8e <__aeabi_fsub+0x36>
10014046:	2700      	movs	r7, #0
10014048:	2500      	movs	r5, #0
1001404a:	e71e      	b.n	10013e8a <__aeabi_fsub+0x132>
1001404c:	2780      	movs	r7, #128	; 0x80
1001404e:	2500      	movs	r5, #0
10014050:	03ff      	lsls	r7, r7, #15
10014052:	e6e9      	b.n	10013e28 <__aeabi_fsub+0xd0>
10014054:	0013      	movs	r3, r2
10014056:	e69a      	b.n	10013d8e <__aeabi_fsub+0x36>
10014058:	2301      	movs	r3, #1
1001405a:	e7a6      	b.n	10013faa <__aeabi_fsub+0x252>
1001405c:	7dffffff 	.word	0x7dffffff
10014060:	fbffffff 	.word	0xfbffffff

10014064 <__aeabi_f2iz>:
10014064:	0243      	lsls	r3, r0, #9
10014066:	0a59      	lsrs	r1, r3, #9
10014068:	0043      	lsls	r3, r0, #1
1001406a:	0fc2      	lsrs	r2, r0, #31
1001406c:	0e1b      	lsrs	r3, r3, #24
1001406e:	2000      	movs	r0, #0
10014070:	2b7e      	cmp	r3, #126	; 0x7e
10014072:	dd0e      	ble.n	10014092 <__aeabi_f2iz+0x2e>
10014074:	2b9d      	cmp	r3, #157	; 0x9d
10014076:	dc0d      	bgt.n	10014094 <__aeabi_f2iz+0x30>
10014078:	2080      	movs	r0, #128	; 0x80
1001407a:	0400      	lsls	r0, r0, #16
1001407c:	4301      	orrs	r1, r0
1001407e:	2b95      	cmp	r3, #149	; 0x95
10014080:	dc0b      	bgt.n	1001409a <__aeabi_f2iz+0x36>
10014082:	2096      	movs	r0, #150	; 0x96
10014084:	1ac3      	subs	r3, r0, r3
10014086:	40d9      	lsrs	r1, r3
10014088:	000b      	movs	r3, r1
1001408a:	4258      	negs	r0, r3
1001408c:	2a00      	cmp	r2, #0
1001408e:	d100      	bne.n	10014092 <__aeabi_f2iz+0x2e>
10014090:	0018      	movs	r0, r3
10014092:	4770      	bx	lr
10014094:	4b03      	ldr	r3, [pc, #12]	; (100140a4 <__aeabi_f2iz+0x40>)
10014096:	18d0      	adds	r0, r2, r3
10014098:	e7fb      	b.n	10014092 <__aeabi_f2iz+0x2e>
1001409a:	3b96      	subs	r3, #150	; 0x96
1001409c:	4099      	lsls	r1, r3
1001409e:	000b      	movs	r3, r1
100140a0:	e7f3      	b.n	1001408a <__aeabi_f2iz+0x26>
100140a2:	46c0      	nop			; (mov r8, r8)
100140a4:	7fffffff 	.word	0x7fffffff

100140a8 <__aeabi_i2f>:
100140a8:	b570      	push	{r4, r5, r6, lr}
100140aa:	2800      	cmp	r0, #0
100140ac:	d030      	beq.n	10014110 <__aeabi_i2f+0x68>
100140ae:	17c3      	asrs	r3, r0, #31
100140b0:	18c5      	adds	r5, r0, r3
100140b2:	405d      	eors	r5, r3
100140b4:	0fc4      	lsrs	r4, r0, #31
100140b6:	0028      	movs	r0, r5
100140b8:	f000 ffc6 	bl	10015048 <__clzsi2>
100140bc:	239e      	movs	r3, #158	; 0x9e
100140be:	1a1b      	subs	r3, r3, r0
100140c0:	2b96      	cmp	r3, #150	; 0x96
100140c2:	dc0d      	bgt.n	100140e0 <__aeabi_i2f+0x38>
100140c4:	2296      	movs	r2, #150	; 0x96
100140c6:	1ad2      	subs	r2, r2, r3
100140c8:	4095      	lsls	r5, r2
100140ca:	026a      	lsls	r2, r5, #9
100140cc:	0a52      	lsrs	r2, r2, #9
100140ce:	b2d8      	uxtb	r0, r3
100140d0:	0252      	lsls	r2, r2, #9
100140d2:	05c0      	lsls	r0, r0, #23
100140d4:	0a52      	lsrs	r2, r2, #9
100140d6:	07e4      	lsls	r4, r4, #31
100140d8:	4302      	orrs	r2, r0
100140da:	4322      	orrs	r2, r4
100140dc:	0010      	movs	r0, r2
100140de:	bd70      	pop	{r4, r5, r6, pc}
100140e0:	2b99      	cmp	r3, #153	; 0x99
100140e2:	dc19      	bgt.n	10014118 <__aeabi_i2f+0x70>
100140e4:	2299      	movs	r2, #153	; 0x99
100140e6:	1ad2      	subs	r2, r2, r3
100140e8:	4095      	lsls	r5, r2
100140ea:	4a12      	ldr	r2, [pc, #72]	; (10014134 <__aeabi_i2f+0x8c>)
100140ec:	402a      	ands	r2, r5
100140ee:	0769      	lsls	r1, r5, #29
100140f0:	d004      	beq.n	100140fc <__aeabi_i2f+0x54>
100140f2:	210f      	movs	r1, #15
100140f4:	400d      	ands	r5, r1
100140f6:	2d04      	cmp	r5, #4
100140f8:	d000      	beq.n	100140fc <__aeabi_i2f+0x54>
100140fa:	3204      	adds	r2, #4
100140fc:	0151      	lsls	r1, r2, #5
100140fe:	d503      	bpl.n	10014108 <__aeabi_i2f+0x60>
10014100:	4b0c      	ldr	r3, [pc, #48]	; (10014134 <__aeabi_i2f+0x8c>)
10014102:	401a      	ands	r2, r3
10014104:	239f      	movs	r3, #159	; 0x9f
10014106:	1a1b      	subs	r3, r3, r0
10014108:	0192      	lsls	r2, r2, #6
1001410a:	0a52      	lsrs	r2, r2, #9
1001410c:	b2d8      	uxtb	r0, r3
1001410e:	e7df      	b.n	100140d0 <__aeabi_i2f+0x28>
10014110:	2400      	movs	r4, #0
10014112:	2000      	movs	r0, #0
10014114:	2200      	movs	r2, #0
10014116:	e7db      	b.n	100140d0 <__aeabi_i2f+0x28>
10014118:	2205      	movs	r2, #5
1001411a:	002e      	movs	r6, r5
1001411c:	1a12      	subs	r2, r2, r0
1001411e:	21b9      	movs	r1, #185	; 0xb9
10014120:	40d6      	lsrs	r6, r2
10014122:	002a      	movs	r2, r5
10014124:	1ac9      	subs	r1, r1, r3
10014126:	408a      	lsls	r2, r1
10014128:	1e55      	subs	r5, r2, #1
1001412a:	41aa      	sbcs	r2, r5
1001412c:	0035      	movs	r5, r6
1001412e:	4315      	orrs	r5, r2
10014130:	e7db      	b.n	100140ea <__aeabi_i2f+0x42>
10014132:	46c0      	nop			; (mov r8, r8)
10014134:	fbffffff 	.word	0xfbffffff

10014138 <__aeabi_ui2f>:
10014138:	b570      	push	{r4, r5, r6, lr}
1001413a:	1e04      	subs	r4, r0, #0
1001413c:	d028      	beq.n	10014190 <__aeabi_ui2f+0x58>
1001413e:	f000 ff83 	bl	10015048 <__clzsi2>
10014142:	239e      	movs	r3, #158	; 0x9e
10014144:	1a1b      	subs	r3, r3, r0
10014146:	2b96      	cmp	r3, #150	; 0x96
10014148:	dc0a      	bgt.n	10014160 <__aeabi_ui2f+0x28>
1001414a:	2296      	movs	r2, #150	; 0x96
1001414c:	1ad2      	subs	r2, r2, r3
1001414e:	4094      	lsls	r4, r2
10014150:	0262      	lsls	r2, r4, #9
10014152:	0a52      	lsrs	r2, r2, #9
10014154:	b2d8      	uxtb	r0, r3
10014156:	0252      	lsls	r2, r2, #9
10014158:	0a52      	lsrs	r2, r2, #9
1001415a:	05c0      	lsls	r0, r0, #23
1001415c:	4310      	orrs	r0, r2
1001415e:	bd70      	pop	{r4, r5, r6, pc}
10014160:	2b99      	cmp	r3, #153	; 0x99
10014162:	dc18      	bgt.n	10014196 <__aeabi_ui2f+0x5e>
10014164:	2299      	movs	r2, #153	; 0x99
10014166:	1ad2      	subs	r2, r2, r3
10014168:	4094      	lsls	r4, r2
1001416a:	4a11      	ldr	r2, [pc, #68]	; (100141b0 <__aeabi_ui2f+0x78>)
1001416c:	4022      	ands	r2, r4
1001416e:	0761      	lsls	r1, r4, #29
10014170:	d004      	beq.n	1001417c <__aeabi_ui2f+0x44>
10014172:	210f      	movs	r1, #15
10014174:	400c      	ands	r4, r1
10014176:	2c04      	cmp	r4, #4
10014178:	d000      	beq.n	1001417c <__aeabi_ui2f+0x44>
1001417a:	3204      	adds	r2, #4
1001417c:	0151      	lsls	r1, r2, #5
1001417e:	d503      	bpl.n	10014188 <__aeabi_ui2f+0x50>
10014180:	4b0b      	ldr	r3, [pc, #44]	; (100141b0 <__aeabi_ui2f+0x78>)
10014182:	401a      	ands	r2, r3
10014184:	239f      	movs	r3, #159	; 0x9f
10014186:	1a1b      	subs	r3, r3, r0
10014188:	0192      	lsls	r2, r2, #6
1001418a:	0a52      	lsrs	r2, r2, #9
1001418c:	b2d8      	uxtb	r0, r3
1001418e:	e7e2      	b.n	10014156 <__aeabi_ui2f+0x1e>
10014190:	2000      	movs	r0, #0
10014192:	2200      	movs	r2, #0
10014194:	e7df      	b.n	10014156 <__aeabi_ui2f+0x1e>
10014196:	2205      	movs	r2, #5
10014198:	0025      	movs	r5, r4
1001419a:	1a12      	subs	r2, r2, r0
1001419c:	21b9      	movs	r1, #185	; 0xb9
1001419e:	40d5      	lsrs	r5, r2
100141a0:	0022      	movs	r2, r4
100141a2:	1ac9      	subs	r1, r1, r3
100141a4:	408a      	lsls	r2, r1
100141a6:	1e54      	subs	r4, r2, #1
100141a8:	41a2      	sbcs	r2, r4
100141aa:	002c      	movs	r4, r5
100141ac:	4314      	orrs	r4, r2
100141ae:	e7dc      	b.n	1001416a <__aeabi_ui2f+0x32>
100141b0:	fbffffff 	.word	0xfbffffff

100141b4 <__eqdf2>:
100141b4:	b5f0      	push	{r4, r5, r6, r7, lr}
100141b6:	465f      	mov	r7, fp
100141b8:	4656      	mov	r6, sl
100141ba:	464d      	mov	r5, r9
100141bc:	4644      	mov	r4, r8
100141be:	b4f0      	push	{r4, r5, r6, r7}
100141c0:	031f      	lsls	r7, r3, #12
100141c2:	005c      	lsls	r4, r3, #1
100141c4:	0fdb      	lsrs	r3, r3, #31
100141c6:	469a      	mov	sl, r3
100141c8:	4b19      	ldr	r3, [pc, #100]	; (10014230 <__eqdf2+0x7c>)
100141ca:	030e      	lsls	r6, r1, #12
100141cc:	004d      	lsls	r5, r1, #1
100141ce:	0fc9      	lsrs	r1, r1, #31
100141d0:	4680      	mov	r8, r0
100141d2:	0b36      	lsrs	r6, r6, #12
100141d4:	0d6d      	lsrs	r5, r5, #21
100141d6:	468b      	mov	fp, r1
100141d8:	4691      	mov	r9, r2
100141da:	0b3f      	lsrs	r7, r7, #12
100141dc:	0d64      	lsrs	r4, r4, #21
100141de:	429d      	cmp	r5, r3
100141e0:	d019      	beq.n	10014216 <__eqdf2+0x62>
100141e2:	4b13      	ldr	r3, [pc, #76]	; (10014230 <__eqdf2+0x7c>)
100141e4:	429c      	cmp	r4, r3
100141e6:	d01b      	beq.n	10014220 <__eqdf2+0x6c>
100141e8:	2301      	movs	r3, #1
100141ea:	42a5      	cmp	r5, r4
100141ec:	d006      	beq.n	100141fc <__eqdf2+0x48>
100141ee:	0018      	movs	r0, r3
100141f0:	bc3c      	pop	{r2, r3, r4, r5}
100141f2:	4690      	mov	r8, r2
100141f4:	4699      	mov	r9, r3
100141f6:	46a2      	mov	sl, r4
100141f8:	46ab      	mov	fp, r5
100141fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
100141fc:	42be      	cmp	r6, r7
100141fe:	d1f6      	bne.n	100141ee <__eqdf2+0x3a>
10014200:	45c8      	cmp	r8, r9
10014202:	d1f4      	bne.n	100141ee <__eqdf2+0x3a>
10014204:	45d3      	cmp	fp, sl
10014206:	d010      	beq.n	1001422a <__eqdf2+0x76>
10014208:	2d00      	cmp	r5, #0
1001420a:	d1f0      	bne.n	100141ee <__eqdf2+0x3a>
1001420c:	4330      	orrs	r0, r6
1001420e:	0003      	movs	r3, r0
10014210:	1e5a      	subs	r2, r3, #1
10014212:	4193      	sbcs	r3, r2
10014214:	e7eb      	b.n	100141ee <__eqdf2+0x3a>
10014216:	0031      	movs	r1, r6
10014218:	2301      	movs	r3, #1
1001421a:	4301      	orrs	r1, r0
1001421c:	d1e7      	bne.n	100141ee <__eqdf2+0x3a>
1001421e:	e7e0      	b.n	100141e2 <__eqdf2+0x2e>
10014220:	433a      	orrs	r2, r7
10014222:	2301      	movs	r3, #1
10014224:	2a00      	cmp	r2, #0
10014226:	d1e2      	bne.n	100141ee <__eqdf2+0x3a>
10014228:	e7de      	b.n	100141e8 <__eqdf2+0x34>
1001422a:	2300      	movs	r3, #0
1001422c:	e7df      	b.n	100141ee <__eqdf2+0x3a>
1001422e:	46c0      	nop			; (mov r8, r8)
10014230:	000007ff 	.word	0x000007ff

10014234 <__gedf2>:
10014234:	b5f0      	push	{r4, r5, r6, r7, lr}
10014236:	465f      	mov	r7, fp
10014238:	4644      	mov	r4, r8
1001423a:	4656      	mov	r6, sl
1001423c:	464d      	mov	r5, r9
1001423e:	b4f0      	push	{r4, r5, r6, r7}
10014240:	031f      	lsls	r7, r3, #12
10014242:	0b3c      	lsrs	r4, r7, #12
10014244:	4f2c      	ldr	r7, [pc, #176]	; (100142f8 <__gedf2+0xc4>)
10014246:	030e      	lsls	r6, r1, #12
10014248:	004d      	lsls	r5, r1, #1
1001424a:	46a3      	mov	fp, r4
1001424c:	005c      	lsls	r4, r3, #1
1001424e:	4684      	mov	ip, r0
10014250:	0b36      	lsrs	r6, r6, #12
10014252:	0d6d      	lsrs	r5, r5, #21
10014254:	0fc9      	lsrs	r1, r1, #31
10014256:	4690      	mov	r8, r2
10014258:	0d64      	lsrs	r4, r4, #21
1001425a:	0fdb      	lsrs	r3, r3, #31
1001425c:	42bd      	cmp	r5, r7
1001425e:	d02b      	beq.n	100142b8 <__gedf2+0x84>
10014260:	4f25      	ldr	r7, [pc, #148]	; (100142f8 <__gedf2+0xc4>)
10014262:	42bc      	cmp	r4, r7
10014264:	d02e      	beq.n	100142c4 <__gedf2+0x90>
10014266:	2d00      	cmp	r5, #0
10014268:	d10e      	bne.n	10014288 <__gedf2+0x54>
1001426a:	4330      	orrs	r0, r6
1001426c:	0007      	movs	r7, r0
1001426e:	4681      	mov	r9, r0
10014270:	4278      	negs	r0, r7
10014272:	4178      	adcs	r0, r7
10014274:	2c00      	cmp	r4, #0
10014276:	d117      	bne.n	100142a8 <__gedf2+0x74>
10014278:	465f      	mov	r7, fp
1001427a:	433a      	orrs	r2, r7
1001427c:	d114      	bne.n	100142a8 <__gedf2+0x74>
1001427e:	464b      	mov	r3, r9
10014280:	2000      	movs	r0, #0
10014282:	2b00      	cmp	r3, #0
10014284:	d00a      	beq.n	1001429c <__gedf2+0x68>
10014286:	e006      	b.n	10014296 <__gedf2+0x62>
10014288:	2c00      	cmp	r4, #0
1001428a:	d102      	bne.n	10014292 <__gedf2+0x5e>
1001428c:	4658      	mov	r0, fp
1001428e:	4302      	orrs	r2, r0
10014290:	d001      	beq.n	10014296 <__gedf2+0x62>
10014292:	4299      	cmp	r1, r3
10014294:	d01a      	beq.n	100142cc <__gedf2+0x98>
10014296:	2301      	movs	r3, #1
10014298:	4248      	negs	r0, r1
1001429a:	4318      	orrs	r0, r3
1001429c:	bc3c      	pop	{r2, r3, r4, r5}
1001429e:	4690      	mov	r8, r2
100142a0:	4699      	mov	r9, r3
100142a2:	46a2      	mov	sl, r4
100142a4:	46ab      	mov	fp, r5
100142a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
100142a8:	2800      	cmp	r0, #0
100142aa:	d0f2      	beq.n	10014292 <__gedf2+0x5e>
100142ac:	4258      	negs	r0, r3
100142ae:	4158      	adcs	r0, r3
100142b0:	2201      	movs	r2, #1
100142b2:	4240      	negs	r0, r0
100142b4:	4310      	orrs	r0, r2
100142b6:	e7f1      	b.n	1001429c <__gedf2+0x68>
100142b8:	0037      	movs	r7, r6
100142ba:	4307      	orrs	r7, r0
100142bc:	d0d0      	beq.n	10014260 <__gedf2+0x2c>
100142be:	2002      	movs	r0, #2
100142c0:	4240      	negs	r0, r0
100142c2:	e7eb      	b.n	1001429c <__gedf2+0x68>
100142c4:	465f      	mov	r7, fp
100142c6:	4317      	orrs	r7, r2
100142c8:	d0cd      	beq.n	10014266 <__gedf2+0x32>
100142ca:	e7f8      	b.n	100142be <__gedf2+0x8a>
100142cc:	42a5      	cmp	r5, r4
100142ce:	dce2      	bgt.n	10014296 <__gedf2+0x62>
100142d0:	db05      	blt.n	100142de <__gedf2+0xaa>
100142d2:	455e      	cmp	r6, fp
100142d4:	d8df      	bhi.n	10014296 <__gedf2+0x62>
100142d6:	d008      	beq.n	100142ea <__gedf2+0xb6>
100142d8:	2000      	movs	r0, #0
100142da:	455e      	cmp	r6, fp
100142dc:	d2de      	bcs.n	1001429c <__gedf2+0x68>
100142de:	4248      	negs	r0, r1
100142e0:	4148      	adcs	r0, r1
100142e2:	2301      	movs	r3, #1
100142e4:	4240      	negs	r0, r0
100142e6:	4318      	orrs	r0, r3
100142e8:	e7d8      	b.n	1001429c <__gedf2+0x68>
100142ea:	45c4      	cmp	ip, r8
100142ec:	d8d3      	bhi.n	10014296 <__gedf2+0x62>
100142ee:	2000      	movs	r0, #0
100142f0:	45c4      	cmp	ip, r8
100142f2:	d3f4      	bcc.n	100142de <__gedf2+0xaa>
100142f4:	e7d2      	b.n	1001429c <__gedf2+0x68>
100142f6:	46c0      	nop			; (mov r8, r8)
100142f8:	000007ff 	.word	0x000007ff

100142fc <__ledf2>:
100142fc:	b5f0      	push	{r4, r5, r6, r7, lr}
100142fe:	465f      	mov	r7, fp
10014300:	464d      	mov	r5, r9
10014302:	4644      	mov	r4, r8
10014304:	4656      	mov	r6, sl
10014306:	b4f0      	push	{r4, r5, r6, r7}
10014308:	031c      	lsls	r4, r3, #12
1001430a:	0b24      	lsrs	r4, r4, #12
1001430c:	46a4      	mov	ip, r4
1001430e:	4c2f      	ldr	r4, [pc, #188]	; (100143cc <__ledf2+0xd0>)
10014310:	030f      	lsls	r7, r1, #12
10014312:	004d      	lsls	r5, r1, #1
10014314:	005e      	lsls	r6, r3, #1
10014316:	0fc9      	lsrs	r1, r1, #31
10014318:	4680      	mov	r8, r0
1001431a:	0b3f      	lsrs	r7, r7, #12
1001431c:	0d6d      	lsrs	r5, r5, #21
1001431e:	468b      	mov	fp, r1
10014320:	4691      	mov	r9, r2
10014322:	0d76      	lsrs	r6, r6, #21
10014324:	0fdb      	lsrs	r3, r3, #31
10014326:	42a5      	cmp	r5, r4
10014328:	d020      	beq.n	1001436c <__ledf2+0x70>
1001432a:	4c28      	ldr	r4, [pc, #160]	; (100143cc <__ledf2+0xd0>)
1001432c:	42a6      	cmp	r6, r4
1001432e:	d022      	beq.n	10014376 <__ledf2+0x7a>
10014330:	2d00      	cmp	r5, #0
10014332:	d112      	bne.n	1001435a <__ledf2+0x5e>
10014334:	4338      	orrs	r0, r7
10014336:	4244      	negs	r4, r0
10014338:	4144      	adcs	r4, r0
1001433a:	2e00      	cmp	r6, #0
1001433c:	d020      	beq.n	10014380 <__ledf2+0x84>
1001433e:	2c00      	cmp	r4, #0
10014340:	d00d      	beq.n	1001435e <__ledf2+0x62>
10014342:	425c      	negs	r4, r3
10014344:	4163      	adcs	r3, r4
10014346:	2401      	movs	r4, #1
10014348:	425b      	negs	r3, r3
1001434a:	431c      	orrs	r4, r3
1001434c:	0020      	movs	r0, r4
1001434e:	bc3c      	pop	{r2, r3, r4, r5}
10014350:	4690      	mov	r8, r2
10014352:	4699      	mov	r9, r3
10014354:	46a2      	mov	sl, r4
10014356:	46ab      	mov	fp, r5
10014358:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001435a:	2e00      	cmp	r6, #0
1001435c:	d017      	beq.n	1001438e <__ledf2+0x92>
1001435e:	455b      	cmp	r3, fp
10014360:	d019      	beq.n	10014396 <__ledf2+0x9a>
10014362:	465b      	mov	r3, fp
10014364:	425c      	negs	r4, r3
10014366:	2301      	movs	r3, #1
10014368:	431c      	orrs	r4, r3
1001436a:	e7ef      	b.n	1001434c <__ledf2+0x50>
1001436c:	0039      	movs	r1, r7
1001436e:	2402      	movs	r4, #2
10014370:	4301      	orrs	r1, r0
10014372:	d1eb      	bne.n	1001434c <__ledf2+0x50>
10014374:	e7d9      	b.n	1001432a <__ledf2+0x2e>
10014376:	4661      	mov	r1, ip
10014378:	2402      	movs	r4, #2
1001437a:	4311      	orrs	r1, r2
1001437c:	d1e6      	bne.n	1001434c <__ledf2+0x50>
1001437e:	e7d7      	b.n	10014330 <__ledf2+0x34>
10014380:	4661      	mov	r1, ip
10014382:	430a      	orrs	r2, r1
10014384:	d1db      	bne.n	1001433e <__ledf2+0x42>
10014386:	2400      	movs	r4, #0
10014388:	2800      	cmp	r0, #0
1001438a:	d0df      	beq.n	1001434c <__ledf2+0x50>
1001438c:	e7e9      	b.n	10014362 <__ledf2+0x66>
1001438e:	4661      	mov	r1, ip
10014390:	430a      	orrs	r2, r1
10014392:	d1e4      	bne.n	1001435e <__ledf2+0x62>
10014394:	e7e5      	b.n	10014362 <__ledf2+0x66>
10014396:	42b5      	cmp	r5, r6
10014398:	dd03      	ble.n	100143a2 <__ledf2+0xa6>
1001439a:	2201      	movs	r2, #1
1001439c:	425c      	negs	r4, r3
1001439e:	4314      	orrs	r4, r2
100143a0:	e7d4      	b.n	1001434c <__ledf2+0x50>
100143a2:	42b5      	cmp	r5, r6
100143a4:	dbcd      	blt.n	10014342 <__ledf2+0x46>
100143a6:	4567      	cmp	r7, ip
100143a8:	d8db      	bhi.n	10014362 <__ledf2+0x66>
100143aa:	d009      	beq.n	100143c0 <__ledf2+0xc4>
100143ac:	2400      	movs	r4, #0
100143ae:	4567      	cmp	r7, ip
100143b0:	d2cc      	bcs.n	1001434c <__ledf2+0x50>
100143b2:	4659      	mov	r1, fp
100143b4:	424c      	negs	r4, r1
100143b6:	4161      	adcs	r1, r4
100143b8:	2401      	movs	r4, #1
100143ba:	4249      	negs	r1, r1
100143bc:	430c      	orrs	r4, r1
100143be:	e7c5      	b.n	1001434c <__ledf2+0x50>
100143c0:	45c8      	cmp	r8, r9
100143c2:	d8ce      	bhi.n	10014362 <__ledf2+0x66>
100143c4:	2400      	movs	r4, #0
100143c6:	45c8      	cmp	r8, r9
100143c8:	d3f3      	bcc.n	100143b2 <__ledf2+0xb6>
100143ca:	e7bf      	b.n	1001434c <__ledf2+0x50>
100143cc:	000007ff 	.word	0x000007ff

100143d0 <__aeabi_dmul>:
100143d0:	b5f0      	push	{r4, r5, r6, r7, lr}
100143d2:	465f      	mov	r7, fp
100143d4:	4656      	mov	r6, sl
100143d6:	464d      	mov	r5, r9
100143d8:	4644      	mov	r4, r8
100143da:	b4f0      	push	{r4, r5, r6, r7}
100143dc:	030d      	lsls	r5, r1, #12
100143de:	4699      	mov	r9, r3
100143e0:	004e      	lsls	r6, r1, #1
100143e2:	0b2b      	lsrs	r3, r5, #12
100143e4:	b087      	sub	sp, #28
100143e6:	0007      	movs	r7, r0
100143e8:	4692      	mov	sl, r2
100143ea:	4680      	mov	r8, r0
100143ec:	469b      	mov	fp, r3
100143ee:	0d76      	lsrs	r6, r6, #21
100143f0:	0fcc      	lsrs	r4, r1, #31
100143f2:	2e00      	cmp	r6, #0
100143f4:	d069      	beq.n	100144ca <__aeabi_dmul+0xfa>
100143f6:	4b6d      	ldr	r3, [pc, #436]	; (100145ac <__aeabi_dmul+0x1dc>)
100143f8:	429e      	cmp	r6, r3
100143fa:	d035      	beq.n	10014468 <__aeabi_dmul+0x98>
100143fc:	465b      	mov	r3, fp
100143fe:	2280      	movs	r2, #128	; 0x80
10014400:	00dd      	lsls	r5, r3, #3
10014402:	0412      	lsls	r2, r2, #16
10014404:	0f43      	lsrs	r3, r0, #29
10014406:	4313      	orrs	r3, r2
10014408:	432b      	orrs	r3, r5
1001440a:	469b      	mov	fp, r3
1001440c:	00c3      	lsls	r3, r0, #3
1001440e:	4698      	mov	r8, r3
10014410:	4b67      	ldr	r3, [pc, #412]	; (100145b0 <__aeabi_dmul+0x1e0>)
10014412:	2700      	movs	r7, #0
10014414:	469c      	mov	ip, r3
10014416:	2300      	movs	r3, #0
10014418:	4466      	add	r6, ip
1001441a:	9301      	str	r3, [sp, #4]
1001441c:	464a      	mov	r2, r9
1001441e:	0315      	lsls	r5, r2, #12
10014420:	0050      	lsls	r0, r2, #1
10014422:	0fd2      	lsrs	r2, r2, #31
10014424:	4653      	mov	r3, sl
10014426:	0b2d      	lsrs	r5, r5, #12
10014428:	0d40      	lsrs	r0, r0, #21
1001442a:	4691      	mov	r9, r2
1001442c:	d100      	bne.n	10014430 <__aeabi_dmul+0x60>
1001442e:	e076      	b.n	1001451e <__aeabi_dmul+0x14e>
10014430:	4a5e      	ldr	r2, [pc, #376]	; (100145ac <__aeabi_dmul+0x1dc>)
10014432:	4290      	cmp	r0, r2
10014434:	d06c      	beq.n	10014510 <__aeabi_dmul+0x140>
10014436:	2280      	movs	r2, #128	; 0x80
10014438:	0f5b      	lsrs	r3, r3, #29
1001443a:	0412      	lsls	r2, r2, #16
1001443c:	4313      	orrs	r3, r2
1001443e:	4a5c      	ldr	r2, [pc, #368]	; (100145b0 <__aeabi_dmul+0x1e0>)
10014440:	00ed      	lsls	r5, r5, #3
10014442:	4694      	mov	ip, r2
10014444:	431d      	orrs	r5, r3
10014446:	4653      	mov	r3, sl
10014448:	2200      	movs	r2, #0
1001444a:	00db      	lsls	r3, r3, #3
1001444c:	4460      	add	r0, ip
1001444e:	4649      	mov	r1, r9
10014450:	1836      	adds	r6, r6, r0
10014452:	1c70      	adds	r0, r6, #1
10014454:	4061      	eors	r1, r4
10014456:	9002      	str	r0, [sp, #8]
10014458:	4317      	orrs	r7, r2
1001445a:	2f0f      	cmp	r7, #15
1001445c:	d900      	bls.n	10014460 <__aeabi_dmul+0x90>
1001445e:	e0af      	b.n	100145c0 <__aeabi_dmul+0x1f0>
10014460:	4854      	ldr	r0, [pc, #336]	; (100145b4 <__aeabi_dmul+0x1e4>)
10014462:	00bf      	lsls	r7, r7, #2
10014464:	59c7      	ldr	r7, [r0, r7]
10014466:	46bf      	mov	pc, r7
10014468:	465b      	mov	r3, fp
1001446a:	431f      	orrs	r7, r3
1001446c:	d000      	beq.n	10014470 <__aeabi_dmul+0xa0>
1001446e:	e088      	b.n	10014582 <__aeabi_dmul+0x1b2>
10014470:	2300      	movs	r3, #0
10014472:	469b      	mov	fp, r3
10014474:	4698      	mov	r8, r3
10014476:	3302      	adds	r3, #2
10014478:	2708      	movs	r7, #8
1001447a:	9301      	str	r3, [sp, #4]
1001447c:	e7ce      	b.n	1001441c <__aeabi_dmul+0x4c>
1001447e:	4649      	mov	r1, r9
10014480:	2a02      	cmp	r2, #2
10014482:	d06a      	beq.n	1001455a <__aeabi_dmul+0x18a>
10014484:	2a03      	cmp	r2, #3
10014486:	d100      	bne.n	1001448a <__aeabi_dmul+0xba>
10014488:	e209      	b.n	1001489e <__aeabi_dmul+0x4ce>
1001448a:	2a01      	cmp	r2, #1
1001448c:	d000      	beq.n	10014490 <__aeabi_dmul+0xc0>
1001448e:	e1bb      	b.n	10014808 <__aeabi_dmul+0x438>
10014490:	4011      	ands	r1, r2
10014492:	2200      	movs	r2, #0
10014494:	2300      	movs	r3, #0
10014496:	2500      	movs	r5, #0
10014498:	4690      	mov	r8, r2
1001449a:	b2cc      	uxtb	r4, r1
1001449c:	2100      	movs	r1, #0
1001449e:	032d      	lsls	r5, r5, #12
100144a0:	0d0a      	lsrs	r2, r1, #20
100144a2:	0512      	lsls	r2, r2, #20
100144a4:	0b2d      	lsrs	r5, r5, #12
100144a6:	4315      	orrs	r5, r2
100144a8:	4a43      	ldr	r2, [pc, #268]	; (100145b8 <__aeabi_dmul+0x1e8>)
100144aa:	051b      	lsls	r3, r3, #20
100144ac:	4015      	ands	r5, r2
100144ae:	431d      	orrs	r5, r3
100144b0:	006d      	lsls	r5, r5, #1
100144b2:	07e4      	lsls	r4, r4, #31
100144b4:	086d      	lsrs	r5, r5, #1
100144b6:	4325      	orrs	r5, r4
100144b8:	4640      	mov	r0, r8
100144ba:	0029      	movs	r1, r5
100144bc:	b007      	add	sp, #28
100144be:	bc3c      	pop	{r2, r3, r4, r5}
100144c0:	4690      	mov	r8, r2
100144c2:	4699      	mov	r9, r3
100144c4:	46a2      	mov	sl, r4
100144c6:	46ab      	mov	fp, r5
100144c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
100144ca:	4303      	orrs	r3, r0
100144cc:	d052      	beq.n	10014574 <__aeabi_dmul+0x1a4>
100144ce:	465b      	mov	r3, fp
100144d0:	2b00      	cmp	r3, #0
100144d2:	d100      	bne.n	100144d6 <__aeabi_dmul+0x106>
100144d4:	e18a      	b.n	100147ec <__aeabi_dmul+0x41c>
100144d6:	4658      	mov	r0, fp
100144d8:	f000 fdb6 	bl	10015048 <__clzsi2>
100144dc:	0003      	movs	r3, r0
100144de:	3b0b      	subs	r3, #11
100144e0:	2b1c      	cmp	r3, #28
100144e2:	dd00      	ble.n	100144e6 <__aeabi_dmul+0x116>
100144e4:	e17b      	b.n	100147de <__aeabi_dmul+0x40e>
100144e6:	221d      	movs	r2, #29
100144e8:	1ad3      	subs	r3, r2, r3
100144ea:	003a      	movs	r2, r7
100144ec:	0001      	movs	r1, r0
100144ee:	465d      	mov	r5, fp
100144f0:	40da      	lsrs	r2, r3
100144f2:	3908      	subs	r1, #8
100144f4:	408d      	lsls	r5, r1
100144f6:	0013      	movs	r3, r2
100144f8:	408f      	lsls	r7, r1
100144fa:	432b      	orrs	r3, r5
100144fc:	469b      	mov	fp, r3
100144fe:	46b8      	mov	r8, r7
10014500:	4b2e      	ldr	r3, [pc, #184]	; (100145bc <__aeabi_dmul+0x1ec>)
10014502:	2700      	movs	r7, #0
10014504:	469c      	mov	ip, r3
10014506:	2300      	movs	r3, #0
10014508:	4460      	add	r0, ip
1001450a:	4246      	negs	r6, r0
1001450c:	9301      	str	r3, [sp, #4]
1001450e:	e785      	b.n	1001441c <__aeabi_dmul+0x4c>
10014510:	4652      	mov	r2, sl
10014512:	432a      	orrs	r2, r5
10014514:	d12c      	bne.n	10014570 <__aeabi_dmul+0x1a0>
10014516:	2500      	movs	r5, #0
10014518:	2300      	movs	r3, #0
1001451a:	2202      	movs	r2, #2
1001451c:	e797      	b.n	1001444e <__aeabi_dmul+0x7e>
1001451e:	4652      	mov	r2, sl
10014520:	432a      	orrs	r2, r5
10014522:	d021      	beq.n	10014568 <__aeabi_dmul+0x198>
10014524:	2d00      	cmp	r5, #0
10014526:	d100      	bne.n	1001452a <__aeabi_dmul+0x15a>
10014528:	e154      	b.n	100147d4 <__aeabi_dmul+0x404>
1001452a:	0028      	movs	r0, r5
1001452c:	f000 fd8c 	bl	10015048 <__clzsi2>
10014530:	0003      	movs	r3, r0
10014532:	3b0b      	subs	r3, #11
10014534:	2b1c      	cmp	r3, #28
10014536:	dd00      	ble.n	1001453a <__aeabi_dmul+0x16a>
10014538:	e146      	b.n	100147c8 <__aeabi_dmul+0x3f8>
1001453a:	211d      	movs	r1, #29
1001453c:	1acb      	subs	r3, r1, r3
1001453e:	4651      	mov	r1, sl
10014540:	0002      	movs	r2, r0
10014542:	40d9      	lsrs	r1, r3
10014544:	4653      	mov	r3, sl
10014546:	3a08      	subs	r2, #8
10014548:	4095      	lsls	r5, r2
1001454a:	4093      	lsls	r3, r2
1001454c:	430d      	orrs	r5, r1
1001454e:	4a1b      	ldr	r2, [pc, #108]	; (100145bc <__aeabi_dmul+0x1ec>)
10014550:	4694      	mov	ip, r2
10014552:	4460      	add	r0, ip
10014554:	4240      	negs	r0, r0
10014556:	2200      	movs	r2, #0
10014558:	e779      	b.n	1001444e <__aeabi_dmul+0x7e>
1001455a:	2401      	movs	r4, #1
1001455c:	2200      	movs	r2, #0
1001455e:	400c      	ands	r4, r1
10014560:	4b12      	ldr	r3, [pc, #72]	; (100145ac <__aeabi_dmul+0x1dc>)
10014562:	2500      	movs	r5, #0
10014564:	4690      	mov	r8, r2
10014566:	e799      	b.n	1001449c <__aeabi_dmul+0xcc>
10014568:	2500      	movs	r5, #0
1001456a:	2300      	movs	r3, #0
1001456c:	2201      	movs	r2, #1
1001456e:	e76e      	b.n	1001444e <__aeabi_dmul+0x7e>
10014570:	2203      	movs	r2, #3
10014572:	e76c      	b.n	1001444e <__aeabi_dmul+0x7e>
10014574:	2300      	movs	r3, #0
10014576:	469b      	mov	fp, r3
10014578:	4698      	mov	r8, r3
1001457a:	3301      	adds	r3, #1
1001457c:	2704      	movs	r7, #4
1001457e:	9301      	str	r3, [sp, #4]
10014580:	e74c      	b.n	1001441c <__aeabi_dmul+0x4c>
10014582:	2303      	movs	r3, #3
10014584:	270c      	movs	r7, #12
10014586:	9301      	str	r3, [sp, #4]
10014588:	e748      	b.n	1001441c <__aeabi_dmul+0x4c>
1001458a:	2300      	movs	r3, #0
1001458c:	2580      	movs	r5, #128	; 0x80
1001458e:	4698      	mov	r8, r3
10014590:	2400      	movs	r4, #0
10014592:	032d      	lsls	r5, r5, #12
10014594:	4b05      	ldr	r3, [pc, #20]	; (100145ac <__aeabi_dmul+0x1dc>)
10014596:	e781      	b.n	1001449c <__aeabi_dmul+0xcc>
10014598:	465d      	mov	r5, fp
1001459a:	4643      	mov	r3, r8
1001459c:	9a01      	ldr	r2, [sp, #4]
1001459e:	e76f      	b.n	10014480 <__aeabi_dmul+0xb0>
100145a0:	465d      	mov	r5, fp
100145a2:	4643      	mov	r3, r8
100145a4:	0021      	movs	r1, r4
100145a6:	9a01      	ldr	r2, [sp, #4]
100145a8:	e76a      	b.n	10014480 <__aeabi_dmul+0xb0>
100145aa:	46c0      	nop			; (mov r8, r8)
100145ac:	000007ff 	.word	0x000007ff
100145b0:	fffffc01 	.word	0xfffffc01
100145b4:	10018248 	.word	0x10018248
100145b8:	800fffff 	.word	0x800fffff
100145bc:	000003f3 	.word	0x000003f3
100145c0:	4642      	mov	r2, r8
100145c2:	0c12      	lsrs	r2, r2, #16
100145c4:	4691      	mov	r9, r2
100145c6:	0c1a      	lsrs	r2, r3, #16
100145c8:	4694      	mov	ip, r2
100145ca:	4642      	mov	r2, r8
100145cc:	0417      	lsls	r7, r2, #16
100145ce:	464a      	mov	r2, r9
100145d0:	041b      	lsls	r3, r3, #16
100145d2:	0c1b      	lsrs	r3, r3, #16
100145d4:	435a      	muls	r2, r3
100145d6:	4660      	mov	r0, ip
100145d8:	4690      	mov	r8, r2
100145da:	464a      	mov	r2, r9
100145dc:	4342      	muls	r2, r0
100145de:	0010      	movs	r0, r2
100145e0:	9203      	str	r2, [sp, #12]
100145e2:	4662      	mov	r2, ip
100145e4:	001c      	movs	r4, r3
100145e6:	0c3f      	lsrs	r7, r7, #16
100145e8:	437a      	muls	r2, r7
100145ea:	437c      	muls	r4, r7
100145ec:	4442      	add	r2, r8
100145ee:	9201      	str	r2, [sp, #4]
100145f0:	0c22      	lsrs	r2, r4, #16
100145f2:	4692      	mov	sl, r2
100145f4:	9a01      	ldr	r2, [sp, #4]
100145f6:	4452      	add	r2, sl
100145f8:	4590      	cmp	r8, r2
100145fa:	d906      	bls.n	1001460a <__aeabi_dmul+0x23a>
100145fc:	4682      	mov	sl, r0
100145fe:	2080      	movs	r0, #128	; 0x80
10014600:	0240      	lsls	r0, r0, #9
10014602:	4680      	mov	r8, r0
10014604:	44c2      	add	sl, r8
10014606:	4650      	mov	r0, sl
10014608:	9003      	str	r0, [sp, #12]
1001460a:	0c10      	lsrs	r0, r2, #16
1001460c:	9004      	str	r0, [sp, #16]
1001460e:	4648      	mov	r0, r9
10014610:	0424      	lsls	r4, r4, #16
10014612:	0c24      	lsrs	r4, r4, #16
10014614:	0412      	lsls	r2, r2, #16
10014616:	1912      	adds	r2, r2, r4
10014618:	9205      	str	r2, [sp, #20]
1001461a:	0c2a      	lsrs	r2, r5, #16
1001461c:	042d      	lsls	r5, r5, #16
1001461e:	0c2d      	lsrs	r5, r5, #16
10014620:	4368      	muls	r0, r5
10014622:	002c      	movs	r4, r5
10014624:	4682      	mov	sl, r0
10014626:	4648      	mov	r0, r9
10014628:	437c      	muls	r4, r7
1001462a:	4350      	muls	r0, r2
1001462c:	4681      	mov	r9, r0
1001462e:	0c20      	lsrs	r0, r4, #16
10014630:	4680      	mov	r8, r0
10014632:	4357      	muls	r7, r2
10014634:	4457      	add	r7, sl
10014636:	4447      	add	r7, r8
10014638:	45ba      	cmp	sl, r7
1001463a:	d903      	bls.n	10014644 <__aeabi_dmul+0x274>
1001463c:	2080      	movs	r0, #128	; 0x80
1001463e:	0240      	lsls	r0, r0, #9
10014640:	4680      	mov	r8, r0
10014642:	44c1      	add	r9, r8
10014644:	0c38      	lsrs	r0, r7, #16
10014646:	043f      	lsls	r7, r7, #16
10014648:	46b8      	mov	r8, r7
1001464a:	4448      	add	r0, r9
1001464c:	0424      	lsls	r4, r4, #16
1001464e:	0c24      	lsrs	r4, r4, #16
10014650:	9001      	str	r0, [sp, #4]
10014652:	9804      	ldr	r0, [sp, #16]
10014654:	44a0      	add	r8, r4
10014656:	4440      	add	r0, r8
10014658:	9004      	str	r0, [sp, #16]
1001465a:	4658      	mov	r0, fp
1001465c:	0c00      	lsrs	r0, r0, #16
1001465e:	4681      	mov	r9, r0
10014660:	4658      	mov	r0, fp
10014662:	0404      	lsls	r4, r0, #16
10014664:	0c20      	lsrs	r0, r4, #16
10014666:	4682      	mov	sl, r0
10014668:	0007      	movs	r7, r0
1001466a:	4648      	mov	r0, r9
1001466c:	435f      	muls	r7, r3
1001466e:	464c      	mov	r4, r9
10014670:	4343      	muls	r3, r0
10014672:	4660      	mov	r0, ip
10014674:	4360      	muls	r0, r4
10014676:	4664      	mov	r4, ip
10014678:	4683      	mov	fp, r0
1001467a:	4650      	mov	r0, sl
1001467c:	4344      	muls	r4, r0
1001467e:	0c38      	lsrs	r0, r7, #16
10014680:	4684      	mov	ip, r0
10014682:	18e4      	adds	r4, r4, r3
10014684:	4464      	add	r4, ip
10014686:	42a3      	cmp	r3, r4
10014688:	d903      	bls.n	10014692 <__aeabi_dmul+0x2c2>
1001468a:	2380      	movs	r3, #128	; 0x80
1001468c:	025b      	lsls	r3, r3, #9
1001468e:	469c      	mov	ip, r3
10014690:	44e3      	add	fp, ip
10014692:	4648      	mov	r0, r9
10014694:	043f      	lsls	r7, r7, #16
10014696:	0c23      	lsrs	r3, r4, #16
10014698:	0c3f      	lsrs	r7, r7, #16
1001469a:	0424      	lsls	r4, r4, #16
1001469c:	19e4      	adds	r4, r4, r7
1001469e:	4657      	mov	r7, sl
100146a0:	4368      	muls	r0, r5
100146a2:	436f      	muls	r7, r5
100146a4:	4684      	mov	ip, r0
100146a6:	464d      	mov	r5, r9
100146a8:	4650      	mov	r0, sl
100146aa:	4355      	muls	r5, r2
100146ac:	4342      	muls	r2, r0
100146ae:	0c38      	lsrs	r0, r7, #16
100146b0:	4681      	mov	r9, r0
100146b2:	4462      	add	r2, ip
100146b4:	444a      	add	r2, r9
100146b6:	445b      	add	r3, fp
100146b8:	4594      	cmp	ip, r2
100146ba:	d903      	bls.n	100146c4 <__aeabi_dmul+0x2f4>
100146bc:	2080      	movs	r0, #128	; 0x80
100146be:	0240      	lsls	r0, r0, #9
100146c0:	4684      	mov	ip, r0
100146c2:	4465      	add	r5, ip
100146c4:	9803      	ldr	r0, [sp, #12]
100146c6:	043f      	lsls	r7, r7, #16
100146c8:	4683      	mov	fp, r0
100146ca:	9804      	ldr	r0, [sp, #16]
100146cc:	0c3f      	lsrs	r7, r7, #16
100146ce:	4684      	mov	ip, r0
100146d0:	44e3      	add	fp, ip
100146d2:	45c3      	cmp	fp, r8
100146d4:	4180      	sbcs	r0, r0
100146d6:	4240      	negs	r0, r0
100146d8:	4682      	mov	sl, r0
100146da:	0410      	lsls	r0, r2, #16
100146dc:	4684      	mov	ip, r0
100146de:	9801      	ldr	r0, [sp, #4]
100146e0:	4467      	add	r7, ip
100146e2:	4684      	mov	ip, r0
100146e4:	4467      	add	r7, ip
100146e6:	44a3      	add	fp, r4
100146e8:	46bc      	mov	ip, r7
100146ea:	45a3      	cmp	fp, r4
100146ec:	41a4      	sbcs	r4, r4
100146ee:	4699      	mov	r9, r3
100146f0:	44d4      	add	ip, sl
100146f2:	4264      	negs	r4, r4
100146f4:	4287      	cmp	r7, r0
100146f6:	41bf      	sbcs	r7, r7
100146f8:	45d4      	cmp	ip, sl
100146fa:	4180      	sbcs	r0, r0
100146fc:	44e1      	add	r9, ip
100146fe:	46a0      	mov	r8, r4
10014700:	4599      	cmp	r9, r3
10014702:	419b      	sbcs	r3, r3
10014704:	427f      	negs	r7, r7
10014706:	4240      	negs	r0, r0
10014708:	44c8      	add	r8, r9
1001470a:	4307      	orrs	r7, r0
1001470c:	0c12      	lsrs	r2, r2, #16
1001470e:	18ba      	adds	r2, r7, r2
10014710:	45a0      	cmp	r8, r4
10014712:	41a4      	sbcs	r4, r4
10014714:	425f      	negs	r7, r3
10014716:	003b      	movs	r3, r7
10014718:	4264      	negs	r4, r4
1001471a:	4323      	orrs	r3, r4
1001471c:	18d7      	adds	r7, r2, r3
1001471e:	4643      	mov	r3, r8
10014720:	197d      	adds	r5, r7, r5
10014722:	0ddb      	lsrs	r3, r3, #23
10014724:	026d      	lsls	r5, r5, #9
10014726:	431d      	orrs	r5, r3
10014728:	465b      	mov	r3, fp
1001472a:	025a      	lsls	r2, r3, #9
1001472c:	9b05      	ldr	r3, [sp, #20]
1001472e:	431a      	orrs	r2, r3
10014730:	1e53      	subs	r3, r2, #1
10014732:	419a      	sbcs	r2, r3
10014734:	465b      	mov	r3, fp
10014736:	0ddb      	lsrs	r3, r3, #23
10014738:	431a      	orrs	r2, r3
1001473a:	4643      	mov	r3, r8
1001473c:	025b      	lsls	r3, r3, #9
1001473e:	4313      	orrs	r3, r2
10014740:	01ea      	lsls	r2, r5, #7
10014742:	d507      	bpl.n	10014754 <__aeabi_dmul+0x384>
10014744:	2201      	movs	r2, #1
10014746:	085c      	lsrs	r4, r3, #1
10014748:	4013      	ands	r3, r2
1001474a:	4323      	orrs	r3, r4
1001474c:	07ea      	lsls	r2, r5, #31
1001474e:	9e02      	ldr	r6, [sp, #8]
10014750:	4313      	orrs	r3, r2
10014752:	086d      	lsrs	r5, r5, #1
10014754:	4a57      	ldr	r2, [pc, #348]	; (100148b4 <__aeabi_dmul+0x4e4>)
10014756:	18b2      	adds	r2, r6, r2
10014758:	2a00      	cmp	r2, #0
1001475a:	dd4b      	ble.n	100147f4 <__aeabi_dmul+0x424>
1001475c:	0758      	lsls	r0, r3, #29
1001475e:	d009      	beq.n	10014774 <__aeabi_dmul+0x3a4>
10014760:	200f      	movs	r0, #15
10014762:	4018      	ands	r0, r3
10014764:	2804      	cmp	r0, #4
10014766:	d005      	beq.n	10014774 <__aeabi_dmul+0x3a4>
10014768:	1d18      	adds	r0, r3, #4
1001476a:	4298      	cmp	r0, r3
1001476c:	419b      	sbcs	r3, r3
1001476e:	425b      	negs	r3, r3
10014770:	18ed      	adds	r5, r5, r3
10014772:	0003      	movs	r3, r0
10014774:	01e8      	lsls	r0, r5, #7
10014776:	d504      	bpl.n	10014782 <__aeabi_dmul+0x3b2>
10014778:	4a4f      	ldr	r2, [pc, #316]	; (100148b8 <__aeabi_dmul+0x4e8>)
1001477a:	4015      	ands	r5, r2
1001477c:	2280      	movs	r2, #128	; 0x80
1001477e:	00d2      	lsls	r2, r2, #3
10014780:	18b2      	adds	r2, r6, r2
10014782:	484e      	ldr	r0, [pc, #312]	; (100148bc <__aeabi_dmul+0x4ec>)
10014784:	4282      	cmp	r2, r0
10014786:	dd00      	ble.n	1001478a <__aeabi_dmul+0x3ba>
10014788:	e6e7      	b.n	1001455a <__aeabi_dmul+0x18a>
1001478a:	2401      	movs	r4, #1
1001478c:	08db      	lsrs	r3, r3, #3
1001478e:	0768      	lsls	r0, r5, #29
10014790:	4318      	orrs	r0, r3
10014792:	026d      	lsls	r5, r5, #9
10014794:	0553      	lsls	r3, r2, #21
10014796:	4680      	mov	r8, r0
10014798:	0b2d      	lsrs	r5, r5, #12
1001479a:	0d5b      	lsrs	r3, r3, #21
1001479c:	400c      	ands	r4, r1
1001479e:	e67d      	b.n	1001449c <__aeabi_dmul+0xcc>
100147a0:	2280      	movs	r2, #128	; 0x80
100147a2:	4659      	mov	r1, fp
100147a4:	0312      	lsls	r2, r2, #12
100147a6:	4211      	tst	r1, r2
100147a8:	d008      	beq.n	100147bc <__aeabi_dmul+0x3ec>
100147aa:	4215      	tst	r5, r2
100147ac:	d106      	bne.n	100147bc <__aeabi_dmul+0x3ec>
100147ae:	4315      	orrs	r5, r2
100147b0:	032d      	lsls	r5, r5, #12
100147b2:	4698      	mov	r8, r3
100147b4:	0b2d      	lsrs	r5, r5, #12
100147b6:	464c      	mov	r4, r9
100147b8:	4b41      	ldr	r3, [pc, #260]	; (100148c0 <__aeabi_dmul+0x4f0>)
100147ba:	e66f      	b.n	1001449c <__aeabi_dmul+0xcc>
100147bc:	465d      	mov	r5, fp
100147be:	4315      	orrs	r5, r2
100147c0:	032d      	lsls	r5, r5, #12
100147c2:	0b2d      	lsrs	r5, r5, #12
100147c4:	4b3e      	ldr	r3, [pc, #248]	; (100148c0 <__aeabi_dmul+0x4f0>)
100147c6:	e669      	b.n	1001449c <__aeabi_dmul+0xcc>
100147c8:	0003      	movs	r3, r0
100147ca:	4655      	mov	r5, sl
100147cc:	3b28      	subs	r3, #40	; 0x28
100147ce:	409d      	lsls	r5, r3
100147d0:	2300      	movs	r3, #0
100147d2:	e6bc      	b.n	1001454e <__aeabi_dmul+0x17e>
100147d4:	4650      	mov	r0, sl
100147d6:	f000 fc37 	bl	10015048 <__clzsi2>
100147da:	3020      	adds	r0, #32
100147dc:	e6a8      	b.n	10014530 <__aeabi_dmul+0x160>
100147de:	0003      	movs	r3, r0
100147e0:	3b28      	subs	r3, #40	; 0x28
100147e2:	409f      	lsls	r7, r3
100147e4:	2300      	movs	r3, #0
100147e6:	46bb      	mov	fp, r7
100147e8:	4698      	mov	r8, r3
100147ea:	e689      	b.n	10014500 <__aeabi_dmul+0x130>
100147ec:	f000 fc2c 	bl	10015048 <__clzsi2>
100147f0:	3020      	adds	r0, #32
100147f2:	e673      	b.n	100144dc <__aeabi_dmul+0x10c>
100147f4:	2401      	movs	r4, #1
100147f6:	1aa6      	subs	r6, r4, r2
100147f8:	2e38      	cmp	r6, #56	; 0x38
100147fa:	dd07      	ble.n	1001480c <__aeabi_dmul+0x43c>
100147fc:	2200      	movs	r2, #0
100147fe:	400c      	ands	r4, r1
10014800:	2300      	movs	r3, #0
10014802:	2500      	movs	r5, #0
10014804:	4690      	mov	r8, r2
10014806:	e649      	b.n	1001449c <__aeabi_dmul+0xcc>
10014808:	9e02      	ldr	r6, [sp, #8]
1001480a:	e7a3      	b.n	10014754 <__aeabi_dmul+0x384>
1001480c:	2e1f      	cmp	r6, #31
1001480e:	dc20      	bgt.n	10014852 <__aeabi_dmul+0x482>
10014810:	2220      	movs	r2, #32
10014812:	002c      	movs	r4, r5
10014814:	0018      	movs	r0, r3
10014816:	1b92      	subs	r2, r2, r6
10014818:	40f0      	lsrs	r0, r6
1001481a:	4094      	lsls	r4, r2
1001481c:	4093      	lsls	r3, r2
1001481e:	4304      	orrs	r4, r0
10014820:	1e58      	subs	r0, r3, #1
10014822:	4183      	sbcs	r3, r0
10014824:	431c      	orrs	r4, r3
10014826:	40f5      	lsrs	r5, r6
10014828:	0763      	lsls	r3, r4, #29
1001482a:	d009      	beq.n	10014840 <__aeabi_dmul+0x470>
1001482c:	230f      	movs	r3, #15
1001482e:	4023      	ands	r3, r4
10014830:	2b04      	cmp	r3, #4
10014832:	d005      	beq.n	10014840 <__aeabi_dmul+0x470>
10014834:	0023      	movs	r3, r4
10014836:	1d1c      	adds	r4, r3, #4
10014838:	429c      	cmp	r4, r3
1001483a:	4192      	sbcs	r2, r2
1001483c:	4252      	negs	r2, r2
1001483e:	18ad      	adds	r5, r5, r2
10014840:	022b      	lsls	r3, r5, #8
10014842:	d51f      	bpl.n	10014884 <__aeabi_dmul+0x4b4>
10014844:	2401      	movs	r4, #1
10014846:	2200      	movs	r2, #0
10014848:	400c      	ands	r4, r1
1001484a:	2301      	movs	r3, #1
1001484c:	2500      	movs	r5, #0
1001484e:	4690      	mov	r8, r2
10014850:	e624      	b.n	1001449c <__aeabi_dmul+0xcc>
10014852:	201f      	movs	r0, #31
10014854:	002c      	movs	r4, r5
10014856:	4240      	negs	r0, r0
10014858:	1a82      	subs	r2, r0, r2
1001485a:	40d4      	lsrs	r4, r2
1001485c:	2e20      	cmp	r6, #32
1001485e:	d01c      	beq.n	1001489a <__aeabi_dmul+0x4ca>
10014860:	2240      	movs	r2, #64	; 0x40
10014862:	1b96      	subs	r6, r2, r6
10014864:	40b5      	lsls	r5, r6
10014866:	432b      	orrs	r3, r5
10014868:	1e58      	subs	r0, r3, #1
1001486a:	4183      	sbcs	r3, r0
1001486c:	2007      	movs	r0, #7
1001486e:	4323      	orrs	r3, r4
10014870:	4018      	ands	r0, r3
10014872:	2500      	movs	r5, #0
10014874:	2800      	cmp	r0, #0
10014876:	d009      	beq.n	1001488c <__aeabi_dmul+0x4bc>
10014878:	220f      	movs	r2, #15
1001487a:	2500      	movs	r5, #0
1001487c:	401a      	ands	r2, r3
1001487e:	001c      	movs	r4, r3
10014880:	2a04      	cmp	r2, #4
10014882:	d1d8      	bne.n	10014836 <__aeabi_dmul+0x466>
10014884:	0023      	movs	r3, r4
10014886:	0768      	lsls	r0, r5, #29
10014888:	026d      	lsls	r5, r5, #9
1001488a:	0b2d      	lsrs	r5, r5, #12
1001488c:	2401      	movs	r4, #1
1001488e:	08db      	lsrs	r3, r3, #3
10014890:	4303      	orrs	r3, r0
10014892:	4698      	mov	r8, r3
10014894:	400c      	ands	r4, r1
10014896:	2300      	movs	r3, #0
10014898:	e600      	b.n	1001449c <__aeabi_dmul+0xcc>
1001489a:	2500      	movs	r5, #0
1001489c:	e7e3      	b.n	10014866 <__aeabi_dmul+0x496>
1001489e:	2280      	movs	r2, #128	; 0x80
100148a0:	2401      	movs	r4, #1
100148a2:	0312      	lsls	r2, r2, #12
100148a4:	4315      	orrs	r5, r2
100148a6:	032d      	lsls	r5, r5, #12
100148a8:	4698      	mov	r8, r3
100148aa:	0b2d      	lsrs	r5, r5, #12
100148ac:	400c      	ands	r4, r1
100148ae:	4b04      	ldr	r3, [pc, #16]	; (100148c0 <__aeabi_dmul+0x4f0>)
100148b0:	e5f4      	b.n	1001449c <__aeabi_dmul+0xcc>
100148b2:	46c0      	nop			; (mov r8, r8)
100148b4:	000003ff 	.word	0x000003ff
100148b8:	feffffff 	.word	0xfeffffff
100148bc:	000007fe 	.word	0x000007fe
100148c0:	000007ff 	.word	0x000007ff

100148c4 <__aeabi_dsub>:
100148c4:	b5f0      	push	{r4, r5, r6, r7, lr}
100148c6:	4657      	mov	r7, sl
100148c8:	464e      	mov	r6, r9
100148ca:	4645      	mov	r5, r8
100148cc:	b4e0      	push	{r5, r6, r7}
100148ce:	000e      	movs	r6, r1
100148d0:	0011      	movs	r1, r2
100148d2:	0ff2      	lsrs	r2, r6, #31
100148d4:	4692      	mov	sl, r2
100148d6:	00c5      	lsls	r5, r0, #3
100148d8:	0f42      	lsrs	r2, r0, #29
100148da:	0318      	lsls	r0, r3, #12
100148dc:	0337      	lsls	r7, r6, #12
100148de:	0074      	lsls	r4, r6, #1
100148e0:	0a40      	lsrs	r0, r0, #9
100148e2:	0f4e      	lsrs	r6, r1, #29
100148e4:	0a7f      	lsrs	r7, r7, #9
100148e6:	4330      	orrs	r0, r6
100148e8:	4ecf      	ldr	r6, [pc, #828]	; (10014c28 <__aeabi_dsub+0x364>)
100148ea:	4317      	orrs	r7, r2
100148ec:	005a      	lsls	r2, r3, #1
100148ee:	0d64      	lsrs	r4, r4, #21
100148f0:	0d52      	lsrs	r2, r2, #21
100148f2:	0fdb      	lsrs	r3, r3, #31
100148f4:	00c9      	lsls	r1, r1, #3
100148f6:	42b2      	cmp	r2, r6
100148f8:	d100      	bne.n	100148fc <__aeabi_dsub+0x38>
100148fa:	e0e5      	b.n	10014ac8 <__aeabi_dsub+0x204>
100148fc:	2601      	movs	r6, #1
100148fe:	4073      	eors	r3, r6
10014900:	1aa6      	subs	r6, r4, r2
10014902:	46b4      	mov	ip, r6
10014904:	4553      	cmp	r3, sl
10014906:	d100      	bne.n	1001490a <__aeabi_dsub+0x46>
10014908:	e0af      	b.n	10014a6a <__aeabi_dsub+0x1a6>
1001490a:	2e00      	cmp	r6, #0
1001490c:	dc00      	bgt.n	10014910 <__aeabi_dsub+0x4c>
1001490e:	e10d      	b.n	10014b2c <__aeabi_dsub+0x268>
10014910:	2a00      	cmp	r2, #0
10014912:	d13a      	bne.n	1001498a <__aeabi_dsub+0xc6>
10014914:	0003      	movs	r3, r0
10014916:	430b      	orrs	r3, r1
10014918:	d000      	beq.n	1001491c <__aeabi_dsub+0x58>
1001491a:	e0e4      	b.n	10014ae6 <__aeabi_dsub+0x222>
1001491c:	076b      	lsls	r3, r5, #29
1001491e:	d009      	beq.n	10014934 <__aeabi_dsub+0x70>
10014920:	230f      	movs	r3, #15
10014922:	402b      	ands	r3, r5
10014924:	2b04      	cmp	r3, #4
10014926:	d005      	beq.n	10014934 <__aeabi_dsub+0x70>
10014928:	1d2b      	adds	r3, r5, #4
1001492a:	42ab      	cmp	r3, r5
1001492c:	41ad      	sbcs	r5, r5
1001492e:	426d      	negs	r5, r5
10014930:	197f      	adds	r7, r7, r5
10014932:	001d      	movs	r5, r3
10014934:	023b      	lsls	r3, r7, #8
10014936:	d400      	bmi.n	1001493a <__aeabi_dsub+0x76>
10014938:	e088      	b.n	10014a4c <__aeabi_dsub+0x188>
1001493a:	4bbb      	ldr	r3, [pc, #748]	; (10014c28 <__aeabi_dsub+0x364>)
1001493c:	3401      	adds	r4, #1
1001493e:	429c      	cmp	r4, r3
10014940:	d100      	bne.n	10014944 <__aeabi_dsub+0x80>
10014942:	e110      	b.n	10014b66 <__aeabi_dsub+0x2a2>
10014944:	003a      	movs	r2, r7
10014946:	4bb9      	ldr	r3, [pc, #740]	; (10014c2c <__aeabi_dsub+0x368>)
10014948:	4651      	mov	r1, sl
1001494a:	401a      	ands	r2, r3
1001494c:	2301      	movs	r3, #1
1001494e:	0750      	lsls	r0, r2, #29
10014950:	08ed      	lsrs	r5, r5, #3
10014952:	0252      	lsls	r2, r2, #9
10014954:	0564      	lsls	r4, r4, #21
10014956:	4305      	orrs	r5, r0
10014958:	0b12      	lsrs	r2, r2, #12
1001495a:	0d64      	lsrs	r4, r4, #21
1001495c:	400b      	ands	r3, r1
1001495e:	2100      	movs	r1, #0
10014960:	0028      	movs	r0, r5
10014962:	0312      	lsls	r2, r2, #12
10014964:	0d0d      	lsrs	r5, r1, #20
10014966:	0b12      	lsrs	r2, r2, #12
10014968:	0564      	lsls	r4, r4, #21
1001496a:	052d      	lsls	r5, r5, #20
1001496c:	4315      	orrs	r5, r2
1001496e:	0862      	lsrs	r2, r4, #1
10014970:	4caf      	ldr	r4, [pc, #700]	; (10014c30 <__aeabi_dsub+0x36c>)
10014972:	07db      	lsls	r3, r3, #31
10014974:	402c      	ands	r4, r5
10014976:	4314      	orrs	r4, r2
10014978:	0064      	lsls	r4, r4, #1
1001497a:	0864      	lsrs	r4, r4, #1
1001497c:	431c      	orrs	r4, r3
1001497e:	0021      	movs	r1, r4
10014980:	bc1c      	pop	{r2, r3, r4}
10014982:	4690      	mov	r8, r2
10014984:	4699      	mov	r9, r3
10014986:	46a2      	mov	sl, r4
10014988:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001498a:	4ba7      	ldr	r3, [pc, #668]	; (10014c28 <__aeabi_dsub+0x364>)
1001498c:	429c      	cmp	r4, r3
1001498e:	d0c5      	beq.n	1001491c <__aeabi_dsub+0x58>
10014990:	2380      	movs	r3, #128	; 0x80
10014992:	041b      	lsls	r3, r3, #16
10014994:	4318      	orrs	r0, r3
10014996:	4663      	mov	r3, ip
10014998:	2b38      	cmp	r3, #56	; 0x38
1001499a:	dd00      	ble.n	1001499e <__aeabi_dsub+0xda>
1001499c:	e0fd      	b.n	10014b9a <__aeabi_dsub+0x2d6>
1001499e:	2b1f      	cmp	r3, #31
100149a0:	dd00      	ble.n	100149a4 <__aeabi_dsub+0xe0>
100149a2:	e130      	b.n	10014c06 <__aeabi_dsub+0x342>
100149a4:	4662      	mov	r2, ip
100149a6:	2320      	movs	r3, #32
100149a8:	1a9b      	subs	r3, r3, r2
100149aa:	0002      	movs	r2, r0
100149ac:	409a      	lsls	r2, r3
100149ae:	4666      	mov	r6, ip
100149b0:	4690      	mov	r8, r2
100149b2:	000a      	movs	r2, r1
100149b4:	4099      	lsls	r1, r3
100149b6:	40f2      	lsrs	r2, r6
100149b8:	4646      	mov	r6, r8
100149ba:	1e4b      	subs	r3, r1, #1
100149bc:	4199      	sbcs	r1, r3
100149be:	4332      	orrs	r2, r6
100149c0:	4311      	orrs	r1, r2
100149c2:	4663      	mov	r3, ip
100149c4:	0002      	movs	r2, r0
100149c6:	40da      	lsrs	r2, r3
100149c8:	1a69      	subs	r1, r5, r1
100149ca:	428d      	cmp	r5, r1
100149cc:	419b      	sbcs	r3, r3
100149ce:	000d      	movs	r5, r1
100149d0:	1aba      	subs	r2, r7, r2
100149d2:	425b      	negs	r3, r3
100149d4:	1ad7      	subs	r7, r2, r3
100149d6:	023b      	lsls	r3, r7, #8
100149d8:	d535      	bpl.n	10014a46 <__aeabi_dsub+0x182>
100149da:	027a      	lsls	r2, r7, #9
100149dc:	0a53      	lsrs	r3, r2, #9
100149de:	4698      	mov	r8, r3
100149e0:	4643      	mov	r3, r8
100149e2:	2b00      	cmp	r3, #0
100149e4:	d100      	bne.n	100149e8 <__aeabi_dsub+0x124>
100149e6:	e0c4      	b.n	10014b72 <__aeabi_dsub+0x2ae>
100149e8:	4640      	mov	r0, r8
100149ea:	f000 fb2d 	bl	10015048 <__clzsi2>
100149ee:	0003      	movs	r3, r0
100149f0:	3b08      	subs	r3, #8
100149f2:	2b1f      	cmp	r3, #31
100149f4:	dd00      	ble.n	100149f8 <__aeabi_dsub+0x134>
100149f6:	e0c5      	b.n	10014b84 <__aeabi_dsub+0x2c0>
100149f8:	2220      	movs	r2, #32
100149fa:	0029      	movs	r1, r5
100149fc:	1ad2      	subs	r2, r2, r3
100149fe:	4647      	mov	r7, r8
10014a00:	40d1      	lsrs	r1, r2
10014a02:	409f      	lsls	r7, r3
10014a04:	000a      	movs	r2, r1
10014a06:	409d      	lsls	r5, r3
10014a08:	433a      	orrs	r2, r7
10014a0a:	429c      	cmp	r4, r3
10014a0c:	dd00      	ble.n	10014a10 <__aeabi_dsub+0x14c>
10014a0e:	e0c0      	b.n	10014b92 <__aeabi_dsub+0x2ce>
10014a10:	1b1c      	subs	r4, r3, r4
10014a12:	1c63      	adds	r3, r4, #1
10014a14:	2b1f      	cmp	r3, #31
10014a16:	dd00      	ble.n	10014a1a <__aeabi_dsub+0x156>
10014a18:	e0e4      	b.n	10014be4 <__aeabi_dsub+0x320>
10014a1a:	2120      	movs	r1, #32
10014a1c:	0014      	movs	r4, r2
10014a1e:	0028      	movs	r0, r5
10014a20:	1ac9      	subs	r1, r1, r3
10014a22:	40d8      	lsrs	r0, r3
10014a24:	408c      	lsls	r4, r1
10014a26:	408d      	lsls	r5, r1
10014a28:	4304      	orrs	r4, r0
10014a2a:	40da      	lsrs	r2, r3
10014a2c:	1e68      	subs	r0, r5, #1
10014a2e:	4185      	sbcs	r5, r0
10014a30:	0017      	movs	r7, r2
10014a32:	4325      	orrs	r5, r4
10014a34:	2400      	movs	r4, #0
10014a36:	e771      	b.n	1001491c <__aeabi_dsub+0x58>
10014a38:	4642      	mov	r2, r8
10014a3a:	4663      	mov	r3, ip
10014a3c:	431a      	orrs	r2, r3
10014a3e:	d100      	bne.n	10014a42 <__aeabi_dsub+0x17e>
10014a40:	e24c      	b.n	10014edc <__aeabi_dsub+0x618>
10014a42:	4667      	mov	r7, ip
10014a44:	4645      	mov	r5, r8
10014a46:	076b      	lsls	r3, r5, #29
10014a48:	d000      	beq.n	10014a4c <__aeabi_dsub+0x188>
10014a4a:	e769      	b.n	10014920 <__aeabi_dsub+0x5c>
10014a4c:	2301      	movs	r3, #1
10014a4e:	4651      	mov	r1, sl
10014a50:	0778      	lsls	r0, r7, #29
10014a52:	08ed      	lsrs	r5, r5, #3
10014a54:	08fa      	lsrs	r2, r7, #3
10014a56:	400b      	ands	r3, r1
10014a58:	4305      	orrs	r5, r0
10014a5a:	4973      	ldr	r1, [pc, #460]	; (10014c28 <__aeabi_dsub+0x364>)
10014a5c:	428c      	cmp	r4, r1
10014a5e:	d038      	beq.n	10014ad2 <__aeabi_dsub+0x20e>
10014a60:	0312      	lsls	r2, r2, #12
10014a62:	0564      	lsls	r4, r4, #21
10014a64:	0b12      	lsrs	r2, r2, #12
10014a66:	0d64      	lsrs	r4, r4, #21
10014a68:	e779      	b.n	1001495e <__aeabi_dsub+0x9a>
10014a6a:	2e00      	cmp	r6, #0
10014a6c:	dc00      	bgt.n	10014a70 <__aeabi_dsub+0x1ac>
10014a6e:	e09a      	b.n	10014ba6 <__aeabi_dsub+0x2e2>
10014a70:	2a00      	cmp	r2, #0
10014a72:	d047      	beq.n	10014b04 <__aeabi_dsub+0x240>
10014a74:	4a6c      	ldr	r2, [pc, #432]	; (10014c28 <__aeabi_dsub+0x364>)
10014a76:	4294      	cmp	r4, r2
10014a78:	d100      	bne.n	10014a7c <__aeabi_dsub+0x1b8>
10014a7a:	e74f      	b.n	1001491c <__aeabi_dsub+0x58>
10014a7c:	2280      	movs	r2, #128	; 0x80
10014a7e:	0412      	lsls	r2, r2, #16
10014a80:	4310      	orrs	r0, r2
10014a82:	4662      	mov	r2, ip
10014a84:	2a38      	cmp	r2, #56	; 0x38
10014a86:	dc00      	bgt.n	10014a8a <__aeabi_dsub+0x1c6>
10014a88:	e108      	b.n	10014c9c <__aeabi_dsub+0x3d8>
10014a8a:	4301      	orrs	r1, r0
10014a8c:	1e48      	subs	r0, r1, #1
10014a8e:	4181      	sbcs	r1, r0
10014a90:	2200      	movs	r2, #0
10014a92:	b2c9      	uxtb	r1, r1
10014a94:	1949      	adds	r1, r1, r5
10014a96:	19d2      	adds	r2, r2, r7
10014a98:	42a9      	cmp	r1, r5
10014a9a:	41bf      	sbcs	r7, r7
10014a9c:	000d      	movs	r5, r1
10014a9e:	427f      	negs	r7, r7
10014aa0:	18bf      	adds	r7, r7, r2
10014aa2:	023a      	lsls	r2, r7, #8
10014aa4:	d400      	bmi.n	10014aa8 <__aeabi_dsub+0x1e4>
10014aa6:	e142      	b.n	10014d2e <__aeabi_dsub+0x46a>
10014aa8:	4a5f      	ldr	r2, [pc, #380]	; (10014c28 <__aeabi_dsub+0x364>)
10014aaa:	3401      	adds	r4, #1
10014aac:	4294      	cmp	r4, r2
10014aae:	d100      	bne.n	10014ab2 <__aeabi_dsub+0x1ee>
10014ab0:	e14e      	b.n	10014d50 <__aeabi_dsub+0x48c>
10014ab2:	2001      	movs	r0, #1
10014ab4:	4a5d      	ldr	r2, [pc, #372]	; (10014c2c <__aeabi_dsub+0x368>)
10014ab6:	0869      	lsrs	r1, r5, #1
10014ab8:	403a      	ands	r2, r7
10014aba:	4028      	ands	r0, r5
10014abc:	4308      	orrs	r0, r1
10014abe:	07d5      	lsls	r5, r2, #31
10014ac0:	4305      	orrs	r5, r0
10014ac2:	0857      	lsrs	r7, r2, #1
10014ac4:	469a      	mov	sl, r3
10014ac6:	e729      	b.n	1001491c <__aeabi_dsub+0x58>
10014ac8:	0006      	movs	r6, r0
10014aca:	430e      	orrs	r6, r1
10014acc:	d000      	beq.n	10014ad0 <__aeabi_dsub+0x20c>
10014ace:	e717      	b.n	10014900 <__aeabi_dsub+0x3c>
10014ad0:	e714      	b.n	100148fc <__aeabi_dsub+0x38>
10014ad2:	0029      	movs	r1, r5
10014ad4:	4311      	orrs	r1, r2
10014ad6:	d100      	bne.n	10014ada <__aeabi_dsub+0x216>
10014ad8:	e1f9      	b.n	10014ece <__aeabi_dsub+0x60a>
10014ada:	2180      	movs	r1, #128	; 0x80
10014adc:	0309      	lsls	r1, r1, #12
10014ade:	430a      	orrs	r2, r1
10014ae0:	0312      	lsls	r2, r2, #12
10014ae2:	0b12      	lsrs	r2, r2, #12
10014ae4:	e73b      	b.n	1001495e <__aeabi_dsub+0x9a>
10014ae6:	2301      	movs	r3, #1
10014ae8:	425b      	negs	r3, r3
10014aea:	4698      	mov	r8, r3
10014aec:	44c4      	add	ip, r8
10014aee:	4663      	mov	r3, ip
10014af0:	2b00      	cmp	r3, #0
10014af2:	d172      	bne.n	10014bda <__aeabi_dsub+0x316>
10014af4:	1a69      	subs	r1, r5, r1
10014af6:	428d      	cmp	r5, r1
10014af8:	419b      	sbcs	r3, r3
10014afa:	1a3f      	subs	r7, r7, r0
10014afc:	425b      	negs	r3, r3
10014afe:	1aff      	subs	r7, r7, r3
10014b00:	000d      	movs	r5, r1
10014b02:	e768      	b.n	100149d6 <__aeabi_dsub+0x112>
10014b04:	0002      	movs	r2, r0
10014b06:	430a      	orrs	r2, r1
10014b08:	d100      	bne.n	10014b0c <__aeabi_dsub+0x248>
10014b0a:	e707      	b.n	1001491c <__aeabi_dsub+0x58>
10014b0c:	2201      	movs	r2, #1
10014b0e:	4252      	negs	r2, r2
10014b10:	4690      	mov	r8, r2
10014b12:	44c4      	add	ip, r8
10014b14:	4662      	mov	r2, ip
10014b16:	2a00      	cmp	r2, #0
10014b18:	d000      	beq.n	10014b1c <__aeabi_dsub+0x258>
10014b1a:	e0e6      	b.n	10014cea <__aeabi_dsub+0x426>
10014b1c:	1869      	adds	r1, r5, r1
10014b1e:	42a9      	cmp	r1, r5
10014b20:	41b6      	sbcs	r6, r6
10014b22:	183f      	adds	r7, r7, r0
10014b24:	4276      	negs	r6, r6
10014b26:	19f7      	adds	r7, r6, r7
10014b28:	000d      	movs	r5, r1
10014b2a:	e7ba      	b.n	10014aa2 <__aeabi_dsub+0x1de>
10014b2c:	2e00      	cmp	r6, #0
10014b2e:	d000      	beq.n	10014b32 <__aeabi_dsub+0x26e>
10014b30:	e080      	b.n	10014c34 <__aeabi_dsub+0x370>
10014b32:	1c62      	adds	r2, r4, #1
10014b34:	0552      	lsls	r2, r2, #21
10014b36:	0d52      	lsrs	r2, r2, #21
10014b38:	2a01      	cmp	r2, #1
10014b3a:	dc00      	bgt.n	10014b3e <__aeabi_dsub+0x27a>
10014b3c:	e0f9      	b.n	10014d32 <__aeabi_dsub+0x46e>
10014b3e:	1a6a      	subs	r2, r5, r1
10014b40:	4691      	mov	r9, r2
10014b42:	454d      	cmp	r5, r9
10014b44:	41b6      	sbcs	r6, r6
10014b46:	1a3a      	subs	r2, r7, r0
10014b48:	4276      	negs	r6, r6
10014b4a:	1b92      	subs	r2, r2, r6
10014b4c:	4690      	mov	r8, r2
10014b4e:	0212      	lsls	r2, r2, #8
10014b50:	d400      	bmi.n	10014b54 <__aeabi_dsub+0x290>
10014b52:	e099      	b.n	10014c88 <__aeabi_dsub+0x3c4>
10014b54:	1b4d      	subs	r5, r1, r5
10014b56:	42a9      	cmp	r1, r5
10014b58:	4189      	sbcs	r1, r1
10014b5a:	1bc7      	subs	r7, r0, r7
10014b5c:	4249      	negs	r1, r1
10014b5e:	1a7a      	subs	r2, r7, r1
10014b60:	4690      	mov	r8, r2
10014b62:	469a      	mov	sl, r3
10014b64:	e73c      	b.n	100149e0 <__aeabi_dsub+0x11c>
10014b66:	4652      	mov	r2, sl
10014b68:	2301      	movs	r3, #1
10014b6a:	2500      	movs	r5, #0
10014b6c:	4013      	ands	r3, r2
10014b6e:	2200      	movs	r2, #0
10014b70:	e6f5      	b.n	1001495e <__aeabi_dsub+0x9a>
10014b72:	0028      	movs	r0, r5
10014b74:	f000 fa68 	bl	10015048 <__clzsi2>
10014b78:	3020      	adds	r0, #32
10014b7a:	0003      	movs	r3, r0
10014b7c:	3b08      	subs	r3, #8
10014b7e:	2b1f      	cmp	r3, #31
10014b80:	dc00      	bgt.n	10014b84 <__aeabi_dsub+0x2c0>
10014b82:	e739      	b.n	100149f8 <__aeabi_dsub+0x134>
10014b84:	002a      	movs	r2, r5
10014b86:	3828      	subs	r0, #40	; 0x28
10014b88:	4082      	lsls	r2, r0
10014b8a:	2500      	movs	r5, #0
10014b8c:	429c      	cmp	r4, r3
10014b8e:	dc00      	bgt.n	10014b92 <__aeabi_dsub+0x2ce>
10014b90:	e73e      	b.n	10014a10 <__aeabi_dsub+0x14c>
10014b92:	4f26      	ldr	r7, [pc, #152]	; (10014c2c <__aeabi_dsub+0x368>)
10014b94:	1ae4      	subs	r4, r4, r3
10014b96:	4017      	ands	r7, r2
10014b98:	e6c0      	b.n	1001491c <__aeabi_dsub+0x58>
10014b9a:	4301      	orrs	r1, r0
10014b9c:	1e48      	subs	r0, r1, #1
10014b9e:	4181      	sbcs	r1, r0
10014ba0:	2200      	movs	r2, #0
10014ba2:	b2c9      	uxtb	r1, r1
10014ba4:	e710      	b.n	100149c8 <__aeabi_dsub+0x104>
10014ba6:	2e00      	cmp	r6, #0
10014ba8:	d000      	beq.n	10014bac <__aeabi_dsub+0x2e8>
10014baa:	e0f1      	b.n	10014d90 <__aeabi_dsub+0x4cc>
10014bac:	1c62      	adds	r2, r4, #1
10014bae:	4694      	mov	ip, r2
10014bb0:	0552      	lsls	r2, r2, #21
10014bb2:	0d52      	lsrs	r2, r2, #21
10014bb4:	2a01      	cmp	r2, #1
10014bb6:	dc00      	bgt.n	10014bba <__aeabi_dsub+0x2f6>
10014bb8:	e0a0      	b.n	10014cfc <__aeabi_dsub+0x438>
10014bba:	4a1b      	ldr	r2, [pc, #108]	; (10014c28 <__aeabi_dsub+0x364>)
10014bbc:	4594      	cmp	ip, r2
10014bbe:	d100      	bne.n	10014bc2 <__aeabi_dsub+0x2fe>
10014bc0:	e0c5      	b.n	10014d4e <__aeabi_dsub+0x48a>
10014bc2:	1869      	adds	r1, r5, r1
10014bc4:	42a9      	cmp	r1, r5
10014bc6:	4192      	sbcs	r2, r2
10014bc8:	183f      	adds	r7, r7, r0
10014bca:	4252      	negs	r2, r2
10014bcc:	19d2      	adds	r2, r2, r7
10014bce:	0849      	lsrs	r1, r1, #1
10014bd0:	07d5      	lsls	r5, r2, #31
10014bd2:	430d      	orrs	r5, r1
10014bd4:	0857      	lsrs	r7, r2, #1
10014bd6:	4664      	mov	r4, ip
10014bd8:	e6a0      	b.n	1001491c <__aeabi_dsub+0x58>
10014bda:	4b13      	ldr	r3, [pc, #76]	; (10014c28 <__aeabi_dsub+0x364>)
10014bdc:	429c      	cmp	r4, r3
10014bde:	d000      	beq.n	10014be2 <__aeabi_dsub+0x31e>
10014be0:	e6d9      	b.n	10014996 <__aeabi_dsub+0xd2>
10014be2:	e69b      	b.n	1001491c <__aeabi_dsub+0x58>
10014be4:	0011      	movs	r1, r2
10014be6:	3c1f      	subs	r4, #31
10014be8:	40e1      	lsrs	r1, r4
10014bea:	000c      	movs	r4, r1
10014bec:	2b20      	cmp	r3, #32
10014bee:	d100      	bne.n	10014bf2 <__aeabi_dsub+0x32e>
10014bf0:	e080      	b.n	10014cf4 <__aeabi_dsub+0x430>
10014bf2:	2140      	movs	r1, #64	; 0x40
10014bf4:	1acb      	subs	r3, r1, r3
10014bf6:	409a      	lsls	r2, r3
10014bf8:	4315      	orrs	r5, r2
10014bfa:	1e6a      	subs	r2, r5, #1
10014bfc:	4195      	sbcs	r5, r2
10014bfe:	2700      	movs	r7, #0
10014c00:	4325      	orrs	r5, r4
10014c02:	2400      	movs	r4, #0
10014c04:	e71f      	b.n	10014a46 <__aeabi_dsub+0x182>
10014c06:	4663      	mov	r3, ip
10014c08:	0002      	movs	r2, r0
10014c0a:	3b20      	subs	r3, #32
10014c0c:	40da      	lsrs	r2, r3
10014c0e:	4663      	mov	r3, ip
10014c10:	2b20      	cmp	r3, #32
10014c12:	d071      	beq.n	10014cf8 <__aeabi_dsub+0x434>
10014c14:	2340      	movs	r3, #64	; 0x40
10014c16:	4666      	mov	r6, ip
10014c18:	1b9b      	subs	r3, r3, r6
10014c1a:	4098      	lsls	r0, r3
10014c1c:	4301      	orrs	r1, r0
10014c1e:	1e48      	subs	r0, r1, #1
10014c20:	4181      	sbcs	r1, r0
10014c22:	4311      	orrs	r1, r2
10014c24:	2200      	movs	r2, #0
10014c26:	e6cf      	b.n	100149c8 <__aeabi_dsub+0x104>
10014c28:	000007ff 	.word	0x000007ff
10014c2c:	ff7fffff 	.word	0xff7fffff
10014c30:	800fffff 	.word	0x800fffff
10014c34:	2c00      	cmp	r4, #0
10014c36:	d048      	beq.n	10014cca <__aeabi_dsub+0x406>
10014c38:	4cca      	ldr	r4, [pc, #808]	; (10014f64 <__aeabi_dsub+0x6a0>)
10014c3a:	42a2      	cmp	r2, r4
10014c3c:	d100      	bne.n	10014c40 <__aeabi_dsub+0x37c>
10014c3e:	e0a2      	b.n	10014d86 <__aeabi_dsub+0x4c2>
10014c40:	4274      	negs	r4, r6
10014c42:	46a1      	mov	r9, r4
10014c44:	2480      	movs	r4, #128	; 0x80
10014c46:	0424      	lsls	r4, r4, #16
10014c48:	4327      	orrs	r7, r4
10014c4a:	464c      	mov	r4, r9
10014c4c:	2c38      	cmp	r4, #56	; 0x38
10014c4e:	dd00      	ble.n	10014c52 <__aeabi_dsub+0x38e>
10014c50:	e0db      	b.n	10014e0a <__aeabi_dsub+0x546>
10014c52:	2c1f      	cmp	r4, #31
10014c54:	dd00      	ble.n	10014c58 <__aeabi_dsub+0x394>
10014c56:	e144      	b.n	10014ee2 <__aeabi_dsub+0x61e>
10014c58:	464e      	mov	r6, r9
10014c5a:	2420      	movs	r4, #32
10014c5c:	1ba4      	subs	r4, r4, r6
10014c5e:	003e      	movs	r6, r7
10014c60:	40a6      	lsls	r6, r4
10014c62:	46a2      	mov	sl, r4
10014c64:	46b0      	mov	r8, r6
10014c66:	464c      	mov	r4, r9
10014c68:	002e      	movs	r6, r5
10014c6a:	40e6      	lsrs	r6, r4
10014c6c:	46b4      	mov	ip, r6
10014c6e:	4646      	mov	r6, r8
10014c70:	4664      	mov	r4, ip
10014c72:	4326      	orrs	r6, r4
10014c74:	4654      	mov	r4, sl
10014c76:	40a5      	lsls	r5, r4
10014c78:	1e6c      	subs	r4, r5, #1
10014c7a:	41a5      	sbcs	r5, r4
10014c7c:	0034      	movs	r4, r6
10014c7e:	432c      	orrs	r4, r5
10014c80:	464d      	mov	r5, r9
10014c82:	40ef      	lsrs	r7, r5
10014c84:	1b0d      	subs	r5, r1, r4
10014c86:	e028      	b.n	10014cda <__aeabi_dsub+0x416>
10014c88:	464a      	mov	r2, r9
10014c8a:	4643      	mov	r3, r8
10014c8c:	464d      	mov	r5, r9
10014c8e:	431a      	orrs	r2, r3
10014c90:	d000      	beq.n	10014c94 <__aeabi_dsub+0x3d0>
10014c92:	e6a5      	b.n	100149e0 <__aeabi_dsub+0x11c>
10014c94:	2300      	movs	r3, #0
10014c96:	2400      	movs	r4, #0
10014c98:	2500      	movs	r5, #0
10014c9a:	e6de      	b.n	10014a5a <__aeabi_dsub+0x196>
10014c9c:	2a1f      	cmp	r2, #31
10014c9e:	dc5a      	bgt.n	10014d56 <__aeabi_dsub+0x492>
10014ca0:	4666      	mov	r6, ip
10014ca2:	2220      	movs	r2, #32
10014ca4:	1b92      	subs	r2, r2, r6
10014ca6:	0006      	movs	r6, r0
10014ca8:	4096      	lsls	r6, r2
10014caa:	4691      	mov	r9, r2
10014cac:	46b0      	mov	r8, r6
10014cae:	4662      	mov	r2, ip
10014cb0:	000e      	movs	r6, r1
10014cb2:	40d6      	lsrs	r6, r2
10014cb4:	4642      	mov	r2, r8
10014cb6:	4316      	orrs	r6, r2
10014cb8:	464a      	mov	r2, r9
10014cba:	4091      	lsls	r1, r2
10014cbc:	1e4a      	subs	r2, r1, #1
10014cbe:	4191      	sbcs	r1, r2
10014cc0:	0002      	movs	r2, r0
10014cc2:	4660      	mov	r0, ip
10014cc4:	4331      	orrs	r1, r6
10014cc6:	40c2      	lsrs	r2, r0
10014cc8:	e6e4      	b.n	10014a94 <__aeabi_dsub+0x1d0>
10014cca:	003c      	movs	r4, r7
10014ccc:	432c      	orrs	r4, r5
10014cce:	d05a      	beq.n	10014d86 <__aeabi_dsub+0x4c2>
10014cd0:	43f4      	mvns	r4, r6
10014cd2:	46a1      	mov	r9, r4
10014cd4:	2c00      	cmp	r4, #0
10014cd6:	d152      	bne.n	10014d7e <__aeabi_dsub+0x4ba>
10014cd8:	1b4d      	subs	r5, r1, r5
10014cda:	42a9      	cmp	r1, r5
10014cdc:	4189      	sbcs	r1, r1
10014cde:	1bc7      	subs	r7, r0, r7
10014ce0:	4249      	negs	r1, r1
10014ce2:	1a7f      	subs	r7, r7, r1
10014ce4:	0014      	movs	r4, r2
10014ce6:	469a      	mov	sl, r3
10014ce8:	e675      	b.n	100149d6 <__aeabi_dsub+0x112>
10014cea:	4a9e      	ldr	r2, [pc, #632]	; (10014f64 <__aeabi_dsub+0x6a0>)
10014cec:	4294      	cmp	r4, r2
10014cee:	d000      	beq.n	10014cf2 <__aeabi_dsub+0x42e>
10014cf0:	e6c7      	b.n	10014a82 <__aeabi_dsub+0x1be>
10014cf2:	e613      	b.n	1001491c <__aeabi_dsub+0x58>
10014cf4:	2200      	movs	r2, #0
10014cf6:	e77f      	b.n	10014bf8 <__aeabi_dsub+0x334>
10014cf8:	2000      	movs	r0, #0
10014cfa:	e78f      	b.n	10014c1c <__aeabi_dsub+0x358>
10014cfc:	2c00      	cmp	r4, #0
10014cfe:	d000      	beq.n	10014d02 <__aeabi_dsub+0x43e>
10014d00:	e0c8      	b.n	10014e94 <__aeabi_dsub+0x5d0>
10014d02:	003b      	movs	r3, r7
10014d04:	432b      	orrs	r3, r5
10014d06:	d100      	bne.n	10014d0a <__aeabi_dsub+0x446>
10014d08:	e10f      	b.n	10014f2a <__aeabi_dsub+0x666>
10014d0a:	0003      	movs	r3, r0
10014d0c:	430b      	orrs	r3, r1
10014d0e:	d100      	bne.n	10014d12 <__aeabi_dsub+0x44e>
10014d10:	e604      	b.n	1001491c <__aeabi_dsub+0x58>
10014d12:	1869      	adds	r1, r5, r1
10014d14:	42a9      	cmp	r1, r5
10014d16:	419b      	sbcs	r3, r3
10014d18:	183f      	adds	r7, r7, r0
10014d1a:	425b      	negs	r3, r3
10014d1c:	19df      	adds	r7, r3, r7
10014d1e:	023b      	lsls	r3, r7, #8
10014d20:	d400      	bmi.n	10014d24 <__aeabi_dsub+0x460>
10014d22:	e11a      	b.n	10014f5a <__aeabi_dsub+0x696>
10014d24:	4b90      	ldr	r3, [pc, #576]	; (10014f68 <__aeabi_dsub+0x6a4>)
10014d26:	000d      	movs	r5, r1
10014d28:	401f      	ands	r7, r3
10014d2a:	4664      	mov	r4, ip
10014d2c:	e5f6      	b.n	1001491c <__aeabi_dsub+0x58>
10014d2e:	469a      	mov	sl, r3
10014d30:	e689      	b.n	10014a46 <__aeabi_dsub+0x182>
10014d32:	003a      	movs	r2, r7
10014d34:	432a      	orrs	r2, r5
10014d36:	2c00      	cmp	r4, #0
10014d38:	d15c      	bne.n	10014df4 <__aeabi_dsub+0x530>
10014d3a:	2a00      	cmp	r2, #0
10014d3c:	d175      	bne.n	10014e2a <__aeabi_dsub+0x566>
10014d3e:	0002      	movs	r2, r0
10014d40:	430a      	orrs	r2, r1
10014d42:	d100      	bne.n	10014d46 <__aeabi_dsub+0x482>
10014d44:	e0ca      	b.n	10014edc <__aeabi_dsub+0x618>
10014d46:	0007      	movs	r7, r0
10014d48:	000d      	movs	r5, r1
10014d4a:	469a      	mov	sl, r3
10014d4c:	e5e6      	b.n	1001491c <__aeabi_dsub+0x58>
10014d4e:	4664      	mov	r4, ip
10014d50:	2200      	movs	r2, #0
10014d52:	2500      	movs	r5, #0
10014d54:	e681      	b.n	10014a5a <__aeabi_dsub+0x196>
10014d56:	4662      	mov	r2, ip
10014d58:	0006      	movs	r6, r0
10014d5a:	3a20      	subs	r2, #32
10014d5c:	40d6      	lsrs	r6, r2
10014d5e:	4662      	mov	r2, ip
10014d60:	46b0      	mov	r8, r6
10014d62:	2a20      	cmp	r2, #32
10014d64:	d100      	bne.n	10014d68 <__aeabi_dsub+0x4a4>
10014d66:	e0b7      	b.n	10014ed8 <__aeabi_dsub+0x614>
10014d68:	2240      	movs	r2, #64	; 0x40
10014d6a:	4666      	mov	r6, ip
10014d6c:	1b92      	subs	r2, r2, r6
10014d6e:	4090      	lsls	r0, r2
10014d70:	4301      	orrs	r1, r0
10014d72:	4642      	mov	r2, r8
10014d74:	1e48      	subs	r0, r1, #1
10014d76:	4181      	sbcs	r1, r0
10014d78:	4311      	orrs	r1, r2
10014d7a:	2200      	movs	r2, #0
10014d7c:	e68a      	b.n	10014a94 <__aeabi_dsub+0x1d0>
10014d7e:	4c79      	ldr	r4, [pc, #484]	; (10014f64 <__aeabi_dsub+0x6a0>)
10014d80:	42a2      	cmp	r2, r4
10014d82:	d000      	beq.n	10014d86 <__aeabi_dsub+0x4c2>
10014d84:	e761      	b.n	10014c4a <__aeabi_dsub+0x386>
10014d86:	0007      	movs	r7, r0
10014d88:	000d      	movs	r5, r1
10014d8a:	0014      	movs	r4, r2
10014d8c:	469a      	mov	sl, r3
10014d8e:	e5c5      	b.n	1001491c <__aeabi_dsub+0x58>
10014d90:	2c00      	cmp	r4, #0
10014d92:	d141      	bne.n	10014e18 <__aeabi_dsub+0x554>
10014d94:	003c      	movs	r4, r7
10014d96:	432c      	orrs	r4, r5
10014d98:	d078      	beq.n	10014e8c <__aeabi_dsub+0x5c8>
10014d9a:	43f4      	mvns	r4, r6
10014d9c:	46a1      	mov	r9, r4
10014d9e:	2c00      	cmp	r4, #0
10014da0:	d020      	beq.n	10014de4 <__aeabi_dsub+0x520>
10014da2:	4c70      	ldr	r4, [pc, #448]	; (10014f64 <__aeabi_dsub+0x6a0>)
10014da4:	42a2      	cmp	r2, r4
10014da6:	d071      	beq.n	10014e8c <__aeabi_dsub+0x5c8>
10014da8:	464c      	mov	r4, r9
10014daa:	2c38      	cmp	r4, #56	; 0x38
10014dac:	dd00      	ble.n	10014db0 <__aeabi_dsub+0x4ec>
10014dae:	e0b2      	b.n	10014f16 <__aeabi_dsub+0x652>
10014db0:	2c1f      	cmp	r4, #31
10014db2:	dd00      	ble.n	10014db6 <__aeabi_dsub+0x4f2>
10014db4:	e0bc      	b.n	10014f30 <__aeabi_dsub+0x66c>
10014db6:	2620      	movs	r6, #32
10014db8:	1b34      	subs	r4, r6, r4
10014dba:	46a2      	mov	sl, r4
10014dbc:	003c      	movs	r4, r7
10014dbe:	4656      	mov	r6, sl
10014dc0:	40b4      	lsls	r4, r6
10014dc2:	464e      	mov	r6, r9
10014dc4:	46a0      	mov	r8, r4
10014dc6:	002c      	movs	r4, r5
10014dc8:	40f4      	lsrs	r4, r6
10014dca:	46a4      	mov	ip, r4
10014dcc:	4644      	mov	r4, r8
10014dce:	4666      	mov	r6, ip
10014dd0:	4334      	orrs	r4, r6
10014dd2:	46a4      	mov	ip, r4
10014dd4:	4654      	mov	r4, sl
10014dd6:	40a5      	lsls	r5, r4
10014dd8:	4664      	mov	r4, ip
10014dda:	1e6e      	subs	r6, r5, #1
10014ddc:	41b5      	sbcs	r5, r6
10014dde:	4325      	orrs	r5, r4
10014de0:	464c      	mov	r4, r9
10014de2:	40e7      	lsrs	r7, r4
10014de4:	186d      	adds	r5, r5, r1
10014de6:	428d      	cmp	r5, r1
10014de8:	4189      	sbcs	r1, r1
10014dea:	183f      	adds	r7, r7, r0
10014dec:	4249      	negs	r1, r1
10014dee:	19cf      	adds	r7, r1, r7
10014df0:	0014      	movs	r4, r2
10014df2:	e656      	b.n	10014aa2 <__aeabi_dsub+0x1de>
10014df4:	2a00      	cmp	r2, #0
10014df6:	d12f      	bne.n	10014e58 <__aeabi_dsub+0x594>
10014df8:	0002      	movs	r2, r0
10014dfa:	430a      	orrs	r2, r1
10014dfc:	d100      	bne.n	10014e00 <__aeabi_dsub+0x53c>
10014dfe:	e084      	b.n	10014f0a <__aeabi_dsub+0x646>
10014e00:	0007      	movs	r7, r0
10014e02:	000d      	movs	r5, r1
10014e04:	469a      	mov	sl, r3
10014e06:	4c57      	ldr	r4, [pc, #348]	; (10014f64 <__aeabi_dsub+0x6a0>)
10014e08:	e588      	b.n	1001491c <__aeabi_dsub+0x58>
10014e0a:	433d      	orrs	r5, r7
10014e0c:	1e6f      	subs	r7, r5, #1
10014e0e:	41bd      	sbcs	r5, r7
10014e10:	b2ec      	uxtb	r4, r5
10014e12:	2700      	movs	r7, #0
10014e14:	1b0d      	subs	r5, r1, r4
10014e16:	e760      	b.n	10014cda <__aeabi_dsub+0x416>
10014e18:	4c52      	ldr	r4, [pc, #328]	; (10014f64 <__aeabi_dsub+0x6a0>)
10014e1a:	42a2      	cmp	r2, r4
10014e1c:	d036      	beq.n	10014e8c <__aeabi_dsub+0x5c8>
10014e1e:	4274      	negs	r4, r6
10014e20:	2680      	movs	r6, #128	; 0x80
10014e22:	0436      	lsls	r6, r6, #16
10014e24:	46a1      	mov	r9, r4
10014e26:	4337      	orrs	r7, r6
10014e28:	e7be      	b.n	10014da8 <__aeabi_dsub+0x4e4>
10014e2a:	0002      	movs	r2, r0
10014e2c:	430a      	orrs	r2, r1
10014e2e:	d100      	bne.n	10014e32 <__aeabi_dsub+0x56e>
10014e30:	e574      	b.n	1001491c <__aeabi_dsub+0x58>
10014e32:	1a6a      	subs	r2, r5, r1
10014e34:	4690      	mov	r8, r2
10014e36:	4545      	cmp	r5, r8
10014e38:	41b6      	sbcs	r6, r6
10014e3a:	1a3a      	subs	r2, r7, r0
10014e3c:	4276      	negs	r6, r6
10014e3e:	1b92      	subs	r2, r2, r6
10014e40:	4694      	mov	ip, r2
10014e42:	0212      	lsls	r2, r2, #8
10014e44:	d400      	bmi.n	10014e48 <__aeabi_dsub+0x584>
10014e46:	e5f7      	b.n	10014a38 <__aeabi_dsub+0x174>
10014e48:	1b4d      	subs	r5, r1, r5
10014e4a:	42a9      	cmp	r1, r5
10014e4c:	4189      	sbcs	r1, r1
10014e4e:	1bc7      	subs	r7, r0, r7
10014e50:	4249      	negs	r1, r1
10014e52:	1a7f      	subs	r7, r7, r1
10014e54:	469a      	mov	sl, r3
10014e56:	e561      	b.n	1001491c <__aeabi_dsub+0x58>
10014e58:	0002      	movs	r2, r0
10014e5a:	430a      	orrs	r2, r1
10014e5c:	d03a      	beq.n	10014ed4 <__aeabi_dsub+0x610>
10014e5e:	08ed      	lsrs	r5, r5, #3
10014e60:	077c      	lsls	r4, r7, #29
10014e62:	432c      	orrs	r4, r5
10014e64:	2580      	movs	r5, #128	; 0x80
10014e66:	08fa      	lsrs	r2, r7, #3
10014e68:	032d      	lsls	r5, r5, #12
10014e6a:	422a      	tst	r2, r5
10014e6c:	d008      	beq.n	10014e80 <__aeabi_dsub+0x5bc>
10014e6e:	08c7      	lsrs	r7, r0, #3
10014e70:	422f      	tst	r7, r5
10014e72:	d105      	bne.n	10014e80 <__aeabi_dsub+0x5bc>
10014e74:	0745      	lsls	r5, r0, #29
10014e76:	002c      	movs	r4, r5
10014e78:	003a      	movs	r2, r7
10014e7a:	469a      	mov	sl, r3
10014e7c:	08c9      	lsrs	r1, r1, #3
10014e7e:	430c      	orrs	r4, r1
10014e80:	0f67      	lsrs	r7, r4, #29
10014e82:	00d2      	lsls	r2, r2, #3
10014e84:	00e5      	lsls	r5, r4, #3
10014e86:	4317      	orrs	r7, r2
10014e88:	4c36      	ldr	r4, [pc, #216]	; (10014f64 <__aeabi_dsub+0x6a0>)
10014e8a:	e547      	b.n	1001491c <__aeabi_dsub+0x58>
10014e8c:	0007      	movs	r7, r0
10014e8e:	000d      	movs	r5, r1
10014e90:	0014      	movs	r4, r2
10014e92:	e543      	b.n	1001491c <__aeabi_dsub+0x58>
10014e94:	003a      	movs	r2, r7
10014e96:	432a      	orrs	r2, r5
10014e98:	d043      	beq.n	10014f22 <__aeabi_dsub+0x65e>
10014e9a:	0002      	movs	r2, r0
10014e9c:	430a      	orrs	r2, r1
10014e9e:	d019      	beq.n	10014ed4 <__aeabi_dsub+0x610>
10014ea0:	08ed      	lsrs	r5, r5, #3
10014ea2:	077c      	lsls	r4, r7, #29
10014ea4:	432c      	orrs	r4, r5
10014ea6:	2580      	movs	r5, #128	; 0x80
10014ea8:	08fa      	lsrs	r2, r7, #3
10014eaa:	032d      	lsls	r5, r5, #12
10014eac:	422a      	tst	r2, r5
10014eae:	d007      	beq.n	10014ec0 <__aeabi_dsub+0x5fc>
10014eb0:	08c6      	lsrs	r6, r0, #3
10014eb2:	422e      	tst	r6, r5
10014eb4:	d104      	bne.n	10014ec0 <__aeabi_dsub+0x5fc>
10014eb6:	0747      	lsls	r7, r0, #29
10014eb8:	003c      	movs	r4, r7
10014eba:	0032      	movs	r2, r6
10014ebc:	08c9      	lsrs	r1, r1, #3
10014ebe:	430c      	orrs	r4, r1
10014ec0:	00d7      	lsls	r7, r2, #3
10014ec2:	0f62      	lsrs	r2, r4, #29
10014ec4:	00e5      	lsls	r5, r4, #3
10014ec6:	4317      	orrs	r7, r2
10014ec8:	469a      	mov	sl, r3
10014eca:	4c26      	ldr	r4, [pc, #152]	; (10014f64 <__aeabi_dsub+0x6a0>)
10014ecc:	e526      	b.n	1001491c <__aeabi_dsub+0x58>
10014ece:	2200      	movs	r2, #0
10014ed0:	2500      	movs	r5, #0
10014ed2:	e544      	b.n	1001495e <__aeabi_dsub+0x9a>
10014ed4:	4c23      	ldr	r4, [pc, #140]	; (10014f64 <__aeabi_dsub+0x6a0>)
10014ed6:	e521      	b.n	1001491c <__aeabi_dsub+0x58>
10014ed8:	2000      	movs	r0, #0
10014eda:	e749      	b.n	10014d70 <__aeabi_dsub+0x4ac>
10014edc:	2300      	movs	r3, #0
10014ede:	2500      	movs	r5, #0
10014ee0:	e5bb      	b.n	10014a5a <__aeabi_dsub+0x196>
10014ee2:	464c      	mov	r4, r9
10014ee4:	003e      	movs	r6, r7
10014ee6:	3c20      	subs	r4, #32
10014ee8:	40e6      	lsrs	r6, r4
10014eea:	464c      	mov	r4, r9
10014eec:	46b4      	mov	ip, r6
10014eee:	2c20      	cmp	r4, #32
10014ef0:	d031      	beq.n	10014f56 <__aeabi_dsub+0x692>
10014ef2:	2440      	movs	r4, #64	; 0x40
10014ef4:	464e      	mov	r6, r9
10014ef6:	1ba6      	subs	r6, r4, r6
10014ef8:	40b7      	lsls	r7, r6
10014efa:	433d      	orrs	r5, r7
10014efc:	1e6c      	subs	r4, r5, #1
10014efe:	41a5      	sbcs	r5, r4
10014f00:	4664      	mov	r4, ip
10014f02:	432c      	orrs	r4, r5
10014f04:	2700      	movs	r7, #0
10014f06:	1b0d      	subs	r5, r1, r4
10014f08:	e6e7      	b.n	10014cda <__aeabi_dsub+0x416>
10014f0a:	2280      	movs	r2, #128	; 0x80
10014f0c:	2300      	movs	r3, #0
10014f0e:	0312      	lsls	r2, r2, #12
10014f10:	4c14      	ldr	r4, [pc, #80]	; (10014f64 <__aeabi_dsub+0x6a0>)
10014f12:	2500      	movs	r5, #0
10014f14:	e5a1      	b.n	10014a5a <__aeabi_dsub+0x196>
10014f16:	433d      	orrs	r5, r7
10014f18:	1e6f      	subs	r7, r5, #1
10014f1a:	41bd      	sbcs	r5, r7
10014f1c:	2700      	movs	r7, #0
10014f1e:	b2ed      	uxtb	r5, r5
10014f20:	e760      	b.n	10014de4 <__aeabi_dsub+0x520>
10014f22:	0007      	movs	r7, r0
10014f24:	000d      	movs	r5, r1
10014f26:	4c0f      	ldr	r4, [pc, #60]	; (10014f64 <__aeabi_dsub+0x6a0>)
10014f28:	e4f8      	b.n	1001491c <__aeabi_dsub+0x58>
10014f2a:	0007      	movs	r7, r0
10014f2c:	000d      	movs	r5, r1
10014f2e:	e4f5      	b.n	1001491c <__aeabi_dsub+0x58>
10014f30:	464e      	mov	r6, r9
10014f32:	003c      	movs	r4, r7
10014f34:	3e20      	subs	r6, #32
10014f36:	40f4      	lsrs	r4, r6
10014f38:	46a0      	mov	r8, r4
10014f3a:	464c      	mov	r4, r9
10014f3c:	2c20      	cmp	r4, #32
10014f3e:	d00e      	beq.n	10014f5e <__aeabi_dsub+0x69a>
10014f40:	2440      	movs	r4, #64	; 0x40
10014f42:	464e      	mov	r6, r9
10014f44:	1ba4      	subs	r4, r4, r6
10014f46:	40a7      	lsls	r7, r4
10014f48:	433d      	orrs	r5, r7
10014f4a:	1e6f      	subs	r7, r5, #1
10014f4c:	41bd      	sbcs	r5, r7
10014f4e:	4644      	mov	r4, r8
10014f50:	2700      	movs	r7, #0
10014f52:	4325      	orrs	r5, r4
10014f54:	e746      	b.n	10014de4 <__aeabi_dsub+0x520>
10014f56:	2700      	movs	r7, #0
10014f58:	e7cf      	b.n	10014efa <__aeabi_dsub+0x636>
10014f5a:	000d      	movs	r5, r1
10014f5c:	e573      	b.n	10014a46 <__aeabi_dsub+0x182>
10014f5e:	2700      	movs	r7, #0
10014f60:	e7f2      	b.n	10014f48 <__aeabi_dsub+0x684>
10014f62:	46c0      	nop			; (mov r8, r8)
10014f64:	000007ff 	.word	0x000007ff
10014f68:	ff7fffff 	.word	0xff7fffff

10014f6c <__aeabi_d2iz>:
10014f6c:	030b      	lsls	r3, r1, #12
10014f6e:	b530      	push	{r4, r5, lr}
10014f70:	4d13      	ldr	r5, [pc, #76]	; (10014fc0 <__aeabi_d2iz+0x54>)
10014f72:	0b1a      	lsrs	r2, r3, #12
10014f74:	004b      	lsls	r3, r1, #1
10014f76:	0d5b      	lsrs	r3, r3, #21
10014f78:	0fc9      	lsrs	r1, r1, #31
10014f7a:	2400      	movs	r4, #0
10014f7c:	42ab      	cmp	r3, r5
10014f7e:	dd11      	ble.n	10014fa4 <__aeabi_d2iz+0x38>
10014f80:	4c10      	ldr	r4, [pc, #64]	; (10014fc4 <__aeabi_d2iz+0x58>)
10014f82:	42a3      	cmp	r3, r4
10014f84:	dc10      	bgt.n	10014fa8 <__aeabi_d2iz+0x3c>
10014f86:	2480      	movs	r4, #128	; 0x80
10014f88:	0364      	lsls	r4, r4, #13
10014f8a:	4322      	orrs	r2, r4
10014f8c:	4c0e      	ldr	r4, [pc, #56]	; (10014fc8 <__aeabi_d2iz+0x5c>)
10014f8e:	1ae4      	subs	r4, r4, r3
10014f90:	2c1f      	cmp	r4, #31
10014f92:	dd0c      	ble.n	10014fae <__aeabi_d2iz+0x42>
10014f94:	480d      	ldr	r0, [pc, #52]	; (10014fcc <__aeabi_d2iz+0x60>)
10014f96:	1ac3      	subs	r3, r0, r3
10014f98:	40da      	lsrs	r2, r3
10014f9a:	0013      	movs	r3, r2
10014f9c:	425c      	negs	r4, r3
10014f9e:	2900      	cmp	r1, #0
10014fa0:	d100      	bne.n	10014fa4 <__aeabi_d2iz+0x38>
10014fa2:	001c      	movs	r4, r3
10014fa4:	0020      	movs	r0, r4
10014fa6:	bd30      	pop	{r4, r5, pc}
10014fa8:	4b09      	ldr	r3, [pc, #36]	; (10014fd0 <__aeabi_d2iz+0x64>)
10014faa:	18cc      	adds	r4, r1, r3
10014fac:	e7fa      	b.n	10014fa4 <__aeabi_d2iz+0x38>
10014fae:	40e0      	lsrs	r0, r4
10014fb0:	4c08      	ldr	r4, [pc, #32]	; (10014fd4 <__aeabi_d2iz+0x68>)
10014fb2:	46a4      	mov	ip, r4
10014fb4:	4463      	add	r3, ip
10014fb6:	409a      	lsls	r2, r3
10014fb8:	0013      	movs	r3, r2
10014fba:	4303      	orrs	r3, r0
10014fbc:	e7ee      	b.n	10014f9c <__aeabi_d2iz+0x30>
10014fbe:	46c0      	nop			; (mov r8, r8)
10014fc0:	000003fe 	.word	0x000003fe
10014fc4:	0000041d 	.word	0x0000041d
10014fc8:	00000433 	.word	0x00000433
10014fcc:	00000413 	.word	0x00000413
10014fd0:	7fffffff 	.word	0x7fffffff
10014fd4:	fffffbed 	.word	0xfffffbed

10014fd8 <__aeabi_ui2d>:
10014fd8:	b570      	push	{r4, r5, r6, lr}
10014fda:	1e05      	subs	r5, r0, #0
10014fdc:	d028      	beq.n	10015030 <__aeabi_ui2d+0x58>
10014fde:	f000 f833 	bl	10015048 <__clzsi2>
10014fe2:	4b15      	ldr	r3, [pc, #84]	; (10015038 <__aeabi_ui2d+0x60>)
10014fe4:	4a15      	ldr	r2, [pc, #84]	; (1001503c <__aeabi_ui2d+0x64>)
10014fe6:	1a1b      	subs	r3, r3, r0
10014fe8:	1ad2      	subs	r2, r2, r3
10014fea:	2a1f      	cmp	r2, #31
10014fec:	dd16      	ble.n	1001501c <__aeabi_ui2d+0x44>
10014fee:	002c      	movs	r4, r5
10014ff0:	4a13      	ldr	r2, [pc, #76]	; (10015040 <__aeabi_ui2d+0x68>)
10014ff2:	2500      	movs	r5, #0
10014ff4:	1ad2      	subs	r2, r2, r3
10014ff6:	4094      	lsls	r4, r2
10014ff8:	055a      	lsls	r2, r3, #21
10014ffa:	0324      	lsls	r4, r4, #12
10014ffc:	0b24      	lsrs	r4, r4, #12
10014ffe:	0d52      	lsrs	r2, r2, #21
10015000:	2100      	movs	r1, #0
10015002:	0324      	lsls	r4, r4, #12
10015004:	0d0b      	lsrs	r3, r1, #20
10015006:	0b24      	lsrs	r4, r4, #12
10015008:	051b      	lsls	r3, r3, #20
1001500a:	4323      	orrs	r3, r4
1001500c:	4c0d      	ldr	r4, [pc, #52]	; (10015044 <__aeabi_ui2d+0x6c>)
1001500e:	0512      	lsls	r2, r2, #20
10015010:	4023      	ands	r3, r4
10015012:	4313      	orrs	r3, r2
10015014:	005b      	lsls	r3, r3, #1
10015016:	0028      	movs	r0, r5
10015018:	0859      	lsrs	r1, r3, #1
1001501a:	bd70      	pop	{r4, r5, r6, pc}
1001501c:	210b      	movs	r1, #11
1001501e:	002c      	movs	r4, r5
10015020:	1a08      	subs	r0, r1, r0
10015022:	40c4      	lsrs	r4, r0
10015024:	4095      	lsls	r5, r2
10015026:	0324      	lsls	r4, r4, #12
10015028:	055a      	lsls	r2, r3, #21
1001502a:	0b24      	lsrs	r4, r4, #12
1001502c:	0d52      	lsrs	r2, r2, #21
1001502e:	e7e7      	b.n	10015000 <__aeabi_ui2d+0x28>
10015030:	2200      	movs	r2, #0
10015032:	2400      	movs	r4, #0
10015034:	e7e4      	b.n	10015000 <__aeabi_ui2d+0x28>
10015036:	46c0      	nop			; (mov r8, r8)
10015038:	0000041e 	.word	0x0000041e
1001503c:	00000433 	.word	0x00000433
10015040:	00000413 	.word	0x00000413
10015044:	800fffff 	.word	0x800fffff

10015048 <__clzsi2>:
10015048:	211c      	movs	r1, #28
1001504a:	2301      	movs	r3, #1
1001504c:	041b      	lsls	r3, r3, #16
1001504e:	4298      	cmp	r0, r3
10015050:	d301      	bcc.n	10015056 <__clzsi2+0xe>
10015052:	0c00      	lsrs	r0, r0, #16
10015054:	3910      	subs	r1, #16
10015056:	0a1b      	lsrs	r3, r3, #8
10015058:	4298      	cmp	r0, r3
1001505a:	d301      	bcc.n	10015060 <__clzsi2+0x18>
1001505c:	0a00      	lsrs	r0, r0, #8
1001505e:	3908      	subs	r1, #8
10015060:	091b      	lsrs	r3, r3, #4
10015062:	4298      	cmp	r0, r3
10015064:	d301      	bcc.n	1001506a <__clzsi2+0x22>
10015066:	0900      	lsrs	r0, r0, #4
10015068:	3904      	subs	r1, #4
1001506a:	a202      	add	r2, pc, #8	; (adr r2, 10015074 <__clzsi2+0x2c>)
1001506c:	5c10      	ldrb	r0, [r2, r0]
1001506e:	1840      	adds	r0, r0, r1
10015070:	4770      	bx	lr
10015072:	46c0      	nop			; (mov r8, r8)
10015074:	02020304 	.word	0x02020304
10015078:	01010101 	.word	0x01010101
	...

10015084 <__libc_init_array>:
10015084:	4b0e      	ldr	r3, [pc, #56]	; (100150c0 <__libc_init_array+0x3c>)
10015086:	b570      	push	{r4, r5, r6, lr}
10015088:	2500      	movs	r5, #0
1001508a:	001e      	movs	r6, r3
1001508c:	4c0d      	ldr	r4, [pc, #52]	; (100150c4 <__libc_init_array+0x40>)
1001508e:	1ae4      	subs	r4, r4, r3
10015090:	10a4      	asrs	r4, r4, #2
10015092:	42a5      	cmp	r5, r4
10015094:	d004      	beq.n	100150a0 <__libc_init_array+0x1c>
10015096:	00ab      	lsls	r3, r5, #2
10015098:	58f3      	ldr	r3, [r6, r3]
1001509a:	4798      	blx	r3
1001509c:	3501      	adds	r5, #1
1001509e:	e7f8      	b.n	10015092 <__libc_init_array+0xe>
100150a0:	f003 f940 	bl	10018324 <_init>
100150a4:	4b08      	ldr	r3, [pc, #32]	; (100150c8 <__libc_init_array+0x44>)
100150a6:	2500      	movs	r5, #0
100150a8:	001e      	movs	r6, r3
100150aa:	4c08      	ldr	r4, [pc, #32]	; (100150cc <__libc_init_array+0x48>)
100150ac:	1ae4      	subs	r4, r4, r3
100150ae:	10a4      	asrs	r4, r4, #2
100150b0:	42a5      	cmp	r5, r4
100150b2:	d004      	beq.n	100150be <__libc_init_array+0x3a>
100150b4:	00ab      	lsls	r3, r5, #2
100150b6:	58f3      	ldr	r3, [r6, r3]
100150b8:	4798      	blx	r3
100150ba:	3501      	adds	r5, #1
100150bc:	e7f8      	b.n	100150b0 <__libc_init_array+0x2c>
100150be:	bd70      	pop	{r4, r5, r6, pc}
100150c0:	10018330 	.word	0x10018330
100150c4:	10018330 	.word	0x10018330
100150c8:	10018330 	.word	0x10018330
100150cc:	10018334 	.word	0x10018334

100150d0 <malloc>:
100150d0:	b510      	push	{r4, lr}
100150d2:	4b03      	ldr	r3, [pc, #12]	; (100150e0 <malloc+0x10>)
100150d4:	0001      	movs	r1, r0
100150d6:	6818      	ldr	r0, [r3, #0]
100150d8:	f000 f86a 	bl	100151b0 <_malloc_r>
100150dc:	bd10      	pop	{r4, pc}
100150de:	46c0      	nop			; (mov r8, r8)
100150e0:	100183ec 	.word	0x100183ec

100150e4 <memcmp>:
100150e4:	b530      	push	{r4, r5, lr}
100150e6:	2400      	movs	r4, #0
100150e8:	42a2      	cmp	r2, r4
100150ea:	d008      	beq.n	100150fe <memcmp+0x1a>
100150ec:	5d03      	ldrb	r3, [r0, r4]
100150ee:	1c65      	adds	r5, r4, #1
100150f0:	5d0c      	ldrb	r4, [r1, r4]
100150f2:	42a3      	cmp	r3, r4
100150f4:	d001      	beq.n	100150fa <memcmp+0x16>
100150f6:	1b18      	subs	r0, r3, r4
100150f8:	e002      	b.n	10015100 <memcmp+0x1c>
100150fa:	002c      	movs	r4, r5
100150fc:	e7f4      	b.n	100150e8 <memcmp+0x4>
100150fe:	2000      	movs	r0, #0
10015100:	bd30      	pop	{r4, r5, pc}

10015102 <memcpy>:
10015102:	2300      	movs	r3, #0
10015104:	b510      	push	{r4, lr}
10015106:	429a      	cmp	r2, r3
10015108:	d003      	beq.n	10015112 <memcpy+0x10>
1001510a:	5ccc      	ldrb	r4, [r1, r3]
1001510c:	54c4      	strb	r4, [r0, r3]
1001510e:	3301      	adds	r3, #1
10015110:	e7f9      	b.n	10015106 <memcpy+0x4>
10015112:	bd10      	pop	{r4, pc}

10015114 <memset>:
10015114:	0003      	movs	r3, r0
10015116:	1882      	adds	r2, r0, r2
10015118:	4293      	cmp	r3, r2
1001511a:	d002      	beq.n	10015122 <memset+0xe>
1001511c:	7019      	strb	r1, [r3, #0]
1001511e:	3301      	adds	r3, #1
10015120:	e7fa      	b.n	10015118 <memset+0x4>
10015122:	4770      	bx	lr

10015124 <_free_r>:
10015124:	b530      	push	{r4, r5, lr}
10015126:	2900      	cmp	r1, #0
10015128:	d03e      	beq.n	100151a8 <_free_r+0x84>
1001512a:	3904      	subs	r1, #4
1001512c:	680b      	ldr	r3, [r1, #0]
1001512e:	2b00      	cmp	r3, #0
10015130:	da00      	bge.n	10015134 <_free_r+0x10>
10015132:	18c9      	adds	r1, r1, r3
10015134:	4a1d      	ldr	r2, [pc, #116]	; (100151ac <_free_r+0x88>)
10015136:	6813      	ldr	r3, [r2, #0]
10015138:	0014      	movs	r4, r2
1001513a:	2b00      	cmp	r3, #0
1001513c:	d102      	bne.n	10015144 <_free_r+0x20>
1001513e:	604b      	str	r3, [r1, #4]
10015140:	6011      	str	r1, [r2, #0]
10015142:	e031      	b.n	100151a8 <_free_r+0x84>
10015144:	428b      	cmp	r3, r1
10015146:	d90d      	bls.n	10015164 <_free_r+0x40>
10015148:	680a      	ldr	r2, [r1, #0]
1001514a:	1888      	adds	r0, r1, r2
1001514c:	4283      	cmp	r3, r0
1001514e:	d103      	bne.n	10015158 <_free_r+0x34>
10015150:	6818      	ldr	r0, [r3, #0]
10015152:	685b      	ldr	r3, [r3, #4]
10015154:	1882      	adds	r2, r0, r2
10015156:	600a      	str	r2, [r1, #0]
10015158:	604b      	str	r3, [r1, #4]
1001515a:	6021      	str	r1, [r4, #0]
1001515c:	e024      	b.n	100151a8 <_free_r+0x84>
1001515e:	428a      	cmp	r2, r1
10015160:	d803      	bhi.n	1001516a <_free_r+0x46>
10015162:	0013      	movs	r3, r2
10015164:	685a      	ldr	r2, [r3, #4]
10015166:	2a00      	cmp	r2, #0
10015168:	d1f9      	bne.n	1001515e <_free_r+0x3a>
1001516a:	681d      	ldr	r5, [r3, #0]
1001516c:	195c      	adds	r4, r3, r5
1001516e:	428c      	cmp	r4, r1
10015170:	d10b      	bne.n	1001518a <_free_r+0x66>
10015172:	6809      	ldr	r1, [r1, #0]
10015174:	1869      	adds	r1, r5, r1
10015176:	1858      	adds	r0, r3, r1
10015178:	6019      	str	r1, [r3, #0]
1001517a:	4282      	cmp	r2, r0
1001517c:	d114      	bne.n	100151a8 <_free_r+0x84>
1001517e:	6810      	ldr	r0, [r2, #0]
10015180:	6852      	ldr	r2, [r2, #4]
10015182:	1841      	adds	r1, r0, r1
10015184:	6019      	str	r1, [r3, #0]
10015186:	605a      	str	r2, [r3, #4]
10015188:	e00e      	b.n	100151a8 <_free_r+0x84>
1001518a:	428c      	cmp	r4, r1
1001518c:	d902      	bls.n	10015194 <_free_r+0x70>
1001518e:	230c      	movs	r3, #12
10015190:	6003      	str	r3, [r0, #0]
10015192:	e009      	b.n	100151a8 <_free_r+0x84>
10015194:	6808      	ldr	r0, [r1, #0]
10015196:	180c      	adds	r4, r1, r0
10015198:	42a2      	cmp	r2, r4
1001519a:	d103      	bne.n	100151a4 <_free_r+0x80>
1001519c:	6814      	ldr	r4, [r2, #0]
1001519e:	6852      	ldr	r2, [r2, #4]
100151a0:	1820      	adds	r0, r4, r0
100151a2:	6008      	str	r0, [r1, #0]
100151a4:	604a      	str	r2, [r1, #4]
100151a6:	6059      	str	r1, [r3, #4]
100151a8:	bd30      	pop	{r4, r5, pc}
100151aa:	46c0      	nop			; (mov r8, r8)
100151ac:	10019ec0 	.word	0x10019ec0

100151b0 <_malloc_r>:
100151b0:	2303      	movs	r3, #3
100151b2:	b570      	push	{r4, r5, r6, lr}
100151b4:	1ccd      	adds	r5, r1, #3
100151b6:	439d      	bics	r5, r3
100151b8:	3508      	adds	r5, #8
100151ba:	0006      	movs	r6, r0
100151bc:	2d0c      	cmp	r5, #12
100151be:	d201      	bcs.n	100151c4 <_malloc_r+0x14>
100151c0:	250c      	movs	r5, #12
100151c2:	e005      	b.n	100151d0 <_malloc_r+0x20>
100151c4:	2d00      	cmp	r5, #0
100151c6:	da03      	bge.n	100151d0 <_malloc_r+0x20>
100151c8:	230c      	movs	r3, #12
100151ca:	2000      	movs	r0, #0
100151cc:	6033      	str	r3, [r6, #0]
100151ce:	e040      	b.n	10015252 <_malloc_r+0xa2>
100151d0:	42a9      	cmp	r1, r5
100151d2:	d8f9      	bhi.n	100151c8 <_malloc_r+0x18>
100151d4:	4b1f      	ldr	r3, [pc, #124]	; (10015254 <_malloc_r+0xa4>)
100151d6:	681c      	ldr	r4, [r3, #0]
100151d8:	001a      	movs	r2, r3
100151da:	0021      	movs	r1, r4
100151dc:	2900      	cmp	r1, #0
100151de:	d013      	beq.n	10015208 <_malloc_r+0x58>
100151e0:	680b      	ldr	r3, [r1, #0]
100151e2:	1b5b      	subs	r3, r3, r5
100151e4:	d40d      	bmi.n	10015202 <_malloc_r+0x52>
100151e6:	2b0b      	cmp	r3, #11
100151e8:	d902      	bls.n	100151f0 <_malloc_r+0x40>
100151ea:	600b      	str	r3, [r1, #0]
100151ec:	18cc      	adds	r4, r1, r3
100151ee:	e01e      	b.n	1001522e <_malloc_r+0x7e>
100151f0:	428c      	cmp	r4, r1
100151f2:	d102      	bne.n	100151fa <_malloc_r+0x4a>
100151f4:	6863      	ldr	r3, [r4, #4]
100151f6:	6013      	str	r3, [r2, #0]
100151f8:	e01a      	b.n	10015230 <_malloc_r+0x80>
100151fa:	684b      	ldr	r3, [r1, #4]
100151fc:	6063      	str	r3, [r4, #4]
100151fe:	000c      	movs	r4, r1
10015200:	e016      	b.n	10015230 <_malloc_r+0x80>
10015202:	000c      	movs	r4, r1
10015204:	6849      	ldr	r1, [r1, #4]
10015206:	e7e9      	b.n	100151dc <_malloc_r+0x2c>
10015208:	4c13      	ldr	r4, [pc, #76]	; (10015258 <_malloc_r+0xa8>)
1001520a:	6823      	ldr	r3, [r4, #0]
1001520c:	2b00      	cmp	r3, #0
1001520e:	d103      	bne.n	10015218 <_malloc_r+0x68>
10015210:	0030      	movs	r0, r6
10015212:	f000 f8f9 	bl	10015408 <_sbrk_r>
10015216:	6020      	str	r0, [r4, #0]
10015218:	0029      	movs	r1, r5
1001521a:	0030      	movs	r0, r6
1001521c:	f000 f8f4 	bl	10015408 <_sbrk_r>
10015220:	1c43      	adds	r3, r0, #1
10015222:	d0d1      	beq.n	100151c8 <_malloc_r+0x18>
10015224:	2303      	movs	r3, #3
10015226:	1cc4      	adds	r4, r0, #3
10015228:	439c      	bics	r4, r3
1001522a:	42a0      	cmp	r0, r4
1001522c:	d10a      	bne.n	10015244 <_malloc_r+0x94>
1001522e:	6025      	str	r5, [r4, #0]
10015230:	0020      	movs	r0, r4
10015232:	2207      	movs	r2, #7
10015234:	300b      	adds	r0, #11
10015236:	1d23      	adds	r3, r4, #4
10015238:	4390      	bics	r0, r2
1001523a:	1ac3      	subs	r3, r0, r3
1001523c:	d009      	beq.n	10015252 <_malloc_r+0xa2>
1001523e:	425a      	negs	r2, r3
10015240:	50e2      	str	r2, [r4, r3]
10015242:	e006      	b.n	10015252 <_malloc_r+0xa2>
10015244:	1a21      	subs	r1, r4, r0
10015246:	0030      	movs	r0, r6
10015248:	f000 f8de 	bl	10015408 <_sbrk_r>
1001524c:	1c43      	adds	r3, r0, #1
1001524e:	d1ee      	bne.n	1001522e <_malloc_r+0x7e>
10015250:	e7ba      	b.n	100151c8 <_malloc_r+0x18>
10015252:	bd70      	pop	{r4, r5, r6, pc}
10015254:	10019ec0 	.word	0x10019ec0
10015258:	10019ebc 	.word	0x10019ebc

1001525c <iprintf>:
1001525c:	b40f      	push	{r0, r1, r2, r3}
1001525e:	4b0b      	ldr	r3, [pc, #44]	; (1001528c <iprintf+0x30>)
10015260:	b513      	push	{r0, r1, r4, lr}
10015262:	681c      	ldr	r4, [r3, #0]
10015264:	2c00      	cmp	r4, #0
10015266:	d005      	beq.n	10015274 <iprintf+0x18>
10015268:	69a3      	ldr	r3, [r4, #24]
1001526a:	2b00      	cmp	r3, #0
1001526c:	d102      	bne.n	10015274 <iprintf+0x18>
1001526e:	0020      	movs	r0, r4
10015270:	f000 fb58 	bl	10015924 <__sinit>
10015274:	ab05      	add	r3, sp, #20
10015276:	9a04      	ldr	r2, [sp, #16]
10015278:	68a1      	ldr	r1, [r4, #8]
1001527a:	0020      	movs	r0, r4
1001527c:	9301      	str	r3, [sp, #4]
1001527e:	f000 fc71 	bl	10015b64 <_vfiprintf_r>
10015282:	bc16      	pop	{r1, r2, r4}
10015284:	bc08      	pop	{r3}
10015286:	b004      	add	sp, #16
10015288:	4718      	bx	r3
1001528a:	46c0      	nop			; (mov r8, r8)
1001528c:	100183ec 	.word	0x100183ec

10015290 <putchar>:
10015290:	4b08      	ldr	r3, [pc, #32]	; (100152b4 <putchar+0x24>)
10015292:	b570      	push	{r4, r5, r6, lr}
10015294:	681c      	ldr	r4, [r3, #0]
10015296:	0005      	movs	r5, r0
10015298:	2c00      	cmp	r4, #0
1001529a:	d005      	beq.n	100152a8 <putchar+0x18>
1001529c:	69a3      	ldr	r3, [r4, #24]
1001529e:	2b00      	cmp	r3, #0
100152a0:	d102      	bne.n	100152a8 <putchar+0x18>
100152a2:	0020      	movs	r0, r4
100152a4:	f000 fb3e 	bl	10015924 <__sinit>
100152a8:	0029      	movs	r1, r5
100152aa:	68a2      	ldr	r2, [r4, #8]
100152ac:	0020      	movs	r0, r4
100152ae:	f000 ff05 	bl	100160bc <_putc_r>
100152b2:	bd70      	pop	{r4, r5, r6, pc}
100152b4:	100183ec 	.word	0x100183ec

100152b8 <_puts_r>:
100152b8:	b570      	push	{r4, r5, r6, lr}
100152ba:	0005      	movs	r5, r0
100152bc:	000e      	movs	r6, r1
100152be:	2800      	cmp	r0, #0
100152c0:	d004      	beq.n	100152cc <_puts_r+0x14>
100152c2:	6983      	ldr	r3, [r0, #24]
100152c4:	2b00      	cmp	r3, #0
100152c6:	d101      	bne.n	100152cc <_puts_r+0x14>
100152c8:	f000 fb2c 	bl	10015924 <__sinit>
100152cc:	69ab      	ldr	r3, [r5, #24]
100152ce:	68ac      	ldr	r4, [r5, #8]
100152d0:	2b00      	cmp	r3, #0
100152d2:	d102      	bne.n	100152da <_puts_r+0x22>
100152d4:	0028      	movs	r0, r5
100152d6:	f000 fb25 	bl	10015924 <__sinit>
100152da:	4b25      	ldr	r3, [pc, #148]	; (10015370 <_puts_r+0xb8>)
100152dc:	429c      	cmp	r4, r3
100152de:	d101      	bne.n	100152e4 <_puts_r+0x2c>
100152e0:	686c      	ldr	r4, [r5, #4]
100152e2:	e008      	b.n	100152f6 <_puts_r+0x3e>
100152e4:	4b23      	ldr	r3, [pc, #140]	; (10015374 <_puts_r+0xbc>)
100152e6:	429c      	cmp	r4, r3
100152e8:	d101      	bne.n	100152ee <_puts_r+0x36>
100152ea:	68ac      	ldr	r4, [r5, #8]
100152ec:	e003      	b.n	100152f6 <_puts_r+0x3e>
100152ee:	4b22      	ldr	r3, [pc, #136]	; (10015378 <_puts_r+0xc0>)
100152f0:	429c      	cmp	r4, r3
100152f2:	d100      	bne.n	100152f6 <_puts_r+0x3e>
100152f4:	68ec      	ldr	r4, [r5, #12]
100152f6:	89a3      	ldrh	r3, [r4, #12]
100152f8:	071b      	lsls	r3, r3, #28
100152fa:	d502      	bpl.n	10015302 <_puts_r+0x4a>
100152fc:	6923      	ldr	r3, [r4, #16]
100152fe:	2b00      	cmp	r3, #0
10015300:	d111      	bne.n	10015326 <_puts_r+0x6e>
10015302:	0021      	movs	r1, r4
10015304:	0028      	movs	r0, r5
10015306:	f000 f9a3 	bl	10015650 <__swsetup_r>
1001530a:	2800      	cmp	r0, #0
1001530c:	d00b      	beq.n	10015326 <_puts_r+0x6e>
1001530e:	2001      	movs	r0, #1
10015310:	4240      	negs	r0, r0
10015312:	e02b      	b.n	1001536c <_puts_r+0xb4>
10015314:	3b01      	subs	r3, #1
10015316:	3601      	adds	r6, #1
10015318:	60a3      	str	r3, [r4, #8]
1001531a:	2b00      	cmp	r3, #0
1001531c:	db08      	blt.n	10015330 <_puts_r+0x78>
1001531e:	6823      	ldr	r3, [r4, #0]
10015320:	1c5a      	adds	r2, r3, #1
10015322:	6022      	str	r2, [r4, #0]
10015324:	7019      	strb	r1, [r3, #0]
10015326:	7831      	ldrb	r1, [r6, #0]
10015328:	68a3      	ldr	r3, [r4, #8]
1001532a:	2900      	cmp	r1, #0
1001532c:	d1f2      	bne.n	10015314 <_puts_r+0x5c>
1001532e:	e00b      	b.n	10015348 <_puts_r+0x90>
10015330:	69a2      	ldr	r2, [r4, #24]
10015332:	4293      	cmp	r3, r2
10015334:	db01      	blt.n	1001533a <_puts_r+0x82>
10015336:	290a      	cmp	r1, #10
10015338:	d1f1      	bne.n	1001531e <_puts_r+0x66>
1001533a:	0022      	movs	r2, r4
1001533c:	0028      	movs	r0, r5
1001533e:	f000 f92f 	bl	100155a0 <__swbuf_r>
10015342:	1c43      	adds	r3, r0, #1
10015344:	d1ef      	bne.n	10015326 <_puts_r+0x6e>
10015346:	e7e2      	b.n	1001530e <_puts_r+0x56>
10015348:	3b01      	subs	r3, #1
1001534a:	60a3      	str	r3, [r4, #8]
1001534c:	2b00      	cmp	r3, #0
1001534e:	da08      	bge.n	10015362 <_puts_r+0xaa>
10015350:	0022      	movs	r2, r4
10015352:	310a      	adds	r1, #10
10015354:	0028      	movs	r0, r5
10015356:	f000 f923 	bl	100155a0 <__swbuf_r>
1001535a:	1c43      	adds	r3, r0, #1
1001535c:	d0d7      	beq.n	1001530e <_puts_r+0x56>
1001535e:	200a      	movs	r0, #10
10015360:	e004      	b.n	1001536c <_puts_r+0xb4>
10015362:	200a      	movs	r0, #10
10015364:	6823      	ldr	r3, [r4, #0]
10015366:	1c5a      	adds	r2, r3, #1
10015368:	6022      	str	r2, [r4, #0]
1001536a:	7018      	strb	r0, [r3, #0]
1001536c:	bd70      	pop	{r4, r5, r6, pc}
1001536e:	46c0      	nop			; (mov r8, r8)
10015370:	10018290 	.word	0x10018290
10015374:	100182b0 	.word	0x100182b0
10015378:	100182d0 	.word	0x100182d0

1001537c <puts>:
1001537c:	b510      	push	{r4, lr}
1001537e:	4b03      	ldr	r3, [pc, #12]	; (1001538c <puts+0x10>)
10015380:	0001      	movs	r1, r0
10015382:	6818      	ldr	r0, [r3, #0]
10015384:	f7ff ff98 	bl	100152b8 <_puts_r>
10015388:	bd10      	pop	{r4, pc}
1001538a:	46c0      	nop			; (mov r8, r8)
1001538c:	100183ec 	.word	0x100183ec

10015390 <rand>:
10015390:	4b15      	ldr	r3, [pc, #84]	; (100153e8 <rand+0x58>)
10015392:	b510      	push	{r4, lr}
10015394:	681c      	ldr	r4, [r3, #0]
10015396:	6ba3      	ldr	r3, [r4, #56]	; 0x38
10015398:	2b00      	cmp	r3, #0
1001539a:	d115      	bne.n	100153c8 <rand+0x38>
1001539c:	2018      	movs	r0, #24
1001539e:	f7ff fe97 	bl	100150d0 <malloc>
100153a2:	4b12      	ldr	r3, [pc, #72]	; (100153ec <rand+0x5c>)
100153a4:	63a0      	str	r0, [r4, #56]	; 0x38
100153a6:	8003      	strh	r3, [r0, #0]
100153a8:	4b11      	ldr	r3, [pc, #68]	; (100153f0 <rand+0x60>)
100153aa:	2201      	movs	r2, #1
100153ac:	8043      	strh	r3, [r0, #2]
100153ae:	4b11      	ldr	r3, [pc, #68]	; (100153f4 <rand+0x64>)
100153b0:	8083      	strh	r3, [r0, #4]
100153b2:	4b11      	ldr	r3, [pc, #68]	; (100153f8 <rand+0x68>)
100153b4:	80c3      	strh	r3, [r0, #6]
100153b6:	4b11      	ldr	r3, [pc, #68]	; (100153fc <rand+0x6c>)
100153b8:	8103      	strh	r3, [r0, #8]
100153ba:	2305      	movs	r3, #5
100153bc:	8143      	strh	r3, [r0, #10]
100153be:	3306      	adds	r3, #6
100153c0:	8183      	strh	r3, [r0, #12]
100153c2:	2300      	movs	r3, #0
100153c4:	6102      	str	r2, [r0, #16]
100153c6:	6143      	str	r3, [r0, #20]
100153c8:	6ba4      	ldr	r4, [r4, #56]	; 0x38
100153ca:	4a0d      	ldr	r2, [pc, #52]	; (10015400 <rand+0x70>)
100153cc:	6920      	ldr	r0, [r4, #16]
100153ce:	6961      	ldr	r1, [r4, #20]
100153d0:	4b0c      	ldr	r3, [pc, #48]	; (10015404 <rand+0x74>)
100153d2:	f7fe f80b 	bl	100133ec <__aeabi_lmul>
100153d6:	2201      	movs	r2, #1
100153d8:	2300      	movs	r3, #0
100153da:	1880      	adds	r0, r0, r2
100153dc:	4159      	adcs	r1, r3
100153de:	6120      	str	r0, [r4, #16]
100153e0:	6161      	str	r1, [r4, #20]
100153e2:	0048      	lsls	r0, r1, #1
100153e4:	0840      	lsrs	r0, r0, #1
100153e6:	bd10      	pop	{r4, pc}
100153e8:	100183ec 	.word	0x100183ec
100153ec:	0000330e 	.word	0x0000330e
100153f0:	ffffabcd 	.word	0xffffabcd
100153f4:	00001234 	.word	0x00001234
100153f8:	ffffe66d 	.word	0xffffe66d
100153fc:	ffffdeec 	.word	0xffffdeec
10015400:	4c957f2d 	.word	0x4c957f2d
10015404:	5851f42d 	.word	0x5851f42d

10015408 <_sbrk_r>:
10015408:	2300      	movs	r3, #0
1001540a:	b570      	push	{r4, r5, r6, lr}
1001540c:	4c06      	ldr	r4, [pc, #24]	; (10015428 <_sbrk_r+0x20>)
1001540e:	0005      	movs	r5, r0
10015410:	0008      	movs	r0, r1
10015412:	6023      	str	r3, [r4, #0]
10015414:	f7f8 f9c8 	bl	1000d7a8 <_sbrk>
10015418:	1c43      	adds	r3, r0, #1
1001541a:	d103      	bne.n	10015424 <_sbrk_r+0x1c>
1001541c:	6823      	ldr	r3, [r4, #0]
1001541e:	2b00      	cmp	r3, #0
10015420:	d000      	beq.n	10015424 <_sbrk_r+0x1c>
10015422:	602b      	str	r3, [r5, #0]
10015424:	bd70      	pop	{r4, r5, r6, pc}
10015426:	46c0      	nop			; (mov r8, r8)
10015428:	1001b290 	.word	0x1001b290

1001542c <setbuf>:
1001542c:	424a      	negs	r2, r1
1001542e:	414a      	adcs	r2, r1
10015430:	2380      	movs	r3, #128	; 0x80
10015432:	b510      	push	{r4, lr}
10015434:	0052      	lsls	r2, r2, #1
10015436:	00db      	lsls	r3, r3, #3
10015438:	f000 f802 	bl	10015440 <setvbuf>
1001543c:	bd10      	pop	{r4, pc}
	...

10015440 <setvbuf>:
10015440:	b5f0      	push	{r4, r5, r6, r7, lr}
10015442:	001d      	movs	r5, r3
10015444:	4b51      	ldr	r3, [pc, #324]	; (1001558c <setvbuf+0x14c>)
10015446:	b085      	sub	sp, #20
10015448:	681e      	ldr	r6, [r3, #0]
1001544a:	0004      	movs	r4, r0
1001544c:	000f      	movs	r7, r1
1001544e:	9200      	str	r2, [sp, #0]
10015450:	2e00      	cmp	r6, #0
10015452:	d005      	beq.n	10015460 <setvbuf+0x20>
10015454:	69b3      	ldr	r3, [r6, #24]
10015456:	2b00      	cmp	r3, #0
10015458:	d102      	bne.n	10015460 <setvbuf+0x20>
1001545a:	0030      	movs	r0, r6
1001545c:	f000 fa62 	bl	10015924 <__sinit>
10015460:	4b4b      	ldr	r3, [pc, #300]	; (10015590 <setvbuf+0x150>)
10015462:	429c      	cmp	r4, r3
10015464:	d101      	bne.n	1001546a <setvbuf+0x2a>
10015466:	6874      	ldr	r4, [r6, #4]
10015468:	e008      	b.n	1001547c <setvbuf+0x3c>
1001546a:	4b4a      	ldr	r3, [pc, #296]	; (10015594 <setvbuf+0x154>)
1001546c:	429c      	cmp	r4, r3
1001546e:	d101      	bne.n	10015474 <setvbuf+0x34>
10015470:	68b4      	ldr	r4, [r6, #8]
10015472:	e003      	b.n	1001547c <setvbuf+0x3c>
10015474:	4b48      	ldr	r3, [pc, #288]	; (10015598 <setvbuf+0x158>)
10015476:	429c      	cmp	r4, r3
10015478:	d100      	bne.n	1001547c <setvbuf+0x3c>
1001547a:	68f4      	ldr	r4, [r6, #12]
1001547c:	9b00      	ldr	r3, [sp, #0]
1001547e:	2b02      	cmp	r3, #2
10015480:	d005      	beq.n	1001548e <setvbuf+0x4e>
10015482:	2b01      	cmp	r3, #1
10015484:	d900      	bls.n	10015488 <setvbuf+0x48>
10015486:	e07c      	b.n	10015582 <setvbuf+0x142>
10015488:	2d00      	cmp	r5, #0
1001548a:	da00      	bge.n	1001548e <setvbuf+0x4e>
1001548c:	e079      	b.n	10015582 <setvbuf+0x142>
1001548e:	0021      	movs	r1, r4
10015490:	0030      	movs	r0, r6
10015492:	f000 f9d9 	bl	10015848 <_fflush_r>
10015496:	6b61      	ldr	r1, [r4, #52]	; 0x34
10015498:	2900      	cmp	r1, #0
1001549a:	d008      	beq.n	100154ae <setvbuf+0x6e>
1001549c:	0023      	movs	r3, r4
1001549e:	3344      	adds	r3, #68	; 0x44
100154a0:	4299      	cmp	r1, r3
100154a2:	d002      	beq.n	100154aa <setvbuf+0x6a>
100154a4:	0030      	movs	r0, r6
100154a6:	f7ff fe3d 	bl	10015124 <_free_r>
100154aa:	2300      	movs	r3, #0
100154ac:	6363      	str	r3, [r4, #52]	; 0x34
100154ae:	2300      	movs	r3, #0
100154b0:	61a3      	str	r3, [r4, #24]
100154b2:	6063      	str	r3, [r4, #4]
100154b4:	89a3      	ldrh	r3, [r4, #12]
100154b6:	061b      	lsls	r3, r3, #24
100154b8:	d503      	bpl.n	100154c2 <setvbuf+0x82>
100154ba:	6921      	ldr	r1, [r4, #16]
100154bc:	0030      	movs	r0, r6
100154be:	f7ff fe31 	bl	10015124 <_free_r>
100154c2:	89a2      	ldrh	r2, [r4, #12]
100154c4:	4b35      	ldr	r3, [pc, #212]	; (1001559c <setvbuf+0x15c>)
100154c6:	4013      	ands	r3, r2
100154c8:	81a3      	strh	r3, [r4, #12]
100154ca:	9b00      	ldr	r3, [sp, #0]
100154cc:	2b02      	cmp	r3, #2
100154ce:	d021      	beq.n	10015514 <setvbuf+0xd4>
100154d0:	ab03      	add	r3, sp, #12
100154d2:	aa02      	add	r2, sp, #8
100154d4:	0021      	movs	r1, r4
100154d6:	0030      	movs	r0, r6
100154d8:	f000 fab8 	bl	10015a4c <__swhatbuf_r>
100154dc:	89a3      	ldrh	r3, [r4, #12]
100154de:	4318      	orrs	r0, r3
100154e0:	81a0      	strh	r0, [r4, #12]
100154e2:	2d00      	cmp	r5, #0
100154e4:	d101      	bne.n	100154ea <setvbuf+0xaa>
100154e6:	9d02      	ldr	r5, [sp, #8]
100154e8:	e001      	b.n	100154ee <setvbuf+0xae>
100154ea:	2f00      	cmp	r7, #0
100154ec:	d125      	bne.n	1001553a <setvbuf+0xfa>
100154ee:	0028      	movs	r0, r5
100154f0:	f7ff fdee 	bl	100150d0 <malloc>
100154f4:	9501      	str	r5, [sp, #4]
100154f6:	1e07      	subs	r7, r0, #0
100154f8:	d11a      	bne.n	10015530 <setvbuf+0xf0>
100154fa:	9b02      	ldr	r3, [sp, #8]
100154fc:	9301      	str	r3, [sp, #4]
100154fe:	42ab      	cmp	r3, r5
10015500:	d102      	bne.n	10015508 <setvbuf+0xc8>
10015502:	2001      	movs	r0, #1
10015504:	4240      	negs	r0, r0
10015506:	e006      	b.n	10015516 <setvbuf+0xd6>
10015508:	9801      	ldr	r0, [sp, #4]
1001550a:	f7ff fde1 	bl	100150d0 <malloc>
1001550e:	1e07      	subs	r7, r0, #0
10015510:	d10e      	bne.n	10015530 <setvbuf+0xf0>
10015512:	e7f6      	b.n	10015502 <setvbuf+0xc2>
10015514:	2000      	movs	r0, #0
10015516:	2202      	movs	r2, #2
10015518:	89a3      	ldrh	r3, [r4, #12]
1001551a:	4313      	orrs	r3, r2
1001551c:	81a3      	strh	r3, [r4, #12]
1001551e:	2300      	movs	r3, #0
10015520:	60a3      	str	r3, [r4, #8]
10015522:	0023      	movs	r3, r4
10015524:	3347      	adds	r3, #71	; 0x47
10015526:	6023      	str	r3, [r4, #0]
10015528:	6123      	str	r3, [r4, #16]
1001552a:	2301      	movs	r3, #1
1001552c:	6163      	str	r3, [r4, #20]
1001552e:	e02a      	b.n	10015586 <setvbuf+0x146>
10015530:	2280      	movs	r2, #128	; 0x80
10015532:	89a3      	ldrh	r3, [r4, #12]
10015534:	9d01      	ldr	r5, [sp, #4]
10015536:	4313      	orrs	r3, r2
10015538:	81a3      	strh	r3, [r4, #12]
1001553a:	69b3      	ldr	r3, [r6, #24]
1001553c:	2b00      	cmp	r3, #0
1001553e:	d102      	bne.n	10015546 <setvbuf+0x106>
10015540:	0030      	movs	r0, r6
10015542:	f000 f9ef 	bl	10015924 <__sinit>
10015546:	9b00      	ldr	r3, [sp, #0]
10015548:	2b01      	cmp	r3, #1
1001554a:	d103      	bne.n	10015554 <setvbuf+0x114>
1001554c:	89a3      	ldrh	r3, [r4, #12]
1001554e:	9a00      	ldr	r2, [sp, #0]
10015550:	431a      	orrs	r2, r3
10015552:	81a2      	strh	r2, [r4, #12]
10015554:	2308      	movs	r3, #8
10015556:	89a2      	ldrh	r2, [r4, #12]
10015558:	6027      	str	r7, [r4, #0]
1001555a:	4013      	ands	r3, r2
1001555c:	6127      	str	r7, [r4, #16]
1001555e:	6165      	str	r5, [r4, #20]
10015560:	1e18      	subs	r0, r3, #0
10015562:	d00c      	beq.n	1001557e <setvbuf+0x13e>
10015564:	2301      	movs	r3, #1
10015566:	401a      	ands	r2, r3
10015568:	2300      	movs	r3, #0
1001556a:	1e10      	subs	r0, r2, #0
1001556c:	4298      	cmp	r0, r3
1001556e:	d004      	beq.n	1001557a <setvbuf+0x13a>
10015570:	426d      	negs	r5, r5
10015572:	60a3      	str	r3, [r4, #8]
10015574:	61a5      	str	r5, [r4, #24]
10015576:	0018      	movs	r0, r3
10015578:	e005      	b.n	10015586 <setvbuf+0x146>
1001557a:	60a5      	str	r5, [r4, #8]
1001557c:	e003      	b.n	10015586 <setvbuf+0x146>
1001557e:	60a3      	str	r3, [r4, #8]
10015580:	e001      	b.n	10015586 <setvbuf+0x146>
10015582:	2001      	movs	r0, #1
10015584:	4240      	negs	r0, r0
10015586:	b005      	add	sp, #20
10015588:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001558a:	46c0      	nop			; (mov r8, r8)
1001558c:	100183ec 	.word	0x100183ec
10015590:	10018290 	.word	0x10018290
10015594:	100182b0 	.word	0x100182b0
10015598:	100182d0 	.word	0x100182d0
1001559c:	fffff35c 	.word	0xfffff35c

100155a0 <__swbuf_r>:
100155a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100155a2:	0005      	movs	r5, r0
100155a4:	000f      	movs	r7, r1
100155a6:	0014      	movs	r4, r2
100155a8:	2800      	cmp	r0, #0
100155aa:	d004      	beq.n	100155b6 <__swbuf_r+0x16>
100155ac:	6983      	ldr	r3, [r0, #24]
100155ae:	2b00      	cmp	r3, #0
100155b0:	d101      	bne.n	100155b6 <__swbuf_r+0x16>
100155b2:	f000 f9b7 	bl	10015924 <__sinit>
100155b6:	4b23      	ldr	r3, [pc, #140]	; (10015644 <__swbuf_r+0xa4>)
100155b8:	429c      	cmp	r4, r3
100155ba:	d101      	bne.n	100155c0 <__swbuf_r+0x20>
100155bc:	686c      	ldr	r4, [r5, #4]
100155be:	e008      	b.n	100155d2 <__swbuf_r+0x32>
100155c0:	4b21      	ldr	r3, [pc, #132]	; (10015648 <__swbuf_r+0xa8>)
100155c2:	429c      	cmp	r4, r3
100155c4:	d101      	bne.n	100155ca <__swbuf_r+0x2a>
100155c6:	68ac      	ldr	r4, [r5, #8]
100155c8:	e003      	b.n	100155d2 <__swbuf_r+0x32>
100155ca:	4b20      	ldr	r3, [pc, #128]	; (1001564c <__swbuf_r+0xac>)
100155cc:	429c      	cmp	r4, r3
100155ce:	d100      	bne.n	100155d2 <__swbuf_r+0x32>
100155d0:	68ec      	ldr	r4, [r5, #12]
100155d2:	69a3      	ldr	r3, [r4, #24]
100155d4:	60a3      	str	r3, [r4, #8]
100155d6:	89a3      	ldrh	r3, [r4, #12]
100155d8:	071b      	lsls	r3, r3, #28
100155da:	d50a      	bpl.n	100155f2 <__swbuf_r+0x52>
100155dc:	6923      	ldr	r3, [r4, #16]
100155de:	2b00      	cmp	r3, #0
100155e0:	d007      	beq.n	100155f2 <__swbuf_r+0x52>
100155e2:	6823      	ldr	r3, [r4, #0]
100155e4:	6922      	ldr	r2, [r4, #16]
100155e6:	b2fe      	uxtb	r6, r7
100155e8:	1a98      	subs	r0, r3, r2
100155ea:	6963      	ldr	r3, [r4, #20]
100155ec:	4298      	cmp	r0, r3
100155ee:	db0f      	blt.n	10015610 <__swbuf_r+0x70>
100155f0:	e008      	b.n	10015604 <__swbuf_r+0x64>
100155f2:	0021      	movs	r1, r4
100155f4:	0028      	movs	r0, r5
100155f6:	f000 f82b 	bl	10015650 <__swsetup_r>
100155fa:	2800      	cmp	r0, #0
100155fc:	d0f1      	beq.n	100155e2 <__swbuf_r+0x42>
100155fe:	2001      	movs	r0, #1
10015600:	4240      	negs	r0, r0
10015602:	e01d      	b.n	10015640 <__swbuf_r+0xa0>
10015604:	0021      	movs	r1, r4
10015606:	0028      	movs	r0, r5
10015608:	f000 f91e 	bl	10015848 <_fflush_r>
1001560c:	2800      	cmp	r0, #0
1001560e:	d1f6      	bne.n	100155fe <__swbuf_r+0x5e>
10015610:	68a3      	ldr	r3, [r4, #8]
10015612:	3001      	adds	r0, #1
10015614:	3b01      	subs	r3, #1
10015616:	60a3      	str	r3, [r4, #8]
10015618:	6823      	ldr	r3, [r4, #0]
1001561a:	1c5a      	adds	r2, r3, #1
1001561c:	6022      	str	r2, [r4, #0]
1001561e:	701f      	strb	r7, [r3, #0]
10015620:	6963      	ldr	r3, [r4, #20]
10015622:	4298      	cmp	r0, r3
10015624:	d005      	beq.n	10015632 <__swbuf_r+0x92>
10015626:	89a3      	ldrh	r3, [r4, #12]
10015628:	0030      	movs	r0, r6
1001562a:	07db      	lsls	r3, r3, #31
1001562c:	d508      	bpl.n	10015640 <__swbuf_r+0xa0>
1001562e:	2e0a      	cmp	r6, #10
10015630:	d106      	bne.n	10015640 <__swbuf_r+0xa0>
10015632:	0021      	movs	r1, r4
10015634:	0028      	movs	r0, r5
10015636:	f000 f907 	bl	10015848 <_fflush_r>
1001563a:	2800      	cmp	r0, #0
1001563c:	d1df      	bne.n	100155fe <__swbuf_r+0x5e>
1001563e:	0030      	movs	r0, r6
10015640:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10015642:	46c0      	nop			; (mov r8, r8)
10015644:	10018290 	.word	0x10018290
10015648:	100182b0 	.word	0x100182b0
1001564c:	100182d0 	.word	0x100182d0

10015650 <__swsetup_r>:
10015650:	4b36      	ldr	r3, [pc, #216]	; (1001572c <__swsetup_r+0xdc>)
10015652:	b570      	push	{r4, r5, r6, lr}
10015654:	681d      	ldr	r5, [r3, #0]
10015656:	0006      	movs	r6, r0
10015658:	000c      	movs	r4, r1
1001565a:	2d00      	cmp	r5, #0
1001565c:	d005      	beq.n	1001566a <__swsetup_r+0x1a>
1001565e:	69ab      	ldr	r3, [r5, #24]
10015660:	2b00      	cmp	r3, #0
10015662:	d102      	bne.n	1001566a <__swsetup_r+0x1a>
10015664:	0028      	movs	r0, r5
10015666:	f000 f95d 	bl	10015924 <__sinit>
1001566a:	4b31      	ldr	r3, [pc, #196]	; (10015730 <__swsetup_r+0xe0>)
1001566c:	429c      	cmp	r4, r3
1001566e:	d101      	bne.n	10015674 <__swsetup_r+0x24>
10015670:	686c      	ldr	r4, [r5, #4]
10015672:	e008      	b.n	10015686 <__swsetup_r+0x36>
10015674:	4b2f      	ldr	r3, [pc, #188]	; (10015734 <__swsetup_r+0xe4>)
10015676:	429c      	cmp	r4, r3
10015678:	d101      	bne.n	1001567e <__swsetup_r+0x2e>
1001567a:	68ac      	ldr	r4, [r5, #8]
1001567c:	e003      	b.n	10015686 <__swsetup_r+0x36>
1001567e:	4b2e      	ldr	r3, [pc, #184]	; (10015738 <__swsetup_r+0xe8>)
10015680:	429c      	cmp	r4, r3
10015682:	d100      	bne.n	10015686 <__swsetup_r+0x36>
10015684:	68ec      	ldr	r4, [r5, #12]
10015686:	220c      	movs	r2, #12
10015688:	5ea3      	ldrsh	r3, [r4, r2]
1001568a:	b29a      	uxth	r2, r3
1001568c:	0711      	lsls	r1, r2, #28
1001568e:	d423      	bmi.n	100156d8 <__swsetup_r+0x88>
10015690:	06d1      	lsls	r1, r2, #27
10015692:	d407      	bmi.n	100156a4 <__swsetup_r+0x54>
10015694:	2209      	movs	r2, #9
10015696:	2001      	movs	r0, #1
10015698:	6032      	str	r2, [r6, #0]
1001569a:	3237      	adds	r2, #55	; 0x37
1001569c:	4313      	orrs	r3, r2
1001569e:	81a3      	strh	r3, [r4, #12]
100156a0:	4240      	negs	r0, r0
100156a2:	e042      	b.n	1001572a <__swsetup_r+0xda>
100156a4:	0753      	lsls	r3, r2, #29
100156a6:	d513      	bpl.n	100156d0 <__swsetup_r+0x80>
100156a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
100156aa:	2900      	cmp	r1, #0
100156ac:	d008      	beq.n	100156c0 <__swsetup_r+0x70>
100156ae:	0023      	movs	r3, r4
100156b0:	3344      	adds	r3, #68	; 0x44
100156b2:	4299      	cmp	r1, r3
100156b4:	d002      	beq.n	100156bc <__swsetup_r+0x6c>
100156b6:	0030      	movs	r0, r6
100156b8:	f7ff fd34 	bl	10015124 <_free_r>
100156bc:	2300      	movs	r3, #0
100156be:	6363      	str	r3, [r4, #52]	; 0x34
100156c0:	2224      	movs	r2, #36	; 0x24
100156c2:	89a3      	ldrh	r3, [r4, #12]
100156c4:	4393      	bics	r3, r2
100156c6:	81a3      	strh	r3, [r4, #12]
100156c8:	2300      	movs	r3, #0
100156ca:	6063      	str	r3, [r4, #4]
100156cc:	6923      	ldr	r3, [r4, #16]
100156ce:	6023      	str	r3, [r4, #0]
100156d0:	2208      	movs	r2, #8
100156d2:	89a3      	ldrh	r3, [r4, #12]
100156d4:	4313      	orrs	r3, r2
100156d6:	81a3      	strh	r3, [r4, #12]
100156d8:	6923      	ldr	r3, [r4, #16]
100156da:	2b00      	cmp	r3, #0
100156dc:	d10b      	bne.n	100156f6 <__swsetup_r+0xa6>
100156de:	23a0      	movs	r3, #160	; 0xa0
100156e0:	89a2      	ldrh	r2, [r4, #12]
100156e2:	009b      	lsls	r3, r3, #2
100156e4:	4013      	ands	r3, r2
100156e6:	2280      	movs	r2, #128	; 0x80
100156e8:	0092      	lsls	r2, r2, #2
100156ea:	4293      	cmp	r3, r2
100156ec:	d003      	beq.n	100156f6 <__swsetup_r+0xa6>
100156ee:	0021      	movs	r1, r4
100156f0:	0030      	movs	r0, r6
100156f2:	f000 f9d1 	bl	10015a98 <__smakebuf_r>
100156f6:	2301      	movs	r3, #1
100156f8:	89a2      	ldrh	r2, [r4, #12]
100156fa:	4013      	ands	r3, r2
100156fc:	d005      	beq.n	1001570a <__swsetup_r+0xba>
100156fe:	2300      	movs	r3, #0
10015700:	60a3      	str	r3, [r4, #8]
10015702:	6963      	ldr	r3, [r4, #20]
10015704:	425b      	negs	r3, r3
10015706:	61a3      	str	r3, [r4, #24]
10015708:	e003      	b.n	10015712 <__swsetup_r+0xc2>
1001570a:	0792      	lsls	r2, r2, #30
1001570c:	d400      	bmi.n	10015710 <__swsetup_r+0xc0>
1001570e:	6963      	ldr	r3, [r4, #20]
10015710:	60a3      	str	r3, [r4, #8]
10015712:	2000      	movs	r0, #0
10015714:	6923      	ldr	r3, [r4, #16]
10015716:	4283      	cmp	r3, r0
10015718:	d107      	bne.n	1001572a <__swsetup_r+0xda>
1001571a:	220c      	movs	r2, #12
1001571c:	5ea3      	ldrsh	r3, [r4, r2]
1001571e:	061a      	lsls	r2, r3, #24
10015720:	d503      	bpl.n	1001572a <__swsetup_r+0xda>
10015722:	2240      	movs	r2, #64	; 0x40
10015724:	4313      	orrs	r3, r2
10015726:	81a3      	strh	r3, [r4, #12]
10015728:	3801      	subs	r0, #1
1001572a:	bd70      	pop	{r4, r5, r6, pc}
1001572c:	100183ec 	.word	0x100183ec
10015730:	10018290 	.word	0x10018290
10015734:	100182b0 	.word	0x100182b0
10015738:	100182d0 	.word	0x100182d0

1001573c <__sflush_r>:
1001573c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1001573e:	898a      	ldrh	r2, [r1, #12]
10015740:	0005      	movs	r5, r0
10015742:	000c      	movs	r4, r1
10015744:	0713      	lsls	r3, r2, #28
10015746:	d45a      	bmi.n	100157fe <__sflush_r+0xc2>
10015748:	684b      	ldr	r3, [r1, #4]
1001574a:	2b00      	cmp	r3, #0
1001574c:	dc02      	bgt.n	10015754 <__sflush_r+0x18>
1001574e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
10015750:	2b00      	cmp	r3, #0
10015752:	dd19      	ble.n	10015788 <__sflush_r+0x4c>
10015754:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
10015756:	2f00      	cmp	r7, #0
10015758:	d016      	beq.n	10015788 <__sflush_r+0x4c>
1001575a:	2300      	movs	r3, #0
1001575c:	682e      	ldr	r6, [r5, #0]
1001575e:	602b      	str	r3, [r5, #0]
10015760:	2380      	movs	r3, #128	; 0x80
10015762:	015b      	lsls	r3, r3, #5
10015764:	401a      	ands	r2, r3
10015766:	d001      	beq.n	1001576c <__sflush_r+0x30>
10015768:	6d60      	ldr	r0, [r4, #84]	; 0x54
1001576a:	e014      	b.n	10015796 <__sflush_r+0x5a>
1001576c:	2301      	movs	r3, #1
1001576e:	6a21      	ldr	r1, [r4, #32]
10015770:	0028      	movs	r0, r5
10015772:	47b8      	blx	r7
10015774:	1c43      	adds	r3, r0, #1
10015776:	d10e      	bne.n	10015796 <__sflush_r+0x5a>
10015778:	682b      	ldr	r3, [r5, #0]
1001577a:	2b00      	cmp	r3, #0
1001577c:	d00b      	beq.n	10015796 <__sflush_r+0x5a>
1001577e:	2b1d      	cmp	r3, #29
10015780:	d001      	beq.n	10015786 <__sflush_r+0x4a>
10015782:	2b16      	cmp	r3, #22
10015784:	d102      	bne.n	1001578c <__sflush_r+0x50>
10015786:	602e      	str	r6, [r5, #0]
10015788:	2000      	movs	r0, #0
1001578a:	e05a      	b.n	10015842 <__sflush_r+0x106>
1001578c:	2240      	movs	r2, #64	; 0x40
1001578e:	89a3      	ldrh	r3, [r4, #12]
10015790:	4313      	orrs	r3, r2
10015792:	81a3      	strh	r3, [r4, #12]
10015794:	e055      	b.n	10015842 <__sflush_r+0x106>
10015796:	89a3      	ldrh	r3, [r4, #12]
10015798:	075b      	lsls	r3, r3, #29
1001579a:	d506      	bpl.n	100157aa <__sflush_r+0x6e>
1001579c:	6863      	ldr	r3, [r4, #4]
1001579e:	1ac0      	subs	r0, r0, r3
100157a0:	6b63      	ldr	r3, [r4, #52]	; 0x34
100157a2:	2b00      	cmp	r3, #0
100157a4:	d001      	beq.n	100157aa <__sflush_r+0x6e>
100157a6:	6c23      	ldr	r3, [r4, #64]	; 0x40
100157a8:	1ac0      	subs	r0, r0, r3
100157aa:	2300      	movs	r3, #0
100157ac:	0002      	movs	r2, r0
100157ae:	6a21      	ldr	r1, [r4, #32]
100157b0:	0028      	movs	r0, r5
100157b2:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
100157b4:	47b8      	blx	r7
100157b6:	89a3      	ldrh	r3, [r4, #12]
100157b8:	1c42      	adds	r2, r0, #1
100157ba:	d106      	bne.n	100157ca <__sflush_r+0x8e>
100157bc:	6829      	ldr	r1, [r5, #0]
100157be:	291d      	cmp	r1, #29
100157c0:	d83a      	bhi.n	10015838 <__sflush_r+0xfc>
100157c2:	4a20      	ldr	r2, [pc, #128]	; (10015844 <__sflush_r+0x108>)
100157c4:	40ca      	lsrs	r2, r1
100157c6:	07d2      	lsls	r2, r2, #31
100157c8:	d536      	bpl.n	10015838 <__sflush_r+0xfc>
100157ca:	2200      	movs	r2, #0
100157cc:	6062      	str	r2, [r4, #4]
100157ce:	6922      	ldr	r2, [r4, #16]
100157d0:	6022      	str	r2, [r4, #0]
100157d2:	04db      	lsls	r3, r3, #19
100157d4:	d505      	bpl.n	100157e2 <__sflush_r+0xa6>
100157d6:	1c43      	adds	r3, r0, #1
100157d8:	d102      	bne.n	100157e0 <__sflush_r+0xa4>
100157da:	682b      	ldr	r3, [r5, #0]
100157dc:	2b00      	cmp	r3, #0
100157de:	d100      	bne.n	100157e2 <__sflush_r+0xa6>
100157e0:	6560      	str	r0, [r4, #84]	; 0x54
100157e2:	6b61      	ldr	r1, [r4, #52]	; 0x34
100157e4:	602e      	str	r6, [r5, #0]
100157e6:	2900      	cmp	r1, #0
100157e8:	d0ce      	beq.n	10015788 <__sflush_r+0x4c>
100157ea:	0023      	movs	r3, r4
100157ec:	3344      	adds	r3, #68	; 0x44
100157ee:	4299      	cmp	r1, r3
100157f0:	d002      	beq.n	100157f8 <__sflush_r+0xbc>
100157f2:	0028      	movs	r0, r5
100157f4:	f7ff fc96 	bl	10015124 <_free_r>
100157f8:	2000      	movs	r0, #0
100157fa:	6360      	str	r0, [r4, #52]	; 0x34
100157fc:	e021      	b.n	10015842 <__sflush_r+0x106>
100157fe:	690f      	ldr	r7, [r1, #16]
10015800:	2f00      	cmp	r7, #0
10015802:	d0c1      	beq.n	10015788 <__sflush_r+0x4c>
10015804:	680b      	ldr	r3, [r1, #0]
10015806:	600f      	str	r7, [r1, #0]
10015808:	1bdb      	subs	r3, r3, r7
1001580a:	9301      	str	r3, [sp, #4]
1001580c:	2300      	movs	r3, #0
1001580e:	0792      	lsls	r2, r2, #30
10015810:	d100      	bne.n	10015814 <__sflush_r+0xd8>
10015812:	694b      	ldr	r3, [r1, #20]
10015814:	60a3      	str	r3, [r4, #8]
10015816:	e003      	b.n	10015820 <__sflush_r+0xe4>
10015818:	9b01      	ldr	r3, [sp, #4]
1001581a:	183f      	adds	r7, r7, r0
1001581c:	1a1b      	subs	r3, r3, r0
1001581e:	9301      	str	r3, [sp, #4]
10015820:	9b01      	ldr	r3, [sp, #4]
10015822:	2b00      	cmp	r3, #0
10015824:	ddb0      	ble.n	10015788 <__sflush_r+0x4c>
10015826:	9b01      	ldr	r3, [sp, #4]
10015828:	003a      	movs	r2, r7
1001582a:	6a21      	ldr	r1, [r4, #32]
1001582c:	0028      	movs	r0, r5
1001582e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
10015830:	47b0      	blx	r6
10015832:	2800      	cmp	r0, #0
10015834:	dcf0      	bgt.n	10015818 <__sflush_r+0xdc>
10015836:	89a3      	ldrh	r3, [r4, #12]
10015838:	2240      	movs	r2, #64	; 0x40
1001583a:	2001      	movs	r0, #1
1001583c:	4313      	orrs	r3, r2
1001583e:	81a3      	strh	r3, [r4, #12]
10015840:	4240      	negs	r0, r0
10015842:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10015844:	20400001 	.word	0x20400001

10015848 <_fflush_r>:
10015848:	690b      	ldr	r3, [r1, #16]
1001584a:	b570      	push	{r4, r5, r6, lr}
1001584c:	0005      	movs	r5, r0
1001584e:	000c      	movs	r4, r1
10015850:	2b00      	cmp	r3, #0
10015852:	d101      	bne.n	10015858 <_fflush_r+0x10>
10015854:	2000      	movs	r0, #0
10015856:	e01c      	b.n	10015892 <_fflush_r+0x4a>
10015858:	2800      	cmp	r0, #0
1001585a:	d004      	beq.n	10015866 <_fflush_r+0x1e>
1001585c:	6983      	ldr	r3, [r0, #24]
1001585e:	2b00      	cmp	r3, #0
10015860:	d101      	bne.n	10015866 <_fflush_r+0x1e>
10015862:	f000 f85f 	bl	10015924 <__sinit>
10015866:	4b0b      	ldr	r3, [pc, #44]	; (10015894 <_fflush_r+0x4c>)
10015868:	429c      	cmp	r4, r3
1001586a:	d101      	bne.n	10015870 <_fflush_r+0x28>
1001586c:	686c      	ldr	r4, [r5, #4]
1001586e:	e008      	b.n	10015882 <_fflush_r+0x3a>
10015870:	4b09      	ldr	r3, [pc, #36]	; (10015898 <_fflush_r+0x50>)
10015872:	429c      	cmp	r4, r3
10015874:	d101      	bne.n	1001587a <_fflush_r+0x32>
10015876:	68ac      	ldr	r4, [r5, #8]
10015878:	e003      	b.n	10015882 <_fflush_r+0x3a>
1001587a:	4b08      	ldr	r3, [pc, #32]	; (1001589c <_fflush_r+0x54>)
1001587c:	429c      	cmp	r4, r3
1001587e:	d100      	bne.n	10015882 <_fflush_r+0x3a>
10015880:	68ec      	ldr	r4, [r5, #12]
10015882:	220c      	movs	r2, #12
10015884:	5ea3      	ldrsh	r3, [r4, r2]
10015886:	2b00      	cmp	r3, #0
10015888:	d0e4      	beq.n	10015854 <_fflush_r+0xc>
1001588a:	0021      	movs	r1, r4
1001588c:	0028      	movs	r0, r5
1001588e:	f7ff ff55 	bl	1001573c <__sflush_r>
10015892:	bd70      	pop	{r4, r5, r6, pc}
10015894:	10018290 	.word	0x10018290
10015898:	100182b0 	.word	0x100182b0
1001589c:	100182d0 	.word	0x100182d0

100158a0 <_cleanup_r>:
100158a0:	b510      	push	{r4, lr}
100158a2:	4902      	ldr	r1, [pc, #8]	; (100158ac <_cleanup_r+0xc>)
100158a4:	f000 f8b0 	bl	10015a08 <_fwalk_reent>
100158a8:	bd10      	pop	{r4, pc}
100158aa:	46c0      	nop			; (mov r8, r8)
100158ac:	10015849 	.word	0x10015849

100158b0 <std.isra.0>:
100158b0:	2300      	movs	r3, #0
100158b2:	b510      	push	{r4, lr}
100158b4:	0004      	movs	r4, r0
100158b6:	6003      	str	r3, [r0, #0]
100158b8:	6043      	str	r3, [r0, #4]
100158ba:	6083      	str	r3, [r0, #8]
100158bc:	8181      	strh	r1, [r0, #12]
100158be:	6643      	str	r3, [r0, #100]	; 0x64
100158c0:	81c2      	strh	r2, [r0, #14]
100158c2:	6103      	str	r3, [r0, #16]
100158c4:	6143      	str	r3, [r0, #20]
100158c6:	6183      	str	r3, [r0, #24]
100158c8:	0019      	movs	r1, r3
100158ca:	2208      	movs	r2, #8
100158cc:	305c      	adds	r0, #92	; 0x5c
100158ce:	f7ff fc21 	bl	10015114 <memset>
100158d2:	4b05      	ldr	r3, [pc, #20]	; (100158e8 <std.isra.0+0x38>)
100158d4:	6224      	str	r4, [r4, #32]
100158d6:	6263      	str	r3, [r4, #36]	; 0x24
100158d8:	4b04      	ldr	r3, [pc, #16]	; (100158ec <std.isra.0+0x3c>)
100158da:	62a3      	str	r3, [r4, #40]	; 0x28
100158dc:	4b04      	ldr	r3, [pc, #16]	; (100158f0 <std.isra.0+0x40>)
100158de:	62e3      	str	r3, [r4, #44]	; 0x2c
100158e0:	4b04      	ldr	r3, [pc, #16]	; (100158f4 <std.isra.0+0x44>)
100158e2:	6323      	str	r3, [r4, #48]	; 0x30
100158e4:	bd10      	pop	{r4, pc}
100158e6:	46c0      	nop			; (mov r8, r8)
100158e8:	10016129 	.word	0x10016129
100158ec:	10016151 	.word	0x10016151
100158f0:	10016189 	.word	0x10016189
100158f4:	100161b5 	.word	0x100161b5

100158f8 <__sfmoreglue>:
100158f8:	b570      	push	{r4, r5, r6, lr}
100158fa:	2568      	movs	r5, #104	; 0x68
100158fc:	1e4b      	subs	r3, r1, #1
100158fe:	435d      	muls	r5, r3
10015900:	000e      	movs	r6, r1
10015902:	0029      	movs	r1, r5
10015904:	3174      	adds	r1, #116	; 0x74
10015906:	f7ff fc53 	bl	100151b0 <_malloc_r>
1001590a:	1e04      	subs	r4, r0, #0
1001590c:	d008      	beq.n	10015920 <__sfmoreglue+0x28>
1001590e:	2100      	movs	r1, #0
10015910:	002a      	movs	r2, r5
10015912:	6001      	str	r1, [r0, #0]
10015914:	6046      	str	r6, [r0, #4]
10015916:	300c      	adds	r0, #12
10015918:	60a0      	str	r0, [r4, #8]
1001591a:	3268      	adds	r2, #104	; 0x68
1001591c:	f7ff fbfa 	bl	10015114 <memset>
10015920:	0020      	movs	r0, r4
10015922:	bd70      	pop	{r4, r5, r6, pc}

10015924 <__sinit>:
10015924:	6983      	ldr	r3, [r0, #24]
10015926:	b513      	push	{r0, r1, r4, lr}
10015928:	0004      	movs	r4, r0
1001592a:	2b00      	cmp	r3, #0
1001592c:	d128      	bne.n	10015980 <__sinit+0x5c>
1001592e:	6483      	str	r3, [r0, #72]	; 0x48
10015930:	64c3      	str	r3, [r0, #76]	; 0x4c
10015932:	6503      	str	r3, [r0, #80]	; 0x50
10015934:	4b13      	ldr	r3, [pc, #76]	; (10015984 <__sinit+0x60>)
10015936:	4a14      	ldr	r2, [pc, #80]	; (10015988 <__sinit+0x64>)
10015938:	681b      	ldr	r3, [r3, #0]
1001593a:	6282      	str	r2, [r0, #40]	; 0x28
1001593c:	9301      	str	r3, [sp, #4]
1001593e:	4298      	cmp	r0, r3
10015940:	d101      	bne.n	10015946 <__sinit+0x22>
10015942:	2301      	movs	r3, #1
10015944:	6183      	str	r3, [r0, #24]
10015946:	0020      	movs	r0, r4
10015948:	f000 f820 	bl	1001598c <__sfp>
1001594c:	6060      	str	r0, [r4, #4]
1001594e:	0020      	movs	r0, r4
10015950:	f000 f81c 	bl	1001598c <__sfp>
10015954:	60a0      	str	r0, [r4, #8]
10015956:	0020      	movs	r0, r4
10015958:	f000 f818 	bl	1001598c <__sfp>
1001595c:	2200      	movs	r2, #0
1001595e:	60e0      	str	r0, [r4, #12]
10015960:	2104      	movs	r1, #4
10015962:	6860      	ldr	r0, [r4, #4]
10015964:	f7ff ffa4 	bl	100158b0 <std.isra.0>
10015968:	2201      	movs	r2, #1
1001596a:	2109      	movs	r1, #9
1001596c:	68a0      	ldr	r0, [r4, #8]
1001596e:	f7ff ff9f 	bl	100158b0 <std.isra.0>
10015972:	2202      	movs	r2, #2
10015974:	2112      	movs	r1, #18
10015976:	68e0      	ldr	r0, [r4, #12]
10015978:	f7ff ff9a 	bl	100158b0 <std.isra.0>
1001597c:	2301      	movs	r3, #1
1001597e:	61a3      	str	r3, [r4, #24]
10015980:	bd13      	pop	{r0, r1, r4, pc}
10015982:	46c0      	nop			; (mov r8, r8)
10015984:	1001828c 	.word	0x1001828c
10015988:	100158a1 	.word	0x100158a1

1001598c <__sfp>:
1001598c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1001598e:	4b1d      	ldr	r3, [pc, #116]	; (10015a04 <__sfp+0x78>)
10015990:	0006      	movs	r6, r0
10015992:	681d      	ldr	r5, [r3, #0]
10015994:	69ab      	ldr	r3, [r5, #24]
10015996:	2b00      	cmp	r3, #0
10015998:	d102      	bne.n	100159a0 <__sfp+0x14>
1001599a:	0028      	movs	r0, r5
1001599c:	f7ff ffc2 	bl	10015924 <__sinit>
100159a0:	3548      	adds	r5, #72	; 0x48
100159a2:	68ac      	ldr	r4, [r5, #8]
100159a4:	686b      	ldr	r3, [r5, #4]
100159a6:	3b01      	subs	r3, #1
100159a8:	d405      	bmi.n	100159b6 <__sfp+0x2a>
100159aa:	220c      	movs	r2, #12
100159ac:	5ea7      	ldrsh	r7, [r4, r2]
100159ae:	2f00      	cmp	r7, #0
100159b0:	d010      	beq.n	100159d4 <__sfp+0x48>
100159b2:	3468      	adds	r4, #104	; 0x68
100159b4:	e7f7      	b.n	100159a6 <__sfp+0x1a>
100159b6:	682b      	ldr	r3, [r5, #0]
100159b8:	2b00      	cmp	r3, #0
100159ba:	d001      	beq.n	100159c0 <__sfp+0x34>
100159bc:	682d      	ldr	r5, [r5, #0]
100159be:	e7f0      	b.n	100159a2 <__sfp+0x16>
100159c0:	2104      	movs	r1, #4
100159c2:	0030      	movs	r0, r6
100159c4:	f7ff ff98 	bl	100158f8 <__sfmoreglue>
100159c8:	6028      	str	r0, [r5, #0]
100159ca:	2800      	cmp	r0, #0
100159cc:	d1f6      	bne.n	100159bc <__sfp+0x30>
100159ce:	230c      	movs	r3, #12
100159d0:	6033      	str	r3, [r6, #0]
100159d2:	e016      	b.n	10015a02 <__sfp+0x76>
100159d4:	2301      	movs	r3, #1
100159d6:	0020      	movs	r0, r4
100159d8:	425b      	negs	r3, r3
100159da:	81e3      	strh	r3, [r4, #14]
100159dc:	3302      	adds	r3, #2
100159de:	81a3      	strh	r3, [r4, #12]
100159e0:	6667      	str	r7, [r4, #100]	; 0x64
100159e2:	6027      	str	r7, [r4, #0]
100159e4:	60a7      	str	r7, [r4, #8]
100159e6:	6067      	str	r7, [r4, #4]
100159e8:	6127      	str	r7, [r4, #16]
100159ea:	6167      	str	r7, [r4, #20]
100159ec:	61a7      	str	r7, [r4, #24]
100159ee:	305c      	adds	r0, #92	; 0x5c
100159f0:	2208      	movs	r2, #8
100159f2:	0039      	movs	r1, r7
100159f4:	f7ff fb8e 	bl	10015114 <memset>
100159f8:	0020      	movs	r0, r4
100159fa:	6367      	str	r7, [r4, #52]	; 0x34
100159fc:	63a7      	str	r7, [r4, #56]	; 0x38
100159fe:	64a7      	str	r7, [r4, #72]	; 0x48
10015a00:	64e7      	str	r7, [r4, #76]	; 0x4c
10015a02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10015a04:	1001828c 	.word	0x1001828c

10015a08 <_fwalk_reent>:
10015a08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10015a0a:	0004      	movs	r4, r0
10015a0c:	0007      	movs	r7, r0
10015a0e:	2600      	movs	r6, #0
10015a10:	9101      	str	r1, [sp, #4]
10015a12:	3448      	adds	r4, #72	; 0x48
10015a14:	2c00      	cmp	r4, #0
10015a16:	d016      	beq.n	10015a46 <_fwalk_reent+0x3e>
10015a18:	6863      	ldr	r3, [r4, #4]
10015a1a:	68a5      	ldr	r5, [r4, #8]
10015a1c:	9300      	str	r3, [sp, #0]
10015a1e:	9b00      	ldr	r3, [sp, #0]
10015a20:	3b01      	subs	r3, #1
10015a22:	9300      	str	r3, [sp, #0]
10015a24:	d40d      	bmi.n	10015a42 <_fwalk_reent+0x3a>
10015a26:	89ab      	ldrh	r3, [r5, #12]
10015a28:	2b01      	cmp	r3, #1
10015a2a:	d908      	bls.n	10015a3e <_fwalk_reent+0x36>
10015a2c:	220e      	movs	r2, #14
10015a2e:	5eab      	ldrsh	r3, [r5, r2]
10015a30:	3301      	adds	r3, #1
10015a32:	d004      	beq.n	10015a3e <_fwalk_reent+0x36>
10015a34:	0029      	movs	r1, r5
10015a36:	0038      	movs	r0, r7
10015a38:	9b01      	ldr	r3, [sp, #4]
10015a3a:	4798      	blx	r3
10015a3c:	4306      	orrs	r6, r0
10015a3e:	3568      	adds	r5, #104	; 0x68
10015a40:	e7ed      	b.n	10015a1e <_fwalk_reent+0x16>
10015a42:	6824      	ldr	r4, [r4, #0]
10015a44:	e7e6      	b.n	10015a14 <_fwalk_reent+0xc>
10015a46:	0030      	movs	r0, r6
10015a48:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

10015a4c <__swhatbuf_r>:
10015a4c:	b570      	push	{r4, r5, r6, lr}
10015a4e:	000e      	movs	r6, r1
10015a50:	001d      	movs	r5, r3
10015a52:	230e      	movs	r3, #14
10015a54:	5ec9      	ldrsh	r1, [r1, r3]
10015a56:	b090      	sub	sp, #64	; 0x40
10015a58:	0014      	movs	r4, r2
10015a5a:	2900      	cmp	r1, #0
10015a5c:	da06      	bge.n	10015a6c <__swhatbuf_r+0x20>
10015a5e:	2300      	movs	r3, #0
10015a60:	602b      	str	r3, [r5, #0]
10015a62:	89b3      	ldrh	r3, [r6, #12]
10015a64:	061b      	lsls	r3, r3, #24
10015a66:	d50f      	bpl.n	10015a88 <__swhatbuf_r+0x3c>
10015a68:	2340      	movs	r3, #64	; 0x40
10015a6a:	e00f      	b.n	10015a8c <__swhatbuf_r+0x40>
10015a6c:	aa01      	add	r2, sp, #4
10015a6e:	f000 fbcd 	bl	1001620c <_fstat_r>
10015a72:	2800      	cmp	r0, #0
10015a74:	dbf3      	blt.n	10015a5e <__swhatbuf_r+0x12>
10015a76:	23f0      	movs	r3, #240	; 0xf0
10015a78:	9a02      	ldr	r2, [sp, #8]
10015a7a:	021b      	lsls	r3, r3, #8
10015a7c:	4013      	ands	r3, r2
10015a7e:	4a05      	ldr	r2, [pc, #20]	; (10015a94 <__swhatbuf_r+0x48>)
10015a80:	189b      	adds	r3, r3, r2
10015a82:	425a      	negs	r2, r3
10015a84:	4153      	adcs	r3, r2
10015a86:	602b      	str	r3, [r5, #0]
10015a88:	2380      	movs	r3, #128	; 0x80
10015a8a:	00db      	lsls	r3, r3, #3
10015a8c:	2000      	movs	r0, #0
10015a8e:	6023      	str	r3, [r4, #0]
10015a90:	b010      	add	sp, #64	; 0x40
10015a92:	bd70      	pop	{r4, r5, r6, pc}
10015a94:	ffffe000 	.word	0xffffe000

10015a98 <__smakebuf_r>:
10015a98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10015a9a:	2602      	movs	r6, #2
10015a9c:	898b      	ldrh	r3, [r1, #12]
10015a9e:	0005      	movs	r5, r0
10015aa0:	000c      	movs	r4, r1
10015aa2:	4233      	tst	r3, r6
10015aa4:	d110      	bne.n	10015ac8 <__smakebuf_r+0x30>
10015aa6:	ab01      	add	r3, sp, #4
10015aa8:	466a      	mov	r2, sp
10015aaa:	f7ff ffcf 	bl	10015a4c <__swhatbuf_r>
10015aae:	9900      	ldr	r1, [sp, #0]
10015ab0:	0007      	movs	r7, r0
10015ab2:	0028      	movs	r0, r5
10015ab4:	f7ff fb7c 	bl	100151b0 <_malloc_r>
10015ab8:	2800      	cmp	r0, #0
10015aba:	d10c      	bne.n	10015ad6 <__smakebuf_r+0x3e>
10015abc:	220c      	movs	r2, #12
10015abe:	5ea3      	ldrsh	r3, [r4, r2]
10015ac0:	059a      	lsls	r2, r3, #22
10015ac2:	d423      	bmi.n	10015b0c <__smakebuf_r+0x74>
10015ac4:	4333      	orrs	r3, r6
10015ac6:	81a3      	strh	r3, [r4, #12]
10015ac8:	0023      	movs	r3, r4
10015aca:	3347      	adds	r3, #71	; 0x47
10015acc:	6023      	str	r3, [r4, #0]
10015ace:	6123      	str	r3, [r4, #16]
10015ad0:	2301      	movs	r3, #1
10015ad2:	6163      	str	r3, [r4, #20]
10015ad4:	e01a      	b.n	10015b0c <__smakebuf_r+0x74>
10015ad6:	2280      	movs	r2, #128	; 0x80
10015ad8:	4b0d      	ldr	r3, [pc, #52]	; (10015b10 <__smakebuf_r+0x78>)
10015ada:	62ab      	str	r3, [r5, #40]	; 0x28
10015adc:	89a3      	ldrh	r3, [r4, #12]
10015ade:	6020      	str	r0, [r4, #0]
10015ae0:	4313      	orrs	r3, r2
10015ae2:	81a3      	strh	r3, [r4, #12]
10015ae4:	9b00      	ldr	r3, [sp, #0]
10015ae6:	6120      	str	r0, [r4, #16]
10015ae8:	6163      	str	r3, [r4, #20]
10015aea:	9b01      	ldr	r3, [sp, #4]
10015aec:	2b00      	cmp	r3, #0
10015aee:	d00a      	beq.n	10015b06 <__smakebuf_r+0x6e>
10015af0:	230e      	movs	r3, #14
10015af2:	5ee1      	ldrsh	r1, [r4, r3]
10015af4:	0028      	movs	r0, r5
10015af6:	f000 fb9b 	bl	10016230 <_isatty_r>
10015afa:	2800      	cmp	r0, #0
10015afc:	d003      	beq.n	10015b06 <__smakebuf_r+0x6e>
10015afe:	2201      	movs	r2, #1
10015b00:	89a3      	ldrh	r3, [r4, #12]
10015b02:	4313      	orrs	r3, r2
10015b04:	81a3      	strh	r3, [r4, #12]
10015b06:	89a3      	ldrh	r3, [r4, #12]
10015b08:	431f      	orrs	r7, r3
10015b0a:	81a7      	strh	r7, [r4, #12]
10015b0c:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
10015b0e:	46c0      	nop			; (mov r8, r8)
10015b10:	100158a1 	.word	0x100158a1

10015b14 <__sfputc_r>:
10015b14:	6893      	ldr	r3, [r2, #8]
10015b16:	b510      	push	{r4, lr}
10015b18:	3b01      	subs	r3, #1
10015b1a:	6093      	str	r3, [r2, #8]
10015b1c:	2b00      	cmp	r3, #0
10015b1e:	da05      	bge.n	10015b2c <__sfputc_r+0x18>
10015b20:	6994      	ldr	r4, [r2, #24]
10015b22:	42a3      	cmp	r3, r4
10015b24:	db08      	blt.n	10015b38 <__sfputc_r+0x24>
10015b26:	b2cb      	uxtb	r3, r1
10015b28:	2b0a      	cmp	r3, #10
10015b2a:	d005      	beq.n	10015b38 <__sfputc_r+0x24>
10015b2c:	6813      	ldr	r3, [r2, #0]
10015b2e:	1c58      	adds	r0, r3, #1
10015b30:	6010      	str	r0, [r2, #0]
10015b32:	7019      	strb	r1, [r3, #0]
10015b34:	b2c8      	uxtb	r0, r1
10015b36:	e001      	b.n	10015b3c <__sfputc_r+0x28>
10015b38:	f7ff fd32 	bl	100155a0 <__swbuf_r>
10015b3c:	bd10      	pop	{r4, pc}

10015b3e <__sfputs_r>:
10015b3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10015b40:	0006      	movs	r6, r0
10015b42:	000f      	movs	r7, r1
10015b44:	0014      	movs	r4, r2
10015b46:	18d5      	adds	r5, r2, r3
10015b48:	42ac      	cmp	r4, r5
10015b4a:	d008      	beq.n	10015b5e <__sfputs_r+0x20>
10015b4c:	7821      	ldrb	r1, [r4, #0]
10015b4e:	003a      	movs	r2, r7
10015b50:	0030      	movs	r0, r6
10015b52:	f7ff ffdf 	bl	10015b14 <__sfputc_r>
10015b56:	3401      	adds	r4, #1
10015b58:	1c43      	adds	r3, r0, #1
10015b5a:	d1f5      	bne.n	10015b48 <__sfputs_r+0xa>
10015b5c:	e000      	b.n	10015b60 <__sfputs_r+0x22>
10015b5e:	2000      	movs	r0, #0
10015b60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

10015b64 <_vfiprintf_r>:
10015b64:	b5f0      	push	{r4, r5, r6, r7, lr}
10015b66:	b09f      	sub	sp, #124	; 0x7c
10015b68:	0006      	movs	r6, r0
10015b6a:	000f      	movs	r7, r1
10015b6c:	9202      	str	r2, [sp, #8]
10015b6e:	9305      	str	r3, [sp, #20]
10015b70:	2800      	cmp	r0, #0
10015b72:	d004      	beq.n	10015b7e <_vfiprintf_r+0x1a>
10015b74:	6983      	ldr	r3, [r0, #24]
10015b76:	2b00      	cmp	r3, #0
10015b78:	d101      	bne.n	10015b7e <_vfiprintf_r+0x1a>
10015b7a:	f7ff fed3 	bl	10015924 <__sinit>
10015b7e:	4b7f      	ldr	r3, [pc, #508]	; (10015d7c <_vfiprintf_r+0x218>)
10015b80:	429f      	cmp	r7, r3
10015b82:	d101      	bne.n	10015b88 <_vfiprintf_r+0x24>
10015b84:	6877      	ldr	r7, [r6, #4]
10015b86:	e008      	b.n	10015b9a <_vfiprintf_r+0x36>
10015b88:	4b7d      	ldr	r3, [pc, #500]	; (10015d80 <_vfiprintf_r+0x21c>)
10015b8a:	429f      	cmp	r7, r3
10015b8c:	d101      	bne.n	10015b92 <_vfiprintf_r+0x2e>
10015b8e:	68b7      	ldr	r7, [r6, #8]
10015b90:	e003      	b.n	10015b9a <_vfiprintf_r+0x36>
10015b92:	4b7c      	ldr	r3, [pc, #496]	; (10015d84 <_vfiprintf_r+0x220>)
10015b94:	429f      	cmp	r7, r3
10015b96:	d100      	bne.n	10015b9a <_vfiprintf_r+0x36>
10015b98:	68f7      	ldr	r7, [r6, #12]
10015b9a:	89bb      	ldrh	r3, [r7, #12]
10015b9c:	071b      	lsls	r3, r3, #28
10015b9e:	d50a      	bpl.n	10015bb6 <_vfiprintf_r+0x52>
10015ba0:	693b      	ldr	r3, [r7, #16]
10015ba2:	2b00      	cmp	r3, #0
10015ba4:	d007      	beq.n	10015bb6 <_vfiprintf_r+0x52>
10015ba6:	2300      	movs	r3, #0
10015ba8:	ad06      	add	r5, sp, #24
10015baa:	616b      	str	r3, [r5, #20]
10015bac:	3320      	adds	r3, #32
10015bae:	766b      	strb	r3, [r5, #25]
10015bb0:	3310      	adds	r3, #16
10015bb2:	76ab      	strb	r3, [r5, #26]
10015bb4:	e03d      	b.n	10015c32 <_vfiprintf_r+0xce>
10015bb6:	0039      	movs	r1, r7
10015bb8:	0030      	movs	r0, r6
10015bba:	f7ff fd49 	bl	10015650 <__swsetup_r>
10015bbe:	2800      	cmp	r0, #0
10015bc0:	d0f1      	beq.n	10015ba6 <_vfiprintf_r+0x42>
10015bc2:	2001      	movs	r0, #1
10015bc4:	4240      	negs	r0, r0
10015bc6:	e0d6      	b.n	10015d76 <_vfiprintf_r+0x212>
10015bc8:	9a05      	ldr	r2, [sp, #20]
10015bca:	1d11      	adds	r1, r2, #4
10015bcc:	6812      	ldr	r2, [r2, #0]
10015bce:	9105      	str	r1, [sp, #20]
10015bd0:	2a00      	cmp	r2, #0
10015bd2:	da00      	bge.n	10015bd6 <_vfiprintf_r+0x72>
10015bd4:	e07f      	b.n	10015cd6 <_vfiprintf_r+0x172>
10015bd6:	9209      	str	r2, [sp, #36]	; 0x24
10015bd8:	3401      	adds	r4, #1
10015bda:	7823      	ldrb	r3, [r4, #0]
10015bdc:	2b2e      	cmp	r3, #46	; 0x2e
10015bde:	d100      	bne.n	10015be2 <_vfiprintf_r+0x7e>
10015be0:	e08d      	b.n	10015cfe <_vfiprintf_r+0x19a>
10015be2:	7821      	ldrb	r1, [r4, #0]
10015be4:	2203      	movs	r2, #3
10015be6:	4868      	ldr	r0, [pc, #416]	; (10015d88 <_vfiprintf_r+0x224>)
10015be8:	f000 fb48 	bl	1001627c <memchr>
10015bec:	2800      	cmp	r0, #0
10015bee:	d007      	beq.n	10015c00 <_vfiprintf_r+0x9c>
10015bf0:	4b65      	ldr	r3, [pc, #404]	; (10015d88 <_vfiprintf_r+0x224>)
10015bf2:	682a      	ldr	r2, [r5, #0]
10015bf4:	1ac0      	subs	r0, r0, r3
10015bf6:	2340      	movs	r3, #64	; 0x40
10015bf8:	4083      	lsls	r3, r0
10015bfa:	4313      	orrs	r3, r2
10015bfc:	602b      	str	r3, [r5, #0]
10015bfe:	3401      	adds	r4, #1
10015c00:	7821      	ldrb	r1, [r4, #0]
10015c02:	1c63      	adds	r3, r4, #1
10015c04:	2206      	movs	r2, #6
10015c06:	4861      	ldr	r0, [pc, #388]	; (10015d8c <_vfiprintf_r+0x228>)
10015c08:	9302      	str	r3, [sp, #8]
10015c0a:	7629      	strb	r1, [r5, #24]
10015c0c:	f000 fb36 	bl	1001627c <memchr>
10015c10:	2800      	cmp	r0, #0
10015c12:	d100      	bne.n	10015c16 <_vfiprintf_r+0xb2>
10015c14:	e09d      	b.n	10015d52 <_vfiprintf_r+0x1ee>
10015c16:	4b5e      	ldr	r3, [pc, #376]	; (10015d90 <_vfiprintf_r+0x22c>)
10015c18:	2b00      	cmp	r3, #0
10015c1a:	d000      	beq.n	10015c1e <_vfiprintf_r+0xba>
10015c1c:	e090      	b.n	10015d40 <_vfiprintf_r+0x1dc>
10015c1e:	2207      	movs	r2, #7
10015c20:	9b05      	ldr	r3, [sp, #20]
10015c22:	3307      	adds	r3, #7
10015c24:	4393      	bics	r3, r2
10015c26:	3308      	adds	r3, #8
10015c28:	9305      	str	r3, [sp, #20]
10015c2a:	696b      	ldr	r3, [r5, #20]
10015c2c:	9a03      	ldr	r2, [sp, #12]
10015c2e:	189b      	adds	r3, r3, r2
10015c30:	616b      	str	r3, [r5, #20]
10015c32:	9c02      	ldr	r4, [sp, #8]
10015c34:	7823      	ldrb	r3, [r4, #0]
10015c36:	2b00      	cmp	r3, #0
10015c38:	d104      	bne.n	10015c44 <_vfiprintf_r+0xe0>
10015c3a:	9b02      	ldr	r3, [sp, #8]
10015c3c:	1ae3      	subs	r3, r4, r3
10015c3e:	9304      	str	r3, [sp, #16]
10015c40:	d012      	beq.n	10015c68 <_vfiprintf_r+0x104>
10015c42:	e003      	b.n	10015c4c <_vfiprintf_r+0xe8>
10015c44:	2b25      	cmp	r3, #37	; 0x25
10015c46:	d0f8      	beq.n	10015c3a <_vfiprintf_r+0xd6>
10015c48:	3401      	adds	r4, #1
10015c4a:	e7f3      	b.n	10015c34 <_vfiprintf_r+0xd0>
10015c4c:	9b04      	ldr	r3, [sp, #16]
10015c4e:	9a02      	ldr	r2, [sp, #8]
10015c50:	0039      	movs	r1, r7
10015c52:	0030      	movs	r0, r6
10015c54:	f7ff ff73 	bl	10015b3e <__sfputs_r>
10015c58:	1c43      	adds	r3, r0, #1
10015c5a:	d100      	bne.n	10015c5e <_vfiprintf_r+0xfa>
10015c5c:	e086      	b.n	10015d6c <_vfiprintf_r+0x208>
10015c5e:	696a      	ldr	r2, [r5, #20]
10015c60:	9b04      	ldr	r3, [sp, #16]
10015c62:	4694      	mov	ip, r2
10015c64:	4463      	add	r3, ip
10015c66:	616b      	str	r3, [r5, #20]
10015c68:	7823      	ldrb	r3, [r4, #0]
10015c6a:	2b00      	cmp	r3, #0
10015c6c:	d07e      	beq.n	10015d6c <_vfiprintf_r+0x208>
10015c6e:	2201      	movs	r2, #1
10015c70:	2300      	movs	r3, #0
10015c72:	4252      	negs	r2, r2
10015c74:	606a      	str	r2, [r5, #4]
10015c76:	a902      	add	r1, sp, #8
10015c78:	3254      	adds	r2, #84	; 0x54
10015c7a:	1852      	adds	r2, r2, r1
10015c7c:	3401      	adds	r4, #1
10015c7e:	602b      	str	r3, [r5, #0]
10015c80:	60eb      	str	r3, [r5, #12]
10015c82:	60ab      	str	r3, [r5, #8]
10015c84:	7013      	strb	r3, [r2, #0]
10015c86:	65ab      	str	r3, [r5, #88]	; 0x58
10015c88:	7821      	ldrb	r1, [r4, #0]
10015c8a:	2205      	movs	r2, #5
10015c8c:	4841      	ldr	r0, [pc, #260]	; (10015d94 <_vfiprintf_r+0x230>)
10015c8e:	f000 faf5 	bl	1001627c <memchr>
10015c92:	2800      	cmp	r0, #0
10015c94:	d008      	beq.n	10015ca8 <_vfiprintf_r+0x144>
10015c96:	4b3f      	ldr	r3, [pc, #252]	; (10015d94 <_vfiprintf_r+0x230>)
10015c98:	682a      	ldr	r2, [r5, #0]
10015c9a:	1ac0      	subs	r0, r0, r3
10015c9c:	2301      	movs	r3, #1
10015c9e:	4083      	lsls	r3, r0
10015ca0:	4313      	orrs	r3, r2
10015ca2:	602b      	str	r3, [r5, #0]
10015ca4:	3401      	adds	r4, #1
10015ca6:	e7ef      	b.n	10015c88 <_vfiprintf_r+0x124>
10015ca8:	682b      	ldr	r3, [r5, #0]
10015caa:	06da      	lsls	r2, r3, #27
10015cac:	d504      	bpl.n	10015cb8 <_vfiprintf_r+0x154>
10015cae:	2253      	movs	r2, #83	; 0x53
10015cb0:	2120      	movs	r1, #32
10015cb2:	a802      	add	r0, sp, #8
10015cb4:	1812      	adds	r2, r2, r0
10015cb6:	7011      	strb	r1, [r2, #0]
10015cb8:	071a      	lsls	r2, r3, #28
10015cba:	d504      	bpl.n	10015cc6 <_vfiprintf_r+0x162>
10015cbc:	2253      	movs	r2, #83	; 0x53
10015cbe:	212b      	movs	r1, #43	; 0x2b
10015cc0:	a802      	add	r0, sp, #8
10015cc2:	1812      	adds	r2, r2, r0
10015cc4:	7011      	strb	r1, [r2, #0]
10015cc6:	7822      	ldrb	r2, [r4, #0]
10015cc8:	2a2a      	cmp	r2, #42	; 0x2a
10015cca:	d100      	bne.n	10015cce <_vfiprintf_r+0x16a>
10015ccc:	e77c      	b.n	10015bc8 <_vfiprintf_r+0x64>
10015cce:	9b09      	ldr	r3, [sp, #36]	; 0x24
10015cd0:	2000      	movs	r0, #0
10015cd2:	210a      	movs	r1, #10
10015cd4:	e005      	b.n	10015ce2 <_vfiprintf_r+0x17e>
10015cd6:	4252      	negs	r2, r2
10015cd8:	60ea      	str	r2, [r5, #12]
10015cda:	2202      	movs	r2, #2
10015cdc:	4313      	orrs	r3, r2
10015cde:	602b      	str	r3, [r5, #0]
10015ce0:	e77a      	b.n	10015bd8 <_vfiprintf_r+0x74>
10015ce2:	7822      	ldrb	r2, [r4, #0]
10015ce4:	3a30      	subs	r2, #48	; 0x30
10015ce6:	2a09      	cmp	r2, #9
10015ce8:	d804      	bhi.n	10015cf4 <_vfiprintf_r+0x190>
10015cea:	434b      	muls	r3, r1
10015cec:	3401      	adds	r4, #1
10015cee:	189b      	adds	r3, r3, r2
10015cf0:	2001      	movs	r0, #1
10015cf2:	e7f6      	b.n	10015ce2 <_vfiprintf_r+0x17e>
10015cf4:	2800      	cmp	r0, #0
10015cf6:	d100      	bne.n	10015cfa <_vfiprintf_r+0x196>
10015cf8:	e76f      	b.n	10015bda <_vfiprintf_r+0x76>
10015cfa:	9309      	str	r3, [sp, #36]	; 0x24
10015cfc:	e76d      	b.n	10015bda <_vfiprintf_r+0x76>
10015cfe:	7863      	ldrb	r3, [r4, #1]
10015d00:	2b2a      	cmp	r3, #42	; 0x2a
10015d02:	d10a      	bne.n	10015d1a <_vfiprintf_r+0x1b6>
10015d04:	9b05      	ldr	r3, [sp, #20]
10015d06:	3402      	adds	r4, #2
10015d08:	1d1a      	adds	r2, r3, #4
10015d0a:	681b      	ldr	r3, [r3, #0]
10015d0c:	9205      	str	r2, [sp, #20]
10015d0e:	2b00      	cmp	r3, #0
10015d10:	da01      	bge.n	10015d16 <_vfiprintf_r+0x1b2>
10015d12:	2301      	movs	r3, #1
10015d14:	425b      	negs	r3, r3
10015d16:	9307      	str	r3, [sp, #28]
10015d18:	e763      	b.n	10015be2 <_vfiprintf_r+0x7e>
10015d1a:	2300      	movs	r3, #0
10015d1c:	200a      	movs	r0, #10
10015d1e:	001a      	movs	r2, r3
10015d20:	3401      	adds	r4, #1
10015d22:	606b      	str	r3, [r5, #4]
10015d24:	7821      	ldrb	r1, [r4, #0]
10015d26:	3930      	subs	r1, #48	; 0x30
10015d28:	2909      	cmp	r1, #9
10015d2a:	d804      	bhi.n	10015d36 <_vfiprintf_r+0x1d2>
10015d2c:	4342      	muls	r2, r0
10015d2e:	3401      	adds	r4, #1
10015d30:	1852      	adds	r2, r2, r1
10015d32:	2301      	movs	r3, #1
10015d34:	e7f6      	b.n	10015d24 <_vfiprintf_r+0x1c0>
10015d36:	2b00      	cmp	r3, #0
10015d38:	d100      	bne.n	10015d3c <_vfiprintf_r+0x1d8>
10015d3a:	e752      	b.n	10015be2 <_vfiprintf_r+0x7e>
10015d3c:	9207      	str	r2, [sp, #28]
10015d3e:	e750      	b.n	10015be2 <_vfiprintf_r+0x7e>
10015d40:	ab05      	add	r3, sp, #20
10015d42:	9300      	str	r3, [sp, #0]
10015d44:	003a      	movs	r2, r7
10015d46:	4b14      	ldr	r3, [pc, #80]	; (10015d98 <_vfiprintf_r+0x234>)
10015d48:	0029      	movs	r1, r5
10015d4a:	0030      	movs	r0, r6
10015d4c:	e000      	b.n	10015d50 <_vfiprintf_r+0x1ec>
10015d4e:	bf00      	nop
10015d50:	e007      	b.n	10015d62 <_vfiprintf_r+0x1fe>
10015d52:	ab05      	add	r3, sp, #20
10015d54:	9300      	str	r3, [sp, #0]
10015d56:	003a      	movs	r2, r7
10015d58:	4b0f      	ldr	r3, [pc, #60]	; (10015d98 <_vfiprintf_r+0x234>)
10015d5a:	0029      	movs	r1, r5
10015d5c:	0030      	movs	r0, r6
10015d5e:	f000 f88b 	bl	10015e78 <_printf_i>
10015d62:	9003      	str	r0, [sp, #12]
10015d64:	9b03      	ldr	r3, [sp, #12]
10015d66:	3301      	adds	r3, #1
10015d68:	d000      	beq.n	10015d6c <_vfiprintf_r+0x208>
10015d6a:	e75e      	b.n	10015c2a <_vfiprintf_r+0xc6>
10015d6c:	89bb      	ldrh	r3, [r7, #12]
10015d6e:	065b      	lsls	r3, r3, #25
10015d70:	d500      	bpl.n	10015d74 <_vfiprintf_r+0x210>
10015d72:	e726      	b.n	10015bc2 <_vfiprintf_r+0x5e>
10015d74:	980b      	ldr	r0, [sp, #44]	; 0x2c
10015d76:	b01f      	add	sp, #124	; 0x7c
10015d78:	bdf0      	pop	{r4, r5, r6, r7, pc}
10015d7a:	46c0      	nop			; (mov r8, r8)
10015d7c:	10018290 	.word	0x10018290
10015d80:	100182b0 	.word	0x100182b0
10015d84:	100182d0 	.word	0x100182d0
10015d88:	100182f6 	.word	0x100182f6
10015d8c:	100182fa 	.word	0x100182fa
10015d90:	00000000 	.word	0x00000000
10015d94:	100182f0 	.word	0x100182f0
10015d98:	10015b3f 	.word	0x10015b3f

10015d9c <_printf_common>:
10015d9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10015d9e:	0017      	movs	r7, r2
10015da0:	9301      	str	r3, [sp, #4]
10015da2:	688a      	ldr	r2, [r1, #8]
10015da4:	690b      	ldr	r3, [r1, #16]
10015da6:	9000      	str	r0, [sp, #0]
10015da8:	000c      	movs	r4, r1
10015daa:	4293      	cmp	r3, r2
10015dac:	da00      	bge.n	10015db0 <_printf_common+0x14>
10015dae:	0013      	movs	r3, r2
10015db0:	0022      	movs	r2, r4
10015db2:	603b      	str	r3, [r7, #0]
10015db4:	3243      	adds	r2, #67	; 0x43
10015db6:	7812      	ldrb	r2, [r2, #0]
10015db8:	2a00      	cmp	r2, #0
10015dba:	d001      	beq.n	10015dc0 <_printf_common+0x24>
10015dbc:	3301      	adds	r3, #1
10015dbe:	603b      	str	r3, [r7, #0]
10015dc0:	6823      	ldr	r3, [r4, #0]
10015dc2:	069b      	lsls	r3, r3, #26
10015dc4:	d502      	bpl.n	10015dcc <_printf_common+0x30>
10015dc6:	683b      	ldr	r3, [r7, #0]
10015dc8:	3302      	adds	r3, #2
10015dca:	603b      	str	r3, [r7, #0]
10015dcc:	2506      	movs	r5, #6
10015dce:	6823      	ldr	r3, [r4, #0]
10015dd0:	401d      	ands	r5, r3
10015dd2:	d01e      	beq.n	10015e12 <_printf_common+0x76>
10015dd4:	0023      	movs	r3, r4
10015dd6:	3343      	adds	r3, #67	; 0x43
10015dd8:	781b      	ldrb	r3, [r3, #0]
10015dda:	1e5a      	subs	r2, r3, #1
10015ddc:	4193      	sbcs	r3, r2
10015dde:	6822      	ldr	r2, [r4, #0]
10015de0:	0692      	lsls	r2, r2, #26
10015de2:	d51c      	bpl.n	10015e1e <_printf_common+0x82>
10015de4:	2030      	movs	r0, #48	; 0x30
10015de6:	18e1      	adds	r1, r4, r3
10015de8:	3143      	adds	r1, #67	; 0x43
10015dea:	7008      	strb	r0, [r1, #0]
10015dec:	0021      	movs	r1, r4
10015dee:	1c5a      	adds	r2, r3, #1
10015df0:	3145      	adds	r1, #69	; 0x45
10015df2:	7809      	ldrb	r1, [r1, #0]
10015df4:	18a2      	adds	r2, r4, r2
10015df6:	3243      	adds	r2, #67	; 0x43
10015df8:	3302      	adds	r3, #2
10015dfa:	7011      	strb	r1, [r2, #0]
10015dfc:	e00f      	b.n	10015e1e <_printf_common+0x82>
10015dfe:	0022      	movs	r2, r4
10015e00:	2301      	movs	r3, #1
10015e02:	3219      	adds	r2, #25
10015e04:	9901      	ldr	r1, [sp, #4]
10015e06:	9800      	ldr	r0, [sp, #0]
10015e08:	9e08      	ldr	r6, [sp, #32]
10015e0a:	47b0      	blx	r6
10015e0c:	1c43      	adds	r3, r0, #1
10015e0e:	d00e      	beq.n	10015e2e <_printf_common+0x92>
10015e10:	3501      	adds	r5, #1
10015e12:	68e3      	ldr	r3, [r4, #12]
10015e14:	683a      	ldr	r2, [r7, #0]
10015e16:	1a9b      	subs	r3, r3, r2
10015e18:	429d      	cmp	r5, r3
10015e1a:	dbf0      	blt.n	10015dfe <_printf_common+0x62>
10015e1c:	e7da      	b.n	10015dd4 <_printf_common+0x38>
10015e1e:	0022      	movs	r2, r4
10015e20:	9901      	ldr	r1, [sp, #4]
10015e22:	3243      	adds	r2, #67	; 0x43
10015e24:	9800      	ldr	r0, [sp, #0]
10015e26:	9d08      	ldr	r5, [sp, #32]
10015e28:	47a8      	blx	r5
10015e2a:	1c43      	adds	r3, r0, #1
10015e2c:	d102      	bne.n	10015e34 <_printf_common+0x98>
10015e2e:	2001      	movs	r0, #1
10015e30:	4240      	negs	r0, r0
10015e32:	e020      	b.n	10015e76 <_printf_common+0xda>
10015e34:	2306      	movs	r3, #6
10015e36:	6820      	ldr	r0, [r4, #0]
10015e38:	68e1      	ldr	r1, [r4, #12]
10015e3a:	683a      	ldr	r2, [r7, #0]
10015e3c:	4003      	ands	r3, r0
10015e3e:	2500      	movs	r5, #0
10015e40:	2b04      	cmp	r3, #4
10015e42:	d103      	bne.n	10015e4c <_printf_common+0xb0>
10015e44:	1a8d      	subs	r5, r1, r2
10015e46:	43eb      	mvns	r3, r5
10015e48:	17db      	asrs	r3, r3, #31
10015e4a:	401d      	ands	r5, r3
10015e4c:	68a3      	ldr	r3, [r4, #8]
10015e4e:	6922      	ldr	r2, [r4, #16]
10015e50:	4293      	cmp	r3, r2
10015e52:	dd01      	ble.n	10015e58 <_printf_common+0xbc>
10015e54:	1a9b      	subs	r3, r3, r2
10015e56:	18ed      	adds	r5, r5, r3
10015e58:	2700      	movs	r7, #0
10015e5a:	42bd      	cmp	r5, r7
10015e5c:	d00a      	beq.n	10015e74 <_printf_common+0xd8>
10015e5e:	0022      	movs	r2, r4
10015e60:	2301      	movs	r3, #1
10015e62:	321a      	adds	r2, #26
10015e64:	9901      	ldr	r1, [sp, #4]
10015e66:	9800      	ldr	r0, [sp, #0]
10015e68:	9e08      	ldr	r6, [sp, #32]
10015e6a:	47b0      	blx	r6
10015e6c:	1c43      	adds	r3, r0, #1
10015e6e:	d0de      	beq.n	10015e2e <_printf_common+0x92>
10015e70:	3701      	adds	r7, #1
10015e72:	e7f2      	b.n	10015e5a <_printf_common+0xbe>
10015e74:	2000      	movs	r0, #0
10015e76:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

10015e78 <_printf_i>:
10015e78:	b5f0      	push	{r4, r5, r6, r7, lr}
10015e7a:	b08b      	sub	sp, #44	; 0x2c
10015e7c:	9206      	str	r2, [sp, #24]
10015e7e:	000a      	movs	r2, r1
10015e80:	3243      	adds	r2, #67	; 0x43
10015e82:	9307      	str	r3, [sp, #28]
10015e84:	9005      	str	r0, [sp, #20]
10015e86:	9204      	str	r2, [sp, #16]
10015e88:	7e0a      	ldrb	r2, [r1, #24]
10015e8a:	000c      	movs	r4, r1
10015e8c:	9b10      	ldr	r3, [sp, #64]	; 0x40
10015e8e:	2a6e      	cmp	r2, #110	; 0x6e
10015e90:	d100      	bne.n	10015e94 <_printf_i+0x1c>
10015e92:	e0ab      	b.n	10015fec <_printf_i+0x174>
10015e94:	d811      	bhi.n	10015eba <_printf_i+0x42>
10015e96:	2a63      	cmp	r2, #99	; 0x63
10015e98:	d022      	beq.n	10015ee0 <_printf_i+0x68>
10015e9a:	d809      	bhi.n	10015eb0 <_printf_i+0x38>
10015e9c:	2a00      	cmp	r2, #0
10015e9e:	d100      	bne.n	10015ea2 <_printf_i+0x2a>
10015ea0:	e0b5      	b.n	1001600e <_printf_i+0x196>
10015ea2:	2a58      	cmp	r2, #88	; 0x58
10015ea4:	d000      	beq.n	10015ea8 <_printf_i+0x30>
10015ea6:	e0c5      	b.n	10016034 <_printf_i+0x1bc>
10015ea8:	3145      	adds	r1, #69	; 0x45
10015eaa:	700a      	strb	r2, [r1, #0]
10015eac:	4a81      	ldr	r2, [pc, #516]	; (100160b4 <_printf_i+0x23c>)
10015eae:	e04f      	b.n	10015f50 <_printf_i+0xd8>
10015eb0:	2a64      	cmp	r2, #100	; 0x64
10015eb2:	d01d      	beq.n	10015ef0 <_printf_i+0x78>
10015eb4:	2a69      	cmp	r2, #105	; 0x69
10015eb6:	d01b      	beq.n	10015ef0 <_printf_i+0x78>
10015eb8:	e0bc      	b.n	10016034 <_printf_i+0x1bc>
10015eba:	2a73      	cmp	r2, #115	; 0x73
10015ebc:	d100      	bne.n	10015ec0 <_printf_i+0x48>
10015ebe:	e0aa      	b.n	10016016 <_printf_i+0x19e>
10015ec0:	d809      	bhi.n	10015ed6 <_printf_i+0x5e>
10015ec2:	2a6f      	cmp	r2, #111	; 0x6f
10015ec4:	d029      	beq.n	10015f1a <_printf_i+0xa2>
10015ec6:	2a70      	cmp	r2, #112	; 0x70
10015ec8:	d000      	beq.n	10015ecc <_printf_i+0x54>
10015eca:	e0b3      	b.n	10016034 <_printf_i+0x1bc>
10015ecc:	2220      	movs	r2, #32
10015ece:	6809      	ldr	r1, [r1, #0]
10015ed0:	430a      	orrs	r2, r1
10015ed2:	6022      	str	r2, [r4, #0]
10015ed4:	e037      	b.n	10015f46 <_printf_i+0xce>
10015ed6:	2a75      	cmp	r2, #117	; 0x75
10015ed8:	d01f      	beq.n	10015f1a <_printf_i+0xa2>
10015eda:	2a78      	cmp	r2, #120	; 0x78
10015edc:	d033      	beq.n	10015f46 <_printf_i+0xce>
10015ede:	e0a9      	b.n	10016034 <_printf_i+0x1bc>
10015ee0:	000e      	movs	r6, r1
10015ee2:	681a      	ldr	r2, [r3, #0]
10015ee4:	3642      	adds	r6, #66	; 0x42
10015ee6:	1d11      	adds	r1, r2, #4
10015ee8:	6019      	str	r1, [r3, #0]
10015eea:	6813      	ldr	r3, [r2, #0]
10015eec:	7033      	strb	r3, [r6, #0]
10015eee:	e0a4      	b.n	1001603a <_printf_i+0x1c2>
10015ef0:	6821      	ldr	r1, [r4, #0]
10015ef2:	681a      	ldr	r2, [r3, #0]
10015ef4:	0608      	lsls	r0, r1, #24
10015ef6:	d406      	bmi.n	10015f06 <_printf_i+0x8e>
10015ef8:	0649      	lsls	r1, r1, #25
10015efa:	d504      	bpl.n	10015f06 <_printf_i+0x8e>
10015efc:	1d11      	adds	r1, r2, #4
10015efe:	6019      	str	r1, [r3, #0]
10015f00:	2300      	movs	r3, #0
10015f02:	5ed5      	ldrsh	r5, [r2, r3]
10015f04:	e002      	b.n	10015f0c <_printf_i+0x94>
10015f06:	1d11      	adds	r1, r2, #4
10015f08:	6019      	str	r1, [r3, #0]
10015f0a:	6815      	ldr	r5, [r2, #0]
10015f0c:	2d00      	cmp	r5, #0
10015f0e:	da3b      	bge.n	10015f88 <_printf_i+0x110>
10015f10:	232d      	movs	r3, #45	; 0x2d
10015f12:	9a04      	ldr	r2, [sp, #16]
10015f14:	426d      	negs	r5, r5
10015f16:	7013      	strb	r3, [r2, #0]
10015f18:	e036      	b.n	10015f88 <_printf_i+0x110>
10015f1a:	6821      	ldr	r1, [r4, #0]
10015f1c:	681a      	ldr	r2, [r3, #0]
10015f1e:	0608      	lsls	r0, r1, #24
10015f20:	d406      	bmi.n	10015f30 <_printf_i+0xb8>
10015f22:	0649      	lsls	r1, r1, #25
10015f24:	d504      	bpl.n	10015f30 <_printf_i+0xb8>
10015f26:	6815      	ldr	r5, [r2, #0]
10015f28:	1d11      	adds	r1, r2, #4
10015f2a:	6019      	str	r1, [r3, #0]
10015f2c:	b2ad      	uxth	r5, r5
10015f2e:	e002      	b.n	10015f36 <_printf_i+0xbe>
10015f30:	1d11      	adds	r1, r2, #4
10015f32:	6019      	str	r1, [r3, #0]
10015f34:	6815      	ldr	r5, [r2, #0]
10015f36:	4b5f      	ldr	r3, [pc, #380]	; (100160b4 <_printf_i+0x23c>)
10015f38:	7e22      	ldrb	r2, [r4, #24]
10015f3a:	9303      	str	r3, [sp, #12]
10015f3c:	2708      	movs	r7, #8
10015f3e:	2a6f      	cmp	r2, #111	; 0x6f
10015f40:	d01d      	beq.n	10015f7e <_printf_i+0x106>
10015f42:	270a      	movs	r7, #10
10015f44:	e01b      	b.n	10015f7e <_printf_i+0x106>
10015f46:	0022      	movs	r2, r4
10015f48:	2178      	movs	r1, #120	; 0x78
10015f4a:	3245      	adds	r2, #69	; 0x45
10015f4c:	7011      	strb	r1, [r2, #0]
10015f4e:	4a5a      	ldr	r2, [pc, #360]	; (100160b8 <_printf_i+0x240>)
10015f50:	6819      	ldr	r1, [r3, #0]
10015f52:	9203      	str	r2, [sp, #12]
10015f54:	1d08      	adds	r0, r1, #4
10015f56:	6822      	ldr	r2, [r4, #0]
10015f58:	6018      	str	r0, [r3, #0]
10015f5a:	680d      	ldr	r5, [r1, #0]
10015f5c:	0610      	lsls	r0, r2, #24
10015f5e:	d402      	bmi.n	10015f66 <_printf_i+0xee>
10015f60:	0650      	lsls	r0, r2, #25
10015f62:	d500      	bpl.n	10015f66 <_printf_i+0xee>
10015f64:	b2ad      	uxth	r5, r5
10015f66:	07d3      	lsls	r3, r2, #31
10015f68:	d502      	bpl.n	10015f70 <_printf_i+0xf8>
10015f6a:	2320      	movs	r3, #32
10015f6c:	431a      	orrs	r2, r3
10015f6e:	6022      	str	r2, [r4, #0]
10015f70:	2710      	movs	r7, #16
10015f72:	2d00      	cmp	r5, #0
10015f74:	d103      	bne.n	10015f7e <_printf_i+0x106>
10015f76:	2320      	movs	r3, #32
10015f78:	6822      	ldr	r2, [r4, #0]
10015f7a:	439a      	bics	r2, r3
10015f7c:	6022      	str	r2, [r4, #0]
10015f7e:	0023      	movs	r3, r4
10015f80:	2200      	movs	r2, #0
10015f82:	3343      	adds	r3, #67	; 0x43
10015f84:	701a      	strb	r2, [r3, #0]
10015f86:	e002      	b.n	10015f8e <_printf_i+0x116>
10015f88:	270a      	movs	r7, #10
10015f8a:	4b4a      	ldr	r3, [pc, #296]	; (100160b4 <_printf_i+0x23c>)
10015f8c:	9303      	str	r3, [sp, #12]
10015f8e:	6863      	ldr	r3, [r4, #4]
10015f90:	60a3      	str	r3, [r4, #8]
10015f92:	2b00      	cmp	r3, #0
10015f94:	db09      	blt.n	10015faa <_printf_i+0x132>
10015f96:	2204      	movs	r2, #4
10015f98:	6821      	ldr	r1, [r4, #0]
10015f9a:	4391      	bics	r1, r2
10015f9c:	6021      	str	r1, [r4, #0]
10015f9e:	2d00      	cmp	r5, #0
10015fa0:	d105      	bne.n	10015fae <_printf_i+0x136>
10015fa2:	9e04      	ldr	r6, [sp, #16]
10015fa4:	2b00      	cmp	r3, #0
10015fa6:	d011      	beq.n	10015fcc <_printf_i+0x154>
10015fa8:	e07b      	b.n	100160a2 <_printf_i+0x22a>
10015faa:	2d00      	cmp	r5, #0
10015fac:	d079      	beq.n	100160a2 <_printf_i+0x22a>
10015fae:	9e04      	ldr	r6, [sp, #16]
10015fb0:	0028      	movs	r0, r5
10015fb2:	0039      	movs	r1, r7
10015fb4:	f7fd f8b2 	bl	1001311c <__aeabi_uidivmod>
10015fb8:	9b03      	ldr	r3, [sp, #12]
10015fba:	3e01      	subs	r6, #1
10015fbc:	5c5b      	ldrb	r3, [r3, r1]
10015fbe:	0028      	movs	r0, r5
10015fc0:	7033      	strb	r3, [r6, #0]
10015fc2:	0039      	movs	r1, r7
10015fc4:	f7fd f824 	bl	10013010 <__aeabi_uidiv>
10015fc8:	1e05      	subs	r5, r0, #0
10015fca:	d1f1      	bne.n	10015fb0 <_printf_i+0x138>
10015fcc:	2f08      	cmp	r7, #8
10015fce:	d109      	bne.n	10015fe4 <_printf_i+0x16c>
10015fd0:	6823      	ldr	r3, [r4, #0]
10015fd2:	07db      	lsls	r3, r3, #31
10015fd4:	d506      	bpl.n	10015fe4 <_printf_i+0x16c>
10015fd6:	6863      	ldr	r3, [r4, #4]
10015fd8:	6922      	ldr	r2, [r4, #16]
10015fda:	4293      	cmp	r3, r2
10015fdc:	dc02      	bgt.n	10015fe4 <_printf_i+0x16c>
10015fde:	2330      	movs	r3, #48	; 0x30
10015fe0:	3e01      	subs	r6, #1
10015fe2:	7033      	strb	r3, [r6, #0]
10015fe4:	9b04      	ldr	r3, [sp, #16]
10015fe6:	1b9b      	subs	r3, r3, r6
10015fe8:	6123      	str	r3, [r4, #16]
10015fea:	e02b      	b.n	10016044 <_printf_i+0x1cc>
10015fec:	6809      	ldr	r1, [r1, #0]
10015fee:	681a      	ldr	r2, [r3, #0]
10015ff0:	0608      	lsls	r0, r1, #24
10015ff2:	d407      	bmi.n	10016004 <_printf_i+0x18c>
10015ff4:	0649      	lsls	r1, r1, #25
10015ff6:	d505      	bpl.n	10016004 <_printf_i+0x18c>
10015ff8:	1d11      	adds	r1, r2, #4
10015ffa:	6019      	str	r1, [r3, #0]
10015ffc:	6813      	ldr	r3, [r2, #0]
10015ffe:	8aa2      	ldrh	r2, [r4, #20]
10016000:	801a      	strh	r2, [r3, #0]
10016002:	e004      	b.n	1001600e <_printf_i+0x196>
10016004:	1d11      	adds	r1, r2, #4
10016006:	6019      	str	r1, [r3, #0]
10016008:	6813      	ldr	r3, [r2, #0]
1001600a:	6962      	ldr	r2, [r4, #20]
1001600c:	601a      	str	r2, [r3, #0]
1001600e:	2300      	movs	r3, #0
10016010:	9e04      	ldr	r6, [sp, #16]
10016012:	6123      	str	r3, [r4, #16]
10016014:	e016      	b.n	10016044 <_printf_i+0x1cc>
10016016:	681a      	ldr	r2, [r3, #0]
10016018:	1d11      	adds	r1, r2, #4
1001601a:	6019      	str	r1, [r3, #0]
1001601c:	6816      	ldr	r6, [r2, #0]
1001601e:	2100      	movs	r1, #0
10016020:	6862      	ldr	r2, [r4, #4]
10016022:	0030      	movs	r0, r6
10016024:	f000 f92a 	bl	1001627c <memchr>
10016028:	2800      	cmp	r0, #0
1001602a:	d001      	beq.n	10016030 <_printf_i+0x1b8>
1001602c:	1b80      	subs	r0, r0, r6
1001602e:	6060      	str	r0, [r4, #4]
10016030:	6863      	ldr	r3, [r4, #4]
10016032:	e003      	b.n	1001603c <_printf_i+0x1c4>
10016034:	0026      	movs	r6, r4
10016036:	3642      	adds	r6, #66	; 0x42
10016038:	7032      	strb	r2, [r6, #0]
1001603a:	2301      	movs	r3, #1
1001603c:	6123      	str	r3, [r4, #16]
1001603e:	2300      	movs	r3, #0
10016040:	9a04      	ldr	r2, [sp, #16]
10016042:	7013      	strb	r3, [r2, #0]
10016044:	9b07      	ldr	r3, [sp, #28]
10016046:	aa09      	add	r2, sp, #36	; 0x24
10016048:	9300      	str	r3, [sp, #0]
1001604a:	0021      	movs	r1, r4
1001604c:	9b06      	ldr	r3, [sp, #24]
1001604e:	9805      	ldr	r0, [sp, #20]
10016050:	f7ff fea4 	bl	10015d9c <_printf_common>
10016054:	1c43      	adds	r3, r0, #1
10016056:	d102      	bne.n	1001605e <_printf_i+0x1e6>
10016058:	2001      	movs	r0, #1
1001605a:	4240      	negs	r0, r0
1001605c:	e027      	b.n	100160ae <_printf_i+0x236>
1001605e:	6923      	ldr	r3, [r4, #16]
10016060:	0032      	movs	r2, r6
10016062:	9906      	ldr	r1, [sp, #24]
10016064:	9805      	ldr	r0, [sp, #20]
10016066:	9d07      	ldr	r5, [sp, #28]
10016068:	47a8      	blx	r5
1001606a:	1c43      	adds	r3, r0, #1
1001606c:	d0f4      	beq.n	10016058 <_printf_i+0x1e0>
1001606e:	6823      	ldr	r3, [r4, #0]
10016070:	2500      	movs	r5, #0
10016072:	079b      	lsls	r3, r3, #30
10016074:	d40f      	bmi.n	10016096 <_printf_i+0x21e>
10016076:	9b09      	ldr	r3, [sp, #36]	; 0x24
10016078:	68e0      	ldr	r0, [r4, #12]
1001607a:	4298      	cmp	r0, r3
1001607c:	da17      	bge.n	100160ae <_printf_i+0x236>
1001607e:	0018      	movs	r0, r3
10016080:	e015      	b.n	100160ae <_printf_i+0x236>
10016082:	0022      	movs	r2, r4
10016084:	2301      	movs	r3, #1
10016086:	3219      	adds	r2, #25
10016088:	9906      	ldr	r1, [sp, #24]
1001608a:	9805      	ldr	r0, [sp, #20]
1001608c:	9e07      	ldr	r6, [sp, #28]
1001608e:	47b0      	blx	r6
10016090:	1c43      	adds	r3, r0, #1
10016092:	d0e1      	beq.n	10016058 <_printf_i+0x1e0>
10016094:	3501      	adds	r5, #1
10016096:	68e3      	ldr	r3, [r4, #12]
10016098:	9a09      	ldr	r2, [sp, #36]	; 0x24
1001609a:	1a9b      	subs	r3, r3, r2
1001609c:	429d      	cmp	r5, r3
1001609e:	dbf0      	blt.n	10016082 <_printf_i+0x20a>
100160a0:	e7e9      	b.n	10016076 <_printf_i+0x1fe>
100160a2:	0026      	movs	r6, r4
100160a4:	9b03      	ldr	r3, [sp, #12]
100160a6:	3642      	adds	r6, #66	; 0x42
100160a8:	781b      	ldrb	r3, [r3, #0]
100160aa:	7033      	strb	r3, [r6, #0]
100160ac:	e78e      	b.n	10015fcc <_printf_i+0x154>
100160ae:	b00b      	add	sp, #44	; 0x2c
100160b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
100160b2:	46c0      	nop			; (mov r8, r8)
100160b4:	10018301 	.word	0x10018301
100160b8:	10018312 	.word	0x10018312

100160bc <_putc_r>:
100160bc:	b570      	push	{r4, r5, r6, lr}
100160be:	0006      	movs	r6, r0
100160c0:	000d      	movs	r5, r1
100160c2:	0014      	movs	r4, r2
100160c4:	2800      	cmp	r0, #0
100160c6:	d004      	beq.n	100160d2 <_putc_r+0x16>
100160c8:	6983      	ldr	r3, [r0, #24]
100160ca:	2b00      	cmp	r3, #0
100160cc:	d101      	bne.n	100160d2 <_putc_r+0x16>
100160ce:	f7ff fc29 	bl	10015924 <__sinit>
100160d2:	4b12      	ldr	r3, [pc, #72]	; (1001611c <_putc_r+0x60>)
100160d4:	429c      	cmp	r4, r3
100160d6:	d101      	bne.n	100160dc <_putc_r+0x20>
100160d8:	6874      	ldr	r4, [r6, #4]
100160da:	e008      	b.n	100160ee <_putc_r+0x32>
100160dc:	4b10      	ldr	r3, [pc, #64]	; (10016120 <_putc_r+0x64>)
100160de:	429c      	cmp	r4, r3
100160e0:	d101      	bne.n	100160e6 <_putc_r+0x2a>
100160e2:	68b4      	ldr	r4, [r6, #8]
100160e4:	e003      	b.n	100160ee <_putc_r+0x32>
100160e6:	4b0f      	ldr	r3, [pc, #60]	; (10016124 <_putc_r+0x68>)
100160e8:	429c      	cmp	r4, r3
100160ea:	d100      	bne.n	100160ee <_putc_r+0x32>
100160ec:	68f4      	ldr	r4, [r6, #12]
100160ee:	68a3      	ldr	r3, [r4, #8]
100160f0:	3b01      	subs	r3, #1
100160f2:	60a3      	str	r3, [r4, #8]
100160f4:	2b00      	cmp	r3, #0
100160f6:	da05      	bge.n	10016104 <_putc_r+0x48>
100160f8:	69a2      	ldr	r2, [r4, #24]
100160fa:	4293      	cmp	r3, r2
100160fc:	db08      	blt.n	10016110 <_putc_r+0x54>
100160fe:	b2eb      	uxtb	r3, r5
10016100:	2b0a      	cmp	r3, #10
10016102:	d005      	beq.n	10016110 <_putc_r+0x54>
10016104:	6823      	ldr	r3, [r4, #0]
10016106:	b2e8      	uxtb	r0, r5
10016108:	1c5a      	adds	r2, r3, #1
1001610a:	6022      	str	r2, [r4, #0]
1001610c:	701d      	strb	r5, [r3, #0]
1001610e:	e004      	b.n	1001611a <_putc_r+0x5e>
10016110:	0022      	movs	r2, r4
10016112:	0029      	movs	r1, r5
10016114:	0030      	movs	r0, r6
10016116:	f7ff fa43 	bl	100155a0 <__swbuf_r>
1001611a:	bd70      	pop	{r4, r5, r6, pc}
1001611c:	10018290 	.word	0x10018290
10016120:	100182b0 	.word	0x100182b0
10016124:	100182d0 	.word	0x100182d0

10016128 <__sread>:
10016128:	b570      	push	{r4, r5, r6, lr}
1001612a:	000c      	movs	r4, r1
1001612c:	250e      	movs	r5, #14
1001612e:	5f49      	ldrsh	r1, [r1, r5]
10016130:	f000 f8b0 	bl	10016294 <_read_r>
10016134:	2800      	cmp	r0, #0
10016136:	db03      	blt.n	10016140 <__sread+0x18>
10016138:	6d63      	ldr	r3, [r4, #84]	; 0x54
1001613a:	181b      	adds	r3, r3, r0
1001613c:	6563      	str	r3, [r4, #84]	; 0x54
1001613e:	e003      	b.n	10016148 <__sread+0x20>
10016140:	89a2      	ldrh	r2, [r4, #12]
10016142:	4b02      	ldr	r3, [pc, #8]	; (1001614c <__sread+0x24>)
10016144:	4013      	ands	r3, r2
10016146:	81a3      	strh	r3, [r4, #12]
10016148:	bd70      	pop	{r4, r5, r6, pc}
1001614a:	46c0      	nop			; (mov r8, r8)
1001614c:	ffffefff 	.word	0xffffefff

10016150 <__swrite>:
10016150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10016152:	001f      	movs	r7, r3
10016154:	898b      	ldrh	r3, [r1, #12]
10016156:	0005      	movs	r5, r0
10016158:	000c      	movs	r4, r1
1001615a:	0016      	movs	r6, r2
1001615c:	05db      	lsls	r3, r3, #23
1001615e:	d505      	bpl.n	1001616c <__swrite+0x1c>
10016160:	230e      	movs	r3, #14
10016162:	5ec9      	ldrsh	r1, [r1, r3]
10016164:	2200      	movs	r2, #0
10016166:	2302      	movs	r3, #2
10016168:	f000 f874 	bl	10016254 <_lseek_r>
1001616c:	89a2      	ldrh	r2, [r4, #12]
1001616e:	4b05      	ldr	r3, [pc, #20]	; (10016184 <__swrite+0x34>)
10016170:	0028      	movs	r0, r5
10016172:	4013      	ands	r3, r2
10016174:	81a3      	strh	r3, [r4, #12]
10016176:	0032      	movs	r2, r6
10016178:	230e      	movs	r3, #14
1001617a:	5ee1      	ldrsh	r1, [r4, r3]
1001617c:	003b      	movs	r3, r7
1001617e:	f000 f81f 	bl	100161c0 <_write_r>
10016182:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10016184:	ffffefff 	.word	0xffffefff

10016188 <__sseek>:
10016188:	b570      	push	{r4, r5, r6, lr}
1001618a:	000c      	movs	r4, r1
1001618c:	250e      	movs	r5, #14
1001618e:	5f49      	ldrsh	r1, [r1, r5]
10016190:	f000 f860 	bl	10016254 <_lseek_r>
10016194:	89a3      	ldrh	r3, [r4, #12]
10016196:	1c42      	adds	r2, r0, #1
10016198:	d103      	bne.n	100161a2 <__sseek+0x1a>
1001619a:	4a05      	ldr	r2, [pc, #20]	; (100161b0 <__sseek+0x28>)
1001619c:	4013      	ands	r3, r2
1001619e:	81a3      	strh	r3, [r4, #12]
100161a0:	e004      	b.n	100161ac <__sseek+0x24>
100161a2:	2280      	movs	r2, #128	; 0x80
100161a4:	0152      	lsls	r2, r2, #5
100161a6:	4313      	orrs	r3, r2
100161a8:	81a3      	strh	r3, [r4, #12]
100161aa:	6560      	str	r0, [r4, #84]	; 0x54
100161ac:	bd70      	pop	{r4, r5, r6, pc}
100161ae:	46c0      	nop			; (mov r8, r8)
100161b0:	ffffefff 	.word	0xffffefff

100161b4 <__sclose>:
100161b4:	b510      	push	{r4, lr}
100161b6:	230e      	movs	r3, #14
100161b8:	5ec9      	ldrsh	r1, [r1, r3]
100161ba:	f000 f815 	bl	100161e8 <_close_r>
100161be:	bd10      	pop	{r4, pc}

100161c0 <_write_r>:
100161c0:	b570      	push	{r4, r5, r6, lr}
100161c2:	0005      	movs	r5, r0
100161c4:	0008      	movs	r0, r1
100161c6:	0011      	movs	r1, r2
100161c8:	2200      	movs	r2, #0
100161ca:	4c06      	ldr	r4, [pc, #24]	; (100161e4 <_write_r+0x24>)
100161cc:	6022      	str	r2, [r4, #0]
100161ce:	001a      	movs	r2, r3
100161d0:	f7f7 fac2 	bl	1000d758 <_write>
100161d4:	1c43      	adds	r3, r0, #1
100161d6:	d103      	bne.n	100161e0 <_write_r+0x20>
100161d8:	6823      	ldr	r3, [r4, #0]
100161da:	2b00      	cmp	r3, #0
100161dc:	d000      	beq.n	100161e0 <_write_r+0x20>
100161de:	602b      	str	r3, [r5, #0]
100161e0:	bd70      	pop	{r4, r5, r6, pc}
100161e2:	46c0      	nop			; (mov r8, r8)
100161e4:	1001b290 	.word	0x1001b290

100161e8 <_close_r>:
100161e8:	2300      	movs	r3, #0
100161ea:	b570      	push	{r4, r5, r6, lr}
100161ec:	4c06      	ldr	r4, [pc, #24]	; (10016208 <_close_r+0x20>)
100161ee:	0005      	movs	r5, r0
100161f0:	0008      	movs	r0, r1
100161f2:	6023      	str	r3, [r4, #0]
100161f4:	f7f7 faea 	bl	1000d7cc <_close>
100161f8:	1c43      	adds	r3, r0, #1
100161fa:	d103      	bne.n	10016204 <_close_r+0x1c>
100161fc:	6823      	ldr	r3, [r4, #0]
100161fe:	2b00      	cmp	r3, #0
10016200:	d000      	beq.n	10016204 <_close_r+0x1c>
10016202:	602b      	str	r3, [r5, #0]
10016204:	bd70      	pop	{r4, r5, r6, pc}
10016206:	46c0      	nop			; (mov r8, r8)
10016208:	1001b290 	.word	0x1001b290

1001620c <_fstat_r>:
1001620c:	2300      	movs	r3, #0
1001620e:	b570      	push	{r4, r5, r6, lr}
10016210:	4c06      	ldr	r4, [pc, #24]	; (1001622c <_fstat_r+0x20>)
10016212:	0005      	movs	r5, r0
10016214:	0008      	movs	r0, r1
10016216:	0011      	movs	r1, r2
10016218:	6023      	str	r3, [r4, #0]
1001621a:	f7f7 fadb 	bl	1000d7d4 <_fstat>
1001621e:	1c43      	adds	r3, r0, #1
10016220:	d103      	bne.n	1001622a <_fstat_r+0x1e>
10016222:	6823      	ldr	r3, [r4, #0]
10016224:	2b00      	cmp	r3, #0
10016226:	d000      	beq.n	1001622a <_fstat_r+0x1e>
10016228:	602b      	str	r3, [r5, #0]
1001622a:	bd70      	pop	{r4, r5, r6, pc}
1001622c:	1001b290 	.word	0x1001b290

10016230 <_isatty_r>:
10016230:	2300      	movs	r3, #0
10016232:	b570      	push	{r4, r5, r6, lr}
10016234:	4c06      	ldr	r4, [pc, #24]	; (10016250 <_isatty_r+0x20>)
10016236:	0005      	movs	r5, r0
10016238:	0008      	movs	r0, r1
1001623a:	6023      	str	r3, [r4, #0]
1001623c:	f7f7 fad0 	bl	1000d7e0 <_isatty>
10016240:	1c43      	adds	r3, r0, #1
10016242:	d103      	bne.n	1001624c <_isatty_r+0x1c>
10016244:	6823      	ldr	r3, [r4, #0]
10016246:	2b00      	cmp	r3, #0
10016248:	d000      	beq.n	1001624c <_isatty_r+0x1c>
1001624a:	602b      	str	r3, [r5, #0]
1001624c:	bd70      	pop	{r4, r5, r6, pc}
1001624e:	46c0      	nop			; (mov r8, r8)
10016250:	1001b290 	.word	0x1001b290

10016254 <_lseek_r>:
10016254:	b570      	push	{r4, r5, r6, lr}
10016256:	0005      	movs	r5, r0
10016258:	0008      	movs	r0, r1
1001625a:	0011      	movs	r1, r2
1001625c:	2200      	movs	r2, #0
1001625e:	4c06      	ldr	r4, [pc, #24]	; (10016278 <_lseek_r+0x24>)
10016260:	6022      	str	r2, [r4, #0]
10016262:	001a      	movs	r2, r3
10016264:	f7f7 fabe 	bl	1000d7e4 <_lseek>
10016268:	1c43      	adds	r3, r0, #1
1001626a:	d103      	bne.n	10016274 <_lseek_r+0x20>
1001626c:	6823      	ldr	r3, [r4, #0]
1001626e:	2b00      	cmp	r3, #0
10016270:	d000      	beq.n	10016274 <_lseek_r+0x20>
10016272:	602b      	str	r3, [r5, #0]
10016274:	bd70      	pop	{r4, r5, r6, pc}
10016276:	46c0      	nop			; (mov r8, r8)
10016278:	1001b290 	.word	0x1001b290

1001627c <memchr>:
1001627c:	b2c9      	uxtb	r1, r1
1001627e:	1882      	adds	r2, r0, r2
10016280:	4290      	cmp	r0, r2
10016282:	d004      	beq.n	1001628e <memchr+0x12>
10016284:	7803      	ldrb	r3, [r0, #0]
10016286:	428b      	cmp	r3, r1
10016288:	d002      	beq.n	10016290 <memchr+0x14>
1001628a:	3001      	adds	r0, #1
1001628c:	e7f8      	b.n	10016280 <memchr+0x4>
1001628e:	2000      	movs	r0, #0
10016290:	4770      	bx	lr
	...

10016294 <_read_r>:
10016294:	b570      	push	{r4, r5, r6, lr}
10016296:	0005      	movs	r5, r0
10016298:	0008      	movs	r0, r1
1001629a:	0011      	movs	r1, r2
1001629c:	2200      	movs	r2, #0
1001629e:	4c06      	ldr	r4, [pc, #24]	; (100162b8 <_read_r+0x24>)
100162a0:	6022      	str	r2, [r4, #0]
100162a2:	001a      	movs	r2, r3
100162a4:	f7f7 fa38 	bl	1000d718 <_read>
100162a8:	1c43      	adds	r3, r0, #1
100162aa:	d103      	bne.n	100162b4 <_read_r+0x20>
100162ac:	6823      	ldr	r3, [r4, #0]
100162ae:	2b00      	cmp	r3, #0
100162b0:	d000      	beq.n	100162b4 <_read_r+0x20>
100162b2:	602b      	str	r3, [r5, #0]
100162b4:	bd70      	pop	{r4, r5, r6, pc}
100162b6:	46c0      	nop			; (mov r8, r8)
100162b8:	1001b290 	.word	0x1001b290
100162bc:	00000d0a 	.word	0x00000d0a
100162c0:	000003e8 	.word	0x000003e8

100162c4 <test>:
100162c4:	00000083 00004000 00000200 00c800c8     .....@..........
100162d4:	41a00000 42700000 3f000000 3e666666     ...A..pB...?fff>
100162e4:	3f2ccccd 3f000000 3f000000 0000000a     ..,?...?...?....
100162f4:	72617453 676e6974 61694220 6f4c2073     Starting Bias Lo
10016304:	5220706f 73646165 00000000 706d6153     op Reads....Samp
10016314:	3a73656c 0a642520 00000000 65636341     les: %d.....Acce
10016324:	666f206c 74657366 74616420 57482061     l offset data HW
10016334:	62205453 253d7469 25203a64 66342e37     ST bit=%d: %7.4f
10016344:	2e372520 25206634 66342e37 00000a0d      %7.4f %7.4f....
10016354:	6f727947 66666f20 20746573 61746164     Gyro offset data
10016364:	53574820 69622054 64253d74 3725203a      HWST bit=%d: %7
10016374:	2066342e 342e3725 37252066 0d66342e     .4f %7.4f %7.4f.
10016384:	0000000a 78352325 2325203a 0a0d7835     ....%#5x: %#5x..
10016394:	00000000 706d6f43 20737361 20746f6e     ....Compass not 
100163a4:	6e756f66 00002e64 72617453 676e6974     found...Starting
100163b4:	55504d20 30303536 53574820 000d2154      MPU6500 HWST!..
100163c4:	72746552 69766569 4220676e 65736169     Retrieving Biase
100163d4:	00000d73 72746552 69766569 4220676e     s...Retrieving B
100163e4:	65736169 72452073 20726f72 6f70202d     iases Error - po
100163f4:	62697373 4920656c 65204332 726f7272     ssible I2C error
10016404:	00000000 72746552 69766569 5320676e     ....Retrieving S
10016414:	69422054 73657361 00000000 72746552     T Biases....Retr
10016424:	69766569 5320676e 69422054 73657361     ieving ST Biases
10016434:	72724520 2d20726f 736f7020 6c626973      Error - possibl
10016444:	32492065 72652043 00726f72 64616552     e I2C error.Read
10016454:	20676e69 2050544f 69676552 72657473     ing OTP Register
10016464:	72724520 002e726f 65636341 544f206c      Error..Accel OT
10016474:	64253a50 6425202c 6425202c 0000000a     P:%d, %d, %d....
10016484:	45434341 52433a4c 52455449 41204149     ACCEL:CRITERIA A
10016494:	00000000 73616942 6968535f 253d7466     ....Bias_Shift=%
100164a4:	66342e37 6942202c 525f7361 253d6765     7.4f, Bias_Reg=%
100164b4:	66342e37 6942202c 485f7361 3d545357     7.4f, Bias_HWST=
100164c4:	342e3725 000a0d66 2050544f 756c6176     %7.4f...OTP valu
100164d4:	25203a65 66342e37 00000a0d 69746172     e: %7.4f....rati
100164e4:	37253d6f 2c66342e 72687420 6f687365     o=%7.4f, thresho
100164f4:	253d646c 66342e37 00000a0d 45434341     ld=%7.4f....ACCE
10016504:	6146204c 41206c69 20736978 6425203d     L Fail Axis = %d
10016514:	0000000a 45434341 52433a4c 52455449     ....ACCEL:CRITER
10016524:	42204149 0000000d 206e694d 203a474d     IA B....Min MG: 
10016534:	342e3725 000a0d66 2078614d 203a474d     %7.4f...Max MG: 
10016544:	342e3725 000a0d66 73616942 6968735f     %7.4f...Bias_shi
10016554:	253d7466 66342e37 7473202c 2e37253d     ft=%7.4f, st=%7.
10016564:	202c6634 3d676572 342e3725 00000a66     4f, reg=%7.4f...
10016574:	65636341 4146206c 61204c49 3a736978     Accel FAIL axis:
10016584:	3c206425 3232203d 20676d35 3e20726f     %d <= 225mg or >
10016594:	3736203d 0a676d35 00000000 65636341     = 675mg.....Acce
100165a4:	52433a6c 52455449 43204149 6962203a     l:CRITERIA C: bi
100165b4:	6c207361 20737365 6e616874 2e372520     as less than %7.
100165c4:	000a6634 4c494146 203a4445 65636341     4f..FAILED: Acce
100165d4:	7861206c 253a7369 203d2064 20646c25     l axis:%d = %ld 
100165e4:	3035203e 0a676d30 00000000 65636341     > 500mg.....Acce
100165f4:	6553206c 5420666c 20747365 75736552     l Self Test Resu
10016604:	3a73746c 0a642520 00000000 6f727947     lts: %d.....Gyro
10016614:	50544f20 2c64253a 2c642520 0d642520      OTP:%d, %d, %d.
10016624:	0000000a 4f525947 4952433a 49524554     ....GYRO:CRITERI
10016634:	00412041 6f727947 69614620 7841206c     A A.Gyro Fail Ax
10016644:	3d207369 0a642520 00000000 4f525947     is = %d.....GYRO
10016654:	4952433a 49524554 0d422041 00000000     :CRITERIA B.....
10016664:	2078614d 3a535044 2e372520 0a0d6634     Max DPS: %7.4f..
10016674:	00000000 4f525947 49414620 7861204c     ....GYRO FAIL ax
10016684:	253a7369 72672064 65746165 68742072     is:%d greater th
10016694:	36206e61 73706430 0000000a 6f727947     an 60dps....Gyro
100166a4:	4952433a 49524554 3a432041 61696220     :CRITERIA C: bia
100166b4:	656c2073 74207373 206e6168 342e3725     s less than %7.4
100166c4:	00000a66 4c494146 203a4445 6f727947     f...FAILED: Gyro
100166d4:	69786120 64253a73 25203d20 3e20646c      axis:%d = %ld >
100166e4:	64303220 000a7370 6f727947 6c655320      20dps..Gyro Sel
100166f4:	65542066 52207473 6c757365 203a7374     f Test Results: 
10016704:	000a6425 706d6f43 20737361 666c6553     %d..Compass Self
10016714:	73655420 65522074 746c7573 25203a73      Test Results: %
10016724:	00000a64 74697845 20676e69 54535748     d...Exiting HWST
10016734:	00000000                                ....

10016738 <hw>:
10016738:	04000069 01410080 01000000 00001333     i.....A.....3...

10016748 <reg>:
10016748:	0c1a1975 1c1b236a 201f1e1d 3b437472     u...j#..... rtC;
10016758:	3a393841 376c6b69 6d24776f 2625706e     A89:ikl7ow$mnp%&
10016768:	2a292827 67646334 00000049 006ccd4c     '()*4cdgI...L.l.
10016778:	002cc90c 00765636 00664626 c4abf2fe     ..,.6Vv.&Ff.....
10016788:	dfdff1aa dfdfafbb 8db3aab8 350d98b4     ...............5
10016798:	0000005d aaaaaab8 c5c388b0 000000c7     ]...............
100167a8:	f3b9b1d8 b691a38b 00d9b409 f3b9b1da     ................
100167b8:	b691a38b 00dab4da 736d735b 656c625f     ........[sms_ble
100167c8:	6961705f 65725f72 73657571 6e665f74     _pair_request_fn
100167d8:	6150095d 6e697269 65722067 73657571     ].Pairing reques
100167e8:	2e2e2e74 656e4220 64252077 4c42202c     t... Bnew %d, BL
100167f8:	78302045 78323025 3154202c 2c642520     E 0x%02x, T1 %d,
10016808:	20325420 00006425 736d735b 656c625f      T2 %d..[sms_ble
10016818:	776f705f 645f7265 5d6e776f 00000000     _power_down]....
10016828:	736d735b 656c625f 776f705f 645f7265     [sms_ble_power_d
10016838:	5d6e776f 6f745309 6e697070 6f632067     own].Stopping co
10016848:	6e616d6d 65722064 76696563 64206465     mmand received d
10016858:	6e697275 64612067 74726576 6d657369     uring advertisem
10016868:	2e746e65 6f745320 6e697070 2e2e2e67     ent. Stopping...
10016878:	00000020 6c696166 21216465 00000021      ...failed!!!...
10016888:	656e6f64 00000021 736d735b 656c625f     done!...[sms_ble
10016898:	776f705f 645f7265 5d6e776f 65440909     _power_down]..De
100168a8:	65636976 69617020 2e646572 64202e2e     vice paired... d
100168b8:	62617369 676e696c 746e6920 75727265     isabling interru
100168c8:	20737470 77732026 68637469 20676e69     pts & switching 
100168d8:	6e776f64 6e657320 73726f73 00000000     down sensors....
100168e8:	736d735b 656c625f 776f705f 645f7265     [sms_ble_power_d
100168f8:	5d6e776f 75430909 6e657272 20796c74     own]..Currently 
10016908:	69646e69 69746163 0000676e 736d735b     indicating..[sms
10016918:	656c625f 776f705f 645f7265 5d6e776f     _ble_power_down]
10016928:	65440909 65636976 6e6f6320 7463656e     ..Device connect
10016938:	2e2e6465 6964202e 6e6f6373 7463656e     ed... disconnect
10016948:	00676e69 736d735b 656c625f 7664615f     ing.[sms_ble_adv
10016958:	7065725f 5f74726f 095d6e66 65766441     _report_fn].Adve
10016968:	73697472 6e656d65 69742074 756f656d     rtisement timeou
10016978:	2e2e2e74 00000000 736d735b 656c625f     t.......[sms_ble
10016988:	6e6f635f 7463656e 665f6465 09095d6e     _connected_fn]..
10016998:	69766544 20736563 6e6e6f63 65746365     Devices connecte
100169a8:	2e2e2e64 00000000 736d735b 656c625f     d.......[sms_ble
100169b8:	6961705f 5f646572 005d6e66 736d735b     _paired_fn].[sms
100169c8:	656c625f 7664615f 69747265 095d6573     _ble_advertise].
100169d8:	65766441 73697472 6e656d65 61642074     Advertisement da
100169e8:	73206174 66207465 656c6961 00002164     ta set failed!..
100169f8:	736d735b 656c625f 7664615f 69747265     [sms_ble_adverti
10016a08:	095d6573 454c4209 61745320 64657472     se]..BLE Started
10016a18:	76644120 69747265 656d6573 0000746e      Advertisement..
10016a28:	736d735b 7265735f 65636976 7664615f     [sms_service_adv
10016a38:	69747265 095d6573 20454c42 65766441     ertise].BLE Adve
10016a48:	73697472 6e656d65 74732074 20747261     rtisement start 
10016a58:	6c696166 203a6465 73616572 30206e6f     failed: reason 0
10016a68:	00782578 736d735b 656c625f 7369645f     x%x.[sms_ble_dis
10016a78:	6e6e6f63 65746365 6e665f64 6550095d     connected_fn].Pe
10016a88:	64207265 6f637369 63656e6e 2e646574     er disconnected.
10016a98:	42202e2e 2077656e 202c6425 20454c42     .. Bnew %d, BLE 
10016aa8:	30257830 202c7832 25203154 54202c64     0x%02x, T1 %d, T
10016ab8:	64252032 00000000 54455320 00002021     2 %d.... SET! ..
10016ac8:	20642520 454e4f47 6425203f 00000020      %d GONE? %d ...
10016ad8:	544f4e20 74657320 0000203f               NOT set? ..

10016ae4 <sms_ble_gap_cb>:
	...
10016af0:	1000a05d 00000000 1000a091 1000a1a1     ]...............
	...
10016b08:	1000a0d9 10009e71 00000000 00000000     ....q...........
	...

10016b30 <sms_ble_gatt_server_cb>:
10016b30:	10009ebd 10009f01 00000000 00000000     ................
	...
10016b58:	736d735b 7475625f 5f6e6f74 666e6f63     [sms_button_conf
10016b68:	72756769 70095d65 6c626f72 77206d65     igure].problem w
10016b78:	656c6968 74657320 676e6974 20707520     hile setting up 
10016b88:	74747562 00306e6f 736d735b 7475625f     button0.[sms_but
10016b98:	5f6e6f74 666e6f63 72756769 50095d65     ton_configure].P
10016ba8:	6c626f72 77206d65 656c6968 74657320     roblem while set
10016bb8:	676e6974 20707520 74747562 00316e6f     ting up button1.
10016bc8:	736d735b 7475625f 5f6e6f74 666e6f63     [sms_button_conf
10016bd8:	72756769 50095d65 6c626f72 77206d65     igure].Problem w
10016be8:	656c6968 74657320 676e6974 20707520     hile setting up 
10016bf8:	414c5058 44454e49 65737520 75622072     XPLAINED user bu
10016c08:	6e6f7474 00000000 736d735b 7475625f     tton....[sms_but
10016c18:	5f6e6f74 5f746567 74617473 09095d65     ton_get_state]..
10016c28:	74747542 73206e6f 65746174 6425203a     Button state: %d
10016c38:	00642520 736d735b 7475625f 5f6e6f74      %d.[sms_button_
10016c48:	2d5d6e66 00000030 736d735b 7475625f     fn]-0...[sms_but
10016c58:	5f6e6f74 2d5d6e66 00000031 736d735b     ton_fn]-1...[sms
10016c68:	7475625f 5f6e6f74 095d6e66 6f4e0909     _button_fn]...No
10016c78:	73752074 73206465 65746174 2e2e2e73     t used states...
10016c88:	00000000 736d735b 7475625f 5f6e6f74     ....[sms_button_
10016c98:	095d6e66 6c697453 6e69206c 61636964     fn].Still indica
10016ca8:	676e6974 002e2e2e 736d735b 7475625f     ting....[sms_but
10016cb8:	5f6e6f74 69666564 735f656e 69767265     ton_define_servi
10016cc8:	5d736563 72655309 65636976 65642073     ces].Services de
10016cd8:	696e6966 6620676e 656c6961 72202c64     fining failed, r
10016ce8:	6f736165 7830206e 00007825 736d735b     eason 0x%x..[sms
10016cf8:	7475625f 5f6e6f74 69666564 735f656e     _button_define_s
10016d08:	69767265 5d736563 72655309 65636976     ervices].Service
10016d18:	65642073 656e6966 53202c64 6220534d     s defined, SMS b
10016d28:	6f747475 6168206e 656c646e 6425203a     utton handle: %d
10016d38:	00000000 626f7250 206d656c 6c696877     ....Problem whil
10016d48:	65732065 6e697474 70672067 70206f69     e setting gpio p
10016d58:	00006e69 2e2e7325 4209092e 6572702d     in..%s.....B-pre
10016d68:	64252076 2d42202c 20727563 202c6425     v %d, B-cur %d, 
10016d78:	20454c42 30257830 202c7832 25203154     BLE 0x%02x, T1 %
10016d88:	54202c64 64252032 4d53202c 64252053     d, T2 %d, SMS %d
10016d98:	00000000 206f2f74 00006425 736d735b     ....t/o %d..[sms
10016da8:	756d695f 6e6f635f 75676966 675f6572     _imu_configure_g
10016db8:	5d6f6970 6f725009 6d656c62 69687720     pio].Problem whi
10016dc8:	7320656c 69747465 7520676e 4d492070     le setting up IM
10016dd8:	52442055 70205944 00006e69 736d735b     U DRDY pin..[sms
10016de8:	756d695f 6e6f635f 75676966 675f6572     _imu_configure_g
10016df8:	5d6f6970 6f725009 6d656c62 69687720     pio].Problem whi
10016e08:	7320656c 69747465 7520676e 504d2070     le setting up MP
10016e18:	43562055 69702043 0000006e 74696e49     U VCC pin...Init
10016e28:	696c6169 676e697a 55504d20 002e2e2e     ializing MPU....
10016e38:	69616620 2164656c 00000000 74746553      failed!....Sett
10016e48:	20676e69 4d207075 2e2e5550 0000002e     ing up MPU......
10016e58:	736d735b 75706d5f 6665645f 5f656e69     [sms_mpu_define_
10016e68:	76726573 73656369 6553095d 63697672     services].Servic
10016e78:	64207365 6e696665 20676e69 6c696166     es defining fail
10016e88:	202c6465 73616572 30206e6f 00782578     ed, reason 0x%x.
10016e98:	736d735b 75706d5f 6665645f 5f656e69     [sms_mpu_define_
10016ea8:	76726573 73656369 6553095d 63697672     services].Servic
10016eb8:	64207365 6e696665 202c6465 20534d53     es defined, SMS 
10016ec8:	2055504d 646e6168 203a656c 00006425     MPU handle: %d..
10016ed8:	736d735b 64656c5f 6970675f 6e695f6f     [sms_led_gpio_in
10016ee8:	095d7469 626f7270 206d656c 6c696877     it].problem whil
10016ef8:	65732065 6e697474 70752067 64656c20     e setting up led
10016f08:	00000030 736d735b 6572705f 72757373     0...[sms_pressur
10016f18:	6f635f65 6769666e 5f657275 6f697067     e_configure_gpio
10016f28:	7270095d 656c626f 6877206d 20656c69     ].problem while 
10016f38:	74746573 20676e69 56207075 70206363     setting up Vcc p
10016f48:	00006e69 736d735b 6572705f 72757373     in..[sms_pressur
10016f58:	74735f65 75747261 09095d70 72617453     e_startup]..Star
10016f68:	676e6974 65727020 72757373 65732065     ting pressure se
10016f78:	726f736e 00000000 736d735b 6572705f     nsor....[sms_pre
10016f88:	72757373 74735f65 75747261 09095d70     ssure_startup]..
10016f98:	69614609 2064656c 69206f74 6974696e     .Failed to initi
10016fa8:	7a696c61 72702065 75737365 64206572     alize pressure d
10016fb8:	63697665 00000065 736d735b 6572705f     evice...[sms_pre
10016fc8:	72757373 736d5f65 635f3835 75636c61     ssure_ms58_calcu
10016fd8:	6574616c 6574205d 7265706d 72757461     late] temperatur
10016fe8:	203d2065 20646c25 65727020 72757373     e = %ld  pressur
10016ff8:	203d2065 00646c25 736d735b 6572705f     e = %ld.[sms_pre
10017008:	72757373 736d5f65 705f3835 5f6c6c6f     ssure_ms58_poll_
10017018:	61746164 7270205d 656c626f 6572206d     data] problem re
10017028:	6e696461 736d2067 64203835 00617461     ading ms58 data.
10017038:	736d735b 6572705f 72757373 65645f65     [sms_pressure_de
10017048:	656e6966 7265735f 65636976 53095d73     fine_services].S
10017058:	69767265 20736563 69666564 676e696e     ervices defining
10017068:	69616620 2c64656c 61657220 206e6f73      failed, reason 
10017078:	78257830 00000000 736d735b 6572705f     0x%x....[sms_pre
10017088:	72757373 65645f65 656e6966 7265735f     ssure_define_ser
10017098:	65636976 53095d73 69767265 20736563     vices].Services 
100170a8:	69666564 2c64656e 534d5320 65727020     defined, SMS pre
100170b8:	72757373 61682065 656c646e 6425203a     ssure handle: %d
100170c8:	00000000 736d735b 6e65735f 73726f73     ....[sms_sensors
100170d8:	6977735f 5d686374 43090909 646c756f     _switch]...Could
100170e8:	2074276e 74696e69 696c6169 4d20657a     n't initialize M
100170f8:	00005550 736d735b 6175645f 6d69746c     PU..[sms_dualtim
10017108:	5f317265 005d6e66 736d735b 6175645f     er1_fn].[sms_dua
10017118:	6d69746c 5f317265 095d6e66 61745309     ltimer1_fn]..Sta
10017128:	6e697472 65732067 726f736e 73282073     rting sensors (s
10017138:	74747568 20676e69 6e776f64 2e2e2e29     hutting down)...
10017148:	00000000 736d735b 6175645f 6d69746c     ....[sms_dualtim
10017158:	5f327265 005d6e66 2e2e2e20 69766967     er2_fn]. ...givi
10017168:	7520676e 00002170 2e2e2e20 74696177     ng up!.. ...wait
10017178:	2e676e69 63202e2e 746e756f 203a7265     ing... counter: 
10017188:	00006425 736d735b 6175645f 6d69746c     %d..[sms_dualtim
10017198:	5f327265 095d6e66 696c4209 6e696b6e     er2_fn]..Blinkin
100171a8:	74732067 75747261 2e2e2e70 00000000     g startup.......
100171b8:	736d735b 6175645f 6d69746c 5f327265     [sms_dualtimer2_
100171c8:	095d6e66 696c4209 6e696b6e 68732067     fn]..Blinking sh
100171d8:	6f647475 2e2e6e77 0000002e 736d735b     utdown......[sms
100171e8:	6175645f 6d69746c 5f327265 095d6e66     _dualtimer2_fn].
100171f8:	776f5009 6e697265 666f2067 2e2e2e66     .Powering off...
10017208:	00000000 1000c738 1000c746 1000c754     ....8...F...T...
10017218:	1000c762 1000c770 1000c77e 1000c78c     b...p...~.......
10017228:	1000c79c 1000c7ac 1000c7bc 1000c7cc     ................
10017238:	1000c7dc 1000c7ec 1000c7fc 1000c80c     ................
10017248:	1000c81c 1000c82c 1000c83c 1000c84c     ....,...<...L...
10017258:	1000c85c 1000c86c 1000c87c 1000c88c     \...l...|.......
10017268:	1000c89c 1000c8ac 1000c8bc 1000c8cc     ................
10017278:	1000c8dc 1000c8ea 1000c8f8 1000c906     ................
10017288:	1000c914 1000c922 1000c930 1000c93e     ...."...0...>...
10017298:	1000c94c 1000c95c 1000c96c 1000c97c     L...\...l...|...
100172a8:	1000c98c 1000c99c 1000c9ac 1000c9bc     ................
100172b8:	1000c9cc 1000c9dc 1000c9ec 1000c9fc     ................
100172c8:	1000ca0c 1000ca1c 1000ca2c 1000ca3c     ........,...<...
100172d8:	1000ca4c 1000ca5a 1000ca68 1000ca94     L...Z...h.......
100172e8:	1000caa2 1000cab0 1000cabe 1000cacc     ................
100172f8:	1000cada 1000cae8 1000caf6 1000cb04     ................
10017308:	1000cb12 1000cb20 1000cb2e 1000cb3c     .... .......<...
10017318:	1000cb4a 1000cb58 1000cb66 1000cb74     J...X...f...t...
10017328:	1000cb82 1000cb90 1000cb9e 1000cbac     ................
10017338:	1000cbba 1000cbc8 1000cbd6 1000cbe4     ................
10017348:	1000cbf2 1000cc00 1000cc0e 1000cc1c     ................
10017358:	1000cc2a 1000cc38 1000cc46 1000cc54     *...8...F...T...
10017368:	1000cc62 1000cc70 1000cc7e 1000cc8c     b...p...~.......
10017378:	1000cc9a 1000cca8 1000ccb6 1000ccc4     ................
10017388:	1000ccd2 1000cce0 1000ccee 1000ccfc     ................
10017398:	1000cd0a 1000cd18 1000cd26 1000cd34     ........&...4...
100173a8:	1000cd42 1000cd50 1000cd5e 1000cd6c     B...P...^...l...
100173b8:	1000cd7a 1000ce14 1000ce3c 1000ce64     z.......<...d...
100173c8:	1000ce8c 1000d0cc 1000cebc 1000ced4     ................
100173d8:	1000cf4c 1000cf64 1000ceec 1000cf04     L...d...........
100173e8:	1000cf1c 1000cf34 1000cf7c 1000d240     ....4...|...@...
100173f8:	1000d240 1000d240 1000d240 1000d240     @...@...@...@...
10017408:	1000d240 1000d240 1000d240 1000d024     @...@...@...$...
10017418:	1000d03c 1000d054 1000d0e2 1000cfac     <...T...........
10017428:	1000d240 1000d240 1000d240 1000d240     @...@...@...@...
10017438:	1000d240 1000d240 1000d06c 1000d084     @...@...l.......
10017448:	1000d09c 1000d0b4 1000d240 1000d1f8     ........@.......
10017458:	1000d210 1000d240 1000d240 1000d10e     ....@...@.......
10017468:	1000d124 1000d13a 1000d150 1000d240     $...:...P...@...
10017478:	1000d240 1000d240 1000d240 1000d240     @...@...@...@...
10017488:	1000d240 1000d240 1000d240 1000ce00     @...@...@.......
10017498:	1000ce28 1000ce50 1000ce78 1000cea4     (...P...x.......
100174a8:	1000cf94 1000cfc4 1000cfdc 1000cff4     ................
100174b8:	1000d00c 1000d0f8 1000d166 1000d1e0     ........f.......
100174c8:	1000d228 1000d962 1000d974 1000d94a     (...b...t...J...
100174d8:	1000d94a 1000d94a 1000d962 1000d94a     J...J...b...J...
100174e8:	1000d94a 1000e366 1000e3da 1000e34e     J...f.......N...
100174f8:	1000e3e0 1000e354 1000e35a 1000e360     ....T...Z...`...
10017508:	1000eac0 1000eac0 1000eac0 1000eac0     ................
10017518:	1000eac0 1000eac0 1000eac0 1000eac0     ................
10017528:	1000eac0 1000eac0 1000eac0 1000eac0     ................
10017538:	1000eac0 1000eac0 1000eac0 1000eac0     ................
10017548:	1000eac0 1000eac0 1000eac0 1000eade     ................
10017558:	1000eade 1000eade 1000eade 1000eade     ................
10017568:	1000eade 1000eade 1000eade 1000eade     ................
10017578:	1000eade 1000eb00 1000eb00 1000eb00     ................
10017588:	1000eb00 1000eb00 1000eb00 1000eb00     ................
10017598:	1000eb00 1000eb00 1000eb00 1000eb30     ............0...
100175a8:	1000eb30 1000eb30 1000eb30 1000eb30     0...0...0...0...
100175b8:	1000eb30 1000eb4a 1000eb4a 1000eb4a     0...J...J...J...
100175c8:	1000eb4a 1000eb4a 1000eb4a 1000eb4a     J...J...J...J...
100175d8:	1000eb4a 1000eb4a 1000eb64 1000eb64     J...J...d...d...
100175e8:	1000eb86 1000eb86 1000eba0 1000eb86     ................
100175f8:	34333231 00003635 efcdab00 00efcdab     123456..........

10017608 <ble_mgr_gatt_server_handle>:
	...
10017620:	1000d85d 1000d885 1000d8cd 00000000     ]...............
10017630:	65646e55 656e6966 76452064 20746e65     Undefined Event 
10017640:	65636552 64657669 00000000 6e616353     Received....Scan
10017650:	676e696e 61662020 64656c69 00000000     ning  failed....
10017660:	65766441 73697472 20676e69 6c696166     Advertising fail
10017670:	00006465 2d454c42 2055544d 6e616843     ed..BLE-MTU Chan
10017680:	2c646567 6e6f4320 7463656e 206e6f69     ged, Connection 
10017690:	646e6148 203a656c 202c6425 2077654e     Handle: %d, New 
100176a0:	756c6156 25203a65 00000064 2055544d     Value: %d...MTU 
100176b0:	6e616843 2c646567 6e6f4320 7463656e     Changed, Connect
100176c0:	206e6f69 646e6148 253a656c 4f202c64     ion Handle:%d, O
100176d0:	61726570 6e6f6974 0064253a 2055544d     peration:%d.MTU 
100176e0:	6e616843 46206567 656c6961 43202c64     Change Failed, C
100176f0:	656e6e6f 6f697463 6148206e 656c646e     onnection Handle
10017700:	2c64253a 65704f20 69746172 253a6e6f     :%d, Operation:%
10017710:	00000064 72616843 69725720 43206574     d...Char Write C
10017720:	4320646d 6c706d6f 2c657465 6e6f4320     md Complete, Con
10017730:	7463656e 206e6f69 646e6148 253a656c     nection Handle:%
10017740:	4f202c64 61726570 6e6f6974 0064253a     d, Operation:%d.
10017750:	72616843 69725720 43206574 4620646d     Char Write Cmd F
10017760:	656c6961 43202c64 656e6e6f 6f697463     ailed, Connectio
10017770:	6148206e 656c646e 2c64253a 65704f20     n Handle:%d, Ope
10017780:	69746172 253a6e6f 00000064 74617453     ration:%d...Stat
10017790:	6f4e2065 61482074 656c646e 64252064     e Not Handled %d
100177a0:	00000000 69766544 64206563 6f637369     ....Device disco
100177b0:	63656e6e 20646574 73616552 303a6e6f     nnected Reason:0
100177c0:	32302578 61482078 656c646e 2578303d     x%02x Handle=0x%
100177d0:	00000078 425f5441 435f454c 5f4e4e4f     x...AT_BLE_CONN_
100177e0:	41524150 50555f4d 45544144 00000020     PARAM_UPDATE ...
100177f0:	72636e45 69747079 66206e6f 656c6961     Encryption faile
10017800:	00000064 72636e45 69747079 63206e6f     d...Encryption c
10017810:	6c706d6f 64657465 63757320 73736563     ompleted success
10017820:	6c6c7566 00000079 20454c42 69766544     fully...BLE Devi
10017830:	6e206563 6620746f 646e756f 636e6520     ce not found enc
10017840:	74707972 206e6f69 6f666e69 00000000     ryption info....
10017850:	6f666e49 7665443a 20656369 6e756f66     Info:Device foun
10017860:	64612064 73657264 255b2073 20205d64     d address [%d]  
10017870:	30257830 30255832 30255832 30255832     0x%02X%02X%02X%0
10017880:	30255832 30255832 00205832 6f666e49     2X%02X%02X .Info
10017890:	78616d3a 6d756d69 2e6f6e20 7320666f     :maximum no.of s
100178a0:	206e6163 69766564 72206563 68636165     can device reach
100178b0:	2e2e6465 6f74532e 6e697070 63532067     ed...Stopping Sc
100178c0:	00006e61 6c696146 74206465 7473206f     an..Failed to st
100178d0:	7320706f 6e6e6163 00676e69 30257830     op scanning.0x%0
100178e0:	202c5832 00000000 4b525343 0000203a     2X, ....CSRK: ..
100178f0:	3a4b5249 00000000 72696150 20676e69     IRK:....Pairing 
10017900:	6c696166 2e2e6465 7369442e 6e6e6f63     failed...Disconn
10017910:	69746365 0000676e 63736944 656e6e6f     ecting..Disconne
10017920:	52207463 65757165 46207473 656c6961     ct Request Faile
10017930:	00000064 72696150 20676e69 636f7270     d...Pairing proc
10017940:	72756465 6f632065 656c706d 20646574     edure completed 
10017950:	63637573 66737365 796c6c75 00000000     successfully....
10017960:	20454c42 69766544 6e206563 6620746f     BLE Device not f
10017970:	646e756f 206f7420 726f7473 68742065     ound to store th
10017980:	61702065 6e697269 6e692067 00006f66     e pairing info..
10017990:	3a4b544c 00000020 72636e45 69747079     LTK: ...Encrypti
100179a0:	4e206e6f 7320746f 74726174 00006465     on Not started..
100179b0:	76616c53 65532065 69727563 52207974     Slave Security R
100179c0:	2d207165 74754120 746e6568 74616369     eq - Authenticat
100179d0:	206e6f69 6c696146 00006465 656e6547     ion Failed..Gene
100179e0:	65746172 544c2064 00203a4b 30257830     rated LTK: .0x%0
100179f0:	00205832 646e6553 20676e69 72696170     2X .Sending pair
10017a00:	20676e69 70736572 65736e6f 00000000     ing response....
10017a10:	72696150 71655220 74736575 41202d20     Pair Request - A
10017a20:	65687475 6369746e 6f697461 6146206e     uthentication Fa
10017a30:	64656c69 00000000 65746e45 68742072     iled....Enter th
10017a40:	61502065 656b7373 2d362879 69676944     e Passkey(6-Digi
10017a50:	69202974 6554206e 6e696d72 003a6c61     t) in Terminal:.
10017a60:	206e6950 656d6954 0074756f 63736944     Pin Timeout.Disc
10017a70:	656e6e6f 6e697463 2e2e2067 0000002e     onnecting ......
10017a80:	61656c50 45206573 7265746e 65687420     Please Enter the
10017a90:	6c6f6620 69776f6c 5020676e 2d737361      following Pass-
10017aa0:	65646f63 206e6f28 6568746f 65442072     code(on other De
10017ab0:	65636976 00003a29 72696150 79656b2d     vice):..Pair-key
10017ac0:	70657220 6620796c 656c6961 00000064      reply failed...
10017ad0:	20424f4f 74616546 20657275 20746f4e     OOB Feature Not 
10017ae0:	70707573 6574726f 00000064 65746e45     supported...Ente
10017af0:	20646572 73736150 646f632d 00003a65     red Pass-code:..
10017b00:	2d434e45 3a716552 6e6f4320 6148206e     ENC-Req: Conn Ha
10017b10:	656c646e 76654420 20656369 6e756f46     ndle Device Foun
10017b20:	64683a64 64253a6c 00000000 74736f68     d:hdl:%d....host
10017b30:	76656420 20656369 76696465 00782520      device ediv %x.
10017b40:	72656570 76656420 20656369 76696465     peer device ediv
10017b50:	00782520 5f636e65 20716572 76696465      %x.enc_req ediv
10017b60:	00782520 20656854 65646e69 73692078      %x.The index is
10017b70:	00642520 2d434e45 3a716552 79654b20      %d.ENC-Req: Key
10017b80:	756f4620 0000646e 72696150 20676e69      Found..Pairing 
10017b90:	6f666e69 74616d72 206e6f69 7020666f     information of p
10017ba0:	20726565 69766564 69206563 6f6e2073     eer device is no
10017bb0:	76612074 616c6961 2e656c62 00000000     t available.....
10017bc0:	61656c50 75206573 6961706e 68742072     Please unpair th
10017bd0:	65642065 65636976 6f726620 6570206d     e device from pe
10017be0:	64207265 63697665 6f6d2865 656c6962     er device(mobile
10017bf0:	65732029 6e697474 6d207367 20756e65     ) settings menu 
10017c00:	20646e61 72617473 61702074 6e697269     and start pairin
10017c10:	67612067 006e6961 72636e45 69747079     g again.Encrypti
10017c20:	52206e6f 65757165 52207473 796c7065     on Request Reply
10017c30:	69614620 0064656c 72636e45 69747079      Failed.Encrypti
10017c40:	52206e6f 65757165 52207473 796c7065     on Request Reply
10017c50:	00000000 656c625b 696e695f 09095d74     ....[ble_init]..
10017c60:	696e4909 6c616974 6e697a69 41532067     .Initializing SA
10017c70:	3131424d 00000000 656c625b 696e695f     MB11....[ble_ini
10017c80:	09095d74 424d4153 49203131 6974696e     t]..SAMB11 Initi
10017c90:	7a696c61 6f697461 6166206e 64656c69     alization failed
10017ca0:	00000000 656c625b 696e695f 09095d74     ....[ble_init]..
10017cb0:	61656c50 63206573 6b636568 65687420     Please check the
10017cc0:	776f7020 61207265 6320646e 656e6e6f      power and conne
10017cd0:	6f697463 202f206e 64726168 65726177     ction / hardware
10017ce0:	6e6f6320 7463656e 0000726f 52424153      connector..SABR
10017cf0:	4d532d65 00000053 69766544 6e206563     e-SMS...Device n
10017d00:	20656d61 20746573 6c696166 00006465     ame set failed..
10017d10:	656c625b 7465735f 7665645f 6e6f635f     [ble_set_dev_con
10017d20:	5d676966 44420909 64646120 73736572     fig]..BD address
10017d30:	74656720 69616620 0064656c 656c625b      get failed.[ble
10017d40:	7465735f 7665645f 6e6f635f 5d676966     _set_dev_config]
10017d50:	44420909 64644120 73736572 2578303a     ..BD Address:0x%
10017d60:	25583230 25583230 25583230 25583230     02X%02X%02X%02X%
10017d70:	25583230 2c583230 64644120 73736572     02X%02X, Address
10017d80:	70795420 64253a65 00000000 656c625b      Type:%d....[ble
10017d90:	7465735f 7665645f 6e6f635f 5d676966     _set_dev_config]
10017da0:	74655309 454c4220 76654420 20656369     .Set BLE Device 
10017db0:	666e6f63 72756769 6f697461 6166206e     configuration fa
10017dc0:	64656c69 00000000 656c625b 7465735f     iled....[ble_set
10017dd0:	7665645f 6e6f635f 5d676966 74655309     _dev_config].Set
10017de0:	454c4220 76654420 20656369 72646441      BLE Device Addr
10017df0:	20737365 6c696166 00006465 6e616353     ess failed..Scan
10017e00:	676e696e 502e2e2e 7361656c 61772065     ning...Please wa
10017e10:	2e2e7469 0000002e 76616c53 65732065     it......Slave se
10017e20:	69727563 72207974 65757165 73207473     curity request s
10017e30:	65636375 75667373 0000006c 76616c53     uccessful...Slav
10017e40:	65732065 69727563 72207974 65757165     e security reque
10017e50:	66207473 656c6961 00000064 6e6e6f43     st failed...Conn
10017e60:	65746365 6f742064 65657020 65642072     ected to peer de
10017e70:	65636976 74697720 64612068 73657264     vice with addres
10017e80:	78302073 78323025 78323025 78323025     s 0x%02x%02x%02x
10017e90:	78323025 78323025 78323025 00000000     %02x%02x%02x....
10017ea0:	6e6e6f43 69746365 48206e6f 6c646e61     Connection Handl
10017eb0:	64252065 00000000 6f736552 6e69766c     e %d....Resolvin
10017ec0:	61522067 6d6f646e 64646120 73736572     g Random address
10017ed0:	63757320 73736563 00002a2a 6f736552      success**..Reso
10017ee0:	6e69766c 61522067 6d6f646e 64646120     lving Random add
10017ef0:	73736572 69616620 2a64656c 0000002a     ress failed**...
10017f00:	2078614d 626d756e 6f207265 6f632066     Max number of co
10017f10:	63656e6e 6e6f6974 61657220 64656863     nnection reached
10017f20:	6425203a 3d3d3d20 7369443e 6e6e6f63     : %d ===>Disconn
10017f30:	69746365 2e2e676e 0000002e 69766544     ecting......Devi
10017f40:	43206563 656e6e6f 6f697463 6146206e     ce Connection Fa
10017f50:	64656c69 53202d20 75746174 25203a73     iled - Status: %
10017f60:	00000064 23232323 23232323 65442323     d...##########De
10017f70:	65636976 756f4620 0000646e 23232323     vice Found..####
10017f80:	23232323 65442323 65636976 746f4e20     ######Device Not
10017f90:	756f4620 0000646e 69766544 69206563      Found..Device i
10017fa0:	253a7864 00000064 4c420a0d 76452d45     dx:%d.....BLE-Ev
10017fb0:	3a746e65 00006425 54544147 7265535f     ent:%d..GATT_Ser
10017fc0:	20726576 6e657645 64253a74 00000000     ver Event:%d....
10017fd0:	2d454c42 616e614d 3a726567 6e6b6e55     BLE-Manager:Unkn
10017fe0:	206e776f 6e657645 78303d74 00005825     own Event=0x%X..
10017ff0:	656c625b 6e616d5f 72656761 0909095d     [ble_manager]...
10018000:	756e614d 74636166 72657275 65707320     Manufacturer spe
10018010:	69666963 61642063 65206174 6c62616e     cific data enabl
10018020:	00006465 5a2d571c 00002dbe 20454c42     ed...W-Z.-..BLE 
10018030:	65766441 73697472 6e656d65 61642074     Advertisement da
10018040:	73206174 66207465 656c6961 00000064     ta set failed...

10018050 <ble_mgr_gap_handle>:
10018050:	1000d7e9 1000da99 1000d80d 1000d835     ............5...
10018060:	00000000 1000e715 1000d915 1000d9b1     ................
10018070:	1000dcf5 1000db45 1000def5 1000dd0d     ....E...........
10018080:	1000e081 1000e1c5 1000d9d5 1000e961     ............a...
	...
1001809c:	306e7442 746e6920 202e2e2e 00000000     Btn0 int... ....
100180ac:	6f727245 6e692072 736d7320 7475625f     Error in sms_but
100180bc:	5f6e6f74 29286e66 00000000 656e6f64     ton_fn()....done
100180cc:	00000000 316e7462 746e6920 202e2e2e     ....btn1 int... 
100180dc:	00000000 2055504d 20746e69 29642528     ....MPU int (%d)
100180ec:	202e2e2e 00000000 73657250 6e692073     ... ....Press in
100180fc:	25282074 2e2e2964 0000202e 656d6954     t (%d)... ..Time
1001810c:	69203172 2e2e746e 0000202e 656d6954     r1 int... ..Time
1001811c:	69203272 2e2e746e 0000202e 2055504d     r2 int... ..MPU 
1001812c:	646e6573 20676e69 2f642528 2e296425     sending (%d/%d).
1001813c:	00202e2e 73657250 65732073 6e69646e     .. .Press sendin
1001814c:	25282067 64252f64 2e2e2e29 00000020     g (%d/%d)... ...
1001815c:	656d7441 6f43206c 022e7072                       Atmel Corp.

10018167 <CSWTCH.45>:
10018167:	00100402                                         ...

1001816a <CSWTCH.47>:
1001816a:	03010300 03030303 03030303 02020303              ...............

10018179 <client_conf_uuid>:
10018179:	29042902                                         .)

1001817b <presentation_format_uuid>:
1001817b:	29012904                                         .)

1001817d <user_desc_uuid>:
1001817d:	29032901                                         .)

1001817f <server_conf_uuid>:
1001817f:	29002903                                         .)

10018181 <extended_props_uuid>:
10018181:	28022900                                         .)

10018183 <include_uuid>:
10018183:	28032802                                         .(

10018185 <char_uuid>:
10018185:	ee002803 12100138 d0100138 a8100138     .(..8...8...8...
10018195:	d0100138 9c100138 d0100138 a8100138     8...8...8...8...
100181a5:	12100138 12100138 9c100138 a8100138     8...8...8...8...
100181b5:	54100138 54100139 54100139 d6100139     8..T9..T9..T9...
100181c5:	12100138 12100138 bc100138 a6100138     8...8...8...8...
100181d5:	bc100138 9c100138 bc100138 a6100138     8...8...8...8...
100181e5:	12100138 12100138 9c100138 a6100138     8...8...8...8...
100181f5:	54100138 54100139 54100139 60100139     8..T9..T9..T9..`
10018205:	4c100139 aa10013c aa10013b a810013b     9..L<...;...;...
10018215:	3e10013b 3e10013c 3410013c a810013c     ;..><..><..4<...
10018225:	3e10013b 3410013c 3e10013c a810013c     ;..><..4<..><...
10018235:	4410013b 4410013c 4410013c ce10013c     ;..D<..D<..D<...
10018245:	c010013c 80100145 80100144 7e100144     <...E...D...D..~
10018255:	98100144 98100145 8a100145 7e100145     D...E...E...E..~
10018265:	98100144 8a100145 98100145 7e100145     D...E...E...E..~
10018275:	a0100144 a0100145 a0100145 a0100145     D...E...E...E...
10018285:	43100147 8c000000                                G..C...

1001828c <_global_impure_ptr>:
1001828c:	1001838c                                ....

10018290 <__sf_fake_stdin>:
	...

100182b0 <__sf_fake_stdout>:
	...

100182d0 <__sf_fake_stderr>:
	...
100182f0:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
10018300:	32313000 36353433 41393837 45444342     .0123456789ABCDE
10018310:	31300046 35343332 39383736 64636261     F.0123456789abcd
10018320:	00006665                                ef..

10018324 <_init>:
10018324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10018326:	46c0      	nop			; (mov r8, r8)
10018328:	bcf8      	pop	{r3, r4, r5, r6, r7}
1001832a:	bc08      	pop	{r3}
1001832c:	469e      	mov	lr, r3
1001832e:	4770      	bx	lr

10018330 <__init_array_start>:
10018330:	100080b1 	.word	0x100080b1

10018334 <_fini>:
10018334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10018336:	46c0      	nop			; (mov r8, r8)
10018338:	bcf8      	pop	{r3, r4, r5, r6, r7}
1001833a:	bc08      	pop	{r3}
1001833c:	469e      	mov	lr, r3
1001833e:	4770      	bx	lr

10018340 <__fini_array_start>:
10018340:	10008089 	.word	0x10008089
