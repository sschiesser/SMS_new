
SMS_peripheral1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000fe70  10008000  10008000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000000a8  10017e70  10017e70  00017e70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00002f24  10017f18  10017f18  00017f18  2**2
                  ALLOC
  3 .stack        00000804  1001ae3c  1001ae3c  00017f18  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00017f18  2**0
                  CONTENTS, READONLY
  5 .comment      000000b4  00000000  00000000  00017f40  2**0
                  CONTENTS, READONLY
  6 .debug_info   0004b4a6  00000000  00000000  00017ff4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000052e1  00000000  00000000  0006349a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000a325  00000000  00000000  0006877b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000b40  00000000  00000000  00072aa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000b00  00000000  00000000  000735e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0000c388  00000000  00000000  000740e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00015fb9  00000000  00000000  00080468  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00141806  00000000  00000000  00096421  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00002e58  00000000  00000000  001d7c28  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

10008000 <app_entry>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void app_entry(void)
{
10008000:	b510      	push	{r4, lr}

    /* Initialize the relocate segment */
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
10008002:	4b18      	ldr	r3, [pc, #96]	; (10008064 <app_entry+0x64>)
10008004:	4a18      	ldr	r2, [pc, #96]	; (10008068 <app_entry+0x68>)
10008006:	429a      	cmp	r2, r3
10008008:	d003      	beq.n	10008012 <app_entry+0x12>
        for (; pDest < &_erelocate;) {
1000800a:	4b18      	ldr	r3, [pc, #96]	; (1000806c <app_entry+0x6c>)
1000800c:	4a15      	ldr	r2, [pc, #84]	; (10008064 <app_entry+0x64>)
1000800e:	429a      	cmp	r2, r3
10008010:	d304      	bcc.n	1000801c <app_entry+0x1c>
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
10008012:	4b17      	ldr	r3, [pc, #92]	; (10008070 <app_entry+0x70>)
10008014:	4a17      	ldr	r2, [pc, #92]	; (10008074 <app_entry+0x74>)
10008016:	429a      	cmp	r2, r3
10008018:	d310      	bcc.n	1000803c <app_entry+0x3c>
1000801a:	e01e      	b.n	1000805a <app_entry+0x5a>
1000801c:	4b16      	ldr	r3, [pc, #88]	; (10008078 <app_entry+0x78>)
1000801e:	4a13      	ldr	r2, [pc, #76]	; (1000806c <app_entry+0x6c>)
10008020:	3203      	adds	r2, #3
10008022:	1ad2      	subs	r2, r2, r3
10008024:	0892      	lsrs	r2, r2, #2
10008026:	3201      	adds	r2, #1
10008028:	0092      	lsls	r2, r2, #2
    /* Initialize the relocate segment */
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
        for (; pDest < &_erelocate;) {
1000802a:	2300      	movs	r3, #0
            *pDest++ = *pSrc++;
1000802c:	480d      	ldr	r0, [pc, #52]	; (10008064 <app_entry+0x64>)
1000802e:	490e      	ldr	r1, [pc, #56]	; (10008068 <app_entry+0x68>)
10008030:	58cc      	ldr	r4, [r1, r3]
10008032:	50c4      	str	r4, [r0, r3]
10008034:	3304      	adds	r3, #4
    /* Initialize the relocate segment */
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
        for (; pDest < &_erelocate;) {
10008036:	4293      	cmp	r3, r2
10008038:	d1fa      	bne.n	10008030 <app_entry+0x30>
1000803a:	e7ea      	b.n	10008012 <app_entry+0x12>
1000803c:	4b0f      	ldr	r3, [pc, #60]	; (1000807c <app_entry+0x7c>)
1000803e:	490c      	ldr	r1, [pc, #48]	; (10008070 <app_entry+0x70>)
10008040:	3103      	adds	r1, #3
10008042:	1ac9      	subs	r1, r1, r3
10008044:	0889      	lsrs	r1, r1, #2
10008046:	3101      	adds	r1, #1
10008048:	0089      	lsls	r1, r1, #2
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
1000804a:	2300      	movs	r3, #0
        *pDest++ = 0;
1000804c:	4c09      	ldr	r4, [pc, #36]	; (10008074 <app_entry+0x74>)
1000804e:	2000      	movs	r0, #0
10008050:	191a      	adds	r2, r3, r4
10008052:	6010      	str	r0, [r2, #0]
10008054:	3304      	adds	r3, #4
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
10008056:	428b      	cmp	r3, r1
10008058:	d1fa      	bne.n	10008050 <app_entry+0x50>
        *pDest++ = 0;
    }

    /* Initialize the C library */
    __libc_init_array();
1000805a:	4b09      	ldr	r3, [pc, #36]	; (10008080 <app_entry+0x80>)
1000805c:	4798      	blx	r3

    /* Branch to main function */
    main();
1000805e:	4b09      	ldr	r3, [pc, #36]	; (10008084 <app_entry+0x84>)
10008060:	4798      	blx	r3

    /* return to BLE OS*/
    return;
}
10008062:	bd10      	pop	{r4, pc}
10008064:	10017e70 	.word	0x10017e70
10008068:	10017e70 	.word	0x10017e70
1000806c:	10017f18 	.word	0x10017f18
10008070:	1001ae3c 	.word	0x1001ae3c
10008074:	10017f18 	.word	0x10017f18
10008078:	10017e74 	.word	0x10017e74
1000807c:	10017f1c 	.word	0x10017f1c
10008080:	10011bd9 	.word	0x10011bd9
10008084:	1000d53d 	.word	0x1000d53d

10008088 <__do_global_dtors_aux>:
10008088:	b510      	push	{r4, lr}
1000808a:	4c06      	ldr	r4, [pc, #24]	; (100080a4 <__do_global_dtors_aux+0x1c>)
1000808c:	7823      	ldrb	r3, [r4, #0]
1000808e:	2b00      	cmp	r3, #0
10008090:	d107      	bne.n	100080a2 <__do_global_dtors_aux+0x1a>
10008092:	4b05      	ldr	r3, [pc, #20]	; (100080a8 <__do_global_dtors_aux+0x20>)
10008094:	2b00      	cmp	r3, #0
10008096:	d002      	beq.n	1000809e <__do_global_dtors_aux+0x16>
10008098:	4804      	ldr	r0, [pc, #16]	; (100080ac <__do_global_dtors_aux+0x24>)
1000809a:	e000      	b.n	1000809e <__do_global_dtors_aux+0x16>
1000809c:	bf00      	nop
1000809e:	2301      	movs	r3, #1
100080a0:	7023      	strb	r3, [r4, #0]
100080a2:	bd10      	pop	{r4, pc}
100080a4:	10017f18 	.word	0x10017f18
100080a8:	00000000 	.word	0x00000000
100080ac:	10017e70 	.word	0x10017e70

100080b0 <frame_dummy>:
100080b0:	4b08      	ldr	r3, [pc, #32]	; (100080d4 <frame_dummy+0x24>)
100080b2:	b510      	push	{r4, lr}
100080b4:	2b00      	cmp	r3, #0
100080b6:	d003      	beq.n	100080c0 <frame_dummy+0x10>
100080b8:	4907      	ldr	r1, [pc, #28]	; (100080d8 <frame_dummy+0x28>)
100080ba:	4808      	ldr	r0, [pc, #32]	; (100080dc <frame_dummy+0x2c>)
100080bc:	e000      	b.n	100080c0 <frame_dummy+0x10>
100080be:	bf00      	nop
100080c0:	4807      	ldr	r0, [pc, #28]	; (100080e0 <frame_dummy+0x30>)
100080c2:	6803      	ldr	r3, [r0, #0]
100080c4:	2b00      	cmp	r3, #0
100080c6:	d100      	bne.n	100080ca <frame_dummy+0x1a>
100080c8:	bd10      	pop	{r4, pc}
100080ca:	4b06      	ldr	r3, [pc, #24]	; (100080e4 <frame_dummy+0x34>)
100080cc:	2b00      	cmp	r3, #0
100080ce:	d0fb      	beq.n	100080c8 <frame_dummy+0x18>
100080d0:	4798      	blx	r3
100080d2:	e7f9      	b.n	100080c8 <frame_dummy+0x18>
100080d4:	00000000 	.word	0x00000000
100080d8:	10017f1c 	.word	0x10017f1c
100080dc:	10017e70 	.word	0x10017e70
100080e0:	10017e70 	.word	0x10017e70
100080e4:	00000000 	.word	0x00000000

100080e8 <aon_sleep_timer_get_config_defaults>:
 * \param[out]  config  Pointer to a AON Sleep Timer module configuration structure to set
 */
void aon_sleep_timer_get_config_defaults(struct aon_sleep_timer_config *config)
{
	/* Default configuration values */
	config->wakeup = AON_SLEEP_TIMER_WAKEUP_ARM;
100080e8:	2301      	movs	r3, #1
100080ea:	7003      	strb	r3, [r0, #0]
	config->mode = AON_SLEEP_TIMER_SINGLE_MODE;
100080ec:	7043      	strb	r3, [r0, #1]
	config->counter = 32000;
100080ee:	23fa      	movs	r3, #250	; 0xfa
100080f0:	01db      	lsls	r3, r3, #7
100080f2:	6043      	str	r3, [r0, #4]
}
100080f4:	4770      	bx	lr
100080f6:	46c0      	nop			; (mov r8, r8)

100080f8 <aon_sleep_timer_disable>:
 */
void aon_sleep_timer_disable(void)
{
	uint32_t regval;

	AON_SLEEP_TIMER0->SINGLE_COUNT_DURATION.reg = 0;
100080f8:	4b06      	ldr	r3, [pc, #24]	; (10008114 <aon_sleep_timer_disable+0x1c>)
100080fa:	2200      	movs	r2, #0
100080fc:	605a      	str	r2, [r3, #4]
	regval = AON_SLEEP_TIMER0->CONTROL.reg;
100080fe:	681a      	ldr	r2, [r3, #0]
	regval &= ~AON_SLEEP_TIMER_CONTROL_RELOAD_ENABLE;
	regval &= ~AON_SLEEP_TIMER_CONTROL_SINGLE_COUNT_ENABLE;
10008100:	2103      	movs	r1, #3
10008102:	438a      	bics	r2, r1
	AON_SLEEP_TIMER0->CONTROL.reg = regval;
10008104:	601a      	str	r2, [r3, #0]

	while (AON_SLEEP_TIMER0->CONTROL.reg & (1 << 14)) {
10008106:	0019      	movs	r1, r3
10008108:	2280      	movs	r2, #128	; 0x80
1000810a:	01d2      	lsls	r2, r2, #7
1000810c:	680b      	ldr	r3, [r1, #0]
1000810e:	4213      	tst	r3, r2
10008110:	d1fc      	bne.n	1000810c <aon_sleep_timer_disable+0x14>
	}
}
10008112:	4770      	bx	lr
10008114:	4000d000 	.word	0x4000d000

10008118 <aon_sleep_timer_clear_interrup>:
 * This flag will be cleared automatically once the IRQ
 * has been seen on the sleep clock.
 */
void aon_sleep_timer_clear_interrup(void)
{
	AON_SLEEP_TIMER0->CONTROL.reg |= AON_SLEEP_TIMER_CONTROL_IRQ_CLEAR;
10008118:	4a02      	ldr	r2, [pc, #8]	; (10008124 <aon_sleep_timer_clear_interrup+0xc>)
1000811a:	6811      	ldr	r1, [r2, #0]
1000811c:	2310      	movs	r3, #16
1000811e:	430b      	orrs	r3, r1
10008120:	6013      	str	r3, [r2, #0]
}
10008122:	4770      	bx	lr
10008124:	4000d000 	.word	0x4000d000

10008128 <aon_sleep_timer_isr_handler>:
 *
 * Timer ISR handler.
 *
 */
static void aon_sleep_timer_isr_handler(void)
{
10008128:	b510      	push	{r4, lr}
	aon_sleep_timer_clear_interrup();
1000812a:	4b04      	ldr	r3, [pc, #16]	; (1000813c <aon_sleep_timer_isr_handler+0x14>)
1000812c:	4798      	blx	r3

	if (aon_sleep_timer_callback) {
1000812e:	4b04      	ldr	r3, [pc, #16]	; (10008140 <aon_sleep_timer_isr_handler+0x18>)
10008130:	681b      	ldr	r3, [r3, #0]
10008132:	2b00      	cmp	r3, #0
10008134:	d000      	beq.n	10008138 <aon_sleep_timer_isr_handler+0x10>
		aon_sleep_timer_callback();
10008136:	4798      	blx	r3
	}
}
10008138:	bd10      	pop	{r4, pc}
1000813a:	46c0      	nop			; (mov r8, r8)
1000813c:	10008119 	.word	0x10008119
10008140:	10017f34 	.word	0x10017f34

10008144 <aon_sleep_timer_register_callback>:
 *
 * \param[in]     callback_func Pointer to callback function
 */
void aon_sleep_timer_register_callback(aon_sleep_timer_callback_t fun)
{
	aon_sleep_timer_callback = fun;
10008144:	4b01      	ldr	r3, [pc, #4]	; (1000814c <aon_sleep_timer_register_callback+0x8>)
10008146:	6018      	str	r0, [r3, #0]
}
10008148:	4770      	bx	lr
1000814a:	46c0      	nop			; (mov r8, r8)
1000814c:	10017f34 	.word	0x10017f34

10008150 <aon_sleep_timer_unregister_callback>:
 * Unregisters and disable a callback function implemented by the user.
 *
 */
void aon_sleep_timer_unregister_callback(void)
{
	aon_sleep_timer_callback = NULL;
10008150:	2200      	movs	r2, #0
10008152:	4b01      	ldr	r3, [pc, #4]	; (10008158 <aon_sleep_timer_unregister_callback+0x8>)
10008154:	601a      	str	r2, [r3, #0]
}
10008156:	4770      	bx	lr
10008158:	10017f34 	.word	0x10017f34

1000815c <aon_sleep_timer_init>:
 *
 * \param[in]     config       Pointer to the AON Sleep Timer configuration options struct
 *
 */
void aon_sleep_timer_init(const struct aon_sleep_timer_config *config)
{
1000815c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000815e:	b083      	sub	sp, #12
	uint32_t aon_st_ctrl = 0;

	AON_PWR_SEQ0->AON_ST_WAKEUP_CTRL.reg = AON_PWR_SEQ_AON_ST_WAKEUP_CTRL_RESETVALUE;
10008160:	2200      	movs	r2, #0
10008162:	4b29      	ldr	r3, [pc, #164]	; (10008208 <aon_sleep_timer_init+0xac>)
10008164:	731a      	strb	r2, [r3, #12]
	if (config->wakeup == AON_SLEEP_TIMER_WAKEUP_ARM_BLE) {
10008166:	7803      	ldrb	r3, [r0, #0]
10008168:	2b02      	cmp	r3, #2
1000816a:	d105      	bne.n	10008178 <aon_sleep_timer_init+0x1c>
		AON_PWR_SEQ0->AON_ST_WAKEUP_CTRL.reg |=
1000816c:	4a26      	ldr	r2, [pc, #152]	; (10008208 <aon_sleep_timer_init+0xac>)
1000816e:	7b11      	ldrb	r1, [r2, #12]
10008170:	3301      	adds	r3, #1
10008172:	430b      	orrs	r3, r1
10008174:	7313      	strb	r3, [r2, #12]
10008176:	e005      	b.n	10008184 <aon_sleep_timer_init+0x28>
				AON_PWR_SEQ_AON_ST_WAKEUP_CTRL_ARM_ENABLE |
				AON_PWR_SEQ_AON_ST_WAKEUP_CTRL_BLE_ENABLE;
	} else if (config->wakeup == AON_SLEEP_TIMER_WAKEUP_ARM) {
10008178:	2b01      	cmp	r3, #1
1000817a:	d103      	bne.n	10008184 <aon_sleep_timer_init+0x28>
		AON_PWR_SEQ0->AON_ST_WAKEUP_CTRL.reg |=
1000817c:	4a22      	ldr	r2, [pc, #136]	; (10008208 <aon_sleep_timer_init+0xac>)
1000817e:	7b11      	ldrb	r1, [r2, #12]
10008180:	430b      	orrs	r3, r1
10008182:	7313      	strb	r3, [r2, #12]
				AON_PWR_SEQ_AON_ST_WAKEUP_CTRL_ARM_ENABLE;
	}

	aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
10008184:	4b21      	ldr	r3, [pc, #132]	; (1000820c <aon_sleep_timer_init+0xb0>)
10008186:	681a      	ldr	r2, [r3, #0]
	while (aon_st_ctrl & ((1UL << 31) - 1)) {
10008188:	0053      	lsls	r3, r2, #1
1000818a:	d01f      	beq.n	100081cc <aon_sleep_timer_init+0x70>
		AON_SLEEP_TIMER0->CONTROL.reg = 0;
1000818c:	4d1f      	ldr	r5, [pc, #124]	; (1000820c <aon_sleep_timer_init+0xb0>)
1000818e:	2700      	movs	r7, #0

static void delay_cycle(uint32_t cycles)
{
	volatile uint32_t i = 0;

	for (i = 0; i < cycles*100; i++) {
10008190:	262c      	movs	r6, #44	; 0x2c
10008192:	36ff      	adds	r6, #255	; 0xff
10008194:	2180      	movs	r1, #128	; 0x80
10008196:	01c9      	lsls	r1, r1, #7
				AON_PWR_SEQ_AON_ST_WAKEUP_CTRL_ARM_ENABLE;
	}

	aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
	while (aon_st_ctrl & ((1UL << 31) - 1)) {
		AON_SLEEP_TIMER0->CONTROL.reg = 0;
10008198:	602f      	str	r7, [r5, #0]

static aon_sleep_timer_callback_t aon_sleep_timer_callback = NULL;

static void delay_cycle(uint32_t cycles)
{
	volatile uint32_t i = 0;
1000819a:	9701      	str	r7, [sp, #4]

	for (i = 0; i < cycles*100; i++) {
1000819c:	9701      	str	r7, [sp, #4]
1000819e:	9b01      	ldr	r3, [sp, #4]
100081a0:	42b3      	cmp	r3, r6
100081a2:	d806      	bhi.n	100081b2 <aon_sleep_timer_init+0x56>
		asm volatile ("nop");
100081a4:	46c0      	nop			; (mov r8, r8)

static void delay_cycle(uint32_t cycles)
{
	volatile uint32_t i = 0;

	for (i = 0; i < cycles*100; i++) {
100081a6:	9b01      	ldr	r3, [sp, #4]
100081a8:	3301      	adds	r3, #1
100081aa:	9301      	str	r3, [sp, #4]
100081ac:	9b01      	ldr	r3, [sp, #4]
100081ae:	42b3      	cmp	r3, r6
100081b0:	d9f8      	bls.n	100081a4 <aon_sleep_timer_init+0x48>
100081b2:	7844      	ldrb	r4, [r0, #1]
100081b4:	000b      	movs	r3, r1
100081b6:	2c00      	cmp	r4, #0
100081b8:	d103      	bne.n	100081c2 <aon_sleep_timer_init+0x66>
100081ba:	2380      	movs	r3, #128	; 0x80
100081bc:	009b      	lsls	r3, r3, #2
100081be:	e000      	b.n	100081c2 <aon_sleep_timer_init+0x66>
	while (aon_st_ctrl & ((1UL << 31) - 1)) {
		AON_SLEEP_TIMER0->CONTROL.reg = 0;
		delay_cycle(3);
		while (aon_st_ctrl & ((config->mode == AON_SLEEP_TIMER_RELOAD_MODE) ?
				(1 << 9) : (1 << 14))) {
			aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
100081c0:	682a      	ldr	r2, [r5, #0]

	aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
	while (aon_st_ctrl & ((1UL << 31) - 1)) {
		AON_SLEEP_TIMER0->CONTROL.reg = 0;
		delay_cycle(3);
		while (aon_st_ctrl & ((config->mode == AON_SLEEP_TIMER_RELOAD_MODE) ?
100081c2:	4213      	tst	r3, r2
100081c4:	d1fc      	bne.n	100081c0 <aon_sleep_timer_init+0x64>
				(1 << 9) : (1 << 14))) {
			aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
		}
		aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
100081c6:	682a      	ldr	r2, [r5, #0]
		AON_PWR_SEQ0->AON_ST_WAKEUP_CTRL.reg |=
				AON_PWR_SEQ_AON_ST_WAKEUP_CTRL_ARM_ENABLE;
	}

	aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
	while (aon_st_ctrl & ((1UL << 31) - 1)) {
100081c8:	0053      	lsls	r3, r2, #1
100081ca:	d1e5      	bne.n	10008198 <aon_sleep_timer_init+0x3c>
			aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
		}
		aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
	}

	if (config->mode == AON_SLEEP_TIMER_RELOAD_MODE) {
100081cc:	7843      	ldrb	r3, [r0, #1]
100081ce:	2b00      	cmp	r3, #0
100081d0:	d105      	bne.n	100081de <aon_sleep_timer_init+0x82>
		/* Reload counter will start here */
		AON_SLEEP_TIMER0->SINGLE_COUNT_DURATION.reg = config->counter;
100081d2:	4b0e      	ldr	r3, [pc, #56]	; (1000820c <aon_sleep_timer_init+0xb0>)
100081d4:	6842      	ldr	r2, [r0, #4]
100081d6:	605a      	str	r2, [r3, #4]
		AON_SLEEP_TIMER0->CONTROL.reg = AON_SLEEP_TIMER_CONTROL_RELOAD_ENABLE;
100081d8:	2201      	movs	r2, #1
100081da:	601a      	str	r2, [r3, #0]
100081dc:	e004      	b.n	100081e8 <aon_sleep_timer_init+0x8c>
	} else {
		/* Single counter will start here */
		AON_SLEEP_TIMER0->SINGLE_COUNT_DURATION.reg = config->counter;
100081de:	4b0b      	ldr	r3, [pc, #44]	; (1000820c <aon_sleep_timer_init+0xb0>)
100081e0:	6842      	ldr	r2, [r0, #4]
100081e2:	605a      	str	r2, [r3, #4]
		AON_SLEEP_TIMER0->CONTROL.reg = AON_SLEEP_TIMER_CONTROL_SINGLE_COUNT_ENABLE;
100081e4:	2202      	movs	r2, #2
100081e6:	601a      	str	r2, [r3, #0]
	}

	if (config->mode == AON_SLEEP_TIMER_SINGLE_MODE) {
100081e8:	7843      	ldrb	r3, [r0, #1]
100081ea:	2b01      	cmp	r3, #1
100081ec:	d106      	bne.n	100081fc <aon_sleep_timer_init+0xa0>
		while ((AON_SLEEP_TIMER0->CONTROL.reg &
100081ee:	4907      	ldr	r1, [pc, #28]	; (1000820c <aon_sleep_timer_init+0xb0>)
100081f0:	22e0      	movs	r2, #224	; 0xe0
100081f2:	01d2      	lsls	r2, r2, #7
100081f4:	680b      	ldr	r3, [r1, #0]
100081f6:	4013      	ands	r3, r2
100081f8:	4293      	cmp	r3, r2
100081fa:	d1fb      	bne.n	100081f4 <aon_sleep_timer_init+0x98>
				AON_SLEEP_TIMER_CONTROL_SLP_TIMER_SINGLE_COUNT_ENABLE_DLY_Msk)
				!= AON_SLEEP_TIMER_CONTROL_SLP_TIMER_SINGLE_COUNT_ENABLE_DLY_Msk) {
		}
	}

	system_register_isr(RAM_ISR_TABLE_AON_SLEEP_TIMER_INDEX, (uint32_t)aon_sleep_timer_isr_handler);
100081fc:	4904      	ldr	r1, [pc, #16]	; (10008210 <aon_sleep_timer_init+0xb4>)
100081fe:	202b      	movs	r0, #43	; 0x2b
10008200:	4b04      	ldr	r3, [pc, #16]	; (10008214 <aon_sleep_timer_init+0xb8>)
10008202:	4798      	blx	r3
}
10008204:	b003      	add	sp, #12
10008206:	bdf0      	pop	{r4, r5, r6, r7, pc}
10008208:	4000e000 	.word	0x4000e000
1000820c:	4000d000 	.word	0x4000d000
10008210:	10008129 	.word	0x10008129
10008214:	1000b445 	.word	0x1000b445

10008218 <_i2c_master_read_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
10008218:	b5f0      	push	{r4, r5, r6, r7, lr}
1000821a:	4657      	mov	r7, sl
1000821c:	464e      	mov	r6, r9
1000821e:	4645      	mov	r5, r8
10008220:	b4e0      	push	{r5, r6, r7}
10008222:	b082      	sub	sp, #8
	Assert(config);
	
	uint16_t counter = 0;
	uint32_t status  = 0;
	I2c *const i2c_module    = (module->hw);
	uint16_t length = packet->data_length;
10008224:	884d      	ldrh	r5, [r1, #2]

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
10008226:	2317      	movs	r3, #23
	uint16_t counter = 0;
	uint32_t status  = 0;
	I2c *const i2c_module    = (module->hw);
	uint16_t length = packet->data_length;

	if (length == 0) {
10008228:	2d00      	cmp	r5, #0
1000822a:	d033      	beq.n	10008294 <_i2c_master_read_packet+0x7c>
	Assert(module->hw);
	Assert(config);
	
	uint16_t counter = 0;
	uint32_t status  = 0;
	I2c *const i2c_module    = (module->hw);
1000822c:	6803      	ldr	r3, [r0, #0]
 *
 * \param[in]  i2c_module  Pointer to software module structure
 */
static inline void i2c_wait_for_idle(I2c *const i2c_module)
{
	while (i2c_module->I2C_STATUS.bit.I2C_ACTIVE) {
1000822e:	2428      	movs	r4, #40	; 0x28
10008230:	5d1a      	ldrb	r2, [r3, r4]
10008232:	07d2      	lsls	r2, r2, #31
10008234:	d4fc      	bmi.n	10008230 <_i2c_master_read_packet+0x18>
	}

	i2c_wait_for_idle(i2c_module);

	/* Flush the FIFO */
	i2c_module->I2C_FLUSH.reg = 1;
10008236:	2201      	movs	r2, #1
10008238:	2434      	movs	r4, #52	; 0x34
1000823a:	551a      	strb	r2, [r3, r4]

	/* Enable I2C on bus (start condition). */
	i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_1;
1000823c:	3c14      	subs	r4, #20
1000823e:	551a      	strb	r2, [r3, r4]
	/* Address I2C slave in case of Master mode enabled. */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 |
10008240:	880a      	ldrh	r2, [r1, #0]
10008242:	0052      	lsls	r2, r2, #1
10008244:	2402      	movs	r4, #2
10008246:	34ff      	adds	r4, #255	; 0xff
10008248:	4322      	orrs	r2, r4
1000824a:	b292      	uxth	r2, r2
1000824c:	801a      	strh	r2, [r3, #0]
			(packet->address << 1) | I2C_TRANSFER_READ;

	/* Now check whether the core has sent the data out and free the bus. */
	while (!(status & I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY)) {
1000824e:	3cf1      	subs	r4, #241	; 0xf1
		status = i2c_module->TRANSMIT_STATUS.reg;
10008250:	7a1a      	ldrb	r2, [r3, #8]
	/* Address I2C slave in case of Master mode enabled. */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 |
			(packet->address << 1) | I2C_TRANSFER_READ;

	/* Now check whether the core has sent the data out and free the bus. */
	while (!(status & I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY)) {
10008252:	4222      	tst	r2, r4
10008254:	d0fc      	beq.n	10008250 <_i2c_master_read_packet+0x38>
10008256:	2200      	movs	r2, #0
		status = i2c_module->TRANSMIT_STATUS.reg;
	}

	do {
		/* Send stop condition. */
		if ((!module->no_stop) && (counter == (length - 1))) {
10008258:	1e6c      	subs	r4, r5, #1
1000825a:	46a4      	mov	ip, r4
			i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_0;
1000825c:	2420      	movs	r4, #32
1000825e:	46a1      	mov	r9, r4
10008260:	2400      	movs	r4, #0
10008262:	46a0      	mov	r8, r4
		}

		status = i2c_module->RECEIVE_STATUS.reg;
		if (status & I2C_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY)
10008264:	2601      	movs	r6, #1
		status = i2c_module->TRANSMIT_STATUS.reg;
	}

	do {
		/* Send stop condition. */
		if ((!module->no_stop) && (counter == (length - 1))) {
10008266:	7944      	ldrb	r4, [r0, #5]
10008268:	2c00      	cmp	r4, #0
1000826a:	d104      	bne.n	10008276 <_i2c_master_read_packet+0x5e>
1000826c:	4562      	cmp	r2, ip
1000826e:	d102      	bne.n	10008276 <_i2c_master_read_packet+0x5e>
			i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_0;
10008270:	464c      	mov	r4, r9
10008272:	4647      	mov	r7, r8
10008274:	551f      	strb	r7, [r3, r4]
		}

		status = i2c_module->RECEIVE_STATUS.reg;
10008276:	7b1c      	ldrb	r4, [r3, #12]
		if (status & I2C_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY)
10008278:	4234      	tst	r4, r6
1000827a:	d008      	beq.n	1000828e <_i2c_master_read_packet+0x76>
			packet->data[counter++] = i2c_module->RECEIVE_DATA.reg;
1000827c:	1c54      	adds	r4, r2, #1
1000827e:	46a2      	mov	sl, r4
10008280:	791f      	ldrb	r7, [r3, #4]
10008282:	684c      	ldr	r4, [r1, #4]
10008284:	54a7      	strb	r7, [r4, r2]
10008286:	4652      	mov	r2, sl
10008288:	466c      	mov	r4, sp
1000828a:	80e2      	strh	r2, [r4, #6]
1000828c:	88e2      	ldrh	r2, [r4, #6]
	} while (counter < length);
1000828e:	42aa      	cmp	r2, r5
10008290:	d3e9      	bcc.n	10008266 <_i2c_master_read_packet+0x4e>

	return STATUS_OK;
10008292:	2300      	movs	r3, #0
}
10008294:	0018      	movs	r0, r3
10008296:	b002      	add	sp, #8
10008298:	bc1c      	pop	{r2, r3, r4}
1000829a:	4690      	mov	r8, r2
1000829c:	4699      	mov	r9, r3
1000829e:	46a2      	mov	sl, r4
100082a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
100082a2:	46c0      	nop			; (mov r8, r8)

100082a4 <_i2c_master_write_packet>:
 * \retval STATUS_OK                    The packet was write successfully
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
100082a4:	b5f0      	push	{r4, r5, r6, r7, lr}
100082a6:	4684      	mov	ip, r0
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(packet);
	
	I2c *const i2c_module = (module->hw);
100082a8:	6802      	ldr	r2, [r0, #0]
	uint16_t counter = 0;
	uint32_t status  = 0;

	uint16_t length = packet->data_length;
100082aa:	884e      	ldrh	r6, [r1, #2]
100082ac:	2428      	movs	r4, #40	; 0x28
100082ae:	5d13      	ldrb	r3, [r2, r4]
100082b0:	07db      	lsls	r3, r3, #31
100082b2:	d4fc      	bmi.n	100082ae <_i2c_master_write_packet+0xa>

	i2c_wait_for_idle(i2c_module);

	/* Flush the FIFO */
	i2c_module->I2C_FLUSH.reg = 1;
100082b4:	2301      	movs	r3, #1
100082b6:	2434      	movs	r4, #52	; 0x34
100082b8:	5513      	strb	r3, [r2, r4]

	/* Enable I2C on bus (start condition) */
	i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_1;
100082ba:	3c14      	subs	r4, #20
100082bc:	5513      	strb	r3, [r2, r4]

	/* Address I2C slave in case of Master mode enabled */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 | 
100082be:	880b      	ldrh	r3, [r1, #0]
100082c0:	005b      	lsls	r3, r3, #1
100082c2:	34e0      	adds	r4, #224	; 0xe0
100082c4:	4323      	orrs	r3, r4
100082c6:	b29b      	uxth	r3, r3
100082c8:	8013      	strh	r3, [r2, #0]
	Assert(module);
	Assert(module->hw);
	Assert(packet);
	
	I2c *const i2c_module = (module->hw);
	uint16_t counter = 0;
100082ca:	2400      	movs	r4, #0
	/* Address I2C slave in case of Master mode enabled */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 | 
			((packet->address) << 1) | I2C_TRANSFER_WRITE;
	do {
		status = i2c_module->TRANSMIT_STATUS.reg;
		if (status & I2C_TRANSMIT_STATUS_TX_FIFO_NOT_FULL_Msk) {
100082cc:	2501      	movs	r5, #1

	/* Address I2C slave in case of Master mode enabled */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 | 
			((packet->address) << 1) | I2C_TRANSFER_WRITE;
	do {
		status = i2c_module->TRANSMIT_STATUS.reg;
100082ce:	7a13      	ldrb	r3, [r2, #8]
100082d0:	b2db      	uxtb	r3, r3
		if (status & I2C_TRANSMIT_STATUS_TX_FIFO_NOT_FULL_Msk) {
100082d2:	421d      	tst	r5, r3
100082d4:	d004      	beq.n	100082e0 <_i2c_master_write_packet+0x3c>
			i2c_module->TRANSMIT_DATA.reg = packet->data[counter++];
100082d6:	1c67      	adds	r7, r4, #1
100082d8:	6848      	ldr	r0, [r1, #4]
100082da:	5d04      	ldrb	r4, [r0, r4]
100082dc:	8014      	strh	r4, [r2, #0]
100082de:	b2bc      	uxth	r4, r7
		}
	} while (counter < length); 
100082e0:	42b4      	cmp	r4, r6
100082e2:	d3f4      	bcc.n	100082ce <_i2c_master_write_packet+0x2a>

	/* Now check whether the core has sent the data out and free the bus */
	while (!(status & I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY)) {
100082e4:	06db      	lsls	r3, r3, #27
100082e6:	d403      	bmi.n	100082f0 <_i2c_master_write_packet+0x4c>
100082e8:	2110      	movs	r1, #16
			status = i2c_module->TRANSMIT_STATUS.reg;
100082ea:	7a13      	ldrb	r3, [r2, #8]
			i2c_module->TRANSMIT_DATA.reg = packet->data[counter++];
		}
	} while (counter < length); 

	/* Now check whether the core has sent the data out and free the bus */
	while (!(status & I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY)) {
100082ec:	420b      	tst	r3, r1
100082ee:	d0fc      	beq.n	100082ea <_i2c_master_write_packet+0x46>
			status = i2c_module->TRANSMIT_STATUS.reg;
	}

	/* Send stop condition */
	if (!module->no_stop) {
100082f0:	4663      	mov	r3, ip
100082f2:	795b      	ldrb	r3, [r3, #5]
100082f4:	2b00      	cmp	r3, #0
100082f6:	d102      	bne.n	100082fe <_i2c_master_write_packet+0x5a>
		i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_0;
100082f8:	2100      	movs	r1, #0
100082fa:	3320      	adds	r3, #32
100082fc:	54d1      	strb	r1, [r2, r3]
	}

	return STATUS_OK;
}
100082fe:	2000      	movs	r0, #0
10008300:	bdf0      	pop	{r4, r5, r6, r7, pc}
10008302:	46c0      	nop			; (mov r8, r8)

10008304 <i2c_master_get_config_defaults>:
		struct i2c_master_config *const config)
{
	/* Sanity check */
	Assert(config);
	
	config->clock_source    = I2C_CLK_INPUT_3;
10008304:	2303      	movs	r3, #3
10008306:	7003      	strb	r3, [r0, #0]
	config->clock_divider   = 0x10;
10008308:	330d      	adds	r3, #13
1000830a:	8043      	strh	r3, [r0, #2]
	config->pin_number_pad0 = PIN_LP_GPIO_8;
1000830c:	3b08      	subs	r3, #8
1000830e:	6043      	str	r3, [r0, #4]
	config->pin_number_pad1 = PIN_LP_GPIO_9;
10008310:	3301      	adds	r3, #1
10008312:	60c3      	str	r3, [r0, #12]
	config->pinmux_sel_pad0 = MUX_LP_GPIO_8_I2C0_SDA;
10008314:	3b07      	subs	r3, #7
10008316:	6083      	str	r3, [r0, #8]
	config->pinmux_sel_pad1 = MUX_LP_GPIO_9_I2C0_SCL;
10008318:	6103      	str	r3, [r0, #16]
}
1000831a:	4770      	bx	lr

1000831c <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		I2c *const hw,
		const struct i2c_master_config *const config)
{
1000831c:	b570      	push	{r4, r5, r6, lr}
1000831e:	0004      	movs	r4, r0
10008320:	0015      	movs	r5, r2
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(config);
	
	module->hw = hw;
10008322:	6001      	str	r1, [r0, #0]

	/* Sanity check arguments. */
	if ((module == NULL) || (config == NULL))
10008324:	2800      	cmp	r0, #0
10008326:	d026      	beq.n	10008376 <i2c_master_init+0x5a>
10008328:	2a00      	cmp	r2, #0
1000832a:	d026      	beq.n	1000837a <i2c_master_init+0x5e>
1000832c:	2228      	movs	r2, #40	; 0x28
1000832e:	5c8b      	ldrb	r3, [r1, r2]
10008330:	07db      	lsls	r3, r3, #31
10008332:	d4fc      	bmi.n	1000832e <i2c_master_init+0x12>
 *
 */
static inline void i2c_disable(I2c *const i2c_module)
{
	i2c_wait_for_idle(i2c_module);
	i2c_module->I2C_MODULE_ENABLE.reg = 0;
10008334:	2300      	movs	r3, #0
10008336:	750b      	strb	r3, [r1, #20]
		return STATUS_ERR_INVALID_ARG;

	i2c_disable(module->hw);
	if (module->hw == I2C0) {
10008338:	6823      	ldr	r3, [r4, #0]
1000833a:	4a11      	ldr	r2, [pc, #68]	; (10008380 <i2c_master_init+0x64>)
1000833c:	4293      	cmp	r3, r2
1000833e:	d103      	bne.n	10008348 <i2c_master_init+0x2c>
		system_peripheral_reset(PERIPHERAL_I2C0_CORE);
10008340:	2003      	movs	r0, #3
10008342:	4b10      	ldr	r3, [pc, #64]	; (10008384 <i2c_master_init+0x68>)
10008344:	4798      	blx	r3
10008346:	e006      	b.n	10008356 <i2c_master_init+0x3a>
	} else if (module->hw == I2C1) {
		system_peripheral_reset(PERIPHERAL_I2C1_CORE);
	} else {
		return STATUS_ERR_INVALID_ARG;
10008348:	2017      	movs	r0, #23
		return STATUS_ERR_INVALID_ARG;

	i2c_disable(module->hw);
	if (module->hw == I2C0) {
		system_peripheral_reset(PERIPHERAL_I2C0_CORE);
	} else if (module->hw == I2C1) {
1000834a:	4a0f      	ldr	r2, [pc, #60]	; (10008388 <i2c_master_init+0x6c>)
1000834c:	4293      	cmp	r3, r2
1000834e:	d115      	bne.n	1000837c <i2c_master_init+0x60>
		system_peripheral_reset(PERIPHERAL_I2C1_CORE);
10008350:	3002      	adds	r0, #2
10008352:	4b0c      	ldr	r3, [pc, #48]	; (10008384 <i2c_master_init+0x68>)
10008354:	4798      	blx	r3
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(config);

	I2c *const i2c_module = (module->hw);
10008356:	6824      	ldr	r4, [r4, #0]

	/* Set the pinmux for this i2c module. */
	gpio_pinmux_cofiguration(config->pin_number_pad0, (uint16_t)(config->pinmux_sel_pad0));
10008358:	8929      	ldrh	r1, [r5, #8]
1000835a:	7928      	ldrb	r0, [r5, #4]
1000835c:	4e0b      	ldr	r6, [pc, #44]	; (1000838c <i2c_master_init+0x70>)
1000835e:	47b0      	blx	r6
	gpio_pinmux_cofiguration(config->pin_number_pad1, (uint16_t)(config->pinmux_sel_pad1));
10008360:	8a29      	ldrh	r1, [r5, #16]
10008362:	7b28      	ldrb	r0, [r5, #12]
10008364:	47b0      	blx	r6
	/* Set clock. */
	i2c_module->CLOCK_SOURCE_SELECT.reg = config->clock_source;
10008366:	782b      	ldrb	r3, [r5, #0]
10008368:	7423      	strb	r3, [r4, #16]
	i2c_module->I2C_CLK_DIVIDER.reg = I2C_CLK_DIVIDER_I2C_DIVIDE_RATIO(config->clock_divider);
1000836a:	886b      	ldrh	r3, [r5, #2]
1000836c:	8323      	strh	r3, [r4, #24]
	/* Enable master mode. */
	i2c_module->I2C_MASTER_MODE.reg = I2C_MASTER_MODE_MASTER_ENABLE_1;
1000836e:	2301      	movs	r3, #1
10008370:	7723      	strb	r3, [r4, #28]
#endif

	/* Set config and return status. */
	_i2c_master_set_config(module, config);

	return STATUS_OK;
10008372:	2000      	movs	r0, #0
10008374:	e002      	b.n	1000837c <i2c_master_init+0x60>
	
	module->hw = hw;

	/* Sanity check arguments. */
	if ((module == NULL) || (config == NULL))
		return STATUS_ERR_INVALID_ARG;
10008376:	2017      	movs	r0, #23
10008378:	e000      	b.n	1000837c <i2c_master_init+0x60>
1000837a:	2017      	movs	r0, #23

	/* Set config and return status. */
	_i2c_master_set_config(module, config);

	return STATUS_OK;
}
1000837c:	bd70      	pop	{r4, r5, r6, pc}
1000837e:	46c0      	nop			; (mov r8, r8)
10008380:	40003000 	.word	0x40003000
10008384:	1000afdd 	.word	0x1000afdd
10008388:	40003400 	.word	0x40003400
1000838c:	1000a565 	.word	0x1000a565

10008390 <i2c_master_read_packet_wait>:
 * \retval STATUS_BUSY                  If module has a pending request.
 */
enum status_code i2c_master_read_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
10008390:	b510      	push	{r4, lr}
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL))
10008392:	2800      	cmp	r0, #0
10008394:	d008      	beq.n	100083a8 <i2c_master_read_packet_wait+0x18>
		return STATUS_ERR_INVALID_ARG;
10008396:	2317      	movs	r3, #23
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL))
10008398:	2900      	cmp	r1, #0
1000839a:	d006      	beq.n	100083aa <i2c_master_read_packet_wait+0x1a>
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->no_stop = false;
1000839c:	2300      	movs	r3, #0
1000839e:	7143      	strb	r3, [r0, #5]

	return _i2c_master_read_packet(module, packet);
100083a0:	4b03      	ldr	r3, [pc, #12]	; (100083b0 <i2c_master_read_packet_wait+0x20>)
100083a2:	4798      	blx	r3
100083a4:	0003      	movs	r3, r0
100083a6:	e000      	b.n	100083aa <i2c_master_read_packet_wait+0x1a>
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL))
		return STATUS_ERR_INVALID_ARG;
100083a8:	2317      	movs	r3, #23
#endif

	module->no_stop = false;

	return _i2c_master_read_packet(module, packet);
}
100083aa:	0018      	movs	r0, r3
100083ac:	bd10      	pop	{r4, pc}
100083ae:	46c0      	nop			; (mov r8, r8)
100083b0:	10008219 	.word	0x10008219

100083b4 <i2c_master_write_packet_wait>:
 * \retval STATUS_BUSY                  If module has a pending request.
 */
enum status_code i2c_master_write_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
100083b4:	b510      	push	{r4, lr}
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if ((module == NULL) || (packet == NULL)) {
100083b6:	2800      	cmp	r0, #0
100083b8:	d008      	beq.n	100083cc <i2c_master_write_packet_wait+0x18>
		return STATUS_ERR_INVALID_ARG;
100083ba:	2317      	movs	r3, #23
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if ((module == NULL) || (packet == NULL)) {
100083bc:	2900      	cmp	r1, #0
100083be:	d006      	beq.n	100083ce <i2c_master_write_packet_wait+0x1a>
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->no_stop = false;
100083c0:	2300      	movs	r3, #0
100083c2:	7143      	strb	r3, [r0, #5]

	return _i2c_master_write_packet(module, packet);
100083c4:	4b03      	ldr	r3, [pc, #12]	; (100083d4 <i2c_master_write_packet_wait+0x20>)
100083c6:	4798      	blx	r3
100083c8:	0003      	movs	r3, r0
100083ca:	e000      	b.n	100083ce <i2c_master_write_packet_wait+0x1a>
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if ((module == NULL) || (packet == NULL)) {
		return STATUS_ERR_INVALID_ARG;
100083cc:	2317      	movs	r3, #23
#endif

	module->no_stop = false;

	return _i2c_master_write_packet(module, packet);
}
100083ce:	0018      	movs	r0, r3
100083d0:	bd10      	pop	{r4, pc}
100083d2:	46c0      	nop			; (mov r8, r8)
100083d4:	100082a5 	.word	0x100082a5

100083d8 <i2c_master_write_packet_wait_no_stop>:
 * \retval STATUS_BUSY                  If module has a pending request.
 */
enum status_code i2c_master_write_packet_wait_no_stop(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
100083d8:	b510      	push	{r4, lr}
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL)) {
100083da:	2800      	cmp	r0, #0
100083dc:	d008      	beq.n	100083f0 <i2c_master_write_packet_wait_no_stop+0x18>
		return STATUS_ERR_INVALID_ARG;
100083de:	2317      	movs	r3, #23
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL)) {
100083e0:	2900      	cmp	r1, #0
100083e2:	d006      	beq.n	100083f2 <i2c_master_write_packet_wait_no_stop+0x1a>
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->no_stop = true;
100083e4:	3b16      	subs	r3, #22
100083e6:	7143      	strb	r3, [r0, #5]

	return _i2c_master_write_packet(module, packet);
100083e8:	4b03      	ldr	r3, [pc, #12]	; (100083f8 <i2c_master_write_packet_wait_no_stop+0x20>)
100083ea:	4798      	blx	r3
100083ec:	0003      	movs	r3, r0
100083ee:	e000      	b.n	100083f2 <i2c_master_write_packet_wait_no_stop+0x1a>
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL)) {
		return STATUS_ERR_INVALID_ARG;
100083f0:	2317      	movs	r3, #23
#endif

	module->no_stop = true;

	return _i2c_master_write_packet(module, packet);
}
100083f2:	0018      	movs	r0, r3
100083f4:	bd10      	pop	{r4, pc}
100083f6:	46c0      	nop			; (mov r8, r8)
100083f8:	100082a5 	.word	0x100082a5

100083fc <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
100083fc:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
100083fe:	4a06      	ldr	r2, [pc, #24]	; (10008418 <_sbrk+0x1c>)
10008400:	6812      	ldr	r2, [r2, #0]
10008402:	2a00      	cmp	r2, #0
10008404:	d102      	bne.n	1000840c <_sbrk+0x10>
		heap = (unsigned char *)&_end;
10008406:	4905      	ldr	r1, [pc, #20]	; (1000841c <_sbrk+0x20>)
10008408:	4a03      	ldr	r2, [pc, #12]	; (10008418 <_sbrk+0x1c>)
1000840a:	6011      	str	r1, [r2, #0]
	}
	prev_heap = heap;
1000840c:	4a02      	ldr	r2, [pc, #8]	; (10008418 <_sbrk+0x1c>)
1000840e:	6810      	ldr	r0, [r2, #0]

	heap += incr;
10008410:	18c3      	adds	r3, r0, r3
10008412:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
10008414:	4770      	bx	lr
10008416:	46c0      	nop			; (mov r8, r8)
10008418:	10017f38 	.word	0x10017f38
1000841c:	1001b640 	.word	0x1001b640

10008420 <_close>:
}

extern int _close(int file)
{
	return -1;
}
10008420:	2001      	movs	r0, #1
10008422:	4240      	negs	r0, r0
10008424:	4770      	bx	lr
10008426:	46c0      	nop			; (mov r8, r8)

10008428 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
10008428:	2380      	movs	r3, #128	; 0x80
1000842a:	019b      	lsls	r3, r3, #6
1000842c:	604b      	str	r3, [r1, #4]

	return 0;
}
1000842e:	2000      	movs	r0, #0
10008430:	4770      	bx	lr
10008432:	46c0      	nop			; (mov r8, r8)

10008434 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
10008434:	2001      	movs	r0, #1
10008436:	4770      	bx	lr

10008438 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
10008438:	2000      	movs	r0, #0
1000843a:	4770      	bx	lr

1000843c <sms_ble_pair_request_fn>:

/* AT_BLE_PAIR_REQUEST (#10) */
at_ble_status_t sms_ble_pair_request_fn(void *params)
{
    at_ble_pair_request_t *request = (at_ble_pair_request_t *)params;
    DBG_LOG_DEV("[sms_ble_pair_request_fn]\tPairing request... Bnew %d, BLE 0x%02x, T1 %d, T2 %d", button_instance.current_state, ble_instance.current_state, timer1_current_mode, timer2_current_mode);
1000843c:	4b03      	ldr	r3, [pc, #12]	; (1000844c <sms_ble_pair_request_fn+0x10>)
1000843e:	781b      	ldrb	r3, [r3, #0]
10008440:	4b03      	ldr	r3, [pc, #12]	; (10008450 <sms_ble_pair_request_fn+0x14>)
10008442:	781b      	ldrb	r3, [r3, #0]
10008444:	4b03      	ldr	r3, [pc, #12]	; (10008454 <sms_ble_pair_request_fn+0x18>)
10008446:	781b      	ldrb	r3, [r3, #0]
    //DBG_LOG_DEV("- conn handle: 0x%04x\r\n- peer features: 0x%02x", request->handle, request->peer_features);
    return AT_BLE_SUCCESS;
}
10008448:	2000      	movs	r0, #0
1000844a:	4770      	bx	lr
1000844c:	10019ab8 	.word	0x10019ab8
10008450:	100199dc 	.word	0x100199dc
10008454:	10019bf7 	.word	0x10019bf7

10008458 <sms_ble_notification_confirmed_fn>:

/* AT_BLE_NOTIFICATION_CONFIRMED (#29) */
at_ble_status_t sms_ble_notification_confirmed_fn(void *params)
{
10008458:	b570      	push	{r4, r5, r6, lr}
	DBG_LOG_CONT(" done!");
1000845a:	4811      	ldr	r0, [pc, #68]	; (100084a0 <sms_ble_notification_confirmed_fn+0x48>)
1000845c:	4d11      	ldr	r5, [pc, #68]	; (100084a4 <sms_ble_notification_confirmed_fn+0x4c>)
1000845e:	47a8      	blx	r5
    //gpio_pin_set_output_level(dbg_pin, DBG_PIN_HIGH);
    
    at_ble_cmd_complete_event_t *notification_status = (at_ble_cmd_complete_event_t *)params;
	ble_instance.sending_queue--;
10008460:	4c11      	ldr	r4, [pc, #68]	; (100084a8 <sms_ble_notification_confirmed_fn+0x50>)
10008462:	7863      	ldrb	r3, [r4, #1]
10008464:	3b01      	subs	r3, #1
10008466:	b2db      	uxtb	r3, r3
10008468:	7063      	strb	r3, [r4, #1]
	DBG_LOG("T/O: OFF");
1000846a:	4810      	ldr	r0, [pc, #64]	; (100084ac <sms_ble_notification_confirmed_fn+0x54>)
1000846c:	4b10      	ldr	r3, [pc, #64]	; (100084b0 <sms_ble_notification_confirmed_fn+0x58>)
1000846e:	4798      	blx	r3
10008470:	4810      	ldr	r0, [pc, #64]	; (100084b4 <sms_ble_notification_confirmed_fn+0x5c>)
10008472:	47a8      	blx	r5
	sms_ble_timeout = BLE_TIMEOUT_OFF;
10008474:	2201      	movs	r2, #1
10008476:	4252      	negs	r2, r2
10008478:	4b0f      	ldr	r3, [pc, #60]	; (100084b8 <sms_ble_notification_confirmed_fn+0x60>)
1000847a:	601a      	str	r2, [r3, #0]
    //button_instance.current_state = sms_button_get_state();
    //DBG_LOG_DEV("[sms_ble_notification_confirmed_fn]\tNotification sent... Bnew %d, BLE 0x%02x, T1 %d, T2 %d", button_instance.current_state, ble_current_state, timer1_current_mode, timer2_current_mode);
    //DBG_LOG_DEV("- conn handle: 0x%04x\r\n- operation: 0x%02x\r\n- status: 0x%02x", notification_status->conn_handle, notification_status->operation, notification_status->status);
    sms_dualtimer_stop(DUALTIMER_TIMER2);
1000847c:	2001      	movs	r0, #1
1000847e:	4b0f      	ldr	r3, [pc, #60]	; (100084bc <sms_ble_notification_confirmed_fn+0x64>)
10008480:	4798      	blx	r3
    timer2_current_mode = TIMER2_MODE_NONE;
10008482:	2200      	movs	r2, #0
10008484:	4b0e      	ldr	r3, [pc, #56]	; (100084c0 <sms_ble_notification_confirmed_fn+0x68>)
10008486:	701a      	strb	r2, [r3, #0]
    ble_instance.current_state = BLE_STATE_PAIRED;
10008488:	2322      	movs	r3, #34	; 0x22
1000848a:	7023      	strb	r3, [r4, #0]
    //DBG_LOG_CONT_DEV(" done!");

    //gpio_pin_set_output_level(dbg_pin, DBG_PIN_LOW);
    
    //DBG_LOG_DEV("Timer1 current mode: %d", timer1_current_mode);
    if(timer1_current_mode == TIMER1_MODE_NONE) {
1000848c:	4b0d      	ldr	r3, [pc, #52]	; (100084c4 <sms_ble_notification_confirmed_fn+0x6c>)
1000848e:	781b      	ldrb	r3, [r3, #0]
10008490:	2b00      	cmp	r3, #0
10008492:	d102      	bne.n	1000849a <sms_ble_notification_confirmed_fn+0x42>
        ulp_ready = true;
10008494:	3201      	adds	r2, #1
10008496:	4b0c      	ldr	r3, [pc, #48]	; (100084c8 <sms_ble_notification_confirmed_fn+0x70>)
10008498:	701a      	strb	r2, [r3, #0]
    }
    return AT_BLE_SUCCESS;
}
1000849a:	2000      	movs	r0, #0
1000849c:	bd70      	pop	{r4, r5, r6, pc}
1000849e:	46c0      	nop			; (mov r8, r8)
100084a0:	10016de0 	.word	0x10016de0
100084a4:	1001269d 	.word	0x1001269d
100084a8:	10019ab8 	.word	0x10019ab8
100084ac:	10016de8 	.word	0x10016de8
100084b0:	100127bd 	.word	0x100127bd
100084b4:	10016dec 	.word	0x10016dec
100084b8:	10019ab0 	.word	0x10019ab0
100084bc:	10009c51 	.word	0x10009c51
100084c0:	10019bf7 	.word	0x10019bf7
100084c4:	100199dc 	.word	0x100199dc
100084c8:	10019ab5 	.word	0x10019ab5

100084cc <sms_ble_indication_confirmed_fn>:

/* AT_BLE_INDICATION_CONFIRMED (#30) */
at_ble_status_t sms_ble_indication_confirmed_fn(void *params)
{
100084cc:	b510      	push	{r4, lr}
    
    at_ble_indication_confirmed_t *indication_status = (at_ble_indication_confirmed_t *)params;
    //button_instance.current_state = sms_button_get_state();
    //DBG_LOG_DEV("[sms_ble_indication_confirmed]\tIndication confirmed... Bnew %d, BLE 0x%02x, T1 %d, T2 %d", button_instance.current_state, ble_current_state, timer1_current_mode, timer2_current_mode);
    //DBG_LOG_DEV("- conn handle: 0x%04x\r\n- char handle: 0x%04x\r\n- status: 0x%02x", indication_status->conn_handle, indication_status->char_handle, indication_status->status);
    sms_dualtimer_stop(DUALTIMER_TIMER2);
100084ce:	2001      	movs	r0, #1
100084d0:	4b08      	ldr	r3, [pc, #32]	; (100084f4 <sms_ble_indication_confirmed_fn+0x28>)
100084d2:	4798      	blx	r3
    timer2_current_mode = TIMER2_MODE_NONE;
100084d4:	2200      	movs	r2, #0
100084d6:	4b08      	ldr	r3, [pc, #32]	; (100084f8 <sms_ble_indication_confirmed_fn+0x2c>)
100084d8:	701a      	strb	r2, [r3, #0]
    ble_instance.current_state = BLE_STATE_PAIRED;
100084da:	3222      	adds	r2, #34	; 0x22
100084dc:	4b07      	ldr	r3, [pc, #28]	; (100084fc <sms_ble_indication_confirmed_fn+0x30>)
100084de:	701a      	strb	r2, [r3, #0]
    //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
    //sms_sensors_toggle_interrupt(SMS_EXTINT_ENABLE);
    
    //gpio_pin_set_output_level(dbg_pin, DBG_PIN_LOW);
    
    if(timer1_current_mode == TIMER1_MODE_NONE) {
100084e0:	4b07      	ldr	r3, [pc, #28]	; (10008500 <sms_ble_indication_confirmed_fn+0x34>)
100084e2:	781b      	ldrb	r3, [r3, #0]
100084e4:	2b00      	cmp	r3, #0
100084e6:	d102      	bne.n	100084ee <sms_ble_indication_confirmed_fn+0x22>
        ulp_ready = true;
100084e8:	3a21      	subs	r2, #33	; 0x21
100084ea:	4b06      	ldr	r3, [pc, #24]	; (10008504 <sms_ble_indication_confirmed_fn+0x38>)
100084ec:	701a      	strb	r2, [r3, #0]
    }        
    return AT_BLE_SUCCESS;
}
100084ee:	2000      	movs	r0, #0
100084f0:	bd10      	pop	{r4, pc}
100084f2:	46c0      	nop			; (mov r8, r8)
100084f4:	10009c51 	.word	0x10009c51
100084f8:	10019bf7 	.word	0x10019bf7
100084fc:	10019ab8 	.word	0x10019ab8
10008500:	100199dc 	.word	0x100199dc
10008504:	10019ab5 	.word	0x10019ab5

10008508 <sms_ble_init_variables>:


/* Own functions */
void sms_ble_init_variables(void)
{
    ble_instance.current_state = BLE_STATE_POWEROFF;
10008508:	2300      	movs	r3, #0
1000850a:	4a02      	ldr	r2, [pc, #8]	; (10008514 <sms_ble_init_variables+0xc>)
1000850c:	7013      	strb	r3, [r2, #0]
    sms_ble_send_cnt = 0;
1000850e:	4a02      	ldr	r2, [pc, #8]	; (10008518 <sms_ble_init_variables+0x10>)
10008510:	8013      	strh	r3, [r2, #0]
}
10008512:	4770      	bx	lr
10008514:	10019ab8 	.word	0x10019ab8
10008518:	10019c3c 	.word	0x10019c3c

1000851c <sms_ble_power_down>:
	timer2_current_mode = TIMER2_MODE_LED_STARTUP;
	sms_led_blink_start(SMS_LED_0_PIN);
}

void sms_ble_power_down(void)
{
1000851c:	b510      	push	{r4, lr}
	sms_monitor_get_states("[sms_ble_power_down]");
1000851e:	481b      	ldr	r0, [pc, #108]	; (1000858c <sms_ble_power_down+0x70>)
10008520:	4b1b      	ldr	r3, [pc, #108]	; (10008590 <sms_ble_power_down+0x74>)
10008522:	4798      	blx	r3
	if(ble_instance.current_state == BLE_STATE_POWEROFF) {
10008524:	4b1b      	ldr	r3, [pc, #108]	; (10008594 <sms_ble_power_down+0x78>)
10008526:	781b      	ldrb	r3, [r3, #0]
10008528:	2b00      	cmp	r3, #0
1000852a:	d105      	bne.n	10008538 <sms_ble_power_down+0x1c>
		/* If already power off state, then go back sleeping */
		//sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
		ulp_ready = true;
1000852c:	2201      	movs	r2, #1
1000852e:	4b1a      	ldr	r3, [pc, #104]	; (10008598 <sms_ble_power_down+0x7c>)
10008530:	701a      	strb	r2, [r3, #0]
		release_sleep_lock();
10008532:	4b1a      	ldr	r3, [pc, #104]	; (1000859c <sms_ble_power_down+0x80>)
10008534:	4798      	blx	r3
10008536:	e028      	b.n	1000858a <sms_ble_power_down+0x6e>
	}
	else {
		/* Disable button interrupts */
		//sms_button_toggle_interrupt(SMS_BTN_INT_DISABLE, SMS_BTN_INT_DISABLE);
		/* Disconnect if necessary from BLE network */
		switch(ble_instance.current_state) {
10008538:	4b16      	ldr	r3, [pc, #88]	; (10008594 <sms_ble_power_down+0x78>)
1000853a:	781b      	ldrb	r3, [r3, #0]
1000853c:	b2db      	uxtb	r3, r3
1000853e:	2b21      	cmp	r3, #33	; 0x21
10008540:	d015      	beq.n	1000856e <sms_ble_power_down+0x52>
10008542:	d802      	bhi.n	1000854a <sms_ble_power_down+0x2e>
10008544:	2b20      	cmp	r3, #32
10008546:	d003      	beq.n	10008550 <sms_ble_power_down+0x34>
10008548:	e016      	b.n	10008578 <sms_ble_power_down+0x5c>
1000854a:	2b23      	cmp	r3, #35	; 0x23
1000854c:	d908      	bls.n	10008560 <sms_ble_power_down+0x44>
1000854e:	e013      	b.n	10008578 <sms_ble_power_down+0x5c>
			case BLE_STATE_ADVERTISING:
			DBG_LOG_DEV("[sms_ble_power_down]\tStopping command received during advertisement. Stopping... ");
			if(at_ble_adv_stop() != AT_BLE_SUCCESS) {
10008550:	4b13      	ldr	r3, [pc, #76]	; (100085a0 <sms_ble_power_down+0x84>)
10008552:	4798      	blx	r3
10008554:	2800      	cmp	r0, #0
10008556:	d10f      	bne.n	10008578 <sms_ble_power_down+0x5c>
				DBG_LOG_CONT_DEV("failed!!!");
				//#pragma TBD: manage adv_stop failure
			}
			else {
				DBG_LOG_CONT_DEV("done!");
				ble_instance.current_state = BLE_STATE_DISCONNECTED;
10008558:	2211      	movs	r2, #17
1000855a:	4b0e      	ldr	r3, [pc, #56]	; (10008594 <sms_ble_power_down+0x78>)
1000855c:	701a      	strb	r2, [r3, #0]
1000855e:	e00b      	b.n	10008578 <sms_ble_power_down+0x5c>
			case BLE_STATE_PAIRED:
			DBG_LOG_DEV("[sms_ble_power_down]\t\tDevice paired... disabling interrupts & switching down sensors");
			
			case BLE_STATE_INDICATING:
			DBG_LOG_DEV("[sms_ble_power_down]\t\tCurrently indicating");
			pressure_device.state = PRESSURE_STATE_OFF;
10008560:	2100      	movs	r1, #0
10008562:	232b      	movs	r3, #43	; 0x2b
10008564:	4a0f      	ldr	r2, [pc, #60]	; (100085a4 <sms_ble_power_down+0x88>)
10008566:	54d1      	strb	r1, [r2, r3]
			sms_sensors_interrupt_toggle(false, false);
10008568:	2000      	movs	r0, #0
1000856a:	4b0f      	ldr	r3, [pc, #60]	; (100085a8 <sms_ble_power_down+0x8c>)
1000856c:	4798      	blx	r3
			//#pragma TBD: switch-off sensors to save current
			//sms_sensors_switch(false);
			
			case BLE_STATE_CONNECTED:
			DBG_LOG_DEV("[sms_ble_power_down]\t\tDevice connected... disconnecting");
			at_ble_disconnect(sms_connection_handle, AT_BLE_TERMINATED_BY_USER);
1000856e:	4b0f      	ldr	r3, [pc, #60]	; (100085ac <sms_ble_power_down+0x90>)
10008570:	8818      	ldrh	r0, [r3, #0]
10008572:	2113      	movs	r1, #19
10008574:	4b0e      	ldr	r3, [pc, #56]	; (100085b0 <sms_ble_power_down+0x94>)
10008576:	4798      	blx	r3
			
			default:
			break;
		}
		
		ble_instance.current_state = BLE_STATE_DISCONNECTED;
10008578:	2211      	movs	r2, #17
1000857a:	4b06      	ldr	r3, [pc, #24]	; (10008594 <sms_ble_power_down+0x78>)
1000857c:	701a      	strb	r2, [r3, #0]
		timer2_current_mode = TIMER2_MODE_LED_SHUTDOWN;
1000857e:	3a0e      	subs	r2, #14
10008580:	4b0c      	ldr	r3, [pc, #48]	; (100085b4 <sms_ble_power_down+0x98>)
10008582:	701a      	strb	r2, [r3, #0]
		sms_led_blink_start(SMS_LED_0_PIN);
10008584:	2016      	movs	r0, #22
10008586:	4b0c      	ldr	r3, [pc, #48]	; (100085b8 <sms_ble_power_down+0x9c>)
10008588:	4798      	blx	r3
	}
}
1000858a:	bd10      	pop	{r4, pc}
1000858c:	10016df8 	.word	0x10016df8
10008590:	10008ae1 	.word	0x10008ae1
10008594:	10019ab8 	.word	0x10019ab8
10008598:	10019ab5 	.word	0x10019ab5
1000859c:	1000d2e9 	.word	0x1000d2e9
100085a0:	1000e3c9 	.word	0x1000e3c9
100085a4:	10019b5c 	.word	0x10019b5c
100085a8:	10009985 	.word	0x10009985
100085ac:	10019aba 	.word	0x10019aba
100085b0:	1000e3f5 	.word	0x1000e3f5
100085b4:	10019bf7 	.word	0x10019bf7
100085b8:	10009705 	.word	0x10009705

100085bc <sms_ble_adv_report_fn>:
//#include <stdio.h>
#include "sms_ble.h"

/* AT_BLE_ADV_REPORT (#3) */
at_ble_status_t sms_ble_adv_report_fn(void *params)
{
100085bc:	b510      	push	{r4, lr}
    at_ble_adv_report_t *adv_report = (at_ble_adv_report_t *)params;
    ble_instance.current_state = BLE_STATE_DISCONNECTED;
100085be:	2211      	movs	r2, #17
100085c0:	4b02      	ldr	r3, [pc, #8]	; (100085cc <sms_ble_adv_report_fn+0x10>)
100085c2:	701a      	strb	r2, [r3, #0]
    DBG_LOG_DEV("[sms_ble_adv_report_fn]\tAdvertisement timeout...");
    //DBG_LOG_DEV("- status: 0x%02x", adv_report->status);
    sms_ble_power_down();
100085c4:	4b02      	ldr	r3, [pc, #8]	; (100085d0 <sms_ble_adv_report_fn+0x14>)
100085c6:	4798      	blx	r3
    return AT_BLE_SUCCESS;
}
100085c8:	2000      	movs	r0, #0
100085ca:	bd10      	pop	{r4, pc}
100085cc:	10019ab8 	.word	0x10019ab8
100085d0:	1000851d 	.word	0x1000851d

100085d4 <sms_ble_connected_fn>:

/* AT_BLE_CONNECTED (#5) */
at_ble_status_t sms_ble_connected_fn(void *params)
{
100085d4:	b510      	push	{r4, lr}
    if(ble_instance.current_state == BLE_STATE_ADVERTISING) {
100085d6:	4b0c      	ldr	r3, [pc, #48]	; (10008608 <sms_ble_connected_fn+0x34>)
100085d8:	781b      	ldrb	r3, [r3, #0]
100085da:	2b20      	cmp	r3, #32
100085dc:	d110      	bne.n	10008600 <sms_ble_connected_fn+0x2c>
        at_ble_connected_t *connected = (at_ble_connected_t *)params;
        sms_ble_conn_handle = connected->handle;
100085de:	8902      	ldrh	r2, [r0, #8]
100085e0:	4b0a      	ldr	r3, [pc, #40]	; (1000860c <sms_ble_connected_fn+0x38>)
100085e2:	801a      	strh	r2, [r3, #0]
        ble_instance.current_state = BLE_STATE_CONNECTED;
100085e4:	2221      	movs	r2, #33	; 0x21
100085e6:	4b08      	ldr	r3, [pc, #32]	; (10008608 <sms_ble_connected_fn+0x34>)
100085e8:	701a      	strb	r2, [r3, #0]
        DBG_LOG_DEV("[sms_ble_connected_fn]\t\tDevices connected...");
        //DBG_LOG_DEV("- conn handle: 0x%04x\r\n- conn interval: %d\r\n- conn latency: %d\r\n- supervision timeout: %d\r\n- peer address: 0x", connected->handle, connected->conn_params.con_interval, connected->conn_params.con_latency, connected->conn_params.sup_to);
        //for(uint8_t i = 0; i < AT_BLE_ADDR_LEN; i++) {
            //DBG_LOG_CONT_DEV("%02x",connected->peer_addr.addr[AT_BLE_ADDR_LEN - (i+1)]);
        //}
		DBG_LOG("T/O: 5000 ms");
100085ea:	4809      	ldr	r0, [pc, #36]	; (10008610 <sms_ble_connected_fn+0x3c>)
100085ec:	4b09      	ldr	r3, [pc, #36]	; (10008614 <sms_ble_connected_fn+0x40>)
100085ee:	4798      	blx	r3
100085f0:	4809      	ldr	r0, [pc, #36]	; (10008618 <sms_ble_connected_fn+0x44>)
100085f2:	4b0a      	ldr	r3, [pc, #40]	; (1000861c <sms_ble_connected_fn+0x48>)
100085f4:	4798      	blx	r3
		sms_ble_timeout = BLE_TIMEOUT_PAIR;
100085f6:	22fa      	movs	r2, #250	; 0xfa
100085f8:	0052      	lsls	r2, r2, #1
100085fa:	4b09      	ldr	r3, [pc, #36]	; (10008620 <sms_ble_connected_fn+0x4c>)
100085fc:	601a      	str	r2, [r3, #0]
100085fe:	e001      	b.n	10008604 <sms_ble_connected_fn+0x30>
    }
    else {
        sms_ble_power_down();
10008600:	4b08      	ldr	r3, [pc, #32]	; (10008624 <sms_ble_connected_fn+0x50>)
10008602:	4798      	blx	r3
    }    
    return AT_BLE_SUCCESS;
}
10008604:	2000      	movs	r0, #0
10008606:	bd10      	pop	{r4, pc}
10008608:	10019ab8 	.word	0x10019ab8
1000860c:	10019bea 	.word	0x10019bea
10008610:	10016de8 	.word	0x10016de8
10008614:	100127bd 	.word	0x100127bd
10008618:	10016e10 	.word	0x10016e10
1000861c:	1001269d 	.word	0x1001269d
10008620:	10019ab0 	.word	0x10019ab0
10008624:	1000851d 	.word	0x1000851d

10008628 <sms_ble_paired_fn>:
    return AT_BLE_SUCCESS;
}

/* AT_BLE_PAIR_DONE (#9) */
at_ble_status_t sms_ble_paired_fn(void *params)
{
10008628:	b510      	push	{r4, lr}
    if(ble_instance.current_state == BLE_STATE_CONNECTED) {
1000862a:	4b0e      	ldr	r3, [pc, #56]	; (10008664 <sms_ble_paired_fn+0x3c>)
1000862c:	781b      	ldrb	r3, [r3, #0]
1000862e:	2b21      	cmp	r3, #33	; 0x21
10008630:	d114      	bne.n	1000865c <sms_ble_paired_fn+0x34>
        ble_instance.current_state = BLE_STATE_PAIRED;
10008632:	2222      	movs	r2, #34	; 0x22
10008634:	4b0b      	ldr	r3, [pc, #44]	; (10008664 <sms_ble_paired_fn+0x3c>)
10008636:	701a      	strb	r2, [r3, #0]
        at_ble_pair_done_t *pair_status = (at_ble_pair_done_t *)params;
        sms_monitor_get_states("[sms_ble_paired_fn]");
10008638:	480b      	ldr	r0, [pc, #44]	; (10008668 <sms_ble_paired_fn+0x40>)
1000863a:	4b0c      	ldr	r3, [pc, #48]	; (1000866c <sms_ble_paired_fn+0x44>)
1000863c:	4798      	blx	r3
        //DBG_LOG_DEV("- conn handle: 0x%04x\r\n- authorization: 0x%02x\r\n- status: 0x%02x", pair_status->handle, pair_status->auth, pair_status->status);
        sms_sensors_switch(true, true); // ! Release sleep lock & enable buttons interrupt after reset done!
1000863e:	2101      	movs	r1, #1
10008640:	2001      	movs	r0, #1
10008642:	4b0b      	ldr	r3, [pc, #44]	; (10008670 <sms_ble_paired_fn+0x48>)
10008644:	4798      	blx	r3
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
		DBG_LOG("T/O: OFF");
10008646:	480b      	ldr	r0, [pc, #44]	; (10008674 <sms_ble_paired_fn+0x4c>)
10008648:	4b0b      	ldr	r3, [pc, #44]	; (10008678 <sms_ble_paired_fn+0x50>)
1000864a:	4798      	blx	r3
1000864c:	480b      	ldr	r0, [pc, #44]	; (1000867c <sms_ble_paired_fn+0x54>)
1000864e:	4b0c      	ldr	r3, [pc, #48]	; (10008680 <sms_ble_paired_fn+0x58>)
10008650:	4798      	blx	r3
		sms_ble_timeout = BLE_TIMEOUT_OFF;
10008652:	2201      	movs	r2, #1
10008654:	4252      	negs	r2, r2
10008656:	4b0b      	ldr	r3, [pc, #44]	; (10008684 <sms_ble_paired_fn+0x5c>)
10008658:	601a      	str	r2, [r3, #0]
1000865a:	e001      	b.n	10008660 <sms_ble_paired_fn+0x38>
    }
    else {
        sms_ble_power_down();
1000865c:	4b0a      	ldr	r3, [pc, #40]	; (10008688 <sms_ble_paired_fn+0x60>)
1000865e:	4798      	blx	r3
    }        
    return AT_BLE_SUCCESS;
}
10008660:	2000      	movs	r0, #0
10008662:	bd10      	pop	{r4, pc}
10008664:	10019ab8 	.word	0x10019ab8
10008668:	10016e20 	.word	0x10016e20
1000866c:	10008ae1 	.word	0x10008ae1
10008670:	10009a11 	.word	0x10009a11
10008674:	10016de8 	.word	0x10016de8
10008678:	100127bd 	.word	0x100127bd
1000867c:	10016dec 	.word	0x10016dec
10008680:	1001269d 	.word	0x1001269d
10008684:	10019ab0 	.word	0x10019ab0
10008688:	1000851d 	.word	0x1000851d

1000868c <sms_ble_advertise>:
		sms_led_blink_start(SMS_LED_0_PIN);
	}
}

at_ble_status_t sms_ble_advertise(void)
{
1000868c:	b510      	push	{r4, lr}
1000868e:	b084      	sub	sp, #16
	at_ble_status_t status = AT_BLE_FAILURE;
	ble_instance.current_state = BLE_STATE_ADVERTISING;
10008690:	2220      	movs	r2, #32
10008692:	4b14      	ldr	r3, [pc, #80]	; (100086e4 <sms_ble_advertise+0x58>)
10008694:	701a      	strb	r2, [r3, #0]

	/* Set the advertisement data */
	if((status = ble_advertisement_data_set()) != AT_BLE_SUCCESS) {
10008696:	4b14      	ldr	r3, [pc, #80]	; (100086e8 <sms_ble_advertise+0x5c>)
10008698:	4798      	blx	r3
1000869a:	1e04      	subs	r4, r0, #0
1000869c:	d007      	beq.n	100086ae <sms_ble_advertise+0x22>
		DBG_LOG("[sms_ble_advertise]\tAdvertisement data set failed!");
1000869e:	4813      	ldr	r0, [pc, #76]	; (100086ec <sms_ble_advertise+0x60>)
100086a0:	4b13      	ldr	r3, [pc, #76]	; (100086f0 <sms_ble_advertise+0x64>)
100086a2:	4798      	blx	r3
100086a4:	4813      	ldr	r0, [pc, #76]	; (100086f4 <sms_ble_advertise+0x68>)
100086a6:	4b14      	ldr	r3, [pc, #80]	; (100086f8 <sms_ble_advertise+0x6c>)
100086a8:	4798      	blx	r3
		return status;
100086aa:	0020      	movs	r0, r4
100086ac:	e018      	b.n	100086e0 <sms_ble_advertise+0x54>
	}

	/* Start of advertisement */
	if((status = at_ble_adv_start(AT_BLE_ADV_TYPE_UNDIRECTED, AT_BLE_ADV_GEN_DISCOVERABLE, NULL, AT_BLE_ADV_FP_ANY, APP_FAST_ADV, APP_ADV_TIMEOUT, 0)) == AT_BLE_SUCCESS)
100086ae:	2300      	movs	r3, #0
100086b0:	9302      	str	r3, [sp, #8]
100086b2:	4b12      	ldr	r3, [pc, #72]	; (100086fc <sms_ble_advertise+0x70>)
100086b4:	9301      	str	r3, [sp, #4]
100086b6:	23c8      	movs	r3, #200	; 0xc8
100086b8:	00db      	lsls	r3, r3, #3
100086ba:	9300      	str	r3, [sp, #0]
100086bc:	2300      	movs	r3, #0
100086be:	2200      	movs	r2, #0
100086c0:	2101      	movs	r1, #1
100086c2:	2000      	movs	r0, #0
100086c4:	4c0e      	ldr	r4, [pc, #56]	; (10008700 <sms_ble_advertise+0x74>)
100086c6:	47a0      	blx	r4
100086c8:	0004      	movs	r4, r0
	{
		DBG_LOG_DEV("[sms_ble_advertise]\t\tBLE Started Advertisement");
		return AT_BLE_SUCCESS;
100086ca:	2000      	movs	r0, #0
		DBG_LOG("[sms_ble_advertise]\tAdvertisement data set failed!");
		return status;
	}

	/* Start of advertisement */
	if((status = at_ble_adv_start(AT_BLE_ADV_TYPE_UNDIRECTED, AT_BLE_ADV_GEN_DISCOVERABLE, NULL, AT_BLE_ADV_FP_ANY, APP_FAST_ADV, APP_ADV_TIMEOUT, 0)) == AT_BLE_SUCCESS)
100086cc:	2c00      	cmp	r4, #0
100086ce:	d007      	beq.n	100086e0 <sms_ble_advertise+0x54>
	{
		DBG_LOG_DEV("[sms_ble_advertise]\t\tBLE Started Advertisement");
		return AT_BLE_SUCCESS;
	}
	else {
		DBG_LOG("[sms_service_advertise]\tBLE Advertisement start failed: reason 0x%x", status);
100086d0:	4806      	ldr	r0, [pc, #24]	; (100086ec <sms_ble_advertise+0x60>)
100086d2:	4b07      	ldr	r3, [pc, #28]	; (100086f0 <sms_ble_advertise+0x64>)
100086d4:	4798      	blx	r3
100086d6:	0021      	movs	r1, r4
100086d8:	480a      	ldr	r0, [pc, #40]	; (10008704 <sms_ble_advertise+0x78>)
100086da:	4b07      	ldr	r3, [pc, #28]	; (100086f8 <sms_ble_advertise+0x6c>)
100086dc:	4798      	blx	r3
	}
	return AT_BLE_FAILURE;
100086de:	20e2      	movs	r0, #226	; 0xe2
}
100086e0:	b004      	add	sp, #16
100086e2:	bd10      	pop	{r4, pc}
100086e4:	10019ab8 	.word	0x10019ab8
100086e8:	1000c94d 	.word	0x1000c94d
100086ec:	10016de8 	.word	0x10016de8
100086f0:	100127bd 	.word	0x100127bd
100086f4:	10016e34 	.word	0x10016e34
100086f8:	1001269d 	.word	0x1001269d
100086fc:	0000028f 	.word	0x0000028f
10008700:	1000e28d 	.word	0x1000e28d
10008704:	10016e68 	.word	0x10016e68

10008708 <sms_ble_disconnected_fn>:
    return AT_BLE_SUCCESS;
}

/* AT_BLE_DISCONNECTED (#6) */
at_ble_status_t sms_ble_disconnected_fn(void *params)
{
10008708:	b510      	push	{r4, lr}
1000870a:	0004      	movs	r4, r0
    at_ble_disconnected_t *disconnect = (at_ble_disconnected_t *)params;
    if(ble_instance.current_state == BLE_STATE_PAIRED) {
1000870c:	4b16      	ldr	r3, [pc, #88]	; (10008768 <sms_ble_disconnected_fn+0x60>)
1000870e:	781b      	ldrb	r3, [r3, #0]
10008710:	2b22      	cmp	r3, #34	; 0x22
10008712:	d10a      	bne.n	1000872a <sms_ble_disconnected_fn+0x22>
        pressure_device.state = PRESSURE_STATE_OFF;
10008714:	2100      	movs	r1, #0
10008716:	3309      	adds	r3, #9
10008718:	4a14      	ldr	r2, [pc, #80]	; (1000876c <sms_ble_disconnected_fn+0x64>)
1000871a:	54d1      	strb	r1, [r2, r3]
        sms_sensors_interrupt_toggle(false, false);
1000871c:	2000      	movs	r0, #0
1000871e:	4b14      	ldr	r3, [pc, #80]	; (10008770 <sms_ble_disconnected_fn+0x68>)
10008720:	4798      	blx	r3
        sms_sensors_switch(false, false);
10008722:	2100      	movs	r1, #0
10008724:	2000      	movs	r0, #0
10008726:	4b13      	ldr	r3, [pc, #76]	; (10008774 <sms_ble_disconnected_fn+0x6c>)
10008728:	4798      	blx	r3
    }
    ble_instance.current_state = BLE_STATE_DISCONNECTED;
1000872a:	4b0f      	ldr	r3, [pc, #60]	; (10008768 <sms_ble_disconnected_fn+0x60>)
1000872c:	2211      	movs	r2, #17
1000872e:	701a      	strb	r2, [r3, #0]
    DBG_LOG_DEV("[sms_ble_disconnected_fn]\tPeer disconnected... Bnew %d, BLE 0x%02x, T1 %d, T2 %d", button_instance.current_state, ble_instance.current_state, timer1_current_mode, timer2_current_mode);
10008730:	781b      	ldrb	r3, [r3, #0]
10008732:	4b11      	ldr	r3, [pc, #68]	; (10008778 <sms_ble_disconnected_fn+0x70>)
10008734:	781b      	ldrb	r3, [r3, #0]
10008736:	4b11      	ldr	r3, [pc, #68]	; (1000877c <sms_ble_disconnected_fn+0x74>)
10008738:	781b      	ldrb	r3, [r3, #0]
    //DBG_LOG_DEV("- conn handle: 0x%04x\r\n- reason: 0x%02x", disconnect->handle, disconnect->reason);
    switch(disconnect->reason) {
1000873a:	78a3      	ldrb	r3, [r4, #2]
1000873c:	2b1a      	cmp	r3, #26
1000873e:	d00b      	beq.n	10008758 <sms_ble_disconnected_fn+0x50>
10008740:	b2da      	uxtb	r2, r3
10008742:	2a1a      	cmp	r2, #26
10008744:	d804      	bhi.n	10008750 <sms_ble_disconnected_fn+0x48>
10008746:	2b05      	cmp	r3, #5
10008748:	d006      	beq.n	10008758 <sms_ble_disconnected_fn+0x50>
1000874a:	2b08      	cmp	r3, #8
1000874c:	d107      	bne.n	1000875e <sms_ble_disconnected_fn+0x56>
1000874e:	e003      	b.n	10008758 <sms_ble_disconnected_fn+0x50>
10008750:	2b29      	cmp	r3, #41	; 0x29
10008752:	d001      	beq.n	10008758 <sms_ble_disconnected_fn+0x50>
10008754:	2b3b      	cmp	r3, #59	; 0x3b
10008756:	d102      	bne.n	1000875e <sms_ble_disconnected_fn+0x56>
        case AT_BLE_AUTH_FAILURE: //0x05
        case AT_BLE_SUPERVISION_TIMEOUT: //0x08
        case AT_BLE_UNSUPPORTED_REMOTE_FEATURE: // 0x1A
        case AT_BLE_PAIRING_WITH_UNIT_KEY_NOT_SUP: // 0x29
        case AT_BLE_UNACCEPTABLE_INTERVAL: // 0x3B
        sms_ble_advertise();
10008758:	4b09      	ldr	r3, [pc, #36]	; (10008780 <sms_ble_disconnected_fn+0x78>)
1000875a:	4798      	blx	r3
        break;
1000875c:	e001      	b.n	10008762 <sms_ble_disconnected_fn+0x5a>
        case AT_BLE_TERMINATED_BY_USER: // 0x13
        case AT_BLE_REMOTE_DEV_TERM_LOW_RESOURCES: //0x14
        case AT_BLE_REMOTE_DEV_POWER_OFF: //0x15
        case AT_BLE_CON_TERM_BY_LOCAL_HOST: //0x16
        default:
        sms_ble_power_down();
1000875e:	4b09      	ldr	r3, [pc, #36]	; (10008784 <sms_ble_disconnected_fn+0x7c>)
10008760:	4798      	blx	r3
        break;
    }
    
    return AT_BLE_SUCCESS;
}
10008762:	2000      	movs	r0, #0
10008764:	bd10      	pop	{r4, pc}
10008766:	46c0      	nop			; (mov r8, r8)
10008768:	10019ab8 	.word	0x10019ab8
1000876c:	10019b5c 	.word	0x10019b5c
10008770:	10009985 	.word	0x10009985
10008774:	10009a11 	.word	0x10009a11
10008778:	100199dc 	.word	0x100199dc
1000877c:	10019bf7 	.word	0x10019bf7
10008780:	1000868d 	.word	0x1000868d
10008784:	1000851d 	.word	0x1000851d

10008788 <sms_ble_primary_service_define>:
	}
    return status;
}

at_ble_status_t sms_ble_primary_service_define(gatt_service_handler_t *service)
{
10008788:	b510      	push	{r4, lr}
1000878a:	b082      	sub	sp, #8
    //DBG_LOG_DEV("[sms_ble_primary_service_define]\n\r  defining primary service\r\n- uuid: 0x%02x\r\n- handle: 0x%02x\r\n- char uuid: 0x%02x%02x\r\n- char init value: %d", (unsigned int)service->serv_uuid.uuid, service->serv_handle, service->serv_chars.uuid.uuid[1], service->serv_chars.uuid.uuid[0], service->serv_chars.value_init_len);
    return(at_ble_primary_service_define(&service->serv_uuid, &service->serv_handle, NULL, 0, &service->serv_chars, 1));
1000878c:	0001      	movs	r1, r0
1000878e:	3112      	adds	r1, #18
10008790:	2301      	movs	r3, #1
10008792:	9301      	str	r3, [sp, #4]
10008794:	0003      	movs	r3, r0
10008796:	3314      	adds	r3, #20
10008798:	9300      	str	r3, [sp, #0]
1000879a:	2300      	movs	r3, #0
1000879c:	2200      	movs	r2, #0
1000879e:	4c02      	ldr	r4, [pc, #8]	; (100087a8 <sms_ble_primary_service_define+0x20>)
100087a0:	47a0      	blx	r4
}
100087a2:	b002      	add	sp, #8
100087a4:	bd10      	pop	{r4, pc}
100087a6:	46c0      	nop			; (mov r8, r8)
100087a8:	1000eb51 	.word	0x1000eb51

100087ac <sms_ble_service_init>:

void sms_ble_service_init(enum sms_ble_serv_type type, gatt_service_handler_t *service, uint8_t *value)
{
100087ac:	b5f0      	push	{r4, r5, r6, r7, lr}
100087ae:	464f      	mov	r7, r9
100087b0:	4646      	mov	r6, r8
100087b2:	b4c0      	push	{r6, r7}
100087b4:	b083      	sub	sp, #12
100087b6:	4694      	mov	ip, r2
    at_ble_handle_t handle = 0;
    uint8_t uuid[16] = {0};
    uint8_t char_size = 0;
    switch(type) {
100087b8:	2801      	cmp	r0, #1
100087ba:	d010      	beq.n	100087de <sms_ble_service_init+0x32>
100087bc:	2800      	cmp	r0, #0
100087be:	d002      	beq.n	100087c6 <sms_ble_service_init+0x1a>
100087c0:	2802      	cmp	r0, #2
100087c2:	d019      	beq.n	100087f8 <sms_ble_service_init+0x4c>
100087c4:	e025      	b.n	10008812 <sms_ble_service_init+0x66>
        uuid[1] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1) & 0xFF);
        uuid[4] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 24) & 0xFF);
        uuid[5] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 16) & 0xFF);
        uuid[6] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 8) & 0xFF);
100087c6:	23bb      	movs	r3, #187	; 0xbb
        uuid[0] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1) & 0xFF);
        uuid[4] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 24) & 0xFF);
        uuid[5] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 16) & 0xFF);
100087c8:	2450      	movs	r4, #80	; 0x50
        handle = 1;
        uuid[0] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1) & 0xFF);
        uuid[4] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 24) & 0xFF);
100087ca:	2553      	movs	r5, #83	; 0x53
        case BLE_SERV_BUTTON:
        handle = 1;
        uuid[0] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1) & 0xFF);
100087cc:	26be      	movs	r6, #190	; 0xbe
    switch(type) {
        case BLE_SERV_BUTTON:
        handle = 1;
        uuid[0] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 8) & 0xFF);
100087ce:	275a      	movs	r7, #90	; 0x5a
    uint8_t char_size = 0;
    switch(type) {
        case BLE_SERV_BUTTON:
        handle = 1;
        uuid[0] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 16) & 0xFF);
100087d0:	2057      	movs	r0, #87	; 0x57
    uint8_t uuid[16] = {0};
    uint8_t char_size = 0;
    switch(type) {
        case BLE_SERV_BUTTON:
        handle = 1;
        uuid[0] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 24) & 0xFF);
100087d2:	221c      	movs	r2, #28
100087d4:	4690      	mov	r8, r2
        uuid[11] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_3) & 0xFF);
        uuid[12] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_4 >> 24) & 0xFF);
        uuid[13] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_4 >> 16) & 0xFF);
        uuid[14] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_4 >> 8) & 0xFF);
        uuid[15] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_4) & 0xFF);
        char_size = 1;
100087d6:	3a1b      	subs	r2, #27
100087d8:	9201      	str	r2, [sp, #4]
    at_ble_handle_t handle = 0;
    uint8_t uuid[16] = {0};
    uint8_t char_size = 0;
    switch(type) {
        case BLE_SERV_BUTTON:
        handle = 1;
100087da:	4691      	mov	r9, r2
100087dc:	e023      	b.n	10008826 <sms_ble_service_init+0x7a>
        uuid[1] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1) & 0xFF);
        uuid[4] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 24) & 0xFF);
        uuid[5] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 16) & 0xFF);
        uuid[6] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 8) & 0xFF);
100087de:	23ee      	movs	r3, #238	; 0xee
        uuid[0] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1) & 0xFF);
        uuid[4] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 24) & 0xFF);
        uuid[5] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 16) & 0xFF);
100087e0:	2450      	movs	r4, #80	; 0x50
        handle = 2;
        uuid[0] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1) & 0xFF);
        uuid[4] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 24) & 0xFF);
100087e2:	2553      	movs	r5, #83	; 0x53
        case BLE_SERV_PRESSURE:
        handle = 2;
        uuid[0] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1) & 0xFF);
100087e4:	26be      	movs	r6, #190	; 0xbe
        
        case BLE_SERV_PRESSURE:
        handle = 2;
        uuid[0] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 8) & 0xFF);
100087e6:	275a      	movs	r7, #90	; 0x5a
        break;
        
        case BLE_SERV_PRESSURE:
        handle = 2;
        uuid[0] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 16) & 0xFF);
100087e8:	2057      	movs	r0, #87	; 0x57
        char_size = 1;
        break;
        
        case BLE_SERV_PRESSURE:
        handle = 2;
        uuid[0] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 24) & 0xFF);
100087ea:	221c      	movs	r2, #28
100087ec:	4690      	mov	r8, r2
        uuid[11] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_3) & 0xFF);
        uuid[12] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 24) & 0xFF);
        uuid[13] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 16) & 0xFF);
        uuid[14] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 8) & 0xFF);
        uuid[15] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4) & 0xFF);
        char_size = 8;
100087ee:	3a14      	subs	r2, #20
100087f0:	9201      	str	r2, [sp, #4]
        uuid[15] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_4) & 0xFF);
        char_size = 1;
        break;
        
        case BLE_SERV_PRESSURE:
        handle = 2;
100087f2:	3a06      	subs	r2, #6
100087f4:	4691      	mov	r9, r2
        uuid[12] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 24) & 0xFF);
        uuid[13] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 16) & 0xFF);
        uuid[14] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 8) & 0xFF);
        uuid[15] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4) & 0xFF);
        char_size = 8;
        break;
100087f6:	e016      	b.n	10008826 <sms_ble_service_init+0x7a>
        uuid[1] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1) & 0xFF);
        uuid[4] = (uint8_t) ((SMS_MPU_SERVICE_UUID_2 >> 24) & 0xFF);
        uuid[5] = (uint8_t) ((SMS_MPU_SERVICE_UUID_2 >> 16) & 0xFF);
        uuid[6] = (uint8_t) ((SMS_MPU_SERVICE_UUID_2 >> 8) & 0xFF);
100087f8:	2311      	movs	r3, #17
        uuid[0] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1) & 0xFF);
        uuid[4] = (uint8_t) ((SMS_MPU_SERVICE_UUID_2 >> 24) & 0xFF);
        uuid[5] = (uint8_t) ((SMS_MPU_SERVICE_UUID_2 >> 16) & 0xFF);
100087fa:	2450      	movs	r4, #80	; 0x50
        handle = 3;
        uuid[0] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1) & 0xFF);
        uuid[4] = (uint8_t) ((SMS_MPU_SERVICE_UUID_2 >> 24) & 0xFF);
100087fc:	2553      	movs	r5, #83	; 0x53
        case BLE_SERV_MPU:
        handle = 3;
        uuid[0] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1) & 0xFF);
100087fe:	26be      	movs	r6, #190	; 0xbe
        
        case BLE_SERV_MPU:
        handle = 3;
        uuid[0] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 8) & 0xFF);
10008800:	275a      	movs	r7, #90	; 0x5a
        break;
        
        case BLE_SERV_MPU:
        handle = 3;
        uuid[0] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 16) & 0xFF);
10008802:	2057      	movs	r0, #87	; 0x57
        char_size = 8;
        break;
        
        case BLE_SERV_MPU:
        handle = 3;
        uuid[0] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 24) & 0xFF);
10008804:	221c      	movs	r2, #28
10008806:	4690      	mov	r8, r2
        uuid[11] = (uint8_t) ((SMS_MPU_SERVICE_UUID_3) & 0xFF);
        uuid[12] = (uint8_t) ((SMS_MPU_SERVICE_UUID_4 >> 24) & 0xFF);
        uuid[13] = (uint8_t) ((SMS_MPU_SERVICE_UUID_4 >> 16) & 0xFF);
        uuid[14] = (uint8_t) ((SMS_MPU_SERVICE_UUID_4 >> 8) & 0xFF);
        uuid[15] = (uint8_t) ((SMS_MPU_SERVICE_UUID_4) & 0xFF);
        char_size = 20;
10008808:	3a08      	subs	r2, #8
1000880a:	9201      	str	r2, [sp, #4]
        uuid[15] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4) & 0xFF);
        char_size = 8;
        break;
        
        case BLE_SERV_MPU:
        handle = 3;
1000880c:	3a11      	subs	r2, #17
1000880e:	4691      	mov	r9, r2
        uuid[12] = (uint8_t) ((SMS_MPU_SERVICE_UUID_4 >> 24) & 0xFF);
        uuid[13] = (uint8_t) ((SMS_MPU_SERVICE_UUID_4 >> 16) & 0xFF);
        uuid[14] = (uint8_t) ((SMS_MPU_SERVICE_UUID_4 >> 8) & 0xFF);
        uuid[15] = (uint8_t) ((SMS_MPU_SERVICE_UUID_4) & 0xFF);
        char_size = 20;
        break;
10008810:	e009      	b.n	10008826 <sms_ble_service_init+0x7a>
}

void sms_ble_service_init(enum sms_ble_serv_type type, gatt_service_handler_t *service, uint8_t *value)
{
    at_ble_handle_t handle = 0;
    uint8_t uuid[16] = {0};
10008812:	2300      	movs	r3, #0
10008814:	2400      	movs	r4, #0
10008816:	2500      	movs	r5, #0
10008818:	2600      	movs	r6, #0
1000881a:	2700      	movs	r7, #0
1000881c:	2000      	movs	r0, #0
1000881e:	2200      	movs	r2, #0
10008820:	4690      	mov	r8, r2
    uint8_t char_size = 0;
10008822:	9201      	str	r2, [sp, #4]
    return(at_ble_primary_service_define(&service->serv_uuid, &service->serv_handle, NULL, 0, &service->serv_chars, 1));
}

void sms_ble_service_init(enum sms_ble_serv_type type, gatt_service_handler_t *service, uint8_t *value)
{
    at_ble_handle_t handle = 0;
10008824:	4691      	mov	r9, r2
        
        default:
        break;
    }
    //SMS button service characteristic
    service->serv_handle = handle;
10008826:	464a      	mov	r2, r9
10008828:	824a      	strh	r2, [r1, #18]
    service->serv_uuid.type = AT_BLE_UUID_128;
1000882a:	2202      	movs	r2, #2
1000882c:	700a      	strb	r2, [r1, #0]
    service->serv_uuid.uuid[0] = uuid[0];
1000882e:	4642      	mov	r2, r8
10008830:	704a      	strb	r2, [r1, #1]
    service->serv_uuid.uuid[1] = uuid[1];
10008832:	7088      	strb	r0, [r1, #2]
    service->serv_uuid.uuid[2] = uuid[2];
10008834:	70cf      	strb	r7, [r1, #3]
    service->serv_uuid.uuid[3] = uuid[3];
10008836:	710e      	strb	r6, [r1, #4]
    service->serv_uuid.uuid[4] = uuid[4];
10008838:	714d      	strb	r5, [r1, #5]
    service->serv_uuid.uuid[5] = uuid[5];
1000883a:	718c      	strb	r4, [r1, #6]
    service->serv_uuid.uuid[6] = uuid[6];
1000883c:	71cb      	strb	r3, [r1, #7]
    service->serv_uuid.uuid[7] = uuid[7];
1000883e:	720b      	strb	r3, [r1, #8]
    service->serv_uuid.uuid[8] = uuid[8];
10008840:	2300      	movs	r3, #0
10008842:	724b      	strb	r3, [r1, #9]
    service->serv_uuid.uuid[9] = uuid[9];
10008844:	728b      	strb	r3, [r1, #10]
    service->serv_uuid.uuid[10] = uuid[10];
10008846:	72cb      	strb	r3, [r1, #11]
    service->serv_uuid.uuid[11] = uuid[11];
10008848:	730b      	strb	r3, [r1, #12]
    service->serv_uuid.uuid[12] = uuid[12];
1000884a:	734b      	strb	r3, [r1, #13]
    service->serv_uuid.uuid[13] = uuid[13];
1000884c:	738b      	strb	r3, [r1, #14]
    service->serv_uuid.uuid[14] = uuid[14];
1000884e:	73cb      	strb	r3, [r1, #15]
    service->serv_uuid.uuid[15] = uuid[15];
10008850:	740b      	strb	r3, [r1, #16]
    
    #   if SMS_SENDING_WITH_ACK == true
    service->serv_chars.properties = (AT_BLE_CHAR_READ | AT_BLE_CHAR_INDICATE); // properties
    #   else
    service->serv_chars.properties = (AT_BLE_CHAR_READ | AT_BLE_CHAR_NOTIFY); // properties
10008852:	2412      	movs	r4, #18
10008854:	850c      	strh	r4, [r1, #40]	; 0x28
    #   endif
    service->serv_chars.init_value = value; // value
10008856:	4662      	mov	r2, ip
10008858:	62ca      	str	r2, [r1, #44]	; 0x2c
    service->serv_chars.value_init_len = char_size * sizeof(uint8_t);
1000885a:	466a      	mov	r2, sp
1000885c:	8892      	ldrh	r2, [r2, #4]
1000885e:	860a      	strh	r2, [r1, #48]	; 0x30
    service->serv_chars.value_max_len = char_size * sizeof(uint8_t);
10008860:	864a      	strh	r2, [r1, #50]	; 0x32
    service->serv_chars.value_permissions = (AT_BLE_ATTR_READABLE_NO_AUTHN_NO_AUTHR | AT_BLE_ATTR_WRITABLE_NO_AUTHN_NO_AUTHR); // permissions
10008862:	2011      	movs	r0, #17
10008864:	2234      	movs	r2, #52	; 0x34
10008866:	5488      	strb	r0, [r1, r2]
    service->serv_chars.user_desc = NULL; //user defined name
10008868:	638b      	str	r3, [r1, #56]	; 0x38
    service->serv_chars.user_desc_len = 0;
1000886a:	2200      	movs	r2, #0
1000886c:	878b      	strh	r3, [r1, #60]	; 0x3c
    service->serv_chars.user_desc_max_len = 0;
1000886e:	87cb      	strh	r3, [r1, #62]	; 0x3e
    service->serv_chars.user_desc_permissions = AT_BLE_ATTR_NO_PERMISSIONS; // user description permissions
10008870:	3033      	adds	r0, #51	; 0x33
10008872:	540a      	strb	r2, [r1, r0]
    service->serv_chars.client_config_permissions = AT_BLE_ATTR_NO_PERMISSIONS; // client config permissions
10008874:	3001      	adds	r0, #1
10008876:	540a      	strb	r2, [r1, r0]
    service->serv_chars.server_config_permissions = AT_BLE_ATTR_NO_PERMISSIONS; // server config permissions
10008878:	3001      	adds	r0, #1
1000887a:	540a      	strb	r2, [r1, r0]
    service->serv_chars.user_desc_handle = 0; // user description handles
1000887c:	2248      	movs	r2, #72	; 0x48
1000887e:	528b      	strh	r3, [r1, r2]
    service->serv_chars.client_config_handle = 0; // client config handles
10008880:	3202      	adds	r2, #2
10008882:	528b      	strh	r3, [r1, r2]
    service->serv_chars.server_config_handle = 0; // server config handles
10008884:	3202      	adds	r2, #2
10008886:	528b      	strh	r3, [r1, r2]
    
    service->serv_chars.presentation_format = NULL; //presentation format
10008888:	640b      	str	r3, [r1, #64]	; 0x40
1000888a:	b003      	add	sp, #12
1000888c:	bc0c      	pop	{r2, r3}
1000888e:	4690      	mov	r8, r2
10008890:	4699      	mov	r9, r3
10008892:	bdf0      	pop	{r4, r5, r6, r7, pc}

10008894 <sms_button_bt0_callback>:
        gpio_disable_callback(button_instance.btn1.gpio_pin);
    }
}
/* Callbacks --> sending interrupt message to platform */
void sms_button_bt0_callback(void)
{
10008894:	b510      	push	{r4, lr}
    button_instance.btn0.new_int = true;
10008896:	4b05      	ldr	r3, [pc, #20]	; (100088ac <sms_button_bt0_callback+0x18>)
10008898:	2201      	movs	r2, #1
1000889a:	70da      	strb	r2, [r3, #3]
    send_plf_int_msg_ind(button_instance.btn0.gpio_pin, GPIO_CALLBACK_RISING, NULL, 0);
1000889c:	7858      	ldrb	r0, [r3, #1]
1000889e:	2300      	movs	r3, #0
100088a0:	2200      	movs	r2, #0
100088a2:	2102      	movs	r1, #2
100088a4:	4c02      	ldr	r4, [pc, #8]	; (100088b0 <sms_button_bt0_callback+0x1c>)
100088a6:	47a0      	blx	r4
}
100088a8:	bd10      	pop	{r4, pc}
100088aa:	46c0      	nop			; (mov r8, r8)
100088ac:	10019ad4 	.word	0x10019ad4
100088b0:	1000d01d 	.word	0x1000d01d

100088b4 <sms_button_bt1_callback>:
void sms_button_bt1_callback(void)
{
100088b4:	b510      	push	{r4, lr}
	button_instance.btn1.new_int = true;
100088b6:	4b05      	ldr	r3, [pc, #20]	; (100088cc <sms_button_bt1_callback+0x18>)
100088b8:	2201      	movs	r2, #1
100088ba:	725a      	strb	r2, [r3, #9]
    send_plf_int_msg_ind(button_instance.btn1.gpio_pin, GPIO_CALLBACK_RISING, NULL, 0);
100088bc:	79d8      	ldrb	r0, [r3, #7]
100088be:	2300      	movs	r3, #0
100088c0:	2200      	movs	r2, #0
100088c2:	2102      	movs	r1, #2
100088c4:	4c02      	ldr	r4, [pc, #8]	; (100088d0 <sms_button_bt1_callback+0x1c>)
100088c6:	47a0      	blx	r4
}
100088c8:	bd10      	pop	{r4, pc}
100088ca:	46c0      	nop			; (mov r8, r8)
100088cc:	10019ad4 	.word	0x10019ad4
100088d0:	1000d01d 	.word	0x1000d01d

100088d4 <sms_button_init_variables>:
}

/* Initialize all button-related variables */
void sms_button_init_variables(void)
{
	button_instance.current_state = BUTTON_STATE_NONE;
100088d4:	4b08      	ldr	r3, [pc, #32]	; (100088f8 <sms_button_init_variables+0x24>)
100088d6:	2200      	movs	r2, #0
100088d8:	735a      	strb	r2, [r3, #13]
	button_instance.btn0.id = SMS_BTN_0;
100088da:	701a      	strb	r2, [r3, #0]
	button_instance.btn0.gpio_pin = SMS_BTN_0_PIN;
100088dc:	211f      	movs	r1, #31
100088de:	7059      	strb	r1, [r3, #1]
	button_instance.btn0.int_enabled = true;
100088e0:	391e      	subs	r1, #30
100088e2:	7099      	strb	r1, [r3, #2]
	button_instance.btn0.new_int = false;
100088e4:	70da      	strb	r2, [r3, #3]
	button_instance.btn0.char_value = 0;
100088e6:	715a      	strb	r2, [r3, #5]
	button_instance.btn1.id = SMS_BTN_1;
100088e8:	7199      	strb	r1, [r3, #6]
	button_instance.btn1.gpio_pin = SMS_BTN_1_PIN;
100088ea:	201d      	movs	r0, #29
100088ec:	71d8      	strb	r0, [r3, #7]
	button_instance.btn1.int_enabled = true;
100088ee:	7219      	strb	r1, [r3, #8]
	button_instance.btn1.new_int = false;
100088f0:	725a      	strb	r2, [r3, #9]
	button_instance.btn1.char_value = 0;
100088f2:	72da      	strb	r2, [r3, #11]
}
100088f4:	4770      	bx	lr
100088f6:	46c0      	nop			; (mov r8, r8)
100088f8:	10019ad4 	.word	0x10019ad4

100088fc <sms_button_gpio_init>:

/* Initialize gpio for button inputs */
void sms_button_gpio_init(void)
{
100088fc:	b5f0      	push	{r4, r5, r6, r7, lr}
100088fe:	4657      	mov	r7, sl
10008900:	464e      	mov	r6, r9
10008902:	4645      	mov	r5, r8
10008904:	b4e0      	push	{r5, r6, r7}
10008906:	b082      	sub	sp, #8
    struct gpio_config config_gpio_pin;

    /* Button0 @ PIN_AO_GPIO_0 */
    gpio_get_config_defaults(&config_gpio_pin);
10008908:	ac01      	add	r4, sp, #4
1000890a:	0020      	movs	r0, r4
1000890c:	4b1d      	ldr	r3, [pc, #116]	; (10008984 <sms_button_gpio_init+0x88>)
1000890e:	469a      	mov	sl, r3
10008910:	4798      	blx	r3
    config_gpio_pin.direction = GPIO_PIN_DIR_INPUT;
10008912:	2300      	movs	r3, #0
10008914:	4699      	mov	r9, r3
10008916:	7023      	strb	r3, [r4, #0]
    config_gpio_pin.input_pull = GPIO_PIN_PULL_DOWN;
10008918:	2302      	movs	r3, #2
1000891a:	4698      	mov	r8, r3
1000891c:	7063      	strb	r3, [r4, #1]
    config_gpio_pin.aon_wakeup = true;
1000891e:	2701      	movs	r7, #1
10008920:	70e7      	strb	r7, [r4, #3]
    if(gpio_pin_set_config(button_instance.btn0.gpio_pin, &config_gpio_pin) != STATUS_OK) {
10008922:	4e19      	ldr	r6, [pc, #100]	; (10008988 <sms_button_gpio_init+0x8c>)
10008924:	7870      	ldrb	r0, [r6, #1]
10008926:	0021      	movs	r1, r4
10008928:	4d18      	ldr	r5, [pc, #96]	; (1000898c <sms_button_gpio_init+0x90>)
1000892a:	47a8      	blx	r5
        DBG_LOG_DEV("[sms_button_configure]\tproblem while setting up button0");
    }
    
    /* Button1 @ PIN_AO_GPIO_2 */
    gpio_get_config_defaults(&config_gpio_pin);
1000892c:	0020      	movs	r0, r4
1000892e:	47d0      	blx	sl
    config_gpio_pin.direction = GPIO_PIN_DIR_INPUT;
10008930:	464b      	mov	r3, r9
10008932:	7023      	strb	r3, [r4, #0]
    config_gpio_pin.input_pull = GPIO_PIN_PULL_DOWN;
10008934:	4643      	mov	r3, r8
10008936:	7063      	strb	r3, [r4, #1]
    config_gpio_pin.aon_wakeup = true;
10008938:	70e7      	strb	r7, [r4, #3]
    if(gpio_pin_set_config(button_instance.btn1.gpio_pin, &config_gpio_pin) != STATUS_OK) {
1000893a:	79f0      	ldrb	r0, [r6, #7]
1000893c:	0021      	movs	r1, r4
1000893e:	47a8      	blx	r5
10008940:	2800      	cmp	r0, #0
10008942:	d005      	beq.n	10008950 <sms_button_gpio_init+0x54>
        DBG_LOG("[sms_button_configure]\tProblem while setting up button1");
10008944:	4812      	ldr	r0, [pc, #72]	; (10008990 <sms_button_gpio_init+0x94>)
10008946:	4b13      	ldr	r3, [pc, #76]	; (10008994 <sms_button_gpio_init+0x98>)
10008948:	4798      	blx	r3
1000894a:	4813      	ldr	r0, [pc, #76]	; (10008998 <sms_button_gpio_init+0x9c>)
1000894c:	4b13      	ldr	r3, [pc, #76]	; (1000899c <sms_button_gpio_init+0xa0>)
1000894e:	4798      	blx	r3
    }

    /* Button 0 on SAMB11 XPLAINED */
    gpio_get_config_defaults(&config_gpio_pin);
10008950:	ac01      	add	r4, sp, #4
10008952:	0020      	movs	r0, r4
10008954:	4b0b      	ldr	r3, [pc, #44]	; (10008984 <sms_button_gpio_init+0x88>)
10008956:	4798      	blx	r3
    config_gpio_pin.direction = GPIO_PIN_DIR_INPUT;
10008958:	2300      	movs	r3, #0
1000895a:	7023      	strb	r3, [r4, #0]
    config_gpio_pin.input_pull = GPIO_PIN_PULL_NONE;
1000895c:	7063      	strb	r3, [r4, #1]
    if(gpio_pin_set_config(BUTTON_0_PIN, &config_gpio_pin) != STATUS_OK) {
1000895e:	0021      	movs	r1, r4
10008960:	2017      	movs	r0, #23
10008962:	4b0a      	ldr	r3, [pc, #40]	; (1000898c <sms_button_gpio_init+0x90>)
10008964:	4798      	blx	r3
10008966:	2800      	cmp	r0, #0
10008968:	d005      	beq.n	10008976 <sms_button_gpio_init+0x7a>
        DBG_LOG("[sms_button_configure]\tProblem while setting up XPLAINED user button");
1000896a:	4809      	ldr	r0, [pc, #36]	; (10008990 <sms_button_gpio_init+0x94>)
1000896c:	4b09      	ldr	r3, [pc, #36]	; (10008994 <sms_button_gpio_init+0x98>)
1000896e:	4798      	blx	r3
10008970:	480b      	ldr	r0, [pc, #44]	; (100089a0 <sms_button_gpio_init+0xa4>)
10008972:	4b0a      	ldr	r3, [pc, #40]	; (1000899c <sms_button_gpio_init+0xa0>)
10008974:	4798      	blx	r3
    }
}
10008976:	b002      	add	sp, #8
10008978:	bc1c      	pop	{r2, r3, r4}
1000897a:	4690      	mov	r8, r2
1000897c:	4699      	mov	r9, r3
1000897e:	46a2      	mov	sl, r4
10008980:	bdf0      	pop	{r4, r5, r6, r7, pc}
10008982:	46c0      	nop			; (mov r8, r8)
10008984:	1000a311 	.word	0x1000a311
10008988:	10019ad4 	.word	0x10019ad4
1000898c:	1000a321 	.word	0x1000a321
10008990:	10016de8 	.word	0x10016de8
10008994:	100127bd 	.word	0x100127bd
10008998:	10016f50 	.word	0x10016f50
1000899c:	1001269d 	.word	0x1001269d
100089a0:	10016f88 	.word	0x10016f88

100089a4 <sms_button_register_callbacks>:

/* Register button input callbacks */
void sms_button_register_callbacks(void)
{
100089a4:	b570      	push	{r4, r5, r6, lr}
    /* Button0 callback */
    gpio_register_callback(button_instance.btn0.gpio_pin, sms_button_bt0_callback, GPIO_CALLBACK_RISING);
100089a6:	4d05      	ldr	r5, [pc, #20]	; (100089bc <sms_button_register_callbacks+0x18>)
100089a8:	7868      	ldrb	r0, [r5, #1]
100089aa:	2202      	movs	r2, #2
100089ac:	4904      	ldr	r1, [pc, #16]	; (100089c0 <sms_button_register_callbacks+0x1c>)
100089ae:	4c05      	ldr	r4, [pc, #20]	; (100089c4 <sms_button_register_callbacks+0x20>)
100089b0:	47a0      	blx	r4
    //gpio_enable_callback(SMS_BTN_0_PIN);
    
    /* Button1 callback */
    gpio_register_callback(button_instance.btn1.gpio_pin, sms_button_bt1_callback, GPIO_CALLBACK_RISING);
100089b2:	79e8      	ldrb	r0, [r5, #7]
100089b4:	2202      	movs	r2, #2
100089b6:	4904      	ldr	r1, [pc, #16]	; (100089c8 <sms_button_register_callbacks+0x24>)
100089b8:	47a0      	blx	r4
    //gpio_enable_callback(SMS_BTN_1_PIN);
    
    /* User button callback */
}
100089ba:	bd70      	pop	{r4, r5, r6, pc}
100089bc:	10019ad4 	.word	0x10019ad4
100089c0:	10008895 	.word	0x10008895
100089c4:	1000a6b1 	.word	0x1000a6b1
100089c8:	100088b5 	.word	0x100088b5

100089cc <sms_button_toggle_callback>:
    else return BUTTON_STATE_NONE;
}

/* En- or disable button interrupts */
void sms_button_toggle_callback(enum sms_btn_int_tog tog0, enum sms_btn_int_tog tog1)
{
100089cc:	b510      	push	{r4, lr}
100089ce:	000c      	movs	r4, r1
    if(tog0 == SMS_BTN_INT_ENABLE) {
100089d0:	2800      	cmp	r0, #0
100089d2:	d104      	bne.n	100089de <sms_button_toggle_callback+0x12>
        gpio_enable_callback(button_instance.btn0.gpio_pin);
100089d4:	4b0c      	ldr	r3, [pc, #48]	; (10008a08 <sms_button_toggle_callback+0x3c>)
100089d6:	7858      	ldrb	r0, [r3, #1]
100089d8:	4b0c      	ldr	r3, [pc, #48]	; (10008a0c <sms_button_toggle_callback+0x40>)
100089da:	4798      	blx	r3
100089dc:	e005      	b.n	100089ea <sms_button_toggle_callback+0x1e>
    }
    else if(tog0 == SMS_BTN_INT_DISABLE) {
100089de:	2801      	cmp	r0, #1
100089e0:	d103      	bne.n	100089ea <sms_button_toggle_callback+0x1e>
        gpio_disable_callback(button_instance.btn0.gpio_pin);
100089e2:	4b09      	ldr	r3, [pc, #36]	; (10008a08 <sms_button_toggle_callback+0x3c>)
100089e4:	7858      	ldrb	r0, [r3, #1]
100089e6:	4b0a      	ldr	r3, [pc, #40]	; (10008a10 <sms_button_toggle_callback+0x44>)
100089e8:	4798      	blx	r3
    }
    
    if(tog1 == SMS_BTN_INT_ENABLE) {
100089ea:	2c00      	cmp	r4, #0
100089ec:	d104      	bne.n	100089f8 <sms_button_toggle_callback+0x2c>
        gpio_enable_callback(button_instance.btn1.gpio_pin);
100089ee:	4b06      	ldr	r3, [pc, #24]	; (10008a08 <sms_button_toggle_callback+0x3c>)
100089f0:	79d8      	ldrb	r0, [r3, #7]
100089f2:	4b06      	ldr	r3, [pc, #24]	; (10008a0c <sms_button_toggle_callback+0x40>)
100089f4:	4798      	blx	r3
100089f6:	e005      	b.n	10008a04 <sms_button_toggle_callback+0x38>
    }
    else if(tog1 == SMS_BTN_INT_DISABLE) {
100089f8:	2c01      	cmp	r4, #1
100089fa:	d103      	bne.n	10008a04 <sms_button_toggle_callback+0x38>
        gpio_disable_callback(button_instance.btn1.gpio_pin);
100089fc:	4b02      	ldr	r3, [pc, #8]	; (10008a08 <sms_button_toggle_callback+0x3c>)
100089fe:	79d8      	ldrb	r0, [r3, #7]
10008a00:	4b03      	ldr	r3, [pc, #12]	; (10008a10 <sms_button_toggle_callback+0x44>)
10008a02:	4798      	blx	r3
    }
}
10008a04:	bd10      	pop	{r4, pc}
10008a06:	46c0      	nop			; (mov r8, r8)
10008a08:	10019ad4 	.word	0x10019ad4
10008a0c:	1000a781 	.word	0x1000a781
10008a10:	1000a7dd 	.word	0x1000a7dd

10008a14 <sms_button_define_services>:
    send_plf_int_msg_ind(button_instance.btn1.gpio_pin, GPIO_CALLBACK_RISING, NULL, 0);
}

/* Define BLE service for buttons */
void sms_button_define_services(void)
{
10008a14:	b510      	push	{r4, lr}
10008a16:	b082      	sub	sp, #8
    at_ble_status_t status;
    uint8_t init_value = 0;
10008a18:	466b      	mov	r3, sp
10008a1a:	1dda      	adds	r2, r3, #7
10008a1c:	2300      	movs	r3, #0
10008a1e:	7013      	strb	r3, [r2, #0]
    sms_ble_service_init(BLE_SERV_BUTTON, &button_instance.service_handler, &init_value);
10008a20:	4c09      	ldr	r4, [pc, #36]	; (10008a48 <sms_button_define_services+0x34>)
10008a22:	0021      	movs	r1, r4
10008a24:	2000      	movs	r0, #0
10008a26:	4b09      	ldr	r3, [pc, #36]	; (10008a4c <sms_button_define_services+0x38>)
10008a28:	4798      	blx	r3
    if((status = sms_ble_primary_service_define(&button_instance.service_handler)) != AT_BLE_SUCCESS) {
10008a2a:	0020      	movs	r0, r4
10008a2c:	4b08      	ldr	r3, [pc, #32]	; (10008a50 <sms_button_define_services+0x3c>)
10008a2e:	4798      	blx	r3
10008a30:	1e04      	subs	r4, r0, #0
10008a32:	d006      	beq.n	10008a42 <sms_button_define_services+0x2e>
        DBG_LOG("[sms_button_define_services]\tServices defining failed, reason 0x%x", status);
10008a34:	4807      	ldr	r0, [pc, #28]	; (10008a54 <sms_button_define_services+0x40>)
10008a36:	4b08      	ldr	r3, [pc, #32]	; (10008a58 <sms_button_define_services+0x44>)
10008a38:	4798      	blx	r3
10008a3a:	0021      	movs	r1, r4
10008a3c:	4807      	ldr	r0, [pc, #28]	; (10008a5c <sms_button_define_services+0x48>)
10008a3e:	4b08      	ldr	r3, [pc, #32]	; (10008a60 <sms_button_define_services+0x4c>)
10008a40:	4798      	blx	r3
    }
    else {
        DBG_LOG_DEV("[sms_button_define_services]\tServices defined, SMS button handle: %d", button_instance.service_handler.serv_handle);
    }
10008a42:	b002      	add	sp, #8
10008a44:	bd10      	pop	{r4, pc}
10008a46:	46c0      	nop			; (mov r8, r8)
10008a48:	10019ae4 	.word	0x10019ae4
10008a4c:	100087ad 	.word	0x100087ad
10008a50:	10008789 	.word	0x10008789
10008a54:	10016de8 	.word	0x10016de8
10008a58:	100127bd 	.word	0x100127bd
10008a5c:	10016ff8 	.word	0x10016ff8
10008a60:	1001269d 	.word	0x1001269d

10008a64 <sms_monitor_configure_gpio>:

#include "sms_common.h"

/* General functions */
void sms_monitor_configure_gpio(void)
{
10008a64:	b510      	push	{r4, lr}
10008a66:	b082      	sub	sp, #8
    struct gpio_config config_gpio_pin;
    gpio_get_config_defaults(&config_gpio_pin);
10008a68:	ac01      	add	r4, sp, #4
10008a6a:	0020      	movs	r0, r4
10008a6c:	4b15      	ldr	r3, [pc, #84]	; (10008ac4 <sms_monitor_configure_gpio+0x60>)
10008a6e:	4798      	blx	r3
    config_gpio_pin.direction  = GPIO_PIN_DIR_OUTPUT;
10008a70:	2301      	movs	r3, #1
10008a72:	7023      	strb	r3, [r4, #0]
    if(gpio_pin_set_config(DBG_PIN_1, &config_gpio_pin) != STATUS_OK) {
10008a74:	0021      	movs	r1, r4
10008a76:	200e      	movs	r0, #14
10008a78:	4b13      	ldr	r3, [pc, #76]	; (10008ac8 <sms_monitor_configure_gpio+0x64>)
10008a7a:	4798      	blx	r3
10008a7c:	2800      	cmp	r0, #0
10008a7e:	d005      	beq.n	10008a8c <sms_monitor_configure_gpio+0x28>
        DBG_LOG("Problem while setting gpio pin");
10008a80:	4812      	ldr	r0, [pc, #72]	; (10008acc <sms_monitor_configure_gpio+0x68>)
10008a82:	4b13      	ldr	r3, [pc, #76]	; (10008ad0 <sms_monitor_configure_gpio+0x6c>)
10008a84:	4798      	blx	r3
10008a86:	4813      	ldr	r0, [pc, #76]	; (10008ad4 <sms_monitor_configure_gpio+0x70>)
10008a88:	4b13      	ldr	r3, [pc, #76]	; (10008ad8 <sms_monitor_configure_gpio+0x74>)
10008a8a:	4798      	blx	r3
    }
    gpio_pin_set_output_level(DBG_PIN_1, DBG_PIN_LOW);
10008a8c:	2100      	movs	r1, #0
10008a8e:	200e      	movs	r0, #14
10008a90:	4b12      	ldr	r3, [pc, #72]	; (10008adc <sms_monitor_configure_gpio+0x78>)
10008a92:	4798      	blx	r3
	
	gpio_get_config_defaults(&config_gpio_pin);
10008a94:	ac01      	add	r4, sp, #4
10008a96:	0020      	movs	r0, r4
10008a98:	4b0a      	ldr	r3, [pc, #40]	; (10008ac4 <sms_monitor_configure_gpio+0x60>)
10008a9a:	4798      	blx	r3
	config_gpio_pin.direction = GPIO_PIN_DIR_OUTPUT;
10008a9c:	2301      	movs	r3, #1
10008a9e:	7023      	strb	r3, [r4, #0]
	if(gpio_pin_set_config(DBG_PIN_2, &config_gpio_pin) != STATUS_OK) {
10008aa0:	0021      	movs	r1, r4
10008aa2:	200f      	movs	r0, #15
10008aa4:	4b08      	ldr	r3, [pc, #32]	; (10008ac8 <sms_monitor_configure_gpio+0x64>)
10008aa6:	4798      	blx	r3
10008aa8:	2800      	cmp	r0, #0
10008aaa:	d005      	beq.n	10008ab8 <sms_monitor_configure_gpio+0x54>
		DBG_LOG("Problem while setting gpio pin");
10008aac:	4807      	ldr	r0, [pc, #28]	; (10008acc <sms_monitor_configure_gpio+0x68>)
10008aae:	4b08      	ldr	r3, [pc, #32]	; (10008ad0 <sms_monitor_configure_gpio+0x6c>)
10008ab0:	4798      	blx	r3
10008ab2:	4808      	ldr	r0, [pc, #32]	; (10008ad4 <sms_monitor_configure_gpio+0x70>)
10008ab4:	4b08      	ldr	r3, [pc, #32]	; (10008ad8 <sms_monitor_configure_gpio+0x74>)
10008ab6:	4798      	blx	r3
	}
	gpio_pin_set_output_level(DBG_PIN_2, DBG_PIN_LOW);
10008ab8:	2100      	movs	r1, #0
10008aba:	200f      	movs	r0, #15
10008abc:	4b07      	ldr	r3, [pc, #28]	; (10008adc <sms_monitor_configure_gpio+0x78>)
10008abe:	4798      	blx	r3
}
10008ac0:	b002      	add	sp, #8
10008ac2:	bd10      	pop	{r4, pc}
10008ac4:	1000a311 	.word	0x1000a311
10008ac8:	1000a321 	.word	0x1000a321
10008acc:	10016de8 	.word	0x10016de8
10008ad0:	100127bd 	.word	0x100127bd
10008ad4:	1001703c 	.word	0x1001703c
10008ad8:	1001269d 	.word	0x1001269d
10008adc:	1000a4d9 	.word	0x1000a4d9

10008ae0 <sms_monitor_get_states>:

void sms_monitor_get_states(const char *label)
{
    DBG_LOG_DEV("%s...\t\tB-prev %d, B-cur %d, BLE 0x%02x, T1 %d, T2 %d, SMS %d", label, button_instance.previous_state, button_instance.current_state, ble_instance.current_state, timer1_current_mode, timer2_current_mode, sms_working_mode);
10008ae0:	4b04      	ldr	r3, [pc, #16]	; (10008af4 <sms_monitor_get_states+0x14>)
10008ae2:	781b      	ldrb	r3, [r3, #0]
10008ae4:	4b04      	ldr	r3, [pc, #16]	; (10008af8 <sms_monitor_get_states+0x18>)
10008ae6:	781b      	ldrb	r3, [r3, #0]
10008ae8:	4b04      	ldr	r3, [pc, #16]	; (10008afc <sms_monitor_get_states+0x1c>)
10008aea:	781b      	ldrb	r3, [r3, #0]
10008aec:	4b04      	ldr	r3, [pc, #16]	; (10008b00 <sms_monitor_get_states+0x20>)
10008aee:	781b      	ldrb	r3, [r3, #0]
}
10008af0:	4770      	bx	lr
10008af2:	46c0      	nop			; (mov r8, r8)
10008af4:	10019ab8 	.word	0x10019ab8
10008af8:	100199dc 	.word	0x100199dc
10008afc:	10019bf7 	.word	0x10019bf7
10008b00:	10019ab4 	.word	0x10019ab4

10008b04 <sms_i2c_master_configure>:
#include <stdlib.h>
#include "sms_i2c.h"


void sms_i2c_master_configure(void)
{
10008b04:	b530      	push	{r4, r5, lr}
10008b06:	b087      	sub	sp, #28
    i2c_wpacket.data = malloc(I2C_DATA_LENGTH * sizeof(uint8_t));
10008b08:	2010      	movs	r0, #16
10008b0a:	4c14      	ldr	r4, [pc, #80]	; (10008b5c <sms_i2c_master_configure+0x58>)
10008b0c:	47a0      	blx	r4
10008b0e:	4b14      	ldr	r3, [pc, #80]	; (10008b60 <sms_i2c_master_configure+0x5c>)
10008b10:	6058      	str	r0, [r3, #4]
    i2c_rpacket.data = malloc(I2C_DATA_LENGTH * sizeof(uint8_t));
10008b12:	2010      	movs	r0, #16
10008b14:	47a0      	blx	r4
10008b16:	4b13      	ldr	r3, [pc, #76]	; (10008b64 <sms_i2c_master_configure+0x60>)
10008b18:	6058      	str	r0, [r3, #4]

    struct i2c_master_config config_i2c_master;
    i2c_master_get_config_defaults(&config_i2c_master);
10008b1a:	ac01      	add	r4, sp, #4
10008b1c:	0020      	movs	r0, r4
10008b1e:	4b12      	ldr	r3, [pc, #72]	; (10008b68 <sms_i2c_master_configure+0x64>)
10008b20:	4798      	blx	r3
    config_i2c_master.clock_source = SMS_I2C_MASTER_CLK_SRC;
10008b22:	2303      	movs	r3, #3
10008b24:	7023      	strb	r3, [r4, #0]
    config_i2c_master.clock_divider = SMS_I2C_MASTER_CLK_DIV;
10008b26:	331b      	adds	r3, #27
10008b28:	8063      	strh	r3, [r4, #2]
    config_i2c_master.pin_number_pad0 = SMS_I2C_MASTER_PIN_SDA;
10008b2a:	3b16      	subs	r3, #22
10008b2c:	6063      	str	r3, [r4, #4]
    config_i2c_master.pin_number_pad1 = SMS_I2C_MASTER_PIN_SCL;
10008b2e:	3301      	adds	r3, #1
10008b30:	60e3      	str	r3, [r4, #12]
    config_i2c_master.pinmux_sel_pad0 = SMS_I2C_MASTER_MUX_SDA;
10008b32:	3b07      	subs	r3, #7
10008b34:	60a3      	str	r3, [r4, #8]
    config_i2c_master.pinmux_sel_pad1 = SMS_I2C_MASTER_MUX_SCL;
10008b36:	6123      	str	r3, [r4, #16]
    while(i2c_master_init(&i2c_master_instance, SMS_I2C_MASTER_PORT, &config_i2c_master) != STATUS_OK);
10008b38:	4d0c      	ldr	r5, [pc, #48]	; (10008b6c <sms_i2c_master_configure+0x68>)
10008b3a:	4c0d      	ldr	r4, [pc, #52]	; (10008b70 <sms_i2c_master_configure+0x6c>)
10008b3c:	aa01      	add	r2, sp, #4
10008b3e:	490d      	ldr	r1, [pc, #52]	; (10008b74 <sms_i2c_master_configure+0x70>)
10008b40:	0028      	movs	r0, r5
10008b42:	47a0      	blx	r4
10008b44:	2800      	cmp	r0, #0
10008b46:	d1f9      	bne.n	10008b3c <sms_i2c_master_configure+0x38>

    i2c_enable(i2c_master_instance.hw);
10008b48:	4b08      	ldr	r3, [pc, #32]	; (10008b6c <sms_i2c_master_configure+0x68>)
10008b4a:	681a      	ldr	r2, [r3, #0]
 *
 * \param[in]  i2c_module  Pointer to software module structure
 */
static inline void i2c_wait_for_idle(I2c *const i2c_module)
{
	while (i2c_module->I2C_STATUS.bit.I2C_ACTIVE) {
10008b4c:	2128      	movs	r1, #40	; 0x28
10008b4e:	5c53      	ldrb	r3, [r2, r1]
10008b50:	07db      	lsls	r3, r3, #31
10008b52:	d4fc      	bmi.n	10008b4e <sms_i2c_master_configure+0x4a>
static inline void i2c_enable(I2c *const i2c_module)
{
	/* Wait for module to sync. */
	i2c_wait_for_idle(i2c_module);
	/* Enable module. */
	i2c_module->I2C_MODULE_ENABLE.reg = (1 << I2C_MODULE_ENABLE_ENABLE_Pos);
10008b54:	2301      	movs	r3, #1
10008b56:	7513      	strb	r3, [r2, #20]
}
10008b58:	b007      	add	sp, #28
10008b5a:	bd30      	pop	{r4, r5, pc}
10008b5c:	10011c25 	.word	0x10011c25
10008b60:	10019c00 	.word	0x10019c00
10008b64:	10019be0 	.word	0x10019be0
10008b68:	10008305 	.word	0x10008305
10008b6c:	10019bec 	.word	0x10019bec
10008b70:	1000831d 	.word	0x1000831d
10008b74:	40003000 	.word	0x40003000

10008b78 <sms_i2c_master_write>:

int sms_i2c_master_write(uint8_t slave_addr, uint8_t reg_addr, uint8_t data_len, uint8_t const *data)
{
10008b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    //DBG_LOG_DEV("i2c writing to 0x%02x at 0x%02x... data: ", slave_addr, reg_addr);
    uint16_t timeout = 0;
    i2c_wpacket.address = (uint8_t)slave_addr;
10008b7a:	4c12      	ldr	r4, [pc, #72]	; (10008bc4 <sms_i2c_master_write+0x4c>)
10008b7c:	8020      	strh	r0, [r4, #0]
    i2c_wpacket.data_length = (uint8_t)(data_len + 1);
10008b7e:	1c50      	adds	r0, r2, #1
10008b80:	b2c0      	uxtb	r0, r0
10008b82:	8060      	strh	r0, [r4, #2]
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
10008b84:	6860      	ldr	r0, [r4, #4]
10008b86:	7001      	strb	r1, [r0, #0]
    for(uint8_t i = 0; i < data_len; i++) {
10008b88:	2a00      	cmp	r2, #0
10008b8a:	d00e      	beq.n	10008baa <sms_i2c_master_write+0x32>
10008b8c:	2000      	movs	r0, #0
10008b8e:	1c41      	adds	r1, r0, #1
        i2c_wpacket.data[i+1] = (uint8_t)data[i];
10008b90:	5c18      	ldrb	r0, [r3, r0]
10008b92:	6865      	ldr	r5, [r4, #4]
10008b94:	5468      	strb	r0, [r5, r1]
10008b96:	0008      	movs	r0, r1
    //DBG_LOG_DEV("i2c writing to 0x%02x at 0x%02x... data: ", slave_addr, reg_addr);
    uint16_t timeout = 0;
    i2c_wpacket.address = (uint8_t)slave_addr;
    i2c_wpacket.data_length = (uint8_t)(data_len + 1);
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
    for(uint8_t i = 0; i < data_len; i++) {
10008b98:	b2c9      	uxtb	r1, r1
10008b9a:	428a      	cmp	r2, r1
10008b9c:	d8f7      	bhi.n	10008b8e <sms_i2c_master_write+0x16>
10008b9e:	e004      	b.n	10008baa <sms_i2c_master_write+0x32>
10008ba0:	3c01      	subs	r4, #1
10008ba2:	b2a4      	uxth	r4, r4
        i2c_wpacket.data[i+1] = (uint8_t)data[i];
        //DBG_LOG_CONT_DEV("0x%02x ", i2c_wpacket.data[i+1]);
    }
    while (i2c_master_write_packet_wait(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) {
        /* Increment timeout counter and check if timed out. */
        if (timeout++ >= I2C_TIMEOUT) {
10008ba4:	2c00      	cmp	r4, #0
10008ba6:	d104      	bne.n	10008bb2 <sms_i2c_master_write+0x3a>
10008ba8:	e009      	b.n	10008bbe <sms_i2c_master_write+0x46>
    //DBG_LOG_DEV("i2c writing to 0x%02x at 0x%02x... data: ", slave_addr, reg_addr);
    uint16_t timeout = 0;
    i2c_wpacket.address = (uint8_t)slave_addr;
    i2c_wpacket.data_length = (uint8_t)(data_len + 1);
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
    for(uint8_t i = 0; i < data_len; i++) {
10008baa:	4c07      	ldr	r4, [pc, #28]	; (10008bc8 <sms_i2c_master_write+0x50>)
        i2c_wpacket.data[i+1] = (uint8_t)data[i];
        //DBG_LOG_CONT_DEV("0x%02x ", i2c_wpacket.data[i+1]);
    }
    while (i2c_master_write_packet_wait(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) {
10008bac:	4e05      	ldr	r6, [pc, #20]	; (10008bc4 <sms_i2c_master_write+0x4c>)
10008bae:	4d07      	ldr	r5, [pc, #28]	; (10008bcc <sms_i2c_master_write+0x54>)
10008bb0:	4f07      	ldr	r7, [pc, #28]	; (10008bd0 <sms_i2c_master_write+0x58>)
10008bb2:	0031      	movs	r1, r6
10008bb4:	0028      	movs	r0, r5
10008bb6:	47b8      	blx	r7
10008bb8:	2800      	cmp	r0, #0
10008bba:	d1f1      	bne.n	10008ba0 <sms_i2c_master_write+0x28>
10008bbc:	e001      	b.n	10008bc2 <sms_i2c_master_write+0x4a>
        /* Increment timeout counter and check if timed out. */
        if (timeout++ >= I2C_TIMEOUT) {
            return -1;
10008bbe:	2001      	movs	r0, #1
10008bc0:	4240      	negs	r0, r0
        }
    }
    return 0;
}
10008bc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10008bc4:	10019c00 	.word	0x10019c00
10008bc8:	000003e9 	.word	0x000003e9
10008bcc:	10019bec 	.word	0x10019bec
10008bd0:	100083b5 	.word	0x100083b5

10008bd4 <sms_i2c_master_read>:

int sms_i2c_master_read(uint8_t slave_addr, uint8_t reg_addr, uint8_t data_len, uint8_t *data)
{
10008bd4:	b5f0      	push	{r4, r5, r6, r7, lr}
10008bd6:	4647      	mov	r7, r8
10008bd8:	b480      	push	{r7}
10008bda:	0017      	movs	r7, r2
10008bdc:	4698      	mov	r8, r3
    //DBG_LOG("i2c reading from 0x%02x at 0x%02x... data: ", slave_addr, reg_addr);
    uint16_t timeout;
    i2c_wpacket.address = (uint8_t)slave_addr;
10008bde:	b280      	uxth	r0, r0
10008be0:	4b1d      	ldr	r3, [pc, #116]	; (10008c58 <sms_i2c_master_read+0x84>)
10008be2:	8018      	strh	r0, [r3, #0]
    i2c_wpacket.data_length = 1;
10008be4:	2201      	movs	r2, #1
10008be6:	805a      	strh	r2, [r3, #2]
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
10008be8:	685b      	ldr	r3, [r3, #4]
10008bea:	7019      	strb	r1, [r3, #0]
    i2c_rpacket.address = (uint8_t)slave_addr;
10008bec:	4b1b      	ldr	r3, [pc, #108]	; (10008c5c <sms_i2c_master_read+0x88>)
10008bee:	8018      	strh	r0, [r3, #0]
    i2c_rpacket.data_length = (uint8_t)data_len;
10008bf0:	805f      	strh	r7, [r3, #2]
    
    timeout = 0;
    while(i2c_master_write_packet_wait_no_stop(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) {
10008bf2:	4c1b      	ldr	r4, [pc, #108]	; (10008c60 <sms_i2c_master_read+0x8c>)
10008bf4:	4e18      	ldr	r6, [pc, #96]	; (10008c58 <sms_i2c_master_read+0x84>)
10008bf6:	4d1b      	ldr	r5, [pc, #108]	; (10008c64 <sms_i2c_master_read+0x90>)
10008bf8:	e003      	b.n	10008c02 <sms_i2c_master_read+0x2e>
10008bfa:	3c01      	subs	r4, #1
10008bfc:	b2a4      	uxth	r4, r4
		//DBG_LOG_DEV("t/o %d", timeout);
        if(timeout++ >= I2C_TIMEOUT) {
10008bfe:	2c00      	cmp	r4, #0
10008c00:	d01f      	beq.n	10008c42 <sms_i2c_master_read+0x6e>
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
    i2c_rpacket.address = (uint8_t)slave_addr;
    i2c_rpacket.data_length = (uint8_t)data_len;
    
    timeout = 0;
    while(i2c_master_write_packet_wait_no_stop(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) {
10008c02:	0031      	movs	r1, r6
10008c04:	4818      	ldr	r0, [pc, #96]	; (10008c68 <sms_i2c_master_read+0x94>)
10008c06:	47a8      	blx	r5
10008c08:	2800      	cmp	r0, #0
10008c0a:	d1f6      	bne.n	10008bfa <sms_i2c_master_read+0x26>
10008c0c:	4e14      	ldr	r6, [pc, #80]	; (10008c60 <sms_i2c_master_read+0x8c>)
            return -1;
        }
    }
    
    timeout = 0;
    while(i2c_master_read_packet_wait(&i2c_master_instance, &i2c_rpacket) != STATUS_OK) {
10008c0e:	4d13      	ldr	r5, [pc, #76]	; (10008c5c <sms_i2c_master_read+0x88>)
10008c10:	4c16      	ldr	r4, [pc, #88]	; (10008c6c <sms_i2c_master_read+0x98>)
10008c12:	e003      	b.n	10008c1c <sms_i2c_master_read+0x48>
10008c14:	3e01      	subs	r6, #1
10008c16:	b2b6      	uxth	r6, r6
		//DBG_LOG_DEV("t/o %d", timeout);
        if(timeout++ >= I2C_TIMEOUT) {
10008c18:	2e00      	cmp	r6, #0
10008c1a:	d015      	beq.n	10008c48 <sms_i2c_master_read+0x74>
            return -1;
        }
    }
    
    timeout = 0;
    while(i2c_master_read_packet_wait(&i2c_master_instance, &i2c_rpacket) != STATUS_OK) {
10008c1c:	0029      	movs	r1, r5
10008c1e:	4812      	ldr	r0, [pc, #72]	; (10008c68 <sms_i2c_master_read+0x94>)
10008c20:	47a0      	blx	r4
10008c22:	2800      	cmp	r0, #0
10008c24:	d1f6      	bne.n	10008c14 <sms_i2c_master_read+0x40>
		//DBG_LOG_DEV("t/o %d", timeout);
        if(timeout++ >= I2C_TIMEOUT) {
            return -1;
        }
    }
    for(uint8_t i = 0; i < data_len; i++) {
10008c26:	2f00      	cmp	r7, #0
10008c28:	d011      	beq.n	10008c4e <sms_i2c_master_read+0x7a>
10008c2a:	2300      	movs	r3, #0
        data[i] = i2c_rpacket.data[i];
10008c2c:	490b      	ldr	r1, [pc, #44]	; (10008c5c <sms_i2c_master_read+0x88>)
10008c2e:	684a      	ldr	r2, [r1, #4]
10008c30:	5cd2      	ldrb	r2, [r2, r3]
10008c32:	4640      	mov	r0, r8
10008c34:	54c2      	strb	r2, [r0, r3]
10008c36:	3301      	adds	r3, #1
		//DBG_LOG_DEV("t/o %d", timeout);
        if(timeout++ >= I2C_TIMEOUT) {
            return -1;
        }
    }
    for(uint8_t i = 0; i < data_len; i++) {
10008c38:	b2da      	uxtb	r2, r3
10008c3a:	4297      	cmp	r7, r2
10008c3c:	d8f7      	bhi.n	10008c2e <sms_i2c_master_read+0x5a>
        data[i] = i2c_rpacket.data[i];
        //DBG_LOG_CONT(" 0x%02x ", data[i]);
    }
    return 0;
10008c3e:	2000      	movs	r0, #0
10008c40:	e006      	b.n	10008c50 <sms_i2c_master_read+0x7c>
    
    timeout = 0;
    while(i2c_master_write_packet_wait_no_stop(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) {
		//DBG_LOG_DEV("t/o %d", timeout);
        if(timeout++ >= I2C_TIMEOUT) {
            return -1;
10008c42:	2001      	movs	r0, #1
10008c44:	4240      	negs	r0, r0
10008c46:	e003      	b.n	10008c50 <sms_i2c_master_read+0x7c>
    
    timeout = 0;
    while(i2c_master_read_packet_wait(&i2c_master_instance, &i2c_rpacket) != STATUS_OK) {
		//DBG_LOG_DEV("t/o %d", timeout);
        if(timeout++ >= I2C_TIMEOUT) {
            return -1;
10008c48:	2001      	movs	r0, #1
10008c4a:	4240      	negs	r0, r0
10008c4c:	e000      	b.n	10008c50 <sms_i2c_master_read+0x7c>
    }
    for(uint8_t i = 0; i < data_len; i++) {
        data[i] = i2c_rpacket.data[i];
        //DBG_LOG_CONT(" 0x%02x ", data[i]);
    }
    return 0;
10008c4e:	2000      	movs	r0, #0
10008c50:	bc04      	pop	{r2}
10008c52:	4690      	mov	r8, r2
10008c54:	bdf0      	pop	{r4, r5, r6, r7, pc}
10008c56:	46c0      	nop			; (mov r8, r8)
10008c58:	10019c00 	.word	0x10019c00
10008c5c:	10019be0 	.word	0x10019be0
10008c60:	000003e9 	.word	0x000003e9
10008c64:	100083d9 	.word	0x100083d9
10008c68:	10019bec 	.word	0x10019bec
10008c6c:	10008391 	.word	0x10008391

10008c70 <sms_mpu_interrupt_callback>:
	mpu_device.int_enabled = false;
}

/* Callback --> send interrupt message to platform */
void sms_mpu_interrupt_callback(void)
{
10008c70:	b510      	push	{r4, lr}
	if(mpu_device.int_enabled) {
10008c72:	2344      	movs	r3, #68	; 0x44
10008c74:	4a06      	ldr	r2, [pc, #24]	; (10008c90 <sms_mpu_interrupt_callback+0x20>)
10008c76:	5cd3      	ldrb	r3, [r2, r3]
10008c78:	2b00      	cmp	r3, #0
10008c7a:	d008      	beq.n	10008c8e <sms_mpu_interrupt_callback+0x1e>
		mpu_device.new_int = true;
10008c7c:	2101      	movs	r1, #1
10008c7e:	2345      	movs	r3, #69	; 0x45
10008c80:	54d1      	strb	r1, [r2, r3]
		send_plf_int_msg_ind(SMS_MPU_DRDY_PIN, GPIO_CALLBACK_RISING, NULL, 0);
10008c82:	2300      	movs	r3, #0
10008c84:	2200      	movs	r2, #0
10008c86:	3101      	adds	r1, #1
10008c88:	201e      	movs	r0, #30
10008c8a:	4c02      	ldr	r4, [pc, #8]	; (10008c94 <sms_mpu_interrupt_callback+0x24>)
10008c8c:	47a0      	blx	r4
	}
}
10008c8e:	bd10      	pop	{r4, pc}
10008c90:	100199e0 	.word	0x100199e0
10008c94:	1000d01d 	.word	0x1000d01d

10008c98 <sms_mpu_configure_gpio>:
#include "mpu9250.h"

//static struct hal_s hal = {0};
    
void sms_mpu_configure_gpio(void)
{
10008c98:	b510      	push	{r4, lr}
10008c9a:	b082      	sub	sp, #8
    struct gpio_config config_gpio_pin;

    /* Data ready interrupt from IMU */
    gpio_get_config_defaults(&config_gpio_pin);
10008c9c:	ac01      	add	r4, sp, #4
10008c9e:	0020      	movs	r0, r4
10008ca0:	4b0a      	ldr	r3, [pc, #40]	; (10008ccc <sms_mpu_configure_gpio+0x34>)
10008ca2:	4798      	blx	r3
    config_gpio_pin.direction = GPIO_PIN_DIR_INPUT;
10008ca4:	2300      	movs	r3, #0
10008ca6:	7023      	strb	r3, [r4, #0]
    config_gpio_pin.input_pull = GPIO_PIN_PULL_DOWN;
10008ca8:	3302      	adds	r3, #2
10008caa:	7063      	strb	r3, [r4, #1]
    config_gpio_pin.aon_wakeup = true;
10008cac:	3b01      	subs	r3, #1
10008cae:	70e3      	strb	r3, [r4, #3]
    if(gpio_pin_set_config(SMS_MPU_DRDY_PIN, &config_gpio_pin) != STATUS_OK) {
10008cb0:	0021      	movs	r1, r4
10008cb2:	201e      	movs	r0, #30
10008cb4:	4b06      	ldr	r3, [pc, #24]	; (10008cd0 <sms_mpu_configure_gpio+0x38>)
10008cb6:	4798      	blx	r3
10008cb8:	2800      	cmp	r0, #0
10008cba:	d005      	beq.n	10008cc8 <sms_mpu_configure_gpio+0x30>
        DBG_LOG("[sms_imu_configure_gpio]\tProblem while setting up IMU DRDY pin");
10008cbc:	4805      	ldr	r0, [pc, #20]	; (10008cd4 <sms_mpu_configure_gpio+0x3c>)
10008cbe:	4b06      	ldr	r3, [pc, #24]	; (10008cd8 <sms_mpu_configure_gpio+0x40>)
10008cc0:	4798      	blx	r3
10008cc2:	4806      	ldr	r0, [pc, #24]	; (10008cdc <sms_mpu_configure_gpio+0x44>)
10008cc4:	4b06      	ldr	r3, [pc, #24]	; (10008ce0 <sms_mpu_configure_gpio+0x48>)
10008cc6:	4798      	blx	r3
    //config_gpio_pin.direction = GPIO_PIN_DIR_OUTPUT;
    //if(!gpio_pin_set_config(SMS_MPU_VCC_PIN, &config_gpio_pin) != STATUS_OK) {
        //DBG_LOG("[sms_imu_configure_gpio]\tProblem while setting up MPU VCC pin");
    //}
    //gpio_pin_set_output_level(SMS_MPU_VCC_PIN, true);
}
10008cc8:	b002      	add	sp, #8
10008cca:	bd10      	pop	{r4, pc}
10008ccc:	1000a311 	.word	0x1000a311
10008cd0:	1000a321 	.word	0x1000a321
10008cd4:	10016de8 	.word	0x10016de8
10008cd8:	100127bd 	.word	0x100127bd
10008cdc:	1001705c 	.word	0x1001705c
10008ce0:	1001269d 	.word	0x1001269d

10008ce4 <sms_mpu_register_callbacks>:

/* Register GPIO interrupt callback */
void sms_mpu_register_callbacks(void)
{
10008ce4:	b510      	push	{r4, lr}
    /* MPU-9250 interrupt callback */
    gpio_register_callback(SMS_MPU_DRDY_PIN, sms_mpu_interrupt_callback, GPIO_CALLBACK_RISING);
10008ce6:	2202      	movs	r2, #2
10008ce8:	4902      	ldr	r1, [pc, #8]	; (10008cf4 <sms_mpu_register_callbacks+0x10>)
10008cea:	201e      	movs	r0, #30
10008cec:	4b02      	ldr	r3, [pc, #8]	; (10008cf8 <sms_mpu_register_callbacks+0x14>)
10008cee:	4798      	blx	r3
}
10008cf0:	bd10      	pop	{r4, pc}
10008cf2:	46c0      	nop			; (mov r8, r8)
10008cf4:	10008c71 	.word	0x10008c71
10008cf8:	1000a6b1 	.word	0x1000a6b1

10008cfc <sms_mpu_define_services>:
	
    return 0;
}

void sms_mpu_define_services(void)
{
10008cfc:	b510      	push	{r4, lr}
10008cfe:	b082      	sub	sp, #8
    at_ble_status_t status;
    uint8_t init_value = 0;
10008d00:	466b      	mov	r3, sp
10008d02:	1dda      	adds	r2, r3, #7
10008d04:	2300      	movs	r3, #0
10008d06:	7013      	strb	r3, [r2, #0]
    sms_ble_service_init(BLE_SERV_MPU, &mpu_device.service_handler, &init_value);
10008d08:	4c09      	ldr	r4, [pc, #36]	; (10008d30 <sms_mpu_define_services+0x34>)
10008d0a:	0021      	movs	r1, r4
10008d0c:	2002      	movs	r0, #2
10008d0e:	4b09      	ldr	r3, [pc, #36]	; (10008d34 <sms_mpu_define_services+0x38>)
10008d10:	4798      	blx	r3
    if((status = sms_ble_primary_service_define(&mpu_device.service_handler)) != AT_BLE_SUCCESS) {
10008d12:	0020      	movs	r0, r4
10008d14:	4b08      	ldr	r3, [pc, #32]	; (10008d38 <sms_mpu_define_services+0x3c>)
10008d16:	4798      	blx	r3
10008d18:	1e04      	subs	r4, r0, #0
10008d1a:	d006      	beq.n	10008d2a <sms_mpu_define_services+0x2e>
        DBG_LOG("[sms_mpu_define_services]\tServices defining failed, reason 0x%x", status);
10008d1c:	4807      	ldr	r0, [pc, #28]	; (10008d3c <sms_mpu_define_services+0x40>)
10008d1e:	4b08      	ldr	r3, [pc, #32]	; (10008d40 <sms_mpu_define_services+0x44>)
10008d20:	4798      	blx	r3
10008d22:	0021      	movs	r1, r4
10008d24:	4807      	ldr	r0, [pc, #28]	; (10008d44 <sms_mpu_define_services+0x48>)
10008d26:	4b08      	ldr	r3, [pc, #32]	; (10008d48 <sms_mpu_define_services+0x4c>)
10008d28:	4798      	blx	r3
    }
    else {
        DBG_LOG_DEV("[sms_mpu_define_services]\tServices defined, SMS MPU handle: %d", mpu_device.service_handler.serv_handle);
    }
}
10008d2a:	b002      	add	sp, #8
10008d2c:	bd10      	pop	{r4, pc}
10008d2e:	46c0      	nop			; (mov r8, r8)
10008d30:	10019a54 	.word	0x10019a54
10008d34:	100087ad 	.word	0x100087ad
10008d38:	10008789 	.word	0x10008789
10008d3c:	10016de8 	.word	0x10016de8
10008d40:	100127bd 	.word	0x100127bd
10008d44:	1001709c 	.word	0x1001709c
10008d48:	1001269d 	.word	0x1001269d

10008d4c <writeByte>:
	}

}

void writeByte(uint8_t address, uint8_t subAddress, uint8_t data)
{
10008d4c:	b510      	push	{r4, lr}
10008d4e:	b082      	sub	sp, #8
10008d50:	466b      	mov	r3, sp
10008d52:	3307      	adds	r3, #7
10008d54:	701a      	strb	r2, [r3, #0]
	sms_i2c_master_write(address, subAddress, 1, &data);
10008d56:	2201      	movs	r2, #1
10008d58:	4c01      	ldr	r4, [pc, #4]	; (10008d60 <writeByte+0x14>)
10008d5a:	47a0      	blx	r4
}
10008d5c:	b002      	add	sp, #8
10008d5e:	bd10      	pop	{r4, pc}
10008d60:	10008b79 	.word	0x10008b79

10008d64 <sms_mpu_calibrate>:
	}
	return retVal;
}

void sms_mpu_calibrate(float *dest1, float *dest2)
{
10008d64:	b5f0      	push	{r4, r5, r6, r7, lr}
10008d66:	465f      	mov	r7, fp
10008d68:	4656      	mov	r6, sl
10008d6a:	464d      	mov	r5, r9
10008d6c:	4644      	mov	r4, r8
10008d6e:	b4f0      	push	{r4, r5, r6, r7}
10008d70:	b08f      	sub	sp, #60	; 0x3c
10008d72:	9003      	str	r0, [sp, #12]
10008d74:	9105      	str	r1, [sp, #20]
	uint16_t ii, packet_count, fifo_count;
	int32_t gyro_bias[3]  = {0, 0, 0};
	int32_t accel_bias[3] = {0, 0, 0};
	
	// reset device
	writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x80); // Write a one to bit 7 reset bit; toggle reset device
10008d76:	2280      	movs	r2, #128	; 0x80
10008d78:	216b      	movs	r1, #107	; 0x6b
10008d7a:	2069      	movs	r0, #105	; 0x69
10008d7c:	4ccd      	ldr	r4, [pc, #820]	; (100090b4 <sms_mpu_calibrate+0x350>)
10008d7e:	47a0      	blx	r4
	delay_ms(100);
10008d80:	2064      	movs	r0, #100	; 0x64
10008d82:	4dcd      	ldr	r5, [pc, #820]	; (100090b8 <sms_mpu_calibrate+0x354>)
10008d84:	47a8      	blx	r5
	
	// get stable time source; Auto select clock source to be PLL gyroscope reference if ready
	// else use the internal oscillator, bits 2:0 = 001
	writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x01);
10008d86:	2201      	movs	r2, #1
10008d88:	216b      	movs	r1, #107	; 0x6b
10008d8a:	2069      	movs	r0, #105	; 0x69
10008d8c:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, PWR_MGMT_2, 0x00);
10008d8e:	2200      	movs	r2, #0
10008d90:	216c      	movs	r1, #108	; 0x6c
10008d92:	2069      	movs	r0, #105	; 0x69
10008d94:	47a0      	blx	r4
	delay_ms(200);
10008d96:	20c8      	movs	r0, #200	; 0xc8
10008d98:	47a8      	blx	r5

	// Configure device for bias calculation
	writeByte(MPU9250_ADDRESS, INT_ENABLE, 0x00);   // Disable all interrupts
10008d9a:	2200      	movs	r2, #0
10008d9c:	2138      	movs	r1, #56	; 0x38
10008d9e:	2069      	movs	r0, #105	; 0x69
10008da0:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, FIFO_EN, 0x00);      // Disable FIFO
10008da2:	2200      	movs	r2, #0
10008da4:	2123      	movs	r1, #35	; 0x23
10008da6:	2069      	movs	r0, #105	; 0x69
10008da8:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x00);   // Turn on internal clock source
10008daa:	2200      	movs	r2, #0
10008dac:	216b      	movs	r1, #107	; 0x6b
10008dae:	2069      	movs	r0, #105	; 0x69
10008db0:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, I2C_MST_CTRL, 0x00); // Disable I2C master
10008db2:	2200      	movs	r2, #0
10008db4:	2124      	movs	r1, #36	; 0x24
10008db6:	2069      	movs	r0, #105	; 0x69
10008db8:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, USER_CTRL, 0x00);    // Disable FIFO and I2C master modes
10008dba:	2200      	movs	r2, #0
10008dbc:	216a      	movs	r1, #106	; 0x6a
10008dbe:	2069      	movs	r0, #105	; 0x69
10008dc0:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, USER_CTRL, 0x0C);    // Reset FIFO and DMP
10008dc2:	220c      	movs	r2, #12
10008dc4:	216a      	movs	r1, #106	; 0x6a
10008dc6:	2069      	movs	r0, #105	; 0x69
10008dc8:	47a0      	blx	r4
	delay_ms(15);
10008dca:	200f      	movs	r0, #15
10008dcc:	47a8      	blx	r5
	
	// Configure MPU9250 gyro and accelerometer for bias calculation
	writeByte(MPU9250_ADDRESS, CONFIG, 0x01);      // Set low-pass filter to 188 Hz
10008dce:	2201      	movs	r2, #1
10008dd0:	211a      	movs	r1, #26
10008dd2:	2069      	movs	r0, #105	; 0x69
10008dd4:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, SMPLRT_DIV, 0x00);  // Set sample rate to 1 kHz
10008dd6:	2200      	movs	r2, #0
10008dd8:	2119      	movs	r1, #25
10008dda:	2069      	movs	r0, #105	; 0x69
10008ddc:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, GYRO_CONFIG, 0x00);  // Set gyro full-scale to 250 degrees per second, maximum sensitivity
10008dde:	2200      	movs	r2, #0
10008de0:	211b      	movs	r1, #27
10008de2:	2069      	movs	r0, #105	; 0x69
10008de4:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, 0x00); // Set accelerometer full-scale to 2 g, maximum sensitivity
10008de6:	2200      	movs	r2, #0
10008de8:	211c      	movs	r1, #28
10008dea:	2069      	movs	r0, #105	; 0x69
10008dec:	47a0      	blx	r4
	
	uint16_t  gyrosensitivity  = 131;   // = 131 LSB/degrees/sec
	uint16_t  accelsensitivity = 16384;  // = 16384 LSB/g

	// Configure FIFO to capture accelerometer and gyro data for bias calculation
	writeByte(MPU9250_ADDRESS, USER_CTRL, 0x40);   // Enable FIFO
10008dee:	2240      	movs	r2, #64	; 0x40
10008df0:	216a      	movs	r1, #106	; 0x6a
10008df2:	2069      	movs	r0, #105	; 0x69
10008df4:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, FIFO_EN, 0x78);     // Enable gyro and accelerometer sensors for FIFO  (max size 512 bytes in MPU-9150)
10008df6:	2278      	movs	r2, #120	; 0x78
10008df8:	2123      	movs	r1, #35	; 0x23
10008dfa:	2069      	movs	r0, #105	; 0x69
10008dfc:	47a0      	blx	r4
	delay_ms(40); // accumulate 40 samples in 40 milliseconds = 480 bytes
10008dfe:	2028      	movs	r0, #40	; 0x28
10008e00:	47a8      	blx	r5

	// At end of sample accumulation, turn off FIFO sensor read
	writeByte(MPU9250_ADDRESS, FIFO_EN, 0x00);        // Disable gyro and accelerometer sensors for FIFO
10008e02:	2200      	movs	r2, #0
10008e04:	2123      	movs	r1, #35	; 0x23
10008e06:	2069      	movs	r0, #105	; 0x69
10008e08:	47a0      	blx	r4
	return data[0];
}

void readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest)
{
	sms_i2c_master_read(address, subAddress, count, dest);
10008e0a:	ac0b      	add	r4, sp, #44	; 0x2c
10008e0c:	0023      	movs	r3, r4
10008e0e:	2202      	movs	r2, #2
10008e10:	2172      	movs	r1, #114	; 0x72
10008e12:	2069      	movs	r0, #105	; 0x69
10008e14:	4da9      	ldr	r5, [pc, #676]	; (100090bc <sms_mpu_calibrate+0x358>)
10008e16:	47a8      	blx	r5

	// At end of sample accumulation, turn off FIFO sensor read
	writeByte(MPU9250_ADDRESS, FIFO_EN, 0x00);        // Disable gyro and accelerometer sensors for FIFO
	readBytes(MPU9250_ADDRESS, FIFO_COUNTH, 2, &data); // read FIFO sample count
	fifo_count = ((uint16_t)data[0] << 8) | data[1];
	packet_count = fifo_count/12;// How many sets of full gyro and accelerometer data for averaging
10008e18:	7820      	ldrb	r0, [r4, #0]
10008e1a:	0200      	lsls	r0, r0, #8
10008e1c:	7863      	ldrb	r3, [r4, #1]
10008e1e:	4318      	orrs	r0, r3
10008e20:	210c      	movs	r1, #12
10008e22:	4ba7      	ldr	r3, [pc, #668]	; (100090c0 <sms_mpu_calibrate+0x35c>)
10008e24:	4798      	blx	r3
10008e26:	b283      	uxth	r3, r0
10008e28:	9302      	str	r3, [sp, #8]
	
	for (ii = 0; ii < packet_count; ii++) {
10008e2a:	2b00      	cmp	r3, #0
10008e2c:	d042      	beq.n	10008eb4 <sms_mpu_calibrate+0x150>
10008e2e:	2300      	movs	r3, #0
10008e30:	4698      	mov	r8, r3
10008e32:	2700      	movs	r7, #0
10008e34:	469b      	mov	fp, r3
10008e36:	469a      	mov	sl, r3
10008e38:	4699      	mov	r9, r3
10008e3a:	2500      	movs	r5, #0
	return data[0];
}

void readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest)
{
	sms_i2c_master_read(address, subAddress, count, dest);
10008e3c:	ac0b      	add	r4, sp, #44	; 0x2c
10008e3e:	9301      	str	r3, [sp, #4]
10008e40:	0023      	movs	r3, r4
10008e42:	220c      	movs	r2, #12
10008e44:	2174      	movs	r1, #116	; 0x74
10008e46:	2069      	movs	r0, #105	; 0x69
10008e48:	4e9c      	ldr	r6, [pc, #624]	; (100090bc <sms_mpu_calibrate+0x358>)
10008e4a:	47b0      	blx	r6
		accel_temp[2] = (int16_t) (((int16_t)data[4] << 8) | data[5]  ) ;
		gyro_temp[0]  = (int16_t) (((int16_t)data[6] << 8) | data[7]  ) ;
		gyro_temp[1]  = (int16_t) (((int16_t)data[8] << 8) | data[9]  ) ;
		gyro_temp[2]  = (int16_t) (((int16_t)data[10] << 8) | data[11]) ;
		
		accel_bias[0] += (int32_t) accel_temp[0]; // Sum individual signed 16-bit biases to get accumulated signed 32-bit biases
10008e4c:	7823      	ldrb	r3, [r4, #0]
10008e4e:	021b      	lsls	r3, r3, #8
10008e50:	7862      	ldrb	r2, [r4, #1]
10008e52:	4313      	orrs	r3, r2
10008e54:	b21b      	sxth	r3, r3
10008e56:	9a01      	ldr	r2, [sp, #4]
10008e58:	4694      	mov	ip, r2
10008e5a:	449c      	add	ip, r3
10008e5c:	4663      	mov	r3, ip
10008e5e:	9301      	str	r3, [sp, #4]
		accel_bias[1] += (int32_t) accel_temp[1];
10008e60:	78a3      	ldrb	r3, [r4, #2]
10008e62:	021b      	lsls	r3, r3, #8
10008e64:	78e2      	ldrb	r2, [r4, #3]
10008e66:	4313      	orrs	r3, r2
10008e68:	b21b      	sxth	r3, r3
10008e6a:	18ff      	adds	r7, r7, r3
		accel_bias[2] += (int32_t) accel_temp[2];
10008e6c:	7923      	ldrb	r3, [r4, #4]
10008e6e:	021b      	lsls	r3, r3, #8
10008e70:	7962      	ldrb	r2, [r4, #5]
10008e72:	4313      	orrs	r3, r2
10008e74:	b21b      	sxth	r3, r3
10008e76:	4499      	add	r9, r3
		gyro_bias[0]  += (int32_t) gyro_temp[0];
10008e78:	79a3      	ldrb	r3, [r4, #6]
10008e7a:	021b      	lsls	r3, r3, #8
10008e7c:	79e2      	ldrb	r2, [r4, #7]
10008e7e:	4313      	orrs	r3, r2
10008e80:	b21b      	sxth	r3, r3
10008e82:	4498      	add	r8, r3
		gyro_bias[1]  += (int32_t) gyro_temp[1];
10008e84:	7a23      	ldrb	r3, [r4, #8]
10008e86:	021b      	lsls	r3, r3, #8
10008e88:	7a62      	ldrb	r2, [r4, #9]
10008e8a:	4313      	orrs	r3, r2
10008e8c:	b21b      	sxth	r3, r3
10008e8e:	449a      	add	sl, r3
		gyro_bias[2]  += (int32_t) gyro_temp[2];
10008e90:	7aa3      	ldrb	r3, [r4, #10]
10008e92:	021b      	lsls	r3, r3, #8
10008e94:	7ae2      	ldrb	r2, [r4, #11]
10008e96:	4313      	orrs	r3, r2
10008e98:	b21b      	sxth	r3, r3
10008e9a:	449b      	add	fp, r3
	writeByte(MPU9250_ADDRESS, FIFO_EN, 0x00);        // Disable gyro and accelerometer sensors for FIFO
	readBytes(MPU9250_ADDRESS, FIFO_COUNTH, 2, &data); // read FIFO sample count
	fifo_count = ((uint16_t)data[0] << 8) | data[1];
	packet_count = fifo_count/12;// How many sets of full gyro and accelerometer data for averaging
	
	for (ii = 0; ii < packet_count; ii++) {
10008e9c:	3501      	adds	r5, #1
10008e9e:	b2ad      	uxth	r5, r5
10008ea0:	9b02      	ldr	r3, [sp, #8]
10008ea2:	42ab      	cmp	r3, r5
10008ea4:	d1cc      	bne.n	10008e40 <sms_mpu_calibrate+0xdc>
10008ea6:	4653      	mov	r3, sl
10008ea8:	46ba      	mov	sl, r7
10008eaa:	465a      	mov	r2, fp
10008eac:	46e3      	mov	fp, ip
10008eae:	0016      	movs	r6, r2
10008eb0:	001f      	movs	r7, r3
10008eb2:	e006      	b.n	10008ec2 <sms_mpu_calibrate+0x15e>

void sms_mpu_calibrate(float *dest1, float *dest2)
{
	uint8_t data[12]; // data array to hold accelerometer and gyro x, y, z, data
	uint16_t ii, packet_count, fifo_count;
	int32_t gyro_bias[3]  = {0, 0, 0};
10008eb4:	2300      	movs	r3, #0
10008eb6:	4698      	mov	r8, r3
10008eb8:	2700      	movs	r7, #0
10008eba:	2600      	movs	r6, #0
	int32_t accel_bias[3] = {0, 0, 0};
10008ebc:	469b      	mov	fp, r3
10008ebe:	469a      	mov	sl, r3
10008ec0:	4699      	mov	r9, r3
		gyro_bias[0]  += (int32_t) gyro_temp[0];
		gyro_bias[1]  += (int32_t) gyro_temp[1];
		gyro_bias[2]  += (int32_t) gyro_temp[2];
		
	}
	accel_bias[0] /= (int32_t) packet_count; // Normalize sums to get average count biases
10008ec2:	4c80      	ldr	r4, [pc, #512]	; (100090c4 <sms_mpu_calibrate+0x360>)
10008ec4:	9902      	ldr	r1, [sp, #8]
10008ec6:	4658      	mov	r0, fp
10008ec8:	47a0      	blx	r4
10008eca:	0005      	movs	r5, r0
	accel_bias[1] /= (int32_t) packet_count;
10008ecc:	9b02      	ldr	r3, [sp, #8]
10008ece:	469b      	mov	fp, r3
10008ed0:	0019      	movs	r1, r3
10008ed2:	4650      	mov	r0, sl
10008ed4:	47a0      	blx	r4
10008ed6:	4682      	mov	sl, r0
	accel_bias[2] /= (int32_t) packet_count;
10008ed8:	4659      	mov	r1, fp
10008eda:	4648      	mov	r0, r9
10008edc:	47a0      	blx	r4
10008ede:	4681      	mov	r9, r0
	gyro_bias[0]  /= (int32_t) packet_count;
10008ee0:	4659      	mov	r1, fp
10008ee2:	4640      	mov	r0, r8
10008ee4:	47a0      	blx	r4
10008ee6:	9001      	str	r0, [sp, #4]
	gyro_bias[1]  /= (int32_t) packet_count;
10008ee8:	4659      	mov	r1, fp
10008eea:	0038      	movs	r0, r7
10008eec:	47a0      	blx	r4
10008eee:	9002      	str	r0, [sp, #8]
	gyro_bias[2]  /= (int32_t) packet_count;
10008ef0:	4659      	mov	r1, fp
10008ef2:	0030      	movs	r0, r6
10008ef4:	47a0      	blx	r4
10008ef6:	9004      	str	r0, [sp, #16]
	//DBG_LOG("Average biases: %d, %d, %d", gyro_bias[0], gyro_bias[1], gyro_bias[2]);
	
	if(accel_bias[2] > 0L) {
10008ef8:	464b      	mov	r3, r9
10008efa:	2b00      	cmp	r3, #0
10008efc:	dd03      	ble.n	10008f06 <sms_mpu_calibrate+0x1a2>
		accel_bias[2] -= (int32_t) accelsensitivity;
10008efe:	4b72      	ldr	r3, [pc, #456]	; (100090c8 <sms_mpu_calibrate+0x364>)
10008f00:	469c      	mov	ip, r3
10008f02:	44e1      	add	r9, ip
10008f04:	e003      	b.n	10008f0e <sms_mpu_calibrate+0x1aa>
	}  // Remove gravity from the z-axis accelerometer bias calculation
	else {
		accel_bias[2] += (int32_t) accelsensitivity;
10008f06:	2380      	movs	r3, #128	; 0x80
10008f08:	01db      	lsls	r3, r3, #7
10008f0a:	469c      	mov	ip, r3
10008f0c:	44e1      	add	r9, ip
	}
	
	// Construct the gyro biases for push to the hardware gyro bias registers, which are reset to zero upon device startup
	data[0] = (-gyro_bias[0]/4  >> 8) & 0xFF; // Divide by 4 to get 32.9 LSB per deg/s to conform to expected bias input format
10008f0e:	9b01      	ldr	r3, [sp, #4]
10008f10:	4259      	negs	r1, r3
10008f12:	17ca      	asrs	r2, r1, #31
10008f14:	2303      	movs	r3, #3
10008f16:	401a      	ands	r2, r3
10008f18:	1852      	adds	r2, r2, r1
10008f1a:	1091      	asrs	r1, r2, #2
10008f1c:	1292      	asrs	r2, r2, #10
10008f1e:	b2d2      	uxtb	r2, r2
10008f20:	ac0b      	add	r4, sp, #44	; 0x2c
10008f22:	7022      	strb	r2, [r4, #0]
	data[1] = (-gyro_bias[0]/4)       & 0xFF; // Biases are additive, so change sign on calculated average gyro biases
10008f24:	7061      	strb	r1, [r4, #1]
	data[2] = (-gyro_bias[1]/4  >> 8) & 0xFF;
10008f26:	9902      	ldr	r1, [sp, #8]
10008f28:	4248      	negs	r0, r1
10008f2a:	17c1      	asrs	r1, r0, #31
10008f2c:	4019      	ands	r1, r3
10008f2e:	1809      	adds	r1, r1, r0
10008f30:	1088      	asrs	r0, r1, #2
10008f32:	1289      	asrs	r1, r1, #10
10008f34:	70a1      	strb	r1, [r4, #2]
	data[3] = (-gyro_bias[1]/4)       & 0xFF;
10008f36:	70e0      	strb	r0, [r4, #3]
	data[4] = (-gyro_bias[2]/4  >> 8) & 0xFF;
10008f38:	9e04      	ldr	r6, [sp, #16]
10008f3a:	4271      	negs	r1, r6
10008f3c:	17c8      	asrs	r0, r1, #31
10008f3e:	4003      	ands	r3, r0
10008f40:	185b      	adds	r3, r3, r1
10008f42:	1099      	asrs	r1, r3, #2
10008f44:	129b      	asrs	r3, r3, #10
10008f46:	7123      	strb	r3, [r4, #4]
	data[5] = (-gyro_bias[2]/4)       & 0xFF;
10008f48:	7161      	strb	r1, [r4, #5]
	
	// Push gyro biases to hardware registers
	writeByte(MPU9250_ADDRESS, XG_OFFSET_H, data[0]);
10008f4a:	2113      	movs	r1, #19
10008f4c:	2069      	movs	r0, #105	; 0x69
10008f4e:	4e59      	ldr	r6, [pc, #356]	; (100090b4 <sms_mpu_calibrate+0x350>)
10008f50:	47b0      	blx	r6
	writeByte(MPU9250_ADDRESS, XG_OFFSET_L, data[1]);
10008f52:	7862      	ldrb	r2, [r4, #1]
10008f54:	2114      	movs	r1, #20
10008f56:	2069      	movs	r0, #105	; 0x69
10008f58:	47b0      	blx	r6
	writeByte(MPU9250_ADDRESS, YG_OFFSET_H, data[2]);
10008f5a:	78a2      	ldrb	r2, [r4, #2]
10008f5c:	2115      	movs	r1, #21
10008f5e:	2069      	movs	r0, #105	; 0x69
10008f60:	47b0      	blx	r6
	writeByte(MPU9250_ADDRESS, YG_OFFSET_L, data[3]);
10008f62:	78e2      	ldrb	r2, [r4, #3]
10008f64:	2116      	movs	r1, #22
10008f66:	2069      	movs	r0, #105	; 0x69
10008f68:	47b0      	blx	r6
	writeByte(MPU9250_ADDRESS, ZG_OFFSET_H, data[4]);
10008f6a:	7922      	ldrb	r2, [r4, #4]
10008f6c:	2117      	movs	r1, #23
10008f6e:	2069      	movs	r0, #105	; 0x69
10008f70:	47b0      	blx	r6
	writeByte(MPU9250_ADDRESS, ZG_OFFSET_L, data[5]);
10008f72:	7962      	ldrb	r2, [r4, #5]
10008f74:	2118      	movs	r1, #24
10008f76:	2069      	movs	r0, #105	; 0x69
10008f78:	47b0      	blx	r6
	
	// Output scaled gyro biases for display in the main program
	dest1[0] = (float)((float)gyro_bias[0]/(float)gyrosensitivity);
10008f7a:	4f54      	ldr	r7, [pc, #336]	; (100090cc <sms_mpu_calibrate+0x368>)
10008f7c:	9801      	ldr	r0, [sp, #4]
10008f7e:	47b8      	blx	r7
10008f80:	4e53      	ldr	r6, [pc, #332]	; (100090d0 <sms_mpu_calibrate+0x36c>)
10008f82:	4954      	ldr	r1, [pc, #336]	; (100090d4 <sms_mpu_calibrate+0x370>)
10008f84:	47b0      	blx	r6
10008f86:	9b03      	ldr	r3, [sp, #12]
10008f88:	6018      	str	r0, [r3, #0]
	dest1[1] = (float)((float)gyro_bias[1]/(float)gyrosensitivity);
10008f8a:	9802      	ldr	r0, [sp, #8]
10008f8c:	47b8      	blx	r7
10008f8e:	4951      	ldr	r1, [pc, #324]	; (100090d4 <sms_mpu_calibrate+0x370>)
10008f90:	47b0      	blx	r6
10008f92:	9b03      	ldr	r3, [sp, #12]
10008f94:	6058      	str	r0, [r3, #4]
	dest1[2] = (float)((float)gyro_bias[2]/(float)gyrosensitivity);
10008f96:	9804      	ldr	r0, [sp, #16]
10008f98:	47b8      	blx	r7
10008f9a:	494e      	ldr	r1, [pc, #312]	; (100090d4 <sms_mpu_calibrate+0x370>)
10008f9c:	47b0      	blx	r6
10008f9e:	9b03      	ldr	r3, [sp, #12]
10008fa0:	6098      	str	r0, [r3, #8]
	return data[0];
}

void readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest)
{
	sms_i2c_master_read(address, subAddress, count, dest);
10008fa2:	0023      	movs	r3, r4
10008fa4:	2202      	movs	r2, #2
10008fa6:	2177      	movs	r1, #119	; 0x77
10008fa8:	2069      	movs	r0, #105	; 0x69
10008faa:	4e44      	ldr	r6, [pc, #272]	; (100090bc <sms_mpu_calibrate+0x358>)
10008fac:	46b0      	mov	r8, r6
10008fae:	47b0      	blx	r6
	// compensation calculations. Accelerometer bias registers expect bias input as 2048 LSB per g, so that
	// the accelerometer biases calculated above must be divided by 8.

	int32_t accel_bias_reg[3] = {0, 0, 0}; // A place to hold the factory accelerometer trim biases
	readBytes(MPU9250_ADDRESS, XA_OFFSET_H, 2, &data); // Read factory accelerometer trim values
	accel_bias_reg[0] = (int32_t) (((int16_t)data[0] << 8) | data[1]);
10008fb0:	7827      	ldrb	r7, [r4, #0]
10008fb2:	023f      	lsls	r7, r7, #8
10008fb4:	7863      	ldrb	r3, [r4, #1]
10008fb6:	431f      	orrs	r7, r3
10008fb8:	9708      	str	r7, [sp, #32]
	return data[0];
}

void readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest)
{
	sms_i2c_master_read(address, subAddress, count, dest);
10008fba:	0023      	movs	r3, r4
10008fbc:	2202      	movs	r2, #2
10008fbe:	217a      	movs	r1, #122	; 0x7a
10008fc0:	2069      	movs	r0, #105	; 0x69
10008fc2:	47b0      	blx	r6

	int32_t accel_bias_reg[3] = {0, 0, 0}; // A place to hold the factory accelerometer trim biases
	readBytes(MPU9250_ADDRESS, XA_OFFSET_H, 2, &data); // Read factory accelerometer trim values
	accel_bias_reg[0] = (int32_t) (((int16_t)data[0] << 8) | data[1]);
	readBytes(MPU9250_ADDRESS, YA_OFFSET_H, 2, &data);
	accel_bias_reg[1] = (int32_t) (((int16_t)data[0] << 8) | data[1]);
10008fc4:	7826      	ldrb	r6, [r4, #0]
10008fc6:	0236      	lsls	r6, r6, #8
10008fc8:	7863      	ldrb	r3, [r4, #1]
10008fca:	431e      	orrs	r6, r3
10008fcc:	9609      	str	r6, [sp, #36]	; 0x24
	return data[0];
}

void readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest)
{
	sms_i2c_master_read(address, subAddress, count, dest);
10008fce:	0023      	movs	r3, r4
10008fd0:	2202      	movs	r2, #2
10008fd2:	217d      	movs	r1, #125	; 0x7d
10008fd4:	2069      	movs	r0, #105	; 0x69
10008fd6:	47c0      	blx	r8
	readBytes(MPU9250_ADDRESS, XA_OFFSET_H, 2, &data); // Read factory accelerometer trim values
	accel_bias_reg[0] = (int32_t) (((int16_t)data[0] << 8) | data[1]);
	readBytes(MPU9250_ADDRESS, YA_OFFSET_H, 2, &data);
	accel_bias_reg[1] = (int32_t) (((int16_t)data[0] << 8) | data[1]);
	readBytes(MPU9250_ADDRESS, ZA_OFFSET_H, 2, &data);
	accel_bias_reg[2] = (int32_t) (((int16_t)data[0] << 8) | data[1]);
10008fd8:	7823      	ldrb	r3, [r4, #0]
10008fda:	021b      	lsls	r3, r3, #8
10008fdc:	7861      	ldrb	r1, [r4, #1]
10008fde:	4319      	orrs	r1, r3
10008fe0:	910a      	str	r1, [sp, #40]	; 0x28
	
	uint32_t mask = 1uL; // Define mask for temperature compensation bit 0 of lower byte of accelerometer bias registers
	uint8_t mask_bit[3] = {0, 0, 0}; // Define array to hold mask bit for each accelerometer bias axis
10008fe2:	ab07      	add	r3, sp, #28
10008fe4:	2200      	movs	r2, #0
10008fe6:	701a      	strb	r2, [r3, #0]
10008fe8:	705a      	strb	r2, [r3, #1]
10008fea:	709a      	strb	r2, [r3, #2]
10008fec:	2300      	movs	r3, #0
	
	for(ii = 0; ii < 3; ii++) {
		if((accel_bias_reg[ii] & mask)) mask_bit[ii] = 0x01; // If temperature compensation bit is set, record that fact in mask_bit
10008fee:	2401      	movs	r4, #1
10008ff0:	009a      	lsls	r2, r3, #2
10008ff2:	a808      	add	r0, sp, #32
10008ff4:	5812      	ldr	r2, [r2, r0]
10008ff6:	4222      	tst	r2, r4
10008ff8:	d001      	beq.n	10008ffe <sms_mpu_calibrate+0x29a>
10008ffa:	aa07      	add	r2, sp, #28
10008ffc:	549c      	strb	r4, [r3, r2]
10008ffe:	3301      	adds	r3, #1
	accel_bias_reg[2] = (int32_t) (((int16_t)data[0] << 8) | data[1]);
	
	uint32_t mask = 1uL; // Define mask for temperature compensation bit 0 of lower byte of accelerometer bias registers
	uint8_t mask_bit[3] = {0, 0, 0}; // Define array to hold mask bit for each accelerometer bias axis
	
	for(ii = 0; ii < 3; ii++) {
10009000:	2b03      	cmp	r3, #3
10009002:	d1f5      	bne.n	10008ff0 <sms_mpu_calibrate+0x28c>
		if((accel_bias_reg[ii] & mask)) mask_bit[ii] = 0x01; // If temperature compensation bit is set, record that fact in mask_bit
	}
	
	// Construct total accelerometer bias, including calculated average accelerometer bias from above
	accel_bias_reg[0] -= (accel_bias[0]/8); // Subtract calculated averaged accelerometer bias scaled to 2048 LSB/g (16 g full scale)
10009004:	17ea      	asrs	r2, r5, #31
10009006:	3304      	adds	r3, #4
10009008:	401a      	ands	r2, r3
1000900a:	1952      	adds	r2, r2, r5
1000900c:	10d2      	asrs	r2, r2, #3
1000900e:	1abf      	subs	r7, r7, r2
	accel_bias_reg[1] -= (accel_bias[1]/8);
10009010:	4652      	mov	r2, sl
10009012:	17d0      	asrs	r0, r2, #31
10009014:	4018      	ands	r0, r3
10009016:	4450      	add	r0, sl
10009018:	10c0      	asrs	r0, r0, #3
1000901a:	1a36      	subs	r6, r6, r0
	accel_bias_reg[2] -= (accel_bias[2]/8);
1000901c:	464a      	mov	r2, r9
1000901e:	17d2      	asrs	r2, r2, #31
10009020:	4013      	ands	r3, r2
10009022:	444b      	add	r3, r9
10009024:	10da      	asrs	r2, r3, #3
10009026:	1a8b      	subs	r3, r1, r2
	
	data[0] = (accel_bias_reg[0] >> 8) & 0xFF;
10009028:	123a      	asrs	r2, r7, #8
1000902a:	b2d2      	uxtb	r2, r2
1000902c:	ac0b      	add	r4, sp, #44	; 0x2c
1000902e:	7022      	strb	r2, [r4, #0]
	data[1] = (accel_bias_reg[0])      & 0xFF;
	data[1] = data[1] | mask_bit[0]; // preserve temperature compensation bit when writing back to accelerometer bias registers
10009030:	a907      	add	r1, sp, #28
10009032:	7808      	ldrb	r0, [r1, #0]
10009034:	4307      	orrs	r7, r0
10009036:	7067      	strb	r7, [r4, #1]
	data[2] = (accel_bias_reg[1] >> 8) & 0xFF;
10009038:	1230      	asrs	r0, r6, #8
1000903a:	70a0      	strb	r0, [r4, #2]
	data[3] = (accel_bias_reg[1])      & 0xFF;
	data[3] = data[3] | mask_bit[1]; // preserve temperature compensation bit when writing back to accelerometer bias registers
1000903c:	7848      	ldrb	r0, [r1, #1]
1000903e:	4306      	orrs	r6, r0
10009040:	70e6      	strb	r6, [r4, #3]
	data[4] = (accel_bias_reg[2] >> 8) & 0xFF;
10009042:	1218      	asrs	r0, r3, #8
10009044:	7120      	strb	r0, [r4, #4]
	data[5] = (accel_bias_reg[2])      & 0xFF;
	data[5] = data[5] | mask_bit[2]; // preserve temperature compensation bit when writing back to accelerometer bias registers
10009046:	7889      	ldrb	r1, [r1, #2]
10009048:	430b      	orrs	r3, r1
1000904a:	7163      	strb	r3, [r4, #5]
	
	// Apparently this is not working for the acceleration biases in the MPU-9250
	// Are we handling the temperature correction bit properly?
	// Push accelerometer biases to hardware registers
	writeByte(MPU9250_ADDRESS, XA_OFFSET_H, data[0]);
1000904c:	2177      	movs	r1, #119	; 0x77
1000904e:	2069      	movs	r0, #105	; 0x69
10009050:	4e18      	ldr	r6, [pc, #96]	; (100090b4 <sms_mpu_calibrate+0x350>)
10009052:	47b0      	blx	r6
	writeByte(MPU9250_ADDRESS, XA_OFFSET_L, data[1]);
10009054:	7862      	ldrb	r2, [r4, #1]
10009056:	2178      	movs	r1, #120	; 0x78
10009058:	2069      	movs	r0, #105	; 0x69
1000905a:	47b0      	blx	r6
	writeByte(MPU9250_ADDRESS, YA_OFFSET_H, data[2]);
1000905c:	78a2      	ldrb	r2, [r4, #2]
1000905e:	217a      	movs	r1, #122	; 0x7a
10009060:	2069      	movs	r0, #105	; 0x69
10009062:	47b0      	blx	r6
	writeByte(MPU9250_ADDRESS, YA_OFFSET_L, data[3]);
10009064:	78e2      	ldrb	r2, [r4, #3]
10009066:	217b      	movs	r1, #123	; 0x7b
10009068:	2069      	movs	r0, #105	; 0x69
1000906a:	47b0      	blx	r6
	writeByte(MPU9250_ADDRESS, ZA_OFFSET_H, data[4]);
1000906c:	7922      	ldrb	r2, [r4, #4]
1000906e:	217d      	movs	r1, #125	; 0x7d
10009070:	2069      	movs	r0, #105	; 0x69
10009072:	47b0      	blx	r6
	writeByte(MPU9250_ADDRESS, ZA_OFFSET_L, data[5]);
10009074:	7962      	ldrb	r2, [r4, #5]
10009076:	217e      	movs	r1, #126	; 0x7e
10009078:	2069      	movs	r0, #105	; 0x69
1000907a:	47b0      	blx	r6

	// Output scaled accelerometer biases for display in the main program
	dest2[0] = (float)accel_bias[0]/(float)accelsensitivity;
1000907c:	4e13      	ldr	r6, [pc, #76]	; (100090cc <sms_mpu_calibrate+0x368>)
1000907e:	0028      	movs	r0, r5
10009080:	47b0      	blx	r6
10009082:	4c15      	ldr	r4, [pc, #84]	; (100090d8 <sms_mpu_calibrate+0x374>)
10009084:	21e2      	movs	r1, #226	; 0xe2
10009086:	0589      	lsls	r1, r1, #22
10009088:	47a0      	blx	r4
1000908a:	9d05      	ldr	r5, [sp, #20]
1000908c:	6028      	str	r0, [r5, #0]
	dest2[1] = (float)accel_bias[1]/(float)accelsensitivity;
1000908e:	4650      	mov	r0, sl
10009090:	47b0      	blx	r6
10009092:	21e2      	movs	r1, #226	; 0xe2
10009094:	0589      	lsls	r1, r1, #22
10009096:	47a0      	blx	r4
10009098:	6068      	str	r0, [r5, #4]
	dest2[2] = (float)accel_bias[2]/(float)accelsensitivity;
1000909a:	4648      	mov	r0, r9
1000909c:	47b0      	blx	r6
1000909e:	21e2      	movs	r1, #226	; 0xe2
100090a0:	0589      	lsls	r1, r1, #22
100090a2:	47a0      	blx	r4
100090a4:	60a8      	str	r0, [r5, #8]
	//DBG_LOG("accel_biases: %3.3f, %3.3f, %3.3f", accel_bias[0], accel_bias[1], accel_bias[2]);
	//DBG_LOG("dest2: %3.3f, %3.3f, %3.3f", dest2[0], dest2[1], dest2[2]);
}
100090a6:	b00f      	add	sp, #60	; 0x3c
100090a8:	bc3c      	pop	{r2, r3, r4, r5}
100090aa:	4690      	mov	r8, r2
100090ac:	4699      	mov	r9, r3
100090ae:	46a2      	mov	sl, r4
100090b0:	46ab      	mov	fp, r5
100090b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
100090b4:	10008d4d 	.word	0x10008d4d
100090b8:	10009c7d 	.word	0x10009c7d
100090bc:	10008bd5 	.word	0x10008bd5
100090c0:	100146a5 	.word	0x100146a5
100090c4:	100147b9 	.word	0x100147b9
100090c8:	ffffc000 	.word	0xffffc000
100090cc:	10014efd 	.word	0x10014efd
100090d0:	10014aa1 	.word	0x10014aa1
100090d4:	43030000 	.word	0x43030000
100090d8:	10014cd5 	.word	0x10014cd5

100090dc <sms_mpu_comp_initialize>:
	writeByte(MPU9250_ADDRESS, INT_ENABLE, 0x01);  // Enable data ready (bit 0) interrupt
	delay_ms(100);
}

void sms_mpu_comp_initialize(float *destination)
{
100090dc:	b5f0      	push	{r4, r5, r6, r7, lr}
100090de:	465f      	mov	r7, fp
100090e0:	4656      	mov	r6, sl
100090e2:	464d      	mov	r5, r9
100090e4:	4644      	mov	r4, r8
100090e6:	b4f0      	push	{r4, r5, r6, r7}
100090e8:	b083      	sub	sp, #12
100090ea:	0007      	movs	r7, r0
	uint8_t m_scale = MFS_16BITS;	// Choose either 14-bit or 16-bit magnetometer resolution
	uint8_t m_mode = 0x02;	// 2 for 8 Hz, 6 for 100 Hz continuous magnetometer data read
	// First extract the factory calibration for each magnetometer axis
	uint8_t data[3];  // x/y/z gyro calibration data stored here
	writeByte(AK8963_ADDRESS, AK8963_CNTL, 0x00); // Power down magnetometer
100090ec:	2200      	movs	r2, #0
100090ee:	210a      	movs	r1, #10
100090f0:	200c      	movs	r0, #12
100090f2:	4d2b      	ldr	r5, [pc, #172]	; (100091a0 <sms_mpu_comp_initialize+0xc4>)
100090f4:	47a8      	blx	r5
	delay_ms(10);
100090f6:	200a      	movs	r0, #10
100090f8:	4b2a      	ldr	r3, [pc, #168]	; (100091a4 <sms_mpu_comp_initialize+0xc8>)
100090fa:	4798      	blx	r3
	writeByte(AK8963_ADDRESS, AK8963_CNTL, 0x0F); // Enter Fuse ROM access mode
100090fc:	220f      	movs	r2, #15
100090fe:	210a      	movs	r1, #10
10009100:	200c      	movs	r0, #12
10009102:	47a8      	blx	r5
	delay_ms(10);
10009104:	200a      	movs	r0, #10
10009106:	4b27      	ldr	r3, [pc, #156]	; (100091a4 <sms_mpu_comp_initialize+0xc8>)
10009108:	4798      	blx	r3
	return data[0];
}

void readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest)
{
	sms_i2c_master_read(address, subAddress, count, dest);
1000910a:	ae01      	add	r6, sp, #4
1000910c:	0033      	movs	r3, r6
1000910e:	2203      	movs	r2, #3
10009110:	2110      	movs	r1, #16
10009112:	200c      	movs	r0, #12
10009114:	4c24      	ldr	r4, [pc, #144]	; (100091a8 <sms_mpu_comp_initialize+0xcc>)
10009116:	47a0      	blx	r4
	writeByte(AK8963_ADDRESS, AK8963_CNTL, 0x00); // Power down magnetometer
	delay_ms(10);
	writeByte(AK8963_ADDRESS, AK8963_CNTL, 0x0F); // Enter Fuse ROM access mode
	delay_ms(10);
	readBytes(AK8963_ADDRESS, AK8963_ASAX, 3, &data);  // Read the x-, y-, and z-axis calibration values
	destination[0] =  (float)(data[0] - 128)/256. + 1.;   // Return x-axis sensitivity adjustment values, etc.
10009118:	7830      	ldrb	r0, [r6, #0]
1000911a:	3880      	subs	r0, #128	; 0x80
1000911c:	4b23      	ldr	r3, [pc, #140]	; (100091ac <sms_mpu_comp_initialize+0xd0>)
1000911e:	469b      	mov	fp, r3
10009120:	4798      	blx	r3
10009122:	4b23      	ldr	r3, [pc, #140]	; (100091b0 <sms_mpu_comp_initialize+0xd4>)
10009124:	469a      	mov	sl, r3
10009126:	4798      	blx	r3
10009128:	4b22      	ldr	r3, [pc, #136]	; (100091b4 <sms_mpu_comp_initialize+0xd8>)
1000912a:	4699      	mov	r9, r3
1000912c:	2200      	movs	r2, #0
1000912e:	4b22      	ldr	r3, [pc, #136]	; (100091b8 <sms_mpu_comp_initialize+0xdc>)
10009130:	47c8      	blx	r9
10009132:	4b22      	ldr	r3, [pc, #136]	; (100091bc <sms_mpu_comp_initialize+0xe0>)
10009134:	4698      	mov	r8, r3
10009136:	2200      	movs	r2, #0
10009138:	4b21      	ldr	r3, [pc, #132]	; (100091c0 <sms_mpu_comp_initialize+0xe4>)
1000913a:	47c0      	blx	r8
1000913c:	4b21      	ldr	r3, [pc, #132]	; (100091c4 <sms_mpu_comp_initialize+0xe8>)
1000913e:	4798      	blx	r3
10009140:	6038      	str	r0, [r7, #0]
	destination[1] =  (float)(data[1] - 128)/256. + 1.;
10009142:	7870      	ldrb	r0, [r6, #1]
10009144:	3880      	subs	r0, #128	; 0x80
10009146:	47d8      	blx	fp
10009148:	47d0      	blx	sl
1000914a:	2200      	movs	r2, #0
1000914c:	4b1a      	ldr	r3, [pc, #104]	; (100091b8 <sms_mpu_comp_initialize+0xdc>)
1000914e:	47c8      	blx	r9
10009150:	2200      	movs	r2, #0
10009152:	4b1b      	ldr	r3, [pc, #108]	; (100091c0 <sms_mpu_comp_initialize+0xe4>)
10009154:	47c0      	blx	r8
10009156:	4b1b      	ldr	r3, [pc, #108]	; (100091c4 <sms_mpu_comp_initialize+0xe8>)
10009158:	4798      	blx	r3
1000915a:	6078      	str	r0, [r7, #4]
	destination[2] =  (float)(data[2] - 128)/256. + 1.;
1000915c:	78b0      	ldrb	r0, [r6, #2]
1000915e:	3880      	subs	r0, #128	; 0x80
10009160:	47d8      	blx	fp
10009162:	47d0      	blx	sl
10009164:	2200      	movs	r2, #0
10009166:	4b14      	ldr	r3, [pc, #80]	; (100091b8 <sms_mpu_comp_initialize+0xdc>)
10009168:	47c8      	blx	r9
1000916a:	2200      	movs	r2, #0
1000916c:	4b14      	ldr	r3, [pc, #80]	; (100091c0 <sms_mpu_comp_initialize+0xe4>)
1000916e:	47c0      	blx	r8
10009170:	4b14      	ldr	r3, [pc, #80]	; (100091c4 <sms_mpu_comp_initialize+0xe8>)
10009172:	4798      	blx	r3
10009174:	60b8      	str	r0, [r7, #8]
	writeByte(AK8963_ADDRESS, AK8963_CNTL, 0x00); // Power down magnetometer
10009176:	2200      	movs	r2, #0
10009178:	210a      	movs	r1, #10
1000917a:	200c      	movs	r0, #12
1000917c:	47a8      	blx	r5
	delay_ms(10);
1000917e:	200a      	movs	r0, #10
10009180:	4b08      	ldr	r3, [pc, #32]	; (100091a4 <sms_mpu_comp_initialize+0xc8>)
10009182:	4798      	blx	r3
	// Configure the magnetometer for continuous read and highest resolution
	// set Mscale bit 4 to 1 (0) to enable 16 (14) bit resolution in CNTL register,
	// and enable continuous mode data acquisition Mmode (bits [3:0]), 0010 for 8 Hz and 0110 for 100 Hz sample rates
	writeByte(AK8963_ADDRESS, AK8963_CNTL, m_scale << 4 | m_mode); // Set magnetometer data resolution and sample ODR
10009184:	2212      	movs	r2, #18
10009186:	210a      	movs	r1, #10
10009188:	200c      	movs	r0, #12
1000918a:	47a8      	blx	r5
	delay_ms(10);
1000918c:	200a      	movs	r0, #10
1000918e:	4b05      	ldr	r3, [pc, #20]	; (100091a4 <sms_mpu_comp_initialize+0xc8>)
10009190:	4798      	blx	r3
}
10009192:	b003      	add	sp, #12
10009194:	bc3c      	pop	{r2, r3, r4, r5}
10009196:	4690      	mov	r8, r2
10009198:	4699      	mov	r9, r3
1000919a:	46a2      	mov	sl, r4
1000919c:	46ab      	mov	fp, r5
1000919e:	bdf0      	pop	{r4, r5, r6, r7, pc}
100091a0:	10008d4d 	.word	0x10008d4d
100091a4:	10009c7d 	.word	0x10009c7d
100091a8:	10008bd5 	.word	0x10008bd5
100091ac:	10014efd 	.word	0x10014efd
100091b0:	10016be5 	.word	0x10016be5
100091b4:	10015ea9 	.word	0x10015ea9
100091b8:	3f700000 	.word	0x3f700000
100091bc:	10015009 	.word	0x10015009
100091c0:	3ff00000 	.word	0x3ff00000
100091c4:	10016c8d 	.word	0x10016c8d

100091c8 <readByte>:
{
	sms_i2c_master_write(address, subAddress, 1, &data);
}

uint8_t readByte(uint8_t address, uint8_t subAddress)
{
100091c8:	b530      	push	{r4, r5, lr}
100091ca:	b083      	sub	sp, #12
	uint8_t data[1];
	sms_i2c_master_read(address, subAddress, 1, data);
100091cc:	ac01      	add	r4, sp, #4
100091ce:	0023      	movs	r3, r4
100091d0:	2201      	movs	r2, #1
100091d2:	4d02      	ldr	r5, [pc, #8]	; (100091dc <readByte+0x14>)
100091d4:	47a8      	blx	r5
	return data[0];
100091d6:	7820      	ldrb	r0, [r4, #0]
}
100091d8:	b003      	add	sp, #12
100091da:	bd30      	pop	{r4, r5, pc}
100091dc:	10008bd5 	.word	0x10008bd5

100091e0 <sms_mpu_comp_check>:
	}
	return retVal;
}

int sms_mpu_comp_check(void)
{
100091e0:	b510      	push	{r4, lr}
	int retVal = -1;
	uint8_t d = readByte(AK8963_ADDRESS, AK8963_WHO_AM_I);
100091e2:	2100      	movs	r1, #0
100091e4:	200c      	movs	r0, #12
100091e6:	4b03      	ldr	r3, [pc, #12]	; (100091f4 <sms_mpu_comp_check+0x14>)
100091e8:	4798      	blx	r3
	if(d == 0x48) {
		//DBG_LOG("[sms_mpu_comp_check]\t\tAK8963 is online...");
		retVal = 0;
	}
	return retVal;
100091ea:	3848      	subs	r0, #72	; 0x48
100091ec:	1e43      	subs	r3, r0, #1
100091ee:	4198      	sbcs	r0, r3
100091f0:	4240      	negs	r0, r0
}
100091f2:	bd10      	pop	{r4, pc}
100091f4:	100091c9 	.word	0x100091c9

100091f8 <sms_mpu_initialize>:
	//DBG_LOG("accel_biases: %3.3f, %3.3f, %3.3f", accel_bias[0], accel_bias[1], accel_bias[2]);
	//DBG_LOG("dest2: %3.3f, %3.3f, %3.3f", dest2[0], dest2[1], dest2[2]);
}

void sms_mpu_initialize(void)
{
100091f8:	b570      	push	{r4, r5, r6, lr}
	// Initialize variables
	q[0] = 1.0;
100091fa:	4a25      	ldr	r2, [pc, #148]	; (10009290 <sms_mpu_initialize+0x98>)
100091fc:	23fe      	movs	r3, #254	; 0xfe
100091fe:	059b      	lsls	r3, r3, #22
10009200:	6013      	str	r3, [r2, #0]
	q[1] = 0.0;
10009202:	2300      	movs	r3, #0
10009204:	6053      	str	r3, [r2, #4]
	q[2] = 0.0;
10009206:	6093      	str	r3, [r2, #8]
	q[3] = 0.0;
10009208:	60d3      	str	r3, [r2, #12]
	eInt[0] = 0.0;
1000920a:	4a22      	ldr	r2, [pc, #136]	; (10009294 <sms_mpu_initialize+0x9c>)
1000920c:	6013      	str	r3, [r2, #0]
	eInt[1] = 0.0;
1000920e:	6053      	str	r3, [r2, #4]
	eInt[2] = 0.0;
10009210:	6093      	str	r3, [r2, #8]
	uint8_t a_scale = AFS_2G;
	uint8_t g_scale = GFS_250DPS;

	// wake up device
	writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x00); // Clear sleep mode bit (6), enable all sensors
10009212:	2200      	movs	r2, #0
10009214:	216b      	movs	r1, #107	; 0x6b
10009216:	2069      	movs	r0, #105	; 0x69
10009218:	4c1f      	ldr	r4, [pc, #124]	; (10009298 <sms_mpu_initialize+0xa0>)
1000921a:	47a0      	blx	r4
	delay_ms(100); // Wait for all registers to reset
1000921c:	2064      	movs	r0, #100	; 0x64
1000921e:	4d1f      	ldr	r5, [pc, #124]	; (1000929c <sms_mpu_initialize+0xa4>)
10009220:	47a8      	blx	r5

	// get stable time source
	writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x01);  // Auto select clock source to be PLL gyroscope reference if ready else
10009222:	2201      	movs	r2, #1
10009224:	216b      	movs	r1, #107	; 0x6b
10009226:	2069      	movs	r0, #105	; 0x69
10009228:	47a0      	blx	r4
	delay_ms(200);
1000922a:	20c8      	movs	r0, #200	; 0xc8
1000922c:	47a8      	blx	r5
	// minimum delay time for this setting is 5.9 ms, which means sensor fusion update rates cannot
	// be higher than 1 / 0.0059 = 170 Hz
	// DLPF_CFG = bits 2:0 = 011; this limits the sample rate to 1000 Hz for both
	// With the MPU9250, it is possible to get gyro sample rates of 32 kHz (!), 8 kHz, or 1 kHz
	// writeByte(MPU9250_ADDRESS, CONFIG, 0x03);
	writeByte(MPU9250_ADDRESS, CONFIG, 0x06);		// gyro bandwidth = 10 Hz
1000922e:	2206      	movs	r2, #6
10009230:	211a      	movs	r1, #26
10009232:	2069      	movs	r0, #105	; 0x69
10009234:	47a0      	blx	r4

	// Set sample rate = gyroscope output rate/(1 + SMPLRT_DIV)
	// writeByte(MPU9250_ADDRESS, SMPLRT_DIV, 0x04);  	// Use a 200 Hz rate; a rate consistent with the filter update rate
	// // determined inset in CONFIG above
	writeByte(MPU9250_ADDRESS, SMPLRT_DIV, 0x08);  	// Use a 111 Hz rate; a rate consistent with the filter update rate
10009236:	2208      	movs	r2, #8
10009238:	2119      	movs	r1, #25
1000923a:	2069      	movs	r0, #105	; 0x69
1000923c:	47a0      	blx	r4
	
	// Set gyroscope full scale range
	// Range selects FS_SEL and AFS_SEL are 0 - 3, so 2-bit values are left-shifted into positions 4:3
	uint8_t c = readByte(MPU9250_ADDRESS, GYRO_CONFIG); // get current GYRO_CONFIG register value
1000923e:	211b      	movs	r1, #27
10009240:	2069      	movs	r0, #105	; 0x69
10009242:	4e17      	ldr	r6, [pc, #92]	; (100092a0 <sms_mpu_initialize+0xa8>)
10009244:	47b0      	blx	r6
	// c = c & ~0xE0; // Clear self-test bits [7:5]
	c = c & ~0x02; // Clear Fchoice bits [1:0]
	c = c & ~0x18; // Clear AFS bits [4:3]
	c = c | (g_scale << 3); // Set full scale range for the gyro
	// c =| 0x00; // Set Fchoice for the gyro to 11 by writing its inverse to bits 1:0 of GYRO_CONFIG
	writeByte(MPU9250_ADDRESS, GYRO_CONFIG, c ); // Write new GYRO_CONFIG value to register
10009246:	23e5      	movs	r3, #229	; 0xe5
10009248:	0002      	movs	r2, r0
1000924a:	401a      	ands	r2, r3
1000924c:	211b      	movs	r1, #27
1000924e:	2069      	movs	r0, #105	; 0x69
10009250:	47a0      	blx	r4
	
	// Set accelerometer full-scale range configuration
	c = readByte(MPU9250_ADDRESS, ACCEL_CONFIG); // get current ACCEL_CONFIG register value
10009252:	211c      	movs	r1, #28
10009254:	2069      	movs	r0, #105	; 0x69
10009256:	47b0      	blx	r6
	// c = c & ~0xE0; // Clear self-test bits [7:5]
	c = c & ~0x18;  // Clear AFS bits [4:3]
	c = c | (a_scale << 3); // Set full scale range for the accelerometer
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, c); // Write new ACCEL_CONFIG register value
10009258:	23e7      	movs	r3, #231	; 0xe7
1000925a:	0002      	movs	r2, r0
1000925c:	401a      	ands	r2, r3
1000925e:	211c      	movs	r1, #28
10009260:	2069      	movs	r0, #105	; 0x69
10009262:	47a0      	blx	r4

	// Set accelerometer sample rate configuration
	// It is possible to get a 4 kHz sample rate from the accelerometer by choosing 1 for
	// accel_fchoice_b bit [3]; in this case the bandwidth is 1.13 kHz
	c = readByte(MPU9250_ADDRESS, ACCEL_CONFIG2); // get current ACCEL_CONFIG2 register value
10009264:	211d      	movs	r1, #29
10009266:	2069      	movs	r0, #105	; 0x69
10009268:	47b0      	blx	r6
	c = c & ~0x0F; // Clear accel_fchoice_b (bit 3) and A_DLPFG (bits [2:0])
1000926a:	23f0      	movs	r3, #240	; 0xf0
1000926c:	0002      	movs	r2, r0
1000926e:	401a      	ands	r2, r3
	// c = c | 0x03;  // Set accelerometer rate to 1 kHz and bandwidth to 41 Hz
	c = c | 0x06;  // Set accelerometer rate to 1 kHz and bandwidth to 10 Hz
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG2, c); // Write new ACCEL_CONFIG2 register value
10009270:	3bea      	subs	r3, #234	; 0xea
10009272:	431a      	orrs	r2, r3
10009274:	211d      	movs	r1, #29
10009276:	2069      	movs	r0, #105	; 0x69
10009278:	47a0      	blx	r4

	// Configure Interrupts and Bypass Enable
	// Set interrupt pin active high, push-pull, hold interrupt pin level HIGH until interrupt cleared,
	// clear on read of INT_STATUS, and enable I2C_BYPASS_EN so additional chips
	// can join the I2C bus and all can be controlled by the Arduino as master
	writeByte(MPU9250_ADDRESS, INT_PIN_CFG, 0x22);
1000927a:	2222      	movs	r2, #34	; 0x22
1000927c:	2137      	movs	r1, #55	; 0x37
1000927e:	2069      	movs	r0, #105	; 0x69
10009280:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, INT_ENABLE, 0x01);  // Enable data ready (bit 0) interrupt
10009282:	2201      	movs	r2, #1
10009284:	2138      	movs	r1, #56	; 0x38
10009286:	2069      	movs	r0, #105	; 0x69
10009288:	47a0      	blx	r4
	delay_ms(100);
1000928a:	2064      	movs	r0, #100	; 0x64
1000928c:	47a8      	blx	r5
}
1000928e:	bd70      	pop	{r4, r5, r6, pc}
10009290:	10019c20 	.word	0x10019c20
10009294:	10019ac8 	.word	0x10019ac8
10009298:	10008d4d 	.word	0x10008d4d
1000929c:	10009c7d 	.word	0x10009c7d
100092a0:	100091c9 	.word	0x100091c9

100092a4 <sms_mpu_selftest>:
        DBG_LOG_DEV("[sms_mpu_define_services]\tServices defined, SMS MPU handle: %d", mpu_device.service_handler.serv_handle);
    }
}

void sms_mpu_selftest(float *destination)
{
100092a4:	b5f0      	push	{r4, r5, r6, r7, lr}
100092a6:	465f      	mov	r7, fp
100092a8:	4656      	mov	r6, sl
100092aa:	464d      	mov	r5, r9
100092ac:	4644      	mov	r4, r8
100092ae:	b4f0      	push	{r4, r5, r6, r7}
100092b0:	b09d      	sub	sp, #116	; 0x74
100092b2:	9003      	str	r0, [sp, #12]
	uint8_t raw_data[6] = {0};
100092b4:	2206      	movs	r2, #6
100092b6:	2100      	movs	r1, #0
100092b8:	a81a      	add	r0, sp, #104	; 0x68
100092ba:	4ce0      	ldr	r4, [pc, #896]	; (1000963c <sms_mpu_selftest+0x398>)
100092bc:	47a0      	blx	r4
	uint8_t stest[6];
	int32_t g_avg[3] = {0}, a_avg[3] = {0}, a_stavg[3] = {0}, g_stavg[3] = {0};
100092be:	220c      	movs	r2, #12
100092c0:	2100      	movs	r1, #0
100092c2:	a817      	add	r0, sp, #92	; 0x5c
100092c4:	47a0      	blx	r4
100092c6:	220c      	movs	r2, #12
100092c8:	2100      	movs	r1, #0
100092ca:	a814      	add	r0, sp, #80	; 0x50
100092cc:	47a0      	blx	r4
100092ce:	220c      	movs	r2, #12
100092d0:	2100      	movs	r1, #0
100092d2:	a811      	add	r0, sp, #68	; 0x44
100092d4:	47a0      	blx	r4
100092d6:	220c      	movs	r2, #12
100092d8:	2100      	movs	r1, #0
100092da:	a80e      	add	r0, sp, #56	; 0x38
100092dc:	47a0      	blx	r4
	float factory_trim[6];
	uint8_t fs = 0;
	
	writeByte(MPU9250_ADDRESS, SMPLRT_DIV, 0x00);	// Set gyro sample rate to 1 kHz
100092de:	2200      	movs	r2, #0
100092e0:	2119      	movs	r1, #25
100092e2:	2069      	movs	r0, #105	; 0x69
100092e4:	4cd6      	ldr	r4, [pc, #856]	; (10009640 <sms_mpu_selftest+0x39c>)
100092e6:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, CONFIG, 0x02);		// Set gyro sample rate to 1 kHz and DLPF to 92 Hz
100092e8:	2202      	movs	r2, #2
100092ea:	211a      	movs	r1, #26
100092ec:	2069      	movs	r0, #105	; 0x69
100092ee:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, GYRO_CONFIG, fs<<3);	// Set full scale range for the gyro to 250 dps
100092f0:	2200      	movs	r2, #0
100092f2:	211b      	movs	r1, #27
100092f4:	2069      	movs	r0, #105	; 0x69
100092f6:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG2, 0x02);	// Set accelerometer rate to 1 kHz and bandwidth to 92 Hz
100092f8:	2202      	movs	r2, #2
100092fa:	211d      	movs	r1, #29
100092fc:	2069      	movs	r0, #105	; 0x69
100092fe:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, fs<<3);	// Set full scale range for the accelerometer to 2 g
10009300:	2200      	movs	r2, #0
10009302:	211c      	movs	r1, #28
10009304:	2069      	movs	r0, #105	; 0x69
10009306:	47a0      	blx	r4
10009308:	25c8      	movs	r5, #200	; 0xc8
	return data[0];
}

void readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest)
{
	sms_i2c_master_read(address, subAddress, count, dest);
1000930a:	ac1a      	add	r4, sp, #104	; 0x68
1000930c:	4ecd      	ldr	r6, [pc, #820]	; (10009644 <sms_mpu_selftest+0x3a0>)
1000930e:	0023      	movs	r3, r4
10009310:	2206      	movs	r2, #6
10009312:	213b      	movs	r1, #59	; 0x3b
10009314:	2069      	movs	r0, #105	; 0x69
10009316:	47b0      	blx	r6
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG2, 0x02);	// Set accelerometer rate to 1 kHz and bandwidth to 92 Hz
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, fs<<3);	// Set full scale range for the accelerometer to 2 g
	
	for(uint8_t i = 0; i < 200; i++) { // get average current values of gyro and accelerometer
		readBytes(MPU9250_ADDRESS, ACCEL_XOUT_H, 6, raw_data);
		a_avg[0] += (int16_t)(((int16_t)raw_data[0] << 8) | raw_data[1]);
10009318:	7823      	ldrb	r3, [r4, #0]
1000931a:	021b      	lsls	r3, r3, #8
1000931c:	7862      	ldrb	r2, [r4, #1]
1000931e:	4313      	orrs	r3, r2
10009320:	b21b      	sxth	r3, r3
10009322:	9a14      	ldr	r2, [sp, #80]	; 0x50
10009324:	4694      	mov	ip, r2
10009326:	4463      	add	r3, ip
10009328:	9314      	str	r3, [sp, #80]	; 0x50
		a_avg[1] += (int16_t)(((int16_t)raw_data[2] << 8) | raw_data[3]);
1000932a:	78a3      	ldrb	r3, [r4, #2]
1000932c:	021b      	lsls	r3, r3, #8
1000932e:	78e2      	ldrb	r2, [r4, #3]
10009330:	4313      	orrs	r3, r2
10009332:	b21b      	sxth	r3, r3
10009334:	9a15      	ldr	r2, [sp, #84]	; 0x54
10009336:	9200      	str	r2, [sp, #0]
10009338:	4694      	mov	ip, r2
1000933a:	4463      	add	r3, ip
1000933c:	9315      	str	r3, [sp, #84]	; 0x54
		a_avg[2] += (int16_t)(((int16_t)raw_data[4] << 8) | raw_data[5]);
1000933e:	7923      	ldrb	r3, [r4, #4]
10009340:	021b      	lsls	r3, r3, #8
10009342:	7962      	ldrb	r2, [r4, #5]
10009344:	4313      	orrs	r3, r2
10009346:	b21b      	sxth	r3, r3
10009348:	9a16      	ldr	r2, [sp, #88]	; 0x58
1000934a:	9200      	str	r2, [sp, #0]
1000934c:	4694      	mov	ip, r2
1000934e:	4463      	add	r3, ip
10009350:	9316      	str	r3, [sp, #88]	; 0x58
	return data[0];
}

void readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest)
{
	sms_i2c_master_read(address, subAddress, count, dest);
10009352:	0023      	movs	r3, r4
10009354:	2206      	movs	r2, #6
10009356:	2143      	movs	r1, #67	; 0x43
10009358:	2069      	movs	r0, #105	; 0x69
1000935a:	47b0      	blx	r6
		a_avg[0] += (int16_t)(((int16_t)raw_data[0] << 8) | raw_data[1]);
		a_avg[1] += (int16_t)(((int16_t)raw_data[2] << 8) | raw_data[3]);
		a_avg[2] += (int16_t)(((int16_t)raw_data[4] << 8) | raw_data[5]);
		
		readBytes(MPU9250_ADDRESS, GYRO_XOUT_H, 6, raw_data);
		g_avg[0] += (int16_t)(((int16_t)raw_data[0] << 8) | raw_data[1]);
1000935c:	7823      	ldrb	r3, [r4, #0]
1000935e:	021b      	lsls	r3, r3, #8
10009360:	7862      	ldrb	r2, [r4, #1]
10009362:	4313      	orrs	r3, r2
10009364:	b21b      	sxth	r3, r3
10009366:	9a17      	ldr	r2, [sp, #92]	; 0x5c
10009368:	4694      	mov	ip, r2
1000936a:	4463      	add	r3, ip
1000936c:	9317      	str	r3, [sp, #92]	; 0x5c
		g_avg[1] += (int16_t)(((int16_t)raw_data[2] << 8) | raw_data[3]);
1000936e:	78a3      	ldrb	r3, [r4, #2]
10009370:	021b      	lsls	r3, r3, #8
10009372:	78e2      	ldrb	r2, [r4, #3]
10009374:	4313      	orrs	r3, r2
10009376:	b21b      	sxth	r3, r3
10009378:	9a18      	ldr	r2, [sp, #96]	; 0x60
1000937a:	9200      	str	r2, [sp, #0]
1000937c:	4694      	mov	ip, r2
1000937e:	4463      	add	r3, ip
10009380:	9318      	str	r3, [sp, #96]	; 0x60
		g_avg[2] += (int16_t)(((int16_t)raw_data[4] << 8) | raw_data[5]);
10009382:	7923      	ldrb	r3, [r4, #4]
10009384:	021b      	lsls	r3, r3, #8
10009386:	7962      	ldrb	r2, [r4, #5]
10009388:	4313      	orrs	r3, r2
1000938a:	b21b      	sxth	r3, r3
1000938c:	9a19      	ldr	r2, [sp, #100]	; 0x64
1000938e:	9200      	str	r2, [sp, #0]
10009390:	4694      	mov	ip, r2
10009392:	4463      	add	r3, ip
10009394:	9319      	str	r3, [sp, #100]	; 0x64
10009396:	3d01      	subs	r5, #1
10009398:	b2ed      	uxtb	r5, r5
	writeByte(MPU9250_ADDRESS, CONFIG, 0x02);		// Set gyro sample rate to 1 kHz and DLPF to 92 Hz
	writeByte(MPU9250_ADDRESS, GYRO_CONFIG, fs<<3);	// Set full scale range for the gyro to 250 dps
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG2, 0x02);	// Set accelerometer rate to 1 kHz and bandwidth to 92 Hz
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, fs<<3);	// Set full scale range for the accelerometer to 2 g
	
	for(uint8_t i = 0; i < 200; i++) { // get average current values of gyro and accelerometer
1000939a:	2d00      	cmp	r5, #0
1000939c:	d1b7      	bne.n	1000930e <sms_mpu_selftest+0x6a>
1000939e:	2400      	movs	r4, #0
		g_avg[0] += (int16_t)(((int16_t)raw_data[0] << 8) | raw_data[1]);
		g_avg[1] += (int16_t)(((int16_t)raw_data[2] << 8) | raw_data[3]);
		g_avg[2] += (int16_t)(((int16_t)raw_data[4] << 8) | raw_data[5]);
	}
	for(uint8_t i = 0; i < 3; i++) { // get average of 200 values and store as average current readings
		a_avg[i] /= 200;
100093a0:	4ea9      	ldr	r6, [pc, #676]	; (10009648 <sms_mpu_selftest+0x3a4>)
100093a2:	ad14      	add	r5, sp, #80	; 0x50
100093a4:	21c8      	movs	r1, #200	; 0xc8
100093a6:	5960      	ldr	r0, [r4, r5]
100093a8:	47b0      	blx	r6
100093aa:	5160      	str	r0, [r4, r5]
		g_avg[i] /= 200;
100093ac:	ad17      	add	r5, sp, #92	; 0x5c
100093ae:	21c8      	movs	r1, #200	; 0xc8
100093b0:	5960      	ldr	r0, [r4, r5]
100093b2:	47b0      	blx	r6
100093b4:	5160      	str	r0, [r4, r5]
100093b6:	3404      	adds	r4, #4
		readBytes(MPU9250_ADDRESS, GYRO_XOUT_H, 6, raw_data);
		g_avg[0] += (int16_t)(((int16_t)raw_data[0] << 8) | raw_data[1]);
		g_avg[1] += (int16_t)(((int16_t)raw_data[2] << 8) | raw_data[3]);
		g_avg[2] += (int16_t)(((int16_t)raw_data[4] << 8) | raw_data[5]);
	}
	for(uint8_t i = 0; i < 3; i++) { // get average of 200 values and store as average current readings
100093b8:	2c0c      	cmp	r4, #12
100093ba:	d1f2      	bne.n	100093a2 <sms_mpu_selftest+0xfe>
		a_avg[i] /= 200;
		g_avg[i] /= 200;
	}
	
	// Configure the accelerometer for self-test
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, 0xE0); // Enable self test on all three axes and set accelerometer range to +/- 2 g
100093bc:	22e0      	movs	r2, #224	; 0xe0
100093be:	211c      	movs	r1, #28
100093c0:	2069      	movs	r0, #105	; 0x69
100093c2:	4c9f      	ldr	r4, [pc, #636]	; (10009640 <sms_mpu_selftest+0x39c>)
100093c4:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, 0xE0); // Enable self test on all three axes and set (MPU9250_ADDRESS, GYRO_CONFIG,  0xE0); // Enable self test on all three axes and set gyro range to +/- 250 degrees/s
100093c6:	22e0      	movs	r2, #224	; 0xe0
100093c8:	211c      	movs	r1, #28
100093ca:	2069      	movs	r0, #105	; 0x69
100093cc:	47a0      	blx	r4
	delay_ms(25);  // Delay a while to let the device stabilize
100093ce:	2019      	movs	r0, #25
100093d0:	4b9e      	ldr	r3, [pc, #632]	; (1000964c <sms_mpu_selftest+0x3a8>)
100093d2:	4798      	blx	r3
100093d4:	25c8      	movs	r5, #200	; 0xc8
	return data[0];
}

void readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest)
{
	sms_i2c_master_read(address, subAddress, count, dest);
100093d6:	ac1a      	add	r4, sp, #104	; 0x68
100093d8:	4e9a      	ldr	r6, [pc, #616]	; (10009644 <sms_mpu_selftest+0x3a0>)
100093da:	0023      	movs	r3, r4
100093dc:	2206      	movs	r2, #6
100093de:	213b      	movs	r1, #59	; 0x3b
100093e0:	2069      	movs	r0, #105	; 0x69
100093e2:	47b0      	blx	r6
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, 0xE0); // Enable self test on all three axes and set (MPU9250_ADDRESS, GYRO_CONFIG,  0xE0); // Enable self test on all three axes and set gyro range to +/- 250 degrees/s
	delay_ms(25);  // Delay a while to let the device stabilize
	
	for(uint8_t i = 0; i < 200; i++) {  // get average self-test values of gyro and accelerometer
		readBytes(MPU9250_ADDRESS, ACCEL_XOUT_H, 6, raw_data);  // Read the six raw data registers into data array
		a_stavg[0] += (int16_t)(((int16_t)raw_data[0] << 8) | raw_data[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
100093e4:	7823      	ldrb	r3, [r4, #0]
100093e6:	021b      	lsls	r3, r3, #8
100093e8:	7862      	ldrb	r2, [r4, #1]
100093ea:	4313      	orrs	r3, r2
100093ec:	b21b      	sxth	r3, r3
100093ee:	9a11      	ldr	r2, [sp, #68]	; 0x44
100093f0:	4694      	mov	ip, r2
100093f2:	4463      	add	r3, ip
100093f4:	9311      	str	r3, [sp, #68]	; 0x44
		a_stavg[1] += (int16_t)(((int16_t)raw_data[2] << 8) | raw_data[3]) ;
100093f6:	78a3      	ldrb	r3, [r4, #2]
100093f8:	021b      	lsls	r3, r3, #8
100093fa:	78e2      	ldrb	r2, [r4, #3]
100093fc:	4313      	orrs	r3, r2
100093fe:	b21b      	sxth	r3, r3
10009400:	9a12      	ldr	r2, [sp, #72]	; 0x48
10009402:	9200      	str	r2, [sp, #0]
10009404:	4694      	mov	ip, r2
10009406:	4463      	add	r3, ip
10009408:	9312      	str	r3, [sp, #72]	; 0x48
		a_stavg[2] += (int16_t)(((int16_t)raw_data[4] << 8) | raw_data[5]) ;
1000940a:	7923      	ldrb	r3, [r4, #4]
1000940c:	021b      	lsls	r3, r3, #8
1000940e:	7962      	ldrb	r2, [r4, #5]
10009410:	4313      	orrs	r3, r2
10009412:	b21b      	sxth	r3, r3
10009414:	9a13      	ldr	r2, [sp, #76]	; 0x4c
10009416:	9200      	str	r2, [sp, #0]
10009418:	4694      	mov	ip, r2
1000941a:	4463      	add	r3, ip
1000941c:	9313      	str	r3, [sp, #76]	; 0x4c
	return data[0];
}

void readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest)
{
	sms_i2c_master_read(address, subAddress, count, dest);
1000941e:	0023      	movs	r3, r4
10009420:	2206      	movs	r2, #6
10009422:	2143      	movs	r1, #67	; 0x43
10009424:	2069      	movs	r0, #105	; 0x69
10009426:	47b0      	blx	r6
		a_stavg[0] += (int16_t)(((int16_t)raw_data[0] << 8) | raw_data[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
		a_stavg[1] += (int16_t)(((int16_t)raw_data[2] << 8) | raw_data[3]) ;
		a_stavg[2] += (int16_t)(((int16_t)raw_data[4] << 8) | raw_data[5]) ;
		
		readBytes(MPU9250_ADDRESS, GYRO_XOUT_H, 6, raw_data);  // Read the six raw data registers sequentially into data array
		g_stavg[0] += (int16_t)(((int16_t)raw_data[0] << 8) | raw_data[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
10009428:	7823      	ldrb	r3, [r4, #0]
1000942a:	021b      	lsls	r3, r3, #8
1000942c:	7862      	ldrb	r2, [r4, #1]
1000942e:	4313      	orrs	r3, r2
10009430:	b21b      	sxth	r3, r3
10009432:	9a0e      	ldr	r2, [sp, #56]	; 0x38
10009434:	4694      	mov	ip, r2
10009436:	4463      	add	r3, ip
10009438:	930e      	str	r3, [sp, #56]	; 0x38
		g_stavg[1] += (int16_t)(((int16_t)raw_data[2] << 8) | raw_data[3]) ;
1000943a:	78a3      	ldrb	r3, [r4, #2]
1000943c:	021b      	lsls	r3, r3, #8
1000943e:	78e2      	ldrb	r2, [r4, #3]
10009440:	4313      	orrs	r3, r2
10009442:	b21b      	sxth	r3, r3
10009444:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
10009446:	9200      	str	r2, [sp, #0]
10009448:	4694      	mov	ip, r2
1000944a:	4463      	add	r3, ip
1000944c:	930f      	str	r3, [sp, #60]	; 0x3c
		g_stavg[2] += (int16_t)(((int16_t)raw_data[4] << 8) | raw_data[5]) ;
1000944e:	7923      	ldrb	r3, [r4, #4]
10009450:	021b      	lsls	r3, r3, #8
10009452:	7962      	ldrb	r2, [r4, #5]
10009454:	4313      	orrs	r3, r2
10009456:	b21b      	sxth	r3, r3
10009458:	9a10      	ldr	r2, [sp, #64]	; 0x40
1000945a:	9200      	str	r2, [sp, #0]
1000945c:	4694      	mov	ip, r2
1000945e:	4463      	add	r3, ip
10009460:	9310      	str	r3, [sp, #64]	; 0x40
10009462:	3d01      	subs	r5, #1
10009464:	b2ed      	uxtb	r5, r5
	// Configure the accelerometer for self-test
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, 0xE0); // Enable self test on all three axes and set accelerometer range to +/- 2 g
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, 0xE0); // Enable self test on all three axes and set (MPU9250_ADDRESS, GYRO_CONFIG,  0xE0); // Enable self test on all three axes and set gyro range to +/- 250 degrees/s
	delay_ms(25);  // Delay a while to let the device stabilize
	
	for(uint8_t i = 0; i < 200; i++) {  // get average self-test values of gyro and accelerometer
10009466:	2d00      	cmp	r5, #0
10009468:	d1b7      	bne.n	100093da <sms_mpu_selftest+0x136>
1000946a:	2400      	movs	r4, #0
		g_stavg[0] += (int16_t)(((int16_t)raw_data[0] << 8) | raw_data[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
		g_stavg[1] += (int16_t)(((int16_t)raw_data[2] << 8) | raw_data[3]) ;
		g_stavg[2] += (int16_t)(((int16_t)raw_data[4] << 8) | raw_data[5]) ;
	}
	for(uint8_t i = 0; i < 3; i++) { // get average of 200 values and store as average self-test readings
		a_stavg[i] /= 200;
1000946c:	4e76      	ldr	r6, [pc, #472]	; (10009648 <sms_mpu_selftest+0x3a4>)
1000946e:	ad11      	add	r5, sp, #68	; 0x44
10009470:	21c8      	movs	r1, #200	; 0xc8
10009472:	5960      	ldr	r0, [r4, r5]
10009474:	47b0      	blx	r6
10009476:	5160      	str	r0, [r4, r5]
		g_stavg[i] /= 200;
10009478:	ad0e      	add	r5, sp, #56	; 0x38
1000947a:	21c8      	movs	r1, #200	; 0xc8
1000947c:	5960      	ldr	r0, [r4, r5]
1000947e:	47b0      	blx	r6
10009480:	5160      	str	r0, [r4, r5]
10009482:	3404      	adds	r4, #4
		readBytes(MPU9250_ADDRESS, GYRO_XOUT_H, 6, raw_data);  // Read the six raw data registers sequentially into data array
		g_stavg[0] += (int16_t)(((int16_t)raw_data[0] << 8) | raw_data[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
		g_stavg[1] += (int16_t)(((int16_t)raw_data[2] << 8) | raw_data[3]) ;
		g_stavg[2] += (int16_t)(((int16_t)raw_data[4] << 8) | raw_data[5]) ;
	}
	for(uint8_t i = 0; i < 3; i++) { // get average of 200 values and store as average self-test readings
10009484:	2c0c      	cmp	r4, #12
10009486:	d1f2      	bne.n	1000946e <sms_mpu_selftest+0x1ca>
		a_stavg[i] /= 200;
		g_stavg[i] /= 200;
	}

	// Configure the gyro and accelerometer for normal operation
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, 0x00);
10009488:	2200      	movs	r2, #0
1000948a:	211c      	movs	r1, #28
1000948c:	2069      	movs	r0, #105	; 0x69
1000948e:	4c6c      	ldr	r4, [pc, #432]	; (10009640 <sms_mpu_selftest+0x39c>)
10009490:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, GYRO_CONFIG,  0x00);
10009492:	2200      	movs	r2, #0
10009494:	211b      	movs	r1, #27
10009496:	2069      	movs	r0, #105	; 0x69
10009498:	47a0      	blx	r4
	delay_ms(25);  // Delay a while to let the device stabilize
1000949a:	2019      	movs	r0, #25
1000949c:	4b6b      	ldr	r3, [pc, #428]	; (1000964c <sms_mpu_selftest+0x3a8>)
1000949e:	4798      	blx	r3

	// Retrieve accelerometer and gyro factory Self-Test Code from USR_Reg
	stest[0] = readByte(MPU9250_ADDRESS, SELF_TEST_X_ACCEL); // X-axis accel self-test results
100094a0:	210d      	movs	r1, #13
100094a2:	2069      	movs	r0, #105	; 0x69
100094a4:	4d6a      	ldr	r5, [pc, #424]	; (10009650 <sms_mpu_selftest+0x3ac>)
100094a6:	47a8      	blx	r5
100094a8:	0004      	movs	r4, r0
	stest[1] = readByte(MPU9250_ADDRESS, SELF_TEST_Y_ACCEL); // Y-axis accel self-test results
100094aa:	210e      	movs	r1, #14
100094ac:	2069      	movs	r0, #105	; 0x69
100094ae:	47a8      	blx	r5
100094b0:	9000      	str	r0, [sp, #0]
	stest[2] = readByte(MPU9250_ADDRESS, SELF_TEST_Z_ACCEL); // Z-axis accel self-test results
100094b2:	210f      	movs	r1, #15
100094b4:	2069      	movs	r0, #105	; 0x69
100094b6:	47a8      	blx	r5
100094b8:	9004      	str	r0, [sp, #16]
	stest[3] = readByte(MPU9250_ADDRESS, SELF_TEST_X_GYRO);  // X-axis gyro self-test results
100094ba:	2100      	movs	r1, #0
100094bc:	2069      	movs	r0, #105	; 0x69
100094be:	47a8      	blx	r5
100094c0:	9005      	str	r0, [sp, #20]
	stest[4] = readByte(MPU9250_ADDRESS, SELF_TEST_Y_GYRO);  // Y-axis gyro self-test results
100094c2:	2101      	movs	r1, #1
100094c4:	2069      	movs	r0, #105	; 0x69
100094c6:	47a8      	blx	r5
100094c8:	9006      	str	r0, [sp, #24]
	stest[5] = readByte(MPU9250_ADDRESS, SELF_TEST_Z_GYRO);  // Z-axis gyro self-test results
100094ca:	2102      	movs	r1, #2
100094cc:	2069      	movs	r0, #105	; 0x69
100094ce:	47a8      	blx	r5
100094d0:	9007      	str	r0, [sp, #28]

	// Retrieve factory self-test value from self-test code reads
	factory_trim[0] = (float)(2620/1<<fs)*(pow( 1.01 , ((float)stest[0] - 1.0) )); // FT[Xa] factory trim calculation
100094d2:	4b60      	ldr	r3, [pc, #384]	; (10009654 <sms_mpu_selftest+0x3b0>)
100094d4:	469a      	mov	sl, r3
100094d6:	0020      	movs	r0, r4
100094d8:	4798      	blx	r3
100094da:	4b5f      	ldr	r3, [pc, #380]	; (10009658 <sms_mpu_selftest+0x3b4>)
100094dc:	4699      	mov	r9, r3
100094de:	4798      	blx	r3
100094e0:	4e5e      	ldr	r6, [pc, #376]	; (1000965c <sms_mpu_selftest+0x3b8>)
100094e2:	2200      	movs	r2, #0
100094e4:	4b5e      	ldr	r3, [pc, #376]	; (10009660 <sms_mpu_selftest+0x3bc>)
100094e6:	47b0      	blx	r6
100094e8:	0002      	movs	r2, r0
100094ea:	000b      	movs	r3, r1
100094ec:	485d      	ldr	r0, [pc, #372]	; (10009664 <sms_mpu_selftest+0x3c0>)
100094ee:	495e      	ldr	r1, [pc, #376]	; (10009668 <sms_mpu_selftest+0x3c4>)
100094f0:	4f5e      	ldr	r7, [pc, #376]	; (1000966c <sms_mpu_selftest+0x3c8>)
100094f2:	47b8      	blx	r7
100094f4:	4d5e      	ldr	r5, [pc, #376]	; (10009670 <sms_mpu_selftest+0x3cc>)
100094f6:	2200      	movs	r2, #0
100094f8:	4b5e      	ldr	r3, [pc, #376]	; (10009674 <sms_mpu_selftest+0x3d0>)
100094fa:	47a8      	blx	r5
100094fc:	4c5e      	ldr	r4, [pc, #376]	; (10009678 <sms_mpu_selftest+0x3d4>)
100094fe:	47a0      	blx	r4
10009500:	9008      	str	r0, [sp, #32]
	factory_trim[1] = (float)(2620/1<<fs)*(pow( 1.01 , ((float)stest[1] - 1.0) )); // FT[Ya] factory trim calculation
10009502:	9800      	ldr	r0, [sp, #0]
10009504:	47d0      	blx	sl
10009506:	47c8      	blx	r9
10009508:	2200      	movs	r2, #0
1000950a:	4b55      	ldr	r3, [pc, #340]	; (10009660 <sms_mpu_selftest+0x3bc>)
1000950c:	47b0      	blx	r6
1000950e:	0002      	movs	r2, r0
10009510:	000b      	movs	r3, r1
10009512:	4854      	ldr	r0, [pc, #336]	; (10009664 <sms_mpu_selftest+0x3c0>)
10009514:	4954      	ldr	r1, [pc, #336]	; (10009668 <sms_mpu_selftest+0x3c4>)
10009516:	47b8      	blx	r7
10009518:	2200      	movs	r2, #0
1000951a:	4b56      	ldr	r3, [pc, #344]	; (10009674 <sms_mpu_selftest+0x3d0>)
1000951c:	47a8      	blx	r5
1000951e:	47a0      	blx	r4
10009520:	9009      	str	r0, [sp, #36]	; 0x24
	factory_trim[2] = (float)(2620/1<<fs)*(pow( 1.01 , ((float)stest[2] - 1.0) )); // FT[Za] factory trim calculation
10009522:	9804      	ldr	r0, [sp, #16]
10009524:	47d0      	blx	sl
10009526:	47c8      	blx	r9
10009528:	2200      	movs	r2, #0
1000952a:	4b4d      	ldr	r3, [pc, #308]	; (10009660 <sms_mpu_selftest+0x3bc>)
1000952c:	47b0      	blx	r6
1000952e:	0002      	movs	r2, r0
10009530:	000b      	movs	r3, r1
10009532:	484c      	ldr	r0, [pc, #304]	; (10009664 <sms_mpu_selftest+0x3c0>)
10009534:	494c      	ldr	r1, [pc, #304]	; (10009668 <sms_mpu_selftest+0x3c4>)
10009536:	47b8      	blx	r7
10009538:	2200      	movs	r2, #0
1000953a:	4b4e      	ldr	r3, [pc, #312]	; (10009674 <sms_mpu_selftest+0x3d0>)
1000953c:	47a8      	blx	r5
1000953e:	47a0      	blx	r4
10009540:	900a      	str	r0, [sp, #40]	; 0x28
	factory_trim[3] = (float)(2620/1<<fs)*(pow( 1.01 , ((float)stest[3] - 1.0) )); // FT[Xg] factory trim calculation
10009542:	9805      	ldr	r0, [sp, #20]
10009544:	47d0      	blx	sl
10009546:	47c8      	blx	r9
10009548:	2200      	movs	r2, #0
1000954a:	4b45      	ldr	r3, [pc, #276]	; (10009660 <sms_mpu_selftest+0x3bc>)
1000954c:	47b0      	blx	r6
1000954e:	0002      	movs	r2, r0
10009550:	000b      	movs	r3, r1
10009552:	4844      	ldr	r0, [pc, #272]	; (10009664 <sms_mpu_selftest+0x3c0>)
10009554:	4944      	ldr	r1, [pc, #272]	; (10009668 <sms_mpu_selftest+0x3c4>)
10009556:	47b8      	blx	r7
10009558:	2200      	movs	r2, #0
1000955a:	4b46      	ldr	r3, [pc, #280]	; (10009674 <sms_mpu_selftest+0x3d0>)
1000955c:	47a8      	blx	r5
1000955e:	47a0      	blx	r4
10009560:	900b      	str	r0, [sp, #44]	; 0x2c
	factory_trim[4] = (float)(2620/1<<fs)*(pow( 1.01 , ((float)stest[4] - 1.0) )); // FT[Yg] factory trim calculation
10009562:	9806      	ldr	r0, [sp, #24]
10009564:	47d0      	blx	sl
10009566:	47c8      	blx	r9
10009568:	2200      	movs	r2, #0
1000956a:	4b3d      	ldr	r3, [pc, #244]	; (10009660 <sms_mpu_selftest+0x3bc>)
1000956c:	47b0      	blx	r6
1000956e:	0002      	movs	r2, r0
10009570:	000b      	movs	r3, r1
10009572:	483c      	ldr	r0, [pc, #240]	; (10009664 <sms_mpu_selftest+0x3c0>)
10009574:	493c      	ldr	r1, [pc, #240]	; (10009668 <sms_mpu_selftest+0x3c4>)
10009576:	47b8      	blx	r7
10009578:	2200      	movs	r2, #0
1000957a:	4b3e      	ldr	r3, [pc, #248]	; (10009674 <sms_mpu_selftest+0x3d0>)
1000957c:	47a8      	blx	r5
1000957e:	47a0      	blx	r4
10009580:	900c      	str	r0, [sp, #48]	; 0x30
	factory_trim[5] = (float)(2620/1<<fs)*(pow( 1.01 , ((float)stest[5] - 1.0) )); // FT[Zg] factory trim calculation
10009582:	9807      	ldr	r0, [sp, #28]
10009584:	47d0      	blx	sl
10009586:	47c8      	blx	r9
10009588:	2200      	movs	r2, #0
1000958a:	4b35      	ldr	r3, [pc, #212]	; (10009660 <sms_mpu_selftest+0x3bc>)
1000958c:	47b0      	blx	r6
1000958e:	0002      	movs	r2, r0
10009590:	000b      	movs	r3, r1
10009592:	4834      	ldr	r0, [pc, #208]	; (10009664 <sms_mpu_selftest+0x3c0>)
10009594:	4934      	ldr	r1, [pc, #208]	; (10009668 <sms_mpu_selftest+0x3c4>)
10009596:	47b8      	blx	r7
10009598:	2200      	movs	r2, #0
1000959a:	4b36      	ldr	r3, [pc, #216]	; (10009674 <sms_mpu_selftest+0x3d0>)
1000959c:	47a8      	blx	r5
1000959e:	47a0      	blx	r4
100095a0:	900d      	str	r0, [sp, #52]	; 0x34
100095a2:	2400      	movs	r4, #0
	
	// Report results as a ratio of (STR - FT)/FT; the change from Factory Trim of the Self-Test Response
	// To get percent, must multiply by 100
	for (int i = 0; i < 3; i++) {
		destination[i]   = 100.0*((float)(a_stavg[i] - a_avg[i]))/factory_trim[i] - 100.;   // Report percent differences
100095a4:	4b35      	ldr	r3, [pc, #212]	; (1000967c <sms_mpu_selftest+0x3d8>)
100095a6:	4699      	mov	r9, r3
100095a8:	4d2b      	ldr	r5, [pc, #172]	; (10009658 <sms_mpu_selftest+0x3b4>)
100095aa:	4b31      	ldr	r3, [pc, #196]	; (10009670 <sms_mpu_selftest+0x3cc>)
100095ac:	4698      	mov	r8, r3
100095ae:	4b34      	ldr	r3, [pc, #208]	; (10009680 <sms_mpu_selftest+0x3dc>)
100095b0:	469a      	mov	sl, r3
100095b2:	4f2a      	ldr	r7, [pc, #168]	; (1000965c <sms_mpu_selftest+0x3b8>)
100095b4:	4e30      	ldr	r6, [pc, #192]	; (10009678 <sms_mpu_selftest+0x3d4>)
100095b6:	ab11      	add	r3, sp, #68	; 0x44
100095b8:	58e3      	ldr	r3, [r4, r3]
100095ba:	aa14      	add	r2, sp, #80	; 0x50
100095bc:	58a0      	ldr	r0, [r4, r2]
100095be:	1a18      	subs	r0, r3, r0
100095c0:	47c8      	blx	r9
100095c2:	47a8      	blx	r5
100095c4:	2200      	movs	r2, #0
100095c6:	4b2f      	ldr	r3, [pc, #188]	; (10009684 <sms_mpu_selftest+0x3e0>)
100095c8:	47c0      	blx	r8
100095ca:	9000      	str	r0, [sp, #0]
100095cc:	9101      	str	r1, [sp, #4]
100095ce:	ab08      	add	r3, sp, #32
100095d0:	58e0      	ldr	r0, [r4, r3]
100095d2:	47a8      	blx	r5
100095d4:	0002      	movs	r2, r0
100095d6:	000b      	movs	r3, r1
100095d8:	9800      	ldr	r0, [sp, #0]
100095da:	9901      	ldr	r1, [sp, #4]
100095dc:	47d0      	blx	sl
100095de:	2200      	movs	r2, #0
100095e0:	4b28      	ldr	r3, [pc, #160]	; (10009684 <sms_mpu_selftest+0x3e0>)
100095e2:	47b8      	blx	r7
100095e4:	47b0      	blx	r6
100095e6:	9b03      	ldr	r3, [sp, #12]
100095e8:	5118      	str	r0, [r3, r4]
		destination[i+3] = 100.0*((float)(g_stavg[i] - g_avg[i]))/factory_trim[i+3] - 100.; // Report percent differences
100095ea:	469b      	mov	fp, r3
100095ec:	44a3      	add	fp, r4
100095ee:	ab0e      	add	r3, sp, #56	; 0x38
100095f0:	58e3      	ldr	r3, [r4, r3]
100095f2:	aa17      	add	r2, sp, #92	; 0x5c
100095f4:	58a0      	ldr	r0, [r4, r2]
100095f6:	1a18      	subs	r0, r3, r0
100095f8:	47c8      	blx	r9
100095fa:	47a8      	blx	r5
100095fc:	2200      	movs	r2, #0
100095fe:	4b21      	ldr	r3, [pc, #132]	; (10009684 <sms_mpu_selftest+0x3e0>)
10009600:	47c0      	blx	r8
10009602:	9000      	str	r0, [sp, #0]
10009604:	9101      	str	r1, [sp, #4]
10009606:	0023      	movs	r3, r4
10009608:	aa08      	add	r2, sp, #32
1000960a:	4694      	mov	ip, r2
1000960c:	4463      	add	r3, ip
1000960e:	68d8      	ldr	r0, [r3, #12]
10009610:	47a8      	blx	r5
10009612:	0002      	movs	r2, r0
10009614:	000b      	movs	r3, r1
10009616:	9800      	ldr	r0, [sp, #0]
10009618:	9901      	ldr	r1, [sp, #4]
1000961a:	47d0      	blx	sl
1000961c:	2200      	movs	r2, #0
1000961e:	4b19      	ldr	r3, [pc, #100]	; (10009684 <sms_mpu_selftest+0x3e0>)
10009620:	47b8      	blx	r7
10009622:	47b0      	blx	r6
10009624:	465b      	mov	r3, fp
10009626:	60d8      	str	r0, [r3, #12]
10009628:	3404      	adds	r4, #4
	factory_trim[4] = (float)(2620/1<<fs)*(pow( 1.01 , ((float)stest[4] - 1.0) )); // FT[Yg] factory trim calculation
	factory_trim[5] = (float)(2620/1<<fs)*(pow( 1.01 , ((float)stest[5] - 1.0) )); // FT[Zg] factory trim calculation
	
	// Report results as a ratio of (STR - FT)/FT; the change from Factory Trim of the Self-Test Response
	// To get percent, must multiply by 100
	for (int i = 0; i < 3; i++) {
1000962a:	2c0c      	cmp	r4, #12
1000962c:	d1c3      	bne.n	100095b6 <sms_mpu_selftest+0x312>
		destination[i]   = 100.0*((float)(a_stavg[i] - a_avg[i]))/factory_trim[i] - 100.;   // Report percent differences
		destination[i+3] = 100.0*((float)(g_stavg[i] - g_avg[i]))/factory_trim[i+3] - 100.; // Report percent differences
	}

}
1000962e:	b01d      	add	sp, #116	; 0x74
10009630:	bc3c      	pop	{r2, r3, r4, r5}
10009632:	4690      	mov	r8, r2
10009634:	4699      	mov	r9, r3
10009636:	46a2      	mov	sl, r4
10009638:	46ab      	mov	fp, r5
1000963a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000963c:	10011c69 	.word	0x10011c69
10009640:	10008d4d 	.word	0x10008d4d
10009644:	10008bd5 	.word	0x10008bd5
10009648:	100147b9 	.word	0x100147b9
1000964c:	10009c7d 	.word	0x10009c7d
10009650:	100091c9 	.word	0x100091c9
10009654:	10014f8d 	.word	0x10014f8d
10009658:	10016be5 	.word	0x10016be5
1000965c:	1001639d 	.word	0x1001639d
10009660:	3ff00000 	.word	0x3ff00000
10009664:	c28f5c29 	.word	0xc28f5c29
10009668:	3ff028f5 	.word	0x3ff028f5
1000966c:	100109ad 	.word	0x100109ad
10009670:	10015ea9 	.word	0x10015ea9
10009674:	40a47800 	.word	0x40a47800
10009678:	10016c8d 	.word	0x10016c8d
1000967c:	10014efd 	.word	0x10014efd
10009680:	10015661 	.word	0x10015661
10009684:	40590000 	.word	0x40590000

10009688 <sms_mpu_check>:
		mpu_device.new_int = true;
		send_plf_int_msg_ind(SMS_MPU_DRDY_PIN, GPIO_CALLBACK_RISING, NULL, 0);
	}
}

int sms_mpu_check(void) {
10009688:	b510      	push	{r4, lr}
	int retVal = -1;
	uint8_t c = readByte(MPU9250_ADDRESS, WHO_AM_I_MPU9250);
1000968a:	2175      	movs	r1, #117	; 0x75
1000968c:	2069      	movs	r0, #105	; 0x69
1000968e:	4b06      	ldr	r3, [pc, #24]	; (100096a8 <sms_mpu_check+0x20>)
10009690:	4798      	blx	r3
	if(c == 0x71) {
10009692:	2871      	cmp	r0, #113	; 0x71
10009694:	d104      	bne.n	100096a0 <sms_mpu_check+0x18>
		//DBG_LOG("[sms_mpu_check]\t\tMPU-9250 is online...");
		sms_mpu_selftest(mpu_device.hal.self_test);
10009696:	4805      	ldr	r0, [pc, #20]	; (100096ac <sms_mpu_check+0x24>)
10009698:	4b05      	ldr	r3, [pc, #20]	; (100096b0 <sms_mpu_check+0x28>)
1000969a:	4798      	blx	r3
		//DBG_LOG("[sms_mpu_check]\t\tMPU-9250 self-test passed");
		retVal = 0;
1000969c:	2000      	movs	r0, #0
1000969e:	e001      	b.n	100096a4 <sms_mpu_check+0x1c>
		send_plf_int_msg_ind(SMS_MPU_DRDY_PIN, GPIO_CALLBACK_RISING, NULL, 0);
	}
}

int sms_mpu_check(void) {
	int retVal = -1;
100096a0:	2001      	movs	r0, #1
100096a2:	4240      	negs	r0, r0
		sms_mpu_selftest(mpu_device.hal.self_test);
		//DBG_LOG("[sms_mpu_check]\t\tMPU-9250 self-test passed");
		retVal = 0;
	}
	return retVal;
}
100096a4:	bd10      	pop	{r4, pc}
100096a6:	46c0      	nop			; (mov r8, r8)
100096a8:	100091c9 	.word	0x100091c9
100096ac:	100199e4 	.word	0x100199e4
100096b0:	100092a5 	.word	0x100092a5

100096b4 <sms_led_switch_on>:
    sms_led_switch_off(SMS_LED_0_PIN);
}


void sms_led_switch_on(enum sms_leds led)
{
100096b4:	b510      	push	{r4, lr}
    gpio_pin_set_output_level(led, SMS_LED_ACTIVE);
100096b6:	2100      	movs	r1, #0
100096b8:	4b01      	ldr	r3, [pc, #4]	; (100096c0 <sms_led_switch_on+0xc>)
100096ba:	4798      	blx	r3
}
100096bc:	bd10      	pop	{r4, pc}
100096be:	46c0      	nop			; (mov r8, r8)
100096c0:	1000a4d9 	.word	0x1000a4d9

100096c4 <sms_led_switch_off>:


void sms_led_switch_off(enum sms_leds led)
{
100096c4:	b510      	push	{r4, lr}
    gpio_pin_set_output_level(led, SMS_LED_INACTIVE);
100096c6:	2101      	movs	r1, #1
100096c8:	4b01      	ldr	r3, [pc, #4]	; (100096d0 <sms_led_switch_off+0xc>)
100096ca:	4798      	blx	r3
}
100096cc:	bd10      	pop	{r4, pc}
100096ce:	46c0      	nop			; (mov r8, r8)
100096d0:	1000a4d9 	.word	0x1000a4d9

100096d4 <sms_led_gpio_init>:
 */ 

#include "sms_led.h"

void sms_led_gpio_init(void)
{
100096d4:	b510      	push	{r4, lr}
100096d6:	b082      	sub	sp, #8
    struct gpio_config config_gpio_pin;

    /* LED0 @ GPIO_LP_GPIO_22 */
    gpio_get_config_defaults(&config_gpio_pin);
100096d8:	ac01      	add	r4, sp, #4
100096da:	0020      	movs	r0, r4
100096dc:	4b06      	ldr	r3, [pc, #24]	; (100096f8 <sms_led_gpio_init+0x24>)
100096de:	4798      	blx	r3
    config_gpio_pin.direction = GPIO_PIN_DIR_OUTPUT;
100096e0:	2301      	movs	r3, #1
100096e2:	7023      	strb	r3, [r4, #0]
    if(gpio_pin_set_config(SMS_LED_0_PIN, &config_gpio_pin) != STATUS_OK) {
100096e4:	0021      	movs	r1, r4
100096e6:	2016      	movs	r0, #22
100096e8:	4b04      	ldr	r3, [pc, #16]	; (100096fc <sms_led_gpio_init+0x28>)
100096ea:	4798      	blx	r3
        DBG_LOG_DEV("[sms_led_gpio_init]\tproblem while setting up led0");
    }
    sms_led_switch_off(SMS_LED_0_PIN);
100096ec:	2016      	movs	r0, #22
100096ee:	4b04      	ldr	r3, [pc, #16]	; (10009700 <sms_led_gpio_init+0x2c>)
100096f0:	4798      	blx	r3
}
100096f2:	b002      	add	sp, #8
100096f4:	bd10      	pop	{r4, pc}
100096f6:	46c0      	nop			; (mov r8, r8)
100096f8:	1000a311 	.word	0x1000a311
100096fc:	1000a321 	.word	0x1000a321
10009700:	100096c5 	.word	0x100096c5

10009704 <sms_led_blink_start>:
    return gpio_pin_get_output_level(led);
}


void sms_led_blink_start(enum sms_leds led)
{
10009704:	b510      	push	{r4, lr}
    sms_led_switch_on(led);
10009706:	4b0c      	ldr	r3, [pc, #48]	; (10009738 <sms_led_blink_start+0x34>)
10009708:	4798      	blx	r3
    sms_led_blink_cnt = 0;
1000970a:	2200      	movs	r2, #0
1000970c:	4b0b      	ldr	r3, [pc, #44]	; (1000973c <sms_led_blink_start+0x38>)
1000970e:	701a      	strb	r2, [r3, #0]
    uint32_t delay = 0;
    switch(timer2_current_mode) {
10009710:	4b0b      	ldr	r3, [pc, #44]	; (10009740 <sms_led_blink_start+0x3c>)
10009712:	781b      	ldrb	r3, [r3, #0]
10009714:	b2db      	uxtb	r3, r3
10009716:	2b02      	cmp	r3, #2
10009718:	d002      	beq.n	10009720 <sms_led_blink_start+0x1c>
1000971a:	2b03      	cmp	r3, #3
1000971c:	d002      	beq.n	10009724 <sms_led_blink_start+0x20>
1000971e:	e004      	b.n	1000972a <sms_led_blink_start+0x26>
        case TIMER2_MODE_LED_STARTUP:
        delay = SMS_BLINK_STARTUP_MS;
10009720:	2164      	movs	r1, #100	; 0x64
10009722:	e003      	b.n	1000972c <sms_led_blink_start+0x28>
        break;
        
        case TIMER2_MODE_LED_SHUTDOWN:
        delay = SMS_BLINK_SHTDWN_MS;
10009724:	21c8      	movs	r1, #200	; 0xc8
10009726:	0049      	lsls	r1, r1, #1
        break;
10009728:	e000      	b.n	1000972c <sms_led_blink_start+0x28>

void sms_led_blink_start(enum sms_leds led)
{
    sms_led_switch_on(led);
    sms_led_blink_cnt = 0;
    uint32_t delay = 0;
1000972a:	2100      	movs	r1, #0
        
        default:
        break;
    }

    sms_dualtimer_start(TIMER_UNIT_MS, delay, DUALTIMER_TIMER2);
1000972c:	2201      	movs	r2, #1
1000972e:	2001      	movs	r0, #1
10009730:	4b04      	ldr	r3, [pc, #16]	; (10009744 <sms_led_blink_start+0x40>)
10009732:	4798      	blx	r3
}
10009734:	bd10      	pop	{r4, pc}
10009736:	46c0      	nop			; (mov r8, r8)
10009738:	100096b5 	.word	0x100096b5
1000973c:	10019c44 	.word	0x10019c44
10009740:	10019bf7 	.word	0x10019bf7
10009744:	10009bf1 	.word	0x10009bf1

10009748 <sms_pressure_init_variables>:

#include "sms_pressure.h"

void sms_pressure_init_variables(void)
{
	pressure_device.hal.current_state = MS58_STATE_NONE;
10009748:	4b06      	ldr	r3, [pc, #24]	; (10009764 <sms_pressure_init_variables+0x1c>)
1000974a:	2200      	movs	r2, #0
1000974c:	2125      	movs	r1, #37	; 0x25
1000974e:	545a      	strb	r2, [r3, r1]
	pressure_device.state = PRESSURE_STATE_OFF;
10009750:	3106      	adds	r1, #6
10009752:	545a      	strb	r2, [r3, r1]
	pressure_device.rts = false;
10009754:	3901      	subs	r1, #1
10009756:	545a      	strb	r2, [r3, r1]
	pressure_device.int_enabled = false;
10009758:	3902      	subs	r1, #2
1000975a:	545a      	strb	r2, [r3, r1]
	pressure_device.new_int = false;
1000975c:	3101      	adds	r1, #1
1000975e:	545a      	strb	r2, [r3, r1]
}
10009760:	4770      	bx	lr
10009762:	46c0      	nop			; (mov r8, r8)
10009764:	10019b5c 	.word	0x10019b5c

10009768 <sms_pressure_ms58_reset>:
    }
    return STATUS_ERR_IO;
}

void sms_pressure_ms58_reset(void)
{
10009768:	b510      	push	{r4, lr}
1000976a:	b082      	sub	sp, #8
    //DBG_LOG_DEV("[sms_pressure_ms58_reset]\twriting reset command");
    spi_wdata[0] = MS58_RESET;
1000976c:	4a05      	ldr	r2, [pc, #20]	; (10009784 <sms_pressure_ms58_reset+0x1c>)
1000976e:	231e      	movs	r3, #30
10009770:	7013      	strb	r3, [r2, #0]
    sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 1);
10009772:	3b1d      	subs	r3, #29
10009774:	9300      	str	r3, [sp, #0]
10009776:	4b04      	ldr	r3, [pc, #16]	; (10009788 <sms_pressure_ms58_reset+0x20>)
10009778:	4904      	ldr	r1, [pc, #16]	; (1000978c <sms_pressure_ms58_reset+0x24>)
1000977a:	4805      	ldr	r0, [pc, #20]	; (10009790 <sms_pressure_ms58_reset+0x28>)
1000977c:	4c05      	ldr	r4, [pc, #20]	; (10009794 <sms_pressure_ms58_reset+0x2c>)
1000977e:	47a0      	blx	r4
}
10009780:	b002      	add	sp, #8
10009782:	bd10      	pop	{r4, pc}
10009784:	10019b4c 	.word	0x10019b4c
10009788:	10019b38 	.word	0x10019b38
1000978c:	10019bfc 	.word	0x10019bfc
10009790:	10019c08 	.word	0x10019c08
10009794:	10009ac1 	.word	0x10009ac1

10009798 <sms_pressure_ms58_read_prom>:
		//if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
	}
}

enum status_code sms_pressure_ms58_read_prom(void)
{
10009798:	b5f0      	push	{r4, r5, r6, r7, lr}
1000979a:	4657      	mov	r7, sl
1000979c:	b480      	push	{r7}
1000979e:	b082      	sub	sp, #8
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] reading bytes... ");
    spi_wdata[0] = MS58_PROM_READ_1;
100097a0:	4d37      	ldr	r5, [pc, #220]	; (10009880 <sms_pressure_ms58_read_prom+0xe8>)
100097a2:	23a2      	movs	r3, #162	; 0xa2
100097a4:	702b      	strb	r3, [r5, #0]
    spi_wdata[1] = 0x00;
100097a6:	2300      	movs	r3, #0
100097a8:	706b      	strb	r3, [r5, #1]
    spi_wdata[2] = 0x00;
100097aa:	70ab      	strb	r3, [r5, #2]
    sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3);
100097ac:	4c35      	ldr	r4, [pc, #212]	; (10009884 <sms_pressure_ms58_read_prom+0xec>)
100097ae:	3303      	adds	r3, #3
100097b0:	469a      	mov	sl, r3
100097b2:	9300      	str	r3, [sp, #0]
100097b4:	0023      	movs	r3, r4
100097b6:	002a      	movs	r2, r5
100097b8:	4933      	ldr	r1, [pc, #204]	; (10009888 <sms_pressure_ms58_read_prom+0xf0>)
100097ba:	4834      	ldr	r0, [pc, #208]	; (1000988c <sms_pressure_ms58_read_prom+0xf4>)
100097bc:	4f34      	ldr	r7, [pc, #208]	; (10009890 <sms_pressure_ms58_read_prom+0xf8>)
100097be:	47b8      	blx	r7
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.hal.prom_values[1] = (spi_rdata[1] << 8) | (spi_rdata[2]);
100097c0:	4e34      	ldr	r6, [pc, #208]	; (10009894 <sms_pressure_ms58_read_prom+0xfc>)
100097c2:	7863      	ldrb	r3, [r4, #1]
100097c4:	021b      	lsls	r3, r3, #8
100097c6:	78a2      	ldrb	r2, [r4, #2]
100097c8:	4313      	orrs	r3, r2
100097ca:	80f3      	strh	r3, [r6, #6]

    spi_wdata[0] = MS58_PROM_READ_2;
100097cc:	23a4      	movs	r3, #164	; 0xa4
100097ce:	702b      	strb	r3, [r5, #0]
    sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3);
100097d0:	4653      	mov	r3, sl
100097d2:	9300      	str	r3, [sp, #0]
100097d4:	0023      	movs	r3, r4
100097d6:	002a      	movs	r2, r5
100097d8:	492b      	ldr	r1, [pc, #172]	; (10009888 <sms_pressure_ms58_read_prom+0xf0>)
100097da:	482c      	ldr	r0, [pc, #176]	; (1000988c <sms_pressure_ms58_read_prom+0xf4>)
100097dc:	47b8      	blx	r7
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r  wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r  wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.hal.prom_values[2] = (spi_rdata[1] << 8) | (spi_rdata[2]);
100097de:	7863      	ldrb	r3, [r4, #1]
100097e0:	021b      	lsls	r3, r3, #8
100097e2:	78a2      	ldrb	r2, [r4, #2]
100097e4:	4313      	orrs	r3, r2
100097e6:	8133      	strh	r3, [r6, #8]

    spi_wdata[0] = MS58_PROM_READ_3;
100097e8:	23a6      	movs	r3, #166	; 0xa6
100097ea:	702b      	strb	r3, [r5, #0]
    sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3);
100097ec:	4653      	mov	r3, sl
100097ee:	9300      	str	r3, [sp, #0]
100097f0:	0023      	movs	r3, r4
100097f2:	002a      	movs	r2, r5
100097f4:	4924      	ldr	r1, [pc, #144]	; (10009888 <sms_pressure_ms58_read_prom+0xf0>)
100097f6:	4825      	ldr	r0, [pc, #148]	; (1000988c <sms_pressure_ms58_read_prom+0xf4>)
100097f8:	47b8      	blx	r7
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r  wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r  wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.hal.prom_values[3] = (spi_rdata[1] << 8) | (spi_rdata[2]);
100097fa:	7863      	ldrb	r3, [r4, #1]
100097fc:	021b      	lsls	r3, r3, #8
100097fe:	78a2      	ldrb	r2, [r4, #2]
10009800:	4313      	orrs	r3, r2
10009802:	8173      	strh	r3, [r6, #10]

    spi_wdata[0] = MS58_PROM_READ_4;
10009804:	23a8      	movs	r3, #168	; 0xa8
10009806:	702b      	strb	r3, [r5, #0]
    sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3);
10009808:	4653      	mov	r3, sl
1000980a:	9300      	str	r3, [sp, #0]
1000980c:	0023      	movs	r3, r4
1000980e:	002a      	movs	r2, r5
10009810:	491d      	ldr	r1, [pc, #116]	; (10009888 <sms_pressure_ms58_read_prom+0xf0>)
10009812:	481e      	ldr	r0, [pc, #120]	; (1000988c <sms_pressure_ms58_read_prom+0xf4>)
10009814:	47b8      	blx	r7
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r  wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r  wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.hal.prom_values[4] = (spi_rdata[1] << 8) | (spi_rdata[2]);
10009816:	7863      	ldrb	r3, [r4, #1]
10009818:	021b      	lsls	r3, r3, #8
1000981a:	78a2      	ldrb	r2, [r4, #2]
1000981c:	4313      	orrs	r3, r2
1000981e:	81b3      	strh	r3, [r6, #12]

    spi_wdata[0] = MS58_PROM_READ_5;
10009820:	23aa      	movs	r3, #170	; 0xaa
10009822:	702b      	strb	r3, [r5, #0]
    sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3);
10009824:	4653      	mov	r3, sl
10009826:	9300      	str	r3, [sp, #0]
10009828:	0023      	movs	r3, r4
1000982a:	002a      	movs	r2, r5
1000982c:	4916      	ldr	r1, [pc, #88]	; (10009888 <sms_pressure_ms58_read_prom+0xf0>)
1000982e:	4817      	ldr	r0, [pc, #92]	; (1000988c <sms_pressure_ms58_read_prom+0xf4>)
10009830:	47b8      	blx	r7
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r  wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r  wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.hal.prom_values[5] = (spi_rdata[1] << 8) | (spi_rdata[2]);
10009832:	7863      	ldrb	r3, [r4, #1]
10009834:	021b      	lsls	r3, r3, #8
10009836:	78a2      	ldrb	r2, [r4, #2]
10009838:	4313      	orrs	r3, r2
1000983a:	81f3      	strh	r3, [r6, #14]

    spi_wdata[0] = MS58_PROM_READ_6;
1000983c:	23ac      	movs	r3, #172	; 0xac
1000983e:	702b      	strb	r3, [r5, #0]
    sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3);
10009840:	4653      	mov	r3, sl
10009842:	9300      	str	r3, [sp, #0]
10009844:	0023      	movs	r3, r4
10009846:	002a      	movs	r2, r5
10009848:	490f      	ldr	r1, [pc, #60]	; (10009888 <sms_pressure_ms58_read_prom+0xf0>)
1000984a:	4810      	ldr	r0, [pc, #64]	; (1000988c <sms_pressure_ms58_read_prom+0xf4>)
1000984c:	47b8      	blx	r7
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r  wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r  wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.hal.prom_values[6] = (spi_rdata[1] << 8) | (spi_rdata[2]);
1000984e:	7863      	ldrb	r3, [r4, #1]
10009850:	021b      	lsls	r3, r3, #8
10009852:	78a2      	ldrb	r2, [r4, #2]
10009854:	4313      	orrs	r3, r2
10009856:	8233      	strh	r3, [r6, #16]

    spi_wdata[0] = MS58_PROM_READ_7;
10009858:	23ae      	movs	r3, #174	; 0xae
1000985a:	702b      	strb	r3, [r5, #0]
    sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3);
1000985c:	4653      	mov	r3, sl
1000985e:	9300      	str	r3, [sp, #0]
10009860:	0023      	movs	r3, r4
10009862:	002a      	movs	r2, r5
10009864:	4908      	ldr	r1, [pc, #32]	; (10009888 <sms_pressure_ms58_read_prom+0xf0>)
10009866:	4809      	ldr	r0, [pc, #36]	; (1000988c <sms_pressure_ms58_read_prom+0xf4>)
10009868:	47b8      	blx	r7
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r  wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r  wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.hal.prom_values[7] = (spi_rdata[1] << 8) | (spi_rdata[2]);
1000986a:	7863      	ldrb	r3, [r4, #1]
1000986c:	021b      	lsls	r3, r3, #8
1000986e:	78a2      	ldrb	r2, [r4, #2]
10009870:	4313      	orrs	r3, r2
10009872:	8273      	strh	r3, [r6, #18]
    //for(uint8_t i = 1; i < MS58_PROM_VALUES_MAX; i++) {
        //DBG_LOG_DEV("  C%d -> %d", (i+1), ms58_device.prom_values[i]);
    //}

    return STATUS_OK;
}
10009874:	2000      	movs	r0, #0
10009876:	b002      	add	sp, #8
10009878:	bc04      	pop	{r2}
1000987a:	4692      	mov	sl, r2
1000987c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000987e:	46c0      	nop			; (mov r8, r8)
10009880:	10019b4c 	.word	0x10019b4c
10009884:	10019b38 	.word	0x10019b38
10009888:	10019bfc 	.word	0x10019bfc
1000988c:	10019c08 	.word	0x10019c08
10009890:	10009ac1 	.word	0x10009ac1
10009894:	10019b5c 	.word	0x10019b5c

10009898 <sms_pressure_init>:
    
    ulp_ready = true;
}

enum status_code sms_pressure_init(void)
{
10009898:	b510      	push	{r4, lr}
    /* Read the PROM values */
    if(sms_pressure_ms58_read_prom() == STATUS_OK) {
1000989a:	4b0a      	ldr	r3, [pc, #40]	; (100098c4 <sms_pressure_init+0x2c>)
1000989c:	4798      	blx	r3
1000989e:	2800      	cmp	r0, #0
100098a0:	d10d      	bne.n	100098be <sms_pressure_init+0x26>
        pressure_device.hal.init_ok = true;
100098a2:	4b09      	ldr	r3, [pc, #36]	; (100098c8 <sms_pressure_init+0x30>)
100098a4:	2201      	movs	r2, #1
100098a6:	705a      	strb	r2, [r3, #1]
        pressure_device.hal.current_state = MS58_STATE_READY;
100098a8:	2402      	movs	r4, #2
100098aa:	2125      	movs	r1, #37	; 0x25
100098ac:	545c      	strb	r4, [r3, r1]
		pressure_device.int_enabled = true;
100098ae:	3103      	adds	r1, #3
100098b0:	545a      	strb	r2, [r3, r1]
		pressure_device.new_int = false;
100098b2:	2200      	movs	r2, #0
100098b4:	3101      	adds	r1, #1
100098b6:	545a      	strb	r2, [r3, r1]
		pressure_device.rts = false;
100098b8:	3101      	adds	r1, #1
100098ba:	545a      	strb	r2, [r3, r1]
        return STATUS_OK;
100098bc:	e000      	b.n	100098c0 <sms_pressure_init+0x28>
    }
    return STATUS_ERR_IO;
100098be:	2010      	movs	r0, #16
}
100098c0:	bd10      	pop	{r4, pc}
100098c2:	46c0      	nop			; (mov r8, r8)
100098c4:	10009799 	.word	0x10009799
100098c8:	10019b5c 	.word	0x10019b5c

100098cc <sms_pressure_startup>:
    /* Disable power supply by default */
    gpio_pin_set_output_level(SMS_PRESSURE_VCC_PIN, false);
}

void sms_pressure_startup(void)
{
100098cc:	b510      	push	{r4, lr}
    DBG_LOG_DEV("[sms_pressure_startup]\t\tStarting pressure sensor");
    //gpio_pin_set_output_level(SMS_PRESSURE_VCC_PIN, true); // switch on MS58 pressure sensor
    /* Disable buttons for reset time (~3 ms) to avoid conflict with dualtimer1 */
    sms_button_toggle_callback(SMS_BTN_INT_DISABLE, SMS_BTN_INT_DISABLE);
100098ce:	2101      	movs	r1, #1
100098d0:	2001      	movs	r0, #1
100098d2:	4b10      	ldr	r3, [pc, #64]	; (10009914 <sms_pressure_startup+0x48>)
100098d4:	4798      	blx	r3
    pressure_device.hal.current_state = MS58_STATE_RESETTING;
100098d6:	2101      	movs	r1, #1
100098d8:	2325      	movs	r3, #37	; 0x25
100098da:	4a0f      	ldr	r2, [pc, #60]	; (10009918 <sms_pressure_startup+0x4c>)
100098dc:	54d1      	strb	r1, [r2, r3]
    /* Write the reset command to MS58 */
    sms_pressure_ms58_reset();
100098de:	4b0f      	ldr	r3, [pc, #60]	; (1000991c <sms_pressure_startup+0x50>)
100098e0:	4798      	blx	r3
    delay_ms(3);
100098e2:	2003      	movs	r0, #3
100098e4:	4b0e      	ldr	r3, [pc, #56]	; (10009920 <sms_pressure_startup+0x54>)
100098e6:	4798      	blx	r3
    if(sms_pressure_init() != STATUS_OK) {
100098e8:	4b0e      	ldr	r3, [pc, #56]	; (10009924 <sms_pressure_startup+0x58>)
100098ea:	4798      	blx	r3
100098ec:	2800      	cmp	r0, #0
100098ee:	d000      	beq.n	100098f2 <sms_pressure_startup+0x26>
100098f0:	e7fe      	b.n	100098f0 <sms_pressure_startup+0x24>
        DBG_LOG_DEV("[sms_pressure_startup]\t\t\tFailed to initialize pressure device");
        pressure_device.hal.init_ok = false;
        while(1){};
    }
    pressure_device.hal.current_state = MS58_STATE_READY;
100098f2:	4b09      	ldr	r3, [pc, #36]	; (10009918 <sms_pressure_startup+0x4c>)
100098f4:	2102      	movs	r1, #2
100098f6:	2225      	movs	r2, #37	; 0x25
100098f8:	5499      	strb	r1, [r3, r2]
    pressure_device.hal.init_ok = true;
100098fa:	2401      	movs	r4, #1
100098fc:	705c      	strb	r4, [r3, #1]
    sms_working_mode = SMS_MODE_COMPLETE;
100098fe:	3a1e      	subs	r2, #30
10009900:	4b09      	ldr	r3, [pc, #36]	; (10009928 <sms_pressure_startup+0x5c>)
10009902:	701a      	strb	r2, [r3, #0]
    sms_sensors_interrupt_toggle(true, true);
10009904:	3901      	subs	r1, #1
10009906:	2001      	movs	r0, #1
10009908:	4b08      	ldr	r3, [pc, #32]	; (1000992c <sms_pressure_startup+0x60>)
1000990a:	4798      	blx	r3
    
    ulp_ready = true;
1000990c:	4b08      	ldr	r3, [pc, #32]	; (10009930 <sms_pressure_startup+0x64>)
1000990e:	701c      	strb	r4, [r3, #0]
}
10009910:	bd10      	pop	{r4, pc}
10009912:	46c0      	nop			; (mov r8, r8)
10009914:	100089cd 	.word	0x100089cd
10009918:	10019b5c 	.word	0x10019b5c
1000991c:	10009769 	.word	0x10009769
10009920:	10009c7d 	.word	0x10009c7d
10009924:	10009899 	.word	0x10009899
10009928:	10019ab4 	.word	0x10019ab4
1000992c:	10009985 	.word	0x10009985
10009930:	10019ab5 	.word	0x10019ab5

10009934 <sms_pressure_define_services>:

    DBG_LOG_DEV("[sms_pressure_ms58_calculate] temperature = %ld  pressure = %ld", pressure_device.hal.temperature, pressure_device.hal.pressure);
}

void sms_pressure_define_services(void)
{
10009934:	b510      	push	{r4, lr}
10009936:	b082      	sub	sp, #8
    at_ble_status_t status;
    uint8_t init_value = 0;
10009938:	466b      	mov	r3, sp
1000993a:	1dda      	adds	r2, r3, #7
1000993c:	2300      	movs	r3, #0
1000993e:	7013      	strb	r3, [r2, #0]
    sms_ble_service_init(BLE_SERV_PRESSURE, &pressure_device.service_handler, &init_value);
10009940:	4c09      	ldr	r4, [pc, #36]	; (10009968 <sms_pressure_define_services+0x34>)
10009942:	0021      	movs	r1, r4
10009944:	2001      	movs	r0, #1
10009946:	4b09      	ldr	r3, [pc, #36]	; (1000996c <sms_pressure_define_services+0x38>)
10009948:	4798      	blx	r3
    if((status = sms_ble_primary_service_define(&pressure_device.service_handler)) != AT_BLE_SUCCESS) {
1000994a:	0020      	movs	r0, r4
1000994c:	4b08      	ldr	r3, [pc, #32]	; (10009970 <sms_pressure_define_services+0x3c>)
1000994e:	4798      	blx	r3
10009950:	1e04      	subs	r4, r0, #0
10009952:	d006      	beq.n	10009962 <sms_pressure_define_services+0x2e>
        DBG_LOG("[sms_pressure_define_services]\tServices defining failed, reason 0x%x", status);
10009954:	4807      	ldr	r0, [pc, #28]	; (10009974 <sms_pressure_define_services+0x40>)
10009956:	4b08      	ldr	r3, [pc, #32]	; (10009978 <sms_pressure_define_services+0x44>)
10009958:	4798      	blx	r3
1000995a:	0021      	movs	r1, r4
1000995c:	4807      	ldr	r0, [pc, #28]	; (1000997c <sms_pressure_define_services+0x48>)
1000995e:	4b08      	ldr	r3, [pc, #32]	; (10009980 <sms_pressure_define_services+0x4c>)
10009960:	4798      	blx	r3
    }
    else {
        DBG_LOG_DEV("[sms_pressure_define_services]\tServices defined, SMS pressure handle: %d", pressure_device.service_handler.serv_handle);
    }
10009962:	b002      	add	sp, #8
10009964:	bd10      	pop	{r4, pc}
10009966:	46c0      	nop			; (mov r8, r8)
10009968:	10019b88 	.word	0x10019b88
1000996c:	100087ad 	.word	0x100087ad
10009970:	10008789 	.word	0x10008789
10009974:	10016de8 	.word	0x10016de8
10009978:	100127bd 	.word	0x100127bd
1000997c:	100170dc 	.word	0x100170dc
10009980:	1001269d 	.word	0x1001269d

10009984 <sms_sensors_interrupt_toggle>:
 */ 

#include "sms_sensors.h"

/* Sensors-related functions */
void sms_sensors_interrupt_toggle(bool mpu_int, bool press_int) {
10009984:	b510      	push	{r4, lr}
10009986:	000c      	movs	r4, r1
    /* IMU --> IMU_DRDY */
    if(mpu_int) {
10009988:	2800      	cmp	r0, #0
1000998a:	d007      	beq.n	1000999c <sms_sensors_interrupt_toggle+0x18>
        mpu_device.state = MPU_STATE_ON;
1000998c:	2102      	movs	r1, #2
1000998e:	2371      	movs	r3, #113	; 0x71
10009990:	4a15      	ldr	r2, [pc, #84]	; (100099e8 <sms_sensors_interrupt_toggle+0x64>)
10009992:	54d1      	strb	r1, [r2, r3]
        gpio_enable_callback(SMS_MPU_DRDY_PIN);
10009994:	201e      	movs	r0, #30
10009996:	4b15      	ldr	r3, [pc, #84]	; (100099ec <sms_sensors_interrupt_toggle+0x68>)
10009998:	4798      	blx	r3
1000999a:	e006      	b.n	100099aa <sms_sensors_interrupt_toggle+0x26>
    }
    else {
        mpu_device.state = MPU_STATE_OFF;
1000999c:	2100      	movs	r1, #0
1000999e:	2371      	movs	r3, #113	; 0x71
100099a0:	4a11      	ldr	r2, [pc, #68]	; (100099e8 <sms_sensors_interrupt_toggle+0x64>)
100099a2:	54d1      	strb	r1, [r2, r3]
        gpio_disable_callback(SMS_MPU_DRDY_PIN);
100099a4:	201e      	movs	r0, #30
100099a6:	4b12      	ldr	r3, [pc, #72]	; (100099f0 <sms_sensors_interrupt_toggle+0x6c>)
100099a8:	4798      	blx	r3
     * Note: Since there is no direct mechanism to simply enable and disable
     *       the AON sleep timer interruption, we have to initialize it each
     *       time (and it starts running) and register the corresponding
     *       callback (and it enables the interrupt)
     */
    if(press_int) {
100099aa:	2c00      	cmp	r4, #0
100099ac:	d010      	beq.n	100099d0 <sms_sensors_interrupt_toggle+0x4c>
        pressure_device.hal.current_state = MS58_STATE_CONV_PRESSURE;
100099ae:	4b11      	ldr	r3, [pc, #68]	; (100099f4 <sms_sensors_interrupt_toggle+0x70>)
100099b0:	2103      	movs	r1, #3
100099b2:	2225      	movs	r2, #37	; 0x25
100099b4:	5499      	strb	r1, [r3, r2]
        pressure_device.state = PRESSURE_STATE_ON;
100099b6:	3901      	subs	r1, #1
100099b8:	3206      	adds	r2, #6
100099ba:	5499      	strb	r1, [r3, r2]
        sms_timer_aon_init(SMS_PRESSURE_CONVERT_MS, AON_SLEEP_TIMER_RELOAD_MODE);
100099bc:	2100      	movs	r1, #0
100099be:	480e      	ldr	r0, [pc, #56]	; (100099f8 <sms_sensors_interrupt_toggle+0x74>)
100099c0:	4b0e      	ldr	r3, [pc, #56]	; (100099fc <sms_sensors_interrupt_toggle+0x78>)
100099c2:	4798      	blx	r3
        sms_timer_aon_register_callback();
100099c4:	4b0e      	ldr	r3, [pc, #56]	; (10009a00 <sms_sensors_interrupt_toggle+0x7c>)
100099c6:	4798      	blx	r3
        sensors_active = true;
100099c8:	2201      	movs	r2, #1
100099ca:	4b0e      	ldr	r3, [pc, #56]	; (10009a04 <sms_sensors_interrupt_toggle+0x80>)
100099cc:	701a      	strb	r2, [r3, #0]
100099ce:	e00a      	b.n	100099e6 <sms_sensors_interrupt_toggle+0x62>
    }
    else {
        pressure_device.hal.current_state = MS58_STATE_READY;
100099d0:	2102      	movs	r1, #2
100099d2:	2325      	movs	r3, #37	; 0x25
100099d4:	4a07      	ldr	r2, [pc, #28]	; (100099f4 <sms_sensors_interrupt_toggle+0x70>)
100099d6:	54d1      	strb	r1, [r2, r3]
        sms_timer_aon_disable();
100099d8:	4b0b      	ldr	r3, [pc, #44]	; (10009a08 <sms_sensors_interrupt_toggle+0x84>)
100099da:	4798      	blx	r3
        sms_timer_aon_unregister_callback();
100099dc:	4b0b      	ldr	r3, [pc, #44]	; (10009a0c <sms_sensors_interrupt_toggle+0x88>)
100099de:	4798      	blx	r3
        sensors_active = false;
100099e0:	2200      	movs	r2, #0
100099e2:	4b08      	ldr	r3, [pc, #32]	; (10009a04 <sms_sensors_interrupt_toggle+0x80>)
100099e4:	701a      	strb	r2, [r3, #0]
    }
}
100099e6:	bd10      	pop	{r4, pc}
100099e8:	100199e0 	.word	0x100199e0
100099ec:	1000a781 	.word	0x1000a781
100099f0:	1000a7dd 	.word	0x1000a7dd
100099f4:	10019b5c 	.word	0x10019b5c
100099f8:	000003d5 	.word	0x000003d5
100099fc:	10009b25 	.word	0x10009b25
10009a00:	10009b59 	.word	0x10009b59
10009a04:	10019be8 	.word	0x10019be8
10009a08:	10009b4d 	.word	0x10009b4d
10009a0c:	10009b79 	.word	0x10009b79

10009a10 <sms_sensors_switch>:
    

void sms_sensors_switch(bool mpu_en, bool press_en)
{
10009a10:	b510      	push	{r4, lr}
10009a12:	000c      	movs	r4, r1
    /* IMU */
    if(mpu_en) {
10009a14:	2800      	cmp	r0, #0
10009a16:	d103      	bne.n	10009a20 <sms_sensors_switch+0x10>
            //mpu_device.hal.init_ok = true;
            //sms_sensors_interrupt_toggle(true, false);
        //}
    }
    else {
        gpio_pin_set_output_level(SMS_MPU_VCC_PIN, false);
10009a18:	2100      	movs	r1, #0
10009a1a:	3006      	adds	r0, #6
10009a1c:	4b07      	ldr	r3, [pc, #28]	; (10009a3c <sms_sensors_switch+0x2c>)
10009a1e:	4798      	blx	r3
    }
    
    /* Pressure */
    if(press_en) {                
10009a20:	2c00      	cmp	r4, #0
10009a22:	d006      	beq.n	10009a32 <sms_sensors_switch+0x22>
        pressure_device.hal.current_state = MS58_STATE_RESETTING;
10009a24:	2101      	movs	r1, #1
10009a26:	2325      	movs	r3, #37	; 0x25
10009a28:	4a05      	ldr	r2, [pc, #20]	; (10009a40 <sms_sensors_switch+0x30>)
10009a2a:	54d1      	strb	r1, [r2, r3]
        //pressure_device.hal.reset_done = false;
        //pressure_device.hal.init_ok = false;
        sms_pressure_startup();
10009a2c:	4b05      	ldr	r3, [pc, #20]	; (10009a44 <sms_sensors_switch+0x34>)
10009a2e:	4798      	blx	r3
10009a30:	e003      	b.n	10009a3a <sms_sensors_switch+0x2a>
    }
    else {
        gpio_pin_set_output_level(SMS_PRESSURE_VCC_PIN, false);
10009a32:	2100      	movs	r1, #0
10009a34:	2007      	movs	r0, #7
10009a36:	4b01      	ldr	r3, [pc, #4]	; (10009a3c <sms_sensors_switch+0x2c>)
10009a38:	4798      	blx	r3
    }
}
10009a3a:	bd10      	pop	{r4, pc}
10009a3c:	1000a4d9 	.word	0x1000a4d9
10009a40:	10019b5c 	.word	0x10019b5c
10009a44:	100098cd 	.word	0x100098cd

10009a48 <sms_spi_master_configure>:
 *   + mode 3 on SPI0 @ 1 MHz for MPU-9250 IMU
 * - assign SS pin for each slave device
 * - enable SPI
 */ 
void sms_spi_master_configure(void)
{
10009a48:	b530      	push	{r4, r5, lr}
10009a4a:	b08d      	sub	sp, #52	; 0x34
    //DBG_LOG_DEV("[spi_master_configure]\tconfiguring SPI masters and attaching slaves...");

    /* Initialize ms58 spi slave device */
    struct spi_config spi_master_config;
    struct spi_slave_inst_config spi_slave_ms58_config;
    spi_slave_inst_get_config_defaults(&spi_slave_ms58_config);
10009a4c:	ac01      	add	r4, sp, #4
10009a4e:	0020      	movs	r0, r4
10009a50:	4b13      	ldr	r3, [pc, #76]	; (10009aa0 <sms_spi_master_configure+0x58>)
10009a52:	4798      	blx	r3
    spi_slave_ms58_config.ss_pin = SMS_PRESSURE_SPI_SS_PIN;
10009a54:	2310      	movs	r3, #16
10009a56:	7023      	strb	r3, [r4, #0]
    spi_attach_slave(&spi_slave_ms58_instance, &spi_slave_ms58_config);
10009a58:	0021      	movs	r1, r4
10009a5a:	4812      	ldr	r0, [pc, #72]	; (10009aa4 <sms_spi_master_configure+0x5c>)
10009a5c:	4b12      	ldr	r3, [pc, #72]	; (10009aa8 <sms_spi_master_configure+0x60>)
10009a5e:	4798      	blx	r3
    

    /* Initialize SPI1 master for ms58 */
    spi_get_config_defaults(&spi_master_config);
10009a60:	ac02      	add	r4, sp, #8
10009a62:	0020      	movs	r0, r4
10009a64:	4b11      	ldr	r3, [pc, #68]	; (10009aac <sms_spi_master_configure+0x64>)
10009a66:	4798      	blx	r3
    spi_master_config.clock_divider = SPI_MASTER_MS58_CLOCK_DIV;
10009a68:	2368      	movs	r3, #104	; 0x68
10009a6a:	7123      	strb	r3, [r4, #4]
    spi_master_config.transfer_mode = SPI_MASTER_MS58_MODE;
10009a6c:	2300      	movs	r3, #0
10009a6e:	70a3      	strb	r3, [r4, #2]
    spi_master_config.pin_number_pad[0] = SPI_MASTER_MS58_PIN_SCK;
10009a70:	3311      	adds	r3, #17
10009a72:	60a3      	str	r3, [r4, #8]
    spi_master_config.pinmux_sel_pad[0] = SPI_MASTER_MS58_MUX_SCK;
10009a74:	3b0d      	subs	r3, #13
10009a76:	61a3      	str	r3, [r4, #24]
    spi_master_config.pin_number_pad[1] = SPI_MASTER_MS58_PIN_MOSI;
10009a78:	2213      	movs	r2, #19
10009a7a:	60e2      	str	r2, [r4, #12]
    spi_master_config.pinmux_sel_pad[1] = SPI_MASTER_MS58_MUX_MOSI;
10009a7c:	61e3      	str	r3, [r4, #28]
    spi_master_config.pin_number_pad[2] = SPI_MASTER_MS58_PIN_SSN;
10009a7e:	3a14      	subs	r2, #20
10009a80:	6122      	str	r2, [r4, #16]
    spi_master_config.pinmux_sel_pad[2] = SPI_MASTER_MS58_MUX_SSN;
10009a82:	6222      	str	r2, [r4, #32]
    spi_master_config.pin_number_pad[3] = SPI_MASTER_MS58_MISO;
10009a84:	3213      	adds	r2, #19
10009a86:	6162      	str	r2, [r4, #20]
    spi_master_config.pinmux_sel_pad[3] = SPI_MASTER_MS58_MUX_MISO;
10009a88:	6263      	str	r3, [r4, #36]	; 0x24
    spi_init(&spi_master_ms58_instance, SPI_MASTER_MS58_PORT, &spi_master_config);
10009a8a:	4d09      	ldr	r5, [pc, #36]	; (10009ab0 <sms_spi_master_configure+0x68>)
10009a8c:	0022      	movs	r2, r4
10009a8e:	4909      	ldr	r1, [pc, #36]	; (10009ab4 <sms_spi_master_configure+0x6c>)
10009a90:	0028      	movs	r0, r5
10009a92:	4b09      	ldr	r3, [pc, #36]	; (10009ab8 <sms_spi_master_configure+0x70>)
10009a94:	4798      	blx	r3
    spi_enable(&spi_master_ms58_instance);
10009a96:	0028      	movs	r0, r5
10009a98:	4b08      	ldr	r3, [pc, #32]	; (10009abc <sms_spi_master_configure+0x74>)
10009a9a:	4798      	blx	r3
}
10009a9c:	b00d      	add	sp, #52	; 0x34
10009a9e:	bd30      	pop	{r4, r5, pc}
10009aa0:	10009ca9 	.word	0x10009ca9
10009aa4:	10019bfc 	.word	0x10019bfc
10009aa8:	10009ce1 	.word	0x10009ce1
10009aac:	10009cb5 	.word	0x10009cb5
10009ab0:	10019c08 	.word	0x10019c08
10009ab4:	40007000 	.word	0x40007000
10009ab8:	10009db1 	.word	0x10009db1
10009abc:	10009d21 	.word	0x10009d21

10009ac0 <sms_spi_master_transceive>:
/* SPI transceive function:
 * - enable selected slave
 * - start transceive blocking job
 * - when job returned, disable selected slave
 */
enum status_code sms_spi_master_transceive(struct spi_module *const module, struct spi_slave_inst *const slave, uint8_t *tx_data, uint8_t *rx_data, uint16_t len) {
10009ac0:	b5f0      	push	{r4, r5, r6, r7, lr}
10009ac2:	b083      	sub	sp, #12
10009ac4:	0004      	movs	r4, r0
10009ac6:	000d      	movs	r5, r1
10009ac8:	9200      	str	r2, [sp, #0]
10009aca:	9301      	str	r3, [sp, #4]
10009acc:	ab08      	add	r3, sp, #32
10009ace:	881e      	ldrh	r6, [r3, #0]
    enum status_code retVal;
    /* Enable slave */
    //DBG_LOG_CONT_DEV(" selecting slave...");
    spi_select_slave(module, slave, true);
10009ad0:	2201      	movs	r2, #1
10009ad2:	4f08      	ldr	r7, [pc, #32]	; (10009af4 <sms_spi_master_transceive+0x34>)
10009ad4:	47b8      	blx	r7
    /* Write SPI data */
    //DBG_LOG_CONT_DEV(" writing data...");
    retVal = spi_transceive_buffer_wait(module, tx_data, rx_data, len);
10009ad6:	0033      	movs	r3, r6
10009ad8:	9a01      	ldr	r2, [sp, #4]
10009ada:	9900      	ldr	r1, [sp, #0]
10009adc:	0020      	movs	r0, r4
10009ade:	4e06      	ldr	r6, [pc, #24]	; (10009af8 <sms_spi_master_transceive+0x38>)
10009ae0:	47b0      	blx	r6
10009ae2:	0006      	movs	r6, r0
    /* Disable slave */
    //DBG_LOG_CONT_DEV(" de-selecting slave...");
    spi_select_slave(module, slave, false);
10009ae4:	2200      	movs	r2, #0
10009ae6:	0029      	movs	r1, r5
10009ae8:	0020      	movs	r0, r4
10009aea:	47b8      	blx	r7
    //DBG_LOG_CONT_DEV(" done!");
    return retVal;
}
10009aec:	0030      	movs	r0, r6
10009aee:	b003      	add	sp, #12
10009af0:	bdf0      	pop	{r4, r5, r6, r7, pc}
10009af2:	46c0      	nop			; (mov r8, r8)
10009af4:	10009f99 	.word	0x10009f99
10009af8:	10009f15 	.word	0x10009f15

10009afc <sms_timer_aon_callback>:

#include "sms_timer.h"

/* AON SLEEP TIMER */
void sms_timer_aon_callback(void)
{
10009afc:	b510      	push	{r4, lr}
    if(pressure_device.int_enabled) {
10009afe:	2328      	movs	r3, #40	; 0x28
10009b00:	4a06      	ldr	r2, [pc, #24]	; (10009b1c <sms_timer_aon_callback+0x20>)
10009b02:	5cd3      	ldrb	r3, [r2, r3]
10009b04:	2b00      	cmp	r3, #0
10009b06:	d008      	beq.n	10009b1a <sms_timer_aon_callback+0x1e>
		pressure_device.new_int = true;
10009b08:	2101      	movs	r1, #1
10009b0a:	2329      	movs	r3, #41	; 0x29
10009b0c:	54d1      	strb	r1, [r2, r3]
	    send_plf_int_msg_ind(AON_SLEEP_TIMER_EXPIRY_CALLBACK, AON_TIMER_EXPIRED, NULL, 0);
10009b0e:	2300      	movs	r3, #0
10009b10:	2200      	movs	r2, #0
10009b12:	3102      	adds	r1, #2
10009b14:	2042      	movs	r0, #66	; 0x42
10009b16:	4c02      	ldr	r4, [pc, #8]	; (10009b20 <sms_timer_aon_callback+0x24>)
10009b18:	47a0      	blx	r4
	}
}
10009b1a:	bd10      	pop	{r4, pc}
10009b1c:	10019b5c 	.word	0x10019b5c
10009b20:	1000d01d 	.word	0x1000d01d

10009b24 <sms_timer_aon_init>:

void sms_timer_aon_init(uint32_t cnt, enum aon_sleep_timer_mode cnt_mode)
{
10009b24:	b530      	push	{r4, r5, lr}
10009b26:	b083      	sub	sp, #12
10009b28:	0004      	movs	r4, r0
10009b2a:	000d      	movs	r5, r1
    struct aon_sleep_timer_config config_aon_sleep_timer;
    aon_sleep_timer_get_config_defaults(&config_aon_sleep_timer);
10009b2c:	4668      	mov	r0, sp
10009b2e:	4b05      	ldr	r3, [pc, #20]	; (10009b44 <sms_timer_aon_init+0x20>)
10009b30:	4798      	blx	r3
    config_aon_sleep_timer.mode = cnt_mode;
10009b32:	466b      	mov	r3, sp
10009b34:	705d      	strb	r5, [r3, #1]
    config_aon_sleep_timer.counter = cnt;
10009b36:	9401      	str	r4, [sp, #4]
    aon_sleep_timer_init(&config_aon_sleep_timer);
10009b38:	4668      	mov	r0, sp
10009b3a:	4b03      	ldr	r3, [pc, #12]	; (10009b48 <sms_timer_aon_init+0x24>)
10009b3c:	4798      	blx	r3
}
10009b3e:	b003      	add	sp, #12
10009b40:	bd30      	pop	{r4, r5, pc}
10009b42:	46c0      	nop			; (mov r8, r8)
10009b44:	100080e9 	.word	0x100080e9
10009b48:	1000815d 	.word	0x1000815d

10009b4c <sms_timer_aon_disable>:

void sms_timer_aon_disable(void)
{
10009b4c:	b510      	push	{r4, lr}
    aon_sleep_timer_disable();
10009b4e:	4b01      	ldr	r3, [pc, #4]	; (10009b54 <sms_timer_aon_disable+0x8>)
10009b50:	4798      	blx	r3
}
10009b52:	bd10      	pop	{r4, pc}
10009b54:	100080f9 	.word	0x100080f9

10009b58 <sms_timer_aon_register_callback>:

void sms_timer_aon_register_callback(void)
{
10009b58:	b510      	push	{r4, lr}
    aon_sleep_timer_register_callback(sms_timer_aon_callback);
10009b5a:	4804      	ldr	r0, [pc, #16]	; (10009b6c <sms_timer_aon_register_callback+0x14>)
10009b5c:	4b04      	ldr	r3, [pc, #16]	; (10009b70 <sms_timer_aon_register_callback+0x18>)
10009b5e:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
10009b60:	2280      	movs	r2, #128	; 0x80
10009b62:	0512      	lsls	r2, r2, #20
10009b64:	4b03      	ldr	r3, [pc, #12]	; (10009b74 <sms_timer_aon_register_callback+0x1c>)
10009b66:	601a      	str	r2, [r3, #0]
    NVIC_EnableIRQ(AON_SLEEP_TIMER0_IRQn);
}
10009b68:	bd10      	pop	{r4, pc}
10009b6a:	46c0      	nop			; (mov r8, r8)
10009b6c:	10009afd 	.word	0x10009afd
10009b70:	10008145 	.word	0x10008145
10009b74:	e000e100 	.word	0xe000e100

10009b78 <sms_timer_aon_unregister_callback>:

void sms_timer_aon_unregister_callback(void)
{
10009b78:	b510      	push	{r4, lr}
    aon_sleep_timer_unregister_callback();
10009b7a:	4b04      	ldr	r3, [pc, #16]	; (10009b8c <sms_timer_aon_unregister_callback+0x14>)
10009b7c:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
10009b7e:	2180      	movs	r1, #128	; 0x80
10009b80:	0509      	lsls	r1, r1, #20
10009b82:	2380      	movs	r3, #128	; 0x80
10009b84:	4a02      	ldr	r2, [pc, #8]	; (10009b90 <sms_timer_aon_unregister_callback+0x18>)
10009b86:	50d1      	str	r1, [r2, r3]
    NVIC_DisableIRQ(AON_SLEEP_TIMER0_IRQn);
}
10009b88:	bd10      	pop	{r4, pc}
10009b8a:	46c0      	nop			; (mov r8, r8)
10009b8c:	10008151 	.word	0x10008151
10009b90:	e000e100 	.word	0xe000e100

10009b94 <sms_dualtimer_init>:
    count = (uint32_t *)0;
}

/* DUALTIMER */
void sms_dualtimer_init(void)
{
10009b94:	b510      	push	{r4, lr}
10009b96:	b088      	sub	sp, #32
    struct dualtimer_config config_dualtimer;
    dualtimer_get_config_defaults(&config_dualtimer);
10009b98:	ac01      	add	r4, sp, #4
10009b9a:	0020      	movs	r0, r4
10009b9c:	4b09      	ldr	r3, [pc, #36]	; (10009bc4 <sms_dualtimer_init+0x30>)
10009b9e:	4798      	blx	r3

    config_dualtimer.timer1.load_value = SMS_DUALTIMER_LOAD_S;
10009ba0:	4b09      	ldr	r3, [pc, #36]	; (10009bc8 <sms_dualtimer_init+0x34>)
10009ba2:	60a3      	str	r3, [r4, #8]
    config_dualtimer.timer1.counter_mode = DUALTIMER_ONE_SHOT_MODE;
10009ba4:	2300      	movs	r3, #0
10009ba6:	7063      	strb	r3, [r4, #1]
    config_dualtimer.timer2.load_value = SMS_DUALTIMER_LOAD_MS;
10009ba8:	4a08      	ldr	r2, [pc, #32]	; (10009bcc <sms_dualtimer_init+0x38>)
10009baa:	6162      	str	r2, [r4, #20]
    config_dualtimer.timer2.counter_mode = DUALTIMER_ONE_SHOT_MODE;
10009bac:	7363      	strb	r3, [r4, #13]

    dualtimer_init(&config_dualtimer);
10009bae:	0020      	movs	r0, r4
10009bb0:	4b07      	ldr	r3, [pc, #28]	; (10009bd0 <sms_dualtimer_init+0x3c>)
10009bb2:	4798      	blx	r3
    dualtimer_disable(DUALTIMER_TIMER1);
10009bb4:	2000      	movs	r0, #0
10009bb6:	4c07      	ldr	r4, [pc, #28]	; (10009bd4 <sms_dualtimer_init+0x40>)
10009bb8:	47a0      	blx	r4
    dualtimer_disable(DUALTIMER_TIMER2);
10009bba:	2001      	movs	r0, #1
10009bbc:	47a0      	blx	r4
}
10009bbe:	b008      	add	sp, #32
10009bc0:	bd10      	pop	{r4, pc}
10009bc2:	46c0      	nop			; (mov r8, r8)
10009bc4:	10009ffd 	.word	0x10009ffd
10009bc8:	018cba80 	.word	0x018cba80
10009bcc:	00006590 	.word	0x00006590
10009bd0:	1000a0a5 	.word	0x1000a0a5
10009bd4:	1000a081 	.word	0x1000a081

10009bd8 <sms_dualtimer_register_callback>:

void sms_dualtimer_register_callback(enum dualtimer_timer tmr, sms_dualtimer_callback_t cb_handler)
{
10009bd8:	b510      	push	{r4, lr}
10009bda:	0004      	movs	r4, r0
    dualtimer_register_callback(tmr, cb_handler);
10009bdc:	4b02      	ldr	r3, [pc, #8]	; (10009be8 <sms_dualtimer_register_callback+0x10>)
10009bde:	4798      	blx	r3
    NVIC_EnableIRQ(DUALTIMER0_IRQn);
}

void sms_dualtimer_stop(enum dualtimer_timer tmr)
{
    dualtimer_disable(tmr);
10009be0:	0020      	movs	r0, r4
10009be2:	4b02      	ldr	r3, [pc, #8]	; (10009bec <sms_dualtimer_register_callback+0x14>)
10009be4:	4798      	blx	r3

void sms_dualtimer_register_callback(enum dualtimer_timer tmr, sms_dualtimer_callback_t cb_handler)
{
    dualtimer_register_callback(tmr, cb_handler);
    sms_dualtimer_stop(tmr);
}
10009be6:	bd10      	pop	{r4, pc}
10009be8:	1000a1a9 	.word	0x1000a1a9
10009bec:	1000a081 	.word	0x1000a081

10009bf0 <sms_dualtimer_start>:

void sms_dualtimer_start(timer_unit_type_t unit, uint32_t delay, enum dualtimer_timer tmr)
{
10009bf0:	b510      	push	{r4, lr}
10009bf2:	0014      	movs	r4, r2
    uint32_t timer_load = 1;
    switch(unit) {
10009bf4:	2801      	cmp	r0, #1
10009bf6:	d006      	beq.n	10009c06 <sms_dualtimer_start+0x16>
10009bf8:	2800      	cmp	r0, #0
10009bfa:	d002      	beq.n	10009c02 <sms_dualtimer_start+0x12>
10009bfc:	2802      	cmp	r0, #2
10009bfe:	d004      	beq.n	10009c0a <sms_dualtimer_start+0x1a>
10009c00:	e005      	b.n	10009c0e <sms_dualtimer_start+0x1e>
        case TIMER_UNIT_US:
        timer_load = SMS_DUALTIMER_LOAD_US;
10009c02:	221a      	movs	r2, #26
10009c04:	e004      	b.n	10009c10 <sms_dualtimer_start+0x20>
        break;
        
        case TIMER_UNIT_MS:
        timer_load = SMS_DUALTIMER_LOAD_MS;
10009c06:	4a0c      	ldr	r2, [pc, #48]	; (10009c38 <sms_dualtimer_start+0x48>)
        break;
10009c08:	e002      	b.n	10009c10 <sms_dualtimer_start+0x20>
        
        case TIMER_UNIT_S:
        timer_load = SMS_DUALTIMER_LOAD_S;
10009c0a:	4a0c      	ldr	r2, [pc, #48]	; (10009c3c <sms_dualtimer_start+0x4c>)
        break;
10009c0c:	e000      	b.n	10009c10 <sms_dualtimer_start+0x20>
    sms_dualtimer_stop(tmr);
}

void sms_dualtimer_start(timer_unit_type_t unit, uint32_t delay, enum dualtimer_timer tmr)
{
    uint32_t timer_load = 1;
10009c0e:	2201      	movs	r2, #1
        
        default:
        break;
    }
    
    if(delay <= 0) {
10009c10:	2900      	cmp	r1, #0
10009c12:	d101      	bne.n	10009c18 <sms_dualtimer_start+0x28>
        //DBG_LOG("[sms_dualtimer_start]\tWarning! Delay value < 0... setting to 1000");
        delay = 1000;
10009c14:	21fa      	movs	r1, #250	; 0xfa
10009c16:	0089      	lsls	r1, r1, #2
    }
    
    ulp_ready = false;
10009c18:	2000      	movs	r0, #0
10009c1a:	4b09      	ldr	r3, [pc, #36]	; (10009c40 <sms_dualtimer_start+0x50>)
10009c1c:	7018      	strb	r0, [r3, #0]
    //DBG_LOG_DEV("[sms_dualtimer_start]\t\tStarting timer%d... load: %ld, delay: %ld", (tmr+1), timer_load, delay);
    dualtimer_set_counter(tmr, DUALTIMER_SET_CURRUNT_REG, timer_load * delay);
10009c1e:	434a      	muls	r2, r1
10009c20:	2100      	movs	r1, #0
10009c22:	0020      	movs	r0, r4
10009c24:	4b07      	ldr	r3, [pc, #28]	; (10009c44 <sms_dualtimer_start+0x54>)
10009c26:	4798      	blx	r3
    dualtimer_enable(tmr);
10009c28:	0020      	movs	r0, r4
10009c2a:	4b07      	ldr	r3, [pc, #28]	; (10009c48 <sms_dualtimer_start+0x58>)
10009c2c:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
10009c2e:	2280      	movs	r2, #128	; 0x80
10009c30:	01d2      	lsls	r2, r2, #7
10009c32:	4b06      	ldr	r3, [pc, #24]	; (10009c4c <sms_dualtimer_start+0x5c>)
10009c34:	601a      	str	r2, [r3, #0]
    NVIC_EnableIRQ(DUALTIMER0_IRQn);
}
10009c36:	bd10      	pop	{r4, pc}
10009c38:	00006590 	.word	0x00006590
10009c3c:	018cba80 	.word	0x018cba80
10009c40:	10019ab5 	.word	0x10019ab5
10009c44:	1000a035 	.word	0x1000a035
10009c48:	1000a05d 	.word	0x1000a05d
10009c4c:	e000e100 	.word	0xe000e100

10009c50 <sms_dualtimer_stop>:

void sms_dualtimer_stop(enum dualtimer_timer tmr)
{
10009c50:	b510      	push	{r4, lr}
    dualtimer_disable(tmr);
10009c52:	4b01      	ldr	r3, [pc, #4]	; (10009c58 <sms_dualtimer_stop+0x8>)
10009c54:	4798      	blx	r3
}
10009c56:	bd10      	pop	{r4, pc}
10009c58:	1000a081 	.word	0x1000a081

10009c5c <sms_dualtimer1_cb>:

void sms_dualtimer1_cb(void)
{
10009c5c:	b510      	push	{r4, lr}
    timer1_instance.new_int = true;
10009c5e:	2201      	movs	r2, #1
10009c60:	4b04      	ldr	r3, [pc, #16]	; (10009c74 <sms_dualtimer1_cb+0x18>)
10009c62:	709a      	strb	r2, [r3, #2]
    send_plf_int_msg_ind(DUALTIMER_TIMER1_CALLBACK, TIMER_EXPIRED_CALLBACK_TYPE_DETECT, NULL, 0);
10009c64:	2300      	movs	r3, #0
10009c66:	2200      	movs	r2, #0
10009c68:	2101      	movs	r1, #1
10009c6a:	2040      	movs	r0, #64	; 0x40
10009c6c:	4c02      	ldr	r4, [pc, #8]	; (10009c78 <sms_dualtimer1_cb+0x1c>)
10009c6e:	47a0      	blx	r4
}
10009c70:	bd10      	pop	{r4, pc}
10009c72:	46c0      	nop			; (mov r8, r8)
10009c74:	10019b48 	.word	0x10019b48
10009c78:	1000d01d 	.word	0x1000d01d

10009c7c <delay_ms>:
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
        break;
    }
}

void delay_ms(uint32_t delay) {
10009c7c:	b510      	push	{r4, lr}
10009c7e:	0001      	movs	r1, r0
	sms_dualtimer_start(TIMER_UNIT_MS, delay, DUALTIMER_TIMER2);
10009c80:	2201      	movs	r2, #1
10009c82:	2001      	movs	r0, #1
10009c84:	4b05      	ldr	r3, [pc, #20]	; (10009c9c <delay_ms+0x20>)
10009c86:	4798      	blx	r3
	while(dualtimer_get_value(DUALTIMER_TIMER2)) {
10009c88:	4c05      	ldr	r4, [pc, #20]	; (10009ca0 <delay_ms+0x24>)
10009c8a:	2001      	movs	r0, #1
10009c8c:	47a0      	blx	r4
10009c8e:	2800      	cmp	r0, #0
10009c90:	d1fb      	bne.n	10009c8a <delay_ms+0xe>
    NVIC_EnableIRQ(DUALTIMER0_IRQn);
}

void sms_dualtimer_stop(enum dualtimer_timer tmr)
{
    dualtimer_disable(tmr);
10009c92:	3001      	adds	r0, #1
10009c94:	4b03      	ldr	r3, [pc, #12]	; (10009ca4 <delay_ms+0x28>)
10009c96:	4798      	blx	r3
void delay_ms(uint32_t delay) {
	sms_dualtimer_start(TIMER_UNIT_MS, delay, DUALTIMER_TIMER2);
	while(dualtimer_get_value(DUALTIMER_TIMER2)) {
	}
	sms_dualtimer_stop(DUALTIMER_TIMER2);
10009c98:	bd10      	pop	{r4, pc}
10009c9a:	46c0      	nop			; (mov r8, r8)
10009c9c:	10009bf1 	.word	0x10009bf1
10009ca0:	1000a021 	.word	0x1000a021
10009ca4:	1000a081 	.word	0x1000a081

10009ca8 <spi_slave_inst_get_config_defaults>:
void spi_slave_inst_get_config_defaults(
		struct spi_slave_inst_config *const config)
{
	Assert(config);

	config->ss_pin          = PIN_LP_GPIO_12;
10009ca8:	230c      	movs	r3, #12
10009caa:	7003      	strb	r3, [r0, #0]
	config->address_enabled = false;
10009cac:	2300      	movs	r3, #0
10009cae:	7043      	strb	r3, [r0, #1]
	config->address         = 0;
10009cb0:	7083      	strb	r3, [r0, #2]
}
10009cb2:	4770      	bx	lr

10009cb4 <spi_get_config_defaults>:
void spi_get_config_defaults(
		struct spi_config *const config)
{
	Assert(config);

	config->mode             = SPI_MODE_MASTER;
10009cb4:	2301      	movs	r3, #1
10009cb6:	7003      	strb	r3, [r0, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
10009cb8:	2300      	movs	r3, #0
10009cba:	7043      	strb	r3, [r0, #1]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
10009cbc:	7083      	strb	r3, [r0, #2]
	config->clock_source     = SPI_CLK_INPUT_0;
10009cbe:	70c3      	strb	r3, [r0, #3]
	config->clock_divider    = 129;
10009cc0:	3381      	adds	r3, #129	; 0x81
10009cc2:	7103      	strb	r3, [r0, #4]

	config->pin_number_pad[0] = PIN_LP_GPIO_10;
10009cc4:	3b77      	subs	r3, #119	; 0x77
10009cc6:	6083      	str	r3, [r0, #8]
	config->pin_number_pad[1] = PIN_LP_GPIO_11;
10009cc8:	3301      	adds	r3, #1
10009cca:	60c3      	str	r3, [r0, #12]
	config->pin_number_pad[2] = PIN_LP_GPIO_12;
10009ccc:	3301      	adds	r3, #1
10009cce:	6103      	str	r3, [r0, #16]
	config->pin_number_pad[3] = PIN_LP_GPIO_13;
10009cd0:	3301      	adds	r3, #1
10009cd2:	6143      	str	r3, [r0, #20]

	config->pinmux_sel_pad[0] = MUX_LP_GPIO_10_SPI0_SCK;
10009cd4:	3b0b      	subs	r3, #11
10009cd6:	6183      	str	r3, [r0, #24]
	config->pinmux_sel_pad[1] = MUX_LP_GPIO_11_SPI0_MOSI;
10009cd8:	61c3      	str	r3, [r0, #28]
	config->pinmux_sel_pad[2] = MUX_LP_GPIO_12_SPI0_SSN;
10009cda:	6203      	str	r3, [r0, #32]
	config->pinmux_sel_pad[3] = MUX_LP_GPIO_13_SPI0_MISO;
10009cdc:	6243      	str	r3, [r0, #36]	; 0x24
};
10009cde:	4770      	bx	lr

10009ce0 <spi_attach_slave>:
 *
 */
void spi_attach_slave(
		struct spi_slave_inst *const slave,
		struct spi_slave_inst_config *const config)
{
10009ce0:	b530      	push	{r4, r5, lr}
10009ce2:	b083      	sub	sp, #12
10009ce4:	0004      	movs	r4, r0
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
10009ce6:	780b      	ldrb	r3, [r1, #0]
10009ce8:	7003      	strb	r3, [r0, #0]
	slave->address_enabled = config->address_enabled;
10009cea:	784b      	ldrb	r3, [r1, #1]
10009cec:	7043      	strb	r3, [r0, #1]
	slave->address         = config->address;
10009cee:	788b      	ldrb	r3, [r1, #2]
10009cf0:	7083      	strb	r3, [r0, #2]

	struct gpio_config config_gpio;
	gpio_get_config_defaults(&config_gpio);
10009cf2:	ad01      	add	r5, sp, #4
10009cf4:	0028      	movs	r0, r5
10009cf6:	4b07      	ldr	r3, [pc, #28]	; (10009d14 <spi_attach_slave+0x34>)
10009cf8:	4798      	blx	r3
	config_gpio.direction = GPIO_PIN_DIR_OUTPUT;
10009cfa:	2301      	movs	r3, #1
10009cfc:	702b      	strb	r3, [r5, #0]
	gpio_pin_set_config(slave->ss_pin, &config_gpio);
10009cfe:	7820      	ldrb	r0, [r4, #0]
10009d00:	0029      	movs	r1, r5
10009d02:	4b05      	ldr	r3, [pc, #20]	; (10009d18 <spi_attach_slave+0x38>)
10009d04:	4798      	blx	r3

	gpio_pin_set_output_level(slave->ss_pin, true);
10009d06:	7820      	ldrb	r0, [r4, #0]
10009d08:	2101      	movs	r1, #1
10009d0a:	4b04      	ldr	r3, [pc, #16]	; (10009d1c <spi_attach_slave+0x3c>)
10009d0c:	4798      	blx	r3
}
10009d0e:	b003      	add	sp, #12
10009d10:	bd30      	pop	{r4, r5, pc}
10009d12:	46c0      	nop			; (mov r8, r8)
10009d14:	1000a311 	.word	0x1000a311
10009d18:	1000a321 	.word	0x1000a321
10009d1c:	1000a4d9 	.word	0x1000a4d9

10009d20 <spi_enable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void spi_enable(struct spi_module *const module)
{
	Spi *const spi_module = (module->hw);
10009d20:	6803      	ldr	r3, [r0, #0]
		NVIC_EnableIRQ(SPI1_TX_IRQn);
	}
#endif

	/* Enable SPI */
	spi_module->SPI_MODULE_ENABLE.reg = SPI_MODULE_ENABLE_ENABLE;
10009d22:	2201      	movs	r2, #1
10009d24:	761a      	strb	r2, [r3, #24]
}
10009d26:	4770      	bx	lr

10009d28 <spi_disable>:
 * This function will disable the SPI module.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void spi_disable(struct spi_module *const module)
{
10009d28:	b510      	push	{r4, lr}
		NVIC_DisableIRQ(SPI1_TX_IRQn);
	}
#  endif

	/* Disable SPI */
	spi_module->SPI_MODULE_ENABLE.reg = (0x0ul << SPI_MODULE_ENABLE_ENABLE_Pos);
10009d2a:	2300      	movs	r3, #0
10009d2c:	6802      	ldr	r2, [r0, #0]
10009d2e:	7613      	strb	r3, [r2, #24]
 */
static void _spi_clock_disable(struct spi_module *const module)
{
	Assert(module);

	Spi *const spi_module = (module->hw);
10009d30:	6803      	ldr	r3, [r0, #0]

	if (spi_module == (void *)SPI0) {
10009d32:	4a0d      	ldr	r2, [pc, #52]	; (10009d68 <spi_disable+0x40>)
10009d34:	4293      	cmp	r3, r2
10009d36:	d109      	bne.n	10009d4c <spi_disable+0x24>
		system_clock_peripheral_disable(PERIPHERAL_SPI0_SCK_CLK);
10009d38:	2041      	movs	r0, #65	; 0x41
10009d3a:	4c0c      	ldr	r4, [pc, #48]	; (10009d6c <spi_disable+0x44>)
10009d3c:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI0_SCK_PHASE);
10009d3e:	2026      	movs	r0, #38	; 0x26
10009d40:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI0_IF);
10009d42:	2038      	movs	r0, #56	; 0x38
10009d44:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI0_CORE);
10009d46:	2001      	movs	r0, #1
10009d48:	47a0      	blx	r4
10009d4a:	e00b      	b.n	10009d64 <spi_disable+0x3c>
	} else if (spi_module == (void *)SPI1) {
10009d4c:	4a08      	ldr	r2, [pc, #32]	; (10009d70 <spi_disable+0x48>)
10009d4e:	4293      	cmp	r3, r2
10009d50:	d108      	bne.n	10009d64 <spi_disable+0x3c>
		system_clock_peripheral_disable(PERIPHERAL_SPI1_SCK_CLK);
10009d52:	2042      	movs	r0, #66	; 0x42
10009d54:	4c05      	ldr	r4, [pc, #20]	; (10009d6c <spi_disable+0x44>)
10009d56:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI1_SCK_PHASE);
10009d58:	2027      	movs	r0, #39	; 0x27
10009d5a:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI1_IF);
10009d5c:	2039      	movs	r0, #57	; 0x39
10009d5e:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI1_CORE);
10009d60:	2002      	movs	r0, #2
10009d62:	47a0      	blx	r4
#  endif

	/* Disable SPI */
	spi_module->SPI_MODULE_ENABLE.reg = (0x0ul << SPI_MODULE_ENABLE_ENABLE_Pos);
	_spi_clock_disable(module);
}
10009d64:	bd10      	pop	{r4, pc}
10009d66:	46c0      	nop			; (mov r8, r8)
10009d68:	40006000 	.word	0x40006000
10009d6c:	1000ac71 	.word	0x1000ac71
10009d70:	40007000 	.word	0x40007000

10009d74 <spi_reset>:
 * disable it.
 *
 * \param[in,out] module Pointer to the software instance struct
 */
void spi_reset(struct spi_module *const module)
{
10009d74:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Spi *const spi_module = (module->hw);
10009d76:	6804      	ldr	r4, [r0, #0]

	/* Disable the module */
	spi_disable(module);
10009d78:	4b09      	ldr	r3, [pc, #36]	; (10009da0 <spi_reset+0x2c>)
10009d7a:	4798      	blx	r3

	/* Software reset the module */
	if(spi_module == (void *)SPI0) {
10009d7c:	4b09      	ldr	r3, [pc, #36]	; (10009da4 <spi_reset+0x30>)
10009d7e:	429c      	cmp	r4, r3
10009d80:	d105      	bne.n	10009d8e <spi_reset+0x1a>
		system_peripheral_reset(PERIPHERAL_SPI0_CORE);
10009d82:	2001      	movs	r0, #1
10009d84:	4c08      	ldr	r4, [pc, #32]	; (10009da8 <spi_reset+0x34>)
10009d86:	47a0      	blx	r4
		system_peripheral_reset(PERIPHERAL_SPI0_IF);
10009d88:	2038      	movs	r0, #56	; 0x38
10009d8a:	47a0      	blx	r4
10009d8c:	e007      	b.n	10009d9e <spi_reset+0x2a>
	} else if (spi_module == (void *)SPI1) {
10009d8e:	4b07      	ldr	r3, [pc, #28]	; (10009dac <spi_reset+0x38>)
10009d90:	429c      	cmp	r4, r3
10009d92:	d104      	bne.n	10009d9e <spi_reset+0x2a>
		system_peripheral_reset(PERIPHERAL_SPI1_CORE);
10009d94:	2002      	movs	r0, #2
10009d96:	4c04      	ldr	r4, [pc, #16]	; (10009da8 <spi_reset+0x34>)
10009d98:	47a0      	blx	r4
		system_peripheral_reset(PERIPHERAL_SPI1_IF);
10009d9a:	2039      	movs	r0, #57	; 0x39
10009d9c:	47a0      	blx	r4
	}
}
10009d9e:	bd10      	pop	{r4, pc}
10009da0:	10009d29 	.word	0x10009d29
10009da4:	40006000 	.word	0x40006000
10009da8:	1000afdd 	.word	0x1000afdd
10009dac:	40007000 	.word	0x40007000

10009db0 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Spi *const hw,
		const struct spi_config *const config)
{
10009db0:	b5f0      	push	{r4, r5, r6, r7, lr}
10009db2:	465f      	mov	r7, fp
10009db4:	4646      	mov	r6, r8
10009db6:	b4c0      	push	{r6, r7}
10009db8:	b083      	sub	sp, #12
10009dba:	0006      	movs	r6, r0
10009dbc:	4688      	mov	r8, r1
10009dbe:	0015      	movs	r5, r2
	Assert(config);

	uint8_t idx;

	/* Initialize device instance */
	module->hw = hw;
10009dc0:	6031      	str	r1, [r6, #0]

	Spi *const spi_module = (module->hw);

	/* Check if module is enabled. */
	if (spi_module->SPI_MODULE_ENABLE.reg & SPI_MODULE_ENABLE_MASK) {
10009dc2:	7e0b      	ldrb	r3, [r1, #24]
10009dc4:	07db      	lsls	r3, r3, #31
10009dc6:	d501      	bpl.n	10009dcc <spi_init+0x1c>
		spi_module->SPI_MODULE_ENABLE.reg = (0x0ul << SPI_MODULE_ENABLE_ENABLE_Pos);
10009dc8:	2300      	movs	r3, #0
10009dca:	760b      	strb	r3, [r1, #24]
	}

	spi_reset(module);
10009dcc:	0030      	movs	r0, r6
10009dce:	4b4a      	ldr	r3, [pc, #296]	; (10009ef8 <spi_init+0x148>)
10009dd0:	4798      	blx	r3
 */
static void _spi_clock_enable(struct spi_module *const module)
{
	Assert(module);

	Spi *const spi_module = (module->hw);
10009dd2:	6833      	ldr	r3, [r6, #0]

	if (spi_module == (void *)SPI0) {
10009dd4:	4a49      	ldr	r2, [pc, #292]	; (10009efc <spi_init+0x14c>)
10009dd6:	4293      	cmp	r3, r2
10009dd8:	d109      	bne.n	10009dee <spi_init+0x3e>
		system_clock_peripheral_enable(PERIPHERAL_SPI0_SCK_CLK);
10009dda:	2041      	movs	r0, #65	; 0x41
10009ddc:	4c48      	ldr	r4, [pc, #288]	; (10009f00 <spi_init+0x150>)
10009dde:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI0_SCK_PHASE);
10009de0:	2026      	movs	r0, #38	; 0x26
10009de2:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI0_IF);
10009de4:	2038      	movs	r0, #56	; 0x38
10009de6:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI0_CORE);
10009de8:	2001      	movs	r0, #1
10009dea:	47a0      	blx	r4
10009dec:	e00b      	b.n	10009e06 <spi_init+0x56>
	} else if (spi_module == (void *)SPI1) {
10009dee:	4a45      	ldr	r2, [pc, #276]	; (10009f04 <spi_init+0x154>)
10009df0:	4293      	cmp	r3, r2
10009df2:	d108      	bne.n	10009e06 <spi_init+0x56>
		system_clock_peripheral_enable(PERIPHERAL_SPI1_SCK_CLK);
10009df4:	2042      	movs	r0, #66	; 0x42
10009df6:	4c42      	ldr	r4, [pc, #264]	; (10009f00 <spi_init+0x150>)
10009df8:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI1_SCK_PHASE);
10009dfa:	2027      	movs	r0, #39	; 0x27
10009dfc:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI1_IF);
10009dfe:	2039      	movs	r0, #57	; 0x39
10009e00:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI1_CORE);
10009e02:	2002      	movs	r0, #2
10009e04:	47a0      	blx	r4
	}
#endif

	//Program the pinmux.
	struct gpio_config config_gpio;
	gpio_get_config_defaults(&config_gpio);
10009e06:	a801      	add	r0, sp, #4
10009e08:	4b3f      	ldr	r3, [pc, #252]	; (10009f08 <spi_init+0x158>)
10009e0a:	4798      	blx	r3
10009e0c:	002c      	movs	r4, r5
10009e0e:	3408      	adds	r4, #8
10009e10:	2318      	movs	r3, #24
10009e12:	469b      	mov	fp, r3
10009e14:	44ab      	add	fp, r5
10009e16:	0027      	movs	r7, r4

	/* Set the pinmux for this spi module. */
	for(idx = 0; idx < 4; idx++) {
		if (config->pin_number_pad[idx] != PINMUX_UNUSED) {
10009e18:	6820      	ldr	r0, [r4, #0]
10009e1a:	1c43      	adds	r3, r0, #1
10009e1c:	d011      	beq.n	10009e42 <spi_init+0x92>
			if (config->mode == SPI_MODE_MASTER) {
10009e1e:	782b      	ldrb	r3, [r5, #0]
10009e20:	2b01      	cmp	r3, #1
10009e22:	d102      	bne.n	10009e2a <spi_init+0x7a>
				config_gpio.direction = GPIO_PIN_DIR_OUTPUT;
10009e24:	466a      	mov	r2, sp
10009e26:	7113      	strb	r3, [r2, #4]
10009e28:	e003      	b.n	10009e32 <spi_init+0x82>
			} else if (config->mode == SPI_MODE_SLAVE) {
10009e2a:	2b00      	cmp	r3, #0
10009e2c:	d101      	bne.n	10009e32 <spi_init+0x82>
				config_gpio.direction = GPIO_PIN_DIR_INPUT;
10009e2e:	466a      	mov	r2, sp
10009e30:	7113      	strb	r3, [r2, #4]
			}
			gpio_pin_set_config(config->pin_number_pad[idx], &config_gpio);
10009e32:	b2c0      	uxtb	r0, r0
10009e34:	a901      	add	r1, sp, #4
10009e36:	4b35      	ldr	r3, [pc, #212]	; (10009f0c <spi_init+0x15c>)
10009e38:	4798      	blx	r3
			gpio_pinmux_cofiguration(config->pin_number_pad[idx], \
10009e3a:	8a39      	ldrh	r1, [r7, #16]
10009e3c:	7838      	ldrb	r0, [r7, #0]
10009e3e:	4b34      	ldr	r3, [pc, #208]	; (10009f10 <spi_init+0x160>)
10009e40:	4798      	blx	r3
10009e42:	3404      	adds	r4, #4
	//Program the pinmux.
	struct gpio_config config_gpio;
	gpio_get_config_defaults(&config_gpio);

	/* Set the pinmux for this spi module. */
	for(idx = 0; idx < 4; idx++) {
10009e44:	455c      	cmp	r4, fp
10009e46:	d1e6      	bne.n	10009e16 <spi_init+0x66>
						(uint16_t)(config->pinmux_sel_pad[idx]));
		}
	}

	/* Set up the input clock for the module */
	spi_module->CLOCK_SOURCE_SELECT.reg = config->clock_source;
10009e48:	78eb      	ldrb	r3, [r5, #3]
10009e4a:	4642      	mov	r2, r8
10009e4c:	7413      	strb	r3, [r2, #16]

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
10009e4e:	782b      	ldrb	r3, [r5, #0]
10009e50:	2b01      	cmp	r3, #1
10009e52:	d100      	bne.n	10009e56 <spi_init+0xa6>
		/* Set the mode in SPI master mode */
		spi_module->SPI_MASTER_MODE.reg = SPI_MODE_MASTER;
10009e54:	7713      	strb	r3, [r2, #28]
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
10009e56:	782b      	ldrb	r3, [r5, #0]
10009e58:	2b00      	cmp	r3, #0
10009e5a:	d101      	bne.n	10009e60 <spi_init+0xb0>
		/* Set the mode in SPI slave mode */
		spi_module->SPI_MASTER_MODE.reg = SPI_MODE_SLAVE;
10009e5c:	4642      	mov	r2, r8
10009e5e:	7713      	strb	r3, [r2, #28]
		const struct spi_config *const config)
{
	Assert(module);
	Assert(config);

	Spi *const spi_module = (module->hw);
10009e60:	6833      	ldr	r3, [r6, #0]

	module->mode  = config->mode;
10009e62:	782a      	ldrb	r2, [r5, #0]
10009e64:	7172      	strb	r2, [r6, #5]

#if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
10009e66:	782a      	ldrb	r2, [r5, #0]
10009e68:	2a01      	cmp	r2, #1
10009e6a:	d101      	bne.n	10009e70 <spi_init+0xc0>
		spi_module->SPI_CLK_DIVIDER.reg = config->clock_divider;
10009e6c:	792a      	ldrb	r2, [r5, #4]
10009e6e:	829a      	strh	r2, [r3, #20]
	}
#endif

	/* Set data order */
	if (config->data_order == SPI_DATA_ORDER_LSB) {
10009e70:	786a      	ldrb	r2, [r5, #1]
10009e72:	2a04      	cmp	r2, #4
10009e74:	d104      	bne.n	10009e80 <spi_init+0xd0>
		spi_module->SPI_CONFIGURATION.bit.LSB_FIRST_ENABLE = 0x1;
10009e76:	2124      	movs	r1, #36	; 0x24
10009e78:	5c58      	ldrb	r0, [r3, r1]
10009e7a:	4302      	orrs	r2, r0
10009e7c:	545a      	strb	r2, [r3, r1]
10009e7e:	e004      	b.n	10009e8a <spi_init+0xda>
	} else {
		spi_module->SPI_CONFIGURATION.bit.LSB_FIRST_ENABLE = 0x0;
10009e80:	2124      	movs	r1, #36	; 0x24
10009e82:	5c5a      	ldrb	r2, [r3, r1]
10009e84:	2004      	movs	r0, #4
10009e86:	4382      	bics	r2, r0
10009e88:	545a      	strb	r2, [r3, r1]
	}

	/* Set clock polarity and clock phase */
	switch(config->transfer_mode)
10009e8a:	78aa      	ldrb	r2, [r5, #2]
10009e8c:	2a01      	cmp	r2, #1
10009e8e:	d01a      	beq.n	10009ec6 <spi_init+0x116>
10009e90:	2a00      	cmp	r2, #0
10009e92:	d004      	beq.n	10009e9e <spi_init+0xee>
10009e94:	2a02      	cmp	r2, #2
10009e96:	d00c      	beq.n	10009eb2 <spi_init+0x102>
10009e98:	2a03      	cmp	r2, #3
10009e9a:	d01e      	beq.n	10009eda <spi_init+0x12a>
10009e9c:	e026      	b.n	10009eec <spi_init+0x13c>
	{
		case SPI_TRANSFER_MODE_0:
			spi_module->SPI_CONFIGURATION.bit.SCK_PHASE = 0x0;
10009e9e:	2224      	movs	r2, #36	; 0x24
10009ea0:	5c99      	ldrb	r1, [r3, r2]
10009ea2:	2002      	movs	r0, #2
10009ea4:	4381      	bics	r1, r0
10009ea6:	5499      	strb	r1, [r3, r2]
			spi_module->SPI_CONFIGURATION.bit.SCK_POLARITY = 0x0;
10009ea8:	5c99      	ldrb	r1, [r3, r2]
10009eaa:	3801      	subs	r0, #1
10009eac:	4381      	bics	r1, r0
10009eae:	5499      	strb	r1, [r3, r2]
10009eb0:	e01c      	b.n	10009eec <spi_init+0x13c>
			break;
		case SPI_TRANSFER_MODE_1:
			spi_module->SPI_CONFIGURATION.bit.SCK_PHASE = 0x1;
10009eb2:	2224      	movs	r2, #36	; 0x24
10009eb4:	5c98      	ldrb	r0, [r3, r2]
10009eb6:	2102      	movs	r1, #2
10009eb8:	4301      	orrs	r1, r0
10009eba:	5499      	strb	r1, [r3, r2]
			spi_module->SPI_CONFIGURATION.bit.SCK_POLARITY = 0x0;
10009ebc:	5c99      	ldrb	r1, [r3, r2]
10009ebe:	2001      	movs	r0, #1
10009ec0:	4381      	bics	r1, r0
10009ec2:	5499      	strb	r1, [r3, r2]
10009ec4:	e012      	b.n	10009eec <spi_init+0x13c>
			break;
		case SPI_TRANSFER_MODE_2:
			spi_module->SPI_CONFIGURATION.bit.SCK_PHASE = 0x0;
10009ec6:	2224      	movs	r2, #36	; 0x24
10009ec8:	5c99      	ldrb	r1, [r3, r2]
10009eca:	2002      	movs	r0, #2
10009ecc:	4381      	bics	r1, r0
10009ece:	5499      	strb	r1, [r3, r2]
			spi_module->SPI_CONFIGURATION.bit.SCK_POLARITY = 0x1;
10009ed0:	5c98      	ldrb	r0, [r3, r2]
10009ed2:	2101      	movs	r1, #1
10009ed4:	4301      	orrs	r1, r0
10009ed6:	5499      	strb	r1, [r3, r2]
10009ed8:	e008      	b.n	10009eec <spi_init+0x13c>
			break;
		case SPI_TRANSFER_MODE_3:
			spi_module->SPI_CONFIGURATION.bit.SCK_PHASE = 0x1;
10009eda:	2224      	movs	r2, #36	; 0x24
10009edc:	5c98      	ldrb	r0, [r3, r2]
10009ede:	2102      	movs	r1, #2
10009ee0:	4301      	orrs	r1, r0
10009ee2:	5499      	strb	r1, [r3, r2]
			spi_module->SPI_CONFIGURATION.bit.SCK_POLARITY = 0x1;
10009ee4:	5c98      	ldrb	r0, [r3, r2]
10009ee6:	2101      	movs	r1, #1
10009ee8:	4301      	orrs	r1, r0
10009eea:	5499      	strb	r1, [r3, r2]
	module->locked                     = 0;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
10009eec:	2000      	movs	r0, #0
10009eee:	b003      	add	sp, #12
10009ef0:	bc0c      	pop	{r2, r3}
10009ef2:	4690      	mov	r8, r2
10009ef4:	469b      	mov	fp, r3
10009ef6:	bdf0      	pop	{r4, r5, r6, r7, pc}
10009ef8:	10009d75 	.word	0x10009d75
10009efc:	40006000 	.word	0x40006000
10009f00:	1000a915 	.word	0x1000a915
10009f04:	40007000 	.word	0x40007000
10009f08:	1000a311 	.word	0x1000a311
10009f0c:	1000a321 	.word	0x1000a321
10009f10:	1000a565 	.word	0x1000a565

10009f14 <spi_transceive_buffer_wait>:
enum status_code spi_transceive_buffer_wait(
		struct spi_module *const module,
		uint8_t *tx_data,
		uint8_t *rx_data,
		uint16_t length)
{
10009f14:	b5f0      	push	{r4, r5, r6, r7, lr}
10009f16:	b083      	sub	sp, #12
	Spi *spi_module = module->hw;
10009f18:	6804      	ldr	r4, [r0, #0]
	uint8_t dummy = 0;
10009f1a:	2600      	movs	r6, #0
10009f1c:	466d      	mov	r5, sp
10009f1e:	71ee      	strb	r6, [r5, #7]
10009f20:	3507      	adds	r5, #7
	uint8_t skip_mosi = 0;
	uint8_t skip_miso = 0;
	uint8_t status;
	uint16_t transfer_len = 0;

	if(spi_module == 0) {
10009f22:	2c00      	cmp	r4, #0
10009f24:	d034      	beq.n	10009f90 <spi_transceive_buffer_wait+0x7c>
		return STATUS_ERR_NOT_INITIALIZED;
	}
	if(!tx_data) {
10009f26:	2900      	cmp	r1, #0
10009f28:	d104      	bne.n	10009f34 <spi_transceive_buffer_wait+0x20>
		tx_data = &dummy;
		*tx_data = module->tx_dummy_byte;
10009f2a:	0029      	movs	r1, r5
10009f2c:	7980      	ldrb	r0, [r0, #6]
10009f2e:	7028      	strb	r0, [r5, #0]
		skip_mosi = 1;
10009f30:	2701      	movs	r7, #1
10009f32:	e00b      	b.n	10009f4c <spi_transceive_buffer_wait+0x38>
	} else if(!rx_data) {
10009f34:	2a00      	cmp	r2, #0
10009f36:	d005      	beq.n	10009f44 <spi_transceive_buffer_wait+0x30>
		rx_data = &dummy;
		skip_miso = 1;
	} else if(length == 0) {
		return STATUS_ERR_INVALID_ARG;
10009f38:	2017      	movs	r0, #23
		*tx_data = module->tx_dummy_byte;
		skip_mosi = 1;
	} else if(!rx_data) {
		rx_data = &dummy;
		skip_miso = 1;
	} else if(length == 0) {
10009f3a:	2b00      	cmp	r3, #0
10009f3c:	d029      	beq.n	10009f92 <spi_transceive_buffer_wait+0x7e>
		uint16_t length)
{
	Spi *spi_module = module->hw;
	uint8_t dummy = 0;
	uint8_t skip_mosi = 0;
	uint8_t skip_miso = 0;
10009f3e:	2600      	movs	r6, #0
		uint8_t *rx_data,
		uint16_t length)
{
	Spi *spi_module = module->hw;
	uint8_t dummy = 0;
	uint8_t skip_mosi = 0;
10009f40:	2700      	movs	r7, #0
10009f42:	e003      	b.n	10009f4c <spi_transceive_buffer_wait+0x38>
		tx_data = &dummy;
		*tx_data = module->tx_dummy_byte;
		skip_mosi = 1;
	} else if(!rx_data) {
		rx_data = &dummy;
		skip_miso = 1;
10009f44:	2601      	movs	r6, #1
		uint8_t *rx_data,
		uint16_t length)
{
	Spi *spi_module = module->hw;
	uint8_t dummy = 0;
	uint8_t skip_mosi = 0;
10009f46:	2700      	movs	r7, #0
	if(!tx_data) {
		tx_data = &dummy;
		*tx_data = module->tx_dummy_byte;
		skip_mosi = 1;
	} else if(!rx_data) {
		rx_data = &dummy;
10009f48:	466a      	mov	r2, sp
10009f4a:	3207      	adds	r2, #7
 */
static bool _spi_is_active(Spi *const spi_module)
{
	Assert(spi_module);

	return spi_module->SPI_BUS_STATUS.bit.SPI_ACTIVE;
10009f4c:	2528      	movs	r5, #40	; 0x28
10009f4e:	5d60      	ldrb	r0, [r4, r5]
	}

	/* Check for Idle */
	do {
		status = _spi_is_active(spi_module);
	}while(status);
10009f50:	07c0      	lsls	r0, r0, #31
10009f52:	d4fc      	bmi.n	10009f4e <spi_transceive_buffer_wait+0x3a>

	/* Clear all status registers */
	spi_module->RECEIVE_STATUS.reg;
10009f54:	7b20      	ldrb	r0, [r4, #12]
	spi_module->TRANSMIT_STATUS.reg;
10009f56:	7a20      	ldrb	r0, [r4, #8]

	/* Start transfer */
	while(transfer_len < length) {
10009f58:	2b00      	cmp	r3, #0
10009f5a:	d014      	beq.n	10009f86 <spi_transceive_buffer_wait+0x72>
10009f5c:	2500      	movs	r5, #0
		/* Read data shifted from MISO */
		while(!_spi_is_ready_to_read(spi_module));
		*rx_data = spi_module->RECEIVE_DATA.reg;
		transfer_len++;
		if (!skip_mosi) {
			tx_data++;
10009f5e:	4278      	negs	r0, r7
10009f60:	4147      	adcs	r7, r0
		}
		if (!skip_miso) {
			rx_data++;
10009f62:	4270      	negs	r0, r6
10009f64:	4146      	adcs	r6, r0
		Spi *const spi_module)
{
	Assert(spi_module);

	/* Check interrupt flag */
	return (spi_module->TRANSMIT_STATUS.bit.TX_FIFO_NOT_FULL);
10009f66:	7a20      	ldrb	r0, [r4, #8]
	spi_module->TRANSMIT_STATUS.reg;

	/* Start transfer */
	while(transfer_len < length) {
		/* Write data to MOSI */
		while(!_spi_is_ready_to_write(spi_module));
10009f68:	07c0      	lsls	r0, r0, #31
10009f6a:	d5fc      	bpl.n	10009f66 <spi_transceive_buffer_wait+0x52>
		spi_module->TRANSMIT_DATA.reg = *tx_data;
10009f6c:	7808      	ldrb	r0, [r1, #0]
10009f6e:	7020      	strb	r0, [r4, #0]
		Spi *const spi_module)
{
	Assert(spi_module);

	/* Check interrupt flag */
	return (spi_module->RECEIVE_STATUS.bit.RX_FIFO_NOT_EMPTY);
10009f70:	7b20      	ldrb	r0, [r4, #12]
	while(transfer_len < length) {
		/* Write data to MOSI */
		while(!_spi_is_ready_to_write(spi_module));
		spi_module->TRANSMIT_DATA.reg = *tx_data;
		/* Read data shifted from MISO */
		while(!_spi_is_ready_to_read(spi_module));
10009f72:	07c0      	lsls	r0, r0, #31
10009f74:	d5fc      	bpl.n	10009f70 <spi_transceive_buffer_wait+0x5c>
		*rx_data = spi_module->RECEIVE_DATA.reg;
10009f76:	7920      	ldrb	r0, [r4, #4]
10009f78:	7010      	strb	r0, [r2, #0]
		transfer_len++;
10009f7a:	3501      	adds	r5, #1
10009f7c:	b2ad      	uxth	r5, r5
		if (!skip_mosi) {
			tx_data++;
10009f7e:	19c9      	adds	r1, r1, r7
		}
		if (!skip_miso) {
			rx_data++;
10009f80:	1992      	adds	r2, r2, r6
	/* Clear all status registers */
	spi_module->RECEIVE_STATUS.reg;
	spi_module->TRANSMIT_STATUS.reg;

	/* Start transfer */
	while(transfer_len < length) {
10009f82:	42ab      	cmp	r3, r5
10009f84:	d1ef      	bne.n	10009f66 <spi_transceive_buffer_wait+0x52>
		Spi *const spi_module)
{
	Assert(spi_module);

	/* Check interrupt flag */
	return (spi_module->TRANSMIT_STATUS.bit.TX_FIFO_EMPTY);
10009f86:	7a23      	ldrb	r3, [r4, #8]
		}
	}
	/* check TXFIFO is empty */
	do {
		status = _spi_is_write_complete(spi_module);
	}while(!status);
10009f88:	06db      	lsls	r3, r3, #27
10009f8a:	d5fc      	bpl.n	10009f86 <spi_transceive_buffer_wait+0x72>

	return STATUS_OK;
10009f8c:	2000      	movs	r0, #0
10009f8e:	e000      	b.n	10009f92 <spi_transceive_buffer_wait+0x7e>
	uint8_t skip_miso = 0;
	uint8_t status;
	uint16_t transfer_len = 0;

	if(spi_module == 0) {
		return STATUS_ERR_NOT_INITIALIZED;
10009f90:	201f      	movs	r0, #31
		status = _spi_is_write_complete(spi_module);
	}while(!status);

	return STATUS_OK;

}
10009f92:	b003      	add	sp, #12
10009f94:	bdf0      	pop	{r4, r5, r6, r7, pc}
10009f96:	46c0      	nop			; (mov r8, r8)

10009f98 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		bool select)
{
10009f98:	b510      	push	{r4, lr}
	uint8_t gpio_num = slave->ss_pin;
10009f9a:	7808      	ldrb	r0, [r1, #0]
	if(select) {
10009f9c:	2a00      	cmp	r2, #0
10009f9e:	d003      	beq.n	10009fa8 <spi_select_slave+0x10>
		/* ASSERT Slave select pin */
		gpio_pin_set_output_level(gpio_num, false);
10009fa0:	2100      	movs	r1, #0
10009fa2:	4b04      	ldr	r3, [pc, #16]	; (10009fb4 <spi_select_slave+0x1c>)
10009fa4:	4798      	blx	r3
10009fa6:	e002      	b.n	10009fae <spi_select_slave+0x16>
	} else {
		/* DEASSERT Slave select pin */
		gpio_pin_set_output_level(gpio_num, true);
10009fa8:	2101      	movs	r1, #1
10009faa:	4b02      	ldr	r3, [pc, #8]	; (10009fb4 <spi_select_slave+0x1c>)
10009fac:	4798      	blx	r3
	}

	return STATUS_OK;
}
10009fae:	2000      	movs	r0, #0
10009fb0:	bd10      	pop	{r4, pc}
10009fb2:	46c0      	nop			; (mov r8, r8)
10009fb4:	1000a4d9 	.word	0x1000a4d9

10009fb8 <dualtimer_isr_handler>:
 *
 * Dualtimer ISR handler.
 *
 */
static void dualtimer_isr_handler(void)
{
10009fb8:	b510      	push	{r4, lr}
 * \retval The interrupt status of timer1/timer2
 */
uint8_t dualtimer_get_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		return DUALTIMER0->TIMER1MIS.reg;
10009fba:	4b0d      	ldr	r3, [pc, #52]	; (10009ff0 <dualtimer_isr_handler+0x38>)
10009fbc:	7d1b      	ldrb	r3, [r3, #20]
 * Dualtimer ISR handler.
 *
 */
static void dualtimer_isr_handler(void)
{
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER1)) {
10009fbe:	2b00      	cmp	r3, #0
10009fc0:	d007      	beq.n	10009fd2 <dualtimer_isr_handler+0x1a>
 * \param[in]     timer        Timer1/Timer2
 */
void dualtimer_clear_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		DUALTIMER0->TIMER1INTCLR.reg = 1;
10009fc2:	2201      	movs	r2, #1
10009fc4:	4b0a      	ldr	r3, [pc, #40]	; (10009ff0 <dualtimer_isr_handler+0x38>)
10009fc6:	731a      	strb	r2, [r3, #12]
 */
static void dualtimer_isr_handler(void)
{
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER1)) {
		dualtimer_clear_interrupt_status(DUALTIMER_TIMER1);
		if (dualtimer_callback_timer1)
10009fc8:	4b0a      	ldr	r3, [pc, #40]	; (10009ff4 <dualtimer_isr_handler+0x3c>)
10009fca:	681b      	ldr	r3, [r3, #0]
10009fcc:	2b00      	cmp	r3, #0
10009fce:	d000      	beq.n	10009fd2 <dualtimer_isr_handler+0x1a>
			dualtimer_callback_timer1();
10009fd0:	4798      	blx	r3
uint8_t dualtimer_get_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		return DUALTIMER0->TIMER1MIS.reg;
	} else {
		return DUALTIMER0->TIMER2MIS.reg;
10009fd2:	2334      	movs	r3, #52	; 0x34
10009fd4:	4a06      	ldr	r2, [pc, #24]	; (10009ff0 <dualtimer_isr_handler+0x38>)
10009fd6:	5cd3      	ldrb	r3, [r2, r3]
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER1)) {
		dualtimer_clear_interrupt_status(DUALTIMER_TIMER1);
		if (dualtimer_callback_timer1)
			dualtimer_callback_timer1();
	}
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER2)) {
10009fd8:	2b00      	cmp	r3, #0
10009fda:	d007      	beq.n	10009fec <dualtimer_isr_handler+0x34>
void dualtimer_clear_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		DUALTIMER0->TIMER1INTCLR.reg = 1;
	} else {
		DUALTIMER0->TIMER2INTCLR.reg = 1;
10009fdc:	2101      	movs	r1, #1
10009fde:	232c      	movs	r3, #44	; 0x2c
10009fe0:	54d1      	strb	r1, [r2, r3]
		if (dualtimer_callback_timer1)
			dualtimer_callback_timer1();
	}
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER2)) {
		dualtimer_clear_interrupt_status(DUALTIMER_TIMER2);
		if (dualtimer_callback_timer2)
10009fe2:	4b05      	ldr	r3, [pc, #20]	; (10009ff8 <dualtimer_isr_handler+0x40>)
10009fe4:	681b      	ldr	r3, [r3, #0]
10009fe6:	2b00      	cmp	r3, #0
10009fe8:	d000      	beq.n	10009fec <dualtimer_isr_handler+0x34>
			dualtimer_callback_timer2();
10009fea:	4798      	blx	r3
	}
}
10009fec:	bd10      	pop	{r4, pc}
10009fee:	46c0      	nop			; (mov r8, r8)
10009ff0:	40001000 	.word	0x40001000
10009ff4:	10017f3c 	.word	0x10017f3c
10009ff8:	10017f40 	.word	0x10017f40

10009ffc <dualtimer_get_config_defaults>:
 *
 * \param[out]  config  Pointer to a DUALTIMER module configuration structure to set
 */
void dualtimer_get_config_defaults(struct dualtimer_config *config)
{
	config->timer1.timer_enable = true;
10009ffc:	2301      	movs	r3, #1
10009ffe:	7003      	strb	r3, [r0, #0]
	config->timer2.timer_enable = true;
1000a000:	7303      	strb	r3, [r0, #12]

	config->timer1.counter_mode = DUALTIMER_PERIODIC_MODE;
1000a002:	2202      	movs	r2, #2
1000a004:	7042      	strb	r2, [r0, #1]
	config->timer2.counter_mode = DUALTIMER_PERIODIC_MODE;
1000a006:	7342      	strb	r2, [r0, #13]

	config->timer1.counter_size = DUALTIMER_COUNTER_SIZE_32BIT;
1000a008:	7083      	strb	r3, [r0, #2]
	config->timer2.counter_size = DUALTIMER_COUNTER_SIZE_32BIT;
1000a00a:	7383      	strb	r3, [r0, #14]

	config->timer1.clock_prescaler = DUALTIMER_CLOCK_PRESCALER_DIV1;
1000a00c:	2200      	movs	r2, #0
1000a00e:	70c2      	strb	r2, [r0, #3]
	config->timer2.clock_prescaler = DUALTIMER_CLOCK_PRESCALER_DIV1;
1000a010:	73c2      	strb	r2, [r0, #15]

	config->timer1.interrup_enable = true;
1000a012:	7103      	strb	r3, [r0, #4]
	config->timer2.interrup_enable = true;
1000a014:	7403      	strb	r3, [r0, #16]

	config->timer1.load_value = 0;
1000a016:	6082      	str	r2, [r0, #8]
	config->timer2.load_value = 0;
1000a018:	6142      	str	r2, [r0, #20]

	config->clock_source = DUALTIMER_CLK_INPUT_0;
1000a01a:	7602      	strb	r2, [r0, #24]
}
1000a01c:	4770      	bx	lr
1000a01e:	46c0      	nop			; (mov r8, r8)

1000a020 <dualtimer_get_value>:
 *
 * \retval Timer1/Timer2 current value
 */
uint32_t dualtimer_get_value(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
1000a020:	2800      	cmp	r0, #0
1000a022:	d102      	bne.n	1000a02a <dualtimer_get_value+0xa>
		return DUALTIMER0->TIMER1VALUE.reg;
1000a024:	4b02      	ldr	r3, [pc, #8]	; (1000a030 <dualtimer_get_value+0x10>)
1000a026:	6858      	ldr	r0, [r3, #4]
1000a028:	e001      	b.n	1000a02e <dualtimer_get_value+0xe>
	} else {
		return DUALTIMER0->TIMER2VALUE.reg;
1000a02a:	4b01      	ldr	r3, [pc, #4]	; (1000a030 <dualtimer_get_value+0x10>)
1000a02c:	6a58      	ldr	r0, [r3, #36]	; 0x24
	}
}
1000a02e:	4770      	bx	lr
1000a030:	40001000 	.word	0x40001000

1000a034 <dualtimer_set_counter>:
 * \param[in]     value        Load value
 */
void dualtimer_set_counter(enum dualtimer_timer timer,
		enum dualtimer_set_register cur_bg, uint32_t value)
{
	if (timer == DUALTIMER_TIMER1) {
1000a034:	2800      	cmp	r0, #0
1000a036:	d107      	bne.n	1000a048 <dualtimer_set_counter+0x14>
		if (cur_bg == DUALTIMER_SET_CURRUNT_REG) {
1000a038:	2900      	cmp	r1, #0
1000a03a:	d102      	bne.n	1000a042 <dualtimer_set_counter+0xe>
			DUALTIMER0->TIMER1LOAD.reg = value;
1000a03c:	4b06      	ldr	r3, [pc, #24]	; (1000a058 <dualtimer_set_counter+0x24>)
1000a03e:	601a      	str	r2, [r3, #0]
1000a040:	e009      	b.n	1000a056 <dualtimer_set_counter+0x22>
		} else {
			DUALTIMER0->TIMER1BGLOAD.reg = value;
1000a042:	4b05      	ldr	r3, [pc, #20]	; (1000a058 <dualtimer_set_counter+0x24>)
1000a044:	619a      	str	r2, [r3, #24]
1000a046:	e006      	b.n	1000a056 <dualtimer_set_counter+0x22>
		}
	} else {
		if (cur_bg == DUALTIMER_SET_CURRUNT_REG) {
1000a048:	2900      	cmp	r1, #0
1000a04a:	d102      	bne.n	1000a052 <dualtimer_set_counter+0x1e>
			DUALTIMER0->TIMER2LOAD.reg = value;
1000a04c:	4b02      	ldr	r3, [pc, #8]	; (1000a058 <dualtimer_set_counter+0x24>)
1000a04e:	621a      	str	r2, [r3, #32]
1000a050:	e001      	b.n	1000a056 <dualtimer_set_counter+0x22>
			} else {
			DUALTIMER0->TIMER2BGLOAD.reg = value;
1000a052:	4b01      	ldr	r3, [pc, #4]	; (1000a058 <dualtimer_set_counter+0x24>)
1000a054:	639a      	str	r2, [r3, #56]	; 0x38
		}
	}
}
1000a056:	4770      	bx	lr
1000a058:	40001000 	.word	0x40001000

1000a05c <dualtimer_enable>:
 *
 * \param[in]     timer        Timer1/Timer2
 */
void dualtimer_enable(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
1000a05c:	2800      	cmp	r0, #0
1000a05e:	d105      	bne.n	1000a06c <dualtimer_enable+0x10>
		DUALTIMER0->TIMER1CONTROL.reg |= DUALTIMER_TIMER1CONTROL_TIMER_ENABLE;
1000a060:	4a06      	ldr	r2, [pc, #24]	; (1000a07c <dualtimer_enable+0x20>)
1000a062:	7a11      	ldrb	r1, [r2, #8]
1000a064:	2380      	movs	r3, #128	; 0x80
1000a066:	430b      	orrs	r3, r1
1000a068:	7213      	strb	r3, [r2, #8]
1000a06a:	e005      	b.n	1000a078 <dualtimer_enable+0x1c>
	} else {
		DUALTIMER0->TIMER2CONTROL.reg |= DUALTIMER_TIMER2CONTROL_TIMER_ENABLE;
1000a06c:	4903      	ldr	r1, [pc, #12]	; (1000a07c <dualtimer_enable+0x20>)
1000a06e:	2228      	movs	r2, #40	; 0x28
1000a070:	5c88      	ldrb	r0, [r1, r2]
1000a072:	2380      	movs	r3, #128	; 0x80
1000a074:	4303      	orrs	r3, r0
1000a076:	548b      	strb	r3, [r1, r2]
	}
}
1000a078:	4770      	bx	lr
1000a07a:	46c0      	nop			; (mov r8, r8)
1000a07c:	40001000 	.word	0x40001000

1000a080 <dualtimer_disable>:
 *
 * \param[in]     timer        Timer1/Timer2
 */
void dualtimer_disable(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
1000a080:	2800      	cmp	r0, #0
1000a082:	d105      	bne.n	1000a090 <dualtimer_disable+0x10>
		DUALTIMER0->TIMER1CONTROL.reg &= ~DUALTIMER_TIMER1CONTROL_TIMER_ENABLE;
1000a084:	4a06      	ldr	r2, [pc, #24]	; (1000a0a0 <dualtimer_disable+0x20>)
1000a086:	7a11      	ldrb	r1, [r2, #8]
1000a088:	237f      	movs	r3, #127	; 0x7f
1000a08a:	400b      	ands	r3, r1
1000a08c:	7213      	strb	r3, [r2, #8]
1000a08e:	e005      	b.n	1000a09c <dualtimer_disable+0x1c>
	} else {
		DUALTIMER0->TIMER2CONTROL.reg &= ~DUALTIMER_TIMER2CONTROL_TIMER_ENABLE;
1000a090:	4903      	ldr	r1, [pc, #12]	; (1000a0a0 <dualtimer_disable+0x20>)
1000a092:	2228      	movs	r2, #40	; 0x28
1000a094:	5c88      	ldrb	r0, [r1, r2]
1000a096:	237f      	movs	r3, #127	; 0x7f
1000a098:	4003      	ands	r3, r0
1000a09a:	548b      	strb	r3, [r1, r2]
	}
}
1000a09c:	4770      	bx	lr
1000a09e:	46c0      	nop			; (mov r8, r8)
1000a0a0:	40001000 	.word	0x40001000

1000a0a4 <dualtimer_init>:
 * \param[in]     config       Pointer to the Dualtimer configuration options struct
 *
 * \return Status of the initialization procedure.
 */
void dualtimer_init(const struct dualtimer_config *config)
{
1000a0a4:	b570      	push	{r4, r5, r6, lr}
1000a0a6:	0004      	movs	r4, r0
	uint8_t regval = 0;

	/* Global reset */
	system_peripheral_reset(PERIPHERAL_DUALT_TIMER);
1000a0a8:	2004      	movs	r0, #4
1000a0aa:	4b39      	ldr	r3, [pc, #228]	; (1000a190 <dualtimer_init+0xec>)
1000a0ac:	4798      	blx	r3

	/* Common config */
	if (config->timer1.timer_enable || config->timer2.timer_enable) {
1000a0ae:	7823      	ldrb	r3, [r4, #0]
1000a0b0:	2b00      	cmp	r3, #0
1000a0b2:	d102      	bne.n	1000a0ba <dualtimer_init+0x16>
1000a0b4:	7b23      	ldrb	r3, [r4, #12]
1000a0b6:	2b00      	cmp	r3, #0
1000a0b8:	d065      	beq.n	1000a186 <dualtimer_init+0xe2>
		LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |=
1000a0ba:	4936      	ldr	r1, [pc, #216]	; (1000a194 <dualtimer_init+0xf0>)
1000a0bc:	68ca      	ldr	r2, [r1, #12]
1000a0be:	2320      	movs	r3, #32
1000a0c0:	4313      	orrs	r3, r2
1000a0c2:	60cb      	str	r3, [r1, #12]
		LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_DUALTIMER0_CLK_EN;
		LPMCU_MISC_REGS0->LPMCU_CTRL.bit.DUALTIMER0_CLK_SEL = config->clock_source;
1000a0c4:	7e22      	ldrb	r2, [r4, #24]
1000a0c6:	698b      	ldr	r3, [r1, #24]
1000a0c8:	2003      	movs	r0, #3
1000a0ca:	4002      	ands	r2, r0
1000a0cc:	0112      	lsls	r2, r2, #4
1000a0ce:	302d      	adds	r0, #45	; 0x2d
1000a0d0:	4383      	bics	r3, r0
1000a0d2:	4313      	orrs	r3, r2
1000a0d4:	618b      	str	r3, [r1, #24]
	}
	
	/* Timer1 config */
	if (config->timer1.timer_enable) {
1000a0d6:	7823      	ldrb	r3, [r4, #0]
1000a0d8:	2b00      	cmp	r3, #0
1000a0da:	d026      	beq.n	1000a12a <dualtimer_init+0x86>
		if (config->timer1.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
1000a0dc:	7863      	ldrb	r3, [r4, #1]
			regval = DUALTIMER_TIMER1CONTROL_ONE_SHOT_COUNT_1;
1000a0de:	2101      	movs	r1, #1
		LPMCU_MISC_REGS0->LPMCU_CTRL.bit.DUALTIMER0_CLK_SEL = config->clock_source;
	}
	
	/* Timer1 config */
	if (config->timer1.timer_enable) {
		if (config->timer1.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
1000a0e0:	2b00      	cmp	r3, #0
1000a0e2:	d003      	beq.n	1000a0ec <dualtimer_init+0x48>
			regval = DUALTIMER_TIMER1CONTROL_ONE_SHOT_COUNT_1;
		} else if (config->timer1.counter_mode == DUALTIMER_FREE_RUNNING_MODE) {
			regval = DUALTIMER_TIMER1CONTROL_TIMER_MODE_0;
		} else if (config->timer1.counter_mode == DUALTIMER_PERIODIC_MODE) {
			regval = DUALTIMER_TIMER1CONTROL_TIMER_MODE_1;
1000a0e4:	3b02      	subs	r3, #2
1000a0e6:	425d      	negs	r5, r3
1000a0e8:	415d      	adcs	r5, r3
1000a0ea:	01a9      	lsls	r1, r5, #6
		}
		regval |= (DUALTIMER_TIMER1CONTROL_TIMER_SIZE &
1000a0ec:	78a2      	ldrb	r2, [r4, #2]
1000a0ee:	0052      	lsls	r2, r2, #1
1000a0f0:	2502      	movs	r5, #2
1000a0f2:	402a      	ands	r2, r5
1000a0f4:	78e3      	ldrb	r3, [r4, #3]
1000a0f6:	009b      	lsls	r3, r3, #2
1000a0f8:	350a      	adds	r5, #10
1000a0fa:	402b      	ands	r3, r5
1000a0fc:	431a      	orrs	r2, r3
1000a0fe:	0015      	movs	r5, r2
1000a100:	430d      	orrs	r5, r1
				((config->timer1.counter_size) << DUALTIMER_TIMER1CONTROL_TIMER_SIZE_Pos)) |
				DUALTIMER_TIMER1CONTROL_TIMERPRE(config->timer1.clock_prescaler);
		if (config->timer1.interrup_enable) {
1000a102:	7923      	ldrb	r3, [r4, #4]
1000a104:	2b00      	cmp	r3, #0
1000a106:	d001      	beq.n	1000a10c <dualtimer_init+0x68>
			regval |= DUALTIMER_TIMER1CONTROL_INTERRUPT_ENABLE;
1000a108:	2320      	movs	r3, #32
1000a10a:	431d      	orrs	r5, r3
		}
		DUALTIMER0->TIMER1LOAD.reg = config->timer1.load_value;
1000a10c:	4b22      	ldr	r3, [pc, #136]	; (1000a198 <dualtimer_init+0xf4>)
1000a10e:	68a2      	ldr	r2, [r4, #8]
1000a110:	601a      	str	r2, [r3, #0]
		DUALTIMER0->TIMER1CONTROL.reg = regval;
1000a112:	721d      	strb	r5, [r3, #8]
		LPMCU_MISC_REGS0->DUALTIMER0_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER0_CTRL_CNTR_1_ENABLE;
1000a114:	491f      	ldr	r1, [pc, #124]	; (1000a194 <dualtimer_init+0xf0>)
1000a116:	22c4      	movs	r2, #196	; 0xc4
1000a118:	0052      	lsls	r2, r2, #1
1000a11a:	5c88      	ldrb	r0, [r1, r2]
1000a11c:	2301      	movs	r3, #1
1000a11e:	4303      	orrs	r3, r0
1000a120:	548b      	strb	r3, [r1, r2]
		dualtimer_enable(DUALTIMER_TIMER1);
1000a122:	2000      	movs	r0, #0
1000a124:	4b1d      	ldr	r3, [pc, #116]	; (1000a19c <dualtimer_init+0xf8>)
1000a126:	4798      	blx	r3
1000a128:	e000      	b.n	1000a12c <dualtimer_init+0x88>
 *
 * \return Status of the initialization procedure.
 */
void dualtimer_init(const struct dualtimer_config *config)
{
	uint8_t regval = 0;
1000a12a:	2500      	movs	r5, #0
		LPMCU_MISC_REGS0->DUALTIMER0_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER0_CTRL_CNTR_1_ENABLE;
		dualtimer_enable(DUALTIMER_TIMER1);
	}

	/* Timer2 config */
	if (config->timer2.timer_enable) {
1000a12c:	7b23      	ldrb	r3, [r4, #12]
1000a12e:	2b00      	cmp	r3, #0
1000a130:	d029      	beq.n	1000a186 <dualtimer_init+0xe2>
		if (config->timer2.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
1000a132:	7b63      	ldrb	r3, [r4, #13]
1000a134:	2b00      	cmp	r3, #0
1000a136:	d005      	beq.n	1000a144 <dualtimer_init+0xa0>
			regval = DUALTIMER_TIMER2CONTROL_ONE_SHOT_COUNT_1;
		} else if (config->timer2.counter_mode == DUALTIMER_FREE_RUNNING_MODE) {
1000a138:	2b01      	cmp	r3, #1
1000a13a:	d005      	beq.n	1000a148 <dualtimer_init+0xa4>
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_0;
		} else if (config->timer2.counter_mode == DUALTIMER_PERIODIC_MODE) {
1000a13c:	2b02      	cmp	r3, #2
1000a13e:	d104      	bne.n	1000a14a <dualtimer_init+0xa6>
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_1;
1000a140:	2540      	movs	r5, #64	; 0x40
1000a142:	e002      	b.n	1000a14a <dualtimer_init+0xa6>
	}

	/* Timer2 config */
	if (config->timer2.timer_enable) {
		if (config->timer2.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
			regval = DUALTIMER_TIMER2CONTROL_ONE_SHOT_COUNT_1;
1000a144:	2501      	movs	r5, #1
1000a146:	e000      	b.n	1000a14a <dualtimer_init+0xa6>
		} else if (config->timer2.counter_mode == DUALTIMER_FREE_RUNNING_MODE) {
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_0;
1000a148:	2500      	movs	r5, #0
		} else if (config->timer2.counter_mode == DUALTIMER_PERIODIC_MODE) {
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_1;
		}
		regval |= (DUALTIMER_TIMER2CONTROL_TIMER_SIZE &
1000a14a:	7ba3      	ldrb	r3, [r4, #14]
1000a14c:	005b      	lsls	r3, r3, #1
1000a14e:	2102      	movs	r1, #2
1000a150:	4019      	ands	r1, r3
1000a152:	7be2      	ldrb	r2, [r4, #15]
1000a154:	0092      	lsls	r2, r2, #2
1000a156:	230c      	movs	r3, #12
1000a158:	4013      	ands	r3, r2
1000a15a:	430b      	orrs	r3, r1
1000a15c:	431d      	orrs	r5, r3
				((config->timer2.counter_size) << DUALTIMER_TIMER2CONTROL_TIMER_SIZE_Pos)) |
				DUALTIMER_TIMER2CONTROL_TIMERPRE(config->timer2.clock_prescaler);
		if (config->timer2.interrup_enable) {
1000a15e:	7c23      	ldrb	r3, [r4, #16]
1000a160:	2b00      	cmp	r3, #0
1000a162:	d001      	beq.n	1000a168 <dualtimer_init+0xc4>
			regval |= DUALTIMER_TIMER2CONTROL_INTERRUPT_ENABLE;
1000a164:	2320      	movs	r3, #32
1000a166:	431d      	orrs	r5, r3
		}
		DUALTIMER0->TIMER2LOAD.reg = config->timer2.load_value;
1000a168:	6962      	ldr	r2, [r4, #20]
1000a16a:	4b0b      	ldr	r3, [pc, #44]	; (1000a198 <dualtimer_init+0xf4>)
1000a16c:	621a      	str	r2, [r3, #32]
		DUALTIMER0->TIMER2CONTROL.reg = regval;
1000a16e:	2228      	movs	r2, #40	; 0x28
1000a170:	549d      	strb	r5, [r3, r2]
		LPMCU_MISC_REGS0->DUALTIMER0_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER0_CTRL_CNTR_2_ENABLE;
1000a172:	4908      	ldr	r1, [pc, #32]	; (1000a194 <dualtimer_init+0xf0>)
1000a174:	3261      	adds	r2, #97	; 0x61
1000a176:	32ff      	adds	r2, #255	; 0xff
1000a178:	5c88      	ldrb	r0, [r1, r2]
1000a17a:	2302      	movs	r3, #2
1000a17c:	4303      	orrs	r3, r0
1000a17e:	548b      	strb	r3, [r1, r2]
		dualtimer_enable(DUALTIMER_TIMER2);
1000a180:	2001      	movs	r0, #1
1000a182:	4b06      	ldr	r3, [pc, #24]	; (1000a19c <dualtimer_init+0xf8>)
1000a184:	4798      	blx	r3
	}

	system_register_isr(RAM_ISR_TABLE_DUALTIMER_INDEX, (uint32_t)dualtimer_isr_handler);
1000a186:	4906      	ldr	r1, [pc, #24]	; (1000a1a0 <dualtimer_init+0xfc>)
1000a188:	201e      	movs	r0, #30
1000a18a:	4b06      	ldr	r3, [pc, #24]	; (1000a1a4 <dualtimer_init+0x100>)
1000a18c:	4798      	blx	r3
}
1000a18e:	bd70      	pop	{r4, r5, r6, pc}
1000a190:	1000afdd 	.word	0x1000afdd
1000a194:	4000b000 	.word	0x4000b000
1000a198:	40001000 	.word	0x40001000
1000a19c:	1000a05d 	.word	0x1000a05d
1000a1a0:	10009fb9 	.word	0x10009fb9
1000a1a4:	1000b445 	.word	0x1000b445

1000a1a8 <dualtimer_register_callback>:
 *
 * \param[in]     callback_func Pointer to callback function
 */
void dualtimer_register_callback(enum dualtimer_timer timer, dualtimer_callback_t fun)
{
	if (timer == DUALTIMER_TIMER1) {
1000a1a8:	2800      	cmp	r0, #0
1000a1aa:	d102      	bne.n	1000a1b2 <dualtimer_register_callback+0xa>
		dualtimer_callback_timer1 = fun;
1000a1ac:	4b02      	ldr	r3, [pc, #8]	; (1000a1b8 <dualtimer_register_callback+0x10>)
1000a1ae:	6019      	str	r1, [r3, #0]
1000a1b0:	e001      	b.n	1000a1b6 <dualtimer_register_callback+0xe>
	} else {
		dualtimer_callback_timer2 = fun;
1000a1b2:	4b02      	ldr	r3, [pc, #8]	; (1000a1bc <dualtimer_register_callback+0x14>)
1000a1b4:	6019      	str	r1, [r3, #0]
	}
}
1000a1b6:	4770      	bx	lr
1000a1b8:	10017f3c 	.word	0x10017f3c
1000a1bc:	10017f40 	.word	0x10017f40

1000a1c0 <gpio_port0_isr_handler>:
 *
 * This function will enter interrupt.
 *
 */
static void gpio_port0_isr_handler(void)
{
1000a1c0:	b570      	push	{r4, r5, r6, lr}
	uint32_t flag = _gpio_instances[0].hw->INTSTATUSCLEAR.reg;
1000a1c2:	4b16      	ldr	r3, [pc, #88]	; (1000a21c <gpio_port0_isr_handler+0x5c>)
1000a1c4:	681d      	ldr	r5, [r3, #0]
1000a1c6:	8f29      	ldrh	r1, [r5, #56]	; 0x38
1000a1c8:	b289      	uxth	r1, r1

	for (uint8_t i = 0; i < 16; i++){
		if (flag & (1 << i)) {
1000a1ca:	07cb      	lsls	r3, r1, #31
1000a1cc:	d407      	bmi.n	1000a1de <gpio_port0_isr_handler+0x1e>
1000a1ce:	2301      	movs	r3, #1
1000a1d0:	2401      	movs	r4, #1
1000a1d2:	0018      	movs	r0, r3
1000a1d4:	0022      	movs	r2, r4
1000a1d6:	409a      	lsls	r2, r3
1000a1d8:	4211      	tst	r1, r2
1000a1da:	d014      	beq.n	1000a206 <gpio_port0_isr_handler+0x46>
1000a1dc:	e001      	b.n	1000a1e2 <gpio_port0_isr_handler+0x22>
1000a1de:	2201      	movs	r2, #1
1000a1e0:	2000      	movs	r0, #0
			/* Clear interrupt flag */
			_gpio_instances[0].hw->INTSTATUSCLEAR.reg = (1 << i);
1000a1e2:	b292      	uxth	r2, r2
1000a1e4:	872a      	strh	r2, [r5, #56]	; 0x38
			if ((_gpio_instances[0].callback_enable_mask & (1 << i)) && \
1000a1e6:	2346      	movs	r3, #70	; 0x46
1000a1e8:	4a0c      	ldr	r2, [pc, #48]	; (1000a21c <gpio_port0_isr_handler+0x5c>)
1000a1ea:	5ad3      	ldrh	r3, [r2, r3]
1000a1ec:	4103      	asrs	r3, r0
1000a1ee:	07db      	lsls	r3, r3, #31
1000a1f0:	d50c      	bpl.n	1000a20c <gpio_port0_isr_handler+0x4c>
                    (_gpio_instances[0].callback_reg_mask & (1 << i)))
1000a1f2:	2344      	movs	r3, #68	; 0x44

	for (uint8_t i = 0; i < 16; i++){
		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[0].hw->INTSTATUSCLEAR.reg = (1 << i);
			if ((_gpio_instances[0].callback_enable_mask & (1 << i)) && \
1000a1f4:	5ad3      	ldrh	r3, [r2, r3]
1000a1f6:	4103      	asrs	r3, r0
1000a1f8:	07db      	lsls	r3, r3, #31
1000a1fa:	d507      	bpl.n	1000a20c <gpio_port0_isr_handler+0x4c>
                    (_gpio_instances[0].callback_reg_mask & (1 << i)))
                _gpio_instances[0].callback[i]();
1000a1fc:	0080      	lsls	r0, r0, #2
1000a1fe:	1810      	adds	r0, r2, r0
1000a200:	6843      	ldr	r3, [r0, #4]
1000a202:	4798      	blx	r3
1000a204:	e002      	b.n	1000a20c <gpio_port0_isr_handler+0x4c>
1000a206:	3301      	adds	r3, #1
 */
static void gpio_port0_isr_handler(void)
{
	uint32_t flag = _gpio_instances[0].hw->INTSTATUSCLEAR.reg;

	for (uint8_t i = 0; i < 16; i++){
1000a208:	2b10      	cmp	r3, #16
1000a20a:	d1e2      	bne.n	1000a1d2 <gpio_port0_isr_handler+0x12>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
1000a20c:	2180      	movs	r1, #128	; 0x80
1000a20e:	0409      	lsls	r1, r1, #16
1000a210:	23c0      	movs	r3, #192	; 0xc0
1000a212:	005b      	lsls	r3, r3, #1
1000a214:	4a02      	ldr	r2, [pc, #8]	; (1000a220 <gpio_port0_isr_handler+0x60>)
1000a216:	50d1      	str	r1, [r2, r3]
                _gpio_instances[0].callback[i]();
			break;
		}
	}
	NVIC_ClearPendingIRQ(GPIO0_IRQn);
}
1000a218:	bd70      	pop	{r4, r5, r6, pc}
1000a21a:	46c0      	nop			; (mov r8, r8)
1000a21c:	10019c48 	.word	0x10019c48
1000a220:	e000e100 	.word	0xe000e100

1000a224 <gpio_port1_isr_handler>:
 *
 * This function will enter interrupt.
 *
 */
static void gpio_port1_isr_handler(void)
{
1000a224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t flag = _gpio_instances[1].hw->INTSTATUSCLEAR.reg;
1000a226:	4b18      	ldr	r3, [pc, #96]	; (1000a288 <gpio_port1_isr_handler+0x64>)
1000a228:	6c9b      	ldr	r3, [r3, #72]	; 0x48
1000a22a:	8f1e      	ldrh	r6, [r3, #56]	; 0x38
1000a22c:	b2b6      	uxth	r6, r6
1000a22e:	0037      	movs	r7, r6
1000a230:	2400      	movs	r4, #0

	for (uint8_t i = 0; i < 16; i++){
		/* For AON wakeup pin clear interrupt */
		if (flag & ((1<<15) | (1<<14) | (1<<13))) {
1000a232:	0b76      	lsrs	r6, r6, #13
1000a234:	0376      	lsls	r6, r6, #13
			aon_handle_ext_wakeup_isr();
		}

		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[1].hw->INTSTATUSCLEAR.reg = (1 << i);
1000a236:	4d14      	ldr	r5, [pc, #80]	; (1000a288 <gpio_port1_isr_handler+0x64>)
{
	uint32_t flag = _gpio_instances[1].hw->INTSTATUSCLEAR.reg;

	for (uint8_t i = 0; i < 16; i++){
		/* For AON wakeup pin clear interrupt */
		if (flag & ((1<<15) | (1<<14) | (1<<13))) {
1000a238:	2e00      	cmp	r6, #0
1000a23a:	d001      	beq.n	1000a240 <gpio_port1_isr_handler+0x1c>
			aon_handle_ext_wakeup_isr();
1000a23c:	4b13      	ldr	r3, [pc, #76]	; (1000a28c <gpio_port1_isr_handler+0x68>)
1000a23e:	4798      	blx	r3
		}

		if (flag & (1 << i)) {
1000a240:	0022      	movs	r2, r4
1000a242:	2301      	movs	r3, #1
1000a244:	40a3      	lsls	r3, r4
1000a246:	421f      	tst	r7, r3
1000a248:	d013      	beq.n	1000a272 <gpio_port1_isr_handler+0x4e>
			/* Clear interrupt flag */
			_gpio_instances[1].hw->INTSTATUSCLEAR.reg = (1 << i);
1000a24a:	b29b      	uxth	r3, r3
1000a24c:	6ca9      	ldr	r1, [r5, #72]	; 0x48
1000a24e:	870b      	strh	r3, [r1, #56]	; 0x38
			if ((_gpio_instances[1].callback_enable_mask & (1 << i)) && \
1000a250:	238e      	movs	r3, #142	; 0x8e
1000a252:	5aeb      	ldrh	r3, [r5, r3]
1000a254:	4123      	asrs	r3, r4
1000a256:	07db      	lsls	r3, r3, #31
1000a258:	d50b      	bpl.n	1000a272 <gpio_port1_isr_handler+0x4e>
			(_gpio_instances[1].callback_reg_mask & (1 << i))) {
1000a25a:	238c      	movs	r3, #140	; 0x8c
		}

		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[1].hw->INTSTATUSCLEAR.reg = (1 << i);
			if ((_gpio_instances[1].callback_enable_mask & (1 << i)) && \
1000a25c:	490a      	ldr	r1, [pc, #40]	; (1000a288 <gpio_port1_isr_handler+0x64>)
1000a25e:	5acb      	ldrh	r3, [r1, r3]
1000a260:	4123      	asrs	r3, r4
1000a262:	07db      	lsls	r3, r3, #31
1000a264:	d505      	bpl.n	1000a272 <gpio_port1_isr_handler+0x4e>
			(_gpio_instances[1].callback_reg_mask & (1 << i))) {
				_gpio_instances[1].callback[i]();
1000a266:	3212      	adds	r2, #18
1000a268:	0092      	lsls	r2, r2, #2
1000a26a:	188a      	adds	r2, r1, r2
1000a26c:	6853      	ldr	r3, [r2, #4]
1000a26e:	4798      	blx	r3
				break;
1000a270:	e002      	b.n	1000a278 <gpio_port1_isr_handler+0x54>
1000a272:	3401      	adds	r4, #1
 */
static void gpio_port1_isr_handler(void)
{
	uint32_t flag = _gpio_instances[1].hw->INTSTATUSCLEAR.reg;

	for (uint8_t i = 0; i < 16; i++){
1000a274:	2c10      	cmp	r4, #16
1000a276:	d1df      	bne.n	1000a238 <gpio_port1_isr_handler+0x14>
1000a278:	2180      	movs	r1, #128	; 0x80
1000a27a:	0449      	lsls	r1, r1, #17
1000a27c:	23c0      	movs	r3, #192	; 0xc0
1000a27e:	005b      	lsls	r3, r3, #1
1000a280:	4a03      	ldr	r2, [pc, #12]	; (1000a290 <gpio_port1_isr_handler+0x6c>)
1000a282:	50d1      	str	r1, [r2, r3]
				break;
			}
		}
	}
	NVIC_ClearPendingIRQ(GPIO1_IRQn);
}
1000a284:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000a286:	46c0      	nop			; (mov r8, r8)
1000a288:	10019c48 	.word	0x10019c48
1000a28c:	0001bc51 	.word	0x0001bc51
1000a290:	e000e100 	.word	0xe000e100

1000a294 <gpio_port2_isr_handler>:
 *
 * This function will enter interrupt.
 *
 */
static void gpio_port2_isr_handler(void)
{
1000a294:	b510      	push	{r4, lr}
	uint32_t flag = _gpio_instances[2].hw->INTSTATUSCLEAR.reg;
1000a296:	2390      	movs	r3, #144	; 0x90
1000a298:	4a1b      	ldr	r2, [pc, #108]	; (1000a308 <gpio_port2_isr_handler+0x74>)
1000a29a:	58d2      	ldr	r2, [r2, r3]
1000a29c:	8f13      	ldrh	r3, [r2, #56]	; 0x38
1000a29e:	b29b      	uxth	r3, r3

	for (uint8_t i = 12; i < 16; i++){
		if (flag & (1 << i)) {
1000a2a0:	04d9      	lsls	r1, r3, #19
1000a2a2:	d414      	bmi.n	1000a2ce <gpio_port2_isr_handler+0x3a>
1000a2a4:	0499      	lsls	r1, r3, #18
1000a2a6:	d40a      	bmi.n	1000a2be <gpio_port2_isr_handler+0x2a>
1000a2a8:	0459      	lsls	r1, r3, #17
1000a2aa:	d40c      	bmi.n	1000a2c6 <gpio_port2_isr_handler+0x32>
1000a2ac:	0bdb      	lsrs	r3, r3, #15
1000a2ae:	03db      	lsls	r3, r3, #15
1000a2b0:	b29b      	uxth	r3, r3
1000a2b2:	2b00      	cmp	r3, #0
1000a2b4:	d020      	beq.n	1000a2f8 <gpio_port2_isr_handler+0x64>
1000a2b6:	2380      	movs	r3, #128	; 0x80
1000a2b8:	021b      	lsls	r3, r3, #8
1000a2ba:	210f      	movs	r1, #15
1000a2bc:	e00a      	b.n	1000a2d4 <gpio_port2_isr_handler+0x40>
1000a2be:	2380      	movs	r3, #128	; 0x80
1000a2c0:	019b      	lsls	r3, r3, #6
1000a2c2:	210d      	movs	r1, #13
1000a2c4:	e006      	b.n	1000a2d4 <gpio_port2_isr_handler+0x40>
1000a2c6:	2380      	movs	r3, #128	; 0x80
1000a2c8:	01db      	lsls	r3, r3, #7
1000a2ca:	210e      	movs	r1, #14
1000a2cc:	e002      	b.n	1000a2d4 <gpio_port2_isr_handler+0x40>
1000a2ce:	2380      	movs	r3, #128	; 0x80
1000a2d0:	015b      	lsls	r3, r3, #5
1000a2d2:	210c      	movs	r1, #12
			/* Clear interrupt flag */
			_gpio_instances[2].hw->INTSTATUSCLEAR.reg = (1 << i);
1000a2d4:	b29b      	uxth	r3, r3
1000a2d6:	8713      	strh	r3, [r2, #56]	; 0x38
			if ((_gpio_instances[2].callback_enable_mask & (1 << i)) && \
1000a2d8:	23d6      	movs	r3, #214	; 0xd6
1000a2da:	4a0b      	ldr	r2, [pc, #44]	; (1000a308 <gpio_port2_isr_handler+0x74>)
1000a2dc:	5ad3      	ldrh	r3, [r2, r3]
1000a2de:	410b      	asrs	r3, r1
1000a2e0:	07db      	lsls	r3, r3, #31
1000a2e2:	d509      	bpl.n	1000a2f8 <gpio_port2_isr_handler+0x64>
                    (_gpio_instances[2].callback_reg_mask & (1 << i)))
1000a2e4:	23d4      	movs	r3, #212	; 0xd4

	for (uint8_t i = 12; i < 16; i++){
		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[2].hw->INTSTATUSCLEAR.reg = (1 << i);
			if ((_gpio_instances[2].callback_enable_mask & (1 << i)) && \
1000a2e6:	5ad3      	ldrh	r3, [r2, r3]
1000a2e8:	410b      	asrs	r3, r1
1000a2ea:	07db      	lsls	r3, r3, #31
1000a2ec:	d504      	bpl.n	1000a2f8 <gpio_port2_isr_handler+0x64>
                    (_gpio_instances[2].callback_reg_mask & (1 << i)))
                _gpio_instances[2].callback[i]();
1000a2ee:	3124      	adds	r1, #36	; 0x24
1000a2f0:	0089      	lsls	r1, r1, #2
1000a2f2:	1851      	adds	r1, r2, r1
1000a2f4:	684b      	ldr	r3, [r1, #4]
1000a2f6:	4798      	blx	r3
1000a2f8:	2180      	movs	r1, #128	; 0x80
1000a2fa:	0489      	lsls	r1, r1, #18
1000a2fc:	23c0      	movs	r3, #192	; 0xc0
1000a2fe:	005b      	lsls	r3, r3, #1
1000a300:	4a02      	ldr	r2, [pc, #8]	; (1000a30c <gpio_port2_isr_handler+0x78>)
1000a302:	50d1      	str	r1, [r2, r3]
			break;
		}
	}
	NVIC_ClearPendingIRQ(GPIO2_IRQn);
}
1000a304:	bd10      	pop	{r4, pc}
1000a306:	46c0      	nop			; (mov r8, r8)
1000a308:	10019c48 	.word	0x10019c48
1000a30c:	e000e100 	.word	0xe000e100

1000a310 <gpio_get_config_defaults>:
 *  \param[out] config  Configuration structure to initialize to default values.
 */
void gpio_get_config_defaults(struct gpio_config *const config)
{
	/* Default configuration values */
	config->direction  = GPIO_PIN_DIR_INPUT;
1000a310:	2300      	movs	r3, #0
1000a312:	7003      	strb	r3, [r0, #0]
	config->input_pull = GPIO_PIN_PULL_UP;
1000a314:	2201      	movs	r2, #1
1000a316:	7042      	strb	r2, [r0, #1]
	config->powersave  = false;
1000a318:	7083      	strb	r3, [r0, #2]
	config->aon_wakeup = false;
1000a31a:	70c3      	strb	r3, [r0, #3]
}
1000a31c:	4770      	bx	lr
1000a31e:	46c0      	nop			; (mov r8, r8)

1000a320 <gpio_pin_set_config>:
 *  \retval STATUS_RESOURCE_NOT_AVAILABLE   Requested gpio is already in use.
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
1000a320:	b570      	push	{r4, r5, r6, lr}
	* GPIO_0 & GPIO_1 are used for SWD.
	*/
	if ((gpio_pin == PIN_LP_GPIO_0) || \
		(gpio_pin == PIN_LP_GPIO_1))
	{
		status = STATUS_ERR_INVALID_ARG;
1000a322:	2317      	movs	r3, #23
	enum status_code status = STATUS_OK;

	/* Following GPIO's should never be modified by user.
	* GPIO_0 & GPIO_1 are used for SWD.
	*/
	if ((gpio_pin == PIN_LP_GPIO_0) || \
1000a324:	2801      	cmp	r0, #1
1000a326:	d800      	bhi.n	1000a32a <gpio_pin_set_config+0xa>
1000a328:	e0c8      	b.n	1000a4bc <gpio_pin_set_config+0x19c>
		(gpio_pin == PIN_LP_GPIO_1))
	{
		status = STATUS_ERR_INVALID_ARG;
	} else {
		if (gpio_pin <= 7) {
1000a32a:	2807      	cmp	r0, #7
1000a32c:	d809      	bhi.n	1000a342 <gpio_pin_set_config+0x22>
			LPMCU_MISC_REGS0->PINMUX_SEL_0.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000a32e:	4d64      	ldr	r5, [pc, #400]	; (1000a4c0 <gpio_pin_set_config+0x1a0>)
1000a330:	6c6a      	ldr	r2, [r5, #68]	; 0x44
1000a332:	3b10      	subs	r3, #16
1000a334:	4003      	ands	r3, r0
1000a336:	009b      	lsls	r3, r3, #2
1000a338:	2407      	movs	r4, #7
1000a33a:	409c      	lsls	r4, r3
1000a33c:	43a2      	bics	r2, r4
1000a33e:	646a      	str	r2, [r5, #68]	; 0x44
1000a340:	e029      	b.n	1000a396 <gpio_pin_set_config+0x76>
		} else if (gpio_pin <= 15) {
1000a342:	280f      	cmp	r0, #15
1000a344:	d809      	bhi.n	1000a35a <gpio_pin_set_config+0x3a>
			LPMCU_MISC_REGS0->PINMUX_SEL_1.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000a346:	4d5e      	ldr	r5, [pc, #376]	; (1000a4c0 <gpio_pin_set_config+0x1a0>)
1000a348:	6caa      	ldr	r2, [r5, #72]	; 0x48
1000a34a:	2307      	movs	r3, #7
1000a34c:	4003      	ands	r3, r0
1000a34e:	009b      	lsls	r3, r3, #2
1000a350:	2407      	movs	r4, #7
1000a352:	409c      	lsls	r4, r3
1000a354:	43a2      	bics	r2, r4
1000a356:	64aa      	str	r2, [r5, #72]	; 0x48
1000a358:	e01d      	b.n	1000a396 <gpio_pin_set_config+0x76>
		} else if (gpio_pin <= 23) {
1000a35a:	2817      	cmp	r0, #23
1000a35c:	d809      	bhi.n	1000a372 <gpio_pin_set_config+0x52>
			LPMCU_MISC_REGS0->PINMUX_SEL_2.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000a35e:	4d58      	ldr	r5, [pc, #352]	; (1000a4c0 <gpio_pin_set_config+0x1a0>)
1000a360:	6cea      	ldr	r2, [r5, #76]	; 0x4c
1000a362:	2307      	movs	r3, #7
1000a364:	4003      	ands	r3, r0
1000a366:	009b      	lsls	r3, r3, #2
1000a368:	2407      	movs	r4, #7
1000a36a:	409c      	lsls	r4, r3
1000a36c:	43a2      	bics	r2, r4
1000a36e:	64ea      	str	r2, [r5, #76]	; 0x4c
1000a370:	e011      	b.n	1000a396 <gpio_pin_set_config+0x76>
		} else if (44 <= gpio_pin  && gpio_pin < 48) {
1000a372:	0003      	movs	r3, r0
1000a374:	3b2c      	subs	r3, #44	; 0x2c
1000a376:	2b03      	cmp	r3, #3
1000a378:	d80d      	bhi.n	1000a396 <gpio_pin_set_config+0x76>
			/* Set GPIO_MSx as digital mode */
			AON_GP_REGS0->MS_GPIO_MODE.vec.ANALOG_ENABLE_ &= ~(1 << (gpio_pin - PIN_GPIO_MS4));
1000a37a:	4d52      	ldr	r5, [pc, #328]	; (1000a4c4 <gpio_pin_set_config+0x1a4>)
1000a37c:	2482      	movs	r4, #130	; 0x82
1000a37e:	00e4      	lsls	r4, r4, #3
1000a380:	5d2a      	ldrb	r2, [r5, r4]
1000a382:	0712      	lsls	r2, r2, #28
1000a384:	2601      	movs	r6, #1
1000a386:	409e      	lsls	r6, r3
1000a388:	0f12      	lsrs	r2, r2, #28
1000a38a:	5d2b      	ldrb	r3, [r5, r4]
1000a38c:	43b2      	bics	r2, r6
1000a38e:	260f      	movs	r6, #15
1000a390:	43b3      	bics	r3, r6
1000a392:	4313      	orrs	r3, r2
1000a394:	552b      	strb	r3, [r5, r4]
		}
	
		if ((gpio_pin == PIN_AO_GPIO_0) || (gpio_pin == PIN_AO_GPIO_1) ||
1000a396:	0003      	movs	r3, r0
1000a398:	3b1d      	subs	r3, #29
1000a39a:	2b02      	cmp	r3, #2
1000a39c:	d829      	bhi.n	1000a3f2 <gpio_pin_set_config+0xd2>
				(gpio_pin == PIN_AO_GPIO_2)) {
			/* Active Low, Always On Pull Enable Control */
			if (config->input_pull == GPIO_PIN_PULL_UP) {
1000a39e:	784b      	ldrb	r3, [r1, #1]
1000a3a0:	2b01      	cmp	r3, #1
1000a3a2:	d108      	bne.n	1000a3b6 <gpio_pin_set_config+0x96>
				AON_GP_REGS0->AON_PULL_ENABLE.reg &= ~(1 << (31 - gpio_pin));
1000a3a4:	4d47      	ldr	r5, [pc, #284]	; (1000a4c4 <gpio_pin_set_config+0x1a4>)
1000a3a6:	7d2b      	ldrb	r3, [r5, #20]
1000a3a8:	241f      	movs	r4, #31
1000a3aa:	1a24      	subs	r4, r4, r0
1000a3ac:	2201      	movs	r2, #1
1000a3ae:	40a2      	lsls	r2, r4
1000a3b0:	4393      	bics	r3, r2
1000a3b2:	752b      	strb	r3, [r5, #20]
1000a3b4:	e008      	b.n	1000a3c8 <gpio_pin_set_config+0xa8>
			} else {
				AON_GP_REGS0->AON_PULL_ENABLE.reg |= 1 << (31 - gpio_pin);
1000a3b6:	4c43      	ldr	r4, [pc, #268]	; (1000a4c4 <gpio_pin_set_config+0x1a4>)
1000a3b8:	7d25      	ldrb	r5, [r4, #20]
1000a3ba:	221f      	movs	r2, #31
1000a3bc:	1a12      	subs	r2, r2, r0
1000a3be:	2301      	movs	r3, #1
1000a3c0:	4093      	lsls	r3, r2
1000a3c2:	432b      	orrs	r3, r5
1000a3c4:	b2db      	uxtb	r3, r3
1000a3c6:	7523      	strb	r3, [r4, #20]
			}
			if (config->aon_wakeup) {
1000a3c8:	78ca      	ldrb	r2, [r1, #3]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000a3ca:	2300      	movs	r3, #0
			if (config->input_pull == GPIO_PIN_PULL_UP) {
				AON_GP_REGS0->AON_PULL_ENABLE.reg &= ~(1 << (31 - gpio_pin));
			} else {
				AON_GP_REGS0->AON_PULL_ENABLE.reg |= 1 << (31 - gpio_pin);
			}
			if (config->aon_wakeup) {
1000a3cc:	2a00      	cmp	r2, #0
1000a3ce:	d075      	beq.n	1000a4bc <gpio_pin_set_config+0x19c>
				/* Enable AON_GPIO_x to be a wakeup MCU from sleep mode */
				AON_GP_REGS0->AON_PINMUX_SEL.reg |= 1 << (4 * (31 - gpio_pin));
1000a3d0:	493c      	ldr	r1, [pc, #240]	; (1000a4c4 <gpio_pin_set_config+0x1a4>)
1000a3d2:	880c      	ldrh	r4, [r1, #0]
1000a3d4:	221f      	movs	r2, #31
1000a3d6:	1a10      	subs	r0, r2, r0
1000a3d8:	0080      	lsls	r0, r0, #2
1000a3da:	3301      	adds	r3, #1
1000a3dc:	4083      	lsls	r3, r0
1000a3de:	4323      	orrs	r3, r4
1000a3e0:	b29b      	uxth	r3, r3
1000a3e2:	800b      	strh	r3, [r1, #0]
				/* Enable AON_GPIO_x to wake up the BLE domain from sleep mode */
				AON_PWR_SEQ0->GPIO_WAKEUP_CTRL.bit.BLE_ENABLE = 1;
1000a3e4:	4a38      	ldr	r2, [pc, #224]	; (1000a4c8 <gpio_pin_set_config+0x1a8>)
1000a3e6:	7811      	ldrb	r1, [r2, #0]
1000a3e8:	2302      	movs	r3, #2
1000a3ea:	430b      	orrs	r3, r1
1000a3ec:	7013      	strb	r3, [r2, #0]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000a3ee:	2300      	movs	r3, #0
1000a3f0:	e064      	b.n	1000a4bc <gpio_pin_set_config+0x19c>
				AON_GP_REGS0->AON_PINMUX_SEL.reg |= 1 << (4 * (31 - gpio_pin));
				/* Enable AON_GPIO_x to wake up the BLE domain from sleep mode */
				AON_PWR_SEQ0->GPIO_WAKEUP_CTRL.bit.BLE_ENABLE = 1;
			}
		} else {
			if(config->direction == GPIO_PIN_DIR_INPUT) {
1000a3f2:	780a      	ldrb	r2, [r1, #0]
1000a3f4:	2a00      	cmp	r2, #0
1000a3f6:	d140      	bne.n	1000a47a <gpio_pin_set_config+0x15a>
				if(gpio_pin < 16) {
1000a3f8:	280f      	cmp	r0, #15
1000a3fa:	d808      	bhi.n	1000a40e <gpio_pin_set_config+0xee>
					GPIO0->OUTENCLR.reg = (1 << gpio_pin);
1000a3fc:	2301      	movs	r3, #1
1000a3fe:	4083      	lsls	r3, r0
1000a400:	b29b      	uxth	r3, r3
1000a402:	4a32      	ldr	r2, [pc, #200]	; (1000a4cc <gpio_pin_set_config+0x1ac>)
1000a404:	8293      	strh	r3, [r2, #20]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000a406:	2300      	movs	r3, #0
					GPIO1->OUTENCLR.reg = (1 << (gpio_pin % 16));
				} else {
					GPIO2->OUTENCLR.reg = (1 << (gpio_pin % 16));
				}
				/* pull_enable. */
				if (gpio_pin < 32) {
1000a408:	281f      	cmp	r0, #31
1000a40a:	d857      	bhi.n	1000a4bc <gpio_pin_set_config+0x19c>
1000a40c:	e012      	b.n	1000a434 <gpio_pin_set_config+0x114>
			}
		} else {
			if(config->direction == GPIO_PIN_DIR_INPUT) {
				if(gpio_pin < 16) {
					GPIO0->OUTENCLR.reg = (1 << gpio_pin);
				} else if (gpio_pin < 32){
1000a40e:	281f      	cmp	r0, #31
1000a410:	d807      	bhi.n	1000a422 <gpio_pin_set_config+0x102>
					GPIO1->OUTENCLR.reg = (1 << (gpio_pin % 16));
1000a412:	220f      	movs	r2, #15
1000a414:	4002      	ands	r2, r0
1000a416:	2301      	movs	r3, #1
1000a418:	4093      	lsls	r3, r2
1000a41a:	b29b      	uxth	r3, r3
1000a41c:	4a2c      	ldr	r2, [pc, #176]	; (1000a4d0 <gpio_pin_set_config+0x1b0>)
1000a41e:	8293      	strh	r3, [r2, #20]
1000a420:	e008      	b.n	1000a434 <gpio_pin_set_config+0x114>
				} else {
					GPIO2->OUTENCLR.reg = (1 << (gpio_pin % 16));
1000a422:	230f      	movs	r3, #15
1000a424:	4018      	ands	r0, r3
1000a426:	3b0e      	subs	r3, #14
1000a428:	4083      	lsls	r3, r0
1000a42a:	b29b      	uxth	r3, r3
1000a42c:	4a29      	ldr	r2, [pc, #164]	; (1000a4d4 <gpio_pin_set_config+0x1b4>)
1000a42e:	8293      	strh	r3, [r2, #20]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000a430:	2300      	movs	r3, #0
1000a432:	e043      	b.n	1000a4bc <gpio_pin_set_config+0x19c>
				} else {
					GPIO2->OUTENCLR.reg = (1 << (gpio_pin % 16));
				}
				/* pull_enable. */
				if (gpio_pin < 32) {
					switch(config->input_pull) {
1000a434:	784b      	ldrb	r3, [r1, #1]
1000a436:	2b01      	cmp	r3, #1
1000a438:	d00c      	beq.n	1000a454 <gpio_pin_set_config+0x134>
1000a43a:	2b00      	cmp	r3, #0
1000a43c:	d002      	beq.n	1000a444 <gpio_pin_set_config+0x124>
1000a43e:	2b02      	cmp	r3, #2
1000a440:	d010      	beq.n	1000a464 <gpio_pin_set_config+0x144>
1000a442:	e03a      	b.n	1000a4ba <gpio_pin_set_config+0x19a>
						case GPIO_PIN_PULL_NONE:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg |= (1 << gpio_pin);
1000a444:	491e      	ldr	r1, [pc, #120]	; (1000a4c0 <gpio_pin_set_config+0x1a0>)
1000a446:	6d0a      	ldr	r2, [r1, #80]	; 0x50
1000a448:	2301      	movs	r3, #1
1000a44a:	4083      	lsls	r3, r0
1000a44c:	4313      	orrs	r3, r2
1000a44e:	650b      	str	r3, [r1, #80]	; 0x50
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000a450:	2300      	movs	r3, #0
				/* pull_enable. */
				if (gpio_pin < 32) {
					switch(config->input_pull) {
						case GPIO_PIN_PULL_NONE:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg |= (1 << gpio_pin);
							break;
1000a452:	e033      	b.n	1000a4bc <gpio_pin_set_config+0x19c>
						case GPIO_PIN_PULL_UP:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
1000a454:	491a      	ldr	r1, [pc, #104]	; (1000a4c0 <gpio_pin_set_config+0x1a0>)
1000a456:	6d0b      	ldr	r3, [r1, #80]	; 0x50
1000a458:	2201      	movs	r2, #1
1000a45a:	4082      	lsls	r2, r0
1000a45c:	4393      	bics	r3, r2
1000a45e:	650b      	str	r3, [r1, #80]	; 0x50
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000a460:	2300      	movs	r3, #0
						case GPIO_PIN_PULL_NONE:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg |= (1 << gpio_pin);
							break;
						case GPIO_PIN_PULL_UP:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
							break;
1000a462:	e02b      	b.n	1000a4bc <gpio_pin_set_config+0x19c>
						case GPIO_PIN_PULL_DOWN:
							/* Set R-Type */
							LPMCU_MISC_REGS0->RTYPE_PAD_0.reg |= (1 << gpio_pin);
1000a464:	4b16      	ldr	r3, [pc, #88]	; (1000a4c0 <gpio_pin_set_config+0x1a0>)
1000a466:	6d59      	ldr	r1, [r3, #84]	; 0x54
1000a468:	2201      	movs	r2, #1
1000a46a:	4082      	lsls	r2, r0
1000a46c:	4311      	orrs	r1, r2
1000a46e:	6559      	str	r1, [r3, #84]	; 0x54
							/* Set REN */
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
1000a470:	6d19      	ldr	r1, [r3, #80]	; 0x50
1000a472:	4391      	bics	r1, r2
1000a474:	6519      	str	r1, [r3, #80]	; 0x50
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000a476:	2300      	movs	r3, #0
						case GPIO_PIN_PULL_DOWN:
							/* Set R-Type */
							LPMCU_MISC_REGS0->RTYPE_PAD_0.reg |= (1 << gpio_pin);
							/* Set REN */
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
							break;
1000a478:	e020      	b.n	1000a4bc <gpio_pin_set_config+0x19c>
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000a47a:	2300      	movs	r3, #0
						default:
							status = STATUS_ERR_INVALID_ARG;
							break;
					}
				}
			} else if(config->direction == GPIO_PIN_DIR_OUTPUT) {
1000a47c:	2a01      	cmp	r2, #1
1000a47e:	d11d      	bne.n	1000a4bc <gpio_pin_set_config+0x19c>
				if (gpio_pin < 16) {
1000a480:	280f      	cmp	r0, #15
1000a482:	d806      	bhi.n	1000a492 <gpio_pin_set_config+0x172>
					GPIO0->OUTENSET.reg = (1 << gpio_pin);
1000a484:	3301      	adds	r3, #1
1000a486:	4083      	lsls	r3, r0
1000a488:	b29b      	uxth	r3, r3
1000a48a:	4a10      	ldr	r2, [pc, #64]	; (1000a4cc <gpio_pin_set_config+0x1ac>)
1000a48c:	8213      	strh	r3, [r2, #16]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000a48e:	2300      	movs	r3, #0
1000a490:	e014      	b.n	1000a4bc <gpio_pin_set_config+0x19c>
					}
				}
			} else if(config->direction == GPIO_PIN_DIR_OUTPUT) {
				if (gpio_pin < 16) {
					GPIO0->OUTENSET.reg = (1 << gpio_pin);
				} else if (gpio_pin < 32) {
1000a492:	281f      	cmp	r0, #31
1000a494:	d808      	bhi.n	1000a4a8 <gpio_pin_set_config+0x188>
					GPIO1->OUTENSET.reg = (1 << (gpio_pin % 16));
1000a496:	230f      	movs	r3, #15
1000a498:	4018      	ands	r0, r3
1000a49a:	3b0e      	subs	r3, #14
1000a49c:	4083      	lsls	r3, r0
1000a49e:	b29b      	uxth	r3, r3
1000a4a0:	4a0b      	ldr	r2, [pc, #44]	; (1000a4d0 <gpio_pin_set_config+0x1b0>)
1000a4a2:	8213      	strh	r3, [r2, #16]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000a4a4:	2300      	movs	r3, #0
1000a4a6:	e009      	b.n	1000a4bc <gpio_pin_set_config+0x19c>
				if (gpio_pin < 16) {
					GPIO0->OUTENSET.reg = (1 << gpio_pin);
				} else if (gpio_pin < 32) {
					GPIO1->OUTENSET.reg = (1 << (gpio_pin % 16));
				} else {
					GPIO2->OUTENSET.reg = (1 << (gpio_pin % 16));
1000a4a8:	230f      	movs	r3, #15
1000a4aa:	4018      	ands	r0, r3
1000a4ac:	3b0e      	subs	r3, #14
1000a4ae:	4083      	lsls	r3, r0
1000a4b0:	b29b      	uxth	r3, r3
1000a4b2:	4a08      	ldr	r2, [pc, #32]	; (1000a4d4 <gpio_pin_set_config+0x1b4>)
1000a4b4:	8213      	strh	r3, [r2, #16]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000a4b6:	2300      	movs	r3, #0
1000a4b8:	e000      	b.n	1000a4bc <gpio_pin_set_config+0x19c>
							LPMCU_MISC_REGS0->RTYPE_PAD_0.reg |= (1 << gpio_pin);
							/* Set REN */
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
							break;
						default:
							status = STATUS_ERR_INVALID_ARG;
1000a4ba:	2317      	movs	r3, #23
				}
			}
		}
	}
	return status;
}
1000a4bc:	0018      	movs	r0, r3
1000a4be:	bd70      	pop	{r4, r5, r6, pc}
1000a4c0:	4000b000 	.word	0x4000b000
1000a4c4:	4000f000 	.word	0x4000f000
1000a4c8:	4000e000 	.word	0x4000e000
1000a4cc:	40010000 	.word	0x40010000
1000a4d0:	40011000 	.word	0x40011000
1000a4d4:	40013000 	.word	0x40013000

1000a4d8 <gpio_pin_set_output_level>:
 *
 *  \param[in] gpio_pin  Index of the GPIO pin to write to.
 *  \param[in] level     Logical level to set the given pin to.
 */
void gpio_pin_set_output_level(const uint8_t gpio_pin, const bool level)
{
1000a4d8:	b510      	push	{r4, lr}
	if (gpio_pin < 16) {
1000a4da:	280f      	cmp	r0, #15
1000a4dc:	d810      	bhi.n	1000a500 <gpio_pin_set_output_level+0x28>
		if(level) {
1000a4de:	2900      	cmp	r1, #0
1000a4e0:	d007      	beq.n	1000a4f2 <gpio_pin_set_output_level+0x1a>
			GPIO0->DATAOUT.reg |= (1 << gpio_pin);
1000a4e2:	4a1d      	ldr	r2, [pc, #116]	; (1000a558 <gpio_pin_set_output_level+0x80>)
1000a4e4:	8891      	ldrh	r1, [r2, #4]
1000a4e6:	2301      	movs	r3, #1
1000a4e8:	4083      	lsls	r3, r0
1000a4ea:	430b      	orrs	r3, r1
1000a4ec:	b29b      	uxth	r3, r3
1000a4ee:	8093      	strh	r3, [r2, #4]
1000a4f0:	e031      	b.n	1000a556 <gpio_pin_set_output_level+0x7e>
		} else {
			GPIO0->DATAOUT.reg &= ~(1 << gpio_pin);
1000a4f2:	4919      	ldr	r1, [pc, #100]	; (1000a558 <gpio_pin_set_output_level+0x80>)
1000a4f4:	888b      	ldrh	r3, [r1, #4]
1000a4f6:	2201      	movs	r2, #1
1000a4f8:	4082      	lsls	r2, r0
1000a4fa:	4393      	bics	r3, r2
1000a4fc:	808b      	strh	r3, [r1, #4]
1000a4fe:	e02a      	b.n	1000a556 <gpio_pin_set_output_level+0x7e>
		}
	} else if (gpio_pin < 32) {
1000a500:	281f      	cmp	r0, #31
1000a502:	d814      	bhi.n	1000a52e <gpio_pin_set_output_level+0x56>
		if(level) {
1000a504:	2900      	cmp	r1, #0
1000a506:	d009      	beq.n	1000a51c <gpio_pin_set_output_level+0x44>
			GPIO1->DATAOUT.reg |= (1 << (gpio_pin % 16));
1000a508:	4914      	ldr	r1, [pc, #80]	; (1000a55c <gpio_pin_set_output_level+0x84>)
1000a50a:	888c      	ldrh	r4, [r1, #4]
1000a50c:	220f      	movs	r2, #15
1000a50e:	4010      	ands	r0, r2
1000a510:	2301      	movs	r3, #1
1000a512:	4083      	lsls	r3, r0
1000a514:	4323      	orrs	r3, r4
1000a516:	b29b      	uxth	r3, r3
1000a518:	808b      	strh	r3, [r1, #4]
1000a51a:	e01c      	b.n	1000a556 <gpio_pin_set_output_level+0x7e>
		} else {
			GPIO1->DATAOUT.reg &= ~(1 << (gpio_pin % 16));
1000a51c:	490f      	ldr	r1, [pc, #60]	; (1000a55c <gpio_pin_set_output_level+0x84>)
1000a51e:	888b      	ldrh	r3, [r1, #4]
1000a520:	220f      	movs	r2, #15
1000a522:	4010      	ands	r0, r2
1000a524:	3a0e      	subs	r2, #14
1000a526:	4082      	lsls	r2, r0
1000a528:	4393      	bics	r3, r2
1000a52a:	808b      	strh	r3, [r1, #4]
1000a52c:	e013      	b.n	1000a556 <gpio_pin_set_output_level+0x7e>
		}
	} else {
		if(level) {
1000a52e:	2900      	cmp	r1, #0
1000a530:	d009      	beq.n	1000a546 <gpio_pin_set_output_level+0x6e>
			GPIO2->DATAOUT.reg |= (1 << (gpio_pin % 16));
1000a532:	490b      	ldr	r1, [pc, #44]	; (1000a560 <gpio_pin_set_output_level+0x88>)
1000a534:	888c      	ldrh	r4, [r1, #4]
1000a536:	220f      	movs	r2, #15
1000a538:	4010      	ands	r0, r2
1000a53a:	2301      	movs	r3, #1
1000a53c:	4083      	lsls	r3, r0
1000a53e:	4323      	orrs	r3, r4
1000a540:	b29b      	uxth	r3, r3
1000a542:	808b      	strh	r3, [r1, #4]
1000a544:	e007      	b.n	1000a556 <gpio_pin_set_output_level+0x7e>
		} else {
			GPIO2->DATAOUT.reg &= ~(1 << (gpio_pin % 16));
1000a546:	4906      	ldr	r1, [pc, #24]	; (1000a560 <gpio_pin_set_output_level+0x88>)
1000a548:	888b      	ldrh	r3, [r1, #4]
1000a54a:	220f      	movs	r2, #15
1000a54c:	4010      	ands	r0, r2
1000a54e:	3a0e      	subs	r2, #14
1000a550:	4082      	lsls	r2, r0
1000a552:	4393      	bics	r3, r2
1000a554:	808b      	strh	r3, [r1, #4]
		}
	}
}
1000a556:	bd10      	pop	{r4, pc}
1000a558:	40010000 	.word	0x40010000
1000a55c:	40011000 	.word	0x40011000
1000a560:	40013000 	.word	0x40013000

1000a564 <gpio_pinmux_cofiguration>:
 *
 *  \param[in] gpio_pin   Index of the GPIO pin to toggle.
 *  \param[in] pinmux_sel PINMUX selection.
 */
void gpio_pinmux_cofiguration(const uint8_t gpio_pin, uint16_t pinmux_sel)
{
1000a564:	b570      	push	{r4, r5, r6, lr}
	uint8_t megamux_sel = (pinmux_sel >> 8) & 0xFF;
1000a566:	0a0d      	lsrs	r5, r1, #8

	pinmux_sel &= 0xFF;
1000a568:	23ff      	movs	r3, #255	; 0xff
1000a56a:	4019      	ands	r1, r3

	if (gpio_pin <= 7) {
1000a56c:	2807      	cmp	r0, #7
1000a56e:	d833      	bhi.n	1000a5d8 <gpio_pinmux_cofiguration+0x74>
		LPMCU_MISC_REGS0->PINMUX_SEL_0.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000a570:	4a4e      	ldr	r2, [pc, #312]	; (1000a6ac <gpio_pinmux_cofiguration+0x148>)
1000a572:	6c54      	ldr	r4, [r2, #68]	; 0x44
1000a574:	3bf8      	subs	r3, #248	; 0xf8
1000a576:	4003      	ands	r3, r0
1000a578:	009b      	lsls	r3, r3, #2
1000a57a:	2607      	movs	r6, #7
1000a57c:	409e      	lsls	r6, r3
1000a57e:	43b4      	bics	r4, r6
1000a580:	6454      	str	r4, [r2, #68]	; 0x44
		LPMCU_MISC_REGS0->PINMUX_SEL_0.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
1000a582:	6c54      	ldr	r4, [r2, #68]	; 0x44
1000a584:	000e      	movs	r6, r1
1000a586:	409e      	lsls	r6, r3
1000a588:	0033      	movs	r3, r6
1000a58a:	4323      	orrs	r3, r4
1000a58c:	6453      	str	r3, [r2, #68]	; 0x44
		if (pinmux_sel == 0x01) {
1000a58e:	2901      	cmp	r1, #1
1000a590:	d000      	beq.n	1000a594 <gpio_pinmux_cofiguration+0x30>
1000a592:	e08a      	b.n	1000a6aa <gpio_pinmux_cofiguration+0x146>
			if (gpio_pin <= 3) {
1000a594:	2803      	cmp	r0, #3
1000a596:	d80f      	bhi.n	1000a5b8 <gpio_pinmux_cofiguration+0x54>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_0.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000a598:	0011      	movs	r1, r2
1000a59a:	22d0      	movs	r2, #208	; 0xd0
1000a59c:	0052      	lsls	r2, r2, #1
1000a59e:	588c      	ldr	r4, [r1, r2]
1000a5a0:	2303      	movs	r3, #3
1000a5a2:	4018      	ands	r0, r3
1000a5a4:	00c0      	lsls	r0, r0, #3
1000a5a6:	333c      	adds	r3, #60	; 0x3c
1000a5a8:	4083      	lsls	r3, r0
1000a5aa:	439c      	bics	r4, r3
1000a5ac:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_0.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000a5ae:	588b      	ldr	r3, [r1, r2]
1000a5b0:	4085      	lsls	r5, r0
1000a5b2:	431d      	orrs	r5, r3
1000a5b4:	508d      	str	r5, [r1, r2]
1000a5b6:	e078      	b.n	1000a6aa <gpio_pinmux_cofiguration+0x146>
			} else if (gpio_pin <= 7) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_1.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000a5b8:	493c      	ldr	r1, [pc, #240]	; (1000a6ac <gpio_pinmux_cofiguration+0x148>)
1000a5ba:	22d2      	movs	r2, #210	; 0xd2
1000a5bc:	0052      	lsls	r2, r2, #1
1000a5be:	588c      	ldr	r4, [r1, r2]
1000a5c0:	2303      	movs	r3, #3
1000a5c2:	4018      	ands	r0, r3
1000a5c4:	00c0      	lsls	r0, r0, #3
1000a5c6:	333c      	adds	r3, #60	; 0x3c
1000a5c8:	4083      	lsls	r3, r0
1000a5ca:	439c      	bics	r4, r3
1000a5cc:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_1.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000a5ce:	588b      	ldr	r3, [r1, r2]
1000a5d0:	4085      	lsls	r5, r0
1000a5d2:	431d      	orrs	r5, r3
1000a5d4:	508d      	str	r5, [r1, r2]
1000a5d6:	e068      	b.n	1000a6aa <gpio_pinmux_cofiguration+0x146>
			}
		}
	} else if (gpio_pin <= 15) {
1000a5d8:	280f      	cmp	r0, #15
1000a5da:	d832      	bhi.n	1000a642 <gpio_pinmux_cofiguration+0xde>
		LPMCU_MISC_REGS0->PINMUX_SEL_1.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000a5dc:	4a33      	ldr	r2, [pc, #204]	; (1000a6ac <gpio_pinmux_cofiguration+0x148>)
1000a5de:	6c94      	ldr	r4, [r2, #72]	; 0x48
1000a5e0:	2307      	movs	r3, #7
1000a5e2:	4003      	ands	r3, r0
1000a5e4:	009b      	lsls	r3, r3, #2
1000a5e6:	2607      	movs	r6, #7
1000a5e8:	409e      	lsls	r6, r3
1000a5ea:	43b4      	bics	r4, r6
1000a5ec:	6494      	str	r4, [r2, #72]	; 0x48
		LPMCU_MISC_REGS0->PINMUX_SEL_1.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
1000a5ee:	6c94      	ldr	r4, [r2, #72]	; 0x48
1000a5f0:	000e      	movs	r6, r1
1000a5f2:	409e      	lsls	r6, r3
1000a5f4:	0033      	movs	r3, r6
1000a5f6:	4323      	orrs	r3, r4
1000a5f8:	6493      	str	r3, [r2, #72]	; 0x48
		if (pinmux_sel == 0x01) {
1000a5fa:	2901      	cmp	r1, #1
1000a5fc:	d155      	bne.n	1000a6aa <gpio_pinmux_cofiguration+0x146>
			if (gpio_pin <= 11) {
1000a5fe:	280b      	cmp	r0, #11
1000a600:	d80f      	bhi.n	1000a622 <gpio_pinmux_cofiguration+0xbe>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_2.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000a602:	0011      	movs	r1, r2
1000a604:	22d4      	movs	r2, #212	; 0xd4
1000a606:	0052      	lsls	r2, r2, #1
1000a608:	588c      	ldr	r4, [r1, r2]
1000a60a:	2303      	movs	r3, #3
1000a60c:	4018      	ands	r0, r3
1000a60e:	00c0      	lsls	r0, r0, #3
1000a610:	333c      	adds	r3, #60	; 0x3c
1000a612:	4083      	lsls	r3, r0
1000a614:	439c      	bics	r4, r3
1000a616:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_2.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000a618:	588b      	ldr	r3, [r1, r2]
1000a61a:	4085      	lsls	r5, r0
1000a61c:	431d      	orrs	r5, r3
1000a61e:	508d      	str	r5, [r1, r2]
1000a620:	e043      	b.n	1000a6aa <gpio_pinmux_cofiguration+0x146>
			} else if (gpio_pin <= 15) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_3.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000a622:	4922      	ldr	r1, [pc, #136]	; (1000a6ac <gpio_pinmux_cofiguration+0x148>)
1000a624:	22d6      	movs	r2, #214	; 0xd6
1000a626:	0052      	lsls	r2, r2, #1
1000a628:	588c      	ldr	r4, [r1, r2]
1000a62a:	2303      	movs	r3, #3
1000a62c:	4018      	ands	r0, r3
1000a62e:	00c0      	lsls	r0, r0, #3
1000a630:	333c      	adds	r3, #60	; 0x3c
1000a632:	4083      	lsls	r3, r0
1000a634:	439c      	bics	r4, r3
1000a636:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_3.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000a638:	588b      	ldr	r3, [r1, r2]
1000a63a:	4085      	lsls	r5, r0
1000a63c:	431d      	orrs	r5, r3
1000a63e:	508d      	str	r5, [r1, r2]
1000a640:	e033      	b.n	1000a6aa <gpio_pinmux_cofiguration+0x146>
			}
		}
	} else if (gpio_pin <= 23) {
1000a642:	2817      	cmp	r0, #23
1000a644:	d831      	bhi.n	1000a6aa <gpio_pinmux_cofiguration+0x146>
		LPMCU_MISC_REGS0->PINMUX_SEL_2.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000a646:	4a19      	ldr	r2, [pc, #100]	; (1000a6ac <gpio_pinmux_cofiguration+0x148>)
1000a648:	6cd4      	ldr	r4, [r2, #76]	; 0x4c
1000a64a:	2307      	movs	r3, #7
1000a64c:	4003      	ands	r3, r0
1000a64e:	009b      	lsls	r3, r3, #2
1000a650:	2607      	movs	r6, #7
1000a652:	409e      	lsls	r6, r3
1000a654:	43b4      	bics	r4, r6
1000a656:	64d4      	str	r4, [r2, #76]	; 0x4c
		LPMCU_MISC_REGS0->PINMUX_SEL_2.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
1000a658:	6cd4      	ldr	r4, [r2, #76]	; 0x4c
1000a65a:	000e      	movs	r6, r1
1000a65c:	409e      	lsls	r6, r3
1000a65e:	0033      	movs	r3, r6
1000a660:	4323      	orrs	r3, r4
1000a662:	64d3      	str	r3, [r2, #76]	; 0x4c
		if (pinmux_sel == 0x01) {
1000a664:	2901      	cmp	r1, #1
1000a666:	d120      	bne.n	1000a6aa <gpio_pinmux_cofiguration+0x146>
			if (gpio_pin <= 19) {
1000a668:	2813      	cmp	r0, #19
1000a66a:	d80f      	bhi.n	1000a68c <gpio_pinmux_cofiguration+0x128>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_4.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000a66c:	0011      	movs	r1, r2
1000a66e:	22d8      	movs	r2, #216	; 0xd8
1000a670:	0052      	lsls	r2, r2, #1
1000a672:	588c      	ldr	r4, [r1, r2]
1000a674:	2303      	movs	r3, #3
1000a676:	4018      	ands	r0, r3
1000a678:	00c0      	lsls	r0, r0, #3
1000a67a:	333c      	adds	r3, #60	; 0x3c
1000a67c:	4083      	lsls	r3, r0
1000a67e:	439c      	bics	r4, r3
1000a680:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_4.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000a682:	588b      	ldr	r3, [r1, r2]
1000a684:	4085      	lsls	r5, r0
1000a686:	431d      	orrs	r5, r3
1000a688:	508d      	str	r5, [r1, r2]
1000a68a:	e00e      	b.n	1000a6aa <gpio_pinmux_cofiguration+0x146>
			} else if (gpio_pin <= 23) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_5.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000a68c:	4a07      	ldr	r2, [pc, #28]	; (1000a6ac <gpio_pinmux_cofiguration+0x148>)
1000a68e:	23da      	movs	r3, #218	; 0xda
1000a690:	005b      	lsls	r3, r3, #1
1000a692:	58d1      	ldr	r1, [r2, r3]
1000a694:	2403      	movs	r4, #3
1000a696:	4020      	ands	r0, r4
1000a698:	00c0      	lsls	r0, r0, #3
1000a69a:	343c      	adds	r4, #60	; 0x3c
1000a69c:	4084      	lsls	r4, r0
1000a69e:	43a1      	bics	r1, r4
1000a6a0:	50d1      	str	r1, [r2, r3]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_5.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000a6a2:	58d1      	ldr	r1, [r2, r3]
1000a6a4:	4085      	lsls	r5, r0
1000a6a6:	430d      	orrs	r5, r1
1000a6a8:	50d5      	str	r5, [r2, r3]
			}
		}
	}
}
1000a6aa:	bd70      	pop	{r4, r5, r6, pc}
1000a6ac:	4000b000 	.word	0x4000b000

1000a6b0 <gpio_register_callback>:
 * \param[in]  callback_type  Callback type given by an enum
 *
 */
void gpio_register_callback(uint8_t gpio_pin, gpio_callback_t callback_func,
				enum gpio_callback callback_type)
{
1000a6b0:	b5f0      	push	{r4, r5, r6, r7, lr}
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
		gpio_port = 0;
1000a6b2:	2300      	movs	r3, #0
	Assert(callback_func);
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
1000a6b4:	280f      	cmp	r0, #15
1000a6b6:	d904      	bls.n	1000a6c2 <gpio_register_callback+0x12>
		gpio_port = 0;
	} else if (gpio_pin < 32) {
		gpio_port = 1;
	} else {
		gpio_port = 2;
1000a6b8:	241f      	movs	r4, #31
1000a6ba:	4284      	cmp	r4, r0
1000a6bc:	415b      	adcs	r3, r3
1000a6be:	3c1d      	subs	r4, #29
1000a6c0:	1ae3      	subs	r3, r4, r3
	}
	switch (callback_type) {
1000a6c2:	2a01      	cmp	r2, #1
1000a6c4:	d016      	beq.n	1000a6f4 <gpio_register_callback+0x44>
1000a6c6:	2a00      	cmp	r2, #0
1000a6c8:	d004      	beq.n	1000a6d4 <gpio_register_callback+0x24>
1000a6ca:	2a02      	cmp	r2, #2
1000a6cc:	d022      	beq.n	1000a714 <gpio_register_callback+0x64>
1000a6ce:	2a03      	cmp	r2, #3
1000a6d0:	d030      	beq.n	1000a734 <gpio_register_callback+0x84>
1000a6d2:	e03e      	b.n	1000a752 <gpio_register_callback+0xa2>
	case GPIO_CALLBACK_LOW:
		_gpio_instances[gpio_port].hw->INTTYPECLR.reg = 1 << (gpio_pin % 16);
1000a6d4:	4e29      	ldr	r6, [pc, #164]	; (1000a77c <gpio_register_callback+0xcc>)
1000a6d6:	00dc      	lsls	r4, r3, #3
1000a6d8:	18e2      	adds	r2, r4, r3
1000a6da:	00d2      	lsls	r2, r2, #3
1000a6dc:	5997      	ldr	r7, [r2, r6]
1000a6de:	250f      	movs	r5, #15
1000a6e0:	4005      	ands	r5, r0
1000a6e2:	2201      	movs	r2, #1
1000a6e4:	40aa      	lsls	r2, r5
1000a6e6:	b292      	uxth	r2, r2
1000a6e8:	85ba      	strh	r2, [r7, #44]	; 0x2c
		_gpio_instances[gpio_port].hw->INTPOLCLR.reg = 1 << (gpio_pin % 16);
1000a6ea:	18e4      	adds	r4, r4, r3
1000a6ec:	00e4      	lsls	r4, r4, #3
1000a6ee:	59a4      	ldr	r4, [r4, r6]
1000a6f0:	86a2      	strh	r2, [r4, #52]	; 0x34
		break;
1000a6f2:	e02e      	b.n	1000a752 <gpio_register_callback+0xa2>

	case GPIO_CALLBACK_HIGH:
		_gpio_instances[gpio_port].hw->INTTYPECLR.reg = 1 << (gpio_pin % 16);
1000a6f4:	4e21      	ldr	r6, [pc, #132]	; (1000a77c <gpio_register_callback+0xcc>)
1000a6f6:	00dc      	lsls	r4, r3, #3
1000a6f8:	18e2      	adds	r2, r4, r3
1000a6fa:	00d2      	lsls	r2, r2, #3
1000a6fc:	5997      	ldr	r7, [r2, r6]
1000a6fe:	250f      	movs	r5, #15
1000a700:	4005      	ands	r5, r0
1000a702:	2201      	movs	r2, #1
1000a704:	40aa      	lsls	r2, r5
1000a706:	b292      	uxth	r2, r2
1000a708:	85ba      	strh	r2, [r7, #44]	; 0x2c
		_gpio_instances[gpio_port].hw->INTPOLSET.reg = 1 << (gpio_pin % 16);
1000a70a:	18e4      	adds	r4, r4, r3
1000a70c:	00e4      	lsls	r4, r4, #3
1000a70e:	59a4      	ldr	r4, [r4, r6]
1000a710:	8622      	strh	r2, [r4, #48]	; 0x30
		break;
1000a712:	e01e      	b.n	1000a752 <gpio_register_callback+0xa2>

	case GPIO_CALLBACK_RISING:
		_gpio_instances[gpio_port].hw->INTTYPESET.reg = 1 << (gpio_pin % 16);
1000a714:	4e19      	ldr	r6, [pc, #100]	; (1000a77c <gpio_register_callback+0xcc>)
1000a716:	00dc      	lsls	r4, r3, #3
1000a718:	18e2      	adds	r2, r4, r3
1000a71a:	00d2      	lsls	r2, r2, #3
1000a71c:	5997      	ldr	r7, [r2, r6]
1000a71e:	250f      	movs	r5, #15
1000a720:	4005      	ands	r5, r0
1000a722:	2201      	movs	r2, #1
1000a724:	40aa      	lsls	r2, r5
1000a726:	b292      	uxth	r2, r2
1000a728:	853a      	strh	r2, [r7, #40]	; 0x28
		_gpio_instances[gpio_port].hw->INTPOLSET.reg = 1 << (gpio_pin % 16);
1000a72a:	18e4      	adds	r4, r4, r3
1000a72c:	00e4      	lsls	r4, r4, #3
1000a72e:	59a4      	ldr	r4, [r4, r6]
1000a730:	8622      	strh	r2, [r4, #48]	; 0x30
		break;
1000a732:	e00e      	b.n	1000a752 <gpio_register_callback+0xa2>

	case GPIO_CALLBACK_FALLING:
		_gpio_instances[gpio_port].hw->INTTYPESET.reg = 1 << (gpio_pin % 16);
1000a734:	4e11      	ldr	r6, [pc, #68]	; (1000a77c <gpio_register_callback+0xcc>)
1000a736:	00dc      	lsls	r4, r3, #3
1000a738:	18e2      	adds	r2, r4, r3
1000a73a:	00d2      	lsls	r2, r2, #3
1000a73c:	5997      	ldr	r7, [r2, r6]
1000a73e:	250f      	movs	r5, #15
1000a740:	4005      	ands	r5, r0
1000a742:	2201      	movs	r2, #1
1000a744:	40aa      	lsls	r2, r5
1000a746:	b292      	uxth	r2, r2
1000a748:	853a      	strh	r2, [r7, #40]	; 0x28
		_gpio_instances[gpio_port].hw->INTPOLCLR.reg = (1 << (gpio_pin % 16));
1000a74a:	18e4      	adds	r4, r4, r3
1000a74c:	00e4      	lsls	r4, r4, #3
1000a74e:	59a4      	ldr	r4, [r4, r6]
1000a750:	86a2      	strh	r2, [r4, #52]	; 0x34

	case GPIO_CALLBACK_N:
		break;
	}
	/* Register callback function */
	_gpio_instances[gpio_port].callback[gpio_pin % 16] = callback_func;
1000a752:	220f      	movs	r2, #15
1000a754:	4010      	ands	r0, r2
1000a756:	4c09      	ldr	r4, [pc, #36]	; (1000a77c <gpio_register_callback+0xcc>)
1000a758:	00dd      	lsls	r5, r3, #3
1000a75a:	18ea      	adds	r2, r5, r3
1000a75c:	0052      	lsls	r2, r2, #1
1000a75e:	1812      	adds	r2, r2, r0
1000a760:	0092      	lsls	r2, r2, #2
1000a762:	18a2      	adds	r2, r4, r2
1000a764:	6051      	str	r1, [r2, #4]
	/* Set the bit corresponding to the gpio pin */
	_gpio_instances[gpio_port].callback_reg_mask |= (1 << (gpio_pin % 16));
1000a766:	18ea      	adds	r2, r5, r3
1000a768:	00d2      	lsls	r2, r2, #3
1000a76a:	18a2      	adds	r2, r4, r2
1000a76c:	3244      	adds	r2, #68	; 0x44
1000a76e:	2101      	movs	r1, #1
1000a770:	4081      	lsls	r1, r0
1000a772:	8813      	ldrh	r3, [r2, #0]
1000a774:	430b      	orrs	r3, r1
1000a776:	8013      	strh	r3, [r2, #0]
}
1000a778:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a77a:	46c0      	nop			; (mov r8, r8)
1000a77c:	10019c48 	.word	0x10019c48

1000a780 <gpio_enable_callback>:
 * conditions for the callback type are met.
 *
 * \param[in]  gpio_pin   GPIO pin
 */
void gpio_enable_callback(uint8_t gpio_pin)
{
1000a780:	b530      	push	{r4, r5, lr}
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
1000a782:	280f      	cmp	r0, #15
1000a784:	d805      	bhi.n	1000a792 <gpio_enable_callback+0x12>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000a786:	2280      	movs	r2, #128	; 0x80
1000a788:	0412      	lsls	r2, r2, #16
1000a78a:	4b12      	ldr	r3, [pc, #72]	; (1000a7d4 <gpio_enable_callback+0x54>)
1000a78c:	601a      	str	r2, [r3, #0]
		gpio_port = 0;
1000a78e:	2200      	movs	r2, #0
1000a790:	e00c      	b.n	1000a7ac <gpio_enable_callback+0x2c>
		NVIC_EnableIRQ(GPIO0_IRQn);
	} else if (gpio_pin < 32) {
1000a792:	281f      	cmp	r0, #31
1000a794:	d805      	bhi.n	1000a7a2 <gpio_enable_callback+0x22>
1000a796:	2280      	movs	r2, #128	; 0x80
1000a798:	0452      	lsls	r2, r2, #17
1000a79a:	4b0e      	ldr	r3, [pc, #56]	; (1000a7d4 <gpio_enable_callback+0x54>)
1000a79c:	601a      	str	r2, [r3, #0]
		gpio_port = 1;
1000a79e:	2201      	movs	r2, #1
1000a7a0:	e004      	b.n	1000a7ac <gpio_enable_callback+0x2c>
1000a7a2:	2280      	movs	r2, #128	; 0x80
1000a7a4:	0492      	lsls	r2, r2, #18
1000a7a6:	4b0b      	ldr	r3, [pc, #44]	; (1000a7d4 <gpio_enable_callback+0x54>)
1000a7a8:	601a      	str	r2, [r3, #0]
		NVIC_EnableIRQ(GPIO1_IRQn);
	} else {
		gpio_port = 2;
1000a7aa:	2202      	movs	r2, #2
		NVIC_EnableIRQ(GPIO2_IRQn);
	}

	/* Enable callback */
	_gpio_instances[gpio_port].callback_enable_mask |= (1 << (gpio_pin % 16));
1000a7ac:	230f      	movs	r3, #15
1000a7ae:	4018      	ands	r0, r3
1000a7b0:	2101      	movs	r1, #1
1000a7b2:	4081      	lsls	r1, r0
1000a7b4:	4c08      	ldr	r4, [pc, #32]	; (1000a7d8 <gpio_enable_callback+0x58>)
1000a7b6:	00d5      	lsls	r5, r2, #3
1000a7b8:	18ab      	adds	r3, r5, r2
1000a7ba:	00db      	lsls	r3, r3, #3
1000a7bc:	18e3      	adds	r3, r4, r3
1000a7be:	3346      	adds	r3, #70	; 0x46
1000a7c0:	8818      	ldrh	r0, [r3, #0]
1000a7c2:	4308      	orrs	r0, r1
1000a7c4:	8018      	strh	r0, [r3, #0]
	_gpio_instances[gpio_port].hw->INTENSET.reg = (1 << (gpio_pin % 16));
1000a7c6:	18aa      	adds	r2, r5, r2
1000a7c8:	00d2      	lsls	r2, r2, #3
1000a7ca:	5913      	ldr	r3, [r2, r4]
1000a7cc:	b289      	uxth	r1, r1
1000a7ce:	8419      	strh	r1, [r3, #32]
}
1000a7d0:	bd30      	pop	{r4, r5, pc}
1000a7d2:	46c0      	nop			; (mov r8, r8)
1000a7d4:	e000e100 	.word	0xe000e100
1000a7d8:	10019c48 	.word	0x10019c48

1000a7dc <gpio_disable_callback>:
 * The callback function will not be called from the interrupt handler.
 *
 * \param[in]  gpio_pin   GPIO pin
 */
void gpio_disable_callback(uint8_t gpio_pin)
{
1000a7dc:	b530      	push	{r4, r5, lr}
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
		gpio_port = 0;
1000a7de:	2300      	movs	r3, #0
{
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
1000a7e0:	280f      	cmp	r0, #15
1000a7e2:	d904      	bls.n	1000a7ee <gpio_disable_callback+0x12>
		gpio_port = 0;
	} else if (gpio_pin < 32) {
		gpio_port = 1;
	} else {
		gpio_port = 2;
1000a7e4:	221f      	movs	r2, #31
1000a7e6:	4282      	cmp	r2, r0
1000a7e8:	415b      	adcs	r3, r3
1000a7ea:	3a1d      	subs	r2, #29
1000a7ec:	1ad3      	subs	r3, r2, r3
	}

	/* Enable callback */
	_gpio_instances[gpio_port].callback_enable_mask &= ~(1 << (gpio_pin % 16));
1000a7ee:	220f      	movs	r2, #15
1000a7f0:	4010      	ands	r0, r2
1000a7f2:	2101      	movs	r1, #1
1000a7f4:	4081      	lsls	r1, r0
1000a7f6:	4c07      	ldr	r4, [pc, #28]	; (1000a814 <gpio_disable_callback+0x38>)
1000a7f8:	00dd      	lsls	r5, r3, #3
1000a7fa:	18ea      	adds	r2, r5, r3
1000a7fc:	00d2      	lsls	r2, r2, #3
1000a7fe:	18a2      	adds	r2, r4, r2
1000a800:	3246      	adds	r2, #70	; 0x46
1000a802:	8810      	ldrh	r0, [r2, #0]
1000a804:	4388      	bics	r0, r1
1000a806:	8010      	strh	r0, [r2, #0]
	_gpio_instances[gpio_port].hw->INTENCLR.reg = (1 << (gpio_pin % 16));
1000a808:	18eb      	adds	r3, r5, r3
1000a80a:	00db      	lsls	r3, r3, #3
1000a80c:	591b      	ldr	r3, [r3, r4]
1000a80e:	b289      	uxth	r1, r1
1000a810:	8499      	strh	r1, [r3, #36]	; 0x24
}
1000a812:	bd30      	pop	{r4, r5, pc}
1000a814:	10019c48 	.word	0x10019c48

1000a818 <gpio_init>:
 *
 * This function will init GPIO callback.
 *
 */
void gpio_init(void)
{
1000a818:	b510      	push	{r4, lr}
1000a81a:	4a11      	ldr	r2, [pc, #68]	; (1000a860 <gpio_init+0x48>)
1000a81c:	0010      	movs	r0, r2
1000a81e:	30d8      	adds	r0, #216	; 0xd8
	uint8_t i, j;

	for(i = 0; i < 3; i++) {
		for(j = 0; j < 16; j++) {
			_gpio_instances[i].callback[j] = NULL;
1000a820:	2100      	movs	r1, #0
1000a822:	e007      	b.n	1000a834 <gpio_init+0x1c>
1000a824:	c302      	stmia	r3!, {r1}
void gpio_init(void)
{
	uint8_t i, j;

	for(i = 0; i < 3; i++) {
		for(j = 0; j < 16; j++) {
1000a826:	4293      	cmp	r3, r2
1000a828:	d1fc      	bne.n	1000a824 <gpio_init+0xc>
			_gpio_instances[i].callback[j] = NULL;
		}
		_gpio_instances[i].callback_enable_mask = 0;
1000a82a:	8051      	strh	r1, [r2, #2]
		_gpio_instances[i].callback_reg_mask = 0;
1000a82c:	8011      	strh	r1, [r2, #0]
1000a82e:	3248      	adds	r2, #72	; 0x48
 */
void gpio_init(void)
{
	uint8_t i, j;

	for(i = 0; i < 3; i++) {
1000a830:	4282      	cmp	r2, r0
1000a832:	d002      	beq.n	1000a83a <gpio_init+0x22>
1000a834:	0013      	movs	r3, r2
1000a836:	3b40      	subs	r3, #64	; 0x40
1000a838:	e7f4      	b.n	1000a824 <gpio_init+0xc>
			_gpio_instances[i].callback[j] = NULL;
		}
		_gpio_instances[i].callback_enable_mask = 0;
		_gpio_instances[i].callback_reg_mask = 0;
	}
	_gpio_instances[0].hw = (void *)GPIO0;
1000a83a:	4b0a      	ldr	r3, [pc, #40]	; (1000a864 <gpio_init+0x4c>)
1000a83c:	4a0a      	ldr	r2, [pc, #40]	; (1000a868 <gpio_init+0x50>)
1000a83e:	601a      	str	r2, [r3, #0]
	_gpio_instances[1].hw = (void *)GPIO1;
1000a840:	4a0a      	ldr	r2, [pc, #40]	; (1000a86c <gpio_init+0x54>)
1000a842:	649a      	str	r2, [r3, #72]	; 0x48
	_gpio_instances[2].hw = (void *)GPIO2;
1000a844:	490a      	ldr	r1, [pc, #40]	; (1000a870 <gpio_init+0x58>)
1000a846:	2290      	movs	r2, #144	; 0x90
1000a848:	5099      	str	r1, [r3, r2]
	system_register_isr(RAM_ISR_TABLE_PORT0_COMB_INDEX, (uint32_t)gpio_port0_isr_handler);
1000a84a:	490a      	ldr	r1, [pc, #40]	; (1000a874 <gpio_init+0x5c>)
1000a84c:	2027      	movs	r0, #39	; 0x27
1000a84e:	4c0a      	ldr	r4, [pc, #40]	; (1000a878 <gpio_init+0x60>)
1000a850:	47a0      	blx	r4
	system_register_isr(RAM_ISR_TABLE_PORT1_COMB_INDEX, (uint32_t)gpio_port1_isr_handler);
1000a852:	490a      	ldr	r1, [pc, #40]	; (1000a87c <gpio_init+0x64>)
1000a854:	2028      	movs	r0, #40	; 0x28
1000a856:	47a0      	blx	r4
	system_register_isr(RAM_ISR_TABLE_PORT2_COMB_INDEX, (uint32_t)gpio_port2_isr_handler);
1000a858:	4909      	ldr	r1, [pc, #36]	; (1000a880 <gpio_init+0x68>)
1000a85a:	2029      	movs	r0, #41	; 0x29
1000a85c:	47a0      	blx	r4
}
1000a85e:	bd10      	pop	{r4, pc}
1000a860:	10019c8c 	.word	0x10019c8c
1000a864:	10019c48 	.word	0x10019c48
1000a868:	40010000 	.word	0x40010000
1000a86c:	40011000 	.word	0x40011000
1000a870:	40013000 	.word	0x40013000
1000a874:	1000a1c1 	.word	0x1000a1c1
1000a878:	1000b445 	.word	0x1000b445
1000a87c:	1000a225 	.word	0x1000a225
1000a880:	1000a295 	.word	0x1000a295

1000a884 <system_clock_config>:
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_clock_config(enum system_clock_resource resoure, \
				enum system_clock_freq freq)
{
	switch (resoure) {
1000a884:	2801      	cmp	r0, #1
1000a886:	d00d      	beq.n	1000a8a4 <system_clock_config+0x20>
1000a888:	2800      	cmp	r0, #0
1000a88a:	d002      	beq.n	1000a892 <system_clock_config+0xe>
1000a88c:	2802      	cmp	r0, #2
1000a88e:	d01c      	beq.n	1000a8ca <system_clock_config+0x46>
1000a890:	e02e      	b.n	1000a8f0 <system_clock_config+0x6c>
		case CLOCK_RESOURCE_XO_26_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
1000a892:	4a18      	ldr	r2, [pc, #96]	; (1000a8f4 <system_clock_config+0x70>)
1000a894:	6990      	ldr	r0, [r2, #24]
1000a896:	230c      	movs	r3, #12
1000a898:	4303      	orrs	r3, r0
1000a89a:	6193      	str	r3, [r2, #24]
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_BT26M_CLK | \
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK;
			system_clock_value = 26000000;
1000a89c:	4a16      	ldr	r2, [pc, #88]	; (1000a8f8 <system_clock_config+0x74>)
1000a89e:	4b17      	ldr	r3, [pc, #92]	; (1000a8fc <system_clock_config+0x78>)
1000a8a0:	601a      	str	r2, [r3, #0]
			break;
1000a8a2:	e01a      	b.n	1000a8da <system_clock_config+0x56>

		case CLOCK_RESOURCE_LP_2_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
1000a8a4:	4b13      	ldr	r3, [pc, #76]	; (1000a8f4 <system_clock_config+0x70>)
1000a8a6:	6998      	ldr	r0, [r3, #24]
1000a8a8:	2208      	movs	r2, #8
1000a8aa:	4302      	orrs	r2, r0
1000a8ac:	619a      	str	r2, [r3, #24]
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK;
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg &= \
1000a8ae:	699a      	ldr	r2, [r3, #24]
1000a8b0:	2004      	movs	r0, #4
1000a8b2:	4382      	bics	r2, r0
1000a8b4:	619a      	str	r2, [r3, #24]
					~LPMCU_MISC_REGS_LPMCU_CTRL_USE_BT26M_CLK;
			AON_GP_REGS0->AON_PMU_CTRL.reg |= \
1000a8b6:	4a12      	ldr	r2, [pc, #72]	; (1000a900 <system_clock_config+0x7c>)
1000a8b8:	6853      	ldr	r3, [r2, #4]
1000a8ba:	2080      	movs	r0, #128	; 0x80
1000a8bc:	0300      	lsls	r0, r0, #12
1000a8be:	4303      	orrs	r3, r0
1000a8c0:	6053      	str	r3, [r2, #4]
					AON_GP_REGS_AON_PMU_CTRL_PMU_2MHZ_CLK_EN;
			system_clock_value = 2000000;
1000a8c2:	4a10      	ldr	r2, [pc, #64]	; (1000a904 <system_clock_config+0x80>)
1000a8c4:	4b0d      	ldr	r3, [pc, #52]	; (1000a8fc <system_clock_config+0x78>)
1000a8c6:	601a      	str	r2, [r3, #0]
			break;
1000a8c8:	e007      	b.n	1000a8da <system_clock_config+0x56>

		case CLOCK_RESOURCE_RC_26_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg &= \
1000a8ca:	4a0a      	ldr	r2, [pc, #40]	; (1000a8f4 <system_clock_config+0x70>)
1000a8cc:	6993      	ldr	r3, [r2, #24]
1000a8ce:	200c      	movs	r0, #12
1000a8d0:	4383      	bics	r3, r0
1000a8d2:	6193      	str	r3, [r2, #24]
					~(LPMCU_MISC_REGS_LPMCU_CTRL_USE_BT26M_CLK | \
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK);
			system_clock_value = 26000000;
1000a8d4:	4a08      	ldr	r2, [pc, #32]	; (1000a8f8 <system_clock_config+0x74>)
1000a8d6:	4b09      	ldr	r3, [pc, #36]	; (1000a8fc <system_clock_config+0x78>)
1000a8d8:	601a      	str	r2, [r3, #0]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	LPMCU_MISC_REGS0->LPMCU_CTRL.reg &= \
1000a8da:	4b06      	ldr	r3, [pc, #24]	; (1000a8f4 <system_clock_config+0x70>)
1000a8dc:	699a      	ldr	r2, [r3, #24]
1000a8de:	2003      	movs	r0, #3
1000a8e0:	4382      	bics	r2, r0
1000a8e2:	619a      	str	r2, [r3, #24]
		~LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL_Msk;
	LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
1000a8e4:	699a      	ldr	r2, [r3, #24]
1000a8e6:	4001      	ands	r1, r0
1000a8e8:	4311      	orrs	r1, r2
1000a8ea:	6199      	str	r1, [r3, #24]
		LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL(freq);

	return STATUS_OK;
1000a8ec:	2000      	movs	r0, #0
1000a8ee:	e000      	b.n	1000a8f2 <system_clock_config+0x6e>
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK);
			system_clock_value = 26000000;
			break;

		default:
			return STATUS_ERR_INVALID_ARG;
1000a8f0:	2017      	movs	r0, #23
		~LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL_Msk;
	LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
		LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL(freq);

	return STATUS_OK;
}
1000a8f2:	4770      	bx	lr
1000a8f4:	4000b000 	.word	0x4000b000
1000a8f8:	018cba80 	.word	0x018cba80
1000a8fc:	10019d20 	.word	0x10019d20
1000a900:	4000f000 	.word	0x4000f000
1000a904:	001e8480 	.word	0x001e8480

1000a908 <system_clock_get_value>:
 *
 * \return system clock value.
 */
uint32_t system_clock_get_value(void)
{
	return system_clock_value;
1000a908:	4b01      	ldr	r3, [pc, #4]	; (1000a910 <system_clock_get_value+0x8>)
1000a90a:	6818      	ldr	r0, [r3, #0]
}
1000a90c:	4770      	bx	lr
1000a90e:	46c0      	nop			; (mov r8, r8)
1000a910:	10019d20 	.word	0x10019d20

1000a914 <system_clock_peripheral_enable>:
 * \return Status of operation.
 * \retval STATUS_OK               Clock config correctly
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_clock_peripheral_enable(enum system_peripheral peripheral)
{
1000a914:	b500      	push	{lr}
	switch (peripheral) {
1000a916:	2835      	cmp	r0, #53	; 0x35
1000a918:	d900      	bls.n	1000a91c <system_clock_peripheral_enable+0x8>
1000a91a:	e1a2      	b.n	1000ac62 <system_clock_peripheral_enable+0x34e>
1000a91c:	0080      	lsls	r0, r0, #2
1000a91e:	4bd2      	ldr	r3, [pc, #840]	; (1000ac68 <system_clock_peripheral_enable+0x354>)
1000a920:	581b      	ldr	r3, [r3, r0]
1000a922:	469f      	mov	pc, r3
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000a924:	4ad1      	ldr	r2, [pc, #836]	; (1000ac6c <system_clock_peripheral_enable+0x358>)
1000a926:	68d1      	ldr	r1, [r2, #12]
1000a928:	2302      	movs	r3, #2
1000a92a:	430b      	orrs	r3, r1
1000a92c:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000a92e:	2000      	movs	r0, #0
{
	switch (peripheral) {
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI_FLASH0_CLK_EN;
		break;
1000a930:	e198      	b.n	1000ac64 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000a932:	4ace      	ldr	r2, [pc, #824]	; (1000ac6c <system_clock_peripheral_enable+0x358>)
1000a934:	68d1      	ldr	r1, [r2, #12]
1000a936:	2304      	movs	r3, #4
1000a938:	430b      	orrs	r3, r1
1000a93a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000a93c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI0_CORE_CLK_EN;
		break;
1000a93e:	e191      	b.n	1000ac64 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000a940:	4aca      	ldr	r2, [pc, #808]	; (1000ac6c <system_clock_peripheral_enable+0x358>)
1000a942:	68d1      	ldr	r1, [r2, #12]
1000a944:	2308      	movs	r3, #8
1000a946:	430b      	orrs	r3, r1
1000a948:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000a94a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI1_CORE_CLK_EN;
		break;
1000a94c:	e18a      	b.n	1000ac64 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000a94e:	4ac7      	ldr	r2, [pc, #796]	; (1000ac6c <system_clock_peripheral_enable+0x358>)
1000a950:	68d1      	ldr	r1, [r2, #12]
1000a952:	2310      	movs	r3, #16
1000a954:	430b      	orrs	r3, r1
1000a956:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000a958:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C0_CORE_CLK_EN;
		break;
1000a95a:	e183      	b.n	1000ac64 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000a95c:	4ac3      	ldr	r2, [pc, #780]	; (1000ac6c <system_clock_peripheral_enable+0x358>)
1000a95e:	68d1      	ldr	r1, [r2, #12]
1000a960:	2320      	movs	r3, #32
1000a962:	430b      	orrs	r3, r1
1000a964:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000a966:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_DUALTIMER0_CLK_EN;
		break;
1000a968:	e17c      	b.n	1000ac64 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000a96a:	4ac0      	ldr	r2, [pc, #768]	; (1000ac6c <system_clock_peripheral_enable+0x358>)
1000a96c:	68d1      	ldr	r1, [r2, #12]
1000a96e:	2380      	movs	r3, #128	; 0x80
1000a970:	430b      	orrs	r3, r1
1000a972:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000a974:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_GPIO_CLK_EN;
		break;
1000a976:	e175      	b.n	1000ac64 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000a978:	4abc      	ldr	r2, [pc, #752]	; (1000ac6c <system_clock_peripheral_enable+0x358>)
1000a97a:	68d3      	ldr	r3, [r2, #12]
1000a97c:	2180      	movs	r1, #128	; 0x80
1000a97e:	0049      	lsls	r1, r1, #1
1000a980:	430b      	orrs	r3, r1
1000a982:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000a984:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_TIMER0_CLK_EN;
		break;
1000a986:	e16d      	b.n	1000ac64 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000a988:	4ab8      	ldr	r2, [pc, #736]	; (1000ac6c <system_clock_peripheral_enable+0x358>)
1000a98a:	68d3      	ldr	r3, [r2, #12]
1000a98c:	2180      	movs	r1, #128	; 0x80
1000a98e:	0109      	lsls	r1, r1, #4
1000a990:	430b      	orrs	r3, r1
1000a992:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000a994:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WDT0_CLK_EN;
		break;
1000a996:	e165      	b.n	1000ac64 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000a998:	4ab4      	ldr	r2, [pc, #720]	; (1000ac6c <system_clock_peripheral_enable+0x358>)
1000a99a:	68d3      	ldr	r3, [r2, #12]
1000a99c:	2180      	movs	r1, #128	; 0x80
1000a99e:	0149      	lsls	r1, r1, #5
1000a9a0:	430b      	orrs	r3, r1
1000a9a2:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000a9a4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WDT1_CLK_EN;
		break;
1000a9a6:	e15d      	b.n	1000ac64 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000a9a8:	4ab0      	ldr	r2, [pc, #704]	; (1000ac6c <system_clock_peripheral_enable+0x358>)
1000a9aa:	68d3      	ldr	r3, [r2, #12]
1000a9ac:	2180      	movs	r1, #128	; 0x80
1000a9ae:	0189      	lsls	r1, r1, #6
1000a9b0:	430b      	orrs	r3, r1
1000a9b2:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000a9b4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART0_CORE_CLK_EN;
		break;
1000a9b6:	e155      	b.n	1000ac64 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000a9b8:	4aac      	ldr	r2, [pc, #688]	; (1000ac6c <system_clock_peripheral_enable+0x358>)
1000a9ba:	68d3      	ldr	r3, [r2, #12]
1000a9bc:	2180      	movs	r1, #128	; 0x80
1000a9be:	01c9      	lsls	r1, r1, #7
1000a9c0:	430b      	orrs	r3, r1
1000a9c2:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000a9c4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART0_IF_CLK_EN;
		break;
1000a9c6:	e14d      	b.n	1000ac64 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000a9c8:	4aa8      	ldr	r2, [pc, #672]	; (1000ac6c <system_clock_peripheral_enable+0x358>)
1000a9ca:	68d3      	ldr	r3, [r2, #12]
1000a9cc:	2180      	movs	r1, #128	; 0x80
1000a9ce:	0209      	lsls	r1, r1, #8
1000a9d0:	430b      	orrs	r3, r1
1000a9d2:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000a9d4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART1_CORE_CLK_EN;
		break;
1000a9d6:	e145      	b.n	1000ac64 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000a9d8:	4aa4      	ldr	r2, [pc, #656]	; (1000ac6c <system_clock_peripheral_enable+0x358>)
1000a9da:	68d3      	ldr	r3, [r2, #12]
1000a9dc:	2180      	movs	r1, #128	; 0x80
1000a9de:	0249      	lsls	r1, r1, #9
1000a9e0:	430b      	orrs	r3, r1
1000a9e2:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000a9e4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART1_IF_CLK_EN;
		break;
1000a9e6:	e13d      	b.n	1000ac64 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000a9e8:	4aa0      	ldr	r2, [pc, #640]	; (1000ac6c <system_clock_peripheral_enable+0x358>)
1000a9ea:	68d3      	ldr	r3, [r2, #12]
1000a9ec:	2180      	movs	r1, #128	; 0x80
1000a9ee:	0289      	lsls	r1, r1, #10
1000a9f0:	430b      	orrs	r3, r1
1000a9f2:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000a9f4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IRQ_CTRLR_CORE_CLK_EN;
		break;
1000a9f6:	e135      	b.n	1000ac64 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000a9f8:	4a9c      	ldr	r2, [pc, #624]	; (1000ac6c <system_clock_peripheral_enable+0x358>)
1000a9fa:	68d3      	ldr	r3, [r2, #12]
1000a9fc:	2180      	movs	r1, #128	; 0x80
1000a9fe:	02c9      	lsls	r1, r1, #11
1000aa00:	430b      	orrs	r3, r1
1000aa02:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000aa04:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_1_GL_MEM_CLK_EN;
		break;
1000aa06:	e12d      	b.n	1000ac64 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000aa08:	4a98      	ldr	r2, [pc, #608]	; (1000ac6c <system_clock_peripheral_enable+0x358>)
1000aa0a:	68d3      	ldr	r3, [r2, #12]
1000aa0c:	2180      	movs	r1, #128	; 0x80
1000aa0e:	0309      	lsls	r1, r1, #12
1000aa10:	430b      	orrs	r3, r1
1000aa12:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000aa14:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_2_GL_MEM_CLK_EN;
		break;
1000aa16:	e125      	b.n	1000ac64 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000aa18:	4a94      	ldr	r2, [pc, #592]	; (1000ac6c <system_clock_peripheral_enable+0x358>)
1000aa1a:	68d3      	ldr	r3, [r2, #12]
1000aa1c:	2180      	movs	r1, #128	; 0x80
1000aa1e:	0349      	lsls	r1, r1, #13
1000aa20:	430b      	orrs	r3, r1
1000aa22:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000aa24:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ROM_MEM_CLK_EN;
		break;
1000aa26:	e11d      	b.n	1000ac64 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000aa28:	4a90      	ldr	r2, [pc, #576]	; (1000ac6c <system_clock_peripheral_enable+0x358>)
1000aa2a:	68d3      	ldr	r3, [r2, #12]
1000aa2c:	2180      	movs	r1, #128	; 0x80
1000aa2e:	0389      	lsls	r1, r1, #14
1000aa30:	430b      	orrs	r3, r1
1000aa32:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000aa34:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_XBAR_IF_CLK_EN;
		break;
1000aa36:	e115      	b.n	1000ac64 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000aa38:	4a8c      	ldr	r2, [pc, #560]	; (1000ac6c <system_clock_peripheral_enable+0x358>)
1000aa3a:	68d3      	ldr	r3, [r2, #12]
1000aa3c:	2180      	movs	r1, #128	; 0x80
1000aa3e:	03c9      	lsls	r1, r1, #15
1000aa40:	430b      	orrs	r3, r1
1000aa42:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000aa44:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_AON_WRAPPER_CLK_EN;
		break;
1000aa46:	e10d      	b.n	1000ac64 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000aa48:	4a88      	ldr	r2, [pc, #544]	; (1000ac6c <system_clock_peripheral_enable+0x358>)
1000aa4a:	68d3      	ldr	r3, [r2, #12]
1000aa4c:	2180      	movs	r1, #128	; 0x80
1000aa4e:	0409      	lsls	r1, r1, #16
1000aa50:	430b      	orrs	r3, r1
1000aa52:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000aa54:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLK_EN;
		break;
1000aa56:	e105      	b.n	1000ac64 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000aa58:	4a84      	ldr	r2, [pc, #528]	; (1000ac6c <system_clock_peripheral_enable+0x358>)
1000aa5a:	68d3      	ldr	r3, [r2, #12]
1000aa5c:	2180      	movs	r1, #128	; 0x80
1000aa5e:	0449      	lsls	r1, r1, #17
1000aa60:	430b      	orrs	r3, r1
1000aa62:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000aa64:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLKG_EN;
		break;
1000aa66:	e0fd      	b.n	1000ac64 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000aa68:	4a80      	ldr	r2, [pc, #512]	; (1000ac6c <system_clock_peripheral_enable+0x358>)
1000aa6a:	68d3      	ldr	r3, [r2, #12]
1000aa6c:	2180      	movs	r1, #128	; 0x80
1000aa6e:	0489      	lsls	r1, r1, #18
1000aa70:	430b      	orrs	r3, r1
1000aa72:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000aa74:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_BLE_MEM_CLK_EN;
		break;
1000aa76:	e0f5      	b.n	1000ac64 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000aa78:	4a7c      	ldr	r2, [pc, #496]	; (1000ac6c <system_clock_peripheral_enable+0x358>)
1000aa7a:	68d3      	ldr	r3, [r2, #12]
1000aa7c:	2180      	movs	r1, #128	; 0x80
1000aa7e:	04c9      	lsls	r1, r1, #19
1000aa80:	430b      	orrs	r3, r1
1000aa82:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000aa84:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC0_CLK_EN;
		break;
1000aa86:	e0ed      	b.n	1000ac64 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000aa88:	4a78      	ldr	r2, [pc, #480]	; (1000ac6c <system_clock_peripheral_enable+0x358>)
1000aa8a:	68d3      	ldr	r3, [r2, #12]
1000aa8c:	2180      	movs	r1, #128	; 0x80
1000aa8e:	0509      	lsls	r1, r1, #20
1000aa90:	430b      	orrs	r3, r1
1000aa92:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000aa94:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC1_CLK_EN;
		break;
1000aa96:	e0e5      	b.n	1000ac64 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000aa98:	4a74      	ldr	r2, [pc, #464]	; (1000ac6c <system_clock_peripheral_enable+0x358>)
1000aa9a:	68d3      	ldr	r3, [r2, #12]
1000aa9c:	2180      	movs	r1, #128	; 0x80
1000aa9e:	0549      	lsls	r1, r1, #21
1000aaa0:	430b      	orrs	r3, r1
1000aaa2:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000aaa4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC2_CLK_EN;
		break;
1000aaa6:	e0dd      	b.n	1000ac64 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000aaa8:	4a70      	ldr	r2, [pc, #448]	; (1000ac6c <system_clock_peripheral_enable+0x358>)
1000aaaa:	68d3      	ldr	r3, [r2, #12]
1000aaac:	2180      	movs	r1, #128	; 0x80
1000aaae:	0589      	lsls	r1, r1, #22
1000aab0:	430b      	orrs	r3, r1
1000aab2:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000aab4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C1_CORE_CLK_EN;
		break;
1000aab6:	e0d5      	b.n	1000ac64 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000aab8:	4a6c      	ldr	r2, [pc, #432]	; (1000ac6c <system_clock_peripheral_enable+0x358>)
1000aaba:	68d3      	ldr	r3, [r2, #12]
1000aabc:	2180      	movs	r1, #128	; 0x80
1000aabe:	05c9      	lsls	r1, r1, #23
1000aac0:	430b      	orrs	r3, r1
1000aac2:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000aac4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_CLK_EN;
		break;
1000aac6:	e0cd      	b.n	1000ac64 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000aac8:	4a68      	ldr	r2, [pc, #416]	; (1000ac6c <system_clock_peripheral_enable+0x358>)
1000aaca:	6911      	ldr	r1, [r2, #16]
1000aacc:	2301      	movs	r3, #1
1000aace:	430b      	orrs	r3, r1
1000aad0:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000aad2:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE0_CLK_EN;
		break;
1000aad4:	e0c6      	b.n	1000ac64 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000aad6:	4a65      	ldr	r2, [pc, #404]	; (1000ac6c <system_clock_peripheral_enable+0x358>)
1000aad8:	6911      	ldr	r1, [r2, #16]
1000aada:	2302      	movs	r3, #2
1000aadc:	430b      	orrs	r3, r1
1000aade:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000aae0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE1_CLK_EN;
		break;
1000aae2:	e0bf      	b.n	1000ac64 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000aae4:	4a61      	ldr	r2, [pc, #388]	; (1000ac6c <system_clock_peripheral_enable+0x358>)
1000aae6:	6911      	ldr	r1, [r2, #16]
1000aae8:	2304      	movs	r3, #4
1000aaea:	430b      	orrs	r3, r1
1000aaec:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000aaee:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE2_CLK_EN;
		break;
1000aaf0:	e0b8      	b.n	1000ac64 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000aaf2:	4a5e      	ldr	r2, [pc, #376]	; (1000ac6c <system_clock_peripheral_enable+0x358>)
1000aaf4:	6911      	ldr	r1, [r2, #16]
1000aaf6:	2308      	movs	r3, #8
1000aaf8:	430b      	orrs	r3, r1
1000aafa:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000aafc:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE3_CLK_EN;
		break;
1000aafe:	e0b1      	b.n	1000ac64 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000ab00:	4a5a      	ldr	r2, [pc, #360]	; (1000ac6c <system_clock_peripheral_enable+0x358>)
1000ab02:	6911      	ldr	r1, [r2, #16]
1000ab04:	2310      	movs	r3, #16
1000ab06:	430b      	orrs	r3, r1
1000ab08:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ab0a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE4_CLK_EN;
		break;
1000ab0c:	e0aa      	b.n	1000ac64 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000ab0e:	4a57      	ldr	r2, [pc, #348]	; (1000ac6c <system_clock_peripheral_enable+0x358>)
1000ab10:	6911      	ldr	r1, [r2, #16]
1000ab12:	2320      	movs	r3, #32
1000ab14:	430b      	orrs	r3, r1
1000ab16:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ab18:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE5_CLK_EN;
		break;
1000ab1a:	e0a3      	b.n	1000ac64 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000ab1c:	4a53      	ldr	r2, [pc, #332]	; (1000ac6c <system_clock_peripheral_enable+0x358>)
1000ab1e:	6911      	ldr	r1, [r2, #16]
1000ab20:	2340      	movs	r3, #64	; 0x40
1000ab22:	430b      	orrs	r3, r1
1000ab24:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ab26:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM0_CLK_EN;
		break;
1000ab28:	e09c      	b.n	1000ac64 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000ab2a:	4a50      	ldr	r2, [pc, #320]	; (1000ac6c <system_clock_peripheral_enable+0x358>)
1000ab2c:	6911      	ldr	r1, [r2, #16]
1000ab2e:	2380      	movs	r3, #128	; 0x80
1000ab30:	430b      	orrs	r3, r1
1000ab32:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ab34:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM1_CLK_EN;
		break;
1000ab36:	e095      	b.n	1000ac64 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000ab38:	4a4c      	ldr	r2, [pc, #304]	; (1000ac6c <system_clock_peripheral_enable+0x358>)
1000ab3a:	6913      	ldr	r3, [r2, #16]
1000ab3c:	2180      	movs	r1, #128	; 0x80
1000ab3e:	0049      	lsls	r1, r1, #1
1000ab40:	430b      	orrs	r3, r1
1000ab42:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ab44:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM2_CLK_EN;
		break;
1000ab46:	e08d      	b.n	1000ac64 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000ab48:	4a48      	ldr	r2, [pc, #288]	; (1000ac6c <system_clock_peripheral_enable+0x358>)
1000ab4a:	6913      	ldr	r3, [r2, #16]
1000ab4c:	2180      	movs	r1, #128	; 0x80
1000ab4e:	0089      	lsls	r1, r1, #2
1000ab50:	430b      	orrs	r3, r1
1000ab52:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ab54:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM3_CLK_EN;
		break;
1000ab56:	e085      	b.n	1000ac64 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000ab58:	4a44      	ldr	r2, [pc, #272]	; (1000ac6c <system_clock_peripheral_enable+0x358>)
1000ab5a:	6913      	ldr	r3, [r2, #16]
1000ab5c:	2180      	movs	r1, #128	; 0x80
1000ab5e:	00c9      	lsls	r1, r1, #3
1000ab60:	430b      	orrs	r3, r1
1000ab62:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ab64:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SENS_ADC_CLK_EN;
		break;
1000ab66:	e07d      	b.n	1000ac64 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000ab68:	4a40      	ldr	r2, [pc, #256]	; (1000ac6c <system_clock_peripheral_enable+0x358>)
1000ab6a:	6913      	ldr	r3, [r2, #16]
1000ab6c:	2180      	movs	r1, #128	; 0x80
1000ab6e:	0109      	lsls	r1, r1, #4
1000ab70:	430b      	orrs	r3, r1
1000ab72:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ab74:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI0_SCK_PHASE_INT_CLK_EN;
		break;
1000ab76:	e075      	b.n	1000ac64 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000ab78:	4a3c      	ldr	r2, [pc, #240]	; (1000ac6c <system_clock_peripheral_enable+0x358>)
1000ab7a:	6913      	ldr	r3, [r2, #16]
1000ab7c:	2180      	movs	r1, #128	; 0x80
1000ab7e:	0149      	lsls	r1, r1, #5
1000ab80:	430b      	orrs	r3, r1
1000ab82:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ab84:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI1_SCK_PHASE_INT_CLK_EN;
		break;
1000ab86:	e06d      	b.n	1000ac64 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000ab88:	4a38      	ldr	r2, [pc, #224]	; (1000ac6c <system_clock_peripheral_enable+0x358>)
1000ab8a:	6913      	ldr	r3, [r2, #16]
1000ab8c:	2180      	movs	r1, #128	; 0x80
1000ab8e:	0189      	lsls	r1, r1, #6
1000ab90:	430b      	orrs	r3, r1
1000ab92:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ab94:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_GPIO_GCLK_EN;
		break;
1000ab96:	e065      	b.n	1000ac64 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000ab98:	4a34      	ldr	r2, [pc, #208]	; (1000ac6c <system_clock_peripheral_enable+0x358>)
1000ab9a:	6913      	ldr	r3, [r2, #16]
1000ab9c:	2180      	movs	r1, #128	; 0x80
1000ab9e:	01c9      	lsls	r1, r1, #7
1000aba0:	430b      	orrs	r3, r1
1000aba2:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000aba4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_TIMER0_PGCLK_EN;
		break;
1000aba6:	e05d      	b.n	1000ac64 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000aba8:	4a30      	ldr	r2, [pc, #192]	; (1000ac6c <system_clock_peripheral_enable+0x358>)
1000abaa:	6913      	ldr	r3, [r2, #16]
1000abac:	2180      	movs	r1, #128	; 0x80
1000abae:	0209      	lsls	r1, r1, #8
1000abb0:	430b      	orrs	r3, r1
1000abb2:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000abb4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_CORE_CLK_EN;
		break;
1000abb6:	e055      	b.n	1000ac64 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000abb8:	4a2c      	ldr	r2, [pc, #176]	; (1000ac6c <system_clock_peripheral_enable+0x358>)
1000abba:	6913      	ldr	r3, [r2, #16]
1000abbc:	2180      	movs	r1, #128	; 0x80
1000abbe:	0249      	lsls	r1, r1, #9
1000abc0:	430b      	orrs	r3, r1
1000abc2:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000abc4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_AHB_CLK_EN;
		break;
1000abc6:	e04d      	b.n	1000ac64 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000abc8:	4a28      	ldr	r2, [pc, #160]	; (1000ac6c <system_clock_peripheral_enable+0x358>)
1000abca:	6913      	ldr	r3, [r2, #16]
1000abcc:	2180      	movs	r1, #128	; 0x80
1000abce:	0289      	lsls	r1, r1, #10
1000abd0:	430b      	orrs	r3, r1
1000abd2:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000abd4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_CORE_CLK_EN;
		break;
1000abd6:	e045      	b.n	1000ac64 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000abd8:	4a24      	ldr	r2, [pc, #144]	; (1000ac6c <system_clock_peripheral_enable+0x358>)
1000abda:	6913      	ldr	r3, [r2, #16]
1000abdc:	2180      	movs	r1, #128	; 0x80
1000abde:	02c9      	lsls	r1, r1, #11
1000abe0:	430b      	orrs	r3, r1
1000abe2:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000abe4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_AHB_CLK_EN;
		break;
1000abe6:	e03d      	b.n	1000ac64 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000abe8:	4a20      	ldr	r2, [pc, #128]	; (1000ac6c <system_clock_peripheral_enable+0x358>)
1000abea:	6913      	ldr	r3, [r2, #16]
1000abec:	2180      	movs	r1, #128	; 0x80
1000abee:	0309      	lsls	r1, r1, #12
1000abf0:	430b      	orrs	r3, r1
1000abf2:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000abf4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_0_MEM_CLK_EN;
		break;
1000abf6:	e035      	b.n	1000ac64 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000abf8:	4a1c      	ldr	r2, [pc, #112]	; (1000ac6c <system_clock_peripheral_enable+0x358>)
1000abfa:	6913      	ldr	r3, [r2, #16]
1000abfc:	2180      	movs	r1, #128	; 0x80
1000abfe:	0349      	lsls	r1, r1, #13
1000ac00:	430b      	orrs	r3, r1
1000ac02:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ac04:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_1_MEM_CLK_EN;
		break;
1000ac06:	e02d      	b.n	1000ac64 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000ac08:	4a18      	ldr	r2, [pc, #96]	; (1000ac6c <system_clock_peripheral_enable+0x358>)
1000ac0a:	6913      	ldr	r3, [r2, #16]
1000ac0c:	2180      	movs	r1, #128	; 0x80
1000ac0e:	0389      	lsls	r1, r1, #14
1000ac10:	430b      	orrs	r3, r1
1000ac12:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ac14:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_2_MEM_CLK_EN;
		break;
1000ac16:	e025      	b.n	1000ac64 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000ac18:	4a14      	ldr	r2, [pc, #80]	; (1000ac6c <system_clock_peripheral_enable+0x358>)
1000ac1a:	6913      	ldr	r3, [r2, #16]
1000ac1c:	2180      	movs	r1, #128	; 0x80
1000ac1e:	03c9      	lsls	r1, r1, #15
1000ac20:	430b      	orrs	r3, r1
1000ac22:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ac24:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_0_MEM_CLK_EN;
		break;
1000ac26:	e01d      	b.n	1000ac64 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000ac28:	4a10      	ldr	r2, [pc, #64]	; (1000ac6c <system_clock_peripheral_enable+0x358>)
1000ac2a:	6913      	ldr	r3, [r2, #16]
1000ac2c:	2180      	movs	r1, #128	; 0x80
1000ac2e:	0409      	lsls	r1, r1, #16
1000ac30:	430b      	orrs	r3, r1
1000ac32:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ac34:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_1_MEM_CLK_EN;
		break;
1000ac36:	e015      	b.n	1000ac64 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
1000ac38:	4a0c      	ldr	r2, [pc, #48]	; (1000ac6c <system_clock_peripheral_enable+0x358>)
1000ac3a:	7d11      	ldrb	r1, [r2, #20]
1000ac3c:	2301      	movs	r3, #1
1000ac3e:	430b      	orrs	r3, r1
1000ac40:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ac42:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CTRL_RXTX_SEQ_CLK_EN;
		break;
1000ac44:	e00e      	b.n	1000ac64 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
1000ac46:	4a09      	ldr	r2, [pc, #36]	; (1000ac6c <system_clock_peripheral_enable+0x358>)
1000ac48:	7d11      	ldrb	r1, [r2, #20]
1000ac4a:	2302      	movs	r3, #2
1000ac4c:	430b      	orrs	r3, r1
1000ac4e:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ac50:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CTRL_AHB_CLK_EN;
		break;
1000ac52:	e007      	b.n	1000ac64 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
1000ac54:	4a05      	ldr	r2, [pc, #20]	; (1000ac6c <system_clock_peripheral_enable+0x358>)
1000ac56:	7d11      	ldrb	r1, [r2, #20]
1000ac58:	2304      	movs	r3, #4
1000ac5a:	430b      	orrs	r3, r1
1000ac5c:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ac5e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CTRL_PERIPH_REGS_CLK_EN;
		break;
1000ac60:	e000      	b.n	1000ac64 <system_clock_peripheral_enable+0x350>

		default:
			return STATUS_ERR_INVALID_ARG;
1000ac62:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
1000ac64:	bd00      	pop	{pc}
1000ac66:	46c0      	nop			; (mov r8, r8)
1000ac68:	10017124 	.word	0x10017124
1000ac6c:	4000b000 	.word	0x4000b000

1000ac70 <system_clock_peripheral_disable>:
 * \return Status of operation.
 * \retval STATUS_OK               Clock config correctly
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_clock_peripheral_disable(enum system_peripheral peripheral)
{
1000ac70:	b500      	push	{lr}
	switch (peripheral) {
1000ac72:	2835      	cmp	r0, #53	; 0x35
1000ac74:	d900      	bls.n	1000ac78 <system_clock_peripheral_disable+0x8>
1000ac76:	e17d      	b.n	1000af74 <system_clock_peripheral_disable+0x304>
1000ac78:	0080      	lsls	r0, r0, #2
1000ac7a:	4bbf      	ldr	r3, [pc, #764]	; (1000af78 <system_clock_peripheral_disable+0x308>)
1000ac7c:	581b      	ldr	r3, [r3, r0]
1000ac7e:	469f      	mov	pc, r3
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000ac80:	4abe      	ldr	r2, [pc, #760]	; (1000af7c <system_clock_peripheral_disable+0x30c>)
1000ac82:	68d3      	ldr	r3, [r2, #12]
1000ac84:	2102      	movs	r1, #2
1000ac86:	438b      	bics	r3, r1
1000ac88:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ac8a:	2000      	movs	r0, #0
{
	switch (peripheral) {
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI_FLASH0_CLK_EN;
		break;
1000ac8c:	e173      	b.n	1000af76 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000ac8e:	4abb      	ldr	r2, [pc, #748]	; (1000af7c <system_clock_peripheral_disable+0x30c>)
1000ac90:	68d3      	ldr	r3, [r2, #12]
1000ac92:	2104      	movs	r1, #4
1000ac94:	438b      	bics	r3, r1
1000ac96:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ac98:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI0_CORE_CLK_EN;
		break;
1000ac9a:	e16c      	b.n	1000af76 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000ac9c:	4ab7      	ldr	r2, [pc, #732]	; (1000af7c <system_clock_peripheral_disable+0x30c>)
1000ac9e:	68d3      	ldr	r3, [r2, #12]
1000aca0:	2108      	movs	r1, #8
1000aca2:	438b      	bics	r3, r1
1000aca4:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000aca6:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI1_CORE_CLK_EN;
		break;
1000aca8:	e165      	b.n	1000af76 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000acaa:	4ab4      	ldr	r2, [pc, #720]	; (1000af7c <system_clock_peripheral_disable+0x30c>)
1000acac:	68d3      	ldr	r3, [r2, #12]
1000acae:	2110      	movs	r1, #16
1000acb0:	438b      	bics	r3, r1
1000acb2:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000acb4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C0_CORE_CLK_EN;
		break;
1000acb6:	e15e      	b.n	1000af76 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000acb8:	4ab0      	ldr	r2, [pc, #704]	; (1000af7c <system_clock_peripheral_disable+0x30c>)
1000acba:	68d3      	ldr	r3, [r2, #12]
1000acbc:	2120      	movs	r1, #32
1000acbe:	438b      	bics	r3, r1
1000acc0:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000acc2:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_DUALTIMER0_CLK_EN;
		break;
1000acc4:	e157      	b.n	1000af76 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000acc6:	4aad      	ldr	r2, [pc, #692]	; (1000af7c <system_clock_peripheral_disable+0x30c>)
1000acc8:	68d3      	ldr	r3, [r2, #12]
1000acca:	2180      	movs	r1, #128	; 0x80
1000accc:	438b      	bics	r3, r1
1000acce:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000acd0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_GPIO_CLK_EN;
		break;
1000acd2:	e150      	b.n	1000af76 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000acd4:	4aa9      	ldr	r2, [pc, #676]	; (1000af7c <system_clock_peripheral_disable+0x30c>)
1000acd6:	68d1      	ldr	r1, [r2, #12]
1000acd8:	4ba9      	ldr	r3, [pc, #676]	; (1000af80 <system_clock_peripheral_disable+0x310>)
1000acda:	400b      	ands	r3, r1
1000acdc:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000acde:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_TIMER0_CLK_EN;
		break;
1000ace0:	e149      	b.n	1000af76 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000ace2:	4aa6      	ldr	r2, [pc, #664]	; (1000af7c <system_clock_peripheral_disable+0x30c>)
1000ace4:	68d1      	ldr	r1, [r2, #12]
1000ace6:	4ba7      	ldr	r3, [pc, #668]	; (1000af84 <system_clock_peripheral_disable+0x314>)
1000ace8:	400b      	ands	r3, r1
1000acea:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000acec:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WDT0_CLK_EN;
		break;
1000acee:	e142      	b.n	1000af76 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000acf0:	4aa2      	ldr	r2, [pc, #648]	; (1000af7c <system_clock_peripheral_disable+0x30c>)
1000acf2:	68d1      	ldr	r1, [r2, #12]
1000acf4:	4ba4      	ldr	r3, [pc, #656]	; (1000af88 <system_clock_peripheral_disable+0x318>)
1000acf6:	400b      	ands	r3, r1
1000acf8:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000acfa:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WDT1_CLK_EN;
		break;
1000acfc:	e13b      	b.n	1000af76 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000acfe:	4a9f      	ldr	r2, [pc, #636]	; (1000af7c <system_clock_peripheral_disable+0x30c>)
1000ad00:	68d1      	ldr	r1, [r2, #12]
1000ad02:	4ba2      	ldr	r3, [pc, #648]	; (1000af8c <system_clock_peripheral_disable+0x31c>)
1000ad04:	400b      	ands	r3, r1
1000ad06:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ad08:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART0_CORE_CLK_EN;
		break;
1000ad0a:	e134      	b.n	1000af76 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000ad0c:	4a9b      	ldr	r2, [pc, #620]	; (1000af7c <system_clock_peripheral_disable+0x30c>)
1000ad0e:	68d1      	ldr	r1, [r2, #12]
1000ad10:	4b9f      	ldr	r3, [pc, #636]	; (1000af90 <system_clock_peripheral_disable+0x320>)
1000ad12:	400b      	ands	r3, r1
1000ad14:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ad16:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART0_IF_CLK_EN;
		break;
1000ad18:	e12d      	b.n	1000af76 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000ad1a:	4a98      	ldr	r2, [pc, #608]	; (1000af7c <system_clock_peripheral_disable+0x30c>)
1000ad1c:	68d1      	ldr	r1, [r2, #12]
1000ad1e:	4b9d      	ldr	r3, [pc, #628]	; (1000af94 <system_clock_peripheral_disable+0x324>)
1000ad20:	400b      	ands	r3, r1
1000ad22:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ad24:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART1_CORE_CLK_EN;
		break;
1000ad26:	e126      	b.n	1000af76 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000ad28:	4a94      	ldr	r2, [pc, #592]	; (1000af7c <system_clock_peripheral_disable+0x30c>)
1000ad2a:	68d1      	ldr	r1, [r2, #12]
1000ad2c:	4b9a      	ldr	r3, [pc, #616]	; (1000af98 <system_clock_peripheral_disable+0x328>)
1000ad2e:	400b      	ands	r3, r1
1000ad30:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ad32:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART1_IF_CLK_EN;
		break;
1000ad34:	e11f      	b.n	1000af76 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000ad36:	4a91      	ldr	r2, [pc, #580]	; (1000af7c <system_clock_peripheral_disable+0x30c>)
1000ad38:	68d1      	ldr	r1, [r2, #12]
1000ad3a:	4b98      	ldr	r3, [pc, #608]	; (1000af9c <system_clock_peripheral_disable+0x32c>)
1000ad3c:	400b      	ands	r3, r1
1000ad3e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ad40:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IRQ_CTRLR_CORE_CLK_EN;
		break;
1000ad42:	e118      	b.n	1000af76 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000ad44:	4a8d      	ldr	r2, [pc, #564]	; (1000af7c <system_clock_peripheral_disable+0x30c>)
1000ad46:	68d1      	ldr	r1, [r2, #12]
1000ad48:	4b95      	ldr	r3, [pc, #596]	; (1000afa0 <system_clock_peripheral_disable+0x330>)
1000ad4a:	400b      	ands	r3, r1
1000ad4c:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ad4e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_1_GL_MEM_CLK_EN;
		break;
1000ad50:	e111      	b.n	1000af76 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000ad52:	4a8a      	ldr	r2, [pc, #552]	; (1000af7c <system_clock_peripheral_disable+0x30c>)
1000ad54:	68d1      	ldr	r1, [r2, #12]
1000ad56:	4b93      	ldr	r3, [pc, #588]	; (1000afa4 <system_clock_peripheral_disable+0x334>)
1000ad58:	400b      	ands	r3, r1
1000ad5a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ad5c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_2_GL_MEM_CLK_EN;
		break;
1000ad5e:	e10a      	b.n	1000af76 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000ad60:	4a86      	ldr	r2, [pc, #536]	; (1000af7c <system_clock_peripheral_disable+0x30c>)
1000ad62:	68d1      	ldr	r1, [r2, #12]
1000ad64:	4b90      	ldr	r3, [pc, #576]	; (1000afa8 <system_clock_peripheral_disable+0x338>)
1000ad66:	400b      	ands	r3, r1
1000ad68:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ad6a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ROM_MEM_CLK_EN;
		break;
1000ad6c:	e103      	b.n	1000af76 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000ad6e:	4a83      	ldr	r2, [pc, #524]	; (1000af7c <system_clock_peripheral_disable+0x30c>)
1000ad70:	68d1      	ldr	r1, [r2, #12]
1000ad72:	4b8e      	ldr	r3, [pc, #568]	; (1000afac <system_clock_peripheral_disable+0x33c>)
1000ad74:	400b      	ands	r3, r1
1000ad76:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ad78:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_XBAR_IF_CLK_EN;
		break;
1000ad7a:	e0fc      	b.n	1000af76 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000ad7c:	4a7f      	ldr	r2, [pc, #508]	; (1000af7c <system_clock_peripheral_disable+0x30c>)
1000ad7e:	68d1      	ldr	r1, [r2, #12]
1000ad80:	4b8b      	ldr	r3, [pc, #556]	; (1000afb0 <system_clock_peripheral_disable+0x340>)
1000ad82:	400b      	ands	r3, r1
1000ad84:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ad86:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_AON_WRAPPER_CLK_EN;
		break;
1000ad88:	e0f5      	b.n	1000af76 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000ad8a:	4a7c      	ldr	r2, [pc, #496]	; (1000af7c <system_clock_peripheral_disable+0x30c>)
1000ad8c:	68d1      	ldr	r1, [r2, #12]
1000ad8e:	4b89      	ldr	r3, [pc, #548]	; (1000afb4 <system_clock_peripheral_disable+0x344>)
1000ad90:	400b      	ands	r3, r1
1000ad92:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ad94:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLK_EN;
		break;
1000ad96:	e0ee      	b.n	1000af76 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000ad98:	4a78      	ldr	r2, [pc, #480]	; (1000af7c <system_clock_peripheral_disable+0x30c>)
1000ad9a:	68d1      	ldr	r1, [r2, #12]
1000ad9c:	4b86      	ldr	r3, [pc, #536]	; (1000afb8 <system_clock_peripheral_disable+0x348>)
1000ad9e:	400b      	ands	r3, r1
1000ada0:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ada2:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLKG_EN;
		break;
1000ada4:	e0e7      	b.n	1000af76 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000ada6:	4a75      	ldr	r2, [pc, #468]	; (1000af7c <system_clock_peripheral_disable+0x30c>)
1000ada8:	68d1      	ldr	r1, [r2, #12]
1000adaa:	4b84      	ldr	r3, [pc, #528]	; (1000afbc <system_clock_peripheral_disable+0x34c>)
1000adac:	400b      	ands	r3, r1
1000adae:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000adb0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_BLE_MEM_CLK_EN;
		break;
1000adb2:	e0e0      	b.n	1000af76 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000adb4:	4a71      	ldr	r2, [pc, #452]	; (1000af7c <system_clock_peripheral_disable+0x30c>)
1000adb6:	68d1      	ldr	r1, [r2, #12]
1000adb8:	4b81      	ldr	r3, [pc, #516]	; (1000afc0 <system_clock_peripheral_disable+0x350>)
1000adba:	400b      	ands	r3, r1
1000adbc:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000adbe:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC0_CLK_EN;
		break;
1000adc0:	e0d9      	b.n	1000af76 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000adc2:	4a6e      	ldr	r2, [pc, #440]	; (1000af7c <system_clock_peripheral_disable+0x30c>)
1000adc4:	68d1      	ldr	r1, [r2, #12]
1000adc6:	4b7f      	ldr	r3, [pc, #508]	; (1000afc4 <system_clock_peripheral_disable+0x354>)
1000adc8:	400b      	ands	r3, r1
1000adca:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000adcc:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC1_CLK_EN;
		break;
1000adce:	e0d2      	b.n	1000af76 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000add0:	4a6a      	ldr	r2, [pc, #424]	; (1000af7c <system_clock_peripheral_disable+0x30c>)
1000add2:	68d1      	ldr	r1, [r2, #12]
1000add4:	4b7c      	ldr	r3, [pc, #496]	; (1000afc8 <system_clock_peripheral_disable+0x358>)
1000add6:	400b      	ands	r3, r1
1000add8:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000adda:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC2_CLK_EN;
		break;
1000addc:	e0cb      	b.n	1000af76 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000adde:	4a67      	ldr	r2, [pc, #412]	; (1000af7c <system_clock_peripheral_disable+0x30c>)
1000ade0:	68d1      	ldr	r1, [r2, #12]
1000ade2:	4b7a      	ldr	r3, [pc, #488]	; (1000afcc <system_clock_peripheral_disable+0x35c>)
1000ade4:	400b      	ands	r3, r1
1000ade6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ade8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C1_CORE_CLK_EN;
		break;
1000adea:	e0c4      	b.n	1000af76 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000adec:	4a63      	ldr	r2, [pc, #396]	; (1000af7c <system_clock_peripheral_disable+0x30c>)
1000adee:	68d1      	ldr	r1, [r2, #12]
1000adf0:	4b77      	ldr	r3, [pc, #476]	; (1000afd0 <system_clock_peripheral_disable+0x360>)
1000adf2:	400b      	ands	r3, r1
1000adf4:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000adf6:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_CLK_EN;
		break;
1000adf8:	e0bd      	b.n	1000af76 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000adfa:	4a60      	ldr	r2, [pc, #384]	; (1000af7c <system_clock_peripheral_disable+0x30c>)
1000adfc:	6913      	ldr	r3, [r2, #16]
1000adfe:	2101      	movs	r1, #1
1000ae00:	438b      	bics	r3, r1
1000ae02:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ae04:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE0_CLK_EN;
		break;
1000ae06:	e0b6      	b.n	1000af76 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000ae08:	4a5c      	ldr	r2, [pc, #368]	; (1000af7c <system_clock_peripheral_disable+0x30c>)
1000ae0a:	6913      	ldr	r3, [r2, #16]
1000ae0c:	2102      	movs	r1, #2
1000ae0e:	438b      	bics	r3, r1
1000ae10:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ae12:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE1_CLK_EN;
		break;
1000ae14:	e0af      	b.n	1000af76 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000ae16:	4a59      	ldr	r2, [pc, #356]	; (1000af7c <system_clock_peripheral_disable+0x30c>)
1000ae18:	6913      	ldr	r3, [r2, #16]
1000ae1a:	2104      	movs	r1, #4
1000ae1c:	438b      	bics	r3, r1
1000ae1e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ae20:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE2_CLK_EN;
		break;
1000ae22:	e0a8      	b.n	1000af76 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000ae24:	4a55      	ldr	r2, [pc, #340]	; (1000af7c <system_clock_peripheral_disable+0x30c>)
1000ae26:	6913      	ldr	r3, [r2, #16]
1000ae28:	2108      	movs	r1, #8
1000ae2a:	438b      	bics	r3, r1
1000ae2c:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ae2e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE3_CLK_EN;
		break;
1000ae30:	e0a1      	b.n	1000af76 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000ae32:	4a52      	ldr	r2, [pc, #328]	; (1000af7c <system_clock_peripheral_disable+0x30c>)
1000ae34:	6913      	ldr	r3, [r2, #16]
1000ae36:	2110      	movs	r1, #16
1000ae38:	438b      	bics	r3, r1
1000ae3a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ae3c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE4_CLK_EN;
		break;
1000ae3e:	e09a      	b.n	1000af76 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000ae40:	4a4e      	ldr	r2, [pc, #312]	; (1000af7c <system_clock_peripheral_disable+0x30c>)
1000ae42:	6913      	ldr	r3, [r2, #16]
1000ae44:	2120      	movs	r1, #32
1000ae46:	438b      	bics	r3, r1
1000ae48:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ae4a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE5_CLK_EN;
		break;
1000ae4c:	e093      	b.n	1000af76 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000ae4e:	4a4b      	ldr	r2, [pc, #300]	; (1000af7c <system_clock_peripheral_disable+0x30c>)
1000ae50:	6913      	ldr	r3, [r2, #16]
1000ae52:	2140      	movs	r1, #64	; 0x40
1000ae54:	438b      	bics	r3, r1
1000ae56:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ae58:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM0_CLK_EN;
		break;
1000ae5a:	e08c      	b.n	1000af76 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000ae5c:	4a47      	ldr	r2, [pc, #284]	; (1000af7c <system_clock_peripheral_disable+0x30c>)
1000ae5e:	6913      	ldr	r3, [r2, #16]
1000ae60:	2180      	movs	r1, #128	; 0x80
1000ae62:	438b      	bics	r3, r1
1000ae64:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ae66:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM1_CLK_EN;
		break;
1000ae68:	e085      	b.n	1000af76 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000ae6a:	4a44      	ldr	r2, [pc, #272]	; (1000af7c <system_clock_peripheral_disable+0x30c>)
1000ae6c:	6911      	ldr	r1, [r2, #16]
1000ae6e:	4b44      	ldr	r3, [pc, #272]	; (1000af80 <system_clock_peripheral_disable+0x310>)
1000ae70:	400b      	ands	r3, r1
1000ae72:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ae74:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM2_CLK_EN;
		break;
1000ae76:	e07e      	b.n	1000af76 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000ae78:	4a40      	ldr	r2, [pc, #256]	; (1000af7c <system_clock_peripheral_disable+0x30c>)
1000ae7a:	6911      	ldr	r1, [r2, #16]
1000ae7c:	4b55      	ldr	r3, [pc, #340]	; (1000afd4 <system_clock_peripheral_disable+0x364>)
1000ae7e:	400b      	ands	r3, r1
1000ae80:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ae82:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM3_CLK_EN;
		break;
1000ae84:	e077      	b.n	1000af76 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000ae86:	4a3d      	ldr	r2, [pc, #244]	; (1000af7c <system_clock_peripheral_disable+0x30c>)
1000ae88:	6911      	ldr	r1, [r2, #16]
1000ae8a:	4b53      	ldr	r3, [pc, #332]	; (1000afd8 <system_clock_peripheral_disable+0x368>)
1000ae8c:	400b      	ands	r3, r1
1000ae8e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ae90:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SENS_ADC_CLK_EN;
		break;
1000ae92:	e070      	b.n	1000af76 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000ae94:	4a39      	ldr	r2, [pc, #228]	; (1000af7c <system_clock_peripheral_disable+0x30c>)
1000ae96:	6911      	ldr	r1, [r2, #16]
1000ae98:	4b3a      	ldr	r3, [pc, #232]	; (1000af84 <system_clock_peripheral_disable+0x314>)
1000ae9a:	400b      	ands	r3, r1
1000ae9c:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ae9e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI0_SCK_PHASE_INT_CLK_EN;
		break;
1000aea0:	e069      	b.n	1000af76 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000aea2:	4a36      	ldr	r2, [pc, #216]	; (1000af7c <system_clock_peripheral_disable+0x30c>)
1000aea4:	6911      	ldr	r1, [r2, #16]
1000aea6:	4b38      	ldr	r3, [pc, #224]	; (1000af88 <system_clock_peripheral_disable+0x318>)
1000aea8:	400b      	ands	r3, r1
1000aeaa:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000aeac:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI1_SCK_PHASE_INT_CLK_EN;
		break;
1000aeae:	e062      	b.n	1000af76 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000aeb0:	4a32      	ldr	r2, [pc, #200]	; (1000af7c <system_clock_peripheral_disable+0x30c>)
1000aeb2:	6911      	ldr	r1, [r2, #16]
1000aeb4:	4b35      	ldr	r3, [pc, #212]	; (1000af8c <system_clock_peripheral_disable+0x31c>)
1000aeb6:	400b      	ands	r3, r1
1000aeb8:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000aeba:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_GPIO_GCLK_EN;
		break;
1000aebc:	e05b      	b.n	1000af76 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000aebe:	4a2f      	ldr	r2, [pc, #188]	; (1000af7c <system_clock_peripheral_disable+0x30c>)
1000aec0:	6911      	ldr	r1, [r2, #16]
1000aec2:	4b33      	ldr	r3, [pc, #204]	; (1000af90 <system_clock_peripheral_disable+0x320>)
1000aec4:	400b      	ands	r3, r1
1000aec6:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000aec8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_TIMER0_PGCLK_EN;
		break;
1000aeca:	e054      	b.n	1000af76 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000aecc:	4a2b      	ldr	r2, [pc, #172]	; (1000af7c <system_clock_peripheral_disable+0x30c>)
1000aece:	6911      	ldr	r1, [r2, #16]
1000aed0:	4b30      	ldr	r3, [pc, #192]	; (1000af94 <system_clock_peripheral_disable+0x324>)
1000aed2:	400b      	ands	r3, r1
1000aed4:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000aed6:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_CORE_CLK_EN;
		break;
1000aed8:	e04d      	b.n	1000af76 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000aeda:	4a28      	ldr	r2, [pc, #160]	; (1000af7c <system_clock_peripheral_disable+0x30c>)
1000aedc:	6911      	ldr	r1, [r2, #16]
1000aede:	4b2e      	ldr	r3, [pc, #184]	; (1000af98 <system_clock_peripheral_disable+0x328>)
1000aee0:	400b      	ands	r3, r1
1000aee2:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000aee4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_AHB_CLK_EN;
		break;
1000aee6:	e046      	b.n	1000af76 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000aee8:	4a24      	ldr	r2, [pc, #144]	; (1000af7c <system_clock_peripheral_disable+0x30c>)
1000aeea:	6911      	ldr	r1, [r2, #16]
1000aeec:	4b2b      	ldr	r3, [pc, #172]	; (1000af9c <system_clock_peripheral_disable+0x32c>)
1000aeee:	400b      	ands	r3, r1
1000aef0:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000aef2:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_CORE_CLK_EN;
		break;
1000aef4:	e03f      	b.n	1000af76 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000aef6:	4a21      	ldr	r2, [pc, #132]	; (1000af7c <system_clock_peripheral_disable+0x30c>)
1000aef8:	6911      	ldr	r1, [r2, #16]
1000aefa:	4b29      	ldr	r3, [pc, #164]	; (1000afa0 <system_clock_peripheral_disable+0x330>)
1000aefc:	400b      	ands	r3, r1
1000aefe:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000af00:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_AHB_CLK_EN;
		break;
1000af02:	e038      	b.n	1000af76 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000af04:	4a1d      	ldr	r2, [pc, #116]	; (1000af7c <system_clock_peripheral_disable+0x30c>)
1000af06:	6911      	ldr	r1, [r2, #16]
1000af08:	4b26      	ldr	r3, [pc, #152]	; (1000afa4 <system_clock_peripheral_disable+0x334>)
1000af0a:	400b      	ands	r3, r1
1000af0c:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000af0e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_0_MEM_CLK_EN;
		break;
1000af10:	e031      	b.n	1000af76 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000af12:	4a1a      	ldr	r2, [pc, #104]	; (1000af7c <system_clock_peripheral_disable+0x30c>)
1000af14:	6911      	ldr	r1, [r2, #16]
1000af16:	4b24      	ldr	r3, [pc, #144]	; (1000afa8 <system_clock_peripheral_disable+0x338>)
1000af18:	400b      	ands	r3, r1
1000af1a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000af1c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_1_MEM_CLK_EN;
		break;
1000af1e:	e02a      	b.n	1000af76 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000af20:	4a16      	ldr	r2, [pc, #88]	; (1000af7c <system_clock_peripheral_disable+0x30c>)
1000af22:	6911      	ldr	r1, [r2, #16]
1000af24:	4b21      	ldr	r3, [pc, #132]	; (1000afac <system_clock_peripheral_disable+0x33c>)
1000af26:	400b      	ands	r3, r1
1000af28:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000af2a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_2_MEM_CLK_EN;
		break;
1000af2c:	e023      	b.n	1000af76 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000af2e:	4a13      	ldr	r2, [pc, #76]	; (1000af7c <system_clock_peripheral_disable+0x30c>)
1000af30:	6911      	ldr	r1, [r2, #16]
1000af32:	4b1f      	ldr	r3, [pc, #124]	; (1000afb0 <system_clock_peripheral_disable+0x340>)
1000af34:	400b      	ands	r3, r1
1000af36:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000af38:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_0_MEM_CLK_EN;
		break;
1000af3a:	e01c      	b.n	1000af76 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000af3c:	4a0f      	ldr	r2, [pc, #60]	; (1000af7c <system_clock_peripheral_disable+0x30c>)
1000af3e:	6911      	ldr	r1, [r2, #16]
1000af40:	4b1c      	ldr	r3, [pc, #112]	; (1000afb4 <system_clock_peripheral_disable+0x344>)
1000af42:	400b      	ands	r3, r1
1000af44:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000af46:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_1_MEM_CLK_EN;
		break;
1000af48:	e015      	b.n	1000af76 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
1000af4a:	4a0c      	ldr	r2, [pc, #48]	; (1000af7c <system_clock_peripheral_disable+0x30c>)
1000af4c:	7d13      	ldrb	r3, [r2, #20]
1000af4e:	2101      	movs	r1, #1
1000af50:	438b      	bics	r3, r1
1000af52:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000af54:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
				~LPMCU_MISC_REGS_BTMCU_CTRL_RXTX_SEQ_CLK_EN;
		break;
1000af56:	e00e      	b.n	1000af76 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
1000af58:	4a08      	ldr	r2, [pc, #32]	; (1000af7c <system_clock_peripheral_disable+0x30c>)
1000af5a:	7d13      	ldrb	r3, [r2, #20]
1000af5c:	2102      	movs	r1, #2
1000af5e:	438b      	bics	r3, r1
1000af60:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000af62:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
				~LPMCU_MISC_REGS_BTMCU_CTRL_AHB_CLK_EN;
		break;
1000af64:	e007      	b.n	1000af76 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
1000af66:	4a05      	ldr	r2, [pc, #20]	; (1000af7c <system_clock_peripheral_disable+0x30c>)
1000af68:	7d13      	ldrb	r3, [r2, #20]
1000af6a:	2104      	movs	r1, #4
1000af6c:	438b      	bics	r3, r1
1000af6e:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000af70:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
				~LPMCU_MISC_REGS_BTMCU_CTRL_PERIPH_REGS_CLK_EN;
		break;
1000af72:	e000      	b.n	1000af76 <system_clock_peripheral_disable+0x306>

		default:
			return STATUS_ERR_INVALID_ARG;
1000af74:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
1000af76:	bd00      	pop	{pc}
1000af78:	100171fc 	.word	0x100171fc
1000af7c:	4000b000 	.word	0x4000b000
1000af80:	fffffeff 	.word	0xfffffeff
1000af84:	fffff7ff 	.word	0xfffff7ff
1000af88:	ffffefff 	.word	0xffffefff
1000af8c:	ffffdfff 	.word	0xffffdfff
1000af90:	ffffbfff 	.word	0xffffbfff
1000af94:	ffff7fff 	.word	0xffff7fff
1000af98:	fffeffff 	.word	0xfffeffff
1000af9c:	fffdffff 	.word	0xfffdffff
1000afa0:	fffbffff 	.word	0xfffbffff
1000afa4:	fff7ffff 	.word	0xfff7ffff
1000afa8:	ffefffff 	.word	0xffefffff
1000afac:	ffdfffff 	.word	0xffdfffff
1000afb0:	ffbfffff 	.word	0xffbfffff
1000afb4:	ff7fffff 	.word	0xff7fffff
1000afb8:	feffffff 	.word	0xfeffffff
1000afbc:	fdffffff 	.word	0xfdffffff
1000afc0:	fbffffff 	.word	0xfbffffff
1000afc4:	f7ffffff 	.word	0xf7ffffff
1000afc8:	efffffff 	.word	0xefffffff
1000afcc:	dfffffff 	.word	0xdfffffff
1000afd0:	bfffffff 	.word	0xbfffffff
1000afd4:	fffffdff 	.word	0xfffffdff
1000afd8:	fffffbff 	.word	0xfffffbff

1000afdc <system_peripheral_reset>:
 * \return Status of operation.
 * \retval STATUS_OK               Clock config correctly
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_peripheral_reset(enum system_peripheral peripheral)
{
1000afdc:	b500      	push	{lr}
	switch (peripheral) {
1000afde:	2843      	cmp	r0, #67	; 0x43
1000afe0:	d900      	bls.n	1000afe4 <system_peripheral_reset+0x8>
1000afe2:	e223      	b.n	1000b42c <system_peripheral_reset+0x450>
1000afe4:	0080      	lsls	r0, r0, #2
1000afe6:	4be0      	ldr	r3, [pc, #896]	; (1000b368 <system_peripheral_reset+0x38c>)
1000afe8:	581b      	ldr	r3, [r3, r0]
1000afea:	469f      	mov	pc, r3
		case PERIPHERAL_LPMCU_CPU:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000afec:	4bdf      	ldr	r3, [pc, #892]	; (1000b36c <system_peripheral_reset+0x390>)
1000afee:	6859      	ldr	r1, [r3, #4]
1000aff0:	2202      	movs	r2, #2
1000aff2:	4391      	bics	r1, r2
1000aff4:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000aff6:	6859      	ldr	r1, [r3, #4]
1000aff8:	430a      	orrs	r2, r1
1000affa:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000affc:	2000      	movs	r0, #0
		case PERIPHERAL_LPMCU_CPU:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN;
		break;
1000affe:	e216      	b.n	1000b42e <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b000:	4bda      	ldr	r3, [pc, #872]	; (1000b36c <system_peripheral_reset+0x390>)
1000b002:	6859      	ldr	r1, [r3, #4]
1000b004:	2204      	movs	r2, #4
1000b006:	4391      	bics	r1, r2
1000b008:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_SYS_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b00a:	6859      	ldr	r1, [r3, #4]
1000b00c:	430a      	orrs	r2, r1
1000b00e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b010:	2000      	movs	r0, #0
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_SYS_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_SYS_RSTN;
		break;
1000b012:	e20c      	b.n	1000b42e <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI_FLASH_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b014:	4bd5      	ldr	r3, [pc, #852]	; (1000b36c <system_peripheral_reset+0x390>)
1000b016:	6859      	ldr	r1, [r3, #4]
1000b018:	2208      	movs	r2, #8
1000b01a:	4391      	bics	r1, r2
1000b01c:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b01e:	6859      	ldr	r1, [r3, #4]
1000b020:	430a      	orrs	r2, r1
1000b022:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b024:	2000      	movs	r0, #0
		case PERIPHERAL_SPI_FLASH_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_RSTN;
		break;
1000b026:	e202      	b.n	1000b42e <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b028:	4bd0      	ldr	r3, [pc, #832]	; (1000b36c <system_peripheral_reset+0x390>)
1000b02a:	6859      	ldr	r1, [r3, #4]
1000b02c:	2210      	movs	r2, #16
1000b02e:	4391      	bics	r1, r2
1000b030:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b032:	6859      	ldr	r1, [r3, #4]
1000b034:	430a      	orrs	r2, r1
1000b036:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b038:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_CORE_RSTN;
		break;
1000b03a:	e1f8      	b.n	1000b42e <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b03c:	4bcb      	ldr	r3, [pc, #812]	; (1000b36c <system_peripheral_reset+0x390>)
1000b03e:	6859      	ldr	r1, [r3, #4]
1000b040:	2220      	movs	r2, #32
1000b042:	4391      	bics	r1, r2
1000b044:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b046:	6859      	ldr	r1, [r3, #4]
1000b048:	430a      	orrs	r2, r1
1000b04a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b04c:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_IF_RSTN;
		break;
1000b04e:	e1ee      	b.n	1000b42e <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b050:	4bc6      	ldr	r3, [pc, #792]	; (1000b36c <system_peripheral_reset+0x390>)
1000b052:	6859      	ldr	r1, [r3, #4]
1000b054:	2240      	movs	r2, #64	; 0x40
1000b056:	4391      	bics	r1, r2
1000b058:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_CORE_RESETN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b05a:	6859      	ldr	r1, [r3, #4]
1000b05c:	430a      	orrs	r2, r1
1000b05e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b060:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_CORE_RESETN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_CORE_RESETN;
		break;
1000b062:	e1e4      	b.n	1000b42e <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b064:	4bc1      	ldr	r3, [pc, #772]	; (1000b36c <system_peripheral_reset+0x390>)
1000b066:	6859      	ldr	r1, [r3, #4]
1000b068:	2280      	movs	r2, #128	; 0x80
1000b06a:	4391      	bics	r1, r2
1000b06c:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b06e:	6859      	ldr	r1, [r3, #4]
1000b070:	430a      	orrs	r2, r1
1000b072:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b074:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_IF_RSTN;
		break;
1000b076:	e1da      	b.n	1000b42e <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b078:	4bbc      	ldr	r3, [pc, #752]	; (1000b36c <system_peripheral_reset+0x390>)
1000b07a:	6859      	ldr	r1, [r3, #4]
1000b07c:	4abc      	ldr	r2, [pc, #752]	; (1000b370 <system_peripheral_reset+0x394>)
1000b07e:	400a      	ands	r2, r1
1000b080:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b082:	685a      	ldr	r2, [r3, #4]
1000b084:	2180      	movs	r1, #128	; 0x80
1000b086:	0049      	lsls	r1, r1, #1
1000b088:	430a      	orrs	r2, r1
1000b08a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b08c:	2000      	movs	r0, #0
		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_CORE_RSTN;
		break;
1000b08e:	e1ce      	b.n	1000b42e <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b090:	4bb6      	ldr	r3, [pc, #728]	; (1000b36c <system_peripheral_reset+0x390>)
1000b092:	6859      	ldr	r1, [r3, #4]
1000b094:	4ab7      	ldr	r2, [pc, #732]	; (1000b374 <system_peripheral_reset+0x398>)
1000b096:	400a      	ands	r2, r1
1000b098:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b09a:	685a      	ldr	r2, [r3, #4]
1000b09c:	2180      	movs	r1, #128	; 0x80
1000b09e:	0089      	lsls	r1, r1, #2
1000b0a0:	430a      	orrs	r2, r1
1000b0a2:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b0a4:	2000      	movs	r0, #0
		case PERIPHERAL_I2C0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_IF_RSTN;
		break;
1000b0a6:	e1c2      	b.n	1000b42e <system_peripheral_reset+0x452>

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b0a8:	4bb0      	ldr	r3, [pc, #704]	; (1000b36c <system_peripheral_reset+0x390>)
1000b0aa:	6859      	ldr	r1, [r3, #4]
1000b0ac:	4ab2      	ldr	r2, [pc, #712]	; (1000b378 <system_peripheral_reset+0x39c>)
1000b0ae:	400a      	ands	r2, r1
1000b0b0:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b0b2:	685a      	ldr	r2, [r3, #4]
1000b0b4:	2180      	movs	r1, #128	; 0x80
1000b0b6:	00c9      	lsls	r1, r1, #3
1000b0b8:	430a      	orrs	r2, r1
1000b0ba:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b0bc:	2000      	movs	r0, #0
		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
		break;
1000b0be:	e1b6      	b.n	1000b42e <system_peripheral_reset+0x452>

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b0c0:	4baa      	ldr	r3, [pc, #680]	; (1000b36c <system_peripheral_reset+0x390>)
1000b0c2:	6859      	ldr	r1, [r3, #4]
1000b0c4:	4aad      	ldr	r2, [pc, #692]	; (1000b37c <system_peripheral_reset+0x3a0>)
1000b0c6:	400a      	ands	r2, r1
1000b0c8:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_TIMER0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b0ca:	685a      	ldr	r2, [r3, #4]
1000b0cc:	2180      	movs	r1, #128	; 0x80
1000b0ce:	0109      	lsls	r1, r1, #4
1000b0d0:	430a      	orrs	r2, r1
1000b0d2:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b0d4:	2000      	movs	r0, #0
		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_TIMER0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_TIMER0_RSTN;
		break;
1000b0d6:	e1aa      	b.n	1000b42e <system_peripheral_reset+0x452>

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b0d8:	4ba4      	ldr	r3, [pc, #656]	; (1000b36c <system_peripheral_reset+0x390>)
1000b0da:	6859      	ldr	r1, [r3, #4]
1000b0dc:	4aa8      	ldr	r2, [pc, #672]	; (1000b380 <system_peripheral_reset+0x3a4>)
1000b0de:	400a      	ands	r2, r1
1000b0e0:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b0e2:	685a      	ldr	r2, [r3, #4]
1000b0e4:	2180      	movs	r1, #128	; 0x80
1000b0e6:	0149      	lsls	r1, r1, #5
1000b0e8:	430a      	orrs	r2, r1
1000b0ea:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b0ec:	2000      	movs	r0, #0
		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_CORE_RSTN;
		break;
1000b0ee:	e19e      	b.n	1000b42e <system_peripheral_reset+0x452>

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b0f0:	4b9e      	ldr	r3, [pc, #632]	; (1000b36c <system_peripheral_reset+0x390>)
1000b0f2:	6859      	ldr	r1, [r3, #4]
1000b0f4:	4aa3      	ldr	r2, [pc, #652]	; (1000b384 <system_peripheral_reset+0x3a8>)
1000b0f6:	400a      	ands	r2, r1
1000b0f8:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b0fa:	685a      	ldr	r2, [r3, #4]
1000b0fc:	2180      	movs	r1, #128	; 0x80
1000b0fe:	0189      	lsls	r1, r1, #6
1000b100:	430a      	orrs	r2, r1
1000b102:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b104:	2000      	movs	r0, #0
		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_IF_RSTN;
		break;
1000b106:	e192      	b.n	1000b42e <system_peripheral_reset+0x452>

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b108:	4b98      	ldr	r3, [pc, #608]	; (1000b36c <system_peripheral_reset+0x390>)
1000b10a:	6859      	ldr	r1, [r3, #4]
1000b10c:	4a9e      	ldr	r2, [pc, #632]	; (1000b388 <system_peripheral_reset+0x3ac>)
1000b10e:	400a      	ands	r2, r1
1000b110:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b112:	685a      	ldr	r2, [r3, #4]
1000b114:	2180      	movs	r1, #128	; 0x80
1000b116:	01c9      	lsls	r1, r1, #7
1000b118:	430a      	orrs	r2, r1
1000b11a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b11c:	2000      	movs	r0, #0
		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_CORE_RSTN;
		break;
1000b11e:	e186      	b.n	1000b42e <system_peripheral_reset+0x452>

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b120:	4b92      	ldr	r3, [pc, #584]	; (1000b36c <system_peripheral_reset+0x390>)
1000b122:	6859      	ldr	r1, [r3, #4]
1000b124:	4a99      	ldr	r2, [pc, #612]	; (1000b38c <system_peripheral_reset+0x3b0>)
1000b126:	400a      	ands	r2, r1
1000b128:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b12a:	685a      	ldr	r2, [r3, #4]
1000b12c:	2180      	movs	r1, #128	; 0x80
1000b12e:	0209      	lsls	r1, r1, #8
1000b130:	430a      	orrs	r2, r1
1000b132:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b134:	2000      	movs	r0, #0
		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_IF_RSTN;
		break;
1000b136:	e17a      	b.n	1000b42e <system_peripheral_reset+0x452>

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b138:	4b8c      	ldr	r3, [pc, #560]	; (1000b36c <system_peripheral_reset+0x390>)
1000b13a:	6859      	ldr	r1, [r3, #4]
1000b13c:	4a94      	ldr	r2, [pc, #592]	; (1000b390 <system_peripheral_reset+0x3b4>)
1000b13e:	400a      	ands	r2, r1
1000b140:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b142:	685a      	ldr	r2, [r3, #4]
1000b144:	2180      	movs	r1, #128	; 0x80
1000b146:	0249      	lsls	r1, r1, #9
1000b148:	430a      	orrs	r2, r1
1000b14a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b14c:	2000      	movs	r0, #0
		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT0_RSTN;
		break;
1000b14e:	e16e      	b.n	1000b42e <system_peripheral_reset+0x452>

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b150:	4b86      	ldr	r3, [pc, #536]	; (1000b36c <system_peripheral_reset+0x390>)
1000b152:	6859      	ldr	r1, [r3, #4]
1000b154:	4a8f      	ldr	r2, [pc, #572]	; (1000b394 <system_peripheral_reset+0x3b8>)
1000b156:	400a      	ands	r2, r1
1000b158:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b15a:	685a      	ldr	r2, [r3, #4]
1000b15c:	2180      	movs	r1, #128	; 0x80
1000b15e:	0289      	lsls	r1, r1, #10
1000b160:	430a      	orrs	r2, r1
1000b162:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b164:	2000      	movs	r0, #0
		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT1_RSTN;
		break;
1000b166:	e162      	b.n	1000b42e <system_peripheral_reset+0x452>

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b168:	4b80      	ldr	r3, [pc, #512]	; (1000b36c <system_peripheral_reset+0x390>)
1000b16a:	6859      	ldr	r1, [r3, #4]
1000b16c:	4a8a      	ldr	r2, [pc, #552]	; (1000b398 <system_peripheral_reset+0x3bc>)
1000b16e:	400a      	ands	r2, r1
1000b170:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b172:	685a      	ldr	r2, [r3, #4]
1000b174:	2180      	movs	r1, #128	; 0x80
1000b176:	02c9      	lsls	r1, r1, #11
1000b178:	430a      	orrs	r2, r1
1000b17a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b17c:	2000      	movs	r0, #0
		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
		break;
1000b17e:	e156      	b.n	1000b42e <system_peripheral_reset+0x452>

		case PERIPHERAL_MBIST:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b180:	4b7a      	ldr	r3, [pc, #488]	; (1000b36c <system_peripheral_reset+0x390>)
1000b182:	6859      	ldr	r1, [r3, #4]
1000b184:	4a85      	ldr	r2, [pc, #532]	; (1000b39c <system_peripheral_reset+0x3c0>)
1000b186:	400a      	ands	r2, r1
1000b188:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b18a:	685a      	ldr	r2, [r3, #4]
1000b18c:	2180      	movs	r1, #128	; 0x80
1000b18e:	0309      	lsls	r1, r1, #12
1000b190:	430a      	orrs	r2, r1
1000b192:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b194:	2000      	movs	r0, #0
		case PERIPHERAL_MBIST:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
		break;
1000b196:	e14a      	b.n	1000b42e <system_peripheral_reset+0x452>

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b198:	4b74      	ldr	r3, [pc, #464]	; (1000b36c <system_peripheral_reset+0x390>)
1000b19a:	6859      	ldr	r1, [r3, #4]
1000b19c:	4a80      	ldr	r2, [pc, #512]	; (1000b3a0 <system_peripheral_reset+0x3c4>)
1000b19e:	400a      	ands	r2, r1
1000b1a0:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b1a2:	685a      	ldr	r2, [r3, #4]
1000b1a4:	2180      	movs	r1, #128	; 0x80
1000b1a6:	0349      	lsls	r1, r1, #13
1000b1a8:	430a      	orrs	r2, r1
1000b1aa:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b1ac:	2000      	movs	r0, #0
		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
		break;
1000b1ae:	e13e      	b.n	1000b42e <system_peripheral_reset+0x452>

		case PERIPHERAL_LOW_POWER_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b1b0:	4b6e      	ldr	r3, [pc, #440]	; (1000b36c <system_peripheral_reset+0x390>)
1000b1b2:	6859      	ldr	r1, [r3, #4]
1000b1b4:	4a7b      	ldr	r2, [pc, #492]	; (1000b3a4 <system_peripheral_reset+0x3c8>)
1000b1b6:	400a      	ands	r2, r1
1000b1b8:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b1ba:	685a      	ldr	r2, [r3, #4]
1000b1bc:	2180      	movs	r1, #128	; 0x80
1000b1be:	0389      	lsls	r1, r1, #14
1000b1c0:	430a      	orrs	r2, r1
1000b1c2:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b1c4:	2000      	movs	r0, #0
		case PERIPHERAL_LOW_POWER_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
		break;
1000b1c6:	e132      	b.n	1000b42e <system_peripheral_reset+0x452>

		case PERIPHERAL_LPMCU_DEBUG:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b1c8:	4b68      	ldr	r3, [pc, #416]	; (1000b36c <system_peripheral_reset+0x390>)
1000b1ca:	6859      	ldr	r1, [r3, #4]
1000b1cc:	4a76      	ldr	r2, [pc, #472]	; (1000b3a8 <system_peripheral_reset+0x3cc>)
1000b1ce:	400a      	ands	r2, r1
1000b1d0:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b1d2:	685a      	ldr	r2, [r3, #4]
1000b1d4:	2180      	movs	r1, #128	; 0x80
1000b1d6:	03c9      	lsls	r1, r1, #15
1000b1d8:	430a      	orrs	r2, r1
1000b1da:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b1dc:	2000      	movs	r0, #0
		case PERIPHERAL_LPMCU_DEBUG:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
		break;
1000b1de:	e126      	b.n	1000b42e <system_peripheral_reset+0x452>

		case PERIPHERAL_ARM_FREE_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b1e0:	4b62      	ldr	r3, [pc, #392]	; (1000b36c <system_peripheral_reset+0x390>)
1000b1e2:	6859      	ldr	r1, [r3, #4]
1000b1e4:	4a71      	ldr	r2, [pc, #452]	; (1000b3ac <system_peripheral_reset+0x3d0>)
1000b1e6:	400a      	ands	r2, r1
1000b1e8:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b1ea:	685a      	ldr	r2, [r3, #4]
1000b1ec:	2180      	movs	r1, #128	; 0x80
1000b1ee:	0409      	lsls	r1, r1, #16
1000b1f0:	430a      	orrs	r2, r1
1000b1f2:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b1f4:	2000      	movs	r0, #0
		case PERIPHERAL_ARM_FREE_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
		break;
1000b1f6:	e11a      	b.n	1000b42e <system_peripheral_reset+0x452>

		case PERIPHERAL_ARM_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b1f8:	4b5c      	ldr	r3, [pc, #368]	; (1000b36c <system_peripheral_reset+0x390>)
1000b1fa:	6859      	ldr	r1, [r3, #4]
1000b1fc:	4a6c      	ldr	r2, [pc, #432]	; (1000b3b0 <system_peripheral_reset+0x3d4>)
1000b1fe:	400a      	ands	r2, r1
1000b200:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b202:	685a      	ldr	r2, [r3, #4]
1000b204:	2180      	movs	r1, #128	; 0x80
1000b206:	0449      	lsls	r1, r1, #17
1000b208:	430a      	orrs	r2, r1
1000b20a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b20c:	2000      	movs	r0, #0
		case PERIPHERAL_ARM_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
		break;
1000b20e:	e10e      	b.n	1000b42e <system_peripheral_reset+0x452>

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b210:	4b56      	ldr	r3, [pc, #344]	; (1000b36c <system_peripheral_reset+0x390>)
1000b212:	6859      	ldr	r1, [r3, #4]
1000b214:	4a67      	ldr	r2, [pc, #412]	; (1000b3b4 <system_peripheral_reset+0x3d8>)
1000b216:	400a      	ands	r2, r1
1000b218:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b21a:	685a      	ldr	r2, [r3, #4]
1000b21c:	2180      	movs	r1, #128	; 0x80
1000b21e:	0489      	lsls	r1, r1, #18
1000b220:	430a      	orrs	r2, r1
1000b222:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b224:	2000      	movs	r0, #0
		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC0_RSTN;
		break;
1000b226:	e102      	b.n	1000b42e <system_peripheral_reset+0x452>

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b228:	4b50      	ldr	r3, [pc, #320]	; (1000b36c <system_peripheral_reset+0x390>)
1000b22a:	6859      	ldr	r1, [r3, #4]
1000b22c:	4a62      	ldr	r2, [pc, #392]	; (1000b3b8 <system_peripheral_reset+0x3dc>)
1000b22e:	400a      	ands	r2, r1
1000b230:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b232:	685a      	ldr	r2, [r3, #4]
1000b234:	2180      	movs	r1, #128	; 0x80
1000b236:	04c9      	lsls	r1, r1, #19
1000b238:	430a      	orrs	r2, r1
1000b23a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b23c:	2000      	movs	r0, #0
		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC1_RSTN;
		break;
1000b23e:	e0f6      	b.n	1000b42e <system_peripheral_reset+0x452>

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b240:	4b4a      	ldr	r3, [pc, #296]	; (1000b36c <system_peripheral_reset+0x390>)
1000b242:	6859      	ldr	r1, [r3, #4]
1000b244:	4a5d      	ldr	r2, [pc, #372]	; (1000b3bc <system_peripheral_reset+0x3e0>)
1000b246:	400a      	ands	r2, r1
1000b248:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b24a:	685a      	ldr	r2, [r3, #4]
1000b24c:	2180      	movs	r1, #128	; 0x80
1000b24e:	0509      	lsls	r1, r1, #20
1000b250:	430a      	orrs	r2, r1
1000b252:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b254:	2000      	movs	r0, #0
		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC2_RSTN;
		break;
1000b256:	e0ea      	b.n	1000b42e <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b258:	4b44      	ldr	r3, [pc, #272]	; (1000b36c <system_peripheral_reset+0x390>)
1000b25a:	6859      	ldr	r1, [r3, #4]
1000b25c:	4a58      	ldr	r2, [pc, #352]	; (1000b3c0 <system_peripheral_reset+0x3e4>)
1000b25e:	400a      	ands	r2, r1
1000b260:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b262:	685a      	ldr	r2, [r3, #4]
1000b264:	2180      	movs	r1, #128	; 0x80
1000b266:	0549      	lsls	r1, r1, #21
1000b268:	430a      	orrs	r2, r1
1000b26a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b26c:	2000      	movs	r0, #0
		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM0_RSTN;
		break;
1000b26e:	e0de      	b.n	1000b42e <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b270:	4b3e      	ldr	r3, [pc, #248]	; (1000b36c <system_peripheral_reset+0x390>)
1000b272:	6859      	ldr	r1, [r3, #4]
1000b274:	4a53      	ldr	r2, [pc, #332]	; (1000b3c4 <system_peripheral_reset+0x3e8>)
1000b276:	400a      	ands	r2, r1
1000b278:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b27a:	685a      	ldr	r2, [r3, #4]
1000b27c:	2180      	movs	r1, #128	; 0x80
1000b27e:	0589      	lsls	r1, r1, #22
1000b280:	430a      	orrs	r2, r1
1000b282:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b284:	2000      	movs	r0, #0
		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM1_RSTN;
		break;
1000b286:	e0d2      	b.n	1000b42e <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b288:	4b38      	ldr	r3, [pc, #224]	; (1000b36c <system_peripheral_reset+0x390>)
1000b28a:	6859      	ldr	r1, [r3, #4]
1000b28c:	4a4e      	ldr	r2, [pc, #312]	; (1000b3c8 <system_peripheral_reset+0x3ec>)
1000b28e:	400a      	ands	r2, r1
1000b290:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b292:	685a      	ldr	r2, [r3, #4]
1000b294:	2180      	movs	r1, #128	; 0x80
1000b296:	05c9      	lsls	r1, r1, #23
1000b298:	430a      	orrs	r2, r1
1000b29a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b29c:	2000      	movs	r0, #0
		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM2_RSTN;
		break;
1000b29e:	e0c6      	b.n	1000b42e <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b2a0:	4a32      	ldr	r2, [pc, #200]	; (1000b36c <system_peripheral_reset+0x390>)
1000b2a2:	6853      	ldr	r3, [r2, #4]
1000b2a4:	005b      	lsls	r3, r3, #1
1000b2a6:	085b      	lsrs	r3, r3, #1
1000b2a8:	6053      	str	r3, [r2, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM3_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b2aa:	6853      	ldr	r3, [r2, #4]
1000b2ac:	2180      	movs	r1, #128	; 0x80
1000b2ae:	0609      	lsls	r1, r1, #24
1000b2b0:	430b      	orrs	r3, r1
1000b2b2:	6053      	str	r3, [r2, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b2b4:	2000      	movs	r0, #0
		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM3_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM3_RSTN;
		break;
1000b2b6:	e0ba      	b.n	1000b42e <system_peripheral_reset+0x452>

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000b2b8:	4b2c      	ldr	r3, [pc, #176]	; (1000b36c <system_peripheral_reset+0x390>)
1000b2ba:	891a      	ldrh	r2, [r3, #8]
1000b2bc:	2101      	movs	r1, #1
1000b2be:	438a      	bics	r2, r1
1000b2c0:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000b2c2:	8919      	ldrh	r1, [r3, #8]
1000b2c4:	2201      	movs	r2, #1
1000b2c6:	430a      	orrs	r2, r1
1000b2c8:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b2ca:	2000      	movs	r0, #0
		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER0_RSTN;
		break;
1000b2cc:	e0af      	b.n	1000b42e <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000b2ce:	4b27      	ldr	r3, [pc, #156]	; (1000b36c <system_peripheral_reset+0x390>)
1000b2d0:	891a      	ldrh	r2, [r3, #8]
1000b2d2:	2102      	movs	r1, #2
1000b2d4:	438a      	bics	r2, r1
1000b2d6:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000b2d8:	8919      	ldrh	r1, [r3, #8]
1000b2da:	2202      	movs	r2, #2
1000b2dc:	430a      	orrs	r2, r1
1000b2de:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b2e0:	2000      	movs	r0, #0
		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_CORE_RSTN;
		break;
1000b2e2:	e0a4      	b.n	1000b42e <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000b2e4:	4b21      	ldr	r3, [pc, #132]	; (1000b36c <system_peripheral_reset+0x390>)
1000b2e6:	891a      	ldrh	r2, [r3, #8]
1000b2e8:	2104      	movs	r1, #4
1000b2ea:	438a      	bics	r2, r1
1000b2ec:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000b2ee:	8919      	ldrh	r1, [r3, #8]
1000b2f0:	2204      	movs	r2, #4
1000b2f2:	430a      	orrs	r2, r1
1000b2f4:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b2f6:	2000      	movs	r0, #0
		case PERIPHERAL_I2C1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_IF_RSTN;
		break;
1000b2f8:	e099      	b.n	1000b42e <system_peripheral_reset+0x452>

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000b2fa:	4b1c      	ldr	r3, [pc, #112]	; (1000b36c <system_peripheral_reset+0x390>)
1000b2fc:	891a      	ldrh	r2, [r3, #8]
1000b2fe:	2108      	movs	r1, #8
1000b300:	438a      	bics	r2, r1
1000b302:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000b304:	8919      	ldrh	r1, [r3, #8]
1000b306:	2208      	movs	r2, #8
1000b308:	430a      	orrs	r2, r1
1000b30a:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b30c:	2000      	movs	r0, #0
		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
		break;
1000b30e:	e08e      	b.n	1000b42e <system_peripheral_reset+0x452>

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000b310:	4b16      	ldr	r3, [pc, #88]	; (1000b36c <system_peripheral_reset+0x390>)
1000b312:	891a      	ldrh	r2, [r3, #8]
1000b314:	2110      	movs	r1, #16
1000b316:	438a      	bics	r2, r1
1000b318:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000b31a:	8919      	ldrh	r1, [r3, #8]
1000b31c:	2210      	movs	r2, #16
1000b31e:	430a      	orrs	r2, r1
1000b320:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b322:	2000      	movs	r0, #0
		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
		break;
1000b324:	e083      	b.n	1000b42e <system_peripheral_reset+0x452>

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000b326:	4b11      	ldr	r3, [pc, #68]	; (1000b36c <system_peripheral_reset+0x390>)
1000b328:	891a      	ldrh	r2, [r3, #8]
1000b32a:	2120      	movs	r1, #32
1000b32c:	438a      	bics	r2, r1
1000b32e:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000b330:	8919      	ldrh	r1, [r3, #8]
1000b332:	2220      	movs	r2, #32
1000b334:	430a      	orrs	r2, r1
1000b336:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b338:	2000      	movs	r0, #0
		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
		break;
1000b33a:	e078      	b.n	1000b42e <system_peripheral_reset+0x452>

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000b33c:	4b0b      	ldr	r3, [pc, #44]	; (1000b36c <system_peripheral_reset+0x390>)
1000b33e:	891a      	ldrh	r2, [r3, #8]
1000b340:	2140      	movs	r1, #64	; 0x40
1000b342:	438a      	bics	r2, r1
1000b344:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000b346:	8919      	ldrh	r1, [r3, #8]
1000b348:	2240      	movs	r2, #64	; 0x40
1000b34a:	430a      	orrs	r2, r1
1000b34c:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b34e:	2000      	movs	r0, #0
		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
		break;
1000b350:	e06d      	b.n	1000b42e <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000b352:	4b06      	ldr	r3, [pc, #24]	; (1000b36c <system_peripheral_reset+0x390>)
1000b354:	891a      	ldrh	r2, [r3, #8]
1000b356:	2180      	movs	r1, #128	; 0x80
1000b358:	438a      	bics	r2, r1
1000b35a:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000b35c:	8919      	ldrh	r1, [r3, #8]
1000b35e:	2280      	movs	r2, #128	; 0x80
1000b360:	430a      	orrs	r2, r1
1000b362:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b364:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_CLK_RSTN;
		break;
1000b366:	e062      	b.n	1000b42e <system_peripheral_reset+0x452>
1000b368:	100172d4 	.word	0x100172d4
1000b36c:	4000b000 	.word	0x4000b000
1000b370:	fffffeff 	.word	0xfffffeff
1000b374:	fffffdff 	.word	0xfffffdff
1000b378:	fffffbff 	.word	0xfffffbff
1000b37c:	fffff7ff 	.word	0xfffff7ff
1000b380:	ffffefff 	.word	0xffffefff
1000b384:	ffffdfff 	.word	0xffffdfff
1000b388:	ffffbfff 	.word	0xffffbfff
1000b38c:	ffff7fff 	.word	0xffff7fff
1000b390:	fffeffff 	.word	0xfffeffff
1000b394:	fffdffff 	.word	0xfffdffff
1000b398:	fffbffff 	.word	0xfffbffff
1000b39c:	fff7ffff 	.word	0xfff7ffff
1000b3a0:	ffefffff 	.word	0xffefffff
1000b3a4:	ffdfffff 	.word	0xffdfffff
1000b3a8:	ffbfffff 	.word	0xffbfffff
1000b3ac:	ff7fffff 	.word	0xff7fffff
1000b3b0:	feffffff 	.word	0xfeffffff
1000b3b4:	fdffffff 	.word	0xfdffffff
1000b3b8:	fbffffff 	.word	0xfbffffff
1000b3bc:	f7ffffff 	.word	0xf7ffffff
1000b3c0:	efffffff 	.word	0xefffffff
1000b3c4:	dfffffff 	.word	0xdfffffff
1000b3c8:	bfffffff 	.word	0xbfffffff

		case PERIPHERAL_SPI1_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000b3cc:	4b18      	ldr	r3, [pc, #96]	; (1000b430 <system_peripheral_reset+0x454>)
1000b3ce:	8919      	ldrh	r1, [r3, #8]
1000b3d0:	4a18      	ldr	r2, [pc, #96]	; (1000b434 <system_peripheral_reset+0x458>)
1000b3d2:	400a      	ands	r2, r1
1000b3d4:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000b3d6:	8919      	ldrh	r1, [r3, #8]
1000b3d8:	2280      	movs	r2, #128	; 0x80
1000b3da:	0052      	lsls	r2, r2, #1
1000b3dc:	430a      	orrs	r2, r1
1000b3de:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b3e0:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_CLK_RSTN;
		break;
1000b3e2:	e024      	b.n	1000b42e <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000b3e4:	4b12      	ldr	r3, [pc, #72]	; (1000b430 <system_peripheral_reset+0x454>)
1000b3e6:	8919      	ldrh	r1, [r3, #8]
1000b3e8:	4a13      	ldr	r2, [pc, #76]	; (1000b438 <system_peripheral_reset+0x45c>)
1000b3ea:	400a      	ands	r2, r1
1000b3ec:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000b3ee:	8919      	ldrh	r1, [r3, #8]
1000b3f0:	2280      	movs	r2, #128	; 0x80
1000b3f2:	0092      	lsls	r2, r2, #2
1000b3f4:	430a      	orrs	r2, r1
1000b3f6:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b3f8:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_PHASE_INT_CLK_RSTN;
		break;
1000b3fa:	e018      	b.n	1000b42e <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000b3fc:	4b0c      	ldr	r3, [pc, #48]	; (1000b430 <system_peripheral_reset+0x454>)
1000b3fe:	8919      	ldrh	r1, [r3, #8]
1000b400:	4a0e      	ldr	r2, [pc, #56]	; (1000b43c <system_peripheral_reset+0x460>)
1000b402:	400a      	ands	r2, r1
1000b404:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000b406:	8919      	ldrh	r1, [r3, #8]
1000b408:	2280      	movs	r2, #128	; 0x80
1000b40a:	00d2      	lsls	r2, r2, #3
1000b40c:	430a      	orrs	r2, r1
1000b40e:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b410:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_PHASE_INT_CLK_RSTN;
		break;
1000b412:	e00c      	b.n	1000b42e <system_peripheral_reset+0x452>

		case PERIPHERAL_DMA:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000b414:	4b06      	ldr	r3, [pc, #24]	; (1000b430 <system_peripheral_reset+0x454>)
1000b416:	8919      	ldrh	r1, [r3, #8]
1000b418:	4a09      	ldr	r2, [pc, #36]	; (1000b440 <system_peripheral_reset+0x464>)
1000b41a:	400a      	ands	r2, r1
1000b41c:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_PROV_DMA_CTRL0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000b41e:	8919      	ldrh	r1, [r3, #8]
1000b420:	2280      	movs	r2, #128	; 0x80
1000b422:	0112      	lsls	r2, r2, #4
1000b424:	430a      	orrs	r2, r1
1000b426:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b428:	2000      	movs	r0, #0
		case PERIPHERAL_DMA:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_PROV_DMA_CTRL0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_PROV_DMA_CTRL0_RSTN;
		break;
1000b42a:	e000      	b.n	1000b42e <system_peripheral_reset+0x452>

		default:
			return STATUS_ERR_INVALID_ARG;
1000b42c:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
1000b42e:	bd00      	pop	{pc}
1000b430:	4000b000 	.word	0x4000b000
1000b434:	fffffeff 	.word	0xfffffeff
1000b438:	fffffdff 	.word	0xfffffdff
1000b43c:	fffffbff 	.word	0xfffffbff
1000b440:	fffff7ff 	.word	0xfffff7ff

1000b444 <system_register_isr>:
void system_register_isr(enum ram_isr_table_index isr_index,
		uint32_t isr_address)
{
	uint32_t *temp;
	temp = (uint32_t *)(isr_index * 4 + ISR_RAM_MAP_START_ADDRESS);
	*temp = isr_address;
1000b444:	2380      	movs	r3, #128	; 0x80
1000b446:	04db      	lsls	r3, r3, #19
1000b448:	469c      	mov	ip, r3
1000b44a:	4460      	add	r0, ip
1000b44c:	0080      	lsls	r0, r0, #2
1000b44e:	6001      	str	r1, [r0, #0]
}
1000b450:	4770      	bx	lr
1000b452:	46c0      	nop			; (mov r8, r8)

1000b454 <uart_rx0_isr_handler>:
	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
}

static void uart_rx0_isr_handler(void)
{
1000b454:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[0];
1000b456:	4b20      	ldr	r3, [pc, #128]	; (1000b4d8 <uart_rx0_isr_handler+0x84>)
1000b458:	681c      	ldr	r4, [r3, #0]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->RECEIVE_STATUS.reg;
1000b45a:	6823      	ldr	r3, [r4, #0]
1000b45c:	7d1d      	ldrb	r5, [r3, #20]
1000b45e:	b2ed      	uxtb	r5, r5
	if (flags & UART_RECEIVE_STATUS_FIFO_OVERRUN) {
1000b460:	066a      	lsls	r2, r5, #25
1000b462:	d513      	bpl.n	1000b48c <uart_rx0_isr_handler+0x38>
		/* Store the error code */
		module->status = STATUS_ERR_OVERFLOW;
1000b464:	211e      	movs	r1, #30
1000b466:	2222      	movs	r2, #34	; 0x22
1000b468:	54a1      	strb	r1, [r4, r2]
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
1000b46a:	7e1a      	ldrb	r2, [r3, #24]
1000b46c:	3123      	adds	r1, #35	; 0x23
1000b46e:	438a      	bics	r2, r1
1000b470:	761a      	strb	r2, [r3, #24]
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
1000b472:	2321      	movs	r3, #33	; 0x21
1000b474:	5ce3      	ldrb	r3, [r4, r3]
1000b476:	071b      	lsls	r3, r3, #28
1000b478:	d506      	bpl.n	1000b488 <uart_rx0_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
1000b47a:	2320      	movs	r3, #32
		module->status = STATUS_ERR_OVERFLOW;
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
1000b47c:	5ce3      	ldrb	r3, [r4, r3]
1000b47e:	071b      	lsls	r3, r3, #28
1000b480:	d502      	bpl.n	1000b488 <uart_rx0_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
			(module->callback[UART_RX_FIFO_OVERRUN])(module);
1000b482:	0020      	movs	r0, r4
1000b484:	6923      	ldr	r3, [r4, #16]
1000b486:	4798      	blx	r3
		}
		/* Flush */
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
1000b488:	6823      	ldr	r3, [r4, #0]
1000b48a:	7c1b      	ldrb	r3, [r3, #16]
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1000b48c:	07eb      	lsls	r3, r5, #31
1000b48e:	d522      	bpl.n	1000b4d6 <uart_rx0_isr_handler+0x82>
		struct uart_module *const module)
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	uint16_t received_data = (uart_hw->RECEIVE_DATA.reg & UART_RECEIVE_DATA_MASK);
1000b490:	6823      	ldr	r3, [r4, #0]
1000b492:	7c1b      	ldrb	r3, [r3, #16]
1000b494:	b2db      	uxtb	r3, r3

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
1000b496:	6962      	ldr	r2, [r4, #20]
1000b498:	7013      	strb	r3, [r2, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
1000b49a:	6963      	ldr	r3, [r4, #20]
1000b49c:	3301      	adds	r3, #1
1000b49e:	6163      	str	r3, [r4, #20]

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
1000b4a0:	8ba3      	ldrh	r3, [r4, #28]
1000b4a2:	3b01      	subs	r3, #1
1000b4a4:	b29b      	uxth	r3, r3
1000b4a6:	83a3      	strh	r3, [r4, #28]
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
1000b4a8:	8ba3      	ldrh	r3, [r4, #28]
1000b4aa:	b29b      	uxth	r3, r3
1000b4ac:	2b00      	cmp	r3, #0
1000b4ae:	d112      	bne.n	1000b4d6 <uart_rx0_isr_handler+0x82>
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
1000b4b0:	3321      	adds	r3, #33	; 0x21
1000b4b2:	5ce3      	ldrb	r3, [r4, r3]
1000b4b4:	075b      	lsls	r3, r3, #29
1000b4b6:	d50e      	bpl.n	1000b4d6 <uart_rx0_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
1000b4b8:	2320      	movs	r3, #32
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
1000b4ba:	5ce3      	ldrb	r3, [r4, r3]
1000b4bc:	075b      	lsls	r3, r3, #29
1000b4be:	d50a      	bpl.n	1000b4d6 <uart_rx0_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
				module->status = STATUS_OK;
1000b4c0:	2200      	movs	r2, #0
1000b4c2:	2322      	movs	r3, #34	; 0x22
1000b4c4:	54e2      	strb	r2, [r4, r3]
				module->hw->RX_INTERRUPT_MASK.reg &=
1000b4c6:	6822      	ldr	r2, [r4, #0]
1000b4c8:	7e13      	ldrb	r3, [r2, #24]
1000b4ca:	2101      	movs	r1, #1
1000b4cc:	438b      	bics	r3, r1
1000b4ce:	7613      	strb	r3, [r2, #24]
					~(UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
				(module->callback[UART_RX_COMPLETE])(module);
1000b4d0:	68e3      	ldr	r3, [r4, #12]
1000b4d2:	0020      	movs	r0, r4
1000b4d4:	4798      	blx	r3
			}
		}
	}
}
1000b4d6:	bd70      	pop	{r4, r5, r6, pc}
1000b4d8:	10019d24 	.word	0x10019d24

1000b4dc <uart_tx0_isr_handler>:

static void uart_tx0_isr_handler(void)
{
1000b4dc:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[0];
1000b4de:	4b21      	ldr	r3, [pc, #132]	; (1000b564 <uart_tx0_isr_handler+0x88>)
1000b4e0:	681c      	ldr	r4, [r3, #0]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
1000b4e2:	6823      	ldr	r3, [r4, #0]
1000b4e4:	791d      	ldrb	r5, [r3, #4]
1000b4e6:	b2ed      	uxtb	r5, r5
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
1000b4e8:	07ea      	lsls	r2, r5, #31
1000b4ea:	d517      	bpl.n	1000b51c <uart_tx0_isr_handler+0x40>
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	/* Write value will be at least 8-bits long */
	uint8_t data_to_send = *(module->tx_buffer_ptr);
1000b4ec:	69a2      	ldr	r2, [r4, #24]
1000b4ee:	7811      	ldrb	r1, [r2, #0]
1000b4f0:	b2c9      	uxtb	r1, r1
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
1000b4f2:	3201      	adds	r2, #1
1000b4f4:	61a2      	str	r2, [r4, #24]

	/* Write the data to send*/
	uart_hw->TRANSMIT_DATA.reg = data_to_send & UART_TRANSMIT_DATA_MASK;
1000b4f6:	7019      	strb	r1, [r3, #0]

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
1000b4f8:	8be3      	ldrh	r3, [r4, #30]
1000b4fa:	3b01      	subs	r3, #1
1000b4fc:	b29b      	uxth	r3, r3
1000b4fe:	83e3      	strh	r3, [r4, #30]
	struct uart_module *module = _uart_instances[0];
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
		_uart_write(module);
		if (module->remaining_tx_buffer_length == 0) {
1000b500:	8be3      	ldrh	r3, [r4, #30]
1000b502:	b29b      	uxth	r3, r3
1000b504:	2b00      	cmp	r3, #0
1000b506:	d109      	bne.n	1000b51c <uart_tx0_isr_handler+0x40>
			module->hw->TX_INTERRUPT_MASK.reg &=
1000b508:	6822      	ldr	r2, [r4, #0]
1000b50a:	7a13      	ldrb	r3, [r2, #8]
1000b50c:	2101      	movs	r1, #1
1000b50e:	438b      	bics	r3, r1
1000b510:	7213      	strb	r3, [r2, #8]
					~UART_TX_INTERRUPT_MASK_TX_FIFO_NOT_FULL_MASK;
			module->hw->TX_INTERRUPT_MASK.reg |=
1000b512:	6822      	ldr	r2, [r4, #0]
1000b514:	7a11      	ldrb	r1, [r2, #8]
1000b516:	2310      	movs	r3, #16
1000b518:	430b      	orrs	r3, r1
1000b51a:	7213      	strb	r3, [r2, #8]
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
1000b51c:	06eb      	lsls	r3, r5, #27
1000b51e:	d512      	bpl.n	1000b546 <uart_tx0_isr_handler+0x6a>
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
1000b520:	2321      	movs	r3, #33	; 0x21
1000b522:	5ce3      	ldrb	r3, [r4, r3]
1000b524:	07db      	lsls	r3, r3, #31
1000b526:	d50e      	bpl.n	1000b546 <uart_tx0_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
1000b528:	2320      	movs	r3, #32
			module->hw->TX_INTERRUPT_MASK.reg |=
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
1000b52a:	5ce3      	ldrb	r3, [r4, r3]
1000b52c:	07db      	lsls	r3, r3, #31
1000b52e:	d50a      	bpl.n	1000b546 <uart_tx0_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
			module->status = STATUS_OK;
1000b530:	2200      	movs	r2, #0
1000b532:	2322      	movs	r3, #34	; 0x22
1000b534:	54e2      	strb	r2, [r4, r3]
			/* Disable interrupt */
			module->hw->TX_INTERRUPT_MASK.reg &=
1000b536:	6822      	ldr	r2, [r4, #0]
1000b538:	7a13      	ldrb	r3, [r2, #8]
1000b53a:	2110      	movs	r1, #16
1000b53c:	438b      	bics	r3, r1
1000b53e:	7213      	strb	r3, [r2, #8]
				~UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
			(module->callback[UART_TX_COMPLETE])(module);
1000b540:	0020      	movs	r0, r4
1000b542:	6863      	ldr	r3, [r4, #4]
1000b544:	4798      	blx	r3
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
1000b546:	06ab      	lsls	r3, r5, #26
1000b548:	d50a      	bpl.n	1000b560 <uart_tx0_isr_handler+0x84>
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
1000b54a:	2321      	movs	r3, #33	; 0x21
1000b54c:	5ce3      	ldrb	r3, [r4, r3]
1000b54e:	079b      	lsls	r3, r3, #30
1000b550:	d506      	bpl.n	1000b560 <uart_tx0_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
1000b552:	2320      	movs	r3, #32
			(module->callback[UART_TX_COMPLETE])(module);
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
1000b554:	5ce3      	ldrb	r3, [r4, r3]
1000b556:	079b      	lsls	r3, r3, #30
1000b558:	d502      	bpl.n	1000b560 <uart_tx0_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
			(module->callback[UART_CTS_ACTIVE])(module);
1000b55a:	68a3      	ldr	r3, [r4, #8]
1000b55c:	0020      	movs	r0, r4
1000b55e:	4798      	blx	r3
		}

	}
}
1000b560:	bd70      	pop	{r4, r5, r6, pc}
1000b562:	46c0      	nop			; (mov r8, r8)
1000b564:	10019d24 	.word	0x10019d24

1000b568 <uart_rx1_isr_handler>:

static void uart_rx1_isr_handler(void)
{
1000b568:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[1];
1000b56a:	4b20      	ldr	r3, [pc, #128]	; (1000b5ec <uart_rx1_isr_handler+0x84>)
1000b56c:	685c      	ldr	r4, [r3, #4]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->RECEIVE_STATUS.reg;
1000b56e:	6823      	ldr	r3, [r4, #0]
1000b570:	7d1d      	ldrb	r5, [r3, #20]
1000b572:	b2ed      	uxtb	r5, r5
	if (flags & UART_RECEIVE_STATUS_FIFO_OVERRUN) {
1000b574:	066a      	lsls	r2, r5, #25
1000b576:	d513      	bpl.n	1000b5a0 <uart_rx1_isr_handler+0x38>
		/* Store the error code */
		module->status = STATUS_ERR_OVERFLOW;
1000b578:	211e      	movs	r1, #30
1000b57a:	2222      	movs	r2, #34	; 0x22
1000b57c:	54a1      	strb	r1, [r4, r2]
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
1000b57e:	7e1a      	ldrb	r2, [r3, #24]
1000b580:	3123      	adds	r1, #35	; 0x23
1000b582:	438a      	bics	r2, r1
1000b584:	761a      	strb	r2, [r3, #24]
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
1000b586:	2321      	movs	r3, #33	; 0x21
1000b588:	5ce3      	ldrb	r3, [r4, r3]
1000b58a:	071b      	lsls	r3, r3, #28
1000b58c:	d506      	bpl.n	1000b59c <uart_rx1_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
1000b58e:	2320      	movs	r3, #32
		module->status = STATUS_ERR_OVERFLOW;
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
1000b590:	5ce3      	ldrb	r3, [r4, r3]
1000b592:	071b      	lsls	r3, r3, #28
1000b594:	d502      	bpl.n	1000b59c <uart_rx1_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
			(module->callback[UART_RX_FIFO_OVERRUN])(module);
1000b596:	0020      	movs	r0, r4
1000b598:	6923      	ldr	r3, [r4, #16]
1000b59a:	4798      	blx	r3
		}
		/* Flush */
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
1000b59c:	6823      	ldr	r3, [r4, #0]
1000b59e:	7c1b      	ldrb	r3, [r3, #16]
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1000b5a0:	07eb      	lsls	r3, r5, #31
1000b5a2:	d522      	bpl.n	1000b5ea <uart_rx1_isr_handler+0x82>
		struct uart_module *const module)
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	uint16_t received_data = (uart_hw->RECEIVE_DATA.reg & UART_RECEIVE_DATA_MASK);
1000b5a4:	6823      	ldr	r3, [r4, #0]
1000b5a6:	7c1b      	ldrb	r3, [r3, #16]
1000b5a8:	b2db      	uxtb	r3, r3

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
1000b5aa:	6962      	ldr	r2, [r4, #20]
1000b5ac:	7013      	strb	r3, [r2, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
1000b5ae:	6963      	ldr	r3, [r4, #20]
1000b5b0:	3301      	adds	r3, #1
1000b5b2:	6163      	str	r3, [r4, #20]

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
1000b5b4:	8ba3      	ldrh	r3, [r4, #28]
1000b5b6:	3b01      	subs	r3, #1
1000b5b8:	b29b      	uxth	r3, r3
1000b5ba:	83a3      	strh	r3, [r4, #28]
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
1000b5bc:	8ba3      	ldrh	r3, [r4, #28]
1000b5be:	b29b      	uxth	r3, r3
1000b5c0:	2b00      	cmp	r3, #0
1000b5c2:	d112      	bne.n	1000b5ea <uart_rx1_isr_handler+0x82>
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
1000b5c4:	3321      	adds	r3, #33	; 0x21
1000b5c6:	5ce3      	ldrb	r3, [r4, r3]
1000b5c8:	075b      	lsls	r3, r3, #29
1000b5ca:	d50e      	bpl.n	1000b5ea <uart_rx1_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
1000b5cc:	2320      	movs	r3, #32
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
1000b5ce:	5ce3      	ldrb	r3, [r4, r3]
1000b5d0:	075b      	lsls	r3, r3, #29
1000b5d2:	d50a      	bpl.n	1000b5ea <uart_rx1_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
				module->status = STATUS_OK;
1000b5d4:	2200      	movs	r2, #0
1000b5d6:	2322      	movs	r3, #34	; 0x22
1000b5d8:	54e2      	strb	r2, [r4, r3]
				module->hw->RX_INTERRUPT_MASK.reg &=
1000b5da:	6822      	ldr	r2, [r4, #0]
1000b5dc:	7e13      	ldrb	r3, [r2, #24]
1000b5de:	2101      	movs	r1, #1
1000b5e0:	438b      	bics	r3, r1
1000b5e2:	7613      	strb	r3, [r2, #24]
					~(UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
				(module->callback[UART_RX_COMPLETE])(module);
1000b5e4:	68e3      	ldr	r3, [r4, #12]
1000b5e6:	0020      	movs	r0, r4
1000b5e8:	4798      	blx	r3
			}
		}
	}
}
1000b5ea:	bd70      	pop	{r4, r5, r6, pc}
1000b5ec:	10019d24 	.word	0x10019d24

1000b5f0 <uart_tx1_isr_handler>:

static void uart_tx1_isr_handler(void)
{
1000b5f0:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[1];
1000b5f2:	4b21      	ldr	r3, [pc, #132]	; (1000b678 <uart_tx1_isr_handler+0x88>)
1000b5f4:	685c      	ldr	r4, [r3, #4]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
1000b5f6:	6823      	ldr	r3, [r4, #0]
1000b5f8:	791d      	ldrb	r5, [r3, #4]
1000b5fa:	b2ed      	uxtb	r5, r5
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
1000b5fc:	07ea      	lsls	r2, r5, #31
1000b5fe:	d517      	bpl.n	1000b630 <uart_tx1_isr_handler+0x40>
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	/* Write value will be at least 8-bits long */
	uint8_t data_to_send = *(module->tx_buffer_ptr);
1000b600:	69a2      	ldr	r2, [r4, #24]
1000b602:	7811      	ldrb	r1, [r2, #0]
1000b604:	b2c9      	uxtb	r1, r1
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
1000b606:	3201      	adds	r2, #1
1000b608:	61a2      	str	r2, [r4, #24]

	/* Write the data to send*/
	uart_hw->TRANSMIT_DATA.reg = data_to_send & UART_TRANSMIT_DATA_MASK;
1000b60a:	7019      	strb	r1, [r3, #0]

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
1000b60c:	8be3      	ldrh	r3, [r4, #30]
1000b60e:	3b01      	subs	r3, #1
1000b610:	b29b      	uxth	r3, r3
1000b612:	83e3      	strh	r3, [r4, #30]
	struct uart_module *module = _uart_instances[1];
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
		_uart_write(module);
		if (module->remaining_tx_buffer_length == 0) {
1000b614:	8be3      	ldrh	r3, [r4, #30]
1000b616:	b29b      	uxth	r3, r3
1000b618:	2b00      	cmp	r3, #0
1000b61a:	d109      	bne.n	1000b630 <uart_tx1_isr_handler+0x40>
			module->hw->TX_INTERRUPT_MASK.reg &=
1000b61c:	6822      	ldr	r2, [r4, #0]
1000b61e:	7a13      	ldrb	r3, [r2, #8]
1000b620:	2101      	movs	r1, #1
1000b622:	438b      	bics	r3, r1
1000b624:	7213      	strb	r3, [r2, #8]
					~UART_TX_INTERRUPT_MASK_TX_FIFO_NOT_FULL_MASK;
			module->hw->TX_INTERRUPT_MASK.reg |=
1000b626:	6822      	ldr	r2, [r4, #0]
1000b628:	7a11      	ldrb	r1, [r2, #8]
1000b62a:	2310      	movs	r3, #16
1000b62c:	430b      	orrs	r3, r1
1000b62e:	7213      	strb	r3, [r2, #8]
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
1000b630:	06eb      	lsls	r3, r5, #27
1000b632:	d512      	bpl.n	1000b65a <uart_tx1_isr_handler+0x6a>
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
1000b634:	2321      	movs	r3, #33	; 0x21
1000b636:	5ce3      	ldrb	r3, [r4, r3]
1000b638:	07db      	lsls	r3, r3, #31
1000b63a:	d50e      	bpl.n	1000b65a <uart_tx1_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
1000b63c:	2320      	movs	r3, #32
			module->hw->TX_INTERRUPT_MASK.reg |=
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
1000b63e:	5ce3      	ldrb	r3, [r4, r3]
1000b640:	07db      	lsls	r3, r3, #31
1000b642:	d50a      	bpl.n	1000b65a <uart_tx1_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
			module->status = STATUS_OK;
1000b644:	2200      	movs	r2, #0
1000b646:	2322      	movs	r3, #34	; 0x22
1000b648:	54e2      	strb	r2, [r4, r3]
			/* Disable interrupt */
			module->hw->TX_INTERRUPT_MASK.reg &=
1000b64a:	6822      	ldr	r2, [r4, #0]
1000b64c:	7a13      	ldrb	r3, [r2, #8]
1000b64e:	2110      	movs	r1, #16
1000b650:	438b      	bics	r3, r1
1000b652:	7213      	strb	r3, [r2, #8]
				~UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
			(module->callback[UART_TX_COMPLETE])(module);
1000b654:	0020      	movs	r0, r4
1000b656:	6863      	ldr	r3, [r4, #4]
1000b658:	4798      	blx	r3
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
1000b65a:	06ab      	lsls	r3, r5, #26
1000b65c:	d50a      	bpl.n	1000b674 <uart_tx1_isr_handler+0x84>
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
1000b65e:	2321      	movs	r3, #33	; 0x21
1000b660:	5ce3      	ldrb	r3, [r4, r3]
1000b662:	079b      	lsls	r3, r3, #30
1000b664:	d506      	bpl.n	1000b674 <uart_tx1_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
1000b666:	2320      	movs	r3, #32
			(module->callback[UART_TX_COMPLETE])(module);
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
1000b668:	5ce3      	ldrb	r3, [r4, r3]
1000b66a:	079b      	lsls	r3, r3, #30
1000b66c:	d502      	bpl.n	1000b674 <uart_tx1_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
			(module->callback[UART_CTS_ACTIVE])(module);
1000b66e:	68a3      	ldr	r3, [r4, #8]
1000b670:	0020      	movs	r0, r4
1000b672:	4798      	blx	r3
		}

	}
}
1000b674:	bd70      	pop	{r4, r5, r6, pc}
1000b676:	46c0      	nop			; (mov r8, r8)
1000b678:	10019d24 	.word	0x10019d24

1000b67c <uart_get_config_defaults>:
 * \param[out] config  Pointer to configuration structure to be initiated
 */
void uart_get_config_defaults(
		struct uart_config *const config)
{
	config->baud_rate = 115200;
1000b67c:	23e1      	movs	r3, #225	; 0xe1
1000b67e:	025b      	lsls	r3, r3, #9
1000b680:	6003      	str	r3, [r0, #0]
	config->data_bits = UART_8_BITS;
1000b682:	2300      	movs	r3, #0
1000b684:	7103      	strb	r3, [r0, #4]
	config->stop_bits = UART_1_STOP_BIT;
1000b686:	7143      	strb	r3, [r0, #5]
	config->parity = UART_NO_PARITY;
1000b688:	7183      	strb	r3, [r0, #6]
	config->flow_control = false;
1000b68a:	71c3      	strb	r3, [r0, #7]

	config->pin_number_pad[0] = PIN_LP_GPIO_2;
1000b68c:	3302      	adds	r3, #2
1000b68e:	6083      	str	r3, [r0, #8]
	config->pin_number_pad[1] = PIN_LP_GPIO_3;
1000b690:	2203      	movs	r2, #3
1000b692:	60c2      	str	r2, [r0, #12]
	config->pin_number_pad[2] = PIN_LP_GPIO_4;
1000b694:	3201      	adds	r2, #1
1000b696:	6102      	str	r2, [r0, #16]
	config->pin_number_pad[3] = PIN_LP_GPIO_5;
1000b698:	3201      	adds	r2, #1
1000b69a:	6142      	str	r2, [r0, #20]

	config->pinmux_sel_pad[0] = MUX_LP_GPIO_2_UART0_RXD;
1000b69c:	6183      	str	r3, [r0, #24]
	config->pinmux_sel_pad[1] = MUX_LP_GPIO_3_UART0_TXD;
1000b69e:	61c3      	str	r3, [r0, #28]
	config->pinmux_sel_pad[2] = MUX_LP_GPIO_4_UART0_CTS;
1000b6a0:	6203      	str	r3, [r0, #32]
	config->pinmux_sel_pad[3] = MUX_LP_GPIO_5_UART0_RTS;
1000b6a2:	6243      	str	r3, [r0, #36]	; 0x24
}
1000b6a4:	4770      	bx	lr
1000b6a6:	46c0      	nop			; (mov r8, r8)

1000b6a8 <uart_init>:
 *
 * \retval STATUS_OK                       The initialization was successful
 */
enum status_code uart_init(struct uart_module *const module, Uart * const hw,
		const struct uart_config *const config)
{
1000b6a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000b6aa:	464f      	mov	r7, r9
1000b6ac:	4646      	mov	r6, r8
1000b6ae:	b4c0      	push	{r6, r7}
1000b6b0:	0005      	movs	r5, r0
1000b6b2:	0017      	movs	r7, r2

	uint8_t config_temp = 0;
	uint8_t i,index;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
1000b6b4:	6001      	str	r1, [r0, #0]

	for (i = 0; i < UART_CALLBACK_N; i++) {
		module->callback[i] = NULL;
1000b6b6:	2300      	movs	r3, #0
1000b6b8:	6043      	str	r3, [r0, #4]
1000b6ba:	6083      	str	r3, [r0, #8]
1000b6bc:	60c3      	str	r3, [r0, #12]
1000b6be:	6103      	str	r3, [r0, #16]
	}
	module->rx_buffer_ptr = NULL;
1000b6c0:	6143      	str	r3, [r0, #20]
	module->tx_buffer_ptr = NULL;
1000b6c2:	6183      	str	r3, [r0, #24]
	module->remaining_rx_buffer_length = 0;
1000b6c4:	2200      	movs	r2, #0
1000b6c6:	8383      	strh	r3, [r0, #28]
	module->remaining_tx_buffer_length = 0;
1000b6c8:	83c3      	strh	r3, [r0, #30]
	module->callback_reg_mask = 0;
1000b6ca:	3320      	adds	r3, #32
1000b6cc:	54c2      	strb	r2, [r0, r3]
	module->callback_enable_mask = 0;
1000b6ce:	3301      	adds	r3, #1
1000b6d0:	54c2      	strb	r2, [r0, r3]
	module->status = STATUS_OK;
1000b6d2:	3301      	adds	r3, #1
1000b6d4:	54c2      	strb	r2, [r0, r3]

	if (hw == UART0) {
1000b6d6:	4b55      	ldr	r3, [pc, #340]	; (1000b82c <uart_init+0x184>)
1000b6d8:	4299      	cmp	r1, r3
1000b6da:	d118      	bne.n	1000b70e <uart_init+0x66>
		system_peripheral_reset(PERIPHERAL_UART0_CORE);
1000b6dc:	2009      	movs	r0, #9
1000b6de:	4c54      	ldr	r4, [pc, #336]	; (1000b830 <uart_init+0x188>)
1000b6e0:	47a0      	blx	r4
		system_peripheral_reset(PERIPHERAL_UART0_IF);
1000b6e2:	200a      	movs	r0, #10
1000b6e4:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART0_CORE);
1000b6e6:	2009      	movs	r0, #9
1000b6e8:	4c52      	ldr	r4, [pc, #328]	; (1000b834 <uart_init+0x18c>)
1000b6ea:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART0_IF);
1000b6ec:	200a      	movs	r0, #10
1000b6ee:	47a0      	blx	r4
		_uart_instances[0] = module;
1000b6f0:	4b51      	ldr	r3, [pc, #324]	; (1000b838 <uart_init+0x190>)
1000b6f2:	601d      	str	r5, [r3, #0]
		system_register_isr(RAM_ISR_TABLE_UARTRX0_INDEX, (uint32_t)uart_rx0_isr_handler);
1000b6f4:	4951      	ldr	r1, [pc, #324]	; (1000b83c <uart_init+0x194>)
1000b6f6:	2010      	movs	r0, #16
1000b6f8:	4c51      	ldr	r4, [pc, #324]	; (1000b840 <uart_init+0x198>)
1000b6fa:	47a0      	blx	r4
		system_register_isr(RAM_ISR_TABLE_UARTTX0_INDEX, (uint32_t)uart_tx0_isr_handler);
1000b6fc:	4951      	ldr	r1, [pc, #324]	; (1000b844 <uart_init+0x19c>)
1000b6fe:	2011      	movs	r0, #17
1000b700:	47a0      	blx	r4
1000b702:	4b51      	ldr	r3, [pc, #324]	; (1000b848 <uart_init+0x1a0>)
1000b704:	2201      	movs	r2, #1
1000b706:	601a      	str	r2, [r3, #0]
1000b708:	3201      	adds	r2, #1
1000b70a:	601a      	str	r2, [r3, #0]
1000b70c:	e01a      	b.n	1000b744 <uart_init+0x9c>
		NVIC_EnableIRQ(UART0_RX_IRQn);
		NVIC_EnableIRQ(UART0_TX_IRQn);
	} else if (hw == UART1) {
1000b70e:	4b4f      	ldr	r3, [pc, #316]	; (1000b84c <uart_init+0x1a4>)
1000b710:	4299      	cmp	r1, r3
1000b712:	d117      	bne.n	1000b744 <uart_init+0x9c>
		system_peripheral_reset(PERIPHERAL_UART1_CORE);
1000b714:	200b      	movs	r0, #11
1000b716:	4c46      	ldr	r4, [pc, #280]	; (1000b830 <uart_init+0x188>)
1000b718:	47a0      	blx	r4
		system_peripheral_reset(PERIPHERAL_UART1_IF);
1000b71a:	200c      	movs	r0, #12
1000b71c:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART1_CORE);
1000b71e:	200b      	movs	r0, #11
1000b720:	4c44      	ldr	r4, [pc, #272]	; (1000b834 <uart_init+0x18c>)
1000b722:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART1_IF);
1000b724:	200c      	movs	r0, #12
1000b726:	47a0      	blx	r4
		_uart_instances[1] = module;
1000b728:	4b43      	ldr	r3, [pc, #268]	; (1000b838 <uart_init+0x190>)
1000b72a:	605d      	str	r5, [r3, #4]
		system_register_isr(RAM_ISR_TABLE_UARTRX1_INDEX, (uint32_t)uart_rx1_isr_handler);
1000b72c:	4948      	ldr	r1, [pc, #288]	; (1000b850 <uart_init+0x1a8>)
1000b72e:	2012      	movs	r0, #18
1000b730:	4c43      	ldr	r4, [pc, #268]	; (1000b840 <uart_init+0x198>)
1000b732:	47a0      	blx	r4
		system_register_isr(RAM_ISR_TABLE_UARTTX1_INDEX, (uint32_t)uart_tx1_isr_handler);
1000b734:	4947      	ldr	r1, [pc, #284]	; (1000b854 <uart_init+0x1ac>)
1000b736:	2013      	movs	r0, #19
1000b738:	47a0      	blx	r4
1000b73a:	4b43      	ldr	r3, [pc, #268]	; (1000b848 <uart_init+0x1a0>)
1000b73c:	2204      	movs	r2, #4
1000b73e:	601a      	str	r2, [r3, #0]
1000b740:	3204      	adds	r2, #4
1000b742:	601a      	str	r2, [r3, #0]
		NVIC_EnableIRQ(UART1_RX_IRQn);
		NVIC_EnableIRQ(UART1_TX_IRQn);
	}

	/* Set the pinmux for this UART module. */
	if(config->flow_control) {
1000b744:	79fb      	ldrb	r3, [r7, #7]
		index = 4;
1000b746:	2204      	movs	r2, #4
1000b748:	4690      	mov	r8, r2
		NVIC_EnableIRQ(UART1_RX_IRQn);
		NVIC_EnableIRQ(UART1_TX_IRQn);
	}

	/* Set the pinmux for this UART module. */
	if(config->flow_control) {
1000b74a:	2b00      	cmp	r3, #0
1000b74c:	d152      	bne.n	1000b7f4 <uart_init+0x14c>
		index = 4;
	} else {
		index = 2;
1000b74e:	3302      	adds	r3, #2
1000b750:	4698      	mov	r8, r3
1000b752:	e04f      	b.n	1000b7f4 <uart_init+0x14c>
#if (BTLC1000)
    index = 2;  /* BTLC1000 has no flow control function. */
#endif

	for(i = 0; i < index; i++) {
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
1000b754:	8a31      	ldrh	r1, [r6, #16]
1000b756:	ce01      	ldmia	r6!, {r0}
1000b758:	b2c0      	uxtb	r0, r0
1000b75a:	47c8      	blx	r9

#if (BTLC1000)
    index = 2;  /* BTLC1000 has no flow control function. */
#endif

	for(i = 0; i < index; i++) {
1000b75c:	3401      	adds	r4, #1
1000b75e:	b2e4      	uxtb	r4, r4
1000b760:	4544      	cmp	r4, r8
1000b762:	d3f7      	bcc.n	1000b754 <uart_init+0xac>
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
								(uint16_t)(config->pinmux_sel_pad[i]));
	}

	/* empty UART FIFO */
	while (module->hw->RECEIVE_STATUS.reg & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1000b764:	682b      	ldr	r3, [r5, #0]
1000b766:	7d1a      	ldrb	r2, [r3, #20]
1000b768:	07d2      	lsls	r2, r2, #31
1000b76a:	d504      	bpl.n	1000b776 <uart_init+0xce>
1000b76c:	2101      	movs	r1, #1
		i = module->hw->RECEIVE_DATA.reg;
1000b76e:	7c1a      	ldrb	r2, [r3, #16]
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
								(uint16_t)(config->pinmux_sel_pad[i]));
	}

	/* empty UART FIFO */
	while (module->hw->RECEIVE_STATUS.reg & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1000b770:	7d1a      	ldrb	r2, [r3, #20]
1000b772:	420a      	tst	r2, r1
1000b774:	d1fb      	bne.n	1000b76e <uart_init+0xc6>
		i = module->hw->RECEIVE_DATA.reg;
	}
	
	/* reset configuration register */
	module->hw->UART_CONFIGURATION.reg = 0;
1000b776:	2100      	movs	r1, #0
1000b778:	2220      	movs	r2, #32
1000b77a:	5499      	strb	r1, [r3, r2]

	/* program the uart configuration. */
	if(config->flow_control) {
1000b77c:	79fb      	ldrb	r3, [r7, #7]
		config_temp |= UART_CONFIGURATION_CTS_ENABLE_1;
1000b77e:	1e59      	subs	r1, r3, #1
1000b780:	418b      	sbcs	r3, r1
1000b782:	0159      	lsls	r1, r3, #5
	}
	config_temp |= config->data_bits;
	config_temp |= config->stop_bits;
1000b784:	793b      	ldrb	r3, [r7, #4]
1000b786:	797a      	ldrb	r2, [r7, #5]
1000b788:	4313      	orrs	r3, r2
1000b78a:	430b      	orrs	r3, r1
	switch(config->parity) {
1000b78c:	79ba      	ldrb	r2, [r7, #6]
1000b78e:	2a02      	cmp	r2, #2
1000b790:	d00d      	beq.n	1000b7ae <uart_init+0x106>
1000b792:	b2d1      	uxtb	r1, r2
1000b794:	2902      	cmp	r1, #2
1000b796:	d802      	bhi.n	1000b79e <uart_init+0xf6>
1000b798:	2a01      	cmp	r2, #1
1000b79a:	d005      	beq.n	1000b7a8 <uart_init+0x100>
1000b79c:	e00f      	b.n	1000b7be <uart_init+0x116>
1000b79e:	2a03      	cmp	r2, #3
1000b7a0:	d008      	beq.n	1000b7b4 <uart_init+0x10c>
1000b7a2:	2a04      	cmp	r2, #4
1000b7a4:	d009      	beq.n	1000b7ba <uart_init+0x112>
1000b7a6:	e00a      	b.n	1000b7be <uart_init+0x116>
		case UART_NO_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_0;
			break;

		case UART_EVEN_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_1;
1000b7a8:	2202      	movs	r2, #2
1000b7aa:	4313      	orrs	r3, r2
			config_temp |= UART_CONFIGURATION_PARITY_MODE_0;
			break;
1000b7ac:	e007      	b.n	1000b7be <uart_init+0x116>

		case UART_ODD_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_1;
			config_temp |= UART_CONFIGURATION_PARITY_MODE_1;
1000b7ae:	2206      	movs	r2, #6
1000b7b0:	4313      	orrs	r3, r2
			break;
1000b7b2:	e004      	b.n	1000b7be <uart_init+0x116>

		case UART_SPACE_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_1;
			config_temp |= UART_CONFIGURATION_PARITY_MODE_2;
1000b7b4:	220a      	movs	r2, #10
1000b7b6:	4313      	orrs	r3, r2
			break;
1000b7b8:	e001      	b.n	1000b7be <uart_init+0x116>

		case UART_MARK_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_1;
			config_temp |= UART_CONFIGURATION_PARITY_MODE_3;
1000b7ba:	220e      	movs	r2, #14
1000b7bc:	4313      	orrs	r3, r2
			break;

		default:
			break;
	}	
	module->hw->UART_CONFIGURATION.reg = config_temp;
1000b7be:	2220      	movs	r2, #32
1000b7c0:	6829      	ldr	r1, [r5, #0]
1000b7c2:	548b      	strb	r3, [r1, r2]

	/* Calculate the baud rate. */
	uart_set_baudrate(module, config->baud_rate);
1000b7c4:	683e      	ldr	r6, [r7, #0]
	uint16_t integerpart = 0;
	uint8_t fractionalpart = 0;
	uint32_t diff;
	uint8_t i = 0;

	clock = system_clock_get_value();
1000b7c6:	4b24      	ldr	r3, [pc, #144]	; (1000b858 <uart_init+0x1b0>)
1000b7c8:	4798      	blx	r3
1000b7ca:	0004      	movs	r4, r0
	integerpart = clock / baud_rate;
1000b7cc:	0031      	movs	r1, r6
1000b7ce:	4b23      	ldr	r3, [pc, #140]	; (1000b85c <uart_init+0x1b4>)
1000b7d0:	4798      	blx	r3
1000b7d2:	b282      	uxth	r2, r0
	diff = clock - (baud_rate * integerpart);
1000b7d4:	0400      	lsls	r0, r0, #16
1000b7d6:	0c00      	lsrs	r0, r0, #16
1000b7d8:	4370      	muls	r0, r6
1000b7da:	1a20      	subs	r0, r4, r0
	i = 0;
	while(diff > (baud_rate / 16)) {
1000b7dc:	0931      	lsrs	r1, r6, #4
1000b7de:	4288      	cmp	r0, r1
1000b7e0:	d906      	bls.n	1000b7f0 <uart_init+0x148>
1000b7e2:	2300      	movs	r3, #0
		i++;
1000b7e4:	3301      	adds	r3, #1
1000b7e6:	b2db      	uxtb	r3, r3
		diff -= (baud_rate / 16);
1000b7e8:	1a40      	subs	r0, r0, r1

	clock = system_clock_get_value();
	integerpart = clock / baud_rate;
	diff = clock - (baud_rate * integerpart);
	i = 0;
	while(diff > (baud_rate / 16)) {
1000b7ea:	4288      	cmp	r0, r1
1000b7ec:	d8fa      	bhi.n	1000b7e4 <uart_init+0x13c>
1000b7ee:	e007      	b.n	1000b800 <uart_init+0x158>
	uint8_t i = 0;

	clock = system_clock_get_value();
	integerpart = clock / baud_rate;
	diff = clock - (baud_rate * integerpart);
	i = 0;
1000b7f0:	2300      	movs	r3, #0
1000b7f2:	e005      	b.n	1000b800 <uart_init+0x158>
1000b7f4:	003e      	movs	r6, r7
1000b7f6:	3608      	adds	r6, #8
 *
 * \retval STATUS_OK                       The initialization was successful
 */
enum status_code uart_init(struct uart_module *const module, Uart * const hw,
		const struct uart_config *const config)
{
1000b7f8:	2400      	movs	r4, #0
#if (BTLC1000)
    index = 2;  /* BTLC1000 has no flow control function. */
#endif

	for(i = 0; i < index; i++) {
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
1000b7fa:	4b19      	ldr	r3, [pc, #100]	; (1000b860 <uart_init+0x1b8>)
1000b7fc:	4699      	mov	r9, r3
1000b7fe:	e7a9      	b.n	1000b754 <uart_init+0xac>
		i++;
		diff -= (baud_rate / 16);
	}
	fractionalpart = (i + 1) / 2;

	module->hw->UART_CLOCK_SOURCE.reg = UART_CLOCK_SOURCE_CLOCK_SELECT_0;
1000b800:	2100      	movs	r1, #0
1000b802:	2028      	movs	r0, #40	; 0x28
1000b804:	682c      	ldr	r4, [r5, #0]
1000b806:	5421      	strb	r1, [r4, r0]
	module->hw->UART_BAUD_RATE.reg =
1000b808:	3301      	adds	r3, #1
1000b80a:	071b      	lsls	r3, r3, #28
1000b80c:	0f5b      	lsrs	r3, r3, #29
1000b80e:	00d2      	lsls	r2, r2, #3
1000b810:	4313      	orrs	r3, r2
1000b812:	b29b      	uxth	r3, r3
1000b814:	682a      	ldr	r2, [r5, #0]
1000b816:	8493      	strh	r3, [r2, #36]	; 0x24
	module->hw->UART_CONFIGURATION.reg = config_temp;

	/* Calculate the baud rate. */
	uart_set_baudrate(module, config->baud_rate);

	module->hw->RX_INTERRUPT_MASK.reg = 0;	// disable int at initialization, enable it at read time
1000b818:	682b      	ldr	r3, [r5, #0]
1000b81a:	7619      	strb	r1, [r3, #24]
	module->hw->TX_INTERRUPT_MASK.reg = 0;	// disable int at initialization, enable it at write time
1000b81c:	682b      	ldr	r3, [r5, #0]
1000b81e:	7219      	strb	r1, [r3, #8]
	
	return STATUS_OK;
}
1000b820:	2000      	movs	r0, #0
1000b822:	bc0c      	pop	{r2, r3}
1000b824:	4690      	mov	r8, r2
1000b826:	4699      	mov	r9, r3
1000b828:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000b82a:	46c0      	nop			; (mov r8, r8)
1000b82c:	40004000 	.word	0x40004000
1000b830:	1000afdd 	.word	0x1000afdd
1000b834:	1000a915 	.word	0x1000a915
1000b838:	10019d24 	.word	0x10019d24
1000b83c:	1000b455 	.word	0x1000b455
1000b840:	1000b445 	.word	0x1000b445
1000b844:	1000b4dd 	.word	0x1000b4dd
1000b848:	e000e100 	.word	0xe000e100
1000b84c:	40005000 	.word	0x40005000
1000b850:	1000b569 	.word	0x1000b569
1000b854:	1000b5f1 	.word	0x1000b5f1
1000b858:	1000a909 	.word	0x1000a909
1000b85c:	100146a5 	.word	0x100146a5
1000b860:	1000a565 	.word	0x1000a565

1000b864 <uart_write_wait>:
* \retval STATUS_OK         If the operation was completed
*/
enum status_code uart_write_wait(struct uart_module *const module,
		const uint8_t tx_data)
{
	while (!(module->hw->TRANSMIT_STATUS.reg & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL));
1000b864:	6802      	ldr	r2, [r0, #0]
1000b866:	2001      	movs	r0, #1
1000b868:	7913      	ldrb	r3, [r2, #4]
1000b86a:	4203      	tst	r3, r0
1000b86c:	d0fc      	beq.n	1000b868 <uart_write_wait+0x4>

	module->hw->TRANSMIT_DATA.reg = tx_data;
1000b86e:	7011      	strb	r1, [r2, #0]
	
	return STATUS_OK;
}
1000b870:	2000      	movs	r0, #0
1000b872:	4770      	bx	lr

1000b874 <uart_read_wait>:
* \retval STATUS_OK                If the operation was completed
*/
enum status_code uart_read_wait(struct uart_module *const module,
		uint8_t *const rx_data)
{
	while (!(module->hw->RECEIVE_STATUS.reg & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY));
1000b874:	6802      	ldr	r2, [r0, #0]
1000b876:	2001      	movs	r0, #1
1000b878:	7d13      	ldrb	r3, [r2, #20]
1000b87a:	4203      	tst	r3, r0
1000b87c:	d0fc      	beq.n	1000b878 <uart_read_wait+0x4>

	*rx_data = module->hw->RECEIVE_DATA.reg;
1000b87e:	7c13      	ldrb	r3, [r2, #16]
1000b880:	700b      	strb	r3, [r1, #0]
	
	return STATUS_OK;
}
1000b882:	2000      	movs	r0, #0
1000b884:	4770      	bx	lr
1000b886:	46c0      	nop			; (mov r8, r8)

1000b888 <uart_read_buffer_job>:
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
1000b888:	2317      	movs	r3, #23
{
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
1000b88a:	2a00      	cmp	r2, #0
1000b88c:	d00d      	beq.n	1000b8aa <uart_read_buffer_job+0x22>
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check if the UART is busy transmitting or slave waiting for TXC*/
	if (module->status == STATUS_BUSY) {
1000b88e:	330b      	adds	r3, #11
1000b890:	5cc3      	ldrb	r3, [r0, r3]
1000b892:	b2db      	uxtb	r3, r3
1000b894:	2b05      	cmp	r3, #5
1000b896:	d008      	beq.n	1000b8aa <uart_read_buffer_job+0x22>
	Assert(module);
	Assert(rx_data);

	/* Set length for the buffer and the pointer, and let
	 * the interrupt handler do the rest */
	module->remaining_rx_buffer_length = length;
1000b898:	8382      	strh	r2, [r0, #28]
	module->rx_buffer_ptr = rx_data;
1000b89a:	6141      	str	r1, [r0, #20]
	module->status = STATUS_BUSY;
1000b89c:	2205      	movs	r2, #5
1000b89e:	2322      	movs	r3, #34	; 0x22
1000b8a0:	54c2      	strb	r2, [r0, r3]

	module->hw->RX_INTERRUPT_MASK.reg = UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK;
1000b8a2:	6803      	ldr	r3, [r0, #0]
1000b8a4:	3a04      	subs	r2, #4
1000b8a6:	761a      	strb	r2, [r3, #24]
		return STATUS_BUSY;
	}

	/* Issue internal read */
	_uart_read_buffer(module, rx_data, length);
	return STATUS_OK;
1000b8a8:	2300      	movs	r3, #0
}
1000b8aa:	0018      	movs	r0, r3
1000b8ac:	4770      	bx	lr
1000b8ae:	46c0      	nop			; (mov r8, r8)

1000b8b0 <uart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
1000b8b0:	0093      	lsls	r3, r2, #2
1000b8b2:	18c3      	adds	r3, r0, r3
1000b8b4:	6059      	str	r1, [r3, #4]
	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
1000b8b6:	2120      	movs	r1, #32
1000b8b8:	2301      	movs	r3, #1
1000b8ba:	4093      	lsls	r3, r2
1000b8bc:	5c42      	ldrb	r2, [r0, r1]
1000b8be:	4313      	orrs	r3, r2
1000b8c0:	5443      	strb	r3, [r0, r1]
}
1000b8c2:	4770      	bx	lr

1000b8c4 <uart_enable_callback>:
 * \param[in]  module         Pointer to UART software instance struct
 * \param[in]  callback_type  Callback type given by an enum
 */
void uart_enable_callback(struct uart_module *const module,
		enum uart_callback callback_type)
{
1000b8c4:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
1000b8c6:	2221      	movs	r2, #33	; 0x21
1000b8c8:	2301      	movs	r3, #1
1000b8ca:	408b      	lsls	r3, r1
1000b8cc:	5c84      	ldrb	r4, [r0, r2]
1000b8ce:	4323      	orrs	r3, r4
1000b8d0:	5483      	strb	r3, [r0, r2]

	if (callback_type == UART_CTS_ACTIVE) {
1000b8d2:	2901      	cmp	r1, #1
1000b8d4:	d104      	bne.n	1000b8e0 <uart_enable_callback+0x1c>
		module->hw->TX_INTERRUPT_MASK.reg |= UART_TX_INTERRUPT_MASK_CTS_ACTIVE_MASK;
1000b8d6:	6802      	ldr	r2, [r0, #0]
1000b8d8:	7a11      	ldrb	r1, [r2, #8]
1000b8da:	2320      	movs	r3, #32
1000b8dc:	430b      	orrs	r3, r1
1000b8de:	7213      	strb	r3, [r2, #8]
	}
}
1000b8e0:	bd10      	pop	{r4, pc}
1000b8e2:	46c0      	nop			; (mov r8, r8)

1000b8e4 <uart_disable_callback>:
 * \param[in]  module         Pointer to UART software instance struct
 * \param[in]  callback_type  Callback type given by an enum
 */
void uart_disable_callback(struct uart_module *const module,
		enum uart_callback callback_type)
{
1000b8e4:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);

	/* Disable callback */
	module->callback_enable_mask &= ~(1 << callback_type);
1000b8e6:	2201      	movs	r2, #1
1000b8e8:	408a      	lsls	r2, r1
1000b8ea:	2421      	movs	r4, #33	; 0x21
1000b8ec:	5d03      	ldrb	r3, [r0, r4]
1000b8ee:	4393      	bics	r3, r2
1000b8f0:	5503      	strb	r3, [r0, r4]

	if (callback_type == UART_CTS_ACTIVE) {
1000b8f2:	2901      	cmp	r1, #1
1000b8f4:	d104      	bne.n	1000b900 <uart_disable_callback+0x1c>
		module->hw->TX_INTERRUPT_MASK.reg &= ~UART_TX_INTERRUPT_MASK_CTS_ACTIVE_MASK;
1000b8f6:	6802      	ldr	r2, [r0, #0]
1000b8f8:	7a13      	ldrb	r3, [r2, #8]
1000b8fa:	311f      	adds	r1, #31
1000b8fc:	438b      	bics	r3, r1
1000b8fe:	7213      	strb	r3, [r2, #8]
	}

}
1000b900:	bd10      	pop	{r4, pc}
1000b902:	46c0      	nop			; (mov r8, r8)

1000b904 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
1000b904:	b5f0      	push	{r4, r5, r6, r7, lr}
1000b906:	4647      	mov	r7, r8
1000b908:	b480      	push	{r7}
1000b90a:	000c      	movs	r4, r1
1000b90c:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
1000b90e:	2800      	cmp	r0, #0
1000b910:	d10d      	bne.n	1000b92e <_read+0x2a>
		return -1;
	}

	for (; len > 0; --len) {
1000b912:	2a00      	cmp	r2, #0
1000b914:	dd0e      	ble.n	1000b934 <_read+0x30>
1000b916:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
1000b918:	4e08      	ldr	r6, [pc, #32]	; (1000b93c <_read+0x38>)
1000b91a:	4d09      	ldr	r5, [pc, #36]	; (1000b940 <_read+0x3c>)
1000b91c:	6830      	ldr	r0, [r6, #0]
1000b91e:	0021      	movs	r1, r4
1000b920:	682b      	ldr	r3, [r5, #0]
1000b922:	4798      	blx	r3
		ptr++;
1000b924:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
1000b926:	42a7      	cmp	r7, r4
1000b928:	d1f8      	bne.n	1000b91c <_read+0x18>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
1000b92a:	4640      	mov	r0, r8
1000b92c:	e003      	b.n	1000b936 <_read+0x32>
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
1000b92e:	2001      	movs	r0, #1
1000b930:	4240      	negs	r0, r0
1000b932:	e000      	b.n	1000b936 <_read+0x32>
	}

	for (; len > 0; --len) {
1000b934:	2000      	movs	r0, #0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
1000b936:	bc04      	pop	{r2}
1000b938:	4690      	mov	r8, r2
1000b93a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000b93c:	10019d34 	.word	0x10019d34
1000b940:	10019d2c 	.word	0x10019d2c

1000b944 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
1000b944:	b5f0      	push	{r4, r5, r6, r7, lr}
1000b946:	4647      	mov	r7, r8
1000b948:	b480      	push	{r7}
1000b94a:	000e      	movs	r6, r1
1000b94c:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
1000b94e:	3801      	subs	r0, #1
1000b950:	2802      	cmp	r0, #2
1000b952:	d811      	bhi.n	1000b978 <_write+0x34>
		return -1;
	}

	for (; len != 0; --len) {
1000b954:	2a00      	cmp	r2, #0
1000b956:	d012      	beq.n	1000b97e <_write+0x3a>
1000b958:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
1000b95a:	4b0c      	ldr	r3, [pc, #48]	; (1000b98c <_write+0x48>)
1000b95c:	4698      	mov	r8, r3
1000b95e:	4f0c      	ldr	r7, [pc, #48]	; (1000b990 <_write+0x4c>)
1000b960:	4643      	mov	r3, r8
1000b962:	6818      	ldr	r0, [r3, #0]
1000b964:	5d31      	ldrb	r1, [r6, r4]
1000b966:	683b      	ldr	r3, [r7, #0]
1000b968:	4798      	blx	r3
1000b96a:	2800      	cmp	r0, #0
1000b96c:	db09      	blt.n	1000b982 <_write+0x3e>
			return -1;
		}
		++nChars;
1000b96e:	3401      	adds	r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
1000b970:	42a5      	cmp	r5, r4
1000b972:	d1f5      	bne.n	1000b960 <_write+0x1c>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
1000b974:	0020      	movs	r0, r4
1000b976:	e006      	b.n	1000b986 <_write+0x42>
_write (int file, char * ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
1000b978:	2001      	movs	r0, #1
1000b97a:	4240      	negs	r0, r0
1000b97c:	e003      	b.n	1000b986 <_write+0x42>
	}

	for (; len != 0; --len) {
1000b97e:	2000      	movs	r0, #0
1000b980:	e001      	b.n	1000b986 <_write+0x42>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
1000b982:	2001      	movs	r0, #1
1000b984:	4240      	negs	r0, r0
		}
		++nChars;
	}
	return nChars;
}
1000b986:	bc04      	pop	{r2}
1000b988:	4690      	mov	r8, r2
1000b98a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000b98c:	10019d34 	.word	0x10019d34
1000b990:	10019d30 	.word	0x10019d30

1000b994 <ble_undefined_event_handler>:
at_ble_status_t ble_undefined_event_handler(void *params)
{
	DBG_LOG_DEV("Undefined Event Received");
    ALL_UNUSED(params);
	return AT_BLE_SUCCESS;
}
1000b994:	2000      	movs	r0, #0
1000b996:	4770      	bx	lr

1000b998 <ble_mtu_changed_indication_handler>:
	mtu_changed_ind = (at_ble_mtu_changed_ind_t *)params;
	DBG_LOG_DEV("BLE-MTU Changed, Connection Handle: %d, New Value: %d", 
										mtu_changed_ind->conhdl, 
										mtu_changed_ind->mtu_value);
	return AT_BLE_SUCCESS;
}
1000b998:	2000      	movs	r0, #0
1000b99a:	4770      	bx	lr

1000b99c <ble_characteristic_write_cmd_complete_handler>:

at_ble_status_t ble_characteristic_write_cmd_complete_handler(void *params)
{
	at_ble_cmd_complete_event_t *cmd_complete_event;
	cmd_complete_event = (at_ble_cmd_complete_event_t *)params;
	if (cmd_complete_event->status == AT_BLE_SUCCESS)
1000b99c:	78c0      	ldrb	r0, [r0, #3]
1000b99e:	2800      	cmp	r0, #0
1000b9a0:	d000      	beq.n	1000b9a4 <ble_characteristic_write_cmd_complete_handler+0x8>
	{
		DBG_LOG_DEV("Char Write Cmd Failed, Connection Handle:%d, Operation:%d",
		cmd_complete_event->conn_handle,
		cmd_complete_event->operation);
	}
	return AT_BLE_FAILURE;
1000b9a2:	20e2      	movs	r0, #226	; 0xe2
}
1000b9a4:	4770      	bx	lr
1000b9a6:	46c0      	nop			; (mov r8, r8)

1000b9a8 <ble_conn_param_update>:
	at_ble_conn_param_update_done_t * conn_param_update;
	conn_param_update = (at_ble_conn_param_update_done_t *)params;
	DBG_LOG_DEV("AT_BLE_CONN_PARAM_UPDATE ");
	ALL_UNUSED(conn_param_update);  //To avoid compiler warning
	return AT_BLE_SUCCESS;
}
1000b9a8:	2000      	movs	r0, #0
1000b9aa:	4770      	bx	lr

1000b9ac <ble_scan_report_handler>:
	}
}

/** @brief function handles scan report */
at_ble_status_t ble_scan_report_handler(void *params)
{
1000b9ac:	b510      	push	{r4, lr}
	at_ble_scan_report_t *scan_report;
	scan_report = (at_ble_scan_report_t *)params;
	if (scan_report->status == AT_BLE_SUCCESS)
1000b9ae:	7800      	ldrb	r0, [r0, #0]
1000b9b0:	2800      	cmp	r0, #0
1000b9b2:	d006      	beq.n	1000b9c2 <ble_scan_report_handler+0x16>
		/* All scan data should be handled */
		return AT_BLE_SUCCESS;
	}
	else
	{
		DBG_LOG("Scanning  failed");
1000b9b4:	4803      	ldr	r0, [pc, #12]	; (1000b9c4 <ble_scan_report_handler+0x18>)
1000b9b6:	4b04      	ldr	r3, [pc, #16]	; (1000b9c8 <ble_scan_report_handler+0x1c>)
1000b9b8:	4798      	blx	r3
1000b9ba:	4804      	ldr	r0, [pc, #16]	; (1000b9cc <ble_scan_report_handler+0x20>)
1000b9bc:	4b04      	ldr	r3, [pc, #16]	; (1000b9d0 <ble_scan_report_handler+0x24>)
1000b9be:	4798      	blx	r3
	}
	return AT_BLE_FAILURE;
1000b9c0:	20e2      	movs	r0, #226	; 0xe2
}
1000b9c2:	bd10      	pop	{r4, pc}
1000b9c4:	10016de8 	.word	0x10016de8
1000b9c8:	100127bd 	.word	0x100127bd
1000b9cc:	10017458 	.word	0x10017458
1000b9d0:	1001269d 	.word	0x1001269d

1000b9d4 <ble_adv_report_handler>:

/** @brief function handles advertising report */
at_ble_status_t ble_adv_report_handler(void *params)
{
1000b9d4:	b510      	push	{r4, lr}
    at_ble_adv_report_t *adv_report;
    adv_report = (at_ble_adv_report_t *)params;
    if(adv_report->status == AT_BLE_SUCCESS)
1000b9d6:	7800      	ldrb	r0, [r0, #0]
1000b9d8:	2800      	cmp	r0, #0
1000b9da:	d006      	beq.n	1000b9ea <ble_adv_report_handler+0x16>
    {
        return AT_BLE_SUCCESS;
    }
    else 
    {
        DBG_LOG("Advertising failed");
1000b9dc:	4803      	ldr	r0, [pc, #12]	; (1000b9ec <ble_adv_report_handler+0x18>)
1000b9de:	4b04      	ldr	r3, [pc, #16]	; (1000b9f0 <ble_adv_report_handler+0x1c>)
1000b9e0:	4798      	blx	r3
1000b9e2:	4804      	ldr	r0, [pc, #16]	; (1000b9f4 <ble_adv_report_handler+0x20>)
1000b9e4:	4b04      	ldr	r3, [pc, #16]	; (1000b9f8 <ble_adv_report_handler+0x24>)
1000b9e6:	4798      	blx	r3
    }
    return AT_BLE_FAILURE;
1000b9e8:	20e2      	movs	r0, #226	; 0xe2
}
1000b9ea:	bd10      	pop	{r4, pc}
1000b9ec:	10016de8 	.word	0x10016de8
1000b9f0:	100127bd 	.word	0x100127bd
1000b9f4:	1001746c 	.word	0x1001746c
1000b9f8:	1001269d 	.word	0x1001269d

1000b9fc <ble_mtu_changed_cmd_complete_handler>:
										mtu_changed_ind->mtu_value);
	return AT_BLE_SUCCESS;
}

at_ble_status_t ble_mtu_changed_cmd_complete_handler(void *params)
{
1000b9fc:	b510      	push	{r4, lr}
1000b9fe:	0004      	movs	r4, r0
	at_ble_cmd_complete_event_t *cmd_complete_event;
	cmd_complete_event = (at_ble_cmd_complete_event_t *)params;
	
	if (cmd_complete_event->status == AT_BLE_SUCCESS)
1000ba00:	78c0      	ldrb	r0, [r0, #3]
1000ba02:	2800      	cmp	r0, #0
1000ba04:	d008      	beq.n	1000ba18 <ble_mtu_changed_cmd_complete_handler+0x1c>
		cmd_complete_event->operation);
		return AT_BLE_SUCCESS;
	}
	else
	{
		DBG_LOG("MTU Change Failed, Connection Handle:%d, Operation:%d",
1000ba06:	4805      	ldr	r0, [pc, #20]	; (1000ba1c <ble_mtu_changed_cmd_complete_handler+0x20>)
1000ba08:	4b05      	ldr	r3, [pc, #20]	; (1000ba20 <ble_mtu_changed_cmd_complete_handler+0x24>)
1000ba0a:	4798      	blx	r3
1000ba0c:	78a2      	ldrb	r2, [r4, #2]
1000ba0e:	8821      	ldrh	r1, [r4, #0]
1000ba10:	4804      	ldr	r0, [pc, #16]	; (1000ba24 <ble_mtu_changed_cmd_complete_handler+0x28>)
1000ba12:	4b05      	ldr	r3, [pc, #20]	; (1000ba28 <ble_mtu_changed_cmd_complete_handler+0x2c>)
1000ba14:	4798      	blx	r3
		cmd_complete_event->conn_handle,
		cmd_complete_event->operation);
	}
	return AT_BLE_FAILURE;
1000ba16:	20e2      	movs	r0, #226	; 0xe2
}
1000ba18:	bd10      	pop	{r4, pc}
1000ba1a:	46c0      	nop			; (mov r8, r8)
1000ba1c:	10016de8 	.word	0x10016de8
1000ba20:	100127bd 	.word	0x100127bd
1000ba24:	10017480 	.word	0x10017480
1000ba28:	1001269d 	.word	0x1001269d

1000ba2c <ble_disconnected_state_handler>:
	return AT_BLE_FAILURE;
}

/** @brief function handles disconnection event received from stack */
at_ble_status_t ble_disconnected_state_handler(void *params)
{
1000ba2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000ba2e:	0004      	movs	r4, r0
1000ba30:	4b19      	ldr	r3, [pc, #100]	; (1000ba98 <ble_disconnected_state_handler+0x6c>)
1000ba32:	229b      	movs	r2, #155	; 0x9b
1000ba34:	0092      	lsls	r2, r2, #2
1000ba36:	189d      	adds	r5, r3, r2
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == disconnect->handle) && 
		((ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRED) || (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_COMPLETED)))
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_DISCONNECTED;
1000ba38:	2701      	movs	r7, #1
				case BLE_DEVICE_DISCONNECTED:
				break;
				
				default:
				DBG_LOG_DEV("State Not Handled %d", ble_dev_info[idx].conn_state);
				ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
1000ba3a:	2600      	movs	r6, #0
1000ba3c:	0018      	movs	r0, r3
	uint8_t idx;
	disconnect = (at_ble_disconnected_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == disconnect->handle) && 
1000ba3e:	001a      	movs	r2, r3
1000ba40:	3a56      	subs	r2, #86	; 0x56
1000ba42:	8811      	ldrh	r1, [r2, #0]
1000ba44:	8822      	ldrh	r2, [r4, #0]
1000ba46:	4291      	cmp	r1, r2
1000ba48:	d119      	bne.n	1000ba7e <ble_disconnected_state_handler+0x52>
		((ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRED) || (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_COMPLETED)))
1000ba4a:	781a      	ldrb	r2, [r3, #0]
	uint8_t idx;
	disconnect = (at_ble_disconnected_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == disconnect->handle) && 
1000ba4c:	2a05      	cmp	r2, #5
1000ba4e:	d001      	beq.n	1000ba54 <ble_disconnected_state_handler+0x28>
		((ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRED) || (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_COMPLETED)))
1000ba50:	2a08      	cmp	r2, #8
1000ba52:	d101      	bne.n	1000ba58 <ble_disconnected_state_handler+0x2c>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_DISCONNECTED;
1000ba54:	7007      	strb	r7, [r0, #0]
1000ba56:	e012      	b.n	1000ba7e <ble_disconnected_state_handler+0x52>
		}		
		else if(ble_dev_info[idx].conn_info.handle == disconnect->handle)
		{
			switch (ble_dev_info[idx].conn_state)
1000ba58:	2a07      	cmp	r2, #7
1000ba5a:	d80f      	bhi.n	1000ba7c <ble_disconnected_state_handler+0x50>
1000ba5c:	0092      	lsls	r2, r2, #2
1000ba5e:	490f      	ldr	r1, [pc, #60]	; (1000ba9c <ble_disconnected_state_handler+0x70>)
1000ba60:	588a      	ldr	r2, [r1, r2]
1000ba62:	4697      	mov	pc, r2
				case BLE_DEVICE_PAIRING_FAILED:
				case BLE_DEVICE_ENCRYPTION_STATE:
				case BLE_DEVICE_ENCRYPTION_FAILED:
				{
					/* Device is not paired so remove the device information */
					ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
1000ba64:	701e      	strb	r6, [r3, #0]
					if (ble_device_count > 0)
1000ba66:	4a0e      	ldr	r2, [pc, #56]	; (1000baa0 <ble_disconnected_state_handler+0x74>)
1000ba68:	7812      	ldrb	r2, [r2, #0]
1000ba6a:	2a00      	cmp	r2, #0
1000ba6c:	d007      	beq.n	1000ba7e <ble_disconnected_state_handler+0x52>
					{
						ble_device_count--;
1000ba6e:	4a0c      	ldr	r2, [pc, #48]	; (1000baa0 <ble_disconnected_state_handler+0x74>)
1000ba70:	7812      	ldrb	r2, [r2, #0]
1000ba72:	3a01      	subs	r2, #1
1000ba74:	b2d2      	uxtb	r2, r2
1000ba76:	490a      	ldr	r1, [pc, #40]	; (1000baa0 <ble_disconnected_state_handler+0x74>)
1000ba78:	700a      	strb	r2, [r1, #0]
1000ba7a:	e000      	b.n	1000ba7e <ble_disconnected_state_handler+0x52>
				case BLE_DEVICE_DISCONNECTED:
				break;
				
				default:
				DBG_LOG_DEV("State Not Handled %d", ble_dev_info[idx].conn_state);
				ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
1000ba7c:	7006      	strb	r6, [r0, #0]
1000ba7e:	337c      	adds	r3, #124	; 0x7c
{
	at_ble_disconnected_t *disconnect;
	uint8_t idx;
	disconnect = (at_ble_disconnected_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000ba80:	42ab      	cmp	r3, r5
1000ba82:	d1db      	bne.n	1000ba3c <ble_disconnected_state_handler+0x10>
				break;				
			}
		} 
	}
	
	DBG_LOG("Device disconnected Reason:0x%02x Handle=0x%x", disconnect->reason, disconnect->handle);
1000ba84:	4807      	ldr	r0, [pc, #28]	; (1000baa4 <ble_disconnected_state_handler+0x78>)
1000ba86:	4b08      	ldr	r3, [pc, #32]	; (1000baa8 <ble_disconnected_state_handler+0x7c>)
1000ba88:	4798      	blx	r3
1000ba8a:	8822      	ldrh	r2, [r4, #0]
1000ba8c:	78a1      	ldrb	r1, [r4, #2]
1000ba8e:	4807      	ldr	r0, [pc, #28]	; (1000baac <ble_disconnected_state_handler+0x80>)
1000ba90:	4b07      	ldr	r3, [pc, #28]	; (1000bab0 <ble_disconnected_state_handler+0x84>)
1000ba92:	4798      	blx	r3
	return AT_BLE_SUCCESS;
}
1000ba94:	2000      	movs	r0, #0
1000ba96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000ba98:	10019dae 	.word	0x10019dae
1000ba9c:	100173e4 	.word	0x100173e4
1000baa0:	10019fbc 	.word	0x10019fbc
1000baa4:	10016de8 	.word	0x10016de8
1000baa8:	100127bd 	.word	0x100127bd
1000baac:	100174b8 	.word	0x100174b8
1000bab0:	1001269d 	.word	0x1001269d

1000bab4 <ble_encryption_status_change_handler>:
	return AT_BLE_SUCCESS;
}

/** @brief function handles encryption status change */
at_ble_status_t ble_encryption_status_change_handler(void *params)
{
1000bab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000bab6:	0006      	movs	r6, r0
	
	enc_status = (at_ble_encryption_status_changed_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == enc_status->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_STATE))
1000bab8:	8801      	ldrh	r1, [r0, #0]
1000baba:	4b28      	ldr	r3, [pc, #160]	; (1000bb5c <ble_encryption_status_change_handler+0xa8>)
	uint8_t idx;
	bool device_found = false;
	
	enc_status = (at_ble_encryption_status_changed_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000babc:	2400      	movs	r4, #0
	{
		if((ble_dev_info[idx].conn_info.handle == enc_status->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_STATE))
1000babe:	891a      	ldrh	r2, [r3, #8]
1000bac0:	428a      	cmp	r2, r1
1000bac2:	d104      	bne.n	1000bace <ble_encryption_status_change_handler+0x1a>
1000bac4:	001a      	movs	r2, r3
1000bac6:	325e      	adds	r2, #94	; 0x5e
1000bac8:	7812      	ldrb	r2, [r2, #0]
1000baca:	2a06      	cmp	r2, #6
1000bacc:	d02e      	beq.n	1000bb2c <ble_encryption_status_change_handler+0x78>
	uint8_t idx;
	bool device_found = false;
	
	enc_status = (at_ble_encryption_status_changed_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000bace:	3401      	adds	r4, #1
1000bad0:	b2e4      	uxtb	r4, r4
1000bad2:	337c      	adds	r3, #124	; 0x7c
1000bad4:	2c05      	cmp	r4, #5
1000bad6:	d1f2      	bne.n	1000babe <ble_encryption_status_change_handler+0xa>
1000bad8:	e039      	b.n	1000bb4e <ble_encryption_status_change_handler+0x9a>
			return AT_BLE_FAILURE;
		}
	}
	else
	{
		ble_dev_info[idx].bond_info.status = enc_status->status;
1000bada:	4920      	ldr	r1, [pc, #128]	; (1000bb5c <ble_encryption_status_change_handler+0xa8>)
1000badc:	0163      	lsls	r3, r4, #5
1000bade:	1b1a      	subs	r2, r3, r4
1000bae0:	0092      	lsls	r2, r2, #2
1000bae2:	188a      	adds	r2, r1, r2
1000bae4:	7615      	strb	r5, [r2, #24]
		ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_FAILED;
1000bae6:	0014      	movs	r4, r2
1000bae8:	345e      	adds	r4, #94	; 0x5e
1000baea:	2307      	movs	r3, #7
1000baec:	7023      	strb	r3, [r4, #0]
		DBG_LOG("Encryption failed");
1000baee:	481c      	ldr	r0, [pc, #112]	; (1000bb60 <ble_encryption_status_change_handler+0xac>)
1000baf0:	4b1c      	ldr	r3, [pc, #112]	; (1000bb64 <ble_encryption_status_change_handler+0xb0>)
1000baf2:	4798      	blx	r3
1000baf4:	481c      	ldr	r0, [pc, #112]	; (1000bb68 <ble_encryption_status_change_handler+0xb4>)
1000baf6:	4b1d      	ldr	r3, [pc, #116]	; (1000bb6c <ble_encryption_status_change_handler+0xb8>)
1000baf8:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000bafa:	25e2      	movs	r5, #226	; 0xe2
1000bafc:	e02b      	b.n	1000bb56 <ble_encryption_status_change_handler+0xa2>
		}
	}
	
	if(enc_status->status == AT_BLE_SUCCESS)
	{
		DBG_LOG("Encryption completed successfully");
1000bafe:	4818      	ldr	r0, [pc, #96]	; (1000bb60 <ble_encryption_status_change_handler+0xac>)
1000bb00:	4b18      	ldr	r3, [pc, #96]	; (1000bb64 <ble_encryption_status_change_handler+0xb0>)
1000bb02:	4798      	blx	r3
1000bb04:	481a      	ldr	r0, [pc, #104]	; (1000bb70 <ble_encryption_status_change_handler+0xbc>)
1000bb06:	4b19      	ldr	r3, [pc, #100]	; (1000bb6c <ble_encryption_status_change_handler+0xb8>)
1000bb08:	4798      	blx	r3
		if (device_found)
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_COMPLETED;
1000bb0a:	4914      	ldr	r1, [pc, #80]	; (1000bb5c <ble_encryption_status_change_handler+0xa8>)
1000bb0c:	0163      	lsls	r3, r4, #5
1000bb0e:	1b1a      	subs	r2, r3, r4
1000bb10:	0092      	lsls	r2, r2, #2
1000bb12:	188a      	adds	r2, r1, r2
1000bb14:	0010      	movs	r0, r2
1000bb16:	305e      	adds	r0, #94	; 0x5e
1000bb18:	2708      	movs	r7, #8
1000bb1a:	7007      	strb	r7, [r0, #0]
			ble_dev_info[idx].bond_info.auth = enc_status->authen;
1000bb1c:	78f0      	ldrb	r0, [r6, #3]
1000bb1e:	7510      	strb	r0, [r2, #20]
			ble_dev_info[idx].bond_info.status = enc_status->status;
1000bb20:	78b2      	ldrb	r2, [r6, #2]
1000bb22:	1b1c      	subs	r4, r3, r4
1000bb24:	00a4      	lsls	r4, r4, #2
1000bb26:	190c      	adds	r4, r1, r4
1000bb28:	7622      	strb	r2, [r4, #24]
		ble_dev_info[idx].bond_info.status = enc_status->status;
		ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_FAILED;
		DBG_LOG("Encryption failed");
		return AT_BLE_FAILURE;
	}
	return AT_BLE_SUCCESS;
1000bb2a:	e014      	b.n	1000bb56 <ble_encryption_status_change_handler+0xa2>
			device_found = true;
			break;
		}
	}
	
	if(enc_status->status == AT_BLE_SUCCESS)
1000bb2c:	78b5      	ldrb	r5, [r6, #2]
1000bb2e:	2d00      	cmp	r5, #0
1000bb30:	d0e5      	beq.n	1000bafe <ble_encryption_status_change_handler+0x4a>
1000bb32:	e7d2      	b.n	1000bada <ble_encryption_status_change_handler+0x26>
	{
		DBG_LOG("Encryption completed successfully");
1000bb34:	4e0a      	ldr	r6, [pc, #40]	; (1000bb60 <ble_encryption_status_change_handler+0xac>)
1000bb36:	0030      	movs	r0, r6
1000bb38:	4d0a      	ldr	r5, [pc, #40]	; (1000bb64 <ble_encryption_status_change_handler+0xb0>)
1000bb3a:	47a8      	blx	r5
1000bb3c:	480c      	ldr	r0, [pc, #48]	; (1000bb70 <ble_encryption_status_change_handler+0xbc>)
1000bb3e:	4c0b      	ldr	r4, [pc, #44]	; (1000bb6c <ble_encryption_status_change_handler+0xb8>)
1000bb40:	47a0      	blx	r4
			ble_dev_info[idx].bond_info.auth = enc_status->authen;
			ble_dev_info[idx].bond_info.status = enc_status->status;
		}
		else
		{
			DBG_LOG("BLE Device not found encryption info");
1000bb42:	0030      	movs	r0, r6
1000bb44:	47a8      	blx	r5
1000bb46:	480b      	ldr	r0, [pc, #44]	; (1000bb74 <ble_encryption_status_change_handler+0xc0>)
1000bb48:	47a0      	blx	r4
			return AT_BLE_FAILURE;
1000bb4a:	25e2      	movs	r5, #226	; 0xe2
1000bb4c:	e003      	b.n	1000bb56 <ble_encryption_status_change_handler+0xa2>
			device_found = true;
			break;
		}
	}
	
	if(enc_status->status == AT_BLE_SUCCESS)
1000bb4e:	78b5      	ldrb	r5, [r6, #2]
1000bb50:	2d00      	cmp	r5, #0
1000bb52:	d1c2      	bne.n	1000bada <ble_encryption_status_change_handler+0x26>
1000bb54:	e7ee      	b.n	1000bb34 <ble_encryption_status_change_handler+0x80>
		ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_FAILED;
		DBG_LOG("Encryption failed");
		return AT_BLE_FAILURE;
	}
	return AT_BLE_SUCCESS;
}
1000bb56:	0028      	movs	r0, r5
1000bb58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000bb5a:	46c0      	nop			; (mov r8, r8)
1000bb5c:	10019d50 	.word	0x10019d50
1000bb60:	10016de8 	.word	0x10016de8
1000bb64:	100127bd 	.word	0x100127bd
1000bb68:	100174e8 	.word	0x100174e8
1000bb6c:	1001269d 	.word	0x1001269d
1000bb70:	100174fc 	.word	0x100174fc
1000bb74:	10017520 	.word	0x10017520

1000bb78 <ble_scan_info_handler>:
	return found;
}
#endif
/** @brief function handling scaned information */
at_ble_status_t ble_scan_info_handler(void *params)
{
1000bb78:	b510      	push	{r4, lr}
1000bb7a:	0001      	movs	r1, r0
	at_ble_scan_info_t *scan_param;
	scan_param = (at_ble_scan_info_t *)params;
	if(scan_response_count < MAX_SCAN_DEVICE)
1000bb7c:	4b15      	ldr	r3, [pc, #84]	; (1000bbd4 <ble_scan_info_handler+0x5c>)
1000bb7e:	781b      	ldrb	r3, [r3, #0]
1000bb80:	b2db      	uxtb	r3, r3
1000bb82:	2b13      	cmp	r3, #19
1000bb84:	d812      	bhi.n	1000bbac <ble_scan_info_handler+0x34>
	{
		memcpy((uint8_t *)&scan_info[scan_response_count], scan_param, sizeof(at_ble_scan_info_t));
1000bb86:	4c13      	ldr	r4, [pc, #76]	; (1000bbd4 <ble_scan_info_handler+0x5c>)
1000bb88:	7823      	ldrb	r3, [r4, #0]
1000bb8a:	b2db      	uxtb	r3, r3
1000bb8c:	0098      	lsls	r0, r3, #2
1000bb8e:	18c0      	adds	r0, r0, r3
1000bb90:	00c0      	lsls	r0, r0, #3
1000bb92:	18c3      	adds	r3, r0, r3
1000bb94:	4810      	ldr	r0, [pc, #64]	; (1000bbd8 <ble_scan_info_handler+0x60>)
1000bb96:	1818      	adds	r0, r3, r0
1000bb98:	2229      	movs	r2, #41	; 0x29
1000bb9a:	4b10      	ldr	r3, [pc, #64]	; (1000bbdc <ble_scan_info_handler+0x64>)
1000bb9c:	4798      	blx	r3
		DBG_LOG_DEV("Info:Device found address [%d]  0x%02X%02X%02X%02X%02X%02X ",
1000bb9e:	7823      	ldrb	r3, [r4, #0]
		scan_param->dev_addr.addr[4],
		scan_param->dev_addr.addr[3],
		scan_param->dev_addr.addr[2],
		scan_param->dev_addr.addr[1],
		scan_param->dev_addr.addr[0]);
		scan_response_count++;
1000bba0:	7823      	ldrb	r3, [r4, #0]
1000bba2:	3301      	adds	r3, #1
1000bba4:	b2db      	uxtb	r3, r3
1000bba6:	7023      	strb	r3, [r4, #0]
		return AT_BLE_SUCCESS;
1000bba8:	2300      	movs	r3, #0
1000bbaa:	e011      	b.n	1000bbd0 <ble_scan_info_handler+0x58>
	}
	else
	{
		DBG_LOG("Info:maximum no.of scan device reached...Stopping Scan");
1000bbac:	480c      	ldr	r0, [pc, #48]	; (1000bbe0 <ble_scan_info_handler+0x68>)
1000bbae:	4b0d      	ldr	r3, [pc, #52]	; (1000bbe4 <ble_scan_info_handler+0x6c>)
1000bbb0:	4798      	blx	r3
1000bbb2:	480d      	ldr	r0, [pc, #52]	; (1000bbe8 <ble_scan_info_handler+0x70>)
1000bbb4:	4b0d      	ldr	r3, [pc, #52]	; (1000bbec <ble_scan_info_handler+0x74>)
1000bbb6:	4798      	blx	r3
		if(at_ble_scan_stop() != AT_BLE_SUCCESS)
1000bbb8:	4b0d      	ldr	r3, [pc, #52]	; (1000bbf0 <ble_scan_info_handler+0x78>)
1000bbba:	4798      	blx	r3
				}
			}
		}
	
		#endif
		return AT_BLE_FAILURE;
1000bbbc:	23e2      	movs	r3, #226	; 0xe2
		return AT_BLE_SUCCESS;
	}
	else
	{
		DBG_LOG("Info:maximum no.of scan device reached...Stopping Scan");
		if(at_ble_scan_stop() != AT_BLE_SUCCESS)
1000bbbe:	2800      	cmp	r0, #0
1000bbc0:	d006      	beq.n	1000bbd0 <ble_scan_info_handler+0x58>
		{
			DBG_LOG("Failed to stop scanning");
1000bbc2:	4807      	ldr	r0, [pc, #28]	; (1000bbe0 <ble_scan_info_handler+0x68>)
1000bbc4:	4b07      	ldr	r3, [pc, #28]	; (1000bbe4 <ble_scan_info_handler+0x6c>)
1000bbc6:	4798      	blx	r3
1000bbc8:	480a      	ldr	r0, [pc, #40]	; (1000bbf4 <ble_scan_info_handler+0x7c>)
1000bbca:	4b08      	ldr	r3, [pc, #32]	; (1000bbec <ble_scan_info_handler+0x74>)
1000bbcc:	4798      	blx	r3
				}
			}
		}
	
		#endif
		return AT_BLE_FAILURE;
1000bbce:	23e2      	movs	r3, #226	; 0xe2
	}
}
1000bbd0:	0018      	movs	r0, r3
1000bbd2:	bd10      	pop	{r4, pc}
1000bbd4:	10018828 	.word	0x10018828
1000bbd8:	1001a034 	.word	0x1001a034
1000bbdc:	10011c57 	.word	0x10011c57
1000bbe0:	10016de8 	.word	0x10016de8
1000bbe4:	100127bd 	.word	0x100127bd
1000bbe8:	10017548 	.word	0x10017548
1000bbec:	1001269d 	.word	0x1001269d
1000bbf0:	1000e3d5 	.word	0x1000e3d5
1000bbf4:	10017580 	.word	0x10017580

1000bbf8 <ble_pair_done_handler>:
	return AT_BLE_SUCCESS;	
}

/** @brief function handles pair done event */
at_ble_status_t ble_pair_done_handler(void *params)
{
1000bbf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000bbfa:	464f      	mov	r7, r9
1000bbfc:	4646      	mov	r6, r8
1000bbfe:	b4c0      	push	{r6, r7}
1000bc00:	0005      	movs	r5, r0
	bool device_found = false;
	pairing_params = (at_ble_pair_done_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == pairing_params->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRING))
1000bc02:	8841      	ldrh	r1, [r0, #2]
1000bc04:	4b3a      	ldr	r3, [pc, #232]	; (1000bcf0 <ble_pair_done_handler+0xf8>)
	at_ble_pair_done_t *pairing_params;
	uint8_t idx;
	bool device_found = false;
	pairing_params = (at_ble_pair_done_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000bc06:	2400      	movs	r4, #0
	{
		if((ble_dev_info[idx].conn_info.handle == pairing_params->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRING))
1000bc08:	891a      	ldrh	r2, [r3, #8]
1000bc0a:	428a      	cmp	r2, r1
1000bc0c:	d104      	bne.n	1000bc18 <ble_pair_done_handler+0x20>
1000bc0e:	001a      	movs	r2, r3
1000bc10:	325e      	adds	r2, #94	; 0x5e
1000bc12:	7812      	ldrb	r2, [r2, #0]
1000bc14:	2a03      	cmp	r2, #3
1000bc16:	d062      	beq.n	1000bcde <ble_pair_done_handler+0xe6>
	at_ble_pair_done_t *pairing_params;
	uint8_t idx;
	bool device_found = false;
	pairing_params = (at_ble_pair_done_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000bc18:	3401      	adds	r4, #1
1000bc1a:	b2e4      	uxtb	r4, r4
1000bc1c:	337c      	adds	r3, #124	; 0x7c
1000bc1e:	2c05      	cmp	r4, #5
1000bc20:	d1f2      	bne.n	1000bc08 <ble_pair_done_handler+0x10>
1000bc22:	e02b      	b.n	1000bc7c <ble_pair_done_handler+0x84>
			return AT_BLE_FAILURE;
		}		
	}
	else
	{
		if(ble_dev_info[idx].conn_state != BLE_DEVICE_DEFAULT_IDLE && ble_dev_info[idx].conn_state != BLE_DEVICE_DISCONNECTED) {
1000bc24:	0163      	lsls	r3, r4, #5
1000bc26:	1b1c      	subs	r4, r3, r4
1000bc28:	00a4      	lsls	r4, r4, #2
1000bc2a:	4b31      	ldr	r3, [pc, #196]	; (1000bcf0 <ble_pair_done_handler+0xf8>)
1000bc2c:	191c      	adds	r4, r3, r4
1000bc2e:	345e      	adds	r4, #94	; 0x5e
1000bc30:	7823      	ldrb	r3, [r4, #0]
1000bc32:	2b01      	cmp	r3, #1
1000bc34:	d913      	bls.n	1000bc5e <ble_pair_done_handler+0x66>
			DBG_LOG("Pairing failed...Disconnecting");
1000bc36:	482f      	ldr	r0, [pc, #188]	; (1000bcf4 <ble_pair_done_handler+0xfc>)
1000bc38:	4b2f      	ldr	r3, [pc, #188]	; (1000bcf8 <ble_pair_done_handler+0x100>)
1000bc3a:	4798      	blx	r3
1000bc3c:	482f      	ldr	r0, [pc, #188]	; (1000bcfc <ble_pair_done_handler+0x104>)
1000bc3e:	4b30      	ldr	r3, [pc, #192]	; (1000bd00 <ble_pair_done_handler+0x108>)
1000bc40:	4798      	blx	r3
			if(!(at_ble_disconnect(pairing_params->handle, AT_BLE_TERMINATED_BY_USER) == AT_BLE_SUCCESS))
1000bc42:	8868      	ldrh	r0, [r5, #2]
1000bc44:	2113      	movs	r1, #19
1000bc46:	4b2f      	ldr	r3, [pc, #188]	; (1000bd04 <ble_pair_done_handler+0x10c>)
1000bc48:	4798      	blx	r3
1000bc4a:	1e06      	subs	r6, r0, #0
1000bc4c:	d04b      	beq.n	1000bce6 <ble_pair_done_handler+0xee>
			{
				DBG_LOG("Disconnect Request Failed");
1000bc4e:	4829      	ldr	r0, [pc, #164]	; (1000bcf4 <ble_pair_done_handler+0xfc>)
1000bc50:	4b29      	ldr	r3, [pc, #164]	; (1000bcf8 <ble_pair_done_handler+0x100>)
1000bc52:	4798      	blx	r3
1000bc54:	482c      	ldr	r0, [pc, #176]	; (1000bd08 <ble_pair_done_handler+0x110>)
1000bc56:	4b2a      	ldr	r3, [pc, #168]	; (1000bd00 <ble_pair_done_handler+0x108>)
1000bc58:	4798      	blx	r3
				return AT_BLE_FAILURE;
1000bc5a:	26e2      	movs	r6, #226	; 0xe2
1000bc5c:	e043      	b.n	1000bce6 <ble_pair_done_handler+0xee>
			}
		}
	}
	return AT_BLE_SUCCESS;
1000bc5e:	2600      	movs	r6, #0
1000bc60:	e041      	b.n	1000bce6 <ble_pair_done_handler+0xee>
		}
	}
	
	if(pairing_params->status == AT_BLE_SUCCESS)
	{
		DBG_LOG("Pairing procedure completed successfully");
1000bc62:	4e24      	ldr	r6, [pc, #144]	; (1000bcf4 <ble_pair_done_handler+0xfc>)
1000bc64:	0030      	movs	r0, r6
1000bc66:	4d24      	ldr	r5, [pc, #144]	; (1000bcf8 <ble_pair_done_handler+0x100>)
1000bc68:	47a8      	blx	r5
1000bc6a:	4828      	ldr	r0, [pc, #160]	; (1000bd0c <ble_pair_done_handler+0x114>)
1000bc6c:	4c24      	ldr	r4, [pc, #144]	; (1000bd00 <ble_pair_done_handler+0x108>)
1000bc6e:	47a0      	blx	r4
				
			}
		}
		else
		{
			DBG_LOG("BLE Device not found to store the pairing info");
1000bc70:	0030      	movs	r0, r6
1000bc72:	47a8      	blx	r5
1000bc74:	4826      	ldr	r0, [pc, #152]	; (1000bd10 <ble_pair_done_handler+0x118>)
1000bc76:	47a0      	blx	r4
			return AT_BLE_FAILURE;
1000bc78:	26e2      	movs	r6, #226	; 0xe2
1000bc7a:	e034      	b.n	1000bce6 <ble_pair_done_handler+0xee>
			device_found = true;
			break;
		}
	}
	
	if(pairing_params->status == AT_BLE_SUCCESS)
1000bc7c:	792b      	ldrb	r3, [r5, #4]
1000bc7e:	2b00      	cmp	r3, #0
1000bc80:	d1d0      	bne.n	1000bc24 <ble_pair_done_handler+0x2c>
1000bc82:	e7ee      	b.n	1000bc62 <ble_pair_done_handler+0x6a>
	{
		DBG_LOG("Pairing procedure completed successfully");
1000bc84:	481b      	ldr	r0, [pc, #108]	; (1000bcf4 <ble_pair_done_handler+0xfc>)
1000bc86:	4b1c      	ldr	r3, [pc, #112]	; (1000bcf8 <ble_pair_done_handler+0x100>)
1000bc88:	4798      	blx	r3
1000bc8a:	4820      	ldr	r0, [pc, #128]	; (1000bd0c <ble_pair_done_handler+0x114>)
1000bc8c:	4b1c      	ldr	r3, [pc, #112]	; (1000bd00 <ble_pair_done_handler+0x108>)
1000bc8e:	4798      	blx	r3
		if (device_found)
		{
			ble_dev_info[idx].bond_info.auth = pairing_params->auth;
1000bc90:	782a      	ldrb	r2, [r5, #0]
1000bc92:	4b17      	ldr	r3, [pc, #92]	; (1000bcf0 <ble_pair_done_handler+0xf8>)
1000bc94:	4699      	mov	r9, r3
1000bc96:	0167      	lsls	r7, r4, #5
1000bc98:	1b3b      	subs	r3, r7, r4
1000bc9a:	009b      	lsls	r3, r3, #2
1000bc9c:	444b      	add	r3, r9
1000bc9e:	751a      	strb	r2, [r3, #20]
			ble_dev_info[idx].bond_info.status = pairing_params->status;
1000bca0:	792a      	ldrb	r2, [r5, #4]
1000bca2:	761a      	strb	r2, [r3, #24]
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRED;
1000bca4:	335e      	adds	r3, #94	; 0x5e
1000bca6:	2205      	movs	r2, #5
1000bca8:	701a      	strb	r2, [r3, #0]
			
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_csrk, (uint8_t *)&pairing_params->peer_csrk, sizeof(at_ble_CSRK_t));
1000bcaa:	1b38      	subs	r0, r7, r4
1000bcac:	0080      	lsls	r0, r0, #2
1000bcae:	4448      	add	r0, r9
1000bcb0:	3036      	adds	r0, #54	; 0x36
1000bcb2:	0029      	movs	r1, r5
1000bcb4:	3122      	adds	r1, #34	; 0x22
1000bcb6:	320b      	adds	r2, #11
1000bcb8:	4b16      	ldr	r3, [pc, #88]	; (1000bd14 <ble_pair_done_handler+0x11c>)
1000bcba:	4698      	mov	r8, r3
1000bcbc:	4798      	blx	r3
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_irk, (uint8_t *)&pairing_params->peer_irk, sizeof(at_ble_IRK_t));
1000bcbe:	1b38      	subs	r0, r7, r4
1000bcc0:	0080      	lsls	r0, r0, #2
1000bcc2:	4448      	add	r0, r9
1000bcc4:	3046      	adds	r0, #70	; 0x46
1000bcc6:	0029      	movs	r1, r5
1000bcc8:	3132      	adds	r1, #50	; 0x32
1000bcca:	2217      	movs	r2, #23
1000bccc:	47c0      	blx	r8
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_ltk, (uint8_t *)&pairing_params->peer_ltk, sizeof(at_ble_LTK_t));
1000bcce:	1b38      	subs	r0, r7, r4
1000bcd0:	0080      	lsls	r0, r0, #2
1000bcd2:	4448      	add	r0, r9
1000bcd4:	301a      	adds	r0, #26
1000bcd6:	1da9      	adds	r1, r5, #6
1000bcd8:	221c      	movs	r2, #28
1000bcda:	47c0      	blx	r8
1000bcdc:	e003      	b.n	1000bce6 <ble_pair_done_handler+0xee>
			device_found = true;
			break;
		}
	}
	
	if(pairing_params->status == AT_BLE_SUCCESS)
1000bcde:	792e      	ldrb	r6, [r5, #4]
1000bce0:	2e00      	cmp	r6, #0
1000bce2:	d0cf      	beq.n	1000bc84 <ble_pair_done_handler+0x8c>
1000bce4:	e79e      	b.n	1000bc24 <ble_pair_done_handler+0x2c>
				return AT_BLE_FAILURE;
			}
		}
	}
	return AT_BLE_SUCCESS;
}
1000bce6:	0030      	movs	r0, r6
1000bce8:	bc0c      	pop	{r2, r3}
1000bcea:	4690      	mov	r8, r2
1000bcec:	4699      	mov	r9, r3
1000bcee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000bcf0:	10019d50 	.word	0x10019d50
1000bcf4:	10016de8 	.word	0x10016de8
1000bcf8:	100127bd 	.word	0x100127bd
1000bcfc:	10017598 	.word	0x10017598
1000bd00:	1001269d 	.word	0x1001269d
1000bd04:	1000e3f5 	.word	0x1000e3f5
1000bd08:	100175b8 	.word	0x100175b8
1000bd0c:	100175d4 	.word	0x100175d4
1000bd10:	10017600 	.word	0x10017600
1000bd14:	10011c57 	.word	0x10011c57

1000bd18 <ble_conn_param_update_req>:
	ALL_UNUSED(conn_param_update);  //To avoid compiler warning
	return AT_BLE_SUCCESS;
}

at_ble_status_t ble_conn_param_update_req(void *params)
{
1000bd18:	b510      	push	{r4, lr}
	at_ble_conn_param_update_request_t * conn_param_req;
	conn_param_req = (at_ble_conn_param_update_request_t *)params;
	at_ble_conn_update_reply(conn_param_req->handle, true, 1, 120);
1000bd1a:	8800      	ldrh	r0, [r0, #0]
1000bd1c:	2378      	movs	r3, #120	; 0x78
1000bd1e:	2201      	movs	r2, #1
1000bd20:	2101      	movs	r1, #1
1000bd22:	4c02      	ldr	r4, [pc, #8]	; (1000bd2c <ble_conn_param_update_req+0x14>)
1000bd24:	47a0      	blx	r4
	return AT_BLE_SUCCESS;
}
1000bd26:	2000      	movs	r0, #0
1000bd28:	bd10      	pop	{r4, pc}
1000bd2a:	46c0      	nop			; (mov r8, r8)
1000bd2c:	1000e415 	.word	0x1000e415

1000bd30 <ble_slave_security_request_handler>:

at_ble_status_t ble_slave_security_request_handler(void* params)
{
1000bd30:	b5f0      	push	{r4, r5, r6, r7, lr}
1000bd32:	4657      	mov	r7, sl
1000bd34:	464e      	mov	r6, r9
1000bd36:	4645      	mov	r5, r8
1000bd38:	b4e0      	push	{r5, r6, r7}
1000bd3a:	b084      	sub	sp, #16
1000bd3c:	0004      	movs	r4, r0
	uint8_t i = 0, idx;
	at_ble_slave_sec_request_t* slave_sec_req;
	bool device_found = false;
	
	slave_sec_req = (at_ble_slave_sec_request_t*)params;	
	memset(&features, 0x00, sizeof(at_ble_pair_features_t));
1000bd3e:	2209      	movs	r2, #9
1000bd40:	2100      	movs	r1, #0
1000bd42:	a801      	add	r0, sp, #4
1000bd44:	4b6a      	ldr	r3, [pc, #424]	; (1000bef0 <ble_slave_security_request_handler+0x1c0>)
1000bd46:	4798      	blx	r3
		//@Todo Status is not handled in the Library
	//}

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == slave_sec_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000bd48:	8825      	ldrh	r5, [r4, #0]
1000bd4a:	496a      	ldr	r1, [pc, #424]	; (1000bef4 <ble_slave_security_request_handler+0x1c4>)
1000bd4c:	000a      	movs	r2, r1
1000bd4e:	2300      	movs	r3, #0
1000bd50:	8910      	ldrh	r0, [r2, #8]
1000bd52:	42a8      	cmp	r0, r5
1000bd54:	d116      	bne.n	1000bd84 <ble_slave_security_request_handler+0x54>
1000bd56:	0010      	movs	r0, r2
1000bd58:	305e      	adds	r0, #94	; 0x5e
1000bd5a:	7800      	ldrb	r0, [r0, #0]
1000bd5c:	2802      	cmp	r0, #2
1000bd5e:	d111      	bne.n	1000bd84 <ble_slave_security_request_handler+0x54>
		{
			device_found = true;
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_STATE;
1000bd60:	4864      	ldr	r0, [pc, #400]	; (1000bef4 <ble_slave_security_request_handler+0x1c4>)
1000bd62:	015a      	lsls	r2, r3, #5
1000bd64:	1ad6      	subs	r6, r2, r3
1000bd66:	00b6      	lsls	r6, r6, #2
1000bd68:	1986      	adds	r6, r0, r6
1000bd6a:	365e      	adds	r6, #94	; 0x5e
1000bd6c:	2206      	movs	r2, #6
1000bd6e:	7032      	strb	r2, [r6, #0]
		}
	}
	
	if (device_found)
	{
		if((ble_dev_info[idx].bond_info.auth & AT_BLE_AUTH_NO_MITM_BOND) && (slave_sec_req->bond == true))
1000bd70:	32f9      	adds	r2, #249	; 0xf9
1000bd72:	4013      	ands	r3, r2
1000bd74:	015a      	lsls	r2, r3, #5
1000bd76:	1ad2      	subs	r2, r2, r3
1000bd78:	0092      	lsls	r2, r2, #2
1000bd7a:	1882      	adds	r2, r0, r2
1000bd7c:	7d12      	ldrb	r2, [r2, #20]
1000bd7e:	07d0      	lsls	r0, r2, #31
1000bd80:	d405      	bmi.n	1000bd8e <ble_slave_security_request_handler+0x5e>
1000bd82:	e01b      	b.n	1000bdbc <ble_slave_security_request_handler+0x8c>
1000bd84:	3301      	adds	r3, #1
1000bd86:	327c      	adds	r2, #124	; 0x7c
		//at_ble_disconnect(slave_sec_req->handle, AT_BLE_AUTH_FAILURE);		
		//return AT_BLE_FAILURE;
		//@Todo Status is not handled in the Library
	//}

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000bd88:	2b05      	cmp	r3, #5
1000bd8a:	d1e1      	bne.n	1000bd50 <ble_slave_security_request_handler+0x20>
1000bd8c:	e01e      	b.n	1000bdcc <ble_slave_security_request_handler+0x9c>
		}
	}
	
	if (device_found)
	{
		if((ble_dev_info[idx].bond_info.auth & AT_BLE_AUTH_NO_MITM_BOND) && (slave_sec_req->bond == true))
1000bd8e:	78e0      	ldrb	r0, [r4, #3]
1000bd90:	2800      	cmp	r0, #0
1000bd92:	d013      	beq.n	1000bdbc <ble_slave_security_request_handler+0x8c>
		{
			if(at_ble_encryption_start(slave_sec_req->handle, &ble_dev_info[idx].bond_info.peer_ltk, ble_dev_info[idx].bond_info.auth) == AT_BLE_SUCCESS)
1000bd94:	0159      	lsls	r1, r3, #5
1000bd96:	1ac9      	subs	r1, r1, r3
1000bd98:	008b      	lsls	r3, r1, #2
1000bd9a:	4956      	ldr	r1, [pc, #344]	; (1000bef4 <ble_slave_security_request_handler+0x1c4>)
1000bd9c:	18c9      	adds	r1, r1, r3
1000bd9e:	311a      	adds	r1, #26
1000bda0:	8820      	ldrh	r0, [r4, #0]
1000bda2:	4b55      	ldr	r3, [pc, #340]	; (1000bef8 <ble_slave_security_request_handler+0x1c8>)
1000bda4:	4798      	blx	r3
1000bda6:	2800      	cmp	r0, #0
1000bda8:	d100      	bne.n	1000bdac <ble_slave_security_request_handler+0x7c>
1000bdaa:	e09b      	b.n	1000bee4 <ble_slave_security_request_handler+0x1b4>
			{
				return  AT_BLE_SUCCESS;
			}
			else
			{
				DBG_LOG("Encryption Not started");
1000bdac:	4853      	ldr	r0, [pc, #332]	; (1000befc <ble_slave_security_request_handler+0x1cc>)
1000bdae:	4b54      	ldr	r3, [pc, #336]	; (1000bf00 <ble_slave_security_request_handler+0x1d0>)
1000bdb0:	4798      	blx	r3
1000bdb2:	4854      	ldr	r0, [pc, #336]	; (1000bf04 <ble_slave_security_request_handler+0x1d4>)
1000bdb4:	4b54      	ldr	r3, [pc, #336]	; (1000bf08 <ble_slave_security_request_handler+0x1d8>)
1000bdb6:	4798      	blx	r3
				return AT_BLE_FAILURE;
1000bdb8:	20e2      	movs	r0, #226	; 0xe2
1000bdba:	e093      	b.n	1000bee4 <ble_slave_security_request_handler+0x1b4>
			}			
		}
		else
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000bdbc:	015a      	lsls	r2, r3, #5
1000bdbe:	1ad3      	subs	r3, r2, r3
1000bdc0:	009b      	lsls	r3, r3, #2
1000bdc2:	4a4c      	ldr	r2, [pc, #304]	; (1000bef4 <ble_slave_security_request_handler+0x1c4>)
1000bdc4:	18d3      	adds	r3, r2, r3
1000bdc6:	335e      	adds	r3, #94	; 0x5e
1000bdc8:	2202      	movs	r2, #2
1000bdca:	701a      	strb	r2, [r3, #0]
		}
	}
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == slave_sec_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000bdcc:	8825      	ldrh	r5, [r4, #0]
1000bdce:	2200      	movs	r2, #0
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
		}
	}
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000bdd0:	2300      	movs	r3, #0
	{
		if((ble_dev_info[idx].conn_info.handle == slave_sec_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000bdd2:	0016      	movs	r6, r2
1000bdd4:	8908      	ldrh	r0, [r1, #8]
1000bdd6:	42a8      	cmp	r0, r5
1000bdd8:	d10d      	bne.n	1000bdf6 <ble_slave_security_request_handler+0xc6>
1000bdda:	0008      	movs	r0, r1
1000bddc:	305e      	adds	r0, #94	; 0x5e
1000bdde:	7800      	ldrb	r0, [r0, #0]
1000bde0:	2802      	cmp	r0, #2
1000bde2:	d108      	bne.n	1000bdf6 <ble_slave_security_request_handler+0xc6>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
1000bde4:	0152      	lsls	r2, r2, #5
1000bde6:	1b92      	subs	r2, r2, r6
1000bde8:	0096      	lsls	r6, r2, #2
1000bdea:	4a42      	ldr	r2, [pc, #264]	; (1000bef4 <ble_slave_security_request_handler+0x1c4>)
1000bdec:	1992      	adds	r2, r2, r6
1000bdee:	325e      	adds	r2, #94	; 0x5e
1000bdf0:	2103      	movs	r1, #3
1000bdf2:	7011      	strb	r1, [r2, #0]
			break;
1000bdf4:	e005      	b.n	1000be02 <ble_slave_security_request_handler+0xd2>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
		}
	}
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000bdf6:	3301      	adds	r3, #1
1000bdf8:	b2db      	uxtb	r3, r3
1000bdfa:	3201      	adds	r2, #1
1000bdfc:	317c      	adds	r1, #124	; 0x7c
1000bdfe:	2b05      	cmp	r3, #5
1000be00:	d1e7      	bne.n	1000bdd2 <ble_slave_security_request_handler+0xa2>
			break;
		}
	}
	
	features.desired_auth =  BLE_AUTHENTICATION_LEVEL; 
	features.bond = slave_sec_req->bond;
1000be02:	aa01      	add	r2, sp, #4
1000be04:	78e1      	ldrb	r1, [r4, #3]
1000be06:	7091      	strb	r1, [r2, #2]
	features.mitm_protection = true;
1000be08:	2101      	movs	r1, #1
1000be0a:	7051      	strb	r1, [r2, #1]
	/* Device capabilities is display only , key will be generated
	and displayed */
	features.io_cababilities = AT_BLE_IO_CAP_KB_DISPLAY;
1000be0c:	3103      	adds	r1, #3
1000be0e:	7011      	strb	r1, [r2, #0]

	features.oob_avaiable = false;
			
	/* Distribution of LTK is required */
	if (ble_dev_info[idx].conn_info.peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE)
1000be10:	001f      	movs	r7, r3
1000be12:	015a      	lsls	r2, r3, #5
1000be14:	1ad2      	subs	r2, r2, r3
1000be16:	0092      	lsls	r2, r2, #2
1000be18:	4936      	ldr	r1, [pc, #216]	; (1000bef4 <ble_slave_security_request_handler+0x1c4>)
1000be1a:	5c52      	ldrb	r2, [r2, r1]
1000be1c:	2a02      	cmp	r2, #2
1000be1e:	d104      	bne.n	1000be2a <ble_slave_security_request_handler+0xfa>
	{
		features.initiator_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000be20:	aa01      	add	r2, sp, #4
1000be22:	2103      	movs	r1, #3
1000be24:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000be26:	71d1      	strb	r1, [r2, #7]
1000be28:	e003      	b.n	1000be32 <ble_slave_security_request_handler+0x102>
	}
	else
	{
		features.initiator_keys =   AT_BLE_KEY_DIST_ENC;
1000be2a:	aa01      	add	r2, sp, #4
1000be2c:	2101      	movs	r1, #1
1000be2e:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   AT_BLE_KEY_DIST_ENC;
1000be30:	71d1      	strb	r1, [r2, #7]
	}
	features.max_key_size = 16;
1000be32:	aa01      	add	r2, sp, #4
1000be34:	2110      	movs	r1, #16
1000be36:	7151      	strb	r1, [r2, #5]
	features.min_key_size = 16;
1000be38:	7111      	strb	r1, [r2, #4]
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
1000be3a:	017a      	lsls	r2, r7, #5
1000be3c:	1bd2      	subs	r2, r2, r7
1000be3e:	0092      	lsls	r2, r2, #2
1000be40:	492c      	ldr	r1, [pc, #176]	; (1000bef4 <ble_slave_security_request_handler+0x1c4>)
1000be42:	188a      	adds	r2, r1, r2
1000be44:	7e12      	ldrb	r2, [r2, #24]
1000be46:	2a40      	cmp	r2, #64	; 0x40
1000be48:	d134      	bne.n	1000beb4 <ble_slave_security_request_handler+0x184>
1000be4a:	015a      	lsls	r2, r3, #5
1000be4c:	1ad3      	subs	r3, r2, r3
1000be4e:	009b      	lsls	r3, r3, #2
1000be50:	469a      	mov	sl, r3
1000be52:	001e      	movs	r6, r3
1000be54:	3660      	adds	r6, #96	; 0x60
1000be56:	1876      	adds	r6, r6, r1
1000be58:	4655      	mov	r5, sl
1000be5a:	3568      	adds	r5, #104	; 0x68
1000be5c:	186d      	adds	r5, r5, r1
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
		{			
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000be5e:	4b2b      	ldr	r3, [pc, #172]	; (1000bf0c <ble_slave_security_request_handler+0x1dc>)
1000be60:	4699      	mov	r9, r3
1000be62:	230f      	movs	r3, #15
1000be64:	4698      	mov	r8, r3
1000be66:	47c8      	blx	r9
1000be68:	4643      	mov	r3, r8
1000be6a:	4018      	ands	r0, r3
1000be6c:	7030      	strb	r0, [r6, #0]
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
1000be6e:	47c8      	blx	r9
1000be70:	4643      	mov	r3, r8
1000be72:	4018      	ands	r0, r3
1000be74:	74b0      	strb	r0, [r6, #18]
1000be76:	3601      	adds	r6, #1
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
1000be78:	42ae      	cmp	r6, r5
1000be7a:	d1f4      	bne.n	1000be66 <ble_slave_security_request_handler+0x136>
1000be7c:	4656      	mov	r6, sl
1000be7e:	3670      	adds	r6, #112	; 0x70
1000be80:	4a1c      	ldr	r2, [pc, #112]	; (1000bef4 <ble_slave_security_request_handler+0x1c4>)
1000be82:	18b6      	adds	r6, r6, r2
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000be84:	4b21      	ldr	r3, [pc, #132]	; (1000bf0c <ble_slave_security_request_handler+0x1dc>)
1000be86:	4699      	mov	r9, r3
1000be88:	230f      	movs	r3, #15
1000be8a:	4698      	mov	r8, r3
1000be8c:	47c8      	blx	r9
1000be8e:	4643      	mov	r3, r8
1000be90:	4018      	ands	r0, r3
1000be92:	7028      	strb	r0, [r5, #0]
1000be94:	3501      	adds	r5, #1
		{			
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
1000be96:	42b5      	cmp	r5, r6
1000be98:	d1f8      	bne.n	1000be8c <ble_slave_security_request_handler+0x15c>
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
		}
		
		ble_dev_info[idx].host_ltk.ediv = rand()&0xffff;
1000be9a:	4b1c      	ldr	r3, [pc, #112]	; (1000bf0c <ble_slave_security_request_handler+0x1dc>)
1000be9c:	4798      	blx	r3
1000be9e:	017b      	lsls	r3, r7, #5
1000bea0:	1bdb      	subs	r3, r3, r7
1000bea2:	009b      	lsls	r3, r3, #2
1000bea4:	4a13      	ldr	r2, [pc, #76]	; (1000bef4 <ble_slave_security_request_handler+0x1c4>)
1000bea6:	18d3      	adds	r3, r2, r3
1000bea8:	001a      	movs	r2, r3
1000beaa:	3270      	adds	r2, #112	; 0x70
1000beac:	8010      	strh	r0, [r2, #0]
		ble_dev_info[idx].host_ltk.key_size = 16;
1000beae:	337a      	adds	r3, #122	; 0x7a
1000beb0:	2210      	movs	r2, #16
1000beb2:	701a      	strb	r2, [r3, #0]
	{
		/* Bonding information already exists */
		
	}

	if(at_ble_authenticate(slave_sec_req->handle, &features, &ble_dev_info[idx].host_ltk, NULL) != AT_BLE_SUCCESS)
1000beb4:	017a      	lsls	r2, r7, #5
1000beb6:	1bd7      	subs	r7, r2, r7
1000beb8:	00bf      	lsls	r7, r7, #2
1000beba:	3760      	adds	r7, #96	; 0x60
1000bebc:	4a0d      	ldr	r2, [pc, #52]	; (1000bef4 <ble_slave_security_request_handler+0x1c4>)
1000bebe:	18ba      	adds	r2, r7, r2
1000bec0:	8820      	ldrh	r0, [r4, #0]
1000bec2:	2300      	movs	r3, #0
1000bec4:	a901      	add	r1, sp, #4
1000bec6:	4c12      	ldr	r4, [pc, #72]	; (1000bf10 <ble_slave_security_request_handler+0x1e0>)
1000bec8:	47a0      	blx	r4
1000beca:	2800      	cmp	r0, #0
1000becc:	d00a      	beq.n	1000bee4 <ble_slave_security_request_handler+0x1b4>
	{
		features.bond = false;
1000bece:	ab01      	add	r3, sp, #4
1000bed0:	2200      	movs	r2, #0
1000bed2:	709a      	strb	r2, [r3, #2]
		features.mitm_protection = false;
1000bed4:	705a      	strb	r2, [r3, #1]
		DBG_LOG("Slave Security Req - Authentication Failed");
1000bed6:	4809      	ldr	r0, [pc, #36]	; (1000befc <ble_slave_security_request_handler+0x1cc>)
1000bed8:	4b09      	ldr	r3, [pc, #36]	; (1000bf00 <ble_slave_security_request_handler+0x1d0>)
1000beda:	4798      	blx	r3
1000bedc:	480d      	ldr	r0, [pc, #52]	; (1000bf14 <ble_slave_security_request_handler+0x1e4>)
1000bede:	4b0a      	ldr	r3, [pc, #40]	; (1000bf08 <ble_slave_security_request_handler+0x1d8>)
1000bee0:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000bee2:	20e2      	movs	r0, #226	; 0xe2
	}
	return AT_BLE_SUCCESS;
}
1000bee4:	b004      	add	sp, #16
1000bee6:	bc1c      	pop	{r2, r3, r4}
1000bee8:	4690      	mov	r8, r2
1000beea:	4699      	mov	r9, r3
1000beec:	46a2      	mov	sl, r4
1000beee:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000bef0:	10011c69 	.word	0x10011c69
1000bef4:	10019d50 	.word	0x10019d50
1000bef8:	1000ef65 	.word	0x1000ef65
1000befc:	10016de8 	.word	0x10016de8
1000bf00:	100127bd 	.word	0x100127bd
1000bf04:	10017630 	.word	0x10017630
1000bf08:	1001269d 	.word	0x1001269d
1000bf0c:	100127d1 	.word	0x100127d1
1000bf10:	1000ed79 	.word	0x1000ed79
1000bf14:	10017648 	.word	0x10017648

1000bf18 <ble_pair_request_handler>:

/** @brief function handles pair request */
at_ble_status_t ble_pair_request_handler(void *params)
{
1000bf18:	b5f0      	push	{r4, r5, r6, r7, lr}
1000bf1a:	465f      	mov	r7, fp
1000bf1c:	4656      	mov	r6, sl
1000bf1e:	464d      	mov	r5, r9
1000bf20:	4644      	mov	r4, r8
1000bf22:	b4f0      	push	{r4, r5, r6, r7}
1000bf24:	b085      	sub	sp, #20
1000bf26:	4683      	mov	fp, r0
	at_ble_pair_request_t* pair_req;
	pair_req = (at_ble_pair_request_t*)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == pair_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000bf28:	8804      	ldrh	r4, [r0, #0]
1000bf2a:	4a48      	ldr	r2, [pc, #288]	; (1000c04c <ble_pair_request_handler+0x134>)
1000bf2c:	2100      	movs	r1, #0
	at_ble_pair_features_t features;
	uint8_t i = 0, idx;
	at_ble_pair_request_t* pair_req;
	pair_req = (at_ble_pair_request_t*)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000bf2e:	2300      	movs	r3, #0
	{
		if((ble_dev_info[idx].conn_info.handle == pair_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000bf30:	8910      	ldrh	r0, [r2, #8]
1000bf32:	42a0      	cmp	r0, r4
1000bf34:	d10d      	bne.n	1000bf52 <ble_pair_request_handler+0x3a>
1000bf36:	0010      	movs	r0, r2
1000bf38:	305e      	adds	r0, #94	; 0x5e
1000bf3a:	7800      	ldrb	r0, [r0, #0]
1000bf3c:	2802      	cmp	r0, #2
1000bf3e:	d108      	bne.n	1000bf52 <ble_pair_request_handler+0x3a>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
1000bf40:	014a      	lsls	r2, r1, #5
1000bf42:	1a52      	subs	r2, r2, r1
1000bf44:	0095      	lsls	r5, r2, #2
1000bf46:	4a41      	ldr	r2, [pc, #260]	; (1000c04c <ble_pair_request_handler+0x134>)
1000bf48:	1952      	adds	r2, r2, r5
1000bf4a:	325e      	adds	r2, #94	; 0x5e
1000bf4c:	2103      	movs	r1, #3
1000bf4e:	7011      	strb	r1, [r2, #0]
			break;
1000bf50:	e005      	b.n	1000bf5e <ble_pair_request_handler+0x46>
	at_ble_pair_features_t features;
	uint8_t i = 0, idx;
	at_ble_pair_request_t* pair_req;
	pair_req = (at_ble_pair_request_t*)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000bf52:	3301      	adds	r3, #1
1000bf54:	b2db      	uxtb	r3, r3
1000bf56:	3101      	adds	r1, #1
1000bf58:	327c      	adds	r2, #124	; 0x7c
1000bf5a:	2b05      	cmp	r3, #5
1000bf5c:	d1e8      	bne.n	1000bf30 <ble_pair_request_handler+0x18>
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
			break;
		}
	}
	
	features.desired_auth =  BLE_AUTHENTICATION_LEVEL; 
1000bf5e:	aa01      	add	r2, sp, #4
1000bf60:	2100      	movs	r1, #0
1000bf62:	7211      	strb	r1, [r2, #8]
	features.bond = BLE_BOND_REQ;
1000bf64:	7091      	strb	r1, [r2, #2]
	features.mitm_protection = BLE_MITM_REQ;
1000bf66:	7051      	strb	r1, [r2, #1]
	/* Device capabilities is display only , key will be generated
	and displayed */
	features.io_cababilities = BLE_IO_CAPABALITIES;
1000bf68:	2003      	movs	r0, #3
1000bf6a:	7010      	strb	r0, [r2, #0]
	features.oob_avaiable = BLE_OOB_REQ;
1000bf6c:	70d1      	strb	r1, [r2, #3]
	
	/* Distribution of LTK is required */
	if (ble_dev_info[idx].conn_info.peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE)
1000bf6e:	001f      	movs	r7, r3
1000bf70:	015a      	lsls	r2, r3, #5
1000bf72:	1ad2      	subs	r2, r2, r3
1000bf74:	0092      	lsls	r2, r2, #2
1000bf76:	4935      	ldr	r1, [pc, #212]	; (1000c04c <ble_pair_request_handler+0x134>)
1000bf78:	5c52      	ldrb	r2, [r2, r1]
1000bf7a:	2a02      	cmp	r2, #2
1000bf7c:	d104      	bne.n	1000bf88 <ble_pair_request_handler+0x70>
	{
		/* Distribution of IRK is required */
		features.initiator_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000bf7e:	aa01      	add	r2, sp, #4
1000bf80:	2103      	movs	r1, #3
1000bf82:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000bf84:	71d1      	strb	r1, [r2, #7]
1000bf86:	e003      	b.n	1000bf90 <ble_pair_request_handler+0x78>
	}
	else
	{
		features.initiator_keys =   AT_BLE_KEY_DIST_ENC;
1000bf88:	aa01      	add	r2, sp, #4
1000bf8a:	2101      	movs	r1, #1
1000bf8c:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   AT_BLE_KEY_DIST_ENC;
1000bf8e:	71d1      	strb	r1, [r2, #7]
	}
			
	features.max_key_size = 16;
1000bf90:	aa01      	add	r2, sp, #4
1000bf92:	2110      	movs	r1, #16
1000bf94:	7151      	strb	r1, [r2, #5]
	features.min_key_size = 16;
1000bf96:	7111      	strb	r1, [r2, #4]
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
1000bf98:	017a      	lsls	r2, r7, #5
1000bf9a:	1bd2      	subs	r2, r2, r7
1000bf9c:	0092      	lsls	r2, r2, #2
1000bf9e:	492b      	ldr	r1, [pc, #172]	; (1000c04c <ble_pair_request_handler+0x134>)
1000bfa0:	188a      	adds	r2, r1, r2
1000bfa2:	7e12      	ldrb	r2, [r2, #24]
1000bfa4:	2a40      	cmp	r2, #64	; 0x40
1000bfa6:	d131      	bne.n	1000c00c <ble_pair_request_handler+0xf4>
1000bfa8:	015a      	lsls	r2, r3, #5
1000bfaa:	1ad3      	subs	r3, r2, r3
1000bfac:	009b      	lsls	r3, r3, #2
1000bfae:	469a      	mov	sl, r3
1000bfb0:	001d      	movs	r5, r3
1000bfb2:	3560      	adds	r5, #96	; 0x60
1000bfb4:	186d      	adds	r5, r5, r1
1000bfb6:	4654      	mov	r4, sl
1000bfb8:	3468      	adds	r4, #104	; 0x68
1000bfba:	1864      	adds	r4, r4, r1
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
		{						
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000bfbc:	4b24      	ldr	r3, [pc, #144]	; (1000c050 <ble_pair_request_handler+0x138>)
1000bfbe:	4699      	mov	r9, r3
1000bfc0:	260f      	movs	r6, #15
1000bfc2:	47c8      	blx	r9
1000bfc4:	4030      	ands	r0, r6
1000bfc6:	7028      	strb	r0, [r5, #0]
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
1000bfc8:	47c8      	blx	r9
1000bfca:	4030      	ands	r0, r6
1000bfcc:	74a8      	strb	r0, [r5, #18]
1000bfce:	3501      	adds	r5, #1
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
1000bfd0:	42a5      	cmp	r5, r4
1000bfd2:	d1f6      	bne.n	1000bfc2 <ble_pair_request_handler+0xaa>
1000bfd4:	4655      	mov	r5, sl
1000bfd6:	3570      	adds	r5, #112	; 0x70
1000bfd8:	4a1c      	ldr	r2, [pc, #112]	; (1000c04c <ble_pair_request_handler+0x134>)
1000bfda:	18ad      	adds	r5, r5, r2
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000bfdc:	4b1c      	ldr	r3, [pc, #112]	; (1000c050 <ble_pair_request_handler+0x138>)
1000bfde:	4699      	mov	r9, r3
1000bfe0:	230f      	movs	r3, #15
1000bfe2:	4698      	mov	r8, r3
1000bfe4:	47c8      	blx	r9
1000bfe6:	4643      	mov	r3, r8
1000bfe8:	4018      	ands	r0, r3
1000bfea:	7020      	strb	r0, [r4, #0]
1000bfec:	3401      	adds	r4, #1
		{						
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
1000bfee:	42ac      	cmp	r4, r5
1000bff0:	d1f8      	bne.n	1000bfe4 <ble_pair_request_handler+0xcc>
		for (i = 0; i < 16; i++)
		{
			DBG_LOG_CONT_DEV("0x%02X ", ble_dev_info[idx].host_ltk.key[i]);
		}
		
		ble_dev_info[idx].host_ltk.ediv = rand()&0xffff;
1000bff2:	4b17      	ldr	r3, [pc, #92]	; (1000c050 <ble_pair_request_handler+0x138>)
1000bff4:	4798      	blx	r3
1000bff6:	017b      	lsls	r3, r7, #5
1000bff8:	1bdb      	subs	r3, r3, r7
1000bffa:	009b      	lsls	r3, r3, #2
1000bffc:	4a13      	ldr	r2, [pc, #76]	; (1000c04c <ble_pair_request_handler+0x134>)
1000bffe:	18d3      	adds	r3, r2, r3
1000c000:	001a      	movs	r2, r3
1000c002:	3270      	adds	r2, #112	; 0x70
1000c004:	8010      	strh	r0, [r2, #0]
		ble_dev_info[idx].host_ltk.key_size = 16;
1000c006:	337a      	adds	r3, #122	; 0x7a
1000c008:	2210      	movs	r2, #16
1000c00a:	701a      	strb	r2, [r3, #0]
	}

	/* Send pairing response */
	DBG_LOG_DEV("Sending pairing response");

	if(at_ble_authenticate(pair_req->handle, &features, &ble_dev_info[idx].host_ltk, NULL) != AT_BLE_SUCCESS)
1000c00c:	017a      	lsls	r2, r7, #5
1000c00e:	1bd7      	subs	r7, r2, r7
1000c010:	00bf      	lsls	r7, r7, #2
1000c012:	3760      	adds	r7, #96	; 0x60
1000c014:	4a0d      	ldr	r2, [pc, #52]	; (1000c04c <ble_pair_request_handler+0x134>)
1000c016:	18ba      	adds	r2, r7, r2
1000c018:	465b      	mov	r3, fp
1000c01a:	8818      	ldrh	r0, [r3, #0]
1000c01c:	2300      	movs	r3, #0
1000c01e:	a901      	add	r1, sp, #4
1000c020:	4c0c      	ldr	r4, [pc, #48]	; (1000c054 <ble_pair_request_handler+0x13c>)
1000c022:	47a0      	blx	r4
1000c024:	2800      	cmp	r0, #0
1000c026:	d00a      	beq.n	1000c03e <ble_pair_request_handler+0x126>
	{
		features.bond = false;
1000c028:	ab01      	add	r3, sp, #4
1000c02a:	2200      	movs	r2, #0
1000c02c:	709a      	strb	r2, [r3, #2]
		features.mitm_protection = false;
1000c02e:	705a      	strb	r2, [r3, #1]
		DBG_LOG("Pair Request - Authentication Failed");
1000c030:	4809      	ldr	r0, [pc, #36]	; (1000c058 <ble_pair_request_handler+0x140>)
1000c032:	4b0a      	ldr	r3, [pc, #40]	; (1000c05c <ble_pair_request_handler+0x144>)
1000c034:	4798      	blx	r3
1000c036:	480a      	ldr	r0, [pc, #40]	; (1000c060 <ble_pair_request_handler+0x148>)
1000c038:	4b0a      	ldr	r3, [pc, #40]	; (1000c064 <ble_pair_request_handler+0x14c>)
1000c03a:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000c03c:	20e2      	movs	r0, #226	; 0xe2
	}
	return AT_BLE_SUCCESS;
}
1000c03e:	b005      	add	sp, #20
1000c040:	bc3c      	pop	{r2, r3, r4, r5}
1000c042:	4690      	mov	r8, r2
1000c044:	4699      	mov	r9, r3
1000c046:	46a2      	mov	sl, r4
1000c048:	46ab      	mov	fp, r5
1000c04a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000c04c:	10019d50 	.word	0x10019d50
1000c050:	100127d1 	.word	0x100127d1
1000c054:	1000ed79 	.word	0x1000ed79
1000c058:	10016de8 	.word	0x10016de8
1000c05c:	100127bd 	.word	0x100127bd
1000c060:	10017674 	.word	0x10017674
1000c064:	1001269d 	.word	0x1001269d

1000c068 <ble_pair_key_request_handler>:

/** @brief function handles pair key request */
at_ble_status_t ble_pair_key_request_handler (void *params)
{
1000c068:	b5f0      	push	{r4, r5, r6, r7, lr}
1000c06a:	b085      	sub	sp, #20
1000c06c:	0005      	movs	r5, r0
	at_ble_pair_key_request_t *pair_key;
	pair_key = (at_ble_pair_key_request_t *)params;
	/* Passkey has fixed value in this example MSB */
	uint8_t passkey[6]={'1','2','3','4','5','6'};
1000c06e:	2206      	movs	r2, #6
1000c070:	493d      	ldr	r1, [pc, #244]	; (1000c168 <ble_pair_key_request_handler+0x100>)
1000c072:	a802      	add	r0, sp, #8
1000c074:	4e3d      	ldr	r6, [pc, #244]	; (1000c16c <ble_pair_key_request_handler+0x104>)
1000c076:	47b0      	blx	r6
	uint8_t idx = 0;
        uint8_t pin;
        
	at_ble_pair_key_request_t pair_key_request;
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
1000c078:	ac01      	add	r4, sp, #4
1000c07a:	2204      	movs	r2, #4
1000c07c:	0029      	movs	r1, r5
1000c07e:	0020      	movs	r0, r4
1000c080:	47b0      	blx	r6
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
1000c082:	78e3      	ldrb	r3, [r4, #3]
1000c084:	2b00      	cmp	r3, #0
1000c086:	d162      	bne.n	1000c14e <ble_pair_key_request_handler+0xe6>
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
1000c088:	4839      	ldr	r0, [pc, #228]	; (1000c170 <ble_pair_key_request_handler+0x108>)
1000c08a:	4b3a      	ldr	r3, [pc, #232]	; (1000c174 <ble_pair_key_request_handler+0x10c>)
1000c08c:	4798      	blx	r3
1000c08e:	483a      	ldr	r0, [pc, #232]	; (1000c178 <ble_pair_key_request_handler+0x110>)
1000c090:	4b3a      	ldr	r3, [pc, #232]	; (1000c17c <ble_pair_key_request_handler+0x114>)
1000c092:	4798      	blx	r3
1000c094:	2600      	movs	r6, #0
		for (idx = 0; idx < 6;) {          
			pin = getchar_b11_timeout(CHECK_PAIRING_KEY_TIME_OUT);
1000c096:	4c3a      	ldr	r4, [pc, #232]	; (1000c180 <ble_pair_key_request_handler+0x118>)
				return AT_BLE_FAILURE;
			}
			
			if ((pin >= '0') && ( pin <= '9')) {
			  passkey[idx++] = pin;
			  DBG_LOG_CONT("%c", pin);
1000c098:	27ff      	movs	r7, #255	; 0xff
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
		for (idx = 0; idx < 6;) {          
			pin = getchar_b11_timeout(CHECK_PAIRING_KEY_TIME_OUT);
1000c09a:	201e      	movs	r0, #30
1000c09c:	47a0      	blx	r4
1000c09e:	b2c3      	uxtb	r3, r0

			if (!pin) {
1000c0a0:	2b00      	cmp	r3, #0
1000c0a2:	d11a      	bne.n	1000c0da <ble_pair_key_request_handler+0x72>
			DBG_LOG("Pin Timeout");
1000c0a4:	4f32      	ldr	r7, [pc, #200]	; (1000c170 <ble_pair_key_request_handler+0x108>)
1000c0a6:	0038      	movs	r0, r7
1000c0a8:	4e32      	ldr	r6, [pc, #200]	; (1000c174 <ble_pair_key_request_handler+0x10c>)
1000c0aa:	47b0      	blx	r6
1000c0ac:	4835      	ldr	r0, [pc, #212]	; (1000c184 <ble_pair_key_request_handler+0x11c>)
1000c0ae:	4c33      	ldr	r4, [pc, #204]	; (1000c17c <ble_pair_key_request_handler+0x114>)
1000c0b0:	47a0      	blx	r4
				DBG_LOG("Disconnecting ...");
1000c0b2:	0038      	movs	r0, r7
1000c0b4:	47b0      	blx	r6
1000c0b6:	4834      	ldr	r0, [pc, #208]	; (1000c188 <ble_pair_key_request_handler+0x120>)
1000c0b8:	47a0      	blx	r4
				if (!(at_ble_disconnect(pair_key->handle,
1000c0ba:	8828      	ldrh	r0, [r5, #0]
1000c0bc:	2113      	movs	r1, #19
1000c0be:	4b33      	ldr	r3, [pc, #204]	; (1000c18c <ble_pair_key_request_handler+0x124>)
1000c0c0:	4798      	blx	r3
1000c0c2:	0003      	movs	r3, r0
							AT_BLE_TERMINATED_BY_USER) == AT_BLE_SUCCESS)) {
					DBG_LOG("Disconnect Request Failed");
				}
				return AT_BLE_FAILURE;
1000c0c4:	20e2      	movs	r0, #226	; 0xe2
			pin = getchar_b11_timeout(CHECK_PAIRING_KEY_TIME_OUT);

			if (!pin) {
			DBG_LOG("Pin Timeout");
				DBG_LOG("Disconnecting ...");
				if (!(at_ble_disconnect(pair_key->handle,
1000c0c6:	2b00      	cmp	r3, #0
1000c0c8:	d04c      	beq.n	1000c164 <ble_pair_key_request_handler+0xfc>
							AT_BLE_TERMINATED_BY_USER) == AT_BLE_SUCCESS)) {
					DBG_LOG("Disconnect Request Failed");
1000c0ca:	4829      	ldr	r0, [pc, #164]	; (1000c170 <ble_pair_key_request_handler+0x108>)
1000c0cc:	4b29      	ldr	r3, [pc, #164]	; (1000c174 <ble_pair_key_request_handler+0x10c>)
1000c0ce:	4798      	blx	r3
1000c0d0:	482f      	ldr	r0, [pc, #188]	; (1000c190 <ble_pair_key_request_handler+0x128>)
1000c0d2:	4b2a      	ldr	r3, [pc, #168]	; (1000c17c <ble_pair_key_request_handler+0x114>)
1000c0d4:	4798      	blx	r3
				}
				return AT_BLE_FAILURE;
1000c0d6:	20e2      	movs	r0, #226	; 0xe2
1000c0d8:	e044      	b.n	1000c164 <ble_pair_key_request_handler+0xfc>
			}
			
			if ((pin >= '0') && ( pin <= '9')) {
1000c0da:	001a      	movs	r2, r3
1000c0dc:	3a30      	subs	r2, #48	; 0x30
1000c0de:	2a09      	cmp	r2, #9
1000c0e0:	d8db      	bhi.n	1000c09a <ble_pair_key_request_handler+0x32>
			  passkey[idx++] = pin;
1000c0e2:	aa02      	add	r2, sp, #8
1000c0e4:	54b3      	strb	r3, [r6, r2]
			  DBG_LOG_CONT("%c", pin);
1000c0e6:	4038      	ands	r0, r7
1000c0e8:	4b2a      	ldr	r3, [pc, #168]	; (1000c194 <ble_pair_key_request_handler+0x12c>)
1000c0ea:	4798      	blx	r3
1000c0ec:	3601      	adds	r6, #1
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
		for (idx = 0; idx < 6;) {          
1000c0ee:	2e06      	cmp	r6, #6
1000c0f0:	d026      	beq.n	1000c140 <ble_pair_key_request_handler+0xd8>
1000c0f2:	e7d2      	b.n	1000c09a <ble_pair_key_request_handler+0x32>
          {
            DBG_LOG("Entered Pass-code:");
          }
          else
          {
            DBG_LOG("Please Enter the following Pass-code(on other Device):");
1000c0f4:	481e      	ldr	r0, [pc, #120]	; (1000c170 <ble_pair_key_request_handler+0x108>)
1000c0f6:	4b1f      	ldr	r3, [pc, #124]	; (1000c174 <ble_pair_key_request_handler+0x10c>)
1000c0f8:	4798      	blx	r3
1000c0fa:	4827      	ldr	r0, [pc, #156]	; (1000c198 <ble_pair_key_request_handler+0x130>)
1000c0fc:	4b1f      	ldr	r3, [pc, #124]	; (1000c17c <ble_pair_key_request_handler+0x114>)
1000c0fe:	4798      	blx	r3
	at_ble_pair_key_request_t pair_key_request;
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
1000c100:	2400      	movs	r4, #0
          
          /* Convert passkey to ASCII format */
          for(idx=0; idx<AT_BLE_PASSKEY_LEN; idx++)
          {
                  passkey[idx] = (passkey[idx]);
                  DBG_LOG_CONT("%c",passkey[idx]);
1000c102:	4e24      	ldr	r6, [pc, #144]	; (1000c194 <ble_pair_key_request_handler+0x12c>)
          }
          
          /* Convert passkey to ASCII format */
          for(idx=0; idx<AT_BLE_PASSKEY_LEN; idx++)
          {
                  passkey[idx] = (passkey[idx]);
1000c104:	ab02      	add	r3, sp, #8
                  DBG_LOG_CONT("%c",passkey[idx]);
1000c106:	5ce0      	ldrb	r0, [r4, r3]
1000c108:	47b0      	blx	r6
1000c10a:	3401      	adds	r4, #1
          {
            DBG_LOG("Please Enter the following Pass-code(on other Device):");
          }
          
          /* Convert passkey to ASCII format */
          for(idx=0; idx<AT_BLE_PASSKEY_LEN; idx++)
1000c10c:	2c06      	cmp	r4, #6
1000c10e:	d1f9      	bne.n	1000c104 <ble_pair_key_request_handler+0x9c>
          {
                  passkey[idx] = (passkey[idx]);
                  DBG_LOG_CONT("%c",passkey[idx]);
          }		
          
          if(!((at_ble_pair_key_reply(pair_key->handle, pair_key_request.type, passkey)) == AT_BLE_SUCCESS))
1000c110:	ab01      	add	r3, sp, #4
1000c112:	7899      	ldrb	r1, [r3, #2]
1000c114:	8828      	ldrh	r0, [r5, #0]
1000c116:	aa02      	add	r2, sp, #8
1000c118:	4b20      	ldr	r3, [pc, #128]	; (1000c19c <ble_pair_key_request_handler+0x134>)
1000c11a:	4798      	blx	r3
1000c11c:	2800      	cmp	r0, #0
1000c11e:	d021      	beq.n	1000c164 <ble_pair_key_request_handler+0xfc>
          {
                  DBG_LOG("Pair-key reply failed");
1000c120:	4813      	ldr	r0, [pc, #76]	; (1000c170 <ble_pair_key_request_handler+0x108>)
1000c122:	4b14      	ldr	r3, [pc, #80]	; (1000c174 <ble_pair_key_request_handler+0x10c>)
1000c124:	4798      	blx	r3
1000c126:	481e      	ldr	r0, [pc, #120]	; (1000c1a0 <ble_pair_key_request_handler+0x138>)
1000c128:	4b14      	ldr	r3, [pc, #80]	; (1000c17c <ble_pair_key_request_handler+0x114>)
1000c12a:	4798      	blx	r3
		if(pair_key_request.type == AT_BLE_PAIR_OOB)
		{
			DBG_LOG("OOB Feature Not supported");
		}
	}
	return AT_BLE_SUCCESS;	
1000c12c:	2000      	movs	r0, #0
1000c12e:	e019      	b.n	1000c164 <ble_pair_key_request_handler+0xfc>
	}
	else 
	{
		if(pair_key_request.type == AT_BLE_PAIR_OOB)
		{
			DBG_LOG("OOB Feature Not supported");
1000c130:	480f      	ldr	r0, [pc, #60]	; (1000c170 <ble_pair_key_request_handler+0x108>)
1000c132:	4b10      	ldr	r3, [pc, #64]	; (1000c174 <ble_pair_key_request_handler+0x10c>)
1000c134:	4798      	blx	r3
1000c136:	481b      	ldr	r0, [pc, #108]	; (1000c1a4 <ble_pair_key_request_handler+0x13c>)
1000c138:	4b10      	ldr	r3, [pc, #64]	; (1000c17c <ble_pair_key_request_handler+0x114>)
1000c13a:	4798      	blx	r3
		}
	}
	return AT_BLE_SUCCESS;	
1000c13c:	2000      	movs	r0, #0
1000c13e:	e011      	b.n	1000c164 <ble_pair_key_request_handler+0xfc>
	if(((pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_DISPLAY) &&
	   (pair_key_request.type == AT_BLE_PAIR_PASSKEY)) || (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY))
	{
          if(pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY)
          {
            DBG_LOG("Entered Pass-code:");
1000c140:	480b      	ldr	r0, [pc, #44]	; (1000c170 <ble_pair_key_request_handler+0x108>)
1000c142:	4b0c      	ldr	r3, [pc, #48]	; (1000c174 <ble_pair_key_request_handler+0x10c>)
1000c144:	4798      	blx	r3
1000c146:	4818      	ldr	r0, [pc, #96]	; (1000c1a8 <ble_pair_key_request_handler+0x140>)
1000c148:	4b0c      	ldr	r3, [pc, #48]	; (1000c17c <ble_pair_key_request_handler+0x114>)
1000c14a:	4798      	blx	r3
1000c14c:	e7d8      	b.n	1000c100 <ble_pair_key_request_handler+0x98>
			} 
	  }
	}	
	
	/* Display passkey */
	if(((pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_DISPLAY) &&
1000c14e:	ab01      	add	r3, sp, #4
1000c150:	885a      	ldrh	r2, [r3, #2]
1000c152:	2380      	movs	r3, #128	; 0x80
1000c154:	005b      	lsls	r3, r3, #1
1000c156:	429a      	cmp	r2, r3
1000c158:	d0cc      	beq.n	1000c0f4 <ble_pair_key_request_handler+0x8c>
                  DBG_LOG("Pair-key reply failed");
          }
	}
	else 
	{
		if(pair_key_request.type == AT_BLE_PAIR_OOB)
1000c15a:	ab01      	add	r3, sp, #4
1000c15c:	789b      	ldrb	r3, [r3, #2]
1000c15e:	2b01      	cmp	r3, #1
1000c160:	d0e6      	beq.n	1000c130 <ble_pair_key_request_handler+0xc8>
		{
			DBG_LOG("OOB Feature Not supported");
		}
	}
	return AT_BLE_SUCCESS;	
1000c162:	2000      	movs	r0, #0
}
1000c164:	b005      	add	sp, #20
1000c166:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000c168:	10017420 	.word	0x10017420
1000c16c:	10011c57 	.word	0x10011c57
1000c170:	10016de8 	.word	0x10016de8
1000c174:	100127bd 	.word	0x100127bd
1000c178:	1001769c 	.word	0x1001769c
1000c17c:	1001269d 	.word	0x1001269d
1000c180:	1000cb71 	.word	0x1000cb71
1000c184:	100176c4 	.word	0x100176c4
1000c188:	100176d0 	.word	0x100176d0
1000c18c:	1000e3f5 	.word	0x1000e3f5
1000c190:	100175b8 	.word	0x100175b8
1000c194:	100126d1 	.word	0x100126d1
1000c198:	100176e4 	.word	0x100176e4
1000c19c:	1000eea9 	.word	0x1000eea9
1000c1a0:	1001771c 	.word	0x1001771c
1000c1a4:	10017734 	.word	0x10017734
1000c1a8:	10017750 	.word	0x10017750

1000c1ac <ble_encryption_request_handler>:
	return AT_BLE_SUCCESS;
}

/** @brief function handles encryption requests */
at_ble_status_t ble_encryption_request_handler(void *params)
{
1000c1ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000c1ae:	0006      	movs	r6, r0
	uint8_t idx;
	enc_req = (at_ble_encryption_request_t *)params;

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == enc_req->handle) && (ble_dev_info[idx].conn_state != BLE_DEVICE_DISCONNECTED) &&
1000c1b0:	8805      	ldrh	r5, [r0, #0]
1000c1b2:	4b2f      	ldr	r3, [pc, #188]	; (1000c270 <ble_encryption_request_handler+0xc4>)
1000c1b4:	2200      	movs	r2, #0
	bool key_found = false;
	bool device_found = false;
	uint8_t idx;
	enc_req = (at_ble_encryption_request_t *)params;

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000c1b6:	2400      	movs	r4, #0
	{
		if((ble_dev_info[idx].conn_info.handle == enc_req->handle) && (ble_dev_info[idx].conn_state != BLE_DEVICE_DISCONNECTED) &&
1000c1b8:	0010      	movs	r0, r2
1000c1ba:	8919      	ldrh	r1, [r3, #8]
1000c1bc:	42a9      	cmp	r1, r5
1000c1be:	d116      	bne.n	1000c1ee <ble_encryption_request_handler+0x42>
1000c1c0:	0019      	movs	r1, r3
1000c1c2:	315e      	adds	r1, #94	; 0x5e
1000c1c4:	7809      	ldrb	r1, [r1, #0]
1000c1c6:	2901      	cmp	r1, #1
1000c1c8:	d911      	bls.n	1000c1ee <ble_encryption_request_handler+0x42>
		(ble_dev_info[idx].conn_state != BLE_DEVICE_DEFAULT_IDLE))
		{
			device_found = true;
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_STATE;
1000c1ca:	4929      	ldr	r1, [pc, #164]	; (1000c270 <ble_encryption_request_handler+0xc4>)
1000c1cc:	0152      	lsls	r2, r2, #5
1000c1ce:	1a10      	subs	r0, r2, r0
1000c1d0:	0080      	lsls	r0, r0, #2
1000c1d2:	1808      	adds	r0, r1, r0
1000c1d4:	305e      	adds	r0, #94	; 0x5e
1000c1d6:	2306      	movs	r3, #6
1000c1d8:	7003      	strb	r3, [r0, #0]
	{
		DBG_LOG_DEV("host device ediv %x",ble_dev_info[idx].host_ltk.ediv);
		DBG_LOG_DEV("peer device ediv %x",ble_dev_info[idx].bond_info.peer_ltk.ediv);
		DBG_LOG_DEV("enc_req ediv %x", enc_req->ediv);
		DBG_LOG_DEV("The index is %d",idx);
		if((ble_dev_info[idx].host_ltk.ediv == enc_req->ediv)
1000c1da:	0162      	lsls	r2, r4, #5
1000c1dc:	1b13      	subs	r3, r2, r4
1000c1de:	009b      	lsls	r3, r3, #2
1000c1e0:	18cb      	adds	r3, r1, r3
1000c1e2:	3370      	adds	r3, #112	; 0x70
1000c1e4:	881a      	ldrh	r2, [r3, #0]
1000c1e6:	8873      	ldrh	r3, [r6, #2]
1000c1e8:	429a      	cmp	r2, r3
1000c1ea:	d113      	bne.n	1000c214 <ble_encryption_request_handler+0x68>
1000c1ec:	e006      	b.n	1000c1fc <ble_encryption_request_handler+0x50>
	bool key_found = false;
	bool device_found = false;
	uint8_t idx;
	enc_req = (at_ble_encryption_request_t *)params;

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000c1ee:	3401      	adds	r4, #1
1000c1f0:	b2e4      	uxtb	r4, r4
1000c1f2:	3201      	adds	r2, #1
1000c1f4:	337c      	adds	r3, #124	; 0x7c
1000c1f6:	2c05      	cmp	r4, #5
1000c1f8:	d1de      	bne.n	1000c1b8 <ble_encryption_request_handler+0xc>
1000c1fa:	e00b      	b.n	1000c214 <ble_encryption_request_handler+0x68>
		DBG_LOG_DEV("host device ediv %x",ble_dev_info[idx].host_ltk.ediv);
		DBG_LOG_DEV("peer device ediv %x",ble_dev_info[idx].bond_info.peer_ltk.ediv);
		DBG_LOG_DEV("enc_req ediv %x", enc_req->ediv);
		DBG_LOG_DEV("The index is %d",idx);
		if((ble_dev_info[idx].host_ltk.ediv == enc_req->ediv)
		&& !memcmp(&enc_req->nb[0],&ble_dev_info[idx].host_ltk.nb[0],8))
1000c1fc:	0161      	lsls	r1, r4, #5
1000c1fe:	1b09      	subs	r1, r1, r4
1000c200:	0089      	lsls	r1, r1, #2
1000c202:	4b1b      	ldr	r3, [pc, #108]	; (1000c270 <ble_encryption_request_handler+0xc4>)
1000c204:	1859      	adds	r1, r3, r1
1000c206:	3172      	adds	r1, #114	; 0x72
1000c208:	1d30      	adds	r0, r6, #4
1000c20a:	2208      	movs	r2, #8
1000c20c:	4b19      	ldr	r3, [pc, #100]	; (1000c274 <ble_encryption_request_handler+0xc8>)
1000c20e:	4798      	blx	r3
			DBG_LOG_DEV("ENC-Req: Key Found");
		}
	}
	
	
    if(key_found == false)
1000c210:	2800      	cmp	r0, #0
1000c212:	d015      	beq.n	1000c240 <ble_encryption_request_handler+0x94>
    {
	    DBG_LOG("Pairing information of peer device is not available.");
1000c214:	4f18      	ldr	r7, [pc, #96]	; (1000c278 <ble_encryption_request_handler+0xcc>)
1000c216:	0038      	movs	r0, r7
1000c218:	4e18      	ldr	r6, [pc, #96]	; (1000c27c <ble_encryption_request_handler+0xd0>)
1000c21a:	47b0      	blx	r6
1000c21c:	4818      	ldr	r0, [pc, #96]	; (1000c280 <ble_encryption_request_handler+0xd4>)
1000c21e:	4d19      	ldr	r5, [pc, #100]	; (1000c284 <ble_encryption_request_handler+0xd8>)
1000c220:	47a8      	blx	r5
	    DBG_LOG("Please unpair the device from peer device(mobile) settings menu and start pairing again");
1000c222:	0038      	movs	r0, r7
1000c224:	47b0      	blx	r6
1000c226:	4818      	ldr	r0, [pc, #96]	; (1000c288 <ble_encryption_request_handler+0xdc>)
1000c228:	47a8      	blx	r5
		at_ble_disconnect(ble_dev_info[idx].conn_info.handle, AT_BLE_AUTH_FAILURE);
1000c22a:	0163      	lsls	r3, r4, #5
1000c22c:	1b1c      	subs	r4, r3, r4
1000c22e:	00a4      	lsls	r4, r4, #2
1000c230:	4b0f      	ldr	r3, [pc, #60]	; (1000c270 <ble_encryption_request_handler+0xc4>)
1000c232:	191c      	adds	r4, r3, r4
1000c234:	8920      	ldrh	r0, [r4, #8]
1000c236:	2105      	movs	r1, #5
1000c238:	4b14      	ldr	r3, [pc, #80]	; (1000c28c <ble_encryption_request_handler+0xe0>)
1000c23a:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000c23c:	20e2      	movs	r0, #226	; 0xe2
1000c23e:	e016      	b.n	1000c26e <ble_encryption_request_handler+0xc2>
    }

	if(!(at_ble_encryption_request_reply(enc_req->handle, ble_dev_info[idx].bond_info.auth, key_found, &ble_dev_info[idx].host_ltk) == AT_BLE_SUCCESS))
1000c240:	0162      	lsls	r2, r4, #5
1000c242:	1b13      	subs	r3, r2, r4
1000c244:	009b      	lsls	r3, r3, #2
1000c246:	3360      	adds	r3, #96	; 0x60
1000c248:	4909      	ldr	r1, [pc, #36]	; (1000c270 <ble_encryption_request_handler+0xc4>)
1000c24a:	185b      	adds	r3, r3, r1
1000c24c:	1b14      	subs	r4, r2, r4
1000c24e:	00a4      	lsls	r4, r4, #2
1000c250:	190c      	adds	r4, r1, r4
1000c252:	7d21      	ldrb	r1, [r4, #20]
1000c254:	8830      	ldrh	r0, [r6, #0]
1000c256:	2201      	movs	r2, #1
1000c258:	4c0d      	ldr	r4, [pc, #52]	; (1000c290 <ble_encryption_request_handler+0xe4>)
1000c25a:	47a0      	blx	r4
1000c25c:	2800      	cmp	r0, #0
1000c25e:	d006      	beq.n	1000c26e <ble_encryption_request_handler+0xc2>
	{
		DBG_LOG("Encryption Request Reply Failed");
1000c260:	4805      	ldr	r0, [pc, #20]	; (1000c278 <ble_encryption_request_handler+0xcc>)
1000c262:	4b06      	ldr	r3, [pc, #24]	; (1000c27c <ble_encryption_request_handler+0xd0>)
1000c264:	4798      	blx	r3
1000c266:	480b      	ldr	r0, [pc, #44]	; (1000c294 <ble_encryption_request_handler+0xe8>)
1000c268:	4b06      	ldr	r3, [pc, #24]	; (1000c284 <ble_encryption_request_handler+0xd8>)
1000c26a:	4798      	blx	r3
	}
	else
	{      
		DBG_LOG_DEV("Encryption Request Reply");
	}
	return AT_BLE_SUCCESS;
1000c26c:	2000      	movs	r0, #0
}
1000c26e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000c270:	10019d50 	.word	0x10019d50
1000c274:	10011c39 	.word	0x10011c39
1000c278:	10016de8 	.word	0x10016de8
1000c27c:	100127bd 	.word	0x100127bd
1000c280:	10017764 	.word	0x10017764
1000c284:	1001269d 	.word	0x1001269d
1000c288:	1001779c 	.word	0x1001779c
1000c28c:	1000e3f5 	.word	0x1000e3f5
1000c290:	1000efdd 	.word	0x1000efdd
1000c294:	100177f4 	.word	0x100177f4

1000c298 <ble_mgr_events_callback_handler>:
}

bool ble_mgr_events_callback_handler(ble_mgr_event_cb_t event_cb_type, 
									ble_mgr_event_t event_type,
									const ble_event_callback_t *ble_event_handler)
{
1000c298:	b530      	push	{r4, r5, lr}
	uint8_t idx;
	uint8_t max_event_handler = 0;
	bool status = true;
	const ble_event_callback_t **ble_event_cb_ptr = NULL;
	if (ble_event_handler != NULL)
1000c29a:	2a00      	cmp	r2, #0
1000c29c:	d047      	beq.n	1000c32e <ble_mgr_events_callback_handler+0x96>
	{
		switch(event_type)
1000c29e:	2906      	cmp	r1, #6
1000c2a0:	d847      	bhi.n	1000c332 <ble_mgr_events_callback_handler+0x9a>
1000c2a2:	0089      	lsls	r1, r1, #2
1000c2a4:	4b28      	ldr	r3, [pc, #160]	; (1000c348 <ble_mgr_events_callback_handler+0xb0>)
1000c2a6:	585b      	ldr	r3, [r3, r1]
1000c2a8:	469f      	mov	pc, r3
			}
			break;
			
			case BLE_GATT_SERVER_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_gatt_server_event_cb;
1000c2aa:	4b28      	ldr	r3, [pc, #160]	; (1000c34c <ble_mgr_events_callback_handler+0xb4>)
				max_event_handler = MAX_GATT_SERVER_SUBSCRIBERS;
1000c2ac:	2405      	movs	r4, #5
1000c2ae:	e00a      	b.n	1000c2c6 <ble_mgr_events_callback_handler+0x2e>
			}
			break;
			
			case BLE_GATT_HTPT_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_htpt_event_cb;
1000c2b0:	4b27      	ldr	r3, [pc, #156]	; (1000c350 <ble_mgr_events_callback_handler+0xb8>)
				max_event_handler = MAX_HTPT_EVENT_SUBSCRIBERS;
1000c2b2:	2401      	movs	r4, #1
			}
			break;
1000c2b4:	e007      	b.n	1000c2c6 <ble_mgr_events_callback_handler+0x2e>
			
			case BLE_DTM_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_dtm_event_cb;
1000c2b6:	4b27      	ldr	r3, [pc, #156]	; (1000c354 <ble_mgr_events_callback_handler+0xbc>)
				max_event_handler = MAX_DTM_EVENT_SUBSCRIBERS;
1000c2b8:	2405      	movs	r4, #5
			}
			break;
1000c2ba:	e004      	b.n	1000c2c6 <ble_mgr_events_callback_handler+0x2e>
			
			case BLE_CUSTOM_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_custom_event_cb;
1000c2bc:	4b26      	ldr	r3, [pc, #152]	; (1000c358 <ble_mgr_events_callback_handler+0xc0>)
				max_event_handler = MAX_CUSTOM_EVENT_SUBSCRIBERS;
1000c2be:	2401      	movs	r4, #1
			}
			break;
1000c2c0:	e001      	b.n	1000c2c6 <ble_mgr_events_callback_handler+0x2e>
	{
		switch(event_type)
		{
			case BLE_GAP_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_gap_event_cb;
1000c2c2:	4b26      	ldr	r3, [pc, #152]	; (1000c35c <ble_mgr_events_callback_handler+0xc4>)
				max_event_handler = MAX_GAP_EVENT_SUBSCRIBERS;
1000c2c4:	2405      	movs	r4, #5
		}
		
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
			if (event_cb_type == REGISTER_CALL_BACK)
1000c2c6:	2800      	cmp	r0, #0
1000c2c8:	d116      	bne.n	1000c2f8 <ble_mgr_events_callback_handler+0x60>
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == NULL)
1000c2ca:	6819      	ldr	r1, [r3, #0]
1000c2cc:	2900      	cmp	r1, #0
1000c2ce:	d10b      	bne.n	1000c2e8 <ble_mgr_events_callback_handler+0x50>
1000c2d0:	e006      	b.n	1000c2e0 <ble_mgr_events_callback_handler+0x48>
1000c2d2:	001d      	movs	r5, r3
1000c2d4:	3304      	adds	r3, #4
1000c2d6:	1f18      	subs	r0, r3, #4
1000c2d8:	6800      	ldr	r0, [r0, #0]
1000c2da:	2800      	cmp	r0, #0
1000c2dc:	d106      	bne.n	1000c2ec <ble_mgr_events_callback_handler+0x54>
1000c2de:	e000      	b.n	1000c2e2 <ble_mgr_events_callback_handler+0x4a>
1000c2e0:	001d      	movs	r5, r3
					{
						ble_event_cb_ptr[idx] = ble_event_handler;
1000c2e2:	602a      	str	r2, [r5, #0]
						status = true; //Successfully registered to table
1000c2e4:	2101      	movs	r1, #1
						break;
1000c2e6:	e02c      	b.n	1000c342 <ble_mgr_events_callback_handler+0xaa>
1000c2e8:	3304      	adds	r3, #4
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
			if (event_cb_type == REGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == NULL)
1000c2ea:	2100      	movs	r1, #0
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
			if (event_cb_type == REGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
1000c2ec:	3101      	adds	r1, #1
1000c2ee:	b2c9      	uxtb	r1, r1
1000c2f0:	42a1      	cmp	r1, r4
1000c2f2:	d3ee      	bcc.n	1000c2d2 <ble_mgr_events_callback_handler+0x3a>
			break;
		}
		
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
1000c2f4:	2100      	movs	r1, #0
1000c2f6:	e024      	b.n	1000c342 <ble_mgr_events_callback_handler+0xaa>
1000c2f8:	2100      	movs	r1, #0
						status = true; //Successfully registered to table
						break;
					}
				}
			}
			else if(event_cb_type == UNREGISTER_CALL_BACK)
1000c2fa:	2801      	cmp	r0, #1
1000c2fc:	d121      	bne.n	1000c342 <ble_mgr_events_callback_handler+0xaa>
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == ble_event_handler)
1000c2fe:	6819      	ldr	r1, [r3, #0]
1000c300:	428a      	cmp	r2, r1
1000c302:	d10c      	bne.n	1000c31e <ble_mgr_events_callback_handler+0x86>
1000c304:	e006      	b.n	1000c314 <ble_mgr_events_callback_handler+0x7c>
1000c306:	001d      	movs	r5, r3
1000c308:	3304      	adds	r3, #4
1000c30a:	1f18      	subs	r0, r3, #4
1000c30c:	6800      	ldr	r0, [r0, #0]
1000c30e:	4282      	cmp	r2, r0
1000c310:	d107      	bne.n	1000c322 <ble_mgr_events_callback_handler+0x8a>
1000c312:	e000      	b.n	1000c316 <ble_mgr_events_callback_handler+0x7e>
1000c314:	001d      	movs	r5, r3
					{
						ble_event_cb_ptr[idx] = NULL;
1000c316:	2300      	movs	r3, #0
1000c318:	602b      	str	r3, [r5, #0]
						status = true;//Successfully unregistered from table
1000c31a:	2101      	movs	r1, #1
						break;
1000c31c:	e011      	b.n	1000c342 <ble_mgr_events_callback_handler+0xaa>
1000c31e:	3304      	adds	r3, #4
			}
			else if(event_cb_type == UNREGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == ble_event_handler)
1000c320:	2100      	movs	r1, #0
					}
				}
			}
			else if(event_cb_type == UNREGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
1000c322:	3101      	adds	r1, #1
1000c324:	b2c9      	uxtb	r1, r1
1000c326:	42a1      	cmp	r1, r4
1000c328:	d3ed      	bcc.n	1000c306 <ble_mgr_events_callback_handler+0x6e>
			break;
		}
		
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
1000c32a:	2100      	movs	r1, #0
1000c32c:	e009      	b.n	1000c342 <ble_mgr_events_callback_handler+0xaa>
			}			
		}
	}
	else
	{
		status = false; //Invalid parameter
1000c32e:	2100      	movs	r1, #0
1000c330:	e007      	b.n	1000c342 <ble_mgr_events_callback_handler+0xaa>
	uint8_t max_event_handler = 0;
	bool status = true;
	const ble_event_callback_t **ble_event_cb_ptr = NULL;
	if (ble_event_handler != NULL)
	{
		switch(event_type)
1000c332:	2100      	movs	r1, #0
1000c334:	e005      	b.n	1000c342 <ble_mgr_events_callback_handler+0xaa>
			}
			break;
			
			case BLE_GATT_CLIENT_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_gatt_client_event_cb;
1000c336:	4b0a      	ldr	r3, [pc, #40]	; (1000c360 <ble_mgr_events_callback_handler+0xc8>)
				max_event_handler = MAX_GATT_CLIENT_SUBSCRIBERS;
1000c338:	2405      	movs	r4, #5
1000c33a:	e7c4      	b.n	1000c2c6 <ble_mgr_events_callback_handler+0x2e>
			}
			break;
			
			case BLE_L2CAP_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_l2cap_event_cb;
1000c33c:	4b09      	ldr	r3, [pc, #36]	; (1000c364 <ble_mgr_events_callback_handler+0xcc>)
				max_event_handler = MAX_L2CAP_EVENT_SUBSCRIBERS;
1000c33e:	2401      	movs	r4, #1
1000c340:	e7c1      	b.n	1000c2c6 <ble_mgr_events_callback_handler+0x2e>
	else
	{
		status = false; //Invalid parameter
	}
	return status;
}
1000c342:	0008      	movs	r0, r1
1000c344:	bd30      	pop	{r4, r5, pc}
1000c346:	46c0      	nop			; (mov r8, r8)
1000c348:	10017404 	.word	0x10017404
1000c34c:	10019d3c 	.word	0x10019d3c
1000c350:	10019d38 	.word	0x10019d38
1000c354:	10019fc0 	.word	0x10019fc0
1000c358:	1001a574 	.word	0x1001a574
1000c35c:	10019fd4 	.word	0x10019fd4
1000c360:	10019fe8 	.word	0x10019fe8
1000c364:	1001a030 	.word	0x1001a030

1000c368 <ble_device_init>:
volatile uint32_t 	event_params_memory[1024] 	= {0};


/** @brief BLE device initialization */
void ble_device_init(at_ble_addr_t *addr)
{
1000c368:	b5f0      	push	{r4, r5, r6, r7, lr}
1000c36a:	465f      	mov	r7, fp
1000c36c:	4656      	mov	r6, sl
1000c36e:	464d      	mov	r5, r9
1000c370:	4644      	mov	r4, r8
1000c372:	b4f0      	push	{r4, r5, r6, r7}
1000c374:	b08d      	sub	sp, #52	; 0x34
1000c376:	0006      	movs	r6, r0
static bool ble_scan_duplication_check(at_ble_scan_info_t * info);
#endif

static void init_global_var(void)
{
	ble_user_event_cb = 0;
1000c378:	2400      	movs	r4, #0
1000c37a:	4b72      	ldr	r3, [pc, #456]	; (1000c544 <ble_device_init+0x1dc>)
1000c37c:	601c      	str	r4, [r3, #0]
	
	memset(&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
1000c37e:	2207      	movs	r2, #7
1000c380:	2100      	movs	r1, #0
1000c382:	4871      	ldr	r0, [pc, #452]	; (1000c548 <ble_device_init+0x1e0>)
1000c384:	4d71      	ldr	r5, [pc, #452]	; (1000c54c <ble_device_init+0x1e4>)
1000c386:	47a8      	blx	r5
	memset(&connected_state_info, 0, sizeof(at_ble_connected_t));
1000c388:	2212      	movs	r2, #18
1000c38a:	2100      	movs	r1, #0
1000c38c:	4870      	ldr	r0, [pc, #448]	; (1000c550 <ble_device_init+0x1e8>)
1000c38e:	47a8      	blx	r5
		
#if defined ATT_DB_MEMORY
	memset(att_db_data, 0, sizeof(uint32_t) * BLE_ATT_DB_MEMORY_SIZE/4);
1000c390:	4a70      	ldr	r2, [pc, #448]	; (1000c554 <ble_device_init+0x1ec>)
1000c392:	2100      	movs	r1, #0
1000c394:	4870      	ldr	r0, [pc, #448]	; (1000c558 <ble_device_init+0x1f0>)
1000c396:	47a8      	blx	r5
#endif

	scan_response_count = 0;
1000c398:	4b70      	ldr	r3, [pc, #448]	; (1000c55c <ble_device_init+0x1f4>)
1000c39a:	701c      	strb	r4, [r3, #0]
	memset(scan_info, 0, sizeof(scan_info));
1000c39c:	22cd      	movs	r2, #205	; 0xcd
1000c39e:	0092      	lsls	r2, r2, #2
1000c3a0:	2100      	movs	r1, #0
1000c3a2:	486f      	ldr	r0, [pc, #444]	; (1000c560 <ble_device_init+0x1f8>)
1000c3a4:	47a8      	blx	r5

	event = AT_BLE_UNDEFINED_EVENT;
1000c3a6:	4b6f      	ldr	r3, [pc, #444]	; (1000c564 <ble_device_init+0x1fc>)
1000c3a8:	701c      	strb	r4, [r3, #0]
	memset(ble_event_params, 0, BLE_EVENT_PARAM_MAX_SIZE);
1000c3aa:	2283      	movs	r2, #131	; 0x83
1000c3ac:	0092      	lsls	r2, r2, #2
1000c3ae:	2100      	movs	r1, #0
1000c3b0:	486d      	ldr	r0, [pc, #436]	; (1000c568 <ble_device_init+0x200>)
1000c3b2:	47a8      	blx	r5
{
	uint8_t idx;	
	char *dev_name = NULL;
	init_global_var();

	memset((uint8_t *)event_pool_memory, 0, sizeof(event_pool_memory));
1000c3b4:	4b6d      	ldr	r3, [pc, #436]	; (1000c56c <ble_device_init+0x204>)
1000c3b6:	469b      	mov	fp, r3
1000c3b8:	2380      	movs	r3, #128	; 0x80
1000c3ba:	00db      	lsls	r3, r3, #3
1000c3bc:	469a      	mov	sl, r3
1000c3be:	001a      	movs	r2, r3
1000c3c0:	2100      	movs	r1, #0
1000c3c2:	4658      	mov	r0, fp
1000c3c4:	47a8      	blx	r5
	memset((uint8_t *)event_params_memory, 0, sizeof(event_params_memory));
1000c3c6:	4b6a      	ldr	r3, [pc, #424]	; (1000c570 <ble_device_init+0x208>)
1000c3c8:	4699      	mov	r9, r3
1000c3ca:	2380      	movs	r3, #128	; 0x80
1000c3cc:	015b      	lsls	r3, r3, #5
1000c3ce:	4698      	mov	r8, r3
1000c3d0:	001a      	movs	r2, r3
1000c3d2:	2100      	movs	r1, #0
1000c3d4:	4648      	mov	r0, r9
1000c3d6:	47a8      	blx	r5

	memset(&pf_cfg, 0, sizeof(pf_cfg));
1000c3d8:	4f66      	ldr	r7, [pc, #408]	; (1000c574 <ble_device_init+0x20c>)
1000c3da:	221c      	movs	r2, #28
1000c3dc:	2100      	movs	r1, #0
1000c3de:	0038      	movs	r0, r7
1000c3e0:	47a8      	blx	r5

	pf_cfg.event_mem_pool.memStartAdd        = (uint8_t *)event_pool_memory;
1000c3e2:	465b      	mov	r3, fp
1000c3e4:	60bb      	str	r3, [r7, #8]
	pf_cfg.event_mem_pool.memSize            = sizeof(event_pool_memory);
1000c3e6:	4653      	mov	r3, sl
1000c3e8:	60fb      	str	r3, [r7, #12]
	pf_cfg.event_params_mem_pool.memStartAdd = (uint8_t *)event_params_memory;
1000c3ea:	464b      	mov	r3, r9
1000c3ec:	613b      	str	r3, [r7, #16]
	pf_cfg.event_params_mem_pool.memSize     = sizeof(event_params_memory);
1000c3ee:	4643      	mov	r3, r8
1000c3f0:	617b      	str	r3, [r7, #20]

	/* Initialize the BLE Event callbacks */
	for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_gap_event_cb[idx] = NULL;
1000c3f2:	4b61      	ldr	r3, [pc, #388]	; (1000c578 <ble_device_init+0x210>)
1000c3f4:	601c      	str	r4, [r3, #0]
1000c3f6:	605c      	str	r4, [r3, #4]
1000c3f8:	609c      	str	r4, [r3, #8]
1000c3fa:	60dc      	str	r4, [r3, #12]
1000c3fc:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_gatt_client_event_cb[idx] = NULL;
1000c3fe:	4b5f      	ldr	r3, [pc, #380]	; (1000c57c <ble_device_init+0x214>)
1000c400:	601c      	str	r4, [r3, #0]
1000c402:	605c      	str	r4, [r3, #4]
1000c404:	609c      	str	r4, [r3, #8]
1000c406:	60dc      	str	r4, [r3, #12]
1000c408:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
	{
		ble_mgr_gatt_server_event_cb[idx] = NULL;
1000c40a:	4b5d      	ldr	r3, [pc, #372]	; (1000c580 <ble_device_init+0x218>)
1000c40c:	601c      	str	r4, [r3, #0]
1000c40e:	605c      	str	r4, [r3, #4]
1000c410:	609c      	str	r4, [r3, #8]
1000c412:	60dc      	str	r4, [r3, #12]
1000c414:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_L2CAP_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_l2cap_event_cb[idx] = NULL;
1000c416:	4b5b      	ldr	r3, [pc, #364]	; (1000c584 <ble_device_init+0x21c>)
1000c418:	601c      	str	r4, [r3, #0]
	}
	
	for (idx = 0; idx < MAX_HTPT_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_htpt_event_cb[idx] = NULL;
1000c41a:	4b5b      	ldr	r3, [pc, #364]	; (1000c588 <ble_device_init+0x220>)
1000c41c:	601c      	str	r4, [r3, #0]
	}
	
	for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_dtm_event_cb[idx] = NULL;
1000c41e:	4b5b      	ldr	r3, [pc, #364]	; (1000c58c <ble_device_init+0x224>)
1000c420:	601c      	str	r4, [r3, #0]
1000c422:	605c      	str	r4, [r3, #4]
1000c424:	609c      	str	r4, [r3, #8]
1000c426:	60dc      	str	r4, [r3, #12]
1000c428:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_CUSTOM_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_custom_event_cb[idx] = NULL;
1000c42a:	4b59      	ldr	r3, [pc, #356]	; (1000c590 <ble_device_init+0x228>)
1000c42c:	601c      	str	r4, [r3, #0]
1000c42e:	4c59      	ldr	r4, [pc, #356]	; (1000c594 <ble_device_init+0x22c>)
1000c430:	239b      	movs	r3, #155	; 0x9b
1000c432:	009b      	lsls	r3, r3, #2
1000c434:	4698      	mov	r8, r3
1000c436:	44a0      	add	r8, r4
	}
        
    /* Set the BLE Device connection state */
    for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
    {
        memset(&ble_dev_info[idx], 0, sizeof(ble_connected_dev_info_t));
1000c438:	4f44      	ldr	r7, [pc, #272]	; (1000c54c <ble_device_init+0x1e4>)
		ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
		/* Set Invalid to Bonding information */
		ble_dev_info[idx].bond_info.status = AT_BLE_GAP_INVALID_PARAM;
1000c43a:	2540      	movs	r5, #64	; 0x40
	}
        
    /* Set the BLE Device connection state */
    for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
    {
        memset(&ble_dev_info[idx], 0, sizeof(ble_connected_dev_info_t));
1000c43c:	227c      	movs	r2, #124	; 0x7c
1000c43e:	2100      	movs	r1, #0
1000c440:	0020      	movs	r0, r4
1000c442:	47b8      	blx	r7
		ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
1000c444:	0023      	movs	r3, r4
1000c446:	335e      	adds	r3, #94	; 0x5e
1000c448:	2200      	movs	r2, #0
1000c44a:	701a      	strb	r2, [r3, #0]
		/* Set Invalid to Bonding information */
		ble_dev_info[idx].bond_info.status = AT_BLE_GAP_INVALID_PARAM;
1000c44c:	7625      	strb	r5, [r4, #24]
1000c44e:	347c      	adds	r4, #124	; 0x7c
	{
		ble_mgr_custom_event_cb[idx] = NULL;
	}
        
    /* Set the BLE Device connection state */
    for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000c450:	45a0      	cmp	r8, r4
1000c452:	d1f3      	bne.n	1000c43c <ble_device_init+0xd4>
		ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
		/* Set Invalid to Bonding information */
		ble_dev_info[idx].bond_info.status = AT_BLE_GAP_INVALID_PARAM;
    }
	/* Need to reset the count to 0 for storing it only in SRAM */
	ble_device_count = 0; 
1000c454:	4b50      	ldr	r3, [pc, #320]	; (1000c598 <ble_device_init+0x230>)
1000c456:	701a      	strb	r2, [r3, #0]
	
	
#if defined ATT_DB_MEMORY
	pf_cfg.memPool.memSize = BLE_ATT_DB_MEMORY_SIZE;
1000c458:	4846      	ldr	r0, [pc, #280]	; (1000c574 <ble_device_init+0x20c>)
1000c45a:	4b3e      	ldr	r3, [pc, #248]	; (1000c554 <ble_device_init+0x1ec>)
1000c45c:	6043      	str	r3, [r0, #4]
	pf_cfg.memPool.memStartAdd = (uint8_t *)att_db_data;
1000c45e:	4b3e      	ldr	r3, [pc, #248]	; (1000c558 <ble_device_init+0x1f0>)
1000c460:	6003      	str	r3, [r0, #0]
{
	/* Initialize the platform */
	DBG_LOG_DEV("[ble_init]\t\t\tInitializing SAMB11");
	
	/* Init BLE device */
	if(at_ble_init(args) != AT_BLE_SUCCESS)
1000c462:	4b4e      	ldr	r3, [pc, #312]	; (1000c59c <ble_device_init+0x234>)
1000c464:	4798      	blx	r3
1000c466:	2800      	cmp	r0, #0
1000c468:	d00b      	beq.n	1000c482 <ble_device_init+0x11a>
	{
		DBG_LOG("[ble_init]\t\tSAMB11 Initialization failed");
1000c46a:	4e4d      	ldr	r6, [pc, #308]	; (1000c5a0 <ble_device_init+0x238>)
1000c46c:	0030      	movs	r0, r6
1000c46e:	4d4d      	ldr	r5, [pc, #308]	; (1000c5a4 <ble_device_init+0x23c>)
1000c470:	47a8      	blx	r5
1000c472:	484d      	ldr	r0, [pc, #308]	; (1000c5a8 <ble_device_init+0x240>)
1000c474:	4c4d      	ldr	r4, [pc, #308]	; (1000c5ac <ble_device_init+0x244>)
1000c476:	47a0      	blx	r4
		DBG_LOG("[ble_init]\t\tPlease check the power and connection / hardware connector");	
1000c478:	0030      	movs	r0, r6
1000c47a:	47a8      	blx	r5
1000c47c:	484c      	ldr	r0, [pc, #304]	; (1000c5b0 <ble_device_init+0x248>)
1000c47e:	47a0      	blx	r4
1000c480:	e7fe      	b.n	1000c480 <ble_device_init+0x118>
#endif
	
	ble_init(&pf_cfg);

	/* Register it in first index of callback handler */
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK, 
1000c482:	4a4c      	ldr	r2, [pc, #304]	; (1000c5b4 <ble_device_init+0x24c>)
1000c484:	2100      	movs	r1, #0
1000c486:	2000      	movs	r0, #0
1000c488:	4c4b      	ldr	r4, [pc, #300]	; (1000c5b8 <ble_device_init+0x250>)
1000c48a:	47a0      	blx	r4
									BLE_GAP_EVENT_TYPE, 
									ble_mgr_gap_handle);
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK,
1000c48c:	4a4b      	ldr	r2, [pc, #300]	; (1000c5bc <ble_device_init+0x254>)
1000c48e:	2102      	movs	r1, #2
1000c490:	2000      	movs	r0, #0
1000c492:	47a0      	blx	r4
{
	if ((name == NULL) || (name_len < 1))
	{
		return AT_BLE_INVALID_PARAM;
	}
	return at_ble_device_name_set(name, name_len);
1000c494:	2109      	movs	r1, #9
1000c496:	484a      	ldr	r0, [pc, #296]	; (1000c5c0 <ble_device_init+0x258>)
1000c498:	4b4a      	ldr	r3, [pc, #296]	; (1000c5c4 <ble_device_init+0x25c>)
1000c49a:	4798      	blx	r3
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK,
									BLE_GATT_SERVER_EVENT_TYPE,
									ble_mgr_gatt_server_handle);
									
	dev_name = (char *)BLE_DEVICE_NAME;
	if (ble_set_device_name((uint8_t *)dev_name, strlen(dev_name)) != AT_BLE_SUCCESS)
1000c49c:	2800      	cmp	r0, #0
1000c49e:	d005      	beq.n	1000c4ac <ble_device_init+0x144>
	{
		DBG_LOG("Device name set failed");
1000c4a0:	483f      	ldr	r0, [pc, #252]	; (1000c5a0 <ble_device_init+0x238>)
1000c4a2:	4b40      	ldr	r3, [pc, #256]	; (1000c5a4 <ble_device_init+0x23c>)
1000c4a4:	4798      	blx	r3
1000c4a6:	4848      	ldr	r0, [pc, #288]	; (1000c5c8 <ble_device_init+0x260>)
1000c4a8:	4b40      	ldr	r3, [pc, #256]	; (1000c5ac <ble_device_init+0x244>)
1000c4aa:	4798      	blx	r3

/* Set BLE Address and device configuration, If address is NULL then it will use BD public address */
static void ble_set_dev_config(at_ble_addr_t *addr)
{
	at_ble_dev_config_t stDevConfig;
	at_ble_addr_t address = {AT_BLE_ADDRESS_PUBLIC, {0xAB, 0xCD, 0xEF, 0xAB, 0xCD, 0xEF}};
1000c4ac:	2207      	movs	r2, #7
1000c4ae:	4947      	ldr	r1, [pc, #284]	; (1000c5cc <ble_device_init+0x264>)
1000c4b0:	3108      	adds	r1, #8
1000c4b2:	4668      	mov	r0, sp
1000c4b4:	4b46      	ldr	r3, [pc, #280]	; (1000c5d0 <ble_device_init+0x268>)
1000c4b6:	4798      	blx	r3
	memset(&stDevConfig, 0, sizeof(at_ble_dev_config_t));
1000c4b8:	2226      	movs	r2, #38	; 0x26
1000c4ba:	2100      	movs	r1, #0
1000c4bc:	a802      	add	r0, sp, #8
1000c4be:	4b23      	ldr	r3, [pc, #140]	; (1000c54c <ble_device_init+0x1e4>)
1000c4c0:	4798      	blx	r3
	
	if (addr == NULL)
1000c4c2:	2e00      	cmp	r6, #0
1000c4c4:	d10c      	bne.n	1000c4e0 <ble_device_init+0x178>
	{		
		/* get BD address from BLE device */
		if(at_ble_addr_get(&address) != AT_BLE_SUCCESS)
1000c4c6:	4668      	mov	r0, sp
1000c4c8:	4b42      	ldr	r3, [pc, #264]	; (1000c5d4 <ble_device_init+0x26c>)
1000c4ca:	4798      	blx	r3
		{
			DBG_LOG("[ble_set_dev_config]\t\tBD address get failed");
		}
		
		/* Copy the BD address into address pointer */
		addr = &address;
1000c4cc:	466e      	mov	r6, sp
	memset(&stDevConfig, 0, sizeof(at_ble_dev_config_t));
	
	if (addr == NULL)
	{		
		/* get BD address from BLE device */
		if(at_ble_addr_get(&address) != AT_BLE_SUCCESS)
1000c4ce:	2800      	cmp	r0, #0
1000c4d0:	d006      	beq.n	1000c4e0 <ble_device_init+0x178>
		{
			DBG_LOG("[ble_set_dev_config]\t\tBD address get failed");
1000c4d2:	4833      	ldr	r0, [pc, #204]	; (1000c5a0 <ble_device_init+0x238>)
1000c4d4:	4b33      	ldr	r3, [pc, #204]	; (1000c5a4 <ble_device_init+0x23c>)
1000c4d6:	4798      	blx	r3
1000c4d8:	483f      	ldr	r0, [pc, #252]	; (1000c5d8 <ble_device_init+0x270>)
1000c4da:	4b34      	ldr	r3, [pc, #208]	; (1000c5ac <ble_device_init+0x244>)
1000c4dc:	4798      	blx	r3
		}
		
		/* Copy the BD address into address pointer */
		addr = &address;
1000c4de:	466e      	mov	r6, sp
	addr->addr[1],
	addr->addr[0], addr->type);
	
	/* Set device configuration */
	/* Device role */
	stDevConfig.role = (at_ble_dev_role_t)BLE_DEVICE_ROLE;
1000c4e0:	ac02      	add	r4, sp, #8
1000c4e2:	230a      	movs	r3, #10
1000c4e4:	7023      	strb	r3, [r4, #0]
	/* device renew duration */
	stDevConfig.renew_dur = AT_RENEW_DUR_VAL_MIN;
1000c4e6:	4b3d      	ldr	r3, [pc, #244]	; (1000c5dc <ble_device_init+0x274>)
1000c4e8:	8063      	strh	r3, [r4, #2]
	/* device address type */
	memcpy((uint8_t *)&stDevConfig.address, (uint8_t *)addr, sizeof(at_ble_addr_t));
1000c4ea:	2207      	movs	r2, #7
1000c4ec:	0031      	movs	r1, r6
1000c4ee:	a803      	add	r0, sp, #12
1000c4f0:	4b37      	ldr	r3, [pc, #220]	; (1000c5d0 <ble_device_init+0x268>)
1000c4f2:	4798      	blx	r3
	/* Attributes */
	stDevConfig.att_cfg.b2NamePerm = AT_BLE_WRITE_DISABLE;
1000c4f4:	2300      	movs	r3, #0
1000c4f6:	76e3      	strb	r3, [r4, #27]
	stDevConfig.att_cfg.b2AppearancePerm = AT_BLE_WRITE_DISABLE;
1000c4f8:	7723      	strb	r3, [r4, #28]
	stDevConfig.att_cfg.b1EnableSpcs = 0;
1000c4fa:	7763      	strb	r3, [r4, #29]
	stDevConfig.att_cfg.b1EnableServiceChanged = 0;
1000c4fc:	77a3      	strb	r3, [r4, #30]
	stDevConfig.att_cfg.b2Rfu = AT_BLE_WRITE_DISABLE;
1000c4fe:	77e3      	strb	r3, [r4, #31]
	/* Handles */
	stDevConfig.gap_start_hdl = AT_BLE_AUTO_ALLOC_HANDLE;
1000c500:	8423      	strh	r3, [r4, #32]
	stDevConfig.gatt_start_hdl = AT_BLE_AUTO_ALLOC_HANDLE;
1000c502:	8463      	strh	r3, [r4, #34]	; 0x22
	/* MTU */
	stDevConfig.max_mtu = AT_MTU_VAL_RECOMMENDED;
1000c504:	2380      	movs	r3, #128	; 0x80
1000c506:	009b      	lsls	r3, r3, #2
1000c508:	84a3      	strh	r3, [r4, #36]	; 0x24
	
	if(at_ble_set_dev_config(&stDevConfig) != AT_BLE_SUCCESS)
1000c50a:	0020      	movs	r0, r4
1000c50c:	4b34      	ldr	r3, [pc, #208]	; (1000c5e0 <ble_device_init+0x278>)
1000c50e:	4798      	blx	r3
1000c510:	2800      	cmp	r0, #0
1000c512:	d005      	beq.n	1000c520 <ble_device_init+0x1b8>
	{
		DBG_LOG("[ble_set_dev_config]\tSet BLE Device configuration failed");
1000c514:	4822      	ldr	r0, [pc, #136]	; (1000c5a0 <ble_device_init+0x238>)
1000c516:	4b23      	ldr	r3, [pc, #140]	; (1000c5a4 <ble_device_init+0x23c>)
1000c518:	4798      	blx	r3
1000c51a:	4832      	ldr	r0, [pc, #200]	; (1000c5e4 <ble_device_init+0x27c>)
1000c51c:	4b23      	ldr	r3, [pc, #140]	; (1000c5ac <ble_device_init+0x244>)
1000c51e:	4798      	blx	r3
	}
	
	if (at_ble_addr_set(addr) != AT_BLE_SUCCESS)
1000c520:	0030      	movs	r0, r6
1000c522:	4b31      	ldr	r3, [pc, #196]	; (1000c5e8 <ble_device_init+0x280>)
1000c524:	4798      	blx	r3
1000c526:	2800      	cmp	r0, #0
1000c528:	d005      	beq.n	1000c536 <ble_device_init+0x1ce>
	{
		DBG_LOG("[ble_set_dev_config]\tSet BLE Device Address failed");
1000c52a:	481d      	ldr	r0, [pc, #116]	; (1000c5a0 <ble_device_init+0x238>)
1000c52c:	4b1d      	ldr	r3, [pc, #116]	; (1000c5a4 <ble_device_init+0x23c>)
1000c52e:	4798      	blx	r3
1000c530:	482e      	ldr	r0, [pc, #184]	; (1000c5ec <ble_device_init+0x284>)
1000c532:	4b1e      	ldr	r3, [pc, #120]	; (1000c5ac <ble_device_init+0x244>)
1000c534:	4798      	blx	r3
	{
		DBG_LOG("Device name set failed");
	}
	
	ble_set_dev_config(addr);	
}
1000c536:	b00d      	add	sp, #52	; 0x34
1000c538:	bc3c      	pop	{r2, r3, r4, r5}
1000c53a:	4690      	mov	r8, r2
1000c53c:	4699      	mov	r9, r3
1000c53e:	46a2      	mov	sl, r4
1000c540:	46ab      	mov	fp, r5
1000c542:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000c544:	10018824 	.word	0x10018824
1000c548:	1001882c 	.word	0x1001882c
1000c54c:	10011c69 	.word	0x10011c69
1000c550:	10019ffc 	.word	0x10019ffc
1000c554:	000004e2 	.word	0x000004e2
1000c558:	10018344 	.word	0x10018344
1000c55c:	10018828 	.word	0x10018828
1000c560:	1001a034 	.word	0x1001a034
1000c564:	1001a02c 	.word	0x1001a02c
1000c568:	1001a368 	.word	0x1001a368
1000c56c:	10017f44 	.word	0x10017f44
1000c570:	10018834 	.word	0x10018834
1000c574:	1001a010 	.word	0x1001a010
1000c578:	10019fd4 	.word	0x10019fd4
1000c57c:	10019fe8 	.word	0x10019fe8
1000c580:	10019d3c 	.word	0x10019d3c
1000c584:	1001a030 	.word	0x1001a030
1000c588:	10019d38 	.word	0x10019d38
1000c58c:	10019fc0 	.word	0x10019fc0
1000c590:	1001a574 	.word	0x1001a574
1000c594:	10019d50 	.word	0x10019d50
1000c598:	10019fbc 	.word	0x10019fbc
1000c59c:	1000e001 	.word	0x1000e001
1000c5a0:	10016de8 	.word	0x10016de8
1000c5a4:	100127bd 	.word	0x100127bd
1000c5a8:	10017814 	.word	0x10017814
1000c5ac:	1001269d 	.word	0x1001269d
1000c5b0:	10017840 	.word	0x10017840
1000c5b4:	10017a94 	.word	0x10017a94
1000c5b8:	1000c299 	.word	0x1000c299
1000c5bc:	10017430 	.word	0x10017430
1000c5c0:	10017888 	.word	0x10017888
1000c5c4:	1000df19 	.word	0x1000df19
1000c5c8:	10017894 	.word	0x10017894
1000c5cc:	10017420 	.word	0x10017420
1000c5d0:	10011c57 	.word	0x10011c57
1000c5d4:	1000df4d 	.word	0x1000df4d
1000c5d8:	100178ac 	.word	0x100178ac
1000c5dc:	00003a98 	.word	0x00003a98
1000c5e0:	1000df71 	.word	0x1000df71
1000c5e4:	100178d8 	.word	0x100178d8
1000c5e8:	1000e1b5 	.word	0x1000e1b5
1000c5ec:	10017914 	.word	0x10017914

1000c5f0 <ble_send_slave_sec_request>:
	return AT_BLE_FAILURE;
}

/** @brief function to send slave security request */
at_ble_status_t ble_send_slave_sec_request(at_ble_handle_t conn_handle)
{
1000c5f0:	b510      	push	{r4, lr}
	#if BLE_PAIR_ENABLE
		if (at_ble_send_slave_sec_request(conn_handle, BLE_MITM_REQ, BLE_BOND_REQ) == AT_BLE_SUCCESS)
1000c5f2:	2200      	movs	r2, #0
1000c5f4:	2100      	movs	r1, #0
1000c5f6:	4b06      	ldr	r3, [pc, #24]	; (1000c610 <ble_send_slave_sec_request+0x20>)
1000c5f8:	4798      	blx	r3
1000c5fa:	2800      	cmp	r0, #0
1000c5fc:	d006      	beq.n	1000c60c <ble_send_slave_sec_request+0x1c>
			DBG_LOG_DEV("Slave security request successful");
			return AT_BLE_SUCCESS;
		}
		else
		{
			DBG_LOG("Slave security request failed");
1000c5fe:	4805      	ldr	r0, [pc, #20]	; (1000c614 <ble_send_slave_sec_request+0x24>)
1000c600:	4b05      	ldr	r3, [pc, #20]	; (1000c618 <ble_send_slave_sec_request+0x28>)
1000c602:	4798      	blx	r3
1000c604:	4805      	ldr	r0, [pc, #20]	; (1000c61c <ble_send_slave_sec_request+0x2c>)
1000c606:	4b06      	ldr	r3, [pc, #24]	; (1000c620 <ble_send_slave_sec_request+0x30>)
1000c608:	4798      	blx	r3
		}
	#endif
	return AT_BLE_FAILURE;
1000c60a:	20e2      	movs	r0, #226	; 0xe2
}
1000c60c:	bd10      	pop	{r4, pc}
1000c60e:	46c0      	nop			; (mov r8, r8)
1000c610:	1000ef25 	.word	0x1000ef25
1000c614:	10016de8 	.word	0x10016de8
1000c618:	100127bd 	.word	0x100127bd
1000c61c:	10017964 	.word	0x10017964
1000c620:	1001269d 	.word	0x1001269d

1000c624 <ble_connected_state_handler>:
	return status;
}

/** @brief function to handle connected event received from stack */
at_ble_status_t ble_connected_state_handler(void *params)
{
1000c624:	b5f0      	push	{r4, r5, r6, r7, lr}
1000c626:	465f      	mov	r7, fp
1000c628:	464e      	mov	r6, r9
1000c62a:	4645      	mov	r5, r8
1000c62c:	b4e0      	push	{r5, r6, r7}
1000c62e:	b09a      	sub	sp, #104	; 0x68
1000c630:	0005      	movs	r5, r0
	at_ble_connected_t *conn_params;
	uint8_t idx = 0;
	conn_params = (at_ble_connected_t *)params;
	bool peripheral_device_added = false;
	
	if (conn_params->conn_status == AT_BLE_SUCCESS)
1000c632:	7a86      	ldrb	r6, [r0, #10]
1000c634:	2e00      	cmp	r6, #0
1000c636:	d000      	beq.n	1000c63a <ble_connected_state_handler+0x16>
1000c638:	e0c6      	b.n	1000c7c8 <ble_connected_state_handler+0x1a4>
	{
		DBG_LOG("Connected to peer device with address 0x%02x%02x%02x%02x%02x%02x",
1000c63a:	4875      	ldr	r0, [pc, #468]	; (1000c810 <ble_connected_state_handler+0x1ec>)
1000c63c:	4f75      	ldr	r7, [pc, #468]	; (1000c814 <ble_connected_state_handler+0x1f0>)
1000c63e:	47b8      	blx	r7
1000c640:	792b      	ldrb	r3, [r5, #4]
1000c642:	796a      	ldrb	r2, [r5, #5]
1000c644:	79a9      	ldrb	r1, [r5, #6]
1000c646:	7868      	ldrb	r0, [r5, #1]
1000c648:	9002      	str	r0, [sp, #8]
1000c64a:	78a8      	ldrb	r0, [r5, #2]
1000c64c:	9001      	str	r0, [sp, #4]
1000c64e:	78e8      	ldrb	r0, [r5, #3]
1000c650:	9000      	str	r0, [sp, #0]
1000c652:	4871      	ldr	r0, [pc, #452]	; (1000c818 <ble_connected_state_handler+0x1f4>)
1000c654:	4c71      	ldr	r4, [pc, #452]	; (1000c81c <ble_connected_state_handler+0x1f8>)
1000c656:	47a0      	blx	r4
		conn_params->peer_addr.addr[3],
		conn_params->peer_addr.addr[2],
		conn_params->peer_addr.addr[1],
		conn_params->peer_addr.addr[0]);
		
		DBG_LOG("Connection Handle %d", conn_params->handle);
1000c658:	486d      	ldr	r0, [pc, #436]	; (1000c810 <ble_connected_state_handler+0x1ec>)
1000c65a:	47b8      	blx	r7
1000c65c:	8929      	ldrh	r1, [r5, #8]
1000c65e:	4870      	ldr	r0, [pc, #448]	; (1000c820 <ble_connected_state_handler+0x1fc>)
1000c660:	47a0      	blx	r4
		
		memcpy((uint8_t *)&connected_state_info, (uint8_t *)conn_params, sizeof(at_ble_connected_t));	
1000c662:	2212      	movs	r2, #18
1000c664:	0029      	movs	r1, r5
1000c666:	486f      	ldr	r0, [pc, #444]	; (1000c824 <ble_connected_state_handler+0x200>)
1000c668:	4b6f      	ldr	r3, [pc, #444]	; (1000c828 <ble_connected_state_handler+0x204>)
1000c66a:	4798      	blx	r3
		if(memcmp((uint8_t *)&ble_peripheral_dev_address, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000c66c:	9504      	str	r5, [sp, #16]
1000c66e:	2207      	movs	r2, #7
1000c670:	0029      	movs	r1, r5
1000c672:	486e      	ldr	r0, [pc, #440]	; (1000c82c <ble_connected_state_handler+0x208>)
1000c674:	4b6e      	ldr	r3, [pc, #440]	; (1000c830 <ble_connected_state_handler+0x20c>)
1000c676:	4798      	blx	r3
1000c678:	2800      	cmp	r0, #0
1000c67a:	d100      	bne.n	1000c67e <ble_connected_state_handler+0x5a>
1000c67c:	e0ad      	b.n	1000c7da <ble_connected_state_handler+0x1b6>
		{
			/* Peripheral Device */
			if (conn_params->peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE) 
1000c67e:	782b      	ldrb	r3, [r5, #0]
1000c680:	2b02      	cmp	r3, #2
1000c682:	d000      	beq.n	1000c686 <ble_connected_state_handler+0x62>
1000c684:	e0a9      	b.n	1000c7da <ble_connected_state_handler+0x1b6>
			{
				uint8_t idx1, idx2;
				uint16_t key_len = 0;
				uint8_t nb_keys = BLE_MAX_DEVICE_CONNECTED;
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
1000c686:	2250      	movs	r2, #80	; 0x50
1000c688:	2100      	movs	r1, #0
1000c68a:	a806      	add	r0, sp, #24
1000c68c:	4b69      	ldr	r3, [pc, #420]	; (1000c834 <ble_connected_state_handler+0x210>)
1000c68e:	4798      	blx	r3
1000c690:	4f69      	ldr	r7, [pc, #420]	; (1000c838 <ble_connected_state_handler+0x214>)
		{
			/* Peripheral Device */
			if (conn_params->peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE) 
			{
				uint8_t idx1, idx2;
				uint16_t key_len = 0;
1000c692:	2300      	movs	r3, #0
1000c694:	e00b      	b.n	1000c6ae <ble_connected_state_handler+0x8a>
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
				for (idx1 = 0; idx1 < BLE_MAX_DEVICE_CONNECTED; idx1++)
				{
					for (idx2 = 0; idx2 < AT_BLE_MAX_KEY_LEN; idx2++)
					{
						irk_key[key_len++] = ble_dev_info[idx1].bond_info.peer_irk.key[idx2];
1000c696:	1c59      	adds	r1, r3, #1
1000c698:	7814      	ldrb	r4, [r2, #0]
1000c69a:	a806      	add	r0, sp, #24
1000c69c:	54c4      	strb	r4, [r0, r3]
1000c69e:	3201      	adds	r2, #1
1000c6a0:	b28b      	uxth	r3, r1
				uint16_t key_len = 0;
				uint8_t nb_keys = BLE_MAX_DEVICE_CONNECTED;
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
				for (idx1 = 0; idx1 < BLE_MAX_DEVICE_CONNECTED; idx1++)
				{
					for (idx2 = 0; idx2 < AT_BLE_MAX_KEY_LEN; idx2++)
1000c6a2:	42b3      	cmp	r3, r6
1000c6a4:	d1f7      	bne.n	1000c696 <ble_connected_state_handler+0x72>
1000c6a6:	377c      	adds	r7, #124	; 0x7c
					{
						irk_key[key_len++] = ble_dev_info[idx1].bond_info.peer_irk.key[idx2];
1000c6a8:	1e33      	subs	r3, r6, #0
			{
				uint8_t idx1, idx2;
				uint16_t key_len = 0;
				uint8_t nb_keys = BLE_MAX_DEVICE_CONNECTED;
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
				for (idx1 = 0; idx1 < BLE_MAX_DEVICE_CONNECTED; idx1++)
1000c6aa:	2b50      	cmp	r3, #80	; 0x50
1000c6ac:	d004      	beq.n	1000c6b8 <ble_connected_state_handler+0x94>
1000c6ae:	001e      	movs	r6, r3
1000c6b0:	3610      	adds	r6, #16
1000c6b2:	b2b6      	uxth	r6, r6
	return status;
}

/** @brief function to handle connected event received from stack */
at_ble_status_t ble_connected_state_handler(void *params)
{
1000c6b4:	003a      	movs	r2, r7
1000c6b6:	e7ee      	b.n	1000c696 <ble_connected_state_handler+0x72>
					}
					
				}
				if (nb_keys)
				{
					if(at_ble_random_address_resolve(BLE_MAX_DEVICE_CONNECTED, &conn_params->peer_addr, irk_key) == AT_BLE_SUCCESS)
1000c6b8:	aa06      	add	r2, sp, #24
1000c6ba:	0029      	movs	r1, r5
1000c6bc:	2005      	movs	r0, #5
1000c6be:	4b5f      	ldr	r3, [pc, #380]	; (1000c83c <ble_connected_state_handler+0x218>)
1000c6c0:	4798      	blx	r3
1000c6c2:	1e06      	subs	r6, r0, #0
1000c6c4:	d100      	bne.n	1000c6c8 <ble_connected_state_handler+0xa4>
1000c6c6:	e09c      	b.n	1000c802 <ble_connected_state_handler+0x1de>
						DBG_LOG_DEV("Resolving Random address success**");
						return AT_BLE_SUCCESS;
					}
					else
					{
						DBG_LOG("Resolving Random address failed**");
1000c6c8:	4851      	ldr	r0, [pc, #324]	; (1000c810 <ble_connected_state_handler+0x1ec>)
1000c6ca:	4b52      	ldr	r3, [pc, #328]	; (1000c814 <ble_connected_state_handler+0x1f0>)
1000c6cc:	4798      	blx	r3
1000c6ce:	485c      	ldr	r0, [pc, #368]	; (1000c840 <ble_connected_state_handler+0x21c>)
1000c6d0:	4b52      	ldr	r3, [pc, #328]	; (1000c81c <ble_connected_state_handler+0x1f8>)
1000c6d2:	4798      	blx	r3
						return AT_BLE_FAILURE;
1000c6d4:	26e2      	movs	r6, #226	; 0xe2
1000c6d6:	e094      	b.n	1000c802 <ble_connected_state_handler+0x1de>
1000c6d8:	b2e7      	uxtb	r7, r4
		if (ble_device_count < BLE_MAX_DEVICE_CONNECTED)
		{
			bool conn_exists = false;
			for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
			{
				if(!memcmp((uint8_t *)&ble_dev_info[idx].conn_info.peer_addr, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000c6da:	9405      	str	r4, [sp, #20]
1000c6dc:	2207      	movs	r2, #7
1000c6de:	9904      	ldr	r1, [sp, #16]
1000c6e0:	4648      	mov	r0, r9
1000c6e2:	47d8      	blx	fp
1000c6e4:	2800      	cmp	r0, #0
1000c6e6:	d109      	bne.n	1000c6fc <ble_connected_state_handler+0xd8>
				{
					ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000c6e8:	9a05      	ldr	r2, [sp, #20]
1000c6ea:	0153      	lsls	r3, r2, #5
1000c6ec:	1a9b      	subs	r3, r3, r2
1000c6ee:	009a      	lsls	r2, r3, #2
1000c6f0:	4b54      	ldr	r3, [pc, #336]	; (1000c844 <ble_connected_state_handler+0x220>)
1000c6f2:	189b      	adds	r3, r3, r2
1000c6f4:	335e      	adds	r3, #94	; 0x5e
1000c6f6:	2202      	movs	r2, #2
1000c6f8:	701a      	strb	r2, [r3, #0]
1000c6fa:	e02b      	b.n	1000c754 <ble_connected_state_handler+0x130>
1000c6fc:	3401      	adds	r4, #1
1000c6fe:	237c      	movs	r3, #124	; 0x7c
1000c700:	469c      	mov	ip, r3
1000c702:	44e1      	add	r9, ip
		}
			
		if (ble_device_count < BLE_MAX_DEVICE_CONNECTED)
		{
			bool conn_exists = false;
			for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000c704:	2c05      	cmp	r4, #5
1000c706:	d1e7      	bne.n	1000c6d8 <ble_connected_state_handler+0xb4>
1000c708:	e072      	b.n	1000c7f0 <ble_connected_state_handler+0x1cc>
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
				{
					if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000c70a:	001c      	movs	r4, r3
1000c70c:	7811      	ldrb	r1, [r2, #0]
1000c70e:	2900      	cmp	r1, #0
1000c710:	d11a      	bne.n	1000c748 <ble_connected_state_handler+0x124>
1000c712:	e001      	b.n	1000c718 <ble_connected_state_handler+0xf4>
1000c714:	2400      	movs	r4, #0
1000c716:	2700      	movs	r7, #0
					{
						/* @Todo Need to Handle Random Address */
						memcpy(&ble_dev_info[idx].conn_info, (uint8_t *)conn_params, sizeof(at_ble_connected_t));
1000c718:	0163      	lsls	r3, r4, #5
1000c71a:	4699      	mov	r9, r3
1000c71c:	1b18      	subs	r0, r3, r4
1000c71e:	0080      	lsls	r0, r0, #2
1000c720:	4b48      	ldr	r3, [pc, #288]	; (1000c844 <ble_connected_state_handler+0x220>)
1000c722:	4698      	mov	r8, r3
1000c724:	4440      	add	r0, r8
1000c726:	2212      	movs	r2, #18
1000c728:	0029      	movs	r1, r5
1000c72a:	4b3f      	ldr	r3, [pc, #252]	; (1000c828 <ble_connected_state_handler+0x204>)
1000c72c:	4798      	blx	r3
						ble_device_count++;
1000c72e:	4a46      	ldr	r2, [pc, #280]	; (1000c848 <ble_connected_state_handler+0x224>)
1000c730:	7813      	ldrb	r3, [r2, #0]
1000c732:	3301      	adds	r3, #1
1000c734:	b2db      	uxtb	r3, r3
1000c736:	7013      	strb	r3, [r2, #0]
						ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000c738:	464b      	mov	r3, r9
1000c73a:	1b1b      	subs	r3, r3, r4
1000c73c:	009b      	lsls	r3, r3, #2
1000c73e:	4443      	add	r3, r8
1000c740:	335e      	adds	r3, #94	; 0x5e
1000c742:	2202      	movs	r2, #2
1000c744:	701a      	strb	r2, [r3, #0]
						break;
1000c746:	e005      	b.n	1000c754 <ble_connected_state_handler+0x130>
				}
			}
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000c748:	1c79      	adds	r1, r7, #1
1000c74a:	b2cf      	uxtb	r7, r1
1000c74c:	3301      	adds	r3, #1
1000c74e:	327c      	adds	r2, #124	; 0x7c
1000c750:	2f05      	cmp	r7, #5
1000c752:	d1da      	bne.n	1000c70a <ble_connected_state_handler+0xe6>
						break;
					}
				}
			}
			
			if(!memcmp((uint8_t *)&ble_peripheral_dev_address, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000c754:	2207      	movs	r2, #7
1000c756:	0029      	movs	r1, r5
1000c758:	4834      	ldr	r0, [pc, #208]	; (1000c82c <ble_connected_state_handler+0x208>)
1000c75a:	4b35      	ldr	r3, [pc, #212]	; (1000c830 <ble_connected_state_handler+0x20c>)
1000c75c:	4798      	blx	r3
1000c75e:	2800      	cmp	r0, #0
1000c760:	d10c      	bne.n	1000c77c <ble_connected_state_handler+0x158>
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_CENTRAL;
1000c762:	017b      	lsls	r3, r7, #5
1000c764:	1bdb      	subs	r3, r3, r7
1000c766:	009b      	lsls	r3, r3, #2
1000c768:	4a36      	ldr	r2, [pc, #216]	; (1000c844 <ble_connected_state_handler+0x220>)
1000c76a:	18d3      	adds	r3, r2, r3
1000c76c:	2205      	movs	r2, #5
1000c76e:	749a      	strb	r2, [r3, #18]
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
				peripheral_device_added = true;
			}
			/* Reset the ble_peripheral_dev_address to identify the initiator */
			memset((uint8_t *)&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
1000c770:	3202      	adds	r2, #2
1000c772:	2100      	movs	r1, #0
1000c774:	482d      	ldr	r0, [pc, #180]	; (1000c82c <ble_connected_state_handler+0x208>)
1000c776:	4b2f      	ldr	r3, [pc, #188]	; (1000c834 <ble_connected_state_handler+0x210>)
1000c778:	4798      	blx	r3
1000c77a:	e042      	b.n	1000c802 <ble_connected_state_handler+0x1de>
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_CENTRAL;
			}
			else
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
1000c77c:	4b31      	ldr	r3, [pc, #196]	; (1000c844 <ble_connected_state_handler+0x220>)
1000c77e:	4698      	mov	r8, r3
1000c780:	017c      	lsls	r4, r7, #5
1000c782:	1be3      	subs	r3, r4, r7
1000c784:	009b      	lsls	r3, r3, #2
1000c786:	4443      	add	r3, r8
1000c788:	220a      	movs	r2, #10
1000c78a:	749a      	strb	r2, [r3, #18]
				peripheral_device_added = true;
			}
			/* Reset the ble_peripheral_dev_address to identify the initiator */
			memset((uint8_t *)&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
1000c78c:	3a03      	subs	r2, #3
1000c78e:	2100      	movs	r1, #0
1000c790:	4826      	ldr	r0, [pc, #152]	; (1000c82c <ble_connected_state_handler+0x208>)
1000c792:	4b28      	ldr	r3, [pc, #160]	; (1000c834 <ble_connected_state_handler+0x210>)
1000c794:	4798      	blx	r3
			at_ble_disconnect(conn_params->handle, AT_BLE_TERMINATED_BY_USER);
		}		
		
#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
		
        if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
1000c796:	1be4      	subs	r4, r4, r7
1000c798:	00a4      	lsls	r4, r4, #2
1000c79a:	4444      	add	r4, r8
1000c79c:	7ca3      	ldrb	r3, [r4, #18]
1000c79e:	2b0a      	cmp	r3, #10
1000c7a0:	d12f      	bne.n	1000c802 <ble_connected_state_handler+0x1de>
1000c7a2:	e00d      	b.n	1000c7c0 <ble_connected_state_handler+0x19c>
			memset((uint8_t *)&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
					
		}
		else
		{
			DBG_LOG("Max number of connection reached: %d ===>Disconnecting...", ble_device_count);
1000c7a4:	481a      	ldr	r0, [pc, #104]	; (1000c810 <ble_connected_state_handler+0x1ec>)
1000c7a6:	4b1b      	ldr	r3, [pc, #108]	; (1000c814 <ble_connected_state_handler+0x1f0>)
1000c7a8:	4798      	blx	r3
1000c7aa:	4b27      	ldr	r3, [pc, #156]	; (1000c848 <ble_connected_state_handler+0x224>)
1000c7ac:	7819      	ldrb	r1, [r3, #0]
1000c7ae:	b2c9      	uxtb	r1, r1
1000c7b0:	4826      	ldr	r0, [pc, #152]	; (1000c84c <ble_connected_state_handler+0x228>)
1000c7b2:	4b1a      	ldr	r3, [pc, #104]	; (1000c81c <ble_connected_state_handler+0x1f8>)
1000c7b4:	4798      	blx	r3
			at_ble_disconnect(conn_params->handle, AT_BLE_TERMINATED_BY_USER);
1000c7b6:	8928      	ldrh	r0, [r5, #8]
1000c7b8:	2113      	movs	r1, #19
1000c7ba:	4b25      	ldr	r3, [pc, #148]	; (1000c850 <ble_connected_state_handler+0x22c>)
1000c7bc:	4798      	blx	r3
1000c7be:	e020      	b.n	1000c802 <ble_connected_state_handler+0x1de>
		
#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
		
        if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
        {
	 		ble_send_slave_sec_request(conn_params->handle);
1000c7c0:	8928      	ldrh	r0, [r5, #8]
1000c7c2:	4b24      	ldr	r3, [pc, #144]	; (1000c854 <ble_connected_state_handler+0x230>)
1000c7c4:	4798      	blx	r3
1000c7c6:	e01c      	b.n	1000c802 <ble_connected_state_handler+0x1de>
        }
#endif
	} 
	else
	{
		DBG_LOG("Device Connection Failed - Status: %d", conn_params->conn_status);
1000c7c8:	4811      	ldr	r0, [pc, #68]	; (1000c810 <ble_connected_state_handler+0x1ec>)
1000c7ca:	4b12      	ldr	r3, [pc, #72]	; (1000c814 <ble_connected_state_handler+0x1f0>)
1000c7cc:	4798      	blx	r3
1000c7ce:	7aa9      	ldrb	r1, [r5, #10]
1000c7d0:	4821      	ldr	r0, [pc, #132]	; (1000c858 <ble_connected_state_handler+0x234>)
1000c7d2:	4b12      	ldr	r3, [pc, #72]	; (1000c81c <ble_connected_state_handler+0x1f8>)
1000c7d4:	4798      	blx	r3
	}
	ALL_UNUSED(peripheral_device_added);
	return AT_BLE_SUCCESS;
1000c7d6:	2600      	movs	r6, #0
1000c7d8:	e013      	b.n	1000c802 <ble_connected_state_handler+0x1de>
					DBG_LOG_DEV("New Connection");
				}				
			}
		}
			
		if (ble_device_count < BLE_MAX_DEVICE_CONNECTED)
1000c7da:	4b1b      	ldr	r3, [pc, #108]	; (1000c848 <ble_connected_state_handler+0x224>)
1000c7dc:	781b      	ldrb	r3, [r3, #0]
1000c7de:	b2db      	uxtb	r3, r3
1000c7e0:	2b04      	cmp	r3, #4
1000c7e2:	d8df      	bhi.n	1000c7a4 <ble_connected_state_handler+0x180>
1000c7e4:	4b17      	ldr	r3, [pc, #92]	; (1000c844 <ble_connected_state_handler+0x220>)
1000c7e6:	4699      	mov	r9, r3
1000c7e8:	2400      	movs	r4, #0
		{
			bool conn_exists = false;
			for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
			{
				if(!memcmp((uint8_t *)&ble_dev_info[idx].conn_info.peer_addr, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000c7ea:	4b11      	ldr	r3, [pc, #68]	; (1000c830 <ble_connected_state_handler+0x20c>)
1000c7ec:	469b      	mov	fp, r3
1000c7ee:	e773      	b.n	1000c6d8 <ble_connected_state_handler+0xb4>
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
				{
					if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000c7f0:	235e      	movs	r3, #94	; 0x5e
1000c7f2:	4a14      	ldr	r2, [pc, #80]	; (1000c844 <ble_connected_state_handler+0x220>)
1000c7f4:	5cd3      	ldrb	r3, [r2, r3]
1000c7f6:	2b00      	cmp	r3, #0
1000c7f8:	d08c      	beq.n	1000c714 <ble_connected_state_handler+0xf0>
1000c7fa:	4a18      	ldr	r2, [pc, #96]	; (1000c85c <ble_connected_state_handler+0x238>)
1000c7fc:	2301      	movs	r3, #1
				}
			}
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000c7fe:	2701      	movs	r7, #1
1000c800:	e783      	b.n	1000c70a <ble_connected_state_handler+0xe6>
	{
		DBG_LOG("Device Connection Failed - Status: %d", conn_params->conn_status);
	}
	ALL_UNUSED(peripheral_device_added);
	return AT_BLE_SUCCESS;
}
1000c802:	0030      	movs	r0, r6
1000c804:	b01a      	add	sp, #104	; 0x68
1000c806:	bc1c      	pop	{r2, r3, r4}
1000c808:	4690      	mov	r8, r2
1000c80a:	4699      	mov	r9, r3
1000c80c:	46a3      	mov	fp, r4
1000c80e:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000c810:	10016de8 	.word	0x10016de8
1000c814:	100127bd 	.word	0x100127bd
1000c818:	10017984 	.word	0x10017984
1000c81c:	1001269d 	.word	0x1001269d
1000c820:	100179c8 	.word	0x100179c8
1000c824:	10019ffc 	.word	0x10019ffc
1000c828:	10011c57 	.word	0x10011c57
1000c82c:	1001882c 	.word	0x1001882c
1000c830:	10011c39 	.word	0x10011c39
1000c834:	10011c69 	.word	0x10011c69
1000c838:	10019d96 	.word	0x10019d96
1000c83c:	1000e421 	.word	0x1000e421
1000c840:	100179e0 	.word	0x100179e0
1000c844:	10019d50 	.word	0x10019d50
1000c848:	10019fbc 	.word	0x10019fbc
1000c84c:	10017a04 	.word	0x10017a04
1000c850:	1000e3f5 	.word	0x1000e3f5
1000c854:	1000c5f1 	.word	0x1000c5f1
1000c858:	10017a40 	.word	0x10017a40
1000c85c:	10019e2a 	.word	0x10019e2a

1000c860 <ble_resolv_rand_addr_handler>:

at_ble_status_t ble_resolv_rand_addr_handler(void *params)
{
1000c860:	b5f0      	push	{r4, r5, r6, r7, lr}
1000c862:	4647      	mov	r7, r8
1000c864:	b480      	push	{r7}
	uint8_t idx;	
	bool device_found = false;
	bool peripheral_device_added = false;
	ble_resolv_rand_addr_status = (at_ble_resolv_rand_addr_status_t *)params;	
	
	if(ble_resolv_rand_addr_status->status == AT_BLE_SUCCESS)
1000c866:	7803      	ldrb	r3, [r0, #0]
1000c868:	2b00      	cmp	r3, #0
1000c86a:	d141      	bne.n	1000c8f0 <ble_resolv_rand_addr_handler+0x90>
1000c86c:	4d2f      	ldr	r5, [pc, #188]	; (1000c92c <ble_resolv_rand_addr_handler+0xcc>)
1000c86e:	2400      	movs	r4, #0
	{		
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
		{
			/* Check the Resolved Address */
			if (!memcmp((uint8_t *)ble_resolv_rand_addr_status->irk, (uint8_t *)ble_dev_info[idx].bond_info.peer_irk.key, AT_BLE_MAX_KEY_LEN))
1000c870:	1c46      	adds	r6, r0, #1
1000c872:	4f2f      	ldr	r7, [pc, #188]	; (1000c930 <ble_resolv_rand_addr_handler+0xd0>)
1000c874:	2210      	movs	r2, #16
1000c876:	0029      	movs	r1, r5
1000c878:	0030      	movs	r0, r6
1000c87a:	47b8      	blx	r7
1000c87c:	2800      	cmp	r0, #0
1000c87e:	d03f      	beq.n	1000c900 <ble_resolv_rand_addr_handler+0xa0>
	bool peripheral_device_added = false;
	ble_resolv_rand_addr_status = (at_ble_resolv_rand_addr_status_t *)params;	
	
	if(ble_resolv_rand_addr_status->status == AT_BLE_SUCCESS)
	{		
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000c880:	3401      	adds	r4, #1
1000c882:	b2e4      	uxtb	r4, r4
1000c884:	357c      	adds	r5, #124	; 0x7c
1000c886:	2c05      	cmp	r4, #5
1000c888:	d1f4      	bne.n	1000c874 <ble_resolv_rand_addr_handler+0x14>
1000c88a:	e031      	b.n	1000c8f0 <ble_resolv_rand_addr_handler+0x90>
1000c88c:	b2dd      	uxtb	r5, r3
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
		{
			if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000c88e:	001c      	movs	r4, r3
1000c890:	7811      	ldrb	r1, [r2, #0]
1000c892:	2900      	cmp	r1, #0
1000c894:	d122      	bne.n	1000c8dc <ble_resolv_rand_addr_handler+0x7c>
1000c896:	e001      	b.n	1000c89c <ble_resolv_rand_addr_handler+0x3c>
1000c898:	2400      	movs	r4, #0
1000c89a:	2500      	movs	r5, #0
			{
				memcpy(&ble_dev_info[idx].conn_info, (uint8_t *)&connected_state_info, sizeof(at_ble_connected_t));
1000c89c:	4b25      	ldr	r3, [pc, #148]	; (1000c934 <ble_resolv_rand_addr_handler+0xd4>)
1000c89e:	4698      	mov	r8, r3
1000c8a0:	0166      	lsls	r6, r4, #5
1000c8a2:	1b37      	subs	r7, r6, r4
1000c8a4:	00bf      	lsls	r7, r7, #2
1000c8a6:	4447      	add	r7, r8
1000c8a8:	2212      	movs	r2, #18
1000c8aa:	4923      	ldr	r1, [pc, #140]	; (1000c938 <ble_resolv_rand_addr_handler+0xd8>)
1000c8ac:	0038      	movs	r0, r7
1000c8ae:	4b23      	ldr	r3, [pc, #140]	; (1000c93c <ble_resolv_rand_addr_handler+0xdc>)
1000c8b0:	4798      	blx	r3
				ble_device_count++;
1000c8b2:	4a23      	ldr	r2, [pc, #140]	; (1000c940 <ble_resolv_rand_addr_handler+0xe0>)
1000c8b4:	7813      	ldrb	r3, [r2, #0]
1000c8b6:	3301      	adds	r3, #1
1000c8b8:	b2db      	uxtb	r3, r3
1000c8ba:	7013      	strb	r3, [r2, #0]
				ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000c8bc:	375e      	adds	r7, #94	; 0x5e
1000c8be:	2302      	movs	r3, #2
1000c8c0:	703b      	strb	r3, [r7, #0]
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
1000c8c2:	1b34      	subs	r4, r6, r4
1000c8c4:	00a4      	lsls	r4, r4, #2
1000c8c6:	4444      	add	r4, r8
1000c8c8:	3308      	adds	r3, #8
1000c8ca:	74a3      	strb	r3, [r4, #18]
			}
		}
	}
	DBG_LOG_DEV("Device idx:%d",idx);
	#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
	if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
1000c8cc:	016b      	lsls	r3, r5, #5
1000c8ce:	1b5d      	subs	r5, r3, r5
1000c8d0:	00ad      	lsls	r5, r5, #2
1000c8d2:	4445      	add	r5, r8
1000c8d4:	7cab      	ldrb	r3, [r5, #18]
1000c8d6:	2b0a      	cmp	r3, #10
1000c8d8:	d123      	bne.n	1000c922 <ble_resolv_rand_addr_handler+0xc2>
1000c8da:	e004      	b.n	1000c8e6 <ble_resolv_rand_addr_handler+0x86>
1000c8dc:	3301      	adds	r3, #1
1000c8de:	327c      	adds	r2, #124	; 0x7c
		peripheral_device_added = true;
	}
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000c8e0:	2b05      	cmp	r3, #5
1000c8e2:	d1d3      	bne.n	1000c88c <ble_resolv_rand_addr_handler+0x2c>
1000c8e4:	e01d      	b.n	1000c922 <ble_resolv_rand_addr_handler+0xc2>
	}
	DBG_LOG_DEV("Device idx:%d",idx);
	#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
	if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
	{
		ble_send_slave_sec_request(connected_state_info.handle);
1000c8e6:	4b14      	ldr	r3, [pc, #80]	; (1000c938 <ble_resolv_rand_addr_handler+0xd8>)
1000c8e8:	8918      	ldrh	r0, [r3, #8]
1000c8ea:	4b16      	ldr	r3, [pc, #88]	; (1000c944 <ble_resolv_rand_addr_handler+0xe4>)
1000c8ec:	4798      	blx	r3
	}
	#endif
	ALL_UNUSED(peripheral_device_added);

	return AT_BLE_SUCCESS;
1000c8ee:	e018      	b.n	1000c922 <ble_resolv_rand_addr_handler+0xc2>
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
		{
			if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000c8f0:	235e      	movs	r3, #94	; 0x5e
1000c8f2:	4a10      	ldr	r2, [pc, #64]	; (1000c934 <ble_resolv_rand_addr_handler+0xd4>)
1000c8f4:	5cd3      	ldrb	r3, [r2, r3]
1000c8f6:	2b00      	cmp	r3, #0
1000c8f8:	d0ce      	beq.n	1000c898 <ble_resolv_rand_addr_handler+0x38>
1000c8fa:	4a13      	ldr	r2, [pc, #76]	; (1000c948 <ble_resolv_rand_addr_handler+0xe8>)
1000c8fc:	2301      	movs	r3, #1
1000c8fe:	e7c5      	b.n	1000c88c <ble_resolv_rand_addr_handler+0x2c>
	}
	
	if (device_found)
	{
		DBG_LOG_DEV("##########Device Found");
		ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000c900:	480c      	ldr	r0, [pc, #48]	; (1000c934 <ble_resolv_rand_addr_handler+0xd4>)
1000c902:	0163      	lsls	r3, r4, #5
1000c904:	1b1a      	subs	r2, r3, r4
1000c906:	0092      	lsls	r2, r2, #2
1000c908:	1882      	adds	r2, r0, r2
1000c90a:	0011      	movs	r1, r2
1000c90c:	315e      	adds	r1, #94	; 0x5e
1000c90e:	2502      	movs	r5, #2
1000c910:	700d      	strb	r5, [r1, #0]
		ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
1000c912:	210a      	movs	r1, #10
1000c914:	7491      	strb	r1, [r2, #18]
		memcpy((uint8_t *)&ble_dev_info[idx].conn_info, (uint8_t *)&connected_state_info, sizeof(at_ble_connected_t));
1000c916:	0010      	movs	r0, r2
1000c918:	2212      	movs	r2, #18
1000c91a:	4907      	ldr	r1, [pc, #28]	; (1000c938 <ble_resolv_rand_addr_handler+0xd8>)
1000c91c:	4b07      	ldr	r3, [pc, #28]	; (1000c93c <ble_resolv_rand_addr_handler+0xdc>)
1000c91e:	4798      	blx	r3
1000c920:	e7e1      	b.n	1000c8e6 <ble_resolv_rand_addr_handler+0x86>
	#endif
	ALL_UNUSED(peripheral_device_added);

	return AT_BLE_SUCCESS;
	
}
1000c922:	2000      	movs	r0, #0
1000c924:	bc04      	pop	{r2}
1000c926:	4690      	mov	r8, r2
1000c928:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000c92a:	46c0      	nop			; (mov r8, r8)
1000c92c:	10019d96 	.word	0x10019d96
1000c930:	10011c39 	.word	0x10011c39
1000c934:	10019d50 	.word	0x10019d50
1000c938:	10019ffc 	.word	0x10019ffc
1000c93c:	10011c57 	.word	0x10011c57
1000c940:	10019fbc 	.word	0x10019fbc
1000c944:	1000c5f1 	.word	0x1000c5f1
1000c948:	10019e2a 	.word	0x10019e2a

1000c94c <ble_advertisement_data_set>:
	}
}

/* Advertisement Data will be set based on the advertisement configuration */
at_ble_status_t ble_advertisement_data_set(void)
{
1000c94c:	b510      	push	{r4, lr}
1000c94e:	b090      	sub	sp, #64	; 0x40
		uint8_t length_field_ind;
		uint8_t adv_element_len;
		adv_buf[adv_data_element.len] = adv_data_element.len;
		length_field_ind = adv_data_element.len;
		adv_data_element.len++;
		adv_buf[adv_data_element.len++] = COMPLETE_LIST_16BIT_SERV_UUIDS;
1000c950:	ac08      	add	r4, sp, #32
1000c952:	2203      	movs	r2, #3
1000c954:	7062      	strb	r2, [r4, #1]
		MREPEAT(SERVICE_UUID16_MAX_NUM, _CONF_SERVICE_16BIT_UUID, &adv_data_element);
1000c956:	2302      	movs	r3, #2
1000c958:	70a3      	strb	r3, [r4, #2]
1000c95a:	3316      	adds	r3, #22
1000c95c:	70e3      	strb	r3, [r4, #3]
1000c95e:	7122      	strb	r2, [r4, #4]
1000c960:	7163      	strb	r3, [r4, #5]
1000c962:	3201      	adds	r2, #1
1000c964:	71a2      	strb	r2, [r4, #6]
1000c966:	71e3      	strb	r3, [r4, #7]
1000c968:	320b      	adds	r2, #11
1000c96a:	7222      	strb	r2, [r4, #8]
1000c96c:	7263      	strb	r3, [r4, #9]
		adv_element_len = adv_data_element.len - (length_field_ind + ADV_ELEMENT_SIZE);
		if(adv_element_len) 
		{			
			adv_buf[length_field_ind] = adv_element_len+ADV_TYPE_SIZE;
1000c96e:	3b0f      	subs	r3, #15
1000c970:	7023      	strb	r3, [r4, #0]
	#endif
	
	#if (BLE_GAP_ADV_COMPLETE_LOCAL_NAME_ENABLE && !BLE_GAP_ADV_SHORTENED_LOCAL_NAME_ENABLE)
	#if (BLE_GAP_ADV_COMPLETE_LOCAL_NAME_SCN_RSP_ENABLE != SCAN_RESPONSE_ONLY_ENABLE)
	if((adv_data_element.len) <= (AT_BLE_ADV_MAX_SIZE - (ADV_TYPE_FLAG_SIZE + ADV_ELEMENT_SIZE + BLE_GAP_ADV_DATA_COMPLETE_LOCAL_NAME_LENGTH))) {
		adv_buf[adv_data_element.len++] = BLE_GAP_ADV_DATA_COMPLETE_LOCAL_NAME_LENGTH + ADV_TYPE_SIZE;
1000c972:	3a05      	subs	r2, #5
1000c974:	72a2      	strb	r2, [r4, #10]
		adv_buf[adv_data_element.len++] = COMPLETE_LOCAL_NAME;
1000c976:	72e3      	strb	r3, [r4, #11]
		memcpy(&adv_buf[adv_data_element.len], BLE_GAP_ADV_DATA_COMPLETE_LOCAL_NAME, BLE_GAP_ADV_DATA_COMPLETE_LOCAL_NAME_LENGTH);
1000c978:	aa0b      	add	r2, sp, #44	; 0x2c
1000c97a:	4b10      	ldr	r3, [pc, #64]	; (1000c9bc <ble_advertisement_data_set+0x70>)
1000c97c:	cb03      	ldmia	r3!, {r0, r1}
1000c97e:	c203      	stmia	r2!, {r0, r1}
1000c980:	781b      	ldrb	r3, [r3, #0]
1000c982:	7013      	strb	r3, [r2, #0]
    DBG_LOG_DEV("[ble_manager]\t\tManufacturer specific data NOT enabled");
	if(false){}
	#endif
	#if ((BLE_GAP_ADV_MANUFACTURER_SPECIFIC_DATA_SCN_RSP_ENABLE == SCAN_RESPONSE_ENABLE) || (BLE_GAP_ADV_MANUFACTURER_SPECIFIC_DATA_SCN_RSP_ENABLE == SCAN_RESPONSE_ONLY_ENABLE))
	else if((scan_resp_data_element.len) <= (AT_BLE_ADV_MAX_SIZE - (ADV_ELEMENT_SIZE + BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA_SIZE))) {
		scn_resp[scan_resp_data_element.len++] = BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA_SIZE + ADV_TYPE_SIZE;
1000c984:	2307      	movs	r3, #7
1000c986:	466a      	mov	r2, sp
1000c988:	7013      	strb	r3, [r2, #0]
		scn_resp[scan_resp_data_element.len++] = MANUFACTURER_SPECIFIC_DATA;
1000c98a:	33f8      	adds	r3, #248	; 0xf8
1000c98c:	7053      	strb	r3, [r2, #1]
		memcpy(&scn_resp[scan_resp_data_element.len], BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA, BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA_SIZE);
1000c98e:	2206      	movs	r2, #6
1000c990:	490b      	ldr	r1, [pc, #44]	; (1000c9c0 <ble_advertisement_data_set+0x74>)
1000c992:	466b      	mov	r3, sp
1000c994:	1c98      	adds	r0, r3, #2
1000c996:	4b0b      	ldr	r3, [pc, #44]	; (1000c9c4 <ble_advertisement_data_set+0x78>)
1000c998:	4798      	blx	r3
		DBG_LOG_ADV("Failed to add Manufacturer specific data");
		return AT_BLE_GAP_INVALID_PARAM;
	}
	#endif
	
	if (at_ble_adv_data_set(adv_buf, adv_data_element.len, scn_resp,
1000c99a:	2308      	movs	r3, #8
1000c99c:	466a      	mov	r2, sp
1000c99e:	2115      	movs	r1, #21
1000c9a0:	0020      	movs	r0, r4
1000c9a2:	4c09      	ldr	r4, [pc, #36]	; (1000c9c8 <ble_advertisement_data_set+0x7c>)
1000c9a4:	47a0      	blx	r4
1000c9a6:	2800      	cmp	r0, #0
1000c9a8:	d005      	beq.n	1000c9b6 <ble_advertisement_data_set+0x6a>
	scan_resp_data_element.len) != AT_BLE_SUCCESS) {
		DBG_LOG("BLE Advertisement data set failed");
1000c9aa:	4808      	ldr	r0, [pc, #32]	; (1000c9cc <ble_advertisement_data_set+0x80>)
1000c9ac:	4b08      	ldr	r3, [pc, #32]	; (1000c9d0 <ble_advertisement_data_set+0x84>)
1000c9ae:	4798      	blx	r3
1000c9b0:	4808      	ldr	r0, [pc, #32]	; (1000c9d4 <ble_advertisement_data_set+0x88>)
1000c9b2:	4b09      	ldr	r3, [pc, #36]	; (1000c9d8 <ble_advertisement_data_set+0x8c>)
1000c9b4:	4798      	blx	r3
            //DBG_LOG_ADV("- 0x%02x(%c) ", adv_buf[i], adv_buf[i]);
        //}
		//DBG_LOG_ADV("BLE Advertisement data set success");
		return AT_BLE_SUCCESS;
    }
}
1000c9b6:	2000      	movs	r0, #0
1000c9b8:	b010      	add	sp, #64	; 0x40
1000c9ba:	bd10      	pop	{r4, pc}
1000c9bc:	10017888 	.word	0x10017888
1000c9c0:	10017a68 	.word	0x10017a68
1000c9c4:	10011c57 	.word	0x10011c57
1000c9c8:	1000e209 	.word	0x1000e209
1000c9cc:	10016de8 	.word	0x10016de8
1000c9d0:	100127bd 	.word	0x100127bd
1000c9d4:	10017a70 	.word	0x10017a70
1000c9d8:	1001269d 	.word	0x1001269d

1000c9dc <uart_read_complete_callback>:

void _time_start(unsigned int sec);
unsigned int _time_done(void);

static void uart_read_complete_callback(struct uart_module *const module)
{
1000c9dc:	b510      	push	{r4, lr}
	if(read_status == UART_READ_WAITING) {
1000c9de:	4b0e      	ldr	r3, [pc, #56]	; (1000ca18 <uart_read_complete_callback+0x3c>)
1000c9e0:	781b      	ldrb	r3, [r3, #0]
1000c9e2:	2b01      	cmp	r3, #1
1000c9e4:	d10b      	bne.n	1000c9fe <uart_read_complete_callback+0x22>
		read_status = UART_READ_DONE;
1000c9e6:	2202      	movs	r2, #2
1000c9e8:	4b0b      	ldr	r3, [pc, #44]	; (1000ca18 <uart_read_complete_callback+0x3c>)
1000c9ea:	701a      	strb	r2, [r3, #0]
		
		if(user_callback_func == NULL)
1000c9ec:	4b0b      	ldr	r3, [pc, #44]	; (1000ca1c <uart_read_complete_callback+0x40>)
1000c9ee:	681b      	ldr	r3, [r3, #0]
1000c9f0:	2b00      	cmp	r3, #0
1000c9f2:	d110      	bne.n	1000ca16 <uart_read_complete_callback+0x3a>
			uart_disable_callback(&uart_instance, UART_RX_COMPLETE);
1000c9f4:	2102      	movs	r1, #2
1000c9f6:	480a      	ldr	r0, [pc, #40]	; (1000ca20 <uart_read_complete_callback+0x44>)
1000c9f8:	4b0a      	ldr	r3, [pc, #40]	; (1000ca24 <uart_read_complete_callback+0x48>)
1000c9fa:	4798      	blx	r3
1000c9fc:	e00b      	b.n	1000ca16 <uart_read_complete_callback+0x3a>
	}
	else if(user_callback_func != NULL) {
1000c9fe:	4b07      	ldr	r3, [pc, #28]	; (1000ca1c <uart_read_complete_callback+0x40>)
1000ca00:	681b      	ldr	r3, [r3, #0]
1000ca02:	2b00      	cmp	r3, #0
1000ca04:	d007      	beq.n	1000ca16 <uart_read_complete_callback+0x3a>
		user_callback_func(string_input[0]);
1000ca06:	4c08      	ldr	r4, [pc, #32]	; (1000ca28 <uart_read_complete_callback+0x4c>)
1000ca08:	7820      	ldrb	r0, [r4, #0]
1000ca0a:	4798      	blx	r3
		uart_read_buffer_job(&uart_instance, string_input, sizeof(string_input));
1000ca0c:	2201      	movs	r2, #1
1000ca0e:	0021      	movs	r1, r4
1000ca10:	4803      	ldr	r0, [pc, #12]	; (1000ca20 <uart_read_complete_callback+0x44>)
1000ca12:	4b06      	ldr	r3, [pc, #24]	; (1000ca2c <uart_read_complete_callback+0x50>)
1000ca14:	4798      	blx	r3
	}
	else {
		//Nothing to do.
	}
}
1000ca16:	bd10      	pop	{r4, pc}
1000ca18:	10019838 	.word	0x10019838
1000ca1c:	10019840 	.word	0x10019840
1000ca20:	1001a578 	.word	0x1001a578
1000ca24:	1000b8e5 	.word	0x1000b8e5
1000ca28:	1001983c 	.word	0x1001983c
1000ca2c:	1000b889 	.word	0x1000b889

1000ca30 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct uart_module *const module,
		uint8_t *c)
{
1000ca30:	b570      	push	{r4, r5, r6, lr}
1000ca32:	0006      	movs	r6, r0
1000ca34:	000d      	movs	r5, r1
	while(STATUS_OK != uart_read_wait(module, c));
1000ca36:	4c03      	ldr	r4, [pc, #12]	; (1000ca44 <usart_serial_getchar+0x14>)
1000ca38:	0029      	movs	r1, r5
1000ca3a:	0030      	movs	r0, r6
1000ca3c:	47a0      	blx	r4
1000ca3e:	2800      	cmp	r0, #0
1000ca40:	d1fa      	bne.n	1000ca38 <usart_serial_getchar+0x8>
}
1000ca42:	bd70      	pop	{r4, r5, r6, pc}
1000ca44:	1000b875 	.word	0x1000b875

1000ca48 <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct uart_module *const module,
		uint8_t c)
{
1000ca48:	b570      	push	{r4, r5, r6, lr}
1000ca4a:	0006      	movs	r6, r0
1000ca4c:	000d      	movs	r5, r1
	while(STATUS_OK !=uart_write_wait(module, c));
1000ca4e:	4c03      	ldr	r4, [pc, #12]	; (1000ca5c <usart_serial_putchar+0x14>)
1000ca50:	0029      	movs	r1, r5
1000ca52:	0030      	movs	r0, r6
1000ca54:	47a0      	blx	r4
1000ca56:	2800      	cmp	r0, #0
1000ca58:	d1fa      	bne.n	1000ca50 <usart_serial_putchar+0x8>

	return STATUS_OK;
}
1000ca5a:	bd70      	pop	{r4, r5, r6, pc}
1000ca5c:	1000b865 	.word	0x1000b865

1000ca60 <serial_console_init>:

void serial_console_init(void)
{
1000ca60:	b570      	push	{r4, r5, r6, lr}
	system_clock_config(CLOCK_RESOURCE_XO_26_MHZ, CLOCK_FREQ_26_MHZ);
1000ca62:	2100      	movs	r1, #0
1000ca64:	2000      	movs	r0, #0
1000ca66:	4b19      	ldr	r3, [pc, #100]	; (1000cacc <serial_console_init+0x6c>)
1000ca68:	4798      	blx	r3

	uart_get_config_defaults(&config_uart);
1000ca6a:	4c19      	ldr	r4, [pc, #100]	; (1000cad0 <serial_console_init+0x70>)
1000ca6c:	0020      	movs	r0, r4
1000ca6e:	4b19      	ldr	r3, [pc, #100]	; (1000cad4 <serial_console_init+0x74>)
1000ca70:	4798      	blx	r3

	config_uart.baud_rate = CONF_STDIO_BAUDRATE;
1000ca72:	23e1      	movs	r3, #225	; 0xe1
1000ca74:	025b      	lsls	r3, r3, #9
1000ca76:	6023      	str	r3, [r4, #0]
	config_uart.pin_number_pad[0] = EDBG_CDC_PIN_PAD0;
1000ca78:	2302      	movs	r3, #2
1000ca7a:	60a3      	str	r3, [r4, #8]
	config_uart.pin_number_pad[1] = EDBG_CDC_PIN_PAD1;
1000ca7c:	2203      	movs	r2, #3
1000ca7e:	60e2      	str	r2, [r4, #12]
	config_uart.pin_number_pad[2] = EDBG_CDC_PIN_PAD2;
1000ca80:	3201      	adds	r2, #1
1000ca82:	6122      	str	r2, [r4, #16]
	config_uart.pin_number_pad[3] = EDBG_CDC_PIN_PAD3;
1000ca84:	3201      	adds	r2, #1
1000ca86:	6162      	str	r2, [r4, #20]
	
	config_uart.pinmux_sel_pad[0] = EDBG_CDC_MUX_PAD0;
1000ca88:	61a3      	str	r3, [r4, #24]
	config_uart.pinmux_sel_pad[1] = EDBG_CDC_MUX_PAD1;
1000ca8a:	61e3      	str	r3, [r4, #28]
	config_uart.pinmux_sel_pad[2] = EDBG_CDC_MUX_PAD2;
1000ca8c:	6223      	str	r3, [r4, #32]
	config_uart.pinmux_sel_pad[3] = EDBG_CDC_MUX_PAD3;
1000ca8e:	6263      	str	r3, [r4, #36]	; 0x24
static inline void stdio_serial_init(
		struct uart_module *const module,
		Uart * const hw,
		const struct uart_config *const config)
{
	stdio_base = (void *)module;
1000ca90:	4d11      	ldr	r5, [pc, #68]	; (1000cad8 <serial_console_init+0x78>)
1000ca92:	4b12      	ldr	r3, [pc, #72]	; (1000cadc <serial_console_init+0x7c>)
1000ca94:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
1000ca96:	4a12      	ldr	r2, [pc, #72]	; (1000cae0 <serial_console_init+0x80>)
1000ca98:	4b12      	ldr	r3, [pc, #72]	; (1000cae4 <serial_console_init+0x84>)
1000ca9a:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
1000ca9c:	4a12      	ldr	r2, [pc, #72]	; (1000cae8 <serial_console_init+0x88>)
1000ca9e:	4b13      	ldr	r3, [pc, #76]	; (1000caec <serial_console_init+0x8c>)
1000caa0:	601a      	str	r2, [r3, #0]
static inline bool usart_serial_init(
		struct uart_module *const module,
		Uart * const hw,
		const struct uart_config *const config)
{
	if (uart_init(module, hw, config) == STATUS_OK) {
1000caa2:	0022      	movs	r2, r4
1000caa4:	4912      	ldr	r1, [pc, #72]	; (1000caf0 <serial_console_init+0x90>)
1000caa6:	0028      	movs	r0, r5
1000caa8:	4b12      	ldr	r3, [pc, #72]	; (1000caf4 <serial_console_init+0x94>)
1000caaa:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
1000caac:	4e12      	ldr	r6, [pc, #72]	; (1000caf8 <serial_console_init+0x98>)
1000caae:	6833      	ldr	r3, [r6, #0]
1000cab0:	6898      	ldr	r0, [r3, #8]
1000cab2:	2100      	movs	r1, #0
1000cab4:	4c11      	ldr	r4, [pc, #68]	; (1000cafc <serial_console_init+0x9c>)
1000cab6:	47a0      	blx	r4
	setbuf(stdin, NULL);
1000cab8:	6833      	ldr	r3, [r6, #0]
1000caba:	6858      	ldr	r0, [r3, #4]
1000cabc:	2100      	movs	r1, #0
1000cabe:	47a0      	blx	r4

	stdio_serial_init(&uart_instance, CONF_STDIO_USART_MODULE, &config_uart);
	
	uart_register_callback(&uart_instance, uart_read_complete_callback, UART_RX_COMPLETE);
1000cac0:	2202      	movs	r2, #2
1000cac2:	490f      	ldr	r1, [pc, #60]	; (1000cb00 <serial_console_init+0xa0>)
1000cac4:	0028      	movs	r0, r5
1000cac6:	4b0f      	ldr	r3, [pc, #60]	; (1000cb04 <serial_console_init+0xa4>)
1000cac8:	4798      	blx	r3
}
1000caca:	bd70      	pop	{r4, r5, r6, pc}
1000cacc:	1000a885 	.word	0x1000a885
1000cad0:	1001a59c 	.word	0x1001a59c
1000cad4:	1000b67d 	.word	0x1000b67d
1000cad8:	1001a578 	.word	0x1001a578
1000cadc:	10019d34 	.word	0x10019d34
1000cae0:	1000ca49 	.word	0x1000ca49
1000cae4:	10019d30 	.word	0x10019d30
1000cae8:	1000ca31 	.word	0x1000ca31
1000caec:	10019d2c 	.word	0x10019d2c
1000caf0:	40004000 	.word	0x40004000
1000caf4:	1000b6a9 	.word	0x1000b6a9
1000caf8:	10017edc 	.word	0x10017edc
1000cafc:	1001286d 	.word	0x1001286d
1000cb00:	1000c9dd 	.word	0x1000c9dd
1000cb04:	1000b8b1 	.word	0x1000b8b1

1000cb08 <_time_start>:

void _time_start(unsigned int sec)
{
1000cb08:	b5f0      	push	{r4, r5, r6, r7, lr}
1000cb0a:	b083      	sub	sp, #12
1000cb0c:	0005      	movs	r5, r0
	system_clock_get_value();
1000cb0e:	4c0d      	ldr	r4, [pc, #52]	; (1000cb44 <_time_start+0x3c>)
1000cb10:	47a0      	blx	r4
	unsigned int main_clk = system_clock_get_value();
1000cb12:	47a0      	blx	r4

	tick = (((double)(main_clk)) * ((double)0.0000493)) * (sec * 1000);
1000cb14:	4f0c      	ldr	r7, [pc, #48]	; (1000cb48 <_time_start+0x40>)
1000cb16:	47b8      	blx	r7
1000cb18:	4e0c      	ldr	r6, [pc, #48]	; (1000cb4c <_time_start+0x44>)
1000cb1a:	4a0d      	ldr	r2, [pc, #52]	; (1000cb50 <_time_start+0x48>)
1000cb1c:	4b0d      	ldr	r3, [pc, #52]	; (1000cb54 <_time_start+0x4c>)
1000cb1e:	47b0      	blx	r6
1000cb20:	9000      	str	r0, [sp, #0]
1000cb22:	9101      	str	r1, [sp, #4]
1000cb24:	20fa      	movs	r0, #250	; 0xfa
1000cb26:	0080      	lsls	r0, r0, #2
1000cb28:	4368      	muls	r0, r5
1000cb2a:	47b8      	blx	r7
1000cb2c:	0002      	movs	r2, r0
1000cb2e:	000b      	movs	r3, r1
1000cb30:	9800      	ldr	r0, [sp, #0]
1000cb32:	9901      	ldr	r1, [sp, #4]
1000cb34:	47b0      	blx	r6
1000cb36:	4b08      	ldr	r3, [pc, #32]	; (1000cb58 <_time_start+0x50>)
1000cb38:	4798      	blx	r3
1000cb3a:	4b08      	ldr	r3, [pc, #32]	; (1000cb5c <_time_start+0x54>)
1000cb3c:	6018      	str	r0, [r3, #0]
}
1000cb3e:	b003      	add	sp, #12
1000cb40:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000cb42:	46c0      	nop			; (mov r8, r8)
1000cb44:	1000a909 	.word	0x1000a909
1000cb48:	10016b75 	.word	0x10016b75
1000cb4c:	10015ea9 	.word	0x10015ea9
1000cb50:	19feaec7 	.word	0x19feaec7
1000cb54:	3f09d8ef 	.word	0x3f09d8ef
1000cb58:	10014a65 	.word	0x10014a65
1000cb5c:	10019834 	.word	0x10019834

1000cb60 <_time_done>:

unsigned int _time_done()
{
	return --tick;
1000cb60:	4b02      	ldr	r3, [pc, #8]	; (1000cb6c <_time_done+0xc>)
1000cb62:	681a      	ldr	r2, [r3, #0]
1000cb64:	1e50      	subs	r0, r2, #1
1000cb66:	6018      	str	r0, [r3, #0]
}
1000cb68:	4770      	bx	lr
1000cb6a:	46c0      	nop			; (mov r8, r8)
1000cb6c:	10019834 	.word	0x10019834

1000cb70 <getchar_b11_timeout>:

int getchar_b11_timeout(unsigned int sec)
{
1000cb70:	b570      	push	{r4, r5, r6, lr}
1000cb72:	0004      	movs	r4, r0
	read_status = UART_READ_WAITING;
1000cb74:	2201      	movs	r2, #1
1000cb76:	4b11      	ldr	r3, [pc, #68]	; (1000cbbc <getchar_b11_timeout+0x4c>)
1000cb78:	701a      	strb	r2, [r3, #0]
	
	if(user_callback_func == NULL)
1000cb7a:	4b11      	ldr	r3, [pc, #68]	; (1000cbc0 <getchar_b11_timeout+0x50>)
1000cb7c:	681b      	ldr	r3, [r3, #0]
1000cb7e:	2b00      	cmp	r3, #0
1000cb80:	d103      	bne.n	1000cb8a <getchar_b11_timeout+0x1a>
		uart_enable_callback(&uart_instance, UART_RX_COMPLETE);
1000cb82:	2102      	movs	r1, #2
1000cb84:	480f      	ldr	r0, [pc, #60]	; (1000cbc4 <getchar_b11_timeout+0x54>)
1000cb86:	4b10      	ldr	r3, [pc, #64]	; (1000cbc8 <getchar_b11_timeout+0x58>)
1000cb88:	4798      	blx	r3

	_time_start(sec);
1000cb8a:	0020      	movs	r0, r4
1000cb8c:	4b0f      	ldr	r3, [pc, #60]	; (1000cbcc <getchar_b11_timeout+0x5c>)
1000cb8e:	4798      	blx	r3
	
	string_input[0] = 0;
1000cb90:	490f      	ldr	r1, [pc, #60]	; (1000cbd0 <getchar_b11_timeout+0x60>)
1000cb92:	2300      	movs	r3, #0
1000cb94:	700b      	strb	r3, [r1, #0]
	uart_read_buffer_job(&uart_instance, string_input, sizeof(string_input));
1000cb96:	2201      	movs	r2, #1
1000cb98:	480a      	ldr	r0, [pc, #40]	; (1000cbc4 <getchar_b11_timeout+0x54>)
1000cb9a:	4b0e      	ldr	r3, [pc, #56]	; (1000cbd4 <getchar_b11_timeout+0x64>)
1000cb9c:	4798      	blx	r3
	
	while (read_status != UART_READ_DONE && _time_done() > 0 );
1000cb9e:	4c07      	ldr	r4, [pc, #28]	; (1000cbbc <getchar_b11_timeout+0x4c>)
1000cba0:	4d0d      	ldr	r5, [pc, #52]	; (1000cbd8 <getchar_b11_timeout+0x68>)
1000cba2:	7823      	ldrb	r3, [r4, #0]
1000cba4:	2b02      	cmp	r3, #2
1000cba6:	d002      	beq.n	1000cbae <getchar_b11_timeout+0x3e>
1000cba8:	47a8      	blx	r5
1000cbaa:	2800      	cmp	r0, #0
1000cbac:	d1f9      	bne.n	1000cba2 <getchar_b11_timeout+0x32>
	
	read_status = UART_READ_NONE;
1000cbae:	2200      	movs	r2, #0
1000cbb0:	4b02      	ldr	r3, [pc, #8]	; (1000cbbc <getchar_b11_timeout+0x4c>)
1000cbb2:	701a      	strb	r2, [r3, #0]

	return string_input[0];
1000cbb4:	4b06      	ldr	r3, [pc, #24]	; (1000cbd0 <getchar_b11_timeout+0x60>)
1000cbb6:	7818      	ldrb	r0, [r3, #0]
}
1000cbb8:	bd70      	pop	{r4, r5, r6, pc}
1000cbba:	46c0      	nop			; (mov r8, r8)
1000cbbc:	10019838 	.word	0x10019838
1000cbc0:	10019840 	.word	0x10019840
1000cbc4:	1001a578 	.word	0x1001a578
1000cbc8:	1000b8c5 	.word	0x1000b8c5
1000cbcc:	1000cb09 	.word	0x1000cb09
1000cbd0:	1001983c 	.word	0x1001983c
1000cbd4:	1000b889 	.word	0x1000b889
1000cbd8:	1000cb61 	.word	0x1000cb61

1000cbdc <platform_event_free>:
void platform_event_free(struct platform_event* event);
//struct str_watched_event watched_event;

void platform_event_free(struct platform_event* event)
{
	event->next = platform_event_free_list;
1000cbdc:	4b02      	ldr	r3, [pc, #8]	; (1000cbe8 <platform_event_free+0xc>)
1000cbde:	681a      	ldr	r2, [r3, #0]
1000cbe0:	6002      	str	r2, [r0, #0]
	platform_event_free_list = event;
1000cbe2:	6018      	str	r0, [r3, #0]
}
1000cbe4:	4770      	bx	lr
1000cbe6:	46c0      	nop			; (mov r8, r8)
1000cbe8:	10019848 	.word	0x10019848

1000cbec <platform_event_post>:

void platform_event_post(uint16_t event_type, void * data, uint16_t data_len)
{
1000cbec:	b530      	push	{r4, r5, lr}
	// get a free event object
	struct platform_event* evt = platform_event_free_list;
1000cbee:	4b0b      	ldr	r3, [pc, #44]	; (1000cc1c <platform_event_post+0x30>)
1000cbf0:	681c      	ldr	r4, [r3, #0]
	if(evt != NULL)
1000cbf2:	2c00      	cmp	r4, #0
1000cbf4:	d011      	beq.n	1000cc1a <platform_event_post+0x2e>
	{
		platform_event_free_list = evt->next;
1000cbf6:	6825      	ldr	r5, [r4, #0]
1000cbf8:	601d      	str	r5, [r3, #0]
		
		evt->next = NULL;
1000cbfa:	2300      	movs	r3, #0
1000cbfc:	6023      	str	r3, [r4, #0]
		evt->data = data;
1000cbfe:	60a1      	str	r1, [r4, #8]
		evt->data_len = data_len;
1000cc00:	80e2      	strh	r2, [r4, #6]
		evt->event_type = event_type;
1000cc02:	80a0      	strh	r0, [r4, #4]

		if(platform_event_pending_list == NULL)
1000cc04:	4b06      	ldr	r3, [pc, #24]	; (1000cc20 <platform_event_post+0x34>)
1000cc06:	681a      	ldr	r2, [r3, #0]
1000cc08:	2a00      	cmp	r2, #0
1000cc0a:	d102      	bne.n	1000cc12 <platform_event_post+0x26>
		{
			platform_event_pending_list = evt;
1000cc0c:	601c      	str	r4, [r3, #0]
1000cc0e:	e004      	b.n	1000cc1a <platform_event_post+0x2e>
		else
		{
			struct platform_event* cur = platform_event_pending_list;
			while(cur->next != NULL)
			{
				cur = cur->next;
1000cc10:	001a      	movs	r2, r3
			platform_event_pending_list = evt;
		}
		else
		{
			struct platform_event* cur = platform_event_pending_list;
			while(cur->next != NULL)
1000cc12:	6813      	ldr	r3, [r2, #0]
1000cc14:	2b00      	cmp	r3, #0
1000cc16:	d1fb      	bne.n	1000cc10 <platform_event_post+0x24>
			{
				cur = cur->next;
			}
			cur->next = evt;
1000cc18:	6014      	str	r4, [r2, #0]
		}
		
		//platform_event_signal();
	}
	
}
1000cc1a:	bd30      	pop	{r4, r5, pc}
1000cc1c:	10019848 	.word	0x10019848
1000cc20:	10019844 	.word	0x10019844

1000cc24 <platform_event_init>:
	return status;
	
}

void platform_event_init()
{
1000cc24:	b570      	push	{r4, r5, r6, lr}
	uint32_t i;
	platform_event_free_list = NULL;
1000cc26:	2300      	movs	r3, #0
1000cc28:	4a06      	ldr	r2, [pc, #24]	; (1000cc44 <platform_event_init+0x20>)
1000cc2a:	6013      	str	r3, [r2, #0]
	platform_event_pending_list = NULL;
1000cc2c:	4a06      	ldr	r2, [pc, #24]	; (1000cc48 <platform_event_init+0x24>)
1000cc2e:	6013      	str	r3, [r2, #0]
1000cc30:	4c06      	ldr	r4, [pc, #24]	; (1000cc4c <platform_event_init+0x28>)
1000cc32:	0026      	movs	r6, r4
1000cc34:	3678      	adds	r6, #120	; 0x78
	//memset(&watched_event,0,sizeof(struct str_watched_event));
	for(i = 0; i < PLATFORM_EVENT_POOL_DEPTH; i++)
	{
		platform_event_free(&platform_event_pool[i]);
1000cc36:	4d06      	ldr	r5, [pc, #24]	; (1000cc50 <platform_event_init+0x2c>)
1000cc38:	0020      	movs	r0, r4
1000cc3a:	47a8      	blx	r5
1000cc3c:	340c      	adds	r4, #12
{
	uint32_t i;
	platform_event_free_list = NULL;
	platform_event_pending_list = NULL;
	//memset(&watched_event,0,sizeof(struct str_watched_event));
	for(i = 0; i < PLATFORM_EVENT_POOL_DEPTH; i++)
1000cc3e:	42b4      	cmp	r4, r6
1000cc40:	d1fa      	bne.n	1000cc38 <platform_event_init+0x14>
	{
		platform_event_free(&platform_event_pool[i]);
	}
}
1000cc42:	bd70      	pop	{r4, r5, r6, pc}
1000cc44:	10019848 	.word	0x10019848
1000cc48:	10019844 	.word	0x10019844
1000cc4c:	1001984c 	.word	0x1001984c
1000cc50:	1000cbdd 	.word	0x1000cbdd

1000cc54 <at_ke_msg_send>:
	}
	return status;
}

static void at_ke_msg_send(void const * param_ptr)
{
1000cc54:	b570      	push	{r4, r5, r6, lr}
1000cc56:	0004      	movs	r4, r0
	struct ke_msg *kemsg;
	uint8_t osc_en = REG_PL_RD(0x4000B1EC)&0x01;
1000cc58:	4b13      	ldr	r3, [pc, #76]	; (1000cca8 <at_ke_msg_send+0x54>)
1000cc5a:	681d      	ldr	r5, [r3, #0]
	ke_msg_send(param_ptr);
1000cc5c:	4b13      	ldr	r3, [pc, #76]	; (1000ccac <at_ke_msg_send+0x58>)
1000cc5e:	681b      	ldr	r3, [r3, #0]
1000cc60:	4798      	blx	r3
	kemsg = ke_param2msg(param_ptr);

	if((kemsg != NULL) && (kemsg->dest_id != TASK_INTERNAL_APP)) {
1000cc62:	2c0c      	cmp	r4, #12
1000cc64:	d01f      	beq.n	1000cca6 <at_ke_msg_send+0x52>
1000cc66:	3c0c      	subs	r4, #12
1000cc68:	88e3      	ldrh	r3, [r4, #6]
1000cc6a:	2b05      	cmp	r3, #5
1000cc6c:	d01b      	beq.n	1000cca6 <at_ke_msg_send+0x52>
		if(osc_en == 0)
1000cc6e:	07eb      	lsls	r3, r5, #31
1000cc70:	d414      	bmi.n	1000cc9c <at_ke_msg_send+0x48>
		{
			/* BLE Core is off, issue a wakeup request*/
			/* First, make sure PD4 is powered up and out of reset */
			pwr_enable_arm_wakeup(1<<1);
1000cc72:	4b0f      	ldr	r3, [pc, #60]	; (1000ccb0 <at_ke_msg_send+0x5c>)
1000cc74:	681b      	ldr	r3, [r3, #0]
1000cc76:	2002      	movs	r0, #2
1000cc78:	4798      	blx	r3
			pwr_arm_wakeup_req();
1000cc7a:	4b0e      	ldr	r3, [pc, #56]	; (1000ccb4 <at_ke_msg_send+0x60>)
1000cc7c:	681b      	ldr	r3, [r3, #0]
1000cc7e:	4798      	blx	r3
			while (pwr_wait_BLE_out_of_reset(3));
1000cc80:	4c0d      	ldr	r4, [pc, #52]	; (1000ccb8 <at_ke_msg_send+0x64>)
1000cc82:	2003      	movs	r0, #3
1000cc84:	6823      	ldr	r3, [r4, #0]
1000cc86:	4798      	blx	r3
1000cc88:	2800      	cmp	r0, #0
1000cc8a:	d1fa      	bne.n	1000cc82 <at_ke_msg_send+0x2e>
			pwr_disable_arm_wakeup(1<<1);
1000cc8c:	4b0b      	ldr	r3, [pc, #44]	; (1000ccbc <at_ke_msg_send+0x68>)
1000cc8e:	681b      	ldr	r3, [r3, #0]
1000cc90:	3002      	adds	r0, #2
1000cc92:	4798      	blx	r3
			REG_PL_WR(0x4000B020, 1);
1000cc94:	2201      	movs	r2, #1
1000cc96:	4b0a      	ldr	r3, [pc, #40]	; (1000ccc0 <at_ke_msg_send+0x6c>)
1000cc98:	601a      	str	r2, [r3, #0]
1000cc9a:	e004      	b.n	1000cca6 <at_ke_msg_send+0x52>
#endif	//CHIPVERSION_B0
		}
		else
		{
			/*  */
			os_sem_up(gstrFwSem);
1000cc9c:	4b09      	ldr	r3, [pc, #36]	; (1000ccc4 <at_ke_msg_send+0x70>)
1000cc9e:	6818      	ldr	r0, [r3, #0]
1000cca0:	4b09      	ldr	r3, [pc, #36]	; (1000ccc8 <at_ke_msg_send+0x74>)
1000cca2:	681b      	ldr	r3, [r3, #0]
1000cca4:	4798      	blx	r3
		}
	}
}
1000cca6:	bd70      	pop	{r4, r5, r6, pc}
1000cca8:	4000b1ec 	.word	0x4000b1ec
1000ccac:	100198f4 	.word	0x100198f4
1000ccb0:	100198ec 	.word	0x100198ec
1000ccb4:	10019900 	.word	0x10019900
1000ccb8:	100198d4 	.word	0x100198d4
1000ccbc:	100198dc 	.word	0x100198dc
1000ccc0:	4000b020 	.word	0x4000b020
1000ccc4:	100198e0 	.word	0x100198e0
1000ccc8:	100198d0 	.word	0x100198d0

1000cccc <samb11_plf_resume_callback>:
	rwip_prevent_sleep_clear(APP_PREVENT_SLEEP);
	return status;
}

void samb11_plf_resume_callback(void)
{
1000cccc:	b510      	push	{r4, lr}
	//spi_flash_turn_off();
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0,default_samb11_clock_init[0]);
1000ccce:	4b06      	ldr	r3, [pc, #24]	; (1000cce8 <samb11_plf_resume_callback+0x1c>)
1000ccd0:	4a06      	ldr	r2, [pc, #24]	; (1000ccec <samb11_plf_resume_callback+0x20>)
1000ccd2:	6819      	ldr	r1, [r3, #0]
1000ccd4:	6011      	str	r1, [r2, #0]
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1,default_samb11_clock_init[1]);
1000ccd6:	685a      	ldr	r2, [r3, #4]
1000ccd8:	4b05      	ldr	r3, [pc, #20]	; (1000ccf0 <samb11_plf_resume_callback+0x24>)
1000ccda:	601a      	str	r2, [r3, #0]
	if(samb11_app_resume_cb != NULL)
1000ccdc:	4b05      	ldr	r3, [pc, #20]	; (1000ccf4 <samb11_plf_resume_callback+0x28>)
1000ccde:	681b      	ldr	r3, [r3, #0]
1000cce0:	2b00      	cmp	r3, #0
1000cce2:	d000      	beq.n	1000cce6 <samb11_plf_resume_callback+0x1a>
	{
		samb11_app_resume_cb();
1000cce4:	4798      	blx	r3
	}
}
1000cce6:	bd10      	pop	{r4, pc}
1000cce8:	1001a5c4 	.word	0x1001a5c4
1000ccec:	4000b00c 	.word	0x4000b00c
1000ccf0:	4000b010 	.word	0x4000b010
1000ccf4:	1001a8a0 	.word	0x1001a8a0

1000ccf8 <init_port_list>:
port port_list[LPGPIO_MAX];
uint32_t default_samb11_clock_init[2];
void samb11_plf_resume_callback(void);

void init_port_list(void)
{
1000ccf8:	b570      	push	{r4, r5, r6, lr}
	uint8_t i;
	memset(port_list,0,sizeof(port_list));
1000ccfa:	2232      	movs	r2, #50	; 0x32
1000ccfc:	2100      	movs	r1, #0
1000ccfe:	480d      	ldr	r0, [pc, #52]	; (1000cd34 <init_port_list+0x3c>)
1000cd00:	4b0d      	ldr	r3, [pc, #52]	; (1000cd38 <init_port_list+0x40>)
1000cd02:	4798      	blx	r3
1000cd04:	2100      	movs	r1, #0
	for(i=0;i<(sizeof(port_list)/sizeof(port_list[0]));i++) {
		port_list[i].bit.gpio_num = i;
1000cd06:	480b      	ldr	r0, [pc, #44]	; (1000cd34 <init_port_list+0x3c>)
		port_list[i].bit.available = 1;
1000cd08:	2501      	movs	r5, #1
		port_list[i].bit.configured = 0;
1000cd0a:	2402      	movs	r4, #2
void init_port_list(void)
{
	uint8_t i;
	memset(port_list,0,sizeof(port_list));
	for(i=0;i<(sizeof(port_list)/sizeof(port_list[0]));i++) {
		port_list[i].bit.gpio_num = i;
1000cd0c:	004a      	lsls	r2, r1, #1
1000cd0e:	5411      	strb	r1, [r2, r0]
		port_list[i].bit.available = 1;
1000cd10:	1882      	adds	r2, r0, r2
1000cd12:	7853      	ldrb	r3, [r2, #1]
1000cd14:	432b      	orrs	r3, r5
		port_list[i].bit.configured = 0;
1000cd16:	b2db      	uxtb	r3, r3
1000cd18:	43a3      	bics	r3, r4
1000cd1a:	7053      	strb	r3, [r2, #1]
1000cd1c:	3101      	adds	r1, #1

void init_port_list(void)
{
	uint8_t i;
	memset(port_list,0,sizeof(port_list));
	for(i=0;i<(sizeof(port_list)/sizeof(port_list[0]));i++) {
1000cd1e:	2919      	cmp	r1, #25
1000cd20:	d1f4      	bne.n	1000cd0c <init_port_list+0x14>
		port_list[i].bit.gpio_num = i;
		port_list[i].bit.available = 1;
		port_list[i].bit.configured = 0;
	}
	//Set the GPIO for SWD is not available
	port_list[0].bit.available = 0;
1000cd22:	4b04      	ldr	r3, [pc, #16]	; (1000cd34 <init_port_list+0x3c>)
1000cd24:	785a      	ldrb	r2, [r3, #1]
1000cd26:	3918      	subs	r1, #24
1000cd28:	438a      	bics	r2, r1
1000cd2a:	705a      	strb	r2, [r3, #1]
	port_list[1].bit.available = 0;
1000cd2c:	78da      	ldrb	r2, [r3, #3]
1000cd2e:	438a      	bics	r2, r1
1000cd30:	70da      	strb	r2, [r3, #3]
	//GPIO 14 is used for Coex and controlled by Firmware
	//port_list[14].bit.available = 0;
}
1000cd32:	bd70      	pop	{r4, r5, r6, pc}
1000cd34:	1001a5e0 	.word	0x1001a5e0
1000cd38:	10011c69 	.word	0x10011c69

1000cd3c <init_clock>:

void init_clock(void)
{
	uint32_t regval;
	regval = REG_PL_RD(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0);
1000cd3c:	4a06      	ldr	r2, [pc, #24]	; (1000cd58 <init_clock+0x1c>)
1000cd3e:	6811      	ldr	r1, [r2, #0]
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WATCHDOG_1_CLK_EN);
	//disable UART core & interface clocks
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_CORE_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_IF_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_1_CORE_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_1_IF_CLK_EN);
1000cd40:	4b06      	ldr	r3, [pc, #24]	; (1000cd5c <init_clock+0x20>)
1000cd42:	400b      	ands	r3, r1
	//disable I2C core 1 clocks
	//regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CORTUS_I2C1_CORE_CLK_EN);		//do not disable I2C because I2C driver in ASF will not enable.
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0,regval);
1000cd44:	6013      	str	r3, [r2, #0]
	default_samb11_clock_init[0] = regval;
1000cd46:	4a06      	ldr	r2, [pc, #24]	; (1000cd60 <init_clock+0x24>)
1000cd48:	6013      	str	r3, [r2, #0]
	
	regval = REG_PL_RD(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1);
1000cd4a:	4906      	ldr	r1, [pc, #24]	; (1000cd64 <init_clock+0x28>)
1000cd4c:	6808      	ldr	r0, [r1, #0]
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_4_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_5_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_6_CLK_EN);
	//disable SPI SCK Phase int clock 
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI0_SCK_PHASE_INT_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI1_SCK_PHASE_INT_CLK_EN);
1000cd4e:	4b06      	ldr	r3, [pc, #24]	; (1000cd68 <init_clock+0x2c>)
1000cd50:	4003      	ands	r3, r0
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1,regval);
1000cd52:	600b      	str	r3, [r1, #0]
	default_samb11_clock_init[1] = regval;
1000cd54:	6053      	str	r3, [r2, #4]
	//ARM debugger
	
	//store default values
}
1000cd56:	4770      	bx	lr
1000cd58:	4000b00c 	.word	0x4000b00c
1000cd5c:	fffe0fd3 	.word	0xfffe0fd3
1000cd60:	1001a5c4 	.word	0x1001a5c4
1000cd64:	4000b010 	.word	0x4000b010
1000cd68:	ffffe7c0 	.word	0xffffe7c0

1000cd6c <platform_driver_init>:

plf_drv_status platform_driver_init()
{
1000cd6c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000cd6e:	4657      	mov	r7, sl
1000cd70:	464e      	mov	r6, r9
1000cd72:	4645      	mov	r5, r8
1000cd74:	b4e0      	push	{r5, r6, r7}
	plf_drv_status status = STATUS_NOT_INITIALIZED;
	if((platform_initialized == 0) || (platform_initialized != 1)) {
1000cd76:	4b4f      	ldr	r3, [pc, #316]	; (1000ceb4 <platform_driver_init+0x148>)
1000cd78:	781b      	ldrb	r3, [r3, #0]
1000cd7a:	2b00      	cmp	r3, #0
1000cd7c:	d004      	beq.n	1000cd88 <platform_driver_init+0x1c>
1000cd7e:	4b4d      	ldr	r3, [pc, #308]	; (1000ceb4 <platform_driver_init+0x148>)
1000cd80:	781b      	ldrb	r3, [r3, #0]
1000cd82:	2b01      	cmp	r3, #1
1000cd84:	d100      	bne.n	1000cd88 <platform_driver_init+0x1c>
1000cd86:	e08c      	b.n	1000cea2 <platform_driver_init+0x136>
		init_port_list();
1000cd88:	4b4b      	ldr	r3, [pc, #300]	; (1000ceb8 <platform_driver_init+0x14c>)
1000cd8a:	4798      	blx	r3
		init_clock();
1000cd8c:	4b4b      	ldr	r3, [pc, #300]	; (1000cebc <platform_driver_init+0x150>)
1000cd8e:	4798      	blx	r3
		// Initialize the ble stack message handler to NULL
		ble_stack_message_handler = NULL;
1000cd90:	2300      	movs	r3, #0
1000cd92:	4698      	mov	r8, r3
1000cd94:	4b4a      	ldr	r3, [pc, #296]	; (1000cec0 <platform_driver_init+0x154>)
1000cd96:	4642      	mov	r2, r8
1000cd98:	601a      	str	r2, [r3, #0]

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000cd9a:	4c4a      	ldr	r4, [pc, #296]	; (1000cec4 <platform_driver_init+0x158>)
1000cd9c:	2380      	movs	r3, #128	; 0x80
1000cd9e:	2280      	movs	r2, #128	; 0x80
1000cda0:	0412      	lsls	r2, r2, #16
1000cda2:	4692      	mov	sl, r2
1000cda4:	50e2      	str	r2, [r4, r3]
1000cda6:	2280      	movs	r2, #128	; 0x80
1000cda8:	0452      	lsls	r2, r2, #17
1000cdaa:	4691      	mov	r9, r2
1000cdac:	50e2      	str	r2, [r4, r3]
#ifdef CHIPVERSION_B0
		NVIC_DisableIRQ(GPIO0_IRQn);
		NVIC_DisableIRQ(GPIO1_IRQn);
		/* NVIC_DisableIRQ(PORT0_COMB_IRQn); */
		/* NVIC_DisableIRQ(PORT1_COMB_IRQn); */
		platform_register_isr = (uint8_t (*)(uint8_t ,void *))0x000007d7;
1000cdae:	4d46      	ldr	r5, [pc, #280]	; (1000cec8 <platform_driver_init+0x15c>)
1000cdb0:	4b46      	ldr	r3, [pc, #280]	; (1000cecc <platform_driver_init+0x160>)
1000cdb2:	602b      	str	r3, [r5, #0]
		platform_unregister_isr = (uint8_t (*)(uint8_t ))0x000007bd;
1000cdb4:	4b46      	ldr	r3, [pc, #280]	; (1000ced0 <platform_driver_init+0x164>)
1000cdb6:	4a47      	ldr	r2, [pc, #284]	; (1000ced4 <platform_driver_init+0x168>)
1000cdb8:	6013      	str	r3, [r2, #0]
		handle_ext_wakeup_isr = (void (*)(void))0x1bc51;
1000cdba:	4947      	ldr	r1, [pc, #284]	; (1000ced8 <platform_driver_init+0x16c>)
1000cdbc:	4a47      	ldr	r2, [pc, #284]	; (1000cedc <platform_driver_init+0x170>)
1000cdbe:	6011      	str	r1, [r2, #0]
		gapm_get_task_from_id = (ke_task_id_t (*)(ke_msg_id_t))(*((unsigned int *)0x100400bc));
1000cdc0:	4a47      	ldr	r2, [pc, #284]	; (1000cee0 <platform_driver_init+0x174>)
1000cdc2:	6811      	ldr	r1, [r2, #0]
1000cdc4:	4a47      	ldr	r2, [pc, #284]	; (1000cee4 <platform_driver_init+0x178>)
1000cdc6:	6011      	str	r1, [r2, #0]
		gapm_get_id_from_task = (ke_task_id_t (*)(ke_msg_id_t))(*((unsigned int *)0x100400b8));
1000cdc8:	4a47      	ldr	r2, [pc, #284]	; (1000cee8 <platform_driver_init+0x17c>)
1000cdca:	6811      	ldr	r1, [r2, #0]
1000cdcc:	4a47      	ldr	r2, [pc, #284]	; (1000ceec <platform_driver_init+0x180>)
1000cdce:	6011      	str	r1, [r2, #0]
		rwip_prevent_sleep_set = (void (*)(uint16_t))0x0001b99f;
1000cdd0:	4947      	ldr	r1, [pc, #284]	; (1000cef0 <platform_driver_init+0x184>)
1000cdd2:	4a48      	ldr	r2, [pc, #288]	; (1000cef4 <platform_driver_init+0x188>)
1000cdd4:	6011      	str	r1, [r2, #0]
		rwip_prevent_sleep_clear = (void (*)(uint16_t))0x0001b9db;
1000cdd6:	4948      	ldr	r1, [pc, #288]	; (1000cef8 <platform_driver_init+0x18c>)
1000cdd8:	4a48      	ldr	r2, [pc, #288]	; (1000cefc <platform_driver_init+0x190>)
1000cdda:	6011      	str	r1, [r2, #0]
		apps_resume_cb = (uint32_t *)0x1004003c;
1000cddc:	4f48      	ldr	r7, [pc, #288]	; (1000cf00 <platform_driver_init+0x194>)
1000cdde:	4a49      	ldr	r2, [pc, #292]	; (1000cf04 <platform_driver_init+0x198>)
1000cde0:	603a      	str	r2, [r7, #0]
		actualfreq = (uint32_t *)0x10041FC0; /* set to NULL for now as clock calibration is disabled for the time being */  /*(uint32_t *)0x10006bd8;*/
1000cde2:	4949      	ldr	r1, [pc, #292]	; (1000cf08 <platform_driver_init+0x19c>)
1000cde4:	4a49      	ldr	r2, [pc, #292]	; (1000cf0c <platform_driver_init+0x1a0>)
1000cde6:	6011      	str	r1, [r2, #0]
		updateuartbr_fp = (void (*)())0x10041FC4;
1000cde8:	4949      	ldr	r1, [pc, #292]	; (1000cf10 <platform_driver_init+0x1a4>)
1000cdea:	4a4a      	ldr	r2, [pc, #296]	; (1000cf14 <platform_driver_init+0x1a8>)
1000cdec:	6011      	str	r1, [r2, #0]
		wakeup_source_active_cb = (uint32_t *)0x10041FD4;
1000cdee:	4e4a      	ldr	r6, [pc, #296]	; (1000cf18 <platform_driver_init+0x1ac>)
1000cdf0:	4a4a      	ldr	r2, [pc, #296]	; (1000cf1c <platform_driver_init+0x1b0>)
1000cdf2:	6032      	str	r2, [r6, #0]
		wakeup_event_pending = (uint32_t *)0x10041FD8;
1000cdf4:	494a      	ldr	r1, [pc, #296]	; (1000cf20 <platform_driver_init+0x1b4>)
1000cdf6:	4a4b      	ldr	r2, [pc, #300]	; (1000cf24 <platform_driver_init+0x1b8>)
1000cdf8:	6011      	str	r1, [r2, #0]
		/* power APIs */
		pwr_enable_arm_wakeup = (void (*)(uint32_t wakeup_domain))0x0001cbe9;
1000cdfa:	494b      	ldr	r1, [pc, #300]	; (1000cf28 <platform_driver_init+0x1bc>)
1000cdfc:	4a4b      	ldr	r2, [pc, #300]	; (1000cf2c <platform_driver_init+0x1c0>)
1000cdfe:	6011      	str	r1, [r2, #0]
		pwr_disable_arm_wakeup = (void (*)(uint32_t wakeup_domain))0x0001cd8f;
1000ce00:	494b      	ldr	r1, [pc, #300]	; (1000cf30 <platform_driver_init+0x1c4>)
1000ce02:	4a4c      	ldr	r2, [pc, #304]	; (1000cf34 <platform_driver_init+0x1c8>)
1000ce04:	6011      	str	r1, [r2, #0]
		pwr_arm_wakeup_req = (int (*)(void))0x0001cea3;
1000ce06:	494c      	ldr	r1, [pc, #304]	; (1000cf38 <platform_driver_init+0x1cc>)
1000ce08:	4a4c      	ldr	r2, [pc, #304]	; (1000cf3c <platform_driver_init+0x1d0>)
1000ce0a:	6011      	str	r1, [r2, #0]
		pwr_wait_BLE_out_of_reset = (int (*)(uint32_t threshold))0x0001cbcf;
1000ce0c:	494c      	ldr	r1, [pc, #304]	; (1000cf40 <platform_driver_init+0x1d4>)
1000ce0e:	4a4d      	ldr	r2, [pc, #308]	; (1000cf44 <platform_driver_init+0x1d8>)
1000ce10:	6011      	str	r1, [r2, #0]
		NVIC_DisableIRQ(PORT1_ALL_IRQn);
		platform_register_isr = register_isr;
		platform_unregister_isr = unregister_isr;
		handle_ext_wakeup_isr = (void (*)(void))0x14085;
#endif
		platform_unregister_isr(GPIO1_COMBINED_VECTOR_TABLE_INDEX);
1000ce12:	2028      	movs	r0, #40	; 0x28
1000ce14:	4798      	blx	r3
		platform_register_isr(GPIO1_COMBINED_VECTOR_TABLE_INDEX,(void*)PORT1_COMB_Handler);
1000ce16:	494c      	ldr	r1, [pc, #304]	; (1000cf48 <platform_driver_init+0x1dc>)
1000ce18:	2028      	movs	r0, #40	; 0x28
1000ce1a:	682b      	ldr	r3, [r5, #0]
1000ce1c:	4798      	blx	r3
		platform_register_isr(GPIO0_COMBINED_VECTOR_TABLE_INDEX,(void*)gpio0_combined_isr_handler);
1000ce1e:	682b      	ldr	r3, [r5, #0]
1000ce20:	494a      	ldr	r1, [pc, #296]	; (1000cf4c <platform_driver_init+0x1e0>)
1000ce22:	2027      	movs	r0, #39	; 0x27
1000ce24:	4798      	blx	r3
		//gstrFwSem               = (void *)0x100004e4;
		//NMI_MsgQueueRecv = (int (*)(void *, void ** )) 0x00017f67;
		//InternalAppMsgQHandle = (void *)0x10001158;
		//ke_free = (void (*)(void *)) 0x00015e3d;
#elif CHIPVERSION_B0
		ke_msg_send 	= (void (*)(void const *))(*((unsigned int *)0x100400e4));
1000ce26:	4b4a      	ldr	r3, [pc, #296]	; (1000cf50 <platform_driver_init+0x1e4>)
1000ce28:	681a      	ldr	r2, [r3, #0]
1000ce2a:	4b4a      	ldr	r3, [pc, #296]	; (1000cf54 <platform_driver_init+0x1e8>)
1000ce2c:	601a      	str	r2, [r3, #0]
		ke_msg_alloc 	= (void* (*)(ke_msg_id_t const id, ke_task_id_t const dest_id,
1000ce2e:	4a4a      	ldr	r2, [pc, #296]	; (1000cf58 <platform_driver_init+0x1ec>)
1000ce30:	4b4a      	ldr	r3, [pc, #296]	; (1000cf5c <platform_driver_init+0x1f0>)
1000ce32:	601a      	str	r2, [r3, #0]
										ke_task_id_t const src_id, uint16_t const param_len) )0x00019fe9;
		os_sem_up 		= (int (*)(void*))0x0001dbdd;
1000ce34:	4a4a      	ldr	r2, [pc, #296]	; (1000cf60 <platform_driver_init+0x1f4>)
1000ce36:	4b4b      	ldr	r3, [pc, #300]	; (1000cf64 <platform_driver_init+0x1f8>)
1000ce38:	601a      	str	r2, [r3, #0]
		os_sem_down		= (int (*)(void*))0x0001dc5b;
1000ce3a:	4a4b      	ldr	r2, [pc, #300]	; (1000cf68 <platform_driver_init+0x1fc>)
1000ce3c:	4b4b      	ldr	r3, [pc, #300]	; (1000cf6c <platform_driver_init+0x200>)
1000ce3e:	601a      	str	r2, [r3, #0]
		gstrFwSem 		= (void*)0x100405ec;
1000ce40:	4a4b      	ldr	r2, [pc, #300]	; (1000cf70 <platform_driver_init+0x204>)
1000ce42:	4b4c      	ldr	r3, [pc, #304]	; (1000cf74 <platform_driver_init+0x208>)
1000ce44:	601a      	str	r2, [r3, #0]
		NMI_MsgQueueRecv = (int(*)(void*, void ** ))0x0001d5e3;
1000ce46:	4a4c      	ldr	r2, [pc, #304]	; (1000cf78 <platform_driver_init+0x20c>)
1000ce48:	4b4c      	ldr	r3, [pc, #304]	; (1000cf7c <platform_driver_init+0x210>)
1000ce4a:	601a      	str	r2, [r3, #0]
		InternalAppMsgQHandle = (void*)0x10040c20;
1000ce4c:	4a4c      	ldr	r2, [pc, #304]	; (1000cf80 <platform_driver_init+0x214>)
1000ce4e:	4b4d      	ldr	r3, [pc, #308]	; (1000cf84 <platform_driver_init+0x218>)
1000ce50:	601a      	str	r2, [r3, #0]
		ke_free = (void(*)(void*))0x00019f09;
1000ce52:	4a4d      	ldr	r2, [pc, #308]	; (1000cf88 <platform_driver_init+0x21c>)
1000ce54:	4b4d      	ldr	r3, [pc, #308]	; (1000cf8c <platform_driver_init+0x220>)
1000ce56:	601a      	str	r2, [r3, #0]
#endif
		memset(rx_buffer,0,sizeof(rx_buffer));
1000ce58:	22a0      	movs	r2, #160	; 0xa0
1000ce5a:	0092      	lsls	r2, r2, #2
1000ce5c:	2100      	movs	r1, #0
1000ce5e:	484c      	ldr	r0, [pc, #304]	; (1000cf90 <platform_driver_init+0x224>)
1000ce60:	4b4c      	ldr	r3, [pc, #304]	; (1000cf94 <platform_driver_init+0x228>)
1000ce62:	4798      	blx	r3
		plf_event_buff_index = PLF_EVENT_BUFFER_START_INDEX;
1000ce64:	2280      	movs	r2, #128	; 0x80
1000ce66:	0092      	lsls	r2, r2, #2
1000ce68:	4b4b      	ldr	r3, [pc, #300]	; (1000cf98 <platform_driver_init+0x22c>)
1000ce6a:	801a      	strh	r2, [r3, #0]
		platform_event_init();
1000ce6c:	4b4b      	ldr	r3, [pc, #300]	; (1000cf9c <platform_driver_init+0x230>)
1000ce6e:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000ce70:	4653      	mov	r3, sl
1000ce72:	6023      	str	r3, [r4, #0]
1000ce74:	464b      	mov	r3, r9
1000ce76:	6023      	str	r3, [r4, #0]
		
#ifndef CHIPVERSION_B0		
		// spi_flash clock fix.
		spi_flash_clock_init();
#endif
		samb11_app_resume_cb = NULL;
1000ce78:	4b49      	ldr	r3, [pc, #292]	; (1000cfa0 <platform_driver_init+0x234>)
1000ce7a:	4642      	mov	r2, r8
1000ce7c:	601a      	str	r2, [r3, #0]
		*apps_resume_cb = (uint32_t)((resume_callback)samb11_plf_resume_callback);
1000ce7e:	683b      	ldr	r3, [r7, #0]
1000ce80:	4a48      	ldr	r2, [pc, #288]	; (1000cfa4 <platform_driver_init+0x238>)
1000ce82:	601a      	str	r2, [r3, #0]
		*wakeup_source_active_cb = (uint32_t)((wakeup_source_active_callback)wakeup_active_event_callback);
1000ce84:	6833      	ldr	r3, [r6, #0]
1000ce86:	4a48      	ldr	r2, [pc, #288]	; (1000cfa8 <platform_driver_init+0x23c>)
1000ce88:	601a      	str	r2, [r3, #0]
		wakeup_int_unregister_callback(0);
1000ce8a:	2000      	movs	r0, #0
1000ce8c:	4c47      	ldr	r4, [pc, #284]	; (1000cfac <platform_driver_init+0x240>)
1000ce8e:	47a0      	blx	r4
		wakeup_int_unregister_callback(1);
1000ce90:	2001      	movs	r0, #1
1000ce92:	47a0      	blx	r4
		wakeup_int_unregister_callback(2);
1000ce94:	2002      	movs	r0, #2
1000ce96:	47a0      	blx	r4
		platform_initialized = 1;
1000ce98:	2201      	movs	r2, #1
1000ce9a:	4b06      	ldr	r3, [pc, #24]	; (1000ceb4 <platform_driver_init+0x148>)
1000ce9c:	701a      	strb	r2, [r3, #0]
		status = STATUS_SUCCESS;
1000ce9e:	2000      	movs	r0, #0
1000cea0:	e003      	b.n	1000ceaa <platform_driver_init+0x13e>
	}
	else {
		platform_initialized = 1;
1000cea2:	2201      	movs	r2, #1
1000cea4:	4b03      	ldr	r3, [pc, #12]	; (1000ceb4 <platform_driver_init+0x148>)
1000cea6:	701a      	strb	r2, [r3, #0]
		status = STATUS_ALREADY_INITIALIZED;
1000cea8:	2001      	movs	r0, #1
	}
	return status;
}
1000ceaa:	bc1c      	pop	{r2, r3, r4}
1000ceac:	4690      	mov	r8, r2
1000ceae:	4699      	mov	r9, r3
1000ceb0:	46a2      	mov	sl, r4
1000ceb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000ceb4:	100198d8 	.word	0x100198d8
1000ceb8:	1000ccf9 	.word	0x1000ccf9
1000cebc:	1000cd3d 	.word	0x1000cd3d
1000cec0:	100198f8 	.word	0x100198f8
1000cec4:	e000e100 	.word	0xe000e100
1000cec8:	1001a894 	.word	0x1001a894
1000cecc:	000007d7 	.word	0x000007d7
1000ced0:	000007bd 	.word	0x000007bd
1000ced4:	1001a5d0 	.word	0x1001a5d0
1000ced8:	0001bc51 	.word	0x0001bc51
1000cedc:	1001a898 	.word	0x1001a898
1000cee0:	100400bc 	.word	0x100400bc
1000cee4:	100198cc 	.word	0x100198cc
1000cee8:	100400b8 	.word	0x100400b8
1000ceec:	100198c8 	.word	0x100198c8
1000cef0:	0001b99f 	.word	0x0001b99f
1000cef4:	1001a5cc 	.word	0x1001a5cc
1000cef8:	0001b9db 	.word	0x0001b9db
1000cefc:	1001a5d8 	.word	0x1001a5d8
1000cf00:	1001a8a8 	.word	0x1001a8a8
1000cf04:	1004003c 	.word	0x1004003c
1000cf08:	10041fc0 	.word	0x10041fc0
1000cf0c:	1001a5dc 	.word	0x1001a5dc
1000cf10:	10041fc4 	.word	0x10041fc4
1000cf14:	1001a8a4 	.word	0x1001a8a4
1000cf18:	1001a89c 	.word	0x1001a89c
1000cf1c:	10041fd4 	.word	0x10041fd4
1000cf20:	10041fd8 	.word	0x10041fd8
1000cf24:	1001a5d4 	.word	0x1001a5d4
1000cf28:	0001cbe9 	.word	0x0001cbe9
1000cf2c:	100198ec 	.word	0x100198ec
1000cf30:	0001cd8f 	.word	0x0001cd8f
1000cf34:	100198dc 	.word	0x100198dc
1000cf38:	0001cea3 	.word	0x0001cea3
1000cf3c:	10019900 	.word	0x10019900
1000cf40:	0001cbcf 	.word	0x0001cbcf
1000cf44:	100198d4 	.word	0x100198d4
1000cf48:	1000d3f5 	.word	0x1000d3f5
1000cf4c:	1000d389 	.word	0x1000d389
1000cf50:	100400e4 	.word	0x100400e4
1000cf54:	100198f4 	.word	0x100198f4
1000cf58:	00019fe9 	.word	0x00019fe9
1000cf5c:	10019904 	.word	0x10019904
1000cf60:	0001dbdd 	.word	0x0001dbdd
1000cf64:	100198d0 	.word	0x100198d0
1000cf68:	0001dc5b 	.word	0x0001dc5b
1000cf6c:	100198e4 	.word	0x100198e4
1000cf70:	100405ec 	.word	0x100405ec
1000cf74:	100198e0 	.word	0x100198e0
1000cf78:	0001d5e3 	.word	0x0001d5e3
1000cf7c:	100198f0 	.word	0x100198f0
1000cf80:	10040c20 	.word	0x10040c20
1000cf84:	10019908 	.word	0x10019908
1000cf88:	00019f09 	.word	0x00019f09
1000cf8c:	100198c4 	.word	0x100198c4
1000cf90:	1001a614 	.word	0x1001a614
1000cf94:	10011c69 	.word	0x10011c69
1000cf98:	1001a8ac 	.word	0x1001a8ac
1000cf9c:	1000cc25 	.word	0x1000cc25
1000cfa0:	1001a8a0 	.word	0x1001a8a0
1000cfa4:	1000cccd 	.word	0x1000cccd
1000cfa8:	1000d451 	.word	0x1000d451
1000cfac:	1000d439 	.word	0x1000d439

1000cfb0 <platform_register_ble_msg_handler>:


plf_drv_status platform_register_ble_msg_handler(platform_interface_callback fp)
{
	plf_drv_status status;
	if(platform_initialized == 1) {
1000cfb0:	4b04      	ldr	r3, [pc, #16]	; (1000cfc4 <platform_register_ble_msg_handler+0x14>)
1000cfb2:	781a      	ldrb	r2, [r3, #0]
		ble_stack_message_handler = fp;
		status = STATUS_SUCCESS;
	}
	else {
		status = STATUS_NOT_INITIALIZED;
1000cfb4:	2305      	movs	r3, #5


plf_drv_status platform_register_ble_msg_handler(platform_interface_callback fp)
{
	plf_drv_status status;
	if(platform_initialized == 1) {
1000cfb6:	2a01      	cmp	r2, #1
1000cfb8:	d102      	bne.n	1000cfc0 <platform_register_ble_msg_handler+0x10>
		ble_stack_message_handler = fp;
1000cfba:	4b03      	ldr	r3, [pc, #12]	; (1000cfc8 <platform_register_ble_msg_handler+0x18>)
1000cfbc:	6018      	str	r0, [r3, #0]
		status = STATUS_SUCCESS;
1000cfbe:	2300      	movs	r3, #0
	}
	else {
		status = STATUS_NOT_INITIALIZED;
	}
	return status;
}
1000cfc0:	0018      	movs	r0, r3
1000cfc2:	4770      	bx	lr
1000cfc4:	100198d8 	.word	0x100198d8
1000cfc8:	100198f8 	.word	0x100198f8

1000cfcc <platform_interface_send>:


//Sends a message through RW kernel messaging API
//struct ke_msg * p_msg;
void platform_interface_send(uint8_t* data, uint32_t len)
{
1000cfcc:	b570      	push	{r4, r5, r6, lr}
1000cfce:	0004      	movs	r4, r0
	void* params;
	
	#if (CHIPVERSION_B0)
	ke_task_id_t dest_id;
	dest_id = p_msg_hdr->dest_id;
	if(gapm_get_task_from_id != NULL)
1000cfd0:	4b0e      	ldr	r3, [pc, #56]	; (1000d00c <platform_interface_send+0x40>)
1000cfd2:	681b      	ldr	r3, [r3, #0]
1000cfd4:	2b00      	cmp	r3, #0
1000cfd6:	d002      	beq.n	1000cfde <platform_interface_send+0x12>
		p_msg_hdr->dest_id = gapm_get_task_from_id(dest_id);
1000cfd8:	8840      	ldrh	r0, [r0, #2]
1000cfda:	4798      	blx	r3
1000cfdc:	8060      	strh	r0, [r4, #2]
	#endif	//CHIPVERSION_B0
	// Allocate the kernel message
	params = ke_msg_alloc(p_msg_hdr->id, p_msg_hdr->dest_id, p_msg_hdr->src_id, p_msg_hdr->param_len);
1000cfde:	88e3      	ldrh	r3, [r4, #6]
1000cfe0:	88a2      	ldrh	r2, [r4, #4]
1000cfe2:	8861      	ldrh	r1, [r4, #2]
1000cfe4:	8820      	ldrh	r0, [r4, #0]
1000cfe6:	4d0a      	ldr	r5, [pc, #40]	; (1000d010 <platform_interface_send+0x44>)
1000cfe8:	682d      	ldr	r5, [r5, #0]
1000cfea:	47a8      	blx	r5
1000cfec:	0005      	movs	r5, r0
											
	//no params
	if (p_msg_hdr->param_len == 0)
1000cfee:	88e2      	ldrh	r2, [r4, #6]
1000cff0:	2a00      	cmp	r2, #0
1000cff2:	d102      	bne.n	1000cffa <platform_interface_send+0x2e>
	{
		// Send message directly
		at_ke_msg_send(params);
1000cff4:	4b07      	ldr	r3, [pc, #28]	; (1000d014 <platform_interface_send+0x48>)
1000cff6:	4798      	blx	r3
1000cff8:	e006      	b.n	1000d008 <platform_interface_send+0x3c>
	}
	else
	{
		//copy params
		memcpy(params,&(data[KE_MSG_HDR_LENGTH]),p_msg_hdr->param_len);
1000cffa:	0021      	movs	r1, r4
1000cffc:	3108      	adds	r1, #8
1000cffe:	4b06      	ldr	r3, [pc, #24]	; (1000d018 <platform_interface_send+0x4c>)
1000d000:	4798      	blx	r3
		// Send the kernel message
		at_ke_msg_send(params);
1000d002:	0028      	movs	r0, r5
1000d004:	4b03      	ldr	r3, [pc, #12]	; (1000d014 <platform_interface_send+0x48>)
1000d006:	4798      	blx	r3
	}
}
1000d008:	bd70      	pop	{r4, r5, r6, pc}
1000d00a:	46c0      	nop			; (mov r8, r8)
1000d00c:	100198cc 	.word	0x100198cc
1000d010:	10019904 	.word	0x10019904
1000d014:	1000cc55 	.word	0x1000cc55
1000d018:	10011c57 	.word	0x10011c57

1000d01c <send_plf_int_msg_ind>:

void send_plf_int_msg_ind(uint8_t intr_index, uint8_t callback_id, void *data, uint16_t data_len)
{
1000d01c:	b570      	push	{r4, r5, r6, lr}
1000d01e:	0015      	movs	r5, r2
1000d020:	001c      	movs	r4, r3
	void* params;
//#if (CHIPVERSION_A4)	
	//os_sem_up(gstrFwSem);
//#endif
	// Allocate the kernel message
	params = ke_msg_alloc(PERIPHERAL_INTERRUPT_EVENT, TASK_INTERNAL_APP, BUILD_INTR_SRCID(callback_id,intr_index), data_len);
1000d022:	020a      	lsls	r2, r1, #8
1000d024:	4302      	orrs	r2, r0
1000d026:	4b0a      	ldr	r3, [pc, #40]	; (1000d050 <send_plf_int_msg_ind+0x34>)
1000d028:	681e      	ldr	r6, [r3, #0]
1000d02a:	0023      	movs	r3, r4
1000d02c:	2105      	movs	r1, #5
1000d02e:	20a0      	movs	r0, #160	; 0xa0
1000d030:	00c0      	lsls	r0, r0, #3
1000d032:	47b0      	blx	r6
1000d034:	1e06      	subs	r6, r0, #0
											
	//no params
	if(params != NULL) {
1000d036:	d00a      	beq.n	1000d04e <send_plf_int_msg_ind+0x32>
		if((data_len != 0) && (NULL != data))
1000d038:	2c00      	cmp	r4, #0
1000d03a:	d005      	beq.n	1000d048 <send_plf_int_msg_ind+0x2c>
1000d03c:	2d00      	cmp	r5, #0
1000d03e:	d003      	beq.n	1000d048 <send_plf_int_msg_ind+0x2c>
		{
			//copy params
			memcpy(params, data, data_len);
1000d040:	0022      	movs	r2, r4
1000d042:	0029      	movs	r1, r5
1000d044:	4b03      	ldr	r3, [pc, #12]	; (1000d054 <send_plf_int_msg_ind+0x38>)
1000d046:	4798      	blx	r3
		}
		// Send the kernel message
		at_ke_msg_send(params);
1000d048:	0030      	movs	r0, r6
1000d04a:	4b03      	ldr	r3, [pc, #12]	; (1000d058 <send_plf_int_msg_ind+0x3c>)
1000d04c:	4798      	blx	r3
	}
}
1000d04e:	bd70      	pop	{r4, r5, r6, pc}
1000d050:	10019904 	.word	0x10019904
1000d054:	10011c57 	.word	0x10011c57
1000d058:	1000cc55 	.word	0x1000cc55

1000d05c <platform_event_wait>:
//Waits on InternalAppMsgQHandle Queue
// This function won't busy wait if nothing on queue but will down the semaphore and go to a blocking state
// The OS then will move control to other higher priority tasks and will only return if these tasks finish processing AND the queue has received 
//a msg
plf_drv_status platform_event_wait(uint32_t timeout)
{
1000d05c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d05e:	465f      	mov	r7, fp
1000d060:	4656      	mov	r6, sl
1000d062:	464d      	mov	r5, r9
1000d064:	4644      	mov	r4, r8
1000d066:	b4f0      	push	{r4, r5, r6, r7}
1000d068:	b087      	sub	sp, #28
	static struct ke_msg* rcv_msg;
	static struct ke_msghdr	*ke_msg_hdr;
	plf_drv_status status = STATUS_SUCCESS;
	uint8_t bEventTimeoutFlag = 0;
	uint8_t bLoopAgain = 0;
	if(((uint32_t)-1 != timeout) && ((uint32_t)0 < timeout))
1000d06a:	1e44      	subs	r4, r0, #1
plf_drv_status platform_event_wait(uint32_t timeout)
{
	static struct ke_msg* rcv_msg;
	static struct ke_msghdr	*ke_msg_hdr;
	plf_drv_status status = STATUS_SUCCESS;
	uint8_t bEventTimeoutFlag = 0;
1000d06c:	2300      	movs	r3, #0
1000d06e:	4699      	mov	r9, r3
	uint8_t bLoopAgain = 0;
	if(((uint32_t)-1 != timeout) && ((uint32_t)0 < timeout))
1000d070:	1ce3      	adds	r3, r4, #3
1000d072:	d81c      	bhi.n	1000d0ae <platform_event_wait+0x52>
	return num_of_freed;
}

static void platform_start_event_timeout(uint32_t timeout)
{
	uint8_t msg[8+5] = {0};
1000d074:	220d      	movs	r2, #13
1000d076:	2100      	movs	r1, #0
1000d078:	a802      	add	r0, sp, #8
1000d07a:	4b82      	ldr	r3, [pc, #520]	; (1000d284 <platform_event_wait+0x228>)
1000d07c:	4798      	blx	r3
	uint8_t u16TxLen = 0;

	msg[u16TxLen++] = ((DBG_KE_TIMER_REQ) & 0x00FF );
1000d07e:	2333      	movs	r3, #51	; 0x33
1000d080:	aa02      	add	r2, sp, #8
1000d082:	7013      	strb	r3, [r2, #0]
	msg[u16TxLen++] = (((DBG_KE_TIMER_REQ)>>8) & 0x00FF );
1000d084:	3b30      	subs	r3, #48	; 0x30
1000d086:	7053      	strb	r3, [r2, #1]
	msg[u16TxLen++] = ((TASK_DBG) & 0x00FF );
1000d088:	7093      	strb	r3, [r2, #2]
	msg[u16TxLen++] = (((TASK_DBG)>>8) & 0x00FF );	
	msg[u16TxLen++] = ((TASK_INTERNAL_APP) & 0x00FF );
1000d08a:	3302      	adds	r3, #2
1000d08c:	7113      	strb	r3, [r2, #4]
	msg[u16TxLen++] = (((TASK_INTERNAL_APP)>>8) & 0x00FF );
	msg[u16TxLen++] = ((5) & 0x00FF );
1000d08e:	7193      	strb	r3, [r2, #6]
	msg[u16TxLen++] = (((5)>>8) & 0x00FF );
	
	msg[u16TxLen++] = (uint8_t)((timeout) & 0x00FF );
1000d090:	7214      	strb	r4, [r2, #8]
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 8) & 0x00FF) ;
1000d092:	0a23      	lsrs	r3, r4, #8
1000d094:	7253      	strb	r3, [r2, #9]
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 16) & 0x00FF);
1000d096:	0c23      	lsrs	r3, r4, #16
1000d098:	7293      	strb	r3, [r2, #10]
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 24) & 0x00FF);
1000d09a:	0e24      	lsrs	r4, r4, #24
1000d09c:	72d4      	strb	r4, [r2, #11]
	
	msg[u16TxLen++] = ((1) & 0x00FF );
1000d09e:	2301      	movs	r3, #1
1000d0a0:	7313      	strb	r3, [r2, #12]
	
	platform_interface_send(msg, u16TxLen);
1000d0a2:	210d      	movs	r1, #13
1000d0a4:	0010      	movs	r0, r2
1000d0a6:	4b78      	ldr	r3, [pc, #480]	; (1000d288 <platform_event_wait+0x22c>)
1000d0a8:	4798      	blx	r3
	uint8_t bEventTimeoutFlag = 0;
	uint8_t bLoopAgain = 0;
	if(((uint32_t)-1 != timeout) && ((uint32_t)0 < timeout))
	{			
		platform_start_event_timeout(timeout-1);
		bEventTimeoutFlag = 1;
1000d0aa:	2301      	movs	r3, #1
1000d0ac:	4699      	mov	r9, r3
1000d0ae:	2400      	movs	r4, #0
1000d0b0:	2500      	movs	r5, #0
	}

	do {
		if(NMI_MsgQueueRecv(InternalAppMsgQHandle, (void**)&rcv_msg) == STATUS_SUCCESS)
1000d0b2:	4f76      	ldr	r7, [pc, #472]	; (1000d28c <platform_event_wait+0x230>)
1000d0b4:	4e76      	ldr	r6, [pc, #472]	; (1000d290 <platform_event_wait+0x234>)
1000d0b6:	4977      	ldr	r1, [pc, #476]	; (1000d294 <platform_event_wait+0x238>)
1000d0b8:	6838      	ldr	r0, [r7, #0]
1000d0ba:	6833      	ldr	r3, [r6, #0]
1000d0bc:	4798      	blx	r3
1000d0be:	2800      	cmp	r0, #0
1000d0c0:	d000      	beq.n	1000d0c4 <platform_event_wait+0x68>
1000d0c2:	e088      	b.n	1000d1d6 <platform_event_wait+0x17a>
		{
			uint16_t msg_id = rcv_msg->id;
1000d0c4:	4b73      	ldr	r3, [pc, #460]	; (1000d294 <platform_event_wait+0x238>)
1000d0c6:	681c      	ldr	r4, [r3, #0]
1000d0c8:	88a3      	ldrh	r3, [r4, #4]
1000d0ca:	469a      	mov	sl, r3
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
			
			if((rcv_msg->id != DBG_KE_TIMER_RESP) && (bEventTimeoutFlag))
1000d0cc:	23cd      	movs	r3, #205	; 0xcd
1000d0ce:	009b      	lsls	r3, r3, #2
1000d0d0:	459a      	cmp	sl, r3
1000d0d2:	d100      	bne.n	1000d0d6 <platform_event_wait+0x7a>
1000d0d4:	e0c7      	b.n	1000d266 <platform_event_wait+0x20a>

	do {
		if(NMI_MsgQueueRecv(InternalAppMsgQHandle, (void**)&rcv_msg) == STATUS_SUCCESS)
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
1000d0d6:	8923      	ldrh	r3, [r4, #8]
1000d0d8:	469b      	mov	fp, r3
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
1000d0da:	8963      	ldrh	r3, [r4, #10]
1000d0dc:	4698      	mov	r8, r3
			bLoopAgain = 0;
			
			if((rcv_msg->id != DBG_KE_TIMER_RESP) && (bEventTimeoutFlag))
1000d0de:	464b      	mov	r3, r9
1000d0e0:	2b00      	cmp	r3, #0
1000d0e2:	d011      	beq.n	1000d108 <platform_event_wait+0xac>
	platform_interface_send(msg, u16TxLen);
}

static void platform_stop_event_timeout(void)
{
	uint8_t msg[8+5] = {0};
1000d0e4:	220d      	movs	r2, #13
1000d0e6:	2100      	movs	r1, #0
1000d0e8:	a802      	add	r0, sp, #8
1000d0ea:	4b66      	ldr	r3, [pc, #408]	; (1000d284 <platform_event_wait+0x228>)
1000d0ec:	4798      	blx	r3
	uint8_t u16TxLen = 0;

	msg[u16TxLen++] = ((DBG_KE_TIMER_REQ) & 0x00FF );
1000d0ee:	2333      	movs	r3, #51	; 0x33
1000d0f0:	aa02      	add	r2, sp, #8
1000d0f2:	7013      	strb	r3, [r2, #0]
	msg[u16TxLen++] = (((DBG_KE_TIMER_REQ)>>8) & 0x00FF );
1000d0f4:	3b30      	subs	r3, #48	; 0x30
1000d0f6:	7053      	strb	r3, [r2, #1]
	msg[u16TxLen++] = ((TASK_DBG) & 0x00FF );
1000d0f8:	7093      	strb	r3, [r2, #2]
	msg[u16TxLen++] = (((TASK_DBG)>>8) & 0x00FF );	
	msg[u16TxLen++] = ((TASK_INTERNAL_APP) & 0x00FF );
1000d0fa:	3302      	adds	r3, #2
1000d0fc:	7113      	strb	r3, [r2, #4]
	msg[u16TxLen++] = (((TASK_INTERNAL_APP)>>8) & 0x00FF );
	msg[u16TxLen++] = ((5) & 0x00FF );
1000d0fe:	7193      	strb	r3, [r2, #6]
	msg[u16TxLen++] = (uint8_t)(( (0) >> 16) & 0x00FF);
	msg[u16TxLen++] = (uint8_t)(( (0) >> 24) & 0x00FF);
	
	msg[u16TxLen++] = ((0) & 0x00FF );
	
	platform_interface_send(msg, u16TxLen);
1000d100:	210d      	movs	r1, #13
1000d102:	0010      	movs	r0, r2
1000d104:	4b60      	ldr	r3, [pc, #384]	; (1000d288 <platform_event_wait+0x22c>)
1000d106:	4798      	blx	r3
			{
				//Stop timer if it is still running
				platform_stop_event_timeout();
			}
				
			if(msg_id == PERIPHERAL_INTERRUPT_EVENT)
1000d108:	23a0      	movs	r3, #160	; 0xa0
1000d10a:	00db      	lsls	r3, r3, #3
1000d10c:	459a      	cmp	sl, r3
1000d10e:	d121      	bne.n	1000d154 <platform_event_wait+0xf8>
			{
				if(plf_event_buff_index+len > MAX_EVT_BUFF_LEN)
1000d110:	4b61      	ldr	r3, [pc, #388]	; (1000d298 <platform_event_wait+0x23c>)
1000d112:	881b      	ldrh	r3, [r3, #0]
1000d114:	4443      	add	r3, r8
1000d116:	22a0      	movs	r2, #160	; 0xa0
1000d118:	0092      	lsls	r2, r2, #2
1000d11a:	4293      	cmp	r3, r2
1000d11c:	dd02      	ble.n	1000d124 <platform_event_wait+0xc8>
					plf_event_buff_index = PLF_EVENT_BUFFER_START_INDEX;
1000d11e:	3a80      	subs	r2, #128	; 0x80
1000d120:	4b5d      	ldr	r3, [pc, #372]	; (1000d298 <platform_event_wait+0x23c>)
1000d122:	801a      	strh	r2, [r3, #0]
				memcpy(&rx_buffer[plf_event_buff_index],data,len);
1000d124:	4b5c      	ldr	r3, [pc, #368]	; (1000d298 <platform_event_wait+0x23c>)
1000d126:	469a      	mov	sl, r3
1000d128:	881d      	ldrh	r5, [r3, #0]
1000d12a:	4b5c      	ldr	r3, [pc, #368]	; (1000d29c <platform_event_wait+0x240>)
1000d12c:	18ed      	adds	r5, r5, r3
1000d12e:	0021      	movs	r1, r4
1000d130:	310c      	adds	r1, #12
1000d132:	4642      	mov	r2, r8
1000d134:	0028      	movs	r0, r5
1000d136:	4b5a      	ldr	r3, [pc, #360]	; (1000d2a0 <platform_event_wait+0x244>)
1000d138:	4798      	blx	r3
				platform_event_post(src_id,&rx_buffer[plf_event_buff_index],len);
1000d13a:	4642      	mov	r2, r8
1000d13c:	0029      	movs	r1, r5
1000d13e:	4658      	mov	r0, fp
1000d140:	4b58      	ldr	r3, [pc, #352]	; (1000d2a4 <platform_event_wait+0x248>)
1000d142:	4798      	blx	r3
				plf_event_buff_index += len;
1000d144:	4653      	mov	r3, sl
1000d146:	881b      	ldrh	r3, [r3, #0]
1000d148:	4443      	add	r3, r8
1000d14a:	4652      	mov	r2, sl
1000d14c:	8013      	strh	r3, [r2, #0]
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000d14e:	2400      	movs	r4, #0
				if(plf_event_buff_index+len > MAX_EVT_BUFF_LEN)
					plf_event_buff_index = PLF_EVENT_BUFFER_START_INDEX;
				memcpy(&rx_buffer[plf_event_buff_index],data,len);
				platform_event_post(src_id,&rx_buffer[plf_event_buff_index],len);
				plf_event_buff_index += len;
				status = STATUS_RECEIVED_PLF_EVENT_MSG;
1000d150:	2502      	movs	r5, #2
1000d152:	e03a      	b.n	1000d1ca <platform_event_wait+0x16e>
			}
			else
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
1000d154:	4b54      	ldr	r3, [pc, #336]	; (1000d2a8 <platform_event_wait+0x24c>)
1000d156:	681b      	ldr	r3, [r3, #0]
1000d158:	2b00      	cmp	r3, #0
1000d15a:	d032      	beq.n	1000d1c2 <platform_event_wait+0x166>
					if(rcv_msg->id == DBG_KE_TIMER_RESP)
1000d15c:	4b4d      	ldr	r3, [pc, #308]	; (1000d294 <platform_event_wait+0x238>)
1000d15e:	681a      	ldr	r2, [r3, #0]
1000d160:	8893      	ldrh	r3, [r2, #4]
1000d162:	21cd      	movs	r1, #205	; 0xcd
1000d164:	0089      	lsls	r1, r1, #2
1000d166:	428b      	cmp	r3, r1
1000d168:	d104      	bne.n	1000d174 <platform_event_wait+0x118>
					{
						if(bEventTimeoutFlag)
1000d16a:	464b      	mov	r3, r9
						{
							status = STATUS_TIMEOUT;	
						}
						else
						{
							bLoopAgain = 1;
1000d16c:	2401      	movs	r4, #1
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
					if(rcv_msg->id == DBG_KE_TIMER_RESP)
					{
						if(bEventTimeoutFlag)
1000d16e:	2b00      	cmp	r3, #0
1000d170:	d02b      	beq.n	1000d1ca <platform_event_wait+0x16e>
1000d172:	e028      	b.n	1000d1c6 <platform_event_wait+0x16a>
							bLoopAgain = 1;
						}
					}
					else
					{
						ke_msg_hdr = (struct ke_msghdr *)((void *)(rx_buffer+BLE_EVENT_BUFFER_START_INDEX));
1000d174:	4c4d      	ldr	r4, [pc, #308]	; (1000d2ac <platform_event_wait+0x250>)
1000d176:	4d49      	ldr	r5, [pc, #292]	; (1000d29c <platform_event_wait+0x240>)
1000d178:	6025      	str	r5, [r4, #0]
						ke_msg_hdr->id = rcv_msg->id;
1000d17a:	702b      	strb	r3, [r5, #0]
1000d17c:	0a1b      	lsrs	r3, r3, #8
1000d17e:	706b      	strb	r3, [r5, #1]
//#if (CHIPVERSION_A3 || CHIPVERSION_A4)
					//ke_msg_hdr->src_id = rcv_msg->src_id;
//#else
					ke_msg_hdr->src_id = gapm_get_id_from_task(rcv_msg->src_id);
1000d180:	8910      	ldrh	r0, [r2, #8]
1000d182:	4b4b      	ldr	r3, [pc, #300]	; (1000d2b0 <platform_event_wait+0x254>)
1000d184:	681b      	ldr	r3, [r3, #0]
1000d186:	4798      	blx	r3
1000d188:	7128      	strb	r0, [r5, #4]
1000d18a:	0a00      	lsrs	r0, r0, #8
1000d18c:	7168      	strb	r0, [r5, #5]
//#endif  /* (CHIPVERSION_A3 || CHIPVERSION_A4) */
						ke_msg_hdr->dest_id = rcv_msg->dest_id;
1000d18e:	6820      	ldr	r0, [r4, #0]
1000d190:	4b40      	ldr	r3, [pc, #256]	; (1000d294 <platform_event_wait+0x238>)
1000d192:	681a      	ldr	r2, [r3, #0]
1000d194:	88d2      	ldrh	r2, [r2, #6]
1000d196:	8042      	strh	r2, [r0, #2]
						ke_msg_hdr->param_len = rcv_msg->param_len;
1000d198:	681d      	ldr	r5, [r3, #0]
1000d19a:	896b      	ldrh	r3, [r5, #10]
1000d19c:	80c3      	strh	r3, [r0, #6]
						ke_msg_hdr++;
1000d19e:	3008      	adds	r0, #8
1000d1a0:	6020      	str	r0, [r4, #0]
						if(rcv_msg->param_len > 0) {
1000d1a2:	896a      	ldrh	r2, [r5, #10]
1000d1a4:	2a00      	cmp	r2, #0
1000d1a6:	d003      	beq.n	1000d1b0 <platform_event_wait+0x154>
							memcpy((void *)ke_msg_hdr,rcv_msg->param,rcv_msg->param_len);
1000d1a8:	0029      	movs	r1, r5
1000d1aa:	310c      	adds	r1, #12
1000d1ac:	4b3c      	ldr	r3, [pc, #240]	; (1000d2a0 <platform_event_wait+0x244>)
1000d1ae:	4798      	blx	r3
						}
						ble_stack_message_handler(rx_buffer,(rcv_msg->param_len + sizeof(struct ke_msghdr)));
1000d1b0:	8969      	ldrh	r1, [r5, #10]
1000d1b2:	3108      	adds	r1, #8
1000d1b4:	4b3c      	ldr	r3, [pc, #240]	; (1000d2a8 <platform_event_wait+0x24c>)
1000d1b6:	681b      	ldr	r3, [r3, #0]
1000d1b8:	4838      	ldr	r0, [pc, #224]	; (1000d29c <platform_event_wait+0x240>)
1000d1ba:	4798      	blx	r3
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000d1bc:	2400      	movs	r4, #0
						ke_msg_hdr++;
						if(rcv_msg->param_len > 0) {
							memcpy((void *)ke_msg_hdr,rcv_msg->param,rcv_msg->param_len);
						}
						ble_stack_message_handler(rx_buffer,(rcv_msg->param_len + sizeof(struct ke_msghdr)));
						status = STATUS_RECEIVED_BLE_MSG;
1000d1be:	2503      	movs	r5, #3
1000d1c0:	e003      	b.n	1000d1ca <platform_event_wait+0x16e>
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000d1c2:	2400      	movs	r4, #0
1000d1c4:	e001      	b.n	1000d1ca <platform_event_wait+0x16e>
1000d1c6:	2400      	movs	r4, #0
				if(ble_stack_message_handler) {
					if(rcv_msg->id == DBG_KE_TIMER_RESP)
					{
						if(bEventTimeoutFlag)
						{
							status = STATUS_TIMEOUT;	
1000d1c8:	25d0      	movs	r5, #208	; 0xd0
						ble_stack_message_handler(rx_buffer,(rcv_msg->param_len + sizeof(struct ke_msghdr)));
						status = STATUS_RECEIVED_BLE_MSG;
					}
				}
			}
			ke_free(rcv_msg);
1000d1ca:	4b32      	ldr	r3, [pc, #200]	; (1000d294 <platform_event_wait+0x238>)
1000d1cc:	6818      	ldr	r0, [r3, #0]
1000d1ce:	4b39      	ldr	r3, [pc, #228]	; (1000d2b4 <platform_event_wait+0x258>)
1000d1d0:	681b      	ldr	r3, [r3, #0]
1000d1d2:	4798      	blx	r3
1000d1d4:	e000      	b.n	1000d1d8 <platform_event_wait+0x17c>
		}
		else
		{
			status = STATUS_FAILURE;
1000d1d6:	2507      	movs	r5, #7
		}
	}while(bLoopAgain);
1000d1d8:	2c00      	cmp	r4, #0
1000d1da:	d000      	beq.n	1000d1de <platform_event_wait+0x182>
1000d1dc:	e76b      	b.n	1000d0b6 <platform_event_wait+0x5a>
	
	if(bEventTimeoutFlag)
1000d1de:	464b      	mov	r3, r9
1000d1e0:	2b00      	cmp	r3, #0
1000d1e2:	d046      	beq.n	1000d272 <platform_event_wait+0x216>
	{
		//CleanUp if there is any remaining DBG_KE_TIMER_RESP message in queue
		NMI_MsgQueueDestroyOnKeID(InternalAppMsgQHandle, DBG_KE_TIMER_RESP);
1000d1e4:	4b29      	ldr	r3, [pc, #164]	; (1000d28c <platform_event_wait+0x230>)
1000d1e6:	681e      	ldr	r6, [r3, #0]
#endif 
static int NMI_MsgQueueDestroyOnKeID(NMI_MsgQueueHandle* pHandle, ke_msg_id_t u16KeMsgId)
{
	int num_of_freed=0;
	Message * current , *prev = NULL;
	if((NULL == pHandle) && (NULL == pHandle->pstrMessageList))
1000d1e8:	2e00      	cmp	r6, #0
1000d1ea:	d104      	bne.n	1000d1f6 <platform_event_wait+0x19a>
1000d1ec:	2300      	movs	r3, #0
1000d1ee:	6a1c      	ldr	r4, [r3, #32]
1000d1f0:	2c00      	cmp	r4, #0
1000d1f2:	d131      	bne.n	1000d258 <platform_event_wait+0x1fc>
1000d1f4:	e03d      	b.n	1000d272 <platform_event_wait+0x216>
	{
		return num_of_freed;
	}

	current = pHandle->pstrMessageList;
1000d1f6:	6a34      	ldr	r4, [r6, #32]
	os_sem_down(&pHandle->strCriticalSection);
1000d1f8:	2314      	movs	r3, #20
1000d1fa:	469c      	mov	ip, r3
1000d1fc:	44b4      	add	ip, r6
1000d1fe:	4663      	mov	r3, ip
1000d200:	4660      	mov	r0, ip
1000d202:	9300      	str	r3, [sp, #0]
1000d204:	4b2c      	ldr	r3, [pc, #176]	; (1000d2b8 <platform_event_wait+0x25c>)
1000d206:	681b      	ldr	r3, [r3, #0]
1000d208:	4798      	blx	r3
	while(NULL != current)
1000d20a:	2c00      	cmp	r4, #0
1000d20c:	d01f      	beq.n	1000d24e <platform_event_wait+0x1f2>
			}
			ke_free(rcv_msg);
		}
		else
		{
			status = STATUS_FAILURE;
1000d20e:	2700      	movs	r7, #0

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
	while(NULL != current)
	{
		if(u16KeMsgId == ((struct ke_msg*)current->pvBuffer)->id)
1000d210:	23cd      	movs	r3, #205	; 0xcd
1000d212:	009b      	lsls	r3, r3, #2
1000d214:	4698      	mov	r8, r3
		{
			num_of_freed++;
			if(NULL != prev)
			{
				prev->pstrNext = current->pstrNext;
				ke_free(current);
1000d216:	4b27      	ldr	r3, [pc, #156]	; (1000d2b4 <platform_event_wait+0x258>)
1000d218:	469a      	mov	sl, r3
1000d21a:	0020      	movs	r0, r4

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
	while(NULL != current)
	{
		if(u16KeMsgId == ((struct ke_msg*)current->pvBuffer)->id)
1000d21c:	6803      	ldr	r3, [r0, #0]
1000d21e:	889b      	ldrh	r3, [r3, #4]
1000d220:	4543      	cmp	r3, r8
1000d222:	d110      	bne.n	1000d246 <platform_event_wait+0x1ea>
		{
			num_of_freed++;
			if(NULL != prev)
1000d224:	2f00      	cmp	r7, #0
1000d226:	d006      	beq.n	1000d236 <platform_event_wait+0x1da>
			{
				prev->pstrNext = current->pstrNext;
1000d228:	6883      	ldr	r3, [r0, #8]
1000d22a:	60bb      	str	r3, [r7, #8]
				ke_free(current);
1000d22c:	4653      	mov	r3, sl
1000d22e:	681b      	ldr	r3, [r3, #0]
1000d230:	4798      	blx	r3
				current = prev->pstrNext;
1000d232:	68b8      	ldr	r0, [r7, #8]
1000d234:	e009      	b.n	1000d24a <platform_event_wait+0x1ee>
			}
			else
			{
				pHandle->pstrMessageList = current->pstrNext;
1000d236:	6883      	ldr	r3, [r0, #8]
1000d238:	6233      	str	r3, [r6, #32]
				ke_free(current);
1000d23a:	4b1e      	ldr	r3, [pc, #120]	; (1000d2b4 <platform_event_wait+0x258>)
1000d23c:	681b      	ldr	r3, [r3, #0]
1000d23e:	9301      	str	r3, [sp, #4]
1000d240:	4798      	blx	r3
				current = pHandle->pstrMessageList;
1000d242:	6a30      	ldr	r0, [r6, #32]
1000d244:	e001      	b.n	1000d24a <platform_event_wait+0x1ee>
			}
		}
		else
		{
			prev = current;
			current = current ->pstrNext;
1000d246:	0007      	movs	r7, r0
1000d248:	6880      	ldr	r0, [r0, #8]
		return num_of_freed;
	}

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
	while(NULL != current)
1000d24a:	2800      	cmp	r0, #0
1000d24c:	d1e6      	bne.n	1000d21c <platform_event_wait+0x1c0>
		{
			prev = current;
			current = current ->pstrNext;
		}
	}
	os_sem_up(&pHandle->strCriticalSection);
1000d24e:	4b1b      	ldr	r3, [pc, #108]	; (1000d2bc <platform_event_wait+0x260>)
1000d250:	681b      	ldr	r3, [r3, #0]
1000d252:	9800      	ldr	r0, [sp, #0]
1000d254:	4798      	blx	r3
	if(bEventTimeoutFlag)
	{
		//CleanUp if there is any remaining DBG_KE_TIMER_RESP message in queue
		NMI_MsgQueueDestroyOnKeID(InternalAppMsgQHandle, DBG_KE_TIMER_RESP);
	}
	return status;
1000d256:	e00c      	b.n	1000d272 <platform_event_wait+0x216>
	{
		return num_of_freed;
	}

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
1000d258:	2314      	movs	r3, #20
1000d25a:	9300      	str	r3, [sp, #0]
1000d25c:	4b16      	ldr	r3, [pc, #88]	; (1000d2b8 <platform_event_wait+0x25c>)
1000d25e:	681b      	ldr	r3, [r3, #0]
1000d260:	2014      	movs	r0, #20
1000d262:	4798      	blx	r3
1000d264:	e7d3      	b.n	1000d20e <platform_event_wait+0x1b2>
				status = STATUS_RECEIVED_PLF_EVENT_MSG;
			}
			else
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
1000d266:	4b10      	ldr	r3, [pc, #64]	; (1000d2a8 <platform_event_wait+0x24c>)
1000d268:	681b      	ldr	r3, [r3, #0]
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000d26a:	2400      	movs	r4, #0
				status = STATUS_RECEIVED_PLF_EVENT_MSG;
			}
			else
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
1000d26c:	2b00      	cmp	r3, #0
1000d26e:	d0ac      	beq.n	1000d1ca <platform_event_wait+0x16e>
1000d270:	e77b      	b.n	1000d16a <platform_event_wait+0x10e>
	{
		//CleanUp if there is any remaining DBG_KE_TIMER_RESP message in queue
		NMI_MsgQueueDestroyOnKeID(InternalAppMsgQHandle, DBG_KE_TIMER_RESP);
	}
	return status;
}
1000d272:	0028      	movs	r0, r5
1000d274:	b007      	add	sp, #28
1000d276:	bc3c      	pop	{r2, r3, r4, r5}
1000d278:	4690      	mov	r8, r2
1000d27a:	4699      	mov	r9, r3
1000d27c:	46a2      	mov	sl, r4
1000d27e:	46ab      	mov	fp, r5
1000d280:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d282:	46c0      	nop			; (mov r8, r8)
1000d284:	10011c69 	.word	0x10011c69
1000d288:	1000cfcd 	.word	0x1000cfcd
1000d28c:	10019908 	.word	0x10019908
1000d290:	100198f0 	.word	0x100198f0
1000d294:	100198fc 	.word	0x100198fc
1000d298:	1001a8ac 	.word	0x1001a8ac
1000d29c:	1001a614 	.word	0x1001a614
1000d2a0:	10011c57 	.word	0x10011c57
1000d2a4:	1000cbed 	.word	0x1000cbed
1000d2a8:	100198f8 	.word	0x100198f8
1000d2ac:	100198e8 	.word	0x100198e8
1000d2b0:	100198c8 	.word	0x100198c8
1000d2b4:	100198c4 	.word	0x100198c4
1000d2b8:	100198e4 	.word	0x100198e4
1000d2bc:	100198d0 	.word	0x100198d0

1000d2c0 <acquire_sleep_lock>:

plf_drv_status acquire_sleep_lock()
{
1000d2c0:	b510      	push	{r4, lr}
    //DBG_LOG_DEV("[acquire_sleep_lock]\tDisabling ULP");
	plf_drv_status status = STATUS_RESOURCE_BUSY;
	//uint8_t osc_en = REG_PL_RD(0x4000B1EC)&0x01;
	
	rwip_prevent_sleep_set(APP_PREVENT_SLEEP);
1000d2c2:	4b03      	ldr	r3, [pc, #12]	; (1000d2d0 <acquire_sleep_lock+0x10>)
1000d2c4:	681b      	ldr	r3, [r3, #0]
1000d2c6:	2080      	movs	r0, #128	; 0x80
1000d2c8:	0200      	lsls	r0, r0, #8
1000d2ca:	4798      	blx	r3
		/*  */
		os_sem_up(gstrFwSem);
	}
#endif	//0
	return status;
}
1000d2cc:	2008      	movs	r0, #8
1000d2ce:	bd10      	pop	{r4, pc}
1000d2d0:	1001a5cc 	.word	0x1001a5cc

1000d2d4 <release_message_lock>:

plf_drv_status release_message_lock()
{
1000d2d4:	b510      	push	{r4, lr}
	plf_drv_status status = STATUS_SUCCESS;
	rwip_prevent_sleep_clear(MSG_PREVENT_SLEEP);
1000d2d6:	4b03      	ldr	r3, [pc, #12]	; (1000d2e4 <release_message_lock+0x10>)
1000d2d8:	681b      	ldr	r3, [r3, #0]
1000d2da:	2080      	movs	r0, #128	; 0x80
1000d2dc:	01c0      	lsls	r0, r0, #7
1000d2de:	4798      	blx	r3
	return status;
}
1000d2e0:	2000      	movs	r0, #0
1000d2e2:	bd10      	pop	{r4, pc}
1000d2e4:	1001a5d8 	.word	0x1001a5d8

1000d2e8 <release_sleep_lock>:

plf_drv_status release_sleep_lock()
{
1000d2e8:	b510      	push	{r4, lr}
    //DBG_LOG_DEV("[release_sleep_lock]\tEnabling ULP");
	plf_drv_status status = STATUS_SUCCESS;
	rwip_prevent_sleep_clear(MSG_PREVENT_SLEEP);
1000d2ea:	4c05      	ldr	r4, [pc, #20]	; (1000d300 <release_sleep_lock+0x18>)
1000d2ec:	2080      	movs	r0, #128	; 0x80
1000d2ee:	01c0      	lsls	r0, r0, #7
1000d2f0:	6823      	ldr	r3, [r4, #0]
1000d2f2:	4798      	blx	r3
	rwip_prevent_sleep_clear(APP_PREVENT_SLEEP);
1000d2f4:	6823      	ldr	r3, [r4, #0]
1000d2f6:	2080      	movs	r0, #128	; 0x80
1000d2f8:	0200      	lsls	r0, r0, #8
1000d2fa:	4798      	blx	r3
	return status;
}
1000d2fc:	2000      	movs	r0, #0
1000d2fe:	bd10      	pop	{r4, pc}
1000d300:	1001a5d8 	.word	0x1001a5d8

1000d304 <register_resume_callback>:
}

plf_drv_status register_resume_callback(resume_callback cb)
{
	plf_drv_status status = STATUS_SUCCESS;
	if(cb == NULL)
1000d304:	2800      	cmp	r0, #0
1000d306:	d003      	beq.n	1000d310 <register_resume_callback+0xc>
	{
		status = STATUS_INVALID_ARGUMENT;
	}
	else 
	{
		samb11_app_resume_cb = cb;
1000d308:	4b02      	ldr	r3, [pc, #8]	; (1000d314 <register_resume_callback+0x10>)
1000d30a:	6018      	str	r0, [r3, #0]
	}
}

plf_drv_status register_resume_callback(resume_callback cb)
{
	plf_drv_status status = STATUS_SUCCESS;
1000d30c:	2000      	movs	r0, #0
1000d30e:	e000      	b.n	1000d312 <register_resume_callback+0xe>
	if(cb == NULL)
	{
		status = STATUS_INVALID_ARGUMENT;
1000d310:	2009      	movs	r0, #9
	{
		samb11_app_resume_cb = cb;
		//*apps_resume_cb = (uint32_t)cb;
	}
	return status;
}
1000d312:	4770      	bx	lr
1000d314:	1001a8a0 	.word	0x1001a8a0

1000d318 <gpio1_combined_isr_handler>:

enum port_status_code wakeup_int_unregister_callback(enum port_wakeup_source wakeup_source);
void wakeup_active_event_callback(uint32_t wakeup_source);

void gpio1_combined_isr_handler(void)
{
1000d318:	b530      	push	{r4, r5, lr}
	uint8_t index = 0;
	/* portint_callback_t callback; */
	uint8_t port_gpio1 = LPGPIO_16;
	uint32_t intstatus = GPIO1->INTSTATUSCLEAR.reg; /* jeffy */
1000d31a:	4a18      	ldr	r2, [pc, #96]	; (1000d37c <gpio1_combined_isr_handler+0x64>)
1000d31c:	8f13      	ldrh	r3, [r2, #56]	; 0x38
1000d31e:	b29b      	uxth	r3, r3
	GPIO1->INTTYPESET.reg |= (1 << 15); /* jeffy */
1000d320:	8d10      	ldrh	r0, [r2, #40]	; 0x28
1000d322:	2180      	movs	r1, #128	; 0x80
1000d324:	0209      	lsls	r1, r1, #8
1000d326:	4301      	orrs	r1, r0
1000d328:	8511      	strh	r1, [r2, #40]	; 0x28
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO1->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO1->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000d32a:	0010      	movs	r0, r2
1000d32c:	4d14      	ldr	r5, [pc, #80]	; (1000d380 <gpio1_combined_isr_handler+0x68>)
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO1->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000d32e:	2401      	movs	r4, #1
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000d330:	2200      	movs	r2, #0
	uint32_t intstatus = GPIO1->INTSTATUSCLEAR.reg; /* jeffy */
	GPIO1->INTTYPESET.reg |= (1 << 15); /* jeffy */

	do {
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000d332:	05db      	lsls	r3, r3, #23
1000d334:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
1000d336:	d011      	beq.n	1000d35c <gpio1_combined_isr_handler+0x44>
			port_gpio1 = (intstatus & ~(intstatus - 1));
1000d338:	b2db      	uxtb	r3, r3
1000d33a:	4259      	negs	r1, r3
1000d33c:	400b      	ands	r3, r1
			while (!(port_gpio1 == 1)) {
1000d33e:	2b01      	cmp	r3, #1
1000d340:	d006      	beq.n	1000d350 <gpio1_combined_isr_handler+0x38>
1000d342:	0011      	movs	r1, r2
				port_gpio1 = port_gpio1 >> 1;
1000d344:	085b      	lsrs	r3, r3, #1
				index++;
1000d346:	3101      	adds	r1, #1
1000d348:	b2c9      	uxtb	r1, r1
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
			port_gpio1 = (intstatus & ~(intstatus - 1));
			while (!(port_gpio1 == 1)) {
1000d34a:	2b01      	cmp	r3, #1
1000d34c:	d1fa      	bne.n	1000d344 <gpio1_combined_isr_handler+0x2c>
1000d34e:	e000      	b.n	1000d352 <gpio1_combined_isr_handler+0x3a>
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000d350:	0011      	movs	r1, r2
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO1->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000d352:	0023      	movs	r3, r4
1000d354:	408b      	lsls	r3, r1
1000d356:	b29b      	uxth	r3, r3
1000d358:	8703      	strh	r3, [r0, #56]	; 0x38
1000d35a:	e003      	b.n	1000d364 <gpio1_combined_isr_handler+0x4c>
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO1->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000d35c:	8f03      	ldrh	r3, [r0, #56]	; 0x38
1000d35e:	432b      	orrs	r3, r5
1000d360:	b29b      	uxth	r3, r3
1000d362:	8703      	strh	r3, [r0, #56]	; 0x38
			/* REG_GPIO1_INTSTATUSCLEAR = REG_GPIO1_INTENSET; */
		}

		intstatus = GPIO1->INTSTATUSCLEAR.reg;
1000d364:	8f03      	ldrh	r3, [r0, #56]	; 0x38
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000d366:	05db      	lsls	r3, r3, #23
1000d368:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
	} while (intstatus != 0);
1000d36a:	d1e2      	bne.n	1000d332 <gpio1_combined_isr_handler+0x1a>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
1000d36c:	2180      	movs	r1, #128	; 0x80
1000d36e:	0049      	lsls	r1, r1, #1
1000d370:	3381      	adds	r3, #129	; 0x81
1000d372:	33ff      	adds	r3, #255	; 0xff
1000d374:	4a03      	ldr	r2, [pc, #12]	; (1000d384 <gpio1_combined_isr_handler+0x6c>)
1000d376:	50d1      	str	r1, [r2, r3]

	NVIC_ClearPendingIRQ(8);
}
1000d378:	bd30      	pop	{r4, r5, pc}
1000d37a:	46c0      	nop			; (mov r8, r8)
1000d37c:	40011000 	.word	0x40011000
1000d380:	ffff8000 	.word	0xffff8000
1000d384:	e000e100 	.word	0xe000e100

1000d388 <gpio0_combined_isr_handler>:

void gpio0_combined_isr_handler(void)
{
1000d388:	b530      	push	{r4, r5, lr}
	uint8_t index = 0;
	/* portint_callback_t callback; */
	uint8_t port_gpio0 = LPGPIO_0;
	uint32_t intstatus = GPIO0->INTSTATUSCLEAR.reg; /* jeffy */
1000d38a:	4a17      	ldr	r2, [pc, #92]	; (1000d3e8 <gpio0_combined_isr_handler+0x60>)
1000d38c:	8f13      	ldrh	r3, [r2, #56]	; 0x38
1000d38e:	b29b      	uxth	r3, r3
	GPIO0->INTTYPESET.reg |= (1 << 15); /* jeffy */
1000d390:	8d10      	ldrh	r0, [r2, #40]	; 0x28
1000d392:	2180      	movs	r1, #128	; 0x80
1000d394:	0209      	lsls	r1, r1, #8
1000d396:	4301      	orrs	r1, r0
1000d398:	8511      	strh	r1, [r2, #40]	; 0x28
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO0->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO0->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000d39a:	0010      	movs	r0, r2
1000d39c:	4d13      	ldr	r5, [pc, #76]	; (1000d3ec <gpio0_combined_isr_handler+0x64>)
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO0->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000d39e:	2401      	movs	r4, #1
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000d3a0:	2200      	movs	r2, #0
	uint32_t intstatus = GPIO0->INTSTATUSCLEAR.reg; /* jeffy */
	GPIO0->INTTYPESET.reg |= (1 << 15); /* jeffy */

	do {
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000d3a2:	05db      	lsls	r3, r3, #23
1000d3a4:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
1000d3a6:	d011      	beq.n	1000d3cc <gpio0_combined_isr_handler+0x44>
			port_gpio0 = (intstatus & ~(intstatus - 1));
1000d3a8:	b2db      	uxtb	r3, r3
1000d3aa:	4259      	negs	r1, r3
1000d3ac:	400b      	ands	r3, r1
			while (!(port_gpio0 == 1)) {
1000d3ae:	2b01      	cmp	r3, #1
1000d3b0:	d006      	beq.n	1000d3c0 <gpio0_combined_isr_handler+0x38>
1000d3b2:	0011      	movs	r1, r2
				port_gpio0 = port_gpio0 >> 1;
1000d3b4:	085b      	lsrs	r3, r3, #1
				index++;
1000d3b6:	3101      	adds	r1, #1
1000d3b8:	b2c9      	uxtb	r1, r1
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
			port_gpio0 = (intstatus & ~(intstatus - 1));
			while (!(port_gpio0 == 1)) {
1000d3ba:	2b01      	cmp	r3, #1
1000d3bc:	d1fa      	bne.n	1000d3b4 <gpio0_combined_isr_handler+0x2c>
1000d3be:	e000      	b.n	1000d3c2 <gpio0_combined_isr_handler+0x3a>
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000d3c0:	0011      	movs	r1, r2
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO0->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000d3c2:	0023      	movs	r3, r4
1000d3c4:	408b      	lsls	r3, r1
1000d3c6:	b29b      	uxth	r3, r3
1000d3c8:	8703      	strh	r3, [r0, #56]	; 0x38
1000d3ca:	e003      	b.n	1000d3d4 <gpio0_combined_isr_handler+0x4c>
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO0->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000d3cc:	8f03      	ldrh	r3, [r0, #56]	; 0x38
1000d3ce:	432b      	orrs	r3, r5
1000d3d0:	b29b      	uxth	r3, r3
1000d3d2:	8703      	strh	r3, [r0, #56]	; 0x38
			/* REG_GPIO1_INTSTATUSCLEAR = REG_GPIO1_INTENSET; */
		}

		intstatus = GPIO0->INTSTATUSCLEAR.reg;
1000d3d4:	8f03      	ldrh	r3, [r0, #56]	; 0x38
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000d3d6:	05db      	lsls	r3, r3, #23
1000d3d8:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
	} while (intstatus != 0);
1000d3da:	d1e2      	bne.n	1000d3a2 <gpio0_combined_isr_handler+0x1a>
1000d3dc:	2180      	movs	r1, #128	; 0x80
1000d3de:	3381      	adds	r3, #129	; 0x81
1000d3e0:	33ff      	adds	r3, #255	; 0xff
1000d3e2:	4a03      	ldr	r2, [pc, #12]	; (1000d3f0 <gpio0_combined_isr_handler+0x68>)
1000d3e4:	50d1      	str	r1, [r2, r3]

	NVIC_ClearPendingIRQ(7);
}
1000d3e6:	bd30      	pop	{r4, r5, pc}
1000d3e8:	40010000 	.word	0x40010000
1000d3ec:	ffff8000 	.word	0xffff8000
1000d3f0:	e000e100 	.word	0xe000e100

1000d3f4 <PORT1_COMB_Handler>:

#ifdef CHIPVERSION_B0
void PORT1_COMB_Handler(void)
{
1000d3f4:	b510      	push	{r4, lr}
	/* if(CMSDK_GPIO1->INTSTATUS & ((1<<15) | (1<<14) | (1<<13))) { */
	if (GPIO1->INTSTATUSCLEAR.reg & ((1 << 15) | (1 << 14) | (1 << 13))) {
1000d3f6:	4b0c      	ldr	r3, [pc, #48]	; (1000d428 <PORT1_COMB_Handler+0x34>)
1000d3f8:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
1000d3fa:	0b5b      	lsrs	r3, r3, #13
1000d3fc:	d010      	beq.n	1000d420 <PORT1_COMB_Handler+0x2c>
		handle_ext_wakeup_isr();
1000d3fe:	4b0b      	ldr	r3, [pc, #44]	; (1000d42c <PORT1_COMB_Handler+0x38>)
1000d400:	681b      	ldr	r3, [r3, #0]
1000d402:	4798      	blx	r3

		/* clear specific int pin status that caused the Interrupt */
		/* CMSDK_GPIO1->INTCLEAR |= CMSDK_GPIO1->INTSTATUS & ((1<<15) | (1<<14) | (1<<13)); */
		GPIO1->INTSTATUSCLEAR.reg |= GPIO1->INTSTATUSCLEAR.reg & ((1 << 15) | (1 << 14) | (1 << 13));
1000d404:	4a08      	ldr	r2, [pc, #32]	; (1000d428 <PORT1_COMB_Handler+0x34>)
1000d406:	8f13      	ldrh	r3, [r2, #56]	; 0x38
1000d408:	8f11      	ldrh	r1, [r2, #56]	; 0x38
1000d40a:	0b5b      	lsrs	r3, r3, #13
1000d40c:	035b      	lsls	r3, r3, #13
1000d40e:	430b      	orrs	r3, r1
1000d410:	8713      	strh	r3, [r2, #56]	; 0x38
1000d412:	2180      	movs	r1, #128	; 0x80
1000d414:	0049      	lsls	r1, r1, #1
1000d416:	23c0      	movs	r3, #192	; 0xc0
1000d418:	005b      	lsls	r3, r3, #1
1000d41a:	4a05      	ldr	r2, [pc, #20]	; (1000d430 <PORT1_COMB_Handler+0x3c>)
1000d41c:	50d1      	str	r1, [r2, r3]
1000d41e:	e001      	b.n	1000d424 <PORT1_COMB_Handler+0x30>
		/* NVIC_ClearPendingIRQ(PORT1_COMB_IRQn); */
		NVIC_ClearPendingIRQ(8);
	} else {
		gpio1_combined_isr_handler();
1000d420:	4b04      	ldr	r3, [pc, #16]	; (1000d434 <PORT1_COMB_Handler+0x40>)
1000d422:	4798      	blx	r3
	}
}
1000d424:	bd10      	pop	{r4, pc}
1000d426:	46c0      	nop			; (mov r8, r8)
1000d428:	40011000 	.word	0x40011000
1000d42c:	1001a898 	.word	0x1001a898
1000d430:	e000e100 	.word	0xe000e100
1000d434:	1000d319 	.word	0x1000d319

1000d438 <wakeup_int_unregister_callback>:
	{
		wakeup_source_callback[wakeup_source] = 0;
	}
	else 
	{
		status = PORT_STATUS_ERR_INVALID_ARG;
1000d438:	2303      	movs	r3, #3
#endif  /* CHIPVERSION_B0 */

enum port_status_code wakeup_int_unregister_callback(enum port_wakeup_source wakeup_source)
{
	enum port_status_code status = PORT_STATUS_OK;
	if(	(wakeup_source == PORT_WAKEUP_SOURCE_AON_GPIO_0) || 
1000d43a:	2802      	cmp	r0, #2
1000d43c:	d804      	bhi.n	1000d448 <wakeup_int_unregister_callback+0x10>
		(wakeup_source == PORT_WAKEUP_SOURCE_AON_GPIO_1) || 
		(wakeup_source == PORT_WAKEUP_SOURCE_AON_GPIO_2) ) 
	{
		wakeup_source_callback[wakeup_source] = 0;
1000d43e:	0080      	lsls	r0, r0, #2
1000d440:	2200      	movs	r2, #0
1000d442:	4b02      	ldr	r3, [pc, #8]	; (1000d44c <wakeup_int_unregister_callback+0x14>)
1000d444:	50c2      	str	r2, [r0, r3]

#endif  /* CHIPVERSION_B0 */

enum port_status_code wakeup_int_unregister_callback(enum port_wakeup_source wakeup_source)
{
	enum port_status_code status = PORT_STATUS_OK;
1000d446:	2300      	movs	r3, #0
	else 
	{
		status = PORT_STATUS_ERR_INVALID_ARG;
	}
	return status;
}
1000d448:	0018      	movs	r0, r3
1000d44a:	4770      	bx	lr
1000d44c:	1001a8b0 	.word	0x1001a8b0

1000d450 <wakeup_active_event_callback>:

void wakeup_active_event_callback(uint32_t wakeup_source)
{
1000d450:	b510      	push	{r4, lr}
1000d452:	0004      	movs	r4, r0
	portint_callback_t callback;
	uint32_t *pu32WakeSource = (uint32_t *)wakeup_source;
	if((*pu32WakeSource & 0xFF) == 1)
1000d454:	7803      	ldrb	r3, [r0, #0]
1000d456:	2b01      	cmp	r3, #1
1000d458:	d108      	bne.n	1000d46c <wakeup_active_event_callback+0x1c>
	{
		if(wakeup_source_callback[0] != NULL) {
1000d45a:	4b11      	ldr	r3, [pc, #68]	; (1000d4a0 <wakeup_active_event_callback+0x50>)
1000d45c:	681b      	ldr	r3, [r3, #0]
1000d45e:	2b00      	cmp	r3, #0
1000d460:	d000      	beq.n	1000d464 <wakeup_active_event_callback+0x14>
			callback = wakeup_source_callback[0];
			callback();
1000d462:	4798      	blx	r3
		}
		*pu32WakeSource &= ~(0xFF);
1000d464:	23ff      	movs	r3, #255	; 0xff
1000d466:	6822      	ldr	r2, [r4, #0]
1000d468:	439a      	bics	r2, r3
1000d46a:	6022      	str	r2, [r4, #0]
	}
	if(((*pu32WakeSource >> 8) & 0xFF) == 1)
1000d46c:	7863      	ldrb	r3, [r4, #1]
1000d46e:	2b01      	cmp	r3, #1
1000d470:	d108      	bne.n	1000d484 <wakeup_active_event_callback+0x34>
	{
		if(wakeup_source_callback[1] != NULL) {
1000d472:	4b0b      	ldr	r3, [pc, #44]	; (1000d4a0 <wakeup_active_event_callback+0x50>)
1000d474:	685b      	ldr	r3, [r3, #4]
1000d476:	2b00      	cmp	r3, #0
1000d478:	d000      	beq.n	1000d47c <wakeup_active_event_callback+0x2c>
			callback = wakeup_source_callback[1];
			callback();
1000d47a:	4798      	blx	r3
		}
		*pu32WakeSource &= ~(0xFF << 8);
1000d47c:	4b09      	ldr	r3, [pc, #36]	; (1000d4a4 <wakeup_active_event_callback+0x54>)
1000d47e:	6822      	ldr	r2, [r4, #0]
1000d480:	4013      	ands	r3, r2
1000d482:	6023      	str	r3, [r4, #0]
	}
	if(((*pu32WakeSource >> 16) & 0xFF) == 1)
1000d484:	78a3      	ldrb	r3, [r4, #2]
1000d486:	2b01      	cmp	r3, #1
1000d488:	d108      	bne.n	1000d49c <wakeup_active_event_callback+0x4c>
	{
		if(wakeup_source_callback[2] != NULL) {
1000d48a:	4b05      	ldr	r3, [pc, #20]	; (1000d4a0 <wakeup_active_event_callback+0x50>)
1000d48c:	689b      	ldr	r3, [r3, #8]
1000d48e:	2b00      	cmp	r3, #0
1000d490:	d000      	beq.n	1000d494 <wakeup_active_event_callback+0x44>
			callback = wakeup_source_callback[2];
			callback();
1000d492:	4798      	blx	r3
		}
		*pu32WakeSource &= ~(0xFF << 16);
1000d494:	4b04      	ldr	r3, [pc, #16]	; (1000d4a8 <wakeup_active_event_callback+0x58>)
1000d496:	6822      	ldr	r2, [r4, #0]
1000d498:	4013      	ands	r3, r2
1000d49a:	6023      	str	r3, [r4, #0]
	}
}
1000d49c:	bd10      	pop	{r4, pc}
1000d49e:	46c0      	nop			; (mov r8, r8)
1000d4a0:	1001a8b0 	.word	0x1001a8b0
1000d4a4:	ffff00ff 	.word	0xffff00ff
1000d4a8:	ff00ffff 	.word	0xff00ffff

1000d4ac <resume_cb>:
	sms_pressure_init_variables();
}


static void resume_cb(void)
{
1000d4ac:	b510      	push	{r4, lr}
	init_port_list(); // re-initialize all ports
1000d4ae:	4b08      	ldr	r3, [pc, #32]	; (1000d4d0 <resume_cb+0x24>)
1000d4b0:	4798      	blx	r3
	serial_console_init(); // GPIO (UART) for the console
1000d4b2:	4b08      	ldr	r3, [pc, #32]	; (1000d4d4 <resume_cb+0x28>)
1000d4b4:	4798      	blx	r3
	sms_dualtimer_init();
1000d4b6:	4b08      	ldr	r3, [pc, #32]	; (1000d4d8 <resume_cb+0x2c>)
1000d4b8:	4798      	blx	r3
	sms_button_gpio_init(); // GPIO (AO_0 & AO_1) for the buttons
1000d4ba:	4b08      	ldr	r3, [pc, #32]	; (1000d4dc <resume_cb+0x30>)
1000d4bc:	4798      	blx	r3
	sms_led_gpio_init();
1000d4be:	4b08      	ldr	r3, [pc, #32]	; (1000d4e0 <resume_cb+0x34>)
1000d4c0:	4798      	blx	r3
	sms_spi_master_configure();
1000d4c2:	4b08      	ldr	r3, [pc, #32]	; (1000d4e4 <resume_cb+0x38>)
1000d4c4:	4798      	blx	r3
	sms_i2c_master_configure();
1000d4c6:	4b08      	ldr	r3, [pc, #32]	; (1000d4e8 <resume_cb+0x3c>)
1000d4c8:	4798      	blx	r3
	//sms_mpu_configure_gpio();
	sms_monitor_configure_gpio();
1000d4ca:	4b08      	ldr	r3, [pc, #32]	; (1000d4ec <resume_cb+0x40>)
1000d4cc:	4798      	blx	r3
	//gpio_pin_set_output_level(SMS_PRESSURE_VCC_PIN, true);
}
1000d4ce:	bd10      	pop	{r4, pc}
1000d4d0:	1000ccf9 	.word	0x1000ccf9
1000d4d4:	1000ca61 	.word	0x1000ca61
1000d4d8:	10009b95 	.word	0x10009b95
1000d4dc:	100088fd 	.word	0x100088fd
1000d4e0:	100096d5 	.word	0x100096d5
1000d4e4:	10009a49 	.word	0x10009a49
1000d4e8:	10008b05 	.word	0x10008b05
1000d4ec:	10008a65 	.word	0x10008a65

1000d4f0 <sms_init_variables>:
*/
/*- Includes ---------------------------------------------------------------*/
#include "sms_peripheral1.h"

void sms_init_variables(void)
{
1000d4f0:	b510      	push	{r4, lr}
	timer1_current_mode = TIMER1_MODE_NONE;
1000d4f2:	2300      	movs	r3, #0
1000d4f4:	4a09      	ldr	r2, [pc, #36]	; (1000d51c <sms_init_variables+0x2c>)
1000d4f6:	7013      	strb	r3, [r2, #0]
	timer2_current_mode = TIMER2_MODE_NONE;
1000d4f8:	4a09      	ldr	r2, [pc, #36]	; (1000d520 <sms_init_variables+0x30>)
1000d4fa:	7013      	strb	r3, [r2, #0]
	sms_working_mode = SMS_MODE_BUTTON_SOLO;
1000d4fc:	2101      	movs	r1, #1
1000d4fe:	4a09      	ldr	r2, [pc, #36]	; (1000d524 <sms_init_variables+0x34>)
1000d500:	7011      	strb	r1, [r2, #0]
	ulp_ready = false;
1000d502:	4a09      	ldr	r2, [pc, #36]	; (1000d528 <sms_init_variables+0x38>)
1000d504:	7013      	strb	r3, [r2, #0]
	sms_ble_timeout = BLE_TIMEOUT_OFF;
1000d506:	2201      	movs	r2, #1
1000d508:	4252      	negs	r2, r2
1000d50a:	4b08      	ldr	r3, [pc, #32]	; (1000d52c <sms_init_variables+0x3c>)
1000d50c:	601a      	str	r2, [r3, #0]
	
	sms_ble_init_variables();
1000d50e:	4b08      	ldr	r3, [pc, #32]	; (1000d530 <sms_init_variables+0x40>)
1000d510:	4798      	blx	r3
	sms_button_init_variables();
1000d512:	4b08      	ldr	r3, [pc, #32]	; (1000d534 <sms_init_variables+0x44>)
1000d514:	4798      	blx	r3
	sms_pressure_init_variables();
1000d516:	4b08      	ldr	r3, [pc, #32]	; (1000d538 <sms_init_variables+0x48>)
1000d518:	4798      	blx	r3
}
1000d51a:	bd10      	pop	{r4, pc}
1000d51c:	100199dc 	.word	0x100199dc
1000d520:	10019bf7 	.word	0x10019bf7
1000d524:	10019ab4 	.word	0x10019ab4
1000d528:	10019ab5 	.word	0x10019ab5
1000d52c:	10019ab0 	.word	0x10019ab0
1000d530:	10008509 	.word	0x10008509
1000d534:	100088d5 	.word	0x100088d5
1000d538:	10009749 	.word	0x10009749

1000d53c <main>:
//sms_current_interrupt.int_on = true;
//}


int main(void)
{
1000d53c:	b510      	push	{r4, lr}
	/* Define current BLE state
	* ------------------------ */
	ble_instance.current_state = BLE_STATE_STARTING;
1000d53e:	2210      	movs	r2, #16
1000d540:	4b2c      	ldr	r3, [pc, #176]	; (1000d5f4 <main+0xb8>)
1000d542:	701a      	strb	r2, [r3, #0]
	
	/* Initialize platform
	* ------------------- */
	platform_driver_init();
1000d544:	4b2c      	ldr	r3, [pc, #176]	; (1000d5f8 <main+0xbc>)
1000d546:	4798      	blx	r3
	gpio_init(); // GPIO
1000d548:	4b2c      	ldr	r3, [pc, #176]	; (1000d5fc <main+0xc0>)
1000d54a:	4798      	blx	r3
	serial_console_init(); // serial console for debugging
1000d54c:	4b2c      	ldr	r3, [pc, #176]	; (1000d600 <main+0xc4>)
1000d54e:	4798      	blx	r3
	
	/* Disable ULP
	* ----------- */
	acquire_sleep_lock();
1000d550:	4b2c      	ldr	r3, [pc, #176]	; (1000d604 <main+0xc8>)
1000d552:	4798      	blx	r3
	

	/* Initialize SMS flags
	* -------------------- */
	sms_init_variables();
1000d554:	4b2c      	ldr	r3, [pc, #176]	; (1000d608 <main+0xcc>)
1000d556:	4798      	blx	r3
	
	
	/* Initialize hardware components
	* ------------------------------ */
	// Dualtimer
	sms_dualtimer_init();
1000d558:	4b2c      	ldr	r3, [pc, #176]	; (1000d60c <main+0xd0>)
1000d55a:	4798      	blx	r3
	
	// Buttons
	sms_button_gpio_init();
1000d55c:	4b2c      	ldr	r3, [pc, #176]	; (1000d610 <main+0xd4>)
1000d55e:	4798      	blx	r3
	
	// LED
	sms_led_gpio_init();
1000d560:	4b2c      	ldr	r3, [pc, #176]	; (1000d614 <main+0xd8>)
1000d562:	4798      	blx	r3
	
	// I2C
	sms_i2c_master_configure();
1000d564:	4b2c      	ldr	r3, [pc, #176]	; (1000d618 <main+0xdc>)
1000d566:	4798      	blx	r3
	
	// SPI
	sms_spi_master_configure();
1000d568:	4b2c      	ldr	r3, [pc, #176]	; (1000d61c <main+0xe0>)
1000d56a:	4798      	blx	r3
	
	// MPU
	sms_mpu_configure_gpio();
1000d56c:	4b2c      	ldr	r3, [pc, #176]	; (1000d620 <main+0xe4>)
1000d56e:	4798      	blx	r3
	
	// monitoring...
	sms_monitor_configure_gpio();
1000d570:	4b2c      	ldr	r3, [pc, #176]	; (1000d624 <main+0xe8>)
1000d572:	4798      	blx	r3
	
	/* Initialize the BLE module
	* ------------------------- */
	ble_device_init(NULL); // initialize the BLE chip and set the device address
1000d574:	2000      	movs	r0, #0
1000d576:	4b2c      	ldr	r3, [pc, #176]	; (1000d628 <main+0xec>)
1000d578:	4798      	blx	r3
	
	
	/* Define BLE services
	* ------------------- */
	sms_button_define_services();
1000d57a:	4b2c      	ldr	r3, [pc, #176]	; (1000d62c <main+0xf0>)
1000d57c:	4798      	blx	r3
	sms_pressure_define_services();
1000d57e:	4b2c      	ldr	r3, [pc, #176]	; (1000d630 <main+0xf4>)
1000d580:	4798      	blx	r3
	sms_mpu_define_services();
1000d582:	4b2c      	ldr	r3, [pc, #176]	; (1000d634 <main+0xf8>)
1000d584:	4798      	blx	r3
	
	
	/* Register callbacks
	* ------------------ */
	// Recovering from ULP
	register_resume_callback(resume_cb); // register resume callback
1000d586:	482c      	ldr	r0, [pc, #176]	; (1000d638 <main+0xfc>)
1000d588:	4b2c      	ldr	r3, [pc, #176]	; (1000d63c <main+0x100>)
1000d58a:	4798      	blx	r3

	// Dualtimer (AON timer enables on registration... so do it later)
	sms_dualtimer_register_callback(DUALTIMER_TIMER1, sms_dualtimer1_cb); // button pressing timer
1000d58c:	492c      	ldr	r1, [pc, #176]	; (1000d640 <main+0x104>)
1000d58e:	2000      	movs	r0, #0
1000d590:	4b2c      	ldr	r3, [pc, #176]	; (1000d644 <main+0x108>)
1000d592:	4798      	blx	r3
	// DUALTIMER_TIMER2 used for blocking delay!! So don't register callback!!

	// Buttons
	sms_button_register_callbacks();
1000d594:	4b2c      	ldr	r3, [pc, #176]	; (1000d648 <main+0x10c>)
1000d596:	4798      	blx	r3
	
	// MPU
	sms_mpu_register_callbacks();
1000d598:	4b2c      	ldr	r3, [pc, #176]	; (1000d64c <main+0x110>)
1000d59a:	4798      	blx	r3

	// BLE
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK, BLE_GAP_EVENT_TYPE, sms_ble_gap_cb);
1000d59c:	4a2c      	ldr	r2, [pc, #176]	; (1000d650 <main+0x114>)
1000d59e:	2100      	movs	r1, #0
1000d5a0:	2000      	movs	r0, #0
1000d5a2:	4c2c      	ldr	r4, [pc, #176]	; (1000d654 <main+0x118>)
1000d5a4:	47a0      	blx	r4
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK, BLE_GATT_SERVER_EVENT_TYPE, sms_ble_gatt_server_cb);
1000d5a6:	4a2c      	ldr	r2, [pc, #176]	; (1000d658 <main+0x11c>)
1000d5a8:	2102      	movs	r1, #2
1000d5aa:	2000      	movs	r0, #0
1000d5ac:	47a0      	blx	r4


	/* Enable buttons interrupts
	* ------------------------- */
	sms_button_toggle_callback(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
1000d5ae:	2100      	movs	r1, #0
1000d5b0:	2000      	movs	r0, #0
1000d5b2:	4b2a      	ldr	r3, [pc, #168]	; (1000d65c <main+0x120>)
1000d5b4:	4798      	blx	r3

	if(sms_mpu_check()) {
1000d5b6:	4b2a      	ldr	r3, [pc, #168]	; (1000d660 <main+0x124>)
1000d5b8:	4798      	blx	r3
1000d5ba:	2800      	cmp	r0, #0
1000d5bc:	d005      	beq.n	1000d5ca <main+0x8e>
		DBG_LOG("MPU not here...");
1000d5be:	4829      	ldr	r0, [pc, #164]	; (1000d664 <main+0x128>)
1000d5c0:	4b29      	ldr	r3, [pc, #164]	; (1000d668 <main+0x12c>)
1000d5c2:	4798      	blx	r3
1000d5c4:	4829      	ldr	r0, [pc, #164]	; (1000d66c <main+0x130>)
1000d5c6:	4b2a      	ldr	r3, [pc, #168]	; (1000d670 <main+0x134>)
1000d5c8:	4798      	blx	r3
	}
	
	sms_mpu_calibrate(mpu_device.gyro_bias, mpu_device.accel_bias);
1000d5ca:	492a      	ldr	r1, [pc, #168]	; (1000d674 <main+0x138>)
1000d5cc:	0008      	movs	r0, r1
1000d5ce:	380c      	subs	r0, #12
1000d5d0:	4b29      	ldr	r3, [pc, #164]	; (1000d678 <main+0x13c>)
1000d5d2:	4798      	blx	r3
	
	sms_mpu_initialize();
1000d5d4:	4b29      	ldr	r3, [pc, #164]	; (1000d67c <main+0x140>)
1000d5d6:	4798      	blx	r3
	//DBG_LOG("MPU-9250 initialized...");
	//DBG_LOG("Bias values:\n\rgyroX %f, gyroY %f, gyroZ %f\n\raccelX %f, accelY %f, accelZ %f", mpu_device.gyro_bias[0], mpu_device.gyro_bias[1], mpu_device.gyro_bias[2], mpu_device.accel_bias[0], mpu_device.accel_bias[1], mpu_device.accel_bias[2]);
	
	if(sms_mpu_comp_check()) {
1000d5d8:	4b29      	ldr	r3, [pc, #164]	; (1000d680 <main+0x144>)
1000d5da:	4798      	blx	r3
1000d5dc:	2800      	cmp	r0, #0
1000d5de:	d005      	beq.n	1000d5ec <main+0xb0>
		DBG_LOG("Compass not here...");
1000d5e0:	4820      	ldr	r0, [pc, #128]	; (1000d664 <main+0x128>)
1000d5e2:	4b21      	ldr	r3, [pc, #132]	; (1000d668 <main+0x12c>)
1000d5e4:	4798      	blx	r3
1000d5e6:	4827      	ldr	r0, [pc, #156]	; (1000d684 <main+0x148>)
1000d5e8:	4b21      	ldr	r3, [pc, #132]	; (1000d670 <main+0x134>)
1000d5ea:	4798      	blx	r3
	}
	
	sms_mpu_comp_initialize(mpu_device.mag_calibration);
1000d5ec:	4826      	ldr	r0, [pc, #152]	; (1000d688 <main+0x14c>)
1000d5ee:	4b27      	ldr	r3, [pc, #156]	; (1000d68c <main+0x150>)
1000d5f0:	4798      	blx	r3
1000d5f2:	e7fe      	b.n	1000d5f2 <main+0xb6>
1000d5f4:	10019ab8 	.word	0x10019ab8
1000d5f8:	1000cd6d 	.word	0x1000cd6d
1000d5fc:	1000a819 	.word	0x1000a819
1000d600:	1000ca61 	.word	0x1000ca61
1000d604:	1000d2c1 	.word	0x1000d2c1
1000d608:	1000d4f1 	.word	0x1000d4f1
1000d60c:	10009b95 	.word	0x10009b95
1000d610:	100088fd 	.word	0x100088fd
1000d614:	100096d5 	.word	0x100096d5
1000d618:	10008b05 	.word	0x10008b05
1000d61c:	10009a49 	.word	0x10009a49
1000d620:	10008c99 	.word	0x10008c99
1000d624:	10008a65 	.word	0x10008a65
1000d628:	1000c369 	.word	0x1000c369
1000d62c:	10008a15 	.word	0x10008a15
1000d630:	10009935 	.word	0x10009935
1000d634:	10008cfd 	.word	0x10008cfd
1000d638:	1000d4ad 	.word	0x1000d4ad
1000d63c:	1000d305 	.word	0x1000d305
1000d640:	10009c5d 	.word	0x10009c5d
1000d644:	10009bd9 	.word	0x10009bd9
1000d648:	100089a5 	.word	0x100089a5
1000d64c:	10008ce5 	.word	0x10008ce5
1000d650:	10016edc 	.word	0x10016edc
1000d654:	1000c299 	.word	0x1000c299
1000d658:	10016f28 	.word	0x10016f28
1000d65c:	100089cd 	.word	0x100089cd
1000d660:	10009689 	.word	0x10009689
1000d664:	10016de8 	.word	0x10016de8
1000d668:	100127bd 	.word	0x100127bd
1000d66c:	10017ae0 	.word	0x10017ae0
1000d670:	1001269d 	.word	0x1001269d
1000d674:	10019a34 	.word	0x10019a34
1000d678:	10008d65 	.word	0x10008d65
1000d67c:	100091f9 	.word	0x100091f9
1000d680:	100091e1 	.word	0x100091e1
1000d684:	10017af0 	.word	0x10017af0
1000d688:	10019a40 	.word	0x10019a40
1000d68c:	100090dd 	.word	0x100090dd

1000d690 <internal_event_post>:
1000d690:	b570      	push	{r4, r5, r6, lr}
1000d692:	4d12      	ldr	r5, [pc, #72]	; (1000d6dc <internal_event_post+0x4c>)
1000d694:	682c      	ldr	r4, [r5, #0]
1000d696:	2c00      	cmp	r4, #0
1000d698:	d014      	beq.n	1000d6c4 <internal_event_post+0x34>
1000d69a:	6826      	ldr	r6, [r4, #0]
1000d69c:	60e2      	str	r2, [r4, #12]
1000d69e:	602e      	str	r6, [r5, #0]
1000d6a0:	2500      	movs	r5, #0
1000d6a2:	4a0f      	ldr	r2, [pc, #60]	; (1000d6e0 <internal_event_post+0x50>)
1000d6a4:	8123      	strh	r3, [r4, #8]
1000d6a6:	6813      	ldr	r3, [r2, #0]
1000d6a8:	6025      	str	r5, [r4, #0]
1000d6aa:	80a0      	strh	r0, [r4, #4]
1000d6ac:	80e1      	strh	r1, [r4, #6]
1000d6ae:	42ab      	cmp	r3, r5
1000d6b0:	d101      	bne.n	1000d6b6 <internal_event_post+0x26>
1000d6b2:	6014      	str	r4, [r2, #0]
1000d6b4:	e011      	b.n	1000d6da <internal_event_post+0x4a>
1000d6b6:	681a      	ldr	r2, [r3, #0]
1000d6b8:	2a00      	cmp	r2, #0
1000d6ba:	d001      	beq.n	1000d6c0 <internal_event_post+0x30>
1000d6bc:	1c13      	adds	r3, r2, #0
1000d6be:	e7fa      	b.n	1000d6b6 <internal_event_post+0x26>
1000d6c0:	601c      	str	r4, [r3, #0]
1000d6c2:	e00a      	b.n	1000d6da <internal_event_post+0x4a>
1000d6c4:	b2c4      	uxtb	r4, r0
1000d6c6:	2c00      	cmp	r4, #0
1000d6c8:	d107      	bne.n	1000d6da <internal_event_post+0x4a>
1000d6ca:	4c06      	ldr	r4, [pc, #24]	; (1000d6e4 <internal_event_post+0x54>)
1000d6cc:	60e2      	str	r2, [r4, #12]
1000d6ce:	2201      	movs	r2, #1
1000d6d0:	8123      	strh	r3, [r4, #8]
1000d6d2:	4b05      	ldr	r3, [pc, #20]	; (1000d6e8 <internal_event_post+0x58>)
1000d6d4:	80a0      	strh	r0, [r4, #4]
1000d6d6:	80e1      	strh	r1, [r4, #6]
1000d6d8:	701a      	strb	r2, [r3, #0]
1000d6da:	bd70      	pop	{r4, r5, r6, pc}
1000d6dc:	10019924 	.word	0x10019924
1000d6e0:	10019920 	.word	0x10019920
1000d6e4:	1001990c 	.word	0x1001990c
1000d6e8:	1001991c 	.word	0x1001991c

1000d6ec <internal_event_init>:
1000d6ec:	b510      	push	{r4, lr}
1000d6ee:	4b08      	ldr	r3, [pc, #32]	; (1000d710 <internal_event_init+0x24>)
1000d6f0:	0900      	lsrs	r0, r0, #4
1000d6f2:	0100      	lsls	r0, r0, #4
1000d6f4:	681a      	ldr	r2, [r3, #0]
1000d6f6:	1808      	adds	r0, r1, r0
1000d6f8:	4281      	cmp	r1, r0
1000d6fa:	d003      	beq.n	1000d704 <internal_event_init+0x18>
1000d6fc:	600a      	str	r2, [r1, #0]
1000d6fe:	1c0a      	adds	r2, r1, #0
1000d700:	3110      	adds	r1, #16
1000d702:	e7f9      	b.n	1000d6f8 <internal_event_init+0xc>
1000d704:	601a      	str	r2, [r3, #0]
1000d706:	2200      	movs	r2, #0
1000d708:	4b02      	ldr	r3, [pc, #8]	; (1000d714 <internal_event_init+0x28>)
1000d70a:	601a      	str	r2, [r3, #0]
1000d70c:	bd10      	pop	{r4, pc}
1000d70e:	46c0      	nop			; (mov r8, r8)
1000d710:	10019924 	.word	0x10019924
1000d714:	10019920 	.word	0x10019920

1000d718 <special_events_handler>:
1000d718:	b538      	push	{r3, r4, r5, lr}
1000d71a:	4c1b      	ldr	r4, [pc, #108]	; (1000d788 <special_events_handler+0x70>)
1000d71c:	1c03      	adds	r3, r0, #0
1000d71e:	8825      	ldrh	r5, [r4, #0]
1000d720:	1c08      	adds	r0, r1, #0
1000d722:	1c21      	adds	r1, r4, #0
1000d724:	429d      	cmp	r5, r3
1000d726:	d107      	bne.n	1000d738 <special_events_handler+0x20>
1000d728:	88a5      	ldrh	r5, [r4, #4]
1000d72a:	4285      	cmp	r5, r0
1000d72c:	d104      	bne.n	1000d738 <special_events_handler+0x20>
1000d72e:	2301      	movs	r3, #1
1000d730:	425b      	negs	r3, r3
1000d732:	8023      	strh	r3, [r4, #0]
1000d734:	60a2      	str	r2, [r4, #8]
1000d736:	e009      	b.n	1000d74c <special_events_handler+0x34>
1000d738:	884c      	ldrh	r4, [r1, #2]
1000d73a:	429c      	cmp	r4, r3
1000d73c:	d10a      	bne.n	1000d754 <special_events_handler+0x3c>
1000d73e:	888c      	ldrh	r4, [r1, #4]
1000d740:	4284      	cmp	r4, r0
1000d742:	d107      	bne.n	1000d754 <special_events_handler+0x3c>
1000d744:	2301      	movs	r3, #1
1000d746:	425b      	negs	r3, r3
1000d748:	804b      	strh	r3, [r1, #2]
1000d74a:	608a      	str	r2, [r1, #8]
1000d74c:	4b0f      	ldr	r3, [pc, #60]	; (1000d78c <special_events_handler+0x74>)
1000d74e:	4798      	blx	r3
1000d750:	2001      	movs	r0, #1
1000d752:	e017      	b.n	1000d784 <special_events_handler+0x6c>
1000d754:	490e      	ldr	r1, [pc, #56]	; (1000d790 <special_events_handler+0x78>)
1000d756:	428b      	cmp	r3, r1
1000d758:	d00e      	beq.n	1000d778 <special_events_handler+0x60>
1000d75a:	490e      	ldr	r1, [pc, #56]	; (1000d794 <special_events_handler+0x7c>)
1000d75c:	428b      	cmp	r3, r1
1000d75e:	d007      	beq.n	1000d770 <special_events_handler+0x58>
1000d760:	490d      	ldr	r1, [pc, #52]	; (1000d798 <special_events_handler+0x80>)
1000d762:	2000      	movs	r0, #0
1000d764:	428b      	cmp	r3, r1
1000d766:	d10d      	bne.n	1000d784 <special_events_handler+0x6c>
1000d768:	1c10      	adds	r0, r2, #0
1000d76a:	4b0c      	ldr	r3, [pc, #48]	; (1000d79c <special_events_handler+0x84>)
1000d76c:	4798      	blx	r3
1000d76e:	e7ef      	b.n	1000d750 <special_events_handler+0x38>
1000d770:	1c11      	adds	r1, r2, #0
1000d772:	4b0b      	ldr	r3, [pc, #44]	; (1000d7a0 <special_events_handler+0x88>)
1000d774:	2200      	movs	r2, #0
1000d776:	e002      	b.n	1000d77e <special_events_handler+0x66>
1000d778:	1c11      	adds	r1, r2, #0
1000d77a:	2200      	movs	r2, #0
1000d77c:	4b09      	ldr	r3, [pc, #36]	; (1000d7a4 <special_events_handler+0x8c>)
1000d77e:	4798      	blx	r3
1000d780:	4243      	negs	r3, r0
1000d782:	4158      	adcs	r0, r3
1000d784:	bd38      	pop	{r3, r4, r5, pc}
1000d786:	46c0      	nop			; (mov r8, r8)
1000d788:	1001a8bc 	.word	0x1001a8bc
1000d78c:	1000f101 	.word	0x1000f101
1000d790:	00000e13 	.word	0x00000e13
1000d794:	00000e15 	.word	0x00000e15
1000d798:	00000e01 	.word	0x00000e01
1000d79c:	1000f471 	.word	0x1000f471
1000d7a0:	1000f631 	.word	0x1000f631
1000d7a4:	1000f709 	.word	0x1000f709

1000d7a8 <at_ble_event_get>:
1000d7a8:	2300      	movs	r3, #0
1000d7aa:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d7ac:	b087      	sub	sp, #28
1000d7ae:	9204      	str	r2, [sp, #16]
1000d7b0:	7003      	strb	r3, [r0, #0]
1000d7b2:	9b04      	ldr	r3, [sp, #16]
1000d7b4:	9003      	str	r0, [sp, #12]
1000d7b6:	3b01      	subs	r3, #1
1000d7b8:	1c0d      	adds	r5, r1, #0
1000d7ba:	9305      	str	r3, [sp, #20]
1000d7bc:	3303      	adds	r3, #3
1000d7be:	d802      	bhi.n	1000d7c6 <at_ble_event_get+0x1e>
1000d7c0:	9804      	ldr	r0, [sp, #16]
1000d7c2:	4bae      	ldr	r3, [pc, #696]	; (1000da7c <at_ble_event_get+0x2d4>)
1000d7c4:	4798      	blx	r3
1000d7c6:	9b05      	ldr	r3, [sp, #20]
1000d7c8:	4cad      	ldr	r4, [pc, #692]	; (1000da80 <at_ble_event_get+0x2d8>)
1000d7ca:	3303      	adds	r3, #3
1000d7cc:	d902      	bls.n	1000d7d4 <at_ble_event_get+0x2c>
1000d7ce:	2300      	movs	r3, #0
1000d7d0:	9302      	str	r3, [sp, #8]
1000d7d2:	e015      	b.n	1000d800 <at_ble_event_get+0x58>
1000d7d4:	2300      	movs	r3, #0
1000d7d6:	9302      	str	r3, [sp, #8]
1000d7d8:	6823      	ldr	r3, [r4, #0]
1000d7da:	2b00      	cmp	r3, #0
1000d7dc:	d113      	bne.n	1000d806 <at_ble_event_get+0x5e>
1000d7de:	9b02      	ldr	r3, [sp, #8]
1000d7e0:	2bd0      	cmp	r3, #208	; 0xd0
1000d7e2:	d100      	bne.n	1000d7e6 <at_ble_event_get+0x3e>
1000d7e4:	e2da      	b.n	1000dd9c <at_ble_event_get+0x5f4>
1000d7e6:	9804      	ldr	r0, [sp, #16]
1000d7e8:	4ba6      	ldr	r3, [pc, #664]	; (1000da84 <at_ble_event_get+0x2dc>)
1000d7ea:	4798      	blx	r3
1000d7ec:	9002      	str	r0, [sp, #8]
1000d7ee:	2802      	cmp	r0, #2
1000d7f0:	d1f2      	bne.n	1000d7d8 <at_ble_event_get+0x30>
1000d7f2:	e03f      	b.n	1000d874 <at_ble_event_get+0xcc>
1000d7f4:	9804      	ldr	r0, [sp, #16]
1000d7f6:	4ba3      	ldr	r3, [pc, #652]	; (1000da84 <at_ble_event_get+0x2dc>)
1000d7f8:	4798      	blx	r3
1000d7fa:	9002      	str	r0, [sp, #8]
1000d7fc:	2802      	cmp	r0, #2
1000d7fe:	d039      	beq.n	1000d874 <at_ble_event_get+0xcc>
1000d800:	6823      	ldr	r3, [r4, #0]
1000d802:	2b00      	cmp	r3, #0
1000d804:	d0f6      	beq.n	1000d7f4 <at_ble_event_get+0x4c>
1000d806:	9b02      	ldr	r3, [sp, #8]
1000d808:	2bd0      	cmp	r3, #208	; 0xd0
1000d80a:	d100      	bne.n	1000d80e <at_ble_event_get+0x66>
1000d80c:	e2c6      	b.n	1000dd9c <at_ble_event_get+0x5f4>
1000d80e:	9b02      	ldr	r3, [sp, #8]
1000d810:	3b03      	subs	r3, #3
1000d812:	1e5a      	subs	r2, r3, #1
1000d814:	4193      	sbcs	r3, r2
1000d816:	9a02      	ldr	r2, [sp, #8]
1000d818:	425b      	negs	r3, r3
1000d81a:	401a      	ands	r2, r3
1000d81c:	6823      	ldr	r3, [r4, #0]
1000d81e:	9202      	str	r2, [sp, #8]
1000d820:	2b00      	cmp	r3, #0
1000d822:	d100      	bne.n	1000d826 <at_ble_event_get+0x7e>
1000d824:	e2c2      	b.n	1000ddac <at_ble_event_get+0x604>
1000d826:	681a      	ldr	r2, [r3, #0]
1000d828:	68de      	ldr	r6, [r3, #12]
1000d82a:	6022      	str	r2, [r4, #0]
1000d82c:	88da      	ldrh	r2, [r3, #6]
1000d82e:	9201      	str	r2, [sp, #4]
1000d830:	4a95      	ldr	r2, [pc, #596]	; (1000da88 <at_ble_event_get+0x2e0>)
1000d832:	889c      	ldrh	r4, [r3, #4]
1000d834:	6811      	ldr	r1, [r2, #0]
1000d836:	6013      	str	r3, [r2, #0]
1000d838:	6019      	str	r1, [r3, #0]
1000d83a:	4b94      	ldr	r3, [pc, #592]	; (1000da8c <at_ble_event_get+0x2e4>)
1000d83c:	781b      	ldrb	r3, [r3, #0]
1000d83e:	2b01      	cmp	r3, #1
1000d840:	d10f      	bne.n	1000d862 <at_ble_event_get+0xba>
1000d842:	4b93      	ldr	r3, [pc, #588]	; (1000da90 <at_ble_event_get+0x2e8>)
1000d844:	4a92      	ldr	r2, [pc, #584]	; (1000da90 <at_ble_event_get+0x2e8>)
1000d846:	8898      	ldrh	r0, [r3, #4]
1000d848:	88d9      	ldrh	r1, [r3, #6]
1000d84a:	68d2      	ldr	r2, [r2, #12]
1000d84c:	891b      	ldrh	r3, [r3, #8]
1000d84e:	4f91      	ldr	r7, [pc, #580]	; (1000da94 <at_ble_event_get+0x2ec>)
1000d850:	47b8      	blx	r7
1000d852:	2210      	movs	r2, #16
1000d854:	4b90      	ldr	r3, [pc, #576]	; (1000da98 <at_ble_event_get+0x2f0>)
1000d856:	488e      	ldr	r0, [pc, #568]	; (1000da90 <at_ble_event_get+0x2e8>)
1000d858:	2100      	movs	r1, #0
1000d85a:	4798      	blx	r3
1000d85c:	2300      	movs	r3, #0
1000d85e:	4a8b      	ldr	r2, [pc, #556]	; (1000da8c <at_ble_event_get+0x2e4>)
1000d860:	7013      	strb	r3, [r2, #0]
1000d862:	9b02      	ldr	r3, [sp, #8]
1000d864:	2b00      	cmp	r3, #0
1000d866:	d114      	bne.n	1000d892 <at_ble_event_get+0xea>
1000d868:	4b8c      	ldr	r3, [pc, #560]	; (1000da9c <at_ble_event_get+0x2f4>)
1000d86a:	429c      	cmp	r4, r3
1000d86c:	d009      	beq.n	1000d882 <at_ble_event_get+0xda>
1000d86e:	4b8c      	ldr	r3, [pc, #560]	; (1000daa0 <at_ble_event_get+0x2f8>)
1000d870:	429c      	cmp	r4, r3
1000d872:	d127      	bne.n	1000d8c4 <at_ble_event_get+0x11c>
1000d874:	233a      	movs	r3, #58	; 0x3a
1000d876:	9a03      	ldr	r2, [sp, #12]
1000d878:	7013      	strb	r3, [r2, #0]
1000d87a:	2300      	movs	r3, #0
1000d87c:	9302      	str	r3, [sp, #8]
1000d87e:	1c1d      	adds	r5, r3, #0
1000d880:	e007      	b.n	1000d892 <at_ble_event_get+0xea>
1000d882:	9b01      	ldr	r3, [sp, #4]
1000d884:	42a3      	cmp	r3, r4
1000d886:	d000      	beq.n	1000d88a <at_ble_event_get+0xe2>
1000d888:	e28a      	b.n	1000dda0 <at_ble_event_get+0x5f8>
1000d88a:	2338      	movs	r3, #56	; 0x38
1000d88c:	9a03      	ldr	r2, [sp, #12]
1000d88e:	7013      	strb	r3, [r2, #0]
1000d890:	602e      	str	r6, [r5, #0]
1000d892:	9b03      	ldr	r3, [sp, #12]
1000d894:	781b      	ldrb	r3, [r3, #0]
1000d896:	2b3b      	cmp	r3, #59	; 0x3b
1000d898:	d101      	bne.n	1000d89e <at_ble_event_get+0xf6>
1000d89a:	4b82      	ldr	r3, [pc, #520]	; (1000daa4 <at_ble_event_get+0x2fc>)
1000d89c:	4798      	blx	r3
1000d89e:	9b03      	ldr	r3, [sp, #12]
1000d8a0:	781b      	ldrb	r3, [r3, #0]
1000d8a2:	2b3b      	cmp	r3, #59	; 0x3b
1000d8a4:	d003      	beq.n	1000d8ae <at_ble_event_get+0x106>
1000d8a6:	9b05      	ldr	r3, [sp, #20]
1000d8a8:	3303      	adds	r3, #3
1000d8aa:	d904      	bls.n	1000d8b6 <at_ble_event_get+0x10e>
1000d8ac:	e283      	b.n	1000ddb6 <at_ble_event_get+0x60e>
1000d8ae:	9b02      	ldr	r3, [sp, #8]
1000d8b0:	2b00      	cmp	r3, #0
1000d8b2:	d088      	beq.n	1000d7c6 <at_ble_event_get+0x1e>
1000d8b4:	e7f7      	b.n	1000d8a6 <at_ble_event_get+0xfe>
1000d8b6:	9b02      	ldr	r3, [sp, #8]
1000d8b8:	2bd0      	cmp	r3, #208	; 0xd0
1000d8ba:	d100      	bne.n	1000d8be <at_ble_event_get+0x116>
1000d8bc:	e27b      	b.n	1000ddb6 <at_ble_event_get+0x60e>
1000d8be:	4b7a      	ldr	r3, [pc, #488]	; (1000daa8 <at_ble_event_get+0x300>)
1000d8c0:	4798      	blx	r3
1000d8c2:	e278      	b.n	1000ddb6 <at_ble_event_get+0x60e>
1000d8c4:	9b01      	ldr	r3, [sp, #4]
1000d8c6:	2bbb      	cmp	r3, #187	; 0xbb
1000d8c8:	d125      	bne.n	1000d916 <at_ble_event_get+0x16e>
1000d8ca:	2cbb      	cmp	r4, #187	; 0xbb
1000d8cc:	d123      	bne.n	1000d916 <at_ble_event_get+0x16e>
1000d8ce:	466b      	mov	r3, sp
1000d8d0:	891b      	ldrh	r3, [r3, #8]
1000d8d2:	80ab      	strh	r3, [r5, #4]
1000d8d4:	78b3      	ldrb	r3, [r6, #2]
1000d8d6:	7872      	ldrb	r2, [r6, #1]
1000d8d8:	78f0      	ldrb	r0, [r6, #3]
1000d8da:	021b      	lsls	r3, r3, #8
1000d8dc:	4313      	orrs	r3, r2
1000d8de:	7971      	ldrb	r1, [r6, #5]
1000d8e0:	7932      	ldrb	r2, [r6, #4]
1000d8e2:	70a8      	strb	r0, [r5, #2]
1000d8e4:	4871      	ldr	r0, [pc, #452]	; (1000daac <at_ble_event_get+0x304>)
1000d8e6:	802b      	strh	r3, [r5, #0]
1000d8e8:	4283      	cmp	r3, r0
1000d8ea:	d806      	bhi.n	1000d8fa <at_ble_event_get+0x152>
1000d8ec:	4a70      	ldr	r2, [pc, #448]	; (1000dab0 <at_ble_event_get+0x308>)
1000d8ee:	4293      	cmp	r3, r2
1000d8f0:	d20b      	bcs.n	1000d90a <at_ble_event_get+0x162>
1000d8f2:	4a70      	ldr	r2, [pc, #448]	; (1000dab4 <at_ble_event_get+0x30c>)
1000d8f4:	4293      	cmp	r3, r2
1000d8f6:	d008      	beq.n	1000d90a <at_ble_event_get+0x162>
1000d8f8:	e009      	b.n	1000d90e <at_ble_event_get+0x166>
1000d8fa:	486f      	ldr	r0, [pc, #444]	; (1000dab8 <at_ble_event_get+0x310>)
1000d8fc:	4283      	cmp	r3, r0
1000d8fe:	d106      	bne.n	1000d90e <at_ble_event_get+0x166>
1000d900:	020b      	lsls	r3, r1, #8
1000d902:	4313      	orrs	r3, r2
1000d904:	80ab      	strh	r3, [r5, #4]
1000d906:	2337      	movs	r3, #55	; 0x37
1000d908:	e002      	b.n	1000d910 <at_ble_event_get+0x168>
1000d90a:	2336      	movs	r3, #54	; 0x36
1000d90c:	e000      	b.n	1000d910 <at_ble_event_get+0x168>
1000d90e:	2300      	movs	r3, #0
1000d910:	9a03      	ldr	r2, [sp, #12]
1000d912:	7013      	strb	r3, [r2, #0]
1000d914:	e7bd      	b.n	1000d892 <at_ble_event_get+0xea>
1000d916:	4b69      	ldr	r3, [pc, #420]	; (1000dabc <at_ble_event_get+0x314>)
1000d918:	429c      	cmp	r4, r3
1000d91a:	d100      	bne.n	1000d91e <at_ble_event_get+0x176>
1000d91c:	e144      	b.n	1000dba8 <at_ble_event_get+0x400>
1000d91e:	d865      	bhi.n	1000d9ec <at_ble_event_get+0x244>
1000d920:	4b67      	ldr	r3, [pc, #412]	; (1000dac0 <at_ble_event_get+0x318>)
1000d922:	429c      	cmp	r4, r3
1000d924:	d100      	bne.n	1000d928 <at_ble_event_get+0x180>
1000d926:	e1d5      	b.n	1000dcd4 <at_ble_event_get+0x52c>
1000d928:	d82f      	bhi.n	1000d98a <at_ble_event_get+0x1e2>
1000d92a:	4b66      	ldr	r3, [pc, #408]	; (1000dac4 <at_ble_event_get+0x31c>)
1000d92c:	429c      	cmp	r4, r3
1000d92e:	d100      	bne.n	1000d932 <at_ble_event_get+0x18a>
1000d930:	e1e0      	b.n	1000dcf4 <at_ble_event_get+0x54c>
1000d932:	d813      	bhi.n	1000d95c <at_ble_event_get+0x1b4>
1000d934:	4b64      	ldr	r3, [pc, #400]	; (1000dac8 <at_ble_event_get+0x320>)
1000d936:	429c      	cmp	r4, r3
1000d938:	d100      	bne.n	1000d93c <at_ble_event_get+0x194>
1000d93a:	e1a3      	b.n	1000dc84 <at_ble_event_get+0x4dc>
1000d93c:	d804      	bhi.n	1000d948 <at_ble_event_get+0x1a0>
1000d93e:	2638      	movs	r6, #56	; 0x38
1000d940:	42b4      	cmp	r4, r6
1000d942:	d100      	bne.n	1000d946 <at_ble_event_get+0x19e>
1000d944:	e225      	b.n	1000dd92 <at_ble_event_get+0x5ea>
1000d946:	e117      	b.n	1000db78 <at_ble_event_get+0x3d0>
1000d948:	4b60      	ldr	r3, [pc, #384]	; (1000dacc <at_ble_event_get+0x324>)
1000d94a:	429c      	cmp	r4, r3
1000d94c:	d100      	bne.n	1000d950 <at_ble_event_get+0x1a8>
1000d94e:	e19f      	b.n	1000dc90 <at_ble_event_get+0x4e8>
1000d950:	33fe      	adds	r3, #254	; 0xfe
1000d952:	33ff      	adds	r3, #255	; 0xff
1000d954:	429c      	cmp	r4, r3
1000d956:	d100      	bne.n	1000d95a <at_ble_event_get+0x1b2>
1000d958:	e1d3      	b.n	1000dd02 <at_ble_event_get+0x55a>
1000d95a:	e10d      	b.n	1000db78 <at_ble_event_get+0x3d0>
1000d95c:	4b5c      	ldr	r3, [pc, #368]	; (1000dad0 <at_ble_event_get+0x328>)
1000d95e:	429c      	cmp	r4, r3
1000d960:	d100      	bne.n	1000d964 <at_ble_event_get+0x1bc>
1000d962:	e1a9      	b.n	1000dcb8 <at_ble_event_get+0x510>
1000d964:	d808      	bhi.n	1000d978 <at_ble_event_get+0x1d0>
1000d966:	4b5b      	ldr	r3, [pc, #364]	; (1000dad4 <at_ble_event_get+0x32c>)
1000d968:	429c      	cmp	r4, r3
1000d96a:	d100      	bne.n	1000d96e <at_ble_event_get+0x1c6>
1000d96c:	e196      	b.n	1000dc9c <at_ble_event_get+0x4f4>
1000d96e:	4b5a      	ldr	r3, [pc, #360]	; (1000dad8 <at_ble_event_get+0x330>)
1000d970:	429c      	cmp	r4, r3
1000d972:	d100      	bne.n	1000d976 <at_ble_event_get+0x1ce>
1000d974:	e199      	b.n	1000dcaa <at_ble_event_get+0x502>
1000d976:	e0ff      	b.n	1000db78 <at_ble_event_get+0x3d0>
1000d978:	4b58      	ldr	r3, [pc, #352]	; (1000dadc <at_ble_event_get+0x334>)
1000d97a:	429c      	cmp	r4, r3
1000d97c:	d100      	bne.n	1000d980 <at_ble_event_get+0x1d8>
1000d97e:	e1a2      	b.n	1000dcc6 <at_ble_event_get+0x51e>
1000d980:	4b57      	ldr	r3, [pc, #348]	; (1000dae0 <at_ble_event_get+0x338>)
1000d982:	429c      	cmp	r4, r3
1000d984:	d100      	bne.n	1000d988 <at_ble_event_get+0x1e0>
1000d986:	e1d4      	b.n	1000dd32 <at_ble_event_get+0x58a>
1000d988:	e0f6      	b.n	1000db78 <at_ble_event_get+0x3d0>
1000d98a:	4b56      	ldr	r3, [pc, #344]	; (1000dae4 <at_ble_event_get+0x33c>)
1000d98c:	429c      	cmp	r4, r3
1000d98e:	d100      	bne.n	1000d992 <at_ble_event_get+0x1ea>
1000d990:	e1c8      	b.n	1000dd24 <at_ble_event_get+0x57c>
1000d992:	d812      	bhi.n	1000d9ba <at_ble_event_get+0x212>
1000d994:	4b54      	ldr	r3, [pc, #336]	; (1000dae8 <at_ble_event_get+0x340>)
1000d996:	429c      	cmp	r4, r3
1000d998:	d100      	bne.n	1000d99c <at_ble_event_get+0x1f4>
1000d99a:	e1d1      	b.n	1000dd40 <at_ble_event_get+0x598>
1000d99c:	d804      	bhi.n	1000d9a8 <at_ble_event_get+0x200>
1000d99e:	4b53      	ldr	r3, [pc, #332]	; (1000daec <at_ble_event_get+0x344>)
1000d9a0:	429c      	cmp	r4, r3
1000d9a2:	d100      	bne.n	1000d9a6 <at_ble_event_get+0x1fe>
1000d9a4:	e19b      	b.n	1000dcde <at_ble_event_get+0x536>
1000d9a6:	e0e7      	b.n	1000db78 <at_ble_event_get+0x3d0>
1000d9a8:	4b51      	ldr	r3, [pc, #324]	; (1000daf0 <at_ble_event_get+0x348>)
1000d9aa:	429c      	cmp	r4, r3
1000d9ac:	d100      	bne.n	1000d9b0 <at_ble_event_get+0x208>
1000d9ae:	e1ad      	b.n	1000dd0c <at_ble_event_get+0x564>
1000d9b0:	4b50      	ldr	r3, [pc, #320]	; (1000daf4 <at_ble_event_get+0x34c>)
1000d9b2:	429c      	cmp	r4, r3
1000d9b4:	d100      	bne.n	1000d9b8 <at_ble_event_get+0x210>
1000d9b6:	e1b0      	b.n	1000dd1a <at_ble_event_get+0x572>
1000d9b8:	e0de      	b.n	1000db78 <at_ble_event_get+0x3d0>
1000d9ba:	4b4f      	ldr	r3, [pc, #316]	; (1000daf8 <at_ble_event_get+0x350>)
1000d9bc:	429c      	cmp	r4, r3
1000d9be:	d100      	bne.n	1000d9c2 <at_ble_event_get+0x21a>
1000d9c0:	e0e0      	b.n	1000db84 <at_ble_event_get+0x3dc>
1000d9c2:	d809      	bhi.n	1000d9d8 <at_ble_event_get+0x230>
1000d9c4:	3b08      	subs	r3, #8
1000d9c6:	429c      	cmp	r4, r3
1000d9c8:	d100      	bne.n	1000d9cc <at_ble_event_get+0x224>
1000d9ca:	e0d7      	b.n	1000db7c <at_ble_event_get+0x3d4>
1000d9cc:	4b4b      	ldr	r3, [pc, #300]	; (1000dafc <at_ble_event_get+0x354>)
1000d9ce:	2639      	movs	r6, #57	; 0x39
1000d9d0:	429c      	cmp	r4, r3
1000d9d2:	d100      	bne.n	1000d9d6 <at_ble_event_get+0x22e>
1000d9d4:	e1dd      	b.n	1000dd92 <at_ble_event_get+0x5ea>
1000d9d6:	e0cf      	b.n	1000db78 <at_ble_event_get+0x3d0>
1000d9d8:	23d1      	movs	r3, #209	; 0xd1
1000d9da:	011b      	lsls	r3, r3, #4
1000d9dc:	429c      	cmp	r4, r3
1000d9de:	d100      	bne.n	1000d9e2 <at_ble_event_get+0x23a>
1000d9e0:	e0d6      	b.n	1000db90 <at_ble_event_get+0x3e8>
1000d9e2:	4b47      	ldr	r3, [pc, #284]	; (1000db00 <at_ble_event_get+0x358>)
1000d9e4:	429c      	cmp	r4, r3
1000d9e6:	d100      	bne.n	1000d9ea <at_ble_event_get+0x242>
1000d9e8:	e0d8      	b.n	1000db9c <at_ble_event_get+0x3f4>
1000d9ea:	e0c5      	b.n	1000db78 <at_ble_event_get+0x3d0>
1000d9ec:	4b45      	ldr	r3, [pc, #276]	; (1000db04 <at_ble_event_get+0x35c>)
1000d9ee:	429c      	cmp	r4, r3
1000d9f0:	d100      	bne.n	1000d9f4 <at_ble_event_get+0x24c>
1000d9f2:	e117      	b.n	1000dc24 <at_ble_event_get+0x47c>
1000d9f4:	d82e      	bhi.n	1000da54 <at_ble_event_get+0x2ac>
1000d9f6:	4b44      	ldr	r3, [pc, #272]	; (1000db08 <at_ble_event_get+0x360>)
1000d9f8:	429c      	cmp	r4, r3
1000d9fa:	d100      	bne.n	1000d9fe <at_ble_event_get+0x256>
1000d9fc:	e13d      	b.n	1000dc7a <at_ble_event_get+0x4d2>
1000d9fe:	d812      	bhi.n	1000da26 <at_ble_event_get+0x27e>
1000da00:	4b42      	ldr	r3, [pc, #264]	; (1000db0c <at_ble_event_get+0x364>)
1000da02:	429c      	cmp	r4, r3
1000da04:	d100      	bne.n	1000da08 <at_ble_event_get+0x260>
1000da06:	e0e8      	b.n	1000dbda <at_ble_event_get+0x432>
1000da08:	d804      	bhi.n	1000da14 <at_ble_event_get+0x26c>
1000da0a:	3b03      	subs	r3, #3
1000da0c:	429c      	cmp	r4, r3
1000da0e:	d100      	bne.n	1000da12 <at_ble_event_get+0x26a>
1000da10:	e0d0      	b.n	1000dbb4 <at_ble_event_get+0x40c>
1000da12:	e0b1      	b.n	1000db78 <at_ble_event_get+0x3d0>
1000da14:	4b3e      	ldr	r3, [pc, #248]	; (1000db10 <at_ble_event_get+0x368>)
1000da16:	429c      	cmp	r4, r3
1000da18:	d100      	bne.n	1000da1c <at_ble_event_get+0x274>
1000da1a:	e0d0      	b.n	1000dbbe <at_ble_event_get+0x416>
1000da1c:	4b3d      	ldr	r3, [pc, #244]	; (1000db14 <at_ble_event_get+0x36c>)
1000da1e:	429c      	cmp	r4, r3
1000da20:	d100      	bne.n	1000da24 <at_ble_event_get+0x27c>
1000da22:	e0f9      	b.n	1000dc18 <at_ble_event_get+0x470>
1000da24:	e0a8      	b.n	1000db78 <at_ble_event_get+0x3d0>
1000da26:	4b3c      	ldr	r3, [pc, #240]	; (1000db18 <at_ble_event_get+0x370>)
1000da28:	429c      	cmp	r4, r3
1000da2a:	d100      	bne.n	1000da2e <at_ble_event_get+0x286>
1000da2c:	e0db      	b.n	1000dbe6 <at_ble_event_get+0x43e>
1000da2e:	d808      	bhi.n	1000da42 <at_ble_event_get+0x29a>
1000da30:	4b3a      	ldr	r3, [pc, #232]	; (1000db1c <at_ble_event_get+0x374>)
1000da32:	429c      	cmp	r4, r3
1000da34:	d100      	bne.n	1000da38 <at_ble_event_get+0x290>
1000da36:	e11b      	b.n	1000dc70 <at_ble_event_get+0x4c8>
1000da38:	4b39      	ldr	r3, [pc, #228]	; (1000db20 <at_ble_event_get+0x378>)
1000da3a:	429c      	cmp	r4, r3
1000da3c:	d100      	bne.n	1000da40 <at_ble_event_get+0x298>
1000da3e:	e0d8      	b.n	1000dbf2 <at_ble_event_get+0x44a>
1000da40:	e09a      	b.n	1000db78 <at_ble_event_get+0x3d0>
1000da42:	4b38      	ldr	r3, [pc, #224]	; (1000db24 <at_ble_event_get+0x37c>)
1000da44:	429c      	cmp	r4, r3
1000da46:	d100      	bne.n	1000da4a <at_ble_event_get+0x2a2>
1000da48:	e0d8      	b.n	1000dbfc <at_ble_event_get+0x454>
1000da4a:	4b37      	ldr	r3, [pc, #220]	; (1000db28 <at_ble_event_get+0x380>)
1000da4c:	429c      	cmp	r4, r3
1000da4e:	d100      	bne.n	1000da52 <at_ble_event_get+0x2aa>
1000da50:	e0db      	b.n	1000dc0a <at_ble_event_get+0x462>
1000da52:	e091      	b.n	1000db78 <at_ble_event_get+0x3d0>
1000da54:	4b35      	ldr	r3, [pc, #212]	; (1000db2c <at_ble_event_get+0x384>)
1000da56:	429c      	cmp	r4, r3
1000da58:	d100      	bne.n	1000da5c <at_ble_event_get+0x2b4>
1000da5a:	e0f7      	b.n	1000dc4c <at_ble_event_get+0x4a4>
1000da5c:	d876      	bhi.n	1000db4c <at_ble_event_get+0x3a4>
1000da5e:	4b34      	ldr	r3, [pc, #208]	; (1000db30 <at_ble_event_get+0x388>)
1000da60:	429c      	cmp	r4, r3
1000da62:	d100      	bne.n	1000da66 <at_ble_event_get+0x2be>
1000da64:	e0f8      	b.n	1000dc58 <at_ble_event_get+0x4b0>
1000da66:	d869      	bhi.n	1000db3c <at_ble_event_get+0x394>
1000da68:	4b32      	ldr	r3, [pc, #200]	; (1000db34 <at_ble_event_get+0x38c>)
1000da6a:	429c      	cmp	r4, r3
1000da6c:	d100      	bne.n	1000da70 <at_ble_event_get+0x2c8>
1000da6e:	e0e0      	b.n	1000dc32 <at_ble_event_get+0x48a>
1000da70:	4b31      	ldr	r3, [pc, #196]	; (1000db38 <at_ble_event_get+0x390>)
1000da72:	429c      	cmp	r4, r3
1000da74:	d100      	bne.n	1000da78 <at_ble_event_get+0x2d0>
1000da76:	e0a9      	b.n	1000dbcc <at_ble_event_get+0x424>
1000da78:	e07e      	b.n	1000db78 <at_ble_event_get+0x3d0>
1000da7a:	46c0      	nop			; (mov r8, r8)
1000da7c:	1000f139 	.word	0x1000f139
1000da80:	10019920 	.word	0x10019920
1000da84:	1000d05d 	.word	0x1000d05d
1000da88:	10019924 	.word	0x10019924
1000da8c:	1001991c 	.word	0x1001991c
1000da90:	1001990c 	.word	0x1001990c
1000da94:	1000d691 	.word	0x1000d691
1000da98:	10011c69 	.word	0x10011c69
1000da9c:	0000ffff 	.word	0x0000ffff
1000daa0:	0000fffe 	.word	0x0000fffe
1000daa4:	1000d2d5 	.word	0x1000d2d5
1000daa8:	1000f13b 	.word	0x1000f13b
1000daac:	0000201e 	.word	0x0000201e
1000dab0:	0000201d 	.word	0x0000201d
1000dab4:	00000c03 	.word	0x00000c03
1000dab8:	0000201f 	.word	0x0000201f
1000dabc:	00000d1c 	.word	0x00000d1c
1000dac0:	00000c0c 	.word	0x00000c0c
1000dac4:	00000c02 	.word	0x00000c02
1000dac8:	00000a02 	.word	0x00000a02
1000dacc:	00000a03 	.word	0x00000a03
1000dad0:	00000c06 	.word	0x00000c06
1000dad4:	00000c04 	.word	0x00000c04
1000dad8:	00000c05 	.word	0x00000c05
1000dadc:	00000c07 	.word	0x00000c07
1000dae0:	00000c09 	.word	0x00000c09
1000dae4:	00000c17 	.word	0x00000c17
1000dae8:	00000c12 	.word	0x00000c12
1000daec:	00000c0d 	.word	0x00000c0d
1000daf0:	00000c13 	.word	0x00000c13
1000daf4:	00000c15 	.word	0x00000c15
1000daf8:	00000d08 	.word	0x00000d08
1000dafc:	00000d01 	.word	0x00000d01
1000db00:	00000d15 	.word	0x00000d15
1000db04:	00000e1b 	.word	0x00000e1b
1000db08:	00000e0f 	.word	0x00000e0f
1000db0c:	00000e03 	.word	0x00000e03
1000db10:	00000e06 	.word	0x00000e06
1000db14:	00000e0a 	.word	0x00000e0a
1000db18:	00000e15 	.word	0x00000e15
1000db1c:	00000e11 	.word	0x00000e11
1000db20:	00000e13 	.word	0x00000e13
1000db24:	00000e17 	.word	0x00000e17
1000db28:	00000e19 	.word	0x00000e19
1000db2c:	00000e27 	.word	0x00000e27
1000db30:	00000e21 	.word	0x00000e21
1000db34:	00000e1c 	.word	0x00000e1c
1000db38:	00000e1d 	.word	0x00000e1d
1000db3c:	4b9f      	ldr	r3, [pc, #636]	; (1000ddbc <at_ble_event_get+0x614>)
1000db3e:	429c      	cmp	r4, r3
1000db40:	d07e      	beq.n	1000dc40 <at_ble_event_get+0x498>
1000db42:	4b9f      	ldr	r3, [pc, #636]	; (1000ddc0 <at_ble_event_get+0x618>)
1000db44:	429c      	cmp	r4, r3
1000db46:	d100      	bne.n	1000db4a <at_ble_event_get+0x3a2>
1000db48:	e08c      	b.n	1000dc64 <at_ble_event_get+0x4bc>
1000db4a:	e015      	b.n	1000db78 <at_ble_event_get+0x3d0>
1000db4c:	4b9d      	ldr	r3, [pc, #628]	; (1000ddc4 <at_ble_event_get+0x61c>)
1000db4e:	429c      	cmp	r4, r3
1000db50:	d100      	bne.n	1000db54 <at_ble_event_get+0x3ac>
1000db52:	e10a      	b.n	1000dd6a <at_ble_event_get+0x5c2>
1000db54:	d808      	bhi.n	1000db68 <at_ble_event_get+0x3c0>
1000db56:	4b9c      	ldr	r3, [pc, #624]	; (1000ddc8 <at_ble_event_get+0x620>)
1000db58:	429c      	cmp	r4, r3
1000db5a:	d100      	bne.n	1000db5e <at_ble_event_get+0x3b6>
1000db5c:	e0f7      	b.n	1000dd4e <at_ble_event_get+0x5a6>
1000db5e:	4b9b      	ldr	r3, [pc, #620]	; (1000ddcc <at_ble_event_get+0x624>)
1000db60:	429c      	cmp	r4, r3
1000db62:	d100      	bne.n	1000db66 <at_ble_event_get+0x3be>
1000db64:	e0fa      	b.n	1000dd5c <at_ble_event_get+0x5b4>
1000db66:	e007      	b.n	1000db78 <at_ble_event_get+0x3d0>
1000db68:	4b99      	ldr	r3, [pc, #612]	; (1000ddd0 <at_ble_event_get+0x628>)
1000db6a:	429c      	cmp	r4, r3
1000db6c:	d100      	bne.n	1000db70 <at_ble_event_get+0x3c8>
1000db6e:	e103      	b.n	1000dd78 <at_ble_event_get+0x5d0>
1000db70:	4b98      	ldr	r3, [pc, #608]	; (1000ddd4 <at_ble_event_get+0x62c>)
1000db72:	429c      	cmp	r4, r3
1000db74:	d100      	bne.n	1000db78 <at_ble_event_get+0x3d0>
1000db76:	e106      	b.n	1000dd86 <at_ble_event_get+0x5de>
1000db78:	2600      	movs	r6, #0
1000db7a:	e10a      	b.n	1000dd92 <at_ble_event_get+0x5ea>
1000db7c:	1c30      	adds	r0, r6, #0
1000db7e:	1c29      	adds	r1, r5, #0
1000db80:	4b95      	ldr	r3, [pc, #596]	; (1000ddd8 <at_ble_event_get+0x630>)
1000db82:	e014      	b.n	1000dbae <at_ble_event_get+0x406>
1000db84:	1c30      	adds	r0, r6, #0
1000db86:	1c29      	adds	r1, r5, #0
1000db88:	4b94      	ldr	r3, [pc, #592]	; (1000dddc <at_ble_event_get+0x634>)
1000db8a:	4798      	blx	r3
1000db8c:	2604      	movs	r6, #4
1000db8e:	e100      	b.n	1000dd92 <at_ble_event_get+0x5ea>
1000db90:	1c30      	adds	r0, r6, #0
1000db92:	1c29      	adds	r1, r5, #0
1000db94:	4b92      	ldr	r3, [pc, #584]	; (1000dde0 <at_ble_event_get+0x638>)
1000db96:	4798      	blx	r3
1000db98:	2601      	movs	r6, #1
1000db9a:	e0fa      	b.n	1000dd92 <at_ble_event_get+0x5ea>
1000db9c:	1c30      	adds	r0, r6, #0
1000db9e:	1c29      	adds	r1, r5, #0
1000dba0:	4b90      	ldr	r3, [pc, #576]	; (1000dde4 <at_ble_event_get+0x63c>)
1000dba2:	4798      	blx	r3
1000dba4:	260f      	movs	r6, #15
1000dba6:	e0f4      	b.n	1000dd92 <at_ble_event_get+0x5ea>
1000dba8:	1c30      	adds	r0, r6, #0
1000dbaa:	1c29      	adds	r1, r5, #0
1000dbac:	4b8e      	ldr	r3, [pc, #568]	; (1000dde8 <at_ble_event_get+0x640>)
1000dbae:	4798      	blx	r3
1000dbb0:	1c06      	adds	r6, r0, #0
1000dbb2:	e0ee      	b.n	1000dd92 <at_ble_event_get+0x5ea>
1000dbb4:	9801      	ldr	r0, [sp, #4]
1000dbb6:	1c31      	adds	r1, r6, #0
1000dbb8:	1c2a      	adds	r2, r5, #0
1000dbba:	4b8c      	ldr	r3, [pc, #560]	; (1000ddec <at_ble_event_get+0x644>)
1000dbbc:	e017      	b.n	1000dbee <at_ble_event_get+0x446>
1000dbbe:	1c31      	adds	r1, r6, #0
1000dbc0:	9801      	ldr	r0, [sp, #4]
1000dbc2:	1c2a      	adds	r2, r5, #0
1000dbc4:	4b8a      	ldr	r3, [pc, #552]	; (1000ddf0 <at_ble_event_get+0x648>)
1000dbc6:	4798      	blx	r3
1000dbc8:	2611      	movs	r6, #17
1000dbca:	e0e2      	b.n	1000dd92 <at_ble_event_get+0x5ea>
1000dbcc:	1c31      	adds	r1, r6, #0
1000dbce:	9801      	ldr	r0, [sp, #4]
1000dbd0:	1c2a      	adds	r2, r5, #0
1000dbd2:	4b88      	ldr	r3, [pc, #544]	; (1000ddf4 <at_ble_event_get+0x64c>)
1000dbd4:	4798      	blx	r3
1000dbd6:	2612      	movs	r6, #18
1000dbd8:	e0db      	b.n	1000dd92 <at_ble_event_get+0x5ea>
1000dbda:	1c30      	adds	r0, r6, #0
1000dbdc:	1c29      	adds	r1, r5, #0
1000dbde:	4b86      	ldr	r3, [pc, #536]	; (1000ddf8 <at_ble_event_get+0x650>)
1000dbe0:	4798      	blx	r3
1000dbe2:	2606      	movs	r6, #6
1000dbe4:	e0d5      	b.n	1000dd92 <at_ble_event_get+0x5ea>
1000dbe6:	1c31      	adds	r1, r6, #0
1000dbe8:	1c2a      	adds	r2, r5, #0
1000dbea:	9801      	ldr	r0, [sp, #4]
1000dbec:	4b83      	ldr	r3, [pc, #524]	; (1000ddfc <at_ble_event_get+0x654>)
1000dbee:	4798      	blx	r3
1000dbf0:	e7de      	b.n	1000dbb0 <at_ble_event_get+0x408>
1000dbf2:	9801      	ldr	r0, [sp, #4]
1000dbf4:	1c31      	adds	r1, r6, #0
1000dbf6:	1c2a      	adds	r2, r5, #0
1000dbf8:	4b81      	ldr	r3, [pc, #516]	; (1000de00 <at_ble_event_get+0x658>)
1000dbfa:	e7f8      	b.n	1000dbee <at_ble_event_get+0x446>
1000dbfc:	1c31      	adds	r1, r6, #0
1000dbfe:	9801      	ldr	r0, [sp, #4]
1000dc00:	1c2a      	adds	r2, r5, #0
1000dc02:	4b80      	ldr	r3, [pc, #512]	; (1000de04 <at_ble_event_get+0x65c>)
1000dc04:	4798      	blx	r3
1000dc06:	260d      	movs	r6, #13
1000dc08:	e0c3      	b.n	1000dd92 <at_ble_event_get+0x5ea>
1000dc0a:	1c31      	adds	r1, r6, #0
1000dc0c:	9801      	ldr	r0, [sp, #4]
1000dc0e:	1c2a      	adds	r2, r5, #0
1000dc10:	4b7d      	ldr	r3, [pc, #500]	; (1000de08 <at_ble_event_get+0x660>)
1000dc12:	4798      	blx	r3
1000dc14:	260e      	movs	r6, #14
1000dc16:	e0bc      	b.n	1000dd92 <at_ble_event_get+0x5ea>
1000dc18:	9801      	ldr	r0, [sp, #4]
1000dc1a:	1c31      	adds	r1, r6, #0
1000dc1c:	1c2a      	adds	r2, r5, #0
1000dc1e:	4b7b      	ldr	r3, [pc, #492]	; (1000de0c <at_ble_event_get+0x664>)
1000dc20:	4798      	blx	r3
1000dc22:	e084      	b.n	1000dd2e <at_ble_event_get+0x586>
1000dc24:	1c31      	adds	r1, r6, #0
1000dc26:	9801      	ldr	r0, [sp, #4]
1000dc28:	1c2a      	adds	r2, r5, #0
1000dc2a:	4b79      	ldr	r3, [pc, #484]	; (1000de10 <at_ble_event_get+0x668>)
1000dc2c:	4798      	blx	r3
1000dc2e:	260b      	movs	r6, #11
1000dc30:	e0af      	b.n	1000dd92 <at_ble_event_get+0x5ea>
1000dc32:	1c31      	adds	r1, r6, #0
1000dc34:	9801      	ldr	r0, [sp, #4]
1000dc36:	1c2a      	adds	r2, r5, #0
1000dc38:	4b76      	ldr	r3, [pc, #472]	; (1000de14 <at_ble_event_get+0x66c>)
1000dc3a:	4798      	blx	r3
1000dc3c:	2610      	movs	r6, #16
1000dc3e:	e0a8      	b.n	1000dd92 <at_ble_event_get+0x5ea>
1000dc40:	1c30      	adds	r0, r6, #0
1000dc42:	1c29      	adds	r1, r5, #0
1000dc44:	4b74      	ldr	r3, [pc, #464]	; (1000de18 <at_ble_event_get+0x670>)
1000dc46:	4798      	blx	r3
1000dc48:	2628      	movs	r6, #40	; 0x28
1000dc4a:	e0a2      	b.n	1000dd92 <at_ble_event_get+0x5ea>
1000dc4c:	1c30      	adds	r0, r6, #0
1000dc4e:	1c29      	adds	r1, r5, #0
1000dc50:	4b72      	ldr	r3, [pc, #456]	; (1000de1c <at_ble_event_get+0x674>)
1000dc52:	4798      	blx	r3
1000dc54:	2629      	movs	r6, #41	; 0x29
1000dc56:	e09c      	b.n	1000dd92 <at_ble_event_get+0x5ea>
1000dc58:	1c30      	adds	r0, r6, #0
1000dc5a:	1c29      	adds	r1, r5, #0
1000dc5c:	4b70      	ldr	r3, [pc, #448]	; (1000de20 <at_ble_event_get+0x678>)
1000dc5e:	4798      	blx	r3
1000dc60:	2627      	movs	r6, #39	; 0x27
1000dc62:	e096      	b.n	1000dd92 <at_ble_event_get+0x5ea>
1000dc64:	1c30      	adds	r0, r6, #0
1000dc66:	1c29      	adds	r1, r5, #0
1000dc68:	4b6e      	ldr	r3, [pc, #440]	; (1000de24 <at_ble_event_get+0x67c>)
1000dc6a:	4798      	blx	r3
1000dc6c:	262a      	movs	r6, #42	; 0x2a
1000dc6e:	e090      	b.n	1000dd92 <at_ble_event_get+0x5ea>
1000dc70:	9801      	ldr	r0, [sp, #4]
1000dc72:	1c31      	adds	r1, r6, #0
1000dc74:	1c2a      	adds	r2, r5, #0
1000dc76:	4b6c      	ldr	r3, [pc, #432]	; (1000de28 <at_ble_event_get+0x680>)
1000dc78:	e7b9      	b.n	1000dbee <at_ble_event_get+0x446>
1000dc7a:	9801      	ldr	r0, [sp, #4]
1000dc7c:	1c31      	adds	r1, r6, #0
1000dc7e:	1c2a      	adds	r2, r5, #0
1000dc80:	4b6a      	ldr	r3, [pc, #424]	; (1000de2c <at_ble_event_get+0x684>)
1000dc82:	e7b4      	b.n	1000dbee <at_ble_event_get+0x446>
1000dc84:	1c30      	adds	r0, r6, #0
1000dc86:	1c29      	adds	r1, r5, #0
1000dc88:	4b69      	ldr	r3, [pc, #420]	; (1000de30 <at_ble_event_get+0x688>)
1000dc8a:	4798      	blx	r3
1000dc8c:	262b      	movs	r6, #43	; 0x2b
1000dc8e:	e080      	b.n	1000dd92 <at_ble_event_get+0x5ea>
1000dc90:	1c30      	adds	r0, r6, #0
1000dc92:	1c29      	adds	r1, r5, #0
1000dc94:	4b67      	ldr	r3, [pc, #412]	; (1000de34 <at_ble_event_get+0x68c>)
1000dc96:	4798      	blx	r3
1000dc98:	262c      	movs	r6, #44	; 0x2c
1000dc9a:	e07a      	b.n	1000dd92 <at_ble_event_get+0x5ea>
1000dc9c:	1c31      	adds	r1, r6, #0
1000dc9e:	9801      	ldr	r0, [sp, #4]
1000dca0:	1c2a      	adds	r2, r5, #0
1000dca2:	4b65      	ldr	r3, [pc, #404]	; (1000de38 <at_ble_event_get+0x690>)
1000dca4:	4798      	blx	r3
1000dca6:	2613      	movs	r6, #19
1000dca8:	e073      	b.n	1000dd92 <at_ble_event_get+0x5ea>
1000dcaa:	1c31      	adds	r1, r6, #0
1000dcac:	9801      	ldr	r0, [sp, #4]
1000dcae:	1c2a      	adds	r2, r5, #0
1000dcb0:	4b62      	ldr	r3, [pc, #392]	; (1000de3c <at_ble_event_get+0x694>)
1000dcb2:	4798      	blx	r3
1000dcb4:	2614      	movs	r6, #20
1000dcb6:	e06c      	b.n	1000dd92 <at_ble_event_get+0x5ea>
1000dcb8:	1c31      	adds	r1, r6, #0
1000dcba:	9801      	ldr	r0, [sp, #4]
1000dcbc:	1c2a      	adds	r2, r5, #0
1000dcbe:	4b60      	ldr	r3, [pc, #384]	; (1000de40 <at_ble_event_get+0x698>)
1000dcc0:	4798      	blx	r3
1000dcc2:	2615      	movs	r6, #21
1000dcc4:	e065      	b.n	1000dd92 <at_ble_event_get+0x5ea>
1000dcc6:	1c31      	adds	r1, r6, #0
1000dcc8:	9801      	ldr	r0, [sp, #4]
1000dcca:	1c2a      	adds	r2, r5, #0
1000dccc:	4b5d      	ldr	r3, [pc, #372]	; (1000de44 <at_ble_event_get+0x69c>)
1000dcce:	4798      	blx	r3
1000dcd0:	2616      	movs	r6, #22
1000dcd2:	e05e      	b.n	1000dd92 <at_ble_event_get+0x5ea>
1000dcd4:	9801      	ldr	r0, [sp, #4]
1000dcd6:	1c31      	adds	r1, r6, #0
1000dcd8:	1c2a      	adds	r2, r5, #0
1000dcda:	4b5b      	ldr	r3, [pc, #364]	; (1000de48 <at_ble_event_get+0x6a0>)
1000dcdc:	e787      	b.n	1000dbee <at_ble_event_get+0x446>
1000dcde:	1c31      	adds	r1, r6, #0
1000dce0:	9801      	ldr	r0, [sp, #4]
1000dce2:	1c2a      	adds	r2, r5, #0
1000dce4:	4b58      	ldr	r3, [pc, #352]	; (1000de48 <at_ble_event_get+0x6a0>)
1000dce6:	4798      	blx	r3
1000dce8:	88a9      	ldrh	r1, [r5, #4]
1000dcea:	1c06      	adds	r6, r0, #0
1000dcec:	4b57      	ldr	r3, [pc, #348]	; (1000de4c <at_ble_event_get+0x6a4>)
1000dcee:	8828      	ldrh	r0, [r5, #0]
1000dcf0:	4798      	blx	r3
1000dcf2:	e04e      	b.n	1000dd92 <at_ble_event_get+0x5ea>
1000dcf4:	1c31      	adds	r1, r6, #0
1000dcf6:	9801      	ldr	r0, [sp, #4]
1000dcf8:	1c2a      	adds	r2, r5, #0
1000dcfa:	4b55      	ldr	r3, [pc, #340]	; (1000de50 <at_ble_event_get+0x6a8>)
1000dcfc:	4798      	blx	r3
1000dcfe:	2623      	movs	r6, #35	; 0x23
1000dd00:	e047      	b.n	1000dd92 <at_ble_event_get+0x5ea>
1000dd02:	9801      	ldr	r0, [sp, #4]
1000dd04:	1c31      	adds	r1, r6, #0
1000dd06:	1c2a      	adds	r2, r5, #0
1000dd08:	4b52      	ldr	r3, [pc, #328]	; (1000de54 <at_ble_event_get+0x6ac>)
1000dd0a:	e770      	b.n	1000dbee <at_ble_event_get+0x446>
1000dd0c:	9b01      	ldr	r3, [sp, #4]
1000dd0e:	1c30      	adds	r0, r6, #0
1000dd10:	0a1f      	lsrs	r7, r3, #8
1000dd12:	802f      	strh	r7, [r5, #0]
1000dd14:	1c29      	adds	r1, r5, #0
1000dd16:	4b50      	ldr	r3, [pc, #320]	; (1000de58 <at_ble_event_get+0x6b0>)
1000dd18:	e749      	b.n	1000dbae <at_ble_event_get+0x406>
1000dd1a:	9801      	ldr	r0, [sp, #4]
1000dd1c:	1c31      	adds	r1, r6, #0
1000dd1e:	1c2a      	adds	r2, r5, #0
1000dd20:	4b4e      	ldr	r3, [pc, #312]	; (1000de5c <at_ble_event_get+0x6b4>)
1000dd22:	e764      	b.n	1000dbee <at_ble_event_get+0x446>
1000dd24:	1c30      	adds	r0, r6, #0
1000dd26:	1c29      	adds	r1, r5, #0
1000dd28:	9a01      	ldr	r2, [sp, #4]
1000dd2a:	4b4d      	ldr	r3, [pc, #308]	; (1000de60 <at_ble_event_get+0x6b8>)
1000dd2c:	4798      	blx	r3
1000dd2e:	263b      	movs	r6, #59	; 0x3b
1000dd30:	e02f      	b.n	1000dd92 <at_ble_event_get+0x5ea>
1000dd32:	1c31      	adds	r1, r6, #0
1000dd34:	9801      	ldr	r0, [sp, #4]
1000dd36:	1c2a      	adds	r2, r5, #0
1000dd38:	4b4a      	ldr	r3, [pc, #296]	; (1000de64 <at_ble_event_get+0x6bc>)
1000dd3a:	4798      	blx	r3
1000dd3c:	2618      	movs	r6, #24
1000dd3e:	e028      	b.n	1000dd92 <at_ble_event_get+0x5ea>
1000dd40:	1c31      	adds	r1, r6, #0
1000dd42:	9801      	ldr	r0, [sp, #4]
1000dd44:	1c2a      	adds	r2, r5, #0
1000dd46:	4b48      	ldr	r3, [pc, #288]	; (1000de68 <at_ble_event_get+0x6c0>)
1000dd48:	4798      	blx	r3
1000dd4a:	2620      	movs	r6, #32
1000dd4c:	e021      	b.n	1000dd92 <at_ble_event_get+0x5ea>
1000dd4e:	1c31      	adds	r1, r6, #0
1000dd50:	9801      	ldr	r0, [sp, #4]
1000dd52:	1c2a      	adds	r2, r5, #0
1000dd54:	4b45      	ldr	r3, [pc, #276]	; (1000de6c <at_ble_event_get+0x6c4>)
1000dd56:	4798      	blx	r3
1000dd58:	2633      	movs	r6, #51	; 0x33
1000dd5a:	e01a      	b.n	1000dd92 <at_ble_event_get+0x5ea>
1000dd5c:	1c31      	adds	r1, r6, #0
1000dd5e:	9801      	ldr	r0, [sp, #4]
1000dd60:	1c2a      	adds	r2, r5, #0
1000dd62:	4b43      	ldr	r3, [pc, #268]	; (1000de70 <at_ble_event_get+0x6c8>)
1000dd64:	4798      	blx	r3
1000dd66:	2630      	movs	r6, #48	; 0x30
1000dd68:	e013      	b.n	1000dd92 <at_ble_event_get+0x5ea>
1000dd6a:	1c31      	adds	r1, r6, #0
1000dd6c:	9801      	ldr	r0, [sp, #4]
1000dd6e:	1c2a      	adds	r2, r5, #0
1000dd70:	4b40      	ldr	r3, [pc, #256]	; (1000de74 <at_ble_event_get+0x6cc>)
1000dd72:	4798      	blx	r3
1000dd74:	2634      	movs	r6, #52	; 0x34
1000dd76:	e00c      	b.n	1000dd92 <at_ble_event_get+0x5ea>
1000dd78:	1c31      	adds	r1, r6, #0
1000dd7a:	9801      	ldr	r0, [sp, #4]
1000dd7c:	1c2a      	adds	r2, r5, #0
1000dd7e:	4b3e      	ldr	r3, [pc, #248]	; (1000de78 <at_ble_event_get+0x6d0>)
1000dd80:	4798      	blx	r3
1000dd82:	2635      	movs	r6, #53	; 0x35
1000dd84:	e005      	b.n	1000dd92 <at_ble_event_get+0x5ea>
1000dd86:	1c31      	adds	r1, r6, #0
1000dd88:	9801      	ldr	r0, [sp, #4]
1000dd8a:	1c2a      	adds	r2, r5, #0
1000dd8c:	4b3b      	ldr	r3, [pc, #236]	; (1000de7c <at_ble_event_get+0x6d4>)
1000dd8e:	4798      	blx	r3
1000dd90:	2632      	movs	r6, #50	; 0x32
1000dd92:	9b03      	ldr	r3, [sp, #12]
1000dd94:	701e      	strb	r6, [r3, #0]
1000dd96:	2300      	movs	r3, #0
1000dd98:	9302      	str	r3, [sp, #8]
1000dd9a:	e57a      	b.n	1000d892 <at_ble_event_get+0xea>
1000dd9c:	23d0      	movs	r3, #208	; 0xd0
1000dd9e:	e7fb      	b.n	1000dd98 <at_ble_event_get+0x5f0>
1000dda0:	9b01      	ldr	r3, [sp, #4]
1000dda2:	9e02      	ldr	r6, [sp, #8]
1000dda4:	2bbb      	cmp	r3, #187	; 0xbb
1000dda6:	d000      	beq.n	1000ddaa <at_ble_event_get+0x602>
1000dda8:	e6e6      	b.n	1000db78 <at_ble_event_get+0x3d0>
1000ddaa:	e7f2      	b.n	1000dd92 <at_ble_event_get+0x5ea>
1000ddac:	9b02      	ldr	r3, [sp, #8]
1000ddae:	2b00      	cmp	r3, #0
1000ddb0:	d000      	beq.n	1000ddb4 <at_ble_event_get+0x60c>
1000ddb2:	e56e      	b.n	1000d892 <at_ble_event_get+0xea>
1000ddb4:	e6e0      	b.n	1000db78 <at_ble_event_get+0x3d0>
1000ddb6:	9802      	ldr	r0, [sp, #8]
1000ddb8:	b007      	add	sp, #28
1000ddba:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000ddbc:	00000e22 	.word	0x00000e22
1000ddc0:	00000e25 	.word	0x00000e25
1000ddc4:	00001b05 	.word	0x00001b05
1000ddc8:	00001b01 	.word	0x00001b01
1000ddcc:	00001b03 	.word	0x00001b03
1000ddd0:	00001b06 	.word	0x00001b06
1000ddd4:	00001b08 	.word	0x00001b08
1000ddd8:	1000ff65 	.word	0x1000ff65
1000dddc:	1000ff49 	.word	0x1000ff49
1000dde0:	100101e5 	.word	0x100101e5
1000dde4:	100102d5 	.word	0x100102d5
1000dde8:	100102f9 	.word	0x100102f9
1000ddec:	1000f2dd 	.word	0x1000f2dd
1000ddf0:	1000fb5d 	.word	0x1000fb5d
1000ddf4:	1000fbd9 	.word	0x1000fbd9
1000ddf8:	1000f595 	.word	0x1000f595
1000ddfc:	1000f631 	.word	0x1000f631
1000de00:	1000f709 	.word	0x1000f709
1000de04:	1000f991 	.word	0x1000f991
1000de08:	1000fa31 	.word	0x1000fa31
1000de0c:	1000fae9 	.word	0x1000fae9
1000de10:	1000fb11 	.word	0x1000fb11
1000de14:	1000fb27 	.word	0x1000fb27
1000de18:	1000fbf1 	.word	0x1000fbf1
1000de1c:	1000fc1f 	.word	0x1000fc1f
1000de20:	1000fc35 	.word	0x1000fc35
1000de24:	1000fc5f 	.word	0x1000fc5f
1000de28:	1000fa8d 	.word	0x1000fa8d
1000de2c:	1000fab7 	.word	0x1000fab7
1000de30:	1000ed1d 	.word	0x1000ed1d
1000de34:	1000ed49 	.word	0x1000ed49
1000de38:	100104a1 	.word	0x100104a1
1000de3c:	100104dd 	.word	0x100104dd
1000de40:	10010525 	.word	0x10010525
1000de44:	10010569 	.word	0x10010569
1000de48:	1001059d 	.word	0x1001059d
1000de4c:	10010461 	.word	0x10010461
1000de50:	10010669 	.word	0x10010669
1000de54:	100105f1 	.word	0x100105f1
1000de58:	1000ec75 	.word	0x1000ec75
1000de5c:	1000ece1 	.word	0x1000ece1
1000de60:	1000eca5 	.word	0x1000eca5
1000de64:	10010679 	.word	0x10010679
1000de68:	100106b9 	.word	0x100106b9
1000de6c:	10010981 	.word	0x10010981
1000de70:	1001098b 	.word	0x1001098b
1000de74:	10010991 	.word	0x10010991
1000de78:	10010997 	.word	0x10010997
1000de7c:	100109a3 	.word	0x100109a3

1000de80 <internal_event_flush>:
1000de80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000de82:	490e      	ldr	r1, [pc, #56]	; (1000debc <internal_event_flush+0x3c>)
1000de84:	2400      	movs	r4, #0
1000de86:	680b      	ldr	r3, [r1, #0]
1000de88:	1c0f      	adds	r7, r1, #0
1000de8a:	1c1e      	adds	r6, r3, #0
1000de8c:	4a0c      	ldr	r2, [pc, #48]	; (1000dec0 <internal_event_flush+0x40>)
1000de8e:	6815      	ldr	r5, [r2, #0]
1000de90:	9201      	str	r2, [sp, #4]
1000de92:	2b00      	cmp	r3, #0
1000de94:	d00e      	beq.n	1000deb4 <internal_event_flush+0x34>
1000de96:	889a      	ldrh	r2, [r3, #4]
1000de98:	6819      	ldr	r1, [r3, #0]
1000de9a:	4282      	cmp	r2, r0
1000de9c:	d107      	bne.n	1000deae <internal_event_flush+0x2e>
1000de9e:	2c00      	cmp	r4, #0
1000dea0:	d001      	beq.n	1000dea6 <internal_event_flush+0x26>
1000dea2:	6021      	str	r1, [r4, #0]
1000dea4:	e000      	b.n	1000dea8 <internal_event_flush+0x28>
1000dea6:	1c0e      	adds	r6, r1, #0
1000dea8:	601d      	str	r5, [r3, #0]
1000deaa:	1c1d      	adds	r5, r3, #0
1000deac:	1c23      	adds	r3, r4, #0
1000deae:	1c1c      	adds	r4, r3, #0
1000deb0:	1c0b      	adds	r3, r1, #0
1000deb2:	e7ee      	b.n	1000de92 <internal_event_flush+0x12>
1000deb4:	9b01      	ldr	r3, [sp, #4]
1000deb6:	603e      	str	r6, [r7, #0]
1000deb8:	601d      	str	r5, [r3, #0]
1000deba:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000debc:	10019920 	.word	0x10019920
1000dec0:	10019924 	.word	0x10019924

1000dec4 <internal_conn_flush>:
1000dec4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000dec6:	4a12      	ldr	r2, [pc, #72]	; (1000df10 <internal_conn_flush+0x4c>)
1000dec8:	9000      	str	r0, [sp, #0]
1000deca:	6813      	ldr	r3, [r2, #0]
1000decc:	4811      	ldr	r0, [pc, #68]	; (1000df14 <internal_conn_flush+0x50>)
1000dece:	1c1f      	adds	r7, r3, #0
1000ded0:	2100      	movs	r1, #0
1000ded2:	4684      	mov	ip, r0
1000ded4:	6804      	ldr	r4, [r0, #0]
1000ded6:	9201      	str	r2, [sp, #4]
1000ded8:	2b00      	cmp	r3, #0
1000deda:	d014      	beq.n	1000df06 <internal_conn_flush+0x42>
1000dedc:	88d8      	ldrh	r0, [r3, #6]
1000dede:	9a00      	ldr	r2, [sp, #0]
1000dee0:	681d      	ldr	r5, [r3, #0]
1000dee2:	0a06      	lsrs	r6, r0, #8
1000dee4:	4296      	cmp	r6, r2
1000dee6:	d10b      	bne.n	1000df00 <internal_conn_flush+0x3c>
1000dee8:	26fd      	movs	r6, #253	; 0xfd
1000deea:	4006      	ands	r6, r0
1000deec:	2e0c      	cmp	r6, #12
1000deee:	d107      	bne.n	1000df00 <internal_conn_flush+0x3c>
1000def0:	2900      	cmp	r1, #0
1000def2:	d001      	beq.n	1000def8 <internal_conn_flush+0x34>
1000def4:	600d      	str	r5, [r1, #0]
1000def6:	e000      	b.n	1000defa <internal_conn_flush+0x36>
1000def8:	1c2f      	adds	r7, r5, #0
1000defa:	601c      	str	r4, [r3, #0]
1000defc:	1c1c      	adds	r4, r3, #0
1000defe:	1c0b      	adds	r3, r1, #0
1000df00:	1c19      	adds	r1, r3, #0
1000df02:	1c2b      	adds	r3, r5, #0
1000df04:	e7e8      	b.n	1000ded8 <internal_conn_flush+0x14>
1000df06:	9b01      	ldr	r3, [sp, #4]
1000df08:	601f      	str	r7, [r3, #0]
1000df0a:	4663      	mov	r3, ip
1000df0c:	601c      	str	r4, [r3, #0]
1000df0e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000df10:	10019920 	.word	0x10019920
1000df14:	10019924 	.word	0x10019924

1000df18 <at_ble_device_name_set>:
1000df18:	b530      	push	{r4, r5, lr}
1000df1a:	23cf      	movs	r3, #207	; 0xcf
1000df1c:	2800      	cmp	r0, #0
1000df1e:	d010      	beq.n	1000df42 <at_ble_device_name_set+0x2a>
1000df20:	1e4a      	subs	r2, r1, #1
1000df22:	2a1f      	cmp	r2, #31
1000df24:	d80d      	bhi.n	1000df42 <at_ble_device_name_set+0x2a>
1000df26:	4a08      	ldr	r2, [pc, #32]	; (1000df48 <at_ble_device_name_set+0x30>)
1000df28:	1c13      	adds	r3, r2, #0
1000df2a:	33aa      	adds	r3, #170	; 0xaa
1000df2c:	8019      	strh	r1, [r3, #0]
1000df2e:	2300      	movs	r3, #0
1000df30:	1c1c      	adds	r4, r3, #0
1000df32:	5cc5      	ldrb	r5, [r0, r3]
1000df34:	34ac      	adds	r4, #172	; 0xac
1000df36:	3301      	adds	r3, #1
1000df38:	5515      	strb	r5, [r2, r4]
1000df3a:	b2dc      	uxtb	r4, r3
1000df3c:	428c      	cmp	r4, r1
1000df3e:	d3f7      	bcc.n	1000df30 <at_ble_device_name_set+0x18>
1000df40:	2300      	movs	r3, #0
1000df42:	1c18      	adds	r0, r3, #0
1000df44:	bd30      	pop	{r4, r5, pc}
1000df46:	46c0      	nop			; (mov r8, r8)
1000df48:	1001a95a 	.word	0x1001a95a

1000df4c <at_ble_addr_get>:
1000df4c:	b510      	push	{r4, lr}
1000df4e:	1c04      	adds	r4, r0, #0
1000df50:	20cf      	movs	r0, #207	; 0xcf
1000df52:	2c00      	cmp	r4, #0
1000df54:	d006      	beq.n	1000df64 <at_ble_addr_get+0x18>
1000df56:	4b04      	ldr	r3, [pc, #16]	; (1000df68 <at_ble_addr_get+0x1c>)
1000df58:	38ce      	subs	r0, #206	; 0xce
1000df5a:	1c21      	adds	r1, r4, #0
1000df5c:	4798      	blx	r3
1000df5e:	4b03      	ldr	r3, [pc, #12]	; (1000df6c <at_ble_addr_get+0x20>)
1000df60:	791b      	ldrb	r3, [r3, #4]
1000df62:	7023      	strb	r3, [r4, #0]
1000df64:	bd10      	pop	{r4, pc}
1000df66:	46c0      	nop			; (mov r8, r8)
1000df68:	1000fdf9 	.word	0x1000fdf9
1000df6c:	1001a95a 	.word	0x1001a95a

1000df70 <at_ble_set_dev_config>:
1000df70:	b5f0      	push	{r4, r5, r6, r7, lr}
1000df72:	7906      	ldrb	r6, [r0, #4]
1000df74:	b089      	sub	sp, #36	; 0x24
1000df76:	25cf      	movs	r5, #207	; 0xcf
1000df78:	2e03      	cmp	r6, #3
1000df7a:	d838      	bhi.n	1000dfee <at_ble_set_dev_config+0x7e>
1000df7c:	7803      	ldrb	r3, [r0, #0]
1000df7e:	3511      	adds	r5, #17
1000df80:	2b0f      	cmp	r3, #15
1000df82:	d834      	bhi.n	1000dfee <at_ble_set_dev_config+0x7e>
1000df84:	2380      	movs	r3, #128	; 0x80
1000df86:	8c87      	ldrh	r7, [r0, #36]	; 0x24
1000df88:	3d11      	subs	r5, #17
1000df8a:	009b      	lsls	r3, r3, #2
1000df8c:	429f      	cmp	r7, r3
1000df8e:	d82e      	bhi.n	1000dfee <at_ble_set_dev_config+0x7e>
1000df90:	7fc5      	ldrb	r5, [r0, #31]
1000df92:	7f83      	ldrb	r3, [r0, #30]
1000df94:	01ad      	lsls	r5, r5, #6
1000df96:	015b      	lsls	r3, r3, #5
1000df98:	431d      	orrs	r5, r3
1000df9a:	7ec3      	ldrb	r3, [r0, #27]
1000df9c:	431d      	orrs	r5, r3
1000df9e:	7f43      	ldrb	r3, [r0, #29]
1000dfa0:	011b      	lsls	r3, r3, #4
1000dfa2:	431d      	orrs	r5, r3
1000dfa4:	7f03      	ldrb	r3, [r0, #28]
1000dfa6:	009b      	lsls	r3, r3, #2
1000dfa8:	431d      	orrs	r5, r3
1000dfaa:	4b12      	ldr	r3, [pc, #72]	; (1000dff4 <at_ble_set_dev_config+0x84>)
1000dfac:	b2ed      	uxtb	r5, r5
1000dfae:	711e      	strb	r6, [r3, #4]
1000dfb0:	7903      	ldrb	r3, [r0, #4]
1000dfb2:	3b02      	subs	r3, #2
1000dfb4:	2b01      	cmp	r3, #1
1000dfb6:	d801      	bhi.n	1000dfbc <at_ble_set_dev_config+0x4c>
1000dfb8:	2302      	movs	r3, #2
1000dfba:	7103      	strb	r3, [r0, #4]
1000dfbc:	1c04      	adds	r4, r0, #0
1000dfbe:	1c23      	adds	r3, r4, #0
1000dfc0:	330b      	adds	r3, #11
1000dfc2:	8861      	ldrh	r1, [r4, #2]
1000dfc4:	9307      	str	r3, [sp, #28]
1000dfc6:	7923      	ldrb	r3, [r4, #4]
1000dfc8:	7800      	ldrb	r0, [r0, #0]
1000dfca:	9300      	str	r3, [sp, #0]
1000dfcc:	9501      	str	r5, [sp, #4]
1000dfce:	8c25      	ldrh	r5, [r4, #32]
1000dfd0:	1d62      	adds	r2, r4, #5
1000dfd2:	9502      	str	r5, [sp, #8]
1000dfd4:	8c65      	ldrh	r5, [r4, #34]	; 0x22
1000dfd6:	9b07      	ldr	r3, [sp, #28]
1000dfd8:	9503      	str	r5, [sp, #12]
1000dfda:	9704      	str	r7, [sp, #16]
1000dfdc:	4d06      	ldr	r5, [pc, #24]	; (1000dff8 <at_ble_set_dev_config+0x88>)
1000dfde:	47a8      	blx	r5
1000dfe0:	7126      	strb	r6, [r4, #4]
1000dfe2:	1c05      	adds	r5, r0, #0
1000dfe4:	1c21      	adds	r1, r4, #0
1000dfe6:	4803      	ldr	r0, [pc, #12]	; (1000dff4 <at_ble_set_dev_config+0x84>)
1000dfe8:	2226      	movs	r2, #38	; 0x26
1000dfea:	4b04      	ldr	r3, [pc, #16]	; (1000dffc <at_ble_set_dev_config+0x8c>)
1000dfec:	4798      	blx	r3
1000dfee:	1c28      	adds	r0, r5, #0
1000dff0:	b009      	add	sp, #36	; 0x24
1000dff2:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000dff4:	1001a95a 	.word	0x1001a95a
1000dff8:	1000fcf1 	.word	0x1000fcf1
1000dffc:	10011c57 	.word	0x10011c57

1000e000 <at_ble_init>:
1000e000:	b5f0      	push	{r4, r5, r6, r7, lr}
1000e002:	b087      	sub	sp, #28
1000e004:	af03      	add	r7, sp, #12
1000e006:	4954      	ldr	r1, [pc, #336]	; (1000e158 <at_ble_init+0x158>)
1000e008:	220b      	movs	r2, #11
1000e00a:	4b54      	ldr	r3, [pc, #336]	; (1000e15c <at_ble_init+0x15c>)
1000e00c:	1c04      	adds	r4, r0, #0
1000e00e:	1c38      	adds	r0, r7, #0
1000e010:	4798      	blx	r3
1000e012:	2205      	movs	r2, #5
1000e014:	4b52      	ldr	r3, [pc, #328]	; (1000e160 <at_ble_init+0x160>)
1000e016:	2640      	movs	r6, #64	; 0x40
1000e018:	801a      	strh	r2, [r3, #0]
1000e01a:	2300      	movs	r3, #0
1000e01c:	4a51      	ldr	r2, [pc, #324]	; (1000e164 <at_ble_init+0x164>)
1000e01e:	6013      	str	r3, [r2, #0]
1000e020:	4a51      	ldr	r2, [pc, #324]	; (1000e168 <at_ble_init+0x168>)
1000e022:	7013      	strb	r3, [r2, #0]
1000e024:	4a51      	ldr	r2, [pc, #324]	; (1000e16c <at_ble_init+0x16c>)
1000e026:	7013      	strb	r3, [r2, #0]
1000e028:	4b51      	ldr	r3, [pc, #324]	; (1000e170 <at_ble_init+0x170>)
1000e02a:	4798      	blx	r3
1000e02c:	4b51      	ldr	r3, [pc, #324]	; (1000e174 <at_ble_init+0x174>)
1000e02e:	4798      	blx	r3
1000e030:	4b51      	ldr	r3, [pc, #324]	; (1000e178 <at_ble_init+0x178>)
1000e032:	4798      	blx	r3
1000e034:	4b51      	ldr	r3, [pc, #324]	; (1000e17c <at_ble_init+0x17c>)
1000e036:	4798      	blx	r3
1000e038:	2c00      	cmp	r4, #0
1000e03a:	d100      	bne.n	1000e03e <at_ble_init+0x3e>
1000e03c:	e089      	b.n	1000e152 <at_ble_init+0x152>
1000e03e:	68a3      	ldr	r3, [r4, #8]
1000e040:	2b00      	cmp	r3, #0
1000e042:	d100      	bne.n	1000e046 <at_ble_init+0x46>
1000e044:	e085      	b.n	1000e152 <at_ble_init+0x152>
1000e046:	6923      	ldr	r3, [r4, #16]
1000e048:	2b00      	cmp	r3, #0
1000e04a:	d100      	bne.n	1000e04e <at_ble_init+0x4e>
1000e04c:	e081      	b.n	1000e152 <at_ble_init+0x152>
1000e04e:	6820      	ldr	r0, [r4, #0]
1000e050:	2800      	cmp	r0, #0
1000e052:	d102      	bne.n	1000e05a <at_ble_init+0x5a>
1000e054:	6863      	ldr	r3, [r4, #4]
1000e056:	2b00      	cmp	r3, #0
1000e058:	d17b      	bne.n	1000e152 <at_ble_init+0x152>
1000e05a:	4b49      	ldr	r3, [pc, #292]	; (1000e180 <at_ble_init+0x180>)
1000e05c:	6861      	ldr	r1, [r4, #4]
1000e05e:	4798      	blx	r3
1000e060:	4b48      	ldr	r3, [pc, #288]	; (1000e184 <at_ble_init+0x184>)
1000e062:	4798      	blx	r3
1000e064:	2801      	cmp	r0, #1
1000e066:	d901      	bls.n	1000e06c <at_ble_init+0x6c>
1000e068:	26e2      	movs	r6, #226	; 0xe2
1000e06a:	e072      	b.n	1000e152 <at_ble_init+0x152>
1000e06c:	4846      	ldr	r0, [pc, #280]	; (1000e188 <at_ble_init+0x188>)
1000e06e:	4b47      	ldr	r3, [pc, #284]	; (1000e18c <at_ble_init+0x18c>)
1000e070:	4798      	blx	r3
1000e072:	2800      	cmp	r0, #0
1000e074:	d1f8      	bne.n	1000e068 <at_ble_init+0x68>
1000e076:	1c20      	adds	r0, r4, #0
1000e078:	4b45      	ldr	r3, [pc, #276]	; (1000e190 <at_ble_init+0x190>)
1000e07a:	4798      	blx	r3
1000e07c:	68e0      	ldr	r0, [r4, #12]
1000e07e:	68a1      	ldr	r1, [r4, #8]
1000e080:	4b44      	ldr	r3, [pc, #272]	; (1000e194 <at_ble_init+0x194>)
1000e082:	4798      	blx	r3
1000e084:	466b      	mov	r3, sp
1000e086:	2201      	movs	r2, #1
1000e088:	1cdc      	adds	r4, r3, #3
1000e08a:	1c20      	adds	r0, r4, #0
1000e08c:	a901      	add	r1, sp, #4
1000e08e:	4252      	negs	r2, r2
1000e090:	4b41      	ldr	r3, [pc, #260]	; (1000e198 <at_ble_init+0x198>)
1000e092:	4798      	blx	r3
1000e094:	2800      	cmp	r0, #0
1000e096:	d102      	bne.n	1000e09e <at_ble_init+0x9e>
1000e098:	7823      	ldrb	r3, [r4, #0]
1000e09a:	2b39      	cmp	r3, #57	; 0x39
1000e09c:	d1f2      	bne.n	1000e084 <at_ble_init+0x84>
1000e09e:	4b3f      	ldr	r3, [pc, #252]	; (1000e19c <at_ble_init+0x19c>)
1000e0a0:	4798      	blx	r3
1000e0a2:	1e06      	subs	r6, r0, #0
1000e0a4:	d155      	bne.n	1000e152 <at_ble_init+0x152>
1000e0a6:	1c03      	adds	r3, r0, #0
1000e0a8:	2101      	movs	r1, #1
1000e0aa:	4a3d      	ldr	r2, [pc, #244]	; (1000e1a0 <at_ble_init+0x1a0>)
1000e0ac:	4249      	negs	r1, r1
1000e0ae:	189a      	adds	r2, r3, r2
1000e0b0:	3312      	adds	r3, #18
1000e0b2:	8151      	strh	r1, [r2, #10]
1000e0b4:	2b90      	cmp	r3, #144	; 0x90
1000e0b6:	d1f7      	bne.n	1000e0a8 <at_ble_init+0xa8>
1000e0b8:	4c3a      	ldr	r4, [pc, #232]	; (1000e1a4 <at_ble_init+0x1a4>)
1000e0ba:	3b81      	subs	r3, #129	; 0x81
1000e0bc:	7023      	strb	r3, [r4, #0]
1000e0be:	4b3a      	ldr	r3, [pc, #232]	; (1000e1a8 <at_ble_init+0x1a8>)
1000e0c0:	4a3a      	ldr	r2, [pc, #232]	; (1000e1ac <at_ble_init+0x1ac>)
1000e0c2:	8063      	strh	r3, [r4, #2]
1000e0c4:	2300      	movs	r3, #0
1000e0c6:	7123      	strb	r3, [r4, #4]
1000e0c8:	3301      	adds	r3, #1
1000e0ca:	1e58      	subs	r0, r3, #1
1000e0cc:	0119      	lsls	r1, r3, #4
1000e0ce:	4301      	orrs	r1, r0
1000e0d0:	3302      	adds	r3, #2
1000e0d2:	7011      	strb	r1, [r2, #0]
1000e0d4:	3201      	adds	r2, #1
1000e0d6:	2b21      	cmp	r3, #33	; 0x21
1000e0d8:	d1f7      	bne.n	1000e0ca <at_ble_init+0xca>
1000e0da:	33e0      	adds	r3, #224	; 0xe0
1000e0dc:	33ff      	adds	r3, #255	; 0xff
1000e0de:	84a3      	strh	r3, [r4, #36]	; 0x24
1000e0e0:	1c23      	adds	r3, r4, #0
1000e0e2:	2500      	movs	r5, #0
1000e0e4:	3373      	adds	r3, #115	; 0x73
1000e0e6:	701d      	strb	r5, [r3, #0]
1000e0e8:	1c23      	adds	r3, r4, #0
1000e0ea:	3372      	adds	r3, #114	; 0x72
1000e0ec:	701d      	strb	r5, [r3, #0]
1000e0ee:	1c23      	adds	r3, r4, #0
1000e0f0:	3376      	adds	r3, #118	; 0x76
1000e0f2:	701d      	strb	r5, [r3, #0]
1000e0f4:	1c23      	adds	r3, r4, #0
1000e0f6:	33cc      	adds	r3, #204	; 0xcc
1000e0f8:	801d      	strh	r5, [r3, #0]
1000e0fa:	1c22      	adds	r2, r4, #0
1000e0fc:	23a0      	movs	r3, #160	; 0xa0
1000e0fe:	32d0      	adds	r2, #208	; 0xd0
1000e100:	005b      	lsls	r3, r3, #1
1000e102:	8013      	strh	r3, [r2, #0]
1000e104:	1c22      	adds	r2, r4, #0
1000e106:	32ce      	adds	r2, #206	; 0xce
1000e108:	8013      	strh	r3, [r2, #0]
1000e10a:	1c23      	adds	r3, r4, #0
1000e10c:	33d2      	adds	r3, #210	; 0xd2
1000e10e:	801d      	strh	r5, [r3, #0]
1000e110:	22fa      	movs	r2, #250	; 0xfa
1000e112:	1c23      	adds	r3, r4, #0
1000e114:	0052      	lsls	r2, r2, #1
1000e116:	33d4      	adds	r3, #212	; 0xd4
1000e118:	801a      	strh	r2, [r3, #0]
1000e11a:	1c23      	adds	r3, r4, #0
1000e11c:	33d6      	adds	r3, #214	; 0xd6
1000e11e:	701d      	strb	r5, [r3, #0]
1000e120:	1c20      	adds	r0, r4, #0
1000e122:	4b23      	ldr	r3, [pc, #140]	; (1000e1b0 <at_ble_init+0x1b0>)
1000e124:	76e5      	strb	r5, [r4, #27]
1000e126:	7725      	strb	r5, [r4, #28]
1000e128:	7765      	strb	r5, [r4, #29]
1000e12a:	77a5      	strb	r5, [r4, #30]
1000e12c:	77e5      	strb	r5, [r4, #31]
1000e12e:	8425      	strh	r5, [r4, #32]
1000e130:	8465      	strh	r5, [r4, #34]	; 0x22
1000e132:	4798      	blx	r3
1000e134:	1c23      	adds	r3, r4, #0
1000e136:	2207      	movs	r2, #7
1000e138:	3374      	adds	r3, #116	; 0x74
1000e13a:	701a      	strb	r2, [r3, #0]
1000e13c:	1c23      	adds	r3, r4, #0
1000e13e:	3204      	adds	r2, #4
1000e140:	33aa      	adds	r3, #170	; 0xaa
1000e142:	801a      	strh	r2, [r3, #0]
1000e144:	1c2b      	adds	r3, r5, #0
1000e146:	5d7a      	ldrb	r2, [r7, r5]
1000e148:	33ac      	adds	r3, #172	; 0xac
1000e14a:	3501      	adds	r5, #1
1000e14c:	54e2      	strb	r2, [r4, r3]
1000e14e:	2d0b      	cmp	r5, #11
1000e150:	d1f8      	bne.n	1000e144 <at_ble_init+0x144>
1000e152:	1c30      	adds	r0, r6, #0
1000e154:	b007      	add	sp, #28
1000e156:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000e158:	10017b04 	.word	0x10017b04
1000e15c:	10011c57 	.word	0x10011c57
1000e160:	1001a8c8 	.word	0x1001a8c8
1000e164:	100199d0 	.word	0x100199d0
1000e168:	10019930 	.word	0x10019930
1000e16c:	10017e70 	.word	0x10017e70
1000e170:	100106c9 	.word	0x100106c9
1000e174:	1000e471 	.word	0x1000e471
1000e178:	1000ead1 	.word	0x1000ead1
1000e17c:	1000ed11 	.word	0x1000ed11
1000e180:	1000eb0d 	.word	0x1000eb0d
1000e184:	1000cd6d 	.word	0x1000cd6d
1000e188:	1000f011 	.word	0x1000f011
1000e18c:	1000cfb1 	.word	0x1000cfb1
1000e190:	1000f0b9 	.word	0x1000f0b9
1000e194:	1000d6ed 	.word	0x1000d6ed
1000e198:	1000d7a9 	.word	0x1000d7a9
1000e19c:	1000fc81 	.word	0x1000fc81
1000e1a0:	1001a8ca 	.word	0x1001a8ca
1000e1a4:	1001a95a 	.word	0x1001a95a
1000e1a8:	00003a98 	.word	0x00003a98
1000e1ac:	1001a965 	.word	0x1001a965
1000e1b0:	1000df71 	.word	0x1000df71

1000e1b4 <at_ble_addr_set>:
1000e1b4:	b538      	push	{r3, r4, r5, lr}
1000e1b6:	1c45      	adds	r5, r0, #1
1000e1b8:	1c03      	adds	r3, r0, #0
1000e1ba:	20cf      	movs	r0, #207	; 0xcf
1000e1bc:	2d00      	cmp	r5, #0
1000e1be:	d018      	beq.n	1000e1f2 <at_ble_addr_set+0x3e>
1000e1c0:	781a      	ldrb	r2, [r3, #0]
1000e1c2:	2a03      	cmp	r2, #3
1000e1c4:	d815      	bhi.n	1000e1f2 <at_ble_addr_set+0x3e>
1000e1c6:	2a01      	cmp	r2, #1
1000e1c8:	d102      	bne.n	1000e1d0 <at_ble_addr_set+0x1c>
1000e1ca:	785a      	ldrb	r2, [r3, #1]
1000e1cc:	2a00      	cmp	r2, #0
1000e1ce:	d010      	beq.n	1000e1f2 <at_ble_addr_set+0x3e>
1000e1d0:	1c1c      	adds	r4, r3, #0
1000e1d2:	1c29      	adds	r1, r5, #0
1000e1d4:	2206      	movs	r2, #6
1000e1d6:	4b07      	ldr	r3, [pc, #28]	; (1000e1f4 <at_ble_addr_set+0x40>)
1000e1d8:	4807      	ldr	r0, [pc, #28]	; (1000e1f8 <at_ble_addr_set+0x44>)
1000e1da:	4798      	blx	r3
1000e1dc:	7823      	ldrb	r3, [r4, #0]
1000e1de:	4807      	ldr	r0, [pc, #28]	; (1000e1fc <at_ble_addr_set+0x48>)
1000e1e0:	7103      	strb	r3, [r0, #4]
1000e1e2:	4b07      	ldr	r3, [pc, #28]	; (1000e200 <at_ble_addr_set+0x4c>)
1000e1e4:	4798      	blx	r3
1000e1e6:	7823      	ldrb	r3, [r4, #0]
1000e1e8:	2b00      	cmp	r3, #0
1000e1ea:	d102      	bne.n	1000e1f2 <at_ble_addr_set+0x3e>
1000e1ec:	1c28      	adds	r0, r5, #0
1000e1ee:	4b05      	ldr	r3, [pc, #20]	; (1000e204 <at_ble_addr_set+0x50>)
1000e1f0:	4798      	blx	r3
1000e1f2:	bd38      	pop	{r3, r4, r5, pc}
1000e1f4:	10011c57 	.word	0x10011c57
1000e1f8:	1001a95f 	.word	0x1001a95f
1000e1fc:	1001a95a 	.word	0x1001a95a
1000e200:	1000df71 	.word	0x1000df71
1000e204:	1000f13d 	.word	0x1000f13d

1000e208 <at_ble_adv_data_set>:
1000e208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000e20a:	4684      	mov	ip, r0
1000e20c:	1c0f      	adds	r7, r1, #0
1000e20e:	1c16      	adds	r6, r2, #0
1000e210:	1c1c      	adds	r4, r3, #0
1000e212:	2800      	cmp	r0, #0
1000e214:	d102      	bne.n	1000e21c <at_ble_adv_data_set+0x14>
1000e216:	20e2      	movs	r0, #226	; 0xe2
1000e218:	2a00      	cmp	r2, #0
1000e21a:	d02b      	beq.n	1000e274 <at_ble_adv_data_set+0x6c>
1000e21c:	20cf      	movs	r0, #207	; 0xcf
1000e21e:	2f1f      	cmp	r7, #31
1000e220:	d828      	bhi.n	1000e274 <at_ble_adv_data_set+0x6c>
1000e222:	2c1f      	cmp	r4, #31
1000e224:	d826      	bhi.n	1000e274 <at_ble_adv_data_set+0x6c>
1000e226:	4663      	mov	r3, ip
1000e228:	2b00      	cmp	r3, #0
1000e22a:	d00e      	beq.n	1000e24a <at_ble_adv_data_set+0x42>
1000e22c:	4812      	ldr	r0, [pc, #72]	; (1000e278 <at_ble_adv_data_set+0x70>)
1000e22e:	4d13      	ldr	r5, [pc, #76]	; (1000e27c <at_ble_adv_data_set+0x74>)
1000e230:	2f00      	cmp	r7, #0
1000e232:	d104      	bne.n	1000e23e <at_ble_adv_data_set+0x36>
1000e234:	1c39      	adds	r1, r7, #0
1000e236:	221f      	movs	r2, #31
1000e238:	4b11      	ldr	r3, [pc, #68]	; (1000e280 <at_ble_adv_data_set+0x78>)
1000e23a:	4798      	blx	r3
1000e23c:	e003      	b.n	1000e246 <at_ble_adv_data_set+0x3e>
1000e23e:	4661      	mov	r1, ip
1000e240:	1c3a      	adds	r2, r7, #0
1000e242:	4b10      	ldr	r3, [pc, #64]	; (1000e284 <at_ble_adv_data_set+0x7c>)
1000e244:	4798      	blx	r3
1000e246:	3572      	adds	r5, #114	; 0x72
1000e248:	702f      	strb	r7, [r5, #0]
1000e24a:	1e30      	subs	r0, r6, #0
1000e24c:	d012      	beq.n	1000e274 <at_ble_adv_data_set+0x6c>
1000e24e:	4d0b      	ldr	r5, [pc, #44]	; (1000e27c <at_ble_adv_data_set+0x74>)
1000e250:	480d      	ldr	r0, [pc, #52]	; (1000e288 <at_ble_adv_data_set+0x80>)
1000e252:	2c00      	cmp	r4, #0
1000e254:	d107      	bne.n	1000e266 <at_ble_adv_data_set+0x5e>
1000e256:	1c21      	adds	r1, r4, #0
1000e258:	221f      	movs	r2, #31
1000e25a:	4b09      	ldr	r3, [pc, #36]	; (1000e280 <at_ble_adv_data_set+0x78>)
1000e25c:	3573      	adds	r5, #115	; 0x73
1000e25e:	4798      	blx	r3
1000e260:	702c      	strb	r4, [r5, #0]
1000e262:	1c20      	adds	r0, r4, #0
1000e264:	e006      	b.n	1000e274 <at_ble_adv_data_set+0x6c>
1000e266:	1c31      	adds	r1, r6, #0
1000e268:	1c22      	adds	r2, r4, #0
1000e26a:	4b06      	ldr	r3, [pc, #24]	; (1000e284 <at_ble_adv_data_set+0x7c>)
1000e26c:	4798      	blx	r3
1000e26e:	2000      	movs	r0, #0
1000e270:	3573      	adds	r5, #115	; 0x73
1000e272:	702c      	strb	r4, [r5, #0]
1000e274:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000e276:	46c0      	nop			; (mov r8, r8)
1000e278:	1001a98e 	.word	0x1001a98e
1000e27c:	1001a95a 	.word	0x1001a95a
1000e280:	10011c69 	.word	0x10011c69
1000e284:	10011c57 	.word	0x10011c57
1000e288:	1001a9ad 	.word	0x1001a9ad

1000e28c <at_ble_adv_start>:
1000e28c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000e28e:	b091      	sub	sp, #68	; 0x44
1000e290:	1c1f      	adds	r7, r3, #0
1000e292:	ab16      	add	r3, sp, #88	; 0x58
1000e294:	881d      	ldrh	r5, [r3, #0]
1000e296:	ab17      	add	r3, sp, #92	; 0x5c
1000e298:	881b      	ldrh	r3, [r3, #0]
1000e29a:	910d      	str	r1, [sp, #52]	; 0x34
1000e29c:	930e      	str	r3, [sp, #56]	; 0x38
1000e29e:	ab18      	add	r3, sp, #96	; 0x60
1000e2a0:	781b      	ldrb	r3, [r3, #0]
1000e2a2:	1c04      	adds	r4, r0, #0
1000e2a4:	930f      	str	r3, [sp, #60]	; 0x3c
1000e2a6:	4b42      	ldr	r3, [pc, #264]	; (1000e3b0 <at_ble_adv_start+0x124>)
1000e2a8:	1c16      	adds	r6, r2, #0
1000e2aa:	3373      	adds	r3, #115	; 0x73
1000e2ac:	781b      	ldrb	r3, [r3, #0]
1000e2ae:	20cf      	movs	r0, #207	; 0xcf
1000e2b0:	930c      	str	r3, [sp, #48]	; 0x30
1000e2b2:	2c01      	cmp	r4, #1
1000e2b4:	d103      	bne.n	1000e2be <at_ble_adv_start+0x32>
1000e2b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1000e2b8:	2b00      	cmp	r3, #0
1000e2ba:	d176      	bne.n	1000e3aa <at_ble_adv_start+0x11e>
1000e2bc:	e024      	b.n	1000e308 <at_ble_adv_start+0x7c>
1000e2be:	2c04      	cmp	r4, #4
1000e2c0:	d873      	bhi.n	1000e3aa <at_ble_adv_start+0x11e>
1000e2c2:	2380      	movs	r3, #128	; 0x80
1000e2c4:	01db      	lsls	r3, r3, #7
1000e2c6:	429d      	cmp	r5, r3
1000e2c8:	d86f      	bhi.n	1000e3aa <at_ble_adv_start+0x11e>
1000e2ca:	2c00      	cmp	r4, #0
1000e2cc:	d102      	bne.n	1000e2d4 <at_ble_adv_start+0x48>
1000e2ce:	2d1f      	cmp	r5, #31
1000e2d0:	d96b      	bls.n	1000e3aa <at_ble_adv_start+0x11e>
1000e2d2:	e003      	b.n	1000e2dc <at_ble_adv_start+0x50>
1000e2d4:	2d9f      	cmp	r5, #159	; 0x9f
1000e2d6:	d801      	bhi.n	1000e2dc <at_ble_adv_start+0x50>
1000e2d8:	2c01      	cmp	r4, #1
1000e2da:	d166      	bne.n	1000e3aa <at_ble_adv_start+0x11e>
1000e2dc:	2f00      	cmp	r7, #0
1000e2de:	d009      	beq.n	1000e2f4 <at_ble_adv_start+0x68>
1000e2e0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1000e2e2:	20cf      	movs	r0, #207	; 0xcf
1000e2e4:	3b01      	subs	r3, #1
1000e2e6:	2b01      	cmp	r3, #1
1000e2e8:	d95f      	bls.n	1000e3aa <at_ble_adv_start+0x11e>
1000e2ea:	2c01      	cmp	r4, #1
1000e2ec:	d102      	bne.n	1000e2f4 <at_ble_adv_start+0x68>
1000e2ee:	2d00      	cmp	r5, #0
1000e2f0:	d100      	bne.n	1000e2f4 <at_ble_adv_start+0x68>
1000e2f2:	3520      	adds	r5, #32
1000e2f4:	4b2f      	ldr	r3, [pc, #188]	; (1000e3b4 <at_ble_adv_start+0x128>)
1000e2f6:	4798      	blx	r3
1000e2f8:	1c01      	adds	r1, r0, #0
1000e2fa:	2e00      	cmp	r6, #0
1000e2fc:	d043      	beq.n	1000e386 <at_ble_adv_start+0xfa>
1000e2fe:	7833      	ldrb	r3, [r6, #0]
1000e300:	1e60      	subs	r0, r4, #1
1000e302:	2b00      	cmp	r3, #0
1000e304:	d109      	bne.n	1000e31a <at_ble_adv_start+0x8e>
1000e306:	e03b      	b.n	1000e380 <at_ble_adv_start+0xf4>
1000e308:	2380      	movs	r3, #128	; 0x80
1000e30a:	01db      	lsls	r3, r3, #7
1000e30c:	429d      	cmp	r5, r3
1000e30e:	d84c      	bhi.n	1000e3aa <at_ble_adv_start+0x11e>
1000e310:	2e00      	cmp	r6, #0
1000e312:	d04a      	beq.n	1000e3aa <at_ble_adv_start+0x11e>
1000e314:	2f00      	cmp	r7, #0
1000e316:	d1e3      	bne.n	1000e2e0 <at_ble_adv_start+0x54>
1000e318:	e02b      	b.n	1000e372 <at_ble_adv_start+0xe6>
1000e31a:	2301      	movs	r3, #1
1000e31c:	2803      	cmp	r0, #3
1000e31e:	d93a      	bls.n	1000e396 <at_ble_adv_start+0x10a>
1000e320:	200d      	movs	r0, #13
1000e322:	1c72      	adds	r2, r6, #1
1000e324:	e002      	b.n	1000e32c <at_ble_adv_start+0xa0>
1000e326:	200e      	movs	r0, #14
1000e328:	1e32      	subs	r2, r6, #0
1000e32a:	d1fa      	bne.n	1000e322 <at_ble_adv_start+0x96>
1000e32c:	4c20      	ldr	r4, [pc, #128]	; (1000e3b0 <at_ble_adv_start+0x124>)
1000e32e:	3474      	adds	r4, #116	; 0x74
1000e330:	7826      	ldrb	r6, [r4, #0]
1000e332:	2407      	movs	r4, #7
1000e334:	2e00      	cmp	r6, #0
1000e336:	d000      	beq.n	1000e33a <at_ble_adv_start+0xae>
1000e338:	1c34      	adds	r4, r6, #0
1000e33a:	9200      	str	r2, [sp, #0]
1000e33c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
1000e33e:	9403      	str	r4, [sp, #12]
1000e340:	9204      	str	r2, [sp, #16]
1000e342:	4a1b      	ldr	r2, [pc, #108]	; (1000e3b0 <at_ble_adv_start+0x124>)
1000e344:	9501      	str	r5, [sp, #4]
1000e346:	9502      	str	r5, [sp, #8]
1000e348:	9705      	str	r7, [sp, #20]
1000e34a:	3272      	adds	r2, #114	; 0x72
1000e34c:	7812      	ldrb	r2, [r2, #0]
1000e34e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
1000e350:	9206      	str	r2, [sp, #24]
1000e352:	4a19      	ldr	r2, [pc, #100]	; (1000e3b8 <at_ble_adv_start+0x12c>)
1000e354:	9207      	str	r2, [sp, #28]
1000e356:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1000e358:	9208      	str	r2, [sp, #32]
1000e35a:	4a18      	ldr	r2, [pc, #96]	; (1000e3bc <at_ble_adv_start+0x130>)
1000e35c:	9209      	str	r2, [sp, #36]	; 0x24
1000e35e:	2264      	movs	r2, #100	; 0x64
1000e360:	4362      	muls	r2, r4
1000e362:	b292      	uxth	r2, r2
1000e364:	920a      	str	r2, [sp, #40]	; 0x28
1000e366:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
1000e368:	4c15      	ldr	r4, [pc, #84]	; (1000e3c0 <at_ble_adv_start+0x134>)
1000e36a:	920b      	str	r2, [sp, #44]	; 0x2c
1000e36c:	4a15      	ldr	r2, [pc, #84]	; (1000e3c4 <at_ble_adv_start+0x138>)
1000e36e:	47a0      	blx	r4
1000e370:	e01b      	b.n	1000e3aa <at_ble_adv_start+0x11e>
1000e372:	2d00      	cmp	r5, #0
1000e374:	d1be      	bne.n	1000e2f4 <at_ble_adv_start+0x68>
1000e376:	4b0f      	ldr	r3, [pc, #60]	; (1000e3b4 <at_ble_adv_start+0x128>)
1000e378:	4798      	blx	r3
1000e37a:	2520      	movs	r5, #32
1000e37c:	1c01      	adds	r1, r0, #0
1000e37e:	e7be      	b.n	1000e2fe <at_ble_adv_start+0x72>
1000e380:	2803      	cmp	r0, #3
1000e382:	d8cd      	bhi.n	1000e320 <at_ble_adv_start+0x94>
1000e384:	e006      	b.n	1000e394 <at_ble_adv_start+0x108>
1000e386:	1e60      	subs	r0, r4, #1
1000e388:	2803      	cmp	r0, #3
1000e38a:	d903      	bls.n	1000e394 <at_ble_adv_start+0x108>
1000e38c:	1c33      	adds	r3, r6, #0
1000e38e:	200d      	movs	r0, #13
1000e390:	1c32      	adds	r2, r6, #0
1000e392:	e7cb      	b.n	1000e32c <at_ble_adv_start+0xa0>
1000e394:	2300      	movs	r3, #0
1000e396:	f006 f971 	bl	1001467c <__gnu_thumb1_case_sqi>
1000e39a:	06c6      	.short	0x06c6
1000e39c:	0204      	.short	0x0204
1000e39e:	200f      	movs	r0, #15
1000e3a0:	e7c2      	b.n	1000e328 <at_ble_adv_start+0x9c>
1000e3a2:	2200      	movs	r2, #0
1000e3a4:	920c      	str	r2, [sp, #48]	; 0x30
1000e3a6:	200c      	movs	r0, #12
1000e3a8:	e7be      	b.n	1000e328 <at_ble_adv_start+0x9c>
1000e3aa:	b011      	add	sp, #68	; 0x44
1000e3ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000e3ae:	46c0      	nop			; (mov r8, r8)
1000e3b0:	1001a95a 	.word	0x1001a95a
1000e3b4:	100101cd 	.word	0x100101cd
1000e3b8:	1001a98e 	.word	0x1001a98e
1000e3bc:	1001a9ad 	.word	0x1001a9ad
1000e3c0:	100100ad 	.word	0x100100ad
1000e3c4:	00003a98 	.word	0x00003a98

1000e3c8 <at_ble_adv_stop>:
1000e3c8:	b508      	push	{r3, lr}
1000e3ca:	4b01      	ldr	r3, [pc, #4]	; (1000e3d0 <at_ble_adv_stop+0x8>)
1000e3cc:	4798      	blx	r3
1000e3ce:	bd08      	pop	{r3, pc}
1000e3d0:	1000fed9 	.word	0x1000fed9

1000e3d4 <at_ble_scan_stop>:
1000e3d4:	b510      	push	{r4, lr}
1000e3d6:	4b05      	ldr	r3, [pc, #20]	; (1000e3ec <at_ble_scan_stop+0x18>)
1000e3d8:	4798      	blx	r3
1000e3da:	1e04      	subs	r4, r0, #0
1000e3dc:	d103      	bne.n	1000e3e6 <at_ble_scan_stop+0x12>
1000e3de:	20d1      	movs	r0, #209	; 0xd1
1000e3e0:	4b03      	ldr	r3, [pc, #12]	; (1000e3f0 <at_ble_scan_stop+0x1c>)
1000e3e2:	0100      	lsls	r0, r0, #4
1000e3e4:	4798      	blx	r3
1000e3e6:	1c20      	adds	r0, r4, #0
1000e3e8:	bd10      	pop	{r4, pc}
1000e3ea:	46c0      	nop			; (mov r8, r8)
1000e3ec:	1000fed9 	.word	0x1000fed9
1000e3f0:	1000de81 	.word	0x1000de81

1000e3f4 <at_ble_disconnect>:
1000e3f4:	b538      	push	{r3, r4, r5, lr}
1000e3f6:	1c04      	adds	r4, r0, #0
1000e3f8:	4b04      	ldr	r3, [pc, #16]	; (1000e40c <at_ble_disconnect+0x18>)
1000e3fa:	1c08      	adds	r0, r1, #0
1000e3fc:	1c21      	adds	r1, r4, #0
1000e3fe:	4798      	blx	r3
1000e400:	1c05      	adds	r5, r0, #0
1000e402:	4b03      	ldr	r3, [pc, #12]	; (1000e410 <at_ble_disconnect+0x1c>)
1000e404:	1c20      	adds	r0, r4, #0
1000e406:	4798      	blx	r3
1000e408:	1c28      	adds	r0, r5, #0
1000e40a:	bd38      	pop	{r3, r4, r5, pc}
1000e40c:	1000f551 	.word	0x1000f551
1000e410:	1000dec5 	.word	0x1000dec5

1000e414 <at_ble_conn_update_reply>:
1000e414:	b510      	push	{r4, lr}
1000e416:	4c01      	ldr	r4, [pc, #4]	; (1000e41c <at_ble_conn_update_reply+0x8>)
1000e418:	47a0      	blx	r4
1000e41a:	bd10      	pop	{r4, pc}
1000e41c:	1000fa41 	.word	0x1000fa41

1000e420 <at_ble_random_address_resolve>:
1000e420:	b510      	push	{r4, lr}
1000e422:	23cf      	movs	r3, #207	; 0xcf
1000e424:	2800      	cmp	r0, #0
1000e426:	d00a      	beq.n	1000e43e <at_ble_random_address_resolve+0x1e>
1000e428:	2900      	cmp	r1, #0
1000e42a:	d008      	beq.n	1000e43e <at_ble_random_address_resolve+0x1e>
1000e42c:	2a00      	cmp	r2, #0
1000e42e:	d006      	beq.n	1000e43e <at_ble_random_address_resolve+0x1e>
1000e430:	780c      	ldrb	r4, [r1, #0]
1000e432:	2c02      	cmp	r4, #2
1000e434:	d103      	bne.n	1000e43e <at_ble_random_address_resolve+0x1e>
1000e436:	4b03      	ldr	r3, [pc, #12]	; (1000e444 <at_ble_random_address_resolve+0x24>)
1000e438:	3101      	adds	r1, #1
1000e43a:	4798      	blx	r3
1000e43c:	2300      	movs	r3, #0
1000e43e:	1c18      	adds	r0, r3, #0
1000e440:	bd10      	pop	{r4, pc}
1000e442:	46c0      	nop			; (mov r8, r8)
1000e444:	1001026d 	.word	0x1001026d

1000e448 <at_ble_uuid_type2len>:
1000e448:	23cf      	movs	r3, #207	; 0xcf
1000e44a:	2802      	cmp	r0, #2
1000e44c:	d801      	bhi.n	1000e452 <at_ble_uuid_type2len+0xa>
1000e44e:	4b02      	ldr	r3, [pc, #8]	; (1000e458 <at_ble_uuid_type2len+0x10>)
1000e450:	5c1b      	ldrb	r3, [r3, r0]
1000e452:	1c18      	adds	r0, r3, #0
1000e454:	4770      	bx	lr
1000e456:	46c0      	nop			; (mov r8, r8)
1000e458:	10017b0f 	.word	0x10017b0f

1000e45c <at_ble_uuid_len2type>:
1000e45c:	1e83      	subs	r3, r0, #2
1000e45e:	b2db      	uxtb	r3, r3
1000e460:	2003      	movs	r0, #3
1000e462:	2b0e      	cmp	r3, #14
1000e464:	d801      	bhi.n	1000e46a <at_ble_uuid_len2type+0xe>
1000e466:	4a01      	ldr	r2, [pc, #4]	; (1000e46c <at_ble_uuid_len2type+0x10>)
1000e468:	5cd0      	ldrb	r0, [r2, r3]
1000e46a:	4770      	bx	lr
1000e46c:	10017b12 	.word	0x10017b12

1000e470 <init_gatt_client_module>:
1000e470:	2200      	movs	r2, #0
1000e472:	4b01      	ldr	r3, [pc, #4]	; (1000e478 <init_gatt_client_module+0x8>)
1000e474:	801a      	strh	r2, [r3, #0]
1000e476:	4770      	bx	lr
1000e478:	10019928 	.word	0x10019928

1000e47c <db_searchATT>:
1000e47c:	b570      	push	{r4, r5, r6, lr}
1000e47e:	1c05      	adds	r5, r0, #0
1000e480:	2400      	movs	r4, #0
1000e482:	4b0c      	ldr	r3, [pc, #48]	; (1000e4b4 <db_searchATT+0x38>)
1000e484:	6819      	ldr	r1, [r3, #0]
1000e486:	4b0c      	ldr	r3, [pc, #48]	; (1000e4b8 <db_searchATT+0x3c>)
1000e488:	681e      	ldr	r6, [r3, #0]
1000e48a:	428c      	cmp	r4, r1
1000e48c:	dc10      	bgt.n	1000e4b0 <db_searchATT+0x34>
1000e48e:	200c      	movs	r0, #12
1000e490:	1863      	adds	r3, r4, r1
1000e492:	0fda      	lsrs	r2, r3, #31
1000e494:	18d3      	adds	r3, r2, r3
1000e496:	1c02      	adds	r2, r0, #0
1000e498:	105b      	asrs	r3, r3, #1
1000e49a:	435a      	muls	r2, r3
1000e49c:	18b0      	adds	r0, r6, r2
1000e49e:	8802      	ldrh	r2, [r0, #0]
1000e4a0:	42aa      	cmp	r2, r5
1000e4a2:	d201      	bcs.n	1000e4a8 <db_searchATT+0x2c>
1000e4a4:	1e59      	subs	r1, r3, #1
1000e4a6:	e7f0      	b.n	1000e48a <db_searchATT+0xe>
1000e4a8:	42aa      	cmp	r2, r5
1000e4aa:	d902      	bls.n	1000e4b2 <db_searchATT+0x36>
1000e4ac:	1c5c      	adds	r4, r3, #1
1000e4ae:	e7ec      	b.n	1000e48a <db_searchATT+0xe>
1000e4b0:	2000      	movs	r0, #0
1000e4b2:	bd70      	pop	{r4, r5, r6, pc}
1000e4b4:	1001993c 	.word	0x1001993c
1000e4b8:	10019934 	.word	0x10019934

1000e4bc <att_permissions>:
1000e4bc:	b530      	push	{r4, r5, lr}
1000e4be:	2403      	movs	r4, #3
1000e4c0:	1c05      	adds	r5, r0, #0
1000e4c2:	2301      	movs	r3, #1
1000e4c4:	4025      	ands	r5, r4
1000e4c6:	42a5      	cmp	r5, r4
1000e4c8:	d009      	beq.n	1000e4de <att_permissions+0x22>
1000e4ca:	1c23      	adds	r3, r4, #0
1000e4cc:	1924      	adds	r4, r4, r4
1000e4ce:	4220      	tst	r0, r4
1000e4d0:	d105      	bne.n	1000e4de <att_permissions+0x22>
1000e4d2:	3b02      	subs	r3, #2
1000e4d4:	4218      	tst	r0, r3
1000e4d6:	d102      	bne.n	1000e4de <att_permissions+0x22>
1000e4d8:	1e4b      	subs	r3, r1, #1
1000e4da:	4199      	sbcs	r1, r3
1000e4dc:	b28b      	uxth	r3, r1
1000e4de:	2130      	movs	r1, #48	; 0x30
1000e4e0:	4001      	ands	r1, r0
1000e4e2:	2930      	cmp	r1, #48	; 0x30
1000e4e4:	d007      	beq.n	1000e4f6 <att_permissions+0x3a>
1000e4e6:	0641      	lsls	r1, r0, #25
1000e4e8:	d401      	bmi.n	1000e4ee <att_permissions+0x32>
1000e4ea:	0681      	lsls	r1, r0, #26
1000e4ec:	d501      	bpl.n	1000e4f2 <att_permissions+0x36>
1000e4ee:	4807      	ldr	r0, [pc, #28]	; (1000e50c <att_permissions+0x50>)
1000e4f0:	e009      	b.n	1000e506 <att_permissions+0x4a>
1000e4f2:	06c1      	lsls	r1, r0, #27
1000e4f4:	d501      	bpl.n	1000e4fa <att_permissions+0x3e>
1000e4f6:	4806      	ldr	r0, [pc, #24]	; (1000e510 <att_permissions+0x54>)
1000e4f8:	e005      	b.n	1000e506 <att_permissions+0x4a>
1000e4fa:	2a00      	cmp	r2, #0
1000e4fc:	d001      	beq.n	1000e502 <att_permissions+0x46>
1000e4fe:	2204      	movs	r2, #4
1000e500:	4313      	orrs	r3, r2
1000e502:	2080      	movs	r0, #128	; 0x80
1000e504:	0180      	lsls	r0, r0, #6
1000e506:	4318      	orrs	r0, r3
1000e508:	bd30      	pop	{r4, r5, pc}
1000e50a:	46c0      	nop			; (mov r8, r8)
1000e50c:	0000200c 	.word	0x0000200c
1000e510:	00002004 	.word	0x00002004

1000e514 <char_permissions>:
1000e514:	b530      	push	{r4, r5, lr}
1000e516:	2300      	movs	r3, #0
1000e518:	0784      	lsls	r4, r0, #30
1000e51a:	d503      	bpl.n	1000e524 <char_permissions+0x10>
1000e51c:	3301      	adds	r3, #1
1000e51e:	4219      	tst	r1, r3
1000e520:	d100      	bne.n	1000e524 <char_permissions+0x10>
1000e522:	3302      	adds	r3, #2
1000e524:	0704      	lsls	r4, r0, #28
1000e526:	d508      	bpl.n	1000e53a <char_permissions+0x26>
1000e528:	06cc      	lsls	r4, r1, #27
1000e52a:	d501      	bpl.n	1000e530 <char_permissions+0x1c>
1000e52c:	2404      	movs	r4, #4
1000e52e:	e000      	b.n	1000e532 <char_permissions+0x1e>
1000e530:	240c      	movs	r4, #12
1000e532:	4323      	orrs	r3, r4
1000e534:	2480      	movs	r4, #128	; 0x80
1000e536:	01a4      	lsls	r4, r4, #6
1000e538:	4323      	orrs	r3, r4
1000e53a:	0684      	lsls	r4, r0, #26
1000e53c:	d506      	bpl.n	1000e54c <char_permissions+0x38>
1000e53e:	2406      	movs	r4, #6
1000e540:	4221      	tst	r1, r4
1000e542:	d101      	bne.n	1000e548 <char_permissions+0x34>
1000e544:	340a      	adds	r4, #10
1000e546:	e000      	b.n	1000e54a <char_permissions+0x36>
1000e548:	2430      	movs	r4, #48	; 0x30
1000e54a:	4323      	orrs	r3, r4
1000e54c:	06c4      	lsls	r4, r0, #27
1000e54e:	d506      	bpl.n	1000e55e <char_permissions+0x4a>
1000e550:	2406      	movs	r4, #6
1000e552:	4221      	tst	r1, r4
1000e554:	d101      	bne.n	1000e55a <char_permissions+0x46>
1000e556:	343a      	adds	r4, #58	; 0x3a
1000e558:	e000      	b.n	1000e55c <char_permissions+0x48>
1000e55a:	24c0      	movs	r4, #192	; 0xc0
1000e55c:	4323      	orrs	r3, r4
1000e55e:	2480      	movs	r4, #128	; 0x80
1000e560:	0064      	lsls	r4, r4, #1
1000e562:	4220      	tst	r0, r4
1000e564:	d000      	beq.n	1000e568 <char_permissions+0x54>
1000e566:	4323      	orrs	r3, r4
1000e568:	07c4      	lsls	r4, r0, #31
1000e56a:	d502      	bpl.n	1000e572 <char_permissions+0x5e>
1000e56c:	2480      	movs	r4, #128	; 0x80
1000e56e:	00a4      	lsls	r4, r4, #2
1000e570:	4323      	orrs	r3, r4
1000e572:	2404      	movs	r4, #4
1000e574:	4220      	tst	r0, r4
1000e576:	d006      	beq.n	1000e586 <char_permissions+0x72>
1000e578:	06cd      	lsls	r5, r1, #27
1000e57a:	d400      	bmi.n	1000e57e <char_permissions+0x6a>
1000e57c:	240c      	movs	r4, #12
1000e57e:	4323      	orrs	r3, r4
1000e580:	2480      	movs	r4, #128	; 0x80
1000e582:	0124      	lsls	r4, r4, #4
1000e584:	4323      	orrs	r3, r4
1000e586:	0644      	lsls	r4, r0, #25
1000e588:	d501      	bpl.n	1000e58e <char_permissions+0x7a>
1000e58a:	4c08      	ldr	r4, [pc, #32]	; (1000e5ac <char_permissions+0x98>)
1000e58c:	4323      	orrs	r3, r4
1000e58e:	0600      	lsls	r0, r0, #24
1000e590:	d507      	bpl.n	1000e5a2 <char_permissions+0x8e>
1000e592:	2004      	movs	r0, #4
1000e594:	06c9      	lsls	r1, r1, #27
1000e596:	d400      	bmi.n	1000e59a <char_permissions+0x86>
1000e598:	200c      	movs	r0, #12
1000e59a:	4303      	orrs	r3, r0
1000e59c:	2084      	movs	r0, #132	; 0x84
1000e59e:	0180      	lsls	r0, r0, #6
1000e5a0:	4303      	orrs	r3, r0
1000e5a2:	0390      	lsls	r0, r2, #14
1000e5a4:	4303      	orrs	r3, r0
1000e5a6:	b298      	uxth	r0, r3
1000e5a8:	bd30      	pop	{r4, r5, pc}
1000e5aa:	46c0      	nop			; (mov r8, r8)
1000e5ac:	00001004 	.word	0x00001004

1000e5b0 <presentation_format_define>:
1000e5b0:	b507      	push	{r0, r1, r2, lr}
1000e5b2:	466a      	mov	r2, sp
1000e5b4:	780b      	ldrb	r3, [r1, #0]
1000e5b6:	7013      	strb	r3, [r2, #0]
1000e5b8:	784b      	ldrb	r3, [r1, #1]
1000e5ba:	7053      	strb	r3, [r2, #1]
1000e5bc:	884b      	ldrh	r3, [r1, #2]
1000e5be:	7093      	strb	r3, [r2, #2]
1000e5c0:	0a1b      	lsrs	r3, r3, #8
1000e5c2:	70d3      	strb	r3, [r2, #3]
1000e5c4:	790b      	ldrb	r3, [r1, #4]
1000e5c6:	7113      	strb	r3, [r2, #4]
1000e5c8:	88cb      	ldrh	r3, [r1, #6]
1000e5ca:	2107      	movs	r1, #7
1000e5cc:	7153      	strb	r3, [r2, #5]
1000e5ce:	0a1b      	lsrs	r3, r3, #8
1000e5d0:	7193      	strb	r3, [r2, #6]
1000e5d2:	4b01      	ldr	r3, [pc, #4]	; (1000e5d8 <presentation_format_define+0x28>)
1000e5d4:	4798      	blx	r3
1000e5d6:	bd0e      	pop	{r1, r2, r3, pc}
1000e5d8:	10010859 	.word	0x10010859

1000e5dc <db_addATT>:
1000e5dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000e5de:	4c29      	ldr	r4, [pc, #164]	; (1000e684 <db_addATT+0xa8>)
1000e5e0:	1c1d      	adds	r5, r3, #0
1000e5e2:	6823      	ldr	r3, [r4, #0]
1000e5e4:	9001      	str	r0, [sp, #4]
1000e5e6:	26d3      	movs	r6, #211	; 0xd3
1000e5e8:	2b00      	cmp	r3, #0
1000e5ea:	d048      	beq.n	1000e67e <db_addATT+0xa2>
1000e5ec:	1c1e      	adds	r6, r3, #0
1000e5ee:	3e0c      	subs	r6, #12
1000e5f0:	6026      	str	r6, [r4, #0]
1000e5f2:	2900      	cmp	r1, #0
1000e5f4:	d005      	beq.n	1000e602 <db_addATT+0x26>
1000e5f6:	4f24      	ldr	r7, [pc, #144]	; (1000e688 <db_addATT+0xac>)
1000e5f8:	46bc      	mov	ip, r7
1000e5fa:	4660      	mov	r0, ip
1000e5fc:	683f      	ldr	r7, [r7, #0]
1000e5fe:	18bf      	adds	r7, r7, r2
1000e600:	6007      	str	r7, [r0, #0]
1000e602:	4821      	ldr	r0, [pc, #132]	; (1000e688 <db_addATT+0xac>)
1000e604:	6807      	ldr	r7, [r0, #0]
1000e606:	4684      	mov	ip, r0
1000e608:	42be      	cmp	r6, r7
1000e60a:	d932      	bls.n	1000e672 <db_addATT+0x96>
1000e60c:	4668      	mov	r0, sp
1000e60e:	8880      	ldrh	r0, [r0, #4]
1000e610:	3b0c      	subs	r3, #12
1000e612:	8018      	strh	r0, [r3, #0]
1000e614:	6823      	ldr	r3, [r4, #0]
1000e616:	2900      	cmp	r1, #0
1000e618:	d009      	beq.n	1000e62e <db_addATT+0x52>
1000e61a:	2a00      	cmp	r2, #0
1000e61c:	d007      	beq.n	1000e62e <db_addATT+0x52>
1000e61e:	4660      	mov	r0, ip
1000e620:	6800      	ldr	r0, [r0, #0]
1000e622:	809a      	strh	r2, [r3, #4]
1000e624:	1a80      	subs	r0, r0, r2
1000e626:	6098      	str	r0, [r3, #8]
1000e628:	4b18      	ldr	r3, [pc, #96]	; (1000e68c <db_addATT+0xb0>)
1000e62a:	4798      	blx	r3
1000e62c:	e002      	b.n	1000e634 <db_addATT+0x58>
1000e62e:	2100      	movs	r1, #0
1000e630:	809a      	strh	r2, [r3, #4]
1000e632:	6099      	str	r1, [r3, #8]
1000e634:	2300      	movs	r3, #0
1000e636:	6822      	ldr	r2, [r4, #0]
1000e638:	7093      	strb	r3, [r2, #2]
1000e63a:	3303      	adds	r3, #3
1000e63c:	402b      	ands	r3, r5
1000e63e:	2b03      	cmp	r3, #3
1000e640:	d001      	beq.n	1000e646 <db_addATT+0x6a>
1000e642:	076b      	lsls	r3, r5, #29
1000e644:	d504      	bpl.n	1000e650 <db_addATT+0x74>
1000e646:	2101      	movs	r1, #1
1000e648:	6822      	ldr	r2, [r4, #0]
1000e64a:	7893      	ldrb	r3, [r2, #2]
1000e64c:	430b      	orrs	r3, r1
1000e64e:	7093      	strb	r3, [r2, #2]
1000e650:	2330      	movs	r3, #48	; 0x30
1000e652:	402b      	ands	r3, r5
1000e654:	2b30      	cmp	r3, #48	; 0x30
1000e656:	d001      	beq.n	1000e65c <db_addATT+0x80>
1000e658:	066b      	lsls	r3, r5, #25
1000e65a:	d504      	bpl.n	1000e666 <db_addATT+0x8a>
1000e65c:	2102      	movs	r1, #2
1000e65e:	6822      	ldr	r2, [r4, #0]
1000e660:	7893      	ldrb	r3, [r2, #2]
1000e662:	430b      	orrs	r3, r1
1000e664:	7093      	strb	r3, [r2, #2]
1000e666:	4a0a      	ldr	r2, [pc, #40]	; (1000e690 <db_addATT+0xb4>)
1000e668:	2600      	movs	r6, #0
1000e66a:	6813      	ldr	r3, [r2, #0]
1000e66c:	3301      	adds	r3, #1
1000e66e:	6013      	str	r3, [r2, #0]
1000e670:	e005      	b.n	1000e67e <db_addATT+0xa2>
1000e672:	6023      	str	r3, [r4, #0]
1000e674:	2611      	movs	r6, #17
1000e676:	2900      	cmp	r1, #0
1000e678:	d001      	beq.n	1000e67e <db_addATT+0xa2>
1000e67a:	1aba      	subs	r2, r7, r2
1000e67c:	6002      	str	r2, [r0, #0]
1000e67e:	1c30      	adds	r0, r6, #0
1000e680:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000e682:	46c0      	nop			; (mov r8, r8)
1000e684:	10019934 	.word	0x10019934
1000e688:	10019938 	.word	0x10019938
1000e68c:	10011c57 	.word	0x10011c57
1000e690:	1001993c 	.word	0x1001993c

1000e694 <user_description_define>:
1000e694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000e696:	1c05      	adds	r5, r0, #0
1000e698:	20cf      	movs	r0, #207	; 0xcf
1000e69a:	2a00      	cmp	r2, #0
1000e69c:	d01c      	beq.n	1000e6d8 <user_description_define+0x44>
1000e69e:	1c14      	adds	r4, r2, #0
1000e6a0:	2203      	movs	r2, #3
1000e6a2:	1c1e      	adds	r6, r3, #0
1000e6a4:	400a      	ands	r2, r1
1000e6a6:	1c0b      	adds	r3, r1, #0
1000e6a8:	3a03      	subs	r2, #3
1000e6aa:	4251      	negs	r1, r2
1000e6ac:	4151      	adcs	r1, r2
1000e6ae:	075a      	lsls	r2, r3, #29
1000e6b0:	0fd2      	lsrs	r2, r2, #31
1000e6b2:	430a      	orrs	r2, r1
1000e6b4:	03d2      	lsls	r2, r2, #15
1000e6b6:	4f09      	ldr	r7, [pc, #36]	; (1000e6dc <user_description_define+0x48>)
1000e6b8:	1c28      	adds	r0, r5, #0
1000e6ba:	2a00      	cmp	r2, #0
1000e6bc:	d003      	beq.n	1000e6c6 <user_description_define+0x32>
1000e6be:	1c21      	adds	r1, r4, #0
1000e6c0:	1c32      	adds	r2, r6, #0
1000e6c2:	47b8      	blx	r7
1000e6c4:	e008      	b.n	1000e6d8 <user_description_define+0x44>
1000e6c6:	1c11      	adds	r1, r2, #0
1000e6c8:	47b8      	blx	r7
1000e6ca:	2800      	cmp	r0, #0
1000e6cc:	d104      	bne.n	1000e6d8 <user_description_define+0x44>
1000e6ce:	1c28      	adds	r0, r5, #0
1000e6d0:	1c31      	adds	r1, r6, #0
1000e6d2:	1c22      	adds	r2, r4, #0
1000e6d4:	4b02      	ldr	r3, [pc, #8]	; (1000e6e0 <user_description_define+0x4c>)
1000e6d6:	4798      	blx	r3
1000e6d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000e6da:	46c0      	nop			; (mov r8, r8)
1000e6dc:	1000e5dd 	.word	0x1000e5dd
1000e6e0:	10010859 	.word	0x10010859

1000e6e4 <at_ble_read_authorize_reply.part.1>:
1000e6e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
1000e6e6:	4b09      	ldr	r3, [pc, #36]	; (1000e70c <at_ble_read_authorize_reply.part.1+0x28>)
1000e6e8:	1c05      	adds	r5, r0, #0
1000e6ea:	1c08      	adds	r0, r1, #0
1000e6ec:	1c0c      	adds	r4, r1, #0
1000e6ee:	4798      	blx	r3
1000e6f0:	2800      	cmp	r0, #0
1000e6f2:	d009      	beq.n	1000e708 <at_ble_read_authorize_reply.part.1+0x24>
1000e6f4:	6882      	ldr	r2, [r0, #8]
1000e6f6:	2a00      	cmp	r2, #0
1000e6f8:	d006      	beq.n	1000e708 <at_ble_read_authorize_reply.part.1+0x24>
1000e6fa:	8883      	ldrh	r3, [r0, #4]
1000e6fc:	1c29      	adds	r1, r5, #0
1000e6fe:	9200      	str	r2, [sp, #0]
1000e700:	1c20      	adds	r0, r4, #0
1000e702:	2200      	movs	r2, #0
1000e704:	4c02      	ldr	r4, [pc, #8]	; (1000e710 <at_ble_read_authorize_reply.part.1+0x2c>)
1000e706:	47a0      	blx	r4
1000e708:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
1000e70a:	46c0      	nop			; (mov r8, r8)
1000e70c:	1000e47d 	.word	0x1000e47d
1000e710:	10010369 	.word	0x10010369

1000e714 <internal_at_ble_service_define>:
1000e714:	b5f0      	push	{r4, r5, r6, r7, lr}
1000e716:	b08b      	sub	sp, #44	; 0x2c
1000e718:	9306      	str	r3, [sp, #24]
1000e71a:	ab10      	add	r3, sp, #64	; 0x40
1000e71c:	9202      	str	r2, [sp, #8]
1000e71e:	cb04      	ldmia	r3!, {r2}
1000e720:	1c05      	adds	r5, r0, #0
1000e722:	881b      	ldrh	r3, [r3, #0]
1000e724:	9105      	str	r1, [sp, #20]
1000e726:	9303      	str	r3, [sp, #12]
1000e728:	ab12      	add	r3, sp, #72	; 0x48
1000e72a:	781b      	ldrb	r3, [r3, #0]
1000e72c:	20cf      	movs	r0, #207	; 0xcf
1000e72e:	9304      	str	r3, [sp, #16]
1000e730:	2d00      	cmp	r5, #0
1000e732:	d100      	bne.n	1000e736 <internal_at_ble_service_define+0x22>
1000e734:	e1ca      	b.n	1000eacc <internal_at_ble_service_define+0x3b8>
1000e736:	2900      	cmp	r1, #0
1000e738:	d100      	bne.n	1000e73c <internal_at_ble_service_define+0x28>
1000e73a:	e1c7      	b.n	1000eacc <internal_at_ble_service_define+0x3b8>
1000e73c:	2a00      	cmp	r2, #0
1000e73e:	d100      	bne.n	1000e742 <internal_at_ble_service_define+0x2e>
1000e740:	e1c4      	b.n	1000eacc <internal_at_ble_service_define+0x3b8>
1000e742:	9b03      	ldr	r3, [sp, #12]
1000e744:	2b00      	cmp	r3, #0
1000e746:	d100      	bne.n	1000e74a <internal_at_ble_service_define+0x36>
1000e748:	e1c0      	b.n	1000eacc <internal_at_ble_service_define+0x3b8>
1000e74a:	4bc9      	ldr	r3, [pc, #804]	; (1000ea70 <internal_at_ble_service_define+0x35c>)
1000e74c:	3004      	adds	r0, #4
1000e74e:	681e      	ldr	r6, [r3, #0]
1000e750:	2e00      	cmp	r6, #0
1000e752:	d100      	bne.n	1000e756 <internal_at_ble_service_define+0x42>
1000e754:	e1ba      	b.n	1000eacc <internal_at_ble_service_define+0x3b8>
1000e756:	2400      	movs	r4, #0
1000e758:	4bc6      	ldr	r3, [pc, #792]	; (1000ea74 <internal_at_ble_service_define+0x360>)
1000e75a:	8034      	strh	r4, [r6, #0]
1000e75c:	881b      	ldrh	r3, [r3, #0]
1000e75e:	1db7      	adds	r7, r6, #6
1000e760:	1c21      	adds	r1, r4, #0
1000e762:	2210      	movs	r2, #16
1000e764:	8073      	strh	r3, [r6, #2]
1000e766:	1c38      	adds	r0, r7, #0
1000e768:	4bc3      	ldr	r3, [pc, #780]	; (1000ea78 <internal_at_ble_service_define+0x364>)
1000e76a:	4798      	blx	r3
1000e76c:	7828      	ldrb	r0, [r5, #0]
1000e76e:	4bc3      	ldr	r3, [pc, #780]	; (1000ea7c <internal_at_ble_service_define+0x368>)
1000e770:	4798      	blx	r3
1000e772:	1c69      	adds	r1, r5, #1
1000e774:	1c02      	adds	r2, r0, #0
1000e776:	4bc2      	ldr	r3, [pc, #776]	; (1000ea80 <internal_at_ble_service_define+0x36c>)
1000e778:	1c38      	adds	r0, r7, #0
1000e77a:	4798      	blx	r3
1000e77c:	2204      	movs	r2, #4
1000e77e:	782b      	ldrb	r3, [r5, #0]
1000e780:	9d02      	ldr	r5, [sp, #8]
1000e782:	011b      	lsls	r3, r3, #4
1000e784:	4313      	orrs	r3, r2
1000e786:	9a04      	ldr	r2, [sp, #16]
1000e788:	7174      	strb	r4, [r6, #5]
1000e78a:	0192      	lsls	r2, r2, #6
1000e78c:	4313      	orrs	r3, r2
1000e78e:	7133      	strb	r3, [r6, #4]
1000e790:	2316      	movs	r3, #22
1000e792:	9a06      	ldr	r2, [sp, #24]
1000e794:	3512      	adds	r5, #18
1000e796:	4353      	muls	r3, r2
1000e798:	9a02      	ldr	r2, [sp, #8]
1000e79a:	3312      	adds	r3, #18
1000e79c:	18d7      	adds	r7, r2, r3
1000e79e:	42bd      	cmp	r5, r7
1000e7a0:	d00f      	beq.n	1000e7c2 <internal_at_ble_service_define+0xae>
1000e7a2:	4bb8      	ldr	r3, [pc, #736]	; (1000ea84 <internal_at_ble_service_define+0x370>)
1000e7a4:	8829      	ldrh	r1, [r5, #0]
1000e7a6:	9300      	str	r3, [sp, #0]
1000e7a8:	230e      	movs	r3, #14
1000e7aa:	aa06      	add	r2, sp, #24
1000e7ac:	189b      	adds	r3, r3, r2
1000e7ae:	9301      	str	r3, [sp, #4]
1000e7b0:	4cb5      	ldr	r4, [pc, #724]	; (1000ea88 <internal_at_ble_service_define+0x374>)
1000e7b2:	1c30      	adds	r0, r6, #0
1000e7b4:	2201      	movs	r2, #1
1000e7b6:	2302      	movs	r3, #2
1000e7b8:	47a0      	blx	r4
1000e7ba:	3516      	adds	r5, #22
1000e7bc:	1e04      	subs	r4, r0, #0
1000e7be:	d0ee      	beq.n	1000e79e <internal_at_ble_service_define+0x8a>
1000e7c0:	e183      	b.n	1000eaca <internal_at_ble_service_define+0x3b6>
1000e7c2:	9f10      	ldr	r7, [sp, #64]	; 0x40
1000e7c4:	2300      	movs	r3, #0
1000e7c6:	3714      	adds	r7, #20
1000e7c8:	1c3d      	adds	r5, r7, #0
1000e7ca:	9302      	str	r3, [sp, #8]
1000e7cc:	9b02      	ldr	r3, [sp, #8]
1000e7ce:	9a03      	ldr	r2, [sp, #12]
1000e7d0:	4293      	cmp	r3, r2
1000e7d2:	db00      	blt.n	1000e7d6 <internal_at_ble_service_define+0xc2>
1000e7d4:	e0bf      	b.n	1000e956 <internal_at_ble_service_define+0x242>
1000e7d6:	4bad      	ldr	r3, [pc, #692]	; (1000ea8c <internal_at_ble_service_define+0x378>)
1000e7d8:	aa06      	add	r2, sp, #24
1000e7da:	9300      	str	r3, [sp, #0]
1000e7dc:	230e      	movs	r3, #14
1000e7de:	189b      	adds	r3, r3, r2
1000e7e0:	9301      	str	r3, [sp, #4]
1000e7e2:	4ca9      	ldr	r4, [pc, #676]	; (1000ea88 <internal_at_ble_service_define+0x374>)
1000e7e4:	1c30      	adds	r0, r6, #0
1000e7e6:	2104      	movs	r1, #4
1000e7e8:	2201      	movs	r2, #1
1000e7ea:	2302      	movs	r3, #2
1000e7ec:	47a0      	blx	r4
1000e7ee:	1e04      	subs	r4, r0, #0
1000e7f0:	d000      	beq.n	1000e7f4 <internal_at_ble_service_define+0xe0>
1000e7f2:	e16a      	b.n	1000eaca <internal_at_ble_service_define+0x3b6>
1000e7f4:	1c2b      	adds	r3, r5, #0
1000e7f6:	3b12      	subs	r3, #18
1000e7f8:	7b2c      	ldrb	r4, [r5, #12]
1000e7fa:	781b      	ldrb	r3, [r3, #0]
1000e7fc:	1c21      	adds	r1, r4, #0
1000e7fe:	1c1a      	adds	r2, r3, #0
1000e800:	9304      	str	r3, [sp, #16]
1000e802:	8828      	ldrh	r0, [r5, #0]
1000e804:	4ba2      	ldr	r3, [pc, #648]	; (1000ea90 <internal_at_ble_service_define+0x37c>)
1000e806:	4798      	blx	r3
1000e808:	2303      	movs	r3, #3
1000e80a:	4023      	ands	r3, r4
1000e80c:	3b03      	subs	r3, #3
1000e80e:	4259      	negs	r1, r3
1000e810:	4159      	adcs	r1, r3
1000e812:	2301      	movs	r3, #1
1000e814:	08a4      	lsrs	r4, r4, #2
1000e816:	401c      	ands	r4, r3
1000e818:	430c      	orrs	r4, r1
1000e81a:	896b      	ldrh	r3, [r5, #10]
1000e81c:	03e4      	lsls	r4, r4, #15
1000e81e:	431c      	orrs	r4, r3
1000e820:	9007      	str	r0, [sp, #28]
1000e822:	4b96      	ldr	r3, [pc, #600]	; (1000ea7c <internal_at_ble_service_define+0x368>)
1000e824:	9804      	ldr	r0, [sp, #16]
1000e826:	4798      	blx	r3
1000e828:	1c2a      	adds	r2, r5, #0
1000e82a:	3a11      	subs	r2, #17
1000e82c:	9200      	str	r2, [sp, #0]
1000e82e:	3a03      	subs	r2, #3
1000e830:	1c03      	adds	r3, r0, #0
1000e832:	9201      	str	r2, [sp, #4]
1000e834:	1c21      	adds	r1, r4, #0
1000e836:	1c30      	adds	r0, r6, #0
1000e838:	4c93      	ldr	r4, [pc, #588]	; (1000ea88 <internal_at_ble_service_define+0x374>)
1000e83a:	9a07      	ldr	r2, [sp, #28]
1000e83c:	47a0      	blx	r4
1000e83e:	1e04      	subs	r4, r0, #0
1000e840:	d000      	beq.n	1000e844 <internal_at_ble_service_define+0x130>
1000e842:	e142      	b.n	1000eaca <internal_at_ble_service_define+0x3b6>
1000e844:	22c0      	movs	r2, #192	; 0xc0
1000e846:	882b      	ldrh	r3, [r5, #0]
1000e848:	0052      	lsls	r2, r2, #1
1000e84a:	4213      	tst	r3, r2
1000e84c:	d104      	bne.n	1000e858 <internal_at_ble_service_define+0x144>
1000e84e:	8aab      	ldrh	r3, [r5, #20]
1000e850:	9304      	str	r3, [sp, #16]
1000e852:	2b00      	cmp	r3, #0
1000e854:	d116      	bne.n	1000e884 <internal_at_ble_service_define+0x170>
1000e856:	e03a      	b.n	1000e8ce <internal_at_ble_service_define+0x1ba>
1000e858:	2201      	movs	r2, #1
1000e85a:	09d9      	lsrs	r1, r3, #7
1000e85c:	4011      	ands	r1, r2
1000e85e:	05db      	lsls	r3, r3, #23
1000e860:	d501      	bpl.n	1000e866 <internal_at_ble_service_define+0x152>
1000e862:	2302      	movs	r3, #2
1000e864:	4319      	orrs	r1, r3
1000e866:	4b8b      	ldr	r3, [pc, #556]	; (1000ea94 <internal_at_ble_service_define+0x380>)
1000e868:	aa06      	add	r2, sp, #24
1000e86a:	9300      	str	r3, [sp, #0]
1000e86c:	230e      	movs	r3, #14
1000e86e:	189b      	adds	r3, r3, r2
1000e870:	9301      	str	r3, [sp, #4]
1000e872:	4c85      	ldr	r4, [pc, #532]	; (1000ea88 <internal_at_ble_service_define+0x374>)
1000e874:	0209      	lsls	r1, r1, #8
1000e876:	1c30      	adds	r0, r6, #0
1000e878:	2201      	movs	r2, #1
1000e87a:	2302      	movs	r3, #2
1000e87c:	47a0      	blx	r4
1000e87e:	1e04      	subs	r4, r0, #0
1000e880:	d0e5      	beq.n	1000e84e <internal_at_ble_service_define+0x13a>
1000e882:	e122      	b.n	1000eaca <internal_at_ble_service_define+0x3b6>
1000e884:	2380      	movs	r3, #128	; 0x80
1000e886:	882a      	ldrh	r2, [r5, #0]
1000e888:	7f2c      	ldrb	r4, [r5, #28]
1000e88a:	005b      	lsls	r3, r3, #1
1000e88c:	401a      	ands	r2, r3
1000e88e:	1c20      	adds	r0, r4, #0
1000e890:	2101      	movs	r1, #1
1000e892:	2a00      	cmp	r2, #0
1000e894:	d000      	beq.n	1000e898 <internal_at_ble_service_define+0x184>
1000e896:	1c0a      	adds	r2, r1, #0
1000e898:	4b7f      	ldr	r3, [pc, #508]	; (1000ea98 <internal_at_ble_service_define+0x384>)
1000e89a:	4798      	blx	r3
1000e89c:	2203      	movs	r2, #3
1000e89e:	4022      	ands	r2, r4
1000e8a0:	3a03      	subs	r2, #3
1000e8a2:	4251      	negs	r1, r2
1000e8a4:	4151      	adcs	r1, r2
1000e8a6:	4b7d      	ldr	r3, [pc, #500]	; (1000ea9c <internal_at_ble_service_define+0x388>)
1000e8a8:	1c0a      	adds	r2, r1, #0
1000e8aa:	9300      	str	r3, [sp, #0]
1000e8ac:	1c2b      	adds	r3, r5, #0
1000e8ae:	0764      	lsls	r4, r4, #29
1000e8b0:	0fe4      	lsrs	r4, r4, #31
1000e8b2:	4322      	orrs	r2, r4
1000e8b4:	03d2      	lsls	r2, r2, #15
1000e8b6:	4310      	orrs	r0, r2
1000e8b8:	3320      	adds	r3, #32
1000e8ba:	b282      	uxth	r2, r0
1000e8bc:	9301      	str	r3, [sp, #4]
1000e8be:	4c72      	ldr	r4, [pc, #456]	; (1000ea88 <internal_at_ble_service_define+0x374>)
1000e8c0:	1c30      	adds	r0, r6, #0
1000e8c2:	9904      	ldr	r1, [sp, #16]
1000e8c4:	2302      	movs	r3, #2
1000e8c6:	47a0      	blx	r4
1000e8c8:	1e04      	subs	r4, r0, #0
1000e8ca:	d000      	beq.n	1000e8ce <internal_at_ble_service_define+0x1ba>
1000e8cc:	e0fd      	b.n	1000eaca <internal_at_ble_service_define+0x3b6>
1000e8ce:	2101      	movs	r1, #1
1000e8d0:	882b      	ldrh	r3, [r5, #0]
1000e8d2:	420b      	tst	r3, r1
1000e8d4:	d011      	beq.n	1000e8fa <internal_at_ble_service_define+0x1e6>
1000e8d6:	7fa8      	ldrb	r0, [r5, #30]
1000e8d8:	4b6f      	ldr	r3, [pc, #444]	; (1000ea98 <internal_at_ble_service_define+0x384>)
1000e8da:	2200      	movs	r2, #0
1000e8dc:	4798      	blx	r3
1000e8de:	4b70      	ldr	r3, [pc, #448]	; (1000eaa0 <internal_at_ble_service_define+0x38c>)
1000e8e0:	1c02      	adds	r2, r0, #0
1000e8e2:	9300      	str	r3, [sp, #0]
1000e8e4:	1c2b      	adds	r3, r5, #0
1000e8e6:	3324      	adds	r3, #36	; 0x24
1000e8e8:	9301      	str	r3, [sp, #4]
1000e8ea:	4c67      	ldr	r4, [pc, #412]	; (1000ea88 <internal_at_ble_service_define+0x374>)
1000e8ec:	1c30      	adds	r0, r6, #0
1000e8ee:	496d      	ldr	r1, [pc, #436]	; (1000eaa4 <internal_at_ble_service_define+0x390>)
1000e8f0:	2302      	movs	r3, #2
1000e8f2:	47a0      	blx	r4
1000e8f4:	1e04      	subs	r4, r0, #0
1000e8f6:	d000      	beq.n	1000e8fa <internal_at_ble_service_define+0x1e6>
1000e8f8:	e0e7      	b.n	1000eaca <internal_at_ble_service_define+0x3b6>
1000e8fa:	2330      	movs	r3, #48	; 0x30
1000e8fc:	882a      	ldrh	r2, [r5, #0]
1000e8fe:	421a      	tst	r2, r3
1000e900:	d012      	beq.n	1000e928 <internal_at_ble_service_define+0x214>
1000e902:	2101      	movs	r1, #1
1000e904:	7f68      	ldrb	r0, [r5, #29]
1000e906:	1c0a      	adds	r2, r1, #0
1000e908:	4b63      	ldr	r3, [pc, #396]	; (1000ea98 <internal_at_ble_service_define+0x384>)
1000e90a:	4798      	blx	r3
1000e90c:	4b66      	ldr	r3, [pc, #408]	; (1000eaa8 <internal_at_ble_service_define+0x394>)
1000e90e:	1c02      	adds	r2, r0, #0
1000e910:	9300      	str	r3, [sp, #0]
1000e912:	1c2b      	adds	r3, r5, #0
1000e914:	3322      	adds	r3, #34	; 0x22
1000e916:	9301      	str	r3, [sp, #4]
1000e918:	4c5b      	ldr	r4, [pc, #364]	; (1000ea88 <internal_at_ble_service_define+0x374>)
1000e91a:	1c30      	adds	r0, r6, #0
1000e91c:	4961      	ldr	r1, [pc, #388]	; (1000eaa4 <internal_at_ble_service_define+0x390>)
1000e91e:	2302      	movs	r3, #2
1000e920:	47a0      	blx	r4
1000e922:	1e04      	subs	r4, r0, #0
1000e924:	d000      	beq.n	1000e928 <internal_at_ble_service_define+0x214>
1000e926:	e0d0      	b.n	1000eaca <internal_at_ble_service_define+0x3b6>
1000e928:	69ab      	ldr	r3, [r5, #24]
1000e92a:	2b00      	cmp	r3, #0
1000e92c:	d00e      	beq.n	1000e94c <internal_at_ble_service_define+0x238>
1000e92e:	4b5f      	ldr	r3, [pc, #380]	; (1000eaac <internal_at_ble_service_define+0x398>)
1000e930:	aa06      	add	r2, sp, #24
1000e932:	9300      	str	r3, [sp, #0]
1000e934:	230e      	movs	r3, #14
1000e936:	189b      	adds	r3, r3, r2
1000e938:	9301      	str	r3, [sp, #4]
1000e93a:	4c53      	ldr	r4, [pc, #332]	; (1000ea88 <internal_at_ble_service_define+0x374>)
1000e93c:	1c30      	adds	r0, r6, #0
1000e93e:	2107      	movs	r1, #7
1000e940:	2201      	movs	r2, #1
1000e942:	2302      	movs	r3, #2
1000e944:	47a0      	blx	r4
1000e946:	1e04      	subs	r4, r0, #0
1000e948:	d000      	beq.n	1000e94c <internal_at_ble_service_define+0x238>
1000e94a:	e0be      	b.n	1000eaca <internal_at_ble_service_define+0x3b6>
1000e94c:	9b02      	ldr	r3, [sp, #8]
1000e94e:	353c      	adds	r5, #60	; 0x3c
1000e950:	3301      	adds	r3, #1
1000e952:	9302      	str	r3, [sp, #8]
1000e954:	e73a      	b.n	1000e7cc <internal_at_ble_service_define+0xb8>
1000e956:	1c30      	adds	r0, r6, #0
1000e958:	4b55      	ldr	r3, [pc, #340]	; (1000eab0 <internal_at_ble_service_define+0x39c>)
1000e95a:	4798      	blx	r3
1000e95c:	1e04      	subs	r4, r0, #0
1000e95e:	d000      	beq.n	1000e962 <internal_at_ble_service_define+0x24e>
1000e960:	e0b3      	b.n	1000eaca <internal_at_ble_service_define+0x3b6>
1000e962:	8833      	ldrh	r3, [r6, #0]
1000e964:	9a05      	ldr	r2, [sp, #20]
1000e966:	8013      	strh	r3, [r2, #0]
1000e968:	8836      	ldrh	r6, [r6, #0]
1000e96a:	9b06      	ldr	r3, [sp, #24]
1000e96c:	9a03      	ldr	r2, [sp, #12]
1000e96e:	18f6      	adds	r6, r6, r3
1000e970:	b2b3      	uxth	r3, r6
1000e972:	9302      	str	r3, [sp, #8]
1000e974:	233c      	movs	r3, #60	; 0x3c
1000e976:	4353      	muls	r3, r2
1000e978:	9a10      	ldr	r2, [sp, #64]	; 0x40
1000e97a:	3314      	adds	r3, #20
1000e97c:	18d3      	adds	r3, r2, r3
1000e97e:	9304      	str	r3, [sp, #16]
1000e980:	9b04      	ldr	r3, [sp, #16]
1000e982:	429f      	cmp	r7, r3
1000e984:	d100      	bne.n	1000e988 <internal_at_ble_service_define+0x274>
1000e986:	e0a0      	b.n	1000eaca <internal_at_ble_service_define+0x3b6>
1000e988:	9b02      	ldr	r3, [sp, #8]
1000e98a:	1c9d      	adds	r5, r3, #2
1000e98c:	1c3b      	adds	r3, r7, #0
1000e98e:	b2ad      	uxth	r5, r5
1000e990:	3b14      	subs	r3, #20
1000e992:	801d      	strh	r5, [r3, #0]
1000e994:	9303      	str	r3, [sp, #12]
1000e996:	893b      	ldrh	r3, [r7, #8]
1000e998:	2b00      	cmp	r3, #0
1000e99a:	d108      	bne.n	1000e9ae <internal_at_ble_service_define+0x29a>
1000e99c:	23c0      	movs	r3, #192	; 0xc0
1000e99e:	883a      	ldrh	r2, [r7, #0]
1000e9a0:	005b      	lsls	r3, r3, #1
1000e9a2:	421a      	tst	r2, r3
1000e9a4:	d026      	beq.n	1000e9f4 <internal_at_ble_service_define+0x2e0>
1000e9a6:	9e02      	ldr	r6, [sp, #8]
1000e9a8:	3603      	adds	r6, #3
1000e9aa:	b2b5      	uxth	r5, r6
1000e9ac:	e022      	b.n	1000e9f4 <internal_at_ble_service_define+0x2e0>
1000e9ae:	2103      	movs	r1, #3
1000e9b0:	7b3b      	ldrb	r3, [r7, #12]
1000e9b2:	4019      	ands	r1, r3
1000e9b4:	3903      	subs	r1, #3
1000e9b6:	424a      	negs	r2, r1
1000e9b8:	414a      	adcs	r2, r1
1000e9ba:	0759      	lsls	r1, r3, #29
1000e9bc:	0fc9      	lsrs	r1, r1, #31
1000e9be:	4311      	orrs	r1, r2
1000e9c0:	03c9      	lsls	r1, r1, #15
1000e9c2:	897a      	ldrh	r2, [r7, #10]
1000e9c4:	2900      	cmp	r1, #0
1000e9c6:	d007      	beq.n	1000e9d8 <internal_at_ble_service_define+0x2c4>
1000e9c8:	6879      	ldr	r1, [r7, #4]
1000e9ca:	2900      	cmp	r1, #0
1000e9cc:	d100      	bne.n	1000e9d0 <internal_at_ble_service_define+0x2bc>
1000e9ce:	4939      	ldr	r1, [pc, #228]	; (1000eab4 <internal_at_ble_service_define+0x3a0>)
1000e9d0:	1c28      	adds	r0, r5, #0
1000e9d2:	4e39      	ldr	r6, [pc, #228]	; (1000eab8 <internal_at_ble_service_define+0x3a4>)
1000e9d4:	47b0      	blx	r6
1000e9d6:	e00a      	b.n	1000e9ee <internal_at_ble_service_define+0x2da>
1000e9d8:	1c28      	adds	r0, r5, #0
1000e9da:	4e37      	ldr	r6, [pc, #220]	; (1000eab8 <internal_at_ble_service_define+0x3a4>)
1000e9dc:	47b0      	blx	r6
1000e9de:	2800      	cmp	r0, #0
1000e9e0:	d172      	bne.n	1000eac8 <internal_at_ble_service_define+0x3b4>
1000e9e2:	9b03      	ldr	r3, [sp, #12]
1000e9e4:	8939      	ldrh	r1, [r7, #8]
1000e9e6:	8818      	ldrh	r0, [r3, #0]
1000e9e8:	687a      	ldr	r2, [r7, #4]
1000e9ea:	4b34      	ldr	r3, [pc, #208]	; (1000eabc <internal_at_ble_service_define+0x3a8>)
1000e9ec:	4798      	blx	r3
1000e9ee:	2800      	cmp	r0, #0
1000e9f0:	d0d4      	beq.n	1000e99c <internal_at_ble_service_define+0x288>
1000e9f2:	e069      	b.n	1000eac8 <internal_at_ble_service_define+0x3b4>
1000e9f4:	8abb      	ldrh	r3, [r7, #20]
1000e9f6:	2b00      	cmp	r3, #0
1000e9f8:	d00a      	beq.n	1000ea10 <internal_at_ble_service_define+0x2fc>
1000e9fa:	3501      	adds	r5, #1
1000e9fc:	b2ad      	uxth	r5, r5
1000e9fe:	843d      	strh	r5, [r7, #32]
1000ea00:	7f39      	ldrb	r1, [r7, #28]
1000ea02:	8afb      	ldrh	r3, [r7, #22]
1000ea04:	1c28      	adds	r0, r5, #0
1000ea06:	693a      	ldr	r2, [r7, #16]
1000ea08:	4e2d      	ldr	r6, [pc, #180]	; (1000eac0 <internal_at_ble_service_define+0x3ac>)
1000ea0a:	47b0      	blx	r6
1000ea0c:	2800      	cmp	r0, #0
1000ea0e:	d15b      	bne.n	1000eac8 <internal_at_ble_service_define+0x3b4>
1000ea10:	883b      	ldrh	r3, [r7, #0]
1000ea12:	07db      	lsls	r3, r3, #31
1000ea14:	d50d      	bpl.n	1000ea32 <internal_at_ble_service_define+0x31e>
1000ea16:	2200      	movs	r2, #0
1000ea18:	3501      	adds	r5, #1
1000ea1a:	b2ad      	uxth	r5, r5
1000ea1c:	a909      	add	r1, sp, #36	; 0x24
1000ea1e:	84bd      	strh	r5, [r7, #36]	; 0x24
1000ea20:	7fbb      	ldrb	r3, [r7, #30]
1000ea22:	1c28      	adds	r0, r5, #0
1000ea24:	700a      	strb	r2, [r1, #0]
1000ea26:	704a      	strb	r2, [r1, #1]
1000ea28:	4e23      	ldr	r6, [pc, #140]	; (1000eab8 <internal_at_ble_service_define+0x3a4>)
1000ea2a:	3202      	adds	r2, #2
1000ea2c:	47b0      	blx	r6
1000ea2e:	2800      	cmp	r0, #0
1000ea30:	d14a      	bne.n	1000eac8 <internal_at_ble_service_define+0x3b4>
1000ea32:	2330      	movs	r3, #48	; 0x30
1000ea34:	883a      	ldrh	r2, [r7, #0]
1000ea36:	421a      	tst	r2, r3
1000ea38:	d00d      	beq.n	1000ea56 <internal_at_ble_service_define+0x342>
1000ea3a:	2200      	movs	r2, #0
1000ea3c:	3501      	adds	r5, #1
1000ea3e:	b2ad      	uxth	r5, r5
1000ea40:	a909      	add	r1, sp, #36	; 0x24
1000ea42:	847d      	strh	r5, [r7, #34]	; 0x22
1000ea44:	7f7b      	ldrb	r3, [r7, #29]
1000ea46:	1c28      	adds	r0, r5, #0
1000ea48:	700a      	strb	r2, [r1, #0]
1000ea4a:	704a      	strb	r2, [r1, #1]
1000ea4c:	4e1a      	ldr	r6, [pc, #104]	; (1000eab8 <internal_at_ble_service_define+0x3a4>)
1000ea4e:	3202      	adds	r2, #2
1000ea50:	47b0      	blx	r6
1000ea52:	2800      	cmp	r0, #0
1000ea54:	d138      	bne.n	1000eac8 <internal_at_ble_service_define+0x3b4>
1000ea56:	69b9      	ldr	r1, [r7, #24]
1000ea58:	2900      	cmp	r1, #0
1000ea5a:	d006      	beq.n	1000ea6a <internal_at_ble_service_define+0x356>
1000ea5c:	3501      	adds	r5, #1
1000ea5e:	b2ad      	uxth	r5, r5
1000ea60:	1c28      	adds	r0, r5, #0
1000ea62:	4b18      	ldr	r3, [pc, #96]	; (1000eac4 <internal_at_ble_service_define+0x3b0>)
1000ea64:	4798      	blx	r3
1000ea66:	2800      	cmp	r0, #0
1000ea68:	d12e      	bne.n	1000eac8 <internal_at_ble_service_define+0x3b4>
1000ea6a:	373c      	adds	r7, #60	; 0x3c
1000ea6c:	9502      	str	r5, [sp, #8]
1000ea6e:	e787      	b.n	1000e980 <internal_at_ble_service_define+0x26c>
1000ea70:	10019944 	.word	0x10019944
1000ea74:	1001a8c8 	.word	0x1001a8c8
1000ea78:	10011c69 	.word	0x10011c69
1000ea7c:	1000e449 	.word	0x1000e449
1000ea80:	10011c57 	.word	0x10011c57
1000ea84:	10017b2b 	.word	0x10017b2b
1000ea88:	100107e9 	.word	0x100107e9
1000ea8c:	10017b2d 	.word	0x10017b2d
1000ea90:	1000e515 	.word	0x1000e515
1000ea94:	10017b29 	.word	0x10017b29
1000ea98:	1000e4bd 	.word	0x1000e4bd
1000ea9c:	10017b25 	.word	0x10017b25
1000eaa0:	10017b27 	.word	0x10017b27
1000eaa4:	00008002 	.word	0x00008002
1000eaa8:	10017b21 	.word	0x10017b21
1000eaac:	10017b23 	.word	0x10017b23
1000eab0:	100106dd 	.word	0x100106dd
1000eab4:	10019930 	.word	0x10019930
1000eab8:	1000e5dd 	.word	0x1000e5dd
1000eabc:	10010859 	.word	0x10010859
1000eac0:	1000e695 	.word	0x1000e695
1000eac4:	1000e5b1 	.word	0x1000e5b1
1000eac8:	1c04      	adds	r4, r0, #0
1000eaca:	1c20      	adds	r0, r4, #0
1000eacc:	b00b      	add	sp, #44	; 0x2c
1000eace:	bdf0      	pop	{r4, r5, r6, r7, pc}

1000ead0 <initi_gatt_server_module>:
1000ead0:	2300      	movs	r3, #0
1000ead2:	4a07      	ldr	r2, [pc, #28]	; (1000eaf0 <initi_gatt_server_module+0x20>)
1000ead4:	7013      	strb	r3, [r2, #0]
1000ead6:	4a07      	ldr	r2, [pc, #28]	; (1000eaf4 <initi_gatt_server_module+0x24>)
1000ead8:	6013      	str	r3, [r2, #0]
1000eada:	4a07      	ldr	r2, [pc, #28]	; (1000eaf8 <initi_gatt_server_module+0x28>)
1000eadc:	6013      	str	r3, [r2, #0]
1000eade:	4a07      	ldr	r2, [pc, #28]	; (1000eafc <initi_gatt_server_module+0x2c>)
1000eae0:	6013      	str	r3, [r2, #0]
1000eae2:	4a07      	ldr	r2, [pc, #28]	; (1000eb00 <initi_gatt_server_module+0x30>)
1000eae4:	6013      	str	r3, [r2, #0]
1000eae6:	4a07      	ldr	r2, [pc, #28]	; (1000eb04 <initi_gatt_server_module+0x34>)
1000eae8:	6013      	str	r3, [r2, #0]
1000eaea:	4a07      	ldr	r2, [pc, #28]	; (1000eb08 <initi_gatt_server_module+0x38>)
1000eaec:	6013      	str	r3, [r2, #0]
1000eaee:	4770      	bx	lr
1000eaf0:	10019930 	.word	0x10019930
1000eaf4:	10019940 	.word	0x10019940
1000eaf8:	1001993c 	.word	0x1001993c
1000eafc:	1001992c 	.word	0x1001992c
1000eb00:	10019938 	.word	0x10019938
1000eb04:	10019934 	.word	0x10019934
1000eb08:	10019944 	.word	0x10019944

1000eb0c <db_init>:
1000eb0c:	4b0a      	ldr	r3, [pc, #40]	; (1000eb38 <db_init+0x2c>)
1000eb0e:	4a0b      	ldr	r2, [pc, #44]	; (1000eb3c <db_init+0x30>)
1000eb10:	6018      	str	r0, [r3, #0]
1000eb12:	084b      	lsrs	r3, r1, #1
1000eb14:	6013      	str	r3, [r2, #0]
1000eb16:	4a0a      	ldr	r2, [pc, #40]	; (1000eb40 <db_init+0x34>)
1000eb18:	18c3      	adds	r3, r0, r3
1000eb1a:	6013      	str	r3, [r2, #0]
1000eb1c:	4a09      	ldr	r2, [pc, #36]	; (1000eb44 <db_init+0x38>)
1000eb1e:	1841      	adds	r1, r0, r1
1000eb20:	6013      	str	r3, [r2, #0]
1000eb22:	2303      	movs	r3, #3
1000eb24:	2200      	movs	r2, #0
1000eb26:	3103      	adds	r1, #3
1000eb28:	4399      	bics	r1, r3
1000eb2a:	4b07      	ldr	r3, [pc, #28]	; (1000eb48 <db_init+0x3c>)
1000eb2c:	3904      	subs	r1, #4
1000eb2e:	6019      	str	r1, [r3, #0]
1000eb30:	4b06      	ldr	r3, [pc, #24]	; (1000eb4c <db_init+0x40>)
1000eb32:	601a      	str	r2, [r3, #0]
1000eb34:	4770      	bx	lr
1000eb36:	46c0      	nop			; (mov r8, r8)
1000eb38:	10019944 	.word	0x10019944
1000eb3c:	10019940 	.word	0x10019940
1000eb40:	1001992c 	.word	0x1001992c
1000eb44:	10019938 	.word	0x10019938
1000eb48:	10019934 	.word	0x10019934
1000eb4c:	1001993c 	.word	0x1001993c

1000eb50 <at_ble_primary_service_define>:
1000eb50:	b530      	push	{r4, r5, lr}
1000eb52:	b085      	sub	sp, #20
1000eb54:	ac08      	add	r4, sp, #32
1000eb56:	cc20      	ldmia	r4!, {r5}
1000eb58:	8824      	ldrh	r4, [r4, #0]
1000eb5a:	9500      	str	r5, [sp, #0]
1000eb5c:	9401      	str	r4, [sp, #4]
1000eb5e:	2401      	movs	r4, #1
1000eb60:	9402      	str	r4, [sp, #8]
1000eb62:	4c02      	ldr	r4, [pc, #8]	; (1000eb6c <at_ble_primary_service_define+0x1c>)
1000eb64:	47a0      	blx	r4
1000eb66:	b005      	add	sp, #20
1000eb68:	bd30      	pop	{r4, r5, pc}
1000eb6a:	46c0      	nop			; (mov r8, r8)
1000eb6c:	1000e715 	.word	0x1000e715

1000eb70 <at_ble_characteristic_value_set>:
1000eb70:	b570      	push	{r4, r5, r6, lr}
1000eb72:	4b0b      	ldr	r3, [pc, #44]	; (1000eba0 <at_ble_characteristic_value_set+0x30>)
1000eb74:	1c06      	adds	r6, r0, #0
1000eb76:	1c0c      	adds	r4, r1, #0
1000eb78:	1c15      	adds	r5, r2, #0
1000eb7a:	4798      	blx	r3
1000eb7c:	2800      	cmp	r0, #0
1000eb7e:	d008      	beq.n	1000eb92 <at_ble_characteristic_value_set+0x22>
1000eb80:	6880      	ldr	r0, [r0, #8]
1000eb82:	2800      	cmp	r0, #0
1000eb84:	d005      	beq.n	1000eb92 <at_ble_characteristic_value_set+0x22>
1000eb86:	1c21      	adds	r1, r4, #0
1000eb88:	1c2a      	adds	r2, r5, #0
1000eb8a:	4b06      	ldr	r3, [pc, #24]	; (1000eba4 <at_ble_characteristic_value_set+0x34>)
1000eb8c:	4798      	blx	r3
1000eb8e:	2000      	movs	r0, #0
1000eb90:	e004      	b.n	1000eb9c <at_ble_characteristic_value_set+0x2c>
1000eb92:	1c30      	adds	r0, r6, #0
1000eb94:	1c29      	adds	r1, r5, #0
1000eb96:	1c22      	adds	r2, r4, #0
1000eb98:	4b03      	ldr	r3, [pc, #12]	; (1000eba8 <at_ble_characteristic_value_set+0x38>)
1000eb9a:	4798      	blx	r3
1000eb9c:	bd70      	pop	{r4, r5, r6, pc}
1000eb9e:	46c0      	nop			; (mov r8, r8)
1000eba0:	1000e47d 	.word	0x1000e47d
1000eba4:	10011c57 	.word	0x10011c57
1000eba8:	10010859 	.word	0x10010859

1000ebac <at_ble_characteristic_value_get>:
1000ebac:	b570      	push	{r4, r5, r6, lr}
1000ebae:	4b0c      	ldr	r3, [pc, #48]	; (1000ebe0 <at_ble_characteristic_value_get+0x34>)
1000ebb0:	1c06      	adds	r6, r0, #0
1000ebb2:	1c0c      	adds	r4, r1, #0
1000ebb4:	1c15      	adds	r5, r2, #0
1000ebb6:	4798      	blx	r3
1000ebb8:	2800      	cmp	r0, #0
1000ebba:	d00b      	beq.n	1000ebd4 <at_ble_characteristic_value_get+0x28>
1000ebbc:	6883      	ldr	r3, [r0, #8]
1000ebbe:	2b00      	cmp	r3, #0
1000ebc0:	d008      	beq.n	1000ebd4 <at_ble_characteristic_value_get+0x28>
1000ebc2:	8883      	ldrh	r3, [r0, #4]
1000ebc4:	802b      	strh	r3, [r5, #0]
1000ebc6:	8882      	ldrh	r2, [r0, #4]
1000ebc8:	6881      	ldr	r1, [r0, #8]
1000ebca:	4b06      	ldr	r3, [pc, #24]	; (1000ebe4 <at_ble_characteristic_value_get+0x38>)
1000ebcc:	1c20      	adds	r0, r4, #0
1000ebce:	4798      	blx	r3
1000ebd0:	2000      	movs	r0, #0
1000ebd2:	e004      	b.n	1000ebde <at_ble_characteristic_value_get+0x32>
1000ebd4:	1c30      	adds	r0, r6, #0
1000ebd6:	1c29      	adds	r1, r5, #0
1000ebd8:	1c22      	adds	r2, r4, #0
1000ebda:	4b03      	ldr	r3, [pc, #12]	; (1000ebe8 <at_ble_characteristic_value_get+0x3c>)
1000ebdc:	4798      	blx	r3
1000ebde:	bd70      	pop	{r4, r5, r6, pc}
1000ebe0:	1000e47d 	.word	0x1000e47d
1000ebe4:	10011c57 	.word	0x10011c57
1000ebe8:	100108e5 	.word	0x100108e5

1000ebec <at_ble_write_authorize_reply>:
1000ebec:	b5f0      	push	{r4, r5, r6, r7, lr}
1000ebee:	b085      	sub	sp, #20
1000ebf0:	1c04      	adds	r4, r0, #0
1000ebf2:	9101      	str	r1, [sp, #4]
1000ebf4:	2900      	cmp	r1, #0
1000ebf6:	d128      	bne.n	1000ec4a <at_ble_write_authorize_reply+0x5e>
1000ebf8:	8843      	ldrh	r3, [r0, #2]
1000ebfa:	1c27      	adds	r7, r4, #0
1000ebfc:	9300      	str	r3, [sp, #0]
1000ebfe:	1c18      	adds	r0, r3, #0
1000ec00:	4b16      	ldr	r3, [pc, #88]	; (1000ec5c <at_ble_write_authorize_reply+0x70>)
1000ec02:	4798      	blx	r3
1000ec04:	3708      	adds	r7, #8
1000ec06:	2800      	cmp	r0, #0
1000ec08:	d009      	beq.n	1000ec1e <at_ble_write_authorize_reply+0x32>
1000ec0a:	6880      	ldr	r0, [r0, #8]
1000ec0c:	2800      	cmp	r0, #0
1000ec0e:	d006      	beq.n	1000ec1e <at_ble_write_authorize_reply+0x32>
1000ec10:	88a3      	ldrh	r3, [r4, #4]
1000ec12:	88e2      	ldrh	r2, [r4, #6]
1000ec14:	18c0      	adds	r0, r0, r3
1000ec16:	1c39      	adds	r1, r7, #0
1000ec18:	4b11      	ldr	r3, [pc, #68]	; (1000ec60 <at_ble_write_authorize_reply+0x74>)
1000ec1a:	4798      	blx	r3
1000ec1c:	e015      	b.n	1000ec4a <at_ble_write_authorize_reply+0x5e>
1000ec1e:	ab02      	add	r3, sp, #8
1000ec20:	1d9e      	adds	r6, r3, #6
1000ec22:	2300      	movs	r3, #0
1000ec24:	4d0f      	ldr	r5, [pc, #60]	; (1000ec64 <at_ble_write_authorize_reply+0x78>)
1000ec26:	8033      	strh	r3, [r6, #0]
1000ec28:	6829      	ldr	r1, [r5, #0]
1000ec2a:	1c32      	adds	r2, r6, #0
1000ec2c:	4b0e      	ldr	r3, [pc, #56]	; (1000ec68 <at_ble_write_authorize_reply+0x7c>)
1000ec2e:	9800      	ldr	r0, [sp, #0]
1000ec30:	4798      	blx	r3
1000ec32:	682b      	ldr	r3, [r5, #0]
1000ec34:	88a0      	ldrh	r0, [r4, #4]
1000ec36:	88e2      	ldrh	r2, [r4, #6]
1000ec38:	1818      	adds	r0, r3, r0
1000ec3a:	1c39      	adds	r1, r7, #0
1000ec3c:	4b08      	ldr	r3, [pc, #32]	; (1000ec60 <at_ble_write_authorize_reply+0x74>)
1000ec3e:	4798      	blx	r3
1000ec40:	8860      	ldrh	r0, [r4, #2]
1000ec42:	8832      	ldrh	r2, [r6, #0]
1000ec44:	6829      	ldr	r1, [r5, #0]
1000ec46:	4b09      	ldr	r3, [pc, #36]	; (1000ec6c <at_ble_write_authorize_reply+0x80>)
1000ec48:	4798      	blx	r3
1000ec4a:	8860      	ldrh	r0, [r4, #2]
1000ec4c:	8821      	ldrh	r1, [r4, #0]
1000ec4e:	9a01      	ldr	r2, [sp, #4]
1000ec50:	4b07      	ldr	r3, [pc, #28]	; (1000ec70 <at_ble_write_authorize_reply+0x84>)
1000ec52:	4798      	blx	r3
1000ec54:	2000      	movs	r0, #0
1000ec56:	b005      	add	sp, #20
1000ec58:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000ec5a:	46c0      	nop			; (mov r8, r8)
1000ec5c:	1000e47d 	.word	0x1000e47d
1000ec60:	10011c57 	.word	0x10011c57
1000ec64:	10017e74 	.word	0x10017e74
1000ec68:	1000ebad 	.word	0x1000ebad
1000ec6c:	1000eb71 	.word	0x1000eb71
1000ec70:	100103d5 	.word	0x100103d5

1000ec74 <gatts_handle_read_req>:
1000ec74:	b538      	push	{r3, r4, r5, lr}
1000ec76:	1c0c      	adds	r4, r1, #0
1000ec78:	4b07      	ldr	r3, [pc, #28]	; (1000ec98 <gatts_handle_read_req+0x24>)
1000ec7a:	4798      	blx	r3
1000ec7c:	8865      	ldrh	r5, [r4, #2]
1000ec7e:	4b07      	ldr	r3, [pc, #28]	; (1000ec9c <gatts_handle_read_req+0x28>)
1000ec80:	1c28      	adds	r0, r5, #0
1000ec82:	4798      	blx	r3
1000ec84:	7883      	ldrb	r3, [r0, #2]
1000ec86:	2026      	movs	r0, #38	; 0x26
1000ec88:	07db      	lsls	r3, r3, #31
1000ec8a:	d404      	bmi.n	1000ec96 <gatts_handle_read_req+0x22>
1000ec8c:	8820      	ldrh	r0, [r4, #0]
1000ec8e:	1c29      	adds	r1, r5, #0
1000ec90:	4b03      	ldr	r3, [pc, #12]	; (1000eca0 <gatts_handle_read_req+0x2c>)
1000ec92:	4798      	blx	r3
1000ec94:	203b      	movs	r0, #59	; 0x3b
1000ec96:	bd38      	pop	{r3, r4, r5, pc}
1000ec98:	10010319 	.word	0x10010319
1000ec9c:	1000e47d 	.word	0x1000e47d
1000eca0:	1000e6e5 	.word	0x1000e6e5

1000eca4 <gatts_handle_att_info_req>:
1000eca4:	b538      	push	{r3, r4, r5, lr}
1000eca6:	1c0d      	adds	r5, r1, #0
1000eca8:	4b0a      	ldr	r3, [pc, #40]	; (1000ecd4 <gatts_handle_att_info_req+0x30>)
1000ecaa:	1c14      	adds	r4, r2, #0
1000ecac:	4798      	blx	r3
1000ecae:	882d      	ldrh	r5, [r5, #0]
1000ecb0:	4b09      	ldr	r3, [pc, #36]	; (1000ecd8 <gatts_handle_att_info_req+0x34>)
1000ecb2:	1c28      	adds	r0, r5, #0
1000ecb4:	4798      	blx	r3
1000ecb6:	0a22      	lsrs	r2, r4, #8
1000ecb8:	1c03      	adds	r3, r0, #0
1000ecba:	4c08      	ldr	r4, [pc, #32]	; (1000ecdc <gatts_handle_att_info_req+0x38>)
1000ecbc:	b291      	uxth	r1, r2
1000ecbe:	2800      	cmp	r0, #0
1000ecc0:	d003      	beq.n	1000ecca <gatts_handle_att_info_req+0x26>
1000ecc2:	8882      	ldrh	r2, [r0, #4]
1000ecc4:	2300      	movs	r3, #0
1000ecc6:	1c28      	adds	r0, r5, #0
1000ecc8:	e001      	b.n	1000ecce <gatts_handle_att_info_req+0x2a>
1000ecca:	1c28      	adds	r0, r5, #0
1000eccc:	2201      	movs	r2, #1
1000ecce:	47a0      	blx	r4
1000ecd0:	203b      	movs	r0, #59	; 0x3b
1000ecd2:	bd38      	pop	{r3, r4, r5, pc}
1000ecd4:	1001035d 	.word	0x1001035d
1000ecd8:	1000e47d 	.word	0x1000e47d
1000ecdc:	10010419 	.word	0x10010419

1000ece0 <gatts_handle_write_req>:
1000ece0:	b510      	push	{r4, lr}
1000ece2:	1c14      	adds	r4, r2, #0
1000ece4:	4b07      	ldr	r3, [pc, #28]	; (1000ed04 <gatts_handle_write_req+0x24>)
1000ece6:	4798      	blx	r3
1000ece8:	4b07      	ldr	r3, [pc, #28]	; (1000ed08 <gatts_handle_write_req+0x28>)
1000ecea:	8860      	ldrh	r0, [r4, #2]
1000ecec:	4798      	blx	r3
1000ecee:	2302      	movs	r3, #2
1000ecf0:	7881      	ldrb	r1, [r0, #2]
1000ecf2:	2022      	movs	r0, #34	; 0x22
1000ecf4:	4019      	ands	r1, r3
1000ecf6:	d103      	bne.n	1000ed00 <gatts_handle_write_req+0x20>
1000ecf8:	1c20      	adds	r0, r4, #0
1000ecfa:	4b04      	ldr	r3, [pc, #16]	; (1000ed0c <gatts_handle_write_req+0x2c>)
1000ecfc:	4798      	blx	r3
1000ecfe:	201f      	movs	r0, #31
1000ed00:	bd10      	pop	{r4, pc}
1000ed02:	46c0      	nop			; (mov r8, r8)
1000ed04:	10010325 	.word	0x10010325
1000ed08:	1000e47d 	.word	0x1000e47d
1000ed0c:	1000ebed 	.word	0x1000ebed

1000ed10 <init_l2cc_task_module>:
1000ed10:	220a      	movs	r2, #10
1000ed12:	4b01      	ldr	r3, [pc, #4]	; (1000ed18 <init_l2cc_task_module+0x8>)
1000ed14:	701a      	strb	r2, [r3, #0]
1000ed16:	4770      	bx	lr
1000ed18:	10017e70 	.word	0x10017e70

1000ed1c <l2cc_data_send_rsp_handler>:
1000ed1c:	b510      	push	{r4, lr}
1000ed1e:	7802      	ldrb	r2, [r0, #0]
1000ed20:	700a      	strb	r2, [r1, #0]
1000ed22:	7883      	ldrb	r3, [r0, #2]
1000ed24:	7844      	ldrb	r4, [r0, #1]
1000ed26:	021b      	lsls	r3, r3, #8
1000ed28:	4323      	orrs	r3, r4
1000ed2a:	804b      	strh	r3, [r1, #2]
1000ed2c:	7903      	ldrb	r3, [r0, #4]
1000ed2e:	78c0      	ldrb	r0, [r0, #3]
1000ed30:	021b      	lsls	r3, r3, #8
1000ed32:	4303      	orrs	r3, r0
1000ed34:	808b      	strh	r3, [r1, #4]
1000ed36:	2a00      	cmp	r2, #0
1000ed38:	d103      	bne.n	1000ed42 <l2cc_data_send_rsp_handler+0x26>
1000ed3a:	4a02      	ldr	r2, [pc, #8]	; (1000ed44 <l2cc_data_send_rsp_handler+0x28>)
1000ed3c:	7813      	ldrb	r3, [r2, #0]
1000ed3e:	3301      	adds	r3, #1
1000ed40:	7013      	strb	r3, [r2, #0]
1000ed42:	bd10      	pop	{r4, pc}
1000ed44:	10017e70 	.word	0x10017e70

1000ed48 <l2cc_data_received_handler>:
1000ed48:	b508      	push	{r3, lr}
1000ed4a:	1c03      	adds	r3, r0, #0
1000ed4c:	7842      	ldrb	r2, [r0, #1]
1000ed4e:	7800      	ldrb	r0, [r0, #0]
1000ed50:	0212      	lsls	r2, r2, #8
1000ed52:	4302      	orrs	r2, r0
1000ed54:	800a      	strh	r2, [r1, #0]
1000ed56:	78da      	ldrb	r2, [r3, #3]
1000ed58:	7898      	ldrb	r0, [r3, #2]
1000ed5a:	0212      	lsls	r2, r2, #8
1000ed5c:	4302      	orrs	r2, r0
1000ed5e:	804a      	strh	r2, [r1, #2]
1000ed60:	795a      	ldrb	r2, [r3, #5]
1000ed62:	7918      	ldrb	r0, [r3, #4]
1000ed64:	0212      	lsls	r2, r2, #8
1000ed66:	4302      	orrs	r2, r0
1000ed68:	808a      	strh	r2, [r1, #4]
1000ed6a:	1d88      	adds	r0, r1, #6
1000ed6c:	1d99      	adds	r1, r3, #6
1000ed6e:	4b01      	ldr	r3, [pc, #4]	; (1000ed74 <l2cc_data_received_handler+0x2c>)
1000ed70:	4798      	blx	r3
1000ed72:	bd08      	pop	{r3, pc}
1000ed74:	10011c57 	.word	0x10011c57

1000ed78 <at_ble_authenticate>:
1000ed78:	b5f0      	push	{r4, r5, r6, r7, lr}
1000ed7a:	1c0c      	adds	r4, r1, #0
1000ed7c:	211f      	movs	r1, #31
1000ed7e:	b08b      	sub	sp, #44	; 0x2c
1000ed80:	9307      	str	r3, [sp, #28]
1000ed82:	ab02      	add	r3, sp, #8
1000ed84:	18c9      	adds	r1, r1, r3
1000ed86:	230f      	movs	r3, #15
1000ed88:	700b      	strb	r3, [r1, #0]
1000ed8a:	4b40      	ldr	r3, [pc, #256]	; (1000ee8c <at_ble_authenticate+0x114>)
1000ed8c:	1c05      	adds	r5, r0, #0
1000ed8e:	1c16      	adds	r6, r2, #0
1000ed90:	4798      	blx	r3
1000ed92:	1c07      	adds	r7, r0, #0
1000ed94:	2001      	movs	r0, #1
1000ed96:	2f07      	cmp	r7, #7
1000ed98:	d875      	bhi.n	1000ee86 <at_ble_authenticate+0x10e>
1000ed9a:	2c00      	cmp	r4, #0
1000ed9c:	d113      	bne.n	1000edc6 <at_ble_authenticate+0x4e>
1000ed9e:	2312      	movs	r3, #18
1000eda0:	435f      	muls	r7, r3
1000eda2:	4b3b      	ldr	r3, [pc, #236]	; (1000ee90 <at_ble_authenticate+0x118>)
1000eda4:	5cfb      	ldrb	r3, [r7, r3]
1000eda6:	4283      	cmp	r3, r0
1000eda8:	d001      	beq.n	1000edae <at_ble_authenticate+0x36>
1000edaa:	20cf      	movs	r0, #207	; 0xcf
1000edac:	e06b      	b.n	1000ee86 <at_ble_authenticate+0x10e>
1000edae:	9504      	str	r5, [sp, #16]
1000edb0:	9400      	str	r4, [sp, #0]
1000edb2:	9401      	str	r4, [sp, #4]
1000edb4:	9402      	str	r4, [sp, #8]
1000edb6:	9403      	str	r4, [sp, #12]
1000edb8:	1c20      	adds	r0, r4, #0
1000edba:	1c21      	adds	r1, r4, #0
1000edbc:	1c22      	adds	r2, r4, #0
1000edbe:	1c23      	adds	r3, r4, #0
1000edc0:	4d34      	ldr	r5, [pc, #208]	; (1000ee94 <at_ble_authenticate+0x11c>)
1000edc2:	47a8      	blx	r5
1000edc4:	e05e      	b.n	1000ee84 <at_ble_authenticate+0x10c>
1000edc6:	7922      	ldrb	r2, [r4, #4]
1000edc8:	2a06      	cmp	r2, #6
1000edca:	d9ee      	bls.n	1000edaa <at_ble_authenticate+0x32>
1000edcc:	7963      	ldrb	r3, [r4, #5]
1000edce:	2b10      	cmp	r3, #16
1000edd0:	d8eb      	bhi.n	1000edaa <at_ble_authenticate+0x32>
1000edd2:	429a      	cmp	r2, r3
1000edd4:	d8e9      	bhi.n	1000edaa <at_ble_authenticate+0x32>
1000edd6:	7a23      	ldrb	r3, [r4, #8]
1000edd8:	2b04      	cmp	r3, #4
1000edda:	d8e6      	bhi.n	1000edaa <at_ble_authenticate+0x32>
1000eddc:	79a3      	ldrb	r3, [r4, #6]
1000edde:	2b07      	cmp	r3, #7
1000ede0:	d8e3      	bhi.n	1000edaa <at_ble_authenticate+0x32>
1000ede2:	79e3      	ldrb	r3, [r4, #7]
1000ede4:	2b07      	cmp	r3, #7
1000ede6:	d8e0      	bhi.n	1000edaa <at_ble_authenticate+0x32>
1000ede8:	78a3      	ldrb	r3, [r4, #2]
1000edea:	2b00      	cmp	r3, #0
1000edec:	d006      	beq.n	1000edfc <at_ble_authenticate+0x84>
1000edee:	2e00      	cmp	r6, #0
1000edf0:	d0db      	beq.n	1000edaa <at_ble_authenticate+0x32>
1000edf2:	4829      	ldr	r0, [pc, #164]	; (1000ee98 <at_ble_authenticate+0x120>)
1000edf4:	1c31      	adds	r1, r6, #0
1000edf6:	221c      	movs	r2, #28
1000edf8:	4b28      	ldr	r3, [pc, #160]	; (1000ee9c <at_ble_authenticate+0x124>)
1000edfa:	4798      	blx	r3
1000edfc:	9b07      	ldr	r3, [sp, #28]
1000edfe:	2b00      	cmp	r3, #0
1000ee00:	d005      	beq.n	1000ee0e <at_ble_authenticate+0x96>
1000ee02:	4827      	ldr	r0, [pc, #156]	; (1000eea0 <at_ble_authenticate+0x128>)
1000ee04:	1c19      	adds	r1, r3, #0
1000ee06:	309a      	adds	r0, #154	; 0x9a
1000ee08:	2210      	movs	r2, #16
1000ee0a:	4b24      	ldr	r3, [pc, #144]	; (1000ee9c <at_ble_authenticate+0x124>)
1000ee0c:	4798      	blx	r3
1000ee0e:	7863      	ldrb	r3, [r4, #1]
1000ee10:	78a2      	ldrb	r2, [r4, #2]
1000ee12:	009b      	lsls	r3, r3, #2
1000ee14:	4313      	orrs	r3, r2
1000ee16:	2212      	movs	r2, #18
1000ee18:	4357      	muls	r7, r2
1000ee1a:	4a1d      	ldr	r2, [pc, #116]	; (1000ee90 <at_ble_authenticate+0x118>)
1000ee1c:	b2db      	uxtb	r3, r3
1000ee1e:	5cba      	ldrb	r2, [r7, r2]
1000ee20:	2a00      	cmp	r2, #0
1000ee22:	d116      	bne.n	1000ee52 <at_ble_authenticate+0xda>
1000ee24:	79a0      	ldrb	r0, [r4, #6]
1000ee26:	0742      	lsls	r2, r0, #29
1000ee28:	d502      	bpl.n	1000ee30 <at_ble_authenticate+0xb8>
1000ee2a:	9a07      	ldr	r2, [sp, #28]
1000ee2c:	2a00      	cmp	r2, #0
1000ee2e:	d0bc      	beq.n	1000edaa <at_ble_authenticate+0x32>
1000ee30:	07c2      	lsls	r2, r0, #31
1000ee32:	d501      	bpl.n	1000ee38 <at_ble_authenticate+0xc0>
1000ee34:	2e00      	cmp	r6, #0
1000ee36:	d0b8      	beq.n	1000edaa <at_ble_authenticate+0x32>
1000ee38:	7966      	ldrb	r6, [r4, #5]
1000ee3a:	7821      	ldrb	r1, [r4, #0]
1000ee3c:	78e2      	ldrb	r2, [r4, #3]
1000ee3e:	9600      	str	r6, [sp, #0]
1000ee40:	9001      	str	r0, [sp, #4]
1000ee42:	79e0      	ldrb	r0, [r4, #7]
1000ee44:	9002      	str	r0, [sp, #8]
1000ee46:	7a20      	ldrb	r0, [r4, #8]
1000ee48:	4c16      	ldr	r4, [pc, #88]	; (1000eea4 <at_ble_authenticate+0x12c>)
1000ee4a:	9003      	str	r0, [sp, #12]
1000ee4c:	1c28      	adds	r0, r5, #0
1000ee4e:	47a0      	blx	r4
1000ee50:	e018      	b.n	1000ee84 <at_ble_authenticate+0x10c>
1000ee52:	2a01      	cmp	r2, #1
1000ee54:	d1a9      	bne.n	1000edaa <at_ble_authenticate+0x32>
1000ee56:	79e0      	ldrb	r0, [r4, #7]
1000ee58:	0742      	lsls	r2, r0, #29
1000ee5a:	d502      	bpl.n	1000ee62 <at_ble_authenticate+0xea>
1000ee5c:	9a07      	ldr	r2, [sp, #28]
1000ee5e:	2a00      	cmp	r2, #0
1000ee60:	d0a3      	beq.n	1000edaa <at_ble_authenticate+0x32>
1000ee62:	07c2      	lsls	r2, r0, #31
1000ee64:	d501      	bpl.n	1000ee6a <at_ble_authenticate+0xf2>
1000ee66:	2e00      	cmp	r6, #0
1000ee68:	d09f      	beq.n	1000edaa <at_ble_authenticate+0x32>
1000ee6a:	7966      	ldrb	r6, [r4, #5]
1000ee6c:	7821      	ldrb	r1, [r4, #0]
1000ee6e:	78e2      	ldrb	r2, [r4, #3]
1000ee70:	9600      	str	r6, [sp, #0]
1000ee72:	79a6      	ldrb	r6, [r4, #6]
1000ee74:	9002      	str	r0, [sp, #8]
1000ee76:	9601      	str	r6, [sp, #4]
1000ee78:	7a20      	ldrb	r0, [r4, #8]
1000ee7a:	9504      	str	r5, [sp, #16]
1000ee7c:	9003      	str	r0, [sp, #12]
1000ee7e:	4c05      	ldr	r4, [pc, #20]	; (1000ee94 <at_ble_authenticate+0x11c>)
1000ee80:	2001      	movs	r0, #1
1000ee82:	47a0      	blx	r4
1000ee84:	2000      	movs	r0, #0
1000ee86:	b00b      	add	sp, #44	; 0x2c
1000ee88:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000ee8a:	46c0      	nop			; (mov r8, r8)
1000ee8c:	1000f279 	.word	0x1000f279
1000ee90:	1001a8ca 	.word	0x1001a8ca
1000ee94:	1000f7e9 	.word	0x1000f7e9
1000ee98:	1001a9d8 	.word	0x1001a9d8
1000ee9c:	10011c57 	.word	0x10011c57
1000eea0:	1001a95a 	.word	0x1001a95a
1000eea4:	1000f5c9 	.word	0x1000f5c9

1000eea8 <at_ble_pair_key_reply>:
1000eea8:	b5f0      	push	{r4, r5, r6, r7, lr}
1000eeaa:	b085      	sub	sp, #20
1000eeac:	1c05      	adds	r5, r0, #0
1000eeae:	1c0c      	adds	r4, r1, #0
1000eeb0:	1c16      	adds	r6, r2, #0
1000eeb2:	2100      	movs	r1, #0
1000eeb4:	4668      	mov	r0, sp
1000eeb6:	2210      	movs	r2, #16
1000eeb8:	4b18      	ldr	r3, [pc, #96]	; (1000ef1c <at_ble_pair_key_reply+0x74>)
1000eeba:	4798      	blx	r3
1000eebc:	2101      	movs	r1, #1
1000eebe:	2e00      	cmp	r6, #0
1000eec0:	d101      	bne.n	1000eec6 <at_ble_pair_key_reply+0x1e>
1000eec2:	1c31      	adds	r1, r6, #0
1000eec4:	466e      	mov	r6, sp
1000eec6:	2c00      	cmp	r4, #0
1000eec8:	d116      	bne.n	1000eef8 <at_ble_pair_key_reply+0x50>
1000eeca:	2701      	movs	r7, #1
1000eecc:	1c23      	adds	r3, r4, #0
1000eece:	1d70      	adds	r0, r6, #5
1000eed0:	3e01      	subs	r6, #1
1000eed2:	7802      	ldrb	r2, [r0, #0]
1000eed4:	3801      	subs	r0, #1
1000eed6:	3a30      	subs	r2, #48	; 0x30
1000eed8:	437a      	muls	r2, r7
1000eeda:	189b      	adds	r3, r3, r2
1000eedc:	220a      	movs	r2, #10
1000eede:	4357      	muls	r7, r2
1000eee0:	42b0      	cmp	r0, r6
1000eee2:	d1f6      	bne.n	1000eed2 <at_ble_pair_key_reply+0x2a>
1000eee4:	466a      	mov	r2, sp
1000eee6:	4668      	mov	r0, sp
1000eee8:	7013      	strb	r3, [r2, #0]
1000eeea:	0a1a      	lsrs	r2, r3, #8
1000eeec:	7042      	strb	r2, [r0, #1]
1000eeee:	0c1a      	lsrs	r2, r3, #16
1000eef0:	0e1b      	lsrs	r3, r3, #24
1000eef2:	7082      	strb	r2, [r0, #2]
1000eef4:	70c3      	strb	r3, [r0, #3]
1000eef6:	e009      	b.n	1000ef0c <at_ble_pair_key_reply+0x64>
1000eef8:	20cf      	movs	r0, #207	; 0xcf
1000eefa:	2c01      	cmp	r4, #1
1000eefc:	d10c      	bne.n	1000ef18 <at_ble_pair_key_reply+0x70>
1000eefe:	2300      	movs	r3, #0
1000ef00:	4668      	mov	r0, sp
1000ef02:	5cf2      	ldrb	r2, [r6, r3]
1000ef04:	54c2      	strb	r2, [r0, r3]
1000ef06:	3301      	adds	r3, #1
1000ef08:	2b10      	cmp	r3, #16
1000ef0a:	d1f9      	bne.n	1000ef00 <at_ble_pair_key_reply+0x58>
1000ef0c:	2004      	movs	r0, #4
1000ef0e:	466a      	mov	r2, sp
1000ef10:	1c2b      	adds	r3, r5, #0
1000ef12:	4c03      	ldr	r4, [pc, #12]	; (1000ef20 <at_ble_pair_key_reply+0x78>)
1000ef14:	47a0      	blx	r4
1000ef16:	2000      	movs	r0, #0
1000ef18:	b005      	add	sp, #20
1000ef1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000ef1c:	10011c69 	.word	0x10011c69
1000ef20:	1000f865 	.word	0x1000f865

1000ef24 <at_ble_send_slave_sec_request>:
1000ef24:	b570      	push	{r4, r5, r6, lr}
1000ef26:	4b0c      	ldr	r3, [pc, #48]	; (1000ef58 <at_ble_send_slave_sec_request+0x34>)
1000ef28:	1c0e      	adds	r6, r1, #0
1000ef2a:	2100      	movs	r1, #0
1000ef2c:	1c05      	adds	r5, r0, #0
1000ef2e:	1c14      	adds	r4, r2, #0
1000ef30:	4798      	blx	r3
1000ef32:	2301      	movs	r3, #1
1000ef34:	2807      	cmp	r0, #7
1000ef36:	d80d      	bhi.n	1000ef54 <at_ble_send_slave_sec_request+0x30>
1000ef38:	3311      	adds	r3, #17
1000ef3a:	4358      	muls	r0, r3
1000ef3c:	4b07      	ldr	r3, [pc, #28]	; (1000ef5c <at_ble_send_slave_sec_request+0x38>)
1000ef3e:	5cc2      	ldrb	r2, [r0, r3]
1000ef40:	23e0      	movs	r3, #224	; 0xe0
1000ef42:	2a01      	cmp	r2, #1
1000ef44:	d106      	bne.n	1000ef54 <at_ble_send_slave_sec_request+0x30>
1000ef46:	00b1      	lsls	r1, r6, #2
1000ef48:	430c      	orrs	r4, r1
1000ef4a:	4b05      	ldr	r3, [pc, #20]	; (1000ef60 <at_ble_send_slave_sec_request+0x3c>)
1000ef4c:	b2e1      	uxtb	r1, r4
1000ef4e:	1c28      	adds	r0, r5, #0
1000ef50:	4798      	blx	r3
1000ef52:	2300      	movs	r3, #0
1000ef54:	1c18      	adds	r0, r3, #0
1000ef56:	bd70      	pop	{r4, r5, r6, pc}
1000ef58:	1000f279 	.word	0x1000f279
1000ef5c:	1001a8ca 	.word	0x1001a8ca
1000ef60:	1000f8b5 	.word	0x1000f8b5

1000ef64 <at_ble_encryption_start>:
1000ef64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000ef66:	23cf      	movs	r3, #207	; 0xcf
1000ef68:	2900      	cmp	r1, #0
1000ef6a:	d02b      	beq.n	1000efc4 <at_ble_encryption_start+0x60>
1000ef6c:	2a05      	cmp	r2, #5
1000ef6e:	d829      	bhi.n	1000efc4 <at_ble_encryption_start+0x60>
1000ef70:	2701      	movs	r7, #1
1000ef72:	1c3d      	adds	r5, r7, #0
1000ef74:	2433      	movs	r4, #51	; 0x33
1000ef76:	4095      	lsls	r5, r2
1000ef78:	4225      	tst	r5, r4
1000ef7a:	d023      	beq.n	1000efc4 <at_ble_encryption_start+0x60>
1000ef7c:	7e8c      	ldrb	r4, [r1, #26]
1000ef7e:	3c07      	subs	r4, #7
1000ef80:	2c09      	cmp	r4, #9
1000ef82:	d81f      	bhi.n	1000efc4 <at_ble_encryption_start+0x60>
1000ef84:	4b10      	ldr	r3, [pc, #64]	; (1000efc8 <at_ble_encryption_start+0x64>)
1000ef86:	1c0c      	adds	r4, r1, #0
1000ef88:	2100      	movs	r1, #0
1000ef8a:	1c15      	adds	r5, r2, #0
1000ef8c:	1c06      	adds	r6, r0, #0
1000ef8e:	4798      	blx	r3
1000ef90:	1c3b      	adds	r3, r7, #0
1000ef92:	2807      	cmp	r0, #7
1000ef94:	d816      	bhi.n	1000efc4 <at_ble_encryption_start+0x60>
1000ef96:	2312      	movs	r3, #18
1000ef98:	4358      	muls	r0, r3
1000ef9a:	4b0c      	ldr	r3, [pc, #48]	; (1000efcc <at_ble_encryption_start+0x68>)
1000ef9c:	5cc7      	ldrb	r7, [r0, r3]
1000ef9e:	23e0      	movs	r3, #224	; 0xe0
1000efa0:	2f00      	cmp	r7, #0
1000efa2:	d10f      	bne.n	1000efc4 <at_ble_encryption_start+0x60>
1000efa4:	1c21      	adds	r1, r4, #0
1000efa6:	221c      	movs	r2, #28
1000efa8:	4b09      	ldr	r3, [pc, #36]	; (1000efd0 <at_ble_encryption_start+0x6c>)
1000efaa:	480a      	ldr	r0, [pc, #40]	; (1000efd4 <at_ble_encryption_start+0x70>)
1000efac:	4798      	blx	r3
1000efae:	1c23      	adds	r3, r4, #0
1000efb0:	7ea1      	ldrb	r1, [r4, #26]
1000efb2:	8a22      	ldrh	r2, [r4, #16]
1000efb4:	3312      	adds	r3, #18
1000efb6:	9100      	str	r1, [sp, #0]
1000efb8:	9501      	str	r5, [sp, #4]
1000efba:	1c21      	adds	r1, r4, #0
1000efbc:	1c30      	adds	r0, r6, #0
1000efbe:	4c06      	ldr	r4, [pc, #24]	; (1000efd8 <at_ble_encryption_start+0x74>)
1000efc0:	47a0      	blx	r4
1000efc2:	1c3b      	adds	r3, r7, #0
1000efc4:	1c18      	adds	r0, r3, #0
1000efc6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000efc8:	1000f279 	.word	0x1000f279
1000efcc:	1001a8ca 	.word	0x1001a8ca
1000efd0:	10011c57 	.word	0x10011c57
1000efd4:	1001a9d8 	.word	0x1001a9d8
1000efd8:	1000f8f5 	.word	0x1000f8f5

1000efdc <at_ble_encryption_request_reply>:
1000efdc:	b573      	push	{r0, r1, r4, r5, r6, lr}
1000efde:	24cf      	movs	r4, #207	; 0xcf
1000efe0:	2b00      	cmp	r3, #0
1000efe2:	d011      	beq.n	1000f008 <at_ble_encryption_request_reply+0x2c>
1000efe4:	2a00      	cmp	r2, #0
1000efe6:	d00a      	beq.n	1000effe <at_ble_encryption_request_reply+0x22>
1000efe8:	2905      	cmp	r1, #5
1000efea:	d80d      	bhi.n	1000f008 <at_ble_encryption_request_reply+0x2c>
1000efec:	2501      	movs	r5, #1
1000efee:	2633      	movs	r6, #51	; 0x33
1000eff0:	408d      	lsls	r5, r1
1000eff2:	4235      	tst	r5, r6
1000eff4:	d008      	beq.n	1000f008 <at_ble_encryption_request_reply+0x2c>
1000eff6:	7e9d      	ldrb	r5, [r3, #26]
1000eff8:	3d07      	subs	r5, #7
1000effa:	2d09      	cmp	r5, #9
1000effc:	d804      	bhi.n	1000f008 <at_ble_encryption_request_reply+0x2c>
1000effe:	7e9c      	ldrb	r4, [r3, #26]
1000f000:	9400      	str	r4, [sp, #0]
1000f002:	4c02      	ldr	r4, [pc, #8]	; (1000f00c <at_ble_encryption_request_reply+0x30>)
1000f004:	47a0      	blx	r4
1000f006:	2400      	movs	r4, #0
1000f008:	1c20      	adds	r0, r4, #0
1000f00a:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
1000f00c:	1000f9b1 	.word	0x1000f9b1

1000f010 <rx_callback>:
1000f010:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000f012:	8883      	ldrh	r3, [r0, #4]
1000f014:	1c01      	adds	r1, r0, #0
1000f016:	9301      	str	r3, [sp, #4]
1000f018:	88c5      	ldrh	r5, [r0, #6]
1000f01a:	8806      	ldrh	r6, [r0, #0]
1000f01c:	2d00      	cmp	r5, #0
1000f01e:	d10f      	bne.n	1000f040 <rx_callback+0x30>
1000f020:	1c19      	adds	r1, r3, #0
1000f022:	1c30      	adds	r0, r6, #0
1000f024:	4b19      	ldr	r3, [pc, #100]	; (1000f08c <rx_callback+0x7c>)
1000f026:	1c2a      	adds	r2, r5, #0
1000f028:	4798      	blx	r3
1000f02a:	1e03      	subs	r3, r0, #0
1000f02c:	d105      	bne.n	1000f03a <rx_callback+0x2a>
1000f02e:	1c30      	adds	r0, r6, #0
1000f030:	9901      	ldr	r1, [sp, #4]
1000f032:	1c1a      	adds	r2, r3, #0
1000f034:	4c16      	ldr	r4, [pc, #88]	; (1000f090 <rx_callback+0x80>)
1000f036:	47a0      	blx	r4
1000f038:	e027      	b.n	1000f08a <rx_callback+0x7a>
1000f03a:	4b16      	ldr	r3, [pc, #88]	; (1000f094 <rx_callback+0x84>)
1000f03c:	4798      	blx	r3
1000f03e:	e024      	b.n	1000f08a <rx_callback+0x7a>
1000f040:	4c15      	ldr	r4, [pc, #84]	; (1000f098 <rx_callback+0x88>)
1000f042:	4a16      	ldr	r2, [pc, #88]	; (1000f09c <rx_callback+0x8c>)
1000f044:	6823      	ldr	r3, [r4, #0]
1000f046:	6812      	ldr	r2, [r2, #0]
1000f048:	18eb      	adds	r3, r5, r3
1000f04a:	4293      	cmp	r3, r2
1000f04c:	d901      	bls.n	1000f052 <rx_callback+0x42>
1000f04e:	2300      	movs	r3, #0
1000f050:	6023      	str	r3, [r4, #0]
1000f052:	4f13      	ldr	r7, [pc, #76]	; (1000f0a0 <rx_callback+0x90>)
1000f054:	6822      	ldr	r2, [r4, #0]
1000f056:	683b      	ldr	r3, [r7, #0]
1000f058:	3108      	adds	r1, #8
1000f05a:	1898      	adds	r0, r3, r2
1000f05c:	1c2a      	adds	r2, r5, #0
1000f05e:	4b11      	ldr	r3, [pc, #68]	; (1000f0a4 <rx_callback+0x94>)
1000f060:	4798      	blx	r3
1000f062:	683b      	ldr	r3, [r7, #0]
1000f064:	6822      	ldr	r2, [r4, #0]
1000f066:	1c30      	adds	r0, r6, #0
1000f068:	189a      	adds	r2, r3, r2
1000f06a:	9901      	ldr	r1, [sp, #4]
1000f06c:	4b07      	ldr	r3, [pc, #28]	; (1000f08c <rx_callback+0x7c>)
1000f06e:	4798      	blx	r3
1000f070:	2800      	cmp	r0, #0
1000f072:	d1e2      	bne.n	1000f03a <rx_callback+0x2a>
1000f074:	6823      	ldr	r3, [r4, #0]
1000f076:	683a      	ldr	r2, [r7, #0]
1000f078:	1c30      	adds	r0, r6, #0
1000f07a:	18d2      	adds	r2, r2, r3
1000f07c:	9901      	ldr	r1, [sp, #4]
1000f07e:	1c2b      	adds	r3, r5, #0
1000f080:	4e03      	ldr	r6, [pc, #12]	; (1000f090 <rx_callback+0x80>)
1000f082:	47b0      	blx	r6
1000f084:	6823      	ldr	r3, [r4, #0]
1000f086:	18ed      	adds	r5, r5, r3
1000f088:	6025      	str	r5, [r4, #0]
1000f08a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000f08c:	1000d719 	.word	0x1000d719
1000f090:	1000d691 	.word	0x1000d691
1000f094:	1000d2d5 	.word	0x1000d2d5
1000f098:	1001aa34 	.word	0x1001aa34
1000f09c:	1001994c 	.word	0x1001994c
1000f0a0:	10019948 	.word	0x10019948
1000f0a4:	10011c57 	.word	0x10011c57

1000f0a8 <interface_send>:
1000f0a8:	b508      	push	{r3, lr}
1000f0aa:	4b02      	ldr	r3, [pc, #8]	; (1000f0b4 <interface_send+0xc>)
1000f0ac:	4798      	blx	r3
1000f0ae:	2000      	movs	r0, #0
1000f0b0:	bd08      	pop	{r3, pc}
1000f0b2:	46c0      	nop			; (mov r8, r8)
1000f0b4:	1000cfcd 	.word	0x1000cfcd

1000f0b8 <interface_init>:
1000f0b8:	2280      	movs	r2, #128	; 0x80
1000f0ba:	b510      	push	{r4, lr}
1000f0bc:	2100      	movs	r1, #0
1000f0be:	1c04      	adds	r4, r0, #0
1000f0c0:	0092      	lsls	r2, r2, #2
1000f0c2:	4b08      	ldr	r3, [pc, #32]	; (1000f0e4 <interface_init+0x2c>)
1000f0c4:	4808      	ldr	r0, [pc, #32]	; (1000f0e8 <interface_init+0x30>)
1000f0c6:	4798      	blx	r3
1000f0c8:	2200      	movs	r2, #0
1000f0ca:	4b08      	ldr	r3, [pc, #32]	; (1000f0ec <interface_init+0x34>)
1000f0cc:	601a      	str	r2, [r3, #0]
1000f0ce:	4a08      	ldr	r2, [pc, #32]	; (1000f0f0 <interface_init+0x38>)
1000f0d0:	4b08      	ldr	r3, [pc, #32]	; (1000f0f4 <interface_init+0x3c>)
1000f0d2:	601a      	str	r2, [r3, #0]
1000f0d4:	4b08      	ldr	r3, [pc, #32]	; (1000f0f8 <interface_init+0x40>)
1000f0d6:	6922      	ldr	r2, [r4, #16]
1000f0d8:	601a      	str	r2, [r3, #0]
1000f0da:	6962      	ldr	r2, [r4, #20]
1000f0dc:	4b07      	ldr	r3, [pc, #28]	; (1000f0fc <interface_init+0x44>)
1000f0de:	601a      	str	r2, [r3, #0]
1000f0e0:	bd10      	pop	{r4, pc}
1000f0e2:	46c0      	nop			; (mov r8, r8)
1000f0e4:	10011c69 	.word	0x10011c69
1000f0e8:	1001ac38 	.word	0x1001ac38
1000f0ec:	1001aa34 	.word	0x1001aa34
1000f0f0:	1001aa38 	.word	0x1001aa38
1000f0f4:	10017e74 	.word	0x10017e74
1000f0f8:	10019948 	.word	0x10019948
1000f0fc:	1001994c 	.word	0x1001994c

1000f100 <platform_cmd_cmpl_signal>:
1000f100:	2201      	movs	r2, #1
1000f102:	4b01      	ldr	r3, [pc, #4]	; (1000f108 <platform_cmd_cmpl_signal+0x8>)
1000f104:	601a      	str	r2, [r3, #0]
1000f106:	4770      	bx	lr
1000f108:	10019950 	.word	0x10019950

1000f10c <platform_cmd_cmpl_wait>:
1000f10c:	b510      	push	{r4, lr}
1000f10e:	1c04      	adds	r4, r0, #0
1000f110:	4b07      	ldr	r3, [pc, #28]	; (1000f130 <platform_cmd_cmpl_wait+0x24>)
1000f112:	681a      	ldr	r2, [r3, #0]
1000f114:	2a01      	cmp	r2, #1
1000f116:	d003      	beq.n	1000f120 <platform_cmd_cmpl_wait+0x14>
1000f118:	4b06      	ldr	r3, [pc, #24]	; (1000f134 <platform_cmd_cmpl_wait+0x28>)
1000f11a:	2000      	movs	r0, #0
1000f11c:	4798      	blx	r3
1000f11e:	e7f7      	b.n	1000f110 <platform_cmd_cmpl_wait+0x4>
1000f120:	6819      	ldr	r1, [r3, #0]
1000f122:	2901      	cmp	r1, #1
1000f124:	d102      	bne.n	1000f12c <platform_cmd_cmpl_wait+0x20>
1000f126:	2200      	movs	r2, #0
1000f128:	601a      	str	r2, [r3, #0]
1000f12a:	e000      	b.n	1000f12e <platform_cmd_cmpl_wait+0x22>
1000f12c:	7022      	strb	r2, [r4, #0]
1000f12e:	bd10      	pop	{r4, pc}
1000f130:	10019950 	.word	0x10019950
1000f134:	1000d05d 	.word	0x1000d05d

1000f138 <start_timer>:
1000f138:	4770      	bx	lr

1000f13a <stop_timer>:
1000f13a:	4770      	bx	lr

1000f13c <dbg_le_set_bd_addr_req_handler>:
1000f13c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000f13e:	466b      	mov	r3, sp
1000f140:	1dde      	adds	r6, r3, #7
1000f142:	2300      	movs	r3, #0
1000f144:	7033      	strb	r3, [r6, #0]
1000f146:	230f      	movs	r3, #15
1000f148:	4c13      	ldr	r4, [pc, #76]	; (1000f198 <dbg_le_set_bd_addr_req_handler+0x5c>)
1000f14a:	2703      	movs	r7, #3
1000f14c:	7023      	strb	r3, [r4, #0]
1000f14e:	2300      	movs	r3, #0
1000f150:	70e3      	strb	r3, [r4, #3]
1000f152:	4b12      	ldr	r3, [pc, #72]	; (1000f19c <dbg_le_set_bd_addr_req_handler+0x60>)
1000f154:	1c01      	adds	r1, r0, #0
1000f156:	881a      	ldrh	r2, [r3, #0]
1000f158:	881b      	ldrh	r3, [r3, #0]
1000f15a:	7122      	strb	r2, [r4, #4]
1000f15c:	0a1b      	lsrs	r3, r3, #8
1000f15e:	2206      	movs	r2, #6
1000f160:	7163      	strb	r3, [r4, #5]
1000f162:	480f      	ldr	r0, [pc, #60]	; (1000f1a0 <dbg_le_set_bd_addr_req_handler+0x64>)
1000f164:	4b0f      	ldr	r3, [pc, #60]	; (1000f1a4 <dbg_le_set_bd_addr_req_handler+0x68>)
1000f166:	7067      	strb	r7, [r4, #1]
1000f168:	70a7      	strb	r7, [r4, #2]
1000f16a:	4798      	blx	r3
1000f16c:	4d0e      	ldr	r5, [pc, #56]	; (1000f1a8 <dbg_le_set_bd_addr_req_handler+0x6c>)
1000f16e:	4b0f      	ldr	r3, [pc, #60]	; (1000f1ac <dbg_le_set_bd_addr_req_handler+0x70>)
1000f170:	210e      	movs	r1, #14
1000f172:	802b      	strh	r3, [r5, #0]
1000f174:	2306      	movs	r3, #6
1000f176:	71a3      	strb	r3, [r4, #6]
1000f178:	2300      	movs	r3, #0
1000f17a:	1c20      	adds	r0, r4, #0
1000f17c:	71e3      	strb	r3, [r4, #7]
1000f17e:	4b0c      	ldr	r3, [pc, #48]	; (1000f1b0 <dbg_le_set_bd_addr_req_handler+0x74>)
1000f180:	80af      	strh	r7, [r5, #4]
1000f182:	4798      	blx	r3
1000f184:	1c30      	adds	r0, r6, #0
1000f186:	4b0b      	ldr	r3, [pc, #44]	; (1000f1b4 <dbg_le_set_bd_addr_req_handler+0x78>)
1000f188:	4798      	blx	r3
1000f18a:	7833      	ldrb	r3, [r6, #0]
1000f18c:	20e2      	movs	r0, #226	; 0xe2
1000f18e:	2b00      	cmp	r3, #0
1000f190:	d101      	bne.n	1000f196 <dbg_le_set_bd_addr_req_handler+0x5a>
1000f192:	68ab      	ldr	r3, [r5, #8]
1000f194:	7818      	ldrb	r0, [r3, #0]
1000f196:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000f198:	1001ac38 	.word	0x1001ac38
1000f19c:	1001a8c8 	.word	0x1001a8c8
1000f1a0:	1001ac40 	.word	0x1001ac40
1000f1a4:	10011c57 	.word	0x10011c57
1000f1a8:	1001a8bc 	.word	0x1001a8bc
1000f1ac:	00000329 	.word	0x00000329
1000f1b0:	1000f0a9 	.word	0x1000f0a9
1000f1b4:	1000f10d 	.word	0x1000f10d

1000f1b8 <gapc_get_dev_info_cfm.constprop.1>:
1000f1b8:	b538      	push	{r3, r4, r5, lr}
1000f1ba:	230b      	movs	r3, #11
1000f1bc:	4c27      	ldr	r4, [pc, #156]	; (1000f25c <gapc_get_dev_info_cfm.constprop.1+0xa4>)
1000f1be:	7023      	strb	r3, [r4, #0]
1000f1c0:	3303      	adds	r3, #3
1000f1c2:	7063      	strb	r3, [r4, #1]
1000f1c4:	3329      	adds	r3, #41	; 0x29
1000f1c6:	70a3      	strb	r3, [r4, #2]
1000f1c8:	4b25      	ldr	r3, [pc, #148]	; (1000f260 <gapc_get_dev_info_cfm.constprop.1+0xa8>)
1000f1ca:	70e1      	strb	r1, [r4, #3]
1000f1cc:	881a      	ldrh	r2, [r3, #0]
1000f1ce:	881b      	ldrh	r3, [r3, #0]
1000f1d0:	7122      	strb	r2, [r4, #4]
1000f1d2:	0a1b      	lsrs	r3, r3, #8
1000f1d4:	7163      	strb	r3, [r4, #5]
1000f1d6:	2300      	movs	r3, #0
1000f1d8:	7220      	strb	r0, [r4, #8]
1000f1da:	7263      	strb	r3, [r4, #9]
1000f1dc:	2801      	cmp	r0, #1
1000f1de:	d02b      	beq.n	1000f238 <gapc_get_dev_info_cfm.constprop.1+0x80>
1000f1e0:	4298      	cmp	r0, r3
1000f1e2:	d01b      	beq.n	1000f21c <gapc_get_dev_info_cfm.constprop.1+0x64>
1000f1e4:	2802      	cmp	r0, #2
1000f1e6:	d12f      	bne.n	1000f248 <gapc_get_dev_info_cfm.constprop.1+0x90>
1000f1e8:	4b1e      	ldr	r3, [pc, #120]	; (1000f264 <gapc_get_dev_info_cfm.constprop.1+0xac>)
1000f1ea:	2112      	movs	r1, #18
1000f1ec:	1c1a      	adds	r2, r3, #0
1000f1ee:	32ce      	adds	r2, #206	; 0xce
1000f1f0:	8812      	ldrh	r2, [r2, #0]
1000f1f2:	72a2      	strb	r2, [r4, #10]
1000f1f4:	0a12      	lsrs	r2, r2, #8
1000f1f6:	72e2      	strb	r2, [r4, #11]
1000f1f8:	1c1a      	adds	r2, r3, #0
1000f1fa:	32d0      	adds	r2, #208	; 0xd0
1000f1fc:	8812      	ldrh	r2, [r2, #0]
1000f1fe:	7322      	strb	r2, [r4, #12]
1000f200:	0a12      	lsrs	r2, r2, #8
1000f202:	7362      	strb	r2, [r4, #13]
1000f204:	1c1a      	adds	r2, r3, #0
1000f206:	32d2      	adds	r2, #210	; 0xd2
1000f208:	8812      	ldrh	r2, [r2, #0]
1000f20a:	33d4      	adds	r3, #212	; 0xd4
1000f20c:	73a2      	strb	r2, [r4, #14]
1000f20e:	0a12      	lsrs	r2, r2, #8
1000f210:	73e2      	strb	r2, [r4, #15]
1000f212:	881b      	ldrh	r3, [r3, #0]
1000f214:	7423      	strb	r3, [r4, #16]
1000f216:	0a1b      	lsrs	r3, r3, #8
1000f218:	7463      	strb	r3, [r4, #17]
1000f21a:	e016      	b.n	1000f24a <gapc_get_dev_info_cfm.constprop.1+0x92>
1000f21c:	4b11      	ldr	r3, [pc, #68]	; (1000f264 <gapc_get_dev_info_cfm.constprop.1+0xac>)
1000f21e:	4912      	ldr	r1, [pc, #72]	; (1000f268 <gapc_get_dev_info_cfm.constprop.1+0xb0>)
1000f220:	33aa      	adds	r3, #170	; 0xaa
1000f222:	881d      	ldrh	r5, [r3, #0]
1000f224:	4811      	ldr	r0, [pc, #68]	; (1000f26c <gapc_get_dev_info_cfm.constprop.1+0xb4>)
1000f226:	0a2b      	lsrs	r3, r5, #8
1000f228:	72a5      	strb	r5, [r4, #10]
1000f22a:	72e3      	strb	r3, [r4, #11]
1000f22c:	1c2a      	adds	r2, r5, #0
1000f22e:	4b10      	ldr	r3, [pc, #64]	; (1000f270 <gapc_get_dev_info_cfm.constprop.1+0xb8>)
1000f230:	350c      	adds	r5, #12
1000f232:	4798      	blx	r3
1000f234:	b2a9      	uxth	r1, r5
1000f236:	e008      	b.n	1000f24a <gapc_get_dev_info_cfm.constprop.1+0x92>
1000f238:	4b0a      	ldr	r3, [pc, #40]	; (1000f264 <gapc_get_dev_info_cfm.constprop.1+0xac>)
1000f23a:	210c      	movs	r1, #12
1000f23c:	33cc      	adds	r3, #204	; 0xcc
1000f23e:	881b      	ldrh	r3, [r3, #0]
1000f240:	72a3      	strb	r3, [r4, #10]
1000f242:	0a1b      	lsrs	r3, r3, #8
1000f244:	72e3      	strb	r3, [r4, #11]
1000f246:	e000      	b.n	1000f24a <gapc_get_dev_info_cfm.constprop.1+0x92>
1000f248:	210a      	movs	r1, #10
1000f24a:	1c0b      	adds	r3, r1, #0
1000f24c:	3b08      	subs	r3, #8
1000f24e:	71a3      	strb	r3, [r4, #6]
1000f250:	121b      	asrs	r3, r3, #8
1000f252:	71e3      	strb	r3, [r4, #7]
1000f254:	1c20      	adds	r0, r4, #0
1000f256:	4b07      	ldr	r3, [pc, #28]	; (1000f274 <gapc_get_dev_info_cfm.constprop.1+0xbc>)
1000f258:	4798      	blx	r3
1000f25a:	bd38      	pop	{r3, r4, r5, pc}
1000f25c:	1001ac38 	.word	0x1001ac38
1000f260:	1001a8c8 	.word	0x1001a8c8
1000f264:	1001a95a 	.word	0x1001a95a
1000f268:	1001aa06 	.word	0x1001aa06
1000f26c:	1001ac44 	.word	0x1001ac44
1000f270:	10011c57 	.word	0x10011c57
1000f274:	1000f0a9 	.word	0x1000f0a9

1000f278 <check_ConnData_idx_role>:
1000f278:	4b0c      	ldr	r3, [pc, #48]	; (1000f2ac <check_ConnData_idx_role+0x34>)
1000f27a:	b570      	push	{r4, r5, r6, lr}
1000f27c:	1c04      	adds	r4, r0, #0
1000f27e:	2008      	movs	r0, #8
1000f280:	429c      	cmp	r4, r3
1000f282:	d011      	beq.n	1000f2a8 <check_ConnData_idx_role+0x30>
1000f284:	2300      	movs	r3, #0
1000f286:	2212      	movs	r2, #18
1000f288:	435a      	muls	r2, r3
1000f28a:	4d09      	ldr	r5, [pc, #36]	; (1000f2b0 <check_ConnData_idx_role+0x38>)
1000f28c:	b2d8      	uxtb	r0, r3
1000f28e:	1956      	adds	r6, r2, r5
1000f290:	8976      	ldrh	r6, [r6, #10]
1000f292:	42a6      	cmp	r6, r4
1000f294:	d104      	bne.n	1000f2a0 <check_ConnData_idx_role+0x28>
1000f296:	2900      	cmp	r1, #0
1000f298:	d006      	beq.n	1000f2a8 <check_ConnData_idx_role+0x30>
1000f29a:	5d53      	ldrb	r3, [r2, r5]
1000f29c:	700b      	strb	r3, [r1, #0]
1000f29e:	e003      	b.n	1000f2a8 <check_ConnData_idx_role+0x30>
1000f2a0:	3301      	adds	r3, #1
1000f2a2:	2b08      	cmp	r3, #8
1000f2a4:	d1ef      	bne.n	1000f286 <check_ConnData_idx_role+0xe>
1000f2a6:	1c18      	adds	r0, r3, #0
1000f2a8:	bd70      	pop	{r4, r5, r6, pc}
1000f2aa:	46c0      	nop			; (mov r8, r8)
1000f2ac:	0000ffff 	.word	0x0000ffff
1000f2b0:	1001a8ca 	.word	0x1001a8ca

1000f2b4 <check_ConnData_emptyEntry>:
1000f2b4:	2300      	movs	r3, #0
1000f2b6:	2212      	movs	r2, #18
1000f2b8:	435a      	muls	r2, r3
1000f2ba:	4906      	ldr	r1, [pc, #24]	; (1000f2d4 <check_ConnData_emptyEntry+0x20>)
1000f2bc:	b2d8      	uxtb	r0, r3
1000f2be:	1852      	adds	r2, r2, r1
1000f2c0:	8951      	ldrh	r1, [r2, #10]
1000f2c2:	4a05      	ldr	r2, [pc, #20]	; (1000f2d8 <check_ConnData_emptyEntry+0x24>)
1000f2c4:	4291      	cmp	r1, r2
1000f2c6:	d003      	beq.n	1000f2d0 <check_ConnData_emptyEntry+0x1c>
1000f2c8:	3301      	adds	r3, #1
1000f2ca:	2b08      	cmp	r3, #8
1000f2cc:	d1f3      	bne.n	1000f2b6 <check_ConnData_emptyEntry+0x2>
1000f2ce:	1c18      	adds	r0, r3, #0
1000f2d0:	4770      	bx	lr
1000f2d2:	46c0      	nop			; (mov r8, r8)
1000f2d4:	1001a8ca 	.word	0x1001a8ca
1000f2d8:	0000ffff 	.word	0x0000ffff

1000f2dc <gapc_cmp_evt>:
1000f2dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000f2de:	780b      	ldrb	r3, [r1, #0]
1000f2e0:	1c05      	adds	r5, r0, #0
1000f2e2:	1e58      	subs	r0, r3, #1
1000f2e4:	784e      	ldrb	r6, [r1, #1]
1000f2e6:	280f      	cmp	r0, #15
1000f2e8:	d85a      	bhi.n	1000f3a0 <gapc_cmp_evt+0xc4>
1000f2ea:	1c14      	adds	r4, r2, #0
1000f2ec:	f005 f9d0 	bl	10014690 <__gnu_thumb1_case_uqi>
1000f2f0:	5858440a 	.word	0x5858440a
1000f2f4:	4b584444 	.word	0x4b584444
1000f2f8:	0825122d 	.word	0x0825122d
1000f2fc:	3e395858 	.word	0x3e395858
1000f300:	203b      	movs	r0, #59	; 0x3b
1000f302:	e04e      	b.n	1000f3a2 <gapc_cmp_evt+0xc6>
1000f304:	203b      	movs	r0, #59	; 0x3b
1000f306:	2e00      	cmp	r6, #0
1000f308:	d04b      	beq.n	1000f3a2 <gapc_cmp_evt+0xc6>
1000f30a:	0a2d      	lsrs	r5, r5, #8
1000f30c:	8015      	strh	r5, [r2, #0]
1000f30e:	7096      	strb	r6, [r2, #2]
1000f310:	3835      	subs	r0, #53	; 0x35
1000f312:	e046      	b.n	1000f3a2 <gapc_cmp_evt+0xc6>
1000f314:	466b      	mov	r3, sp
1000f316:	1ddf      	adds	r7, r3, #7
1000f318:	2301      	movs	r3, #1
1000f31a:	0a2d      	lsrs	r5, r5, #8
1000f31c:	703b      	strb	r3, [r7, #0]
1000f31e:	1c28      	adds	r0, r5, #0
1000f320:	1c39      	adds	r1, r7, #0
1000f322:	4b20      	ldr	r3, [pc, #128]	; (1000f3a4 <gapc_cmp_evt+0xc8>)
1000f324:	4798      	blx	r3
1000f326:	2807      	cmp	r0, #7
1000f328:	d803      	bhi.n	1000f332 <gapc_cmp_evt+0x56>
1000f32a:	783b      	ldrb	r3, [r7, #0]
1000f32c:	203b      	movs	r0, #59	; 0x3b
1000f32e:	2b00      	cmp	r3, #0
1000f330:	d037      	beq.n	1000f3a2 <gapc_cmp_evt+0xc6>
1000f332:	8065      	strh	r5, [r4, #2]
1000f334:	7126      	strb	r6, [r4, #4]
1000f336:	2009      	movs	r0, #9
1000f338:	e033      	b.n	1000f3a2 <gapc_cmp_evt+0xc6>
1000f33a:	203b      	movs	r0, #59	; 0x3b
1000f33c:	2e00      	cmp	r6, #0
1000f33e:	d030      	beq.n	1000f3a2 <gapc_cmp_evt+0xc6>
1000f340:	0a2d      	lsrs	r5, r5, #8
1000f342:	8015      	strh	r5, [r2, #0]
1000f344:	7096      	strb	r6, [r2, #2]
1000f346:	382d      	subs	r0, #45	; 0x2d
1000f348:	e02b      	b.n	1000f3a2 <gapc_cmp_evt+0xc6>
1000f34a:	203b      	movs	r0, #59	; 0x3b
1000f34c:	2e00      	cmp	r6, #0
1000f34e:	d028      	beq.n	1000f3a2 <gapc_cmp_evt+0xc6>
1000f350:	2300      	movs	r3, #0
1000f352:	0a2d      	lsrs	r5, r5, #8
1000f354:	8015      	strh	r5, [r2, #0]
1000f356:	7096      	strb	r6, [r2, #2]
1000f358:	8093      	strh	r3, [r2, #4]
1000f35a:	80d3      	strh	r3, [r2, #6]
1000f35c:	8113      	strh	r3, [r2, #8]
1000f35e:	3834      	subs	r0, #52	; 0x34
1000f360:	e01f      	b.n	1000f3a2 <gapc_cmp_evt+0xc6>
1000f362:	203b      	movs	r0, #59	; 0x3b
1000f364:	2e00      	cmp	r6, #0
1000f366:	d01c      	beq.n	1000f3a2 <gapc_cmp_evt+0xc6>
1000f368:	7216      	strb	r6, [r2, #8]
1000f36a:	e003      	b.n	1000f374 <gapc_cmp_evt+0x98>
1000f36c:	203b      	movs	r0, #59	; 0x3b
1000f36e:	2e00      	cmp	r6, #0
1000f370:	d017      	beq.n	1000f3a2 <gapc_cmp_evt+0xc6>
1000f372:	7116      	strb	r6, [r2, #4]
1000f374:	3812      	subs	r0, #18
1000f376:	e014      	b.n	1000f3a2 <gapc_cmp_evt+0xc6>
1000f378:	203b      	movs	r0, #59	; 0x3b
1000f37a:	2e00      	cmp	r6, #0
1000f37c:	d011      	beq.n	1000f3a2 <gapc_cmp_evt+0xc6>
1000f37e:	7093      	strb	r3, [r2, #2]
1000f380:	70d6      	strb	r6, [r2, #3]
1000f382:	382a      	subs	r0, #42	; 0x2a
1000f384:	e00d      	b.n	1000f3a2 <gapc_cmp_evt+0xc6>
1000f386:	203b      	movs	r0, #59	; 0x3b
1000f388:	2e00      	cmp	r6, #0
1000f38a:	d00a      	beq.n	1000f3a2 <gapc_cmp_evt+0xc6>
1000f38c:	0a2d      	lsrs	r5, r5, #8
1000f38e:	7016      	strb	r6, [r2, #0]
1000f390:	8055      	strh	r5, [r2, #2]
1000f392:	1d10      	adds	r0, r2, #4
1000f394:	2100      	movs	r1, #0
1000f396:	2205      	movs	r2, #5
1000f398:	4b03      	ldr	r3, [pc, #12]	; (1000f3a8 <gapc_cmp_evt+0xcc>)
1000f39a:	4798      	blx	r3
1000f39c:	2012      	movs	r0, #18
1000f39e:	e000      	b.n	1000f3a2 <gapc_cmp_evt+0xc6>
1000f3a0:	2000      	movs	r0, #0
1000f3a2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000f3a4:	1000f279 	.word	0x1000f279
1000f3a8:	10011c69 	.word	0x10011c69

1000f3ac <gapc_connection_cfm_handler>:
1000f3ac:	b5f0      	push	{r4, r5, r6, r7, lr}
1000f3ae:	b085      	sub	sp, #20
1000f3b0:	1c1d      	adds	r5, r3, #0
1000f3b2:	ab0a      	add	r3, sp, #40	; 0x28
1000f3b4:	781b      	ldrb	r3, [r3, #0]
1000f3b6:	9201      	str	r2, [sp, #4]
1000f3b8:	9302      	str	r3, [sp, #8]
1000f3ba:	ab0b      	add	r3, sp, #44	; 0x2c
1000f3bc:	781b      	ldrb	r3, [r3, #0]
1000f3be:	1c07      	adds	r7, r0, #0
1000f3c0:	9303      	str	r3, [sp, #12]
1000f3c2:	ab0c      	add	r3, sp, #48	; 0x30
1000f3c4:	881a      	ldrh	r2, [r3, #0]
1000f3c6:	2302      	movs	r3, #2
1000f3c8:	1c0e      	adds	r6, r1, #0
1000f3ca:	4c23      	ldr	r4, [pc, #140]	; (1000f458 <gapc_connection_cfm_handler+0xac>)
1000f3cc:	1c39      	adds	r1, r7, #0
1000f3ce:	7023      	strb	r3, [r4, #0]
1000f3d0:	330c      	adds	r3, #12
1000f3d2:	7063      	strb	r3, [r4, #1]
1000f3d4:	70a3      	strb	r3, [r4, #2]
1000f3d6:	4b21      	ldr	r3, [pc, #132]	; (1000f45c <gapc_connection_cfm_handler+0xb0>)
1000f3d8:	70e2      	strb	r2, [r4, #3]
1000f3da:	881a      	ldrh	r2, [r3, #0]
1000f3dc:	881b      	ldrh	r3, [r3, #0]
1000f3de:	7122      	strb	r2, [r4, #4]
1000f3e0:	0a1b      	lsrs	r3, r3, #8
1000f3e2:	4f1f      	ldr	r7, [pc, #124]	; (1000f460 <gapc_connection_cfm_handler+0xb4>)
1000f3e4:	2210      	movs	r2, #16
1000f3e6:	481f      	ldr	r0, [pc, #124]	; (1000f464 <gapc_connection_cfm_handler+0xb8>)
1000f3e8:	7163      	strb	r3, [r4, #5]
1000f3ea:	47b8      	blx	r7
1000f3ec:	0a33      	lsrs	r3, r6, #8
1000f3ee:	7626      	strb	r6, [r4, #24]
1000f3f0:	7663      	strb	r3, [r4, #25]
1000f3f2:	9901      	ldr	r1, [sp, #4]
1000f3f4:	0c33      	lsrs	r3, r6, #16
1000f3f6:	2210      	movs	r2, #16
1000f3f8:	0e36      	lsrs	r6, r6, #24
1000f3fa:	481b      	ldr	r0, [pc, #108]	; (1000f468 <gapc_connection_cfm_handler+0xbc>)
1000f3fc:	76a3      	strb	r3, [r4, #26]
1000f3fe:	76e6      	strb	r6, [r4, #27]
1000f400:	47b8      	blx	r7
1000f402:	1c23      	adds	r3, r4, #0
1000f404:	332c      	adds	r3, #44	; 0x2c
1000f406:	701d      	strb	r5, [r3, #0]
1000f408:	1c23      	adds	r3, r4, #0
1000f40a:	0a2a      	lsrs	r2, r5, #8
1000f40c:	332d      	adds	r3, #45	; 0x2d
1000f40e:	701a      	strb	r2, [r3, #0]
1000f410:	1c23      	adds	r3, r4, #0
1000f412:	0c2a      	lsrs	r2, r5, #16
1000f414:	332e      	adds	r3, #46	; 0x2e
1000f416:	701a      	strb	r2, [r3, #0]
1000f418:	1c23      	adds	r3, r4, #0
1000f41a:	0e2d      	lsrs	r5, r5, #24
1000f41c:	332f      	adds	r3, #47	; 0x2f
1000f41e:	466a      	mov	r2, sp
1000f420:	701d      	strb	r5, [r3, #0]
1000f422:	1c23      	adds	r3, r4, #0
1000f424:	7a12      	ldrb	r2, [r2, #8]
1000f426:	3330      	adds	r3, #48	; 0x30
1000f428:	701a      	strb	r2, [r3, #0]
1000f42a:	1c23      	adds	r3, r4, #0
1000f42c:	2500      	movs	r5, #0
1000f42e:	3331      	adds	r3, #49	; 0x31
1000f430:	466a      	mov	r2, sp
1000f432:	701d      	strb	r5, [r3, #0]
1000f434:	1c23      	adds	r3, r4, #0
1000f436:	7b12      	ldrb	r2, [r2, #12]
1000f438:	3332      	adds	r3, #50	; 0x32
1000f43a:	701a      	strb	r2, [r3, #0]
1000f43c:	1c23      	adds	r3, r4, #0
1000f43e:	3333      	adds	r3, #51	; 0x33
1000f440:	701d      	strb	r5, [r3, #0]
1000f442:	232c      	movs	r3, #44	; 0x2c
1000f444:	1c20      	adds	r0, r4, #0
1000f446:	71a3      	strb	r3, [r4, #6]
1000f448:	2134      	movs	r1, #52	; 0x34
1000f44a:	4b08      	ldr	r3, [pc, #32]	; (1000f46c <gapc_connection_cfm_handler+0xc0>)
1000f44c:	71e5      	strb	r5, [r4, #7]
1000f44e:	4798      	blx	r3
1000f450:	1c28      	adds	r0, r5, #0
1000f452:	b005      	add	sp, #20
1000f454:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000f456:	46c0      	nop			; (mov r8, r8)
1000f458:	1001ac38 	.word	0x1001ac38
1000f45c:	1001a8c8 	.word	0x1001a8c8
1000f460:	10011c57 	.word	0x10011c57
1000f464:	1001ac40 	.word	0x1001ac40
1000f468:	1001ac54 	.word	0x1001ac54
1000f46c:	1000f0a9 	.word	0x1000f0a9

1000f470 <gapc_con_req_ind>:
1000f470:	b5f0      	push	{r4, r5, r6, r7, lr}
1000f472:	7845      	ldrb	r5, [r0, #1]
1000f474:	7803      	ldrb	r3, [r0, #0]
1000f476:	4c30      	ldr	r4, [pc, #192]	; (1000f538 <gapc_con_req_ind+0xc8>)
1000f478:	022d      	lsls	r5, r5, #8
1000f47a:	431d      	orrs	r5, r3
1000f47c:	85a5      	strh	r5, [r4, #44]	; 0x2c
1000f47e:	78c3      	ldrb	r3, [r0, #3]
1000f480:	7882      	ldrb	r2, [r0, #2]
1000f482:	b08b      	sub	sp, #44	; 0x2c
1000f484:	021b      	lsls	r3, r3, #8
1000f486:	431a      	orrs	r2, r3
1000f488:	466b      	mov	r3, sp
1000f48a:	9205      	str	r2, [sp, #20]
1000f48c:	8a9b      	ldrh	r3, [r3, #20]
1000f48e:	2120      	movs	r1, #32
1000f490:	85e3      	strh	r3, [r4, #46]	; 0x2e
1000f492:	7943      	ldrb	r3, [r0, #5]
1000f494:	7902      	ldrb	r2, [r0, #4]
1000f496:	021b      	lsls	r3, r3, #8
1000f498:	431a      	orrs	r2, r3
1000f49a:	466b      	mov	r3, sp
1000f49c:	9206      	str	r2, [sp, #24]
1000f49e:	8b1b      	ldrh	r3, [r3, #24]
1000f4a0:	1c06      	adds	r6, r0, #0
1000f4a2:	8623      	strh	r3, [r4, #48]	; 0x30
1000f4a4:	79c3      	ldrb	r3, [r0, #7]
1000f4a6:	7982      	ldrb	r2, [r0, #6]
1000f4a8:	021b      	lsls	r3, r3, #8
1000f4aa:	431a      	orrs	r2, r3
1000f4ac:	466b      	mov	r3, sp
1000f4ae:	9207      	str	r2, [sp, #28]
1000f4b0:	466a      	mov	r2, sp
1000f4b2:	8b9b      	ldrh	r3, [r3, #28]
1000f4b4:	1852      	adds	r2, r2, r1
1000f4b6:	8663      	strh	r3, [r4, #50]	; 0x32
1000f4b8:	7a43      	ldrb	r3, [r0, #9]
1000f4ba:	1c01      	adds	r1, r0, #0
1000f4bc:	9308      	str	r3, [sp, #32]
1000f4be:	1c23      	adds	r3, r4, #0
1000f4c0:	7812      	ldrb	r2, [r2, #0]
1000f4c2:	3377      	adds	r3, #119	; 0x77
1000f4c4:	3478      	adds	r4, #120	; 0x78
1000f4c6:	701a      	strb	r2, [r3, #0]
1000f4c8:	310a      	adds	r1, #10
1000f4ca:	2206      	movs	r2, #6
1000f4cc:	4b1b      	ldr	r3, [pc, #108]	; (1000f53c <gapc_con_req_ind+0xcc>)
1000f4ce:	1c20      	adds	r0, r4, #0
1000f4d0:	4798      	blx	r3
1000f4d2:	7c33      	ldrb	r3, [r6, #16]
1000f4d4:	9309      	str	r3, [sp, #36]	; 0x24
1000f4d6:	4b1a      	ldr	r3, [pc, #104]	; (1000f540 <gapc_con_req_ind+0xd0>)
1000f4d8:	4798      	blx	r3
1000f4da:	4e1a      	ldr	r6, [pc, #104]	; (1000f544 <gapc_con_req_ind+0xd4>)
1000f4dc:	1e07      	subs	r7, r0, #0
1000f4de:	2f07      	cmp	r7, #7
1000f4e0:	d81b      	bhi.n	1000f51a <gapc_con_req_ind+0xaa>
1000f4e2:	2312      	movs	r3, #18
1000f4e4:	4343      	muls	r3, r0
1000f4e6:	18f0      	adds	r0, r6, r3
1000f4e8:	8145      	strh	r5, [r0, #10]
1000f4ea:	4669      	mov	r1, sp
1000f4ec:	2524      	movs	r5, #36	; 0x24
1000f4ee:	1949      	adds	r1, r1, r5
1000f4f0:	7809      	ldrb	r1, [r1, #0]
1000f4f2:	2206      	movs	r2, #6
1000f4f4:	54f1      	strb	r1, [r6, r3]
1000f4f6:	2120      	movs	r1, #32
1000f4f8:	466b      	mov	r3, sp
1000f4fa:	185b      	adds	r3, r3, r1
1000f4fc:	781b      	ldrb	r3, [r3, #0]
1000f4fe:	1c21      	adds	r1, r4, #0
1000f500:	7043      	strb	r3, [r0, #1]
1000f502:	466b      	mov	r3, sp
1000f504:	8a9b      	ldrh	r3, [r3, #20]
1000f506:	3002      	adds	r0, #2
1000f508:	8143      	strh	r3, [r0, #10]
1000f50a:	466b      	mov	r3, sp
1000f50c:	8b1b      	ldrh	r3, [r3, #24]
1000f50e:	8183      	strh	r3, [r0, #12]
1000f510:	466b      	mov	r3, sp
1000f512:	8b9b      	ldrh	r3, [r3, #28]
1000f514:	81c3      	strh	r3, [r0, #14]
1000f516:	4b09      	ldr	r3, [pc, #36]	; (1000f53c <gapc_con_req_ind+0xcc>)
1000f518:	4798      	blx	r3
1000f51a:	2112      	movs	r1, #18
1000f51c:	2300      	movs	r3, #0
1000f51e:	434f      	muls	r7, r1
1000f520:	9300      	str	r3, [sp, #0]
1000f522:	9301      	str	r3, [sp, #4]
1000f524:	19f6      	adds	r6, r6, r7
1000f526:	8971      	ldrh	r1, [r6, #10]
1000f528:	4a07      	ldr	r2, [pc, #28]	; (1000f548 <gapc_con_req_ind+0xd8>)
1000f52a:	9102      	str	r1, [sp, #8]
1000f52c:	1c10      	adds	r0, r2, #0
1000f52e:	1c19      	adds	r1, r3, #0
1000f530:	4c06      	ldr	r4, [pc, #24]	; (1000f54c <gapc_con_req_ind+0xdc>)
1000f532:	47a0      	blx	r4
1000f534:	b00b      	add	sp, #44	; 0x2c
1000f536:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000f538:	1001a95a 	.word	0x1001a95a
1000f53c:	10011c57 	.word	0x10011c57
1000f540:	1000f2b5 	.word	0x1000f2b5
1000f544:	1001a8ca 	.word	0x1001a8ca
1000f548:	10019954 	.word	0x10019954
1000f54c:	1000f3ad 	.word	0x1000f3ad

1000f550 <gapc_disconnect_cmd_handler>:
1000f550:	2204      	movs	r2, #4
1000f552:	b510      	push	{r4, lr}
1000f554:	4b0c      	ldr	r3, [pc, #48]	; (1000f588 <gapc_disconnect_cmd_handler+0x38>)
1000f556:	2400      	movs	r4, #0
1000f558:	701a      	strb	r2, [r3, #0]
1000f55a:	320a      	adds	r2, #10
1000f55c:	705a      	strb	r2, [r3, #1]
1000f55e:	709a      	strb	r2, [r3, #2]
1000f560:	4a0a      	ldr	r2, [pc, #40]	; (1000f58c <gapc_disconnect_cmd_handler+0x3c>)
1000f562:	70d9      	strb	r1, [r3, #3]
1000f564:	8811      	ldrh	r1, [r2, #0]
1000f566:	8812      	ldrh	r2, [r2, #0]
1000f568:	7119      	strb	r1, [r3, #4]
1000f56a:	0a12      	lsrs	r2, r2, #8
1000f56c:	715a      	strb	r2, [r3, #5]
1000f56e:	2201      	movs	r2, #1
1000f570:	721a      	strb	r2, [r3, #8]
1000f572:	1892      	adds	r2, r2, r2
1000f574:	7258      	strb	r0, [r3, #9]
1000f576:	719a      	strb	r2, [r3, #6]
1000f578:	71dc      	strb	r4, [r3, #7]
1000f57a:	1c18      	adds	r0, r3, #0
1000f57c:	210a      	movs	r1, #10
1000f57e:	4b04      	ldr	r3, [pc, #16]	; (1000f590 <gapc_disconnect_cmd_handler+0x40>)
1000f580:	4798      	blx	r3
1000f582:	1c20      	adds	r0, r4, #0
1000f584:	bd10      	pop	{r4, pc}
1000f586:	46c0      	nop			; (mov r8, r8)
1000f588:	1001ac38 	.word	0x1001ac38
1000f58c:	1001a8c8 	.word	0x1001a8c8
1000f590:	1000f0a9 	.word	0x1000f0a9

1000f594 <gapc_disconnect_ind>:
1000f594:	1c02      	adds	r2, r0, #0
1000f596:	b508      	push	{r3, lr}
1000f598:	7843      	ldrb	r3, [r0, #1]
1000f59a:	7800      	ldrb	r0, [r0, #0]
1000f59c:	021b      	lsls	r3, r3, #8
1000f59e:	4318      	orrs	r0, r3
1000f5a0:	8008      	strh	r0, [r1, #0]
1000f5a2:	7893      	ldrb	r3, [r2, #2]
1000f5a4:	708b      	strb	r3, [r1, #2]
1000f5a6:	2100      	movs	r1, #0
1000f5a8:	4b05      	ldr	r3, [pc, #20]	; (1000f5c0 <gapc_disconnect_ind+0x2c>)
1000f5aa:	4798      	blx	r3
1000f5ac:	2807      	cmp	r0, #7
1000f5ae:	d806      	bhi.n	1000f5be <gapc_disconnect_ind+0x2a>
1000f5b0:	2312      	movs	r3, #18
1000f5b2:	4358      	muls	r0, r3
1000f5b4:	4b03      	ldr	r3, [pc, #12]	; (1000f5c4 <gapc_disconnect_ind+0x30>)
1000f5b6:	1818      	adds	r0, r3, r0
1000f5b8:	2301      	movs	r3, #1
1000f5ba:	425b      	negs	r3, r3
1000f5bc:	8143      	strh	r3, [r0, #10]
1000f5be:	bd08      	pop	{r3, pc}
1000f5c0:	1000f279 	.word	0x1000f279
1000f5c4:	1001a8ca 	.word	0x1001a8ca

1000f5c8 <gapc_bond_cmd_handler>:
1000f5c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000f5ca:	9300      	str	r3, [sp, #0]
1000f5cc:	2312      	movs	r3, #18
1000f5ce:	1c04      	adds	r4, r0, #0
1000f5d0:	a808      	add	r0, sp, #32
1000f5d2:	7807      	ldrb	r7, [r0, #0]
1000f5d4:	a809      	add	r0, sp, #36	; 0x24
1000f5d6:	7806      	ldrb	r6, [r0, #0]
1000f5d8:	a80a      	add	r0, sp, #40	; 0x28
1000f5da:	7805      	ldrb	r5, [r0, #0]
1000f5dc:	a80b      	add	r0, sp, #44	; 0x2c
1000f5de:	7800      	ldrb	r0, [r0, #0]
1000f5e0:	9001      	str	r0, [sp, #4]
1000f5e2:	4810      	ldr	r0, [pc, #64]	; (1000f624 <gapc_bond_cmd_handler+0x5c>)
1000f5e4:	7003      	strb	r3, [r0, #0]
1000f5e6:	230e      	movs	r3, #14
1000f5e8:	70c4      	strb	r4, [r0, #3]
1000f5ea:	4c0f      	ldr	r4, [pc, #60]	; (1000f628 <gapc_bond_cmd_handler+0x60>)
1000f5ec:	7043      	strb	r3, [r0, #1]
1000f5ee:	7083      	strb	r3, [r0, #2]
1000f5f0:	8823      	ldrh	r3, [r4, #0]
1000f5f2:	8824      	ldrh	r4, [r4, #0]
1000f5f4:	7103      	strb	r3, [r0, #4]
1000f5f6:	466b      	mov	r3, sp
1000f5f8:	781b      	ldrb	r3, [r3, #0]
1000f5fa:	0a24      	lsrs	r4, r4, #8
1000f5fc:	72c3      	strb	r3, [r0, #11]
1000f5fe:	466b      	mov	r3, sp
1000f600:	791b      	ldrb	r3, [r3, #4]
1000f602:	7144      	strb	r4, [r0, #5]
1000f604:	73c3      	strb	r3, [r0, #15]
1000f606:	2308      	movs	r3, #8
1000f608:	7183      	strb	r3, [r0, #6]
1000f60a:	2300      	movs	r3, #0
1000f60c:	240a      	movs	r4, #10
1000f60e:	7241      	strb	r1, [r0, #9]
1000f610:	71c3      	strb	r3, [r0, #7]
1000f612:	2110      	movs	r1, #16
1000f614:	4b05      	ldr	r3, [pc, #20]	; (1000f62c <gapc_bond_cmd_handler+0x64>)
1000f616:	7307      	strb	r7, [r0, #12]
1000f618:	7346      	strb	r6, [r0, #13]
1000f61a:	7385      	strb	r5, [r0, #14]
1000f61c:	7204      	strb	r4, [r0, #8]
1000f61e:	7282      	strb	r2, [r0, #10]
1000f620:	4798      	blx	r3
1000f622:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000f624:	1001ac38 	.word	0x1001ac38
1000f628:	1001a8c8 	.word	0x1001a8c8
1000f62c:	1000f0a9 	.word	0x1000f0a9

1000f630 <gapc_bond_ind>:
1000f630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000f632:	780e      	ldrb	r6, [r1, #0]
1000f634:	1c03      	adds	r3, r0, #0
1000f636:	1eb0      	subs	r0, r6, #2
1000f638:	2805      	cmp	r0, #5
1000f63a:	d85d      	bhi.n	1000f6f8 <gapc_bond_ind+0xc8>
1000f63c:	1c15      	adds	r5, r2, #0
1000f63e:	1c0c      	adds	r4, r1, #0
1000f640:	f005 f826 	bl	10014690 <__gnu_thumb1_case_uqi>
1000f644:	2f5a030d 	.word	0x2f5a030d
1000f648:	4740      	.short	0x4740
1000f64a:	2009      	movs	r0, #9
1000f64c:	2a00      	cmp	r2, #0
1000f64e:	d054      	beq.n	1000f6fa <gapc_bond_ind+0xca>
1000f650:	0a1b      	lsrs	r3, r3, #8
1000f652:	8053      	strh	r3, [r2, #2]
1000f654:	788b      	ldrb	r3, [r1, #2]
1000f656:	4829      	ldr	r0, [pc, #164]	; (1000f6fc <gapc_bond_ind+0xcc>)
1000f658:	7113      	strb	r3, [r2, #4]
1000f65a:	2100      	movs	r1, #0
1000f65c:	e01c      	b.n	1000f698 <gapc_bond_ind+0x68>
1000f65e:	2009      	movs	r0, #9
1000f660:	2a00      	cmp	r2, #0
1000f662:	d04a      	beq.n	1000f6fa <gapc_bond_ind+0xca>
1000f664:	4c25      	ldr	r4, [pc, #148]	; (1000f6fc <gapc_bond_ind+0xcc>)
1000f666:	0a1b      	lsrs	r3, r3, #8
1000f668:	8053      	strh	r3, [r2, #2]
1000f66a:	788b      	ldrb	r3, [r1, #2]
1000f66c:	2700      	movs	r7, #0
1000f66e:	1c10      	adds	r0, r2, #0
1000f670:	1c21      	adds	r1, r4, #0
1000f672:	7013      	strb	r3, [r2, #0]
1000f674:	4e22      	ldr	r6, [pc, #136]	; (1000f700 <gapc_bond_ind+0xd0>)
1000f676:	7117      	strb	r7, [r2, #4]
1000f678:	312e      	adds	r1, #46	; 0x2e
1000f67a:	2217      	movs	r2, #23
1000f67c:	3032      	adds	r0, #50	; 0x32
1000f67e:	47b0      	blx	r6
1000f680:	1c28      	adds	r0, r5, #0
1000f682:	1c21      	adds	r1, r4, #0
1000f684:	2210      	movs	r2, #16
1000f686:	311e      	adds	r1, #30
1000f688:	3022      	adds	r0, #34	; 0x22
1000f68a:	47b0      	blx	r6
1000f68c:	1ca1      	adds	r1, r4, #2
1000f68e:	1da8      	adds	r0, r5, #6
1000f690:	221c      	movs	r2, #28
1000f692:	47b0      	blx	r6
1000f694:	1c20      	adds	r0, r4, #0
1000f696:	1c39      	adds	r1, r7, #0
1000f698:	2246      	movs	r2, #70	; 0x46
1000f69a:	4b1a      	ldr	r3, [pc, #104]	; (1000f704 <gapc_bond_ind+0xd4>)
1000f69c:	4798      	blx	r3
1000f69e:	2009      	movs	r0, #9
1000f6a0:	e02b      	b.n	1000f6fa <gapc_bond_ind+0xca>
1000f6a2:	4d16      	ldr	r5, [pc, #88]	; (1000f6fc <gapc_bond_ind+0xcc>)
1000f6a4:	3102      	adds	r1, #2
1000f6a6:	1c28      	adds	r0, r5, #0
1000f6a8:	2210      	movs	r2, #16
1000f6aa:	4e15      	ldr	r6, [pc, #84]	; (1000f700 <gapc_bond_ind+0xd0>)
1000f6ac:	302e      	adds	r0, #46	; 0x2e
1000f6ae:	47b0      	blx	r6
1000f6b0:	1c28      	adds	r0, r5, #0
1000f6b2:	1c21      	adds	r1, r4, #0
1000f6b4:	303f      	adds	r0, #63	; 0x3f
1000f6b6:	3112      	adds	r1, #18
1000f6b8:	2206      	movs	r2, #6
1000f6ba:	47b0      	blx	r6
1000f6bc:	7e23      	ldrb	r3, [r4, #24]
1000f6be:	353e      	adds	r5, #62	; 0x3e
1000f6c0:	702b      	strb	r3, [r5, #0]
1000f6c2:	e019      	b.n	1000f6f8 <gapc_bond_ind+0xc8>
1000f6c4:	480d      	ldr	r0, [pc, #52]	; (1000f6fc <gapc_bond_ind+0xcc>)
1000f6c6:	3102      	adds	r1, #2
1000f6c8:	2210      	movs	r2, #16
1000f6ca:	4b0d      	ldr	r3, [pc, #52]	; (1000f700 <gapc_bond_ind+0xd0>)
1000f6cc:	301e      	adds	r0, #30
1000f6ce:	4798      	blx	r3
1000f6d0:	e012      	b.n	1000f6f8 <gapc_bond_ind+0xc8>
1000f6d2:	4d0a      	ldr	r5, [pc, #40]	; (1000f6fc <gapc_bond_ind+0xcc>)
1000f6d4:	3102      	adds	r1, #2
1000f6d6:	2210      	movs	r2, #16
1000f6d8:	4e09      	ldr	r6, [pc, #36]	; (1000f700 <gapc_bond_ind+0xd0>)
1000f6da:	1ca8      	adds	r0, r5, #2
1000f6dc:	47b0      	blx	r6
1000f6de:	1c28      	adds	r0, r5, #0
1000f6e0:	1c21      	adds	r1, r4, #0
1000f6e2:	7ce3      	ldrb	r3, [r4, #19]
1000f6e4:	7ca2      	ldrb	r2, [r4, #18]
1000f6e6:	021b      	lsls	r3, r3, #8
1000f6e8:	4313      	orrs	r3, r2
1000f6ea:	3014      	adds	r0, #20
1000f6ec:	3114      	adds	r1, #20
1000f6ee:	2208      	movs	r2, #8
1000f6f0:	826b      	strh	r3, [r5, #18]
1000f6f2:	47b0      	blx	r6
1000f6f4:	7f23      	ldrb	r3, [r4, #28]
1000f6f6:	772b      	strb	r3, [r5, #28]
1000f6f8:	2000      	movs	r0, #0
1000f6fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000f6fc:	10019984 	.word	0x10019984
1000f700:	10011c57 	.word	0x10011c57
1000f704:	10011c69 	.word	0x10011c69

1000f708 <gapc_bond_req_ind>:
1000f708:	b570      	push	{r4, r5, r6, lr}
1000f70a:	780c      	ldrb	r4, [r1, #0]
1000f70c:	1c03      	adds	r3, r0, #0
1000f70e:	7849      	ldrb	r1, [r1, #1]
1000f710:	2c07      	cmp	r4, #7
1000f712:	d85c      	bhi.n	1000f7ce <gapc_bond_req_ind+0xc6>
1000f714:	1c20      	adds	r0, r4, #0
1000f716:	f004 ffbb 	bl	10014690 <__gnu_thumb1_case_uqi>
1000f71a:	5a04      	.short	0x5a04
1000f71c:	5a0b5a5a 	.word	0x5a0b5a5a
1000f720:	1f1f      	.short	0x1f1f
1000f722:	200a      	movs	r0, #10
1000f724:	2a00      	cmp	r2, #0
1000f726:	d053      	beq.n	1000f7d0 <gapc_bond_req_ind+0xc8>
1000f728:	0a1b      	lsrs	r3, r3, #8
1000f72a:	8013      	strh	r3, [r2, #0]
1000f72c:	7091      	strb	r1, [r2, #2]
1000f72e:	e04f      	b.n	1000f7d0 <gapc_bond_req_ind+0xc8>
1000f730:	2a00      	cmp	r2, #0
1000f732:	d00b      	beq.n	1000f74c <gapc_bond_req_ind+0x44>
1000f734:	0a1b      	lsrs	r3, r3, #8
1000f736:	8013      	strh	r3, [r2, #0]
1000f738:	2900      	cmp	r1, #0
1000f73a:	d102      	bne.n	1000f742 <gapc_bond_req_ind+0x3a>
1000f73c:	2301      	movs	r3, #1
1000f73e:	7093      	strb	r3, [r2, #2]
1000f740:	e004      	b.n	1000f74c <gapc_bond_req_ind+0x44>
1000f742:	2300      	movs	r3, #0
1000f744:	7093      	strb	r3, [r2, #2]
1000f746:	2902      	cmp	r1, #2
1000f748:	d102      	bne.n	1000f750 <gapc_bond_req_ind+0x48>
1000f74a:	70d3      	strb	r3, [r2, #3]
1000f74c:	200c      	movs	r0, #12
1000f74e:	e03f      	b.n	1000f7d0 <gapc_bond_req_ind+0xc8>
1000f750:	2901      	cmp	r1, #1
1000f752:	d1fb      	bne.n	1000f74c <gapc_bond_req_ind+0x44>
1000f754:	70d1      	strb	r1, [r2, #3]
1000f756:	e7f9      	b.n	1000f74c <gapc_bond_req_ind+0x44>
1000f758:	2214      	movs	r2, #20
1000f75a:	481e      	ldr	r0, [pc, #120]	; (1000f7d4 <gapc_bond_req_ind+0xcc>)
1000f75c:	0a1b      	lsrs	r3, r3, #8
1000f75e:	70c3      	strb	r3, [r0, #3]
1000f760:	4b1d      	ldr	r3, [pc, #116]	; (1000f7d8 <gapc_bond_req_ind+0xd0>)
1000f762:	7002      	strb	r2, [r0, #0]
1000f764:	3a06      	subs	r2, #6
1000f766:	7042      	strb	r2, [r0, #1]
1000f768:	7082      	strb	r2, [r0, #2]
1000f76a:	881a      	ldrh	r2, [r3, #0]
1000f76c:	881b      	ldrh	r3, [r3, #0]
1000f76e:	4e1b      	ldr	r6, [pc, #108]	; (1000f7dc <gapc_bond_req_ind+0xd4>)
1000f770:	0a1b      	lsrs	r3, r3, #8
1000f772:	7143      	strb	r3, [r0, #5]
1000f774:	2301      	movs	r3, #1
1000f776:	7102      	strb	r2, [r0, #4]
1000f778:	7204      	strb	r4, [r0, #8]
1000f77a:	7243      	strb	r3, [r0, #9]
1000f77c:	1c05      	adds	r5, r0, #0
1000f77e:	1c31      	adds	r1, r6, #0
1000f780:	300a      	adds	r0, #10
1000f782:	2c07      	cmp	r4, #7
1000f784:	d116      	bne.n	1000f7b4 <gapc_bond_req_ind+0xac>
1000f786:	317e      	adds	r1, #126	; 0x7e
1000f788:	2210      	movs	r2, #16
1000f78a:	4c15      	ldr	r4, [pc, #84]	; (1000f7e0 <gapc_bond_req_ind+0xd8>)
1000f78c:	47a0      	blx	r4
1000f78e:	1c33      	adds	r3, r6, #0
1000f790:	1c31      	adds	r1, r6, #0
1000f792:	1c28      	adds	r0, r5, #0
1000f794:	338e      	adds	r3, #142	; 0x8e
1000f796:	881b      	ldrh	r3, [r3, #0]
1000f798:	3190      	adds	r1, #144	; 0x90
1000f79a:	76ab      	strb	r3, [r5, #26]
1000f79c:	2208      	movs	r2, #8
1000f79e:	0a1b      	lsrs	r3, r3, #8
1000f7a0:	301c      	adds	r0, #28
1000f7a2:	76eb      	strb	r3, [r5, #27]
1000f7a4:	47a0      	blx	r4
1000f7a6:	1c31      	adds	r1, r6, #0
1000f7a8:	3198      	adds	r1, #152	; 0x98
1000f7aa:	780a      	ldrb	r2, [r1, #0]
1000f7ac:	1d6b      	adds	r3, r5, #5
1000f7ae:	77da      	strb	r2, [r3, #31]
1000f7b0:	2125      	movs	r1, #37	; 0x25
1000f7b2:	e004      	b.n	1000f7be <gapc_bond_req_ind+0xb6>
1000f7b4:	319a      	adds	r1, #154	; 0x9a
1000f7b6:	2210      	movs	r2, #16
1000f7b8:	4b09      	ldr	r3, [pc, #36]	; (1000f7e0 <gapc_bond_req_ind+0xd8>)
1000f7ba:	4798      	blx	r3
1000f7bc:	211a      	movs	r1, #26
1000f7be:	1c0b      	adds	r3, r1, #0
1000f7c0:	2400      	movs	r4, #0
1000f7c2:	3b08      	subs	r3, #8
1000f7c4:	71ab      	strb	r3, [r5, #6]
1000f7c6:	1c28      	adds	r0, r5, #0
1000f7c8:	4b06      	ldr	r3, [pc, #24]	; (1000f7e4 <gapc_bond_req_ind+0xdc>)
1000f7ca:	71ec      	strb	r4, [r5, #7]
1000f7cc:	4798      	blx	r3
1000f7ce:	2000      	movs	r0, #0
1000f7d0:	bd70      	pop	{r4, r5, r6, pc}
1000f7d2:	46c0      	nop			; (mov r8, r8)
1000f7d4:	1001ac38 	.word	0x1001ac38
1000f7d8:	1001a8c8 	.word	0x1001a8c8
1000f7dc:	1001a95a 	.word	0x1001a95a
1000f7e0:	10011c57 	.word	0x10011c57
1000f7e4:	1000f0a9 	.word	0x1000f0a9

1000f7e8 <gapc_bond_cfm_handler_pair_resp>:
1000f7e8:	b5f0      	push	{r4, r5, r6, r7, lr}
1000f7ea:	b085      	sub	sp, #20
1000f7ec:	1c07      	adds	r7, r0, #0
1000f7ee:	a80a      	add	r0, sp, #40	; 0x28
1000f7f0:	7806      	ldrb	r6, [r0, #0]
1000f7f2:	a80b      	add	r0, sp, #44	; 0x2c
1000f7f4:	7805      	ldrb	r5, [r0, #0]
1000f7f6:	a80c      	add	r0, sp, #48	; 0x30
1000f7f8:	7800      	ldrb	r0, [r0, #0]
1000f7fa:	2414      	movs	r4, #20
1000f7fc:	9002      	str	r0, [sp, #8]
1000f7fe:	a80d      	add	r0, sp, #52	; 0x34
1000f800:	7800      	ldrb	r0, [r0, #0]
1000f802:	9301      	str	r3, [sp, #4]
1000f804:	9003      	str	r0, [sp, #12]
1000f806:	a80e      	add	r0, sp, #56	; 0x38
1000f808:	8800      	ldrh	r0, [r0, #0]
1000f80a:	4684      	mov	ip, r0
1000f80c:	4812      	ldr	r0, [pc, #72]	; (1000f858 <gapc_bond_cfm_handler_pair_resp+0x70>)
1000f80e:	7004      	strb	r4, [r0, #0]
1000f810:	3c06      	subs	r4, #6
1000f812:	7044      	strb	r4, [r0, #1]
1000f814:	7084      	strb	r4, [r0, #2]
1000f816:	4664      	mov	r4, ip
1000f818:	70c4      	strb	r4, [r0, #3]
1000f81a:	4c10      	ldr	r4, [pc, #64]	; (1000f85c <gapc_bond_cfm_handler_pair_resp+0x74>)
1000f81c:	7247      	strb	r7, [r0, #9]
1000f81e:	8823      	ldrh	r3, [r4, #0]
1000f820:	8824      	ldrh	r4, [r4, #0]
1000f822:	7103      	strb	r3, [r0, #4]
1000f824:	466b      	mov	r3, sp
1000f826:	791b      	ldrb	r3, [r3, #4]
1000f828:	0a24      	lsrs	r4, r4, #8
1000f82a:	7303      	strb	r3, [r0, #12]
1000f82c:	466b      	mov	r3, sp
1000f82e:	7a1b      	ldrb	r3, [r3, #8]
1000f830:	7144      	strb	r4, [r0, #5]
1000f832:	73c3      	strb	r3, [r0, #15]
1000f834:	466b      	mov	r3, sp
1000f836:	7b1b      	ldrb	r3, [r3, #12]
1000f838:	2401      	movs	r4, #1
1000f83a:	7403      	strb	r3, [r0, #16]
1000f83c:	2309      	movs	r3, #9
1000f83e:	7183      	strb	r3, [r0, #6]
1000f840:	2300      	movs	r3, #0
1000f842:	7204      	strb	r4, [r0, #8]
1000f844:	7281      	strb	r1, [r0, #10]
1000f846:	72c2      	strb	r2, [r0, #11]
1000f848:	7346      	strb	r6, [r0, #13]
1000f84a:	7385      	strb	r5, [r0, #14]
1000f84c:	71c3      	strb	r3, [r0, #7]
1000f84e:	2111      	movs	r1, #17
1000f850:	4b03      	ldr	r3, [pc, #12]	; (1000f860 <gapc_bond_cfm_handler_pair_resp+0x78>)
1000f852:	4798      	blx	r3
1000f854:	b005      	add	sp, #20
1000f856:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000f858:	1001ac38 	.word	0x1001ac38
1000f85c:	1001a8c8 	.word	0x1001a8c8
1000f860:	1000f0a9 	.word	0x1000f0a9

1000f864 <gapc_bond_cfm_handler_key_exch>:
1000f864:	b538      	push	{r3, r4, r5, lr}
1000f866:	2514      	movs	r5, #20
1000f868:	4c0d      	ldr	r4, [pc, #52]	; (1000f8a0 <gapc_bond_cfm_handler_key_exch+0x3c>)
1000f86a:	70e3      	strb	r3, [r4, #3]
1000f86c:	4b0d      	ldr	r3, [pc, #52]	; (1000f8a4 <gapc_bond_cfm_handler_key_exch+0x40>)
1000f86e:	7025      	strb	r5, [r4, #0]
1000f870:	3d06      	subs	r5, #6
1000f872:	7065      	strb	r5, [r4, #1]
1000f874:	70a5      	strb	r5, [r4, #2]
1000f876:	881d      	ldrh	r5, [r3, #0]
1000f878:	881b      	ldrh	r3, [r3, #0]
1000f87a:	7220      	strb	r0, [r4, #8]
1000f87c:	0a1b      	lsrs	r3, r3, #8
1000f87e:	7163      	strb	r3, [r4, #5]
1000f880:	7261      	strb	r1, [r4, #9]
1000f882:	4b09      	ldr	r3, [pc, #36]	; (1000f8a8 <gapc_bond_cfm_handler_key_exch+0x44>)
1000f884:	1c11      	adds	r1, r2, #0
1000f886:	4809      	ldr	r0, [pc, #36]	; (1000f8ac <gapc_bond_cfm_handler_key_exch+0x48>)
1000f888:	2210      	movs	r2, #16
1000f88a:	7125      	strb	r5, [r4, #4]
1000f88c:	4798      	blx	r3
1000f88e:	2312      	movs	r3, #18
1000f890:	71a3      	strb	r3, [r4, #6]
1000f892:	2300      	movs	r3, #0
1000f894:	1c20      	adds	r0, r4, #0
1000f896:	71e3      	strb	r3, [r4, #7]
1000f898:	211a      	movs	r1, #26
1000f89a:	4b05      	ldr	r3, [pc, #20]	; (1000f8b0 <gapc_bond_cfm_handler_key_exch+0x4c>)
1000f89c:	4798      	blx	r3
1000f89e:	bd38      	pop	{r3, r4, r5, pc}
1000f8a0:	1001ac38 	.word	0x1001ac38
1000f8a4:	1001a8c8 	.word	0x1001a8c8
1000f8a8:	10011c57 	.word	0x10011c57
1000f8ac:	1001ac42 	.word	0x1001ac42
1000f8b0:	1000f0a9 	.word	0x1000f0a9

1000f8b4 <gapc_security_cmd_handler>:
1000f8b4:	221a      	movs	r2, #26
1000f8b6:	b508      	push	{r3, lr}
1000f8b8:	4b0b      	ldr	r3, [pc, #44]	; (1000f8e8 <gapc_security_cmd_handler+0x34>)
1000f8ba:	701a      	strb	r2, [r3, #0]
1000f8bc:	3a0c      	subs	r2, #12
1000f8be:	705a      	strb	r2, [r3, #1]
1000f8c0:	709a      	strb	r2, [r3, #2]
1000f8c2:	4a0a      	ldr	r2, [pc, #40]	; (1000f8ec <gapc_security_cmd_handler+0x38>)
1000f8c4:	70d8      	strb	r0, [r3, #3]
1000f8c6:	8810      	ldrh	r0, [r2, #0]
1000f8c8:	8812      	ldrh	r2, [r2, #0]
1000f8ca:	7118      	strb	r0, [r3, #4]
1000f8cc:	0a12      	lsrs	r2, r2, #8
1000f8ce:	715a      	strb	r2, [r3, #5]
1000f8d0:	220c      	movs	r2, #12
1000f8d2:	721a      	strb	r2, [r3, #8]
1000f8d4:	3a0a      	subs	r2, #10
1000f8d6:	719a      	strb	r2, [r3, #6]
1000f8d8:	2200      	movs	r2, #0
1000f8da:	7259      	strb	r1, [r3, #9]
1000f8dc:	71da      	strb	r2, [r3, #7]
1000f8de:	1c18      	adds	r0, r3, #0
1000f8e0:	210a      	movs	r1, #10
1000f8e2:	4b03      	ldr	r3, [pc, #12]	; (1000f8f0 <gapc_security_cmd_handler+0x3c>)
1000f8e4:	4798      	blx	r3
1000f8e6:	bd08      	pop	{r3, pc}
1000f8e8:	1001ac38 	.word	0x1001ac38
1000f8ec:	1001a8c8 	.word	0x1001a8c8
1000f8f0:	1000f0a9 	.word	0x1000f0a9

1000f8f4 <gapc_encrypt_cmd_handler>:
1000f8f4:	b5f0      	push	{r4, r5, r6, r7, lr}
1000f8f6:	2500      	movs	r5, #0
1000f8f8:	b089      	sub	sp, #36	; 0x24
1000f8fa:	9306      	str	r3, [sp, #24]
1000f8fc:	ab0e      	add	r3, sp, #56	; 0x38
1000f8fe:	781b      	ldrb	r3, [r3, #0]
1000f900:	1c17      	adds	r7, r2, #0
1000f902:	9307      	str	r3, [sp, #28]
1000f904:	ab0f      	add	r3, sp, #60	; 0x3c
1000f906:	781b      	ldrb	r3, [r3, #0]
1000f908:	4a19      	ldr	r2, [pc, #100]	; (1000f970 <gapc_encrypt_cmd_handler+0x7c>)
1000f90a:	1c06      	adds	r6, r0, #0
1000f90c:	9105      	str	r1, [sp, #20]
1000f90e:	9300      	str	r3, [sp, #0]
1000f910:	9002      	str	r0, [sp, #8]
1000f912:	1c29      	adds	r1, r5, #0
1000f914:	1c2b      	adds	r3, r5, #0
1000f916:	9501      	str	r5, [sp, #4]
1000f918:	1c10      	adds	r0, r2, #0
1000f91a:	4c16      	ldr	r4, [pc, #88]	; (1000f974 <gapc_encrypt_cmd_handler+0x80>)
1000f91c:	47a0      	blx	r4
1000f91e:	2316      	movs	r3, #22
1000f920:	4c15      	ldr	r4, [pc, #84]	; (1000f978 <gapc_encrypt_cmd_handler+0x84>)
1000f922:	9905      	ldr	r1, [sp, #20]
1000f924:	7023      	strb	r3, [r4, #0]
1000f926:	3b08      	subs	r3, #8
1000f928:	7063      	strb	r3, [r4, #1]
1000f92a:	70a3      	strb	r3, [r4, #2]
1000f92c:	4b13      	ldr	r3, [pc, #76]	; (1000f97c <gapc_encrypt_cmd_handler+0x88>)
1000f92e:	70e6      	strb	r6, [r4, #3]
1000f930:	881a      	ldrh	r2, [r3, #0]
1000f932:	881b      	ldrh	r3, [r3, #0]
1000f934:	7122      	strb	r2, [r4, #4]
1000f936:	0a1b      	lsrs	r3, r3, #8
1000f938:	7163      	strb	r3, [r4, #5]
1000f93a:	230b      	movs	r3, #11
1000f93c:	4e10      	ldr	r6, [pc, #64]	; (1000f980 <gapc_encrypt_cmd_handler+0x8c>)
1000f93e:	2210      	movs	r2, #16
1000f940:	4810      	ldr	r0, [pc, #64]	; (1000f984 <gapc_encrypt_cmd_handler+0x90>)
1000f942:	7223      	strb	r3, [r4, #8]
1000f944:	7265      	strb	r5, [r4, #9]
1000f946:	47b0      	blx	r6
1000f948:	0a3b      	lsrs	r3, r7, #8
1000f94a:	9906      	ldr	r1, [sp, #24]
1000f94c:	2208      	movs	r2, #8
1000f94e:	480e      	ldr	r0, [pc, #56]	; (1000f988 <gapc_encrypt_cmd_handler+0x94>)
1000f950:	76e3      	strb	r3, [r4, #27]
1000f952:	76a7      	strb	r7, [r4, #26]
1000f954:	47b0      	blx	r6
1000f956:	466a      	mov	r2, sp
1000f958:	7f12      	ldrb	r2, [r2, #28]
1000f95a:	1d63      	adds	r3, r4, #5
1000f95c:	77da      	strb	r2, [r3, #31]
1000f95e:	231d      	movs	r3, #29
1000f960:	1c20      	adds	r0, r4, #0
1000f962:	71a3      	strb	r3, [r4, #6]
1000f964:	2125      	movs	r1, #37	; 0x25
1000f966:	4b09      	ldr	r3, [pc, #36]	; (1000f98c <gapc_encrypt_cmd_handler+0x98>)
1000f968:	71e5      	strb	r5, [r4, #7]
1000f96a:	4798      	blx	r3
1000f96c:	b009      	add	sp, #36	; 0x24
1000f96e:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000f970:	10019964 	.word	0x10019964
1000f974:	1000f3ad 	.word	0x1000f3ad
1000f978:	1001ac38 	.word	0x1001ac38
1000f97c:	1001a8c8 	.word	0x1001a8c8
1000f980:	10011c57 	.word	0x10011c57
1000f984:	1001ac42 	.word	0x1001ac42
1000f988:	1001ac54 	.word	0x1001ac54
1000f98c:	1000f0a9 	.word	0x1000f0a9

1000f990 <gapc_encrypt_req_ind>:
1000f990:	b508      	push	{r3, lr}
1000f992:	0a00      	lsrs	r0, r0, #8
1000f994:	8010      	strh	r0, [r2, #0]
1000f996:	784b      	ldrb	r3, [r1, #1]
1000f998:	7808      	ldrb	r0, [r1, #0]
1000f99a:	021b      	lsls	r3, r3, #8
1000f99c:	4303      	orrs	r3, r0
1000f99e:	8053      	strh	r3, [r2, #2]
1000f9a0:	1d10      	adds	r0, r2, #4
1000f9a2:	3102      	adds	r1, #2
1000f9a4:	2208      	movs	r2, #8
1000f9a6:	4b01      	ldr	r3, [pc, #4]	; (1000f9ac <gapc_encrypt_req_ind+0x1c>)
1000f9a8:	4798      	blx	r3
1000f9aa:	bd08      	pop	{r3, pc}
1000f9ac:	10011c57 	.word	0x10011c57

1000f9b0 <gapc_encrypt_cfm_handler>:
1000f9b0:	b5f0      	push	{r4, r5, r6, r7, lr}
1000f9b2:	2500      	movs	r5, #0
1000f9b4:	b087      	sub	sp, #28
1000f9b6:	9304      	str	r3, [sp, #16]
1000f9b8:	ab0c      	add	r3, sp, #48	; 0x30
1000f9ba:	781b      	ldrb	r3, [r3, #0]
1000f9bc:	1c17      	adds	r7, r2, #0
1000f9be:	4a15      	ldr	r2, [pc, #84]	; (1000fa14 <gapc_encrypt_cfm_handler+0x64>)
1000f9c0:	1c06      	adds	r6, r0, #0
1000f9c2:	9305      	str	r3, [sp, #20]
1000f9c4:	9100      	str	r1, [sp, #0]
1000f9c6:	9002      	str	r0, [sp, #8]
1000f9c8:	1c29      	adds	r1, r5, #0
1000f9ca:	1c2b      	adds	r3, r5, #0
1000f9cc:	9501      	str	r5, [sp, #4]
1000f9ce:	1c10      	adds	r0, r2, #0
1000f9d0:	4c11      	ldr	r4, [pc, #68]	; (1000fa18 <gapc_encrypt_cfm_handler+0x68>)
1000f9d2:	47a0      	blx	r4
1000f9d4:	2318      	movs	r3, #24
1000f9d6:	4c11      	ldr	r4, [pc, #68]	; (1000fa1c <gapc_encrypt_cfm_handler+0x6c>)
1000f9d8:	9904      	ldr	r1, [sp, #16]
1000f9da:	7023      	strb	r3, [r4, #0]
1000f9dc:	3b0a      	subs	r3, #10
1000f9de:	7063      	strb	r3, [r4, #1]
1000f9e0:	70a3      	strb	r3, [r4, #2]
1000f9e2:	4b0f      	ldr	r3, [pc, #60]	; (1000fa20 <gapc_encrypt_cfm_handler+0x70>)
1000f9e4:	480f      	ldr	r0, [pc, #60]	; (1000fa24 <gapc_encrypt_cfm_handler+0x74>)
1000f9e6:	881a      	ldrh	r2, [r3, #0]
1000f9e8:	881b      	ldrh	r3, [r3, #0]
1000f9ea:	7122      	strb	r2, [r4, #4]
1000f9ec:	0a1b      	lsrs	r3, r3, #8
1000f9ee:	7163      	strb	r3, [r4, #5]
1000f9f0:	2210      	movs	r2, #16
1000f9f2:	4b0d      	ldr	r3, [pc, #52]	; (1000fa28 <gapc_encrypt_cfm_handler+0x78>)
1000f9f4:	70e6      	strb	r6, [r4, #3]
1000f9f6:	7227      	strb	r7, [r4, #8]
1000f9f8:	4798      	blx	r3
1000f9fa:	466b      	mov	r3, sp
1000f9fc:	7d1b      	ldrb	r3, [r3, #20]
1000f9fe:	1c20      	adds	r0, r4, #0
1000fa00:	7663      	strb	r3, [r4, #25]
1000fa02:	2312      	movs	r3, #18
1000fa04:	211a      	movs	r1, #26
1000fa06:	71a3      	strb	r3, [r4, #6]
1000fa08:	4b08      	ldr	r3, [pc, #32]	; (1000fa2c <gapc_encrypt_cfm_handler+0x7c>)
1000fa0a:	71e5      	strb	r5, [r4, #7]
1000fa0c:	4798      	blx	r3
1000fa0e:	b007      	add	sp, #28
1000fa10:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000fa12:	46c0      	nop			; (mov r8, r8)
1000fa14:	10019974 	.word	0x10019974
1000fa18:	1000f3ad 	.word	0x1000f3ad
1000fa1c:	1001ac38 	.word	0x1001ac38
1000fa20:	1001a8c8 	.word	0x1001a8c8
1000fa24:	1001ac41 	.word	0x1001ac41
1000fa28:	10011c57 	.word	0x10011c57
1000fa2c:	1000f0a9 	.word	0x1000f0a9

1000fa30 <gapc_encrypt_ind>:
1000fa30:	780b      	ldrb	r3, [r1, #0]
1000fa32:	0a00      	lsrs	r0, r0, #8
1000fa34:	70d3      	strb	r3, [r2, #3]
1000fa36:	2300      	movs	r3, #0
1000fa38:	8010      	strh	r0, [r2, #0]
1000fa3a:	7093      	strb	r3, [r2, #2]
1000fa3c:	4770      	bx	lr
	...

1000fa40 <gapc_param_update_cfm_handler>:
1000fa40:	b538      	push	{r3, r4, r5, lr}
1000fa42:	2410      	movs	r4, #16
1000fa44:	1c05      	adds	r5, r0, #0
1000fa46:	480e      	ldr	r0, [pc, #56]	; (1000fa80 <gapc_param_update_cfm_handler+0x40>)
1000fa48:	7004      	strb	r4, [r0, #0]
1000fa4a:	3c02      	subs	r4, #2
1000fa4c:	7044      	strb	r4, [r0, #1]
1000fa4e:	7084      	strb	r4, [r0, #2]
1000fa50:	4c0c      	ldr	r4, [pc, #48]	; (1000fa84 <gapc_param_update_cfm_handler+0x44>)
1000fa52:	70c5      	strb	r5, [r0, #3]
1000fa54:	8825      	ldrh	r5, [r4, #0]
1000fa56:	8824      	ldrh	r4, [r4, #0]
1000fa58:	72c3      	strb	r3, [r0, #11]
1000fa5a:	0a1b      	lsrs	r3, r3, #8
1000fa5c:	0a24      	lsrs	r4, r4, #8
1000fa5e:	7303      	strb	r3, [r0, #12]
1000fa60:	2305      	movs	r3, #5
1000fa62:	7144      	strb	r4, [r0, #5]
1000fa64:	2400      	movs	r4, #0
1000fa66:	7201      	strb	r1, [r0, #8]
1000fa68:	7242      	strb	r2, [r0, #9]
1000fa6a:	7183      	strb	r3, [r0, #6]
1000fa6c:	0a12      	lsrs	r2, r2, #8
1000fa6e:	210d      	movs	r1, #13
1000fa70:	4b05      	ldr	r3, [pc, #20]	; (1000fa88 <gapc_param_update_cfm_handler+0x48>)
1000fa72:	7105      	strb	r5, [r0, #4]
1000fa74:	7282      	strb	r2, [r0, #10]
1000fa76:	71c4      	strb	r4, [r0, #7]
1000fa78:	4798      	blx	r3
1000fa7a:	1c20      	adds	r0, r4, #0
1000fa7c:	bd38      	pop	{r3, r4, r5, pc}
1000fa7e:	46c0      	nop			; (mov r8, r8)
1000fa80:	1001ac38 	.word	0x1001ac38
1000fa84:	1001a8c8 	.word	0x1001a8c8
1000fa88:	1000f0a9 	.word	0x1000f0a9

1000fa8c <gapc_param_updated_ind>:
1000fa8c:	2300      	movs	r3, #0
1000fa8e:	0a00      	lsrs	r0, r0, #8
1000fa90:	8010      	strh	r0, [r2, #0]
1000fa92:	7093      	strb	r3, [r2, #2]
1000fa94:	784b      	ldrb	r3, [r1, #1]
1000fa96:	7808      	ldrb	r0, [r1, #0]
1000fa98:	021b      	lsls	r3, r3, #8
1000fa9a:	4303      	orrs	r3, r0
1000fa9c:	8093      	strh	r3, [r2, #4]
1000fa9e:	78cb      	ldrb	r3, [r1, #3]
1000faa0:	7888      	ldrb	r0, [r1, #2]
1000faa2:	021b      	lsls	r3, r3, #8
1000faa4:	4303      	orrs	r3, r0
1000faa6:	80d3      	strh	r3, [r2, #6]
1000faa8:	794b      	ldrb	r3, [r1, #5]
1000faaa:	7909      	ldrb	r1, [r1, #4]
1000faac:	021b      	lsls	r3, r3, #8
1000faae:	430b      	orrs	r3, r1
1000fab0:	2007      	movs	r0, #7
1000fab2:	8113      	strh	r3, [r2, #8]
1000fab4:	4770      	bx	lr

1000fab6 <gapc_param_updated_req_ind>:
1000fab6:	0a00      	lsrs	r0, r0, #8
1000fab8:	8010      	strh	r0, [r2, #0]
1000faba:	784b      	ldrb	r3, [r1, #1]
1000fabc:	7808      	ldrb	r0, [r1, #0]
1000fabe:	021b      	lsls	r3, r3, #8
1000fac0:	4303      	orrs	r3, r0
1000fac2:	8053      	strh	r3, [r2, #2]
1000fac4:	78cb      	ldrb	r3, [r1, #3]
1000fac6:	7888      	ldrb	r0, [r1, #2]
1000fac8:	021b      	lsls	r3, r3, #8
1000faca:	4303      	orrs	r3, r0
1000facc:	8093      	strh	r3, [r2, #4]
1000face:	794b      	ldrb	r3, [r1, #5]
1000fad0:	7908      	ldrb	r0, [r1, #4]
1000fad2:	021b      	lsls	r3, r3, #8
1000fad4:	4303      	orrs	r3, r0
1000fad6:	80d3      	strh	r3, [r2, #6]
1000fad8:	79cb      	ldrb	r3, [r1, #7]
1000fada:	7989      	ldrb	r1, [r1, #6]
1000fadc:	021b      	lsls	r3, r3, #8
1000fade:	430b      	orrs	r3, r1
1000fae0:	2008      	movs	r0, #8
1000fae2:	8113      	strh	r3, [r2, #8]
1000fae4:	4770      	bx	lr
	...

1000fae8 <gapc_dev_info_req_ind_handler>:
1000fae8:	b508      	push	{r3, lr}
1000faea:	1c0b      	adds	r3, r1, #0
1000faec:	0a01      	lsrs	r1, r0, #8
1000faee:	8011      	strh	r1, [r2, #0]
1000faf0:	7818      	ldrb	r0, [r3, #0]
1000faf2:	7090      	strb	r0, [r2, #2]
1000faf4:	2800      	cmp	r0, #0
1000faf6:	d104      	bne.n	1000fb02 <gapc_dev_info_req_ind_handler+0x1a>
1000faf8:	4b03      	ldr	r3, [pc, #12]	; (1000fb08 <gapc_dev_info_req_ind_handler+0x20>)
1000fafa:	33aa      	adds	r3, #170	; 0xaa
1000fafc:	881b      	ldrh	r3, [r3, #0]
1000fafe:	2b00      	cmp	r3, #0
1000fb00:	d001      	beq.n	1000fb06 <gapc_dev_info_req_ind_handler+0x1e>
1000fb02:	4b02      	ldr	r3, [pc, #8]	; (1000fb0c <gapc_dev_info_req_ind_handler+0x24>)
1000fb04:	4798      	blx	r3
1000fb06:	bd08      	pop	{r3, pc}
1000fb08:	1001a95a 	.word	0x1001a95a
1000fb0c:	1000f1b9 	.word	0x1000f1b9

1000fb10 <gapc_sec_req_ind>:
1000fb10:	0a00      	lsrs	r0, r0, #8
1000fb12:	8010      	strh	r0, [r2, #0]
1000fb14:	7809      	ldrb	r1, [r1, #0]
1000fb16:	2301      	movs	r3, #1
1000fb18:	1c08      	adds	r0, r1, #0
1000fb1a:	0889      	lsrs	r1, r1, #2
1000fb1c:	4018      	ands	r0, r3
1000fb1e:	400b      	ands	r3, r1
1000fb20:	70d0      	strb	r0, [r2, #3]
1000fb22:	7113      	strb	r3, [r2, #4]
1000fb24:	4770      	bx	lr

1000fb26 <gapc_sign_counter_ind_handler>:
1000fb26:	0a00      	lsrs	r0, r0, #8
1000fb28:	8010      	strh	r0, [r2, #0]
1000fb2a:	784b      	ldrb	r3, [r1, #1]
1000fb2c:	0218      	lsls	r0, r3, #8
1000fb2e:	788b      	ldrb	r3, [r1, #2]
1000fb30:	041b      	lsls	r3, r3, #16
1000fb32:	4303      	orrs	r3, r0
1000fb34:	7808      	ldrb	r0, [r1, #0]
1000fb36:	4303      	orrs	r3, r0
1000fb38:	78c8      	ldrb	r0, [r1, #3]
1000fb3a:	0600      	lsls	r0, r0, #24
1000fb3c:	4303      	orrs	r3, r0
1000fb3e:	6053      	str	r3, [r2, #4]
1000fb40:	794b      	ldrb	r3, [r1, #5]
1000fb42:	0218      	lsls	r0, r3, #8
1000fb44:	798b      	ldrb	r3, [r1, #6]
1000fb46:	041b      	lsls	r3, r3, #16
1000fb48:	4303      	orrs	r3, r0
1000fb4a:	7908      	ldrb	r0, [r1, #4]
1000fb4c:	79c9      	ldrb	r1, [r1, #7]
1000fb4e:	4303      	orrs	r3, r0
1000fb50:	0609      	lsls	r1, r1, #24
1000fb52:	430b      	orrs	r3, r1
1000fb54:	2000      	movs	r0, #0
1000fb56:	6093      	str	r3, [r2, #8]
1000fb58:	4770      	bx	lr
	...

1000fb5c <gapc_peer_att_info_ind_handler>:
1000fb5c:	b510      	push	{r4, lr}
1000fb5e:	0a00      	lsrs	r0, r0, #8
1000fb60:	8010      	strh	r0, [r2, #0]
1000fb62:	7808      	ldrb	r0, [r1, #0]
1000fb64:	7090      	strb	r0, [r2, #2]
1000fb66:	788b      	ldrb	r3, [r1, #2]
1000fb68:	784c      	ldrb	r4, [r1, #1]
1000fb6a:	021b      	lsls	r3, r3, #8
1000fb6c:	4323      	orrs	r3, r4
1000fb6e:	8093      	strh	r3, [r2, #4]
1000fb70:	2801      	cmp	r0, #1
1000fb72:	d027      	beq.n	1000fbc4 <gapc_peer_att_info_ind_handler+0x68>
1000fb74:	2800      	cmp	r0, #0
1000fb76:	d017      	beq.n	1000fba8 <gapc_peer_att_info_ind_handler+0x4c>
1000fb78:	2802      	cmp	r0, #2
1000fb7a:	d12a      	bne.n	1000fbd2 <gapc_peer_att_info_ind_handler+0x76>
1000fb7c:	790b      	ldrb	r3, [r1, #4]
1000fb7e:	78c8      	ldrb	r0, [r1, #3]
1000fb80:	021b      	lsls	r3, r3, #8
1000fb82:	4303      	orrs	r3, r0
1000fb84:	8113      	strh	r3, [r2, #8]
1000fb86:	798b      	ldrb	r3, [r1, #6]
1000fb88:	7948      	ldrb	r0, [r1, #5]
1000fb8a:	021b      	lsls	r3, r3, #8
1000fb8c:	4303      	orrs	r3, r0
1000fb8e:	80d3      	strh	r3, [r2, #6]
1000fb90:	7a0b      	ldrb	r3, [r1, #8]
1000fb92:	79c8      	ldrb	r0, [r1, #7]
1000fb94:	021b      	lsls	r3, r3, #8
1000fb96:	4303      	orrs	r3, r0
1000fb98:	8193      	strh	r3, [r2, #12]
1000fb9a:	7a8b      	ldrb	r3, [r1, #10]
1000fb9c:	7a49      	ldrb	r1, [r1, #9]
1000fb9e:	021b      	lsls	r3, r3, #8
1000fba0:	430b      	orrs	r3, r1
1000fba2:	8153      	strh	r3, [r2, #10]
1000fba4:	2306      	movs	r3, #6
1000fba6:	e013      	b.n	1000fbd0 <gapc_peer_att_info_ind_handler+0x74>
1000fba8:	1c14      	adds	r4, r2, #0
1000fbaa:	1c20      	adds	r0, r4, #0
1000fbac:	790a      	ldrb	r2, [r1, #4]
1000fbae:	78cb      	ldrb	r3, [r1, #3]
1000fbb0:	0212      	lsls	r2, r2, #8
1000fbb2:	431a      	orrs	r2, r3
1000fbb4:	80e2      	strh	r2, [r4, #6]
1000fbb6:	4b07      	ldr	r3, [pc, #28]	; (1000fbd4 <gapc_peer_att_info_ind_handler+0x78>)
1000fbb8:	3008      	adds	r0, #8
1000fbba:	3105      	adds	r1, #5
1000fbbc:	4798      	blx	r3
1000fbbe:	2302      	movs	r3, #2
1000fbc0:	70a3      	strb	r3, [r4, #2]
1000fbc2:	e006      	b.n	1000fbd2 <gapc_peer_att_info_ind_handler+0x76>
1000fbc4:	790b      	ldrb	r3, [r1, #4]
1000fbc6:	78c9      	ldrb	r1, [r1, #3]
1000fbc8:	021b      	lsls	r3, r3, #8
1000fbca:	430b      	orrs	r3, r1
1000fbcc:	80d3      	strh	r3, [r2, #6]
1000fbce:	2305      	movs	r3, #5
1000fbd0:	7093      	strb	r3, [r2, #2]
1000fbd2:	bd10      	pop	{r4, pc}
1000fbd4:	10011c57 	.word	0x10011c57

1000fbd8 <gapc_con_channel_map_ind_handler>:
1000fbd8:	b508      	push	{r3, lr}
1000fbda:	2300      	movs	r3, #0
1000fbdc:	0a00      	lsrs	r0, r0, #8
1000fbde:	7013      	strb	r3, [r2, #0]
1000fbe0:	8050      	strh	r0, [r2, #2]
1000fbe2:	4b02      	ldr	r3, [pc, #8]	; (1000fbec <gapc_con_channel_map_ind_handler+0x14>)
1000fbe4:	1d10      	adds	r0, r2, #4
1000fbe6:	2205      	movs	r2, #5
1000fbe8:	4798      	blx	r3
1000fbea:	bd08      	pop	{r3, pc}
1000fbec:	10011c57 	.word	0x10011c57

1000fbf0 <gapc_lecb_connected>:
1000fbf0:	7843      	ldrb	r3, [r0, #1]
1000fbf2:	7802      	ldrb	r2, [r0, #0]
1000fbf4:	021b      	lsls	r3, r3, #8
1000fbf6:	4313      	orrs	r3, r2
1000fbf8:	800b      	strh	r3, [r1, #0]
1000fbfa:	78c3      	ldrb	r3, [r0, #3]
1000fbfc:	7882      	ldrb	r2, [r0, #2]
1000fbfe:	021b      	lsls	r3, r3, #8
1000fc00:	4313      	orrs	r3, r2
1000fc02:	804b      	strh	r3, [r1, #2]
1000fc04:	7943      	ldrb	r3, [r0, #5]
1000fc06:	7902      	ldrb	r2, [r0, #4]
1000fc08:	021b      	lsls	r3, r3, #8
1000fc0a:	4313      	orrs	r3, r2
1000fc0c:	808b      	strh	r3, [r1, #4]
1000fc0e:	79c3      	ldrb	r3, [r0, #7]
1000fc10:	7982      	ldrb	r2, [r0, #6]
1000fc12:	021b      	lsls	r3, r3, #8
1000fc14:	4313      	orrs	r3, r2
1000fc16:	80cb      	strh	r3, [r1, #6]
1000fc18:	2300      	movs	r3, #0
1000fc1a:	720b      	strb	r3, [r1, #8]
1000fc1c:	4770      	bx	lr

1000fc1e <gapc_lecb_disconnected>:
1000fc1e:	7843      	ldrb	r3, [r0, #1]
1000fc20:	7802      	ldrb	r2, [r0, #0]
1000fc22:	021b      	lsls	r3, r3, #8
1000fc24:	4313      	orrs	r3, r2
1000fc26:	800b      	strh	r3, [r1, #0]
1000fc28:	78c3      	ldrb	r3, [r0, #3]
1000fc2a:	7882      	ldrb	r2, [r0, #2]
1000fc2c:	021b      	lsls	r3, r3, #8
1000fc2e:	4313      	orrs	r3, r2
1000fc30:	804b      	strh	r3, [r1, #2]
1000fc32:	4770      	bx	lr

1000fc34 <gapc_lecb_connect_req_ind>:
1000fc34:	7843      	ldrb	r3, [r0, #1]
1000fc36:	7802      	ldrb	r2, [r0, #0]
1000fc38:	021b      	lsls	r3, r3, #8
1000fc3a:	4313      	orrs	r3, r2
1000fc3c:	800b      	strh	r3, [r1, #0]
1000fc3e:	78c3      	ldrb	r3, [r0, #3]
1000fc40:	7882      	ldrb	r2, [r0, #2]
1000fc42:	021b      	lsls	r3, r3, #8
1000fc44:	4313      	orrs	r3, r2
1000fc46:	804b      	strh	r3, [r1, #2]
1000fc48:	7943      	ldrb	r3, [r0, #5]
1000fc4a:	7902      	ldrb	r2, [r0, #4]
1000fc4c:	021b      	lsls	r3, r3, #8
1000fc4e:	4313      	orrs	r3, r2
1000fc50:	808b      	strh	r3, [r1, #4]
1000fc52:	79c3      	ldrb	r3, [r0, #7]
1000fc54:	7982      	ldrb	r2, [r0, #6]
1000fc56:	021b      	lsls	r3, r3, #8
1000fc58:	4313      	orrs	r3, r2
1000fc5a:	80cb      	strh	r3, [r1, #6]
1000fc5c:	4770      	bx	lr

1000fc5e <gapc_lecb_add_credit_resp_handler>:
1000fc5e:	7843      	ldrb	r3, [r0, #1]
1000fc60:	7802      	ldrb	r2, [r0, #0]
1000fc62:	021b      	lsls	r3, r3, #8
1000fc64:	4313      	orrs	r3, r2
1000fc66:	800b      	strh	r3, [r1, #0]
1000fc68:	78c3      	ldrb	r3, [r0, #3]
1000fc6a:	7882      	ldrb	r2, [r0, #2]
1000fc6c:	021b      	lsls	r3, r3, #8
1000fc6e:	4313      	orrs	r3, r2
1000fc70:	804b      	strh	r3, [r1, #2]
1000fc72:	7943      	ldrb	r3, [r0, #5]
1000fc74:	7902      	ldrb	r2, [r0, #4]
1000fc76:	021b      	lsls	r3, r3, #8
1000fc78:	4313      	orrs	r3, r2
1000fc7a:	808b      	strh	r3, [r1, #4]
1000fc7c:	4770      	bx	lr
	...

1000fc80 <gapm_reset_req_handler>:
1000fc80:	b573      	push	{r0, r1, r4, r5, r6, lr}
1000fc82:	466b      	mov	r3, sp
1000fc84:	4915      	ldr	r1, [pc, #84]	; (1000fcdc <gapm_reset_req_handler+0x5c>)
1000fc86:	4816      	ldr	r0, [pc, #88]	; (1000fce0 <gapm_reset_req_handler+0x60>)
1000fc88:	880c      	ldrh	r4, [r1, #0]
1000fc8a:	8809      	ldrh	r1, [r1, #0]
1000fc8c:	1ddd      	adds	r5, r3, #7
1000fc8e:	0a09      	lsrs	r1, r1, #8
1000fc90:	2300      	movs	r3, #0
1000fc92:	2202      	movs	r2, #2
1000fc94:	7141      	strb	r1, [r0, #5]
1000fc96:	26d0      	movs	r6, #208	; 0xd0
1000fc98:	2101      	movs	r1, #1
1000fc9a:	7104      	strb	r4, [r0, #4]
1000fc9c:	4c11      	ldr	r4, [pc, #68]	; (1000fce4 <gapm_reset_req_handler+0x64>)
1000fc9e:	702b      	strb	r3, [r5, #0]
1000fca0:	7002      	strb	r2, [r0, #0]
1000fca2:	70c3      	strb	r3, [r0, #3]
1000fca4:	320b      	adds	r2, #11
1000fca6:	7201      	strb	r1, [r0, #8]
1000fca8:	7181      	strb	r1, [r0, #6]
1000fcaa:	71c3      	strb	r3, [r0, #7]
1000fcac:	3108      	adds	r1, #8
1000fcae:	4b0e      	ldr	r3, [pc, #56]	; (1000fce8 <gapm_reset_req_handler+0x68>)
1000fcb0:	0136      	lsls	r6, r6, #4
1000fcb2:	7042      	strb	r2, [r0, #1]
1000fcb4:	7082      	strb	r2, [r0, #2]
1000fcb6:	80a2      	strh	r2, [r4, #4]
1000fcb8:	8026      	strh	r6, [r4, #0]
1000fcba:	4798      	blx	r3
1000fcbc:	1c28      	adds	r0, r5, #0
1000fcbe:	4b0b      	ldr	r3, [pc, #44]	; (1000fcec <gapm_reset_req_handler+0x6c>)
1000fcc0:	4798      	blx	r3
1000fcc2:	782b      	ldrb	r3, [r5, #0]
1000fcc4:	20e2      	movs	r0, #226	; 0xe2
1000fcc6:	2b00      	cmp	r3, #0
1000fcc8:	d106      	bne.n	1000fcd8 <gapm_reset_req_handler+0x58>
1000fcca:	68a3      	ldr	r3, [r4, #8]
1000fccc:	20e2      	movs	r0, #226	; 0xe2
1000fcce:	781a      	ldrb	r2, [r3, #0]
1000fcd0:	785b      	ldrb	r3, [r3, #1]
1000fcd2:	2a01      	cmp	r2, #1
1000fcd4:	d100      	bne.n	1000fcd8 <gapm_reset_req_handler+0x58>
1000fcd6:	1c18      	adds	r0, r3, #0
1000fcd8:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
1000fcda:	46c0      	nop			; (mov r8, r8)
1000fcdc:	1001a8c8 	.word	0x1001a8c8
1000fce0:	1001ac38 	.word	0x1001ac38
1000fce4:	1001a8bc 	.word	0x1001a8bc
1000fce8:	1000f0a9 	.word	0x1000f0a9
1000fcec:	1000f10d 	.word	0x1000f10d

1000fcf0 <gapm_set_dev_config_cmd_handler>:
1000fcf0:	b5f0      	push	{r4, r5, r6, r7, lr}
1000fcf2:	b089      	sub	sp, #36	; 0x24
1000fcf4:	9303      	str	r3, [sp, #12]
1000fcf6:	ab0e      	add	r3, sp, #56	; 0x38
1000fcf8:	781b      	ldrb	r3, [r3, #0]
1000fcfa:	4c37      	ldr	r4, [pc, #220]	; (1000fdd8 <gapm_set_dev_config_cmd_handler+0xe8>)
1000fcfc:	9304      	str	r3, [sp, #16]
1000fcfe:	ab0f      	add	r3, sp, #60	; 0x3c
1000fd00:	781b      	ldrb	r3, [r3, #0]
1000fd02:	270d      	movs	r7, #13
1000fd04:	9305      	str	r3, [sp, #20]
1000fd06:	ab10      	add	r3, sp, #64	; 0x40
1000fd08:	881b      	ldrh	r3, [r3, #0]
1000fd0a:	72a1      	strb	r1, [r4, #10]
1000fd0c:	9300      	str	r3, [sp, #0]
1000fd0e:	ab11      	add	r3, sp, #68	; 0x44
1000fd10:	881b      	ldrh	r3, [r3, #0]
1000fd12:	0a09      	lsrs	r1, r1, #8
1000fd14:	9301      	str	r3, [sp, #4]
1000fd16:	ab12      	add	r3, sp, #72	; 0x48
1000fd18:	881b      	ldrh	r3, [r3, #0]
1000fd1a:	7260      	strb	r0, [r4, #9]
1000fd1c:	9302      	str	r3, [sp, #8]
1000fd1e:	ab06      	add	r3, sp, #24
1000fd20:	1dde      	adds	r6, r3, #7
1000fd22:	2300      	movs	r3, #0
1000fd24:	7033      	strb	r3, [r6, #0]
1000fd26:	2304      	movs	r3, #4
1000fd28:	7023      	strb	r3, [r4, #0]
1000fd2a:	2300      	movs	r3, #0
1000fd2c:	70e3      	strb	r3, [r4, #3]
1000fd2e:	4b2b      	ldr	r3, [pc, #172]	; (1000fddc <gapm_set_dev_config_cmd_handler+0xec>)
1000fd30:	72e1      	strb	r1, [r4, #11]
1000fd32:	881d      	ldrh	r5, [r3, #0]
1000fd34:	881b      	ldrh	r3, [r3, #0]
1000fd36:	1c11      	adds	r1, r2, #0
1000fd38:	0a1b      	lsrs	r3, r3, #8
1000fd3a:	7163      	strb	r3, [r4, #5]
1000fd3c:	2303      	movs	r3, #3
1000fd3e:	7125      	strb	r5, [r4, #4]
1000fd40:	2206      	movs	r2, #6
1000fd42:	4d27      	ldr	r5, [pc, #156]	; (1000fde0 <gapm_set_dev_config_cmd_handler+0xf0>)
1000fd44:	4827      	ldr	r0, [pc, #156]	; (1000fde4 <gapm_set_dev_config_cmd_handler+0xf4>)
1000fd46:	7223      	strb	r3, [r4, #8]
1000fd48:	7067      	strb	r7, [r4, #1]
1000fd4a:	70a7      	strb	r7, [r4, #2]
1000fd4c:	47a8      	blx	r5
1000fd4e:	9903      	ldr	r1, [sp, #12]
1000fd50:	2210      	movs	r2, #16
1000fd52:	4825      	ldr	r0, [pc, #148]	; (1000fde8 <gapm_set_dev_config_cmd_handler+0xf8>)
1000fd54:	47a8      	blx	r5
1000fd56:	466a      	mov	r2, sp
1000fd58:	7c12      	ldrb	r2, [r2, #16]
1000fd5a:	1ce3      	adds	r3, r4, #3
1000fd5c:	77da      	strb	r2, [r3, #31]
1000fd5e:	466a      	mov	r2, sp
1000fd60:	7d12      	ldrb	r2, [r2, #20]
1000fd62:	1d23      	adds	r3, r4, #4
1000fd64:	77da      	strb	r2, [r3, #31]
1000fd66:	466a      	mov	r2, sp
1000fd68:	7812      	ldrb	r2, [r2, #0]
1000fd6a:	1d63      	adds	r3, r4, #5
1000fd6c:	77da      	strb	r2, [r3, #31]
1000fd6e:	9b00      	ldr	r3, [sp, #0]
1000fd70:	1da2      	adds	r2, r4, #6
1000fd72:	0a1b      	lsrs	r3, r3, #8
1000fd74:	77d3      	strb	r3, [r2, #31]
1000fd76:	466a      	mov	r2, sp
1000fd78:	7912      	ldrb	r2, [r2, #4]
1000fd7a:	1de3      	adds	r3, r4, #7
1000fd7c:	77da      	strb	r2, [r3, #31]
1000fd7e:	1c22      	adds	r2, r4, #0
1000fd80:	9b01      	ldr	r3, [sp, #4]
1000fd82:	3208      	adds	r2, #8
1000fd84:	0a1b      	lsrs	r3, r3, #8
1000fd86:	77d3      	strb	r3, [r2, #31]
1000fd88:	466a      	mov	r2, sp
1000fd8a:	1c23      	adds	r3, r4, #0
1000fd8c:	7a12      	ldrb	r2, [r2, #8]
1000fd8e:	3328      	adds	r3, #40	; 0x28
1000fd90:	701a      	strb	r2, [r3, #0]
1000fd92:	1c22      	adds	r2, r4, #0
1000fd94:	9b02      	ldr	r3, [sp, #8]
1000fd96:	3229      	adds	r2, #41	; 0x29
1000fd98:	0a1b      	lsrs	r3, r3, #8
1000fd9a:	7013      	strb	r3, [r2, #0]
1000fd9c:	23d0      	movs	r3, #208	; 0xd0
1000fd9e:	4d13      	ldr	r5, [pc, #76]	; (1000fdec <gapm_set_dev_config_cmd_handler+0xfc>)
1000fda0:	011b      	lsls	r3, r3, #4
1000fda2:	802b      	strh	r3, [r5, #0]
1000fda4:	2322      	movs	r3, #34	; 0x22
1000fda6:	71a3      	strb	r3, [r4, #6]
1000fda8:	2300      	movs	r3, #0
1000fdaa:	212a      	movs	r1, #42	; 0x2a
1000fdac:	71e3      	strb	r3, [r4, #7]
1000fdae:	1c20      	adds	r0, r4, #0
1000fdb0:	4b0f      	ldr	r3, [pc, #60]	; (1000fdf0 <gapm_set_dev_config_cmd_handler+0x100>)
1000fdb2:	80af      	strh	r7, [r5, #4]
1000fdb4:	4798      	blx	r3
1000fdb6:	1c30      	adds	r0, r6, #0
1000fdb8:	4b0e      	ldr	r3, [pc, #56]	; (1000fdf4 <gapm_set_dev_config_cmd_handler+0x104>)
1000fdba:	4798      	blx	r3
1000fdbc:	7833      	ldrb	r3, [r6, #0]
1000fdbe:	20e2      	movs	r0, #226	; 0xe2
1000fdc0:	2b00      	cmp	r3, #0
1000fdc2:	d106      	bne.n	1000fdd2 <gapm_set_dev_config_cmd_handler+0xe2>
1000fdc4:	68ab      	ldr	r3, [r5, #8]
1000fdc6:	20e2      	movs	r0, #226	; 0xe2
1000fdc8:	781a      	ldrb	r2, [r3, #0]
1000fdca:	785b      	ldrb	r3, [r3, #1]
1000fdcc:	2a03      	cmp	r2, #3
1000fdce:	d100      	bne.n	1000fdd2 <gapm_set_dev_config_cmd_handler+0xe2>
1000fdd0:	1c18      	adds	r0, r3, #0
1000fdd2:	b009      	add	sp, #36	; 0x24
1000fdd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000fdd6:	46c0      	nop			; (mov r8, r8)
1000fdd8:	1001ac38 	.word	0x1001ac38
1000fddc:	1001a8c8 	.word	0x1001a8c8
1000fde0:	10011c57 	.word	0x10011c57
1000fde4:	1001ac44 	.word	0x1001ac44
1000fde8:	1001ac4a 	.word	0x1001ac4a
1000fdec:	1001a8bc 	.word	0x1001a8bc
1000fdf0:	1000f0a9 	.word	0x1000f0a9
1000fdf4:	1000f10d 	.word	0x1000f10d

1000fdf8 <gapm_get_dev_config_cmd_handler>:
1000fdf8:	4684      	mov	ip, r0
1000fdfa:	4663      	mov	r3, ip
1000fdfc:	b5f0      	push	{r4, r5, r6, r7, lr}
1000fdfe:	b085      	sub	sp, #20
1000fe00:	9100      	str	r1, [sp, #0]
1000fe02:	20cf      	movs	r0, #207	; 0xcf
1000fe04:	2b01      	cmp	r3, #1
1000fe06:	d854      	bhi.n	1000feb2 <gapm_get_dev_config_cmd_handler+0xba>
1000fe08:	2900      	cmp	r1, #0
1000fe0a:	d052      	beq.n	1000feb2 <gapm_get_dev_config_cmd_handler+0xba>
1000fe0c:	2200      	movs	r2, #0
1000fe0e:	492a      	ldr	r1, [pc, #168]	; (1000feb8 <gapm_get_dev_config_cmd_handler+0xc0>)
1000fe10:	ab02      	add	r3, sp, #8
1000fe12:	880c      	ldrh	r4, [r1, #0]
1000fe14:	8809      	ldrh	r1, [r1, #0]
1000fe16:	1d9f      	adds	r7, r3, #6
1000fe18:	719a      	strb	r2, [r3, #6]
1000fe1a:	4b28      	ldr	r3, [pc, #160]	; (1000febc <gapm_get_dev_config_cmd_handler+0xc4>)
1000fe1c:	0a09      	lsrs	r1, r1, #8
1000fe1e:	250d      	movs	r5, #13
1000fe20:	2606      	movs	r6, #6
1000fe22:	7159      	strb	r1, [r3, #5]
1000fe24:	4661      	mov	r1, ip
1000fe26:	701e      	strb	r6, [r3, #0]
1000fe28:	705d      	strb	r5, [r3, #1]
1000fe2a:	709d      	strb	r5, [r3, #2]
1000fe2c:	70da      	strb	r2, [r3, #3]
1000fe2e:	711c      	strb	r4, [r3, #4]
1000fe30:	2901      	cmp	r1, #1
1000fe32:	d13e      	bne.n	1000feb2 <gapm_get_dev_config_cmd_handler+0xba>
1000fe34:	21d0      	movs	r1, #208	; 0xd0
1000fe36:	4c22      	ldr	r4, [pc, #136]	; (1000fec0 <gapm_get_dev_config_cmd_handler+0xc8>)
1000fe38:	0109      	lsls	r1, r1, #4
1000fe3a:	8061      	strh	r1, [r4, #2]
1000fe3c:	4921      	ldr	r1, [pc, #132]	; (1000fec4 <gapm_get_dev_config_cmd_handler+0xcc>)
1000fe3e:	71da      	strb	r2, [r3, #7]
1000fe40:	8021      	strh	r1, [r4, #0]
1000fe42:	4661      	mov	r1, ip
1000fe44:	721e      	strb	r6, [r3, #8]
1000fe46:	7199      	strb	r1, [r3, #6]
1000fe48:	1c18      	adds	r0, r3, #0
1000fe4a:	2109      	movs	r1, #9
1000fe4c:	4b1e      	ldr	r3, [pc, #120]	; (1000fec8 <gapm_get_dev_config_cmd_handler+0xd0>)
1000fe4e:	80a5      	strh	r5, [r4, #4]
1000fe50:	4798      	blx	r3
1000fe52:	1c38      	adds	r0, r7, #0
1000fe54:	4b1d      	ldr	r3, [pc, #116]	; (1000fecc <gapm_get_dev_config_cmd_handler+0xd4>)
1000fe56:	4798      	blx	r3
1000fe58:	783b      	ldrb	r3, [r7, #0]
1000fe5a:	20e2      	movs	r0, #226	; 0xe2
1000fe5c:	9301      	str	r3, [sp, #4]
1000fe5e:	2b00      	cmp	r3, #0
1000fe60:	d127      	bne.n	1000feb2 <gapm_get_dev_config_cmd_handler+0xba>
1000fe62:	8821      	ldrh	r1, [r4, #0]
1000fe64:	4a1a      	ldr	r2, [pc, #104]	; (1000fed0 <gapm_get_dev_config_cmd_handler+0xd8>)
1000fe66:	68a7      	ldr	r7, [r4, #8]
1000fe68:	3b01      	subs	r3, #1
1000fe6a:	4291      	cmp	r1, r2
1000fe6c:	d001      	beq.n	1000fe72 <gapm_get_dev_config_cmd_handler+0x7a>
1000fe6e:	8023      	strh	r3, [r4, #0]
1000fe70:	e01a      	b.n	1000fea8 <gapm_get_dev_config_cmd_handler+0xb0>
1000fe72:	8063      	strh	r3, [r4, #2]
1000fe74:	9b00      	ldr	r3, [sp, #0]
1000fe76:	1c39      	adds	r1, r7, #0
1000fe78:	1c58      	adds	r0, r3, #1
1000fe7a:	1c32      	adds	r2, r6, #0
1000fe7c:	4b15      	ldr	r3, [pc, #84]	; (1000fed4 <gapm_get_dev_config_cmd_handler+0xdc>)
1000fe7e:	4798      	blx	r3
1000fe80:	79bb      	ldrb	r3, [r7, #6]
1000fe82:	9a00      	ldr	r2, [sp, #0]
1000fe84:	7013      	strb	r3, [r2, #0]
1000fe86:	23d0      	movs	r3, #208	; 0xd0
1000fe88:	011b      	lsls	r3, r3, #4
1000fe8a:	8023      	strh	r3, [r4, #0]
1000fe8c:	ab02      	add	r3, sp, #8
1000fe8e:	80a5      	strh	r5, [r4, #4]
1000fe90:	1ddd      	adds	r5, r3, #7
1000fe92:	466b      	mov	r3, sp
1000fe94:	791b      	ldrb	r3, [r3, #4]
1000fe96:	1c28      	adds	r0, r5, #0
1000fe98:	702b      	strb	r3, [r5, #0]
1000fe9a:	4b0c      	ldr	r3, [pc, #48]	; (1000fecc <gapm_get_dev_config_cmd_handler+0xd4>)
1000fe9c:	4798      	blx	r3
1000fe9e:	782b      	ldrb	r3, [r5, #0]
1000fea0:	20d0      	movs	r0, #208	; 0xd0
1000fea2:	2b00      	cmp	r3, #0
1000fea4:	d105      	bne.n	1000feb2 <gapm_get_dev_config_cmd_handler+0xba>
1000fea6:	68a7      	ldr	r7, [r4, #8]
1000fea8:	783b      	ldrb	r3, [r7, #0]
1000feaa:	7878      	ldrb	r0, [r7, #1]
1000feac:	2b06      	cmp	r3, #6
1000feae:	d000      	beq.n	1000feb2 <gapm_get_dev_config_cmd_handler+0xba>
1000feb0:	20e2      	movs	r0, #226	; 0xe2
1000feb2:	b005      	add	sp, #20
1000feb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000feb6:	46c0      	nop			; (mov r8, r8)
1000feb8:	1001a8c8 	.word	0x1001a8c8
1000febc:	1001ac38 	.word	0x1001ac38
1000fec0:	1001a8bc 	.word	0x1001a8bc
1000fec4:	00000d08 	.word	0x00000d08
1000fec8:	1000f0a9 	.word	0x1000f0a9
1000fecc:	1000f10d 	.word	0x1000f10d
1000fed0:	0000ffff 	.word	0x0000ffff
1000fed4:	10011c57 	.word	0x10011c57

1000fed8 <gapm_cancel_cmd_handler>:
1000fed8:	b537      	push	{r0, r1, r2, r4, r5, lr}
1000feda:	4916      	ldr	r1, [pc, #88]	; (1000ff34 <gapm_cancel_cmd_handler+0x5c>)
1000fedc:	4816      	ldr	r0, [pc, #88]	; (1000ff38 <gapm_cancel_cmd_handler+0x60>)
1000fede:	880c      	ldrh	r4, [r1, #0]
1000fee0:	8809      	ldrh	r1, [r1, #0]
1000fee2:	466b      	mov	r3, sp
1000fee4:	0a09      	lsrs	r1, r1, #8
1000fee6:	7141      	strb	r1, [r0, #5]
1000fee8:	2102      	movs	r1, #2
1000feea:	2203      	movs	r2, #3
1000feec:	7201      	strb	r1, [r0, #8]
1000feee:	21d0      	movs	r1, #208	; 0xd0
1000fef0:	1ddd      	adds	r5, r3, #7
1000fef2:	2300      	movs	r3, #0
1000fef4:	7104      	strb	r4, [r0, #4]
1000fef6:	4c11      	ldr	r4, [pc, #68]	; (1000ff3c <gapm_cancel_cmd_handler+0x64>)
1000fef8:	7002      	strb	r2, [r0, #0]
1000fefa:	0109      	lsls	r1, r1, #4
1000fefc:	320a      	adds	r2, #10
1000fefe:	702b      	strb	r3, [r5, #0]
1000ff00:	7042      	strb	r2, [r0, #1]
1000ff02:	7082      	strb	r2, [r0, #2]
1000ff04:	70c3      	strb	r3, [r0, #3]
1000ff06:	8021      	strh	r1, [r4, #0]
1000ff08:	80a2      	strh	r2, [r4, #4]
1000ff0a:	71c3      	strb	r3, [r0, #7]
1000ff0c:	3a0c      	subs	r2, #12
1000ff0e:	2109      	movs	r1, #9
1000ff10:	4b0b      	ldr	r3, [pc, #44]	; (1000ff40 <gapm_cancel_cmd_handler+0x68>)
1000ff12:	7182      	strb	r2, [r0, #6]
1000ff14:	4798      	blx	r3
1000ff16:	1c28      	adds	r0, r5, #0
1000ff18:	4b0a      	ldr	r3, [pc, #40]	; (1000ff44 <gapm_cancel_cmd_handler+0x6c>)
1000ff1a:	4798      	blx	r3
1000ff1c:	7828      	ldrb	r0, [r5, #0]
1000ff1e:	2800      	cmp	r0, #0
1000ff20:	d001      	beq.n	1000ff26 <gapm_cancel_cmd_handler+0x4e>
1000ff22:	20e2      	movs	r0, #226	; 0xe2
1000ff24:	e004      	b.n	1000ff30 <gapm_cancel_cmd_handler+0x58>
1000ff26:	68a3      	ldr	r3, [r4, #8]
1000ff28:	785b      	ldrb	r3, [r3, #1]
1000ff2a:	2b44      	cmp	r3, #68	; 0x44
1000ff2c:	d000      	beq.n	1000ff30 <gapm_cancel_cmd_handler+0x58>
1000ff2e:	1c18      	adds	r0, r3, #0
1000ff30:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
1000ff32:	46c0      	nop			; (mov r8, r8)
1000ff34:	1001a8c8 	.word	0x1001a8c8
1000ff38:	1001ac38 	.word	0x1001ac38
1000ff3c:	1001a8bc 	.word	0x1001a8bc
1000ff40:	1000f0a9 	.word	0x1000f0a9
1000ff44:	1000f10d 	.word	0x1000f10d

1000ff48 <gapm_dev_bdaddr_ind_handler>:
1000ff48:	b538      	push	{r3, r4, r5, lr}
1000ff4a:	1c05      	adds	r5, r0, #0
1000ff4c:	1c0c      	adds	r4, r1, #0
1000ff4e:	1c48      	adds	r0, r1, #1
1000ff50:	2206      	movs	r2, #6
1000ff52:	1c29      	adds	r1, r5, #0
1000ff54:	4b02      	ldr	r3, [pc, #8]	; (1000ff60 <gapm_dev_bdaddr_ind_handler+0x18>)
1000ff56:	4798      	blx	r3
1000ff58:	79ab      	ldrb	r3, [r5, #6]
1000ff5a:	2000      	movs	r0, #0
1000ff5c:	7023      	strb	r3, [r4, #0]
1000ff5e:	bd38      	pop	{r3, r4, r5, pc}
1000ff60:	10011c57 	.word	0x10011c57

1000ff64 <gapm_cmp_evt>:
1000ff64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000ff66:	7803      	ldrb	r3, [r0, #0]
1000ff68:	7845      	ldrb	r5, [r0, #1]
1000ff6a:	3b0c      	subs	r3, #12
1000ff6c:	1e18      	subs	r0, r3, #0
1000ff6e:	280b      	cmp	r0, #11
1000ff70:	d900      	bls.n	1000ff74 <gapm_cmp_evt+0x10>
1000ff72:	e08d      	b.n	10010090 <gapm_cmp_evt+0x12c>
1000ff74:	1c0c      	adds	r4, r1, #0
1000ff76:	f004 fb8b 	bl	10014690 <__gnu_thumb1_case_uqi>
1000ff7a:	1952      	.short	0x1952
1000ff7c:	068b1919 	.word	0x068b1919
1000ff80:	8b595906 	.word	0x8b595906
1000ff84:	0d8b      	.short	0x0d8b
1000ff86:	2300      	movs	r3, #0
1000ff88:	2d45      	cmp	r5, #69	; 0x45
1000ff8a:	d000      	beq.n	1000ff8e <gapm_cmp_evt+0x2a>
1000ff8c:	1c2b      	adds	r3, r5, #0
1000ff8e:	7023      	strb	r3, [r4, #0]
1000ff90:	2002      	movs	r0, #2
1000ff92:	e07e      	b.n	10010092 <gapm_cmp_evt+0x12e>
1000ff94:	203b      	movs	r0, #59	; 0x3b
1000ff96:	2d00      	cmp	r5, #0
1000ff98:	d100      	bne.n	1000ff9c <gapm_cmp_evt+0x38>
1000ff9a:	e07a      	b.n	10010092 <gapm_cmp_evt+0x12e>
1000ff9c:	700d      	strb	r5, [r1, #0]
1000ff9e:	1c48      	adds	r0, r1, #1
1000ffa0:	2210      	movs	r2, #16
1000ffa2:	2100      	movs	r1, #0
1000ffa4:	4b3b      	ldr	r3, [pc, #236]	; (10010094 <gapm_cmp_evt+0x130>)
1000ffa6:	4798      	blx	r3
1000ffa8:	200f      	movs	r0, #15
1000ffaa:	e072      	b.n	10010092 <gapm_cmp_evt+0x12e>
1000ffac:	2d00      	cmp	r5, #0
1000ffae:	d134      	bne.n	1001001a <gapm_cmp_evt+0xb6>
1000ffb0:	4b39      	ldr	r3, [pc, #228]	; (10010098 <gapm_cmp_evt+0x134>)
1000ffb2:	4798      	blx	r3
1000ffb4:	1e43      	subs	r3, r0, #1
1000ffb6:	b2db      	uxtb	r3, r3
1000ffb8:	1c28      	adds	r0, r5, #0
1000ffba:	2b06      	cmp	r3, #6
1000ffbc:	d869      	bhi.n	10010092 <gapm_cmp_evt+0x12e>
1000ffbe:	466b      	mov	r3, sp
1000ffc0:	4e36      	ldr	r6, [pc, #216]	; (1001009c <gapm_cmp_evt+0x138>)
1000ffc2:	1dd9      	adds	r1, r3, #7
1000ffc4:	8db0      	ldrh	r0, [r6, #44]	; 0x2c
1000ffc6:	4b36      	ldr	r3, [pc, #216]	; (100100a0 <gapm_cmp_evt+0x13c>)
1000ffc8:	4798      	blx	r3
1000ffca:	2312      	movs	r3, #18
1000ffcc:	4358      	muls	r0, r3
1000ffce:	4935      	ldr	r1, [pc, #212]	; (100100a4 <gapm_cmp_evt+0x140>)
1000ffd0:	1809      	adds	r1, r1, r0
1000ffd2:	1c0b      	adds	r3, r1, #0
1000ffd4:	894a      	ldrh	r2, [r1, #10]
1000ffd6:	3308      	adds	r3, #8
1000ffd8:	8122      	strh	r2, [r4, #8]
1000ffda:	784f      	ldrb	r7, [r1, #1]
1000ffdc:	72a5      	strb	r5, [r4, #10]
1000ffde:	7027      	strb	r7, [r4, #0]
1000ffe0:	898a      	ldrh	r2, [r1, #12]
1000ffe2:	1c60      	adds	r0, r4, #1
1000ffe4:	81a2      	strh	r2, [r4, #12]
1000ffe6:	88db      	ldrh	r3, [r3, #6]
1000ffe8:	3102      	adds	r1, #2
1000ffea:	81e3      	strh	r3, [r4, #14]
1000ffec:	89cb      	ldrh	r3, [r1, #14]
1000ffee:	2206      	movs	r2, #6
1000fff0:	8223      	strh	r3, [r4, #16]
1000fff2:	4b2d      	ldr	r3, [pc, #180]	; (100100a8 <gapm_cmp_evt+0x144>)
1000fff4:	4798      	blx	r3
1000fff6:	2f00      	cmp	r7, #0
1000fff8:	d00a      	beq.n	10010010 <gapm_cmp_evt+0xac>
1000fffa:	79a3      	ldrb	r3, [r4, #6]
1000fffc:	223f      	movs	r2, #63	; 0x3f
1000fffe:	1c19      	adds	r1, r3, #0
10010000:	3501      	adds	r5, #1
10010002:	4391      	bics	r1, r2
10010004:	29c0      	cmp	r1, #192	; 0xc0
10010006:	d003      	beq.n	10010010 <gapm_cmp_evt+0xac>
10010008:	065b      	lsls	r3, r3, #25
1001000a:	0fdb      	lsrs	r3, r3, #31
1001000c:	3502      	adds	r5, #2
1001000e:	1aed      	subs	r5, r5, r3
10010010:	2301      	movs	r3, #1
10010012:	425b      	negs	r3, r3
10010014:	7025      	strb	r5, [r4, #0]
10010016:	85b3      	strh	r3, [r6, #44]	; 0x2c
10010018:	e038      	b.n	1001008c <gapm_cmp_evt+0x128>
1001001a:	700d      	strb	r5, [r1, #0]
1001001c:	e004      	b.n	10010028 <gapm_cmp_evt+0xc4>
1001001e:	2300      	movs	r3, #0
10010020:	2d45      	cmp	r5, #69	; 0x45
10010022:	d000      	beq.n	10010026 <gapm_cmp_evt+0xc2>
10010024:	1c2b      	adds	r3, r5, #0
10010026:	7023      	strb	r3, [r4, #0]
10010028:	2003      	movs	r0, #3
1001002a:	e032      	b.n	10010092 <gapm_cmp_evt+0x12e>
1001002c:	4e1b      	ldr	r6, [pc, #108]	; (1001009c <gapm_cmp_evt+0x138>)
1001002e:	2100      	movs	r1, #0
10010030:	8db0      	ldrh	r0, [r6, #44]	; 0x2c
10010032:	4b1b      	ldr	r3, [pc, #108]	; (100100a0 <gapm_cmp_evt+0x13c>)
10010034:	4798      	blx	r3
10010036:	2807      	cmp	r0, #7
10010038:	d818      	bhi.n	1001006c <gapm_cmp_evt+0x108>
1001003a:	2301      	movs	r3, #1
1001003c:	425b      	negs	r3, r3
1001003e:	85b3      	strh	r3, [r6, #44]	; 0x2c
10010040:	3313      	adds	r3, #19
10010042:	4358      	muls	r0, r3
10010044:	4917      	ldr	r1, [pc, #92]	; (100100a4 <gapm_cmp_evt+0x140>)
10010046:	1809      	adds	r1, r1, r0
10010048:	1c0b      	adds	r3, r1, #0
1001004a:	894a      	ldrh	r2, [r1, #10]
1001004c:	3308      	adds	r3, #8
1001004e:	8122      	strh	r2, [r4, #8]
10010050:	784a      	ldrb	r2, [r1, #1]
10010052:	72a5      	strb	r5, [r4, #10]
10010054:	7022      	strb	r2, [r4, #0]
10010056:	898a      	ldrh	r2, [r1, #12]
10010058:	1c60      	adds	r0, r4, #1
1001005a:	81a2      	strh	r2, [r4, #12]
1001005c:	88db      	ldrh	r3, [r3, #6]
1001005e:	3102      	adds	r1, #2
10010060:	81e3      	strh	r3, [r4, #14]
10010062:	89cb      	ldrh	r3, [r1, #14]
10010064:	2206      	movs	r2, #6
10010066:	8223      	strh	r3, [r4, #16]
10010068:	4b0f      	ldr	r3, [pc, #60]	; (100100a8 <gapm_cmp_evt+0x144>)
1001006a:	4798      	blx	r3
1001006c:	2200      	movs	r2, #0
1001006e:	7823      	ldrb	r3, [r4, #0]
10010070:	4293      	cmp	r3, r2
10010072:	d00a      	beq.n	1001008a <gapm_cmp_evt+0x126>
10010074:	79a3      	ldrb	r3, [r4, #6]
10010076:	323f      	adds	r2, #63	; 0x3f
10010078:	1c19      	adds	r1, r3, #0
1001007a:	4391      	bics	r1, r2
1001007c:	3a3e      	subs	r2, #62	; 0x3e
1001007e:	29c0      	cmp	r1, #192	; 0xc0
10010080:	d003      	beq.n	1001008a <gapm_cmp_evt+0x126>
10010082:	065b      	lsls	r3, r3, #25
10010084:	0fdb      	lsrs	r3, r3, #31
10010086:	3202      	adds	r2, #2
10010088:	1ad2      	subs	r2, r2, r3
1001008a:	7022      	strb	r2, [r4, #0]
1001008c:	2005      	movs	r0, #5
1001008e:	e000      	b.n	10010092 <gapm_cmp_evt+0x12e>
10010090:	2000      	movs	r0, #0
10010092:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10010094:	10011c69 	.word	0x10011c69
10010098:	1000f2b5 	.word	0x1000f2b5
1001009c:	1001a95a 	.word	0x1001a95a
100100a0:	1000f279 	.word	0x1000f279
100100a4:	1001a8ca 	.word	0x1001a8ca
100100a8:	10011c57 	.word	0x10011c57

100100ac <gapm_start_adv_cmd_handler>:
100100ac:	b5f0      	push	{r4, r5, r6, r7, lr}
100100ae:	b089      	sub	sp, #36	; 0x24
100100b0:	9303      	str	r3, [sp, #12]
100100b2:	ab0e      	add	r3, sp, #56	; 0x38
100100b4:	9102      	str	r1, [sp, #8]
100100b6:	cb02      	ldmia	r3!, {r1}
100100b8:	aa08      	add	r2, sp, #32
100100ba:	881b      	ldrh	r3, [r3, #0]
100100bc:	4e3c      	ldr	r6, [pc, #240]	; (100101b0 <gapm_start_adv_cmd_handler+0x104>)
100100be:	9300      	str	r3, [sp, #0]
100100c0:	ab10      	add	r3, sp, #64	; 0x40
100100c2:	881b      	ldrh	r3, [r3, #0]
100100c4:	240d      	movs	r4, #13
100100c6:	469c      	mov	ip, r3
100100c8:	ab11      	add	r3, sp, #68	; 0x44
100100ca:	781b      	ldrb	r3, [r3, #0]
100100cc:	9304      	str	r3, [sp, #16]
100100ce:	ab12      	add	r3, sp, #72	; 0x48
100100d0:	781b      	ldrb	r3, [r3, #0]
100100d2:	9305      	str	r3, [sp, #20]
100100d4:	ab13      	add	r3, sp, #76	; 0x4c
100100d6:	781b      	ldrb	r3, [r3, #0]
100100d8:	9306      	str	r3, [sp, #24]
100100da:	ab14      	add	r3, sp, #80	; 0x50
100100dc:	781b      	ldrb	r3, [r3, #0]
100100de:	9301      	str	r3, [sp, #4]
100100e0:	2319      	movs	r3, #25
100100e2:	189b      	adds	r3, r3, r2
100100e4:	7fdd      	ldrb	r5, [r3, #31]
100100e6:	ab18      	add	r3, sp, #96	; 0x60
100100e8:	881f      	ldrh	r7, [r3, #0]
100100ea:	ab19      	add	r3, sp, #100	; 0x64
100100ec:	781b      	ldrb	r3, [r3, #0]
100100ee:	8832      	ldrh	r2, [r6, #0]
100100f0:	9307      	str	r3, [sp, #28]
100100f2:	4b30      	ldr	r3, [pc, #192]	; (100101b4 <gapm_start_adv_cmd_handler+0x108>)
100100f4:	8836      	ldrh	r6, [r6, #0]
100100f6:	711a      	strb	r2, [r3, #4]
100100f8:	466a      	mov	r2, sp
100100fa:	7a12      	ldrb	r2, [r2, #8]
100100fc:	701c      	strb	r4, [r3, #0]
100100fe:	705c      	strb	r4, [r3, #1]
10010100:	709c      	strb	r4, [r3, #2]
10010102:	725a      	strb	r2, [r3, #9]
10010104:	2400      	movs	r4, #0
10010106:	466a      	mov	r2, sp
10010108:	0a36      	lsrs	r6, r6, #8
1001010a:	70dc      	strb	r4, [r3, #3]
1001010c:	7218      	strb	r0, [r3, #8]
1001010e:	729c      	strb	r4, [r3, #10]
10010110:	715e      	strb	r6, [r3, #5]
10010112:	72dc      	strb	r4, [r3, #11]
10010114:	7812      	ldrb	r2, [r2, #0]
10010116:	380e      	subs	r0, #14
10010118:	731a      	strb	r2, [r3, #12]
1001011a:	9a00      	ldr	r2, [sp, #0]
1001011c:	0a14      	lsrs	r4, r2, #8
1001011e:	4662      	mov	r2, ip
10010120:	739a      	strb	r2, [r3, #14]
10010122:	4662      	mov	r2, ip
10010124:	735c      	strb	r4, [r3, #13]
10010126:	0a14      	lsrs	r4, r2, #8
10010128:	466a      	mov	r2, sp
1001012a:	7c12      	ldrb	r2, [r2, #16]
1001012c:	73dc      	strb	r4, [r3, #15]
1001012e:	741a      	strb	r2, [r3, #16]
10010130:	1c1c      	adds	r4, r3, #0
10010132:	2801      	cmp	r0, #1
10010134:	d809      	bhi.n	1001014a <gapm_start_adv_cmd_handler+0x9e>
10010136:	2900      	cmp	r1, #0
10010138:	d003      	beq.n	10010142 <gapm_start_adv_cmd_handler+0x96>
1001013a:	481f      	ldr	r0, [pc, #124]	; (100101b8 <gapm_start_adv_cmd_handler+0x10c>)
1001013c:	2206      	movs	r2, #6
1001013e:	4b1f      	ldr	r3, [pc, #124]	; (100101bc <gapm_start_adv_cmd_handler+0x110>)
10010140:	4798      	blx	r3
10010142:	466b      	mov	r3, sp
10010144:	7b1b      	ldrb	r3, [r3, #12]
10010146:	75e3      	strb	r3, [r4, #23]
10010148:	e014      	b.n	10010174 <gapm_start_adv_cmd_handler+0xc8>
1001014a:	466b      	mov	r3, sp
1001014c:	7d1b      	ldrb	r3, [r3, #20]
1001014e:	9915      	ldr	r1, [sp, #84]	; 0x54
10010150:	7463      	strb	r3, [r4, #17]
10010152:	466b      	mov	r3, sp
10010154:	7e1b      	ldrb	r3, [r3, #24]
10010156:	9a01      	ldr	r2, [sp, #4]
10010158:	74a3      	strb	r3, [r4, #18]
1001015a:	466b      	mov	r3, sp
1001015c:	791b      	ldrb	r3, [r3, #4]
1001015e:	4818      	ldr	r0, [pc, #96]	; (100101c0 <gapm_start_adv_cmd_handler+0x114>)
10010160:	4e16      	ldr	r6, [pc, #88]	; (100101bc <gapm_start_adv_cmd_handler+0x110>)
10010162:	74e3      	strb	r3, [r4, #19]
10010164:	47b0      	blx	r6
10010166:	1c23      	adds	r3, r4, #0
10010168:	4816      	ldr	r0, [pc, #88]	; (100101c4 <gapm_start_adv_cmd_handler+0x118>)
1001016a:	3330      	adds	r3, #48	; 0x30
1001016c:	9917      	ldr	r1, [sp, #92]	; 0x5c
1001016e:	1c2a      	adds	r2, r5, #0
10010170:	701d      	strb	r5, [r3, #0]
10010172:	47b0      	blx	r6
10010174:	1c22      	adds	r2, r4, #0
10010176:	23a5      	movs	r3, #165	; 0xa5
10010178:	3250      	adds	r2, #80	; 0x50
1001017a:	7013      	strb	r3, [r2, #0]
1001017c:	1c22      	adds	r2, r4, #0
1001017e:	3251      	adds	r2, #81	; 0x51
10010180:	7013      	strb	r3, [r2, #0]
10010182:	1c23      	adds	r3, r4, #0
10010184:	1c22      	adds	r2, r4, #0
10010186:	3352      	adds	r3, #82	; 0x52
10010188:	701f      	strb	r7, [r3, #0]
1001018a:	3253      	adds	r2, #83	; 0x53
1001018c:	0a3b      	lsrs	r3, r7, #8
1001018e:	7013      	strb	r3, [r2, #0]
10010190:	466a      	mov	r2, sp
10010192:	1c23      	adds	r3, r4, #0
10010194:	7f12      	ldrb	r2, [r2, #28]
10010196:	3354      	adds	r3, #84	; 0x54
10010198:	701a      	strb	r2, [r3, #0]
1001019a:	234d      	movs	r3, #77	; 0x4d
1001019c:	2500      	movs	r5, #0
1001019e:	71a3      	strb	r3, [r4, #6]
100101a0:	1c20      	adds	r0, r4, #0
100101a2:	2155      	movs	r1, #85	; 0x55
100101a4:	4b08      	ldr	r3, [pc, #32]	; (100101c8 <gapm_start_adv_cmd_handler+0x11c>)
100101a6:	71e5      	strb	r5, [r4, #7]
100101a8:	4798      	blx	r3
100101aa:	1c28      	adds	r0, r5, #0
100101ac:	b009      	add	sp, #36	; 0x24
100101ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
100101b0:	1001a8c8 	.word	0x1001a8c8
100101b4:	1001ac38 	.word	0x1001ac38
100101b8:	1001ac49 	.word	0x1001ac49
100101bc:	10011c57 	.word	0x10011c57
100101c0:	1001ac4c 	.word	0x1001ac4c
100101c4:	1001ac69 	.word	0x1001ac69
100101c8:	1000f0a9 	.word	0x1000f0a9

100101cc <get_gap_local_addr_type>:
100101cc:	4b04      	ldr	r3, [pc, #16]	; (100101e0 <get_gap_local_addr_type+0x14>)
100101ce:	2001      	movs	r0, #1
100101d0:	791b      	ldrb	r3, [r3, #4]
100101d2:	2b02      	cmp	r3, #2
100101d4:	d003      	beq.n	100101de <get_gap_local_addr_type+0x12>
100101d6:	3b03      	subs	r3, #3
100101d8:	4258      	negs	r0, r3
100101da:	4158      	adcs	r0, r3
100101dc:	0040      	lsls	r0, r0, #1
100101de:	4770      	bx	lr
100101e0:	1001a95a 	.word	0x1001a95a

100101e4 <gapm_adv_report_evt_handler>:
100101e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
100101e6:	7843      	ldrb	r3, [r0, #1]
100101e8:	1c05      	adds	r5, r0, #0
100101ea:	9301      	str	r3, [sp, #4]
100101ec:	466b      	mov	r3, sp
100101ee:	1c0c      	adds	r4, r1, #0
100101f0:	791b      	ldrb	r3, [r3, #4]
100101f2:	7806      	ldrb	r6, [r0, #0]
100101f4:	2206      	movs	r2, #6
100101f6:	704b      	strb	r3, [r1, #1]
100101f8:	1c88      	adds	r0, r1, #2
100101fa:	4f1b      	ldr	r7, [pc, #108]	; (10010268 <gapm_adv_report_evt_handler+0x84>)
100101fc:	1ca9      	adds	r1, r5, #2
100101fe:	47b8      	blx	r7
10010200:	1c20      	adds	r0, r4, #0
10010202:	1c29      	adds	r1, r5, #0
10010204:	7a2a      	ldrb	r2, [r5, #8]
10010206:	3008      	adds	r0, #8
10010208:	77c2      	strb	r2, [r0, #31]
1001020a:	3109      	adds	r1, #9
1001020c:	3528      	adds	r5, #40	; 0x28
1001020e:	47b8      	blx	r7
10010210:	782b      	ldrb	r3, [r5, #0]
10010212:	b25a      	sxtb	r2, r3
10010214:	2a00      	cmp	r2, #0
10010216:	da01      	bge.n	1001021c <gapm_adv_report_evt_handler+0x38>
10010218:	3301      	adds	r3, #1
1001021a:	b2db      	uxtb	r3, r3
1001021c:	1c22      	adds	r2, r4, #0
1001021e:	3228      	adds	r2, #40	; 0x28
10010220:	7013      	strb	r3, [r2, #0]
10010222:	2200      	movs	r2, #0
10010224:	9b01      	ldr	r3, [sp, #4]
10010226:	4293      	cmp	r3, r2
10010228:	d00a      	beq.n	10010240 <gapm_adv_report_evt_handler+0x5c>
1001022a:	79e3      	ldrb	r3, [r4, #7]
1001022c:	323f      	adds	r2, #63	; 0x3f
1001022e:	1c19      	adds	r1, r3, #0
10010230:	4391      	bics	r1, r2
10010232:	3a3e      	subs	r2, #62	; 0x3e
10010234:	29c0      	cmp	r1, #192	; 0xc0
10010236:	d003      	beq.n	10010240 <gapm_adv_report_evt_handler+0x5c>
10010238:	065b      	lsls	r3, r3, #25
1001023a:	0fdb      	lsrs	r3, r3, #31
1001023c:	3202      	adds	r2, #2
1001023e:	1ad2      	subs	r2, r2, r3
10010240:	7062      	strb	r2, [r4, #1]
10010242:	2e04      	cmp	r6, #4
10010244:	d80f      	bhi.n	10010266 <gapm_adv_report_evt_handler+0x82>
10010246:	1c30      	adds	r0, r6, #0
10010248:	f004 fa22 	bl	10014690 <__gnu_thumb1_case_uqi>
1001024c:	09070503 	.word	0x09070503
10010250:	0b          	.byte	0x0b
10010251:	00          	.byte	0x00
10010252:	2300      	movs	r3, #0
10010254:	e006      	b.n	10010264 <gapm_adv_report_evt_handler+0x80>
10010256:	2301      	movs	r3, #1
10010258:	e004      	b.n	10010264 <gapm_adv_report_evt_handler+0x80>
1001025a:	2302      	movs	r3, #2
1001025c:	e002      	b.n	10010264 <gapm_adv_report_evt_handler+0x80>
1001025e:	2303      	movs	r3, #3
10010260:	e000      	b.n	10010264 <gapm_adv_report_evt_handler+0x80>
10010262:	2305      	movs	r3, #5
10010264:	7023      	strb	r3, [r4, #0]
10010266:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
10010268:	10011c57 	.word	0x10011c57

1001026c <gapm_resolv_addr_cmd_handler>:
1001026c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1001026e:	2314      	movs	r3, #20
10010270:	4c12      	ldr	r4, [pc, #72]	; (100102bc <gapm_resolv_addr_cmd_handler+0x50>)
10010272:	1c17      	adds	r7, r2, #0
10010274:	7023      	strb	r3, [r4, #0]
10010276:	3b07      	subs	r3, #7
10010278:	7063      	strb	r3, [r4, #1]
1001027a:	70a3      	strb	r3, [r4, #2]
1001027c:	2300      	movs	r3, #0
1001027e:	70e3      	strb	r3, [r4, #3]
10010280:	4b0f      	ldr	r3, [pc, #60]	; (100102c0 <gapm_resolv_addr_cmd_handler+0x54>)
10010282:	1c05      	adds	r5, r0, #0
10010284:	881a      	ldrh	r2, [r3, #0]
10010286:	881b      	ldrh	r3, [r3, #0]
10010288:	4e0e      	ldr	r6, [pc, #56]	; (100102c4 <gapm_resolv_addr_cmd_handler+0x58>)
1001028a:	0a1b      	lsrs	r3, r3, #8
1001028c:	7163      	strb	r3, [r4, #5]
1001028e:	2317      	movs	r3, #23
10010290:	012d      	lsls	r5, r5, #4
10010292:	7122      	strb	r2, [r4, #4]
10010294:	7260      	strb	r0, [r4, #9]
10010296:	2206      	movs	r2, #6
10010298:	480b      	ldr	r0, [pc, #44]	; (100102c8 <gapm_resolv_addr_cmd_handler+0x5c>)
1001029a:	7223      	strb	r3, [r4, #8]
1001029c:	47b0      	blx	r6
1001029e:	1c39      	adds	r1, r7, #0
100102a0:	1c2a      	adds	r2, r5, #0
100102a2:	480a      	ldr	r0, [pc, #40]	; (100102cc <gapm_resolv_addr_cmd_handler+0x60>)
100102a4:	47b0      	blx	r6
100102a6:	1c29      	adds	r1, r5, #0
100102a8:	3110      	adds	r1, #16
100102aa:	1c0b      	adds	r3, r1, #0
100102ac:	3b08      	subs	r3, #8
100102ae:	71a3      	strb	r3, [r4, #6]
100102b0:	121b      	asrs	r3, r3, #8
100102b2:	71e3      	strb	r3, [r4, #7]
100102b4:	1c20      	adds	r0, r4, #0
100102b6:	4b06      	ldr	r3, [pc, #24]	; (100102d0 <gapm_resolv_addr_cmd_handler+0x64>)
100102b8:	4798      	blx	r3
100102ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100102bc:	1001ac38 	.word	0x1001ac38
100102c0:	1001a8c8 	.word	0x1001a8c8
100102c4:	10011c57 	.word	0x10011c57
100102c8:	1001ac42 	.word	0x1001ac42
100102cc:	1001ac48 	.word	0x1001ac48
100102d0:	1000f0a9 	.word	0x1000f0a9

100102d4 <gapm_addr_solved_ind_handler>:
100102d4:	b570      	push	{r4, r5, r6, lr}
100102d6:	1c04      	adds	r4, r0, #0
100102d8:	1c08      	adds	r0, r1, #0
100102da:	1c0d      	adds	r5, r1, #0
100102dc:	4e05      	ldr	r6, [pc, #20]	; (100102f4 <gapm_addr_solved_ind_handler+0x20>)
100102de:	1c21      	adds	r1, r4, #0
100102e0:	2206      	movs	r2, #6
100102e2:	3011      	adds	r0, #17
100102e4:	47b0      	blx	r6
100102e6:	1c68      	adds	r0, r5, #1
100102e8:	1da1      	adds	r1, r4, #6
100102ea:	2210      	movs	r2, #16
100102ec:	47b0      	blx	r6
100102ee:	2300      	movs	r3, #0
100102f0:	702b      	strb	r3, [r5, #0]
100102f2:	bd70      	pop	{r4, r5, r6, pc}
100102f4:	10011c57 	.word	0x10011c57

100102f8 <gapm_profile_added_ind_handler>:
100102f8:	b510      	push	{r4, lr}
100102fa:	7843      	ldrb	r3, [r0, #1]
100102fc:	7902      	ldrb	r2, [r0, #4]
100102fe:	7944      	ldrb	r4, [r0, #5]
10010300:	7800      	ldrb	r0, [r0, #0]
10010302:	021b      	lsls	r3, r3, #8
10010304:	4303      	orrs	r3, r0
10010306:	2b1b      	cmp	r3, #27
10010308:	d104      	bne.n	10010314 <gapm_profile_added_ind_handler+0x1c>
1001030a:	2300      	movs	r3, #0
1001030c:	700b      	strb	r3, [r1, #0]
1001030e:	0223      	lsls	r3, r4, #8
10010310:	4313      	orrs	r3, r2
10010312:	804b      	strh	r3, [r1, #2]
10010314:	203b      	movs	r0, #59	; 0x3b
10010316:	bd10      	pop	{r4, pc}

10010318 <gattc_read_req_ind_parser>:
10010318:	7843      	ldrb	r3, [r0, #1]
1001031a:	7802      	ldrb	r2, [r0, #0]
1001031c:	021b      	lsls	r3, r3, #8
1001031e:	4313      	orrs	r3, r2
10010320:	804b      	strh	r3, [r1, #2]
10010322:	4770      	bx	lr

10010324 <gattc_write_req_ind_parser>:
10010324:	b508      	push	{r3, lr}
10010326:	1c13      	adds	r3, r2, #0
10010328:	0a00      	lsrs	r0, r0, #8
1001032a:	8010      	strh	r0, [r2, #0]
1001032c:	784a      	ldrb	r2, [r1, #1]
1001032e:	7808      	ldrb	r0, [r1, #0]
10010330:	0212      	lsls	r2, r2, #8
10010332:	4302      	orrs	r2, r0
10010334:	805a      	strh	r2, [r3, #2]
10010336:	78ca      	ldrb	r2, [r1, #3]
10010338:	7888      	ldrb	r0, [r1, #2]
1001033a:	0212      	lsls	r2, r2, #8
1001033c:	4302      	orrs	r2, r0
1001033e:	809a      	strh	r2, [r3, #4]
10010340:	794a      	ldrb	r2, [r1, #5]
10010342:	7908      	ldrb	r0, [r1, #4]
10010344:	0212      	lsls	r2, r2, #8
10010346:	4302      	orrs	r2, r0
10010348:	80da      	strh	r2, [r3, #6]
1001034a:	3308      	adds	r3, #8
1001034c:	1c18      	adds	r0, r3, #0
1001034e:	3106      	adds	r1, #6
10010350:	4b01      	ldr	r3, [pc, #4]	; (10010358 <gattc_write_req_ind_parser+0x34>)
10010352:	4798      	blx	r3
10010354:	bd08      	pop	{r3, pc}
10010356:	46c0      	nop			; (mov r8, r8)
10010358:	10011c57 	.word	0x10011c57

1001035c <gattc_att_info_req_parser>:
1001035c:	7843      	ldrb	r3, [r0, #1]
1001035e:	7802      	ldrb	r2, [r0, #0]
10010360:	021b      	lsls	r3, r3, #8
10010362:	4313      	orrs	r3, r2
10010364:	800b      	strh	r3, [r1, #0]
10010366:	4770      	bx	lr

10010368 <gattc_read_cfm>:
10010368:	b538      	push	{r3, r4, r5, lr}
1001036a:	2514      	movs	r5, #20
1001036c:	1c1c      	adds	r4, r3, #0
1001036e:	4b14      	ldr	r3, [pc, #80]	; (100103c0 <gattc_read_cfm+0x58>)
10010370:	70d9      	strb	r1, [r3, #3]
10010372:	4914      	ldr	r1, [pc, #80]	; (100103c4 <gattc_read_cfm+0x5c>)
10010374:	701d      	strb	r5, [r3, #0]
10010376:	3d08      	subs	r5, #8
10010378:	705d      	strb	r5, [r3, #1]
1001037a:	709d      	strb	r5, [r3, #2]
1001037c:	880d      	ldrh	r5, [r1, #0]
1001037e:	8809      	ldrh	r1, [r1, #0]
10010380:	7218      	strb	r0, [r3, #8]
10010382:	0a09      	lsrs	r1, r1, #8
10010384:	7159      	strb	r1, [r3, #5]
10010386:	0a00      	lsrs	r0, r0, #8
10010388:	0a21      	lsrs	r1, r4, #8
1001038a:	711d      	strb	r5, [r3, #4]
1001038c:	7258      	strb	r0, [r3, #9]
1001038e:	729c      	strb	r4, [r3, #10]
10010390:	72d9      	strb	r1, [r3, #11]
10010392:	731a      	strb	r2, [r3, #12]
10010394:	1c1d      	adds	r5, r3, #0
10010396:	2c00      	cmp	r4, #0
10010398:	d007      	beq.n	100103aa <gattc_read_cfm+0x42>
1001039a:	9904      	ldr	r1, [sp, #16]
1001039c:	1c22      	adds	r2, r4, #0
1001039e:	480a      	ldr	r0, [pc, #40]	; (100103c8 <gattc_read_cfm+0x60>)
100103a0:	4b0a      	ldr	r3, [pc, #40]	; (100103cc <gattc_read_cfm+0x64>)
100103a2:	340d      	adds	r4, #13
100103a4:	4798      	blx	r3
100103a6:	b2a1      	uxth	r1, r4
100103a8:	e001      	b.n	100103ae <gattc_read_cfm+0x46>
100103aa:	210e      	movs	r1, #14
100103ac:	735c      	strb	r4, [r3, #13]
100103ae:	1c0b      	adds	r3, r1, #0
100103b0:	3b08      	subs	r3, #8
100103b2:	71ab      	strb	r3, [r5, #6]
100103b4:	121b      	asrs	r3, r3, #8
100103b6:	71eb      	strb	r3, [r5, #7]
100103b8:	1c28      	adds	r0, r5, #0
100103ba:	4b05      	ldr	r3, [pc, #20]	; (100103d0 <gattc_read_cfm+0x68>)
100103bc:	4798      	blx	r3
100103be:	bd38      	pop	{r3, r4, r5, pc}
100103c0:	1001ac38 	.word	0x1001ac38
100103c4:	1001a8c8 	.word	0x1001a8c8
100103c8:	1001ac45 	.word	0x1001ac45
100103cc:	10011c57 	.word	0x10011c57
100103d0:	1000f0a9 	.word	0x1000f0a9

100103d4 <gattc_write_cfm>:
100103d4:	4b0d      	ldr	r3, [pc, #52]	; (1001040c <gattc_write_cfm+0x38>)
100103d6:	b510      	push	{r4, lr}
100103d8:	729a      	strb	r2, [r3, #10]
100103da:	2203      	movs	r2, #3
100103dc:	2416      	movs	r4, #22
100103de:	719a      	strb	r2, [r3, #6]
100103e0:	2200      	movs	r2, #0
100103e2:	70d9      	strb	r1, [r3, #3]
100103e4:	490a      	ldr	r1, [pc, #40]	; (10010410 <gattc_write_cfm+0x3c>)
100103e6:	701c      	strb	r4, [r3, #0]
100103e8:	3c0a      	subs	r4, #10
100103ea:	705c      	strb	r4, [r3, #1]
100103ec:	709c      	strb	r4, [r3, #2]
100103ee:	880c      	ldrh	r4, [r1, #0]
100103f0:	8809      	ldrh	r1, [r1, #0]
100103f2:	7218      	strb	r0, [r3, #8]
100103f4:	0a09      	lsrs	r1, r1, #8
100103f6:	0a00      	lsrs	r0, r0, #8
100103f8:	711c      	strb	r4, [r3, #4]
100103fa:	7159      	strb	r1, [r3, #5]
100103fc:	7258      	strb	r0, [r3, #9]
100103fe:	71da      	strb	r2, [r3, #7]
10010400:	1c18      	adds	r0, r3, #0
10010402:	210b      	movs	r1, #11
10010404:	4b03      	ldr	r3, [pc, #12]	; (10010414 <gattc_write_cfm+0x40>)
10010406:	4798      	blx	r3
10010408:	bd10      	pop	{r4, pc}
1001040a:	46c0      	nop			; (mov r8, r8)
1001040c:	1001ac38 	.word	0x1001ac38
10010410:	1001a8c8 	.word	0x1001a8c8
10010414:	1000f0a9 	.word	0x1000f0a9

10010418 <gattc_att_info_cfm>:
10010418:	b538      	push	{r3, r4, r5, lr}
1001041a:	4c0e      	ldr	r4, [pc, #56]	; (10010454 <gattc_att_info_cfm+0x3c>)
1001041c:	2518      	movs	r5, #24
1001041e:	7323      	strb	r3, [r4, #12]
10010420:	2305      	movs	r3, #5
10010422:	71a3      	strb	r3, [r4, #6]
10010424:	2300      	movs	r3, #0
10010426:	70e1      	strb	r1, [r4, #3]
10010428:	490b      	ldr	r1, [pc, #44]	; (10010458 <gattc_att_info_cfm+0x40>)
1001042a:	7025      	strb	r5, [r4, #0]
1001042c:	3d0c      	subs	r5, #12
1001042e:	7065      	strb	r5, [r4, #1]
10010430:	70a5      	strb	r5, [r4, #2]
10010432:	880d      	ldrh	r5, [r1, #0]
10010434:	8809      	ldrh	r1, [r1, #0]
10010436:	7220      	strb	r0, [r4, #8]
10010438:	0a09      	lsrs	r1, r1, #8
1001043a:	0a00      	lsrs	r0, r0, #8
1001043c:	7161      	strb	r1, [r4, #5]
1001043e:	7260      	strb	r0, [r4, #9]
10010440:	72a2      	strb	r2, [r4, #10]
10010442:	71e3      	strb	r3, [r4, #7]
10010444:	0a12      	lsrs	r2, r2, #8
10010446:	1c20      	adds	r0, r4, #0
10010448:	210d      	movs	r1, #13
1001044a:	4b04      	ldr	r3, [pc, #16]	; (1001045c <gattc_att_info_cfm+0x44>)
1001044c:	7125      	strb	r5, [r4, #4]
1001044e:	72e2      	strb	r2, [r4, #11]
10010450:	4798      	blx	r3
10010452:	bd38      	pop	{r3, r4, r5, pc}
10010454:	1001ac38 	.word	0x1001ac38
10010458:	1001a8c8 	.word	0x1001a8c8
1001045c:	1000f0a9 	.word	0x1000f0a9

10010460 <gattc_event_cfm_handler>:
10010460:	220e      	movs	r2, #14
10010462:	b508      	push	{r3, lr}
10010464:	4b0b      	ldr	r3, [pc, #44]	; (10010494 <gattc_event_cfm_handler+0x34>)
10010466:	701a      	strb	r2, [r3, #0]
10010468:	3a02      	subs	r2, #2
1001046a:	705a      	strb	r2, [r3, #1]
1001046c:	709a      	strb	r2, [r3, #2]
1001046e:	4a0a      	ldr	r2, [pc, #40]	; (10010498 <gattc_event_cfm_handler+0x38>)
10010470:	70d8      	strb	r0, [r3, #3]
10010472:	8810      	ldrh	r0, [r2, #0]
10010474:	8812      	ldrh	r2, [r2, #0]
10010476:	7219      	strb	r1, [r3, #8]
10010478:	0a12      	lsrs	r2, r2, #8
1001047a:	715a      	strb	r2, [r3, #5]
1001047c:	2202      	movs	r2, #2
1001047e:	719a      	strb	r2, [r3, #6]
10010480:	2200      	movs	r2, #0
10010482:	0a09      	lsrs	r1, r1, #8
10010484:	7118      	strb	r0, [r3, #4]
10010486:	7259      	strb	r1, [r3, #9]
10010488:	71da      	strb	r2, [r3, #7]
1001048a:	1c18      	adds	r0, r3, #0
1001048c:	210a      	movs	r1, #10
1001048e:	4b03      	ldr	r3, [pc, #12]	; (1001049c <gattc_event_cfm_handler+0x3c>)
10010490:	4798      	blx	r3
10010492:	bd08      	pop	{r3, pc}
10010494:	1001ac38 	.word	0x1001ac38
10010498:	1001a8c8 	.word	0x1001a8c8
1001049c:	1000f0a9 	.word	0x1000f0a9

100104a0 <gattc_disc_svc_ind_parser>:
100104a0:	b570      	push	{r4, r5, r6, lr}
100104a2:	1c15      	adds	r5, r2, #0
100104a4:	0a00      	lsrs	r0, r0, #8
100104a6:	8010      	strh	r0, [r2, #0]
100104a8:	784b      	ldrb	r3, [r1, #1]
100104aa:	780a      	ldrb	r2, [r1, #0]
100104ac:	021b      	lsls	r3, r3, #8
100104ae:	4313      	orrs	r3, r2
100104b0:	806b      	strh	r3, [r5, #2]
100104b2:	78cb      	ldrb	r3, [r1, #3]
100104b4:	788a      	ldrb	r2, [r1, #2]
100104b6:	021b      	lsls	r3, r3, #8
100104b8:	4313      	orrs	r3, r2
100104ba:	80ab      	strh	r3, [r5, #4]
100104bc:	790e      	ldrb	r6, [r1, #4]
100104be:	4b05      	ldr	r3, [pc, #20]	; (100104d4 <gattc_disc_svc_ind_parser+0x34>)
100104c0:	1c30      	adds	r0, r6, #0
100104c2:	1c0c      	adds	r4, r1, #0
100104c4:	4798      	blx	r3
100104c6:	1c32      	adds	r2, r6, #0
100104c8:	71a8      	strb	r0, [r5, #6]
100104ca:	1d61      	adds	r1, r4, #5
100104cc:	1de8      	adds	r0, r5, #7
100104ce:	4b02      	ldr	r3, [pc, #8]	; (100104d8 <gattc_disc_svc_ind_parser+0x38>)
100104d0:	4798      	blx	r3
100104d2:	bd70      	pop	{r4, r5, r6, pc}
100104d4:	1000e45d 	.word	0x1000e45d
100104d8:	10011c57 	.word	0x10011c57

100104dc <gattc_disc_svc_incl_ind_parser>:
100104dc:	b570      	push	{r4, r5, r6, lr}
100104de:	1c15      	adds	r5, r2, #0
100104e0:	0a00      	lsrs	r0, r0, #8
100104e2:	8010      	strh	r0, [r2, #0]
100104e4:	784b      	ldrb	r3, [r1, #1]
100104e6:	780a      	ldrb	r2, [r1, #0]
100104e8:	021b      	lsls	r3, r3, #8
100104ea:	4313      	orrs	r3, r2
100104ec:	806b      	strh	r3, [r5, #2]
100104ee:	78cb      	ldrb	r3, [r1, #3]
100104f0:	788a      	ldrb	r2, [r1, #2]
100104f2:	021b      	lsls	r3, r3, #8
100104f4:	4313      	orrs	r3, r2
100104f6:	80ab      	strh	r3, [r5, #4]
100104f8:	794b      	ldrb	r3, [r1, #5]
100104fa:	790a      	ldrb	r2, [r1, #4]
100104fc:	021b      	lsls	r3, r3, #8
100104fe:	4313      	orrs	r3, r2
10010500:	80eb      	strh	r3, [r5, #6]
10010502:	798e      	ldrb	r6, [r1, #6]
10010504:	4b05      	ldr	r3, [pc, #20]	; (1001051c <gattc_disc_svc_incl_ind_parser+0x40>)
10010506:	1c30      	adds	r0, r6, #0
10010508:	1c0c      	adds	r4, r1, #0
1001050a:	4798      	blx	r3
1001050c:	7228      	strb	r0, [r5, #8]
1001050e:	1c28      	adds	r0, r5, #0
10010510:	1c32      	adds	r2, r6, #0
10010512:	1de1      	adds	r1, r4, #7
10010514:	4b02      	ldr	r3, [pc, #8]	; (10010520 <gattc_disc_svc_incl_ind_parser+0x44>)
10010516:	3009      	adds	r0, #9
10010518:	4798      	blx	r3
1001051a:	bd70      	pop	{r4, r5, r6, pc}
1001051c:	1000e45d 	.word	0x1000e45d
10010520:	10011c57 	.word	0x10011c57

10010524 <gattc_disc_char_ind_parser>:
10010524:	b570      	push	{r4, r5, r6, lr}
10010526:	1c15      	adds	r5, r2, #0
10010528:	0a00      	lsrs	r0, r0, #8
1001052a:	8010      	strh	r0, [r2, #0]
1001052c:	784b      	ldrb	r3, [r1, #1]
1001052e:	780a      	ldrb	r2, [r1, #0]
10010530:	021b      	lsls	r3, r3, #8
10010532:	4313      	orrs	r3, r2
10010534:	806b      	strh	r3, [r5, #2]
10010536:	78cb      	ldrb	r3, [r1, #3]
10010538:	788a      	ldrb	r2, [r1, #2]
1001053a:	021b      	lsls	r3, r3, #8
1001053c:	4313      	orrs	r3, r2
1001053e:	80ab      	strh	r3, [r5, #4]
10010540:	790b      	ldrb	r3, [r1, #4]
10010542:	1c0c      	adds	r4, r1, #0
10010544:	71ab      	strb	r3, [r5, #6]
10010546:	794e      	ldrb	r6, [r1, #5]
10010548:	4b05      	ldr	r3, [pc, #20]	; (10010560 <gattc_disc_char_ind_parser+0x3c>)
1001054a:	1c30      	adds	r0, r6, #0
1001054c:	4798      	blx	r3
1001054e:	71e8      	strb	r0, [r5, #7]
10010550:	1c28      	adds	r0, r5, #0
10010552:	1c32      	adds	r2, r6, #0
10010554:	1da1      	adds	r1, r4, #6
10010556:	4b03      	ldr	r3, [pc, #12]	; (10010564 <gattc_disc_char_ind_parser+0x40>)
10010558:	3008      	adds	r0, #8
1001055a:	4798      	blx	r3
1001055c:	bd70      	pop	{r4, r5, r6, pc}
1001055e:	46c0      	nop			; (mov r8, r8)
10010560:	1000e45d 	.word	0x1000e45d
10010564:	10011c57 	.word	0x10011c57

10010568 <gattc_disc_char_desc_ind_parser>:
10010568:	b570      	push	{r4, r5, r6, lr}
1001056a:	1c15      	adds	r5, r2, #0
1001056c:	0a00      	lsrs	r0, r0, #8
1001056e:	8010      	strh	r0, [r2, #0]
10010570:	784b      	ldrb	r3, [r1, #1]
10010572:	780a      	ldrb	r2, [r1, #0]
10010574:	021b      	lsls	r3, r3, #8
10010576:	4313      	orrs	r3, r2
10010578:	806b      	strh	r3, [r5, #2]
1001057a:	788e      	ldrb	r6, [r1, #2]
1001057c:	4b05      	ldr	r3, [pc, #20]	; (10010594 <gattc_disc_char_desc_ind_parser+0x2c>)
1001057e:	1c30      	adds	r0, r6, #0
10010580:	1c0c      	adds	r4, r1, #0
10010582:	4798      	blx	r3
10010584:	1c32      	adds	r2, r6, #0
10010586:	7128      	strb	r0, [r5, #4]
10010588:	1ce1      	adds	r1, r4, #3
1001058a:	1d68      	adds	r0, r5, #5
1001058c:	4b02      	ldr	r3, [pc, #8]	; (10010598 <gattc_disc_char_desc_ind_parser+0x30>)
1001058e:	4798      	blx	r3
10010590:	bd70      	pop	{r4, r5, r6, pc}
10010592:	46c0      	nop			; (mov r8, r8)
10010594:	1000e45d 	.word	0x1000e45d
10010598:	10011c57 	.word	0x10011c57

1001059c <gattc_event_ind_and_notification_parser>:
1001059c:	b510      	push	{r4, lr}
1001059e:	780c      	ldrb	r4, [r1, #0]
100105a0:	1c13      	adds	r3, r2, #0
100105a2:	2c12      	cmp	r4, #18
100105a4:	d10e      	bne.n	100105c4 <gattc_event_ind_and_notification_parser+0x28>
100105a6:	0a00      	lsrs	r0, r0, #8
100105a8:	8010      	strh	r0, [r2, #0]
100105aa:	788a      	ldrb	r2, [r1, #2]
100105ac:	709a      	strb	r2, [r3, #2]
100105ae:	7948      	ldrb	r0, [r1, #5]
100105b0:	790c      	ldrb	r4, [r1, #4]
100105b2:	0200      	lsls	r0, r0, #8
100105b4:	4320      	orrs	r0, r4
100105b6:	8098      	strh	r0, [r3, #4]
100105b8:	3106      	adds	r1, #6
100105ba:	1d98      	adds	r0, r3, #6
100105bc:	4b0b      	ldr	r3, [pc, #44]	; (100105ec <gattc_event_ind_and_notification_parser+0x50>)
100105be:	4798      	blx	r3
100105c0:	221b      	movs	r2, #27
100105c2:	e010      	b.n	100105e6 <gattc_event_ind_and_notification_parser+0x4a>
100105c4:	2200      	movs	r2, #0
100105c6:	2c13      	cmp	r4, #19
100105c8:	d10d      	bne.n	100105e6 <gattc_event_ind_and_notification_parser+0x4a>
100105ca:	0a00      	lsrs	r0, r0, #8
100105cc:	8018      	strh	r0, [r3, #0]
100105ce:	788a      	ldrb	r2, [r1, #2]
100105d0:	709a      	strb	r2, [r3, #2]
100105d2:	7908      	ldrb	r0, [r1, #4]
100105d4:	78cc      	ldrb	r4, [r1, #3]
100105d6:	0200      	lsls	r0, r0, #8
100105d8:	4320      	orrs	r0, r4
100105da:	8098      	strh	r0, [r3, #4]
100105dc:	3106      	adds	r1, #6
100105de:	1d98      	adds	r0, r3, #6
100105e0:	4b02      	ldr	r3, [pc, #8]	; (100105ec <gattc_event_ind_and_notification_parser+0x50>)
100105e2:	4798      	blx	r3
100105e4:	221c      	movs	r2, #28
100105e6:	1c10      	adds	r0, r2, #0
100105e8:	bd10      	pop	{r4, pc}
100105ea:	46c0      	nop			; (mov r8, r8)
100105ec:	10011c57 	.word	0x10011c57

100105f0 <gattc_complete_evt_handler>:
100105f0:	b500      	push	{lr}
100105f2:	0a00      	lsrs	r0, r0, #8
100105f4:	8010      	strh	r0, [r2, #0]
100105f6:	7808      	ldrb	r0, [r1, #0]
100105f8:	7090      	strb	r0, [r2, #2]
100105fa:	784b      	ldrb	r3, [r1, #1]
100105fc:	3801      	subs	r0, #1
100105fe:	70d3      	strb	r3, [r2, #3]
10010600:	2813      	cmp	r0, #19
10010602:	d82c      	bhi.n	1001065e <gattc_complete_evt_handler+0x6e>
10010604:	f004 f844 	bl	10014690 <__gnu_thumb1_case_uqi>
10010608:	0a0a0a0c 	.word	0x0a0a0a0c
1001060c:	210a0a0a 	.word	0x210a0a0a
10010610:	111f2121 	.word	0x111f2121
10010614:	2b111111 	.word	0x2b111111
10010618:	2919132b 	.word	0x2919132b
1001061c:	2017      	movs	r0, #23
1001061e:	e01f      	b.n	10010660 <gattc_complete_evt_handler+0x70>
10010620:	2024      	movs	r0, #36	; 0x24
10010622:	2b00      	cmp	r3, #0
10010624:	d11c      	bne.n	10010660 <gattc_complete_evt_handler+0x70>
10010626:	3017      	adds	r0, #23
10010628:	e01a      	b.n	10010660 <gattc_complete_evt_handler+0x70>
1001062a:	2025      	movs	r0, #37	; 0x25
1001062c:	e018      	b.n	10010660 <gattc_complete_evt_handler+0x70>
1001062e:	4a0d      	ldr	r2, [pc, #52]	; (10010664 <gattc_complete_evt_handler+0x74>)
10010630:	201d      	movs	r0, #29
10010632:	6813      	ldr	r3, [r2, #0]
10010634:	3b01      	subs	r3, #1
10010636:	6013      	str	r3, [r2, #0]
10010638:	e012      	b.n	10010660 <gattc_complete_evt_handler+0x70>
1001063a:	4a0a      	ldr	r2, [pc, #40]	; (10010664 <gattc_complete_evt_handler+0x74>)
1001063c:	201e      	movs	r0, #30
1001063e:	6813      	ldr	r3, [r2, #0]
10010640:	3b01      	subs	r3, #1
10010642:	6013      	str	r3, [r2, #0]
10010644:	e00c      	b.n	10010660 <gattc_complete_evt_handler+0x70>
10010646:	2019      	movs	r0, #25
10010648:	e00a      	b.n	10010660 <gattc_complete_evt_handler+0x70>
1001064a:	203b      	movs	r0, #59	; 0x3b
1001064c:	2b00      	cmp	r3, #0
1001064e:	d007      	beq.n	10010660 <gattc_complete_evt_handler+0x70>
10010650:	2182      	movs	r1, #130	; 0x82
10010652:	0089      	lsls	r1, r1, #2
10010654:	5453      	strb	r3, [r2, r1]
10010656:	3823      	subs	r0, #35	; 0x23
10010658:	e002      	b.n	10010660 <gattc_complete_evt_handler+0x70>
1001065a:	2021      	movs	r0, #33	; 0x21
1001065c:	e000      	b.n	10010660 <gattc_complete_evt_handler+0x70>
1001065e:	2000      	movs	r0, #0
10010660:	bd00      	pop	{pc}
10010662:	46c0      	nop			; (mov r8, r8)
10010664:	100199d0 	.word	0x100199d0

10010668 <gattc_event_mtu_changed_ind_parser>:
10010668:	0a00      	lsrs	r0, r0, #8
1001066a:	8010      	strh	r0, [r2, #0]
1001066c:	784b      	ldrb	r3, [r1, #1]
1001066e:	7809      	ldrb	r1, [r1, #0]
10010670:	021b      	lsls	r3, r3, #8
10010672:	430b      	orrs	r3, r1
10010674:	8053      	strh	r3, [r2, #2]
10010676:	4770      	bx	lr

10010678 <gattc_read_ind_parser>:
10010678:	0a00      	lsrs	r0, r0, #8
1001067a:	b508      	push	{r3, lr}
1001067c:	8010      	strh	r0, [r2, #0]
1001067e:	1c13      	adds	r3, r2, #0
10010680:	2282      	movs	r2, #130	; 0x82
10010682:	2000      	movs	r0, #0
10010684:	0092      	lsls	r2, r2, #2
10010686:	5498      	strb	r0, [r3, r2]
10010688:	784a      	ldrb	r2, [r1, #1]
1001068a:	7808      	ldrb	r0, [r1, #0]
1001068c:	0212      	lsls	r2, r2, #8
1001068e:	4302      	orrs	r2, r0
10010690:	805a      	strh	r2, [r3, #2]
10010692:	78ca      	ldrb	r2, [r1, #3]
10010694:	7888      	ldrb	r0, [r1, #2]
10010696:	0212      	lsls	r2, r2, #8
10010698:	4302      	orrs	r2, r0
1001069a:	80da      	strh	r2, [r3, #6]
1001069c:	794a      	ldrb	r2, [r1, #5]
1001069e:	7908      	ldrb	r0, [r1, #4]
100106a0:	0212      	lsls	r2, r2, #8
100106a2:	4302      	orrs	r2, r0
100106a4:	809a      	strh	r2, [r3, #4]
100106a6:	3308      	adds	r3, #8
100106a8:	1c18      	adds	r0, r3, #0
100106aa:	3106      	adds	r1, #6
100106ac:	4b01      	ldr	r3, [pc, #4]	; (100106b4 <gattc_read_ind_parser+0x3c>)
100106ae:	4798      	blx	r3
100106b0:	bd08      	pop	{r3, pc}
100106b2:	46c0      	nop			; (mov r8, r8)
100106b4:	10011c57 	.word	0x10011c57

100106b8 <gattc_svc_changed_cfg_ind_parser>:
100106b8:	0a00      	lsrs	r0, r0, #8
100106ba:	8010      	strh	r0, [r2, #0]
100106bc:	784b      	ldrb	r3, [r1, #1]
100106be:	7809      	ldrb	r1, [r1, #0]
100106c0:	021b      	lsls	r3, r3, #8
100106c2:	430b      	orrs	r3, r1
100106c4:	8053      	strh	r3, [r2, #2]
100106c6:	4770      	bx	lr

100106c8 <init_gattc_task_module>:
100106c8:	2300      	movs	r3, #0
100106ca:	4a02      	ldr	r2, [pc, #8]	; (100106d4 <init_gattc_task_module+0xc>)
100106cc:	8013      	strh	r3, [r2, #0]
100106ce:	4a02      	ldr	r2, [pc, #8]	; (100106d8 <init_gattc_task_module+0x10>)
100106d0:	8013      	strh	r3, [r2, #0]
100106d2:	4770      	bx	lr
100106d4:	100199ca 	.word	0x100199ca
100106d8:	100199cc 	.word	0x100199cc

100106dc <gattm_add_svc_req_handler>:
100106dc:	2200      	movs	r2, #0
100106de:	210b      	movs	r1, #11
100106e0:	b5f0      	push	{r4, r5, r6, r7, lr}
100106e2:	1c04      	adds	r4, r0, #0
100106e4:	7943      	ldrb	r3, [r0, #5]
100106e6:	b085      	sub	sp, #20
100106e8:	9301      	str	r3, [sp, #4]
100106ea:	ab02      	add	r3, sp, #8
100106ec:	71da      	strb	r2, [r3, #7]
100106ee:	4b37      	ldr	r3, [pc, #220]	; (100107cc <gattm_add_svc_req_handler+0xf0>)
100106f0:	7059      	strb	r1, [r3, #1]
100106f2:	7099      	strb	r1, [r3, #2]
100106f4:	4936      	ldr	r1, [pc, #216]	; (100107d0 <gattm_add_svc_req_handler+0xf4>)
100106f6:	701a      	strb	r2, [r3, #0]
100106f8:	8808      	ldrh	r0, [r1, #0]
100106fa:	8809      	ldrh	r1, [r1, #0]
100106fc:	70da      	strb	r2, [r3, #3]
100106fe:	0a09      	lsrs	r1, r1, #8
10010700:	7118      	strb	r0, [r3, #4]
10010702:	7159      	strb	r1, [r3, #5]
10010704:	8821      	ldrh	r1, [r4, #0]
10010706:	7219      	strb	r1, [r3, #8]
10010708:	8821      	ldrh	r1, [r4, #0]
1001070a:	0a09      	lsrs	r1, r1, #8
1001070c:	7259      	strb	r1, [r3, #9]
1001070e:	8861      	ldrh	r1, [r4, #2]
10010710:	7299      	strb	r1, [r3, #10]
10010712:	8861      	ldrh	r1, [r4, #2]
10010714:	0a09      	lsrs	r1, r1, #8
10010716:	72d9      	strb	r1, [r3, #11]
10010718:	7921      	ldrb	r1, [r4, #4]
1001071a:	7319      	strb	r1, [r3, #12]
1001071c:	4669      	mov	r1, sp
1001071e:	7909      	ldrb	r1, [r1, #4]
10010720:	7359      	strb	r1, [r3, #13]
10010722:	18a1      	adds	r1, r4, r2
10010724:	7988      	ldrb	r0, [r1, #6]
10010726:	1899      	adds	r1, r3, r2
10010728:	3201      	adds	r2, #1
1001072a:	7388      	strb	r0, [r1, #14]
1001072c:	2a10      	cmp	r2, #16
1001072e:	d1f8      	bne.n	10010722 <gattm_add_svc_req_handler+0x46>
10010730:	1c27      	adds	r7, r4, #0
10010732:	2300      	movs	r3, #0
10010734:	251e      	movs	r5, #30
10010736:	3716      	adds	r7, #22
10010738:	9300      	str	r3, [sp, #0]
1001073a:	9b00      	ldr	r3, [sp, #0]
1001073c:	9a01      	ldr	r2, [sp, #4]
1001073e:	4e23      	ldr	r6, [pc, #140]	; (100107cc <gattm_add_svc_req_handler+0xf0>)
10010740:	4293      	cmp	r3, r2
10010742:	da21      	bge.n	10010788 <gattm_add_svc_req_handler+0xac>
10010744:	1c39      	adds	r1, r7, #0
10010746:	1970      	adds	r0, r6, r5
10010748:	2210      	movs	r2, #16
1001074a:	4b22      	ldr	r3, [pc, #136]	; (100107d4 <gattm_add_svc_req_handler+0xf8>)
1001074c:	4798      	blx	r3
1001074e:	1c2b      	adds	r3, r5, #0
10010750:	8a3a      	ldrh	r2, [r7, #16]
10010752:	3310      	adds	r3, #16
10010754:	b29b      	uxth	r3, r3
10010756:	54f2      	strb	r2, [r6, r3]
10010758:	1c2b      	adds	r3, r5, #0
1001075a:	8a3a      	ldrh	r2, [r7, #16]
1001075c:	3311      	adds	r3, #17
1001075e:	b29b      	uxth	r3, r3
10010760:	0a12      	lsrs	r2, r2, #8
10010762:	54f2      	strb	r2, [r6, r3]
10010764:	1c2a      	adds	r2, r5, #0
10010766:	1c2b      	adds	r3, r5, #0
10010768:	8a79      	ldrh	r1, [r7, #18]
1001076a:	3212      	adds	r2, #18
1001076c:	b292      	uxth	r2, r2
1001076e:	54b1      	strb	r1, [r6, r2]
10010770:	8a7a      	ldrh	r2, [r7, #18]
10010772:	3313      	adds	r3, #19
10010774:	b29b      	uxth	r3, r3
10010776:	0a12      	lsrs	r2, r2, #8
10010778:	54f2      	strb	r2, [r6, r3]
1001077a:	9b00      	ldr	r3, [sp, #0]
1001077c:	3514      	adds	r5, #20
1001077e:	3301      	adds	r3, #1
10010780:	b2ad      	uxth	r5, r5
10010782:	9300      	str	r3, [sp, #0]
10010784:	3714      	adds	r7, #20
10010786:	e7d8      	b.n	1001073a <gattm_add_svc_req_handler+0x5e>
10010788:	2114      	movs	r1, #20
1001078a:	4d13      	ldr	r5, [pc, #76]	; (100107d8 <gattm_add_svc_req_handler+0xfc>)
1001078c:	4b13      	ldr	r3, [pc, #76]	; (100107dc <gattm_add_svc_req_handler+0x100>)
1001078e:	4351      	muls	r1, r2
10010790:	802b      	strh	r3, [r5, #0]
10010792:	230b      	movs	r3, #11
10010794:	311e      	adds	r1, #30
10010796:	80ab      	strh	r3, [r5, #4]
10010798:	1c0b      	adds	r3, r1, #0
1001079a:	3b08      	subs	r3, #8
1001079c:	71b3      	strb	r3, [r6, #6]
1001079e:	121b      	asrs	r3, r3, #8
100107a0:	71f3      	strb	r3, [r6, #7]
100107a2:	1c30      	adds	r0, r6, #0
100107a4:	4b0e      	ldr	r3, [pc, #56]	; (100107e0 <gattm_add_svc_req_handler+0x104>)
100107a6:	4798      	blx	r3
100107a8:	ab02      	add	r3, sp, #8
100107aa:	1dde      	adds	r6, r3, #7
100107ac:	1c30      	adds	r0, r6, #0
100107ae:	4b0d      	ldr	r3, [pc, #52]	; (100107e4 <gattm_add_svc_req_handler+0x108>)
100107b0:	4798      	blx	r3
100107b2:	7833      	ldrb	r3, [r6, #0]
100107b4:	20e2      	movs	r0, #226	; 0xe2
100107b6:	2b00      	cmp	r3, #0
100107b8:	d106      	bne.n	100107c8 <gattm_add_svc_req_handler+0xec>
100107ba:	68aa      	ldr	r2, [r5, #8]
100107bc:	7853      	ldrb	r3, [r2, #1]
100107be:	7811      	ldrb	r1, [r2, #0]
100107c0:	021b      	lsls	r3, r3, #8
100107c2:	430b      	orrs	r3, r1
100107c4:	8023      	strh	r3, [r4, #0]
100107c6:	7890      	ldrb	r0, [r2, #2]
100107c8:	b005      	add	sp, #20
100107ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
100107cc:	1001ac38 	.word	0x1001ac38
100107d0:	1001a8c8 	.word	0x1001a8c8
100107d4:	10011c57 	.word	0x10011c57
100107d8:	1001a8bc 	.word	0x1001a8bc
100107dc:	00000b01 	.word	0x00000b01
100107e0:	1000f0a9 	.word	0x1000f0a9
100107e4:	1000f10d 	.word	0x1000f10d

100107e8 <gattm_add_attribute_req_handler>:
100107e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
100107ea:	1c1f      	adds	r7, r3, #0
100107ec:	4b16      	ldr	r3, [pc, #88]	; (10010848 <gattm_add_attribute_req_handler+0x60>)
100107ee:	9100      	str	r1, [sp, #0]
100107f0:	9201      	str	r2, [sp, #4]
100107f2:	1c05      	adds	r5, r0, #0
100107f4:	7946      	ldrb	r6, [r0, #5]
100107f6:	6818      	ldr	r0, [r3, #0]
100107f8:	2114      	movs	r1, #20
100107fa:	4b14      	ldr	r3, [pc, #80]	; (1001084c <gattm_add_attribute_req_handler+0x64>)
100107fc:	382a      	subs	r0, #42	; 0x2a
100107fe:	4798      	blx	r3
10010800:	2311      	movs	r3, #17
10010802:	4286      	cmp	r6, r0
10010804:	d21e      	bcs.n	10010844 <gattm_add_attribute_req_handler+0x5c>
10010806:	2414      	movs	r4, #20
10010808:	4366      	muls	r6, r4
1001080a:	19a8      	adds	r0, r5, r6
1001080c:	2100      	movs	r1, #0
1001080e:	2210      	movs	r2, #16
10010810:	4b0f      	ldr	r3, [pc, #60]	; (10010850 <gattm_add_attribute_req_handler+0x68>)
10010812:	3016      	adds	r0, #22
10010814:	4798      	blx	r3
10010816:	7968      	ldrb	r0, [r5, #5]
10010818:	1c3a      	adds	r2, r7, #0
1001081a:	4360      	muls	r0, r4
1001081c:	1828      	adds	r0, r5, r0
1001081e:	4b0d      	ldr	r3, [pc, #52]	; (10010854 <gattm_add_attribute_req_handler+0x6c>)
10010820:	3016      	adds	r0, #22
10010822:	9908      	ldr	r1, [sp, #32]
10010824:	4798      	blx	r3
10010826:	466a      	mov	r2, sp
10010828:	796b      	ldrb	r3, [r5, #5]
1001082a:	8812      	ldrh	r2, [r2, #0]
1001082c:	435c      	muls	r4, r3
1001082e:	192c      	adds	r4, r5, r4
10010830:	8522      	strh	r2, [r4, #40]	; 0x28
10010832:	466a      	mov	r2, sp
10010834:	8892      	ldrh	r2, [r2, #4]
10010836:	84e2      	strh	r2, [r4, #38]	; 0x26
10010838:	9a09      	ldr	r2, [sp, #36]	; 0x24
1001083a:	8013      	strh	r3, [r2, #0]
1001083c:	796b      	ldrb	r3, [r5, #5]
1001083e:	3301      	adds	r3, #1
10010840:	716b      	strb	r3, [r5, #5]
10010842:	2300      	movs	r3, #0
10010844:	1c18      	adds	r0, r3, #0
10010846:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10010848:	10019940 	.word	0x10019940
1001084c:	100146a5 	.word	0x100146a5
10010850:	10011c69 	.word	0x10011c69
10010854:	10011c57 	.word	0x10011c57

10010858 <gattm_att_set_value_req_handler>:
10010858:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1001085a:	466b      	mov	r3, sp
1001085c:	1dde      	adds	r6, r3, #7
1001085e:	2300      	movs	r3, #0
10010860:	1c0d      	adds	r5, r1, #0
10010862:	210c      	movs	r1, #12
10010864:	270b      	movs	r7, #11
10010866:	4c17      	ldr	r4, [pc, #92]	; (100108c4 <gattm_att_set_value_req_handler+0x6c>)
10010868:	7033      	strb	r3, [r6, #0]
1001086a:	70e3      	strb	r3, [r4, #3]
1001086c:	4b16      	ldr	r3, [pc, #88]	; (100108c8 <gattm_att_set_value_req_handler+0x70>)
1001086e:	7021      	strb	r1, [r4, #0]
10010870:	8819      	ldrh	r1, [r3, #0]
10010872:	881b      	ldrh	r3, [r3, #0]
10010874:	7220      	strb	r0, [r4, #8]
10010876:	0a1b      	lsrs	r3, r3, #8
10010878:	7163      	strb	r3, [r4, #5]
1001087a:	0a00      	lsrs	r0, r0, #8
1001087c:	0a2b      	lsrs	r3, r5, #8
1001087e:	7121      	strb	r1, [r4, #4]
10010880:	7260      	strb	r0, [r4, #9]
10010882:	1c11      	adds	r1, r2, #0
10010884:	72a5      	strb	r5, [r4, #10]
10010886:	1c2a      	adds	r2, r5, #0
10010888:	72e3      	strb	r3, [r4, #11]
1001088a:	350c      	adds	r5, #12
1001088c:	4b0f      	ldr	r3, [pc, #60]	; (100108cc <gattm_att_set_value_req_handler+0x74>)
1001088e:	4810      	ldr	r0, [pc, #64]	; (100108d0 <gattm_att_set_value_req_handler+0x78>)
10010890:	7067      	strb	r7, [r4, #1]
10010892:	70a7      	strb	r7, [r4, #2]
10010894:	4798      	blx	r3
10010896:	b2a9      	uxth	r1, r5
10010898:	4b0e      	ldr	r3, [pc, #56]	; (100108d4 <gattm_att_set_value_req_handler+0x7c>)
1001089a:	4d0f      	ldr	r5, [pc, #60]	; (100108d8 <gattm_att_set_value_req_handler+0x80>)
1001089c:	1c20      	adds	r0, r4, #0
1001089e:	802b      	strh	r3, [r5, #0]
100108a0:	1c0b      	adds	r3, r1, #0
100108a2:	3b08      	subs	r3, #8
100108a4:	71a3      	strb	r3, [r4, #6]
100108a6:	121b      	asrs	r3, r3, #8
100108a8:	71e3      	strb	r3, [r4, #7]
100108aa:	4b0c      	ldr	r3, [pc, #48]	; (100108dc <gattm_att_set_value_req_handler+0x84>)
100108ac:	80af      	strh	r7, [r5, #4]
100108ae:	4798      	blx	r3
100108b0:	1c30      	adds	r0, r6, #0
100108b2:	4b0b      	ldr	r3, [pc, #44]	; (100108e0 <gattm_att_set_value_req_handler+0x88>)
100108b4:	4798      	blx	r3
100108b6:	7833      	ldrb	r3, [r6, #0]
100108b8:	20e2      	movs	r0, #226	; 0xe2
100108ba:	2b00      	cmp	r3, #0
100108bc:	d101      	bne.n	100108c2 <gattm_att_set_value_req_handler+0x6a>
100108be:	68ab      	ldr	r3, [r5, #8]
100108c0:	7898      	ldrb	r0, [r3, #2]
100108c2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
100108c4:	1001ac38 	.word	0x1001ac38
100108c8:	1001a8c8 	.word	0x1001a8c8
100108cc:	10011c57 	.word	0x10011c57
100108d0:	1001ac44 	.word	0x1001ac44
100108d4:	00000b0d 	.word	0x00000b0d
100108d8:	1001a8bc 	.word	0x1001a8bc
100108dc:	1000f0a9 	.word	0x1000f0a9
100108e0:	1000f10d 	.word	0x1000f10d

100108e4 <gattm_att_get_value_req_handler>:
100108e4:	b5f0      	push	{r4, r5, r6, r7, lr}
100108e6:	b085      	sub	sp, #20
100108e8:	9201      	str	r2, [sp, #4]
100108ea:	220a      	movs	r2, #10
100108ec:	1c04      	adds	r4, r0, #0
100108ee:	481d      	ldr	r0, [pc, #116]	; (10010964 <gattm_att_get_value_req_handler+0x80>)
100108f0:	ab02      	add	r3, sp, #8
100108f2:	1dde      	adds	r6, r3, #7
100108f4:	7002      	strb	r2, [r0, #0]
100108f6:	2300      	movs	r3, #0
100108f8:	220b      	movs	r2, #11
100108fa:	4d1b      	ldr	r5, [pc, #108]	; (10010968 <gattm_att_get_value_req_handler+0x84>)
100108fc:	1c0f      	adds	r7, r1, #0
100108fe:	8829      	ldrh	r1, [r5, #0]
10010900:	882d      	ldrh	r5, [r5, #0]
10010902:	7101      	strb	r1, [r0, #4]
10010904:	0a2d      	lsrs	r5, r5, #8
10010906:	7145      	strb	r5, [r0, #5]
10010908:	0a25      	lsrs	r5, r4, #8
1001090a:	7245      	strb	r5, [r0, #9]
1001090c:	4917      	ldr	r1, [pc, #92]	; (1001096c <gattm_att_get_value_req_handler+0x88>)
1001090e:	4d18      	ldr	r5, [pc, #96]	; (10010970 <gattm_att_get_value_req_handler+0x8c>)
10010910:	7033      	strb	r3, [r6, #0]
10010912:	7042      	strb	r2, [r0, #1]
10010914:	7082      	strb	r2, [r0, #2]
10010916:	70c3      	strb	r3, [r0, #3]
10010918:	8029      	strh	r1, [r5, #0]
1001091a:	80aa      	strh	r2, [r5, #4]
1001091c:	71c3      	strb	r3, [r0, #7]
1001091e:	3a09      	subs	r2, #9
10010920:	210a      	movs	r1, #10
10010922:	4b14      	ldr	r3, [pc, #80]	; (10010974 <gattm_att_get_value_req_handler+0x90>)
10010924:	7182      	strb	r2, [r0, #6]
10010926:	7204      	strb	r4, [r0, #8]
10010928:	4798      	blx	r3
1001092a:	1c30      	adds	r0, r6, #0
1001092c:	4b12      	ldr	r3, [pc, #72]	; (10010978 <gattm_att_get_value_req_handler+0x94>)
1001092e:	4798      	blx	r3
10010930:	7833      	ldrb	r3, [r6, #0]
10010932:	20e2      	movs	r0, #226	; 0xe2
10010934:	2b00      	cmp	r3, #0
10010936:	d112      	bne.n	1001095e <gattm_att_get_value_req_handler+0x7a>
10010938:	68a9      	ldr	r1, [r5, #8]
1001093a:	9801      	ldr	r0, [sp, #4]
1001093c:	784d      	ldrb	r5, [r1, #1]
1001093e:	780b      	ldrb	r3, [r1, #0]
10010940:	78ca      	ldrb	r2, [r1, #3]
10010942:	022d      	lsls	r5, r5, #8
10010944:	431d      	orrs	r5, r3
10010946:	788b      	ldrb	r3, [r1, #2]
10010948:	0212      	lsls	r2, r2, #8
1001094a:	431a      	orrs	r2, r3
1001094c:	803a      	strh	r2, [r7, #0]
1001094e:	790e      	ldrb	r6, [r1, #4]
10010950:	4b0a      	ldr	r3, [pc, #40]	; (1001097c <gattm_att_get_value_req_handler+0x98>)
10010952:	3105      	adds	r1, #5
10010954:	4798      	blx	r3
10010956:	20e2      	movs	r0, #226	; 0xe2
10010958:	42ac      	cmp	r4, r5
1001095a:	d100      	bne.n	1001095e <gattm_att_get_value_req_handler+0x7a>
1001095c:	1c30      	adds	r0, r6, #0
1001095e:	b005      	add	sp, #20
10010960:	bdf0      	pop	{r4, r5, r6, r7, pc}
10010962:	46c0      	nop			; (mov r8, r8)
10010964:	1001ac38 	.word	0x1001ac38
10010968:	1001a8c8 	.word	0x1001a8c8
1001096c:	00000b0b 	.word	0x00000b0b
10010970:	1001a8bc 	.word	0x1001a8bc
10010974:	1000f0a9 	.word	0x1000f0a9
10010978:	1000f10d 	.word	0x1000f10d
1001097c:	10011c57 	.word	0x10011c57

10010980 <htpt_enable_rsp_handler>:
10010980:	780b      	ldrb	r3, [r1, #0]
10010982:	7013      	strb	r3, [r2, #0]
10010984:	784b      	ldrb	r3, [r1, #1]
10010986:	7053      	strb	r3, [r2, #1]
10010988:	4770      	bx	lr

1001098a <htpt_temp_send_rsp_handler>:
1001098a:	780b      	ldrb	r3, [r1, #0]
1001098c:	7013      	strb	r3, [r2, #0]
1001098e:	4770      	bx	lr

10010990 <htpt_meas_intv_upd_rsp_handler>:
10010990:	780b      	ldrb	r3, [r1, #0]
10010992:	7013      	strb	r3, [r2, #0]
10010994:	4770      	bx	lr

10010996 <htpt_meas_intv_chg_req_ind_handler>:
10010996:	78cb      	ldrb	r3, [r1, #3]
10010998:	7889      	ldrb	r1, [r1, #2]
1001099a:	021b      	lsls	r3, r3, #8
1001099c:	430b      	orrs	r3, r1
1001099e:	8013      	strh	r3, [r2, #0]
100109a0:	4770      	bx	lr

100109a2 <htpt_cfg_indntf_ind_handler>:
100109a2:	780b      	ldrb	r3, [r1, #0]
100109a4:	7013      	strb	r3, [r2, #0]
100109a6:	784b      	ldrb	r3, [r1, #1]
100109a8:	7053      	strb	r3, [r2, #1]
100109aa:	4770      	bx	lr

100109ac <pow>:
100109ac:	b5f0      	push	{r4, r5, r6, r7, lr}
100109ae:	465f      	mov	r7, fp
100109b0:	464d      	mov	r5, r9
100109b2:	4656      	mov	r6, sl
100109b4:	4644      	mov	r4, r8
100109b6:	b4f0      	push	{r4, r5, r6, r7}
100109b8:	b091      	sub	sp, #68	; 0x44
100109ba:	001f      	movs	r7, r3
100109bc:	0004      	movs	r4, r0
100109be:	000d      	movs	r5, r1
100109c0:	0016      	movs	r6, r2
100109c2:	f000 f9af 	bl	10010d24 <__ieee754_pow>
100109c6:	4bcf      	ldr	r3, [pc, #828]	; (10010d04 <pow+0x358>)
100109c8:	9002      	str	r0, [sp, #8]
100109ca:	9103      	str	r1, [sp, #12]
100109cc:	469b      	mov	fp, r3
100109ce:	781b      	ldrb	r3, [r3, #0]
100109d0:	b25b      	sxtb	r3, r3
100109d2:	4699      	mov	r9, r3
100109d4:	3301      	adds	r3, #1
100109d6:	d04f      	beq.n	10010a78 <pow+0xcc>
100109d8:	0032      	movs	r2, r6
100109da:	003b      	movs	r3, r7
100109dc:	0030      	movs	r0, r6
100109de:	0039      	movs	r1, r7
100109e0:	f006 f830 	bl	10016a44 <__aeabi_dcmpun>
100109e4:	9000      	str	r0, [sp, #0]
100109e6:	2800      	cmp	r0, #0
100109e8:	d146      	bne.n	10010a78 <pow+0xcc>
100109ea:	0022      	movs	r2, r4
100109ec:	002b      	movs	r3, r5
100109ee:	0020      	movs	r0, r4
100109f0:	0029      	movs	r1, r5
100109f2:	f006 f827 	bl	10016a44 <__aeabi_dcmpun>
100109f6:	2200      	movs	r2, #0
100109f8:	4682      	mov	sl, r0
100109fa:	2800      	cmp	r0, #0
100109fc:	d134      	bne.n	10010a68 <pow+0xbc>
100109fe:	2300      	movs	r3, #0
10010a00:	0020      	movs	r0, r4
10010a02:	0029      	movs	r1, r5
10010a04:	f003 ffd4 	bl	100149b0 <__aeabi_dcmpeq>
10010a08:	2800      	cmp	r0, #0
10010a0a:	d03a      	beq.n	10010a82 <pow+0xd6>
10010a0c:	2200      	movs	r2, #0
10010a0e:	2300      	movs	r3, #0
10010a10:	0030      	movs	r0, r6
10010a12:	0039      	movs	r1, r7
10010a14:	f003 ffcc 	bl	100149b0 <__aeabi_dcmpeq>
10010a18:	9005      	str	r0, [sp, #20]
10010a1a:	2800      	cmp	r0, #0
10010a1c:	d100      	bne.n	10010a20 <pow+0x74>
10010a1e:	e074      	b.n	10010b0a <pow+0x15e>
10010a20:	ab06      	add	r3, sp, #24
10010a22:	4698      	mov	r8, r3
10010a24:	2301      	movs	r3, #1
10010a26:	4642      	mov	r2, r8
10010a28:	9306      	str	r3, [sp, #24]
10010a2a:	4bb7      	ldr	r3, [pc, #732]	; (10010d08 <pow+0x35c>)
10010a2c:	6053      	str	r3, [r2, #4]
10010a2e:	4643      	mov	r3, r8
10010a30:	4652      	mov	r2, sl
10010a32:	609c      	str	r4, [r3, #8]
10010a34:	60dd      	str	r5, [r3, #12]
10010a36:	621a      	str	r2, [r3, #32]
10010a38:	611e      	str	r6, [r3, #16]
10010a3a:	615f      	str	r7, [r3, #20]
10010a3c:	4642      	mov	r2, r8
10010a3e:	2300      	movs	r3, #0
10010a40:	2400      	movs	r4, #0
10010a42:	6193      	str	r3, [r2, #24]
10010a44:	61d4      	str	r4, [r2, #28]
10010a46:	464b      	mov	r3, r9
10010a48:	2b00      	cmp	r3, #0
10010a4a:	d100      	bne.n	10010a4e <pow+0xa2>
10010a4c:	e094      	b.n	10010b78 <pow+0x1cc>
10010a4e:	2300      	movs	r3, #0
10010a50:	4cae      	ldr	r4, [pc, #696]	; (10010d0c <pow+0x360>)
10010a52:	9300      	str	r3, [sp, #0]
10010a54:	9401      	str	r4, [sp, #4]
10010a56:	9800      	ldr	r0, [sp, #0]
10010a58:	9901      	ldr	r1, [sp, #4]
10010a5a:	b011      	add	sp, #68	; 0x44
10010a5c:	bc3c      	pop	{r2, r3, r4, r5}
10010a5e:	4690      	mov	r8, r2
10010a60:	4699      	mov	r9, r3
10010a62:	46a2      	mov	sl, r4
10010a64:	46ab      	mov	fp, r5
10010a66:	bdf0      	pop	{r4, r5, r6, r7, pc}
10010a68:	2300      	movs	r3, #0
10010a6a:	0030      	movs	r0, r6
10010a6c:	0039      	movs	r1, r7
10010a6e:	f003 ff9f 	bl	100149b0 <__aeabi_dcmpeq>
10010a72:	2800      	cmp	r0, #0
10010a74:	d000      	beq.n	10010a78 <pow+0xcc>
10010a76:	e0eb      	b.n	10010c50 <pow+0x2a4>
10010a78:	9b02      	ldr	r3, [sp, #8]
10010a7a:	9c03      	ldr	r4, [sp, #12]
10010a7c:	9300      	str	r3, [sp, #0]
10010a7e:	9401      	str	r4, [sp, #4]
10010a80:	e7e9      	b.n	10010a56 <pow+0xaa>
10010a82:	9802      	ldr	r0, [sp, #8]
10010a84:	9903      	ldr	r1, [sp, #12]
10010a86:	f000 ff7d 	bl	10011984 <finite>
10010a8a:	4681      	mov	r9, r0
10010a8c:	2800      	cmp	r0, #0
10010a8e:	d100      	bne.n	10010a92 <pow+0xe6>
10010a90:	e086      	b.n	10010ba0 <pow+0x1f4>
10010a92:	9802      	ldr	r0, [sp, #8]
10010a94:	9903      	ldr	r1, [sp, #12]
10010a96:	2200      	movs	r2, #0
10010a98:	2300      	movs	r3, #0
10010a9a:	f003 ff89 	bl	100149b0 <__aeabi_dcmpeq>
10010a9e:	2800      	cmp	r0, #0
10010aa0:	d0ea      	beq.n	10010a78 <pow+0xcc>
10010aa2:	0020      	movs	r0, r4
10010aa4:	0029      	movs	r1, r5
10010aa6:	f000 ff6d 	bl	10011984 <finite>
10010aaa:	9a02      	ldr	r2, [sp, #8]
10010aac:	9b03      	ldr	r3, [sp, #12]
10010aae:	9200      	str	r2, [sp, #0]
10010ab0:	9301      	str	r3, [sp, #4]
10010ab2:	2800      	cmp	r0, #0
10010ab4:	d0cf      	beq.n	10010a56 <pow+0xaa>
10010ab6:	0030      	movs	r0, r6
10010ab8:	0039      	movs	r1, r7
10010aba:	f000 ff63 	bl	10011984 <finite>
10010abe:	9a02      	ldr	r2, [sp, #8]
10010ac0:	9b03      	ldr	r3, [sp, #12]
10010ac2:	9200      	str	r2, [sp, #0]
10010ac4:	9301      	str	r3, [sp, #4]
10010ac6:	2800      	cmp	r0, #0
10010ac8:	d0c5      	beq.n	10010a56 <pow+0xaa>
10010aca:	ab06      	add	r3, sp, #24
10010acc:	4698      	mov	r8, r3
10010ace:	2304      	movs	r3, #4
10010ad0:	4642      	mov	r2, r8
10010ad2:	9306      	str	r3, [sp, #24]
10010ad4:	4b8c      	ldr	r3, [pc, #560]	; (10010d08 <pow+0x35c>)
10010ad6:	6094      	str	r4, [r2, #8]
10010ad8:	60d5      	str	r5, [r2, #12]
10010ada:	6053      	str	r3, [r2, #4]
10010adc:	2300      	movs	r3, #0
10010ade:	2400      	movs	r4, #0
10010ae0:	6213      	str	r3, [r2, #32]
10010ae2:	2300      	movs	r3, #0
10010ae4:	6193      	str	r3, [r2, #24]
10010ae6:	61d4      	str	r4, [r2, #28]
10010ae8:	465b      	mov	r3, fp
10010aea:	781b      	ldrb	r3, [r3, #0]
10010aec:	6116      	str	r6, [r2, #16]
10010aee:	6157      	str	r7, [r2, #20]
10010af0:	b25b      	sxtb	r3, r3
10010af2:	2b02      	cmp	r3, #2
10010af4:	d004      	beq.n	10010b00 <pow+0x154>
10010af6:	4640      	mov	r0, r8
10010af8:	f000 ff4e 	bl	10011998 <matherr>
10010afc:	2800      	cmp	r0, #0
10010afe:	d140      	bne.n	10010b82 <pow+0x1d6>
10010b00:	f001 f864 	bl	10011bcc <__errno>
10010b04:	2322      	movs	r3, #34	; 0x22
10010b06:	6003      	str	r3, [r0, #0]
10010b08:	e03b      	b.n	10010b82 <pow+0x1d6>
10010b0a:	0030      	movs	r0, r6
10010b0c:	0039      	movs	r1, r7
10010b0e:	f000 ff39 	bl	10011984 <finite>
10010b12:	9a02      	ldr	r2, [sp, #8]
10010b14:	9b03      	ldr	r3, [sp, #12]
10010b16:	9200      	str	r2, [sp, #0]
10010b18:	9301      	str	r3, [sp, #4]
10010b1a:	2800      	cmp	r0, #0
10010b1c:	d09b      	beq.n	10010a56 <pow+0xaa>
10010b1e:	2200      	movs	r2, #0
10010b20:	2300      	movs	r3, #0
10010b22:	0030      	movs	r0, r6
10010b24:	0039      	movs	r1, r7
10010b26:	f003 ff49 	bl	100149bc <__aeabi_dcmplt>
10010b2a:	2800      	cmp	r0, #0
10010b2c:	d100      	bne.n	10010b30 <pow+0x184>
10010b2e:	e792      	b.n	10010a56 <pow+0xaa>
10010b30:	ab06      	add	r3, sp, #24
10010b32:	4698      	mov	r8, r3
10010b34:	2301      	movs	r3, #1
10010b36:	4642      	mov	r2, r8
10010b38:	9306      	str	r3, [sp, #24]
10010b3a:	4b73      	ldr	r3, [pc, #460]	; (10010d08 <pow+0x35c>)
10010b3c:	6053      	str	r3, [r2, #4]
10010b3e:	4643      	mov	r3, r8
10010b40:	9a05      	ldr	r2, [sp, #20]
10010b42:	609c      	str	r4, [r3, #8]
10010b44:	60dd      	str	r5, [r3, #12]
10010b46:	621a      	str	r2, [r3, #32]
10010b48:	611e      	str	r6, [r3, #16]
10010b4a:	615f      	str	r7, [r3, #20]
10010b4c:	465b      	mov	r3, fp
10010b4e:	781b      	ldrb	r3, [r3, #0]
10010b50:	b25b      	sxtb	r3, r3
10010b52:	2b00      	cmp	r3, #0
10010b54:	d00b      	beq.n	10010b6e <pow+0x1c2>
10010b56:	2000      	movs	r0, #0
10010b58:	4642      	mov	r2, r8
10010b5a:	496d      	ldr	r1, [pc, #436]	; (10010d10 <pow+0x364>)
10010b5c:	6190      	str	r0, [r2, #24]
10010b5e:	61d1      	str	r1, [r2, #28]
10010b60:	2b02      	cmp	r3, #2
10010b62:	d109      	bne.n	10010b78 <pow+0x1cc>
10010b64:	f001 f832 	bl	10011bcc <__errno>
10010b68:	2321      	movs	r3, #33	; 0x21
10010b6a:	6003      	str	r3, [r0, #0]
10010b6c:	e009      	b.n	10010b82 <pow+0x1d6>
10010b6e:	4642      	mov	r2, r8
10010b70:	2300      	movs	r3, #0
10010b72:	2400      	movs	r4, #0
10010b74:	6193      	str	r3, [r2, #24]
10010b76:	61d4      	str	r4, [r2, #28]
10010b78:	4640      	mov	r0, r8
10010b7a:	f000 ff0d 	bl	10011998 <matherr>
10010b7e:	2800      	cmp	r0, #0
10010b80:	d0f0      	beq.n	10010b64 <pow+0x1b8>
10010b82:	4643      	mov	r3, r8
10010b84:	6a1b      	ldr	r3, [r3, #32]
10010b86:	2b00      	cmp	r3, #0
10010b88:	d004      	beq.n	10010b94 <pow+0x1e8>
10010b8a:	f001 f81f 	bl	10011bcc <__errno>
10010b8e:	4643      	mov	r3, r8
10010b90:	6a1b      	ldr	r3, [r3, #32]
10010b92:	6003      	str	r3, [r0, #0]
10010b94:	4643      	mov	r3, r8
10010b96:	69dc      	ldr	r4, [r3, #28]
10010b98:	699b      	ldr	r3, [r3, #24]
10010b9a:	9300      	str	r3, [sp, #0]
10010b9c:	9401      	str	r4, [sp, #4]
10010b9e:	e75a      	b.n	10010a56 <pow+0xaa>
10010ba0:	0020      	movs	r0, r4
10010ba2:	0029      	movs	r1, r5
10010ba4:	f000 feee 	bl	10011984 <finite>
10010ba8:	2800      	cmp	r0, #0
10010baa:	d100      	bne.n	10010bae <pow+0x202>
10010bac:	e771      	b.n	10010a92 <pow+0xe6>
10010bae:	0030      	movs	r0, r6
10010bb0:	0039      	movs	r1, r7
10010bb2:	f000 fee7 	bl	10011984 <finite>
10010bb6:	2800      	cmp	r0, #0
10010bb8:	d100      	bne.n	10010bbc <pow+0x210>
10010bba:	e76a      	b.n	10010a92 <pow+0xe6>
10010bbc:	9802      	ldr	r0, [sp, #8]
10010bbe:	9903      	ldr	r1, [sp, #12]
10010bc0:	000b      	movs	r3, r1
10010bc2:	0002      	movs	r2, r0
10010bc4:	f005 ff3e 	bl	10016a44 <__aeabi_dcmpun>
10010bc8:	ab06      	add	r3, sp, #24
10010bca:	4698      	mov	r8, r3
10010bcc:	2800      	cmp	r0, #0
10010bce:	d17a      	bne.n	10010cc6 <pow+0x31a>
10010bd0:	2303      	movs	r3, #3
10010bd2:	4642      	mov	r2, r8
10010bd4:	9306      	str	r3, [sp, #24]
10010bd6:	4b4c      	ldr	r3, [pc, #304]	; (10010d08 <pow+0x35c>)
10010bd8:	6210      	str	r0, [r2, #32]
10010bda:	6053      	str	r3, [r2, #4]
10010bdc:	465b      	mov	r3, fp
10010bde:	781b      	ldrb	r3, [r3, #0]
10010be0:	6094      	str	r4, [r2, #8]
10010be2:	60d5      	str	r5, [r2, #12]
10010be4:	b25b      	sxtb	r3, r3
10010be6:	6116      	str	r6, [r2, #16]
10010be8:	6157      	str	r7, [r2, #20]
10010bea:	4699      	mov	r9, r3
10010bec:	2b00      	cmp	r3, #0
10010bee:	d148      	bne.n	10010c82 <pow+0x2d6>
10010bf0:	22e0      	movs	r2, #224	; 0xe0
10010bf2:	4641      	mov	r1, r8
10010bf4:	4b47      	ldr	r3, [pc, #284]	; (10010d14 <pow+0x368>)
10010bf6:	0612      	lsls	r2, r2, #24
10010bf8:	618a      	str	r2, [r1, #24]
10010bfa:	61cb      	str	r3, [r1, #28]
10010bfc:	0020      	movs	r0, r4
10010bfe:	2200      	movs	r2, #0
10010c00:	2300      	movs	r3, #0
10010c02:	0029      	movs	r1, r5
10010c04:	f003 feda 	bl	100149bc <__aeabi_dcmplt>
10010c08:	2800      	cmp	r0, #0
10010c0a:	d100      	bne.n	10010c0e <pow+0x262>
10010c0c:	e773      	b.n	10010af6 <pow+0x14a>
10010c0e:	2200      	movs	r2, #0
10010c10:	4b41      	ldr	r3, [pc, #260]	; (10010d18 <pow+0x36c>)
10010c12:	0030      	movs	r0, r6
10010c14:	0039      	movs	r1, r7
10010c16:	f005 f947 	bl	10015ea8 <__aeabi_dmul>
10010c1a:	0004      	movs	r4, r0
10010c1c:	000d      	movs	r5, r1
10010c1e:	f000 fec3 	bl	100119a8 <rint>
10010c22:	0002      	movs	r2, r0
10010c24:	000b      	movs	r3, r1
10010c26:	0020      	movs	r0, r4
10010c28:	0029      	movs	r1, r5
10010c2a:	f003 fec1 	bl	100149b0 <__aeabi_dcmpeq>
10010c2e:	2800      	cmp	r0, #0
10010c30:	d105      	bne.n	10010c3e <pow+0x292>
10010c32:	22e0      	movs	r2, #224	; 0xe0
10010c34:	4b39      	ldr	r3, [pc, #228]	; (10010d1c <pow+0x370>)
10010c36:	0612      	lsls	r2, r2, #24
10010c38:	4641      	mov	r1, r8
10010c3a:	618a      	str	r2, [r1, #24]
10010c3c:	61cb      	str	r3, [r1, #28]
10010c3e:	465b      	mov	r3, fp
10010c40:	781b      	ldrb	r3, [r3, #0]
10010c42:	b25b      	sxtb	r3, r3
10010c44:	4699      	mov	r9, r3
10010c46:	464b      	mov	r3, r9
10010c48:	2b02      	cmp	r3, #2
10010c4a:	d000      	beq.n	10010c4e <pow+0x2a2>
10010c4c:	e753      	b.n	10010af6 <pow+0x14a>
10010c4e:	e757      	b.n	10010b00 <pow+0x154>
10010c50:	ab06      	add	r3, sp, #24
10010c52:	4698      	mov	r8, r3
10010c54:	2301      	movs	r3, #1
10010c56:	4642      	mov	r2, r8
10010c58:	9306      	str	r3, [sp, #24]
10010c5a:	4b2b      	ldr	r3, [pc, #172]	; (10010d08 <pow+0x35c>)
10010c5c:	6053      	str	r3, [r2, #4]
10010c5e:	4643      	mov	r3, r8
10010c60:	609c      	str	r4, [r3, #8]
10010c62:	60dd      	str	r5, [r3, #12]
10010c64:	2400      	movs	r4, #0
10010c66:	9a00      	ldr	r2, [sp, #0]
10010c68:	4d28      	ldr	r5, [pc, #160]	; (10010d0c <pow+0x360>)
10010c6a:	621a      	str	r2, [r3, #32]
10010c6c:	611e      	str	r6, [r3, #16]
10010c6e:	615f      	str	r7, [r3, #20]
10010c70:	619c      	str	r4, [r3, #24]
10010c72:	61dd      	str	r5, [r3, #28]
10010c74:	464b      	mov	r3, r9
10010c76:	9400      	str	r4, [sp, #0]
10010c78:	9501      	str	r5, [sp, #4]
10010c7a:	2b02      	cmp	r3, #2
10010c7c:	d000      	beq.n	10010c80 <pow+0x2d4>
10010c7e:	e77b      	b.n	10010b78 <pow+0x1cc>
10010c80:	e6e9      	b.n	10010a56 <pow+0xaa>
10010c82:	2200      	movs	r2, #0
10010c84:	4641      	mov	r1, r8
10010c86:	4b26      	ldr	r3, [pc, #152]	; (10010d20 <pow+0x374>)
10010c88:	0020      	movs	r0, r4
10010c8a:	618a      	str	r2, [r1, #24]
10010c8c:	61cb      	str	r3, [r1, #28]
10010c8e:	2200      	movs	r2, #0
10010c90:	2300      	movs	r3, #0
10010c92:	0029      	movs	r1, r5
10010c94:	f003 fe92 	bl	100149bc <__aeabi_dcmplt>
10010c98:	2800      	cmp	r0, #0
10010c9a:	d0d4      	beq.n	10010c46 <pow+0x29a>
10010c9c:	2200      	movs	r2, #0
10010c9e:	4b1e      	ldr	r3, [pc, #120]	; (10010d18 <pow+0x36c>)
10010ca0:	0030      	movs	r0, r6
10010ca2:	0039      	movs	r1, r7
10010ca4:	f005 f900 	bl	10015ea8 <__aeabi_dmul>
10010ca8:	0004      	movs	r4, r0
10010caa:	000d      	movs	r5, r1
10010cac:	f000 fe7c 	bl	100119a8 <rint>
10010cb0:	0002      	movs	r2, r0
10010cb2:	000b      	movs	r3, r1
10010cb4:	0020      	movs	r0, r4
10010cb6:	0029      	movs	r1, r5
10010cb8:	f003 fe7a 	bl	100149b0 <__aeabi_dcmpeq>
10010cbc:	2800      	cmp	r0, #0
10010cbe:	d1be      	bne.n	10010c3e <pow+0x292>
10010cc0:	2200      	movs	r2, #0
10010cc2:	4b13      	ldr	r3, [pc, #76]	; (10010d10 <pow+0x364>)
10010cc4:	e7b8      	b.n	10010c38 <pow+0x28c>
10010cc6:	2301      	movs	r3, #1
10010cc8:	4642      	mov	r2, r8
10010cca:	9306      	str	r3, [sp, #24]
10010ccc:	4b0e      	ldr	r3, [pc, #56]	; (10010d08 <pow+0x35c>)
10010cce:	6053      	str	r3, [r2, #4]
10010cd0:	4643      	mov	r3, r8
10010cd2:	464a      	mov	r2, r9
10010cd4:	609c      	str	r4, [r3, #8]
10010cd6:	60dd      	str	r5, [r3, #12]
10010cd8:	621a      	str	r2, [r3, #32]
10010cda:	611e      	str	r6, [r3, #16]
10010cdc:	615f      	str	r7, [r3, #20]
10010cde:	2400      	movs	r4, #0
10010ce0:	465b      	mov	r3, fp
10010ce2:	571c      	ldrsb	r4, [r3, r4]
10010ce4:	2c00      	cmp	r4, #0
10010ce6:	d100      	bne.n	10010cea <pow+0x33e>
10010ce8:	e741      	b.n	10010b6e <pow+0x1c2>
10010cea:	2300      	movs	r3, #0
10010cec:	2200      	movs	r2, #0
10010cee:	0019      	movs	r1, r3
10010cf0:	0010      	movs	r0, r2
10010cf2:	f004 fcb5 	bl	10015660 <__aeabi_ddiv>
10010cf6:	4643      	mov	r3, r8
10010cf8:	6198      	str	r0, [r3, #24]
10010cfa:	61d9      	str	r1, [r3, #28]
10010cfc:	2c02      	cmp	r4, #2
10010cfe:	d100      	bne.n	10010d02 <pow+0x356>
10010d00:	e730      	b.n	10010b64 <pow+0x1b8>
10010d02:	e739      	b.n	10010b78 <pow+0x1cc>
10010d04:	10017e78 	.word	0x10017e78
10010d08:	10017b30 	.word	0x10017b30
10010d0c:	3ff00000 	.word	0x3ff00000
10010d10:	fff00000 	.word	0xfff00000
10010d14:	47efffff 	.word	0x47efffff
10010d18:	3fe00000 	.word	0x3fe00000
10010d1c:	c7efffff 	.word	0xc7efffff
10010d20:	7ff00000 	.word	0x7ff00000

10010d24 <__ieee754_pow>:
10010d24:	b5f0      	push	{r4, r5, r6, r7, lr}
10010d26:	4656      	mov	r6, sl
10010d28:	464d      	mov	r5, r9
10010d2a:	4644      	mov	r4, r8
10010d2c:	465f      	mov	r7, fp
10010d2e:	b4f0      	push	{r4, r5, r6, r7}
10010d30:	001c      	movs	r4, r3
10010d32:	0013      	movs	r3, r2
10010d34:	0067      	lsls	r7, r4, #1
10010d36:	b091      	sub	sp, #68	; 0x44
10010d38:	087f      	lsrs	r7, r7, #1
10010d3a:	9300      	str	r3, [sp, #0]
10010d3c:	9401      	str	r4, [sp, #4]
10010d3e:	0006      	movs	r6, r0
10010d40:	000d      	movs	r5, r1
10010d42:	4680      	mov	r8, r0
10010d44:	4689      	mov	r9, r1
10010d46:	46a2      	mov	sl, r4
10010d48:	433b      	orrs	r3, r7
10010d4a:	d032      	beq.n	10010db2 <__ieee754_pow+0x8e>
10010d4c:	4b6e      	ldr	r3, [pc, #440]	; (10010f08 <__ieee754_pow+0x1e4>)
10010d4e:	006c      	lsls	r4, r5, #1
10010d50:	0864      	lsrs	r4, r4, #1
10010d52:	429c      	cmp	r4, r3
10010d54:	dc29      	bgt.n	10010daa <__ieee754_pow+0x86>
10010d56:	d026      	beq.n	10010da6 <__ieee754_pow+0x82>
10010d58:	429f      	cmp	r7, r3
10010d5a:	dc26      	bgt.n	10010daa <__ieee754_pow+0x86>
10010d5c:	4b6a      	ldr	r3, [pc, #424]	; (10010f08 <__ieee754_pow+0x1e4>)
10010d5e:	429f      	cmp	r7, r3
10010d60:	d100      	bne.n	10010d64 <__ieee754_pow+0x40>
10010d62:	e089      	b.n	10010e78 <__ieee754_pow+0x154>
10010d64:	2300      	movs	r3, #0
10010d66:	469b      	mov	fp, r3
10010d68:	464b      	mov	r3, r9
10010d6a:	2b00      	cmp	r3, #0
10010d6c:	da00      	bge.n	10010d70 <__ieee754_pow+0x4c>
10010d6e:	e087      	b.n	10010e80 <__ieee754_pow+0x15c>
10010d70:	2a00      	cmp	r2, #0
10010d72:	d12f      	bne.n	10010dd4 <__ieee754_pow+0xb0>
10010d74:	4b64      	ldr	r3, [pc, #400]	; (10010f08 <__ieee754_pow+0x1e4>)
10010d76:	429f      	cmp	r7, r3
10010d78:	d100      	bne.n	10010d7c <__ieee754_pow+0x58>
10010d7a:	e09f      	b.n	10010ebc <__ieee754_pow+0x198>
10010d7c:	4b63      	ldr	r3, [pc, #396]	; (10010f0c <__ieee754_pow+0x1e8>)
10010d7e:	429f      	cmp	r7, r3
10010d80:	d05d      	beq.n	10010e3e <__ieee754_pow+0x11a>
10010d82:	2380      	movs	r3, #128	; 0x80
10010d84:	05db      	lsls	r3, r3, #23
10010d86:	459a      	cmp	sl, r3
10010d88:	d101      	bne.n	10010d8e <__ieee754_pow+0x6a>
10010d8a:	f000 fbc1 	bl	10011510 <__ieee754_pow+0x7ec>
10010d8e:	4b60      	ldr	r3, [pc, #384]	; (10010f10 <__ieee754_pow+0x1ec>)
10010d90:	459a      	cmp	sl, r3
10010d92:	d11f      	bne.n	10010dd4 <__ieee754_pow+0xb0>
10010d94:	464b      	mov	r3, r9
10010d96:	2b00      	cmp	r3, #0
10010d98:	db1c      	blt.n	10010dd4 <__ieee754_pow+0xb0>
10010d9a:	0030      	movs	r0, r6
10010d9c:	0029      	movs	r1, r5
10010d9e:	f000 fcf7 	bl	10011790 <__ieee754_sqrt>
10010da2:	0006      	movs	r6, r0
10010da4:	e007      	b.n	10010db6 <__ieee754_pow+0x92>
10010da6:	2800      	cmp	r0, #0
10010da8:	d00d      	beq.n	10010dc6 <__ieee754_pow+0xa2>
10010daa:	4b5a      	ldr	r3, [pc, #360]	; (10010f14 <__ieee754_pow+0x1f0>)
10010dac:	18e0      	adds	r0, r4, r3
10010dae:	4330      	orrs	r0, r6
10010db0:	d10b      	bne.n	10010dca <__ieee754_pow+0xa6>
10010db2:	2600      	movs	r6, #0
10010db4:	4955      	ldr	r1, [pc, #340]	; (10010f0c <__ieee754_pow+0x1e8>)
10010db6:	0030      	movs	r0, r6
10010db8:	b011      	add	sp, #68	; 0x44
10010dba:	bc3c      	pop	{r2, r3, r4, r5}
10010dbc:	4690      	mov	r8, r2
10010dbe:	4699      	mov	r9, r3
10010dc0:	46a2      	mov	sl, r4
10010dc2:	46ab      	mov	fp, r5
10010dc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
10010dc6:	42a7      	cmp	r7, r4
10010dc8:	ddc8      	ble.n	10010d5c <__ieee754_pow+0x38>
10010dca:	4853      	ldr	r0, [pc, #332]	; (10010f18 <__ieee754_pow+0x1f4>)
10010dcc:	f000 fde6 	bl	1001199c <nan>
10010dd0:	0006      	movs	r6, r0
10010dd2:	e7f0      	b.n	10010db6 <__ieee754_pow+0x92>
10010dd4:	0030      	movs	r0, r6
10010dd6:	0029      	movs	r1, r5
10010dd8:	f000 fdd0 	bl	1001197c <fabs>
10010ddc:	4643      	mov	r3, r8
10010dde:	2b00      	cmp	r3, #0
10010de0:	d01d      	beq.n	10010e1e <__ieee754_pow+0xfa>
10010de2:	0feb      	lsrs	r3, r5, #31
10010de4:	3b01      	subs	r3, #1
10010de6:	4698      	mov	r8, r3
10010de8:	465b      	mov	r3, fp
10010dea:	4642      	mov	r2, r8
10010dec:	4313      	orrs	r3, r2
10010dee:	d079      	beq.n	10010ee4 <__ieee754_pow+0x1c0>
10010df0:	4b4a      	ldr	r3, [pc, #296]	; (10010f1c <__ieee754_pow+0x1f8>)
10010df2:	429f      	cmp	r7, r3
10010df4:	dc00      	bgt.n	10010df8 <__ieee754_pow+0xd4>
10010df6:	e09f      	b.n	10010f38 <__ieee754_pow+0x214>
10010df8:	4b49      	ldr	r3, [pc, #292]	; (10010f20 <__ieee754_pow+0x1fc>)
10010dfa:	429f      	cmp	r7, r3
10010dfc:	dc01      	bgt.n	10010e02 <__ieee754_pow+0xde>
10010dfe:	f000 fbce 	bl	1001159e <__ieee754_pow+0x87a>
10010e02:	4b48      	ldr	r3, [pc, #288]	; (10010f24 <__ieee754_pow+0x200>)
10010e04:	429c      	cmp	r4, r3
10010e06:	dd79      	ble.n	10010efc <__ieee754_pow+0x1d8>
10010e08:	4653      	mov	r3, sl
10010e0a:	2b00      	cmp	r3, #0
10010e0c:	dd79      	ble.n	10010f02 <__ieee754_pow+0x1de>
10010e0e:	4a46      	ldr	r2, [pc, #280]	; (10010f28 <__ieee754_pow+0x204>)
10010e10:	4b46      	ldr	r3, [pc, #280]	; (10010f2c <__ieee754_pow+0x208>)
10010e12:	0010      	movs	r0, r2
10010e14:	0019      	movs	r1, r3
10010e16:	f005 f847 	bl	10015ea8 <__aeabi_dmul>
10010e1a:	0006      	movs	r6, r0
10010e1c:	e7cb      	b.n	10010db6 <__ieee754_pow+0x92>
10010e1e:	2c00      	cmp	r4, #0
10010e20:	d004      	beq.n	10010e2c <__ieee754_pow+0x108>
10010e22:	4a3a      	ldr	r2, [pc, #232]	; (10010f0c <__ieee754_pow+0x1e8>)
10010e24:	00ab      	lsls	r3, r5, #2
10010e26:	089b      	lsrs	r3, r3, #2
10010e28:	4293      	cmp	r3, r2
10010e2a:	d1da      	bne.n	10010de2 <__ieee754_pow+0xbe>
10010e2c:	4653      	mov	r3, sl
10010e2e:	2b00      	cmp	r3, #0
10010e30:	da00      	bge.n	10010e34 <__ieee754_pow+0x110>
10010e32:	e3ad      	b.n	10011590 <__ieee754_pow+0x86c>
10010e34:	464b      	mov	r3, r9
10010e36:	2b00      	cmp	r3, #0
10010e38:	db0d      	blt.n	10010e56 <__ieee754_pow+0x132>
10010e3a:	0006      	movs	r6, r0
10010e3c:	e7bb      	b.n	10010db6 <__ieee754_pow+0x92>
10010e3e:	4653      	mov	r3, sl
10010e40:	0029      	movs	r1, r5
10010e42:	2b00      	cmp	r3, #0
10010e44:	dab7      	bge.n	10010db6 <__ieee754_pow+0x92>
10010e46:	0032      	movs	r2, r6
10010e48:	002b      	movs	r3, r5
10010e4a:	2000      	movs	r0, #0
10010e4c:	492f      	ldr	r1, [pc, #188]	; (10010f0c <__ieee754_pow+0x1e8>)
10010e4e:	f004 fc07 	bl	10015660 <__aeabi_ddiv>
10010e52:	0006      	movs	r6, r0
10010e54:	e7af      	b.n	10010db6 <__ieee754_pow+0x92>
10010e56:	4b2f      	ldr	r3, [pc, #188]	; (10010f14 <__ieee754_pow+0x1f0>)
10010e58:	469c      	mov	ip, r3
10010e5a:	465b      	mov	r3, fp
10010e5c:	4464      	add	r4, ip
10010e5e:	431c      	orrs	r4, r3
10010e60:	d101      	bne.n	10010e66 <__ieee754_pow+0x142>
10010e62:	f000 fc2b 	bl	100116bc <__ieee754_pow+0x998>
10010e66:	465b      	mov	r3, fp
10010e68:	0006      	movs	r6, r0
10010e6a:	2b01      	cmp	r3, #1
10010e6c:	d1a3      	bne.n	10010db6 <__ieee754_pow+0x92>
10010e6e:	2380      	movs	r3, #128	; 0x80
10010e70:	061b      	lsls	r3, r3, #24
10010e72:	469c      	mov	ip, r3
10010e74:	4461      	add	r1, ip
10010e76:	e79e      	b.n	10010db6 <__ieee754_pow+0x92>
10010e78:	2a00      	cmp	r2, #0
10010e7a:	d100      	bne.n	10010e7e <__ieee754_pow+0x15a>
10010e7c:	e772      	b.n	10010d64 <__ieee754_pow+0x40>
10010e7e:	e794      	b.n	10010daa <__ieee754_pow+0x86>
10010e80:	4b2b      	ldr	r3, [pc, #172]	; (10010f30 <__ieee754_pow+0x20c>)
10010e82:	429f      	cmp	r7, r3
10010e84:	dc2b      	bgt.n	10010ede <__ieee754_pow+0x1ba>
10010e86:	4b27      	ldr	r3, [pc, #156]	; (10010f24 <__ieee754_pow+0x200>)
10010e88:	429f      	cmp	r7, r3
10010e8a:	dc00      	bgt.n	10010e8e <__ieee754_pow+0x16a>
10010e8c:	e770      	b.n	10010d70 <__ieee754_pow+0x4c>
10010e8e:	4929      	ldr	r1, [pc, #164]	; (10010f34 <__ieee754_pow+0x210>)
10010e90:	153b      	asrs	r3, r7, #20
10010e92:	468c      	mov	ip, r1
10010e94:	4463      	add	r3, ip
10010e96:	2b14      	cmp	r3, #20
10010e98:	dc01      	bgt.n	10010e9e <__ieee754_pow+0x17a>
10010e9a:	f000 fbf2 	bl	10011682 <__ieee754_pow+0x95e>
10010e9e:	2134      	movs	r1, #52	; 0x34
10010ea0:	1acb      	subs	r3, r1, r3
10010ea2:	9900      	ldr	r1, [sp, #0]
10010ea4:	40d9      	lsrs	r1, r3
10010ea6:	0008      	movs	r0, r1
10010ea8:	4098      	lsls	r0, r3
10010eaa:	4282      	cmp	r2, r0
10010eac:	d000      	beq.n	10010eb0 <__ieee754_pow+0x18c>
10010eae:	e75f      	b.n	10010d70 <__ieee754_pow+0x4c>
10010eb0:	2301      	movs	r3, #1
10010eb2:	4019      	ands	r1, r3
10010eb4:	3301      	adds	r3, #1
10010eb6:	1a5b      	subs	r3, r3, r1
10010eb8:	469b      	mov	fp, r3
10010eba:	e759      	b.n	10010d70 <__ieee754_pow+0x4c>
10010ebc:	4b15      	ldr	r3, [pc, #84]	; (10010f14 <__ieee754_pow+0x1f0>)
10010ebe:	18e0      	adds	r0, r4, r3
10010ec0:	4306      	orrs	r6, r0
10010ec2:	d100      	bne.n	10010ec6 <__ieee754_pow+0x1a2>
10010ec4:	e775      	b.n	10010db2 <__ieee754_pow+0x8e>
10010ec6:	4b17      	ldr	r3, [pc, #92]	; (10010f24 <__ieee754_pow+0x200>)
10010ec8:	429c      	cmp	r4, r3
10010eca:	dc00      	bgt.n	10010ece <__ieee754_pow+0x1aa>
10010ecc:	e351      	b.n	10011572 <__ieee754_pow+0x84e>
10010ece:	4653      	mov	r3, sl
10010ed0:	2b00      	cmp	r3, #0
10010ed2:	db16      	blt.n	10010f02 <__ieee754_pow+0x1de>
10010ed4:	9b00      	ldr	r3, [sp, #0]
10010ed6:	9c01      	ldr	r4, [sp, #4]
10010ed8:	001e      	movs	r6, r3
10010eda:	0021      	movs	r1, r4
10010edc:	e76b      	b.n	10010db6 <__ieee754_pow+0x92>
10010ede:	2302      	movs	r3, #2
10010ee0:	469b      	mov	fp, r3
10010ee2:	e745      	b.n	10010d70 <__ieee754_pow+0x4c>
10010ee4:	0032      	movs	r2, r6
10010ee6:	002b      	movs	r3, r5
10010ee8:	0030      	movs	r0, r6
10010eea:	0029      	movs	r1, r5
10010eec:	f005 fa56 	bl	1001639c <__aeabi_dsub>
10010ef0:	0002      	movs	r2, r0
10010ef2:	000b      	movs	r3, r1
10010ef4:	f004 fbb4 	bl	10015660 <__aeabi_ddiv>
10010ef8:	0006      	movs	r6, r0
10010efa:	e75c      	b.n	10010db6 <__ieee754_pow+0x92>
10010efc:	4653      	mov	r3, sl
10010efe:	2b00      	cmp	r3, #0
10010f00:	db85      	blt.n	10010e0e <__ieee754_pow+0xea>
10010f02:	2600      	movs	r6, #0
10010f04:	2100      	movs	r1, #0
10010f06:	e756      	b.n	10010db6 <__ieee754_pow+0x92>
10010f08:	7ff00000 	.word	0x7ff00000
10010f0c:	3ff00000 	.word	0x3ff00000
10010f10:	3fe00000 	.word	0x3fe00000
10010f14:	c0100000 	.word	0xc0100000
10010f18:	10016ed8 	.word	0x10016ed8
10010f1c:	41e00000 	.word	0x41e00000
10010f20:	43f00000 	.word	0x43f00000
10010f24:	3fefffff 	.word	0x3fefffff
10010f28:	8800759c 	.word	0x8800759c
10010f2c:	7e37e43c 	.word	0x7e37e43c
10010f30:	433fffff 	.word	0x433fffff
10010f34:	fffffc01 	.word	0xfffffc01
10010f38:	4be8      	ldr	r3, [pc, #928]	; (100112dc <__ieee754_pow+0x5b8>)
10010f3a:	2200      	movs	r2, #0
10010f3c:	429c      	cmp	r4, r3
10010f3e:	dc06      	bgt.n	10010f4e <__ieee754_pow+0x22a>
10010f40:	2200      	movs	r2, #0
10010f42:	4be7      	ldr	r3, [pc, #924]	; (100112e0 <__ieee754_pow+0x5bc>)
10010f44:	f004 ffb0 	bl	10015ea8 <__aeabi_dmul>
10010f48:	2235      	movs	r2, #53	; 0x35
10010f4a:	000c      	movs	r4, r1
10010f4c:	4252      	negs	r2, r2
10010f4e:	4de5      	ldr	r5, [pc, #916]	; (100112e4 <__ieee754_pow+0x5c0>)
10010f50:	1523      	asrs	r3, r4, #20
10010f52:	46ac      	mov	ip, r5
10010f54:	4463      	add	r3, ip
10010f56:	4699      	mov	r9, r3
10010f58:	0324      	lsls	r4, r4, #12
10010f5a:	4de3      	ldr	r5, [pc, #908]	; (100112e8 <__ieee754_pow+0x5c4>)
10010f5c:	4be3      	ldr	r3, [pc, #908]	; (100112ec <__ieee754_pow+0x5c8>)
10010f5e:	0b24      	lsrs	r4, r4, #12
10010f60:	4491      	add	r9, r2
10010f62:	4325      	orrs	r5, r4
10010f64:	429c      	cmp	r4, r3
10010f66:	dd09      	ble.n	10010f7c <__ieee754_pow+0x258>
10010f68:	4be1      	ldr	r3, [pc, #900]	; (100112f0 <__ieee754_pow+0x5cc>)
10010f6a:	429c      	cmp	r4, r3
10010f6c:	dc00      	bgt.n	10010f70 <__ieee754_pow+0x24c>
10010f6e:	e3a9      	b.n	100116c4 <__ieee754_pow+0x9a0>
10010f70:	2301      	movs	r3, #1
10010f72:	469c      	mov	ip, r3
10010f74:	4bdf      	ldr	r3, [pc, #892]	; (100112f4 <__ieee754_pow+0x5d0>)
10010f76:	44e1      	add	r9, ip
10010f78:	469c      	mov	ip, r3
10010f7a:	4465      	add	r5, ip
10010f7c:	2300      	movs	r3, #0
10010f7e:	2400      	movs	r4, #0
10010f80:	2200      	movs	r2, #0
10010f82:	9308      	str	r3, [sp, #32]
10010f84:	9409      	str	r4, [sp, #36]	; 0x24
10010f86:	930c      	str	r3, [sp, #48]	; 0x30
10010f88:	940d      	str	r4, [sp, #52]	; 0x34
10010f8a:	2400      	movs	r4, #0
10010f8c:	4bd6      	ldr	r3, [pc, #856]	; (100112e8 <__ieee754_pow+0x5c4>)
10010f8e:	9206      	str	r2, [sp, #24]
10010f90:	9307      	str	r3, [sp, #28]
10010f92:	9a06      	ldr	r2, [sp, #24]
10010f94:	9b07      	ldr	r3, [sp, #28]
10010f96:	0029      	movs	r1, r5
10010f98:	900a      	str	r0, [sp, #40]	; 0x28
10010f9a:	910b      	str	r1, [sp, #44]	; 0x2c
10010f9c:	f005 f9fe 	bl	1001639c <__aeabi_dsub>
10010fa0:	9a06      	ldr	r2, [sp, #24]
10010fa2:	9b07      	ldr	r3, [sp, #28]
10010fa4:	0006      	movs	r6, r0
10010fa6:	000f      	movs	r7, r1
10010fa8:	980a      	ldr	r0, [sp, #40]	; 0x28
10010faa:	990b      	ldr	r1, [sp, #44]	; 0x2c
10010fac:	f004 f82c 	bl	10015008 <__aeabi_dadd>
10010fb0:	0002      	movs	r2, r0
10010fb2:	000b      	movs	r3, r1
10010fb4:	2000      	movs	r0, #0
10010fb6:	49cc      	ldr	r1, [pc, #816]	; (100112e8 <__ieee754_pow+0x5c4>)
10010fb8:	f004 fb52 	bl	10015660 <__aeabi_ddiv>
10010fbc:	000a      	movs	r2, r1
10010fbe:	0001      	movs	r1, r0
10010fc0:	0013      	movs	r3, r2
10010fc2:	910e      	str	r1, [sp, #56]	; 0x38
10010fc4:	920f      	str	r2, [sp, #60]	; 0x3c
10010fc6:	0002      	movs	r2, r0
10010fc8:	0039      	movs	r1, r7
10010fca:	0030      	movs	r0, r6
10010fcc:	f004 ff6c 	bl	10015ea8 <__aeabi_dmul>
10010fd0:	000a      	movs	r2, r1
10010fd2:	0001      	movs	r1, r0
10010fd4:	2080      	movs	r0, #128	; 0x80
10010fd6:	9104      	str	r1, [sp, #16]
10010fd8:	9205      	str	r2, [sp, #20]
10010fda:	0013      	movs	r3, r2
10010fdc:	2200      	movs	r2, #0
10010fde:	2180      	movs	r1, #128	; 0x80
10010fe0:	0300      	lsls	r0, r0, #12
10010fe2:	4684      	mov	ip, r0
10010fe4:	9202      	str	r2, [sp, #8]
10010fe6:	9303      	str	r3, [sp, #12]
10010fe8:	2200      	movs	r2, #0
10010fea:	0589      	lsls	r1, r1, #22
10010fec:	106d      	asrs	r5, r5, #1
10010fee:	430d      	orrs	r5, r1
10010ff0:	4465      	add	r5, ip
10010ff2:	192b      	adds	r3, r5, r4
10010ff4:	9802      	ldr	r0, [sp, #8]
10010ff6:	9903      	ldr	r1, [sp, #12]
10010ff8:	0014      	movs	r4, r2
10010ffa:	001d      	movs	r5, r3
10010ffc:	f004 ff54 	bl	10015ea8 <__aeabi_dmul>
10011000:	0002      	movs	r2, r0
10011002:	000b      	movs	r3, r1
10011004:	0030      	movs	r0, r6
10011006:	0039      	movs	r1, r7
10011008:	f005 f9c8 	bl	1001639c <__aeabi_dsub>
1001100c:	9a06      	ldr	r2, [sp, #24]
1001100e:	9b07      	ldr	r3, [sp, #28]
10011010:	0006      	movs	r6, r0
10011012:	000f      	movs	r7, r1
10011014:	0020      	movs	r0, r4
10011016:	0029      	movs	r1, r5
10011018:	f005 f9c0 	bl	1001639c <__aeabi_dsub>
1001101c:	0002      	movs	r2, r0
1001101e:	000b      	movs	r3, r1
10011020:	980a      	ldr	r0, [sp, #40]	; 0x28
10011022:	990b      	ldr	r1, [sp, #44]	; 0x2c
10011024:	f005 f9ba 	bl	1001639c <__aeabi_dsub>
10011028:	9a02      	ldr	r2, [sp, #8]
1001102a:	9b03      	ldr	r3, [sp, #12]
1001102c:	f004 ff3c 	bl	10015ea8 <__aeabi_dmul>
10011030:	0002      	movs	r2, r0
10011032:	000b      	movs	r3, r1
10011034:	0030      	movs	r0, r6
10011036:	0039      	movs	r1, r7
10011038:	f005 f9b0 	bl	1001639c <__aeabi_dsub>
1001103c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
1001103e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
10011040:	f004 ff32 	bl	10015ea8 <__aeabi_dmul>
10011044:	9d04      	ldr	r5, [sp, #16]
10011046:	9e05      	ldr	r6, [sp, #20]
10011048:	9006      	str	r0, [sp, #24]
1001104a:	9107      	str	r1, [sp, #28]
1001104c:	002a      	movs	r2, r5
1001104e:	0033      	movs	r3, r6
10011050:	0028      	movs	r0, r5
10011052:	0031      	movs	r1, r6
10011054:	f004 ff28 	bl	10015ea8 <__aeabi_dmul>
10011058:	0006      	movs	r6, r0
1001105a:	000f      	movs	r7, r1
1001105c:	4aa6      	ldr	r2, [pc, #664]	; (100112f8 <__ieee754_pow+0x5d4>)
1001105e:	4ba7      	ldr	r3, [pc, #668]	; (100112fc <__ieee754_pow+0x5d8>)
10011060:	f004 ff22 	bl	10015ea8 <__aeabi_dmul>
10011064:	4aa6      	ldr	r2, [pc, #664]	; (10011300 <__ieee754_pow+0x5dc>)
10011066:	4ba7      	ldr	r3, [pc, #668]	; (10011304 <__ieee754_pow+0x5e0>)
10011068:	f003 ffce 	bl	10015008 <__aeabi_dadd>
1001106c:	0032      	movs	r2, r6
1001106e:	003b      	movs	r3, r7
10011070:	f004 ff1a 	bl	10015ea8 <__aeabi_dmul>
10011074:	4aa4      	ldr	r2, [pc, #656]	; (10011308 <__ieee754_pow+0x5e4>)
10011076:	4ba5      	ldr	r3, [pc, #660]	; (1001130c <__ieee754_pow+0x5e8>)
10011078:	f003 ffc6 	bl	10015008 <__aeabi_dadd>
1001107c:	0032      	movs	r2, r6
1001107e:	003b      	movs	r3, r7
10011080:	f004 ff12 	bl	10015ea8 <__aeabi_dmul>
10011084:	4aa2      	ldr	r2, [pc, #648]	; (10011310 <__ieee754_pow+0x5ec>)
10011086:	4ba3      	ldr	r3, [pc, #652]	; (10011314 <__ieee754_pow+0x5f0>)
10011088:	f003 ffbe 	bl	10015008 <__aeabi_dadd>
1001108c:	0032      	movs	r2, r6
1001108e:	003b      	movs	r3, r7
10011090:	f004 ff0a 	bl	10015ea8 <__aeabi_dmul>
10011094:	4aa0      	ldr	r2, [pc, #640]	; (10011318 <__ieee754_pow+0x5f4>)
10011096:	4ba1      	ldr	r3, [pc, #644]	; (1001131c <__ieee754_pow+0x5f8>)
10011098:	f003 ffb6 	bl	10015008 <__aeabi_dadd>
1001109c:	0032      	movs	r2, r6
1001109e:	003b      	movs	r3, r7
100110a0:	f004 ff02 	bl	10015ea8 <__aeabi_dmul>
100110a4:	4a9e      	ldr	r2, [pc, #632]	; (10011320 <__ieee754_pow+0x5fc>)
100110a6:	4b9f      	ldr	r3, [pc, #636]	; (10011324 <__ieee754_pow+0x600>)
100110a8:	f003 ffae 	bl	10015008 <__aeabi_dadd>
100110ac:	0032      	movs	r2, r6
100110ae:	0004      	movs	r4, r0
100110b0:	000d      	movs	r5, r1
100110b2:	003b      	movs	r3, r7
100110b4:	0030      	movs	r0, r6
100110b6:	0039      	movs	r1, r7
100110b8:	f004 fef6 	bl	10015ea8 <__aeabi_dmul>
100110bc:	0002      	movs	r2, r0
100110be:	000b      	movs	r3, r1
100110c0:	0020      	movs	r0, r4
100110c2:	0029      	movs	r1, r5
100110c4:	f004 fef0 	bl	10015ea8 <__aeabi_dmul>
100110c8:	9e02      	ldr	r6, [sp, #8]
100110ca:	9f03      	ldr	r7, [sp, #12]
100110cc:	0004      	movs	r4, r0
100110ce:	000d      	movs	r5, r1
100110d0:	9804      	ldr	r0, [sp, #16]
100110d2:	9905      	ldr	r1, [sp, #20]
100110d4:	0032      	movs	r2, r6
100110d6:	003b      	movs	r3, r7
100110d8:	f003 ff96 	bl	10015008 <__aeabi_dadd>
100110dc:	9a06      	ldr	r2, [sp, #24]
100110de:	9b07      	ldr	r3, [sp, #28]
100110e0:	f004 fee2 	bl	10015ea8 <__aeabi_dmul>
100110e4:	0022      	movs	r2, r4
100110e6:	002b      	movs	r3, r5
100110e8:	f003 ff8e 	bl	10015008 <__aeabi_dadd>
100110ec:	0032      	movs	r2, r6
100110ee:	900a      	str	r0, [sp, #40]	; 0x28
100110f0:	910b      	str	r1, [sp, #44]	; 0x2c
100110f2:	003b      	movs	r3, r7
100110f4:	0030      	movs	r0, r6
100110f6:	0039      	movs	r1, r7
100110f8:	9602      	str	r6, [sp, #8]
100110fa:	9703      	str	r7, [sp, #12]
100110fc:	f004 fed4 	bl	10015ea8 <__aeabi_dmul>
10011100:	2200      	movs	r2, #0
10011102:	4b89      	ldr	r3, [pc, #548]	; (10011328 <__ieee754_pow+0x604>)
10011104:	0004      	movs	r4, r0
10011106:	000d      	movs	r5, r1
10011108:	f003 ff7e 	bl	10015008 <__aeabi_dadd>
1001110c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
1001110e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
10011110:	f003 ff7a 	bl	10015008 <__aeabi_dadd>
10011114:	2600      	movs	r6, #0
10011116:	000f      	movs	r7, r1
10011118:	0032      	movs	r2, r6
1001111a:	000b      	movs	r3, r1
1001111c:	9802      	ldr	r0, [sp, #8]
1001111e:	9903      	ldr	r1, [sp, #12]
10011120:	f004 fec2 	bl	10015ea8 <__aeabi_dmul>
10011124:	2200      	movs	r2, #0
10011126:	9002      	str	r0, [sp, #8]
10011128:	9103      	str	r1, [sp, #12]
1001112a:	4b7f      	ldr	r3, [pc, #508]	; (10011328 <__ieee754_pow+0x604>)
1001112c:	0030      	movs	r0, r6
1001112e:	0039      	movs	r1, r7
10011130:	f005 f934 	bl	1001639c <__aeabi_dsub>
10011134:	0022      	movs	r2, r4
10011136:	002b      	movs	r3, r5
10011138:	f005 f930 	bl	1001639c <__aeabi_dsub>
1001113c:	0002      	movs	r2, r0
1001113e:	000b      	movs	r3, r1
10011140:	980a      	ldr	r0, [sp, #40]	; 0x28
10011142:	990b      	ldr	r1, [sp, #44]	; 0x2c
10011144:	f005 f92a 	bl	1001639c <__aeabi_dsub>
10011148:	9a04      	ldr	r2, [sp, #16]
1001114a:	9b05      	ldr	r3, [sp, #20]
1001114c:	f004 feac 	bl	10015ea8 <__aeabi_dmul>
10011150:	0032      	movs	r2, r6
10011152:	0004      	movs	r4, r0
10011154:	000d      	movs	r5, r1
10011156:	9806      	ldr	r0, [sp, #24]
10011158:	9907      	ldr	r1, [sp, #28]
1001115a:	003b      	movs	r3, r7
1001115c:	f004 fea4 	bl	10015ea8 <__aeabi_dmul>
10011160:	0002      	movs	r2, r0
10011162:	000b      	movs	r3, r1
10011164:	0020      	movs	r0, r4
10011166:	0029      	movs	r1, r5
10011168:	f003 ff4e 	bl	10015008 <__aeabi_dadd>
1001116c:	0004      	movs	r4, r0
1001116e:	000d      	movs	r5, r1
10011170:	0002      	movs	r2, r0
10011172:	000b      	movs	r3, r1
10011174:	9802      	ldr	r0, [sp, #8]
10011176:	9903      	ldr	r1, [sp, #12]
10011178:	f003 ff46 	bl	10015008 <__aeabi_dadd>
1001117c:	2600      	movs	r6, #0
1001117e:	22e0      	movs	r2, #224	; 0xe0
10011180:	4b6a      	ldr	r3, [pc, #424]	; (1001132c <__ieee754_pow+0x608>)
10011182:	0612      	lsls	r2, r2, #24
10011184:	0030      	movs	r0, r6
10011186:	000f      	movs	r7, r1
10011188:	f004 fe8e 	bl	10015ea8 <__aeabi_dmul>
1001118c:	9a02      	ldr	r2, [sp, #8]
1001118e:	9b03      	ldr	r3, [sp, #12]
10011190:	9004      	str	r0, [sp, #16]
10011192:	9105      	str	r1, [sp, #20]
10011194:	0030      	movs	r0, r6
10011196:	0039      	movs	r1, r7
10011198:	f005 f900 	bl	1001639c <__aeabi_dsub>
1001119c:	0002      	movs	r2, r0
1001119e:	000b      	movs	r3, r1
100111a0:	0020      	movs	r0, r4
100111a2:	0029      	movs	r1, r5
100111a4:	f005 f8fa 	bl	1001639c <__aeabi_dsub>
100111a8:	4a61      	ldr	r2, [pc, #388]	; (10011330 <__ieee754_pow+0x60c>)
100111aa:	4b60      	ldr	r3, [pc, #384]	; (1001132c <__ieee754_pow+0x608>)
100111ac:	f004 fe7c 	bl	10015ea8 <__aeabi_dmul>
100111b0:	4a60      	ldr	r2, [pc, #384]	; (10011334 <__ieee754_pow+0x610>)
100111b2:	0004      	movs	r4, r0
100111b4:	000d      	movs	r5, r1
100111b6:	4b60      	ldr	r3, [pc, #384]	; (10011338 <__ieee754_pow+0x614>)
100111b8:	0030      	movs	r0, r6
100111ba:	0039      	movs	r1, r7
100111bc:	f004 fe74 	bl	10015ea8 <__aeabi_dmul>
100111c0:	0002      	movs	r2, r0
100111c2:	000b      	movs	r3, r1
100111c4:	0020      	movs	r0, r4
100111c6:	0029      	movs	r1, r5
100111c8:	f003 ff1e 	bl	10015008 <__aeabi_dadd>
100111cc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
100111ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
100111d0:	f003 ff1a 	bl	10015008 <__aeabi_dadd>
100111d4:	0006      	movs	r6, r0
100111d6:	4648      	mov	r0, r9
100111d8:	000f      	movs	r7, r1
100111da:	f005 fc89 	bl	10016af0 <__aeabi_i2d>
100111de:	0004      	movs	r4, r0
100111e0:	000d      	movs	r5, r1
100111e2:	9804      	ldr	r0, [sp, #16]
100111e4:	9905      	ldr	r1, [sp, #20]
100111e6:	0032      	movs	r2, r6
100111e8:	003b      	movs	r3, r7
100111ea:	f003 ff0d 	bl	10015008 <__aeabi_dadd>
100111ee:	9a08      	ldr	r2, [sp, #32]
100111f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
100111f2:	f003 ff09 	bl	10015008 <__aeabi_dadd>
100111f6:	0022      	movs	r2, r4
100111f8:	002b      	movs	r3, r5
100111fa:	f003 ff05 	bl	10015008 <__aeabi_dadd>
100111fe:	2000      	movs	r0, #0
10011200:	0022      	movs	r2, r4
10011202:	002b      	movs	r3, r5
10011204:	9002      	str	r0, [sp, #8]
10011206:	9103      	str	r1, [sp, #12]
10011208:	f005 f8c8 	bl	1001639c <__aeabi_dsub>
1001120c:	9a08      	ldr	r2, [sp, #32]
1001120e:	9b09      	ldr	r3, [sp, #36]	; 0x24
10011210:	f005 f8c4 	bl	1001639c <__aeabi_dsub>
10011214:	9a04      	ldr	r2, [sp, #16]
10011216:	9b05      	ldr	r3, [sp, #20]
10011218:	f005 f8c0 	bl	1001639c <__aeabi_dsub>
1001121c:	0002      	movs	r2, r0
1001121e:	000b      	movs	r3, r1
10011220:	0030      	movs	r0, r6
10011222:	0039      	movs	r1, r7
10011224:	f005 f8ba 	bl	1001639c <__aeabi_dsub>
10011228:	9004      	str	r0, [sp, #16]
1001122a:	9105      	str	r1, [sp, #20]
1001122c:	465b      	mov	r3, fp
1001122e:	4642      	mov	r2, r8
10011230:	3b01      	subs	r3, #1
10011232:	4313      	orrs	r3, r2
10011234:	d100      	bne.n	10011238 <__ieee754_pow+0x514>
10011236:	e197      	b.n	10011568 <__ieee754_pow+0x844>
10011238:	2300      	movs	r3, #0
1001123a:	4c2b      	ldr	r4, [pc, #172]	; (100112e8 <__ieee754_pow+0x5c4>)
1001123c:	9306      	str	r3, [sp, #24]
1001123e:	9407      	str	r4, [sp, #28]
10011240:	9800      	ldr	r0, [sp, #0]
10011242:	9901      	ldr	r1, [sp, #4]
10011244:	2600      	movs	r6, #0
10011246:	000b      	movs	r3, r1
10011248:	0032      	movs	r2, r6
1001124a:	000f      	movs	r7, r1
1001124c:	f005 f8a6 	bl	1001639c <__aeabi_dsub>
10011250:	9a02      	ldr	r2, [sp, #8]
10011252:	9b03      	ldr	r3, [sp, #12]
10011254:	f004 fe28 	bl	10015ea8 <__aeabi_dmul>
10011258:	9a00      	ldr	r2, [sp, #0]
1001125a:	9b01      	ldr	r3, [sp, #4]
1001125c:	0004      	movs	r4, r0
1001125e:	000d      	movs	r5, r1
10011260:	9804      	ldr	r0, [sp, #16]
10011262:	9905      	ldr	r1, [sp, #20]
10011264:	f004 fe20 	bl	10015ea8 <__aeabi_dmul>
10011268:	0002      	movs	r2, r0
1001126a:	000b      	movs	r3, r1
1001126c:	0020      	movs	r0, r4
1001126e:	0029      	movs	r1, r5
10011270:	f003 feca 	bl	10015008 <__aeabi_dadd>
10011274:	0004      	movs	r4, r0
10011276:	000d      	movs	r5, r1
10011278:	9802      	ldr	r0, [sp, #8]
1001127a:	9903      	ldr	r1, [sp, #12]
1001127c:	003b      	movs	r3, r7
1001127e:	0032      	movs	r2, r6
10011280:	9404      	str	r4, [sp, #16]
10011282:	9505      	str	r5, [sp, #20]
10011284:	f004 fe10 	bl	10015ea8 <__aeabi_dmul>
10011288:	9000      	str	r0, [sp, #0]
1001128a:	9101      	str	r1, [sp, #4]
1001128c:	000b      	movs	r3, r1
1001128e:	0002      	movs	r2, r0
10011290:	0029      	movs	r1, r5
10011292:	0020      	movs	r0, r4
10011294:	f003 feb8 	bl	10015008 <__aeabi_dadd>
10011298:	4b28      	ldr	r3, [pc, #160]	; (1001133c <__ieee754_pow+0x618>)
1001129a:	4681      	mov	r9, r0
1001129c:	1e0f      	subs	r7, r1, #0
1001129e:	468a      	mov	sl, r1
100112a0:	429f      	cmp	r7, r3
100112a2:	dc00      	bgt.n	100112a6 <__ieee754_pow+0x582>
100112a4:	e13c      	b.n	10011520 <__ieee754_pow+0x7fc>
100112a6:	4b26      	ldr	r3, [pc, #152]	; (10011340 <__ieee754_pow+0x61c>)
100112a8:	18cb      	adds	r3, r1, r3
100112aa:	4303      	orrs	r3, r0
100112ac:	d000      	beq.n	100112b0 <__ieee754_pow+0x58c>
100112ae:	e1db      	b.n	10011668 <__ieee754_pow+0x944>
100112b0:	9804      	ldr	r0, [sp, #16]
100112b2:	9905      	ldr	r1, [sp, #20]
100112b4:	4a23      	ldr	r2, [pc, #140]	; (10011344 <__ieee754_pow+0x620>)
100112b6:	4b24      	ldr	r3, [pc, #144]	; (10011348 <__ieee754_pow+0x624>)
100112b8:	f003 fea6 	bl	10015008 <__aeabi_dadd>
100112bc:	9a00      	ldr	r2, [sp, #0]
100112be:	9b01      	ldr	r3, [sp, #4]
100112c0:	0004      	movs	r4, r0
100112c2:	000d      	movs	r5, r1
100112c4:	4648      	mov	r0, r9
100112c6:	0039      	movs	r1, r7
100112c8:	f005 f868 	bl	1001639c <__aeabi_dsub>
100112cc:	0002      	movs	r2, r0
100112ce:	000b      	movs	r3, r1
100112d0:	0020      	movs	r0, r4
100112d2:	0029      	movs	r1, r5
100112d4:	f003 fb86 	bl	100149e4 <__aeabi_dcmpgt>
100112d8:	003e      	movs	r6, r7
100112da:	e037      	b.n	1001134c <__ieee754_pow+0x628>
100112dc:	000fffff 	.word	0x000fffff
100112e0:	43400000 	.word	0x43400000
100112e4:	fffffc01 	.word	0xfffffc01
100112e8:	3ff00000 	.word	0x3ff00000
100112ec:	0003988e 	.word	0x0003988e
100112f0:	000bb679 	.word	0x000bb679
100112f4:	fff00000 	.word	0xfff00000
100112f8:	4a454eef 	.word	0x4a454eef
100112fc:	3fca7e28 	.word	0x3fca7e28
10011300:	93c9db65 	.word	0x93c9db65
10011304:	3fcd864a 	.word	0x3fcd864a
10011308:	a91d4101 	.word	0xa91d4101
1001130c:	3fd17460 	.word	0x3fd17460
10011310:	518f264d 	.word	0x518f264d
10011314:	3fd55555 	.word	0x3fd55555
10011318:	db6fabff 	.word	0xdb6fabff
1001131c:	3fdb6db6 	.word	0x3fdb6db6
10011320:	33333303 	.word	0x33333303
10011324:	3fe33333 	.word	0x3fe33333
10011328:	40080000 	.word	0x40080000
1001132c:	3feec709 	.word	0x3feec709
10011330:	dc3a03fd 	.word	0xdc3a03fd
10011334:	145b01f5 	.word	0x145b01f5
10011338:	be3e2fe0 	.word	0xbe3e2fe0
1001133c:	408fffff 	.word	0x408fffff
10011340:	bf700000 	.word	0xbf700000
10011344:	652b82fe 	.word	0x652b82fe
10011348:	3c971547 	.word	0x3c971547
1001134c:	2800      	cmp	r0, #0
1001134e:	d000      	beq.n	10011352 <__ieee754_pow+0x62e>
10011350:	e18a      	b.n	10011668 <__ieee754_pow+0x944>
10011352:	2280      	movs	r2, #128	; 0x80
10011354:	4be7      	ldr	r3, [pc, #924]	; (100116f4 <__ieee754_pow+0x9d0>)
10011356:	0352      	lsls	r2, r2, #13
10011358:	469c      	mov	ip, r3
1001135a:	0013      	movs	r3, r2
1001135c:	1536      	asrs	r6, r6, #20
1001135e:	4466      	add	r6, ip
10011360:	4133      	asrs	r3, r6
10011362:	49e5      	ldr	r1, [pc, #916]	; (100116f8 <__ieee754_pow+0x9d4>)
10011364:	19db      	adds	r3, r3, r7
10011366:	005e      	lsls	r6, r3, #1
10011368:	001c      	movs	r4, r3
1001136a:	031b      	lsls	r3, r3, #12
1001136c:	468c      	mov	ip, r1
1001136e:	0b1b      	lsrs	r3, r3, #12
10011370:	4313      	orrs	r3, r2
10011372:	2214      	movs	r2, #20
10011374:	0d76      	lsrs	r6, r6, #21
10011376:	4fe1      	ldr	r7, [pc, #900]	; (100116fc <__ieee754_pow+0x9d8>)
10011378:	4466      	add	r6, ip
1001137a:	4137      	asrs	r7, r6
1001137c:	1b96      	subs	r6, r2, r6
1001137e:	4133      	asrs	r3, r6
10011380:	4698      	mov	r8, r3
10011382:	4653      	mov	r3, sl
10011384:	43bc      	bics	r4, r7
10011386:	2000      	movs	r0, #0
10011388:	0021      	movs	r1, r4
1001138a:	2b00      	cmp	r3, #0
1001138c:	da00      	bge.n	10011390 <__ieee754_pow+0x66c>
1001138e:	e1a9      	b.n	100116e4 <__ieee754_pow+0x9c0>
10011390:	0002      	movs	r2, r0
10011392:	000b      	movs	r3, r1
10011394:	9800      	ldr	r0, [sp, #0]
10011396:	9901      	ldr	r1, [sp, #4]
10011398:	f005 f800 	bl	1001639c <__aeabi_dsub>
1001139c:	000b      	movs	r3, r1
1001139e:	9000      	str	r0, [sp, #0]
100113a0:	9101      	str	r1, [sp, #4]
100113a2:	0002      	movs	r2, r0
100113a4:	9804      	ldr	r0, [sp, #16]
100113a6:	9905      	ldr	r1, [sp, #20]
100113a8:	f003 fe2e 	bl	10015008 <__aeabi_dadd>
100113ac:	4643      	mov	r3, r8
100113ae:	051b      	lsls	r3, r3, #20
100113b0:	4699      	mov	r9, r3
100113b2:	2000      	movs	r0, #0
100113b4:	2200      	movs	r2, #0
100113b6:	4bd2      	ldr	r3, [pc, #840]	; (10011700 <__ieee754_pow+0x9dc>)
100113b8:	0006      	movs	r6, r0
100113ba:	000f      	movs	r7, r1
100113bc:	f004 fd74 	bl	10015ea8 <__aeabi_dmul>
100113c0:	9a00      	ldr	r2, [sp, #0]
100113c2:	9b01      	ldr	r3, [sp, #4]
100113c4:	9002      	str	r0, [sp, #8]
100113c6:	9103      	str	r1, [sp, #12]
100113c8:	0030      	movs	r0, r6
100113ca:	0039      	movs	r1, r7
100113cc:	f004 ffe6 	bl	1001639c <__aeabi_dsub>
100113d0:	0002      	movs	r2, r0
100113d2:	000b      	movs	r3, r1
100113d4:	9804      	ldr	r0, [sp, #16]
100113d6:	9905      	ldr	r1, [sp, #20]
100113d8:	f004 ffe0 	bl	1001639c <__aeabi_dsub>
100113dc:	4ac9      	ldr	r2, [pc, #804]	; (10011704 <__ieee754_pow+0x9e0>)
100113de:	4bca      	ldr	r3, [pc, #808]	; (10011708 <__ieee754_pow+0x9e4>)
100113e0:	f004 fd62 	bl	10015ea8 <__aeabi_dmul>
100113e4:	4ac9      	ldr	r2, [pc, #804]	; (1001170c <__ieee754_pow+0x9e8>)
100113e6:	0004      	movs	r4, r0
100113e8:	000d      	movs	r5, r1
100113ea:	4bc9      	ldr	r3, [pc, #804]	; (10011710 <__ieee754_pow+0x9ec>)
100113ec:	0030      	movs	r0, r6
100113ee:	0039      	movs	r1, r7
100113f0:	f004 fd5a 	bl	10015ea8 <__aeabi_dmul>
100113f4:	0002      	movs	r2, r0
100113f6:	000b      	movs	r3, r1
100113f8:	0020      	movs	r0, r4
100113fa:	0029      	movs	r1, r5
100113fc:	f003 fe04 	bl	10015008 <__aeabi_dadd>
10011400:	0004      	movs	r4, r0
10011402:	000d      	movs	r5, r1
10011404:	0002      	movs	r2, r0
10011406:	000b      	movs	r3, r1
10011408:	9802      	ldr	r0, [sp, #8]
1001140a:	9903      	ldr	r1, [sp, #12]
1001140c:	f003 fdfc 	bl	10015008 <__aeabi_dadd>
10011410:	9a02      	ldr	r2, [sp, #8]
10011412:	9b03      	ldr	r3, [sp, #12]
10011414:	0006      	movs	r6, r0
10011416:	000f      	movs	r7, r1
10011418:	f004 ffc0 	bl	1001639c <__aeabi_dsub>
1001141c:	0002      	movs	r2, r0
1001141e:	000b      	movs	r3, r1
10011420:	0020      	movs	r0, r4
10011422:	0029      	movs	r1, r5
10011424:	f004 ffba 	bl	1001639c <__aeabi_dsub>
10011428:	0032      	movs	r2, r6
1001142a:	9000      	str	r0, [sp, #0]
1001142c:	9101      	str	r1, [sp, #4]
1001142e:	003b      	movs	r3, r7
10011430:	0030      	movs	r0, r6
10011432:	0039      	movs	r1, r7
10011434:	f004 fd38 	bl	10015ea8 <__aeabi_dmul>
10011438:	0004      	movs	r4, r0
1001143a:	000d      	movs	r5, r1
1001143c:	4ab5      	ldr	r2, [pc, #724]	; (10011714 <__ieee754_pow+0x9f0>)
1001143e:	4bb6      	ldr	r3, [pc, #728]	; (10011718 <__ieee754_pow+0x9f4>)
10011440:	f004 fd32 	bl	10015ea8 <__aeabi_dmul>
10011444:	4ab5      	ldr	r2, [pc, #724]	; (1001171c <__ieee754_pow+0x9f8>)
10011446:	4bb6      	ldr	r3, [pc, #728]	; (10011720 <__ieee754_pow+0x9fc>)
10011448:	f004 ffa8 	bl	1001639c <__aeabi_dsub>
1001144c:	0022      	movs	r2, r4
1001144e:	002b      	movs	r3, r5
10011450:	f004 fd2a 	bl	10015ea8 <__aeabi_dmul>
10011454:	4ab3      	ldr	r2, [pc, #716]	; (10011724 <__ieee754_pow+0xa00>)
10011456:	4bb4      	ldr	r3, [pc, #720]	; (10011728 <__ieee754_pow+0xa04>)
10011458:	f003 fdd6 	bl	10015008 <__aeabi_dadd>
1001145c:	0022      	movs	r2, r4
1001145e:	002b      	movs	r3, r5
10011460:	f004 fd22 	bl	10015ea8 <__aeabi_dmul>
10011464:	4ab1      	ldr	r2, [pc, #708]	; (1001172c <__ieee754_pow+0xa08>)
10011466:	4bb2      	ldr	r3, [pc, #712]	; (10011730 <__ieee754_pow+0xa0c>)
10011468:	f004 ff98 	bl	1001639c <__aeabi_dsub>
1001146c:	0022      	movs	r2, r4
1001146e:	002b      	movs	r3, r5
10011470:	f004 fd1a 	bl	10015ea8 <__aeabi_dmul>
10011474:	4aaf      	ldr	r2, [pc, #700]	; (10011734 <__ieee754_pow+0xa10>)
10011476:	4bb0      	ldr	r3, [pc, #704]	; (10011738 <__ieee754_pow+0xa14>)
10011478:	f003 fdc6 	bl	10015008 <__aeabi_dadd>
1001147c:	0022      	movs	r2, r4
1001147e:	002b      	movs	r3, r5
10011480:	f004 fd12 	bl	10015ea8 <__aeabi_dmul>
10011484:	0002      	movs	r2, r0
10011486:	000b      	movs	r3, r1
10011488:	0030      	movs	r0, r6
1001148a:	0039      	movs	r1, r7
1001148c:	f004 ff86 	bl	1001639c <__aeabi_dsub>
10011490:	0004      	movs	r4, r0
10011492:	000d      	movs	r5, r1
10011494:	0002      	movs	r2, r0
10011496:	000b      	movs	r3, r1
10011498:	0030      	movs	r0, r6
1001149a:	0039      	movs	r1, r7
1001149c:	f004 fd04 	bl	10015ea8 <__aeabi_dmul>
100114a0:	2380      	movs	r3, #128	; 0x80
100114a2:	9002      	str	r0, [sp, #8]
100114a4:	9103      	str	r1, [sp, #12]
100114a6:	2200      	movs	r2, #0
100114a8:	05db      	lsls	r3, r3, #23
100114aa:	0020      	movs	r0, r4
100114ac:	0029      	movs	r1, r5
100114ae:	f004 ff75 	bl	1001639c <__aeabi_dsub>
100114b2:	0002      	movs	r2, r0
100114b4:	000b      	movs	r3, r1
100114b6:	9802      	ldr	r0, [sp, #8]
100114b8:	9903      	ldr	r1, [sp, #12]
100114ba:	f004 f8d1 	bl	10015660 <__aeabi_ddiv>
100114be:	9a00      	ldr	r2, [sp, #0]
100114c0:	9b01      	ldr	r3, [sp, #4]
100114c2:	0004      	movs	r4, r0
100114c4:	000d      	movs	r5, r1
100114c6:	0030      	movs	r0, r6
100114c8:	0039      	movs	r1, r7
100114ca:	f004 fced 	bl	10015ea8 <__aeabi_dmul>
100114ce:	9a00      	ldr	r2, [sp, #0]
100114d0:	9b01      	ldr	r3, [sp, #4]
100114d2:	f003 fd99 	bl	10015008 <__aeabi_dadd>
100114d6:	0002      	movs	r2, r0
100114d8:	000b      	movs	r3, r1
100114da:	0020      	movs	r0, r4
100114dc:	0029      	movs	r1, r5
100114de:	f004 ff5d 	bl	1001639c <__aeabi_dsub>
100114e2:	0032      	movs	r2, r6
100114e4:	003b      	movs	r3, r7
100114e6:	f004 ff59 	bl	1001639c <__aeabi_dsub>
100114ea:	0002      	movs	r2, r0
100114ec:	000b      	movs	r3, r1
100114ee:	2000      	movs	r0, #0
100114f0:	4992      	ldr	r1, [pc, #584]	; (1001173c <__ieee754_pow+0xa18>)
100114f2:	f004 ff53 	bl	1001639c <__aeabi_dsub>
100114f6:	464b      	mov	r3, r9
100114f8:	185b      	adds	r3, r3, r1
100114fa:	151a      	asrs	r2, r3, #20
100114fc:	2a00      	cmp	r2, #0
100114fe:	dc00      	bgt.n	10011502 <__ieee754_pow+0x7de>
10011500:	e0f4      	b.n	100116ec <__ieee754_pow+0x9c8>
10011502:	0019      	movs	r1, r3
10011504:	9a06      	ldr	r2, [sp, #24]
10011506:	9b07      	ldr	r3, [sp, #28]
10011508:	f004 fcce 	bl	10015ea8 <__aeabi_dmul>
1001150c:	0006      	movs	r6, r0
1001150e:	e452      	b.n	10010db6 <__ieee754_pow+0x92>
10011510:	0032      	movs	r2, r6
10011512:	0030      	movs	r0, r6
10011514:	002b      	movs	r3, r5
10011516:	0029      	movs	r1, r5
10011518:	f004 fcc6 	bl	10015ea8 <__aeabi_dmul>
1001151c:	0006      	movs	r6, r0
1001151e:	e44a      	b.n	10010db6 <__ieee754_pow+0x92>
10011520:	4b87      	ldr	r3, [pc, #540]	; (10011740 <__ieee754_pow+0xa1c>)
10011522:	004e      	lsls	r6, r1, #1
10011524:	0876      	lsrs	r6, r6, #1
10011526:	429e      	cmp	r6, r3
10011528:	dc00      	bgt.n	1001152c <__ieee754_pow+0x808>
1001152a:	e0bf      	b.n	100116ac <__ieee754_pow+0x988>
1001152c:	4b85      	ldr	r3, [pc, #532]	; (10011744 <__ieee754_pow+0xa20>)
1001152e:	18cb      	adds	r3, r1, r3
10011530:	4303      	orrs	r3, r0
10011532:	d10c      	bne.n	1001154e <__ieee754_pow+0x82a>
10011534:	9a00      	ldr	r2, [sp, #0]
10011536:	9b01      	ldr	r3, [sp, #4]
10011538:	f004 ff30 	bl	1001639c <__aeabi_dsub>
1001153c:	0002      	movs	r2, r0
1001153e:	000b      	movs	r3, r1
10011540:	9804      	ldr	r0, [sp, #16]
10011542:	9905      	ldr	r1, [sp, #20]
10011544:	f003 fa44 	bl	100149d0 <__aeabi_dcmple>
10011548:	2800      	cmp	r0, #0
1001154a:	d100      	bne.n	1001154e <__ieee754_pow+0x82a>
1001154c:	e701      	b.n	10011352 <__ieee754_pow+0x62e>
1001154e:	9806      	ldr	r0, [sp, #24]
10011550:	9907      	ldr	r1, [sp, #28]
10011552:	4a7d      	ldr	r2, [pc, #500]	; (10011748 <__ieee754_pow+0xa24>)
10011554:	4b7d      	ldr	r3, [pc, #500]	; (1001174c <__ieee754_pow+0xa28>)
10011556:	f004 fca7 	bl	10015ea8 <__aeabi_dmul>
1001155a:	4a7b      	ldr	r2, [pc, #492]	; (10011748 <__ieee754_pow+0xa24>)
1001155c:	4b7b      	ldr	r3, [pc, #492]	; (1001174c <__ieee754_pow+0xa28>)
1001155e:	f004 fca3 	bl	10015ea8 <__aeabi_dmul>
10011562:	0006      	movs	r6, r0
10011564:	f7ff fc27 	bl	10010db6 <__ieee754_pow+0x92>
10011568:	2300      	movs	r3, #0
1001156a:	4c79      	ldr	r4, [pc, #484]	; (10011750 <__ieee754_pow+0xa2c>)
1001156c:	9306      	str	r3, [sp, #24]
1001156e:	9407      	str	r4, [sp, #28]
10011570:	e666      	b.n	10011240 <__ieee754_pow+0x51c>
10011572:	4653      	mov	r3, sl
10011574:	2b00      	cmp	r3, #0
10011576:	db00      	blt.n	1001157a <__ieee754_pow+0x856>
10011578:	e4c3      	b.n	10010f02 <__ieee754_pow+0x1de>
1001157a:	9b00      	ldr	r3, [sp, #0]
1001157c:	9c01      	ldr	r4, [sp, #4]
1001157e:	2280      	movs	r2, #128	; 0x80
10011580:	0612      	lsls	r2, r2, #24
10011582:	001e      	movs	r6, r3
10011584:	4694      	mov	ip, r2
10011586:	0023      	movs	r3, r4
10011588:	4463      	add	r3, ip
1001158a:	0019      	movs	r1, r3
1001158c:	f7ff fc13 	bl	10010db6 <__ieee754_pow+0x92>
10011590:	0002      	movs	r2, r0
10011592:	000b      	movs	r3, r1
10011594:	2000      	movs	r0, #0
10011596:	4969      	ldr	r1, [pc, #420]	; (1001173c <__ieee754_pow+0xa18>)
10011598:	f004 f862 	bl	10015660 <__aeabi_ddiv>
1001159c:	e44a      	b.n	10010e34 <__ieee754_pow+0x110>
1001159e:	4b6d      	ldr	r3, [pc, #436]	; (10011754 <__ieee754_pow+0xa30>)
100115a0:	429c      	cmp	r4, r3
100115a2:	dc00      	bgt.n	100115a6 <__ieee754_pow+0x882>
100115a4:	e4aa      	b.n	10010efc <__ieee754_pow+0x1d8>
100115a6:	4b65      	ldr	r3, [pc, #404]	; (1001173c <__ieee754_pow+0xa18>)
100115a8:	429c      	cmp	r4, r3
100115aa:	dd01      	ble.n	100115b0 <__ieee754_pow+0x88c>
100115ac:	f7ff fc2c 	bl	10010e08 <__ieee754_pow+0xe4>
100115b0:	2200      	movs	r2, #0
100115b2:	4b62      	ldr	r3, [pc, #392]	; (1001173c <__ieee754_pow+0xa18>)
100115b4:	f004 fef2 	bl	1001639c <__aeabi_dsub>
100115b8:	22c0      	movs	r2, #192	; 0xc0
100115ba:	4b67      	ldr	r3, [pc, #412]	; (10011758 <__ieee754_pow+0xa34>)
100115bc:	05d2      	lsls	r2, r2, #23
100115be:	0004      	movs	r4, r0
100115c0:	000d      	movs	r5, r1
100115c2:	f004 fc71 	bl	10015ea8 <__aeabi_dmul>
100115c6:	4a65      	ldr	r2, [pc, #404]	; (1001175c <__ieee754_pow+0xa38>)
100115c8:	0006      	movs	r6, r0
100115ca:	000f      	movs	r7, r1
100115cc:	4b64      	ldr	r3, [pc, #400]	; (10011760 <__ieee754_pow+0xa3c>)
100115ce:	0020      	movs	r0, r4
100115d0:	0029      	movs	r1, r5
100115d2:	f004 fc69 	bl	10015ea8 <__aeabi_dmul>
100115d6:	2200      	movs	r2, #0
100115d8:	9002      	str	r0, [sp, #8]
100115da:	9103      	str	r1, [sp, #12]
100115dc:	4b61      	ldr	r3, [pc, #388]	; (10011764 <__ieee754_pow+0xa40>)
100115de:	0020      	movs	r0, r4
100115e0:	0029      	movs	r1, r5
100115e2:	f004 fc61 	bl	10015ea8 <__aeabi_dmul>
100115e6:	0002      	movs	r2, r0
100115e8:	000b      	movs	r3, r1
100115ea:	485f      	ldr	r0, [pc, #380]	; (10011768 <__ieee754_pow+0xa44>)
100115ec:	495f      	ldr	r1, [pc, #380]	; (1001176c <__ieee754_pow+0xa48>)
100115ee:	f004 fed5 	bl	1001639c <__aeabi_dsub>
100115f2:	0022      	movs	r2, r4
100115f4:	002b      	movs	r3, r5
100115f6:	f004 fc57 	bl	10015ea8 <__aeabi_dmul>
100115fa:	0002      	movs	r2, r0
100115fc:	000b      	movs	r3, r1
100115fe:	2000      	movs	r0, #0
10011600:	495b      	ldr	r1, [pc, #364]	; (10011770 <__ieee754_pow+0xa4c>)
10011602:	f004 fecb 	bl	1001639c <__aeabi_dsub>
10011606:	0022      	movs	r2, r4
10011608:	9004      	str	r0, [sp, #16]
1001160a:	9105      	str	r1, [sp, #20]
1001160c:	002b      	movs	r3, r5
1001160e:	0020      	movs	r0, r4
10011610:	0029      	movs	r1, r5
10011612:	f004 fc49 	bl	10015ea8 <__aeabi_dmul>
10011616:	0002      	movs	r2, r0
10011618:	000b      	movs	r3, r1
1001161a:	9804      	ldr	r0, [sp, #16]
1001161c:	9905      	ldr	r1, [sp, #20]
1001161e:	f004 fc43 	bl	10015ea8 <__aeabi_dmul>
10011622:	4a54      	ldr	r2, [pc, #336]	; (10011774 <__ieee754_pow+0xa50>)
10011624:	4b4c      	ldr	r3, [pc, #304]	; (10011758 <__ieee754_pow+0xa34>)
10011626:	f004 fc3f 	bl	10015ea8 <__aeabi_dmul>
1001162a:	0002      	movs	r2, r0
1001162c:	000b      	movs	r3, r1
1001162e:	9802      	ldr	r0, [sp, #8]
10011630:	9903      	ldr	r1, [sp, #12]
10011632:	f004 feb3 	bl	1001639c <__aeabi_dsub>
10011636:	0002      	movs	r2, r0
10011638:	000b      	movs	r3, r1
1001163a:	0004      	movs	r4, r0
1001163c:	000d      	movs	r5, r1
1001163e:	0030      	movs	r0, r6
10011640:	0039      	movs	r1, r7
10011642:	f003 fce1 	bl	10015008 <__aeabi_dadd>
10011646:	2200      	movs	r2, #0
10011648:	0010      	movs	r0, r2
1001164a:	003b      	movs	r3, r7
1001164c:	0032      	movs	r2, r6
1001164e:	9002      	str	r0, [sp, #8]
10011650:	9103      	str	r1, [sp, #12]
10011652:	f004 fea3 	bl	1001639c <__aeabi_dsub>
10011656:	0002      	movs	r2, r0
10011658:	000b      	movs	r3, r1
1001165a:	0020      	movs	r0, r4
1001165c:	0029      	movs	r1, r5
1001165e:	f004 fe9d 	bl	1001639c <__aeabi_dsub>
10011662:	9004      	str	r0, [sp, #16]
10011664:	9105      	str	r1, [sp, #20]
10011666:	e5e1      	b.n	1001122c <__ieee754_pow+0x508>
10011668:	4a43      	ldr	r2, [pc, #268]	; (10011778 <__ieee754_pow+0xa54>)
1001166a:	4b44      	ldr	r3, [pc, #272]	; (1001177c <__ieee754_pow+0xa58>)
1001166c:	9806      	ldr	r0, [sp, #24]
1001166e:	9907      	ldr	r1, [sp, #28]
10011670:	f004 fc1a 	bl	10015ea8 <__aeabi_dmul>
10011674:	4a40      	ldr	r2, [pc, #256]	; (10011778 <__ieee754_pow+0xa54>)
10011676:	4b41      	ldr	r3, [pc, #260]	; (1001177c <__ieee754_pow+0xa58>)
10011678:	f004 fc16 	bl	10015ea8 <__aeabi_dmul>
1001167c:	0006      	movs	r6, r0
1001167e:	f7ff fb9a 	bl	10010db6 <__ieee754_pow+0x92>
10011682:	2a00      	cmp	r2, #0
10011684:	d001      	beq.n	1001168a <__ieee754_pow+0x966>
10011686:	f7ff fba5 	bl	10010dd4 <__ieee754_pow+0xb0>
1001168a:	3214      	adds	r2, #20
1001168c:	1ad3      	subs	r3, r2, r3
1001168e:	003a      	movs	r2, r7
10011690:	411a      	asrs	r2, r3
10011692:	0011      	movs	r1, r2
10011694:	4099      	lsls	r1, r3
10011696:	428f      	cmp	r7, r1
10011698:	d001      	beq.n	1001169e <__ieee754_pow+0x97a>
1001169a:	f7ff fb6f 	bl	10010d7c <__ieee754_pow+0x58>
1001169e:	2301      	movs	r3, #1
100116a0:	4013      	ands	r3, r2
100116a2:	2202      	movs	r2, #2
100116a4:	1ad3      	subs	r3, r2, r3
100116a6:	469b      	mov	fp, r3
100116a8:	f7ff fb68 	bl	10010d7c <__ieee754_pow+0x58>
100116ac:	4b30      	ldr	r3, [pc, #192]	; (10011770 <__ieee754_pow+0xa4c>)
100116ae:	429e      	cmp	r6, r3
100116b0:	dd00      	ble.n	100116b4 <__ieee754_pow+0x990>
100116b2:	e64e      	b.n	10011352 <__ieee754_pow+0x62e>
100116b4:	2300      	movs	r3, #0
100116b6:	4699      	mov	r9, r3
100116b8:	4698      	mov	r8, r3
100116ba:	e67a      	b.n	100113b2 <__ieee754_pow+0x68e>
100116bc:	0002      	movs	r2, r0
100116be:	000b      	movs	r3, r1
100116c0:	f7ff fc14 	bl	10010eec <__ieee754_pow+0x1c8>
100116c4:	2380      	movs	r3, #128	; 0x80
100116c6:	4c2e      	ldr	r4, [pc, #184]	; (10011780 <__ieee754_pow+0xa5c>)
100116c8:	05db      	lsls	r3, r3, #23
100116ca:	9308      	str	r3, [sp, #32]
100116cc:	9409      	str	r4, [sp, #36]	; 0x24
100116ce:	4b2d      	ldr	r3, [pc, #180]	; (10011784 <__ieee754_pow+0xa60>)
100116d0:	4c2d      	ldr	r4, [pc, #180]	; (10011788 <__ieee754_pow+0xa64>)
100116d2:	2200      	movs	r2, #0
100116d4:	930c      	str	r3, [sp, #48]	; 0x30
100116d6:	940d      	str	r4, [sp, #52]	; 0x34
100116d8:	2480      	movs	r4, #128	; 0x80
100116da:	4b2c      	ldr	r3, [pc, #176]	; (1001178c <__ieee754_pow+0xa68>)
100116dc:	02e4      	lsls	r4, r4, #11
100116de:	9206      	str	r2, [sp, #24]
100116e0:	9307      	str	r3, [sp, #28]
100116e2:	e456      	b.n	10010f92 <__ieee754_pow+0x26e>
100116e4:	4643      	mov	r3, r8
100116e6:	425b      	negs	r3, r3
100116e8:	4698      	mov	r8, r3
100116ea:	e651      	b.n	10011390 <__ieee754_pow+0x66c>
100116ec:	4642      	mov	r2, r8
100116ee:	f000 f9fd 	bl	10011aec <scalbn>
100116f2:	e707      	b.n	10011504 <__ieee754_pow+0x7e0>
100116f4:	fffffc02 	.word	0xfffffc02
100116f8:	fffffc01 	.word	0xfffffc01
100116fc:	000fffff 	.word	0x000fffff
10011700:	3fe62e43 	.word	0x3fe62e43
10011704:	fefa39ef 	.word	0xfefa39ef
10011708:	3fe62e42 	.word	0x3fe62e42
1001170c:	0ca86c39 	.word	0x0ca86c39
10011710:	be205c61 	.word	0xbe205c61
10011714:	72bea4d0 	.word	0x72bea4d0
10011718:	3e663769 	.word	0x3e663769
1001171c:	c5d26bf1 	.word	0xc5d26bf1
10011720:	3ebbbd41 	.word	0x3ebbbd41
10011724:	af25de2c 	.word	0xaf25de2c
10011728:	3f11566a 	.word	0x3f11566a
1001172c:	16bebd93 	.word	0x16bebd93
10011730:	3f66c16c 	.word	0x3f66c16c
10011734:	5555553e 	.word	0x5555553e
10011738:	3fc55555 	.word	0x3fc55555
1001173c:	3ff00000 	.word	0x3ff00000
10011740:	4090cbff 	.word	0x4090cbff
10011744:	3f6f3400 	.word	0x3f6f3400
10011748:	c2f8f359 	.word	0xc2f8f359
1001174c:	01a56e1f 	.word	0x01a56e1f
10011750:	bff00000 	.word	0xbff00000
10011754:	3feffffe 	.word	0x3feffffe
10011758:	3ff71547 	.word	0x3ff71547
1001175c:	f85ddf44 	.word	0xf85ddf44
10011760:	3e54ae0b 	.word	0x3e54ae0b
10011764:	3fd00000 	.word	0x3fd00000
10011768:	55555555 	.word	0x55555555
1001176c:	3fd55555 	.word	0x3fd55555
10011770:	3fe00000 	.word	0x3fe00000
10011774:	652b82fe 	.word	0x652b82fe
10011778:	8800759c 	.word	0x8800759c
1001177c:	7e37e43c 	.word	0x7e37e43c
10011780:	3fe2b803 	.word	0x3fe2b803
10011784:	43cfd006 	.word	0x43cfd006
10011788:	3e4cfdeb 	.word	0x3e4cfdeb
1001178c:	3ff80000 	.word	0x3ff80000

10011790 <__ieee754_sqrt>:
10011790:	b5f0      	push	{r4, r5, r6, r7, lr}
10011792:	4656      	mov	r6, sl
10011794:	464d      	mov	r5, r9
10011796:	4644      	mov	r4, r8
10011798:	465f      	mov	r7, fp
1001179a:	4b75      	ldr	r3, [pc, #468]	; (10011970 <__ieee754_sqrt+0x1e0>)
1001179c:	b4f0      	push	{r4, r5, r6, r7}
1001179e:	000a      	movs	r2, r1
100117a0:	000d      	movs	r5, r1
100117a2:	0019      	movs	r1, r3
100117a4:	b083      	sub	sp, #12
100117a6:	0006      	movs	r6, r0
100117a8:	0004      	movs	r4, r0
100117aa:	4029      	ands	r1, r5
100117ac:	4299      	cmp	r1, r3
100117ae:	d100      	bne.n	100117b2 <__ieee754_sqrt+0x22>
100117b0:	e0ba      	b.n	10011928 <__ieee754_sqrt+0x198>
100117b2:	2d00      	cmp	r5, #0
100117b4:	dc00      	bgt.n	100117b8 <__ieee754_sqrt+0x28>
100117b6:	e094      	b.n	100118e2 <__ieee754_sqrt+0x152>
100117b8:	152d      	asrs	r5, r5, #20
100117ba:	d100      	bne.n	100117be <__ieee754_sqrt+0x2e>
100117bc:	e0a3      	b.n	10011906 <__ieee754_sqrt+0x176>
100117be:	4b6d      	ldr	r3, [pc, #436]	; (10011974 <__ieee754_sqrt+0x1e4>)
100117c0:	0312      	lsls	r2, r2, #12
100117c2:	469c      	mov	ip, r3
100117c4:	2380      	movs	r3, #128	; 0x80
100117c6:	0b12      	lsrs	r2, r2, #12
100117c8:	035b      	lsls	r3, r3, #13
100117ca:	4465      	add	r5, ip
100117cc:	431a      	orrs	r2, r3
100117ce:	07eb      	lsls	r3, r5, #31
100117d0:	d500      	bpl.n	100117d4 <__ieee754_sqrt+0x44>
100117d2:	e081      	b.n	100118d8 <__ieee754_sqrt+0x148>
100117d4:	106b      	asrs	r3, r5, #1
100117d6:	4698      	mov	r8, r3
100117d8:	0fe3      	lsrs	r3, r4, #31
100117da:	189b      	adds	r3, r3, r2
100117dc:	189b      	adds	r3, r3, r2
100117de:	2280      	movs	r2, #128	; 0x80
100117e0:	2116      	movs	r1, #22
100117e2:	2600      	movs	r6, #0
100117e4:	2700      	movs	r7, #0
100117e6:	0064      	lsls	r4, r4, #1
100117e8:	0392      	lsls	r2, r2, #14
100117ea:	18b8      	adds	r0, r7, r2
100117ec:	4298      	cmp	r0, r3
100117ee:	dc02      	bgt.n	100117f6 <__ieee754_sqrt+0x66>
100117f0:	1887      	adds	r7, r0, r2
100117f2:	1a1b      	subs	r3, r3, r0
100117f4:	18b6      	adds	r6, r6, r2
100117f6:	0fe0      	lsrs	r0, r4, #31
100117f8:	005b      	lsls	r3, r3, #1
100117fa:	3901      	subs	r1, #1
100117fc:	181b      	adds	r3, r3, r0
100117fe:	0064      	lsls	r4, r4, #1
10011800:	0852      	lsrs	r2, r2, #1
10011802:	2900      	cmp	r1, #0
10011804:	d1f1      	bne.n	100117ea <__ieee754_sqrt+0x5a>
10011806:	2200      	movs	r2, #0
10011808:	9201      	str	r2, [sp, #4]
1001180a:	4694      	mov	ip, r2
1001180c:	2280      	movs	r2, #128	; 0x80
1001180e:	0612      	lsls	r2, r2, #24
10011810:	2020      	movs	r0, #32
10011812:	4691      	mov	r9, r2
10011814:	e009      	b.n	1001182a <__ieee754_sqrt+0x9a>
10011816:	429f      	cmp	r7, r3
10011818:	d041      	beq.n	1001189e <__ieee754_sqrt+0x10e>
1001181a:	0fe1      	lsrs	r1, r4, #31
1001181c:	18c9      	adds	r1, r1, r3
1001181e:	3801      	subs	r0, #1
10011820:	18cb      	adds	r3, r1, r3
10011822:	0064      	lsls	r4, r4, #1
10011824:	0852      	lsrs	r2, r2, #1
10011826:	2800      	cmp	r0, #0
10011828:	d01e      	beq.n	10011868 <__ieee754_sqrt+0xd8>
1001182a:	4661      	mov	r1, ip
1001182c:	1851      	adds	r1, r2, r1
1001182e:	429f      	cmp	r7, r3
10011830:	daf1      	bge.n	10011816 <__ieee754_sqrt+0x86>
10011832:	188d      	adds	r5, r1, r2
10011834:	46ac      	mov	ip, r5
10011836:	0fcd      	lsrs	r5, r1, #31
10011838:	07ed      	lsls	r5, r5, #31
1001183a:	46ba      	mov	sl, r7
1001183c:	454d      	cmp	r5, r9
1001183e:	d039      	beq.n	100118b4 <__ieee754_sqrt+0x124>
10011840:	1bdb      	subs	r3, r3, r7
10011842:	428c      	cmp	r4, r1
10011844:	41bf      	sbcs	r7, r7
10011846:	427f      	negs	r7, r7
10011848:	1bdb      	subs	r3, r3, r7
1001184a:	1a64      	subs	r4, r4, r1
1001184c:	9901      	ldr	r1, [sp, #4]
1001184e:	3801      	subs	r0, #1
10011850:	468b      	mov	fp, r1
10011852:	4493      	add	fp, r2
10011854:	4659      	mov	r1, fp
10011856:	9101      	str	r1, [sp, #4]
10011858:	0fe1      	lsrs	r1, r4, #31
1001185a:	18c9      	adds	r1, r1, r3
1001185c:	4657      	mov	r7, sl
1001185e:	18cb      	adds	r3, r1, r3
10011860:	0064      	lsls	r4, r4, #1
10011862:	0852      	lsrs	r2, r2, #1
10011864:	2800      	cmp	r0, #0
10011866:	d1e0      	bne.n	1001182a <__ieee754_sqrt+0x9a>
10011868:	4323      	orrs	r3, r4
1001186a:	d12b      	bne.n	100118c4 <__ieee754_sqrt+0x134>
1001186c:	9b01      	ldr	r3, [sp, #4]
1001186e:	085b      	lsrs	r3, r3, #1
10011870:	4941      	ldr	r1, [pc, #260]	; (10011978 <__ieee754_sqrt+0x1e8>)
10011872:	1072      	asrs	r2, r6, #1
10011874:	468c      	mov	ip, r1
10011876:	4462      	add	r2, ip
10011878:	07f1      	lsls	r1, r6, #31
1001187a:	d502      	bpl.n	10011882 <__ieee754_sqrt+0xf2>
1001187c:	2180      	movs	r1, #128	; 0x80
1001187e:	0609      	lsls	r1, r1, #24
10011880:	430b      	orrs	r3, r1
10011882:	4641      	mov	r1, r8
10011884:	0509      	lsls	r1, r1, #20
10011886:	188d      	adds	r5, r1, r2
10011888:	001e      	movs	r6, r3
1001188a:	002f      	movs	r7, r5
1001188c:	0030      	movs	r0, r6
1001188e:	0039      	movs	r1, r7
10011890:	b003      	add	sp, #12
10011892:	bc3c      	pop	{r2, r3, r4, r5}
10011894:	4690      	mov	r8, r2
10011896:	4699      	mov	r9, r3
10011898:	46a2      	mov	sl, r4
1001189a:	46ab      	mov	fp, r5
1001189c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001189e:	42a1      	cmp	r1, r4
100118a0:	d80e      	bhi.n	100118c0 <__ieee754_sqrt+0x130>
100118a2:	188d      	adds	r5, r1, r2
100118a4:	46ac      	mov	ip, r5
100118a6:	0fcd      	lsrs	r5, r1, #31
100118a8:	07ed      	lsls	r5, r5, #31
100118aa:	454d      	cmp	r5, r9
100118ac:	d048      	beq.n	10011940 <__ieee754_sqrt+0x1b0>
100118ae:	469a      	mov	sl, r3
100118b0:	2300      	movs	r3, #0
100118b2:	e7ca      	b.n	1001184a <__ieee754_sqrt+0xba>
100118b4:	4665      	mov	r5, ip
100118b6:	2d00      	cmp	r5, #0
100118b8:	dbc2      	blt.n	10011840 <__ieee754_sqrt+0xb0>
100118ba:	1c7d      	adds	r5, r7, #1
100118bc:	46aa      	mov	sl, r5
100118be:	e7bf      	b.n	10011840 <__ieee754_sqrt+0xb0>
100118c0:	003b      	movs	r3, r7
100118c2:	e7aa      	b.n	1001181a <__ieee754_sqrt+0x8a>
100118c4:	9b01      	ldr	r3, [sp, #4]
100118c6:	3301      	adds	r3, #1
100118c8:	d03e      	beq.n	10011948 <__ieee754_sqrt+0x1b8>
100118ca:	9a01      	ldr	r2, [sp, #4]
100118cc:	2301      	movs	r3, #1
100118ce:	4694      	mov	ip, r2
100118d0:	4013      	ands	r3, r2
100118d2:	4463      	add	r3, ip
100118d4:	085b      	lsrs	r3, r3, #1
100118d6:	e7cb      	b.n	10011870 <__ieee754_sqrt+0xe0>
100118d8:	0fe3      	lsrs	r3, r4, #31
100118da:	0052      	lsls	r2, r2, #1
100118dc:	189a      	adds	r2, r3, r2
100118de:	0064      	lsls	r4, r4, #1
100118e0:	e778      	b.n	100117d4 <__ieee754_sqrt+0x44>
100118e2:	006b      	lsls	r3, r5, #1
100118e4:	085b      	lsrs	r3, r3, #1
100118e6:	4303      	orrs	r3, r0
100118e8:	002f      	movs	r7, r5
100118ea:	2b00      	cmp	r3, #0
100118ec:	d0ce      	beq.n	1001188c <__ieee754_sqrt+0xfc>
100118ee:	2500      	movs	r5, #0
100118f0:	2a00      	cmp	r2, #0
100118f2:	d131      	bne.n	10011958 <__ieee754_sqrt+0x1c8>
100118f4:	0ae2      	lsrs	r2, r4, #11
100118f6:	3d15      	subs	r5, #21
100118f8:	0564      	lsls	r4, r4, #21
100118fa:	2a00      	cmp	r2, #0
100118fc:	d0fa      	beq.n	100118f4 <__ieee754_sqrt+0x164>
100118fe:	2380      	movs	r3, #128	; 0x80
10011900:	035b      	lsls	r3, r3, #13
10011902:	421a      	tst	r2, r3
10011904:	d123      	bne.n	1001194e <__ieee754_sqrt+0x1be>
10011906:	2080      	movs	r0, #128	; 0x80
10011908:	2300      	movs	r3, #0
1001190a:	0340      	lsls	r0, r0, #13
1001190c:	e000      	b.n	10011910 <__ieee754_sqrt+0x180>
1001190e:	000b      	movs	r3, r1
10011910:	0052      	lsls	r2, r2, #1
10011912:	1c59      	adds	r1, r3, #1
10011914:	4202      	tst	r2, r0
10011916:	d0fa      	beq.n	1001190e <__ieee754_sqrt+0x17e>
10011918:	2020      	movs	r0, #32
1001191a:	1a40      	subs	r0, r0, r1
1001191c:	1aed      	subs	r5, r5, r3
1001191e:	0023      	movs	r3, r4
10011920:	40c3      	lsrs	r3, r0
10011922:	408c      	lsls	r4, r1
10011924:	431a      	orrs	r2, r3
10011926:	e74a      	b.n	100117be <__ieee754_sqrt+0x2e>
10011928:	0002      	movs	r2, r0
1001192a:	002b      	movs	r3, r5
1001192c:	0029      	movs	r1, r5
1001192e:	f004 fabb 	bl	10015ea8 <__aeabi_dmul>
10011932:	0032      	movs	r2, r6
10011934:	002b      	movs	r3, r5
10011936:	f003 fb67 	bl	10015008 <__aeabi_dadd>
1001193a:	0006      	movs	r6, r0
1001193c:	000f      	movs	r7, r1
1001193e:	e7a5      	b.n	1001188c <__ieee754_sqrt+0xfc>
10011940:	4665      	mov	r5, ip
10011942:	2d00      	cmp	r5, #0
10011944:	dab9      	bge.n	100118ba <__ieee754_sqrt+0x12a>
10011946:	e7b2      	b.n	100118ae <__ieee754_sqrt+0x11e>
10011948:	3601      	adds	r6, #1
1001194a:	2300      	movs	r3, #0
1001194c:	e790      	b.n	10011870 <__ieee754_sqrt+0xe0>
1001194e:	2301      	movs	r3, #1
10011950:	2020      	movs	r0, #32
10011952:	425b      	negs	r3, r3
10011954:	2100      	movs	r1, #0
10011956:	e7e1      	b.n	1001191c <__ieee754_sqrt+0x18c>
10011958:	003b      	movs	r3, r7
1001195a:	0002      	movs	r2, r0
1001195c:	0039      	movs	r1, r7
1001195e:	f004 fd1d 	bl	1001639c <__aeabi_dsub>
10011962:	0002      	movs	r2, r0
10011964:	000b      	movs	r3, r1
10011966:	f003 fe7b 	bl	10015660 <__aeabi_ddiv>
1001196a:	0006      	movs	r6, r0
1001196c:	000f      	movs	r7, r1
1001196e:	e78d      	b.n	1001188c <__ieee754_sqrt+0xfc>
10011970:	7ff00000 	.word	0x7ff00000
10011974:	fffffc01 	.word	0xfffffc01
10011978:	3fe00000 	.word	0x3fe00000

1001197c <fabs>:
1001197c:	0049      	lsls	r1, r1, #1
1001197e:	084b      	lsrs	r3, r1, #1
10011980:	0019      	movs	r1, r3
10011982:	4770      	bx	lr

10011984 <finite>:
10011984:	4b03      	ldr	r3, [pc, #12]	; (10011994 <finite+0x10>)
10011986:	0048      	lsls	r0, r1, #1
10011988:	469c      	mov	ip, r3
1001198a:	0840      	lsrs	r0, r0, #1
1001198c:	4460      	add	r0, ip
1001198e:	0fc0      	lsrs	r0, r0, #31
10011990:	4770      	bx	lr
10011992:	46c0      	nop			; (mov r8, r8)
10011994:	80100000 	.word	0x80100000

10011998 <matherr>:
10011998:	2000      	movs	r0, #0
1001199a:	4770      	bx	lr

1001199c <nan>:
1001199c:	2000      	movs	r0, #0
1001199e:	4901      	ldr	r1, [pc, #4]	; (100119a4 <nan+0x8>)
100119a0:	4770      	bx	lr
100119a2:	46c0      	nop			; (mov r8, r8)
100119a4:	7ff80000 	.word	0x7ff80000

100119a8 <rint>:
100119a8:	b5f0      	push	{r4, r5, r6, r7, lr}
100119aa:	4647      	mov	r7, r8
100119ac:	b480      	push	{r7}
100119ae:	0fcb      	lsrs	r3, r1, #31
100119b0:	4698      	mov	r8, r3
100119b2:	4c4a      	ldr	r4, [pc, #296]	; (10011adc <rint+0x134>)
100119b4:	004b      	lsls	r3, r1, #1
100119b6:	0d5b      	lsrs	r3, r3, #21
100119b8:	191e      	adds	r6, r3, r4
100119ba:	b082      	sub	sp, #8
100119bc:	0007      	movs	r7, r0
100119be:	000a      	movs	r2, r1
100119c0:	2e13      	cmp	r6, #19
100119c2:	dc35      	bgt.n	10011a30 <rint+0x88>
100119c4:	2e00      	cmp	r6, #0
100119c6:	db57      	blt.n	10011a78 <rint+0xd0>
100119c8:	4b45      	ldr	r3, [pc, #276]	; (10011ae0 <rint+0x138>)
100119ca:	0004      	movs	r4, r0
100119cc:	4133      	asrs	r3, r6
100119ce:	001f      	movs	r7, r3
100119d0:	400f      	ands	r7, r1
100119d2:	4307      	orrs	r7, r0
100119d4:	000d      	movs	r5, r1
100119d6:	2f00      	cmp	r7, #0
100119d8:	d024      	beq.n	10011a24 <rint+0x7c>
100119da:	085b      	lsrs	r3, r3, #1
100119dc:	001c      	movs	r4, r3
100119de:	400c      	ands	r4, r1
100119e0:	4320      	orrs	r0, r4
100119e2:	2700      	movs	r7, #0
100119e4:	2800      	cmp	r0, #0
100119e6:	d007      	beq.n	100119f8 <rint+0x50>
100119e8:	2e13      	cmp	r6, #19
100119ea:	d100      	bne.n	100119ee <rint+0x46>
100119ec:	e072      	b.n	10011ad4 <rint+0x12c>
100119ee:	2280      	movs	r2, #128	; 0x80
100119f0:	02d2      	lsls	r2, r2, #11
100119f2:	4132      	asrs	r2, r6
100119f4:	4399      	bics	r1, r3
100119f6:	430a      	orrs	r2, r1
100119f8:	4643      	mov	r3, r8
100119fa:	00de      	lsls	r6, r3, #3
100119fc:	4b39      	ldr	r3, [pc, #228]	; (10011ae4 <rint+0x13c>)
100119fe:	0011      	movs	r1, r2
10011a00:	199e      	adds	r6, r3, r6
10011a02:	6834      	ldr	r4, [r6, #0]
10011a04:	6875      	ldr	r5, [r6, #4]
10011a06:	0038      	movs	r0, r7
10011a08:	0022      	movs	r2, r4
10011a0a:	002b      	movs	r3, r5
10011a0c:	f003 fafc 	bl	10015008 <__aeabi_dadd>
10011a10:	9000      	str	r0, [sp, #0]
10011a12:	9101      	str	r1, [sp, #4]
10011a14:	9800      	ldr	r0, [sp, #0]
10011a16:	9901      	ldr	r1, [sp, #4]
10011a18:	0022      	movs	r2, r4
10011a1a:	002b      	movs	r3, r5
10011a1c:	f004 fcbe 	bl	1001639c <__aeabi_dsub>
10011a20:	0004      	movs	r4, r0
10011a22:	000d      	movs	r5, r1
10011a24:	0020      	movs	r0, r4
10011a26:	0029      	movs	r1, r5
10011a28:	b002      	add	sp, #8
10011a2a:	bc04      	pop	{r2}
10011a2c:	4690      	mov	r8, r2
10011a2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10011a30:	2e33      	cmp	r6, #51	; 0x33
10011a32:	dd0c      	ble.n	10011a4e <rint+0xa6>
10011a34:	2380      	movs	r3, #128	; 0x80
10011a36:	0004      	movs	r4, r0
10011a38:	000d      	movs	r5, r1
10011a3a:	00db      	lsls	r3, r3, #3
10011a3c:	429e      	cmp	r6, r3
10011a3e:	d1f1      	bne.n	10011a24 <rint+0x7c>
10011a40:	0002      	movs	r2, r0
10011a42:	000b      	movs	r3, r1
10011a44:	f003 fae0 	bl	10015008 <__aeabi_dadd>
10011a48:	0004      	movs	r4, r0
10011a4a:	000d      	movs	r5, r1
10011a4c:	e7ea      	b.n	10011a24 <rint+0x7c>
10011a4e:	4c26      	ldr	r4, [pc, #152]	; (10011ae8 <rint+0x140>)
10011a50:	000d      	movs	r5, r1
10011a52:	46a4      	mov	ip, r4
10011a54:	2401      	movs	r4, #1
10011a56:	4463      	add	r3, ip
10011a58:	4264      	negs	r4, r4
10011a5a:	40dc      	lsrs	r4, r3
10011a5c:	46a4      	mov	ip, r4
10011a5e:	4661      	mov	r1, ip
10011a60:	0004      	movs	r4, r0
10011a62:	4201      	tst	r1, r0
10011a64:	d0de      	beq.n	10011a24 <rint+0x7c>
10011a66:	0849      	lsrs	r1, r1, #1
10011a68:	4201      	tst	r1, r0
10011a6a:	d0c5      	beq.n	100119f8 <rint+0x50>
10011a6c:	2780      	movs	r7, #128	; 0x80
10011a6e:	05ff      	lsls	r7, r7, #23
10011a70:	411f      	asrs	r7, r3
10011a72:	4388      	bics	r0, r1
10011a74:	4307      	orrs	r7, r0
10011a76:	e7bf      	b.n	100119f8 <rint+0x50>
10011a78:	004b      	lsls	r3, r1, #1
10011a7a:	085b      	lsrs	r3, r3, #1
10011a7c:	4303      	orrs	r3, r0
10011a7e:	0004      	movs	r4, r0
10011a80:	000d      	movs	r5, r1
10011a82:	2b00      	cmp	r3, #0
10011a84:	d0ce      	beq.n	10011a24 <rint+0x7c>
10011a86:	030b      	lsls	r3, r1, #12
10011a88:	0b1b      	lsrs	r3, r3, #12
10011a8a:	4303      	orrs	r3, r0
10011a8c:	425a      	negs	r2, r3
10011a8e:	4313      	orrs	r3, r2
10011a90:	2280      	movs	r2, #128	; 0x80
10011a92:	0b1b      	lsrs	r3, r3, #12
10011a94:	0312      	lsls	r2, r2, #12
10011a96:	4013      	ands	r3, r2
10011a98:	0c4a      	lsrs	r2, r1, #17
10011a9a:	0452      	lsls	r2, r2, #17
10011a9c:	4313      	orrs	r3, r2
10011a9e:	0019      	movs	r1, r3
10011aa0:	4643      	mov	r3, r8
10011aa2:	4a10      	ldr	r2, [pc, #64]	; (10011ae4 <rint+0x13c>)
10011aa4:	00db      	lsls	r3, r3, #3
10011aa6:	18d3      	adds	r3, r2, r3
10011aa8:	681c      	ldr	r4, [r3, #0]
10011aaa:	685d      	ldr	r5, [r3, #4]
10011aac:	0022      	movs	r2, r4
10011aae:	002b      	movs	r3, r5
10011ab0:	f003 faaa 	bl	10015008 <__aeabi_dadd>
10011ab4:	9000      	str	r0, [sp, #0]
10011ab6:	9101      	str	r1, [sp, #4]
10011ab8:	9800      	ldr	r0, [sp, #0]
10011aba:	9901      	ldr	r1, [sp, #4]
10011abc:	0022      	movs	r2, r4
10011abe:	002b      	movs	r3, r5
10011ac0:	f004 fc6c 	bl	1001639c <__aeabi_dsub>
10011ac4:	4642      	mov	r2, r8
10011ac6:	004b      	lsls	r3, r1, #1
10011ac8:	085b      	lsrs	r3, r3, #1
10011aca:	07d6      	lsls	r6, r2, #31
10011acc:	4333      	orrs	r3, r6
10011ace:	0004      	movs	r4, r0
10011ad0:	001d      	movs	r5, r3
10011ad2:	e7a7      	b.n	10011a24 <rint+0x7c>
10011ad4:	2780      	movs	r7, #128	; 0x80
10011ad6:	063f      	lsls	r7, r7, #24
10011ad8:	e789      	b.n	100119ee <rint+0x46>
10011ada:	46c0      	nop			; (mov r8, r8)
10011adc:	fffffc01 	.word	0xfffffc01
10011ae0:	000fffff 	.word	0x000fffff
10011ae4:	10017b38 	.word	0x10017b38
10011ae8:	fffffbed 	.word	0xfffffbed

10011aec <scalbn>:
10011aec:	004b      	lsls	r3, r1, #1
10011aee:	b570      	push	{r4, r5, r6, lr}
10011af0:	0d5b      	lsrs	r3, r3, #21
10011af2:	0014      	movs	r4, r2
10011af4:	000a      	movs	r2, r1
10011af6:	2b00      	cmp	r3, #0
10011af8:	d11a      	bne.n	10011b30 <scalbn+0x44>
10011afa:	004b      	lsls	r3, r1, #1
10011afc:	085b      	lsrs	r3, r3, #1
10011afe:	4303      	orrs	r3, r0
10011b00:	d015      	beq.n	10011b2e <scalbn+0x42>
10011b02:	2200      	movs	r2, #0
10011b04:	4b22      	ldr	r3, [pc, #136]	; (10011b90 <scalbn+0xa4>)
10011b06:	f004 f9cf 	bl	10015ea8 <__aeabi_dmul>
10011b0a:	4b22      	ldr	r3, [pc, #136]	; (10011b94 <scalbn+0xa8>)
10011b0c:	000a      	movs	r2, r1
10011b0e:	429c      	cmp	r4, r3
10011b10:	db22      	blt.n	10011b58 <scalbn+0x6c>
10011b12:	004b      	lsls	r3, r1, #1
10011b14:	0d5b      	lsrs	r3, r3, #21
10011b16:	3b36      	subs	r3, #54	; 0x36
10011b18:	4d1f      	ldr	r5, [pc, #124]	; (10011b98 <scalbn+0xac>)
10011b1a:	18e3      	adds	r3, r4, r3
10011b1c:	42ab      	cmp	r3, r5
10011b1e:	dc20      	bgt.n	10011b62 <scalbn+0x76>
10011b20:	2b00      	cmp	r3, #0
10011b22:	dd0d      	ble.n	10011b40 <scalbn+0x54>
10011b24:	4c1d      	ldr	r4, [pc, #116]	; (10011b9c <scalbn+0xb0>)
10011b26:	051b      	lsls	r3, r3, #20
10011b28:	4022      	ands	r2, r4
10011b2a:	431a      	orrs	r2, r3
10011b2c:	0011      	movs	r1, r2
10011b2e:	bd70      	pop	{r4, r5, r6, pc}
10011b30:	4d1b      	ldr	r5, [pc, #108]	; (10011ba0 <scalbn+0xb4>)
10011b32:	42ab      	cmp	r3, r5
10011b34:	d1f0      	bne.n	10011b18 <scalbn+0x2c>
10011b36:	0002      	movs	r2, r0
10011b38:	000b      	movs	r3, r1
10011b3a:	f003 fa65 	bl	10015008 <__aeabi_dadd>
10011b3e:	e7f6      	b.n	10011b2e <scalbn+0x42>
10011b40:	001d      	movs	r5, r3
10011b42:	3535      	adds	r5, #53	; 0x35
10011b44:	da18      	bge.n	10011b78 <scalbn+0x8c>
10011b46:	4b17      	ldr	r3, [pc, #92]	; (10011ba4 <scalbn+0xb8>)
10011b48:	0002      	movs	r2, r0
10011b4a:	429c      	cmp	r4, r3
10011b4c:	dc0a      	bgt.n	10011b64 <scalbn+0x78>
10011b4e:	000b      	movs	r3, r1
10011b50:	4815      	ldr	r0, [pc, #84]	; (10011ba8 <scalbn+0xbc>)
10011b52:	4916      	ldr	r1, [pc, #88]	; (10011bac <scalbn+0xc0>)
10011b54:	f000 f832 	bl	10011bbc <copysign>
10011b58:	4a13      	ldr	r2, [pc, #76]	; (10011ba8 <scalbn+0xbc>)
10011b5a:	4b14      	ldr	r3, [pc, #80]	; (10011bac <scalbn+0xc0>)
10011b5c:	f004 f9a4 	bl	10015ea8 <__aeabi_dmul>
10011b60:	e7e5      	b.n	10011b2e <scalbn+0x42>
10011b62:	0002      	movs	r2, r0
10011b64:	000b      	movs	r3, r1
10011b66:	4812      	ldr	r0, [pc, #72]	; (10011bb0 <scalbn+0xc4>)
10011b68:	4912      	ldr	r1, [pc, #72]	; (10011bb4 <scalbn+0xc8>)
10011b6a:	f000 f827 	bl	10011bbc <copysign>
10011b6e:	4a10      	ldr	r2, [pc, #64]	; (10011bb0 <scalbn+0xc4>)
10011b70:	4b10      	ldr	r3, [pc, #64]	; (10011bb4 <scalbn+0xc8>)
10011b72:	f004 f999 	bl	10015ea8 <__aeabi_dmul>
10011b76:	e7da      	b.n	10011b2e <scalbn+0x42>
10011b78:	4c08      	ldr	r4, [pc, #32]	; (10011b9c <scalbn+0xb0>)
10011b7a:	3336      	adds	r3, #54	; 0x36
10011b7c:	4022      	ands	r2, r4
10011b7e:	051b      	lsls	r3, r3, #20
10011b80:	4313      	orrs	r3, r2
10011b82:	0019      	movs	r1, r3
10011b84:	2200      	movs	r2, #0
10011b86:	4b0c      	ldr	r3, [pc, #48]	; (10011bb8 <scalbn+0xcc>)
10011b88:	f004 f98e 	bl	10015ea8 <__aeabi_dmul>
10011b8c:	e7cf      	b.n	10011b2e <scalbn+0x42>
10011b8e:	46c0      	nop			; (mov r8, r8)
10011b90:	43500000 	.word	0x43500000
10011b94:	ffff3cb0 	.word	0xffff3cb0
10011b98:	000007fe 	.word	0x000007fe
10011b9c:	800fffff 	.word	0x800fffff
10011ba0:	000007ff 	.word	0x000007ff
10011ba4:	0000c350 	.word	0x0000c350
10011ba8:	c2f8f359 	.word	0xc2f8f359
10011bac:	01a56e1f 	.word	0x01a56e1f
10011bb0:	8800759c 	.word	0x8800759c
10011bb4:	7e37e43c 	.word	0x7e37e43c
10011bb8:	3c900000 	.word	0x3c900000

10011bbc <copysign>:
10011bbc:	b530      	push	{r4, r5, lr}
10011bbe:	004a      	lsls	r2, r1, #1
10011bc0:	0fdb      	lsrs	r3, r3, #31
10011bc2:	07db      	lsls	r3, r3, #31
10011bc4:	0852      	lsrs	r2, r2, #1
10011bc6:	431a      	orrs	r2, r3
10011bc8:	0011      	movs	r1, r2
10011bca:	bd30      	pop	{r4, r5, pc}

10011bcc <__errno>:
10011bcc:	4b01      	ldr	r3, [pc, #4]	; (10011bd4 <__errno+0x8>)
10011bce:	6818      	ldr	r0, [r3, #0]
10011bd0:	4770      	bx	lr
10011bd2:	46c0      	nop			; (mov r8, r8)
10011bd4:	10017edc 	.word	0x10017edc

10011bd8 <__libc_init_array>:
10011bd8:	4b0e      	ldr	r3, [pc, #56]	; (10011c14 <__libc_init_array+0x3c>)
10011bda:	b570      	push	{r4, r5, r6, lr}
10011bdc:	2500      	movs	r5, #0
10011bde:	001e      	movs	r6, r3
10011be0:	4c0d      	ldr	r4, [pc, #52]	; (10011c18 <__libc_init_array+0x40>)
10011be2:	1ae4      	subs	r4, r4, r3
10011be4:	10a4      	asrs	r4, r4, #2
10011be6:	42a5      	cmp	r5, r4
10011be8:	d004      	beq.n	10011bf4 <__libc_init_array+0x1c>
10011bea:	00ab      	lsls	r3, r5, #2
10011bec:	58f3      	ldr	r3, [r6, r3]
10011bee:	4798      	blx	r3
10011bf0:	3501      	adds	r5, #1
10011bf2:	e7f8      	b.n	10011be6 <__libc_init_array+0xe>
10011bf4:	f006 f92c 	bl	10017e50 <_init>
10011bf8:	4b08      	ldr	r3, [pc, #32]	; (10011c1c <__libc_init_array+0x44>)
10011bfa:	2500      	movs	r5, #0
10011bfc:	001e      	movs	r6, r3
10011bfe:	4c08      	ldr	r4, [pc, #32]	; (10011c20 <__libc_init_array+0x48>)
10011c00:	1ae4      	subs	r4, r4, r3
10011c02:	10a4      	asrs	r4, r4, #2
10011c04:	42a5      	cmp	r5, r4
10011c06:	d004      	beq.n	10011c12 <__libc_init_array+0x3a>
10011c08:	00ab      	lsls	r3, r5, #2
10011c0a:	58f3      	ldr	r3, [r6, r3]
10011c0c:	4798      	blx	r3
10011c0e:	3501      	adds	r5, #1
10011c10:	e7f8      	b.n	10011c04 <__libc_init_array+0x2c>
10011c12:	bd70      	pop	{r4, r5, r6, pc}
10011c14:	10017e5c 	.word	0x10017e5c
10011c18:	10017e5c 	.word	0x10017e5c
10011c1c:	10017e5c 	.word	0x10017e5c
10011c20:	10017e60 	.word	0x10017e60

10011c24 <malloc>:
10011c24:	b510      	push	{r4, lr}
10011c26:	4b03      	ldr	r3, [pc, #12]	; (10011c34 <malloc+0x10>)
10011c28:	0001      	movs	r1, r0
10011c2a:	6818      	ldr	r0, [r3, #0]
10011c2c:	f000 f86a 	bl	10011d04 <_malloc_r>
10011c30:	bd10      	pop	{r4, pc}
10011c32:	46c0      	nop			; (mov r8, r8)
10011c34:	10017edc 	.word	0x10017edc

10011c38 <memcmp>:
10011c38:	b530      	push	{r4, r5, lr}
10011c3a:	2400      	movs	r4, #0
10011c3c:	42a2      	cmp	r2, r4
10011c3e:	d008      	beq.n	10011c52 <memcmp+0x1a>
10011c40:	5d03      	ldrb	r3, [r0, r4]
10011c42:	1c65      	adds	r5, r4, #1
10011c44:	5d0c      	ldrb	r4, [r1, r4]
10011c46:	42a3      	cmp	r3, r4
10011c48:	d001      	beq.n	10011c4e <memcmp+0x16>
10011c4a:	1b18      	subs	r0, r3, r4
10011c4c:	e002      	b.n	10011c54 <memcmp+0x1c>
10011c4e:	002c      	movs	r4, r5
10011c50:	e7f4      	b.n	10011c3c <memcmp+0x4>
10011c52:	2000      	movs	r0, #0
10011c54:	bd30      	pop	{r4, r5, pc}

10011c56 <memcpy>:
10011c56:	2300      	movs	r3, #0
10011c58:	b510      	push	{r4, lr}
10011c5a:	429a      	cmp	r2, r3
10011c5c:	d003      	beq.n	10011c66 <memcpy+0x10>
10011c5e:	5ccc      	ldrb	r4, [r1, r3]
10011c60:	54c4      	strb	r4, [r0, r3]
10011c62:	3301      	adds	r3, #1
10011c64:	e7f9      	b.n	10011c5a <memcpy+0x4>
10011c66:	bd10      	pop	{r4, pc}

10011c68 <memset>:
10011c68:	0003      	movs	r3, r0
10011c6a:	1882      	adds	r2, r0, r2
10011c6c:	4293      	cmp	r3, r2
10011c6e:	d002      	beq.n	10011c76 <memset+0xe>
10011c70:	7019      	strb	r1, [r3, #0]
10011c72:	3301      	adds	r3, #1
10011c74:	e7fa      	b.n	10011c6c <memset+0x4>
10011c76:	4770      	bx	lr

10011c78 <_free_r>:
10011c78:	b530      	push	{r4, r5, lr}
10011c7a:	2900      	cmp	r1, #0
10011c7c:	d03e      	beq.n	10011cfc <_free_r+0x84>
10011c7e:	3904      	subs	r1, #4
10011c80:	680b      	ldr	r3, [r1, #0]
10011c82:	2b00      	cmp	r3, #0
10011c84:	da00      	bge.n	10011c88 <_free_r+0x10>
10011c86:	18c9      	adds	r1, r1, r3
10011c88:	4a1d      	ldr	r2, [pc, #116]	; (10011d00 <_free_r+0x88>)
10011c8a:	6813      	ldr	r3, [r2, #0]
10011c8c:	0014      	movs	r4, r2
10011c8e:	2b00      	cmp	r3, #0
10011c90:	d102      	bne.n	10011c98 <_free_r+0x20>
10011c92:	604b      	str	r3, [r1, #4]
10011c94:	6011      	str	r1, [r2, #0]
10011c96:	e031      	b.n	10011cfc <_free_r+0x84>
10011c98:	428b      	cmp	r3, r1
10011c9a:	d90d      	bls.n	10011cb8 <_free_r+0x40>
10011c9c:	680a      	ldr	r2, [r1, #0]
10011c9e:	1888      	adds	r0, r1, r2
10011ca0:	4283      	cmp	r3, r0
10011ca2:	d103      	bne.n	10011cac <_free_r+0x34>
10011ca4:	6818      	ldr	r0, [r3, #0]
10011ca6:	685b      	ldr	r3, [r3, #4]
10011ca8:	1882      	adds	r2, r0, r2
10011caa:	600a      	str	r2, [r1, #0]
10011cac:	604b      	str	r3, [r1, #4]
10011cae:	6021      	str	r1, [r4, #0]
10011cb0:	e024      	b.n	10011cfc <_free_r+0x84>
10011cb2:	428a      	cmp	r2, r1
10011cb4:	d803      	bhi.n	10011cbe <_free_r+0x46>
10011cb6:	0013      	movs	r3, r2
10011cb8:	685a      	ldr	r2, [r3, #4]
10011cba:	2a00      	cmp	r2, #0
10011cbc:	d1f9      	bne.n	10011cb2 <_free_r+0x3a>
10011cbe:	681d      	ldr	r5, [r3, #0]
10011cc0:	195c      	adds	r4, r3, r5
10011cc2:	428c      	cmp	r4, r1
10011cc4:	d10b      	bne.n	10011cde <_free_r+0x66>
10011cc6:	6809      	ldr	r1, [r1, #0]
10011cc8:	1869      	adds	r1, r5, r1
10011cca:	1858      	adds	r0, r3, r1
10011ccc:	6019      	str	r1, [r3, #0]
10011cce:	4282      	cmp	r2, r0
10011cd0:	d114      	bne.n	10011cfc <_free_r+0x84>
10011cd2:	6810      	ldr	r0, [r2, #0]
10011cd4:	6852      	ldr	r2, [r2, #4]
10011cd6:	1841      	adds	r1, r0, r1
10011cd8:	6019      	str	r1, [r3, #0]
10011cda:	605a      	str	r2, [r3, #4]
10011cdc:	e00e      	b.n	10011cfc <_free_r+0x84>
10011cde:	428c      	cmp	r4, r1
10011ce0:	d902      	bls.n	10011ce8 <_free_r+0x70>
10011ce2:	230c      	movs	r3, #12
10011ce4:	6003      	str	r3, [r0, #0]
10011ce6:	e009      	b.n	10011cfc <_free_r+0x84>
10011ce8:	6808      	ldr	r0, [r1, #0]
10011cea:	180c      	adds	r4, r1, r0
10011cec:	42a2      	cmp	r2, r4
10011cee:	d103      	bne.n	10011cf8 <_free_r+0x80>
10011cf0:	6814      	ldr	r4, [r2, #0]
10011cf2:	6852      	ldr	r2, [r2, #4]
10011cf4:	1820      	adds	r0, r4, r0
10011cf6:	6008      	str	r0, [r1, #0]
10011cf8:	604a      	str	r2, [r1, #4]
10011cfa:	6059      	str	r1, [r3, #4]
10011cfc:	bd30      	pop	{r4, r5, pc}
10011cfe:	46c0      	nop			; (mov r8, r8)
10011d00:	100199d8 	.word	0x100199d8

10011d04 <_malloc_r>:
10011d04:	2303      	movs	r3, #3
10011d06:	b570      	push	{r4, r5, r6, lr}
10011d08:	1ccd      	adds	r5, r1, #3
10011d0a:	439d      	bics	r5, r3
10011d0c:	3508      	adds	r5, #8
10011d0e:	0006      	movs	r6, r0
10011d10:	2d0c      	cmp	r5, #12
10011d12:	d201      	bcs.n	10011d18 <_malloc_r+0x14>
10011d14:	250c      	movs	r5, #12
10011d16:	e005      	b.n	10011d24 <_malloc_r+0x20>
10011d18:	2d00      	cmp	r5, #0
10011d1a:	da03      	bge.n	10011d24 <_malloc_r+0x20>
10011d1c:	230c      	movs	r3, #12
10011d1e:	2000      	movs	r0, #0
10011d20:	6033      	str	r3, [r6, #0]
10011d22:	e040      	b.n	10011da6 <_malloc_r+0xa2>
10011d24:	42a9      	cmp	r1, r5
10011d26:	d8f9      	bhi.n	10011d1c <_malloc_r+0x18>
10011d28:	4b1f      	ldr	r3, [pc, #124]	; (10011da8 <_malloc_r+0xa4>)
10011d2a:	681c      	ldr	r4, [r3, #0]
10011d2c:	001a      	movs	r2, r3
10011d2e:	0021      	movs	r1, r4
10011d30:	2900      	cmp	r1, #0
10011d32:	d013      	beq.n	10011d5c <_malloc_r+0x58>
10011d34:	680b      	ldr	r3, [r1, #0]
10011d36:	1b5b      	subs	r3, r3, r5
10011d38:	d40d      	bmi.n	10011d56 <_malloc_r+0x52>
10011d3a:	2b0b      	cmp	r3, #11
10011d3c:	d902      	bls.n	10011d44 <_malloc_r+0x40>
10011d3e:	600b      	str	r3, [r1, #0]
10011d40:	18cc      	adds	r4, r1, r3
10011d42:	e01e      	b.n	10011d82 <_malloc_r+0x7e>
10011d44:	428c      	cmp	r4, r1
10011d46:	d102      	bne.n	10011d4e <_malloc_r+0x4a>
10011d48:	6863      	ldr	r3, [r4, #4]
10011d4a:	6013      	str	r3, [r2, #0]
10011d4c:	e01a      	b.n	10011d84 <_malloc_r+0x80>
10011d4e:	684b      	ldr	r3, [r1, #4]
10011d50:	6063      	str	r3, [r4, #4]
10011d52:	000c      	movs	r4, r1
10011d54:	e016      	b.n	10011d84 <_malloc_r+0x80>
10011d56:	000c      	movs	r4, r1
10011d58:	6849      	ldr	r1, [r1, #4]
10011d5a:	e7e9      	b.n	10011d30 <_malloc_r+0x2c>
10011d5c:	4c13      	ldr	r4, [pc, #76]	; (10011dac <_malloc_r+0xa8>)
10011d5e:	6823      	ldr	r3, [r4, #0]
10011d60:	2b00      	cmp	r3, #0
10011d62:	d103      	bne.n	10011d6c <_malloc_r+0x68>
10011d64:	0030      	movs	r0, r6
10011d66:	f000 fd6f 	bl	10012848 <_sbrk_r>
10011d6a:	6020      	str	r0, [r4, #0]
10011d6c:	0029      	movs	r1, r5
10011d6e:	0030      	movs	r0, r6
10011d70:	f000 fd6a 	bl	10012848 <_sbrk_r>
10011d74:	1c43      	adds	r3, r0, #1
10011d76:	d0d1      	beq.n	10011d1c <_malloc_r+0x18>
10011d78:	2303      	movs	r3, #3
10011d7a:	1cc4      	adds	r4, r0, #3
10011d7c:	439c      	bics	r4, r3
10011d7e:	42a0      	cmp	r0, r4
10011d80:	d10a      	bne.n	10011d98 <_malloc_r+0x94>
10011d82:	6025      	str	r5, [r4, #0]
10011d84:	0020      	movs	r0, r4
10011d86:	2207      	movs	r2, #7
10011d88:	300b      	adds	r0, #11
10011d8a:	1d23      	adds	r3, r4, #4
10011d8c:	4390      	bics	r0, r2
10011d8e:	1ac3      	subs	r3, r0, r3
10011d90:	d009      	beq.n	10011da6 <_malloc_r+0xa2>
10011d92:	425a      	negs	r2, r3
10011d94:	50e2      	str	r2, [r4, r3]
10011d96:	e006      	b.n	10011da6 <_malloc_r+0xa2>
10011d98:	1a21      	subs	r1, r4, r0
10011d9a:	0030      	movs	r0, r6
10011d9c:	f000 fd54 	bl	10012848 <_sbrk_r>
10011da0:	1c43      	adds	r3, r0, #1
10011da2:	d1ee      	bne.n	10011d82 <_malloc_r+0x7e>
10011da4:	e7ba      	b.n	10011d1c <_malloc_r+0x18>
10011da6:	bd70      	pop	{r4, r5, r6, pc}
10011da8:	100199d8 	.word	0x100199d8
10011dac:	100199d4 	.word	0x100199d4

10011db0 <__cvt>:
10011db0:	b5f0      	push	{r4, r5, r6, r7, lr}
10011db2:	b08b      	sub	sp, #44	; 0x2c
10011db4:	0014      	movs	r4, r2
10011db6:	1e1d      	subs	r5, r3, #0
10011db8:	9912      	ldr	r1, [sp, #72]	; 0x48
10011dba:	da06      	bge.n	10011dca <__cvt+0x1a>
10011dbc:	2480      	movs	r4, #128	; 0x80
10011dbe:	0624      	lsls	r4, r4, #24
10011dc0:	191b      	adds	r3, r3, r4
10011dc2:	001d      	movs	r5, r3
10011dc4:	0014      	movs	r4, r2
10011dc6:	232d      	movs	r3, #45	; 0x2d
10011dc8:	e000      	b.n	10011dcc <__cvt+0x1c>
10011dca:	2300      	movs	r3, #0
10011dcc:	700b      	strb	r3, [r1, #0]
10011dce:	2320      	movs	r3, #32
10011dd0:	9e14      	ldr	r6, [sp, #80]	; 0x50
10011dd2:	2203      	movs	r2, #3
10011dd4:	439e      	bics	r6, r3
10011dd6:	2e46      	cmp	r6, #70	; 0x46
10011dd8:	d007      	beq.n	10011dea <__cvt+0x3a>
10011dda:	0033      	movs	r3, r6
10011ddc:	3b45      	subs	r3, #69	; 0x45
10011dde:	4259      	negs	r1, r3
10011de0:	414b      	adcs	r3, r1
10011de2:	9910      	ldr	r1, [sp, #64]	; 0x40
10011de4:	3a01      	subs	r2, #1
10011de6:	18cb      	adds	r3, r1, r3
10011de8:	9310      	str	r3, [sp, #64]	; 0x40
10011dea:	ab09      	add	r3, sp, #36	; 0x24
10011dec:	9304      	str	r3, [sp, #16]
10011dee:	ab08      	add	r3, sp, #32
10011df0:	9303      	str	r3, [sp, #12]
10011df2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
10011df4:	9200      	str	r2, [sp, #0]
10011df6:	9302      	str	r3, [sp, #8]
10011df8:	9b10      	ldr	r3, [sp, #64]	; 0x40
10011dfa:	0022      	movs	r2, r4
10011dfc:	9301      	str	r3, [sp, #4]
10011dfe:	002b      	movs	r3, r5
10011e00:	f000 ff4a 	bl	10012c98 <_dtoa_r>
10011e04:	0007      	movs	r7, r0
10011e06:	2e47      	cmp	r6, #71	; 0x47
10011e08:	d102      	bne.n	10011e10 <__cvt+0x60>
10011e0a:	9b11      	ldr	r3, [sp, #68]	; 0x44
10011e0c:	07db      	lsls	r3, r3, #31
10011e0e:	d52d      	bpl.n	10011e6c <__cvt+0xbc>
10011e10:	9b10      	ldr	r3, [sp, #64]	; 0x40
10011e12:	18fb      	adds	r3, r7, r3
10011e14:	9307      	str	r3, [sp, #28]
10011e16:	2e46      	cmp	r6, #70	; 0x46
10011e18:	d114      	bne.n	10011e44 <__cvt+0x94>
10011e1a:	783b      	ldrb	r3, [r7, #0]
10011e1c:	2b30      	cmp	r3, #48	; 0x30
10011e1e:	d10c      	bne.n	10011e3a <__cvt+0x8a>
10011e20:	2200      	movs	r2, #0
10011e22:	2300      	movs	r3, #0
10011e24:	0020      	movs	r0, r4
10011e26:	0029      	movs	r1, r5
10011e28:	f002 fdc2 	bl	100149b0 <__aeabi_dcmpeq>
10011e2c:	2800      	cmp	r0, #0
10011e2e:	d104      	bne.n	10011e3a <__cvt+0x8a>
10011e30:	2301      	movs	r3, #1
10011e32:	9a10      	ldr	r2, [sp, #64]	; 0x40
10011e34:	1a9b      	subs	r3, r3, r2
10011e36:	9a13      	ldr	r2, [sp, #76]	; 0x4c
10011e38:	6013      	str	r3, [r2, #0]
10011e3a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
10011e3c:	9a07      	ldr	r2, [sp, #28]
10011e3e:	681b      	ldr	r3, [r3, #0]
10011e40:	18d3      	adds	r3, r2, r3
10011e42:	9307      	str	r3, [sp, #28]
10011e44:	2200      	movs	r2, #0
10011e46:	2300      	movs	r3, #0
10011e48:	0020      	movs	r0, r4
10011e4a:	0029      	movs	r1, r5
10011e4c:	f002 fdb0 	bl	100149b0 <__aeabi_dcmpeq>
10011e50:	2230      	movs	r2, #48	; 0x30
10011e52:	2800      	cmp	r0, #0
10011e54:	d002      	beq.n	10011e5c <__cvt+0xac>
10011e56:	9b07      	ldr	r3, [sp, #28]
10011e58:	9309      	str	r3, [sp, #36]	; 0x24
10011e5a:	e007      	b.n	10011e6c <__cvt+0xbc>
10011e5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
10011e5e:	9907      	ldr	r1, [sp, #28]
10011e60:	4299      	cmp	r1, r3
10011e62:	d903      	bls.n	10011e6c <__cvt+0xbc>
10011e64:	1c59      	adds	r1, r3, #1
10011e66:	9109      	str	r1, [sp, #36]	; 0x24
10011e68:	701a      	strb	r2, [r3, #0]
10011e6a:	e7f7      	b.n	10011e5c <__cvt+0xac>
10011e6c:	0038      	movs	r0, r7
10011e6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
10011e70:	9a15      	ldr	r2, [sp, #84]	; 0x54
10011e72:	1bdb      	subs	r3, r3, r7
10011e74:	6013      	str	r3, [r2, #0]
10011e76:	b00b      	add	sp, #44	; 0x2c
10011e78:	bdf0      	pop	{r4, r5, r6, r7, pc}

10011e7a <__exponent>:
10011e7a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10011e7c:	232b      	movs	r3, #43	; 0x2b
10011e7e:	0007      	movs	r7, r0
10011e80:	000c      	movs	r4, r1
10011e82:	7002      	strb	r2, [r0, #0]
10011e84:	1c86      	adds	r6, r0, #2
10011e86:	2900      	cmp	r1, #0
10011e88:	da01      	bge.n	10011e8e <__exponent+0x14>
10011e8a:	232d      	movs	r3, #45	; 0x2d
10011e8c:	424c      	negs	r4, r1
10011e8e:	707b      	strb	r3, [r7, #1]
10011e90:	2c09      	cmp	r4, #9
10011e92:	dd1c      	ble.n	10011ece <__exponent+0x54>
10011e94:	466b      	mov	r3, sp
10011e96:	1ddd      	adds	r5, r3, #7
10011e98:	0020      	movs	r0, r4
10011e9a:	210a      	movs	r1, #10
10011e9c:	f002 fd72 	bl	10014984 <__aeabi_idivmod>
10011ea0:	3d01      	subs	r5, #1
10011ea2:	3130      	adds	r1, #48	; 0x30
10011ea4:	7029      	strb	r1, [r5, #0]
10011ea6:	0020      	movs	r0, r4
10011ea8:	210a      	movs	r1, #10
10011eaa:	f002 fc85 	bl	100147b8 <__aeabi_idiv>
10011eae:	1e04      	subs	r4, r0, #0
10011eb0:	2c09      	cmp	r4, #9
10011eb2:	dcf1      	bgt.n	10011e98 <__exponent+0x1e>
10011eb4:	3d01      	subs	r5, #1
10011eb6:	3430      	adds	r4, #48	; 0x30
10011eb8:	702c      	strb	r4, [r5, #0]
10011eba:	466b      	mov	r3, sp
10011ebc:	3307      	adds	r3, #7
10011ebe:	0030      	movs	r0, r6
10011ec0:	42ab      	cmp	r3, r5
10011ec2:	d909      	bls.n	10011ed8 <__exponent+0x5e>
10011ec4:	782b      	ldrb	r3, [r5, #0]
10011ec6:	3501      	adds	r5, #1
10011ec8:	7033      	strb	r3, [r6, #0]
10011eca:	3601      	adds	r6, #1
10011ecc:	e7f5      	b.n	10011eba <__exponent+0x40>
10011ece:	2330      	movs	r3, #48	; 0x30
10011ed0:	18e4      	adds	r4, r4, r3
10011ed2:	7033      	strb	r3, [r6, #0]
10011ed4:	1cb0      	adds	r0, r6, #2
10011ed6:	7074      	strb	r4, [r6, #1]
10011ed8:	1bc0      	subs	r0, r0, r7
10011eda:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

10011edc <_printf_float>:
10011edc:	b5f0      	push	{r4, r5, r6, r7, lr}
10011ede:	b095      	sub	sp, #84	; 0x54
10011ee0:	000c      	movs	r4, r1
10011ee2:	920a      	str	r2, [sp, #40]	; 0x28
10011ee4:	930b      	str	r3, [sp, #44]	; 0x2c
10011ee6:	9d1a      	ldr	r5, [sp, #104]	; 0x68
10011ee8:	9009      	str	r0, [sp, #36]	; 0x24
10011eea:	f001 fe23 	bl	10013b34 <_localeconv_r>
10011eee:	6803      	ldr	r3, [r0, #0]
10011ef0:	0018      	movs	r0, r3
10011ef2:	930d      	str	r3, [sp, #52]	; 0x34
10011ef4:	f000 fd74 	bl	100129e0 <strlen>
10011ef8:	2300      	movs	r3, #0
10011efa:	9312      	str	r3, [sp, #72]	; 0x48
10011efc:	6823      	ldr	r3, [r4, #0]
10011efe:	900e      	str	r0, [sp, #56]	; 0x38
10011f00:	930c      	str	r3, [sp, #48]	; 0x30
10011f02:	990c      	ldr	r1, [sp, #48]	; 0x30
10011f04:	7e27      	ldrb	r7, [r4, #24]
10011f06:	682b      	ldr	r3, [r5, #0]
10011f08:	2207      	movs	r2, #7
10011f0a:	05c9      	lsls	r1, r1, #23
10011f0c:	d501      	bpl.n	10011f12 <_printf_float+0x36>
10011f0e:	189b      	adds	r3, r3, r2
10011f10:	e000      	b.n	10011f14 <_printf_float+0x38>
10011f12:	3307      	adds	r3, #7
10011f14:	4393      	bics	r3, r2
10011f16:	001a      	movs	r2, r3
10011f18:	3208      	adds	r2, #8
10011f1a:	602a      	str	r2, [r5, #0]
10011f1c:	681a      	ldr	r2, [r3, #0]
10011f1e:	685b      	ldr	r3, [r3, #4]
10011f20:	64a2      	str	r2, [r4, #72]	; 0x48
10011f22:	64e3      	str	r3, [r4, #76]	; 0x4c
10011f24:	2201      	movs	r2, #1
10011f26:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
10011f28:	6ca6      	ldr	r6, [r4, #72]	; 0x48
10011f2a:	006b      	lsls	r3, r5, #1
10011f2c:	085b      	lsrs	r3, r3, #1
10011f2e:	930f      	str	r3, [sp, #60]	; 0x3c
10011f30:	4252      	negs	r2, r2
10011f32:	4bc0      	ldr	r3, [pc, #768]	; (10012234 <_printf_float+0x358>)
10011f34:	0030      	movs	r0, r6
10011f36:	990f      	ldr	r1, [sp, #60]	; 0x3c
10011f38:	f004 fd84 	bl	10016a44 <__aeabi_dcmpun>
10011f3c:	2800      	cmp	r0, #0
10011f3e:	d119      	bne.n	10011f74 <_printf_float+0x98>
10011f40:	2201      	movs	r2, #1
10011f42:	4bbc      	ldr	r3, [pc, #752]	; (10012234 <_printf_float+0x358>)
10011f44:	4252      	negs	r2, r2
10011f46:	0030      	movs	r0, r6
10011f48:	990f      	ldr	r1, [sp, #60]	; 0x3c
10011f4a:	f002 fd41 	bl	100149d0 <__aeabi_dcmple>
10011f4e:	2800      	cmp	r0, #0
10011f50:	d110      	bne.n	10011f74 <_printf_float+0x98>
10011f52:	2200      	movs	r2, #0
10011f54:	2300      	movs	r3, #0
10011f56:	0030      	movs	r0, r6
10011f58:	0029      	movs	r1, r5
10011f5a:	f002 fd2f 	bl	100149bc <__aeabi_dcmplt>
10011f5e:	2800      	cmp	r0, #0
10011f60:	d003      	beq.n	10011f6a <_printf_float+0x8e>
10011f62:	0023      	movs	r3, r4
10011f64:	222d      	movs	r2, #45	; 0x2d
10011f66:	3343      	adds	r3, #67	; 0x43
10011f68:	701a      	strb	r2, [r3, #0]
10011f6a:	4db3      	ldr	r5, [pc, #716]	; (10012238 <_printf_float+0x35c>)
10011f6c:	2f47      	cmp	r7, #71	; 0x47
10011f6e:	d80e      	bhi.n	10011f8e <_printf_float+0xb2>
10011f70:	4db2      	ldr	r5, [pc, #712]	; (1001223c <_printf_float+0x360>)
10011f72:	e00c      	b.n	10011f8e <_printf_float+0xb2>
10011f74:	0032      	movs	r2, r6
10011f76:	002b      	movs	r3, r5
10011f78:	0030      	movs	r0, r6
10011f7a:	0029      	movs	r1, r5
10011f7c:	f004 fd62 	bl	10016a44 <__aeabi_dcmpun>
10011f80:	2800      	cmp	r0, #0
10011f82:	d100      	bne.n	10011f86 <_printf_float+0xaa>
10011f84:	e19a      	b.n	100122bc <_printf_float+0x3e0>
10011f86:	4dae      	ldr	r5, [pc, #696]	; (10012240 <_printf_float+0x364>)
10011f88:	2f47      	cmp	r7, #71	; 0x47
10011f8a:	d800      	bhi.n	10011f8e <_printf_float+0xb2>
10011f8c:	4dad      	ldr	r5, [pc, #692]	; (10012244 <_printf_float+0x368>)
10011f8e:	2303      	movs	r3, #3
10011f90:	9a0c      	ldr	r2, [sp, #48]	; 0x30
10011f92:	6123      	str	r3, [r4, #16]
10011f94:	3301      	adds	r3, #1
10011f96:	439a      	bics	r2, r3
10011f98:	6022      	str	r2, [r4, #0]
10011f9a:	2600      	movs	r6, #0
10011f9c:	e042      	b.n	10012024 <_printf_float+0x148>
10011f9e:	2f67      	cmp	r7, #103	; 0x67
10011fa0:	d100      	bne.n	10011fa4 <_printf_float+0xc8>
10011fa2:	e193      	b.n	100122cc <_printf_float+0x3f0>
10011fa4:	2f47      	cmp	r7, #71	; 0x47
10011fa6:	d100      	bne.n	10011faa <_printf_float+0xce>
10011fa8:	e190      	b.n	100122cc <_printf_float+0x3f0>
10011faa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
10011fac:	2100      	movs	r1, #0
10011fae:	4313      	orrs	r3, r2
10011fb0:	aa12      	add	r2, sp, #72	; 0x48
10011fb2:	9205      	str	r2, [sp, #20]
10011fb4:	aa11      	add	r2, sp, #68	; 0x44
10011fb6:	9203      	str	r2, [sp, #12]
10011fb8:	2223      	movs	r2, #35	; 0x23
10011fba:	6023      	str	r3, [r4, #0]
10011fbc:	9106      	str	r1, [sp, #24]
10011fbe:	9301      	str	r3, [sp, #4]
10011fc0:	a908      	add	r1, sp, #32
10011fc2:	6863      	ldr	r3, [r4, #4]
10011fc4:	1852      	adds	r2, r2, r1
10011fc6:	9202      	str	r2, [sp, #8]
10011fc8:	9300      	str	r3, [sp, #0]
10011fca:	0032      	movs	r2, r6
10011fcc:	002b      	movs	r3, r5
10011fce:	9704      	str	r7, [sp, #16]
10011fd0:	9809      	ldr	r0, [sp, #36]	; 0x24
10011fd2:	f7ff feed 	bl	10011db0 <__cvt>
10011fd6:	2320      	movs	r3, #32
10011fd8:	003a      	movs	r2, r7
10011fda:	0005      	movs	r5, r0
10011fdc:	439a      	bics	r2, r3
10011fde:	2a47      	cmp	r2, #71	; 0x47
10011fe0:	d100      	bne.n	10011fe4 <_printf_float+0x108>
10011fe2:	e18e      	b.n	10012302 <_printf_float+0x426>
10011fe4:	9911      	ldr	r1, [sp, #68]	; 0x44
10011fe6:	2f65      	cmp	r7, #101	; 0x65
10011fe8:	d900      	bls.n	10011fec <_printf_float+0x110>
10011fea:	e196      	b.n	1001231a <_printf_float+0x43e>
10011fec:	0020      	movs	r0, r4
10011fee:	3901      	subs	r1, #1
10011ff0:	003a      	movs	r2, r7
10011ff2:	3050      	adds	r0, #80	; 0x50
10011ff4:	9111      	str	r1, [sp, #68]	; 0x44
10011ff6:	f7ff ff40 	bl	10011e7a <__exponent>
10011ffa:	9a12      	ldr	r2, [sp, #72]	; 0x48
10011ffc:	0006      	movs	r6, r0
10011ffe:	1883      	adds	r3, r0, r2
10012000:	6123      	str	r3, [r4, #16]
10012002:	2a01      	cmp	r2, #1
10012004:	dd00      	ble.n	10012008 <_printf_float+0x12c>
10012006:	e185      	b.n	10012314 <_printf_float+0x438>
10012008:	6822      	ldr	r2, [r4, #0]
1001200a:	07d2      	lsls	r2, r2, #31
1001200c:	d500      	bpl.n	10012010 <_printf_float+0x134>
1001200e:	e181      	b.n	10012314 <_printf_float+0x438>
10012010:	2323      	movs	r3, #35	; 0x23
10012012:	aa08      	add	r2, sp, #32
10012014:	189b      	adds	r3, r3, r2
10012016:	781b      	ldrb	r3, [r3, #0]
10012018:	2b00      	cmp	r3, #0
1001201a:	d003      	beq.n	10012024 <_printf_float+0x148>
1001201c:	0023      	movs	r3, r4
1001201e:	222d      	movs	r2, #45	; 0x2d
10012020:	3343      	adds	r3, #67	; 0x43
10012022:	701a      	strb	r2, [r3, #0]
10012024:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
10012026:	aa13      	add	r2, sp, #76	; 0x4c
10012028:	9300      	str	r3, [sp, #0]
1001202a:	0021      	movs	r1, r4
1001202c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1001202e:	9809      	ldr	r0, [sp, #36]	; 0x24
10012030:	f000 f9a4 	bl	1001237c <_printf_common>
10012034:	1c43      	adds	r3, r0, #1
10012036:	d102      	bne.n	1001203e <_printf_float+0x162>
10012038:	2001      	movs	r0, #1
1001203a:	4240      	negs	r0, r0
1001203c:	e19b      	b.n	10012376 <_printf_float+0x49a>
1001203e:	6822      	ldr	r2, [r4, #0]
10012040:	0553      	lsls	r3, r2, #21
10012042:	d401      	bmi.n	10012048 <_printf_float+0x16c>
10012044:	6923      	ldr	r3, [r4, #16]
10012046:	e064      	b.n	10012112 <_printf_float+0x236>
10012048:	2f65      	cmp	r7, #101	; 0x65
1001204a:	d800      	bhi.n	1001204e <_printf_float+0x172>
1001204c:	e0cc      	b.n	100121e8 <_printf_float+0x30c>
1001204e:	6ca0      	ldr	r0, [r4, #72]	; 0x48
10012050:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
10012052:	2200      	movs	r2, #0
10012054:	2300      	movs	r3, #0
10012056:	f002 fcab 	bl	100149b0 <__aeabi_dcmpeq>
1001205a:	2800      	cmp	r0, #0
1001205c:	d02c      	beq.n	100120b8 <_printf_float+0x1dc>
1001205e:	2301      	movs	r3, #1
10012060:	4a79      	ldr	r2, [pc, #484]	; (10012248 <_printf_float+0x36c>)
10012062:	990a      	ldr	r1, [sp, #40]	; 0x28
10012064:	9809      	ldr	r0, [sp, #36]	; 0x24
10012066:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
10012068:	47a8      	blx	r5
1001206a:	1c43      	adds	r3, r0, #1
1001206c:	d0e4      	beq.n	10012038 <_printf_float+0x15c>
1001206e:	9b11      	ldr	r3, [sp, #68]	; 0x44
10012070:	9a12      	ldr	r2, [sp, #72]	; 0x48
10012072:	4293      	cmp	r3, r2
10012074:	db08      	blt.n	10012088 <_printf_float+0x1ac>
10012076:	6823      	ldr	r3, [r4, #0]
10012078:	07db      	lsls	r3, r3, #31
1001207a:	d405      	bmi.n	10012088 <_printf_float+0x1ac>
1001207c:	6823      	ldr	r3, [r4, #0]
1001207e:	2500      	movs	r5, #0
10012080:	079b      	lsls	r3, r3, #30
10012082:	d500      	bpl.n	10012086 <_printf_float+0x1aa>
10012084:	e10f      	b.n	100122a6 <_printf_float+0x3ca>
10012086:	e113      	b.n	100122b0 <_printf_float+0x3d4>
10012088:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
1001208a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1001208c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
1001208e:	990a      	ldr	r1, [sp, #40]	; 0x28
10012090:	9809      	ldr	r0, [sp, #36]	; 0x24
10012092:	47a8      	blx	r5
10012094:	2500      	movs	r5, #0
10012096:	1c43      	adds	r3, r0, #1
10012098:	d0ce      	beq.n	10012038 <_printf_float+0x15c>
1001209a:	9b12      	ldr	r3, [sp, #72]	; 0x48
1001209c:	3b01      	subs	r3, #1
1001209e:	429d      	cmp	r5, r3
100120a0:	daec      	bge.n	1001207c <_printf_float+0x1a0>
100120a2:	0022      	movs	r2, r4
100120a4:	2301      	movs	r3, #1
100120a6:	321a      	adds	r2, #26
100120a8:	990a      	ldr	r1, [sp, #40]	; 0x28
100120aa:	9809      	ldr	r0, [sp, #36]	; 0x24
100120ac:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
100120ae:	47b0      	blx	r6
100120b0:	1c43      	adds	r3, r0, #1
100120b2:	d0c1      	beq.n	10012038 <_printf_float+0x15c>
100120b4:	3501      	adds	r5, #1
100120b6:	e7f0      	b.n	1001209a <_printf_float+0x1be>
100120b8:	9b11      	ldr	r3, [sp, #68]	; 0x44
100120ba:	2b00      	cmp	r3, #0
100120bc:	dc2b      	bgt.n	10012116 <_printf_float+0x23a>
100120be:	2301      	movs	r3, #1
100120c0:	4a61      	ldr	r2, [pc, #388]	; (10012248 <_printf_float+0x36c>)
100120c2:	990a      	ldr	r1, [sp, #40]	; 0x28
100120c4:	9809      	ldr	r0, [sp, #36]	; 0x24
100120c6:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
100120c8:	47b0      	blx	r6
100120ca:	1c43      	adds	r3, r0, #1
100120cc:	d0b4      	beq.n	10012038 <_printf_float+0x15c>
100120ce:	9b11      	ldr	r3, [sp, #68]	; 0x44
100120d0:	2b00      	cmp	r3, #0
100120d2:	d105      	bne.n	100120e0 <_printf_float+0x204>
100120d4:	9b12      	ldr	r3, [sp, #72]	; 0x48
100120d6:	2b00      	cmp	r3, #0
100120d8:	d102      	bne.n	100120e0 <_printf_float+0x204>
100120da:	6823      	ldr	r3, [r4, #0]
100120dc:	07db      	lsls	r3, r3, #31
100120de:	d5cd      	bpl.n	1001207c <_printf_float+0x1a0>
100120e0:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
100120e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
100120e4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
100120e6:	990a      	ldr	r1, [sp, #40]	; 0x28
100120e8:	9809      	ldr	r0, [sp, #36]	; 0x24
100120ea:	47b0      	blx	r6
100120ec:	2600      	movs	r6, #0
100120ee:	1c43      	adds	r3, r0, #1
100120f0:	d0a2      	beq.n	10012038 <_printf_float+0x15c>
100120f2:	9b11      	ldr	r3, [sp, #68]	; 0x44
100120f4:	425b      	negs	r3, r3
100120f6:	429e      	cmp	r6, r3
100120f8:	da0a      	bge.n	10012110 <_printf_float+0x234>
100120fa:	0022      	movs	r2, r4
100120fc:	2301      	movs	r3, #1
100120fe:	321a      	adds	r2, #26
10012100:	990a      	ldr	r1, [sp, #40]	; 0x28
10012102:	9809      	ldr	r0, [sp, #36]	; 0x24
10012104:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
10012106:	47b8      	blx	r7
10012108:	1c43      	adds	r3, r0, #1
1001210a:	d095      	beq.n	10012038 <_printf_float+0x15c>
1001210c:	3601      	adds	r6, #1
1001210e:	e7f0      	b.n	100120f2 <_printf_float+0x216>
10012110:	9b12      	ldr	r3, [sp, #72]	; 0x48
10012112:	002a      	movs	r2, r5
10012114:	e0ac      	b.n	10012270 <_printf_float+0x394>
10012116:	6da3      	ldr	r3, [r4, #88]	; 0x58
10012118:	9e12      	ldr	r6, [sp, #72]	; 0x48
1001211a:	429e      	cmp	r6, r3
1001211c:	dd00      	ble.n	10012120 <_printf_float+0x244>
1001211e:	001e      	movs	r6, r3
10012120:	2e00      	cmp	r6, #0
10012122:	dc05      	bgt.n	10012130 <_printf_float+0x254>
10012124:	2300      	movs	r3, #0
10012126:	930c      	str	r3, [sp, #48]	; 0x30
10012128:	43f3      	mvns	r3, r6
1001212a:	17db      	asrs	r3, r3, #31
1001212c:	930f      	str	r3, [sp, #60]	; 0x3c
1001212e:	e015      	b.n	1001215c <_printf_float+0x280>
10012130:	0033      	movs	r3, r6
10012132:	002a      	movs	r2, r5
10012134:	990a      	ldr	r1, [sp, #40]	; 0x28
10012136:	9809      	ldr	r0, [sp, #36]	; 0x24
10012138:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
1001213a:	47b8      	blx	r7
1001213c:	1c43      	adds	r3, r0, #1
1001213e:	d1f1      	bne.n	10012124 <_printf_float+0x248>
10012140:	e77a      	b.n	10012038 <_printf_float+0x15c>
10012142:	0022      	movs	r2, r4
10012144:	2301      	movs	r3, #1
10012146:	321a      	adds	r2, #26
10012148:	990a      	ldr	r1, [sp, #40]	; 0x28
1001214a:	9809      	ldr	r0, [sp, #36]	; 0x24
1001214c:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
1001214e:	47b8      	blx	r7
10012150:	1c43      	adds	r3, r0, #1
10012152:	d100      	bne.n	10012156 <_printf_float+0x27a>
10012154:	e770      	b.n	10012038 <_printf_float+0x15c>
10012156:	9b0c      	ldr	r3, [sp, #48]	; 0x30
10012158:	3301      	adds	r3, #1
1001215a:	930c      	str	r3, [sp, #48]	; 0x30
1001215c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1001215e:	6da2      	ldr	r2, [r4, #88]	; 0x58
10012160:	990c      	ldr	r1, [sp, #48]	; 0x30
10012162:	4033      	ands	r3, r6
10012164:	1ad3      	subs	r3, r2, r3
10012166:	4299      	cmp	r1, r3
10012168:	dbeb      	blt.n	10012142 <_printf_float+0x266>
1001216a:	18ae      	adds	r6, r5, r2
1001216c:	9b11      	ldr	r3, [sp, #68]	; 0x44
1001216e:	9a12      	ldr	r2, [sp, #72]	; 0x48
10012170:	4293      	cmp	r3, r2
10012172:	db0d      	blt.n	10012190 <_printf_float+0x2b4>
10012174:	6823      	ldr	r3, [r4, #0]
10012176:	07db      	lsls	r3, r3, #31
10012178:	d40a      	bmi.n	10012190 <_printf_float+0x2b4>
1001217a:	9b12      	ldr	r3, [sp, #72]	; 0x48
1001217c:	9a11      	ldr	r2, [sp, #68]	; 0x44
1001217e:	18ed      	adds	r5, r5, r3
10012180:	1bad      	subs	r5, r5, r6
10012182:	1a9b      	subs	r3, r3, r2
10012184:	429d      	cmp	r5, r3
10012186:	dd00      	ble.n	1001218a <_printf_float+0x2ae>
10012188:	001d      	movs	r5, r3
1001218a:	2d00      	cmp	r5, #0
1001218c:	dc09      	bgt.n	100121a2 <_printf_float+0x2c6>
1001218e:	e011      	b.n	100121b4 <_printf_float+0x2d8>
10012190:	9b0e      	ldr	r3, [sp, #56]	; 0x38
10012192:	9a0d      	ldr	r2, [sp, #52]	; 0x34
10012194:	990a      	ldr	r1, [sp, #40]	; 0x28
10012196:	9809      	ldr	r0, [sp, #36]	; 0x24
10012198:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
1001219a:	47b8      	blx	r7
1001219c:	1c43      	adds	r3, r0, #1
1001219e:	d1ec      	bne.n	1001217a <_printf_float+0x29e>
100121a0:	e74a      	b.n	10012038 <_printf_float+0x15c>
100121a2:	002b      	movs	r3, r5
100121a4:	0032      	movs	r2, r6
100121a6:	990a      	ldr	r1, [sp, #40]	; 0x28
100121a8:	9809      	ldr	r0, [sp, #36]	; 0x24
100121aa:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
100121ac:	47b0      	blx	r6
100121ae:	1c43      	adds	r3, r0, #1
100121b0:	d100      	bne.n	100121b4 <_printf_float+0x2d8>
100121b2:	e741      	b.n	10012038 <_printf_float+0x15c>
100121b4:	43ef      	mvns	r7, r5
100121b6:	17fb      	asrs	r3, r7, #31
100121b8:	2600      	movs	r6, #0
100121ba:	930c      	str	r3, [sp, #48]	; 0x30
100121bc:	e00a      	b.n	100121d4 <_printf_float+0x2f8>
100121be:	0022      	movs	r2, r4
100121c0:	2301      	movs	r3, #1
100121c2:	321a      	adds	r2, #26
100121c4:	990a      	ldr	r1, [sp, #40]	; 0x28
100121c6:	9809      	ldr	r0, [sp, #36]	; 0x24
100121c8:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
100121ca:	47b8      	blx	r7
100121cc:	1c43      	adds	r3, r0, #1
100121ce:	d100      	bne.n	100121d2 <_printf_float+0x2f6>
100121d0:	e732      	b.n	10012038 <_printf_float+0x15c>
100121d2:	3601      	adds	r6, #1
100121d4:	9a11      	ldr	r2, [sp, #68]	; 0x44
100121d6:	9b12      	ldr	r3, [sp, #72]	; 0x48
100121d8:	990c      	ldr	r1, [sp, #48]	; 0x30
100121da:	1a9b      	subs	r3, r3, r2
100121dc:	002a      	movs	r2, r5
100121de:	400a      	ands	r2, r1
100121e0:	1a9b      	subs	r3, r3, r2
100121e2:	429e      	cmp	r6, r3
100121e4:	dbeb      	blt.n	100121be <_printf_float+0x2e2>
100121e6:	e749      	b.n	1001207c <_printf_float+0x1a0>
100121e8:	9b12      	ldr	r3, [sp, #72]	; 0x48
100121ea:	2b01      	cmp	r3, #1
100121ec:	dc02      	bgt.n	100121f4 <_printf_float+0x318>
100121ee:	2301      	movs	r3, #1
100121f0:	421a      	tst	r2, r3
100121f2:	d045      	beq.n	10012280 <_printf_float+0x3a4>
100121f4:	2301      	movs	r3, #1
100121f6:	002a      	movs	r2, r5
100121f8:	990a      	ldr	r1, [sp, #40]	; 0x28
100121fa:	9809      	ldr	r0, [sp, #36]	; 0x24
100121fc:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
100121fe:	47b8      	blx	r7
10012200:	1c43      	adds	r3, r0, #1
10012202:	d100      	bne.n	10012206 <_printf_float+0x32a>
10012204:	e718      	b.n	10012038 <_printf_float+0x15c>
10012206:	9b0e      	ldr	r3, [sp, #56]	; 0x38
10012208:	9a0d      	ldr	r2, [sp, #52]	; 0x34
1001220a:	990a      	ldr	r1, [sp, #40]	; 0x28
1001220c:	9809      	ldr	r0, [sp, #36]	; 0x24
1001220e:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
10012210:	47b8      	blx	r7
10012212:	1c43      	adds	r3, r0, #1
10012214:	d100      	bne.n	10012218 <_printf_float+0x33c>
10012216:	e70f      	b.n	10012038 <_printf_float+0x15c>
10012218:	6ca0      	ldr	r0, [r4, #72]	; 0x48
1001221a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
1001221c:	2200      	movs	r2, #0
1001221e:	2300      	movs	r3, #0
10012220:	f002 fbc6 	bl	100149b0 <__aeabi_dcmpeq>
10012224:	2800      	cmp	r0, #0
10012226:	d001      	beq.n	1001222c <_printf_float+0x350>
10012228:	2500      	movs	r5, #0
1001222a:	e01a      	b.n	10012262 <_printf_float+0x386>
1001222c:	9b12      	ldr	r3, [sp, #72]	; 0x48
1001222e:	1c6a      	adds	r2, r5, #1
10012230:	3b01      	subs	r3, #1
10012232:	e026      	b.n	10012282 <_printf_float+0x3a6>
10012234:	7fefffff 	.word	0x7fefffff
10012238:	10017b54 	.word	0x10017b54
1001223c:	10017b50 	.word	0x10017b50
10012240:	10017b5c 	.word	0x10017b5c
10012244:	10017b58 	.word	0x10017b58
10012248:	10017b60 	.word	0x10017b60
1001224c:	0022      	movs	r2, r4
1001224e:	2301      	movs	r3, #1
10012250:	321a      	adds	r2, #26
10012252:	990a      	ldr	r1, [sp, #40]	; 0x28
10012254:	9809      	ldr	r0, [sp, #36]	; 0x24
10012256:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
10012258:	47b8      	blx	r7
1001225a:	1c43      	adds	r3, r0, #1
1001225c:	d100      	bne.n	10012260 <_printf_float+0x384>
1001225e:	e6eb      	b.n	10012038 <_printf_float+0x15c>
10012260:	3501      	adds	r5, #1
10012262:	9b12      	ldr	r3, [sp, #72]	; 0x48
10012264:	3b01      	subs	r3, #1
10012266:	429d      	cmp	r5, r3
10012268:	dbf0      	blt.n	1001224c <_printf_float+0x370>
1001226a:	0022      	movs	r2, r4
1001226c:	0033      	movs	r3, r6
1001226e:	3250      	adds	r2, #80	; 0x50
10012270:	990a      	ldr	r1, [sp, #40]	; 0x28
10012272:	9809      	ldr	r0, [sp, #36]	; 0x24
10012274:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
10012276:	47a8      	blx	r5
10012278:	1c43      	adds	r3, r0, #1
1001227a:	d000      	beq.n	1001227e <_printf_float+0x3a2>
1001227c:	e6fe      	b.n	1001207c <_printf_float+0x1a0>
1001227e:	e6db      	b.n	10012038 <_printf_float+0x15c>
10012280:	002a      	movs	r2, r5
10012282:	990a      	ldr	r1, [sp, #40]	; 0x28
10012284:	9809      	ldr	r0, [sp, #36]	; 0x24
10012286:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
10012288:	47a8      	blx	r5
1001228a:	1c43      	adds	r3, r0, #1
1001228c:	d1ed      	bne.n	1001226a <_printf_float+0x38e>
1001228e:	e6d3      	b.n	10012038 <_printf_float+0x15c>
10012290:	0022      	movs	r2, r4
10012292:	2301      	movs	r3, #1
10012294:	3219      	adds	r2, #25
10012296:	990a      	ldr	r1, [sp, #40]	; 0x28
10012298:	9809      	ldr	r0, [sp, #36]	; 0x24
1001229a:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
1001229c:	47b0      	blx	r6
1001229e:	1c43      	adds	r3, r0, #1
100122a0:	d100      	bne.n	100122a4 <_printf_float+0x3c8>
100122a2:	e6c9      	b.n	10012038 <_printf_float+0x15c>
100122a4:	3501      	adds	r5, #1
100122a6:	68e3      	ldr	r3, [r4, #12]
100122a8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
100122aa:	1a9b      	subs	r3, r3, r2
100122ac:	429d      	cmp	r5, r3
100122ae:	dbef      	blt.n	10012290 <_printf_float+0x3b4>
100122b0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
100122b2:	68e0      	ldr	r0, [r4, #12]
100122b4:	4298      	cmp	r0, r3
100122b6:	da5e      	bge.n	10012376 <_printf_float+0x49a>
100122b8:	0018      	movs	r0, r3
100122ba:	e05c      	b.n	10012376 <_printf_float+0x49a>
100122bc:	2380      	movs	r3, #128	; 0x80
100122be:	6862      	ldr	r2, [r4, #4]
100122c0:	00db      	lsls	r3, r3, #3
100122c2:	1c51      	adds	r1, r2, #1
100122c4:	d000      	beq.n	100122c8 <_printf_float+0x3ec>
100122c6:	e66a      	b.n	10011f9e <_printf_float+0xc2>
100122c8:	3207      	adds	r2, #7
100122ca:	e002      	b.n	100122d2 <_printf_float+0x3f6>
100122cc:	2a00      	cmp	r2, #0
100122ce:	d102      	bne.n	100122d6 <_printf_float+0x3fa>
100122d0:	2201      	movs	r2, #1
100122d2:	6062      	str	r2, [r4, #4]
100122d4:	e669      	b.n	10011faa <_printf_float+0xce>
100122d6:	990c      	ldr	r1, [sp, #48]	; 0x30
100122d8:	a808      	add	r0, sp, #32
100122da:	430b      	orrs	r3, r1
100122dc:	2100      	movs	r1, #0
100122de:	9106      	str	r1, [sp, #24]
100122e0:	a912      	add	r1, sp, #72	; 0x48
100122e2:	9105      	str	r1, [sp, #20]
100122e4:	a911      	add	r1, sp, #68	; 0x44
100122e6:	9103      	str	r1, [sp, #12]
100122e8:	2123      	movs	r1, #35	; 0x23
100122ea:	1809      	adds	r1, r1, r0
100122ec:	6023      	str	r3, [r4, #0]
100122ee:	9301      	str	r3, [sp, #4]
100122f0:	9200      	str	r2, [sp, #0]
100122f2:	002b      	movs	r3, r5
100122f4:	9704      	str	r7, [sp, #16]
100122f6:	9102      	str	r1, [sp, #8]
100122f8:	0032      	movs	r2, r6
100122fa:	9809      	ldr	r0, [sp, #36]	; 0x24
100122fc:	f7ff fd58 	bl	10011db0 <__cvt>
10012300:	0005      	movs	r5, r0
10012302:	9b11      	ldr	r3, [sp, #68]	; 0x44
10012304:	1cda      	adds	r2, r3, #3
10012306:	db02      	blt.n	1001230e <_printf_float+0x432>
10012308:	6862      	ldr	r2, [r4, #4]
1001230a:	4293      	cmp	r3, r2
1001230c:	dd1c      	ble.n	10012348 <_printf_float+0x46c>
1001230e:	3f02      	subs	r7, #2
10012310:	b2ff      	uxtb	r7, r7
10012312:	e667      	b.n	10011fe4 <_printf_float+0x108>
10012314:	3301      	adds	r3, #1
10012316:	6123      	str	r3, [r4, #16]
10012318:	e67a      	b.n	10012010 <_printf_float+0x134>
1001231a:	2f66      	cmp	r7, #102	; 0x66
1001231c:	d115      	bne.n	1001234a <_printf_float+0x46e>
1001231e:	6863      	ldr	r3, [r4, #4]
10012320:	2900      	cmp	r1, #0
10012322:	dd09      	ble.n	10012338 <_printf_float+0x45c>
10012324:	6121      	str	r1, [r4, #16]
10012326:	2b00      	cmp	r3, #0
10012328:	d102      	bne.n	10012330 <_printf_float+0x454>
1001232a:	6822      	ldr	r2, [r4, #0]
1001232c:	07d2      	lsls	r2, r2, #31
1001232e:	d51e      	bpl.n	1001236e <_printf_float+0x492>
10012330:	3301      	adds	r3, #1
10012332:	1859      	adds	r1, r3, r1
10012334:	6121      	str	r1, [r4, #16]
10012336:	e01a      	b.n	1001236e <_printf_float+0x492>
10012338:	2b00      	cmp	r3, #0
1001233a:	d103      	bne.n	10012344 <_printf_float+0x468>
1001233c:	2201      	movs	r2, #1
1001233e:	6821      	ldr	r1, [r4, #0]
10012340:	4211      	tst	r1, r2
10012342:	d013      	beq.n	1001236c <_printf_float+0x490>
10012344:	1c9a      	adds	r2, r3, #2
10012346:	e011      	b.n	1001236c <_printf_float+0x490>
10012348:	2767      	movs	r7, #103	; 0x67
1001234a:	9b11      	ldr	r3, [sp, #68]	; 0x44
1001234c:	9a12      	ldr	r2, [sp, #72]	; 0x48
1001234e:	4293      	cmp	r3, r2
10012350:	db06      	blt.n	10012360 <_printf_float+0x484>
10012352:	6822      	ldr	r2, [r4, #0]
10012354:	6123      	str	r3, [r4, #16]
10012356:	07d2      	lsls	r2, r2, #31
10012358:	d509      	bpl.n	1001236e <_printf_float+0x492>
1001235a:	3301      	adds	r3, #1
1001235c:	6123      	str	r3, [r4, #16]
1001235e:	e006      	b.n	1001236e <_printf_float+0x492>
10012360:	2101      	movs	r1, #1
10012362:	2b00      	cmp	r3, #0
10012364:	dc01      	bgt.n	1001236a <_printf_float+0x48e>
10012366:	1849      	adds	r1, r1, r1
10012368:	1ac9      	subs	r1, r1, r3
1001236a:	188a      	adds	r2, r1, r2
1001236c:	6122      	str	r2, [r4, #16]
1001236e:	9b11      	ldr	r3, [sp, #68]	; 0x44
10012370:	2600      	movs	r6, #0
10012372:	65a3      	str	r3, [r4, #88]	; 0x58
10012374:	e64c      	b.n	10012010 <_printf_float+0x134>
10012376:	b015      	add	sp, #84	; 0x54
10012378:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001237a:	46c0      	nop			; (mov r8, r8)

1001237c <_printf_common>:
1001237c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1001237e:	0017      	movs	r7, r2
10012380:	9301      	str	r3, [sp, #4]
10012382:	688a      	ldr	r2, [r1, #8]
10012384:	690b      	ldr	r3, [r1, #16]
10012386:	9000      	str	r0, [sp, #0]
10012388:	000c      	movs	r4, r1
1001238a:	4293      	cmp	r3, r2
1001238c:	da00      	bge.n	10012390 <_printf_common+0x14>
1001238e:	0013      	movs	r3, r2
10012390:	0022      	movs	r2, r4
10012392:	603b      	str	r3, [r7, #0]
10012394:	3243      	adds	r2, #67	; 0x43
10012396:	7812      	ldrb	r2, [r2, #0]
10012398:	2a00      	cmp	r2, #0
1001239a:	d001      	beq.n	100123a0 <_printf_common+0x24>
1001239c:	3301      	adds	r3, #1
1001239e:	603b      	str	r3, [r7, #0]
100123a0:	6823      	ldr	r3, [r4, #0]
100123a2:	069b      	lsls	r3, r3, #26
100123a4:	d502      	bpl.n	100123ac <_printf_common+0x30>
100123a6:	683b      	ldr	r3, [r7, #0]
100123a8:	3302      	adds	r3, #2
100123aa:	603b      	str	r3, [r7, #0]
100123ac:	2506      	movs	r5, #6
100123ae:	6823      	ldr	r3, [r4, #0]
100123b0:	401d      	ands	r5, r3
100123b2:	d01e      	beq.n	100123f2 <_printf_common+0x76>
100123b4:	0023      	movs	r3, r4
100123b6:	3343      	adds	r3, #67	; 0x43
100123b8:	781b      	ldrb	r3, [r3, #0]
100123ba:	1e5a      	subs	r2, r3, #1
100123bc:	4193      	sbcs	r3, r2
100123be:	6822      	ldr	r2, [r4, #0]
100123c0:	0692      	lsls	r2, r2, #26
100123c2:	d51c      	bpl.n	100123fe <_printf_common+0x82>
100123c4:	2030      	movs	r0, #48	; 0x30
100123c6:	18e1      	adds	r1, r4, r3
100123c8:	3143      	adds	r1, #67	; 0x43
100123ca:	7008      	strb	r0, [r1, #0]
100123cc:	0021      	movs	r1, r4
100123ce:	1c5a      	adds	r2, r3, #1
100123d0:	3145      	adds	r1, #69	; 0x45
100123d2:	7809      	ldrb	r1, [r1, #0]
100123d4:	18a2      	adds	r2, r4, r2
100123d6:	3243      	adds	r2, #67	; 0x43
100123d8:	3302      	adds	r3, #2
100123da:	7011      	strb	r1, [r2, #0]
100123dc:	e00f      	b.n	100123fe <_printf_common+0x82>
100123de:	0022      	movs	r2, r4
100123e0:	2301      	movs	r3, #1
100123e2:	3219      	adds	r2, #25
100123e4:	9901      	ldr	r1, [sp, #4]
100123e6:	9800      	ldr	r0, [sp, #0]
100123e8:	9e08      	ldr	r6, [sp, #32]
100123ea:	47b0      	blx	r6
100123ec:	1c43      	adds	r3, r0, #1
100123ee:	d00e      	beq.n	1001240e <_printf_common+0x92>
100123f0:	3501      	adds	r5, #1
100123f2:	68e3      	ldr	r3, [r4, #12]
100123f4:	683a      	ldr	r2, [r7, #0]
100123f6:	1a9b      	subs	r3, r3, r2
100123f8:	429d      	cmp	r5, r3
100123fa:	dbf0      	blt.n	100123de <_printf_common+0x62>
100123fc:	e7da      	b.n	100123b4 <_printf_common+0x38>
100123fe:	0022      	movs	r2, r4
10012400:	9901      	ldr	r1, [sp, #4]
10012402:	3243      	adds	r2, #67	; 0x43
10012404:	9800      	ldr	r0, [sp, #0]
10012406:	9d08      	ldr	r5, [sp, #32]
10012408:	47a8      	blx	r5
1001240a:	1c43      	adds	r3, r0, #1
1001240c:	d102      	bne.n	10012414 <_printf_common+0x98>
1001240e:	2001      	movs	r0, #1
10012410:	4240      	negs	r0, r0
10012412:	e020      	b.n	10012456 <_printf_common+0xda>
10012414:	2306      	movs	r3, #6
10012416:	6820      	ldr	r0, [r4, #0]
10012418:	68e1      	ldr	r1, [r4, #12]
1001241a:	683a      	ldr	r2, [r7, #0]
1001241c:	4003      	ands	r3, r0
1001241e:	2500      	movs	r5, #0
10012420:	2b04      	cmp	r3, #4
10012422:	d103      	bne.n	1001242c <_printf_common+0xb0>
10012424:	1a8d      	subs	r5, r1, r2
10012426:	43eb      	mvns	r3, r5
10012428:	17db      	asrs	r3, r3, #31
1001242a:	401d      	ands	r5, r3
1001242c:	68a3      	ldr	r3, [r4, #8]
1001242e:	6922      	ldr	r2, [r4, #16]
10012430:	4293      	cmp	r3, r2
10012432:	dd01      	ble.n	10012438 <_printf_common+0xbc>
10012434:	1a9b      	subs	r3, r3, r2
10012436:	18ed      	adds	r5, r5, r3
10012438:	2700      	movs	r7, #0
1001243a:	42bd      	cmp	r5, r7
1001243c:	d00a      	beq.n	10012454 <_printf_common+0xd8>
1001243e:	0022      	movs	r2, r4
10012440:	2301      	movs	r3, #1
10012442:	321a      	adds	r2, #26
10012444:	9901      	ldr	r1, [sp, #4]
10012446:	9800      	ldr	r0, [sp, #0]
10012448:	9e08      	ldr	r6, [sp, #32]
1001244a:	47b0      	blx	r6
1001244c:	1c43      	adds	r3, r0, #1
1001244e:	d0de      	beq.n	1001240e <_printf_common+0x92>
10012450:	3701      	adds	r7, #1
10012452:	e7f2      	b.n	1001243a <_printf_common+0xbe>
10012454:	2000      	movs	r0, #0
10012456:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

10012458 <_printf_i>:
10012458:	b5f0      	push	{r4, r5, r6, r7, lr}
1001245a:	b08b      	sub	sp, #44	; 0x2c
1001245c:	9206      	str	r2, [sp, #24]
1001245e:	000a      	movs	r2, r1
10012460:	3243      	adds	r2, #67	; 0x43
10012462:	9307      	str	r3, [sp, #28]
10012464:	9005      	str	r0, [sp, #20]
10012466:	9204      	str	r2, [sp, #16]
10012468:	7e0a      	ldrb	r2, [r1, #24]
1001246a:	000c      	movs	r4, r1
1001246c:	9b10      	ldr	r3, [sp, #64]	; 0x40
1001246e:	2a6e      	cmp	r2, #110	; 0x6e
10012470:	d100      	bne.n	10012474 <_printf_i+0x1c>
10012472:	e0ab      	b.n	100125cc <_printf_i+0x174>
10012474:	d811      	bhi.n	1001249a <_printf_i+0x42>
10012476:	2a63      	cmp	r2, #99	; 0x63
10012478:	d022      	beq.n	100124c0 <_printf_i+0x68>
1001247a:	d809      	bhi.n	10012490 <_printf_i+0x38>
1001247c:	2a00      	cmp	r2, #0
1001247e:	d100      	bne.n	10012482 <_printf_i+0x2a>
10012480:	e0b5      	b.n	100125ee <_printf_i+0x196>
10012482:	2a58      	cmp	r2, #88	; 0x58
10012484:	d000      	beq.n	10012488 <_printf_i+0x30>
10012486:	e0c5      	b.n	10012614 <_printf_i+0x1bc>
10012488:	3145      	adds	r1, #69	; 0x45
1001248a:	700a      	strb	r2, [r1, #0]
1001248c:	4a81      	ldr	r2, [pc, #516]	; (10012694 <_printf_i+0x23c>)
1001248e:	e04f      	b.n	10012530 <_printf_i+0xd8>
10012490:	2a64      	cmp	r2, #100	; 0x64
10012492:	d01d      	beq.n	100124d0 <_printf_i+0x78>
10012494:	2a69      	cmp	r2, #105	; 0x69
10012496:	d01b      	beq.n	100124d0 <_printf_i+0x78>
10012498:	e0bc      	b.n	10012614 <_printf_i+0x1bc>
1001249a:	2a73      	cmp	r2, #115	; 0x73
1001249c:	d100      	bne.n	100124a0 <_printf_i+0x48>
1001249e:	e0aa      	b.n	100125f6 <_printf_i+0x19e>
100124a0:	d809      	bhi.n	100124b6 <_printf_i+0x5e>
100124a2:	2a6f      	cmp	r2, #111	; 0x6f
100124a4:	d029      	beq.n	100124fa <_printf_i+0xa2>
100124a6:	2a70      	cmp	r2, #112	; 0x70
100124a8:	d000      	beq.n	100124ac <_printf_i+0x54>
100124aa:	e0b3      	b.n	10012614 <_printf_i+0x1bc>
100124ac:	2220      	movs	r2, #32
100124ae:	6809      	ldr	r1, [r1, #0]
100124b0:	430a      	orrs	r2, r1
100124b2:	6022      	str	r2, [r4, #0]
100124b4:	e037      	b.n	10012526 <_printf_i+0xce>
100124b6:	2a75      	cmp	r2, #117	; 0x75
100124b8:	d01f      	beq.n	100124fa <_printf_i+0xa2>
100124ba:	2a78      	cmp	r2, #120	; 0x78
100124bc:	d033      	beq.n	10012526 <_printf_i+0xce>
100124be:	e0a9      	b.n	10012614 <_printf_i+0x1bc>
100124c0:	000e      	movs	r6, r1
100124c2:	681a      	ldr	r2, [r3, #0]
100124c4:	3642      	adds	r6, #66	; 0x42
100124c6:	1d11      	adds	r1, r2, #4
100124c8:	6019      	str	r1, [r3, #0]
100124ca:	6813      	ldr	r3, [r2, #0]
100124cc:	7033      	strb	r3, [r6, #0]
100124ce:	e0a4      	b.n	1001261a <_printf_i+0x1c2>
100124d0:	6821      	ldr	r1, [r4, #0]
100124d2:	681a      	ldr	r2, [r3, #0]
100124d4:	0608      	lsls	r0, r1, #24
100124d6:	d406      	bmi.n	100124e6 <_printf_i+0x8e>
100124d8:	0649      	lsls	r1, r1, #25
100124da:	d504      	bpl.n	100124e6 <_printf_i+0x8e>
100124dc:	1d11      	adds	r1, r2, #4
100124de:	6019      	str	r1, [r3, #0]
100124e0:	2300      	movs	r3, #0
100124e2:	5ed5      	ldrsh	r5, [r2, r3]
100124e4:	e002      	b.n	100124ec <_printf_i+0x94>
100124e6:	1d11      	adds	r1, r2, #4
100124e8:	6019      	str	r1, [r3, #0]
100124ea:	6815      	ldr	r5, [r2, #0]
100124ec:	2d00      	cmp	r5, #0
100124ee:	da3b      	bge.n	10012568 <_printf_i+0x110>
100124f0:	232d      	movs	r3, #45	; 0x2d
100124f2:	9a04      	ldr	r2, [sp, #16]
100124f4:	426d      	negs	r5, r5
100124f6:	7013      	strb	r3, [r2, #0]
100124f8:	e036      	b.n	10012568 <_printf_i+0x110>
100124fa:	6821      	ldr	r1, [r4, #0]
100124fc:	681a      	ldr	r2, [r3, #0]
100124fe:	0608      	lsls	r0, r1, #24
10012500:	d406      	bmi.n	10012510 <_printf_i+0xb8>
10012502:	0649      	lsls	r1, r1, #25
10012504:	d504      	bpl.n	10012510 <_printf_i+0xb8>
10012506:	6815      	ldr	r5, [r2, #0]
10012508:	1d11      	adds	r1, r2, #4
1001250a:	6019      	str	r1, [r3, #0]
1001250c:	b2ad      	uxth	r5, r5
1001250e:	e002      	b.n	10012516 <_printf_i+0xbe>
10012510:	1d11      	adds	r1, r2, #4
10012512:	6019      	str	r1, [r3, #0]
10012514:	6815      	ldr	r5, [r2, #0]
10012516:	4b5f      	ldr	r3, [pc, #380]	; (10012694 <_printf_i+0x23c>)
10012518:	7e22      	ldrb	r2, [r4, #24]
1001251a:	9303      	str	r3, [sp, #12]
1001251c:	2708      	movs	r7, #8
1001251e:	2a6f      	cmp	r2, #111	; 0x6f
10012520:	d01d      	beq.n	1001255e <_printf_i+0x106>
10012522:	270a      	movs	r7, #10
10012524:	e01b      	b.n	1001255e <_printf_i+0x106>
10012526:	0022      	movs	r2, r4
10012528:	2178      	movs	r1, #120	; 0x78
1001252a:	3245      	adds	r2, #69	; 0x45
1001252c:	7011      	strb	r1, [r2, #0]
1001252e:	4a5a      	ldr	r2, [pc, #360]	; (10012698 <_printf_i+0x240>)
10012530:	6819      	ldr	r1, [r3, #0]
10012532:	9203      	str	r2, [sp, #12]
10012534:	1d08      	adds	r0, r1, #4
10012536:	6822      	ldr	r2, [r4, #0]
10012538:	6018      	str	r0, [r3, #0]
1001253a:	680d      	ldr	r5, [r1, #0]
1001253c:	0610      	lsls	r0, r2, #24
1001253e:	d402      	bmi.n	10012546 <_printf_i+0xee>
10012540:	0650      	lsls	r0, r2, #25
10012542:	d500      	bpl.n	10012546 <_printf_i+0xee>
10012544:	b2ad      	uxth	r5, r5
10012546:	07d3      	lsls	r3, r2, #31
10012548:	d502      	bpl.n	10012550 <_printf_i+0xf8>
1001254a:	2320      	movs	r3, #32
1001254c:	431a      	orrs	r2, r3
1001254e:	6022      	str	r2, [r4, #0]
10012550:	2710      	movs	r7, #16
10012552:	2d00      	cmp	r5, #0
10012554:	d103      	bne.n	1001255e <_printf_i+0x106>
10012556:	2320      	movs	r3, #32
10012558:	6822      	ldr	r2, [r4, #0]
1001255a:	439a      	bics	r2, r3
1001255c:	6022      	str	r2, [r4, #0]
1001255e:	0023      	movs	r3, r4
10012560:	2200      	movs	r2, #0
10012562:	3343      	adds	r3, #67	; 0x43
10012564:	701a      	strb	r2, [r3, #0]
10012566:	e002      	b.n	1001256e <_printf_i+0x116>
10012568:	270a      	movs	r7, #10
1001256a:	4b4a      	ldr	r3, [pc, #296]	; (10012694 <_printf_i+0x23c>)
1001256c:	9303      	str	r3, [sp, #12]
1001256e:	6863      	ldr	r3, [r4, #4]
10012570:	60a3      	str	r3, [r4, #8]
10012572:	2b00      	cmp	r3, #0
10012574:	db09      	blt.n	1001258a <_printf_i+0x132>
10012576:	2204      	movs	r2, #4
10012578:	6821      	ldr	r1, [r4, #0]
1001257a:	4391      	bics	r1, r2
1001257c:	6021      	str	r1, [r4, #0]
1001257e:	2d00      	cmp	r5, #0
10012580:	d105      	bne.n	1001258e <_printf_i+0x136>
10012582:	9e04      	ldr	r6, [sp, #16]
10012584:	2b00      	cmp	r3, #0
10012586:	d011      	beq.n	100125ac <_printf_i+0x154>
10012588:	e07b      	b.n	10012682 <_printf_i+0x22a>
1001258a:	2d00      	cmp	r5, #0
1001258c:	d079      	beq.n	10012682 <_printf_i+0x22a>
1001258e:	9e04      	ldr	r6, [sp, #16]
10012590:	0028      	movs	r0, r5
10012592:	0039      	movs	r1, r7
10012594:	f002 f90c 	bl	100147b0 <__aeabi_uidivmod>
10012598:	9b03      	ldr	r3, [sp, #12]
1001259a:	3e01      	subs	r6, #1
1001259c:	5c5b      	ldrb	r3, [r3, r1]
1001259e:	0028      	movs	r0, r5
100125a0:	7033      	strb	r3, [r6, #0]
100125a2:	0039      	movs	r1, r7
100125a4:	f002 f87e 	bl	100146a4 <__aeabi_uidiv>
100125a8:	1e05      	subs	r5, r0, #0
100125aa:	d1f1      	bne.n	10012590 <_printf_i+0x138>
100125ac:	2f08      	cmp	r7, #8
100125ae:	d109      	bne.n	100125c4 <_printf_i+0x16c>
100125b0:	6823      	ldr	r3, [r4, #0]
100125b2:	07db      	lsls	r3, r3, #31
100125b4:	d506      	bpl.n	100125c4 <_printf_i+0x16c>
100125b6:	6863      	ldr	r3, [r4, #4]
100125b8:	6922      	ldr	r2, [r4, #16]
100125ba:	4293      	cmp	r3, r2
100125bc:	dc02      	bgt.n	100125c4 <_printf_i+0x16c>
100125be:	2330      	movs	r3, #48	; 0x30
100125c0:	3e01      	subs	r6, #1
100125c2:	7033      	strb	r3, [r6, #0]
100125c4:	9b04      	ldr	r3, [sp, #16]
100125c6:	1b9b      	subs	r3, r3, r6
100125c8:	6123      	str	r3, [r4, #16]
100125ca:	e02b      	b.n	10012624 <_printf_i+0x1cc>
100125cc:	6809      	ldr	r1, [r1, #0]
100125ce:	681a      	ldr	r2, [r3, #0]
100125d0:	0608      	lsls	r0, r1, #24
100125d2:	d407      	bmi.n	100125e4 <_printf_i+0x18c>
100125d4:	0649      	lsls	r1, r1, #25
100125d6:	d505      	bpl.n	100125e4 <_printf_i+0x18c>
100125d8:	1d11      	adds	r1, r2, #4
100125da:	6019      	str	r1, [r3, #0]
100125dc:	6813      	ldr	r3, [r2, #0]
100125de:	8aa2      	ldrh	r2, [r4, #20]
100125e0:	801a      	strh	r2, [r3, #0]
100125e2:	e004      	b.n	100125ee <_printf_i+0x196>
100125e4:	1d11      	adds	r1, r2, #4
100125e6:	6019      	str	r1, [r3, #0]
100125e8:	6813      	ldr	r3, [r2, #0]
100125ea:	6962      	ldr	r2, [r4, #20]
100125ec:	601a      	str	r2, [r3, #0]
100125ee:	2300      	movs	r3, #0
100125f0:	9e04      	ldr	r6, [sp, #16]
100125f2:	6123      	str	r3, [r4, #16]
100125f4:	e016      	b.n	10012624 <_printf_i+0x1cc>
100125f6:	681a      	ldr	r2, [r3, #0]
100125f8:	1d11      	adds	r1, r2, #4
100125fa:	6019      	str	r1, [r3, #0]
100125fc:	6816      	ldr	r6, [r2, #0]
100125fe:	2100      	movs	r1, #0
10012600:	6862      	ldr	r2, [r4, #4]
10012602:	0030      	movs	r0, r6
10012604:	f001 fafe 	bl	10013c04 <memchr>
10012608:	2800      	cmp	r0, #0
1001260a:	d001      	beq.n	10012610 <_printf_i+0x1b8>
1001260c:	1b80      	subs	r0, r0, r6
1001260e:	6060      	str	r0, [r4, #4]
10012610:	6863      	ldr	r3, [r4, #4]
10012612:	e003      	b.n	1001261c <_printf_i+0x1c4>
10012614:	0026      	movs	r6, r4
10012616:	3642      	adds	r6, #66	; 0x42
10012618:	7032      	strb	r2, [r6, #0]
1001261a:	2301      	movs	r3, #1
1001261c:	6123      	str	r3, [r4, #16]
1001261e:	2300      	movs	r3, #0
10012620:	9a04      	ldr	r2, [sp, #16]
10012622:	7013      	strb	r3, [r2, #0]
10012624:	9b07      	ldr	r3, [sp, #28]
10012626:	aa09      	add	r2, sp, #36	; 0x24
10012628:	9300      	str	r3, [sp, #0]
1001262a:	0021      	movs	r1, r4
1001262c:	9b06      	ldr	r3, [sp, #24]
1001262e:	9805      	ldr	r0, [sp, #20]
10012630:	f7ff fea4 	bl	1001237c <_printf_common>
10012634:	1c43      	adds	r3, r0, #1
10012636:	d102      	bne.n	1001263e <_printf_i+0x1e6>
10012638:	2001      	movs	r0, #1
1001263a:	4240      	negs	r0, r0
1001263c:	e027      	b.n	1001268e <_printf_i+0x236>
1001263e:	6923      	ldr	r3, [r4, #16]
10012640:	0032      	movs	r2, r6
10012642:	9906      	ldr	r1, [sp, #24]
10012644:	9805      	ldr	r0, [sp, #20]
10012646:	9d07      	ldr	r5, [sp, #28]
10012648:	47a8      	blx	r5
1001264a:	1c43      	adds	r3, r0, #1
1001264c:	d0f4      	beq.n	10012638 <_printf_i+0x1e0>
1001264e:	6823      	ldr	r3, [r4, #0]
10012650:	2500      	movs	r5, #0
10012652:	079b      	lsls	r3, r3, #30
10012654:	d40f      	bmi.n	10012676 <_printf_i+0x21e>
10012656:	9b09      	ldr	r3, [sp, #36]	; 0x24
10012658:	68e0      	ldr	r0, [r4, #12]
1001265a:	4298      	cmp	r0, r3
1001265c:	da17      	bge.n	1001268e <_printf_i+0x236>
1001265e:	0018      	movs	r0, r3
10012660:	e015      	b.n	1001268e <_printf_i+0x236>
10012662:	0022      	movs	r2, r4
10012664:	2301      	movs	r3, #1
10012666:	3219      	adds	r2, #25
10012668:	9906      	ldr	r1, [sp, #24]
1001266a:	9805      	ldr	r0, [sp, #20]
1001266c:	9e07      	ldr	r6, [sp, #28]
1001266e:	47b0      	blx	r6
10012670:	1c43      	adds	r3, r0, #1
10012672:	d0e1      	beq.n	10012638 <_printf_i+0x1e0>
10012674:	3501      	adds	r5, #1
10012676:	68e3      	ldr	r3, [r4, #12]
10012678:	9a09      	ldr	r2, [sp, #36]	; 0x24
1001267a:	1a9b      	subs	r3, r3, r2
1001267c:	429d      	cmp	r5, r3
1001267e:	dbf0      	blt.n	10012662 <_printf_i+0x20a>
10012680:	e7e9      	b.n	10012656 <_printf_i+0x1fe>
10012682:	0026      	movs	r6, r4
10012684:	9b03      	ldr	r3, [sp, #12]
10012686:	3642      	adds	r6, #66	; 0x42
10012688:	781b      	ldrb	r3, [r3, #0]
1001268a:	7033      	strb	r3, [r6, #0]
1001268c:	e78e      	b.n	100125ac <_printf_i+0x154>
1001268e:	b00b      	add	sp, #44	; 0x2c
10012690:	bdf0      	pop	{r4, r5, r6, r7, pc}
10012692:	46c0      	nop			; (mov r8, r8)
10012694:	10017b62 	.word	0x10017b62
10012698:	10017b73 	.word	0x10017b73

1001269c <iprintf>:
1001269c:	b40f      	push	{r0, r1, r2, r3}
1001269e:	4b0b      	ldr	r3, [pc, #44]	; (100126cc <iprintf+0x30>)
100126a0:	b513      	push	{r0, r1, r4, lr}
100126a2:	681c      	ldr	r4, [r3, #0]
100126a4:	2c00      	cmp	r4, #0
100126a6:	d005      	beq.n	100126b4 <iprintf+0x18>
100126a8:	69a3      	ldr	r3, [r4, #24]
100126aa:	2b00      	cmp	r3, #0
100126ac:	d102      	bne.n	100126b4 <iprintf+0x18>
100126ae:	0020      	movs	r0, r4
100126b0:	f001 f9ac 	bl	10013a0c <__sinit>
100126b4:	ab05      	add	r3, sp, #20
100126b6:	9a04      	ldr	r2, [sp, #16]
100126b8:	68a1      	ldr	r1, [r4, #8]
100126ba:	0020      	movs	r0, r4
100126bc:	9301      	str	r3, [sp, #4]
100126be:	f001 fdcd 	bl	1001425c <_vfiprintf_r>
100126c2:	bc16      	pop	{r1, r2, r4}
100126c4:	bc08      	pop	{r3}
100126c6:	b004      	add	sp, #16
100126c8:	4718      	bx	r3
100126ca:	46c0      	nop			; (mov r8, r8)
100126cc:	10017edc 	.word	0x10017edc

100126d0 <putchar>:
100126d0:	4b08      	ldr	r3, [pc, #32]	; (100126f4 <putchar+0x24>)
100126d2:	b570      	push	{r4, r5, r6, lr}
100126d4:	681c      	ldr	r4, [r3, #0]
100126d6:	0005      	movs	r5, r0
100126d8:	2c00      	cmp	r4, #0
100126da:	d005      	beq.n	100126e8 <putchar+0x18>
100126dc:	69a3      	ldr	r3, [r4, #24]
100126de:	2b00      	cmp	r3, #0
100126e0:	d102      	bne.n	100126e8 <putchar+0x18>
100126e2:	0020      	movs	r0, r4
100126e4:	f001 f992 	bl	10013a0c <__sinit>
100126e8:	0029      	movs	r1, r5
100126ea:	68a2      	ldr	r2, [r4, #8]
100126ec:	0020      	movs	r0, r4
100126ee:	f001 fed1 	bl	10014494 <_putc_r>
100126f2:	bd70      	pop	{r4, r5, r6, pc}
100126f4:	10017edc 	.word	0x10017edc

100126f8 <_puts_r>:
100126f8:	b570      	push	{r4, r5, r6, lr}
100126fa:	0005      	movs	r5, r0
100126fc:	000e      	movs	r6, r1
100126fe:	2800      	cmp	r0, #0
10012700:	d004      	beq.n	1001270c <_puts_r+0x14>
10012702:	6983      	ldr	r3, [r0, #24]
10012704:	2b00      	cmp	r3, #0
10012706:	d101      	bne.n	1001270c <_puts_r+0x14>
10012708:	f001 f980 	bl	10013a0c <__sinit>
1001270c:	69ab      	ldr	r3, [r5, #24]
1001270e:	68ac      	ldr	r4, [r5, #8]
10012710:	2b00      	cmp	r3, #0
10012712:	d102      	bne.n	1001271a <_puts_r+0x22>
10012714:	0028      	movs	r0, r5
10012716:	f001 f979 	bl	10013a0c <__sinit>
1001271a:	4b25      	ldr	r3, [pc, #148]	; (100127b0 <_puts_r+0xb8>)
1001271c:	429c      	cmp	r4, r3
1001271e:	d101      	bne.n	10012724 <_puts_r+0x2c>
10012720:	686c      	ldr	r4, [r5, #4]
10012722:	e008      	b.n	10012736 <_puts_r+0x3e>
10012724:	4b23      	ldr	r3, [pc, #140]	; (100127b4 <_puts_r+0xbc>)
10012726:	429c      	cmp	r4, r3
10012728:	d101      	bne.n	1001272e <_puts_r+0x36>
1001272a:	68ac      	ldr	r4, [r5, #8]
1001272c:	e003      	b.n	10012736 <_puts_r+0x3e>
1001272e:	4b22      	ldr	r3, [pc, #136]	; (100127b8 <_puts_r+0xc0>)
10012730:	429c      	cmp	r4, r3
10012732:	d100      	bne.n	10012736 <_puts_r+0x3e>
10012734:	68ec      	ldr	r4, [r5, #12]
10012736:	89a3      	ldrh	r3, [r4, #12]
10012738:	071b      	lsls	r3, r3, #28
1001273a:	d502      	bpl.n	10012742 <_puts_r+0x4a>
1001273c:	6923      	ldr	r3, [r4, #16]
1001273e:	2b00      	cmp	r3, #0
10012740:	d111      	bne.n	10012766 <_puts_r+0x6e>
10012742:	0021      	movs	r1, r4
10012744:	0028      	movs	r0, r5
10012746:	f000 f9ab 	bl	10012aa0 <__swsetup_r>
1001274a:	2800      	cmp	r0, #0
1001274c:	d00b      	beq.n	10012766 <_puts_r+0x6e>
1001274e:	2001      	movs	r0, #1
10012750:	4240      	negs	r0, r0
10012752:	e02b      	b.n	100127ac <_puts_r+0xb4>
10012754:	3b01      	subs	r3, #1
10012756:	3601      	adds	r6, #1
10012758:	60a3      	str	r3, [r4, #8]
1001275a:	2b00      	cmp	r3, #0
1001275c:	db08      	blt.n	10012770 <_puts_r+0x78>
1001275e:	6823      	ldr	r3, [r4, #0]
10012760:	1c5a      	adds	r2, r3, #1
10012762:	6022      	str	r2, [r4, #0]
10012764:	7019      	strb	r1, [r3, #0]
10012766:	7831      	ldrb	r1, [r6, #0]
10012768:	68a3      	ldr	r3, [r4, #8]
1001276a:	2900      	cmp	r1, #0
1001276c:	d1f2      	bne.n	10012754 <_puts_r+0x5c>
1001276e:	e00b      	b.n	10012788 <_puts_r+0x90>
10012770:	69a2      	ldr	r2, [r4, #24]
10012772:	4293      	cmp	r3, r2
10012774:	db01      	blt.n	1001277a <_puts_r+0x82>
10012776:	290a      	cmp	r1, #10
10012778:	d1f1      	bne.n	1001275e <_puts_r+0x66>
1001277a:	0022      	movs	r2, r4
1001277c:	0028      	movs	r0, r5
1001277e:	f000 f937 	bl	100129f0 <__swbuf_r>
10012782:	1c43      	adds	r3, r0, #1
10012784:	d1ef      	bne.n	10012766 <_puts_r+0x6e>
10012786:	e7e2      	b.n	1001274e <_puts_r+0x56>
10012788:	3b01      	subs	r3, #1
1001278a:	60a3      	str	r3, [r4, #8]
1001278c:	2b00      	cmp	r3, #0
1001278e:	da08      	bge.n	100127a2 <_puts_r+0xaa>
10012790:	0022      	movs	r2, r4
10012792:	310a      	adds	r1, #10
10012794:	0028      	movs	r0, r5
10012796:	f000 f92b 	bl	100129f0 <__swbuf_r>
1001279a:	1c43      	adds	r3, r0, #1
1001279c:	d0d7      	beq.n	1001274e <_puts_r+0x56>
1001279e:	200a      	movs	r0, #10
100127a0:	e004      	b.n	100127ac <_puts_r+0xb4>
100127a2:	200a      	movs	r0, #10
100127a4:	6823      	ldr	r3, [r4, #0]
100127a6:	1c5a      	adds	r2, r3, #1
100127a8:	6022      	str	r2, [r4, #0]
100127aa:	7018      	strb	r0, [r3, #0]
100127ac:	bd70      	pop	{r4, r5, r6, pc}
100127ae:	46c0      	nop			; (mov r8, r8)
100127b0:	10017b94 	.word	0x10017b94
100127b4:	10017bb4 	.word	0x10017bb4
100127b8:	10017bd4 	.word	0x10017bd4

100127bc <puts>:
100127bc:	b510      	push	{r4, lr}
100127be:	4b03      	ldr	r3, [pc, #12]	; (100127cc <puts+0x10>)
100127c0:	0001      	movs	r1, r0
100127c2:	6818      	ldr	r0, [r3, #0]
100127c4:	f7ff ff98 	bl	100126f8 <_puts_r>
100127c8:	bd10      	pop	{r4, pc}
100127ca:	46c0      	nop			; (mov r8, r8)
100127cc:	10017edc 	.word	0x10017edc

100127d0 <rand>:
100127d0:	4b15      	ldr	r3, [pc, #84]	; (10012828 <rand+0x58>)
100127d2:	b510      	push	{r4, lr}
100127d4:	681c      	ldr	r4, [r3, #0]
100127d6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
100127d8:	2b00      	cmp	r3, #0
100127da:	d115      	bne.n	10012808 <rand+0x38>
100127dc:	2018      	movs	r0, #24
100127de:	f7ff fa21 	bl	10011c24 <malloc>
100127e2:	4b12      	ldr	r3, [pc, #72]	; (1001282c <rand+0x5c>)
100127e4:	63a0      	str	r0, [r4, #56]	; 0x38
100127e6:	8003      	strh	r3, [r0, #0]
100127e8:	4b11      	ldr	r3, [pc, #68]	; (10012830 <rand+0x60>)
100127ea:	2201      	movs	r2, #1
100127ec:	8043      	strh	r3, [r0, #2]
100127ee:	4b11      	ldr	r3, [pc, #68]	; (10012834 <rand+0x64>)
100127f0:	8083      	strh	r3, [r0, #4]
100127f2:	4b11      	ldr	r3, [pc, #68]	; (10012838 <rand+0x68>)
100127f4:	80c3      	strh	r3, [r0, #6]
100127f6:	4b11      	ldr	r3, [pc, #68]	; (1001283c <rand+0x6c>)
100127f8:	8103      	strh	r3, [r0, #8]
100127fa:	2305      	movs	r3, #5
100127fc:	8143      	strh	r3, [r0, #10]
100127fe:	3306      	adds	r3, #6
10012800:	8183      	strh	r3, [r0, #12]
10012802:	2300      	movs	r3, #0
10012804:	6102      	str	r2, [r0, #16]
10012806:	6143      	str	r3, [r0, #20]
10012808:	6ba4      	ldr	r4, [r4, #56]	; 0x38
1001280a:	4a0d      	ldr	r2, [pc, #52]	; (10012840 <rand+0x70>)
1001280c:	6920      	ldr	r0, [r4, #16]
1001280e:	6961      	ldr	r1, [r4, #20]
10012810:	4b0c      	ldr	r3, [pc, #48]	; (10012844 <rand+0x74>)
10012812:	f002 f8fb 	bl	10014a0c <__aeabi_lmul>
10012816:	2201      	movs	r2, #1
10012818:	2300      	movs	r3, #0
1001281a:	1880      	adds	r0, r0, r2
1001281c:	4159      	adcs	r1, r3
1001281e:	6120      	str	r0, [r4, #16]
10012820:	6161      	str	r1, [r4, #20]
10012822:	0048      	lsls	r0, r1, #1
10012824:	0840      	lsrs	r0, r0, #1
10012826:	bd10      	pop	{r4, pc}
10012828:	10017edc 	.word	0x10017edc
1001282c:	0000330e 	.word	0x0000330e
10012830:	ffffabcd 	.word	0xffffabcd
10012834:	00001234 	.word	0x00001234
10012838:	ffffe66d 	.word	0xffffe66d
1001283c:	ffffdeec 	.word	0xffffdeec
10012840:	4c957f2d 	.word	0x4c957f2d
10012844:	5851f42d 	.word	0x5851f42d

10012848 <_sbrk_r>:
10012848:	2300      	movs	r3, #0
1001284a:	b570      	push	{r4, r5, r6, lr}
1001284c:	4c06      	ldr	r4, [pc, #24]	; (10012868 <_sbrk_r+0x20>)
1001284e:	0005      	movs	r5, r0
10012850:	0008      	movs	r0, r1
10012852:	6023      	str	r3, [r4, #0]
10012854:	f7f5 fdd2 	bl	100083fc <_sbrk>
10012858:	1c43      	adds	r3, r0, #1
1001285a:	d103      	bne.n	10012864 <_sbrk_r+0x1c>
1001285c:	6823      	ldr	r3, [r4, #0]
1001285e:	2b00      	cmp	r3, #0
10012860:	d000      	beq.n	10012864 <_sbrk_r+0x1c>
10012862:	602b      	str	r3, [r5, #0]
10012864:	bd70      	pop	{r4, r5, r6, pc}
10012866:	46c0      	nop			; (mov r8, r8)
10012868:	1001ae38 	.word	0x1001ae38

1001286c <setbuf>:
1001286c:	424a      	negs	r2, r1
1001286e:	414a      	adcs	r2, r1
10012870:	2380      	movs	r3, #128	; 0x80
10012872:	b510      	push	{r4, lr}
10012874:	0052      	lsls	r2, r2, #1
10012876:	00db      	lsls	r3, r3, #3
10012878:	f000 f802 	bl	10012880 <setvbuf>
1001287c:	bd10      	pop	{r4, pc}
	...

10012880 <setvbuf>:
10012880:	b5f0      	push	{r4, r5, r6, r7, lr}
10012882:	001d      	movs	r5, r3
10012884:	4b51      	ldr	r3, [pc, #324]	; (100129cc <setvbuf+0x14c>)
10012886:	b085      	sub	sp, #20
10012888:	681e      	ldr	r6, [r3, #0]
1001288a:	0004      	movs	r4, r0
1001288c:	000f      	movs	r7, r1
1001288e:	9200      	str	r2, [sp, #0]
10012890:	2e00      	cmp	r6, #0
10012892:	d005      	beq.n	100128a0 <setvbuf+0x20>
10012894:	69b3      	ldr	r3, [r6, #24]
10012896:	2b00      	cmp	r3, #0
10012898:	d102      	bne.n	100128a0 <setvbuf+0x20>
1001289a:	0030      	movs	r0, r6
1001289c:	f001 f8b6 	bl	10013a0c <__sinit>
100128a0:	4b4b      	ldr	r3, [pc, #300]	; (100129d0 <setvbuf+0x150>)
100128a2:	429c      	cmp	r4, r3
100128a4:	d101      	bne.n	100128aa <setvbuf+0x2a>
100128a6:	6874      	ldr	r4, [r6, #4]
100128a8:	e008      	b.n	100128bc <setvbuf+0x3c>
100128aa:	4b4a      	ldr	r3, [pc, #296]	; (100129d4 <setvbuf+0x154>)
100128ac:	429c      	cmp	r4, r3
100128ae:	d101      	bne.n	100128b4 <setvbuf+0x34>
100128b0:	68b4      	ldr	r4, [r6, #8]
100128b2:	e003      	b.n	100128bc <setvbuf+0x3c>
100128b4:	4b48      	ldr	r3, [pc, #288]	; (100129d8 <setvbuf+0x158>)
100128b6:	429c      	cmp	r4, r3
100128b8:	d100      	bne.n	100128bc <setvbuf+0x3c>
100128ba:	68f4      	ldr	r4, [r6, #12]
100128bc:	9b00      	ldr	r3, [sp, #0]
100128be:	2b02      	cmp	r3, #2
100128c0:	d005      	beq.n	100128ce <setvbuf+0x4e>
100128c2:	2b01      	cmp	r3, #1
100128c4:	d900      	bls.n	100128c8 <setvbuf+0x48>
100128c6:	e07c      	b.n	100129c2 <setvbuf+0x142>
100128c8:	2d00      	cmp	r5, #0
100128ca:	da00      	bge.n	100128ce <setvbuf+0x4e>
100128cc:	e079      	b.n	100129c2 <setvbuf+0x142>
100128ce:	0021      	movs	r1, r4
100128d0:	0030      	movs	r0, r6
100128d2:	f001 f82d 	bl	10013930 <_fflush_r>
100128d6:	6b61      	ldr	r1, [r4, #52]	; 0x34
100128d8:	2900      	cmp	r1, #0
100128da:	d008      	beq.n	100128ee <setvbuf+0x6e>
100128dc:	0023      	movs	r3, r4
100128de:	3344      	adds	r3, #68	; 0x44
100128e0:	4299      	cmp	r1, r3
100128e2:	d002      	beq.n	100128ea <setvbuf+0x6a>
100128e4:	0030      	movs	r0, r6
100128e6:	f7ff f9c7 	bl	10011c78 <_free_r>
100128ea:	2300      	movs	r3, #0
100128ec:	6363      	str	r3, [r4, #52]	; 0x34
100128ee:	2300      	movs	r3, #0
100128f0:	61a3      	str	r3, [r4, #24]
100128f2:	6063      	str	r3, [r4, #4]
100128f4:	89a3      	ldrh	r3, [r4, #12]
100128f6:	061b      	lsls	r3, r3, #24
100128f8:	d503      	bpl.n	10012902 <setvbuf+0x82>
100128fa:	6921      	ldr	r1, [r4, #16]
100128fc:	0030      	movs	r0, r6
100128fe:	f7ff f9bb 	bl	10011c78 <_free_r>
10012902:	89a2      	ldrh	r2, [r4, #12]
10012904:	4b35      	ldr	r3, [pc, #212]	; (100129dc <setvbuf+0x15c>)
10012906:	4013      	ands	r3, r2
10012908:	81a3      	strh	r3, [r4, #12]
1001290a:	9b00      	ldr	r3, [sp, #0]
1001290c:	2b02      	cmp	r3, #2
1001290e:	d021      	beq.n	10012954 <setvbuf+0xd4>
10012910:	ab03      	add	r3, sp, #12
10012912:	aa02      	add	r2, sp, #8
10012914:	0021      	movs	r1, r4
10012916:	0030      	movs	r0, r6
10012918:	f001 f910 	bl	10013b3c <__swhatbuf_r>
1001291c:	89a3      	ldrh	r3, [r4, #12]
1001291e:	4318      	orrs	r0, r3
10012920:	81a0      	strh	r0, [r4, #12]
10012922:	2d00      	cmp	r5, #0
10012924:	d101      	bne.n	1001292a <setvbuf+0xaa>
10012926:	9d02      	ldr	r5, [sp, #8]
10012928:	e001      	b.n	1001292e <setvbuf+0xae>
1001292a:	2f00      	cmp	r7, #0
1001292c:	d125      	bne.n	1001297a <setvbuf+0xfa>
1001292e:	0028      	movs	r0, r5
10012930:	f7ff f978 	bl	10011c24 <malloc>
10012934:	9501      	str	r5, [sp, #4]
10012936:	1e07      	subs	r7, r0, #0
10012938:	d11a      	bne.n	10012970 <setvbuf+0xf0>
1001293a:	9b02      	ldr	r3, [sp, #8]
1001293c:	9301      	str	r3, [sp, #4]
1001293e:	42ab      	cmp	r3, r5
10012940:	d102      	bne.n	10012948 <setvbuf+0xc8>
10012942:	2001      	movs	r0, #1
10012944:	4240      	negs	r0, r0
10012946:	e006      	b.n	10012956 <setvbuf+0xd6>
10012948:	9801      	ldr	r0, [sp, #4]
1001294a:	f7ff f96b 	bl	10011c24 <malloc>
1001294e:	1e07      	subs	r7, r0, #0
10012950:	d10e      	bne.n	10012970 <setvbuf+0xf0>
10012952:	e7f6      	b.n	10012942 <setvbuf+0xc2>
10012954:	2000      	movs	r0, #0
10012956:	2202      	movs	r2, #2
10012958:	89a3      	ldrh	r3, [r4, #12]
1001295a:	4313      	orrs	r3, r2
1001295c:	81a3      	strh	r3, [r4, #12]
1001295e:	2300      	movs	r3, #0
10012960:	60a3      	str	r3, [r4, #8]
10012962:	0023      	movs	r3, r4
10012964:	3347      	adds	r3, #71	; 0x47
10012966:	6023      	str	r3, [r4, #0]
10012968:	6123      	str	r3, [r4, #16]
1001296a:	2301      	movs	r3, #1
1001296c:	6163      	str	r3, [r4, #20]
1001296e:	e02a      	b.n	100129c6 <setvbuf+0x146>
10012970:	2280      	movs	r2, #128	; 0x80
10012972:	89a3      	ldrh	r3, [r4, #12]
10012974:	9d01      	ldr	r5, [sp, #4]
10012976:	4313      	orrs	r3, r2
10012978:	81a3      	strh	r3, [r4, #12]
1001297a:	69b3      	ldr	r3, [r6, #24]
1001297c:	2b00      	cmp	r3, #0
1001297e:	d102      	bne.n	10012986 <setvbuf+0x106>
10012980:	0030      	movs	r0, r6
10012982:	f001 f843 	bl	10013a0c <__sinit>
10012986:	9b00      	ldr	r3, [sp, #0]
10012988:	2b01      	cmp	r3, #1
1001298a:	d103      	bne.n	10012994 <setvbuf+0x114>
1001298c:	89a3      	ldrh	r3, [r4, #12]
1001298e:	9a00      	ldr	r2, [sp, #0]
10012990:	431a      	orrs	r2, r3
10012992:	81a2      	strh	r2, [r4, #12]
10012994:	2308      	movs	r3, #8
10012996:	89a2      	ldrh	r2, [r4, #12]
10012998:	6027      	str	r7, [r4, #0]
1001299a:	4013      	ands	r3, r2
1001299c:	6127      	str	r7, [r4, #16]
1001299e:	6165      	str	r5, [r4, #20]
100129a0:	1e18      	subs	r0, r3, #0
100129a2:	d00c      	beq.n	100129be <setvbuf+0x13e>
100129a4:	2301      	movs	r3, #1
100129a6:	401a      	ands	r2, r3
100129a8:	2300      	movs	r3, #0
100129aa:	1e10      	subs	r0, r2, #0
100129ac:	4298      	cmp	r0, r3
100129ae:	d004      	beq.n	100129ba <setvbuf+0x13a>
100129b0:	426d      	negs	r5, r5
100129b2:	60a3      	str	r3, [r4, #8]
100129b4:	61a5      	str	r5, [r4, #24]
100129b6:	0018      	movs	r0, r3
100129b8:	e005      	b.n	100129c6 <setvbuf+0x146>
100129ba:	60a5      	str	r5, [r4, #8]
100129bc:	e003      	b.n	100129c6 <setvbuf+0x146>
100129be:	60a3      	str	r3, [r4, #8]
100129c0:	e001      	b.n	100129c6 <setvbuf+0x146>
100129c2:	2001      	movs	r0, #1
100129c4:	4240      	negs	r0, r0
100129c6:	b005      	add	sp, #20
100129c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
100129ca:	46c0      	nop			; (mov r8, r8)
100129cc:	10017edc 	.word	0x10017edc
100129d0:	10017b94 	.word	0x10017b94
100129d4:	10017bb4 	.word	0x10017bb4
100129d8:	10017bd4 	.word	0x10017bd4
100129dc:	fffff35c 	.word	0xfffff35c

100129e0 <strlen>:
100129e0:	2300      	movs	r3, #0
100129e2:	5cc2      	ldrb	r2, [r0, r3]
100129e4:	3301      	adds	r3, #1
100129e6:	2a00      	cmp	r2, #0
100129e8:	d1fb      	bne.n	100129e2 <strlen+0x2>
100129ea:	1e58      	subs	r0, r3, #1
100129ec:	4770      	bx	lr
	...

100129f0 <__swbuf_r>:
100129f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100129f2:	0005      	movs	r5, r0
100129f4:	000f      	movs	r7, r1
100129f6:	0014      	movs	r4, r2
100129f8:	2800      	cmp	r0, #0
100129fa:	d004      	beq.n	10012a06 <__swbuf_r+0x16>
100129fc:	6983      	ldr	r3, [r0, #24]
100129fe:	2b00      	cmp	r3, #0
10012a00:	d101      	bne.n	10012a06 <__swbuf_r+0x16>
10012a02:	f001 f803 	bl	10013a0c <__sinit>
10012a06:	4b23      	ldr	r3, [pc, #140]	; (10012a94 <__swbuf_r+0xa4>)
10012a08:	429c      	cmp	r4, r3
10012a0a:	d101      	bne.n	10012a10 <__swbuf_r+0x20>
10012a0c:	686c      	ldr	r4, [r5, #4]
10012a0e:	e008      	b.n	10012a22 <__swbuf_r+0x32>
10012a10:	4b21      	ldr	r3, [pc, #132]	; (10012a98 <__swbuf_r+0xa8>)
10012a12:	429c      	cmp	r4, r3
10012a14:	d101      	bne.n	10012a1a <__swbuf_r+0x2a>
10012a16:	68ac      	ldr	r4, [r5, #8]
10012a18:	e003      	b.n	10012a22 <__swbuf_r+0x32>
10012a1a:	4b20      	ldr	r3, [pc, #128]	; (10012a9c <__swbuf_r+0xac>)
10012a1c:	429c      	cmp	r4, r3
10012a1e:	d100      	bne.n	10012a22 <__swbuf_r+0x32>
10012a20:	68ec      	ldr	r4, [r5, #12]
10012a22:	69a3      	ldr	r3, [r4, #24]
10012a24:	60a3      	str	r3, [r4, #8]
10012a26:	89a3      	ldrh	r3, [r4, #12]
10012a28:	071b      	lsls	r3, r3, #28
10012a2a:	d50a      	bpl.n	10012a42 <__swbuf_r+0x52>
10012a2c:	6923      	ldr	r3, [r4, #16]
10012a2e:	2b00      	cmp	r3, #0
10012a30:	d007      	beq.n	10012a42 <__swbuf_r+0x52>
10012a32:	6823      	ldr	r3, [r4, #0]
10012a34:	6922      	ldr	r2, [r4, #16]
10012a36:	b2fe      	uxtb	r6, r7
10012a38:	1a98      	subs	r0, r3, r2
10012a3a:	6963      	ldr	r3, [r4, #20]
10012a3c:	4298      	cmp	r0, r3
10012a3e:	db0f      	blt.n	10012a60 <__swbuf_r+0x70>
10012a40:	e008      	b.n	10012a54 <__swbuf_r+0x64>
10012a42:	0021      	movs	r1, r4
10012a44:	0028      	movs	r0, r5
10012a46:	f000 f82b 	bl	10012aa0 <__swsetup_r>
10012a4a:	2800      	cmp	r0, #0
10012a4c:	d0f1      	beq.n	10012a32 <__swbuf_r+0x42>
10012a4e:	2001      	movs	r0, #1
10012a50:	4240      	negs	r0, r0
10012a52:	e01d      	b.n	10012a90 <__swbuf_r+0xa0>
10012a54:	0021      	movs	r1, r4
10012a56:	0028      	movs	r0, r5
10012a58:	f000 ff6a 	bl	10013930 <_fflush_r>
10012a5c:	2800      	cmp	r0, #0
10012a5e:	d1f6      	bne.n	10012a4e <__swbuf_r+0x5e>
10012a60:	68a3      	ldr	r3, [r4, #8]
10012a62:	3001      	adds	r0, #1
10012a64:	3b01      	subs	r3, #1
10012a66:	60a3      	str	r3, [r4, #8]
10012a68:	6823      	ldr	r3, [r4, #0]
10012a6a:	1c5a      	adds	r2, r3, #1
10012a6c:	6022      	str	r2, [r4, #0]
10012a6e:	701f      	strb	r7, [r3, #0]
10012a70:	6963      	ldr	r3, [r4, #20]
10012a72:	4298      	cmp	r0, r3
10012a74:	d005      	beq.n	10012a82 <__swbuf_r+0x92>
10012a76:	89a3      	ldrh	r3, [r4, #12]
10012a78:	0030      	movs	r0, r6
10012a7a:	07db      	lsls	r3, r3, #31
10012a7c:	d508      	bpl.n	10012a90 <__swbuf_r+0xa0>
10012a7e:	2e0a      	cmp	r6, #10
10012a80:	d106      	bne.n	10012a90 <__swbuf_r+0xa0>
10012a82:	0021      	movs	r1, r4
10012a84:	0028      	movs	r0, r5
10012a86:	f000 ff53 	bl	10013930 <_fflush_r>
10012a8a:	2800      	cmp	r0, #0
10012a8c:	d1df      	bne.n	10012a4e <__swbuf_r+0x5e>
10012a8e:	0030      	movs	r0, r6
10012a90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10012a92:	46c0      	nop			; (mov r8, r8)
10012a94:	10017b94 	.word	0x10017b94
10012a98:	10017bb4 	.word	0x10017bb4
10012a9c:	10017bd4 	.word	0x10017bd4

10012aa0 <__swsetup_r>:
10012aa0:	4b36      	ldr	r3, [pc, #216]	; (10012b7c <__swsetup_r+0xdc>)
10012aa2:	b570      	push	{r4, r5, r6, lr}
10012aa4:	681d      	ldr	r5, [r3, #0]
10012aa6:	0006      	movs	r6, r0
10012aa8:	000c      	movs	r4, r1
10012aaa:	2d00      	cmp	r5, #0
10012aac:	d005      	beq.n	10012aba <__swsetup_r+0x1a>
10012aae:	69ab      	ldr	r3, [r5, #24]
10012ab0:	2b00      	cmp	r3, #0
10012ab2:	d102      	bne.n	10012aba <__swsetup_r+0x1a>
10012ab4:	0028      	movs	r0, r5
10012ab6:	f000 ffa9 	bl	10013a0c <__sinit>
10012aba:	4b31      	ldr	r3, [pc, #196]	; (10012b80 <__swsetup_r+0xe0>)
10012abc:	429c      	cmp	r4, r3
10012abe:	d101      	bne.n	10012ac4 <__swsetup_r+0x24>
10012ac0:	686c      	ldr	r4, [r5, #4]
10012ac2:	e008      	b.n	10012ad6 <__swsetup_r+0x36>
10012ac4:	4b2f      	ldr	r3, [pc, #188]	; (10012b84 <__swsetup_r+0xe4>)
10012ac6:	429c      	cmp	r4, r3
10012ac8:	d101      	bne.n	10012ace <__swsetup_r+0x2e>
10012aca:	68ac      	ldr	r4, [r5, #8]
10012acc:	e003      	b.n	10012ad6 <__swsetup_r+0x36>
10012ace:	4b2e      	ldr	r3, [pc, #184]	; (10012b88 <__swsetup_r+0xe8>)
10012ad0:	429c      	cmp	r4, r3
10012ad2:	d100      	bne.n	10012ad6 <__swsetup_r+0x36>
10012ad4:	68ec      	ldr	r4, [r5, #12]
10012ad6:	220c      	movs	r2, #12
10012ad8:	5ea3      	ldrsh	r3, [r4, r2]
10012ada:	b29a      	uxth	r2, r3
10012adc:	0711      	lsls	r1, r2, #28
10012ade:	d423      	bmi.n	10012b28 <__swsetup_r+0x88>
10012ae0:	06d1      	lsls	r1, r2, #27
10012ae2:	d407      	bmi.n	10012af4 <__swsetup_r+0x54>
10012ae4:	2209      	movs	r2, #9
10012ae6:	2001      	movs	r0, #1
10012ae8:	6032      	str	r2, [r6, #0]
10012aea:	3237      	adds	r2, #55	; 0x37
10012aec:	4313      	orrs	r3, r2
10012aee:	81a3      	strh	r3, [r4, #12]
10012af0:	4240      	negs	r0, r0
10012af2:	e042      	b.n	10012b7a <__swsetup_r+0xda>
10012af4:	0753      	lsls	r3, r2, #29
10012af6:	d513      	bpl.n	10012b20 <__swsetup_r+0x80>
10012af8:	6b61      	ldr	r1, [r4, #52]	; 0x34
10012afa:	2900      	cmp	r1, #0
10012afc:	d008      	beq.n	10012b10 <__swsetup_r+0x70>
10012afe:	0023      	movs	r3, r4
10012b00:	3344      	adds	r3, #68	; 0x44
10012b02:	4299      	cmp	r1, r3
10012b04:	d002      	beq.n	10012b0c <__swsetup_r+0x6c>
10012b06:	0030      	movs	r0, r6
10012b08:	f7ff f8b6 	bl	10011c78 <_free_r>
10012b0c:	2300      	movs	r3, #0
10012b0e:	6363      	str	r3, [r4, #52]	; 0x34
10012b10:	2224      	movs	r2, #36	; 0x24
10012b12:	89a3      	ldrh	r3, [r4, #12]
10012b14:	4393      	bics	r3, r2
10012b16:	81a3      	strh	r3, [r4, #12]
10012b18:	2300      	movs	r3, #0
10012b1a:	6063      	str	r3, [r4, #4]
10012b1c:	6923      	ldr	r3, [r4, #16]
10012b1e:	6023      	str	r3, [r4, #0]
10012b20:	2208      	movs	r2, #8
10012b22:	89a3      	ldrh	r3, [r4, #12]
10012b24:	4313      	orrs	r3, r2
10012b26:	81a3      	strh	r3, [r4, #12]
10012b28:	6923      	ldr	r3, [r4, #16]
10012b2a:	2b00      	cmp	r3, #0
10012b2c:	d10b      	bne.n	10012b46 <__swsetup_r+0xa6>
10012b2e:	23a0      	movs	r3, #160	; 0xa0
10012b30:	89a2      	ldrh	r2, [r4, #12]
10012b32:	009b      	lsls	r3, r3, #2
10012b34:	4013      	ands	r3, r2
10012b36:	2280      	movs	r2, #128	; 0x80
10012b38:	0092      	lsls	r2, r2, #2
10012b3a:	4293      	cmp	r3, r2
10012b3c:	d003      	beq.n	10012b46 <__swsetup_r+0xa6>
10012b3e:	0021      	movs	r1, r4
10012b40:	0030      	movs	r0, r6
10012b42:	f001 f821 	bl	10013b88 <__smakebuf_r>
10012b46:	2301      	movs	r3, #1
10012b48:	89a2      	ldrh	r2, [r4, #12]
10012b4a:	4013      	ands	r3, r2
10012b4c:	d005      	beq.n	10012b5a <__swsetup_r+0xba>
10012b4e:	2300      	movs	r3, #0
10012b50:	60a3      	str	r3, [r4, #8]
10012b52:	6963      	ldr	r3, [r4, #20]
10012b54:	425b      	negs	r3, r3
10012b56:	61a3      	str	r3, [r4, #24]
10012b58:	e003      	b.n	10012b62 <__swsetup_r+0xc2>
10012b5a:	0792      	lsls	r2, r2, #30
10012b5c:	d400      	bmi.n	10012b60 <__swsetup_r+0xc0>
10012b5e:	6963      	ldr	r3, [r4, #20]
10012b60:	60a3      	str	r3, [r4, #8]
10012b62:	2000      	movs	r0, #0
10012b64:	6923      	ldr	r3, [r4, #16]
10012b66:	4283      	cmp	r3, r0
10012b68:	d107      	bne.n	10012b7a <__swsetup_r+0xda>
10012b6a:	220c      	movs	r2, #12
10012b6c:	5ea3      	ldrsh	r3, [r4, r2]
10012b6e:	061a      	lsls	r2, r3, #24
10012b70:	d503      	bpl.n	10012b7a <__swsetup_r+0xda>
10012b72:	2240      	movs	r2, #64	; 0x40
10012b74:	4313      	orrs	r3, r2
10012b76:	81a3      	strh	r3, [r4, #12]
10012b78:	3801      	subs	r0, #1
10012b7a:	bd70      	pop	{r4, r5, r6, pc}
10012b7c:	10017edc 	.word	0x10017edc
10012b80:	10017b94 	.word	0x10017b94
10012b84:	10017bb4 	.word	0x10017bb4
10012b88:	10017bd4 	.word	0x10017bd4

10012b8c <quorem>:
10012b8c:	b5f0      	push	{r4, r5, r6, r7, lr}
10012b8e:	6903      	ldr	r3, [r0, #16]
10012b90:	690c      	ldr	r4, [r1, #16]
10012b92:	b089      	sub	sp, #36	; 0x24
10012b94:	0007      	movs	r7, r0
10012b96:	9105      	str	r1, [sp, #20]
10012b98:	2600      	movs	r6, #0
10012b9a:	429c      	cmp	r4, r3
10012b9c:	dc79      	bgt.n	10012c92 <quorem+0x106>
10012b9e:	000b      	movs	r3, r1
10012ba0:	3c01      	subs	r4, #1
10012ba2:	3314      	adds	r3, #20
10012ba4:	00a5      	lsls	r5, r4, #2
10012ba6:	9303      	str	r3, [sp, #12]
10012ba8:	195b      	adds	r3, r3, r5
10012baa:	9304      	str	r3, [sp, #16]
10012bac:	0003      	movs	r3, r0
10012bae:	3314      	adds	r3, #20
10012bb0:	9302      	str	r3, [sp, #8]
10012bb2:	195d      	adds	r5, r3, r5
10012bb4:	9b04      	ldr	r3, [sp, #16]
10012bb6:	6828      	ldr	r0, [r5, #0]
10012bb8:	681b      	ldr	r3, [r3, #0]
10012bba:	1c59      	adds	r1, r3, #1
10012bbc:	9301      	str	r3, [sp, #4]
10012bbe:	f001 fd71 	bl	100146a4 <__aeabi_uidiv>
10012bc2:	9001      	str	r0, [sp, #4]
10012bc4:	42b0      	cmp	r0, r6
10012bc6:	d033      	beq.n	10012c30 <quorem+0xa4>
10012bc8:	9b03      	ldr	r3, [sp, #12]
10012bca:	9802      	ldr	r0, [sp, #8]
10012bcc:	469c      	mov	ip, r3
10012bce:	9606      	str	r6, [sp, #24]
10012bd0:	4663      	mov	r3, ip
10012bd2:	cb04      	ldmia	r3!, {r2}
10012bd4:	469c      	mov	ip, r3
10012bd6:	9b01      	ldr	r3, [sp, #4]
10012bd8:	b291      	uxth	r1, r2
10012bda:	4359      	muls	r1, r3
10012bdc:	0c12      	lsrs	r2, r2, #16
10012bde:	435a      	muls	r2, r3
10012be0:	1989      	adds	r1, r1, r6
10012be2:	0c0b      	lsrs	r3, r1, #16
10012be4:	18d3      	adds	r3, r2, r3
10012be6:	9307      	str	r3, [sp, #28]
10012be8:	9a06      	ldr	r2, [sp, #24]
10012bea:	0c1e      	lsrs	r6, r3, #16
10012bec:	8803      	ldrh	r3, [r0, #0]
10012bee:	b289      	uxth	r1, r1
10012bf0:	189b      	adds	r3, r3, r2
10012bf2:	6802      	ldr	r2, [r0, #0]
10012bf4:	1a5b      	subs	r3, r3, r1
10012bf6:	0c11      	lsrs	r1, r2, #16
10012bf8:	466a      	mov	r2, sp
10012bfa:	8b92      	ldrh	r2, [r2, #28]
10012bfc:	1a8a      	subs	r2, r1, r2
10012bfe:	1419      	asrs	r1, r3, #16
10012c00:	1852      	adds	r2, r2, r1
10012c02:	1411      	asrs	r1, r2, #16
10012c04:	b29b      	uxth	r3, r3
10012c06:	0412      	lsls	r2, r2, #16
10012c08:	4313      	orrs	r3, r2
10012c0a:	c008      	stmia	r0!, {r3}
10012c0c:	9b04      	ldr	r3, [sp, #16]
10012c0e:	9106      	str	r1, [sp, #24]
10012c10:	4563      	cmp	r3, ip
10012c12:	d2dd      	bcs.n	10012bd0 <quorem+0x44>
10012c14:	682b      	ldr	r3, [r5, #0]
10012c16:	2b00      	cmp	r3, #0
10012c18:	d10a      	bne.n	10012c30 <quorem+0xa4>
10012c1a:	9b02      	ldr	r3, [sp, #8]
10012c1c:	3d04      	subs	r5, #4
10012c1e:	42ab      	cmp	r3, r5
10012c20:	d301      	bcc.n	10012c26 <quorem+0x9a>
10012c22:	613c      	str	r4, [r7, #16]
10012c24:	e004      	b.n	10012c30 <quorem+0xa4>
10012c26:	682b      	ldr	r3, [r5, #0]
10012c28:	2b00      	cmp	r3, #0
10012c2a:	d1fa      	bne.n	10012c22 <quorem+0x96>
10012c2c:	3c01      	subs	r4, #1
10012c2e:	e7f4      	b.n	10012c1a <quorem+0x8e>
10012c30:	9905      	ldr	r1, [sp, #20]
10012c32:	0038      	movs	r0, r7
10012c34:	f001 fa02 	bl	1001403c <__mcmp>
10012c38:	2800      	cmp	r0, #0
10012c3a:	db29      	blt.n	10012c90 <quorem+0x104>
10012c3c:	2000      	movs	r0, #0
10012c3e:	9b01      	ldr	r3, [sp, #4]
10012c40:	9902      	ldr	r1, [sp, #8]
10012c42:	3301      	adds	r3, #1
10012c44:	9a03      	ldr	r2, [sp, #12]
10012c46:	9301      	str	r3, [sp, #4]
10012c48:	ca40      	ldmia	r2!, {r6}
10012c4a:	880b      	ldrh	r3, [r1, #0]
10012c4c:	1818      	adds	r0, r3, r0
10012c4e:	b2b3      	uxth	r3, r6
10012c50:	1ac3      	subs	r3, r0, r3
10012c52:	6808      	ldr	r0, [r1, #0]
10012c54:	0c36      	lsrs	r6, r6, #16
10012c56:	0c00      	lsrs	r0, r0, #16
10012c58:	1b80      	subs	r0, r0, r6
10012c5a:	141d      	asrs	r5, r3, #16
10012c5c:	1945      	adds	r5, r0, r5
10012c5e:	1428      	asrs	r0, r5, #16
10012c60:	b29b      	uxth	r3, r3
10012c62:	042d      	lsls	r5, r5, #16
10012c64:	432b      	orrs	r3, r5
10012c66:	c108      	stmia	r1!, {r3}
10012c68:	9b04      	ldr	r3, [sp, #16]
10012c6a:	4293      	cmp	r3, r2
10012c6c:	d2ec      	bcs.n	10012c48 <quorem+0xbc>
10012c6e:	9a02      	ldr	r2, [sp, #8]
10012c70:	00a3      	lsls	r3, r4, #2
10012c72:	18d3      	adds	r3, r2, r3
10012c74:	681a      	ldr	r2, [r3, #0]
10012c76:	2a00      	cmp	r2, #0
10012c78:	d10a      	bne.n	10012c90 <quorem+0x104>
10012c7a:	9a02      	ldr	r2, [sp, #8]
10012c7c:	3b04      	subs	r3, #4
10012c7e:	429a      	cmp	r2, r3
10012c80:	d301      	bcc.n	10012c86 <quorem+0xfa>
10012c82:	613c      	str	r4, [r7, #16]
10012c84:	e004      	b.n	10012c90 <quorem+0x104>
10012c86:	681a      	ldr	r2, [r3, #0]
10012c88:	2a00      	cmp	r2, #0
10012c8a:	d1fa      	bne.n	10012c82 <quorem+0xf6>
10012c8c:	3c01      	subs	r4, #1
10012c8e:	e7f4      	b.n	10012c7a <quorem+0xee>
10012c90:	9e01      	ldr	r6, [sp, #4]
10012c92:	0030      	movs	r0, r6
10012c94:	b009      	add	sp, #36	; 0x24
10012c96:	bdf0      	pop	{r4, r5, r6, r7, pc}

10012c98 <_dtoa_r>:
10012c98:	b5f0      	push	{r4, r5, r6, r7, lr}
10012c9a:	0016      	movs	r6, r2
10012c9c:	001f      	movs	r7, r3
10012c9e:	6a44      	ldr	r4, [r0, #36]	; 0x24
10012ca0:	b09d      	sub	sp, #116	; 0x74
10012ca2:	9004      	str	r0, [sp, #16]
10012ca4:	9d25      	ldr	r5, [sp, #148]	; 0x94
10012ca6:	9606      	str	r6, [sp, #24]
10012ca8:	9707      	str	r7, [sp, #28]
10012caa:	2c00      	cmp	r4, #0
10012cac:	d108      	bne.n	10012cc0 <_dtoa_r+0x28>
10012cae:	2010      	movs	r0, #16
10012cb0:	f7fe ffb8 	bl	10011c24 <malloc>
10012cb4:	9b04      	ldr	r3, [sp, #16]
10012cb6:	6258      	str	r0, [r3, #36]	; 0x24
10012cb8:	6044      	str	r4, [r0, #4]
10012cba:	6084      	str	r4, [r0, #8]
10012cbc:	6004      	str	r4, [r0, #0]
10012cbe:	60c4      	str	r4, [r0, #12]
10012cc0:	9b04      	ldr	r3, [sp, #16]
10012cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10012cc4:	6819      	ldr	r1, [r3, #0]
10012cc6:	2900      	cmp	r1, #0
10012cc8:	d00b      	beq.n	10012ce2 <_dtoa_r+0x4a>
10012cca:	685a      	ldr	r2, [r3, #4]
10012ccc:	2301      	movs	r3, #1
10012cce:	4093      	lsls	r3, r2
10012cd0:	604a      	str	r2, [r1, #4]
10012cd2:	608b      	str	r3, [r1, #8]
10012cd4:	9804      	ldr	r0, [sp, #16]
10012cd6:	f000 ffd8 	bl	10013c8a <_Bfree>
10012cda:	2200      	movs	r2, #0
10012cdc:	9b04      	ldr	r3, [sp, #16]
10012cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10012ce0:	601a      	str	r2, [r3, #0]
10012ce2:	9b07      	ldr	r3, [sp, #28]
10012ce4:	2b00      	cmp	r3, #0
10012ce6:	da05      	bge.n	10012cf4 <_dtoa_r+0x5c>
10012ce8:	2301      	movs	r3, #1
10012cea:	602b      	str	r3, [r5, #0]
10012cec:	007b      	lsls	r3, r7, #1
10012cee:	085b      	lsrs	r3, r3, #1
10012cf0:	9307      	str	r3, [sp, #28]
10012cf2:	e001      	b.n	10012cf8 <_dtoa_r+0x60>
10012cf4:	2300      	movs	r3, #0
10012cf6:	602b      	str	r3, [r5, #0]
10012cf8:	9c07      	ldr	r4, [sp, #28]
10012cfa:	4bc8      	ldr	r3, [pc, #800]	; (1001301c <_dtoa_r+0x384>)
10012cfc:	0022      	movs	r2, r4
10012cfe:	9319      	str	r3, [sp, #100]	; 0x64
10012d00:	401a      	ands	r2, r3
10012d02:	429a      	cmp	r2, r3
10012d04:	d119      	bne.n	10012d3a <_dtoa_r+0xa2>
10012d06:	4bc6      	ldr	r3, [pc, #792]	; (10013020 <_dtoa_r+0x388>)
10012d08:	9a24      	ldr	r2, [sp, #144]	; 0x90
10012d0a:	6013      	str	r3, [r2, #0]
10012d0c:	9a06      	ldr	r2, [sp, #24]
10012d0e:	4bc5      	ldr	r3, [pc, #788]	; (10013024 <_dtoa_r+0x38c>)
10012d10:	2a00      	cmp	r2, #0
10012d12:	d102      	bne.n	10012d1a <_dtoa_r+0x82>
10012d14:	0324      	lsls	r4, r4, #12
10012d16:	d100      	bne.n	10012d1a <_dtoa_r+0x82>
10012d18:	4bc3      	ldr	r3, [pc, #780]	; (10013028 <_dtoa_r+0x390>)
10012d1a:	9a26      	ldr	r2, [sp, #152]	; 0x98
10012d1c:	0018      	movs	r0, r3
10012d1e:	2a00      	cmp	r2, #0
10012d20:	d101      	bne.n	10012d26 <_dtoa_r+0x8e>
10012d22:	f000 fd7d 	bl	10013820 <_dtoa_r+0xb88>
10012d26:	78d9      	ldrb	r1, [r3, #3]
10012d28:	1cda      	adds	r2, r3, #3
10012d2a:	2900      	cmp	r1, #0
10012d2c:	d000      	beq.n	10012d30 <_dtoa_r+0x98>
10012d2e:	3205      	adds	r2, #5
10012d30:	9926      	ldr	r1, [sp, #152]	; 0x98
10012d32:	0018      	movs	r0, r3
10012d34:	600a      	str	r2, [r1, #0]
10012d36:	f000 fd73 	bl	10013820 <_dtoa_r+0xb88>
10012d3a:	9e06      	ldr	r6, [sp, #24]
10012d3c:	9f07      	ldr	r7, [sp, #28]
10012d3e:	2200      	movs	r2, #0
10012d40:	2300      	movs	r3, #0
10012d42:	0030      	movs	r0, r6
10012d44:	0039      	movs	r1, r7
10012d46:	f001 fe33 	bl	100149b0 <__aeabi_dcmpeq>
10012d4a:	1e05      	subs	r5, r0, #0
10012d4c:	d00e      	beq.n	10012d6c <_dtoa_r+0xd4>
10012d4e:	2301      	movs	r3, #1
10012d50:	9a24      	ldr	r2, [sp, #144]	; 0x90
10012d52:	6013      	str	r3, [r2, #0]
10012d54:	4bb5      	ldr	r3, [pc, #724]	; (1001302c <_dtoa_r+0x394>)
10012d56:	9a26      	ldr	r2, [sp, #152]	; 0x98
10012d58:	0018      	movs	r0, r3
10012d5a:	2a00      	cmp	r2, #0
10012d5c:	d101      	bne.n	10012d62 <_dtoa_r+0xca>
10012d5e:	f000 fd5f 	bl	10013820 <_dtoa_r+0xb88>
10012d62:	4ab3      	ldr	r2, [pc, #716]	; (10013030 <_dtoa_r+0x398>)
10012d64:	9926      	ldr	r1, [sp, #152]	; 0x98
10012d66:	600a      	str	r2, [r1, #0]
10012d68:	f000 fd5a 	bl	10013820 <_dtoa_r+0xb88>
10012d6c:	ab1a      	add	r3, sp, #104	; 0x68
10012d6e:	9301      	str	r3, [sp, #4]
10012d70:	ab1b      	add	r3, sp, #108	; 0x6c
10012d72:	9300      	str	r3, [sp, #0]
10012d74:	0032      	movs	r2, r6
10012d76:	003b      	movs	r3, r7
10012d78:	9804      	ldr	r0, [sp, #16]
10012d7a:	f001 f9e5 	bl	10014148 <__d2b>
10012d7e:	0063      	lsls	r3, r4, #1
10012d80:	9005      	str	r0, [sp, #20]
10012d82:	0d5b      	lsrs	r3, r3, #21
10012d84:	d009      	beq.n	10012d9a <_dtoa_r+0x102>
10012d86:	033a      	lsls	r2, r7, #12
10012d88:	4caa      	ldr	r4, [pc, #680]	; (10013034 <_dtoa_r+0x39c>)
10012d8a:	0b12      	lsrs	r2, r2, #12
10012d8c:	4314      	orrs	r4, r2
10012d8e:	4aaa      	ldr	r2, [pc, #680]	; (10013038 <_dtoa_r+0x3a0>)
10012d90:	0030      	movs	r0, r6
10012d92:	0021      	movs	r1, r4
10012d94:	189e      	adds	r6, r3, r2
10012d96:	9517      	str	r5, [sp, #92]	; 0x5c
10012d98:	e01a      	b.n	10012dd0 <_dtoa_r+0x138>
10012d9a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
10012d9c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
10012d9e:	189e      	adds	r6, r3, r2
10012da0:	4ba6      	ldr	r3, [pc, #664]	; (1001303c <_dtoa_r+0x3a4>)
10012da2:	18f3      	adds	r3, r6, r3
10012da4:	2b20      	cmp	r3, #32
10012da6:	dd08      	ble.n	10012dba <_dtoa_r+0x122>
10012da8:	4aa5      	ldr	r2, [pc, #660]	; (10013040 <_dtoa_r+0x3a8>)
10012daa:	9806      	ldr	r0, [sp, #24]
10012dac:	18b2      	adds	r2, r6, r2
10012dae:	40d0      	lsrs	r0, r2
10012db0:	2240      	movs	r2, #64	; 0x40
10012db2:	1ad3      	subs	r3, r2, r3
10012db4:	409c      	lsls	r4, r3
10012db6:	4320      	orrs	r0, r4
10012db8:	e003      	b.n	10012dc2 <_dtoa_r+0x12a>
10012dba:	2220      	movs	r2, #32
10012dbc:	9806      	ldr	r0, [sp, #24]
10012dbe:	1ad3      	subs	r3, r2, r3
10012dc0:	4098      	lsls	r0, r3
10012dc2:	f003 fed7 	bl	10016b74 <__aeabi_ui2d>
10012dc6:	2301      	movs	r3, #1
10012dc8:	4c9e      	ldr	r4, [pc, #632]	; (10013044 <_dtoa_r+0x3ac>)
10012dca:	3e01      	subs	r6, #1
10012dcc:	1909      	adds	r1, r1, r4
10012dce:	9317      	str	r3, [sp, #92]	; 0x5c
10012dd0:	2200      	movs	r2, #0
10012dd2:	4b9d      	ldr	r3, [pc, #628]	; (10013048 <_dtoa_r+0x3b0>)
10012dd4:	f003 fae2 	bl	1001639c <__aeabi_dsub>
10012dd8:	4a9c      	ldr	r2, [pc, #624]	; (1001304c <_dtoa_r+0x3b4>)
10012dda:	4b9d      	ldr	r3, [pc, #628]	; (10013050 <_dtoa_r+0x3b8>)
10012ddc:	f003 f864 	bl	10015ea8 <__aeabi_dmul>
10012de0:	4a9c      	ldr	r2, [pc, #624]	; (10013054 <_dtoa_r+0x3bc>)
10012de2:	4b9d      	ldr	r3, [pc, #628]	; (10013058 <_dtoa_r+0x3c0>)
10012de4:	f002 f910 	bl	10015008 <__aeabi_dadd>
10012de8:	0004      	movs	r4, r0
10012dea:	0030      	movs	r0, r6
10012dec:	000d      	movs	r5, r1
10012dee:	f003 fe7f 	bl	10016af0 <__aeabi_i2d>
10012df2:	4a9a      	ldr	r2, [pc, #616]	; (1001305c <_dtoa_r+0x3c4>)
10012df4:	4b9a      	ldr	r3, [pc, #616]	; (10013060 <_dtoa_r+0x3c8>)
10012df6:	f003 f857 	bl	10015ea8 <__aeabi_dmul>
10012dfa:	0002      	movs	r2, r0
10012dfc:	000b      	movs	r3, r1
10012dfe:	0020      	movs	r0, r4
10012e00:	0029      	movs	r1, r5
10012e02:	f002 f901 	bl	10015008 <__aeabi_dadd>
10012e06:	0004      	movs	r4, r0
10012e08:	000d      	movs	r5, r1
10012e0a:	f003 fe3b 	bl	10016a84 <__aeabi_d2iz>
10012e0e:	2200      	movs	r2, #0
10012e10:	9003      	str	r0, [sp, #12]
10012e12:	2300      	movs	r3, #0
10012e14:	0020      	movs	r0, r4
10012e16:	0029      	movs	r1, r5
10012e18:	f001 fdd0 	bl	100149bc <__aeabi_dcmplt>
10012e1c:	2800      	cmp	r0, #0
10012e1e:	d00d      	beq.n	10012e3c <_dtoa_r+0x1a4>
10012e20:	9803      	ldr	r0, [sp, #12]
10012e22:	f003 fe65 	bl	10016af0 <__aeabi_i2d>
10012e26:	0002      	movs	r2, r0
10012e28:	000b      	movs	r3, r1
10012e2a:	0020      	movs	r0, r4
10012e2c:	0029      	movs	r1, r5
10012e2e:	f001 fdbf 	bl	100149b0 <__aeabi_dcmpeq>
10012e32:	4243      	negs	r3, r0
10012e34:	4143      	adcs	r3, r0
10012e36:	9a03      	ldr	r2, [sp, #12]
10012e38:	1ad3      	subs	r3, r2, r3
10012e3a:	9303      	str	r3, [sp, #12]
10012e3c:	2301      	movs	r3, #1
10012e3e:	9316      	str	r3, [sp, #88]	; 0x58
10012e40:	9b03      	ldr	r3, [sp, #12]
10012e42:	2b16      	cmp	r3, #22
10012e44:	d811      	bhi.n	10012e6a <_dtoa_r+0x1d2>
10012e46:	4987      	ldr	r1, [pc, #540]	; (10013064 <_dtoa_r+0x3cc>)
10012e48:	00db      	lsls	r3, r3, #3
10012e4a:	18c9      	adds	r1, r1, r3
10012e4c:	6808      	ldr	r0, [r1, #0]
10012e4e:	6849      	ldr	r1, [r1, #4]
10012e50:	9a06      	ldr	r2, [sp, #24]
10012e52:	9b07      	ldr	r3, [sp, #28]
10012e54:	f001 fdc6 	bl	100149e4 <__aeabi_dcmpgt>
10012e58:	2800      	cmp	r0, #0
10012e5a:	d005      	beq.n	10012e68 <_dtoa_r+0x1d0>
10012e5c:	9b03      	ldr	r3, [sp, #12]
10012e5e:	3b01      	subs	r3, #1
10012e60:	9303      	str	r3, [sp, #12]
10012e62:	2300      	movs	r3, #0
10012e64:	9316      	str	r3, [sp, #88]	; 0x58
10012e66:	e000      	b.n	10012e6a <_dtoa_r+0x1d2>
10012e68:	9016      	str	r0, [sp, #88]	; 0x58
10012e6a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
10012e6c:	1b9e      	subs	r6, r3, r6
10012e6e:	2300      	movs	r3, #0
10012e70:	930b      	str	r3, [sp, #44]	; 0x2c
10012e72:	3e01      	subs	r6, #1
10012e74:	960c      	str	r6, [sp, #48]	; 0x30
10012e76:	d504      	bpl.n	10012e82 <_dtoa_r+0x1ea>
10012e78:	9b0c      	ldr	r3, [sp, #48]	; 0x30
10012e7a:	425b      	negs	r3, r3
10012e7c:	930b      	str	r3, [sp, #44]	; 0x2c
10012e7e:	2300      	movs	r3, #0
10012e80:	930c      	str	r3, [sp, #48]	; 0x30
10012e82:	9b03      	ldr	r3, [sp, #12]
10012e84:	2b00      	cmp	r3, #0
10012e86:	db08      	blt.n	10012e9a <_dtoa_r+0x202>
10012e88:	9a03      	ldr	r2, [sp, #12]
10012e8a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
10012e8c:	4694      	mov	ip, r2
10012e8e:	4463      	add	r3, ip
10012e90:	930c      	str	r3, [sp, #48]	; 0x30
10012e92:	2300      	movs	r3, #0
10012e94:	9211      	str	r2, [sp, #68]	; 0x44
10012e96:	9308      	str	r3, [sp, #32]
10012e98:	e007      	b.n	10012eaa <_dtoa_r+0x212>
10012e9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
10012e9c:	9a03      	ldr	r2, [sp, #12]
10012e9e:	1a9b      	subs	r3, r3, r2
10012ea0:	930b      	str	r3, [sp, #44]	; 0x2c
10012ea2:	4253      	negs	r3, r2
10012ea4:	9308      	str	r3, [sp, #32]
10012ea6:	2300      	movs	r3, #0
10012ea8:	9311      	str	r3, [sp, #68]	; 0x44
10012eaa:	9b22      	ldr	r3, [sp, #136]	; 0x88
10012eac:	2501      	movs	r5, #1
10012eae:	2b09      	cmp	r3, #9
10012eb0:	d825      	bhi.n	10012efe <_dtoa_r+0x266>
10012eb2:	2b05      	cmp	r3, #5
10012eb4:	dd02      	ble.n	10012ebc <_dtoa_r+0x224>
10012eb6:	2500      	movs	r5, #0
10012eb8:	3b04      	subs	r3, #4
10012eba:	9322      	str	r3, [sp, #136]	; 0x88
10012ebc:	9b22      	ldr	r3, [sp, #136]	; 0x88
10012ebe:	1e98      	subs	r0, r3, #2
10012ec0:	2803      	cmp	r0, #3
10012ec2:	d824      	bhi.n	10012f0e <_dtoa_r+0x276>
10012ec4:	f001 fbe4 	bl	10014690 <__gnu_thumb1_case_uqi>
10012ec8:	04020e06 	.word	0x04020e06
10012ecc:	2301      	movs	r3, #1
10012ece:	e002      	b.n	10012ed6 <_dtoa_r+0x23e>
10012ed0:	2301      	movs	r3, #1
10012ed2:	e008      	b.n	10012ee6 <_dtoa_r+0x24e>
10012ed4:	2300      	movs	r3, #0
10012ed6:	9310      	str	r3, [sp, #64]	; 0x40
10012ed8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
10012eda:	2b00      	cmp	r3, #0
10012edc:	dd20      	ble.n	10012f20 <_dtoa_r+0x288>
10012ede:	001f      	movs	r7, r3
10012ee0:	930a      	str	r3, [sp, #40]	; 0x28
10012ee2:	e021      	b.n	10012f28 <_dtoa_r+0x290>
10012ee4:	2300      	movs	r3, #0
10012ee6:	9a23      	ldr	r2, [sp, #140]	; 0x8c
10012ee8:	9310      	str	r3, [sp, #64]	; 0x40
10012eea:	9b03      	ldr	r3, [sp, #12]
10012eec:	189f      	adds	r7, r3, r2
10012eee:	1c7b      	adds	r3, r7, #1
10012ef0:	930a      	str	r3, [sp, #40]	; 0x28
10012ef2:	2301      	movs	r3, #1
10012ef4:	18fa      	adds	r2, r7, r3
10012ef6:	2a00      	cmp	r2, #0
10012ef8:	dd16      	ble.n	10012f28 <_dtoa_r+0x290>
10012efa:	0013      	movs	r3, r2
10012efc:	e014      	b.n	10012f28 <_dtoa_r+0x290>
10012efe:	2701      	movs	r7, #1
10012f00:	2300      	movs	r3, #0
10012f02:	427f      	negs	r7, r7
10012f04:	9322      	str	r3, [sp, #136]	; 0x88
10012f06:	9510      	str	r5, [sp, #64]	; 0x40
10012f08:	970a      	str	r7, [sp, #40]	; 0x28
10012f0a:	3312      	adds	r3, #18
10012f0c:	e005      	b.n	10012f1a <_dtoa_r+0x282>
10012f0e:	2701      	movs	r7, #1
10012f10:	2301      	movs	r3, #1
10012f12:	427f      	negs	r7, r7
10012f14:	9310      	str	r3, [sp, #64]	; 0x40
10012f16:	970a      	str	r7, [sp, #40]	; 0x28
10012f18:	3311      	adds	r3, #17
10012f1a:	2200      	movs	r2, #0
10012f1c:	9223      	str	r2, [sp, #140]	; 0x8c
10012f1e:	e003      	b.n	10012f28 <_dtoa_r+0x290>
10012f20:	2701      	movs	r7, #1
10012f22:	003b      	movs	r3, r7
10012f24:	970a      	str	r7, [sp, #40]	; 0x28
10012f26:	9723      	str	r7, [sp, #140]	; 0x8c
10012f28:	9a04      	ldr	r2, [sp, #16]
10012f2a:	6a54      	ldr	r4, [r2, #36]	; 0x24
10012f2c:	2200      	movs	r2, #0
10012f2e:	6062      	str	r2, [r4, #4]
10012f30:	3204      	adds	r2, #4
10012f32:	0011      	movs	r1, r2
10012f34:	3114      	adds	r1, #20
10012f36:	4299      	cmp	r1, r3
10012f38:	d804      	bhi.n	10012f44 <_dtoa_r+0x2ac>
10012f3a:	6861      	ldr	r1, [r4, #4]
10012f3c:	0052      	lsls	r2, r2, #1
10012f3e:	3101      	adds	r1, #1
10012f40:	6061      	str	r1, [r4, #4]
10012f42:	e7f6      	b.n	10012f32 <_dtoa_r+0x29a>
10012f44:	6861      	ldr	r1, [r4, #4]
10012f46:	9804      	ldr	r0, [sp, #16]
10012f48:	f000 fe67 	bl	10013c1a <_Balloc>
10012f4c:	9b04      	ldr	r3, [sp, #16]
10012f4e:	6020      	str	r0, [r4, #0]
10012f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10012f52:	681b      	ldr	r3, [r3, #0]
10012f54:	930d      	str	r3, [sp, #52]	; 0x34
10012f56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
10012f58:	2b0e      	cmp	r3, #14
10012f5a:	d900      	bls.n	10012f5e <_dtoa_r+0x2c6>
10012f5c:	e181      	b.n	10013262 <_dtoa_r+0x5ca>
10012f5e:	2d00      	cmp	r5, #0
10012f60:	d100      	bne.n	10012f64 <_dtoa_r+0x2cc>
10012f62:	e17e      	b.n	10013262 <_dtoa_r+0x5ca>
10012f64:	9b06      	ldr	r3, [sp, #24]
10012f66:	9c07      	ldr	r4, [sp, #28]
10012f68:	9314      	str	r3, [sp, #80]	; 0x50
10012f6a:	9415      	str	r4, [sp, #84]	; 0x54
10012f6c:	9b03      	ldr	r3, [sp, #12]
10012f6e:	2b00      	cmp	r3, #0
10012f70:	dd31      	ble.n	10012fd6 <_dtoa_r+0x33e>
10012f72:	220f      	movs	r2, #15
10012f74:	493b      	ldr	r1, [pc, #236]	; (10013064 <_dtoa_r+0x3cc>)
10012f76:	4013      	ands	r3, r2
10012f78:	00db      	lsls	r3, r3, #3
10012f7a:	18cb      	adds	r3, r1, r3
10012f7c:	685c      	ldr	r4, [r3, #4]
10012f7e:	681b      	ldr	r3, [r3, #0]
10012f80:	930e      	str	r3, [sp, #56]	; 0x38
10012f82:	940f      	str	r4, [sp, #60]	; 0x3c
10012f84:	9b03      	ldr	r3, [sp, #12]
10012f86:	2402      	movs	r4, #2
10012f88:	111d      	asrs	r5, r3, #4
10012f8a:	06eb      	lsls	r3, r5, #27
10012f8c:	d50a      	bpl.n	10012fa4 <_dtoa_r+0x30c>
10012f8e:	9814      	ldr	r0, [sp, #80]	; 0x50
10012f90:	9915      	ldr	r1, [sp, #84]	; 0x54
10012f92:	4b35      	ldr	r3, [pc, #212]	; (10013068 <_dtoa_r+0x3d0>)
10012f94:	4015      	ands	r5, r2
10012f96:	6a1a      	ldr	r2, [r3, #32]
10012f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10012f9a:	f002 fb61 	bl	10015660 <__aeabi_ddiv>
10012f9e:	9006      	str	r0, [sp, #24]
10012fa0:	9107      	str	r1, [sp, #28]
10012fa2:	3401      	adds	r4, #1
10012fa4:	4e30      	ldr	r6, [pc, #192]	; (10013068 <_dtoa_r+0x3d0>)
10012fa6:	2d00      	cmp	r5, #0
10012fa8:	d00e      	beq.n	10012fc8 <_dtoa_r+0x330>
10012faa:	2301      	movs	r3, #1
10012fac:	421d      	tst	r5, r3
10012fae:	d008      	beq.n	10012fc2 <_dtoa_r+0x32a>
10012fb0:	980e      	ldr	r0, [sp, #56]	; 0x38
10012fb2:	990f      	ldr	r1, [sp, #60]	; 0x3c
10012fb4:	18e4      	adds	r4, r4, r3
10012fb6:	6832      	ldr	r2, [r6, #0]
10012fb8:	6873      	ldr	r3, [r6, #4]
10012fba:	f002 ff75 	bl	10015ea8 <__aeabi_dmul>
10012fbe:	900e      	str	r0, [sp, #56]	; 0x38
10012fc0:	910f      	str	r1, [sp, #60]	; 0x3c
10012fc2:	106d      	asrs	r5, r5, #1
10012fc4:	3608      	adds	r6, #8
10012fc6:	e7ee      	b.n	10012fa6 <_dtoa_r+0x30e>
10012fc8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
10012fca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
10012fcc:	9806      	ldr	r0, [sp, #24]
10012fce:	9907      	ldr	r1, [sp, #28]
10012fd0:	f002 fb46 	bl	10015660 <__aeabi_ddiv>
10012fd4:	e04c      	b.n	10013070 <_dtoa_r+0x3d8>
10012fd6:	9b03      	ldr	r3, [sp, #12]
10012fd8:	2402      	movs	r4, #2
10012fda:	425d      	negs	r5, r3
10012fdc:	2d00      	cmp	r5, #0
10012fde:	d049      	beq.n	10013074 <_dtoa_r+0x3dc>
10012fe0:	9814      	ldr	r0, [sp, #80]	; 0x50
10012fe2:	9915      	ldr	r1, [sp, #84]	; 0x54
10012fe4:	230f      	movs	r3, #15
10012fe6:	4a1f      	ldr	r2, [pc, #124]	; (10013064 <_dtoa_r+0x3cc>)
10012fe8:	402b      	ands	r3, r5
10012fea:	00db      	lsls	r3, r3, #3
10012fec:	18d3      	adds	r3, r2, r3
10012fee:	681a      	ldr	r2, [r3, #0]
10012ff0:	685b      	ldr	r3, [r3, #4]
10012ff2:	f002 ff59 	bl	10015ea8 <__aeabi_dmul>
10012ff6:	2300      	movs	r3, #0
10012ff8:	9006      	str	r0, [sp, #24]
10012ffa:	9107      	str	r1, [sp, #28]
10012ffc:	4e1a      	ldr	r6, [pc, #104]	; (10013068 <_dtoa_r+0x3d0>)
10012ffe:	112d      	asrs	r5, r5, #4
10013000:	2d00      	cmp	r5, #0
10013002:	d033      	beq.n	1001306c <_dtoa_r+0x3d4>
10013004:	2201      	movs	r2, #1
10013006:	4215      	tst	r5, r2
10013008:	d005      	beq.n	10013016 <_dtoa_r+0x37e>
1001300a:	18a4      	adds	r4, r4, r2
1001300c:	6832      	ldr	r2, [r6, #0]
1001300e:	6873      	ldr	r3, [r6, #4]
10013010:	f002 ff4a 	bl	10015ea8 <__aeabi_dmul>
10013014:	2301      	movs	r3, #1
10013016:	106d      	asrs	r5, r5, #1
10013018:	3608      	adds	r6, #8
1001301a:	e7f1      	b.n	10013000 <_dtoa_r+0x368>
1001301c:	7ff00000 	.word	0x7ff00000
10013020:	0000270f 	.word	0x0000270f
10013024:	10017b8d 	.word	0x10017b8d
10013028:	10017b84 	.word	0x10017b84
1001302c:	10017b60 	.word	0x10017b60
10013030:	10017b61 	.word	0x10017b61
10013034:	3ff00000 	.word	0x3ff00000
10013038:	fffffc01 	.word	0xfffffc01
1001303c:	00000432 	.word	0x00000432
10013040:	00000412 	.word	0x00000412
10013044:	fe100000 	.word	0xfe100000
10013048:	3ff80000 	.word	0x3ff80000
1001304c:	636f4361 	.word	0x636f4361
10013050:	3fd287a7 	.word	0x3fd287a7
10013054:	8b60c8b3 	.word	0x8b60c8b3
10013058:	3fc68a28 	.word	0x3fc68a28
1001305c:	509f79fb 	.word	0x509f79fb
10013060:	3fd34413 	.word	0x3fd34413
10013064:	10017c00 	.word	0x10017c00
10013068:	10017cc8 	.word	0x10017cc8
1001306c:	2b00      	cmp	r3, #0
1001306e:	d001      	beq.n	10013074 <_dtoa_r+0x3dc>
10013070:	9006      	str	r0, [sp, #24]
10013072:	9107      	str	r1, [sp, #28]
10013074:	9b16      	ldr	r3, [sp, #88]	; 0x58
10013076:	2b00      	cmp	r3, #0
10013078:	d01d      	beq.n	100130b6 <_dtoa_r+0x41e>
1001307a:	9d06      	ldr	r5, [sp, #24]
1001307c:	9e07      	ldr	r6, [sp, #28]
1001307e:	2200      	movs	r2, #0
10013080:	4bc7      	ldr	r3, [pc, #796]	; (100133a0 <_dtoa_r+0x708>)
10013082:	0028      	movs	r0, r5
10013084:	0031      	movs	r1, r6
10013086:	f001 fc99 	bl	100149bc <__aeabi_dcmplt>
1001308a:	2800      	cmp	r0, #0
1001308c:	d013      	beq.n	100130b6 <_dtoa_r+0x41e>
1001308e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
10013090:	2b00      	cmp	r3, #0
10013092:	d010      	beq.n	100130b6 <_dtoa_r+0x41e>
10013094:	2f00      	cmp	r7, #0
10013096:	dc00      	bgt.n	1001309a <_dtoa_r+0x402>
10013098:	e0df      	b.n	1001325a <_dtoa_r+0x5c2>
1001309a:	9b03      	ldr	r3, [sp, #12]
1001309c:	0031      	movs	r1, r6
1001309e:	3b01      	subs	r3, #1
100130a0:	930e      	str	r3, [sp, #56]	; 0x38
100130a2:	2200      	movs	r2, #0
100130a4:	4bbf      	ldr	r3, [pc, #764]	; (100133a4 <_dtoa_r+0x70c>)
100130a6:	0028      	movs	r0, r5
100130a8:	f002 fefe 	bl	10015ea8 <__aeabi_dmul>
100130ac:	3401      	adds	r4, #1
100130ae:	9006      	str	r0, [sp, #24]
100130b0:	9107      	str	r1, [sp, #28]
100130b2:	003e      	movs	r6, r7
100130b4:	e002      	b.n	100130bc <_dtoa_r+0x424>
100130b6:	9b03      	ldr	r3, [sp, #12]
100130b8:	9e0a      	ldr	r6, [sp, #40]	; 0x28
100130ba:	930e      	str	r3, [sp, #56]	; 0x38
100130bc:	0020      	movs	r0, r4
100130be:	f003 fd17 	bl	10016af0 <__aeabi_i2d>
100130c2:	9a06      	ldr	r2, [sp, #24]
100130c4:	9b07      	ldr	r3, [sp, #28]
100130c6:	f002 feef 	bl	10015ea8 <__aeabi_dmul>
100130ca:	2200      	movs	r2, #0
100130cc:	4bb6      	ldr	r3, [pc, #728]	; (100133a8 <_dtoa_r+0x710>)
100130ce:	f001 ff9b 	bl	10015008 <__aeabi_dadd>
100130d2:	4ab6      	ldr	r2, [pc, #728]	; (100133ac <_dtoa_r+0x714>)
100130d4:	9012      	str	r0, [sp, #72]	; 0x48
100130d6:	9113      	str	r1, [sp, #76]	; 0x4c
100130d8:	9c12      	ldr	r4, [sp, #72]	; 0x48
100130da:	9d13      	ldr	r5, [sp, #76]	; 0x4c
100130dc:	4694      	mov	ip, r2
100130de:	9b13      	ldr	r3, [sp, #76]	; 0x4c
100130e0:	4463      	add	r3, ip
100130e2:	9318      	str	r3, [sp, #96]	; 0x60
100130e4:	001d      	movs	r5, r3
100130e6:	2e00      	cmp	r6, #0
100130e8:	d11c      	bne.n	10013124 <_dtoa_r+0x48c>
100130ea:	9806      	ldr	r0, [sp, #24]
100130ec:	9907      	ldr	r1, [sp, #28]
100130ee:	2200      	movs	r2, #0
100130f0:	4baf      	ldr	r3, [pc, #700]	; (100133b0 <_dtoa_r+0x718>)
100130f2:	f003 f953 	bl	1001639c <__aeabi_dsub>
100130f6:	0022      	movs	r2, r4
100130f8:	9b18      	ldr	r3, [sp, #96]	; 0x60
100130fa:	9006      	str	r0, [sp, #24]
100130fc:	9107      	str	r1, [sp, #28]
100130fe:	f001 fc71 	bl	100149e4 <__aeabi_dcmpgt>
10013102:	2800      	cmp	r0, #0
10013104:	d000      	beq.n	10013108 <_dtoa_r+0x470>
10013106:	e254      	b.n	100135b2 <_dtoa_r+0x91a>
10013108:	48aa      	ldr	r0, [pc, #680]	; (100133b4 <_dtoa_r+0x71c>)
1001310a:	9913      	ldr	r1, [sp, #76]	; 0x4c
1001310c:	4684      	mov	ip, r0
1001310e:	4461      	add	r1, ip
10013110:	000b      	movs	r3, r1
10013112:	9806      	ldr	r0, [sp, #24]
10013114:	9907      	ldr	r1, [sp, #28]
10013116:	0022      	movs	r2, r4
10013118:	f001 fc50 	bl	100149bc <__aeabi_dcmplt>
1001311c:	2800      	cmp	r0, #0
1001311e:	d000      	beq.n	10013122 <_dtoa_r+0x48a>
10013120:	e23d      	b.n	1001359e <_dtoa_r+0x906>
10013122:	e09a      	b.n	1001325a <_dtoa_r+0x5c2>
10013124:	9a10      	ldr	r2, [sp, #64]	; 0x40
10013126:	1e73      	subs	r3, r6, #1
10013128:	49a3      	ldr	r1, [pc, #652]	; (100133b8 <_dtoa_r+0x720>)
1001312a:	00db      	lsls	r3, r3, #3
1001312c:	2a00      	cmp	r2, #0
1001312e:	d049      	beq.n	100131c4 <_dtoa_r+0x52c>
10013130:	18cb      	adds	r3, r1, r3
10013132:	681a      	ldr	r2, [r3, #0]
10013134:	685b      	ldr	r3, [r3, #4]
10013136:	2000      	movs	r0, #0
10013138:	49a0      	ldr	r1, [pc, #640]	; (100133bc <_dtoa_r+0x724>)
1001313a:	f002 fa91 	bl	10015660 <__aeabi_ddiv>
1001313e:	002b      	movs	r3, r5
10013140:	0022      	movs	r2, r4
10013142:	f003 f92b 	bl	1001639c <__aeabi_dsub>
10013146:	9012      	str	r0, [sp, #72]	; 0x48
10013148:	9113      	str	r1, [sp, #76]	; 0x4c
1001314a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
1001314c:	9806      	ldr	r0, [sp, #24]
1001314e:	9907      	ldr	r1, [sp, #28]
10013150:	f003 fc98 	bl	10016a84 <__aeabi_d2iz>
10013154:	0004      	movs	r4, r0
10013156:	f003 fccb 	bl	10016af0 <__aeabi_i2d>
1001315a:	0002      	movs	r2, r0
1001315c:	000b      	movs	r3, r1
1001315e:	9806      	ldr	r0, [sp, #24]
10013160:	9907      	ldr	r1, [sp, #28]
10013162:	f003 f91b 	bl	1001639c <__aeabi_dsub>
10013166:	3501      	adds	r5, #1
10013168:	1e6b      	subs	r3, r5, #1
1001316a:	3430      	adds	r4, #48	; 0x30
1001316c:	701c      	strb	r4, [r3, #0]
1001316e:	9a12      	ldr	r2, [sp, #72]	; 0x48
10013170:	9b13      	ldr	r3, [sp, #76]	; 0x4c
10013172:	9006      	str	r0, [sp, #24]
10013174:	9107      	str	r1, [sp, #28]
10013176:	f001 fc21 	bl	100149bc <__aeabi_dcmplt>
1001317a:	2800      	cmp	r0, #0
1001317c:	d000      	beq.n	10013180 <_dtoa_r+0x4e8>
1001317e:	e32e      	b.n	100137de <_dtoa_r+0xb46>
10013180:	9a06      	ldr	r2, [sp, #24]
10013182:	9b07      	ldr	r3, [sp, #28]
10013184:	2000      	movs	r0, #0
10013186:	4986      	ldr	r1, [pc, #536]	; (100133a0 <_dtoa_r+0x708>)
10013188:	f003 f908 	bl	1001639c <__aeabi_dsub>
1001318c:	9a12      	ldr	r2, [sp, #72]	; 0x48
1001318e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
10013190:	f001 fc14 	bl	100149bc <__aeabi_dcmplt>
10013194:	2800      	cmp	r0, #0
10013196:	d000      	beq.n	1001319a <_dtoa_r+0x502>
10013198:	e0c7      	b.n	1001332a <_dtoa_r+0x692>
1001319a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1001319c:	1aeb      	subs	r3, r5, r3
1001319e:	42b3      	cmp	r3, r6
100131a0:	da5b      	bge.n	1001325a <_dtoa_r+0x5c2>
100131a2:	9812      	ldr	r0, [sp, #72]	; 0x48
100131a4:	9913      	ldr	r1, [sp, #76]	; 0x4c
100131a6:	2200      	movs	r2, #0
100131a8:	4b7e      	ldr	r3, [pc, #504]	; (100133a4 <_dtoa_r+0x70c>)
100131aa:	f002 fe7d 	bl	10015ea8 <__aeabi_dmul>
100131ae:	2200      	movs	r2, #0
100131b0:	9012      	str	r0, [sp, #72]	; 0x48
100131b2:	9113      	str	r1, [sp, #76]	; 0x4c
100131b4:	9806      	ldr	r0, [sp, #24]
100131b6:	9907      	ldr	r1, [sp, #28]
100131b8:	4b7a      	ldr	r3, [pc, #488]	; (100133a4 <_dtoa_r+0x70c>)
100131ba:	f002 fe75 	bl	10015ea8 <__aeabi_dmul>
100131be:	9006      	str	r0, [sp, #24]
100131c0:	9107      	str	r1, [sp, #28]
100131c2:	e7c3      	b.n	1001314c <_dtoa_r+0x4b4>
100131c4:	18c9      	adds	r1, r1, r3
100131c6:	0022      	movs	r2, r4
100131c8:	6808      	ldr	r0, [r1, #0]
100131ca:	6849      	ldr	r1, [r1, #4]
100131cc:	002b      	movs	r3, r5
100131ce:	f002 fe6b 	bl	10015ea8 <__aeabi_dmul>
100131d2:	9c0d      	ldr	r4, [sp, #52]	; 0x34
100131d4:	9012      	str	r0, [sp, #72]	; 0x48
100131d6:	9113      	str	r1, [sp, #76]	; 0x4c
100131d8:	19a5      	adds	r5, r4, r6
100131da:	9806      	ldr	r0, [sp, #24]
100131dc:	9907      	ldr	r1, [sp, #28]
100131de:	f003 fc51 	bl	10016a84 <__aeabi_d2iz>
100131e2:	0006      	movs	r6, r0
100131e4:	f003 fc84 	bl	10016af0 <__aeabi_i2d>
100131e8:	0002      	movs	r2, r0
100131ea:	000b      	movs	r3, r1
100131ec:	9806      	ldr	r0, [sp, #24]
100131ee:	9907      	ldr	r1, [sp, #28]
100131f0:	f003 f8d4 	bl	1001639c <__aeabi_dsub>
100131f4:	3630      	adds	r6, #48	; 0x30
100131f6:	7026      	strb	r6, [r4, #0]
100131f8:	3401      	adds	r4, #1
100131fa:	9006      	str	r0, [sp, #24]
100131fc:	9107      	str	r1, [sp, #28]
100131fe:	2200      	movs	r2, #0
10013200:	42a5      	cmp	r5, r4
10013202:	d122      	bne.n	1001324a <_dtoa_r+0x5b2>
10013204:	4b6d      	ldr	r3, [pc, #436]	; (100133bc <_dtoa_r+0x724>)
10013206:	9812      	ldr	r0, [sp, #72]	; 0x48
10013208:	9913      	ldr	r1, [sp, #76]	; 0x4c
1001320a:	f001 fefd 	bl	10015008 <__aeabi_dadd>
1001320e:	0002      	movs	r2, r0
10013210:	000b      	movs	r3, r1
10013212:	9806      	ldr	r0, [sp, #24]
10013214:	9907      	ldr	r1, [sp, #28]
10013216:	f001 fbe5 	bl	100149e4 <__aeabi_dcmpgt>
1001321a:	2800      	cmp	r0, #0
1001321c:	d000      	beq.n	10013220 <_dtoa_r+0x588>
1001321e:	e084      	b.n	1001332a <_dtoa_r+0x692>
10013220:	9a12      	ldr	r2, [sp, #72]	; 0x48
10013222:	9b13      	ldr	r3, [sp, #76]	; 0x4c
10013224:	2000      	movs	r0, #0
10013226:	4965      	ldr	r1, [pc, #404]	; (100133bc <_dtoa_r+0x724>)
10013228:	f003 f8b8 	bl	1001639c <__aeabi_dsub>
1001322c:	0002      	movs	r2, r0
1001322e:	000b      	movs	r3, r1
10013230:	9806      	ldr	r0, [sp, #24]
10013232:	9907      	ldr	r1, [sp, #28]
10013234:	f001 fbc2 	bl	100149bc <__aeabi_dcmplt>
10013238:	2800      	cmp	r0, #0
1001323a:	d00e      	beq.n	1001325a <_dtoa_r+0x5c2>
1001323c:	1e6b      	subs	r3, r5, #1
1001323e:	781a      	ldrb	r2, [r3, #0]
10013240:	2a30      	cmp	r2, #48	; 0x30
10013242:	d000      	beq.n	10013246 <_dtoa_r+0x5ae>
10013244:	e2cb      	b.n	100137de <_dtoa_r+0xb46>
10013246:	001d      	movs	r5, r3
10013248:	e7f8      	b.n	1001323c <_dtoa_r+0x5a4>
1001324a:	9806      	ldr	r0, [sp, #24]
1001324c:	9907      	ldr	r1, [sp, #28]
1001324e:	4b55      	ldr	r3, [pc, #340]	; (100133a4 <_dtoa_r+0x70c>)
10013250:	f002 fe2a 	bl	10015ea8 <__aeabi_dmul>
10013254:	9006      	str	r0, [sp, #24]
10013256:	9107      	str	r1, [sp, #28]
10013258:	e7bf      	b.n	100131da <_dtoa_r+0x542>
1001325a:	9b14      	ldr	r3, [sp, #80]	; 0x50
1001325c:	9c15      	ldr	r4, [sp, #84]	; 0x54
1001325e:	9306      	str	r3, [sp, #24]
10013260:	9407      	str	r4, [sp, #28]
10013262:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
10013264:	2b00      	cmp	r3, #0
10013266:	da00      	bge.n	1001326a <_dtoa_r+0x5d2>
10013268:	e081      	b.n	1001336e <_dtoa_r+0x6d6>
1001326a:	9a03      	ldr	r2, [sp, #12]
1001326c:	2a0e      	cmp	r2, #14
1001326e:	dd00      	ble.n	10013272 <_dtoa_r+0x5da>
10013270:	e07d      	b.n	1001336e <_dtoa_r+0x6d6>
10013272:	00d3      	lsls	r3, r2, #3
10013274:	4a50      	ldr	r2, [pc, #320]	; (100133b8 <_dtoa_r+0x720>)
10013276:	18d3      	adds	r3, r2, r3
10013278:	685c      	ldr	r4, [r3, #4]
1001327a:	681b      	ldr	r3, [r3, #0]
1001327c:	9308      	str	r3, [sp, #32]
1001327e:	9409      	str	r4, [sp, #36]	; 0x24
10013280:	9b23      	ldr	r3, [sp, #140]	; 0x8c
10013282:	2b00      	cmp	r3, #0
10013284:	da15      	bge.n	100132b2 <_dtoa_r+0x61a>
10013286:	9b0a      	ldr	r3, [sp, #40]	; 0x28
10013288:	2b00      	cmp	r3, #0
1001328a:	dc12      	bgt.n	100132b2 <_dtoa_r+0x61a>
1001328c:	d000      	beq.n	10013290 <_dtoa_r+0x5f8>
1001328e:	e188      	b.n	100135a2 <_dtoa_r+0x90a>
10013290:	9808      	ldr	r0, [sp, #32]
10013292:	9909      	ldr	r1, [sp, #36]	; 0x24
10013294:	2200      	movs	r2, #0
10013296:	4b46      	ldr	r3, [pc, #280]	; (100133b0 <_dtoa_r+0x718>)
10013298:	f002 fe06 	bl	10015ea8 <__aeabi_dmul>
1001329c:	9a06      	ldr	r2, [sp, #24]
1001329e:	9b07      	ldr	r3, [sp, #28]
100132a0:	f001 fbaa 	bl	100149f8 <__aeabi_dcmpge>
100132a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
100132a6:	9308      	str	r3, [sp, #32]
100132a8:	001e      	movs	r6, r3
100132aa:	2800      	cmp	r0, #0
100132ac:	d000      	beq.n	100132b0 <_dtoa_r+0x618>
100132ae:	e17b      	b.n	100135a8 <_dtoa_r+0x910>
100132b0:	e182      	b.n	100135b8 <_dtoa_r+0x920>
100132b2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
100132b4:	9e06      	ldr	r6, [sp, #24]
100132b6:	9f07      	ldr	r7, [sp, #28]
100132b8:	9a08      	ldr	r2, [sp, #32]
100132ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
100132bc:	0030      	movs	r0, r6
100132be:	0039      	movs	r1, r7
100132c0:	f002 f9ce 	bl	10015660 <__aeabi_ddiv>
100132c4:	f003 fbde 	bl	10016a84 <__aeabi_d2iz>
100132c8:	0004      	movs	r4, r0
100132ca:	f003 fc11 	bl	10016af0 <__aeabi_i2d>
100132ce:	9a08      	ldr	r2, [sp, #32]
100132d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
100132d2:	f002 fde9 	bl	10015ea8 <__aeabi_dmul>
100132d6:	0002      	movs	r2, r0
100132d8:	000b      	movs	r3, r1
100132da:	0030      	movs	r0, r6
100132dc:	0039      	movs	r1, r7
100132de:	f003 f85d 	bl	1001639c <__aeabi_dsub>
100132e2:	0022      	movs	r2, r4
100132e4:	3501      	adds	r5, #1
100132e6:	1e6b      	subs	r3, r5, #1
100132e8:	3230      	adds	r2, #48	; 0x30
100132ea:	701a      	strb	r2, [r3, #0]
100132ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
100132ee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
100132f0:	1aeb      	subs	r3, r5, r3
100132f2:	429a      	cmp	r2, r3
100132f4:	d12e      	bne.n	10013354 <_dtoa_r+0x6bc>
100132f6:	0002      	movs	r2, r0
100132f8:	000b      	movs	r3, r1
100132fa:	f001 fe85 	bl	10015008 <__aeabi_dadd>
100132fe:	0006      	movs	r6, r0
10013300:	000f      	movs	r7, r1
10013302:	0002      	movs	r2, r0
10013304:	000b      	movs	r3, r1
10013306:	9808      	ldr	r0, [sp, #32]
10013308:	9909      	ldr	r1, [sp, #36]	; 0x24
1001330a:	f001 fb57 	bl	100149bc <__aeabi_dcmplt>
1001330e:	2800      	cmp	r0, #0
10013310:	d10f      	bne.n	10013332 <_dtoa_r+0x69a>
10013312:	9808      	ldr	r0, [sp, #32]
10013314:	9909      	ldr	r1, [sp, #36]	; 0x24
10013316:	0032      	movs	r2, r6
10013318:	003b      	movs	r3, r7
1001331a:	f001 fb49 	bl	100149b0 <__aeabi_dcmpeq>
1001331e:	2800      	cmp	r0, #0
10013320:	d100      	bne.n	10013324 <_dtoa_r+0x68c>
10013322:	e25e      	b.n	100137e2 <_dtoa_r+0xb4a>
10013324:	07e3      	lsls	r3, r4, #31
10013326:	d404      	bmi.n	10013332 <_dtoa_r+0x69a>
10013328:	e25b      	b.n	100137e2 <_dtoa_r+0xb4a>
1001332a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1001332c:	9303      	str	r3, [sp, #12]
1001332e:	e000      	b.n	10013332 <_dtoa_r+0x69a>
10013330:	001d      	movs	r5, r3
10013332:	1e6b      	subs	r3, r5, #1
10013334:	781a      	ldrb	r2, [r3, #0]
10013336:	2a39      	cmp	r2, #57	; 0x39
10013338:	d108      	bne.n	1001334c <_dtoa_r+0x6b4>
1001333a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
1001333c:	429a      	cmp	r2, r3
1001333e:	d1f7      	bne.n	10013330 <_dtoa_r+0x698>
10013340:	9a03      	ldr	r2, [sp, #12]
10013342:	990d      	ldr	r1, [sp, #52]	; 0x34
10013344:	3201      	adds	r2, #1
10013346:	9203      	str	r2, [sp, #12]
10013348:	2230      	movs	r2, #48	; 0x30
1001334a:	700a      	strb	r2, [r1, #0]
1001334c:	781a      	ldrb	r2, [r3, #0]
1001334e:	3201      	adds	r2, #1
10013350:	701a      	strb	r2, [r3, #0]
10013352:	e246      	b.n	100137e2 <_dtoa_r+0xb4a>
10013354:	2200      	movs	r2, #0
10013356:	4b13      	ldr	r3, [pc, #76]	; (100133a4 <_dtoa_r+0x70c>)
10013358:	f002 fda6 	bl	10015ea8 <__aeabi_dmul>
1001335c:	2200      	movs	r2, #0
1001335e:	2300      	movs	r3, #0
10013360:	0006      	movs	r6, r0
10013362:	000f      	movs	r7, r1
10013364:	f001 fb24 	bl	100149b0 <__aeabi_dcmpeq>
10013368:	2800      	cmp	r0, #0
1001336a:	d0a5      	beq.n	100132b8 <_dtoa_r+0x620>
1001336c:	e239      	b.n	100137e2 <_dtoa_r+0xb4a>
1001336e:	9a10      	ldr	r2, [sp, #64]	; 0x40
10013370:	2a00      	cmp	r2, #0
10013372:	d044      	beq.n	100133fe <_dtoa_r+0x766>
10013374:	9a22      	ldr	r2, [sp, #136]	; 0x88
10013376:	2a01      	cmp	r2, #1
10013378:	dc0b      	bgt.n	10013392 <_dtoa_r+0x6fa>
1001337a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
1001337c:	2a00      	cmp	r2, #0
1001337e:	d002      	beq.n	10013386 <_dtoa_r+0x6ee>
10013380:	4a0f      	ldr	r2, [pc, #60]	; (100133c0 <_dtoa_r+0x728>)
10013382:	189b      	adds	r3, r3, r2
10013384:	e002      	b.n	1001338c <_dtoa_r+0x6f4>
10013386:	2336      	movs	r3, #54	; 0x36
10013388:	9a1a      	ldr	r2, [sp, #104]	; 0x68
1001338a:	1a9b      	subs	r3, r3, r2
1001338c:	9d08      	ldr	r5, [sp, #32]
1001338e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
10013390:	e029      	b.n	100133e6 <_dtoa_r+0x74e>
10013392:	9b0a      	ldr	r3, [sp, #40]	; 0x28
10013394:	1e5d      	subs	r5, r3, #1
10013396:	9b08      	ldr	r3, [sp, #32]
10013398:	42ab      	cmp	r3, r5
1001339a:	db13      	blt.n	100133c4 <_dtoa_r+0x72c>
1001339c:	1b5d      	subs	r5, r3, r5
1001339e:	e018      	b.n	100133d2 <_dtoa_r+0x73a>
100133a0:	3ff00000 	.word	0x3ff00000
100133a4:	40240000 	.word	0x40240000
100133a8:	401c0000 	.word	0x401c0000
100133ac:	fcc00000 	.word	0xfcc00000
100133b0:	40140000 	.word	0x40140000
100133b4:	7cc00000 	.word	0x7cc00000
100133b8:	10017c00 	.word	0x10017c00
100133bc:	3fe00000 	.word	0x3fe00000
100133c0:	00000433 	.word	0x00000433
100133c4:	9b08      	ldr	r3, [sp, #32]
100133c6:	9508      	str	r5, [sp, #32]
100133c8:	1aea      	subs	r2, r5, r3
100133ca:	2500      	movs	r5, #0
100133cc:	9b11      	ldr	r3, [sp, #68]	; 0x44
100133ce:	189b      	adds	r3, r3, r2
100133d0:	9311      	str	r3, [sp, #68]	; 0x44
100133d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
100133d4:	2b00      	cmp	r3, #0
100133d6:	da04      	bge.n	100133e2 <_dtoa_r+0x74a>
100133d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
100133da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
100133dc:	1a9c      	subs	r4, r3, r2
100133de:	2300      	movs	r3, #0
100133e0:	e001      	b.n	100133e6 <_dtoa_r+0x74e>
100133e2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
100133e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
100133e6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
100133e8:	2101      	movs	r1, #1
100133ea:	18d2      	adds	r2, r2, r3
100133ec:	920b      	str	r2, [sp, #44]	; 0x2c
100133ee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
100133f0:	9804      	ldr	r0, [sp, #16]
100133f2:	18d3      	adds	r3, r2, r3
100133f4:	930c      	str	r3, [sp, #48]	; 0x30
100133f6:	f000 fce8 	bl	10013dca <__i2b>
100133fa:	0006      	movs	r6, r0
100133fc:	e002      	b.n	10013404 <_dtoa_r+0x76c>
100133fe:	9d08      	ldr	r5, [sp, #32]
10013400:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
10013402:	9e10      	ldr	r6, [sp, #64]	; 0x40
10013404:	2c00      	cmp	r4, #0
10013406:	d00e      	beq.n	10013426 <_dtoa_r+0x78e>
10013408:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1001340a:	2b00      	cmp	r3, #0
1001340c:	dd0b      	ble.n	10013426 <_dtoa_r+0x78e>
1001340e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
10013410:	1e23      	subs	r3, r4, #0
10013412:	4293      	cmp	r3, r2
10013414:	dd00      	ble.n	10013418 <_dtoa_r+0x780>
10013416:	0013      	movs	r3, r2
10013418:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
1001341a:	1ae4      	subs	r4, r4, r3
1001341c:	1ad2      	subs	r2, r2, r3
1001341e:	920b      	str	r2, [sp, #44]	; 0x2c
10013420:	9a0c      	ldr	r2, [sp, #48]	; 0x30
10013422:	1ad3      	subs	r3, r2, r3
10013424:	930c      	str	r3, [sp, #48]	; 0x30
10013426:	9b08      	ldr	r3, [sp, #32]
10013428:	2b00      	cmp	r3, #0
1001342a:	dd20      	ble.n	1001346e <_dtoa_r+0x7d6>
1001342c:	9b10      	ldr	r3, [sp, #64]	; 0x40
1001342e:	2b00      	cmp	r3, #0
10013430:	d017      	beq.n	10013462 <_dtoa_r+0x7ca>
10013432:	2d00      	cmp	r5, #0
10013434:	d011      	beq.n	1001345a <_dtoa_r+0x7c2>
10013436:	0031      	movs	r1, r6
10013438:	002a      	movs	r2, r5
1001343a:	9804      	ldr	r0, [sp, #16]
1001343c:	f000 fd58 	bl	10013ef0 <__pow5mult>
10013440:	9a05      	ldr	r2, [sp, #20]
10013442:	0001      	movs	r1, r0
10013444:	0006      	movs	r6, r0
10013446:	9804      	ldr	r0, [sp, #16]
10013448:	f000 fcc8 	bl	10013ddc <__multiply>
1001344c:	9905      	ldr	r1, [sp, #20]
1001344e:	900e      	str	r0, [sp, #56]	; 0x38
10013450:	9804      	ldr	r0, [sp, #16]
10013452:	f000 fc1a 	bl	10013c8a <_Bfree>
10013456:	9b0e      	ldr	r3, [sp, #56]	; 0x38
10013458:	9305      	str	r3, [sp, #20]
1001345a:	9b08      	ldr	r3, [sp, #32]
1001345c:	1b5a      	subs	r2, r3, r5
1001345e:	d006      	beq.n	1001346e <_dtoa_r+0x7d6>
10013460:	e000      	b.n	10013464 <_dtoa_r+0x7cc>
10013462:	9a08      	ldr	r2, [sp, #32]
10013464:	9905      	ldr	r1, [sp, #20]
10013466:	9804      	ldr	r0, [sp, #16]
10013468:	f000 fd42 	bl	10013ef0 <__pow5mult>
1001346c:	9005      	str	r0, [sp, #20]
1001346e:	2101      	movs	r1, #1
10013470:	9804      	ldr	r0, [sp, #16]
10013472:	f000 fcaa 	bl	10013dca <__i2b>
10013476:	9b11      	ldr	r3, [sp, #68]	; 0x44
10013478:	9008      	str	r0, [sp, #32]
1001347a:	2b00      	cmp	r3, #0
1001347c:	d100      	bne.n	10013480 <_dtoa_r+0x7e8>
1001347e:	e1c0      	b.n	10013802 <_dtoa_r+0xb6a>
10013480:	001a      	movs	r2, r3
10013482:	0001      	movs	r1, r0
10013484:	9804      	ldr	r0, [sp, #16]
10013486:	f000 fd33 	bl	10013ef0 <__pow5mult>
1001348a:	9b22      	ldr	r3, [sp, #136]	; 0x88
1001348c:	9008      	str	r0, [sp, #32]
1001348e:	2b01      	cmp	r3, #1
10013490:	dc17      	bgt.n	100134c2 <_dtoa_r+0x82a>
10013492:	2500      	movs	r5, #0
10013494:	9b06      	ldr	r3, [sp, #24]
10013496:	42ab      	cmp	r3, r5
10013498:	d10e      	bne.n	100134b8 <_dtoa_r+0x820>
1001349a:	9b07      	ldr	r3, [sp, #28]
1001349c:	031b      	lsls	r3, r3, #12
1001349e:	42ab      	cmp	r3, r5
100134a0:	d10a      	bne.n	100134b8 <_dtoa_r+0x820>
100134a2:	9b19      	ldr	r3, [sp, #100]	; 0x64
100134a4:	9a07      	ldr	r2, [sp, #28]
100134a6:	4213      	tst	r3, r2
100134a8:	d006      	beq.n	100134b8 <_dtoa_r+0x820>
100134aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
100134ac:	3501      	adds	r5, #1
100134ae:	3301      	adds	r3, #1
100134b0:	930b      	str	r3, [sp, #44]	; 0x2c
100134b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
100134b4:	3301      	adds	r3, #1
100134b6:	930c      	str	r3, [sp, #48]	; 0x30
100134b8:	9b11      	ldr	r3, [sp, #68]	; 0x44
100134ba:	2001      	movs	r0, #1
100134bc:	2b00      	cmp	r3, #0
100134be:	d00d      	beq.n	100134dc <_dtoa_r+0x844>
100134c0:	e000      	b.n	100134c4 <_dtoa_r+0x82c>
100134c2:	2500      	movs	r5, #0
100134c4:	9b08      	ldr	r3, [sp, #32]
100134c6:	9a08      	ldr	r2, [sp, #32]
100134c8:	691b      	ldr	r3, [r3, #16]
100134ca:	930e      	str	r3, [sp, #56]	; 0x38
100134cc:	3303      	adds	r3, #3
100134ce:	009b      	lsls	r3, r3, #2
100134d0:	18d3      	adds	r3, r2, r3
100134d2:	6858      	ldr	r0, [r3, #4]
100134d4:	f000 fc2f 	bl	10013d36 <__hi0bits>
100134d8:	2320      	movs	r3, #32
100134da:	1a18      	subs	r0, r3, r0
100134dc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
100134de:	18c0      	adds	r0, r0, r3
100134e0:	231f      	movs	r3, #31
100134e2:	4018      	ands	r0, r3
100134e4:	d009      	beq.n	100134fa <_dtoa_r+0x862>
100134e6:	3301      	adds	r3, #1
100134e8:	1a1b      	subs	r3, r3, r0
100134ea:	2b04      	cmp	r3, #4
100134ec:	dd02      	ble.n	100134f4 <_dtoa_r+0x85c>
100134ee:	231c      	movs	r3, #28
100134f0:	1a18      	subs	r0, r3, r0
100134f2:	e003      	b.n	100134fc <_dtoa_r+0x864>
100134f4:	2b04      	cmp	r3, #4
100134f6:	d008      	beq.n	1001350a <_dtoa_r+0x872>
100134f8:	0018      	movs	r0, r3
100134fa:	301c      	adds	r0, #28
100134fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
100134fe:	1824      	adds	r4, r4, r0
10013500:	181b      	adds	r3, r3, r0
10013502:	930b      	str	r3, [sp, #44]	; 0x2c
10013504:	9b0c      	ldr	r3, [sp, #48]	; 0x30
10013506:	181b      	adds	r3, r3, r0
10013508:	930c      	str	r3, [sp, #48]	; 0x30
1001350a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1001350c:	2b00      	cmp	r3, #0
1001350e:	dd05      	ble.n	1001351c <_dtoa_r+0x884>
10013510:	001a      	movs	r2, r3
10013512:	9905      	ldr	r1, [sp, #20]
10013514:	9804      	ldr	r0, [sp, #16]
10013516:	f000 fd3f 	bl	10013f98 <__lshift>
1001351a:	9005      	str	r0, [sp, #20]
1001351c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1001351e:	2b00      	cmp	r3, #0
10013520:	dd05      	ble.n	1001352e <_dtoa_r+0x896>
10013522:	001a      	movs	r2, r3
10013524:	9908      	ldr	r1, [sp, #32]
10013526:	9804      	ldr	r0, [sp, #16]
10013528:	f000 fd36 	bl	10013f98 <__lshift>
1001352c:	9008      	str	r0, [sp, #32]
1001352e:	9b16      	ldr	r3, [sp, #88]	; 0x58
10013530:	2b00      	cmp	r3, #0
10013532:	d01d      	beq.n	10013570 <_dtoa_r+0x8d8>
10013534:	9908      	ldr	r1, [sp, #32]
10013536:	9805      	ldr	r0, [sp, #20]
10013538:	f000 fd80 	bl	1001403c <__mcmp>
1001353c:	2800      	cmp	r0, #0
1001353e:	da17      	bge.n	10013570 <_dtoa_r+0x8d8>
10013540:	9b03      	ldr	r3, [sp, #12]
10013542:	220a      	movs	r2, #10
10013544:	3b01      	subs	r3, #1
10013546:	9303      	str	r3, [sp, #12]
10013548:	9905      	ldr	r1, [sp, #20]
1001354a:	2300      	movs	r3, #0
1001354c:	9804      	ldr	r0, [sp, #16]
1001354e:	f000 fbb5 	bl	10013cbc <__multadd>
10013552:	9b10      	ldr	r3, [sp, #64]	; 0x40
10013554:	9005      	str	r0, [sp, #20]
10013556:	2b00      	cmp	r3, #0
10013558:	d100      	bne.n	1001355c <_dtoa_r+0x8c4>
1001355a:	e159      	b.n	10013810 <_dtoa_r+0xb78>
1001355c:	0031      	movs	r1, r6
1001355e:	2300      	movs	r3, #0
10013560:	220a      	movs	r2, #10
10013562:	9804      	ldr	r0, [sp, #16]
10013564:	f000 fbaa 	bl	10013cbc <__multadd>
10013568:	0006      	movs	r6, r0
1001356a:	2f00      	cmp	r7, #0
1001356c:	dc37      	bgt.n	100135de <_dtoa_r+0x946>
1001356e:	e033      	b.n	100135d8 <_dtoa_r+0x940>
10013570:	9b0a      	ldr	r3, [sp, #40]	; 0x28
10013572:	9f0a      	ldr	r7, [sp, #40]	; 0x28
10013574:	2b00      	cmp	r3, #0
10013576:	dc2a      	bgt.n	100135ce <_dtoa_r+0x936>
10013578:	9b22      	ldr	r3, [sp, #136]	; 0x88
1001357a:	2b02      	cmp	r3, #2
1001357c:	dd27      	ble.n	100135ce <_dtoa_r+0x936>
1001357e:	2f00      	cmp	r7, #0
10013580:	d112      	bne.n	100135a8 <_dtoa_r+0x910>
10013582:	9908      	ldr	r1, [sp, #32]
10013584:	003b      	movs	r3, r7
10013586:	2205      	movs	r2, #5
10013588:	9804      	ldr	r0, [sp, #16]
1001358a:	f000 fb97 	bl	10013cbc <__multadd>
1001358e:	9008      	str	r0, [sp, #32]
10013590:	0001      	movs	r1, r0
10013592:	9805      	ldr	r0, [sp, #20]
10013594:	f000 fd52 	bl	1001403c <__mcmp>
10013598:	2800      	cmp	r0, #0
1001359a:	dc0d      	bgt.n	100135b8 <_dtoa_r+0x920>
1001359c:	e004      	b.n	100135a8 <_dtoa_r+0x910>
1001359e:	9608      	str	r6, [sp, #32]
100135a0:	e002      	b.n	100135a8 <_dtoa_r+0x910>
100135a2:	2300      	movs	r3, #0
100135a4:	001e      	movs	r6, r3
100135a6:	9308      	str	r3, [sp, #32]
100135a8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
100135aa:	9d0d      	ldr	r5, [sp, #52]	; 0x34
100135ac:	43db      	mvns	r3, r3
100135ae:	9303      	str	r3, [sp, #12]
100135b0:	e00a      	b.n	100135c8 <_dtoa_r+0x930>
100135b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
100135b4:	9608      	str	r6, [sp, #32]
100135b6:	9303      	str	r3, [sp, #12]
100135b8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
100135ba:	9a0d      	ldr	r2, [sp, #52]	; 0x34
100135bc:	1c5d      	adds	r5, r3, #1
100135be:	2331      	movs	r3, #49	; 0x31
100135c0:	7013      	strb	r3, [r2, #0]
100135c2:	9b03      	ldr	r3, [sp, #12]
100135c4:	3301      	adds	r3, #1
100135c6:	9303      	str	r3, [sp, #12]
100135c8:	960a      	str	r6, [sp, #40]	; 0x28
100135ca:	2600      	movs	r6, #0
100135cc:	e0f3      	b.n	100137b6 <_dtoa_r+0xb1e>
100135ce:	9b10      	ldr	r3, [sp, #64]	; 0x40
100135d0:	2b00      	cmp	r3, #0
100135d2:	d104      	bne.n	100135de <_dtoa_r+0x946>
100135d4:	9d0d      	ldr	r5, [sp, #52]	; 0x34
100135d6:	e0b5      	b.n	10013744 <_dtoa_r+0xaac>
100135d8:	9b22      	ldr	r3, [sp, #136]	; 0x88
100135da:	2b02      	cmp	r3, #2
100135dc:	dccf      	bgt.n	1001357e <_dtoa_r+0x8e6>
100135de:	2c00      	cmp	r4, #0
100135e0:	dd05      	ble.n	100135ee <_dtoa_r+0x956>
100135e2:	0031      	movs	r1, r6
100135e4:	0022      	movs	r2, r4
100135e6:	9804      	ldr	r0, [sp, #16]
100135e8:	f000 fcd6 	bl	10013f98 <__lshift>
100135ec:	0006      	movs	r6, r0
100135ee:	960a      	str	r6, [sp, #40]	; 0x28
100135f0:	2d00      	cmp	r5, #0
100135f2:	d012      	beq.n	1001361a <_dtoa_r+0x982>
100135f4:	6871      	ldr	r1, [r6, #4]
100135f6:	9804      	ldr	r0, [sp, #16]
100135f8:	f000 fb0f 	bl	10013c1a <_Balloc>
100135fc:	0031      	movs	r1, r6
100135fe:	0004      	movs	r4, r0
10013600:	6933      	ldr	r3, [r6, #16]
10013602:	310c      	adds	r1, #12
10013604:	1c9a      	adds	r2, r3, #2
10013606:	0092      	lsls	r2, r2, #2
10013608:	300c      	adds	r0, #12
1001360a:	f7fe fb24 	bl	10011c56 <memcpy>
1001360e:	2201      	movs	r2, #1
10013610:	0021      	movs	r1, r4
10013612:	9804      	ldr	r0, [sp, #16]
10013614:	f000 fcc0 	bl	10013f98 <__lshift>
10013618:	900a      	str	r0, [sp, #40]	; 0x28
1001361a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1001361c:	1e7d      	subs	r5, r7, #1
1001361e:	930b      	str	r3, [sp, #44]	; 0x2c
10013620:	195b      	adds	r3, r3, r5
10013622:	930e      	str	r3, [sp, #56]	; 0x38
10013624:	9908      	ldr	r1, [sp, #32]
10013626:	9805      	ldr	r0, [sp, #20]
10013628:	f7ff fab0 	bl	10012b8c <quorem>
1001362c:	0031      	movs	r1, r6
1001362e:	9010      	str	r0, [sp, #64]	; 0x40
10013630:	0004      	movs	r4, r0
10013632:	9805      	ldr	r0, [sp, #20]
10013634:	f000 fd02 	bl	1001403c <__mcmp>
10013638:	9a0a      	ldr	r2, [sp, #40]	; 0x28
1001363a:	0005      	movs	r5, r0
1001363c:	9908      	ldr	r1, [sp, #32]
1001363e:	9804      	ldr	r0, [sp, #16]
10013640:	f000 fd17 	bl	10014072 <__mdiff>
10013644:	2301      	movs	r3, #1
10013646:	930c      	str	r3, [sp, #48]	; 0x30
10013648:	68c3      	ldr	r3, [r0, #12]
1001364a:	3430      	adds	r4, #48	; 0x30
1001364c:	0007      	movs	r7, r0
1001364e:	2b00      	cmp	r3, #0
10013650:	d104      	bne.n	1001365c <_dtoa_r+0x9c4>
10013652:	0001      	movs	r1, r0
10013654:	9805      	ldr	r0, [sp, #20]
10013656:	f000 fcf1 	bl	1001403c <__mcmp>
1001365a:	900c      	str	r0, [sp, #48]	; 0x30
1001365c:	0039      	movs	r1, r7
1001365e:	9804      	ldr	r0, [sp, #16]
10013660:	f000 fb13 	bl	10013c8a <_Bfree>
10013664:	9b0c      	ldr	r3, [sp, #48]	; 0x30
10013666:	9a22      	ldr	r2, [sp, #136]	; 0x88
10013668:	4313      	orrs	r3, r2
1001366a:	d108      	bne.n	1001367e <_dtoa_r+0x9e6>
1001366c:	9a06      	ldr	r2, [sp, #24]
1001366e:	3301      	adds	r3, #1
10013670:	4213      	tst	r3, r2
10013672:	d104      	bne.n	1001367e <_dtoa_r+0x9e6>
10013674:	2c39      	cmp	r4, #57	; 0x39
10013676:	d02a      	beq.n	100136ce <_dtoa_r+0xa36>
10013678:	2d00      	cmp	r5, #0
1001367a:	dc1c      	bgt.n	100136b6 <_dtoa_r+0xa1e>
1001367c:	e01d      	b.n	100136ba <_dtoa_r+0xa22>
1001367e:	2d00      	cmp	r5, #0
10013680:	db06      	blt.n	10013690 <_dtoa_r+0x9f8>
10013682:	9b22      	ldr	r3, [sp, #136]	; 0x88
10013684:	431d      	orrs	r5, r3
10013686:	d11b      	bne.n	100136c0 <_dtoa_r+0xa28>
10013688:	2301      	movs	r3, #1
1001368a:	9a06      	ldr	r2, [sp, #24]
1001368c:	4213      	tst	r3, r2
1001368e:	d117      	bne.n	100136c0 <_dtoa_r+0xa28>
10013690:	9b0c      	ldr	r3, [sp, #48]	; 0x30
10013692:	2b00      	cmp	r3, #0
10013694:	dd11      	ble.n	100136ba <_dtoa_r+0xa22>
10013696:	9905      	ldr	r1, [sp, #20]
10013698:	2201      	movs	r2, #1
1001369a:	9804      	ldr	r0, [sp, #16]
1001369c:	f000 fc7c 	bl	10013f98 <__lshift>
100136a0:	9908      	ldr	r1, [sp, #32]
100136a2:	9005      	str	r0, [sp, #20]
100136a4:	f000 fcca 	bl	1001403c <__mcmp>
100136a8:	2800      	cmp	r0, #0
100136aa:	dc02      	bgt.n	100136b2 <_dtoa_r+0xa1a>
100136ac:	d105      	bne.n	100136ba <_dtoa_r+0xa22>
100136ae:	07e3      	lsls	r3, r4, #31
100136b0:	d503      	bpl.n	100136ba <_dtoa_r+0xa22>
100136b2:	2c39      	cmp	r4, #57	; 0x39
100136b4:	d00b      	beq.n	100136ce <_dtoa_r+0xa36>
100136b6:	9c10      	ldr	r4, [sp, #64]	; 0x40
100136b8:	3431      	adds	r4, #49	; 0x31
100136ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
100136bc:	1c5d      	adds	r5, r3, #1
100136be:	e00f      	b.n	100136e0 <_dtoa_r+0xa48>
100136c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
100136c2:	1c5f      	adds	r7, r3, #1
100136c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
100136c6:	2b00      	cmp	r3, #0
100136c8:	dd0c      	ble.n	100136e4 <_dtoa_r+0xa4c>
100136ca:	2c39      	cmp	r4, #57	; 0x39
100136cc:	d105      	bne.n	100136da <_dtoa_r+0xa42>
100136ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
100136d0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
100136d2:	1c5d      	adds	r5, r3, #1
100136d4:	2339      	movs	r3, #57	; 0x39
100136d6:	7013      	strb	r3, [r2, #0]
100136d8:	e057      	b.n	1001378a <_dtoa_r+0xaf2>
100136da:	003d      	movs	r5, r7
100136dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
100136de:	3401      	adds	r4, #1
100136e0:	701c      	strb	r4, [r3, #0]
100136e2:	e068      	b.n	100137b6 <_dtoa_r+0xb1e>
100136e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
100136e6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
100136e8:	003d      	movs	r5, r7
100136ea:	701c      	strb	r4, [r3, #0]
100136ec:	4293      	cmp	r3, r2
100136ee:	d03c      	beq.n	1001376a <_dtoa_r+0xad2>
100136f0:	2300      	movs	r3, #0
100136f2:	220a      	movs	r2, #10
100136f4:	9905      	ldr	r1, [sp, #20]
100136f6:	9804      	ldr	r0, [sp, #16]
100136f8:	f000 fae0 	bl	10013cbc <__multadd>
100136fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
100136fe:	9005      	str	r0, [sp, #20]
10013700:	429e      	cmp	r6, r3
10013702:	d108      	bne.n	10013716 <_dtoa_r+0xa7e>
10013704:	0031      	movs	r1, r6
10013706:	2300      	movs	r3, #0
10013708:	220a      	movs	r2, #10
1001370a:	9804      	ldr	r0, [sp, #16]
1001370c:	f000 fad6 	bl	10013cbc <__multadd>
10013710:	0006      	movs	r6, r0
10013712:	900a      	str	r0, [sp, #40]	; 0x28
10013714:	e00d      	b.n	10013732 <_dtoa_r+0xa9a>
10013716:	0031      	movs	r1, r6
10013718:	2300      	movs	r3, #0
1001371a:	220a      	movs	r2, #10
1001371c:	9804      	ldr	r0, [sp, #16]
1001371e:	f000 facd 	bl	10013cbc <__multadd>
10013722:	2300      	movs	r3, #0
10013724:	0006      	movs	r6, r0
10013726:	220a      	movs	r2, #10
10013728:	990a      	ldr	r1, [sp, #40]	; 0x28
1001372a:	9804      	ldr	r0, [sp, #16]
1001372c:	f000 fac6 	bl	10013cbc <__multadd>
10013730:	900a      	str	r0, [sp, #40]	; 0x28
10013732:	970b      	str	r7, [sp, #44]	; 0x2c
10013734:	e776      	b.n	10013624 <_dtoa_r+0x98c>
10013736:	2300      	movs	r3, #0
10013738:	220a      	movs	r2, #10
1001373a:	9905      	ldr	r1, [sp, #20]
1001373c:	9804      	ldr	r0, [sp, #16]
1001373e:	f000 fabd 	bl	10013cbc <__multadd>
10013742:	9005      	str	r0, [sp, #20]
10013744:	9908      	ldr	r1, [sp, #32]
10013746:	9805      	ldr	r0, [sp, #20]
10013748:	f7ff fa20 	bl	10012b8c <quorem>
1001374c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1001374e:	3030      	adds	r0, #48	; 0x30
10013750:	7028      	strb	r0, [r5, #0]
10013752:	3501      	adds	r5, #1
10013754:	0004      	movs	r4, r0
10013756:	1aeb      	subs	r3, r5, r3
10013758:	42bb      	cmp	r3, r7
1001375a:	dbec      	blt.n	10013736 <_dtoa_r+0xa9e>
1001375c:	1e3d      	subs	r5, r7, #0
1001375e:	dc00      	bgt.n	10013762 <_dtoa_r+0xaca>
10013760:	2501      	movs	r5, #1
10013762:	960a      	str	r6, [sp, #40]	; 0x28
10013764:	2600      	movs	r6, #0
10013766:	9b0d      	ldr	r3, [sp, #52]	; 0x34
10013768:	195d      	adds	r5, r3, r5
1001376a:	9905      	ldr	r1, [sp, #20]
1001376c:	2201      	movs	r2, #1
1001376e:	9804      	ldr	r0, [sp, #16]
10013770:	f000 fc12 	bl	10013f98 <__lshift>
10013774:	9908      	ldr	r1, [sp, #32]
10013776:	9005      	str	r0, [sp, #20]
10013778:	f000 fc60 	bl	1001403c <__mcmp>
1001377c:	2800      	cmp	r0, #0
1001377e:	dc04      	bgt.n	1001378a <_dtoa_r+0xaf2>
10013780:	d113      	bne.n	100137aa <_dtoa_r+0xb12>
10013782:	07e3      	lsls	r3, r4, #31
10013784:	d401      	bmi.n	1001378a <_dtoa_r+0xaf2>
10013786:	e010      	b.n	100137aa <_dtoa_r+0xb12>
10013788:	001d      	movs	r5, r3
1001378a:	1e6b      	subs	r3, r5, #1
1001378c:	781a      	ldrb	r2, [r3, #0]
1001378e:	2a39      	cmp	r2, #57	; 0x39
10013790:	d108      	bne.n	100137a4 <_dtoa_r+0xb0c>
10013792:	9a0d      	ldr	r2, [sp, #52]	; 0x34
10013794:	429a      	cmp	r2, r3
10013796:	d1f7      	bne.n	10013788 <_dtoa_r+0xaf0>
10013798:	9b03      	ldr	r3, [sp, #12]
1001379a:	3301      	adds	r3, #1
1001379c:	9303      	str	r3, [sp, #12]
1001379e:	2331      	movs	r3, #49	; 0x31
100137a0:	7013      	strb	r3, [r2, #0]
100137a2:	e008      	b.n	100137b6 <_dtoa_r+0xb1e>
100137a4:	3201      	adds	r2, #1
100137a6:	701a      	strb	r2, [r3, #0]
100137a8:	e005      	b.n	100137b6 <_dtoa_r+0xb1e>
100137aa:	1e6b      	subs	r3, r5, #1
100137ac:	781a      	ldrb	r2, [r3, #0]
100137ae:	2a30      	cmp	r2, #48	; 0x30
100137b0:	d101      	bne.n	100137b6 <_dtoa_r+0xb1e>
100137b2:	001d      	movs	r5, r3
100137b4:	e7f9      	b.n	100137aa <_dtoa_r+0xb12>
100137b6:	9908      	ldr	r1, [sp, #32]
100137b8:	9804      	ldr	r0, [sp, #16]
100137ba:	f000 fa66 	bl	10013c8a <_Bfree>
100137be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
100137c0:	2b00      	cmp	r3, #0
100137c2:	d00e      	beq.n	100137e2 <_dtoa_r+0xb4a>
100137c4:	2e00      	cmp	r6, #0
100137c6:	d005      	beq.n	100137d4 <_dtoa_r+0xb3c>
100137c8:	429e      	cmp	r6, r3
100137ca:	d003      	beq.n	100137d4 <_dtoa_r+0xb3c>
100137cc:	0031      	movs	r1, r6
100137ce:	9804      	ldr	r0, [sp, #16]
100137d0:	f000 fa5b 	bl	10013c8a <_Bfree>
100137d4:	990a      	ldr	r1, [sp, #40]	; 0x28
100137d6:	9804      	ldr	r0, [sp, #16]
100137d8:	f000 fa57 	bl	10013c8a <_Bfree>
100137dc:	e001      	b.n	100137e2 <_dtoa_r+0xb4a>
100137de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
100137e0:	9303      	str	r3, [sp, #12]
100137e2:	9804      	ldr	r0, [sp, #16]
100137e4:	9905      	ldr	r1, [sp, #20]
100137e6:	f000 fa50 	bl	10013c8a <_Bfree>
100137ea:	2300      	movs	r3, #0
100137ec:	702b      	strb	r3, [r5, #0]
100137ee:	9b03      	ldr	r3, [sp, #12]
100137f0:	9a24      	ldr	r2, [sp, #144]	; 0x90
100137f2:	3301      	adds	r3, #1
100137f4:	6013      	str	r3, [r2, #0]
100137f6:	9b26      	ldr	r3, [sp, #152]	; 0x98
100137f8:	980d      	ldr	r0, [sp, #52]	; 0x34
100137fa:	2b00      	cmp	r3, #0
100137fc:	d010      	beq.n	10013820 <_dtoa_r+0xb88>
100137fe:	601d      	str	r5, [r3, #0]
10013800:	e00e      	b.n	10013820 <_dtoa_r+0xb88>
10013802:	9b22      	ldr	r3, [sp, #136]	; 0x88
10013804:	2b01      	cmp	r3, #1
10013806:	dc00      	bgt.n	1001380a <_dtoa_r+0xb72>
10013808:	e643      	b.n	10013492 <_dtoa_r+0x7fa>
1001380a:	9d11      	ldr	r5, [sp, #68]	; 0x44
1001380c:	2001      	movs	r0, #1
1001380e:	e665      	b.n	100134dc <_dtoa_r+0x844>
10013810:	2f00      	cmp	r7, #0
10013812:	dd00      	ble.n	10013816 <_dtoa_r+0xb7e>
10013814:	e6de      	b.n	100135d4 <_dtoa_r+0x93c>
10013816:	9b22      	ldr	r3, [sp, #136]	; 0x88
10013818:	2b02      	cmp	r3, #2
1001381a:	dc00      	bgt.n	1001381e <_dtoa_r+0xb86>
1001381c:	e6da      	b.n	100135d4 <_dtoa_r+0x93c>
1001381e:	e6ae      	b.n	1001357e <_dtoa_r+0x8e6>
10013820:	b01d      	add	sp, #116	; 0x74
10013822:	bdf0      	pop	{r4, r5, r6, r7, pc}

10013824 <__sflush_r>:
10013824:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10013826:	898a      	ldrh	r2, [r1, #12]
10013828:	0005      	movs	r5, r0
1001382a:	000c      	movs	r4, r1
1001382c:	0713      	lsls	r3, r2, #28
1001382e:	d45a      	bmi.n	100138e6 <__sflush_r+0xc2>
10013830:	684b      	ldr	r3, [r1, #4]
10013832:	2b00      	cmp	r3, #0
10013834:	dc02      	bgt.n	1001383c <__sflush_r+0x18>
10013836:	6c0b      	ldr	r3, [r1, #64]	; 0x40
10013838:	2b00      	cmp	r3, #0
1001383a:	dd19      	ble.n	10013870 <__sflush_r+0x4c>
1001383c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
1001383e:	2f00      	cmp	r7, #0
10013840:	d016      	beq.n	10013870 <__sflush_r+0x4c>
10013842:	2300      	movs	r3, #0
10013844:	682e      	ldr	r6, [r5, #0]
10013846:	602b      	str	r3, [r5, #0]
10013848:	2380      	movs	r3, #128	; 0x80
1001384a:	015b      	lsls	r3, r3, #5
1001384c:	401a      	ands	r2, r3
1001384e:	d001      	beq.n	10013854 <__sflush_r+0x30>
10013850:	6d60      	ldr	r0, [r4, #84]	; 0x54
10013852:	e014      	b.n	1001387e <__sflush_r+0x5a>
10013854:	2301      	movs	r3, #1
10013856:	6a21      	ldr	r1, [r4, #32]
10013858:	0028      	movs	r0, r5
1001385a:	47b8      	blx	r7
1001385c:	1c43      	adds	r3, r0, #1
1001385e:	d10e      	bne.n	1001387e <__sflush_r+0x5a>
10013860:	682b      	ldr	r3, [r5, #0]
10013862:	2b00      	cmp	r3, #0
10013864:	d00b      	beq.n	1001387e <__sflush_r+0x5a>
10013866:	2b1d      	cmp	r3, #29
10013868:	d001      	beq.n	1001386e <__sflush_r+0x4a>
1001386a:	2b16      	cmp	r3, #22
1001386c:	d102      	bne.n	10013874 <__sflush_r+0x50>
1001386e:	602e      	str	r6, [r5, #0]
10013870:	2000      	movs	r0, #0
10013872:	e05a      	b.n	1001392a <__sflush_r+0x106>
10013874:	2240      	movs	r2, #64	; 0x40
10013876:	89a3      	ldrh	r3, [r4, #12]
10013878:	4313      	orrs	r3, r2
1001387a:	81a3      	strh	r3, [r4, #12]
1001387c:	e055      	b.n	1001392a <__sflush_r+0x106>
1001387e:	89a3      	ldrh	r3, [r4, #12]
10013880:	075b      	lsls	r3, r3, #29
10013882:	d506      	bpl.n	10013892 <__sflush_r+0x6e>
10013884:	6863      	ldr	r3, [r4, #4]
10013886:	1ac0      	subs	r0, r0, r3
10013888:	6b63      	ldr	r3, [r4, #52]	; 0x34
1001388a:	2b00      	cmp	r3, #0
1001388c:	d001      	beq.n	10013892 <__sflush_r+0x6e>
1001388e:	6c23      	ldr	r3, [r4, #64]	; 0x40
10013890:	1ac0      	subs	r0, r0, r3
10013892:	2300      	movs	r3, #0
10013894:	0002      	movs	r2, r0
10013896:	6a21      	ldr	r1, [r4, #32]
10013898:	0028      	movs	r0, r5
1001389a:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
1001389c:	47b8      	blx	r7
1001389e:	89a3      	ldrh	r3, [r4, #12]
100138a0:	1c42      	adds	r2, r0, #1
100138a2:	d106      	bne.n	100138b2 <__sflush_r+0x8e>
100138a4:	6829      	ldr	r1, [r5, #0]
100138a6:	291d      	cmp	r1, #29
100138a8:	d83a      	bhi.n	10013920 <__sflush_r+0xfc>
100138aa:	4a20      	ldr	r2, [pc, #128]	; (1001392c <__sflush_r+0x108>)
100138ac:	40ca      	lsrs	r2, r1
100138ae:	07d2      	lsls	r2, r2, #31
100138b0:	d536      	bpl.n	10013920 <__sflush_r+0xfc>
100138b2:	2200      	movs	r2, #0
100138b4:	6062      	str	r2, [r4, #4]
100138b6:	6922      	ldr	r2, [r4, #16]
100138b8:	6022      	str	r2, [r4, #0]
100138ba:	04db      	lsls	r3, r3, #19
100138bc:	d505      	bpl.n	100138ca <__sflush_r+0xa6>
100138be:	1c43      	adds	r3, r0, #1
100138c0:	d102      	bne.n	100138c8 <__sflush_r+0xa4>
100138c2:	682b      	ldr	r3, [r5, #0]
100138c4:	2b00      	cmp	r3, #0
100138c6:	d100      	bne.n	100138ca <__sflush_r+0xa6>
100138c8:	6560      	str	r0, [r4, #84]	; 0x54
100138ca:	6b61      	ldr	r1, [r4, #52]	; 0x34
100138cc:	602e      	str	r6, [r5, #0]
100138ce:	2900      	cmp	r1, #0
100138d0:	d0ce      	beq.n	10013870 <__sflush_r+0x4c>
100138d2:	0023      	movs	r3, r4
100138d4:	3344      	adds	r3, #68	; 0x44
100138d6:	4299      	cmp	r1, r3
100138d8:	d002      	beq.n	100138e0 <__sflush_r+0xbc>
100138da:	0028      	movs	r0, r5
100138dc:	f7fe f9cc 	bl	10011c78 <_free_r>
100138e0:	2000      	movs	r0, #0
100138e2:	6360      	str	r0, [r4, #52]	; 0x34
100138e4:	e021      	b.n	1001392a <__sflush_r+0x106>
100138e6:	690f      	ldr	r7, [r1, #16]
100138e8:	2f00      	cmp	r7, #0
100138ea:	d0c1      	beq.n	10013870 <__sflush_r+0x4c>
100138ec:	680b      	ldr	r3, [r1, #0]
100138ee:	600f      	str	r7, [r1, #0]
100138f0:	1bdb      	subs	r3, r3, r7
100138f2:	9301      	str	r3, [sp, #4]
100138f4:	2300      	movs	r3, #0
100138f6:	0792      	lsls	r2, r2, #30
100138f8:	d100      	bne.n	100138fc <__sflush_r+0xd8>
100138fa:	694b      	ldr	r3, [r1, #20]
100138fc:	60a3      	str	r3, [r4, #8]
100138fe:	e003      	b.n	10013908 <__sflush_r+0xe4>
10013900:	9b01      	ldr	r3, [sp, #4]
10013902:	183f      	adds	r7, r7, r0
10013904:	1a1b      	subs	r3, r3, r0
10013906:	9301      	str	r3, [sp, #4]
10013908:	9b01      	ldr	r3, [sp, #4]
1001390a:	2b00      	cmp	r3, #0
1001390c:	ddb0      	ble.n	10013870 <__sflush_r+0x4c>
1001390e:	9b01      	ldr	r3, [sp, #4]
10013910:	003a      	movs	r2, r7
10013912:	6a21      	ldr	r1, [r4, #32]
10013914:	0028      	movs	r0, r5
10013916:	6aa6      	ldr	r6, [r4, #40]	; 0x28
10013918:	47b0      	blx	r6
1001391a:	2800      	cmp	r0, #0
1001391c:	dcf0      	bgt.n	10013900 <__sflush_r+0xdc>
1001391e:	89a3      	ldrh	r3, [r4, #12]
10013920:	2240      	movs	r2, #64	; 0x40
10013922:	2001      	movs	r0, #1
10013924:	4313      	orrs	r3, r2
10013926:	81a3      	strh	r3, [r4, #12]
10013928:	4240      	negs	r0, r0
1001392a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1001392c:	20400001 	.word	0x20400001

10013930 <_fflush_r>:
10013930:	690b      	ldr	r3, [r1, #16]
10013932:	b570      	push	{r4, r5, r6, lr}
10013934:	0005      	movs	r5, r0
10013936:	000c      	movs	r4, r1
10013938:	2b00      	cmp	r3, #0
1001393a:	d101      	bne.n	10013940 <_fflush_r+0x10>
1001393c:	2000      	movs	r0, #0
1001393e:	e01c      	b.n	1001397a <_fflush_r+0x4a>
10013940:	2800      	cmp	r0, #0
10013942:	d004      	beq.n	1001394e <_fflush_r+0x1e>
10013944:	6983      	ldr	r3, [r0, #24]
10013946:	2b00      	cmp	r3, #0
10013948:	d101      	bne.n	1001394e <_fflush_r+0x1e>
1001394a:	f000 f85f 	bl	10013a0c <__sinit>
1001394e:	4b0b      	ldr	r3, [pc, #44]	; (1001397c <_fflush_r+0x4c>)
10013950:	429c      	cmp	r4, r3
10013952:	d101      	bne.n	10013958 <_fflush_r+0x28>
10013954:	686c      	ldr	r4, [r5, #4]
10013956:	e008      	b.n	1001396a <_fflush_r+0x3a>
10013958:	4b09      	ldr	r3, [pc, #36]	; (10013980 <_fflush_r+0x50>)
1001395a:	429c      	cmp	r4, r3
1001395c:	d101      	bne.n	10013962 <_fflush_r+0x32>
1001395e:	68ac      	ldr	r4, [r5, #8]
10013960:	e003      	b.n	1001396a <_fflush_r+0x3a>
10013962:	4b08      	ldr	r3, [pc, #32]	; (10013984 <_fflush_r+0x54>)
10013964:	429c      	cmp	r4, r3
10013966:	d100      	bne.n	1001396a <_fflush_r+0x3a>
10013968:	68ec      	ldr	r4, [r5, #12]
1001396a:	220c      	movs	r2, #12
1001396c:	5ea3      	ldrsh	r3, [r4, r2]
1001396e:	2b00      	cmp	r3, #0
10013970:	d0e4      	beq.n	1001393c <_fflush_r+0xc>
10013972:	0021      	movs	r1, r4
10013974:	0028      	movs	r0, r5
10013976:	f7ff ff55 	bl	10013824 <__sflush_r>
1001397a:	bd70      	pop	{r4, r5, r6, pc}
1001397c:	10017b94 	.word	0x10017b94
10013980:	10017bb4 	.word	0x10017bb4
10013984:	10017bd4 	.word	0x10017bd4

10013988 <_cleanup_r>:
10013988:	b510      	push	{r4, lr}
1001398a:	4902      	ldr	r1, [pc, #8]	; (10013994 <_cleanup_r+0xc>)
1001398c:	f000 f8b0 	bl	10013af0 <_fwalk_reent>
10013990:	bd10      	pop	{r4, pc}
10013992:	46c0      	nop			; (mov r8, r8)
10013994:	10013931 	.word	0x10013931

10013998 <std.isra.0>:
10013998:	2300      	movs	r3, #0
1001399a:	b510      	push	{r4, lr}
1001399c:	0004      	movs	r4, r0
1001399e:	6003      	str	r3, [r0, #0]
100139a0:	6043      	str	r3, [r0, #4]
100139a2:	6083      	str	r3, [r0, #8]
100139a4:	8181      	strh	r1, [r0, #12]
100139a6:	6643      	str	r3, [r0, #100]	; 0x64
100139a8:	81c2      	strh	r2, [r0, #14]
100139aa:	6103      	str	r3, [r0, #16]
100139ac:	6143      	str	r3, [r0, #20]
100139ae:	6183      	str	r3, [r0, #24]
100139b0:	0019      	movs	r1, r3
100139b2:	2208      	movs	r2, #8
100139b4:	305c      	adds	r0, #92	; 0x5c
100139b6:	f7fe f957 	bl	10011c68 <memset>
100139ba:	4b05      	ldr	r3, [pc, #20]	; (100139d0 <std.isra.0+0x38>)
100139bc:	6224      	str	r4, [r4, #32]
100139be:	6263      	str	r3, [r4, #36]	; 0x24
100139c0:	4b04      	ldr	r3, [pc, #16]	; (100139d4 <std.isra.0+0x3c>)
100139c2:	62a3      	str	r3, [r4, #40]	; 0x28
100139c4:	4b04      	ldr	r3, [pc, #16]	; (100139d8 <std.isra.0+0x40>)
100139c6:	62e3      	str	r3, [r4, #44]	; 0x2c
100139c8:	4b04      	ldr	r3, [pc, #16]	; (100139dc <std.isra.0+0x44>)
100139ca:	6323      	str	r3, [r4, #48]	; 0x30
100139cc:	bd10      	pop	{r4, pc}
100139ce:	46c0      	nop			; (mov r8, r8)
100139d0:	10014501 	.word	0x10014501
100139d4:	10014529 	.word	0x10014529
100139d8:	10014561 	.word	0x10014561
100139dc:	1001458d 	.word	0x1001458d

100139e0 <__sfmoreglue>:
100139e0:	b570      	push	{r4, r5, r6, lr}
100139e2:	2568      	movs	r5, #104	; 0x68
100139e4:	1e4b      	subs	r3, r1, #1
100139e6:	435d      	muls	r5, r3
100139e8:	000e      	movs	r6, r1
100139ea:	0029      	movs	r1, r5
100139ec:	3174      	adds	r1, #116	; 0x74
100139ee:	f7fe f989 	bl	10011d04 <_malloc_r>
100139f2:	1e04      	subs	r4, r0, #0
100139f4:	d008      	beq.n	10013a08 <__sfmoreglue+0x28>
100139f6:	2100      	movs	r1, #0
100139f8:	002a      	movs	r2, r5
100139fa:	6001      	str	r1, [r0, #0]
100139fc:	6046      	str	r6, [r0, #4]
100139fe:	300c      	adds	r0, #12
10013a00:	60a0      	str	r0, [r4, #8]
10013a02:	3268      	adds	r2, #104	; 0x68
10013a04:	f7fe f930 	bl	10011c68 <memset>
10013a08:	0020      	movs	r0, r4
10013a0a:	bd70      	pop	{r4, r5, r6, pc}

10013a0c <__sinit>:
10013a0c:	6983      	ldr	r3, [r0, #24]
10013a0e:	b513      	push	{r0, r1, r4, lr}
10013a10:	0004      	movs	r4, r0
10013a12:	2b00      	cmp	r3, #0
10013a14:	d128      	bne.n	10013a68 <__sinit+0x5c>
10013a16:	6483      	str	r3, [r0, #72]	; 0x48
10013a18:	64c3      	str	r3, [r0, #76]	; 0x4c
10013a1a:	6503      	str	r3, [r0, #80]	; 0x50
10013a1c:	4b13      	ldr	r3, [pc, #76]	; (10013a6c <__sinit+0x60>)
10013a1e:	4a14      	ldr	r2, [pc, #80]	; (10013a70 <__sinit+0x64>)
10013a20:	681b      	ldr	r3, [r3, #0]
10013a22:	6282      	str	r2, [r0, #40]	; 0x28
10013a24:	9301      	str	r3, [sp, #4]
10013a26:	4298      	cmp	r0, r3
10013a28:	d101      	bne.n	10013a2e <__sinit+0x22>
10013a2a:	2301      	movs	r3, #1
10013a2c:	6183      	str	r3, [r0, #24]
10013a2e:	0020      	movs	r0, r4
10013a30:	f000 f820 	bl	10013a74 <__sfp>
10013a34:	6060      	str	r0, [r4, #4]
10013a36:	0020      	movs	r0, r4
10013a38:	f000 f81c 	bl	10013a74 <__sfp>
10013a3c:	60a0      	str	r0, [r4, #8]
10013a3e:	0020      	movs	r0, r4
10013a40:	f000 f818 	bl	10013a74 <__sfp>
10013a44:	2200      	movs	r2, #0
10013a46:	60e0      	str	r0, [r4, #12]
10013a48:	2104      	movs	r1, #4
10013a4a:	6860      	ldr	r0, [r4, #4]
10013a4c:	f7ff ffa4 	bl	10013998 <std.isra.0>
10013a50:	2201      	movs	r2, #1
10013a52:	2109      	movs	r1, #9
10013a54:	68a0      	ldr	r0, [r4, #8]
10013a56:	f7ff ff9f 	bl	10013998 <std.isra.0>
10013a5a:	2202      	movs	r2, #2
10013a5c:	2112      	movs	r1, #18
10013a5e:	68e0      	ldr	r0, [r4, #12]
10013a60:	f7ff ff9a 	bl	10013998 <std.isra.0>
10013a64:	2301      	movs	r3, #1
10013a66:	61a3      	str	r3, [r4, #24]
10013a68:	bd13      	pop	{r0, r1, r4, pc}
10013a6a:	46c0      	nop			; (mov r8, r8)
10013a6c:	10017b4c 	.word	0x10017b4c
10013a70:	10013989 	.word	0x10013989

10013a74 <__sfp>:
10013a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10013a76:	4b1d      	ldr	r3, [pc, #116]	; (10013aec <__sfp+0x78>)
10013a78:	0006      	movs	r6, r0
10013a7a:	681d      	ldr	r5, [r3, #0]
10013a7c:	69ab      	ldr	r3, [r5, #24]
10013a7e:	2b00      	cmp	r3, #0
10013a80:	d102      	bne.n	10013a88 <__sfp+0x14>
10013a82:	0028      	movs	r0, r5
10013a84:	f7ff ffc2 	bl	10013a0c <__sinit>
10013a88:	3548      	adds	r5, #72	; 0x48
10013a8a:	68ac      	ldr	r4, [r5, #8]
10013a8c:	686b      	ldr	r3, [r5, #4]
10013a8e:	3b01      	subs	r3, #1
10013a90:	d405      	bmi.n	10013a9e <__sfp+0x2a>
10013a92:	220c      	movs	r2, #12
10013a94:	5ea7      	ldrsh	r7, [r4, r2]
10013a96:	2f00      	cmp	r7, #0
10013a98:	d010      	beq.n	10013abc <__sfp+0x48>
10013a9a:	3468      	adds	r4, #104	; 0x68
10013a9c:	e7f7      	b.n	10013a8e <__sfp+0x1a>
10013a9e:	682b      	ldr	r3, [r5, #0]
10013aa0:	2b00      	cmp	r3, #0
10013aa2:	d001      	beq.n	10013aa8 <__sfp+0x34>
10013aa4:	682d      	ldr	r5, [r5, #0]
10013aa6:	e7f0      	b.n	10013a8a <__sfp+0x16>
10013aa8:	2104      	movs	r1, #4
10013aaa:	0030      	movs	r0, r6
10013aac:	f7ff ff98 	bl	100139e0 <__sfmoreglue>
10013ab0:	6028      	str	r0, [r5, #0]
10013ab2:	2800      	cmp	r0, #0
10013ab4:	d1f6      	bne.n	10013aa4 <__sfp+0x30>
10013ab6:	230c      	movs	r3, #12
10013ab8:	6033      	str	r3, [r6, #0]
10013aba:	e016      	b.n	10013aea <__sfp+0x76>
10013abc:	2301      	movs	r3, #1
10013abe:	0020      	movs	r0, r4
10013ac0:	425b      	negs	r3, r3
10013ac2:	81e3      	strh	r3, [r4, #14]
10013ac4:	3302      	adds	r3, #2
10013ac6:	81a3      	strh	r3, [r4, #12]
10013ac8:	6667      	str	r7, [r4, #100]	; 0x64
10013aca:	6027      	str	r7, [r4, #0]
10013acc:	60a7      	str	r7, [r4, #8]
10013ace:	6067      	str	r7, [r4, #4]
10013ad0:	6127      	str	r7, [r4, #16]
10013ad2:	6167      	str	r7, [r4, #20]
10013ad4:	61a7      	str	r7, [r4, #24]
10013ad6:	305c      	adds	r0, #92	; 0x5c
10013ad8:	2208      	movs	r2, #8
10013ada:	0039      	movs	r1, r7
10013adc:	f7fe f8c4 	bl	10011c68 <memset>
10013ae0:	0020      	movs	r0, r4
10013ae2:	6367      	str	r7, [r4, #52]	; 0x34
10013ae4:	63a7      	str	r7, [r4, #56]	; 0x38
10013ae6:	64a7      	str	r7, [r4, #72]	; 0x48
10013ae8:	64e7      	str	r7, [r4, #76]	; 0x4c
10013aea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10013aec:	10017b4c 	.word	0x10017b4c

10013af0 <_fwalk_reent>:
10013af0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10013af2:	0004      	movs	r4, r0
10013af4:	0007      	movs	r7, r0
10013af6:	2600      	movs	r6, #0
10013af8:	9101      	str	r1, [sp, #4]
10013afa:	3448      	adds	r4, #72	; 0x48
10013afc:	2c00      	cmp	r4, #0
10013afe:	d016      	beq.n	10013b2e <_fwalk_reent+0x3e>
10013b00:	6863      	ldr	r3, [r4, #4]
10013b02:	68a5      	ldr	r5, [r4, #8]
10013b04:	9300      	str	r3, [sp, #0]
10013b06:	9b00      	ldr	r3, [sp, #0]
10013b08:	3b01      	subs	r3, #1
10013b0a:	9300      	str	r3, [sp, #0]
10013b0c:	d40d      	bmi.n	10013b2a <_fwalk_reent+0x3a>
10013b0e:	89ab      	ldrh	r3, [r5, #12]
10013b10:	2b01      	cmp	r3, #1
10013b12:	d908      	bls.n	10013b26 <_fwalk_reent+0x36>
10013b14:	220e      	movs	r2, #14
10013b16:	5eab      	ldrsh	r3, [r5, r2]
10013b18:	3301      	adds	r3, #1
10013b1a:	d004      	beq.n	10013b26 <_fwalk_reent+0x36>
10013b1c:	0029      	movs	r1, r5
10013b1e:	0038      	movs	r0, r7
10013b20:	9b01      	ldr	r3, [sp, #4]
10013b22:	4798      	blx	r3
10013b24:	4306      	orrs	r6, r0
10013b26:	3568      	adds	r5, #104	; 0x68
10013b28:	e7ed      	b.n	10013b06 <_fwalk_reent+0x16>
10013b2a:	6824      	ldr	r4, [r4, #0]
10013b2c:	e7e6      	b.n	10013afc <_fwalk_reent+0xc>
10013b2e:	0030      	movs	r0, r6
10013b30:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

10013b34 <_localeconv_r>:
10013b34:	4800      	ldr	r0, [pc, #0]	; (10013b38 <_localeconv_r+0x4>)
10013b36:	4770      	bx	lr
10013b38:	10017ee0 	.word	0x10017ee0

10013b3c <__swhatbuf_r>:
10013b3c:	b570      	push	{r4, r5, r6, lr}
10013b3e:	000e      	movs	r6, r1
10013b40:	001d      	movs	r5, r3
10013b42:	230e      	movs	r3, #14
10013b44:	5ec9      	ldrsh	r1, [r1, r3]
10013b46:	b090      	sub	sp, #64	; 0x40
10013b48:	0014      	movs	r4, r2
10013b4a:	2900      	cmp	r1, #0
10013b4c:	da06      	bge.n	10013b5c <__swhatbuf_r+0x20>
10013b4e:	2300      	movs	r3, #0
10013b50:	602b      	str	r3, [r5, #0]
10013b52:	89b3      	ldrh	r3, [r6, #12]
10013b54:	061b      	lsls	r3, r3, #24
10013b56:	d50f      	bpl.n	10013b78 <__swhatbuf_r+0x3c>
10013b58:	2340      	movs	r3, #64	; 0x40
10013b5a:	e00f      	b.n	10013b7c <__swhatbuf_r+0x40>
10013b5c:	aa01      	add	r2, sp, #4
10013b5e:	f000 fd41 	bl	100145e4 <_fstat_r>
10013b62:	2800      	cmp	r0, #0
10013b64:	dbf3      	blt.n	10013b4e <__swhatbuf_r+0x12>
10013b66:	23f0      	movs	r3, #240	; 0xf0
10013b68:	9a02      	ldr	r2, [sp, #8]
10013b6a:	021b      	lsls	r3, r3, #8
10013b6c:	4013      	ands	r3, r2
10013b6e:	4a05      	ldr	r2, [pc, #20]	; (10013b84 <__swhatbuf_r+0x48>)
10013b70:	189b      	adds	r3, r3, r2
10013b72:	425a      	negs	r2, r3
10013b74:	4153      	adcs	r3, r2
10013b76:	602b      	str	r3, [r5, #0]
10013b78:	2380      	movs	r3, #128	; 0x80
10013b7a:	00db      	lsls	r3, r3, #3
10013b7c:	2000      	movs	r0, #0
10013b7e:	6023      	str	r3, [r4, #0]
10013b80:	b010      	add	sp, #64	; 0x40
10013b82:	bd70      	pop	{r4, r5, r6, pc}
10013b84:	ffffe000 	.word	0xffffe000

10013b88 <__smakebuf_r>:
10013b88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10013b8a:	2602      	movs	r6, #2
10013b8c:	898b      	ldrh	r3, [r1, #12]
10013b8e:	0005      	movs	r5, r0
10013b90:	000c      	movs	r4, r1
10013b92:	4233      	tst	r3, r6
10013b94:	d110      	bne.n	10013bb8 <__smakebuf_r+0x30>
10013b96:	ab01      	add	r3, sp, #4
10013b98:	466a      	mov	r2, sp
10013b9a:	f7ff ffcf 	bl	10013b3c <__swhatbuf_r>
10013b9e:	9900      	ldr	r1, [sp, #0]
10013ba0:	0007      	movs	r7, r0
10013ba2:	0028      	movs	r0, r5
10013ba4:	f7fe f8ae 	bl	10011d04 <_malloc_r>
10013ba8:	2800      	cmp	r0, #0
10013baa:	d10c      	bne.n	10013bc6 <__smakebuf_r+0x3e>
10013bac:	220c      	movs	r2, #12
10013bae:	5ea3      	ldrsh	r3, [r4, r2]
10013bb0:	059a      	lsls	r2, r3, #22
10013bb2:	d423      	bmi.n	10013bfc <__smakebuf_r+0x74>
10013bb4:	4333      	orrs	r3, r6
10013bb6:	81a3      	strh	r3, [r4, #12]
10013bb8:	0023      	movs	r3, r4
10013bba:	3347      	adds	r3, #71	; 0x47
10013bbc:	6023      	str	r3, [r4, #0]
10013bbe:	6123      	str	r3, [r4, #16]
10013bc0:	2301      	movs	r3, #1
10013bc2:	6163      	str	r3, [r4, #20]
10013bc4:	e01a      	b.n	10013bfc <__smakebuf_r+0x74>
10013bc6:	2280      	movs	r2, #128	; 0x80
10013bc8:	4b0d      	ldr	r3, [pc, #52]	; (10013c00 <__smakebuf_r+0x78>)
10013bca:	62ab      	str	r3, [r5, #40]	; 0x28
10013bcc:	89a3      	ldrh	r3, [r4, #12]
10013bce:	6020      	str	r0, [r4, #0]
10013bd0:	4313      	orrs	r3, r2
10013bd2:	81a3      	strh	r3, [r4, #12]
10013bd4:	9b00      	ldr	r3, [sp, #0]
10013bd6:	6120      	str	r0, [r4, #16]
10013bd8:	6163      	str	r3, [r4, #20]
10013bda:	9b01      	ldr	r3, [sp, #4]
10013bdc:	2b00      	cmp	r3, #0
10013bde:	d00a      	beq.n	10013bf6 <__smakebuf_r+0x6e>
10013be0:	230e      	movs	r3, #14
10013be2:	5ee1      	ldrsh	r1, [r4, r3]
10013be4:	0028      	movs	r0, r5
10013be6:	f000 fd0f 	bl	10014608 <_isatty_r>
10013bea:	2800      	cmp	r0, #0
10013bec:	d003      	beq.n	10013bf6 <__smakebuf_r+0x6e>
10013bee:	2201      	movs	r2, #1
10013bf0:	89a3      	ldrh	r3, [r4, #12]
10013bf2:	4313      	orrs	r3, r2
10013bf4:	81a3      	strh	r3, [r4, #12]
10013bf6:	89a3      	ldrh	r3, [r4, #12]
10013bf8:	431f      	orrs	r7, r3
10013bfa:	81a7      	strh	r7, [r4, #12]
10013bfc:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
10013bfe:	46c0      	nop			; (mov r8, r8)
10013c00:	10013989 	.word	0x10013989

10013c04 <memchr>:
10013c04:	b2c9      	uxtb	r1, r1
10013c06:	1882      	adds	r2, r0, r2
10013c08:	4290      	cmp	r0, r2
10013c0a:	d004      	beq.n	10013c16 <memchr+0x12>
10013c0c:	7803      	ldrb	r3, [r0, #0]
10013c0e:	428b      	cmp	r3, r1
10013c10:	d002      	beq.n	10013c18 <memchr+0x14>
10013c12:	3001      	adds	r0, #1
10013c14:	e7f8      	b.n	10013c08 <memchr+0x4>
10013c16:	2000      	movs	r0, #0
10013c18:	4770      	bx	lr

10013c1a <_Balloc>:
10013c1a:	b570      	push	{r4, r5, r6, lr}
10013c1c:	6a46      	ldr	r6, [r0, #36]	; 0x24
10013c1e:	0004      	movs	r4, r0
10013c20:	000d      	movs	r5, r1
10013c22:	2e00      	cmp	r6, #0
10013c24:	d107      	bne.n	10013c36 <_Balloc+0x1c>
10013c26:	2010      	movs	r0, #16
10013c28:	f7fd fffc 	bl	10011c24 <malloc>
10013c2c:	6260      	str	r0, [r4, #36]	; 0x24
10013c2e:	6046      	str	r6, [r0, #4]
10013c30:	6086      	str	r6, [r0, #8]
10013c32:	6006      	str	r6, [r0, #0]
10013c34:	60c6      	str	r6, [r0, #12]
10013c36:	6a66      	ldr	r6, [r4, #36]	; 0x24
10013c38:	68f3      	ldr	r3, [r6, #12]
10013c3a:	2b00      	cmp	r3, #0
10013c3c:	d009      	beq.n	10013c52 <_Balloc+0x38>
10013c3e:	6a63      	ldr	r3, [r4, #36]	; 0x24
10013c40:	00aa      	lsls	r2, r5, #2
10013c42:	68db      	ldr	r3, [r3, #12]
10013c44:	189b      	adds	r3, r3, r2
10013c46:	6818      	ldr	r0, [r3, #0]
10013c48:	2800      	cmp	r0, #0
10013c4a:	d00e      	beq.n	10013c6a <_Balloc+0x50>
10013c4c:	6802      	ldr	r2, [r0, #0]
10013c4e:	601a      	str	r2, [r3, #0]
10013c50:	e017      	b.n	10013c82 <_Balloc+0x68>
10013c52:	2221      	movs	r2, #33	; 0x21
10013c54:	2104      	movs	r1, #4
10013c56:	0020      	movs	r0, r4
10013c58:	f000 faca 	bl	100141f0 <_calloc_r>
10013c5c:	6a63      	ldr	r3, [r4, #36]	; 0x24
10013c5e:	60f0      	str	r0, [r6, #12]
10013c60:	68db      	ldr	r3, [r3, #12]
10013c62:	2b00      	cmp	r3, #0
10013c64:	d1eb      	bne.n	10013c3e <_Balloc+0x24>
10013c66:	2000      	movs	r0, #0
10013c68:	e00e      	b.n	10013c88 <_Balloc+0x6e>
10013c6a:	2101      	movs	r1, #1
10013c6c:	000e      	movs	r6, r1
10013c6e:	40ae      	lsls	r6, r5
10013c70:	1d72      	adds	r2, r6, #5
10013c72:	0092      	lsls	r2, r2, #2
10013c74:	0020      	movs	r0, r4
10013c76:	f000 fabb 	bl	100141f0 <_calloc_r>
10013c7a:	2800      	cmp	r0, #0
10013c7c:	d0f3      	beq.n	10013c66 <_Balloc+0x4c>
10013c7e:	6045      	str	r5, [r0, #4]
10013c80:	6086      	str	r6, [r0, #8]
10013c82:	2300      	movs	r3, #0
10013c84:	6103      	str	r3, [r0, #16]
10013c86:	60c3      	str	r3, [r0, #12]
10013c88:	bd70      	pop	{r4, r5, r6, pc}

10013c8a <_Bfree>:
10013c8a:	b570      	push	{r4, r5, r6, lr}
10013c8c:	6a45      	ldr	r5, [r0, #36]	; 0x24
10013c8e:	0006      	movs	r6, r0
10013c90:	000c      	movs	r4, r1
10013c92:	2d00      	cmp	r5, #0
10013c94:	d107      	bne.n	10013ca6 <_Bfree+0x1c>
10013c96:	2010      	movs	r0, #16
10013c98:	f7fd ffc4 	bl	10011c24 <malloc>
10013c9c:	6270      	str	r0, [r6, #36]	; 0x24
10013c9e:	6045      	str	r5, [r0, #4]
10013ca0:	6085      	str	r5, [r0, #8]
10013ca2:	6005      	str	r5, [r0, #0]
10013ca4:	60c5      	str	r5, [r0, #12]
10013ca6:	2c00      	cmp	r4, #0
10013ca8:	d007      	beq.n	10013cba <_Bfree+0x30>
10013caa:	6a72      	ldr	r2, [r6, #36]	; 0x24
10013cac:	6863      	ldr	r3, [r4, #4]
10013cae:	68d2      	ldr	r2, [r2, #12]
10013cb0:	009b      	lsls	r3, r3, #2
10013cb2:	18d3      	adds	r3, r2, r3
10013cb4:	681a      	ldr	r2, [r3, #0]
10013cb6:	6022      	str	r2, [r4, #0]
10013cb8:	601c      	str	r4, [r3, #0]
10013cba:	bd70      	pop	{r4, r5, r6, pc}

10013cbc <__multadd>:
10013cbc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10013cbe:	0007      	movs	r7, r0
10013cc0:	0008      	movs	r0, r1
10013cc2:	000c      	movs	r4, r1
10013cc4:	690d      	ldr	r5, [r1, #16]
10013cc6:	001e      	movs	r6, r3
10013cc8:	2100      	movs	r1, #0
10013cca:	9201      	str	r2, [sp, #4]
10013ccc:	3014      	adds	r0, #20
10013cce:	9a01      	ldr	r2, [sp, #4]
10013cd0:	8803      	ldrh	r3, [r0, #0]
10013cd2:	3101      	adds	r1, #1
10013cd4:	4353      	muls	r3, r2
10013cd6:	199b      	adds	r3, r3, r6
10013cd8:	6806      	ldr	r6, [r0, #0]
10013cda:	0c36      	lsrs	r6, r6, #16
10013cdc:	4356      	muls	r6, r2
10013cde:	0c1a      	lsrs	r2, r3, #16
10013ce0:	4694      	mov	ip, r2
10013ce2:	44b4      	add	ip, r6
10013ce4:	4662      	mov	r2, ip
10013ce6:	0c16      	lsrs	r6, r2, #16
10013ce8:	0412      	lsls	r2, r2, #16
10013cea:	4694      	mov	ip, r2
10013cec:	b29b      	uxth	r3, r3
10013cee:	4463      	add	r3, ip
10013cf0:	c008      	stmia	r0!, {r3}
10013cf2:	428d      	cmp	r5, r1
10013cf4:	dceb      	bgt.n	10013cce <__multadd+0x12>
10013cf6:	2e00      	cmp	r6, #0
10013cf8:	d01b      	beq.n	10013d32 <__multadd+0x76>
10013cfa:	68a3      	ldr	r3, [r4, #8]
10013cfc:	429d      	cmp	r5, r3
10013cfe:	db12      	blt.n	10013d26 <__multadd+0x6a>
10013d00:	6863      	ldr	r3, [r4, #4]
10013d02:	0038      	movs	r0, r7
10013d04:	1c59      	adds	r1, r3, #1
10013d06:	f7ff ff88 	bl	10013c1a <_Balloc>
10013d0a:	0021      	movs	r1, r4
10013d0c:	6923      	ldr	r3, [r4, #16]
10013d0e:	9001      	str	r0, [sp, #4]
10013d10:	1c9a      	adds	r2, r3, #2
10013d12:	0092      	lsls	r2, r2, #2
10013d14:	310c      	adds	r1, #12
10013d16:	300c      	adds	r0, #12
10013d18:	f7fd ff9d 	bl	10011c56 <memcpy>
10013d1c:	0021      	movs	r1, r4
10013d1e:	0038      	movs	r0, r7
10013d20:	f7ff ffb3 	bl	10013c8a <_Bfree>
10013d24:	9c01      	ldr	r4, [sp, #4]
10013d26:	1d2b      	adds	r3, r5, #4
10013d28:	009b      	lsls	r3, r3, #2
10013d2a:	18e3      	adds	r3, r4, r3
10013d2c:	3501      	adds	r5, #1
10013d2e:	605e      	str	r6, [r3, #4]
10013d30:	6125      	str	r5, [r4, #16]
10013d32:	0020      	movs	r0, r4
10013d34:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

10013d36 <__hi0bits>:
10013d36:	2200      	movs	r2, #0
10013d38:	0003      	movs	r3, r0
10013d3a:	0c01      	lsrs	r1, r0, #16
10013d3c:	4291      	cmp	r1, r2
10013d3e:	d101      	bne.n	10013d44 <__hi0bits+0xe>
10013d40:	0403      	lsls	r3, r0, #16
10013d42:	3210      	adds	r2, #16
10013d44:	0e19      	lsrs	r1, r3, #24
10013d46:	d101      	bne.n	10013d4c <__hi0bits+0x16>
10013d48:	3208      	adds	r2, #8
10013d4a:	021b      	lsls	r3, r3, #8
10013d4c:	0f19      	lsrs	r1, r3, #28
10013d4e:	d101      	bne.n	10013d54 <__hi0bits+0x1e>
10013d50:	3204      	adds	r2, #4
10013d52:	011b      	lsls	r3, r3, #4
10013d54:	0f99      	lsrs	r1, r3, #30
10013d56:	d101      	bne.n	10013d5c <__hi0bits+0x26>
10013d58:	3202      	adds	r2, #2
10013d5a:	009b      	lsls	r3, r3, #2
10013d5c:	0010      	movs	r0, r2
10013d5e:	2b00      	cmp	r3, #0
10013d60:	db03      	blt.n	10013d6a <__hi0bits+0x34>
10013d62:	2020      	movs	r0, #32
10013d64:	005b      	lsls	r3, r3, #1
10013d66:	d500      	bpl.n	10013d6a <__hi0bits+0x34>
10013d68:	1c50      	adds	r0, r2, #1
10013d6a:	4770      	bx	lr

10013d6c <__lo0bits>:
10013d6c:	2207      	movs	r2, #7
10013d6e:	6803      	ldr	r3, [r0, #0]
10013d70:	b510      	push	{r4, lr}
10013d72:	0001      	movs	r1, r0
10013d74:	401a      	ands	r2, r3
10013d76:	d00c      	beq.n	10013d92 <__lo0bits+0x26>
10013d78:	2401      	movs	r4, #1
10013d7a:	2000      	movs	r0, #0
10013d7c:	4223      	tst	r3, r4
10013d7e:	d123      	bne.n	10013dc8 <__lo0bits+0x5c>
10013d80:	2202      	movs	r2, #2
10013d82:	4213      	tst	r3, r2
10013d84:	d003      	beq.n	10013d8e <__lo0bits+0x22>
10013d86:	40e3      	lsrs	r3, r4
10013d88:	0020      	movs	r0, r4
10013d8a:	600b      	str	r3, [r1, #0]
10013d8c:	e01c      	b.n	10013dc8 <__lo0bits+0x5c>
10013d8e:	089b      	lsrs	r3, r3, #2
10013d90:	e018      	b.n	10013dc4 <__lo0bits+0x58>
10013d92:	b298      	uxth	r0, r3
10013d94:	2800      	cmp	r0, #0
10013d96:	d101      	bne.n	10013d9c <__lo0bits+0x30>
10013d98:	2210      	movs	r2, #16
10013d9a:	0c1b      	lsrs	r3, r3, #16
10013d9c:	b2d8      	uxtb	r0, r3
10013d9e:	2800      	cmp	r0, #0
10013da0:	d101      	bne.n	10013da6 <__lo0bits+0x3a>
10013da2:	3208      	adds	r2, #8
10013da4:	0a1b      	lsrs	r3, r3, #8
10013da6:	0718      	lsls	r0, r3, #28
10013da8:	d101      	bne.n	10013dae <__lo0bits+0x42>
10013daa:	3204      	adds	r2, #4
10013dac:	091b      	lsrs	r3, r3, #4
10013dae:	0798      	lsls	r0, r3, #30
10013db0:	d101      	bne.n	10013db6 <__lo0bits+0x4a>
10013db2:	3202      	adds	r2, #2
10013db4:	089b      	lsrs	r3, r3, #2
10013db6:	07d8      	lsls	r0, r3, #31
10013db8:	d404      	bmi.n	10013dc4 <__lo0bits+0x58>
10013dba:	085b      	lsrs	r3, r3, #1
10013dbc:	2020      	movs	r0, #32
10013dbe:	2b00      	cmp	r3, #0
10013dc0:	d002      	beq.n	10013dc8 <__lo0bits+0x5c>
10013dc2:	3201      	adds	r2, #1
10013dc4:	0010      	movs	r0, r2
10013dc6:	600b      	str	r3, [r1, #0]
10013dc8:	bd10      	pop	{r4, pc}

10013dca <__i2b>:
10013dca:	b510      	push	{r4, lr}
10013dcc:	000c      	movs	r4, r1
10013dce:	2101      	movs	r1, #1
10013dd0:	f7ff ff23 	bl	10013c1a <_Balloc>
10013dd4:	2301      	movs	r3, #1
10013dd6:	6144      	str	r4, [r0, #20]
10013dd8:	6103      	str	r3, [r0, #16]
10013dda:	bd10      	pop	{r4, pc}

10013ddc <__multiply>:
10013ddc:	b5f0      	push	{r4, r5, r6, r7, lr}
10013dde:	690b      	ldr	r3, [r1, #16]
10013de0:	0014      	movs	r4, r2
10013de2:	6912      	ldr	r2, [r2, #16]
10013de4:	b089      	sub	sp, #36	; 0x24
10013de6:	000d      	movs	r5, r1
10013de8:	4293      	cmp	r3, r2
10013dea:	da01      	bge.n	10013df0 <__multiply+0x14>
10013dec:	0025      	movs	r5, r4
10013dee:	000c      	movs	r4, r1
10013df0:	692f      	ldr	r7, [r5, #16]
10013df2:	6926      	ldr	r6, [r4, #16]
10013df4:	68aa      	ldr	r2, [r5, #8]
10013df6:	19bb      	adds	r3, r7, r6
10013df8:	6869      	ldr	r1, [r5, #4]
10013dfa:	9301      	str	r3, [sp, #4]
10013dfc:	4293      	cmp	r3, r2
10013dfe:	dd00      	ble.n	10013e02 <__multiply+0x26>
10013e00:	3101      	adds	r1, #1
10013e02:	f7ff ff0a 	bl	10013c1a <_Balloc>
10013e06:	0002      	movs	r2, r0
10013e08:	19bb      	adds	r3, r7, r6
10013e0a:	3214      	adds	r2, #20
10013e0c:	009b      	lsls	r3, r3, #2
10013e0e:	18d3      	adds	r3, r2, r3
10013e10:	469c      	mov	ip, r3
10013e12:	2100      	movs	r1, #0
10013e14:	0013      	movs	r3, r2
10013e16:	9002      	str	r0, [sp, #8]
10013e18:	4563      	cmp	r3, ip
10013e1a:	d201      	bcs.n	10013e20 <__multiply+0x44>
10013e1c:	c302      	stmia	r3!, {r1}
10013e1e:	e7fb      	b.n	10013e18 <__multiply+0x3c>
10013e20:	3514      	adds	r5, #20
10013e22:	00bf      	lsls	r7, r7, #2
10013e24:	19eb      	adds	r3, r5, r7
10013e26:	3414      	adds	r4, #20
10013e28:	00b6      	lsls	r6, r6, #2
10013e2a:	9305      	str	r3, [sp, #20]
10013e2c:	19a3      	adds	r3, r4, r6
10013e2e:	9503      	str	r5, [sp, #12]
10013e30:	9307      	str	r3, [sp, #28]
10013e32:	9b07      	ldr	r3, [sp, #28]
10013e34:	429c      	cmp	r4, r3
10013e36:	d251      	bcs.n	10013edc <__multiply+0x100>
10013e38:	8820      	ldrh	r0, [r4, #0]
10013e3a:	2800      	cmp	r0, #0
10013e3c:	d01e      	beq.n	10013e7c <__multiply+0xa0>
10013e3e:	0015      	movs	r5, r2
10013e40:	2600      	movs	r6, #0
10013e42:	9f03      	ldr	r7, [sp, #12]
10013e44:	cf08      	ldmia	r7!, {r3}
10013e46:	9506      	str	r5, [sp, #24]
10013e48:	9304      	str	r3, [sp, #16]
10013e4a:	466b      	mov	r3, sp
10013e4c:	8a1b      	ldrh	r3, [r3, #16]
10013e4e:	4343      	muls	r3, r0
10013e50:	0019      	movs	r1, r3
10013e52:	882b      	ldrh	r3, [r5, #0]
10013e54:	18cb      	adds	r3, r1, r3
10013e56:	9904      	ldr	r1, [sp, #16]
10013e58:	199b      	adds	r3, r3, r6
10013e5a:	0c09      	lsrs	r1, r1, #16
10013e5c:	4341      	muls	r1, r0
10013e5e:	682e      	ldr	r6, [r5, #0]
10013e60:	0c36      	lsrs	r6, r6, #16
10013e62:	1989      	adds	r1, r1, r6
10013e64:	0c1e      	lsrs	r6, r3, #16
10013e66:	1989      	adds	r1, r1, r6
10013e68:	0c0e      	lsrs	r6, r1, #16
10013e6a:	b29b      	uxth	r3, r3
10013e6c:	0409      	lsls	r1, r1, #16
10013e6e:	430b      	orrs	r3, r1
10013e70:	c508      	stmia	r5!, {r3}
10013e72:	9b05      	ldr	r3, [sp, #20]
10013e74:	42bb      	cmp	r3, r7
10013e76:	d8e5      	bhi.n	10013e44 <__multiply+0x68>
10013e78:	9b06      	ldr	r3, [sp, #24]
10013e7a:	605e      	str	r6, [r3, #4]
10013e7c:	6823      	ldr	r3, [r4, #0]
10013e7e:	0c1d      	lsrs	r5, r3, #16
10013e80:	d01f      	beq.n	10013ec2 <__multiply+0xe6>
10013e82:	2100      	movs	r1, #0
10013e84:	0010      	movs	r0, r2
10013e86:	6813      	ldr	r3, [r2, #0]
10013e88:	9f03      	ldr	r7, [sp, #12]
10013e8a:	9104      	str	r1, [sp, #16]
10013e8c:	883e      	ldrh	r6, [r7, #0]
10013e8e:	6801      	ldr	r1, [r0, #0]
10013e90:	436e      	muls	r6, r5
10013e92:	0c09      	lsrs	r1, r1, #16
10013e94:	1871      	adds	r1, r6, r1
10013e96:	9e04      	ldr	r6, [sp, #16]
10013e98:	b29b      	uxth	r3, r3
10013e9a:	1989      	adds	r1, r1, r6
10013e9c:	040e      	lsls	r6, r1, #16
10013e9e:	4333      	orrs	r3, r6
10013ea0:	6003      	str	r3, [r0, #0]
10013ea2:	cf08      	ldmia	r7!, {r3}
10013ea4:	8886      	ldrh	r6, [r0, #4]
10013ea6:	0c1b      	lsrs	r3, r3, #16
10013ea8:	436b      	muls	r3, r5
10013eaa:	0c09      	lsrs	r1, r1, #16
10013eac:	199b      	adds	r3, r3, r6
10013eae:	185b      	adds	r3, r3, r1
10013eb0:	0c19      	lsrs	r1, r3, #16
10013eb2:	9104      	str	r1, [sp, #16]
10013eb4:	9905      	ldr	r1, [sp, #20]
10013eb6:	9006      	str	r0, [sp, #24]
10013eb8:	3004      	adds	r0, #4
10013eba:	42b9      	cmp	r1, r7
10013ebc:	d8e6      	bhi.n	10013e8c <__multiply+0xb0>
10013ebe:	9906      	ldr	r1, [sp, #24]
10013ec0:	604b      	str	r3, [r1, #4]
10013ec2:	3404      	adds	r4, #4
10013ec4:	3204      	adds	r2, #4
10013ec6:	e7b4      	b.n	10013e32 <__multiply+0x56>
10013ec8:	2304      	movs	r3, #4
10013eca:	425b      	negs	r3, r3
10013ecc:	449c      	add	ip, r3
10013ece:	4663      	mov	r3, ip
10013ed0:	681b      	ldr	r3, [r3, #0]
10013ed2:	2b00      	cmp	r3, #0
10013ed4:	d105      	bne.n	10013ee2 <__multiply+0x106>
10013ed6:	9b01      	ldr	r3, [sp, #4]
10013ed8:	3b01      	subs	r3, #1
10013eda:	9301      	str	r3, [sp, #4]
10013edc:	9b01      	ldr	r3, [sp, #4]
10013ede:	2b00      	cmp	r3, #0
10013ee0:	dcf2      	bgt.n	10013ec8 <__multiply+0xec>
10013ee2:	9b02      	ldr	r3, [sp, #8]
10013ee4:	9a01      	ldr	r2, [sp, #4]
10013ee6:	0018      	movs	r0, r3
10013ee8:	611a      	str	r2, [r3, #16]
10013eea:	b009      	add	sp, #36	; 0x24
10013eec:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

10013ef0 <__pow5mult>:
10013ef0:	2303      	movs	r3, #3
10013ef2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10013ef4:	4013      	ands	r3, r2
10013ef6:	0005      	movs	r5, r0
10013ef8:	000e      	movs	r6, r1
10013efa:	0014      	movs	r4, r2
10013efc:	2b00      	cmp	r3, #0
10013efe:	d008      	beq.n	10013f12 <__pow5mult+0x22>
10013f00:	4923      	ldr	r1, [pc, #140]	; (10013f90 <__pow5mult+0xa0>)
10013f02:	3b01      	subs	r3, #1
10013f04:	009a      	lsls	r2, r3, #2
10013f06:	5852      	ldr	r2, [r2, r1]
10013f08:	2300      	movs	r3, #0
10013f0a:	0031      	movs	r1, r6
10013f0c:	f7ff fed6 	bl	10013cbc <__multadd>
10013f10:	0006      	movs	r6, r0
10013f12:	10a3      	asrs	r3, r4, #2
10013f14:	9301      	str	r3, [sp, #4]
10013f16:	d038      	beq.n	10013f8a <__pow5mult+0x9a>
10013f18:	6a6c      	ldr	r4, [r5, #36]	; 0x24
10013f1a:	2c00      	cmp	r4, #0
10013f1c:	d107      	bne.n	10013f2e <__pow5mult+0x3e>
10013f1e:	2010      	movs	r0, #16
10013f20:	f7fd fe80 	bl	10011c24 <malloc>
10013f24:	6268      	str	r0, [r5, #36]	; 0x24
10013f26:	6044      	str	r4, [r0, #4]
10013f28:	6084      	str	r4, [r0, #8]
10013f2a:	6004      	str	r4, [r0, #0]
10013f2c:	60c4      	str	r4, [r0, #12]
10013f2e:	6a6f      	ldr	r7, [r5, #36]	; 0x24
10013f30:	68bc      	ldr	r4, [r7, #8]
10013f32:	2c00      	cmp	r4, #0
10013f34:	d110      	bne.n	10013f58 <__pow5mult+0x68>
10013f36:	4917      	ldr	r1, [pc, #92]	; (10013f94 <__pow5mult+0xa4>)
10013f38:	0028      	movs	r0, r5
10013f3a:	f7ff ff46 	bl	10013dca <__i2b>
10013f3e:	2300      	movs	r3, #0
10013f40:	60b8      	str	r0, [r7, #8]
10013f42:	0004      	movs	r4, r0
10013f44:	6003      	str	r3, [r0, #0]
10013f46:	e007      	b.n	10013f58 <__pow5mult+0x68>
10013f48:	9b01      	ldr	r3, [sp, #4]
10013f4a:	105b      	asrs	r3, r3, #1
10013f4c:	9301      	str	r3, [sp, #4]
10013f4e:	d01c      	beq.n	10013f8a <__pow5mult+0x9a>
10013f50:	6820      	ldr	r0, [r4, #0]
10013f52:	2800      	cmp	r0, #0
10013f54:	d010      	beq.n	10013f78 <__pow5mult+0x88>
10013f56:	0004      	movs	r4, r0
10013f58:	2201      	movs	r2, #1
10013f5a:	9b01      	ldr	r3, [sp, #4]
10013f5c:	4213      	tst	r3, r2
10013f5e:	d0f3      	beq.n	10013f48 <__pow5mult+0x58>
10013f60:	0031      	movs	r1, r6
10013f62:	0022      	movs	r2, r4
10013f64:	0028      	movs	r0, r5
10013f66:	f7ff ff39 	bl	10013ddc <__multiply>
10013f6a:	0007      	movs	r7, r0
10013f6c:	0031      	movs	r1, r6
10013f6e:	0028      	movs	r0, r5
10013f70:	f7ff fe8b 	bl	10013c8a <_Bfree>
10013f74:	003e      	movs	r6, r7
10013f76:	e7e7      	b.n	10013f48 <__pow5mult+0x58>
10013f78:	0022      	movs	r2, r4
10013f7a:	0021      	movs	r1, r4
10013f7c:	0028      	movs	r0, r5
10013f7e:	f7ff ff2d 	bl	10013ddc <__multiply>
10013f82:	2300      	movs	r3, #0
10013f84:	6020      	str	r0, [r4, #0]
10013f86:	6003      	str	r3, [r0, #0]
10013f88:	e7e5      	b.n	10013f56 <__pow5mult+0x66>
10013f8a:	0030      	movs	r0, r6
10013f8c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10013f8e:	46c0      	nop			; (mov r8, r8)
10013f90:	10017cf0 	.word	0x10017cf0
10013f94:	00000271 	.word	0x00000271

10013f98 <__lshift>:
10013f98:	b5f0      	push	{r4, r5, r6, r7, lr}
10013f9a:	000c      	movs	r4, r1
10013f9c:	0017      	movs	r7, r2
10013f9e:	6923      	ldr	r3, [r4, #16]
10013fa0:	1155      	asrs	r5, r2, #5
10013fa2:	b085      	sub	sp, #20
10013fa4:	18eb      	adds	r3, r5, r3
10013fa6:	9301      	str	r3, [sp, #4]
10013fa8:	3301      	adds	r3, #1
10013faa:	9300      	str	r3, [sp, #0]
10013fac:	6849      	ldr	r1, [r1, #4]
10013fae:	68a3      	ldr	r3, [r4, #8]
10013fb0:	9002      	str	r0, [sp, #8]
10013fb2:	9a00      	ldr	r2, [sp, #0]
10013fb4:	4293      	cmp	r3, r2
10013fb6:	da02      	bge.n	10013fbe <__lshift+0x26>
10013fb8:	3101      	adds	r1, #1
10013fba:	005b      	lsls	r3, r3, #1
10013fbc:	e7f9      	b.n	10013fb2 <__lshift+0x1a>
10013fbe:	9802      	ldr	r0, [sp, #8]
10013fc0:	f7ff fe2b 	bl	10013c1a <_Balloc>
10013fc4:	2300      	movs	r3, #0
10013fc6:	0002      	movs	r2, r0
10013fc8:	0006      	movs	r6, r0
10013fca:	0019      	movs	r1, r3
10013fcc:	3214      	adds	r2, #20
10013fce:	42ab      	cmp	r3, r5
10013fd0:	da03      	bge.n	10013fda <__lshift+0x42>
10013fd2:	0098      	lsls	r0, r3, #2
10013fd4:	5011      	str	r1, [r2, r0]
10013fd6:	3301      	adds	r3, #1
10013fd8:	e7f9      	b.n	10013fce <__lshift+0x36>
10013fda:	43eb      	mvns	r3, r5
10013fdc:	17db      	asrs	r3, r3, #31
10013fde:	401d      	ands	r5, r3
10013fe0:	0023      	movs	r3, r4
10013fe2:	00ad      	lsls	r5, r5, #2
10013fe4:	1955      	adds	r5, r2, r5
10013fe6:	6922      	ldr	r2, [r4, #16]
10013fe8:	3314      	adds	r3, #20
10013fea:	0092      	lsls	r2, r2, #2
10013fec:	189a      	adds	r2, r3, r2
10013fee:	4694      	mov	ip, r2
10013ff0:	221f      	movs	r2, #31
10013ff2:	4017      	ands	r7, r2
10013ff4:	d014      	beq.n	10014020 <__lshift+0x88>
10013ff6:	3201      	adds	r2, #1
10013ff8:	1bd2      	subs	r2, r2, r7
10013ffa:	9203      	str	r2, [sp, #12]
10013ffc:	2200      	movs	r2, #0
10013ffe:	6819      	ldr	r1, [r3, #0]
10014000:	0028      	movs	r0, r5
10014002:	40b9      	lsls	r1, r7
10014004:	430a      	orrs	r2, r1
10014006:	c504      	stmia	r5!, {r2}
10014008:	cb04      	ldmia	r3!, {r2}
1001400a:	9903      	ldr	r1, [sp, #12]
1001400c:	40ca      	lsrs	r2, r1
1001400e:	459c      	cmp	ip, r3
10014010:	d8f5      	bhi.n	10013ffe <__lshift+0x66>
10014012:	6042      	str	r2, [r0, #4]
10014014:	2a00      	cmp	r2, #0
10014016:	d007      	beq.n	10014028 <__lshift+0x90>
10014018:	9b01      	ldr	r3, [sp, #4]
1001401a:	3302      	adds	r3, #2
1001401c:	9300      	str	r3, [sp, #0]
1001401e:	e003      	b.n	10014028 <__lshift+0x90>
10014020:	cb04      	ldmia	r3!, {r2}
10014022:	c504      	stmia	r5!, {r2}
10014024:	459c      	cmp	ip, r3
10014026:	d8fb      	bhi.n	10014020 <__lshift+0x88>
10014028:	9b00      	ldr	r3, [sp, #0]
1001402a:	9802      	ldr	r0, [sp, #8]
1001402c:	3b01      	subs	r3, #1
1001402e:	6133      	str	r3, [r6, #16]
10014030:	0021      	movs	r1, r4
10014032:	f7ff fe2a 	bl	10013c8a <_Bfree>
10014036:	0030      	movs	r0, r6
10014038:	b005      	add	sp, #20
1001403a:	bdf0      	pop	{r4, r5, r6, r7, pc}

1001403c <__mcmp>:
1001403c:	6903      	ldr	r3, [r0, #16]
1001403e:	690a      	ldr	r2, [r1, #16]
10014040:	b510      	push	{r4, lr}
10014042:	1a9b      	subs	r3, r3, r2
10014044:	0004      	movs	r4, r0
10014046:	1e18      	subs	r0, r3, #0
10014048:	d112      	bne.n	10014070 <__mcmp+0x34>
1001404a:	0093      	lsls	r3, r2, #2
1001404c:	3414      	adds	r4, #20
1001404e:	3114      	adds	r1, #20
10014050:	18e2      	adds	r2, r4, r3
10014052:	18c9      	adds	r1, r1, r3
10014054:	3a04      	subs	r2, #4
10014056:	3904      	subs	r1, #4
10014058:	6813      	ldr	r3, [r2, #0]
1001405a:	6808      	ldr	r0, [r1, #0]
1001405c:	4283      	cmp	r3, r0
1001405e:	d004      	beq.n	1001406a <__mcmp+0x2e>
10014060:	4283      	cmp	r3, r0
10014062:	419b      	sbcs	r3, r3
10014064:	2001      	movs	r0, #1
10014066:	4318      	orrs	r0, r3
10014068:	e002      	b.n	10014070 <__mcmp+0x34>
1001406a:	4294      	cmp	r4, r2
1001406c:	d3f2      	bcc.n	10014054 <__mcmp+0x18>
1001406e:	2000      	movs	r0, #0
10014070:	bd10      	pop	{r4, pc}

10014072 <__mdiff>:
10014072:	b5f0      	push	{r4, r5, r6, r7, lr}
10014074:	000c      	movs	r4, r1
10014076:	b085      	sub	sp, #20
10014078:	0007      	movs	r7, r0
1001407a:	0011      	movs	r1, r2
1001407c:	0020      	movs	r0, r4
1001407e:	0015      	movs	r5, r2
10014080:	f7ff ffdc 	bl	1001403c <__mcmp>
10014084:	1e06      	subs	r6, r0, #0
10014086:	d107      	bne.n	10014098 <__mdiff+0x26>
10014088:	0001      	movs	r1, r0
1001408a:	0038      	movs	r0, r7
1001408c:	f7ff fdc5 	bl	10013c1a <_Balloc>
10014090:	2301      	movs	r3, #1
10014092:	6146      	str	r6, [r0, #20]
10014094:	6103      	str	r3, [r0, #16]
10014096:	e055      	b.n	10014144 <__mdiff+0xd2>
10014098:	2300      	movs	r3, #0
1001409a:	9301      	str	r3, [sp, #4]
1001409c:	4298      	cmp	r0, r3
1001409e:	da04      	bge.n	100140aa <__mdiff+0x38>
100140a0:	0023      	movs	r3, r4
100140a2:	002c      	movs	r4, r5
100140a4:	001d      	movs	r5, r3
100140a6:	2301      	movs	r3, #1
100140a8:	9301      	str	r3, [sp, #4]
100140aa:	6861      	ldr	r1, [r4, #4]
100140ac:	0038      	movs	r0, r7
100140ae:	f7ff fdb4 	bl	10013c1a <_Balloc>
100140b2:	9b01      	ldr	r3, [sp, #4]
100140b4:	6926      	ldr	r6, [r4, #16]
100140b6:	002f      	movs	r7, r5
100140b8:	60c3      	str	r3, [r0, #12]
100140ba:	3414      	adds	r4, #20
100140bc:	00b3      	lsls	r3, r6, #2
100140be:	18e3      	adds	r3, r4, r3
100140c0:	0002      	movs	r2, r0
100140c2:	9302      	str	r3, [sp, #8]
100140c4:	692b      	ldr	r3, [r5, #16]
100140c6:	2500      	movs	r5, #0
100140c8:	3714      	adds	r7, #20
100140ca:	009b      	lsls	r3, r3, #2
100140cc:	18fb      	adds	r3, r7, r3
100140ce:	9303      	str	r3, [sp, #12]
100140d0:	3214      	adds	r2, #20
100140d2:	cc08      	ldmia	r4!, {r3}
100140d4:	4669      	mov	r1, sp
100140d6:	469c      	mov	ip, r3
100140d8:	cf08      	ldmia	r7!, {r3}
100140da:	3204      	adds	r2, #4
100140dc:	9300      	str	r3, [sp, #0]
100140de:	4663      	mov	r3, ip
100140e0:	808b      	strh	r3, [r1, #4]
100140e2:	888b      	ldrh	r3, [r1, #4]
100140e4:	195d      	adds	r5, r3, r5
100140e6:	9b00      	ldr	r3, [sp, #0]
100140e8:	b29b      	uxth	r3, r3
100140ea:	1aeb      	subs	r3, r5, r3
100140ec:	4665      	mov	r5, ip
100140ee:	9301      	str	r3, [sp, #4]
100140f0:	9b00      	ldr	r3, [sp, #0]
100140f2:	0c2d      	lsrs	r5, r5, #16
100140f4:	0c19      	lsrs	r1, r3, #16
100140f6:	9b01      	ldr	r3, [sp, #4]
100140f8:	1a69      	subs	r1, r5, r1
100140fa:	141d      	asrs	r5, r3, #16
100140fc:	1f13      	subs	r3, r2, #4
100140fe:	469c      	mov	ip, r3
10014100:	466b      	mov	r3, sp
10014102:	1949      	adds	r1, r1, r5
10014104:	889b      	ldrh	r3, [r3, #4]
10014106:	140d      	asrs	r5, r1, #16
10014108:	0409      	lsls	r1, r1, #16
1001410a:	430b      	orrs	r3, r1
1001410c:	4661      	mov	r1, ip
1001410e:	600b      	str	r3, [r1, #0]
10014110:	9b03      	ldr	r3, [sp, #12]
10014112:	42bb      	cmp	r3, r7
10014114:	d8dd      	bhi.n	100140d2 <__mdiff+0x60>
10014116:	9902      	ldr	r1, [sp, #8]
10014118:	0013      	movs	r3, r2
1001411a:	428c      	cmp	r4, r1
1001411c:	d20b      	bcs.n	10014136 <__mdiff+0xc4>
1001411e:	cc02      	ldmia	r4!, {r1}
10014120:	b28b      	uxth	r3, r1
10014122:	195b      	adds	r3, r3, r5
10014124:	141d      	asrs	r5, r3, #16
10014126:	0c09      	lsrs	r1, r1, #16
10014128:	1949      	adds	r1, r1, r5
1001412a:	140d      	asrs	r5, r1, #16
1001412c:	b29b      	uxth	r3, r3
1001412e:	0409      	lsls	r1, r1, #16
10014130:	430b      	orrs	r3, r1
10014132:	c208      	stmia	r2!, {r3}
10014134:	e7ef      	b.n	10014116 <__mdiff+0xa4>
10014136:	3b04      	subs	r3, #4
10014138:	681a      	ldr	r2, [r3, #0]
1001413a:	2a00      	cmp	r2, #0
1001413c:	d101      	bne.n	10014142 <__mdiff+0xd0>
1001413e:	3e01      	subs	r6, #1
10014140:	e7f9      	b.n	10014136 <__mdiff+0xc4>
10014142:	6106      	str	r6, [r0, #16]
10014144:	b005      	add	sp, #20
10014146:	bdf0      	pop	{r4, r5, r6, r7, pc}

10014148 <__d2b>:
10014148:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1001414a:	001d      	movs	r5, r3
1001414c:	2101      	movs	r1, #1
1001414e:	9f08      	ldr	r7, [sp, #32]
10014150:	0014      	movs	r4, r2
10014152:	f7ff fd62 	bl	10013c1a <_Balloc>
10014156:	032b      	lsls	r3, r5, #12
10014158:	006d      	lsls	r5, r5, #1
1001415a:	0006      	movs	r6, r0
1001415c:	0b1b      	lsrs	r3, r3, #12
1001415e:	0d6d      	lsrs	r5, r5, #21
10014160:	d002      	beq.n	10014168 <__d2b+0x20>
10014162:	2280      	movs	r2, #128	; 0x80
10014164:	0352      	lsls	r2, r2, #13
10014166:	4313      	orrs	r3, r2
10014168:	9301      	str	r3, [sp, #4]
1001416a:	2c00      	cmp	r4, #0
1001416c:	d018      	beq.n	100141a0 <__d2b+0x58>
1001416e:	4668      	mov	r0, sp
10014170:	9400      	str	r4, [sp, #0]
10014172:	f7ff fdfb 	bl	10013d6c <__lo0bits>
10014176:	9c00      	ldr	r4, [sp, #0]
10014178:	2800      	cmp	r0, #0
1001417a:	d009      	beq.n	10014190 <__d2b+0x48>
1001417c:	9b01      	ldr	r3, [sp, #4]
1001417e:	2120      	movs	r1, #32
10014180:	001a      	movs	r2, r3
10014182:	1a09      	subs	r1, r1, r0
10014184:	408a      	lsls	r2, r1
10014186:	40c3      	lsrs	r3, r0
10014188:	4322      	orrs	r2, r4
1001418a:	6172      	str	r2, [r6, #20]
1001418c:	9301      	str	r3, [sp, #4]
1001418e:	e000      	b.n	10014192 <__d2b+0x4a>
10014190:	6174      	str	r4, [r6, #20]
10014192:	9c01      	ldr	r4, [sp, #4]
10014194:	61b4      	str	r4, [r6, #24]
10014196:	1e63      	subs	r3, r4, #1
10014198:	419c      	sbcs	r4, r3
1001419a:	3401      	adds	r4, #1
1001419c:	6134      	str	r4, [r6, #16]
1001419e:	e007      	b.n	100141b0 <__d2b+0x68>
100141a0:	a801      	add	r0, sp, #4
100141a2:	f7ff fde3 	bl	10013d6c <__lo0bits>
100141a6:	2401      	movs	r4, #1
100141a8:	9b01      	ldr	r3, [sp, #4]
100141aa:	6134      	str	r4, [r6, #16]
100141ac:	6173      	str	r3, [r6, #20]
100141ae:	3020      	adds	r0, #32
100141b0:	2d00      	cmp	r5, #0
100141b2:	d006      	beq.n	100141c2 <__d2b+0x7a>
100141b4:	4b0b      	ldr	r3, [pc, #44]	; (100141e4 <__d2b+0x9c>)
100141b6:	18ed      	adds	r5, r5, r3
100141b8:	2335      	movs	r3, #53	; 0x35
100141ba:	182d      	adds	r5, r5, r0
100141bc:	603d      	str	r5, [r7, #0]
100141be:	1a18      	subs	r0, r3, r0
100141c0:	e00b      	b.n	100141da <__d2b+0x92>
100141c2:	4b09      	ldr	r3, [pc, #36]	; (100141e8 <__d2b+0xa0>)
100141c4:	18c0      	adds	r0, r0, r3
100141c6:	4b09      	ldr	r3, [pc, #36]	; (100141ec <__d2b+0xa4>)
100141c8:	6038      	str	r0, [r7, #0]
100141ca:	18e3      	adds	r3, r4, r3
100141cc:	009b      	lsls	r3, r3, #2
100141ce:	18f3      	adds	r3, r6, r3
100141d0:	6958      	ldr	r0, [r3, #20]
100141d2:	f7ff fdb0 	bl	10013d36 <__hi0bits>
100141d6:	0164      	lsls	r4, r4, #5
100141d8:	1a20      	subs	r0, r4, r0
100141da:	9b09      	ldr	r3, [sp, #36]	; 0x24
100141dc:	6018      	str	r0, [r3, #0]
100141de:	0030      	movs	r0, r6
100141e0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
100141e2:	46c0      	nop			; (mov r8, r8)
100141e4:	fffffbcd 	.word	0xfffffbcd
100141e8:	fffffbce 	.word	0xfffffbce
100141ec:	3fffffff 	.word	0x3fffffff

100141f0 <_calloc_r>:
100141f0:	434a      	muls	r2, r1
100141f2:	b570      	push	{r4, r5, r6, lr}
100141f4:	0011      	movs	r1, r2
100141f6:	0014      	movs	r4, r2
100141f8:	f7fd fd84 	bl	10011d04 <_malloc_r>
100141fc:	1e05      	subs	r5, r0, #0
100141fe:	d003      	beq.n	10014208 <_calloc_r+0x18>
10014200:	0022      	movs	r2, r4
10014202:	2100      	movs	r1, #0
10014204:	f7fd fd30 	bl	10011c68 <memset>
10014208:	0028      	movs	r0, r5
1001420a:	bd70      	pop	{r4, r5, r6, pc}

1001420c <__sfputc_r>:
1001420c:	6893      	ldr	r3, [r2, #8]
1001420e:	b510      	push	{r4, lr}
10014210:	3b01      	subs	r3, #1
10014212:	6093      	str	r3, [r2, #8]
10014214:	2b00      	cmp	r3, #0
10014216:	da05      	bge.n	10014224 <__sfputc_r+0x18>
10014218:	6994      	ldr	r4, [r2, #24]
1001421a:	42a3      	cmp	r3, r4
1001421c:	db08      	blt.n	10014230 <__sfputc_r+0x24>
1001421e:	b2cb      	uxtb	r3, r1
10014220:	2b0a      	cmp	r3, #10
10014222:	d005      	beq.n	10014230 <__sfputc_r+0x24>
10014224:	6813      	ldr	r3, [r2, #0]
10014226:	1c58      	adds	r0, r3, #1
10014228:	6010      	str	r0, [r2, #0]
1001422a:	7019      	strb	r1, [r3, #0]
1001422c:	b2c8      	uxtb	r0, r1
1001422e:	e001      	b.n	10014234 <__sfputc_r+0x28>
10014230:	f7fe fbde 	bl	100129f0 <__swbuf_r>
10014234:	bd10      	pop	{r4, pc}

10014236 <__sfputs_r>:
10014236:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10014238:	0006      	movs	r6, r0
1001423a:	000f      	movs	r7, r1
1001423c:	0014      	movs	r4, r2
1001423e:	18d5      	adds	r5, r2, r3
10014240:	42ac      	cmp	r4, r5
10014242:	d008      	beq.n	10014256 <__sfputs_r+0x20>
10014244:	7821      	ldrb	r1, [r4, #0]
10014246:	003a      	movs	r2, r7
10014248:	0030      	movs	r0, r6
1001424a:	f7ff ffdf 	bl	1001420c <__sfputc_r>
1001424e:	3401      	adds	r4, #1
10014250:	1c43      	adds	r3, r0, #1
10014252:	d1f5      	bne.n	10014240 <__sfputs_r+0xa>
10014254:	e000      	b.n	10014258 <__sfputs_r+0x22>
10014256:	2000      	movs	r0, #0
10014258:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

1001425c <_vfiprintf_r>:
1001425c:	b5f0      	push	{r4, r5, r6, r7, lr}
1001425e:	b09f      	sub	sp, #124	; 0x7c
10014260:	0006      	movs	r6, r0
10014262:	000f      	movs	r7, r1
10014264:	9202      	str	r2, [sp, #8]
10014266:	9305      	str	r3, [sp, #20]
10014268:	2800      	cmp	r0, #0
1001426a:	d004      	beq.n	10014276 <_vfiprintf_r+0x1a>
1001426c:	6983      	ldr	r3, [r0, #24]
1001426e:	2b00      	cmp	r3, #0
10014270:	d101      	bne.n	10014276 <_vfiprintf_r+0x1a>
10014272:	f7ff fbcb 	bl	10013a0c <__sinit>
10014276:	4b7f      	ldr	r3, [pc, #508]	; (10014474 <_vfiprintf_r+0x218>)
10014278:	429f      	cmp	r7, r3
1001427a:	d101      	bne.n	10014280 <_vfiprintf_r+0x24>
1001427c:	6877      	ldr	r7, [r6, #4]
1001427e:	e008      	b.n	10014292 <_vfiprintf_r+0x36>
10014280:	4b7d      	ldr	r3, [pc, #500]	; (10014478 <_vfiprintf_r+0x21c>)
10014282:	429f      	cmp	r7, r3
10014284:	d101      	bne.n	1001428a <_vfiprintf_r+0x2e>
10014286:	68b7      	ldr	r7, [r6, #8]
10014288:	e003      	b.n	10014292 <_vfiprintf_r+0x36>
1001428a:	4b7c      	ldr	r3, [pc, #496]	; (1001447c <_vfiprintf_r+0x220>)
1001428c:	429f      	cmp	r7, r3
1001428e:	d100      	bne.n	10014292 <_vfiprintf_r+0x36>
10014290:	68f7      	ldr	r7, [r6, #12]
10014292:	89bb      	ldrh	r3, [r7, #12]
10014294:	071b      	lsls	r3, r3, #28
10014296:	d50a      	bpl.n	100142ae <_vfiprintf_r+0x52>
10014298:	693b      	ldr	r3, [r7, #16]
1001429a:	2b00      	cmp	r3, #0
1001429c:	d007      	beq.n	100142ae <_vfiprintf_r+0x52>
1001429e:	2300      	movs	r3, #0
100142a0:	ad06      	add	r5, sp, #24
100142a2:	616b      	str	r3, [r5, #20]
100142a4:	3320      	adds	r3, #32
100142a6:	766b      	strb	r3, [r5, #25]
100142a8:	3310      	adds	r3, #16
100142aa:	76ab      	strb	r3, [r5, #26]
100142ac:	e03d      	b.n	1001432a <_vfiprintf_r+0xce>
100142ae:	0039      	movs	r1, r7
100142b0:	0030      	movs	r0, r6
100142b2:	f7fe fbf5 	bl	10012aa0 <__swsetup_r>
100142b6:	2800      	cmp	r0, #0
100142b8:	d0f1      	beq.n	1001429e <_vfiprintf_r+0x42>
100142ba:	2001      	movs	r0, #1
100142bc:	4240      	negs	r0, r0
100142be:	e0d6      	b.n	1001446e <_vfiprintf_r+0x212>
100142c0:	9a05      	ldr	r2, [sp, #20]
100142c2:	1d11      	adds	r1, r2, #4
100142c4:	6812      	ldr	r2, [r2, #0]
100142c6:	9105      	str	r1, [sp, #20]
100142c8:	2a00      	cmp	r2, #0
100142ca:	da00      	bge.n	100142ce <_vfiprintf_r+0x72>
100142cc:	e07f      	b.n	100143ce <_vfiprintf_r+0x172>
100142ce:	9209      	str	r2, [sp, #36]	; 0x24
100142d0:	3401      	adds	r4, #1
100142d2:	7823      	ldrb	r3, [r4, #0]
100142d4:	2b2e      	cmp	r3, #46	; 0x2e
100142d6:	d100      	bne.n	100142da <_vfiprintf_r+0x7e>
100142d8:	e08d      	b.n	100143f6 <_vfiprintf_r+0x19a>
100142da:	7821      	ldrb	r1, [r4, #0]
100142dc:	2203      	movs	r2, #3
100142de:	4868      	ldr	r0, [pc, #416]	; (10014480 <_vfiprintf_r+0x224>)
100142e0:	f7ff fc90 	bl	10013c04 <memchr>
100142e4:	2800      	cmp	r0, #0
100142e6:	d007      	beq.n	100142f8 <_vfiprintf_r+0x9c>
100142e8:	4b65      	ldr	r3, [pc, #404]	; (10014480 <_vfiprintf_r+0x224>)
100142ea:	682a      	ldr	r2, [r5, #0]
100142ec:	1ac0      	subs	r0, r0, r3
100142ee:	2340      	movs	r3, #64	; 0x40
100142f0:	4083      	lsls	r3, r0
100142f2:	4313      	orrs	r3, r2
100142f4:	602b      	str	r3, [r5, #0]
100142f6:	3401      	adds	r4, #1
100142f8:	7821      	ldrb	r1, [r4, #0]
100142fa:	1c63      	adds	r3, r4, #1
100142fc:	2206      	movs	r2, #6
100142fe:	4861      	ldr	r0, [pc, #388]	; (10014484 <_vfiprintf_r+0x228>)
10014300:	9302      	str	r3, [sp, #8]
10014302:	7629      	strb	r1, [r5, #24]
10014304:	f7ff fc7e 	bl	10013c04 <memchr>
10014308:	2800      	cmp	r0, #0
1001430a:	d100      	bne.n	1001430e <_vfiprintf_r+0xb2>
1001430c:	e09d      	b.n	1001444a <_vfiprintf_r+0x1ee>
1001430e:	4b5e      	ldr	r3, [pc, #376]	; (10014488 <_vfiprintf_r+0x22c>)
10014310:	2b00      	cmp	r3, #0
10014312:	d000      	beq.n	10014316 <_vfiprintf_r+0xba>
10014314:	e090      	b.n	10014438 <_vfiprintf_r+0x1dc>
10014316:	2207      	movs	r2, #7
10014318:	9b05      	ldr	r3, [sp, #20]
1001431a:	3307      	adds	r3, #7
1001431c:	4393      	bics	r3, r2
1001431e:	3308      	adds	r3, #8
10014320:	9305      	str	r3, [sp, #20]
10014322:	696b      	ldr	r3, [r5, #20]
10014324:	9a03      	ldr	r2, [sp, #12]
10014326:	189b      	adds	r3, r3, r2
10014328:	616b      	str	r3, [r5, #20]
1001432a:	9c02      	ldr	r4, [sp, #8]
1001432c:	7823      	ldrb	r3, [r4, #0]
1001432e:	2b00      	cmp	r3, #0
10014330:	d104      	bne.n	1001433c <_vfiprintf_r+0xe0>
10014332:	9b02      	ldr	r3, [sp, #8]
10014334:	1ae3      	subs	r3, r4, r3
10014336:	9304      	str	r3, [sp, #16]
10014338:	d012      	beq.n	10014360 <_vfiprintf_r+0x104>
1001433a:	e003      	b.n	10014344 <_vfiprintf_r+0xe8>
1001433c:	2b25      	cmp	r3, #37	; 0x25
1001433e:	d0f8      	beq.n	10014332 <_vfiprintf_r+0xd6>
10014340:	3401      	adds	r4, #1
10014342:	e7f3      	b.n	1001432c <_vfiprintf_r+0xd0>
10014344:	9b04      	ldr	r3, [sp, #16]
10014346:	9a02      	ldr	r2, [sp, #8]
10014348:	0039      	movs	r1, r7
1001434a:	0030      	movs	r0, r6
1001434c:	f7ff ff73 	bl	10014236 <__sfputs_r>
10014350:	1c43      	adds	r3, r0, #1
10014352:	d100      	bne.n	10014356 <_vfiprintf_r+0xfa>
10014354:	e086      	b.n	10014464 <_vfiprintf_r+0x208>
10014356:	696a      	ldr	r2, [r5, #20]
10014358:	9b04      	ldr	r3, [sp, #16]
1001435a:	4694      	mov	ip, r2
1001435c:	4463      	add	r3, ip
1001435e:	616b      	str	r3, [r5, #20]
10014360:	7823      	ldrb	r3, [r4, #0]
10014362:	2b00      	cmp	r3, #0
10014364:	d07e      	beq.n	10014464 <_vfiprintf_r+0x208>
10014366:	2201      	movs	r2, #1
10014368:	2300      	movs	r3, #0
1001436a:	4252      	negs	r2, r2
1001436c:	606a      	str	r2, [r5, #4]
1001436e:	a902      	add	r1, sp, #8
10014370:	3254      	adds	r2, #84	; 0x54
10014372:	1852      	adds	r2, r2, r1
10014374:	3401      	adds	r4, #1
10014376:	602b      	str	r3, [r5, #0]
10014378:	60eb      	str	r3, [r5, #12]
1001437a:	60ab      	str	r3, [r5, #8]
1001437c:	7013      	strb	r3, [r2, #0]
1001437e:	65ab      	str	r3, [r5, #88]	; 0x58
10014380:	7821      	ldrb	r1, [r4, #0]
10014382:	2205      	movs	r2, #5
10014384:	4841      	ldr	r0, [pc, #260]	; (1001448c <_vfiprintf_r+0x230>)
10014386:	f7ff fc3d 	bl	10013c04 <memchr>
1001438a:	2800      	cmp	r0, #0
1001438c:	d008      	beq.n	100143a0 <_vfiprintf_r+0x144>
1001438e:	4b3f      	ldr	r3, [pc, #252]	; (1001448c <_vfiprintf_r+0x230>)
10014390:	682a      	ldr	r2, [r5, #0]
10014392:	1ac0      	subs	r0, r0, r3
10014394:	2301      	movs	r3, #1
10014396:	4083      	lsls	r3, r0
10014398:	4313      	orrs	r3, r2
1001439a:	602b      	str	r3, [r5, #0]
1001439c:	3401      	adds	r4, #1
1001439e:	e7ef      	b.n	10014380 <_vfiprintf_r+0x124>
100143a0:	682b      	ldr	r3, [r5, #0]
100143a2:	06da      	lsls	r2, r3, #27
100143a4:	d504      	bpl.n	100143b0 <_vfiprintf_r+0x154>
100143a6:	2253      	movs	r2, #83	; 0x53
100143a8:	2120      	movs	r1, #32
100143aa:	a802      	add	r0, sp, #8
100143ac:	1812      	adds	r2, r2, r0
100143ae:	7011      	strb	r1, [r2, #0]
100143b0:	071a      	lsls	r2, r3, #28
100143b2:	d504      	bpl.n	100143be <_vfiprintf_r+0x162>
100143b4:	2253      	movs	r2, #83	; 0x53
100143b6:	212b      	movs	r1, #43	; 0x2b
100143b8:	a802      	add	r0, sp, #8
100143ba:	1812      	adds	r2, r2, r0
100143bc:	7011      	strb	r1, [r2, #0]
100143be:	7822      	ldrb	r2, [r4, #0]
100143c0:	2a2a      	cmp	r2, #42	; 0x2a
100143c2:	d100      	bne.n	100143c6 <_vfiprintf_r+0x16a>
100143c4:	e77c      	b.n	100142c0 <_vfiprintf_r+0x64>
100143c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
100143c8:	2000      	movs	r0, #0
100143ca:	210a      	movs	r1, #10
100143cc:	e005      	b.n	100143da <_vfiprintf_r+0x17e>
100143ce:	4252      	negs	r2, r2
100143d0:	60ea      	str	r2, [r5, #12]
100143d2:	2202      	movs	r2, #2
100143d4:	4313      	orrs	r3, r2
100143d6:	602b      	str	r3, [r5, #0]
100143d8:	e77a      	b.n	100142d0 <_vfiprintf_r+0x74>
100143da:	7822      	ldrb	r2, [r4, #0]
100143dc:	3a30      	subs	r2, #48	; 0x30
100143de:	2a09      	cmp	r2, #9
100143e0:	d804      	bhi.n	100143ec <_vfiprintf_r+0x190>
100143e2:	434b      	muls	r3, r1
100143e4:	3401      	adds	r4, #1
100143e6:	189b      	adds	r3, r3, r2
100143e8:	2001      	movs	r0, #1
100143ea:	e7f6      	b.n	100143da <_vfiprintf_r+0x17e>
100143ec:	2800      	cmp	r0, #0
100143ee:	d100      	bne.n	100143f2 <_vfiprintf_r+0x196>
100143f0:	e76f      	b.n	100142d2 <_vfiprintf_r+0x76>
100143f2:	9309      	str	r3, [sp, #36]	; 0x24
100143f4:	e76d      	b.n	100142d2 <_vfiprintf_r+0x76>
100143f6:	7863      	ldrb	r3, [r4, #1]
100143f8:	2b2a      	cmp	r3, #42	; 0x2a
100143fa:	d10a      	bne.n	10014412 <_vfiprintf_r+0x1b6>
100143fc:	9b05      	ldr	r3, [sp, #20]
100143fe:	3402      	adds	r4, #2
10014400:	1d1a      	adds	r2, r3, #4
10014402:	681b      	ldr	r3, [r3, #0]
10014404:	9205      	str	r2, [sp, #20]
10014406:	2b00      	cmp	r3, #0
10014408:	da01      	bge.n	1001440e <_vfiprintf_r+0x1b2>
1001440a:	2301      	movs	r3, #1
1001440c:	425b      	negs	r3, r3
1001440e:	9307      	str	r3, [sp, #28]
10014410:	e763      	b.n	100142da <_vfiprintf_r+0x7e>
10014412:	2300      	movs	r3, #0
10014414:	200a      	movs	r0, #10
10014416:	001a      	movs	r2, r3
10014418:	3401      	adds	r4, #1
1001441a:	606b      	str	r3, [r5, #4]
1001441c:	7821      	ldrb	r1, [r4, #0]
1001441e:	3930      	subs	r1, #48	; 0x30
10014420:	2909      	cmp	r1, #9
10014422:	d804      	bhi.n	1001442e <_vfiprintf_r+0x1d2>
10014424:	4342      	muls	r2, r0
10014426:	3401      	adds	r4, #1
10014428:	1852      	adds	r2, r2, r1
1001442a:	2301      	movs	r3, #1
1001442c:	e7f6      	b.n	1001441c <_vfiprintf_r+0x1c0>
1001442e:	2b00      	cmp	r3, #0
10014430:	d100      	bne.n	10014434 <_vfiprintf_r+0x1d8>
10014432:	e752      	b.n	100142da <_vfiprintf_r+0x7e>
10014434:	9207      	str	r2, [sp, #28]
10014436:	e750      	b.n	100142da <_vfiprintf_r+0x7e>
10014438:	ab05      	add	r3, sp, #20
1001443a:	9300      	str	r3, [sp, #0]
1001443c:	003a      	movs	r2, r7
1001443e:	4b14      	ldr	r3, [pc, #80]	; (10014490 <_vfiprintf_r+0x234>)
10014440:	0029      	movs	r1, r5
10014442:	0030      	movs	r0, r6
10014444:	f7fd fd4a 	bl	10011edc <_printf_float>
10014448:	e007      	b.n	1001445a <_vfiprintf_r+0x1fe>
1001444a:	ab05      	add	r3, sp, #20
1001444c:	9300      	str	r3, [sp, #0]
1001444e:	003a      	movs	r2, r7
10014450:	4b0f      	ldr	r3, [pc, #60]	; (10014490 <_vfiprintf_r+0x234>)
10014452:	0029      	movs	r1, r5
10014454:	0030      	movs	r0, r6
10014456:	f7fd ffff 	bl	10012458 <_printf_i>
1001445a:	9003      	str	r0, [sp, #12]
1001445c:	9b03      	ldr	r3, [sp, #12]
1001445e:	3301      	adds	r3, #1
10014460:	d000      	beq.n	10014464 <_vfiprintf_r+0x208>
10014462:	e75e      	b.n	10014322 <_vfiprintf_r+0xc6>
10014464:	89bb      	ldrh	r3, [r7, #12]
10014466:	065b      	lsls	r3, r3, #25
10014468:	d500      	bpl.n	1001446c <_vfiprintf_r+0x210>
1001446a:	e726      	b.n	100142ba <_vfiprintf_r+0x5e>
1001446c:	980b      	ldr	r0, [sp, #44]	; 0x2c
1001446e:	b01f      	add	sp, #124	; 0x7c
10014470:	bdf0      	pop	{r4, r5, r6, r7, pc}
10014472:	46c0      	nop			; (mov r8, r8)
10014474:	10017b94 	.word	0x10017b94
10014478:	10017bb4 	.word	0x10017bb4
1001447c:	10017bd4 	.word	0x10017bd4
10014480:	10017d02 	.word	0x10017d02
10014484:	10017d06 	.word	0x10017d06
10014488:	10011edd 	.word	0x10011edd
1001448c:	10017cfc 	.word	0x10017cfc
10014490:	10014237 	.word	0x10014237

10014494 <_putc_r>:
10014494:	b570      	push	{r4, r5, r6, lr}
10014496:	0006      	movs	r6, r0
10014498:	000d      	movs	r5, r1
1001449a:	0014      	movs	r4, r2
1001449c:	2800      	cmp	r0, #0
1001449e:	d004      	beq.n	100144aa <_putc_r+0x16>
100144a0:	6983      	ldr	r3, [r0, #24]
100144a2:	2b00      	cmp	r3, #0
100144a4:	d101      	bne.n	100144aa <_putc_r+0x16>
100144a6:	f7ff fab1 	bl	10013a0c <__sinit>
100144aa:	4b12      	ldr	r3, [pc, #72]	; (100144f4 <_putc_r+0x60>)
100144ac:	429c      	cmp	r4, r3
100144ae:	d101      	bne.n	100144b4 <_putc_r+0x20>
100144b0:	6874      	ldr	r4, [r6, #4]
100144b2:	e008      	b.n	100144c6 <_putc_r+0x32>
100144b4:	4b10      	ldr	r3, [pc, #64]	; (100144f8 <_putc_r+0x64>)
100144b6:	429c      	cmp	r4, r3
100144b8:	d101      	bne.n	100144be <_putc_r+0x2a>
100144ba:	68b4      	ldr	r4, [r6, #8]
100144bc:	e003      	b.n	100144c6 <_putc_r+0x32>
100144be:	4b0f      	ldr	r3, [pc, #60]	; (100144fc <_putc_r+0x68>)
100144c0:	429c      	cmp	r4, r3
100144c2:	d100      	bne.n	100144c6 <_putc_r+0x32>
100144c4:	68f4      	ldr	r4, [r6, #12]
100144c6:	68a3      	ldr	r3, [r4, #8]
100144c8:	3b01      	subs	r3, #1
100144ca:	60a3      	str	r3, [r4, #8]
100144cc:	2b00      	cmp	r3, #0
100144ce:	da05      	bge.n	100144dc <_putc_r+0x48>
100144d0:	69a2      	ldr	r2, [r4, #24]
100144d2:	4293      	cmp	r3, r2
100144d4:	db08      	blt.n	100144e8 <_putc_r+0x54>
100144d6:	b2eb      	uxtb	r3, r5
100144d8:	2b0a      	cmp	r3, #10
100144da:	d005      	beq.n	100144e8 <_putc_r+0x54>
100144dc:	6823      	ldr	r3, [r4, #0]
100144de:	b2e8      	uxtb	r0, r5
100144e0:	1c5a      	adds	r2, r3, #1
100144e2:	6022      	str	r2, [r4, #0]
100144e4:	701d      	strb	r5, [r3, #0]
100144e6:	e004      	b.n	100144f2 <_putc_r+0x5e>
100144e8:	0022      	movs	r2, r4
100144ea:	0029      	movs	r1, r5
100144ec:	0030      	movs	r0, r6
100144ee:	f7fe fa7f 	bl	100129f0 <__swbuf_r>
100144f2:	bd70      	pop	{r4, r5, r6, pc}
100144f4:	10017b94 	.word	0x10017b94
100144f8:	10017bb4 	.word	0x10017bb4
100144fc:	10017bd4 	.word	0x10017bd4

10014500 <__sread>:
10014500:	b570      	push	{r4, r5, r6, lr}
10014502:	000c      	movs	r4, r1
10014504:	250e      	movs	r5, #14
10014506:	5f49      	ldrsh	r1, [r1, r5]
10014508:	f000 f8a4 	bl	10014654 <_read_r>
1001450c:	2800      	cmp	r0, #0
1001450e:	db03      	blt.n	10014518 <__sread+0x18>
10014510:	6d63      	ldr	r3, [r4, #84]	; 0x54
10014512:	181b      	adds	r3, r3, r0
10014514:	6563      	str	r3, [r4, #84]	; 0x54
10014516:	e003      	b.n	10014520 <__sread+0x20>
10014518:	89a2      	ldrh	r2, [r4, #12]
1001451a:	4b02      	ldr	r3, [pc, #8]	; (10014524 <__sread+0x24>)
1001451c:	4013      	ands	r3, r2
1001451e:	81a3      	strh	r3, [r4, #12]
10014520:	bd70      	pop	{r4, r5, r6, pc}
10014522:	46c0      	nop			; (mov r8, r8)
10014524:	ffffefff 	.word	0xffffefff

10014528 <__swrite>:
10014528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1001452a:	001f      	movs	r7, r3
1001452c:	898b      	ldrh	r3, [r1, #12]
1001452e:	0005      	movs	r5, r0
10014530:	000c      	movs	r4, r1
10014532:	0016      	movs	r6, r2
10014534:	05db      	lsls	r3, r3, #23
10014536:	d505      	bpl.n	10014544 <__swrite+0x1c>
10014538:	230e      	movs	r3, #14
1001453a:	5ec9      	ldrsh	r1, [r1, r3]
1001453c:	2200      	movs	r2, #0
1001453e:	2302      	movs	r3, #2
10014540:	f000 f874 	bl	1001462c <_lseek_r>
10014544:	89a2      	ldrh	r2, [r4, #12]
10014546:	4b05      	ldr	r3, [pc, #20]	; (1001455c <__swrite+0x34>)
10014548:	0028      	movs	r0, r5
1001454a:	4013      	ands	r3, r2
1001454c:	81a3      	strh	r3, [r4, #12]
1001454e:	0032      	movs	r2, r6
10014550:	230e      	movs	r3, #14
10014552:	5ee1      	ldrsh	r1, [r4, r3]
10014554:	003b      	movs	r3, r7
10014556:	f000 f81f 	bl	10014598 <_write_r>
1001455a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1001455c:	ffffefff 	.word	0xffffefff

10014560 <__sseek>:
10014560:	b570      	push	{r4, r5, r6, lr}
10014562:	000c      	movs	r4, r1
10014564:	250e      	movs	r5, #14
10014566:	5f49      	ldrsh	r1, [r1, r5]
10014568:	f000 f860 	bl	1001462c <_lseek_r>
1001456c:	89a3      	ldrh	r3, [r4, #12]
1001456e:	1c42      	adds	r2, r0, #1
10014570:	d103      	bne.n	1001457a <__sseek+0x1a>
10014572:	4a05      	ldr	r2, [pc, #20]	; (10014588 <__sseek+0x28>)
10014574:	4013      	ands	r3, r2
10014576:	81a3      	strh	r3, [r4, #12]
10014578:	e004      	b.n	10014584 <__sseek+0x24>
1001457a:	2280      	movs	r2, #128	; 0x80
1001457c:	0152      	lsls	r2, r2, #5
1001457e:	4313      	orrs	r3, r2
10014580:	81a3      	strh	r3, [r4, #12]
10014582:	6560      	str	r0, [r4, #84]	; 0x54
10014584:	bd70      	pop	{r4, r5, r6, pc}
10014586:	46c0      	nop			; (mov r8, r8)
10014588:	ffffefff 	.word	0xffffefff

1001458c <__sclose>:
1001458c:	b510      	push	{r4, lr}
1001458e:	230e      	movs	r3, #14
10014590:	5ec9      	ldrsh	r1, [r1, r3]
10014592:	f000 f815 	bl	100145c0 <_close_r>
10014596:	bd10      	pop	{r4, pc}

10014598 <_write_r>:
10014598:	b570      	push	{r4, r5, r6, lr}
1001459a:	0005      	movs	r5, r0
1001459c:	0008      	movs	r0, r1
1001459e:	0011      	movs	r1, r2
100145a0:	2200      	movs	r2, #0
100145a2:	4c06      	ldr	r4, [pc, #24]	; (100145bc <_write_r+0x24>)
100145a4:	6022      	str	r2, [r4, #0]
100145a6:	001a      	movs	r2, r3
100145a8:	f7f7 f9cc 	bl	1000b944 <_write>
100145ac:	1c43      	adds	r3, r0, #1
100145ae:	d103      	bne.n	100145b8 <_write_r+0x20>
100145b0:	6823      	ldr	r3, [r4, #0]
100145b2:	2b00      	cmp	r3, #0
100145b4:	d000      	beq.n	100145b8 <_write_r+0x20>
100145b6:	602b      	str	r3, [r5, #0]
100145b8:	bd70      	pop	{r4, r5, r6, pc}
100145ba:	46c0      	nop			; (mov r8, r8)
100145bc:	1001ae38 	.word	0x1001ae38

100145c0 <_close_r>:
100145c0:	2300      	movs	r3, #0
100145c2:	b570      	push	{r4, r5, r6, lr}
100145c4:	4c06      	ldr	r4, [pc, #24]	; (100145e0 <_close_r+0x20>)
100145c6:	0005      	movs	r5, r0
100145c8:	0008      	movs	r0, r1
100145ca:	6023      	str	r3, [r4, #0]
100145cc:	f7f3 ff28 	bl	10008420 <_close>
100145d0:	1c43      	adds	r3, r0, #1
100145d2:	d103      	bne.n	100145dc <_close_r+0x1c>
100145d4:	6823      	ldr	r3, [r4, #0]
100145d6:	2b00      	cmp	r3, #0
100145d8:	d000      	beq.n	100145dc <_close_r+0x1c>
100145da:	602b      	str	r3, [r5, #0]
100145dc:	bd70      	pop	{r4, r5, r6, pc}
100145de:	46c0      	nop			; (mov r8, r8)
100145e0:	1001ae38 	.word	0x1001ae38

100145e4 <_fstat_r>:
100145e4:	2300      	movs	r3, #0
100145e6:	b570      	push	{r4, r5, r6, lr}
100145e8:	4c06      	ldr	r4, [pc, #24]	; (10014604 <_fstat_r+0x20>)
100145ea:	0005      	movs	r5, r0
100145ec:	0008      	movs	r0, r1
100145ee:	0011      	movs	r1, r2
100145f0:	6023      	str	r3, [r4, #0]
100145f2:	f7f3 ff19 	bl	10008428 <_fstat>
100145f6:	1c43      	adds	r3, r0, #1
100145f8:	d103      	bne.n	10014602 <_fstat_r+0x1e>
100145fa:	6823      	ldr	r3, [r4, #0]
100145fc:	2b00      	cmp	r3, #0
100145fe:	d000      	beq.n	10014602 <_fstat_r+0x1e>
10014600:	602b      	str	r3, [r5, #0]
10014602:	bd70      	pop	{r4, r5, r6, pc}
10014604:	1001ae38 	.word	0x1001ae38

10014608 <_isatty_r>:
10014608:	2300      	movs	r3, #0
1001460a:	b570      	push	{r4, r5, r6, lr}
1001460c:	4c06      	ldr	r4, [pc, #24]	; (10014628 <_isatty_r+0x20>)
1001460e:	0005      	movs	r5, r0
10014610:	0008      	movs	r0, r1
10014612:	6023      	str	r3, [r4, #0]
10014614:	f7f3 ff0e 	bl	10008434 <_isatty>
10014618:	1c43      	adds	r3, r0, #1
1001461a:	d103      	bne.n	10014624 <_isatty_r+0x1c>
1001461c:	6823      	ldr	r3, [r4, #0]
1001461e:	2b00      	cmp	r3, #0
10014620:	d000      	beq.n	10014624 <_isatty_r+0x1c>
10014622:	602b      	str	r3, [r5, #0]
10014624:	bd70      	pop	{r4, r5, r6, pc}
10014626:	46c0      	nop			; (mov r8, r8)
10014628:	1001ae38 	.word	0x1001ae38

1001462c <_lseek_r>:
1001462c:	b570      	push	{r4, r5, r6, lr}
1001462e:	0005      	movs	r5, r0
10014630:	0008      	movs	r0, r1
10014632:	0011      	movs	r1, r2
10014634:	2200      	movs	r2, #0
10014636:	4c06      	ldr	r4, [pc, #24]	; (10014650 <_lseek_r+0x24>)
10014638:	6022      	str	r2, [r4, #0]
1001463a:	001a      	movs	r2, r3
1001463c:	f7f3 fefc 	bl	10008438 <_lseek>
10014640:	1c43      	adds	r3, r0, #1
10014642:	d103      	bne.n	1001464c <_lseek_r+0x20>
10014644:	6823      	ldr	r3, [r4, #0]
10014646:	2b00      	cmp	r3, #0
10014648:	d000      	beq.n	1001464c <_lseek_r+0x20>
1001464a:	602b      	str	r3, [r5, #0]
1001464c:	bd70      	pop	{r4, r5, r6, pc}
1001464e:	46c0      	nop			; (mov r8, r8)
10014650:	1001ae38 	.word	0x1001ae38

10014654 <_read_r>:
10014654:	b570      	push	{r4, r5, r6, lr}
10014656:	0005      	movs	r5, r0
10014658:	0008      	movs	r0, r1
1001465a:	0011      	movs	r1, r2
1001465c:	2200      	movs	r2, #0
1001465e:	4c06      	ldr	r4, [pc, #24]	; (10014678 <_read_r+0x24>)
10014660:	6022      	str	r2, [r4, #0]
10014662:	001a      	movs	r2, r3
10014664:	f7f7 f94e 	bl	1000b904 <_read>
10014668:	1c43      	adds	r3, r0, #1
1001466a:	d103      	bne.n	10014674 <_read_r+0x20>
1001466c:	6823      	ldr	r3, [r4, #0]
1001466e:	2b00      	cmp	r3, #0
10014670:	d000      	beq.n	10014674 <_read_r+0x20>
10014672:	602b      	str	r3, [r5, #0]
10014674:	bd70      	pop	{r4, r5, r6, pc}
10014676:	46c0      	nop			; (mov r8, r8)
10014678:	1001ae38 	.word	0x1001ae38

1001467c <__gnu_thumb1_case_sqi>:
1001467c:	b402      	push	{r1}
1001467e:	4671      	mov	r1, lr
10014680:	0849      	lsrs	r1, r1, #1
10014682:	0049      	lsls	r1, r1, #1
10014684:	5609      	ldrsb	r1, [r1, r0]
10014686:	0049      	lsls	r1, r1, #1
10014688:	448e      	add	lr, r1
1001468a:	bc02      	pop	{r1}
1001468c:	4770      	bx	lr
1001468e:	46c0      	nop			; (mov r8, r8)

10014690 <__gnu_thumb1_case_uqi>:
10014690:	b402      	push	{r1}
10014692:	4671      	mov	r1, lr
10014694:	0849      	lsrs	r1, r1, #1
10014696:	0049      	lsls	r1, r1, #1
10014698:	5c09      	ldrb	r1, [r1, r0]
1001469a:	0049      	lsls	r1, r1, #1
1001469c:	448e      	add	lr, r1
1001469e:	bc02      	pop	{r1}
100146a0:	4770      	bx	lr
100146a2:	46c0      	nop			; (mov r8, r8)

100146a4 <__aeabi_uidiv>:
100146a4:	2200      	movs	r2, #0
100146a6:	0843      	lsrs	r3, r0, #1
100146a8:	428b      	cmp	r3, r1
100146aa:	d374      	bcc.n	10014796 <__aeabi_uidiv+0xf2>
100146ac:	0903      	lsrs	r3, r0, #4
100146ae:	428b      	cmp	r3, r1
100146b0:	d35f      	bcc.n	10014772 <__aeabi_uidiv+0xce>
100146b2:	0a03      	lsrs	r3, r0, #8
100146b4:	428b      	cmp	r3, r1
100146b6:	d344      	bcc.n	10014742 <__aeabi_uidiv+0x9e>
100146b8:	0b03      	lsrs	r3, r0, #12
100146ba:	428b      	cmp	r3, r1
100146bc:	d328      	bcc.n	10014710 <__aeabi_uidiv+0x6c>
100146be:	0c03      	lsrs	r3, r0, #16
100146c0:	428b      	cmp	r3, r1
100146c2:	d30d      	bcc.n	100146e0 <__aeabi_uidiv+0x3c>
100146c4:	22ff      	movs	r2, #255	; 0xff
100146c6:	0209      	lsls	r1, r1, #8
100146c8:	ba12      	rev	r2, r2
100146ca:	0c03      	lsrs	r3, r0, #16
100146cc:	428b      	cmp	r3, r1
100146ce:	d302      	bcc.n	100146d6 <__aeabi_uidiv+0x32>
100146d0:	1212      	asrs	r2, r2, #8
100146d2:	0209      	lsls	r1, r1, #8
100146d4:	d065      	beq.n	100147a2 <__aeabi_uidiv+0xfe>
100146d6:	0b03      	lsrs	r3, r0, #12
100146d8:	428b      	cmp	r3, r1
100146da:	d319      	bcc.n	10014710 <__aeabi_uidiv+0x6c>
100146dc:	e000      	b.n	100146e0 <__aeabi_uidiv+0x3c>
100146de:	0a09      	lsrs	r1, r1, #8
100146e0:	0bc3      	lsrs	r3, r0, #15
100146e2:	428b      	cmp	r3, r1
100146e4:	d301      	bcc.n	100146ea <__aeabi_uidiv+0x46>
100146e6:	03cb      	lsls	r3, r1, #15
100146e8:	1ac0      	subs	r0, r0, r3
100146ea:	4152      	adcs	r2, r2
100146ec:	0b83      	lsrs	r3, r0, #14
100146ee:	428b      	cmp	r3, r1
100146f0:	d301      	bcc.n	100146f6 <__aeabi_uidiv+0x52>
100146f2:	038b      	lsls	r3, r1, #14
100146f4:	1ac0      	subs	r0, r0, r3
100146f6:	4152      	adcs	r2, r2
100146f8:	0b43      	lsrs	r3, r0, #13
100146fa:	428b      	cmp	r3, r1
100146fc:	d301      	bcc.n	10014702 <__aeabi_uidiv+0x5e>
100146fe:	034b      	lsls	r3, r1, #13
10014700:	1ac0      	subs	r0, r0, r3
10014702:	4152      	adcs	r2, r2
10014704:	0b03      	lsrs	r3, r0, #12
10014706:	428b      	cmp	r3, r1
10014708:	d301      	bcc.n	1001470e <__aeabi_uidiv+0x6a>
1001470a:	030b      	lsls	r3, r1, #12
1001470c:	1ac0      	subs	r0, r0, r3
1001470e:	4152      	adcs	r2, r2
10014710:	0ac3      	lsrs	r3, r0, #11
10014712:	428b      	cmp	r3, r1
10014714:	d301      	bcc.n	1001471a <__aeabi_uidiv+0x76>
10014716:	02cb      	lsls	r3, r1, #11
10014718:	1ac0      	subs	r0, r0, r3
1001471a:	4152      	adcs	r2, r2
1001471c:	0a83      	lsrs	r3, r0, #10
1001471e:	428b      	cmp	r3, r1
10014720:	d301      	bcc.n	10014726 <__aeabi_uidiv+0x82>
10014722:	028b      	lsls	r3, r1, #10
10014724:	1ac0      	subs	r0, r0, r3
10014726:	4152      	adcs	r2, r2
10014728:	0a43      	lsrs	r3, r0, #9
1001472a:	428b      	cmp	r3, r1
1001472c:	d301      	bcc.n	10014732 <__aeabi_uidiv+0x8e>
1001472e:	024b      	lsls	r3, r1, #9
10014730:	1ac0      	subs	r0, r0, r3
10014732:	4152      	adcs	r2, r2
10014734:	0a03      	lsrs	r3, r0, #8
10014736:	428b      	cmp	r3, r1
10014738:	d301      	bcc.n	1001473e <__aeabi_uidiv+0x9a>
1001473a:	020b      	lsls	r3, r1, #8
1001473c:	1ac0      	subs	r0, r0, r3
1001473e:	4152      	adcs	r2, r2
10014740:	d2cd      	bcs.n	100146de <__aeabi_uidiv+0x3a>
10014742:	09c3      	lsrs	r3, r0, #7
10014744:	428b      	cmp	r3, r1
10014746:	d301      	bcc.n	1001474c <__aeabi_uidiv+0xa8>
10014748:	01cb      	lsls	r3, r1, #7
1001474a:	1ac0      	subs	r0, r0, r3
1001474c:	4152      	adcs	r2, r2
1001474e:	0983      	lsrs	r3, r0, #6
10014750:	428b      	cmp	r3, r1
10014752:	d301      	bcc.n	10014758 <__aeabi_uidiv+0xb4>
10014754:	018b      	lsls	r3, r1, #6
10014756:	1ac0      	subs	r0, r0, r3
10014758:	4152      	adcs	r2, r2
1001475a:	0943      	lsrs	r3, r0, #5
1001475c:	428b      	cmp	r3, r1
1001475e:	d301      	bcc.n	10014764 <__aeabi_uidiv+0xc0>
10014760:	014b      	lsls	r3, r1, #5
10014762:	1ac0      	subs	r0, r0, r3
10014764:	4152      	adcs	r2, r2
10014766:	0903      	lsrs	r3, r0, #4
10014768:	428b      	cmp	r3, r1
1001476a:	d301      	bcc.n	10014770 <__aeabi_uidiv+0xcc>
1001476c:	010b      	lsls	r3, r1, #4
1001476e:	1ac0      	subs	r0, r0, r3
10014770:	4152      	adcs	r2, r2
10014772:	08c3      	lsrs	r3, r0, #3
10014774:	428b      	cmp	r3, r1
10014776:	d301      	bcc.n	1001477c <__aeabi_uidiv+0xd8>
10014778:	00cb      	lsls	r3, r1, #3
1001477a:	1ac0      	subs	r0, r0, r3
1001477c:	4152      	adcs	r2, r2
1001477e:	0883      	lsrs	r3, r0, #2
10014780:	428b      	cmp	r3, r1
10014782:	d301      	bcc.n	10014788 <__aeabi_uidiv+0xe4>
10014784:	008b      	lsls	r3, r1, #2
10014786:	1ac0      	subs	r0, r0, r3
10014788:	4152      	adcs	r2, r2
1001478a:	0843      	lsrs	r3, r0, #1
1001478c:	428b      	cmp	r3, r1
1001478e:	d301      	bcc.n	10014794 <__aeabi_uidiv+0xf0>
10014790:	004b      	lsls	r3, r1, #1
10014792:	1ac0      	subs	r0, r0, r3
10014794:	4152      	adcs	r2, r2
10014796:	1a41      	subs	r1, r0, r1
10014798:	d200      	bcs.n	1001479c <__aeabi_uidiv+0xf8>
1001479a:	4601      	mov	r1, r0
1001479c:	4152      	adcs	r2, r2
1001479e:	4610      	mov	r0, r2
100147a0:	4770      	bx	lr
100147a2:	e7ff      	b.n	100147a4 <__aeabi_uidiv+0x100>
100147a4:	b501      	push	{r0, lr}
100147a6:	2000      	movs	r0, #0
100147a8:	f000 f8f0 	bl	1001498c <__aeabi_idiv0>
100147ac:	bd02      	pop	{r1, pc}
100147ae:	46c0      	nop			; (mov r8, r8)

100147b0 <__aeabi_uidivmod>:
100147b0:	2900      	cmp	r1, #0
100147b2:	d0f7      	beq.n	100147a4 <__aeabi_uidiv+0x100>
100147b4:	e776      	b.n	100146a4 <__aeabi_uidiv>
100147b6:	4770      	bx	lr

100147b8 <__aeabi_idiv>:
100147b8:	4603      	mov	r3, r0
100147ba:	430b      	orrs	r3, r1
100147bc:	d47f      	bmi.n	100148be <__aeabi_idiv+0x106>
100147be:	2200      	movs	r2, #0
100147c0:	0843      	lsrs	r3, r0, #1
100147c2:	428b      	cmp	r3, r1
100147c4:	d374      	bcc.n	100148b0 <__aeabi_idiv+0xf8>
100147c6:	0903      	lsrs	r3, r0, #4
100147c8:	428b      	cmp	r3, r1
100147ca:	d35f      	bcc.n	1001488c <__aeabi_idiv+0xd4>
100147cc:	0a03      	lsrs	r3, r0, #8
100147ce:	428b      	cmp	r3, r1
100147d0:	d344      	bcc.n	1001485c <__aeabi_idiv+0xa4>
100147d2:	0b03      	lsrs	r3, r0, #12
100147d4:	428b      	cmp	r3, r1
100147d6:	d328      	bcc.n	1001482a <__aeabi_idiv+0x72>
100147d8:	0c03      	lsrs	r3, r0, #16
100147da:	428b      	cmp	r3, r1
100147dc:	d30d      	bcc.n	100147fa <__aeabi_idiv+0x42>
100147de:	22ff      	movs	r2, #255	; 0xff
100147e0:	0209      	lsls	r1, r1, #8
100147e2:	ba12      	rev	r2, r2
100147e4:	0c03      	lsrs	r3, r0, #16
100147e6:	428b      	cmp	r3, r1
100147e8:	d302      	bcc.n	100147f0 <__aeabi_idiv+0x38>
100147ea:	1212      	asrs	r2, r2, #8
100147ec:	0209      	lsls	r1, r1, #8
100147ee:	d065      	beq.n	100148bc <__aeabi_idiv+0x104>
100147f0:	0b03      	lsrs	r3, r0, #12
100147f2:	428b      	cmp	r3, r1
100147f4:	d319      	bcc.n	1001482a <__aeabi_idiv+0x72>
100147f6:	e000      	b.n	100147fa <__aeabi_idiv+0x42>
100147f8:	0a09      	lsrs	r1, r1, #8
100147fa:	0bc3      	lsrs	r3, r0, #15
100147fc:	428b      	cmp	r3, r1
100147fe:	d301      	bcc.n	10014804 <__aeabi_idiv+0x4c>
10014800:	03cb      	lsls	r3, r1, #15
10014802:	1ac0      	subs	r0, r0, r3
10014804:	4152      	adcs	r2, r2
10014806:	0b83      	lsrs	r3, r0, #14
10014808:	428b      	cmp	r3, r1
1001480a:	d301      	bcc.n	10014810 <__aeabi_idiv+0x58>
1001480c:	038b      	lsls	r3, r1, #14
1001480e:	1ac0      	subs	r0, r0, r3
10014810:	4152      	adcs	r2, r2
10014812:	0b43      	lsrs	r3, r0, #13
10014814:	428b      	cmp	r3, r1
10014816:	d301      	bcc.n	1001481c <__aeabi_idiv+0x64>
10014818:	034b      	lsls	r3, r1, #13
1001481a:	1ac0      	subs	r0, r0, r3
1001481c:	4152      	adcs	r2, r2
1001481e:	0b03      	lsrs	r3, r0, #12
10014820:	428b      	cmp	r3, r1
10014822:	d301      	bcc.n	10014828 <__aeabi_idiv+0x70>
10014824:	030b      	lsls	r3, r1, #12
10014826:	1ac0      	subs	r0, r0, r3
10014828:	4152      	adcs	r2, r2
1001482a:	0ac3      	lsrs	r3, r0, #11
1001482c:	428b      	cmp	r3, r1
1001482e:	d301      	bcc.n	10014834 <__aeabi_idiv+0x7c>
10014830:	02cb      	lsls	r3, r1, #11
10014832:	1ac0      	subs	r0, r0, r3
10014834:	4152      	adcs	r2, r2
10014836:	0a83      	lsrs	r3, r0, #10
10014838:	428b      	cmp	r3, r1
1001483a:	d301      	bcc.n	10014840 <__aeabi_idiv+0x88>
1001483c:	028b      	lsls	r3, r1, #10
1001483e:	1ac0      	subs	r0, r0, r3
10014840:	4152      	adcs	r2, r2
10014842:	0a43      	lsrs	r3, r0, #9
10014844:	428b      	cmp	r3, r1
10014846:	d301      	bcc.n	1001484c <__aeabi_idiv+0x94>
10014848:	024b      	lsls	r3, r1, #9
1001484a:	1ac0      	subs	r0, r0, r3
1001484c:	4152      	adcs	r2, r2
1001484e:	0a03      	lsrs	r3, r0, #8
10014850:	428b      	cmp	r3, r1
10014852:	d301      	bcc.n	10014858 <__aeabi_idiv+0xa0>
10014854:	020b      	lsls	r3, r1, #8
10014856:	1ac0      	subs	r0, r0, r3
10014858:	4152      	adcs	r2, r2
1001485a:	d2cd      	bcs.n	100147f8 <__aeabi_idiv+0x40>
1001485c:	09c3      	lsrs	r3, r0, #7
1001485e:	428b      	cmp	r3, r1
10014860:	d301      	bcc.n	10014866 <__aeabi_idiv+0xae>
10014862:	01cb      	lsls	r3, r1, #7
10014864:	1ac0      	subs	r0, r0, r3
10014866:	4152      	adcs	r2, r2
10014868:	0983      	lsrs	r3, r0, #6
1001486a:	428b      	cmp	r3, r1
1001486c:	d301      	bcc.n	10014872 <__aeabi_idiv+0xba>
1001486e:	018b      	lsls	r3, r1, #6
10014870:	1ac0      	subs	r0, r0, r3
10014872:	4152      	adcs	r2, r2
10014874:	0943      	lsrs	r3, r0, #5
10014876:	428b      	cmp	r3, r1
10014878:	d301      	bcc.n	1001487e <__aeabi_idiv+0xc6>
1001487a:	014b      	lsls	r3, r1, #5
1001487c:	1ac0      	subs	r0, r0, r3
1001487e:	4152      	adcs	r2, r2
10014880:	0903      	lsrs	r3, r0, #4
10014882:	428b      	cmp	r3, r1
10014884:	d301      	bcc.n	1001488a <__aeabi_idiv+0xd2>
10014886:	010b      	lsls	r3, r1, #4
10014888:	1ac0      	subs	r0, r0, r3
1001488a:	4152      	adcs	r2, r2
1001488c:	08c3      	lsrs	r3, r0, #3
1001488e:	428b      	cmp	r3, r1
10014890:	d301      	bcc.n	10014896 <__aeabi_idiv+0xde>
10014892:	00cb      	lsls	r3, r1, #3
10014894:	1ac0      	subs	r0, r0, r3
10014896:	4152      	adcs	r2, r2
10014898:	0883      	lsrs	r3, r0, #2
1001489a:	428b      	cmp	r3, r1
1001489c:	d301      	bcc.n	100148a2 <__aeabi_idiv+0xea>
1001489e:	008b      	lsls	r3, r1, #2
100148a0:	1ac0      	subs	r0, r0, r3
100148a2:	4152      	adcs	r2, r2
100148a4:	0843      	lsrs	r3, r0, #1
100148a6:	428b      	cmp	r3, r1
100148a8:	d301      	bcc.n	100148ae <__aeabi_idiv+0xf6>
100148aa:	004b      	lsls	r3, r1, #1
100148ac:	1ac0      	subs	r0, r0, r3
100148ae:	4152      	adcs	r2, r2
100148b0:	1a41      	subs	r1, r0, r1
100148b2:	d200      	bcs.n	100148b6 <__aeabi_idiv+0xfe>
100148b4:	4601      	mov	r1, r0
100148b6:	4152      	adcs	r2, r2
100148b8:	4610      	mov	r0, r2
100148ba:	4770      	bx	lr
100148bc:	e05d      	b.n	1001497a <__aeabi_idiv+0x1c2>
100148be:	0fca      	lsrs	r2, r1, #31
100148c0:	d000      	beq.n	100148c4 <__aeabi_idiv+0x10c>
100148c2:	4249      	negs	r1, r1
100148c4:	1003      	asrs	r3, r0, #32
100148c6:	d300      	bcc.n	100148ca <__aeabi_idiv+0x112>
100148c8:	4240      	negs	r0, r0
100148ca:	4053      	eors	r3, r2
100148cc:	2200      	movs	r2, #0
100148ce:	469c      	mov	ip, r3
100148d0:	0903      	lsrs	r3, r0, #4
100148d2:	428b      	cmp	r3, r1
100148d4:	d32d      	bcc.n	10014932 <__aeabi_idiv+0x17a>
100148d6:	0a03      	lsrs	r3, r0, #8
100148d8:	428b      	cmp	r3, r1
100148da:	d312      	bcc.n	10014902 <__aeabi_idiv+0x14a>
100148dc:	22fc      	movs	r2, #252	; 0xfc
100148de:	0189      	lsls	r1, r1, #6
100148e0:	ba12      	rev	r2, r2
100148e2:	0a03      	lsrs	r3, r0, #8
100148e4:	428b      	cmp	r3, r1
100148e6:	d30c      	bcc.n	10014902 <__aeabi_idiv+0x14a>
100148e8:	0189      	lsls	r1, r1, #6
100148ea:	1192      	asrs	r2, r2, #6
100148ec:	428b      	cmp	r3, r1
100148ee:	d308      	bcc.n	10014902 <__aeabi_idiv+0x14a>
100148f0:	0189      	lsls	r1, r1, #6
100148f2:	1192      	asrs	r2, r2, #6
100148f4:	428b      	cmp	r3, r1
100148f6:	d304      	bcc.n	10014902 <__aeabi_idiv+0x14a>
100148f8:	0189      	lsls	r1, r1, #6
100148fa:	d03a      	beq.n	10014972 <__aeabi_idiv+0x1ba>
100148fc:	1192      	asrs	r2, r2, #6
100148fe:	e000      	b.n	10014902 <__aeabi_idiv+0x14a>
10014900:	0989      	lsrs	r1, r1, #6
10014902:	09c3      	lsrs	r3, r0, #7
10014904:	428b      	cmp	r3, r1
10014906:	d301      	bcc.n	1001490c <__aeabi_idiv+0x154>
10014908:	01cb      	lsls	r3, r1, #7
1001490a:	1ac0      	subs	r0, r0, r3
1001490c:	4152      	adcs	r2, r2
1001490e:	0983      	lsrs	r3, r0, #6
10014910:	428b      	cmp	r3, r1
10014912:	d301      	bcc.n	10014918 <__aeabi_idiv+0x160>
10014914:	018b      	lsls	r3, r1, #6
10014916:	1ac0      	subs	r0, r0, r3
10014918:	4152      	adcs	r2, r2
1001491a:	0943      	lsrs	r3, r0, #5
1001491c:	428b      	cmp	r3, r1
1001491e:	d301      	bcc.n	10014924 <__aeabi_idiv+0x16c>
10014920:	014b      	lsls	r3, r1, #5
10014922:	1ac0      	subs	r0, r0, r3
10014924:	4152      	adcs	r2, r2
10014926:	0903      	lsrs	r3, r0, #4
10014928:	428b      	cmp	r3, r1
1001492a:	d301      	bcc.n	10014930 <__aeabi_idiv+0x178>
1001492c:	010b      	lsls	r3, r1, #4
1001492e:	1ac0      	subs	r0, r0, r3
10014930:	4152      	adcs	r2, r2
10014932:	08c3      	lsrs	r3, r0, #3
10014934:	428b      	cmp	r3, r1
10014936:	d301      	bcc.n	1001493c <__aeabi_idiv+0x184>
10014938:	00cb      	lsls	r3, r1, #3
1001493a:	1ac0      	subs	r0, r0, r3
1001493c:	4152      	adcs	r2, r2
1001493e:	0883      	lsrs	r3, r0, #2
10014940:	428b      	cmp	r3, r1
10014942:	d301      	bcc.n	10014948 <__aeabi_idiv+0x190>
10014944:	008b      	lsls	r3, r1, #2
10014946:	1ac0      	subs	r0, r0, r3
10014948:	4152      	adcs	r2, r2
1001494a:	d2d9      	bcs.n	10014900 <__aeabi_idiv+0x148>
1001494c:	0843      	lsrs	r3, r0, #1
1001494e:	428b      	cmp	r3, r1
10014950:	d301      	bcc.n	10014956 <__aeabi_idiv+0x19e>
10014952:	004b      	lsls	r3, r1, #1
10014954:	1ac0      	subs	r0, r0, r3
10014956:	4152      	adcs	r2, r2
10014958:	1a41      	subs	r1, r0, r1
1001495a:	d200      	bcs.n	1001495e <__aeabi_idiv+0x1a6>
1001495c:	4601      	mov	r1, r0
1001495e:	4663      	mov	r3, ip
10014960:	4152      	adcs	r2, r2
10014962:	105b      	asrs	r3, r3, #1
10014964:	4610      	mov	r0, r2
10014966:	d301      	bcc.n	1001496c <__aeabi_idiv+0x1b4>
10014968:	4240      	negs	r0, r0
1001496a:	2b00      	cmp	r3, #0
1001496c:	d500      	bpl.n	10014970 <__aeabi_idiv+0x1b8>
1001496e:	4249      	negs	r1, r1
10014970:	4770      	bx	lr
10014972:	4663      	mov	r3, ip
10014974:	105b      	asrs	r3, r3, #1
10014976:	d300      	bcc.n	1001497a <__aeabi_idiv+0x1c2>
10014978:	4240      	negs	r0, r0
1001497a:	b501      	push	{r0, lr}
1001497c:	2000      	movs	r0, #0
1001497e:	f000 f805 	bl	1001498c <__aeabi_idiv0>
10014982:	bd02      	pop	{r1, pc}

10014984 <__aeabi_idivmod>:
10014984:	2900      	cmp	r1, #0
10014986:	d0f8      	beq.n	1001497a <__aeabi_idiv+0x1c2>
10014988:	e716      	b.n	100147b8 <__aeabi_idiv>
1001498a:	4770      	bx	lr

1001498c <__aeabi_idiv0>:
1001498c:	4770      	bx	lr
1001498e:	46c0      	nop			; (mov r8, r8)

10014990 <__aeabi_cdrcmple>:
10014990:	4684      	mov	ip, r0
10014992:	1c10      	adds	r0, r2, #0
10014994:	4662      	mov	r2, ip
10014996:	468c      	mov	ip, r1
10014998:	1c19      	adds	r1, r3, #0
1001499a:	4663      	mov	r3, ip
1001499c:	e000      	b.n	100149a0 <__aeabi_cdcmpeq>
1001499e:	46c0      	nop			; (mov r8, r8)

100149a0 <__aeabi_cdcmpeq>:
100149a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
100149a2:	f001 fa17 	bl	10015dd4 <__ledf2>
100149a6:	2800      	cmp	r0, #0
100149a8:	d401      	bmi.n	100149ae <__aeabi_cdcmpeq+0xe>
100149aa:	2100      	movs	r1, #0
100149ac:	42c8      	cmn	r0, r1
100149ae:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

100149b0 <__aeabi_dcmpeq>:
100149b0:	b510      	push	{r4, lr}
100149b2:	f001 f96b 	bl	10015c8c <__eqdf2>
100149b6:	4240      	negs	r0, r0
100149b8:	3001      	adds	r0, #1
100149ba:	bd10      	pop	{r4, pc}

100149bc <__aeabi_dcmplt>:
100149bc:	b510      	push	{r4, lr}
100149be:	f001 fa09 	bl	10015dd4 <__ledf2>
100149c2:	2800      	cmp	r0, #0
100149c4:	db01      	blt.n	100149ca <__aeabi_dcmplt+0xe>
100149c6:	2000      	movs	r0, #0
100149c8:	bd10      	pop	{r4, pc}
100149ca:	2001      	movs	r0, #1
100149cc:	bd10      	pop	{r4, pc}
100149ce:	46c0      	nop			; (mov r8, r8)

100149d0 <__aeabi_dcmple>:
100149d0:	b510      	push	{r4, lr}
100149d2:	f001 f9ff 	bl	10015dd4 <__ledf2>
100149d6:	2800      	cmp	r0, #0
100149d8:	dd01      	ble.n	100149de <__aeabi_dcmple+0xe>
100149da:	2000      	movs	r0, #0
100149dc:	bd10      	pop	{r4, pc}
100149de:	2001      	movs	r0, #1
100149e0:	bd10      	pop	{r4, pc}
100149e2:	46c0      	nop			; (mov r8, r8)

100149e4 <__aeabi_dcmpgt>:
100149e4:	b510      	push	{r4, lr}
100149e6:	f001 f991 	bl	10015d0c <__gedf2>
100149ea:	2800      	cmp	r0, #0
100149ec:	dc01      	bgt.n	100149f2 <__aeabi_dcmpgt+0xe>
100149ee:	2000      	movs	r0, #0
100149f0:	bd10      	pop	{r4, pc}
100149f2:	2001      	movs	r0, #1
100149f4:	bd10      	pop	{r4, pc}
100149f6:	46c0      	nop			; (mov r8, r8)

100149f8 <__aeabi_dcmpge>:
100149f8:	b510      	push	{r4, lr}
100149fa:	f001 f987 	bl	10015d0c <__gedf2>
100149fe:	2800      	cmp	r0, #0
10014a00:	da01      	bge.n	10014a06 <__aeabi_dcmpge+0xe>
10014a02:	2000      	movs	r0, #0
10014a04:	bd10      	pop	{r4, pc}
10014a06:	2001      	movs	r0, #1
10014a08:	bd10      	pop	{r4, pc}
10014a0a:	46c0      	nop			; (mov r8, r8)

10014a0c <__aeabi_lmul>:
10014a0c:	b5f0      	push	{r4, r5, r6, r7, lr}
10014a0e:	464f      	mov	r7, r9
10014a10:	4646      	mov	r6, r8
10014a12:	b4c0      	push	{r6, r7}
10014a14:	0416      	lsls	r6, r2, #16
10014a16:	0c36      	lsrs	r6, r6, #16
10014a18:	4699      	mov	r9, r3
10014a1a:	0033      	movs	r3, r6
10014a1c:	0405      	lsls	r5, r0, #16
10014a1e:	0c2c      	lsrs	r4, r5, #16
10014a20:	0c07      	lsrs	r7, r0, #16
10014a22:	0c15      	lsrs	r5, r2, #16
10014a24:	4363      	muls	r3, r4
10014a26:	437e      	muls	r6, r7
10014a28:	436f      	muls	r7, r5
10014a2a:	4365      	muls	r5, r4
10014a2c:	0c1c      	lsrs	r4, r3, #16
10014a2e:	19ad      	adds	r5, r5, r6
10014a30:	1964      	adds	r4, r4, r5
10014a32:	469c      	mov	ip, r3
10014a34:	42a6      	cmp	r6, r4
10014a36:	d903      	bls.n	10014a40 <__aeabi_lmul+0x34>
10014a38:	2380      	movs	r3, #128	; 0x80
10014a3a:	025b      	lsls	r3, r3, #9
10014a3c:	4698      	mov	r8, r3
10014a3e:	4447      	add	r7, r8
10014a40:	4663      	mov	r3, ip
10014a42:	0c25      	lsrs	r5, r4, #16
10014a44:	19ef      	adds	r7, r5, r7
10014a46:	041d      	lsls	r5, r3, #16
10014a48:	464b      	mov	r3, r9
10014a4a:	434a      	muls	r2, r1
10014a4c:	4343      	muls	r3, r0
10014a4e:	0c2d      	lsrs	r5, r5, #16
10014a50:	0424      	lsls	r4, r4, #16
10014a52:	1964      	adds	r4, r4, r5
10014a54:	1899      	adds	r1, r3, r2
10014a56:	19c9      	adds	r1, r1, r7
10014a58:	0020      	movs	r0, r4
10014a5a:	bc0c      	pop	{r2, r3}
10014a5c:	4690      	mov	r8, r2
10014a5e:	4699      	mov	r9, r3
10014a60:	bdf0      	pop	{r4, r5, r6, r7, pc}
10014a62:	46c0      	nop			; (mov r8, r8)

10014a64 <__aeabi_d2uiz>:
10014a64:	b570      	push	{r4, r5, r6, lr}
10014a66:	2200      	movs	r2, #0
10014a68:	4b0c      	ldr	r3, [pc, #48]	; (10014a9c <__aeabi_d2uiz+0x38>)
10014a6a:	0004      	movs	r4, r0
10014a6c:	000d      	movs	r5, r1
10014a6e:	f7ff ffc3 	bl	100149f8 <__aeabi_dcmpge>
10014a72:	2800      	cmp	r0, #0
10014a74:	d104      	bne.n	10014a80 <__aeabi_d2uiz+0x1c>
10014a76:	0020      	movs	r0, r4
10014a78:	0029      	movs	r1, r5
10014a7a:	f002 f803 	bl	10016a84 <__aeabi_d2iz>
10014a7e:	bd70      	pop	{r4, r5, r6, pc}
10014a80:	4b06      	ldr	r3, [pc, #24]	; (10014a9c <__aeabi_d2uiz+0x38>)
10014a82:	2200      	movs	r2, #0
10014a84:	0020      	movs	r0, r4
10014a86:	0029      	movs	r1, r5
10014a88:	f001 fc88 	bl	1001639c <__aeabi_dsub>
10014a8c:	f001 fffa 	bl	10016a84 <__aeabi_d2iz>
10014a90:	2380      	movs	r3, #128	; 0x80
10014a92:	061b      	lsls	r3, r3, #24
10014a94:	469c      	mov	ip, r3
10014a96:	4460      	add	r0, ip
10014a98:	e7f1      	b.n	10014a7e <__aeabi_d2uiz+0x1a>
10014a9a:	46c0      	nop			; (mov r8, r8)
10014a9c:	41e00000 	.word	0x41e00000

10014aa0 <__aeabi_fdiv>:
10014aa0:	b5f0      	push	{r4, r5, r6, r7, lr}
10014aa2:	4656      	mov	r6, sl
10014aa4:	4644      	mov	r4, r8
10014aa6:	465f      	mov	r7, fp
10014aa8:	464d      	mov	r5, r9
10014aaa:	b4f0      	push	{r4, r5, r6, r7}
10014aac:	0244      	lsls	r4, r0, #9
10014aae:	0046      	lsls	r6, r0, #1
10014ab0:	0fc7      	lsrs	r7, r0, #31
10014ab2:	b083      	sub	sp, #12
10014ab4:	4688      	mov	r8, r1
10014ab6:	0a65      	lsrs	r5, r4, #9
10014ab8:	0e36      	lsrs	r6, r6, #24
10014aba:	46ba      	mov	sl, r7
10014abc:	d03d      	beq.n	10014b3a <__aeabi_fdiv+0x9a>
10014abe:	2eff      	cmp	r6, #255	; 0xff
10014ac0:	d022      	beq.n	10014b08 <__aeabi_fdiv+0x68>
10014ac2:	2300      	movs	r3, #0
10014ac4:	00ec      	lsls	r4, r5, #3
10014ac6:	2580      	movs	r5, #128	; 0x80
10014ac8:	4699      	mov	r9, r3
10014aca:	469b      	mov	fp, r3
10014acc:	04ed      	lsls	r5, r5, #19
10014ace:	4325      	orrs	r5, r4
10014ad0:	3e7f      	subs	r6, #127	; 0x7f
10014ad2:	4643      	mov	r3, r8
10014ad4:	025c      	lsls	r4, r3, #9
10014ad6:	0058      	lsls	r0, r3, #1
10014ad8:	0fdb      	lsrs	r3, r3, #31
10014ada:	0a64      	lsrs	r4, r4, #9
10014adc:	0e00      	lsrs	r0, r0, #24
10014ade:	4698      	mov	r8, r3
10014ae0:	d036      	beq.n	10014b50 <__aeabi_fdiv+0xb0>
10014ae2:	28ff      	cmp	r0, #255	; 0xff
10014ae4:	d030      	beq.n	10014b48 <__aeabi_fdiv+0xa8>
10014ae6:	2380      	movs	r3, #128	; 0x80
10014ae8:	2100      	movs	r1, #0
10014aea:	00e4      	lsls	r4, r4, #3
10014aec:	04db      	lsls	r3, r3, #19
10014aee:	431c      	orrs	r4, r3
10014af0:	387f      	subs	r0, #127	; 0x7f
10014af2:	1a30      	subs	r0, r6, r0
10014af4:	9001      	str	r0, [sp, #4]
10014af6:	4648      	mov	r0, r9
10014af8:	4642      	mov	r2, r8
10014afa:	4308      	orrs	r0, r1
10014afc:	4e72      	ldr	r6, [pc, #456]	; (10014cc8 <__aeabi_fdiv+0x228>)
10014afe:	0080      	lsls	r0, r0, #2
10014b00:	5830      	ldr	r0, [r6, r0]
10014b02:	407a      	eors	r2, r7
10014b04:	0013      	movs	r3, r2
10014b06:	4687      	mov	pc, r0
10014b08:	2d00      	cmp	r5, #0
10014b0a:	d144      	bne.n	10014b96 <__aeabi_fdiv+0xf6>
10014b0c:	2308      	movs	r3, #8
10014b0e:	4699      	mov	r9, r3
10014b10:	3b06      	subs	r3, #6
10014b12:	469b      	mov	fp, r3
10014b14:	e7dd      	b.n	10014ad2 <__aeabi_fdiv+0x32>
10014b16:	2201      	movs	r2, #1
10014b18:	20ff      	movs	r0, #255	; 0xff
10014b1a:	2400      	movs	r4, #0
10014b1c:	401a      	ands	r2, r3
10014b1e:	0264      	lsls	r4, r4, #9
10014b20:	05c3      	lsls	r3, r0, #23
10014b22:	0a64      	lsrs	r4, r4, #9
10014b24:	07d2      	lsls	r2, r2, #31
10014b26:	431c      	orrs	r4, r3
10014b28:	4314      	orrs	r4, r2
10014b2a:	0020      	movs	r0, r4
10014b2c:	b003      	add	sp, #12
10014b2e:	bc3c      	pop	{r2, r3, r4, r5}
10014b30:	4690      	mov	r8, r2
10014b32:	4699      	mov	r9, r3
10014b34:	46a2      	mov	sl, r4
10014b36:	46ab      	mov	fp, r5
10014b38:	bdf0      	pop	{r4, r5, r6, r7, pc}
10014b3a:	2d00      	cmp	r5, #0
10014b3c:	d120      	bne.n	10014b80 <__aeabi_fdiv+0xe0>
10014b3e:	2304      	movs	r3, #4
10014b40:	4699      	mov	r9, r3
10014b42:	3b03      	subs	r3, #3
10014b44:	469b      	mov	fp, r3
10014b46:	e7c4      	b.n	10014ad2 <__aeabi_fdiv+0x32>
10014b48:	2c00      	cmp	r4, #0
10014b4a:	d117      	bne.n	10014b7c <__aeabi_fdiv+0xdc>
10014b4c:	2102      	movs	r1, #2
10014b4e:	e002      	b.n	10014b56 <__aeabi_fdiv+0xb6>
10014b50:	2c00      	cmp	r4, #0
10014b52:	d10a      	bne.n	10014b6a <__aeabi_fdiv+0xca>
10014b54:	2101      	movs	r1, #1
10014b56:	1a32      	subs	r2, r6, r0
10014b58:	9201      	str	r2, [sp, #4]
10014b5a:	464a      	mov	r2, r9
10014b5c:	4643      	mov	r3, r8
10014b5e:	430a      	orrs	r2, r1
10014b60:	485a      	ldr	r0, [pc, #360]	; (10014ccc <__aeabi_fdiv+0x22c>)
10014b62:	0092      	lsls	r2, r2, #2
10014b64:	5882      	ldr	r2, [r0, r2]
10014b66:	407b      	eors	r3, r7
10014b68:	4697      	mov	pc, r2
10014b6a:	0020      	movs	r0, r4
10014b6c:	f002 f91a 	bl	10016da4 <__clzsi2>
10014b70:	1f43      	subs	r3, r0, #5
10014b72:	3076      	adds	r0, #118	; 0x76
10014b74:	409c      	lsls	r4, r3
10014b76:	4240      	negs	r0, r0
10014b78:	2100      	movs	r1, #0
10014b7a:	e7ba      	b.n	10014af2 <__aeabi_fdiv+0x52>
10014b7c:	2103      	movs	r1, #3
10014b7e:	e7b8      	b.n	10014af2 <__aeabi_fdiv+0x52>
10014b80:	0028      	movs	r0, r5
10014b82:	f002 f90f 	bl	10016da4 <__clzsi2>
10014b86:	1f43      	subs	r3, r0, #5
10014b88:	409d      	lsls	r5, r3
10014b8a:	2300      	movs	r3, #0
10014b8c:	3076      	adds	r0, #118	; 0x76
10014b8e:	4246      	negs	r6, r0
10014b90:	4699      	mov	r9, r3
10014b92:	469b      	mov	fp, r3
10014b94:	e79d      	b.n	10014ad2 <__aeabi_fdiv+0x32>
10014b96:	230c      	movs	r3, #12
10014b98:	4699      	mov	r9, r3
10014b9a:	3b09      	subs	r3, #9
10014b9c:	469b      	mov	fp, r3
10014b9e:	e798      	b.n	10014ad2 <__aeabi_fdiv+0x32>
10014ba0:	2480      	movs	r4, #128	; 0x80
10014ba2:	2200      	movs	r2, #0
10014ba4:	03e4      	lsls	r4, r4, #15
10014ba6:	20ff      	movs	r0, #255	; 0xff
10014ba8:	e7b9      	b.n	10014b1e <__aeabi_fdiv+0x7e>
10014baa:	2400      	movs	r4, #0
10014bac:	46c2      	mov	sl, r8
10014bae:	468b      	mov	fp, r1
10014bb0:	465a      	mov	r2, fp
10014bb2:	4653      	mov	r3, sl
10014bb4:	2a02      	cmp	r2, #2
10014bb6:	d0ae      	beq.n	10014b16 <__aeabi_fdiv+0x76>
10014bb8:	2a03      	cmp	r2, #3
10014bba:	d07d      	beq.n	10014cb8 <__aeabi_fdiv+0x218>
10014bbc:	2a01      	cmp	r2, #1
10014bbe:	d131      	bne.n	10014c24 <__aeabi_fdiv+0x184>
10014bc0:	2201      	movs	r2, #1
10014bc2:	2000      	movs	r0, #0
10014bc4:	401a      	ands	r2, r3
10014bc6:	2400      	movs	r4, #0
10014bc8:	e7a9      	b.n	10014b1e <__aeabi_fdiv+0x7e>
10014bca:	2201      	movs	r2, #1
10014bcc:	1a10      	subs	r0, r2, r0
10014bce:	281b      	cmp	r0, #27
10014bd0:	dd56      	ble.n	10014c80 <__aeabi_fdiv+0x1e0>
10014bd2:	401a      	ands	r2, r3
10014bd4:	2000      	movs	r0, #0
10014bd6:	2400      	movs	r4, #0
10014bd8:	e7a1      	b.n	10014b1e <__aeabi_fdiv+0x7e>
10014bda:	2380      	movs	r3, #128	; 0x80
10014bdc:	03db      	lsls	r3, r3, #15
10014bde:	421d      	tst	r5, r3
10014be0:	d14b      	bne.n	10014c7a <__aeabi_fdiv+0x1da>
10014be2:	2380      	movs	r3, #128	; 0x80
10014be4:	03db      	lsls	r3, r3, #15
10014be6:	432b      	orrs	r3, r5
10014be8:	025c      	lsls	r4, r3, #9
10014bea:	0a64      	lsrs	r4, r4, #9
10014bec:	003a      	movs	r2, r7
10014bee:	20ff      	movs	r0, #255	; 0xff
10014bf0:	e795      	b.n	10014b1e <__aeabi_fdiv+0x7e>
10014bf2:	016d      	lsls	r5, r5, #5
10014bf4:	0160      	lsls	r0, r4, #5
10014bf6:	4285      	cmp	r5, r0
10014bf8:	d230      	bcs.n	10014c5c <__aeabi_fdiv+0x1bc>
10014bfa:	9a01      	ldr	r2, [sp, #4]
10014bfc:	2400      	movs	r4, #0
10014bfe:	3a01      	subs	r2, #1
10014c00:	9201      	str	r2, [sp, #4]
10014c02:	221b      	movs	r2, #27
10014c04:	2701      	movs	r7, #1
10014c06:	0029      	movs	r1, r5
10014c08:	0064      	lsls	r4, r4, #1
10014c0a:	006d      	lsls	r5, r5, #1
10014c0c:	2900      	cmp	r1, #0
10014c0e:	db01      	blt.n	10014c14 <__aeabi_fdiv+0x174>
10014c10:	42a8      	cmp	r0, r5
10014c12:	d801      	bhi.n	10014c18 <__aeabi_fdiv+0x178>
10014c14:	1a2d      	subs	r5, r5, r0
10014c16:	433c      	orrs	r4, r7
10014c18:	3a01      	subs	r2, #1
10014c1a:	2a00      	cmp	r2, #0
10014c1c:	d1f3      	bne.n	10014c06 <__aeabi_fdiv+0x166>
10014c1e:	1e6a      	subs	r2, r5, #1
10014c20:	4195      	sbcs	r5, r2
10014c22:	432c      	orrs	r4, r5
10014c24:	9801      	ldr	r0, [sp, #4]
10014c26:	307f      	adds	r0, #127	; 0x7f
10014c28:	2800      	cmp	r0, #0
10014c2a:	ddce      	ble.n	10014bca <__aeabi_fdiv+0x12a>
10014c2c:	0762      	lsls	r2, r4, #29
10014c2e:	d004      	beq.n	10014c3a <__aeabi_fdiv+0x19a>
10014c30:	220f      	movs	r2, #15
10014c32:	4022      	ands	r2, r4
10014c34:	2a04      	cmp	r2, #4
10014c36:	d000      	beq.n	10014c3a <__aeabi_fdiv+0x19a>
10014c38:	3404      	adds	r4, #4
10014c3a:	0122      	lsls	r2, r4, #4
10014c3c:	d503      	bpl.n	10014c46 <__aeabi_fdiv+0x1a6>
10014c3e:	4a24      	ldr	r2, [pc, #144]	; (10014cd0 <__aeabi_fdiv+0x230>)
10014c40:	9801      	ldr	r0, [sp, #4]
10014c42:	4014      	ands	r4, r2
10014c44:	3080      	adds	r0, #128	; 0x80
10014c46:	28fe      	cmp	r0, #254	; 0xfe
10014c48:	dd00      	ble.n	10014c4c <__aeabi_fdiv+0x1ac>
10014c4a:	e764      	b.n	10014b16 <__aeabi_fdiv+0x76>
10014c4c:	2201      	movs	r2, #1
10014c4e:	01a4      	lsls	r4, r4, #6
10014c50:	0a64      	lsrs	r4, r4, #9
10014c52:	b2c0      	uxtb	r0, r0
10014c54:	401a      	ands	r2, r3
10014c56:	e762      	b.n	10014b1e <__aeabi_fdiv+0x7e>
10014c58:	002c      	movs	r4, r5
10014c5a:	e7a9      	b.n	10014bb0 <__aeabi_fdiv+0x110>
10014c5c:	1a2d      	subs	r5, r5, r0
10014c5e:	221a      	movs	r2, #26
10014c60:	2401      	movs	r4, #1
10014c62:	e7cf      	b.n	10014c04 <__aeabi_fdiv+0x164>
10014c64:	026b      	lsls	r3, r5, #9
10014c66:	d5bc      	bpl.n	10014be2 <__aeabi_fdiv+0x142>
10014c68:	2400      	movs	r4, #0
10014c6a:	2380      	movs	r3, #128	; 0x80
10014c6c:	03db      	lsls	r3, r3, #15
10014c6e:	431c      	orrs	r4, r3
10014c70:	0264      	lsls	r4, r4, #9
10014c72:	0a64      	lsrs	r4, r4, #9
10014c74:	4642      	mov	r2, r8
10014c76:	20ff      	movs	r0, #255	; 0xff
10014c78:	e751      	b.n	10014b1e <__aeabi_fdiv+0x7e>
10014c7a:	421c      	tst	r4, r3
10014c7c:	d1b3      	bne.n	10014be6 <__aeabi_fdiv+0x146>
10014c7e:	e7f4      	b.n	10014c6a <__aeabi_fdiv+0x1ca>
10014c80:	0021      	movs	r1, r4
10014c82:	2220      	movs	r2, #32
10014c84:	40c1      	lsrs	r1, r0
10014c86:	1a10      	subs	r0, r2, r0
10014c88:	4084      	lsls	r4, r0
10014c8a:	1e62      	subs	r2, r4, #1
10014c8c:	4194      	sbcs	r4, r2
10014c8e:	430c      	orrs	r4, r1
10014c90:	0762      	lsls	r2, r4, #29
10014c92:	d004      	beq.n	10014c9e <__aeabi_fdiv+0x1fe>
10014c94:	220f      	movs	r2, #15
10014c96:	4022      	ands	r2, r4
10014c98:	2a04      	cmp	r2, #4
10014c9a:	d000      	beq.n	10014c9e <__aeabi_fdiv+0x1fe>
10014c9c:	3404      	adds	r4, #4
10014c9e:	0162      	lsls	r2, r4, #5
10014ca0:	d504      	bpl.n	10014cac <__aeabi_fdiv+0x20c>
10014ca2:	2201      	movs	r2, #1
10014ca4:	2001      	movs	r0, #1
10014ca6:	401a      	ands	r2, r3
10014ca8:	2400      	movs	r4, #0
10014caa:	e738      	b.n	10014b1e <__aeabi_fdiv+0x7e>
10014cac:	2201      	movs	r2, #1
10014cae:	01a4      	lsls	r4, r4, #6
10014cb0:	0a64      	lsrs	r4, r4, #9
10014cb2:	401a      	ands	r2, r3
10014cb4:	2000      	movs	r0, #0
10014cb6:	e732      	b.n	10014b1e <__aeabi_fdiv+0x7e>
10014cb8:	2380      	movs	r3, #128	; 0x80
10014cba:	03db      	lsls	r3, r3, #15
10014cbc:	431c      	orrs	r4, r3
10014cbe:	0264      	lsls	r4, r4, #9
10014cc0:	0a64      	lsrs	r4, r4, #9
10014cc2:	4652      	mov	r2, sl
10014cc4:	20ff      	movs	r0, #255	; 0xff
10014cc6:	e72a      	b.n	10014b1e <__aeabi_fdiv+0x7e>
10014cc8:	10017d10 	.word	0x10017d10
10014ccc:	10017d50 	.word	0x10017d50
10014cd0:	f7ffffff 	.word	0xf7ffffff

10014cd4 <__aeabi_fmul>:
10014cd4:	b5f0      	push	{r4, r5, r6, r7, lr}
10014cd6:	4657      	mov	r7, sl
10014cd8:	464e      	mov	r6, r9
10014cda:	4645      	mov	r5, r8
10014cdc:	0043      	lsls	r3, r0, #1
10014cde:	b4e0      	push	{r5, r6, r7}
10014ce0:	0246      	lsls	r6, r0, #9
10014ce2:	4688      	mov	r8, r1
10014ce4:	0a76      	lsrs	r6, r6, #9
10014ce6:	0e1f      	lsrs	r7, r3, #24
10014ce8:	0fc4      	lsrs	r4, r0, #31
10014cea:	2f00      	cmp	r7, #0
10014cec:	d047      	beq.n	10014d7e <__aeabi_fmul+0xaa>
10014cee:	2fff      	cmp	r7, #255	; 0xff
10014cf0:	d025      	beq.n	10014d3e <__aeabi_fmul+0x6a>
10014cf2:	2300      	movs	r3, #0
10014cf4:	2580      	movs	r5, #128	; 0x80
10014cf6:	469a      	mov	sl, r3
10014cf8:	4699      	mov	r9, r3
10014cfa:	00f6      	lsls	r6, r6, #3
10014cfc:	04ed      	lsls	r5, r5, #19
10014cfe:	432e      	orrs	r6, r5
10014d00:	3f7f      	subs	r7, #127	; 0x7f
10014d02:	4643      	mov	r3, r8
10014d04:	4642      	mov	r2, r8
10014d06:	025d      	lsls	r5, r3, #9
10014d08:	0fd2      	lsrs	r2, r2, #31
10014d0a:	005b      	lsls	r3, r3, #1
10014d0c:	0a6d      	lsrs	r5, r5, #9
10014d0e:	0e1b      	lsrs	r3, r3, #24
10014d10:	4690      	mov	r8, r2
10014d12:	d040      	beq.n	10014d96 <__aeabi_fmul+0xc2>
10014d14:	2bff      	cmp	r3, #255	; 0xff
10014d16:	d039      	beq.n	10014d8c <__aeabi_fmul+0xb8>
10014d18:	2280      	movs	r2, #128	; 0x80
10014d1a:	2000      	movs	r0, #0
10014d1c:	00ed      	lsls	r5, r5, #3
10014d1e:	04d2      	lsls	r2, r2, #19
10014d20:	4315      	orrs	r5, r2
10014d22:	3b7f      	subs	r3, #127	; 0x7f
10014d24:	18fb      	adds	r3, r7, r3
10014d26:	4642      	mov	r2, r8
10014d28:	4657      	mov	r7, sl
10014d2a:	1c59      	adds	r1, r3, #1
10014d2c:	4062      	eors	r2, r4
10014d2e:	468c      	mov	ip, r1
10014d30:	4307      	orrs	r7, r0
10014d32:	2f0f      	cmp	r7, #15
10014d34:	d85c      	bhi.n	10014df0 <__aeabi_fmul+0x11c>
10014d36:	496f      	ldr	r1, [pc, #444]	; (10014ef4 <__aeabi_fmul+0x220>)
10014d38:	00bf      	lsls	r7, r7, #2
10014d3a:	59c9      	ldr	r1, [r1, r7]
10014d3c:	468f      	mov	pc, r1
10014d3e:	2e00      	cmp	r6, #0
10014d40:	d145      	bne.n	10014dce <__aeabi_fmul+0xfa>
10014d42:	2308      	movs	r3, #8
10014d44:	469a      	mov	sl, r3
10014d46:	3b06      	subs	r3, #6
10014d48:	4699      	mov	r9, r3
10014d4a:	e7da      	b.n	10014d02 <__aeabi_fmul+0x2e>
10014d4c:	4642      	mov	r2, r8
10014d4e:	2802      	cmp	r0, #2
10014d50:	d02d      	beq.n	10014dae <__aeabi_fmul+0xda>
10014d52:	2803      	cmp	r0, #3
10014d54:	d100      	bne.n	10014d58 <__aeabi_fmul+0x84>
10014d56:	e0c3      	b.n	10014ee0 <__aeabi_fmul+0x20c>
10014d58:	2801      	cmp	r0, #1
10014d5a:	d000      	beq.n	10014d5e <__aeabi_fmul+0x8a>
10014d5c:	e0a2      	b.n	10014ea4 <__aeabi_fmul+0x1d0>
10014d5e:	2500      	movs	r5, #0
10014d60:	2600      	movs	r6, #0
10014d62:	4002      	ands	r2, r0
10014d64:	b2d4      	uxtb	r4, r2
10014d66:	0276      	lsls	r6, r6, #9
10014d68:	05ed      	lsls	r5, r5, #23
10014d6a:	0a76      	lsrs	r6, r6, #9
10014d6c:	432e      	orrs	r6, r5
10014d6e:	07e4      	lsls	r4, r4, #31
10014d70:	4326      	orrs	r6, r4
10014d72:	0030      	movs	r0, r6
10014d74:	bc1c      	pop	{r2, r3, r4}
10014d76:	4690      	mov	r8, r2
10014d78:	4699      	mov	r9, r3
10014d7a:	46a2      	mov	sl, r4
10014d7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
10014d7e:	2e00      	cmp	r6, #0
10014d80:	d11a      	bne.n	10014db8 <__aeabi_fmul+0xe4>
10014d82:	2304      	movs	r3, #4
10014d84:	469a      	mov	sl, r3
10014d86:	3b03      	subs	r3, #3
10014d88:	4699      	mov	r9, r3
10014d8a:	e7ba      	b.n	10014d02 <__aeabi_fmul+0x2e>
10014d8c:	002a      	movs	r2, r5
10014d8e:	1e51      	subs	r1, r2, #1
10014d90:	418a      	sbcs	r2, r1
10014d92:	1c90      	adds	r0, r2, #2
10014d94:	e7c6      	b.n	10014d24 <__aeabi_fmul+0x50>
10014d96:	2001      	movs	r0, #1
10014d98:	2d00      	cmp	r5, #0
10014d9a:	d0c3      	beq.n	10014d24 <__aeabi_fmul+0x50>
10014d9c:	0028      	movs	r0, r5
10014d9e:	f002 f801 	bl	10016da4 <__clzsi2>
10014da2:	1f43      	subs	r3, r0, #5
10014da4:	3076      	adds	r0, #118	; 0x76
10014da6:	409d      	lsls	r5, r3
10014da8:	4243      	negs	r3, r0
10014daa:	2000      	movs	r0, #0
10014dac:	e7ba      	b.n	10014d24 <__aeabi_fmul+0x50>
10014dae:	2401      	movs	r4, #1
10014db0:	25ff      	movs	r5, #255	; 0xff
10014db2:	4014      	ands	r4, r2
10014db4:	2600      	movs	r6, #0
10014db6:	e7d6      	b.n	10014d66 <__aeabi_fmul+0x92>
10014db8:	0030      	movs	r0, r6
10014dba:	f001 fff3 	bl	10016da4 <__clzsi2>
10014dbe:	1f43      	subs	r3, r0, #5
10014dc0:	409e      	lsls	r6, r3
10014dc2:	2300      	movs	r3, #0
10014dc4:	3076      	adds	r0, #118	; 0x76
10014dc6:	4247      	negs	r7, r0
10014dc8:	469a      	mov	sl, r3
10014dca:	4699      	mov	r9, r3
10014dcc:	e799      	b.n	10014d02 <__aeabi_fmul+0x2e>
10014dce:	230c      	movs	r3, #12
10014dd0:	469a      	mov	sl, r3
10014dd2:	3b09      	subs	r3, #9
10014dd4:	4699      	mov	r9, r3
10014dd6:	e794      	b.n	10014d02 <__aeabi_fmul+0x2e>
10014dd8:	2680      	movs	r6, #128	; 0x80
10014dda:	2400      	movs	r4, #0
10014ddc:	03f6      	lsls	r6, r6, #15
10014dde:	25ff      	movs	r5, #255	; 0xff
10014de0:	e7c1      	b.n	10014d66 <__aeabi_fmul+0x92>
10014de2:	0035      	movs	r5, r6
10014de4:	4648      	mov	r0, r9
10014de6:	e7b2      	b.n	10014d4e <__aeabi_fmul+0x7a>
10014de8:	0035      	movs	r5, r6
10014dea:	0022      	movs	r2, r4
10014dec:	4648      	mov	r0, r9
10014dee:	e7ae      	b.n	10014d4e <__aeabi_fmul+0x7a>
10014df0:	0429      	lsls	r1, r5, #16
10014df2:	0c09      	lsrs	r1, r1, #16
10014df4:	0008      	movs	r0, r1
10014df6:	0c37      	lsrs	r7, r6, #16
10014df8:	0436      	lsls	r6, r6, #16
10014dfa:	0c36      	lsrs	r6, r6, #16
10014dfc:	0c2c      	lsrs	r4, r5, #16
10014dfe:	4379      	muls	r1, r7
10014e00:	4370      	muls	r0, r6
10014e02:	4367      	muls	r7, r4
10014e04:	4374      	muls	r4, r6
10014e06:	0c06      	lsrs	r6, r0, #16
10014e08:	1864      	adds	r4, r4, r1
10014e0a:	1936      	adds	r6, r6, r4
10014e0c:	42b1      	cmp	r1, r6
10014e0e:	d903      	bls.n	10014e18 <__aeabi_fmul+0x144>
10014e10:	2180      	movs	r1, #128	; 0x80
10014e12:	0249      	lsls	r1, r1, #9
10014e14:	4688      	mov	r8, r1
10014e16:	4447      	add	r7, r8
10014e18:	0400      	lsls	r0, r0, #16
10014e1a:	0c00      	lsrs	r0, r0, #16
10014e1c:	0431      	lsls	r1, r6, #16
10014e1e:	1809      	adds	r1, r1, r0
10014e20:	018d      	lsls	r5, r1, #6
10014e22:	1e68      	subs	r0, r5, #1
10014e24:	4185      	sbcs	r5, r0
10014e26:	0e89      	lsrs	r1, r1, #26
10014e28:	4329      	orrs	r1, r5
10014e2a:	0c35      	lsrs	r5, r6, #16
10014e2c:	19ed      	adds	r5, r5, r7
10014e2e:	01ad      	lsls	r5, r5, #6
10014e30:	430d      	orrs	r5, r1
10014e32:	0129      	lsls	r1, r5, #4
10014e34:	d504      	bpl.n	10014e40 <__aeabi_fmul+0x16c>
10014e36:	2301      	movs	r3, #1
10014e38:	0869      	lsrs	r1, r5, #1
10014e3a:	401d      	ands	r5, r3
10014e3c:	4663      	mov	r3, ip
10014e3e:	430d      	orrs	r5, r1
10014e40:	0019      	movs	r1, r3
10014e42:	317f      	adds	r1, #127	; 0x7f
10014e44:	2900      	cmp	r1, #0
10014e46:	dd25      	ble.n	10014e94 <__aeabi_fmul+0x1c0>
10014e48:	0768      	lsls	r0, r5, #29
10014e4a:	d004      	beq.n	10014e56 <__aeabi_fmul+0x182>
10014e4c:	200f      	movs	r0, #15
10014e4e:	4028      	ands	r0, r5
10014e50:	2804      	cmp	r0, #4
10014e52:	d000      	beq.n	10014e56 <__aeabi_fmul+0x182>
10014e54:	3504      	adds	r5, #4
10014e56:	0128      	lsls	r0, r5, #4
10014e58:	d503      	bpl.n	10014e62 <__aeabi_fmul+0x18e>
10014e5a:	4927      	ldr	r1, [pc, #156]	; (10014ef8 <__aeabi_fmul+0x224>)
10014e5c:	3380      	adds	r3, #128	; 0x80
10014e5e:	400d      	ands	r5, r1
10014e60:	0019      	movs	r1, r3
10014e62:	29fe      	cmp	r1, #254	; 0xfe
10014e64:	dca3      	bgt.n	10014dae <__aeabi_fmul+0xda>
10014e66:	2401      	movs	r4, #1
10014e68:	01ad      	lsls	r5, r5, #6
10014e6a:	0a6e      	lsrs	r6, r5, #9
10014e6c:	4014      	ands	r4, r2
10014e6e:	b2cd      	uxtb	r5, r1
10014e70:	e779      	b.n	10014d66 <__aeabi_fmul+0x92>
10014e72:	2080      	movs	r0, #128	; 0x80
10014e74:	03c0      	lsls	r0, r0, #15
10014e76:	4206      	tst	r6, r0
10014e78:	d007      	beq.n	10014e8a <__aeabi_fmul+0x1b6>
10014e7a:	4205      	tst	r5, r0
10014e7c:	d105      	bne.n	10014e8a <__aeabi_fmul+0x1b6>
10014e7e:	4328      	orrs	r0, r5
10014e80:	0246      	lsls	r6, r0, #9
10014e82:	0a76      	lsrs	r6, r6, #9
10014e84:	4644      	mov	r4, r8
10014e86:	25ff      	movs	r5, #255	; 0xff
10014e88:	e76d      	b.n	10014d66 <__aeabi_fmul+0x92>
10014e8a:	4306      	orrs	r6, r0
10014e8c:	0276      	lsls	r6, r6, #9
10014e8e:	0a76      	lsrs	r6, r6, #9
10014e90:	25ff      	movs	r5, #255	; 0xff
10014e92:	e768      	b.n	10014d66 <__aeabi_fmul+0x92>
10014e94:	2401      	movs	r4, #1
10014e96:	1a61      	subs	r1, r4, r1
10014e98:	291b      	cmp	r1, #27
10014e9a:	dd05      	ble.n	10014ea8 <__aeabi_fmul+0x1d4>
10014e9c:	4014      	ands	r4, r2
10014e9e:	2500      	movs	r5, #0
10014ea0:	2600      	movs	r6, #0
10014ea2:	e760      	b.n	10014d66 <__aeabi_fmul+0x92>
10014ea4:	4663      	mov	r3, ip
10014ea6:	e7cb      	b.n	10014e40 <__aeabi_fmul+0x16c>
10014ea8:	002e      	movs	r6, r5
10014eaa:	2320      	movs	r3, #32
10014eac:	40ce      	lsrs	r6, r1
10014eae:	1a59      	subs	r1, r3, r1
10014eb0:	408d      	lsls	r5, r1
10014eb2:	1e6b      	subs	r3, r5, #1
10014eb4:	419d      	sbcs	r5, r3
10014eb6:	432e      	orrs	r6, r5
10014eb8:	0773      	lsls	r3, r6, #29
10014eba:	d004      	beq.n	10014ec6 <__aeabi_fmul+0x1f2>
10014ebc:	230f      	movs	r3, #15
10014ebe:	4033      	ands	r3, r6
10014ec0:	2b04      	cmp	r3, #4
10014ec2:	d000      	beq.n	10014ec6 <__aeabi_fmul+0x1f2>
10014ec4:	3604      	adds	r6, #4
10014ec6:	0173      	lsls	r3, r6, #5
10014ec8:	d504      	bpl.n	10014ed4 <__aeabi_fmul+0x200>
10014eca:	2401      	movs	r4, #1
10014ecc:	2501      	movs	r5, #1
10014ece:	4014      	ands	r4, r2
10014ed0:	2600      	movs	r6, #0
10014ed2:	e748      	b.n	10014d66 <__aeabi_fmul+0x92>
10014ed4:	2401      	movs	r4, #1
10014ed6:	01b6      	lsls	r6, r6, #6
10014ed8:	0a76      	lsrs	r6, r6, #9
10014eda:	4014      	ands	r4, r2
10014edc:	2500      	movs	r5, #0
10014ede:	e742      	b.n	10014d66 <__aeabi_fmul+0x92>
10014ee0:	2680      	movs	r6, #128	; 0x80
10014ee2:	2401      	movs	r4, #1
10014ee4:	03f6      	lsls	r6, r6, #15
10014ee6:	432e      	orrs	r6, r5
10014ee8:	0276      	lsls	r6, r6, #9
10014eea:	0a76      	lsrs	r6, r6, #9
10014eec:	4014      	ands	r4, r2
10014eee:	25ff      	movs	r5, #255	; 0xff
10014ef0:	e739      	b.n	10014d66 <__aeabi_fmul+0x92>
10014ef2:	46c0      	nop			; (mov r8, r8)
10014ef4:	10017d90 	.word	0x10017d90
10014ef8:	f7ffffff 	.word	0xf7ffffff

10014efc <__aeabi_i2f>:
10014efc:	b570      	push	{r4, r5, r6, lr}
10014efe:	2800      	cmp	r0, #0
10014f00:	d030      	beq.n	10014f64 <__aeabi_i2f+0x68>
10014f02:	17c3      	asrs	r3, r0, #31
10014f04:	18c5      	adds	r5, r0, r3
10014f06:	405d      	eors	r5, r3
10014f08:	0fc4      	lsrs	r4, r0, #31
10014f0a:	0028      	movs	r0, r5
10014f0c:	f001 ff4a 	bl	10016da4 <__clzsi2>
10014f10:	239e      	movs	r3, #158	; 0x9e
10014f12:	1a1b      	subs	r3, r3, r0
10014f14:	2b96      	cmp	r3, #150	; 0x96
10014f16:	dc0d      	bgt.n	10014f34 <__aeabi_i2f+0x38>
10014f18:	2296      	movs	r2, #150	; 0x96
10014f1a:	1ad2      	subs	r2, r2, r3
10014f1c:	4095      	lsls	r5, r2
10014f1e:	026a      	lsls	r2, r5, #9
10014f20:	0a52      	lsrs	r2, r2, #9
10014f22:	b2d8      	uxtb	r0, r3
10014f24:	0252      	lsls	r2, r2, #9
10014f26:	05c0      	lsls	r0, r0, #23
10014f28:	0a52      	lsrs	r2, r2, #9
10014f2a:	07e4      	lsls	r4, r4, #31
10014f2c:	4302      	orrs	r2, r0
10014f2e:	4322      	orrs	r2, r4
10014f30:	0010      	movs	r0, r2
10014f32:	bd70      	pop	{r4, r5, r6, pc}
10014f34:	2b99      	cmp	r3, #153	; 0x99
10014f36:	dc19      	bgt.n	10014f6c <__aeabi_i2f+0x70>
10014f38:	2299      	movs	r2, #153	; 0x99
10014f3a:	1ad2      	subs	r2, r2, r3
10014f3c:	4095      	lsls	r5, r2
10014f3e:	4a12      	ldr	r2, [pc, #72]	; (10014f88 <__aeabi_i2f+0x8c>)
10014f40:	402a      	ands	r2, r5
10014f42:	0769      	lsls	r1, r5, #29
10014f44:	d004      	beq.n	10014f50 <__aeabi_i2f+0x54>
10014f46:	210f      	movs	r1, #15
10014f48:	400d      	ands	r5, r1
10014f4a:	2d04      	cmp	r5, #4
10014f4c:	d000      	beq.n	10014f50 <__aeabi_i2f+0x54>
10014f4e:	3204      	adds	r2, #4
10014f50:	0151      	lsls	r1, r2, #5
10014f52:	d503      	bpl.n	10014f5c <__aeabi_i2f+0x60>
10014f54:	4b0c      	ldr	r3, [pc, #48]	; (10014f88 <__aeabi_i2f+0x8c>)
10014f56:	401a      	ands	r2, r3
10014f58:	239f      	movs	r3, #159	; 0x9f
10014f5a:	1a1b      	subs	r3, r3, r0
10014f5c:	0192      	lsls	r2, r2, #6
10014f5e:	0a52      	lsrs	r2, r2, #9
10014f60:	b2d8      	uxtb	r0, r3
10014f62:	e7df      	b.n	10014f24 <__aeabi_i2f+0x28>
10014f64:	2400      	movs	r4, #0
10014f66:	2000      	movs	r0, #0
10014f68:	2200      	movs	r2, #0
10014f6a:	e7db      	b.n	10014f24 <__aeabi_i2f+0x28>
10014f6c:	2205      	movs	r2, #5
10014f6e:	002e      	movs	r6, r5
10014f70:	1a12      	subs	r2, r2, r0
10014f72:	21b9      	movs	r1, #185	; 0xb9
10014f74:	40d6      	lsrs	r6, r2
10014f76:	002a      	movs	r2, r5
10014f78:	1ac9      	subs	r1, r1, r3
10014f7a:	408a      	lsls	r2, r1
10014f7c:	1e55      	subs	r5, r2, #1
10014f7e:	41aa      	sbcs	r2, r5
10014f80:	0035      	movs	r5, r6
10014f82:	4315      	orrs	r5, r2
10014f84:	e7db      	b.n	10014f3e <__aeabi_i2f+0x42>
10014f86:	46c0      	nop			; (mov r8, r8)
10014f88:	fbffffff 	.word	0xfbffffff

10014f8c <__aeabi_ui2f>:
10014f8c:	b570      	push	{r4, r5, r6, lr}
10014f8e:	1e04      	subs	r4, r0, #0
10014f90:	d028      	beq.n	10014fe4 <__aeabi_ui2f+0x58>
10014f92:	f001 ff07 	bl	10016da4 <__clzsi2>
10014f96:	239e      	movs	r3, #158	; 0x9e
10014f98:	1a1b      	subs	r3, r3, r0
10014f9a:	2b96      	cmp	r3, #150	; 0x96
10014f9c:	dc0a      	bgt.n	10014fb4 <__aeabi_ui2f+0x28>
10014f9e:	2296      	movs	r2, #150	; 0x96
10014fa0:	1ad2      	subs	r2, r2, r3
10014fa2:	4094      	lsls	r4, r2
10014fa4:	0262      	lsls	r2, r4, #9
10014fa6:	0a52      	lsrs	r2, r2, #9
10014fa8:	b2d8      	uxtb	r0, r3
10014faa:	0252      	lsls	r2, r2, #9
10014fac:	0a52      	lsrs	r2, r2, #9
10014fae:	05c0      	lsls	r0, r0, #23
10014fb0:	4310      	orrs	r0, r2
10014fb2:	bd70      	pop	{r4, r5, r6, pc}
10014fb4:	2b99      	cmp	r3, #153	; 0x99
10014fb6:	dc18      	bgt.n	10014fea <__aeabi_ui2f+0x5e>
10014fb8:	2299      	movs	r2, #153	; 0x99
10014fba:	1ad2      	subs	r2, r2, r3
10014fbc:	4094      	lsls	r4, r2
10014fbe:	4a11      	ldr	r2, [pc, #68]	; (10015004 <__aeabi_ui2f+0x78>)
10014fc0:	4022      	ands	r2, r4
10014fc2:	0761      	lsls	r1, r4, #29
10014fc4:	d004      	beq.n	10014fd0 <__aeabi_ui2f+0x44>
10014fc6:	210f      	movs	r1, #15
10014fc8:	400c      	ands	r4, r1
10014fca:	2c04      	cmp	r4, #4
10014fcc:	d000      	beq.n	10014fd0 <__aeabi_ui2f+0x44>
10014fce:	3204      	adds	r2, #4
10014fd0:	0151      	lsls	r1, r2, #5
10014fd2:	d503      	bpl.n	10014fdc <__aeabi_ui2f+0x50>
10014fd4:	4b0b      	ldr	r3, [pc, #44]	; (10015004 <__aeabi_ui2f+0x78>)
10014fd6:	401a      	ands	r2, r3
10014fd8:	239f      	movs	r3, #159	; 0x9f
10014fda:	1a1b      	subs	r3, r3, r0
10014fdc:	0192      	lsls	r2, r2, #6
10014fde:	0a52      	lsrs	r2, r2, #9
10014fe0:	b2d8      	uxtb	r0, r3
10014fe2:	e7e2      	b.n	10014faa <__aeabi_ui2f+0x1e>
10014fe4:	2000      	movs	r0, #0
10014fe6:	2200      	movs	r2, #0
10014fe8:	e7df      	b.n	10014faa <__aeabi_ui2f+0x1e>
10014fea:	2205      	movs	r2, #5
10014fec:	0025      	movs	r5, r4
10014fee:	1a12      	subs	r2, r2, r0
10014ff0:	21b9      	movs	r1, #185	; 0xb9
10014ff2:	40d5      	lsrs	r5, r2
10014ff4:	0022      	movs	r2, r4
10014ff6:	1ac9      	subs	r1, r1, r3
10014ff8:	408a      	lsls	r2, r1
10014ffa:	1e54      	subs	r4, r2, #1
10014ffc:	41a2      	sbcs	r2, r4
10014ffe:	002c      	movs	r4, r5
10015000:	4314      	orrs	r4, r2
10015002:	e7dc      	b.n	10014fbe <__aeabi_ui2f+0x32>
10015004:	fbffffff 	.word	0xfbffffff

10015008 <__aeabi_dadd>:
10015008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1001500a:	4656      	mov	r6, sl
1001500c:	465f      	mov	r7, fp
1001500e:	464d      	mov	r5, r9
10015010:	4644      	mov	r4, r8
10015012:	b4f0      	push	{r4, r5, r6, r7}
10015014:	000f      	movs	r7, r1
10015016:	0ffd      	lsrs	r5, r7, #31
10015018:	46aa      	mov	sl, r5
1001501a:	0309      	lsls	r1, r1, #12
1001501c:	007c      	lsls	r4, r7, #1
1001501e:	002e      	movs	r6, r5
10015020:	005f      	lsls	r7, r3, #1
10015022:	0f45      	lsrs	r5, r0, #29
10015024:	0a49      	lsrs	r1, r1, #9
10015026:	0d7f      	lsrs	r7, r7, #21
10015028:	4329      	orrs	r1, r5
1001502a:	00c5      	lsls	r5, r0, #3
1001502c:	0318      	lsls	r0, r3, #12
1001502e:	46bc      	mov	ip, r7
10015030:	0a40      	lsrs	r0, r0, #9
10015032:	0f57      	lsrs	r7, r2, #29
10015034:	0d64      	lsrs	r4, r4, #21
10015036:	0fdb      	lsrs	r3, r3, #31
10015038:	4338      	orrs	r0, r7
1001503a:	00d2      	lsls	r2, r2, #3
1001503c:	459a      	cmp	sl, r3
1001503e:	d100      	bne.n	10015042 <__aeabi_dadd+0x3a>
10015040:	e0aa      	b.n	10015198 <__aeabi_dadd+0x190>
10015042:	4666      	mov	r6, ip
10015044:	1ba6      	subs	r6, r4, r6
10015046:	2e00      	cmp	r6, #0
10015048:	dc00      	bgt.n	1001504c <__aeabi_dadd+0x44>
1001504a:	e0ff      	b.n	1001524c <__aeabi_dadd+0x244>
1001504c:	4663      	mov	r3, ip
1001504e:	2b00      	cmp	r3, #0
10015050:	d139      	bne.n	100150c6 <__aeabi_dadd+0xbe>
10015052:	0003      	movs	r3, r0
10015054:	4313      	orrs	r3, r2
10015056:	d000      	beq.n	1001505a <__aeabi_dadd+0x52>
10015058:	e0d9      	b.n	1001520e <__aeabi_dadd+0x206>
1001505a:	076b      	lsls	r3, r5, #29
1001505c:	d009      	beq.n	10015072 <__aeabi_dadd+0x6a>
1001505e:	230f      	movs	r3, #15
10015060:	402b      	ands	r3, r5
10015062:	2b04      	cmp	r3, #4
10015064:	d005      	beq.n	10015072 <__aeabi_dadd+0x6a>
10015066:	1d2b      	adds	r3, r5, #4
10015068:	42ab      	cmp	r3, r5
1001506a:	41ad      	sbcs	r5, r5
1001506c:	426d      	negs	r5, r5
1001506e:	1949      	adds	r1, r1, r5
10015070:	001d      	movs	r5, r3
10015072:	020b      	lsls	r3, r1, #8
10015074:	d400      	bmi.n	10015078 <__aeabi_dadd+0x70>
10015076:	e082      	b.n	1001517e <__aeabi_dadd+0x176>
10015078:	4bca      	ldr	r3, [pc, #808]	; (100153a4 <__aeabi_dadd+0x39c>)
1001507a:	3401      	adds	r4, #1
1001507c:	429c      	cmp	r4, r3
1001507e:	d100      	bne.n	10015082 <__aeabi_dadd+0x7a>
10015080:	e0fe      	b.n	10015280 <__aeabi_dadd+0x278>
10015082:	000a      	movs	r2, r1
10015084:	4656      	mov	r6, sl
10015086:	4bc8      	ldr	r3, [pc, #800]	; (100153a8 <__aeabi_dadd+0x3a0>)
10015088:	08ed      	lsrs	r5, r5, #3
1001508a:	401a      	ands	r2, r3
1001508c:	0750      	lsls	r0, r2, #29
1001508e:	0564      	lsls	r4, r4, #21
10015090:	0252      	lsls	r2, r2, #9
10015092:	4305      	orrs	r5, r0
10015094:	0b12      	lsrs	r2, r2, #12
10015096:	0d64      	lsrs	r4, r4, #21
10015098:	2100      	movs	r1, #0
1001509a:	0312      	lsls	r2, r2, #12
1001509c:	0d0b      	lsrs	r3, r1, #20
1001509e:	051b      	lsls	r3, r3, #20
100150a0:	0564      	lsls	r4, r4, #21
100150a2:	0b12      	lsrs	r2, r2, #12
100150a4:	431a      	orrs	r2, r3
100150a6:	0863      	lsrs	r3, r4, #1
100150a8:	4cc0      	ldr	r4, [pc, #768]	; (100153ac <__aeabi_dadd+0x3a4>)
100150aa:	07f6      	lsls	r6, r6, #31
100150ac:	4014      	ands	r4, r2
100150ae:	431c      	orrs	r4, r3
100150b0:	0064      	lsls	r4, r4, #1
100150b2:	0864      	lsrs	r4, r4, #1
100150b4:	4334      	orrs	r4, r6
100150b6:	0028      	movs	r0, r5
100150b8:	0021      	movs	r1, r4
100150ba:	bc3c      	pop	{r2, r3, r4, r5}
100150bc:	4690      	mov	r8, r2
100150be:	4699      	mov	r9, r3
100150c0:	46a2      	mov	sl, r4
100150c2:	46ab      	mov	fp, r5
100150c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100150c6:	4bb7      	ldr	r3, [pc, #732]	; (100153a4 <__aeabi_dadd+0x39c>)
100150c8:	429c      	cmp	r4, r3
100150ca:	d0c6      	beq.n	1001505a <__aeabi_dadd+0x52>
100150cc:	2380      	movs	r3, #128	; 0x80
100150ce:	041b      	lsls	r3, r3, #16
100150d0:	4318      	orrs	r0, r3
100150d2:	2e38      	cmp	r6, #56	; 0x38
100150d4:	dd00      	ble.n	100150d8 <__aeabi_dadd+0xd0>
100150d6:	e0eb      	b.n	100152b0 <__aeabi_dadd+0x2a8>
100150d8:	2e1f      	cmp	r6, #31
100150da:	dd00      	ble.n	100150de <__aeabi_dadd+0xd6>
100150dc:	e11e      	b.n	1001531c <__aeabi_dadd+0x314>
100150de:	2320      	movs	r3, #32
100150e0:	1b9b      	subs	r3, r3, r6
100150e2:	469c      	mov	ip, r3
100150e4:	0003      	movs	r3, r0
100150e6:	4667      	mov	r7, ip
100150e8:	40bb      	lsls	r3, r7
100150ea:	4698      	mov	r8, r3
100150ec:	0013      	movs	r3, r2
100150ee:	4647      	mov	r7, r8
100150f0:	40f3      	lsrs	r3, r6
100150f2:	433b      	orrs	r3, r7
100150f4:	4667      	mov	r7, ip
100150f6:	40ba      	lsls	r2, r7
100150f8:	1e57      	subs	r7, r2, #1
100150fa:	41ba      	sbcs	r2, r7
100150fc:	4313      	orrs	r3, r2
100150fe:	0002      	movs	r2, r0
10015100:	40f2      	lsrs	r2, r6
10015102:	1aeb      	subs	r3, r5, r3
10015104:	429d      	cmp	r5, r3
10015106:	41b6      	sbcs	r6, r6
10015108:	001d      	movs	r5, r3
1001510a:	1a8a      	subs	r2, r1, r2
1001510c:	4276      	negs	r6, r6
1001510e:	1b91      	subs	r1, r2, r6
10015110:	020b      	lsls	r3, r1, #8
10015112:	d531      	bpl.n	10015178 <__aeabi_dadd+0x170>
10015114:	024a      	lsls	r2, r1, #9
10015116:	0a56      	lsrs	r6, r2, #9
10015118:	2e00      	cmp	r6, #0
1001511a:	d100      	bne.n	1001511e <__aeabi_dadd+0x116>
1001511c:	e0b4      	b.n	10015288 <__aeabi_dadd+0x280>
1001511e:	0030      	movs	r0, r6
10015120:	f001 fe40 	bl	10016da4 <__clzsi2>
10015124:	0003      	movs	r3, r0
10015126:	3b08      	subs	r3, #8
10015128:	2b1f      	cmp	r3, #31
1001512a:	dd00      	ble.n	1001512e <__aeabi_dadd+0x126>
1001512c:	e0b5      	b.n	1001529a <__aeabi_dadd+0x292>
1001512e:	2220      	movs	r2, #32
10015130:	0029      	movs	r1, r5
10015132:	1ad2      	subs	r2, r2, r3
10015134:	40d1      	lsrs	r1, r2
10015136:	409e      	lsls	r6, r3
10015138:	000a      	movs	r2, r1
1001513a:	409d      	lsls	r5, r3
1001513c:	4332      	orrs	r2, r6
1001513e:	429c      	cmp	r4, r3
10015140:	dd00      	ble.n	10015144 <__aeabi_dadd+0x13c>
10015142:	e0b1      	b.n	100152a8 <__aeabi_dadd+0x2a0>
10015144:	1b1c      	subs	r4, r3, r4
10015146:	1c63      	adds	r3, r4, #1
10015148:	2b1f      	cmp	r3, #31
1001514a:	dd00      	ble.n	1001514e <__aeabi_dadd+0x146>
1001514c:	e0d5      	b.n	100152fa <__aeabi_dadd+0x2f2>
1001514e:	2120      	movs	r1, #32
10015150:	0014      	movs	r4, r2
10015152:	0028      	movs	r0, r5
10015154:	1ac9      	subs	r1, r1, r3
10015156:	408c      	lsls	r4, r1
10015158:	40d8      	lsrs	r0, r3
1001515a:	408d      	lsls	r5, r1
1001515c:	4304      	orrs	r4, r0
1001515e:	40da      	lsrs	r2, r3
10015160:	1e68      	subs	r0, r5, #1
10015162:	4185      	sbcs	r5, r0
10015164:	0011      	movs	r1, r2
10015166:	4325      	orrs	r5, r4
10015168:	2400      	movs	r4, #0
1001516a:	e776      	b.n	1001505a <__aeabi_dadd+0x52>
1001516c:	4641      	mov	r1, r8
1001516e:	4331      	orrs	r1, r6
10015170:	d100      	bne.n	10015174 <__aeabi_dadd+0x16c>
10015172:	e234      	b.n	100155de <__aeabi_dadd+0x5d6>
10015174:	0031      	movs	r1, r6
10015176:	4645      	mov	r5, r8
10015178:	076b      	lsls	r3, r5, #29
1001517a:	d000      	beq.n	1001517e <__aeabi_dadd+0x176>
1001517c:	e76f      	b.n	1001505e <__aeabi_dadd+0x56>
1001517e:	4656      	mov	r6, sl
10015180:	0748      	lsls	r0, r1, #29
10015182:	08ed      	lsrs	r5, r5, #3
10015184:	08c9      	lsrs	r1, r1, #3
10015186:	4305      	orrs	r5, r0
10015188:	4b86      	ldr	r3, [pc, #536]	; (100153a4 <__aeabi_dadd+0x39c>)
1001518a:	429c      	cmp	r4, r3
1001518c:	d035      	beq.n	100151fa <__aeabi_dadd+0x1f2>
1001518e:	030a      	lsls	r2, r1, #12
10015190:	0564      	lsls	r4, r4, #21
10015192:	0b12      	lsrs	r2, r2, #12
10015194:	0d64      	lsrs	r4, r4, #21
10015196:	e77f      	b.n	10015098 <__aeabi_dadd+0x90>
10015198:	4663      	mov	r3, ip
1001519a:	1ae3      	subs	r3, r4, r3
1001519c:	469b      	mov	fp, r3
1001519e:	2b00      	cmp	r3, #0
100151a0:	dc00      	bgt.n	100151a4 <__aeabi_dadd+0x19c>
100151a2:	e08b      	b.n	100152bc <__aeabi_dadd+0x2b4>
100151a4:	4667      	mov	r7, ip
100151a6:	2f00      	cmp	r7, #0
100151a8:	d03c      	beq.n	10015224 <__aeabi_dadd+0x21c>
100151aa:	4f7e      	ldr	r7, [pc, #504]	; (100153a4 <__aeabi_dadd+0x39c>)
100151ac:	42bc      	cmp	r4, r7
100151ae:	d100      	bne.n	100151b2 <__aeabi_dadd+0x1aa>
100151b0:	e753      	b.n	1001505a <__aeabi_dadd+0x52>
100151b2:	2780      	movs	r7, #128	; 0x80
100151b4:	043f      	lsls	r7, r7, #16
100151b6:	4338      	orrs	r0, r7
100151b8:	465b      	mov	r3, fp
100151ba:	2b38      	cmp	r3, #56	; 0x38
100151bc:	dc00      	bgt.n	100151c0 <__aeabi_dadd+0x1b8>
100151be:	e0f7      	b.n	100153b0 <__aeabi_dadd+0x3a8>
100151c0:	4302      	orrs	r2, r0
100151c2:	1e50      	subs	r0, r2, #1
100151c4:	4182      	sbcs	r2, r0
100151c6:	2000      	movs	r0, #0
100151c8:	b2d2      	uxtb	r2, r2
100151ca:	1953      	adds	r3, r2, r5
100151cc:	1842      	adds	r2, r0, r1
100151ce:	42ab      	cmp	r3, r5
100151d0:	4189      	sbcs	r1, r1
100151d2:	001d      	movs	r5, r3
100151d4:	4249      	negs	r1, r1
100151d6:	1889      	adds	r1, r1, r2
100151d8:	020b      	lsls	r3, r1, #8
100151da:	d5cd      	bpl.n	10015178 <__aeabi_dadd+0x170>
100151dc:	4b71      	ldr	r3, [pc, #452]	; (100153a4 <__aeabi_dadd+0x39c>)
100151de:	3401      	adds	r4, #1
100151e0:	429c      	cmp	r4, r3
100151e2:	d100      	bne.n	100151e6 <__aeabi_dadd+0x1de>
100151e4:	e13d      	b.n	10015462 <__aeabi_dadd+0x45a>
100151e6:	2001      	movs	r0, #1
100151e8:	4a6f      	ldr	r2, [pc, #444]	; (100153a8 <__aeabi_dadd+0x3a0>)
100151ea:	086b      	lsrs	r3, r5, #1
100151ec:	400a      	ands	r2, r1
100151ee:	4028      	ands	r0, r5
100151f0:	4318      	orrs	r0, r3
100151f2:	07d5      	lsls	r5, r2, #31
100151f4:	4305      	orrs	r5, r0
100151f6:	0851      	lsrs	r1, r2, #1
100151f8:	e72f      	b.n	1001505a <__aeabi_dadd+0x52>
100151fa:	002b      	movs	r3, r5
100151fc:	430b      	orrs	r3, r1
100151fe:	d100      	bne.n	10015202 <__aeabi_dadd+0x1fa>
10015200:	e1cb      	b.n	1001559a <__aeabi_dadd+0x592>
10015202:	2380      	movs	r3, #128	; 0x80
10015204:	031b      	lsls	r3, r3, #12
10015206:	430b      	orrs	r3, r1
10015208:	031a      	lsls	r2, r3, #12
1001520a:	0b12      	lsrs	r2, r2, #12
1001520c:	e744      	b.n	10015098 <__aeabi_dadd+0x90>
1001520e:	3e01      	subs	r6, #1
10015210:	2e00      	cmp	r6, #0
10015212:	d16d      	bne.n	100152f0 <__aeabi_dadd+0x2e8>
10015214:	1aae      	subs	r6, r5, r2
10015216:	42b5      	cmp	r5, r6
10015218:	419b      	sbcs	r3, r3
1001521a:	1a09      	subs	r1, r1, r0
1001521c:	425b      	negs	r3, r3
1001521e:	1ac9      	subs	r1, r1, r3
10015220:	0035      	movs	r5, r6
10015222:	e775      	b.n	10015110 <__aeabi_dadd+0x108>
10015224:	0007      	movs	r7, r0
10015226:	4317      	orrs	r7, r2
10015228:	d100      	bne.n	1001522c <__aeabi_dadd+0x224>
1001522a:	e716      	b.n	1001505a <__aeabi_dadd+0x52>
1001522c:	2301      	movs	r3, #1
1001522e:	425b      	negs	r3, r3
10015230:	469c      	mov	ip, r3
10015232:	44e3      	add	fp, ip
10015234:	465b      	mov	r3, fp
10015236:	2b00      	cmp	r3, #0
10015238:	d000      	beq.n	1001523c <__aeabi_dadd+0x234>
1001523a:	e0e0      	b.n	100153fe <__aeabi_dadd+0x3f6>
1001523c:	18aa      	adds	r2, r5, r2
1001523e:	42aa      	cmp	r2, r5
10015240:	419b      	sbcs	r3, r3
10015242:	1809      	adds	r1, r1, r0
10015244:	425b      	negs	r3, r3
10015246:	1859      	adds	r1, r3, r1
10015248:	0015      	movs	r5, r2
1001524a:	e7c5      	b.n	100151d8 <__aeabi_dadd+0x1d0>
1001524c:	2e00      	cmp	r6, #0
1001524e:	d175      	bne.n	1001533c <__aeabi_dadd+0x334>
10015250:	1c66      	adds	r6, r4, #1
10015252:	0576      	lsls	r6, r6, #21
10015254:	0d76      	lsrs	r6, r6, #21
10015256:	2e01      	cmp	r6, #1
10015258:	dc00      	bgt.n	1001525c <__aeabi_dadd+0x254>
1001525a:	e0f3      	b.n	10015444 <__aeabi_dadd+0x43c>
1001525c:	1aae      	subs	r6, r5, r2
1001525e:	46b0      	mov	r8, r6
10015260:	4545      	cmp	r5, r8
10015262:	41bf      	sbcs	r7, r7
10015264:	1a0e      	subs	r6, r1, r0
10015266:	427f      	negs	r7, r7
10015268:	1bf6      	subs	r6, r6, r7
1001526a:	0237      	lsls	r7, r6, #8
1001526c:	d400      	bmi.n	10015270 <__aeabi_dadd+0x268>
1001526e:	e08f      	b.n	10015390 <__aeabi_dadd+0x388>
10015270:	1b55      	subs	r5, r2, r5
10015272:	42aa      	cmp	r2, r5
10015274:	41b6      	sbcs	r6, r6
10015276:	1a41      	subs	r1, r0, r1
10015278:	4276      	negs	r6, r6
1001527a:	1b8e      	subs	r6, r1, r6
1001527c:	469a      	mov	sl, r3
1001527e:	e74b      	b.n	10015118 <__aeabi_dadd+0x110>
10015280:	4656      	mov	r6, sl
10015282:	2200      	movs	r2, #0
10015284:	2500      	movs	r5, #0
10015286:	e707      	b.n	10015098 <__aeabi_dadd+0x90>
10015288:	0028      	movs	r0, r5
1001528a:	f001 fd8b 	bl	10016da4 <__clzsi2>
1001528e:	3020      	adds	r0, #32
10015290:	0003      	movs	r3, r0
10015292:	3b08      	subs	r3, #8
10015294:	2b1f      	cmp	r3, #31
10015296:	dc00      	bgt.n	1001529a <__aeabi_dadd+0x292>
10015298:	e749      	b.n	1001512e <__aeabi_dadd+0x126>
1001529a:	002a      	movs	r2, r5
1001529c:	3828      	subs	r0, #40	; 0x28
1001529e:	4082      	lsls	r2, r0
100152a0:	2500      	movs	r5, #0
100152a2:	429c      	cmp	r4, r3
100152a4:	dc00      	bgt.n	100152a8 <__aeabi_dadd+0x2a0>
100152a6:	e74d      	b.n	10015144 <__aeabi_dadd+0x13c>
100152a8:	493f      	ldr	r1, [pc, #252]	; (100153a8 <__aeabi_dadd+0x3a0>)
100152aa:	1ae4      	subs	r4, r4, r3
100152ac:	4011      	ands	r1, r2
100152ae:	e6d4      	b.n	1001505a <__aeabi_dadd+0x52>
100152b0:	4302      	orrs	r2, r0
100152b2:	1e50      	subs	r0, r2, #1
100152b4:	4182      	sbcs	r2, r0
100152b6:	b2d3      	uxtb	r3, r2
100152b8:	2200      	movs	r2, #0
100152ba:	e722      	b.n	10015102 <__aeabi_dadd+0xfa>
100152bc:	2b00      	cmp	r3, #0
100152be:	d000      	beq.n	100152c2 <__aeabi_dadd+0x2ba>
100152c0:	e0f3      	b.n	100154aa <__aeabi_dadd+0x4a2>
100152c2:	1c63      	adds	r3, r4, #1
100152c4:	469c      	mov	ip, r3
100152c6:	055b      	lsls	r3, r3, #21
100152c8:	0d5b      	lsrs	r3, r3, #21
100152ca:	2b01      	cmp	r3, #1
100152cc:	dc00      	bgt.n	100152d0 <__aeabi_dadd+0x2c8>
100152ce:	e09f      	b.n	10015410 <__aeabi_dadd+0x408>
100152d0:	4b34      	ldr	r3, [pc, #208]	; (100153a4 <__aeabi_dadd+0x39c>)
100152d2:	459c      	cmp	ip, r3
100152d4:	d100      	bne.n	100152d8 <__aeabi_dadd+0x2d0>
100152d6:	e0c3      	b.n	10015460 <__aeabi_dadd+0x458>
100152d8:	18aa      	adds	r2, r5, r2
100152da:	1809      	adds	r1, r1, r0
100152dc:	42aa      	cmp	r2, r5
100152de:	4180      	sbcs	r0, r0
100152e0:	4240      	negs	r0, r0
100152e2:	1841      	adds	r1, r0, r1
100152e4:	07cd      	lsls	r5, r1, #31
100152e6:	0852      	lsrs	r2, r2, #1
100152e8:	4315      	orrs	r5, r2
100152ea:	0849      	lsrs	r1, r1, #1
100152ec:	4664      	mov	r4, ip
100152ee:	e6b4      	b.n	1001505a <__aeabi_dadd+0x52>
100152f0:	4b2c      	ldr	r3, [pc, #176]	; (100153a4 <__aeabi_dadd+0x39c>)
100152f2:	429c      	cmp	r4, r3
100152f4:	d000      	beq.n	100152f8 <__aeabi_dadd+0x2f0>
100152f6:	e6ec      	b.n	100150d2 <__aeabi_dadd+0xca>
100152f8:	e6af      	b.n	1001505a <__aeabi_dadd+0x52>
100152fa:	0011      	movs	r1, r2
100152fc:	3c1f      	subs	r4, #31
100152fe:	40e1      	lsrs	r1, r4
10015300:	000c      	movs	r4, r1
10015302:	2b20      	cmp	r3, #32
10015304:	d100      	bne.n	10015308 <__aeabi_dadd+0x300>
10015306:	e07f      	b.n	10015408 <__aeabi_dadd+0x400>
10015308:	2140      	movs	r1, #64	; 0x40
1001530a:	1acb      	subs	r3, r1, r3
1001530c:	409a      	lsls	r2, r3
1001530e:	4315      	orrs	r5, r2
10015310:	1e6a      	subs	r2, r5, #1
10015312:	4195      	sbcs	r5, r2
10015314:	2100      	movs	r1, #0
10015316:	4325      	orrs	r5, r4
10015318:	2400      	movs	r4, #0
1001531a:	e72d      	b.n	10015178 <__aeabi_dadd+0x170>
1001531c:	0033      	movs	r3, r6
1001531e:	0007      	movs	r7, r0
10015320:	3b20      	subs	r3, #32
10015322:	40df      	lsrs	r7, r3
10015324:	003b      	movs	r3, r7
10015326:	2e20      	cmp	r6, #32
10015328:	d070      	beq.n	1001540c <__aeabi_dadd+0x404>
1001532a:	2740      	movs	r7, #64	; 0x40
1001532c:	1bbe      	subs	r6, r7, r6
1001532e:	40b0      	lsls	r0, r6
10015330:	4302      	orrs	r2, r0
10015332:	1e50      	subs	r0, r2, #1
10015334:	4182      	sbcs	r2, r0
10015336:	4313      	orrs	r3, r2
10015338:	2200      	movs	r2, #0
1001533a:	e6e2      	b.n	10015102 <__aeabi_dadd+0xfa>
1001533c:	2c00      	cmp	r4, #0
1001533e:	d04f      	beq.n	100153e0 <__aeabi_dadd+0x3d8>
10015340:	4c18      	ldr	r4, [pc, #96]	; (100153a4 <__aeabi_dadd+0x39c>)
10015342:	45a4      	cmp	ip, r4
10015344:	d100      	bne.n	10015348 <__aeabi_dadd+0x340>
10015346:	e0ab      	b.n	100154a0 <__aeabi_dadd+0x498>
10015348:	2480      	movs	r4, #128	; 0x80
1001534a:	0424      	lsls	r4, r4, #16
1001534c:	4276      	negs	r6, r6
1001534e:	4321      	orrs	r1, r4
10015350:	2e38      	cmp	r6, #56	; 0x38
10015352:	dd00      	ble.n	10015356 <__aeabi_dadd+0x34e>
10015354:	e0df      	b.n	10015516 <__aeabi_dadd+0x50e>
10015356:	2e1f      	cmp	r6, #31
10015358:	dd00      	ble.n	1001535c <__aeabi_dadd+0x354>
1001535a:	e143      	b.n	100155e4 <__aeabi_dadd+0x5dc>
1001535c:	2720      	movs	r7, #32
1001535e:	1bbc      	subs	r4, r7, r6
10015360:	46a1      	mov	r9, r4
10015362:	000c      	movs	r4, r1
10015364:	464f      	mov	r7, r9
10015366:	40bc      	lsls	r4, r7
10015368:	46a0      	mov	r8, r4
1001536a:	002c      	movs	r4, r5
1001536c:	4647      	mov	r7, r8
1001536e:	40f4      	lsrs	r4, r6
10015370:	433c      	orrs	r4, r7
10015372:	464f      	mov	r7, r9
10015374:	40bd      	lsls	r5, r7
10015376:	1e6f      	subs	r7, r5, #1
10015378:	41bd      	sbcs	r5, r7
1001537a:	40f1      	lsrs	r1, r6
1001537c:	432c      	orrs	r4, r5
1001537e:	1b15      	subs	r5, r2, r4
10015380:	42aa      	cmp	r2, r5
10015382:	4192      	sbcs	r2, r2
10015384:	1a41      	subs	r1, r0, r1
10015386:	4252      	negs	r2, r2
10015388:	1a89      	subs	r1, r1, r2
1001538a:	4664      	mov	r4, ip
1001538c:	469a      	mov	sl, r3
1001538e:	e6bf      	b.n	10015110 <__aeabi_dadd+0x108>
10015390:	4641      	mov	r1, r8
10015392:	4645      	mov	r5, r8
10015394:	4331      	orrs	r1, r6
10015396:	d000      	beq.n	1001539a <__aeabi_dadd+0x392>
10015398:	e6be      	b.n	10015118 <__aeabi_dadd+0x110>
1001539a:	2600      	movs	r6, #0
1001539c:	2400      	movs	r4, #0
1001539e:	2500      	movs	r5, #0
100153a0:	e6f2      	b.n	10015188 <__aeabi_dadd+0x180>
100153a2:	46c0      	nop			; (mov r8, r8)
100153a4:	000007ff 	.word	0x000007ff
100153a8:	ff7fffff 	.word	0xff7fffff
100153ac:	800fffff 	.word	0x800fffff
100153b0:	2b1f      	cmp	r3, #31
100153b2:	dc59      	bgt.n	10015468 <__aeabi_dadd+0x460>
100153b4:	2720      	movs	r7, #32
100153b6:	1aff      	subs	r7, r7, r3
100153b8:	46bc      	mov	ip, r7
100153ba:	0007      	movs	r7, r0
100153bc:	4663      	mov	r3, ip
100153be:	409f      	lsls	r7, r3
100153c0:	465b      	mov	r3, fp
100153c2:	46b9      	mov	r9, r7
100153c4:	0017      	movs	r7, r2
100153c6:	40df      	lsrs	r7, r3
100153c8:	46b8      	mov	r8, r7
100153ca:	464f      	mov	r7, r9
100153cc:	4643      	mov	r3, r8
100153ce:	431f      	orrs	r7, r3
100153d0:	4663      	mov	r3, ip
100153d2:	409a      	lsls	r2, r3
100153d4:	1e53      	subs	r3, r2, #1
100153d6:	419a      	sbcs	r2, r3
100153d8:	465b      	mov	r3, fp
100153da:	433a      	orrs	r2, r7
100153dc:	40d8      	lsrs	r0, r3
100153de:	e6f4      	b.n	100151ca <__aeabi_dadd+0x1c2>
100153e0:	000c      	movs	r4, r1
100153e2:	432c      	orrs	r4, r5
100153e4:	d05c      	beq.n	100154a0 <__aeabi_dadd+0x498>
100153e6:	43f6      	mvns	r6, r6
100153e8:	2e00      	cmp	r6, #0
100153ea:	d155      	bne.n	10015498 <__aeabi_dadd+0x490>
100153ec:	1b55      	subs	r5, r2, r5
100153ee:	42aa      	cmp	r2, r5
100153f0:	41a4      	sbcs	r4, r4
100153f2:	1a41      	subs	r1, r0, r1
100153f4:	4264      	negs	r4, r4
100153f6:	1b09      	subs	r1, r1, r4
100153f8:	469a      	mov	sl, r3
100153fa:	4664      	mov	r4, ip
100153fc:	e688      	b.n	10015110 <__aeabi_dadd+0x108>
100153fe:	4f96      	ldr	r7, [pc, #600]	; (10015658 <__aeabi_dadd+0x650>)
10015400:	42bc      	cmp	r4, r7
10015402:	d000      	beq.n	10015406 <__aeabi_dadd+0x3fe>
10015404:	e6d8      	b.n	100151b8 <__aeabi_dadd+0x1b0>
10015406:	e628      	b.n	1001505a <__aeabi_dadd+0x52>
10015408:	2200      	movs	r2, #0
1001540a:	e780      	b.n	1001530e <__aeabi_dadd+0x306>
1001540c:	2000      	movs	r0, #0
1001540e:	e78f      	b.n	10015330 <__aeabi_dadd+0x328>
10015410:	000b      	movs	r3, r1
10015412:	432b      	orrs	r3, r5
10015414:	2c00      	cmp	r4, #0
10015416:	d000      	beq.n	1001541a <__aeabi_dadd+0x412>
10015418:	e0c2      	b.n	100155a0 <__aeabi_dadd+0x598>
1001541a:	2b00      	cmp	r3, #0
1001541c:	d100      	bne.n	10015420 <__aeabi_dadd+0x418>
1001541e:	e101      	b.n	10015624 <__aeabi_dadd+0x61c>
10015420:	0003      	movs	r3, r0
10015422:	4313      	orrs	r3, r2
10015424:	d100      	bne.n	10015428 <__aeabi_dadd+0x420>
10015426:	e618      	b.n	1001505a <__aeabi_dadd+0x52>
10015428:	18ab      	adds	r3, r5, r2
1001542a:	42ab      	cmp	r3, r5
1001542c:	41b6      	sbcs	r6, r6
1001542e:	1809      	adds	r1, r1, r0
10015430:	4276      	negs	r6, r6
10015432:	1871      	adds	r1, r6, r1
10015434:	020a      	lsls	r2, r1, #8
10015436:	d400      	bmi.n	1001543a <__aeabi_dadd+0x432>
10015438:	e109      	b.n	1001564e <__aeabi_dadd+0x646>
1001543a:	4a88      	ldr	r2, [pc, #544]	; (1001565c <__aeabi_dadd+0x654>)
1001543c:	001d      	movs	r5, r3
1001543e:	4011      	ands	r1, r2
10015440:	4664      	mov	r4, ip
10015442:	e60a      	b.n	1001505a <__aeabi_dadd+0x52>
10015444:	2c00      	cmp	r4, #0
10015446:	d15b      	bne.n	10015500 <__aeabi_dadd+0x4f8>
10015448:	000e      	movs	r6, r1
1001544a:	432e      	orrs	r6, r5
1001544c:	d000      	beq.n	10015450 <__aeabi_dadd+0x448>
1001544e:	e08a      	b.n	10015566 <__aeabi_dadd+0x55e>
10015450:	0001      	movs	r1, r0
10015452:	4311      	orrs	r1, r2
10015454:	d100      	bne.n	10015458 <__aeabi_dadd+0x450>
10015456:	e0c2      	b.n	100155de <__aeabi_dadd+0x5d6>
10015458:	0001      	movs	r1, r0
1001545a:	0015      	movs	r5, r2
1001545c:	469a      	mov	sl, r3
1001545e:	e5fc      	b.n	1001505a <__aeabi_dadd+0x52>
10015460:	4664      	mov	r4, ip
10015462:	2100      	movs	r1, #0
10015464:	2500      	movs	r5, #0
10015466:	e68f      	b.n	10015188 <__aeabi_dadd+0x180>
10015468:	2320      	movs	r3, #32
1001546a:	425b      	negs	r3, r3
1001546c:	469c      	mov	ip, r3
1001546e:	44dc      	add	ip, fp
10015470:	4663      	mov	r3, ip
10015472:	0007      	movs	r7, r0
10015474:	40df      	lsrs	r7, r3
10015476:	465b      	mov	r3, fp
10015478:	46bc      	mov	ip, r7
1001547a:	2b20      	cmp	r3, #32
1001547c:	d100      	bne.n	10015480 <__aeabi_dadd+0x478>
1001547e:	e0ac      	b.n	100155da <__aeabi_dadd+0x5d2>
10015480:	2340      	movs	r3, #64	; 0x40
10015482:	465f      	mov	r7, fp
10015484:	1bdb      	subs	r3, r3, r7
10015486:	4098      	lsls	r0, r3
10015488:	4302      	orrs	r2, r0
1001548a:	1e50      	subs	r0, r2, #1
1001548c:	4182      	sbcs	r2, r0
1001548e:	4663      	mov	r3, ip
10015490:	4313      	orrs	r3, r2
10015492:	001a      	movs	r2, r3
10015494:	2000      	movs	r0, #0
10015496:	e698      	b.n	100151ca <__aeabi_dadd+0x1c2>
10015498:	4c6f      	ldr	r4, [pc, #444]	; (10015658 <__aeabi_dadd+0x650>)
1001549a:	45a4      	cmp	ip, r4
1001549c:	d000      	beq.n	100154a0 <__aeabi_dadd+0x498>
1001549e:	e757      	b.n	10015350 <__aeabi_dadd+0x348>
100154a0:	0001      	movs	r1, r0
100154a2:	0015      	movs	r5, r2
100154a4:	4664      	mov	r4, ip
100154a6:	469a      	mov	sl, r3
100154a8:	e5d7      	b.n	1001505a <__aeabi_dadd+0x52>
100154aa:	2c00      	cmp	r4, #0
100154ac:	d139      	bne.n	10015522 <__aeabi_dadd+0x51a>
100154ae:	000c      	movs	r4, r1
100154b0:	432c      	orrs	r4, r5
100154b2:	d06e      	beq.n	10015592 <__aeabi_dadd+0x58a>
100154b4:	43db      	mvns	r3, r3
100154b6:	2b00      	cmp	r3, #0
100154b8:	d01a      	beq.n	100154f0 <__aeabi_dadd+0x4e8>
100154ba:	4c67      	ldr	r4, [pc, #412]	; (10015658 <__aeabi_dadd+0x650>)
100154bc:	45a4      	cmp	ip, r4
100154be:	d068      	beq.n	10015592 <__aeabi_dadd+0x58a>
100154c0:	2b38      	cmp	r3, #56	; 0x38
100154c2:	dd00      	ble.n	100154c6 <__aeabi_dadd+0x4be>
100154c4:	e0a4      	b.n	10015610 <__aeabi_dadd+0x608>
100154c6:	2b1f      	cmp	r3, #31
100154c8:	dd00      	ble.n	100154cc <__aeabi_dadd+0x4c4>
100154ca:	e0ae      	b.n	1001562a <__aeabi_dadd+0x622>
100154cc:	2420      	movs	r4, #32
100154ce:	000f      	movs	r7, r1
100154d0:	1ae4      	subs	r4, r4, r3
100154d2:	40a7      	lsls	r7, r4
100154d4:	46b9      	mov	r9, r7
100154d6:	002f      	movs	r7, r5
100154d8:	40df      	lsrs	r7, r3
100154da:	46b8      	mov	r8, r7
100154dc:	46a3      	mov	fp, r4
100154de:	464f      	mov	r7, r9
100154e0:	4644      	mov	r4, r8
100154e2:	4327      	orrs	r7, r4
100154e4:	465c      	mov	r4, fp
100154e6:	40a5      	lsls	r5, r4
100154e8:	1e6c      	subs	r4, r5, #1
100154ea:	41a5      	sbcs	r5, r4
100154ec:	40d9      	lsrs	r1, r3
100154ee:	433d      	orrs	r5, r7
100154f0:	18ad      	adds	r5, r5, r2
100154f2:	4295      	cmp	r5, r2
100154f4:	419b      	sbcs	r3, r3
100154f6:	1809      	adds	r1, r1, r0
100154f8:	425b      	negs	r3, r3
100154fa:	1859      	adds	r1, r3, r1
100154fc:	4664      	mov	r4, ip
100154fe:	e66b      	b.n	100151d8 <__aeabi_dadd+0x1d0>
10015500:	000c      	movs	r4, r1
10015502:	432c      	orrs	r4, r5
10015504:	d115      	bne.n	10015532 <__aeabi_dadd+0x52a>
10015506:	0001      	movs	r1, r0
10015508:	4311      	orrs	r1, r2
1001550a:	d07b      	beq.n	10015604 <__aeabi_dadd+0x5fc>
1001550c:	0001      	movs	r1, r0
1001550e:	0015      	movs	r5, r2
10015510:	469a      	mov	sl, r3
10015512:	4c51      	ldr	r4, [pc, #324]	; (10015658 <__aeabi_dadd+0x650>)
10015514:	e5a1      	b.n	1001505a <__aeabi_dadd+0x52>
10015516:	430d      	orrs	r5, r1
10015518:	1e69      	subs	r1, r5, #1
1001551a:	418d      	sbcs	r5, r1
1001551c:	2100      	movs	r1, #0
1001551e:	b2ec      	uxtb	r4, r5
10015520:	e72d      	b.n	1001537e <__aeabi_dadd+0x376>
10015522:	4c4d      	ldr	r4, [pc, #308]	; (10015658 <__aeabi_dadd+0x650>)
10015524:	45a4      	cmp	ip, r4
10015526:	d034      	beq.n	10015592 <__aeabi_dadd+0x58a>
10015528:	2480      	movs	r4, #128	; 0x80
1001552a:	0424      	lsls	r4, r4, #16
1001552c:	425b      	negs	r3, r3
1001552e:	4321      	orrs	r1, r4
10015530:	e7c6      	b.n	100154c0 <__aeabi_dadd+0x4b8>
10015532:	0004      	movs	r4, r0
10015534:	4314      	orrs	r4, r2
10015536:	d04e      	beq.n	100155d6 <__aeabi_dadd+0x5ce>
10015538:	08ed      	lsrs	r5, r5, #3
1001553a:	074c      	lsls	r4, r1, #29
1001553c:	432c      	orrs	r4, r5
1001553e:	2580      	movs	r5, #128	; 0x80
10015540:	08c9      	lsrs	r1, r1, #3
10015542:	032d      	lsls	r5, r5, #12
10015544:	4229      	tst	r1, r5
10015546:	d008      	beq.n	1001555a <__aeabi_dadd+0x552>
10015548:	08c6      	lsrs	r6, r0, #3
1001554a:	422e      	tst	r6, r5
1001554c:	d105      	bne.n	1001555a <__aeabi_dadd+0x552>
1001554e:	08d2      	lsrs	r2, r2, #3
10015550:	0741      	lsls	r1, r0, #29
10015552:	4311      	orrs	r1, r2
10015554:	000c      	movs	r4, r1
10015556:	469a      	mov	sl, r3
10015558:	0031      	movs	r1, r6
1001555a:	0f62      	lsrs	r2, r4, #29
1001555c:	00c9      	lsls	r1, r1, #3
1001555e:	00e5      	lsls	r5, r4, #3
10015560:	4311      	orrs	r1, r2
10015562:	4c3d      	ldr	r4, [pc, #244]	; (10015658 <__aeabi_dadd+0x650>)
10015564:	e579      	b.n	1001505a <__aeabi_dadd+0x52>
10015566:	0006      	movs	r6, r0
10015568:	4316      	orrs	r6, r2
1001556a:	d100      	bne.n	1001556e <__aeabi_dadd+0x566>
1001556c:	e575      	b.n	1001505a <__aeabi_dadd+0x52>
1001556e:	1aae      	subs	r6, r5, r2
10015570:	46b0      	mov	r8, r6
10015572:	4545      	cmp	r5, r8
10015574:	41bf      	sbcs	r7, r7
10015576:	1a0e      	subs	r6, r1, r0
10015578:	427f      	negs	r7, r7
1001557a:	1bf6      	subs	r6, r6, r7
1001557c:	0237      	lsls	r7, r6, #8
1001557e:	d400      	bmi.n	10015582 <__aeabi_dadd+0x57a>
10015580:	e5f4      	b.n	1001516c <__aeabi_dadd+0x164>
10015582:	1b55      	subs	r5, r2, r5
10015584:	42aa      	cmp	r2, r5
10015586:	41b6      	sbcs	r6, r6
10015588:	1a41      	subs	r1, r0, r1
1001558a:	4276      	negs	r6, r6
1001558c:	1b89      	subs	r1, r1, r6
1001558e:	469a      	mov	sl, r3
10015590:	e563      	b.n	1001505a <__aeabi_dadd+0x52>
10015592:	0001      	movs	r1, r0
10015594:	0015      	movs	r5, r2
10015596:	4664      	mov	r4, ip
10015598:	e55f      	b.n	1001505a <__aeabi_dadd+0x52>
1001559a:	2200      	movs	r2, #0
1001559c:	2500      	movs	r5, #0
1001559e:	e57b      	b.n	10015098 <__aeabi_dadd+0x90>
100155a0:	2b00      	cmp	r3, #0
100155a2:	d03b      	beq.n	1001561c <__aeabi_dadd+0x614>
100155a4:	0003      	movs	r3, r0
100155a6:	4313      	orrs	r3, r2
100155a8:	d015      	beq.n	100155d6 <__aeabi_dadd+0x5ce>
100155aa:	08ed      	lsrs	r5, r5, #3
100155ac:	074b      	lsls	r3, r1, #29
100155ae:	432b      	orrs	r3, r5
100155b0:	2580      	movs	r5, #128	; 0x80
100155b2:	08c9      	lsrs	r1, r1, #3
100155b4:	032d      	lsls	r5, r5, #12
100155b6:	4229      	tst	r1, r5
100155b8:	d007      	beq.n	100155ca <__aeabi_dadd+0x5c2>
100155ba:	08c4      	lsrs	r4, r0, #3
100155bc:	422c      	tst	r4, r5
100155be:	d104      	bne.n	100155ca <__aeabi_dadd+0x5c2>
100155c0:	0741      	lsls	r1, r0, #29
100155c2:	000b      	movs	r3, r1
100155c4:	0021      	movs	r1, r4
100155c6:	08d2      	lsrs	r2, r2, #3
100155c8:	4313      	orrs	r3, r2
100155ca:	00c9      	lsls	r1, r1, #3
100155cc:	0f5a      	lsrs	r2, r3, #29
100155ce:	4311      	orrs	r1, r2
100155d0:	00dd      	lsls	r5, r3, #3
100155d2:	4c21      	ldr	r4, [pc, #132]	; (10015658 <__aeabi_dadd+0x650>)
100155d4:	e541      	b.n	1001505a <__aeabi_dadd+0x52>
100155d6:	4c20      	ldr	r4, [pc, #128]	; (10015658 <__aeabi_dadd+0x650>)
100155d8:	e53f      	b.n	1001505a <__aeabi_dadd+0x52>
100155da:	2000      	movs	r0, #0
100155dc:	e754      	b.n	10015488 <__aeabi_dadd+0x480>
100155de:	2600      	movs	r6, #0
100155e0:	2500      	movs	r5, #0
100155e2:	e5d1      	b.n	10015188 <__aeabi_dadd+0x180>
100155e4:	0034      	movs	r4, r6
100155e6:	000f      	movs	r7, r1
100155e8:	3c20      	subs	r4, #32
100155ea:	40e7      	lsrs	r7, r4
100155ec:	003c      	movs	r4, r7
100155ee:	2e20      	cmp	r6, #32
100155f0:	d02b      	beq.n	1001564a <__aeabi_dadd+0x642>
100155f2:	2740      	movs	r7, #64	; 0x40
100155f4:	1bbe      	subs	r6, r7, r6
100155f6:	40b1      	lsls	r1, r6
100155f8:	430d      	orrs	r5, r1
100155fa:	1e69      	subs	r1, r5, #1
100155fc:	418d      	sbcs	r5, r1
100155fe:	2100      	movs	r1, #0
10015600:	432c      	orrs	r4, r5
10015602:	e6bc      	b.n	1001537e <__aeabi_dadd+0x376>
10015604:	2180      	movs	r1, #128	; 0x80
10015606:	2600      	movs	r6, #0
10015608:	0309      	lsls	r1, r1, #12
1001560a:	4c13      	ldr	r4, [pc, #76]	; (10015658 <__aeabi_dadd+0x650>)
1001560c:	2500      	movs	r5, #0
1001560e:	e5bb      	b.n	10015188 <__aeabi_dadd+0x180>
10015610:	430d      	orrs	r5, r1
10015612:	1e69      	subs	r1, r5, #1
10015614:	418d      	sbcs	r5, r1
10015616:	2100      	movs	r1, #0
10015618:	b2ed      	uxtb	r5, r5
1001561a:	e769      	b.n	100154f0 <__aeabi_dadd+0x4e8>
1001561c:	0001      	movs	r1, r0
1001561e:	0015      	movs	r5, r2
10015620:	4c0d      	ldr	r4, [pc, #52]	; (10015658 <__aeabi_dadd+0x650>)
10015622:	e51a      	b.n	1001505a <__aeabi_dadd+0x52>
10015624:	0001      	movs	r1, r0
10015626:	0015      	movs	r5, r2
10015628:	e517      	b.n	1001505a <__aeabi_dadd+0x52>
1001562a:	001c      	movs	r4, r3
1001562c:	000f      	movs	r7, r1
1001562e:	3c20      	subs	r4, #32
10015630:	40e7      	lsrs	r7, r4
10015632:	003c      	movs	r4, r7
10015634:	2b20      	cmp	r3, #32
10015636:	d00c      	beq.n	10015652 <__aeabi_dadd+0x64a>
10015638:	2740      	movs	r7, #64	; 0x40
1001563a:	1afb      	subs	r3, r7, r3
1001563c:	4099      	lsls	r1, r3
1001563e:	430d      	orrs	r5, r1
10015640:	1e69      	subs	r1, r5, #1
10015642:	418d      	sbcs	r5, r1
10015644:	2100      	movs	r1, #0
10015646:	4325      	orrs	r5, r4
10015648:	e752      	b.n	100154f0 <__aeabi_dadd+0x4e8>
1001564a:	2100      	movs	r1, #0
1001564c:	e7d4      	b.n	100155f8 <__aeabi_dadd+0x5f0>
1001564e:	001d      	movs	r5, r3
10015650:	e592      	b.n	10015178 <__aeabi_dadd+0x170>
10015652:	2100      	movs	r1, #0
10015654:	e7f3      	b.n	1001563e <__aeabi_dadd+0x636>
10015656:	46c0      	nop			; (mov r8, r8)
10015658:	000007ff 	.word	0x000007ff
1001565c:	ff7fffff 	.word	0xff7fffff

10015660 <__aeabi_ddiv>:
10015660:	b5f0      	push	{r4, r5, r6, r7, lr}
10015662:	4656      	mov	r6, sl
10015664:	464d      	mov	r5, r9
10015666:	4644      	mov	r4, r8
10015668:	465f      	mov	r7, fp
1001566a:	b4f0      	push	{r4, r5, r6, r7}
1001566c:	001d      	movs	r5, r3
1001566e:	030e      	lsls	r6, r1, #12
10015670:	004c      	lsls	r4, r1, #1
10015672:	0fcb      	lsrs	r3, r1, #31
10015674:	b087      	sub	sp, #28
10015676:	0007      	movs	r7, r0
10015678:	4692      	mov	sl, r2
1001567a:	4681      	mov	r9, r0
1001567c:	0b36      	lsrs	r6, r6, #12
1001567e:	0d64      	lsrs	r4, r4, #21
10015680:	4698      	mov	r8, r3
10015682:	d06a      	beq.n	1001575a <__aeabi_ddiv+0xfa>
10015684:	4b6d      	ldr	r3, [pc, #436]	; (1001583c <__aeabi_ddiv+0x1dc>)
10015686:	429c      	cmp	r4, r3
10015688:	d035      	beq.n	100156f6 <__aeabi_ddiv+0x96>
1001568a:	2280      	movs	r2, #128	; 0x80
1001568c:	0f43      	lsrs	r3, r0, #29
1001568e:	0412      	lsls	r2, r2, #16
10015690:	4313      	orrs	r3, r2
10015692:	00f6      	lsls	r6, r6, #3
10015694:	431e      	orrs	r6, r3
10015696:	00c3      	lsls	r3, r0, #3
10015698:	4699      	mov	r9, r3
1001569a:	4b69      	ldr	r3, [pc, #420]	; (10015840 <__aeabi_ddiv+0x1e0>)
1001569c:	2700      	movs	r7, #0
1001569e:	469c      	mov	ip, r3
100156a0:	2300      	movs	r3, #0
100156a2:	4464      	add	r4, ip
100156a4:	9302      	str	r3, [sp, #8]
100156a6:	032b      	lsls	r3, r5, #12
100156a8:	0068      	lsls	r0, r5, #1
100156aa:	0b1b      	lsrs	r3, r3, #12
100156ac:	0fed      	lsrs	r5, r5, #31
100156ae:	4651      	mov	r1, sl
100156b0:	469b      	mov	fp, r3
100156b2:	0d40      	lsrs	r0, r0, #21
100156b4:	9500      	str	r5, [sp, #0]
100156b6:	d100      	bne.n	100156ba <__aeabi_ddiv+0x5a>
100156b8:	e078      	b.n	100157ac <__aeabi_ddiv+0x14c>
100156ba:	4b60      	ldr	r3, [pc, #384]	; (1001583c <__aeabi_ddiv+0x1dc>)
100156bc:	4298      	cmp	r0, r3
100156be:	d06c      	beq.n	1001579a <__aeabi_ddiv+0x13a>
100156c0:	465b      	mov	r3, fp
100156c2:	00da      	lsls	r2, r3, #3
100156c4:	0f4b      	lsrs	r3, r1, #29
100156c6:	2180      	movs	r1, #128	; 0x80
100156c8:	0409      	lsls	r1, r1, #16
100156ca:	430b      	orrs	r3, r1
100156cc:	4313      	orrs	r3, r2
100156ce:	469b      	mov	fp, r3
100156d0:	4653      	mov	r3, sl
100156d2:	00d9      	lsls	r1, r3, #3
100156d4:	4b5a      	ldr	r3, [pc, #360]	; (10015840 <__aeabi_ddiv+0x1e0>)
100156d6:	469c      	mov	ip, r3
100156d8:	2300      	movs	r3, #0
100156da:	4460      	add	r0, ip
100156dc:	4642      	mov	r2, r8
100156de:	1a20      	subs	r0, r4, r0
100156e0:	406a      	eors	r2, r5
100156e2:	4692      	mov	sl, r2
100156e4:	9001      	str	r0, [sp, #4]
100156e6:	431f      	orrs	r7, r3
100156e8:	2f0f      	cmp	r7, #15
100156ea:	d900      	bls.n	100156ee <__aeabi_ddiv+0x8e>
100156ec:	e0b0      	b.n	10015850 <__aeabi_ddiv+0x1f0>
100156ee:	4855      	ldr	r0, [pc, #340]	; (10015844 <__aeabi_ddiv+0x1e4>)
100156f0:	00bf      	lsls	r7, r7, #2
100156f2:	59c0      	ldr	r0, [r0, r7]
100156f4:	4687      	mov	pc, r0
100156f6:	4337      	orrs	r7, r6
100156f8:	d000      	beq.n	100156fc <__aeabi_ddiv+0x9c>
100156fa:	e088      	b.n	1001580e <__aeabi_ddiv+0x1ae>
100156fc:	2300      	movs	r3, #0
100156fe:	4699      	mov	r9, r3
10015700:	3302      	adds	r3, #2
10015702:	2708      	movs	r7, #8
10015704:	2600      	movs	r6, #0
10015706:	9302      	str	r3, [sp, #8]
10015708:	e7cd      	b.n	100156a6 <__aeabi_ddiv+0x46>
1001570a:	4643      	mov	r3, r8
1001570c:	46b3      	mov	fp, r6
1001570e:	4649      	mov	r1, r9
10015710:	9300      	str	r3, [sp, #0]
10015712:	9b02      	ldr	r3, [sp, #8]
10015714:	9a00      	ldr	r2, [sp, #0]
10015716:	4692      	mov	sl, r2
10015718:	2b02      	cmp	r3, #2
1001571a:	d000      	beq.n	1001571e <__aeabi_ddiv+0xbe>
1001571c:	e1bf      	b.n	10015a9e <__aeabi_ddiv+0x43e>
1001571e:	2100      	movs	r1, #0
10015720:	4653      	mov	r3, sl
10015722:	2201      	movs	r2, #1
10015724:	2600      	movs	r6, #0
10015726:	4689      	mov	r9, r1
10015728:	401a      	ands	r2, r3
1001572a:	4b44      	ldr	r3, [pc, #272]	; (1001583c <__aeabi_ddiv+0x1dc>)
1001572c:	2100      	movs	r1, #0
1001572e:	0336      	lsls	r6, r6, #12
10015730:	0d0c      	lsrs	r4, r1, #20
10015732:	0524      	lsls	r4, r4, #20
10015734:	0b36      	lsrs	r6, r6, #12
10015736:	4326      	orrs	r6, r4
10015738:	4c43      	ldr	r4, [pc, #268]	; (10015848 <__aeabi_ddiv+0x1e8>)
1001573a:	051b      	lsls	r3, r3, #20
1001573c:	4026      	ands	r6, r4
1001573e:	431e      	orrs	r6, r3
10015740:	0076      	lsls	r6, r6, #1
10015742:	07d2      	lsls	r2, r2, #31
10015744:	0876      	lsrs	r6, r6, #1
10015746:	4316      	orrs	r6, r2
10015748:	4648      	mov	r0, r9
1001574a:	0031      	movs	r1, r6
1001574c:	b007      	add	sp, #28
1001574e:	bc3c      	pop	{r2, r3, r4, r5}
10015750:	4690      	mov	r8, r2
10015752:	4699      	mov	r9, r3
10015754:	46a2      	mov	sl, r4
10015756:	46ab      	mov	fp, r5
10015758:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001575a:	0033      	movs	r3, r6
1001575c:	4303      	orrs	r3, r0
1001575e:	d04f      	beq.n	10015800 <__aeabi_ddiv+0x1a0>
10015760:	2e00      	cmp	r6, #0
10015762:	d100      	bne.n	10015766 <__aeabi_ddiv+0x106>
10015764:	e1bc      	b.n	10015ae0 <__aeabi_ddiv+0x480>
10015766:	0030      	movs	r0, r6
10015768:	f001 fb1c 	bl	10016da4 <__clzsi2>
1001576c:	0003      	movs	r3, r0
1001576e:	3b0b      	subs	r3, #11
10015770:	2b1c      	cmp	r3, #28
10015772:	dd00      	ble.n	10015776 <__aeabi_ddiv+0x116>
10015774:	e1ad      	b.n	10015ad2 <__aeabi_ddiv+0x472>
10015776:	221d      	movs	r2, #29
10015778:	0001      	movs	r1, r0
1001577a:	1ad3      	subs	r3, r2, r3
1001577c:	3908      	subs	r1, #8
1001577e:	003a      	movs	r2, r7
10015780:	408f      	lsls	r7, r1
10015782:	408e      	lsls	r6, r1
10015784:	40da      	lsrs	r2, r3
10015786:	46b9      	mov	r9, r7
10015788:	4316      	orrs	r6, r2
1001578a:	4b30      	ldr	r3, [pc, #192]	; (1001584c <__aeabi_ddiv+0x1ec>)
1001578c:	2700      	movs	r7, #0
1001578e:	469c      	mov	ip, r3
10015790:	2300      	movs	r3, #0
10015792:	4460      	add	r0, ip
10015794:	4244      	negs	r4, r0
10015796:	9302      	str	r3, [sp, #8]
10015798:	e785      	b.n	100156a6 <__aeabi_ddiv+0x46>
1001579a:	4653      	mov	r3, sl
1001579c:	465a      	mov	r2, fp
1001579e:	4313      	orrs	r3, r2
100157a0:	d12c      	bne.n	100157fc <__aeabi_ddiv+0x19c>
100157a2:	2300      	movs	r3, #0
100157a4:	2100      	movs	r1, #0
100157a6:	469b      	mov	fp, r3
100157a8:	3302      	adds	r3, #2
100157aa:	e797      	b.n	100156dc <__aeabi_ddiv+0x7c>
100157ac:	430b      	orrs	r3, r1
100157ae:	d020      	beq.n	100157f2 <__aeabi_ddiv+0x192>
100157b0:	465b      	mov	r3, fp
100157b2:	2b00      	cmp	r3, #0
100157b4:	d100      	bne.n	100157b8 <__aeabi_ddiv+0x158>
100157b6:	e19e      	b.n	10015af6 <__aeabi_ddiv+0x496>
100157b8:	4658      	mov	r0, fp
100157ba:	f001 faf3 	bl	10016da4 <__clzsi2>
100157be:	0003      	movs	r3, r0
100157c0:	3b0b      	subs	r3, #11
100157c2:	2b1c      	cmp	r3, #28
100157c4:	dd00      	ble.n	100157c8 <__aeabi_ddiv+0x168>
100157c6:	e18f      	b.n	10015ae8 <__aeabi_ddiv+0x488>
100157c8:	0002      	movs	r2, r0
100157ca:	4659      	mov	r1, fp
100157cc:	3a08      	subs	r2, #8
100157ce:	4091      	lsls	r1, r2
100157d0:	468b      	mov	fp, r1
100157d2:	211d      	movs	r1, #29
100157d4:	1acb      	subs	r3, r1, r3
100157d6:	4651      	mov	r1, sl
100157d8:	40d9      	lsrs	r1, r3
100157da:	000b      	movs	r3, r1
100157dc:	4659      	mov	r1, fp
100157de:	430b      	orrs	r3, r1
100157e0:	4651      	mov	r1, sl
100157e2:	469b      	mov	fp, r3
100157e4:	4091      	lsls	r1, r2
100157e6:	4b19      	ldr	r3, [pc, #100]	; (1001584c <__aeabi_ddiv+0x1ec>)
100157e8:	469c      	mov	ip, r3
100157ea:	4460      	add	r0, ip
100157ec:	4240      	negs	r0, r0
100157ee:	2300      	movs	r3, #0
100157f0:	e774      	b.n	100156dc <__aeabi_ddiv+0x7c>
100157f2:	2300      	movs	r3, #0
100157f4:	2100      	movs	r1, #0
100157f6:	469b      	mov	fp, r3
100157f8:	3301      	adds	r3, #1
100157fa:	e76f      	b.n	100156dc <__aeabi_ddiv+0x7c>
100157fc:	2303      	movs	r3, #3
100157fe:	e76d      	b.n	100156dc <__aeabi_ddiv+0x7c>
10015800:	2300      	movs	r3, #0
10015802:	4699      	mov	r9, r3
10015804:	3301      	adds	r3, #1
10015806:	2704      	movs	r7, #4
10015808:	2600      	movs	r6, #0
1001580a:	9302      	str	r3, [sp, #8]
1001580c:	e74b      	b.n	100156a6 <__aeabi_ddiv+0x46>
1001580e:	2303      	movs	r3, #3
10015810:	270c      	movs	r7, #12
10015812:	9302      	str	r3, [sp, #8]
10015814:	e747      	b.n	100156a6 <__aeabi_ddiv+0x46>
10015816:	2201      	movs	r2, #1
10015818:	1ad5      	subs	r5, r2, r3
1001581a:	2d38      	cmp	r5, #56	; 0x38
1001581c:	dc00      	bgt.n	10015820 <__aeabi_ddiv+0x1c0>
1001581e:	e1b0      	b.n	10015b82 <__aeabi_ddiv+0x522>
10015820:	4653      	mov	r3, sl
10015822:	401a      	ands	r2, r3
10015824:	2100      	movs	r1, #0
10015826:	2300      	movs	r3, #0
10015828:	2600      	movs	r6, #0
1001582a:	4689      	mov	r9, r1
1001582c:	e77e      	b.n	1001572c <__aeabi_ddiv+0xcc>
1001582e:	2300      	movs	r3, #0
10015830:	2680      	movs	r6, #128	; 0x80
10015832:	4699      	mov	r9, r3
10015834:	2200      	movs	r2, #0
10015836:	0336      	lsls	r6, r6, #12
10015838:	4b00      	ldr	r3, [pc, #0]	; (1001583c <__aeabi_ddiv+0x1dc>)
1001583a:	e777      	b.n	1001572c <__aeabi_ddiv+0xcc>
1001583c:	000007ff 	.word	0x000007ff
10015840:	fffffc01 	.word	0xfffffc01
10015844:	10017dd0 	.word	0x10017dd0
10015848:	800fffff 	.word	0x800fffff
1001584c:	000003f3 	.word	0x000003f3
10015850:	455e      	cmp	r6, fp
10015852:	d900      	bls.n	10015856 <__aeabi_ddiv+0x1f6>
10015854:	e172      	b.n	10015b3c <__aeabi_ddiv+0x4dc>
10015856:	d100      	bne.n	1001585a <__aeabi_ddiv+0x1fa>
10015858:	e16d      	b.n	10015b36 <__aeabi_ddiv+0x4d6>
1001585a:	9b01      	ldr	r3, [sp, #4]
1001585c:	464d      	mov	r5, r9
1001585e:	3b01      	subs	r3, #1
10015860:	9301      	str	r3, [sp, #4]
10015862:	2300      	movs	r3, #0
10015864:	0034      	movs	r4, r6
10015866:	9302      	str	r3, [sp, #8]
10015868:	465b      	mov	r3, fp
1001586a:	021e      	lsls	r6, r3, #8
1001586c:	0e0b      	lsrs	r3, r1, #24
1001586e:	431e      	orrs	r6, r3
10015870:	020b      	lsls	r3, r1, #8
10015872:	9303      	str	r3, [sp, #12]
10015874:	0c33      	lsrs	r3, r6, #16
10015876:	4699      	mov	r9, r3
10015878:	0433      	lsls	r3, r6, #16
1001587a:	0c1b      	lsrs	r3, r3, #16
1001587c:	4649      	mov	r1, r9
1001587e:	0020      	movs	r0, r4
10015880:	9300      	str	r3, [sp, #0]
10015882:	f7fe ff0f 	bl	100146a4 <__aeabi_uidiv>
10015886:	9b00      	ldr	r3, [sp, #0]
10015888:	0037      	movs	r7, r6
1001588a:	4343      	muls	r3, r0
1001588c:	0006      	movs	r6, r0
1001588e:	4649      	mov	r1, r9
10015890:	0020      	movs	r0, r4
10015892:	4698      	mov	r8, r3
10015894:	f7fe ff8c 	bl	100147b0 <__aeabi_uidivmod>
10015898:	0c2c      	lsrs	r4, r5, #16
1001589a:	0409      	lsls	r1, r1, #16
1001589c:	430c      	orrs	r4, r1
1001589e:	45a0      	cmp	r8, r4
100158a0:	d909      	bls.n	100158b6 <__aeabi_ddiv+0x256>
100158a2:	19e4      	adds	r4, r4, r7
100158a4:	1e73      	subs	r3, r6, #1
100158a6:	42a7      	cmp	r7, r4
100158a8:	d900      	bls.n	100158ac <__aeabi_ddiv+0x24c>
100158aa:	e15c      	b.n	10015b66 <__aeabi_ddiv+0x506>
100158ac:	45a0      	cmp	r8, r4
100158ae:	d800      	bhi.n	100158b2 <__aeabi_ddiv+0x252>
100158b0:	e159      	b.n	10015b66 <__aeabi_ddiv+0x506>
100158b2:	3e02      	subs	r6, #2
100158b4:	19e4      	adds	r4, r4, r7
100158b6:	4643      	mov	r3, r8
100158b8:	1ae4      	subs	r4, r4, r3
100158ba:	4649      	mov	r1, r9
100158bc:	0020      	movs	r0, r4
100158be:	f7fe fef1 	bl	100146a4 <__aeabi_uidiv>
100158c2:	0003      	movs	r3, r0
100158c4:	9a00      	ldr	r2, [sp, #0]
100158c6:	4680      	mov	r8, r0
100158c8:	4353      	muls	r3, r2
100158ca:	4649      	mov	r1, r9
100158cc:	0020      	movs	r0, r4
100158ce:	469b      	mov	fp, r3
100158d0:	f7fe ff6e 	bl	100147b0 <__aeabi_uidivmod>
100158d4:	042a      	lsls	r2, r5, #16
100158d6:	0409      	lsls	r1, r1, #16
100158d8:	0c12      	lsrs	r2, r2, #16
100158da:	430a      	orrs	r2, r1
100158dc:	4593      	cmp	fp, r2
100158de:	d90d      	bls.n	100158fc <__aeabi_ddiv+0x29c>
100158e0:	4643      	mov	r3, r8
100158e2:	19d2      	adds	r2, r2, r7
100158e4:	3b01      	subs	r3, #1
100158e6:	4297      	cmp	r7, r2
100158e8:	d900      	bls.n	100158ec <__aeabi_ddiv+0x28c>
100158ea:	e13a      	b.n	10015b62 <__aeabi_ddiv+0x502>
100158ec:	4593      	cmp	fp, r2
100158ee:	d800      	bhi.n	100158f2 <__aeabi_ddiv+0x292>
100158f0:	e137      	b.n	10015b62 <__aeabi_ddiv+0x502>
100158f2:	2302      	movs	r3, #2
100158f4:	425b      	negs	r3, r3
100158f6:	469c      	mov	ip, r3
100158f8:	19d2      	adds	r2, r2, r7
100158fa:	44e0      	add	r8, ip
100158fc:	465b      	mov	r3, fp
100158fe:	1ad2      	subs	r2, r2, r3
10015900:	4643      	mov	r3, r8
10015902:	0436      	lsls	r6, r6, #16
10015904:	4333      	orrs	r3, r6
10015906:	469b      	mov	fp, r3
10015908:	9903      	ldr	r1, [sp, #12]
1001590a:	0c18      	lsrs	r0, r3, #16
1001590c:	0c0b      	lsrs	r3, r1, #16
1001590e:	001d      	movs	r5, r3
10015910:	9305      	str	r3, [sp, #20]
10015912:	0409      	lsls	r1, r1, #16
10015914:	465b      	mov	r3, fp
10015916:	0c09      	lsrs	r1, r1, #16
10015918:	000c      	movs	r4, r1
1001591a:	041b      	lsls	r3, r3, #16
1001591c:	0c1b      	lsrs	r3, r3, #16
1001591e:	4344      	muls	r4, r0
10015920:	9104      	str	r1, [sp, #16]
10015922:	4359      	muls	r1, r3
10015924:	436b      	muls	r3, r5
10015926:	4368      	muls	r0, r5
10015928:	191b      	adds	r3, r3, r4
1001592a:	0c0d      	lsrs	r5, r1, #16
1001592c:	18eb      	adds	r3, r5, r3
1001592e:	429c      	cmp	r4, r3
10015930:	d903      	bls.n	1001593a <__aeabi_ddiv+0x2da>
10015932:	2480      	movs	r4, #128	; 0x80
10015934:	0264      	lsls	r4, r4, #9
10015936:	46a4      	mov	ip, r4
10015938:	4460      	add	r0, ip
1001593a:	0c1c      	lsrs	r4, r3, #16
1001593c:	0409      	lsls	r1, r1, #16
1001593e:	041b      	lsls	r3, r3, #16
10015940:	0c09      	lsrs	r1, r1, #16
10015942:	1820      	adds	r0, r4, r0
10015944:	185d      	adds	r5, r3, r1
10015946:	4282      	cmp	r2, r0
10015948:	d200      	bcs.n	1001594c <__aeabi_ddiv+0x2ec>
1001594a:	e0de      	b.n	10015b0a <__aeabi_ddiv+0x4aa>
1001594c:	d100      	bne.n	10015950 <__aeabi_ddiv+0x2f0>
1001594e:	e0d7      	b.n	10015b00 <__aeabi_ddiv+0x4a0>
10015950:	1a16      	subs	r6, r2, r0
10015952:	9b02      	ldr	r3, [sp, #8]
10015954:	469c      	mov	ip, r3
10015956:	1b5d      	subs	r5, r3, r5
10015958:	45ac      	cmp	ip, r5
1001595a:	419b      	sbcs	r3, r3
1001595c:	425b      	negs	r3, r3
1001595e:	1af6      	subs	r6, r6, r3
10015960:	42b7      	cmp	r7, r6
10015962:	d100      	bne.n	10015966 <__aeabi_ddiv+0x306>
10015964:	e106      	b.n	10015b74 <__aeabi_ddiv+0x514>
10015966:	4649      	mov	r1, r9
10015968:	0030      	movs	r0, r6
1001596a:	f7fe fe9b 	bl	100146a4 <__aeabi_uidiv>
1001596e:	9b00      	ldr	r3, [sp, #0]
10015970:	0004      	movs	r4, r0
10015972:	4343      	muls	r3, r0
10015974:	4649      	mov	r1, r9
10015976:	0030      	movs	r0, r6
10015978:	4698      	mov	r8, r3
1001597a:	f7fe ff19 	bl	100147b0 <__aeabi_uidivmod>
1001597e:	0c2e      	lsrs	r6, r5, #16
10015980:	0409      	lsls	r1, r1, #16
10015982:	430e      	orrs	r6, r1
10015984:	45b0      	cmp	r8, r6
10015986:	d909      	bls.n	1001599c <__aeabi_ddiv+0x33c>
10015988:	19f6      	adds	r6, r6, r7
1001598a:	1e63      	subs	r3, r4, #1
1001598c:	42b7      	cmp	r7, r6
1001598e:	d900      	bls.n	10015992 <__aeabi_ddiv+0x332>
10015990:	e0f3      	b.n	10015b7a <__aeabi_ddiv+0x51a>
10015992:	45b0      	cmp	r8, r6
10015994:	d800      	bhi.n	10015998 <__aeabi_ddiv+0x338>
10015996:	e0f0      	b.n	10015b7a <__aeabi_ddiv+0x51a>
10015998:	3c02      	subs	r4, #2
1001599a:	19f6      	adds	r6, r6, r7
1001599c:	4643      	mov	r3, r8
1001599e:	1af3      	subs	r3, r6, r3
100159a0:	4649      	mov	r1, r9
100159a2:	0018      	movs	r0, r3
100159a4:	9302      	str	r3, [sp, #8]
100159a6:	f7fe fe7d 	bl	100146a4 <__aeabi_uidiv>
100159aa:	9b00      	ldr	r3, [sp, #0]
100159ac:	0006      	movs	r6, r0
100159ae:	4343      	muls	r3, r0
100159b0:	4649      	mov	r1, r9
100159b2:	9802      	ldr	r0, [sp, #8]
100159b4:	4698      	mov	r8, r3
100159b6:	f7fe fefb 	bl	100147b0 <__aeabi_uidivmod>
100159ba:	042d      	lsls	r5, r5, #16
100159bc:	0409      	lsls	r1, r1, #16
100159be:	0c2d      	lsrs	r5, r5, #16
100159c0:	430d      	orrs	r5, r1
100159c2:	45a8      	cmp	r8, r5
100159c4:	d909      	bls.n	100159da <__aeabi_ddiv+0x37a>
100159c6:	19ed      	adds	r5, r5, r7
100159c8:	1e73      	subs	r3, r6, #1
100159ca:	42af      	cmp	r7, r5
100159cc:	d900      	bls.n	100159d0 <__aeabi_ddiv+0x370>
100159ce:	e0d6      	b.n	10015b7e <__aeabi_ddiv+0x51e>
100159d0:	45a8      	cmp	r8, r5
100159d2:	d800      	bhi.n	100159d6 <__aeabi_ddiv+0x376>
100159d4:	e0d3      	b.n	10015b7e <__aeabi_ddiv+0x51e>
100159d6:	3e02      	subs	r6, #2
100159d8:	19ed      	adds	r5, r5, r7
100159da:	0424      	lsls	r4, r4, #16
100159dc:	0021      	movs	r1, r4
100159de:	4643      	mov	r3, r8
100159e0:	4331      	orrs	r1, r6
100159e2:	9e04      	ldr	r6, [sp, #16]
100159e4:	9a05      	ldr	r2, [sp, #20]
100159e6:	0030      	movs	r0, r6
100159e8:	1aed      	subs	r5, r5, r3
100159ea:	040b      	lsls	r3, r1, #16
100159ec:	0c0c      	lsrs	r4, r1, #16
100159ee:	0c1b      	lsrs	r3, r3, #16
100159f0:	4358      	muls	r0, r3
100159f2:	4366      	muls	r6, r4
100159f4:	4353      	muls	r3, r2
100159f6:	4354      	muls	r4, r2
100159f8:	199a      	adds	r2, r3, r6
100159fa:	0c03      	lsrs	r3, r0, #16
100159fc:	189b      	adds	r3, r3, r2
100159fe:	429e      	cmp	r6, r3
10015a00:	d903      	bls.n	10015a0a <__aeabi_ddiv+0x3aa>
10015a02:	2280      	movs	r2, #128	; 0x80
10015a04:	0252      	lsls	r2, r2, #9
10015a06:	4694      	mov	ip, r2
10015a08:	4464      	add	r4, ip
10015a0a:	0c1a      	lsrs	r2, r3, #16
10015a0c:	0400      	lsls	r0, r0, #16
10015a0e:	041b      	lsls	r3, r3, #16
10015a10:	0c00      	lsrs	r0, r0, #16
10015a12:	1914      	adds	r4, r2, r4
10015a14:	181b      	adds	r3, r3, r0
10015a16:	42a5      	cmp	r5, r4
10015a18:	d350      	bcc.n	10015abc <__aeabi_ddiv+0x45c>
10015a1a:	d04d      	beq.n	10015ab8 <__aeabi_ddiv+0x458>
10015a1c:	2301      	movs	r3, #1
10015a1e:	4319      	orrs	r1, r3
10015a20:	4a96      	ldr	r2, [pc, #600]	; (10015c7c <__aeabi_ddiv+0x61c>)
10015a22:	9b01      	ldr	r3, [sp, #4]
10015a24:	4694      	mov	ip, r2
10015a26:	4463      	add	r3, ip
10015a28:	2b00      	cmp	r3, #0
10015a2a:	dc00      	bgt.n	10015a2e <__aeabi_ddiv+0x3ce>
10015a2c:	e6f3      	b.n	10015816 <__aeabi_ddiv+0x1b6>
10015a2e:	074a      	lsls	r2, r1, #29
10015a30:	d009      	beq.n	10015a46 <__aeabi_ddiv+0x3e6>
10015a32:	220f      	movs	r2, #15
10015a34:	400a      	ands	r2, r1
10015a36:	2a04      	cmp	r2, #4
10015a38:	d005      	beq.n	10015a46 <__aeabi_ddiv+0x3e6>
10015a3a:	1d0a      	adds	r2, r1, #4
10015a3c:	428a      	cmp	r2, r1
10015a3e:	4189      	sbcs	r1, r1
10015a40:	4249      	negs	r1, r1
10015a42:	448b      	add	fp, r1
10015a44:	0011      	movs	r1, r2
10015a46:	465a      	mov	r2, fp
10015a48:	01d2      	lsls	r2, r2, #7
10015a4a:	d508      	bpl.n	10015a5e <__aeabi_ddiv+0x3fe>
10015a4c:	465a      	mov	r2, fp
10015a4e:	4b8c      	ldr	r3, [pc, #560]	; (10015c80 <__aeabi_ddiv+0x620>)
10015a50:	401a      	ands	r2, r3
10015a52:	4693      	mov	fp, r2
10015a54:	2280      	movs	r2, #128	; 0x80
10015a56:	00d2      	lsls	r2, r2, #3
10015a58:	4694      	mov	ip, r2
10015a5a:	9b01      	ldr	r3, [sp, #4]
10015a5c:	4463      	add	r3, ip
10015a5e:	4a89      	ldr	r2, [pc, #548]	; (10015c84 <__aeabi_ddiv+0x624>)
10015a60:	4293      	cmp	r3, r2
10015a62:	dd00      	ble.n	10015a66 <__aeabi_ddiv+0x406>
10015a64:	e65b      	b.n	1001571e <__aeabi_ddiv+0xbe>
10015a66:	465a      	mov	r2, fp
10015a68:	08c9      	lsrs	r1, r1, #3
10015a6a:	0750      	lsls	r0, r2, #29
10015a6c:	4308      	orrs	r0, r1
10015a6e:	0256      	lsls	r6, r2, #9
10015a70:	4651      	mov	r1, sl
10015a72:	2201      	movs	r2, #1
10015a74:	055b      	lsls	r3, r3, #21
10015a76:	4681      	mov	r9, r0
10015a78:	0b36      	lsrs	r6, r6, #12
10015a7a:	0d5b      	lsrs	r3, r3, #21
10015a7c:	400a      	ands	r2, r1
10015a7e:	e655      	b.n	1001572c <__aeabi_ddiv+0xcc>
10015a80:	2380      	movs	r3, #128	; 0x80
10015a82:	031b      	lsls	r3, r3, #12
10015a84:	421e      	tst	r6, r3
10015a86:	d011      	beq.n	10015aac <__aeabi_ddiv+0x44c>
10015a88:	465a      	mov	r2, fp
10015a8a:	421a      	tst	r2, r3
10015a8c:	d10e      	bne.n	10015aac <__aeabi_ddiv+0x44c>
10015a8e:	465e      	mov	r6, fp
10015a90:	431e      	orrs	r6, r3
10015a92:	0336      	lsls	r6, r6, #12
10015a94:	0b36      	lsrs	r6, r6, #12
10015a96:	002a      	movs	r2, r5
10015a98:	4689      	mov	r9, r1
10015a9a:	4b7b      	ldr	r3, [pc, #492]	; (10015c88 <__aeabi_ddiv+0x628>)
10015a9c:	e646      	b.n	1001572c <__aeabi_ddiv+0xcc>
10015a9e:	2b03      	cmp	r3, #3
10015aa0:	d100      	bne.n	10015aa4 <__aeabi_ddiv+0x444>
10015aa2:	e0e1      	b.n	10015c68 <__aeabi_ddiv+0x608>
10015aa4:	2b01      	cmp	r3, #1
10015aa6:	d1bb      	bne.n	10015a20 <__aeabi_ddiv+0x3c0>
10015aa8:	401a      	ands	r2, r3
10015aaa:	e6bb      	b.n	10015824 <__aeabi_ddiv+0x1c4>
10015aac:	431e      	orrs	r6, r3
10015aae:	0336      	lsls	r6, r6, #12
10015ab0:	0b36      	lsrs	r6, r6, #12
10015ab2:	4642      	mov	r2, r8
10015ab4:	4b74      	ldr	r3, [pc, #464]	; (10015c88 <__aeabi_ddiv+0x628>)
10015ab6:	e639      	b.n	1001572c <__aeabi_ddiv+0xcc>
10015ab8:	2b00      	cmp	r3, #0
10015aba:	d0b1      	beq.n	10015a20 <__aeabi_ddiv+0x3c0>
10015abc:	197d      	adds	r5, r7, r5
10015abe:	1e4a      	subs	r2, r1, #1
10015ac0:	42af      	cmp	r7, r5
10015ac2:	d952      	bls.n	10015b6a <__aeabi_ddiv+0x50a>
10015ac4:	0011      	movs	r1, r2
10015ac6:	42a5      	cmp	r5, r4
10015ac8:	d1a8      	bne.n	10015a1c <__aeabi_ddiv+0x3bc>
10015aca:	9a03      	ldr	r2, [sp, #12]
10015acc:	429a      	cmp	r2, r3
10015ace:	d1a5      	bne.n	10015a1c <__aeabi_ddiv+0x3bc>
10015ad0:	e7a6      	b.n	10015a20 <__aeabi_ddiv+0x3c0>
10015ad2:	0003      	movs	r3, r0
10015ad4:	003e      	movs	r6, r7
10015ad6:	3b28      	subs	r3, #40	; 0x28
10015ad8:	409e      	lsls	r6, r3
10015ada:	2300      	movs	r3, #0
10015adc:	4699      	mov	r9, r3
10015ade:	e654      	b.n	1001578a <__aeabi_ddiv+0x12a>
10015ae0:	f001 f960 	bl	10016da4 <__clzsi2>
10015ae4:	3020      	adds	r0, #32
10015ae6:	e641      	b.n	1001576c <__aeabi_ddiv+0x10c>
10015ae8:	0003      	movs	r3, r0
10015aea:	4652      	mov	r2, sl
10015aec:	3b28      	subs	r3, #40	; 0x28
10015aee:	409a      	lsls	r2, r3
10015af0:	2100      	movs	r1, #0
10015af2:	4693      	mov	fp, r2
10015af4:	e677      	b.n	100157e6 <__aeabi_ddiv+0x186>
10015af6:	4650      	mov	r0, sl
10015af8:	f001 f954 	bl	10016da4 <__clzsi2>
10015afc:	3020      	adds	r0, #32
10015afe:	e65e      	b.n	100157be <__aeabi_ddiv+0x15e>
10015b00:	9b02      	ldr	r3, [sp, #8]
10015b02:	2600      	movs	r6, #0
10015b04:	42ab      	cmp	r3, r5
10015b06:	d300      	bcc.n	10015b0a <__aeabi_ddiv+0x4aa>
10015b08:	e723      	b.n	10015952 <__aeabi_ddiv+0x2f2>
10015b0a:	9e03      	ldr	r6, [sp, #12]
10015b0c:	9902      	ldr	r1, [sp, #8]
10015b0e:	46b4      	mov	ip, r6
10015b10:	4461      	add	r1, ip
10015b12:	4688      	mov	r8, r1
10015b14:	45b0      	cmp	r8, r6
10015b16:	41b6      	sbcs	r6, r6
10015b18:	465b      	mov	r3, fp
10015b1a:	4276      	negs	r6, r6
10015b1c:	19f6      	adds	r6, r6, r7
10015b1e:	18b2      	adds	r2, r6, r2
10015b20:	3b01      	subs	r3, #1
10015b22:	9102      	str	r1, [sp, #8]
10015b24:	4297      	cmp	r7, r2
10015b26:	d213      	bcs.n	10015b50 <__aeabi_ddiv+0x4f0>
10015b28:	4290      	cmp	r0, r2
10015b2a:	d84f      	bhi.n	10015bcc <__aeabi_ddiv+0x56c>
10015b2c:	d100      	bne.n	10015b30 <__aeabi_ddiv+0x4d0>
10015b2e:	e08e      	b.n	10015c4e <__aeabi_ddiv+0x5ee>
10015b30:	1a16      	subs	r6, r2, r0
10015b32:	469b      	mov	fp, r3
10015b34:	e70d      	b.n	10015952 <__aeabi_ddiv+0x2f2>
10015b36:	4589      	cmp	r9, r1
10015b38:	d200      	bcs.n	10015b3c <__aeabi_ddiv+0x4dc>
10015b3a:	e68e      	b.n	1001585a <__aeabi_ddiv+0x1fa>
10015b3c:	0874      	lsrs	r4, r6, #1
10015b3e:	464b      	mov	r3, r9
10015b40:	07f6      	lsls	r6, r6, #31
10015b42:	0035      	movs	r5, r6
10015b44:	085b      	lsrs	r3, r3, #1
10015b46:	431d      	orrs	r5, r3
10015b48:	464b      	mov	r3, r9
10015b4a:	07db      	lsls	r3, r3, #31
10015b4c:	9302      	str	r3, [sp, #8]
10015b4e:	e68b      	b.n	10015868 <__aeabi_ddiv+0x208>
10015b50:	4297      	cmp	r7, r2
10015b52:	d1ed      	bne.n	10015b30 <__aeabi_ddiv+0x4d0>
10015b54:	9903      	ldr	r1, [sp, #12]
10015b56:	9c02      	ldr	r4, [sp, #8]
10015b58:	42a1      	cmp	r1, r4
10015b5a:	d9e5      	bls.n	10015b28 <__aeabi_ddiv+0x4c8>
10015b5c:	1a3e      	subs	r6, r7, r0
10015b5e:	469b      	mov	fp, r3
10015b60:	e6f7      	b.n	10015952 <__aeabi_ddiv+0x2f2>
10015b62:	4698      	mov	r8, r3
10015b64:	e6ca      	b.n	100158fc <__aeabi_ddiv+0x29c>
10015b66:	001e      	movs	r6, r3
10015b68:	e6a5      	b.n	100158b6 <__aeabi_ddiv+0x256>
10015b6a:	42ac      	cmp	r4, r5
10015b6c:	d83e      	bhi.n	10015bec <__aeabi_ddiv+0x58c>
10015b6e:	d074      	beq.n	10015c5a <__aeabi_ddiv+0x5fa>
10015b70:	0011      	movs	r1, r2
10015b72:	e753      	b.n	10015a1c <__aeabi_ddiv+0x3bc>
10015b74:	2101      	movs	r1, #1
10015b76:	4249      	negs	r1, r1
10015b78:	e752      	b.n	10015a20 <__aeabi_ddiv+0x3c0>
10015b7a:	001c      	movs	r4, r3
10015b7c:	e70e      	b.n	1001599c <__aeabi_ddiv+0x33c>
10015b7e:	001e      	movs	r6, r3
10015b80:	e72b      	b.n	100159da <__aeabi_ddiv+0x37a>
10015b82:	2d1f      	cmp	r5, #31
10015b84:	dc3c      	bgt.n	10015c00 <__aeabi_ddiv+0x5a0>
10015b86:	2320      	movs	r3, #32
10015b88:	000a      	movs	r2, r1
10015b8a:	4658      	mov	r0, fp
10015b8c:	1b5b      	subs	r3, r3, r5
10015b8e:	4098      	lsls	r0, r3
10015b90:	40ea      	lsrs	r2, r5
10015b92:	4099      	lsls	r1, r3
10015b94:	4302      	orrs	r2, r0
10015b96:	1e48      	subs	r0, r1, #1
10015b98:	4181      	sbcs	r1, r0
10015b9a:	465e      	mov	r6, fp
10015b9c:	4311      	orrs	r1, r2
10015b9e:	40ee      	lsrs	r6, r5
10015ba0:	074b      	lsls	r3, r1, #29
10015ba2:	d009      	beq.n	10015bb8 <__aeabi_ddiv+0x558>
10015ba4:	230f      	movs	r3, #15
10015ba6:	400b      	ands	r3, r1
10015ba8:	2b04      	cmp	r3, #4
10015baa:	d005      	beq.n	10015bb8 <__aeabi_ddiv+0x558>
10015bac:	000b      	movs	r3, r1
10015bae:	1d19      	adds	r1, r3, #4
10015bb0:	4299      	cmp	r1, r3
10015bb2:	419b      	sbcs	r3, r3
10015bb4:	425b      	negs	r3, r3
10015bb6:	18f6      	adds	r6, r6, r3
10015bb8:	0233      	lsls	r3, r6, #8
10015bba:	d53c      	bpl.n	10015c36 <__aeabi_ddiv+0x5d6>
10015bbc:	4653      	mov	r3, sl
10015bbe:	2201      	movs	r2, #1
10015bc0:	2100      	movs	r1, #0
10015bc2:	401a      	ands	r2, r3
10015bc4:	2600      	movs	r6, #0
10015bc6:	2301      	movs	r3, #1
10015bc8:	4689      	mov	r9, r1
10015bca:	e5af      	b.n	1001572c <__aeabi_ddiv+0xcc>
10015bcc:	2302      	movs	r3, #2
10015bce:	425b      	negs	r3, r3
10015bd0:	469c      	mov	ip, r3
10015bd2:	9c03      	ldr	r4, [sp, #12]
10015bd4:	44e3      	add	fp, ip
10015bd6:	46a4      	mov	ip, r4
10015bd8:	9b02      	ldr	r3, [sp, #8]
10015bda:	4463      	add	r3, ip
10015bdc:	4698      	mov	r8, r3
10015bde:	45a0      	cmp	r8, r4
10015be0:	41b6      	sbcs	r6, r6
10015be2:	4276      	negs	r6, r6
10015be4:	19f6      	adds	r6, r6, r7
10015be6:	9302      	str	r3, [sp, #8]
10015be8:	18b2      	adds	r2, r6, r2
10015bea:	e6b1      	b.n	10015950 <__aeabi_ddiv+0x2f0>
10015bec:	9803      	ldr	r0, [sp, #12]
10015bee:	1e8a      	subs	r2, r1, #2
10015bf0:	0041      	lsls	r1, r0, #1
10015bf2:	4281      	cmp	r1, r0
10015bf4:	41b6      	sbcs	r6, r6
10015bf6:	4276      	negs	r6, r6
10015bf8:	19f6      	adds	r6, r6, r7
10015bfa:	19ad      	adds	r5, r5, r6
10015bfc:	9103      	str	r1, [sp, #12]
10015bfe:	e761      	b.n	10015ac4 <__aeabi_ddiv+0x464>
10015c00:	221f      	movs	r2, #31
10015c02:	4252      	negs	r2, r2
10015c04:	1ad3      	subs	r3, r2, r3
10015c06:	465a      	mov	r2, fp
10015c08:	40da      	lsrs	r2, r3
10015c0a:	0013      	movs	r3, r2
10015c0c:	2d20      	cmp	r5, #32
10015c0e:	d029      	beq.n	10015c64 <__aeabi_ddiv+0x604>
10015c10:	2240      	movs	r2, #64	; 0x40
10015c12:	4658      	mov	r0, fp
10015c14:	1b55      	subs	r5, r2, r5
10015c16:	40a8      	lsls	r0, r5
10015c18:	4301      	orrs	r1, r0
10015c1a:	1e48      	subs	r0, r1, #1
10015c1c:	4181      	sbcs	r1, r0
10015c1e:	2007      	movs	r0, #7
10015c20:	430b      	orrs	r3, r1
10015c22:	4018      	ands	r0, r3
10015c24:	2600      	movs	r6, #0
10015c26:	2800      	cmp	r0, #0
10015c28:	d009      	beq.n	10015c3e <__aeabi_ddiv+0x5de>
10015c2a:	220f      	movs	r2, #15
10015c2c:	2600      	movs	r6, #0
10015c2e:	401a      	ands	r2, r3
10015c30:	0019      	movs	r1, r3
10015c32:	2a04      	cmp	r2, #4
10015c34:	d1bb      	bne.n	10015bae <__aeabi_ddiv+0x54e>
10015c36:	000b      	movs	r3, r1
10015c38:	0770      	lsls	r0, r6, #29
10015c3a:	0276      	lsls	r6, r6, #9
10015c3c:	0b36      	lsrs	r6, r6, #12
10015c3e:	08db      	lsrs	r3, r3, #3
10015c40:	4303      	orrs	r3, r0
10015c42:	4699      	mov	r9, r3
10015c44:	2201      	movs	r2, #1
10015c46:	4653      	mov	r3, sl
10015c48:	401a      	ands	r2, r3
10015c4a:	2300      	movs	r3, #0
10015c4c:	e56e      	b.n	1001572c <__aeabi_ddiv+0xcc>
10015c4e:	9902      	ldr	r1, [sp, #8]
10015c50:	428d      	cmp	r5, r1
10015c52:	d8bb      	bhi.n	10015bcc <__aeabi_ddiv+0x56c>
10015c54:	469b      	mov	fp, r3
10015c56:	2600      	movs	r6, #0
10015c58:	e67b      	b.n	10015952 <__aeabi_ddiv+0x2f2>
10015c5a:	9803      	ldr	r0, [sp, #12]
10015c5c:	4298      	cmp	r0, r3
10015c5e:	d3c5      	bcc.n	10015bec <__aeabi_ddiv+0x58c>
10015c60:	0011      	movs	r1, r2
10015c62:	e732      	b.n	10015aca <__aeabi_ddiv+0x46a>
10015c64:	2000      	movs	r0, #0
10015c66:	e7d7      	b.n	10015c18 <__aeabi_ddiv+0x5b8>
10015c68:	2680      	movs	r6, #128	; 0x80
10015c6a:	465b      	mov	r3, fp
10015c6c:	0336      	lsls	r6, r6, #12
10015c6e:	431e      	orrs	r6, r3
10015c70:	0336      	lsls	r6, r6, #12
10015c72:	0b36      	lsrs	r6, r6, #12
10015c74:	9a00      	ldr	r2, [sp, #0]
10015c76:	4689      	mov	r9, r1
10015c78:	4b03      	ldr	r3, [pc, #12]	; (10015c88 <__aeabi_ddiv+0x628>)
10015c7a:	e557      	b.n	1001572c <__aeabi_ddiv+0xcc>
10015c7c:	000003ff 	.word	0x000003ff
10015c80:	feffffff 	.word	0xfeffffff
10015c84:	000007fe 	.word	0x000007fe
10015c88:	000007ff 	.word	0x000007ff

10015c8c <__eqdf2>:
10015c8c:	b5f0      	push	{r4, r5, r6, r7, lr}
10015c8e:	465f      	mov	r7, fp
10015c90:	4656      	mov	r6, sl
10015c92:	464d      	mov	r5, r9
10015c94:	4644      	mov	r4, r8
10015c96:	b4f0      	push	{r4, r5, r6, r7}
10015c98:	031f      	lsls	r7, r3, #12
10015c9a:	005c      	lsls	r4, r3, #1
10015c9c:	0fdb      	lsrs	r3, r3, #31
10015c9e:	469a      	mov	sl, r3
10015ca0:	4b19      	ldr	r3, [pc, #100]	; (10015d08 <__eqdf2+0x7c>)
10015ca2:	030e      	lsls	r6, r1, #12
10015ca4:	004d      	lsls	r5, r1, #1
10015ca6:	0fc9      	lsrs	r1, r1, #31
10015ca8:	4680      	mov	r8, r0
10015caa:	0b36      	lsrs	r6, r6, #12
10015cac:	0d6d      	lsrs	r5, r5, #21
10015cae:	468b      	mov	fp, r1
10015cb0:	4691      	mov	r9, r2
10015cb2:	0b3f      	lsrs	r7, r7, #12
10015cb4:	0d64      	lsrs	r4, r4, #21
10015cb6:	429d      	cmp	r5, r3
10015cb8:	d019      	beq.n	10015cee <__eqdf2+0x62>
10015cba:	4b13      	ldr	r3, [pc, #76]	; (10015d08 <__eqdf2+0x7c>)
10015cbc:	429c      	cmp	r4, r3
10015cbe:	d01b      	beq.n	10015cf8 <__eqdf2+0x6c>
10015cc0:	2301      	movs	r3, #1
10015cc2:	42a5      	cmp	r5, r4
10015cc4:	d006      	beq.n	10015cd4 <__eqdf2+0x48>
10015cc6:	0018      	movs	r0, r3
10015cc8:	bc3c      	pop	{r2, r3, r4, r5}
10015cca:	4690      	mov	r8, r2
10015ccc:	4699      	mov	r9, r3
10015cce:	46a2      	mov	sl, r4
10015cd0:	46ab      	mov	fp, r5
10015cd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
10015cd4:	42be      	cmp	r6, r7
10015cd6:	d1f6      	bne.n	10015cc6 <__eqdf2+0x3a>
10015cd8:	45c8      	cmp	r8, r9
10015cda:	d1f4      	bne.n	10015cc6 <__eqdf2+0x3a>
10015cdc:	45d3      	cmp	fp, sl
10015cde:	d010      	beq.n	10015d02 <__eqdf2+0x76>
10015ce0:	2d00      	cmp	r5, #0
10015ce2:	d1f0      	bne.n	10015cc6 <__eqdf2+0x3a>
10015ce4:	4330      	orrs	r0, r6
10015ce6:	0003      	movs	r3, r0
10015ce8:	1e5a      	subs	r2, r3, #1
10015cea:	4193      	sbcs	r3, r2
10015cec:	e7eb      	b.n	10015cc6 <__eqdf2+0x3a>
10015cee:	0031      	movs	r1, r6
10015cf0:	2301      	movs	r3, #1
10015cf2:	4301      	orrs	r1, r0
10015cf4:	d1e7      	bne.n	10015cc6 <__eqdf2+0x3a>
10015cf6:	e7e0      	b.n	10015cba <__eqdf2+0x2e>
10015cf8:	433a      	orrs	r2, r7
10015cfa:	2301      	movs	r3, #1
10015cfc:	2a00      	cmp	r2, #0
10015cfe:	d1e2      	bne.n	10015cc6 <__eqdf2+0x3a>
10015d00:	e7de      	b.n	10015cc0 <__eqdf2+0x34>
10015d02:	2300      	movs	r3, #0
10015d04:	e7df      	b.n	10015cc6 <__eqdf2+0x3a>
10015d06:	46c0      	nop			; (mov r8, r8)
10015d08:	000007ff 	.word	0x000007ff

10015d0c <__gedf2>:
10015d0c:	b5f0      	push	{r4, r5, r6, r7, lr}
10015d0e:	465f      	mov	r7, fp
10015d10:	4644      	mov	r4, r8
10015d12:	4656      	mov	r6, sl
10015d14:	464d      	mov	r5, r9
10015d16:	b4f0      	push	{r4, r5, r6, r7}
10015d18:	031f      	lsls	r7, r3, #12
10015d1a:	0b3c      	lsrs	r4, r7, #12
10015d1c:	4f2c      	ldr	r7, [pc, #176]	; (10015dd0 <__gedf2+0xc4>)
10015d1e:	030e      	lsls	r6, r1, #12
10015d20:	004d      	lsls	r5, r1, #1
10015d22:	46a3      	mov	fp, r4
10015d24:	005c      	lsls	r4, r3, #1
10015d26:	4684      	mov	ip, r0
10015d28:	0b36      	lsrs	r6, r6, #12
10015d2a:	0d6d      	lsrs	r5, r5, #21
10015d2c:	0fc9      	lsrs	r1, r1, #31
10015d2e:	4690      	mov	r8, r2
10015d30:	0d64      	lsrs	r4, r4, #21
10015d32:	0fdb      	lsrs	r3, r3, #31
10015d34:	42bd      	cmp	r5, r7
10015d36:	d02b      	beq.n	10015d90 <__gedf2+0x84>
10015d38:	4f25      	ldr	r7, [pc, #148]	; (10015dd0 <__gedf2+0xc4>)
10015d3a:	42bc      	cmp	r4, r7
10015d3c:	d02e      	beq.n	10015d9c <__gedf2+0x90>
10015d3e:	2d00      	cmp	r5, #0
10015d40:	d10e      	bne.n	10015d60 <__gedf2+0x54>
10015d42:	4330      	orrs	r0, r6
10015d44:	0007      	movs	r7, r0
10015d46:	4681      	mov	r9, r0
10015d48:	4278      	negs	r0, r7
10015d4a:	4178      	adcs	r0, r7
10015d4c:	2c00      	cmp	r4, #0
10015d4e:	d117      	bne.n	10015d80 <__gedf2+0x74>
10015d50:	465f      	mov	r7, fp
10015d52:	433a      	orrs	r2, r7
10015d54:	d114      	bne.n	10015d80 <__gedf2+0x74>
10015d56:	464b      	mov	r3, r9
10015d58:	2000      	movs	r0, #0
10015d5a:	2b00      	cmp	r3, #0
10015d5c:	d00a      	beq.n	10015d74 <__gedf2+0x68>
10015d5e:	e006      	b.n	10015d6e <__gedf2+0x62>
10015d60:	2c00      	cmp	r4, #0
10015d62:	d102      	bne.n	10015d6a <__gedf2+0x5e>
10015d64:	4658      	mov	r0, fp
10015d66:	4302      	orrs	r2, r0
10015d68:	d001      	beq.n	10015d6e <__gedf2+0x62>
10015d6a:	4299      	cmp	r1, r3
10015d6c:	d01a      	beq.n	10015da4 <__gedf2+0x98>
10015d6e:	2301      	movs	r3, #1
10015d70:	4248      	negs	r0, r1
10015d72:	4318      	orrs	r0, r3
10015d74:	bc3c      	pop	{r2, r3, r4, r5}
10015d76:	4690      	mov	r8, r2
10015d78:	4699      	mov	r9, r3
10015d7a:	46a2      	mov	sl, r4
10015d7c:	46ab      	mov	fp, r5
10015d7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10015d80:	2800      	cmp	r0, #0
10015d82:	d0f2      	beq.n	10015d6a <__gedf2+0x5e>
10015d84:	4258      	negs	r0, r3
10015d86:	4158      	adcs	r0, r3
10015d88:	2201      	movs	r2, #1
10015d8a:	4240      	negs	r0, r0
10015d8c:	4310      	orrs	r0, r2
10015d8e:	e7f1      	b.n	10015d74 <__gedf2+0x68>
10015d90:	0037      	movs	r7, r6
10015d92:	4307      	orrs	r7, r0
10015d94:	d0d0      	beq.n	10015d38 <__gedf2+0x2c>
10015d96:	2002      	movs	r0, #2
10015d98:	4240      	negs	r0, r0
10015d9a:	e7eb      	b.n	10015d74 <__gedf2+0x68>
10015d9c:	465f      	mov	r7, fp
10015d9e:	4317      	orrs	r7, r2
10015da0:	d0cd      	beq.n	10015d3e <__gedf2+0x32>
10015da2:	e7f8      	b.n	10015d96 <__gedf2+0x8a>
10015da4:	42a5      	cmp	r5, r4
10015da6:	dce2      	bgt.n	10015d6e <__gedf2+0x62>
10015da8:	db05      	blt.n	10015db6 <__gedf2+0xaa>
10015daa:	455e      	cmp	r6, fp
10015dac:	d8df      	bhi.n	10015d6e <__gedf2+0x62>
10015dae:	d008      	beq.n	10015dc2 <__gedf2+0xb6>
10015db0:	2000      	movs	r0, #0
10015db2:	455e      	cmp	r6, fp
10015db4:	d2de      	bcs.n	10015d74 <__gedf2+0x68>
10015db6:	4248      	negs	r0, r1
10015db8:	4148      	adcs	r0, r1
10015dba:	2301      	movs	r3, #1
10015dbc:	4240      	negs	r0, r0
10015dbe:	4318      	orrs	r0, r3
10015dc0:	e7d8      	b.n	10015d74 <__gedf2+0x68>
10015dc2:	45c4      	cmp	ip, r8
10015dc4:	d8d3      	bhi.n	10015d6e <__gedf2+0x62>
10015dc6:	2000      	movs	r0, #0
10015dc8:	45c4      	cmp	ip, r8
10015dca:	d3f4      	bcc.n	10015db6 <__gedf2+0xaa>
10015dcc:	e7d2      	b.n	10015d74 <__gedf2+0x68>
10015dce:	46c0      	nop			; (mov r8, r8)
10015dd0:	000007ff 	.word	0x000007ff

10015dd4 <__ledf2>:
10015dd4:	b5f0      	push	{r4, r5, r6, r7, lr}
10015dd6:	465f      	mov	r7, fp
10015dd8:	464d      	mov	r5, r9
10015dda:	4644      	mov	r4, r8
10015ddc:	4656      	mov	r6, sl
10015dde:	b4f0      	push	{r4, r5, r6, r7}
10015de0:	031c      	lsls	r4, r3, #12
10015de2:	0b24      	lsrs	r4, r4, #12
10015de4:	46a4      	mov	ip, r4
10015de6:	4c2f      	ldr	r4, [pc, #188]	; (10015ea4 <__ledf2+0xd0>)
10015de8:	030f      	lsls	r7, r1, #12
10015dea:	004d      	lsls	r5, r1, #1
10015dec:	005e      	lsls	r6, r3, #1
10015dee:	0fc9      	lsrs	r1, r1, #31
10015df0:	4680      	mov	r8, r0
10015df2:	0b3f      	lsrs	r7, r7, #12
10015df4:	0d6d      	lsrs	r5, r5, #21
10015df6:	468b      	mov	fp, r1
10015df8:	4691      	mov	r9, r2
10015dfa:	0d76      	lsrs	r6, r6, #21
10015dfc:	0fdb      	lsrs	r3, r3, #31
10015dfe:	42a5      	cmp	r5, r4
10015e00:	d020      	beq.n	10015e44 <__ledf2+0x70>
10015e02:	4c28      	ldr	r4, [pc, #160]	; (10015ea4 <__ledf2+0xd0>)
10015e04:	42a6      	cmp	r6, r4
10015e06:	d022      	beq.n	10015e4e <__ledf2+0x7a>
10015e08:	2d00      	cmp	r5, #0
10015e0a:	d112      	bne.n	10015e32 <__ledf2+0x5e>
10015e0c:	4338      	orrs	r0, r7
10015e0e:	4244      	negs	r4, r0
10015e10:	4144      	adcs	r4, r0
10015e12:	2e00      	cmp	r6, #0
10015e14:	d020      	beq.n	10015e58 <__ledf2+0x84>
10015e16:	2c00      	cmp	r4, #0
10015e18:	d00d      	beq.n	10015e36 <__ledf2+0x62>
10015e1a:	425c      	negs	r4, r3
10015e1c:	4163      	adcs	r3, r4
10015e1e:	2401      	movs	r4, #1
10015e20:	425b      	negs	r3, r3
10015e22:	431c      	orrs	r4, r3
10015e24:	0020      	movs	r0, r4
10015e26:	bc3c      	pop	{r2, r3, r4, r5}
10015e28:	4690      	mov	r8, r2
10015e2a:	4699      	mov	r9, r3
10015e2c:	46a2      	mov	sl, r4
10015e2e:	46ab      	mov	fp, r5
10015e30:	bdf0      	pop	{r4, r5, r6, r7, pc}
10015e32:	2e00      	cmp	r6, #0
10015e34:	d017      	beq.n	10015e66 <__ledf2+0x92>
10015e36:	455b      	cmp	r3, fp
10015e38:	d019      	beq.n	10015e6e <__ledf2+0x9a>
10015e3a:	465b      	mov	r3, fp
10015e3c:	425c      	negs	r4, r3
10015e3e:	2301      	movs	r3, #1
10015e40:	431c      	orrs	r4, r3
10015e42:	e7ef      	b.n	10015e24 <__ledf2+0x50>
10015e44:	0039      	movs	r1, r7
10015e46:	2402      	movs	r4, #2
10015e48:	4301      	orrs	r1, r0
10015e4a:	d1eb      	bne.n	10015e24 <__ledf2+0x50>
10015e4c:	e7d9      	b.n	10015e02 <__ledf2+0x2e>
10015e4e:	4661      	mov	r1, ip
10015e50:	2402      	movs	r4, #2
10015e52:	4311      	orrs	r1, r2
10015e54:	d1e6      	bne.n	10015e24 <__ledf2+0x50>
10015e56:	e7d7      	b.n	10015e08 <__ledf2+0x34>
10015e58:	4661      	mov	r1, ip
10015e5a:	430a      	orrs	r2, r1
10015e5c:	d1db      	bne.n	10015e16 <__ledf2+0x42>
10015e5e:	2400      	movs	r4, #0
10015e60:	2800      	cmp	r0, #0
10015e62:	d0df      	beq.n	10015e24 <__ledf2+0x50>
10015e64:	e7e9      	b.n	10015e3a <__ledf2+0x66>
10015e66:	4661      	mov	r1, ip
10015e68:	430a      	orrs	r2, r1
10015e6a:	d1e4      	bne.n	10015e36 <__ledf2+0x62>
10015e6c:	e7e5      	b.n	10015e3a <__ledf2+0x66>
10015e6e:	42b5      	cmp	r5, r6
10015e70:	dd03      	ble.n	10015e7a <__ledf2+0xa6>
10015e72:	2201      	movs	r2, #1
10015e74:	425c      	negs	r4, r3
10015e76:	4314      	orrs	r4, r2
10015e78:	e7d4      	b.n	10015e24 <__ledf2+0x50>
10015e7a:	42b5      	cmp	r5, r6
10015e7c:	dbcd      	blt.n	10015e1a <__ledf2+0x46>
10015e7e:	4567      	cmp	r7, ip
10015e80:	d8db      	bhi.n	10015e3a <__ledf2+0x66>
10015e82:	d009      	beq.n	10015e98 <__ledf2+0xc4>
10015e84:	2400      	movs	r4, #0
10015e86:	4567      	cmp	r7, ip
10015e88:	d2cc      	bcs.n	10015e24 <__ledf2+0x50>
10015e8a:	4659      	mov	r1, fp
10015e8c:	424c      	negs	r4, r1
10015e8e:	4161      	adcs	r1, r4
10015e90:	2401      	movs	r4, #1
10015e92:	4249      	negs	r1, r1
10015e94:	430c      	orrs	r4, r1
10015e96:	e7c5      	b.n	10015e24 <__ledf2+0x50>
10015e98:	45c8      	cmp	r8, r9
10015e9a:	d8ce      	bhi.n	10015e3a <__ledf2+0x66>
10015e9c:	2400      	movs	r4, #0
10015e9e:	45c8      	cmp	r8, r9
10015ea0:	d3f3      	bcc.n	10015e8a <__ledf2+0xb6>
10015ea2:	e7bf      	b.n	10015e24 <__ledf2+0x50>
10015ea4:	000007ff 	.word	0x000007ff

10015ea8 <__aeabi_dmul>:
10015ea8:	b5f0      	push	{r4, r5, r6, r7, lr}
10015eaa:	465f      	mov	r7, fp
10015eac:	4656      	mov	r6, sl
10015eae:	464d      	mov	r5, r9
10015eb0:	4644      	mov	r4, r8
10015eb2:	b4f0      	push	{r4, r5, r6, r7}
10015eb4:	030d      	lsls	r5, r1, #12
10015eb6:	4699      	mov	r9, r3
10015eb8:	004e      	lsls	r6, r1, #1
10015eba:	0b2b      	lsrs	r3, r5, #12
10015ebc:	b087      	sub	sp, #28
10015ebe:	0007      	movs	r7, r0
10015ec0:	4692      	mov	sl, r2
10015ec2:	4680      	mov	r8, r0
10015ec4:	469b      	mov	fp, r3
10015ec6:	0d76      	lsrs	r6, r6, #21
10015ec8:	0fcc      	lsrs	r4, r1, #31
10015eca:	2e00      	cmp	r6, #0
10015ecc:	d069      	beq.n	10015fa2 <__aeabi_dmul+0xfa>
10015ece:	4b6d      	ldr	r3, [pc, #436]	; (10016084 <__aeabi_dmul+0x1dc>)
10015ed0:	429e      	cmp	r6, r3
10015ed2:	d035      	beq.n	10015f40 <__aeabi_dmul+0x98>
10015ed4:	465b      	mov	r3, fp
10015ed6:	2280      	movs	r2, #128	; 0x80
10015ed8:	00dd      	lsls	r5, r3, #3
10015eda:	0412      	lsls	r2, r2, #16
10015edc:	0f43      	lsrs	r3, r0, #29
10015ede:	4313      	orrs	r3, r2
10015ee0:	432b      	orrs	r3, r5
10015ee2:	469b      	mov	fp, r3
10015ee4:	00c3      	lsls	r3, r0, #3
10015ee6:	4698      	mov	r8, r3
10015ee8:	4b67      	ldr	r3, [pc, #412]	; (10016088 <__aeabi_dmul+0x1e0>)
10015eea:	2700      	movs	r7, #0
10015eec:	469c      	mov	ip, r3
10015eee:	2300      	movs	r3, #0
10015ef0:	4466      	add	r6, ip
10015ef2:	9301      	str	r3, [sp, #4]
10015ef4:	464a      	mov	r2, r9
10015ef6:	0315      	lsls	r5, r2, #12
10015ef8:	0050      	lsls	r0, r2, #1
10015efa:	0fd2      	lsrs	r2, r2, #31
10015efc:	4653      	mov	r3, sl
10015efe:	0b2d      	lsrs	r5, r5, #12
10015f00:	0d40      	lsrs	r0, r0, #21
10015f02:	4691      	mov	r9, r2
10015f04:	d100      	bne.n	10015f08 <__aeabi_dmul+0x60>
10015f06:	e076      	b.n	10015ff6 <__aeabi_dmul+0x14e>
10015f08:	4a5e      	ldr	r2, [pc, #376]	; (10016084 <__aeabi_dmul+0x1dc>)
10015f0a:	4290      	cmp	r0, r2
10015f0c:	d06c      	beq.n	10015fe8 <__aeabi_dmul+0x140>
10015f0e:	2280      	movs	r2, #128	; 0x80
10015f10:	0f5b      	lsrs	r3, r3, #29
10015f12:	0412      	lsls	r2, r2, #16
10015f14:	4313      	orrs	r3, r2
10015f16:	4a5c      	ldr	r2, [pc, #368]	; (10016088 <__aeabi_dmul+0x1e0>)
10015f18:	00ed      	lsls	r5, r5, #3
10015f1a:	4694      	mov	ip, r2
10015f1c:	431d      	orrs	r5, r3
10015f1e:	4653      	mov	r3, sl
10015f20:	2200      	movs	r2, #0
10015f22:	00db      	lsls	r3, r3, #3
10015f24:	4460      	add	r0, ip
10015f26:	4649      	mov	r1, r9
10015f28:	1836      	adds	r6, r6, r0
10015f2a:	1c70      	adds	r0, r6, #1
10015f2c:	4061      	eors	r1, r4
10015f2e:	9002      	str	r0, [sp, #8]
10015f30:	4317      	orrs	r7, r2
10015f32:	2f0f      	cmp	r7, #15
10015f34:	d900      	bls.n	10015f38 <__aeabi_dmul+0x90>
10015f36:	e0af      	b.n	10016098 <__aeabi_dmul+0x1f0>
10015f38:	4854      	ldr	r0, [pc, #336]	; (1001608c <__aeabi_dmul+0x1e4>)
10015f3a:	00bf      	lsls	r7, r7, #2
10015f3c:	59c7      	ldr	r7, [r0, r7]
10015f3e:	46bf      	mov	pc, r7
10015f40:	465b      	mov	r3, fp
10015f42:	431f      	orrs	r7, r3
10015f44:	d000      	beq.n	10015f48 <__aeabi_dmul+0xa0>
10015f46:	e088      	b.n	1001605a <__aeabi_dmul+0x1b2>
10015f48:	2300      	movs	r3, #0
10015f4a:	469b      	mov	fp, r3
10015f4c:	4698      	mov	r8, r3
10015f4e:	3302      	adds	r3, #2
10015f50:	2708      	movs	r7, #8
10015f52:	9301      	str	r3, [sp, #4]
10015f54:	e7ce      	b.n	10015ef4 <__aeabi_dmul+0x4c>
10015f56:	4649      	mov	r1, r9
10015f58:	2a02      	cmp	r2, #2
10015f5a:	d06a      	beq.n	10016032 <__aeabi_dmul+0x18a>
10015f5c:	2a03      	cmp	r2, #3
10015f5e:	d100      	bne.n	10015f62 <__aeabi_dmul+0xba>
10015f60:	e209      	b.n	10016376 <__aeabi_dmul+0x4ce>
10015f62:	2a01      	cmp	r2, #1
10015f64:	d000      	beq.n	10015f68 <__aeabi_dmul+0xc0>
10015f66:	e1bb      	b.n	100162e0 <__aeabi_dmul+0x438>
10015f68:	4011      	ands	r1, r2
10015f6a:	2200      	movs	r2, #0
10015f6c:	2300      	movs	r3, #0
10015f6e:	2500      	movs	r5, #0
10015f70:	4690      	mov	r8, r2
10015f72:	b2cc      	uxtb	r4, r1
10015f74:	2100      	movs	r1, #0
10015f76:	032d      	lsls	r5, r5, #12
10015f78:	0d0a      	lsrs	r2, r1, #20
10015f7a:	0512      	lsls	r2, r2, #20
10015f7c:	0b2d      	lsrs	r5, r5, #12
10015f7e:	4315      	orrs	r5, r2
10015f80:	4a43      	ldr	r2, [pc, #268]	; (10016090 <__aeabi_dmul+0x1e8>)
10015f82:	051b      	lsls	r3, r3, #20
10015f84:	4015      	ands	r5, r2
10015f86:	431d      	orrs	r5, r3
10015f88:	006d      	lsls	r5, r5, #1
10015f8a:	07e4      	lsls	r4, r4, #31
10015f8c:	086d      	lsrs	r5, r5, #1
10015f8e:	4325      	orrs	r5, r4
10015f90:	4640      	mov	r0, r8
10015f92:	0029      	movs	r1, r5
10015f94:	b007      	add	sp, #28
10015f96:	bc3c      	pop	{r2, r3, r4, r5}
10015f98:	4690      	mov	r8, r2
10015f9a:	4699      	mov	r9, r3
10015f9c:	46a2      	mov	sl, r4
10015f9e:	46ab      	mov	fp, r5
10015fa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
10015fa2:	4303      	orrs	r3, r0
10015fa4:	d052      	beq.n	1001604c <__aeabi_dmul+0x1a4>
10015fa6:	465b      	mov	r3, fp
10015fa8:	2b00      	cmp	r3, #0
10015faa:	d100      	bne.n	10015fae <__aeabi_dmul+0x106>
10015fac:	e18a      	b.n	100162c4 <__aeabi_dmul+0x41c>
10015fae:	4658      	mov	r0, fp
10015fb0:	f000 fef8 	bl	10016da4 <__clzsi2>
10015fb4:	0003      	movs	r3, r0
10015fb6:	3b0b      	subs	r3, #11
10015fb8:	2b1c      	cmp	r3, #28
10015fba:	dd00      	ble.n	10015fbe <__aeabi_dmul+0x116>
10015fbc:	e17b      	b.n	100162b6 <__aeabi_dmul+0x40e>
10015fbe:	221d      	movs	r2, #29
10015fc0:	1ad3      	subs	r3, r2, r3
10015fc2:	003a      	movs	r2, r7
10015fc4:	0001      	movs	r1, r0
10015fc6:	465d      	mov	r5, fp
10015fc8:	40da      	lsrs	r2, r3
10015fca:	3908      	subs	r1, #8
10015fcc:	408d      	lsls	r5, r1
10015fce:	0013      	movs	r3, r2
10015fd0:	408f      	lsls	r7, r1
10015fd2:	432b      	orrs	r3, r5
10015fd4:	469b      	mov	fp, r3
10015fd6:	46b8      	mov	r8, r7
10015fd8:	4b2e      	ldr	r3, [pc, #184]	; (10016094 <__aeabi_dmul+0x1ec>)
10015fda:	2700      	movs	r7, #0
10015fdc:	469c      	mov	ip, r3
10015fde:	2300      	movs	r3, #0
10015fe0:	4460      	add	r0, ip
10015fe2:	4246      	negs	r6, r0
10015fe4:	9301      	str	r3, [sp, #4]
10015fe6:	e785      	b.n	10015ef4 <__aeabi_dmul+0x4c>
10015fe8:	4652      	mov	r2, sl
10015fea:	432a      	orrs	r2, r5
10015fec:	d12c      	bne.n	10016048 <__aeabi_dmul+0x1a0>
10015fee:	2500      	movs	r5, #0
10015ff0:	2300      	movs	r3, #0
10015ff2:	2202      	movs	r2, #2
10015ff4:	e797      	b.n	10015f26 <__aeabi_dmul+0x7e>
10015ff6:	4652      	mov	r2, sl
10015ff8:	432a      	orrs	r2, r5
10015ffa:	d021      	beq.n	10016040 <__aeabi_dmul+0x198>
10015ffc:	2d00      	cmp	r5, #0
10015ffe:	d100      	bne.n	10016002 <__aeabi_dmul+0x15a>
10016000:	e154      	b.n	100162ac <__aeabi_dmul+0x404>
10016002:	0028      	movs	r0, r5
10016004:	f000 fece 	bl	10016da4 <__clzsi2>
10016008:	0003      	movs	r3, r0
1001600a:	3b0b      	subs	r3, #11
1001600c:	2b1c      	cmp	r3, #28
1001600e:	dd00      	ble.n	10016012 <__aeabi_dmul+0x16a>
10016010:	e146      	b.n	100162a0 <__aeabi_dmul+0x3f8>
10016012:	211d      	movs	r1, #29
10016014:	1acb      	subs	r3, r1, r3
10016016:	4651      	mov	r1, sl
10016018:	0002      	movs	r2, r0
1001601a:	40d9      	lsrs	r1, r3
1001601c:	4653      	mov	r3, sl
1001601e:	3a08      	subs	r2, #8
10016020:	4095      	lsls	r5, r2
10016022:	4093      	lsls	r3, r2
10016024:	430d      	orrs	r5, r1
10016026:	4a1b      	ldr	r2, [pc, #108]	; (10016094 <__aeabi_dmul+0x1ec>)
10016028:	4694      	mov	ip, r2
1001602a:	4460      	add	r0, ip
1001602c:	4240      	negs	r0, r0
1001602e:	2200      	movs	r2, #0
10016030:	e779      	b.n	10015f26 <__aeabi_dmul+0x7e>
10016032:	2401      	movs	r4, #1
10016034:	2200      	movs	r2, #0
10016036:	400c      	ands	r4, r1
10016038:	4b12      	ldr	r3, [pc, #72]	; (10016084 <__aeabi_dmul+0x1dc>)
1001603a:	2500      	movs	r5, #0
1001603c:	4690      	mov	r8, r2
1001603e:	e799      	b.n	10015f74 <__aeabi_dmul+0xcc>
10016040:	2500      	movs	r5, #0
10016042:	2300      	movs	r3, #0
10016044:	2201      	movs	r2, #1
10016046:	e76e      	b.n	10015f26 <__aeabi_dmul+0x7e>
10016048:	2203      	movs	r2, #3
1001604a:	e76c      	b.n	10015f26 <__aeabi_dmul+0x7e>
1001604c:	2300      	movs	r3, #0
1001604e:	469b      	mov	fp, r3
10016050:	4698      	mov	r8, r3
10016052:	3301      	adds	r3, #1
10016054:	2704      	movs	r7, #4
10016056:	9301      	str	r3, [sp, #4]
10016058:	e74c      	b.n	10015ef4 <__aeabi_dmul+0x4c>
1001605a:	2303      	movs	r3, #3
1001605c:	270c      	movs	r7, #12
1001605e:	9301      	str	r3, [sp, #4]
10016060:	e748      	b.n	10015ef4 <__aeabi_dmul+0x4c>
10016062:	2300      	movs	r3, #0
10016064:	2580      	movs	r5, #128	; 0x80
10016066:	4698      	mov	r8, r3
10016068:	2400      	movs	r4, #0
1001606a:	032d      	lsls	r5, r5, #12
1001606c:	4b05      	ldr	r3, [pc, #20]	; (10016084 <__aeabi_dmul+0x1dc>)
1001606e:	e781      	b.n	10015f74 <__aeabi_dmul+0xcc>
10016070:	465d      	mov	r5, fp
10016072:	4643      	mov	r3, r8
10016074:	9a01      	ldr	r2, [sp, #4]
10016076:	e76f      	b.n	10015f58 <__aeabi_dmul+0xb0>
10016078:	465d      	mov	r5, fp
1001607a:	4643      	mov	r3, r8
1001607c:	0021      	movs	r1, r4
1001607e:	9a01      	ldr	r2, [sp, #4]
10016080:	e76a      	b.n	10015f58 <__aeabi_dmul+0xb0>
10016082:	46c0      	nop			; (mov r8, r8)
10016084:	000007ff 	.word	0x000007ff
10016088:	fffffc01 	.word	0xfffffc01
1001608c:	10017e10 	.word	0x10017e10
10016090:	800fffff 	.word	0x800fffff
10016094:	000003f3 	.word	0x000003f3
10016098:	4642      	mov	r2, r8
1001609a:	0c12      	lsrs	r2, r2, #16
1001609c:	4691      	mov	r9, r2
1001609e:	0c1a      	lsrs	r2, r3, #16
100160a0:	4694      	mov	ip, r2
100160a2:	4642      	mov	r2, r8
100160a4:	0417      	lsls	r7, r2, #16
100160a6:	464a      	mov	r2, r9
100160a8:	041b      	lsls	r3, r3, #16
100160aa:	0c1b      	lsrs	r3, r3, #16
100160ac:	435a      	muls	r2, r3
100160ae:	4660      	mov	r0, ip
100160b0:	4690      	mov	r8, r2
100160b2:	464a      	mov	r2, r9
100160b4:	4342      	muls	r2, r0
100160b6:	0010      	movs	r0, r2
100160b8:	9203      	str	r2, [sp, #12]
100160ba:	4662      	mov	r2, ip
100160bc:	001c      	movs	r4, r3
100160be:	0c3f      	lsrs	r7, r7, #16
100160c0:	437a      	muls	r2, r7
100160c2:	437c      	muls	r4, r7
100160c4:	4442      	add	r2, r8
100160c6:	9201      	str	r2, [sp, #4]
100160c8:	0c22      	lsrs	r2, r4, #16
100160ca:	4692      	mov	sl, r2
100160cc:	9a01      	ldr	r2, [sp, #4]
100160ce:	4452      	add	r2, sl
100160d0:	4590      	cmp	r8, r2
100160d2:	d906      	bls.n	100160e2 <__aeabi_dmul+0x23a>
100160d4:	4682      	mov	sl, r0
100160d6:	2080      	movs	r0, #128	; 0x80
100160d8:	0240      	lsls	r0, r0, #9
100160da:	4680      	mov	r8, r0
100160dc:	44c2      	add	sl, r8
100160de:	4650      	mov	r0, sl
100160e0:	9003      	str	r0, [sp, #12]
100160e2:	0c10      	lsrs	r0, r2, #16
100160e4:	9004      	str	r0, [sp, #16]
100160e6:	4648      	mov	r0, r9
100160e8:	0424      	lsls	r4, r4, #16
100160ea:	0c24      	lsrs	r4, r4, #16
100160ec:	0412      	lsls	r2, r2, #16
100160ee:	1912      	adds	r2, r2, r4
100160f0:	9205      	str	r2, [sp, #20]
100160f2:	0c2a      	lsrs	r2, r5, #16
100160f4:	042d      	lsls	r5, r5, #16
100160f6:	0c2d      	lsrs	r5, r5, #16
100160f8:	4368      	muls	r0, r5
100160fa:	002c      	movs	r4, r5
100160fc:	4682      	mov	sl, r0
100160fe:	4648      	mov	r0, r9
10016100:	437c      	muls	r4, r7
10016102:	4350      	muls	r0, r2
10016104:	4681      	mov	r9, r0
10016106:	0c20      	lsrs	r0, r4, #16
10016108:	4680      	mov	r8, r0
1001610a:	4357      	muls	r7, r2
1001610c:	4457      	add	r7, sl
1001610e:	4447      	add	r7, r8
10016110:	45ba      	cmp	sl, r7
10016112:	d903      	bls.n	1001611c <__aeabi_dmul+0x274>
10016114:	2080      	movs	r0, #128	; 0x80
10016116:	0240      	lsls	r0, r0, #9
10016118:	4680      	mov	r8, r0
1001611a:	44c1      	add	r9, r8
1001611c:	0c38      	lsrs	r0, r7, #16
1001611e:	043f      	lsls	r7, r7, #16
10016120:	46b8      	mov	r8, r7
10016122:	4448      	add	r0, r9
10016124:	0424      	lsls	r4, r4, #16
10016126:	0c24      	lsrs	r4, r4, #16
10016128:	9001      	str	r0, [sp, #4]
1001612a:	9804      	ldr	r0, [sp, #16]
1001612c:	44a0      	add	r8, r4
1001612e:	4440      	add	r0, r8
10016130:	9004      	str	r0, [sp, #16]
10016132:	4658      	mov	r0, fp
10016134:	0c00      	lsrs	r0, r0, #16
10016136:	4681      	mov	r9, r0
10016138:	4658      	mov	r0, fp
1001613a:	0404      	lsls	r4, r0, #16
1001613c:	0c20      	lsrs	r0, r4, #16
1001613e:	4682      	mov	sl, r0
10016140:	0007      	movs	r7, r0
10016142:	4648      	mov	r0, r9
10016144:	435f      	muls	r7, r3
10016146:	464c      	mov	r4, r9
10016148:	4343      	muls	r3, r0
1001614a:	4660      	mov	r0, ip
1001614c:	4360      	muls	r0, r4
1001614e:	4664      	mov	r4, ip
10016150:	4683      	mov	fp, r0
10016152:	4650      	mov	r0, sl
10016154:	4344      	muls	r4, r0
10016156:	0c38      	lsrs	r0, r7, #16
10016158:	4684      	mov	ip, r0
1001615a:	18e4      	adds	r4, r4, r3
1001615c:	4464      	add	r4, ip
1001615e:	42a3      	cmp	r3, r4
10016160:	d903      	bls.n	1001616a <__aeabi_dmul+0x2c2>
10016162:	2380      	movs	r3, #128	; 0x80
10016164:	025b      	lsls	r3, r3, #9
10016166:	469c      	mov	ip, r3
10016168:	44e3      	add	fp, ip
1001616a:	4648      	mov	r0, r9
1001616c:	043f      	lsls	r7, r7, #16
1001616e:	0c23      	lsrs	r3, r4, #16
10016170:	0c3f      	lsrs	r7, r7, #16
10016172:	0424      	lsls	r4, r4, #16
10016174:	19e4      	adds	r4, r4, r7
10016176:	4657      	mov	r7, sl
10016178:	4368      	muls	r0, r5
1001617a:	436f      	muls	r7, r5
1001617c:	4684      	mov	ip, r0
1001617e:	464d      	mov	r5, r9
10016180:	4650      	mov	r0, sl
10016182:	4355      	muls	r5, r2
10016184:	4342      	muls	r2, r0
10016186:	0c38      	lsrs	r0, r7, #16
10016188:	4681      	mov	r9, r0
1001618a:	4462      	add	r2, ip
1001618c:	444a      	add	r2, r9
1001618e:	445b      	add	r3, fp
10016190:	4594      	cmp	ip, r2
10016192:	d903      	bls.n	1001619c <__aeabi_dmul+0x2f4>
10016194:	2080      	movs	r0, #128	; 0x80
10016196:	0240      	lsls	r0, r0, #9
10016198:	4684      	mov	ip, r0
1001619a:	4465      	add	r5, ip
1001619c:	9803      	ldr	r0, [sp, #12]
1001619e:	043f      	lsls	r7, r7, #16
100161a0:	4683      	mov	fp, r0
100161a2:	9804      	ldr	r0, [sp, #16]
100161a4:	0c3f      	lsrs	r7, r7, #16
100161a6:	4684      	mov	ip, r0
100161a8:	44e3      	add	fp, ip
100161aa:	45c3      	cmp	fp, r8
100161ac:	4180      	sbcs	r0, r0
100161ae:	4240      	negs	r0, r0
100161b0:	4682      	mov	sl, r0
100161b2:	0410      	lsls	r0, r2, #16
100161b4:	4684      	mov	ip, r0
100161b6:	9801      	ldr	r0, [sp, #4]
100161b8:	4467      	add	r7, ip
100161ba:	4684      	mov	ip, r0
100161bc:	4467      	add	r7, ip
100161be:	44a3      	add	fp, r4
100161c0:	46bc      	mov	ip, r7
100161c2:	45a3      	cmp	fp, r4
100161c4:	41a4      	sbcs	r4, r4
100161c6:	4699      	mov	r9, r3
100161c8:	44d4      	add	ip, sl
100161ca:	4264      	negs	r4, r4
100161cc:	4287      	cmp	r7, r0
100161ce:	41bf      	sbcs	r7, r7
100161d0:	45d4      	cmp	ip, sl
100161d2:	4180      	sbcs	r0, r0
100161d4:	44e1      	add	r9, ip
100161d6:	46a0      	mov	r8, r4
100161d8:	4599      	cmp	r9, r3
100161da:	419b      	sbcs	r3, r3
100161dc:	427f      	negs	r7, r7
100161de:	4240      	negs	r0, r0
100161e0:	44c8      	add	r8, r9
100161e2:	4307      	orrs	r7, r0
100161e4:	0c12      	lsrs	r2, r2, #16
100161e6:	18ba      	adds	r2, r7, r2
100161e8:	45a0      	cmp	r8, r4
100161ea:	41a4      	sbcs	r4, r4
100161ec:	425f      	negs	r7, r3
100161ee:	003b      	movs	r3, r7
100161f0:	4264      	negs	r4, r4
100161f2:	4323      	orrs	r3, r4
100161f4:	18d7      	adds	r7, r2, r3
100161f6:	4643      	mov	r3, r8
100161f8:	197d      	adds	r5, r7, r5
100161fa:	0ddb      	lsrs	r3, r3, #23
100161fc:	026d      	lsls	r5, r5, #9
100161fe:	431d      	orrs	r5, r3
10016200:	465b      	mov	r3, fp
10016202:	025a      	lsls	r2, r3, #9
10016204:	9b05      	ldr	r3, [sp, #20]
10016206:	431a      	orrs	r2, r3
10016208:	1e53      	subs	r3, r2, #1
1001620a:	419a      	sbcs	r2, r3
1001620c:	465b      	mov	r3, fp
1001620e:	0ddb      	lsrs	r3, r3, #23
10016210:	431a      	orrs	r2, r3
10016212:	4643      	mov	r3, r8
10016214:	025b      	lsls	r3, r3, #9
10016216:	4313      	orrs	r3, r2
10016218:	01ea      	lsls	r2, r5, #7
1001621a:	d507      	bpl.n	1001622c <__aeabi_dmul+0x384>
1001621c:	2201      	movs	r2, #1
1001621e:	085c      	lsrs	r4, r3, #1
10016220:	4013      	ands	r3, r2
10016222:	4323      	orrs	r3, r4
10016224:	07ea      	lsls	r2, r5, #31
10016226:	9e02      	ldr	r6, [sp, #8]
10016228:	4313      	orrs	r3, r2
1001622a:	086d      	lsrs	r5, r5, #1
1001622c:	4a57      	ldr	r2, [pc, #348]	; (1001638c <__aeabi_dmul+0x4e4>)
1001622e:	18b2      	adds	r2, r6, r2
10016230:	2a00      	cmp	r2, #0
10016232:	dd4b      	ble.n	100162cc <__aeabi_dmul+0x424>
10016234:	0758      	lsls	r0, r3, #29
10016236:	d009      	beq.n	1001624c <__aeabi_dmul+0x3a4>
10016238:	200f      	movs	r0, #15
1001623a:	4018      	ands	r0, r3
1001623c:	2804      	cmp	r0, #4
1001623e:	d005      	beq.n	1001624c <__aeabi_dmul+0x3a4>
10016240:	1d18      	adds	r0, r3, #4
10016242:	4298      	cmp	r0, r3
10016244:	419b      	sbcs	r3, r3
10016246:	425b      	negs	r3, r3
10016248:	18ed      	adds	r5, r5, r3
1001624a:	0003      	movs	r3, r0
1001624c:	01e8      	lsls	r0, r5, #7
1001624e:	d504      	bpl.n	1001625a <__aeabi_dmul+0x3b2>
10016250:	4a4f      	ldr	r2, [pc, #316]	; (10016390 <__aeabi_dmul+0x4e8>)
10016252:	4015      	ands	r5, r2
10016254:	2280      	movs	r2, #128	; 0x80
10016256:	00d2      	lsls	r2, r2, #3
10016258:	18b2      	adds	r2, r6, r2
1001625a:	484e      	ldr	r0, [pc, #312]	; (10016394 <__aeabi_dmul+0x4ec>)
1001625c:	4282      	cmp	r2, r0
1001625e:	dd00      	ble.n	10016262 <__aeabi_dmul+0x3ba>
10016260:	e6e7      	b.n	10016032 <__aeabi_dmul+0x18a>
10016262:	2401      	movs	r4, #1
10016264:	08db      	lsrs	r3, r3, #3
10016266:	0768      	lsls	r0, r5, #29
10016268:	4318      	orrs	r0, r3
1001626a:	026d      	lsls	r5, r5, #9
1001626c:	0553      	lsls	r3, r2, #21
1001626e:	4680      	mov	r8, r0
10016270:	0b2d      	lsrs	r5, r5, #12
10016272:	0d5b      	lsrs	r3, r3, #21
10016274:	400c      	ands	r4, r1
10016276:	e67d      	b.n	10015f74 <__aeabi_dmul+0xcc>
10016278:	2280      	movs	r2, #128	; 0x80
1001627a:	4659      	mov	r1, fp
1001627c:	0312      	lsls	r2, r2, #12
1001627e:	4211      	tst	r1, r2
10016280:	d008      	beq.n	10016294 <__aeabi_dmul+0x3ec>
10016282:	4215      	tst	r5, r2
10016284:	d106      	bne.n	10016294 <__aeabi_dmul+0x3ec>
10016286:	4315      	orrs	r5, r2
10016288:	032d      	lsls	r5, r5, #12
1001628a:	4698      	mov	r8, r3
1001628c:	0b2d      	lsrs	r5, r5, #12
1001628e:	464c      	mov	r4, r9
10016290:	4b41      	ldr	r3, [pc, #260]	; (10016398 <__aeabi_dmul+0x4f0>)
10016292:	e66f      	b.n	10015f74 <__aeabi_dmul+0xcc>
10016294:	465d      	mov	r5, fp
10016296:	4315      	orrs	r5, r2
10016298:	032d      	lsls	r5, r5, #12
1001629a:	0b2d      	lsrs	r5, r5, #12
1001629c:	4b3e      	ldr	r3, [pc, #248]	; (10016398 <__aeabi_dmul+0x4f0>)
1001629e:	e669      	b.n	10015f74 <__aeabi_dmul+0xcc>
100162a0:	0003      	movs	r3, r0
100162a2:	4655      	mov	r5, sl
100162a4:	3b28      	subs	r3, #40	; 0x28
100162a6:	409d      	lsls	r5, r3
100162a8:	2300      	movs	r3, #0
100162aa:	e6bc      	b.n	10016026 <__aeabi_dmul+0x17e>
100162ac:	4650      	mov	r0, sl
100162ae:	f000 fd79 	bl	10016da4 <__clzsi2>
100162b2:	3020      	adds	r0, #32
100162b4:	e6a8      	b.n	10016008 <__aeabi_dmul+0x160>
100162b6:	0003      	movs	r3, r0
100162b8:	3b28      	subs	r3, #40	; 0x28
100162ba:	409f      	lsls	r7, r3
100162bc:	2300      	movs	r3, #0
100162be:	46bb      	mov	fp, r7
100162c0:	4698      	mov	r8, r3
100162c2:	e689      	b.n	10015fd8 <__aeabi_dmul+0x130>
100162c4:	f000 fd6e 	bl	10016da4 <__clzsi2>
100162c8:	3020      	adds	r0, #32
100162ca:	e673      	b.n	10015fb4 <__aeabi_dmul+0x10c>
100162cc:	2401      	movs	r4, #1
100162ce:	1aa6      	subs	r6, r4, r2
100162d0:	2e38      	cmp	r6, #56	; 0x38
100162d2:	dd07      	ble.n	100162e4 <__aeabi_dmul+0x43c>
100162d4:	2200      	movs	r2, #0
100162d6:	400c      	ands	r4, r1
100162d8:	2300      	movs	r3, #0
100162da:	2500      	movs	r5, #0
100162dc:	4690      	mov	r8, r2
100162de:	e649      	b.n	10015f74 <__aeabi_dmul+0xcc>
100162e0:	9e02      	ldr	r6, [sp, #8]
100162e2:	e7a3      	b.n	1001622c <__aeabi_dmul+0x384>
100162e4:	2e1f      	cmp	r6, #31
100162e6:	dc20      	bgt.n	1001632a <__aeabi_dmul+0x482>
100162e8:	2220      	movs	r2, #32
100162ea:	002c      	movs	r4, r5
100162ec:	0018      	movs	r0, r3
100162ee:	1b92      	subs	r2, r2, r6
100162f0:	40f0      	lsrs	r0, r6
100162f2:	4094      	lsls	r4, r2
100162f4:	4093      	lsls	r3, r2
100162f6:	4304      	orrs	r4, r0
100162f8:	1e58      	subs	r0, r3, #1
100162fa:	4183      	sbcs	r3, r0
100162fc:	431c      	orrs	r4, r3
100162fe:	40f5      	lsrs	r5, r6
10016300:	0763      	lsls	r3, r4, #29
10016302:	d009      	beq.n	10016318 <__aeabi_dmul+0x470>
10016304:	230f      	movs	r3, #15
10016306:	4023      	ands	r3, r4
10016308:	2b04      	cmp	r3, #4
1001630a:	d005      	beq.n	10016318 <__aeabi_dmul+0x470>
1001630c:	0023      	movs	r3, r4
1001630e:	1d1c      	adds	r4, r3, #4
10016310:	429c      	cmp	r4, r3
10016312:	4192      	sbcs	r2, r2
10016314:	4252      	negs	r2, r2
10016316:	18ad      	adds	r5, r5, r2
10016318:	022b      	lsls	r3, r5, #8
1001631a:	d51f      	bpl.n	1001635c <__aeabi_dmul+0x4b4>
1001631c:	2401      	movs	r4, #1
1001631e:	2200      	movs	r2, #0
10016320:	400c      	ands	r4, r1
10016322:	2301      	movs	r3, #1
10016324:	2500      	movs	r5, #0
10016326:	4690      	mov	r8, r2
10016328:	e624      	b.n	10015f74 <__aeabi_dmul+0xcc>
1001632a:	201f      	movs	r0, #31
1001632c:	002c      	movs	r4, r5
1001632e:	4240      	negs	r0, r0
10016330:	1a82      	subs	r2, r0, r2
10016332:	40d4      	lsrs	r4, r2
10016334:	2e20      	cmp	r6, #32
10016336:	d01c      	beq.n	10016372 <__aeabi_dmul+0x4ca>
10016338:	2240      	movs	r2, #64	; 0x40
1001633a:	1b96      	subs	r6, r2, r6
1001633c:	40b5      	lsls	r5, r6
1001633e:	432b      	orrs	r3, r5
10016340:	1e58      	subs	r0, r3, #1
10016342:	4183      	sbcs	r3, r0
10016344:	2007      	movs	r0, #7
10016346:	4323      	orrs	r3, r4
10016348:	4018      	ands	r0, r3
1001634a:	2500      	movs	r5, #0
1001634c:	2800      	cmp	r0, #0
1001634e:	d009      	beq.n	10016364 <__aeabi_dmul+0x4bc>
10016350:	220f      	movs	r2, #15
10016352:	2500      	movs	r5, #0
10016354:	401a      	ands	r2, r3
10016356:	001c      	movs	r4, r3
10016358:	2a04      	cmp	r2, #4
1001635a:	d1d8      	bne.n	1001630e <__aeabi_dmul+0x466>
1001635c:	0023      	movs	r3, r4
1001635e:	0768      	lsls	r0, r5, #29
10016360:	026d      	lsls	r5, r5, #9
10016362:	0b2d      	lsrs	r5, r5, #12
10016364:	2401      	movs	r4, #1
10016366:	08db      	lsrs	r3, r3, #3
10016368:	4303      	orrs	r3, r0
1001636a:	4698      	mov	r8, r3
1001636c:	400c      	ands	r4, r1
1001636e:	2300      	movs	r3, #0
10016370:	e600      	b.n	10015f74 <__aeabi_dmul+0xcc>
10016372:	2500      	movs	r5, #0
10016374:	e7e3      	b.n	1001633e <__aeabi_dmul+0x496>
10016376:	2280      	movs	r2, #128	; 0x80
10016378:	2401      	movs	r4, #1
1001637a:	0312      	lsls	r2, r2, #12
1001637c:	4315      	orrs	r5, r2
1001637e:	032d      	lsls	r5, r5, #12
10016380:	4698      	mov	r8, r3
10016382:	0b2d      	lsrs	r5, r5, #12
10016384:	400c      	ands	r4, r1
10016386:	4b04      	ldr	r3, [pc, #16]	; (10016398 <__aeabi_dmul+0x4f0>)
10016388:	e5f4      	b.n	10015f74 <__aeabi_dmul+0xcc>
1001638a:	46c0      	nop			; (mov r8, r8)
1001638c:	000003ff 	.word	0x000003ff
10016390:	feffffff 	.word	0xfeffffff
10016394:	000007fe 	.word	0x000007fe
10016398:	000007ff 	.word	0x000007ff

1001639c <__aeabi_dsub>:
1001639c:	b5f0      	push	{r4, r5, r6, r7, lr}
1001639e:	4657      	mov	r7, sl
100163a0:	464e      	mov	r6, r9
100163a2:	4645      	mov	r5, r8
100163a4:	b4e0      	push	{r5, r6, r7}
100163a6:	000e      	movs	r6, r1
100163a8:	0011      	movs	r1, r2
100163aa:	0ff2      	lsrs	r2, r6, #31
100163ac:	4692      	mov	sl, r2
100163ae:	00c5      	lsls	r5, r0, #3
100163b0:	0f42      	lsrs	r2, r0, #29
100163b2:	0318      	lsls	r0, r3, #12
100163b4:	0337      	lsls	r7, r6, #12
100163b6:	0074      	lsls	r4, r6, #1
100163b8:	0a40      	lsrs	r0, r0, #9
100163ba:	0f4e      	lsrs	r6, r1, #29
100163bc:	0a7f      	lsrs	r7, r7, #9
100163be:	4330      	orrs	r0, r6
100163c0:	4ecf      	ldr	r6, [pc, #828]	; (10016700 <__aeabi_dsub+0x364>)
100163c2:	4317      	orrs	r7, r2
100163c4:	005a      	lsls	r2, r3, #1
100163c6:	0d64      	lsrs	r4, r4, #21
100163c8:	0d52      	lsrs	r2, r2, #21
100163ca:	0fdb      	lsrs	r3, r3, #31
100163cc:	00c9      	lsls	r1, r1, #3
100163ce:	42b2      	cmp	r2, r6
100163d0:	d100      	bne.n	100163d4 <__aeabi_dsub+0x38>
100163d2:	e0e5      	b.n	100165a0 <__aeabi_dsub+0x204>
100163d4:	2601      	movs	r6, #1
100163d6:	4073      	eors	r3, r6
100163d8:	1aa6      	subs	r6, r4, r2
100163da:	46b4      	mov	ip, r6
100163dc:	4553      	cmp	r3, sl
100163de:	d100      	bne.n	100163e2 <__aeabi_dsub+0x46>
100163e0:	e0af      	b.n	10016542 <__aeabi_dsub+0x1a6>
100163e2:	2e00      	cmp	r6, #0
100163e4:	dc00      	bgt.n	100163e8 <__aeabi_dsub+0x4c>
100163e6:	e10d      	b.n	10016604 <__aeabi_dsub+0x268>
100163e8:	2a00      	cmp	r2, #0
100163ea:	d13a      	bne.n	10016462 <__aeabi_dsub+0xc6>
100163ec:	0003      	movs	r3, r0
100163ee:	430b      	orrs	r3, r1
100163f0:	d000      	beq.n	100163f4 <__aeabi_dsub+0x58>
100163f2:	e0e4      	b.n	100165be <__aeabi_dsub+0x222>
100163f4:	076b      	lsls	r3, r5, #29
100163f6:	d009      	beq.n	1001640c <__aeabi_dsub+0x70>
100163f8:	230f      	movs	r3, #15
100163fa:	402b      	ands	r3, r5
100163fc:	2b04      	cmp	r3, #4
100163fe:	d005      	beq.n	1001640c <__aeabi_dsub+0x70>
10016400:	1d2b      	adds	r3, r5, #4
10016402:	42ab      	cmp	r3, r5
10016404:	41ad      	sbcs	r5, r5
10016406:	426d      	negs	r5, r5
10016408:	197f      	adds	r7, r7, r5
1001640a:	001d      	movs	r5, r3
1001640c:	023b      	lsls	r3, r7, #8
1001640e:	d400      	bmi.n	10016412 <__aeabi_dsub+0x76>
10016410:	e088      	b.n	10016524 <__aeabi_dsub+0x188>
10016412:	4bbb      	ldr	r3, [pc, #748]	; (10016700 <__aeabi_dsub+0x364>)
10016414:	3401      	adds	r4, #1
10016416:	429c      	cmp	r4, r3
10016418:	d100      	bne.n	1001641c <__aeabi_dsub+0x80>
1001641a:	e110      	b.n	1001663e <__aeabi_dsub+0x2a2>
1001641c:	003a      	movs	r2, r7
1001641e:	4bb9      	ldr	r3, [pc, #740]	; (10016704 <__aeabi_dsub+0x368>)
10016420:	4651      	mov	r1, sl
10016422:	401a      	ands	r2, r3
10016424:	2301      	movs	r3, #1
10016426:	0750      	lsls	r0, r2, #29
10016428:	08ed      	lsrs	r5, r5, #3
1001642a:	0252      	lsls	r2, r2, #9
1001642c:	0564      	lsls	r4, r4, #21
1001642e:	4305      	orrs	r5, r0
10016430:	0b12      	lsrs	r2, r2, #12
10016432:	0d64      	lsrs	r4, r4, #21
10016434:	400b      	ands	r3, r1
10016436:	2100      	movs	r1, #0
10016438:	0028      	movs	r0, r5
1001643a:	0312      	lsls	r2, r2, #12
1001643c:	0d0d      	lsrs	r5, r1, #20
1001643e:	0b12      	lsrs	r2, r2, #12
10016440:	0564      	lsls	r4, r4, #21
10016442:	052d      	lsls	r5, r5, #20
10016444:	4315      	orrs	r5, r2
10016446:	0862      	lsrs	r2, r4, #1
10016448:	4caf      	ldr	r4, [pc, #700]	; (10016708 <__aeabi_dsub+0x36c>)
1001644a:	07db      	lsls	r3, r3, #31
1001644c:	402c      	ands	r4, r5
1001644e:	4314      	orrs	r4, r2
10016450:	0064      	lsls	r4, r4, #1
10016452:	0864      	lsrs	r4, r4, #1
10016454:	431c      	orrs	r4, r3
10016456:	0021      	movs	r1, r4
10016458:	bc1c      	pop	{r2, r3, r4}
1001645a:	4690      	mov	r8, r2
1001645c:	4699      	mov	r9, r3
1001645e:	46a2      	mov	sl, r4
10016460:	bdf0      	pop	{r4, r5, r6, r7, pc}
10016462:	4ba7      	ldr	r3, [pc, #668]	; (10016700 <__aeabi_dsub+0x364>)
10016464:	429c      	cmp	r4, r3
10016466:	d0c5      	beq.n	100163f4 <__aeabi_dsub+0x58>
10016468:	2380      	movs	r3, #128	; 0x80
1001646a:	041b      	lsls	r3, r3, #16
1001646c:	4318      	orrs	r0, r3
1001646e:	4663      	mov	r3, ip
10016470:	2b38      	cmp	r3, #56	; 0x38
10016472:	dd00      	ble.n	10016476 <__aeabi_dsub+0xda>
10016474:	e0fd      	b.n	10016672 <__aeabi_dsub+0x2d6>
10016476:	2b1f      	cmp	r3, #31
10016478:	dd00      	ble.n	1001647c <__aeabi_dsub+0xe0>
1001647a:	e130      	b.n	100166de <__aeabi_dsub+0x342>
1001647c:	4662      	mov	r2, ip
1001647e:	2320      	movs	r3, #32
10016480:	1a9b      	subs	r3, r3, r2
10016482:	0002      	movs	r2, r0
10016484:	409a      	lsls	r2, r3
10016486:	4666      	mov	r6, ip
10016488:	4690      	mov	r8, r2
1001648a:	000a      	movs	r2, r1
1001648c:	4099      	lsls	r1, r3
1001648e:	40f2      	lsrs	r2, r6
10016490:	4646      	mov	r6, r8
10016492:	1e4b      	subs	r3, r1, #1
10016494:	4199      	sbcs	r1, r3
10016496:	4332      	orrs	r2, r6
10016498:	4311      	orrs	r1, r2
1001649a:	4663      	mov	r3, ip
1001649c:	0002      	movs	r2, r0
1001649e:	40da      	lsrs	r2, r3
100164a0:	1a69      	subs	r1, r5, r1
100164a2:	428d      	cmp	r5, r1
100164a4:	419b      	sbcs	r3, r3
100164a6:	000d      	movs	r5, r1
100164a8:	1aba      	subs	r2, r7, r2
100164aa:	425b      	negs	r3, r3
100164ac:	1ad7      	subs	r7, r2, r3
100164ae:	023b      	lsls	r3, r7, #8
100164b0:	d535      	bpl.n	1001651e <__aeabi_dsub+0x182>
100164b2:	027a      	lsls	r2, r7, #9
100164b4:	0a53      	lsrs	r3, r2, #9
100164b6:	4698      	mov	r8, r3
100164b8:	4643      	mov	r3, r8
100164ba:	2b00      	cmp	r3, #0
100164bc:	d100      	bne.n	100164c0 <__aeabi_dsub+0x124>
100164be:	e0c4      	b.n	1001664a <__aeabi_dsub+0x2ae>
100164c0:	4640      	mov	r0, r8
100164c2:	f000 fc6f 	bl	10016da4 <__clzsi2>
100164c6:	0003      	movs	r3, r0
100164c8:	3b08      	subs	r3, #8
100164ca:	2b1f      	cmp	r3, #31
100164cc:	dd00      	ble.n	100164d0 <__aeabi_dsub+0x134>
100164ce:	e0c5      	b.n	1001665c <__aeabi_dsub+0x2c0>
100164d0:	2220      	movs	r2, #32
100164d2:	0029      	movs	r1, r5
100164d4:	1ad2      	subs	r2, r2, r3
100164d6:	4647      	mov	r7, r8
100164d8:	40d1      	lsrs	r1, r2
100164da:	409f      	lsls	r7, r3
100164dc:	000a      	movs	r2, r1
100164de:	409d      	lsls	r5, r3
100164e0:	433a      	orrs	r2, r7
100164e2:	429c      	cmp	r4, r3
100164e4:	dd00      	ble.n	100164e8 <__aeabi_dsub+0x14c>
100164e6:	e0c0      	b.n	1001666a <__aeabi_dsub+0x2ce>
100164e8:	1b1c      	subs	r4, r3, r4
100164ea:	1c63      	adds	r3, r4, #1
100164ec:	2b1f      	cmp	r3, #31
100164ee:	dd00      	ble.n	100164f2 <__aeabi_dsub+0x156>
100164f0:	e0e4      	b.n	100166bc <__aeabi_dsub+0x320>
100164f2:	2120      	movs	r1, #32
100164f4:	0014      	movs	r4, r2
100164f6:	0028      	movs	r0, r5
100164f8:	1ac9      	subs	r1, r1, r3
100164fa:	40d8      	lsrs	r0, r3
100164fc:	408c      	lsls	r4, r1
100164fe:	408d      	lsls	r5, r1
10016500:	4304      	orrs	r4, r0
10016502:	40da      	lsrs	r2, r3
10016504:	1e68      	subs	r0, r5, #1
10016506:	4185      	sbcs	r5, r0
10016508:	0017      	movs	r7, r2
1001650a:	4325      	orrs	r5, r4
1001650c:	2400      	movs	r4, #0
1001650e:	e771      	b.n	100163f4 <__aeabi_dsub+0x58>
10016510:	4642      	mov	r2, r8
10016512:	4663      	mov	r3, ip
10016514:	431a      	orrs	r2, r3
10016516:	d100      	bne.n	1001651a <__aeabi_dsub+0x17e>
10016518:	e24c      	b.n	100169b4 <__aeabi_dsub+0x618>
1001651a:	4667      	mov	r7, ip
1001651c:	4645      	mov	r5, r8
1001651e:	076b      	lsls	r3, r5, #29
10016520:	d000      	beq.n	10016524 <__aeabi_dsub+0x188>
10016522:	e769      	b.n	100163f8 <__aeabi_dsub+0x5c>
10016524:	2301      	movs	r3, #1
10016526:	4651      	mov	r1, sl
10016528:	0778      	lsls	r0, r7, #29
1001652a:	08ed      	lsrs	r5, r5, #3
1001652c:	08fa      	lsrs	r2, r7, #3
1001652e:	400b      	ands	r3, r1
10016530:	4305      	orrs	r5, r0
10016532:	4973      	ldr	r1, [pc, #460]	; (10016700 <__aeabi_dsub+0x364>)
10016534:	428c      	cmp	r4, r1
10016536:	d038      	beq.n	100165aa <__aeabi_dsub+0x20e>
10016538:	0312      	lsls	r2, r2, #12
1001653a:	0564      	lsls	r4, r4, #21
1001653c:	0b12      	lsrs	r2, r2, #12
1001653e:	0d64      	lsrs	r4, r4, #21
10016540:	e779      	b.n	10016436 <__aeabi_dsub+0x9a>
10016542:	2e00      	cmp	r6, #0
10016544:	dc00      	bgt.n	10016548 <__aeabi_dsub+0x1ac>
10016546:	e09a      	b.n	1001667e <__aeabi_dsub+0x2e2>
10016548:	2a00      	cmp	r2, #0
1001654a:	d047      	beq.n	100165dc <__aeabi_dsub+0x240>
1001654c:	4a6c      	ldr	r2, [pc, #432]	; (10016700 <__aeabi_dsub+0x364>)
1001654e:	4294      	cmp	r4, r2
10016550:	d100      	bne.n	10016554 <__aeabi_dsub+0x1b8>
10016552:	e74f      	b.n	100163f4 <__aeabi_dsub+0x58>
10016554:	2280      	movs	r2, #128	; 0x80
10016556:	0412      	lsls	r2, r2, #16
10016558:	4310      	orrs	r0, r2
1001655a:	4662      	mov	r2, ip
1001655c:	2a38      	cmp	r2, #56	; 0x38
1001655e:	dc00      	bgt.n	10016562 <__aeabi_dsub+0x1c6>
10016560:	e108      	b.n	10016774 <__aeabi_dsub+0x3d8>
10016562:	4301      	orrs	r1, r0
10016564:	1e48      	subs	r0, r1, #1
10016566:	4181      	sbcs	r1, r0
10016568:	2200      	movs	r2, #0
1001656a:	b2c9      	uxtb	r1, r1
1001656c:	1949      	adds	r1, r1, r5
1001656e:	19d2      	adds	r2, r2, r7
10016570:	42a9      	cmp	r1, r5
10016572:	41bf      	sbcs	r7, r7
10016574:	000d      	movs	r5, r1
10016576:	427f      	negs	r7, r7
10016578:	18bf      	adds	r7, r7, r2
1001657a:	023a      	lsls	r2, r7, #8
1001657c:	d400      	bmi.n	10016580 <__aeabi_dsub+0x1e4>
1001657e:	e142      	b.n	10016806 <__aeabi_dsub+0x46a>
10016580:	4a5f      	ldr	r2, [pc, #380]	; (10016700 <__aeabi_dsub+0x364>)
10016582:	3401      	adds	r4, #1
10016584:	4294      	cmp	r4, r2
10016586:	d100      	bne.n	1001658a <__aeabi_dsub+0x1ee>
10016588:	e14e      	b.n	10016828 <__aeabi_dsub+0x48c>
1001658a:	2001      	movs	r0, #1
1001658c:	4a5d      	ldr	r2, [pc, #372]	; (10016704 <__aeabi_dsub+0x368>)
1001658e:	0869      	lsrs	r1, r5, #1
10016590:	403a      	ands	r2, r7
10016592:	4028      	ands	r0, r5
10016594:	4308      	orrs	r0, r1
10016596:	07d5      	lsls	r5, r2, #31
10016598:	4305      	orrs	r5, r0
1001659a:	0857      	lsrs	r7, r2, #1
1001659c:	469a      	mov	sl, r3
1001659e:	e729      	b.n	100163f4 <__aeabi_dsub+0x58>
100165a0:	0006      	movs	r6, r0
100165a2:	430e      	orrs	r6, r1
100165a4:	d000      	beq.n	100165a8 <__aeabi_dsub+0x20c>
100165a6:	e717      	b.n	100163d8 <__aeabi_dsub+0x3c>
100165a8:	e714      	b.n	100163d4 <__aeabi_dsub+0x38>
100165aa:	0029      	movs	r1, r5
100165ac:	4311      	orrs	r1, r2
100165ae:	d100      	bne.n	100165b2 <__aeabi_dsub+0x216>
100165b0:	e1f9      	b.n	100169a6 <__aeabi_dsub+0x60a>
100165b2:	2180      	movs	r1, #128	; 0x80
100165b4:	0309      	lsls	r1, r1, #12
100165b6:	430a      	orrs	r2, r1
100165b8:	0312      	lsls	r2, r2, #12
100165ba:	0b12      	lsrs	r2, r2, #12
100165bc:	e73b      	b.n	10016436 <__aeabi_dsub+0x9a>
100165be:	2301      	movs	r3, #1
100165c0:	425b      	negs	r3, r3
100165c2:	4698      	mov	r8, r3
100165c4:	44c4      	add	ip, r8
100165c6:	4663      	mov	r3, ip
100165c8:	2b00      	cmp	r3, #0
100165ca:	d172      	bne.n	100166b2 <__aeabi_dsub+0x316>
100165cc:	1a69      	subs	r1, r5, r1
100165ce:	428d      	cmp	r5, r1
100165d0:	419b      	sbcs	r3, r3
100165d2:	1a3f      	subs	r7, r7, r0
100165d4:	425b      	negs	r3, r3
100165d6:	1aff      	subs	r7, r7, r3
100165d8:	000d      	movs	r5, r1
100165da:	e768      	b.n	100164ae <__aeabi_dsub+0x112>
100165dc:	0002      	movs	r2, r0
100165de:	430a      	orrs	r2, r1
100165e0:	d100      	bne.n	100165e4 <__aeabi_dsub+0x248>
100165e2:	e707      	b.n	100163f4 <__aeabi_dsub+0x58>
100165e4:	2201      	movs	r2, #1
100165e6:	4252      	negs	r2, r2
100165e8:	4690      	mov	r8, r2
100165ea:	44c4      	add	ip, r8
100165ec:	4662      	mov	r2, ip
100165ee:	2a00      	cmp	r2, #0
100165f0:	d000      	beq.n	100165f4 <__aeabi_dsub+0x258>
100165f2:	e0e6      	b.n	100167c2 <__aeabi_dsub+0x426>
100165f4:	1869      	adds	r1, r5, r1
100165f6:	42a9      	cmp	r1, r5
100165f8:	41b6      	sbcs	r6, r6
100165fa:	183f      	adds	r7, r7, r0
100165fc:	4276      	negs	r6, r6
100165fe:	19f7      	adds	r7, r6, r7
10016600:	000d      	movs	r5, r1
10016602:	e7ba      	b.n	1001657a <__aeabi_dsub+0x1de>
10016604:	2e00      	cmp	r6, #0
10016606:	d000      	beq.n	1001660a <__aeabi_dsub+0x26e>
10016608:	e080      	b.n	1001670c <__aeabi_dsub+0x370>
1001660a:	1c62      	adds	r2, r4, #1
1001660c:	0552      	lsls	r2, r2, #21
1001660e:	0d52      	lsrs	r2, r2, #21
10016610:	2a01      	cmp	r2, #1
10016612:	dc00      	bgt.n	10016616 <__aeabi_dsub+0x27a>
10016614:	e0f9      	b.n	1001680a <__aeabi_dsub+0x46e>
10016616:	1a6a      	subs	r2, r5, r1
10016618:	4691      	mov	r9, r2
1001661a:	454d      	cmp	r5, r9
1001661c:	41b6      	sbcs	r6, r6
1001661e:	1a3a      	subs	r2, r7, r0
10016620:	4276      	negs	r6, r6
10016622:	1b92      	subs	r2, r2, r6
10016624:	4690      	mov	r8, r2
10016626:	0212      	lsls	r2, r2, #8
10016628:	d400      	bmi.n	1001662c <__aeabi_dsub+0x290>
1001662a:	e099      	b.n	10016760 <__aeabi_dsub+0x3c4>
1001662c:	1b4d      	subs	r5, r1, r5
1001662e:	42a9      	cmp	r1, r5
10016630:	4189      	sbcs	r1, r1
10016632:	1bc7      	subs	r7, r0, r7
10016634:	4249      	negs	r1, r1
10016636:	1a7a      	subs	r2, r7, r1
10016638:	4690      	mov	r8, r2
1001663a:	469a      	mov	sl, r3
1001663c:	e73c      	b.n	100164b8 <__aeabi_dsub+0x11c>
1001663e:	4652      	mov	r2, sl
10016640:	2301      	movs	r3, #1
10016642:	2500      	movs	r5, #0
10016644:	4013      	ands	r3, r2
10016646:	2200      	movs	r2, #0
10016648:	e6f5      	b.n	10016436 <__aeabi_dsub+0x9a>
1001664a:	0028      	movs	r0, r5
1001664c:	f000 fbaa 	bl	10016da4 <__clzsi2>
10016650:	3020      	adds	r0, #32
10016652:	0003      	movs	r3, r0
10016654:	3b08      	subs	r3, #8
10016656:	2b1f      	cmp	r3, #31
10016658:	dc00      	bgt.n	1001665c <__aeabi_dsub+0x2c0>
1001665a:	e739      	b.n	100164d0 <__aeabi_dsub+0x134>
1001665c:	002a      	movs	r2, r5
1001665e:	3828      	subs	r0, #40	; 0x28
10016660:	4082      	lsls	r2, r0
10016662:	2500      	movs	r5, #0
10016664:	429c      	cmp	r4, r3
10016666:	dc00      	bgt.n	1001666a <__aeabi_dsub+0x2ce>
10016668:	e73e      	b.n	100164e8 <__aeabi_dsub+0x14c>
1001666a:	4f26      	ldr	r7, [pc, #152]	; (10016704 <__aeabi_dsub+0x368>)
1001666c:	1ae4      	subs	r4, r4, r3
1001666e:	4017      	ands	r7, r2
10016670:	e6c0      	b.n	100163f4 <__aeabi_dsub+0x58>
10016672:	4301      	orrs	r1, r0
10016674:	1e48      	subs	r0, r1, #1
10016676:	4181      	sbcs	r1, r0
10016678:	2200      	movs	r2, #0
1001667a:	b2c9      	uxtb	r1, r1
1001667c:	e710      	b.n	100164a0 <__aeabi_dsub+0x104>
1001667e:	2e00      	cmp	r6, #0
10016680:	d000      	beq.n	10016684 <__aeabi_dsub+0x2e8>
10016682:	e0f1      	b.n	10016868 <__aeabi_dsub+0x4cc>
10016684:	1c62      	adds	r2, r4, #1
10016686:	4694      	mov	ip, r2
10016688:	0552      	lsls	r2, r2, #21
1001668a:	0d52      	lsrs	r2, r2, #21
1001668c:	2a01      	cmp	r2, #1
1001668e:	dc00      	bgt.n	10016692 <__aeabi_dsub+0x2f6>
10016690:	e0a0      	b.n	100167d4 <__aeabi_dsub+0x438>
10016692:	4a1b      	ldr	r2, [pc, #108]	; (10016700 <__aeabi_dsub+0x364>)
10016694:	4594      	cmp	ip, r2
10016696:	d100      	bne.n	1001669a <__aeabi_dsub+0x2fe>
10016698:	e0c5      	b.n	10016826 <__aeabi_dsub+0x48a>
1001669a:	1869      	adds	r1, r5, r1
1001669c:	42a9      	cmp	r1, r5
1001669e:	4192      	sbcs	r2, r2
100166a0:	183f      	adds	r7, r7, r0
100166a2:	4252      	negs	r2, r2
100166a4:	19d2      	adds	r2, r2, r7
100166a6:	0849      	lsrs	r1, r1, #1
100166a8:	07d5      	lsls	r5, r2, #31
100166aa:	430d      	orrs	r5, r1
100166ac:	0857      	lsrs	r7, r2, #1
100166ae:	4664      	mov	r4, ip
100166b0:	e6a0      	b.n	100163f4 <__aeabi_dsub+0x58>
100166b2:	4b13      	ldr	r3, [pc, #76]	; (10016700 <__aeabi_dsub+0x364>)
100166b4:	429c      	cmp	r4, r3
100166b6:	d000      	beq.n	100166ba <__aeabi_dsub+0x31e>
100166b8:	e6d9      	b.n	1001646e <__aeabi_dsub+0xd2>
100166ba:	e69b      	b.n	100163f4 <__aeabi_dsub+0x58>
100166bc:	0011      	movs	r1, r2
100166be:	3c1f      	subs	r4, #31
100166c0:	40e1      	lsrs	r1, r4
100166c2:	000c      	movs	r4, r1
100166c4:	2b20      	cmp	r3, #32
100166c6:	d100      	bne.n	100166ca <__aeabi_dsub+0x32e>
100166c8:	e080      	b.n	100167cc <__aeabi_dsub+0x430>
100166ca:	2140      	movs	r1, #64	; 0x40
100166cc:	1acb      	subs	r3, r1, r3
100166ce:	409a      	lsls	r2, r3
100166d0:	4315      	orrs	r5, r2
100166d2:	1e6a      	subs	r2, r5, #1
100166d4:	4195      	sbcs	r5, r2
100166d6:	2700      	movs	r7, #0
100166d8:	4325      	orrs	r5, r4
100166da:	2400      	movs	r4, #0
100166dc:	e71f      	b.n	1001651e <__aeabi_dsub+0x182>
100166de:	4663      	mov	r3, ip
100166e0:	0002      	movs	r2, r0
100166e2:	3b20      	subs	r3, #32
100166e4:	40da      	lsrs	r2, r3
100166e6:	4663      	mov	r3, ip
100166e8:	2b20      	cmp	r3, #32
100166ea:	d071      	beq.n	100167d0 <__aeabi_dsub+0x434>
100166ec:	2340      	movs	r3, #64	; 0x40
100166ee:	4666      	mov	r6, ip
100166f0:	1b9b      	subs	r3, r3, r6
100166f2:	4098      	lsls	r0, r3
100166f4:	4301      	orrs	r1, r0
100166f6:	1e48      	subs	r0, r1, #1
100166f8:	4181      	sbcs	r1, r0
100166fa:	4311      	orrs	r1, r2
100166fc:	2200      	movs	r2, #0
100166fe:	e6cf      	b.n	100164a0 <__aeabi_dsub+0x104>
10016700:	000007ff 	.word	0x000007ff
10016704:	ff7fffff 	.word	0xff7fffff
10016708:	800fffff 	.word	0x800fffff
1001670c:	2c00      	cmp	r4, #0
1001670e:	d048      	beq.n	100167a2 <__aeabi_dsub+0x406>
10016710:	4cca      	ldr	r4, [pc, #808]	; (10016a3c <__aeabi_dsub+0x6a0>)
10016712:	42a2      	cmp	r2, r4
10016714:	d100      	bne.n	10016718 <__aeabi_dsub+0x37c>
10016716:	e0a2      	b.n	1001685e <__aeabi_dsub+0x4c2>
10016718:	4274      	negs	r4, r6
1001671a:	46a1      	mov	r9, r4
1001671c:	2480      	movs	r4, #128	; 0x80
1001671e:	0424      	lsls	r4, r4, #16
10016720:	4327      	orrs	r7, r4
10016722:	464c      	mov	r4, r9
10016724:	2c38      	cmp	r4, #56	; 0x38
10016726:	dd00      	ble.n	1001672a <__aeabi_dsub+0x38e>
10016728:	e0db      	b.n	100168e2 <__aeabi_dsub+0x546>
1001672a:	2c1f      	cmp	r4, #31
1001672c:	dd00      	ble.n	10016730 <__aeabi_dsub+0x394>
1001672e:	e144      	b.n	100169ba <__aeabi_dsub+0x61e>
10016730:	464e      	mov	r6, r9
10016732:	2420      	movs	r4, #32
10016734:	1ba4      	subs	r4, r4, r6
10016736:	003e      	movs	r6, r7
10016738:	40a6      	lsls	r6, r4
1001673a:	46a2      	mov	sl, r4
1001673c:	46b0      	mov	r8, r6
1001673e:	464c      	mov	r4, r9
10016740:	002e      	movs	r6, r5
10016742:	40e6      	lsrs	r6, r4
10016744:	46b4      	mov	ip, r6
10016746:	4646      	mov	r6, r8
10016748:	4664      	mov	r4, ip
1001674a:	4326      	orrs	r6, r4
1001674c:	4654      	mov	r4, sl
1001674e:	40a5      	lsls	r5, r4
10016750:	1e6c      	subs	r4, r5, #1
10016752:	41a5      	sbcs	r5, r4
10016754:	0034      	movs	r4, r6
10016756:	432c      	orrs	r4, r5
10016758:	464d      	mov	r5, r9
1001675a:	40ef      	lsrs	r7, r5
1001675c:	1b0d      	subs	r5, r1, r4
1001675e:	e028      	b.n	100167b2 <__aeabi_dsub+0x416>
10016760:	464a      	mov	r2, r9
10016762:	4643      	mov	r3, r8
10016764:	464d      	mov	r5, r9
10016766:	431a      	orrs	r2, r3
10016768:	d000      	beq.n	1001676c <__aeabi_dsub+0x3d0>
1001676a:	e6a5      	b.n	100164b8 <__aeabi_dsub+0x11c>
1001676c:	2300      	movs	r3, #0
1001676e:	2400      	movs	r4, #0
10016770:	2500      	movs	r5, #0
10016772:	e6de      	b.n	10016532 <__aeabi_dsub+0x196>
10016774:	2a1f      	cmp	r2, #31
10016776:	dc5a      	bgt.n	1001682e <__aeabi_dsub+0x492>
10016778:	4666      	mov	r6, ip
1001677a:	2220      	movs	r2, #32
1001677c:	1b92      	subs	r2, r2, r6
1001677e:	0006      	movs	r6, r0
10016780:	4096      	lsls	r6, r2
10016782:	4691      	mov	r9, r2
10016784:	46b0      	mov	r8, r6
10016786:	4662      	mov	r2, ip
10016788:	000e      	movs	r6, r1
1001678a:	40d6      	lsrs	r6, r2
1001678c:	4642      	mov	r2, r8
1001678e:	4316      	orrs	r6, r2
10016790:	464a      	mov	r2, r9
10016792:	4091      	lsls	r1, r2
10016794:	1e4a      	subs	r2, r1, #1
10016796:	4191      	sbcs	r1, r2
10016798:	0002      	movs	r2, r0
1001679a:	4660      	mov	r0, ip
1001679c:	4331      	orrs	r1, r6
1001679e:	40c2      	lsrs	r2, r0
100167a0:	e6e4      	b.n	1001656c <__aeabi_dsub+0x1d0>
100167a2:	003c      	movs	r4, r7
100167a4:	432c      	orrs	r4, r5
100167a6:	d05a      	beq.n	1001685e <__aeabi_dsub+0x4c2>
100167a8:	43f4      	mvns	r4, r6
100167aa:	46a1      	mov	r9, r4
100167ac:	2c00      	cmp	r4, #0
100167ae:	d152      	bne.n	10016856 <__aeabi_dsub+0x4ba>
100167b0:	1b4d      	subs	r5, r1, r5
100167b2:	42a9      	cmp	r1, r5
100167b4:	4189      	sbcs	r1, r1
100167b6:	1bc7      	subs	r7, r0, r7
100167b8:	4249      	negs	r1, r1
100167ba:	1a7f      	subs	r7, r7, r1
100167bc:	0014      	movs	r4, r2
100167be:	469a      	mov	sl, r3
100167c0:	e675      	b.n	100164ae <__aeabi_dsub+0x112>
100167c2:	4a9e      	ldr	r2, [pc, #632]	; (10016a3c <__aeabi_dsub+0x6a0>)
100167c4:	4294      	cmp	r4, r2
100167c6:	d000      	beq.n	100167ca <__aeabi_dsub+0x42e>
100167c8:	e6c7      	b.n	1001655a <__aeabi_dsub+0x1be>
100167ca:	e613      	b.n	100163f4 <__aeabi_dsub+0x58>
100167cc:	2200      	movs	r2, #0
100167ce:	e77f      	b.n	100166d0 <__aeabi_dsub+0x334>
100167d0:	2000      	movs	r0, #0
100167d2:	e78f      	b.n	100166f4 <__aeabi_dsub+0x358>
100167d4:	2c00      	cmp	r4, #0
100167d6:	d000      	beq.n	100167da <__aeabi_dsub+0x43e>
100167d8:	e0c8      	b.n	1001696c <__aeabi_dsub+0x5d0>
100167da:	003b      	movs	r3, r7
100167dc:	432b      	orrs	r3, r5
100167de:	d100      	bne.n	100167e2 <__aeabi_dsub+0x446>
100167e0:	e10f      	b.n	10016a02 <__aeabi_dsub+0x666>
100167e2:	0003      	movs	r3, r0
100167e4:	430b      	orrs	r3, r1
100167e6:	d100      	bne.n	100167ea <__aeabi_dsub+0x44e>
100167e8:	e604      	b.n	100163f4 <__aeabi_dsub+0x58>
100167ea:	1869      	adds	r1, r5, r1
100167ec:	42a9      	cmp	r1, r5
100167ee:	419b      	sbcs	r3, r3
100167f0:	183f      	adds	r7, r7, r0
100167f2:	425b      	negs	r3, r3
100167f4:	19df      	adds	r7, r3, r7
100167f6:	023b      	lsls	r3, r7, #8
100167f8:	d400      	bmi.n	100167fc <__aeabi_dsub+0x460>
100167fa:	e11a      	b.n	10016a32 <__aeabi_dsub+0x696>
100167fc:	4b90      	ldr	r3, [pc, #576]	; (10016a40 <__aeabi_dsub+0x6a4>)
100167fe:	000d      	movs	r5, r1
10016800:	401f      	ands	r7, r3
10016802:	4664      	mov	r4, ip
10016804:	e5f6      	b.n	100163f4 <__aeabi_dsub+0x58>
10016806:	469a      	mov	sl, r3
10016808:	e689      	b.n	1001651e <__aeabi_dsub+0x182>
1001680a:	003a      	movs	r2, r7
1001680c:	432a      	orrs	r2, r5
1001680e:	2c00      	cmp	r4, #0
10016810:	d15c      	bne.n	100168cc <__aeabi_dsub+0x530>
10016812:	2a00      	cmp	r2, #0
10016814:	d175      	bne.n	10016902 <__aeabi_dsub+0x566>
10016816:	0002      	movs	r2, r0
10016818:	430a      	orrs	r2, r1
1001681a:	d100      	bne.n	1001681e <__aeabi_dsub+0x482>
1001681c:	e0ca      	b.n	100169b4 <__aeabi_dsub+0x618>
1001681e:	0007      	movs	r7, r0
10016820:	000d      	movs	r5, r1
10016822:	469a      	mov	sl, r3
10016824:	e5e6      	b.n	100163f4 <__aeabi_dsub+0x58>
10016826:	4664      	mov	r4, ip
10016828:	2200      	movs	r2, #0
1001682a:	2500      	movs	r5, #0
1001682c:	e681      	b.n	10016532 <__aeabi_dsub+0x196>
1001682e:	4662      	mov	r2, ip
10016830:	0006      	movs	r6, r0
10016832:	3a20      	subs	r2, #32
10016834:	40d6      	lsrs	r6, r2
10016836:	4662      	mov	r2, ip
10016838:	46b0      	mov	r8, r6
1001683a:	2a20      	cmp	r2, #32
1001683c:	d100      	bne.n	10016840 <__aeabi_dsub+0x4a4>
1001683e:	e0b7      	b.n	100169b0 <__aeabi_dsub+0x614>
10016840:	2240      	movs	r2, #64	; 0x40
10016842:	4666      	mov	r6, ip
10016844:	1b92      	subs	r2, r2, r6
10016846:	4090      	lsls	r0, r2
10016848:	4301      	orrs	r1, r0
1001684a:	4642      	mov	r2, r8
1001684c:	1e48      	subs	r0, r1, #1
1001684e:	4181      	sbcs	r1, r0
10016850:	4311      	orrs	r1, r2
10016852:	2200      	movs	r2, #0
10016854:	e68a      	b.n	1001656c <__aeabi_dsub+0x1d0>
10016856:	4c79      	ldr	r4, [pc, #484]	; (10016a3c <__aeabi_dsub+0x6a0>)
10016858:	42a2      	cmp	r2, r4
1001685a:	d000      	beq.n	1001685e <__aeabi_dsub+0x4c2>
1001685c:	e761      	b.n	10016722 <__aeabi_dsub+0x386>
1001685e:	0007      	movs	r7, r0
10016860:	000d      	movs	r5, r1
10016862:	0014      	movs	r4, r2
10016864:	469a      	mov	sl, r3
10016866:	e5c5      	b.n	100163f4 <__aeabi_dsub+0x58>
10016868:	2c00      	cmp	r4, #0
1001686a:	d141      	bne.n	100168f0 <__aeabi_dsub+0x554>
1001686c:	003c      	movs	r4, r7
1001686e:	432c      	orrs	r4, r5
10016870:	d078      	beq.n	10016964 <__aeabi_dsub+0x5c8>
10016872:	43f4      	mvns	r4, r6
10016874:	46a1      	mov	r9, r4
10016876:	2c00      	cmp	r4, #0
10016878:	d020      	beq.n	100168bc <__aeabi_dsub+0x520>
1001687a:	4c70      	ldr	r4, [pc, #448]	; (10016a3c <__aeabi_dsub+0x6a0>)
1001687c:	42a2      	cmp	r2, r4
1001687e:	d071      	beq.n	10016964 <__aeabi_dsub+0x5c8>
10016880:	464c      	mov	r4, r9
10016882:	2c38      	cmp	r4, #56	; 0x38
10016884:	dd00      	ble.n	10016888 <__aeabi_dsub+0x4ec>
10016886:	e0b2      	b.n	100169ee <__aeabi_dsub+0x652>
10016888:	2c1f      	cmp	r4, #31
1001688a:	dd00      	ble.n	1001688e <__aeabi_dsub+0x4f2>
1001688c:	e0bc      	b.n	10016a08 <__aeabi_dsub+0x66c>
1001688e:	2620      	movs	r6, #32
10016890:	1b34      	subs	r4, r6, r4
10016892:	46a2      	mov	sl, r4
10016894:	003c      	movs	r4, r7
10016896:	4656      	mov	r6, sl
10016898:	40b4      	lsls	r4, r6
1001689a:	464e      	mov	r6, r9
1001689c:	46a0      	mov	r8, r4
1001689e:	002c      	movs	r4, r5
100168a0:	40f4      	lsrs	r4, r6
100168a2:	46a4      	mov	ip, r4
100168a4:	4644      	mov	r4, r8
100168a6:	4666      	mov	r6, ip
100168a8:	4334      	orrs	r4, r6
100168aa:	46a4      	mov	ip, r4
100168ac:	4654      	mov	r4, sl
100168ae:	40a5      	lsls	r5, r4
100168b0:	4664      	mov	r4, ip
100168b2:	1e6e      	subs	r6, r5, #1
100168b4:	41b5      	sbcs	r5, r6
100168b6:	4325      	orrs	r5, r4
100168b8:	464c      	mov	r4, r9
100168ba:	40e7      	lsrs	r7, r4
100168bc:	186d      	adds	r5, r5, r1
100168be:	428d      	cmp	r5, r1
100168c0:	4189      	sbcs	r1, r1
100168c2:	183f      	adds	r7, r7, r0
100168c4:	4249      	negs	r1, r1
100168c6:	19cf      	adds	r7, r1, r7
100168c8:	0014      	movs	r4, r2
100168ca:	e656      	b.n	1001657a <__aeabi_dsub+0x1de>
100168cc:	2a00      	cmp	r2, #0
100168ce:	d12f      	bne.n	10016930 <__aeabi_dsub+0x594>
100168d0:	0002      	movs	r2, r0
100168d2:	430a      	orrs	r2, r1
100168d4:	d100      	bne.n	100168d8 <__aeabi_dsub+0x53c>
100168d6:	e084      	b.n	100169e2 <__aeabi_dsub+0x646>
100168d8:	0007      	movs	r7, r0
100168da:	000d      	movs	r5, r1
100168dc:	469a      	mov	sl, r3
100168de:	4c57      	ldr	r4, [pc, #348]	; (10016a3c <__aeabi_dsub+0x6a0>)
100168e0:	e588      	b.n	100163f4 <__aeabi_dsub+0x58>
100168e2:	433d      	orrs	r5, r7
100168e4:	1e6f      	subs	r7, r5, #1
100168e6:	41bd      	sbcs	r5, r7
100168e8:	b2ec      	uxtb	r4, r5
100168ea:	2700      	movs	r7, #0
100168ec:	1b0d      	subs	r5, r1, r4
100168ee:	e760      	b.n	100167b2 <__aeabi_dsub+0x416>
100168f0:	4c52      	ldr	r4, [pc, #328]	; (10016a3c <__aeabi_dsub+0x6a0>)
100168f2:	42a2      	cmp	r2, r4
100168f4:	d036      	beq.n	10016964 <__aeabi_dsub+0x5c8>
100168f6:	4274      	negs	r4, r6
100168f8:	2680      	movs	r6, #128	; 0x80
100168fa:	0436      	lsls	r6, r6, #16
100168fc:	46a1      	mov	r9, r4
100168fe:	4337      	orrs	r7, r6
10016900:	e7be      	b.n	10016880 <__aeabi_dsub+0x4e4>
10016902:	0002      	movs	r2, r0
10016904:	430a      	orrs	r2, r1
10016906:	d100      	bne.n	1001690a <__aeabi_dsub+0x56e>
10016908:	e574      	b.n	100163f4 <__aeabi_dsub+0x58>
1001690a:	1a6a      	subs	r2, r5, r1
1001690c:	4690      	mov	r8, r2
1001690e:	4545      	cmp	r5, r8
10016910:	41b6      	sbcs	r6, r6
10016912:	1a3a      	subs	r2, r7, r0
10016914:	4276      	negs	r6, r6
10016916:	1b92      	subs	r2, r2, r6
10016918:	4694      	mov	ip, r2
1001691a:	0212      	lsls	r2, r2, #8
1001691c:	d400      	bmi.n	10016920 <__aeabi_dsub+0x584>
1001691e:	e5f7      	b.n	10016510 <__aeabi_dsub+0x174>
10016920:	1b4d      	subs	r5, r1, r5
10016922:	42a9      	cmp	r1, r5
10016924:	4189      	sbcs	r1, r1
10016926:	1bc7      	subs	r7, r0, r7
10016928:	4249      	negs	r1, r1
1001692a:	1a7f      	subs	r7, r7, r1
1001692c:	469a      	mov	sl, r3
1001692e:	e561      	b.n	100163f4 <__aeabi_dsub+0x58>
10016930:	0002      	movs	r2, r0
10016932:	430a      	orrs	r2, r1
10016934:	d03a      	beq.n	100169ac <__aeabi_dsub+0x610>
10016936:	08ed      	lsrs	r5, r5, #3
10016938:	077c      	lsls	r4, r7, #29
1001693a:	432c      	orrs	r4, r5
1001693c:	2580      	movs	r5, #128	; 0x80
1001693e:	08fa      	lsrs	r2, r7, #3
10016940:	032d      	lsls	r5, r5, #12
10016942:	422a      	tst	r2, r5
10016944:	d008      	beq.n	10016958 <__aeabi_dsub+0x5bc>
10016946:	08c7      	lsrs	r7, r0, #3
10016948:	422f      	tst	r7, r5
1001694a:	d105      	bne.n	10016958 <__aeabi_dsub+0x5bc>
1001694c:	0745      	lsls	r5, r0, #29
1001694e:	002c      	movs	r4, r5
10016950:	003a      	movs	r2, r7
10016952:	469a      	mov	sl, r3
10016954:	08c9      	lsrs	r1, r1, #3
10016956:	430c      	orrs	r4, r1
10016958:	0f67      	lsrs	r7, r4, #29
1001695a:	00d2      	lsls	r2, r2, #3
1001695c:	00e5      	lsls	r5, r4, #3
1001695e:	4317      	orrs	r7, r2
10016960:	4c36      	ldr	r4, [pc, #216]	; (10016a3c <__aeabi_dsub+0x6a0>)
10016962:	e547      	b.n	100163f4 <__aeabi_dsub+0x58>
10016964:	0007      	movs	r7, r0
10016966:	000d      	movs	r5, r1
10016968:	0014      	movs	r4, r2
1001696a:	e543      	b.n	100163f4 <__aeabi_dsub+0x58>
1001696c:	003a      	movs	r2, r7
1001696e:	432a      	orrs	r2, r5
10016970:	d043      	beq.n	100169fa <__aeabi_dsub+0x65e>
10016972:	0002      	movs	r2, r0
10016974:	430a      	orrs	r2, r1
10016976:	d019      	beq.n	100169ac <__aeabi_dsub+0x610>
10016978:	08ed      	lsrs	r5, r5, #3
1001697a:	077c      	lsls	r4, r7, #29
1001697c:	432c      	orrs	r4, r5
1001697e:	2580      	movs	r5, #128	; 0x80
10016980:	08fa      	lsrs	r2, r7, #3
10016982:	032d      	lsls	r5, r5, #12
10016984:	422a      	tst	r2, r5
10016986:	d007      	beq.n	10016998 <__aeabi_dsub+0x5fc>
10016988:	08c6      	lsrs	r6, r0, #3
1001698a:	422e      	tst	r6, r5
1001698c:	d104      	bne.n	10016998 <__aeabi_dsub+0x5fc>
1001698e:	0747      	lsls	r7, r0, #29
10016990:	003c      	movs	r4, r7
10016992:	0032      	movs	r2, r6
10016994:	08c9      	lsrs	r1, r1, #3
10016996:	430c      	orrs	r4, r1
10016998:	00d7      	lsls	r7, r2, #3
1001699a:	0f62      	lsrs	r2, r4, #29
1001699c:	00e5      	lsls	r5, r4, #3
1001699e:	4317      	orrs	r7, r2
100169a0:	469a      	mov	sl, r3
100169a2:	4c26      	ldr	r4, [pc, #152]	; (10016a3c <__aeabi_dsub+0x6a0>)
100169a4:	e526      	b.n	100163f4 <__aeabi_dsub+0x58>
100169a6:	2200      	movs	r2, #0
100169a8:	2500      	movs	r5, #0
100169aa:	e544      	b.n	10016436 <__aeabi_dsub+0x9a>
100169ac:	4c23      	ldr	r4, [pc, #140]	; (10016a3c <__aeabi_dsub+0x6a0>)
100169ae:	e521      	b.n	100163f4 <__aeabi_dsub+0x58>
100169b0:	2000      	movs	r0, #0
100169b2:	e749      	b.n	10016848 <__aeabi_dsub+0x4ac>
100169b4:	2300      	movs	r3, #0
100169b6:	2500      	movs	r5, #0
100169b8:	e5bb      	b.n	10016532 <__aeabi_dsub+0x196>
100169ba:	464c      	mov	r4, r9
100169bc:	003e      	movs	r6, r7
100169be:	3c20      	subs	r4, #32
100169c0:	40e6      	lsrs	r6, r4
100169c2:	464c      	mov	r4, r9
100169c4:	46b4      	mov	ip, r6
100169c6:	2c20      	cmp	r4, #32
100169c8:	d031      	beq.n	10016a2e <__aeabi_dsub+0x692>
100169ca:	2440      	movs	r4, #64	; 0x40
100169cc:	464e      	mov	r6, r9
100169ce:	1ba6      	subs	r6, r4, r6
100169d0:	40b7      	lsls	r7, r6
100169d2:	433d      	orrs	r5, r7
100169d4:	1e6c      	subs	r4, r5, #1
100169d6:	41a5      	sbcs	r5, r4
100169d8:	4664      	mov	r4, ip
100169da:	432c      	orrs	r4, r5
100169dc:	2700      	movs	r7, #0
100169de:	1b0d      	subs	r5, r1, r4
100169e0:	e6e7      	b.n	100167b2 <__aeabi_dsub+0x416>
100169e2:	2280      	movs	r2, #128	; 0x80
100169e4:	2300      	movs	r3, #0
100169e6:	0312      	lsls	r2, r2, #12
100169e8:	4c14      	ldr	r4, [pc, #80]	; (10016a3c <__aeabi_dsub+0x6a0>)
100169ea:	2500      	movs	r5, #0
100169ec:	e5a1      	b.n	10016532 <__aeabi_dsub+0x196>
100169ee:	433d      	orrs	r5, r7
100169f0:	1e6f      	subs	r7, r5, #1
100169f2:	41bd      	sbcs	r5, r7
100169f4:	2700      	movs	r7, #0
100169f6:	b2ed      	uxtb	r5, r5
100169f8:	e760      	b.n	100168bc <__aeabi_dsub+0x520>
100169fa:	0007      	movs	r7, r0
100169fc:	000d      	movs	r5, r1
100169fe:	4c0f      	ldr	r4, [pc, #60]	; (10016a3c <__aeabi_dsub+0x6a0>)
10016a00:	e4f8      	b.n	100163f4 <__aeabi_dsub+0x58>
10016a02:	0007      	movs	r7, r0
10016a04:	000d      	movs	r5, r1
10016a06:	e4f5      	b.n	100163f4 <__aeabi_dsub+0x58>
10016a08:	464e      	mov	r6, r9
10016a0a:	003c      	movs	r4, r7
10016a0c:	3e20      	subs	r6, #32
10016a0e:	40f4      	lsrs	r4, r6
10016a10:	46a0      	mov	r8, r4
10016a12:	464c      	mov	r4, r9
10016a14:	2c20      	cmp	r4, #32
10016a16:	d00e      	beq.n	10016a36 <__aeabi_dsub+0x69a>
10016a18:	2440      	movs	r4, #64	; 0x40
10016a1a:	464e      	mov	r6, r9
10016a1c:	1ba4      	subs	r4, r4, r6
10016a1e:	40a7      	lsls	r7, r4
10016a20:	433d      	orrs	r5, r7
10016a22:	1e6f      	subs	r7, r5, #1
10016a24:	41bd      	sbcs	r5, r7
10016a26:	4644      	mov	r4, r8
10016a28:	2700      	movs	r7, #0
10016a2a:	4325      	orrs	r5, r4
10016a2c:	e746      	b.n	100168bc <__aeabi_dsub+0x520>
10016a2e:	2700      	movs	r7, #0
10016a30:	e7cf      	b.n	100169d2 <__aeabi_dsub+0x636>
10016a32:	000d      	movs	r5, r1
10016a34:	e573      	b.n	1001651e <__aeabi_dsub+0x182>
10016a36:	2700      	movs	r7, #0
10016a38:	e7f2      	b.n	10016a20 <__aeabi_dsub+0x684>
10016a3a:	46c0      	nop			; (mov r8, r8)
10016a3c:	000007ff 	.word	0x000007ff
10016a40:	ff7fffff 	.word	0xff7fffff

10016a44 <__aeabi_dcmpun>:
10016a44:	b570      	push	{r4, r5, r6, lr}
10016a46:	4e0e      	ldr	r6, [pc, #56]	; (10016a80 <__aeabi_dcmpun+0x3c>)
10016a48:	030c      	lsls	r4, r1, #12
10016a4a:	031d      	lsls	r5, r3, #12
10016a4c:	0049      	lsls	r1, r1, #1
10016a4e:	005b      	lsls	r3, r3, #1
10016a50:	0b24      	lsrs	r4, r4, #12
10016a52:	0d49      	lsrs	r1, r1, #21
10016a54:	0b2d      	lsrs	r5, r5, #12
10016a56:	0d5b      	lsrs	r3, r3, #21
10016a58:	42b1      	cmp	r1, r6
10016a5a:	d004      	beq.n	10016a66 <__aeabi_dcmpun+0x22>
10016a5c:	4908      	ldr	r1, [pc, #32]	; (10016a80 <__aeabi_dcmpun+0x3c>)
10016a5e:	2000      	movs	r0, #0
10016a60:	428b      	cmp	r3, r1
10016a62:	d008      	beq.n	10016a76 <__aeabi_dcmpun+0x32>
10016a64:	bd70      	pop	{r4, r5, r6, pc}
10016a66:	4304      	orrs	r4, r0
10016a68:	2001      	movs	r0, #1
10016a6a:	2c00      	cmp	r4, #0
10016a6c:	d1fa      	bne.n	10016a64 <__aeabi_dcmpun+0x20>
10016a6e:	4904      	ldr	r1, [pc, #16]	; (10016a80 <__aeabi_dcmpun+0x3c>)
10016a70:	2000      	movs	r0, #0
10016a72:	428b      	cmp	r3, r1
10016a74:	d1f6      	bne.n	10016a64 <__aeabi_dcmpun+0x20>
10016a76:	4315      	orrs	r5, r2
10016a78:	0028      	movs	r0, r5
10016a7a:	1e45      	subs	r5, r0, #1
10016a7c:	41a8      	sbcs	r0, r5
10016a7e:	e7f1      	b.n	10016a64 <__aeabi_dcmpun+0x20>
10016a80:	000007ff 	.word	0x000007ff

10016a84 <__aeabi_d2iz>:
10016a84:	030b      	lsls	r3, r1, #12
10016a86:	b530      	push	{r4, r5, lr}
10016a88:	4d13      	ldr	r5, [pc, #76]	; (10016ad8 <__aeabi_d2iz+0x54>)
10016a8a:	0b1a      	lsrs	r2, r3, #12
10016a8c:	004b      	lsls	r3, r1, #1
10016a8e:	0d5b      	lsrs	r3, r3, #21
10016a90:	0fc9      	lsrs	r1, r1, #31
10016a92:	2400      	movs	r4, #0
10016a94:	42ab      	cmp	r3, r5
10016a96:	dd11      	ble.n	10016abc <__aeabi_d2iz+0x38>
10016a98:	4c10      	ldr	r4, [pc, #64]	; (10016adc <__aeabi_d2iz+0x58>)
10016a9a:	42a3      	cmp	r3, r4
10016a9c:	dc10      	bgt.n	10016ac0 <__aeabi_d2iz+0x3c>
10016a9e:	2480      	movs	r4, #128	; 0x80
10016aa0:	0364      	lsls	r4, r4, #13
10016aa2:	4322      	orrs	r2, r4
10016aa4:	4c0e      	ldr	r4, [pc, #56]	; (10016ae0 <__aeabi_d2iz+0x5c>)
10016aa6:	1ae4      	subs	r4, r4, r3
10016aa8:	2c1f      	cmp	r4, #31
10016aaa:	dd0c      	ble.n	10016ac6 <__aeabi_d2iz+0x42>
10016aac:	480d      	ldr	r0, [pc, #52]	; (10016ae4 <__aeabi_d2iz+0x60>)
10016aae:	1ac3      	subs	r3, r0, r3
10016ab0:	40da      	lsrs	r2, r3
10016ab2:	0013      	movs	r3, r2
10016ab4:	425c      	negs	r4, r3
10016ab6:	2900      	cmp	r1, #0
10016ab8:	d100      	bne.n	10016abc <__aeabi_d2iz+0x38>
10016aba:	001c      	movs	r4, r3
10016abc:	0020      	movs	r0, r4
10016abe:	bd30      	pop	{r4, r5, pc}
10016ac0:	4b09      	ldr	r3, [pc, #36]	; (10016ae8 <__aeabi_d2iz+0x64>)
10016ac2:	18cc      	adds	r4, r1, r3
10016ac4:	e7fa      	b.n	10016abc <__aeabi_d2iz+0x38>
10016ac6:	40e0      	lsrs	r0, r4
10016ac8:	4c08      	ldr	r4, [pc, #32]	; (10016aec <__aeabi_d2iz+0x68>)
10016aca:	46a4      	mov	ip, r4
10016acc:	4463      	add	r3, ip
10016ace:	409a      	lsls	r2, r3
10016ad0:	0013      	movs	r3, r2
10016ad2:	4303      	orrs	r3, r0
10016ad4:	e7ee      	b.n	10016ab4 <__aeabi_d2iz+0x30>
10016ad6:	46c0      	nop			; (mov r8, r8)
10016ad8:	000003fe 	.word	0x000003fe
10016adc:	0000041d 	.word	0x0000041d
10016ae0:	00000433 	.word	0x00000433
10016ae4:	00000413 	.word	0x00000413
10016ae8:	7fffffff 	.word	0x7fffffff
10016aec:	fffffbed 	.word	0xfffffbed

10016af0 <__aeabi_i2d>:
10016af0:	b570      	push	{r4, r5, r6, lr}
10016af2:	2800      	cmp	r0, #0
10016af4:	d030      	beq.n	10016b58 <__aeabi_i2d+0x68>
10016af6:	17c3      	asrs	r3, r0, #31
10016af8:	18c4      	adds	r4, r0, r3
10016afa:	405c      	eors	r4, r3
10016afc:	0fc5      	lsrs	r5, r0, #31
10016afe:	0020      	movs	r0, r4
10016b00:	f000 f950 	bl	10016da4 <__clzsi2>
10016b04:	4b17      	ldr	r3, [pc, #92]	; (10016b64 <__aeabi_i2d+0x74>)
10016b06:	4a18      	ldr	r2, [pc, #96]	; (10016b68 <__aeabi_i2d+0x78>)
10016b08:	1a1b      	subs	r3, r3, r0
10016b0a:	1ad2      	subs	r2, r2, r3
10016b0c:	2a1f      	cmp	r2, #31
10016b0e:	dd18      	ble.n	10016b42 <__aeabi_i2d+0x52>
10016b10:	4a16      	ldr	r2, [pc, #88]	; (10016b6c <__aeabi_i2d+0x7c>)
10016b12:	1ad2      	subs	r2, r2, r3
10016b14:	4094      	lsls	r4, r2
10016b16:	2200      	movs	r2, #0
10016b18:	0324      	lsls	r4, r4, #12
10016b1a:	055b      	lsls	r3, r3, #21
10016b1c:	0b24      	lsrs	r4, r4, #12
10016b1e:	0d5b      	lsrs	r3, r3, #21
10016b20:	2100      	movs	r1, #0
10016b22:	0010      	movs	r0, r2
10016b24:	0324      	lsls	r4, r4, #12
10016b26:	0d0a      	lsrs	r2, r1, #20
10016b28:	0512      	lsls	r2, r2, #20
10016b2a:	0b24      	lsrs	r4, r4, #12
10016b2c:	4314      	orrs	r4, r2
10016b2e:	4a10      	ldr	r2, [pc, #64]	; (10016b70 <__aeabi_i2d+0x80>)
10016b30:	051b      	lsls	r3, r3, #20
10016b32:	4014      	ands	r4, r2
10016b34:	431c      	orrs	r4, r3
10016b36:	0064      	lsls	r4, r4, #1
10016b38:	07ed      	lsls	r5, r5, #31
10016b3a:	0864      	lsrs	r4, r4, #1
10016b3c:	432c      	orrs	r4, r5
10016b3e:	0021      	movs	r1, r4
10016b40:	bd70      	pop	{r4, r5, r6, pc}
10016b42:	0021      	movs	r1, r4
10016b44:	4091      	lsls	r1, r2
10016b46:	000a      	movs	r2, r1
10016b48:	210b      	movs	r1, #11
10016b4a:	1a08      	subs	r0, r1, r0
10016b4c:	40c4      	lsrs	r4, r0
10016b4e:	055b      	lsls	r3, r3, #21
10016b50:	0324      	lsls	r4, r4, #12
10016b52:	0b24      	lsrs	r4, r4, #12
10016b54:	0d5b      	lsrs	r3, r3, #21
10016b56:	e7e3      	b.n	10016b20 <__aeabi_i2d+0x30>
10016b58:	2500      	movs	r5, #0
10016b5a:	2300      	movs	r3, #0
10016b5c:	2400      	movs	r4, #0
10016b5e:	2200      	movs	r2, #0
10016b60:	e7de      	b.n	10016b20 <__aeabi_i2d+0x30>
10016b62:	46c0      	nop			; (mov r8, r8)
10016b64:	0000041e 	.word	0x0000041e
10016b68:	00000433 	.word	0x00000433
10016b6c:	00000413 	.word	0x00000413
10016b70:	800fffff 	.word	0x800fffff

10016b74 <__aeabi_ui2d>:
10016b74:	b570      	push	{r4, r5, r6, lr}
10016b76:	1e05      	subs	r5, r0, #0
10016b78:	d028      	beq.n	10016bcc <__aeabi_ui2d+0x58>
10016b7a:	f000 f913 	bl	10016da4 <__clzsi2>
10016b7e:	4b15      	ldr	r3, [pc, #84]	; (10016bd4 <__aeabi_ui2d+0x60>)
10016b80:	4a15      	ldr	r2, [pc, #84]	; (10016bd8 <__aeabi_ui2d+0x64>)
10016b82:	1a1b      	subs	r3, r3, r0
10016b84:	1ad2      	subs	r2, r2, r3
10016b86:	2a1f      	cmp	r2, #31
10016b88:	dd16      	ble.n	10016bb8 <__aeabi_ui2d+0x44>
10016b8a:	002c      	movs	r4, r5
10016b8c:	4a13      	ldr	r2, [pc, #76]	; (10016bdc <__aeabi_ui2d+0x68>)
10016b8e:	2500      	movs	r5, #0
10016b90:	1ad2      	subs	r2, r2, r3
10016b92:	4094      	lsls	r4, r2
10016b94:	055a      	lsls	r2, r3, #21
10016b96:	0324      	lsls	r4, r4, #12
10016b98:	0b24      	lsrs	r4, r4, #12
10016b9a:	0d52      	lsrs	r2, r2, #21
10016b9c:	2100      	movs	r1, #0
10016b9e:	0324      	lsls	r4, r4, #12
10016ba0:	0d0b      	lsrs	r3, r1, #20
10016ba2:	0b24      	lsrs	r4, r4, #12
10016ba4:	051b      	lsls	r3, r3, #20
10016ba6:	4323      	orrs	r3, r4
10016ba8:	4c0d      	ldr	r4, [pc, #52]	; (10016be0 <__aeabi_ui2d+0x6c>)
10016baa:	0512      	lsls	r2, r2, #20
10016bac:	4023      	ands	r3, r4
10016bae:	4313      	orrs	r3, r2
10016bb0:	005b      	lsls	r3, r3, #1
10016bb2:	0028      	movs	r0, r5
10016bb4:	0859      	lsrs	r1, r3, #1
10016bb6:	bd70      	pop	{r4, r5, r6, pc}
10016bb8:	210b      	movs	r1, #11
10016bba:	002c      	movs	r4, r5
10016bbc:	1a08      	subs	r0, r1, r0
10016bbe:	40c4      	lsrs	r4, r0
10016bc0:	4095      	lsls	r5, r2
10016bc2:	0324      	lsls	r4, r4, #12
10016bc4:	055a      	lsls	r2, r3, #21
10016bc6:	0b24      	lsrs	r4, r4, #12
10016bc8:	0d52      	lsrs	r2, r2, #21
10016bca:	e7e7      	b.n	10016b9c <__aeabi_ui2d+0x28>
10016bcc:	2200      	movs	r2, #0
10016bce:	2400      	movs	r4, #0
10016bd0:	e7e4      	b.n	10016b9c <__aeabi_ui2d+0x28>
10016bd2:	46c0      	nop			; (mov r8, r8)
10016bd4:	0000041e 	.word	0x0000041e
10016bd8:	00000433 	.word	0x00000433
10016bdc:	00000413 	.word	0x00000413
10016be0:	800fffff 	.word	0x800fffff

10016be4 <__aeabi_f2d>:
10016be4:	0042      	lsls	r2, r0, #1
10016be6:	0e12      	lsrs	r2, r2, #24
10016be8:	1c51      	adds	r1, r2, #1
10016bea:	0243      	lsls	r3, r0, #9
10016bec:	b2c9      	uxtb	r1, r1
10016bee:	b570      	push	{r4, r5, r6, lr}
10016bf0:	0a5d      	lsrs	r5, r3, #9
10016bf2:	0fc4      	lsrs	r4, r0, #31
10016bf4:	2901      	cmp	r1, #1
10016bf6:	dd15      	ble.n	10016c24 <__aeabi_f2d+0x40>
10016bf8:	21e0      	movs	r1, #224	; 0xe0
10016bfa:	0089      	lsls	r1, r1, #2
10016bfc:	468c      	mov	ip, r1
10016bfe:	076d      	lsls	r5, r5, #29
10016c00:	0b1b      	lsrs	r3, r3, #12
10016c02:	4462      	add	r2, ip
10016c04:	2100      	movs	r1, #0
10016c06:	0028      	movs	r0, r5
10016c08:	0d0d      	lsrs	r5, r1, #20
10016c0a:	052d      	lsls	r5, r5, #20
10016c0c:	432b      	orrs	r3, r5
10016c0e:	4d1c      	ldr	r5, [pc, #112]	; (10016c80 <__aeabi_f2d+0x9c>)
10016c10:	0552      	lsls	r2, r2, #21
10016c12:	402b      	ands	r3, r5
10016c14:	0852      	lsrs	r2, r2, #1
10016c16:	4313      	orrs	r3, r2
10016c18:	005b      	lsls	r3, r3, #1
10016c1a:	07e4      	lsls	r4, r4, #31
10016c1c:	085b      	lsrs	r3, r3, #1
10016c1e:	4323      	orrs	r3, r4
10016c20:	0019      	movs	r1, r3
10016c22:	bd70      	pop	{r4, r5, r6, pc}
10016c24:	2a00      	cmp	r2, #0
10016c26:	d115      	bne.n	10016c54 <__aeabi_f2d+0x70>
10016c28:	2d00      	cmp	r5, #0
10016c2a:	d01f      	beq.n	10016c6c <__aeabi_f2d+0x88>
10016c2c:	0028      	movs	r0, r5
10016c2e:	f000 f8b9 	bl	10016da4 <__clzsi2>
10016c32:	280a      	cmp	r0, #10
10016c34:	dc1d      	bgt.n	10016c72 <__aeabi_f2d+0x8e>
10016c36:	230b      	movs	r3, #11
10016c38:	002a      	movs	r2, r5
10016c3a:	1a1b      	subs	r3, r3, r0
10016c3c:	40da      	lsrs	r2, r3
10016c3e:	0013      	movs	r3, r2
10016c40:	0002      	movs	r2, r0
10016c42:	3215      	adds	r2, #21
10016c44:	4095      	lsls	r5, r2
10016c46:	4a0f      	ldr	r2, [pc, #60]	; (10016c84 <__aeabi_f2d+0xa0>)
10016c48:	031b      	lsls	r3, r3, #12
10016c4a:	1a12      	subs	r2, r2, r0
10016c4c:	0552      	lsls	r2, r2, #21
10016c4e:	0b1b      	lsrs	r3, r3, #12
10016c50:	0d52      	lsrs	r2, r2, #21
10016c52:	e7d7      	b.n	10016c04 <__aeabi_f2d+0x20>
10016c54:	2d00      	cmp	r5, #0
10016c56:	d006      	beq.n	10016c66 <__aeabi_f2d+0x82>
10016c58:	2280      	movs	r2, #128	; 0x80
10016c5a:	0b1b      	lsrs	r3, r3, #12
10016c5c:	0312      	lsls	r2, r2, #12
10016c5e:	4313      	orrs	r3, r2
10016c60:	076d      	lsls	r5, r5, #29
10016c62:	4a09      	ldr	r2, [pc, #36]	; (10016c88 <__aeabi_f2d+0xa4>)
10016c64:	e7ce      	b.n	10016c04 <__aeabi_f2d+0x20>
10016c66:	4a08      	ldr	r2, [pc, #32]	; (10016c88 <__aeabi_f2d+0xa4>)
10016c68:	2300      	movs	r3, #0
10016c6a:	e7cb      	b.n	10016c04 <__aeabi_f2d+0x20>
10016c6c:	2200      	movs	r2, #0
10016c6e:	2300      	movs	r3, #0
10016c70:	e7c8      	b.n	10016c04 <__aeabi_f2d+0x20>
10016c72:	0003      	movs	r3, r0
10016c74:	3b0b      	subs	r3, #11
10016c76:	409d      	lsls	r5, r3
10016c78:	002b      	movs	r3, r5
10016c7a:	2500      	movs	r5, #0
10016c7c:	e7e3      	b.n	10016c46 <__aeabi_f2d+0x62>
10016c7e:	46c0      	nop			; (mov r8, r8)
10016c80:	800fffff 	.word	0x800fffff
10016c84:	00000389 	.word	0x00000389
10016c88:	000007ff 	.word	0x000007ff

10016c8c <__aeabi_d2f>:
10016c8c:	004b      	lsls	r3, r1, #1
10016c8e:	b570      	push	{r4, r5, r6, lr}
10016c90:	0d5e      	lsrs	r6, r3, #21
10016c92:	030c      	lsls	r4, r1, #12
10016c94:	1c75      	adds	r5, r6, #1
10016c96:	0a64      	lsrs	r4, r4, #9
10016c98:	0f42      	lsrs	r2, r0, #29
10016c9a:	056d      	lsls	r5, r5, #21
10016c9c:	4322      	orrs	r2, r4
10016c9e:	0fc9      	lsrs	r1, r1, #31
10016ca0:	00c4      	lsls	r4, r0, #3
10016ca2:	0d6d      	lsrs	r5, r5, #21
10016ca4:	2d01      	cmp	r5, #1
10016ca6:	dd2a      	ble.n	10016cfe <__aeabi_d2f+0x72>
10016ca8:	4b3b      	ldr	r3, [pc, #236]	; (10016d98 <__aeabi_d2f+0x10c>)
10016caa:	18f3      	adds	r3, r6, r3
10016cac:	2bfe      	cmp	r3, #254	; 0xfe
10016cae:	dc1a      	bgt.n	10016ce6 <__aeabi_d2f+0x5a>
10016cb0:	2b00      	cmp	r3, #0
10016cb2:	dd42      	ble.n	10016d3a <__aeabi_d2f+0xae>
10016cb4:	0180      	lsls	r0, r0, #6
10016cb6:	1e45      	subs	r5, r0, #1
10016cb8:	41a8      	sbcs	r0, r5
10016cba:	00d2      	lsls	r2, r2, #3
10016cbc:	4310      	orrs	r0, r2
10016cbe:	0f62      	lsrs	r2, r4, #29
10016cc0:	4302      	orrs	r2, r0
10016cc2:	0750      	lsls	r0, r2, #29
10016cc4:	d004      	beq.n	10016cd0 <__aeabi_d2f+0x44>
10016cc6:	200f      	movs	r0, #15
10016cc8:	4010      	ands	r0, r2
10016cca:	2804      	cmp	r0, #4
10016ccc:	d000      	beq.n	10016cd0 <__aeabi_d2f+0x44>
10016cce:	3204      	adds	r2, #4
10016cd0:	2080      	movs	r0, #128	; 0x80
10016cd2:	04c0      	lsls	r0, r0, #19
10016cd4:	4010      	ands	r0, r2
10016cd6:	d021      	beq.n	10016d1c <__aeabi_d2f+0x90>
10016cd8:	3301      	adds	r3, #1
10016cda:	2bff      	cmp	r3, #255	; 0xff
10016cdc:	d003      	beq.n	10016ce6 <__aeabi_d2f+0x5a>
10016cde:	0192      	lsls	r2, r2, #6
10016ce0:	0a52      	lsrs	r2, r2, #9
10016ce2:	b2db      	uxtb	r3, r3
10016ce4:	e001      	b.n	10016cea <__aeabi_d2f+0x5e>
10016ce6:	23ff      	movs	r3, #255	; 0xff
10016ce8:	2200      	movs	r2, #0
10016cea:	0252      	lsls	r2, r2, #9
10016cec:	0a52      	lsrs	r2, r2, #9
10016cee:	05db      	lsls	r3, r3, #23
10016cf0:	4313      	orrs	r3, r2
10016cf2:	005b      	lsls	r3, r3, #1
10016cf4:	07c9      	lsls	r1, r1, #31
10016cf6:	085b      	lsrs	r3, r3, #1
10016cf8:	430b      	orrs	r3, r1
10016cfa:	0018      	movs	r0, r3
10016cfc:	bd70      	pop	{r4, r5, r6, pc}
10016cfe:	2e00      	cmp	r6, #0
10016d00:	d007      	beq.n	10016d12 <__aeabi_d2f+0x86>
10016d02:	4314      	orrs	r4, r2
10016d04:	d0ef      	beq.n	10016ce6 <__aeabi_d2f+0x5a>
10016d06:	2080      	movs	r0, #128	; 0x80
10016d08:	00d2      	lsls	r2, r2, #3
10016d0a:	0480      	lsls	r0, r0, #18
10016d0c:	4302      	orrs	r2, r0
10016d0e:	23ff      	movs	r3, #255	; 0xff
10016d10:	e7d7      	b.n	10016cc2 <__aeabi_d2f+0x36>
10016d12:	4322      	orrs	r2, r4
10016d14:	2300      	movs	r3, #0
10016d16:	2a00      	cmp	r2, #0
10016d18:	d003      	beq.n	10016d22 <__aeabi_d2f+0x96>
10016d1a:	2205      	movs	r2, #5
10016d1c:	08d2      	lsrs	r2, r2, #3
10016d1e:	2bff      	cmp	r3, #255	; 0xff
10016d20:	d003      	beq.n	10016d2a <__aeabi_d2f+0x9e>
10016d22:	0252      	lsls	r2, r2, #9
10016d24:	0a52      	lsrs	r2, r2, #9
10016d26:	b2db      	uxtb	r3, r3
10016d28:	e7df      	b.n	10016cea <__aeabi_d2f+0x5e>
10016d2a:	2a00      	cmp	r2, #0
10016d2c:	d032      	beq.n	10016d94 <__aeabi_d2f+0x108>
10016d2e:	2080      	movs	r0, #128	; 0x80
10016d30:	03c0      	lsls	r0, r0, #15
10016d32:	4302      	orrs	r2, r0
10016d34:	0252      	lsls	r2, r2, #9
10016d36:	0a52      	lsrs	r2, r2, #9
10016d38:	e7d7      	b.n	10016cea <__aeabi_d2f+0x5e>
10016d3a:	0018      	movs	r0, r3
10016d3c:	3017      	adds	r0, #23
10016d3e:	db14      	blt.n	10016d6a <__aeabi_d2f+0xde>
10016d40:	2080      	movs	r0, #128	; 0x80
10016d42:	0400      	lsls	r0, r0, #16
10016d44:	4302      	orrs	r2, r0
10016d46:	201e      	movs	r0, #30
10016d48:	1ac0      	subs	r0, r0, r3
10016d4a:	281f      	cmp	r0, #31
10016d4c:	dc0f      	bgt.n	10016d6e <__aeabi_d2f+0xe2>
10016d4e:	0025      	movs	r5, r4
10016d50:	4b12      	ldr	r3, [pc, #72]	; (10016d9c <__aeabi_d2f+0x110>)
10016d52:	18f3      	adds	r3, r6, r3
10016d54:	409d      	lsls	r5, r3
10016d56:	1e6e      	subs	r6, r5, #1
10016d58:	41b5      	sbcs	r5, r6
10016d5a:	409a      	lsls	r2, r3
10016d5c:	002b      	movs	r3, r5
10016d5e:	4313      	orrs	r3, r2
10016d60:	0022      	movs	r2, r4
10016d62:	40c2      	lsrs	r2, r0
10016d64:	431a      	orrs	r2, r3
10016d66:	2300      	movs	r3, #0
10016d68:	e7ab      	b.n	10016cc2 <__aeabi_d2f+0x36>
10016d6a:	2300      	movs	r3, #0
10016d6c:	e7d5      	b.n	10016d1a <__aeabi_d2f+0x8e>
10016d6e:	2502      	movs	r5, #2
10016d70:	426d      	negs	r5, r5
10016d72:	1aeb      	subs	r3, r5, r3
10016d74:	0015      	movs	r5, r2
10016d76:	40dd      	lsrs	r5, r3
10016d78:	2820      	cmp	r0, #32
10016d7a:	d009      	beq.n	10016d90 <__aeabi_d2f+0x104>
10016d7c:	4b08      	ldr	r3, [pc, #32]	; (10016da0 <__aeabi_d2f+0x114>)
10016d7e:	18f3      	adds	r3, r6, r3
10016d80:	409a      	lsls	r2, r3
10016d82:	4314      	orrs	r4, r2
10016d84:	1e62      	subs	r2, r4, #1
10016d86:	4194      	sbcs	r4, r2
10016d88:	0022      	movs	r2, r4
10016d8a:	2300      	movs	r3, #0
10016d8c:	432a      	orrs	r2, r5
10016d8e:	e798      	b.n	10016cc2 <__aeabi_d2f+0x36>
10016d90:	2200      	movs	r2, #0
10016d92:	e7f6      	b.n	10016d82 <__aeabi_d2f+0xf6>
10016d94:	2200      	movs	r2, #0
10016d96:	e7a8      	b.n	10016cea <__aeabi_d2f+0x5e>
10016d98:	fffffc80 	.word	0xfffffc80
10016d9c:	fffffc82 	.word	0xfffffc82
10016da0:	fffffca2 	.word	0xfffffca2

10016da4 <__clzsi2>:
10016da4:	211c      	movs	r1, #28
10016da6:	2301      	movs	r3, #1
10016da8:	041b      	lsls	r3, r3, #16
10016daa:	4298      	cmp	r0, r3
10016dac:	d301      	bcc.n	10016db2 <__clzsi2+0xe>
10016dae:	0c00      	lsrs	r0, r0, #16
10016db0:	3910      	subs	r1, #16
10016db2:	0a1b      	lsrs	r3, r3, #8
10016db4:	4298      	cmp	r0, r3
10016db6:	d301      	bcc.n	10016dbc <__clzsi2+0x18>
10016db8:	0a00      	lsrs	r0, r0, #8
10016dba:	3908      	subs	r1, #8
10016dbc:	091b      	lsrs	r3, r3, #4
10016dbe:	4298      	cmp	r0, r3
10016dc0:	d301      	bcc.n	10016dc6 <__clzsi2+0x22>
10016dc2:	0900      	lsrs	r0, r0, #4
10016dc4:	3904      	subs	r1, #4
10016dc6:	a202      	add	r2, pc, #8	; (adr r2, 10016dd0 <__clzsi2+0x2c>)
10016dc8:	5c10      	ldrb	r0, [r2, r0]
10016dca:	1840      	adds	r0, r0, r1
10016dcc:	4770      	bx	lr
10016dce:	46c0      	nop			; (mov r8, r8)
10016dd0:	02020304 	.word	0x02020304
10016dd4:	01010101 	.word	0x01010101
	...
10016de0:	6e6f6420 	.word	0x6e6f6420
10016de4:	00002165 	.word	0x00002165
10016de8:	0000000d 	.word	0x0000000d
10016dec:	3a4f2f54 	.word	0x3a4f2f54
10016df0:	46464f20 	.word	0x46464f20
10016df4:	00000000 	.word	0x00000000
10016df8:	736d735b 	.word	0x736d735b
10016dfc:	656c625f 	.word	0x656c625f
10016e00:	776f705f 	.word	0x776f705f
10016e04:	645f7265 	.word	0x645f7265
10016e08:	5d6e776f 	.word	0x5d6e776f
10016e0c:	00000000 	.word	0x00000000
10016e10:	3a4f2f54 	.word	0x3a4f2f54
10016e14:	30303520 	.word	0x30303520
10016e18:	736d2030 	.word	0x736d2030
10016e1c:	00000000 	.word	0x00000000
10016e20:	736d735b 	.word	0x736d735b
10016e24:	656c625f 	.word	0x656c625f
10016e28:	6961705f 	.word	0x6961705f
10016e2c:	5f646572 	.word	0x5f646572
10016e30:	005d6e66 	.word	0x005d6e66
10016e34:	736d735b 	.word	0x736d735b
10016e38:	656c625f 	.word	0x656c625f
10016e3c:	7664615f 	.word	0x7664615f
10016e40:	69747265 	.word	0x69747265
10016e44:	095d6573 	.word	0x095d6573
10016e48:	65766441 	.word	0x65766441
10016e4c:	73697472 	.word	0x73697472
10016e50:	6e656d65 	.word	0x6e656d65
10016e54:	61642074 	.word	0x61642074
10016e58:	73206174 	.word	0x73206174
10016e5c:	66207465 	.word	0x66207465
10016e60:	656c6961 	.word	0x656c6961
10016e64:	00002164 	.word	0x00002164
10016e68:	736d735b 	.word	0x736d735b
10016e6c:	7265735f 	.word	0x7265735f
10016e70:	65636976 	.word	0x65636976
10016e74:	7664615f 	.word	0x7664615f
10016e78:	69747265 	.word	0x69747265
10016e7c:	095d6573 	.word	0x095d6573
10016e80:	20454c42 	.word	0x20454c42
10016e84:	65766441 	.word	0x65766441
10016e88:	73697472 	.word	0x73697472
10016e8c:	6e656d65 	.word	0x6e656d65
10016e90:	74732074 	.word	0x74732074
10016e94:	20747261 	.word	0x20747261
10016e98:	6c696166 	.word	0x6c696166
10016e9c:	203a6465 	.word	0x203a6465
10016ea0:	73616572 	.word	0x73616572
10016ea4:	30206e6f 	.word	0x30206e6f
10016ea8:	00782578 	.word	0x00782578
10016eac:	20642520 	.word	0x20642520
10016eb0:	454e4f47 	.word	0x454e4f47
10016eb4:	0000203f 	.word	0x0000203f
10016eb8:	3a4f2f54 	.word	0x3a4f2f54
10016ebc:	6d303220 	.word	0x6d303220
10016ec0:	00000073 	.word	0x00000073
10016ec4:	49544f4e 	.word	0x49544f4e
10016ec8:	41434946 	.word	0x41434946
10016ecc:	4e4f4954 	.word	0x4e4f4954
10016ed0:	52524520 	.word	0x52524520
10016ed4:	2121524f 	.word	0x2121524f
10016ed8:	00000000 	.word	0x00000000

10016edc <sms_ble_gap_cb>:
	...
10016ee8:	100085bd 00000000 100085d5 10008709     ................
	...
10016f00:	10008629 1000843d 00000000 00000000     )...=...........
	...

10016f28 <sms_ble_gatt_server_cb>:
10016f28:	10008459 100084cd 00000000 00000000     Y...............
	...
10016f50:	736d735b 7475625f 5f6e6f74 666e6f63     [sms_button_conf
10016f60:	72756769 50095d65 6c626f72 77206d65     igure].Problem w
10016f70:	656c6968 74657320 676e6974 20707520     hile setting up 
10016f80:	74747562 00316e6f 736d735b 7475625f     button1.[sms_but
10016f90:	5f6e6f74 666e6f63 72756769 50095d65     ton_configure].P
10016fa0:	6c626f72 77206d65 656c6968 74657320     roblem while set
10016fb0:	676e6974 20707520 414c5058 44454e49     ting up XPLAINED
10016fc0:	65737520 75622072 6e6f7474 00000000      user button....
10016fd0:	736d735b 7475625f 5f6e6f74 2d5d6e66     [sms_button_fn]-
10016fe0:	00000030 736d735b 7475625f 5f6e6f74     0...[sms_button_
10016ff0:	2d5d6e66 00000031 736d735b 7475625f     fn]-1...[sms_but
10017000:	5f6e6f74 69666564 735f656e 69767265     ton_define_servi
10017010:	5d736563 72655309 65636976 65642073     ces].Services de
10017020:	696e6966 6620676e 656c6961 72202c64     fining failed, r
10017030:	6f736165 7830206e 00007825 626f7250     eason 0x%x..Prob
10017040:	206d656c 6c696877 65732065 6e697474     lem while settin
10017050:	70672067 70206f69 00006e69 736d735b     g gpio pin..[sms
10017060:	756d695f 6e6f635f 75676966 675f6572     _imu_configure_g
10017070:	5d6f6970 6f725009 6d656c62 69687720     pio].Problem whi
10017080:	7320656c 69747465 7520676e 4d492070     le setting up IM
10017090:	52442055 70205944 00006e69 736d735b     U DRDY pin..[sms
100170a0:	75706d5f 6665645f 5f656e69 76726573     _mpu_define_serv
100170b0:	73656369 6553095d 63697672 64207365     ices].Services d
100170c0:	6e696665 20676e69 6c696166 202c6465     efining failed, 
100170d0:	73616572 30206e6f 00782578 736d735b     reason 0x%x.[sms
100170e0:	6572705f 72757373 65645f65 656e6966     _pressure_define
100170f0:	7265735f 65636976 53095d73 69767265     _services].Servi
10017100:	20736563 69666564 676e696e 69616620     ces defining fai
10017110:	2c64656c 61657220 206e6f73 78257830     led, reason 0x%x
10017120:	00000000 1000a924 1000a932 1000a940     ....$...2...@...
10017130:	1000a94e 1000a95c 1000a96a 1000a978     N...\...j...x...
10017140:	1000a988 1000a998 1000a9a8 1000a9b8     ................
10017150:	1000a9c8 1000a9d8 1000a9e8 1000a9f8     ................
10017160:	1000aa08 1000aa18 1000aa28 1000aa38     ........(...8...
10017170:	1000aa48 1000aa58 1000aa68 1000aa78     H...X...h...x...
10017180:	1000aa88 1000aa98 1000aaa8 1000aab8     ................
10017190:	1000aac8 1000aad6 1000aae4 1000aaf2     ................
100171a0:	1000ab00 1000ab0e 1000ab1c 1000ab2a     ............*...
100171b0:	1000ab38 1000ab48 1000ab58 1000ab68     8...H...X...h...
100171c0:	1000ab78 1000ab88 1000ab98 1000aba8     x...............
100171d0:	1000abb8 1000abc8 1000abd8 1000abe8     ................
100171e0:	1000abf8 1000ac08 1000ac18 1000ac28     ............(...
100171f0:	1000ac38 1000ac46 1000ac54 1000ac80     8...F...T.......
10017200:	1000ac8e 1000ac9c 1000acaa 1000acb8     ................
10017210:	1000acc6 1000acd4 1000ace2 1000acf0     ................
10017220:	1000acfe 1000ad0c 1000ad1a 1000ad28     ............(...
10017230:	1000ad36 1000ad44 1000ad52 1000ad60     6...D...R...`...
10017240:	1000ad6e 1000ad7c 1000ad8a 1000ad98     n...|...........
10017250:	1000ada6 1000adb4 1000adc2 1000add0     ................
10017260:	1000adde 1000adec 1000adfa 1000ae08     ................
10017270:	1000ae16 1000ae24 1000ae32 1000ae40     ....$...2...@...
10017280:	1000ae4e 1000ae5c 1000ae6a 1000ae78     N...\...j...x...
10017290:	1000ae86 1000ae94 1000aea2 1000aeb0     ................
100172a0:	1000aebe 1000aecc 1000aeda 1000aee8     ................
100172b0:	1000aef6 1000af04 1000af12 1000af20     ............ ...
100172c0:	1000af2e 1000af3c 1000af4a 1000af58     ....<...J...X...
100172d0:	1000af66 1000b000 1000b028 1000b050     f.......(...P...
100172e0:	1000b078 1000b2b8 1000b0a8 1000b0c0     x...............
100172f0:	1000b138 1000b150 1000b0d8 1000b0f0     8...P...........
10017300:	1000b108 1000b120 1000b168 1000b42c     .... ...h...,...
10017310:	1000b42c 1000b42c 1000b42c 1000b42c     ,...,...,...,...
10017320:	1000b42c 1000b42c 1000b42c 1000b210     ,...,...,.......
10017330:	1000b228 1000b240 1000b2ce 1000b198     (...@...........
10017340:	1000b42c 1000b42c 1000b42c 1000b42c     ,...,...,...,...
10017350:	1000b42c 1000b42c 1000b258 1000b270     ,...,...X...p...
10017360:	1000b288 1000b2a0 1000b42c 1000b3e4     ........,.......
10017370:	1000b3fc 1000b42c 1000b42c 1000b2fa     ....,...,.......
10017380:	1000b310 1000b326 1000b33c 1000b42c     ....&...<...,...
10017390:	1000b42c 1000b42c 1000b42c 1000b42c     ,...,...,...,...
100173a0:	1000b42c 1000b42c 1000b42c 1000afec     ,...,...,.......
100173b0:	1000b014 1000b03c 1000b064 1000b090     ....<...d.......
100173c0:	1000b180 1000b1b0 1000b1c8 1000b1e0     ................
100173d0:	1000b1f8 1000b2e4 1000b352 1000b3cc     ........R.......
100173e0:	1000b414 1000ba7c 1000ba7e 1000ba64     ....|...~...d...
100173f0:	1000ba64 1000ba64 1000ba7c 1000ba64     d...d...|...d...
10017400:	1000ba64 1000c2c2 1000c336 1000c2aa     d.......6.......
10017410:	1000c33c 1000c2b0 1000c2b6 1000c2bc     <...............
10017420:	34333231 00003635 efcdab00 00efcdab     123456..........

10017430 <ble_mgr_gatt_server_handle>:
	...
10017448:	1000b999 1000b9fd 1000b99d 00000000     ................
10017458:	6e616353 676e696e 61662020 64656c69     Scanning  failed
10017468:	00000000 65766441 73697472 20676e69     ....Advertising 
10017478:	6c696166 00006465 2055544d 6e616843     failed..MTU Chan
10017488:	46206567 656c6961 43202c64 656e6e6f     ge Failed, Conne
10017498:	6f697463 6148206e 656c646e 2c64253a     ction Handle:%d,
100174a8:	65704f20 69746172 253a6e6f 00000064      Operation:%d...
100174b8:	69766544 64206563 6f637369 63656e6e     Device disconnec
100174c8:	20646574 73616552 303a6e6f 32302578     ted Reason:0x%02
100174d8:	61482078 656c646e 2578303d 00000078     x Handle=0x%x...
100174e8:	72636e45 69747079 66206e6f 656c6961     Encryption faile
100174f8:	00000064 72636e45 69747079 63206e6f     d...Encryption c
10017508:	6c706d6f 64657465 63757320 73736563     ompleted success
10017518:	6c6c7566 00000079 20454c42 69766544     fully...BLE Devi
10017528:	6e206563 6620746f 646e756f 636e6520     ce not found enc
10017538:	74707972 206e6f69 6f666e69 00000000     ryption info....
10017548:	6f666e49 78616d3a 6d756d69 2e6f6e20     Info:maximum no.
10017558:	7320666f 206e6163 69766564 72206563     of scan device r
10017568:	68636165 2e2e6465 6f74532e 6e697070     eached...Stoppin
10017578:	63532067 00006e61 6c696146 74206465     g Scan..Failed t
10017588:	7473206f 7320706f 6e6e6163 00676e69     o stop scanning.
10017598:	72696150 20676e69 6c696166 2e2e6465     Pairing failed..
100175a8:	7369442e 6e6e6f63 69746365 0000676e     .Disconnecting..
100175b8:	63736944 656e6e6f 52207463 65757165     Disconnect Reque
100175c8:	46207473 656c6961 00000064 72696150     st Failed...Pair
100175d8:	20676e69 636f7270 72756465 6f632065     ing procedure co
100175e8:	656c706d 20646574 63637573 66737365     mpleted successf
100175f8:	796c6c75 00000000 20454c42 69766544     ully....BLE Devi
10017608:	6e206563 6620746f 646e756f 206f7420     ce not found to 
10017618:	726f7473 68742065 61702065 6e697269     store the pairin
10017628:	6e692067 00006f66 72636e45 69747079     g info..Encrypti
10017638:	4e206e6f 7320746f 74726174 00006465     on Not started..
10017648:	76616c53 65532065 69727563 52207974     Slave Security R
10017658:	2d207165 74754120 746e6568 74616369     eq - Authenticat
10017668:	206e6f69 6c696146 00006465 72696150     ion Failed..Pair
10017678:	71655220 74736575 41202d20 65687475      Request - Authe
10017688:	6369746e 6f697461 6146206e 64656c69     ntication Failed
10017698:	00000000 65746e45 68742072 61502065     ....Enter the Pa
100176a8:	656b7373 2d362879 69676944 69202974     sskey(6-Digit) i
100176b8:	6554206e 6e696d72 003a6c61 206e6950     n Terminal:.Pin 
100176c8:	656d6954 0074756f 63736944 656e6e6f     Timeout.Disconne
100176d8:	6e697463 2e2e2067 0000002e 61656c50     cting ......Plea
100176e8:	45206573 7265746e 65687420 6c6f6620     se Enter the fol
100176f8:	69776f6c 5020676e 2d737361 65646f63     lowing Pass-code
10017708:	206e6f28 6568746f 65442072 65636976     (on other Device
10017718:	00003a29 72696150 79656b2d 70657220     ):..Pair-key rep
10017728:	6620796c 656c6961 00000064 20424f4f     ly failed...OOB 
10017738:	74616546 20657275 20746f4e 70707573     Feature Not supp
10017748:	6574726f 00000064 65746e45 20646572     orted...Entered 
10017758:	73736150 646f632d 00003a65 72696150     Pass-code:..Pair
10017768:	20676e69 6f666e69 74616d72 206e6f69     ing information 
10017778:	7020666f 20726565 69766564 69206563     of peer device i
10017788:	6f6e2073 76612074 616c6961 2e656c62     s not available.
10017798:	00000000 61656c50 75206573 6961706e     ....Please unpai
100177a8:	68742072 65642065 65636976 6f726620     r the device fro
100177b8:	6570206d 64207265 63697665 6f6d2865     m peer device(mo
100177c8:	656c6962 65732029 6e697474 6d207367     bile) settings m
100177d8:	20756e65 20646e61 72617473 61702074     enu and start pa
100177e8:	6e697269 67612067 006e6961 72636e45     iring again.Encr
100177f8:	69747079 52206e6f 65757165 52207473     yption Request R
10017808:	796c7065 69614620 0064656c 656c625b     eply Failed.[ble
10017818:	696e695f 09095d74 424d4153 49203131     _init]..SAMB11 I
10017828:	6974696e 7a696c61 6f697461 6166206e     nitialization fa
10017838:	64656c69 00000000 656c625b 696e695f     iled....[ble_ini
10017848:	09095d74 61656c50 63206573 6b636568     t]..Please check
10017858:	65687420 776f7020 61207265 6320646e      the power and c
10017868:	656e6e6f 6f697463 202f206e 64726168     onnection / hard
10017878:	65726177 6e6f6320 7463656e 0000726f     ware connector..
10017888:	52424153 4d532d65 00000053 69766544     SABRe-SMS...Devi
10017898:	6e206563 20656d61 20746573 6c696166     ce name set fail
100178a8:	00006465 656c625b 7465735f 7665645f     ed..[ble_set_dev
100178b8:	6e6f635f 5d676966 44420909 64646120     _config]..BD add
100178c8:	73736572 74656720 69616620 0064656c     ress get failed.
100178d8:	656c625b 7465735f 7665645f 6e6f635f     [ble_set_dev_con
100178e8:	5d676966 74655309 454c4220 76654420     fig].Set BLE Dev
100178f8:	20656369 666e6f63 72756769 6f697461     ice configuratio
10017908:	6166206e 64656c69 00000000 656c625b     n failed....[ble
10017918:	7465735f 7665645f 6e6f635f 5d676966     _set_dev_config]
10017928:	74655309 454c4220 76654420 20656369     .Set BLE Device 
10017938:	72646441 20737365 6c696166 00006465     Address failed..
10017948:	6e616353 676e696e 502e2e2e 7361656c     Scanning...Pleas
10017958:	61772065 2e2e7469 0000002e 76616c53     e wait......Slav
10017968:	65732065 69727563 72207974 65757165     e security reque
10017978:	66207473 656c6961 00000064 6e6e6f43     st failed...Conn
10017988:	65746365 6f742064 65657020 65642072     ected to peer de
10017998:	65636976 74697720 64612068 73657264     vice with addres
100179a8:	78302073 78323025 78323025 78323025     s 0x%02x%02x%02x
100179b8:	78323025 78323025 78323025 00000000     %02x%02x%02x....
100179c8:	6e6e6f43 69746365 48206e6f 6c646e61     Connection Handl
100179d8:	64252065 00000000 6f736552 6e69766c     e %d....Resolvin
100179e8:	61522067 6d6f646e 64646120 73736572     g Random address
100179f8:	69616620 2a64656c 0000002a 2078614d      failed**...Max 
10017a08:	626d756e 6f207265 6f632066 63656e6e     number of connec
10017a18:	6e6f6974 61657220 64656863 6425203a     tion reached: %d
10017a28:	3d3d3d20 7369443e 6e6e6f63 69746365      ===>Disconnecti
10017a38:	2e2e676e 0000002e 69766544 43206563     ng......Device C
10017a48:	656e6e6f 6f697463 6146206e 64656c69     onnection Failed
10017a58:	53202d20 75746174 25203a73 00000064      - Status: %d...
10017a68:	5a2d571c 00002dbe 20454c42 65766441     .W-Z.-..BLE Adve
10017a78:	73697472 6e656d65 61642074 73206174     rtisement data s
10017a88:	66207465 656c6961 00000064              et failed...

10017a94 <ble_mgr_gap_handle>:
10017a94:	1000b995 1000bb79 1000b9ad 1000b9d5     ....y...........
10017aa4:	00000000 1000c625 1000ba2d 1000b9a9     ....%...-.......
10017ab4:	1000bd19 1000bbf9 1000bf19 1000bd31     ............1...
10017ac4:	1000c069 1000c1ad 1000bab5 1000c861     i...........a...
	...
10017ae0:	2055504d 20746f6e 65726568 002e2e2e     MPU not here....
10017af0:	706d6f43 20737361 20746f6e 65726568     Compass not here
10017b00:	002e2e2e 656d7441 6f43206c 022e7072              ....Atmel Corp.

10017b0f <CSWTCH.45>:
10017b0f:	00100402                                         ...

10017b12 <CSWTCH.47>:
10017b12:	03010300 03030303 03030303 02020303              ...............

10017b21 <client_conf_uuid>:
10017b21:	29042902                                         .)

10017b23 <presentation_format_uuid>:
10017b23:	29012904                                         .)

10017b25 <user_desc_uuid>:
10017b25:	29032901                                         .)

10017b27 <server_conf_uuid>:
10017b27:	29002903                                         .)

10017b29 <extended_props_uuid>:
10017b29:	28022900                                         .)

10017b2b <include_uuid>:
10017b2b:	28032802                                         .(

10017b2d <char_uuid>:
10017b2d:	70002803 0000776f 00000000                       .(.pow.....

10017b38 <TWO52>:
10017b38:	00000000 43300000 00000000 c3300000     ......0C......0.
10017b48:	00000043                                C...

10017b4c <_global_impure_ptr>:
10017b4c:	10017e7c 00464e49 00666e69 004e414e     |~..INF.inf.NAN.
10017b5c:	006e616e 31300030 35343332 39383736     nan.0.0123456789
10017b6c:	44434241 30004645 34333231 38373635     ABCDEF.012345678
10017b7c:	63626139 00666564 69666e49 7974696e     9abcdef.Infinity
10017b8c:	4e614e00 00000000                       .NaN....

10017b94 <__sf_fake_stdin>:
	...

10017bb4 <__sf_fake_stdout>:
	...

10017bd4 <__sf_fake_stderr>:
	...
10017bf4:	49534f50 002e0058 00000000              POSIX.......

10017c00 <__mprec_tens>:
10017c00:	00000000 3ff00000 00000000 40240000     .......?......$@
10017c10:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
10017c20:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
10017c30:	00000000 412e8480 00000000 416312d0     .......A......cA
10017c40:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
10017c50:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
10017c60:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
10017c70:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
10017c80:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
10017c90:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
10017ca0:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
10017cb0:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
10017cc0:	79d99db4 44ea7843                       ...yCx.D

10017cc8 <__mprec_bigtens>:
10017cc8:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
10017cd8:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
10017ce8:	7f73bf3c 75154fdd                       <.s..O.u

10017cf0 <p05.5385>:
10017cf0:	00000005 00000019 0000007d 2b302d23     ........}...#-0+
10017d00:	6c680020 6665004c 47464567 00000000      .hlL.efgEFG....
10017d10:	10014bf2 10014b16 10014bd4 10014bac     .K...K...K...K..
10017d20:	10014bd4 10014ba0 10014bd4 10014bac     .K...K...K...K..
10017d30:	10014b16 10014b16 10014ba0 10014bac     .K...K...K...K..
10017d40:	10014c58 10014c58 10014c58 10014bda     XL..XL..XL...K..
10017d50:	10014b16 10014b16 10014bc0 10014baa     .K...K...K...K..
10017d60:	10014bc0 10014ba0 10014bc0 10014baa     .K...K...K...K..
10017d70:	10014b16 10014b16 10014ba0 10014baa     .K...K...K...K..
10017d80:	10014c58 10014c58 10014c58 10014c64     XL..XL..XL..dL..
10017d90:	10014df0 10014d4e 10014d4e 10014d4c     .M..NM..NM..LM..
10017da0:	10014de2 10014de2 10014dd8 10014d4c     .M...M...M..LM..
10017db0:	10014de2 10014dd8 10014de2 10014d4c     .M...M...M..LM..
10017dc0:	10014de8 10014de8 10014de8 10014e72     .M...M...M..rN..
10017dd0:	10015850 1001571e 10015824 10015714     PX...W..$X...W..
10017de0:	10015824 1001582e 10015824 10015714     $X...X..$X...W..
10017df0:	1001571e 1001571e 1001582e 10015714     .W...W...X...W..
10017e00:	1001570a 1001570a 1001570a 10015a80     .W...W...W...Z..
10017e10:	10016098 10015f58 10015f58 10015f56     .`..X_..X_..V_..
10017e20:	10016070 10016070 10016062 10015f56     p`..p`..b`..V_..
10017e30:	10016070 10016062 10016070 10015f56     p`..b`..p`..V_..
10017e40:	10016078 10016078 10016078 10016278     x`..x`..x`..xb..

10017e50 <_init>:
10017e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10017e52:	46c0      	nop			; (mov r8, r8)
10017e54:	bcf8      	pop	{r3, r4, r5, r6, r7}
10017e56:	bc08      	pop	{r3}
10017e58:	469e      	mov	lr, r3
10017e5a:	4770      	bx	lr

10017e5c <__init_array_start>:
10017e5c:	100080b1 	.word	0x100080b1

10017e60 <_fini>:
10017e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10017e62:	46c0      	nop			; (mov r8, r8)
10017e64:	bcf8      	pop	{r3, r4, r5, r6, r7}
10017e66:	bc08      	pop	{r3}
10017e68:	469e      	mov	lr, r3
10017e6a:	4770      	bx	lr

10017e6c <__fini_array_start>:
10017e6c:	10008089 	.word	0x10008089
