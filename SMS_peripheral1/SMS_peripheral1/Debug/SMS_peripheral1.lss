
SMS_peripheral1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00010184  10008000  10008000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000000ac  10018184  10018184  00018184  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00002ea0  10018230  10018230  00018230  2**2
                  ALLOC
  3 .stack        00001800  1001b0d0  1001b0d0  00018230  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00018230  2**0
                  CONTENTS, READONLY
  5 .comment      000000b4  00000000  00000000  00018258  2**0
                  CONTENTS, READONLY
  6 .debug_info   0004e622  00000000  00000000  0001830c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00005656  00000000  00000000  0006692e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000b96d  00000000  00000000  0006bf84  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000d58  00000000  00000000  000778f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000de0  00000000  00000000  00078649  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0002861b  00000000  00000000  00079429  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00017e4f  00000000  00000000  000a1a44  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00147137  00000000  00000000  000b9893  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00002fa4  00000000  00000000  002009cc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

10008000 <app_entry>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void app_entry(void)
{
10008000:	b510      	push	{r4, lr}

    /* Initialize the relocate segment */
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
10008002:	4b18      	ldr	r3, [pc, #96]	; (10008064 <app_entry+0x64>)
10008004:	4a18      	ldr	r2, [pc, #96]	; (10008068 <app_entry+0x68>)
10008006:	429a      	cmp	r2, r3
10008008:	d003      	beq.n	10008012 <app_entry+0x12>
        for (; pDest < &_erelocate;) {
1000800a:	4b18      	ldr	r3, [pc, #96]	; (1000806c <app_entry+0x6c>)
1000800c:	4a15      	ldr	r2, [pc, #84]	; (10008064 <app_entry+0x64>)
1000800e:	429a      	cmp	r2, r3
10008010:	d304      	bcc.n	1000801c <app_entry+0x1c>
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
10008012:	4b17      	ldr	r3, [pc, #92]	; (10008070 <app_entry+0x70>)
10008014:	4a17      	ldr	r2, [pc, #92]	; (10008074 <app_entry+0x74>)
10008016:	429a      	cmp	r2, r3
10008018:	d310      	bcc.n	1000803c <app_entry+0x3c>
1000801a:	e01e      	b.n	1000805a <app_entry+0x5a>
1000801c:	4b16      	ldr	r3, [pc, #88]	; (10008078 <app_entry+0x78>)
1000801e:	4a13      	ldr	r2, [pc, #76]	; (1000806c <app_entry+0x6c>)
10008020:	3203      	adds	r2, #3
10008022:	1ad2      	subs	r2, r2, r3
10008024:	0892      	lsrs	r2, r2, #2
10008026:	3201      	adds	r2, #1
10008028:	0092      	lsls	r2, r2, #2
    /* Initialize the relocate segment */
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
        for (; pDest < &_erelocate;) {
1000802a:	2300      	movs	r3, #0
            *pDest++ = *pSrc++;
1000802c:	480d      	ldr	r0, [pc, #52]	; (10008064 <app_entry+0x64>)
1000802e:	490e      	ldr	r1, [pc, #56]	; (10008068 <app_entry+0x68>)
10008030:	58cc      	ldr	r4, [r1, r3]
10008032:	50c4      	str	r4, [r0, r3]
10008034:	3304      	adds	r3, #4
    /* Initialize the relocate segment */
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
        for (; pDest < &_erelocate;) {
10008036:	4293      	cmp	r3, r2
10008038:	d1fa      	bne.n	10008030 <app_entry+0x30>
1000803a:	e7ea      	b.n	10008012 <app_entry+0x12>
1000803c:	4b0f      	ldr	r3, [pc, #60]	; (1000807c <app_entry+0x7c>)
1000803e:	490c      	ldr	r1, [pc, #48]	; (10008070 <app_entry+0x70>)
10008040:	3103      	adds	r1, #3
10008042:	1ac9      	subs	r1, r1, r3
10008044:	0889      	lsrs	r1, r1, #2
10008046:	3101      	adds	r1, #1
10008048:	0089      	lsls	r1, r1, #2
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
1000804a:	2300      	movs	r3, #0
        *pDest++ = 0;
1000804c:	4c09      	ldr	r4, [pc, #36]	; (10008074 <app_entry+0x74>)
1000804e:	2000      	movs	r0, #0
10008050:	191a      	adds	r2, r3, r4
10008052:	6010      	str	r0, [r2, #0]
10008054:	3304      	adds	r3, #4
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
10008056:	428b      	cmp	r3, r1
10008058:	d1fa      	bne.n	10008050 <app_entry+0x50>
        *pDest++ = 0;
    }

    /* Initialize the C library */
    __libc_init_array();
1000805a:	4b09      	ldr	r3, [pc, #36]	; (10008080 <app_entry+0x80>)
1000805c:	4798      	blx	r3

    /* Branch to main function */
    main();
1000805e:	4b09      	ldr	r3, [pc, #36]	; (10008084 <app_entry+0x84>)
10008060:	4798      	blx	r3

    /* return to BLE OS*/
    return;
}
10008062:	bd10      	pop	{r4, pc}
10008064:	10018184 	.word	0x10018184
10008068:	10018184 	.word	0x10018184
1000806c:	10018230 	.word	0x10018230
10008070:	1001b0d0 	.word	0x1001b0d0
10008074:	10018230 	.word	0x10018230
10008078:	10018188 	.word	0x10018188
1000807c:	10018234 	.word	0x10018234
10008080:	10014dd9 	.word	0x10014dd9
10008084:	1000f5cd 	.word	0x1000f5cd

10008088 <__do_global_dtors_aux>:
10008088:	b510      	push	{r4, lr}
1000808a:	4c06      	ldr	r4, [pc, #24]	; (100080a4 <__do_global_dtors_aux+0x1c>)
1000808c:	7823      	ldrb	r3, [r4, #0]
1000808e:	2b00      	cmp	r3, #0
10008090:	d107      	bne.n	100080a2 <__do_global_dtors_aux+0x1a>
10008092:	4b05      	ldr	r3, [pc, #20]	; (100080a8 <__do_global_dtors_aux+0x20>)
10008094:	2b00      	cmp	r3, #0
10008096:	d002      	beq.n	1000809e <__do_global_dtors_aux+0x16>
10008098:	4804      	ldr	r0, [pc, #16]	; (100080ac <__do_global_dtors_aux+0x24>)
1000809a:	e000      	b.n	1000809e <__do_global_dtors_aux+0x16>
1000809c:	bf00      	nop
1000809e:	2301      	movs	r3, #1
100080a0:	7023      	strb	r3, [r4, #0]
100080a2:	bd10      	pop	{r4, pc}
100080a4:	10018230 	.word	0x10018230
100080a8:	00000000 	.word	0x00000000
100080ac:	10018184 	.word	0x10018184

100080b0 <frame_dummy>:
100080b0:	4b08      	ldr	r3, [pc, #32]	; (100080d4 <frame_dummy+0x24>)
100080b2:	b510      	push	{r4, lr}
100080b4:	2b00      	cmp	r3, #0
100080b6:	d003      	beq.n	100080c0 <frame_dummy+0x10>
100080b8:	4907      	ldr	r1, [pc, #28]	; (100080d8 <frame_dummy+0x28>)
100080ba:	4808      	ldr	r0, [pc, #32]	; (100080dc <frame_dummy+0x2c>)
100080bc:	e000      	b.n	100080c0 <frame_dummy+0x10>
100080be:	bf00      	nop
100080c0:	4807      	ldr	r0, [pc, #28]	; (100080e0 <frame_dummy+0x30>)
100080c2:	6803      	ldr	r3, [r0, #0]
100080c4:	2b00      	cmp	r3, #0
100080c6:	d100      	bne.n	100080ca <frame_dummy+0x1a>
100080c8:	bd10      	pop	{r4, pc}
100080ca:	4b06      	ldr	r3, [pc, #24]	; (100080e4 <frame_dummy+0x34>)
100080cc:	2b00      	cmp	r3, #0
100080ce:	d0fb      	beq.n	100080c8 <frame_dummy+0x18>
100080d0:	4798      	blx	r3
100080d2:	e7f9      	b.n	100080c8 <frame_dummy+0x18>
100080d4:	00000000 	.word	0x00000000
100080d8:	10018234 	.word	0x10018234
100080dc:	10018184 	.word	0x10018184
100080e0:	10018184 	.word	0x10018184
100080e4:	00000000 	.word	0x00000000

100080e8 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
100080e8:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_clock_get_value();
100080ea:	4b09      	ldr	r3, [pc, #36]	; (10008110 <delay_init+0x28>)
100080ec:	4798      	blx	r3
100080ee:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
100080f0:	4c08      	ldr	r4, [pc, #32]	; (10008114 <delay_init+0x2c>)
100080f2:	21fa      	movs	r1, #250	; 0xfa
100080f4:	0089      	lsls	r1, r1, #2
100080f6:	47a0      	blx	r4
100080f8:	4b07      	ldr	r3, [pc, #28]	; (10008118 <delay_init+0x30>)
100080fa:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
100080fc:	4907      	ldr	r1, [pc, #28]	; (1000811c <delay_init+0x34>)
100080fe:	0028      	movs	r0, r5
10008100:	47a0      	blx	r4
10008102:	4b07      	ldr	r3, [pc, #28]	; (10008120 <delay_init+0x38>)
10008104:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
10008106:	2205      	movs	r2, #5
10008108:	4b06      	ldr	r3, [pc, #24]	; (10008124 <delay_init+0x3c>)
1000810a:	601a      	str	r2, [r3, #0]
}
1000810c:	bd70      	pop	{r4, r5, r6, pc}
1000810e:	46c0      	nop			; (mov r8, r8)
10008110:	1000c455 	.word	0x1000c455
10008114:	10012d65 	.word	0x10012d65
10008118:	10018188 	.word	0x10018188
1000811c:	000f4240 	.word	0x000f4240
10008120:	10018184 	.word	0x10018184
10008124:	e000e010 	.word	0xe000e010

10008128 <delay_cycles_ms>:
 * \brief Delay loop to delay at least n number of milliseconds
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(uint32_t n)
{
10008128:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
1000812a:	4b08      	ldr	r3, [pc, #32]	; (1000814c <delay_cycles_ms+0x24>)
1000812c:	681c      	ldr	r4, [r3, #0]
 * \param n Number of cycles
 */
static inline void delay_cycles(const uint32_t n)
{
    if(n > 0) {
        SysTick->LOAD = n;
1000812e:	4a08      	ldr	r2, [pc, #32]	; (10008150 <delay_cycles_ms+0x28>)
        SysTick->VAL = 0;
10008130:	2500      	movs	r5, #0
        while(!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
10008132:	2180      	movs	r1, #128	; 0x80
10008134:	0249      	lsls	r1, r1, #9
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(uint32_t n)
{
	while (n--) {
10008136:	e006      	b.n	10008146 <delay_cycles_ms+0x1e>
 *
 * \param n Number of cycles
 */
static inline void delay_cycles(const uint32_t n)
{
    if(n > 0) {
10008138:	2c00      	cmp	r4, #0
1000813a:	d004      	beq.n	10008146 <delay_cycles_ms+0x1e>
        SysTick->LOAD = n;
1000813c:	6054      	str	r4, [r2, #4]
        SysTick->VAL = 0;
1000813e:	6095      	str	r5, [r2, #8]
        while(!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
10008140:	6813      	ldr	r3, [r2, #0]
10008142:	420b      	tst	r3, r1
10008144:	d0fc      	beq.n	10008140 <delay_cycles_ms+0x18>
10008146:	3801      	subs	r0, #1
10008148:	d2f6      	bcs.n	10008138 <delay_cycles_ms+0x10>
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
	}
}
1000814a:	bd30      	pop	{r4, r5, pc}
1000814c:	10018188 	.word	0x10018188
10008150:	e000e010 	.word	0xe000e010

10008154 <aon_sleep_timer_get_config_defaults>:
 * \param[out]  config  Pointer to a AON Sleep Timer module configuration structure to set
 */
void aon_sleep_timer_get_config_defaults(struct aon_sleep_timer_config *config)
{
	/* Default configuration values */
	config->wakeup = AON_SLEEP_TIMER_WAKEUP_ARM;
10008154:	2301      	movs	r3, #1
10008156:	7003      	strb	r3, [r0, #0]
	config->mode = AON_SLEEP_TIMER_SINGLE_MODE;
10008158:	7043      	strb	r3, [r0, #1]
	config->counter = 32000;
1000815a:	23fa      	movs	r3, #250	; 0xfa
1000815c:	01db      	lsls	r3, r3, #7
1000815e:	6043      	str	r3, [r0, #4]
}
10008160:	4770      	bx	lr
10008162:	46c0      	nop			; (mov r8, r8)

10008164 <aon_sleep_timer_disable>:
 */
void aon_sleep_timer_disable(void)
{
	uint32_t regval;

	AON_SLEEP_TIMER0->SINGLE_COUNT_DURATION.reg = 0;
10008164:	4b06      	ldr	r3, [pc, #24]	; (10008180 <aon_sleep_timer_disable+0x1c>)
10008166:	2200      	movs	r2, #0
10008168:	605a      	str	r2, [r3, #4]
	regval = AON_SLEEP_TIMER0->CONTROL.reg;
1000816a:	681a      	ldr	r2, [r3, #0]
	regval &= ~AON_SLEEP_TIMER_CONTROL_RELOAD_ENABLE;
	regval &= ~AON_SLEEP_TIMER_CONTROL_SINGLE_COUNT_ENABLE;
1000816c:	2103      	movs	r1, #3
1000816e:	438a      	bics	r2, r1
	AON_SLEEP_TIMER0->CONTROL.reg = regval;
10008170:	601a      	str	r2, [r3, #0]

	while (AON_SLEEP_TIMER0->CONTROL.reg & (1 << 14)) {
10008172:	0019      	movs	r1, r3
10008174:	2280      	movs	r2, #128	; 0x80
10008176:	01d2      	lsls	r2, r2, #7
10008178:	680b      	ldr	r3, [r1, #0]
1000817a:	4213      	tst	r3, r2
1000817c:	d1fc      	bne.n	10008178 <aon_sleep_timer_disable+0x14>
	}
}
1000817e:	4770      	bx	lr
10008180:	4000d000 	.word	0x4000d000

10008184 <aon_sleep_timer_clear_interrup>:
 * This flag will be cleared automatically once the IRQ
 * has been seen on the sleep clock.
 */
void aon_sleep_timer_clear_interrup(void)
{
	AON_SLEEP_TIMER0->CONTROL.reg |= AON_SLEEP_TIMER_CONTROL_IRQ_CLEAR;
10008184:	4a02      	ldr	r2, [pc, #8]	; (10008190 <aon_sleep_timer_clear_interrup+0xc>)
10008186:	6811      	ldr	r1, [r2, #0]
10008188:	2310      	movs	r3, #16
1000818a:	430b      	orrs	r3, r1
1000818c:	6013      	str	r3, [r2, #0]
}
1000818e:	4770      	bx	lr
10008190:	4000d000 	.word	0x4000d000

10008194 <aon_sleep_timer_isr_handler>:
 *
 * Timer ISR handler.
 *
 */
static void aon_sleep_timer_isr_handler(void)
{
10008194:	b510      	push	{r4, lr}
	aon_sleep_timer_clear_interrup();
10008196:	4b04      	ldr	r3, [pc, #16]	; (100081a8 <aon_sleep_timer_isr_handler+0x14>)
10008198:	4798      	blx	r3

	if (aon_sleep_timer_callback) {
1000819a:	4b04      	ldr	r3, [pc, #16]	; (100081ac <aon_sleep_timer_isr_handler+0x18>)
1000819c:	681b      	ldr	r3, [r3, #0]
1000819e:	2b00      	cmp	r3, #0
100081a0:	d000      	beq.n	100081a4 <aon_sleep_timer_isr_handler+0x10>
		aon_sleep_timer_callback();
100081a2:	4798      	blx	r3
	}
}
100081a4:	bd10      	pop	{r4, pc}
100081a6:	46c0      	nop			; (mov r8, r8)
100081a8:	10008185 	.word	0x10008185
100081ac:	1001824c 	.word	0x1001824c

100081b0 <aon_sleep_timer_register_callback>:
 *
 * \param[in]     callback_func Pointer to callback function
 */
void aon_sleep_timer_register_callback(aon_sleep_timer_callback_t fun)
{
	aon_sleep_timer_callback = fun;
100081b0:	4b01      	ldr	r3, [pc, #4]	; (100081b8 <aon_sleep_timer_register_callback+0x8>)
100081b2:	6018      	str	r0, [r3, #0]
}
100081b4:	4770      	bx	lr
100081b6:	46c0      	nop			; (mov r8, r8)
100081b8:	1001824c 	.word	0x1001824c

100081bc <aon_sleep_timer_unregister_callback>:
 * Unregisters and disable a callback function implemented by the user.
 *
 */
void aon_sleep_timer_unregister_callback(void)
{
	aon_sleep_timer_callback = NULL;
100081bc:	2200      	movs	r2, #0
100081be:	4b01      	ldr	r3, [pc, #4]	; (100081c4 <aon_sleep_timer_unregister_callback+0x8>)
100081c0:	601a      	str	r2, [r3, #0]
}
100081c2:	4770      	bx	lr
100081c4:	1001824c 	.word	0x1001824c

100081c8 <aon_sleep_timer_init>:
 *
 * \param[in]     config       Pointer to the AON Sleep Timer configuration options struct
 *
 */
void aon_sleep_timer_init(const struct aon_sleep_timer_config *config)
{
100081c8:	b5f0      	push	{r4, r5, r6, r7, lr}
100081ca:	b083      	sub	sp, #12
	uint32_t aon_st_ctrl = 0;

	AON_PWR_SEQ0->AON_ST_WAKEUP_CTRL.reg = AON_PWR_SEQ_AON_ST_WAKEUP_CTRL_RESETVALUE;
100081cc:	2200      	movs	r2, #0
100081ce:	4b2b      	ldr	r3, [pc, #172]	; (1000827c <aon_sleep_timer_init+0xb4>)
100081d0:	731a      	strb	r2, [r3, #12]
	if (config->wakeup == AON_SLEEP_TIMER_WAKEUP_ARM_BLE) {
100081d2:	7803      	ldrb	r3, [r0, #0]
100081d4:	2b02      	cmp	r3, #2
100081d6:	d105      	bne.n	100081e4 <aon_sleep_timer_init+0x1c>
		AON_PWR_SEQ0->AON_ST_WAKEUP_CTRL.reg |=
100081d8:	4a28      	ldr	r2, [pc, #160]	; (1000827c <aon_sleep_timer_init+0xb4>)
100081da:	7b11      	ldrb	r1, [r2, #12]
100081dc:	3301      	adds	r3, #1
100081de:	430b      	orrs	r3, r1
100081e0:	7313      	strb	r3, [r2, #12]
100081e2:	e005      	b.n	100081f0 <aon_sleep_timer_init+0x28>
				AON_PWR_SEQ_AON_ST_WAKEUP_CTRL_ARM_ENABLE |
				AON_PWR_SEQ_AON_ST_WAKEUP_CTRL_BLE_ENABLE;
	} else if (config->wakeup == AON_SLEEP_TIMER_WAKEUP_ARM) {
100081e4:	2b01      	cmp	r3, #1
100081e6:	d103      	bne.n	100081f0 <aon_sleep_timer_init+0x28>
		AON_PWR_SEQ0->AON_ST_WAKEUP_CTRL.reg |=
100081e8:	4a24      	ldr	r2, [pc, #144]	; (1000827c <aon_sleep_timer_init+0xb4>)
100081ea:	7b11      	ldrb	r1, [r2, #12]
100081ec:	430b      	orrs	r3, r1
100081ee:	7313      	strb	r3, [r2, #12]
				AON_PWR_SEQ_AON_ST_WAKEUP_CTRL_ARM_ENABLE;
	}

	aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
100081f0:	4b23      	ldr	r3, [pc, #140]	; (10008280 <aon_sleep_timer_init+0xb8>)
100081f2:	681a      	ldr	r2, [r3, #0]
	while (aon_st_ctrl & ((1UL << 31) - 1)) {
100081f4:	0053      	lsls	r3, r2, #1
100081f6:	d01f      	beq.n	10008238 <aon_sleep_timer_init+0x70>
		AON_SLEEP_TIMER0->CONTROL.reg = 0;
100081f8:	4d21      	ldr	r5, [pc, #132]	; (10008280 <aon_sleep_timer_init+0xb8>)
100081fa:	2700      	movs	r7, #0

static void delay_cycle(uint32_t cycles)
{
	volatile uint32_t i = 0;

	for (i = 0; i < cycles*100; i++) {
100081fc:	262c      	movs	r6, #44	; 0x2c
100081fe:	36ff      	adds	r6, #255	; 0xff
10008200:	2180      	movs	r1, #128	; 0x80
10008202:	01c9      	lsls	r1, r1, #7
				AON_PWR_SEQ_AON_ST_WAKEUP_CTRL_ARM_ENABLE;
	}

	aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
	while (aon_st_ctrl & ((1UL << 31) - 1)) {
		AON_SLEEP_TIMER0->CONTROL.reg = 0;
10008204:	602f      	str	r7, [r5, #0]

static aon_sleep_timer_callback_t aon_sleep_timer_callback = NULL;

static void delay_cycle(uint32_t cycles)
{
	volatile uint32_t i = 0;
10008206:	9701      	str	r7, [sp, #4]

	for (i = 0; i < cycles*100; i++) {
10008208:	9701      	str	r7, [sp, #4]
1000820a:	9b01      	ldr	r3, [sp, #4]
1000820c:	42b3      	cmp	r3, r6
1000820e:	d806      	bhi.n	1000821e <aon_sleep_timer_init+0x56>
		asm volatile ("nop");
10008210:	46c0      	nop			; (mov r8, r8)

static void delay_cycle(uint32_t cycles)
{
	volatile uint32_t i = 0;

	for (i = 0; i < cycles*100; i++) {
10008212:	9b01      	ldr	r3, [sp, #4]
10008214:	3301      	adds	r3, #1
10008216:	9301      	str	r3, [sp, #4]
10008218:	9b01      	ldr	r3, [sp, #4]
1000821a:	42b3      	cmp	r3, r6
1000821c:	d9f8      	bls.n	10008210 <aon_sleep_timer_init+0x48>
1000821e:	7844      	ldrb	r4, [r0, #1]
10008220:	000b      	movs	r3, r1
10008222:	2c00      	cmp	r4, #0
10008224:	d103      	bne.n	1000822e <aon_sleep_timer_init+0x66>
10008226:	2380      	movs	r3, #128	; 0x80
10008228:	009b      	lsls	r3, r3, #2
1000822a:	e000      	b.n	1000822e <aon_sleep_timer_init+0x66>
	while (aon_st_ctrl & ((1UL << 31) - 1)) {
		AON_SLEEP_TIMER0->CONTROL.reg = 0;
		delay_cycle(3);
		while (aon_st_ctrl & ((config->mode == AON_SLEEP_TIMER_RELOAD_MODE) ?
				(1 << 9) : (1 << 14))) {
			aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
1000822c:	682a      	ldr	r2, [r5, #0]

	aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
	while (aon_st_ctrl & ((1UL << 31) - 1)) {
		AON_SLEEP_TIMER0->CONTROL.reg = 0;
		delay_cycle(3);
		while (aon_st_ctrl & ((config->mode == AON_SLEEP_TIMER_RELOAD_MODE) ?
1000822e:	4213      	tst	r3, r2
10008230:	d1fc      	bne.n	1000822c <aon_sleep_timer_init+0x64>
				(1 << 9) : (1 << 14))) {
			aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
		}
		aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
10008232:	682a      	ldr	r2, [r5, #0]
		AON_PWR_SEQ0->AON_ST_WAKEUP_CTRL.reg |=
				AON_PWR_SEQ_AON_ST_WAKEUP_CTRL_ARM_ENABLE;
	}

	aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
	while (aon_st_ctrl & ((1UL << 31) - 1)) {
10008234:	0053      	lsls	r3, r2, #1
10008236:	d1e5      	bne.n	10008204 <aon_sleep_timer_init+0x3c>
			aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
		}
		aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
	}

	if (config->mode == AON_SLEEP_TIMER_RELOAD_MODE) {
10008238:	7843      	ldrb	r3, [r0, #1]
1000823a:	2b00      	cmp	r3, #0
1000823c:	d105      	bne.n	1000824a <aon_sleep_timer_init+0x82>
		/* Reload counter will start here */
		AON_SLEEP_TIMER0->SINGLE_COUNT_DURATION.reg = config->counter;
1000823e:	4b10      	ldr	r3, [pc, #64]	; (10008280 <aon_sleep_timer_init+0xb8>)
10008240:	6842      	ldr	r2, [r0, #4]
10008242:	605a      	str	r2, [r3, #4]
		AON_SLEEP_TIMER0->CONTROL.reg = AON_SLEEP_TIMER_CONTROL_RELOAD_ENABLE;
10008244:	2201      	movs	r2, #1
10008246:	601a      	str	r2, [r3, #0]
10008248:	e004      	b.n	10008254 <aon_sleep_timer_init+0x8c>
	} else {
		/* Single counter will start here */
		AON_SLEEP_TIMER0->SINGLE_COUNT_DURATION.reg = config->counter;
1000824a:	4b0d      	ldr	r3, [pc, #52]	; (10008280 <aon_sleep_timer_init+0xb8>)
1000824c:	6842      	ldr	r2, [r0, #4]
1000824e:	605a      	str	r2, [r3, #4]
		AON_SLEEP_TIMER0->CONTROL.reg = AON_SLEEP_TIMER_CONTROL_SINGLE_COUNT_ENABLE;
10008250:	2202      	movs	r2, #2
10008252:	601a      	str	r2, [r3, #0]
	}

	if (config->mode == AON_SLEEP_TIMER_SINGLE_MODE) {
10008254:	7843      	ldrb	r3, [r0, #1]
10008256:	2b01      	cmp	r3, #1
10008258:	d109      	bne.n	1000826e <aon_sleep_timer_init+0xa6>
		while ((AON_SLEEP_TIMER0->CONTROL.reg &
1000825a:	4909      	ldr	r1, [pc, #36]	; (10008280 <aon_sleep_timer_init+0xb8>)
1000825c:	22e0      	movs	r2, #224	; 0xe0
1000825e:	01d2      	lsls	r2, r2, #7
10008260:	680b      	ldr	r3, [r1, #0]
10008262:	4013      	ands	r3, r2
10008264:	4293      	cmp	r3, r2
10008266:	d1fb      	bne.n	10008260 <aon_sleep_timer_init+0x98>
				AON_SLEEP_TIMER_CONTROL_SLP_TIMER_SINGLE_COUNT_ENABLE_DLY_Msk)
				!= AON_SLEEP_TIMER_CONTROL_SLP_TIMER_SINGLE_COUNT_ENABLE_DLY_Msk) {
		}
		AON_SLEEP_TIMER0->CONTROL.reg = 0;
10008268:	2200      	movs	r2, #0
1000826a:	4b05      	ldr	r3, [pc, #20]	; (10008280 <aon_sleep_timer_init+0xb8>)
1000826c:	601a      	str	r2, [r3, #0]
	}

	system_register_isr(RAM_ISR_TABLE_AON_SLEEP_TIMER_INDEX, (uint32_t)aon_sleep_timer_isr_handler);
1000826e:	4905      	ldr	r1, [pc, #20]	; (10008284 <aon_sleep_timer_init+0xbc>)
10008270:	202b      	movs	r0, #43	; 0x2b
10008272:	4b05      	ldr	r3, [pc, #20]	; (10008288 <aon_sleep_timer_init+0xc0>)
10008274:	4798      	blx	r3
}
10008276:	b003      	add	sp, #12
10008278:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000827a:	46c0      	nop			; (mov r8, r8)
1000827c:	4000e000 	.word	0x4000e000
10008280:	4000d000 	.word	0x4000d000
10008284:	10008195 	.word	0x10008195
10008288:	1000cf91 	.word	0x1000cf91

1000828c <_i2c_master_read_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
1000828c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000828e:	464f      	mov	r7, r9
10008290:	4646      	mov	r6, r8
10008292:	b4c0      	push	{r6, r7}
10008294:	4681      	mov	r9, r0
	Assert(config);
	
	uint16_t counter = 0;
	uint32_t status  = 0;
	I2c *const i2c_module    = (module->hw);
	uint16_t length = packet->data_length;
10008296:	884d      	ldrh	r5, [r1, #2]

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
10008298:	2317      	movs	r3, #23
	uint16_t counter = 0;
	uint32_t status  = 0;
	I2c *const i2c_module    = (module->hw);
	uint16_t length = packet->data_length;

	if (length == 0) {
1000829a:	2d00      	cmp	r5, #0
1000829c:	d02f      	beq.n	100082fe <_i2c_master_read_packet+0x72>
	Assert(module->hw);
	Assert(config);
	
	uint16_t counter = 0;
	uint32_t status  = 0;
	I2c *const i2c_module    = (module->hw);
1000829e:	6802      	ldr	r2, [r0, #0]
 *
 * \param[in]  i2c_module  Pointer to software module structure
 */
static inline void i2c_wait_for_idle(I2c *const i2c_module)
{
	while (i2c_module->I2C_STATUS.bit.I2C_ACTIVE) {
100082a0:	2428      	movs	r4, #40	; 0x28
100082a2:	5d13      	ldrb	r3, [r2, r4]
100082a4:	07db      	lsls	r3, r3, #31
100082a6:	d4fc      	bmi.n	100082a2 <_i2c_master_read_packet+0x16>
	}

	i2c_wait_for_idle(i2c_module);

	/* Flush the FIFO */
	i2c_module->I2C_FLUSH.reg = 1;
100082a8:	2301      	movs	r3, #1
100082aa:	2434      	movs	r4, #52	; 0x34
100082ac:	5513      	strb	r3, [r2, r4]

	/* Enable I2C on bus (start condition). */
	i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_1;
100082ae:	3c14      	subs	r4, #20
100082b0:	5513      	strb	r3, [r2, r4]
	/* Address I2C slave in case of Master mode enabled. */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 |
100082b2:	880b      	ldrh	r3, [r1, #0]
100082b4:	005b      	lsls	r3, r3, #1
100082b6:	2402      	movs	r4, #2
100082b8:	34ff      	adds	r4, #255	; 0xff
100082ba:	4323      	orrs	r3, r4
100082bc:	b29b      	uxth	r3, r3
100082be:	8013      	strh	r3, [r2, #0]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(config);
	
	uint16_t counter = 0;
100082c0:	2400      	movs	r4, #0
	/* Address I2C slave in case of Master mode enabled. */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 |
			(packet->address << 1) | I2C_TRANSFER_READ;
	do {
		status = i2c_module->RECEIVE_STATUS.reg;
		if (status & I2C_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY)
100082c2:	2301      	movs	r3, #1
100082c4:	4698      	mov	r8, r3
	i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_1;
	/* Address I2C slave in case of Master mode enabled. */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 |
			(packet->address << 1) | I2C_TRANSFER_READ;
	do {
		status = i2c_module->RECEIVE_STATUS.reg;
100082c6:	7b13      	ldrb	r3, [r2, #12]
100082c8:	b2db      	uxtb	r3, r3
		if (status & I2C_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY)
100082ca:	4640      	mov	r0, r8
100082cc:	4218      	tst	r0, r3
100082ce:	d006      	beq.n	100082de <_i2c_master_read_packet+0x52>
			packet->data[counter++] = i2c_module->RECEIVE_DATA.reg;
100082d0:	1c67      	adds	r7, r4, #1
100082d2:	7910      	ldrb	r0, [r2, #4]
100082d4:	4684      	mov	ip, r0
100082d6:	6848      	ldr	r0, [r1, #4]
100082d8:	4666      	mov	r6, ip
100082da:	5506      	strb	r6, [r0, r4]
100082dc:	b2bc      	uxth	r4, r7
	} while (counter < length); 
100082de:	42ac      	cmp	r4, r5
100082e0:	d3f1      	bcc.n	100082c6 <_i2c_master_read_packet+0x3a>

	/* Now check whether the core has sent the data out and free the bus. */
	while (!(status & I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY)) {
100082e2:	06db      	lsls	r3, r3, #27
100082e4:	d403      	bmi.n	100082ee <_i2c_master_read_packet+0x62>
100082e6:	2110      	movs	r1, #16
		status = i2c_module->TRANSMIT_STATUS.reg;
100082e8:	7a13      	ldrb	r3, [r2, #8]
		if (status & I2C_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY)
			packet->data[counter++] = i2c_module->RECEIVE_DATA.reg;
	} while (counter < length); 

	/* Now check whether the core has sent the data out and free the bus. */
	while (!(status & I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY)) {
100082ea:	420b      	tst	r3, r1
100082ec:	d0fc      	beq.n	100082e8 <_i2c_master_read_packet+0x5c>
		status = i2c_module->TRANSMIT_STATUS.reg;
	}

	/* Send stop condition. */
	if (!module->no_stop) {
100082ee:	464b      	mov	r3, r9
100082f0:	7959      	ldrb	r1, [r3, #5]
		i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_0;
	}

	return STATUS_OK;
100082f2:	2300      	movs	r3, #0
	while (!(status & I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY)) {
		status = i2c_module->TRANSMIT_STATUS.reg;
	}

	/* Send stop condition. */
	if (!module->no_stop) {
100082f4:	2900      	cmp	r1, #0
100082f6:	d102      	bne.n	100082fe <_i2c_master_read_packet+0x72>
		i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_0;
100082f8:	3320      	adds	r3, #32
100082fa:	54d1      	strb	r1, [r2, r3]
	}

	return STATUS_OK;
100082fc:	2300      	movs	r3, #0
}
100082fe:	0018      	movs	r0, r3
10008300:	bc0c      	pop	{r2, r3}
10008302:	4690      	mov	r8, r2
10008304:	4699      	mov	r9, r3
10008306:	bdf0      	pop	{r4, r5, r6, r7, pc}

10008308 <_i2c_master_write_packet>:
 * \retval STATUS_OK                    The packet was write successfully
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
10008308:	b5f0      	push	{r4, r5, r6, r7, lr}
1000830a:	4684      	mov	ip, r0
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(packet);
	
	I2c *const i2c_module = (module->hw);
1000830c:	6802      	ldr	r2, [r0, #0]
	uint16_t counter = 0;
	uint32_t status  = 0;

	uint16_t length = packet->data_length;
1000830e:	884e      	ldrh	r6, [r1, #2]
10008310:	2428      	movs	r4, #40	; 0x28
10008312:	5d13      	ldrb	r3, [r2, r4]
10008314:	07db      	lsls	r3, r3, #31
10008316:	d4fc      	bmi.n	10008312 <_i2c_master_write_packet+0xa>

	i2c_wait_for_idle(i2c_module);

	/* Flush the FIFO */
	i2c_module->I2C_FLUSH.reg = 1;
10008318:	2301      	movs	r3, #1
1000831a:	2434      	movs	r4, #52	; 0x34
1000831c:	5513      	strb	r3, [r2, r4]

	/* Enable I2C on bus (start condition) */
	i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_1;
1000831e:	3c14      	subs	r4, #20
10008320:	5513      	strb	r3, [r2, r4]

	/* Address I2C slave in case of Master mode enabled */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 | 
10008322:	880b      	ldrh	r3, [r1, #0]
10008324:	005b      	lsls	r3, r3, #1
10008326:	34e0      	adds	r4, #224	; 0xe0
10008328:	4323      	orrs	r3, r4
1000832a:	b29b      	uxth	r3, r3
1000832c:	8013      	strh	r3, [r2, #0]
	Assert(module);
	Assert(module->hw);
	Assert(packet);
	
	I2c *const i2c_module = (module->hw);
	uint16_t counter = 0;
1000832e:	2400      	movs	r4, #0
	/* Address I2C slave in case of Master mode enabled */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 | 
			((packet->address) << 1) | I2C_TRANSFER_WRITE;
	do {
		status = i2c_module->TRANSMIT_STATUS.reg;
		if (status & I2C_TRANSMIT_STATUS_TX_FIFO_NOT_FULL_Msk) {
10008330:	2501      	movs	r5, #1

	/* Address I2C slave in case of Master mode enabled */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 | 
			((packet->address) << 1) | I2C_TRANSFER_WRITE;
	do {
		status = i2c_module->TRANSMIT_STATUS.reg;
10008332:	7a13      	ldrb	r3, [r2, #8]
10008334:	b2db      	uxtb	r3, r3
		if (status & I2C_TRANSMIT_STATUS_TX_FIFO_NOT_FULL_Msk) {
10008336:	421d      	tst	r5, r3
10008338:	d004      	beq.n	10008344 <_i2c_master_write_packet+0x3c>
			i2c_module->TRANSMIT_DATA.reg = packet->data[counter++];
1000833a:	1c67      	adds	r7, r4, #1
1000833c:	6848      	ldr	r0, [r1, #4]
1000833e:	5d04      	ldrb	r4, [r0, r4]
10008340:	8014      	strh	r4, [r2, #0]
10008342:	b2bc      	uxth	r4, r7
		}
	} while (counter < length); 
10008344:	42b4      	cmp	r4, r6
10008346:	d3f4      	bcc.n	10008332 <_i2c_master_write_packet+0x2a>

	/* Now check whether the core has sent the data out and free the bus */
	while (!(status & I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY)) {
10008348:	06db      	lsls	r3, r3, #27
1000834a:	d403      	bmi.n	10008354 <_i2c_master_write_packet+0x4c>
1000834c:	2110      	movs	r1, #16
			status = i2c_module->TRANSMIT_STATUS.reg;
1000834e:	7a13      	ldrb	r3, [r2, #8]
			i2c_module->TRANSMIT_DATA.reg = packet->data[counter++];
		}
	} while (counter < length); 

	/* Now check whether the core has sent the data out and free the bus */
	while (!(status & I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY)) {
10008350:	420b      	tst	r3, r1
10008352:	d0fc      	beq.n	1000834e <_i2c_master_write_packet+0x46>
			status = i2c_module->TRANSMIT_STATUS.reg;
	}

	/* Send stop condition */
	if (!module->no_stop) {
10008354:	4663      	mov	r3, ip
10008356:	795b      	ldrb	r3, [r3, #5]
10008358:	2b00      	cmp	r3, #0
1000835a:	d102      	bne.n	10008362 <_i2c_master_write_packet+0x5a>
		i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_0;
1000835c:	2100      	movs	r1, #0
1000835e:	3320      	adds	r3, #32
10008360:	54d1      	strb	r1, [r2, r3]
	}

	return STATUS_OK;
}
10008362:	2000      	movs	r0, #0
10008364:	bdf0      	pop	{r4, r5, r6, r7, pc}
10008366:	46c0      	nop			; (mov r8, r8)

10008368 <i2c_master_get_config_defaults>:
		struct i2c_master_config *const config)
{
	/* Sanity check */
	Assert(config);
	
	config->clock_source    = I2C_CLK_INPUT_3;
10008368:	2303      	movs	r3, #3
1000836a:	7003      	strb	r3, [r0, #0]
	config->clock_divider   = 0x10;
1000836c:	330d      	adds	r3, #13
1000836e:	8043      	strh	r3, [r0, #2]
	config->pin_number_pad0 = PIN_LP_GPIO_8;
10008370:	3b08      	subs	r3, #8
10008372:	6043      	str	r3, [r0, #4]
	config->pin_number_pad1 = PIN_LP_GPIO_9;
10008374:	3301      	adds	r3, #1
10008376:	60c3      	str	r3, [r0, #12]
	config->pinmux_sel_pad0 = MUX_LP_GPIO_8_I2C0_SDA;
10008378:	3b07      	subs	r3, #7
1000837a:	6083      	str	r3, [r0, #8]
	config->pinmux_sel_pad1 = MUX_LP_GPIO_9_I2C0_SCL;
1000837c:	6103      	str	r3, [r0, #16]
}
1000837e:	4770      	bx	lr

10008380 <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		I2c *const hw,
		const struct i2c_master_config *const config)
{
10008380:	b570      	push	{r4, r5, r6, lr}
10008382:	0004      	movs	r4, r0
10008384:	0015      	movs	r5, r2
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(config);
	
	module->hw = hw;
10008386:	6001      	str	r1, [r0, #0]

	/* Sanity check arguments. */
	if ((module == NULL) || (config == NULL))
10008388:	2800      	cmp	r0, #0
1000838a:	d026      	beq.n	100083da <i2c_master_init+0x5a>
1000838c:	2a00      	cmp	r2, #0
1000838e:	d026      	beq.n	100083de <i2c_master_init+0x5e>
10008390:	2228      	movs	r2, #40	; 0x28
10008392:	5c8b      	ldrb	r3, [r1, r2]
10008394:	07db      	lsls	r3, r3, #31
10008396:	d4fc      	bmi.n	10008392 <i2c_master_init+0x12>
 *
 */
static inline void i2c_disable(I2c *const i2c_module)
{
	i2c_wait_for_idle(i2c_module);
	i2c_module->I2C_MODULE_ENABLE.reg = 0;
10008398:	2300      	movs	r3, #0
1000839a:	750b      	strb	r3, [r1, #20]
		return STATUS_ERR_INVALID_ARG;

	i2c_disable(module->hw);
	if (module->hw == I2C0) {
1000839c:	6823      	ldr	r3, [r4, #0]
1000839e:	4a11      	ldr	r2, [pc, #68]	; (100083e4 <i2c_master_init+0x64>)
100083a0:	4293      	cmp	r3, r2
100083a2:	d103      	bne.n	100083ac <i2c_master_init+0x2c>
		system_peripheral_reset(PERIPHERAL_I2C0_CORE);
100083a4:	2003      	movs	r0, #3
100083a6:	4b10      	ldr	r3, [pc, #64]	; (100083e8 <i2c_master_init+0x68>)
100083a8:	4798      	blx	r3
100083aa:	e006      	b.n	100083ba <i2c_master_init+0x3a>
	} else if (module->hw == I2C1) {
		system_peripheral_reset(PERIPHERAL_I2C1_CORE);
	} else {
		return STATUS_ERR_INVALID_ARG;
100083ac:	2017      	movs	r0, #23
		return STATUS_ERR_INVALID_ARG;

	i2c_disable(module->hw);
	if (module->hw == I2C0) {
		system_peripheral_reset(PERIPHERAL_I2C0_CORE);
	} else if (module->hw == I2C1) {
100083ae:	4a0f      	ldr	r2, [pc, #60]	; (100083ec <i2c_master_init+0x6c>)
100083b0:	4293      	cmp	r3, r2
100083b2:	d115      	bne.n	100083e0 <i2c_master_init+0x60>
		system_peripheral_reset(PERIPHERAL_I2C1_CORE);
100083b4:	3002      	adds	r0, #2
100083b6:	4b0c      	ldr	r3, [pc, #48]	; (100083e8 <i2c_master_init+0x68>)
100083b8:	4798      	blx	r3
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(config);

	I2c *const i2c_module = (module->hw);
100083ba:	6824      	ldr	r4, [r4, #0]

	/* Set the pinmux for this i2c module. */
	gpio_pinmux_cofiguration(config->pin_number_pad0, (uint16_t)(config->pinmux_sel_pad0));
100083bc:	8929      	ldrh	r1, [r5, #8]
100083be:	7928      	ldrb	r0, [r5, #4]
100083c0:	4e0b      	ldr	r6, [pc, #44]	; (100083f0 <i2c_master_init+0x70>)
100083c2:	47b0      	blx	r6
	gpio_pinmux_cofiguration(config->pin_number_pad1, (uint16_t)(config->pinmux_sel_pad1));
100083c4:	8a29      	ldrh	r1, [r5, #16]
100083c6:	7b28      	ldrb	r0, [r5, #12]
100083c8:	47b0      	blx	r6
	/* Set clock. */
	i2c_module->CLOCK_SOURCE_SELECT.reg = config->clock_source;
100083ca:	782b      	ldrb	r3, [r5, #0]
100083cc:	7423      	strb	r3, [r4, #16]
	i2c_module->I2C_CLK_DIVIDER.reg = I2C_CLK_DIVIDER_I2C_DIVIDE_RATIO(config->clock_divider);
100083ce:	886b      	ldrh	r3, [r5, #2]
100083d0:	8323      	strh	r3, [r4, #24]
	/* Enable master mode. */
	i2c_module->I2C_MASTER_MODE.reg = I2C_MASTER_MODE_MASTER_ENABLE_1;
100083d2:	2301      	movs	r3, #1
100083d4:	7723      	strb	r3, [r4, #28]
#endif

	/* Set config and return status. */
	_i2c_master_set_config(module, config);

	return STATUS_OK;
100083d6:	2000      	movs	r0, #0
100083d8:	e002      	b.n	100083e0 <i2c_master_init+0x60>
	
	module->hw = hw;

	/* Sanity check arguments. */
	if ((module == NULL) || (config == NULL))
		return STATUS_ERR_INVALID_ARG;
100083da:	2017      	movs	r0, #23
100083dc:	e000      	b.n	100083e0 <i2c_master_init+0x60>
100083de:	2017      	movs	r0, #23

	/* Set config and return status. */
	_i2c_master_set_config(module, config);

	return STATUS_OK;
}
100083e0:	bd70      	pop	{r4, r5, r6, pc}
100083e2:	46c0      	nop			; (mov r8, r8)
100083e4:	40003000 	.word	0x40003000
100083e8:	1000cb29 	.word	0x1000cb29
100083ec:	40003400 	.word	0x40003400
100083f0:	1000c0b1 	.word	0x1000c0b1

100083f4 <i2c_master_read_packet_wait>:
 * \retval STATUS_BUSY                  If module has a pending request.
 */
enum status_code i2c_master_read_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
100083f4:	b510      	push	{r4, lr}
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL))
100083f6:	2800      	cmp	r0, #0
100083f8:	d008      	beq.n	1000840c <i2c_master_read_packet_wait+0x18>
		return STATUS_ERR_INVALID_ARG;
100083fa:	2317      	movs	r3, #23
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL))
100083fc:	2900      	cmp	r1, #0
100083fe:	d006      	beq.n	1000840e <i2c_master_read_packet_wait+0x1a>
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->no_stop = false;
10008400:	2300      	movs	r3, #0
10008402:	7143      	strb	r3, [r0, #5]

	return _i2c_master_read_packet(module, packet);
10008404:	4b03      	ldr	r3, [pc, #12]	; (10008414 <i2c_master_read_packet_wait+0x20>)
10008406:	4798      	blx	r3
10008408:	0003      	movs	r3, r0
1000840a:	e000      	b.n	1000840e <i2c_master_read_packet_wait+0x1a>
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL))
		return STATUS_ERR_INVALID_ARG;
1000840c:	2317      	movs	r3, #23
#endif

	module->no_stop = false;

	return _i2c_master_read_packet(module, packet);
}
1000840e:	0018      	movs	r0, r3
10008410:	bd10      	pop	{r4, pc}
10008412:	46c0      	nop			; (mov r8, r8)
10008414:	1000828d 	.word	0x1000828d

10008418 <i2c_master_write_packet_wait>:
 * \retval STATUS_BUSY                  If module has a pending request.
 */
enum status_code i2c_master_write_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
10008418:	b510      	push	{r4, lr}
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if ((module == NULL) || (packet == NULL)) {
1000841a:	2800      	cmp	r0, #0
1000841c:	d008      	beq.n	10008430 <i2c_master_write_packet_wait+0x18>
		return STATUS_ERR_INVALID_ARG;
1000841e:	2317      	movs	r3, #23
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if ((module == NULL) || (packet == NULL)) {
10008420:	2900      	cmp	r1, #0
10008422:	d006      	beq.n	10008432 <i2c_master_write_packet_wait+0x1a>
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->no_stop = false;
10008424:	2300      	movs	r3, #0
10008426:	7143      	strb	r3, [r0, #5]

	return _i2c_master_write_packet(module, packet);
10008428:	4b03      	ldr	r3, [pc, #12]	; (10008438 <i2c_master_write_packet_wait+0x20>)
1000842a:	4798      	blx	r3
1000842c:	0003      	movs	r3, r0
1000842e:	e000      	b.n	10008432 <i2c_master_write_packet_wait+0x1a>
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if ((module == NULL) || (packet == NULL)) {
		return STATUS_ERR_INVALID_ARG;
10008430:	2317      	movs	r3, #23
#endif

	module->no_stop = false;

	return _i2c_master_write_packet(module, packet);
}
10008432:	0018      	movs	r0, r3
10008434:	bd10      	pop	{r4, pc}
10008436:	46c0      	nop			; (mov r8, r8)
10008438:	10008309 	.word	0x10008309

1000843c <i2c_master_write_packet_wait_no_stop>:
 * \retval STATUS_BUSY                  If module has a pending request.
 */
enum status_code i2c_master_write_packet_wait_no_stop(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
1000843c:	b510      	push	{r4, lr}
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL)) {
1000843e:	2800      	cmp	r0, #0
10008440:	d008      	beq.n	10008454 <i2c_master_write_packet_wait_no_stop+0x18>
		return STATUS_ERR_INVALID_ARG;
10008442:	2317      	movs	r3, #23
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL)) {
10008444:	2900      	cmp	r1, #0
10008446:	d006      	beq.n	10008456 <i2c_master_write_packet_wait_no_stop+0x1a>
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->no_stop = true;
10008448:	3b16      	subs	r3, #22
1000844a:	7143      	strb	r3, [r0, #5]

	return _i2c_master_write_packet(module, packet);
1000844c:	4b03      	ldr	r3, [pc, #12]	; (1000845c <i2c_master_write_packet_wait_no_stop+0x20>)
1000844e:	4798      	blx	r3
10008450:	0003      	movs	r3, r0
10008452:	e000      	b.n	10008456 <i2c_master_write_packet_wait_no_stop+0x1a>
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL)) {
		return STATUS_ERR_INVALID_ARG;
10008454:	2317      	movs	r3, #23
#endif

	module->no_stop = true;

	return _i2c_master_write_packet(module, packet);
}
10008456:	0018      	movs	r0, r3
10008458:	bd10      	pop	{r4, pc}
1000845a:	46c0      	nop			; (mov r8, r8)
1000845c:	10008309 	.word	0x10008309

10008460 <set_int_enable>:
 *  interrupt is used.
 *  @param[in]  enable      1 to enable interrupt.
 *  @return     0 if successful.
 */
static int set_int_enable(unsigned char enable)
{
10008460:	b510      	push	{r4, lr}
10008462:	b082      	sub	sp, #8
    unsigned char tmp;

    if (st.chip_cfg.dmp_on) {
10008464:	2324      	movs	r3, #36	; 0x24
10008466:	4a25      	ldr	r2, [pc, #148]	; (100084fc <set_int_enable+0x9c>)
10008468:	5cd3      	ldrb	r3, [r2, r3]
1000846a:	2b00      	cmp	r3, #0
1000846c:	d019      	beq.n	100084a2 <set_int_enable+0x42>
        if (enable)
1000846e:	2800      	cmp	r0, #0
10008470:	d003      	beq.n	1000847a <set_int_enable+0x1a>
            tmp = BIT_DMP_INT_EN;
10008472:	2202      	movs	r2, #2
10008474:	466b      	mov	r3, sp
10008476:	71da      	strb	r2, [r3, #7]
10008478:	e002      	b.n	10008480 <set_int_enable+0x20>
        else
            tmp = 0x00;
1000847a:	2200      	movs	r2, #0
1000847c:	466b      	mov	r3, sp
1000847e:	71da      	strb	r2, [r3, #7]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
10008480:	4b1e      	ldr	r3, [pc, #120]	; (100084fc <set_int_enable+0x9c>)
10008482:	681a      	ldr	r2, [r3, #0]
10008484:	7c51      	ldrb	r1, [r2, #17]
10008486:	685b      	ldr	r3, [r3, #4]
10008488:	7818      	ldrb	r0, [r3, #0]
1000848a:	466b      	mov	r3, sp
1000848c:	3307      	adds	r3, #7
1000848e:	2201      	movs	r2, #1
10008490:	4c1b      	ldr	r4, [pc, #108]	; (10008500 <set_int_enable+0xa0>)
10008492:	47a0      	blx	r4
10008494:	2800      	cmp	r0, #0
10008496:	d127      	bne.n	100084e8 <set_int_enable+0x88>
            return -1;
        st.chip_cfg.int_enable = tmp;
10008498:	466b      	mov	r3, sp
1000849a:	79da      	ldrb	r2, [r3, #7]
1000849c:	4b17      	ldr	r3, [pc, #92]	; (100084fc <set_int_enable+0x9c>)
1000849e:	745a      	strb	r2, [r3, #17]
100084a0:	e02a      	b.n	100084f8 <set_int_enable+0x98>
    } else {
        if (!st.chip_cfg.sensors)
100084a2:	4b16      	ldr	r3, [pc, #88]	; (100084fc <set_int_enable+0x9c>)
100084a4:	7a9b      	ldrb	r3, [r3, #10]
100084a6:	2b00      	cmp	r3, #0
100084a8:	d021      	beq.n	100084ee <set_int_enable+0x8e>
            return -1;
        if (enable && st.chip_cfg.int_enable)
100084aa:	2800      	cmp	r0, #0
100084ac:	d008      	beq.n	100084c0 <set_int_enable+0x60>
100084ae:	4b13      	ldr	r3, [pc, #76]	; (100084fc <set_int_enable+0x9c>)
100084b0:	7c5b      	ldrb	r3, [r3, #17]
            return 0;
100084b2:	2000      	movs	r0, #0
            return -1;
        st.chip_cfg.int_enable = tmp;
    } else {
        if (!st.chip_cfg.sensors)
            return -1;
        if (enable && st.chip_cfg.int_enable)
100084b4:	2b00      	cmp	r3, #0
100084b6:	d11f      	bne.n	100084f8 <set_int_enable+0x98>
            return 0;
        if (enable)
            tmp = BIT_DATA_RDY_EN;
100084b8:	2201      	movs	r2, #1
100084ba:	466b      	mov	r3, sp
100084bc:	71da      	strb	r2, [r3, #7]
100084be:	e002      	b.n	100084c6 <set_int_enable+0x66>
        else
            tmp = 0x00;
100084c0:	2200      	movs	r2, #0
100084c2:	466b      	mov	r3, sp
100084c4:	71da      	strb	r2, [r3, #7]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
100084c6:	4b0d      	ldr	r3, [pc, #52]	; (100084fc <set_int_enable+0x9c>)
100084c8:	681a      	ldr	r2, [r3, #0]
100084ca:	7c51      	ldrb	r1, [r2, #17]
100084cc:	685b      	ldr	r3, [r3, #4]
100084ce:	7818      	ldrb	r0, [r3, #0]
100084d0:	466b      	mov	r3, sp
100084d2:	3307      	adds	r3, #7
100084d4:	2201      	movs	r2, #1
100084d6:	4c0a      	ldr	r4, [pc, #40]	; (10008500 <set_int_enable+0xa0>)
100084d8:	47a0      	blx	r4
100084da:	2800      	cmp	r0, #0
100084dc:	d10a      	bne.n	100084f4 <set_int_enable+0x94>
            return -1;
        st.chip_cfg.int_enable = tmp;
100084de:	466b      	mov	r3, sp
100084e0:	79da      	ldrb	r2, [r3, #7]
100084e2:	4b06      	ldr	r3, [pc, #24]	; (100084fc <set_int_enable+0x9c>)
100084e4:	745a      	strb	r2, [r3, #17]
100084e6:	e007      	b.n	100084f8 <set_int_enable+0x98>
        if (enable)
            tmp = BIT_DMP_INT_EN;
        else
            tmp = 0x00;
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
            return -1;
100084e8:	2001      	movs	r0, #1
100084ea:	4240      	negs	r0, r0
100084ec:	e004      	b.n	100084f8 <set_int_enable+0x98>
        st.chip_cfg.int_enable = tmp;
    } else {
        if (!st.chip_cfg.sensors)
            return -1;
100084ee:	2001      	movs	r0, #1
100084f0:	4240      	negs	r0, r0
100084f2:	e001      	b.n	100084f8 <set_int_enable+0x98>
        if (enable)
            tmp = BIT_DATA_RDY_EN;
        else
            tmp = 0x00;
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
            return -1;
100084f4:	2001      	movs	r0, #1
100084f6:	4240      	negs	r0, r0
        st.chip_cfg.int_enable = tmp;
    }
    return 0;
}
100084f8:	b002      	add	sp, #8
100084fa:	bd10      	pop	{r4, pc}
100084fc:	1001818c 	.word	0x1001818c
10008500:	1000ab2d 	.word	0x1000ab2d

10008504 <mpu_get_temperature>:
 *  @param[out] data        Data in q16 format.
 *  @param[out] timestamp   Timestamp in milliseconds. Null if not needed.
 *  @return     0 if successful.
 */
int mpu_get_temperature(long *data, unsigned long *timestamp)
{
10008504:	b5f0      	push	{r4, r5, r6, r7, lr}
10008506:	b085      	sub	sp, #20
10008508:	0007      	movs	r7, r0
1000850a:	000e      	movs	r6, r1
    unsigned char tmp[2];
    short raw;

    if (!(st.chip_cfg.sensors))
1000850c:	4b21      	ldr	r3, [pc, #132]	; (10008594 <mpu_get_temperature+0x90>)
1000850e:	7a9b      	ldrb	r3, [r3, #10]
10008510:	2b00      	cmp	r3, #0
10008512:	d035      	beq.n	10008580 <mpu_get_temperature+0x7c>
        return -1;

    if (i2c_read(st.hw->addr, st.reg->temp, 2, tmp))
10008514:	4b1f      	ldr	r3, [pc, #124]	; (10008594 <mpu_get_temperature+0x90>)
10008516:	681a      	ldr	r2, [r3, #0]
10008518:	7c11      	ldrb	r1, [r2, #16]
1000851a:	685b      	ldr	r3, [r3, #4]
1000851c:	7818      	ldrb	r0, [r3, #0]
1000851e:	ab03      	add	r3, sp, #12
10008520:	2202      	movs	r2, #2
10008522:	4c1d      	ldr	r4, [pc, #116]	; (10008598 <mpu_get_temperature+0x94>)
10008524:	47a0      	blx	r4
10008526:	9001      	str	r0, [sp, #4]
10008528:	2800      	cmp	r0, #0
1000852a:	d12d      	bne.n	10008588 <mpu_get_temperature+0x84>
        return -1;
    raw = (tmp[0] << 8) | tmp[1];
1000852c:	ab03      	add	r3, sp, #12
1000852e:	781c      	ldrb	r4, [r3, #0]
10008530:	0224      	lsls	r4, r4, #8
10008532:	785b      	ldrb	r3, [r3, #1]
10008534:	431c      	orrs	r4, r3
10008536:	b224      	sxth	r4, r4
    if (timestamp)
10008538:	2e00      	cmp	r6, #0
1000853a:	d002      	beq.n	10008542 <mpu_get_temperature+0x3e>
        get_ms(timestamp);
1000853c:	0030      	movs	r0, r6
1000853e:	4b17      	ldr	r3, [pc, #92]	; (1000859c <mpu_get_temperature+0x98>)
10008540:	4798      	blx	r3

    data[0] = (long)((35 + ((raw - (float)st.hw->temp_offset) / st.hw->temp_sens)) * 65536L);
10008542:	4b14      	ldr	r3, [pc, #80]	; (10008594 <mpu_get_temperature+0x90>)
10008544:	685d      	ldr	r5, [r3, #4]
10008546:	4e16      	ldr	r6, [pc, #88]	; (100085a0 <mpu_get_temperature+0x9c>)
10008548:	0020      	movs	r0, r4
1000854a:	47b0      	blx	r6
1000854c:	1c04      	adds	r4, r0, #0
1000854e:	2308      	movs	r3, #8
10008550:	5ee8      	ldrsh	r0, [r5, r3]
10008552:	47b0      	blx	r6
10008554:	1c01      	adds	r1, r0, #0
10008556:	1c20      	adds	r0, r4, #0
10008558:	4b12      	ldr	r3, [pc, #72]	; (100085a4 <mpu_get_temperature+0xa0>)
1000855a:	4798      	blx	r3
1000855c:	1c04      	adds	r4, r0, #0
1000855e:	88e8      	ldrh	r0, [r5, #6]
10008560:	47b0      	blx	r6
10008562:	1c01      	adds	r1, r0, #0
10008564:	1c20      	adds	r0, r4, #0
10008566:	4b10      	ldr	r3, [pc, #64]	; (100085a8 <mpu_get_temperature+0xa4>)
10008568:	4798      	blx	r3
1000856a:	4910      	ldr	r1, [pc, #64]	; (100085ac <mpu_get_temperature+0xa8>)
1000856c:	4b10      	ldr	r3, [pc, #64]	; (100085b0 <mpu_get_temperature+0xac>)
1000856e:	4798      	blx	r3
10008570:	218f      	movs	r1, #143	; 0x8f
10008572:	05c9      	lsls	r1, r1, #23
10008574:	4b0f      	ldr	r3, [pc, #60]	; (100085b4 <mpu_get_temperature+0xb0>)
10008576:	4798      	blx	r3
10008578:	4b0f      	ldr	r3, [pc, #60]	; (100085b8 <mpu_get_temperature+0xb4>)
1000857a:	4798      	blx	r3
1000857c:	6038      	str	r0, [r7, #0]
    return 0;
1000857e:	e006      	b.n	1000858e <mpu_get_temperature+0x8a>
{
    unsigned char tmp[2];
    short raw;

    if (!(st.chip_cfg.sensors))
        return -1;
10008580:	2301      	movs	r3, #1
10008582:	425b      	negs	r3, r3
10008584:	9301      	str	r3, [sp, #4]
10008586:	e002      	b.n	1000858e <mpu_get_temperature+0x8a>

    if (i2c_read(st.hw->addr, st.reg->temp, 2, tmp))
        return -1;
10008588:	2301      	movs	r3, #1
1000858a:	425b      	negs	r3, r3
1000858c:	9301      	str	r3, [sp, #4]
    if (timestamp)
        get_ms(timestamp);

    data[0] = (long)((35 + ((raw - (float)st.hw->temp_offset) / st.hw->temp_sens)) * 65536L);
    return 0;
}
1000858e:	9801      	ldr	r0, [sp, #4]
10008590:	b005      	add	sp, #20
10008592:	bdf0      	pop	{r4, r5, r6, r7, pc}
10008594:	1001818c 	.word	0x1001818c
10008598:	1000ab89 	.word	0x1000ab89
1000859c:	1000b245 	.word	0x1000b245
100085a0:	10013dfd 	.word	0x10013dfd
100085a4:	10013aad 	.word	0x10013aad
100085a8:	100134f1 	.word	0x100134f1
100085ac:	420c0000 	.word	0x420c0000
100085b0:	10013205 	.word	0x10013205
100085b4:	10013885 	.word	0x10013885
100085b8:	10013db9 	.word	0x10013db9

100085bc <mpu_reset_fifo>:
/**
 *  @brief  Reset FIFO read/write pointers.
 *  @return 0 if successful.
 */
int mpu_reset_fifo(void)
{
100085bc:	b510      	push	{r4, lr}
100085be:	b082      	sub	sp, #8
    unsigned char data;

    if (!(st.chip_cfg.sensors))
100085c0:	4b79      	ldr	r3, [pc, #484]	; (100087a8 <mpu_reset_fifo+0x1ec>)
100085c2:	7a9b      	ldrb	r3, [r3, #10]
100085c4:	2b00      	cmp	r3, #0
100085c6:	d100      	bne.n	100085ca <mpu_reset_fifo+0xe>
100085c8:	e0ce      	b.n	10008768 <mpu_reset_fifo+0x1ac>
        return -1;

    data = 0;
100085ca:	466b      	mov	r3, sp
100085cc:	3307      	adds	r3, #7
100085ce:	2200      	movs	r2, #0
100085d0:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
100085d2:	4a75      	ldr	r2, [pc, #468]	; (100087a8 <mpu_reset_fifo+0x1ec>)
100085d4:	6811      	ldr	r1, [r2, #0]
100085d6:	7c49      	ldrb	r1, [r1, #17]
100085d8:	6852      	ldr	r2, [r2, #4]
100085da:	7810      	ldrb	r0, [r2, #0]
100085dc:	2201      	movs	r2, #1
100085de:	4c73      	ldr	r4, [pc, #460]	; (100087ac <mpu_reset_fifo+0x1f0>)
100085e0:	47a0      	blx	r4
100085e2:	2800      	cmp	r0, #0
100085e4:	d000      	beq.n	100085e8 <mpu_reset_fifo+0x2c>
100085e6:	e0c2      	b.n	1000876e <mpu_reset_fifo+0x1b2>
        return -1;
    if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
100085e8:	4b6f      	ldr	r3, [pc, #444]	; (100087a8 <mpu_reset_fifo+0x1ec>)
100085ea:	681a      	ldr	r2, [r3, #0]
100085ec:	7951      	ldrb	r1, [r2, #5]
100085ee:	685b      	ldr	r3, [r3, #4]
100085f0:	7818      	ldrb	r0, [r3, #0]
100085f2:	466b      	mov	r3, sp
100085f4:	3307      	adds	r3, #7
100085f6:	2201      	movs	r2, #1
100085f8:	4c6c      	ldr	r4, [pc, #432]	; (100087ac <mpu_reset_fifo+0x1f0>)
100085fa:	47a0      	blx	r4
100085fc:	2800      	cmp	r0, #0
100085fe:	d000      	beq.n	10008602 <mpu_reset_fifo+0x46>
10008600:	e0b8      	b.n	10008774 <mpu_reset_fifo+0x1b8>
        return -1;
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
10008602:	4b69      	ldr	r3, [pc, #420]	; (100087a8 <mpu_reset_fifo+0x1ec>)
10008604:	681a      	ldr	r2, [r3, #0]
10008606:	7911      	ldrb	r1, [r2, #4]
10008608:	685b      	ldr	r3, [r3, #4]
1000860a:	7818      	ldrb	r0, [r3, #0]
1000860c:	466b      	mov	r3, sp
1000860e:	3307      	adds	r3, #7
10008610:	2201      	movs	r2, #1
10008612:	4c66      	ldr	r4, [pc, #408]	; (100087ac <mpu_reset_fifo+0x1f0>)
10008614:	47a0      	blx	r4
10008616:	2800      	cmp	r0, #0
10008618:	d000      	beq.n	1000861c <mpu_reset_fifo+0x60>
1000861a:	e0ae      	b.n	1000877a <mpu_reset_fifo+0x1be>
        return -1;

    if (st.chip_cfg.dmp_on) {
1000861c:	2324      	movs	r3, #36	; 0x24
1000861e:	4a62      	ldr	r2, [pc, #392]	; (100087a8 <mpu_reset_fifo+0x1ec>)
10008620:	5cd3      	ldrb	r3, [r2, r3]
10008622:	2b00      	cmp	r3, #0
10008624:	d04f      	beq.n	100086c6 <mpu_reset_fifo+0x10a>
        data = BIT_FIFO_RST | BIT_DMP_RST;
10008626:	466b      	mov	r3, sp
10008628:	3307      	adds	r3, #7
1000862a:	220c      	movs	r2, #12
1000862c:	701a      	strb	r2, [r3, #0]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
1000862e:	4a5e      	ldr	r2, [pc, #376]	; (100087a8 <mpu_reset_fifo+0x1ec>)
10008630:	6811      	ldr	r1, [r2, #0]
10008632:	7909      	ldrb	r1, [r1, #4]
10008634:	6852      	ldr	r2, [r2, #4]
10008636:	7810      	ldrb	r0, [r2, #0]
10008638:	2201      	movs	r2, #1
1000863a:	4c5c      	ldr	r4, [pc, #368]	; (100087ac <mpu_reset_fifo+0x1f0>)
1000863c:	47a0      	blx	r4
1000863e:	2800      	cmp	r0, #0
10008640:	d000      	beq.n	10008644 <mpu_reset_fifo+0x88>
10008642:	e09d      	b.n	10008780 <mpu_reset_fifo+0x1c4>
            return -1;
        delay_ms(50);
10008644:	3032      	adds	r0, #50	; 0x32
10008646:	4b5a      	ldr	r3, [pc, #360]	; (100087b0 <mpu_reset_fifo+0x1f4>)
10008648:	4798      	blx	r3
        data = BIT_DMP_EN | BIT_FIFO_EN;
1000864a:	22c0      	movs	r2, #192	; 0xc0
1000864c:	466b      	mov	r3, sp
1000864e:	71da      	strb	r2, [r3, #7]
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
10008650:	4b55      	ldr	r3, [pc, #340]	; (100087a8 <mpu_reset_fifo+0x1ec>)
10008652:	7a9b      	ldrb	r3, [r3, #10]
10008654:	07db      	lsls	r3, r3, #31
10008656:	d502      	bpl.n	1000865e <mpu_reset_fifo+0xa2>
            data |= BIT_AUX_IF_EN;
10008658:	3220      	adds	r2, #32
1000865a:	466b      	mov	r3, sp
1000865c:	71da      	strb	r2, [r3, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
1000865e:	4b52      	ldr	r3, [pc, #328]	; (100087a8 <mpu_reset_fifo+0x1ec>)
10008660:	681a      	ldr	r2, [r3, #0]
10008662:	7911      	ldrb	r1, [r2, #4]
10008664:	685b      	ldr	r3, [r3, #4]
10008666:	7818      	ldrb	r0, [r3, #0]
10008668:	466b      	mov	r3, sp
1000866a:	3307      	adds	r3, #7
1000866c:	2201      	movs	r2, #1
1000866e:	4c4f      	ldr	r4, [pc, #316]	; (100087ac <mpu_reset_fifo+0x1f0>)
10008670:	47a0      	blx	r4
10008672:	2800      	cmp	r0, #0
10008674:	d000      	beq.n	10008678 <mpu_reset_fifo+0xbc>
10008676:	e086      	b.n	10008786 <mpu_reset_fifo+0x1ca>
            return -1;
        if (st.chip_cfg.int_enable)
10008678:	4b4b      	ldr	r3, [pc, #300]	; (100087a8 <mpu_reset_fifo+0x1ec>)
1000867a:	7c5b      	ldrb	r3, [r3, #17]
1000867c:	2b00      	cmp	r3, #0
1000867e:	d003      	beq.n	10008688 <mpu_reset_fifo+0xcc>
            data = BIT_DMP_INT_EN;
10008680:	2202      	movs	r2, #2
10008682:	466b      	mov	r3, sp
10008684:	71da      	strb	r2, [r3, #7]
10008686:	e002      	b.n	1000868e <mpu_reset_fifo+0xd2>
        else
            data = 0;
10008688:	2200      	movs	r2, #0
1000868a:	466b      	mov	r3, sp
1000868c:	71da      	strb	r2, [r3, #7]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
1000868e:	4b46      	ldr	r3, [pc, #280]	; (100087a8 <mpu_reset_fifo+0x1ec>)
10008690:	681a      	ldr	r2, [r3, #0]
10008692:	7c51      	ldrb	r1, [r2, #17]
10008694:	685b      	ldr	r3, [r3, #4]
10008696:	7818      	ldrb	r0, [r3, #0]
10008698:	466b      	mov	r3, sp
1000869a:	3307      	adds	r3, #7
1000869c:	2201      	movs	r2, #1
1000869e:	4c43      	ldr	r4, [pc, #268]	; (100087ac <mpu_reset_fifo+0x1f0>)
100086a0:	47a0      	blx	r4
100086a2:	2800      	cmp	r0, #0
100086a4:	d172      	bne.n	1000878c <mpu_reset_fifo+0x1d0>
            return -1;
        data = 0;
100086a6:	466b      	mov	r3, sp
100086a8:	3307      	adds	r3, #7
100086aa:	2200      	movs	r2, #0
100086ac:	701a      	strb	r2, [r3, #0]
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
100086ae:	4a3e      	ldr	r2, [pc, #248]	; (100087a8 <mpu_reset_fifo+0x1ec>)
100086b0:	6811      	ldr	r1, [r2, #0]
100086b2:	7949      	ldrb	r1, [r1, #5]
100086b4:	6852      	ldr	r2, [r2, #4]
100086b6:	7810      	ldrb	r0, [r2, #0]
100086b8:	2201      	movs	r2, #1
100086ba:	4c3c      	ldr	r4, [pc, #240]	; (100087ac <mpu_reset_fifo+0x1f0>)
100086bc:	47a0      	blx	r4
100086be:	1e43      	subs	r3, r0, #1
100086c0:	4198      	sbcs	r0, r3
100086c2:	4240      	negs	r0, r0
100086c4:	e06d      	b.n	100087a2 <mpu_reset_fifo+0x1e6>
            return -1;
    } else {
        data = BIT_FIFO_RST;
100086c6:	466b      	mov	r3, sp
100086c8:	3307      	adds	r3, #7
100086ca:	2204      	movs	r2, #4
100086cc:	701a      	strb	r2, [r3, #0]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
100086ce:	4a36      	ldr	r2, [pc, #216]	; (100087a8 <mpu_reset_fifo+0x1ec>)
100086d0:	6811      	ldr	r1, [r2, #0]
100086d2:	7909      	ldrb	r1, [r1, #4]
100086d4:	6852      	ldr	r2, [r2, #4]
100086d6:	7810      	ldrb	r0, [r2, #0]
100086d8:	2201      	movs	r2, #1
100086da:	4c34      	ldr	r4, [pc, #208]	; (100087ac <mpu_reset_fifo+0x1f0>)
100086dc:	47a0      	blx	r4
100086de:	2800      	cmp	r0, #0
100086e0:	d157      	bne.n	10008792 <mpu_reset_fifo+0x1d6>
            return -1;
        if (st.chip_cfg.bypass_mode || !(st.chip_cfg.sensors & INV_XYZ_COMPASS))
100086e2:	4b31      	ldr	r3, [pc, #196]	; (100087a8 <mpu_reset_fifo+0x1ec>)
100086e4:	7c9b      	ldrb	r3, [r3, #18]
100086e6:	2b00      	cmp	r3, #0
100086e8:	d103      	bne.n	100086f2 <mpu_reset_fifo+0x136>
100086ea:	4b2f      	ldr	r3, [pc, #188]	; (100087a8 <mpu_reset_fifo+0x1ec>)
100086ec:	7a9b      	ldrb	r3, [r3, #10]
100086ee:	07db      	lsls	r3, r3, #31
100086f0:	d403      	bmi.n	100086fa <mpu_reset_fifo+0x13e>
            data = BIT_FIFO_EN;
100086f2:	2240      	movs	r2, #64	; 0x40
100086f4:	466b      	mov	r3, sp
100086f6:	71da      	strb	r2, [r3, #7]
100086f8:	e002      	b.n	10008700 <mpu_reset_fifo+0x144>
        else
            data = BIT_FIFO_EN | BIT_AUX_IF_EN;
100086fa:	2260      	movs	r2, #96	; 0x60
100086fc:	466b      	mov	r3, sp
100086fe:	71da      	strb	r2, [r3, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
10008700:	4b29      	ldr	r3, [pc, #164]	; (100087a8 <mpu_reset_fifo+0x1ec>)
10008702:	681a      	ldr	r2, [r3, #0]
10008704:	7911      	ldrb	r1, [r2, #4]
10008706:	685b      	ldr	r3, [r3, #4]
10008708:	7818      	ldrb	r0, [r3, #0]
1000870a:	466b      	mov	r3, sp
1000870c:	3307      	adds	r3, #7
1000870e:	2201      	movs	r2, #1
10008710:	4c26      	ldr	r4, [pc, #152]	; (100087ac <mpu_reset_fifo+0x1f0>)
10008712:	47a0      	blx	r4
10008714:	2800      	cmp	r0, #0
10008716:	d13f      	bne.n	10008798 <mpu_reset_fifo+0x1dc>
            return -1;
        delay_ms(50);
10008718:	3032      	adds	r0, #50	; 0x32
1000871a:	4b25      	ldr	r3, [pc, #148]	; (100087b0 <mpu_reset_fifo+0x1f4>)
1000871c:	4798      	blx	r3
        if (st.chip_cfg.int_enable)
1000871e:	4b22      	ldr	r3, [pc, #136]	; (100087a8 <mpu_reset_fifo+0x1ec>)
10008720:	7c5b      	ldrb	r3, [r3, #17]
10008722:	2b00      	cmp	r3, #0
10008724:	d003      	beq.n	1000872e <mpu_reset_fifo+0x172>
            data = BIT_DATA_RDY_EN;
10008726:	2201      	movs	r2, #1
10008728:	466b      	mov	r3, sp
1000872a:	71da      	strb	r2, [r3, #7]
1000872c:	e002      	b.n	10008734 <mpu_reset_fifo+0x178>
        else
            data = 0;
1000872e:	2200      	movs	r2, #0
10008730:	466b      	mov	r3, sp
10008732:	71da      	strb	r2, [r3, #7]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
10008734:	4b1c      	ldr	r3, [pc, #112]	; (100087a8 <mpu_reset_fifo+0x1ec>)
10008736:	681a      	ldr	r2, [r3, #0]
10008738:	7c51      	ldrb	r1, [r2, #17]
1000873a:	685b      	ldr	r3, [r3, #4]
1000873c:	7818      	ldrb	r0, [r3, #0]
1000873e:	466b      	mov	r3, sp
10008740:	3307      	adds	r3, #7
10008742:	2201      	movs	r2, #1
10008744:	4c19      	ldr	r4, [pc, #100]	; (100087ac <mpu_reset_fifo+0x1f0>)
10008746:	47a0      	blx	r4
10008748:	2800      	cmp	r0, #0
1000874a:	d128      	bne.n	1000879e <mpu_reset_fifo+0x1e2>
            return -1;
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &st.chip_cfg.fifo_enable))
1000874c:	4a16      	ldr	r2, [pc, #88]	; (100087a8 <mpu_reset_fifo+0x1ec>)
1000874e:	0013      	movs	r3, r2
10008750:	3310      	adds	r3, #16
10008752:	6811      	ldr	r1, [r2, #0]
10008754:	7949      	ldrb	r1, [r1, #5]
10008756:	6852      	ldr	r2, [r2, #4]
10008758:	7810      	ldrb	r0, [r2, #0]
1000875a:	2201      	movs	r2, #1
1000875c:	4c13      	ldr	r4, [pc, #76]	; (100087ac <mpu_reset_fifo+0x1f0>)
1000875e:	47a0      	blx	r4
10008760:	1e43      	subs	r3, r0, #1
10008762:	4198      	sbcs	r0, r3
10008764:	4240      	negs	r0, r0
10008766:	e01c      	b.n	100087a2 <mpu_reset_fifo+0x1e6>
int mpu_reset_fifo(void)
{
    unsigned char data;

    if (!(st.chip_cfg.sensors))
        return -1;
10008768:	2001      	movs	r0, #1
1000876a:	4240      	negs	r0, r0
1000876c:	e019      	b.n	100087a2 <mpu_reset_fifo+0x1e6>

    data = 0;
    if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
        return -1;
1000876e:	2001      	movs	r0, #1
10008770:	4240      	negs	r0, r0
10008772:	e016      	b.n	100087a2 <mpu_reset_fifo+0x1e6>
    if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
        return -1;
10008774:	2001      	movs	r0, #1
10008776:	4240      	negs	r0, r0
10008778:	e013      	b.n	100087a2 <mpu_reset_fifo+0x1e6>
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
        return -1;
1000877a:	2001      	movs	r0, #1
1000877c:	4240      	negs	r0, r0
1000877e:	e010      	b.n	100087a2 <mpu_reset_fifo+0x1e6>

    if (st.chip_cfg.dmp_on) {
        data = BIT_FIFO_RST | BIT_DMP_RST;
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
            return -1;
10008780:	2001      	movs	r0, #1
10008782:	4240      	negs	r0, r0
10008784:	e00d      	b.n	100087a2 <mpu_reset_fifo+0x1e6>
        delay_ms(50);
        data = BIT_DMP_EN | BIT_FIFO_EN;
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
            data |= BIT_AUX_IF_EN;
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
            return -1;
10008786:	2001      	movs	r0, #1
10008788:	4240      	negs	r0, r0
1000878a:	e00a      	b.n	100087a2 <mpu_reset_fifo+0x1e6>
        if (st.chip_cfg.int_enable)
            data = BIT_DMP_INT_EN;
        else
            data = 0;
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
            return -1;
1000878c:	2001      	movs	r0, #1
1000878e:	4240      	negs	r0, r0
10008790:	e007      	b.n	100087a2 <mpu_reset_fifo+0x1e6>
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
            return -1;
    } else {
        data = BIT_FIFO_RST;
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
            return -1;
10008792:	2001      	movs	r0, #1
10008794:	4240      	negs	r0, r0
10008796:	e004      	b.n	100087a2 <mpu_reset_fifo+0x1e6>
        if (st.chip_cfg.bypass_mode || !(st.chip_cfg.sensors & INV_XYZ_COMPASS))
            data = BIT_FIFO_EN;
        else
            data = BIT_FIFO_EN | BIT_AUX_IF_EN;
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
            return -1;
10008798:	2001      	movs	r0, #1
1000879a:	4240      	negs	r0, r0
1000879c:	e001      	b.n	100087a2 <mpu_reset_fifo+0x1e6>
        if (st.chip_cfg.int_enable)
            data = BIT_DATA_RDY_EN;
        else
            data = 0;
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
            return -1;
1000879e:	2001      	movs	r0, #1
100087a0:	4240      	negs	r0, r0
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &st.chip_cfg.fifo_enable))
            return -1;
    }
    return 0;
}
100087a2:	b002      	add	sp, #8
100087a4:	bd10      	pop	{r4, pc}
100087a6:	46c0      	nop			; (mov r8, r8)
100087a8:	1001818c 	.word	0x1001818c
100087ac:	1000ab2d 	.word	0x1000ab2d
100087b0:	10008129 	.word	0x10008129

100087b4 <mpu_set_gyro_fsr>:
 *  @brief      Set the gyro full-scale range.
 *  @param[in]  fsr Desired full-scale range.
 *  @return     0 if successful.
 */
int mpu_set_gyro_fsr(unsigned short fsr)
{
100087b4:	b510      	push	{r4, lr}
100087b6:	b082      	sub	sp, #8
    unsigned char data;

    if (!(st.chip_cfg.sensors))
100087b8:	4b24      	ldr	r3, [pc, #144]	; (1000884c <mpu_set_gyro_fsr+0x98>)
100087ba:	7a9b      	ldrb	r3, [r3, #10]
100087bc:	2b00      	cmp	r3, #0
100087be:	d03b      	beq.n	10008838 <mpu_set_gyro_fsr+0x84>
        return -1;

    switch (fsr) {
100087c0:	23fa      	movs	r3, #250	; 0xfa
100087c2:	005b      	lsls	r3, r3, #1
100087c4:	4298      	cmp	r0, r3
100087c6:	d010      	beq.n	100087ea <mpu_set_gyro_fsr+0x36>
100087c8:	d802      	bhi.n	100087d0 <mpu_set_gyro_fsr+0x1c>
100087ca:	28fa      	cmp	r0, #250	; 0xfa
100087cc:	d009      	beq.n	100087e2 <mpu_set_gyro_fsr+0x2e>
100087ce:	e036      	b.n	1000883e <mpu_set_gyro_fsr+0x8a>
100087d0:	23fa      	movs	r3, #250	; 0xfa
100087d2:	009b      	lsls	r3, r3, #2
100087d4:	4298      	cmp	r0, r3
100087d6:	d00c      	beq.n	100087f2 <mpu_set_gyro_fsr+0x3e>
100087d8:	23fa      	movs	r3, #250	; 0xfa
100087da:	00db      	lsls	r3, r3, #3
100087dc:	4298      	cmp	r0, r3
100087de:	d00c      	beq.n	100087fa <mpu_set_gyro_fsr+0x46>
100087e0:	e02d      	b.n	1000883e <mpu_set_gyro_fsr+0x8a>
    case 250:
        data = INV_FSR_250DPS << 3;
100087e2:	2200      	movs	r2, #0
100087e4:	466b      	mov	r3, sp
100087e6:	71da      	strb	r2, [r3, #7]
        break;
100087e8:	e00a      	b.n	10008800 <mpu_set_gyro_fsr+0x4c>
    case 500:
        data = INV_FSR_500DPS << 3;
100087ea:	2208      	movs	r2, #8
100087ec:	466b      	mov	r3, sp
100087ee:	71da      	strb	r2, [r3, #7]
        break;
100087f0:	e006      	b.n	10008800 <mpu_set_gyro_fsr+0x4c>
    case 1000:
        data = INV_FSR_1000DPS << 3;
100087f2:	2210      	movs	r2, #16
100087f4:	466b      	mov	r3, sp
100087f6:	71da      	strb	r2, [r3, #7]
        break;
100087f8:	e002      	b.n	10008800 <mpu_set_gyro_fsr+0x4c>
    case 2000:
        data = INV_FSR_2000DPS << 3;
100087fa:	2218      	movs	r2, #24
100087fc:	466b      	mov	r3, sp
100087fe:	71da      	strb	r2, [r3, #7]
        break;
    default:
        return -1;
    }

    if (st.chip_cfg.gyro_fsr == (data >> 3))
10008800:	466b      	mov	r3, sp
10008802:	3307      	adds	r3, #7
10008804:	781b      	ldrb	r3, [r3, #0]
10008806:	4a11      	ldr	r2, [pc, #68]	; (1000884c <mpu_set_gyro_fsr+0x98>)
10008808:	7a12      	ldrb	r2, [r2, #8]
1000880a:	08db      	lsrs	r3, r3, #3
        return 0;
1000880c:	2000      	movs	r0, #0
        break;
    default:
        return -1;
    }

    if (st.chip_cfg.gyro_fsr == (data >> 3))
1000880e:	429a      	cmp	r2, r3
10008810:	d01a      	beq.n	10008848 <mpu_set_gyro_fsr+0x94>
        return 0;
    if (i2c_write(st.hw->addr, st.reg->gyro_cfg, 1, &data))
10008812:	4b0e      	ldr	r3, [pc, #56]	; (1000884c <mpu_set_gyro_fsr+0x98>)
10008814:	681a      	ldr	r2, [r3, #0]
10008816:	7991      	ldrb	r1, [r2, #6]
10008818:	685b      	ldr	r3, [r3, #4]
1000881a:	7818      	ldrb	r0, [r3, #0]
1000881c:	466b      	mov	r3, sp
1000881e:	3307      	adds	r3, #7
10008820:	2201      	movs	r2, #1
10008822:	4c0b      	ldr	r4, [pc, #44]	; (10008850 <mpu_set_gyro_fsr+0x9c>)
10008824:	47a0      	blx	r4
10008826:	2800      	cmp	r0, #0
10008828:	d10c      	bne.n	10008844 <mpu_set_gyro_fsr+0x90>
        return -1;
    st.chip_cfg.gyro_fsr = data >> 3;
1000882a:	466b      	mov	r3, sp
1000882c:	3307      	adds	r3, #7
1000882e:	781b      	ldrb	r3, [r3, #0]
10008830:	08db      	lsrs	r3, r3, #3
10008832:	4a06      	ldr	r2, [pc, #24]	; (1000884c <mpu_set_gyro_fsr+0x98>)
10008834:	7213      	strb	r3, [r2, #8]
    return 0;
10008836:	e007      	b.n	10008848 <mpu_set_gyro_fsr+0x94>
int mpu_set_gyro_fsr(unsigned short fsr)
{
    unsigned char data;

    if (!(st.chip_cfg.sensors))
        return -1;
10008838:	2001      	movs	r0, #1
1000883a:	4240      	negs	r0, r0
1000883c:	e004      	b.n	10008848 <mpu_set_gyro_fsr+0x94>
        break;
    case 2000:
        data = INV_FSR_2000DPS << 3;
        break;
    default:
        return -1;
1000883e:	2001      	movs	r0, #1
10008840:	4240      	negs	r0, r0
10008842:	e001      	b.n	10008848 <mpu_set_gyro_fsr+0x94>
    }

    if (st.chip_cfg.gyro_fsr == (data >> 3))
        return 0;
    if (i2c_write(st.hw->addr, st.reg->gyro_cfg, 1, &data))
        return -1;
10008844:	2001      	movs	r0, #1
10008846:	4240      	negs	r0, r0
    st.chip_cfg.gyro_fsr = data >> 3;
    return 0;
}
10008848:	b002      	add	sp, #8
1000884a:	bd10      	pop	{r4, pc}
1000884c:	1001818c 	.word	0x1001818c
10008850:	1000ab2d 	.word	0x1000ab2d

10008854 <mpu_get_accel_fsr>:
 *  @param[out] fsr Current full-scale range.
 *  @return     0 if successful.
 */
int mpu_get_accel_fsr(unsigned char *fsr)
{
    switch (st.chip_cfg.accel_fsr) {
10008854:	4b11      	ldr	r3, [pc, #68]	; (1000889c <mpu_get_accel_fsr+0x48>)
10008856:	7a5b      	ldrb	r3, [r3, #9]
10008858:	2b01      	cmp	r3, #1
1000885a:	d009      	beq.n	10008870 <mpu_get_accel_fsr+0x1c>
1000885c:	2b00      	cmp	r3, #0
1000885e:	d004      	beq.n	1000886a <mpu_get_accel_fsr+0x16>
10008860:	2b02      	cmp	r3, #2
10008862:	d008      	beq.n	10008876 <mpu_get_accel_fsr+0x22>
10008864:	2b03      	cmp	r3, #3
10008866:	d009      	beq.n	1000887c <mpu_get_accel_fsr+0x28>
10008868:	e014      	b.n	10008894 <mpu_get_accel_fsr+0x40>
    case INV_FSR_2G:
        fsr[0] = 2;
1000886a:	2302      	movs	r3, #2
1000886c:	7003      	strb	r3, [r0, #0]
        break;
1000886e:	e007      	b.n	10008880 <mpu_get_accel_fsr+0x2c>
    case INV_FSR_4G:
        fsr[0] = 4;
10008870:	2304      	movs	r3, #4
10008872:	7003      	strb	r3, [r0, #0]
        break;
10008874:	e004      	b.n	10008880 <mpu_get_accel_fsr+0x2c>
    case INV_FSR_8G:
        fsr[0] = 8;
10008876:	2308      	movs	r3, #8
10008878:	7003      	strb	r3, [r0, #0]
        break;
1000887a:	e001      	b.n	10008880 <mpu_get_accel_fsr+0x2c>
    case INV_FSR_16G:
        fsr[0] = 16;
1000887c:	2310      	movs	r3, #16
1000887e:	7003      	strb	r3, [r0, #0]
        break;
    default:
        return -1;
    }
    if (st.chip_cfg.accel_half)
10008880:	4b06      	ldr	r3, [pc, #24]	; (1000889c <mpu_get_accel_fsr+0x48>)
10008882:	7cda      	ldrb	r2, [r3, #19]
        fsr[0] <<= 1;
    return 0;
10008884:	2300      	movs	r3, #0
        fsr[0] = 16;
        break;
    default:
        return -1;
    }
    if (st.chip_cfg.accel_half)
10008886:	2a00      	cmp	r2, #0
10008888:	d006      	beq.n	10008898 <mpu_get_accel_fsr+0x44>
        fsr[0] <<= 1;
1000888a:	7803      	ldrb	r3, [r0, #0]
1000888c:	005b      	lsls	r3, r3, #1
1000888e:	7003      	strb	r3, [r0, #0]
    return 0;
10008890:	2300      	movs	r3, #0
10008892:	e001      	b.n	10008898 <mpu_get_accel_fsr+0x44>
        break;
    case INV_FSR_16G:
        fsr[0] = 16;
        break;
    default:
        return -1;
10008894:	2301      	movs	r3, #1
10008896:	425b      	negs	r3, r3
    }
    if (st.chip_cfg.accel_half)
        fsr[0] <<= 1;
    return 0;
}
10008898:	0018      	movs	r0, r3
1000889a:	4770      	bx	lr
1000889c:	1001818c 	.word	0x1001818c

100088a0 <mpu_set_accel_fsr>:
 *  @brief      Set the accel full-scale range.
 *  @param[in]  fsr Desired full-scale range.
 *  @return     0 if successful.
 */
int mpu_set_accel_fsr(unsigned char fsr)
{
100088a0:	b510      	push	{r4, lr}
100088a2:	b082      	sub	sp, #8
    unsigned char data;

    if (!(st.chip_cfg.sensors))
100088a4:	4b21      	ldr	r3, [pc, #132]	; (1000892c <mpu_set_accel_fsr+0x8c>)
100088a6:	7a9b      	ldrb	r3, [r3, #10]
100088a8:	2b00      	cmp	r3, #0
100088aa:	d035      	beq.n	10008918 <mpu_set_accel_fsr+0x78>
        return -1;

    switch (fsr) {
100088ac:	2804      	cmp	r0, #4
100088ae:	d00c      	beq.n	100088ca <mpu_set_accel_fsr+0x2a>
100088b0:	d802      	bhi.n	100088b8 <mpu_set_accel_fsr+0x18>
100088b2:	2802      	cmp	r0, #2
100088b4:	d005      	beq.n	100088c2 <mpu_set_accel_fsr+0x22>
100088b6:	e032      	b.n	1000891e <mpu_set_accel_fsr+0x7e>
100088b8:	2808      	cmp	r0, #8
100088ba:	d00a      	beq.n	100088d2 <mpu_set_accel_fsr+0x32>
100088bc:	2810      	cmp	r0, #16
100088be:	d00c      	beq.n	100088da <mpu_set_accel_fsr+0x3a>
100088c0:	e02d      	b.n	1000891e <mpu_set_accel_fsr+0x7e>
    case 2:
        data = INV_FSR_2G << 3;
100088c2:	2200      	movs	r2, #0
100088c4:	466b      	mov	r3, sp
100088c6:	71da      	strb	r2, [r3, #7]
        break;
100088c8:	e00a      	b.n	100088e0 <mpu_set_accel_fsr+0x40>
    case 4:
        data = INV_FSR_4G << 3;
100088ca:	2208      	movs	r2, #8
100088cc:	466b      	mov	r3, sp
100088ce:	71da      	strb	r2, [r3, #7]
        break;
100088d0:	e006      	b.n	100088e0 <mpu_set_accel_fsr+0x40>
    case 8:
        data = INV_FSR_8G << 3;
100088d2:	2210      	movs	r2, #16
100088d4:	466b      	mov	r3, sp
100088d6:	71da      	strb	r2, [r3, #7]
        break;
100088d8:	e002      	b.n	100088e0 <mpu_set_accel_fsr+0x40>
    case 16:
        data = INV_FSR_16G << 3;
100088da:	2218      	movs	r2, #24
100088dc:	466b      	mov	r3, sp
100088de:	71da      	strb	r2, [r3, #7]
        break;
    default:
        return -1;
    }

    if (st.chip_cfg.accel_fsr == (data >> 3))
100088e0:	466b      	mov	r3, sp
100088e2:	3307      	adds	r3, #7
100088e4:	781b      	ldrb	r3, [r3, #0]
100088e6:	4a11      	ldr	r2, [pc, #68]	; (1000892c <mpu_set_accel_fsr+0x8c>)
100088e8:	7a52      	ldrb	r2, [r2, #9]
100088ea:	08db      	lsrs	r3, r3, #3
        return 0;
100088ec:	2000      	movs	r0, #0
        break;
    default:
        return -1;
    }

    if (st.chip_cfg.accel_fsr == (data >> 3))
100088ee:	429a      	cmp	r2, r3
100088f0:	d01a      	beq.n	10008928 <mpu_set_accel_fsr+0x88>
        return 0;
    if (i2c_write(st.hw->addr, st.reg->accel_cfg, 1, &data))
100088f2:	4b0e      	ldr	r3, [pc, #56]	; (1000892c <mpu_set_accel_fsr+0x8c>)
100088f4:	681a      	ldr	r2, [r3, #0]
100088f6:	79d1      	ldrb	r1, [r2, #7]
100088f8:	685b      	ldr	r3, [r3, #4]
100088fa:	7818      	ldrb	r0, [r3, #0]
100088fc:	466b      	mov	r3, sp
100088fe:	3307      	adds	r3, #7
10008900:	2201      	movs	r2, #1
10008902:	4c0b      	ldr	r4, [pc, #44]	; (10008930 <mpu_set_accel_fsr+0x90>)
10008904:	47a0      	blx	r4
10008906:	2800      	cmp	r0, #0
10008908:	d10c      	bne.n	10008924 <mpu_set_accel_fsr+0x84>
        return -1;
    st.chip_cfg.accel_fsr = data >> 3;
1000890a:	466b      	mov	r3, sp
1000890c:	3307      	adds	r3, #7
1000890e:	781b      	ldrb	r3, [r3, #0]
10008910:	08db      	lsrs	r3, r3, #3
10008912:	4a06      	ldr	r2, [pc, #24]	; (1000892c <mpu_set_accel_fsr+0x8c>)
10008914:	7253      	strb	r3, [r2, #9]
    return 0;
10008916:	e007      	b.n	10008928 <mpu_set_accel_fsr+0x88>
int mpu_set_accel_fsr(unsigned char fsr)
{
    unsigned char data;

    if (!(st.chip_cfg.sensors))
        return -1;
10008918:	2001      	movs	r0, #1
1000891a:	4240      	negs	r0, r0
1000891c:	e004      	b.n	10008928 <mpu_set_accel_fsr+0x88>
        break;
    case 16:
        data = INV_FSR_16G << 3;
        break;
    default:
        return -1;
1000891e:	2001      	movs	r0, #1
10008920:	4240      	negs	r0, r0
10008922:	e001      	b.n	10008928 <mpu_set_accel_fsr+0x88>
    }

    if (st.chip_cfg.accel_fsr == (data >> 3))
        return 0;
    if (i2c_write(st.hw->addr, st.reg->accel_cfg, 1, &data))
        return -1;
10008924:	2001      	movs	r0, #1
10008926:	4240      	negs	r0, r0
    st.chip_cfg.accel_fsr = data >> 3;
    return 0;
}
10008928:	b002      	add	sp, #8
1000892a:	bd10      	pop	{r4, pc}
1000892c:	1001818c 	.word	0x1001818c
10008930:	1000ab2d 	.word	0x1000ab2d

10008934 <mpu_set_lpf>:
 *  The following LPF settings are supported: 188, 98, 42, 20, 10, 5.
 *  @param[in]  lpf Desired LPF setting.
 *  @return     0 if successful.
 */
int mpu_set_lpf(unsigned short lpf)
{
10008934:	b510      	push	{r4, lr}
10008936:	b082      	sub	sp, #8
    unsigned char data;

    if (!(st.chip_cfg.sensors))
10008938:	4b2b      	ldr	r3, [pc, #172]	; (100089e8 <mpu_set_lpf+0xb4>)
1000893a:	7a9b      	ldrb	r3, [r3, #10]
1000893c:	2b00      	cmp	r3, #0
1000893e:	d049      	beq.n	100089d4 <mpu_set_lpf+0xa0>
        return -1;

    if (lpf >= 188)
10008940:	28bb      	cmp	r0, #187	; 0xbb
10008942:	d903      	bls.n	1000894c <mpu_set_lpf+0x18>
        data = INV_FILTER_188HZ;
10008944:	2201      	movs	r2, #1
10008946:	466b      	mov	r3, sp
10008948:	71da      	strb	r2, [r3, #7]
1000894a:	e01a      	b.n	10008982 <mpu_set_lpf+0x4e>
    else if (lpf >= 98)
1000894c:	2861      	cmp	r0, #97	; 0x61
1000894e:	d903      	bls.n	10008958 <mpu_set_lpf+0x24>
        data = INV_FILTER_98HZ;
10008950:	2202      	movs	r2, #2
10008952:	466b      	mov	r3, sp
10008954:	71da      	strb	r2, [r3, #7]
10008956:	e014      	b.n	10008982 <mpu_set_lpf+0x4e>
    else if (lpf >= 42)
10008958:	2829      	cmp	r0, #41	; 0x29
1000895a:	d903      	bls.n	10008964 <mpu_set_lpf+0x30>
        data = INV_FILTER_42HZ;
1000895c:	2203      	movs	r2, #3
1000895e:	466b      	mov	r3, sp
10008960:	71da      	strb	r2, [r3, #7]
10008962:	e00e      	b.n	10008982 <mpu_set_lpf+0x4e>
    else if (lpf >= 20)
10008964:	2813      	cmp	r0, #19
10008966:	d903      	bls.n	10008970 <mpu_set_lpf+0x3c>
        data = INV_FILTER_20HZ;
10008968:	2204      	movs	r2, #4
1000896a:	466b      	mov	r3, sp
1000896c:	71da      	strb	r2, [r3, #7]
1000896e:	e008      	b.n	10008982 <mpu_set_lpf+0x4e>
    else if (lpf >= 10)
10008970:	2809      	cmp	r0, #9
10008972:	d903      	bls.n	1000897c <mpu_set_lpf+0x48>
        data = INV_FILTER_10HZ;
10008974:	2205      	movs	r2, #5
10008976:	466b      	mov	r3, sp
10008978:	71da      	strb	r2, [r3, #7]
1000897a:	e002      	b.n	10008982 <mpu_set_lpf+0x4e>
    else
        data = INV_FILTER_5HZ;
1000897c:	2206      	movs	r2, #6
1000897e:	466b      	mov	r3, sp
10008980:	71da      	strb	r2, [r3, #7]

    if (st.chip_cfg.lpf == data)
10008982:	4b19      	ldr	r3, [pc, #100]	; (100089e8 <mpu_set_lpf+0xb4>)
10008984:	7ada      	ldrb	r2, [r3, #11]
10008986:	466b      	mov	r3, sp
10008988:	3307      	adds	r3, #7
1000898a:	781b      	ldrb	r3, [r3, #0]
        return 0;
1000898c:	2000      	movs	r0, #0
    else if (lpf >= 10)
        data = INV_FILTER_10HZ;
    else
        data = INV_FILTER_5HZ;

    if (st.chip_cfg.lpf == data)
1000898e:	429a      	cmp	r2, r3
10008990:	d028      	beq.n	100089e4 <mpu_set_lpf+0xb0>
        return 0;
    if (i2c_write(st.hw->addr, st.reg->lpf, 1, &data))
10008992:	4b15      	ldr	r3, [pc, #84]	; (100089e8 <mpu_set_lpf+0xb4>)
10008994:	681a      	ldr	r2, [r3, #0]
10008996:	7891      	ldrb	r1, [r2, #2]
10008998:	685b      	ldr	r3, [r3, #4]
1000899a:	7818      	ldrb	r0, [r3, #0]
1000899c:	466b      	mov	r3, sp
1000899e:	3307      	adds	r3, #7
100089a0:	2201      	movs	r2, #1
100089a2:	4c12      	ldr	r4, [pc, #72]	; (100089ec <mpu_set_lpf+0xb8>)
100089a4:	47a0      	blx	r4
100089a6:	2800      	cmp	r0, #0
100089a8:	d117      	bne.n	100089da <mpu_set_lpf+0xa6>
        return -1;
#ifdef MPU6500
    data = BIT_FIFO_SIZE_1024 | data;
100089aa:	466b      	mov	r3, sp
100089ac:	3307      	adds	r3, #7
100089ae:	7819      	ldrb	r1, [r3, #0]
100089b0:	2240      	movs	r2, #64	; 0x40
100089b2:	430a      	orrs	r2, r1
100089b4:	701a      	strb	r2, [r3, #0]

    if (i2c_write(st.hw->addr, st.reg->accel_cfg2, 1, &data))
100089b6:	4a0c      	ldr	r2, [pc, #48]	; (100089e8 <mpu_set_lpf+0xb4>)
100089b8:	6811      	ldr	r1, [r2, #0]
100089ba:	7a09      	ldrb	r1, [r1, #8]
100089bc:	6852      	ldr	r2, [r2, #4]
100089be:	7810      	ldrb	r0, [r2, #0]
100089c0:	2201      	movs	r2, #1
100089c2:	4c0a      	ldr	r4, [pc, #40]	; (100089ec <mpu_set_lpf+0xb8>)
100089c4:	47a0      	blx	r4
100089c6:	2800      	cmp	r0, #0
100089c8:	d10a      	bne.n	100089e0 <mpu_set_lpf+0xac>
            return -1;
#endif
    st.chip_cfg.lpf = data;
100089ca:	466b      	mov	r3, sp
100089cc:	79da      	ldrb	r2, [r3, #7]
100089ce:	4b06      	ldr	r3, [pc, #24]	; (100089e8 <mpu_set_lpf+0xb4>)
100089d0:	72da      	strb	r2, [r3, #11]
    return 0;
100089d2:	e007      	b.n	100089e4 <mpu_set_lpf+0xb0>
int mpu_set_lpf(unsigned short lpf)
{
    unsigned char data;

    if (!(st.chip_cfg.sensors))
        return -1;
100089d4:	2001      	movs	r0, #1
100089d6:	4240      	negs	r0, r0
100089d8:	e004      	b.n	100089e4 <mpu_set_lpf+0xb0>
        data = INV_FILTER_5HZ;

    if (st.chip_cfg.lpf == data)
        return 0;
    if (i2c_write(st.hw->addr, st.reg->lpf, 1, &data))
        return -1;
100089da:	2001      	movs	r0, #1
100089dc:	4240      	negs	r0, r0
100089de:	e001      	b.n	100089e4 <mpu_set_lpf+0xb0>
#ifdef MPU6500
    data = BIT_FIFO_SIZE_1024 | data;

    if (i2c_write(st.hw->addr, st.reg->accel_cfg2, 1, &data))
            return -1;
100089e0:	2001      	movs	r0, #1
100089e2:	4240      	negs	r0, r0
#endif
    st.chip_cfg.lpf = data;
    return 0;
}
100089e4:	b002      	add	sp, #8
100089e6:	bd10      	pop	{r4, pc}
100089e8:	1001818c 	.word	0x1001818c
100089ec:	1000ab2d 	.word	0x1000ab2d

100089f0 <mpu_get_sample_rate>:
 *  @param[out] rate    Current sampling rate (Hz).
 *  @return     0 if successful.
 */
int mpu_get_sample_rate(unsigned short *rate)
{
    if (st.chip_cfg.dmp_on)
100089f0:	2324      	movs	r3, #36	; 0x24
100089f2:	4a05      	ldr	r2, [pc, #20]	; (10008a08 <mpu_get_sample_rate+0x18>)
100089f4:	5cd3      	ldrb	r3, [r2, r3]
100089f6:	2b00      	cmp	r3, #0
100089f8:	d103      	bne.n	10008a02 <mpu_get_sample_rate+0x12>
        return -1;
    else
        rate[0] = st.chip_cfg.sample_rate;
100089fa:	89d3      	ldrh	r3, [r2, #14]
100089fc:	8003      	strh	r3, [r0, #0]
    return 0;
100089fe:	2000      	movs	r0, #0
10008a00:	e001      	b.n	10008a06 <mpu_get_sample_rate+0x16>
 *  @return     0 if successful.
 */
int mpu_get_sample_rate(unsigned short *rate)
{
    if (st.chip_cfg.dmp_on)
        return -1;
10008a02:	2001      	movs	r0, #1
10008a04:	4240      	negs	r0, r0
    else
        rate[0] = st.chip_cfg.sample_rate;
    return 0;
}
10008a06:	4770      	bx	lr
10008a08:	1001818c 	.word	0x1001818c

10008a0c <mpu_set_compass_sample_rate>:
 *  mpu_get_compass_sample_rate to check the actual setting.
 *  @param[in]  rate    Desired compass sampling rate (Hz).
 *  @return     0 if successful.
 */
int mpu_set_compass_sample_rate(unsigned short rate)
{
10008a0c:	b530      	push	{r4, r5, lr}
10008a0e:	b083      	sub	sp, #12
10008a10:	1e01      	subs	r1, r0, #0
#ifdef AK89xx_SECONDARY
    unsigned char div;
    if (!rate || rate > st.chip_cfg.sample_rate || rate > MAX_COMPASS_SAMPLE_RATE)
10008a12:	d020      	beq.n	10008a56 <mpu_set_compass_sample_rate+0x4a>
10008a14:	4b17      	ldr	r3, [pc, #92]	; (10008a74 <mpu_set_compass_sample_rate+0x68>)
10008a16:	89d8      	ldrh	r0, [r3, #14]
10008a18:	4281      	cmp	r1, r0
10008a1a:	d81f      	bhi.n	10008a5c <mpu_set_compass_sample_rate+0x50>
10008a1c:	2964      	cmp	r1, #100	; 0x64
10008a1e:	d820      	bhi.n	10008a62 <mpu_set_compass_sample_rate+0x56>
        return -1;

    div = st.chip_cfg.sample_rate / rate - 1;
10008a20:	466b      	mov	r3, sp
10008a22:	1ddc      	adds	r4, r3, #7
10008a24:	4b14      	ldr	r3, [pc, #80]	; (10008a78 <mpu_set_compass_sample_rate+0x6c>)
10008a26:	4798      	blx	r3
10008a28:	3801      	subs	r0, #1
10008a2a:	7020      	strb	r0, [r4, #0]
    if (i2c_write(st.hw->addr, st.reg->s4_ctrl, 1, &div))
10008a2c:	4b11      	ldr	r3, [pc, #68]	; (10008a74 <mpu_set_compass_sample_rate+0x68>)
10008a2e:	2224      	movs	r2, #36	; 0x24
10008a30:	6819      	ldr	r1, [r3, #0]
10008a32:	5c89      	ldrb	r1, [r1, r2]
10008a34:	685b      	ldr	r3, [r3, #4]
10008a36:	7818      	ldrb	r0, [r3, #0]
10008a38:	0023      	movs	r3, r4
10008a3a:	3a23      	subs	r2, #35	; 0x23
10008a3c:	4c0f      	ldr	r4, [pc, #60]	; (10008a7c <mpu_set_compass_sample_rate+0x70>)
10008a3e:	47a0      	blx	r4
10008a40:	1e04      	subs	r4, r0, #0
10008a42:	d111      	bne.n	10008a68 <mpu_set_compass_sample_rate+0x5c>
        return -1;
    st.chip_cfg.compass_sample_rate = st.chip_cfg.sample_rate / (div + 1);
10008a44:	4d0b      	ldr	r5, [pc, #44]	; (10008a74 <mpu_set_compass_sample_rate+0x68>)
10008a46:	89e8      	ldrh	r0, [r5, #14]
10008a48:	466b      	mov	r3, sp
10008a4a:	79d9      	ldrb	r1, [r3, #7]
10008a4c:	3101      	adds	r1, #1
10008a4e:	4b0c      	ldr	r3, [pc, #48]	; (10008a80 <mpu_set_compass_sample_rate+0x74>)
10008a50:	4798      	blx	r3
10008a52:	8528      	strh	r0, [r5, #40]	; 0x28
    return 0;
10008a54:	e00a      	b.n	10008a6c <mpu_set_compass_sample_rate+0x60>
int mpu_set_compass_sample_rate(unsigned short rate)
{
#ifdef AK89xx_SECONDARY
    unsigned char div;
    if (!rate || rate > st.chip_cfg.sample_rate || rate > MAX_COMPASS_SAMPLE_RATE)
        return -1;
10008a56:	2401      	movs	r4, #1
10008a58:	4264      	negs	r4, r4
10008a5a:	e007      	b.n	10008a6c <mpu_set_compass_sample_rate+0x60>
10008a5c:	2401      	movs	r4, #1
10008a5e:	4264      	negs	r4, r4
10008a60:	e004      	b.n	10008a6c <mpu_set_compass_sample_rate+0x60>
10008a62:	2401      	movs	r4, #1
10008a64:	4264      	negs	r4, r4
10008a66:	e001      	b.n	10008a6c <mpu_set_compass_sample_rate+0x60>

    div = st.chip_cfg.sample_rate / rate - 1;
    if (i2c_write(st.hw->addr, st.reg->s4_ctrl, 1, &div))
        return -1;
10008a68:	2401      	movs	r4, #1
10008a6a:	4264      	negs	r4, r4
    st.chip_cfg.compass_sample_rate = st.chip_cfg.sample_rate / (div + 1);
    return 0;
#else
    return -1;
#endif
}
10008a6c:	0020      	movs	r0, r4
10008a6e:	b003      	add	sp, #12
10008a70:	bd30      	pop	{r4, r5, pc}
10008a72:	46c0      	nop			; (mov r8, r8)
10008a74:	1001818c 	.word	0x1001818c
10008a78:	10012d65 	.word	0x10012d65
10008a7c:	1000ab2d 	.word	0x1000ab2d
10008a80:	10012e79 	.word	0x10012e79

10008a84 <mpu_configure_fifo>:
 *  \n INV_XYZ_ACCEL
 *  @param[in]  sensors Mask of sensors to push to FIFO.
 *  @return     0 if successful.
 */
int mpu_configure_fifo(unsigned char sensors)
{
10008a84:	b570      	push	{r4, r5, r6, lr}
    int result = 0;

    /* Compass data isn't going into the FIFO. Stop trying. */
    sensors &= ~INV_XYZ_COMPASS;

    if (st.chip_cfg.dmp_on)
10008a86:	2324      	movs	r3, #36	; 0x24
10008a88:	4a16      	ldr	r2, [pc, #88]	; (10008ae4 <mpu_configure_fifo+0x60>)
10008a8a:	5cd3      	ldrb	r3, [r2, r3]
        return 0;
10008a8c:	2400      	movs	r4, #0
    int result = 0;

    /* Compass data isn't going into the FIFO. Stop trying. */
    sensors &= ~INV_XYZ_COMPASS;

    if (st.chip_cfg.dmp_on)
10008a8e:	2b00      	cmp	r3, #0
10008a90:	d126      	bne.n	10008ae0 <mpu_configure_fifo+0x5c>
        return 0;
    else {
        if (!(st.chip_cfg.sensors))
10008a92:	7a94      	ldrb	r4, [r2, #10]
10008a94:	2c00      	cmp	r4, #0
10008a96:	d015      	beq.n	10008ac4 <mpu_configure_fifo+0x40>
{
    unsigned char prev;
    int result = 0;

    /* Compass data isn't going into the FIFO. Stop trying. */
    sensors &= ~INV_XYZ_COMPASS;
10008a98:	2301      	movs	r3, #1
10008a9a:	4398      	bics	r0, r3
    if (st.chip_cfg.dmp_on)
        return 0;
    else {
        if (!(st.chip_cfg.sensors))
            return -1;
        prev = st.chip_cfg.fifo_enable;
10008a9c:	7c15      	ldrb	r5, [r2, #16]
        st.chip_cfg.fifo_enable = sensors & st.chip_cfg.sensors;
10008a9e:	4004      	ands	r4, r0
10008aa0:	7414      	strb	r4, [r2, #16]
        if (st.chip_cfg.fifo_enable != sensors)
10008aa2:	1b04      	subs	r4, r0, r4
10008aa4:	1e63      	subs	r3, r4, #1
10008aa6:	419c      	sbcs	r4, r3
10008aa8:	4264      	negs	r4, r4
             * asleep.
             */
            result = -1;
        else
            result = 0;
        if (sensors || st.chip_cfg.lp_accel_mode)
10008aaa:	2800      	cmp	r0, #0
10008aac:	d10d      	bne.n	10008aca <mpu_configure_fifo+0x46>
10008aae:	7d13      	ldrb	r3, [r2, #20]
10008ab0:	2b00      	cmp	r3, #0
10008ab2:	d112      	bne.n	10008ada <mpu_configure_fifo+0x56>
            set_int_enable(1);
        else
            set_int_enable(0);
10008ab4:	4b0c      	ldr	r3, [pc, #48]	; (10008ae8 <mpu_configure_fifo+0x64>)
10008ab6:	4798      	blx	r3
10008ab8:	e012      	b.n	10008ae0 <mpu_configure_fifo+0x5c>
        if (sensors) {
            if (mpu_reset_fifo()) {
                st.chip_cfg.fifo_enable = prev;
10008aba:	4b0a      	ldr	r3, [pc, #40]	; (10008ae4 <mpu_configure_fifo+0x60>)
10008abc:	741d      	strb	r5, [r3, #16]
                return -1;
10008abe:	2401      	movs	r4, #1
10008ac0:	4264      	negs	r4, r4
10008ac2:	e00d      	b.n	10008ae0 <mpu_configure_fifo+0x5c>

    if (st.chip_cfg.dmp_on)
        return 0;
    else {
        if (!(st.chip_cfg.sensors))
            return -1;
10008ac4:	2401      	movs	r4, #1
10008ac6:	4264      	negs	r4, r4
10008ac8:	e00a      	b.n	10008ae0 <mpu_configure_fifo+0x5c>
             */
            result = -1;
        else
            result = 0;
        if (sensors || st.chip_cfg.lp_accel_mode)
            set_int_enable(1);
10008aca:	2001      	movs	r0, #1
10008acc:	4b06      	ldr	r3, [pc, #24]	; (10008ae8 <mpu_configure_fifo+0x64>)
10008ace:	4798      	blx	r3
        else
            set_int_enable(0);
        if (sensors) {
            if (mpu_reset_fifo()) {
10008ad0:	4b06      	ldr	r3, [pc, #24]	; (10008aec <mpu_configure_fifo+0x68>)
10008ad2:	4798      	blx	r3
10008ad4:	2800      	cmp	r0, #0
10008ad6:	d003      	beq.n	10008ae0 <mpu_configure_fifo+0x5c>
10008ad8:	e7ef      	b.n	10008aba <mpu_configure_fifo+0x36>
             */
            result = -1;
        else
            result = 0;
        if (sensors || st.chip_cfg.lp_accel_mode)
            set_int_enable(1);
10008ada:	2001      	movs	r0, #1
10008adc:	4b02      	ldr	r3, [pc, #8]	; (10008ae8 <mpu_configure_fifo+0x64>)
10008ade:	4798      	blx	r3
            }
        }
    }

    return result;
}
10008ae0:	0020      	movs	r0, r4
10008ae2:	bd70      	pop	{r4, r5, r6, pc}
10008ae4:	1001818c 	.word	0x1001818c
10008ae8:	10008461 	.word	0x10008461
10008aec:	100085bd 	.word	0x100085bd

10008af0 <mpu_read_fifo>:
 *  @param[out] more        Number of remaining packets.
 *  @return     0 if successful.
 */
int mpu_read_fifo(short *gyro, short *accel, unsigned long *timestamp,
        unsigned char *sensors, unsigned char *more)
{
10008af0:	b5f0      	push	{r4, r5, r6, r7, lr}
10008af2:	464f      	mov	r7, r9
10008af4:	b480      	push	{r7}
10008af6:	b088      	sub	sp, #32
10008af8:	9001      	str	r0, [sp, #4]
10008afa:	9103      	str	r1, [sp, #12]
10008afc:	9202      	str	r2, [sp, #8]
10008afe:	001e      	movs	r6, r3
    /* Assumes maximum packet size is gyro (6) + accel (6). */
    unsigned char data[MAX_PACKET_LENGTH];
    unsigned char packet_size = 0;
    unsigned short fifo_count, index = 0;

    if (st.chip_cfg.dmp_on)
10008b00:	2324      	movs	r3, #36	; 0x24
10008b02:	4a69      	ldr	r2, [pc, #420]	; (10008ca8 <mpu_read_fifo+0x1b8>)
10008b04:	5cd3      	ldrb	r3, [r2, r3]
10008b06:	2b00      	cmp	r3, #0
10008b08:	d000      	beq.n	10008b0c <mpu_read_fifo+0x1c>
10008b0a:	e0b6      	b.n	10008c7a <mpu_read_fifo+0x18a>
        return -1;

    sensors[0] = 0;
10008b0c:	7033      	strb	r3, [r6, #0]
    if (!st.chip_cfg.sensors)
10008b0e:	7a93      	ldrb	r3, [r2, #10]
10008b10:	2b00      	cmp	r3, #0
10008b12:	d100      	bne.n	10008b16 <mpu_read_fifo+0x26>
10008b14:	e0b4      	b.n	10008c80 <mpu_read_fifo+0x190>
        return -1;
    if (!st.chip_cfg.fifo_enable)
10008b16:	7c13      	ldrb	r3, [r2, #16]
10008b18:	2b00      	cmp	r3, #0
10008b1a:	d100      	bne.n	10008b1e <mpu_read_fifo+0x2e>
10008b1c:	e0b3      	b.n	10008c86 <mpu_read_fifo+0x196>
        return -1;

    if (st.chip_cfg.fifo_enable & INV_X_GYRO)
10008b1e:	065a      	lsls	r2, r3, #25
        packet_size += 2;
10008b20:	0fd2      	lsrs	r2, r2, #31
10008b22:	0055      	lsls	r5, r2, #1
    if (st.chip_cfg.fifo_enable & INV_Y_GYRO)
10008b24:	069a      	lsls	r2, r3, #26
10008b26:	d501      	bpl.n	10008b2c <mpu_read_fifo+0x3c>
        packet_size += 2;
10008b28:	1caa      	adds	r2, r5, #2
10008b2a:	b2d5      	uxtb	r5, r2
    if (st.chip_cfg.fifo_enable & INV_Z_GYRO)
10008b2c:	06da      	lsls	r2, r3, #27
10008b2e:	d501      	bpl.n	10008b34 <mpu_read_fifo+0x44>
        packet_size += 2;
10008b30:	1caa      	adds	r2, r5, #2
10008b32:	b2d5      	uxtb	r5, r2
    if (st.chip_cfg.fifo_enable & INV_XYZ_ACCEL)
10008b34:	071b      	lsls	r3, r3, #28
10008b36:	d501      	bpl.n	10008b3c <mpu_read_fifo+0x4c>
        packet_size += 6;
10008b38:	1dab      	adds	r3, r5, #6
10008b3a:	b2dd      	uxtb	r5, r3

    if (i2c_read(st.hw->addr, st.reg->fifo_count_h, 2, data))
10008b3c:	4b5a      	ldr	r3, [pc, #360]	; (10008ca8 <mpu_read_fifo+0x1b8>)
10008b3e:	681a      	ldr	r2, [r3, #0]
10008b40:	7b11      	ldrb	r1, [r2, #12]
10008b42:	685b      	ldr	r3, [r3, #4]
10008b44:	7818      	ldrb	r0, [r3, #0]
10008b46:	ab05      	add	r3, sp, #20
10008b48:	2202      	movs	r2, #2
10008b4a:	4c58      	ldr	r4, [pc, #352]	; (10008cac <mpu_read_fifo+0x1bc>)
10008b4c:	47a0      	blx	r4
10008b4e:	1e04      	subs	r4, r0, #0
10008b50:	d000      	beq.n	10008b54 <mpu_read_fifo+0x64>
10008b52:	e09b      	b.n	10008c8c <mpu_read_fifo+0x19c>
        return -1;
    fifo_count = (data[0] << 8) | data[1];
10008b54:	aa05      	add	r2, sp, #20
10008b56:	7813      	ldrb	r3, [r2, #0]
10008b58:	021b      	lsls	r3, r3, #8
10008b5a:	7852      	ldrb	r2, [r2, #1]
10008b5c:	431a      	orrs	r2, r3
10008b5e:	4691      	mov	r9, r2
    if (fifo_count < packet_size)
10008b60:	b2af      	uxth	r7, r5
10008b62:	42ba      	cmp	r2, r7
10008b64:	d200      	bcs.n	10008b68 <mpu_read_fifo+0x78>
10008b66:	e099      	b.n	10008c9c <mpu_read_fifo+0x1ac>
        return 0;
//    log_i("FIFO count: %hd\n", fifo_count);
    if (fifo_count > (st.hw->max_fifo >> 1)) {
10008b68:	4b4f      	ldr	r3, [pc, #316]	; (10008ca8 <mpu_read_fifo+0x1b8>)
10008b6a:	685a      	ldr	r2, [r3, #4]
10008b6c:	8853      	ldrh	r3, [r2, #2]
10008b6e:	085b      	lsrs	r3, r3, #1
10008b70:	4599      	cmp	r9, r3
10008b72:	d913      	bls.n	10008b9c <mpu_read_fifo+0xac>
        /* FIFO is 50% full, better check overflow bit. */
        if (i2c_read(st.hw->addr, st.reg->int_status, 1, data))
10008b74:	4b4c      	ldr	r3, [pc, #304]	; (10008ca8 <mpu_read_fifo+0x1b8>)
10008b76:	681b      	ldr	r3, [r3, #0]
10008b78:	7cd9      	ldrb	r1, [r3, #19]
10008b7a:	7810      	ldrb	r0, [r2, #0]
10008b7c:	ab05      	add	r3, sp, #20
10008b7e:	2201      	movs	r2, #1
10008b80:	4c4a      	ldr	r4, [pc, #296]	; (10008cac <mpu_read_fifo+0x1bc>)
10008b82:	47a0      	blx	r4
10008b84:	2800      	cmp	r0, #0
10008b86:	d000      	beq.n	10008b8a <mpu_read_fifo+0x9a>
10008b88:	e083      	b.n	10008c92 <mpu_read_fifo+0x1a2>
            return -1;
        if (data[0] & BIT_FIFO_OVERFLOW) {
10008b8a:	ab05      	add	r3, sp, #20
10008b8c:	781b      	ldrb	r3, [r3, #0]
10008b8e:	06db      	lsls	r3, r3, #27
10008b90:	d504      	bpl.n	10008b9c <mpu_read_fifo+0xac>
            mpu_reset_fifo();
10008b92:	4b47      	ldr	r3, [pc, #284]	; (10008cb0 <mpu_read_fifo+0x1c0>)
10008b94:	4798      	blx	r3
            return -2;
10008b96:	2402      	movs	r4, #2
10008b98:	4264      	negs	r4, r4
10008b9a:	e07f      	b.n	10008c9c <mpu_read_fifo+0x1ac>
        }
    }
    get_ms((unsigned long*)timestamp);
10008b9c:	9802      	ldr	r0, [sp, #8]
10008b9e:	4b45      	ldr	r3, [pc, #276]	; (10008cb4 <mpu_read_fifo+0x1c4>)
10008ba0:	4798      	blx	r3

    if (i2c_read(st.hw->addr, st.reg->fifo_r_w, packet_size, data))
10008ba2:	4b41      	ldr	r3, [pc, #260]	; (10008ca8 <mpu_read_fifo+0x1b8>)
10008ba4:	681a      	ldr	r2, [r3, #0]
10008ba6:	7b51      	ldrb	r1, [r2, #13]
10008ba8:	685b      	ldr	r3, [r3, #4]
10008baa:	7818      	ldrb	r0, [r3, #0]
10008bac:	ab05      	add	r3, sp, #20
10008bae:	002a      	movs	r2, r5
10008bb0:	4c3e      	ldr	r4, [pc, #248]	; (10008cac <mpu_read_fifo+0x1bc>)
10008bb2:	47a0      	blx	r4
10008bb4:	1e04      	subs	r4, r0, #0
10008bb6:	d16f      	bne.n	10008c98 <mpu_read_fifo+0x1a8>
        return -1;
    more[0] = fifo_count / packet_size - 1;
10008bb8:	0029      	movs	r1, r5
10008bba:	4648      	mov	r0, r9
10008bbc:	4b3e      	ldr	r3, [pc, #248]	; (10008cb8 <mpu_read_fifo+0x1c8>)
10008bbe:	4798      	blx	r3
10008bc0:	3801      	subs	r0, #1
10008bc2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
10008bc4:	7018      	strb	r0, [r3, #0]
    sensors[0] = 0;
10008bc6:	2300      	movs	r3, #0
10008bc8:	7033      	strb	r3, [r6, #0]

    if ((index != packet_size) && st.chip_cfg.fifo_enable & INV_XYZ_ACCEL) {
10008bca:	2d00      	cmp	r5, #0
10008bcc:	d01a      	beq.n	10008c04 <mpu_read_fifo+0x114>
10008bce:	4b36      	ldr	r3, [pc, #216]	; (10008ca8 <mpu_read_fifo+0x1b8>)
10008bd0:	7c1a      	ldrb	r2, [r3, #16]
        unsigned char *sensors, unsigned char *more)
{
    /* Assumes maximum packet size is gyro (6) + accel (6). */
    unsigned char data[MAX_PACKET_LENGTH];
    unsigned char packet_size = 0;
    unsigned short fifo_count, index = 0;
10008bd2:	2300      	movs	r3, #0
    if (i2c_read(st.hw->addr, st.reg->fifo_r_w, packet_size, data))
        return -1;
    more[0] = fifo_count / packet_size - 1;
    sensors[0] = 0;

    if ((index != packet_size) && st.chip_cfg.fifo_enable & INV_XYZ_ACCEL) {
10008bd4:	0712      	lsls	r2, r2, #28
10008bd6:	d515      	bpl.n	10008c04 <mpu_read_fifo+0x114>
        accel[0] = (data[index+0] << 8) | data[index+1];
10008bd8:	ab05      	add	r3, sp, #20
10008bda:	781a      	ldrb	r2, [r3, #0]
10008bdc:	0212      	lsls	r2, r2, #8
10008bde:	7859      	ldrb	r1, [r3, #1]
10008be0:	430a      	orrs	r2, r1
10008be2:	9803      	ldr	r0, [sp, #12]
10008be4:	8002      	strh	r2, [r0, #0]
        accel[1] = (data[index+2] << 8) | data[index+3];
10008be6:	789a      	ldrb	r2, [r3, #2]
10008be8:	0212      	lsls	r2, r2, #8
10008bea:	78d9      	ldrb	r1, [r3, #3]
10008bec:	430a      	orrs	r2, r1
10008bee:	8042      	strh	r2, [r0, #2]
        accel[2] = (data[index+4] << 8) | data[index+5];
10008bf0:	791a      	ldrb	r2, [r3, #4]
10008bf2:	0212      	lsls	r2, r2, #8
10008bf4:	795b      	ldrb	r3, [r3, #5]
10008bf6:	4313      	orrs	r3, r2
10008bf8:	8083      	strh	r3, [r0, #4]
        sensors[0] |= INV_XYZ_ACCEL;
10008bfa:	7832      	ldrb	r2, [r6, #0]
10008bfc:	2308      	movs	r3, #8
10008bfe:	4313      	orrs	r3, r2
10008c00:	7033      	strb	r3, [r6, #0]
        index += 6;
10008c02:	2306      	movs	r3, #6
    }
    if ((index != packet_size) && st.chip_cfg.fifo_enable & INV_X_GYRO) {
10008c04:	42bb      	cmp	r3, r7
10008c06:	d049      	beq.n	10008c9c <mpu_read_fifo+0x1ac>
10008c08:	4a27      	ldr	r2, [pc, #156]	; (10008ca8 <mpu_read_fifo+0x1b8>)
10008c0a:	7c12      	ldrb	r2, [r2, #16]
10008c0c:	0652      	lsls	r2, r2, #25
10008c0e:	d50f      	bpl.n	10008c30 <mpu_read_fifo+0x140>
        gyro[0] = (data[index+0] << 8) | data[index+1];
10008c10:	a905      	add	r1, sp, #20
10008c12:	5cca      	ldrb	r2, [r1, r3]
10008c14:	0212      	lsls	r2, r2, #8
10008c16:	18c9      	adds	r1, r1, r3
10008c18:	7849      	ldrb	r1, [r1, #1]
10008c1a:	430a      	orrs	r2, r1
10008c1c:	9901      	ldr	r1, [sp, #4]
10008c1e:	800a      	strh	r2, [r1, #0]
        sensors[0] |= INV_X_GYRO;
10008c20:	7831      	ldrb	r1, [r6, #0]
10008c22:	2240      	movs	r2, #64	; 0x40
10008c24:	430a      	orrs	r2, r1
10008c26:	7032      	strb	r2, [r6, #0]
        index += 2;
10008c28:	3302      	adds	r3, #2
10008c2a:	b29b      	uxth	r3, r3
    }
    if ((index != packet_size) && st.chip_cfg.fifo_enable & INV_Y_GYRO) {
10008c2c:	429f      	cmp	r7, r3
10008c2e:	d035      	beq.n	10008c9c <mpu_read_fifo+0x1ac>
10008c30:	4a1d      	ldr	r2, [pc, #116]	; (10008ca8 <mpu_read_fifo+0x1b8>)
10008c32:	7c12      	ldrb	r2, [r2, #16]
10008c34:	0692      	lsls	r2, r2, #26
10008c36:	d50f      	bpl.n	10008c58 <mpu_read_fifo+0x168>
        gyro[1] = (data[index+0] << 8) | data[index+1];
10008c38:	a905      	add	r1, sp, #20
10008c3a:	5cca      	ldrb	r2, [r1, r3]
10008c3c:	0212      	lsls	r2, r2, #8
10008c3e:	18c9      	adds	r1, r1, r3
10008c40:	7849      	ldrb	r1, [r1, #1]
10008c42:	430a      	orrs	r2, r1
10008c44:	9901      	ldr	r1, [sp, #4]
10008c46:	804a      	strh	r2, [r1, #2]
        sensors[0] |= INV_Y_GYRO;
10008c48:	7831      	ldrb	r1, [r6, #0]
10008c4a:	2220      	movs	r2, #32
10008c4c:	430a      	orrs	r2, r1
10008c4e:	7032      	strb	r2, [r6, #0]
        index += 2;
10008c50:	3302      	adds	r3, #2
10008c52:	b29b      	uxth	r3, r3
    }
    if ((index != packet_size) && st.chip_cfg.fifo_enable & INV_Z_GYRO) {
10008c54:	429f      	cmp	r7, r3
10008c56:	d021      	beq.n	10008c9c <mpu_read_fifo+0x1ac>
10008c58:	4a13      	ldr	r2, [pc, #76]	; (10008ca8 <mpu_read_fifo+0x1b8>)
10008c5a:	7c12      	ldrb	r2, [r2, #16]
10008c5c:	06d2      	lsls	r2, r2, #27
10008c5e:	d51d      	bpl.n	10008c9c <mpu_read_fifo+0x1ac>
        gyro[2] = (data[index+0] << 8) | data[index+1];
10008c60:	a905      	add	r1, sp, #20
10008c62:	5cca      	ldrb	r2, [r1, r3]
10008c64:	0212      	lsls	r2, r2, #8
10008c66:	18cb      	adds	r3, r1, r3
10008c68:	785b      	ldrb	r3, [r3, #1]
10008c6a:	4313      	orrs	r3, r2
10008c6c:	9a01      	ldr	r2, [sp, #4]
10008c6e:	8093      	strh	r3, [r2, #4]
        sensors[0] |= INV_Z_GYRO;
10008c70:	7832      	ldrb	r2, [r6, #0]
10008c72:	2310      	movs	r3, #16
10008c74:	4313      	orrs	r3, r2
10008c76:	7033      	strb	r3, [r6, #0]
10008c78:	e010      	b.n	10008c9c <mpu_read_fifo+0x1ac>
    unsigned char data[MAX_PACKET_LENGTH];
    unsigned char packet_size = 0;
    unsigned short fifo_count, index = 0;

    if (st.chip_cfg.dmp_on)
        return -1;
10008c7a:	2401      	movs	r4, #1
10008c7c:	4264      	negs	r4, r4
10008c7e:	e00d      	b.n	10008c9c <mpu_read_fifo+0x1ac>

    sensors[0] = 0;
    if (!st.chip_cfg.sensors)
        return -1;
10008c80:	2401      	movs	r4, #1
10008c82:	4264      	negs	r4, r4
10008c84:	e00a      	b.n	10008c9c <mpu_read_fifo+0x1ac>
    if (!st.chip_cfg.fifo_enable)
        return -1;
10008c86:	2401      	movs	r4, #1
10008c88:	4264      	negs	r4, r4
10008c8a:	e007      	b.n	10008c9c <mpu_read_fifo+0x1ac>
        packet_size += 2;
    if (st.chip_cfg.fifo_enable & INV_XYZ_ACCEL)
        packet_size += 6;

    if (i2c_read(st.hw->addr, st.reg->fifo_count_h, 2, data))
        return -1;
10008c8c:	2401      	movs	r4, #1
10008c8e:	4264      	negs	r4, r4
10008c90:	e004      	b.n	10008c9c <mpu_read_fifo+0x1ac>
        return 0;
//    log_i("FIFO count: %hd\n", fifo_count);
    if (fifo_count > (st.hw->max_fifo >> 1)) {
        /* FIFO is 50% full, better check overflow bit. */
        if (i2c_read(st.hw->addr, st.reg->int_status, 1, data))
            return -1;
10008c92:	2401      	movs	r4, #1
10008c94:	4264      	negs	r4, r4
10008c96:	e001      	b.n	10008c9c <mpu_read_fifo+0x1ac>
        }
    }
    get_ms((unsigned long*)timestamp);

    if (i2c_read(st.hw->addr, st.reg->fifo_r_w, packet_size, data))
        return -1;
10008c98:	2401      	movs	r4, #1
10008c9a:	4264      	negs	r4, r4
        sensors[0] |= INV_Z_GYRO;
        index += 2;
    }

    return 0;
}
10008c9c:	0020      	movs	r0, r4
10008c9e:	b008      	add	sp, #32
10008ca0:	bc04      	pop	{r2}
10008ca2:	4691      	mov	r9, r2
10008ca4:	bdf0      	pop	{r4, r5, r6, r7, pc}
10008ca6:	46c0      	nop			; (mov r8, r8)
10008ca8:	1001818c 	.word	0x1001818c
10008cac:	1000ab89 	.word	0x1000ab89
10008cb0:	100085bd 	.word	0x100085bd
10008cb4:	1000b245 	.word	0x1000b245
10008cb8:	10012e79 	.word	0x10012e79

10008cbc <mpu_set_bypass>:
 *  @brief      Set device to bypass mode.
 *  @param[in]  bypass_on   1 to enable bypass mode.
 *  @return     0 if successful.
 */
int mpu_set_bypass(unsigned char bypass_on)
{
10008cbc:	b530      	push	{r4, r5, lr}
10008cbe:	b083      	sub	sp, #12
10008cc0:	0004      	movs	r4, r0
    unsigned char tmp;

    if (st.chip_cfg.bypass_mode == bypass_on)
10008cc2:	4b59      	ldr	r3, [pc, #356]	; (10008e28 <mpu_set_bypass+0x16c>)
10008cc4:	7c9b      	ldrb	r3, [r3, #18]
10008cc6:	4283      	cmp	r3, r0
10008cc8:	d100      	bne.n	10008ccc <mpu_set_bypass+0x10>
10008cca:	e097      	b.n	10008dfc <mpu_set_bypass+0x140>
        return 0;

    if (bypass_on) {
10008ccc:	2800      	cmp	r0, #0
10008cce:	d042      	beq.n	10008d56 <mpu_set_bypass+0x9a>
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
10008cd0:	4b55      	ldr	r3, [pc, #340]	; (10008e28 <mpu_set_bypass+0x16c>)
10008cd2:	681a      	ldr	r2, [r3, #0]
10008cd4:	7911      	ldrb	r1, [r2, #4]
10008cd6:	685b      	ldr	r3, [r3, #4]
10008cd8:	7818      	ldrb	r0, [r3, #0]
10008cda:	466b      	mov	r3, sp
10008cdc:	3307      	adds	r3, #7
10008cde:	2201      	movs	r2, #1
10008ce0:	4d52      	ldr	r5, [pc, #328]	; (10008e2c <mpu_set_bypass+0x170>)
10008ce2:	47a8      	blx	r5
10008ce4:	2800      	cmp	r0, #0
10008ce6:	d000      	beq.n	10008cea <mpu_set_bypass+0x2e>
10008ce8:	e08a      	b.n	10008e00 <mpu_set_bypass+0x144>
            return -1;
        tmp &= ~BIT_AUX_IF_EN;
10008cea:	466b      	mov	r3, sp
10008cec:	3307      	adds	r3, #7
10008cee:	781a      	ldrb	r2, [r3, #0]
10008cf0:	2120      	movs	r1, #32
10008cf2:	438a      	bics	r2, r1
10008cf4:	701a      	strb	r2, [r3, #0]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
10008cf6:	4a4c      	ldr	r2, [pc, #304]	; (10008e28 <mpu_set_bypass+0x16c>)
10008cf8:	6811      	ldr	r1, [r2, #0]
10008cfa:	7909      	ldrb	r1, [r1, #4]
10008cfc:	6852      	ldr	r2, [r2, #4]
10008cfe:	7810      	ldrb	r0, [r2, #0]
10008d00:	2201      	movs	r2, #1
10008d02:	4d4b      	ldr	r5, [pc, #300]	; (10008e30 <mpu_set_bypass+0x174>)
10008d04:	47a8      	blx	r5
10008d06:	2800      	cmp	r0, #0
10008d08:	d17d      	bne.n	10008e06 <mpu_set_bypass+0x14a>
            return -1;
        delay_ms(3);
10008d0a:	3003      	adds	r0, #3
10008d0c:	4b49      	ldr	r3, [pc, #292]	; (10008e34 <mpu_set_bypass+0x178>)
10008d0e:	4798      	blx	r3
        tmp = BIT_BYPASS_EN;
10008d10:	2202      	movs	r2, #2
10008d12:	466b      	mov	r3, sp
10008d14:	71da      	strb	r2, [r3, #7]
        if (st.chip_cfg.active_low_int)
10008d16:	2322      	movs	r3, #34	; 0x22
10008d18:	4a43      	ldr	r2, [pc, #268]	; (10008e28 <mpu_set_bypass+0x16c>)
10008d1a:	5cd3      	ldrb	r3, [r2, r3]
10008d1c:	2b00      	cmp	r3, #0
10008d1e:	d002      	beq.n	10008d26 <mpu_set_bypass+0x6a>
            tmp |= BIT_ACTL;
10008d20:	2282      	movs	r2, #130	; 0x82
10008d22:	466b      	mov	r3, sp
10008d24:	71da      	strb	r2, [r3, #7]
        if (st.chip_cfg.latched_int)
10008d26:	2323      	movs	r3, #35	; 0x23
10008d28:	4a3f      	ldr	r2, [pc, #252]	; (10008e28 <mpu_set_bypass+0x16c>)
10008d2a:	5cd3      	ldrb	r3, [r2, r3]
10008d2c:	2b00      	cmp	r3, #0
10008d2e:	d005      	beq.n	10008d3c <mpu_set_bypass+0x80>
            tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
10008d30:	466b      	mov	r3, sp
10008d32:	1dda      	adds	r2, r3, #7
10008d34:	79d9      	ldrb	r1, [r3, #7]
10008d36:	2330      	movs	r3, #48	; 0x30
10008d38:	430b      	orrs	r3, r1
10008d3a:	7013      	strb	r3, [r2, #0]
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
10008d3c:	4b3a      	ldr	r3, [pc, #232]	; (10008e28 <mpu_set_bypass+0x16c>)
10008d3e:	681a      	ldr	r2, [r3, #0]
10008d40:	7dd1      	ldrb	r1, [r2, #23]
10008d42:	685b      	ldr	r3, [r3, #4]
10008d44:	7818      	ldrb	r0, [r3, #0]
10008d46:	466b      	mov	r3, sp
10008d48:	3307      	adds	r3, #7
10008d4a:	2201      	movs	r2, #1
10008d4c:	4d38      	ldr	r5, [pc, #224]	; (10008e30 <mpu_set_bypass+0x174>)
10008d4e:	47a8      	blx	r5
10008d50:	2800      	cmp	r0, #0
10008d52:	d04f      	beq.n	10008df4 <mpu_set_bypass+0x138>
10008d54:	e05a      	b.n	10008e0c <mpu_set_bypass+0x150>
            return -1;
    } else {
        /* Enable I2C master mode if compass is being used. */
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
10008d56:	4b34      	ldr	r3, [pc, #208]	; (10008e28 <mpu_set_bypass+0x16c>)
10008d58:	681a      	ldr	r2, [r3, #0]
10008d5a:	7911      	ldrb	r1, [r2, #4]
10008d5c:	685b      	ldr	r3, [r3, #4]
10008d5e:	7818      	ldrb	r0, [r3, #0]
10008d60:	466b      	mov	r3, sp
10008d62:	3307      	adds	r3, #7
10008d64:	2201      	movs	r2, #1
10008d66:	4d31      	ldr	r5, [pc, #196]	; (10008e2c <mpu_set_bypass+0x170>)
10008d68:	47a8      	blx	r5
10008d6a:	2800      	cmp	r0, #0
10008d6c:	d151      	bne.n	10008e12 <mpu_set_bypass+0x156>
            return -1;
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
10008d6e:	4b2e      	ldr	r3, [pc, #184]	; (10008e28 <mpu_set_bypass+0x16c>)
10008d70:	7a9b      	ldrb	r3, [r3, #10]
10008d72:	07db      	lsls	r3, r3, #31
10008d74:	d506      	bpl.n	10008d84 <mpu_set_bypass+0xc8>
            tmp |= BIT_AUX_IF_EN;
10008d76:	466b      	mov	r3, sp
10008d78:	1dda      	adds	r2, r3, #7
10008d7a:	79d9      	ldrb	r1, [r3, #7]
10008d7c:	2320      	movs	r3, #32
10008d7e:	430b      	orrs	r3, r1
10008d80:	7013      	strb	r3, [r2, #0]
10008d82:	e005      	b.n	10008d90 <mpu_set_bypass+0xd4>
        else
            tmp &= ~BIT_AUX_IF_EN;
10008d84:	466b      	mov	r3, sp
10008d86:	1dda      	adds	r2, r3, #7
10008d88:	79db      	ldrb	r3, [r3, #7]
10008d8a:	2120      	movs	r1, #32
10008d8c:	438b      	bics	r3, r1
10008d8e:	7013      	strb	r3, [r2, #0]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
10008d90:	4b25      	ldr	r3, [pc, #148]	; (10008e28 <mpu_set_bypass+0x16c>)
10008d92:	681a      	ldr	r2, [r3, #0]
10008d94:	7911      	ldrb	r1, [r2, #4]
10008d96:	685b      	ldr	r3, [r3, #4]
10008d98:	7818      	ldrb	r0, [r3, #0]
10008d9a:	466b      	mov	r3, sp
10008d9c:	3307      	adds	r3, #7
10008d9e:	2201      	movs	r2, #1
10008da0:	4d23      	ldr	r5, [pc, #140]	; (10008e30 <mpu_set_bypass+0x174>)
10008da2:	47a8      	blx	r5
10008da4:	2800      	cmp	r0, #0
10008da6:	d137      	bne.n	10008e18 <mpu_set_bypass+0x15c>
            return -1;
        delay_ms(3);
10008da8:	3003      	adds	r0, #3
10008daa:	4b22      	ldr	r3, [pc, #136]	; (10008e34 <mpu_set_bypass+0x178>)
10008dac:	4798      	blx	r3
        if (st.chip_cfg.active_low_int)
10008dae:	2322      	movs	r3, #34	; 0x22
10008db0:	4a1d      	ldr	r2, [pc, #116]	; (10008e28 <mpu_set_bypass+0x16c>)
10008db2:	5cd3      	ldrb	r3, [r2, r3]
10008db4:	2b00      	cmp	r3, #0
10008db6:	d003      	beq.n	10008dc0 <mpu_set_bypass+0x104>
            tmp = BIT_ACTL;
10008db8:	2280      	movs	r2, #128	; 0x80
10008dba:	466b      	mov	r3, sp
10008dbc:	71da      	strb	r2, [r3, #7]
10008dbe:	e002      	b.n	10008dc6 <mpu_set_bypass+0x10a>
        else
            tmp = 0;
10008dc0:	2200      	movs	r2, #0
10008dc2:	466b      	mov	r3, sp
10008dc4:	71da      	strb	r2, [r3, #7]
        if (st.chip_cfg.latched_int)
10008dc6:	2323      	movs	r3, #35	; 0x23
10008dc8:	4a17      	ldr	r2, [pc, #92]	; (10008e28 <mpu_set_bypass+0x16c>)
10008dca:	5cd3      	ldrb	r3, [r2, r3]
10008dcc:	2b00      	cmp	r3, #0
10008dce:	d005      	beq.n	10008ddc <mpu_set_bypass+0x120>
            tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
10008dd0:	466b      	mov	r3, sp
10008dd2:	1dda      	adds	r2, r3, #7
10008dd4:	79d9      	ldrb	r1, [r3, #7]
10008dd6:	2330      	movs	r3, #48	; 0x30
10008dd8:	430b      	orrs	r3, r1
10008dda:	7013      	strb	r3, [r2, #0]
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
10008ddc:	4b12      	ldr	r3, [pc, #72]	; (10008e28 <mpu_set_bypass+0x16c>)
10008dde:	681a      	ldr	r2, [r3, #0]
10008de0:	7dd1      	ldrb	r1, [r2, #23]
10008de2:	685b      	ldr	r3, [r3, #4]
10008de4:	7818      	ldrb	r0, [r3, #0]
10008de6:	466b      	mov	r3, sp
10008de8:	3307      	adds	r3, #7
10008dea:	2201      	movs	r2, #1
10008dec:	4d10      	ldr	r5, [pc, #64]	; (10008e30 <mpu_set_bypass+0x174>)
10008dee:	47a8      	blx	r5
10008df0:	2800      	cmp	r0, #0
10008df2:	d114      	bne.n	10008e1e <mpu_set_bypass+0x162>
            return -1;
    }
    st.chip_cfg.bypass_mode = bypass_on;
10008df4:	4b0c      	ldr	r3, [pc, #48]	; (10008e28 <mpu_set_bypass+0x16c>)
10008df6:	749c      	strb	r4, [r3, #18]
    return 0;
10008df8:	2000      	movs	r0, #0
10008dfa:	e012      	b.n	10008e22 <mpu_set_bypass+0x166>
int mpu_set_bypass(unsigned char bypass_on)
{
    unsigned char tmp;

    if (st.chip_cfg.bypass_mode == bypass_on)
        return 0;
10008dfc:	2000      	movs	r0, #0
10008dfe:	e010      	b.n	10008e22 <mpu_set_bypass+0x166>

    if (bypass_on) {
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
            return -1;
10008e00:	2001      	movs	r0, #1
10008e02:	4240      	negs	r0, r0
10008e04:	e00d      	b.n	10008e22 <mpu_set_bypass+0x166>
        tmp &= ~BIT_AUX_IF_EN;
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
            return -1;
10008e06:	2001      	movs	r0, #1
10008e08:	4240      	negs	r0, r0
10008e0a:	e00a      	b.n	10008e22 <mpu_set_bypass+0x166>
        if (st.chip_cfg.active_low_int)
            tmp |= BIT_ACTL;
        if (st.chip_cfg.latched_int)
            tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
            return -1;
10008e0c:	2001      	movs	r0, #1
10008e0e:	4240      	negs	r0, r0
10008e10:	e007      	b.n	10008e22 <mpu_set_bypass+0x166>
    } else {
        /* Enable I2C master mode if compass is being used. */
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
            return -1;
10008e12:	2001      	movs	r0, #1
10008e14:	4240      	negs	r0, r0
10008e16:	e004      	b.n	10008e22 <mpu_set_bypass+0x166>
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
            tmp |= BIT_AUX_IF_EN;
        else
            tmp &= ~BIT_AUX_IF_EN;
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
            return -1;
10008e18:	2001      	movs	r0, #1
10008e1a:	4240      	negs	r0, r0
10008e1c:	e001      	b.n	10008e22 <mpu_set_bypass+0x166>
        else
            tmp = 0;
        if (st.chip_cfg.latched_int)
            tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
            return -1;
10008e1e:	2001      	movs	r0, #1
10008e20:	4240      	negs	r0, r0
    }
    st.chip_cfg.bypass_mode = bypass_on;
    return 0;
}
10008e22:	b003      	add	sp, #12
10008e24:	bd30      	pop	{r4, r5, pc}
10008e26:	46c0      	nop			; (mov r8, r8)
10008e28:	1001818c 	.word	0x1001818c
10008e2c:	1000ab89 	.word	0x1000ab89
10008e30:	1000ab2d 	.word	0x1000ab2d
10008e34:	10008129 	.word	0x10008129

10008e38 <mpu_set_int_latched>:
 *  Any MPU register will clear the interrupt.
 *  @param[in]  enable  1 to enable, 0 to disable.
 *  @return     0 if successful.
 */
int mpu_set_int_latched(unsigned char enable)
{
10008e38:	b530      	push	{r4, r5, lr}
10008e3a:	b083      	sub	sp, #12
10008e3c:	0004      	movs	r4, r0
    unsigned char tmp;
    if (st.chip_cfg.latched_int == enable)
10008e3e:	2323      	movs	r3, #35	; 0x23
10008e40:	4a1c      	ldr	r2, [pc, #112]	; (10008eb4 <mpu_set_int_latched+0x7c>)
10008e42:	5cd3      	ldrb	r3, [r2, r3]
10008e44:	4283      	cmp	r3, r0
10008e46:	d02e      	beq.n	10008ea6 <mpu_set_int_latched+0x6e>
        return 0;

    if (enable)
10008e48:	2800      	cmp	r0, #0
10008e4a:	d003      	beq.n	10008e54 <mpu_set_int_latched+0x1c>
        tmp = BIT_LATCH_EN | BIT_ANY_RD_CLR;
10008e4c:	2230      	movs	r2, #48	; 0x30
10008e4e:	466b      	mov	r3, sp
10008e50:	71da      	strb	r2, [r3, #7]
10008e52:	e002      	b.n	10008e5a <mpu_set_int_latched+0x22>
    else
        tmp = 0;
10008e54:	2200      	movs	r2, #0
10008e56:	466b      	mov	r3, sp
10008e58:	71da      	strb	r2, [r3, #7]
    if (st.chip_cfg.bypass_mode)
10008e5a:	4b16      	ldr	r3, [pc, #88]	; (10008eb4 <mpu_set_int_latched+0x7c>)
10008e5c:	7c9b      	ldrb	r3, [r3, #18]
10008e5e:	2b00      	cmp	r3, #0
10008e60:	d005      	beq.n	10008e6e <mpu_set_int_latched+0x36>
        tmp |= BIT_BYPASS_EN;
10008e62:	466b      	mov	r3, sp
10008e64:	1dda      	adds	r2, r3, #7
10008e66:	79d9      	ldrb	r1, [r3, #7]
10008e68:	2302      	movs	r3, #2
10008e6a:	430b      	orrs	r3, r1
10008e6c:	7013      	strb	r3, [r2, #0]
    if (st.chip_cfg.active_low_int)
10008e6e:	2322      	movs	r3, #34	; 0x22
10008e70:	4a10      	ldr	r2, [pc, #64]	; (10008eb4 <mpu_set_int_latched+0x7c>)
10008e72:	5cd3      	ldrb	r3, [r2, r3]
10008e74:	2b00      	cmp	r3, #0
10008e76:	d006      	beq.n	10008e86 <mpu_set_int_latched+0x4e>
        tmp |= BIT_ACTL;
10008e78:	466b      	mov	r3, sp
10008e7a:	1dda      	adds	r2, r3, #7
10008e7c:	79db      	ldrb	r3, [r3, #7]
10008e7e:	2180      	movs	r1, #128	; 0x80
10008e80:	4249      	negs	r1, r1
10008e82:	430b      	orrs	r3, r1
10008e84:	7013      	strb	r3, [r2, #0]
    if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
10008e86:	4b0b      	ldr	r3, [pc, #44]	; (10008eb4 <mpu_set_int_latched+0x7c>)
10008e88:	681a      	ldr	r2, [r3, #0]
10008e8a:	7dd1      	ldrb	r1, [r2, #23]
10008e8c:	685b      	ldr	r3, [r3, #4]
10008e8e:	7818      	ldrb	r0, [r3, #0]
10008e90:	466b      	mov	r3, sp
10008e92:	3307      	adds	r3, #7
10008e94:	2201      	movs	r2, #1
10008e96:	4d08      	ldr	r5, [pc, #32]	; (10008eb8 <mpu_set_int_latched+0x80>)
10008e98:	47a8      	blx	r5
10008e9a:	2800      	cmp	r0, #0
10008e9c:	d105      	bne.n	10008eaa <mpu_set_int_latched+0x72>
        return -1;
    st.chip_cfg.latched_int = enable;
10008e9e:	2323      	movs	r3, #35	; 0x23
10008ea0:	4a04      	ldr	r2, [pc, #16]	; (10008eb4 <mpu_set_int_latched+0x7c>)
10008ea2:	54d4      	strb	r4, [r2, r3]
    return 0;
10008ea4:	e003      	b.n	10008eae <mpu_set_int_latched+0x76>
 */
int mpu_set_int_latched(unsigned char enable)
{
    unsigned char tmp;
    if (st.chip_cfg.latched_int == enable)
        return 0;
10008ea6:	2000      	movs	r0, #0
10008ea8:	e001      	b.n	10008eae <mpu_set_int_latched+0x76>
    if (st.chip_cfg.bypass_mode)
        tmp |= BIT_BYPASS_EN;
    if (st.chip_cfg.active_low_int)
        tmp |= BIT_ACTL;
    if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
        return -1;
10008eaa:	2001      	movs	r0, #1
10008eac:	4240      	negs	r0, r0
    st.chip_cfg.latched_int = enable;
    return 0;
}
10008eae:	b003      	add	sp, #12
10008eb0:	bd30      	pop	{r4, r5, pc}
10008eb2:	46c0      	nop			; (mov r8, r8)
10008eb4:	1001818c 	.word	0x1001818c
10008eb8:	1000ab2d 	.word	0x1000ab2d

10008ebc <mpu_lp_accel_mode>:
 *  @param[in]  rate        Minimum sampling rate, or zero to disable LP
 *                          accel mode.
 *  @return     0 if successful.
 */
int mpu_lp_accel_mode(unsigned short rate)
{
10008ebc:	b510      	push	{r4, lr}
10008ebe:	b082      	sub	sp, #8
10008ec0:	1e04      	subs	r4, r0, #0
    unsigned char tmp[2];

    if (rate > 40)
10008ec2:	2c28      	cmp	r4, #40	; 0x28
10008ec4:	d878      	bhi.n	10008fb8 <mpu_lp_accel_mode+0xfc>
        return -1;

    if (!rate) {
10008ec6:	2800      	cmp	r0, #0
10008ec8:	d115      	bne.n	10008ef6 <mpu_lp_accel_mode+0x3a>
        mpu_set_int_latched(0);
10008eca:	2000      	movs	r0, #0
10008ecc:	4b44      	ldr	r3, [pc, #272]	; (10008fe0 <mpu_lp_accel_mode+0x124>)
10008ece:	4798      	blx	r3
        tmp[0] = 0;
10008ed0:	ab01      	add	r3, sp, #4
10008ed2:	2200      	movs	r2, #0
10008ed4:	701a      	strb	r2, [r3, #0]
        tmp[1] = BIT_STBY_XYZG;
10008ed6:	3207      	adds	r2, #7
10008ed8:	705a      	strb	r2, [r3, #1]
        if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
10008eda:	4a42      	ldr	r2, [pc, #264]	; (10008fe4 <mpu_lp_accel_mode+0x128>)
10008edc:	6811      	ldr	r1, [r2, #0]
10008ede:	7d49      	ldrb	r1, [r1, #21]
10008ee0:	6852      	ldr	r2, [r2, #4]
10008ee2:	7810      	ldrb	r0, [r2, #0]
10008ee4:	2202      	movs	r2, #2
10008ee6:	4c40      	ldr	r4, [pc, #256]	; (10008fe8 <mpu_lp_accel_mode+0x12c>)
10008ee8:	47a0      	blx	r4
10008eea:	1e04      	subs	r4, r0, #0
10008eec:	d167      	bne.n	10008fbe <mpu_lp_accel_mode+0x102>
            return -1;
        st.chip_cfg.lp_accel_mode = 0;
10008eee:	2200      	movs	r2, #0
10008ef0:	4b3c      	ldr	r3, [pc, #240]	; (10008fe4 <mpu_lp_accel_mode+0x128>)
10008ef2:	751a      	strb	r2, [r3, #20]
        return 0;
10008ef4:	e071      	b.n	10008fda <mpu_lp_accel_mode+0x11e>
     * it gets a chance to deassert the interrupt pin; therefore, we shift this
     * responsibility over to the MCU.
     *
     * Any register read will clear the interrupt.
     */
    mpu_set_int_latched(1);
10008ef6:	2001      	movs	r0, #1
10008ef8:	4b39      	ldr	r3, [pc, #228]	; (10008fe0 <mpu_lp_accel_mode+0x124>)
10008efa:	4798      	blx	r3
    tmp[1] = (tmp[1] << 6) | BIT_STBY_XYZG;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
        return -1;
#elif defined MPU6500
    /* Set wake frequency. */
    if (rate == 1)
10008efc:	2c01      	cmp	r4, #1
10008efe:	d103      	bne.n	10008f08 <mpu_lp_accel_mode+0x4c>
        tmp[0] = INV_LPA_1_25HZ;
10008f00:	2202      	movs	r2, #2
10008f02:	ab01      	add	r3, sp, #4
10008f04:	701a      	strb	r2, [r3, #0]
10008f06:	e01a      	b.n	10008f3e <mpu_lp_accel_mode+0x82>
    else if (rate == 2)
10008f08:	2c02      	cmp	r4, #2
10008f0a:	d103      	bne.n	10008f14 <mpu_lp_accel_mode+0x58>
        tmp[0] = INV_LPA_2_5HZ;
10008f0c:	2203      	movs	r2, #3
10008f0e:	ab01      	add	r3, sp, #4
10008f10:	701a      	strb	r2, [r3, #0]
10008f12:	e014      	b.n	10008f3e <mpu_lp_accel_mode+0x82>
    else if (rate <= 5)
10008f14:	2c05      	cmp	r4, #5
10008f16:	d803      	bhi.n	10008f20 <mpu_lp_accel_mode+0x64>
        tmp[0] = INV_LPA_5HZ;
10008f18:	2204      	movs	r2, #4
10008f1a:	ab01      	add	r3, sp, #4
10008f1c:	701a      	strb	r2, [r3, #0]
10008f1e:	e00e      	b.n	10008f3e <mpu_lp_accel_mode+0x82>
    else if (rate <= 10)
10008f20:	2c0a      	cmp	r4, #10
10008f22:	d803      	bhi.n	10008f2c <mpu_lp_accel_mode+0x70>
        tmp[0] = INV_LPA_10HZ;
10008f24:	2205      	movs	r2, #5
10008f26:	ab01      	add	r3, sp, #4
10008f28:	701a      	strb	r2, [r3, #0]
10008f2a:	e008      	b.n	10008f3e <mpu_lp_accel_mode+0x82>
    else if (rate <= 20)
10008f2c:	2c14      	cmp	r4, #20
10008f2e:	d803      	bhi.n	10008f38 <mpu_lp_accel_mode+0x7c>
        tmp[0] = INV_LPA_20HZ;
10008f30:	2206      	movs	r2, #6
10008f32:	ab01      	add	r3, sp, #4
10008f34:	701a      	strb	r2, [r3, #0]
10008f36:	e002      	b.n	10008f3e <mpu_lp_accel_mode+0x82>
    else if (rate <= 40)
        tmp[0] = INV_LPA_40HZ;
10008f38:	2207      	movs	r2, #7
10008f3a:	ab01      	add	r3, sp, #4
10008f3c:	701a      	strb	r2, [r3, #0]
        tmp[0] = INV_LPA_160HZ;
    else if (rate <= 320)
        tmp[0] = INV_LPA_320HZ;
    else
        tmp[0] = INV_LPA_640HZ;
    if (i2c_write(st.hw->addr, st.reg->lp_accel_odr, 1, tmp))
10008f3e:	4b29      	ldr	r3, [pc, #164]	; (10008fe4 <mpu_lp_accel_mode+0x128>)
10008f40:	681a      	ldr	r2, [r3, #0]
10008f42:	7a51      	ldrb	r1, [r2, #9]
10008f44:	685b      	ldr	r3, [r3, #4]
10008f46:	7818      	ldrb	r0, [r3, #0]
10008f48:	ab01      	add	r3, sp, #4
10008f4a:	2201      	movs	r2, #1
10008f4c:	4c26      	ldr	r4, [pc, #152]	; (10008fe8 <mpu_lp_accel_mode+0x12c>)
10008f4e:	47a0      	blx	r4
10008f50:	2800      	cmp	r0, #0
10008f52:	d137      	bne.n	10008fc4 <mpu_lp_accel_mode+0x108>
        return -1;
    /* Enable LP ACCEL mode, ACCEL_FCHOICE_B=1*/
    if (i2c_read(st.hw->addr, st.reg->accel_cfg2, 1, tmp))
10008f54:	4b23      	ldr	r3, [pc, #140]	; (10008fe4 <mpu_lp_accel_mode+0x128>)
10008f56:	681a      	ldr	r2, [r3, #0]
10008f58:	7a11      	ldrb	r1, [r2, #8]
10008f5a:	685b      	ldr	r3, [r3, #4]
10008f5c:	7818      	ldrb	r0, [r3, #0]
10008f5e:	ab01      	add	r3, sp, #4
10008f60:	2201      	movs	r2, #1
10008f62:	4c22      	ldr	r4, [pc, #136]	; (10008fec <mpu_lp_accel_mode+0x130>)
10008f64:	47a0      	blx	r4
10008f66:	2800      	cmp	r0, #0
10008f68:	d12f      	bne.n	10008fca <mpu_lp_accel_mode+0x10e>
       	return -1;

    tmp[0] = BIT_ACCL_FC_B | tmp[0];
10008f6a:	ab01      	add	r3, sp, #4
10008f6c:	7819      	ldrb	r1, [r3, #0]
10008f6e:	2208      	movs	r2, #8
10008f70:	430a      	orrs	r2, r1
10008f72:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->accel_cfg2, 1, tmp))
10008f74:	4a1b      	ldr	r2, [pc, #108]	; (10008fe4 <mpu_lp_accel_mode+0x128>)
10008f76:	6811      	ldr	r1, [r2, #0]
10008f78:	7a09      	ldrb	r1, [r1, #8]
10008f7a:	6852      	ldr	r2, [r2, #4]
10008f7c:	7810      	ldrb	r0, [r2, #0]
10008f7e:	2201      	movs	r2, #1
10008f80:	4c19      	ldr	r4, [pc, #100]	; (10008fe8 <mpu_lp_accel_mode+0x12c>)
10008f82:	47a0      	blx	r4
10008f84:	2800      	cmp	r0, #0
10008f86:	d123      	bne.n	10008fd0 <mpu_lp_accel_mode+0x114>
    	return -1;
    tmp[0] = BIT_LPA_CYCLE;
10008f88:	ab01      	add	r3, sp, #4
10008f8a:	2220      	movs	r2, #32
10008f8c:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, tmp))
10008f8e:	4a15      	ldr	r2, [pc, #84]	; (10008fe4 <mpu_lp_accel_mode+0x128>)
10008f90:	6811      	ldr	r1, [r2, #0]
10008f92:	7d49      	ldrb	r1, [r1, #21]
10008f94:	6852      	ldr	r2, [r2, #4]
10008f96:	7810      	ldrb	r0, [r2, #0]
10008f98:	2201      	movs	r2, #1
10008f9a:	4c13      	ldr	r4, [pc, #76]	; (10008fe8 <mpu_lp_accel_mode+0x12c>)
10008f9c:	47a0      	blx	r4
10008f9e:	1e04      	subs	r4, r0, #0
10008fa0:	d119      	bne.n	10008fd6 <mpu_lp_accel_mode+0x11a>
        return -1;
#endif
    st.chip_cfg.sensors = INV_XYZ_ACCEL;
10008fa2:	4b10      	ldr	r3, [pc, #64]	; (10008fe4 <mpu_lp_accel_mode+0x128>)
10008fa4:	2208      	movs	r2, #8
10008fa6:	729a      	strb	r2, [r3, #10]
    st.chip_cfg.clk_src = 0;
10008fa8:	2200      	movs	r2, #0
10008faa:	731a      	strb	r2, [r3, #12]
    st.chip_cfg.lp_accel_mode = 1;
10008fac:	3201      	adds	r2, #1
10008fae:	751a      	strb	r2, [r3, #20]
    mpu_configure_fifo(0);
10008fb0:	2000      	movs	r0, #0
10008fb2:	4b0f      	ldr	r3, [pc, #60]	; (10008ff0 <mpu_lp_accel_mode+0x134>)
10008fb4:	4798      	blx	r3

    return 0;
10008fb6:	e010      	b.n	10008fda <mpu_lp_accel_mode+0x11e>
int mpu_lp_accel_mode(unsigned short rate)
{
    unsigned char tmp[2];

    if (rate > 40)
        return -1;
10008fb8:	2401      	movs	r4, #1
10008fba:	4264      	negs	r4, r4
10008fbc:	e00d      	b.n	10008fda <mpu_lp_accel_mode+0x11e>
    if (!rate) {
        mpu_set_int_latched(0);
        tmp[0] = 0;
        tmp[1] = BIT_STBY_XYZG;
        if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
            return -1;
10008fbe:	2401      	movs	r4, #1
10008fc0:	4264      	negs	r4, r4
10008fc2:	e00a      	b.n	10008fda <mpu_lp_accel_mode+0x11e>
    else if (rate <= 320)
        tmp[0] = INV_LPA_320HZ;
    else
        tmp[0] = INV_LPA_640HZ;
    if (i2c_write(st.hw->addr, st.reg->lp_accel_odr, 1, tmp))
        return -1;
10008fc4:	2401      	movs	r4, #1
10008fc6:	4264      	negs	r4, r4
10008fc8:	e007      	b.n	10008fda <mpu_lp_accel_mode+0x11e>
    /* Enable LP ACCEL mode, ACCEL_FCHOICE_B=1*/
    if (i2c_read(st.hw->addr, st.reg->accel_cfg2, 1, tmp))
       	return -1;
10008fca:	2401      	movs	r4, #1
10008fcc:	4264      	negs	r4, r4
10008fce:	e004      	b.n	10008fda <mpu_lp_accel_mode+0x11e>

    tmp[0] = BIT_ACCL_FC_B | tmp[0];
    if (i2c_write(st.hw->addr, st.reg->accel_cfg2, 1, tmp))
    	return -1;
10008fd0:	2401      	movs	r4, #1
10008fd2:	4264      	negs	r4, r4
10008fd4:	e001      	b.n	10008fda <mpu_lp_accel_mode+0x11e>
    tmp[0] = BIT_LPA_CYCLE;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, tmp))
        return -1;
10008fd6:	2401      	movs	r4, #1
10008fd8:	4264      	negs	r4, r4
    st.chip_cfg.clk_src = 0;
    st.chip_cfg.lp_accel_mode = 1;
    mpu_configure_fifo(0);

    return 0;
}
10008fda:	0020      	movs	r0, r4
10008fdc:	b002      	add	sp, #8
10008fde:	bd10      	pop	{r4, pc}
10008fe0:	10008e39 	.word	0x10008e39
10008fe4:	1001818c 	.word	0x1001818c
10008fe8:	1000ab2d 	.word	0x1000ab2d
10008fec:	1000ab89 	.word	0x1000ab89
10008ff0:	10008a85 	.word	0x10008a85

10008ff4 <mpu_set_sample_rate>:
 *  Sampling rate must be between 4Hz and 1kHz.
 *  @param[in]  rate    Desired sampling rate (Hz).
 *  @return     0 if successful.
 */
int mpu_set_sample_rate(unsigned short rate)
{
10008ff4:	b530      	push	{r4, r5, lr}
10008ff6:	b083      	sub	sp, #12
10008ff8:	0004      	movs	r4, r0
    unsigned char data;

    if (!(st.chip_cfg.sensors))
10008ffa:	4b2c      	ldr	r3, [pc, #176]	; (100090ac <mpu_set_sample_rate+0xb8>)
10008ffc:	7a9b      	ldrb	r3, [r3, #10]
10008ffe:	2b00      	cmp	r3, #0
10009000:	d048      	beq.n	10009094 <mpu_set_sample_rate+0xa0>
        return -1;

    if (st.chip_cfg.dmp_on)
10009002:	2324      	movs	r3, #36	; 0x24
10009004:	4a29      	ldr	r2, [pc, #164]	; (100090ac <mpu_set_sample_rate+0xb8>)
10009006:	5cd3      	ldrb	r3, [r2, r3]
10009008:	2b00      	cmp	r3, #0
1000900a:	d146      	bne.n	1000909a <mpu_set_sample_rate+0xa6>
        return -1;
    else {
        if (st.chip_cfg.lp_accel_mode) {
1000900c:	7d13      	ldrb	r3, [r2, #20]
1000900e:	2b00      	cmp	r3, #0
10009010:	d00a      	beq.n	10009028 <mpu_set_sample_rate+0x34>
            if (rate && (rate <= 40)) {
10009012:	1e43      	subs	r3, r0, #1
10009014:	b29b      	uxth	r3, r3
10009016:	2b27      	cmp	r3, #39	; 0x27
10009018:	d803      	bhi.n	10009022 <mpu_set_sample_rate+0x2e>
                /* Just stay in low-power accel mode. */
                mpu_lp_accel_mode(rate);
1000901a:	4b25      	ldr	r3, [pc, #148]	; (100090b0 <mpu_set_sample_rate+0xbc>)
1000901c:	4798      	blx	r3
                return 0;
1000901e:	2400      	movs	r4, #0
10009020:	e040      	b.n	100090a4 <mpu_set_sample_rate+0xb0>
            }
            /* Requested rate exceeds the allowed frequencies in LP accel mode,
             * switch back to full-power mode.
             */
            mpu_lp_accel_mode(0);
10009022:	2000      	movs	r0, #0
10009024:	4b22      	ldr	r3, [pc, #136]	; (100090b0 <mpu_set_sample_rate+0xbc>)
10009026:	4798      	blx	r3
        }
        if (rate < 4)
            rate = 4;
10009028:	2104      	movs	r1, #4
            /* Requested rate exceeds the allowed frequencies in LP accel mode,
             * switch back to full-power mode.
             */
            mpu_lp_accel_mode(0);
        }
        if (rate < 4)
1000902a:	2c03      	cmp	r4, #3
1000902c:	d907      	bls.n	1000903e <mpu_set_sample_rate+0x4a>
1000902e:	1c21      	adds	r1, r4, #0
10009030:	23fa      	movs	r3, #250	; 0xfa
10009032:	009b      	lsls	r3, r3, #2
10009034:	429c      	cmp	r4, r3
10009036:	d901      	bls.n	1000903c <mpu_set_sample_rate+0x48>
10009038:	4b1e      	ldr	r3, [pc, #120]	; (100090b4 <mpu_set_sample_rate+0xc0>)
1000903a:	8819      	ldrh	r1, [r3, #0]
1000903c:	b289      	uxth	r1, r1
            rate = 4;
        else if (rate > 1000)
            rate = 1000;

        data = 1000 / rate - 1;
1000903e:	466b      	mov	r3, sp
10009040:	1ddc      	adds	r4, r3, #7
10009042:	20fa      	movs	r0, #250	; 0xfa
10009044:	0080      	lsls	r0, r0, #2
10009046:	4b1c      	ldr	r3, [pc, #112]	; (100090b8 <mpu_set_sample_rate+0xc4>)
10009048:	4798      	blx	r3
1000904a:	3801      	subs	r0, #1
1000904c:	7020      	strb	r0, [r4, #0]
        if (i2c_write(st.hw->addr, st.reg->rate_div, 1, &data))
1000904e:	4b17      	ldr	r3, [pc, #92]	; (100090ac <mpu_set_sample_rate+0xb8>)
10009050:	681a      	ldr	r2, [r3, #0]
10009052:	7851      	ldrb	r1, [r2, #1]
10009054:	685b      	ldr	r3, [r3, #4]
10009056:	7818      	ldrb	r0, [r3, #0]
10009058:	0023      	movs	r3, r4
1000905a:	2201      	movs	r2, #1
1000905c:	4c17      	ldr	r4, [pc, #92]	; (100090bc <mpu_set_sample_rate+0xc8>)
1000905e:	47a0      	blx	r4
10009060:	1e04      	subs	r4, r0, #0
10009062:	d11d      	bne.n	100090a0 <mpu_set_sample_rate+0xac>
            return -1;

        st.chip_cfg.sample_rate = 1000 / (1 + data);
10009064:	4d11      	ldr	r5, [pc, #68]	; (100090ac <mpu_set_sample_rate+0xb8>)
10009066:	466b      	mov	r3, sp
10009068:	79d9      	ldrb	r1, [r3, #7]
1000906a:	3101      	adds	r1, #1
1000906c:	20fa      	movs	r0, #250	; 0xfa
1000906e:	0080      	lsls	r0, r0, #2
10009070:	4b11      	ldr	r3, [pc, #68]	; (100090b8 <mpu_set_sample_rate+0xc4>)
10009072:	4798      	blx	r3
10009074:	81e8      	strh	r0, [r5, #14]

#ifdef AK89xx_SECONDARY
        mpu_set_compass_sample_rate(min(st.chip_cfg.compass_sample_rate, MAX_COMPASS_SAMPLE_RATE));
10009076:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
10009078:	1c18      	adds	r0, r3, #0
1000907a:	b29b      	uxth	r3, r3
1000907c:	2b64      	cmp	r3, #100	; 0x64
1000907e:	d900      	bls.n	10009082 <mpu_set_sample_rate+0x8e>
10009080:	2064      	movs	r0, #100	; 0x64
10009082:	b280      	uxth	r0, r0
10009084:	4b0e      	ldr	r3, [pc, #56]	; (100090c0 <mpu_set_sample_rate+0xcc>)
10009086:	4798      	blx	r3
#endif

        /* Automatically set LPF to 1/2 sampling rate. */
        mpu_set_lpf(st.chip_cfg.sample_rate >> 1);
10009088:	4b08      	ldr	r3, [pc, #32]	; (100090ac <mpu_set_sample_rate+0xb8>)
1000908a:	89d8      	ldrh	r0, [r3, #14]
1000908c:	0840      	lsrs	r0, r0, #1
1000908e:	4b0d      	ldr	r3, [pc, #52]	; (100090c4 <mpu_set_sample_rate+0xd0>)
10009090:	4798      	blx	r3
        return 0;
10009092:	e007      	b.n	100090a4 <mpu_set_sample_rate+0xb0>
int mpu_set_sample_rate(unsigned short rate)
{
    unsigned char data;

    if (!(st.chip_cfg.sensors))
        return -1;
10009094:	2401      	movs	r4, #1
10009096:	4264      	negs	r4, r4
10009098:	e004      	b.n	100090a4 <mpu_set_sample_rate+0xb0>

    if (st.chip_cfg.dmp_on)
        return -1;
1000909a:	2401      	movs	r4, #1
1000909c:	4264      	negs	r4, r4
1000909e:	e001      	b.n	100090a4 <mpu_set_sample_rate+0xb0>
        else if (rate > 1000)
            rate = 1000;

        data = 1000 / rate - 1;
        if (i2c_write(st.hw->addr, st.reg->rate_div, 1, &data))
            return -1;
100090a0:	2401      	movs	r4, #1
100090a2:	4264      	negs	r4, r4

        /* Automatically set LPF to 1/2 sampling rate. */
        mpu_set_lpf(st.chip_cfg.sample_rate >> 1);
        return 0;
    }
}
100090a4:	0020      	movs	r0, r4
100090a6:	b003      	add	sp, #12
100090a8:	bd30      	pop	{r4, r5, pc}
100090aa:	46c0      	nop			; (mov r8, r8)
100090ac:	1001818c 	.word	0x1001818c
100090b0:	10008ebd 	.word	0x10008ebd
100090b4:	10016010 	.word	0x10016010
100090b8:	10012e79 	.word	0x10012e79
100090bc:	1000ab2d 	.word	0x1000ab2d
100090c0:	10008a0d 	.word	0x10008a0d
100090c4:	10008935 	.word	0x10008935

100090c8 <mpu_set_sensors>:
 *  \n INV_XYZ_COMPASS
 *  @param[in]  sensors    Mask of sensors to wake.
 *  @return     0 if successful.
 */
int mpu_set_sensors(unsigned char sensors)
{
100090c8:	b530      	push	{r4, r5, lr}
100090ca:	b083      	sub	sp, #12
100090cc:	0004      	movs	r4, r0
    unsigned char data;
#ifdef AK89xx_SECONDARY
    unsigned char user_ctrl;
#endif

    if (sensors & INV_XYZ_GYRO)
100090ce:	2370      	movs	r3, #112	; 0x70
100090d0:	4203      	tst	r3, r0
100090d2:	d003      	beq.n	100090dc <mpu_set_sensors+0x14>
        data = INV_CLK_PLL;
100090d4:	2201      	movs	r2, #1
100090d6:	466b      	mov	r3, sp
100090d8:	71da      	strb	r2, [r3, #7]
100090da:	e015      	b.n	10009108 <mpu_set_sensors+0x40>
    else if (sensors)
100090dc:	2800      	cmp	r0, #0
100090de:	d003      	beq.n	100090e8 <mpu_set_sensors+0x20>
        data = 0;
100090e0:	2200      	movs	r2, #0
100090e2:	466b      	mov	r3, sp
100090e4:	71da      	strb	r2, [r3, #7]
100090e6:	e00f      	b.n	10009108 <mpu_set_sensors+0x40>
    else
        data = BIT_SLEEP;
100090e8:	466b      	mov	r3, sp
100090ea:	3307      	adds	r3, #7
100090ec:	2240      	movs	r2, #64	; 0x40
100090ee:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, &data)) {
100090f0:	4a6a      	ldr	r2, [pc, #424]	; (1000929c <mpu_set_sensors+0x1d4>)
100090f2:	6811      	ldr	r1, [r2, #0]
100090f4:	7d49      	ldrb	r1, [r1, #21]
100090f6:	6852      	ldr	r2, [r2, #4]
100090f8:	7810      	ldrb	r0, [r2, #0]
100090fa:	2201      	movs	r2, #1
100090fc:	4d68      	ldr	r5, [pc, #416]	; (100092a0 <mpu_set_sensors+0x1d8>)
100090fe:	47a8      	blx	r5
10009100:	2800      	cmp	r0, #0
10009102:	d100      	bne.n	10009106 <mpu_set_sensors+0x3e>
10009104:	e0b2      	b.n	1000926c <mpu_set_sensors+0x1a4>
10009106:	e00b      	b.n	10009120 <mpu_set_sensors+0x58>
10009108:	4b64      	ldr	r3, [pc, #400]	; (1000929c <mpu_set_sensors+0x1d4>)
1000910a:	681a      	ldr	r2, [r3, #0]
1000910c:	7d51      	ldrb	r1, [r2, #21]
1000910e:	685b      	ldr	r3, [r3, #4]
10009110:	7818      	ldrb	r0, [r3, #0]
10009112:	466b      	mov	r3, sp
10009114:	3307      	adds	r3, #7
10009116:	2201      	movs	r2, #1
10009118:	4d61      	ldr	r5, [pc, #388]	; (100092a0 <mpu_set_sensors+0x1d8>)
1000911a:	47a8      	blx	r5
1000911c:	2800      	cmp	r0, #0
1000911e:	d005      	beq.n	1000912c <mpu_set_sensors+0x64>
        st.chip_cfg.sensors = 0;
10009120:	2200      	movs	r2, #0
10009122:	4b5e      	ldr	r3, [pc, #376]	; (1000929c <mpu_set_sensors+0x1d4>)
10009124:	729a      	strb	r2, [r3, #10]
        return -1;
10009126:	2501      	movs	r5, #1
10009128:	426d      	negs	r5, r5
1000912a:	e0b4      	b.n	10009296 <mpu_set_sensors+0x1ce>
    }
    st.chip_cfg.clk_src = data & ~BIT_SLEEP;
1000912c:	466b      	mov	r3, sp
1000912e:	1dda      	adds	r2, r3, #7
10009130:	79db      	ldrb	r3, [r3, #7]
10009132:	2140      	movs	r1, #64	; 0x40
10009134:	438b      	bics	r3, r1
10009136:	4959      	ldr	r1, [pc, #356]	; (1000929c <mpu_set_sensors+0x1d4>)
10009138:	730b      	strb	r3, [r1, #12]

    data = 0;
1000913a:	2300      	movs	r3, #0
1000913c:	7013      	strb	r3, [r2, #0]
    if (!(sensors & INV_X_GYRO))
1000913e:	0663      	lsls	r3, r4, #25
10009140:	d402      	bmi.n	10009148 <mpu_set_sensors+0x80>
        data |= BIT_STBY_XG;
10009142:	2204      	movs	r2, #4
10009144:	466b      	mov	r3, sp
10009146:	71da      	strb	r2, [r3, #7]
    if (!(sensors & INV_Y_GYRO))
10009148:	06a3      	lsls	r3, r4, #26
1000914a:	d405      	bmi.n	10009158 <mpu_set_sensors+0x90>
        data |= BIT_STBY_YG;
1000914c:	466b      	mov	r3, sp
1000914e:	1dda      	adds	r2, r3, #7
10009150:	79d9      	ldrb	r1, [r3, #7]
10009152:	2302      	movs	r3, #2
10009154:	430b      	orrs	r3, r1
10009156:	7013      	strb	r3, [r2, #0]
    if (!(sensors & INV_Z_GYRO))
10009158:	06e3      	lsls	r3, r4, #27
1000915a:	d405      	bmi.n	10009168 <mpu_set_sensors+0xa0>
        data |= BIT_STBY_ZG;
1000915c:	466b      	mov	r3, sp
1000915e:	1dda      	adds	r2, r3, #7
10009160:	79d9      	ldrb	r1, [r3, #7]
10009162:	2301      	movs	r3, #1
10009164:	430b      	orrs	r3, r1
10009166:	7013      	strb	r3, [r2, #0]
    if (!(sensors & INV_XYZ_ACCEL))
10009168:	0723      	lsls	r3, r4, #28
1000916a:	d405      	bmi.n	10009178 <mpu_set_sensors+0xb0>
        data |= BIT_STBY_XYZA;
1000916c:	466b      	mov	r3, sp
1000916e:	1dda      	adds	r2, r3, #7
10009170:	79d9      	ldrb	r1, [r3, #7]
10009172:	2338      	movs	r3, #56	; 0x38
10009174:	430b      	orrs	r3, r1
10009176:	7013      	strb	r3, [r2, #0]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_2, 1, &data)) {
10009178:	4b48      	ldr	r3, [pc, #288]	; (1000929c <mpu_set_sensors+0x1d4>)
1000917a:	681a      	ldr	r2, [r3, #0]
1000917c:	7d91      	ldrb	r1, [r2, #22]
1000917e:	685b      	ldr	r3, [r3, #4]
10009180:	7818      	ldrb	r0, [r3, #0]
10009182:	466b      	mov	r3, sp
10009184:	3307      	adds	r3, #7
10009186:	2201      	movs	r2, #1
10009188:	4d45      	ldr	r5, [pc, #276]	; (100092a0 <mpu_set_sensors+0x1d8>)
1000918a:	47a8      	blx	r5
1000918c:	2800      	cmp	r0, #0
1000918e:	d005      	beq.n	1000919c <mpu_set_sensors+0xd4>
        st.chip_cfg.sensors = 0;
10009190:	2200      	movs	r2, #0
10009192:	4b42      	ldr	r3, [pc, #264]	; (1000929c <mpu_set_sensors+0x1d4>)
10009194:	729a      	strb	r2, [r3, #10]
        return -1;
10009196:	2501      	movs	r5, #1
10009198:	426d      	negs	r5, r5
1000919a:	e07c      	b.n	10009296 <mpu_set_sensors+0x1ce>
    }

    if (sensors && (sensors != INV_XYZ_ACCEL))
1000919c:	2308      	movs	r3, #8
1000919e:	0022      	movs	r2, r4
100091a0:	439a      	bics	r2, r3
100091a2:	d06b      	beq.n	1000927c <mpu_set_sensors+0x1b4>
        /* Latched interrupts only used in LP accel mode. */
        mpu_set_int_latched(0);
100091a4:	2000      	movs	r0, #0
100091a6:	4b3f      	ldr	r3, [pc, #252]	; (100092a4 <mpu_set_sensors+0x1dc>)
100091a8:	4798      	blx	r3
    if (sensors & INV_XYZ_COMPASS)
        mpu_set_bypass(1);
    else
        mpu_set_bypass(0);
#else
    if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
100091aa:	4b3c      	ldr	r3, [pc, #240]	; (1000929c <mpu_set_sensors+0x1d4>)
100091ac:	681a      	ldr	r2, [r3, #0]
100091ae:	7911      	ldrb	r1, [r2, #4]
100091b0:	685b      	ldr	r3, [r3, #4]
100091b2:	7818      	ldrb	r0, [r3, #0]
100091b4:	466b      	mov	r3, sp
100091b6:	3306      	adds	r3, #6
100091b8:	2201      	movs	r2, #1
100091ba:	4d3b      	ldr	r5, [pc, #236]	; (100092a8 <mpu_set_sensors+0x1e0>)
100091bc:	47a8      	blx	r5
100091be:	2800      	cmp	r0, #0
100091c0:	d148      	bne.n	10009254 <mpu_set_sensors+0x18c>
        return -1;
    /* Handle AKM power management. */
    if (sensors & INV_XYZ_COMPASS) {
100091c2:	07e3      	lsls	r3, r4, #31
100091c4:	d509      	bpl.n	100091da <mpu_set_sensors+0x112>
        data = AKM_SINGLE_MEASUREMENT;
100091c6:	2211      	movs	r2, #17
100091c8:	466b      	mov	r3, sp
100091ca:	71da      	strb	r2, [r3, #7]
        user_ctrl |= BIT_AUX_IF_EN;
100091cc:	466b      	mov	r3, sp
100091ce:	1d9a      	adds	r2, r3, #6
100091d0:	7999      	ldrb	r1, [r3, #6]
100091d2:	2320      	movs	r3, #32
100091d4:	430b      	orrs	r3, r1
100091d6:	7013      	strb	r3, [r2, #0]
100091d8:	e008      	b.n	100091ec <mpu_set_sensors+0x124>
    } else {
        data = AKM_POWER_DOWN;
100091da:	2210      	movs	r2, #16
100091dc:	466b      	mov	r3, sp
100091de:	71da      	strb	r2, [r3, #7]
        user_ctrl &= ~BIT_AUX_IF_EN;
100091e0:	466b      	mov	r3, sp
100091e2:	1d9a      	adds	r2, r3, #6
100091e4:	799b      	ldrb	r3, [r3, #6]
100091e6:	2120      	movs	r1, #32
100091e8:	438b      	bics	r3, r1
100091ea:	7013      	strb	r3, [r2, #0]
    }
    if (st.chip_cfg.dmp_on)
100091ec:	2324      	movs	r3, #36	; 0x24
100091ee:	4a2b      	ldr	r2, [pc, #172]	; (1000929c <mpu_set_sensors+0x1d4>)
100091f0:	5cd3      	ldrb	r3, [r2, r3]
100091f2:	2b00      	cmp	r3, #0
100091f4:	d007      	beq.n	10009206 <mpu_set_sensors+0x13e>
        user_ctrl |= BIT_DMP_EN;
100091f6:	466b      	mov	r3, sp
100091f8:	1d9a      	adds	r2, r3, #6
100091fa:	799b      	ldrb	r3, [r3, #6]
100091fc:	2180      	movs	r1, #128	; 0x80
100091fe:	4249      	negs	r1, r1
10009200:	430b      	orrs	r3, r1
10009202:	7013      	strb	r3, [r2, #0]
10009204:	e005      	b.n	10009212 <mpu_set_sensors+0x14a>
    else
        user_ctrl &= ~BIT_DMP_EN;
10009206:	466b      	mov	r3, sp
10009208:	1d9a      	adds	r2, r3, #6
1000920a:	799b      	ldrb	r3, [r3, #6]
1000920c:	217f      	movs	r1, #127	; 0x7f
1000920e:	400b      	ands	r3, r1
10009210:	7013      	strb	r3, [r2, #0]
    if (i2c_write(st.hw->addr, st.reg->s1_do, 1, &data))
10009212:	4b22      	ldr	r3, [pc, #136]	; (1000929c <mpu_set_sensors+0x1d4>)
10009214:	2226      	movs	r2, #38	; 0x26
10009216:	6819      	ldr	r1, [r3, #0]
10009218:	5c89      	ldrb	r1, [r1, r2]
1000921a:	685b      	ldr	r3, [r3, #4]
1000921c:	7818      	ldrb	r0, [r3, #0]
1000921e:	466b      	mov	r3, sp
10009220:	3307      	adds	r3, #7
10009222:	3a25      	subs	r2, #37	; 0x25
10009224:	4d1e      	ldr	r5, [pc, #120]	; (100092a0 <mpu_set_sensors+0x1d8>)
10009226:	47a8      	blx	r5
10009228:	2800      	cmp	r0, #0
1000922a:	d116      	bne.n	1000925a <mpu_set_sensors+0x192>
        return -1;
    /* Enable/disable I2C master mode. */
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
1000922c:	4b1b      	ldr	r3, [pc, #108]	; (1000929c <mpu_set_sensors+0x1d4>)
1000922e:	681a      	ldr	r2, [r3, #0]
10009230:	7911      	ldrb	r1, [r2, #4]
10009232:	685b      	ldr	r3, [r3, #4]
10009234:	7818      	ldrb	r0, [r3, #0]
10009236:	466b      	mov	r3, sp
10009238:	3306      	adds	r3, #6
1000923a:	2201      	movs	r2, #1
1000923c:	4d18      	ldr	r5, [pc, #96]	; (100092a0 <mpu_set_sensors+0x1d8>)
1000923e:	47a8      	blx	r5
10009240:	1e05      	subs	r5, r0, #0
10009242:	d10d      	bne.n	10009260 <mpu_set_sensors+0x198>
        return -1;
#endif
#endif

    st.chip_cfg.sensors = sensors;
10009244:	4b15      	ldr	r3, [pc, #84]	; (1000929c <mpu_set_sensors+0x1d4>)
10009246:	729c      	strb	r4, [r3, #10]
    st.chip_cfg.lp_accel_mode = 0;
10009248:	2200      	movs	r2, #0
1000924a:	751a      	strb	r2, [r3, #20]
    delay_ms(50);
1000924c:	2032      	movs	r0, #50	; 0x32
1000924e:	4b17      	ldr	r3, [pc, #92]	; (100092ac <mpu_set_sensors+0x1e4>)
10009250:	4798      	blx	r3
    return 0;
10009252:	e020      	b.n	10009296 <mpu_set_sensors+0x1ce>
        mpu_set_bypass(1);
    else
        mpu_set_bypass(0);
#else
    if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
        return -1;
10009254:	2501      	movs	r5, #1
10009256:	426d      	negs	r5, r5
10009258:	e01d      	b.n	10009296 <mpu_set_sensors+0x1ce>
    if (st.chip_cfg.dmp_on)
        user_ctrl |= BIT_DMP_EN;
    else
        user_ctrl &= ~BIT_DMP_EN;
    if (i2c_write(st.hw->addr, st.reg->s1_do, 1, &data))
        return -1;
1000925a:	2501      	movs	r5, #1
1000925c:	426d      	negs	r5, r5
1000925e:	e01a      	b.n	10009296 <mpu_set_sensors+0x1ce>
    /* Enable/disable I2C master mode. */
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
        return -1;
10009260:	2501      	movs	r5, #1
10009262:	426d      	negs	r5, r5
10009264:	e017      	b.n	10009296 <mpu_set_sensors+0x1ce>
        mpu_set_bypass(1);
    else
        mpu_set_bypass(0);
#else
    if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
        return -1;
10009266:	2501      	movs	r5, #1
10009268:	426d      	negs	r5, r5
1000926a:	e014      	b.n	10009296 <mpu_set_sensors+0x1ce>
        data = BIT_SLEEP;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, &data)) {
        st.chip_cfg.sensors = 0;
        return -1;
    }
    st.chip_cfg.clk_src = data & ~BIT_SLEEP;
1000926c:	466b      	mov	r3, sp
1000926e:	3307      	adds	r3, #7
10009270:	781b      	ldrb	r3, [r3, #0]
10009272:	2240      	movs	r2, #64	; 0x40
10009274:	4393      	bics	r3, r2
10009276:	4a09      	ldr	r2, [pc, #36]	; (1000929c <mpu_set_sensors+0x1d4>)
10009278:	7313      	strb	r3, [r2, #12]
1000927a:	e762      	b.n	10009142 <mpu_set_sensors+0x7a>
    if (sensors & INV_XYZ_COMPASS)
        mpu_set_bypass(1);
    else
        mpu_set_bypass(0);
#else
    if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
1000927c:	4b07      	ldr	r3, [pc, #28]	; (1000929c <mpu_set_sensors+0x1d4>)
1000927e:	681a      	ldr	r2, [r3, #0]
10009280:	7911      	ldrb	r1, [r2, #4]
10009282:	685b      	ldr	r3, [r3, #4]
10009284:	7818      	ldrb	r0, [r3, #0]
10009286:	466b      	mov	r3, sp
10009288:	3306      	adds	r3, #6
1000928a:	2201      	movs	r2, #1
1000928c:	4d06      	ldr	r5, [pc, #24]	; (100092a8 <mpu_set_sensors+0x1e0>)
1000928e:	47a8      	blx	r5
10009290:	2800      	cmp	r0, #0
10009292:	d0a2      	beq.n	100091da <mpu_set_sensors+0x112>
10009294:	e7e7      	b.n	10009266 <mpu_set_sensors+0x19e>

    st.chip_cfg.sensors = sensors;
    st.chip_cfg.lp_accel_mode = 0;
    delay_ms(50);
    return 0;
}
10009296:	0028      	movs	r0, r5
10009298:	b003      	add	sp, #12
1000929a:	bd30      	pop	{r4, r5, pc}
1000929c:	1001818c 	.word	0x1001818c
100092a0:	1000ab2d 	.word	0x1000ab2d
100092a4:	10008e39 	.word	0x10008e39
100092a8:	1000ab89 	.word	0x1000ab89
100092ac:	10008129 	.word	0x10008129

100092b0 <mpu_init>:
 *  Data ready interrupt: Disabled, active low, unlatched.
 *  @param[in]  int_param   Platform-specific parameters to interrupt API.
 *  @return     0 if successful.
 */
int mpu_init(struct int_param_s *int_param)
{
100092b0:	b530      	push	{r4, r5, lr}
100092b2:	b085      	sub	sp, #20
    unsigned char data[6];

    /* Reset device. */
    data[0] = BIT_RESET;
100092b4:	ab02      	add	r3, sp, #8
100092b6:	2280      	movs	r2, #128	; 0x80
100092b8:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
100092ba:	4ab9      	ldr	r2, [pc, #740]	; (100095a0 <mpu_init+0x2f0>)
100092bc:	6811      	ldr	r1, [r2, #0]
100092be:	7d49      	ldrb	r1, [r1, #21]
100092c0:	6852      	ldr	r2, [r2, #4]
100092c2:	7810      	ldrb	r0, [r2, #0]
100092c4:	2201      	movs	r2, #1
100092c6:	4cb7      	ldr	r4, [pc, #732]	; (100095a4 <mpu_init+0x2f4>)
100092c8:	47a0      	blx	r4
100092ca:	2800      	cmp	r0, #0
100092cc:	d000      	beq.n	100092d0 <mpu_init+0x20>
100092ce:	e149      	b.n	10009564 <mpu_init+0x2b4>
        return -1;
    delay_ms(100);
100092d0:	3064      	adds	r0, #100	; 0x64
100092d2:	4bb5      	ldr	r3, [pc, #724]	; (100095a8 <mpu_init+0x2f8>)
100092d4:	4798      	blx	r3

    /* Wake up chip. */
    data[0] = 0x00;
100092d6:	ab02      	add	r3, sp, #8
100092d8:	2200      	movs	r2, #0
100092da:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
100092dc:	4ab0      	ldr	r2, [pc, #704]	; (100095a0 <mpu_init+0x2f0>)
100092de:	6811      	ldr	r1, [r2, #0]
100092e0:	7d49      	ldrb	r1, [r1, #21]
100092e2:	6852      	ldr	r2, [r2, #4]
100092e4:	7810      	ldrb	r0, [r2, #0]
100092e6:	2201      	movs	r2, #1
100092e8:	4cae      	ldr	r4, [pc, #696]	; (100095a4 <mpu_init+0x2f4>)
100092ea:	47a0      	blx	r4
100092ec:	2800      	cmp	r0, #0
100092ee:	d000      	beq.n	100092f2 <mpu_init+0x42>
100092f0:	e13b      	b.n	1000956a <mpu_init+0x2ba>
        return -1;

   st.chip_cfg.accel_half = 0;
100092f2:	4aab      	ldr	r2, [pc, #684]	; (100095a0 <mpu_init+0x2f0>)
100092f4:	2300      	movs	r3, #0
100092f6:	74d3      	strb	r3, [r2, #19]

#ifdef MPU6500
    /* MPU6500 shares 4kB of memory between the DMP and the FIFO. Since the
     * first 3kB are needed by the DMP, we'll use the last 1kB for the FIFO.
     */
    data[0] = BIT_FIFO_SIZE_1024;
100092f8:	ab02      	add	r3, sp, #8
100092fa:	2140      	movs	r1, #64	; 0x40
100092fc:	7019      	strb	r1, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->accel_cfg2, 1, data))
100092fe:	6811      	ldr	r1, [r2, #0]
10009300:	7a09      	ldrb	r1, [r1, #8]
10009302:	6852      	ldr	r2, [r2, #4]
10009304:	7810      	ldrb	r0, [r2, #0]
10009306:	2201      	movs	r2, #1
10009308:	4ca6      	ldr	r4, [pc, #664]	; (100095a4 <mpu_init+0x2f4>)
1000930a:	47a0      	blx	r4
1000930c:	2800      	cmp	r0, #0
1000930e:	d000      	beq.n	10009312 <mpu_init+0x62>
10009310:	e12e      	b.n	10009570 <mpu_init+0x2c0>
        return -1;
#endif

    /* Set to invalid values to ensure no I2C writes are skipped. */
    st.chip_cfg.sensors = 0xFF;
10009312:	4ca3      	ldr	r4, [pc, #652]	; (100095a0 <mpu_init+0x2f0>)
10009314:	23ff      	movs	r3, #255	; 0xff
10009316:	72a3      	strb	r3, [r4, #10]
    st.chip_cfg.gyro_fsr = 0xFF;
10009318:	7223      	strb	r3, [r4, #8]
    st.chip_cfg.accel_fsr = 0xFF;
1000931a:	7263      	strb	r3, [r4, #9]
    st.chip_cfg.lpf = 0xFF;
1000931c:	72e3      	strb	r3, [r4, #11]
    st.chip_cfg.sample_rate = 0xFFFF;
1000931e:	2201      	movs	r2, #1
10009320:	4252      	negs	r2, r2
10009322:	81e2      	strh	r2, [r4, #14]
    st.chip_cfg.fifo_enable = 0xFF;
10009324:	7423      	strb	r3, [r4, #16]
    st.chip_cfg.bypass_mode = 0xFF;
10009326:	74a3      	strb	r3, [r4, #18]
#ifdef AK89xx_SECONDARY
    st.chip_cfg.compass_sample_rate = 0xFFFF;
10009328:	8522      	strh	r2, [r4, #40]	; 0x28
#endif
    /* mpu_set_sensors always preserves this setting. */
    st.chip_cfg.clk_src = INV_CLK_PLL;
1000932a:	3bfe      	subs	r3, #254	; 0xfe
1000932c:	7323      	strb	r3, [r4, #12]
    /* Handled in next call to mpu_set_bypass. */
    st.chip_cfg.active_low_int = 0; // --> interrupt active high!!
1000932e:	2500      	movs	r5, #0
10009330:	3321      	adds	r3, #33	; 0x21
10009332:	54e5      	strb	r5, [r4, r3]
    st.chip_cfg.latched_int = 0;
10009334:	3301      	adds	r3, #1
10009336:	54e5      	strb	r5, [r4, r3]
    st.chip_cfg.int_motion_only = 0;
10009338:	7565      	strb	r5, [r4, #21]
    st.chip_cfg.lp_accel_mode = 0;
1000933a:	7525      	strb	r5, [r4, #20]
    memset(&st.chip_cfg.cache, 0, sizeof(st.chip_cfg.cache));
1000933c:	0020      	movs	r0, r4
1000933e:	3016      	adds	r0, #22
10009340:	320d      	adds	r2, #13
10009342:	2100      	movs	r1, #0
10009344:	4b99      	ldr	r3, [pc, #612]	; (100095ac <mpu_init+0x2fc>)
10009346:	4798      	blx	r3
    st.chip_cfg.dmp_on = 0;
10009348:	2324      	movs	r3, #36	; 0x24
1000934a:	54e5      	strb	r5, [r4, r3]
    st.chip_cfg.dmp_loaded = 0;
1000934c:	3301      	adds	r3, #1
1000934e:	54e5      	strb	r5, [r4, r3]
    st.chip_cfg.dmp_sample_rate = 0;
10009350:	84e5      	strh	r5, [r4, #38]	; 0x26

    if (mpu_set_gyro_fsr(2000))
10009352:	20fa      	movs	r0, #250	; 0xfa
10009354:	00c0      	lsls	r0, r0, #3
10009356:	4b96      	ldr	r3, [pc, #600]	; (100095b0 <mpu_init+0x300>)
10009358:	4798      	blx	r3
1000935a:	2800      	cmp	r0, #0
1000935c:	d000      	beq.n	10009360 <mpu_init+0xb0>
1000935e:	e10a      	b.n	10009576 <mpu_init+0x2c6>
        return -1;
    if (mpu_set_accel_fsr(2))
10009360:	3002      	adds	r0, #2
10009362:	4b94      	ldr	r3, [pc, #592]	; (100095b4 <mpu_init+0x304>)
10009364:	4798      	blx	r3
10009366:	2800      	cmp	r0, #0
10009368:	d000      	beq.n	1000936c <mpu_init+0xbc>
1000936a:	e107      	b.n	1000957c <mpu_init+0x2cc>
        return -1;
    if (mpu_set_lpf(42))
1000936c:	302a      	adds	r0, #42	; 0x2a
1000936e:	4b92      	ldr	r3, [pc, #584]	; (100095b8 <mpu_init+0x308>)
10009370:	4798      	blx	r3
10009372:	2800      	cmp	r0, #0
10009374:	d000      	beq.n	10009378 <mpu_init+0xc8>
10009376:	e104      	b.n	10009582 <mpu_init+0x2d2>
        return -1;
    if (mpu_set_sample_rate(50))
10009378:	3032      	adds	r0, #50	; 0x32
1000937a:	4b90      	ldr	r3, [pc, #576]	; (100095bc <mpu_init+0x30c>)
1000937c:	4798      	blx	r3
1000937e:	2800      	cmp	r0, #0
10009380:	d000      	beq.n	10009384 <mpu_init+0xd4>
10009382:	e101      	b.n	10009588 <mpu_init+0x2d8>
        return -1;
    if (mpu_configure_fifo(0))
10009384:	4b8e      	ldr	r3, [pc, #568]	; (100095c0 <mpu_init+0x310>)
10009386:	4798      	blx	r3
10009388:	2800      	cmp	r0, #0
1000938a:	d000      	beq.n	1000938e <mpu_init+0xde>
1000938c:	e0ff      	b.n	1000958e <mpu_init+0x2de>
/* This initialization is similar to the one in ak8975.c. */
static int setup_compass(void)
{
    unsigned char data[4], akm_addr;

    mpu_set_bypass(1);
1000938e:	3001      	adds	r0, #1
10009390:	4b8c      	ldr	r3, [pc, #560]	; (100095c4 <mpu_init+0x314>)
10009392:	4798      	blx	r3

    /* Find compass. Possible addresses range from 0x0C to 0x0F. */
    for (akm_addr = 0x0C; akm_addr <= 0x0F; akm_addr++) {
10009394:	240c      	movs	r4, #12
        int result;
        result = i2c_read(akm_addr, AKM_REG_WHOAMI, 1, data);
10009396:	4d8c      	ldr	r5, [pc, #560]	; (100095c8 <mpu_init+0x318>)
10009398:	ab01      	add	r3, sp, #4
1000939a:	2201      	movs	r2, #1
1000939c:	2100      	movs	r1, #0
1000939e:	0020      	movs	r0, r4
100093a0:	47a8      	blx	r5
        if (!result && (data[0] == AKM_WHOAMI))
100093a2:	2800      	cmp	r0, #0
100093a4:	d103      	bne.n	100093ae <mpu_init+0xfe>
100093a6:	466b      	mov	r3, sp
100093a8:	791b      	ldrb	r3, [r3, #4]
100093aa:	2b48      	cmp	r3, #72	; 0x48
100093ac:	d004      	beq.n	100093b8 <mpu_init+0x108>
    unsigned char data[4], akm_addr;

    mpu_set_bypass(1);

    /* Find compass. Possible addresses range from 0x0C to 0x0F. */
    for (akm_addr = 0x0C; akm_addr <= 0x0F; akm_addr++) {
100093ae:	3401      	adds	r4, #1
100093b0:	b2e4      	uxtb	r4, r4
100093b2:	2c10      	cmp	r4, #16
100093b4:	d1f0      	bne.n	10009398 <mpu_init+0xe8>
100093b6:	e001      	b.n	100093bc <mpu_init+0x10c>
        result = i2c_read(akm_addr, AKM_REG_WHOAMI, 1, data);
        if (!result && (data[0] == AKM_WHOAMI))
            break;
    }

    if (akm_addr > 0x0F) {
100093b8:	2c0f      	cmp	r4, #15
100093ba:	d905      	bls.n	100093c8 <mpu_init+0x118>
        /* TODO: Handle this case in all compass-related functions. */
        log_e("Compass not found.\n");
100093bc:	4883      	ldr	r0, [pc, #524]	; (100095cc <mpu_init+0x31c>)
100093be:	4c84      	ldr	r4, [pc, #528]	; (100095d0 <mpu_init+0x320>)
100093c0:	47a0      	blx	r4
100093c2:	4884      	ldr	r0, [pc, #528]	; (100095d4 <mpu_init+0x324>)
100093c4:	47a0      	blx	r4
100093c6:	e0c4      	b.n	10009552 <mpu_init+0x2a2>
        return -1;
    }

    st.chip_cfg.compass_addr = akm_addr;
100093c8:	232a      	movs	r3, #42	; 0x2a
100093ca:	4a75      	ldr	r2, [pc, #468]	; (100095a0 <mpu_init+0x2f0>)
100093cc:	54d4      	strb	r4, [r2, r3]

    data[0] = AKM_POWER_DOWN;
100093ce:	ab01      	add	r3, sp, #4
100093d0:	2210      	movs	r2, #16
100093d2:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
100093d4:	3a0f      	subs	r2, #15
100093d6:	210a      	movs	r1, #10
100093d8:	0020      	movs	r0, r4
100093da:	4c72      	ldr	r4, [pc, #456]	; (100095a4 <mpu_init+0x2f4>)
100093dc:	47a0      	blx	r4
100093de:	2800      	cmp	r0, #0
100093e0:	d000      	beq.n	100093e4 <mpu_init+0x134>
100093e2:	e0b6      	b.n	10009552 <mpu_init+0x2a2>
        return -1;
    delay_ms(1);
100093e4:	3001      	adds	r0, #1
100093e6:	4b70      	ldr	r3, [pc, #448]	; (100095a8 <mpu_init+0x2f8>)
100093e8:	4798      	blx	r3

    data[0] = AKM_FUSE_ROM_ACCESS;
100093ea:	ab01      	add	r3, sp, #4
100093ec:	221f      	movs	r2, #31
100093ee:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
100093f0:	320b      	adds	r2, #11
100093f2:	496b      	ldr	r1, [pc, #428]	; (100095a0 <mpu_init+0x2f0>)
100093f4:	5c88      	ldrb	r0, [r1, r2]
100093f6:	3a29      	subs	r2, #41	; 0x29
100093f8:	210a      	movs	r1, #10
100093fa:	4c6a      	ldr	r4, [pc, #424]	; (100095a4 <mpu_init+0x2f4>)
100093fc:	47a0      	blx	r4
100093fe:	2800      	cmp	r0, #0
10009400:	d000      	beq.n	10009404 <mpu_init+0x154>
10009402:	e0a6      	b.n	10009552 <mpu_init+0x2a2>
        return -1;
    delay_ms(1);
10009404:	3001      	adds	r0, #1
10009406:	4b68      	ldr	r3, [pc, #416]	; (100095a8 <mpu_init+0x2f8>)
10009408:	4798      	blx	r3

    /* Get sensitivity adjustment data from fuse ROM. */
    if (i2c_read(st.chip_cfg.compass_addr, AKM_REG_ASAX, 3, data))
1000940a:	232a      	movs	r3, #42	; 0x2a
1000940c:	4a64      	ldr	r2, [pc, #400]	; (100095a0 <mpu_init+0x2f0>)
1000940e:	5cd0      	ldrb	r0, [r2, r3]
10009410:	ab01      	add	r3, sp, #4
10009412:	2203      	movs	r2, #3
10009414:	2110      	movs	r1, #16
10009416:	4c6c      	ldr	r4, [pc, #432]	; (100095c8 <mpu_init+0x318>)
10009418:	47a0      	blx	r4
1000941a:	2800      	cmp	r0, #0
1000941c:	d000      	beq.n	10009420 <mpu_init+0x170>
1000941e:	e098      	b.n	10009552 <mpu_init+0x2a2>
        return -1;
    st.chip_cfg.mag_sens_adj[0] = (long)data[0] + 128;
10009420:	4a5f      	ldr	r2, [pc, #380]	; (100095a0 <mpu_init+0x2f0>)
10009422:	ab01      	add	r3, sp, #4
10009424:	7819      	ldrb	r1, [r3, #0]
10009426:	3180      	adds	r1, #128	; 0x80
10009428:	8591      	strh	r1, [r2, #44]	; 0x2c
    st.chip_cfg.mag_sens_adj[1] = (long)data[1] + 128;
1000942a:	7859      	ldrb	r1, [r3, #1]
1000942c:	3180      	adds	r1, #128	; 0x80
1000942e:	85d1      	strh	r1, [r2, #46]	; 0x2e
    st.chip_cfg.mag_sens_adj[2] = (long)data[2] + 128;
10009430:	7899      	ldrb	r1, [r3, #2]
10009432:	3180      	adds	r1, #128	; 0x80
10009434:	8611      	strh	r1, [r2, #48]	; 0x30

    data[0] = AKM_POWER_DOWN;
10009436:	2110      	movs	r1, #16
10009438:	7019      	strb	r1, [r3, #0]
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
1000943a:	311a      	adds	r1, #26
1000943c:	5c50      	ldrb	r0, [r2, r1]
1000943e:	2201      	movs	r2, #1
10009440:	3920      	subs	r1, #32
10009442:	4c58      	ldr	r4, [pc, #352]	; (100095a4 <mpu_init+0x2f4>)
10009444:	47a0      	blx	r4
10009446:	2800      	cmp	r0, #0
10009448:	d000      	beq.n	1000944c <mpu_init+0x19c>
1000944a:	e082      	b.n	10009552 <mpu_init+0x2a2>
        return -1;
    delay_ms(1);
1000944c:	3001      	adds	r0, #1
1000944e:	4b56      	ldr	r3, [pc, #344]	; (100095a8 <mpu_init+0x2f8>)
10009450:	4798      	blx	r3

    mpu_set_bypass(0);
10009452:	2000      	movs	r0, #0
10009454:	4b5b      	ldr	r3, [pc, #364]	; (100095c4 <mpu_init+0x314>)
10009456:	4798      	blx	r3

    /* Set up master mode, master clock, and ES bit. */
    data[0] = 0x40;
10009458:	ab01      	add	r3, sp, #4
1000945a:	2240      	movs	r2, #64	; 0x40
1000945c:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->i2c_mst, 1, data))
1000945e:	4a50      	ldr	r2, [pc, #320]	; (100095a0 <mpu_init+0x2f0>)
10009460:	6811      	ldr	r1, [r2, #0]
10009462:	7e89      	ldrb	r1, [r1, #26]
10009464:	6852      	ldr	r2, [r2, #4]
10009466:	7810      	ldrb	r0, [r2, #0]
10009468:	2201      	movs	r2, #1
1000946a:	4c4e      	ldr	r4, [pc, #312]	; (100095a4 <mpu_init+0x2f4>)
1000946c:	47a0      	blx	r4
1000946e:	2800      	cmp	r0, #0
10009470:	d16f      	bne.n	10009552 <mpu_init+0x2a2>
        return -1;

    /* Slave 0 reads from AKM data registers. */
    data[0] = BIT_I2C_READ | st.chip_cfg.compass_addr;
10009472:	ab01      	add	r3, sp, #4
10009474:	4a4a      	ldr	r2, [pc, #296]	; (100095a0 <mpu_init+0x2f0>)
10009476:	212a      	movs	r1, #42	; 0x2a
10009478:	5c51      	ldrb	r1, [r2, r1]
1000947a:	3880      	subs	r0, #128	; 0x80
1000947c:	4301      	orrs	r1, r0
1000947e:	7019      	strb	r1, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->s0_addr, 1, data))
10009480:	6811      	ldr	r1, [r2, #0]
10009482:	7f89      	ldrb	r1, [r1, #30]
10009484:	6852      	ldr	r2, [r2, #4]
10009486:	7810      	ldrb	r0, [r2, #0]
10009488:	2201      	movs	r2, #1
1000948a:	4c46      	ldr	r4, [pc, #280]	; (100095a4 <mpu_init+0x2f4>)
1000948c:	47a0      	blx	r4
1000948e:	2800      	cmp	r0, #0
10009490:	d15f      	bne.n	10009552 <mpu_init+0x2a2>
        return -1;

    /* Compass reads start at this register. */
    data[0] = AKM_REG_ST1;
10009492:	ab01      	add	r3, sp, #4
10009494:	2202      	movs	r2, #2
10009496:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->s0_reg, 1, data))
10009498:	4a41      	ldr	r2, [pc, #260]	; (100095a0 <mpu_init+0x2f0>)
1000949a:	6811      	ldr	r1, [r2, #0]
1000949c:	7fc9      	ldrb	r1, [r1, #31]
1000949e:	6852      	ldr	r2, [r2, #4]
100094a0:	7810      	ldrb	r0, [r2, #0]
100094a2:	2201      	movs	r2, #1
100094a4:	4c3f      	ldr	r4, [pc, #252]	; (100095a4 <mpu_init+0x2f4>)
100094a6:	47a0      	blx	r4
100094a8:	2800      	cmp	r0, #0
100094aa:	d152      	bne.n	10009552 <mpu_init+0x2a2>
        return -1;

    /* Enable slave 0, 8-byte reads. */
    data[0] = BIT_SLAVE_EN | 8;
100094ac:	ab01      	add	r3, sp, #4
100094ae:	2288      	movs	r2, #136	; 0x88
100094b0:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->s0_ctrl, 1, data))
100094b2:	4a3b      	ldr	r2, [pc, #236]	; (100095a0 <mpu_init+0x2f0>)
100094b4:	2120      	movs	r1, #32
100094b6:	6810      	ldr	r0, [r2, #0]
100094b8:	5c41      	ldrb	r1, [r0, r1]
100094ba:	6852      	ldr	r2, [r2, #4]
100094bc:	7810      	ldrb	r0, [r2, #0]
100094be:	2201      	movs	r2, #1
100094c0:	4c38      	ldr	r4, [pc, #224]	; (100095a4 <mpu_init+0x2f4>)
100094c2:	47a0      	blx	r4
100094c4:	2800      	cmp	r0, #0
100094c6:	d144      	bne.n	10009552 <mpu_init+0x2a2>
        return -1;

    /* Slave 1 changes AKM measurement mode. */
    data[0] = st.chip_cfg.compass_addr;
100094c8:	ab01      	add	r3, sp, #4
100094ca:	4a35      	ldr	r2, [pc, #212]	; (100095a0 <mpu_init+0x2f0>)
100094cc:	212a      	movs	r1, #42	; 0x2a
100094ce:	5c51      	ldrb	r1, [r2, r1]
100094d0:	7019      	strb	r1, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->s1_addr, 1, data))
100094d2:	2121      	movs	r1, #33	; 0x21
100094d4:	6810      	ldr	r0, [r2, #0]
100094d6:	5c41      	ldrb	r1, [r0, r1]
100094d8:	6852      	ldr	r2, [r2, #4]
100094da:	7810      	ldrb	r0, [r2, #0]
100094dc:	2201      	movs	r2, #1
100094de:	4c31      	ldr	r4, [pc, #196]	; (100095a4 <mpu_init+0x2f4>)
100094e0:	47a0      	blx	r4
100094e2:	2800      	cmp	r0, #0
100094e4:	d135      	bne.n	10009552 <mpu_init+0x2a2>
        return -1;

    /* AKM measurement mode register. */
    data[0] = AKM_REG_CNTL;
100094e6:	ab01      	add	r3, sp, #4
100094e8:	220a      	movs	r2, #10
100094ea:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->s1_reg, 1, data))
100094ec:	4a2c      	ldr	r2, [pc, #176]	; (100095a0 <mpu_init+0x2f0>)
100094ee:	2122      	movs	r1, #34	; 0x22
100094f0:	6810      	ldr	r0, [r2, #0]
100094f2:	5c41      	ldrb	r1, [r0, r1]
100094f4:	6852      	ldr	r2, [r2, #4]
100094f6:	7810      	ldrb	r0, [r2, #0]
100094f8:	2201      	movs	r2, #1
100094fa:	4c2a      	ldr	r4, [pc, #168]	; (100095a4 <mpu_init+0x2f4>)
100094fc:	47a0      	blx	r4
100094fe:	2800      	cmp	r0, #0
10009500:	d127      	bne.n	10009552 <mpu_init+0x2a2>
        return -1;

    /* Enable slave 1, 1-byte writes. */
    data[0] = BIT_SLAVE_EN | 1;
10009502:	ab01      	add	r3, sp, #4
10009504:	2281      	movs	r2, #129	; 0x81
10009506:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->s1_ctrl, 1, data))
10009508:	4a25      	ldr	r2, [pc, #148]	; (100095a0 <mpu_init+0x2f0>)
1000950a:	2123      	movs	r1, #35	; 0x23
1000950c:	6810      	ldr	r0, [r2, #0]
1000950e:	5c41      	ldrb	r1, [r0, r1]
10009510:	6852      	ldr	r2, [r2, #4]
10009512:	7810      	ldrb	r0, [r2, #0]
10009514:	2201      	movs	r2, #1
10009516:	4c23      	ldr	r4, [pc, #140]	; (100095a4 <mpu_init+0x2f4>)
10009518:	47a0      	blx	r4
1000951a:	2800      	cmp	r0, #0
1000951c:	d119      	bne.n	10009552 <mpu_init+0x2a2>
        return -1;

    /* Set slave 1 data. */
    data[0] = AKM_SINGLE_MEASUREMENT;
1000951e:	ab01      	add	r3, sp, #4
10009520:	2211      	movs	r2, #17
10009522:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->s1_do, 1, data))
10009524:	4a1e      	ldr	r2, [pc, #120]	; (100095a0 <mpu_init+0x2f0>)
10009526:	2126      	movs	r1, #38	; 0x26
10009528:	6810      	ldr	r0, [r2, #0]
1000952a:	5c41      	ldrb	r1, [r0, r1]
1000952c:	6852      	ldr	r2, [r2, #4]
1000952e:	7810      	ldrb	r0, [r2, #0]
10009530:	2201      	movs	r2, #1
10009532:	4c1c      	ldr	r4, [pc, #112]	; (100095a4 <mpu_init+0x2f4>)
10009534:	47a0      	blx	r4
10009536:	2800      	cmp	r0, #0
10009538:	d10b      	bne.n	10009552 <mpu_init+0x2a2>
        return -1;

    /* Trigger slave 0 and slave 1 actions at each sample. */
    data[0] = 0x03;
1000953a:	ab01      	add	r3, sp, #4
1000953c:	2203      	movs	r2, #3
1000953e:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->i2c_delay_ctrl, 1, data))
10009540:	4a17      	ldr	r2, [pc, #92]	; (100095a0 <mpu_init+0x2f0>)
10009542:	2127      	movs	r1, #39	; 0x27
10009544:	6810      	ldr	r0, [r2, #0]
10009546:	5c41      	ldrb	r1, [r0, r1]
10009548:	6852      	ldr	r2, [r2, #4]
1000954a:	7810      	ldrb	r0, [r2, #0]
1000954c:	2201      	movs	r2, #1
1000954e:	4c15      	ldr	r4, [pc, #84]	; (100095a4 <mpu_init+0x2f4>)
10009550:	47a0      	blx	r4
    //if (int_param)
        //reg_int_cb(int_param);

#ifdef AK89xx_SECONDARY
    setup_compass();
    if (mpu_set_compass_sample_rate(10))
10009552:	200a      	movs	r0, #10
10009554:	4b20      	ldr	r3, [pc, #128]	; (100095d8 <mpu_init+0x328>)
10009556:	4798      	blx	r3
10009558:	1e04      	subs	r4, r0, #0
1000955a:	d11b      	bne.n	10009594 <mpu_init+0x2e4>
    /* Already disabled by setup_compass. */
    if (mpu_set_bypass(0))
        return -1;
#endif

    mpu_set_sensors(0);
1000955c:	2000      	movs	r0, #0
1000955e:	4b1f      	ldr	r3, [pc, #124]	; (100095dc <mpu_init+0x32c>)
10009560:	4798      	blx	r3
    return 0;
10009562:	e019      	b.n	10009598 <mpu_init+0x2e8>
    unsigned char data[6];

    /* Reset device. */
    data[0] = BIT_RESET;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
        return -1;
10009564:	2401      	movs	r4, #1
10009566:	4264      	negs	r4, r4
10009568:	e016      	b.n	10009598 <mpu_init+0x2e8>
    delay_ms(100);

    /* Wake up chip. */
    data[0] = 0x00;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
        return -1;
1000956a:	2401      	movs	r4, #1
1000956c:	4264      	negs	r4, r4
1000956e:	e013      	b.n	10009598 <mpu_init+0x2e8>
    /* MPU6500 shares 4kB of memory between the DMP and the FIFO. Since the
     * first 3kB are needed by the DMP, we'll use the last 1kB for the FIFO.
     */
    data[0] = BIT_FIFO_SIZE_1024;
    if (i2c_write(st.hw->addr, st.reg->accel_cfg2, 1, data))
        return -1;
10009570:	2401      	movs	r4, #1
10009572:	4264      	negs	r4, r4
10009574:	e010      	b.n	10009598 <mpu_init+0x2e8>
    st.chip_cfg.dmp_on = 0;
    st.chip_cfg.dmp_loaded = 0;
    st.chip_cfg.dmp_sample_rate = 0;

    if (mpu_set_gyro_fsr(2000))
        return -1;
10009576:	2401      	movs	r4, #1
10009578:	4264      	negs	r4, r4
1000957a:	e00d      	b.n	10009598 <mpu_init+0x2e8>
    if (mpu_set_accel_fsr(2))
        return -1;
1000957c:	2401      	movs	r4, #1
1000957e:	4264      	negs	r4, r4
10009580:	e00a      	b.n	10009598 <mpu_init+0x2e8>
    if (mpu_set_lpf(42))
        return -1;
10009582:	2401      	movs	r4, #1
10009584:	4264      	negs	r4, r4
10009586:	e007      	b.n	10009598 <mpu_init+0x2e8>
    if (mpu_set_sample_rate(50))
        return -1;
10009588:	2401      	movs	r4, #1
1000958a:	4264      	negs	r4, r4
1000958c:	e004      	b.n	10009598 <mpu_init+0x2e8>
    if (mpu_configure_fifo(0))
        return -1;
1000958e:	2401      	movs	r4, #1
10009590:	4264      	negs	r4, r4
10009592:	e001      	b.n	10009598 <mpu_init+0x2e8>
        //reg_int_cb(int_param);

#ifdef AK89xx_SECONDARY
    setup_compass();
    if (mpu_set_compass_sample_rate(10))
        return -1;
10009594:	2401      	movs	r4, #1
10009596:	4264      	negs	r4, r4
        return -1;
#endif

    mpu_set_sensors(0);
    return 0;
}
10009598:	0020      	movs	r0, r4
1000959a:	b005      	add	sp, #20
1000959c:	bd30      	pop	{r4, r5, pc}
1000959e:	46c0      	nop			; (mov r8, r8)
100095a0:	1001818c 	.word	0x1001818c
100095a4:	1000ab2d 	.word	0x1000ab2d
100095a8:	10008129 	.word	0x10008129
100095ac:	10014e69 	.word	0x10014e69
100095b0:	100087b5 	.word	0x100087b5
100095b4:	100088a1 	.word	0x100088a1
100095b8:	10008935 	.word	0x10008935
100095bc:	10008ff5 	.word	0x10008ff5
100095c0:	10008a85 	.word	0x10008a85
100095c4:	10008cbd 	.word	0x10008cbd
100095c8:	1000ab89 	.word	0x1000ab89
100095cc:	10016278 	.word	0x10016278
100095d0:	100150d1 	.word	0x100150d1
100095d4:	100160e8 	.word	0x100160e8
100095d8:	10008a0d 	.word	0x10008a0d
100095dc:	100090c9 	.word	0x100090c9

100095e0 <mpu_write_mem>:
 *  @param[in]  data        Bytes to write to memory.
 *  @return     0 if successful.
 */
int mpu_write_mem(unsigned short mem_addr, unsigned short length,
        unsigned char *data)
{
100095e0:	b570      	push	{r4, r5, r6, lr}
100095e2:	b082      	sub	sp, #8
100095e4:	000c      	movs	r4, r1
100095e6:	1e15      	subs	r5, r2, #0
    unsigned char tmp[2];

    if (!data)
100095e8:	d025      	beq.n	10009636 <mpu_write_mem+0x56>
        return -1;
    if (!st.chip_cfg.sensors)
100095ea:	4b19      	ldr	r3, [pc, #100]	; (10009650 <mpu_write_mem+0x70>)
100095ec:	7a9b      	ldrb	r3, [r3, #10]
100095ee:	2b00      	cmp	r3, #0
100095f0:	d024      	beq.n	1000963c <mpu_write_mem+0x5c>
        return -1;

    tmp[0] = (unsigned char)(mem_addr >> 8);
100095f2:	ab01      	add	r3, sp, #4
100095f4:	0a02      	lsrs	r2, r0, #8
100095f6:	701a      	strb	r2, [r3, #0]
    tmp[1] = (unsigned char)(mem_addr & 0xFF);
100095f8:	b2c0      	uxtb	r0, r0
100095fa:	7058      	strb	r0, [r3, #1]

    /* Check bank boundaries. */
    if (tmp[1] + length > st.hw->bank_size)
100095fc:	4b14      	ldr	r3, [pc, #80]	; (10009650 <mpu_write_mem+0x70>)
100095fe:	685b      	ldr	r3, [r3, #4]
10009600:	1840      	adds	r0, r0, r1
10009602:	895a      	ldrh	r2, [r3, #10]
10009604:	4290      	cmp	r0, r2
10009606:	dc1c      	bgt.n	10009642 <mpu_write_mem+0x62>
        return -1;

    if (i2c_write(st.hw->addr, st.reg->bank_sel, 2, tmp))
10009608:	4a11      	ldr	r2, [pc, #68]	; (10009650 <mpu_write_mem+0x70>)
1000960a:	6812      	ldr	r2, [r2, #0]
1000960c:	7ed1      	ldrb	r1, [r2, #27]
1000960e:	7818      	ldrb	r0, [r3, #0]
10009610:	ab01      	add	r3, sp, #4
10009612:	2202      	movs	r2, #2
10009614:	4e0f      	ldr	r6, [pc, #60]	; (10009654 <mpu_write_mem+0x74>)
10009616:	47b0      	blx	r6
10009618:	2800      	cmp	r0, #0
1000961a:	d115      	bne.n	10009648 <mpu_write_mem+0x68>
        return -1;
    if (i2c_write(st.hw->addr, st.reg->mem_r_w, length, data))
1000961c:	b2e2      	uxtb	r2, r4
1000961e:	4b0c      	ldr	r3, [pc, #48]	; (10009650 <mpu_write_mem+0x70>)
10009620:	6819      	ldr	r1, [r3, #0]
10009622:	7e09      	ldrb	r1, [r1, #24]
10009624:	685b      	ldr	r3, [r3, #4]
10009626:	7818      	ldrb	r0, [r3, #0]
10009628:	002b      	movs	r3, r5
1000962a:	4c0a      	ldr	r4, [pc, #40]	; (10009654 <mpu_write_mem+0x74>)
1000962c:	47a0      	blx	r4
1000962e:	1e43      	subs	r3, r0, #1
10009630:	4198      	sbcs	r0, r3
10009632:	4240      	negs	r0, r0
10009634:	e00a      	b.n	1000964c <mpu_write_mem+0x6c>
        unsigned char *data)
{
    unsigned char tmp[2];

    if (!data)
        return -1;
10009636:	2001      	movs	r0, #1
10009638:	4240      	negs	r0, r0
1000963a:	e007      	b.n	1000964c <mpu_write_mem+0x6c>
    if (!st.chip_cfg.sensors)
        return -1;
1000963c:	2001      	movs	r0, #1
1000963e:	4240      	negs	r0, r0
10009640:	e004      	b.n	1000964c <mpu_write_mem+0x6c>
    tmp[0] = (unsigned char)(mem_addr >> 8);
    tmp[1] = (unsigned char)(mem_addr & 0xFF);

    /* Check bank boundaries. */
    if (tmp[1] + length > st.hw->bank_size)
        return -1;
10009642:	2001      	movs	r0, #1
10009644:	4240      	negs	r0, r0
10009646:	e001      	b.n	1000964c <mpu_write_mem+0x6c>

    if (i2c_write(st.hw->addr, st.reg->bank_sel, 2, tmp))
        return -1;
10009648:	2001      	movs	r0, #1
1000964a:	4240      	negs	r0, r0
    if (i2c_write(st.hw->addr, st.reg->mem_r_w, length, data))
        return -1;
    return 0;
}
1000964c:	b002      	add	sp, #8
1000964e:	bd70      	pop	{r4, r5, r6, pc}
10009650:	1001818c 	.word	0x1001818c
10009654:	1000ab2d 	.word	0x1000ab2d

10009658 <mpu_set_dmp_state>:
 *  @brief      Enable/disable DMP support.
 *  @param[in]  enable  1 to turn on the DMP.
 *  @return     0 if successful.
 */
int mpu_set_dmp_state(unsigned char enable)
{
10009658:	b570      	push	{r4, r5, r6, lr}
1000965a:	b082      	sub	sp, #8
    unsigned char tmp;
    if (st.chip_cfg.dmp_on == enable)
1000965c:	2324      	movs	r3, #36	; 0x24
1000965e:	4a21      	ldr	r2, [pc, #132]	; (100096e4 <mpu_set_dmp_state+0x8c>)
10009660:	5cd3      	ldrb	r3, [r2, r3]
10009662:	4283      	cmp	r3, r0
10009664:	d037      	beq.n	100096d6 <mpu_set_dmp_state+0x7e>
        return 0;

    if (enable) {
10009666:	2800      	cmp	r0, #0
10009668:	d020      	beq.n	100096ac <mpu_set_dmp_state+0x54>
        if (!st.chip_cfg.dmp_loaded)
1000966a:	2325      	movs	r3, #37	; 0x25
1000966c:	5cd3      	ldrb	r3, [r2, r3]
1000966e:	2b00      	cmp	r3, #0
10009670:	d033      	beq.n	100096da <mpu_set_dmp_state+0x82>
            return -1;
        /* Disable data ready interrupt. */
        set_int_enable(0);
10009672:	2000      	movs	r0, #0
10009674:	4d1c      	ldr	r5, [pc, #112]	; (100096e8 <mpu_set_dmp_state+0x90>)
10009676:	47a8      	blx	r5
        /* Disable bypass mode. */
        mpu_set_bypass(0);
10009678:	2000      	movs	r0, #0
1000967a:	4b1c      	ldr	r3, [pc, #112]	; (100096ec <mpu_set_dmp_state+0x94>)
1000967c:	4798      	blx	r3
        /* Keep constant sample rate, FIFO rate controlled by DMP. */
        mpu_set_sample_rate(st.chip_cfg.dmp_sample_rate);
1000967e:	4c19      	ldr	r4, [pc, #100]	; (100096e4 <mpu_set_dmp_state+0x8c>)
10009680:	8ce0      	ldrh	r0, [r4, #38]	; 0x26
10009682:	4b1b      	ldr	r3, [pc, #108]	; (100096f0 <mpu_set_dmp_state+0x98>)
10009684:	4798      	blx	r3
        /* Remove FIFO elements. */
        tmp = 0;
10009686:	466b      	mov	r3, sp
10009688:	3307      	adds	r3, #7
1000968a:	2200      	movs	r2, #0
1000968c:	701a      	strb	r2, [r3, #0]
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
1000968e:	6862      	ldr	r2, [r4, #4]
10009690:	7810      	ldrb	r0, [r2, #0]
10009692:	2201      	movs	r2, #1
10009694:	2123      	movs	r1, #35	; 0x23
10009696:	4e17      	ldr	r6, [pc, #92]	; (100096f4 <mpu_set_dmp_state+0x9c>)
10009698:	47b0      	blx	r6
        st.chip_cfg.dmp_on = 1;
1000969a:	2201      	movs	r2, #1
1000969c:	2324      	movs	r3, #36	; 0x24
1000969e:	54e2      	strb	r2, [r4, r3]
        /* Enable DMP interrupt. */
        set_int_enable(1);
100096a0:	2001      	movs	r0, #1
100096a2:	47a8      	blx	r5
        mpu_reset_fifo();
100096a4:	4b14      	ldr	r3, [pc, #80]	; (100096f8 <mpu_set_dmp_state+0xa0>)
100096a6:	4798      	blx	r3
        tmp = st.chip_cfg.fifo_enable;
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
        st.chip_cfg.dmp_on = 0;
        mpu_reset_fifo();
    }
    return 0;
100096a8:	2000      	movs	r0, #0
100096aa:	e018      	b.n	100096de <mpu_set_dmp_state+0x86>
        /* Enable DMP interrupt. */
        set_int_enable(1);
        mpu_reset_fifo();
    } else {
        /* Disable DMP interrupt. */
        set_int_enable(0);
100096ac:	2000      	movs	r0, #0
100096ae:	4b0e      	ldr	r3, [pc, #56]	; (100096e8 <mpu_set_dmp_state+0x90>)
100096b0:	4798      	blx	r3
        /* Restore FIFO settings. */
        tmp = st.chip_cfg.fifo_enable;
100096b2:	466b      	mov	r3, sp
100096b4:	3307      	adds	r3, #7
100096b6:	4c0b      	ldr	r4, [pc, #44]	; (100096e4 <mpu_set_dmp_state+0x8c>)
100096b8:	7c22      	ldrb	r2, [r4, #16]
100096ba:	701a      	strb	r2, [r3, #0]
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
100096bc:	6862      	ldr	r2, [r4, #4]
100096be:	7810      	ldrb	r0, [r2, #0]
100096c0:	2201      	movs	r2, #1
100096c2:	2123      	movs	r1, #35	; 0x23
100096c4:	4d0b      	ldr	r5, [pc, #44]	; (100096f4 <mpu_set_dmp_state+0x9c>)
100096c6:	47a8      	blx	r5
        st.chip_cfg.dmp_on = 0;
100096c8:	2200      	movs	r2, #0
100096ca:	2324      	movs	r3, #36	; 0x24
100096cc:	54e2      	strb	r2, [r4, r3]
        mpu_reset_fifo();
100096ce:	4b0a      	ldr	r3, [pc, #40]	; (100096f8 <mpu_set_dmp_state+0xa0>)
100096d0:	4798      	blx	r3
    }
    return 0;
100096d2:	2000      	movs	r0, #0
100096d4:	e003      	b.n	100096de <mpu_set_dmp_state+0x86>
 */
int mpu_set_dmp_state(unsigned char enable)
{
    unsigned char tmp;
    if (st.chip_cfg.dmp_on == enable)
        return 0;
100096d6:	2000      	movs	r0, #0
100096d8:	e001      	b.n	100096de <mpu_set_dmp_state+0x86>

    if (enable) {
        if (!st.chip_cfg.dmp_loaded)
            return -1;
100096da:	2001      	movs	r0, #1
100096dc:	4240      	negs	r0, r0
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
        st.chip_cfg.dmp_on = 0;
        mpu_reset_fifo();
    }
    return 0;
}
100096de:	b002      	add	sp, #8
100096e0:	bd70      	pop	{r4, r5, r6, pc}
100096e2:	46c0      	nop			; (mov r8, r8)
100096e4:	1001818c 	.word	0x1001818c
100096e8:	10008461 	.word	0x10008461
100096ec:	10008cbd 	.word	0x10008cbd
100096f0:	10008ff5 	.word	0x10008ff5
100096f4:	1000ab2d 	.word	0x1000ab2d
100096f8:	100085bd 	.word	0x100085bd

100096fc <mpu_get_compass_reg>:
 *  @param[out] data        Raw data in hardware units.
 *  @param[out] timestamp   Timestamp in milliseconds. Null if not needed.
 *  @return     0 if successful.
 */
int mpu_get_compass_reg(short *data, unsigned long *timestamp)
{
100096fc:	b5f0      	push	{r4, r5, r6, r7, lr}
100096fe:	b085      	sub	sp, #20
10009700:	0006      	movs	r6, r0
10009702:	000d      	movs	r5, r1
#ifdef AK89xx_SECONDARY
    unsigned char tmp[9];

    if (!(st.chip_cfg.sensors & INV_XYZ_COMPASS))
10009704:	4b29      	ldr	r3, [pc, #164]	; (100097ac <mpu_get_compass_reg+0xb0>)
10009706:	7a9b      	ldrb	r3, [r3, #10]
10009708:	07db      	lsls	r3, r3, #31
1000970a:	d540      	bpl.n	1000978e <mpu_get_compass_reg+0x92>
        return -1;
    tmp[8] = AKM_SINGLE_MEASUREMENT;
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, tmp+8))
        return -1;
#else
    if (i2c_read(st.hw->addr, st.reg->raw_compass, 8, tmp))
1000970c:	4b27      	ldr	r3, [pc, #156]	; (100097ac <mpu_get_compass_reg+0xb0>)
1000970e:	2228      	movs	r2, #40	; 0x28
10009710:	6819      	ldr	r1, [r3, #0]
10009712:	5c89      	ldrb	r1, [r1, r2]
10009714:	685b      	ldr	r3, [r3, #4]
10009716:	7818      	ldrb	r0, [r3, #0]
10009718:	ab01      	add	r3, sp, #4
1000971a:	3a20      	subs	r2, #32
1000971c:	4c24      	ldr	r4, [pc, #144]	; (100097b0 <mpu_get_compass_reg+0xb4>)
1000971e:	47a0      	blx	r4
10009720:	1e04      	subs	r4, r0, #0
10009722:	d137      	bne.n	10009794 <mpu_get_compass_reg+0x98>
        return -2;
    if ((tmp[7] & AKM_OVERFLOW) || (tmp[7] & AKM_DATA_ERROR))
        return -3;
#elif defined AK8963_SECONDARY
    /* AK8963 doesn't have the data read error bit. */
    if (!(tmp[0] & AKM_DATA_READY) || (tmp[0] & AKM_DATA_OVERRUN))
10009724:	ab01      	add	r3, sp, #4
10009726:	781b      	ldrb	r3, [r3, #0]
10009728:	2203      	movs	r2, #3
1000972a:	4013      	ands	r3, r2
1000972c:	2b01      	cmp	r3, #1
1000972e:	d134      	bne.n	1000979a <mpu_get_compass_reg+0x9e>
        return -2;
    if (tmp[7] & AKM_OVERFLOW)
10009730:	ab01      	add	r3, sp, #4
10009732:	79db      	ldrb	r3, [r3, #7]
10009734:	2b7f      	cmp	r3, #127	; 0x7f
10009736:	d833      	bhi.n	100097a0 <mpu_get_compass_reg+0xa4>
        return -3;
#endif
    data[0] = (tmp[2] << 8) | tmp[1];
10009738:	a801      	add	r0, sp, #4
1000973a:	7881      	ldrb	r1, [r0, #2]
1000973c:	0209      	lsls	r1, r1, #8
1000973e:	7843      	ldrb	r3, [r0, #1]
10009740:	4319      	orrs	r1, r3
10009742:	b209      	sxth	r1, r1
10009744:	8031      	strh	r1, [r6, #0]
    data[1] = (tmp[4] << 8) | tmp[3];
10009746:	7902      	ldrb	r2, [r0, #4]
10009748:	0212      	lsls	r2, r2, #8
1000974a:	78c3      	ldrb	r3, [r0, #3]
1000974c:	431a      	orrs	r2, r3
1000974e:	b212      	sxth	r2, r2
10009750:	8072      	strh	r2, [r6, #2]
    data[2] = (tmp[6] << 8) | tmp[5];
10009752:	7983      	ldrb	r3, [r0, #6]
10009754:	021b      	lsls	r3, r3, #8
10009756:	7940      	ldrb	r0, [r0, #5]
10009758:	4303      	orrs	r3, r0
1000975a:	b21b      	sxth	r3, r3
1000975c:	469c      	mov	ip, r3
1000975e:	80b3      	strh	r3, [r6, #4]

    data[0] = ((long)data[0] * st.chip_cfg.mag_sens_adj[0]) >> 8;
10009760:	4812      	ldr	r0, [pc, #72]	; (100097ac <mpu_get_compass_reg+0xb0>)
10009762:	232c      	movs	r3, #44	; 0x2c
10009764:	5ec7      	ldrsh	r7, [r0, r3]
10009766:	4379      	muls	r1, r7
10009768:	1209      	asrs	r1, r1, #8
1000976a:	8031      	strh	r1, [r6, #0]
    data[1] = ((long)data[1] * st.chip_cfg.mag_sens_adj[1]) >> 8;
1000976c:	232e      	movs	r3, #46	; 0x2e
1000976e:	5ec1      	ldrsh	r1, [r0, r3]
10009770:	434a      	muls	r2, r1
10009772:	1212      	asrs	r2, r2, #8
10009774:	8072      	strh	r2, [r6, #2]
    data[2] = ((long)data[2] * st.chip_cfg.mag_sens_adj[2]) >> 8;
10009776:	2330      	movs	r3, #48	; 0x30
10009778:	5ec2      	ldrsh	r2, [r0, r3]
1000977a:	4663      	mov	r3, ip
1000977c:	4353      	muls	r3, r2
1000977e:	121b      	asrs	r3, r3, #8
10009780:	80b3      	strh	r3, [r6, #4]

    if (timestamp)
10009782:	2d00      	cmp	r5, #0
10009784:	d00e      	beq.n	100097a4 <mpu_get_compass_reg+0xa8>
        get_ms(timestamp);
10009786:	0028      	movs	r0, r5
10009788:	4b0a      	ldr	r3, [pc, #40]	; (100097b4 <mpu_get_compass_reg+0xb8>)
1000978a:	4798      	blx	r3
1000978c:	e00a      	b.n	100097a4 <mpu_get_compass_reg+0xa8>
{
#ifdef AK89xx_SECONDARY
    unsigned char tmp[9];

    if (!(st.chip_cfg.sensors & INV_XYZ_COMPASS))
        return -1;
1000978e:	2401      	movs	r4, #1
10009790:	4264      	negs	r4, r4
10009792:	e007      	b.n	100097a4 <mpu_get_compass_reg+0xa8>
    tmp[8] = AKM_SINGLE_MEASUREMENT;
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, tmp+8))
        return -1;
#else
    if (i2c_read(st.hw->addr, st.reg->raw_compass, 8, tmp))
        return -1;
10009794:	2401      	movs	r4, #1
10009796:	4264      	negs	r4, r4
10009798:	e004      	b.n	100097a4 <mpu_get_compass_reg+0xa8>
    if ((tmp[7] & AKM_OVERFLOW) || (tmp[7] & AKM_DATA_ERROR))
        return -3;
#elif defined AK8963_SECONDARY
    /* AK8963 doesn't have the data read error bit. */
    if (!(tmp[0] & AKM_DATA_READY) || (tmp[0] & AKM_DATA_OVERRUN))
        return -2;
1000979a:	2402      	movs	r4, #2
1000979c:	4264      	negs	r4, r4
1000979e:	e001      	b.n	100097a4 <mpu_get_compass_reg+0xa8>
    if (tmp[7] & AKM_OVERFLOW)
        return -3;
100097a0:	2403      	movs	r4, #3
100097a2:	4264      	negs	r4, r4
        get_ms(timestamp);
    return 0;
#else
    return -1;
#endif
}
100097a4:	0020      	movs	r0, r4
100097a6:	b005      	add	sp, #20
100097a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
100097aa:	46c0      	nop			; (mov r8, r8)
100097ac:	1001818c 	.word	0x1001818c
100097b0:	1000ab89 	.word	0x1000ab89
100097b4:	1000b245 	.word	0x1000b245

100097b8 <mpu_get_compass_fsr>:
 *  @return     0 if successful.
 */
int mpu_get_compass_fsr(unsigned short *fsr)
{
#ifdef AK89xx_SECONDARY
    fsr[0] = st.hw->compass_fsr;
100097b8:	4b02      	ldr	r3, [pc, #8]	; (100097c4 <mpu_get_compass_fsr+0xc>)
100097ba:	685b      	ldr	r3, [r3, #4]
100097bc:	899b      	ldrh	r3, [r3, #12]
100097be:	8003      	strh	r3, [r0, #0]
    return 0;
#else
    return -1;
#endif
}
100097c0:	2000      	movs	r0, #0
100097c2:	4770      	bx	lr
100097c4:	1001818c 	.word	0x1001818c

100097c8 <dmp_set_fifo_rate>:
 *  Only used when DMP is on.
 *  @param[in]  rate    Desired fifo rate (Hz).
 *  @return     0 if successful.
 */
int dmp_set_fifo_rate(unsigned short rate)
{
100097c8:	b510      	push	{r4, lr}
100097ca:	b086      	sub	sp, #24
100097cc:	0004      	movs	r4, r0
    const unsigned char regs_end[12] = {DINAFE, DINAF2, DINAAB,
100097ce:	220c      	movs	r2, #12
100097d0:	4915      	ldr	r1, [pc, #84]	; (10009828 <dmp_set_fifo_rate+0x60>)
100097d2:	3110      	adds	r1, #16
100097d4:	a803      	add	r0, sp, #12
100097d6:	4b15      	ldr	r3, [pc, #84]	; (1000982c <dmp_set_fifo_rate+0x64>)
100097d8:	4798      	blx	r3
        0xc4, DINAAA, DINAF1, DINADF, DINADF, 0xBB, 0xAF, DINADF, DINADF};
    unsigned short div;
    unsigned char tmp[8];

    if (rate > DMP_SAMPLE_RATE)
100097da:	2cc8      	cmp	r4, #200	; 0xc8
100097dc:	d819      	bhi.n	10009812 <dmp_set_fifo_rate+0x4a>
        return -1;
    div = DMP_SAMPLE_RATE / rate - 1;
100097de:	0021      	movs	r1, r4
100097e0:	20c8      	movs	r0, #200	; 0xc8
100097e2:	4b13      	ldr	r3, [pc, #76]	; (10009830 <dmp_set_fifo_rate+0x68>)
100097e4:	4798      	blx	r3
100097e6:	3801      	subs	r0, #1
100097e8:	b280      	uxth	r0, r0
    tmp[0] = (unsigned char)((div >> 8) & 0xFF);
100097ea:	aa01      	add	r2, sp, #4
100097ec:	0a03      	lsrs	r3, r0, #8
100097ee:	7013      	strb	r3, [r2, #0]
    tmp[1] = (unsigned char)(div & 0xFF);
100097f0:	7050      	strb	r0, [r2, #1]
    if (mpu_write_mem(D_0_22, 2, tmp))
100097f2:	2102      	movs	r1, #2
100097f4:	480f      	ldr	r0, [pc, #60]	; (10009834 <dmp_set_fifo_rate+0x6c>)
100097f6:	4b10      	ldr	r3, [pc, #64]	; (10009838 <dmp_set_fifo_rate+0x70>)
100097f8:	4798      	blx	r3
100097fa:	2800      	cmp	r0, #0
100097fc:	d10c      	bne.n	10009818 <dmp_set_fifo_rate+0x50>
        return -1;
    if (mpu_write_mem(CFG_6, 12, (unsigned char*)regs_end))
100097fe:	aa03      	add	r2, sp, #12
10009800:	210c      	movs	r1, #12
10009802:	480e      	ldr	r0, [pc, #56]	; (1000983c <dmp_set_fifo_rate+0x74>)
10009804:	4b0c      	ldr	r3, [pc, #48]	; (10009838 <dmp_set_fifo_rate+0x70>)
10009806:	4798      	blx	r3
10009808:	2800      	cmp	r0, #0
1000980a:	d108      	bne.n	1000981e <dmp_set_fifo_rate+0x56>
        return -1;

    dmp.fifo_rate = rate;
1000980c:	4b0c      	ldr	r3, [pc, #48]	; (10009840 <dmp_set_fifo_rate+0x78>)
1000980e:	819c      	strh	r4, [r3, #12]
    return 0;
10009810:	e007      	b.n	10009822 <dmp_set_fifo_rate+0x5a>
        0xc4, DINAAA, DINAF1, DINADF, DINADF, 0xBB, 0xAF, DINADF, DINADF};
    unsigned short div;
    unsigned char tmp[8];

    if (rate > DMP_SAMPLE_RATE)
        return -1;
10009812:	2001      	movs	r0, #1
10009814:	4240      	negs	r0, r0
10009816:	e004      	b.n	10009822 <dmp_set_fifo_rate+0x5a>
    div = DMP_SAMPLE_RATE / rate - 1;
    tmp[0] = (unsigned char)((div >> 8) & 0xFF);
    tmp[1] = (unsigned char)(div & 0xFF);
    if (mpu_write_mem(D_0_22, 2, tmp))
        return -1;
10009818:	2001      	movs	r0, #1
1000981a:	4240      	negs	r0, r0
1000981c:	e001      	b.n	10009822 <dmp_set_fifo_rate+0x5a>
    if (mpu_write_mem(CFG_6, 12, (unsigned char*)regs_end))
        return -1;
1000981e:	2001      	movs	r0, #1
10009820:	4240      	negs	r0, r0

    dmp.fifo_rate = rate;
    return 0;
}
10009822:	b006      	add	sp, #24
10009824:	bd10      	pop	{r4, pc}
10009826:	46c0      	nop			; (mov r8, r8)
10009828:	100164c4 	.word	0x100164c4
1000982c:	10014e57 	.word	0x10014e57
10009830:	10012e79 	.word	0x10012e79
10009834:	00000216 	.word	0x00000216
10009838:	100095e1 	.word	0x100095e1
1000983c:	00000ac1 	.word	0x00000ac1
10009840:	10018250 	.word	0x10018250

10009844 <dmp_set_tap_thresh>:
 *  @param[in]  axis    1, 2, and 4 for XYZ accel, respectively.
 *  @param[in]  thresh  Tap threshold, in mg/ms.
 *  @return     0 if successful.
 */
int dmp_set_tap_thresh(unsigned char axis, unsigned short thresh)
{
10009844:	b5f0      	push	{r4, r5, r6, r7, lr}
10009846:	4647      	mov	r7, r8
10009848:	b480      	push	{r7}
1000984a:	b082      	sub	sp, #8
1000984c:	0004      	movs	r4, r0
    unsigned char tmp[4], accel_fsr;
    float scaled_thresh;
    unsigned short dmp_thresh, dmp_thresh_2;
    if (!(axis & TAP_XYZ) || thresh > 1600)
1000984e:	0743      	lsls	r3, r0, #29
10009850:	d100      	bne.n	10009854 <dmp_set_tap_thresh+0x10>
10009852:	e09c      	b.n	1000998e <dmp_set_tap_thresh+0x14a>
10009854:	23c8      	movs	r3, #200	; 0xc8
10009856:	00db      	lsls	r3, r3, #3
10009858:	4299      	cmp	r1, r3
1000985a:	d900      	bls.n	1000985e <dmp_set_tap_thresh+0x1a>
1000985c:	e09a      	b.n	10009994 <dmp_set_tap_thresh+0x150>
        return -1;

    scaled_thresh = (float)thresh / DMP_SAMPLE_RATE;
1000985e:	0008      	movs	r0, r1
10009860:	4b58      	ldr	r3, [pc, #352]	; (100099c4 <dmp_set_tap_thresh+0x180>)
10009862:	4798      	blx	r3
10009864:	4958      	ldr	r1, [pc, #352]	; (100099c8 <dmp_set_tap_thresh+0x184>)
10009866:	4b59      	ldr	r3, [pc, #356]	; (100099cc <dmp_set_tap_thresh+0x188>)
10009868:	4798      	blx	r3
1000986a:	1c06      	adds	r6, r0, #0

    mpu_get_accel_fsr(&accel_fsr);
1000986c:	466b      	mov	r3, sp
1000986e:	1cdd      	adds	r5, r3, #3
10009870:	0028      	movs	r0, r5
10009872:	4b57      	ldr	r3, [pc, #348]	; (100099d0 <dmp_set_tap_thresh+0x18c>)
10009874:	4798      	blx	r3
    switch (accel_fsr) {
10009876:	782b      	ldrb	r3, [r5, #0]
10009878:	2b04      	cmp	r3, #4
1000987a:	d019      	beq.n	100098b0 <dmp_set_tap_thresh+0x6c>
1000987c:	b2da      	uxtb	r2, r3
1000987e:	2a04      	cmp	r2, #4
10009880:	d802      	bhi.n	10009888 <dmp_set_tap_thresh+0x44>
10009882:	2b02      	cmp	r3, #2
10009884:	d005      	beq.n	10009892 <dmp_set_tap_thresh+0x4e>
10009886:	e088      	b.n	1000999a <dmp_set_tap_thresh+0x156>
10009888:	2b08      	cmp	r3, #8
1000988a:	d020      	beq.n	100098ce <dmp_set_tap_thresh+0x8a>
1000988c:	2b10      	cmp	r3, #16
1000988e:	d02d      	beq.n	100098ec <dmp_set_tap_thresh+0xa8>
10009890:	e083      	b.n	1000999a <dmp_set_tap_thresh+0x156>
    case 2:
        dmp_thresh = (unsigned short)(scaled_thresh * 16384);
10009892:	4b50      	ldr	r3, [pc, #320]	; (100099d4 <dmp_set_tap_thresh+0x190>)
10009894:	4698      	mov	r8, r3
10009896:	218d      	movs	r1, #141	; 0x8d
10009898:	05c9      	lsls	r1, r1, #23
1000989a:	1c30      	adds	r0, r6, #0
1000989c:	4798      	blx	r3
1000989e:	4f4e      	ldr	r7, [pc, #312]	; (100099d8 <dmp_set_tap_thresh+0x194>)
100098a0:	47b8      	blx	r7
100098a2:	b285      	uxth	r5, r0
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 12288);
100098a4:	494d      	ldr	r1, [pc, #308]	; (100099dc <dmp_set_tap_thresh+0x198>)
100098a6:	1c30      	adds	r0, r6, #0
100098a8:	47c0      	blx	r8
100098aa:	47b8      	blx	r7
100098ac:	b280      	uxth	r0, r0
        break;
100098ae:	e02b      	b.n	10009908 <dmp_set_tap_thresh+0xc4>
    case 4:
        dmp_thresh = (unsigned short)(scaled_thresh * 8192);
100098b0:	4b48      	ldr	r3, [pc, #288]	; (100099d4 <dmp_set_tap_thresh+0x190>)
100098b2:	4698      	mov	r8, r3
100098b4:	218c      	movs	r1, #140	; 0x8c
100098b6:	05c9      	lsls	r1, r1, #23
100098b8:	1c30      	adds	r0, r6, #0
100098ba:	4798      	blx	r3
100098bc:	4f46      	ldr	r7, [pc, #280]	; (100099d8 <dmp_set_tap_thresh+0x194>)
100098be:	47b8      	blx	r7
100098c0:	b285      	uxth	r5, r0
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 6144);
100098c2:	4947      	ldr	r1, [pc, #284]	; (100099e0 <dmp_set_tap_thresh+0x19c>)
100098c4:	1c30      	adds	r0, r6, #0
100098c6:	47c0      	blx	r8
100098c8:	47b8      	blx	r7
100098ca:	b280      	uxth	r0, r0
        break;
100098cc:	e01c      	b.n	10009908 <dmp_set_tap_thresh+0xc4>
    case 8:
        dmp_thresh = (unsigned short)(scaled_thresh * 4096);
100098ce:	4b41      	ldr	r3, [pc, #260]	; (100099d4 <dmp_set_tap_thresh+0x190>)
100098d0:	4698      	mov	r8, r3
100098d2:	218b      	movs	r1, #139	; 0x8b
100098d4:	05c9      	lsls	r1, r1, #23
100098d6:	1c30      	adds	r0, r6, #0
100098d8:	4798      	blx	r3
100098da:	4f3f      	ldr	r7, [pc, #252]	; (100099d8 <dmp_set_tap_thresh+0x194>)
100098dc:	47b8      	blx	r7
100098de:	b285      	uxth	r5, r0
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 3072);
100098e0:	4940      	ldr	r1, [pc, #256]	; (100099e4 <dmp_set_tap_thresh+0x1a0>)
100098e2:	1c30      	adds	r0, r6, #0
100098e4:	47c0      	blx	r8
100098e6:	47b8      	blx	r7
100098e8:	b280      	uxth	r0, r0
        break;
100098ea:	e00d      	b.n	10009908 <dmp_set_tap_thresh+0xc4>
    case 16:
        dmp_thresh = (unsigned short)(scaled_thresh * 2048);
100098ec:	4b39      	ldr	r3, [pc, #228]	; (100099d4 <dmp_set_tap_thresh+0x190>)
100098ee:	4698      	mov	r8, r3
100098f0:	218a      	movs	r1, #138	; 0x8a
100098f2:	05c9      	lsls	r1, r1, #23
100098f4:	1c30      	adds	r0, r6, #0
100098f6:	4798      	blx	r3
100098f8:	4f37      	ldr	r7, [pc, #220]	; (100099d8 <dmp_set_tap_thresh+0x194>)
100098fa:	47b8      	blx	r7
100098fc:	b285      	uxth	r5, r0
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 1536);
100098fe:	493a      	ldr	r1, [pc, #232]	; (100099e8 <dmp_set_tap_thresh+0x1a4>)
10009900:	1c30      	adds	r0, r6, #0
10009902:	47c0      	blx	r8
10009904:	47b8      	blx	r7
10009906:	b280      	uxth	r0, r0
        break;
    default:
        return -1;
    }
    tmp[0] = (unsigned char)(dmp_thresh >> 8);
10009908:	ab01      	add	r3, sp, #4
1000990a:	0a2a      	lsrs	r2, r5, #8
1000990c:	701a      	strb	r2, [r3, #0]
    tmp[1] = (unsigned char)(dmp_thresh & 0xFF);
1000990e:	705d      	strb	r5, [r3, #1]
    tmp[2] = (unsigned char)(dmp_thresh_2 >> 8);
10009910:	0a02      	lsrs	r2, r0, #8
10009912:	709a      	strb	r2, [r3, #2]
    tmp[3] = (unsigned char)(dmp_thresh_2 & 0xFF);
10009914:	70d8      	strb	r0, [r3, #3]

    if (axis & TAP_X) {
10009916:	07e3      	lsls	r3, r4, #31
10009918:	d510      	bpl.n	1000993c <dmp_set_tap_thresh+0xf8>
        if (mpu_write_mem(DMP_TAP_THX, 2, tmp))
1000991a:	aa01      	add	r2, sp, #4
1000991c:	2102      	movs	r1, #2
1000991e:	20ea      	movs	r0, #234	; 0xea
10009920:	0040      	lsls	r0, r0, #1
10009922:	4b32      	ldr	r3, [pc, #200]	; (100099ec <dmp_set_tap_thresh+0x1a8>)
10009924:	4798      	blx	r3
10009926:	2800      	cmp	r0, #0
10009928:	d13a      	bne.n	100099a0 <dmp_set_tap_thresh+0x15c>
            return -1;
        if (mpu_write_mem(D_1_36, 2, tmp+2))
1000992a:	466b      	mov	r3, sp
1000992c:	1d9a      	adds	r2, r3, #6
1000992e:	2102      	movs	r1, #2
10009930:	3025      	adds	r0, #37	; 0x25
10009932:	30ff      	adds	r0, #255	; 0xff
10009934:	4b2d      	ldr	r3, [pc, #180]	; (100099ec <dmp_set_tap_thresh+0x1a8>)
10009936:	4798      	blx	r3
10009938:	2800      	cmp	r0, #0
1000993a:	d134      	bne.n	100099a6 <dmp_set_tap_thresh+0x162>
            return -1;
    }
    if (axis & TAP_Y) {
1000993c:	07a3      	lsls	r3, r4, #30
1000993e:	d510      	bpl.n	10009962 <dmp_set_tap_thresh+0x11e>
        if (mpu_write_mem(DMP_TAP_THY, 2, tmp))
10009940:	aa01      	add	r2, sp, #4
10009942:	2102      	movs	r1, #2
10009944:	20ec      	movs	r0, #236	; 0xec
10009946:	0040      	lsls	r0, r0, #1
10009948:	4b28      	ldr	r3, [pc, #160]	; (100099ec <dmp_set_tap_thresh+0x1a8>)
1000994a:	4798      	blx	r3
1000994c:	2800      	cmp	r0, #0
1000994e:	d12d      	bne.n	100099ac <dmp_set_tap_thresh+0x168>
            return -1;
        if (mpu_write_mem(D_1_40, 2, tmp+2))
10009950:	466b      	mov	r3, sp
10009952:	1d9a      	adds	r2, r3, #6
10009954:	2102      	movs	r1, #2
10009956:	3029      	adds	r0, #41	; 0x29
10009958:	30ff      	adds	r0, #255	; 0xff
1000995a:	4b24      	ldr	r3, [pc, #144]	; (100099ec <dmp_set_tap_thresh+0x1a8>)
1000995c:	4798      	blx	r3
1000995e:	2800      	cmp	r0, #0
10009960:	d127      	bne.n	100099b2 <dmp_set_tap_thresh+0x16e>
        if (mpu_write_mem(DMP_TAP_THZ, 2, tmp))
            return -1;
        if (mpu_write_mem(D_1_44, 2, tmp+2))
            return -1;
    }
    return 0;
10009962:	2000      	movs	r0, #0
        if (mpu_write_mem(DMP_TAP_THY, 2, tmp))
            return -1;
        if (mpu_write_mem(D_1_40, 2, tmp+2))
            return -1;
    }
    if (axis & TAP_Z) {
10009964:	0763      	lsls	r3, r4, #29
10009966:	d529      	bpl.n	100099bc <dmp_set_tap_thresh+0x178>
        if (mpu_write_mem(DMP_TAP_THZ, 2, tmp))
10009968:	aa01      	add	r2, sp, #4
1000996a:	2102      	movs	r1, #2
1000996c:	30dd      	adds	r0, #221	; 0xdd
1000996e:	30ff      	adds	r0, #255	; 0xff
10009970:	4b1e      	ldr	r3, [pc, #120]	; (100099ec <dmp_set_tap_thresh+0x1a8>)
10009972:	4798      	blx	r3
10009974:	2800      	cmp	r0, #0
10009976:	d11f      	bne.n	100099b8 <dmp_set_tap_thresh+0x174>
            return -1;
        if (mpu_write_mem(D_1_44, 2, tmp+2))
10009978:	466b      	mov	r3, sp
1000997a:	1d9a      	adds	r2, r3, #6
1000997c:	2102      	movs	r1, #2
1000997e:	302d      	adds	r0, #45	; 0x2d
10009980:	30ff      	adds	r0, #255	; 0xff
10009982:	4b1a      	ldr	r3, [pc, #104]	; (100099ec <dmp_set_tap_thresh+0x1a8>)
10009984:	4798      	blx	r3
10009986:	1e43      	subs	r3, r0, #1
10009988:	4198      	sbcs	r0, r3
1000998a:	4240      	negs	r0, r0
1000998c:	e016      	b.n	100099bc <dmp_set_tap_thresh+0x178>
{
    unsigned char tmp[4], accel_fsr;
    float scaled_thresh;
    unsigned short dmp_thresh, dmp_thresh_2;
    if (!(axis & TAP_XYZ) || thresh > 1600)
        return -1;
1000998e:	2001      	movs	r0, #1
10009990:	4240      	negs	r0, r0
10009992:	e013      	b.n	100099bc <dmp_set_tap_thresh+0x178>
10009994:	2001      	movs	r0, #1
10009996:	4240      	negs	r0, r0
10009998:	e010      	b.n	100099bc <dmp_set_tap_thresh+0x178>
        dmp_thresh = (unsigned short)(scaled_thresh * 2048);
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 1536);
        break;
    default:
        return -1;
1000999a:	2001      	movs	r0, #1
1000999c:	4240      	negs	r0, r0
1000999e:	e00d      	b.n	100099bc <dmp_set_tap_thresh+0x178>
    tmp[2] = (unsigned char)(dmp_thresh_2 >> 8);
    tmp[3] = (unsigned char)(dmp_thresh_2 & 0xFF);

    if (axis & TAP_X) {
        if (mpu_write_mem(DMP_TAP_THX, 2, tmp))
            return -1;
100099a0:	2001      	movs	r0, #1
100099a2:	4240      	negs	r0, r0
100099a4:	e00a      	b.n	100099bc <dmp_set_tap_thresh+0x178>
        if (mpu_write_mem(D_1_36, 2, tmp+2))
            return -1;
100099a6:	2001      	movs	r0, #1
100099a8:	4240      	negs	r0, r0
100099aa:	e007      	b.n	100099bc <dmp_set_tap_thresh+0x178>
    }
    if (axis & TAP_Y) {
        if (mpu_write_mem(DMP_TAP_THY, 2, tmp))
            return -1;
100099ac:	2001      	movs	r0, #1
100099ae:	4240      	negs	r0, r0
100099b0:	e004      	b.n	100099bc <dmp_set_tap_thresh+0x178>
        if (mpu_write_mem(D_1_40, 2, tmp+2))
            return -1;
100099b2:	2001      	movs	r0, #1
100099b4:	4240      	negs	r0, r0
100099b6:	e001      	b.n	100099bc <dmp_set_tap_thresh+0x178>
    }
    if (axis & TAP_Z) {
        if (mpu_write_mem(DMP_TAP_THZ, 2, tmp))
            return -1;
100099b8:	2001      	movs	r0, #1
100099ba:	4240      	negs	r0, r0
        if (mpu_write_mem(D_1_44, 2, tmp+2))
            return -1;
    }
    return 0;
}
100099bc:	b002      	add	sp, #8
100099be:	bc04      	pop	{r2}
100099c0:	4690      	mov	r8, r2
100099c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
100099c4:	10013e8d 	.word	0x10013e8d
100099c8:	43480000 	.word	0x43480000
100099cc:	100134f1 	.word	0x100134f1
100099d0:	10008855 	.word	0x10008855
100099d4:	10013885 	.word	0x10013885
100099d8:	10013199 	.word	0x10013199
100099dc:	46400000 	.word	0x46400000
100099e0:	45c00000 	.word	0x45c00000
100099e4:	45400000 	.word	0x45400000
100099e8:	44c00000 	.word	0x44c00000
100099ec:	100095e1 	.word	0x100095e1

100099f0 <dmp_set_tap_axes>:
 *  @brief      Set which axes will register a tap.
 *  @param[in]  axis    1, 2, and 4 for XYZ, respectively.
 *  @return     0 if successful.
 */
int dmp_set_tap_axes(unsigned char axis)
{
100099f0:	b500      	push	{lr}
100099f2:	b083      	sub	sp, #12
    unsigned char tmp = 0;

    if (axis & TAP_X)
100099f4:	07c3      	lsls	r3, r0, #31
100099f6:	d403      	bmi.n	10009a00 <dmp_set_tap_axes+0x10>
 *  @param[in]  axis    1, 2, and 4 for XYZ, respectively.
 *  @return     0 if successful.
 */
int dmp_set_tap_axes(unsigned char axis)
{
    unsigned char tmp = 0;
100099f8:	2200      	movs	r2, #0
100099fa:	466b      	mov	r3, sp
100099fc:	71da      	strb	r2, [r3, #7]
100099fe:	e002      	b.n	10009a06 <dmp_set_tap_axes+0x16>

    if (axis & TAP_X)
        tmp |= 0x30;
10009a00:	2230      	movs	r2, #48	; 0x30
10009a02:	466b      	mov	r3, sp
10009a04:	71da      	strb	r2, [r3, #7]
    if (axis & TAP_Y)
10009a06:	0783      	lsls	r3, r0, #30
10009a08:	d505      	bpl.n	10009a16 <dmp_set_tap_axes+0x26>
        tmp |= 0x0C;
10009a0a:	466b      	mov	r3, sp
10009a0c:	1dda      	adds	r2, r3, #7
10009a0e:	79d9      	ldrb	r1, [r3, #7]
10009a10:	230c      	movs	r3, #12
10009a12:	430b      	orrs	r3, r1
10009a14:	7013      	strb	r3, [r2, #0]
    if (axis & TAP_Z)
10009a16:	0743      	lsls	r3, r0, #29
10009a18:	d505      	bpl.n	10009a26 <dmp_set_tap_axes+0x36>
        tmp |= 0x03;
10009a1a:	466b      	mov	r3, sp
10009a1c:	1dda      	adds	r2, r3, #7
10009a1e:	79d9      	ldrb	r1, [r3, #7]
10009a20:	2303      	movs	r3, #3
10009a22:	430b      	orrs	r3, r1
10009a24:	7013      	strb	r3, [r2, #0]
    return mpu_write_mem(D_1_72, 1, &tmp);
10009a26:	466b      	mov	r3, sp
10009a28:	1dda      	adds	r2, r3, #7
10009a2a:	2101      	movs	r1, #1
10009a2c:	20a4      	movs	r0, #164	; 0xa4
10009a2e:	0040      	lsls	r0, r0, #1
10009a30:	4b01      	ldr	r3, [pc, #4]	; (10009a38 <dmp_set_tap_axes+0x48>)
10009a32:	4798      	blx	r3
}
10009a34:	b003      	add	sp, #12
10009a36:	bd00      	pop	{pc}
10009a38:	100095e1 	.word	0x100095e1

10009a3c <dmp_set_tap_count>:
 *  @brief      Set minimum number of taps needed for an interrupt.
 *  @param[in]  min_taps    Minimum consecutive taps (1-4).
 *  @return     0 if successful.
 */
int dmp_set_tap_count(unsigned char min_taps)
{
10009a3c:	b500      	push	{lr}
10009a3e:	b083      	sub	sp, #12
    unsigned char tmp;

    if (min_taps < 1)
        min_taps = 1;
10009a40:	2301      	movs	r3, #1
 */
int dmp_set_tap_count(unsigned char min_taps)
{
    unsigned char tmp;

    if (min_taps < 1)
10009a42:	2800      	cmp	r0, #0
10009a44:	d004      	beq.n	10009a50 <dmp_set_tap_count+0x14>
10009a46:	1c03      	adds	r3, r0, #0
10009a48:	2804      	cmp	r0, #4
10009a4a:	d900      	bls.n	10009a4e <dmp_set_tap_count+0x12>
10009a4c:	2304      	movs	r3, #4
10009a4e:	b2db      	uxtb	r3, r3
        min_taps = 1;
    else if (min_taps > 4)
        min_taps = 4;

    tmp = min_taps - 1;
10009a50:	466a      	mov	r2, sp
10009a52:	3207      	adds	r2, #7
10009a54:	3b01      	subs	r3, #1
10009a56:	7013      	strb	r3, [r2, #0]
    return mpu_write_mem(D_1_79, 1, &tmp);
10009a58:	2101      	movs	r1, #1
10009a5a:	2050      	movs	r0, #80	; 0x50
10009a5c:	30ff      	adds	r0, #255	; 0xff
10009a5e:	4b02      	ldr	r3, [pc, #8]	; (10009a68 <dmp_set_tap_count+0x2c>)
10009a60:	4798      	blx	r3
}
10009a62:	b003      	add	sp, #12
10009a64:	bd00      	pop	{pc}
10009a66:	46c0      	nop			; (mov r8, r8)
10009a68:	100095e1 	.word	0x100095e1

10009a6c <dmp_set_tap_time>:
 *  @brief      Set length between valid taps.
 *  @param[in]  time    Milliseconds between taps.
 *  @return     0 if successful.
 */
int dmp_set_tap_time(unsigned short time)
{
10009a6c:	b500      	push	{lr}
10009a6e:	b083      	sub	sp, #12
    unsigned short dmp_time;
    unsigned char tmp[2];

    dmp_time = time / (1000 / DMP_SAMPLE_RATE);
10009a70:	2105      	movs	r1, #5
10009a72:	4b07      	ldr	r3, [pc, #28]	; (10009a90 <dmp_set_tap_time+0x24>)
10009a74:	4798      	blx	r3
10009a76:	b280      	uxth	r0, r0
    tmp[0] = (unsigned char)(dmp_time >> 8);
10009a78:	aa01      	add	r2, sp, #4
10009a7a:	0a03      	lsrs	r3, r0, #8
10009a7c:	7013      	strb	r3, [r2, #0]
    tmp[1] = (unsigned char)(dmp_time & 0xFF);
10009a7e:	7050      	strb	r0, [r2, #1]
    return mpu_write_mem(DMP_TAPW_MIN, 2, tmp);
10009a80:	2102      	movs	r1, #2
10009a82:	20ef      	movs	r0, #239	; 0xef
10009a84:	0040      	lsls	r0, r0, #1
10009a86:	4b03      	ldr	r3, [pc, #12]	; (10009a94 <dmp_set_tap_time+0x28>)
10009a88:	4798      	blx	r3
}
10009a8a:	b003      	add	sp, #12
10009a8c:	bd00      	pop	{pc}
10009a8e:	46c0      	nop			; (mov r8, r8)
10009a90:	10012d65 	.word	0x10012d65
10009a94:	100095e1 	.word	0x100095e1

10009a98 <dmp_set_tap_time_multi>:
 *  @brief      Set max time between taps to register as a multi-tap.
 *  @param[in]  time    Max milliseconds between taps.
 *  @return     0 if successful.
 */
int dmp_set_tap_time_multi(unsigned short time)
{
10009a98:	b500      	push	{lr}
10009a9a:	b083      	sub	sp, #12
    unsigned short dmp_time;
    unsigned char tmp[2];

    dmp_time = time / (1000 / DMP_SAMPLE_RATE);
10009a9c:	2105      	movs	r1, #5
10009a9e:	4b07      	ldr	r3, [pc, #28]	; (10009abc <dmp_set_tap_time_multi+0x24>)
10009aa0:	4798      	blx	r3
10009aa2:	b280      	uxth	r0, r0
    tmp[0] = (unsigned char)(dmp_time >> 8);
10009aa4:	aa01      	add	r2, sp, #4
10009aa6:	0a03      	lsrs	r3, r0, #8
10009aa8:	7013      	strb	r3, [r2, #0]
    tmp[1] = (unsigned char)(dmp_time & 0xFF);
10009aaa:	7050      	strb	r0, [r2, #1]
    return mpu_write_mem(D_1_218, 2, tmp);
10009aac:	2102      	movs	r1, #2
10009aae:	20ed      	movs	r0, #237	; 0xed
10009ab0:	0040      	lsls	r0, r0, #1
10009ab2:	4b03      	ldr	r3, [pc, #12]	; (10009ac0 <dmp_set_tap_time_multi+0x28>)
10009ab4:	4798      	blx	r3
}
10009ab6:	b003      	add	sp, #12
10009ab8:	bd00      	pop	{pc}
10009aba:	46c0      	nop			; (mov r8, r8)
10009abc:	10012d65 	.word	0x10012d65
10009ac0:	100095e1 	.word	0x100095e1

10009ac4 <dmp_set_shake_reject_thresh>:
 *  @param[in]  sf      Gyro scale factor.
 *  @param[in]  thresh  Gyro threshold in dps.
 *  @return     0 if successful.
 */
int dmp_set_shake_reject_thresh(long sf, unsigned short thresh)
{
10009ac4:	b510      	push	{r4, lr}
10009ac6:	b082      	sub	sp, #8
10009ac8:	000c      	movs	r4, r1
    unsigned char tmp[4];
    long thresh_scaled = sf / 1000 * thresh;
10009aca:	21fa      	movs	r1, #250	; 0xfa
10009acc:	0089      	lsls	r1, r1, #2
10009ace:	4b09      	ldr	r3, [pc, #36]	; (10009af4 <dmp_set_shake_reject_thresh+0x30>)
10009ad0:	4798      	blx	r3
10009ad2:	4360      	muls	r0, r4
    tmp[0] = (unsigned char)(((long)thresh_scaled >> 24) & 0xFF);
10009ad4:	aa01      	add	r2, sp, #4
10009ad6:	1603      	asrs	r3, r0, #24
10009ad8:	7013      	strb	r3, [r2, #0]
    tmp[1] = (unsigned char)(((long)thresh_scaled >> 16) & 0xFF);
10009ada:	1403      	asrs	r3, r0, #16
10009adc:	7053      	strb	r3, [r2, #1]
    tmp[2] = (unsigned char)(((long)thresh_scaled >> 8) & 0xFF);
10009ade:	1203      	asrs	r3, r0, #8
10009ae0:	7093      	strb	r3, [r2, #2]
    tmp[3] = (unsigned char)((long)thresh_scaled & 0xFF);
10009ae2:	70d0      	strb	r0, [r2, #3]
    return mpu_write_mem(D_1_92, 4, tmp);
10009ae4:	2104      	movs	r1, #4
10009ae6:	20ae      	movs	r0, #174	; 0xae
10009ae8:	0040      	lsls	r0, r0, #1
10009aea:	4b03      	ldr	r3, [pc, #12]	; (10009af8 <dmp_set_shake_reject_thresh+0x34>)
10009aec:	4798      	blx	r3
}
10009aee:	b002      	add	sp, #8
10009af0:	bd10      	pop	{r4, pc}
10009af2:	46c0      	nop			; (mov r8, r8)
10009af4:	10012e79 	.word	0x10012e79
10009af8:	100095e1 	.word	0x100095e1

10009afc <dmp_set_shake_reject_time>:
 *  60 ms is added to this parameter.
 *  @param[in]  time    Time in milliseconds.
 *  @return     0 if successful.
 */
int dmp_set_shake_reject_time(unsigned short time)
{
10009afc:	b500      	push	{lr}
10009afe:	b083      	sub	sp, #12
    unsigned char tmp[2];

    time /= (1000 / DMP_SAMPLE_RATE);
10009b00:	2105      	movs	r1, #5
10009b02:	4b07      	ldr	r3, [pc, #28]	; (10009b20 <dmp_set_shake_reject_time+0x24>)
10009b04:	4798      	blx	r3
10009b06:	b280      	uxth	r0, r0
    tmp[0] = time >> 8;
10009b08:	aa01      	add	r2, sp, #4
10009b0a:	0a03      	lsrs	r3, r0, #8
10009b0c:	7013      	strb	r3, [r2, #0]
    tmp[1] = time & 0xFF;
10009b0e:	7050      	strb	r0, [r2, #1]
    return mpu_write_mem(D_1_90,2,tmp);
10009b10:	2102      	movs	r1, #2
10009b12:	20ad      	movs	r0, #173	; 0xad
10009b14:	0040      	lsls	r0, r0, #1
10009b16:	4b03      	ldr	r3, [pc, #12]	; (10009b24 <dmp_set_shake_reject_time+0x28>)
10009b18:	4798      	blx	r3
}
10009b1a:	b003      	add	sp, #12
10009b1c:	bd00      	pop	{pc}
10009b1e:	46c0      	nop			; (mov r8, r8)
10009b20:	10012d65 	.word	0x10012d65
10009b24:	100095e1 	.word	0x100095e1

10009b28 <dmp_set_shake_reject_timeout>:
 *  60 ms is added to this parameter.
 *  @param[in]  time    Time in milliseconds.
 *  @return     0 if successful.
 */
int dmp_set_shake_reject_timeout(unsigned short time)
{
10009b28:	b500      	push	{lr}
10009b2a:	b083      	sub	sp, #12
    unsigned char tmp[2];

    time /= (1000 / DMP_SAMPLE_RATE);
10009b2c:	2105      	movs	r1, #5
10009b2e:	4b07      	ldr	r3, [pc, #28]	; (10009b4c <dmp_set_shake_reject_timeout+0x24>)
10009b30:	4798      	blx	r3
10009b32:	b280      	uxth	r0, r0
    tmp[0] = time >> 8;
10009b34:	aa01      	add	r2, sp, #4
10009b36:	0a03      	lsrs	r3, r0, #8
10009b38:	7013      	strb	r3, [r2, #0]
    tmp[1] = time & 0xFF;
10009b3a:	7050      	strb	r0, [r2, #1]
    return mpu_write_mem(D_1_88,2,tmp);
10009b3c:	2102      	movs	r1, #2
10009b3e:	20ac      	movs	r0, #172	; 0xac
10009b40:	0040      	lsls	r0, r0, #1
10009b42:	4b03      	ldr	r3, [pc, #12]	; (10009b50 <dmp_set_shake_reject_timeout+0x28>)
10009b44:	4798      	blx	r3
}
10009b46:	b003      	add	sp, #12
10009b48:	bd00      	pop	{pc}
10009b4a:	46c0      	nop			; (mov r8, r8)
10009b4c:	10012d65 	.word	0x10012d65
10009b50:	100095e1 	.word	0x100095e1

10009b54 <dmp_enable_gyro_cal>:
 *  subtracted from the gyro output.
 *  @param[in]  enable  1 to enable gyro calibration.
 *  @return     0 if successful.
 */
int dmp_enable_gyro_cal(unsigned char enable)
{
10009b54:	b500      	push	{lr}
10009b56:	b085      	sub	sp, #20
    if (enable) {
10009b58:	2800      	cmp	r0, #0
10009b5a:	d00c      	beq.n	10009b76 <dmp_enable_gyro_cal+0x22>
        unsigned char regs[9] = {0xb8, 0xaa, 0xb3, 0x8d, 0xb4, 0x98, 0x0d, 0x35, 0x5d};
10009b5c:	2209      	movs	r2, #9
10009b5e:	490d      	ldr	r1, [pc, #52]	; (10009b94 <dmp_enable_gyro_cal+0x40>)
10009b60:	311c      	adds	r1, #28
10009b62:	a801      	add	r0, sp, #4
10009b64:	4b0c      	ldr	r3, [pc, #48]	; (10009b98 <dmp_enable_gyro_cal+0x44>)
10009b66:	4798      	blx	r3
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
10009b68:	aa01      	add	r2, sp, #4
10009b6a:	2109      	movs	r1, #9
10009b6c:	2097      	movs	r0, #151	; 0x97
10009b6e:	00c0      	lsls	r0, r0, #3
10009b70:	4b0a      	ldr	r3, [pc, #40]	; (10009b9c <dmp_enable_gyro_cal+0x48>)
10009b72:	4798      	blx	r3
10009b74:	e00b      	b.n	10009b8e <dmp_enable_gyro_cal+0x3a>
    } else {
        unsigned char regs[9] = {0xb8, 0xaa, 0xaa, 0xaa, 0xb0, 0x88, 0xc3, 0xc5, 0xc7};
10009b76:	2209      	movs	r2, #9
10009b78:	4906      	ldr	r1, [pc, #24]	; (10009b94 <dmp_enable_gyro_cal+0x40>)
10009b7a:	3128      	adds	r1, #40	; 0x28
10009b7c:	a801      	add	r0, sp, #4
10009b7e:	4b06      	ldr	r3, [pc, #24]	; (10009b98 <dmp_enable_gyro_cal+0x44>)
10009b80:	4798      	blx	r3
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
10009b82:	aa01      	add	r2, sp, #4
10009b84:	2109      	movs	r1, #9
10009b86:	2097      	movs	r0, #151	; 0x97
10009b88:	00c0      	lsls	r0, r0, #3
10009b8a:	4b04      	ldr	r3, [pc, #16]	; (10009b9c <dmp_enable_gyro_cal+0x48>)
10009b8c:	4798      	blx	r3
    }
}
10009b8e:	b005      	add	sp, #20
10009b90:	bd00      	pop	{pc}
10009b92:	46c0      	nop			; (mov r8, r8)
10009b94:	100164c4 	.word	0x100164c4
10009b98:	10014e57 	.word	0x10014e57
10009b9c:	100095e1 	.word	0x100095e1

10009ba0 <dmp_enable_lp_quat>:
 *  exclusive.
 *  @param[in]  enable  1 to enable 3-axis quaternion.
 *  @return     0 if successful.
 */
int dmp_enable_lp_quat(unsigned char enable)
{
10009ba0:	b500      	push	{lr}
10009ba2:	b083      	sub	sp, #12
    unsigned char regs[4];
    if (enable) {
10009ba4:	2800      	cmp	r0, #0
10009ba6:	d009      	beq.n	10009bbc <dmp_enable_lp_quat+0x1c>
        regs[0] = DINBC0;
10009ba8:	ab01      	add	r3, sp, #4
10009baa:	22c0      	movs	r2, #192	; 0xc0
10009bac:	701a      	strb	r2, [r3, #0]
        regs[1] = DINBC2;
10009bae:	3202      	adds	r2, #2
10009bb0:	705a      	strb	r2, [r3, #1]
        regs[2] = DINBC4;
10009bb2:	3202      	adds	r2, #2
10009bb4:	709a      	strb	r2, [r3, #2]
        regs[3] = DINBC6;
10009bb6:	3202      	adds	r2, #2
10009bb8:	70da      	strb	r2, [r3, #3]
10009bba:	e001      	b.n	10009bc0 <dmp_enable_lp_quat+0x20>
    }
    else
        memset(regs, 0x8B, 4);
10009bbc:	4b05      	ldr	r3, [pc, #20]	; (10009bd4 <dmp_enable_lp_quat+0x34>)
10009bbe:	9301      	str	r3, [sp, #4]

    mpu_write_mem(CFG_LP_QUAT, 4, regs);
10009bc0:	aa01      	add	r2, sp, #4
10009bc2:	2104      	movs	r1, #4
10009bc4:	4804      	ldr	r0, [pc, #16]	; (10009bd8 <dmp_enable_lp_quat+0x38>)
10009bc6:	4b05      	ldr	r3, [pc, #20]	; (10009bdc <dmp_enable_lp_quat+0x3c>)
10009bc8:	4798      	blx	r3

    return mpu_reset_fifo();
10009bca:	4b05      	ldr	r3, [pc, #20]	; (10009be0 <dmp_enable_lp_quat+0x40>)
10009bcc:	4798      	blx	r3
}
10009bce:	b003      	add	sp, #12
10009bd0:	bd00      	pop	{pc}
10009bd2:	46c0      	nop			; (mov r8, r8)
10009bd4:	8b8b8b8b 	.word	0x8b8b8b8b
10009bd8:	00000a98 	.word	0x00000a98
10009bdc:	100095e1 	.word	0x100095e1
10009be0:	100085bd 	.word	0x100085bd

10009be4 <dmp_enable_6x_lp_quat>:
 *  exclusive.
 *  @param[in]   enable  1 to enable 6-axis quaternion.
 *  @return      0 if successful.
 */
int dmp_enable_6x_lp_quat(unsigned char enable)
{
10009be4:	b500      	push	{lr}
10009be6:	b083      	sub	sp, #12
    unsigned char regs[4];
    if (enable) {
10009be8:	2800      	cmp	r0, #0
10009bea:	d009      	beq.n	10009c00 <dmp_enable_6x_lp_quat+0x1c>
        regs[0] = DINA20;
10009bec:	ab01      	add	r3, sp, #4
10009bee:	2220      	movs	r2, #32
10009bf0:	701a      	strb	r2, [r3, #0]
        regs[1] = DINA28;
10009bf2:	3208      	adds	r2, #8
10009bf4:	705a      	strb	r2, [r3, #1]
        regs[2] = DINA30;
10009bf6:	3208      	adds	r2, #8
10009bf8:	709a      	strb	r2, [r3, #2]
        regs[3] = DINA38;
10009bfa:	3208      	adds	r2, #8
10009bfc:	70da      	strb	r2, [r3, #3]
10009bfe:	e001      	b.n	10009c04 <dmp_enable_6x_lp_quat+0x20>
    } else
        memset(regs, 0xA3, 4);
10009c00:	4b05      	ldr	r3, [pc, #20]	; (10009c18 <dmp_enable_6x_lp_quat+0x34>)
10009c02:	9301      	str	r3, [sp, #4]

    mpu_write_mem(CFG_8, 4, regs);
10009c04:	aa01      	add	r2, sp, #4
10009c06:	2104      	movs	r1, #4
10009c08:	4804      	ldr	r0, [pc, #16]	; (10009c1c <dmp_enable_6x_lp_quat+0x38>)
10009c0a:	4b05      	ldr	r3, [pc, #20]	; (10009c20 <dmp_enable_6x_lp_quat+0x3c>)
10009c0c:	4798      	blx	r3

    return mpu_reset_fifo();
10009c0e:	4b05      	ldr	r3, [pc, #20]	; (10009c24 <dmp_enable_6x_lp_quat+0x40>)
10009c10:	4798      	blx	r3
}
10009c12:	b003      	add	sp, #12
10009c14:	bd00      	pop	{pc}
10009c16:	46c0      	nop			; (mov r8, r8)
10009c18:	a3a3a3a3 	.word	0xa3a3a3a3
10009c1c:	00000a9e 	.word	0x00000a9e
10009c20:	100095e1 	.word	0x100095e1
10009c24:	100085bd 	.word	0x100085bd

10009c28 <dmp_enable_feature>:
 *  mutually exclusive.
 *  @param[in]  mask    Mask of features to enable.
 *  @return     0 if successful.
 */
int dmp_enable_feature(unsigned short mask)
{
10009c28:	b5f0      	push	{r4, r5, r6, r7, lr}
10009c2a:	b085      	sub	sp, #20
10009c2c:	0004      	movs	r4, r0

    /* TODO: All of these settings can probably be integrated into the default
     * DMP image.
     */
    /* Set integration scale factor. */
    tmp[0] = (unsigned char)((GYRO_SF >> 24) & 0xFF);
10009c2e:	ad01      	add	r5, sp, #4
10009c30:	2302      	movs	r3, #2
10009c32:	702b      	strb	r3, [r5, #0]
    tmp[1] = (unsigned char)((GYRO_SF >> 16) & 0xFF);
10009c34:	33c8      	adds	r3, #200	; 0xc8
10009c36:	706b      	strb	r3, [r5, #1]
    tmp[2] = (unsigned char)((GYRO_SF >> 8) & 0xFF);
10009c38:	3319      	adds	r3, #25
10009c3a:	70ab      	strb	r3, [r5, #2]
    tmp[3] = (unsigned char)(GYRO_SF & 0xFF);
10009c3c:	3bda      	subs	r3, #218	; 0xda
10009c3e:	70eb      	strb	r3, [r5, #3]
    mpu_write_mem(D_0_104, 4, tmp);
10009c40:	002a      	movs	r2, r5
10009c42:	2104      	movs	r1, #4
10009c44:	2068      	movs	r0, #104	; 0x68
10009c46:	4b6a      	ldr	r3, [pc, #424]	; (10009df0 <dmp_enable_feature+0x1c8>)
10009c48:	4798      	blx	r3

    /* Send sensor data to the FIFO. */
    tmp[0] = 0xA3;
10009c4a:	23a3      	movs	r3, #163	; 0xa3
10009c4c:	702b      	strb	r3, [r5, #0]
10009c4e:	2740      	movs	r7, #64	; 0x40
10009c50:	4027      	ands	r7, r4
    if (mask & DMP_FEATURE_SEND_RAW_ACCEL) {
10009c52:	d007      	beq.n	10009c64 <dmp_enable_feature+0x3c>
        tmp[1] = 0xC0;
10009c54:	ab01      	add	r3, sp, #4
10009c56:	22c0      	movs	r2, #192	; 0xc0
10009c58:	705a      	strb	r2, [r3, #1]
        tmp[2] = 0xC8;
10009c5a:	3208      	adds	r2, #8
10009c5c:	709a      	strb	r2, [r3, #2]
        tmp[3] = 0xC2;
10009c5e:	3a06      	subs	r2, #6
10009c60:	70da      	strb	r2, [r3, #3]
10009c62:	e004      	b.n	10009c6e <dmp_enable_feature+0x46>
    } else {
        tmp[1] = 0xA3;
10009c64:	ab01      	add	r3, sp, #4
10009c66:	22a3      	movs	r2, #163	; 0xa3
10009c68:	705a      	strb	r2, [r3, #1]
        tmp[2] = 0xA3;
10009c6a:	709a      	strb	r2, [r3, #2]
        tmp[3] = 0xA3;
10009c6c:	70da      	strb	r2, [r3, #3]
10009c6e:	25c0      	movs	r5, #192	; 0xc0
10009c70:	006d      	lsls	r5, r5, #1
10009c72:	4025      	ands	r5, r4
    }
    if (mask & DMP_FEATURE_SEND_ANY_GYRO) {
10009c74:	d007      	beq.n	10009c86 <dmp_enable_feature+0x5e>
        tmp[4] = 0xC4;
10009c76:	ab01      	add	r3, sp, #4
10009c78:	22c4      	movs	r2, #196	; 0xc4
10009c7a:	711a      	strb	r2, [r3, #4]
        tmp[5] = 0xCC;
10009c7c:	3208      	adds	r2, #8
10009c7e:	715a      	strb	r2, [r3, #5]
        tmp[6] = 0xC6;
10009c80:	3a06      	subs	r2, #6
10009c82:	719a      	strb	r2, [r3, #6]
10009c84:	e004      	b.n	10009c90 <dmp_enable_feature+0x68>
    } else {
        tmp[4] = 0xA3;
10009c86:	ab01      	add	r3, sp, #4
10009c88:	22a3      	movs	r2, #163	; 0xa3
10009c8a:	711a      	strb	r2, [r3, #4]
        tmp[5] = 0xA3;
10009c8c:	715a      	strb	r2, [r3, #5]
        tmp[6] = 0xA3;
10009c8e:	719a      	strb	r2, [r3, #6]
    }
    tmp[7] = 0xA3;
10009c90:	aa01      	add	r2, sp, #4
10009c92:	23a3      	movs	r3, #163	; 0xa3
10009c94:	71d3      	strb	r3, [r2, #7]
    tmp[8] = 0xA3;
10009c96:	7213      	strb	r3, [r2, #8]
    tmp[9] = 0xA3;
10009c98:	7253      	strb	r3, [r2, #9]
    mpu_write_mem(CFG_15,10,tmp);
10009c9a:	210a      	movs	r1, #10
10009c9c:	4855      	ldr	r0, [pc, #340]	; (10009df4 <dmp_enable_feature+0x1cc>)
10009c9e:	4b54      	ldr	r3, [pc, #336]	; (10009df0 <dmp_enable_feature+0x1c8>)
10009ca0:	4798      	blx	r3
10009ca2:	2603      	movs	r6, #3
10009ca4:	4026      	ands	r6, r4

    /* Send gesture data to the FIFO. */
    if (mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
10009ca6:	d003      	beq.n	10009cb0 <dmp_enable_feature+0x88>
        tmp[0] = DINA20;
10009ca8:	2220      	movs	r2, #32
10009caa:	ab01      	add	r3, sp, #4
10009cac:	701a      	strb	r2, [r3, #0]
10009cae:	e002      	b.n	10009cb6 <dmp_enable_feature+0x8e>
    else
        tmp[0] = 0xD8;
10009cb0:	22d8      	movs	r2, #216	; 0xd8
10009cb2:	ab01      	add	r3, sp, #4
10009cb4:	701a      	strb	r2, [r3, #0]
    mpu_write_mem(CFG_27,1,tmp);
10009cb6:	aa01      	add	r2, sp, #4
10009cb8:	2101      	movs	r1, #1
10009cba:	484f      	ldr	r0, [pc, #316]	; (10009df8 <dmp_enable_feature+0x1d0>)
10009cbc:	4b4c      	ldr	r3, [pc, #304]	; (10009df0 <dmp_enable_feature+0x1c8>)
10009cbe:	4798      	blx	r3

    if (mask & DMP_FEATURE_GYRO_CAL)
10009cc0:	06a3      	lsls	r3, r4, #26
10009cc2:	d503      	bpl.n	10009ccc <dmp_enable_feature+0xa4>
        dmp_enable_gyro_cal(1);
10009cc4:	2001      	movs	r0, #1
10009cc6:	4b4d      	ldr	r3, [pc, #308]	; (10009dfc <dmp_enable_feature+0x1d4>)
10009cc8:	4798      	blx	r3
10009cca:	e002      	b.n	10009cd2 <dmp_enable_feature+0xaa>
    else
        dmp_enable_gyro_cal(0);
10009ccc:	2000      	movs	r0, #0
10009cce:	4b4b      	ldr	r3, [pc, #300]	; (10009dfc <dmp_enable_feature+0x1d4>)
10009cd0:	4798      	blx	r3

    if (mask & DMP_FEATURE_SEND_ANY_GYRO) {
10009cd2:	2d00      	cmp	r5, #0
10009cd4:	d019      	beq.n	10009d0a <dmp_enable_feature+0xe2>
        if (mask & DMP_FEATURE_SEND_CAL_GYRO) {
10009cd6:	05e3      	lsls	r3, r4, #23
10009cd8:	d509      	bpl.n	10009cee <dmp_enable_feature+0xc6>
            tmp[0] = 0xB2;
10009cda:	ab01      	add	r3, sp, #4
10009cdc:	22b2      	movs	r2, #178	; 0xb2
10009cde:	701a      	strb	r2, [r3, #0]
            tmp[1] = 0x8B;
10009ce0:	3a27      	subs	r2, #39	; 0x27
10009ce2:	705a      	strb	r2, [r3, #1]
            tmp[2] = 0xB6;
10009ce4:	322b      	adds	r2, #43	; 0x2b
10009ce6:	709a      	strb	r2, [r3, #2]
            tmp[3] = 0x9B;
10009ce8:	3a1b      	subs	r2, #27
10009cea:	70da      	strb	r2, [r3, #3]
10009cec:	e008      	b.n	10009d00 <dmp_enable_feature+0xd8>
        } else {
            tmp[0] = DINAC0;
10009cee:	ab01      	add	r3, sp, #4
10009cf0:	22b0      	movs	r2, #176	; 0xb0
10009cf2:	701a      	strb	r2, [r3, #0]
            tmp[1] = DINA80;
10009cf4:	3a30      	subs	r2, #48	; 0x30
10009cf6:	705a      	strb	r2, [r3, #1]
            tmp[2] = DINAC2;
10009cf8:	3234      	adds	r2, #52	; 0x34
10009cfa:	709a      	strb	r2, [r3, #2]
            tmp[3] = DINA90;
10009cfc:	3a24      	subs	r2, #36	; 0x24
10009cfe:	70da      	strb	r2, [r3, #3]
        }
        mpu_write_mem(CFG_GYRO_RAW_DATA, 4, tmp);
10009d00:	aa01      	add	r2, sp, #4
10009d02:	2104      	movs	r1, #4
10009d04:	483e      	ldr	r0, [pc, #248]	; (10009e00 <dmp_enable_feature+0x1d8>)
10009d06:	4b3a      	ldr	r3, [pc, #232]	; (10009df0 <dmp_enable_feature+0x1c8>)
10009d08:	4798      	blx	r3
    }

    if (mask & DMP_FEATURE_TAP) {
10009d0a:	07e3      	lsls	r3, r4, #31
10009d0c:	d523      	bpl.n	10009d56 <dmp_enable_feature+0x12e>
        /* Enable tap. */
        tmp[0] = 0xF8;
10009d0e:	aa01      	add	r2, sp, #4
10009d10:	23f8      	movs	r3, #248	; 0xf8
10009d12:	7013      	strb	r3, [r2, #0]
        mpu_write_mem(CFG_20, 1, tmp);
10009d14:	2101      	movs	r1, #1
10009d16:	208b      	movs	r0, #139	; 0x8b
10009d18:	0100      	lsls	r0, r0, #4
10009d1a:	4b35      	ldr	r3, [pc, #212]	; (10009df0 <dmp_enable_feature+0x1c8>)
10009d1c:	4798      	blx	r3
        dmp_set_tap_thresh(TAP_XYZ, 250);
10009d1e:	21fa      	movs	r1, #250	; 0xfa
10009d20:	2007      	movs	r0, #7
10009d22:	4b38      	ldr	r3, [pc, #224]	; (10009e04 <dmp_enable_feature+0x1dc>)
10009d24:	4798      	blx	r3
        dmp_set_tap_axes(TAP_XYZ);
10009d26:	2007      	movs	r0, #7
10009d28:	4b37      	ldr	r3, [pc, #220]	; (10009e08 <dmp_enable_feature+0x1e0>)
10009d2a:	4798      	blx	r3
        dmp_set_tap_count(1);
10009d2c:	2001      	movs	r0, #1
10009d2e:	4b37      	ldr	r3, [pc, #220]	; (10009e0c <dmp_enable_feature+0x1e4>)
10009d30:	4798      	blx	r3
        dmp_set_tap_time(100);
10009d32:	2064      	movs	r0, #100	; 0x64
10009d34:	4b36      	ldr	r3, [pc, #216]	; (10009e10 <dmp_enable_feature+0x1e8>)
10009d36:	4798      	blx	r3
        dmp_set_tap_time_multi(500);
10009d38:	20fa      	movs	r0, #250	; 0xfa
10009d3a:	0040      	lsls	r0, r0, #1
10009d3c:	4b35      	ldr	r3, [pc, #212]	; (10009e14 <dmp_enable_feature+0x1ec>)
10009d3e:	4798      	blx	r3

        dmp_set_shake_reject_thresh(GYRO_SF, 200);
10009d40:	21c8      	movs	r1, #200	; 0xc8
10009d42:	4835      	ldr	r0, [pc, #212]	; (10009e18 <dmp_enable_feature+0x1f0>)
10009d44:	4b35      	ldr	r3, [pc, #212]	; (10009e1c <dmp_enable_feature+0x1f4>)
10009d46:	4798      	blx	r3
        dmp_set_shake_reject_time(40);
10009d48:	2028      	movs	r0, #40	; 0x28
10009d4a:	4b35      	ldr	r3, [pc, #212]	; (10009e20 <dmp_enable_feature+0x1f8>)
10009d4c:	4798      	blx	r3
        dmp_set_shake_reject_timeout(10);
10009d4e:	200a      	movs	r0, #10
10009d50:	4b34      	ldr	r3, [pc, #208]	; (10009e24 <dmp_enable_feature+0x1fc>)
10009d52:	4798      	blx	r3
10009d54:	e007      	b.n	10009d66 <dmp_enable_feature+0x13e>
    } else {
        tmp[0] = 0xD8;
10009d56:	aa01      	add	r2, sp, #4
10009d58:	23d8      	movs	r3, #216	; 0xd8
10009d5a:	7013      	strb	r3, [r2, #0]
        mpu_write_mem(CFG_20, 1, tmp);
10009d5c:	2101      	movs	r1, #1
10009d5e:	208b      	movs	r0, #139	; 0x8b
10009d60:	0100      	lsls	r0, r0, #4
10009d62:	4b23      	ldr	r3, [pc, #140]	; (10009df0 <dmp_enable_feature+0x1c8>)
10009d64:	4798      	blx	r3
    }

    if (mask & DMP_FEATURE_ANDROID_ORIENT) {
10009d66:	07a3      	lsls	r3, r4, #30
10009d68:	d503      	bpl.n	10009d72 <dmp_enable_feature+0x14a>
        tmp[0] = 0xD9;
10009d6a:	22d9      	movs	r2, #217	; 0xd9
10009d6c:	ab01      	add	r3, sp, #4
10009d6e:	701a      	strb	r2, [r3, #0]
10009d70:	e002      	b.n	10009d78 <dmp_enable_feature+0x150>
    } else
        tmp[0] = 0xD8;
10009d72:	22d8      	movs	r2, #216	; 0xd8
10009d74:	ab01      	add	r3, sp, #4
10009d76:	701a      	strb	r2, [r3, #0]
    mpu_write_mem(CFG_ANDROID_ORIENT_INT, 1, tmp);
10009d78:	aa01      	add	r2, sp, #4
10009d7a:	2101      	movs	r1, #1
10009d7c:	482a      	ldr	r0, [pc, #168]	; (10009e28 <dmp_enable_feature+0x200>)
10009d7e:	4b1c      	ldr	r3, [pc, #112]	; (10009df0 <dmp_enable_feature+0x1c8>)
10009d80:	4798      	blx	r3

    if (mask & DMP_FEATURE_LP_QUAT)
10009d82:	0763      	lsls	r3, r4, #29
10009d84:	d503      	bpl.n	10009d8e <dmp_enable_feature+0x166>
        dmp_enable_lp_quat(1);
10009d86:	2001      	movs	r0, #1
10009d88:	4b28      	ldr	r3, [pc, #160]	; (10009e2c <dmp_enable_feature+0x204>)
10009d8a:	4798      	blx	r3
10009d8c:	e002      	b.n	10009d94 <dmp_enable_feature+0x16c>
    else
        dmp_enable_lp_quat(0);
10009d8e:	2000      	movs	r0, #0
10009d90:	4b26      	ldr	r3, [pc, #152]	; (10009e2c <dmp_enable_feature+0x204>)
10009d92:	4798      	blx	r3

    if (mask & DMP_FEATURE_6X_LP_QUAT)
10009d94:	06e3      	lsls	r3, r4, #27
10009d96:	d503      	bpl.n	10009da0 <dmp_enable_feature+0x178>
        dmp_enable_6x_lp_quat(1);
10009d98:	2001      	movs	r0, #1
10009d9a:	4b25      	ldr	r3, [pc, #148]	; (10009e30 <dmp_enable_feature+0x208>)
10009d9c:	4798      	blx	r3
10009d9e:	e002      	b.n	10009da6 <dmp_enable_feature+0x17e>
    else
        dmp_enable_6x_lp_quat(0);
10009da0:	2000      	movs	r0, #0
10009da2:	4b23      	ldr	r3, [pc, #140]	; (10009e30 <dmp_enable_feature+0x208>)
10009da4:	4798      	blx	r3

    /* Pedometer is always enabled. */
    dmp.feature_mask = mask | DMP_FEATURE_PEDOMETER;
10009da6:	2308      	movs	r3, #8
10009da8:	4323      	orrs	r3, r4
10009daa:	4a22      	ldr	r2, [pc, #136]	; (10009e34 <dmp_enable_feature+0x20c>)
10009dac:	8153      	strh	r3, [r2, #10]
    mpu_reset_fifo();
10009dae:	4b22      	ldr	r3, [pc, #136]	; (10009e38 <dmp_enable_feature+0x210>)
10009db0:	4798      	blx	r3

    dmp.packet_length = 0;
    if (mask & DMP_FEATURE_SEND_RAW_ACCEL)
10009db2:	2f00      	cmp	r7, #0
10009db4:	d103      	bne.n	10009dbe <dmp_enable_feature+0x196>

    /* Pedometer is always enabled. */
    dmp.feature_mask = mask | DMP_FEATURE_PEDOMETER;
    mpu_reset_fifo();

    dmp.packet_length = 0;
10009db6:	2200      	movs	r2, #0
10009db8:	4b1e      	ldr	r3, [pc, #120]	; (10009e34 <dmp_enable_feature+0x20c>)
10009dba:	739a      	strb	r2, [r3, #14]
10009dbc:	e002      	b.n	10009dc4 <dmp_enable_feature+0x19c>
    if (mask & DMP_FEATURE_SEND_RAW_ACCEL)
        dmp.packet_length += 6;
10009dbe:	2206      	movs	r2, #6
10009dc0:	4b1c      	ldr	r3, [pc, #112]	; (10009e34 <dmp_enable_feature+0x20c>)
10009dc2:	739a      	strb	r2, [r3, #14]
    if (mask & DMP_FEATURE_SEND_ANY_GYRO)
10009dc4:	2d00      	cmp	r5, #0
10009dc6:	d003      	beq.n	10009dd0 <dmp_enable_feature+0x1a8>
        dmp.packet_length += 6;
10009dc8:	4a1a      	ldr	r2, [pc, #104]	; (10009e34 <dmp_enable_feature+0x20c>)
10009dca:	7b93      	ldrb	r3, [r2, #14]
10009dcc:	3306      	adds	r3, #6
10009dce:	7393      	strb	r3, [r2, #14]
    if (mask & (DMP_FEATURE_LP_QUAT | DMP_FEATURE_6X_LP_QUAT))
10009dd0:	2314      	movs	r3, #20
10009dd2:	4223      	tst	r3, r4
10009dd4:	d003      	beq.n	10009dde <dmp_enable_feature+0x1b6>
        dmp.packet_length += 16;
10009dd6:	4a17      	ldr	r2, [pc, #92]	; (10009e34 <dmp_enable_feature+0x20c>)
10009dd8:	7b93      	ldrb	r3, [r2, #14]
10009dda:	3310      	adds	r3, #16
10009ddc:	7393      	strb	r3, [r2, #14]
    if (mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
10009dde:	2e00      	cmp	r6, #0
10009de0:	d003      	beq.n	10009dea <dmp_enable_feature+0x1c2>
        dmp.packet_length += 4;
10009de2:	4a14      	ldr	r2, [pc, #80]	; (10009e34 <dmp_enable_feature+0x20c>)
10009de4:	7b93      	ldrb	r3, [r2, #14]
10009de6:	3304      	adds	r3, #4
10009de8:	7393      	strb	r3, [r2, #14]

    return 0;
}
10009dea:	2000      	movs	r0, #0
10009dec:	b005      	add	sp, #20
10009dee:	bdf0      	pop	{r4, r5, r6, r7, pc}
10009df0:	100095e1 	.word	0x100095e1
10009df4:	00000aa7 	.word	0x00000aa7
10009df8:	00000ab6 	.word	0x00000ab6
10009dfc:	10009b55 	.word	0x10009b55
10009e00:	00000aa2 	.word	0x00000aa2
10009e04:	10009845 	.word	0x10009845
10009e08:	100099f1 	.word	0x100099f1
10009e0c:	10009a3d 	.word	0x10009a3d
10009e10:	10009a6d 	.word	0x10009a6d
10009e14:	10009a99 	.word	0x10009a99
10009e18:	02cae309 	.word	0x02cae309
10009e1c:	10009ac5 	.word	0x10009ac5
10009e20:	10009afd 	.word	0x10009afd
10009e24:	10009b29 	.word	0x10009b29
10009e28:	0000073d 	.word	0x0000073d
10009e2c:	10009ba1 	.word	0x10009ba1
10009e30:	10009be5 	.word	0x10009be5
10009e34:	10018250 	.word	0x10018250
10009e38:	100085bd 	.word	0x100085bd

10009e3c <sms_ble_pair_request_fn>:
    return AT_BLE_SUCCESS;
}

/* AT_BLE_PAIR_REQUEST (#10) */
at_ble_status_t sms_ble_pair_request_fn(void *params)
{
10009e3c:	b510      	push	{r4, lr}
10009e3e:	b082      	sub	sp, #8
    at_ble_pair_request_t *request = (at_ble_pair_request_t *)params;
    DBG_LOG_DEV("[sms_ble_pair_request_fn]\tPairing request... Bnew %d, BLE 0x%02x, T1 %d, T2 %d", button_instance.current_state, ble_current_state, timer1_current_mode, timer2_current_mode);
10009e40:	4809      	ldr	r0, [pc, #36]	; (10009e68 <sms_ble_pair_request_fn+0x2c>)
10009e42:	4b0a      	ldr	r3, [pc, #40]	; (10009e6c <sms_ble_pair_request_fn+0x30>)
10009e44:	4798      	blx	r3
10009e46:	4b0a      	ldr	r3, [pc, #40]	; (10009e70 <sms_ble_pair_request_fn+0x34>)
10009e48:	781a      	ldrb	r2, [r3, #0]
10009e4a:	b2d2      	uxtb	r2, r2
10009e4c:	4b09      	ldr	r3, [pc, #36]	; (10009e74 <sms_ble_pair_request_fn+0x38>)
10009e4e:	781b      	ldrb	r3, [r3, #0]
10009e50:	b2db      	uxtb	r3, r3
10009e52:	4909      	ldr	r1, [pc, #36]	; (10009e78 <sms_ble_pair_request_fn+0x3c>)
10009e54:	7808      	ldrb	r0, [r1, #0]
10009e56:	4909      	ldr	r1, [pc, #36]	; (10009e7c <sms_ble_pair_request_fn+0x40>)
10009e58:	7849      	ldrb	r1, [r1, #1]
10009e5a:	9000      	str	r0, [sp, #0]
10009e5c:	4808      	ldr	r0, [pc, #32]	; (10009e80 <sms_ble_pair_request_fn+0x44>)
10009e5e:	4c09      	ldr	r4, [pc, #36]	; (10009e84 <sms_ble_pair_request_fn+0x48>)
10009e60:	47a0      	blx	r4
    //DBG_LOG_DEV("- conn handle: 0x%04x\r\n- peer features: 0x%02x", request->handle, request->peer_features);
    return AT_BLE_SUCCESS;
}
10009e62:	2000      	movs	r0, #0
10009e64:	b002      	add	sp, #8
10009e66:	bd10      	pop	{r4, pc}
10009e68:	10016278 	.word	0x10016278
10009e6c:	100150d1 	.word	0x100150d1
10009e70:	10019eb4 	.word	0x10019eb4
10009e74:	10019d08 	.word	0x10019d08
10009e78:	10019eb5 	.word	0x10019eb5
10009e7c:	10019da4 	.word	0x10019da4
10009e80:	10016510 	.word	0x10016510
10009e84:	10014fb1 	.word	0x10014fb1

10009e88 <sms_ble_notification_confirmed_fn>:

/* AT_BLE_NOTIFICATION_CONFIRMED (#29) */
at_ble_status_t sms_ble_notification_confirmed_fn(void *params)
{
10009e88:	b510      	push	{r4, lr}
    
    at_ble_cmd_complete_event_t *notification_status = (at_ble_cmd_complete_event_t *)params;
    //button_instance.current_state = sms_button_get_state();
    //DBG_LOG_DEV("[sms_ble_notification_confirmed_fn]\tNotification sent... Bnew %d, BLE 0x%02x, T1 %d, T2 %d", button_instance.current_state, ble_current_state, timer1_current_mode, timer2_current_mode);
    //DBG_LOG_DEV("- conn handle: 0x%04x\r\n- operation: 0x%02x\r\n- status: 0x%02x", notification_status->conn_handle, notification_status->operation, notification_status->status);
    sms_dualtimer_stop(DUALTIMER_TIMER2);
10009e8a:	2001      	movs	r0, #1
10009e8c:	4b08      	ldr	r3, [pc, #32]	; (10009eb0 <sms_ble_notification_confirmed_fn+0x28>)
10009e8e:	4798      	blx	r3
    timer2_current_mode = TIMER2_MODE_NONE;
10009e90:	2200      	movs	r2, #0
10009e92:	4b08      	ldr	r3, [pc, #32]	; (10009eb4 <sms_ble_notification_confirmed_fn+0x2c>)
10009e94:	701a      	strb	r2, [r3, #0]
    ble_current_state = BLE_STATE_PAIRED;
10009e96:	3222      	adds	r2, #34	; 0x22
10009e98:	4b07      	ldr	r3, [pc, #28]	; (10009eb8 <sms_ble_notification_confirmed_fn+0x30>)
10009e9a:	701a      	strb	r2, [r3, #0]
    //DBG_LOG_CONT_DEV(" done!");

    //gpio_pin_set_output_level(dbg_pin, DBG_PIN_LOW);
    
    //DBG_LOG_DEV("Timer1 current mode: %d", timer1_current_mode);
    if(timer1_current_mode == TIMER1_MODE_NONE) {
10009e9c:	4b07      	ldr	r3, [pc, #28]	; (10009ebc <sms_ble_notification_confirmed_fn+0x34>)
10009e9e:	781b      	ldrb	r3, [r3, #0]
10009ea0:	2b00      	cmp	r3, #0
10009ea2:	d102      	bne.n	10009eaa <sms_ble_notification_confirmed_fn+0x22>
        ulp_ready = true;
10009ea4:	3a21      	subs	r2, #33	; 0x21
10009ea6:	4b06      	ldr	r3, [pc, #24]	; (10009ec0 <sms_ble_notification_confirmed_fn+0x38>)
10009ea8:	701a      	strb	r2, [r3, #0]
    }
    return AT_BLE_SUCCESS;
}
10009eaa:	2000      	movs	r0, #0
10009eac:	bd10      	pop	{r4, pc}
10009eae:	46c0      	nop			; (mov r8, r8)
10009eb0:	1000b2f1 	.word	0x1000b2f1
10009eb4:	10019eb5 	.word	0x10019eb5
10009eb8:	10019eb4 	.word	0x10019eb4
10009ebc:	10019d08 	.word	0x10019d08
10009ec0:	10019d9d 	.word	0x10019d9d

10009ec4 <sms_ble_indication_confirmed_fn>:

/* AT_BLE_INDICATION_CONFIRMED (#30) */
at_ble_status_t sms_ble_indication_confirmed_fn(void *params)
{
10009ec4:	b510      	push	{r4, lr}
    
    at_ble_indication_confirmed_t *indication_status = (at_ble_indication_confirmed_t *)params;
    //button_instance.current_state = sms_button_get_state();
    //DBG_LOG_DEV("[sms_ble_indication_confirmed]\tIndication confirmed... Bnew %d, BLE 0x%02x, T1 %d, T2 %d", button_instance.current_state, ble_current_state, timer1_current_mode, timer2_current_mode);
    //DBG_LOG_DEV("- conn handle: 0x%04x\r\n- char handle: 0x%04x\r\n- status: 0x%02x", indication_status->conn_handle, indication_status->char_handle, indication_status->status);
    sms_dualtimer_stop(DUALTIMER_TIMER2);
10009ec6:	2001      	movs	r0, #1
10009ec8:	4b08      	ldr	r3, [pc, #32]	; (10009eec <sms_ble_indication_confirmed_fn+0x28>)
10009eca:	4798      	blx	r3
    timer2_current_mode = TIMER2_MODE_NONE;
10009ecc:	2200      	movs	r2, #0
10009ece:	4b08      	ldr	r3, [pc, #32]	; (10009ef0 <sms_ble_indication_confirmed_fn+0x2c>)
10009ed0:	701a      	strb	r2, [r3, #0]
    ble_current_state = BLE_STATE_PAIRED;
10009ed2:	3222      	adds	r2, #34	; 0x22
10009ed4:	4b07      	ldr	r3, [pc, #28]	; (10009ef4 <sms_ble_indication_confirmed_fn+0x30>)
10009ed6:	701a      	strb	r2, [r3, #0]
    //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
    //sms_sensors_toggle_interrupt(SMS_EXTINT_ENABLE);
    
    //gpio_pin_set_output_level(dbg_pin, DBG_PIN_LOW);
    
    if(timer1_current_mode == TIMER1_MODE_NONE) {
10009ed8:	4b07      	ldr	r3, [pc, #28]	; (10009ef8 <sms_ble_indication_confirmed_fn+0x34>)
10009eda:	781b      	ldrb	r3, [r3, #0]
10009edc:	2b00      	cmp	r3, #0
10009ede:	d102      	bne.n	10009ee6 <sms_ble_indication_confirmed_fn+0x22>
        ulp_ready = true;
10009ee0:	3a21      	subs	r2, #33	; 0x21
10009ee2:	4b06      	ldr	r3, [pc, #24]	; (10009efc <sms_ble_indication_confirmed_fn+0x38>)
10009ee4:	701a      	strb	r2, [r3, #0]
    }        
    return AT_BLE_SUCCESS;
}
10009ee6:	2000      	movs	r0, #0
10009ee8:	bd10      	pop	{r4, pc}
10009eea:	46c0      	nop			; (mov r8, r8)
10009eec:	1000b2f1 	.word	0x1000b2f1
10009ef0:	10019eb5 	.word	0x10019eb5
10009ef4:	10019eb4 	.word	0x10019eb4
10009ef8:	10019d08 	.word	0x10019d08
10009efc:	10019d9d 	.word	0x10019d9d

10009f00 <sms_ble_startup>:
#include <stdio.h>
//#include <stdlib.h>
#include "sms_peripheral1.h"

void sms_ble_startup(void)
{
10009f00:	b510      	push	{r4, lr}
    //sms_button_toggle_interrupt(SMS_BTN_INT_DISABLE, SMS_BTN_INT_DISABLE);
    timer2_current_mode = TIMER2_MODE_LED_STARTUP;
10009f02:	2202      	movs	r2, #2
10009f04:	4b02      	ldr	r3, [pc, #8]	; (10009f10 <sms_ble_startup+0x10>)
10009f06:	701a      	strb	r2, [r3, #0]
    sms_led_blink_start(SMS_LED_0_PIN);
10009f08:	2016      	movs	r0, #22
10009f0a:	4b02      	ldr	r3, [pc, #8]	; (10009f14 <sms_ble_startup+0x14>)
10009f0c:	4798      	blx	r3
}
10009f0e:	bd10      	pop	{r4, pc}
10009f10:	10019eb5 	.word	0x10019eb5
10009f14:	1000aea5 	.word	0x1000aea5

10009f18 <sms_ble_power_down>:

void sms_ble_power_down(void)
{
10009f18:	b510      	push	{r4, lr}
    sms_monitor_get_states("[sms_ble_power_down]");
10009f1a:	482c      	ldr	r0, [pc, #176]	; (10009fcc <sms_ble_power_down+0xb4>)
10009f1c:	4b2c      	ldr	r3, [pc, #176]	; (10009fd0 <sms_ble_power_down+0xb8>)
10009f1e:	4798      	blx	r3
    if(ble_current_state == BLE_STATE_POWEROFF) {
10009f20:	4b2c      	ldr	r3, [pc, #176]	; (10009fd4 <sms_ble_power_down+0xbc>)
10009f22:	781b      	ldrb	r3, [r3, #0]
10009f24:	2b00      	cmp	r3, #0
10009f26:	d105      	bne.n	10009f34 <sms_ble_power_down+0x1c>
        /* If already power off state, then go back sleeping */
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        ulp_ready = true;
10009f28:	2201      	movs	r2, #1
10009f2a:	4b2b      	ldr	r3, [pc, #172]	; (10009fd8 <sms_ble_power_down+0xc0>)
10009f2c:	701a      	strb	r2, [r3, #0]
        release_sleep_lock();
10009f2e:	4b2b      	ldr	r3, [pc, #172]	; (10009fdc <sms_ble_power_down+0xc4>)
10009f30:	4798      	blx	r3
10009f32:	e049      	b.n	10009fc8 <sms_ble_power_down+0xb0>
    }
    else {
        /* Disable button interrupts */
        //sms_button_toggle_interrupt(SMS_BTN_INT_DISABLE, SMS_BTN_INT_DISABLE);        
        /* Disconnect if necessary from BLE network */
        switch(ble_current_state) {
10009f34:	4b27      	ldr	r3, [pc, #156]	; (10009fd4 <sms_ble_power_down+0xbc>)
10009f36:	781b      	ldrb	r3, [r3, #0]
10009f38:	b2db      	uxtb	r3, r3
10009f3a:	2b21      	cmp	r3, #33	; 0x21
10009f3c:	d030      	beq.n	10009fa0 <sms_ble_power_down+0x88>
10009f3e:	d802      	bhi.n	10009f46 <sms_ble_power_down+0x2e>
10009f40:	2b20      	cmp	r3, #32
10009f42:	d005      	beq.n	10009f50 <sms_ble_power_down+0x38>
10009f44:	e037      	b.n	10009fb6 <sms_ble_power_down+0x9e>
10009f46:	2b22      	cmp	r3, #34	; 0x22
10009f48:	d017      	beq.n	10009f7a <sms_ble_power_down+0x62>
10009f4a:	2b23      	cmp	r3, #35	; 0x23
10009f4c:	d01b      	beq.n	10009f86 <sms_ble_power_down+0x6e>
10009f4e:	e032      	b.n	10009fb6 <sms_ble_power_down+0x9e>
            case BLE_STATE_ADVERTISING:
            DBG_LOG_DEV("[sms_ble_power_down]\tStopping command received during advertisement. Stopping... ");
10009f50:	4823      	ldr	r0, [pc, #140]	; (10009fe0 <sms_ble_power_down+0xc8>)
10009f52:	4b24      	ldr	r3, [pc, #144]	; (10009fe4 <sms_ble_power_down+0xcc>)
10009f54:	4798      	blx	r3
10009f56:	4824      	ldr	r0, [pc, #144]	; (10009fe8 <sms_ble_power_down+0xd0>)
10009f58:	4b24      	ldr	r3, [pc, #144]	; (10009fec <sms_ble_power_down+0xd4>)
10009f5a:	4798      	blx	r3
            if(at_ble_adv_stop() != AT_BLE_SUCCESS) {
10009f5c:	4b24      	ldr	r3, [pc, #144]	; (10009ff0 <sms_ble_power_down+0xd8>)
10009f5e:	4798      	blx	r3
10009f60:	2800      	cmp	r0, #0
10009f62:	d003      	beq.n	10009f6c <sms_ble_power_down+0x54>
                DBG_LOG_CONT_DEV("failed!!!");
10009f64:	4823      	ldr	r0, [pc, #140]	; (10009ff4 <sms_ble_power_down+0xdc>)
10009f66:	4b21      	ldr	r3, [pc, #132]	; (10009fec <sms_ble_power_down+0xd4>)
10009f68:	4798      	blx	r3
10009f6a:	e024      	b.n	10009fb6 <sms_ble_power_down+0x9e>
                //#pragma TBD: manage adv_stop failure
            }
            else {
                DBG_LOG_CONT_DEV("done!");
10009f6c:	4822      	ldr	r0, [pc, #136]	; (10009ff8 <sms_ble_power_down+0xe0>)
10009f6e:	4b1f      	ldr	r3, [pc, #124]	; (10009fec <sms_ble_power_down+0xd4>)
10009f70:	4798      	blx	r3
                ble_current_state = BLE_STATE_DISCONNECTED;
10009f72:	2211      	movs	r2, #17
10009f74:	4b17      	ldr	r3, [pc, #92]	; (10009fd4 <sms_ble_power_down+0xbc>)
10009f76:	701a      	strb	r2, [r3, #0]
10009f78:	e01d      	b.n	10009fb6 <sms_ble_power_down+0x9e>
            }
            break;
            
            case BLE_STATE_PAIRED:
            DBG_LOG_DEV("[sms_ble_power_down]\t\tDevice paired... disabling interrupts & switching down sensors");
10009f7a:	4819      	ldr	r0, [pc, #100]	; (10009fe0 <sms_ble_power_down+0xc8>)
10009f7c:	4b19      	ldr	r3, [pc, #100]	; (10009fe4 <sms_ble_power_down+0xcc>)
10009f7e:	4798      	blx	r3
10009f80:	481e      	ldr	r0, [pc, #120]	; (10009ffc <sms_ble_power_down+0xe4>)
10009f82:	4b1a      	ldr	r3, [pc, #104]	; (10009fec <sms_ble_power_down+0xd4>)
10009f84:	4798      	blx	r3
            
            case BLE_STATE_INDICATING:
            DBG_LOG_DEV("[sms_ble_power_down]\t\tCurrently indicating");
10009f86:	4816      	ldr	r0, [pc, #88]	; (10009fe0 <sms_ble_power_down+0xc8>)
10009f88:	4b16      	ldr	r3, [pc, #88]	; (10009fe4 <sms_ble_power_down+0xcc>)
10009f8a:	4798      	blx	r3
10009f8c:	481c      	ldr	r0, [pc, #112]	; (1000a000 <sms_ble_power_down+0xe8>)
10009f8e:	4b17      	ldr	r3, [pc, #92]	; (10009fec <sms_ble_power_down+0xd4>)
10009f90:	4798      	blx	r3
            pressure_device.state = PRESSURE_STATE_OFF;
10009f92:	2100      	movs	r1, #0
10009f94:	2328      	movs	r3, #40	; 0x28
10009f96:	4a1b      	ldr	r2, [pc, #108]	; (1000a004 <sms_ble_power_down+0xec>)
10009f98:	54d1      	strb	r1, [r2, r3]
            sms_sensors_interrupt_toggle(false, false);
10009f9a:	2000      	movs	r0, #0
10009f9c:	4b1a      	ldr	r3, [pc, #104]	; (1000a008 <sms_ble_power_down+0xf0>)
10009f9e:	4798      	blx	r3
            //#pragma TBD: switch-off sensors to save current
            //sms_sensors_switch(false);
            
            case BLE_STATE_CONNECTED:
            DBG_LOG_DEV("[sms_ble_power_down]\t\tDevice connected... disconnecting");
10009fa0:	480f      	ldr	r0, [pc, #60]	; (10009fe0 <sms_ble_power_down+0xc8>)
10009fa2:	4b10      	ldr	r3, [pc, #64]	; (10009fe4 <sms_ble_power_down+0xcc>)
10009fa4:	4798      	blx	r3
10009fa6:	4819      	ldr	r0, [pc, #100]	; (1000a00c <sms_ble_power_down+0xf4>)
10009fa8:	4b10      	ldr	r3, [pc, #64]	; (10009fec <sms_ble_power_down+0xd4>)
10009faa:	4798      	blx	r3
            at_ble_disconnect(sms_connection_handle, AT_BLE_TERMINATED_BY_USER);
10009fac:	4b18      	ldr	r3, [pc, #96]	; (1000a010 <sms_ble_power_down+0xf8>)
10009fae:	8818      	ldrh	r0, [r3, #0]
10009fb0:	2113      	movs	r1, #19
10009fb2:	4b18      	ldr	r3, [pc, #96]	; (1000a014 <sms_ble_power_down+0xfc>)
10009fb4:	4798      	blx	r3
            
            default:
            break;
        }
        
        ble_current_state = BLE_STATE_DISCONNECTED;
10009fb6:	2211      	movs	r2, #17
10009fb8:	4b06      	ldr	r3, [pc, #24]	; (10009fd4 <sms_ble_power_down+0xbc>)
10009fba:	701a      	strb	r2, [r3, #0]
        timer2_current_mode = TIMER2_MODE_LED_SHUTDOWN;
10009fbc:	3a0e      	subs	r2, #14
10009fbe:	4b16      	ldr	r3, [pc, #88]	; (1000a018 <sms_ble_power_down+0x100>)
10009fc0:	701a      	strb	r2, [r3, #0]
        sms_led_blink_start(SMS_LED_0_PIN);
10009fc2:	2016      	movs	r0, #22
10009fc4:	4b15      	ldr	r3, [pc, #84]	; (1000a01c <sms_ble_power_down+0x104>)
10009fc6:	4798      	blx	r3
    }
}
10009fc8:	bd10      	pop	{r4, pc}
10009fca:	46c0      	nop			; (mov r8, r8)
10009fcc:	10016560 	.word	0x10016560
10009fd0:	1000a991 	.word	0x1000a991
10009fd4:	10019eb4 	.word	0x10019eb4
10009fd8:	10019d9d 	.word	0x10019d9d
10009fdc:	1000f359 	.word	0x1000f359
10009fe0:	10016278 	.word	0x10016278
10009fe4:	100150d1 	.word	0x100150d1
10009fe8:	10016578 	.word	0x10016578
10009fec:	10014fb1 	.word	0x10014fb1
10009ff0:	1001066d 	.word	0x1001066d
10009ff4:	100165cc 	.word	0x100165cc
10009ff8:	100165d8 	.word	0x100165d8
10009ffc:	100165e0 	.word	0x100165e0
1000a000:	10016638 	.word	0x10016638
1000a004:	10019e18 	.word	0x10019e18
1000a008:	1000a9ed 	.word	0x1000a9ed
1000a00c:	10016664 	.word	0x10016664
1000a010:	10019d9e 	.word	0x10019d9e
1000a014:	10010699 	.word	0x10010699
1000a018:	10019eb5 	.word	0x10019eb5
1000a01c:	1000aea5 	.word	0x1000aea5

1000a020 <sms_ble_adv_report_fn>:
    return AT_BLE_FAILURE;
}

/* AT_BLE_ADV_REPORT (#3) */
at_ble_status_t sms_ble_adv_report_fn(void *params)
{
1000a020:	b510      	push	{r4, lr}
    at_ble_adv_report_t *adv_report = (at_ble_adv_report_t *)params;
    ble_current_state = BLE_STATE_DISCONNECTED;
1000a022:	2211      	movs	r2, #17
1000a024:	4b05      	ldr	r3, [pc, #20]	; (1000a03c <sms_ble_adv_report_fn+0x1c>)
1000a026:	701a      	strb	r2, [r3, #0]
    DBG_LOG_DEV("[sms_ble_adv_report_fn]\tAdvertisement timeout...");
1000a028:	4805      	ldr	r0, [pc, #20]	; (1000a040 <sms_ble_adv_report_fn+0x20>)
1000a02a:	4b06      	ldr	r3, [pc, #24]	; (1000a044 <sms_ble_adv_report_fn+0x24>)
1000a02c:	4798      	blx	r3
1000a02e:	4806      	ldr	r0, [pc, #24]	; (1000a048 <sms_ble_adv_report_fn+0x28>)
1000a030:	4b06      	ldr	r3, [pc, #24]	; (1000a04c <sms_ble_adv_report_fn+0x2c>)
1000a032:	4798      	blx	r3
    //DBG_LOG_DEV("- status: 0x%02x", adv_report->status);
    sms_ble_power_down();
1000a034:	4b06      	ldr	r3, [pc, #24]	; (1000a050 <sms_ble_adv_report_fn+0x30>)
1000a036:	4798      	blx	r3
    return AT_BLE_SUCCESS;
}
1000a038:	2000      	movs	r0, #0
1000a03a:	bd10      	pop	{r4, pc}
1000a03c:	10019eb4 	.word	0x10019eb4
1000a040:	10016278 	.word	0x10016278
1000a044:	100150d1 	.word	0x100150d1
1000a048:	1001669c 	.word	0x1001669c
1000a04c:	10014fb1 	.word	0x10014fb1
1000a050:	10009f19 	.word	0x10009f19

1000a054 <sms_ble_connected_fn>:

/* AT_BLE_CONNECTED (#5) */
at_ble_status_t sms_ble_connected_fn(void *params)
{
1000a054:	b510      	push	{r4, lr}
    if(ble_current_state == BLE_STATE_ADVERTISING) {
1000a056:	4b0a      	ldr	r3, [pc, #40]	; (1000a080 <sms_ble_connected_fn+0x2c>)
1000a058:	781b      	ldrb	r3, [r3, #0]
1000a05a:	2b20      	cmp	r3, #32
1000a05c:	d10c      	bne.n	1000a078 <sms_ble_connected_fn+0x24>
        at_ble_connected_t *connected = (at_ble_connected_t *)params;
        sms_ble_conn_handle = connected->handle;
1000a05e:	8902      	ldrh	r2, [r0, #8]
1000a060:	4b08      	ldr	r3, [pc, #32]	; (1000a084 <sms_ble_connected_fn+0x30>)
1000a062:	801a      	strh	r2, [r3, #0]
        ble_current_state = BLE_STATE_CONNECTED;
1000a064:	2221      	movs	r2, #33	; 0x21
1000a066:	4b06      	ldr	r3, [pc, #24]	; (1000a080 <sms_ble_connected_fn+0x2c>)
1000a068:	701a      	strb	r2, [r3, #0]
        DBG_LOG_DEV("[sms_ble_connected_fn]\t\tDevices connected...");
1000a06a:	4807      	ldr	r0, [pc, #28]	; (1000a088 <sms_ble_connected_fn+0x34>)
1000a06c:	4b07      	ldr	r3, [pc, #28]	; (1000a08c <sms_ble_connected_fn+0x38>)
1000a06e:	4798      	blx	r3
1000a070:	4807      	ldr	r0, [pc, #28]	; (1000a090 <sms_ble_connected_fn+0x3c>)
1000a072:	4b08      	ldr	r3, [pc, #32]	; (1000a094 <sms_ble_connected_fn+0x40>)
1000a074:	4798      	blx	r3
1000a076:	e001      	b.n	1000a07c <sms_ble_connected_fn+0x28>
        //for(uint8_t i = 0; i < AT_BLE_ADDR_LEN; i++) {
            //DBG_LOG_CONT_DEV("%02x",connected->peer_addr.addr[AT_BLE_ADDR_LEN - (i+1)]);
        //}            
    }
    else {
        sms_ble_power_down();
1000a078:	4b07      	ldr	r3, [pc, #28]	; (1000a098 <sms_ble_connected_fn+0x44>)
1000a07a:	4798      	blx	r3
    }    
    return AT_BLE_SUCCESS;
}
1000a07c:	2000      	movs	r0, #0
1000a07e:	bd10      	pop	{r4, pc}
1000a080:	10019eb4 	.word	0x10019eb4
1000a084:	10019eaa 	.word	0x10019eaa
1000a088:	10016278 	.word	0x10016278
1000a08c:	100150d1 	.word	0x100150d1
1000a090:	100166d0 	.word	0x100166d0
1000a094:	10014fb1 	.word	0x10014fb1
1000a098:	10009f19 	.word	0x10009f19

1000a09c <sms_ble_paired_fn>:
    return AT_BLE_SUCCESS;
}

/* AT_BLE_PAIR_DONE (#9) */
at_ble_status_t sms_ble_paired_fn(void *params)
{
1000a09c:	b510      	push	{r4, lr}
    if(ble_current_state == BLE_STATE_CONNECTED) {
1000a09e:	4b09      	ldr	r3, [pc, #36]	; (1000a0c4 <sms_ble_paired_fn+0x28>)
1000a0a0:	781b      	ldrb	r3, [r3, #0]
1000a0a2:	2b21      	cmp	r3, #33	; 0x21
1000a0a4:	d10a      	bne.n	1000a0bc <sms_ble_paired_fn+0x20>
        ble_current_state = BLE_STATE_PAIRED;
1000a0a6:	2222      	movs	r2, #34	; 0x22
1000a0a8:	4b06      	ldr	r3, [pc, #24]	; (1000a0c4 <sms_ble_paired_fn+0x28>)
1000a0aa:	701a      	strb	r2, [r3, #0]
        at_ble_pair_done_t *pair_status = (at_ble_pair_done_t *)params;
        sms_monitor_get_states("[sms_ble_paired_fn]");
1000a0ac:	4806      	ldr	r0, [pc, #24]	; (1000a0c8 <sms_ble_paired_fn+0x2c>)
1000a0ae:	4b07      	ldr	r3, [pc, #28]	; (1000a0cc <sms_ble_paired_fn+0x30>)
1000a0b0:	4798      	blx	r3
        //DBG_LOG_DEV("[sms_ble_paired_fn]\t\tDevices paired... Bnew %d, BLE 0x%02x, T1 %d, T2 %d", button_instance.current_state, ble_current_state, timer1_current_mode, timer2_current_mode);
        //DBG_LOG_DEV("- conn handle: 0x%04x\r\n- authorization: 0x%02x\r\n- status: 0x%02x", pair_status->handle, pair_status->auth, pair_status->status);
        sms_sensors_switch(true, true); // ! Release sleep lock & enable buttons interrupt after reset done!
1000a0b2:	2101      	movs	r1, #1
1000a0b4:	2001      	movs	r0, #1
1000a0b6:	4b06      	ldr	r3, [pc, #24]	; (1000a0d0 <sms_ble_paired_fn+0x34>)
1000a0b8:	4798      	blx	r3
1000a0ba:	e001      	b.n	1000a0c0 <sms_ble_paired_fn+0x24>
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
    }
    else {
        sms_ble_power_down();
1000a0bc:	4b05      	ldr	r3, [pc, #20]	; (1000a0d4 <sms_ble_paired_fn+0x38>)
1000a0be:	4798      	blx	r3
    }        
    return AT_BLE_SUCCESS;
}
1000a0c0:	2000      	movs	r0, #0
1000a0c2:	bd10      	pop	{r4, pc}
1000a0c4:	10019eb4 	.word	0x10019eb4
1000a0c8:	10016700 	.word	0x10016700
1000a0cc:	1000a991 	.word	0x1000a991
1000a0d0:	1000aa79 	.word	0x1000aa79
1000a0d4:	10009f19 	.word	0x10009f19

1000a0d8 <sms_ble_advertise>:
        sms_led_blink_start(SMS_LED_0_PIN);
    }
}

at_ble_status_t sms_ble_advertise(void)
{
1000a0d8:	b510      	push	{r4, lr}
1000a0da:	b084      	sub	sp, #16
    at_ble_status_t status = AT_BLE_FAILURE;
    ble_current_state = BLE_STATE_ADVERTISING;
1000a0dc:	2220      	movs	r2, #32
1000a0de:	4b17      	ldr	r3, [pc, #92]	; (1000a13c <sms_ble_advertise+0x64>)
1000a0e0:	701a      	strb	r2, [r3, #0]

    /* Set the advertisement data */
    if((status = ble_advertisement_data_set()) != AT_BLE_SUCCESS) {
1000a0e2:	4b17      	ldr	r3, [pc, #92]	; (1000a140 <sms_ble_advertise+0x68>)
1000a0e4:	4798      	blx	r3
1000a0e6:	1e04      	subs	r4, r0, #0
1000a0e8:	d007      	beq.n	1000a0fa <sms_ble_advertise+0x22>
        DBG_LOG("[sms_ble_advertise]\tAdvertisement data set failed!");
1000a0ea:	4816      	ldr	r0, [pc, #88]	; (1000a144 <sms_ble_advertise+0x6c>)
1000a0ec:	4b16      	ldr	r3, [pc, #88]	; (1000a148 <sms_ble_advertise+0x70>)
1000a0ee:	4798      	blx	r3
1000a0f0:	4816      	ldr	r0, [pc, #88]	; (1000a14c <sms_ble_advertise+0x74>)
1000a0f2:	4b17      	ldr	r3, [pc, #92]	; (1000a150 <sms_ble_advertise+0x78>)
1000a0f4:	4798      	blx	r3
        return status;
1000a0f6:	0020      	movs	r0, r4
1000a0f8:	e01e      	b.n	1000a138 <sms_ble_advertise+0x60>
    }

    /* Start of advertisement */
    if((status = at_ble_adv_start(AT_BLE_ADV_TYPE_UNDIRECTED, AT_BLE_ADV_GEN_DISCOVERABLE, NULL, AT_BLE_ADV_FP_ANY, APP_FAST_ADV, APP_ADV_TIMEOUT, 0)) == AT_BLE_SUCCESS)
1000a0fa:	2300      	movs	r3, #0
1000a0fc:	9302      	str	r3, [sp, #8]
1000a0fe:	4b15      	ldr	r3, [pc, #84]	; (1000a154 <sms_ble_advertise+0x7c>)
1000a100:	9301      	str	r3, [sp, #4]
1000a102:	23c8      	movs	r3, #200	; 0xc8
1000a104:	00db      	lsls	r3, r3, #3
1000a106:	9300      	str	r3, [sp, #0]
1000a108:	2300      	movs	r3, #0
1000a10a:	2200      	movs	r2, #0
1000a10c:	2101      	movs	r1, #1
1000a10e:	2000      	movs	r0, #0
1000a110:	4c11      	ldr	r4, [pc, #68]	; (1000a158 <sms_ble_advertise+0x80>)
1000a112:	47a0      	blx	r4
1000a114:	1e04      	subs	r4, r0, #0
1000a116:	d107      	bne.n	1000a128 <sms_ble_advertise+0x50>
    {
        DBG_LOG_DEV("[sms_ble_advertise]\t\tBLE Started Advertisement");
1000a118:	480a      	ldr	r0, [pc, #40]	; (1000a144 <sms_ble_advertise+0x6c>)
1000a11a:	4b0b      	ldr	r3, [pc, #44]	; (1000a148 <sms_ble_advertise+0x70>)
1000a11c:	4798      	blx	r3
1000a11e:	480f      	ldr	r0, [pc, #60]	; (1000a15c <sms_ble_advertise+0x84>)
1000a120:	4b0b      	ldr	r3, [pc, #44]	; (1000a150 <sms_ble_advertise+0x78>)
1000a122:	4798      	blx	r3
        return AT_BLE_SUCCESS;
1000a124:	2000      	movs	r0, #0
1000a126:	e007      	b.n	1000a138 <sms_ble_advertise+0x60>
    } 
    else {
        DBG_LOG("[sms_service_advertise]\tBLE Advertisement start failed: reason 0x%x", status);
1000a128:	4806      	ldr	r0, [pc, #24]	; (1000a144 <sms_ble_advertise+0x6c>)
1000a12a:	4b07      	ldr	r3, [pc, #28]	; (1000a148 <sms_ble_advertise+0x70>)
1000a12c:	4798      	blx	r3
1000a12e:	0021      	movs	r1, r4
1000a130:	480b      	ldr	r0, [pc, #44]	; (1000a160 <sms_ble_advertise+0x88>)
1000a132:	4b07      	ldr	r3, [pc, #28]	; (1000a150 <sms_ble_advertise+0x78>)
1000a134:	4798      	blx	r3
    }
    return AT_BLE_FAILURE;
1000a136:	20e2      	movs	r0, #226	; 0xe2
}
1000a138:	b004      	add	sp, #16
1000a13a:	bd10      	pop	{r4, pc}
1000a13c:	10019eb4 	.word	0x10019eb4
1000a140:	1000e995 	.word	0x1000e995
1000a144:	10016278 	.word	0x10016278
1000a148:	100150d1 	.word	0x100150d1
1000a14c:	10016714 	.word	0x10016714
1000a150:	10014fb1 	.word	0x10014fb1
1000a154:	0000028f 	.word	0x0000028f
1000a158:	10010531 	.word	0x10010531
1000a15c:	10016748 	.word	0x10016748
1000a160:	10016778 	.word	0x10016778

1000a164 <sms_ble_disconnected_fn>:
    return AT_BLE_SUCCESS;
}

/* AT_BLE_DISCONNECTED (#6) */
at_ble_status_t sms_ble_disconnected_fn(void *params)
{
1000a164:	b530      	push	{r4, r5, lr}
1000a166:	b083      	sub	sp, #12
1000a168:	0005      	movs	r5, r0
    at_ble_disconnected_t *disconnect = (at_ble_disconnected_t *)params;
    if(ble_current_state == BLE_STATE_PAIRED) {
1000a16a:	4b1c      	ldr	r3, [pc, #112]	; (1000a1dc <sms_ble_disconnected_fn+0x78>)
1000a16c:	781b      	ldrb	r3, [r3, #0]
1000a16e:	2b22      	cmp	r3, #34	; 0x22
1000a170:	d10a      	bne.n	1000a188 <sms_ble_disconnected_fn+0x24>
        pressure_device.state = PRESSURE_STATE_OFF;
1000a172:	2100      	movs	r1, #0
1000a174:	3306      	adds	r3, #6
1000a176:	4a1a      	ldr	r2, [pc, #104]	; (1000a1e0 <sms_ble_disconnected_fn+0x7c>)
1000a178:	54d1      	strb	r1, [r2, r3]
        sms_sensors_interrupt_toggle(false, false);
1000a17a:	2000      	movs	r0, #0
1000a17c:	4b19      	ldr	r3, [pc, #100]	; (1000a1e4 <sms_ble_disconnected_fn+0x80>)
1000a17e:	4798      	blx	r3
        sms_sensors_switch(false, false);
1000a180:	2100      	movs	r1, #0
1000a182:	2000      	movs	r0, #0
1000a184:	4b18      	ldr	r3, [pc, #96]	; (1000a1e8 <sms_ble_disconnected_fn+0x84>)
1000a186:	4798      	blx	r3
    }
    ble_current_state = BLE_STATE_DISCONNECTED;
1000a188:	4c14      	ldr	r4, [pc, #80]	; (1000a1dc <sms_ble_disconnected_fn+0x78>)
1000a18a:	2311      	movs	r3, #17
1000a18c:	7023      	strb	r3, [r4, #0]
    DBG_LOG_DEV("[sms_ble_disconnected_fn]\tPeer disconnected... Bnew %d, BLE 0x%02x, T1 %d, T2 %d", button_instance.current_state, ble_current_state, timer1_current_mode, timer2_current_mode);
1000a18e:	4817      	ldr	r0, [pc, #92]	; (1000a1ec <sms_ble_disconnected_fn+0x88>)
1000a190:	4b17      	ldr	r3, [pc, #92]	; (1000a1f0 <sms_ble_disconnected_fn+0x8c>)
1000a192:	4798      	blx	r3
1000a194:	7822      	ldrb	r2, [r4, #0]
1000a196:	b2d2      	uxtb	r2, r2
1000a198:	4b16      	ldr	r3, [pc, #88]	; (1000a1f4 <sms_ble_disconnected_fn+0x90>)
1000a19a:	781b      	ldrb	r3, [r3, #0]
1000a19c:	b2db      	uxtb	r3, r3
1000a19e:	4916      	ldr	r1, [pc, #88]	; (1000a1f8 <sms_ble_disconnected_fn+0x94>)
1000a1a0:	7808      	ldrb	r0, [r1, #0]
1000a1a2:	4916      	ldr	r1, [pc, #88]	; (1000a1fc <sms_ble_disconnected_fn+0x98>)
1000a1a4:	7849      	ldrb	r1, [r1, #1]
1000a1a6:	9000      	str	r0, [sp, #0]
1000a1a8:	4815      	ldr	r0, [pc, #84]	; (1000a200 <sms_ble_disconnected_fn+0x9c>)
1000a1aa:	4c16      	ldr	r4, [pc, #88]	; (1000a204 <sms_ble_disconnected_fn+0xa0>)
1000a1ac:	47a0      	blx	r4
    //DBG_LOG_DEV("- conn handle: 0x%04x\r\n- reason: 0x%02x", disconnect->handle, disconnect->reason);
    switch(disconnect->reason) {
1000a1ae:	78ab      	ldrb	r3, [r5, #2]
1000a1b0:	2b1a      	cmp	r3, #26
1000a1b2:	d00b      	beq.n	1000a1cc <sms_ble_disconnected_fn+0x68>
1000a1b4:	b2da      	uxtb	r2, r3
1000a1b6:	2a1a      	cmp	r2, #26
1000a1b8:	d804      	bhi.n	1000a1c4 <sms_ble_disconnected_fn+0x60>
1000a1ba:	2b05      	cmp	r3, #5
1000a1bc:	d006      	beq.n	1000a1cc <sms_ble_disconnected_fn+0x68>
1000a1be:	2b08      	cmp	r3, #8
1000a1c0:	d107      	bne.n	1000a1d2 <sms_ble_disconnected_fn+0x6e>
1000a1c2:	e003      	b.n	1000a1cc <sms_ble_disconnected_fn+0x68>
1000a1c4:	2b29      	cmp	r3, #41	; 0x29
1000a1c6:	d001      	beq.n	1000a1cc <sms_ble_disconnected_fn+0x68>
1000a1c8:	2b3b      	cmp	r3, #59	; 0x3b
1000a1ca:	d102      	bne.n	1000a1d2 <sms_ble_disconnected_fn+0x6e>
        case AT_BLE_AUTH_FAILURE: //0x05
        case AT_BLE_SUPERVISION_TIMEOUT: //0x08
        case AT_BLE_UNSUPPORTED_REMOTE_FEATURE: // 0x1A
        case AT_BLE_PAIRING_WITH_UNIT_KEY_NOT_SUP: // 0x29
        case AT_BLE_UNACCEPTABLE_INTERVAL: // 0x3B
        sms_ble_advertise();
1000a1cc:	4b0e      	ldr	r3, [pc, #56]	; (1000a208 <sms_ble_disconnected_fn+0xa4>)
1000a1ce:	4798      	blx	r3
        break;
1000a1d0:	e001      	b.n	1000a1d6 <sms_ble_disconnected_fn+0x72>
        case AT_BLE_TERMINATED_BY_USER: // 0x13
        case AT_BLE_REMOTE_DEV_TERM_LOW_RESOURCES: //0x14
        case AT_BLE_REMOTE_DEV_POWER_OFF: //0x15
        case AT_BLE_CON_TERM_BY_LOCAL_HOST: //0x16
        default:
        sms_ble_power_down();
1000a1d2:	4b0e      	ldr	r3, [pc, #56]	; (1000a20c <sms_ble_disconnected_fn+0xa8>)
1000a1d4:	4798      	blx	r3
        break;
    }
    
    return AT_BLE_SUCCESS;
}
1000a1d6:	2000      	movs	r0, #0
1000a1d8:	b003      	add	sp, #12
1000a1da:	bd30      	pop	{r4, r5, pc}
1000a1dc:	10019eb4 	.word	0x10019eb4
1000a1e0:	10019e18 	.word	0x10019e18
1000a1e4:	1000a9ed 	.word	0x1000a9ed
1000a1e8:	1000aa79 	.word	0x1000aa79
1000a1ec:	10016278 	.word	0x10016278
1000a1f0:	100150d1 	.word	0x100150d1
1000a1f4:	10019d08 	.word	0x10019d08
1000a1f8:	10019eb5 	.word	0x10019eb5
1000a1fc:	10019da4 	.word	0x10019da4
1000a200:	100167bc 	.word	0x100167bc
1000a204:	10014fb1 	.word	0x10014fb1
1000a208:	1000a0d9 	.word	0x1000a0d9
1000a20c:	10009f19 	.word	0x10009f19

1000a210 <sms_ble_send_characteristic>:
    NULL, //ble_characteristic_write_cmd_cmp
    NULL //ble_read_authorize_request_handler
};

at_ble_status_t sms_ble_send_characteristic(enum sms_ble_char_type ch)
{
1000a210:	b570      	push	{r4, r5, r6, lr}
1000a212:	b086      	sub	sp, #24
    at_ble_status_t status = AT_BLE_SUCCESS;
    at_ble_handle_t val_handle = 0;
    uint8_t length = 0;
    uint8_t char_size = 0;
    uint8_t send_val[BLE_CHAR_SIZE_MAX];
    ble_current_state = BLE_STATE_INDICATING;
1000a214:	2223      	movs	r2, #35	; 0x23
1000a216:	4b5e      	ldr	r3, [pc, #376]	; (1000a390 <sms_ble_send_characteristic+0x180>)
1000a218:	701a      	strb	r2, [r3, #0]

    
    sms_ble_send_cnt++;
1000a21a:	4a5e      	ldr	r2, [pc, #376]	; (1000a394 <sms_ble_send_characteristic+0x184>)
1000a21c:	8813      	ldrh	r3, [r2, #0]
1000a21e:	3301      	adds	r3, #1
1000a220:	8013      	strh	r3, [r2, #0]
    
    switch(ch) {
1000a222:	2801      	cmp	r0, #1
1000a224:	d015      	beq.n	1000a252 <sms_ble_send_characteristic+0x42>
1000a226:	2800      	cmp	r0, #0
1000a228:	d004      	beq.n	1000a234 <sms_ble_send_characteristic+0x24>
1000a22a:	2802      	cmp	r0, #2
1000a22c:	d022      	beq.n	1000a274 <sms_ble_send_characteristic+0x64>
1000a22e:	2803      	cmp	r0, #3
1000a230:	d036      	beq.n	1000a2a0 <sms_ble_send_characteristic+0x90>
1000a232:	e08e      	b.n	1000a352 <sms_ble_send_characteristic+0x142>
        case BLE_CHAR_BTN0:
        btn0_instance.char_value = ((btn0_instance.char_value >= 0x7f) ? 0 : (btn0_instance.char_value + 1));
1000a234:	4b58      	ldr	r3, [pc, #352]	; (1000a398 <sms_ble_send_characteristic+0x188>)
1000a236:	78da      	ldrb	r2, [r3, #3]
1000a238:	2300      	movs	r3, #0
1000a23a:	2a7e      	cmp	r2, #126	; 0x7e
1000a23c:	d801      	bhi.n	1000a242 <sms_ble_send_characteristic+0x32>
1000a23e:	3201      	adds	r2, #1
1000a240:	b2d3      	uxtb	r3, r2
1000a242:	4a55      	ldr	r2, [pc, #340]	; (1000a398 <sms_ble_send_characteristic+0x188>)
1000a244:	70d3      	strb	r3, [r2, #3]
        send_val[0] = btn0_instance.char_value;
1000a246:	aa01      	add	r2, sp, #4
1000a248:	7013      	strb	r3, [r2, #0]
        val_handle = button_instance.service_handler.serv_chars.char_val_handle;
1000a24a:	4b54      	ldr	r3, [pc, #336]	; (1000a39c <sms_ble_send_characteristic+0x18c>)
1000a24c:	8b1d      	ldrh	r5, [r3, #24]
        length = 1;
1000a24e:	2201      	movs	r2, #1
        break;
1000a250:	e081      	b.n	1000a356 <sms_ble_send_characteristic+0x146>
        
        case BLE_CHAR_BTN1:
        btn1_instance.char_value = ((btn1_instance.char_value >= 0xff) ? 0 : (btn1_instance.char_value + 1));
1000a252:	4b53      	ldr	r3, [pc, #332]	; (1000a3a0 <sms_ble_send_characteristic+0x190>)
1000a254:	78db      	ldrb	r3, [r3, #3]
1000a256:	2bff      	cmp	r3, #255	; 0xff
1000a258:	d002      	beq.n	1000a260 <sms_ble_send_characteristic+0x50>
1000a25a:	3301      	adds	r3, #1
1000a25c:	b2db      	uxtb	r3, r3
1000a25e:	e000      	b.n	1000a262 <sms_ble_send_characteristic+0x52>
1000a260:	2300      	movs	r3, #0
1000a262:	4a4f      	ldr	r2, [pc, #316]	; (1000a3a0 <sms_ble_send_characteristic+0x190>)
1000a264:	70d3      	strb	r3, [r2, #3]
        send_val[0] = btn1_instance.char_value + 0x80;
1000a266:	3b80      	subs	r3, #128	; 0x80
1000a268:	aa01      	add	r2, sp, #4
1000a26a:	7013      	strb	r3, [r2, #0]
        val_handle = button_instance.service_handler.serv_chars.char_val_handle;
1000a26c:	4b4b      	ldr	r3, [pc, #300]	; (1000a39c <sms_ble_send_characteristic+0x18c>)
1000a26e:	8b1d      	ldrh	r5, [r3, #24]
        length = 1;
1000a270:	2201      	movs	r2, #1
        break;
1000a272:	e070      	b.n	1000a356 <sms_ble_send_characteristic+0x146>
        
        case BLE_CHAR_PRESS:
        send_val[0] = (uint8_t)(pressure_device.ms58_device.temperature & 0xff);
1000a274:	494b      	ldr	r1, [pc, #300]	; (1000a3a4 <sms_ble_send_characteristic+0x194>)
1000a276:	6a0a      	ldr	r2, [r1, #32]
1000a278:	ab01      	add	r3, sp, #4
1000a27a:	701a      	strb	r2, [r3, #0]
        send_val[1] = (uint8_t)((pressure_device.ms58_device.temperature >> 8) & 0xff);
1000a27c:	1210      	asrs	r0, r2, #8
1000a27e:	7058      	strb	r0, [r3, #1]
        send_val[2] = (uint8_t)((pressure_device.ms58_device.temperature >> 16) & 0xff);
1000a280:	1410      	asrs	r0, r2, #16
1000a282:	7098      	strb	r0, [r3, #2]
        send_val[3] = (uint8_t)((pressure_device.ms58_device.temperature >> 24) & 0xff);
1000a284:	1612      	asrs	r2, r2, #24
1000a286:	70da      	strb	r2, [r3, #3]
        send_val[4] = (uint8_t)(pressure_device.ms58_device.pressure & 0xff);
1000a288:	69ca      	ldr	r2, [r1, #28]
1000a28a:	711a      	strb	r2, [r3, #4]
        send_val[5] = (uint8_t)((pressure_device.ms58_device.pressure >> 8) & 0xff);
1000a28c:	1210      	asrs	r0, r2, #8
1000a28e:	7158      	strb	r0, [r3, #5]
        send_val[6] = (uint8_t)((pressure_device.ms58_device.pressure >> 16) & 0xff);
1000a290:	1410      	asrs	r0, r2, #16
1000a292:	7198      	strb	r0, [r3, #6]
        send_val[7] = (uint8_t)((pressure_device.ms58_device.pressure >> 24) & 0xff);
1000a294:	1612      	asrs	r2, r2, #24
1000a296:	71da      	strb	r2, [r3, #7]
        val_handle = pressure_device.service_handler.serv_chars.char_val_handle;
1000a298:	2340      	movs	r3, #64	; 0x40
1000a29a:	5acd      	ldrh	r5, [r1, r3]
        length = 8;
1000a29c:	2208      	movs	r2, #8
        break;
1000a29e:	e05a      	b.n	1000a356 <sms_ble_send_characteristic+0x146>
        
        case BLE_CHAR_MPU:
        send_val[0] = (uint8_t)(mpu_device.hal.accel[0] & 0xff);
1000a2a0:	4a41      	ldr	r2, [pc, #260]	; (1000a3a8 <sms_ble_send_characteristic+0x198>)
1000a2a2:	2312      	movs	r3, #18
1000a2a4:	5ed1      	ldrsh	r1, [r2, r3]
1000a2a6:	ab01      	add	r3, sp, #4
1000a2a8:	7019      	strb	r1, [r3, #0]
        send_val[1] = (uint8_t)((mpu_device.hal.accel[0] >> 8) & 0xff);
1000a2aa:	1209      	asrs	r1, r1, #8
1000a2ac:	7059      	strb	r1, [r3, #1]
        send_val[2] = (uint8_t)(mpu_device.hal.accel[1] & 0xff);
1000a2ae:	2014      	movs	r0, #20
1000a2b0:	5e11      	ldrsh	r1, [r2, r0]
1000a2b2:	7099      	strb	r1, [r3, #2]
        send_val[3] = (uint8_t)((mpu_device.hal.accel[1] >> 8) & 0xff);
1000a2b4:	1209      	asrs	r1, r1, #8
1000a2b6:	70d9      	strb	r1, [r3, #3]
        send_val[4] = (uint8_t)(mpu_device.hal.accel[2] & 0xff);
1000a2b8:	2016      	movs	r0, #22
1000a2ba:	5e11      	ldrsh	r1, [r2, r0]
1000a2bc:	7119      	strb	r1, [r3, #4]
        send_val[5] = (uint8_t)((mpu_device.hal.accel[2] >> 8) & 0xff);
1000a2be:	1209      	asrs	r1, r1, #8
1000a2c0:	7159      	strb	r1, [r3, #5]
        send_val[6] = (uint8_t)(mpu_device.hal.gyro[0] & 0xff);
1000a2c2:	200c      	movs	r0, #12
1000a2c4:	5e11      	ldrsh	r1, [r2, r0]
1000a2c6:	7199      	strb	r1, [r3, #6]
        send_val[7] = (uint8_t)((mpu_device.hal.gyro[0] >> 8) & 0xff);
1000a2c8:	1209      	asrs	r1, r1, #8
1000a2ca:	71d9      	strb	r1, [r3, #7]
        send_val[8] = (uint8_t)(mpu_device.hal.gyro[1] & 0xff);
1000a2cc:	200e      	movs	r0, #14
1000a2ce:	5e11      	ldrsh	r1, [r2, r0]
1000a2d0:	7219      	strb	r1, [r3, #8]
        send_val[9] = (uint8_t)((mpu_device.hal.gyro[1] >> 8) & 0xff);
1000a2d2:	1209      	asrs	r1, r1, #8
1000a2d4:	7259      	strb	r1, [r3, #9]
        send_val[10] = (uint8_t)(mpu_device.hal.gyro[2] & 0xff);
1000a2d6:	2010      	movs	r0, #16
1000a2d8:	5e11      	ldrsh	r1, [r2, r0]
1000a2da:	7299      	strb	r1, [r3, #10]
        send_val[11] = (uint8_t)((mpu_device.hal.gyro[2] >> 8) & 0xff);
1000a2dc:	1209      	asrs	r1, r1, #8
1000a2de:	72d9      	strb	r1, [r3, #11]
        val_handle = mpu_device.service_handler.serv_chars.char_val_handle;
1000a2e0:	2348      	movs	r3, #72	; 0x48
1000a2e2:	5ad5      	ldrh	r5, [r2, r3]
        length = 12;
        
        if(mpu_device.new_compass) {
1000a2e4:	3b1a      	subs	r3, #26
1000a2e6:	5cd3      	ldrb	r3, [r2, r3]
1000a2e8:	2b00      	cmp	r3, #0
1000a2ea:	d014      	beq.n	1000a316 <sms_ble_send_characteristic+0x106>
            send_val[12] = (uint8_t)(mpu_device.hal.compass[0] & 0xff);
1000a2ec:	2318      	movs	r3, #24
1000a2ee:	5ed1      	ldrsh	r1, [r2, r3]
1000a2f0:	ab01      	add	r3, sp, #4
1000a2f2:	7319      	strb	r1, [r3, #12]
            send_val[13] = (uint8_t)((mpu_device.hal.compass[0] >> 8) & 0xff);
1000a2f4:	1209      	asrs	r1, r1, #8
1000a2f6:	7359      	strb	r1, [r3, #13]
            send_val[14] = (uint8_t)(mpu_device.hal.compass[1] & 0xff);
1000a2f8:	201a      	movs	r0, #26
1000a2fa:	5e11      	ldrsh	r1, [r2, r0]
1000a2fc:	7399      	strb	r1, [r3, #14]
            send_val[15] = (uint8_t)((mpu_device.hal.compass[1] >> 8) & 0xff);
1000a2fe:	1209      	asrs	r1, r1, #8
1000a300:	73d9      	strb	r1, [r3, #15]
            send_val[16] = (uint8_t)(mpu_device.hal.compass[2] & 0xff);
1000a302:	201c      	movs	r0, #28
1000a304:	5e11      	ldrsh	r1, [r2, r0]
1000a306:	7419      	strb	r1, [r3, #16]
            send_val[17] = (uint8_t)((mpu_device.hal.compass[2] >> 8) & 0xff);
1000a308:	1209      	asrs	r1, r1, #8
1000a30a:	7459      	strb	r1, [r3, #17]
            length = 18;
            mpu_device.new_compass = false;
1000a30c:	2100      	movs	r1, #0
1000a30e:	232e      	movs	r3, #46	; 0x2e
1000a310:	54d1      	strb	r1, [r2, r3]
            send_val[13] = (uint8_t)((mpu_device.hal.compass[0] >> 8) & 0xff);
            send_val[14] = (uint8_t)(mpu_device.hal.compass[1] & 0xff);
            send_val[15] = (uint8_t)((mpu_device.hal.compass[1] >> 8) & 0xff);
            send_val[16] = (uint8_t)(mpu_device.hal.compass[2] & 0xff);
            send_val[17] = (uint8_t)((mpu_device.hal.compass[2] >> 8) & 0xff);
            length = 18;
1000a312:	2212      	movs	r2, #18
1000a314:	e008      	b.n	1000a328 <sms_ble_send_characteristic+0x118>
            mpu_device.new_compass = false;
        }
        else {
            for(uint8_t i = 0; i < 6; i++) {
                send_val[12+i] = 0;
1000a316:	ab01      	add	r3, sp, #4
1000a318:	2200      	movs	r2, #0
1000a31a:	731a      	strb	r2, [r3, #12]
1000a31c:	735a      	strb	r2, [r3, #13]
1000a31e:	739a      	strb	r2, [r3, #14]
1000a320:	73da      	strb	r2, [r3, #15]
1000a322:	741a      	strb	r2, [r3, #16]
1000a324:	745a      	strb	r2, [r3, #17]
        send_val[8] = (uint8_t)(mpu_device.hal.gyro[1] & 0xff);
        send_val[9] = (uint8_t)((mpu_device.hal.gyro[1] >> 8) & 0xff);
        send_val[10] = (uint8_t)(mpu_device.hal.gyro[2] & 0xff);
        send_val[11] = (uint8_t)((mpu_device.hal.gyro[2] >> 8) & 0xff);
        val_handle = mpu_device.service_handler.serv_chars.char_val_handle;
        length = 12;
1000a326:	320c      	adds	r2, #12
            for(uint8_t i = 0; i < 6; i++) {
                send_val[12+i] = 0;
            }
        }
        
        if(mpu_device.new_temp) {
1000a328:	232f      	movs	r3, #47	; 0x2f
1000a32a:	491f      	ldr	r1, [pc, #124]	; (1000a3a8 <sms_ble_send_characteristic+0x198>)
1000a32c:	5ccb      	ldrb	r3, [r1, r3]
1000a32e:	2b00      	cmp	r3, #0
1000a330:	d00a      	beq.n	1000a348 <sms_ble_send_characteristic+0x138>
            send_val[18] = (uint8_t)(mpu_device.hal.temperature & 0xff);
1000a332:	000a      	movs	r2, r1
1000a334:	6a0b      	ldr	r3, [r1, #32]
1000a336:	a901      	add	r1, sp, #4
1000a338:	748b      	strb	r3, [r1, #18]
            send_val[19] = (uint8_t)((mpu_device.hal.temperature >> 8) & 0xff);
1000a33a:	121b      	asrs	r3, r3, #8
1000a33c:	74cb      	strb	r3, [r1, #19]
            length = 20;
            mpu_device.new_temp = false;
1000a33e:	2100      	movs	r1, #0
1000a340:	232f      	movs	r3, #47	; 0x2f
1000a342:	54d1      	strb	r1, [r2, r3]
        }
        
        if(mpu_device.new_temp) {
            send_val[18] = (uint8_t)(mpu_device.hal.temperature & 0xff);
            send_val[19] = (uint8_t)((mpu_device.hal.temperature >> 8) & 0xff);
            length = 20;
1000a344:	2214      	movs	r2, #20
1000a346:	e006      	b.n	1000a356 <sms_ble_send_characteristic+0x146>
            mpu_device.new_temp = false;
        }
        else {
            for(uint8_t i = 0; i < 2; i++) {
                send_val[18+i] = 0;
1000a348:	ab01      	add	r3, sp, #4
1000a34a:	2100      	movs	r1, #0
1000a34c:	7499      	strb	r1, [r3, #18]
1000a34e:	74d9      	strb	r1, [r3, #19]
1000a350:	e001      	b.n	1000a356 <sms_ble_send_characteristic+0x146>

at_ble_status_t sms_ble_send_characteristic(enum sms_ble_char_type ch)
{
    at_ble_status_t status = AT_BLE_SUCCESS;
    at_ble_handle_t val_handle = 0;
    uint8_t length = 0;
1000a352:	2200      	movs	r2, #0
};

at_ble_status_t sms_ble_send_characteristic(enum sms_ble_char_type ch)
{
    at_ble_status_t status = AT_BLE_SUCCESS;
    at_ble_handle_t val_handle = 0;
1000a354:	2500      	movs	r5, #0
    
    //DBG_LOG_DEV("Sending: ");
    //for(int i = 0; i < 20; i += 2) {
        //DBG_LOG_CONT_DEV("0x%02x%02x ", send_val[i], send_val[i+1]);
    //}
    status = at_ble_characteristic_value_set(val_handle, send_val, (length * sizeof(uint8_t)));
1000a356:	b292      	uxth	r2, r2
1000a358:	a901      	add	r1, sp, #4
1000a35a:	0028      	movs	r0, r5
1000a35c:	4b13      	ldr	r3, [pc, #76]	; (1000a3ac <sms_ble_send_characteristic+0x19c>)
1000a35e:	4798      	blx	r3
1000a360:	1e04      	subs	r4, r0, #0
    if(status == AT_BLE_SUCCESS) {
1000a362:	d111      	bne.n	1000a388 <sms_ble_send_characteristic+0x178>
        //for(uint8_t i = 0; i < AT_BLE_UUID_128_LEN; i++) {
        //DBG_LOG_CONT_DEV("%02x", sms_button_service_handler.serv_uuid.uuid[(i)]);
        //}
        //DBG_LOG_DEV("- char value handle: 0x%04x\r\n- char value: 0x%02x", sms_button_service_handler.serv_chars.char_val_handle, send_val);
        
        printf("\r\ncnt: %d", sms_ble_send_cnt);
1000a364:	4b0b      	ldr	r3, [pc, #44]	; (1000a394 <sms_ble_send_characteristic+0x184>)
1000a366:	8819      	ldrh	r1, [r3, #0]
1000a368:	4811      	ldr	r0, [pc, #68]	; (1000a3b0 <sms_ble_send_characteristic+0x1a0>)
1000a36a:	4b12      	ldr	r3, [pc, #72]	; (1000a3b4 <sms_ble_send_characteristic+0x1a4>)
1000a36c:	4798      	blx	r3
        gpio_pin_set_output_level(DBG_PIN_1, DBG_PIN_HIGH);
1000a36e:	2101      	movs	r1, #1
1000a370:	2002      	movs	r0, #2
1000a372:	4e11      	ldr	r6, [pc, #68]	; (1000a3b8 <sms_ble_send_characteristic+0x1a8>)
1000a374:	47b0      	blx	r6
#   if SMS_SENDING_WITH_ACK == true
        sms_ble_ind_retry = 0;
        status = at_ble_indication_send(sms_connection_handle, val_handle);
#   else
        status = at_ble_notification_send(sms_connection_handle, val_handle);
1000a376:	4b11      	ldr	r3, [pc, #68]	; (1000a3bc <sms_ble_send_characteristic+0x1ac>)
1000a378:	8818      	ldrh	r0, [r3, #0]
1000a37a:	0029      	movs	r1, r5
1000a37c:	4b10      	ldr	r3, [pc, #64]	; (1000a3c0 <sms_ble_send_characteristic+0x1b0>)
1000a37e:	4798      	blx	r3
1000a380:	0004      	movs	r4, r0
#   endif
        gpio_pin_set_output_level(DBG_PIN_1, DBG_PIN_LOW);
1000a382:	2100      	movs	r1, #0
1000a384:	2002      	movs	r0, #2
1000a386:	47b0      	blx	r6
        else {
            //#pragma TBD: handle sending error...
        }
    }
    return status;
}
1000a388:	0020      	movs	r0, r4
1000a38a:	b006      	add	sp, #24
1000a38c:	bd70      	pop	{r4, r5, r6, pc}
1000a38e:	46c0      	nop			; (mov r8, r8)
1000a390:	10019eb4 	.word	0x10019eb4
1000a394:	10019ed0 	.word	0x10019ed0
1000a398:	10019d04 	.word	0x10019d04
1000a39c:	10019da4 	.word	0x10019da4
1000a3a0:	10019da0 	.word	0x10019da0
1000a3a4:	10019e18 	.word	0x10019e18
1000a3a8:	10019d0c 	.word	0x10019d0c
1000a3ac:	10010e15 	.word	0x10010e15
1000a3b0:	10016810 	.word	0x10016810
1000a3b4:	10014fb1 	.word	0x10014fb1
1000a3b8:	1000c025 	.word	0x1000c025
1000a3bc:	10019d9e 	.word	0x10019d9e
1000a3c0:	10010fb5 	.word	0x10010fb5

1000a3c4 <sms_ble_primary_service_define>:


at_ble_status_t sms_ble_primary_service_define(gatt_service_handler_t *service)
{
1000a3c4:	b510      	push	{r4, lr}
1000a3c6:	b082      	sub	sp, #8
    //DBG_LOG_DEV("[sms_ble_primary_service_define]\n\r  defining primary service\r\n- uuid: 0x%02x\r\n- handle: 0x%02x\r\n- char uuid: 0x%02x%02x\r\n- char init value: %d", (unsigned int)service->serv_uuid.uuid, service->serv_handle, service->serv_chars.uuid.uuid[1], service->serv_chars.uuid.uuid[0], service->serv_chars.value_init_len);
    return(at_ble_primary_service_define(&service->serv_uuid, &service->serv_handle, NULL, 0, &service->serv_chars, 1));
1000a3c8:	0001      	movs	r1, r0
1000a3ca:	3112      	adds	r1, #18
1000a3cc:	2301      	movs	r3, #1
1000a3ce:	9301      	str	r3, [sp, #4]
1000a3d0:	0003      	movs	r3, r0
1000a3d2:	3314      	adds	r3, #20
1000a3d4:	9300      	str	r3, [sp, #0]
1000a3d6:	2300      	movs	r3, #0
1000a3d8:	2200      	movs	r2, #0
1000a3da:	4c02      	ldr	r4, [pc, #8]	; (1000a3e4 <sms_ble_primary_service_define+0x20>)
1000a3dc:	47a0      	blx	r4
}
1000a3de:	b002      	add	sp, #8
1000a3e0:	bd10      	pop	{r4, pc}
1000a3e2:	46c0      	nop			; (mov r8, r8)
1000a3e4:	10010df5 	.word	0x10010df5

1000a3e8 <sms_ble_service_init>:


void sms_ble_service_init(enum sms_ble_serv_type type, gatt_service_handler_t *service, uint8_t *value)
{
1000a3e8:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a3ea:	464f      	mov	r7, r9
1000a3ec:	4646      	mov	r6, r8
1000a3ee:	b4c0      	push	{r6, r7}
1000a3f0:	b083      	sub	sp, #12
1000a3f2:	4694      	mov	ip, r2
    at_ble_handle_t handle = 0;
    uint8_t uuid[16] = {0};
    uint8_t char_size = 0;
    switch(type) {
1000a3f4:	2801      	cmp	r0, #1
1000a3f6:	d010      	beq.n	1000a41a <sms_ble_service_init+0x32>
1000a3f8:	2800      	cmp	r0, #0
1000a3fa:	d002      	beq.n	1000a402 <sms_ble_service_init+0x1a>
1000a3fc:	2802      	cmp	r0, #2
1000a3fe:	d019      	beq.n	1000a434 <sms_ble_service_init+0x4c>
1000a400:	e025      	b.n	1000a44e <sms_ble_service_init+0x66>
        uuid[9] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_3 >> 8) & 0xFF);
        uuid[10] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_3 >> 16) & 0xFF);
        uuid[11] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_3 >> 24) & 0xFF);
        uuid[12] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_4) & 0xFF);
        uuid[13] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_4 >> 8) & 0xFF);
        uuid[14] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_4 >> 16) & 0xFF);
1000a402:	24bb      	movs	r4, #187	; 0xbb
        uuid[6] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 16) & 0xFF);
        uuid[7] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 24) & 0xFF);
        uuid[8] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_3) & 0xFF);
        uuid[9] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_3 >> 8) & 0xFF);
        uuid[10] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_3 >> 16) & 0xFF);
        uuid[11] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_3 >> 24) & 0xFF);
1000a404:	2550      	movs	r5, #80	; 0x50
        uuid[5] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 8) & 0xFF);
        uuid[6] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 16) & 0xFF);
        uuid[7] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 24) & 0xFF);
        uuid[8] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_3) & 0xFF);
        uuid[9] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_3 >> 8) & 0xFF);
        uuid[10] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_3 >> 16) & 0xFF);
1000a406:	2630      	movs	r6, #48	; 0x30
        uuid[2] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[4] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2) & 0xFF);
        uuid[5] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 8) & 0xFF);
        uuid[6] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 16) & 0xFF);
        uuid[7] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 24) & 0xFF);
1000a408:	275a      	movs	r7, #90	; 0x5a
        uuid[1] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[4] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2) & 0xFF);
        uuid[5] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 8) & 0xFF);
        uuid[6] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 16) & 0xFF);
1000a40a:	20be      	movs	r0, #190	; 0xbe
        case BLE_SERV_BUTTON:
        handle = 1;
        uuid[0] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 24) & 0xFF);
1000a40c:	231c      	movs	r3, #28
1000a40e:	4698      	mov	r8, r3
    switch(type) {
        case BLE_SERV_BUTTON:
        handle = 1;
        uuid[0] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 16) & 0xFF);
1000a410:	333b      	adds	r3, #59	; 0x3b
1000a412:	4699      	mov	r9, r3
        uuid[11] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_3 >> 24) & 0xFF);
        uuid[12] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_4) & 0xFF);
        uuid[13] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_4 >> 8) & 0xFF);
        uuid[14] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_4 >> 16) & 0xFF);
        uuid[15] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_4 >> 24) & 0xFF);
        char_size = 1;
1000a414:	3b56      	subs	r3, #86	; 0x56
1000a416:	9301      	str	r3, [sp, #4]
1000a418:	e022      	b.n	1000a460 <sms_ble_service_init+0x78>
        uuid[9] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_3 >> 8) & 0xFF);
        uuid[10] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_3 >> 16) & 0xFF);
        uuid[11] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_3 >> 24) & 0xFF);
        uuid[12] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4) & 0xFF);
        uuid[13] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 8) & 0xFF);
        uuid[14] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 16) & 0xFF);
1000a41a:	24ee      	movs	r4, #238	; 0xee
        uuid[6] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 16) & 0xFF);
        uuid[7] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 24) & 0xFF);
        uuid[8] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_3) & 0xFF);
        uuid[9] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_3 >> 8) & 0xFF);
        uuid[10] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_3 >> 16) & 0xFF);
        uuid[11] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_3 >> 24) & 0xFF);
1000a41c:	2550      	movs	r5, #80	; 0x50
        uuid[5] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 8) & 0xFF);
        uuid[6] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 16) & 0xFF);
        uuid[7] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 24) & 0xFF);
        uuid[8] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_3) & 0xFF);
        uuid[9] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_3 >> 8) & 0xFF);
        uuid[10] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_3 >> 16) & 0xFF);
1000a41e:	2630      	movs	r6, #48	; 0x30
        uuid[2] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[4] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2) & 0xFF);
        uuid[5] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 8) & 0xFF);
        uuid[6] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 16) & 0xFF);
        uuid[7] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 24) & 0xFF);
1000a420:	275a      	movs	r7, #90	; 0x5a
        uuid[1] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[4] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2) & 0xFF);
        uuid[5] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 8) & 0xFF);
        uuid[6] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 16) & 0xFF);
1000a422:	20be      	movs	r0, #190	; 0xbe
        case BLE_SERV_PRESSURE:
        handle = 2;
        uuid[0] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 24) & 0xFF);
1000a424:	231c      	movs	r3, #28
1000a426:	4698      	mov	r8, r3
        
        case BLE_SERV_PRESSURE:
        handle = 2;
        uuid[0] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 16) & 0xFF);
1000a428:	333b      	adds	r3, #59	; 0x3b
1000a42a:	4699      	mov	r9, r3
        uuid[11] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_3 >> 24) & 0xFF);
        uuid[12] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4) & 0xFF);
        uuid[13] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 8) & 0xFF);
        uuid[14] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 16) & 0xFF);
        uuid[15] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 24) & 0xFF);
        char_size = 8;
1000a42c:	3b4f      	subs	r3, #79	; 0x4f
1000a42e:	9301      	str	r3, [sp, #4]
        uuid[15] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_4 >> 24) & 0xFF);
        char_size = 1;
        break;
        
        case BLE_SERV_PRESSURE:
        handle = 2;
1000a430:	3b06      	subs	r3, #6
        uuid[12] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4) & 0xFF);
        uuid[13] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 8) & 0xFF);
        uuid[14] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 16) & 0xFF);
        uuid[15] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 24) & 0xFF);
        char_size = 8;
        break;
1000a432:	e015      	b.n	1000a460 <sms_ble_service_init+0x78>
        uuid[9] = (uint8_t) ((SMS_MPU_SERVICE_UUID_3 >> 8) & 0xFF);
        uuid[10] = (uint8_t) ((SMS_MPU_SERVICE_UUID_3 >> 16) & 0xFF);
        uuid[11] = (uint8_t) ((SMS_MPU_SERVICE_UUID_3 >> 24) & 0xFF);
        uuid[12] = (uint8_t) ((SMS_MPU_SERVICE_UUID_4) & 0xFF);
        uuid[13] = (uint8_t) ((SMS_MPU_SERVICE_UUID_4 >> 8) & 0xFF);
        uuid[14] = (uint8_t) ((SMS_MPU_SERVICE_UUID_4 >> 16) & 0xFF);
1000a434:	2411      	movs	r4, #17
        uuid[6] = (uint8_t) ((SMS_MPU_SERVICE_UUID_2 >> 16) & 0xFF);
        uuid[7] = (uint8_t) ((SMS_MPU_SERVICE_UUID_2 >> 24) & 0xFF);
        uuid[8] = (uint8_t) ((SMS_MPU_SERVICE_UUID_3) & 0xFF);
        uuid[9] = (uint8_t) ((SMS_MPU_SERVICE_UUID_3 >> 8) & 0xFF);
        uuid[10] = (uint8_t) ((SMS_MPU_SERVICE_UUID_3 >> 16) & 0xFF);
        uuid[11] = (uint8_t) ((SMS_MPU_SERVICE_UUID_3 >> 24) & 0xFF);
1000a436:	2550      	movs	r5, #80	; 0x50
        uuid[5] = (uint8_t) ((SMS_MPU_SERVICE_UUID_2 >> 8) & 0xFF);
        uuid[6] = (uint8_t) ((SMS_MPU_SERVICE_UUID_2 >> 16) & 0xFF);
        uuid[7] = (uint8_t) ((SMS_MPU_SERVICE_UUID_2 >> 24) & 0xFF);
        uuid[8] = (uint8_t) ((SMS_MPU_SERVICE_UUID_3) & 0xFF);
        uuid[9] = (uint8_t) ((SMS_MPU_SERVICE_UUID_3 >> 8) & 0xFF);
        uuid[10] = (uint8_t) ((SMS_MPU_SERVICE_UUID_3 >> 16) & 0xFF);
1000a438:	2630      	movs	r6, #48	; 0x30
        uuid[2] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[4] = (uint8_t) ((SMS_MPU_SERVICE_UUID_2) & 0xFF);
        uuid[5] = (uint8_t) ((SMS_MPU_SERVICE_UUID_2 >> 8) & 0xFF);
        uuid[6] = (uint8_t) ((SMS_MPU_SERVICE_UUID_2 >> 16) & 0xFF);
        uuid[7] = (uint8_t) ((SMS_MPU_SERVICE_UUID_2 >> 24) & 0xFF);
1000a43a:	275a      	movs	r7, #90	; 0x5a
        uuid[1] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[4] = (uint8_t) ((SMS_MPU_SERVICE_UUID_2) & 0xFF);
        uuid[5] = (uint8_t) ((SMS_MPU_SERVICE_UUID_2 >> 8) & 0xFF);
        uuid[6] = (uint8_t) ((SMS_MPU_SERVICE_UUID_2 >> 16) & 0xFF);
1000a43c:	20be      	movs	r0, #190	; 0xbe
        case BLE_SERV_MPU:
        handle = 3;
        uuid[0] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 24) & 0xFF);
1000a43e:	231c      	movs	r3, #28
1000a440:	4698      	mov	r8, r3
        
        case BLE_SERV_MPU:
        handle = 3;
        uuid[0] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 16) & 0xFF);
1000a442:	333b      	adds	r3, #59	; 0x3b
1000a444:	4699      	mov	r9, r3
        uuid[11] = (uint8_t) ((SMS_MPU_SERVICE_UUID_3 >> 24) & 0xFF);
        uuid[12] = (uint8_t) ((SMS_MPU_SERVICE_UUID_4) & 0xFF);
        uuid[13] = (uint8_t) ((SMS_MPU_SERVICE_UUID_4 >> 8) & 0xFF);
        uuid[14] = (uint8_t) ((SMS_MPU_SERVICE_UUID_4 >> 16) & 0xFF);
        uuid[15] = (uint8_t) ((SMS_MPU_SERVICE_UUID_4 >> 24) & 0xFF);
        char_size = 20;
1000a446:	3b43      	subs	r3, #67	; 0x43
1000a448:	9301      	str	r3, [sp, #4]
        uuid[15] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 24) & 0xFF);
        char_size = 8;
        break;
        
        case BLE_SERV_MPU:
        handle = 3;
1000a44a:	3b11      	subs	r3, #17
        uuid[12] = (uint8_t) ((SMS_MPU_SERVICE_UUID_4) & 0xFF);
        uuid[13] = (uint8_t) ((SMS_MPU_SERVICE_UUID_4 >> 8) & 0xFF);
        uuid[14] = (uint8_t) ((SMS_MPU_SERVICE_UUID_4 >> 16) & 0xFF);
        uuid[15] = (uint8_t) ((SMS_MPU_SERVICE_UUID_4 >> 24) & 0xFF);
        char_size = 20;
        break;
1000a44c:	e008      	b.n	1000a460 <sms_ble_service_init+0x78>


void sms_ble_service_init(enum sms_ble_serv_type type, gatt_service_handler_t *service, uint8_t *value)
{
    at_ble_handle_t handle = 0;
    uint8_t uuid[16] = {0};
1000a44e:	2400      	movs	r4, #0
1000a450:	2500      	movs	r5, #0
1000a452:	2600      	movs	r6, #0
1000a454:	2700      	movs	r7, #0
1000a456:	2000      	movs	r0, #0
1000a458:	2300      	movs	r3, #0
1000a45a:	4698      	mov	r8, r3
1000a45c:	4699      	mov	r9, r3
    uint8_t char_size = 0;
1000a45e:	9301      	str	r3, [sp, #4]
        
        default:
        break;
    }
    //SMS button service characteristic
    service->serv_handle = handle;
1000a460:	824b      	strh	r3, [r1, #18]
    service->serv_uuid.type = AT_BLE_UUID_128;
1000a462:	2302      	movs	r3, #2
1000a464:	700b      	strb	r3, [r1, #0]
    service->serv_uuid.uuid[0] = uuid[0];
1000a466:	2300      	movs	r3, #0
1000a468:	704b      	strb	r3, [r1, #1]
    service->serv_uuid.uuid[1] = uuid[1];
1000a46a:	708b      	strb	r3, [r1, #2]
    service->serv_uuid.uuid[2] = uuid[2];
1000a46c:	464a      	mov	r2, r9
1000a46e:	70ca      	strb	r2, [r1, #3]
    service->serv_uuid.uuid[3] = uuid[3];
1000a470:	4642      	mov	r2, r8
1000a472:	710a      	strb	r2, [r1, #4]
    service->serv_uuid.uuid[4] = uuid[4];
1000a474:	714b      	strb	r3, [r1, #5]
    service->serv_uuid.uuid[5] = uuid[5];
1000a476:	718b      	strb	r3, [r1, #6]
    service->serv_uuid.uuid[6] = uuid[6];
1000a478:	71c8      	strb	r0, [r1, #7]
    service->serv_uuid.uuid[7] = uuid[7];
1000a47a:	720f      	strb	r7, [r1, #8]
    service->serv_uuid.uuid[8] = uuid[8];
1000a47c:	724b      	strb	r3, [r1, #9]
    service->serv_uuid.uuid[9] = uuid[9];
1000a47e:	728b      	strb	r3, [r1, #10]
    service->serv_uuid.uuid[10] = uuid[10];
1000a480:	72ce      	strb	r6, [r1, #11]
    service->serv_uuid.uuid[11] = uuid[11];
1000a482:	730d      	strb	r5, [r1, #12]
    service->serv_uuid.uuid[12] = uuid[12];
1000a484:	734b      	strb	r3, [r1, #13]
    service->serv_uuid.uuid[13] = uuid[13];
1000a486:	738b      	strb	r3, [r1, #14]
    service->serv_uuid.uuid[14] = uuid[14];
1000a488:	73cc      	strb	r4, [r1, #15]
    service->serv_uuid.uuid[15] = uuid[15];
1000a48a:	740c      	strb	r4, [r1, #16]
    
    #   if SMS_SENDING_WITH_ACK == true
    service->serv_chars.properties = (AT_BLE_CHAR_READ | AT_BLE_CHAR_INDICATE); // properties
    #   else
    service->serv_chars.properties = (AT_BLE_CHAR_READ | AT_BLE_CHAR_NOTIFY); // properties
1000a48c:	2412      	movs	r4, #18
1000a48e:	850c      	strh	r4, [r1, #40]	; 0x28
    #   endif
    service->serv_chars.init_value = value; // value
1000a490:	4662      	mov	r2, ip
1000a492:	62ca      	str	r2, [r1, #44]	; 0x2c
    service->serv_chars.value_init_len = char_size * sizeof(uint8_t);
1000a494:	466a      	mov	r2, sp
1000a496:	8892      	ldrh	r2, [r2, #4]
1000a498:	860a      	strh	r2, [r1, #48]	; 0x30
    service->serv_chars.value_max_len = char_size * sizeof(uint8_t);
1000a49a:	864a      	strh	r2, [r1, #50]	; 0x32
    service->serv_chars.value_permissions = (AT_BLE_ATTR_READABLE_NO_AUTHN_NO_AUTHR | AT_BLE_ATTR_WRITABLE_NO_AUTHN_NO_AUTHR); // permissions
1000a49c:	2011      	movs	r0, #17
1000a49e:	2234      	movs	r2, #52	; 0x34
1000a4a0:	5488      	strb	r0, [r1, r2]
    service->serv_chars.user_desc = NULL; //user defined name
1000a4a2:	638b      	str	r3, [r1, #56]	; 0x38
    service->serv_chars.user_desc_len = 0;
1000a4a4:	2200      	movs	r2, #0
1000a4a6:	878b      	strh	r3, [r1, #60]	; 0x3c
    service->serv_chars.user_desc_max_len = 0;
1000a4a8:	87cb      	strh	r3, [r1, #62]	; 0x3e
    service->serv_chars.user_desc_permissions = AT_BLE_ATTR_NO_PERMISSIONS; // user description permissions
1000a4aa:	3033      	adds	r0, #51	; 0x33
1000a4ac:	540a      	strb	r2, [r1, r0]
    service->serv_chars.client_config_permissions = AT_BLE_ATTR_NO_PERMISSIONS; // client config permissions
1000a4ae:	3001      	adds	r0, #1
1000a4b0:	540a      	strb	r2, [r1, r0]
    service->serv_chars.server_config_permissions = AT_BLE_ATTR_NO_PERMISSIONS; // server config permissions
1000a4b2:	3001      	adds	r0, #1
1000a4b4:	540a      	strb	r2, [r1, r0]
    service->serv_chars.user_desc_handle = 0; // user description handles
1000a4b6:	2248      	movs	r2, #72	; 0x48
1000a4b8:	528b      	strh	r3, [r1, r2]
    service->serv_chars.client_config_handle = 0; // client config handles
1000a4ba:	3202      	adds	r2, #2
1000a4bc:	528b      	strh	r3, [r1, r2]
    service->serv_chars.server_config_handle = 0; // server config handles
1000a4be:	3202      	adds	r2, #2
1000a4c0:	528b      	strh	r3, [r1, r2]
    
    service->serv_chars.presentation_format = NULL; //presentation format
1000a4c2:	640b      	str	r3, [r1, #64]	; 0x40
1000a4c4:	b003      	add	sp, #12
1000a4c6:	bc0c      	pop	{r2, r3}
1000a4c8:	4690      	mov	r8, r2
1000a4ca:	4699      	mov	r9, r3
1000a4cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a4ce:	46c0      	nop			; (mov r8, r8)

1000a4d0 <sms_button_bt0_callback>:
        gpio_disable_callback(btn1_instance.gpio_pin);
    }
}
/* Callbacks --> sending interrupt message to platform */
void sms_button_bt0_callback(void)
{
1000a4d0:	b510      	push	{r4, lr}
    //gpio_disable_callback(SMS_BTN_0_PIN);
    sms_current_interrupt.source = INT_BTN0;
1000a4d2:	2201      	movs	r2, #1
1000a4d4:	4b04      	ldr	r3, [pc, #16]	; (1000a4e8 <sms_button_bt0_callback+0x18>)
1000a4d6:	701a      	strb	r2, [r3, #0]
    send_plf_int_msg_ind(btn0_instance.gpio_pin, GPIO_CALLBACK_RISING, NULL, 0);
1000a4d8:	4b04      	ldr	r3, [pc, #16]	; (1000a4ec <sms_button_bt0_callback+0x1c>)
1000a4da:	7858      	ldrb	r0, [r3, #1]
1000a4dc:	2300      	movs	r3, #0
1000a4de:	2200      	movs	r2, #0
1000a4e0:	2102      	movs	r1, #2
1000a4e2:	4c03      	ldr	r4, [pc, #12]	; (1000a4f0 <sms_button_bt0_callback+0x20>)
1000a4e4:	47a0      	blx	r4
}
1000a4e6:	bd10      	pop	{r4, pc}
1000a4e8:	10019e9c 	.word	0x10019e9c
1000a4ec:	10019d04 	.word	0x10019d04
1000a4f0:	1000f08d 	.word	0x1000f08d

1000a4f4 <sms_button_bt1_callback>:
void sms_button_bt1_callback(void)
{
1000a4f4:	b510      	push	{r4, lr}
    //gpio_disable_callback(SMS_BTN_1_PIN);
    sms_current_interrupt.source = INT_BTN1;
1000a4f6:	2202      	movs	r2, #2
1000a4f8:	4b04      	ldr	r3, [pc, #16]	; (1000a50c <sms_button_bt1_callback+0x18>)
1000a4fa:	701a      	strb	r2, [r3, #0]
    send_plf_int_msg_ind(btn1_instance.gpio_pin, GPIO_CALLBACK_RISING, NULL, 0);
1000a4fc:	4b04      	ldr	r3, [pc, #16]	; (1000a510 <sms_button_bt1_callback+0x1c>)
1000a4fe:	7858      	ldrb	r0, [r3, #1]
1000a500:	2300      	movs	r3, #0
1000a502:	2200      	movs	r2, #0
1000a504:	2102      	movs	r1, #2
1000a506:	4c03      	ldr	r4, [pc, #12]	; (1000a514 <sms_button_bt1_callback+0x20>)
1000a508:	47a0      	blx	r4
}
1000a50a:	bd10      	pop	{r4, pc}
1000a50c:	10019e9c 	.word	0x10019e9c
1000a510:	10019da0 	.word	0x10019da0
1000a514:	1000f08d 	.word	0x1000f08d

1000a518 <sms_button_configure_gpio>:
/* Callback functions --> doing things                                  */
/************************************************************************/

/* Initialize gpio for button inputs */
void sms_button_configure_gpio(void)
{
1000a518:	b510      	push	{r4, lr}
1000a51a:	b082      	sub	sp, #8
    struct gpio_config config_gpio_pin;

    /* Button0 @ PIN_AO_GPIO_0 */
    gpio_get_config_defaults(&config_gpio_pin);
1000a51c:	ac01      	add	r4, sp, #4
1000a51e:	0020      	movs	r0, r4
1000a520:	4b20      	ldr	r3, [pc, #128]	; (1000a5a4 <sms_button_configure_gpio+0x8c>)
1000a522:	4798      	blx	r3
    config_gpio_pin.direction = GPIO_PIN_DIR_INPUT;
1000a524:	2300      	movs	r3, #0
1000a526:	7023      	strb	r3, [r4, #0]
    config_gpio_pin.input_pull = GPIO_PIN_PULL_DOWN;
1000a528:	3302      	adds	r3, #2
1000a52a:	7063      	strb	r3, [r4, #1]
    config_gpio_pin.aon_wakeup = true;
1000a52c:	3b01      	subs	r3, #1
1000a52e:	70e3      	strb	r3, [r4, #3]
    if(gpio_pin_set_config(btn0_instance.gpio_pin, &config_gpio_pin) != STATUS_OK) {
1000a530:	4b1d      	ldr	r3, [pc, #116]	; (1000a5a8 <sms_button_configure_gpio+0x90>)
1000a532:	7858      	ldrb	r0, [r3, #1]
1000a534:	0021      	movs	r1, r4
1000a536:	4b1d      	ldr	r3, [pc, #116]	; (1000a5ac <sms_button_configure_gpio+0x94>)
1000a538:	4798      	blx	r3
1000a53a:	2800      	cmp	r0, #0
1000a53c:	d005      	beq.n	1000a54a <sms_button_configure_gpio+0x32>
        DBG_LOG_DEV("[sms_button_configure]\tproblem while setting up button0");
1000a53e:	481c      	ldr	r0, [pc, #112]	; (1000a5b0 <sms_button_configure_gpio+0x98>)
1000a540:	4b1c      	ldr	r3, [pc, #112]	; (1000a5b4 <sms_button_configure_gpio+0x9c>)
1000a542:	4798      	blx	r3
1000a544:	481c      	ldr	r0, [pc, #112]	; (1000a5b8 <sms_button_configure_gpio+0xa0>)
1000a546:	4b1d      	ldr	r3, [pc, #116]	; (1000a5bc <sms_button_configure_gpio+0xa4>)
1000a548:	4798      	blx	r3
    }
    
    /* Button1 @ PIN_AO_GPIO_2 */
    gpio_get_config_defaults(&config_gpio_pin);
1000a54a:	ac01      	add	r4, sp, #4
1000a54c:	0020      	movs	r0, r4
1000a54e:	4b15      	ldr	r3, [pc, #84]	; (1000a5a4 <sms_button_configure_gpio+0x8c>)
1000a550:	4798      	blx	r3
    config_gpio_pin.direction = GPIO_PIN_DIR_INPUT;
1000a552:	2300      	movs	r3, #0
1000a554:	7023      	strb	r3, [r4, #0]
    config_gpio_pin.input_pull = GPIO_PIN_PULL_DOWN;
1000a556:	3302      	adds	r3, #2
1000a558:	7063      	strb	r3, [r4, #1]
    config_gpio_pin.aon_wakeup = true;
1000a55a:	3b01      	subs	r3, #1
1000a55c:	70e3      	strb	r3, [r4, #3]
    if(gpio_pin_set_config(btn1_instance.gpio_pin, &config_gpio_pin) != STATUS_OK) {
1000a55e:	4b18      	ldr	r3, [pc, #96]	; (1000a5c0 <sms_button_configure_gpio+0xa8>)
1000a560:	7858      	ldrb	r0, [r3, #1]
1000a562:	0021      	movs	r1, r4
1000a564:	4b11      	ldr	r3, [pc, #68]	; (1000a5ac <sms_button_configure_gpio+0x94>)
1000a566:	4798      	blx	r3
1000a568:	2800      	cmp	r0, #0
1000a56a:	d005      	beq.n	1000a578 <sms_button_configure_gpio+0x60>
        DBG_LOG("[sms_button_configure]\tProblem while setting up button1");
1000a56c:	4810      	ldr	r0, [pc, #64]	; (1000a5b0 <sms_button_configure_gpio+0x98>)
1000a56e:	4b11      	ldr	r3, [pc, #68]	; (1000a5b4 <sms_button_configure_gpio+0x9c>)
1000a570:	4798      	blx	r3
1000a572:	4814      	ldr	r0, [pc, #80]	; (1000a5c4 <sms_button_configure_gpio+0xac>)
1000a574:	4b11      	ldr	r3, [pc, #68]	; (1000a5bc <sms_button_configure_gpio+0xa4>)
1000a576:	4798      	blx	r3
    }

    /* Button 0 on SAMB11 XPLAINED */
    gpio_get_config_defaults(&config_gpio_pin);
1000a578:	ac01      	add	r4, sp, #4
1000a57a:	0020      	movs	r0, r4
1000a57c:	4b09      	ldr	r3, [pc, #36]	; (1000a5a4 <sms_button_configure_gpio+0x8c>)
1000a57e:	4798      	blx	r3
    config_gpio_pin.direction = GPIO_PIN_DIR_INPUT;
1000a580:	2300      	movs	r3, #0
1000a582:	7023      	strb	r3, [r4, #0]
    config_gpio_pin.input_pull = GPIO_PIN_PULL_NONE;
1000a584:	7063      	strb	r3, [r4, #1]
    if(gpio_pin_set_config(BUTTON_0_PIN, &config_gpio_pin) != STATUS_OK) {
1000a586:	0021      	movs	r1, r4
1000a588:	2017      	movs	r0, #23
1000a58a:	4b08      	ldr	r3, [pc, #32]	; (1000a5ac <sms_button_configure_gpio+0x94>)
1000a58c:	4798      	blx	r3
1000a58e:	2800      	cmp	r0, #0
1000a590:	d005      	beq.n	1000a59e <sms_button_configure_gpio+0x86>
        DBG_LOG("[sms_button_configure]\tProblem while setting up XPLAINED user button");
1000a592:	4807      	ldr	r0, [pc, #28]	; (1000a5b0 <sms_button_configure_gpio+0x98>)
1000a594:	4b07      	ldr	r3, [pc, #28]	; (1000a5b4 <sms_button_configure_gpio+0x9c>)
1000a596:	4798      	blx	r3
1000a598:	480b      	ldr	r0, [pc, #44]	; (1000a5c8 <sms_button_configure_gpio+0xb0>)
1000a59a:	4b08      	ldr	r3, [pc, #32]	; (1000a5bc <sms_button_configure_gpio+0xa4>)
1000a59c:	4798      	blx	r3
    }
}
1000a59e:	b002      	add	sp, #8
1000a5a0:	bd10      	pop	{r4, pc}
1000a5a2:	46c0      	nop			; (mov r8, r8)
1000a5a4:	1000bdbd 	.word	0x1000bdbd
1000a5a8:	10019d04 	.word	0x10019d04
1000a5ac:	1000bdcd 	.word	0x1000bdcd
1000a5b0:	10016278 	.word	0x10016278
1000a5b4:	100150d1 	.word	0x100150d1
1000a5b8:	10016890 	.word	0x10016890
1000a5bc:	10014fb1 	.word	0x10014fb1
1000a5c0:	10019da0 	.word	0x10019da0
1000a5c4:	100168c8 	.word	0x100168c8
1000a5c8:	10016900 	.word	0x10016900

1000a5cc <sms_button_register_callbacks>:

/* Register button input callbacks */
void sms_button_register_callbacks(void)
{
1000a5cc:	b510      	push	{r4, lr}
    /* Button0 callback */
    gpio_register_callback(btn0_instance.gpio_pin, sms_button_bt0_callback, GPIO_CALLBACK_RISING);
1000a5ce:	4b06      	ldr	r3, [pc, #24]	; (1000a5e8 <sms_button_register_callbacks+0x1c>)
1000a5d0:	7858      	ldrb	r0, [r3, #1]
1000a5d2:	2202      	movs	r2, #2
1000a5d4:	4905      	ldr	r1, [pc, #20]	; (1000a5ec <sms_button_register_callbacks+0x20>)
1000a5d6:	4c06      	ldr	r4, [pc, #24]	; (1000a5f0 <sms_button_register_callbacks+0x24>)
1000a5d8:	47a0      	blx	r4
    //gpio_enable_callback(SMS_BTN_0_PIN);
    
    /* Button1 callback */
    gpio_register_callback(btn1_instance.gpio_pin, sms_button_bt1_callback, GPIO_CALLBACK_RISING);
1000a5da:	4b06      	ldr	r3, [pc, #24]	; (1000a5f4 <sms_button_register_callbacks+0x28>)
1000a5dc:	7858      	ldrb	r0, [r3, #1]
1000a5de:	2202      	movs	r2, #2
1000a5e0:	4905      	ldr	r1, [pc, #20]	; (1000a5f8 <sms_button_register_callbacks+0x2c>)
1000a5e2:	47a0      	blx	r4
    //gpio_enable_callback(SMS_BTN_1_PIN);
    
    /* User button callback */
}
1000a5e4:	bd10      	pop	{r4, pc}
1000a5e6:	46c0      	nop			; (mov r8, r8)
1000a5e8:	10019d04 	.word	0x10019d04
1000a5ec:	1000a4d1 	.word	0x1000a4d1
1000a5f0:	1000c1fd 	.word	0x1000c1fd
1000a5f4:	10019da0 	.word	0x10019da0
1000a5f8:	1000a4f5 	.word	0x1000a4f5

1000a5fc <sms_button_get_state>:
    gpio_disable_callback(SMS_BTN_1_PIN);
}

/* Get current buttons state */
enum sms_button_state sms_button_get_state(void)
{
1000a5fc:	b570      	push	{r4, r5, r6, lr}
    bool b0 = gpio_pin_get_input_level(SMS_BTN_0_PIN);
1000a5fe:	201f      	movs	r0, #31
1000a600:	4d0c      	ldr	r5, [pc, #48]	; (1000a634 <sms_button_get_state+0x38>)
1000a602:	47a8      	blx	r5
1000a604:	0004      	movs	r4, r0
    bool b1 = gpio_pin_get_input_level(SMS_BTN_1_PIN);
1000a606:	201d      	movs	r0, #29
1000a608:	47a8      	blx	r5
1000a60a:	0005      	movs	r5, r0
1000a60c:	0006      	movs	r6, r0
    DBG_LOG("[sms_button_get_state]\t\tButton state: %d %d", b1, b0);
1000a60e:	480a      	ldr	r0, [pc, #40]	; (1000a638 <sms_button_get_state+0x3c>)
1000a610:	4b0a      	ldr	r3, [pc, #40]	; (1000a63c <sms_button_get_state+0x40>)
1000a612:	4798      	blx	r3
1000a614:	0022      	movs	r2, r4
1000a616:	0029      	movs	r1, r5
1000a618:	4809      	ldr	r0, [pc, #36]	; (1000a640 <sms_button_get_state+0x44>)
1000a61a:	4b0a      	ldr	r3, [pc, #40]	; (1000a644 <sms_button_get_state+0x48>)
1000a61c:	4798      	blx	r3
    if(b0 && b1) return BUTTON_STATE_BOTH;
1000a61e:	2c00      	cmp	r4, #0
1000a620:	d004      	beq.n	1000a62c <sms_button_get_state+0x30>
1000a622:	2003      	movs	r0, #3
1000a624:	2d00      	cmp	r5, #0
1000a626:	d104      	bne.n	1000a632 <sms_button_get_state+0x36>
    else if(b0 && !b1) return BUTTON_STATE_B0;
1000a628:	3802      	subs	r0, #2
1000a62a:	e002      	b.n	1000a632 <sms_button_get_state+0x36>
    else if(!b0 && b1) return BUTTON_STATE_B1;
    else return BUTTON_STATE_NONE;
1000a62c:	1e70      	subs	r0, r6, #1
1000a62e:	4186      	sbcs	r6, r0
1000a630:	0070      	lsls	r0, r6, #1
}
1000a632:	bd70      	pop	{r4, r5, r6, pc}
1000a634:	1000bf85 	.word	0x1000bf85
1000a638:	10016278 	.word	0x10016278
1000a63c:	100150d1 	.word	0x100150d1
1000a640:	10016948 	.word	0x10016948
1000a644:	10014fb1 	.word	0x10014fb1

1000a648 <sms_button_fn>:
/************************************************************************/
/* Callback functions --> doing things                                  */
/************************************************************************/
/* BUTTON_0 */
int sms_button_fn(enum sms_btn_ids btn)
{
1000a648:	b570      	push	{r4, r5, r6, lr}
1000a64a:	0005      	movs	r5, r0
    button_instance.previous_state = button_instance.current_state;
1000a64c:	4c78      	ldr	r4, [pc, #480]	; (1000a830 <sms_button_fn+0x1e8>)
1000a64e:	7863      	ldrb	r3, [r4, #1]
1000a650:	7023      	strb	r3, [r4, #0]
    button_instance.current_state = sms_button_get_state();
1000a652:	4b78      	ldr	r3, [pc, #480]	; (1000a834 <sms_button_fn+0x1ec>)
1000a654:	4798      	blx	r3
1000a656:	7060      	strb	r0, [r4, #1]
    
    if(btn == SMS_BTN_0) sms_monitor_get_states("[sms_button_fn]-0");
1000a658:	2d00      	cmp	r5, #0
1000a65a:	d103      	bne.n	1000a664 <sms_button_fn+0x1c>
1000a65c:	4876      	ldr	r0, [pc, #472]	; (1000a838 <sms_button_fn+0x1f0>)
1000a65e:	4b77      	ldr	r3, [pc, #476]	; (1000a83c <sms_button_fn+0x1f4>)
1000a660:	4798      	blx	r3
1000a662:	e005      	b.n	1000a670 <sms_button_fn+0x28>
    else if(btn == SMS_BTN_1) sms_monitor_get_states("[sms_button_fn]-1");
1000a664:	2d01      	cmp	r5, #1
1000a666:	d000      	beq.n	1000a66a <sms_button_fn+0x22>
1000a668:	e0d4      	b.n	1000a814 <sms_button_fn+0x1cc>
1000a66a:	4875      	ldr	r0, [pc, #468]	; (1000a840 <sms_button_fn+0x1f8>)
1000a66c:	4b73      	ldr	r3, [pc, #460]	; (1000a83c <sms_button_fn+0x1f4>)
1000a66e:	4798      	blx	r3
    else return -1;
    
    switch(button_instance.current_state) {
1000a670:	4b6f      	ldr	r3, [pc, #444]	; (1000a830 <sms_button_fn+0x1e8>)
1000a672:	785b      	ldrb	r3, [r3, #1]
1000a674:	2b01      	cmp	r3, #1
1000a676:	d008      	beq.n	1000a68a <sms_button_fn+0x42>
1000a678:	2b00      	cmp	r3, #0
1000a67a:	d100      	bne.n	1000a67e <sms_button_fn+0x36>
1000a67c:	e0c5      	b.n	1000a80a <sms_button_fn+0x1c2>
1000a67e:	2b02      	cmp	r3, #2
1000a680:	d04b      	beq.n	1000a71a <sms_button_fn+0xd2>
1000a682:	2b03      	cmp	r3, #3
1000a684:	d100      	bne.n	1000a688 <sms_button_fn+0x40>
1000a686:	e08f      	b.n	1000a7a8 <sms_button_fn+0x160>
1000a688:	e0c7      	b.n	1000a81a <sms_button_fn+0x1d2>
        // --- current state ---
        case BUTTON_STATE_B0:
        switch(ble_current_state) {
1000a68a:	4b6e      	ldr	r3, [pc, #440]	; (1000a844 <sms_button_fn+0x1fc>)
1000a68c:	781b      	ldrb	r3, [r3, #0]
1000a68e:	b2db      	uxtb	r3, r3
1000a690:	2b00      	cmp	r3, #0
1000a692:	d003      	beq.n	1000a69c <sms_button_fn+0x54>
1000a694:	3b22      	subs	r3, #34	; 0x22
1000a696:	2b01      	cmp	r3, #1
1000a698:	d836      	bhi.n	1000a708 <sms_button_fn+0xc0>
1000a69a:	e00e      	b.n	1000a6ba <sms_button_fn+0x72>
            case BLE_STATE_POWEROFF:
            timer1_current_mode = TIMER1_MODE_STARTUP;
1000a69c:	2201      	movs	r2, #1
1000a69e:	4b6a      	ldr	r3, [pc, #424]	; (1000a848 <sms_button_fn+0x200>)
1000a6a0:	701a      	strb	r2, [r3, #0]
            timer2_current_mode = TIMER2_MODE_NONE;
1000a6a2:	2300      	movs	r3, #0
1000a6a4:	4a69      	ldr	r2, [pc, #420]	; (1000a84c <sms_button_fn+0x204>)
1000a6a6:	7013      	strb	r3, [r2, #0]
            sms_btn_cnt = 0;
1000a6a8:	4a69      	ldr	r2, [pc, #420]	; (1000a850 <sms_button_fn+0x208>)
1000a6aa:	7013      	strb	r3, [r2, #0]
            //ulp_ready = false;
            sms_dualtimer_start(TIMER_UNIT_MS, SMS_BTN_STARTUP_MS, DUALTIMER_TIMER1);
1000a6ac:	2200      	movs	r2, #0
1000a6ae:	21fa      	movs	r1, #250	; 0xfa
1000a6b0:	2001      	movs	r0, #1
1000a6b2:	4b68      	ldr	r3, [pc, #416]	; (1000a854 <sms_button_fn+0x20c>)
1000a6b4:	4798      	blx	r3
        ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
1000a6b6:	2000      	movs	r0, #0
            timer1_current_mode = TIMER1_MODE_STARTUP;
            timer2_current_mode = TIMER2_MODE_NONE;
            sms_btn_cnt = 0;
            //ulp_ready = false;
            sms_dualtimer_start(TIMER_UNIT_MS, SMS_BTN_STARTUP_MS, DUALTIMER_TIMER1);
            break;
1000a6b8:	e0b9      	b.n	1000a82e <sms_button_fn+0x1e6>
            
            case BLE_STATE_PAIRED:
            case BLE_STATE_INDICATING:
            if(pressure_device.state == PRESSURE_STATE_STDBY) {
1000a6ba:	2328      	movs	r3, #40	; 0x28
1000a6bc:	4a66      	ldr	r2, [pc, #408]	; (1000a858 <sms_button_fn+0x210>)
1000a6be:	5cd3      	ldrb	r3, [r2, r3]
1000a6c0:	2b01      	cmp	r3, #1
1000a6c2:	d109      	bne.n	1000a6d8 <sms_button_fn+0x90>
                DBG_LOG_DEV("[sms_button_fn]\t\tStarting sensors (B0)");
1000a6c4:	4865      	ldr	r0, [pc, #404]	; (1000a85c <sms_button_fn+0x214>)
1000a6c6:	4b66      	ldr	r3, [pc, #408]	; (1000a860 <sms_button_fn+0x218>)
1000a6c8:	4798      	blx	r3
1000a6ca:	4866      	ldr	r0, [pc, #408]	; (1000a864 <sms_button_fn+0x21c>)
1000a6cc:	4b66      	ldr	r3, [pc, #408]	; (1000a868 <sms_button_fn+0x220>)
1000a6ce:	4798      	blx	r3
                sms_sensors_interrupt_toggle(false, true);
1000a6d0:	2101      	movs	r1, #1
1000a6d2:	2000      	movs	r0, #0
1000a6d4:	4b65      	ldr	r3, [pc, #404]	; (1000a86c <sms_button_fn+0x224>)
1000a6d6:	4798      	blx	r3
            }
            timer1_current_mode = TIMER1_MODE_NONE;
1000a6d8:	2300      	movs	r3, #0
1000a6da:	4a5b      	ldr	r2, [pc, #364]	; (1000a848 <sms_button_fn+0x200>)
1000a6dc:	7013      	strb	r3, [r2, #0]
            timer2_current_mode = TIMER2_MODE_NONE;
1000a6de:	4a5b      	ldr	r2, [pc, #364]	; (1000a84c <sms_button_fn+0x204>)
1000a6e0:	7013      	strb	r3, [r2, #0]
            if(btn == btn0_instance.id) sms_ble_send_characteristic(BLE_CHAR_BTN0);
1000a6e2:	4b63      	ldr	r3, [pc, #396]	; (1000a870 <sms_button_fn+0x228>)
1000a6e4:	781b      	ldrb	r3, [r3, #0]
1000a6e6:	42ab      	cmp	r3, r5
1000a6e8:	d104      	bne.n	1000a6f4 <sms_button_fn+0xac>
1000a6ea:	2000      	movs	r0, #0
1000a6ec:	4b61      	ldr	r3, [pc, #388]	; (1000a874 <sms_button_fn+0x22c>)
1000a6ee:	4798      	blx	r3
        ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
1000a6f0:	2000      	movs	r0, #0
1000a6f2:	e09c      	b.n	1000a82e <sms_button_fn+0x1e6>
                sms_sensors_interrupt_toggle(false, true);
            }
            timer1_current_mode = TIMER1_MODE_NONE;
            timer2_current_mode = TIMER2_MODE_NONE;
            if(btn == btn0_instance.id) sms_ble_send_characteristic(BLE_CHAR_BTN0);
            else if(btn == btn1_instance.id) sms_ble_send_characteristic(BLE_CHAR_BTN1);
1000a6f4:	4b60      	ldr	r3, [pc, #384]	; (1000a878 <sms_button_fn+0x230>)
1000a6f6:	781b      	ldrb	r3, [r3, #0]
1000a6f8:	42ab      	cmp	r3, r5
1000a6fa:	d000      	beq.n	1000a6fe <sms_button_fn+0xb6>
1000a6fc:	e08f      	b.n	1000a81e <sms_button_fn+0x1d6>
1000a6fe:	2001      	movs	r0, #1
1000a700:	4b5c      	ldr	r3, [pc, #368]	; (1000a874 <sms_button_fn+0x22c>)
1000a702:	4798      	blx	r3
        ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
1000a704:	2000      	movs	r0, #0
1000a706:	e092      	b.n	1000a82e <sms_button_fn+0x1e6>
            
            case BLE_STATE_DISCONNECTED:
            case BLE_STATE_ADVERTISING:
            case BLE_STATE_CONNECTED:
            default:
            DBG_LOG_DEV("[sms_button_fn]\t\t\tNot used states...");
1000a708:	4854      	ldr	r0, [pc, #336]	; (1000a85c <sms_button_fn+0x214>)
1000a70a:	4b55      	ldr	r3, [pc, #340]	; (1000a860 <sms_button_fn+0x218>)
1000a70c:	4798      	blx	r3
1000a70e:	485b      	ldr	r0, [pc, #364]	; (1000a87c <sms_button_fn+0x234>)
1000a710:	4b55      	ldr	r3, [pc, #340]	; (1000a868 <sms_button_fn+0x220>)
1000a712:	4798      	blx	r3
            return -1;
1000a714:	2001      	movs	r0, #1
1000a716:	4240      	negs	r0, r0
1000a718:	e089      	b.n	1000a82e <sms_button_fn+0x1e6>
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        break;
        
        // --- current state ---
        case BUTTON_STATE_B1:
        switch(ble_current_state) {
1000a71a:	4b4a      	ldr	r3, [pc, #296]	; (1000a844 <sms_button_fn+0x1fc>)
1000a71c:	781b      	ldrb	r3, [r3, #0]
1000a71e:	b2db      	uxtb	r3, r3
1000a720:	2b22      	cmp	r3, #34	; 0x22
1000a722:	d012      	beq.n	1000a74a <sms_button_fn+0x102>
1000a724:	2b23      	cmp	r3, #35	; 0x23
1000a726:	d036      	beq.n	1000a796 <sms_button_fn+0x14e>
1000a728:	2b00      	cmp	r3, #0
1000a72a:	d17b      	bne.n	1000a824 <sms_button_fn+0x1dc>
            case BLE_STATE_POWEROFF:
            timer1_current_mode = TIMER1_MODE_STARTUP;
1000a72c:	2201      	movs	r2, #1
1000a72e:	4b46      	ldr	r3, [pc, #280]	; (1000a848 <sms_button_fn+0x200>)
1000a730:	701a      	strb	r2, [r3, #0]
            timer2_current_mode = TIMER2_MODE_NONE;
1000a732:	2300      	movs	r3, #0
1000a734:	4a45      	ldr	r2, [pc, #276]	; (1000a84c <sms_button_fn+0x204>)
1000a736:	7013      	strb	r3, [r2, #0]
            sms_btn_cnt = 0;
1000a738:	4a45      	ldr	r2, [pc, #276]	; (1000a850 <sms_button_fn+0x208>)
1000a73a:	7013      	strb	r3, [r2, #0]
            //ulp_ready = false;
            sms_dualtimer_start(TIMER_UNIT_MS, SMS_BTN_STARTUP_MS, DUALTIMER_TIMER1);
1000a73c:	2200      	movs	r2, #0
1000a73e:	21fa      	movs	r1, #250	; 0xfa
1000a740:	2001      	movs	r0, #1
1000a742:	4b44      	ldr	r3, [pc, #272]	; (1000a854 <sms_button_fn+0x20c>)
1000a744:	4798      	blx	r3
        ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
1000a746:	2000      	movs	r0, #0
            timer1_current_mode = TIMER1_MODE_STARTUP;
            timer2_current_mode = TIMER2_MODE_NONE;
            sms_btn_cnt = 0;
            //ulp_ready = false;
            sms_dualtimer_start(TIMER_UNIT_MS, SMS_BTN_STARTUP_MS, DUALTIMER_TIMER1);
            break;
1000a748:	e071      	b.n	1000a82e <sms_button_fn+0x1e6>
            
            case BLE_STATE_PAIRED:
            if(pressure_device.state == PRESSURE_STATE_STDBY) {
1000a74a:	2328      	movs	r3, #40	; 0x28
1000a74c:	4a42      	ldr	r2, [pc, #264]	; (1000a858 <sms_button_fn+0x210>)
1000a74e:	5cd3      	ldrb	r3, [r2, r3]
1000a750:	2b01      	cmp	r3, #1
1000a752:	d109      	bne.n	1000a768 <sms_button_fn+0x120>
                DBG_LOG_DEV("[sms_button_fn]\t\tStarting sensors (B1)");
1000a754:	4841      	ldr	r0, [pc, #260]	; (1000a85c <sms_button_fn+0x214>)
1000a756:	4b42      	ldr	r3, [pc, #264]	; (1000a860 <sms_button_fn+0x218>)
1000a758:	4798      	blx	r3
1000a75a:	4849      	ldr	r0, [pc, #292]	; (1000a880 <sms_button_fn+0x238>)
1000a75c:	4b42      	ldr	r3, [pc, #264]	; (1000a868 <sms_button_fn+0x220>)
1000a75e:	4798      	blx	r3
                sms_sensors_interrupt_toggle(false, true);
1000a760:	2101      	movs	r1, #1
1000a762:	2000      	movs	r0, #0
1000a764:	4b41      	ldr	r3, [pc, #260]	; (1000a86c <sms_button_fn+0x224>)
1000a766:	4798      	blx	r3
            }
            timer1_current_mode = TIMER1_MODE_NONE;
1000a768:	2300      	movs	r3, #0
1000a76a:	4a37      	ldr	r2, [pc, #220]	; (1000a848 <sms_button_fn+0x200>)
1000a76c:	7013      	strb	r3, [r2, #0]
            timer2_current_mode = TIMER2_MODE_NONE;
1000a76e:	4a37      	ldr	r2, [pc, #220]	; (1000a84c <sms_button_fn+0x204>)
1000a770:	7013      	strb	r3, [r2, #0]
            //sms_ble_ind_retry = 0;
            if(btn == btn0_instance.id) sms_ble_send_characteristic(BLE_CHAR_BTN0);
1000a772:	4b3f      	ldr	r3, [pc, #252]	; (1000a870 <sms_button_fn+0x228>)
1000a774:	781b      	ldrb	r3, [r3, #0]
1000a776:	42ab      	cmp	r3, r5
1000a778:	d104      	bne.n	1000a784 <sms_button_fn+0x13c>
1000a77a:	2000      	movs	r0, #0
1000a77c:	4b3d      	ldr	r3, [pc, #244]	; (1000a874 <sms_button_fn+0x22c>)
1000a77e:	4798      	blx	r3
        ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
1000a780:	2000      	movs	r0, #0
1000a782:	e054      	b.n	1000a82e <sms_button_fn+0x1e6>
            }
            timer1_current_mode = TIMER1_MODE_NONE;
            timer2_current_mode = TIMER2_MODE_NONE;
            //sms_ble_ind_retry = 0;
            if(btn == btn0_instance.id) sms_ble_send_characteristic(BLE_CHAR_BTN0);
            else if(btn == btn1_instance.id) sms_ble_send_characteristic(BLE_CHAR_BTN1);
1000a784:	4b3c      	ldr	r3, [pc, #240]	; (1000a878 <sms_button_fn+0x230>)
1000a786:	781b      	ldrb	r3, [r3, #0]
1000a788:	42ab      	cmp	r3, r5
1000a78a:	d14e      	bne.n	1000a82a <sms_button_fn+0x1e2>
1000a78c:	2001      	movs	r0, #1
1000a78e:	4b39      	ldr	r3, [pc, #228]	; (1000a874 <sms_button_fn+0x22c>)
1000a790:	4798      	blx	r3
        ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
1000a792:	2000      	movs	r0, #0
1000a794:	e04b      	b.n	1000a82e <sms_button_fn+0x1e6>
            else if(btn == btn1_instance.id) sms_ble_send_characteristic(BLE_CHAR_BTN1);
            else return -1;
            break;
            
            case BLE_STATE_INDICATING:
            DBG_LOG_DEV("[sms_button_fn]\tStill indicating...");
1000a796:	4831      	ldr	r0, [pc, #196]	; (1000a85c <sms_button_fn+0x214>)
1000a798:	4b31      	ldr	r3, [pc, #196]	; (1000a860 <sms_button_fn+0x218>)
1000a79a:	4798      	blx	r3
1000a79c:	4839      	ldr	r0, [pc, #228]	; (1000a884 <sms_button_fn+0x23c>)
1000a79e:	4b32      	ldr	r3, [pc, #200]	; (1000a868 <sms_button_fn+0x220>)
1000a7a0:	4798      	blx	r3
            return -1;
1000a7a2:	2001      	movs	r0, #1
1000a7a4:	4240      	negs	r0, r0
1000a7a6:	e042      	b.n	1000a82e <sms_button_fn+0x1e6>
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        break;
        
        // --- current state ---
        case BUTTON_STATE_BOTH:
        if(ble_current_state == BLE_STATE_POWEROFF) {
1000a7a8:	4b26      	ldr	r3, [pc, #152]	; (1000a844 <sms_button_fn+0x1fc>)
1000a7aa:	781b      	ldrb	r3, [r3, #0]
1000a7ac:	2b00      	cmp	r3, #0
1000a7ae:	d108      	bne.n	1000a7c2 <sms_button_fn+0x17a>
            timer1_current_mode = TIMER1_MODE_NONE;
1000a7b0:	4a25      	ldr	r2, [pc, #148]	; (1000a848 <sms_button_fn+0x200>)
1000a7b2:	7013      	strb	r3, [r2, #0]
            timer2_current_mode = TIMER2_MODE_NONE;
1000a7b4:	4a25      	ldr	r2, [pc, #148]	; (1000a84c <sms_button_fn+0x204>)
1000a7b6:	7013      	strb	r3, [r2, #0]
            ulp_ready = true;
1000a7b8:	2201      	movs	r2, #1
1000a7ba:	4b33      	ldr	r3, [pc, #204]	; (1000a888 <sms_button_fn+0x240>)
1000a7bc:	701a      	strb	r2, [r3, #0]
        ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
1000a7be:	2000      	movs	r0, #0
1000a7c0:	e035      	b.n	1000a82e <sms_button_fn+0x1e6>
            ulp_ready = true;
            //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
            //release_sleep_lock();
        }
        else {
            if((ble_current_state == BLE_STATE_PAIRED) || (ble_current_state == BLE_STATE_INDICATING)) {
1000a7c2:	4b20      	ldr	r3, [pc, #128]	; (1000a844 <sms_button_fn+0x1fc>)
1000a7c4:	781b      	ldrb	r3, [r3, #0]
1000a7c6:	2b22      	cmp	r3, #34	; 0x22
1000a7c8:	d003      	beq.n	1000a7d2 <sms_button_fn+0x18a>
1000a7ca:	4b1e      	ldr	r3, [pc, #120]	; (1000a844 <sms_button_fn+0x1fc>)
1000a7cc:	781b      	ldrb	r3, [r3, #0]
1000a7ce:	2b23      	cmp	r3, #35	; 0x23
1000a7d0:	d104      	bne.n	1000a7dc <sms_button_fn+0x194>
                pressure_device.state = PRESSURE_STATE_STDBY;
1000a7d2:	2101      	movs	r1, #1
1000a7d4:	2328      	movs	r3, #40	; 0x28
1000a7d6:	4a20      	ldr	r2, [pc, #128]	; (1000a858 <sms_button_fn+0x210>)
1000a7d8:	54d1      	strb	r1, [r2, r3]
1000a7da:	e003      	b.n	1000a7e4 <sms_button_fn+0x19c>
            }
            else {
                pressure_device.state = PRESSURE_STATE_OFF;
1000a7dc:	2100      	movs	r1, #0
1000a7de:	2328      	movs	r3, #40	; 0x28
1000a7e0:	4a1d      	ldr	r2, [pc, #116]	; (1000a858 <sms_button_fn+0x210>)
1000a7e2:	54d1      	strb	r1, [r2, r3]
            }
            sms_sensors_interrupt_toggle(false, false);
1000a7e4:	2100      	movs	r1, #0
1000a7e6:	2000      	movs	r0, #0
1000a7e8:	4b20      	ldr	r3, [pc, #128]	; (1000a86c <sms_button_fn+0x224>)
1000a7ea:	4798      	blx	r3
            timer1_current_mode = TIMER1_MODE_SHUTDOWN;
1000a7ec:	2203      	movs	r2, #3
1000a7ee:	4b16      	ldr	r3, [pc, #88]	; (1000a848 <sms_button_fn+0x200>)
1000a7f0:	701a      	strb	r2, [r3, #0]
            timer2_current_mode = TIMER2_MODE_NONE;
1000a7f2:	2300      	movs	r3, #0
1000a7f4:	4a15      	ldr	r2, [pc, #84]	; (1000a84c <sms_button_fn+0x204>)
1000a7f6:	7013      	strb	r3, [r2, #0]
            sms_btn_cnt = 0;
1000a7f8:	4a15      	ldr	r2, [pc, #84]	; (1000a850 <sms_button_fn+0x208>)
1000a7fa:	7013      	strb	r3, [r2, #0]
            //ulp_ready = false;
            sms_dualtimer_start(TIMER_UNIT_MS, SMS_BTN_SHTDWN_MS, DUALTIMER_TIMER1);
1000a7fc:	2200      	movs	r2, #0
1000a7fe:	21fa      	movs	r1, #250	; 0xfa
1000a800:	2001      	movs	r0, #1
1000a802:	4b14      	ldr	r3, [pc, #80]	; (1000a854 <sms_button_fn+0x20c>)
1000a804:	4798      	blx	r3
        ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
1000a806:	2000      	movs	r0, #0
1000a808:	e011      	b.n	1000a82e <sms_button_fn+0x1e6>
        }
        break;
        
        // --- current state ---
        case BUTTON_STATE_NONE:
        ulp_ready = true;
1000a80a:	2201      	movs	r2, #1
1000a80c:	4b1e      	ldr	r3, [pc, #120]	; (1000a888 <sms_button_fn+0x240>)
1000a80e:	701a      	strb	r2, [r3, #0]
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
1000a810:	2000      	movs	r0, #0
        // --- current state ---
        case BUTTON_STATE_NONE:
        ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
1000a812:	e00c      	b.n	1000a82e <sms_button_fn+0x1e6>
    button_instance.previous_state = button_instance.current_state;
    button_instance.current_state = sms_button_get_state();
    
    if(btn == SMS_BTN_0) sms_monitor_get_states("[sms_button_fn]-0");
    else if(btn == SMS_BTN_1) sms_monitor_get_states("[sms_button_fn]-1");
    else return -1;
1000a814:	2001      	movs	r0, #1
1000a816:	4240      	negs	r0, r0
1000a818:	e009      	b.n	1000a82e <sms_button_fn+0x1e6>
        ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
1000a81a:	2000      	movs	r0, #0
1000a81c:	e007      	b.n	1000a82e <sms_button_fn+0x1e6>
            }
            timer1_current_mode = TIMER1_MODE_NONE;
            timer2_current_mode = TIMER2_MODE_NONE;
            if(btn == btn0_instance.id) sms_ble_send_characteristic(BLE_CHAR_BTN0);
            else if(btn == btn1_instance.id) sms_ble_send_characteristic(BLE_CHAR_BTN1);
            else return -1;
1000a81e:	2001      	movs	r0, #1
1000a820:	4240      	negs	r0, r0
1000a822:	e004      	b.n	1000a82e <sms_button_fn+0x1e6>
            
            case BLE_STATE_DISCONNECTED:
            case BLE_STATE_ADVERTISING:
            case BLE_STATE_CONNECTED:
            default:
            return -1;
1000a824:	2001      	movs	r0, #1
1000a826:	4240      	negs	r0, r0
1000a828:	e001      	b.n	1000a82e <sms_button_fn+0x1e6>
            timer1_current_mode = TIMER1_MODE_NONE;
            timer2_current_mode = TIMER2_MODE_NONE;
            //sms_ble_ind_retry = 0;
            if(btn == btn0_instance.id) sms_ble_send_characteristic(BLE_CHAR_BTN0);
            else if(btn == btn1_instance.id) sms_ble_send_characteristic(BLE_CHAR_BTN1);
            else return -1;
1000a82a:	2001      	movs	r0, #1
1000a82c:	4240      	negs	r0, r0
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
}
1000a82e:	bd70      	pop	{r4, r5, r6, pc}
1000a830:	10019da4 	.word	0x10019da4
1000a834:	1000a5fd 	.word	0x1000a5fd
1000a838:	10016974 	.word	0x10016974
1000a83c:	1000a991 	.word	0x1000a991
1000a840:	10016988 	.word	0x10016988
1000a844:	10019eb4 	.word	0x10019eb4
1000a848:	10019d08 	.word	0x10019d08
1000a84c:	10019eb5 	.word	0x10019eb5
1000a850:	10019ed2 	.word	0x10019ed2
1000a854:	1000b291 	.word	0x1000b291
1000a858:	10019e18 	.word	0x10019e18
1000a85c:	10016278 	.word	0x10016278
1000a860:	100150d1 	.word	0x100150d1
1000a864:	1001699c 	.word	0x1001699c
1000a868:	10014fb1 	.word	0x10014fb1
1000a86c:	1000a9ed 	.word	0x1000a9ed
1000a870:	10019d04 	.word	0x10019d04
1000a874:	1000a211 	.word	0x1000a211
1000a878:	10019da0 	.word	0x10019da0
1000a87c:	100169c4 	.word	0x100169c4
1000a880:	100169ec 	.word	0x100169ec
1000a884:	10016a14 	.word	0x10016a14
1000a888:	10019d9d 	.word	0x10019d9d

1000a88c <sms_button_toggle_interrupt>:
    else return BUTTON_STATE_NONE;
}

/* En- or disable button interrupts */
void sms_button_toggle_interrupt(enum sms_btn_int_tog tog0, enum sms_btn_int_tog tog1)
{
1000a88c:	b510      	push	{r4, lr}
1000a88e:	000c      	movs	r4, r1
    if(tog0 == SMS_BTN_INT_ENABLE) {
1000a890:	2800      	cmp	r0, #0
1000a892:	d104      	bne.n	1000a89e <sms_button_toggle_interrupt+0x12>
        gpio_enable_callback(btn0_instance.gpio_pin);
1000a894:	4b0c      	ldr	r3, [pc, #48]	; (1000a8c8 <sms_button_toggle_interrupt+0x3c>)
1000a896:	7858      	ldrb	r0, [r3, #1]
1000a898:	4b0c      	ldr	r3, [pc, #48]	; (1000a8cc <sms_button_toggle_interrupt+0x40>)
1000a89a:	4798      	blx	r3
1000a89c:	e005      	b.n	1000a8aa <sms_button_toggle_interrupt+0x1e>
    }
    else if(tog0 == SMS_BTN_INT_DISABLE) {
1000a89e:	2801      	cmp	r0, #1
1000a8a0:	d103      	bne.n	1000a8aa <sms_button_toggle_interrupt+0x1e>
        gpio_disable_callback(btn0_instance.gpio_pin);
1000a8a2:	4b09      	ldr	r3, [pc, #36]	; (1000a8c8 <sms_button_toggle_interrupt+0x3c>)
1000a8a4:	7858      	ldrb	r0, [r3, #1]
1000a8a6:	4b0a      	ldr	r3, [pc, #40]	; (1000a8d0 <sms_button_toggle_interrupt+0x44>)
1000a8a8:	4798      	blx	r3
    }
    
    if(tog1 == SMS_BTN_INT_ENABLE) {
1000a8aa:	2c00      	cmp	r4, #0
1000a8ac:	d104      	bne.n	1000a8b8 <sms_button_toggle_interrupt+0x2c>
        gpio_enable_callback(btn1_instance.gpio_pin);
1000a8ae:	4b09      	ldr	r3, [pc, #36]	; (1000a8d4 <sms_button_toggle_interrupt+0x48>)
1000a8b0:	7858      	ldrb	r0, [r3, #1]
1000a8b2:	4b06      	ldr	r3, [pc, #24]	; (1000a8cc <sms_button_toggle_interrupt+0x40>)
1000a8b4:	4798      	blx	r3
1000a8b6:	e005      	b.n	1000a8c4 <sms_button_toggle_interrupt+0x38>
    }
    else if(tog1 == SMS_BTN_INT_DISABLE) {
1000a8b8:	2c01      	cmp	r4, #1
1000a8ba:	d103      	bne.n	1000a8c4 <sms_button_toggle_interrupt+0x38>
        gpio_disable_callback(btn1_instance.gpio_pin);
1000a8bc:	4b05      	ldr	r3, [pc, #20]	; (1000a8d4 <sms_button_toggle_interrupt+0x48>)
1000a8be:	7858      	ldrb	r0, [r3, #1]
1000a8c0:	4b03      	ldr	r3, [pc, #12]	; (1000a8d0 <sms_button_toggle_interrupt+0x44>)
1000a8c2:	4798      	blx	r3
    }
}
1000a8c4:	bd10      	pop	{r4, pc}
1000a8c6:	46c0      	nop			; (mov r8, r8)
1000a8c8:	10019d04 	.word	0x10019d04
1000a8cc:	1000c2cd 	.word	0x1000c2cd
1000a8d0:	1000c329 	.word	0x1000c329
1000a8d4:	10019da0 	.word	0x10019da0

1000a8d8 <sms_button_define_services>:
    send_plf_int_msg_ind(btn1_instance.gpio_pin, GPIO_CALLBACK_RISING, NULL, 0);
}

/* Define BLE service for buttons */
void sms_button_define_services(void)
{
1000a8d8:	b510      	push	{r4, lr}
1000a8da:	b082      	sub	sp, #8
    at_ble_status_t status;
    uint8_t init_value = 0;
1000a8dc:	466b      	mov	r3, sp
1000a8de:	1dda      	adds	r2, r3, #7
1000a8e0:	2300      	movs	r3, #0
1000a8e2:	7013      	strb	r3, [r2, #0]
    sms_ble_service_init(BLE_SERV_BUTTON, &button_instance.service_handler, &init_value);
1000a8e4:	4c0d      	ldr	r4, [pc, #52]	; (1000a91c <sms_button_define_services+0x44>)
1000a8e6:	0021      	movs	r1, r4
1000a8e8:	2000      	movs	r0, #0
1000a8ea:	4b0d      	ldr	r3, [pc, #52]	; (1000a920 <sms_button_define_services+0x48>)
1000a8ec:	4798      	blx	r3
    if((status = sms_ble_primary_service_define(&button_instance.service_handler)) != AT_BLE_SUCCESS) {
1000a8ee:	0020      	movs	r0, r4
1000a8f0:	4b0c      	ldr	r3, [pc, #48]	; (1000a924 <sms_button_define_services+0x4c>)
1000a8f2:	4798      	blx	r3
1000a8f4:	1e04      	subs	r4, r0, #0
1000a8f6:	d007      	beq.n	1000a908 <sms_button_define_services+0x30>
        DBG_LOG("[sms_button_define_services]\tServices defining failed, reason 0x%x", status);
1000a8f8:	480b      	ldr	r0, [pc, #44]	; (1000a928 <sms_button_define_services+0x50>)
1000a8fa:	4b0c      	ldr	r3, [pc, #48]	; (1000a92c <sms_button_define_services+0x54>)
1000a8fc:	4798      	blx	r3
1000a8fe:	0021      	movs	r1, r4
1000a900:	480b      	ldr	r0, [pc, #44]	; (1000a930 <sms_button_define_services+0x58>)
1000a902:	4b0c      	ldr	r3, [pc, #48]	; (1000a934 <sms_button_define_services+0x5c>)
1000a904:	4798      	blx	r3
1000a906:	e007      	b.n	1000a918 <sms_button_define_services+0x40>
    }
    else {
        DBG_LOG_DEV("[sms_button_define_services]\tServices defined, SMS button handle: %d", button_instance.service_handler.serv_handle);
1000a908:	4807      	ldr	r0, [pc, #28]	; (1000a928 <sms_button_define_services+0x50>)
1000a90a:	4b08      	ldr	r3, [pc, #32]	; (1000a92c <sms_button_define_services+0x54>)
1000a90c:	4798      	blx	r3
1000a90e:	4b0a      	ldr	r3, [pc, #40]	; (1000a938 <sms_button_define_services+0x60>)
1000a910:	8ad9      	ldrh	r1, [r3, #22]
1000a912:	480a      	ldr	r0, [pc, #40]	; (1000a93c <sms_button_define_services+0x64>)
1000a914:	4b07      	ldr	r3, [pc, #28]	; (1000a934 <sms_button_define_services+0x5c>)
1000a916:	4798      	blx	r3
    }
1000a918:	b002      	add	sp, #8
1000a91a:	bd10      	pop	{r4, pc}
1000a91c:	10019da8 	.word	0x10019da8
1000a920:	1000a3e9 	.word	0x1000a3e9
1000a924:	1000a3c5 	.word	0x1000a3c5
1000a928:	10016278 	.word	0x10016278
1000a92c:	100150d1 	.word	0x100150d1
1000a930:	10016a38 	.word	0x10016a38
1000a934:	10014fb1 	.word	0x10014fb1
1000a938:	10019da4 	.word	0x10019da4
1000a93c:	10016a7c 	.word	0x10016a7c

1000a940 <sms_monitor_configure_gpio>:

#include "sms_common.h"

/* General functions */
void sms_monitor_configure_gpio(void)
{
1000a940:	b510      	push	{r4, lr}
1000a942:	b082      	sub	sp, #8
    struct gpio_config config_gpio_pin;
    gpio_get_config_defaults(&config_gpio_pin);
1000a944:	ac01      	add	r4, sp, #4
1000a946:	0020      	movs	r0, r4
1000a948:	4b0a      	ldr	r3, [pc, #40]	; (1000a974 <sms_monitor_configure_gpio+0x34>)
1000a94a:	4798      	blx	r3
    config_gpio_pin.direction  = GPIO_PIN_DIR_OUTPUT;
1000a94c:	2301      	movs	r3, #1
1000a94e:	7023      	strb	r3, [r4, #0]
    if(gpio_pin_set_config(DBG_PIN_1, &config_gpio_pin) != STATUS_OK) {
1000a950:	0021      	movs	r1, r4
1000a952:	2002      	movs	r0, #2
1000a954:	4b08      	ldr	r3, [pc, #32]	; (1000a978 <sms_monitor_configure_gpio+0x38>)
1000a956:	4798      	blx	r3
1000a958:	2800      	cmp	r0, #0
1000a95a:	d005      	beq.n	1000a968 <sms_monitor_configure_gpio+0x28>
        DBG_LOG("Problem while setting gpio pin");
1000a95c:	4807      	ldr	r0, [pc, #28]	; (1000a97c <sms_monitor_configure_gpio+0x3c>)
1000a95e:	4b08      	ldr	r3, [pc, #32]	; (1000a980 <sms_monitor_configure_gpio+0x40>)
1000a960:	4798      	blx	r3
1000a962:	4808      	ldr	r0, [pc, #32]	; (1000a984 <sms_monitor_configure_gpio+0x44>)
1000a964:	4b08      	ldr	r3, [pc, #32]	; (1000a988 <sms_monitor_configure_gpio+0x48>)
1000a966:	4798      	blx	r3
    }
    gpio_pin_set_output_level(DBG_PIN_1, DBG_PIN_LOW);
1000a968:	2100      	movs	r1, #0
1000a96a:	2002      	movs	r0, #2
1000a96c:	4b07      	ldr	r3, [pc, #28]	; (1000a98c <sms_monitor_configure_gpio+0x4c>)
1000a96e:	4798      	blx	r3
}
1000a970:	b002      	add	sp, #8
1000a972:	bd10      	pop	{r4, pc}
1000a974:	1000bdbd 	.word	0x1000bdbd
1000a978:	1000bdcd 	.word	0x1000bdcd
1000a97c:	10016278 	.word	0x10016278
1000a980:	100150d1 	.word	0x100150d1
1000a984:	10016ac4 	.word	0x10016ac4
1000a988:	10014fb1 	.word	0x10014fb1
1000a98c:	1000c025 	.word	0x1000c025

1000a990 <sms_monitor_get_states>:

void sms_monitor_get_states(const char *label)
{
1000a990:	b570      	push	{r4, r5, r6, lr}
1000a992:	b084      	sub	sp, #16
1000a994:	0004      	movs	r4, r0
    DBG_LOG_DEV("%s...\t\tB-prev %d, B-cur %d, BLE 0x%02x, T1 %d, T2 %d, SMS %d", label, button_instance.previous_state, button_instance.current_state, ble_current_state, timer1_current_mode, timer2_current_mode, sms_working_mode);
1000a996:	480c      	ldr	r0, [pc, #48]	; (1000a9c8 <sms_monitor_get_states+0x38>)
1000a998:	4b0c      	ldr	r3, [pc, #48]	; (1000a9cc <sms_monitor_get_states+0x3c>)
1000a99a:	4798      	blx	r3
1000a99c:	4b0c      	ldr	r3, [pc, #48]	; (1000a9d0 <sms_monitor_get_states+0x40>)
1000a99e:	7819      	ldrb	r1, [r3, #0]
1000a9a0:	4b0c      	ldr	r3, [pc, #48]	; (1000a9d4 <sms_monitor_get_states+0x44>)
1000a9a2:	7818      	ldrb	r0, [r3, #0]
1000a9a4:	4b0c      	ldr	r3, [pc, #48]	; (1000a9d8 <sms_monitor_get_states+0x48>)
1000a9a6:	781d      	ldrb	r5, [r3, #0]
1000a9a8:	4b0c      	ldr	r3, [pc, #48]	; (1000a9dc <sms_monitor_get_states+0x4c>)
1000a9aa:	781e      	ldrb	r6, [r3, #0]
1000a9ac:	4a0c      	ldr	r2, [pc, #48]	; (1000a9e0 <sms_monitor_get_states+0x50>)
1000a9ae:	7853      	ldrb	r3, [r2, #1]
1000a9b0:	7812      	ldrb	r2, [r2, #0]
1000a9b2:	9603      	str	r6, [sp, #12]
1000a9b4:	9502      	str	r5, [sp, #8]
1000a9b6:	9001      	str	r0, [sp, #4]
1000a9b8:	9100      	str	r1, [sp, #0]
1000a9ba:	0021      	movs	r1, r4
1000a9bc:	4809      	ldr	r0, [pc, #36]	; (1000a9e4 <sms_monitor_get_states+0x54>)
1000a9be:	4c0a      	ldr	r4, [pc, #40]	; (1000a9e8 <sms_monitor_get_states+0x58>)
1000a9c0:	47a0      	blx	r4
}
1000a9c2:	b004      	add	sp, #16
1000a9c4:	bd70      	pop	{r4, r5, r6, pc}
1000a9c6:	46c0      	nop			; (mov r8, r8)
1000a9c8:	10016278 	.word	0x10016278
1000a9cc:	100150d1 	.word	0x100150d1
1000a9d0:	10019eb4 	.word	0x10019eb4
1000a9d4:	10019d08 	.word	0x10019d08
1000a9d8:	10019eb5 	.word	0x10019eb5
1000a9dc:	10019d9c 	.word	0x10019d9c
1000a9e0:	10019da4 	.word	0x10019da4
1000a9e4:	10016ae4 	.word	0x10016ae4
1000a9e8:	10014fb1 	.word	0x10014fb1

1000a9ec <sms_sensors_interrupt_toggle>:



/* Sensors-related functions */
void sms_sensors_interrupt_toggle(bool mpu_int, bool press_int) {
1000a9ec:	b510      	push	{r4, lr}
1000a9ee:	000c      	movs	r4, r1
    /* IMU --> IMU_DRDY */
    if(mpu_int) {
1000a9f0:	2800      	cmp	r0, #0
1000a9f2:	d007      	beq.n	1000aa04 <sms_sensors_interrupt_toggle+0x18>
        mpu_device.state = MPU_STATE_ON;
1000a9f4:	2102      	movs	r1, #2
1000a9f6:	2330      	movs	r3, #48	; 0x30
1000a9f8:	4a15      	ldr	r2, [pc, #84]	; (1000aa50 <sms_sensors_interrupt_toggle+0x64>)
1000a9fa:	54d1      	strb	r1, [r2, r3]
        gpio_enable_callback(SMS_MPU_DRDY_PIN);
1000a9fc:	201e      	movs	r0, #30
1000a9fe:	4b15      	ldr	r3, [pc, #84]	; (1000aa54 <sms_sensors_interrupt_toggle+0x68>)
1000aa00:	4798      	blx	r3
1000aa02:	e006      	b.n	1000aa12 <sms_sensors_interrupt_toggle+0x26>
    }
    else {
        mpu_device.state = MPU_STATE_OFF;
1000aa04:	2100      	movs	r1, #0
1000aa06:	2330      	movs	r3, #48	; 0x30
1000aa08:	4a11      	ldr	r2, [pc, #68]	; (1000aa50 <sms_sensors_interrupt_toggle+0x64>)
1000aa0a:	54d1      	strb	r1, [r2, r3]
        gpio_disable_callback(SMS_MPU_DRDY_PIN);
1000aa0c:	201e      	movs	r0, #30
1000aa0e:	4b12      	ldr	r3, [pc, #72]	; (1000aa58 <sms_sensors_interrupt_toggle+0x6c>)
1000aa10:	4798      	blx	r3
     * Note: Since there is no direct mechanism to simply enable and disable
     *       the AON sleep timer interruption, we have to initialize it each
     *       time (and it starts running) and register the corresponding
     *       callback (and it enables the interrupt)
     */
    if(press_int) {
1000aa12:	2c00      	cmp	r4, #0
1000aa14:	d010      	beq.n	1000aa38 <sms_sensors_interrupt_toggle+0x4c>
        pressure_device.ms58_device.current_state = MS58_STATE_CONV_PRESSURE;
1000aa16:	4b11      	ldr	r3, [pc, #68]	; (1000aa5c <sms_sensors_interrupt_toggle+0x70>)
1000aa18:	2103      	movs	r1, #3
1000aa1a:	2225      	movs	r2, #37	; 0x25
1000aa1c:	5499      	strb	r1, [r3, r2]
        pressure_device.state = PRESSURE_STATE_ON;
1000aa1e:	3901      	subs	r1, #1
1000aa20:	3203      	adds	r2, #3
1000aa22:	5499      	strb	r1, [r3, r2]
        sms_timer_aon_init(SMS_PRESSURE_CONVERT_MS, AON_SLEEP_TIMER_RELOAD_MODE);
1000aa24:	2100      	movs	r1, #0
1000aa26:	480e      	ldr	r0, [pc, #56]	; (1000aa60 <sms_sensors_interrupt_toggle+0x74>)
1000aa28:	4b0e      	ldr	r3, [pc, #56]	; (1000aa64 <sms_sensors_interrupt_toggle+0x78>)
1000aa2a:	4798      	blx	r3
        sms_timer_aon_register_callback();
1000aa2c:	4b0e      	ldr	r3, [pc, #56]	; (1000aa68 <sms_sensors_interrupt_toggle+0x7c>)
1000aa2e:	4798      	blx	r3
        sensors_active = true;
1000aa30:	2201      	movs	r2, #1
1000aa32:	4b0e      	ldr	r3, [pc, #56]	; (1000aa6c <sms_sensors_interrupt_toggle+0x80>)
1000aa34:	701a      	strb	r2, [r3, #0]
1000aa36:	e00a      	b.n	1000aa4e <sms_sensors_interrupt_toggle+0x62>
    }
    else {
        pressure_device.ms58_device.current_state = MS58_STATE_READY;
1000aa38:	2102      	movs	r1, #2
1000aa3a:	2325      	movs	r3, #37	; 0x25
1000aa3c:	4a07      	ldr	r2, [pc, #28]	; (1000aa5c <sms_sensors_interrupt_toggle+0x70>)
1000aa3e:	54d1      	strb	r1, [r2, r3]
        sms_timer_aon_disable();
1000aa40:	4b0b      	ldr	r3, [pc, #44]	; (1000aa70 <sms_sensors_interrupt_toggle+0x84>)
1000aa42:	4798      	blx	r3
        sms_timer_aon_unregister_callback();
1000aa44:	4b0b      	ldr	r3, [pc, #44]	; (1000aa74 <sms_sensors_interrupt_toggle+0x88>)
1000aa46:	4798      	blx	r3
        sensors_active = false;
1000aa48:	2200      	movs	r2, #0
1000aa4a:	4b08      	ldr	r3, [pc, #32]	; (1000aa6c <sms_sensors_interrupt_toggle+0x80>)
1000aa4c:	701a      	strb	r2, [r3, #0]
    }
}
1000aa4e:	bd10      	pop	{r4, pc}
1000aa50:	10019d0c 	.word	0x10019d0c
1000aa54:	1000c2cd 	.word	0x1000c2cd
1000aa58:	1000c329 	.word	0x1000c329
1000aa5c:	10019e18 	.word	0x10019e18
1000aa60:	00000cc6 	.word	0x00000cc6
1000aa64:	1000b1d5 	.word	0x1000b1d5
1000aa68:	1000b209 	.word	0x1000b209
1000aa6c:	10019ea8 	.word	0x10019ea8
1000aa70:	1000b1fd 	.word	0x1000b1fd
1000aa74:	1000b229 	.word	0x1000b229

1000aa78 <sms_sensors_switch>:
    

void sms_sensors_switch(bool mpu_en, bool press_en)
{
1000aa78:	b510      	push	{r4, lr}
1000aa7a:	000c      	movs	r4, r1
    /* IMU */
    if(mpu_en) {
1000aa7c:	2800      	cmp	r0, #0
1000aa7e:	d001      	beq.n	1000aa84 <sms_sensors_switch+0xc>
        sms_mpu_initialize();
1000aa80:	4b09      	ldr	r3, [pc, #36]	; (1000aaa8 <sms_sensors_switch+0x30>)
1000aa82:	4798      	blx	r3
    else {
        //gpio_pin_set_output_level(SMS_IMU_VCC_PIN, false);
    }
    
    /* Pressure */
    if(press_en) {                
1000aa84:	2c00      	cmp	r4, #0
1000aa86:	d009      	beq.n	1000aa9c <sms_sensors_switch+0x24>
        pressure_device.ms58_device.current_state = MS58_STATE_RESETTING;
1000aa88:	4b08      	ldr	r3, [pc, #32]	; (1000aaac <sms_sensors_switch+0x34>)
1000aa8a:	2101      	movs	r1, #1
1000aa8c:	2225      	movs	r2, #37	; 0x25
1000aa8e:	5499      	strb	r1, [r3, r2]
        pressure_device.ms58_device.reset_done = false;
1000aa90:	2200      	movs	r2, #0
1000aa92:	705a      	strb	r2, [r3, #1]
        pressure_device.ms58_device.init_ok = false;
1000aa94:	709a      	strb	r2, [r3, #2]
        sms_pressure_startup();
1000aa96:	4b06      	ldr	r3, [pc, #24]	; (1000aab0 <sms_sensors_switch+0x38>)
1000aa98:	4798      	blx	r3
1000aa9a:	e003      	b.n	1000aaa4 <sms_sensors_switch+0x2c>
    }
    else {
        gpio_pin_set_output_level(SMS_PRESSURE_VCC_PIN, false);
1000aa9c:	2100      	movs	r1, #0
1000aa9e:	2007      	movs	r0, #7
1000aaa0:	4b04      	ldr	r3, [pc, #16]	; (1000aab4 <sms_sensors_switch+0x3c>)
1000aaa2:	4798      	blx	r3
    }
}
1000aaa4:	bd10      	pop	{r4, pc}
1000aaa6:	46c0      	nop			; (mov r8, r8)
1000aaa8:	1000ac25 	.word	0x1000ac25
1000aaac:	10019e18 	.word	0x10019e18
1000aab0:	1000af19 	.word	0x1000af19
1000aab4:	1000c025 	.word	0x1000c025

1000aab8 <sms_i2c_master_configure>:
#include <stdlib.h>
#include "sms_i2c.h"


void sms_i2c_master_configure(void)
{
1000aab8:	b530      	push	{r4, r5, lr}
1000aaba:	b087      	sub	sp, #28
    i2c_wpacket.data = malloc(I2C_DATA_LENGTH * sizeof(uint8_t));
1000aabc:	2010      	movs	r0, #16
1000aabe:	4c14      	ldr	r4, [pc, #80]	; (1000ab10 <sms_i2c_master_configure+0x58>)
1000aac0:	47a0      	blx	r4
1000aac2:	4b14      	ldr	r3, [pc, #80]	; (1000ab14 <sms_i2c_master_configure+0x5c>)
1000aac4:	6058      	str	r0, [r3, #4]
    i2c_rpacket.data = malloc(I2C_DATA_LENGTH * sizeof(uint8_t));
1000aac6:	2010      	movs	r0, #16
1000aac8:	47a0      	blx	r4
1000aaca:	4b13      	ldr	r3, [pc, #76]	; (1000ab18 <sms_i2c_master_configure+0x60>)
1000aacc:	6058      	str	r0, [r3, #4]

    struct i2c_master_config config_i2c_master;
    i2c_master_get_config_defaults(&config_i2c_master);
1000aace:	ac01      	add	r4, sp, #4
1000aad0:	0020      	movs	r0, r4
1000aad2:	4b12      	ldr	r3, [pc, #72]	; (1000ab1c <sms_i2c_master_configure+0x64>)
1000aad4:	4798      	blx	r3
    config_i2c_master.clock_source = SMS_I2C_MASTER_CLK_SRC;
1000aad6:	2300      	movs	r3, #0
1000aad8:	7023      	strb	r3, [r4, #0]
    config_i2c_master.clock_divider = SMS_I2C_MASTER_CLK_DIV;
1000aada:	3341      	adds	r3, #65	; 0x41
1000aadc:	8063      	strh	r3, [r4, #2]
    config_i2c_master.pin_number_pad0 = SMS_I2C_MASTER_PIN_SDA;
1000aade:	3b33      	subs	r3, #51	; 0x33
1000aae0:	6063      	str	r3, [r4, #4]
    config_i2c_master.pin_number_pad1 = SMS_I2C_MASTER_PIN_SCL;
1000aae2:	3301      	adds	r3, #1
1000aae4:	60e3      	str	r3, [r4, #12]
    config_i2c_master.pinmux_sel_pad0 = SMS_I2C_MASTER_MUX_SDA;
1000aae6:	3b0b      	subs	r3, #11
1000aae8:	60a3      	str	r3, [r4, #8]
    config_i2c_master.pinmux_sel_pad1 = SMS_I2C_MASTER_MUX_SCL;
1000aaea:	6123      	str	r3, [r4, #16]
    while(i2c_master_init(&i2c_master_instance, SMS_I2C_MASTER_PORT, &config_i2c_master) != STATUS_OK);
1000aaec:	4d0c      	ldr	r5, [pc, #48]	; (1000ab20 <sms_i2c_master_configure+0x68>)
1000aaee:	4c0d      	ldr	r4, [pc, #52]	; (1000ab24 <sms_i2c_master_configure+0x6c>)
1000aaf0:	aa01      	add	r2, sp, #4
1000aaf2:	490d      	ldr	r1, [pc, #52]	; (1000ab28 <sms_i2c_master_configure+0x70>)
1000aaf4:	0028      	movs	r0, r5
1000aaf6:	47a0      	blx	r4
1000aaf8:	2800      	cmp	r0, #0
1000aafa:	d1f9      	bne.n	1000aaf0 <sms_i2c_master_configure+0x38>

    i2c_enable(i2c_master_instance.hw);
1000aafc:	4b08      	ldr	r3, [pc, #32]	; (1000ab20 <sms_i2c_master_configure+0x68>)
1000aafe:	681a      	ldr	r2, [r3, #0]
 *
 * \param[in]  i2c_module  Pointer to software module structure
 */
static inline void i2c_wait_for_idle(I2c *const i2c_module)
{
	while (i2c_module->I2C_STATUS.bit.I2C_ACTIVE) {
1000ab00:	2128      	movs	r1, #40	; 0x28
1000ab02:	5c53      	ldrb	r3, [r2, r1]
1000ab04:	07db      	lsls	r3, r3, #31
1000ab06:	d4fc      	bmi.n	1000ab02 <sms_i2c_master_configure+0x4a>
static inline void i2c_enable(I2c *const i2c_module)
{
	/* Wait for module to sync. */
	i2c_wait_for_idle(i2c_module);
	/* Enable module. */
	i2c_module->I2C_MODULE_ENABLE.reg = (1 << I2C_MODULE_ENABLE_ENABLE_Pos);
1000ab08:	2301      	movs	r3, #1
1000ab0a:	7513      	strb	r3, [r2, #20]
}
1000ab0c:	b007      	add	sp, #28
1000ab0e:	bd30      	pop	{r4, r5, pc}
1000ab10:	10014e25 	.word	0x10014e25
1000ab14:	10019ebc 	.word	0x10019ebc
1000ab18:	10019ea0 	.word	0x10019ea0
1000ab1c:	10008369 	.word	0x10008369
1000ab20:	10019eac 	.word	0x10019eac
1000ab24:	10008381 	.word	0x10008381
1000ab28:	40003400 	.word	0x40003400

1000ab2c <sms_i2c_master_write>:

int sms_i2c_master_write(uint8_t slave_addr, uint8_t reg_addr, uint8_t data_len, uint8_t const *data)
{
1000ab2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    //DBG_LOG("i2c writing to 0x%02x at 0x%02x... data: ", slave_addr, reg_addr);
    uint16_t timeout = 0;
    i2c_wpacket.address = (uint8_t)slave_addr;
1000ab2e:	4c12      	ldr	r4, [pc, #72]	; (1000ab78 <sms_i2c_master_write+0x4c>)
1000ab30:	8020      	strh	r0, [r4, #0]
    i2c_wpacket.data_length = (uint8_t)(data_len + 1);
1000ab32:	1c50      	adds	r0, r2, #1
1000ab34:	b2c0      	uxtb	r0, r0
1000ab36:	8060      	strh	r0, [r4, #2]
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
1000ab38:	6860      	ldr	r0, [r4, #4]
1000ab3a:	7001      	strb	r1, [r0, #0]
    for(uint8_t i = 0; i < data_len; i++) {
1000ab3c:	2a00      	cmp	r2, #0
1000ab3e:	d00e      	beq.n	1000ab5e <sms_i2c_master_write+0x32>
1000ab40:	2000      	movs	r0, #0
1000ab42:	1c41      	adds	r1, r0, #1
        i2c_wpacket.data[i+1] = (uint8_t)data[i];
1000ab44:	5c18      	ldrb	r0, [r3, r0]
1000ab46:	6865      	ldr	r5, [r4, #4]
1000ab48:	5468      	strb	r0, [r5, r1]
1000ab4a:	0008      	movs	r0, r1
    //DBG_LOG("i2c writing to 0x%02x at 0x%02x... data: ", slave_addr, reg_addr);
    uint16_t timeout = 0;
    i2c_wpacket.address = (uint8_t)slave_addr;
    i2c_wpacket.data_length = (uint8_t)(data_len + 1);
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
    for(uint8_t i = 0; i < data_len; i++) {
1000ab4c:	b2c9      	uxtb	r1, r1
1000ab4e:	428a      	cmp	r2, r1
1000ab50:	d8f7      	bhi.n	1000ab42 <sms_i2c_master_write+0x16>
1000ab52:	e004      	b.n	1000ab5e <sms_i2c_master_write+0x32>
1000ab54:	3c01      	subs	r4, #1
1000ab56:	b2a4      	uxth	r4, r4
        i2c_wpacket.data[i+1] = (uint8_t)data[i];
        //DBG_LOG_CONT("0x%02x ", packet.data[i+1]);
    }
    while (i2c_master_write_packet_wait(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) {
        /* Increment timeout counter and check if timed out. */
        if (timeout++ >= I2C_TIMEOUT) {
1000ab58:	2c00      	cmp	r4, #0
1000ab5a:	d104      	bne.n	1000ab66 <sms_i2c_master_write+0x3a>
1000ab5c:	e009      	b.n	1000ab72 <sms_i2c_master_write+0x46>
    //DBG_LOG("i2c writing to 0x%02x at 0x%02x... data: ", slave_addr, reg_addr);
    uint16_t timeout = 0;
    i2c_wpacket.address = (uint8_t)slave_addr;
    i2c_wpacket.data_length = (uint8_t)(data_len + 1);
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
    for(uint8_t i = 0; i < data_len; i++) {
1000ab5e:	4c07      	ldr	r4, [pc, #28]	; (1000ab7c <sms_i2c_master_write+0x50>)
        i2c_wpacket.data[i+1] = (uint8_t)data[i];
        //DBG_LOG_CONT("0x%02x ", packet.data[i+1]);
    }
    while (i2c_master_write_packet_wait(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) {
1000ab60:	4e05      	ldr	r6, [pc, #20]	; (1000ab78 <sms_i2c_master_write+0x4c>)
1000ab62:	4d07      	ldr	r5, [pc, #28]	; (1000ab80 <sms_i2c_master_write+0x54>)
1000ab64:	4f07      	ldr	r7, [pc, #28]	; (1000ab84 <sms_i2c_master_write+0x58>)
1000ab66:	0031      	movs	r1, r6
1000ab68:	0028      	movs	r0, r5
1000ab6a:	47b8      	blx	r7
1000ab6c:	2800      	cmp	r0, #0
1000ab6e:	d1f1      	bne.n	1000ab54 <sms_i2c_master_write+0x28>
1000ab70:	e001      	b.n	1000ab76 <sms_i2c_master_write+0x4a>
        /* Increment timeout counter and check if timed out. */
        if (timeout++ >= I2C_TIMEOUT) {
            return -1;
1000ab72:	2001      	movs	r0, #1
1000ab74:	4240      	negs	r0, r0
        }
    }
    return 0;
}
1000ab76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000ab78:	10019ebc 	.word	0x10019ebc
1000ab7c:	000003e9 	.word	0x000003e9
1000ab80:	10019eac 	.word	0x10019eac
1000ab84:	10008419 	.word	0x10008419

1000ab88 <sms_i2c_master_read>:

int sms_i2c_master_read(uint8_t slave_addr, uint8_t reg_addr, uint8_t data_len, uint8_t *data)
{
1000ab88:	b5f0      	push	{r4, r5, r6, r7, lr}
1000ab8a:	4647      	mov	r7, r8
1000ab8c:	b480      	push	{r7}
1000ab8e:	0017      	movs	r7, r2
1000ab90:	4698      	mov	r8, r3
    //DBG_LOG("i2c reading from 0x%02x at 0x%02x... data: ", slave_addr, reg_addr);
    uint16_t timeout;
    i2c_wpacket.address = (uint8_t)slave_addr;
1000ab92:	b280      	uxth	r0, r0
1000ab94:	4b1d      	ldr	r3, [pc, #116]	; (1000ac0c <sms_i2c_master_read+0x84>)
1000ab96:	8018      	strh	r0, [r3, #0]
    i2c_wpacket.data_length = 1;
1000ab98:	2201      	movs	r2, #1
1000ab9a:	805a      	strh	r2, [r3, #2]
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
1000ab9c:	685b      	ldr	r3, [r3, #4]
1000ab9e:	7019      	strb	r1, [r3, #0]
    i2c_rpacket.address = (uint8_t)slave_addr;
1000aba0:	4b1b      	ldr	r3, [pc, #108]	; (1000ac10 <sms_i2c_master_read+0x88>)
1000aba2:	8018      	strh	r0, [r3, #0]
    i2c_rpacket.data_length = (uint8_t)data_len;
1000aba4:	805f      	strh	r7, [r3, #2]
    
    timeout = 0;
    while(i2c_master_write_packet_wait_no_stop(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) {
1000aba6:	4c1b      	ldr	r4, [pc, #108]	; (1000ac14 <sms_i2c_master_read+0x8c>)
1000aba8:	4e18      	ldr	r6, [pc, #96]	; (1000ac0c <sms_i2c_master_read+0x84>)
1000abaa:	4d1b      	ldr	r5, [pc, #108]	; (1000ac18 <sms_i2c_master_read+0x90>)
1000abac:	e003      	b.n	1000abb6 <sms_i2c_master_read+0x2e>
1000abae:	3c01      	subs	r4, #1
1000abb0:	b2a4      	uxth	r4, r4
        if(timeout++ >= I2C_TIMEOUT) {
1000abb2:	2c00      	cmp	r4, #0
1000abb4:	d01f      	beq.n	1000abf6 <sms_i2c_master_read+0x6e>
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
    i2c_rpacket.address = (uint8_t)slave_addr;
    i2c_rpacket.data_length = (uint8_t)data_len;
    
    timeout = 0;
    while(i2c_master_write_packet_wait_no_stop(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) {
1000abb6:	0031      	movs	r1, r6
1000abb8:	4818      	ldr	r0, [pc, #96]	; (1000ac1c <sms_i2c_master_read+0x94>)
1000abba:	47a8      	blx	r5
1000abbc:	2800      	cmp	r0, #0
1000abbe:	d1f6      	bne.n	1000abae <sms_i2c_master_read+0x26>
1000abc0:	4e14      	ldr	r6, [pc, #80]	; (1000ac14 <sms_i2c_master_read+0x8c>)
            return -1;
        }
    }
    
    timeout = 0;
    while(i2c_master_read_packet_wait(&i2c_master_instance, &i2c_rpacket) != STATUS_OK) {
1000abc2:	4d13      	ldr	r5, [pc, #76]	; (1000ac10 <sms_i2c_master_read+0x88>)
1000abc4:	4c16      	ldr	r4, [pc, #88]	; (1000ac20 <sms_i2c_master_read+0x98>)
1000abc6:	e003      	b.n	1000abd0 <sms_i2c_master_read+0x48>
1000abc8:	3e01      	subs	r6, #1
1000abca:	b2b6      	uxth	r6, r6
        if(timeout++ >= I2C_TIMEOUT) {
1000abcc:	2e00      	cmp	r6, #0
1000abce:	d015      	beq.n	1000abfc <sms_i2c_master_read+0x74>
            return -1;
        }
    }
    
    timeout = 0;
    while(i2c_master_read_packet_wait(&i2c_master_instance, &i2c_rpacket) != STATUS_OK) {
1000abd0:	0029      	movs	r1, r5
1000abd2:	4812      	ldr	r0, [pc, #72]	; (1000ac1c <sms_i2c_master_read+0x94>)
1000abd4:	47a0      	blx	r4
1000abd6:	2800      	cmp	r0, #0
1000abd8:	d1f6      	bne.n	1000abc8 <sms_i2c_master_read+0x40>
        if(timeout++ >= I2C_TIMEOUT) {
            return -1;
        }
    }
    for(uint8_t i = 0; i < data_len; i++) {
1000abda:	2f00      	cmp	r7, #0
1000abdc:	d011      	beq.n	1000ac02 <sms_i2c_master_read+0x7a>
1000abde:	2300      	movs	r3, #0
        data[i] = i2c_rpacket.data[i];
1000abe0:	490b      	ldr	r1, [pc, #44]	; (1000ac10 <sms_i2c_master_read+0x88>)
1000abe2:	684a      	ldr	r2, [r1, #4]
1000abe4:	5cd2      	ldrb	r2, [r2, r3]
1000abe6:	4640      	mov	r0, r8
1000abe8:	54c2      	strb	r2, [r0, r3]
1000abea:	3301      	adds	r3, #1
    while(i2c_master_read_packet_wait(&i2c_master_instance, &i2c_rpacket) != STATUS_OK) {
        if(timeout++ >= I2C_TIMEOUT) {
            return -1;
        }
    }
    for(uint8_t i = 0; i < data_len; i++) {
1000abec:	b2da      	uxtb	r2, r3
1000abee:	4297      	cmp	r7, r2
1000abf0:	d8f7      	bhi.n	1000abe2 <sms_i2c_master_read+0x5a>
        data[i] = i2c_rpacket.data[i];
        //DBG_LOG("0x%02x ", data[i]);
    }
    return 0;
1000abf2:	2000      	movs	r0, #0
1000abf4:	e006      	b.n	1000ac04 <sms_i2c_master_read+0x7c>
    i2c_rpacket.data_length = (uint8_t)data_len;
    
    timeout = 0;
    while(i2c_master_write_packet_wait_no_stop(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) {
        if(timeout++ >= I2C_TIMEOUT) {
            return -1;
1000abf6:	2001      	movs	r0, #1
1000abf8:	4240      	negs	r0, r0
1000abfa:	e003      	b.n	1000ac04 <sms_i2c_master_read+0x7c>
    }
    
    timeout = 0;
    while(i2c_master_read_packet_wait(&i2c_master_instance, &i2c_rpacket) != STATUS_OK) {
        if(timeout++ >= I2C_TIMEOUT) {
            return -1;
1000abfc:	2001      	movs	r0, #1
1000abfe:	4240      	negs	r0, r0
1000ac00:	e000      	b.n	1000ac04 <sms_i2c_master_read+0x7c>
    }
    for(uint8_t i = 0; i < data_len; i++) {
        data[i] = i2c_rpacket.data[i];
        //DBG_LOG("0x%02x ", data[i]);
    }
    return 0;
1000ac02:	2000      	movs	r0, #0
1000ac04:	bc04      	pop	{r2}
1000ac06:	4690      	mov	r8, r2
1000ac08:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000ac0a:	46c0      	nop			; (mov r8, r8)
1000ac0c:	10019ebc 	.word	0x10019ebc
1000ac10:	10019ea0 	.word	0x10019ea0
1000ac14:	000003e9 	.word	0x000003e9
1000ac18:	1000843d 	.word	0x1000843d
1000ac1c:	10019eac 	.word	0x10019eac
1000ac20:	100083f5 	.word	0x100083f5

1000ac24 <sms_mpu_initialize>:
{
    sms_current_interrupt.source = INT_MPU_DRDY;
    send_plf_int_msg_ind(SMS_MPU_DRDY_PIN, GPIO_CALLBACK_RISING, NULL, 0);
}

int sms_mpu_initialize(void) {
1000ac24:	b570      	push	{r4, r5, r6, lr}
    int res;
    //unsigned char accel_fsr = 0;
    //unsigned short gyro_rate, gyro_fsr, compass_fsr;
    
    /* Initialize MPU-9250 without interrupt parameter since this has to be set independently */
    DBG_LOG_DEV("Initializing MPU...");
1000ac26:	4825      	ldr	r0, [pc, #148]	; (1000acbc <sms_mpu_initialize+0x98>)
1000ac28:	4b25      	ldr	r3, [pc, #148]	; (1000acc0 <sms_mpu_initialize+0x9c>)
1000ac2a:	4798      	blx	r3
1000ac2c:	4825      	ldr	r0, [pc, #148]	; (1000acc4 <sms_mpu_initialize+0xa0>)
1000ac2e:	4b26      	ldr	r3, [pc, #152]	; (1000acc8 <sms_mpu_initialize+0xa4>)
1000ac30:	4798      	blx	r3
    res = mpu_init(NULL);
1000ac32:	2000      	movs	r0, #0
1000ac34:	4b25      	ldr	r3, [pc, #148]	; (1000accc <sms_mpu_initialize+0xa8>)
1000ac36:	4798      	blx	r3
    if(res) {
1000ac38:	2800      	cmp	r0, #0
1000ac3a:	d005      	beq.n	1000ac48 <sms_mpu_initialize+0x24>
        DBG_LOG_CONT_DEV(" failed!");
1000ac3c:	4824      	ldr	r0, [pc, #144]	; (1000acd0 <sms_mpu_initialize+0xac>)
1000ac3e:	4b22      	ldr	r3, [pc, #136]	; (1000acc8 <sms_mpu_initialize+0xa4>)
1000ac40:	4798      	blx	r3
        return -1;
1000ac42:	2001      	movs	r0, #1
1000ac44:	4240      	negs	r0, r0
1000ac46:	e037      	b.n	1000acb8 <sms_mpu_initialize+0x94>
    }
    DBG_LOG_DEV("Setting up MPU...");
1000ac48:	481c      	ldr	r0, [pc, #112]	; (1000acbc <sms_mpu_initialize+0x98>)
1000ac4a:	4b1d      	ldr	r3, [pc, #116]	; (1000acc0 <sms_mpu_initialize+0x9c>)
1000ac4c:	4798      	blx	r3
1000ac4e:	4821      	ldr	r0, [pc, #132]	; (1000acd4 <sms_mpu_initialize+0xb0>)
1000ac50:	4b1d      	ldr	r3, [pc, #116]	; (1000acc8 <sms_mpu_initialize+0xa4>)
1000ac52:	4798      	blx	r3
    mpu_set_sensors(INV_XYZ_GYRO | INV_XYZ_ACCEL | INV_XYZ_COMPASS);
1000ac54:	2079      	movs	r0, #121	; 0x79
1000ac56:	4b20      	ldr	r3, [pc, #128]	; (1000acd8 <sms_mpu_initialize+0xb4>)
1000ac58:	4798      	blx	r3
    mpu_configure_fifo(INV_XYZ_GYRO | INV_XYZ_ACCEL);
1000ac5a:	2078      	movs	r0, #120	; 0x78
1000ac5c:	4b1f      	ldr	r3, [pc, #124]	; (1000acdc <sms_mpu_initialize+0xb8>)
1000ac5e:	4798      	blx	r3
    mpu_set_sample_rate(SMS_MPU_SAMPLE_RATE_HZ);
1000ac60:	2014      	movs	r0, #20
1000ac62:	4b1f      	ldr	r3, [pc, #124]	; (1000ace0 <sms_mpu_initialize+0xbc>)
1000ac64:	4798      	blx	r3
    mpu_set_compass_sample_rate(SMS_MPU_COMPASS_RATE_HZ);
1000ac66:	2004      	movs	r0, #4
1000ac68:	4b1e      	ldr	r3, [pc, #120]	; (1000ace4 <sms_mpu_initialize+0xc0>)
1000ac6a:	4798      	blx	r3
    mpu_get_sample_rate(&mpu_device.hal.sample_rate);
1000ac6c:	4d1e      	ldr	r5, [pc, #120]	; (1000ace8 <sms_mpu_initialize+0xc4>)
1000ac6e:	0028      	movs	r0, r5
1000ac70:	4b1e      	ldr	r3, [pc, #120]	; (1000acec <sms_mpu_initialize+0xc8>)
1000ac72:	4798      	blx	r3
    mpu_get_accel_fsr(&mpu_device.hal.accel_fsr);
1000ac74:	1f68      	subs	r0, r5, #5
1000ac76:	4b1e      	ldr	r3, [pc, #120]	; (1000acf0 <sms_mpu_initialize+0xcc>)
1000ac78:	4798      	blx	r3
    mpu_get_compass_fsr(&mpu_device.hal.compass_fsr);
1000ac7a:	1ea8      	subs	r0, r5, #2
1000ac7c:	4b1d      	ldr	r3, [pc, #116]	; (1000acf4 <sms_mpu_initialize+0xd0>)
1000ac7e:	4798      	blx	r3
    
    mpu_device.hal.sensors = (SMS_MPU_ACCEL_ON | SMS_MPU_GYRO_ON | SMS_MPU_COMPASS_ON);
1000ac80:	002c      	movs	r4, r5
1000ac82:	2307      	movs	r3, #7
1000ac84:	76eb      	strb	r3, [r5, #27]
    mpu_device.hal.dmp_features = (DMP_FEATURE_GYRO_CAL | DMP_FEATURE_SEND_RAW_ACCEL | DMP_FEATURE_SEND_ANY_GYRO);
1000ac86:	20f0      	movs	r0, #240	; 0xf0
1000ac88:	0040      	lsls	r0, r0, #1
1000ac8a:	83e8      	strh	r0, [r5, #30]
    mpu_set_compass_sample_rate(SMS_MPU_COMPASS_RATE_HZ);
    mpu_get_sample_rate(&mpu_device.hal.sample_rate);
    mpu_get_accel_fsr(&mpu_device.hal.accel_fsr);
    mpu_get_compass_fsr(&mpu_device.hal.compass_fsr);
    
    mpu_device.hal.sensors = (SMS_MPU_ACCEL_ON | SMS_MPU_GYRO_ON | SMS_MPU_COMPASS_ON);
1000ac8c:	3c0a      	subs	r4, #10
    mpu_device.hal.dmp_features = (DMP_FEATURE_GYRO_CAL | DMP_FEATURE_SEND_RAW_ACCEL | DMP_FEATURE_SEND_ANY_GYRO);
    dmp_enable_feature(mpu_device.hal.dmp_features);
1000ac8e:	4b1a      	ldr	r3, [pc, #104]	; (1000acf8 <sms_mpu_initialize+0xd4>)
1000ac90:	4798      	blx	r3
    dmp_set_fifo_rate(SMS_MPU_SAMPLE_RATE_HZ);
1000ac92:	2014      	movs	r0, #20
1000ac94:	4b19      	ldr	r3, [pc, #100]	; (1000acfc <sms_mpu_initialize+0xd8>)
1000ac96:	4798      	blx	r3
    mpu_set_dmp_state(1);
1000ac98:	2001      	movs	r0, #1
1000ac9a:	4b19      	ldr	r3, [pc, #100]	; (1000ad00 <sms_mpu_initialize+0xdc>)
1000ac9c:	4798      	blx	r3
    mpu_device.hal.dmp_on = 1;
1000ac9e:	2201      	movs	r2, #1
1000aca0:	2326      	movs	r3, #38	; 0x26
1000aca2:	54e2      	strb	r2, [r4, r3]
    mpu_device.temp_cnt = 0;
1000aca4:	2300      	movs	r3, #0
1000aca6:	322c      	adds	r2, #44	; 0x2c
1000aca8:	54a3      	strb	r3, [r4, r2]
    mpu_device.compass_cnt = 0;
1000acaa:	3a01      	subs	r2, #1
1000acac:	54a3      	strb	r3, [r4, r2]
    mpu_device.new_compass = false;
1000acae:	3202      	adds	r2, #2
1000acb0:	54a3      	strb	r3, [r4, r2]
    mpu_device.new_temp = false;
1000acb2:	3201      	adds	r2, #1
1000acb4:	54a3      	strb	r3, [r4, r2]
    
    return 0;
1000acb6:	2000      	movs	r0, #0
}
1000acb8:	bd70      	pop	{r4, r5, r6, pc}
1000acba:	46c0      	nop			; (mov r8, r8)
1000acbc:	10016278 	.word	0x10016278
1000acc0:	100150d1 	.word	0x100150d1
1000acc4:	10016ba4 	.word	0x10016ba4
1000acc8:	10014fb1 	.word	0x10014fb1
1000accc:	100092b1 	.word	0x100092b1
1000acd0:	10016bb8 	.word	0x10016bb8
1000acd4:	10016bc4 	.word	0x10016bc4
1000acd8:	100090c9 	.word	0x100090c9
1000acdc:	10008a85 	.word	0x10008a85
1000ace0:	10008ff5 	.word	0x10008ff5
1000ace4:	10008a0d 	.word	0x10008a0d
1000ace8:	10019d16 	.word	0x10019d16
1000acec:	100089f1 	.word	0x100089f1
1000acf0:	10008855 	.word	0x10008855
1000acf4:	100097b9 	.word	0x100097b9
1000acf8:	10009c29 	.word	0x10009c29
1000acfc:	100097c9 	.word	0x100097c9
1000ad00:	10009659 	.word	0x10009659

1000ad04 <sms_mpu_poll_data>:

/* Extract available IMU data */
int sms_mpu_poll_data(void)
{
1000ad04:	b530      	push	{r4, r5, lr}
1000ad06:	b085      	sub	sp, #20
    short sensors;
    unsigned char more;
    unsigned long sensor_timestamp;
    int res;
    
    mpu_device.hal.new_data = 0;
1000ad08:	4c20      	ldr	r4, [pc, #128]	; (1000ad8c <sms_mpu_poll_data+0x88>)
1000ad0a:	2200      	movs	r2, #0
1000ad0c:	2324      	movs	r3, #36	; 0x24
1000ad0e:	54e2      	strb	r2, [r4, r3]
    
    mpu_read_fifo(mpu_device.hal.gyro, mpu_device.hal.accel, &sensor_timestamp, &sensors, &more);
1000ad10:	0021      	movs	r1, r4
1000ad12:	3112      	adds	r1, #18
1000ad14:	0020      	movs	r0, r4
1000ad16:	300c      	adds	r0, #12
1000ad18:	3b17      	subs	r3, #23
1000ad1a:	446b      	add	r3, sp
1000ad1c:	9300      	str	r3, [sp, #0]
1000ad1e:	230e      	movs	r3, #14
1000ad20:	446b      	add	r3, sp
1000ad22:	aa02      	add	r2, sp, #8
1000ad24:	4d1a      	ldr	r5, [pc, #104]	; (1000ad90 <sms_mpu_poll_data+0x8c>)
1000ad26:	47a8      	blx	r5
    
    //if(more) {
        //mpu_device.hal.new_data = 1;
    //}
    
    if(mpu_device.temp_cnt++ > SMS_MPU_TEMP_MULTIPLIER) {
1000ad28:	232d      	movs	r3, #45	; 0x2d
1000ad2a:	5ce3      	ldrb	r3, [r4, r3]
1000ad2c:	2b14      	cmp	r3, #20
1000ad2e:	d804      	bhi.n	1000ad3a <sms_mpu_poll_data+0x36>
1000ad30:	3301      	adds	r3, #1
1000ad32:	222d      	movs	r2, #45	; 0x2d
1000ad34:	4915      	ldr	r1, [pc, #84]	; (1000ad8c <sms_mpu_poll_data+0x88>)
1000ad36:	548b      	strb	r3, [r1, r2]
1000ad38:	e00b      	b.n	1000ad52 <sms_mpu_poll_data+0x4e>
        mpu_device.temp_cnt = 0;
1000ad3a:	4c14      	ldr	r4, [pc, #80]	; (1000ad8c <sms_mpu_poll_data+0x88>)
1000ad3c:	2200      	movs	r2, #0
1000ad3e:	232d      	movs	r3, #45	; 0x2d
1000ad40:	54e2      	strb	r2, [r4, r3]
        mpu_get_temperature(&mpu_device.hal.temperature, &sensor_timestamp);
1000ad42:	0020      	movs	r0, r4
1000ad44:	3020      	adds	r0, #32
1000ad46:	a902      	add	r1, sp, #8
1000ad48:	4b12      	ldr	r3, [pc, #72]	; (1000ad94 <sms_mpu_poll_data+0x90>)
1000ad4a:	4798      	blx	r3
        mpu_device.new_temp = true;
1000ad4c:	2201      	movs	r2, #1
1000ad4e:	232f      	movs	r3, #47	; 0x2f
1000ad50:	54e2      	strb	r2, [r4, r3]
    }
    
    if(mpu_device.compass_cnt++ > SMS_MPU_COMPASS_MULTIPLIER) {
1000ad52:	232c      	movs	r3, #44	; 0x2c
1000ad54:	4a0d      	ldr	r2, [pc, #52]	; (1000ad8c <sms_mpu_poll_data+0x88>)
1000ad56:	5cd3      	ldrb	r3, [r2, r3]
1000ad58:	2b05      	cmp	r3, #5
1000ad5a:	d804      	bhi.n	1000ad66 <sms_mpu_poll_data+0x62>
1000ad5c:	3301      	adds	r3, #1
1000ad5e:	222c      	movs	r2, #44	; 0x2c
1000ad60:	490a      	ldr	r1, [pc, #40]	; (1000ad8c <sms_mpu_poll_data+0x88>)
1000ad62:	548b      	strb	r3, [r1, r2]
1000ad64:	e00b      	b.n	1000ad7e <sms_mpu_poll_data+0x7a>
        mpu_device.compass_cnt = 0;
1000ad66:	4c09      	ldr	r4, [pc, #36]	; (1000ad8c <sms_mpu_poll_data+0x88>)
1000ad68:	2200      	movs	r2, #0
1000ad6a:	232c      	movs	r3, #44	; 0x2c
1000ad6c:	54e2      	strb	r2, [r4, r3]
        mpu_get_compass_reg(&mpu_device.hal.compass, &sensor_timestamp);
1000ad6e:	0020      	movs	r0, r4
1000ad70:	3018      	adds	r0, #24
1000ad72:	a902      	add	r1, sp, #8
1000ad74:	4b08      	ldr	r3, [pc, #32]	; (1000ad98 <sms_mpu_poll_data+0x94>)
1000ad76:	4798      	blx	r3
        mpu_device.new_compass = true;
1000ad78:	2201      	movs	r2, #1
1000ad7a:	232e      	movs	r3, #46	; 0x2e
1000ad7c:	54e2      	strb	r2, [r4, r3]
    }
    sms_ble_send_characteristic(BLE_CHAR_MPU);    
1000ad7e:	2003      	movs	r0, #3
1000ad80:	4b06      	ldr	r3, [pc, #24]	; (1000ad9c <sms_mpu_poll_data+0x98>)
1000ad82:	4798      	blx	r3

    return 0;
}
1000ad84:	2000      	movs	r0, #0
1000ad86:	b005      	add	sp, #20
1000ad88:	bd30      	pop	{r4, r5, pc}
1000ad8a:	46c0      	nop			; (mov r8, r8)
1000ad8c:	10019d0c 	.word	0x10019d0c
1000ad90:	10008af1 	.word	0x10008af1
1000ad94:	10008505 	.word	0x10008505
1000ad98:	100096fd 	.word	0x100096fd
1000ad9c:	1000a211 	.word	0x1000a211

1000ada0 <sms_mpu_define_services>:

void sms_mpu_define_services(void)
{
1000ada0:	b510      	push	{r4, lr}
1000ada2:	b082      	sub	sp, #8
    at_ble_status_t status;
    uint8_t init_value = 0;
1000ada4:	466b      	mov	r3, sp
1000ada6:	1dda      	adds	r2, r3, #7
1000ada8:	2300      	movs	r3, #0
1000adaa:	7013      	strb	r3, [r2, #0]
    sms_ble_service_init(BLE_SERV_MPU, &mpu_device.service_handler, &init_value);
1000adac:	4c0e      	ldr	r4, [pc, #56]	; (1000ade8 <sms_mpu_define_services+0x48>)
1000adae:	0021      	movs	r1, r4
1000adb0:	2002      	movs	r0, #2
1000adb2:	4b0e      	ldr	r3, [pc, #56]	; (1000adec <sms_mpu_define_services+0x4c>)
1000adb4:	4798      	blx	r3
    if((status = sms_ble_primary_service_define(&mpu_device.service_handler)) != AT_BLE_SUCCESS) {
1000adb6:	0020      	movs	r0, r4
1000adb8:	4b0d      	ldr	r3, [pc, #52]	; (1000adf0 <sms_mpu_define_services+0x50>)
1000adba:	4798      	blx	r3
1000adbc:	1e04      	subs	r4, r0, #0
1000adbe:	d007      	beq.n	1000add0 <sms_mpu_define_services+0x30>
        DBG_LOG("[sms_mpu_define_services]\tServices defining failed, reason 0x%x", status);
1000adc0:	480c      	ldr	r0, [pc, #48]	; (1000adf4 <sms_mpu_define_services+0x54>)
1000adc2:	4b0d      	ldr	r3, [pc, #52]	; (1000adf8 <sms_mpu_define_services+0x58>)
1000adc4:	4798      	blx	r3
1000adc6:	0021      	movs	r1, r4
1000adc8:	480c      	ldr	r0, [pc, #48]	; (1000adfc <sms_mpu_define_services+0x5c>)
1000adca:	4b0d      	ldr	r3, [pc, #52]	; (1000ae00 <sms_mpu_define_services+0x60>)
1000adcc:	4798      	blx	r3
1000adce:	e008      	b.n	1000ade2 <sms_mpu_define_services+0x42>
    }
    else {
        DBG_LOG_DEV("[sms_mpu_define_services]\tServices defined, SMS MPU handle: %d", mpu_device.service_handler.serv_handle);
1000add0:	4808      	ldr	r0, [pc, #32]	; (1000adf4 <sms_mpu_define_services+0x54>)
1000add2:	4b09      	ldr	r3, [pc, #36]	; (1000adf8 <sms_mpu_define_services+0x58>)
1000add4:	4798      	blx	r3
1000add6:	2346      	movs	r3, #70	; 0x46
1000add8:	4a0a      	ldr	r2, [pc, #40]	; (1000ae04 <sms_mpu_define_services+0x64>)
1000adda:	5ad1      	ldrh	r1, [r2, r3]
1000addc:	480a      	ldr	r0, [pc, #40]	; (1000ae08 <sms_mpu_define_services+0x68>)
1000adde:	4b08      	ldr	r3, [pc, #32]	; (1000ae00 <sms_mpu_define_services+0x60>)
1000ade0:	4798      	blx	r3
    }
1000ade2:	b002      	add	sp, #8
1000ade4:	bd10      	pop	{r4, pc}
1000ade6:	46c0      	nop			; (mov r8, r8)
1000ade8:	10019d40 	.word	0x10019d40
1000adec:	1000a3e9 	.word	0x1000a3e9
1000adf0:	1000a3c5 	.word	0x1000a3c5
1000adf4:	10016278 	.word	0x10016278
1000adf8:	100150d1 	.word	0x100150d1
1000adfc:	10016bd8 	.word	0x10016bd8
1000ae00:	10014fb1 	.word	0x10014fb1
1000ae04:	10019d0c 	.word	0x10019d0c
1000ae08:	10016c18 	.word	0x10016c18

1000ae0c <sms_led_switch_on>:
    sms_led_switch_off(SMS_LED_0_PIN);
}


void sms_led_switch_on(enum sms_leds led)
{
1000ae0c:	b510      	push	{r4, lr}
    gpio_pin_set_output_level(led, SMS_LED_ACTIVE);
1000ae0e:	2100      	movs	r1, #0
1000ae10:	4b01      	ldr	r3, [pc, #4]	; (1000ae18 <sms_led_switch_on+0xc>)
1000ae12:	4798      	blx	r3
}
1000ae14:	bd10      	pop	{r4, pc}
1000ae16:	46c0      	nop			; (mov r8, r8)
1000ae18:	1000c025 	.word	0x1000c025

1000ae1c <sms_led_switch_off>:


void sms_led_switch_off(enum sms_leds led)
{
1000ae1c:	b510      	push	{r4, lr}
    gpio_pin_set_output_level(led, SMS_LED_INACTIVE);
1000ae1e:	2101      	movs	r1, #1
1000ae20:	4b01      	ldr	r3, [pc, #4]	; (1000ae28 <sms_led_switch_off+0xc>)
1000ae22:	4798      	blx	r3
}
1000ae24:	bd10      	pop	{r4, pc}
1000ae26:	46c0      	nop			; (mov r8, r8)
1000ae28:	1000c025 	.word	0x1000c025

1000ae2c <sms_led_gpio_init>:
 */ 

#include "sms_led.h"

void sms_led_gpio_init(void)
{
1000ae2c:	b510      	push	{r4, lr}
1000ae2e:	b082      	sub	sp, #8
    struct gpio_config config_gpio_pin;

    /* LED0 @ GPIO_LP_GPIO_22 */
    gpio_get_config_defaults(&config_gpio_pin);
1000ae30:	ac01      	add	r4, sp, #4
1000ae32:	0020      	movs	r0, r4
1000ae34:	4b0a      	ldr	r3, [pc, #40]	; (1000ae60 <sms_led_gpio_init+0x34>)
1000ae36:	4798      	blx	r3
    config_gpio_pin.direction = GPIO_PIN_DIR_OUTPUT;
1000ae38:	2301      	movs	r3, #1
1000ae3a:	7023      	strb	r3, [r4, #0]
    if(gpio_pin_set_config(SMS_LED_0_PIN, &config_gpio_pin) != STATUS_OK) {
1000ae3c:	0021      	movs	r1, r4
1000ae3e:	2016      	movs	r0, #22
1000ae40:	4b08      	ldr	r3, [pc, #32]	; (1000ae64 <sms_led_gpio_init+0x38>)
1000ae42:	4798      	blx	r3
1000ae44:	2800      	cmp	r0, #0
1000ae46:	d005      	beq.n	1000ae54 <sms_led_gpio_init+0x28>
        DBG_LOG_DEV("[sms_led_gpio_init]\tproblem while setting up led0");
1000ae48:	4807      	ldr	r0, [pc, #28]	; (1000ae68 <sms_led_gpio_init+0x3c>)
1000ae4a:	4b08      	ldr	r3, [pc, #32]	; (1000ae6c <sms_led_gpio_init+0x40>)
1000ae4c:	4798      	blx	r3
1000ae4e:	4808      	ldr	r0, [pc, #32]	; (1000ae70 <sms_led_gpio_init+0x44>)
1000ae50:	4b08      	ldr	r3, [pc, #32]	; (1000ae74 <sms_led_gpio_init+0x48>)
1000ae52:	4798      	blx	r3
    }
    sms_led_switch_off(SMS_LED_0_PIN);
1000ae54:	2016      	movs	r0, #22
1000ae56:	4b08      	ldr	r3, [pc, #32]	; (1000ae78 <sms_led_gpio_init+0x4c>)
1000ae58:	4798      	blx	r3
}
1000ae5a:	b002      	add	sp, #8
1000ae5c:	bd10      	pop	{r4, pc}
1000ae5e:	46c0      	nop			; (mov r8, r8)
1000ae60:	1000bdbd 	.word	0x1000bdbd
1000ae64:	1000bdcd 	.word	0x1000bdcd
1000ae68:	10016278 	.word	0x10016278
1000ae6c:	100150d1 	.word	0x100150d1
1000ae70:	10016c58 	.word	0x10016c58
1000ae74:	10014fb1 	.word	0x10014fb1
1000ae78:	1000ae1d 	.word	0x1000ae1d

1000ae7c <sms_led_toggle>:
    gpio_pin_set_output_level(led, SMS_LED_INACTIVE);
}


void sms_led_toggle(enum sms_leds led)
{
1000ae7c:	b510      	push	{r4, lr}
1000ae7e:	0004      	movs	r4, r0
}


bool sms_led_get_state(enum sms_leds led)
{
    return gpio_pin_get_output_level(led);
1000ae80:	4b05      	ldr	r3, [pc, #20]	; (1000ae98 <sms_led_toggle+0x1c>)
1000ae82:	4798      	blx	r3


void sms_led_toggle(enum sms_leds led)
{
    bool state = sms_led_get_state(led);
    if(state == SMS_LED_ACTIVE) sms_led_switch_off(led);
1000ae84:	2800      	cmp	r0, #0
1000ae86:	d103      	bne.n	1000ae90 <sms_led_toggle+0x14>
1000ae88:	0020      	movs	r0, r4
1000ae8a:	4b04      	ldr	r3, [pc, #16]	; (1000ae9c <sms_led_toggle+0x20>)
1000ae8c:	4798      	blx	r3
1000ae8e:	e002      	b.n	1000ae96 <sms_led_toggle+0x1a>
    else sms_led_switch_on(led);
1000ae90:	0020      	movs	r0, r4
1000ae92:	4b03      	ldr	r3, [pc, #12]	; (1000aea0 <sms_led_toggle+0x24>)
1000ae94:	4798      	blx	r3
}
1000ae96:	bd10      	pop	{r4, pc}
1000ae98:	1000bfd5 	.word	0x1000bfd5
1000ae9c:	1000ae1d 	.word	0x1000ae1d
1000aea0:	1000ae0d 	.word	0x1000ae0d

1000aea4 <sms_led_blink_start>:
    return gpio_pin_get_output_level(led);
}


void sms_led_blink_start(enum sms_leds led)
{
1000aea4:	b510      	push	{r4, lr}
    sms_led_switch_on(led);
1000aea6:	4b0c      	ldr	r3, [pc, #48]	; (1000aed8 <sms_led_blink_start+0x34>)
1000aea8:	4798      	blx	r3
    sms_led_blink_cnt = 0;
1000aeaa:	2200      	movs	r2, #0
1000aeac:	4b0b      	ldr	r3, [pc, #44]	; (1000aedc <sms_led_blink_start+0x38>)
1000aeae:	701a      	strb	r2, [r3, #0]
    uint32_t delay = 0;
    switch(timer2_current_mode) {
1000aeb0:	4b0b      	ldr	r3, [pc, #44]	; (1000aee0 <sms_led_blink_start+0x3c>)
1000aeb2:	781b      	ldrb	r3, [r3, #0]
1000aeb4:	b2db      	uxtb	r3, r3
1000aeb6:	2b02      	cmp	r3, #2
1000aeb8:	d002      	beq.n	1000aec0 <sms_led_blink_start+0x1c>
1000aeba:	2b03      	cmp	r3, #3
1000aebc:	d002      	beq.n	1000aec4 <sms_led_blink_start+0x20>
1000aebe:	e004      	b.n	1000aeca <sms_led_blink_start+0x26>
        case TIMER2_MODE_LED_STARTUP:
        delay = SMS_BLINK_STARTUP_MS;
1000aec0:	2164      	movs	r1, #100	; 0x64
1000aec2:	e003      	b.n	1000aecc <sms_led_blink_start+0x28>
        break;
        
        case TIMER2_MODE_LED_SHUTDOWN:
        delay = SMS_BLINK_SHTDWN_MS;
1000aec4:	21c8      	movs	r1, #200	; 0xc8
1000aec6:	0049      	lsls	r1, r1, #1
        break;
1000aec8:	e000      	b.n	1000aecc <sms_led_blink_start+0x28>

void sms_led_blink_start(enum sms_leds led)
{
    sms_led_switch_on(led);
    sms_led_blink_cnt = 0;
    uint32_t delay = 0;
1000aeca:	2100      	movs	r1, #0
        
        default:
        break;
    }

    sms_dualtimer_start(TIMER_UNIT_MS, delay, DUALTIMER_TIMER2);
1000aecc:	2201      	movs	r2, #1
1000aece:	2001      	movs	r0, #1
1000aed0:	4b04      	ldr	r3, [pc, #16]	; (1000aee4 <sms_led_blink_start+0x40>)
1000aed2:	4798      	blx	r3
}
1000aed4:	bd10      	pop	{r4, pc}
1000aed6:	46c0      	nop			; (mov r8, r8)
1000aed8:	1000ae0d 	.word	0x1000ae0d
1000aedc:	10019ed8 	.word	0x10019ed8
1000aee0:	10019eb5 	.word	0x10019eb5
1000aee4:	1000b291 	.word	0x1000b291

1000aee8 <sms_pressure_ms58_reset>:
    }
    return STATUS_ERR_IO;
}

void sms_pressure_ms58_reset(void)
{
1000aee8:	b510      	push	{r4, lr}
1000aeea:	b082      	sub	sp, #8
    //DBG_LOG_DEV("[sms_pressure_ms58_reset]\twriting reset command");
    spi_wdata[0] = MS58_RESET;
1000aeec:	4a05      	ldr	r2, [pc, #20]	; (1000af04 <sms_pressure_ms58_reset+0x1c>)
1000aeee:	231e      	movs	r3, #30
1000aef0:	7013      	strb	r3, [r2, #0]
    sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 1);
1000aef2:	3b1d      	subs	r3, #29
1000aef4:	9300      	str	r3, [sp, #0]
1000aef6:	4b04      	ldr	r3, [pc, #16]	; (1000af08 <sms_pressure_ms58_reset+0x20>)
1000aef8:	4904      	ldr	r1, [pc, #16]	; (1000af0c <sms_pressure_ms58_reset+0x24>)
1000aefa:	4805      	ldr	r0, [pc, #20]	; (1000af10 <sms_pressure_ms58_reset+0x28>)
1000aefc:	4c05      	ldr	r4, [pc, #20]	; (1000af14 <sms_pressure_ms58_reset+0x2c>)
1000aefe:	47a0      	blx	r4
}
1000af00:	b002      	add	sp, #8
1000af02:	bd10      	pop	{r4, pc}
1000af04:	10019e08 	.word	0x10019e08
1000af08:	10019df8 	.word	0x10019df8
1000af0c:	10019eb8 	.word	0x10019eb8
1000af10:	10019ec4 	.word	0x10019ec4
1000af14:	1000b179 	.word	0x1000b179

1000af18 <sms_pressure_startup>:
    gpio_pin_set_output_level(SMS_PRESSURE_VCC_PIN, false);
}


void sms_pressure_startup(void)
{
1000af18:	b510      	push	{r4, lr}
    DBG_LOG_DEV("[sms_pressure_startup]\t\tStarting pressure sensor");
1000af1a:	480d      	ldr	r0, [pc, #52]	; (1000af50 <sms_pressure_startup+0x38>)
1000af1c:	4b0d      	ldr	r3, [pc, #52]	; (1000af54 <sms_pressure_startup+0x3c>)
1000af1e:	4798      	blx	r3
1000af20:	480d      	ldr	r0, [pc, #52]	; (1000af58 <sms_pressure_startup+0x40>)
1000af22:	4b0e      	ldr	r3, [pc, #56]	; (1000af5c <sms_pressure_startup+0x44>)
1000af24:	4798      	blx	r3
    //gpio_pin_set_output_level(SMS_PRESSURE_VCC_PIN, true); // switch on MS58 pressure sensor
    /* Disable buttons for reset time (~3 ms) to avoid conflict with dualtimer1 */
    sms_button_toggle_interrupt(SMS_BTN_INT_DISABLE, SMS_BTN_INT_DISABLE);
1000af26:	2101      	movs	r1, #1
1000af28:	2001      	movs	r0, #1
1000af2a:	4b0d      	ldr	r3, [pc, #52]	; (1000af60 <sms_pressure_startup+0x48>)
1000af2c:	4798      	blx	r3
    pressure_device.ms58_device.current_state = MS58_STATE_RESETTING;
1000af2e:	4b0d      	ldr	r3, [pc, #52]	; (1000af64 <sms_pressure_startup+0x4c>)
1000af30:	2101      	movs	r1, #1
1000af32:	2225      	movs	r2, #37	; 0x25
1000af34:	5499      	strb	r1, [r3, r2]
    pressure_device.ms58_device.reset_done = false;
1000af36:	2200      	movs	r2, #0
1000af38:	705a      	strb	r2, [r3, #1]
    /* Write the reset command to MS58 */
    sms_pressure_ms58_reset();
1000af3a:	4b0b      	ldr	r3, [pc, #44]	; (1000af68 <sms_pressure_startup+0x50>)
1000af3c:	4798      	blx	r3
    timer1_current_mode = TIMER1_MODE_MS58_RESET;
1000af3e:	2202      	movs	r2, #2
1000af40:	4b0a      	ldr	r3, [pc, #40]	; (1000af6c <sms_pressure_startup+0x54>)
1000af42:	701a      	strb	r2, [r3, #0]
    //ulp_ready = false;
    sms_dualtimer_start(TIMER_UNIT_MS, MS58_RESET_WAIT_MS, DUALTIMER_TIMER1);
1000af44:	2200      	movs	r2, #0
1000af46:	2103      	movs	r1, #3
1000af48:	2001      	movs	r0, #1
1000af4a:	4b09      	ldr	r3, [pc, #36]	; (1000af70 <sms_pressure_startup+0x58>)
1000af4c:	4798      	blx	r3
}
1000af4e:	bd10      	pop	{r4, pc}
1000af50:	10016278 	.word	0x10016278
1000af54:	100150d1 	.word	0x100150d1
1000af58:	10016ccc 	.word	0x10016ccc
1000af5c:	10014fb1 	.word	0x10014fb1
1000af60:	1000a88d 	.word	0x1000a88d
1000af64:	10019e18 	.word	0x10019e18
1000af68:	1000aee9 	.word	0x1000aee9
1000af6c:	10019d08 	.word	0x10019d08
1000af70:	1000b291 	.word	0x1000b291

1000af74 <sms_pressure_ms58_read_prom>:
    spi_wdata[0] = MS58_RESET;
    sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 1);
}

enum status_code sms_pressure_ms58_read_prom(void)
{
1000af74:	b5f0      	push	{r4, r5, r6, r7, lr}
1000af76:	4657      	mov	r7, sl
1000af78:	b480      	push	{r7}
1000af7a:	b082      	sub	sp, #8
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] reading bytes... ");
    spi_wdata[0] = MS58_PROM_READ_1;
1000af7c:	4d37      	ldr	r5, [pc, #220]	; (1000b05c <sms_pressure_ms58_read_prom+0xe8>)
1000af7e:	23a2      	movs	r3, #162	; 0xa2
1000af80:	702b      	strb	r3, [r5, #0]
    spi_wdata[1] = 0x00;
1000af82:	2300      	movs	r3, #0
1000af84:	706b      	strb	r3, [r5, #1]
    spi_wdata[2] = 0x00;
1000af86:	70ab      	strb	r3, [r5, #2]
    sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3);
1000af88:	4c35      	ldr	r4, [pc, #212]	; (1000b060 <sms_pressure_ms58_read_prom+0xec>)
1000af8a:	3303      	adds	r3, #3
1000af8c:	469a      	mov	sl, r3
1000af8e:	9300      	str	r3, [sp, #0]
1000af90:	0023      	movs	r3, r4
1000af92:	002a      	movs	r2, r5
1000af94:	4933      	ldr	r1, [pc, #204]	; (1000b064 <sms_pressure_ms58_read_prom+0xf0>)
1000af96:	4834      	ldr	r0, [pc, #208]	; (1000b068 <sms_pressure_ms58_read_prom+0xf4>)
1000af98:	4f34      	ldr	r7, [pc, #208]	; (1000b06c <sms_pressure_ms58_read_prom+0xf8>)
1000af9a:	47b8      	blx	r7
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.ms58_device.prom_values[1] = (spi_rdata[1] << 8) | (spi_rdata[2]);
1000af9c:	4e34      	ldr	r6, [pc, #208]	; (1000b070 <sms_pressure_ms58_read_prom+0xfc>)
1000af9e:	7863      	ldrb	r3, [r4, #1]
1000afa0:	021b      	lsls	r3, r3, #8
1000afa2:	78a2      	ldrb	r2, [r4, #2]
1000afa4:	4313      	orrs	r3, r2
1000afa6:	80f3      	strh	r3, [r6, #6]

    spi_wdata[0] = MS58_PROM_READ_2;
1000afa8:	23a4      	movs	r3, #164	; 0xa4
1000afaa:	702b      	strb	r3, [r5, #0]
    sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3);
1000afac:	4653      	mov	r3, sl
1000afae:	9300      	str	r3, [sp, #0]
1000afb0:	0023      	movs	r3, r4
1000afb2:	002a      	movs	r2, r5
1000afb4:	492b      	ldr	r1, [pc, #172]	; (1000b064 <sms_pressure_ms58_read_prom+0xf0>)
1000afb6:	482c      	ldr	r0, [pc, #176]	; (1000b068 <sms_pressure_ms58_read_prom+0xf4>)
1000afb8:	47b8      	blx	r7
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r  wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r  wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.ms58_device.prom_values[2] = (spi_rdata[1] << 8) | (spi_rdata[2]);
1000afba:	7863      	ldrb	r3, [r4, #1]
1000afbc:	021b      	lsls	r3, r3, #8
1000afbe:	78a2      	ldrb	r2, [r4, #2]
1000afc0:	4313      	orrs	r3, r2
1000afc2:	8133      	strh	r3, [r6, #8]

    spi_wdata[0] = MS58_PROM_READ_3;
1000afc4:	23a6      	movs	r3, #166	; 0xa6
1000afc6:	702b      	strb	r3, [r5, #0]
    sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3);
1000afc8:	4653      	mov	r3, sl
1000afca:	9300      	str	r3, [sp, #0]
1000afcc:	0023      	movs	r3, r4
1000afce:	002a      	movs	r2, r5
1000afd0:	4924      	ldr	r1, [pc, #144]	; (1000b064 <sms_pressure_ms58_read_prom+0xf0>)
1000afd2:	4825      	ldr	r0, [pc, #148]	; (1000b068 <sms_pressure_ms58_read_prom+0xf4>)
1000afd4:	47b8      	blx	r7
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r  wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r  wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.ms58_device.prom_values[3] = (spi_rdata[1] << 8) | (spi_rdata[2]);
1000afd6:	7863      	ldrb	r3, [r4, #1]
1000afd8:	021b      	lsls	r3, r3, #8
1000afda:	78a2      	ldrb	r2, [r4, #2]
1000afdc:	4313      	orrs	r3, r2
1000afde:	8173      	strh	r3, [r6, #10]

    spi_wdata[0] = MS58_PROM_READ_4;
1000afe0:	23a8      	movs	r3, #168	; 0xa8
1000afe2:	702b      	strb	r3, [r5, #0]
    sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3);
1000afe4:	4653      	mov	r3, sl
1000afe6:	9300      	str	r3, [sp, #0]
1000afe8:	0023      	movs	r3, r4
1000afea:	002a      	movs	r2, r5
1000afec:	491d      	ldr	r1, [pc, #116]	; (1000b064 <sms_pressure_ms58_read_prom+0xf0>)
1000afee:	481e      	ldr	r0, [pc, #120]	; (1000b068 <sms_pressure_ms58_read_prom+0xf4>)
1000aff0:	47b8      	blx	r7
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r  wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r  wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.ms58_device.prom_values[4] = (spi_rdata[1] << 8) | (spi_rdata[2]);
1000aff2:	7863      	ldrb	r3, [r4, #1]
1000aff4:	021b      	lsls	r3, r3, #8
1000aff6:	78a2      	ldrb	r2, [r4, #2]
1000aff8:	4313      	orrs	r3, r2
1000affa:	81b3      	strh	r3, [r6, #12]

    spi_wdata[0] = MS58_PROM_READ_5;
1000affc:	23aa      	movs	r3, #170	; 0xaa
1000affe:	702b      	strb	r3, [r5, #0]
    sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3);
1000b000:	4653      	mov	r3, sl
1000b002:	9300      	str	r3, [sp, #0]
1000b004:	0023      	movs	r3, r4
1000b006:	002a      	movs	r2, r5
1000b008:	4916      	ldr	r1, [pc, #88]	; (1000b064 <sms_pressure_ms58_read_prom+0xf0>)
1000b00a:	4817      	ldr	r0, [pc, #92]	; (1000b068 <sms_pressure_ms58_read_prom+0xf4>)
1000b00c:	47b8      	blx	r7
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r  wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r  wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.ms58_device.prom_values[5] = (spi_rdata[1] << 8) | (spi_rdata[2]);
1000b00e:	7863      	ldrb	r3, [r4, #1]
1000b010:	021b      	lsls	r3, r3, #8
1000b012:	78a2      	ldrb	r2, [r4, #2]
1000b014:	4313      	orrs	r3, r2
1000b016:	81f3      	strh	r3, [r6, #14]

    spi_wdata[0] = MS58_PROM_READ_6;
1000b018:	23ac      	movs	r3, #172	; 0xac
1000b01a:	702b      	strb	r3, [r5, #0]
    sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3);
1000b01c:	4653      	mov	r3, sl
1000b01e:	9300      	str	r3, [sp, #0]
1000b020:	0023      	movs	r3, r4
1000b022:	002a      	movs	r2, r5
1000b024:	490f      	ldr	r1, [pc, #60]	; (1000b064 <sms_pressure_ms58_read_prom+0xf0>)
1000b026:	4810      	ldr	r0, [pc, #64]	; (1000b068 <sms_pressure_ms58_read_prom+0xf4>)
1000b028:	47b8      	blx	r7
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r  wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r  wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.ms58_device.prom_values[6] = (spi_rdata[1] << 8) | (spi_rdata[2]);
1000b02a:	7863      	ldrb	r3, [r4, #1]
1000b02c:	021b      	lsls	r3, r3, #8
1000b02e:	78a2      	ldrb	r2, [r4, #2]
1000b030:	4313      	orrs	r3, r2
1000b032:	8233      	strh	r3, [r6, #16]

    spi_wdata[0] = MS58_PROM_READ_7;
1000b034:	23ae      	movs	r3, #174	; 0xae
1000b036:	702b      	strb	r3, [r5, #0]
    sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3);
1000b038:	4653      	mov	r3, sl
1000b03a:	9300      	str	r3, [sp, #0]
1000b03c:	0023      	movs	r3, r4
1000b03e:	002a      	movs	r2, r5
1000b040:	4908      	ldr	r1, [pc, #32]	; (1000b064 <sms_pressure_ms58_read_prom+0xf0>)
1000b042:	4809      	ldr	r0, [pc, #36]	; (1000b068 <sms_pressure_ms58_read_prom+0xf4>)
1000b044:	47b8      	blx	r7
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r  wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r  wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.ms58_device.prom_values[7] = (spi_rdata[1] << 8) | (spi_rdata[2]);
1000b046:	7863      	ldrb	r3, [r4, #1]
1000b048:	021b      	lsls	r3, r3, #8
1000b04a:	78a2      	ldrb	r2, [r4, #2]
1000b04c:	4313      	orrs	r3, r2
1000b04e:	8273      	strh	r3, [r6, #18]
    //for(uint8_t i = 1; i < MS58_PROM_VALUES_MAX; i++) {
        //DBG_LOG_DEV("  C%d -> %d", (i+1), ms58_device.prom_values[i]);
    //}

    return STATUS_OK;
}
1000b050:	2000      	movs	r0, #0
1000b052:	b002      	add	sp, #8
1000b054:	bc04      	pop	{r2}
1000b056:	4692      	mov	sl, r2
1000b058:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000b05a:	46c0      	nop			; (mov r8, r8)
1000b05c:	10019e08 	.word	0x10019e08
1000b060:	10019df8 	.word	0x10019df8
1000b064:	10019eb8 	.word	0x10019eb8
1000b068:	10019ec4 	.word	0x10019ec4
1000b06c:	1000b179 	.word	0x1000b179
1000b070:	10019e18 	.word	0x10019e18

1000b074 <sms_pressure_init>:
    //ulp_ready = false;
    sms_dualtimer_start(TIMER_UNIT_MS, MS58_RESET_WAIT_MS, DUALTIMER_TIMER1);
}

enum status_code sms_pressure_init(void)
{
1000b074:	b510      	push	{r4, lr}
    /* Read the PROM values */
    if(sms_pressure_ms58_read_prom() == STATUS_OK) {
1000b076:	4b06      	ldr	r3, [pc, #24]	; (1000b090 <sms_pressure_init+0x1c>)
1000b078:	4798      	blx	r3
1000b07a:	2800      	cmp	r0, #0
1000b07c:	d106      	bne.n	1000b08c <sms_pressure_init+0x18>
        pressure_device.ms58_device.init_ok = true;
1000b07e:	4b05      	ldr	r3, [pc, #20]	; (1000b094 <sms_pressure_init+0x20>)
1000b080:	2201      	movs	r2, #1
1000b082:	709a      	strb	r2, [r3, #2]
        pressure_device.ms58_device.current_state = MS58_STATE_READY;
1000b084:	2102      	movs	r1, #2
1000b086:	3224      	adds	r2, #36	; 0x24
1000b088:	5499      	strb	r1, [r3, r2]
        /* Enable buttons again */
        //sms_button_toggle_interrupts(SMS_EXTINT_ENABLE);
        return STATUS_OK;
1000b08a:	e000      	b.n	1000b08e <sms_pressure_init+0x1a>
    }
    return STATUS_ERR_IO;
1000b08c:	2010      	movs	r0, #16
}
1000b08e:	bd10      	pop	{r4, pc}
1000b090:	1000af75 	.word	0x1000af75
1000b094:	10019e18 	.word	0x10019e18

1000b098 <sms_pressure_define_services>:
    DBG_LOG_DEV("[sms_pressure_ms58_calculate] temperature = %ld  pressure = %ld", pressure_device.ms58_device.temperature, pressure_device.ms58_device.pressure);
}


void sms_pressure_define_services(void)
{
1000b098:	b510      	push	{r4, lr}
1000b09a:	b082      	sub	sp, #8
    at_ble_status_t status;
    uint8_t init_value = 0;
1000b09c:	466b      	mov	r3, sp
1000b09e:	1dda      	adds	r2, r3, #7
1000b0a0:	2300      	movs	r3, #0
1000b0a2:	7013      	strb	r3, [r2, #0]
    sms_ble_service_init(BLE_SERV_PRESSURE, &pressure_device.service_handler, &init_value);
1000b0a4:	4c0d      	ldr	r4, [pc, #52]	; (1000b0dc <sms_pressure_define_services+0x44>)
1000b0a6:	0021      	movs	r1, r4
1000b0a8:	2001      	movs	r0, #1
1000b0aa:	4b0d      	ldr	r3, [pc, #52]	; (1000b0e0 <sms_pressure_define_services+0x48>)
1000b0ac:	4798      	blx	r3
    if((status = sms_ble_primary_service_define(&pressure_device.service_handler)) != AT_BLE_SUCCESS) {
1000b0ae:	0020      	movs	r0, r4
1000b0b0:	4b0c      	ldr	r3, [pc, #48]	; (1000b0e4 <sms_pressure_define_services+0x4c>)
1000b0b2:	4798      	blx	r3
1000b0b4:	1e04      	subs	r4, r0, #0
1000b0b6:	d007      	beq.n	1000b0c8 <sms_pressure_define_services+0x30>
        DBG_LOG("[sms_pressure_define_services]\tServices defining failed, reason 0x%x", status);
1000b0b8:	480b      	ldr	r0, [pc, #44]	; (1000b0e8 <sms_pressure_define_services+0x50>)
1000b0ba:	4b0c      	ldr	r3, [pc, #48]	; (1000b0ec <sms_pressure_define_services+0x54>)
1000b0bc:	4798      	blx	r3
1000b0be:	0021      	movs	r1, r4
1000b0c0:	480b      	ldr	r0, [pc, #44]	; (1000b0f0 <sms_pressure_define_services+0x58>)
1000b0c2:	4b0c      	ldr	r3, [pc, #48]	; (1000b0f4 <sms_pressure_define_services+0x5c>)
1000b0c4:	4798      	blx	r3
1000b0c6:	e007      	b.n	1000b0d8 <sms_pressure_define_services+0x40>
    }
    else {
        DBG_LOG_DEV("[sms_pressure_define_services]\tServices defined, SMS pressure handle: %d", pressure_device.service_handler.serv_handle);
1000b0c8:	4807      	ldr	r0, [pc, #28]	; (1000b0e8 <sms_pressure_define_services+0x50>)
1000b0ca:	4b08      	ldr	r3, [pc, #32]	; (1000b0ec <sms_pressure_define_services+0x54>)
1000b0cc:	4798      	blx	r3
1000b0ce:	4b0a      	ldr	r3, [pc, #40]	; (1000b0f8 <sms_pressure_define_services+0x60>)
1000b0d0:	8fd9      	ldrh	r1, [r3, #62]	; 0x3e
1000b0d2:	480a      	ldr	r0, [pc, #40]	; (1000b0fc <sms_pressure_define_services+0x64>)
1000b0d4:	4b07      	ldr	r3, [pc, #28]	; (1000b0f4 <sms_pressure_define_services+0x5c>)
1000b0d6:	4798      	blx	r3
    }
1000b0d8:	b002      	add	sp, #8
1000b0da:	bd10      	pop	{r4, pc}
1000b0dc:	10019e44 	.word	0x10019e44
1000b0e0:	1000a3e9 	.word	0x1000a3e9
1000b0e4:	1000a3c5 	.word	0x1000a3c5
1000b0e8:	10016278 	.word	0x10016278
1000b0ec:	100150d1 	.word	0x100150d1
1000b0f0:	10016da8 	.word	0x10016da8
1000b0f4:	10014fb1 	.word	0x10014fb1
1000b0f8:	10019e18 	.word	0x10019e18
1000b0fc:	10016df0 	.word	0x10016df0

1000b100 <sms_spi_master_configure>:
 *   + mode 3 on SPI0 @ 1 MHz for MPU-9250 IMU
 * - assign SS pin for each slave device
 * - enable SPI
 */ 
void sms_spi_master_configure(void)
{
1000b100:	b530      	push	{r4, r5, lr}
1000b102:	b08d      	sub	sp, #52	; 0x34
    //DBG_LOG_DEV("[spi_master_configure]\tconfiguring SPI masters and attaching slaves...");

    /* Initialize ms58 spi slave device */
    struct spi_config spi_master_config;
    struct spi_slave_inst_config spi_slave_ms58_config;
    spi_slave_inst_get_config_defaults(&spi_slave_ms58_config);
1000b104:	ac01      	add	r4, sp, #4
1000b106:	0020      	movs	r0, r4
1000b108:	4b13      	ldr	r3, [pc, #76]	; (1000b158 <sms_spi_master_configure+0x58>)
1000b10a:	4798      	blx	r3
    spi_slave_ms58_config.ss_pin = SMS_PRESSURE_SPI_SS_PIN;
1000b10c:	2310      	movs	r3, #16
1000b10e:	7023      	strb	r3, [r4, #0]
    spi_attach_slave(&spi_slave_ms58_instance, &spi_slave_ms58_config);
1000b110:	0021      	movs	r1, r4
1000b112:	4812      	ldr	r0, [pc, #72]	; (1000b15c <sms_spi_master_configure+0x5c>)
1000b114:	4b12      	ldr	r3, [pc, #72]	; (1000b160 <sms_spi_master_configure+0x60>)
1000b116:	4798      	blx	r3
    

    /* Initialize SPI1 master for ms58 */
    spi_get_config_defaults(&spi_master_config);
1000b118:	ac02      	add	r4, sp, #8
1000b11a:	0020      	movs	r0, r4
1000b11c:	4b11      	ldr	r3, [pc, #68]	; (1000b164 <sms_spi_master_configure+0x64>)
1000b11e:	4798      	blx	r3
    spi_master_config.clock_divider = SPI_MASTER_MS58_CLOCK_DIV;
1000b120:	2368      	movs	r3, #104	; 0x68
1000b122:	7123      	strb	r3, [r4, #4]
    spi_master_config.transfer_mode = SPI_MASTER_MS58_MODE;
1000b124:	2300      	movs	r3, #0
1000b126:	70a3      	strb	r3, [r4, #2]
    spi_master_config.pin_number_pad[0] = SPI_MASTER_MS58_PIN_SCK;
1000b128:	3311      	adds	r3, #17
1000b12a:	60a3      	str	r3, [r4, #8]
    spi_master_config.pinmux_sel_pad[0] = SPI_MASTER_MS58_MUX_SCK;
1000b12c:	3b0d      	subs	r3, #13
1000b12e:	61a3      	str	r3, [r4, #24]
    spi_master_config.pin_number_pad[1] = SPI_MASTER_MS58_PIN_MOSI;
1000b130:	2213      	movs	r2, #19
1000b132:	60e2      	str	r2, [r4, #12]
    spi_master_config.pinmux_sel_pad[1] = SPI_MASTER_MS58_MUX_MOSI;
1000b134:	61e3      	str	r3, [r4, #28]
    spi_master_config.pin_number_pad[2] = SPI_MASTER_MS58_PIN_SSN;
1000b136:	3a14      	subs	r2, #20
1000b138:	6122      	str	r2, [r4, #16]
    spi_master_config.pinmux_sel_pad[2] = SPI_MASTER_MS58_MUX_SSN;
1000b13a:	6222      	str	r2, [r4, #32]
    spi_master_config.pin_number_pad[3] = SPI_MASTER_MS58_MISO;
1000b13c:	3213      	adds	r2, #19
1000b13e:	6162      	str	r2, [r4, #20]
    spi_master_config.pinmux_sel_pad[3] = SPI_MASTER_MS58_MUX_MISO;
1000b140:	6263      	str	r3, [r4, #36]	; 0x24
    spi_init(&spi_master_ms58_instance, SPI_MASTER_MS58_PORT, &spi_master_config);
1000b142:	4d09      	ldr	r5, [pc, #36]	; (1000b168 <sms_spi_master_configure+0x68>)
1000b144:	0022      	movs	r2, r4
1000b146:	4909      	ldr	r1, [pc, #36]	; (1000b16c <sms_spi_master_configure+0x6c>)
1000b148:	0028      	movs	r0, r5
1000b14a:	4b09      	ldr	r3, [pc, #36]	; (1000b170 <sms_spi_master_configure+0x70>)
1000b14c:	4798      	blx	r3
    spi_enable(&spi_master_ms58_instance);
1000b14e:	0028      	movs	r0, r5
1000b150:	4b08      	ldr	r3, [pc, #32]	; (1000b174 <sms_spi_master_configure+0x74>)
1000b152:	4798      	blx	r3
}
1000b154:	b00d      	add	sp, #52	; 0x34
1000b156:	bd30      	pop	{r4, r5, pc}
1000b158:	1000b76d 	.word	0x1000b76d
1000b15c:	10019eb8 	.word	0x10019eb8
1000b160:	1000b7a5 	.word	0x1000b7a5
1000b164:	1000b779 	.word	0x1000b779
1000b168:	10019ec4 	.word	0x10019ec4
1000b16c:	40007000 	.word	0x40007000
1000b170:	1000b875 	.word	0x1000b875
1000b174:	1000b7e5 	.word	0x1000b7e5

1000b178 <sms_spi_master_transceive>:
/* SPI transceive function:
 * - enable selected slave
 * - start transceive blocking job
 * - when job returned, disable selected slave
 */
enum status_code sms_spi_master_transceive(struct spi_module *const module, struct spi_slave_inst *const slave, uint8_t *tx_data, uint8_t *rx_data, uint16_t len) {
1000b178:	b5f0      	push	{r4, r5, r6, r7, lr}
1000b17a:	b083      	sub	sp, #12
1000b17c:	0004      	movs	r4, r0
1000b17e:	000d      	movs	r5, r1
1000b180:	9200      	str	r2, [sp, #0]
1000b182:	9301      	str	r3, [sp, #4]
1000b184:	ab08      	add	r3, sp, #32
1000b186:	881e      	ldrh	r6, [r3, #0]
    enum status_code retVal;
    /* Enable slave */
    //DBG_LOG_CONT_DEV(" selecting slave...");
    spi_select_slave(module, slave, true);
1000b188:	2201      	movs	r2, #1
1000b18a:	4f08      	ldr	r7, [pc, #32]	; (1000b1ac <sms_spi_master_transceive+0x34>)
1000b18c:	47b8      	blx	r7
    /* Write SPI data */
    //DBG_LOG_CONT_DEV(" writing data...");
    retVal = spi_transceive_buffer_wait(module, tx_data, rx_data, len);
1000b18e:	0033      	movs	r3, r6
1000b190:	9a01      	ldr	r2, [sp, #4]
1000b192:	9900      	ldr	r1, [sp, #0]
1000b194:	0020      	movs	r0, r4
1000b196:	4e06      	ldr	r6, [pc, #24]	; (1000b1b0 <sms_spi_master_transceive+0x38>)
1000b198:	47b0      	blx	r6
1000b19a:	0006      	movs	r6, r0
    /* Disable slave */
    //DBG_LOG_CONT_DEV(" de-selecting slave...");
    spi_select_slave(module, slave, false);
1000b19c:	2200      	movs	r2, #0
1000b19e:	0029      	movs	r1, r5
1000b1a0:	0020      	movs	r0, r4
1000b1a2:	47b8      	blx	r7
    //DBG_LOG_CONT_DEV(" done!");
    return retVal;
}
1000b1a4:	0030      	movs	r0, r6
1000b1a6:	b003      	add	sp, #12
1000b1a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000b1aa:	46c0      	nop			; (mov r8, r8)
1000b1ac:	1000ba5d 	.word	0x1000ba5d
1000b1b0:	1000b9d9 	.word	0x1000b9d9

1000b1b4 <sms_timer_aon_callback>:

#include "sms_timer.h"

/* AON SLEEP TIMER */
void sms_timer_aon_callback(void)
{
1000b1b4:	b510      	push	{r4, lr}
    sms_current_interrupt.source = INT_AON_TIMER;
1000b1b6:	2204      	movs	r2, #4
1000b1b8:	4b04      	ldr	r3, [pc, #16]	; (1000b1cc <sms_timer_aon_callback+0x18>)
1000b1ba:	701a      	strb	r2, [r3, #0]
    send_plf_int_msg_ind(AON_SLEEP_TIMER_EXPIRY_CALLBACK, AON_TIMER_EXPIRED, NULL, 0);
1000b1bc:	2300      	movs	r3, #0
1000b1be:	2200      	movs	r2, #0
1000b1c0:	2103      	movs	r1, #3
1000b1c2:	2042      	movs	r0, #66	; 0x42
1000b1c4:	4c02      	ldr	r4, [pc, #8]	; (1000b1d0 <sms_timer_aon_callback+0x1c>)
1000b1c6:	47a0      	blx	r4
}
1000b1c8:	bd10      	pop	{r4, pc}
1000b1ca:	46c0      	nop			; (mov r8, r8)
1000b1cc:	10019e9c 	.word	0x10019e9c
1000b1d0:	1000f08d 	.word	0x1000f08d

1000b1d4 <sms_timer_aon_init>:

void sms_timer_aon_init(uint32_t cnt, enum aon_sleep_timer_mode cnt_mode)
{
1000b1d4:	b530      	push	{r4, r5, lr}
1000b1d6:	b083      	sub	sp, #12
1000b1d8:	0004      	movs	r4, r0
1000b1da:	000d      	movs	r5, r1
    struct aon_sleep_timer_config config_aon_sleep_timer;
    aon_sleep_timer_get_config_defaults(&config_aon_sleep_timer);
1000b1dc:	4668      	mov	r0, sp
1000b1de:	4b05      	ldr	r3, [pc, #20]	; (1000b1f4 <sms_timer_aon_init+0x20>)
1000b1e0:	4798      	blx	r3
    config_aon_sleep_timer.mode = cnt_mode;
1000b1e2:	466b      	mov	r3, sp
1000b1e4:	705d      	strb	r5, [r3, #1]
    config_aon_sleep_timer.counter = cnt;
1000b1e6:	9401      	str	r4, [sp, #4]
    aon_sleep_timer_init(&config_aon_sleep_timer);
1000b1e8:	4668      	mov	r0, sp
1000b1ea:	4b03      	ldr	r3, [pc, #12]	; (1000b1f8 <sms_timer_aon_init+0x24>)
1000b1ec:	4798      	blx	r3
}
1000b1ee:	b003      	add	sp, #12
1000b1f0:	bd30      	pop	{r4, r5, pc}
1000b1f2:	46c0      	nop			; (mov r8, r8)
1000b1f4:	10008155 	.word	0x10008155
1000b1f8:	100081c9 	.word	0x100081c9

1000b1fc <sms_timer_aon_disable>:

void sms_timer_aon_disable(void)
{
1000b1fc:	b510      	push	{r4, lr}
    aon_sleep_timer_disable();
1000b1fe:	4b01      	ldr	r3, [pc, #4]	; (1000b204 <sms_timer_aon_disable+0x8>)
1000b200:	4798      	blx	r3
}
1000b202:	bd10      	pop	{r4, pc}
1000b204:	10008165 	.word	0x10008165

1000b208 <sms_timer_aon_register_callback>:

void sms_timer_aon_register_callback(void)
{
1000b208:	b510      	push	{r4, lr}
    aon_sleep_timer_register_callback(sms_timer_aon_callback);
1000b20a:	4804      	ldr	r0, [pc, #16]	; (1000b21c <sms_timer_aon_register_callback+0x14>)
1000b20c:	4b04      	ldr	r3, [pc, #16]	; (1000b220 <sms_timer_aon_register_callback+0x18>)
1000b20e:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000b210:	2280      	movs	r2, #128	; 0x80
1000b212:	0512      	lsls	r2, r2, #20
1000b214:	4b03      	ldr	r3, [pc, #12]	; (1000b224 <sms_timer_aon_register_callback+0x1c>)
1000b216:	601a      	str	r2, [r3, #0]
    NVIC_EnableIRQ(AON_SLEEP_TIMER0_IRQn);
}
1000b218:	bd10      	pop	{r4, pc}
1000b21a:	46c0      	nop			; (mov r8, r8)
1000b21c:	1000b1b5 	.word	0x1000b1b5
1000b220:	100081b1 	.word	0x100081b1
1000b224:	e000e100 	.word	0xe000e100

1000b228 <sms_timer_aon_unregister_callback>:

void sms_timer_aon_unregister_callback(void)
{
1000b228:	b510      	push	{r4, lr}
    aon_sleep_timer_unregister_callback();
1000b22a:	4b04      	ldr	r3, [pc, #16]	; (1000b23c <sms_timer_aon_unregister_callback+0x14>)
1000b22c:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000b22e:	2180      	movs	r1, #128	; 0x80
1000b230:	0509      	lsls	r1, r1, #20
1000b232:	2380      	movs	r3, #128	; 0x80
1000b234:	4a02      	ldr	r2, [pc, #8]	; (1000b240 <sms_timer_aon_unregister_callback+0x18>)
1000b236:	50d1      	str	r1, [r2, r3]
    NVIC_DisableIRQ(AON_SLEEP_TIMER0_IRQn);
}
1000b238:	bd10      	pop	{r4, pc}
1000b23a:	46c0      	nop			; (mov r8, r8)
1000b23c:	100081bd 	.word	0x100081bd
1000b240:	e000e100 	.word	0xe000e100

1000b244 <sms_timer_aon_get_ms>:

void sms_timer_aon_get_ms(uint32_t *count)
{
    count = (uint32_t *)0;
}
1000b244:	4770      	bx	lr
1000b246:	46c0      	nop			; (mov r8, r8)

1000b248 <sms_dualtimer_init>:

/* DUALTIMER */
void sms_dualtimer_init(void)
{
1000b248:	b510      	push	{r4, lr}
1000b24a:	b088      	sub	sp, #32
    struct dualtimer_config config_dualtimer;
    dualtimer_get_config_defaults(&config_dualtimer);
1000b24c:	ac01      	add	r4, sp, #4
1000b24e:	0020      	movs	r0, r4
1000b250:	4b0a      	ldr	r3, [pc, #40]	; (1000b27c <sms_dualtimer_init+0x34>)
1000b252:	4798      	blx	r3

    config_dualtimer.timer1.load_value = SMS_DUALTIMER_LOAD_MS;
1000b254:	4b0a      	ldr	r3, [pc, #40]	; (1000b280 <sms_dualtimer_init+0x38>)
1000b256:	60a3      	str	r3, [r4, #8]
    config_dualtimer.timer1.counter_mode = DUALTIMER_FREE_RUNNING_MODE;
1000b258:	2301      	movs	r3, #1
1000b25a:	7063      	strb	r3, [r4, #1]
    config_dualtimer.timer1.interrup_enable = false;
1000b25c:	2300      	movs	r3, #0
1000b25e:	7123      	strb	r3, [r4, #4]
    config_dualtimer.timer2.load_value = SMS_DUALTIMER_LOAD_S;
1000b260:	4a08      	ldr	r2, [pc, #32]	; (1000b284 <sms_dualtimer_init+0x3c>)
1000b262:	6162      	str	r2, [r4, #20]
    config_dualtimer.timer2.counter_mode = DUALTIMER_ONE_SHOT_MODE;
1000b264:	7363      	strb	r3, [r4, #13]

    dualtimer_init(&config_dualtimer);
1000b266:	0020      	movs	r0, r4
1000b268:	4b07      	ldr	r3, [pc, #28]	; (1000b288 <sms_dualtimer_init+0x40>)
1000b26a:	4798      	blx	r3
    dualtimer_disable(DUALTIMER_TIMER1);
1000b26c:	2000      	movs	r0, #0
1000b26e:	4c07      	ldr	r4, [pc, #28]	; (1000b28c <sms_dualtimer_init+0x44>)
1000b270:	47a0      	blx	r4
    dualtimer_disable(DUALTIMER_TIMER2);
1000b272:	2001      	movs	r0, #1
1000b274:	47a0      	blx	r4
}
1000b276:	b008      	add	sp, #32
1000b278:	bd10      	pop	{r4, pc}
1000b27a:	46c0      	nop			; (mov r8, r8)
1000b27c:	1000bac1 	.word	0x1000bac1
1000b280:	00006590 	.word	0x00006590
1000b284:	018cba80 	.word	0x018cba80
1000b288:	1000bb69 	.word	0x1000bb69
1000b28c:	1000bb45 	.word	0x1000bb45

1000b290 <sms_dualtimer_start>:
    dualtimer_register_callback(tmr, cb_handler);
    sms_dualtimer_stop(tmr);
}

void sms_dualtimer_start(timer_unit_type_t unit, uint32_t delay, enum dualtimer_timer tmr)
{
1000b290:	b510      	push	{r4, lr}
1000b292:	0014      	movs	r4, r2
    uint32_t timer_load = 1;
    switch(unit) {
1000b294:	2801      	cmp	r0, #1
1000b296:	d006      	beq.n	1000b2a6 <sms_dualtimer_start+0x16>
1000b298:	2800      	cmp	r0, #0
1000b29a:	d002      	beq.n	1000b2a2 <sms_dualtimer_start+0x12>
1000b29c:	2802      	cmp	r0, #2
1000b29e:	d004      	beq.n	1000b2aa <sms_dualtimer_start+0x1a>
1000b2a0:	e005      	b.n	1000b2ae <sms_dualtimer_start+0x1e>
        case TIMER_UNIT_US:
        timer_load = SMS_DUALTIMER_LOAD_US;
1000b2a2:	221a      	movs	r2, #26
1000b2a4:	e004      	b.n	1000b2b0 <sms_dualtimer_start+0x20>
        break;
        
        case TIMER_UNIT_MS:
        timer_load = SMS_DUALTIMER_LOAD_MS;
1000b2a6:	4a0c      	ldr	r2, [pc, #48]	; (1000b2d8 <sms_dualtimer_start+0x48>)
        break;
1000b2a8:	e002      	b.n	1000b2b0 <sms_dualtimer_start+0x20>
        
        case TIMER_UNIT_S:
        timer_load = SMS_DUALTIMER_LOAD_S;
1000b2aa:	4a0c      	ldr	r2, [pc, #48]	; (1000b2dc <sms_dualtimer_start+0x4c>)
        break;
1000b2ac:	e000      	b.n	1000b2b0 <sms_dualtimer_start+0x20>
    sms_dualtimer_stop(tmr);
}

void sms_dualtimer_start(timer_unit_type_t unit, uint32_t delay, enum dualtimer_timer tmr)
{
    uint32_t timer_load = 1;
1000b2ae:	2201      	movs	r2, #1
        
        default:
        break;
    }
    
    if(delay <= 0) {
1000b2b0:	2900      	cmp	r1, #0
1000b2b2:	d101      	bne.n	1000b2b8 <sms_dualtimer_start+0x28>
        //DBG_LOG("[sms_dualtimer_start]\tWarning! Delay value < 0... setting to 1000");
        delay = 1000;
1000b2b4:	21fa      	movs	r1, #250	; 0xfa
1000b2b6:	0089      	lsls	r1, r1, #2
    }
    
    ulp_ready = false;
1000b2b8:	2000      	movs	r0, #0
1000b2ba:	4b09      	ldr	r3, [pc, #36]	; (1000b2e0 <sms_dualtimer_start+0x50>)
1000b2bc:	7018      	strb	r0, [r3, #0]
    //DBG_LOG_DEV("[sms_dualtimer_start]\t\tStarting timer%d... load: %ld, delay: %ld", (tmr+1), timer_load, delay);
    dualtimer_set_counter(tmr, DUALTIMER_SET_CURRUNT_REG, timer_load * delay);
1000b2be:	434a      	muls	r2, r1
1000b2c0:	2100      	movs	r1, #0
1000b2c2:	0020      	movs	r0, r4
1000b2c4:	4b07      	ldr	r3, [pc, #28]	; (1000b2e4 <sms_dualtimer_start+0x54>)
1000b2c6:	4798      	blx	r3
    dualtimer_enable(tmr);
1000b2c8:	0020      	movs	r0, r4
1000b2ca:	4b07      	ldr	r3, [pc, #28]	; (1000b2e8 <sms_dualtimer_start+0x58>)
1000b2cc:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000b2ce:	2280      	movs	r2, #128	; 0x80
1000b2d0:	01d2      	lsls	r2, r2, #7
1000b2d2:	4b06      	ldr	r3, [pc, #24]	; (1000b2ec <sms_dualtimer_start+0x5c>)
1000b2d4:	601a      	str	r2, [r3, #0]
    NVIC_EnableIRQ(DUALTIMER0_IRQn);
}
1000b2d6:	bd10      	pop	{r4, pc}
1000b2d8:	00006590 	.word	0x00006590
1000b2dc:	018cba80 	.word	0x018cba80
1000b2e0:	10019d9d 	.word	0x10019d9d
1000b2e4:	1000baf9 	.word	0x1000baf9
1000b2e8:	1000bb21 	.word	0x1000bb21
1000b2ec:	e000e100 	.word	0xe000e100

1000b2f0 <sms_dualtimer_stop>:

void sms_dualtimer_stop(enum dualtimer_timer tmr)
{
1000b2f0:	b510      	push	{r4, lr}
    dualtimer_disable(tmr);
1000b2f2:	4b01      	ldr	r3, [pc, #4]	; (1000b2f8 <sms_dualtimer_stop+0x8>)
1000b2f4:	4798      	blx	r3
}
1000b2f6:	bd10      	pop	{r4, pc}
1000b2f8:	1000bb45 	.word	0x1000bb45

1000b2fc <sms_dualtimer1_fn>:
    send_plf_int_msg_ind(DUALTIMER_TIMER2_CALLBACK, TIMER_EXPIRED_CALLBACK_TYPE_DETECT, NULL, 0);
}


void sms_dualtimer1_fn(void)
{
1000b2fc:	b510      	push	{r4, lr}
    //sms_button_toggle_interrupt(SMS_BTN_INT_DISABLE, SMS_BTN_INT_DISABLE);
    switch(timer1_current_mode) {
1000b2fe:	4ba7      	ldr	r3, [pc, #668]	; (1000b59c <sms_dualtimer1_fn+0x2a0>)
1000b300:	781b      	ldrb	r3, [r3, #0]
1000b302:	b2db      	uxtb	r3, r3
1000b304:	2b02      	cmp	r3, #2
1000b306:	d006      	beq.n	1000b316 <sms_dualtimer1_fn+0x1a>
1000b308:	2b03      	cmp	r3, #3
1000b30a:	d100      	bne.n	1000b30e <sms_dualtimer1_fn+0x12>
1000b30c:	e103      	b.n	1000b516 <sms_dualtimer1_fn+0x21a>
1000b30e:	2b01      	cmp	r3, #1
1000b310:	d000      	beq.n	1000b314 <sms_dualtimer1_fn+0x18>
1000b312:	e13a      	b.n	1000b58a <sms_dualtimer1_fn+0x28e>
1000b314:	e051      	b.n	1000b3ba <sms_dualtimer1_fn+0xbe>
        /* Timer1 mode = MS58_RESET */
        case TIMER1_MODE_MS58_RESET:
        {
            timer1_current_mode = TIMER1_MODE_NONE;
1000b316:	2200      	movs	r2, #0
1000b318:	4ba0      	ldr	r3, [pc, #640]	; (1000b59c <sms_dualtimer1_fn+0x2a0>)
1000b31a:	701a      	strb	r2, [r3, #0]
            pressure_device.ms58_device.reset_done = true;
1000b31c:	4ba0      	ldr	r3, [pc, #640]	; (1000b5a0 <sms_dualtimer1_fn+0x2a4>)
1000b31e:	2101      	movs	r1, #1
1000b320:	7059      	strb	r1, [r3, #1]
            pressure_device.ms58_device.init_retry = 0;
1000b322:	3125      	adds	r1, #37	; 0x25
1000b324:	545a      	strb	r2, [r3, r1]
            if(sms_pressure_init() != STATUS_OK) {
1000b326:	4b9f      	ldr	r3, [pc, #636]	; (1000b5a4 <sms_dualtimer1_fn+0x2a8>)
1000b328:	4798      	blx	r3
1000b32a:	2800      	cmp	r0, #0
1000b32c:	d02b      	beq.n	1000b386 <sms_dualtimer1_fn+0x8a>
                DBG_LOG_DEV("[sms_dualtimer1_fn]\tFailed to init ms58 device");
1000b32e:	489e      	ldr	r0, [pc, #632]	; (1000b5a8 <sms_dualtimer1_fn+0x2ac>)
1000b330:	4b9e      	ldr	r3, [pc, #632]	; (1000b5ac <sms_dualtimer1_fn+0x2b0>)
1000b332:	4798      	blx	r3
1000b334:	489e      	ldr	r0, [pc, #632]	; (1000b5b0 <sms_dualtimer1_fn+0x2b4>)
1000b336:	4b9f      	ldr	r3, [pc, #636]	; (1000b5b4 <sms_dualtimer1_fn+0x2b8>)
1000b338:	4798      	blx	r3
                pressure_device.ms58_device.init_retry++;
1000b33a:	4999      	ldr	r1, [pc, #612]	; (1000b5a0 <sms_dualtimer1_fn+0x2a4>)
1000b33c:	2226      	movs	r2, #38	; 0x26
1000b33e:	5c8b      	ldrb	r3, [r1, r2]
1000b340:	3301      	adds	r3, #1
1000b342:	b2db      	uxtb	r3, r3
1000b344:	548b      	strb	r3, [r1, r2]
                if(pressure_device.ms58_device.init_retry >= MS58_INIT_RETRY_MAX) {
1000b346:	2b03      	cmp	r3, #3
1000b348:	d914      	bls.n	1000b374 <sms_dualtimer1_fn+0x78>
                    DBG_LOG_DEV("[sms_dualtimer1_fn]\tFailed to initialize pressure sensor. Working mode = BUTTON_SOLO");
1000b34a:	4897      	ldr	r0, [pc, #604]	; (1000b5a8 <sms_dualtimer1_fn+0x2ac>)
1000b34c:	4b97      	ldr	r3, [pc, #604]	; (1000b5ac <sms_dualtimer1_fn+0x2b0>)
1000b34e:	4798      	blx	r3
1000b350:	4899      	ldr	r0, [pc, #612]	; (1000b5b8 <sms_dualtimer1_fn+0x2bc>)
1000b352:	4b98      	ldr	r3, [pc, #608]	; (1000b5b4 <sms_dualtimer1_fn+0x2b8>)
1000b354:	4798      	blx	r3
                    pressure_device.ms58_device.current_state = MS58_STATE_NONE;
1000b356:	2100      	movs	r1, #0
1000b358:	2325      	movs	r3, #37	; 0x25
1000b35a:	4a91      	ldr	r2, [pc, #580]	; (1000b5a0 <sms_dualtimer1_fn+0x2a4>)
1000b35c:	54d1      	strb	r1, [r2, r3]
                    sms_working_mode = SMS_MODE_BUTTON_SOLO;
1000b35e:	2201      	movs	r2, #1
1000b360:	4b96      	ldr	r3, [pc, #600]	; (1000b5bc <sms_dualtimer1_fn+0x2c0>)
1000b362:	701a      	strb	r2, [r3, #0]
                    // Init IMU device...
                    //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                    if(timer2_current_mode == TIMER2_MODE_NONE) {
1000b364:	4b96      	ldr	r3, [pc, #600]	; (1000b5c0 <sms_dualtimer1_fn+0x2c4>)
1000b366:	781b      	ldrb	r3, [r3, #0]
1000b368:	2b00      	cmp	r3, #0
1000b36a:	d000      	beq.n	1000b36e <sms_dualtimer1_fn+0x72>
1000b36c:	e114      	b.n	1000b598 <sms_dualtimer1_fn+0x29c>
                        //release_sleep_lock();
                        ulp_ready = true;
1000b36e:	4b95      	ldr	r3, [pc, #596]	; (1000b5c4 <sms_dualtimer1_fn+0x2c8>)
1000b370:	701a      	strb	r2, [r3, #0]
1000b372:	e111      	b.n	1000b598 <sms_dualtimer1_fn+0x29c>
                    }                        
                }
                else {
                    timer1_current_mode = TIMER1_MODE_MS58_RESET;
1000b374:	2202      	movs	r2, #2
1000b376:	4b89      	ldr	r3, [pc, #548]	; (1000b59c <sms_dualtimer1_fn+0x2a0>)
1000b378:	701a      	strb	r2, [r3, #0]
                    //ulp_ready = false;
                    sms_dualtimer_start(TIMER_UNIT_MS, MS58_RESET_WAIT_MS, DUALTIMER_TIMER1);
1000b37a:	2200      	movs	r2, #0
1000b37c:	2103      	movs	r1, #3
1000b37e:	2001      	movs	r0, #1
1000b380:	4b91      	ldr	r3, [pc, #580]	; (1000b5c8 <sms_dualtimer1_fn+0x2cc>)
1000b382:	4798      	blx	r3
1000b384:	e108      	b.n	1000b598 <sms_dualtimer1_fn+0x29c>
                }
            }
            else {
                pressure_device.ms58_device.current_state = MS58_STATE_READY;
1000b386:	2102      	movs	r1, #2
1000b388:	2325      	movs	r3, #37	; 0x25
1000b38a:	4a85      	ldr	r2, [pc, #532]	; (1000b5a0 <sms_dualtimer1_fn+0x2a4>)
1000b38c:	54d1      	strb	r1, [r2, r3]
                sms_working_mode = SMS_MODE_BUTTON_PRESSURE;
1000b38e:	2205      	movs	r2, #5
1000b390:	4b8a      	ldr	r3, [pc, #552]	; (1000b5bc <sms_dualtimer1_fn+0x2c0>)
1000b392:	701a      	strb	r2, [r3, #0]
                //DBG_LOG_DEV("[sms_dualtimer1_fn]\tPressure sensor initialized. Working mode = BUTTON_PRESSURE");
                DBG_LOG_DEV("[sms_dualtimer1_fn]\t\tStarting sensors (MS58 reset)...");
1000b394:	4884      	ldr	r0, [pc, #528]	; (1000b5a8 <sms_dualtimer1_fn+0x2ac>)
1000b396:	4b85      	ldr	r3, [pc, #532]	; (1000b5ac <sms_dualtimer1_fn+0x2b0>)
1000b398:	4798      	blx	r3
1000b39a:	488c      	ldr	r0, [pc, #560]	; (1000b5cc <sms_dualtimer1_fn+0x2d0>)
1000b39c:	4b85      	ldr	r3, [pc, #532]	; (1000b5b4 <sms_dualtimer1_fn+0x2b8>)
1000b39e:	4798      	blx	r3
                sms_sensors_interrupt_toggle(false, true);
1000b3a0:	2101      	movs	r1, #1
1000b3a2:	2000      	movs	r0, #0
1000b3a4:	4b8a      	ldr	r3, [pc, #552]	; (1000b5d0 <sms_dualtimer1_fn+0x2d4>)
1000b3a6:	4798      	blx	r3
                // Init IMU device...
                //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                if(timer2_current_mode == TIMER2_MODE_NONE) {
1000b3a8:	4b85      	ldr	r3, [pc, #532]	; (1000b5c0 <sms_dualtimer1_fn+0x2c4>)
1000b3aa:	781b      	ldrb	r3, [r3, #0]
1000b3ac:	2b00      	cmp	r3, #0
1000b3ae:	d000      	beq.n	1000b3b2 <sms_dualtimer1_fn+0xb6>
1000b3b0:	e0f2      	b.n	1000b598 <sms_dualtimer1_fn+0x29c>
                    //release_sleep_lock();
                    ulp_ready = true;
1000b3b2:	2201      	movs	r2, #1
1000b3b4:	4b83      	ldr	r3, [pc, #524]	; (1000b5c4 <sms_dualtimer1_fn+0x2c8>)
1000b3b6:	701a      	strb	r2, [r3, #0]
1000b3b8:	e0ee      	b.n	1000b598 <sms_dualtimer1_fn+0x29c>
        }
        
        /* Timer1 mode = STARTUP */
        case TIMER1_MODE_STARTUP:
        {
            timer1_current_mode = TIMER1_MODE_NONE;
1000b3ba:	2200      	movs	r2, #0
1000b3bc:	4b77      	ldr	r3, [pc, #476]	; (1000b59c <sms_dualtimer1_fn+0x2a0>)
1000b3be:	701a      	strb	r2, [r3, #0]
            button_instance.previous_state = button_instance.current_state;
1000b3c0:	4c84      	ldr	r4, [pc, #528]	; (1000b5d4 <sms_dualtimer1_fn+0x2d8>)
1000b3c2:	7863      	ldrb	r3, [r4, #1]
1000b3c4:	7023      	strb	r3, [r4, #0]
            button_instance.current_state = sms_button_get_state();
1000b3c6:	4b84      	ldr	r3, [pc, #528]	; (1000b5d8 <sms_dualtimer1_fn+0x2dc>)
1000b3c8:	4798      	blx	r3
1000b3ca:	7060      	strb	r0, [r4, #1]
            sms_monitor_get_states("[sms_dualtimer1_fn]");
1000b3cc:	4883      	ldr	r0, [pc, #524]	; (1000b5dc <sms_dualtimer1_fn+0x2e0>)
1000b3ce:	4b84      	ldr	r3, [pc, #528]	; (1000b5e0 <sms_dualtimer1_fn+0x2e4>)
1000b3d0:	4798      	blx	r3
            
            switch(button_instance.previous_state) {
1000b3d2:	7823      	ldrb	r3, [r4, #0]
1000b3d4:	2b01      	cmp	r3, #1
1000b3d6:	d002      	beq.n	1000b3de <sms_dualtimer1_fn+0xe2>
1000b3d8:	2b02      	cmp	r3, #2
1000b3da:	d04c      	beq.n	1000b476 <sms_dualtimer1_fn+0x17a>
1000b3dc:	e093      	b.n	1000b506 <sms_dualtimer1_fn+0x20a>
                // --- Timer1 mode = STARTUP: switch prev_state ---
                case BUTTON_STATE_B0:
                switch(button_instance.current_state) {
1000b3de:	4b7d      	ldr	r3, [pc, #500]	; (1000b5d4 <sms_dualtimer1_fn+0x2d8>)
1000b3e0:	785b      	ldrb	r3, [r3, #1]
1000b3e2:	2b01      	cmp	r3, #1
1000b3e4:	d002      	beq.n	1000b3ec <sms_dualtimer1_fn+0xf0>
1000b3e6:	2b02      	cmp	r3, #2
1000b3e8:	d023      	beq.n	1000b432 <sms_dualtimer1_fn+0x136>
1000b3ea:	e03b      	b.n	1000b464 <sms_dualtimer1_fn+0x168>
                    // --- prev_state = b0: switch current_state ---
                    case BUTTON_STATE_B0:
                    if(ble_current_state == BLE_STATE_POWEROFF) {
1000b3ec:	4b7d      	ldr	r3, [pc, #500]	; (1000b5e4 <sms_dualtimer1_fn+0x2e8>)
1000b3ee:	781b      	ldrb	r3, [r3, #0]
1000b3f0:	2b00      	cmp	r3, #0
1000b3f2:	d115      	bne.n	1000b420 <sms_dualtimer1_fn+0x124>
                        sms_btn_cnt++;
1000b3f4:	4a7c      	ldr	r2, [pc, #496]	; (1000b5e8 <sms_dualtimer1_fn+0x2ec>)
1000b3f6:	7813      	ldrb	r3, [r2, #0]
1000b3f8:	3301      	adds	r3, #1
1000b3fa:	b2db      	uxtb	r3, r3
1000b3fc:	7013      	strb	r3, [r2, #0]
                        if(sms_btn_cnt >= SMS_BTN_STARTUP_CNT) {
1000b3fe:	2b0f      	cmp	r3, #15
1000b400:	d905      	bls.n	1000b40e <sms_dualtimer1_fn+0x112>
                            timer1_current_mode = TIMER1_MODE_NONE;
1000b402:	2200      	movs	r2, #0
1000b404:	4b65      	ldr	r3, [pc, #404]	; (1000b59c <sms_dualtimer1_fn+0x2a0>)
1000b406:	701a      	strb	r2, [r3, #0]
                            sms_ble_startup();
1000b408:	4b78      	ldr	r3, [pc, #480]	; (1000b5ec <sms_dualtimer1_fn+0x2f0>)
1000b40a:	4798      	blx	r3
1000b40c:	e0c4      	b.n	1000b598 <sms_dualtimer1_fn+0x29c>
                        }
                        else {
                            //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                            timer1_current_mode = TIMER1_MODE_STARTUP;
1000b40e:	2201      	movs	r2, #1
1000b410:	4b62      	ldr	r3, [pc, #392]	; (1000b59c <sms_dualtimer1_fn+0x2a0>)
1000b412:	701a      	strb	r2, [r3, #0]
                            //ulp_ready = false;
                            sms_dualtimer_start(TIMER_UNIT_MS, SMS_BTN_STARTUP_MS, DUALTIMER_TIMER1);
1000b414:	2200      	movs	r2, #0
1000b416:	21fa      	movs	r1, #250	; 0xfa
1000b418:	2001      	movs	r0, #1
1000b41a:	4b6b      	ldr	r3, [pc, #428]	; (1000b5c8 <sms_dualtimer1_fn+0x2cc>)
1000b41c:	4798      	blx	r3
1000b41e:	e0bb      	b.n	1000b598 <sms_dualtimer1_fn+0x29c>
                        }
                    }
                    else {
                        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                        if(timer2_current_mode == TIMER2_MODE_NONE) {
1000b420:	4b67      	ldr	r3, [pc, #412]	; (1000b5c0 <sms_dualtimer1_fn+0x2c4>)
1000b422:	781b      	ldrb	r3, [r3, #0]
1000b424:	2b00      	cmp	r3, #0
1000b426:	d000      	beq.n	1000b42a <sms_dualtimer1_fn+0x12e>
1000b428:	e0b6      	b.n	1000b598 <sms_dualtimer1_fn+0x29c>
                            //release_sleep_lock();
                            ulp_ready = true;
1000b42a:	2201      	movs	r2, #1
1000b42c:	4b65      	ldr	r3, [pc, #404]	; (1000b5c4 <sms_dualtimer1_fn+0x2c8>)
1000b42e:	701a      	strb	r2, [r3, #0]
1000b430:	e0b2      	b.n	1000b598 <sms_dualtimer1_fn+0x29c>
                    }
                    break;
                    
                    // --- prev_state = b0: switch current_state ---
                    case BUTTON_STATE_B1:
                    if(ble_current_state == BLE_STATE_POWEROFF) {
1000b432:	4b6c      	ldr	r3, [pc, #432]	; (1000b5e4 <sms_dualtimer1_fn+0x2e8>)
1000b434:	781b      	ldrb	r3, [r3, #0]
1000b436:	2b00      	cmp	r3, #0
1000b438:	d10b      	bne.n	1000b452 <sms_dualtimer1_fn+0x156>
                        sms_btn_cnt = 0;
1000b43a:	2200      	movs	r2, #0
1000b43c:	4b6a      	ldr	r3, [pc, #424]	; (1000b5e8 <sms_dualtimer1_fn+0x2ec>)
1000b43e:	701a      	strb	r2, [r3, #0]
                        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                        timer1_current_mode = TIMER1_MODE_STARTUP;
1000b440:	3201      	adds	r2, #1
1000b442:	4b56      	ldr	r3, [pc, #344]	; (1000b59c <sms_dualtimer1_fn+0x2a0>)
1000b444:	701a      	strb	r2, [r3, #0]
                        //ulp_ready = false;
                        sms_dualtimer_start(TIMER_UNIT_MS, SMS_BLINK_STARTUP_MS, DUALTIMER_TIMER1);
1000b446:	2200      	movs	r2, #0
1000b448:	2164      	movs	r1, #100	; 0x64
1000b44a:	2001      	movs	r0, #1
1000b44c:	4b5e      	ldr	r3, [pc, #376]	; (1000b5c8 <sms_dualtimer1_fn+0x2cc>)
1000b44e:	4798      	blx	r3
1000b450:	e0a2      	b.n	1000b598 <sms_dualtimer1_fn+0x29c>
                    }
                    else {
                        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                        if(timer2_current_mode == TIMER2_MODE_NONE) {
1000b452:	4b5b      	ldr	r3, [pc, #364]	; (1000b5c0 <sms_dualtimer1_fn+0x2c4>)
1000b454:	781b      	ldrb	r3, [r3, #0]
1000b456:	2b00      	cmp	r3, #0
1000b458:	d000      	beq.n	1000b45c <sms_dualtimer1_fn+0x160>
1000b45a:	e09d      	b.n	1000b598 <sms_dualtimer1_fn+0x29c>
                            //release_sleep_lock();
                            ulp_ready = true;
1000b45c:	2201      	movs	r2, #1
1000b45e:	4b59      	ldr	r3, [pc, #356]	; (1000b5c4 <sms_dualtimer1_fn+0x2c8>)
1000b460:	701a      	strb	r2, [r3, #0]
1000b462:	e099      	b.n	1000b598 <sms_dualtimer1_fn+0x29c>
                    // --- prev_state = b0: switch current_state ---
                    case BUTTON_STATE_BOTH:
                    case BUTTON_STATE_NONE:
                    default:
                    //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                    if(timer2_current_mode == TIMER2_MODE_NONE) {
1000b464:	4b56      	ldr	r3, [pc, #344]	; (1000b5c0 <sms_dualtimer1_fn+0x2c4>)
1000b466:	781b      	ldrb	r3, [r3, #0]
1000b468:	2b00      	cmp	r3, #0
1000b46a:	d000      	beq.n	1000b46e <sms_dualtimer1_fn+0x172>
1000b46c:	e094      	b.n	1000b598 <sms_dualtimer1_fn+0x29c>
                        //release_sleep_lock();
                        ulp_ready = true;
1000b46e:	2201      	movs	r2, #1
1000b470:	4b54      	ldr	r3, [pc, #336]	; (1000b5c4 <sms_dualtimer1_fn+0x2c8>)
1000b472:	701a      	strb	r2, [r3, #0]
1000b474:	e090      	b.n	1000b598 <sms_dualtimer1_fn+0x29c>
                }
                break;
                
                // --- Timer1 mode = STARTUP: switch prev_state ---
                case BUTTON_STATE_B1:
                switch(button_instance.current_state) {
1000b476:	4b57      	ldr	r3, [pc, #348]	; (1000b5d4 <sms_dualtimer1_fn+0x2d8>)
1000b478:	785b      	ldrb	r3, [r3, #1]
1000b47a:	2b01      	cmp	r3, #1
1000b47c:	d023      	beq.n	1000b4c6 <sms_dualtimer1_fn+0x1ca>
1000b47e:	2b02      	cmp	r3, #2
1000b480:	d139      	bne.n	1000b4f6 <sms_dualtimer1_fn+0x1fa>
                    // --- prev_state = b1: switch current_state ---
                    case BUTTON_STATE_B1:
                    if(ble_current_state == BLE_STATE_POWEROFF) {
1000b482:	4b58      	ldr	r3, [pc, #352]	; (1000b5e4 <sms_dualtimer1_fn+0x2e8>)
1000b484:	781b      	ldrb	r3, [r3, #0]
1000b486:	2b00      	cmp	r3, #0
1000b488:	d115      	bne.n	1000b4b6 <sms_dualtimer1_fn+0x1ba>
                        sms_btn_cnt++;
1000b48a:	4a57      	ldr	r2, [pc, #348]	; (1000b5e8 <sms_dualtimer1_fn+0x2ec>)
1000b48c:	7813      	ldrb	r3, [r2, #0]
1000b48e:	3301      	adds	r3, #1
1000b490:	b2db      	uxtb	r3, r3
1000b492:	7013      	strb	r3, [r2, #0]
                        if(sms_btn_cnt >= SMS_BTN_STARTUP_CNT) {
1000b494:	2b0f      	cmp	r3, #15
1000b496:	d905      	bls.n	1000b4a4 <sms_dualtimer1_fn+0x1a8>
                            timer1_current_mode = TIMER1_MODE_NONE;
1000b498:	2200      	movs	r2, #0
1000b49a:	4b40      	ldr	r3, [pc, #256]	; (1000b59c <sms_dualtimer1_fn+0x2a0>)
1000b49c:	701a      	strb	r2, [r3, #0]
                            sms_ble_startup();
1000b49e:	4b53      	ldr	r3, [pc, #332]	; (1000b5ec <sms_dualtimer1_fn+0x2f0>)
1000b4a0:	4798      	blx	r3
1000b4a2:	e079      	b.n	1000b598 <sms_dualtimer1_fn+0x29c>
                        }
                        else {
                            //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                            timer1_current_mode = TIMER1_MODE_STARTUP;
1000b4a4:	2201      	movs	r2, #1
1000b4a6:	4b3d      	ldr	r3, [pc, #244]	; (1000b59c <sms_dualtimer1_fn+0x2a0>)
1000b4a8:	701a      	strb	r2, [r3, #0]
                            //ulp_ready = false;
                            sms_dualtimer_start(TIMER_UNIT_MS, SMS_BTN_STARTUP_MS, DUALTIMER_TIMER1);
1000b4aa:	2200      	movs	r2, #0
1000b4ac:	21fa      	movs	r1, #250	; 0xfa
1000b4ae:	2001      	movs	r0, #1
1000b4b0:	4b45      	ldr	r3, [pc, #276]	; (1000b5c8 <sms_dualtimer1_fn+0x2cc>)
1000b4b2:	4798      	blx	r3
1000b4b4:	e070      	b.n	1000b598 <sms_dualtimer1_fn+0x29c>
                        }
                    }
                    else {
                        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                        if(timer2_current_mode == TIMER2_MODE_NONE) {
1000b4b6:	4b42      	ldr	r3, [pc, #264]	; (1000b5c0 <sms_dualtimer1_fn+0x2c4>)
1000b4b8:	781b      	ldrb	r3, [r3, #0]
1000b4ba:	2b00      	cmp	r3, #0
1000b4bc:	d16c      	bne.n	1000b598 <sms_dualtimer1_fn+0x29c>
                            //release_sleep_lock();
                            ulp_ready = true;
1000b4be:	2201      	movs	r2, #1
1000b4c0:	4b40      	ldr	r3, [pc, #256]	; (1000b5c4 <sms_dualtimer1_fn+0x2c8>)
1000b4c2:	701a      	strb	r2, [r3, #0]
1000b4c4:	e068      	b.n	1000b598 <sms_dualtimer1_fn+0x29c>
                    }
                    break;
                    
                    // --- prev_state = b1: switch current_state ---
                    case BUTTON_STATE_B0:
                    if(ble_current_state == BLE_STATE_POWEROFF) {
1000b4c6:	4b47      	ldr	r3, [pc, #284]	; (1000b5e4 <sms_dualtimer1_fn+0x2e8>)
1000b4c8:	781b      	ldrb	r3, [r3, #0]
1000b4ca:	2b00      	cmp	r3, #0
1000b4cc:	d10b      	bne.n	1000b4e6 <sms_dualtimer1_fn+0x1ea>
                        sms_btn_cnt = 0;
1000b4ce:	2200      	movs	r2, #0
1000b4d0:	4b45      	ldr	r3, [pc, #276]	; (1000b5e8 <sms_dualtimer1_fn+0x2ec>)
1000b4d2:	701a      	strb	r2, [r3, #0]
                        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                        timer1_current_mode = TIMER1_MODE_STARTUP;
1000b4d4:	3201      	adds	r2, #1
1000b4d6:	4b31      	ldr	r3, [pc, #196]	; (1000b59c <sms_dualtimer1_fn+0x2a0>)
1000b4d8:	701a      	strb	r2, [r3, #0]
                        //ulp_ready = false;
                        sms_dualtimer_start(TIMER_UNIT_MS, SMS_BLINK_STARTUP_MS, DUALTIMER_TIMER1);
1000b4da:	2200      	movs	r2, #0
1000b4dc:	2164      	movs	r1, #100	; 0x64
1000b4de:	2001      	movs	r0, #1
1000b4e0:	4b39      	ldr	r3, [pc, #228]	; (1000b5c8 <sms_dualtimer1_fn+0x2cc>)
1000b4e2:	4798      	blx	r3
1000b4e4:	e058      	b.n	1000b598 <sms_dualtimer1_fn+0x29c>
                    }
                    else {
                        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                        if(timer2_current_mode == TIMER2_MODE_NONE) {
1000b4e6:	4b36      	ldr	r3, [pc, #216]	; (1000b5c0 <sms_dualtimer1_fn+0x2c4>)
1000b4e8:	781b      	ldrb	r3, [r3, #0]
1000b4ea:	2b00      	cmp	r3, #0
1000b4ec:	d154      	bne.n	1000b598 <sms_dualtimer1_fn+0x29c>
                            //release_sleep_lock();
                            ulp_ready = true;
1000b4ee:	2201      	movs	r2, #1
1000b4f0:	4b34      	ldr	r3, [pc, #208]	; (1000b5c4 <sms_dualtimer1_fn+0x2c8>)
1000b4f2:	701a      	strb	r2, [r3, #0]
1000b4f4:	e050      	b.n	1000b598 <sms_dualtimer1_fn+0x29c>
                    // --- prev_state = b1: switch current_state ---
                    case BUTTON_STATE_NONE:
                    case BUTTON_STATE_BOTH:
                    default:
                    //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                    if(timer2_current_mode == TIMER2_MODE_NONE) {
1000b4f6:	4b32      	ldr	r3, [pc, #200]	; (1000b5c0 <sms_dualtimer1_fn+0x2c4>)
1000b4f8:	781b      	ldrb	r3, [r3, #0]
1000b4fa:	2b00      	cmp	r3, #0
1000b4fc:	d14c      	bne.n	1000b598 <sms_dualtimer1_fn+0x29c>
                        //release_sleep_lock();
                        ulp_ready = true;
1000b4fe:	2201      	movs	r2, #1
1000b500:	4b30      	ldr	r3, [pc, #192]	; (1000b5c4 <sms_dualtimer1_fn+0x2c8>)
1000b502:	701a      	strb	r2, [r3, #0]
1000b504:	e048      	b.n	1000b598 <sms_dualtimer1_fn+0x29c>
                case BUTTON_STATE_NONE:
                case BUTTON_STATE_BOTH:
                default:
                {
                    //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                    if(timer2_current_mode == TIMER2_MODE_NONE) {
1000b506:	4b2e      	ldr	r3, [pc, #184]	; (1000b5c0 <sms_dualtimer1_fn+0x2c4>)
1000b508:	781b      	ldrb	r3, [r3, #0]
1000b50a:	2b00      	cmp	r3, #0
1000b50c:	d144      	bne.n	1000b598 <sms_dualtimer1_fn+0x29c>
                        //release_sleep_lock();
                        ulp_ready = true;
1000b50e:	2201      	movs	r2, #1
1000b510:	4b2c      	ldr	r3, [pc, #176]	; (1000b5c4 <sms_dualtimer1_fn+0x2c8>)
1000b512:	701a      	strb	r2, [r3, #0]
1000b514:	e040      	b.n	1000b598 <sms_dualtimer1_fn+0x29c>
        
        /* Timer1 mode = SHUTDOWN */
        case TIMER1_MODE_SHUTDOWN:
        {
            //timer1_current_mode = TIMER1_MODE_NONE;
            button_instance.previous_state = button_instance.current_state;
1000b516:	4c2f      	ldr	r4, [pc, #188]	; (1000b5d4 <sms_dualtimer1_fn+0x2d8>)
1000b518:	7863      	ldrb	r3, [r4, #1]
1000b51a:	7023      	strb	r3, [r4, #0]
            button_instance.current_state = sms_button_get_state();
1000b51c:	4b2e      	ldr	r3, [pc, #184]	; (1000b5d8 <sms_dualtimer1_fn+0x2dc>)
1000b51e:	4798      	blx	r3
1000b520:	7060      	strb	r0, [r4, #1]
            sms_monitor_get_states("[sms_dualtimer1_fn]");
1000b522:	482e      	ldr	r0, [pc, #184]	; (1000b5dc <sms_dualtimer1_fn+0x2e0>)
1000b524:	4b2e      	ldr	r3, [pc, #184]	; (1000b5e0 <sms_dualtimer1_fn+0x2e4>)
1000b526:	4798      	blx	r3
            
            if((button_instance.previous_state == BUTTON_STATE_BOTH) && (button_instance.current_state == BUTTON_STATE_BOTH)) {
1000b528:	8822      	ldrh	r2, [r4, #0]
1000b52a:	4b31      	ldr	r3, [pc, #196]	; (1000b5f0 <sms_dualtimer1_fn+0x2f4>)
1000b52c:	429a      	cmp	r2, r3
1000b52e:	d112      	bne.n	1000b556 <sms_dualtimer1_fn+0x25a>
                sms_btn_cnt++;
1000b530:	4a2d      	ldr	r2, [pc, #180]	; (1000b5e8 <sms_dualtimer1_fn+0x2ec>)
1000b532:	7813      	ldrb	r3, [r2, #0]
1000b534:	3301      	adds	r3, #1
1000b536:	b2db      	uxtb	r3, r3
1000b538:	7013      	strb	r3, [r2, #0]
                if(sms_btn_cnt >= SMS_BTN_SHTDWN_CNT) {
1000b53a:	2b09      	cmp	r3, #9
1000b53c:	d902      	bls.n	1000b544 <sms_dualtimer1_fn+0x248>
                    sms_ble_power_down();
1000b53e:	4b2d      	ldr	r3, [pc, #180]	; (1000b5f4 <sms_dualtimer1_fn+0x2f8>)
1000b540:	4798      	blx	r3
1000b542:	e029      	b.n	1000b598 <sms_dualtimer1_fn+0x29c>
                }
                else {
                    //sms_sensors_toggle_interrupt(SMS_EXTINT_DISABLE);
                    timer1_current_mode = TIMER1_MODE_SHUTDOWN;
1000b544:	2203      	movs	r2, #3
1000b546:	4b15      	ldr	r3, [pc, #84]	; (1000b59c <sms_dualtimer1_fn+0x2a0>)
1000b548:	701a      	strb	r2, [r3, #0]
                    sms_dualtimer_start(TIMER_UNIT_MS, SMS_BTN_SHTDWN_MS, DUALTIMER_TIMER1);
1000b54a:	2200      	movs	r2, #0
1000b54c:	21fa      	movs	r1, #250	; 0xfa
1000b54e:	2001      	movs	r0, #1
1000b550:	4b1d      	ldr	r3, [pc, #116]	; (1000b5c8 <sms_dualtimer1_fn+0x2cc>)
1000b552:	4798      	blx	r3
1000b554:	e020      	b.n	1000b598 <sms_dualtimer1_fn+0x29c>
                }
            }
            else {
                if(pressure_device.state == PRESSURE_STATE_STDBY) {
1000b556:	2328      	movs	r3, #40	; 0x28
1000b558:	4a11      	ldr	r2, [pc, #68]	; (1000b5a0 <sms_dualtimer1_fn+0x2a4>)
1000b55a:	5cd3      	ldrb	r3, [r2, r3]
1000b55c:	2b01      	cmp	r3, #1
1000b55e:	d109      	bne.n	1000b574 <sms_dualtimer1_fn+0x278>
                    DBG_LOG_DEV("[sms_dualtimer1_fn]\t\tStarting sensors (shutting down)...");
1000b560:	4811      	ldr	r0, [pc, #68]	; (1000b5a8 <sms_dualtimer1_fn+0x2ac>)
1000b562:	4b12      	ldr	r3, [pc, #72]	; (1000b5ac <sms_dualtimer1_fn+0x2b0>)
1000b564:	4798      	blx	r3
1000b566:	4824      	ldr	r0, [pc, #144]	; (1000b5f8 <sms_dualtimer1_fn+0x2fc>)
1000b568:	4b12      	ldr	r3, [pc, #72]	; (1000b5b4 <sms_dualtimer1_fn+0x2b8>)
1000b56a:	4798      	blx	r3
                    sms_sensors_interrupt_toggle(false, true);
1000b56c:	2101      	movs	r1, #1
1000b56e:	2000      	movs	r0, #0
1000b570:	4b17      	ldr	r3, [pc, #92]	; (1000b5d0 <sms_dualtimer1_fn+0x2d4>)
1000b572:	4798      	blx	r3
                }                    
                timer1_current_mode = TIMER1_MODE_NONE;
1000b574:	2200      	movs	r2, #0
1000b576:	4b09      	ldr	r3, [pc, #36]	; (1000b59c <sms_dualtimer1_fn+0x2a0>)
1000b578:	701a      	strb	r2, [r3, #0]
                if(timer2_current_mode == TIMER2_MODE_NONE) {
1000b57a:	4b11      	ldr	r3, [pc, #68]	; (1000b5c0 <sms_dualtimer1_fn+0x2c4>)
1000b57c:	781b      	ldrb	r3, [r3, #0]
1000b57e:	2b00      	cmp	r3, #0
1000b580:	d10a      	bne.n	1000b598 <sms_dualtimer1_fn+0x29c>
                    ulp_ready = true;
1000b582:	3201      	adds	r2, #1
1000b584:	4b0f      	ldr	r3, [pc, #60]	; (1000b5c4 <sms_dualtimer1_fn+0x2c8>)
1000b586:	701a      	strb	r2, [r3, #0]
1000b588:	e006      	b.n	1000b598 <sms_dualtimer1_fn+0x29c>
        }
        
        case TIMER1_MODE_NONE:
        default:
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
        if(timer2_current_mode == TIMER2_MODE_NONE) {
1000b58a:	4b0d      	ldr	r3, [pc, #52]	; (1000b5c0 <sms_dualtimer1_fn+0x2c4>)
1000b58c:	781b      	ldrb	r3, [r3, #0]
1000b58e:	2b00      	cmp	r3, #0
1000b590:	d102      	bne.n	1000b598 <sms_dualtimer1_fn+0x29c>
            //release_sleep_lock();
            ulp_ready = true;
1000b592:	2201      	movs	r2, #1
1000b594:	4b0b      	ldr	r3, [pc, #44]	; (1000b5c4 <sms_dualtimer1_fn+0x2c8>)
1000b596:	701a      	strb	r2, [r3, #0]
        }            
        break;
    } // switch(timer1_current_mode)
}
1000b598:	bd10      	pop	{r4, pc}
1000b59a:	46c0      	nop			; (mov r8, r8)
1000b59c:	10019d08 	.word	0x10019d08
1000b5a0:	10019e18 	.word	0x10019e18
1000b5a4:	1000b075 	.word	0x1000b075
1000b5a8:	10016278 	.word	0x10016278
1000b5ac:	100150d1 	.word	0x100150d1
1000b5b0:	10016e3c 	.word	0x10016e3c
1000b5b4:	10014fb1 	.word	0x10014fb1
1000b5b8:	10016e6c 	.word	0x10016e6c
1000b5bc:	10019d9c 	.word	0x10019d9c
1000b5c0:	10019eb5 	.word	0x10019eb5
1000b5c4:	10019d9d 	.word	0x10019d9d
1000b5c8:	1000b291 	.word	0x1000b291
1000b5cc:	10016ec4 	.word	0x10016ec4
1000b5d0:	1000a9ed 	.word	0x1000a9ed
1000b5d4:	10019da4 	.word	0x10019da4
1000b5d8:	1000a5fd 	.word	0x1000a5fd
1000b5dc:	10016efc 	.word	0x10016efc
1000b5e0:	1000a991 	.word	0x1000a991
1000b5e4:	10019eb4 	.word	0x10019eb4
1000b5e8:	10019ed2 	.word	0x10019ed2
1000b5ec:	10009f01 	.word	0x10009f01
1000b5f0:	00000303 	.word	0x00000303
1000b5f4:	10009f19 	.word	0x10009f19
1000b5f8:	10016f10 	.word	0x10016f10

1000b5fc <sms_dualtimer2_fn>:

void sms_dualtimer2_fn(void)
{
1000b5fc:	b510      	push	{r4, lr}
    //sms_button_toggle_interrupt(SMS_BTN_INT_DISABLE, SMS_BTN_INT_DISABLE);
    sms_monitor_get_states("[sms_dualtimer2_fn]");
1000b5fe:	4846      	ldr	r0, [pc, #280]	; (1000b718 <sms_dualtimer2_fn+0x11c>)
1000b600:	4b46      	ldr	r3, [pc, #280]	; (1000b71c <sms_dualtimer2_fn+0x120>)
1000b602:	4798      	blx	r3
    switch(timer2_current_mode) {
1000b604:	4b46      	ldr	r3, [pc, #280]	; (1000b720 <sms_dualtimer2_fn+0x124>)
1000b606:	781b      	ldrb	r3, [r3, #0]
1000b608:	b2db      	uxtb	r3, r3
1000b60a:	2b02      	cmp	r3, #2
1000b60c:	d02f      	beq.n	1000b66e <sms_dualtimer2_fn+0x72>
1000b60e:	2b03      	cmp	r3, #3
1000b610:	d054      	beq.n	1000b6bc <sms_dualtimer2_fn+0xc0>
1000b612:	2b01      	cmp	r3, #1
1000b614:	d17f      	bne.n	1000b716 <sms_dualtimer2_fn+0x11a>
        case TIMER2_MODE_INDICATION_TOUT:
        timer2_current_mode = TIMER2_MODE_NONE;
1000b616:	2200      	movs	r2, #0
1000b618:	4b41      	ldr	r3, [pc, #260]	; (1000b720 <sms_dualtimer2_fn+0x124>)
1000b61a:	701a      	strb	r2, [r3, #0]
        if(ble_current_state == BLE_STATE_PAIRED) {
1000b61c:	4b41      	ldr	r3, [pc, #260]	; (1000b724 <sms_dualtimer2_fn+0x128>)
1000b61e:	781b      	ldrb	r3, [r3, #0]
1000b620:	2b22      	cmp	r3, #34	; 0x22
1000b622:	d107      	bne.n	1000b634 <sms_dualtimer2_fn+0x38>
            //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
            if(timer1_current_mode == TIMER1_MODE_NONE) {
1000b624:	4b40      	ldr	r3, [pc, #256]	; (1000b728 <sms_dualtimer2_fn+0x12c>)
1000b626:	781b      	ldrb	r3, [r3, #0]
1000b628:	2b00      	cmp	r3, #0
1000b62a:	d174      	bne.n	1000b716 <sms_dualtimer2_fn+0x11a>
                //release_sleep_lock();
                ulp_ready = true;
1000b62c:	3201      	adds	r2, #1
1000b62e:	4b3f      	ldr	r3, [pc, #252]	; (1000b72c <sms_dualtimer2_fn+0x130>)
1000b630:	701a      	strb	r2, [r3, #0]
1000b632:	e070      	b.n	1000b716 <sms_dualtimer2_fn+0x11a>
            }                
        }
        else {
            sms_ble_ind_retry++;
1000b634:	4a3e      	ldr	r2, [pc, #248]	; (1000b730 <sms_dualtimer2_fn+0x134>)
1000b636:	7813      	ldrb	r3, [r2, #0]
1000b638:	3301      	adds	r3, #1
1000b63a:	b2db      	uxtb	r3, r3
1000b63c:	7013      	strb	r3, [r2, #0]
            if(sms_ble_ind_retry >= BLE_INDICATION_RETRY_MAX) {
1000b63e:	2b00      	cmp	r3, #0
1000b640:	d009      	beq.n	1000b656 <sms_dualtimer2_fn+0x5a>
                DBG_LOG_CONT_DEV(" ...giving up!");
1000b642:	483c      	ldr	r0, [pc, #240]	; (1000b734 <sms_dualtimer2_fn+0x138>)
1000b644:	4b3c      	ldr	r3, [pc, #240]	; (1000b738 <sms_dualtimer2_fn+0x13c>)
1000b646:	4798      	blx	r3
                //DBG_LOG_DEV("[sms_dualtimer2_fn]\tTimer1 mode: %d", timer1_current_mode);
                timer2_current_mode = TIMER2_MODE_NONE;
1000b648:	2200      	movs	r2, #0
1000b64a:	4b35      	ldr	r3, [pc, #212]	; (1000b720 <sms_dualtimer2_fn+0x124>)
1000b64c:	701a      	strb	r2, [r3, #0]
                ble_current_state = BLE_STATE_PAIRED;
1000b64e:	3222      	adds	r2, #34	; 0x22
1000b650:	4b34      	ldr	r3, [pc, #208]	; (1000b724 <sms_dualtimer2_fn+0x128>)
1000b652:	701a      	strb	r2, [r3, #0]
1000b654:	e05f      	b.n	1000b716 <sms_dualtimer2_fn+0x11a>
                //DBG_LOG_DEV("[sms_dualtimer2_fn]\t\tStarting sensors...");
                //sms_sensors_toggle_interrupt(SMS_EXTINT_ENABLE);
                //if(timer1_current_mode == TIMER1_MODE_NONE) release_sleep_lock();
            }
            else {
                DBG_LOG_CONT_DEV(" ...waiting... counter: %d", sms_ble_ind_retry);
1000b656:	2100      	movs	r1, #0
1000b658:	4838      	ldr	r0, [pc, #224]	; (1000b73c <sms_dualtimer2_fn+0x140>)
1000b65a:	4b37      	ldr	r3, [pc, #220]	; (1000b738 <sms_dualtimer2_fn+0x13c>)
1000b65c:	4798      	blx	r3
                //sms_ble_send_characteristic(BLE_CHAR_PRESSURE);
                timer2_current_mode = TIMER2_MODE_INDICATION_TOUT;
1000b65e:	2201      	movs	r2, #1
1000b660:	4b2f      	ldr	r3, [pc, #188]	; (1000b720 <sms_dualtimer2_fn+0x124>)
1000b662:	701a      	strb	r2, [r3, #0]
                //ulp_ready = false;
                sms_dualtimer_start(TIMER_UNIT_MS, BLE_INDICATION_TOUT_MS, DUALTIMER_TIMER2);
1000b664:	2164      	movs	r1, #100	; 0x64
1000b666:	2001      	movs	r0, #1
1000b668:	4b35      	ldr	r3, [pc, #212]	; (1000b740 <sms_dualtimer2_fn+0x144>)
1000b66a:	4798      	blx	r3
1000b66c:	e053      	b.n	1000b716 <sms_dualtimer2_fn+0x11a>
            }
        }
        break;
        
        case TIMER2_MODE_LED_STARTUP:
        DBG_LOG_DEV("[sms_dualtimer2_fn]\t\tBlinking startup...");
1000b66e:	4835      	ldr	r0, [pc, #212]	; (1000b744 <sms_dualtimer2_fn+0x148>)
1000b670:	4b35      	ldr	r3, [pc, #212]	; (1000b748 <sms_dualtimer2_fn+0x14c>)
1000b672:	4798      	blx	r3
1000b674:	4835      	ldr	r0, [pc, #212]	; (1000b74c <sms_dualtimer2_fn+0x150>)
1000b676:	4b30      	ldr	r3, [pc, #192]	; (1000b738 <sms_dualtimer2_fn+0x13c>)
1000b678:	4798      	blx	r3
        timer2_current_mode = TIMER2_MODE_NONE;
1000b67a:	2200      	movs	r2, #0
1000b67c:	4b28      	ldr	r3, [pc, #160]	; (1000b720 <sms_dualtimer2_fn+0x124>)
1000b67e:	701a      	strb	r2, [r3, #0]
        sms_led_blink_cnt++;
1000b680:	4a33      	ldr	r2, [pc, #204]	; (1000b750 <sms_dualtimer2_fn+0x154>)
1000b682:	7813      	ldrb	r3, [r2, #0]
1000b684:	3301      	adds	r3, #1
1000b686:	b2db      	uxtb	r3, r3
1000b688:	7013      	strb	r3, [r2, #0]
        if(sms_led_blink_cnt >= SMS_BLINK_STARTUP_CNT) {
1000b68a:	7813      	ldrb	r3, [r2, #0]
1000b68c:	b2db      	uxtb	r3, r3
1000b68e:	2b07      	cmp	r3, #7
1000b690:	d908      	bls.n	1000b6a4 <sms_dualtimer2_fn+0xa8>
            sms_led_switch_off(SMS_LED_0_PIN);
1000b692:	2016      	movs	r0, #22
1000b694:	4b2f      	ldr	r3, [pc, #188]	; (1000b754 <sms_dualtimer2_fn+0x158>)
1000b696:	4798      	blx	r3
            //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
            /* Blinking done... starting ble advertisement */
            //DBG_LOG_DEV("[sms_dualtimer2_fn]\tSMS awake... starting advertisement");
            sms_ble_advertise();
1000b698:	4b2f      	ldr	r3, [pc, #188]	; (1000b758 <sms_dualtimer2_fn+0x15c>)
1000b69a:	4798      	blx	r3
            ulp_ready = true;
1000b69c:	2201      	movs	r2, #1
1000b69e:	4b23      	ldr	r3, [pc, #140]	; (1000b72c <sms_dualtimer2_fn+0x130>)
1000b6a0:	701a      	strb	r2, [r3, #0]
1000b6a2:	e038      	b.n	1000b716 <sms_dualtimer2_fn+0x11a>
        }
        else {
            //DBG_LOG_DEV("[sms_dualtimer2_fn]\tBlinking up... cnt = %d", sms_led_blink_cnt);
            sms_led_toggle(SMS_LED_0_PIN);
1000b6a4:	2016      	movs	r0, #22
1000b6a6:	4b2d      	ldr	r3, [pc, #180]	; (1000b75c <sms_dualtimer2_fn+0x160>)
1000b6a8:	4798      	blx	r3
            timer2_current_mode = TIMER2_MODE_LED_STARTUP;
1000b6aa:	2202      	movs	r2, #2
1000b6ac:	4b1c      	ldr	r3, [pc, #112]	; (1000b720 <sms_dualtimer2_fn+0x124>)
1000b6ae:	701a      	strb	r2, [r3, #0]
            //ulp_ready = false;
            sms_dualtimer_start(TIMER_UNIT_MS, SMS_BLINK_STARTUP_MS, DUALTIMER_TIMER2);
1000b6b0:	3a01      	subs	r2, #1
1000b6b2:	2164      	movs	r1, #100	; 0x64
1000b6b4:	2001      	movs	r0, #1
1000b6b6:	4b22      	ldr	r3, [pc, #136]	; (1000b740 <sms_dualtimer2_fn+0x144>)
1000b6b8:	4798      	blx	r3
1000b6ba:	e02c      	b.n	1000b716 <sms_dualtimer2_fn+0x11a>
        }
        break;
        
        case TIMER2_MODE_LED_SHUTDOWN:
        DBG_LOG_DEV("[sms_dualtimer2_fn]\t\tBlinking shutdown...");
1000b6bc:	4821      	ldr	r0, [pc, #132]	; (1000b744 <sms_dualtimer2_fn+0x148>)
1000b6be:	4b22      	ldr	r3, [pc, #136]	; (1000b748 <sms_dualtimer2_fn+0x14c>)
1000b6c0:	4798      	blx	r3
1000b6c2:	4827      	ldr	r0, [pc, #156]	; (1000b760 <sms_dualtimer2_fn+0x164>)
1000b6c4:	4b1c      	ldr	r3, [pc, #112]	; (1000b738 <sms_dualtimer2_fn+0x13c>)
1000b6c6:	4798      	blx	r3
        timer2_current_mode = TIMER2_MODE_NONE;
1000b6c8:	2200      	movs	r2, #0
1000b6ca:	4b15      	ldr	r3, [pc, #84]	; (1000b720 <sms_dualtimer2_fn+0x124>)
1000b6cc:	701a      	strb	r2, [r3, #0]
        sms_led_blink_cnt++;
1000b6ce:	4a20      	ldr	r2, [pc, #128]	; (1000b750 <sms_dualtimer2_fn+0x154>)
1000b6d0:	7813      	ldrb	r3, [r2, #0]
1000b6d2:	3301      	adds	r3, #1
1000b6d4:	b2db      	uxtb	r3, r3
1000b6d6:	7013      	strb	r3, [r2, #0]
        if(sms_led_blink_cnt >= SMS_BLINK_SHTDWN_CNT) {
1000b6d8:	7813      	ldrb	r3, [r2, #0]
1000b6da:	b2db      	uxtb	r3, r3
1000b6dc:	2b03      	cmp	r3, #3
1000b6de:	d90e      	bls.n	1000b6fe <sms_dualtimer2_fn+0x102>
            sms_led_switch_off(SMS_LED_0_PIN);
1000b6e0:	2016      	movs	r0, #22
1000b6e2:	4b1c      	ldr	r3, [pc, #112]	; (1000b754 <sms_dualtimer2_fn+0x158>)
1000b6e4:	4798      	blx	r3
            DBG_LOG_DEV("[sms_dualtimer2_fn]\t\tPowering off...");
1000b6e6:	4817      	ldr	r0, [pc, #92]	; (1000b744 <sms_dualtimer2_fn+0x148>)
1000b6e8:	4b17      	ldr	r3, [pc, #92]	; (1000b748 <sms_dualtimer2_fn+0x14c>)
1000b6ea:	4798      	blx	r3
1000b6ec:	481d      	ldr	r0, [pc, #116]	; (1000b764 <sms_dualtimer2_fn+0x168>)
1000b6ee:	4b12      	ldr	r3, [pc, #72]	; (1000b738 <sms_dualtimer2_fn+0x13c>)
1000b6f0:	4798      	blx	r3
            //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
            sms_init_variables();
1000b6f2:	4b1d      	ldr	r3, [pc, #116]	; (1000b768 <sms_dualtimer2_fn+0x16c>)
1000b6f4:	4798      	blx	r3
            ulp_ready = true;
1000b6f6:	2201      	movs	r2, #1
1000b6f8:	4b0c      	ldr	r3, [pc, #48]	; (1000b72c <sms_dualtimer2_fn+0x130>)
1000b6fa:	701a      	strb	r2, [r3, #0]
1000b6fc:	e00b      	b.n	1000b716 <sms_dualtimer2_fn+0x11a>
            //release_sleep_lock();
        }
        else {
            //DBG_LOG_DEV("[sms_dualtimer2_fn]\tBLinking off... cnt = %d", sms_led_blink_cnt);
            sms_led_toggle(SMS_LED_0_PIN);
1000b6fe:	2016      	movs	r0, #22
1000b700:	4b16      	ldr	r3, [pc, #88]	; (1000b75c <sms_dualtimer2_fn+0x160>)
1000b702:	4798      	blx	r3
            timer2_current_mode = TIMER2_MODE_LED_SHUTDOWN;
1000b704:	2203      	movs	r2, #3
1000b706:	4b06      	ldr	r3, [pc, #24]	; (1000b720 <sms_dualtimer2_fn+0x124>)
1000b708:	701a      	strb	r2, [r3, #0]
            //ulp_ready = false;
            sms_dualtimer_start(TIMER_UNIT_MS, SMS_BLINK_SHTDWN_MS, DUALTIMER_TIMER2);
1000b70a:	3a02      	subs	r2, #2
1000b70c:	21c8      	movs	r1, #200	; 0xc8
1000b70e:	0049      	lsls	r1, r1, #1
1000b710:	2001      	movs	r0, #1
1000b712:	4b0b      	ldr	r3, [pc, #44]	; (1000b740 <sms_dualtimer2_fn+0x144>)
1000b714:	4798      	blx	r3
        case TIMER2_MODE_LED_CONNECTION_LOST:
        case TIMER2_MODE_NONE:
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
        break;
    }
1000b716:	bd10      	pop	{r4, pc}
1000b718:	10016f4c 	.word	0x10016f4c
1000b71c:	1000a991 	.word	0x1000a991
1000b720:	10019eb5 	.word	0x10019eb5
1000b724:	10019eb4 	.word	0x10019eb4
1000b728:	10019d08 	.word	0x10019d08
1000b72c:	10019d9d 	.word	0x10019d9d
1000b730:	10019ea9 	.word	0x10019ea9
1000b734:	10016f60 	.word	0x10016f60
1000b738:	10014fb1 	.word	0x10014fb1
1000b73c:	10016f70 	.word	0x10016f70
1000b740:	1000b291 	.word	0x1000b291
1000b744:	10016278 	.word	0x10016278
1000b748:	100150d1 	.word	0x100150d1
1000b74c:	10016f8c 	.word	0x10016f8c
1000b750:	10019ed8 	.word	0x10019ed8
1000b754:	1000ae1d 	.word	0x1000ae1d
1000b758:	1000a0d9 	.word	0x1000a0d9
1000b75c:	1000ae7d 	.word	0x1000ae7d
1000b760:	10016fb8 	.word	0x10016fb8
1000b764:	10016fe4 	.word	0x10016fe4
1000b768:	1000f55d 	.word	0x1000f55d

1000b76c <spi_slave_inst_get_config_defaults>:
void spi_slave_inst_get_config_defaults(
		struct spi_slave_inst_config *const config)
{
	Assert(config);

	config->ss_pin          = PIN_LP_GPIO_12;
1000b76c:	230c      	movs	r3, #12
1000b76e:	7003      	strb	r3, [r0, #0]
	config->address_enabled = false;
1000b770:	2300      	movs	r3, #0
1000b772:	7043      	strb	r3, [r0, #1]
	config->address         = 0;
1000b774:	7083      	strb	r3, [r0, #2]
}
1000b776:	4770      	bx	lr

1000b778 <spi_get_config_defaults>:
void spi_get_config_defaults(
		struct spi_config *const config)
{
	Assert(config);

	config->mode             = SPI_MODE_MASTER;
1000b778:	2301      	movs	r3, #1
1000b77a:	7003      	strb	r3, [r0, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
1000b77c:	2300      	movs	r3, #0
1000b77e:	7043      	strb	r3, [r0, #1]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
1000b780:	7083      	strb	r3, [r0, #2]
	config->clock_source     = SPI_CLK_INPUT_0;
1000b782:	70c3      	strb	r3, [r0, #3]
	config->clock_divider    = 129;
1000b784:	3381      	adds	r3, #129	; 0x81
1000b786:	7103      	strb	r3, [r0, #4]

	config->pin_number_pad[0] = PIN_LP_GPIO_10;
1000b788:	3b77      	subs	r3, #119	; 0x77
1000b78a:	6083      	str	r3, [r0, #8]
	config->pin_number_pad[1] = PIN_LP_GPIO_11;
1000b78c:	3301      	adds	r3, #1
1000b78e:	60c3      	str	r3, [r0, #12]
	config->pin_number_pad[2] = PIN_LP_GPIO_12;
1000b790:	3301      	adds	r3, #1
1000b792:	6103      	str	r3, [r0, #16]
	config->pin_number_pad[3] = PIN_LP_GPIO_13;
1000b794:	3301      	adds	r3, #1
1000b796:	6143      	str	r3, [r0, #20]

	config->pinmux_sel_pad[0] = MUX_LP_GPIO_10_SPI0_SCK;
1000b798:	3b0b      	subs	r3, #11
1000b79a:	6183      	str	r3, [r0, #24]
	config->pinmux_sel_pad[1] = MUX_LP_GPIO_11_SPI0_MOSI;
1000b79c:	61c3      	str	r3, [r0, #28]
	config->pinmux_sel_pad[2] = MUX_LP_GPIO_12_SPI0_SSN;
1000b79e:	6203      	str	r3, [r0, #32]
	config->pinmux_sel_pad[3] = MUX_LP_GPIO_13_SPI0_MISO;
1000b7a0:	6243      	str	r3, [r0, #36]	; 0x24
};
1000b7a2:	4770      	bx	lr

1000b7a4 <spi_attach_slave>:
 *
 */
void spi_attach_slave(
		struct spi_slave_inst *const slave,
		struct spi_slave_inst_config *const config)
{
1000b7a4:	b530      	push	{r4, r5, lr}
1000b7a6:	b083      	sub	sp, #12
1000b7a8:	0004      	movs	r4, r0
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
1000b7aa:	780b      	ldrb	r3, [r1, #0]
1000b7ac:	7003      	strb	r3, [r0, #0]
	slave->address_enabled = config->address_enabled;
1000b7ae:	784b      	ldrb	r3, [r1, #1]
1000b7b0:	7043      	strb	r3, [r0, #1]
	slave->address         = config->address;
1000b7b2:	788b      	ldrb	r3, [r1, #2]
1000b7b4:	7083      	strb	r3, [r0, #2]

	struct gpio_config config_gpio;
	gpio_get_config_defaults(&config_gpio);
1000b7b6:	ad01      	add	r5, sp, #4
1000b7b8:	0028      	movs	r0, r5
1000b7ba:	4b07      	ldr	r3, [pc, #28]	; (1000b7d8 <spi_attach_slave+0x34>)
1000b7bc:	4798      	blx	r3
	config_gpio.direction = GPIO_PIN_DIR_OUTPUT;
1000b7be:	2301      	movs	r3, #1
1000b7c0:	702b      	strb	r3, [r5, #0]
	gpio_pin_set_config(slave->ss_pin, &config_gpio);
1000b7c2:	7820      	ldrb	r0, [r4, #0]
1000b7c4:	0029      	movs	r1, r5
1000b7c6:	4b05      	ldr	r3, [pc, #20]	; (1000b7dc <spi_attach_slave+0x38>)
1000b7c8:	4798      	blx	r3

	gpio_pin_set_output_level(slave->ss_pin, true);
1000b7ca:	7820      	ldrb	r0, [r4, #0]
1000b7cc:	2101      	movs	r1, #1
1000b7ce:	4b04      	ldr	r3, [pc, #16]	; (1000b7e0 <spi_attach_slave+0x3c>)
1000b7d0:	4798      	blx	r3
}
1000b7d2:	b003      	add	sp, #12
1000b7d4:	bd30      	pop	{r4, r5, pc}
1000b7d6:	46c0      	nop			; (mov r8, r8)
1000b7d8:	1000bdbd 	.word	0x1000bdbd
1000b7dc:	1000bdcd 	.word	0x1000bdcd
1000b7e0:	1000c025 	.word	0x1000c025

1000b7e4 <spi_enable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void spi_enable(struct spi_module *const module)
{
	Spi *const spi_module = (module->hw);
1000b7e4:	6803      	ldr	r3, [r0, #0]
		NVIC_EnableIRQ(SPI1_TX_IRQn);
	}
#endif

	/* Enable SPI */
	spi_module->SPI_MODULE_ENABLE.reg = SPI_MODULE_ENABLE_ENABLE;
1000b7e6:	2201      	movs	r2, #1
1000b7e8:	761a      	strb	r2, [r3, #24]
}
1000b7ea:	4770      	bx	lr

1000b7ec <spi_disable>:
 * This function will disable the SPI module.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void spi_disable(struct spi_module *const module)
{
1000b7ec:	b510      	push	{r4, lr}
		NVIC_DisableIRQ(SPI1_TX_IRQn);
	}
#  endif

	/* Disable SPI */
	spi_module->SPI_MODULE_ENABLE.reg = (0x0ul << SPI_MODULE_ENABLE_ENABLE_Pos);
1000b7ee:	2300      	movs	r3, #0
1000b7f0:	6802      	ldr	r2, [r0, #0]
1000b7f2:	7613      	strb	r3, [r2, #24]
 */
static void _spi_clock_disable(struct spi_module *const module)
{
	Assert(module);

	Spi *const spi_module = (module->hw);
1000b7f4:	6803      	ldr	r3, [r0, #0]

	if (spi_module == (void *)SPI0) {
1000b7f6:	4a0d      	ldr	r2, [pc, #52]	; (1000b82c <spi_disable+0x40>)
1000b7f8:	4293      	cmp	r3, r2
1000b7fa:	d109      	bne.n	1000b810 <spi_disable+0x24>
		system_clock_peripheral_disable(PERIPHERAL_SPI0_SCK_CLK);
1000b7fc:	2041      	movs	r0, #65	; 0x41
1000b7fe:	4c0c      	ldr	r4, [pc, #48]	; (1000b830 <spi_disable+0x44>)
1000b800:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI0_SCK_PHASE);
1000b802:	2026      	movs	r0, #38	; 0x26
1000b804:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI0_IF);
1000b806:	2038      	movs	r0, #56	; 0x38
1000b808:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI0_CORE);
1000b80a:	2001      	movs	r0, #1
1000b80c:	47a0      	blx	r4
1000b80e:	e00b      	b.n	1000b828 <spi_disable+0x3c>
	} else if (spi_module == (void *)SPI1) {
1000b810:	4a08      	ldr	r2, [pc, #32]	; (1000b834 <spi_disable+0x48>)
1000b812:	4293      	cmp	r3, r2
1000b814:	d108      	bne.n	1000b828 <spi_disable+0x3c>
		system_clock_peripheral_disable(PERIPHERAL_SPI1_SCK_CLK);
1000b816:	2042      	movs	r0, #66	; 0x42
1000b818:	4c05      	ldr	r4, [pc, #20]	; (1000b830 <spi_disable+0x44>)
1000b81a:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI1_SCK_PHASE);
1000b81c:	2027      	movs	r0, #39	; 0x27
1000b81e:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI1_IF);
1000b820:	2039      	movs	r0, #57	; 0x39
1000b822:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI1_CORE);
1000b824:	2002      	movs	r0, #2
1000b826:	47a0      	blx	r4
#  endif

	/* Disable SPI */
	spi_module->SPI_MODULE_ENABLE.reg = (0x0ul << SPI_MODULE_ENABLE_ENABLE_Pos);
	_spi_clock_disable(module);
}
1000b828:	bd10      	pop	{r4, pc}
1000b82a:	46c0      	nop			; (mov r8, r8)
1000b82c:	40006000 	.word	0x40006000
1000b830:	1000c7bd 	.word	0x1000c7bd
1000b834:	40007000 	.word	0x40007000

1000b838 <spi_reset>:
 * disable it.
 *
 * \param[in,out] module Pointer to the software instance struct
 */
void spi_reset(struct spi_module *const module)
{
1000b838:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Spi *const spi_module = (module->hw);
1000b83a:	6804      	ldr	r4, [r0, #0]

	/* Disable the module */
	spi_disable(module);
1000b83c:	4b09      	ldr	r3, [pc, #36]	; (1000b864 <spi_reset+0x2c>)
1000b83e:	4798      	blx	r3

	/* Software reset the module */
	if(spi_module == (void *)SPI0) {
1000b840:	4b09      	ldr	r3, [pc, #36]	; (1000b868 <spi_reset+0x30>)
1000b842:	429c      	cmp	r4, r3
1000b844:	d105      	bne.n	1000b852 <spi_reset+0x1a>
		system_peripheral_reset(PERIPHERAL_SPI0_CORE);
1000b846:	2001      	movs	r0, #1
1000b848:	4c08      	ldr	r4, [pc, #32]	; (1000b86c <spi_reset+0x34>)
1000b84a:	47a0      	blx	r4
		system_peripheral_reset(PERIPHERAL_SPI0_IF);
1000b84c:	2038      	movs	r0, #56	; 0x38
1000b84e:	47a0      	blx	r4
1000b850:	e007      	b.n	1000b862 <spi_reset+0x2a>
	} else if (spi_module == (void *)SPI1) {
1000b852:	4b07      	ldr	r3, [pc, #28]	; (1000b870 <spi_reset+0x38>)
1000b854:	429c      	cmp	r4, r3
1000b856:	d104      	bne.n	1000b862 <spi_reset+0x2a>
		system_peripheral_reset(PERIPHERAL_SPI1_CORE);
1000b858:	2002      	movs	r0, #2
1000b85a:	4c04      	ldr	r4, [pc, #16]	; (1000b86c <spi_reset+0x34>)
1000b85c:	47a0      	blx	r4
		system_peripheral_reset(PERIPHERAL_SPI1_IF);
1000b85e:	2039      	movs	r0, #57	; 0x39
1000b860:	47a0      	blx	r4
	}
}
1000b862:	bd10      	pop	{r4, pc}
1000b864:	1000b7ed 	.word	0x1000b7ed
1000b868:	40006000 	.word	0x40006000
1000b86c:	1000cb29 	.word	0x1000cb29
1000b870:	40007000 	.word	0x40007000

1000b874 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Spi *const hw,
		const struct spi_config *const config)
{
1000b874:	b5f0      	push	{r4, r5, r6, r7, lr}
1000b876:	465f      	mov	r7, fp
1000b878:	4646      	mov	r6, r8
1000b87a:	b4c0      	push	{r6, r7}
1000b87c:	b083      	sub	sp, #12
1000b87e:	0006      	movs	r6, r0
1000b880:	4688      	mov	r8, r1
1000b882:	0015      	movs	r5, r2
	Assert(config);

	uint8_t idx;

	/* Initialize device instance */
	module->hw = hw;
1000b884:	6031      	str	r1, [r6, #0]

	Spi *const spi_module = (module->hw);

	/* Check if module is enabled. */
	if (spi_module->SPI_MODULE_ENABLE.reg & SPI_MODULE_ENABLE_MASK) {
1000b886:	7e0b      	ldrb	r3, [r1, #24]
1000b888:	07db      	lsls	r3, r3, #31
1000b88a:	d501      	bpl.n	1000b890 <spi_init+0x1c>
		spi_module->SPI_MODULE_ENABLE.reg = (0x0ul << SPI_MODULE_ENABLE_ENABLE_Pos);
1000b88c:	2300      	movs	r3, #0
1000b88e:	760b      	strb	r3, [r1, #24]
	}

	spi_reset(module);
1000b890:	0030      	movs	r0, r6
1000b892:	4b4a      	ldr	r3, [pc, #296]	; (1000b9bc <spi_init+0x148>)
1000b894:	4798      	blx	r3
 */
static void _spi_clock_enable(struct spi_module *const module)
{
	Assert(module);

	Spi *const spi_module = (module->hw);
1000b896:	6833      	ldr	r3, [r6, #0]

	if (spi_module == (void *)SPI0) {
1000b898:	4a49      	ldr	r2, [pc, #292]	; (1000b9c0 <spi_init+0x14c>)
1000b89a:	4293      	cmp	r3, r2
1000b89c:	d109      	bne.n	1000b8b2 <spi_init+0x3e>
		system_clock_peripheral_enable(PERIPHERAL_SPI0_SCK_CLK);
1000b89e:	2041      	movs	r0, #65	; 0x41
1000b8a0:	4c48      	ldr	r4, [pc, #288]	; (1000b9c4 <spi_init+0x150>)
1000b8a2:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI0_SCK_PHASE);
1000b8a4:	2026      	movs	r0, #38	; 0x26
1000b8a6:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI0_IF);
1000b8a8:	2038      	movs	r0, #56	; 0x38
1000b8aa:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI0_CORE);
1000b8ac:	2001      	movs	r0, #1
1000b8ae:	47a0      	blx	r4
1000b8b0:	e00b      	b.n	1000b8ca <spi_init+0x56>
	} else if (spi_module == (void *)SPI1) {
1000b8b2:	4a45      	ldr	r2, [pc, #276]	; (1000b9c8 <spi_init+0x154>)
1000b8b4:	4293      	cmp	r3, r2
1000b8b6:	d108      	bne.n	1000b8ca <spi_init+0x56>
		system_clock_peripheral_enable(PERIPHERAL_SPI1_SCK_CLK);
1000b8b8:	2042      	movs	r0, #66	; 0x42
1000b8ba:	4c42      	ldr	r4, [pc, #264]	; (1000b9c4 <spi_init+0x150>)
1000b8bc:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI1_SCK_PHASE);
1000b8be:	2027      	movs	r0, #39	; 0x27
1000b8c0:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI1_IF);
1000b8c2:	2039      	movs	r0, #57	; 0x39
1000b8c4:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI1_CORE);
1000b8c6:	2002      	movs	r0, #2
1000b8c8:	47a0      	blx	r4
	}
#endif

	//Program the pinmux.
	struct gpio_config config_gpio;
	gpio_get_config_defaults(&config_gpio);
1000b8ca:	a801      	add	r0, sp, #4
1000b8cc:	4b3f      	ldr	r3, [pc, #252]	; (1000b9cc <spi_init+0x158>)
1000b8ce:	4798      	blx	r3
1000b8d0:	002c      	movs	r4, r5
1000b8d2:	3408      	adds	r4, #8
1000b8d4:	2318      	movs	r3, #24
1000b8d6:	469b      	mov	fp, r3
1000b8d8:	44ab      	add	fp, r5
1000b8da:	0027      	movs	r7, r4

	/* Set the pinmux for this spi module. */
	for(idx = 0; idx < 4; idx++) {
		if (config->pin_number_pad[idx] != PINMUX_UNUSED) {
1000b8dc:	6820      	ldr	r0, [r4, #0]
1000b8de:	1c43      	adds	r3, r0, #1
1000b8e0:	d011      	beq.n	1000b906 <spi_init+0x92>
			if (config->mode == SPI_MODE_MASTER) {
1000b8e2:	782b      	ldrb	r3, [r5, #0]
1000b8e4:	2b01      	cmp	r3, #1
1000b8e6:	d102      	bne.n	1000b8ee <spi_init+0x7a>
				config_gpio.direction = GPIO_PIN_DIR_OUTPUT;
1000b8e8:	466a      	mov	r2, sp
1000b8ea:	7113      	strb	r3, [r2, #4]
1000b8ec:	e003      	b.n	1000b8f6 <spi_init+0x82>
			} else if (config->mode == SPI_MODE_SLAVE) {
1000b8ee:	2b00      	cmp	r3, #0
1000b8f0:	d101      	bne.n	1000b8f6 <spi_init+0x82>
				config_gpio.direction = GPIO_PIN_DIR_INPUT;
1000b8f2:	466a      	mov	r2, sp
1000b8f4:	7113      	strb	r3, [r2, #4]
			}
			gpio_pin_set_config(config->pin_number_pad[idx], &config_gpio);
1000b8f6:	b2c0      	uxtb	r0, r0
1000b8f8:	a901      	add	r1, sp, #4
1000b8fa:	4b35      	ldr	r3, [pc, #212]	; (1000b9d0 <spi_init+0x15c>)
1000b8fc:	4798      	blx	r3
			gpio_pinmux_cofiguration(config->pin_number_pad[idx], \
1000b8fe:	8a39      	ldrh	r1, [r7, #16]
1000b900:	7838      	ldrb	r0, [r7, #0]
1000b902:	4b34      	ldr	r3, [pc, #208]	; (1000b9d4 <spi_init+0x160>)
1000b904:	4798      	blx	r3
1000b906:	3404      	adds	r4, #4
	//Program the pinmux.
	struct gpio_config config_gpio;
	gpio_get_config_defaults(&config_gpio);

	/* Set the pinmux for this spi module. */
	for(idx = 0; idx < 4; idx++) {
1000b908:	455c      	cmp	r4, fp
1000b90a:	d1e6      	bne.n	1000b8da <spi_init+0x66>
						(uint16_t)(config->pinmux_sel_pad[idx]));
		}
	}

	/* Set up the input clock for the module */
	spi_module->CLOCK_SOURCE_SELECT.reg = config->clock_source;
1000b90c:	78eb      	ldrb	r3, [r5, #3]
1000b90e:	4642      	mov	r2, r8
1000b910:	7413      	strb	r3, [r2, #16]

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
1000b912:	782b      	ldrb	r3, [r5, #0]
1000b914:	2b01      	cmp	r3, #1
1000b916:	d100      	bne.n	1000b91a <spi_init+0xa6>
		/* Set the mode in SPI master mode */
		spi_module->SPI_MASTER_MODE.reg = SPI_MODE_MASTER;
1000b918:	7713      	strb	r3, [r2, #28]
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
1000b91a:	782b      	ldrb	r3, [r5, #0]
1000b91c:	2b00      	cmp	r3, #0
1000b91e:	d101      	bne.n	1000b924 <spi_init+0xb0>
		/* Set the mode in SPI slave mode */
		spi_module->SPI_MASTER_MODE.reg = SPI_MODE_SLAVE;
1000b920:	4642      	mov	r2, r8
1000b922:	7713      	strb	r3, [r2, #28]
		const struct spi_config *const config)
{
	Assert(module);
	Assert(config);

	Spi *const spi_module = (module->hw);
1000b924:	6833      	ldr	r3, [r6, #0]

	module->mode  = config->mode;
1000b926:	782a      	ldrb	r2, [r5, #0]
1000b928:	7172      	strb	r2, [r6, #5]

#if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
1000b92a:	782a      	ldrb	r2, [r5, #0]
1000b92c:	2a01      	cmp	r2, #1
1000b92e:	d101      	bne.n	1000b934 <spi_init+0xc0>
		spi_module->SPI_CLK_DIVIDER.reg = config->clock_divider;
1000b930:	792a      	ldrb	r2, [r5, #4]
1000b932:	829a      	strh	r2, [r3, #20]
	}
#endif

	/* Set data order */
	if (config->data_order == SPI_DATA_ORDER_LSB) {
1000b934:	786a      	ldrb	r2, [r5, #1]
1000b936:	2a04      	cmp	r2, #4
1000b938:	d104      	bne.n	1000b944 <spi_init+0xd0>
		spi_module->SPI_CONFIGURATION.bit.LSB_FIRST_ENABLE = 0x1;
1000b93a:	2124      	movs	r1, #36	; 0x24
1000b93c:	5c58      	ldrb	r0, [r3, r1]
1000b93e:	4302      	orrs	r2, r0
1000b940:	545a      	strb	r2, [r3, r1]
1000b942:	e004      	b.n	1000b94e <spi_init+0xda>
	} else {
		spi_module->SPI_CONFIGURATION.bit.LSB_FIRST_ENABLE = 0x0;
1000b944:	2124      	movs	r1, #36	; 0x24
1000b946:	5c5a      	ldrb	r2, [r3, r1]
1000b948:	2004      	movs	r0, #4
1000b94a:	4382      	bics	r2, r0
1000b94c:	545a      	strb	r2, [r3, r1]
	}

	/* Set clock polarity and clock phase */
	switch(config->transfer_mode)
1000b94e:	78aa      	ldrb	r2, [r5, #2]
1000b950:	2a01      	cmp	r2, #1
1000b952:	d01a      	beq.n	1000b98a <spi_init+0x116>
1000b954:	2a00      	cmp	r2, #0
1000b956:	d004      	beq.n	1000b962 <spi_init+0xee>
1000b958:	2a02      	cmp	r2, #2
1000b95a:	d00c      	beq.n	1000b976 <spi_init+0x102>
1000b95c:	2a03      	cmp	r2, #3
1000b95e:	d01e      	beq.n	1000b99e <spi_init+0x12a>
1000b960:	e026      	b.n	1000b9b0 <spi_init+0x13c>
	{
		case SPI_TRANSFER_MODE_0:
			spi_module->SPI_CONFIGURATION.bit.SCK_PHASE = 0x0;
1000b962:	2224      	movs	r2, #36	; 0x24
1000b964:	5c99      	ldrb	r1, [r3, r2]
1000b966:	2002      	movs	r0, #2
1000b968:	4381      	bics	r1, r0
1000b96a:	5499      	strb	r1, [r3, r2]
			spi_module->SPI_CONFIGURATION.bit.SCK_POLARITY = 0x0;
1000b96c:	5c99      	ldrb	r1, [r3, r2]
1000b96e:	3801      	subs	r0, #1
1000b970:	4381      	bics	r1, r0
1000b972:	5499      	strb	r1, [r3, r2]
1000b974:	e01c      	b.n	1000b9b0 <spi_init+0x13c>
			break;
		case SPI_TRANSFER_MODE_1:
			spi_module->SPI_CONFIGURATION.bit.SCK_PHASE = 0x1;
1000b976:	2224      	movs	r2, #36	; 0x24
1000b978:	5c98      	ldrb	r0, [r3, r2]
1000b97a:	2102      	movs	r1, #2
1000b97c:	4301      	orrs	r1, r0
1000b97e:	5499      	strb	r1, [r3, r2]
			spi_module->SPI_CONFIGURATION.bit.SCK_POLARITY = 0x0;
1000b980:	5c99      	ldrb	r1, [r3, r2]
1000b982:	2001      	movs	r0, #1
1000b984:	4381      	bics	r1, r0
1000b986:	5499      	strb	r1, [r3, r2]
1000b988:	e012      	b.n	1000b9b0 <spi_init+0x13c>
			break;
		case SPI_TRANSFER_MODE_2:
			spi_module->SPI_CONFIGURATION.bit.SCK_PHASE = 0x0;
1000b98a:	2224      	movs	r2, #36	; 0x24
1000b98c:	5c99      	ldrb	r1, [r3, r2]
1000b98e:	2002      	movs	r0, #2
1000b990:	4381      	bics	r1, r0
1000b992:	5499      	strb	r1, [r3, r2]
			spi_module->SPI_CONFIGURATION.bit.SCK_POLARITY = 0x1;
1000b994:	5c98      	ldrb	r0, [r3, r2]
1000b996:	2101      	movs	r1, #1
1000b998:	4301      	orrs	r1, r0
1000b99a:	5499      	strb	r1, [r3, r2]
1000b99c:	e008      	b.n	1000b9b0 <spi_init+0x13c>
			break;
		case SPI_TRANSFER_MODE_3:
			spi_module->SPI_CONFIGURATION.bit.SCK_PHASE = 0x1;
1000b99e:	2224      	movs	r2, #36	; 0x24
1000b9a0:	5c98      	ldrb	r0, [r3, r2]
1000b9a2:	2102      	movs	r1, #2
1000b9a4:	4301      	orrs	r1, r0
1000b9a6:	5499      	strb	r1, [r3, r2]
			spi_module->SPI_CONFIGURATION.bit.SCK_POLARITY = 0x1;
1000b9a8:	5c98      	ldrb	r0, [r3, r2]
1000b9aa:	2101      	movs	r1, #1
1000b9ac:	4301      	orrs	r1, r0
1000b9ae:	5499      	strb	r1, [r3, r2]
	module->locked                     = 0;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
1000b9b0:	2000      	movs	r0, #0
1000b9b2:	b003      	add	sp, #12
1000b9b4:	bc0c      	pop	{r2, r3}
1000b9b6:	4690      	mov	r8, r2
1000b9b8:	469b      	mov	fp, r3
1000b9ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000b9bc:	1000b839 	.word	0x1000b839
1000b9c0:	40006000 	.word	0x40006000
1000b9c4:	1000c461 	.word	0x1000c461
1000b9c8:	40007000 	.word	0x40007000
1000b9cc:	1000bdbd 	.word	0x1000bdbd
1000b9d0:	1000bdcd 	.word	0x1000bdcd
1000b9d4:	1000c0b1 	.word	0x1000c0b1

1000b9d8 <spi_transceive_buffer_wait>:
enum status_code spi_transceive_buffer_wait(
		struct spi_module *const module,
		uint8_t *tx_data,
		uint8_t *rx_data,
		uint16_t length)
{
1000b9d8:	b5f0      	push	{r4, r5, r6, r7, lr}
1000b9da:	b083      	sub	sp, #12
	Spi *spi_module = module->hw;
1000b9dc:	6804      	ldr	r4, [r0, #0]
	uint8_t dummy = 0;
1000b9de:	2600      	movs	r6, #0
1000b9e0:	466d      	mov	r5, sp
1000b9e2:	71ee      	strb	r6, [r5, #7]
1000b9e4:	3507      	adds	r5, #7
	uint8_t skip_mosi = 0;
	uint8_t skip_miso = 0;
	uint8_t status;
	uint16_t transfer_len = 0;

	if(spi_module == 0) {
1000b9e6:	2c00      	cmp	r4, #0
1000b9e8:	d034      	beq.n	1000ba54 <spi_transceive_buffer_wait+0x7c>
		return STATUS_ERR_NOT_INITIALIZED;
	}
	if(!tx_data) {
1000b9ea:	2900      	cmp	r1, #0
1000b9ec:	d104      	bne.n	1000b9f8 <spi_transceive_buffer_wait+0x20>
		tx_data = &dummy;
		*tx_data = module->tx_dummy_byte;
1000b9ee:	0029      	movs	r1, r5
1000b9f0:	7980      	ldrb	r0, [r0, #6]
1000b9f2:	7028      	strb	r0, [r5, #0]
		skip_mosi = 1;
1000b9f4:	2701      	movs	r7, #1
1000b9f6:	e00b      	b.n	1000ba10 <spi_transceive_buffer_wait+0x38>
	} else if(!rx_data) {
1000b9f8:	2a00      	cmp	r2, #0
1000b9fa:	d005      	beq.n	1000ba08 <spi_transceive_buffer_wait+0x30>
		rx_data = &dummy;
		skip_miso = 1;
	} else if(length == 0) {
		return STATUS_ERR_INVALID_ARG;
1000b9fc:	2017      	movs	r0, #23
		*tx_data = module->tx_dummy_byte;
		skip_mosi = 1;
	} else if(!rx_data) {
		rx_data = &dummy;
		skip_miso = 1;
	} else if(length == 0) {
1000b9fe:	2b00      	cmp	r3, #0
1000ba00:	d029      	beq.n	1000ba56 <spi_transceive_buffer_wait+0x7e>
		uint16_t length)
{
	Spi *spi_module = module->hw;
	uint8_t dummy = 0;
	uint8_t skip_mosi = 0;
	uint8_t skip_miso = 0;
1000ba02:	2600      	movs	r6, #0
		uint8_t *rx_data,
		uint16_t length)
{
	Spi *spi_module = module->hw;
	uint8_t dummy = 0;
	uint8_t skip_mosi = 0;
1000ba04:	2700      	movs	r7, #0
1000ba06:	e003      	b.n	1000ba10 <spi_transceive_buffer_wait+0x38>
		tx_data = &dummy;
		*tx_data = module->tx_dummy_byte;
		skip_mosi = 1;
	} else if(!rx_data) {
		rx_data = &dummy;
		skip_miso = 1;
1000ba08:	2601      	movs	r6, #1
		uint8_t *rx_data,
		uint16_t length)
{
	Spi *spi_module = module->hw;
	uint8_t dummy = 0;
	uint8_t skip_mosi = 0;
1000ba0a:	2700      	movs	r7, #0
	if(!tx_data) {
		tx_data = &dummy;
		*tx_data = module->tx_dummy_byte;
		skip_mosi = 1;
	} else if(!rx_data) {
		rx_data = &dummy;
1000ba0c:	466a      	mov	r2, sp
1000ba0e:	3207      	adds	r2, #7
 */
static bool _spi_is_active(Spi *const spi_module)
{
	Assert(spi_module);

	return spi_module->SPI_BUS_STATUS.bit.SPI_ACTIVE;
1000ba10:	2528      	movs	r5, #40	; 0x28
1000ba12:	5d60      	ldrb	r0, [r4, r5]
	}

	/* Check for Idle */
	do {
		status = _spi_is_active(spi_module);
	}while(status);
1000ba14:	07c0      	lsls	r0, r0, #31
1000ba16:	d4fc      	bmi.n	1000ba12 <spi_transceive_buffer_wait+0x3a>

	/* Clear all status registers */
	spi_module->RECEIVE_STATUS.reg;
1000ba18:	7b20      	ldrb	r0, [r4, #12]
	spi_module->TRANSMIT_STATUS.reg;
1000ba1a:	7a20      	ldrb	r0, [r4, #8]

	/* Start transfer */
	while(transfer_len < length) {
1000ba1c:	2b00      	cmp	r3, #0
1000ba1e:	d014      	beq.n	1000ba4a <spi_transceive_buffer_wait+0x72>
1000ba20:	2500      	movs	r5, #0
		/* Read data shifted from MISO */
		while(!_spi_is_ready_to_read(spi_module));
		*rx_data = spi_module->RECEIVE_DATA.reg;
		transfer_len++;
		if (!skip_mosi) {
			tx_data++;
1000ba22:	4278      	negs	r0, r7
1000ba24:	4147      	adcs	r7, r0
		}
		if (!skip_miso) {
			rx_data++;
1000ba26:	4270      	negs	r0, r6
1000ba28:	4146      	adcs	r6, r0
		Spi *const spi_module)
{
	Assert(spi_module);

	/* Check interrupt flag */
	return (spi_module->TRANSMIT_STATUS.bit.TX_FIFO_NOT_FULL);
1000ba2a:	7a20      	ldrb	r0, [r4, #8]
	spi_module->TRANSMIT_STATUS.reg;

	/* Start transfer */
	while(transfer_len < length) {
		/* Write data to MOSI */
		while(!_spi_is_ready_to_write(spi_module));
1000ba2c:	07c0      	lsls	r0, r0, #31
1000ba2e:	d5fc      	bpl.n	1000ba2a <spi_transceive_buffer_wait+0x52>
		spi_module->TRANSMIT_DATA.reg = *tx_data;
1000ba30:	7808      	ldrb	r0, [r1, #0]
1000ba32:	7020      	strb	r0, [r4, #0]
		Spi *const spi_module)
{
	Assert(spi_module);

	/* Check interrupt flag */
	return (spi_module->RECEIVE_STATUS.bit.RX_FIFO_NOT_EMPTY);
1000ba34:	7b20      	ldrb	r0, [r4, #12]
	while(transfer_len < length) {
		/* Write data to MOSI */
		while(!_spi_is_ready_to_write(spi_module));
		spi_module->TRANSMIT_DATA.reg = *tx_data;
		/* Read data shifted from MISO */
		while(!_spi_is_ready_to_read(spi_module));
1000ba36:	07c0      	lsls	r0, r0, #31
1000ba38:	d5fc      	bpl.n	1000ba34 <spi_transceive_buffer_wait+0x5c>
		*rx_data = spi_module->RECEIVE_DATA.reg;
1000ba3a:	7920      	ldrb	r0, [r4, #4]
1000ba3c:	7010      	strb	r0, [r2, #0]
		transfer_len++;
1000ba3e:	3501      	adds	r5, #1
1000ba40:	b2ad      	uxth	r5, r5
		if (!skip_mosi) {
			tx_data++;
1000ba42:	19c9      	adds	r1, r1, r7
		}
		if (!skip_miso) {
			rx_data++;
1000ba44:	1992      	adds	r2, r2, r6
	/* Clear all status registers */
	spi_module->RECEIVE_STATUS.reg;
	spi_module->TRANSMIT_STATUS.reg;

	/* Start transfer */
	while(transfer_len < length) {
1000ba46:	42ab      	cmp	r3, r5
1000ba48:	d1ef      	bne.n	1000ba2a <spi_transceive_buffer_wait+0x52>
		Spi *const spi_module)
{
	Assert(spi_module);

	/* Check interrupt flag */
	return (spi_module->TRANSMIT_STATUS.bit.TX_FIFO_EMPTY);
1000ba4a:	7a23      	ldrb	r3, [r4, #8]
		}
	}
	/* check TXFIFO is empty */
	do {
		status = _spi_is_write_complete(spi_module);
	}while(!status);
1000ba4c:	06db      	lsls	r3, r3, #27
1000ba4e:	d5fc      	bpl.n	1000ba4a <spi_transceive_buffer_wait+0x72>

	return STATUS_OK;
1000ba50:	2000      	movs	r0, #0
1000ba52:	e000      	b.n	1000ba56 <spi_transceive_buffer_wait+0x7e>
	uint8_t skip_miso = 0;
	uint8_t status;
	uint16_t transfer_len = 0;

	if(spi_module == 0) {
		return STATUS_ERR_NOT_INITIALIZED;
1000ba54:	201f      	movs	r0, #31
		status = _spi_is_write_complete(spi_module);
	}while(!status);

	return STATUS_OK;

}
1000ba56:	b003      	add	sp, #12
1000ba58:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000ba5a:	46c0      	nop			; (mov r8, r8)

1000ba5c <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		bool select)
{
1000ba5c:	b510      	push	{r4, lr}
	uint8_t gpio_num = slave->ss_pin;
1000ba5e:	7808      	ldrb	r0, [r1, #0]
	if(select) {
1000ba60:	2a00      	cmp	r2, #0
1000ba62:	d003      	beq.n	1000ba6c <spi_select_slave+0x10>
		/* ASSERT Slave select pin */
		gpio_pin_set_output_level(gpio_num, false);
1000ba64:	2100      	movs	r1, #0
1000ba66:	4b04      	ldr	r3, [pc, #16]	; (1000ba78 <spi_select_slave+0x1c>)
1000ba68:	4798      	blx	r3
1000ba6a:	e002      	b.n	1000ba72 <spi_select_slave+0x16>
	} else {
		/* DEASSERT Slave select pin */
		gpio_pin_set_output_level(gpio_num, true);
1000ba6c:	2101      	movs	r1, #1
1000ba6e:	4b02      	ldr	r3, [pc, #8]	; (1000ba78 <spi_select_slave+0x1c>)
1000ba70:	4798      	blx	r3
	}

	return STATUS_OK;
}
1000ba72:	2000      	movs	r0, #0
1000ba74:	bd10      	pop	{r4, pc}
1000ba76:	46c0      	nop			; (mov r8, r8)
1000ba78:	1000c025 	.word	0x1000c025

1000ba7c <dualtimer_isr_handler>:
 *
 * Dualtimer ISR handler.
 *
 */
static void dualtimer_isr_handler(void)
{
1000ba7c:	b510      	push	{r4, lr}
 * \retval The interrupt status of timer1/timer2
 */
uint8_t dualtimer_get_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		return DUALTIMER0->TIMER1MIS.reg;
1000ba7e:	4b0d      	ldr	r3, [pc, #52]	; (1000bab4 <dualtimer_isr_handler+0x38>)
1000ba80:	7d1b      	ldrb	r3, [r3, #20]
 * Dualtimer ISR handler.
 *
 */
static void dualtimer_isr_handler(void)
{
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER1)) {
1000ba82:	2b00      	cmp	r3, #0
1000ba84:	d007      	beq.n	1000ba96 <dualtimer_isr_handler+0x1a>
 * \param[in]     timer        Timer1/Timer2
 */
void dualtimer_clear_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		DUALTIMER0->TIMER1INTCLR.reg = 1;
1000ba86:	2201      	movs	r2, #1
1000ba88:	4b0a      	ldr	r3, [pc, #40]	; (1000bab4 <dualtimer_isr_handler+0x38>)
1000ba8a:	731a      	strb	r2, [r3, #12]
 */
static void dualtimer_isr_handler(void)
{
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER1)) {
		dualtimer_clear_interrupt_status(DUALTIMER_TIMER1);
		if (dualtimer_callback_timer1)
1000ba8c:	4b0a      	ldr	r3, [pc, #40]	; (1000bab8 <dualtimer_isr_handler+0x3c>)
1000ba8e:	681b      	ldr	r3, [r3, #0]
1000ba90:	2b00      	cmp	r3, #0
1000ba92:	d000      	beq.n	1000ba96 <dualtimer_isr_handler+0x1a>
			dualtimer_callback_timer1();
1000ba94:	4798      	blx	r3
uint8_t dualtimer_get_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		return DUALTIMER0->TIMER1MIS.reg;
	} else {
		return DUALTIMER0->TIMER2MIS.reg;
1000ba96:	2334      	movs	r3, #52	; 0x34
1000ba98:	4a06      	ldr	r2, [pc, #24]	; (1000bab4 <dualtimer_isr_handler+0x38>)
1000ba9a:	5cd3      	ldrb	r3, [r2, r3]
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER1)) {
		dualtimer_clear_interrupt_status(DUALTIMER_TIMER1);
		if (dualtimer_callback_timer1)
			dualtimer_callback_timer1();
	}
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER2)) {
1000ba9c:	2b00      	cmp	r3, #0
1000ba9e:	d007      	beq.n	1000bab0 <dualtimer_isr_handler+0x34>
void dualtimer_clear_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		DUALTIMER0->TIMER1INTCLR.reg = 1;
	} else {
		DUALTIMER0->TIMER2INTCLR.reg = 1;
1000baa0:	2101      	movs	r1, #1
1000baa2:	232c      	movs	r3, #44	; 0x2c
1000baa4:	54d1      	strb	r1, [r2, r3]
		if (dualtimer_callback_timer1)
			dualtimer_callback_timer1();
	}
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER2)) {
		dualtimer_clear_interrupt_status(DUALTIMER_TIMER2);
		if (dualtimer_callback_timer2)
1000baa6:	4b05      	ldr	r3, [pc, #20]	; (1000babc <dualtimer_isr_handler+0x40>)
1000baa8:	681b      	ldr	r3, [r3, #0]
1000baaa:	2b00      	cmp	r3, #0
1000baac:	d000      	beq.n	1000bab0 <dualtimer_isr_handler+0x34>
			dualtimer_callback_timer2();
1000baae:	4798      	blx	r3
	}
}
1000bab0:	bd10      	pop	{r4, pc}
1000bab2:	46c0      	nop			; (mov r8, r8)
1000bab4:	40001000 	.word	0x40001000
1000bab8:	10018260 	.word	0x10018260
1000babc:	10018264 	.word	0x10018264

1000bac0 <dualtimer_get_config_defaults>:
 *
 * \param[out]  config  Pointer to a DUALTIMER module configuration structure to set
 */
void dualtimer_get_config_defaults(struct dualtimer_config *config)
{
	config->timer1.timer_enable = true;
1000bac0:	2301      	movs	r3, #1
1000bac2:	7003      	strb	r3, [r0, #0]
	config->timer2.timer_enable = true;
1000bac4:	7303      	strb	r3, [r0, #12]

	config->timer1.counter_mode = DUALTIMER_PERIODIC_MODE;
1000bac6:	2202      	movs	r2, #2
1000bac8:	7042      	strb	r2, [r0, #1]
	config->timer2.counter_mode = DUALTIMER_PERIODIC_MODE;
1000baca:	7342      	strb	r2, [r0, #13]

	config->timer1.counter_size = DUALTIMER_COUNTER_SIZE_32BIT;
1000bacc:	7083      	strb	r3, [r0, #2]
	config->timer2.counter_size = DUALTIMER_COUNTER_SIZE_32BIT;
1000bace:	7383      	strb	r3, [r0, #14]

	config->timer1.clock_prescaler = DUALTIMER_CLOCK_PRESCALER_DIV1;
1000bad0:	2200      	movs	r2, #0
1000bad2:	70c2      	strb	r2, [r0, #3]
	config->timer2.clock_prescaler = DUALTIMER_CLOCK_PRESCALER_DIV1;
1000bad4:	73c2      	strb	r2, [r0, #15]

	config->timer1.interrup_enable = true;
1000bad6:	7103      	strb	r3, [r0, #4]
	config->timer2.interrup_enable = true;
1000bad8:	7403      	strb	r3, [r0, #16]

	config->timer1.load_value = 0;
1000bada:	6082      	str	r2, [r0, #8]
	config->timer2.load_value = 0;
1000badc:	6142      	str	r2, [r0, #20]

	config->clock_source = DUALTIMER_CLK_INPUT_0;
1000bade:	7602      	strb	r2, [r0, #24]
}
1000bae0:	4770      	bx	lr
1000bae2:	46c0      	nop			; (mov r8, r8)

1000bae4 <dualtimer_get_value>:
 *
 * \retval Timer1/Timer2 current value
 */
uint32_t dualtimer_get_value(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
1000bae4:	2800      	cmp	r0, #0
1000bae6:	d102      	bne.n	1000baee <dualtimer_get_value+0xa>
		return DUALTIMER0->TIMER1VALUE.reg;
1000bae8:	4b02      	ldr	r3, [pc, #8]	; (1000baf4 <dualtimer_get_value+0x10>)
1000baea:	6858      	ldr	r0, [r3, #4]
1000baec:	e001      	b.n	1000baf2 <dualtimer_get_value+0xe>
	} else {
		return DUALTIMER0->TIMER2VALUE.reg;
1000baee:	4b01      	ldr	r3, [pc, #4]	; (1000baf4 <dualtimer_get_value+0x10>)
1000baf0:	6a58      	ldr	r0, [r3, #36]	; 0x24
	}
}
1000baf2:	4770      	bx	lr
1000baf4:	40001000 	.word	0x40001000

1000baf8 <dualtimer_set_counter>:
 * \param[in]     value        Load value
 */
void dualtimer_set_counter(enum dualtimer_timer timer,
		enum dualtimer_set_register cur_bg, uint32_t value)
{
	if (timer == DUALTIMER_TIMER1) {
1000baf8:	2800      	cmp	r0, #0
1000bafa:	d107      	bne.n	1000bb0c <dualtimer_set_counter+0x14>
		if (cur_bg == DUALTIMER_SET_CURRUNT_REG) {
1000bafc:	2900      	cmp	r1, #0
1000bafe:	d102      	bne.n	1000bb06 <dualtimer_set_counter+0xe>
			DUALTIMER0->TIMER1LOAD.reg = value;
1000bb00:	4b06      	ldr	r3, [pc, #24]	; (1000bb1c <dualtimer_set_counter+0x24>)
1000bb02:	601a      	str	r2, [r3, #0]
1000bb04:	e009      	b.n	1000bb1a <dualtimer_set_counter+0x22>
		} else {
			DUALTIMER0->TIMER1BGLOAD.reg = value;
1000bb06:	4b05      	ldr	r3, [pc, #20]	; (1000bb1c <dualtimer_set_counter+0x24>)
1000bb08:	619a      	str	r2, [r3, #24]
1000bb0a:	e006      	b.n	1000bb1a <dualtimer_set_counter+0x22>
		}
	} else {
		if (cur_bg == DUALTIMER_SET_CURRUNT_REG) {
1000bb0c:	2900      	cmp	r1, #0
1000bb0e:	d102      	bne.n	1000bb16 <dualtimer_set_counter+0x1e>
			DUALTIMER0->TIMER2LOAD.reg = value;
1000bb10:	4b02      	ldr	r3, [pc, #8]	; (1000bb1c <dualtimer_set_counter+0x24>)
1000bb12:	621a      	str	r2, [r3, #32]
1000bb14:	e001      	b.n	1000bb1a <dualtimer_set_counter+0x22>
			} else {
			DUALTIMER0->TIMER2BGLOAD.reg = value;
1000bb16:	4b01      	ldr	r3, [pc, #4]	; (1000bb1c <dualtimer_set_counter+0x24>)
1000bb18:	639a      	str	r2, [r3, #56]	; 0x38
		}
	}
}
1000bb1a:	4770      	bx	lr
1000bb1c:	40001000 	.word	0x40001000

1000bb20 <dualtimer_enable>:
 *
 * \param[in]     timer        Timer1/Timer2
 */
void dualtimer_enable(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
1000bb20:	2800      	cmp	r0, #0
1000bb22:	d105      	bne.n	1000bb30 <dualtimer_enable+0x10>
		DUALTIMER0->TIMER1CONTROL.reg |= DUALTIMER_TIMER1CONTROL_TIMER_ENABLE;
1000bb24:	4a06      	ldr	r2, [pc, #24]	; (1000bb40 <dualtimer_enable+0x20>)
1000bb26:	7a11      	ldrb	r1, [r2, #8]
1000bb28:	2380      	movs	r3, #128	; 0x80
1000bb2a:	430b      	orrs	r3, r1
1000bb2c:	7213      	strb	r3, [r2, #8]
1000bb2e:	e005      	b.n	1000bb3c <dualtimer_enable+0x1c>
	} else {
		DUALTIMER0->TIMER2CONTROL.reg |= DUALTIMER_TIMER2CONTROL_TIMER_ENABLE;
1000bb30:	4903      	ldr	r1, [pc, #12]	; (1000bb40 <dualtimer_enable+0x20>)
1000bb32:	2228      	movs	r2, #40	; 0x28
1000bb34:	5c88      	ldrb	r0, [r1, r2]
1000bb36:	2380      	movs	r3, #128	; 0x80
1000bb38:	4303      	orrs	r3, r0
1000bb3a:	548b      	strb	r3, [r1, r2]
	}
}
1000bb3c:	4770      	bx	lr
1000bb3e:	46c0      	nop			; (mov r8, r8)
1000bb40:	40001000 	.word	0x40001000

1000bb44 <dualtimer_disable>:
 *
 * \param[in]     timer        Timer1/Timer2
 */
void dualtimer_disable(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
1000bb44:	2800      	cmp	r0, #0
1000bb46:	d105      	bne.n	1000bb54 <dualtimer_disable+0x10>
		DUALTIMER0->TIMER1CONTROL.reg &= ~DUALTIMER_TIMER1CONTROL_TIMER_ENABLE;
1000bb48:	4a06      	ldr	r2, [pc, #24]	; (1000bb64 <dualtimer_disable+0x20>)
1000bb4a:	7a11      	ldrb	r1, [r2, #8]
1000bb4c:	237f      	movs	r3, #127	; 0x7f
1000bb4e:	400b      	ands	r3, r1
1000bb50:	7213      	strb	r3, [r2, #8]
1000bb52:	e005      	b.n	1000bb60 <dualtimer_disable+0x1c>
	} else {
		DUALTIMER0->TIMER2CONTROL.reg &= ~DUALTIMER_TIMER2CONTROL_TIMER_ENABLE;
1000bb54:	4903      	ldr	r1, [pc, #12]	; (1000bb64 <dualtimer_disable+0x20>)
1000bb56:	2228      	movs	r2, #40	; 0x28
1000bb58:	5c88      	ldrb	r0, [r1, r2]
1000bb5a:	237f      	movs	r3, #127	; 0x7f
1000bb5c:	4003      	ands	r3, r0
1000bb5e:	548b      	strb	r3, [r1, r2]
	}
}
1000bb60:	4770      	bx	lr
1000bb62:	46c0      	nop			; (mov r8, r8)
1000bb64:	40001000 	.word	0x40001000

1000bb68 <dualtimer_init>:
 * \param[in]     config       Pointer to the Dualtimer configuration options struct
 *
 * \return Status of the initialization procedure.
 */
void dualtimer_init(const struct dualtimer_config *config)
{
1000bb68:	b570      	push	{r4, r5, r6, lr}
1000bb6a:	0004      	movs	r4, r0
	uint8_t regval = 0;

	/* Global reset */
	system_peripheral_reset(PERIPHERAL_DUALT_TIMER);
1000bb6c:	2004      	movs	r0, #4
1000bb6e:	4b39      	ldr	r3, [pc, #228]	; (1000bc54 <dualtimer_init+0xec>)
1000bb70:	4798      	blx	r3

	/* Common config */
	if (config->timer1.timer_enable || config->timer2.timer_enable) {
1000bb72:	7823      	ldrb	r3, [r4, #0]
1000bb74:	2b00      	cmp	r3, #0
1000bb76:	d102      	bne.n	1000bb7e <dualtimer_init+0x16>
1000bb78:	7b23      	ldrb	r3, [r4, #12]
1000bb7a:	2b00      	cmp	r3, #0
1000bb7c:	d065      	beq.n	1000bc4a <dualtimer_init+0xe2>
		LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |=
1000bb7e:	4936      	ldr	r1, [pc, #216]	; (1000bc58 <dualtimer_init+0xf0>)
1000bb80:	68ca      	ldr	r2, [r1, #12]
1000bb82:	2320      	movs	r3, #32
1000bb84:	4313      	orrs	r3, r2
1000bb86:	60cb      	str	r3, [r1, #12]
		LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_DUALTIMER0_CLK_EN;
		LPMCU_MISC_REGS0->LPMCU_CTRL.bit.DUALTIMER0_CLK_SEL = config->clock_source;
1000bb88:	7e22      	ldrb	r2, [r4, #24]
1000bb8a:	698b      	ldr	r3, [r1, #24]
1000bb8c:	2003      	movs	r0, #3
1000bb8e:	4002      	ands	r2, r0
1000bb90:	0112      	lsls	r2, r2, #4
1000bb92:	302d      	adds	r0, #45	; 0x2d
1000bb94:	4383      	bics	r3, r0
1000bb96:	4313      	orrs	r3, r2
1000bb98:	618b      	str	r3, [r1, #24]
	}
	
	/* Timer1 config */
	if (config->timer1.timer_enable) {
1000bb9a:	7823      	ldrb	r3, [r4, #0]
1000bb9c:	2b00      	cmp	r3, #0
1000bb9e:	d026      	beq.n	1000bbee <dualtimer_init+0x86>
		if (config->timer1.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
1000bba0:	7863      	ldrb	r3, [r4, #1]
			regval = DUALTIMER_TIMER1CONTROL_ONE_SHOT_COUNT_1;
1000bba2:	2101      	movs	r1, #1
		LPMCU_MISC_REGS0->LPMCU_CTRL.bit.DUALTIMER0_CLK_SEL = config->clock_source;
	}
	
	/* Timer1 config */
	if (config->timer1.timer_enable) {
		if (config->timer1.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
1000bba4:	2b00      	cmp	r3, #0
1000bba6:	d003      	beq.n	1000bbb0 <dualtimer_init+0x48>
			regval = DUALTIMER_TIMER1CONTROL_ONE_SHOT_COUNT_1;
		} else if (config->timer1.counter_mode == DUALTIMER_FREE_RUNNING_MODE) {
			regval = DUALTIMER_TIMER1CONTROL_TIMER_MODE_0;
		} else if (config->timer1.counter_mode == DUALTIMER_PERIODIC_MODE) {
			regval = DUALTIMER_TIMER1CONTROL_TIMER_MODE_1;
1000bba8:	3b02      	subs	r3, #2
1000bbaa:	425d      	negs	r5, r3
1000bbac:	415d      	adcs	r5, r3
1000bbae:	01a9      	lsls	r1, r5, #6
		}
		regval |= (DUALTIMER_TIMER1CONTROL_TIMER_SIZE &
1000bbb0:	78a2      	ldrb	r2, [r4, #2]
1000bbb2:	0052      	lsls	r2, r2, #1
1000bbb4:	2502      	movs	r5, #2
1000bbb6:	402a      	ands	r2, r5
1000bbb8:	78e3      	ldrb	r3, [r4, #3]
1000bbba:	009b      	lsls	r3, r3, #2
1000bbbc:	350a      	adds	r5, #10
1000bbbe:	402b      	ands	r3, r5
1000bbc0:	431a      	orrs	r2, r3
1000bbc2:	0015      	movs	r5, r2
1000bbc4:	430d      	orrs	r5, r1
				((config->timer1.counter_size) << DUALTIMER_TIMER1CONTROL_TIMER_SIZE_Pos)) |
				DUALTIMER_TIMER1CONTROL_TIMERPRE(config->timer1.clock_prescaler);
		if (config->timer1.interrup_enable) {
1000bbc6:	7923      	ldrb	r3, [r4, #4]
1000bbc8:	2b00      	cmp	r3, #0
1000bbca:	d001      	beq.n	1000bbd0 <dualtimer_init+0x68>
			regval |= DUALTIMER_TIMER1CONTROL_INTERRUPT_ENABLE;
1000bbcc:	2320      	movs	r3, #32
1000bbce:	431d      	orrs	r5, r3
		}
		DUALTIMER0->TIMER1LOAD.reg = config->timer1.load_value;
1000bbd0:	4b22      	ldr	r3, [pc, #136]	; (1000bc5c <dualtimer_init+0xf4>)
1000bbd2:	68a2      	ldr	r2, [r4, #8]
1000bbd4:	601a      	str	r2, [r3, #0]
		DUALTIMER0->TIMER1CONTROL.reg = regval;
1000bbd6:	721d      	strb	r5, [r3, #8]
		LPMCU_MISC_REGS0->DUALTIMER0_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER0_CTRL_CNTR_1_ENABLE;
1000bbd8:	491f      	ldr	r1, [pc, #124]	; (1000bc58 <dualtimer_init+0xf0>)
1000bbda:	22c4      	movs	r2, #196	; 0xc4
1000bbdc:	0052      	lsls	r2, r2, #1
1000bbde:	5c88      	ldrb	r0, [r1, r2]
1000bbe0:	2301      	movs	r3, #1
1000bbe2:	4303      	orrs	r3, r0
1000bbe4:	548b      	strb	r3, [r1, r2]
		dualtimer_enable(DUALTIMER_TIMER1);
1000bbe6:	2000      	movs	r0, #0
1000bbe8:	4b1d      	ldr	r3, [pc, #116]	; (1000bc60 <dualtimer_init+0xf8>)
1000bbea:	4798      	blx	r3
1000bbec:	e000      	b.n	1000bbf0 <dualtimer_init+0x88>
 *
 * \return Status of the initialization procedure.
 */
void dualtimer_init(const struct dualtimer_config *config)
{
	uint8_t regval = 0;
1000bbee:	2500      	movs	r5, #0
		LPMCU_MISC_REGS0->DUALTIMER0_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER0_CTRL_CNTR_1_ENABLE;
		dualtimer_enable(DUALTIMER_TIMER1);
	}

	/* Timer2 config */
	if (config->timer2.timer_enable) {
1000bbf0:	7b23      	ldrb	r3, [r4, #12]
1000bbf2:	2b00      	cmp	r3, #0
1000bbf4:	d029      	beq.n	1000bc4a <dualtimer_init+0xe2>
		if (config->timer2.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
1000bbf6:	7b63      	ldrb	r3, [r4, #13]
1000bbf8:	2b00      	cmp	r3, #0
1000bbfa:	d005      	beq.n	1000bc08 <dualtimer_init+0xa0>
			regval = DUALTIMER_TIMER2CONTROL_ONE_SHOT_COUNT_1;
		} else if (config->timer2.counter_mode == DUALTIMER_FREE_RUNNING_MODE) {
1000bbfc:	2b01      	cmp	r3, #1
1000bbfe:	d005      	beq.n	1000bc0c <dualtimer_init+0xa4>
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_0;
		} else if (config->timer2.counter_mode == DUALTIMER_PERIODIC_MODE) {
1000bc00:	2b02      	cmp	r3, #2
1000bc02:	d104      	bne.n	1000bc0e <dualtimer_init+0xa6>
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_1;
1000bc04:	2540      	movs	r5, #64	; 0x40
1000bc06:	e002      	b.n	1000bc0e <dualtimer_init+0xa6>
	}

	/* Timer2 config */
	if (config->timer2.timer_enable) {
		if (config->timer2.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
			regval = DUALTIMER_TIMER2CONTROL_ONE_SHOT_COUNT_1;
1000bc08:	2501      	movs	r5, #1
1000bc0a:	e000      	b.n	1000bc0e <dualtimer_init+0xa6>
		} else if (config->timer2.counter_mode == DUALTIMER_FREE_RUNNING_MODE) {
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_0;
1000bc0c:	2500      	movs	r5, #0
		} else if (config->timer2.counter_mode == DUALTIMER_PERIODIC_MODE) {
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_1;
		}
		regval |= (DUALTIMER_TIMER2CONTROL_TIMER_SIZE &
1000bc0e:	7ba3      	ldrb	r3, [r4, #14]
1000bc10:	005b      	lsls	r3, r3, #1
1000bc12:	2102      	movs	r1, #2
1000bc14:	4019      	ands	r1, r3
1000bc16:	7be2      	ldrb	r2, [r4, #15]
1000bc18:	0092      	lsls	r2, r2, #2
1000bc1a:	230c      	movs	r3, #12
1000bc1c:	4013      	ands	r3, r2
1000bc1e:	430b      	orrs	r3, r1
1000bc20:	431d      	orrs	r5, r3
				((config->timer2.counter_size) << DUALTIMER_TIMER2CONTROL_TIMER_SIZE_Pos)) |
				DUALTIMER_TIMER2CONTROL_TIMERPRE(config->timer2.clock_prescaler);
		if (config->timer2.interrup_enable) {
1000bc22:	7c23      	ldrb	r3, [r4, #16]
1000bc24:	2b00      	cmp	r3, #0
1000bc26:	d001      	beq.n	1000bc2c <dualtimer_init+0xc4>
			regval |= DUALTIMER_TIMER2CONTROL_INTERRUPT_ENABLE;
1000bc28:	2320      	movs	r3, #32
1000bc2a:	431d      	orrs	r5, r3
		}
		DUALTIMER0->TIMER2LOAD.reg = config->timer2.load_value;
1000bc2c:	6962      	ldr	r2, [r4, #20]
1000bc2e:	4b0b      	ldr	r3, [pc, #44]	; (1000bc5c <dualtimer_init+0xf4>)
1000bc30:	621a      	str	r2, [r3, #32]
		DUALTIMER0->TIMER2CONTROL.reg = regval;
1000bc32:	2228      	movs	r2, #40	; 0x28
1000bc34:	549d      	strb	r5, [r3, r2]
		LPMCU_MISC_REGS0->DUALTIMER0_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER0_CTRL_CNTR_2_ENABLE;
1000bc36:	4908      	ldr	r1, [pc, #32]	; (1000bc58 <dualtimer_init+0xf0>)
1000bc38:	3261      	adds	r2, #97	; 0x61
1000bc3a:	32ff      	adds	r2, #255	; 0xff
1000bc3c:	5c88      	ldrb	r0, [r1, r2]
1000bc3e:	2302      	movs	r3, #2
1000bc40:	4303      	orrs	r3, r0
1000bc42:	548b      	strb	r3, [r1, r2]
		dualtimer_enable(DUALTIMER_TIMER2);
1000bc44:	2001      	movs	r0, #1
1000bc46:	4b06      	ldr	r3, [pc, #24]	; (1000bc60 <dualtimer_init+0xf8>)
1000bc48:	4798      	blx	r3
	}

	system_register_isr(RAM_ISR_TABLE_DUALTIMER_INDEX, (uint32_t)dualtimer_isr_handler);
1000bc4a:	4906      	ldr	r1, [pc, #24]	; (1000bc64 <dualtimer_init+0xfc>)
1000bc4c:	201e      	movs	r0, #30
1000bc4e:	4b06      	ldr	r3, [pc, #24]	; (1000bc68 <dualtimer_init+0x100>)
1000bc50:	4798      	blx	r3
}
1000bc52:	bd70      	pop	{r4, r5, r6, pc}
1000bc54:	1000cb29 	.word	0x1000cb29
1000bc58:	4000b000 	.word	0x4000b000
1000bc5c:	40001000 	.word	0x40001000
1000bc60:	1000bb21 	.word	0x1000bb21
1000bc64:	1000ba7d 	.word	0x1000ba7d
1000bc68:	1000cf91 	.word	0x1000cf91

1000bc6c <gpio_port0_isr_handler>:
 *
 * This function will enter interrupt.
 *
 */
static void gpio_port0_isr_handler(void)
{
1000bc6c:	b570      	push	{r4, r5, r6, lr}
	uint32_t flag = _gpio_instances[0].hw->INTSTATUSCLEAR.reg;
1000bc6e:	4b16      	ldr	r3, [pc, #88]	; (1000bcc8 <gpio_port0_isr_handler+0x5c>)
1000bc70:	681d      	ldr	r5, [r3, #0]
1000bc72:	8f29      	ldrh	r1, [r5, #56]	; 0x38
1000bc74:	b289      	uxth	r1, r1

	for (uint8_t i = 0; i < 16; i++){
		if (flag & (1 << i)) {
1000bc76:	07cb      	lsls	r3, r1, #31
1000bc78:	d407      	bmi.n	1000bc8a <gpio_port0_isr_handler+0x1e>
1000bc7a:	2301      	movs	r3, #1
1000bc7c:	2401      	movs	r4, #1
1000bc7e:	0018      	movs	r0, r3
1000bc80:	0022      	movs	r2, r4
1000bc82:	409a      	lsls	r2, r3
1000bc84:	4211      	tst	r1, r2
1000bc86:	d014      	beq.n	1000bcb2 <gpio_port0_isr_handler+0x46>
1000bc88:	e001      	b.n	1000bc8e <gpio_port0_isr_handler+0x22>
1000bc8a:	2201      	movs	r2, #1
1000bc8c:	2000      	movs	r0, #0
			/* Clear interrupt flag */
			_gpio_instances[0].hw->INTSTATUSCLEAR.reg = (1 << i);
1000bc8e:	b292      	uxth	r2, r2
1000bc90:	872a      	strh	r2, [r5, #56]	; 0x38
			if ((_gpio_instances[0].callback_enable_mask & (1 << i)) && \
1000bc92:	2346      	movs	r3, #70	; 0x46
1000bc94:	4a0c      	ldr	r2, [pc, #48]	; (1000bcc8 <gpio_port0_isr_handler+0x5c>)
1000bc96:	5ad3      	ldrh	r3, [r2, r3]
1000bc98:	4103      	asrs	r3, r0
1000bc9a:	07db      	lsls	r3, r3, #31
1000bc9c:	d50c      	bpl.n	1000bcb8 <gpio_port0_isr_handler+0x4c>
                    (_gpio_instances[0].callback_reg_mask & (1 << i)))
1000bc9e:	2344      	movs	r3, #68	; 0x44

	for (uint8_t i = 0; i < 16; i++){
		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[0].hw->INTSTATUSCLEAR.reg = (1 << i);
			if ((_gpio_instances[0].callback_enable_mask & (1 << i)) && \
1000bca0:	5ad3      	ldrh	r3, [r2, r3]
1000bca2:	4103      	asrs	r3, r0
1000bca4:	07db      	lsls	r3, r3, #31
1000bca6:	d507      	bpl.n	1000bcb8 <gpio_port0_isr_handler+0x4c>
                    (_gpio_instances[0].callback_reg_mask & (1 << i)))
                _gpio_instances[0].callback[i]();
1000bca8:	0080      	lsls	r0, r0, #2
1000bcaa:	1810      	adds	r0, r2, r0
1000bcac:	6843      	ldr	r3, [r0, #4]
1000bcae:	4798      	blx	r3
1000bcb0:	e002      	b.n	1000bcb8 <gpio_port0_isr_handler+0x4c>
1000bcb2:	3301      	adds	r3, #1
 */
static void gpio_port0_isr_handler(void)
{
	uint32_t flag = _gpio_instances[0].hw->INTSTATUSCLEAR.reg;

	for (uint8_t i = 0; i < 16; i++){
1000bcb4:	2b10      	cmp	r3, #16
1000bcb6:	d1e2      	bne.n	1000bc7e <gpio_port0_isr_handler+0x12>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
1000bcb8:	2180      	movs	r1, #128	; 0x80
1000bcba:	0409      	lsls	r1, r1, #16
1000bcbc:	23c0      	movs	r3, #192	; 0xc0
1000bcbe:	005b      	lsls	r3, r3, #1
1000bcc0:	4a02      	ldr	r2, [pc, #8]	; (1000bccc <gpio_port0_isr_handler+0x60>)
1000bcc2:	50d1      	str	r1, [r2, r3]
                _gpio_instances[0].callback[i]();
			break;
		}
	}
	NVIC_ClearPendingIRQ(GPIO0_IRQn);
}
1000bcc4:	bd70      	pop	{r4, r5, r6, pc}
1000bcc6:	46c0      	nop			; (mov r8, r8)
1000bcc8:	10019edc 	.word	0x10019edc
1000bccc:	e000e100 	.word	0xe000e100

1000bcd0 <gpio_port1_isr_handler>:
 *
 * This function will enter interrupt.
 *
 */
static void gpio_port1_isr_handler(void)
{
1000bcd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t flag = _gpio_instances[1].hw->INTSTATUSCLEAR.reg;
1000bcd2:	4b18      	ldr	r3, [pc, #96]	; (1000bd34 <gpio_port1_isr_handler+0x64>)
1000bcd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
1000bcd6:	8f1e      	ldrh	r6, [r3, #56]	; 0x38
1000bcd8:	b2b6      	uxth	r6, r6
1000bcda:	0037      	movs	r7, r6
1000bcdc:	2400      	movs	r4, #0

	for (uint8_t i = 0; i < 16; i++){
		/* For AON wakeup pin clear interrupt */
		if (flag & ((1<<15) | (1<<14) | (1<<13))) {
1000bcde:	0b76      	lsrs	r6, r6, #13
1000bce0:	0376      	lsls	r6, r6, #13
			aon_handle_ext_wakeup_isr();
		}

		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[1].hw->INTSTATUSCLEAR.reg = (1 << i);
1000bce2:	4d14      	ldr	r5, [pc, #80]	; (1000bd34 <gpio_port1_isr_handler+0x64>)
{
	uint32_t flag = _gpio_instances[1].hw->INTSTATUSCLEAR.reg;

	for (uint8_t i = 0; i < 16; i++){
		/* For AON wakeup pin clear interrupt */
		if (flag & ((1<<15) | (1<<14) | (1<<13))) {
1000bce4:	2e00      	cmp	r6, #0
1000bce6:	d001      	beq.n	1000bcec <gpio_port1_isr_handler+0x1c>
			aon_handle_ext_wakeup_isr();
1000bce8:	4b13      	ldr	r3, [pc, #76]	; (1000bd38 <gpio_port1_isr_handler+0x68>)
1000bcea:	4798      	blx	r3
		}

		if (flag & (1 << i)) {
1000bcec:	0022      	movs	r2, r4
1000bcee:	2301      	movs	r3, #1
1000bcf0:	40a3      	lsls	r3, r4
1000bcf2:	421f      	tst	r7, r3
1000bcf4:	d013      	beq.n	1000bd1e <gpio_port1_isr_handler+0x4e>
			/* Clear interrupt flag */
			_gpio_instances[1].hw->INTSTATUSCLEAR.reg = (1 << i);
1000bcf6:	b29b      	uxth	r3, r3
1000bcf8:	6ca9      	ldr	r1, [r5, #72]	; 0x48
1000bcfa:	870b      	strh	r3, [r1, #56]	; 0x38
			if ((_gpio_instances[1].callback_enable_mask & (1 << i)) && \
1000bcfc:	238e      	movs	r3, #142	; 0x8e
1000bcfe:	5aeb      	ldrh	r3, [r5, r3]
1000bd00:	4123      	asrs	r3, r4
1000bd02:	07db      	lsls	r3, r3, #31
1000bd04:	d50b      	bpl.n	1000bd1e <gpio_port1_isr_handler+0x4e>
			(_gpio_instances[1].callback_reg_mask & (1 << i))) {
1000bd06:	238c      	movs	r3, #140	; 0x8c
		}

		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[1].hw->INTSTATUSCLEAR.reg = (1 << i);
			if ((_gpio_instances[1].callback_enable_mask & (1 << i)) && \
1000bd08:	490a      	ldr	r1, [pc, #40]	; (1000bd34 <gpio_port1_isr_handler+0x64>)
1000bd0a:	5acb      	ldrh	r3, [r1, r3]
1000bd0c:	4123      	asrs	r3, r4
1000bd0e:	07db      	lsls	r3, r3, #31
1000bd10:	d505      	bpl.n	1000bd1e <gpio_port1_isr_handler+0x4e>
			(_gpio_instances[1].callback_reg_mask & (1 << i))) {
				_gpio_instances[1].callback[i]();
1000bd12:	3212      	adds	r2, #18
1000bd14:	0092      	lsls	r2, r2, #2
1000bd16:	188a      	adds	r2, r1, r2
1000bd18:	6853      	ldr	r3, [r2, #4]
1000bd1a:	4798      	blx	r3
				break;
1000bd1c:	e002      	b.n	1000bd24 <gpio_port1_isr_handler+0x54>
1000bd1e:	3401      	adds	r4, #1
 */
static void gpio_port1_isr_handler(void)
{
	uint32_t flag = _gpio_instances[1].hw->INTSTATUSCLEAR.reg;

	for (uint8_t i = 0; i < 16; i++){
1000bd20:	2c10      	cmp	r4, #16
1000bd22:	d1df      	bne.n	1000bce4 <gpio_port1_isr_handler+0x14>
1000bd24:	2180      	movs	r1, #128	; 0x80
1000bd26:	0449      	lsls	r1, r1, #17
1000bd28:	23c0      	movs	r3, #192	; 0xc0
1000bd2a:	005b      	lsls	r3, r3, #1
1000bd2c:	4a03      	ldr	r2, [pc, #12]	; (1000bd3c <gpio_port1_isr_handler+0x6c>)
1000bd2e:	50d1      	str	r1, [r2, r3]
				break;
			}
		}
	}
	NVIC_ClearPendingIRQ(GPIO1_IRQn);
}
1000bd30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000bd32:	46c0      	nop			; (mov r8, r8)
1000bd34:	10019edc 	.word	0x10019edc
1000bd38:	0001bc51 	.word	0x0001bc51
1000bd3c:	e000e100 	.word	0xe000e100

1000bd40 <gpio_port2_isr_handler>:
 *
 * This function will enter interrupt.
 *
 */
static void gpio_port2_isr_handler(void)
{
1000bd40:	b510      	push	{r4, lr}
	uint32_t flag = _gpio_instances[2].hw->INTSTATUSCLEAR.reg;
1000bd42:	2390      	movs	r3, #144	; 0x90
1000bd44:	4a1b      	ldr	r2, [pc, #108]	; (1000bdb4 <gpio_port2_isr_handler+0x74>)
1000bd46:	58d2      	ldr	r2, [r2, r3]
1000bd48:	8f13      	ldrh	r3, [r2, #56]	; 0x38
1000bd4a:	b29b      	uxth	r3, r3

	for (uint8_t i = 12; i < 16; i++){
		if (flag & (1 << i)) {
1000bd4c:	04d9      	lsls	r1, r3, #19
1000bd4e:	d414      	bmi.n	1000bd7a <gpio_port2_isr_handler+0x3a>
1000bd50:	0499      	lsls	r1, r3, #18
1000bd52:	d40a      	bmi.n	1000bd6a <gpio_port2_isr_handler+0x2a>
1000bd54:	0459      	lsls	r1, r3, #17
1000bd56:	d40c      	bmi.n	1000bd72 <gpio_port2_isr_handler+0x32>
1000bd58:	0bdb      	lsrs	r3, r3, #15
1000bd5a:	03db      	lsls	r3, r3, #15
1000bd5c:	b29b      	uxth	r3, r3
1000bd5e:	2b00      	cmp	r3, #0
1000bd60:	d020      	beq.n	1000bda4 <gpio_port2_isr_handler+0x64>
1000bd62:	2380      	movs	r3, #128	; 0x80
1000bd64:	021b      	lsls	r3, r3, #8
1000bd66:	210f      	movs	r1, #15
1000bd68:	e00a      	b.n	1000bd80 <gpio_port2_isr_handler+0x40>
1000bd6a:	2380      	movs	r3, #128	; 0x80
1000bd6c:	019b      	lsls	r3, r3, #6
1000bd6e:	210d      	movs	r1, #13
1000bd70:	e006      	b.n	1000bd80 <gpio_port2_isr_handler+0x40>
1000bd72:	2380      	movs	r3, #128	; 0x80
1000bd74:	01db      	lsls	r3, r3, #7
1000bd76:	210e      	movs	r1, #14
1000bd78:	e002      	b.n	1000bd80 <gpio_port2_isr_handler+0x40>
1000bd7a:	2380      	movs	r3, #128	; 0x80
1000bd7c:	015b      	lsls	r3, r3, #5
1000bd7e:	210c      	movs	r1, #12
			/* Clear interrupt flag */
			_gpio_instances[2].hw->INTSTATUSCLEAR.reg = (1 << i);
1000bd80:	b29b      	uxth	r3, r3
1000bd82:	8713      	strh	r3, [r2, #56]	; 0x38
			if ((_gpio_instances[2].callback_enable_mask & (1 << i)) && \
1000bd84:	23d6      	movs	r3, #214	; 0xd6
1000bd86:	4a0b      	ldr	r2, [pc, #44]	; (1000bdb4 <gpio_port2_isr_handler+0x74>)
1000bd88:	5ad3      	ldrh	r3, [r2, r3]
1000bd8a:	410b      	asrs	r3, r1
1000bd8c:	07db      	lsls	r3, r3, #31
1000bd8e:	d509      	bpl.n	1000bda4 <gpio_port2_isr_handler+0x64>
                    (_gpio_instances[2].callback_reg_mask & (1 << i)))
1000bd90:	23d4      	movs	r3, #212	; 0xd4

	for (uint8_t i = 12; i < 16; i++){
		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[2].hw->INTSTATUSCLEAR.reg = (1 << i);
			if ((_gpio_instances[2].callback_enable_mask & (1 << i)) && \
1000bd92:	5ad3      	ldrh	r3, [r2, r3]
1000bd94:	410b      	asrs	r3, r1
1000bd96:	07db      	lsls	r3, r3, #31
1000bd98:	d504      	bpl.n	1000bda4 <gpio_port2_isr_handler+0x64>
                    (_gpio_instances[2].callback_reg_mask & (1 << i)))
                _gpio_instances[2].callback[i]();
1000bd9a:	3124      	adds	r1, #36	; 0x24
1000bd9c:	0089      	lsls	r1, r1, #2
1000bd9e:	1851      	adds	r1, r2, r1
1000bda0:	684b      	ldr	r3, [r1, #4]
1000bda2:	4798      	blx	r3
1000bda4:	2180      	movs	r1, #128	; 0x80
1000bda6:	0489      	lsls	r1, r1, #18
1000bda8:	23c0      	movs	r3, #192	; 0xc0
1000bdaa:	005b      	lsls	r3, r3, #1
1000bdac:	4a02      	ldr	r2, [pc, #8]	; (1000bdb8 <gpio_port2_isr_handler+0x78>)
1000bdae:	50d1      	str	r1, [r2, r3]
			break;
		}
	}
	NVIC_ClearPendingIRQ(GPIO2_IRQn);
}
1000bdb0:	bd10      	pop	{r4, pc}
1000bdb2:	46c0      	nop			; (mov r8, r8)
1000bdb4:	10019edc 	.word	0x10019edc
1000bdb8:	e000e100 	.word	0xe000e100

1000bdbc <gpio_get_config_defaults>:
 *  \param[out] config  Configuration structure to initialize to default values.
 */
void gpio_get_config_defaults(struct gpio_config *const config)
{
	/* Default configuration values */
	config->direction  = GPIO_PIN_DIR_INPUT;
1000bdbc:	2300      	movs	r3, #0
1000bdbe:	7003      	strb	r3, [r0, #0]
	config->input_pull = GPIO_PIN_PULL_UP;
1000bdc0:	2201      	movs	r2, #1
1000bdc2:	7042      	strb	r2, [r0, #1]
	config->powersave  = false;
1000bdc4:	7083      	strb	r3, [r0, #2]
	config->aon_wakeup = false;
1000bdc6:	70c3      	strb	r3, [r0, #3]
}
1000bdc8:	4770      	bx	lr
1000bdca:	46c0      	nop			; (mov r8, r8)

1000bdcc <gpio_pin_set_config>:
 *  \retval STATUS_RESOURCE_NOT_AVAILABLE   Requested gpio is already in use.
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
1000bdcc:	b570      	push	{r4, r5, r6, lr}
	* GPIO_0 & GPIO_1 are used for SWD.
	*/
	if ((gpio_pin == PIN_LP_GPIO_0) || \
		(gpio_pin == PIN_LP_GPIO_1))
	{
		status = STATUS_ERR_INVALID_ARG;
1000bdce:	2317      	movs	r3, #23
	enum status_code status = STATUS_OK;

	/* Following GPIO's should never be modified by user.
	* GPIO_0 & GPIO_1 are used for SWD.
	*/
	if ((gpio_pin == PIN_LP_GPIO_0) || \
1000bdd0:	2801      	cmp	r0, #1
1000bdd2:	d800      	bhi.n	1000bdd6 <gpio_pin_set_config+0xa>
1000bdd4:	e0c8      	b.n	1000bf68 <gpio_pin_set_config+0x19c>
		(gpio_pin == PIN_LP_GPIO_1))
	{
		status = STATUS_ERR_INVALID_ARG;
	} else {
		if (gpio_pin <= 7) {
1000bdd6:	2807      	cmp	r0, #7
1000bdd8:	d809      	bhi.n	1000bdee <gpio_pin_set_config+0x22>
			LPMCU_MISC_REGS0->PINMUX_SEL_0.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000bdda:	4d64      	ldr	r5, [pc, #400]	; (1000bf6c <gpio_pin_set_config+0x1a0>)
1000bddc:	6c6a      	ldr	r2, [r5, #68]	; 0x44
1000bdde:	3b10      	subs	r3, #16
1000bde0:	4003      	ands	r3, r0
1000bde2:	009b      	lsls	r3, r3, #2
1000bde4:	2407      	movs	r4, #7
1000bde6:	409c      	lsls	r4, r3
1000bde8:	43a2      	bics	r2, r4
1000bdea:	646a      	str	r2, [r5, #68]	; 0x44
1000bdec:	e029      	b.n	1000be42 <gpio_pin_set_config+0x76>
		} else if (gpio_pin <= 15) {
1000bdee:	280f      	cmp	r0, #15
1000bdf0:	d809      	bhi.n	1000be06 <gpio_pin_set_config+0x3a>
			LPMCU_MISC_REGS0->PINMUX_SEL_1.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000bdf2:	4d5e      	ldr	r5, [pc, #376]	; (1000bf6c <gpio_pin_set_config+0x1a0>)
1000bdf4:	6caa      	ldr	r2, [r5, #72]	; 0x48
1000bdf6:	2307      	movs	r3, #7
1000bdf8:	4003      	ands	r3, r0
1000bdfa:	009b      	lsls	r3, r3, #2
1000bdfc:	2407      	movs	r4, #7
1000bdfe:	409c      	lsls	r4, r3
1000be00:	43a2      	bics	r2, r4
1000be02:	64aa      	str	r2, [r5, #72]	; 0x48
1000be04:	e01d      	b.n	1000be42 <gpio_pin_set_config+0x76>
		} else if (gpio_pin <= 23) {
1000be06:	2817      	cmp	r0, #23
1000be08:	d809      	bhi.n	1000be1e <gpio_pin_set_config+0x52>
			LPMCU_MISC_REGS0->PINMUX_SEL_2.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000be0a:	4d58      	ldr	r5, [pc, #352]	; (1000bf6c <gpio_pin_set_config+0x1a0>)
1000be0c:	6cea      	ldr	r2, [r5, #76]	; 0x4c
1000be0e:	2307      	movs	r3, #7
1000be10:	4003      	ands	r3, r0
1000be12:	009b      	lsls	r3, r3, #2
1000be14:	2407      	movs	r4, #7
1000be16:	409c      	lsls	r4, r3
1000be18:	43a2      	bics	r2, r4
1000be1a:	64ea      	str	r2, [r5, #76]	; 0x4c
1000be1c:	e011      	b.n	1000be42 <gpio_pin_set_config+0x76>
		} else if (44 <= gpio_pin  && gpio_pin < 48) {
1000be1e:	0003      	movs	r3, r0
1000be20:	3b2c      	subs	r3, #44	; 0x2c
1000be22:	2b03      	cmp	r3, #3
1000be24:	d80d      	bhi.n	1000be42 <gpio_pin_set_config+0x76>
			/* Set GPIO_MSx as digital mode */
			AON_GP_REGS0->MS_GPIO_MODE.vec.ANALOG_ENABLE_ &= ~(1 << (gpio_pin - PIN_GPIO_MS4));
1000be26:	4d52      	ldr	r5, [pc, #328]	; (1000bf70 <gpio_pin_set_config+0x1a4>)
1000be28:	2482      	movs	r4, #130	; 0x82
1000be2a:	00e4      	lsls	r4, r4, #3
1000be2c:	5d2a      	ldrb	r2, [r5, r4]
1000be2e:	0712      	lsls	r2, r2, #28
1000be30:	2601      	movs	r6, #1
1000be32:	409e      	lsls	r6, r3
1000be34:	0f12      	lsrs	r2, r2, #28
1000be36:	5d2b      	ldrb	r3, [r5, r4]
1000be38:	43b2      	bics	r2, r6
1000be3a:	260f      	movs	r6, #15
1000be3c:	43b3      	bics	r3, r6
1000be3e:	4313      	orrs	r3, r2
1000be40:	552b      	strb	r3, [r5, r4]
		}
	
		if ((gpio_pin == PIN_AO_GPIO_0) || (gpio_pin == PIN_AO_GPIO_1) ||
1000be42:	0003      	movs	r3, r0
1000be44:	3b1d      	subs	r3, #29
1000be46:	2b02      	cmp	r3, #2
1000be48:	d829      	bhi.n	1000be9e <gpio_pin_set_config+0xd2>
				(gpio_pin == PIN_AO_GPIO_2)) {
			/* Active Low, Always On Pull Enable Control */
			if (config->input_pull == GPIO_PIN_PULL_UP) {
1000be4a:	784b      	ldrb	r3, [r1, #1]
1000be4c:	2b01      	cmp	r3, #1
1000be4e:	d108      	bne.n	1000be62 <gpio_pin_set_config+0x96>
				AON_GP_REGS0->AON_PULL_ENABLE.reg &= ~(1 << (31 - gpio_pin));
1000be50:	4d47      	ldr	r5, [pc, #284]	; (1000bf70 <gpio_pin_set_config+0x1a4>)
1000be52:	7d2b      	ldrb	r3, [r5, #20]
1000be54:	241f      	movs	r4, #31
1000be56:	1a24      	subs	r4, r4, r0
1000be58:	2201      	movs	r2, #1
1000be5a:	40a2      	lsls	r2, r4
1000be5c:	4393      	bics	r3, r2
1000be5e:	752b      	strb	r3, [r5, #20]
1000be60:	e008      	b.n	1000be74 <gpio_pin_set_config+0xa8>
			} else {
				AON_GP_REGS0->AON_PULL_ENABLE.reg |= 1 << (31 - gpio_pin);
1000be62:	4c43      	ldr	r4, [pc, #268]	; (1000bf70 <gpio_pin_set_config+0x1a4>)
1000be64:	7d25      	ldrb	r5, [r4, #20]
1000be66:	221f      	movs	r2, #31
1000be68:	1a12      	subs	r2, r2, r0
1000be6a:	2301      	movs	r3, #1
1000be6c:	4093      	lsls	r3, r2
1000be6e:	432b      	orrs	r3, r5
1000be70:	b2db      	uxtb	r3, r3
1000be72:	7523      	strb	r3, [r4, #20]
			}
			if (config->aon_wakeup) {
1000be74:	78ca      	ldrb	r2, [r1, #3]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000be76:	2300      	movs	r3, #0
			if (config->input_pull == GPIO_PIN_PULL_UP) {
				AON_GP_REGS0->AON_PULL_ENABLE.reg &= ~(1 << (31 - gpio_pin));
			} else {
				AON_GP_REGS0->AON_PULL_ENABLE.reg |= 1 << (31 - gpio_pin);
			}
			if (config->aon_wakeup) {
1000be78:	2a00      	cmp	r2, #0
1000be7a:	d075      	beq.n	1000bf68 <gpio_pin_set_config+0x19c>
				/* Enable AON_GPIO_x to be a wakeup MCU from sleep mode */
				AON_GP_REGS0->AON_PINMUX_SEL.reg |= 1 << (4 * (31 - gpio_pin));
1000be7c:	493c      	ldr	r1, [pc, #240]	; (1000bf70 <gpio_pin_set_config+0x1a4>)
1000be7e:	880c      	ldrh	r4, [r1, #0]
1000be80:	221f      	movs	r2, #31
1000be82:	1a10      	subs	r0, r2, r0
1000be84:	0080      	lsls	r0, r0, #2
1000be86:	3301      	adds	r3, #1
1000be88:	4083      	lsls	r3, r0
1000be8a:	4323      	orrs	r3, r4
1000be8c:	b29b      	uxth	r3, r3
1000be8e:	800b      	strh	r3, [r1, #0]
				/* Enable AON_GPIO_x to wake up the BLE domain from sleep mode */
				AON_PWR_SEQ0->GPIO_WAKEUP_CTRL.bit.BLE_ENABLE = 1;
1000be90:	4a38      	ldr	r2, [pc, #224]	; (1000bf74 <gpio_pin_set_config+0x1a8>)
1000be92:	7811      	ldrb	r1, [r2, #0]
1000be94:	2302      	movs	r3, #2
1000be96:	430b      	orrs	r3, r1
1000be98:	7013      	strb	r3, [r2, #0]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000be9a:	2300      	movs	r3, #0
1000be9c:	e064      	b.n	1000bf68 <gpio_pin_set_config+0x19c>
				AON_GP_REGS0->AON_PINMUX_SEL.reg |= 1 << (4 * (31 - gpio_pin));
				/* Enable AON_GPIO_x to wake up the BLE domain from sleep mode */
				AON_PWR_SEQ0->GPIO_WAKEUP_CTRL.bit.BLE_ENABLE = 1;
			}
		} else {
			if(config->direction == GPIO_PIN_DIR_INPUT) {
1000be9e:	780a      	ldrb	r2, [r1, #0]
1000bea0:	2a00      	cmp	r2, #0
1000bea2:	d140      	bne.n	1000bf26 <gpio_pin_set_config+0x15a>
				if(gpio_pin < 16) {
1000bea4:	280f      	cmp	r0, #15
1000bea6:	d808      	bhi.n	1000beba <gpio_pin_set_config+0xee>
					GPIO0->OUTENCLR.reg = (1 << gpio_pin);
1000bea8:	2301      	movs	r3, #1
1000beaa:	4083      	lsls	r3, r0
1000beac:	b29b      	uxth	r3, r3
1000beae:	4a32      	ldr	r2, [pc, #200]	; (1000bf78 <gpio_pin_set_config+0x1ac>)
1000beb0:	8293      	strh	r3, [r2, #20]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000beb2:	2300      	movs	r3, #0
					GPIO1->OUTENCLR.reg = (1 << (gpio_pin % 16));
				} else {
					GPIO2->OUTENCLR.reg = (1 << (gpio_pin % 16));
				}
				/* pull_enable. */
				if (gpio_pin < 32) {
1000beb4:	281f      	cmp	r0, #31
1000beb6:	d857      	bhi.n	1000bf68 <gpio_pin_set_config+0x19c>
1000beb8:	e012      	b.n	1000bee0 <gpio_pin_set_config+0x114>
			}
		} else {
			if(config->direction == GPIO_PIN_DIR_INPUT) {
				if(gpio_pin < 16) {
					GPIO0->OUTENCLR.reg = (1 << gpio_pin);
				} else if (gpio_pin < 32){
1000beba:	281f      	cmp	r0, #31
1000bebc:	d807      	bhi.n	1000bece <gpio_pin_set_config+0x102>
					GPIO1->OUTENCLR.reg = (1 << (gpio_pin % 16));
1000bebe:	220f      	movs	r2, #15
1000bec0:	4002      	ands	r2, r0
1000bec2:	2301      	movs	r3, #1
1000bec4:	4093      	lsls	r3, r2
1000bec6:	b29b      	uxth	r3, r3
1000bec8:	4a2c      	ldr	r2, [pc, #176]	; (1000bf7c <gpio_pin_set_config+0x1b0>)
1000beca:	8293      	strh	r3, [r2, #20]
1000becc:	e008      	b.n	1000bee0 <gpio_pin_set_config+0x114>
				} else {
					GPIO2->OUTENCLR.reg = (1 << (gpio_pin % 16));
1000bece:	230f      	movs	r3, #15
1000bed0:	4018      	ands	r0, r3
1000bed2:	3b0e      	subs	r3, #14
1000bed4:	4083      	lsls	r3, r0
1000bed6:	b29b      	uxth	r3, r3
1000bed8:	4a29      	ldr	r2, [pc, #164]	; (1000bf80 <gpio_pin_set_config+0x1b4>)
1000beda:	8293      	strh	r3, [r2, #20]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000bedc:	2300      	movs	r3, #0
1000bede:	e043      	b.n	1000bf68 <gpio_pin_set_config+0x19c>
				} else {
					GPIO2->OUTENCLR.reg = (1 << (gpio_pin % 16));
				}
				/* pull_enable. */
				if (gpio_pin < 32) {
					switch(config->input_pull) {
1000bee0:	784b      	ldrb	r3, [r1, #1]
1000bee2:	2b01      	cmp	r3, #1
1000bee4:	d00c      	beq.n	1000bf00 <gpio_pin_set_config+0x134>
1000bee6:	2b00      	cmp	r3, #0
1000bee8:	d002      	beq.n	1000bef0 <gpio_pin_set_config+0x124>
1000beea:	2b02      	cmp	r3, #2
1000beec:	d010      	beq.n	1000bf10 <gpio_pin_set_config+0x144>
1000beee:	e03a      	b.n	1000bf66 <gpio_pin_set_config+0x19a>
						case GPIO_PIN_PULL_NONE:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg |= (1 << gpio_pin);
1000bef0:	491e      	ldr	r1, [pc, #120]	; (1000bf6c <gpio_pin_set_config+0x1a0>)
1000bef2:	6d0a      	ldr	r2, [r1, #80]	; 0x50
1000bef4:	2301      	movs	r3, #1
1000bef6:	4083      	lsls	r3, r0
1000bef8:	4313      	orrs	r3, r2
1000befa:	650b      	str	r3, [r1, #80]	; 0x50
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000befc:	2300      	movs	r3, #0
				/* pull_enable. */
				if (gpio_pin < 32) {
					switch(config->input_pull) {
						case GPIO_PIN_PULL_NONE:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg |= (1 << gpio_pin);
							break;
1000befe:	e033      	b.n	1000bf68 <gpio_pin_set_config+0x19c>
						case GPIO_PIN_PULL_UP:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
1000bf00:	491a      	ldr	r1, [pc, #104]	; (1000bf6c <gpio_pin_set_config+0x1a0>)
1000bf02:	6d0b      	ldr	r3, [r1, #80]	; 0x50
1000bf04:	2201      	movs	r2, #1
1000bf06:	4082      	lsls	r2, r0
1000bf08:	4393      	bics	r3, r2
1000bf0a:	650b      	str	r3, [r1, #80]	; 0x50
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000bf0c:	2300      	movs	r3, #0
						case GPIO_PIN_PULL_NONE:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg |= (1 << gpio_pin);
							break;
						case GPIO_PIN_PULL_UP:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
							break;
1000bf0e:	e02b      	b.n	1000bf68 <gpio_pin_set_config+0x19c>
						case GPIO_PIN_PULL_DOWN:
							/* Set R-Type */
							LPMCU_MISC_REGS0->RTYPE_PAD_0.reg |= (1 << gpio_pin);
1000bf10:	4b16      	ldr	r3, [pc, #88]	; (1000bf6c <gpio_pin_set_config+0x1a0>)
1000bf12:	6d59      	ldr	r1, [r3, #84]	; 0x54
1000bf14:	2201      	movs	r2, #1
1000bf16:	4082      	lsls	r2, r0
1000bf18:	4311      	orrs	r1, r2
1000bf1a:	6559      	str	r1, [r3, #84]	; 0x54
							/* Set REN */
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
1000bf1c:	6d19      	ldr	r1, [r3, #80]	; 0x50
1000bf1e:	4391      	bics	r1, r2
1000bf20:	6519      	str	r1, [r3, #80]	; 0x50
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000bf22:	2300      	movs	r3, #0
						case GPIO_PIN_PULL_DOWN:
							/* Set R-Type */
							LPMCU_MISC_REGS0->RTYPE_PAD_0.reg |= (1 << gpio_pin);
							/* Set REN */
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
							break;
1000bf24:	e020      	b.n	1000bf68 <gpio_pin_set_config+0x19c>
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000bf26:	2300      	movs	r3, #0
						default:
							status = STATUS_ERR_INVALID_ARG;
							break;
					}
				}
			} else if(config->direction == GPIO_PIN_DIR_OUTPUT) {
1000bf28:	2a01      	cmp	r2, #1
1000bf2a:	d11d      	bne.n	1000bf68 <gpio_pin_set_config+0x19c>
				if (gpio_pin < 16) {
1000bf2c:	280f      	cmp	r0, #15
1000bf2e:	d806      	bhi.n	1000bf3e <gpio_pin_set_config+0x172>
					GPIO0->OUTENSET.reg = (1 << gpio_pin);
1000bf30:	3301      	adds	r3, #1
1000bf32:	4083      	lsls	r3, r0
1000bf34:	b29b      	uxth	r3, r3
1000bf36:	4a10      	ldr	r2, [pc, #64]	; (1000bf78 <gpio_pin_set_config+0x1ac>)
1000bf38:	8213      	strh	r3, [r2, #16]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000bf3a:	2300      	movs	r3, #0
1000bf3c:	e014      	b.n	1000bf68 <gpio_pin_set_config+0x19c>
					}
				}
			} else if(config->direction == GPIO_PIN_DIR_OUTPUT) {
				if (gpio_pin < 16) {
					GPIO0->OUTENSET.reg = (1 << gpio_pin);
				} else if (gpio_pin < 32) {
1000bf3e:	281f      	cmp	r0, #31
1000bf40:	d808      	bhi.n	1000bf54 <gpio_pin_set_config+0x188>
					GPIO1->OUTENSET.reg = (1 << (gpio_pin % 16));
1000bf42:	230f      	movs	r3, #15
1000bf44:	4018      	ands	r0, r3
1000bf46:	3b0e      	subs	r3, #14
1000bf48:	4083      	lsls	r3, r0
1000bf4a:	b29b      	uxth	r3, r3
1000bf4c:	4a0b      	ldr	r2, [pc, #44]	; (1000bf7c <gpio_pin_set_config+0x1b0>)
1000bf4e:	8213      	strh	r3, [r2, #16]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000bf50:	2300      	movs	r3, #0
1000bf52:	e009      	b.n	1000bf68 <gpio_pin_set_config+0x19c>
				if (gpio_pin < 16) {
					GPIO0->OUTENSET.reg = (1 << gpio_pin);
				} else if (gpio_pin < 32) {
					GPIO1->OUTENSET.reg = (1 << (gpio_pin % 16));
				} else {
					GPIO2->OUTENSET.reg = (1 << (gpio_pin % 16));
1000bf54:	230f      	movs	r3, #15
1000bf56:	4018      	ands	r0, r3
1000bf58:	3b0e      	subs	r3, #14
1000bf5a:	4083      	lsls	r3, r0
1000bf5c:	b29b      	uxth	r3, r3
1000bf5e:	4a08      	ldr	r2, [pc, #32]	; (1000bf80 <gpio_pin_set_config+0x1b4>)
1000bf60:	8213      	strh	r3, [r2, #16]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000bf62:	2300      	movs	r3, #0
1000bf64:	e000      	b.n	1000bf68 <gpio_pin_set_config+0x19c>
							LPMCU_MISC_REGS0->RTYPE_PAD_0.reg |= (1 << gpio_pin);
							/* Set REN */
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
							break;
						default:
							status = STATUS_ERR_INVALID_ARG;
1000bf66:	2317      	movs	r3, #23
				}
			}
		}
	}
	return status;
}
1000bf68:	0018      	movs	r0, r3
1000bf6a:	bd70      	pop	{r4, r5, r6, pc}
1000bf6c:	4000b000 	.word	0x4000b000
1000bf70:	4000f000 	.word	0x4000f000
1000bf74:	4000e000 	.word	0x4000e000
1000bf78:	40010000 	.word	0x40010000
1000bf7c:	40011000 	.word	0x40011000
1000bf80:	40013000 	.word	0x40013000

1000bf84 <gpio_pin_get_input_level>:
 */
bool gpio_pin_get_input_level(const uint8_t gpio_pin)
{
	uint32_t regval = 0;

	if (gpio_pin < 16) {
1000bf84:	280f      	cmp	r0, #15
1000bf86:	d806      	bhi.n	1000bf96 <gpio_pin_get_input_level+0x12>
		regval = GPIO0->DATA.reg;
1000bf88:	4b0f      	ldr	r3, [pc, #60]	; (1000bfc8 <gpio_pin_get_input_level+0x44>)
1000bf8a:	8819      	ldrh	r1, [r3, #0]
		regval &= (1 << gpio_pin);
1000bf8c:	2301      	movs	r3, #1
1000bf8e:	4083      	lsls	r3, r0
1000bf90:	0018      	movs	r0, r3
1000bf92:	4008      	ands	r0, r1
1000bf94:	e014      	b.n	1000bfc0 <gpio_pin_get_input_level+0x3c>
	} else if (gpio_pin < 32) {
1000bf96:	281f      	cmp	r0, #31
1000bf98:	d809      	bhi.n	1000bfae <gpio_pin_get_input_level+0x2a>
		regval = GPIO1->DATA.reg;
1000bf9a:	4b0c      	ldr	r3, [pc, #48]	; (1000bfcc <gpio_pin_get_input_level+0x48>)
1000bf9c:	8819      	ldrh	r1, [r3, #0]
		regval &= (1 << (gpio_pin % 16));
1000bf9e:	230f      	movs	r3, #15
1000bfa0:	4003      	ands	r3, r0
1000bfa2:	001a      	movs	r2, r3
1000bfa4:	2301      	movs	r3, #1
1000bfa6:	4093      	lsls	r3, r2
1000bfa8:	0018      	movs	r0, r3
1000bfaa:	4008      	ands	r0, r1
1000bfac:	e008      	b.n	1000bfc0 <gpio_pin_get_input_level+0x3c>
	} else {
		regval = GPIO2->DATA.reg;
1000bfae:	4b08      	ldr	r3, [pc, #32]	; (1000bfd0 <gpio_pin_get_input_level+0x4c>)
1000bfb0:	8819      	ldrh	r1, [r3, #0]
		regval &= (1 << (gpio_pin % 16));
1000bfb2:	230f      	movs	r3, #15
1000bfb4:	4003      	ands	r3, r0
1000bfb6:	001a      	movs	r2, r3
1000bfb8:	2301      	movs	r3, #1
1000bfba:	4093      	lsls	r3, r2
1000bfbc:	0018      	movs	r0, r3
1000bfbe:	4008      	ands	r0, r1
	}

	return regval;
1000bfc0:	1e43      	subs	r3, r0, #1
1000bfc2:	4198      	sbcs	r0, r3
1000bfc4:	b2c0      	uxtb	r0, r0
}
1000bfc6:	4770      	bx	lr
1000bfc8:	40010000 	.word	0x40010000
1000bfcc:	40011000 	.word	0x40011000
1000bfd0:	40013000 	.word	0x40013000

1000bfd4 <gpio_pin_get_output_level>:
 */
bool gpio_pin_get_output_level(const uint8_t gpio_pin)
{
	uint32_t regval = 0;

	if (gpio_pin < 16) {
1000bfd4:	280f      	cmp	r0, #15
1000bfd6:	d806      	bhi.n	1000bfe6 <gpio_pin_get_output_level+0x12>
		regval = GPIO0->DATAOUT.reg;
1000bfd8:	4b0f      	ldr	r3, [pc, #60]	; (1000c018 <gpio_pin_get_output_level+0x44>)
1000bfda:	8899      	ldrh	r1, [r3, #4]
		regval &= (1 << gpio_pin);
1000bfdc:	2301      	movs	r3, #1
1000bfde:	4083      	lsls	r3, r0
1000bfe0:	0018      	movs	r0, r3
1000bfe2:	4008      	ands	r0, r1
1000bfe4:	e014      	b.n	1000c010 <gpio_pin_get_output_level+0x3c>
	} else if (gpio_pin < 32) {
1000bfe6:	281f      	cmp	r0, #31
1000bfe8:	d809      	bhi.n	1000bffe <gpio_pin_get_output_level+0x2a>
		regval = GPIO1->DATAOUT.reg;
1000bfea:	4b0c      	ldr	r3, [pc, #48]	; (1000c01c <gpio_pin_get_output_level+0x48>)
1000bfec:	8899      	ldrh	r1, [r3, #4]
		regval &= (1 << (gpio_pin % 16));
1000bfee:	230f      	movs	r3, #15
1000bff0:	4003      	ands	r3, r0
1000bff2:	001a      	movs	r2, r3
1000bff4:	2301      	movs	r3, #1
1000bff6:	4093      	lsls	r3, r2
1000bff8:	0018      	movs	r0, r3
1000bffa:	4008      	ands	r0, r1
1000bffc:	e008      	b.n	1000c010 <gpio_pin_get_output_level+0x3c>
	} else {
		regval = GPIO2->DATAOUT.reg;
1000bffe:	4b08      	ldr	r3, [pc, #32]	; (1000c020 <gpio_pin_get_output_level+0x4c>)
1000c000:	8899      	ldrh	r1, [r3, #4]
		regval &= (1 << (gpio_pin % 16));
1000c002:	230f      	movs	r3, #15
1000c004:	4003      	ands	r3, r0
1000c006:	001a      	movs	r2, r3
1000c008:	2301      	movs	r3, #1
1000c00a:	4093      	lsls	r3, r2
1000c00c:	0018      	movs	r0, r3
1000c00e:	4008      	ands	r0, r1
	}

	return regval;
1000c010:	1e43      	subs	r3, r0, #1
1000c012:	4198      	sbcs	r0, r3
1000c014:	b2c0      	uxtb	r0, r0
}
1000c016:	4770      	bx	lr
1000c018:	40010000 	.word	0x40010000
1000c01c:	40011000 	.word	0x40011000
1000c020:	40013000 	.word	0x40013000

1000c024 <gpio_pin_set_output_level>:
 *
 *  \param[in] gpio_pin  Index of the GPIO pin to write to.
 *  \param[in] level     Logical level to set the given pin to.
 */
void gpio_pin_set_output_level(const uint8_t gpio_pin, const bool level)
{
1000c024:	b510      	push	{r4, lr}
	if (gpio_pin < 16) {
1000c026:	280f      	cmp	r0, #15
1000c028:	d810      	bhi.n	1000c04c <gpio_pin_set_output_level+0x28>
		if(level) {
1000c02a:	2900      	cmp	r1, #0
1000c02c:	d007      	beq.n	1000c03e <gpio_pin_set_output_level+0x1a>
			GPIO0->DATAOUT.reg |= (1 << gpio_pin);
1000c02e:	4a1d      	ldr	r2, [pc, #116]	; (1000c0a4 <gpio_pin_set_output_level+0x80>)
1000c030:	8891      	ldrh	r1, [r2, #4]
1000c032:	2301      	movs	r3, #1
1000c034:	4083      	lsls	r3, r0
1000c036:	430b      	orrs	r3, r1
1000c038:	b29b      	uxth	r3, r3
1000c03a:	8093      	strh	r3, [r2, #4]
1000c03c:	e031      	b.n	1000c0a2 <gpio_pin_set_output_level+0x7e>
		} else {
			GPIO0->DATAOUT.reg &= ~(1 << gpio_pin);
1000c03e:	4919      	ldr	r1, [pc, #100]	; (1000c0a4 <gpio_pin_set_output_level+0x80>)
1000c040:	888b      	ldrh	r3, [r1, #4]
1000c042:	2201      	movs	r2, #1
1000c044:	4082      	lsls	r2, r0
1000c046:	4393      	bics	r3, r2
1000c048:	808b      	strh	r3, [r1, #4]
1000c04a:	e02a      	b.n	1000c0a2 <gpio_pin_set_output_level+0x7e>
		}
	} else if (gpio_pin < 32) {
1000c04c:	281f      	cmp	r0, #31
1000c04e:	d814      	bhi.n	1000c07a <gpio_pin_set_output_level+0x56>
		if(level) {
1000c050:	2900      	cmp	r1, #0
1000c052:	d009      	beq.n	1000c068 <gpio_pin_set_output_level+0x44>
			GPIO1->DATAOUT.reg |= (1 << (gpio_pin % 16));
1000c054:	4914      	ldr	r1, [pc, #80]	; (1000c0a8 <gpio_pin_set_output_level+0x84>)
1000c056:	888c      	ldrh	r4, [r1, #4]
1000c058:	220f      	movs	r2, #15
1000c05a:	4010      	ands	r0, r2
1000c05c:	2301      	movs	r3, #1
1000c05e:	4083      	lsls	r3, r0
1000c060:	4323      	orrs	r3, r4
1000c062:	b29b      	uxth	r3, r3
1000c064:	808b      	strh	r3, [r1, #4]
1000c066:	e01c      	b.n	1000c0a2 <gpio_pin_set_output_level+0x7e>
		} else {
			GPIO1->DATAOUT.reg &= ~(1 << (gpio_pin % 16));
1000c068:	490f      	ldr	r1, [pc, #60]	; (1000c0a8 <gpio_pin_set_output_level+0x84>)
1000c06a:	888b      	ldrh	r3, [r1, #4]
1000c06c:	220f      	movs	r2, #15
1000c06e:	4010      	ands	r0, r2
1000c070:	3a0e      	subs	r2, #14
1000c072:	4082      	lsls	r2, r0
1000c074:	4393      	bics	r3, r2
1000c076:	808b      	strh	r3, [r1, #4]
1000c078:	e013      	b.n	1000c0a2 <gpio_pin_set_output_level+0x7e>
		}
	} else {
		if(level) {
1000c07a:	2900      	cmp	r1, #0
1000c07c:	d009      	beq.n	1000c092 <gpio_pin_set_output_level+0x6e>
			GPIO2->DATAOUT.reg |= (1 << (gpio_pin % 16));
1000c07e:	490b      	ldr	r1, [pc, #44]	; (1000c0ac <gpio_pin_set_output_level+0x88>)
1000c080:	888c      	ldrh	r4, [r1, #4]
1000c082:	220f      	movs	r2, #15
1000c084:	4010      	ands	r0, r2
1000c086:	2301      	movs	r3, #1
1000c088:	4083      	lsls	r3, r0
1000c08a:	4323      	orrs	r3, r4
1000c08c:	b29b      	uxth	r3, r3
1000c08e:	808b      	strh	r3, [r1, #4]
1000c090:	e007      	b.n	1000c0a2 <gpio_pin_set_output_level+0x7e>
		} else {
			GPIO2->DATAOUT.reg &= ~(1 << (gpio_pin % 16));
1000c092:	4906      	ldr	r1, [pc, #24]	; (1000c0ac <gpio_pin_set_output_level+0x88>)
1000c094:	888b      	ldrh	r3, [r1, #4]
1000c096:	220f      	movs	r2, #15
1000c098:	4010      	ands	r0, r2
1000c09a:	3a0e      	subs	r2, #14
1000c09c:	4082      	lsls	r2, r0
1000c09e:	4393      	bics	r3, r2
1000c0a0:	808b      	strh	r3, [r1, #4]
		}
	}
}
1000c0a2:	bd10      	pop	{r4, pc}
1000c0a4:	40010000 	.word	0x40010000
1000c0a8:	40011000 	.word	0x40011000
1000c0ac:	40013000 	.word	0x40013000

1000c0b0 <gpio_pinmux_cofiguration>:
 *
 *  \param[in] gpio_pin   Index of the GPIO pin to toggle.
 *  \param[in] pinmux_sel PINMUX selection.
 */
void gpio_pinmux_cofiguration(const uint8_t gpio_pin, uint16_t pinmux_sel)
{
1000c0b0:	b570      	push	{r4, r5, r6, lr}
	uint8_t megamux_sel = (pinmux_sel >> 8) & 0xFF;
1000c0b2:	0a0d      	lsrs	r5, r1, #8

	pinmux_sel &= 0xFF;
1000c0b4:	23ff      	movs	r3, #255	; 0xff
1000c0b6:	4019      	ands	r1, r3

	if (gpio_pin <= 7) {
1000c0b8:	2807      	cmp	r0, #7
1000c0ba:	d833      	bhi.n	1000c124 <gpio_pinmux_cofiguration+0x74>
		LPMCU_MISC_REGS0->PINMUX_SEL_0.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000c0bc:	4a4e      	ldr	r2, [pc, #312]	; (1000c1f8 <gpio_pinmux_cofiguration+0x148>)
1000c0be:	6c54      	ldr	r4, [r2, #68]	; 0x44
1000c0c0:	3bf8      	subs	r3, #248	; 0xf8
1000c0c2:	4003      	ands	r3, r0
1000c0c4:	009b      	lsls	r3, r3, #2
1000c0c6:	2607      	movs	r6, #7
1000c0c8:	409e      	lsls	r6, r3
1000c0ca:	43b4      	bics	r4, r6
1000c0cc:	6454      	str	r4, [r2, #68]	; 0x44
		LPMCU_MISC_REGS0->PINMUX_SEL_0.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
1000c0ce:	6c54      	ldr	r4, [r2, #68]	; 0x44
1000c0d0:	000e      	movs	r6, r1
1000c0d2:	409e      	lsls	r6, r3
1000c0d4:	0033      	movs	r3, r6
1000c0d6:	4323      	orrs	r3, r4
1000c0d8:	6453      	str	r3, [r2, #68]	; 0x44
		if (pinmux_sel == 0x01) {
1000c0da:	2901      	cmp	r1, #1
1000c0dc:	d000      	beq.n	1000c0e0 <gpio_pinmux_cofiguration+0x30>
1000c0de:	e08a      	b.n	1000c1f6 <gpio_pinmux_cofiguration+0x146>
			if (gpio_pin <= 3) {
1000c0e0:	2803      	cmp	r0, #3
1000c0e2:	d80f      	bhi.n	1000c104 <gpio_pinmux_cofiguration+0x54>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_0.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000c0e4:	0011      	movs	r1, r2
1000c0e6:	22d0      	movs	r2, #208	; 0xd0
1000c0e8:	0052      	lsls	r2, r2, #1
1000c0ea:	588c      	ldr	r4, [r1, r2]
1000c0ec:	2303      	movs	r3, #3
1000c0ee:	4018      	ands	r0, r3
1000c0f0:	00c0      	lsls	r0, r0, #3
1000c0f2:	333c      	adds	r3, #60	; 0x3c
1000c0f4:	4083      	lsls	r3, r0
1000c0f6:	439c      	bics	r4, r3
1000c0f8:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_0.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000c0fa:	588b      	ldr	r3, [r1, r2]
1000c0fc:	4085      	lsls	r5, r0
1000c0fe:	431d      	orrs	r5, r3
1000c100:	508d      	str	r5, [r1, r2]
1000c102:	e078      	b.n	1000c1f6 <gpio_pinmux_cofiguration+0x146>
			} else if (gpio_pin <= 7) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_1.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000c104:	493c      	ldr	r1, [pc, #240]	; (1000c1f8 <gpio_pinmux_cofiguration+0x148>)
1000c106:	22d2      	movs	r2, #210	; 0xd2
1000c108:	0052      	lsls	r2, r2, #1
1000c10a:	588c      	ldr	r4, [r1, r2]
1000c10c:	2303      	movs	r3, #3
1000c10e:	4018      	ands	r0, r3
1000c110:	00c0      	lsls	r0, r0, #3
1000c112:	333c      	adds	r3, #60	; 0x3c
1000c114:	4083      	lsls	r3, r0
1000c116:	439c      	bics	r4, r3
1000c118:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_1.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000c11a:	588b      	ldr	r3, [r1, r2]
1000c11c:	4085      	lsls	r5, r0
1000c11e:	431d      	orrs	r5, r3
1000c120:	508d      	str	r5, [r1, r2]
1000c122:	e068      	b.n	1000c1f6 <gpio_pinmux_cofiguration+0x146>
			}
		}
	} else if (gpio_pin <= 15) {
1000c124:	280f      	cmp	r0, #15
1000c126:	d832      	bhi.n	1000c18e <gpio_pinmux_cofiguration+0xde>
		LPMCU_MISC_REGS0->PINMUX_SEL_1.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000c128:	4a33      	ldr	r2, [pc, #204]	; (1000c1f8 <gpio_pinmux_cofiguration+0x148>)
1000c12a:	6c94      	ldr	r4, [r2, #72]	; 0x48
1000c12c:	2307      	movs	r3, #7
1000c12e:	4003      	ands	r3, r0
1000c130:	009b      	lsls	r3, r3, #2
1000c132:	2607      	movs	r6, #7
1000c134:	409e      	lsls	r6, r3
1000c136:	43b4      	bics	r4, r6
1000c138:	6494      	str	r4, [r2, #72]	; 0x48
		LPMCU_MISC_REGS0->PINMUX_SEL_1.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
1000c13a:	6c94      	ldr	r4, [r2, #72]	; 0x48
1000c13c:	000e      	movs	r6, r1
1000c13e:	409e      	lsls	r6, r3
1000c140:	0033      	movs	r3, r6
1000c142:	4323      	orrs	r3, r4
1000c144:	6493      	str	r3, [r2, #72]	; 0x48
		if (pinmux_sel == 0x01) {
1000c146:	2901      	cmp	r1, #1
1000c148:	d155      	bne.n	1000c1f6 <gpio_pinmux_cofiguration+0x146>
			if (gpio_pin <= 11) {
1000c14a:	280b      	cmp	r0, #11
1000c14c:	d80f      	bhi.n	1000c16e <gpio_pinmux_cofiguration+0xbe>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_2.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000c14e:	0011      	movs	r1, r2
1000c150:	22d4      	movs	r2, #212	; 0xd4
1000c152:	0052      	lsls	r2, r2, #1
1000c154:	588c      	ldr	r4, [r1, r2]
1000c156:	2303      	movs	r3, #3
1000c158:	4018      	ands	r0, r3
1000c15a:	00c0      	lsls	r0, r0, #3
1000c15c:	333c      	adds	r3, #60	; 0x3c
1000c15e:	4083      	lsls	r3, r0
1000c160:	439c      	bics	r4, r3
1000c162:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_2.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000c164:	588b      	ldr	r3, [r1, r2]
1000c166:	4085      	lsls	r5, r0
1000c168:	431d      	orrs	r5, r3
1000c16a:	508d      	str	r5, [r1, r2]
1000c16c:	e043      	b.n	1000c1f6 <gpio_pinmux_cofiguration+0x146>
			} else if (gpio_pin <= 15) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_3.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000c16e:	4922      	ldr	r1, [pc, #136]	; (1000c1f8 <gpio_pinmux_cofiguration+0x148>)
1000c170:	22d6      	movs	r2, #214	; 0xd6
1000c172:	0052      	lsls	r2, r2, #1
1000c174:	588c      	ldr	r4, [r1, r2]
1000c176:	2303      	movs	r3, #3
1000c178:	4018      	ands	r0, r3
1000c17a:	00c0      	lsls	r0, r0, #3
1000c17c:	333c      	adds	r3, #60	; 0x3c
1000c17e:	4083      	lsls	r3, r0
1000c180:	439c      	bics	r4, r3
1000c182:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_3.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000c184:	588b      	ldr	r3, [r1, r2]
1000c186:	4085      	lsls	r5, r0
1000c188:	431d      	orrs	r5, r3
1000c18a:	508d      	str	r5, [r1, r2]
1000c18c:	e033      	b.n	1000c1f6 <gpio_pinmux_cofiguration+0x146>
			}
		}
	} else if (gpio_pin <= 23) {
1000c18e:	2817      	cmp	r0, #23
1000c190:	d831      	bhi.n	1000c1f6 <gpio_pinmux_cofiguration+0x146>
		LPMCU_MISC_REGS0->PINMUX_SEL_2.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000c192:	4a19      	ldr	r2, [pc, #100]	; (1000c1f8 <gpio_pinmux_cofiguration+0x148>)
1000c194:	6cd4      	ldr	r4, [r2, #76]	; 0x4c
1000c196:	2307      	movs	r3, #7
1000c198:	4003      	ands	r3, r0
1000c19a:	009b      	lsls	r3, r3, #2
1000c19c:	2607      	movs	r6, #7
1000c19e:	409e      	lsls	r6, r3
1000c1a0:	43b4      	bics	r4, r6
1000c1a2:	64d4      	str	r4, [r2, #76]	; 0x4c
		LPMCU_MISC_REGS0->PINMUX_SEL_2.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
1000c1a4:	6cd4      	ldr	r4, [r2, #76]	; 0x4c
1000c1a6:	000e      	movs	r6, r1
1000c1a8:	409e      	lsls	r6, r3
1000c1aa:	0033      	movs	r3, r6
1000c1ac:	4323      	orrs	r3, r4
1000c1ae:	64d3      	str	r3, [r2, #76]	; 0x4c
		if (pinmux_sel == 0x01) {
1000c1b0:	2901      	cmp	r1, #1
1000c1b2:	d120      	bne.n	1000c1f6 <gpio_pinmux_cofiguration+0x146>
			if (gpio_pin <= 19) {
1000c1b4:	2813      	cmp	r0, #19
1000c1b6:	d80f      	bhi.n	1000c1d8 <gpio_pinmux_cofiguration+0x128>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_4.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000c1b8:	0011      	movs	r1, r2
1000c1ba:	22d8      	movs	r2, #216	; 0xd8
1000c1bc:	0052      	lsls	r2, r2, #1
1000c1be:	588c      	ldr	r4, [r1, r2]
1000c1c0:	2303      	movs	r3, #3
1000c1c2:	4018      	ands	r0, r3
1000c1c4:	00c0      	lsls	r0, r0, #3
1000c1c6:	333c      	adds	r3, #60	; 0x3c
1000c1c8:	4083      	lsls	r3, r0
1000c1ca:	439c      	bics	r4, r3
1000c1cc:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_4.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000c1ce:	588b      	ldr	r3, [r1, r2]
1000c1d0:	4085      	lsls	r5, r0
1000c1d2:	431d      	orrs	r5, r3
1000c1d4:	508d      	str	r5, [r1, r2]
1000c1d6:	e00e      	b.n	1000c1f6 <gpio_pinmux_cofiguration+0x146>
			} else if (gpio_pin <= 23) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_5.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000c1d8:	4a07      	ldr	r2, [pc, #28]	; (1000c1f8 <gpio_pinmux_cofiguration+0x148>)
1000c1da:	23da      	movs	r3, #218	; 0xda
1000c1dc:	005b      	lsls	r3, r3, #1
1000c1de:	58d1      	ldr	r1, [r2, r3]
1000c1e0:	2403      	movs	r4, #3
1000c1e2:	4020      	ands	r0, r4
1000c1e4:	00c0      	lsls	r0, r0, #3
1000c1e6:	343c      	adds	r4, #60	; 0x3c
1000c1e8:	4084      	lsls	r4, r0
1000c1ea:	43a1      	bics	r1, r4
1000c1ec:	50d1      	str	r1, [r2, r3]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_5.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000c1ee:	58d1      	ldr	r1, [r2, r3]
1000c1f0:	4085      	lsls	r5, r0
1000c1f2:	430d      	orrs	r5, r1
1000c1f4:	50d5      	str	r5, [r2, r3]
			}
		}
	}
}
1000c1f6:	bd70      	pop	{r4, r5, r6, pc}
1000c1f8:	4000b000 	.word	0x4000b000

1000c1fc <gpio_register_callback>:
 * \param[in]  callback_type  Callback type given by an enum
 *
 */
void gpio_register_callback(uint8_t gpio_pin, gpio_callback_t callback_func,
				enum gpio_callback callback_type)
{
1000c1fc:	b5f0      	push	{r4, r5, r6, r7, lr}
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
		gpio_port = 0;
1000c1fe:	2300      	movs	r3, #0
	Assert(callback_func);
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
1000c200:	280f      	cmp	r0, #15
1000c202:	d904      	bls.n	1000c20e <gpio_register_callback+0x12>
		gpio_port = 0;
	} else if (gpio_pin < 32) {
		gpio_port = 1;
	} else {
		gpio_port = 2;
1000c204:	241f      	movs	r4, #31
1000c206:	4284      	cmp	r4, r0
1000c208:	415b      	adcs	r3, r3
1000c20a:	3c1d      	subs	r4, #29
1000c20c:	1ae3      	subs	r3, r4, r3
	}
	switch (callback_type) {
1000c20e:	2a01      	cmp	r2, #1
1000c210:	d016      	beq.n	1000c240 <gpio_register_callback+0x44>
1000c212:	2a00      	cmp	r2, #0
1000c214:	d004      	beq.n	1000c220 <gpio_register_callback+0x24>
1000c216:	2a02      	cmp	r2, #2
1000c218:	d022      	beq.n	1000c260 <gpio_register_callback+0x64>
1000c21a:	2a03      	cmp	r2, #3
1000c21c:	d030      	beq.n	1000c280 <gpio_register_callback+0x84>
1000c21e:	e03e      	b.n	1000c29e <gpio_register_callback+0xa2>
	case GPIO_CALLBACK_LOW:
		_gpio_instances[gpio_port].hw->INTTYPECLR.reg = 1 << (gpio_pin % 16);
1000c220:	4e29      	ldr	r6, [pc, #164]	; (1000c2c8 <gpio_register_callback+0xcc>)
1000c222:	00dc      	lsls	r4, r3, #3
1000c224:	18e2      	adds	r2, r4, r3
1000c226:	00d2      	lsls	r2, r2, #3
1000c228:	5997      	ldr	r7, [r2, r6]
1000c22a:	250f      	movs	r5, #15
1000c22c:	4005      	ands	r5, r0
1000c22e:	2201      	movs	r2, #1
1000c230:	40aa      	lsls	r2, r5
1000c232:	b292      	uxth	r2, r2
1000c234:	85ba      	strh	r2, [r7, #44]	; 0x2c
		_gpio_instances[gpio_port].hw->INTPOLCLR.reg = 1 << (gpio_pin % 16);
1000c236:	18e4      	adds	r4, r4, r3
1000c238:	00e4      	lsls	r4, r4, #3
1000c23a:	59a4      	ldr	r4, [r4, r6]
1000c23c:	86a2      	strh	r2, [r4, #52]	; 0x34
		break;
1000c23e:	e02e      	b.n	1000c29e <gpio_register_callback+0xa2>

	case GPIO_CALLBACK_HIGH:
		_gpio_instances[gpio_port].hw->INTTYPECLR.reg = 1 << (gpio_pin % 16);
1000c240:	4e21      	ldr	r6, [pc, #132]	; (1000c2c8 <gpio_register_callback+0xcc>)
1000c242:	00dc      	lsls	r4, r3, #3
1000c244:	18e2      	adds	r2, r4, r3
1000c246:	00d2      	lsls	r2, r2, #3
1000c248:	5997      	ldr	r7, [r2, r6]
1000c24a:	250f      	movs	r5, #15
1000c24c:	4005      	ands	r5, r0
1000c24e:	2201      	movs	r2, #1
1000c250:	40aa      	lsls	r2, r5
1000c252:	b292      	uxth	r2, r2
1000c254:	85ba      	strh	r2, [r7, #44]	; 0x2c
		_gpio_instances[gpio_port].hw->INTPOLSET.reg = 1 << (gpio_pin % 16);
1000c256:	18e4      	adds	r4, r4, r3
1000c258:	00e4      	lsls	r4, r4, #3
1000c25a:	59a4      	ldr	r4, [r4, r6]
1000c25c:	8622      	strh	r2, [r4, #48]	; 0x30
		break;
1000c25e:	e01e      	b.n	1000c29e <gpio_register_callback+0xa2>

	case GPIO_CALLBACK_RISING:
		_gpio_instances[gpio_port].hw->INTTYPESET.reg = 1 << (gpio_pin % 16);
1000c260:	4e19      	ldr	r6, [pc, #100]	; (1000c2c8 <gpio_register_callback+0xcc>)
1000c262:	00dc      	lsls	r4, r3, #3
1000c264:	18e2      	adds	r2, r4, r3
1000c266:	00d2      	lsls	r2, r2, #3
1000c268:	5997      	ldr	r7, [r2, r6]
1000c26a:	250f      	movs	r5, #15
1000c26c:	4005      	ands	r5, r0
1000c26e:	2201      	movs	r2, #1
1000c270:	40aa      	lsls	r2, r5
1000c272:	b292      	uxth	r2, r2
1000c274:	853a      	strh	r2, [r7, #40]	; 0x28
		_gpio_instances[gpio_port].hw->INTPOLSET.reg = 1 << (gpio_pin % 16);
1000c276:	18e4      	adds	r4, r4, r3
1000c278:	00e4      	lsls	r4, r4, #3
1000c27a:	59a4      	ldr	r4, [r4, r6]
1000c27c:	8622      	strh	r2, [r4, #48]	; 0x30
		break;
1000c27e:	e00e      	b.n	1000c29e <gpio_register_callback+0xa2>

	case GPIO_CALLBACK_FALLING:
		_gpio_instances[gpio_port].hw->INTTYPESET.reg = 1 << (gpio_pin % 16);
1000c280:	4e11      	ldr	r6, [pc, #68]	; (1000c2c8 <gpio_register_callback+0xcc>)
1000c282:	00dc      	lsls	r4, r3, #3
1000c284:	18e2      	adds	r2, r4, r3
1000c286:	00d2      	lsls	r2, r2, #3
1000c288:	5997      	ldr	r7, [r2, r6]
1000c28a:	250f      	movs	r5, #15
1000c28c:	4005      	ands	r5, r0
1000c28e:	2201      	movs	r2, #1
1000c290:	40aa      	lsls	r2, r5
1000c292:	b292      	uxth	r2, r2
1000c294:	853a      	strh	r2, [r7, #40]	; 0x28
		_gpio_instances[gpio_port].hw->INTPOLCLR.reg = (1 << (gpio_pin % 16));
1000c296:	18e4      	adds	r4, r4, r3
1000c298:	00e4      	lsls	r4, r4, #3
1000c29a:	59a4      	ldr	r4, [r4, r6]
1000c29c:	86a2      	strh	r2, [r4, #52]	; 0x34

	case GPIO_CALLBACK_N:
		break;
	}
	/* Register callback function */
	_gpio_instances[gpio_port].callback[gpio_pin % 16] = callback_func;
1000c29e:	220f      	movs	r2, #15
1000c2a0:	4010      	ands	r0, r2
1000c2a2:	4c09      	ldr	r4, [pc, #36]	; (1000c2c8 <gpio_register_callback+0xcc>)
1000c2a4:	00dd      	lsls	r5, r3, #3
1000c2a6:	18ea      	adds	r2, r5, r3
1000c2a8:	0052      	lsls	r2, r2, #1
1000c2aa:	1812      	adds	r2, r2, r0
1000c2ac:	0092      	lsls	r2, r2, #2
1000c2ae:	18a2      	adds	r2, r4, r2
1000c2b0:	6051      	str	r1, [r2, #4]
	/* Set the bit corresponding to the gpio pin */
	_gpio_instances[gpio_port].callback_reg_mask |= (1 << (gpio_pin % 16));
1000c2b2:	18ea      	adds	r2, r5, r3
1000c2b4:	00d2      	lsls	r2, r2, #3
1000c2b6:	18a2      	adds	r2, r4, r2
1000c2b8:	3244      	adds	r2, #68	; 0x44
1000c2ba:	2101      	movs	r1, #1
1000c2bc:	4081      	lsls	r1, r0
1000c2be:	8813      	ldrh	r3, [r2, #0]
1000c2c0:	430b      	orrs	r3, r1
1000c2c2:	8013      	strh	r3, [r2, #0]
}
1000c2c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000c2c6:	46c0      	nop			; (mov r8, r8)
1000c2c8:	10019edc 	.word	0x10019edc

1000c2cc <gpio_enable_callback>:
 * conditions for the callback type are met.
 *
 * \param[in]  gpio_pin   GPIO pin
 */
void gpio_enable_callback(uint8_t gpio_pin)
{
1000c2cc:	b530      	push	{r4, r5, lr}
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
1000c2ce:	280f      	cmp	r0, #15
1000c2d0:	d805      	bhi.n	1000c2de <gpio_enable_callback+0x12>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000c2d2:	2280      	movs	r2, #128	; 0x80
1000c2d4:	0412      	lsls	r2, r2, #16
1000c2d6:	4b12      	ldr	r3, [pc, #72]	; (1000c320 <gpio_enable_callback+0x54>)
1000c2d8:	601a      	str	r2, [r3, #0]
		gpio_port = 0;
1000c2da:	2200      	movs	r2, #0
1000c2dc:	e00c      	b.n	1000c2f8 <gpio_enable_callback+0x2c>
		NVIC_EnableIRQ(GPIO0_IRQn);
	} else if (gpio_pin < 32) {
1000c2de:	281f      	cmp	r0, #31
1000c2e0:	d805      	bhi.n	1000c2ee <gpio_enable_callback+0x22>
1000c2e2:	2280      	movs	r2, #128	; 0x80
1000c2e4:	0452      	lsls	r2, r2, #17
1000c2e6:	4b0e      	ldr	r3, [pc, #56]	; (1000c320 <gpio_enable_callback+0x54>)
1000c2e8:	601a      	str	r2, [r3, #0]
		gpio_port = 1;
1000c2ea:	2201      	movs	r2, #1
1000c2ec:	e004      	b.n	1000c2f8 <gpio_enable_callback+0x2c>
1000c2ee:	2280      	movs	r2, #128	; 0x80
1000c2f0:	0492      	lsls	r2, r2, #18
1000c2f2:	4b0b      	ldr	r3, [pc, #44]	; (1000c320 <gpio_enable_callback+0x54>)
1000c2f4:	601a      	str	r2, [r3, #0]
		NVIC_EnableIRQ(GPIO1_IRQn);
	} else {
		gpio_port = 2;
1000c2f6:	2202      	movs	r2, #2
		NVIC_EnableIRQ(GPIO2_IRQn);
	}

	/* Enable callback */
	_gpio_instances[gpio_port].callback_enable_mask |= (1 << (gpio_pin % 16));
1000c2f8:	230f      	movs	r3, #15
1000c2fa:	4018      	ands	r0, r3
1000c2fc:	2101      	movs	r1, #1
1000c2fe:	4081      	lsls	r1, r0
1000c300:	4c08      	ldr	r4, [pc, #32]	; (1000c324 <gpio_enable_callback+0x58>)
1000c302:	00d5      	lsls	r5, r2, #3
1000c304:	18ab      	adds	r3, r5, r2
1000c306:	00db      	lsls	r3, r3, #3
1000c308:	18e3      	adds	r3, r4, r3
1000c30a:	3346      	adds	r3, #70	; 0x46
1000c30c:	8818      	ldrh	r0, [r3, #0]
1000c30e:	4308      	orrs	r0, r1
1000c310:	8018      	strh	r0, [r3, #0]
	_gpio_instances[gpio_port].hw->INTENSET.reg = (1 << (gpio_pin % 16));
1000c312:	18aa      	adds	r2, r5, r2
1000c314:	00d2      	lsls	r2, r2, #3
1000c316:	5913      	ldr	r3, [r2, r4]
1000c318:	b289      	uxth	r1, r1
1000c31a:	8419      	strh	r1, [r3, #32]
}
1000c31c:	bd30      	pop	{r4, r5, pc}
1000c31e:	46c0      	nop			; (mov r8, r8)
1000c320:	e000e100 	.word	0xe000e100
1000c324:	10019edc 	.word	0x10019edc

1000c328 <gpio_disable_callback>:
 * The callback function will not be called from the interrupt handler.
 *
 * \param[in]  gpio_pin   GPIO pin
 */
void gpio_disable_callback(uint8_t gpio_pin)
{
1000c328:	b530      	push	{r4, r5, lr}
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
		gpio_port = 0;
1000c32a:	2300      	movs	r3, #0
{
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
1000c32c:	280f      	cmp	r0, #15
1000c32e:	d904      	bls.n	1000c33a <gpio_disable_callback+0x12>
		gpio_port = 0;
	} else if (gpio_pin < 32) {
		gpio_port = 1;
	} else {
		gpio_port = 2;
1000c330:	221f      	movs	r2, #31
1000c332:	4282      	cmp	r2, r0
1000c334:	415b      	adcs	r3, r3
1000c336:	3a1d      	subs	r2, #29
1000c338:	1ad3      	subs	r3, r2, r3
	}

	/* Enable callback */
	_gpio_instances[gpio_port].callback_enable_mask &= ~(1 << (gpio_pin % 16));
1000c33a:	220f      	movs	r2, #15
1000c33c:	4010      	ands	r0, r2
1000c33e:	2101      	movs	r1, #1
1000c340:	4081      	lsls	r1, r0
1000c342:	4c07      	ldr	r4, [pc, #28]	; (1000c360 <gpio_disable_callback+0x38>)
1000c344:	00dd      	lsls	r5, r3, #3
1000c346:	18ea      	adds	r2, r5, r3
1000c348:	00d2      	lsls	r2, r2, #3
1000c34a:	18a2      	adds	r2, r4, r2
1000c34c:	3246      	adds	r2, #70	; 0x46
1000c34e:	8810      	ldrh	r0, [r2, #0]
1000c350:	4388      	bics	r0, r1
1000c352:	8010      	strh	r0, [r2, #0]
	_gpio_instances[gpio_port].hw->INTENCLR.reg = (1 << (gpio_pin % 16));
1000c354:	18eb      	adds	r3, r5, r3
1000c356:	00db      	lsls	r3, r3, #3
1000c358:	591b      	ldr	r3, [r3, r4]
1000c35a:	b289      	uxth	r1, r1
1000c35c:	8499      	strh	r1, [r3, #36]	; 0x24
}
1000c35e:	bd30      	pop	{r4, r5, pc}
1000c360:	10019edc 	.word	0x10019edc

1000c364 <gpio_init>:
 *
 * This function will init GPIO callback.
 *
 */
void gpio_init(void)
{
1000c364:	b510      	push	{r4, lr}
1000c366:	4a11      	ldr	r2, [pc, #68]	; (1000c3ac <gpio_init+0x48>)
1000c368:	0010      	movs	r0, r2
1000c36a:	30d8      	adds	r0, #216	; 0xd8
	uint8_t i, j;

	for(i = 0; i < 3; i++) {
		for(j = 0; j < 16; j++) {
			_gpio_instances[i].callback[j] = NULL;
1000c36c:	2100      	movs	r1, #0
1000c36e:	e007      	b.n	1000c380 <gpio_init+0x1c>
1000c370:	c302      	stmia	r3!, {r1}
void gpio_init(void)
{
	uint8_t i, j;

	for(i = 0; i < 3; i++) {
		for(j = 0; j < 16; j++) {
1000c372:	4293      	cmp	r3, r2
1000c374:	d1fc      	bne.n	1000c370 <gpio_init+0xc>
			_gpio_instances[i].callback[j] = NULL;
		}
		_gpio_instances[i].callback_enable_mask = 0;
1000c376:	8051      	strh	r1, [r2, #2]
		_gpio_instances[i].callback_reg_mask = 0;
1000c378:	8011      	strh	r1, [r2, #0]
1000c37a:	3248      	adds	r2, #72	; 0x48
 */
void gpio_init(void)
{
	uint8_t i, j;

	for(i = 0; i < 3; i++) {
1000c37c:	4282      	cmp	r2, r0
1000c37e:	d002      	beq.n	1000c386 <gpio_init+0x22>
1000c380:	0013      	movs	r3, r2
1000c382:	3b40      	subs	r3, #64	; 0x40
1000c384:	e7f4      	b.n	1000c370 <gpio_init+0xc>
			_gpio_instances[i].callback[j] = NULL;
		}
		_gpio_instances[i].callback_enable_mask = 0;
		_gpio_instances[i].callback_reg_mask = 0;
	}
	_gpio_instances[0].hw = (void *)GPIO0;
1000c386:	4b0a      	ldr	r3, [pc, #40]	; (1000c3b0 <gpio_init+0x4c>)
1000c388:	4a0a      	ldr	r2, [pc, #40]	; (1000c3b4 <gpio_init+0x50>)
1000c38a:	601a      	str	r2, [r3, #0]
	_gpio_instances[1].hw = (void *)GPIO1;
1000c38c:	4a0a      	ldr	r2, [pc, #40]	; (1000c3b8 <gpio_init+0x54>)
1000c38e:	649a      	str	r2, [r3, #72]	; 0x48
	_gpio_instances[2].hw = (void *)GPIO2;
1000c390:	490a      	ldr	r1, [pc, #40]	; (1000c3bc <gpio_init+0x58>)
1000c392:	2290      	movs	r2, #144	; 0x90
1000c394:	5099      	str	r1, [r3, r2]
	system_register_isr(RAM_ISR_TABLE_PORT0_COMB_INDEX, (uint32_t)gpio_port0_isr_handler);
1000c396:	490a      	ldr	r1, [pc, #40]	; (1000c3c0 <gpio_init+0x5c>)
1000c398:	2027      	movs	r0, #39	; 0x27
1000c39a:	4c0a      	ldr	r4, [pc, #40]	; (1000c3c4 <gpio_init+0x60>)
1000c39c:	47a0      	blx	r4
	system_register_isr(RAM_ISR_TABLE_PORT1_COMB_INDEX, (uint32_t)gpio_port1_isr_handler);
1000c39e:	490a      	ldr	r1, [pc, #40]	; (1000c3c8 <gpio_init+0x64>)
1000c3a0:	2028      	movs	r0, #40	; 0x28
1000c3a2:	47a0      	blx	r4
	system_register_isr(RAM_ISR_TABLE_PORT2_COMB_INDEX, (uint32_t)gpio_port2_isr_handler);
1000c3a4:	4909      	ldr	r1, [pc, #36]	; (1000c3cc <gpio_init+0x68>)
1000c3a6:	2029      	movs	r0, #41	; 0x29
1000c3a8:	47a0      	blx	r4
}
1000c3aa:	bd10      	pop	{r4, pc}
1000c3ac:	10019f20 	.word	0x10019f20
1000c3b0:	10019edc 	.word	0x10019edc
1000c3b4:	40010000 	.word	0x40010000
1000c3b8:	40011000 	.word	0x40011000
1000c3bc:	40013000 	.word	0x40013000
1000c3c0:	1000bc6d 	.word	0x1000bc6d
1000c3c4:	1000cf91 	.word	0x1000cf91
1000c3c8:	1000bcd1 	.word	0x1000bcd1
1000c3cc:	1000bd41 	.word	0x1000bd41

1000c3d0 <system_clock_config>:
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_clock_config(enum system_clock_resource resoure, \
				enum system_clock_freq freq)
{
	switch (resoure) {
1000c3d0:	2801      	cmp	r0, #1
1000c3d2:	d00d      	beq.n	1000c3f0 <system_clock_config+0x20>
1000c3d4:	2800      	cmp	r0, #0
1000c3d6:	d002      	beq.n	1000c3de <system_clock_config+0xe>
1000c3d8:	2802      	cmp	r0, #2
1000c3da:	d01c      	beq.n	1000c416 <system_clock_config+0x46>
1000c3dc:	e02e      	b.n	1000c43c <system_clock_config+0x6c>
		case CLOCK_RESOURCE_XO_26_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
1000c3de:	4a18      	ldr	r2, [pc, #96]	; (1000c440 <system_clock_config+0x70>)
1000c3e0:	6990      	ldr	r0, [r2, #24]
1000c3e2:	230c      	movs	r3, #12
1000c3e4:	4303      	orrs	r3, r0
1000c3e6:	6193      	str	r3, [r2, #24]
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_BT26M_CLK | \
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK;
			system_clock_value = 26000000;
1000c3e8:	4a16      	ldr	r2, [pc, #88]	; (1000c444 <system_clock_config+0x74>)
1000c3ea:	4b17      	ldr	r3, [pc, #92]	; (1000c448 <system_clock_config+0x78>)
1000c3ec:	601a      	str	r2, [r3, #0]
			break;
1000c3ee:	e01a      	b.n	1000c426 <system_clock_config+0x56>

		case CLOCK_RESOURCE_LP_2_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
1000c3f0:	4b13      	ldr	r3, [pc, #76]	; (1000c440 <system_clock_config+0x70>)
1000c3f2:	6998      	ldr	r0, [r3, #24]
1000c3f4:	2208      	movs	r2, #8
1000c3f6:	4302      	orrs	r2, r0
1000c3f8:	619a      	str	r2, [r3, #24]
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK;
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg &= \
1000c3fa:	699a      	ldr	r2, [r3, #24]
1000c3fc:	2004      	movs	r0, #4
1000c3fe:	4382      	bics	r2, r0
1000c400:	619a      	str	r2, [r3, #24]
					~LPMCU_MISC_REGS_LPMCU_CTRL_USE_BT26M_CLK;
			AON_GP_REGS0->AON_PMU_CTRL.reg |= \
1000c402:	4a12      	ldr	r2, [pc, #72]	; (1000c44c <system_clock_config+0x7c>)
1000c404:	6853      	ldr	r3, [r2, #4]
1000c406:	2080      	movs	r0, #128	; 0x80
1000c408:	0300      	lsls	r0, r0, #12
1000c40a:	4303      	orrs	r3, r0
1000c40c:	6053      	str	r3, [r2, #4]
					AON_GP_REGS_AON_PMU_CTRL_PMU_2MHZ_CLK_EN;
			system_clock_value = 2000000;
1000c40e:	4a10      	ldr	r2, [pc, #64]	; (1000c450 <system_clock_config+0x80>)
1000c410:	4b0d      	ldr	r3, [pc, #52]	; (1000c448 <system_clock_config+0x78>)
1000c412:	601a      	str	r2, [r3, #0]
			break;
1000c414:	e007      	b.n	1000c426 <system_clock_config+0x56>

		case CLOCK_RESOURCE_RC_26_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg &= \
1000c416:	4a0a      	ldr	r2, [pc, #40]	; (1000c440 <system_clock_config+0x70>)
1000c418:	6993      	ldr	r3, [r2, #24]
1000c41a:	200c      	movs	r0, #12
1000c41c:	4383      	bics	r3, r0
1000c41e:	6193      	str	r3, [r2, #24]
					~(LPMCU_MISC_REGS_LPMCU_CTRL_USE_BT26M_CLK | \
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK);
			system_clock_value = 26000000;
1000c420:	4a08      	ldr	r2, [pc, #32]	; (1000c444 <system_clock_config+0x74>)
1000c422:	4b09      	ldr	r3, [pc, #36]	; (1000c448 <system_clock_config+0x78>)
1000c424:	601a      	str	r2, [r3, #0]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	LPMCU_MISC_REGS0->LPMCU_CTRL.reg &= \
1000c426:	4b06      	ldr	r3, [pc, #24]	; (1000c440 <system_clock_config+0x70>)
1000c428:	699a      	ldr	r2, [r3, #24]
1000c42a:	2003      	movs	r0, #3
1000c42c:	4382      	bics	r2, r0
1000c42e:	619a      	str	r2, [r3, #24]
		~LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL_Msk;
	LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
1000c430:	699a      	ldr	r2, [r3, #24]
1000c432:	4001      	ands	r1, r0
1000c434:	4311      	orrs	r1, r2
1000c436:	6199      	str	r1, [r3, #24]
		LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL(freq);

	return STATUS_OK;
1000c438:	2000      	movs	r0, #0
1000c43a:	e000      	b.n	1000c43e <system_clock_config+0x6e>
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK);
			system_clock_value = 26000000;
			break;

		default:
			return STATUS_ERR_INVALID_ARG;
1000c43c:	2017      	movs	r0, #23
		~LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL_Msk;
	LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
		LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL(freq);

	return STATUS_OK;
}
1000c43e:	4770      	bx	lr
1000c440:	4000b000 	.word	0x4000b000
1000c444:	018cba80 	.word	0x018cba80
1000c448:	10019fb4 	.word	0x10019fb4
1000c44c:	4000f000 	.word	0x4000f000
1000c450:	001e8480 	.word	0x001e8480

1000c454 <system_clock_get_value>:
 *
 * \return system clock value.
 */
uint32_t system_clock_get_value(void)
{
	return system_clock_value;
1000c454:	4b01      	ldr	r3, [pc, #4]	; (1000c45c <system_clock_get_value+0x8>)
1000c456:	6818      	ldr	r0, [r3, #0]
}
1000c458:	4770      	bx	lr
1000c45a:	46c0      	nop			; (mov r8, r8)
1000c45c:	10019fb4 	.word	0x10019fb4

1000c460 <system_clock_peripheral_enable>:
 * \return Status of operation.
 * \retval STATUS_OK               Clock config correctly
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_clock_peripheral_enable(enum system_peripheral peripheral)
{
1000c460:	b500      	push	{lr}
	switch (peripheral) {
1000c462:	2835      	cmp	r0, #53	; 0x35
1000c464:	d900      	bls.n	1000c468 <system_clock_peripheral_enable+0x8>
1000c466:	e1a2      	b.n	1000c7ae <system_clock_peripheral_enable+0x34e>
1000c468:	0080      	lsls	r0, r0, #2
1000c46a:	4bd2      	ldr	r3, [pc, #840]	; (1000c7b4 <system_clock_peripheral_enable+0x354>)
1000c46c:	581b      	ldr	r3, [r3, r0]
1000c46e:	469f      	mov	pc, r3
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c470:	4ad1      	ldr	r2, [pc, #836]	; (1000c7b8 <system_clock_peripheral_enable+0x358>)
1000c472:	68d1      	ldr	r1, [r2, #12]
1000c474:	2302      	movs	r3, #2
1000c476:	430b      	orrs	r3, r1
1000c478:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c47a:	2000      	movs	r0, #0
{
	switch (peripheral) {
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI_FLASH0_CLK_EN;
		break;
1000c47c:	e198      	b.n	1000c7b0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c47e:	4ace      	ldr	r2, [pc, #824]	; (1000c7b8 <system_clock_peripheral_enable+0x358>)
1000c480:	68d1      	ldr	r1, [r2, #12]
1000c482:	2304      	movs	r3, #4
1000c484:	430b      	orrs	r3, r1
1000c486:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c488:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI0_CORE_CLK_EN;
		break;
1000c48a:	e191      	b.n	1000c7b0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c48c:	4aca      	ldr	r2, [pc, #808]	; (1000c7b8 <system_clock_peripheral_enable+0x358>)
1000c48e:	68d1      	ldr	r1, [r2, #12]
1000c490:	2308      	movs	r3, #8
1000c492:	430b      	orrs	r3, r1
1000c494:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c496:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI1_CORE_CLK_EN;
		break;
1000c498:	e18a      	b.n	1000c7b0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c49a:	4ac7      	ldr	r2, [pc, #796]	; (1000c7b8 <system_clock_peripheral_enable+0x358>)
1000c49c:	68d1      	ldr	r1, [r2, #12]
1000c49e:	2310      	movs	r3, #16
1000c4a0:	430b      	orrs	r3, r1
1000c4a2:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c4a4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C0_CORE_CLK_EN;
		break;
1000c4a6:	e183      	b.n	1000c7b0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c4a8:	4ac3      	ldr	r2, [pc, #780]	; (1000c7b8 <system_clock_peripheral_enable+0x358>)
1000c4aa:	68d1      	ldr	r1, [r2, #12]
1000c4ac:	2320      	movs	r3, #32
1000c4ae:	430b      	orrs	r3, r1
1000c4b0:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c4b2:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_DUALTIMER0_CLK_EN;
		break;
1000c4b4:	e17c      	b.n	1000c7b0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c4b6:	4ac0      	ldr	r2, [pc, #768]	; (1000c7b8 <system_clock_peripheral_enable+0x358>)
1000c4b8:	68d1      	ldr	r1, [r2, #12]
1000c4ba:	2380      	movs	r3, #128	; 0x80
1000c4bc:	430b      	orrs	r3, r1
1000c4be:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c4c0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_GPIO_CLK_EN;
		break;
1000c4c2:	e175      	b.n	1000c7b0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c4c4:	4abc      	ldr	r2, [pc, #752]	; (1000c7b8 <system_clock_peripheral_enable+0x358>)
1000c4c6:	68d3      	ldr	r3, [r2, #12]
1000c4c8:	2180      	movs	r1, #128	; 0x80
1000c4ca:	0049      	lsls	r1, r1, #1
1000c4cc:	430b      	orrs	r3, r1
1000c4ce:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c4d0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_TIMER0_CLK_EN;
		break;
1000c4d2:	e16d      	b.n	1000c7b0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c4d4:	4ab8      	ldr	r2, [pc, #736]	; (1000c7b8 <system_clock_peripheral_enable+0x358>)
1000c4d6:	68d3      	ldr	r3, [r2, #12]
1000c4d8:	2180      	movs	r1, #128	; 0x80
1000c4da:	0109      	lsls	r1, r1, #4
1000c4dc:	430b      	orrs	r3, r1
1000c4de:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c4e0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WDT0_CLK_EN;
		break;
1000c4e2:	e165      	b.n	1000c7b0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c4e4:	4ab4      	ldr	r2, [pc, #720]	; (1000c7b8 <system_clock_peripheral_enable+0x358>)
1000c4e6:	68d3      	ldr	r3, [r2, #12]
1000c4e8:	2180      	movs	r1, #128	; 0x80
1000c4ea:	0149      	lsls	r1, r1, #5
1000c4ec:	430b      	orrs	r3, r1
1000c4ee:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c4f0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WDT1_CLK_EN;
		break;
1000c4f2:	e15d      	b.n	1000c7b0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c4f4:	4ab0      	ldr	r2, [pc, #704]	; (1000c7b8 <system_clock_peripheral_enable+0x358>)
1000c4f6:	68d3      	ldr	r3, [r2, #12]
1000c4f8:	2180      	movs	r1, #128	; 0x80
1000c4fa:	0189      	lsls	r1, r1, #6
1000c4fc:	430b      	orrs	r3, r1
1000c4fe:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c500:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART0_CORE_CLK_EN;
		break;
1000c502:	e155      	b.n	1000c7b0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c504:	4aac      	ldr	r2, [pc, #688]	; (1000c7b8 <system_clock_peripheral_enable+0x358>)
1000c506:	68d3      	ldr	r3, [r2, #12]
1000c508:	2180      	movs	r1, #128	; 0x80
1000c50a:	01c9      	lsls	r1, r1, #7
1000c50c:	430b      	orrs	r3, r1
1000c50e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c510:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART0_IF_CLK_EN;
		break;
1000c512:	e14d      	b.n	1000c7b0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c514:	4aa8      	ldr	r2, [pc, #672]	; (1000c7b8 <system_clock_peripheral_enable+0x358>)
1000c516:	68d3      	ldr	r3, [r2, #12]
1000c518:	2180      	movs	r1, #128	; 0x80
1000c51a:	0209      	lsls	r1, r1, #8
1000c51c:	430b      	orrs	r3, r1
1000c51e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c520:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART1_CORE_CLK_EN;
		break;
1000c522:	e145      	b.n	1000c7b0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c524:	4aa4      	ldr	r2, [pc, #656]	; (1000c7b8 <system_clock_peripheral_enable+0x358>)
1000c526:	68d3      	ldr	r3, [r2, #12]
1000c528:	2180      	movs	r1, #128	; 0x80
1000c52a:	0249      	lsls	r1, r1, #9
1000c52c:	430b      	orrs	r3, r1
1000c52e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c530:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART1_IF_CLK_EN;
		break;
1000c532:	e13d      	b.n	1000c7b0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c534:	4aa0      	ldr	r2, [pc, #640]	; (1000c7b8 <system_clock_peripheral_enable+0x358>)
1000c536:	68d3      	ldr	r3, [r2, #12]
1000c538:	2180      	movs	r1, #128	; 0x80
1000c53a:	0289      	lsls	r1, r1, #10
1000c53c:	430b      	orrs	r3, r1
1000c53e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c540:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IRQ_CTRLR_CORE_CLK_EN;
		break;
1000c542:	e135      	b.n	1000c7b0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c544:	4a9c      	ldr	r2, [pc, #624]	; (1000c7b8 <system_clock_peripheral_enable+0x358>)
1000c546:	68d3      	ldr	r3, [r2, #12]
1000c548:	2180      	movs	r1, #128	; 0x80
1000c54a:	02c9      	lsls	r1, r1, #11
1000c54c:	430b      	orrs	r3, r1
1000c54e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c550:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_1_GL_MEM_CLK_EN;
		break;
1000c552:	e12d      	b.n	1000c7b0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c554:	4a98      	ldr	r2, [pc, #608]	; (1000c7b8 <system_clock_peripheral_enable+0x358>)
1000c556:	68d3      	ldr	r3, [r2, #12]
1000c558:	2180      	movs	r1, #128	; 0x80
1000c55a:	0309      	lsls	r1, r1, #12
1000c55c:	430b      	orrs	r3, r1
1000c55e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c560:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_2_GL_MEM_CLK_EN;
		break;
1000c562:	e125      	b.n	1000c7b0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c564:	4a94      	ldr	r2, [pc, #592]	; (1000c7b8 <system_clock_peripheral_enable+0x358>)
1000c566:	68d3      	ldr	r3, [r2, #12]
1000c568:	2180      	movs	r1, #128	; 0x80
1000c56a:	0349      	lsls	r1, r1, #13
1000c56c:	430b      	orrs	r3, r1
1000c56e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c570:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ROM_MEM_CLK_EN;
		break;
1000c572:	e11d      	b.n	1000c7b0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c574:	4a90      	ldr	r2, [pc, #576]	; (1000c7b8 <system_clock_peripheral_enable+0x358>)
1000c576:	68d3      	ldr	r3, [r2, #12]
1000c578:	2180      	movs	r1, #128	; 0x80
1000c57a:	0389      	lsls	r1, r1, #14
1000c57c:	430b      	orrs	r3, r1
1000c57e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c580:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_XBAR_IF_CLK_EN;
		break;
1000c582:	e115      	b.n	1000c7b0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c584:	4a8c      	ldr	r2, [pc, #560]	; (1000c7b8 <system_clock_peripheral_enable+0x358>)
1000c586:	68d3      	ldr	r3, [r2, #12]
1000c588:	2180      	movs	r1, #128	; 0x80
1000c58a:	03c9      	lsls	r1, r1, #15
1000c58c:	430b      	orrs	r3, r1
1000c58e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c590:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_AON_WRAPPER_CLK_EN;
		break;
1000c592:	e10d      	b.n	1000c7b0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c594:	4a88      	ldr	r2, [pc, #544]	; (1000c7b8 <system_clock_peripheral_enable+0x358>)
1000c596:	68d3      	ldr	r3, [r2, #12]
1000c598:	2180      	movs	r1, #128	; 0x80
1000c59a:	0409      	lsls	r1, r1, #16
1000c59c:	430b      	orrs	r3, r1
1000c59e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c5a0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLK_EN;
		break;
1000c5a2:	e105      	b.n	1000c7b0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c5a4:	4a84      	ldr	r2, [pc, #528]	; (1000c7b8 <system_clock_peripheral_enable+0x358>)
1000c5a6:	68d3      	ldr	r3, [r2, #12]
1000c5a8:	2180      	movs	r1, #128	; 0x80
1000c5aa:	0449      	lsls	r1, r1, #17
1000c5ac:	430b      	orrs	r3, r1
1000c5ae:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c5b0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLKG_EN;
		break;
1000c5b2:	e0fd      	b.n	1000c7b0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c5b4:	4a80      	ldr	r2, [pc, #512]	; (1000c7b8 <system_clock_peripheral_enable+0x358>)
1000c5b6:	68d3      	ldr	r3, [r2, #12]
1000c5b8:	2180      	movs	r1, #128	; 0x80
1000c5ba:	0489      	lsls	r1, r1, #18
1000c5bc:	430b      	orrs	r3, r1
1000c5be:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c5c0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_BLE_MEM_CLK_EN;
		break;
1000c5c2:	e0f5      	b.n	1000c7b0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c5c4:	4a7c      	ldr	r2, [pc, #496]	; (1000c7b8 <system_clock_peripheral_enable+0x358>)
1000c5c6:	68d3      	ldr	r3, [r2, #12]
1000c5c8:	2180      	movs	r1, #128	; 0x80
1000c5ca:	04c9      	lsls	r1, r1, #19
1000c5cc:	430b      	orrs	r3, r1
1000c5ce:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c5d0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC0_CLK_EN;
		break;
1000c5d2:	e0ed      	b.n	1000c7b0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c5d4:	4a78      	ldr	r2, [pc, #480]	; (1000c7b8 <system_clock_peripheral_enable+0x358>)
1000c5d6:	68d3      	ldr	r3, [r2, #12]
1000c5d8:	2180      	movs	r1, #128	; 0x80
1000c5da:	0509      	lsls	r1, r1, #20
1000c5dc:	430b      	orrs	r3, r1
1000c5de:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c5e0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC1_CLK_EN;
		break;
1000c5e2:	e0e5      	b.n	1000c7b0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c5e4:	4a74      	ldr	r2, [pc, #464]	; (1000c7b8 <system_clock_peripheral_enable+0x358>)
1000c5e6:	68d3      	ldr	r3, [r2, #12]
1000c5e8:	2180      	movs	r1, #128	; 0x80
1000c5ea:	0549      	lsls	r1, r1, #21
1000c5ec:	430b      	orrs	r3, r1
1000c5ee:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c5f0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC2_CLK_EN;
		break;
1000c5f2:	e0dd      	b.n	1000c7b0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c5f4:	4a70      	ldr	r2, [pc, #448]	; (1000c7b8 <system_clock_peripheral_enable+0x358>)
1000c5f6:	68d3      	ldr	r3, [r2, #12]
1000c5f8:	2180      	movs	r1, #128	; 0x80
1000c5fa:	0589      	lsls	r1, r1, #22
1000c5fc:	430b      	orrs	r3, r1
1000c5fe:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c600:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C1_CORE_CLK_EN;
		break;
1000c602:	e0d5      	b.n	1000c7b0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c604:	4a6c      	ldr	r2, [pc, #432]	; (1000c7b8 <system_clock_peripheral_enable+0x358>)
1000c606:	68d3      	ldr	r3, [r2, #12]
1000c608:	2180      	movs	r1, #128	; 0x80
1000c60a:	05c9      	lsls	r1, r1, #23
1000c60c:	430b      	orrs	r3, r1
1000c60e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c610:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_CLK_EN;
		break;
1000c612:	e0cd      	b.n	1000c7b0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c614:	4a68      	ldr	r2, [pc, #416]	; (1000c7b8 <system_clock_peripheral_enable+0x358>)
1000c616:	6911      	ldr	r1, [r2, #16]
1000c618:	2301      	movs	r3, #1
1000c61a:	430b      	orrs	r3, r1
1000c61c:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c61e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE0_CLK_EN;
		break;
1000c620:	e0c6      	b.n	1000c7b0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c622:	4a65      	ldr	r2, [pc, #404]	; (1000c7b8 <system_clock_peripheral_enable+0x358>)
1000c624:	6911      	ldr	r1, [r2, #16]
1000c626:	2302      	movs	r3, #2
1000c628:	430b      	orrs	r3, r1
1000c62a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c62c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE1_CLK_EN;
		break;
1000c62e:	e0bf      	b.n	1000c7b0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c630:	4a61      	ldr	r2, [pc, #388]	; (1000c7b8 <system_clock_peripheral_enable+0x358>)
1000c632:	6911      	ldr	r1, [r2, #16]
1000c634:	2304      	movs	r3, #4
1000c636:	430b      	orrs	r3, r1
1000c638:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c63a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE2_CLK_EN;
		break;
1000c63c:	e0b8      	b.n	1000c7b0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c63e:	4a5e      	ldr	r2, [pc, #376]	; (1000c7b8 <system_clock_peripheral_enable+0x358>)
1000c640:	6911      	ldr	r1, [r2, #16]
1000c642:	2308      	movs	r3, #8
1000c644:	430b      	orrs	r3, r1
1000c646:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c648:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE3_CLK_EN;
		break;
1000c64a:	e0b1      	b.n	1000c7b0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c64c:	4a5a      	ldr	r2, [pc, #360]	; (1000c7b8 <system_clock_peripheral_enable+0x358>)
1000c64e:	6911      	ldr	r1, [r2, #16]
1000c650:	2310      	movs	r3, #16
1000c652:	430b      	orrs	r3, r1
1000c654:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c656:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE4_CLK_EN;
		break;
1000c658:	e0aa      	b.n	1000c7b0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c65a:	4a57      	ldr	r2, [pc, #348]	; (1000c7b8 <system_clock_peripheral_enable+0x358>)
1000c65c:	6911      	ldr	r1, [r2, #16]
1000c65e:	2320      	movs	r3, #32
1000c660:	430b      	orrs	r3, r1
1000c662:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c664:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE5_CLK_EN;
		break;
1000c666:	e0a3      	b.n	1000c7b0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c668:	4a53      	ldr	r2, [pc, #332]	; (1000c7b8 <system_clock_peripheral_enable+0x358>)
1000c66a:	6911      	ldr	r1, [r2, #16]
1000c66c:	2340      	movs	r3, #64	; 0x40
1000c66e:	430b      	orrs	r3, r1
1000c670:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c672:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM0_CLK_EN;
		break;
1000c674:	e09c      	b.n	1000c7b0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c676:	4a50      	ldr	r2, [pc, #320]	; (1000c7b8 <system_clock_peripheral_enable+0x358>)
1000c678:	6911      	ldr	r1, [r2, #16]
1000c67a:	2380      	movs	r3, #128	; 0x80
1000c67c:	430b      	orrs	r3, r1
1000c67e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c680:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM1_CLK_EN;
		break;
1000c682:	e095      	b.n	1000c7b0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c684:	4a4c      	ldr	r2, [pc, #304]	; (1000c7b8 <system_clock_peripheral_enable+0x358>)
1000c686:	6913      	ldr	r3, [r2, #16]
1000c688:	2180      	movs	r1, #128	; 0x80
1000c68a:	0049      	lsls	r1, r1, #1
1000c68c:	430b      	orrs	r3, r1
1000c68e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c690:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM2_CLK_EN;
		break;
1000c692:	e08d      	b.n	1000c7b0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c694:	4a48      	ldr	r2, [pc, #288]	; (1000c7b8 <system_clock_peripheral_enable+0x358>)
1000c696:	6913      	ldr	r3, [r2, #16]
1000c698:	2180      	movs	r1, #128	; 0x80
1000c69a:	0089      	lsls	r1, r1, #2
1000c69c:	430b      	orrs	r3, r1
1000c69e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c6a0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM3_CLK_EN;
		break;
1000c6a2:	e085      	b.n	1000c7b0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c6a4:	4a44      	ldr	r2, [pc, #272]	; (1000c7b8 <system_clock_peripheral_enable+0x358>)
1000c6a6:	6913      	ldr	r3, [r2, #16]
1000c6a8:	2180      	movs	r1, #128	; 0x80
1000c6aa:	00c9      	lsls	r1, r1, #3
1000c6ac:	430b      	orrs	r3, r1
1000c6ae:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c6b0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SENS_ADC_CLK_EN;
		break;
1000c6b2:	e07d      	b.n	1000c7b0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c6b4:	4a40      	ldr	r2, [pc, #256]	; (1000c7b8 <system_clock_peripheral_enable+0x358>)
1000c6b6:	6913      	ldr	r3, [r2, #16]
1000c6b8:	2180      	movs	r1, #128	; 0x80
1000c6ba:	0109      	lsls	r1, r1, #4
1000c6bc:	430b      	orrs	r3, r1
1000c6be:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c6c0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI0_SCK_PHASE_INT_CLK_EN;
		break;
1000c6c2:	e075      	b.n	1000c7b0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c6c4:	4a3c      	ldr	r2, [pc, #240]	; (1000c7b8 <system_clock_peripheral_enable+0x358>)
1000c6c6:	6913      	ldr	r3, [r2, #16]
1000c6c8:	2180      	movs	r1, #128	; 0x80
1000c6ca:	0149      	lsls	r1, r1, #5
1000c6cc:	430b      	orrs	r3, r1
1000c6ce:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c6d0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI1_SCK_PHASE_INT_CLK_EN;
		break;
1000c6d2:	e06d      	b.n	1000c7b0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c6d4:	4a38      	ldr	r2, [pc, #224]	; (1000c7b8 <system_clock_peripheral_enable+0x358>)
1000c6d6:	6913      	ldr	r3, [r2, #16]
1000c6d8:	2180      	movs	r1, #128	; 0x80
1000c6da:	0189      	lsls	r1, r1, #6
1000c6dc:	430b      	orrs	r3, r1
1000c6de:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c6e0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_GPIO_GCLK_EN;
		break;
1000c6e2:	e065      	b.n	1000c7b0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c6e4:	4a34      	ldr	r2, [pc, #208]	; (1000c7b8 <system_clock_peripheral_enable+0x358>)
1000c6e6:	6913      	ldr	r3, [r2, #16]
1000c6e8:	2180      	movs	r1, #128	; 0x80
1000c6ea:	01c9      	lsls	r1, r1, #7
1000c6ec:	430b      	orrs	r3, r1
1000c6ee:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c6f0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_TIMER0_PGCLK_EN;
		break;
1000c6f2:	e05d      	b.n	1000c7b0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c6f4:	4a30      	ldr	r2, [pc, #192]	; (1000c7b8 <system_clock_peripheral_enable+0x358>)
1000c6f6:	6913      	ldr	r3, [r2, #16]
1000c6f8:	2180      	movs	r1, #128	; 0x80
1000c6fa:	0209      	lsls	r1, r1, #8
1000c6fc:	430b      	orrs	r3, r1
1000c6fe:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c700:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_CORE_CLK_EN;
		break;
1000c702:	e055      	b.n	1000c7b0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c704:	4a2c      	ldr	r2, [pc, #176]	; (1000c7b8 <system_clock_peripheral_enable+0x358>)
1000c706:	6913      	ldr	r3, [r2, #16]
1000c708:	2180      	movs	r1, #128	; 0x80
1000c70a:	0249      	lsls	r1, r1, #9
1000c70c:	430b      	orrs	r3, r1
1000c70e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c710:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_AHB_CLK_EN;
		break;
1000c712:	e04d      	b.n	1000c7b0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c714:	4a28      	ldr	r2, [pc, #160]	; (1000c7b8 <system_clock_peripheral_enable+0x358>)
1000c716:	6913      	ldr	r3, [r2, #16]
1000c718:	2180      	movs	r1, #128	; 0x80
1000c71a:	0289      	lsls	r1, r1, #10
1000c71c:	430b      	orrs	r3, r1
1000c71e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c720:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_CORE_CLK_EN;
		break;
1000c722:	e045      	b.n	1000c7b0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c724:	4a24      	ldr	r2, [pc, #144]	; (1000c7b8 <system_clock_peripheral_enable+0x358>)
1000c726:	6913      	ldr	r3, [r2, #16]
1000c728:	2180      	movs	r1, #128	; 0x80
1000c72a:	02c9      	lsls	r1, r1, #11
1000c72c:	430b      	orrs	r3, r1
1000c72e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c730:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_AHB_CLK_EN;
		break;
1000c732:	e03d      	b.n	1000c7b0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c734:	4a20      	ldr	r2, [pc, #128]	; (1000c7b8 <system_clock_peripheral_enable+0x358>)
1000c736:	6913      	ldr	r3, [r2, #16]
1000c738:	2180      	movs	r1, #128	; 0x80
1000c73a:	0309      	lsls	r1, r1, #12
1000c73c:	430b      	orrs	r3, r1
1000c73e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c740:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_0_MEM_CLK_EN;
		break;
1000c742:	e035      	b.n	1000c7b0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c744:	4a1c      	ldr	r2, [pc, #112]	; (1000c7b8 <system_clock_peripheral_enable+0x358>)
1000c746:	6913      	ldr	r3, [r2, #16]
1000c748:	2180      	movs	r1, #128	; 0x80
1000c74a:	0349      	lsls	r1, r1, #13
1000c74c:	430b      	orrs	r3, r1
1000c74e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c750:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_1_MEM_CLK_EN;
		break;
1000c752:	e02d      	b.n	1000c7b0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c754:	4a18      	ldr	r2, [pc, #96]	; (1000c7b8 <system_clock_peripheral_enable+0x358>)
1000c756:	6913      	ldr	r3, [r2, #16]
1000c758:	2180      	movs	r1, #128	; 0x80
1000c75a:	0389      	lsls	r1, r1, #14
1000c75c:	430b      	orrs	r3, r1
1000c75e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c760:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_2_MEM_CLK_EN;
		break;
1000c762:	e025      	b.n	1000c7b0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c764:	4a14      	ldr	r2, [pc, #80]	; (1000c7b8 <system_clock_peripheral_enable+0x358>)
1000c766:	6913      	ldr	r3, [r2, #16]
1000c768:	2180      	movs	r1, #128	; 0x80
1000c76a:	03c9      	lsls	r1, r1, #15
1000c76c:	430b      	orrs	r3, r1
1000c76e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c770:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_0_MEM_CLK_EN;
		break;
1000c772:	e01d      	b.n	1000c7b0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c774:	4a10      	ldr	r2, [pc, #64]	; (1000c7b8 <system_clock_peripheral_enable+0x358>)
1000c776:	6913      	ldr	r3, [r2, #16]
1000c778:	2180      	movs	r1, #128	; 0x80
1000c77a:	0409      	lsls	r1, r1, #16
1000c77c:	430b      	orrs	r3, r1
1000c77e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c780:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_1_MEM_CLK_EN;
		break;
1000c782:	e015      	b.n	1000c7b0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
1000c784:	4a0c      	ldr	r2, [pc, #48]	; (1000c7b8 <system_clock_peripheral_enable+0x358>)
1000c786:	7d11      	ldrb	r1, [r2, #20]
1000c788:	2301      	movs	r3, #1
1000c78a:	430b      	orrs	r3, r1
1000c78c:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c78e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CTRL_RXTX_SEQ_CLK_EN;
		break;
1000c790:	e00e      	b.n	1000c7b0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
1000c792:	4a09      	ldr	r2, [pc, #36]	; (1000c7b8 <system_clock_peripheral_enable+0x358>)
1000c794:	7d11      	ldrb	r1, [r2, #20]
1000c796:	2302      	movs	r3, #2
1000c798:	430b      	orrs	r3, r1
1000c79a:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c79c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CTRL_AHB_CLK_EN;
		break;
1000c79e:	e007      	b.n	1000c7b0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
1000c7a0:	4a05      	ldr	r2, [pc, #20]	; (1000c7b8 <system_clock_peripheral_enable+0x358>)
1000c7a2:	7d11      	ldrb	r1, [r2, #20]
1000c7a4:	2304      	movs	r3, #4
1000c7a6:	430b      	orrs	r3, r1
1000c7a8:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c7aa:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CTRL_PERIPH_REGS_CLK_EN;
		break;
1000c7ac:	e000      	b.n	1000c7b0 <system_clock_peripheral_enable+0x350>

		default:
			return STATUS_ERR_INVALID_ARG;
1000c7ae:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
1000c7b0:	bd00      	pop	{pc}
1000c7b2:	46c0      	nop			; (mov r8, r8)
1000c7b4:	1001700c 	.word	0x1001700c
1000c7b8:	4000b000 	.word	0x4000b000

1000c7bc <system_clock_peripheral_disable>:
 * \return Status of operation.
 * \retval STATUS_OK               Clock config correctly
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_clock_peripheral_disable(enum system_peripheral peripheral)
{
1000c7bc:	b500      	push	{lr}
	switch (peripheral) {
1000c7be:	2835      	cmp	r0, #53	; 0x35
1000c7c0:	d900      	bls.n	1000c7c4 <system_clock_peripheral_disable+0x8>
1000c7c2:	e17d      	b.n	1000cac0 <system_clock_peripheral_disable+0x304>
1000c7c4:	0080      	lsls	r0, r0, #2
1000c7c6:	4bbf      	ldr	r3, [pc, #764]	; (1000cac4 <system_clock_peripheral_disable+0x308>)
1000c7c8:	581b      	ldr	r3, [r3, r0]
1000c7ca:	469f      	mov	pc, r3
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c7cc:	4abe      	ldr	r2, [pc, #760]	; (1000cac8 <system_clock_peripheral_disable+0x30c>)
1000c7ce:	68d3      	ldr	r3, [r2, #12]
1000c7d0:	2102      	movs	r1, #2
1000c7d2:	438b      	bics	r3, r1
1000c7d4:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c7d6:	2000      	movs	r0, #0
{
	switch (peripheral) {
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI_FLASH0_CLK_EN;
		break;
1000c7d8:	e173      	b.n	1000cac2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c7da:	4abb      	ldr	r2, [pc, #748]	; (1000cac8 <system_clock_peripheral_disable+0x30c>)
1000c7dc:	68d3      	ldr	r3, [r2, #12]
1000c7de:	2104      	movs	r1, #4
1000c7e0:	438b      	bics	r3, r1
1000c7e2:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c7e4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI0_CORE_CLK_EN;
		break;
1000c7e6:	e16c      	b.n	1000cac2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c7e8:	4ab7      	ldr	r2, [pc, #732]	; (1000cac8 <system_clock_peripheral_disable+0x30c>)
1000c7ea:	68d3      	ldr	r3, [r2, #12]
1000c7ec:	2108      	movs	r1, #8
1000c7ee:	438b      	bics	r3, r1
1000c7f0:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c7f2:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI1_CORE_CLK_EN;
		break;
1000c7f4:	e165      	b.n	1000cac2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c7f6:	4ab4      	ldr	r2, [pc, #720]	; (1000cac8 <system_clock_peripheral_disable+0x30c>)
1000c7f8:	68d3      	ldr	r3, [r2, #12]
1000c7fa:	2110      	movs	r1, #16
1000c7fc:	438b      	bics	r3, r1
1000c7fe:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c800:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C0_CORE_CLK_EN;
		break;
1000c802:	e15e      	b.n	1000cac2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c804:	4ab0      	ldr	r2, [pc, #704]	; (1000cac8 <system_clock_peripheral_disable+0x30c>)
1000c806:	68d3      	ldr	r3, [r2, #12]
1000c808:	2120      	movs	r1, #32
1000c80a:	438b      	bics	r3, r1
1000c80c:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c80e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_DUALTIMER0_CLK_EN;
		break;
1000c810:	e157      	b.n	1000cac2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c812:	4aad      	ldr	r2, [pc, #692]	; (1000cac8 <system_clock_peripheral_disable+0x30c>)
1000c814:	68d3      	ldr	r3, [r2, #12]
1000c816:	2180      	movs	r1, #128	; 0x80
1000c818:	438b      	bics	r3, r1
1000c81a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c81c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_GPIO_CLK_EN;
		break;
1000c81e:	e150      	b.n	1000cac2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c820:	4aa9      	ldr	r2, [pc, #676]	; (1000cac8 <system_clock_peripheral_disable+0x30c>)
1000c822:	68d1      	ldr	r1, [r2, #12]
1000c824:	4ba9      	ldr	r3, [pc, #676]	; (1000cacc <system_clock_peripheral_disable+0x310>)
1000c826:	400b      	ands	r3, r1
1000c828:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c82a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_TIMER0_CLK_EN;
		break;
1000c82c:	e149      	b.n	1000cac2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c82e:	4aa6      	ldr	r2, [pc, #664]	; (1000cac8 <system_clock_peripheral_disable+0x30c>)
1000c830:	68d1      	ldr	r1, [r2, #12]
1000c832:	4ba7      	ldr	r3, [pc, #668]	; (1000cad0 <system_clock_peripheral_disable+0x314>)
1000c834:	400b      	ands	r3, r1
1000c836:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c838:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WDT0_CLK_EN;
		break;
1000c83a:	e142      	b.n	1000cac2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c83c:	4aa2      	ldr	r2, [pc, #648]	; (1000cac8 <system_clock_peripheral_disable+0x30c>)
1000c83e:	68d1      	ldr	r1, [r2, #12]
1000c840:	4ba4      	ldr	r3, [pc, #656]	; (1000cad4 <system_clock_peripheral_disable+0x318>)
1000c842:	400b      	ands	r3, r1
1000c844:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c846:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WDT1_CLK_EN;
		break;
1000c848:	e13b      	b.n	1000cac2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c84a:	4a9f      	ldr	r2, [pc, #636]	; (1000cac8 <system_clock_peripheral_disable+0x30c>)
1000c84c:	68d1      	ldr	r1, [r2, #12]
1000c84e:	4ba2      	ldr	r3, [pc, #648]	; (1000cad8 <system_clock_peripheral_disable+0x31c>)
1000c850:	400b      	ands	r3, r1
1000c852:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c854:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART0_CORE_CLK_EN;
		break;
1000c856:	e134      	b.n	1000cac2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c858:	4a9b      	ldr	r2, [pc, #620]	; (1000cac8 <system_clock_peripheral_disable+0x30c>)
1000c85a:	68d1      	ldr	r1, [r2, #12]
1000c85c:	4b9f      	ldr	r3, [pc, #636]	; (1000cadc <system_clock_peripheral_disable+0x320>)
1000c85e:	400b      	ands	r3, r1
1000c860:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c862:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART0_IF_CLK_EN;
		break;
1000c864:	e12d      	b.n	1000cac2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c866:	4a98      	ldr	r2, [pc, #608]	; (1000cac8 <system_clock_peripheral_disable+0x30c>)
1000c868:	68d1      	ldr	r1, [r2, #12]
1000c86a:	4b9d      	ldr	r3, [pc, #628]	; (1000cae0 <system_clock_peripheral_disable+0x324>)
1000c86c:	400b      	ands	r3, r1
1000c86e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c870:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART1_CORE_CLK_EN;
		break;
1000c872:	e126      	b.n	1000cac2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c874:	4a94      	ldr	r2, [pc, #592]	; (1000cac8 <system_clock_peripheral_disable+0x30c>)
1000c876:	68d1      	ldr	r1, [r2, #12]
1000c878:	4b9a      	ldr	r3, [pc, #616]	; (1000cae4 <system_clock_peripheral_disable+0x328>)
1000c87a:	400b      	ands	r3, r1
1000c87c:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c87e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART1_IF_CLK_EN;
		break;
1000c880:	e11f      	b.n	1000cac2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c882:	4a91      	ldr	r2, [pc, #580]	; (1000cac8 <system_clock_peripheral_disable+0x30c>)
1000c884:	68d1      	ldr	r1, [r2, #12]
1000c886:	4b98      	ldr	r3, [pc, #608]	; (1000cae8 <system_clock_peripheral_disable+0x32c>)
1000c888:	400b      	ands	r3, r1
1000c88a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c88c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IRQ_CTRLR_CORE_CLK_EN;
		break;
1000c88e:	e118      	b.n	1000cac2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c890:	4a8d      	ldr	r2, [pc, #564]	; (1000cac8 <system_clock_peripheral_disable+0x30c>)
1000c892:	68d1      	ldr	r1, [r2, #12]
1000c894:	4b95      	ldr	r3, [pc, #596]	; (1000caec <system_clock_peripheral_disable+0x330>)
1000c896:	400b      	ands	r3, r1
1000c898:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c89a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_1_GL_MEM_CLK_EN;
		break;
1000c89c:	e111      	b.n	1000cac2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c89e:	4a8a      	ldr	r2, [pc, #552]	; (1000cac8 <system_clock_peripheral_disable+0x30c>)
1000c8a0:	68d1      	ldr	r1, [r2, #12]
1000c8a2:	4b93      	ldr	r3, [pc, #588]	; (1000caf0 <system_clock_peripheral_disable+0x334>)
1000c8a4:	400b      	ands	r3, r1
1000c8a6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c8a8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_2_GL_MEM_CLK_EN;
		break;
1000c8aa:	e10a      	b.n	1000cac2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c8ac:	4a86      	ldr	r2, [pc, #536]	; (1000cac8 <system_clock_peripheral_disable+0x30c>)
1000c8ae:	68d1      	ldr	r1, [r2, #12]
1000c8b0:	4b90      	ldr	r3, [pc, #576]	; (1000caf4 <system_clock_peripheral_disable+0x338>)
1000c8b2:	400b      	ands	r3, r1
1000c8b4:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c8b6:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ROM_MEM_CLK_EN;
		break;
1000c8b8:	e103      	b.n	1000cac2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c8ba:	4a83      	ldr	r2, [pc, #524]	; (1000cac8 <system_clock_peripheral_disable+0x30c>)
1000c8bc:	68d1      	ldr	r1, [r2, #12]
1000c8be:	4b8e      	ldr	r3, [pc, #568]	; (1000caf8 <system_clock_peripheral_disable+0x33c>)
1000c8c0:	400b      	ands	r3, r1
1000c8c2:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c8c4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_XBAR_IF_CLK_EN;
		break;
1000c8c6:	e0fc      	b.n	1000cac2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c8c8:	4a7f      	ldr	r2, [pc, #508]	; (1000cac8 <system_clock_peripheral_disable+0x30c>)
1000c8ca:	68d1      	ldr	r1, [r2, #12]
1000c8cc:	4b8b      	ldr	r3, [pc, #556]	; (1000cafc <system_clock_peripheral_disable+0x340>)
1000c8ce:	400b      	ands	r3, r1
1000c8d0:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c8d2:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_AON_WRAPPER_CLK_EN;
		break;
1000c8d4:	e0f5      	b.n	1000cac2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c8d6:	4a7c      	ldr	r2, [pc, #496]	; (1000cac8 <system_clock_peripheral_disable+0x30c>)
1000c8d8:	68d1      	ldr	r1, [r2, #12]
1000c8da:	4b89      	ldr	r3, [pc, #548]	; (1000cb00 <system_clock_peripheral_disable+0x344>)
1000c8dc:	400b      	ands	r3, r1
1000c8de:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c8e0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLK_EN;
		break;
1000c8e2:	e0ee      	b.n	1000cac2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c8e4:	4a78      	ldr	r2, [pc, #480]	; (1000cac8 <system_clock_peripheral_disable+0x30c>)
1000c8e6:	68d1      	ldr	r1, [r2, #12]
1000c8e8:	4b86      	ldr	r3, [pc, #536]	; (1000cb04 <system_clock_peripheral_disable+0x348>)
1000c8ea:	400b      	ands	r3, r1
1000c8ec:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c8ee:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLKG_EN;
		break;
1000c8f0:	e0e7      	b.n	1000cac2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c8f2:	4a75      	ldr	r2, [pc, #468]	; (1000cac8 <system_clock_peripheral_disable+0x30c>)
1000c8f4:	68d1      	ldr	r1, [r2, #12]
1000c8f6:	4b84      	ldr	r3, [pc, #528]	; (1000cb08 <system_clock_peripheral_disable+0x34c>)
1000c8f8:	400b      	ands	r3, r1
1000c8fa:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c8fc:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_BLE_MEM_CLK_EN;
		break;
1000c8fe:	e0e0      	b.n	1000cac2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c900:	4a71      	ldr	r2, [pc, #452]	; (1000cac8 <system_clock_peripheral_disable+0x30c>)
1000c902:	68d1      	ldr	r1, [r2, #12]
1000c904:	4b81      	ldr	r3, [pc, #516]	; (1000cb0c <system_clock_peripheral_disable+0x350>)
1000c906:	400b      	ands	r3, r1
1000c908:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c90a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC0_CLK_EN;
		break;
1000c90c:	e0d9      	b.n	1000cac2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c90e:	4a6e      	ldr	r2, [pc, #440]	; (1000cac8 <system_clock_peripheral_disable+0x30c>)
1000c910:	68d1      	ldr	r1, [r2, #12]
1000c912:	4b7f      	ldr	r3, [pc, #508]	; (1000cb10 <system_clock_peripheral_disable+0x354>)
1000c914:	400b      	ands	r3, r1
1000c916:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c918:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC1_CLK_EN;
		break;
1000c91a:	e0d2      	b.n	1000cac2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c91c:	4a6a      	ldr	r2, [pc, #424]	; (1000cac8 <system_clock_peripheral_disable+0x30c>)
1000c91e:	68d1      	ldr	r1, [r2, #12]
1000c920:	4b7c      	ldr	r3, [pc, #496]	; (1000cb14 <system_clock_peripheral_disable+0x358>)
1000c922:	400b      	ands	r3, r1
1000c924:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c926:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC2_CLK_EN;
		break;
1000c928:	e0cb      	b.n	1000cac2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c92a:	4a67      	ldr	r2, [pc, #412]	; (1000cac8 <system_clock_peripheral_disable+0x30c>)
1000c92c:	68d1      	ldr	r1, [r2, #12]
1000c92e:	4b7a      	ldr	r3, [pc, #488]	; (1000cb18 <system_clock_peripheral_disable+0x35c>)
1000c930:	400b      	ands	r3, r1
1000c932:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c934:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C1_CORE_CLK_EN;
		break;
1000c936:	e0c4      	b.n	1000cac2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c938:	4a63      	ldr	r2, [pc, #396]	; (1000cac8 <system_clock_peripheral_disable+0x30c>)
1000c93a:	68d1      	ldr	r1, [r2, #12]
1000c93c:	4b77      	ldr	r3, [pc, #476]	; (1000cb1c <system_clock_peripheral_disable+0x360>)
1000c93e:	400b      	ands	r3, r1
1000c940:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c942:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_CLK_EN;
		break;
1000c944:	e0bd      	b.n	1000cac2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c946:	4a60      	ldr	r2, [pc, #384]	; (1000cac8 <system_clock_peripheral_disable+0x30c>)
1000c948:	6913      	ldr	r3, [r2, #16]
1000c94a:	2101      	movs	r1, #1
1000c94c:	438b      	bics	r3, r1
1000c94e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c950:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE0_CLK_EN;
		break;
1000c952:	e0b6      	b.n	1000cac2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c954:	4a5c      	ldr	r2, [pc, #368]	; (1000cac8 <system_clock_peripheral_disable+0x30c>)
1000c956:	6913      	ldr	r3, [r2, #16]
1000c958:	2102      	movs	r1, #2
1000c95a:	438b      	bics	r3, r1
1000c95c:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c95e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE1_CLK_EN;
		break;
1000c960:	e0af      	b.n	1000cac2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c962:	4a59      	ldr	r2, [pc, #356]	; (1000cac8 <system_clock_peripheral_disable+0x30c>)
1000c964:	6913      	ldr	r3, [r2, #16]
1000c966:	2104      	movs	r1, #4
1000c968:	438b      	bics	r3, r1
1000c96a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c96c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE2_CLK_EN;
		break;
1000c96e:	e0a8      	b.n	1000cac2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c970:	4a55      	ldr	r2, [pc, #340]	; (1000cac8 <system_clock_peripheral_disable+0x30c>)
1000c972:	6913      	ldr	r3, [r2, #16]
1000c974:	2108      	movs	r1, #8
1000c976:	438b      	bics	r3, r1
1000c978:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c97a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE3_CLK_EN;
		break;
1000c97c:	e0a1      	b.n	1000cac2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c97e:	4a52      	ldr	r2, [pc, #328]	; (1000cac8 <system_clock_peripheral_disable+0x30c>)
1000c980:	6913      	ldr	r3, [r2, #16]
1000c982:	2110      	movs	r1, #16
1000c984:	438b      	bics	r3, r1
1000c986:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c988:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE4_CLK_EN;
		break;
1000c98a:	e09a      	b.n	1000cac2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c98c:	4a4e      	ldr	r2, [pc, #312]	; (1000cac8 <system_clock_peripheral_disable+0x30c>)
1000c98e:	6913      	ldr	r3, [r2, #16]
1000c990:	2120      	movs	r1, #32
1000c992:	438b      	bics	r3, r1
1000c994:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c996:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE5_CLK_EN;
		break;
1000c998:	e093      	b.n	1000cac2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c99a:	4a4b      	ldr	r2, [pc, #300]	; (1000cac8 <system_clock_peripheral_disable+0x30c>)
1000c99c:	6913      	ldr	r3, [r2, #16]
1000c99e:	2140      	movs	r1, #64	; 0x40
1000c9a0:	438b      	bics	r3, r1
1000c9a2:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c9a4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM0_CLK_EN;
		break;
1000c9a6:	e08c      	b.n	1000cac2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c9a8:	4a47      	ldr	r2, [pc, #284]	; (1000cac8 <system_clock_peripheral_disable+0x30c>)
1000c9aa:	6913      	ldr	r3, [r2, #16]
1000c9ac:	2180      	movs	r1, #128	; 0x80
1000c9ae:	438b      	bics	r3, r1
1000c9b0:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c9b2:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM1_CLK_EN;
		break;
1000c9b4:	e085      	b.n	1000cac2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c9b6:	4a44      	ldr	r2, [pc, #272]	; (1000cac8 <system_clock_peripheral_disable+0x30c>)
1000c9b8:	6911      	ldr	r1, [r2, #16]
1000c9ba:	4b44      	ldr	r3, [pc, #272]	; (1000cacc <system_clock_peripheral_disable+0x310>)
1000c9bc:	400b      	ands	r3, r1
1000c9be:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c9c0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM2_CLK_EN;
		break;
1000c9c2:	e07e      	b.n	1000cac2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c9c4:	4a40      	ldr	r2, [pc, #256]	; (1000cac8 <system_clock_peripheral_disable+0x30c>)
1000c9c6:	6911      	ldr	r1, [r2, #16]
1000c9c8:	4b55      	ldr	r3, [pc, #340]	; (1000cb20 <system_clock_peripheral_disable+0x364>)
1000c9ca:	400b      	ands	r3, r1
1000c9cc:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c9ce:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM3_CLK_EN;
		break;
1000c9d0:	e077      	b.n	1000cac2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c9d2:	4a3d      	ldr	r2, [pc, #244]	; (1000cac8 <system_clock_peripheral_disable+0x30c>)
1000c9d4:	6911      	ldr	r1, [r2, #16]
1000c9d6:	4b53      	ldr	r3, [pc, #332]	; (1000cb24 <system_clock_peripheral_disable+0x368>)
1000c9d8:	400b      	ands	r3, r1
1000c9da:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c9dc:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SENS_ADC_CLK_EN;
		break;
1000c9de:	e070      	b.n	1000cac2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c9e0:	4a39      	ldr	r2, [pc, #228]	; (1000cac8 <system_clock_peripheral_disable+0x30c>)
1000c9e2:	6911      	ldr	r1, [r2, #16]
1000c9e4:	4b3a      	ldr	r3, [pc, #232]	; (1000cad0 <system_clock_peripheral_disable+0x314>)
1000c9e6:	400b      	ands	r3, r1
1000c9e8:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c9ea:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI0_SCK_PHASE_INT_CLK_EN;
		break;
1000c9ec:	e069      	b.n	1000cac2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c9ee:	4a36      	ldr	r2, [pc, #216]	; (1000cac8 <system_clock_peripheral_disable+0x30c>)
1000c9f0:	6911      	ldr	r1, [r2, #16]
1000c9f2:	4b38      	ldr	r3, [pc, #224]	; (1000cad4 <system_clock_peripheral_disable+0x318>)
1000c9f4:	400b      	ands	r3, r1
1000c9f6:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c9f8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI1_SCK_PHASE_INT_CLK_EN;
		break;
1000c9fa:	e062      	b.n	1000cac2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c9fc:	4a32      	ldr	r2, [pc, #200]	; (1000cac8 <system_clock_peripheral_disable+0x30c>)
1000c9fe:	6911      	ldr	r1, [r2, #16]
1000ca00:	4b35      	ldr	r3, [pc, #212]	; (1000cad8 <system_clock_peripheral_disable+0x31c>)
1000ca02:	400b      	ands	r3, r1
1000ca04:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ca06:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_GPIO_GCLK_EN;
		break;
1000ca08:	e05b      	b.n	1000cac2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000ca0a:	4a2f      	ldr	r2, [pc, #188]	; (1000cac8 <system_clock_peripheral_disable+0x30c>)
1000ca0c:	6911      	ldr	r1, [r2, #16]
1000ca0e:	4b33      	ldr	r3, [pc, #204]	; (1000cadc <system_clock_peripheral_disable+0x320>)
1000ca10:	400b      	ands	r3, r1
1000ca12:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ca14:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_TIMER0_PGCLK_EN;
		break;
1000ca16:	e054      	b.n	1000cac2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000ca18:	4a2b      	ldr	r2, [pc, #172]	; (1000cac8 <system_clock_peripheral_disable+0x30c>)
1000ca1a:	6911      	ldr	r1, [r2, #16]
1000ca1c:	4b30      	ldr	r3, [pc, #192]	; (1000cae0 <system_clock_peripheral_disable+0x324>)
1000ca1e:	400b      	ands	r3, r1
1000ca20:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ca22:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_CORE_CLK_EN;
		break;
1000ca24:	e04d      	b.n	1000cac2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000ca26:	4a28      	ldr	r2, [pc, #160]	; (1000cac8 <system_clock_peripheral_disable+0x30c>)
1000ca28:	6911      	ldr	r1, [r2, #16]
1000ca2a:	4b2e      	ldr	r3, [pc, #184]	; (1000cae4 <system_clock_peripheral_disable+0x328>)
1000ca2c:	400b      	ands	r3, r1
1000ca2e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ca30:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_AHB_CLK_EN;
		break;
1000ca32:	e046      	b.n	1000cac2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000ca34:	4a24      	ldr	r2, [pc, #144]	; (1000cac8 <system_clock_peripheral_disable+0x30c>)
1000ca36:	6911      	ldr	r1, [r2, #16]
1000ca38:	4b2b      	ldr	r3, [pc, #172]	; (1000cae8 <system_clock_peripheral_disable+0x32c>)
1000ca3a:	400b      	ands	r3, r1
1000ca3c:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ca3e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_CORE_CLK_EN;
		break;
1000ca40:	e03f      	b.n	1000cac2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000ca42:	4a21      	ldr	r2, [pc, #132]	; (1000cac8 <system_clock_peripheral_disable+0x30c>)
1000ca44:	6911      	ldr	r1, [r2, #16]
1000ca46:	4b29      	ldr	r3, [pc, #164]	; (1000caec <system_clock_peripheral_disable+0x330>)
1000ca48:	400b      	ands	r3, r1
1000ca4a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ca4c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_AHB_CLK_EN;
		break;
1000ca4e:	e038      	b.n	1000cac2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000ca50:	4a1d      	ldr	r2, [pc, #116]	; (1000cac8 <system_clock_peripheral_disable+0x30c>)
1000ca52:	6911      	ldr	r1, [r2, #16]
1000ca54:	4b26      	ldr	r3, [pc, #152]	; (1000caf0 <system_clock_peripheral_disable+0x334>)
1000ca56:	400b      	ands	r3, r1
1000ca58:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ca5a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_0_MEM_CLK_EN;
		break;
1000ca5c:	e031      	b.n	1000cac2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000ca5e:	4a1a      	ldr	r2, [pc, #104]	; (1000cac8 <system_clock_peripheral_disable+0x30c>)
1000ca60:	6911      	ldr	r1, [r2, #16]
1000ca62:	4b24      	ldr	r3, [pc, #144]	; (1000caf4 <system_clock_peripheral_disable+0x338>)
1000ca64:	400b      	ands	r3, r1
1000ca66:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ca68:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_1_MEM_CLK_EN;
		break;
1000ca6a:	e02a      	b.n	1000cac2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000ca6c:	4a16      	ldr	r2, [pc, #88]	; (1000cac8 <system_clock_peripheral_disable+0x30c>)
1000ca6e:	6911      	ldr	r1, [r2, #16]
1000ca70:	4b21      	ldr	r3, [pc, #132]	; (1000caf8 <system_clock_peripheral_disable+0x33c>)
1000ca72:	400b      	ands	r3, r1
1000ca74:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ca76:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_2_MEM_CLK_EN;
		break;
1000ca78:	e023      	b.n	1000cac2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000ca7a:	4a13      	ldr	r2, [pc, #76]	; (1000cac8 <system_clock_peripheral_disable+0x30c>)
1000ca7c:	6911      	ldr	r1, [r2, #16]
1000ca7e:	4b1f      	ldr	r3, [pc, #124]	; (1000cafc <system_clock_peripheral_disable+0x340>)
1000ca80:	400b      	ands	r3, r1
1000ca82:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ca84:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_0_MEM_CLK_EN;
		break;
1000ca86:	e01c      	b.n	1000cac2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000ca88:	4a0f      	ldr	r2, [pc, #60]	; (1000cac8 <system_clock_peripheral_disable+0x30c>)
1000ca8a:	6911      	ldr	r1, [r2, #16]
1000ca8c:	4b1c      	ldr	r3, [pc, #112]	; (1000cb00 <system_clock_peripheral_disable+0x344>)
1000ca8e:	400b      	ands	r3, r1
1000ca90:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ca92:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_1_MEM_CLK_EN;
		break;
1000ca94:	e015      	b.n	1000cac2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
1000ca96:	4a0c      	ldr	r2, [pc, #48]	; (1000cac8 <system_clock_peripheral_disable+0x30c>)
1000ca98:	7d13      	ldrb	r3, [r2, #20]
1000ca9a:	2101      	movs	r1, #1
1000ca9c:	438b      	bics	r3, r1
1000ca9e:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000caa0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
				~LPMCU_MISC_REGS_BTMCU_CTRL_RXTX_SEQ_CLK_EN;
		break;
1000caa2:	e00e      	b.n	1000cac2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
1000caa4:	4a08      	ldr	r2, [pc, #32]	; (1000cac8 <system_clock_peripheral_disable+0x30c>)
1000caa6:	7d13      	ldrb	r3, [r2, #20]
1000caa8:	2102      	movs	r1, #2
1000caaa:	438b      	bics	r3, r1
1000caac:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000caae:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
				~LPMCU_MISC_REGS_BTMCU_CTRL_AHB_CLK_EN;
		break;
1000cab0:	e007      	b.n	1000cac2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
1000cab2:	4a05      	ldr	r2, [pc, #20]	; (1000cac8 <system_clock_peripheral_disable+0x30c>)
1000cab4:	7d13      	ldrb	r3, [r2, #20]
1000cab6:	2104      	movs	r1, #4
1000cab8:	438b      	bics	r3, r1
1000caba:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cabc:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
				~LPMCU_MISC_REGS_BTMCU_CTRL_PERIPH_REGS_CLK_EN;
		break;
1000cabe:	e000      	b.n	1000cac2 <system_clock_peripheral_disable+0x306>

		default:
			return STATUS_ERR_INVALID_ARG;
1000cac0:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
1000cac2:	bd00      	pop	{pc}
1000cac4:	100170e4 	.word	0x100170e4
1000cac8:	4000b000 	.word	0x4000b000
1000cacc:	fffffeff 	.word	0xfffffeff
1000cad0:	fffff7ff 	.word	0xfffff7ff
1000cad4:	ffffefff 	.word	0xffffefff
1000cad8:	ffffdfff 	.word	0xffffdfff
1000cadc:	ffffbfff 	.word	0xffffbfff
1000cae0:	ffff7fff 	.word	0xffff7fff
1000cae4:	fffeffff 	.word	0xfffeffff
1000cae8:	fffdffff 	.word	0xfffdffff
1000caec:	fffbffff 	.word	0xfffbffff
1000caf0:	fff7ffff 	.word	0xfff7ffff
1000caf4:	ffefffff 	.word	0xffefffff
1000caf8:	ffdfffff 	.word	0xffdfffff
1000cafc:	ffbfffff 	.word	0xffbfffff
1000cb00:	ff7fffff 	.word	0xff7fffff
1000cb04:	feffffff 	.word	0xfeffffff
1000cb08:	fdffffff 	.word	0xfdffffff
1000cb0c:	fbffffff 	.word	0xfbffffff
1000cb10:	f7ffffff 	.word	0xf7ffffff
1000cb14:	efffffff 	.word	0xefffffff
1000cb18:	dfffffff 	.word	0xdfffffff
1000cb1c:	bfffffff 	.word	0xbfffffff
1000cb20:	fffffdff 	.word	0xfffffdff
1000cb24:	fffffbff 	.word	0xfffffbff

1000cb28 <system_peripheral_reset>:
 * \return Status of operation.
 * \retval STATUS_OK               Clock config correctly
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_peripheral_reset(enum system_peripheral peripheral)
{
1000cb28:	b500      	push	{lr}
	switch (peripheral) {
1000cb2a:	2843      	cmp	r0, #67	; 0x43
1000cb2c:	d900      	bls.n	1000cb30 <system_peripheral_reset+0x8>
1000cb2e:	e223      	b.n	1000cf78 <system_peripheral_reset+0x450>
1000cb30:	0080      	lsls	r0, r0, #2
1000cb32:	4be0      	ldr	r3, [pc, #896]	; (1000ceb4 <system_peripheral_reset+0x38c>)
1000cb34:	581b      	ldr	r3, [r3, r0]
1000cb36:	469f      	mov	pc, r3
		case PERIPHERAL_LPMCU_CPU:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cb38:	4bdf      	ldr	r3, [pc, #892]	; (1000ceb8 <system_peripheral_reset+0x390>)
1000cb3a:	6859      	ldr	r1, [r3, #4]
1000cb3c:	2202      	movs	r2, #2
1000cb3e:	4391      	bics	r1, r2
1000cb40:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cb42:	6859      	ldr	r1, [r3, #4]
1000cb44:	430a      	orrs	r2, r1
1000cb46:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cb48:	2000      	movs	r0, #0
		case PERIPHERAL_LPMCU_CPU:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN;
		break;
1000cb4a:	e216      	b.n	1000cf7a <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cb4c:	4bda      	ldr	r3, [pc, #872]	; (1000ceb8 <system_peripheral_reset+0x390>)
1000cb4e:	6859      	ldr	r1, [r3, #4]
1000cb50:	2204      	movs	r2, #4
1000cb52:	4391      	bics	r1, r2
1000cb54:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_SYS_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cb56:	6859      	ldr	r1, [r3, #4]
1000cb58:	430a      	orrs	r2, r1
1000cb5a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cb5c:	2000      	movs	r0, #0
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_SYS_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_SYS_RSTN;
		break;
1000cb5e:	e20c      	b.n	1000cf7a <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI_FLASH_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cb60:	4bd5      	ldr	r3, [pc, #852]	; (1000ceb8 <system_peripheral_reset+0x390>)
1000cb62:	6859      	ldr	r1, [r3, #4]
1000cb64:	2208      	movs	r2, #8
1000cb66:	4391      	bics	r1, r2
1000cb68:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cb6a:	6859      	ldr	r1, [r3, #4]
1000cb6c:	430a      	orrs	r2, r1
1000cb6e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cb70:	2000      	movs	r0, #0
		case PERIPHERAL_SPI_FLASH_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_RSTN;
		break;
1000cb72:	e202      	b.n	1000cf7a <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cb74:	4bd0      	ldr	r3, [pc, #832]	; (1000ceb8 <system_peripheral_reset+0x390>)
1000cb76:	6859      	ldr	r1, [r3, #4]
1000cb78:	2210      	movs	r2, #16
1000cb7a:	4391      	bics	r1, r2
1000cb7c:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cb7e:	6859      	ldr	r1, [r3, #4]
1000cb80:	430a      	orrs	r2, r1
1000cb82:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cb84:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_CORE_RSTN;
		break;
1000cb86:	e1f8      	b.n	1000cf7a <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cb88:	4bcb      	ldr	r3, [pc, #812]	; (1000ceb8 <system_peripheral_reset+0x390>)
1000cb8a:	6859      	ldr	r1, [r3, #4]
1000cb8c:	2220      	movs	r2, #32
1000cb8e:	4391      	bics	r1, r2
1000cb90:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cb92:	6859      	ldr	r1, [r3, #4]
1000cb94:	430a      	orrs	r2, r1
1000cb96:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cb98:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_IF_RSTN;
		break;
1000cb9a:	e1ee      	b.n	1000cf7a <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cb9c:	4bc6      	ldr	r3, [pc, #792]	; (1000ceb8 <system_peripheral_reset+0x390>)
1000cb9e:	6859      	ldr	r1, [r3, #4]
1000cba0:	2240      	movs	r2, #64	; 0x40
1000cba2:	4391      	bics	r1, r2
1000cba4:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_CORE_RESETN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cba6:	6859      	ldr	r1, [r3, #4]
1000cba8:	430a      	orrs	r2, r1
1000cbaa:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cbac:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_CORE_RESETN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_CORE_RESETN;
		break;
1000cbae:	e1e4      	b.n	1000cf7a <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cbb0:	4bc1      	ldr	r3, [pc, #772]	; (1000ceb8 <system_peripheral_reset+0x390>)
1000cbb2:	6859      	ldr	r1, [r3, #4]
1000cbb4:	2280      	movs	r2, #128	; 0x80
1000cbb6:	4391      	bics	r1, r2
1000cbb8:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cbba:	6859      	ldr	r1, [r3, #4]
1000cbbc:	430a      	orrs	r2, r1
1000cbbe:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cbc0:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_IF_RSTN;
		break;
1000cbc2:	e1da      	b.n	1000cf7a <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cbc4:	4bbc      	ldr	r3, [pc, #752]	; (1000ceb8 <system_peripheral_reset+0x390>)
1000cbc6:	6859      	ldr	r1, [r3, #4]
1000cbc8:	4abc      	ldr	r2, [pc, #752]	; (1000cebc <system_peripheral_reset+0x394>)
1000cbca:	400a      	ands	r2, r1
1000cbcc:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cbce:	685a      	ldr	r2, [r3, #4]
1000cbd0:	2180      	movs	r1, #128	; 0x80
1000cbd2:	0049      	lsls	r1, r1, #1
1000cbd4:	430a      	orrs	r2, r1
1000cbd6:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cbd8:	2000      	movs	r0, #0
		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_CORE_RSTN;
		break;
1000cbda:	e1ce      	b.n	1000cf7a <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cbdc:	4bb6      	ldr	r3, [pc, #728]	; (1000ceb8 <system_peripheral_reset+0x390>)
1000cbde:	6859      	ldr	r1, [r3, #4]
1000cbe0:	4ab7      	ldr	r2, [pc, #732]	; (1000cec0 <system_peripheral_reset+0x398>)
1000cbe2:	400a      	ands	r2, r1
1000cbe4:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cbe6:	685a      	ldr	r2, [r3, #4]
1000cbe8:	2180      	movs	r1, #128	; 0x80
1000cbea:	0089      	lsls	r1, r1, #2
1000cbec:	430a      	orrs	r2, r1
1000cbee:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cbf0:	2000      	movs	r0, #0
		case PERIPHERAL_I2C0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_IF_RSTN;
		break;
1000cbf2:	e1c2      	b.n	1000cf7a <system_peripheral_reset+0x452>

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cbf4:	4bb0      	ldr	r3, [pc, #704]	; (1000ceb8 <system_peripheral_reset+0x390>)
1000cbf6:	6859      	ldr	r1, [r3, #4]
1000cbf8:	4ab2      	ldr	r2, [pc, #712]	; (1000cec4 <system_peripheral_reset+0x39c>)
1000cbfa:	400a      	ands	r2, r1
1000cbfc:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cbfe:	685a      	ldr	r2, [r3, #4]
1000cc00:	2180      	movs	r1, #128	; 0x80
1000cc02:	00c9      	lsls	r1, r1, #3
1000cc04:	430a      	orrs	r2, r1
1000cc06:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cc08:	2000      	movs	r0, #0
		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
		break;
1000cc0a:	e1b6      	b.n	1000cf7a <system_peripheral_reset+0x452>

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cc0c:	4baa      	ldr	r3, [pc, #680]	; (1000ceb8 <system_peripheral_reset+0x390>)
1000cc0e:	6859      	ldr	r1, [r3, #4]
1000cc10:	4aad      	ldr	r2, [pc, #692]	; (1000cec8 <system_peripheral_reset+0x3a0>)
1000cc12:	400a      	ands	r2, r1
1000cc14:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_TIMER0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cc16:	685a      	ldr	r2, [r3, #4]
1000cc18:	2180      	movs	r1, #128	; 0x80
1000cc1a:	0109      	lsls	r1, r1, #4
1000cc1c:	430a      	orrs	r2, r1
1000cc1e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cc20:	2000      	movs	r0, #0
		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_TIMER0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_TIMER0_RSTN;
		break;
1000cc22:	e1aa      	b.n	1000cf7a <system_peripheral_reset+0x452>

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cc24:	4ba4      	ldr	r3, [pc, #656]	; (1000ceb8 <system_peripheral_reset+0x390>)
1000cc26:	6859      	ldr	r1, [r3, #4]
1000cc28:	4aa8      	ldr	r2, [pc, #672]	; (1000cecc <system_peripheral_reset+0x3a4>)
1000cc2a:	400a      	ands	r2, r1
1000cc2c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cc2e:	685a      	ldr	r2, [r3, #4]
1000cc30:	2180      	movs	r1, #128	; 0x80
1000cc32:	0149      	lsls	r1, r1, #5
1000cc34:	430a      	orrs	r2, r1
1000cc36:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cc38:	2000      	movs	r0, #0
		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_CORE_RSTN;
		break;
1000cc3a:	e19e      	b.n	1000cf7a <system_peripheral_reset+0x452>

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cc3c:	4b9e      	ldr	r3, [pc, #632]	; (1000ceb8 <system_peripheral_reset+0x390>)
1000cc3e:	6859      	ldr	r1, [r3, #4]
1000cc40:	4aa3      	ldr	r2, [pc, #652]	; (1000ced0 <system_peripheral_reset+0x3a8>)
1000cc42:	400a      	ands	r2, r1
1000cc44:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cc46:	685a      	ldr	r2, [r3, #4]
1000cc48:	2180      	movs	r1, #128	; 0x80
1000cc4a:	0189      	lsls	r1, r1, #6
1000cc4c:	430a      	orrs	r2, r1
1000cc4e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cc50:	2000      	movs	r0, #0
		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_IF_RSTN;
		break;
1000cc52:	e192      	b.n	1000cf7a <system_peripheral_reset+0x452>

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cc54:	4b98      	ldr	r3, [pc, #608]	; (1000ceb8 <system_peripheral_reset+0x390>)
1000cc56:	6859      	ldr	r1, [r3, #4]
1000cc58:	4a9e      	ldr	r2, [pc, #632]	; (1000ced4 <system_peripheral_reset+0x3ac>)
1000cc5a:	400a      	ands	r2, r1
1000cc5c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cc5e:	685a      	ldr	r2, [r3, #4]
1000cc60:	2180      	movs	r1, #128	; 0x80
1000cc62:	01c9      	lsls	r1, r1, #7
1000cc64:	430a      	orrs	r2, r1
1000cc66:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cc68:	2000      	movs	r0, #0
		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_CORE_RSTN;
		break;
1000cc6a:	e186      	b.n	1000cf7a <system_peripheral_reset+0x452>

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cc6c:	4b92      	ldr	r3, [pc, #584]	; (1000ceb8 <system_peripheral_reset+0x390>)
1000cc6e:	6859      	ldr	r1, [r3, #4]
1000cc70:	4a99      	ldr	r2, [pc, #612]	; (1000ced8 <system_peripheral_reset+0x3b0>)
1000cc72:	400a      	ands	r2, r1
1000cc74:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cc76:	685a      	ldr	r2, [r3, #4]
1000cc78:	2180      	movs	r1, #128	; 0x80
1000cc7a:	0209      	lsls	r1, r1, #8
1000cc7c:	430a      	orrs	r2, r1
1000cc7e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cc80:	2000      	movs	r0, #0
		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_IF_RSTN;
		break;
1000cc82:	e17a      	b.n	1000cf7a <system_peripheral_reset+0x452>

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cc84:	4b8c      	ldr	r3, [pc, #560]	; (1000ceb8 <system_peripheral_reset+0x390>)
1000cc86:	6859      	ldr	r1, [r3, #4]
1000cc88:	4a94      	ldr	r2, [pc, #592]	; (1000cedc <system_peripheral_reset+0x3b4>)
1000cc8a:	400a      	ands	r2, r1
1000cc8c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cc8e:	685a      	ldr	r2, [r3, #4]
1000cc90:	2180      	movs	r1, #128	; 0x80
1000cc92:	0249      	lsls	r1, r1, #9
1000cc94:	430a      	orrs	r2, r1
1000cc96:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cc98:	2000      	movs	r0, #0
		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT0_RSTN;
		break;
1000cc9a:	e16e      	b.n	1000cf7a <system_peripheral_reset+0x452>

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cc9c:	4b86      	ldr	r3, [pc, #536]	; (1000ceb8 <system_peripheral_reset+0x390>)
1000cc9e:	6859      	ldr	r1, [r3, #4]
1000cca0:	4a8f      	ldr	r2, [pc, #572]	; (1000cee0 <system_peripheral_reset+0x3b8>)
1000cca2:	400a      	ands	r2, r1
1000cca4:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cca6:	685a      	ldr	r2, [r3, #4]
1000cca8:	2180      	movs	r1, #128	; 0x80
1000ccaa:	0289      	lsls	r1, r1, #10
1000ccac:	430a      	orrs	r2, r1
1000ccae:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ccb0:	2000      	movs	r0, #0
		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT1_RSTN;
		break;
1000ccb2:	e162      	b.n	1000cf7a <system_peripheral_reset+0x452>

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000ccb4:	4b80      	ldr	r3, [pc, #512]	; (1000ceb8 <system_peripheral_reset+0x390>)
1000ccb6:	6859      	ldr	r1, [r3, #4]
1000ccb8:	4a8a      	ldr	r2, [pc, #552]	; (1000cee4 <system_peripheral_reset+0x3bc>)
1000ccba:	400a      	ands	r2, r1
1000ccbc:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000ccbe:	685a      	ldr	r2, [r3, #4]
1000ccc0:	2180      	movs	r1, #128	; 0x80
1000ccc2:	02c9      	lsls	r1, r1, #11
1000ccc4:	430a      	orrs	r2, r1
1000ccc6:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ccc8:	2000      	movs	r0, #0
		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
		break;
1000ccca:	e156      	b.n	1000cf7a <system_peripheral_reset+0x452>

		case PERIPHERAL_MBIST:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cccc:	4b7a      	ldr	r3, [pc, #488]	; (1000ceb8 <system_peripheral_reset+0x390>)
1000ccce:	6859      	ldr	r1, [r3, #4]
1000ccd0:	4a85      	ldr	r2, [pc, #532]	; (1000cee8 <system_peripheral_reset+0x3c0>)
1000ccd2:	400a      	ands	r2, r1
1000ccd4:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000ccd6:	685a      	ldr	r2, [r3, #4]
1000ccd8:	2180      	movs	r1, #128	; 0x80
1000ccda:	0309      	lsls	r1, r1, #12
1000ccdc:	430a      	orrs	r2, r1
1000ccde:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cce0:	2000      	movs	r0, #0
		case PERIPHERAL_MBIST:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
		break;
1000cce2:	e14a      	b.n	1000cf7a <system_peripheral_reset+0x452>

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cce4:	4b74      	ldr	r3, [pc, #464]	; (1000ceb8 <system_peripheral_reset+0x390>)
1000cce6:	6859      	ldr	r1, [r3, #4]
1000cce8:	4a80      	ldr	r2, [pc, #512]	; (1000ceec <system_peripheral_reset+0x3c4>)
1000ccea:	400a      	ands	r2, r1
1000ccec:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000ccee:	685a      	ldr	r2, [r3, #4]
1000ccf0:	2180      	movs	r1, #128	; 0x80
1000ccf2:	0349      	lsls	r1, r1, #13
1000ccf4:	430a      	orrs	r2, r1
1000ccf6:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ccf8:	2000      	movs	r0, #0
		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
		break;
1000ccfa:	e13e      	b.n	1000cf7a <system_peripheral_reset+0x452>

		case PERIPHERAL_LOW_POWER_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000ccfc:	4b6e      	ldr	r3, [pc, #440]	; (1000ceb8 <system_peripheral_reset+0x390>)
1000ccfe:	6859      	ldr	r1, [r3, #4]
1000cd00:	4a7b      	ldr	r2, [pc, #492]	; (1000cef0 <system_peripheral_reset+0x3c8>)
1000cd02:	400a      	ands	r2, r1
1000cd04:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cd06:	685a      	ldr	r2, [r3, #4]
1000cd08:	2180      	movs	r1, #128	; 0x80
1000cd0a:	0389      	lsls	r1, r1, #14
1000cd0c:	430a      	orrs	r2, r1
1000cd0e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cd10:	2000      	movs	r0, #0
		case PERIPHERAL_LOW_POWER_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
		break;
1000cd12:	e132      	b.n	1000cf7a <system_peripheral_reset+0x452>

		case PERIPHERAL_LPMCU_DEBUG:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cd14:	4b68      	ldr	r3, [pc, #416]	; (1000ceb8 <system_peripheral_reset+0x390>)
1000cd16:	6859      	ldr	r1, [r3, #4]
1000cd18:	4a76      	ldr	r2, [pc, #472]	; (1000cef4 <system_peripheral_reset+0x3cc>)
1000cd1a:	400a      	ands	r2, r1
1000cd1c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cd1e:	685a      	ldr	r2, [r3, #4]
1000cd20:	2180      	movs	r1, #128	; 0x80
1000cd22:	03c9      	lsls	r1, r1, #15
1000cd24:	430a      	orrs	r2, r1
1000cd26:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cd28:	2000      	movs	r0, #0
		case PERIPHERAL_LPMCU_DEBUG:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
		break;
1000cd2a:	e126      	b.n	1000cf7a <system_peripheral_reset+0x452>

		case PERIPHERAL_ARM_FREE_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cd2c:	4b62      	ldr	r3, [pc, #392]	; (1000ceb8 <system_peripheral_reset+0x390>)
1000cd2e:	6859      	ldr	r1, [r3, #4]
1000cd30:	4a71      	ldr	r2, [pc, #452]	; (1000cef8 <system_peripheral_reset+0x3d0>)
1000cd32:	400a      	ands	r2, r1
1000cd34:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cd36:	685a      	ldr	r2, [r3, #4]
1000cd38:	2180      	movs	r1, #128	; 0x80
1000cd3a:	0409      	lsls	r1, r1, #16
1000cd3c:	430a      	orrs	r2, r1
1000cd3e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cd40:	2000      	movs	r0, #0
		case PERIPHERAL_ARM_FREE_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
		break;
1000cd42:	e11a      	b.n	1000cf7a <system_peripheral_reset+0x452>

		case PERIPHERAL_ARM_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cd44:	4b5c      	ldr	r3, [pc, #368]	; (1000ceb8 <system_peripheral_reset+0x390>)
1000cd46:	6859      	ldr	r1, [r3, #4]
1000cd48:	4a6c      	ldr	r2, [pc, #432]	; (1000cefc <system_peripheral_reset+0x3d4>)
1000cd4a:	400a      	ands	r2, r1
1000cd4c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cd4e:	685a      	ldr	r2, [r3, #4]
1000cd50:	2180      	movs	r1, #128	; 0x80
1000cd52:	0449      	lsls	r1, r1, #17
1000cd54:	430a      	orrs	r2, r1
1000cd56:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cd58:	2000      	movs	r0, #0
		case PERIPHERAL_ARM_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
		break;
1000cd5a:	e10e      	b.n	1000cf7a <system_peripheral_reset+0x452>

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cd5c:	4b56      	ldr	r3, [pc, #344]	; (1000ceb8 <system_peripheral_reset+0x390>)
1000cd5e:	6859      	ldr	r1, [r3, #4]
1000cd60:	4a67      	ldr	r2, [pc, #412]	; (1000cf00 <system_peripheral_reset+0x3d8>)
1000cd62:	400a      	ands	r2, r1
1000cd64:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cd66:	685a      	ldr	r2, [r3, #4]
1000cd68:	2180      	movs	r1, #128	; 0x80
1000cd6a:	0489      	lsls	r1, r1, #18
1000cd6c:	430a      	orrs	r2, r1
1000cd6e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cd70:	2000      	movs	r0, #0
		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC0_RSTN;
		break;
1000cd72:	e102      	b.n	1000cf7a <system_peripheral_reset+0x452>

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cd74:	4b50      	ldr	r3, [pc, #320]	; (1000ceb8 <system_peripheral_reset+0x390>)
1000cd76:	6859      	ldr	r1, [r3, #4]
1000cd78:	4a62      	ldr	r2, [pc, #392]	; (1000cf04 <system_peripheral_reset+0x3dc>)
1000cd7a:	400a      	ands	r2, r1
1000cd7c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cd7e:	685a      	ldr	r2, [r3, #4]
1000cd80:	2180      	movs	r1, #128	; 0x80
1000cd82:	04c9      	lsls	r1, r1, #19
1000cd84:	430a      	orrs	r2, r1
1000cd86:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cd88:	2000      	movs	r0, #0
		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC1_RSTN;
		break;
1000cd8a:	e0f6      	b.n	1000cf7a <system_peripheral_reset+0x452>

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cd8c:	4b4a      	ldr	r3, [pc, #296]	; (1000ceb8 <system_peripheral_reset+0x390>)
1000cd8e:	6859      	ldr	r1, [r3, #4]
1000cd90:	4a5d      	ldr	r2, [pc, #372]	; (1000cf08 <system_peripheral_reset+0x3e0>)
1000cd92:	400a      	ands	r2, r1
1000cd94:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cd96:	685a      	ldr	r2, [r3, #4]
1000cd98:	2180      	movs	r1, #128	; 0x80
1000cd9a:	0509      	lsls	r1, r1, #20
1000cd9c:	430a      	orrs	r2, r1
1000cd9e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cda0:	2000      	movs	r0, #0
		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC2_RSTN;
		break;
1000cda2:	e0ea      	b.n	1000cf7a <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cda4:	4b44      	ldr	r3, [pc, #272]	; (1000ceb8 <system_peripheral_reset+0x390>)
1000cda6:	6859      	ldr	r1, [r3, #4]
1000cda8:	4a58      	ldr	r2, [pc, #352]	; (1000cf0c <system_peripheral_reset+0x3e4>)
1000cdaa:	400a      	ands	r2, r1
1000cdac:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cdae:	685a      	ldr	r2, [r3, #4]
1000cdb0:	2180      	movs	r1, #128	; 0x80
1000cdb2:	0549      	lsls	r1, r1, #21
1000cdb4:	430a      	orrs	r2, r1
1000cdb6:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cdb8:	2000      	movs	r0, #0
		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM0_RSTN;
		break;
1000cdba:	e0de      	b.n	1000cf7a <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cdbc:	4b3e      	ldr	r3, [pc, #248]	; (1000ceb8 <system_peripheral_reset+0x390>)
1000cdbe:	6859      	ldr	r1, [r3, #4]
1000cdc0:	4a53      	ldr	r2, [pc, #332]	; (1000cf10 <system_peripheral_reset+0x3e8>)
1000cdc2:	400a      	ands	r2, r1
1000cdc4:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cdc6:	685a      	ldr	r2, [r3, #4]
1000cdc8:	2180      	movs	r1, #128	; 0x80
1000cdca:	0589      	lsls	r1, r1, #22
1000cdcc:	430a      	orrs	r2, r1
1000cdce:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cdd0:	2000      	movs	r0, #0
		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM1_RSTN;
		break;
1000cdd2:	e0d2      	b.n	1000cf7a <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cdd4:	4b38      	ldr	r3, [pc, #224]	; (1000ceb8 <system_peripheral_reset+0x390>)
1000cdd6:	6859      	ldr	r1, [r3, #4]
1000cdd8:	4a4e      	ldr	r2, [pc, #312]	; (1000cf14 <system_peripheral_reset+0x3ec>)
1000cdda:	400a      	ands	r2, r1
1000cddc:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cdde:	685a      	ldr	r2, [r3, #4]
1000cde0:	2180      	movs	r1, #128	; 0x80
1000cde2:	05c9      	lsls	r1, r1, #23
1000cde4:	430a      	orrs	r2, r1
1000cde6:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cde8:	2000      	movs	r0, #0
		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM2_RSTN;
		break;
1000cdea:	e0c6      	b.n	1000cf7a <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cdec:	4a32      	ldr	r2, [pc, #200]	; (1000ceb8 <system_peripheral_reset+0x390>)
1000cdee:	6853      	ldr	r3, [r2, #4]
1000cdf0:	005b      	lsls	r3, r3, #1
1000cdf2:	085b      	lsrs	r3, r3, #1
1000cdf4:	6053      	str	r3, [r2, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM3_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cdf6:	6853      	ldr	r3, [r2, #4]
1000cdf8:	2180      	movs	r1, #128	; 0x80
1000cdfa:	0609      	lsls	r1, r1, #24
1000cdfc:	430b      	orrs	r3, r1
1000cdfe:	6053      	str	r3, [r2, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ce00:	2000      	movs	r0, #0
		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM3_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM3_RSTN;
		break;
1000ce02:	e0ba      	b.n	1000cf7a <system_peripheral_reset+0x452>

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000ce04:	4b2c      	ldr	r3, [pc, #176]	; (1000ceb8 <system_peripheral_reset+0x390>)
1000ce06:	891a      	ldrh	r2, [r3, #8]
1000ce08:	2101      	movs	r1, #1
1000ce0a:	438a      	bics	r2, r1
1000ce0c:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000ce0e:	8919      	ldrh	r1, [r3, #8]
1000ce10:	2201      	movs	r2, #1
1000ce12:	430a      	orrs	r2, r1
1000ce14:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ce16:	2000      	movs	r0, #0
		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER0_RSTN;
		break;
1000ce18:	e0af      	b.n	1000cf7a <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000ce1a:	4b27      	ldr	r3, [pc, #156]	; (1000ceb8 <system_peripheral_reset+0x390>)
1000ce1c:	891a      	ldrh	r2, [r3, #8]
1000ce1e:	2102      	movs	r1, #2
1000ce20:	438a      	bics	r2, r1
1000ce22:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000ce24:	8919      	ldrh	r1, [r3, #8]
1000ce26:	2202      	movs	r2, #2
1000ce28:	430a      	orrs	r2, r1
1000ce2a:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ce2c:	2000      	movs	r0, #0
		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_CORE_RSTN;
		break;
1000ce2e:	e0a4      	b.n	1000cf7a <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000ce30:	4b21      	ldr	r3, [pc, #132]	; (1000ceb8 <system_peripheral_reset+0x390>)
1000ce32:	891a      	ldrh	r2, [r3, #8]
1000ce34:	2104      	movs	r1, #4
1000ce36:	438a      	bics	r2, r1
1000ce38:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000ce3a:	8919      	ldrh	r1, [r3, #8]
1000ce3c:	2204      	movs	r2, #4
1000ce3e:	430a      	orrs	r2, r1
1000ce40:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ce42:	2000      	movs	r0, #0
		case PERIPHERAL_I2C1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_IF_RSTN;
		break;
1000ce44:	e099      	b.n	1000cf7a <system_peripheral_reset+0x452>

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000ce46:	4b1c      	ldr	r3, [pc, #112]	; (1000ceb8 <system_peripheral_reset+0x390>)
1000ce48:	891a      	ldrh	r2, [r3, #8]
1000ce4a:	2108      	movs	r1, #8
1000ce4c:	438a      	bics	r2, r1
1000ce4e:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000ce50:	8919      	ldrh	r1, [r3, #8]
1000ce52:	2208      	movs	r2, #8
1000ce54:	430a      	orrs	r2, r1
1000ce56:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ce58:	2000      	movs	r0, #0
		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
		break;
1000ce5a:	e08e      	b.n	1000cf7a <system_peripheral_reset+0x452>

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000ce5c:	4b16      	ldr	r3, [pc, #88]	; (1000ceb8 <system_peripheral_reset+0x390>)
1000ce5e:	891a      	ldrh	r2, [r3, #8]
1000ce60:	2110      	movs	r1, #16
1000ce62:	438a      	bics	r2, r1
1000ce64:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000ce66:	8919      	ldrh	r1, [r3, #8]
1000ce68:	2210      	movs	r2, #16
1000ce6a:	430a      	orrs	r2, r1
1000ce6c:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ce6e:	2000      	movs	r0, #0
		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
		break;
1000ce70:	e083      	b.n	1000cf7a <system_peripheral_reset+0x452>

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000ce72:	4b11      	ldr	r3, [pc, #68]	; (1000ceb8 <system_peripheral_reset+0x390>)
1000ce74:	891a      	ldrh	r2, [r3, #8]
1000ce76:	2120      	movs	r1, #32
1000ce78:	438a      	bics	r2, r1
1000ce7a:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000ce7c:	8919      	ldrh	r1, [r3, #8]
1000ce7e:	2220      	movs	r2, #32
1000ce80:	430a      	orrs	r2, r1
1000ce82:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ce84:	2000      	movs	r0, #0
		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
		break;
1000ce86:	e078      	b.n	1000cf7a <system_peripheral_reset+0x452>

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000ce88:	4b0b      	ldr	r3, [pc, #44]	; (1000ceb8 <system_peripheral_reset+0x390>)
1000ce8a:	891a      	ldrh	r2, [r3, #8]
1000ce8c:	2140      	movs	r1, #64	; 0x40
1000ce8e:	438a      	bics	r2, r1
1000ce90:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000ce92:	8919      	ldrh	r1, [r3, #8]
1000ce94:	2240      	movs	r2, #64	; 0x40
1000ce96:	430a      	orrs	r2, r1
1000ce98:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ce9a:	2000      	movs	r0, #0
		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
		break;
1000ce9c:	e06d      	b.n	1000cf7a <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000ce9e:	4b06      	ldr	r3, [pc, #24]	; (1000ceb8 <system_peripheral_reset+0x390>)
1000cea0:	891a      	ldrh	r2, [r3, #8]
1000cea2:	2180      	movs	r1, #128	; 0x80
1000cea4:	438a      	bics	r2, r1
1000cea6:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000cea8:	8919      	ldrh	r1, [r3, #8]
1000ceaa:	2280      	movs	r2, #128	; 0x80
1000ceac:	430a      	orrs	r2, r1
1000ceae:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ceb0:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_CLK_RSTN;
		break;
1000ceb2:	e062      	b.n	1000cf7a <system_peripheral_reset+0x452>
1000ceb4:	100171bc 	.word	0x100171bc
1000ceb8:	4000b000 	.word	0x4000b000
1000cebc:	fffffeff 	.word	0xfffffeff
1000cec0:	fffffdff 	.word	0xfffffdff
1000cec4:	fffffbff 	.word	0xfffffbff
1000cec8:	fffff7ff 	.word	0xfffff7ff
1000cecc:	ffffefff 	.word	0xffffefff
1000ced0:	ffffdfff 	.word	0xffffdfff
1000ced4:	ffffbfff 	.word	0xffffbfff
1000ced8:	ffff7fff 	.word	0xffff7fff
1000cedc:	fffeffff 	.word	0xfffeffff
1000cee0:	fffdffff 	.word	0xfffdffff
1000cee4:	fffbffff 	.word	0xfffbffff
1000cee8:	fff7ffff 	.word	0xfff7ffff
1000ceec:	ffefffff 	.word	0xffefffff
1000cef0:	ffdfffff 	.word	0xffdfffff
1000cef4:	ffbfffff 	.word	0xffbfffff
1000cef8:	ff7fffff 	.word	0xff7fffff
1000cefc:	feffffff 	.word	0xfeffffff
1000cf00:	fdffffff 	.word	0xfdffffff
1000cf04:	fbffffff 	.word	0xfbffffff
1000cf08:	f7ffffff 	.word	0xf7ffffff
1000cf0c:	efffffff 	.word	0xefffffff
1000cf10:	dfffffff 	.word	0xdfffffff
1000cf14:	bfffffff 	.word	0xbfffffff

		case PERIPHERAL_SPI1_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000cf18:	4b18      	ldr	r3, [pc, #96]	; (1000cf7c <system_peripheral_reset+0x454>)
1000cf1a:	8919      	ldrh	r1, [r3, #8]
1000cf1c:	4a18      	ldr	r2, [pc, #96]	; (1000cf80 <system_peripheral_reset+0x458>)
1000cf1e:	400a      	ands	r2, r1
1000cf20:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000cf22:	8919      	ldrh	r1, [r3, #8]
1000cf24:	2280      	movs	r2, #128	; 0x80
1000cf26:	0052      	lsls	r2, r2, #1
1000cf28:	430a      	orrs	r2, r1
1000cf2a:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cf2c:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_CLK_RSTN;
		break;
1000cf2e:	e024      	b.n	1000cf7a <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000cf30:	4b12      	ldr	r3, [pc, #72]	; (1000cf7c <system_peripheral_reset+0x454>)
1000cf32:	8919      	ldrh	r1, [r3, #8]
1000cf34:	4a13      	ldr	r2, [pc, #76]	; (1000cf84 <system_peripheral_reset+0x45c>)
1000cf36:	400a      	ands	r2, r1
1000cf38:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000cf3a:	8919      	ldrh	r1, [r3, #8]
1000cf3c:	2280      	movs	r2, #128	; 0x80
1000cf3e:	0092      	lsls	r2, r2, #2
1000cf40:	430a      	orrs	r2, r1
1000cf42:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cf44:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_PHASE_INT_CLK_RSTN;
		break;
1000cf46:	e018      	b.n	1000cf7a <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000cf48:	4b0c      	ldr	r3, [pc, #48]	; (1000cf7c <system_peripheral_reset+0x454>)
1000cf4a:	8919      	ldrh	r1, [r3, #8]
1000cf4c:	4a0e      	ldr	r2, [pc, #56]	; (1000cf88 <system_peripheral_reset+0x460>)
1000cf4e:	400a      	ands	r2, r1
1000cf50:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000cf52:	8919      	ldrh	r1, [r3, #8]
1000cf54:	2280      	movs	r2, #128	; 0x80
1000cf56:	00d2      	lsls	r2, r2, #3
1000cf58:	430a      	orrs	r2, r1
1000cf5a:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cf5c:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_PHASE_INT_CLK_RSTN;
		break;
1000cf5e:	e00c      	b.n	1000cf7a <system_peripheral_reset+0x452>

		case PERIPHERAL_DMA:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000cf60:	4b06      	ldr	r3, [pc, #24]	; (1000cf7c <system_peripheral_reset+0x454>)
1000cf62:	8919      	ldrh	r1, [r3, #8]
1000cf64:	4a09      	ldr	r2, [pc, #36]	; (1000cf8c <system_peripheral_reset+0x464>)
1000cf66:	400a      	ands	r2, r1
1000cf68:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_PROV_DMA_CTRL0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000cf6a:	8919      	ldrh	r1, [r3, #8]
1000cf6c:	2280      	movs	r2, #128	; 0x80
1000cf6e:	0112      	lsls	r2, r2, #4
1000cf70:	430a      	orrs	r2, r1
1000cf72:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cf74:	2000      	movs	r0, #0
		case PERIPHERAL_DMA:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_PROV_DMA_CTRL0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_PROV_DMA_CTRL0_RSTN;
		break;
1000cf76:	e000      	b.n	1000cf7a <system_peripheral_reset+0x452>

		default:
			return STATUS_ERR_INVALID_ARG;
1000cf78:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
1000cf7a:	bd00      	pop	{pc}
1000cf7c:	4000b000 	.word	0x4000b000
1000cf80:	fffffeff 	.word	0xfffffeff
1000cf84:	fffffdff 	.word	0xfffffdff
1000cf88:	fffffbff 	.word	0xfffffbff
1000cf8c:	fffff7ff 	.word	0xfffff7ff

1000cf90 <system_register_isr>:
void system_register_isr(enum ram_isr_table_index isr_index,
		uint32_t isr_address)
{
	uint32_t *temp;
	temp = (uint32_t *)(isr_index * 4 + ISR_RAM_MAP_START_ADDRESS);
	*temp = isr_address;
1000cf90:	2380      	movs	r3, #128	; 0x80
1000cf92:	04db      	lsls	r3, r3, #19
1000cf94:	469c      	mov	ip, r3
1000cf96:	4460      	add	r0, ip
1000cf98:	0080      	lsls	r0, r0, #2
1000cf9a:	6001      	str	r1, [r0, #0]
}
1000cf9c:	4770      	bx	lr
1000cf9e:	46c0      	nop			; (mov r8, r8)

1000cfa0 <uart_rx0_isr_handler>:
	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
}

static void uart_rx0_isr_handler(void)
{
1000cfa0:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[0];
1000cfa2:	4b20      	ldr	r3, [pc, #128]	; (1000d024 <uart_rx0_isr_handler+0x84>)
1000cfa4:	681c      	ldr	r4, [r3, #0]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->RECEIVE_STATUS.reg;
1000cfa6:	6823      	ldr	r3, [r4, #0]
1000cfa8:	7d1d      	ldrb	r5, [r3, #20]
1000cfaa:	b2ed      	uxtb	r5, r5
	if (flags & UART_RECEIVE_STATUS_FIFO_OVERRUN) {
1000cfac:	066a      	lsls	r2, r5, #25
1000cfae:	d513      	bpl.n	1000cfd8 <uart_rx0_isr_handler+0x38>
		/* Store the error code */
		module->status = STATUS_ERR_OVERFLOW;
1000cfb0:	211e      	movs	r1, #30
1000cfb2:	2222      	movs	r2, #34	; 0x22
1000cfb4:	54a1      	strb	r1, [r4, r2]
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
1000cfb6:	7e1a      	ldrb	r2, [r3, #24]
1000cfb8:	3123      	adds	r1, #35	; 0x23
1000cfba:	438a      	bics	r2, r1
1000cfbc:	761a      	strb	r2, [r3, #24]
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
1000cfbe:	2321      	movs	r3, #33	; 0x21
1000cfc0:	5ce3      	ldrb	r3, [r4, r3]
1000cfc2:	071b      	lsls	r3, r3, #28
1000cfc4:	d506      	bpl.n	1000cfd4 <uart_rx0_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
1000cfc6:	2320      	movs	r3, #32
		module->status = STATUS_ERR_OVERFLOW;
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
1000cfc8:	5ce3      	ldrb	r3, [r4, r3]
1000cfca:	071b      	lsls	r3, r3, #28
1000cfcc:	d502      	bpl.n	1000cfd4 <uart_rx0_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
			(module->callback[UART_RX_FIFO_OVERRUN])(module);
1000cfce:	0020      	movs	r0, r4
1000cfd0:	6923      	ldr	r3, [r4, #16]
1000cfd2:	4798      	blx	r3
		}
		/* Flush */
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
1000cfd4:	6823      	ldr	r3, [r4, #0]
1000cfd6:	7c1b      	ldrb	r3, [r3, #16]
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1000cfd8:	07eb      	lsls	r3, r5, #31
1000cfda:	d522      	bpl.n	1000d022 <uart_rx0_isr_handler+0x82>
		struct uart_module *const module)
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	uint16_t received_data = (uart_hw->RECEIVE_DATA.reg & UART_RECEIVE_DATA_MASK);
1000cfdc:	6823      	ldr	r3, [r4, #0]
1000cfde:	7c1b      	ldrb	r3, [r3, #16]
1000cfe0:	b2db      	uxtb	r3, r3

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
1000cfe2:	6962      	ldr	r2, [r4, #20]
1000cfe4:	7013      	strb	r3, [r2, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
1000cfe6:	6963      	ldr	r3, [r4, #20]
1000cfe8:	3301      	adds	r3, #1
1000cfea:	6163      	str	r3, [r4, #20]

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
1000cfec:	8ba3      	ldrh	r3, [r4, #28]
1000cfee:	3b01      	subs	r3, #1
1000cff0:	b29b      	uxth	r3, r3
1000cff2:	83a3      	strh	r3, [r4, #28]
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
1000cff4:	8ba3      	ldrh	r3, [r4, #28]
1000cff6:	b29b      	uxth	r3, r3
1000cff8:	2b00      	cmp	r3, #0
1000cffa:	d112      	bne.n	1000d022 <uart_rx0_isr_handler+0x82>
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
1000cffc:	3321      	adds	r3, #33	; 0x21
1000cffe:	5ce3      	ldrb	r3, [r4, r3]
1000d000:	075b      	lsls	r3, r3, #29
1000d002:	d50e      	bpl.n	1000d022 <uart_rx0_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
1000d004:	2320      	movs	r3, #32
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
1000d006:	5ce3      	ldrb	r3, [r4, r3]
1000d008:	075b      	lsls	r3, r3, #29
1000d00a:	d50a      	bpl.n	1000d022 <uart_rx0_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
				module->status = STATUS_OK;
1000d00c:	2200      	movs	r2, #0
1000d00e:	2322      	movs	r3, #34	; 0x22
1000d010:	54e2      	strb	r2, [r4, r3]
				module->hw->RX_INTERRUPT_MASK.reg &=
1000d012:	6822      	ldr	r2, [r4, #0]
1000d014:	7e13      	ldrb	r3, [r2, #24]
1000d016:	2101      	movs	r1, #1
1000d018:	438b      	bics	r3, r1
1000d01a:	7613      	strb	r3, [r2, #24]
					~(UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
				(module->callback[UART_RX_COMPLETE])(module);
1000d01c:	68e3      	ldr	r3, [r4, #12]
1000d01e:	0020      	movs	r0, r4
1000d020:	4798      	blx	r3
			}
		}
	}
}
1000d022:	bd70      	pop	{r4, r5, r6, pc}
1000d024:	10019fb8 	.word	0x10019fb8

1000d028 <uart_tx0_isr_handler>:

static void uart_tx0_isr_handler(void)
{
1000d028:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[0];
1000d02a:	4b21      	ldr	r3, [pc, #132]	; (1000d0b0 <uart_tx0_isr_handler+0x88>)
1000d02c:	681c      	ldr	r4, [r3, #0]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
1000d02e:	6823      	ldr	r3, [r4, #0]
1000d030:	791d      	ldrb	r5, [r3, #4]
1000d032:	b2ed      	uxtb	r5, r5
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
1000d034:	07ea      	lsls	r2, r5, #31
1000d036:	d517      	bpl.n	1000d068 <uart_tx0_isr_handler+0x40>
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	/* Write value will be at least 8-bits long */
	uint8_t data_to_send = *(module->tx_buffer_ptr);
1000d038:	69a2      	ldr	r2, [r4, #24]
1000d03a:	7811      	ldrb	r1, [r2, #0]
1000d03c:	b2c9      	uxtb	r1, r1
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
1000d03e:	3201      	adds	r2, #1
1000d040:	61a2      	str	r2, [r4, #24]

	/* Write the data to send*/
	uart_hw->TRANSMIT_DATA.reg = data_to_send & UART_TRANSMIT_DATA_MASK;
1000d042:	7019      	strb	r1, [r3, #0]

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
1000d044:	8be3      	ldrh	r3, [r4, #30]
1000d046:	3b01      	subs	r3, #1
1000d048:	b29b      	uxth	r3, r3
1000d04a:	83e3      	strh	r3, [r4, #30]
	struct uart_module *module = _uart_instances[0];
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
		_uart_write(module);
		if (module->remaining_tx_buffer_length == 0) {
1000d04c:	8be3      	ldrh	r3, [r4, #30]
1000d04e:	b29b      	uxth	r3, r3
1000d050:	2b00      	cmp	r3, #0
1000d052:	d109      	bne.n	1000d068 <uart_tx0_isr_handler+0x40>
			module->hw->TX_INTERRUPT_MASK.reg &=
1000d054:	6822      	ldr	r2, [r4, #0]
1000d056:	7a13      	ldrb	r3, [r2, #8]
1000d058:	2101      	movs	r1, #1
1000d05a:	438b      	bics	r3, r1
1000d05c:	7213      	strb	r3, [r2, #8]
					~UART_TX_INTERRUPT_MASK_TX_FIFO_NOT_FULL_MASK;
			module->hw->TX_INTERRUPT_MASK.reg |=
1000d05e:	6822      	ldr	r2, [r4, #0]
1000d060:	7a11      	ldrb	r1, [r2, #8]
1000d062:	2310      	movs	r3, #16
1000d064:	430b      	orrs	r3, r1
1000d066:	7213      	strb	r3, [r2, #8]
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
1000d068:	06eb      	lsls	r3, r5, #27
1000d06a:	d512      	bpl.n	1000d092 <uart_tx0_isr_handler+0x6a>
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
1000d06c:	2321      	movs	r3, #33	; 0x21
1000d06e:	5ce3      	ldrb	r3, [r4, r3]
1000d070:	07db      	lsls	r3, r3, #31
1000d072:	d50e      	bpl.n	1000d092 <uart_tx0_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
1000d074:	2320      	movs	r3, #32
			module->hw->TX_INTERRUPT_MASK.reg |=
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
1000d076:	5ce3      	ldrb	r3, [r4, r3]
1000d078:	07db      	lsls	r3, r3, #31
1000d07a:	d50a      	bpl.n	1000d092 <uart_tx0_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
			module->status = STATUS_OK;
1000d07c:	2200      	movs	r2, #0
1000d07e:	2322      	movs	r3, #34	; 0x22
1000d080:	54e2      	strb	r2, [r4, r3]
			/* Disable interrupt */
			module->hw->TX_INTERRUPT_MASK.reg &=
1000d082:	6822      	ldr	r2, [r4, #0]
1000d084:	7a13      	ldrb	r3, [r2, #8]
1000d086:	2110      	movs	r1, #16
1000d088:	438b      	bics	r3, r1
1000d08a:	7213      	strb	r3, [r2, #8]
				~UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
			(module->callback[UART_TX_COMPLETE])(module);
1000d08c:	0020      	movs	r0, r4
1000d08e:	6863      	ldr	r3, [r4, #4]
1000d090:	4798      	blx	r3
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
1000d092:	06ab      	lsls	r3, r5, #26
1000d094:	d50a      	bpl.n	1000d0ac <uart_tx0_isr_handler+0x84>
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
1000d096:	2321      	movs	r3, #33	; 0x21
1000d098:	5ce3      	ldrb	r3, [r4, r3]
1000d09a:	079b      	lsls	r3, r3, #30
1000d09c:	d506      	bpl.n	1000d0ac <uart_tx0_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
1000d09e:	2320      	movs	r3, #32
			(module->callback[UART_TX_COMPLETE])(module);
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
1000d0a0:	5ce3      	ldrb	r3, [r4, r3]
1000d0a2:	079b      	lsls	r3, r3, #30
1000d0a4:	d502      	bpl.n	1000d0ac <uart_tx0_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
			(module->callback[UART_CTS_ACTIVE])(module);
1000d0a6:	68a3      	ldr	r3, [r4, #8]
1000d0a8:	0020      	movs	r0, r4
1000d0aa:	4798      	blx	r3
		}

	}
}
1000d0ac:	bd70      	pop	{r4, r5, r6, pc}
1000d0ae:	46c0      	nop			; (mov r8, r8)
1000d0b0:	10019fb8 	.word	0x10019fb8

1000d0b4 <uart_rx1_isr_handler>:

static void uart_rx1_isr_handler(void)
{
1000d0b4:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[1];
1000d0b6:	4b20      	ldr	r3, [pc, #128]	; (1000d138 <uart_rx1_isr_handler+0x84>)
1000d0b8:	685c      	ldr	r4, [r3, #4]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->RECEIVE_STATUS.reg;
1000d0ba:	6823      	ldr	r3, [r4, #0]
1000d0bc:	7d1d      	ldrb	r5, [r3, #20]
1000d0be:	b2ed      	uxtb	r5, r5
	if (flags & UART_RECEIVE_STATUS_FIFO_OVERRUN) {
1000d0c0:	066a      	lsls	r2, r5, #25
1000d0c2:	d513      	bpl.n	1000d0ec <uart_rx1_isr_handler+0x38>
		/* Store the error code */
		module->status = STATUS_ERR_OVERFLOW;
1000d0c4:	211e      	movs	r1, #30
1000d0c6:	2222      	movs	r2, #34	; 0x22
1000d0c8:	54a1      	strb	r1, [r4, r2]
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
1000d0ca:	7e1a      	ldrb	r2, [r3, #24]
1000d0cc:	3123      	adds	r1, #35	; 0x23
1000d0ce:	438a      	bics	r2, r1
1000d0d0:	761a      	strb	r2, [r3, #24]
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
1000d0d2:	2321      	movs	r3, #33	; 0x21
1000d0d4:	5ce3      	ldrb	r3, [r4, r3]
1000d0d6:	071b      	lsls	r3, r3, #28
1000d0d8:	d506      	bpl.n	1000d0e8 <uart_rx1_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
1000d0da:	2320      	movs	r3, #32
		module->status = STATUS_ERR_OVERFLOW;
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
1000d0dc:	5ce3      	ldrb	r3, [r4, r3]
1000d0de:	071b      	lsls	r3, r3, #28
1000d0e0:	d502      	bpl.n	1000d0e8 <uart_rx1_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
			(module->callback[UART_RX_FIFO_OVERRUN])(module);
1000d0e2:	0020      	movs	r0, r4
1000d0e4:	6923      	ldr	r3, [r4, #16]
1000d0e6:	4798      	blx	r3
		}
		/* Flush */
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
1000d0e8:	6823      	ldr	r3, [r4, #0]
1000d0ea:	7c1b      	ldrb	r3, [r3, #16]
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1000d0ec:	07eb      	lsls	r3, r5, #31
1000d0ee:	d522      	bpl.n	1000d136 <uart_rx1_isr_handler+0x82>
		struct uart_module *const module)
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	uint16_t received_data = (uart_hw->RECEIVE_DATA.reg & UART_RECEIVE_DATA_MASK);
1000d0f0:	6823      	ldr	r3, [r4, #0]
1000d0f2:	7c1b      	ldrb	r3, [r3, #16]
1000d0f4:	b2db      	uxtb	r3, r3

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
1000d0f6:	6962      	ldr	r2, [r4, #20]
1000d0f8:	7013      	strb	r3, [r2, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
1000d0fa:	6963      	ldr	r3, [r4, #20]
1000d0fc:	3301      	adds	r3, #1
1000d0fe:	6163      	str	r3, [r4, #20]

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
1000d100:	8ba3      	ldrh	r3, [r4, #28]
1000d102:	3b01      	subs	r3, #1
1000d104:	b29b      	uxth	r3, r3
1000d106:	83a3      	strh	r3, [r4, #28]
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
1000d108:	8ba3      	ldrh	r3, [r4, #28]
1000d10a:	b29b      	uxth	r3, r3
1000d10c:	2b00      	cmp	r3, #0
1000d10e:	d112      	bne.n	1000d136 <uart_rx1_isr_handler+0x82>
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
1000d110:	3321      	adds	r3, #33	; 0x21
1000d112:	5ce3      	ldrb	r3, [r4, r3]
1000d114:	075b      	lsls	r3, r3, #29
1000d116:	d50e      	bpl.n	1000d136 <uart_rx1_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
1000d118:	2320      	movs	r3, #32
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
1000d11a:	5ce3      	ldrb	r3, [r4, r3]
1000d11c:	075b      	lsls	r3, r3, #29
1000d11e:	d50a      	bpl.n	1000d136 <uart_rx1_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
				module->status = STATUS_OK;
1000d120:	2200      	movs	r2, #0
1000d122:	2322      	movs	r3, #34	; 0x22
1000d124:	54e2      	strb	r2, [r4, r3]
				module->hw->RX_INTERRUPT_MASK.reg &=
1000d126:	6822      	ldr	r2, [r4, #0]
1000d128:	7e13      	ldrb	r3, [r2, #24]
1000d12a:	2101      	movs	r1, #1
1000d12c:	438b      	bics	r3, r1
1000d12e:	7613      	strb	r3, [r2, #24]
					~(UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
				(module->callback[UART_RX_COMPLETE])(module);
1000d130:	68e3      	ldr	r3, [r4, #12]
1000d132:	0020      	movs	r0, r4
1000d134:	4798      	blx	r3
			}
		}
	}
}
1000d136:	bd70      	pop	{r4, r5, r6, pc}
1000d138:	10019fb8 	.word	0x10019fb8

1000d13c <uart_tx1_isr_handler>:

static void uart_tx1_isr_handler(void)
{
1000d13c:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[1];
1000d13e:	4b21      	ldr	r3, [pc, #132]	; (1000d1c4 <uart_tx1_isr_handler+0x88>)
1000d140:	685c      	ldr	r4, [r3, #4]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
1000d142:	6823      	ldr	r3, [r4, #0]
1000d144:	791d      	ldrb	r5, [r3, #4]
1000d146:	b2ed      	uxtb	r5, r5
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
1000d148:	07ea      	lsls	r2, r5, #31
1000d14a:	d517      	bpl.n	1000d17c <uart_tx1_isr_handler+0x40>
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	/* Write value will be at least 8-bits long */
	uint8_t data_to_send = *(module->tx_buffer_ptr);
1000d14c:	69a2      	ldr	r2, [r4, #24]
1000d14e:	7811      	ldrb	r1, [r2, #0]
1000d150:	b2c9      	uxtb	r1, r1
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
1000d152:	3201      	adds	r2, #1
1000d154:	61a2      	str	r2, [r4, #24]

	/* Write the data to send*/
	uart_hw->TRANSMIT_DATA.reg = data_to_send & UART_TRANSMIT_DATA_MASK;
1000d156:	7019      	strb	r1, [r3, #0]

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
1000d158:	8be3      	ldrh	r3, [r4, #30]
1000d15a:	3b01      	subs	r3, #1
1000d15c:	b29b      	uxth	r3, r3
1000d15e:	83e3      	strh	r3, [r4, #30]
	struct uart_module *module = _uart_instances[1];
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
		_uart_write(module);
		if (module->remaining_tx_buffer_length == 0) {
1000d160:	8be3      	ldrh	r3, [r4, #30]
1000d162:	b29b      	uxth	r3, r3
1000d164:	2b00      	cmp	r3, #0
1000d166:	d109      	bne.n	1000d17c <uart_tx1_isr_handler+0x40>
			module->hw->TX_INTERRUPT_MASK.reg &=
1000d168:	6822      	ldr	r2, [r4, #0]
1000d16a:	7a13      	ldrb	r3, [r2, #8]
1000d16c:	2101      	movs	r1, #1
1000d16e:	438b      	bics	r3, r1
1000d170:	7213      	strb	r3, [r2, #8]
					~UART_TX_INTERRUPT_MASK_TX_FIFO_NOT_FULL_MASK;
			module->hw->TX_INTERRUPT_MASK.reg |=
1000d172:	6822      	ldr	r2, [r4, #0]
1000d174:	7a11      	ldrb	r1, [r2, #8]
1000d176:	2310      	movs	r3, #16
1000d178:	430b      	orrs	r3, r1
1000d17a:	7213      	strb	r3, [r2, #8]
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
1000d17c:	06eb      	lsls	r3, r5, #27
1000d17e:	d512      	bpl.n	1000d1a6 <uart_tx1_isr_handler+0x6a>
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
1000d180:	2321      	movs	r3, #33	; 0x21
1000d182:	5ce3      	ldrb	r3, [r4, r3]
1000d184:	07db      	lsls	r3, r3, #31
1000d186:	d50e      	bpl.n	1000d1a6 <uart_tx1_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
1000d188:	2320      	movs	r3, #32
			module->hw->TX_INTERRUPT_MASK.reg |=
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
1000d18a:	5ce3      	ldrb	r3, [r4, r3]
1000d18c:	07db      	lsls	r3, r3, #31
1000d18e:	d50a      	bpl.n	1000d1a6 <uart_tx1_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
			module->status = STATUS_OK;
1000d190:	2200      	movs	r2, #0
1000d192:	2322      	movs	r3, #34	; 0x22
1000d194:	54e2      	strb	r2, [r4, r3]
			/* Disable interrupt */
			module->hw->TX_INTERRUPT_MASK.reg &=
1000d196:	6822      	ldr	r2, [r4, #0]
1000d198:	7a13      	ldrb	r3, [r2, #8]
1000d19a:	2110      	movs	r1, #16
1000d19c:	438b      	bics	r3, r1
1000d19e:	7213      	strb	r3, [r2, #8]
				~UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
			(module->callback[UART_TX_COMPLETE])(module);
1000d1a0:	0020      	movs	r0, r4
1000d1a2:	6863      	ldr	r3, [r4, #4]
1000d1a4:	4798      	blx	r3
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
1000d1a6:	06ab      	lsls	r3, r5, #26
1000d1a8:	d50a      	bpl.n	1000d1c0 <uart_tx1_isr_handler+0x84>
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
1000d1aa:	2321      	movs	r3, #33	; 0x21
1000d1ac:	5ce3      	ldrb	r3, [r4, r3]
1000d1ae:	079b      	lsls	r3, r3, #30
1000d1b0:	d506      	bpl.n	1000d1c0 <uart_tx1_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
1000d1b2:	2320      	movs	r3, #32
			(module->callback[UART_TX_COMPLETE])(module);
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
1000d1b4:	5ce3      	ldrb	r3, [r4, r3]
1000d1b6:	079b      	lsls	r3, r3, #30
1000d1b8:	d502      	bpl.n	1000d1c0 <uart_tx1_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
			(module->callback[UART_CTS_ACTIVE])(module);
1000d1ba:	68a3      	ldr	r3, [r4, #8]
1000d1bc:	0020      	movs	r0, r4
1000d1be:	4798      	blx	r3
		}

	}
}
1000d1c0:	bd70      	pop	{r4, r5, r6, pc}
1000d1c2:	46c0      	nop			; (mov r8, r8)
1000d1c4:	10019fb8 	.word	0x10019fb8

1000d1c8 <uart_get_config_defaults>:
 * \param[out] config  Pointer to configuration structure to be initiated
 */
void uart_get_config_defaults(
		struct uart_config *const config)
{
	config->baud_rate = 115200;
1000d1c8:	23e1      	movs	r3, #225	; 0xe1
1000d1ca:	025b      	lsls	r3, r3, #9
1000d1cc:	6003      	str	r3, [r0, #0]
	config->data_bits = UART_8_BITS;
1000d1ce:	2300      	movs	r3, #0
1000d1d0:	7103      	strb	r3, [r0, #4]
	config->stop_bits = UART_1_STOP_BIT;
1000d1d2:	7143      	strb	r3, [r0, #5]
	config->parity = UART_NO_PARITY;
1000d1d4:	7183      	strb	r3, [r0, #6]
	config->flow_control = false;
1000d1d6:	71c3      	strb	r3, [r0, #7]

	config->pin_number_pad[0] = PIN_LP_GPIO_2;
1000d1d8:	3302      	adds	r3, #2
1000d1da:	6083      	str	r3, [r0, #8]
	config->pin_number_pad[1] = PIN_LP_GPIO_3;
1000d1dc:	2203      	movs	r2, #3
1000d1de:	60c2      	str	r2, [r0, #12]
	config->pin_number_pad[2] = PIN_LP_GPIO_4;
1000d1e0:	3201      	adds	r2, #1
1000d1e2:	6102      	str	r2, [r0, #16]
	config->pin_number_pad[3] = PIN_LP_GPIO_5;
1000d1e4:	3201      	adds	r2, #1
1000d1e6:	6142      	str	r2, [r0, #20]

	config->pinmux_sel_pad[0] = MUX_LP_GPIO_2_UART0_RXD;
1000d1e8:	6183      	str	r3, [r0, #24]
	config->pinmux_sel_pad[1] = MUX_LP_GPIO_3_UART0_TXD;
1000d1ea:	61c3      	str	r3, [r0, #28]
	config->pinmux_sel_pad[2] = MUX_LP_GPIO_4_UART0_CTS;
1000d1ec:	6203      	str	r3, [r0, #32]
	config->pinmux_sel_pad[3] = MUX_LP_GPIO_5_UART0_RTS;
1000d1ee:	6243      	str	r3, [r0, #36]	; 0x24
}
1000d1f0:	4770      	bx	lr
1000d1f2:	46c0      	nop			; (mov r8, r8)

1000d1f4 <uart_init>:
 *
 * \retval STATUS_OK                       The initialization was successful
 */
enum status_code uart_init(struct uart_module *const module, Uart * const hw,
		const struct uart_config *const config)
{
1000d1f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000d1f6:	464f      	mov	r7, r9
1000d1f8:	4646      	mov	r6, r8
1000d1fa:	b4c0      	push	{r6, r7}
1000d1fc:	0005      	movs	r5, r0
1000d1fe:	0017      	movs	r7, r2

	uint8_t config_temp = 0;
	uint8_t i,index;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
1000d200:	6001      	str	r1, [r0, #0]

	for (i = 0; i < UART_CALLBACK_N; i++) {
		module->callback[i] = NULL;
1000d202:	2300      	movs	r3, #0
1000d204:	6043      	str	r3, [r0, #4]
1000d206:	6083      	str	r3, [r0, #8]
1000d208:	60c3      	str	r3, [r0, #12]
1000d20a:	6103      	str	r3, [r0, #16]
	}
	module->rx_buffer_ptr = NULL;
1000d20c:	6143      	str	r3, [r0, #20]
	module->tx_buffer_ptr = NULL;
1000d20e:	6183      	str	r3, [r0, #24]
	module->remaining_rx_buffer_length = 0;
1000d210:	2200      	movs	r2, #0
1000d212:	8383      	strh	r3, [r0, #28]
	module->remaining_tx_buffer_length = 0;
1000d214:	83c3      	strh	r3, [r0, #30]
	module->callback_reg_mask = 0;
1000d216:	3320      	adds	r3, #32
1000d218:	54c2      	strb	r2, [r0, r3]
	module->callback_enable_mask = 0;
1000d21a:	3301      	adds	r3, #1
1000d21c:	54c2      	strb	r2, [r0, r3]
	module->status = STATUS_OK;
1000d21e:	3301      	adds	r3, #1
1000d220:	54c2      	strb	r2, [r0, r3]

	if (hw == UART0) {
1000d222:	4b55      	ldr	r3, [pc, #340]	; (1000d378 <uart_init+0x184>)
1000d224:	4299      	cmp	r1, r3
1000d226:	d118      	bne.n	1000d25a <uart_init+0x66>
		system_peripheral_reset(PERIPHERAL_UART0_CORE);
1000d228:	2009      	movs	r0, #9
1000d22a:	4c54      	ldr	r4, [pc, #336]	; (1000d37c <uart_init+0x188>)
1000d22c:	47a0      	blx	r4
		system_peripheral_reset(PERIPHERAL_UART0_IF);
1000d22e:	200a      	movs	r0, #10
1000d230:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART0_CORE);
1000d232:	2009      	movs	r0, #9
1000d234:	4c52      	ldr	r4, [pc, #328]	; (1000d380 <uart_init+0x18c>)
1000d236:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART0_IF);
1000d238:	200a      	movs	r0, #10
1000d23a:	47a0      	blx	r4
		_uart_instances[0] = module;
1000d23c:	4b51      	ldr	r3, [pc, #324]	; (1000d384 <uart_init+0x190>)
1000d23e:	601d      	str	r5, [r3, #0]
		system_register_isr(RAM_ISR_TABLE_UARTRX0_INDEX, (uint32_t)uart_rx0_isr_handler);
1000d240:	4951      	ldr	r1, [pc, #324]	; (1000d388 <uart_init+0x194>)
1000d242:	2010      	movs	r0, #16
1000d244:	4c51      	ldr	r4, [pc, #324]	; (1000d38c <uart_init+0x198>)
1000d246:	47a0      	blx	r4
		system_register_isr(RAM_ISR_TABLE_UARTTX0_INDEX, (uint32_t)uart_tx0_isr_handler);
1000d248:	4951      	ldr	r1, [pc, #324]	; (1000d390 <uart_init+0x19c>)
1000d24a:	2011      	movs	r0, #17
1000d24c:	47a0      	blx	r4
1000d24e:	4b51      	ldr	r3, [pc, #324]	; (1000d394 <uart_init+0x1a0>)
1000d250:	2201      	movs	r2, #1
1000d252:	601a      	str	r2, [r3, #0]
1000d254:	3201      	adds	r2, #1
1000d256:	601a      	str	r2, [r3, #0]
1000d258:	e01a      	b.n	1000d290 <uart_init+0x9c>
		NVIC_EnableIRQ(UART0_RX_IRQn);
		NVIC_EnableIRQ(UART0_TX_IRQn);
	} else if (hw == UART1) {
1000d25a:	4b4f      	ldr	r3, [pc, #316]	; (1000d398 <uart_init+0x1a4>)
1000d25c:	4299      	cmp	r1, r3
1000d25e:	d117      	bne.n	1000d290 <uart_init+0x9c>
		system_peripheral_reset(PERIPHERAL_UART1_CORE);
1000d260:	200b      	movs	r0, #11
1000d262:	4c46      	ldr	r4, [pc, #280]	; (1000d37c <uart_init+0x188>)
1000d264:	47a0      	blx	r4
		system_peripheral_reset(PERIPHERAL_UART1_IF);
1000d266:	200c      	movs	r0, #12
1000d268:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART1_CORE);
1000d26a:	200b      	movs	r0, #11
1000d26c:	4c44      	ldr	r4, [pc, #272]	; (1000d380 <uart_init+0x18c>)
1000d26e:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART1_IF);
1000d270:	200c      	movs	r0, #12
1000d272:	47a0      	blx	r4
		_uart_instances[1] = module;
1000d274:	4b43      	ldr	r3, [pc, #268]	; (1000d384 <uart_init+0x190>)
1000d276:	605d      	str	r5, [r3, #4]
		system_register_isr(RAM_ISR_TABLE_UARTRX1_INDEX, (uint32_t)uart_rx1_isr_handler);
1000d278:	4948      	ldr	r1, [pc, #288]	; (1000d39c <uart_init+0x1a8>)
1000d27a:	2012      	movs	r0, #18
1000d27c:	4c43      	ldr	r4, [pc, #268]	; (1000d38c <uart_init+0x198>)
1000d27e:	47a0      	blx	r4
		system_register_isr(RAM_ISR_TABLE_UARTTX1_INDEX, (uint32_t)uart_tx1_isr_handler);
1000d280:	4947      	ldr	r1, [pc, #284]	; (1000d3a0 <uart_init+0x1ac>)
1000d282:	2013      	movs	r0, #19
1000d284:	47a0      	blx	r4
1000d286:	4b43      	ldr	r3, [pc, #268]	; (1000d394 <uart_init+0x1a0>)
1000d288:	2204      	movs	r2, #4
1000d28a:	601a      	str	r2, [r3, #0]
1000d28c:	3204      	adds	r2, #4
1000d28e:	601a      	str	r2, [r3, #0]
		NVIC_EnableIRQ(UART1_RX_IRQn);
		NVIC_EnableIRQ(UART1_TX_IRQn);
	}

	/* Set the pinmux for this UART module. */
	if(config->flow_control) {
1000d290:	79fb      	ldrb	r3, [r7, #7]
		index = 4;
1000d292:	2204      	movs	r2, #4
1000d294:	4690      	mov	r8, r2
		NVIC_EnableIRQ(UART1_RX_IRQn);
		NVIC_EnableIRQ(UART1_TX_IRQn);
	}

	/* Set the pinmux for this UART module. */
	if(config->flow_control) {
1000d296:	2b00      	cmp	r3, #0
1000d298:	d152      	bne.n	1000d340 <uart_init+0x14c>
		index = 4;
	} else {
		index = 2;
1000d29a:	3302      	adds	r3, #2
1000d29c:	4698      	mov	r8, r3
1000d29e:	e04f      	b.n	1000d340 <uart_init+0x14c>
#if (BTLC1000)
    index = 2;  /* BTLC1000 has no flow control function. */
#endif

	for(i = 0; i < index; i++) {
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
1000d2a0:	8a31      	ldrh	r1, [r6, #16]
1000d2a2:	ce01      	ldmia	r6!, {r0}
1000d2a4:	b2c0      	uxtb	r0, r0
1000d2a6:	47c8      	blx	r9

#if (BTLC1000)
    index = 2;  /* BTLC1000 has no flow control function. */
#endif

	for(i = 0; i < index; i++) {
1000d2a8:	3401      	adds	r4, #1
1000d2aa:	b2e4      	uxtb	r4, r4
1000d2ac:	4544      	cmp	r4, r8
1000d2ae:	d3f7      	bcc.n	1000d2a0 <uart_init+0xac>
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
								(uint16_t)(config->pinmux_sel_pad[i]));
	}

	/* empty UART FIFO */
	while (module->hw->RECEIVE_STATUS.reg & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1000d2b0:	682b      	ldr	r3, [r5, #0]
1000d2b2:	7d1a      	ldrb	r2, [r3, #20]
1000d2b4:	07d2      	lsls	r2, r2, #31
1000d2b6:	d504      	bpl.n	1000d2c2 <uart_init+0xce>
1000d2b8:	2101      	movs	r1, #1
		i = module->hw->RECEIVE_DATA.reg;
1000d2ba:	7c1a      	ldrb	r2, [r3, #16]
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
								(uint16_t)(config->pinmux_sel_pad[i]));
	}

	/* empty UART FIFO */
	while (module->hw->RECEIVE_STATUS.reg & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1000d2bc:	7d1a      	ldrb	r2, [r3, #20]
1000d2be:	420a      	tst	r2, r1
1000d2c0:	d1fb      	bne.n	1000d2ba <uart_init+0xc6>
		i = module->hw->RECEIVE_DATA.reg;
	}
	
	/* reset configuration register */
	module->hw->UART_CONFIGURATION.reg = 0;
1000d2c2:	2100      	movs	r1, #0
1000d2c4:	2220      	movs	r2, #32
1000d2c6:	5499      	strb	r1, [r3, r2]

	/* program the uart configuration. */
	if(config->flow_control) {
1000d2c8:	79fb      	ldrb	r3, [r7, #7]
		config_temp |= UART_CONFIGURATION_CTS_ENABLE_1;
1000d2ca:	1e59      	subs	r1, r3, #1
1000d2cc:	418b      	sbcs	r3, r1
1000d2ce:	0159      	lsls	r1, r3, #5
	}
	config_temp |= config->data_bits;
	config_temp |= config->stop_bits;
1000d2d0:	793b      	ldrb	r3, [r7, #4]
1000d2d2:	797a      	ldrb	r2, [r7, #5]
1000d2d4:	4313      	orrs	r3, r2
1000d2d6:	430b      	orrs	r3, r1
	switch(config->parity) {
1000d2d8:	79ba      	ldrb	r2, [r7, #6]
1000d2da:	2a02      	cmp	r2, #2
1000d2dc:	d00d      	beq.n	1000d2fa <uart_init+0x106>
1000d2de:	b2d1      	uxtb	r1, r2
1000d2e0:	2902      	cmp	r1, #2
1000d2e2:	d802      	bhi.n	1000d2ea <uart_init+0xf6>
1000d2e4:	2a01      	cmp	r2, #1
1000d2e6:	d005      	beq.n	1000d2f4 <uart_init+0x100>
1000d2e8:	e00f      	b.n	1000d30a <uart_init+0x116>
1000d2ea:	2a03      	cmp	r2, #3
1000d2ec:	d008      	beq.n	1000d300 <uart_init+0x10c>
1000d2ee:	2a04      	cmp	r2, #4
1000d2f0:	d009      	beq.n	1000d306 <uart_init+0x112>
1000d2f2:	e00a      	b.n	1000d30a <uart_init+0x116>
		case UART_NO_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_0;
			break;

		case UART_EVEN_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_1;
1000d2f4:	2202      	movs	r2, #2
1000d2f6:	4313      	orrs	r3, r2
			config_temp |= UART_CONFIGURATION_PARITY_MODE_0;
			break;
1000d2f8:	e007      	b.n	1000d30a <uart_init+0x116>

		case UART_ODD_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_1;
			config_temp |= UART_CONFIGURATION_PARITY_MODE_1;
1000d2fa:	2206      	movs	r2, #6
1000d2fc:	4313      	orrs	r3, r2
			break;
1000d2fe:	e004      	b.n	1000d30a <uart_init+0x116>

		case UART_SPACE_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_1;
			config_temp |= UART_CONFIGURATION_PARITY_MODE_2;
1000d300:	220a      	movs	r2, #10
1000d302:	4313      	orrs	r3, r2
			break;
1000d304:	e001      	b.n	1000d30a <uart_init+0x116>

		case UART_MARK_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_1;
			config_temp |= UART_CONFIGURATION_PARITY_MODE_3;
1000d306:	220e      	movs	r2, #14
1000d308:	4313      	orrs	r3, r2
			break;

		default:
			break;
	}	
	module->hw->UART_CONFIGURATION.reg = config_temp;
1000d30a:	2220      	movs	r2, #32
1000d30c:	6829      	ldr	r1, [r5, #0]
1000d30e:	548b      	strb	r3, [r1, r2]

	/* Calculate the baud rate. */
	uart_set_baudrate(module, config->baud_rate);
1000d310:	683e      	ldr	r6, [r7, #0]
	uint16_t integerpart = 0;
	uint8_t fractionalpart = 0;
	uint32_t diff;
	uint8_t i = 0;

	clock = system_clock_get_value();
1000d312:	4b24      	ldr	r3, [pc, #144]	; (1000d3a4 <uart_init+0x1b0>)
1000d314:	4798      	blx	r3
1000d316:	0004      	movs	r4, r0
	integerpart = clock / baud_rate;
1000d318:	0031      	movs	r1, r6
1000d31a:	4b23      	ldr	r3, [pc, #140]	; (1000d3a8 <uart_init+0x1b4>)
1000d31c:	4798      	blx	r3
1000d31e:	b282      	uxth	r2, r0
	diff = clock - (baud_rate * integerpart);
1000d320:	0400      	lsls	r0, r0, #16
1000d322:	0c00      	lsrs	r0, r0, #16
1000d324:	4370      	muls	r0, r6
1000d326:	1a20      	subs	r0, r4, r0
	i = 0;
	while(diff > (baud_rate / 16)) {
1000d328:	0931      	lsrs	r1, r6, #4
1000d32a:	4288      	cmp	r0, r1
1000d32c:	d906      	bls.n	1000d33c <uart_init+0x148>
1000d32e:	2300      	movs	r3, #0
		i++;
1000d330:	3301      	adds	r3, #1
1000d332:	b2db      	uxtb	r3, r3
		diff -= (baud_rate / 16);
1000d334:	1a40      	subs	r0, r0, r1

	clock = system_clock_get_value();
	integerpart = clock / baud_rate;
	diff = clock - (baud_rate * integerpart);
	i = 0;
	while(diff > (baud_rate / 16)) {
1000d336:	4288      	cmp	r0, r1
1000d338:	d8fa      	bhi.n	1000d330 <uart_init+0x13c>
1000d33a:	e007      	b.n	1000d34c <uart_init+0x158>
	uint8_t i = 0;

	clock = system_clock_get_value();
	integerpart = clock / baud_rate;
	diff = clock - (baud_rate * integerpart);
	i = 0;
1000d33c:	2300      	movs	r3, #0
1000d33e:	e005      	b.n	1000d34c <uart_init+0x158>
1000d340:	003e      	movs	r6, r7
1000d342:	3608      	adds	r6, #8
 *
 * \retval STATUS_OK                       The initialization was successful
 */
enum status_code uart_init(struct uart_module *const module, Uart * const hw,
		const struct uart_config *const config)
{
1000d344:	2400      	movs	r4, #0
#if (BTLC1000)
    index = 2;  /* BTLC1000 has no flow control function. */
#endif

	for(i = 0; i < index; i++) {
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
1000d346:	4b19      	ldr	r3, [pc, #100]	; (1000d3ac <uart_init+0x1b8>)
1000d348:	4699      	mov	r9, r3
1000d34a:	e7a9      	b.n	1000d2a0 <uart_init+0xac>
		i++;
		diff -= (baud_rate / 16);
	}
	fractionalpart = (i + 1) / 2;

	module->hw->UART_CLOCK_SOURCE.reg = UART_CLOCK_SOURCE_CLOCK_SELECT_0;
1000d34c:	2100      	movs	r1, #0
1000d34e:	2028      	movs	r0, #40	; 0x28
1000d350:	682c      	ldr	r4, [r5, #0]
1000d352:	5421      	strb	r1, [r4, r0]
	module->hw->UART_BAUD_RATE.reg =
1000d354:	3301      	adds	r3, #1
1000d356:	071b      	lsls	r3, r3, #28
1000d358:	0f5b      	lsrs	r3, r3, #29
1000d35a:	00d2      	lsls	r2, r2, #3
1000d35c:	4313      	orrs	r3, r2
1000d35e:	b29b      	uxth	r3, r3
1000d360:	682a      	ldr	r2, [r5, #0]
1000d362:	8493      	strh	r3, [r2, #36]	; 0x24
	module->hw->UART_CONFIGURATION.reg = config_temp;

	/* Calculate the baud rate. */
	uart_set_baudrate(module, config->baud_rate);

	module->hw->RX_INTERRUPT_MASK.reg = 0;	// disable int at initialization, enable it at read time
1000d364:	682b      	ldr	r3, [r5, #0]
1000d366:	7619      	strb	r1, [r3, #24]
	module->hw->TX_INTERRUPT_MASK.reg = 0;	// disable int at initialization, enable it at write time
1000d368:	682b      	ldr	r3, [r5, #0]
1000d36a:	7219      	strb	r1, [r3, #8]
	
	return STATUS_OK;
}
1000d36c:	2000      	movs	r0, #0
1000d36e:	bc0c      	pop	{r2, r3}
1000d370:	4690      	mov	r8, r2
1000d372:	4699      	mov	r9, r3
1000d374:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000d376:	46c0      	nop			; (mov r8, r8)
1000d378:	40004000 	.word	0x40004000
1000d37c:	1000cb29 	.word	0x1000cb29
1000d380:	1000c461 	.word	0x1000c461
1000d384:	10019fb8 	.word	0x10019fb8
1000d388:	1000cfa1 	.word	0x1000cfa1
1000d38c:	1000cf91 	.word	0x1000cf91
1000d390:	1000d029 	.word	0x1000d029
1000d394:	e000e100 	.word	0xe000e100
1000d398:	40005000 	.word	0x40005000
1000d39c:	1000d0b5 	.word	0x1000d0b5
1000d3a0:	1000d13d 	.word	0x1000d13d
1000d3a4:	1000c455 	.word	0x1000c455
1000d3a8:	10012d65 	.word	0x10012d65
1000d3ac:	1000c0b1 	.word	0x1000c0b1

1000d3b0 <uart_write_wait>:
* \retval STATUS_OK         If the operation was completed
*/
enum status_code uart_write_wait(struct uart_module *const module,
		const uint8_t tx_data)
{
	while (!(module->hw->TRANSMIT_STATUS.reg & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL));
1000d3b0:	6802      	ldr	r2, [r0, #0]
1000d3b2:	2001      	movs	r0, #1
1000d3b4:	7913      	ldrb	r3, [r2, #4]
1000d3b6:	4203      	tst	r3, r0
1000d3b8:	d0fc      	beq.n	1000d3b4 <uart_write_wait+0x4>

	module->hw->TRANSMIT_DATA.reg = tx_data;
1000d3ba:	7011      	strb	r1, [r2, #0]
	
	return STATUS_OK;
}
1000d3bc:	2000      	movs	r0, #0
1000d3be:	4770      	bx	lr

1000d3c0 <uart_read_wait>:
* \retval STATUS_OK                If the operation was completed
*/
enum status_code uart_read_wait(struct uart_module *const module,
		uint8_t *const rx_data)
{
	while (!(module->hw->RECEIVE_STATUS.reg & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY));
1000d3c0:	6802      	ldr	r2, [r0, #0]
1000d3c2:	2001      	movs	r0, #1
1000d3c4:	7d13      	ldrb	r3, [r2, #20]
1000d3c6:	4203      	tst	r3, r0
1000d3c8:	d0fc      	beq.n	1000d3c4 <uart_read_wait+0x4>

	*rx_data = module->hw->RECEIVE_DATA.reg;
1000d3ca:	7c13      	ldrb	r3, [r2, #16]
1000d3cc:	700b      	strb	r3, [r1, #0]
	
	return STATUS_OK;
}
1000d3ce:	2000      	movs	r0, #0
1000d3d0:	4770      	bx	lr
1000d3d2:	46c0      	nop			; (mov r8, r8)

1000d3d4 <uart_read_buffer_job>:
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
1000d3d4:	2317      	movs	r3, #23
{
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
1000d3d6:	2a00      	cmp	r2, #0
1000d3d8:	d00d      	beq.n	1000d3f6 <uart_read_buffer_job+0x22>
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check if the UART is busy transmitting or slave waiting for TXC*/
	if (module->status == STATUS_BUSY) {
1000d3da:	330b      	adds	r3, #11
1000d3dc:	5cc3      	ldrb	r3, [r0, r3]
1000d3de:	b2db      	uxtb	r3, r3
1000d3e0:	2b05      	cmp	r3, #5
1000d3e2:	d008      	beq.n	1000d3f6 <uart_read_buffer_job+0x22>
	Assert(module);
	Assert(rx_data);

	/* Set length for the buffer and the pointer, and let
	 * the interrupt handler do the rest */
	module->remaining_rx_buffer_length = length;
1000d3e4:	8382      	strh	r2, [r0, #28]
	module->rx_buffer_ptr = rx_data;
1000d3e6:	6141      	str	r1, [r0, #20]
	module->status = STATUS_BUSY;
1000d3e8:	2205      	movs	r2, #5
1000d3ea:	2322      	movs	r3, #34	; 0x22
1000d3ec:	54c2      	strb	r2, [r0, r3]

	module->hw->RX_INTERRUPT_MASK.reg = UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK;
1000d3ee:	6803      	ldr	r3, [r0, #0]
1000d3f0:	3a04      	subs	r2, #4
1000d3f2:	761a      	strb	r2, [r3, #24]
		return STATUS_BUSY;
	}

	/* Issue internal read */
	_uart_read_buffer(module, rx_data, length);
	return STATUS_OK;
1000d3f4:	2300      	movs	r3, #0
}
1000d3f6:	0018      	movs	r0, r3
1000d3f8:	4770      	bx	lr
1000d3fa:	46c0      	nop			; (mov r8, r8)

1000d3fc <uart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
1000d3fc:	0093      	lsls	r3, r2, #2
1000d3fe:	18c3      	adds	r3, r0, r3
1000d400:	6059      	str	r1, [r3, #4]
	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
1000d402:	2120      	movs	r1, #32
1000d404:	2301      	movs	r3, #1
1000d406:	4093      	lsls	r3, r2
1000d408:	5c42      	ldrb	r2, [r0, r1]
1000d40a:	4313      	orrs	r3, r2
1000d40c:	5443      	strb	r3, [r0, r1]
}
1000d40e:	4770      	bx	lr

1000d410 <uart_enable_callback>:
 * \param[in]  module         Pointer to UART software instance struct
 * \param[in]  callback_type  Callback type given by an enum
 */
void uart_enable_callback(struct uart_module *const module,
		enum uart_callback callback_type)
{
1000d410:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
1000d412:	2221      	movs	r2, #33	; 0x21
1000d414:	2301      	movs	r3, #1
1000d416:	408b      	lsls	r3, r1
1000d418:	5c84      	ldrb	r4, [r0, r2]
1000d41a:	4323      	orrs	r3, r4
1000d41c:	5483      	strb	r3, [r0, r2]

	if (callback_type == UART_CTS_ACTIVE) {
1000d41e:	2901      	cmp	r1, #1
1000d420:	d104      	bne.n	1000d42c <uart_enable_callback+0x1c>
		module->hw->TX_INTERRUPT_MASK.reg |= UART_TX_INTERRUPT_MASK_CTS_ACTIVE_MASK;
1000d422:	6802      	ldr	r2, [r0, #0]
1000d424:	7a11      	ldrb	r1, [r2, #8]
1000d426:	2320      	movs	r3, #32
1000d428:	430b      	orrs	r3, r1
1000d42a:	7213      	strb	r3, [r2, #8]
	}
}
1000d42c:	bd10      	pop	{r4, pc}
1000d42e:	46c0      	nop			; (mov r8, r8)

1000d430 <uart_disable_callback>:
 * \param[in]  module         Pointer to UART software instance struct
 * \param[in]  callback_type  Callback type given by an enum
 */
void uart_disable_callback(struct uart_module *const module,
		enum uart_callback callback_type)
{
1000d430:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);

	/* Disable callback */
	module->callback_enable_mask &= ~(1 << callback_type);
1000d432:	2201      	movs	r2, #1
1000d434:	408a      	lsls	r2, r1
1000d436:	2421      	movs	r4, #33	; 0x21
1000d438:	5d03      	ldrb	r3, [r0, r4]
1000d43a:	4393      	bics	r3, r2
1000d43c:	5503      	strb	r3, [r0, r4]

	if (callback_type == UART_CTS_ACTIVE) {
1000d43e:	2901      	cmp	r1, #1
1000d440:	d104      	bne.n	1000d44c <uart_disable_callback+0x1c>
		module->hw->TX_INTERRUPT_MASK.reg &= ~UART_TX_INTERRUPT_MASK_CTS_ACTIVE_MASK;
1000d442:	6802      	ldr	r2, [r0, #0]
1000d444:	7a13      	ldrb	r3, [r2, #8]
1000d446:	311f      	adds	r1, #31
1000d448:	438b      	bics	r3, r1
1000d44a:	7213      	strb	r3, [r2, #8]
	}

}
1000d44c:	bd10      	pop	{r4, pc}
1000d44e:	46c0      	nop			; (mov r8, r8)

1000d450 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
1000d450:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d452:	4647      	mov	r7, r8
1000d454:	b480      	push	{r7}
1000d456:	000c      	movs	r4, r1
1000d458:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
1000d45a:	2800      	cmp	r0, #0
1000d45c:	d10d      	bne.n	1000d47a <_read+0x2a>
		return -1;
	}

	for (; len > 0; --len) {
1000d45e:	2a00      	cmp	r2, #0
1000d460:	dd0e      	ble.n	1000d480 <_read+0x30>
1000d462:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
1000d464:	4e08      	ldr	r6, [pc, #32]	; (1000d488 <_read+0x38>)
1000d466:	4d09      	ldr	r5, [pc, #36]	; (1000d48c <_read+0x3c>)
1000d468:	6830      	ldr	r0, [r6, #0]
1000d46a:	0021      	movs	r1, r4
1000d46c:	682b      	ldr	r3, [r5, #0]
1000d46e:	4798      	blx	r3
		ptr++;
1000d470:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
1000d472:	42a7      	cmp	r7, r4
1000d474:	d1f8      	bne.n	1000d468 <_read+0x18>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
1000d476:	4640      	mov	r0, r8
1000d478:	e003      	b.n	1000d482 <_read+0x32>
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
1000d47a:	2001      	movs	r0, #1
1000d47c:	4240      	negs	r0, r0
1000d47e:	e000      	b.n	1000d482 <_read+0x32>
	}

	for (; len > 0; --len) {
1000d480:	2000      	movs	r0, #0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
1000d482:	bc04      	pop	{r2}
1000d484:	4690      	mov	r8, r2
1000d486:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d488:	10019fc8 	.word	0x10019fc8
1000d48c:	10019fc0 	.word	0x10019fc0

1000d490 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
1000d490:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d492:	4647      	mov	r7, r8
1000d494:	b480      	push	{r7}
1000d496:	000e      	movs	r6, r1
1000d498:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
1000d49a:	3801      	subs	r0, #1
1000d49c:	2802      	cmp	r0, #2
1000d49e:	d811      	bhi.n	1000d4c4 <_write+0x34>
		return -1;
	}

	for (; len != 0; --len) {
1000d4a0:	2a00      	cmp	r2, #0
1000d4a2:	d012      	beq.n	1000d4ca <_write+0x3a>
1000d4a4:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
1000d4a6:	4b0c      	ldr	r3, [pc, #48]	; (1000d4d8 <_write+0x48>)
1000d4a8:	4698      	mov	r8, r3
1000d4aa:	4f0c      	ldr	r7, [pc, #48]	; (1000d4dc <_write+0x4c>)
1000d4ac:	4643      	mov	r3, r8
1000d4ae:	6818      	ldr	r0, [r3, #0]
1000d4b0:	5d31      	ldrb	r1, [r6, r4]
1000d4b2:	683b      	ldr	r3, [r7, #0]
1000d4b4:	4798      	blx	r3
1000d4b6:	2800      	cmp	r0, #0
1000d4b8:	db09      	blt.n	1000d4ce <_write+0x3e>
			return -1;
		}
		++nChars;
1000d4ba:	3401      	adds	r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
1000d4bc:	42a5      	cmp	r5, r4
1000d4be:	d1f5      	bne.n	1000d4ac <_write+0x1c>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
1000d4c0:	0020      	movs	r0, r4
1000d4c2:	e006      	b.n	1000d4d2 <_write+0x42>
_write (int file, char * ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
1000d4c4:	2001      	movs	r0, #1
1000d4c6:	4240      	negs	r0, r0
1000d4c8:	e003      	b.n	1000d4d2 <_write+0x42>
	}

	for (; len != 0; --len) {
1000d4ca:	2000      	movs	r0, #0
1000d4cc:	e001      	b.n	1000d4d2 <_write+0x42>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
1000d4ce:	2001      	movs	r0, #1
1000d4d0:	4240      	negs	r0, r0
		}
		++nChars;
	}
	return nChars;
}
1000d4d2:	bc04      	pop	{r2}
1000d4d4:	4690      	mov	r8, r2
1000d4d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d4d8:	10019fc8 	.word	0x10019fc8
1000d4dc:	10019fc4 	.word	0x10019fc4

1000d4e0 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
1000d4e0:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
1000d4e2:	4a06      	ldr	r2, [pc, #24]	; (1000d4fc <_sbrk+0x1c>)
1000d4e4:	6812      	ldr	r2, [r2, #0]
1000d4e6:	2a00      	cmp	r2, #0
1000d4e8:	d102      	bne.n	1000d4f0 <_sbrk+0x10>
		heap = (unsigned char *)&_end;
1000d4ea:	4905      	ldr	r1, [pc, #20]	; (1000d500 <_sbrk+0x20>)
1000d4ec:	4a03      	ldr	r2, [pc, #12]	; (1000d4fc <_sbrk+0x1c>)
1000d4ee:	6011      	str	r1, [r2, #0]
	}
	prev_heap = heap;
1000d4f0:	4a02      	ldr	r2, [pc, #8]	; (1000d4fc <_sbrk+0x1c>)
1000d4f2:	6810      	ldr	r0, [r2, #0]

	heap += incr;
1000d4f4:	18c3      	adds	r3, r0, r3
1000d4f6:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
1000d4f8:	4770      	bx	lr
1000d4fa:	46c0      	nop			; (mov r8, r8)
1000d4fc:	10018268 	.word	0x10018268
1000d500:	1001c8d0 	.word	0x1001c8d0

1000d504 <_close>:
}

extern int _close(int file)
{
	return -1;
}
1000d504:	2001      	movs	r0, #1
1000d506:	4240      	negs	r0, r0
1000d508:	4770      	bx	lr
1000d50a:	46c0      	nop			; (mov r8, r8)

1000d50c <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
1000d50c:	2380      	movs	r3, #128	; 0x80
1000d50e:	019b      	lsls	r3, r3, #6
1000d510:	604b      	str	r3, [r1, #4]

	return 0;
}
1000d512:	2000      	movs	r0, #0
1000d514:	4770      	bx	lr
1000d516:	46c0      	nop			; (mov r8, r8)

1000d518 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
1000d518:	2001      	movs	r0, #1
1000d51a:	4770      	bx	lr

1000d51c <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
1000d51c:	2000      	movs	r0, #0
1000d51e:	4770      	bx	lr

1000d520 <ble_undefined_event_handler>:
	}
	return status;
}

at_ble_status_t ble_undefined_event_handler(void *params)
{
1000d520:	b510      	push	{r4, lr}
	DBG_LOG_DEV("Undefined Event Received");
1000d522:	4804      	ldr	r0, [pc, #16]	; (1000d534 <ble_undefined_event_handler+0x14>)
1000d524:	4b04      	ldr	r3, [pc, #16]	; (1000d538 <ble_undefined_event_handler+0x18>)
1000d526:	4798      	blx	r3
1000d528:	4804      	ldr	r0, [pc, #16]	; (1000d53c <ble_undefined_event_handler+0x1c>)
1000d52a:	4b05      	ldr	r3, [pc, #20]	; (1000d540 <ble_undefined_event_handler+0x20>)
1000d52c:	4798      	blx	r3
    ALL_UNUSED(params);
	return AT_BLE_SUCCESS;
}
1000d52e:	2000      	movs	r0, #0
1000d530:	bd10      	pop	{r4, pc}
1000d532:	46c0      	nop			; (mov r8, r8)
1000d534:	10016278 	.word	0x10016278
1000d538:	100150d1 	.word	0x100150d1
1000d53c:	10017430 	.word	0x10017430
1000d540:	10014fb1 	.word	0x10014fb1

1000d544 <ble_scan_report_handler>:
	}
}

/** @brief function handles scan report */
at_ble_status_t ble_scan_report_handler(void *params)
{
1000d544:	b510      	push	{r4, lr}
	at_ble_scan_report_t *scan_report;
	scan_report = (at_ble_scan_report_t *)params;
	if (scan_report->status == AT_BLE_SUCCESS)
1000d546:	7800      	ldrb	r0, [r0, #0]
1000d548:	2800      	cmp	r0, #0
1000d54a:	d006      	beq.n	1000d55a <ble_scan_report_handler+0x16>
		/* All scan data should be handled */
		return AT_BLE_SUCCESS;
	}
	else
	{
		DBG_LOG("Scanning  failed");
1000d54c:	4803      	ldr	r0, [pc, #12]	; (1000d55c <ble_scan_report_handler+0x18>)
1000d54e:	4b04      	ldr	r3, [pc, #16]	; (1000d560 <ble_scan_report_handler+0x1c>)
1000d550:	4798      	blx	r3
1000d552:	4804      	ldr	r0, [pc, #16]	; (1000d564 <ble_scan_report_handler+0x20>)
1000d554:	4b04      	ldr	r3, [pc, #16]	; (1000d568 <ble_scan_report_handler+0x24>)
1000d556:	4798      	blx	r3
	}
	return AT_BLE_FAILURE;
1000d558:	20e2      	movs	r0, #226	; 0xe2
}
1000d55a:	bd10      	pop	{r4, pc}
1000d55c:	10016278 	.word	0x10016278
1000d560:	100150d1 	.word	0x100150d1
1000d564:	1001744c 	.word	0x1001744c
1000d568:	10014fb1 	.word	0x10014fb1

1000d56c <ble_adv_report_handler>:

/** @brief function handles advertising report */
at_ble_status_t ble_adv_report_handler(void *params)
{
1000d56c:	b510      	push	{r4, lr}
    at_ble_adv_report_t *adv_report;
    adv_report = (at_ble_adv_report_t *)params;
    if(adv_report->status == AT_BLE_SUCCESS)
1000d56e:	7800      	ldrb	r0, [r0, #0]
1000d570:	2800      	cmp	r0, #0
1000d572:	d006      	beq.n	1000d582 <ble_adv_report_handler+0x16>
    {
        return AT_BLE_SUCCESS;
    }
    else 
    {
        DBG_LOG("Advertising failed");
1000d574:	4803      	ldr	r0, [pc, #12]	; (1000d584 <ble_adv_report_handler+0x18>)
1000d576:	4b04      	ldr	r3, [pc, #16]	; (1000d588 <ble_adv_report_handler+0x1c>)
1000d578:	4798      	blx	r3
1000d57a:	4804      	ldr	r0, [pc, #16]	; (1000d58c <ble_adv_report_handler+0x20>)
1000d57c:	4b04      	ldr	r3, [pc, #16]	; (1000d590 <ble_adv_report_handler+0x24>)
1000d57e:	4798      	blx	r3
    }
    return AT_BLE_FAILURE;
1000d580:	20e2      	movs	r0, #226	; 0xe2
}
1000d582:	bd10      	pop	{r4, pc}
1000d584:	10016278 	.word	0x10016278
1000d588:	100150d1 	.word	0x100150d1
1000d58c:	10017460 	.word	0x10017460
1000d590:	10014fb1 	.word	0x10014fb1

1000d594 <ble_mtu_changed_indication_handler>:
	return AT_BLE_SUCCESS;
	
}

at_ble_status_t ble_mtu_changed_indication_handler(void *params)
{
1000d594:	b510      	push	{r4, lr}
1000d596:	0004      	movs	r4, r0
	at_ble_mtu_changed_ind_t *mtu_changed_ind;
	mtu_changed_ind = (at_ble_mtu_changed_ind_t *)params;
	DBG_LOG_DEV("BLE-MTU Changed, Connection Handle: %d, New Value: %d", 
1000d598:	4804      	ldr	r0, [pc, #16]	; (1000d5ac <ble_mtu_changed_indication_handler+0x18>)
1000d59a:	4b05      	ldr	r3, [pc, #20]	; (1000d5b0 <ble_mtu_changed_indication_handler+0x1c>)
1000d59c:	4798      	blx	r3
1000d59e:	8862      	ldrh	r2, [r4, #2]
1000d5a0:	8821      	ldrh	r1, [r4, #0]
1000d5a2:	4804      	ldr	r0, [pc, #16]	; (1000d5b4 <ble_mtu_changed_indication_handler+0x20>)
1000d5a4:	4b04      	ldr	r3, [pc, #16]	; (1000d5b8 <ble_mtu_changed_indication_handler+0x24>)
1000d5a6:	4798      	blx	r3
										mtu_changed_ind->conhdl, 
										mtu_changed_ind->mtu_value);
	return AT_BLE_SUCCESS;
}
1000d5a8:	2000      	movs	r0, #0
1000d5aa:	bd10      	pop	{r4, pc}
1000d5ac:	10016278 	.word	0x10016278
1000d5b0:	100150d1 	.word	0x100150d1
1000d5b4:	10017474 	.word	0x10017474
1000d5b8:	10014fb1 	.word	0x10014fb1

1000d5bc <ble_mtu_changed_cmd_complete_handler>:

at_ble_status_t ble_mtu_changed_cmd_complete_handler(void *params)
{
1000d5bc:	b570      	push	{r4, r5, r6, lr}
1000d5be:	0004      	movs	r4, r0
	at_ble_cmd_complete_event_t *cmd_complete_event;
	cmd_complete_event = (at_ble_cmd_complete_event_t *)params;
	
	if (cmd_complete_event->status == AT_BLE_SUCCESS)
1000d5c0:	78c5      	ldrb	r5, [r0, #3]
1000d5c2:	2d00      	cmp	r5, #0
1000d5c4:	d108      	bne.n	1000d5d8 <ble_mtu_changed_cmd_complete_handler+0x1c>
	{
		DBG_LOG_DEV("MTU Changed, Connection Handle:%d, Operation:%d", 
1000d5c6:	480a      	ldr	r0, [pc, #40]	; (1000d5f0 <ble_mtu_changed_cmd_complete_handler+0x34>)
1000d5c8:	4b0a      	ldr	r3, [pc, #40]	; (1000d5f4 <ble_mtu_changed_cmd_complete_handler+0x38>)
1000d5ca:	4798      	blx	r3
1000d5cc:	78a2      	ldrb	r2, [r4, #2]
1000d5ce:	8821      	ldrh	r1, [r4, #0]
1000d5d0:	4809      	ldr	r0, [pc, #36]	; (1000d5f8 <ble_mtu_changed_cmd_complete_handler+0x3c>)
1000d5d2:	4b0a      	ldr	r3, [pc, #40]	; (1000d5fc <ble_mtu_changed_cmd_complete_handler+0x40>)
1000d5d4:	4798      	blx	r3
		cmd_complete_event->conn_handle, 
		cmd_complete_event->operation);
		return AT_BLE_SUCCESS;
1000d5d6:	e008      	b.n	1000d5ea <ble_mtu_changed_cmd_complete_handler+0x2e>
	}
	else
	{
		DBG_LOG("MTU Change Failed, Connection Handle:%d, Operation:%d",
1000d5d8:	4805      	ldr	r0, [pc, #20]	; (1000d5f0 <ble_mtu_changed_cmd_complete_handler+0x34>)
1000d5da:	4b06      	ldr	r3, [pc, #24]	; (1000d5f4 <ble_mtu_changed_cmd_complete_handler+0x38>)
1000d5dc:	4798      	blx	r3
1000d5de:	78a2      	ldrb	r2, [r4, #2]
1000d5e0:	8821      	ldrh	r1, [r4, #0]
1000d5e2:	4807      	ldr	r0, [pc, #28]	; (1000d600 <ble_mtu_changed_cmd_complete_handler+0x44>)
1000d5e4:	4b05      	ldr	r3, [pc, #20]	; (1000d5fc <ble_mtu_changed_cmd_complete_handler+0x40>)
1000d5e6:	4798      	blx	r3
		cmd_complete_event->conn_handle,
		cmd_complete_event->operation);
	}
	return AT_BLE_FAILURE;
1000d5e8:	25e2      	movs	r5, #226	; 0xe2
}
1000d5ea:	0028      	movs	r0, r5
1000d5ec:	bd70      	pop	{r4, r5, r6, pc}
1000d5ee:	46c0      	nop			; (mov r8, r8)
1000d5f0:	10016278 	.word	0x10016278
1000d5f4:	100150d1 	.word	0x100150d1
1000d5f8:	100174ac 	.word	0x100174ac
1000d5fc:	10014fb1 	.word	0x10014fb1
1000d600:	100174dc 	.word	0x100174dc

1000d604 <ble_characteristic_write_cmd_complete_handler>:

at_ble_status_t ble_characteristic_write_cmd_complete_handler(void *params)
{
1000d604:	b570      	push	{r4, r5, r6, lr}
1000d606:	0004      	movs	r4, r0
	at_ble_cmd_complete_event_t *cmd_complete_event;
	cmd_complete_event = (at_ble_cmd_complete_event_t *)params;
	if (cmd_complete_event->status == AT_BLE_SUCCESS)
1000d608:	78c5      	ldrb	r5, [r0, #3]
1000d60a:	2d00      	cmp	r5, #0
1000d60c:	d108      	bne.n	1000d620 <ble_characteristic_write_cmd_complete_handler+0x1c>
	{
		DBG_LOG_DEV("Char Write Cmd Complete, Connection Handle:%d, Operation:%d",
1000d60e:	480a      	ldr	r0, [pc, #40]	; (1000d638 <ble_characteristic_write_cmd_complete_handler+0x34>)
1000d610:	4b0a      	ldr	r3, [pc, #40]	; (1000d63c <ble_characteristic_write_cmd_complete_handler+0x38>)
1000d612:	4798      	blx	r3
1000d614:	78a2      	ldrb	r2, [r4, #2]
1000d616:	8821      	ldrh	r1, [r4, #0]
1000d618:	4809      	ldr	r0, [pc, #36]	; (1000d640 <ble_characteristic_write_cmd_complete_handler+0x3c>)
1000d61a:	4b0a      	ldr	r3, [pc, #40]	; (1000d644 <ble_characteristic_write_cmd_complete_handler+0x40>)
1000d61c:	4798      	blx	r3
		cmd_complete_event->conn_handle,
		cmd_complete_event->operation);
		return AT_BLE_SUCCESS;
1000d61e:	e008      	b.n	1000d632 <ble_characteristic_write_cmd_complete_handler+0x2e>
	}
	else
	{
		DBG_LOG_DEV("Char Write Cmd Failed, Connection Handle:%d, Operation:%d",
1000d620:	4805      	ldr	r0, [pc, #20]	; (1000d638 <ble_characteristic_write_cmd_complete_handler+0x34>)
1000d622:	4b06      	ldr	r3, [pc, #24]	; (1000d63c <ble_characteristic_write_cmd_complete_handler+0x38>)
1000d624:	4798      	blx	r3
1000d626:	78a2      	ldrb	r2, [r4, #2]
1000d628:	8821      	ldrh	r1, [r4, #0]
1000d62a:	4807      	ldr	r0, [pc, #28]	; (1000d648 <ble_characteristic_write_cmd_complete_handler+0x44>)
1000d62c:	4b05      	ldr	r3, [pc, #20]	; (1000d644 <ble_characteristic_write_cmd_complete_handler+0x40>)
1000d62e:	4798      	blx	r3
		cmd_complete_event->conn_handle,
		cmd_complete_event->operation);
	}
	return AT_BLE_FAILURE;
1000d630:	25e2      	movs	r5, #226	; 0xe2
}
1000d632:	0028      	movs	r0, r5
1000d634:	bd70      	pop	{r4, r5, r6, pc}
1000d636:	46c0      	nop			; (mov r8, r8)
1000d638:	10016278 	.word	0x10016278
1000d63c:	100150d1 	.word	0x100150d1
1000d640:	10017514 	.word	0x10017514
1000d644:	10014fb1 	.word	0x10014fb1
1000d648:	10017550 	.word	0x10017550

1000d64c <ble_disconnected_state_handler>:

/** @brief function handles disconnection event received from stack */
at_ble_status_t ble_disconnected_state_handler(void *params)
{
1000d64c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000d64e:	0006      	movs	r6, r0
1000d650:	4c1d      	ldr	r4, [pc, #116]	; (1000d6c8 <ble_disconnected_state_handler+0x7c>)
1000d652:	239b      	movs	r3, #155	; 0x9b
1000d654:	009b      	lsls	r3, r3, #2
1000d656:	18e7      	adds	r7, r4, r3
1000d658:	0025      	movs	r5, r4
	uint8_t idx;
	disconnect = (at_ble_disconnected_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == disconnect->handle) && 
1000d65a:	0023      	movs	r3, r4
1000d65c:	3b56      	subs	r3, #86	; 0x56
1000d65e:	881a      	ldrh	r2, [r3, #0]
1000d660:	8833      	ldrh	r3, [r6, #0]
1000d662:	429a      	cmp	r2, r3
1000d664:	d122      	bne.n	1000d6ac <ble_disconnected_state_handler+0x60>
		((ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRED) || (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_COMPLETED)))
1000d666:	7823      	ldrb	r3, [r4, #0]
	uint8_t idx;
	disconnect = (at_ble_disconnected_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == disconnect->handle) && 
1000d668:	2b05      	cmp	r3, #5
1000d66a:	d001      	beq.n	1000d670 <ble_disconnected_state_handler+0x24>
		((ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRED) || (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_COMPLETED)))
1000d66c:	2b08      	cmp	r3, #8
1000d66e:	d102      	bne.n	1000d676 <ble_disconnected_state_handler+0x2a>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_DISCONNECTED;
1000d670:	2301      	movs	r3, #1
1000d672:	702b      	strb	r3, [r5, #0]
1000d674:	e01a      	b.n	1000d6ac <ble_disconnected_state_handler+0x60>
		}		
		else if(ble_dev_info[idx].conn_info.handle == disconnect->handle)
		{
			switch (ble_dev_info[idx].conn_state)
1000d676:	2b07      	cmp	r3, #7
1000d678:	d80f      	bhi.n	1000d69a <ble_disconnected_state_handler+0x4e>
1000d67a:	009b      	lsls	r3, r3, #2
1000d67c:	4a13      	ldr	r2, [pc, #76]	; (1000d6cc <ble_disconnected_state_handler+0x80>)
1000d67e:	58d3      	ldr	r3, [r2, r3]
1000d680:	469f      	mov	pc, r3
				case BLE_DEVICE_PAIRING_FAILED:
				case BLE_DEVICE_ENCRYPTION_STATE:
				case BLE_DEVICE_ENCRYPTION_FAILED:
				{
					/* Device is not paired so remove the device information */
					ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
1000d682:	2300      	movs	r3, #0
1000d684:	7023      	strb	r3, [r4, #0]
					if (ble_device_count > 0)
1000d686:	4b12      	ldr	r3, [pc, #72]	; (1000d6d0 <ble_disconnected_state_handler+0x84>)
1000d688:	781b      	ldrb	r3, [r3, #0]
1000d68a:	2b00      	cmp	r3, #0
1000d68c:	d00e      	beq.n	1000d6ac <ble_disconnected_state_handler+0x60>
					{
						ble_device_count--;
1000d68e:	4a10      	ldr	r2, [pc, #64]	; (1000d6d0 <ble_disconnected_state_handler+0x84>)
1000d690:	7813      	ldrb	r3, [r2, #0]
1000d692:	3b01      	subs	r3, #1
1000d694:	b2db      	uxtb	r3, r3
1000d696:	7013      	strb	r3, [r2, #0]
1000d698:	e008      	b.n	1000d6ac <ble_disconnected_state_handler+0x60>
				
				case BLE_DEVICE_DISCONNECTED:
				break;
				
				default:
				DBG_LOG_DEV("State Not Handled %d", ble_dev_info[idx].conn_state);
1000d69a:	480e      	ldr	r0, [pc, #56]	; (1000d6d4 <ble_disconnected_state_handler+0x88>)
1000d69c:	4b0e      	ldr	r3, [pc, #56]	; (1000d6d8 <ble_disconnected_state_handler+0x8c>)
1000d69e:	4798      	blx	r3
1000d6a0:	7829      	ldrb	r1, [r5, #0]
1000d6a2:	480e      	ldr	r0, [pc, #56]	; (1000d6dc <ble_disconnected_state_handler+0x90>)
1000d6a4:	4b0e      	ldr	r3, [pc, #56]	; (1000d6e0 <ble_disconnected_state_handler+0x94>)
1000d6a6:	4798      	blx	r3
				ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
1000d6a8:	2300      	movs	r3, #0
1000d6aa:	702b      	strb	r3, [r5, #0]
1000d6ac:	347c      	adds	r4, #124	; 0x7c
{
	at_ble_disconnected_t *disconnect;
	uint8_t idx;
	disconnect = (at_ble_disconnected_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000d6ae:	42bc      	cmp	r4, r7
1000d6b0:	d1d2      	bne.n	1000d658 <ble_disconnected_state_handler+0xc>
				break;				
			}
		} 
	}
	
	DBG_LOG("Device disconnected Reason:0x%02x Handle=0x%x", disconnect->reason, disconnect->handle);
1000d6b2:	4808      	ldr	r0, [pc, #32]	; (1000d6d4 <ble_disconnected_state_handler+0x88>)
1000d6b4:	4b08      	ldr	r3, [pc, #32]	; (1000d6d8 <ble_disconnected_state_handler+0x8c>)
1000d6b6:	4798      	blx	r3
1000d6b8:	8832      	ldrh	r2, [r6, #0]
1000d6ba:	78b1      	ldrb	r1, [r6, #2]
1000d6bc:	4809      	ldr	r0, [pc, #36]	; (1000d6e4 <ble_disconnected_state_handler+0x98>)
1000d6be:	4b08      	ldr	r3, [pc, #32]	; (1000d6e0 <ble_disconnected_state_handler+0x94>)
1000d6c0:	4798      	blx	r3
	return AT_BLE_SUCCESS;
}
1000d6c2:	2000      	movs	r0, #0
1000d6c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000d6c6:	46c0      	nop			; (mov r8, r8)
1000d6c8:	1001a042 	.word	0x1001a042
1000d6cc:	100172cc 	.word	0x100172cc
1000d6d0:	1001a250 	.word	0x1001a250
1000d6d4:	10016278 	.word	0x10016278
1000d6d8:	100150d1 	.word	0x100150d1
1000d6dc:	1001758c 	.word	0x1001758c
1000d6e0:	10014fb1 	.word	0x10014fb1
1000d6e4:	100175a4 	.word	0x100175a4

1000d6e8 <ble_conn_param_update>:

/** @brief connection update parameter function */
at_ble_status_t ble_conn_param_update(void *params)
{
1000d6e8:	b510      	push	{r4, lr}
	at_ble_conn_param_update_done_t * conn_param_update;
	conn_param_update = (at_ble_conn_param_update_done_t *)params;
	DBG_LOG_DEV("AT_BLE_CONN_PARAM_UPDATE ");
1000d6ea:	4804      	ldr	r0, [pc, #16]	; (1000d6fc <ble_conn_param_update+0x14>)
1000d6ec:	4b04      	ldr	r3, [pc, #16]	; (1000d700 <ble_conn_param_update+0x18>)
1000d6ee:	4798      	blx	r3
1000d6f0:	4804      	ldr	r0, [pc, #16]	; (1000d704 <ble_conn_param_update+0x1c>)
1000d6f2:	4b05      	ldr	r3, [pc, #20]	; (1000d708 <ble_conn_param_update+0x20>)
1000d6f4:	4798      	blx	r3
	ALL_UNUSED(conn_param_update);  //To avoid compiler warning
	return AT_BLE_SUCCESS;
}
1000d6f6:	2000      	movs	r0, #0
1000d6f8:	bd10      	pop	{r4, pc}
1000d6fa:	46c0      	nop			; (mov r8, r8)
1000d6fc:	10016278 	.word	0x10016278
1000d700:	100150d1 	.word	0x100150d1
1000d704:	100175d4 	.word	0x100175d4
1000d708:	10014fb1 	.word	0x10014fb1

1000d70c <ble_encryption_status_change_handler>:
	return AT_BLE_SUCCESS;
}

/** @brief function handles encryption status change */
at_ble_status_t ble_encryption_status_change_handler(void *params)
{
1000d70c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000d70e:	0006      	movs	r6, r0
	
	enc_status = (at_ble_encryption_status_changed_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == enc_status->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_STATE))
1000d710:	8801      	ldrh	r1, [r0, #0]
1000d712:	4b28      	ldr	r3, [pc, #160]	; (1000d7b4 <ble_encryption_status_change_handler+0xa8>)
	uint8_t idx;
	bool device_found = false;
	
	enc_status = (at_ble_encryption_status_changed_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000d714:	2400      	movs	r4, #0
	{
		if((ble_dev_info[idx].conn_info.handle == enc_status->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_STATE))
1000d716:	891a      	ldrh	r2, [r3, #8]
1000d718:	428a      	cmp	r2, r1
1000d71a:	d104      	bne.n	1000d726 <ble_encryption_status_change_handler+0x1a>
1000d71c:	001a      	movs	r2, r3
1000d71e:	325e      	adds	r2, #94	; 0x5e
1000d720:	7812      	ldrb	r2, [r2, #0]
1000d722:	2a06      	cmp	r2, #6
1000d724:	d02e      	beq.n	1000d784 <ble_encryption_status_change_handler+0x78>
	uint8_t idx;
	bool device_found = false;
	
	enc_status = (at_ble_encryption_status_changed_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000d726:	3401      	adds	r4, #1
1000d728:	b2e4      	uxtb	r4, r4
1000d72a:	337c      	adds	r3, #124	; 0x7c
1000d72c:	2c05      	cmp	r4, #5
1000d72e:	d1f2      	bne.n	1000d716 <ble_encryption_status_change_handler+0xa>
1000d730:	e039      	b.n	1000d7a6 <ble_encryption_status_change_handler+0x9a>
			return AT_BLE_FAILURE;
		}
	}
	else
	{
		ble_dev_info[idx].bond_info.status = enc_status->status;
1000d732:	4920      	ldr	r1, [pc, #128]	; (1000d7b4 <ble_encryption_status_change_handler+0xa8>)
1000d734:	0163      	lsls	r3, r4, #5
1000d736:	1b1a      	subs	r2, r3, r4
1000d738:	0092      	lsls	r2, r2, #2
1000d73a:	188a      	adds	r2, r1, r2
1000d73c:	7615      	strb	r5, [r2, #24]
		ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_FAILED;
1000d73e:	0014      	movs	r4, r2
1000d740:	345e      	adds	r4, #94	; 0x5e
1000d742:	2307      	movs	r3, #7
1000d744:	7023      	strb	r3, [r4, #0]
		DBG_LOG("Encryption failed");
1000d746:	481c      	ldr	r0, [pc, #112]	; (1000d7b8 <ble_encryption_status_change_handler+0xac>)
1000d748:	4b1c      	ldr	r3, [pc, #112]	; (1000d7bc <ble_encryption_status_change_handler+0xb0>)
1000d74a:	4798      	blx	r3
1000d74c:	481c      	ldr	r0, [pc, #112]	; (1000d7c0 <ble_encryption_status_change_handler+0xb4>)
1000d74e:	4b1d      	ldr	r3, [pc, #116]	; (1000d7c4 <ble_encryption_status_change_handler+0xb8>)
1000d750:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000d752:	25e2      	movs	r5, #226	; 0xe2
1000d754:	e02b      	b.n	1000d7ae <ble_encryption_status_change_handler+0xa2>
		}
	}
	
	if(enc_status->status == AT_BLE_SUCCESS)
	{
		DBG_LOG("Encryption completed successfully");
1000d756:	4818      	ldr	r0, [pc, #96]	; (1000d7b8 <ble_encryption_status_change_handler+0xac>)
1000d758:	4b18      	ldr	r3, [pc, #96]	; (1000d7bc <ble_encryption_status_change_handler+0xb0>)
1000d75a:	4798      	blx	r3
1000d75c:	481a      	ldr	r0, [pc, #104]	; (1000d7c8 <ble_encryption_status_change_handler+0xbc>)
1000d75e:	4b19      	ldr	r3, [pc, #100]	; (1000d7c4 <ble_encryption_status_change_handler+0xb8>)
1000d760:	4798      	blx	r3
		if (device_found)
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_COMPLETED;
1000d762:	4914      	ldr	r1, [pc, #80]	; (1000d7b4 <ble_encryption_status_change_handler+0xa8>)
1000d764:	0163      	lsls	r3, r4, #5
1000d766:	1b1a      	subs	r2, r3, r4
1000d768:	0092      	lsls	r2, r2, #2
1000d76a:	188a      	adds	r2, r1, r2
1000d76c:	0010      	movs	r0, r2
1000d76e:	305e      	adds	r0, #94	; 0x5e
1000d770:	2708      	movs	r7, #8
1000d772:	7007      	strb	r7, [r0, #0]
			ble_dev_info[idx].bond_info.auth = enc_status->authen;
1000d774:	78f0      	ldrb	r0, [r6, #3]
1000d776:	7510      	strb	r0, [r2, #20]
			ble_dev_info[idx].bond_info.status = enc_status->status;
1000d778:	78b2      	ldrb	r2, [r6, #2]
1000d77a:	1b1c      	subs	r4, r3, r4
1000d77c:	00a4      	lsls	r4, r4, #2
1000d77e:	190c      	adds	r4, r1, r4
1000d780:	7622      	strb	r2, [r4, #24]
		ble_dev_info[idx].bond_info.status = enc_status->status;
		ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_FAILED;
		DBG_LOG("Encryption failed");
		return AT_BLE_FAILURE;
	}
	return AT_BLE_SUCCESS;
1000d782:	e014      	b.n	1000d7ae <ble_encryption_status_change_handler+0xa2>
			device_found = true;
			break;
		}
	}
	
	if(enc_status->status == AT_BLE_SUCCESS)
1000d784:	78b5      	ldrb	r5, [r6, #2]
1000d786:	2d00      	cmp	r5, #0
1000d788:	d0e5      	beq.n	1000d756 <ble_encryption_status_change_handler+0x4a>
1000d78a:	e7d2      	b.n	1000d732 <ble_encryption_status_change_handler+0x26>
	{
		DBG_LOG("Encryption completed successfully");
1000d78c:	4e0a      	ldr	r6, [pc, #40]	; (1000d7b8 <ble_encryption_status_change_handler+0xac>)
1000d78e:	0030      	movs	r0, r6
1000d790:	4d0a      	ldr	r5, [pc, #40]	; (1000d7bc <ble_encryption_status_change_handler+0xb0>)
1000d792:	47a8      	blx	r5
1000d794:	480c      	ldr	r0, [pc, #48]	; (1000d7c8 <ble_encryption_status_change_handler+0xbc>)
1000d796:	4c0b      	ldr	r4, [pc, #44]	; (1000d7c4 <ble_encryption_status_change_handler+0xb8>)
1000d798:	47a0      	blx	r4
			ble_dev_info[idx].bond_info.auth = enc_status->authen;
			ble_dev_info[idx].bond_info.status = enc_status->status;
		}
		else
		{
			DBG_LOG("BLE Device not found encryption info");
1000d79a:	0030      	movs	r0, r6
1000d79c:	47a8      	blx	r5
1000d79e:	480b      	ldr	r0, [pc, #44]	; (1000d7cc <ble_encryption_status_change_handler+0xc0>)
1000d7a0:	47a0      	blx	r4
			return AT_BLE_FAILURE;
1000d7a2:	25e2      	movs	r5, #226	; 0xe2
1000d7a4:	e003      	b.n	1000d7ae <ble_encryption_status_change_handler+0xa2>
			device_found = true;
			break;
		}
	}
	
	if(enc_status->status == AT_BLE_SUCCESS)
1000d7a6:	78b5      	ldrb	r5, [r6, #2]
1000d7a8:	2d00      	cmp	r5, #0
1000d7aa:	d1c2      	bne.n	1000d732 <ble_encryption_status_change_handler+0x26>
1000d7ac:	e7ee      	b.n	1000d78c <ble_encryption_status_change_handler+0x80>
		ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_FAILED;
		DBG_LOG("Encryption failed");
		return AT_BLE_FAILURE;
	}
	return AT_BLE_SUCCESS;
}
1000d7ae:	0028      	movs	r0, r5
1000d7b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000d7b2:	46c0      	nop			; (mov r8, r8)
1000d7b4:	10019fe4 	.word	0x10019fe4
1000d7b8:	10016278 	.word	0x10016278
1000d7bc:	100150d1 	.word	0x100150d1
1000d7c0:	100175f0 	.word	0x100175f0
1000d7c4:	10014fb1 	.word	0x10014fb1
1000d7c8:	10017604 	.word	0x10017604
1000d7cc:	10017628 	.word	0x10017628

1000d7d0 <ble_scan_info_handler>:
	return found;
}
#endif
/** @brief function handling scaned information */
at_ble_status_t ble_scan_info_handler(void *params)
{
1000d7d0:	b530      	push	{r4, r5, lr}
1000d7d2:	b085      	sub	sp, #20
1000d7d4:	0004      	movs	r4, r0
	at_ble_scan_info_t *scan_param;
	scan_param = (at_ble_scan_info_t *)params;
	if(scan_response_count < MAX_SCAN_DEVICE)
1000d7d6:	4b1f      	ldr	r3, [pc, #124]	; (1000d854 <ble_scan_info_handler+0x84>)
1000d7d8:	781b      	ldrb	r3, [r3, #0]
1000d7da:	b2db      	uxtb	r3, r3
1000d7dc:	2b13      	cmp	r3, #19
1000d7de:	d824      	bhi.n	1000d82a <ble_scan_info_handler+0x5a>
	{
		memcpy((uint8_t *)&scan_info[scan_response_count], scan_param, sizeof(at_ble_scan_info_t));
1000d7e0:	4d1c      	ldr	r5, [pc, #112]	; (1000d854 <ble_scan_info_handler+0x84>)
1000d7e2:	782b      	ldrb	r3, [r5, #0]
1000d7e4:	b2db      	uxtb	r3, r3
1000d7e6:	0098      	lsls	r0, r3, #2
1000d7e8:	18c0      	adds	r0, r0, r3
1000d7ea:	00c0      	lsls	r0, r0, #3
1000d7ec:	18c3      	adds	r3, r0, r3
1000d7ee:	481a      	ldr	r0, [pc, #104]	; (1000d858 <ble_scan_info_handler+0x88>)
1000d7f0:	1818      	adds	r0, r3, r0
1000d7f2:	2229      	movs	r2, #41	; 0x29
1000d7f4:	0021      	movs	r1, r4
1000d7f6:	4b19      	ldr	r3, [pc, #100]	; (1000d85c <ble_scan_info_handler+0x8c>)
1000d7f8:	4798      	blx	r3
		DBG_LOG_DEV("Info:Device found address [%d]  0x%02X%02X%02X%02X%02X%02X ",
1000d7fa:	4819      	ldr	r0, [pc, #100]	; (1000d860 <ble_scan_info_handler+0x90>)
1000d7fc:	4b19      	ldr	r3, [pc, #100]	; (1000d864 <ble_scan_info_handler+0x94>)
1000d7fe:	4798      	blx	r3
1000d800:	7829      	ldrb	r1, [r5, #0]
1000d802:	b2c9      	uxtb	r1, r1
1000d804:	79a3      	ldrb	r3, [r4, #6]
1000d806:	79e2      	ldrb	r2, [r4, #7]
1000d808:	78a0      	ldrb	r0, [r4, #2]
1000d80a:	9003      	str	r0, [sp, #12]
1000d80c:	78e0      	ldrb	r0, [r4, #3]
1000d80e:	9002      	str	r0, [sp, #8]
1000d810:	7920      	ldrb	r0, [r4, #4]
1000d812:	9001      	str	r0, [sp, #4]
1000d814:	7960      	ldrb	r0, [r4, #5]
1000d816:	9000      	str	r0, [sp, #0]
1000d818:	4813      	ldr	r0, [pc, #76]	; (1000d868 <ble_scan_info_handler+0x98>)
1000d81a:	4c14      	ldr	r4, [pc, #80]	; (1000d86c <ble_scan_info_handler+0x9c>)
1000d81c:	47a0      	blx	r4
		scan_param->dev_addr.addr[4],
		scan_param->dev_addr.addr[3],
		scan_param->dev_addr.addr[2],
		scan_param->dev_addr.addr[1],
		scan_param->dev_addr.addr[0]);
		scan_response_count++;
1000d81e:	782b      	ldrb	r3, [r5, #0]
1000d820:	3301      	adds	r3, #1
1000d822:	b2db      	uxtb	r3, r3
1000d824:	702b      	strb	r3, [r5, #0]
		return AT_BLE_SUCCESS;
1000d826:	2300      	movs	r3, #0
1000d828:	e011      	b.n	1000d84e <ble_scan_info_handler+0x7e>
	}
	else
	{
		DBG_LOG("Info:maximum no.of scan device reached...Stopping Scan");
1000d82a:	480d      	ldr	r0, [pc, #52]	; (1000d860 <ble_scan_info_handler+0x90>)
1000d82c:	4b0d      	ldr	r3, [pc, #52]	; (1000d864 <ble_scan_info_handler+0x94>)
1000d82e:	4798      	blx	r3
1000d830:	480f      	ldr	r0, [pc, #60]	; (1000d870 <ble_scan_info_handler+0xa0>)
1000d832:	4b0e      	ldr	r3, [pc, #56]	; (1000d86c <ble_scan_info_handler+0x9c>)
1000d834:	4798      	blx	r3
		if(at_ble_scan_stop() != AT_BLE_SUCCESS)
1000d836:	4b0f      	ldr	r3, [pc, #60]	; (1000d874 <ble_scan_info_handler+0xa4>)
1000d838:	4798      	blx	r3
				}
			}
		}
	
		#endif
		return AT_BLE_FAILURE;
1000d83a:	23e2      	movs	r3, #226	; 0xe2
		return AT_BLE_SUCCESS;
	}
	else
	{
		DBG_LOG("Info:maximum no.of scan device reached...Stopping Scan");
		if(at_ble_scan_stop() != AT_BLE_SUCCESS)
1000d83c:	2800      	cmp	r0, #0
1000d83e:	d006      	beq.n	1000d84e <ble_scan_info_handler+0x7e>
		{
			DBG_LOG("Failed to stop scanning");
1000d840:	4807      	ldr	r0, [pc, #28]	; (1000d860 <ble_scan_info_handler+0x90>)
1000d842:	4b08      	ldr	r3, [pc, #32]	; (1000d864 <ble_scan_info_handler+0x94>)
1000d844:	4798      	blx	r3
1000d846:	480c      	ldr	r0, [pc, #48]	; (1000d878 <ble_scan_info_handler+0xa8>)
1000d848:	4b08      	ldr	r3, [pc, #32]	; (1000d86c <ble_scan_info_handler+0x9c>)
1000d84a:	4798      	blx	r3
				}
			}
		}
	
		#endif
		return AT_BLE_FAILURE;
1000d84c:	23e2      	movs	r3, #226	; 0xe2
	}
}
1000d84e:	0018      	movs	r0, r3
1000d850:	b005      	add	sp, #20
1000d852:	bd30      	pop	{r4, r5, pc}
1000d854:	10018b50 	.word	0x10018b50
1000d858:	1001a2c8 	.word	0x1001a2c8
1000d85c:	10014e57 	.word	0x10014e57
1000d860:	10016278 	.word	0x10016278
1000d864:	100150d1 	.word	0x100150d1
1000d868:	10017650 	.word	0x10017650
1000d86c:	10014fb1 	.word	0x10014fb1
1000d870:	1001768c 	.word	0x1001768c
1000d874:	10010679 	.word	0x10010679
1000d878:	100176c4 	.word	0x100176c4

1000d87c <ble_pair_done_handler>:
	return AT_BLE_SUCCESS;	
}

/** @brief function handles pair done event */
at_ble_status_t ble_pair_done_handler(void *params)
{
1000d87c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d87e:	465f      	mov	r7, fp
1000d880:	4656      	mov	r6, sl
1000d882:	464d      	mov	r5, r9
1000d884:	4644      	mov	r4, r8
1000d886:	b4f0      	push	{r4, r5, r6, r7}
1000d888:	b083      	sub	sp, #12
1000d88a:	0005      	movs	r5, r0
	bool device_found = false;
	pairing_params = (at_ble_pair_done_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == pairing_params->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRING))
1000d88c:	8841      	ldrh	r1, [r0, #2]
1000d88e:	4b59      	ldr	r3, [pc, #356]	; (1000d9f4 <ble_pair_done_handler+0x178>)
	at_ble_pair_done_t *pairing_params;
	uint8_t idx;
	bool device_found = false;
	pairing_params = (at_ble_pair_done_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000d890:	2400      	movs	r4, #0
	{
		if((ble_dev_info[idx].conn_info.handle == pairing_params->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRING))
1000d892:	891a      	ldrh	r2, [r3, #8]
1000d894:	428a      	cmp	r2, r1
1000d896:	d105      	bne.n	1000d8a4 <ble_pair_done_handler+0x28>
1000d898:	001a      	movs	r2, r3
1000d89a:	325e      	adds	r2, #94	; 0x5e
1000d89c:	7812      	ldrb	r2, [r2, #0]
1000d89e:	2a03      	cmp	r2, #3
1000d8a0:	d100      	bne.n	1000d8a4 <ble_pair_done_handler+0x28>
1000d8a2:	e09a      	b.n	1000d9da <ble_pair_done_handler+0x15e>
	at_ble_pair_done_t *pairing_params;
	uint8_t idx;
	bool device_found = false;
	pairing_params = (at_ble_pair_done_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000d8a4:	3401      	adds	r4, #1
1000d8a6:	b2e4      	uxtb	r4, r4
1000d8a8:	337c      	adds	r3, #124	; 0x7c
1000d8aa:	2c05      	cmp	r4, #5
1000d8ac:	d1f1      	bne.n	1000d892 <ble_pair_done_handler+0x16>
1000d8ae:	e057      	b.n	1000d960 <ble_pair_done_handler+0xe4>
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_ltk, (uint8_t *)&pairing_params->peer_ltk, sizeof(at_ble_LTK_t));
			
			DBG_LOG_DEV("LTK: ");
			for (idx = 0; idx < 16; idx++)
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_ltk.key[idx]);
1000d8b0:	7821      	ldrb	r1, [r4, #0]
1000d8b2:	0030      	movs	r0, r6
1000d8b4:	47b8      	blx	r7
1000d8b6:	3401      	adds	r4, #1
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_csrk, (uint8_t *)&pairing_params->peer_csrk, sizeof(at_ble_CSRK_t));
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_irk, (uint8_t *)&pairing_params->peer_irk, sizeof(at_ble_IRK_t));
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_ltk, (uint8_t *)&pairing_params->peer_ltk, sizeof(at_ble_LTK_t));
			
			DBG_LOG_DEV("LTK: ");
			for (idx = 0; idx < 16; idx++)
1000d8b8:	454c      	cmp	r4, r9
1000d8ba:	d1f9      	bne.n	1000d8b0 <ble_pair_done_handler+0x34>
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_ltk.key[idx]);
				
			}
			DBG_LOG_DEV("CSRK: ");
1000d8bc:	484e      	ldr	r0, [pc, #312]	; (1000d9f8 <ble_pair_done_handler+0x17c>)
1000d8be:	4b4f      	ldr	r3, [pc, #316]	; (1000d9fc <ble_pair_done_handler+0x180>)
1000d8c0:	4798      	blx	r3
1000d8c2:	484f      	ldr	r0, [pc, #316]	; (1000da00 <ble_pair_done_handler+0x184>)
1000d8c4:	4b4f      	ldr	r3, [pc, #316]	; (1000da04 <ble_pair_done_handler+0x188>)
1000d8c6:	4798      	blx	r3
1000d8c8:	002e      	movs	r6, r5
1000d8ca:	3622      	adds	r6, #34	; 0x22
1000d8cc:	002c      	movs	r4, r5
1000d8ce:	3432      	adds	r4, #50	; 0x32
			for (idx = 0; idx < 16; idx++)
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_csrk.key[idx]);
1000d8d0:	4f4c      	ldr	r7, [pc, #304]	; (1000da04 <ble_pair_done_handler+0x188>)
1000d8d2:	7831      	ldrb	r1, [r6, #0]
1000d8d4:	484c      	ldr	r0, [pc, #304]	; (1000da08 <ble_pair_done_handler+0x18c>)
1000d8d6:	47b8      	blx	r7
1000d8d8:	3601      	adds	r6, #1
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_ltk.key[idx]);
				
			}
			DBG_LOG_DEV("CSRK: ");
			for (idx = 0; idx < 16; idx++)
1000d8da:	42a6      	cmp	r6, r4
1000d8dc:	d1f9      	bne.n	1000d8d2 <ble_pair_done_handler+0x56>
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_csrk.key[idx]);
				
			}
			DBG_LOG_DEV("IRK:");
1000d8de:	4846      	ldr	r0, [pc, #280]	; (1000d9f8 <ble_pair_done_handler+0x17c>)
1000d8e0:	4b46      	ldr	r3, [pc, #280]	; (1000d9fc <ble_pair_done_handler+0x180>)
1000d8e2:	4798      	blx	r3
1000d8e4:	4849      	ldr	r0, [pc, #292]	; (1000da0c <ble_pair_done_handler+0x190>)
1000d8e6:	4b47      	ldr	r3, [pc, #284]	; (1000da04 <ble_pair_done_handler+0x188>)
1000d8e8:	4798      	blx	r3
1000d8ea:	3542      	adds	r5, #66	; 0x42
1000d8ec:	002f      	movs	r7, r5
			for (idx = 0; idx < 16; idx++)
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_irk.key[idx]);
1000d8ee:	4e46      	ldr	r6, [pc, #280]	; (1000da08 <ble_pair_done_handler+0x18c>)
1000d8f0:	4d44      	ldr	r5, [pc, #272]	; (1000da04 <ble_pair_done_handler+0x188>)
1000d8f2:	7821      	ldrb	r1, [r4, #0]
1000d8f4:	0030      	movs	r0, r6
1000d8f6:	47a8      	blx	r5
1000d8f8:	3401      	adds	r4, #1
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_csrk.key[idx]);
				
			}
			DBG_LOG_DEV("IRK:");
			for (idx = 0; idx < 16; idx++)
1000d8fa:	42bc      	cmp	r4, r7
1000d8fc:	d1f9      	bne.n	1000d8f2 <ble_pair_done_handler+0x76>
1000d8fe:	e071      	b.n	1000d9e4 <ble_pair_done_handler+0x168>
			return AT_BLE_FAILURE;
		}		
	}
	else
	{
		if(ble_dev_info[idx].conn_state != BLE_DEVICE_DEFAULT_IDLE && ble_dev_info[idx].conn_state != BLE_DEVICE_DISCONNECTED) {
1000d900:	0163      	lsls	r3, r4, #5
1000d902:	1b1c      	subs	r4, r3, r4
1000d904:	00a4      	lsls	r4, r4, #2
1000d906:	4b3b      	ldr	r3, [pc, #236]	; (1000d9f4 <ble_pair_done_handler+0x178>)
1000d908:	191c      	adds	r4, r3, r4
1000d90a:	345e      	adds	r4, #94	; 0x5e
1000d90c:	7823      	ldrb	r3, [r4, #0]
1000d90e:	2b01      	cmp	r3, #1
1000d910:	d915      	bls.n	1000d93e <ble_pair_done_handler+0xc2>
			DBG_LOG("Pairing failed...Disconnecting");
1000d912:	4839      	ldr	r0, [pc, #228]	; (1000d9f8 <ble_pair_done_handler+0x17c>)
1000d914:	4b39      	ldr	r3, [pc, #228]	; (1000d9fc <ble_pair_done_handler+0x180>)
1000d916:	4798      	blx	r3
1000d918:	483d      	ldr	r0, [pc, #244]	; (1000da10 <ble_pair_done_handler+0x194>)
1000d91a:	4b3a      	ldr	r3, [pc, #232]	; (1000da04 <ble_pair_done_handler+0x188>)
1000d91c:	4798      	blx	r3
			if(!(at_ble_disconnect(pairing_params->handle, AT_BLE_TERMINATED_BY_USER) == AT_BLE_SUCCESS))
1000d91e:	8868      	ldrh	r0, [r5, #2]
1000d920:	2113      	movs	r1, #19
1000d922:	4b3c      	ldr	r3, [pc, #240]	; (1000da14 <ble_pair_done_handler+0x198>)
1000d924:	4798      	blx	r3
1000d926:	9001      	str	r0, [sp, #4]
1000d928:	2800      	cmp	r0, #0
1000d92a:	d05b      	beq.n	1000d9e4 <ble_pair_done_handler+0x168>
			{
				DBG_LOG("Disconnect Request Failed");
1000d92c:	4832      	ldr	r0, [pc, #200]	; (1000d9f8 <ble_pair_done_handler+0x17c>)
1000d92e:	4b33      	ldr	r3, [pc, #204]	; (1000d9fc <ble_pair_done_handler+0x180>)
1000d930:	4798      	blx	r3
1000d932:	4839      	ldr	r0, [pc, #228]	; (1000da18 <ble_pair_done_handler+0x19c>)
1000d934:	4b33      	ldr	r3, [pc, #204]	; (1000da04 <ble_pair_done_handler+0x188>)
1000d936:	4798      	blx	r3
				return AT_BLE_FAILURE;
1000d938:	23e2      	movs	r3, #226	; 0xe2
1000d93a:	9301      	str	r3, [sp, #4]
1000d93c:	e052      	b.n	1000d9e4 <ble_pair_done_handler+0x168>
			}
		}
	}
	return AT_BLE_SUCCESS;
1000d93e:	2300      	movs	r3, #0
1000d940:	9301      	str	r3, [sp, #4]
1000d942:	e04f      	b.n	1000d9e4 <ble_pair_done_handler+0x168>
		}
	}
	
	if(pairing_params->status == AT_BLE_SUCCESS)
	{
		DBG_LOG("Pairing procedure completed successfully");
1000d944:	4e2c      	ldr	r6, [pc, #176]	; (1000d9f8 <ble_pair_done_handler+0x17c>)
1000d946:	0030      	movs	r0, r6
1000d948:	4d2c      	ldr	r5, [pc, #176]	; (1000d9fc <ble_pair_done_handler+0x180>)
1000d94a:	47a8      	blx	r5
1000d94c:	4833      	ldr	r0, [pc, #204]	; (1000da1c <ble_pair_done_handler+0x1a0>)
1000d94e:	4c2d      	ldr	r4, [pc, #180]	; (1000da04 <ble_pair_done_handler+0x188>)
1000d950:	47a0      	blx	r4
				
			}
		}
		else
		{
			DBG_LOG("BLE Device not found to store the pairing info");
1000d952:	0030      	movs	r0, r6
1000d954:	47a8      	blx	r5
1000d956:	4832      	ldr	r0, [pc, #200]	; (1000da20 <ble_pair_done_handler+0x1a4>)
1000d958:	47a0      	blx	r4
			return AT_BLE_FAILURE;
1000d95a:	23e2      	movs	r3, #226	; 0xe2
1000d95c:	9301      	str	r3, [sp, #4]
1000d95e:	e041      	b.n	1000d9e4 <ble_pair_done_handler+0x168>
			device_found = true;
			break;
		}
	}
	
	if(pairing_params->status == AT_BLE_SUCCESS)
1000d960:	792b      	ldrb	r3, [r5, #4]
1000d962:	2b00      	cmp	r3, #0
1000d964:	d1cc      	bne.n	1000d900 <ble_pair_done_handler+0x84>
1000d966:	e7ed      	b.n	1000d944 <ble_pair_done_handler+0xc8>
	{
		DBG_LOG("Pairing procedure completed successfully");
1000d968:	4823      	ldr	r0, [pc, #140]	; (1000d9f8 <ble_pair_done_handler+0x17c>)
1000d96a:	4b24      	ldr	r3, [pc, #144]	; (1000d9fc <ble_pair_done_handler+0x180>)
1000d96c:	469b      	mov	fp, r3
1000d96e:	4798      	blx	r3
1000d970:	482a      	ldr	r0, [pc, #168]	; (1000da1c <ble_pair_done_handler+0x1a0>)
1000d972:	4b24      	ldr	r3, [pc, #144]	; (1000da04 <ble_pair_done_handler+0x188>)
1000d974:	469a      	mov	sl, r3
1000d976:	4798      	blx	r3
		if (device_found)
		{
			ble_dev_info[idx].bond_info.auth = pairing_params->auth;
1000d978:	782a      	ldrb	r2, [r5, #0]
1000d97a:	4b1e      	ldr	r3, [pc, #120]	; (1000d9f4 <ble_pair_done_handler+0x178>)
1000d97c:	4698      	mov	r8, r3
1000d97e:	0167      	lsls	r7, r4, #5
1000d980:	1b3b      	subs	r3, r7, r4
1000d982:	009b      	lsls	r3, r3, #2
1000d984:	4443      	add	r3, r8
1000d986:	751a      	strb	r2, [r3, #20]
			ble_dev_info[idx].bond_info.status = pairing_params->status;
1000d988:	792a      	ldrb	r2, [r5, #4]
1000d98a:	761a      	strb	r2, [r3, #24]
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRED;
1000d98c:	335e      	adds	r3, #94	; 0x5e
1000d98e:	2205      	movs	r2, #5
1000d990:	701a      	strb	r2, [r3, #0]
			
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_csrk, (uint8_t *)&pairing_params->peer_csrk, sizeof(at_ble_CSRK_t));
1000d992:	1b38      	subs	r0, r7, r4
1000d994:	0080      	lsls	r0, r0, #2
1000d996:	4440      	add	r0, r8
1000d998:	3036      	adds	r0, #54	; 0x36
1000d99a:	320b      	adds	r2, #11
1000d99c:	0029      	movs	r1, r5
1000d99e:	3122      	adds	r1, #34	; 0x22
1000d9a0:	4b20      	ldr	r3, [pc, #128]	; (1000da24 <ble_pair_done_handler+0x1a8>)
1000d9a2:	4699      	mov	r9, r3
1000d9a4:	4798      	blx	r3
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_irk, (uint8_t *)&pairing_params->peer_irk, sizeof(at_ble_IRK_t));
1000d9a6:	1b38      	subs	r0, r7, r4
1000d9a8:	0080      	lsls	r0, r0, #2
1000d9aa:	4440      	add	r0, r8
1000d9ac:	3046      	adds	r0, #70	; 0x46
1000d9ae:	2217      	movs	r2, #23
1000d9b0:	0029      	movs	r1, r5
1000d9b2:	3132      	adds	r1, #50	; 0x32
1000d9b4:	47c8      	blx	r9
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_ltk, (uint8_t *)&pairing_params->peer_ltk, sizeof(at_ble_LTK_t));
1000d9b6:	1b38      	subs	r0, r7, r4
1000d9b8:	0080      	lsls	r0, r0, #2
1000d9ba:	4440      	add	r0, r8
1000d9bc:	301a      	adds	r0, #26
1000d9be:	1dac      	adds	r4, r5, #6
1000d9c0:	221c      	movs	r2, #28
1000d9c2:	0021      	movs	r1, r4
1000d9c4:	47c8      	blx	r9
			
			DBG_LOG_DEV("LTK: ");
1000d9c6:	480c      	ldr	r0, [pc, #48]	; (1000d9f8 <ble_pair_done_handler+0x17c>)
1000d9c8:	47d8      	blx	fp
1000d9ca:	4817      	ldr	r0, [pc, #92]	; (1000da28 <ble_pair_done_handler+0x1ac>)
1000d9cc:	47d0      	blx	sl
1000d9ce:	2316      	movs	r3, #22
1000d9d0:	4699      	mov	r9, r3
1000d9d2:	44a9      	add	r9, r5
			for (idx = 0; idx < 16; idx++)
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_ltk.key[idx]);
1000d9d4:	4e0c      	ldr	r6, [pc, #48]	; (1000da08 <ble_pair_done_handler+0x18c>)
1000d9d6:	4f0b      	ldr	r7, [pc, #44]	; (1000da04 <ble_pair_done_handler+0x188>)
1000d9d8:	e76a      	b.n	1000d8b0 <ble_pair_done_handler+0x34>
			device_found = true;
			break;
		}
	}
	
	if(pairing_params->status == AT_BLE_SUCCESS)
1000d9da:	792b      	ldrb	r3, [r5, #4]
1000d9dc:	9301      	str	r3, [sp, #4]
1000d9de:	2b00      	cmp	r3, #0
1000d9e0:	d0c2      	beq.n	1000d968 <ble_pair_done_handler+0xec>
1000d9e2:	e78d      	b.n	1000d900 <ble_pair_done_handler+0x84>
				return AT_BLE_FAILURE;
			}
		}
	}
	return AT_BLE_SUCCESS;
}
1000d9e4:	9801      	ldr	r0, [sp, #4]
1000d9e6:	b003      	add	sp, #12
1000d9e8:	bc3c      	pop	{r2, r3, r4, r5}
1000d9ea:	4690      	mov	r8, r2
1000d9ec:	4699      	mov	r9, r3
1000d9ee:	46a2      	mov	sl, r4
1000d9f0:	46ab      	mov	fp, r5
1000d9f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d9f4:	10019fe4 	.word	0x10019fe4
1000d9f8:	10016278 	.word	0x10016278
1000d9fc:	100150d1 	.word	0x100150d1
1000da00:	100176e8 	.word	0x100176e8
1000da04:	10014fb1 	.word	0x10014fb1
1000da08:	100176dc 	.word	0x100176dc
1000da0c:	100176f0 	.word	0x100176f0
1000da10:	100176f8 	.word	0x100176f8
1000da14:	10010699 	.word	0x10010699
1000da18:	10017718 	.word	0x10017718
1000da1c:	10017734 	.word	0x10017734
1000da20:	10017760 	.word	0x10017760
1000da24:	10014e57 	.word	0x10014e57
1000da28:	10017790 	.word	0x10017790

1000da2c <ble_conn_param_update_req>:
	ALL_UNUSED(conn_param_update);  //To avoid compiler warning
	return AT_BLE_SUCCESS;
}

at_ble_status_t ble_conn_param_update_req(void *params)
{
1000da2c:	b510      	push	{r4, lr}
	at_ble_conn_param_update_request_t * conn_param_req;
	conn_param_req = (at_ble_conn_param_update_request_t *)params;
	at_ble_conn_update_reply(conn_param_req->handle, true, 1, 120);
1000da2e:	8800      	ldrh	r0, [r0, #0]
1000da30:	2378      	movs	r3, #120	; 0x78
1000da32:	2201      	movs	r2, #1
1000da34:	2101      	movs	r1, #1
1000da36:	4c02      	ldr	r4, [pc, #8]	; (1000da40 <ble_conn_param_update_req+0x14>)
1000da38:	47a0      	blx	r4
	return AT_BLE_SUCCESS;
}
1000da3a:	2000      	movs	r0, #0
1000da3c:	bd10      	pop	{r4, pc}
1000da3e:	46c0      	nop			; (mov r8, r8)
1000da40:	100106b9 	.word	0x100106b9

1000da44 <ble_slave_security_request_handler>:

at_ble_status_t ble_slave_security_request_handler(void* params)
{
1000da44:	b5f0      	push	{r4, r5, r6, r7, lr}
1000da46:	4657      	mov	r7, sl
1000da48:	464e      	mov	r6, r9
1000da4a:	4645      	mov	r5, r8
1000da4c:	b4e0      	push	{r5, r6, r7}
1000da4e:	b084      	sub	sp, #16
1000da50:	0004      	movs	r4, r0
	uint8_t i = 0, idx;
	at_ble_slave_sec_request_t* slave_sec_req;
	bool device_found = false;
	
	slave_sec_req = (at_ble_slave_sec_request_t*)params;	
	memset(&features, 0x00, sizeof(at_ble_pair_features_t));
1000da52:	2209      	movs	r2, #9
1000da54:	2100      	movs	r1, #0
1000da56:	a801      	add	r0, sp, #4
1000da58:	4b6a      	ldr	r3, [pc, #424]	; (1000dc04 <ble_slave_security_request_handler+0x1c0>)
1000da5a:	4798      	blx	r3
		//@Todo Status is not handled in the Library
	//}

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == slave_sec_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000da5c:	8825      	ldrh	r5, [r4, #0]
1000da5e:	496a      	ldr	r1, [pc, #424]	; (1000dc08 <ble_slave_security_request_handler+0x1c4>)
1000da60:	000a      	movs	r2, r1
1000da62:	2300      	movs	r3, #0
1000da64:	8910      	ldrh	r0, [r2, #8]
1000da66:	42a8      	cmp	r0, r5
1000da68:	d116      	bne.n	1000da98 <ble_slave_security_request_handler+0x54>
1000da6a:	0010      	movs	r0, r2
1000da6c:	305e      	adds	r0, #94	; 0x5e
1000da6e:	7800      	ldrb	r0, [r0, #0]
1000da70:	2802      	cmp	r0, #2
1000da72:	d111      	bne.n	1000da98 <ble_slave_security_request_handler+0x54>
		{
			device_found = true;
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_STATE;
1000da74:	4864      	ldr	r0, [pc, #400]	; (1000dc08 <ble_slave_security_request_handler+0x1c4>)
1000da76:	015a      	lsls	r2, r3, #5
1000da78:	1ad6      	subs	r6, r2, r3
1000da7a:	00b6      	lsls	r6, r6, #2
1000da7c:	1986      	adds	r6, r0, r6
1000da7e:	365e      	adds	r6, #94	; 0x5e
1000da80:	2206      	movs	r2, #6
1000da82:	7032      	strb	r2, [r6, #0]
		}
	}
	
	if (device_found)
	{
		if((ble_dev_info[idx].bond_info.auth & AT_BLE_AUTH_NO_MITM_BOND) && (slave_sec_req->bond == true))
1000da84:	32f9      	adds	r2, #249	; 0xf9
1000da86:	4013      	ands	r3, r2
1000da88:	015a      	lsls	r2, r3, #5
1000da8a:	1ad2      	subs	r2, r2, r3
1000da8c:	0092      	lsls	r2, r2, #2
1000da8e:	1882      	adds	r2, r0, r2
1000da90:	7d12      	ldrb	r2, [r2, #20]
1000da92:	07d0      	lsls	r0, r2, #31
1000da94:	d405      	bmi.n	1000daa2 <ble_slave_security_request_handler+0x5e>
1000da96:	e01b      	b.n	1000dad0 <ble_slave_security_request_handler+0x8c>
1000da98:	3301      	adds	r3, #1
1000da9a:	327c      	adds	r2, #124	; 0x7c
		//at_ble_disconnect(slave_sec_req->handle, AT_BLE_AUTH_FAILURE);		
		//return AT_BLE_FAILURE;
		//@Todo Status is not handled in the Library
	//}

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000da9c:	2b05      	cmp	r3, #5
1000da9e:	d1e1      	bne.n	1000da64 <ble_slave_security_request_handler+0x20>
1000daa0:	e01e      	b.n	1000dae0 <ble_slave_security_request_handler+0x9c>
		}
	}
	
	if (device_found)
	{
		if((ble_dev_info[idx].bond_info.auth & AT_BLE_AUTH_NO_MITM_BOND) && (slave_sec_req->bond == true))
1000daa2:	78e0      	ldrb	r0, [r4, #3]
1000daa4:	2800      	cmp	r0, #0
1000daa6:	d013      	beq.n	1000dad0 <ble_slave_security_request_handler+0x8c>
		{
			if(at_ble_encryption_start(slave_sec_req->handle, &ble_dev_info[idx].bond_info.peer_ltk, ble_dev_info[idx].bond_info.auth) == AT_BLE_SUCCESS)
1000daa8:	0159      	lsls	r1, r3, #5
1000daaa:	1ac9      	subs	r1, r1, r3
1000daac:	008b      	lsls	r3, r1, #2
1000daae:	4956      	ldr	r1, [pc, #344]	; (1000dc08 <ble_slave_security_request_handler+0x1c4>)
1000dab0:	18c9      	adds	r1, r1, r3
1000dab2:	311a      	adds	r1, #26
1000dab4:	8820      	ldrh	r0, [r4, #0]
1000dab6:	4b55      	ldr	r3, [pc, #340]	; (1000dc0c <ble_slave_security_request_handler+0x1c8>)
1000dab8:	4798      	blx	r3
1000daba:	2800      	cmp	r0, #0
1000dabc:	d100      	bne.n	1000dac0 <ble_slave_security_request_handler+0x7c>
1000dabe:	e09b      	b.n	1000dbf8 <ble_slave_security_request_handler+0x1b4>
			{
				return  AT_BLE_SUCCESS;
			}
			else
			{
				DBG_LOG("Encryption Not started");
1000dac0:	4853      	ldr	r0, [pc, #332]	; (1000dc10 <ble_slave_security_request_handler+0x1cc>)
1000dac2:	4b54      	ldr	r3, [pc, #336]	; (1000dc14 <ble_slave_security_request_handler+0x1d0>)
1000dac4:	4798      	blx	r3
1000dac6:	4854      	ldr	r0, [pc, #336]	; (1000dc18 <ble_slave_security_request_handler+0x1d4>)
1000dac8:	4b54      	ldr	r3, [pc, #336]	; (1000dc1c <ble_slave_security_request_handler+0x1d8>)
1000daca:	4798      	blx	r3
				return AT_BLE_FAILURE;
1000dacc:	20e2      	movs	r0, #226	; 0xe2
1000dace:	e093      	b.n	1000dbf8 <ble_slave_security_request_handler+0x1b4>
			}			
		}
		else
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000dad0:	015a      	lsls	r2, r3, #5
1000dad2:	1ad3      	subs	r3, r2, r3
1000dad4:	009b      	lsls	r3, r3, #2
1000dad6:	4a4c      	ldr	r2, [pc, #304]	; (1000dc08 <ble_slave_security_request_handler+0x1c4>)
1000dad8:	18d3      	adds	r3, r2, r3
1000dada:	335e      	adds	r3, #94	; 0x5e
1000dadc:	2202      	movs	r2, #2
1000dade:	701a      	strb	r2, [r3, #0]
		}
	}
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == slave_sec_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000dae0:	8825      	ldrh	r5, [r4, #0]
1000dae2:	2200      	movs	r2, #0
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
		}
	}
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000dae4:	2300      	movs	r3, #0
	{
		if((ble_dev_info[idx].conn_info.handle == slave_sec_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000dae6:	0016      	movs	r6, r2
1000dae8:	8908      	ldrh	r0, [r1, #8]
1000daea:	42a8      	cmp	r0, r5
1000daec:	d10d      	bne.n	1000db0a <ble_slave_security_request_handler+0xc6>
1000daee:	0008      	movs	r0, r1
1000daf0:	305e      	adds	r0, #94	; 0x5e
1000daf2:	7800      	ldrb	r0, [r0, #0]
1000daf4:	2802      	cmp	r0, #2
1000daf6:	d108      	bne.n	1000db0a <ble_slave_security_request_handler+0xc6>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
1000daf8:	0152      	lsls	r2, r2, #5
1000dafa:	1b92      	subs	r2, r2, r6
1000dafc:	0096      	lsls	r6, r2, #2
1000dafe:	4a42      	ldr	r2, [pc, #264]	; (1000dc08 <ble_slave_security_request_handler+0x1c4>)
1000db00:	1992      	adds	r2, r2, r6
1000db02:	325e      	adds	r2, #94	; 0x5e
1000db04:	2103      	movs	r1, #3
1000db06:	7011      	strb	r1, [r2, #0]
			break;
1000db08:	e005      	b.n	1000db16 <ble_slave_security_request_handler+0xd2>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
		}
	}
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000db0a:	3301      	adds	r3, #1
1000db0c:	b2db      	uxtb	r3, r3
1000db0e:	3201      	adds	r2, #1
1000db10:	317c      	adds	r1, #124	; 0x7c
1000db12:	2b05      	cmp	r3, #5
1000db14:	d1e7      	bne.n	1000dae6 <ble_slave_security_request_handler+0xa2>
			break;
		}
	}
	
	features.desired_auth =  BLE_AUTHENTICATION_LEVEL; 
	features.bond = slave_sec_req->bond;
1000db16:	aa01      	add	r2, sp, #4
1000db18:	78e1      	ldrb	r1, [r4, #3]
1000db1a:	7091      	strb	r1, [r2, #2]
	features.mitm_protection = true;
1000db1c:	2101      	movs	r1, #1
1000db1e:	7051      	strb	r1, [r2, #1]
	/* Device capabilities is display only , key will be generated
	and displayed */
	features.io_cababilities = AT_BLE_IO_CAP_KB_DISPLAY;
1000db20:	3103      	adds	r1, #3
1000db22:	7011      	strb	r1, [r2, #0]

	features.oob_avaiable = false;
			
	/* Distribution of LTK is required */
	if (ble_dev_info[idx].conn_info.peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE)
1000db24:	001f      	movs	r7, r3
1000db26:	015a      	lsls	r2, r3, #5
1000db28:	1ad2      	subs	r2, r2, r3
1000db2a:	0092      	lsls	r2, r2, #2
1000db2c:	4936      	ldr	r1, [pc, #216]	; (1000dc08 <ble_slave_security_request_handler+0x1c4>)
1000db2e:	5c52      	ldrb	r2, [r2, r1]
1000db30:	2a02      	cmp	r2, #2
1000db32:	d104      	bne.n	1000db3e <ble_slave_security_request_handler+0xfa>
	{
		features.initiator_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000db34:	aa01      	add	r2, sp, #4
1000db36:	2103      	movs	r1, #3
1000db38:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000db3a:	71d1      	strb	r1, [r2, #7]
1000db3c:	e003      	b.n	1000db46 <ble_slave_security_request_handler+0x102>
	}
	else
	{
		features.initiator_keys =   AT_BLE_KEY_DIST_ENC;
1000db3e:	aa01      	add	r2, sp, #4
1000db40:	2101      	movs	r1, #1
1000db42:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   AT_BLE_KEY_DIST_ENC;
1000db44:	71d1      	strb	r1, [r2, #7]
	}
	features.max_key_size = 16;
1000db46:	aa01      	add	r2, sp, #4
1000db48:	2110      	movs	r1, #16
1000db4a:	7151      	strb	r1, [r2, #5]
	features.min_key_size = 16;
1000db4c:	7111      	strb	r1, [r2, #4]
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
1000db4e:	017a      	lsls	r2, r7, #5
1000db50:	1bd2      	subs	r2, r2, r7
1000db52:	0092      	lsls	r2, r2, #2
1000db54:	492c      	ldr	r1, [pc, #176]	; (1000dc08 <ble_slave_security_request_handler+0x1c4>)
1000db56:	188a      	adds	r2, r1, r2
1000db58:	7e12      	ldrb	r2, [r2, #24]
1000db5a:	2a40      	cmp	r2, #64	; 0x40
1000db5c:	d134      	bne.n	1000dbc8 <ble_slave_security_request_handler+0x184>
1000db5e:	015a      	lsls	r2, r3, #5
1000db60:	1ad3      	subs	r3, r2, r3
1000db62:	009b      	lsls	r3, r3, #2
1000db64:	469a      	mov	sl, r3
1000db66:	001e      	movs	r6, r3
1000db68:	3660      	adds	r6, #96	; 0x60
1000db6a:	1876      	adds	r6, r6, r1
1000db6c:	4655      	mov	r5, sl
1000db6e:	3568      	adds	r5, #104	; 0x68
1000db70:	186d      	adds	r5, r5, r1
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
		{			
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000db72:	4b2b      	ldr	r3, [pc, #172]	; (1000dc20 <ble_slave_security_request_handler+0x1dc>)
1000db74:	4699      	mov	r9, r3
1000db76:	230f      	movs	r3, #15
1000db78:	4698      	mov	r8, r3
1000db7a:	47c8      	blx	r9
1000db7c:	4643      	mov	r3, r8
1000db7e:	4018      	ands	r0, r3
1000db80:	7030      	strb	r0, [r6, #0]
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
1000db82:	47c8      	blx	r9
1000db84:	4643      	mov	r3, r8
1000db86:	4018      	ands	r0, r3
1000db88:	74b0      	strb	r0, [r6, #18]
1000db8a:	3601      	adds	r6, #1
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
1000db8c:	42ae      	cmp	r6, r5
1000db8e:	d1f4      	bne.n	1000db7a <ble_slave_security_request_handler+0x136>
1000db90:	4656      	mov	r6, sl
1000db92:	3670      	adds	r6, #112	; 0x70
1000db94:	4a1c      	ldr	r2, [pc, #112]	; (1000dc08 <ble_slave_security_request_handler+0x1c4>)
1000db96:	18b6      	adds	r6, r6, r2
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000db98:	4b21      	ldr	r3, [pc, #132]	; (1000dc20 <ble_slave_security_request_handler+0x1dc>)
1000db9a:	4699      	mov	r9, r3
1000db9c:	230f      	movs	r3, #15
1000db9e:	4698      	mov	r8, r3
1000dba0:	47c8      	blx	r9
1000dba2:	4643      	mov	r3, r8
1000dba4:	4018      	ands	r0, r3
1000dba6:	7028      	strb	r0, [r5, #0]
1000dba8:	3501      	adds	r5, #1
		{			
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
1000dbaa:	42b5      	cmp	r5, r6
1000dbac:	d1f8      	bne.n	1000dba0 <ble_slave_security_request_handler+0x15c>
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
		}
		
		ble_dev_info[idx].host_ltk.ediv = rand()&0xffff;
1000dbae:	4b1c      	ldr	r3, [pc, #112]	; (1000dc20 <ble_slave_security_request_handler+0x1dc>)
1000dbb0:	4798      	blx	r3
1000dbb2:	017b      	lsls	r3, r7, #5
1000dbb4:	1bdb      	subs	r3, r3, r7
1000dbb6:	009b      	lsls	r3, r3, #2
1000dbb8:	4a13      	ldr	r2, [pc, #76]	; (1000dc08 <ble_slave_security_request_handler+0x1c4>)
1000dbba:	18d3      	adds	r3, r2, r3
1000dbbc:	001a      	movs	r2, r3
1000dbbe:	3270      	adds	r2, #112	; 0x70
1000dbc0:	8010      	strh	r0, [r2, #0]
		ble_dev_info[idx].host_ltk.key_size = 16;
1000dbc2:	337a      	adds	r3, #122	; 0x7a
1000dbc4:	2210      	movs	r2, #16
1000dbc6:	701a      	strb	r2, [r3, #0]
	{
		/* Bonding information already exists */
		
	}

	if(at_ble_authenticate(slave_sec_req->handle, &features, &ble_dev_info[idx].host_ltk, NULL) != AT_BLE_SUCCESS)
1000dbc8:	017a      	lsls	r2, r7, #5
1000dbca:	1bd7      	subs	r7, r2, r7
1000dbcc:	00bf      	lsls	r7, r7, #2
1000dbce:	3760      	adds	r7, #96	; 0x60
1000dbd0:	4a0d      	ldr	r2, [pc, #52]	; (1000dc08 <ble_slave_security_request_handler+0x1c4>)
1000dbd2:	18ba      	adds	r2, r7, r2
1000dbd4:	8820      	ldrh	r0, [r4, #0]
1000dbd6:	2300      	movs	r3, #0
1000dbd8:	a901      	add	r1, sp, #4
1000dbda:	4c12      	ldr	r4, [pc, #72]	; (1000dc24 <ble_slave_security_request_handler+0x1e0>)
1000dbdc:	47a0      	blx	r4
1000dbde:	2800      	cmp	r0, #0
1000dbe0:	d00a      	beq.n	1000dbf8 <ble_slave_security_request_handler+0x1b4>
	{
		features.bond = false;
1000dbe2:	ab01      	add	r3, sp, #4
1000dbe4:	2200      	movs	r2, #0
1000dbe6:	709a      	strb	r2, [r3, #2]
		features.mitm_protection = false;
1000dbe8:	705a      	strb	r2, [r3, #1]
		DBG_LOG("Slave Security Req - Authentication Failed");
1000dbea:	4809      	ldr	r0, [pc, #36]	; (1000dc10 <ble_slave_security_request_handler+0x1cc>)
1000dbec:	4b09      	ldr	r3, [pc, #36]	; (1000dc14 <ble_slave_security_request_handler+0x1d0>)
1000dbee:	4798      	blx	r3
1000dbf0:	480d      	ldr	r0, [pc, #52]	; (1000dc28 <ble_slave_security_request_handler+0x1e4>)
1000dbf2:	4b0a      	ldr	r3, [pc, #40]	; (1000dc1c <ble_slave_security_request_handler+0x1d8>)
1000dbf4:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000dbf6:	20e2      	movs	r0, #226	; 0xe2
	}
	return AT_BLE_SUCCESS;
}
1000dbf8:	b004      	add	sp, #16
1000dbfa:	bc1c      	pop	{r2, r3, r4}
1000dbfc:	4690      	mov	r8, r2
1000dbfe:	4699      	mov	r9, r3
1000dc00:	46a2      	mov	sl, r4
1000dc02:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000dc04:	10014e69 	.word	0x10014e69
1000dc08:	10019fe4 	.word	0x10019fe4
1000dc0c:	1001127d 	.word	0x1001127d
1000dc10:	10016278 	.word	0x10016278
1000dc14:	100150d1 	.word	0x100150d1
1000dc18:	10017798 	.word	0x10017798
1000dc1c:	10014fb1 	.word	0x10014fb1
1000dc20:	100150e5 	.word	0x100150e5
1000dc24:	10011091 	.word	0x10011091
1000dc28:	100177b0 	.word	0x100177b0

1000dc2c <ble_pair_request_handler>:

/** @brief function handles pair request */
at_ble_status_t ble_pair_request_handler(void *params)
{
1000dc2c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000dc2e:	465f      	mov	r7, fp
1000dc30:	4656      	mov	r6, sl
1000dc32:	464d      	mov	r5, r9
1000dc34:	4644      	mov	r4, r8
1000dc36:	b4f0      	push	{r4, r5, r6, r7}
1000dc38:	b085      	sub	sp, #20
1000dc3a:	4680      	mov	r8, r0
	at_ble_pair_request_t* pair_req;
	pair_req = (at_ble_pair_request_t*)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == pair_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000dc3c:	8804      	ldrh	r4, [r0, #0]
1000dc3e:	4a54      	ldr	r2, [pc, #336]	; (1000dd90 <ble_pair_request_handler+0x164>)
1000dc40:	2100      	movs	r1, #0
	at_ble_pair_features_t features;
	uint8_t i = 0, idx;
	at_ble_pair_request_t* pair_req;
	pair_req = (at_ble_pair_request_t*)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000dc42:	2300      	movs	r3, #0
	{
		if((ble_dev_info[idx].conn_info.handle == pair_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000dc44:	8910      	ldrh	r0, [r2, #8]
1000dc46:	42a0      	cmp	r0, r4
1000dc48:	d10d      	bne.n	1000dc66 <ble_pair_request_handler+0x3a>
1000dc4a:	0010      	movs	r0, r2
1000dc4c:	305e      	adds	r0, #94	; 0x5e
1000dc4e:	7800      	ldrb	r0, [r0, #0]
1000dc50:	2802      	cmp	r0, #2
1000dc52:	d108      	bne.n	1000dc66 <ble_pair_request_handler+0x3a>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
1000dc54:	014a      	lsls	r2, r1, #5
1000dc56:	1a52      	subs	r2, r2, r1
1000dc58:	0095      	lsls	r5, r2, #2
1000dc5a:	4a4d      	ldr	r2, [pc, #308]	; (1000dd90 <ble_pair_request_handler+0x164>)
1000dc5c:	1952      	adds	r2, r2, r5
1000dc5e:	325e      	adds	r2, #94	; 0x5e
1000dc60:	2103      	movs	r1, #3
1000dc62:	7011      	strb	r1, [r2, #0]
			break;
1000dc64:	e005      	b.n	1000dc72 <ble_pair_request_handler+0x46>
	at_ble_pair_features_t features;
	uint8_t i = 0, idx;
	at_ble_pair_request_t* pair_req;
	pair_req = (at_ble_pair_request_t*)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000dc66:	3301      	adds	r3, #1
1000dc68:	b2db      	uxtb	r3, r3
1000dc6a:	3101      	adds	r1, #1
1000dc6c:	327c      	adds	r2, #124	; 0x7c
1000dc6e:	2b05      	cmp	r3, #5
1000dc70:	d1e8      	bne.n	1000dc44 <ble_pair_request_handler+0x18>
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
			break;
		}
	}
	
	features.desired_auth =  BLE_AUTHENTICATION_LEVEL; 
1000dc72:	aa01      	add	r2, sp, #4
1000dc74:	2100      	movs	r1, #0
1000dc76:	7211      	strb	r1, [r2, #8]
	features.bond = BLE_BOND_REQ;
1000dc78:	7091      	strb	r1, [r2, #2]
	features.mitm_protection = BLE_MITM_REQ;
1000dc7a:	7051      	strb	r1, [r2, #1]
	/* Device capabilities is display only , key will be generated
	and displayed */
	features.io_cababilities = BLE_IO_CAPABALITIES;
1000dc7c:	2003      	movs	r0, #3
1000dc7e:	7010      	strb	r0, [r2, #0]
	features.oob_avaiable = BLE_OOB_REQ;
1000dc80:	70d1      	strb	r1, [r2, #3]
	
	/* Distribution of LTK is required */
	if (ble_dev_info[idx].conn_info.peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE)
1000dc82:	001e      	movs	r6, r3
1000dc84:	015a      	lsls	r2, r3, #5
1000dc86:	1ad2      	subs	r2, r2, r3
1000dc88:	0092      	lsls	r2, r2, #2
1000dc8a:	4941      	ldr	r1, [pc, #260]	; (1000dd90 <ble_pair_request_handler+0x164>)
1000dc8c:	5c52      	ldrb	r2, [r2, r1]
1000dc8e:	2a02      	cmp	r2, #2
1000dc90:	d104      	bne.n	1000dc9c <ble_pair_request_handler+0x70>
	{
		/* Distribution of IRK is required */
		features.initiator_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000dc92:	aa01      	add	r2, sp, #4
1000dc94:	2103      	movs	r1, #3
1000dc96:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000dc98:	71d1      	strb	r1, [r2, #7]
1000dc9a:	e003      	b.n	1000dca4 <ble_pair_request_handler+0x78>
	}
	else
	{
		features.initiator_keys =   AT_BLE_KEY_DIST_ENC;
1000dc9c:	aa01      	add	r2, sp, #4
1000dc9e:	2101      	movs	r1, #1
1000dca0:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   AT_BLE_KEY_DIST_ENC;
1000dca2:	71d1      	strb	r1, [r2, #7]
	}
			
	features.max_key_size = 16;
1000dca4:	aa01      	add	r2, sp, #4
1000dca6:	2110      	movs	r1, #16
1000dca8:	7151      	strb	r1, [r2, #5]
	features.min_key_size = 16;
1000dcaa:	7111      	strb	r1, [r2, #4]
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
1000dcac:	0172      	lsls	r2, r6, #5
1000dcae:	1b92      	subs	r2, r2, r6
1000dcb0:	0092      	lsls	r2, r2, #2
1000dcb2:	4937      	ldr	r1, [pc, #220]	; (1000dd90 <ble_pair_request_handler+0x164>)
1000dcb4:	188a      	adds	r2, r1, r2
1000dcb6:	7e12      	ldrb	r2, [r2, #24]
1000dcb8:	2a40      	cmp	r2, #64	; 0x40
1000dcba:	d142      	bne.n	1000dd42 <ble_pair_request_handler+0x116>
1000dcbc:	015f      	lsls	r7, r3, #5
1000dcbe:	1afb      	subs	r3, r7, r3
1000dcc0:	009b      	lsls	r3, r3, #2
1000dcc2:	469b      	mov	fp, r3
1000dcc4:	001c      	movs	r4, r3
1000dcc6:	3460      	adds	r4, #96	; 0x60
1000dcc8:	1864      	adds	r4, r4, r1
1000dcca:	465d      	mov	r5, fp
1000dccc:	3568      	adds	r5, #104	; 0x68
1000dcce:	186d      	adds	r5, r5, r1
1000dcd0:	0027      	movs	r7, r4
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
		{						
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000dcd2:	4b30      	ldr	r3, [pc, #192]	; (1000dd94 <ble_pair_request_handler+0x168>)
1000dcd4:	469a      	mov	sl, r3
1000dcd6:	230f      	movs	r3, #15
1000dcd8:	4699      	mov	r9, r3
1000dcda:	47d0      	blx	sl
1000dcdc:	464b      	mov	r3, r9
1000dcde:	4018      	ands	r0, r3
1000dce0:	7038      	strb	r0, [r7, #0]
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
1000dce2:	47d0      	blx	sl
1000dce4:	464b      	mov	r3, r9
1000dce6:	4018      	ands	r0, r3
1000dce8:	74b8      	strb	r0, [r7, #18]
1000dcea:	3701      	adds	r7, #1
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
1000dcec:	42af      	cmp	r7, r5
1000dcee:	d1f4      	bne.n	1000dcda <ble_pair_request_handler+0xae>
1000dcf0:	465b      	mov	r3, fp
1000dcf2:	3370      	adds	r3, #112	; 0x70
1000dcf4:	4f26      	ldr	r7, [pc, #152]	; (1000dd90 <ble_pair_request_handler+0x164>)
1000dcf6:	19df      	adds	r7, r3, r7
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000dcf8:	4b26      	ldr	r3, [pc, #152]	; (1000dd94 <ble_pair_request_handler+0x168>)
1000dcfa:	469a      	mov	sl, r3
1000dcfc:	230f      	movs	r3, #15
1000dcfe:	4699      	mov	r9, r3
1000dd00:	47d0      	blx	sl
1000dd02:	464b      	mov	r3, r9
1000dd04:	4018      	ands	r0, r3
1000dd06:	7028      	strb	r0, [r5, #0]
1000dd08:	3501      	adds	r5, #1
		{						
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
1000dd0a:	42bd      	cmp	r5, r7
1000dd0c:	d1f8      	bne.n	1000dd00 <ble_pair_request_handler+0xd4>
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
		}
		DBG_LOG_DEV("Generated LTK: ");
1000dd0e:	4822      	ldr	r0, [pc, #136]	; (1000dd98 <ble_pair_request_handler+0x16c>)
1000dd10:	4b22      	ldr	r3, [pc, #136]	; (1000dd9c <ble_pair_request_handler+0x170>)
1000dd12:	4798      	blx	r3
1000dd14:	4822      	ldr	r0, [pc, #136]	; (1000dda0 <ble_pair_request_handler+0x174>)
1000dd16:	4b23      	ldr	r3, [pc, #140]	; (1000dda4 <ble_pair_request_handler+0x178>)
1000dd18:	4798      	blx	r3
		for (i = 0; i < 16; i++)
		{
			DBG_LOG_CONT_DEV("0x%02X ", ble_dev_info[idx].host_ltk.key[i]);
1000dd1a:	4d22      	ldr	r5, [pc, #136]	; (1000dda4 <ble_pair_request_handler+0x178>)
1000dd1c:	7821      	ldrb	r1, [r4, #0]
1000dd1e:	4822      	ldr	r0, [pc, #136]	; (1000dda8 <ble_pair_request_handler+0x17c>)
1000dd20:	47a8      	blx	r5
1000dd22:	3401      	adds	r4, #1
		for(i=8 ; i<16 ;i++)
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
		}
		DBG_LOG_DEV("Generated LTK: ");
		for (i = 0; i < 16; i++)
1000dd24:	42bc      	cmp	r4, r7
1000dd26:	d1f9      	bne.n	1000dd1c <ble_pair_request_handler+0xf0>
		{
			DBG_LOG_CONT_DEV("0x%02X ", ble_dev_info[idx].host_ltk.key[i]);
		}
		
		ble_dev_info[idx].host_ltk.ediv = rand()&0xffff;
1000dd28:	4b1a      	ldr	r3, [pc, #104]	; (1000dd94 <ble_pair_request_handler+0x168>)
1000dd2a:	4798      	blx	r3
1000dd2c:	0173      	lsls	r3, r6, #5
1000dd2e:	1b9b      	subs	r3, r3, r6
1000dd30:	009b      	lsls	r3, r3, #2
1000dd32:	4a17      	ldr	r2, [pc, #92]	; (1000dd90 <ble_pair_request_handler+0x164>)
1000dd34:	18d3      	adds	r3, r2, r3
1000dd36:	001a      	movs	r2, r3
1000dd38:	3270      	adds	r2, #112	; 0x70
1000dd3a:	8010      	strh	r0, [r2, #0]
		ble_dev_info[idx].host_ltk.key_size = 16;
1000dd3c:	337a      	adds	r3, #122	; 0x7a
1000dd3e:	2210      	movs	r2, #16
1000dd40:	701a      	strb	r2, [r3, #0]
		/* Bonding information already exists */
		
	}

	/* Send pairing response */
	DBG_LOG_DEV("Sending pairing response");
1000dd42:	4815      	ldr	r0, [pc, #84]	; (1000dd98 <ble_pair_request_handler+0x16c>)
1000dd44:	4b15      	ldr	r3, [pc, #84]	; (1000dd9c <ble_pair_request_handler+0x170>)
1000dd46:	4798      	blx	r3
1000dd48:	4818      	ldr	r0, [pc, #96]	; (1000ddac <ble_pair_request_handler+0x180>)
1000dd4a:	4b16      	ldr	r3, [pc, #88]	; (1000dda4 <ble_pair_request_handler+0x178>)
1000dd4c:	4798      	blx	r3

	if(at_ble_authenticate(pair_req->handle, &features, &ble_dev_info[idx].host_ltk, NULL) != AT_BLE_SUCCESS)
1000dd4e:	0173      	lsls	r3, r6, #5
1000dd50:	1b9b      	subs	r3, r3, r6
1000dd52:	009b      	lsls	r3, r3, #2
1000dd54:	3360      	adds	r3, #96	; 0x60
1000dd56:	4a0e      	ldr	r2, [pc, #56]	; (1000dd90 <ble_pair_request_handler+0x164>)
1000dd58:	189a      	adds	r2, r3, r2
1000dd5a:	4643      	mov	r3, r8
1000dd5c:	8818      	ldrh	r0, [r3, #0]
1000dd5e:	2300      	movs	r3, #0
1000dd60:	a901      	add	r1, sp, #4
1000dd62:	4c13      	ldr	r4, [pc, #76]	; (1000ddb0 <ble_pair_request_handler+0x184>)
1000dd64:	47a0      	blx	r4
1000dd66:	2800      	cmp	r0, #0
1000dd68:	d00a      	beq.n	1000dd80 <ble_pair_request_handler+0x154>
	{
		features.bond = false;
1000dd6a:	ab01      	add	r3, sp, #4
1000dd6c:	2200      	movs	r2, #0
1000dd6e:	709a      	strb	r2, [r3, #2]
		features.mitm_protection = false;
1000dd70:	705a      	strb	r2, [r3, #1]
		DBG_LOG("Pair Request - Authentication Failed");
1000dd72:	4809      	ldr	r0, [pc, #36]	; (1000dd98 <ble_pair_request_handler+0x16c>)
1000dd74:	4b09      	ldr	r3, [pc, #36]	; (1000dd9c <ble_pair_request_handler+0x170>)
1000dd76:	4798      	blx	r3
1000dd78:	480e      	ldr	r0, [pc, #56]	; (1000ddb4 <ble_pair_request_handler+0x188>)
1000dd7a:	4b0a      	ldr	r3, [pc, #40]	; (1000dda4 <ble_pair_request_handler+0x178>)
1000dd7c:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000dd7e:	20e2      	movs	r0, #226	; 0xe2
	}
	return AT_BLE_SUCCESS;
}
1000dd80:	b005      	add	sp, #20
1000dd82:	bc3c      	pop	{r2, r3, r4, r5}
1000dd84:	4690      	mov	r8, r2
1000dd86:	4699      	mov	r9, r3
1000dd88:	46a2      	mov	sl, r4
1000dd8a:	46ab      	mov	fp, r5
1000dd8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000dd8e:	46c0      	nop			; (mov r8, r8)
1000dd90:	10019fe4 	.word	0x10019fe4
1000dd94:	100150e5 	.word	0x100150e5
1000dd98:	10016278 	.word	0x10016278
1000dd9c:	100150d1 	.word	0x100150d1
1000dda0:	100177dc 	.word	0x100177dc
1000dda4:	10014fb1 	.word	0x10014fb1
1000dda8:	100177ec 	.word	0x100177ec
1000ddac:	100177f4 	.word	0x100177f4
1000ddb0:	10011091 	.word	0x10011091
1000ddb4:	10017810 	.word	0x10017810

1000ddb8 <ble_pair_key_request_handler>:

/** @brief function handles pair key request */
at_ble_status_t ble_pair_key_request_handler (void *params)
{
1000ddb8:	b5f0      	push	{r4, r5, r6, r7, lr}
1000ddba:	b085      	sub	sp, #20
1000ddbc:	0005      	movs	r5, r0
	at_ble_pair_key_request_t *pair_key;
	pair_key = (at_ble_pair_key_request_t *)params;
	/* Passkey has fixed value in this example MSB */
	uint8_t passkey[6]={'1','2','3','4','5','6'};
1000ddbe:	2206      	movs	r2, #6
1000ddc0:	493d      	ldr	r1, [pc, #244]	; (1000deb8 <ble_pair_key_request_handler+0x100>)
1000ddc2:	a802      	add	r0, sp, #8
1000ddc4:	4e3d      	ldr	r6, [pc, #244]	; (1000debc <ble_pair_key_request_handler+0x104>)
1000ddc6:	47b0      	blx	r6
	uint8_t idx = 0;
        uint8_t pin;
        
	at_ble_pair_key_request_t pair_key_request;
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
1000ddc8:	ac01      	add	r4, sp, #4
1000ddca:	2204      	movs	r2, #4
1000ddcc:	0029      	movs	r1, r5
1000ddce:	0020      	movs	r0, r4
1000ddd0:	47b0      	blx	r6
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
1000ddd2:	78e3      	ldrb	r3, [r4, #3]
1000ddd4:	2b00      	cmp	r3, #0
1000ddd6:	d162      	bne.n	1000de9e <ble_pair_key_request_handler+0xe6>
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
1000ddd8:	4839      	ldr	r0, [pc, #228]	; (1000dec0 <ble_pair_key_request_handler+0x108>)
1000ddda:	4b3a      	ldr	r3, [pc, #232]	; (1000dec4 <ble_pair_key_request_handler+0x10c>)
1000dddc:	4798      	blx	r3
1000ddde:	483a      	ldr	r0, [pc, #232]	; (1000dec8 <ble_pair_key_request_handler+0x110>)
1000dde0:	4b3a      	ldr	r3, [pc, #232]	; (1000decc <ble_pair_key_request_handler+0x114>)
1000dde2:	4798      	blx	r3
1000dde4:	2600      	movs	r6, #0
		for (idx = 0; idx < 6;) {          
			pin = getchar_b11_timeout(CHECK_PAIRING_KEY_TIME_OUT);
1000dde6:	4c3a      	ldr	r4, [pc, #232]	; (1000ded0 <ble_pair_key_request_handler+0x118>)
				return AT_BLE_FAILURE;
			}
			
			if ((pin >= '0') && ( pin <= '9')) {
			  passkey[idx++] = pin;
			  DBG_LOG_CONT("%c", pin);
1000dde8:	27ff      	movs	r7, #255	; 0xff
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
		for (idx = 0; idx < 6;) {          
			pin = getchar_b11_timeout(CHECK_PAIRING_KEY_TIME_OUT);
1000ddea:	201e      	movs	r0, #30
1000ddec:	47a0      	blx	r4
1000ddee:	b2c3      	uxtb	r3, r0

			if (!pin) {
1000ddf0:	2b00      	cmp	r3, #0
1000ddf2:	d11a      	bne.n	1000de2a <ble_pair_key_request_handler+0x72>
			DBG_LOG("Pin Timeout");
1000ddf4:	4f32      	ldr	r7, [pc, #200]	; (1000dec0 <ble_pair_key_request_handler+0x108>)
1000ddf6:	0038      	movs	r0, r7
1000ddf8:	4e32      	ldr	r6, [pc, #200]	; (1000dec4 <ble_pair_key_request_handler+0x10c>)
1000ddfa:	47b0      	blx	r6
1000ddfc:	4835      	ldr	r0, [pc, #212]	; (1000ded4 <ble_pair_key_request_handler+0x11c>)
1000ddfe:	4c33      	ldr	r4, [pc, #204]	; (1000decc <ble_pair_key_request_handler+0x114>)
1000de00:	47a0      	blx	r4
				DBG_LOG("Disconnecting ...");
1000de02:	0038      	movs	r0, r7
1000de04:	47b0      	blx	r6
1000de06:	4834      	ldr	r0, [pc, #208]	; (1000ded8 <ble_pair_key_request_handler+0x120>)
1000de08:	47a0      	blx	r4
				if (!(at_ble_disconnect(pair_key->handle,
1000de0a:	8828      	ldrh	r0, [r5, #0]
1000de0c:	2113      	movs	r1, #19
1000de0e:	4b33      	ldr	r3, [pc, #204]	; (1000dedc <ble_pair_key_request_handler+0x124>)
1000de10:	4798      	blx	r3
1000de12:	0003      	movs	r3, r0
							AT_BLE_TERMINATED_BY_USER) == AT_BLE_SUCCESS)) {
					DBG_LOG("Disconnect Request Failed");
				}
				return AT_BLE_FAILURE;
1000de14:	20e2      	movs	r0, #226	; 0xe2
			pin = getchar_b11_timeout(CHECK_PAIRING_KEY_TIME_OUT);

			if (!pin) {
			DBG_LOG("Pin Timeout");
				DBG_LOG("Disconnecting ...");
				if (!(at_ble_disconnect(pair_key->handle,
1000de16:	2b00      	cmp	r3, #0
1000de18:	d04c      	beq.n	1000deb4 <ble_pair_key_request_handler+0xfc>
							AT_BLE_TERMINATED_BY_USER) == AT_BLE_SUCCESS)) {
					DBG_LOG("Disconnect Request Failed");
1000de1a:	4829      	ldr	r0, [pc, #164]	; (1000dec0 <ble_pair_key_request_handler+0x108>)
1000de1c:	4b29      	ldr	r3, [pc, #164]	; (1000dec4 <ble_pair_key_request_handler+0x10c>)
1000de1e:	4798      	blx	r3
1000de20:	482f      	ldr	r0, [pc, #188]	; (1000dee0 <ble_pair_key_request_handler+0x128>)
1000de22:	4b2a      	ldr	r3, [pc, #168]	; (1000decc <ble_pair_key_request_handler+0x114>)
1000de24:	4798      	blx	r3
				}
				return AT_BLE_FAILURE;
1000de26:	20e2      	movs	r0, #226	; 0xe2
1000de28:	e044      	b.n	1000deb4 <ble_pair_key_request_handler+0xfc>
			}
			
			if ((pin >= '0') && ( pin <= '9')) {
1000de2a:	001a      	movs	r2, r3
1000de2c:	3a30      	subs	r2, #48	; 0x30
1000de2e:	2a09      	cmp	r2, #9
1000de30:	d8db      	bhi.n	1000ddea <ble_pair_key_request_handler+0x32>
			  passkey[idx++] = pin;
1000de32:	aa02      	add	r2, sp, #8
1000de34:	54b3      	strb	r3, [r6, r2]
			  DBG_LOG_CONT("%c", pin);
1000de36:	4038      	ands	r0, r7
1000de38:	4b2a      	ldr	r3, [pc, #168]	; (1000dee4 <ble_pair_key_request_handler+0x12c>)
1000de3a:	4798      	blx	r3
1000de3c:	3601      	adds	r6, #1
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
		for (idx = 0; idx < 6;) {          
1000de3e:	2e06      	cmp	r6, #6
1000de40:	d026      	beq.n	1000de90 <ble_pair_key_request_handler+0xd8>
1000de42:	e7d2      	b.n	1000ddea <ble_pair_key_request_handler+0x32>
          {
            DBG_LOG("Entered Pass-code:");
          }
          else
          {
            DBG_LOG("Please Enter the following Pass-code(on other Device):");
1000de44:	481e      	ldr	r0, [pc, #120]	; (1000dec0 <ble_pair_key_request_handler+0x108>)
1000de46:	4b1f      	ldr	r3, [pc, #124]	; (1000dec4 <ble_pair_key_request_handler+0x10c>)
1000de48:	4798      	blx	r3
1000de4a:	4827      	ldr	r0, [pc, #156]	; (1000dee8 <ble_pair_key_request_handler+0x130>)
1000de4c:	4b1f      	ldr	r3, [pc, #124]	; (1000decc <ble_pair_key_request_handler+0x114>)
1000de4e:	4798      	blx	r3
	at_ble_pair_key_request_t pair_key_request;
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
1000de50:	2400      	movs	r4, #0
          
          /* Convert passkey to ASCII format */
          for(idx=0; idx<AT_BLE_PASSKEY_LEN; idx++)
          {
                  passkey[idx] = (passkey[idx]);
                  DBG_LOG_CONT("%c",passkey[idx]);
1000de52:	4e24      	ldr	r6, [pc, #144]	; (1000dee4 <ble_pair_key_request_handler+0x12c>)
          }
          
          /* Convert passkey to ASCII format */
          for(idx=0; idx<AT_BLE_PASSKEY_LEN; idx++)
          {
                  passkey[idx] = (passkey[idx]);
1000de54:	ab02      	add	r3, sp, #8
                  DBG_LOG_CONT("%c",passkey[idx]);
1000de56:	5ce0      	ldrb	r0, [r4, r3]
1000de58:	47b0      	blx	r6
1000de5a:	3401      	adds	r4, #1
          {
            DBG_LOG("Please Enter the following Pass-code(on other Device):");
          }
          
          /* Convert passkey to ASCII format */
          for(idx=0; idx<AT_BLE_PASSKEY_LEN; idx++)
1000de5c:	2c06      	cmp	r4, #6
1000de5e:	d1f9      	bne.n	1000de54 <ble_pair_key_request_handler+0x9c>
          {
                  passkey[idx] = (passkey[idx]);
                  DBG_LOG_CONT("%c",passkey[idx]);
          }		
          
          if(!((at_ble_pair_key_reply(pair_key->handle, pair_key_request.type, passkey)) == AT_BLE_SUCCESS))
1000de60:	ab01      	add	r3, sp, #4
1000de62:	7899      	ldrb	r1, [r3, #2]
1000de64:	8828      	ldrh	r0, [r5, #0]
1000de66:	aa02      	add	r2, sp, #8
1000de68:	4b20      	ldr	r3, [pc, #128]	; (1000deec <ble_pair_key_request_handler+0x134>)
1000de6a:	4798      	blx	r3
1000de6c:	2800      	cmp	r0, #0
1000de6e:	d021      	beq.n	1000deb4 <ble_pair_key_request_handler+0xfc>
          {
                  DBG_LOG("Pair-key reply failed");
1000de70:	4813      	ldr	r0, [pc, #76]	; (1000dec0 <ble_pair_key_request_handler+0x108>)
1000de72:	4b14      	ldr	r3, [pc, #80]	; (1000dec4 <ble_pair_key_request_handler+0x10c>)
1000de74:	4798      	blx	r3
1000de76:	481e      	ldr	r0, [pc, #120]	; (1000def0 <ble_pair_key_request_handler+0x138>)
1000de78:	4b14      	ldr	r3, [pc, #80]	; (1000decc <ble_pair_key_request_handler+0x114>)
1000de7a:	4798      	blx	r3
		if(pair_key_request.type == AT_BLE_PAIR_OOB)
		{
			DBG_LOG("OOB Feature Not supported");
		}
	}
	return AT_BLE_SUCCESS;	
1000de7c:	2000      	movs	r0, #0
1000de7e:	e019      	b.n	1000deb4 <ble_pair_key_request_handler+0xfc>
	}
	else 
	{
		if(pair_key_request.type == AT_BLE_PAIR_OOB)
		{
			DBG_LOG("OOB Feature Not supported");
1000de80:	480f      	ldr	r0, [pc, #60]	; (1000dec0 <ble_pair_key_request_handler+0x108>)
1000de82:	4b10      	ldr	r3, [pc, #64]	; (1000dec4 <ble_pair_key_request_handler+0x10c>)
1000de84:	4798      	blx	r3
1000de86:	481b      	ldr	r0, [pc, #108]	; (1000def4 <ble_pair_key_request_handler+0x13c>)
1000de88:	4b10      	ldr	r3, [pc, #64]	; (1000decc <ble_pair_key_request_handler+0x114>)
1000de8a:	4798      	blx	r3
		}
	}
	return AT_BLE_SUCCESS;	
1000de8c:	2000      	movs	r0, #0
1000de8e:	e011      	b.n	1000deb4 <ble_pair_key_request_handler+0xfc>
	if(((pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_DISPLAY) &&
	   (pair_key_request.type == AT_BLE_PAIR_PASSKEY)) || (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY))
	{
          if(pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY)
          {
            DBG_LOG("Entered Pass-code:");
1000de90:	480b      	ldr	r0, [pc, #44]	; (1000dec0 <ble_pair_key_request_handler+0x108>)
1000de92:	4b0c      	ldr	r3, [pc, #48]	; (1000dec4 <ble_pair_key_request_handler+0x10c>)
1000de94:	4798      	blx	r3
1000de96:	4818      	ldr	r0, [pc, #96]	; (1000def8 <ble_pair_key_request_handler+0x140>)
1000de98:	4b0c      	ldr	r3, [pc, #48]	; (1000decc <ble_pair_key_request_handler+0x114>)
1000de9a:	4798      	blx	r3
1000de9c:	e7d8      	b.n	1000de50 <ble_pair_key_request_handler+0x98>
			} 
	  }
	}	
	
	/* Display passkey */
	if(((pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_DISPLAY) &&
1000de9e:	ab01      	add	r3, sp, #4
1000dea0:	885a      	ldrh	r2, [r3, #2]
1000dea2:	2380      	movs	r3, #128	; 0x80
1000dea4:	005b      	lsls	r3, r3, #1
1000dea6:	429a      	cmp	r2, r3
1000dea8:	d0cc      	beq.n	1000de44 <ble_pair_key_request_handler+0x8c>
                  DBG_LOG("Pair-key reply failed");
          }
	}
	else 
	{
		if(pair_key_request.type == AT_BLE_PAIR_OOB)
1000deaa:	ab01      	add	r3, sp, #4
1000deac:	789b      	ldrb	r3, [r3, #2]
1000deae:	2b01      	cmp	r3, #1
1000deb0:	d0e6      	beq.n	1000de80 <ble_pair_key_request_handler+0xc8>
		{
			DBG_LOG("OOB Feature Not supported");
		}
	}
	return AT_BLE_SUCCESS;	
1000deb2:	2000      	movs	r0, #0
}
1000deb4:	b005      	add	sp, #20
1000deb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000deb8:	100173f8 	.word	0x100173f8
1000debc:	10014e57 	.word	0x10014e57
1000dec0:	10016278 	.word	0x10016278
1000dec4:	100150d1 	.word	0x100150d1
1000dec8:	10017838 	.word	0x10017838
1000decc:	10014fb1 	.word	0x10014fb1
1000ded0:	1000ebe1 	.word	0x1000ebe1
1000ded4:	10017860 	.word	0x10017860
1000ded8:	1001786c 	.word	0x1001786c
1000dedc:	10010699 	.word	0x10010699
1000dee0:	10017718 	.word	0x10017718
1000dee4:	10014fe5 	.word	0x10014fe5
1000dee8:	10017880 	.word	0x10017880
1000deec:	100111c1 	.word	0x100111c1
1000def0:	100178b8 	.word	0x100178b8
1000def4:	100178d0 	.word	0x100178d0
1000def8:	100178ec 	.word	0x100178ec

1000defc <ble_encryption_request_handler>:
	return AT_BLE_SUCCESS;
}

/** @brief function handles encryption requests */
at_ble_status_t ble_encryption_request_handler(void *params)
{
1000defc:	b5f0      	push	{r4, r5, r6, r7, lr}
1000defe:	465f      	mov	r7, fp
1000df00:	4656      	mov	r6, sl
1000df02:	464d      	mov	r5, r9
1000df04:	b4e0      	push	{r5, r6, r7}
1000df06:	0006      	movs	r6, r0
	uint8_t idx;
	enc_req = (at_ble_encryption_request_t *)params;

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == enc_req->handle) && (ble_dev_info[idx].conn_state != BLE_DEVICE_DISCONNECTED) &&
1000df08:	8800      	ldrh	r0, [r0, #0]
1000df0a:	4b49      	ldr	r3, [pc, #292]	; (1000e030 <ble_encryption_request_handler+0x134>)
1000df0c:	2200      	movs	r2, #0
	bool key_found = false;
	bool device_found = false;
	uint8_t idx;
	enc_req = (at_ble_encryption_request_t *)params;

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000df0e:	2400      	movs	r4, #0
	{
		if((ble_dev_info[idx].conn_info.handle == enc_req->handle) && (ble_dev_info[idx].conn_state != BLE_DEVICE_DISCONNECTED) &&
1000df10:	8919      	ldrh	r1, [r3, #8]
1000df12:	4281      	cmp	r1, r0
1000df14:	d137      	bne.n	1000df86 <ble_encryption_request_handler+0x8a>
1000df16:	0019      	movs	r1, r3
1000df18:	315e      	adds	r1, #94	; 0x5e
1000df1a:	7809      	ldrb	r1, [r1, #0]
1000df1c:	2901      	cmp	r1, #1
1000df1e:	d932      	bls.n	1000df86 <ble_encryption_request_handler+0x8a>
		(ble_dev_info[idx].conn_state != BLE_DEVICE_DEFAULT_IDLE))
		{
			device_found = true;
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_STATE;
1000df20:	4f43      	ldr	r7, [pc, #268]	; (1000e030 <ble_encryption_request_handler+0x134>)
1000df22:	0153      	lsls	r3, r2, #5
1000df24:	1a9d      	subs	r5, r3, r2
1000df26:	00ad      	lsls	r5, r5, #2
1000df28:	197d      	adds	r5, r7, r5
1000df2a:	355e      	adds	r5, #94	; 0x5e
1000df2c:	2306      	movs	r3, #6
1000df2e:	702b      	strb	r3, [r5, #0]
			DBG_LOG_DEV("ENC-Req: Conn Handle Device Found:hdl:%d", enc_req->handle);
1000df30:	4840      	ldr	r0, [pc, #256]	; (1000e034 <ble_encryption_request_handler+0x138>)
1000df32:	4b41      	ldr	r3, [pc, #260]	; (1000e038 <ble_encryption_request_handler+0x13c>)
1000df34:	469a      	mov	sl, r3
1000df36:	4798      	blx	r3
1000df38:	8831      	ldrh	r1, [r6, #0]
1000df3a:	4840      	ldr	r0, [pc, #256]	; (1000e03c <ble_encryption_request_handler+0x140>)
1000df3c:	4b40      	ldr	r3, [pc, #256]	; (1000e040 <ble_encryption_request_handler+0x144>)
1000df3e:	4699      	mov	r9, r3
1000df40:	4798      	blx	r3
		}
	}
	
	if (device_found)
	{
		DBG_LOG_DEV("host device ediv %x",ble_dev_info[idx].host_ltk.ediv);
1000df42:	483c      	ldr	r0, [pc, #240]	; (1000e034 <ble_encryption_request_handler+0x138>)
1000df44:	47d0      	blx	sl
1000df46:	0163      	lsls	r3, r4, #5
1000df48:	1b1b      	subs	r3, r3, r4
1000df4a:	009b      	lsls	r3, r3, #2
1000df4c:	18ff      	adds	r7, r7, r3
1000df4e:	2370      	movs	r3, #112	; 0x70
1000df50:	469b      	mov	fp, r3
1000df52:	44bb      	add	fp, r7
1000df54:	465b      	mov	r3, fp
1000df56:	8819      	ldrh	r1, [r3, #0]
1000df58:	483a      	ldr	r0, [pc, #232]	; (1000e044 <ble_encryption_request_handler+0x148>)
1000df5a:	47c8      	blx	r9
		DBG_LOG_DEV("peer device ediv %x",ble_dev_info[idx].bond_info.peer_ltk.ediv);
1000df5c:	4835      	ldr	r0, [pc, #212]	; (1000e034 <ble_encryption_request_handler+0x138>)
1000df5e:	47d0      	blx	sl
1000df60:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
1000df62:	4839      	ldr	r0, [pc, #228]	; (1000e048 <ble_encryption_request_handler+0x14c>)
1000df64:	47c8      	blx	r9
		DBG_LOG_DEV("enc_req ediv %x", enc_req->ediv);
1000df66:	4833      	ldr	r0, [pc, #204]	; (1000e034 <ble_encryption_request_handler+0x138>)
1000df68:	47d0      	blx	sl
1000df6a:	8871      	ldrh	r1, [r6, #2]
1000df6c:	4837      	ldr	r0, [pc, #220]	; (1000e04c <ble_encryption_request_handler+0x150>)
1000df6e:	47c8      	blx	r9
		DBG_LOG_DEV("The index is %d",idx);
1000df70:	4830      	ldr	r0, [pc, #192]	; (1000e034 <ble_encryption_request_handler+0x138>)
1000df72:	47d0      	blx	sl
1000df74:	0021      	movs	r1, r4
1000df76:	4836      	ldr	r0, [pc, #216]	; (1000e050 <ble_encryption_request_handler+0x154>)
1000df78:	47c8      	blx	r9
		if((ble_dev_info[idx].host_ltk.ediv == enc_req->ediv)
1000df7a:	465b      	mov	r3, fp
1000df7c:	881a      	ldrh	r2, [r3, #0]
1000df7e:	8873      	ldrh	r3, [r6, #2]
1000df80:	429a      	cmp	r2, r3
1000df82:	d12a      	bne.n	1000dfda <ble_encryption_request_handler+0xde>
1000df84:	e006      	b.n	1000df94 <ble_encryption_request_handler+0x98>
	bool key_found = false;
	bool device_found = false;
	uint8_t idx;
	enc_req = (at_ble_encryption_request_t *)params;

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000df86:	3401      	adds	r4, #1
1000df88:	b2e4      	uxtb	r4, r4
1000df8a:	3201      	adds	r2, #1
1000df8c:	337c      	adds	r3, #124	; 0x7c
1000df8e:	2c05      	cmp	r4, #5
1000df90:	d1be      	bne.n	1000df10 <ble_encryption_request_handler+0x14>
1000df92:	e022      	b.n	1000dfda <ble_encryption_request_handler+0xde>
		DBG_LOG_DEV("host device ediv %x",ble_dev_info[idx].host_ltk.ediv);
		DBG_LOG_DEV("peer device ediv %x",ble_dev_info[idx].bond_info.peer_ltk.ediv);
		DBG_LOG_DEV("enc_req ediv %x", enc_req->ediv);
		DBG_LOG_DEV("The index is %d",idx);
		if((ble_dev_info[idx].host_ltk.ediv == enc_req->ediv)
		&& !memcmp(&enc_req->nb[0],&ble_dev_info[idx].host_ltk.nb[0],8))
1000df94:	0161      	lsls	r1, r4, #5
1000df96:	1b09      	subs	r1, r1, r4
1000df98:	0089      	lsls	r1, r1, #2
1000df9a:	4b25      	ldr	r3, [pc, #148]	; (1000e030 <ble_encryption_request_handler+0x134>)
1000df9c:	1859      	adds	r1, r3, r1
1000df9e:	3172      	adds	r1, #114	; 0x72
1000dfa0:	1d30      	adds	r0, r6, #4
1000dfa2:	2208      	movs	r2, #8
1000dfa4:	4b2b      	ldr	r3, [pc, #172]	; (1000e054 <ble_encryption_request_handler+0x158>)
1000dfa6:	4798      	blx	r3
1000dfa8:	2800      	cmp	r0, #0
1000dfaa:	d116      	bne.n	1000dfda <ble_encryption_request_handler+0xde>
		{
			key_found = true;
			DBG_LOG_DEV("ENC-Req: Key Found");
1000dfac:	4821      	ldr	r0, [pc, #132]	; (1000e034 <ble_encryption_request_handler+0x138>)
1000dfae:	4b22      	ldr	r3, [pc, #136]	; (1000e038 <ble_encryption_request_handler+0x13c>)
1000dfb0:	4798      	blx	r3
1000dfb2:	4829      	ldr	r0, [pc, #164]	; (1000e058 <ble_encryption_request_handler+0x15c>)
1000dfb4:	4b22      	ldr	r3, [pc, #136]	; (1000e040 <ble_encryption_request_handler+0x144>)
1000dfb6:	4798      	blx	r3
	    DBG_LOG("Please unpair the device from peer device(mobile) settings menu and start pairing again");
		at_ble_disconnect(ble_dev_info[idx].conn_info.handle, AT_BLE_AUTH_FAILURE);
		return AT_BLE_FAILURE;
    }

	if(!(at_ble_encryption_request_reply(enc_req->handle, ble_dev_info[idx].bond_info.auth, key_found, &ble_dev_info[idx].host_ltk) == AT_BLE_SUCCESS))
1000dfb8:	0162      	lsls	r2, r4, #5
1000dfba:	1b13      	subs	r3, r2, r4
1000dfbc:	009b      	lsls	r3, r3, #2
1000dfbe:	3360      	adds	r3, #96	; 0x60
1000dfc0:	491b      	ldr	r1, [pc, #108]	; (1000e030 <ble_encryption_request_handler+0x134>)
1000dfc2:	185b      	adds	r3, r3, r1
1000dfc4:	1b12      	subs	r2, r2, r4
1000dfc6:	0092      	lsls	r2, r2, #2
1000dfc8:	188a      	adds	r2, r1, r2
1000dfca:	7d11      	ldrb	r1, [r2, #20]
1000dfcc:	8830      	ldrh	r0, [r6, #0]
1000dfce:	2201      	movs	r2, #1
1000dfd0:	4c22      	ldr	r4, [pc, #136]	; (1000e05c <ble_encryption_request_handler+0x160>)
1000dfd2:	47a0      	blx	r4
1000dfd4:	1e04      	subs	r4, r0, #0
1000dfd6:	d01e      	beq.n	1000e016 <ble_encryption_request_handler+0x11a>
1000dfd8:	e015      	b.n	1000e006 <ble_encryption_request_handler+0x10a>
	}
	
	
    if(key_found == false)
    {
	    DBG_LOG("Pairing information of peer device is not available.");
1000dfda:	4f16      	ldr	r7, [pc, #88]	; (1000e034 <ble_encryption_request_handler+0x138>)
1000dfdc:	0038      	movs	r0, r7
1000dfde:	4e16      	ldr	r6, [pc, #88]	; (1000e038 <ble_encryption_request_handler+0x13c>)
1000dfe0:	47b0      	blx	r6
1000dfe2:	481f      	ldr	r0, [pc, #124]	; (1000e060 <ble_encryption_request_handler+0x164>)
1000dfe4:	4d16      	ldr	r5, [pc, #88]	; (1000e040 <ble_encryption_request_handler+0x144>)
1000dfe6:	47a8      	blx	r5
	    DBG_LOG("Please unpair the device from peer device(mobile) settings menu and start pairing again");
1000dfe8:	0038      	movs	r0, r7
1000dfea:	47b0      	blx	r6
1000dfec:	481d      	ldr	r0, [pc, #116]	; (1000e064 <ble_encryption_request_handler+0x168>)
1000dfee:	47a8      	blx	r5
		at_ble_disconnect(ble_dev_info[idx].conn_info.handle, AT_BLE_AUTH_FAILURE);
1000dff0:	0163      	lsls	r3, r4, #5
1000dff2:	1b1c      	subs	r4, r3, r4
1000dff4:	00a4      	lsls	r4, r4, #2
1000dff6:	4b0e      	ldr	r3, [pc, #56]	; (1000e030 <ble_encryption_request_handler+0x134>)
1000dff8:	191c      	adds	r4, r3, r4
1000dffa:	8920      	ldrh	r0, [r4, #8]
1000dffc:	2105      	movs	r1, #5
1000dffe:	4b1a      	ldr	r3, [pc, #104]	; (1000e068 <ble_encryption_request_handler+0x16c>)
1000e000:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000e002:	24e2      	movs	r4, #226	; 0xe2
1000e004:	e00d      	b.n	1000e022 <ble_encryption_request_handler+0x126>
    }

	if(!(at_ble_encryption_request_reply(enc_req->handle, ble_dev_info[idx].bond_info.auth, key_found, &ble_dev_info[idx].host_ltk) == AT_BLE_SUCCESS))
	{
		DBG_LOG("Encryption Request Reply Failed");
1000e006:	480b      	ldr	r0, [pc, #44]	; (1000e034 <ble_encryption_request_handler+0x138>)
1000e008:	4b0b      	ldr	r3, [pc, #44]	; (1000e038 <ble_encryption_request_handler+0x13c>)
1000e00a:	4798      	blx	r3
1000e00c:	4817      	ldr	r0, [pc, #92]	; (1000e06c <ble_encryption_request_handler+0x170>)
1000e00e:	4b0c      	ldr	r3, [pc, #48]	; (1000e040 <ble_encryption_request_handler+0x144>)
1000e010:	4798      	blx	r3
	}
	else
	{      
		DBG_LOG_DEV("Encryption Request Reply");
	}
	return AT_BLE_SUCCESS;
1000e012:	2400      	movs	r4, #0
1000e014:	e005      	b.n	1000e022 <ble_encryption_request_handler+0x126>
	{
		DBG_LOG("Encryption Request Reply Failed");
	}
	else
	{      
		DBG_LOG_DEV("Encryption Request Reply");
1000e016:	4807      	ldr	r0, [pc, #28]	; (1000e034 <ble_encryption_request_handler+0x138>)
1000e018:	4b07      	ldr	r3, [pc, #28]	; (1000e038 <ble_encryption_request_handler+0x13c>)
1000e01a:	4798      	blx	r3
1000e01c:	4814      	ldr	r0, [pc, #80]	; (1000e070 <ble_encryption_request_handler+0x174>)
1000e01e:	4b08      	ldr	r3, [pc, #32]	; (1000e040 <ble_encryption_request_handler+0x144>)
1000e020:	4798      	blx	r3
	}
	return AT_BLE_SUCCESS;
}
1000e022:	0020      	movs	r0, r4
1000e024:	bc1c      	pop	{r2, r3, r4}
1000e026:	4691      	mov	r9, r2
1000e028:	469a      	mov	sl, r3
1000e02a:	46a3      	mov	fp, r4
1000e02c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000e02e:	46c0      	nop			; (mov r8, r8)
1000e030:	10019fe4 	.word	0x10019fe4
1000e034:	10016278 	.word	0x10016278
1000e038:	100150d1 	.word	0x100150d1
1000e03c:	10017900 	.word	0x10017900
1000e040:	10014fb1 	.word	0x10014fb1
1000e044:	1001792c 	.word	0x1001792c
1000e048:	10017940 	.word	0x10017940
1000e04c:	10017954 	.word	0x10017954
1000e050:	10017964 	.word	0x10017964
1000e054:	10014e39 	.word	0x10014e39
1000e058:	10017974 	.word	0x10017974
1000e05c:	100112f5 	.word	0x100112f5
1000e060:	10017988 	.word	0x10017988
1000e064:	100179c0 	.word	0x100179c0
1000e068:	10010699 	.word	0x10010699
1000e06c:	10017a18 	.word	0x10017a18
1000e070:	10017a38 	.word	0x10017a38

1000e074 <ble_mgr_events_callback_handler>:
}

bool ble_mgr_events_callback_handler(ble_mgr_event_cb_t event_cb_type, 
									ble_mgr_event_t event_type,
									const ble_event_callback_t *ble_event_handler)
{
1000e074:	b530      	push	{r4, r5, lr}
	uint8_t idx;
	uint8_t max_event_handler = 0;
	bool status = true;
	const ble_event_callback_t **ble_event_cb_ptr = NULL;
	if (ble_event_handler != NULL)
1000e076:	2a00      	cmp	r2, #0
1000e078:	d047      	beq.n	1000e10a <ble_mgr_events_callback_handler+0x96>
	{
		switch(event_type)
1000e07a:	2906      	cmp	r1, #6
1000e07c:	d847      	bhi.n	1000e10e <ble_mgr_events_callback_handler+0x9a>
1000e07e:	0089      	lsls	r1, r1, #2
1000e080:	4b28      	ldr	r3, [pc, #160]	; (1000e124 <ble_mgr_events_callback_handler+0xb0>)
1000e082:	585b      	ldr	r3, [r3, r1]
1000e084:	469f      	mov	pc, r3
			}
			break;
			
			case BLE_GATT_SERVER_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_gatt_server_event_cb;
1000e086:	4b28      	ldr	r3, [pc, #160]	; (1000e128 <ble_mgr_events_callback_handler+0xb4>)
				max_event_handler = MAX_GATT_SERVER_SUBSCRIBERS;
1000e088:	2405      	movs	r4, #5
1000e08a:	e00a      	b.n	1000e0a2 <ble_mgr_events_callback_handler+0x2e>
			}
			break;
			
			case BLE_GATT_HTPT_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_htpt_event_cb;
1000e08c:	4b27      	ldr	r3, [pc, #156]	; (1000e12c <ble_mgr_events_callback_handler+0xb8>)
				max_event_handler = MAX_HTPT_EVENT_SUBSCRIBERS;
1000e08e:	2401      	movs	r4, #1
			}
			break;
1000e090:	e007      	b.n	1000e0a2 <ble_mgr_events_callback_handler+0x2e>
			
			case BLE_DTM_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_dtm_event_cb;
1000e092:	4b27      	ldr	r3, [pc, #156]	; (1000e130 <ble_mgr_events_callback_handler+0xbc>)
				max_event_handler = MAX_DTM_EVENT_SUBSCRIBERS;
1000e094:	2405      	movs	r4, #5
			}
			break;
1000e096:	e004      	b.n	1000e0a2 <ble_mgr_events_callback_handler+0x2e>
			
			case BLE_CUSTOM_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_custom_event_cb;
1000e098:	4b26      	ldr	r3, [pc, #152]	; (1000e134 <ble_mgr_events_callback_handler+0xc0>)
				max_event_handler = MAX_CUSTOM_EVENT_SUBSCRIBERS;
1000e09a:	2401      	movs	r4, #1
			}
			break;
1000e09c:	e001      	b.n	1000e0a2 <ble_mgr_events_callback_handler+0x2e>
	{
		switch(event_type)
		{
			case BLE_GAP_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_gap_event_cb;
1000e09e:	4b26      	ldr	r3, [pc, #152]	; (1000e138 <ble_mgr_events_callback_handler+0xc4>)
				max_event_handler = MAX_GAP_EVENT_SUBSCRIBERS;
1000e0a0:	2405      	movs	r4, #5
		}
		
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
			if (event_cb_type == REGISTER_CALL_BACK)
1000e0a2:	2800      	cmp	r0, #0
1000e0a4:	d116      	bne.n	1000e0d4 <ble_mgr_events_callback_handler+0x60>
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == NULL)
1000e0a6:	6819      	ldr	r1, [r3, #0]
1000e0a8:	2900      	cmp	r1, #0
1000e0aa:	d10b      	bne.n	1000e0c4 <ble_mgr_events_callback_handler+0x50>
1000e0ac:	e006      	b.n	1000e0bc <ble_mgr_events_callback_handler+0x48>
1000e0ae:	001d      	movs	r5, r3
1000e0b0:	3304      	adds	r3, #4
1000e0b2:	1f18      	subs	r0, r3, #4
1000e0b4:	6800      	ldr	r0, [r0, #0]
1000e0b6:	2800      	cmp	r0, #0
1000e0b8:	d106      	bne.n	1000e0c8 <ble_mgr_events_callback_handler+0x54>
1000e0ba:	e000      	b.n	1000e0be <ble_mgr_events_callback_handler+0x4a>
1000e0bc:	001d      	movs	r5, r3
					{
						ble_event_cb_ptr[idx] = ble_event_handler;
1000e0be:	602a      	str	r2, [r5, #0]
						status = true; //Successfully registered to table
1000e0c0:	2101      	movs	r1, #1
						break;
1000e0c2:	e02c      	b.n	1000e11e <ble_mgr_events_callback_handler+0xaa>
1000e0c4:	3304      	adds	r3, #4
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
			if (event_cb_type == REGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == NULL)
1000e0c6:	2100      	movs	r1, #0
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
			if (event_cb_type == REGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
1000e0c8:	3101      	adds	r1, #1
1000e0ca:	b2c9      	uxtb	r1, r1
1000e0cc:	42a1      	cmp	r1, r4
1000e0ce:	d3ee      	bcc.n	1000e0ae <ble_mgr_events_callback_handler+0x3a>
			break;
		}
		
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
1000e0d0:	2100      	movs	r1, #0
1000e0d2:	e024      	b.n	1000e11e <ble_mgr_events_callback_handler+0xaa>
1000e0d4:	2100      	movs	r1, #0
						status = true; //Successfully registered to table
						break;
					}
				}
			}
			else if(event_cb_type == UNREGISTER_CALL_BACK)
1000e0d6:	2801      	cmp	r0, #1
1000e0d8:	d121      	bne.n	1000e11e <ble_mgr_events_callback_handler+0xaa>
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == ble_event_handler)
1000e0da:	6819      	ldr	r1, [r3, #0]
1000e0dc:	428a      	cmp	r2, r1
1000e0de:	d10c      	bne.n	1000e0fa <ble_mgr_events_callback_handler+0x86>
1000e0e0:	e006      	b.n	1000e0f0 <ble_mgr_events_callback_handler+0x7c>
1000e0e2:	001d      	movs	r5, r3
1000e0e4:	3304      	adds	r3, #4
1000e0e6:	1f18      	subs	r0, r3, #4
1000e0e8:	6800      	ldr	r0, [r0, #0]
1000e0ea:	4282      	cmp	r2, r0
1000e0ec:	d107      	bne.n	1000e0fe <ble_mgr_events_callback_handler+0x8a>
1000e0ee:	e000      	b.n	1000e0f2 <ble_mgr_events_callback_handler+0x7e>
1000e0f0:	001d      	movs	r5, r3
					{
						ble_event_cb_ptr[idx] = NULL;
1000e0f2:	2300      	movs	r3, #0
1000e0f4:	602b      	str	r3, [r5, #0]
						status = true;//Successfully unregistered from table
1000e0f6:	2101      	movs	r1, #1
						break;
1000e0f8:	e011      	b.n	1000e11e <ble_mgr_events_callback_handler+0xaa>
1000e0fa:	3304      	adds	r3, #4
			}
			else if(event_cb_type == UNREGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == ble_event_handler)
1000e0fc:	2100      	movs	r1, #0
					}
				}
			}
			else if(event_cb_type == UNREGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
1000e0fe:	3101      	adds	r1, #1
1000e100:	b2c9      	uxtb	r1, r1
1000e102:	42a1      	cmp	r1, r4
1000e104:	d3ed      	bcc.n	1000e0e2 <ble_mgr_events_callback_handler+0x6e>
			break;
		}
		
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
1000e106:	2100      	movs	r1, #0
1000e108:	e009      	b.n	1000e11e <ble_mgr_events_callback_handler+0xaa>
			}			
		}
	}
	else
	{
		status = false; //Invalid parameter
1000e10a:	2100      	movs	r1, #0
1000e10c:	e007      	b.n	1000e11e <ble_mgr_events_callback_handler+0xaa>
	uint8_t max_event_handler = 0;
	bool status = true;
	const ble_event_callback_t **ble_event_cb_ptr = NULL;
	if (ble_event_handler != NULL)
	{
		switch(event_type)
1000e10e:	2100      	movs	r1, #0
1000e110:	e005      	b.n	1000e11e <ble_mgr_events_callback_handler+0xaa>
			}
			break;
			
			case BLE_GATT_CLIENT_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_gatt_client_event_cb;
1000e112:	4b0a      	ldr	r3, [pc, #40]	; (1000e13c <ble_mgr_events_callback_handler+0xc8>)
				max_event_handler = MAX_GATT_CLIENT_SUBSCRIBERS;
1000e114:	2405      	movs	r4, #5
1000e116:	e7c4      	b.n	1000e0a2 <ble_mgr_events_callback_handler+0x2e>
			}
			break;
			
			case BLE_L2CAP_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_l2cap_event_cb;
1000e118:	4b09      	ldr	r3, [pc, #36]	; (1000e140 <ble_mgr_events_callback_handler+0xcc>)
				max_event_handler = MAX_L2CAP_EVENT_SUBSCRIBERS;
1000e11a:	2401      	movs	r4, #1
1000e11c:	e7c1      	b.n	1000e0a2 <ble_mgr_events_callback_handler+0x2e>
	else
	{
		status = false; //Invalid parameter
	}
	return status;
}
1000e11e:	0008      	movs	r0, r1
1000e120:	bd30      	pop	{r4, r5, pc}
1000e122:	46c0      	nop			; (mov r8, r8)
1000e124:	100172ec 	.word	0x100172ec
1000e128:	10019fd0 	.word	0x10019fd0
1000e12c:	10019fcc 	.word	0x10019fcc
1000e130:	1001a254 	.word	0x1001a254
1000e134:	1001a808 	.word	0x1001a808
1000e138:	1001a268 	.word	0x1001a268
1000e13c:	1001a27c 	.word	0x1001a27c
1000e140:	1001a2c4 	.word	0x1001a2c4

1000e144 <ble_device_init>:
volatile uint32_t 	event_params_memory[1024] 	= {0};


/** @brief BLE device initialization */
void ble_device_init(at_ble_addr_t *addr)
{
1000e144:	b5f0      	push	{r4, r5, r6, r7, lr}
1000e146:	465f      	mov	r7, fp
1000e148:	4656      	mov	r6, sl
1000e14a:	464d      	mov	r5, r9
1000e14c:	4644      	mov	r4, r8
1000e14e:	b4f0      	push	{r4, r5, r6, r7}
1000e150:	b091      	sub	sp, #68	; 0x44
1000e152:	0005      	movs	r5, r0
static bool ble_scan_duplication_check(at_ble_scan_info_t * info);
#endif

static void init_global_var(void)
{
	ble_user_event_cb = 0;
1000e154:	2400      	movs	r4, #0
1000e156:	4b7e      	ldr	r3, [pc, #504]	; (1000e350 <ble_device_init+0x20c>)
1000e158:	601c      	str	r4, [r3, #0]
	
	memset(&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
1000e15a:	2207      	movs	r2, #7
1000e15c:	2100      	movs	r1, #0
1000e15e:	487d      	ldr	r0, [pc, #500]	; (1000e354 <ble_device_init+0x210>)
1000e160:	4e7d      	ldr	r6, [pc, #500]	; (1000e358 <ble_device_init+0x214>)
1000e162:	47b0      	blx	r6
	memset(&connected_state_info, 0, sizeof(at_ble_connected_t));
1000e164:	2212      	movs	r2, #18
1000e166:	2100      	movs	r1, #0
1000e168:	487c      	ldr	r0, [pc, #496]	; (1000e35c <ble_device_init+0x218>)
1000e16a:	47b0      	blx	r6
		
#if defined ATT_DB_MEMORY
	memset(att_db_data, 0, sizeof(uint32_t) * BLE_ATT_DB_MEMORY_SIZE/4);
1000e16c:	4a7c      	ldr	r2, [pc, #496]	; (1000e360 <ble_device_init+0x21c>)
1000e16e:	2100      	movs	r1, #0
1000e170:	487c      	ldr	r0, [pc, #496]	; (1000e364 <ble_device_init+0x220>)
1000e172:	47b0      	blx	r6
#endif

	scan_response_count = 0;
1000e174:	4b7c      	ldr	r3, [pc, #496]	; (1000e368 <ble_device_init+0x224>)
1000e176:	701c      	strb	r4, [r3, #0]
	memset(scan_info, 0, sizeof(scan_info));
1000e178:	22cd      	movs	r2, #205	; 0xcd
1000e17a:	0092      	lsls	r2, r2, #2
1000e17c:	2100      	movs	r1, #0
1000e17e:	487b      	ldr	r0, [pc, #492]	; (1000e36c <ble_device_init+0x228>)
1000e180:	47b0      	blx	r6

	event = AT_BLE_UNDEFINED_EVENT;
1000e182:	4b7b      	ldr	r3, [pc, #492]	; (1000e370 <ble_device_init+0x22c>)
1000e184:	701c      	strb	r4, [r3, #0]
	memset(ble_event_params, 0, BLE_EVENT_PARAM_MAX_SIZE);
1000e186:	2283      	movs	r2, #131	; 0x83
1000e188:	0092      	lsls	r2, r2, #2
1000e18a:	2100      	movs	r1, #0
1000e18c:	4879      	ldr	r0, [pc, #484]	; (1000e374 <ble_device_init+0x230>)
1000e18e:	47b0      	blx	r6
{
	uint8_t idx;	
	char *dev_name = NULL;
	init_global_var();

	memset((uint8_t *)event_pool_memory, 0, sizeof(event_pool_memory));
1000e190:	4b79      	ldr	r3, [pc, #484]	; (1000e378 <ble_device_init+0x234>)
1000e192:	469b      	mov	fp, r3
1000e194:	2380      	movs	r3, #128	; 0x80
1000e196:	00db      	lsls	r3, r3, #3
1000e198:	469a      	mov	sl, r3
1000e19a:	001a      	movs	r2, r3
1000e19c:	2100      	movs	r1, #0
1000e19e:	4658      	mov	r0, fp
1000e1a0:	47b0      	blx	r6
	memset((uint8_t *)event_params_memory, 0, sizeof(event_params_memory));
1000e1a2:	4b76      	ldr	r3, [pc, #472]	; (1000e37c <ble_device_init+0x238>)
1000e1a4:	4699      	mov	r9, r3
1000e1a6:	2380      	movs	r3, #128	; 0x80
1000e1a8:	015b      	lsls	r3, r3, #5
1000e1aa:	4698      	mov	r8, r3
1000e1ac:	001a      	movs	r2, r3
1000e1ae:	2100      	movs	r1, #0
1000e1b0:	4648      	mov	r0, r9
1000e1b2:	47b0      	blx	r6

	memset(&pf_cfg, 0, sizeof(pf_cfg));
1000e1b4:	4f72      	ldr	r7, [pc, #456]	; (1000e380 <ble_device_init+0x23c>)
1000e1b6:	221c      	movs	r2, #28
1000e1b8:	2100      	movs	r1, #0
1000e1ba:	0038      	movs	r0, r7
1000e1bc:	47b0      	blx	r6

	pf_cfg.event_mem_pool.memStartAdd        = (uint8_t *)event_pool_memory;
1000e1be:	465b      	mov	r3, fp
1000e1c0:	60bb      	str	r3, [r7, #8]
	pf_cfg.event_mem_pool.memSize            = sizeof(event_pool_memory);
1000e1c2:	4653      	mov	r3, sl
1000e1c4:	60fb      	str	r3, [r7, #12]
	pf_cfg.event_params_mem_pool.memStartAdd = (uint8_t *)event_params_memory;
1000e1c6:	464b      	mov	r3, r9
1000e1c8:	613b      	str	r3, [r7, #16]
	pf_cfg.event_params_mem_pool.memSize     = sizeof(event_params_memory);
1000e1ca:	4643      	mov	r3, r8
1000e1cc:	617b      	str	r3, [r7, #20]

	/* Initialize the BLE Event callbacks */
	for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_gap_event_cb[idx] = NULL;
1000e1ce:	4b6d      	ldr	r3, [pc, #436]	; (1000e384 <ble_device_init+0x240>)
1000e1d0:	601c      	str	r4, [r3, #0]
1000e1d2:	605c      	str	r4, [r3, #4]
1000e1d4:	609c      	str	r4, [r3, #8]
1000e1d6:	60dc      	str	r4, [r3, #12]
1000e1d8:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_gatt_client_event_cb[idx] = NULL;
1000e1da:	4b6b      	ldr	r3, [pc, #428]	; (1000e388 <ble_device_init+0x244>)
1000e1dc:	601c      	str	r4, [r3, #0]
1000e1de:	605c      	str	r4, [r3, #4]
1000e1e0:	609c      	str	r4, [r3, #8]
1000e1e2:	60dc      	str	r4, [r3, #12]
1000e1e4:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
	{
		ble_mgr_gatt_server_event_cb[idx] = NULL;
1000e1e6:	4b69      	ldr	r3, [pc, #420]	; (1000e38c <ble_device_init+0x248>)
1000e1e8:	601c      	str	r4, [r3, #0]
1000e1ea:	605c      	str	r4, [r3, #4]
1000e1ec:	609c      	str	r4, [r3, #8]
1000e1ee:	60dc      	str	r4, [r3, #12]
1000e1f0:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_L2CAP_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_l2cap_event_cb[idx] = NULL;
1000e1f2:	4b67      	ldr	r3, [pc, #412]	; (1000e390 <ble_device_init+0x24c>)
1000e1f4:	601c      	str	r4, [r3, #0]
	}
	
	for (idx = 0; idx < MAX_HTPT_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_htpt_event_cb[idx] = NULL;
1000e1f6:	4b67      	ldr	r3, [pc, #412]	; (1000e394 <ble_device_init+0x250>)
1000e1f8:	601c      	str	r4, [r3, #0]
	}
	
	for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_dtm_event_cb[idx] = NULL;
1000e1fa:	4b67      	ldr	r3, [pc, #412]	; (1000e398 <ble_device_init+0x254>)
1000e1fc:	601c      	str	r4, [r3, #0]
1000e1fe:	605c      	str	r4, [r3, #4]
1000e200:	609c      	str	r4, [r3, #8]
1000e202:	60dc      	str	r4, [r3, #12]
1000e204:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_CUSTOM_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_custom_event_cb[idx] = NULL;
1000e206:	4b65      	ldr	r3, [pc, #404]	; (1000e39c <ble_device_init+0x258>)
1000e208:	601c      	str	r4, [r3, #0]
1000e20a:	4c65      	ldr	r4, [pc, #404]	; (1000e3a0 <ble_device_init+0x25c>)
1000e20c:	239b      	movs	r3, #155	; 0x9b
1000e20e:	009b      	lsls	r3, r3, #2
1000e210:	4698      	mov	r8, r3
1000e212:	44a0      	add	r8, r4
	}
        
    /* Set the BLE Device connection state */
    for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
    {
        memset(&ble_dev_info[idx], 0, sizeof(ble_connected_dev_info_t));
1000e214:	4f50      	ldr	r7, [pc, #320]	; (1000e358 <ble_device_init+0x214>)
		ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
		/* Set Invalid to Bonding information */
		ble_dev_info[idx].bond_info.status = AT_BLE_GAP_INVALID_PARAM;
1000e216:	2640      	movs	r6, #64	; 0x40
	}
        
    /* Set the BLE Device connection state */
    for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
    {
        memset(&ble_dev_info[idx], 0, sizeof(ble_connected_dev_info_t));
1000e218:	227c      	movs	r2, #124	; 0x7c
1000e21a:	2100      	movs	r1, #0
1000e21c:	0020      	movs	r0, r4
1000e21e:	47b8      	blx	r7
		ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
1000e220:	0023      	movs	r3, r4
1000e222:	335e      	adds	r3, #94	; 0x5e
1000e224:	2200      	movs	r2, #0
1000e226:	701a      	strb	r2, [r3, #0]
		/* Set Invalid to Bonding information */
		ble_dev_info[idx].bond_info.status = AT_BLE_GAP_INVALID_PARAM;
1000e228:	7626      	strb	r6, [r4, #24]
1000e22a:	347c      	adds	r4, #124	; 0x7c
	{
		ble_mgr_custom_event_cb[idx] = NULL;
	}
        
    /* Set the BLE Device connection state */
    for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000e22c:	45a0      	cmp	r8, r4
1000e22e:	d1f3      	bne.n	1000e218 <ble_device_init+0xd4>
		ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
		/* Set Invalid to Bonding information */
		ble_dev_info[idx].bond_info.status = AT_BLE_GAP_INVALID_PARAM;
    }
	/* Need to reset the count to 0 for storing it only in SRAM */
	ble_device_count = 0; 
1000e230:	4b5c      	ldr	r3, [pc, #368]	; (1000e3a4 <ble_device_init+0x260>)
1000e232:	701a      	strb	r2, [r3, #0]
	
	
#if defined ATT_DB_MEMORY
	pf_cfg.memPool.memSize = BLE_ATT_DB_MEMORY_SIZE;
1000e234:	4c52      	ldr	r4, [pc, #328]	; (1000e380 <ble_device_init+0x23c>)
1000e236:	4b4a      	ldr	r3, [pc, #296]	; (1000e360 <ble_device_init+0x21c>)
1000e238:	6063      	str	r3, [r4, #4]
	pf_cfg.memPool.memStartAdd = (uint8_t *)att_db_data;
1000e23a:	4b4a      	ldr	r3, [pc, #296]	; (1000e364 <ble_device_init+0x220>)
1000e23c:	6023      	str	r3, [r4, #0]

/* Initialize the BLE */
static void ble_init(at_ble_init_config_t * args)
{
	/* Initialize the platform */
	DBG_LOG("[ble_init]\t\t\tInitializing SAMB11");
1000e23e:	485a      	ldr	r0, [pc, #360]	; (1000e3a8 <ble_device_init+0x264>)
1000e240:	4b5a      	ldr	r3, [pc, #360]	; (1000e3ac <ble_device_init+0x268>)
1000e242:	4798      	blx	r3
1000e244:	485a      	ldr	r0, [pc, #360]	; (1000e3b0 <ble_device_init+0x26c>)
1000e246:	4b5b      	ldr	r3, [pc, #364]	; (1000e3b4 <ble_device_init+0x270>)
1000e248:	4798      	blx	r3
	
	/* Init BLE device */
	if(at_ble_init(args) != AT_BLE_SUCCESS)
1000e24a:	0020      	movs	r0, r4
1000e24c:	4b5a      	ldr	r3, [pc, #360]	; (1000e3b8 <ble_device_init+0x274>)
1000e24e:	4798      	blx	r3
1000e250:	2800      	cmp	r0, #0
1000e252:	d00b      	beq.n	1000e26c <ble_device_init+0x128>
	{
		DBG_LOG("[ble_init]\t\t\tSAMB11 Initialization failed");
1000e254:	4e54      	ldr	r6, [pc, #336]	; (1000e3a8 <ble_device_init+0x264>)
1000e256:	0030      	movs	r0, r6
1000e258:	4d54      	ldr	r5, [pc, #336]	; (1000e3ac <ble_device_init+0x268>)
1000e25a:	47a8      	blx	r5
1000e25c:	4857      	ldr	r0, [pc, #348]	; (1000e3bc <ble_device_init+0x278>)
1000e25e:	4c55      	ldr	r4, [pc, #340]	; (1000e3b4 <ble_device_init+0x270>)
1000e260:	47a0      	blx	r4
		DBG_LOG("[ble_init]\t\t\tPlease check the power and connection / hardware connector");	
1000e262:	0030      	movs	r0, r6
1000e264:	47a8      	blx	r5
1000e266:	4856      	ldr	r0, [pc, #344]	; (1000e3c0 <ble_device_init+0x27c>)
1000e268:	47a0      	blx	r4
1000e26a:	e7fe      	b.n	1000e26a <ble_device_init+0x126>
#endif
	
	ble_init(&pf_cfg);

	/* Register it in first index of callback handler */
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK, 
1000e26c:	4a55      	ldr	r2, [pc, #340]	; (1000e3c4 <ble_device_init+0x280>)
1000e26e:	2100      	movs	r1, #0
1000e270:	2000      	movs	r0, #0
1000e272:	4c55      	ldr	r4, [pc, #340]	; (1000e3c8 <ble_device_init+0x284>)
1000e274:	47a0      	blx	r4
									BLE_GAP_EVENT_TYPE, 
									ble_mgr_gap_handle);
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK,
1000e276:	4a55      	ldr	r2, [pc, #340]	; (1000e3cc <ble_device_init+0x288>)
1000e278:	2102      	movs	r1, #2
1000e27a:	2000      	movs	r0, #0
1000e27c:	47a0      	blx	r4
{
	if ((name == NULL) || (name_len < 1))
	{
		return AT_BLE_INVALID_PARAM;
	}
	return at_ble_device_name_set(name, name_len);
1000e27e:	2109      	movs	r1, #9
1000e280:	4853      	ldr	r0, [pc, #332]	; (1000e3d0 <ble_device_init+0x28c>)
1000e282:	4b54      	ldr	r3, [pc, #336]	; (1000e3d4 <ble_device_init+0x290>)
1000e284:	4798      	blx	r3
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK,
									BLE_GATT_SERVER_EVENT_TYPE,
									ble_mgr_gatt_server_handle);
									
	dev_name = (char *)BLE_DEVICE_NAME;
	if (ble_set_device_name((uint8_t *)dev_name, strlen(dev_name)) != AT_BLE_SUCCESS)
1000e286:	2800      	cmp	r0, #0
1000e288:	d005      	beq.n	1000e296 <ble_device_init+0x152>
	{
		DBG_LOG("Device name set failed");
1000e28a:	4847      	ldr	r0, [pc, #284]	; (1000e3a8 <ble_device_init+0x264>)
1000e28c:	4b47      	ldr	r3, [pc, #284]	; (1000e3ac <ble_device_init+0x268>)
1000e28e:	4798      	blx	r3
1000e290:	4851      	ldr	r0, [pc, #324]	; (1000e3d8 <ble_device_init+0x294>)
1000e292:	4b48      	ldr	r3, [pc, #288]	; (1000e3b4 <ble_device_init+0x270>)
1000e294:	4798      	blx	r3

/* Set BLE Address and device configuration, If address is NULL then it will use BD public address */
static void ble_set_dev_config(at_ble_addr_t *addr)
{
	at_ble_dev_config_t stDevConfig;
	at_ble_addr_t address = {AT_BLE_ADDRESS_PUBLIC, {0xAB, 0xCD, 0xEF, 0xAB, 0xCD, 0xEF}};
1000e296:	2207      	movs	r2, #7
1000e298:	4950      	ldr	r1, [pc, #320]	; (1000e3dc <ble_device_init+0x298>)
1000e29a:	3108      	adds	r1, #8
1000e29c:	a804      	add	r0, sp, #16
1000e29e:	4b50      	ldr	r3, [pc, #320]	; (1000e3e0 <ble_device_init+0x29c>)
1000e2a0:	4798      	blx	r3
	memset(&stDevConfig, 0, sizeof(at_ble_dev_config_t));
1000e2a2:	2226      	movs	r2, #38	; 0x26
1000e2a4:	2100      	movs	r1, #0
1000e2a6:	a806      	add	r0, sp, #24
1000e2a8:	4b2b      	ldr	r3, [pc, #172]	; (1000e358 <ble_device_init+0x214>)
1000e2aa:	4798      	blx	r3
	
	if (addr == NULL)
1000e2ac:	2d00      	cmp	r5, #0
1000e2ae:	d10c      	bne.n	1000e2ca <ble_device_init+0x186>
	{		
		/* get BD address from BLE device */
		if(at_ble_addr_get(&address) != AT_BLE_SUCCESS)
1000e2b0:	a804      	add	r0, sp, #16
1000e2b2:	4b4c      	ldr	r3, [pc, #304]	; (1000e3e4 <ble_device_init+0x2a0>)
1000e2b4:	4798      	blx	r3
		{
			DBG_LOG("[ble_set_dev_config]\t\tBD address get failed");
		}
		
		/* Copy the BD address into address pointer */
		addr = &address;
1000e2b6:	ad04      	add	r5, sp, #16
	memset(&stDevConfig, 0, sizeof(at_ble_dev_config_t));
	
	if (addr == NULL)
	{		
		/* get BD address from BLE device */
		if(at_ble_addr_get(&address) != AT_BLE_SUCCESS)
1000e2b8:	2800      	cmp	r0, #0
1000e2ba:	d006      	beq.n	1000e2ca <ble_device_init+0x186>
		{
			DBG_LOG("[ble_set_dev_config]\t\tBD address get failed");
1000e2bc:	483a      	ldr	r0, [pc, #232]	; (1000e3a8 <ble_device_init+0x264>)
1000e2be:	4b3b      	ldr	r3, [pc, #236]	; (1000e3ac <ble_device_init+0x268>)
1000e2c0:	4798      	blx	r3
1000e2c2:	4849      	ldr	r0, [pc, #292]	; (1000e3e8 <ble_device_init+0x2a4>)
1000e2c4:	4b3b      	ldr	r3, [pc, #236]	; (1000e3b4 <ble_device_init+0x270>)
1000e2c6:	4798      	blx	r3
		}
		
		/* Copy the BD address into address pointer */
		addr = &address;
1000e2c8:	ad04      	add	r5, sp, #16
	}
	
	DBG_LOG("[ble_set_dev_config]\t\tBD Address:0x%02X%02X%02X%02X%02X%02X, Address Type:%d",
1000e2ca:	4837      	ldr	r0, [pc, #220]	; (1000e3a8 <ble_device_init+0x264>)
1000e2cc:	4b37      	ldr	r3, [pc, #220]	; (1000e3ac <ble_device_init+0x268>)
1000e2ce:	4798      	blx	r3
1000e2d0:	792b      	ldrb	r3, [r5, #4]
1000e2d2:	796a      	ldrb	r2, [r5, #5]
1000e2d4:	79a9      	ldrb	r1, [r5, #6]
1000e2d6:	7828      	ldrb	r0, [r5, #0]
1000e2d8:	9003      	str	r0, [sp, #12]
1000e2da:	7868      	ldrb	r0, [r5, #1]
1000e2dc:	9002      	str	r0, [sp, #8]
1000e2de:	78a8      	ldrb	r0, [r5, #2]
1000e2e0:	9001      	str	r0, [sp, #4]
1000e2e2:	78e8      	ldrb	r0, [r5, #3]
1000e2e4:	9000      	str	r0, [sp, #0]
1000e2e6:	4841      	ldr	r0, [pc, #260]	; (1000e3ec <ble_device_init+0x2a8>)
1000e2e8:	4c32      	ldr	r4, [pc, #200]	; (1000e3b4 <ble_device_init+0x270>)
1000e2ea:	47a0      	blx	r4
	addr->addr[1],
	addr->addr[0], addr->type);
	
	/* Set device configuration */
	/* Device role */
	stDevConfig.role = (at_ble_dev_role_t)BLE_DEVICE_ROLE;
1000e2ec:	ac06      	add	r4, sp, #24
1000e2ee:	230a      	movs	r3, #10
1000e2f0:	7023      	strb	r3, [r4, #0]
	/* device renew duration */
	stDevConfig.renew_dur = AT_RENEW_DUR_VAL_MIN;
1000e2f2:	4b3f      	ldr	r3, [pc, #252]	; (1000e3f0 <ble_device_init+0x2ac>)
1000e2f4:	8063      	strh	r3, [r4, #2]
	/* device address type */
	memcpy((uint8_t *)&stDevConfig.address, (uint8_t *)addr, sizeof(at_ble_addr_t));
1000e2f6:	2207      	movs	r2, #7
1000e2f8:	0029      	movs	r1, r5
1000e2fa:	a807      	add	r0, sp, #28
1000e2fc:	4b38      	ldr	r3, [pc, #224]	; (1000e3e0 <ble_device_init+0x29c>)
1000e2fe:	4798      	blx	r3
	/* Attributes */
	stDevConfig.att_cfg.b2NamePerm = AT_BLE_WRITE_DISABLE;
1000e300:	2300      	movs	r3, #0
1000e302:	76e3      	strb	r3, [r4, #27]
	stDevConfig.att_cfg.b2AppearancePerm = AT_BLE_WRITE_DISABLE;
1000e304:	7723      	strb	r3, [r4, #28]
	stDevConfig.att_cfg.b1EnableSpcs = 0;
1000e306:	7763      	strb	r3, [r4, #29]
	stDevConfig.att_cfg.b1EnableServiceChanged = 0;
1000e308:	77a3      	strb	r3, [r4, #30]
	stDevConfig.att_cfg.b2Rfu = AT_BLE_WRITE_DISABLE;
1000e30a:	77e3      	strb	r3, [r4, #31]
	/* Handles */
	stDevConfig.gap_start_hdl = AT_BLE_AUTO_ALLOC_HANDLE;
1000e30c:	8423      	strh	r3, [r4, #32]
	stDevConfig.gatt_start_hdl = AT_BLE_AUTO_ALLOC_HANDLE;
1000e30e:	8463      	strh	r3, [r4, #34]	; 0x22
	/* MTU */
	stDevConfig.max_mtu = AT_MTU_VAL_RECOMMENDED;
1000e310:	2380      	movs	r3, #128	; 0x80
1000e312:	009b      	lsls	r3, r3, #2
1000e314:	84a3      	strh	r3, [r4, #36]	; 0x24
	
	if(at_ble_set_dev_config(&stDevConfig) != AT_BLE_SUCCESS)
1000e316:	0020      	movs	r0, r4
1000e318:	4b36      	ldr	r3, [pc, #216]	; (1000e3f4 <ble_device_init+0x2b0>)
1000e31a:	4798      	blx	r3
1000e31c:	2800      	cmp	r0, #0
1000e31e:	d005      	beq.n	1000e32c <ble_device_init+0x1e8>
	{
		DBG_LOG("[ble_set_dev_config]\tSet BLE Device configuration failed");
1000e320:	4821      	ldr	r0, [pc, #132]	; (1000e3a8 <ble_device_init+0x264>)
1000e322:	4b22      	ldr	r3, [pc, #136]	; (1000e3ac <ble_device_init+0x268>)
1000e324:	4798      	blx	r3
1000e326:	4834      	ldr	r0, [pc, #208]	; (1000e3f8 <ble_device_init+0x2b4>)
1000e328:	4b22      	ldr	r3, [pc, #136]	; (1000e3b4 <ble_device_init+0x270>)
1000e32a:	4798      	blx	r3
	}
	
	if (at_ble_addr_set(addr) != AT_BLE_SUCCESS)
1000e32c:	0028      	movs	r0, r5
1000e32e:	4b33      	ldr	r3, [pc, #204]	; (1000e3fc <ble_device_init+0x2b8>)
1000e330:	4798      	blx	r3
1000e332:	2800      	cmp	r0, #0
1000e334:	d005      	beq.n	1000e342 <ble_device_init+0x1fe>
	{
		DBG_LOG("[ble_set_dev_config]\tSet BLE Device Address failed");
1000e336:	481c      	ldr	r0, [pc, #112]	; (1000e3a8 <ble_device_init+0x264>)
1000e338:	4b1c      	ldr	r3, [pc, #112]	; (1000e3ac <ble_device_init+0x268>)
1000e33a:	4798      	blx	r3
1000e33c:	4830      	ldr	r0, [pc, #192]	; (1000e400 <ble_device_init+0x2bc>)
1000e33e:	4b1d      	ldr	r3, [pc, #116]	; (1000e3b4 <ble_device_init+0x270>)
1000e340:	4798      	blx	r3
	{
		DBG_LOG("Device name set failed");
	}
	
	ble_set_dev_config(addr);	
}
1000e342:	b011      	add	sp, #68	; 0x44
1000e344:	bc3c      	pop	{r2, r3, r4, r5}
1000e346:	4690      	mov	r8, r2
1000e348:	4699      	mov	r9, r3
1000e34a:	46a2      	mov	sl, r4
1000e34c:	46ab      	mov	fp, r5
1000e34e:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000e350:	10018b4c 	.word	0x10018b4c
1000e354:	10018b54 	.word	0x10018b54
1000e358:	10014e69 	.word	0x10014e69
1000e35c:	1001a290 	.word	0x1001a290
1000e360:	000004e2 	.word	0x000004e2
1000e364:	1001866c 	.word	0x1001866c
1000e368:	10018b50 	.word	0x10018b50
1000e36c:	1001a2c8 	.word	0x1001a2c8
1000e370:	1001a2c0 	.word	0x1001a2c0
1000e374:	1001a5fc 	.word	0x1001a5fc
1000e378:	1001826c 	.word	0x1001826c
1000e37c:	10018b5c 	.word	0x10018b5c
1000e380:	1001a2a4 	.word	0x1001a2a4
1000e384:	1001a268 	.word	0x1001a268
1000e388:	1001a27c 	.word	0x1001a27c
1000e38c:	10019fd0 	.word	0x10019fd0
1000e390:	1001a2c4 	.word	0x1001a2c4
1000e394:	10019fcc 	.word	0x10019fcc
1000e398:	1001a254 	.word	0x1001a254
1000e39c:	1001a808 	.word	0x1001a808
1000e3a0:	10019fe4 	.word	0x10019fe4
1000e3a4:	1001a250 	.word	0x1001a250
1000e3a8:	10016278 	.word	0x10016278
1000e3ac:	100150d1 	.word	0x100150d1
1000e3b0:	10017a54 	.word	0x10017a54
1000e3b4:	10014fb1 	.word	0x10014fb1
1000e3b8:	100102a5 	.word	0x100102a5
1000e3bc:	10017a78 	.word	0x10017a78
1000e3c0:	10017aa4 	.word	0x10017aa4
1000e3c4:	10017e54 	.word	0x10017e54
1000e3c8:	1000e075 	.word	0x1000e075
1000e3cc:	10017408 	.word	0x10017408
1000e3d0:	10017aec 	.word	0x10017aec
1000e3d4:	100101bd 	.word	0x100101bd
1000e3d8:	10017af8 	.word	0x10017af8
1000e3dc:	100173f8 	.word	0x100173f8
1000e3e0:	10014e57 	.word	0x10014e57
1000e3e4:	100101f1 	.word	0x100101f1
1000e3e8:	10017b10 	.word	0x10017b10
1000e3ec:	10017b3c 	.word	0x10017b3c
1000e3f0:	00003a98 	.word	0x00003a98
1000e3f4:	10010215 	.word	0x10010215
1000e3f8:	10017b8c 	.word	0x10017b8c
1000e3fc:	10010459 	.word	0x10010459
1000e400:	10017bc8 	.word	0x10017bc8

1000e404 <ble_send_slave_sec_request>:
	return AT_BLE_FAILURE;
}

/** @brief function to send slave security request */
at_ble_status_t ble_send_slave_sec_request(at_ble_handle_t conn_handle)
{
1000e404:	b510      	push	{r4, lr}
	#if BLE_PAIR_ENABLE
		if (at_ble_send_slave_sec_request(conn_handle, BLE_MITM_REQ, BLE_BOND_REQ) == AT_BLE_SUCCESS)
1000e406:	2200      	movs	r2, #0
1000e408:	2100      	movs	r1, #0
1000e40a:	4b0a      	ldr	r3, [pc, #40]	; (1000e434 <ble_send_slave_sec_request+0x30>)
1000e40c:	4798      	blx	r3
1000e40e:	1e04      	subs	r4, r0, #0
1000e410:	d106      	bne.n	1000e420 <ble_send_slave_sec_request+0x1c>
		{
			DBG_LOG_DEV("Slave security request successful");
1000e412:	4809      	ldr	r0, [pc, #36]	; (1000e438 <ble_send_slave_sec_request+0x34>)
1000e414:	4b09      	ldr	r3, [pc, #36]	; (1000e43c <ble_send_slave_sec_request+0x38>)
1000e416:	4798      	blx	r3
1000e418:	4809      	ldr	r0, [pc, #36]	; (1000e440 <ble_send_slave_sec_request+0x3c>)
1000e41a:	4b0a      	ldr	r3, [pc, #40]	; (1000e444 <ble_send_slave_sec_request+0x40>)
1000e41c:	4798      	blx	r3
			return AT_BLE_SUCCESS;
1000e41e:	e006      	b.n	1000e42e <ble_send_slave_sec_request+0x2a>
		}
		else
		{
			DBG_LOG("Slave security request failed");
1000e420:	4805      	ldr	r0, [pc, #20]	; (1000e438 <ble_send_slave_sec_request+0x34>)
1000e422:	4b06      	ldr	r3, [pc, #24]	; (1000e43c <ble_send_slave_sec_request+0x38>)
1000e424:	4798      	blx	r3
1000e426:	4808      	ldr	r0, [pc, #32]	; (1000e448 <ble_send_slave_sec_request+0x44>)
1000e428:	4b06      	ldr	r3, [pc, #24]	; (1000e444 <ble_send_slave_sec_request+0x40>)
1000e42a:	4798      	blx	r3
		}
	#endif
	return AT_BLE_FAILURE;
1000e42c:	24e2      	movs	r4, #226	; 0xe2
}
1000e42e:	0020      	movs	r0, r4
1000e430:	bd10      	pop	{r4, pc}
1000e432:	46c0      	nop			; (mov r8, r8)
1000e434:	1001123d 	.word	0x1001123d
1000e438:	10016278 	.word	0x10016278
1000e43c:	100150d1 	.word	0x100150d1
1000e440:	10017c18 	.word	0x10017c18
1000e444:	10014fb1 	.word	0x10014fb1
1000e448:	10017c3c 	.word	0x10017c3c

1000e44c <ble_connected_state_handler>:
	return status;
}

/** @brief function to handle connected event received from stack */
at_ble_status_t ble_connected_state_handler(void *params)
{
1000e44c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000e44e:	465f      	mov	r7, fp
1000e450:	464e      	mov	r6, r9
1000e452:	4645      	mov	r5, r8
1000e454:	b4e0      	push	{r5, r6, r7}
1000e456:	b09a      	sub	sp, #104	; 0x68
1000e458:	0005      	movs	r5, r0
	at_ble_connected_t *conn_params;
	uint8_t idx = 0;
	conn_params = (at_ble_connected_t *)params;
	bool peripheral_device_added = false;
	
	if (conn_params->conn_status == AT_BLE_SUCCESS)
1000e45a:	7a86      	ldrb	r6, [r0, #10]
1000e45c:	2e00      	cmp	r6, #0
1000e45e:	d000      	beq.n	1000e462 <ble_connected_state_handler+0x16>
1000e460:	e0cc      	b.n	1000e5fc <ble_connected_state_handler+0x1b0>
	{
		DBG_LOG("Connected to peer device with address 0x%02x%02x%02x%02x%02x%02x",
1000e462:	4878      	ldr	r0, [pc, #480]	; (1000e644 <ble_connected_state_handler+0x1f8>)
1000e464:	4f78      	ldr	r7, [pc, #480]	; (1000e648 <ble_connected_state_handler+0x1fc>)
1000e466:	47b8      	blx	r7
1000e468:	792b      	ldrb	r3, [r5, #4]
1000e46a:	796a      	ldrb	r2, [r5, #5]
1000e46c:	79a9      	ldrb	r1, [r5, #6]
1000e46e:	7868      	ldrb	r0, [r5, #1]
1000e470:	9002      	str	r0, [sp, #8]
1000e472:	78a8      	ldrb	r0, [r5, #2]
1000e474:	9001      	str	r0, [sp, #4]
1000e476:	78e8      	ldrb	r0, [r5, #3]
1000e478:	9000      	str	r0, [sp, #0]
1000e47a:	4874      	ldr	r0, [pc, #464]	; (1000e64c <ble_connected_state_handler+0x200>)
1000e47c:	4c74      	ldr	r4, [pc, #464]	; (1000e650 <ble_connected_state_handler+0x204>)
1000e47e:	47a0      	blx	r4
		conn_params->peer_addr.addr[3],
		conn_params->peer_addr.addr[2],
		conn_params->peer_addr.addr[1],
		conn_params->peer_addr.addr[0]);
		
		DBG_LOG("Connection Handle %d", conn_params->handle);
1000e480:	4870      	ldr	r0, [pc, #448]	; (1000e644 <ble_connected_state_handler+0x1f8>)
1000e482:	47b8      	blx	r7
1000e484:	8929      	ldrh	r1, [r5, #8]
1000e486:	4873      	ldr	r0, [pc, #460]	; (1000e654 <ble_connected_state_handler+0x208>)
1000e488:	47a0      	blx	r4
		
		memcpy((uint8_t *)&connected_state_info, (uint8_t *)conn_params, sizeof(at_ble_connected_t));	
1000e48a:	2212      	movs	r2, #18
1000e48c:	0029      	movs	r1, r5
1000e48e:	4872      	ldr	r0, [pc, #456]	; (1000e658 <ble_connected_state_handler+0x20c>)
1000e490:	4b72      	ldr	r3, [pc, #456]	; (1000e65c <ble_connected_state_handler+0x210>)
1000e492:	4798      	blx	r3
		if(memcmp((uint8_t *)&ble_peripheral_dev_address, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000e494:	9504      	str	r5, [sp, #16]
1000e496:	2207      	movs	r2, #7
1000e498:	0029      	movs	r1, r5
1000e49a:	4871      	ldr	r0, [pc, #452]	; (1000e660 <ble_connected_state_handler+0x214>)
1000e49c:	4b71      	ldr	r3, [pc, #452]	; (1000e664 <ble_connected_state_handler+0x218>)
1000e49e:	4798      	blx	r3
1000e4a0:	2800      	cmp	r0, #0
1000e4a2:	d100      	bne.n	1000e4a6 <ble_connected_state_handler+0x5a>
1000e4a4:	e0b3      	b.n	1000e60e <ble_connected_state_handler+0x1c2>
		{
			/* Peripheral Device */
			if (conn_params->peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE) 
1000e4a6:	782b      	ldrb	r3, [r5, #0]
1000e4a8:	2b02      	cmp	r3, #2
1000e4aa:	d000      	beq.n	1000e4ae <ble_connected_state_handler+0x62>
1000e4ac:	e0af      	b.n	1000e60e <ble_connected_state_handler+0x1c2>
			{
				uint8_t idx1, idx2;
				uint16_t key_len = 0;
				uint8_t nb_keys = BLE_MAX_DEVICE_CONNECTED;
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
1000e4ae:	2250      	movs	r2, #80	; 0x50
1000e4b0:	2100      	movs	r1, #0
1000e4b2:	a806      	add	r0, sp, #24
1000e4b4:	4b6c      	ldr	r3, [pc, #432]	; (1000e668 <ble_connected_state_handler+0x21c>)
1000e4b6:	4798      	blx	r3
1000e4b8:	4f6c      	ldr	r7, [pc, #432]	; (1000e66c <ble_connected_state_handler+0x220>)
		{
			/* Peripheral Device */
			if (conn_params->peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE) 
			{
				uint8_t idx1, idx2;
				uint16_t key_len = 0;
1000e4ba:	2300      	movs	r3, #0
1000e4bc:	e00b      	b.n	1000e4d6 <ble_connected_state_handler+0x8a>
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
				for (idx1 = 0; idx1 < BLE_MAX_DEVICE_CONNECTED; idx1++)
				{
					for (idx2 = 0; idx2 < AT_BLE_MAX_KEY_LEN; idx2++)
					{
						irk_key[key_len++] = ble_dev_info[idx1].bond_info.peer_irk.key[idx2];
1000e4be:	1c59      	adds	r1, r3, #1
1000e4c0:	7814      	ldrb	r4, [r2, #0]
1000e4c2:	a806      	add	r0, sp, #24
1000e4c4:	54c4      	strb	r4, [r0, r3]
1000e4c6:	3201      	adds	r2, #1
1000e4c8:	b28b      	uxth	r3, r1
				uint16_t key_len = 0;
				uint8_t nb_keys = BLE_MAX_DEVICE_CONNECTED;
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
				for (idx1 = 0; idx1 < BLE_MAX_DEVICE_CONNECTED; idx1++)
				{
					for (idx2 = 0; idx2 < AT_BLE_MAX_KEY_LEN; idx2++)
1000e4ca:	42b3      	cmp	r3, r6
1000e4cc:	d1f7      	bne.n	1000e4be <ble_connected_state_handler+0x72>
1000e4ce:	377c      	adds	r7, #124	; 0x7c
					{
						irk_key[key_len++] = ble_dev_info[idx1].bond_info.peer_irk.key[idx2];
1000e4d0:	1e33      	subs	r3, r6, #0
			{
				uint8_t idx1, idx2;
				uint16_t key_len = 0;
				uint8_t nb_keys = BLE_MAX_DEVICE_CONNECTED;
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
				for (idx1 = 0; idx1 < BLE_MAX_DEVICE_CONNECTED; idx1++)
1000e4d2:	2b50      	cmp	r3, #80	; 0x50
1000e4d4:	d004      	beq.n	1000e4e0 <ble_connected_state_handler+0x94>
1000e4d6:	001e      	movs	r6, r3
1000e4d8:	3610      	adds	r6, #16
1000e4da:	b2b6      	uxth	r6, r6
	return status;
}

/** @brief function to handle connected event received from stack */
at_ble_status_t ble_connected_state_handler(void *params)
{
1000e4dc:	003a      	movs	r2, r7
1000e4de:	e7ee      	b.n	1000e4be <ble_connected_state_handler+0x72>
					}
					
				}
				if (nb_keys)
				{
					if(at_ble_random_address_resolve(BLE_MAX_DEVICE_CONNECTED, &conn_params->peer_addr, irk_key) == AT_BLE_SUCCESS)
1000e4e0:	aa06      	add	r2, sp, #24
1000e4e2:	0029      	movs	r1, r5
1000e4e4:	2005      	movs	r0, #5
1000e4e6:	4b62      	ldr	r3, [pc, #392]	; (1000e670 <ble_connected_state_handler+0x224>)
1000e4e8:	4798      	blx	r3
1000e4ea:	1e06      	subs	r6, r0, #0
1000e4ec:	d106      	bne.n	1000e4fc <ble_connected_state_handler+0xb0>
					{
						DBG_LOG_DEV("Resolving Random address success**");
1000e4ee:	4855      	ldr	r0, [pc, #340]	; (1000e644 <ble_connected_state_handler+0x1f8>)
1000e4f0:	4b55      	ldr	r3, [pc, #340]	; (1000e648 <ble_connected_state_handler+0x1fc>)
1000e4f2:	4798      	blx	r3
1000e4f4:	485f      	ldr	r0, [pc, #380]	; (1000e674 <ble_connected_state_handler+0x228>)
1000e4f6:	4b56      	ldr	r3, [pc, #344]	; (1000e650 <ble_connected_state_handler+0x204>)
1000e4f8:	4798      	blx	r3
						return AT_BLE_SUCCESS;
1000e4fa:	e09c      	b.n	1000e636 <ble_connected_state_handler+0x1ea>
					}
					else
					{
						DBG_LOG("Resolving Random address failed**");
1000e4fc:	4851      	ldr	r0, [pc, #324]	; (1000e644 <ble_connected_state_handler+0x1f8>)
1000e4fe:	4b52      	ldr	r3, [pc, #328]	; (1000e648 <ble_connected_state_handler+0x1fc>)
1000e500:	4798      	blx	r3
1000e502:	485d      	ldr	r0, [pc, #372]	; (1000e678 <ble_connected_state_handler+0x22c>)
1000e504:	4b52      	ldr	r3, [pc, #328]	; (1000e650 <ble_connected_state_handler+0x204>)
1000e506:	4798      	blx	r3
						return AT_BLE_FAILURE;
1000e508:	26e2      	movs	r6, #226	; 0xe2
1000e50a:	e094      	b.n	1000e636 <ble_connected_state_handler+0x1ea>
1000e50c:	b2e7      	uxtb	r7, r4
		if (ble_device_count < BLE_MAX_DEVICE_CONNECTED)
		{
			bool conn_exists = false;
			for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
			{
				if(!memcmp((uint8_t *)&ble_dev_info[idx].conn_info.peer_addr, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000e50e:	9405      	str	r4, [sp, #20]
1000e510:	2207      	movs	r2, #7
1000e512:	9904      	ldr	r1, [sp, #16]
1000e514:	4648      	mov	r0, r9
1000e516:	47d8      	blx	fp
1000e518:	2800      	cmp	r0, #0
1000e51a:	d109      	bne.n	1000e530 <ble_connected_state_handler+0xe4>
				{
					ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000e51c:	9a05      	ldr	r2, [sp, #20]
1000e51e:	0153      	lsls	r3, r2, #5
1000e520:	1a9b      	subs	r3, r3, r2
1000e522:	009a      	lsls	r2, r3, #2
1000e524:	4b55      	ldr	r3, [pc, #340]	; (1000e67c <ble_connected_state_handler+0x230>)
1000e526:	189b      	adds	r3, r3, r2
1000e528:	335e      	adds	r3, #94	; 0x5e
1000e52a:	2202      	movs	r2, #2
1000e52c:	701a      	strb	r2, [r3, #0]
1000e52e:	e02b      	b.n	1000e588 <ble_connected_state_handler+0x13c>
1000e530:	3401      	adds	r4, #1
1000e532:	237c      	movs	r3, #124	; 0x7c
1000e534:	469c      	mov	ip, r3
1000e536:	44e1      	add	r9, ip
		}
			
		if (ble_device_count < BLE_MAX_DEVICE_CONNECTED)
		{
			bool conn_exists = false;
			for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000e538:	2c05      	cmp	r4, #5
1000e53a:	d1e7      	bne.n	1000e50c <ble_connected_state_handler+0xc0>
1000e53c:	e072      	b.n	1000e624 <ble_connected_state_handler+0x1d8>
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
				{
					if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000e53e:	001c      	movs	r4, r3
1000e540:	7811      	ldrb	r1, [r2, #0]
1000e542:	2900      	cmp	r1, #0
1000e544:	d11a      	bne.n	1000e57c <ble_connected_state_handler+0x130>
1000e546:	e001      	b.n	1000e54c <ble_connected_state_handler+0x100>
1000e548:	2400      	movs	r4, #0
1000e54a:	2700      	movs	r7, #0
					{
						/* @Todo Need to Handle Random Address */
						memcpy(&ble_dev_info[idx].conn_info, (uint8_t *)conn_params, sizeof(at_ble_connected_t));
1000e54c:	0163      	lsls	r3, r4, #5
1000e54e:	4699      	mov	r9, r3
1000e550:	1b18      	subs	r0, r3, r4
1000e552:	0080      	lsls	r0, r0, #2
1000e554:	4b49      	ldr	r3, [pc, #292]	; (1000e67c <ble_connected_state_handler+0x230>)
1000e556:	4698      	mov	r8, r3
1000e558:	4440      	add	r0, r8
1000e55a:	2212      	movs	r2, #18
1000e55c:	0029      	movs	r1, r5
1000e55e:	4b3f      	ldr	r3, [pc, #252]	; (1000e65c <ble_connected_state_handler+0x210>)
1000e560:	4798      	blx	r3
						ble_device_count++;
1000e562:	4a47      	ldr	r2, [pc, #284]	; (1000e680 <ble_connected_state_handler+0x234>)
1000e564:	7813      	ldrb	r3, [r2, #0]
1000e566:	3301      	adds	r3, #1
1000e568:	b2db      	uxtb	r3, r3
1000e56a:	7013      	strb	r3, [r2, #0]
						ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000e56c:	464b      	mov	r3, r9
1000e56e:	1b1b      	subs	r3, r3, r4
1000e570:	009b      	lsls	r3, r3, #2
1000e572:	4443      	add	r3, r8
1000e574:	335e      	adds	r3, #94	; 0x5e
1000e576:	2202      	movs	r2, #2
1000e578:	701a      	strb	r2, [r3, #0]
						break;
1000e57a:	e005      	b.n	1000e588 <ble_connected_state_handler+0x13c>
				}
			}
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000e57c:	1c79      	adds	r1, r7, #1
1000e57e:	b2cf      	uxtb	r7, r1
1000e580:	3301      	adds	r3, #1
1000e582:	327c      	adds	r2, #124	; 0x7c
1000e584:	2f05      	cmp	r7, #5
1000e586:	d1da      	bne.n	1000e53e <ble_connected_state_handler+0xf2>
						break;
					}
				}
			}
			
			if(!memcmp((uint8_t *)&ble_peripheral_dev_address, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000e588:	2207      	movs	r2, #7
1000e58a:	0029      	movs	r1, r5
1000e58c:	4834      	ldr	r0, [pc, #208]	; (1000e660 <ble_connected_state_handler+0x214>)
1000e58e:	4b35      	ldr	r3, [pc, #212]	; (1000e664 <ble_connected_state_handler+0x218>)
1000e590:	4798      	blx	r3
1000e592:	2800      	cmp	r0, #0
1000e594:	d10c      	bne.n	1000e5b0 <ble_connected_state_handler+0x164>
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_CENTRAL;
1000e596:	017b      	lsls	r3, r7, #5
1000e598:	1bdb      	subs	r3, r3, r7
1000e59a:	009b      	lsls	r3, r3, #2
1000e59c:	4a37      	ldr	r2, [pc, #220]	; (1000e67c <ble_connected_state_handler+0x230>)
1000e59e:	18d3      	adds	r3, r2, r3
1000e5a0:	2205      	movs	r2, #5
1000e5a2:	749a      	strb	r2, [r3, #18]
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
				peripheral_device_added = true;
			}
			/* Reset the ble_peripheral_dev_address to identify the initiator */
			memset((uint8_t *)&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
1000e5a4:	3202      	adds	r2, #2
1000e5a6:	2100      	movs	r1, #0
1000e5a8:	482d      	ldr	r0, [pc, #180]	; (1000e660 <ble_connected_state_handler+0x214>)
1000e5aa:	4b2f      	ldr	r3, [pc, #188]	; (1000e668 <ble_connected_state_handler+0x21c>)
1000e5ac:	4798      	blx	r3
1000e5ae:	e042      	b.n	1000e636 <ble_connected_state_handler+0x1ea>
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_CENTRAL;
			}
			else
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
1000e5b0:	4b32      	ldr	r3, [pc, #200]	; (1000e67c <ble_connected_state_handler+0x230>)
1000e5b2:	4698      	mov	r8, r3
1000e5b4:	017c      	lsls	r4, r7, #5
1000e5b6:	1be3      	subs	r3, r4, r7
1000e5b8:	009b      	lsls	r3, r3, #2
1000e5ba:	4443      	add	r3, r8
1000e5bc:	220a      	movs	r2, #10
1000e5be:	749a      	strb	r2, [r3, #18]
				peripheral_device_added = true;
			}
			/* Reset the ble_peripheral_dev_address to identify the initiator */
			memset((uint8_t *)&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
1000e5c0:	3a03      	subs	r2, #3
1000e5c2:	2100      	movs	r1, #0
1000e5c4:	4826      	ldr	r0, [pc, #152]	; (1000e660 <ble_connected_state_handler+0x214>)
1000e5c6:	4b28      	ldr	r3, [pc, #160]	; (1000e668 <ble_connected_state_handler+0x21c>)
1000e5c8:	4798      	blx	r3
			at_ble_disconnect(conn_params->handle, AT_BLE_TERMINATED_BY_USER);
		}		
		
#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
		
        if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
1000e5ca:	1be4      	subs	r4, r4, r7
1000e5cc:	00a4      	lsls	r4, r4, #2
1000e5ce:	4444      	add	r4, r8
1000e5d0:	7ca3      	ldrb	r3, [r4, #18]
1000e5d2:	2b0a      	cmp	r3, #10
1000e5d4:	d12f      	bne.n	1000e636 <ble_connected_state_handler+0x1ea>
1000e5d6:	e00d      	b.n	1000e5f4 <ble_connected_state_handler+0x1a8>
			memset((uint8_t *)&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
					
		}
		else
		{
			DBG_LOG("Max number of connection reached: %d ===>Disconnecting...", ble_device_count);
1000e5d8:	481a      	ldr	r0, [pc, #104]	; (1000e644 <ble_connected_state_handler+0x1f8>)
1000e5da:	4b1b      	ldr	r3, [pc, #108]	; (1000e648 <ble_connected_state_handler+0x1fc>)
1000e5dc:	4798      	blx	r3
1000e5de:	4b28      	ldr	r3, [pc, #160]	; (1000e680 <ble_connected_state_handler+0x234>)
1000e5e0:	7819      	ldrb	r1, [r3, #0]
1000e5e2:	b2c9      	uxtb	r1, r1
1000e5e4:	4827      	ldr	r0, [pc, #156]	; (1000e684 <ble_connected_state_handler+0x238>)
1000e5e6:	4b1a      	ldr	r3, [pc, #104]	; (1000e650 <ble_connected_state_handler+0x204>)
1000e5e8:	4798      	blx	r3
			at_ble_disconnect(conn_params->handle, AT_BLE_TERMINATED_BY_USER);
1000e5ea:	8928      	ldrh	r0, [r5, #8]
1000e5ec:	2113      	movs	r1, #19
1000e5ee:	4b26      	ldr	r3, [pc, #152]	; (1000e688 <ble_connected_state_handler+0x23c>)
1000e5f0:	4798      	blx	r3
1000e5f2:	e020      	b.n	1000e636 <ble_connected_state_handler+0x1ea>
		
#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
		
        if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
        {
	 		ble_send_slave_sec_request(conn_params->handle);
1000e5f4:	8928      	ldrh	r0, [r5, #8]
1000e5f6:	4b25      	ldr	r3, [pc, #148]	; (1000e68c <ble_connected_state_handler+0x240>)
1000e5f8:	4798      	blx	r3
1000e5fa:	e01c      	b.n	1000e636 <ble_connected_state_handler+0x1ea>
        }
#endif
	} 
	else
	{
		DBG_LOG("Device Connection Failed - Status: %d", conn_params->conn_status);
1000e5fc:	4811      	ldr	r0, [pc, #68]	; (1000e644 <ble_connected_state_handler+0x1f8>)
1000e5fe:	4b12      	ldr	r3, [pc, #72]	; (1000e648 <ble_connected_state_handler+0x1fc>)
1000e600:	4798      	blx	r3
1000e602:	7aa9      	ldrb	r1, [r5, #10]
1000e604:	4822      	ldr	r0, [pc, #136]	; (1000e690 <ble_connected_state_handler+0x244>)
1000e606:	4b12      	ldr	r3, [pc, #72]	; (1000e650 <ble_connected_state_handler+0x204>)
1000e608:	4798      	blx	r3
	}
	ALL_UNUSED(peripheral_device_added);
	return AT_BLE_SUCCESS;
1000e60a:	2600      	movs	r6, #0
1000e60c:	e013      	b.n	1000e636 <ble_connected_state_handler+0x1ea>
					DBG_LOG_DEV("New Connection");
				}				
			}
		}
			
		if (ble_device_count < BLE_MAX_DEVICE_CONNECTED)
1000e60e:	4b1c      	ldr	r3, [pc, #112]	; (1000e680 <ble_connected_state_handler+0x234>)
1000e610:	781b      	ldrb	r3, [r3, #0]
1000e612:	b2db      	uxtb	r3, r3
1000e614:	2b04      	cmp	r3, #4
1000e616:	d8df      	bhi.n	1000e5d8 <ble_connected_state_handler+0x18c>
1000e618:	4b18      	ldr	r3, [pc, #96]	; (1000e67c <ble_connected_state_handler+0x230>)
1000e61a:	4699      	mov	r9, r3
1000e61c:	2400      	movs	r4, #0
		{
			bool conn_exists = false;
			for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
			{
				if(!memcmp((uint8_t *)&ble_dev_info[idx].conn_info.peer_addr, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000e61e:	4b11      	ldr	r3, [pc, #68]	; (1000e664 <ble_connected_state_handler+0x218>)
1000e620:	469b      	mov	fp, r3
1000e622:	e773      	b.n	1000e50c <ble_connected_state_handler+0xc0>
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
				{
					if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000e624:	235e      	movs	r3, #94	; 0x5e
1000e626:	4a15      	ldr	r2, [pc, #84]	; (1000e67c <ble_connected_state_handler+0x230>)
1000e628:	5cd3      	ldrb	r3, [r2, r3]
1000e62a:	2b00      	cmp	r3, #0
1000e62c:	d08c      	beq.n	1000e548 <ble_connected_state_handler+0xfc>
1000e62e:	4a19      	ldr	r2, [pc, #100]	; (1000e694 <ble_connected_state_handler+0x248>)
1000e630:	2301      	movs	r3, #1
				}
			}
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000e632:	2701      	movs	r7, #1
1000e634:	e783      	b.n	1000e53e <ble_connected_state_handler+0xf2>
	{
		DBG_LOG("Device Connection Failed - Status: %d", conn_params->conn_status);
	}
	ALL_UNUSED(peripheral_device_added);
	return AT_BLE_SUCCESS;
}
1000e636:	0030      	movs	r0, r6
1000e638:	b01a      	add	sp, #104	; 0x68
1000e63a:	bc1c      	pop	{r2, r3, r4}
1000e63c:	4690      	mov	r8, r2
1000e63e:	4699      	mov	r9, r3
1000e640:	46a3      	mov	fp, r4
1000e642:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000e644:	10016278 	.word	0x10016278
1000e648:	100150d1 	.word	0x100150d1
1000e64c:	10017c5c 	.word	0x10017c5c
1000e650:	10014fb1 	.word	0x10014fb1
1000e654:	10017ca0 	.word	0x10017ca0
1000e658:	1001a290 	.word	0x1001a290
1000e65c:	10014e57 	.word	0x10014e57
1000e660:	10018b54 	.word	0x10018b54
1000e664:	10014e39 	.word	0x10014e39
1000e668:	10014e69 	.word	0x10014e69
1000e66c:	1001a02a 	.word	0x1001a02a
1000e670:	100106c5 	.word	0x100106c5
1000e674:	10017cb8 	.word	0x10017cb8
1000e678:	10017cdc 	.word	0x10017cdc
1000e67c:	10019fe4 	.word	0x10019fe4
1000e680:	1001a250 	.word	0x1001a250
1000e684:	10017d00 	.word	0x10017d00
1000e688:	10010699 	.word	0x10010699
1000e68c:	1000e405 	.word	0x1000e405
1000e690:	10017d3c 	.word	0x10017d3c
1000e694:	1001a0be 	.word	0x1001a0be

1000e698 <ble_resolv_rand_addr_handler>:

at_ble_status_t ble_resolv_rand_addr_handler(void *params)
{
1000e698:	b5f0      	push	{r4, r5, r6, r7, lr}
1000e69a:	4647      	mov	r7, r8
1000e69c:	b480      	push	{r7}
	uint8_t idx;	
	bool device_found = false;
	bool peripheral_device_added = false;
	ble_resolv_rand_addr_status = (at_ble_resolv_rand_addr_status_t *)params;	
	
	if(ble_resolv_rand_addr_status->status == AT_BLE_SUCCESS)
1000e69e:	7803      	ldrb	r3, [r0, #0]
1000e6a0:	2b00      	cmp	r3, #0
1000e6a2:	d152      	bne.n	1000e74a <ble_resolv_rand_addr_handler+0xb2>
1000e6a4:	4d3e      	ldr	r5, [pc, #248]	; (1000e7a0 <ble_resolv_rand_addr_handler+0x108>)
1000e6a6:	2400      	movs	r4, #0
	{		
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
		{
			/* Check the Resolved Address */
			if (!memcmp((uint8_t *)ble_resolv_rand_addr_status->irk, (uint8_t *)ble_dev_info[idx].bond_info.peer_irk.key, AT_BLE_MAX_KEY_LEN))
1000e6a8:	1c46      	adds	r6, r0, #1
1000e6aa:	4f3e      	ldr	r7, [pc, #248]	; (1000e7a4 <ble_resolv_rand_addr_handler+0x10c>)
1000e6ac:	2210      	movs	r2, #16
1000e6ae:	0029      	movs	r1, r5
1000e6b0:	0030      	movs	r0, r6
1000e6b2:	47b8      	blx	r7
1000e6b4:	2800      	cmp	r0, #0
1000e6b6:	d031      	beq.n	1000e71c <ble_resolv_rand_addr_handler+0x84>
	bool peripheral_device_added = false;
	ble_resolv_rand_addr_status = (at_ble_resolv_rand_addr_status_t *)params;	
	
	if(ble_resolv_rand_addr_status->status == AT_BLE_SUCCESS)
	{		
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000e6b8:	3401      	adds	r4, #1
1000e6ba:	b2e4      	uxtb	r4, r4
1000e6bc:	357c      	adds	r5, #124	; 0x7c
1000e6be:	2c05      	cmp	r4, #5
1000e6c0:	d1f4      	bne.n	1000e6ac <ble_resolv_rand_addr_handler+0x14>
1000e6c2:	e042      	b.n	1000e74a <ble_resolv_rand_addr_handler+0xb2>
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
		{
			if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000e6c4:	001d      	movs	r5, r3
1000e6c6:	7811      	ldrb	r1, [r2, #0]
1000e6c8:	2900      	cmp	r1, #0
1000e6ca:	d11b      	bne.n	1000e704 <ble_resolv_rand_addr_handler+0x6c>
1000e6cc:	e001      	b.n	1000e6d2 <ble_resolv_rand_addr_handler+0x3a>
1000e6ce:	2500      	movs	r5, #0
		peripheral_device_added = true;
	}
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000e6d0:	2400      	movs	r4, #0
		{
			if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
			{
				memcpy(&ble_dev_info[idx].conn_info, (uint8_t *)&connected_state_info, sizeof(at_ble_connected_t));
1000e6d2:	4b35      	ldr	r3, [pc, #212]	; (1000e7a8 <ble_resolv_rand_addr_handler+0x110>)
1000e6d4:	4698      	mov	r8, r3
1000e6d6:	016e      	lsls	r6, r5, #5
1000e6d8:	1b77      	subs	r7, r6, r5
1000e6da:	00bf      	lsls	r7, r7, #2
1000e6dc:	4447      	add	r7, r8
1000e6de:	2212      	movs	r2, #18
1000e6e0:	4932      	ldr	r1, [pc, #200]	; (1000e7ac <ble_resolv_rand_addr_handler+0x114>)
1000e6e2:	0038      	movs	r0, r7
1000e6e4:	4b32      	ldr	r3, [pc, #200]	; (1000e7b0 <ble_resolv_rand_addr_handler+0x118>)
1000e6e6:	4798      	blx	r3
				ble_device_count++;
1000e6e8:	4a32      	ldr	r2, [pc, #200]	; (1000e7b4 <ble_resolv_rand_addr_handler+0x11c>)
1000e6ea:	7813      	ldrb	r3, [r2, #0]
1000e6ec:	3301      	adds	r3, #1
1000e6ee:	b2db      	uxtb	r3, r3
1000e6f0:	7013      	strb	r3, [r2, #0]
				ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000e6f2:	375e      	adds	r7, #94	; 0x5e
1000e6f4:	2302      	movs	r3, #2
1000e6f6:	703b      	strb	r3, [r7, #0]
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
1000e6f8:	1b75      	subs	r5, r6, r5
1000e6fa:	00ad      	lsls	r5, r5, #2
1000e6fc:	4445      	add	r5, r8
1000e6fe:	3308      	adds	r3, #8
1000e700:	74ab      	strb	r3, [r5, #18]
				peripheral_device_added = true;
				break;
1000e702:	e031      	b.n	1000e768 <ble_resolv_rand_addr_handler+0xd0>
		peripheral_device_added = true;
	}
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000e704:	3401      	adds	r4, #1
1000e706:	b2e4      	uxtb	r4, r4
1000e708:	3301      	adds	r3, #1
1000e70a:	327c      	adds	r2, #124	; 0x7c
1000e70c:	2c05      	cmp	r4, #5
1000e70e:	d1d9      	bne.n	1000e6c4 <ble_resolv_rand_addr_handler+0x2c>
1000e710:	e03a      	b.n	1000e788 <ble_resolv_rand_addr_handler+0xf0>
	}
	DBG_LOG_DEV("Device idx:%d",idx);
	#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
	if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
	{
		ble_send_slave_sec_request(connected_state_info.handle);
1000e712:	4b26      	ldr	r3, [pc, #152]	; (1000e7ac <ble_resolv_rand_addr_handler+0x114>)
1000e714:	8918      	ldrh	r0, [r3, #8]
1000e716:	4b28      	ldr	r3, [pc, #160]	; (1000e7b8 <ble_resolv_rand_addr_handler+0x120>)
1000e718:	4798      	blx	r3
1000e71a:	e03c      	b.n	1000e796 <ble_resolv_rand_addr_handler+0xfe>
		
	}
	
	if (device_found)
	{
		DBG_LOG_DEV("##########Device Found");
1000e71c:	4827      	ldr	r0, [pc, #156]	; (1000e7bc <ble_resolv_rand_addr_handler+0x124>)
1000e71e:	4b28      	ldr	r3, [pc, #160]	; (1000e7c0 <ble_resolv_rand_addr_handler+0x128>)
1000e720:	4798      	blx	r3
1000e722:	4828      	ldr	r0, [pc, #160]	; (1000e7c4 <ble_resolv_rand_addr_handler+0x12c>)
1000e724:	4b28      	ldr	r3, [pc, #160]	; (1000e7c8 <ble_resolv_rand_addr_handler+0x130>)
1000e726:	4798      	blx	r3
		ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000e728:	481f      	ldr	r0, [pc, #124]	; (1000e7a8 <ble_resolv_rand_addr_handler+0x110>)
1000e72a:	0163      	lsls	r3, r4, #5
1000e72c:	1b1a      	subs	r2, r3, r4
1000e72e:	0092      	lsls	r2, r2, #2
1000e730:	1882      	adds	r2, r0, r2
1000e732:	0011      	movs	r1, r2
1000e734:	315e      	adds	r1, #94	; 0x5e
1000e736:	2502      	movs	r5, #2
1000e738:	700d      	strb	r5, [r1, #0]
		ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
1000e73a:	210a      	movs	r1, #10
1000e73c:	7491      	strb	r1, [r2, #18]
		memcpy((uint8_t *)&ble_dev_info[idx].conn_info, (uint8_t *)&connected_state_info, sizeof(at_ble_connected_t));
1000e73e:	0010      	movs	r0, r2
1000e740:	2212      	movs	r2, #18
1000e742:	491a      	ldr	r1, [pc, #104]	; (1000e7ac <ble_resolv_rand_addr_handler+0x114>)
1000e744:	4b1a      	ldr	r3, [pc, #104]	; (1000e7b0 <ble_resolv_rand_addr_handler+0x118>)
1000e746:	4798      	blx	r3
1000e748:	e00e      	b.n	1000e768 <ble_resolv_rand_addr_handler+0xd0>
		peripheral_device_added = true;
	}
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
1000e74a:	481c      	ldr	r0, [pc, #112]	; (1000e7bc <ble_resolv_rand_addr_handler+0x124>)
1000e74c:	4b1c      	ldr	r3, [pc, #112]	; (1000e7c0 <ble_resolv_rand_addr_handler+0x128>)
1000e74e:	4798      	blx	r3
1000e750:	481e      	ldr	r0, [pc, #120]	; (1000e7cc <ble_resolv_rand_addr_handler+0x134>)
1000e752:	4b1d      	ldr	r3, [pc, #116]	; (1000e7c8 <ble_resolv_rand_addr_handler+0x130>)
1000e754:	4798      	blx	r3
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
		{
			if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000e756:	235e      	movs	r3, #94	; 0x5e
1000e758:	4a13      	ldr	r2, [pc, #76]	; (1000e7a8 <ble_resolv_rand_addr_handler+0x110>)
1000e75a:	5cd3      	ldrb	r3, [r2, r3]
1000e75c:	2b00      	cmp	r3, #0
1000e75e:	d0b6      	beq.n	1000e6ce <ble_resolv_rand_addr_handler+0x36>
1000e760:	4a1b      	ldr	r2, [pc, #108]	; (1000e7d0 <ble_resolv_rand_addr_handler+0x138>)
1000e762:	2301      	movs	r3, #1
		peripheral_device_added = true;
	}
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000e764:	2401      	movs	r4, #1
1000e766:	e7ad      	b.n	1000e6c4 <ble_resolv_rand_addr_handler+0x2c>
				peripheral_device_added = true;
				break;
			}
		}
	}
	DBG_LOG_DEV("Device idx:%d",idx);
1000e768:	4814      	ldr	r0, [pc, #80]	; (1000e7bc <ble_resolv_rand_addr_handler+0x124>)
1000e76a:	4b15      	ldr	r3, [pc, #84]	; (1000e7c0 <ble_resolv_rand_addr_handler+0x128>)
1000e76c:	4798      	blx	r3
1000e76e:	0021      	movs	r1, r4
1000e770:	4818      	ldr	r0, [pc, #96]	; (1000e7d4 <ble_resolv_rand_addr_handler+0x13c>)
1000e772:	4b15      	ldr	r3, [pc, #84]	; (1000e7c8 <ble_resolv_rand_addr_handler+0x130>)
1000e774:	4798      	blx	r3
	#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
	if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
1000e776:	0163      	lsls	r3, r4, #5
1000e778:	1b1c      	subs	r4, r3, r4
1000e77a:	00a4      	lsls	r4, r4, #2
1000e77c:	4b0a      	ldr	r3, [pc, #40]	; (1000e7a8 <ble_resolv_rand_addr_handler+0x110>)
1000e77e:	191c      	adds	r4, r3, r4
1000e780:	7ca3      	ldrb	r3, [r4, #18]
1000e782:	2b0a      	cmp	r3, #10
1000e784:	d107      	bne.n	1000e796 <ble_resolv_rand_addr_handler+0xfe>
1000e786:	e7c4      	b.n	1000e712 <ble_resolv_rand_addr_handler+0x7a>
				peripheral_device_added = true;
				break;
			}
		}
	}
	DBG_LOG_DEV("Device idx:%d",idx);
1000e788:	480c      	ldr	r0, [pc, #48]	; (1000e7bc <ble_resolv_rand_addr_handler+0x124>)
1000e78a:	4b0d      	ldr	r3, [pc, #52]	; (1000e7c0 <ble_resolv_rand_addr_handler+0x128>)
1000e78c:	4798      	blx	r3
1000e78e:	2105      	movs	r1, #5
1000e790:	4810      	ldr	r0, [pc, #64]	; (1000e7d4 <ble_resolv_rand_addr_handler+0x13c>)
1000e792:	4b0d      	ldr	r3, [pc, #52]	; (1000e7c8 <ble_resolv_rand_addr_handler+0x130>)
1000e794:	4798      	blx	r3
	#endif
	ALL_UNUSED(peripheral_device_added);

	return AT_BLE_SUCCESS;
	
}
1000e796:	2000      	movs	r0, #0
1000e798:	bc04      	pop	{r2}
1000e79a:	4690      	mov	r8, r2
1000e79c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000e79e:	46c0      	nop			; (mov r8, r8)
1000e7a0:	1001a02a 	.word	0x1001a02a
1000e7a4:	10014e39 	.word	0x10014e39
1000e7a8:	10019fe4 	.word	0x10019fe4
1000e7ac:	1001a290 	.word	0x1001a290
1000e7b0:	10014e57 	.word	0x10014e57
1000e7b4:	1001a250 	.word	0x1001a250
1000e7b8:	1000e405 	.word	0x1000e405
1000e7bc:	10016278 	.word	0x10016278
1000e7c0:	100150d1 	.word	0x100150d1
1000e7c4:	10017d64 	.word	0x10017d64
1000e7c8:	10014fb1 	.word	0x10014fb1
1000e7cc:	10017d7c 	.word	0x10017d7c
1000e7d0:	1001a0be 	.word	0x1001a0be
1000e7d4:	10017d98 	.word	0x10017d98

1000e7d8 <ble_event_manager>:
	}
	return AT_BLE_SUCCESS;
}

void ble_event_manager(at_ble_events_t events, void *event_params)
{
1000e7d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000e7da:	0004      	movs	r4, r0
1000e7dc:	000d      	movs	r5, r1
	DBG_LOG_DEV("\r\nBLE-Event:%d", events);
1000e7de:	4848      	ldr	r0, [pc, #288]	; (1000e900 <ble_event_manager+0x128>)
1000e7e0:	4b48      	ldr	r3, [pc, #288]	; (1000e904 <ble_event_manager+0x12c>)
1000e7e2:	4798      	blx	r3
1000e7e4:	0021      	movs	r1, r4
1000e7e6:	4848      	ldr	r0, [pc, #288]	; (1000e908 <ble_event_manager+0x130>)
1000e7e8:	4b48      	ldr	r3, [pc, #288]	; (1000e90c <ble_event_manager+0x134>)
1000e7ea:	4798      	blx	r3
	switch(events)
1000e7ec:	2c3b      	cmp	r4, #59	; 0x3b
1000e7ee:	d879      	bhi.n	1000e8e4 <ble_event_manager+0x10c>
1000e7f0:	00a3      	lsls	r3, r4, #2
1000e7f2:	4a47      	ldr	r2, [pc, #284]	; (1000e910 <ble_event_manager+0x138>)
1000e7f4:	58d3      	ldr	r3, [r2, r3]
1000e7f6:	469f      	mov	pc, r3
		for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gap_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gap_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000e7f8:	00a4      	lsls	r4, r4, #2
1000e7fa:	2600      	movs	r6, #0
		}
		#endif			
		
		for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gap_event_cb[idx] != NULL)
1000e7fc:	4f45      	ldr	r7, [pc, #276]	; (1000e914 <ble_event_manager+0x13c>)
1000e7fe:	59bb      	ldr	r3, [r7, r6]
1000e800:	2b00      	cmp	r3, #0
1000e802:	d004      	beq.n	1000e80e <ble_event_manager+0x36>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gap_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000e804:	591b      	ldr	r3, [r3, r4]
1000e806:	2b00      	cmp	r3, #0
1000e808:	d001      	beq.n	1000e80e <ble_event_manager+0x36>
				{
					event_cb_fn[events](event_params);		
1000e80a:	0028      	movs	r0, r5
1000e80c:	4798      	blx	r3
1000e80e:	3604      	adds	r6, #4
			if( ble_scan_duplication_check((at_ble_scan_info_t*)event_params) )
				return;
		}
		#endif			
		
		for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
1000e810:	2e14      	cmp	r6, #20
1000e812:	d1f4      	bne.n	1000e7fe <ble_event_manager+0x26>
1000e814:	e072      	b.n	1000e8fc <ble_event_manager+0x124>
		for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_client_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_client_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000e816:	3c13      	subs	r4, #19
1000e818:	b2e4      	uxtb	r4, r4
1000e81a:	00a4      	lsls	r4, r4, #2
1000e81c:	2600      	movs	r6, #0
	{
		uint8_t idx;
		events -= (AT_BLE_CON_CHANNEL_MAP_IND + 1);
		for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_client_event_cb[idx] != NULL)
1000e81e:	4f3e      	ldr	r7, [pc, #248]	; (1000e918 <ble_event_manager+0x140>)
1000e820:	59bb      	ldr	r3, [r7, r6]
1000e822:	2b00      	cmp	r3, #0
1000e824:	d004      	beq.n	1000e830 <ble_event_manager+0x58>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_client_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000e826:	591b      	ldr	r3, [r3, r4]
1000e828:	2b00      	cmp	r3, #0
1000e82a:	d001      	beq.n	1000e830 <ble_event_manager+0x58>
				{
					event_cb_fn[events](event_params);
1000e82c:	0028      	movs	r0, r5
1000e82e:	4798      	blx	r3
1000e830:	3604      	adds	r6, #4
	case AT_BLE_NOTIFICATION_RECIEVED:
	case AT_BLE_INDICATION_RECIEVED:
	{
		uint8_t idx;
		events -= (AT_BLE_CON_CHANNEL_MAP_IND + 1);
		for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
1000e832:	2e14      	cmp	r6, #20
1000e834:	d1f4      	bne.n	1000e820 <ble_event_manager+0x48>
1000e836:	e061      	b.n	1000e8fc <ble_event_manager+0x124>
	case AT_BLE_MTU_CHANGED_CMD_COMPLETE:
	case AT_BLE_CHARACTERISTIC_WRITE_CMD_CMP:
	case AT_BLE_READ_AUTHORIZE_REQUEST:
	{
		uint8_t idx;
		events -= (AT_BLE_INDICATION_RECIEVED + 1);
1000e838:	3c1d      	subs	r4, #29
1000e83a:	b2e4      	uxtb	r4, r4
		DBG_LOG_DEV("GATT_Server Event:%d", events);
1000e83c:	4830      	ldr	r0, [pc, #192]	; (1000e900 <ble_event_manager+0x128>)
1000e83e:	4b31      	ldr	r3, [pc, #196]	; (1000e904 <ble_event_manager+0x12c>)
1000e840:	4798      	blx	r3
1000e842:	0021      	movs	r1, r4
1000e844:	4835      	ldr	r0, [pc, #212]	; (1000e91c <ble_event_manager+0x144>)
1000e846:	4b31      	ldr	r3, [pc, #196]	; (1000e90c <ble_event_manager+0x134>)
1000e848:	4798      	blx	r3
		for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_server_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_server_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000e84a:	00a4      	lsls	r4, r4, #2
1000e84c:	2600      	movs	r6, #0
		uint8_t idx;
		events -= (AT_BLE_INDICATION_RECIEVED + 1);
		DBG_LOG_DEV("GATT_Server Event:%d", events);
		for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_server_event_cb[idx] != NULL)
1000e84e:	4f34      	ldr	r7, [pc, #208]	; (1000e920 <ble_event_manager+0x148>)
1000e850:	59bb      	ldr	r3, [r7, r6]
1000e852:	2b00      	cmp	r3, #0
1000e854:	d004      	beq.n	1000e860 <ble_event_manager+0x88>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_server_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000e856:	591b      	ldr	r3, [r3, r4]
1000e858:	2b00      	cmp	r3, #0
1000e85a:	d001      	beq.n	1000e860 <ble_event_manager+0x88>
				{
					event_cb_fn[events](event_params);
1000e85c:	0028      	movs	r0, r5
1000e85e:	4798      	blx	r3
1000e860:	3604      	adds	r6, #4
	case AT_BLE_READ_AUTHORIZE_REQUEST:
	{
		uint8_t idx;
		events -= (AT_BLE_INDICATION_RECIEVED + 1);
		DBG_LOG_DEV("GATT_Server Event:%d", events);
		for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
1000e862:	2e14      	cmp	r6, #20
1000e864:	d1f4      	bne.n	1000e850 <ble_event_manager+0x78>
1000e866:	e049      	b.n	1000e8fc <ble_event_manager+0x124>
	case AT_BLE_LECB_ADD_CREDIT_IND:
	case AT_BLE_LECB_SEND_RESP:
	case AT_BLE_LECB_DATA_RECIEVED:
	{
		uint8_t idx;
		events -= (AT_BLE_READ_AUTHORIZE_REQUEST + 1);
1000e868:	3c27      	subs	r4, #39	; 0x27
1000e86a:	b2e4      	uxtb	r4, r4
		for (idx = 0; idx < MAX_L2CAP_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_l2cap_event_cb[idx] != NULL)
1000e86c:	4b2d      	ldr	r3, [pc, #180]	; (1000e924 <ble_event_manager+0x14c>)
1000e86e:	681b      	ldr	r3, [r3, #0]
1000e870:	2b00      	cmp	r3, #0
1000e872:	d043      	beq.n	1000e8fc <ble_event_manager+0x124>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_l2cap_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000e874:	00a4      	lsls	r4, r4, #2
1000e876:	58e3      	ldr	r3, [r4, r3]
1000e878:	2b00      	cmp	r3, #0
1000e87a:	d03f      	beq.n	1000e8fc <ble_event_manager+0x124>
				{
					event_cb_fn[events](event_params);
1000e87c:	0028      	movs	r0, r5
1000e87e:	4798      	blx	r3
1000e880:	e03c      	b.n	1000e8fc <ble_event_manager+0x124>
	case AT_BLE_HTPT_ENABLE_RSP:
	case AT_BLE_HTPT_MEAS_INTV_UPD_RSP:
	case AT_BLE_HTPT_MEAS_INTV_CHG_REQ:
	{
		uint8_t idx;
		events -= (AT_BLE_LECB_DATA_RECIEVED + 1);
1000e882:	3c2d      	subs	r4, #45	; 0x2d
1000e884:	b2e4      	uxtb	r4, r4
		for (idx = 0; idx < MAX_HTPT_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_htpt_event_cb[idx] != NULL)
1000e886:	4b28      	ldr	r3, [pc, #160]	; (1000e928 <ble_event_manager+0x150>)
1000e888:	681b      	ldr	r3, [r3, #0]
1000e88a:	2b00      	cmp	r3, #0
1000e88c:	d036      	beq.n	1000e8fc <ble_event_manager+0x124>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_htpt_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000e88e:	00a4      	lsls	r4, r4, #2
1000e890:	58e3      	ldr	r3, [r4, r3]
1000e892:	2b00      	cmp	r3, #0
1000e894:	d032      	beq.n	1000e8fc <ble_event_manager+0x124>
				{
					event_cb_fn[events](event_params);
1000e896:	0028      	movs	r0, r5
1000e898:	4798      	blx	r3
1000e89a:	e02f      	b.n	1000e8fc <ble_event_manager+0x124>
		for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_dtm_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_dtm_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000e89c:	3c36      	subs	r4, #54	; 0x36
1000e89e:	b2e4      	uxtb	r4, r4
1000e8a0:	00a4      	lsls	r4, r4, #2
1000e8a2:	2600      	movs	r6, #0
	{
		uint8_t idx;
		events -= (AT_BLE_HTPT_MEAS_INTV_CHG_REQ + 1);
		for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_dtm_event_cb[idx] != NULL)
1000e8a4:	4f21      	ldr	r7, [pc, #132]	; (1000e92c <ble_event_manager+0x154>)
1000e8a6:	59bb      	ldr	r3, [r7, r6]
1000e8a8:	2b00      	cmp	r3, #0
1000e8aa:	d004      	beq.n	1000e8b6 <ble_event_manager+0xde>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_dtm_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000e8ac:	591b      	ldr	r3, [r3, r4]
1000e8ae:	2b00      	cmp	r3, #0
1000e8b0:	d001      	beq.n	1000e8b6 <ble_event_manager+0xde>
				{
					event_cb_fn[events](event_params);
1000e8b2:	0028      	movs	r0, r5
1000e8b4:	4798      	blx	r3
1000e8b6:	3604      	adds	r6, #4
	case AT_BLE_LE_TEST_STATUS:
	case AT_BLE_LE_PACKET_REPORT:
	{
		uint8_t idx;
		events -= (AT_BLE_HTPT_MEAS_INTV_CHG_REQ + 1);
		for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
1000e8b8:	2e14      	cmp	r6, #20
1000e8ba:	d1f4      	bne.n	1000e8a6 <ble_event_manager+0xce>
1000e8bc:	e01e      	b.n	1000e8fc <ble_event_manager+0x124>
	case AT_BLE_CUSTOM_EVENT:
	case AT_BLE_DEVICE_READY:
	case AT_BLE_EVENT_MAX:
	{
		uint8_t idx;
		events -= (AT_BLE_LE_PACKET_REPORT + 1);
1000e8be:	3c38      	subs	r4, #56	; 0x38
1000e8c0:	b2e4      	uxtb	r4, r4
		for (idx = 0; idx < MAX_CUSTOM_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_custom_event_cb[idx] != NULL)
1000e8c2:	4b1b      	ldr	r3, [pc, #108]	; (1000e930 <ble_event_manager+0x158>)
1000e8c4:	681b      	ldr	r3, [r3, #0]
1000e8c6:	2b00      	cmp	r3, #0
1000e8c8:	d018      	beq.n	1000e8fc <ble_event_manager+0x124>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_custom_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000e8ca:	00a4      	lsls	r4, r4, #2
1000e8cc:	58e3      	ldr	r3, [r4, r3]
1000e8ce:	2b00      	cmp	r3, #0
1000e8d0:	d014      	beq.n	1000e8fc <ble_event_manager+0x124>
				{
					event_cb_fn[events](event_params);
1000e8d2:	0028      	movs	r0, r5
1000e8d4:	4798      	blx	r3
1000e8d6:	e011      	b.n	1000e8fc <ble_event_manager+0x124>
	}
	break;

	case AT_PLATFORM_EVENT:
	{
		if (ble_user_event_cb) {
1000e8d8:	4b16      	ldr	r3, [pc, #88]	; (1000e934 <ble_event_manager+0x15c>)
1000e8da:	681b      	ldr	r3, [r3, #0]
1000e8dc:	2b00      	cmp	r3, #0
1000e8de:	d00d      	beq.n	1000e8fc <ble_event_manager+0x124>
			ble_user_event_cb();
1000e8e0:	4798      	blx	r3
1000e8e2:	e00b      	b.n	1000e8fc <ble_event_manager+0x124>
	}
	break;

	default:
	{
		DBG_LOG_DEV("BLE-Manager:Unknown Event=0x%X", events);
1000e8e4:	4e06      	ldr	r6, [pc, #24]	; (1000e900 <ble_event_manager+0x128>)
1000e8e6:	0030      	movs	r0, r6
1000e8e8:	4d06      	ldr	r5, [pc, #24]	; (1000e904 <ble_event_manager+0x12c>)
1000e8ea:	47a8      	blx	r5
1000e8ec:	0021      	movs	r1, r4
1000e8ee:	4812      	ldr	r0, [pc, #72]	; (1000e938 <ble_event_manager+0x160>)
1000e8f0:	4b06      	ldr	r3, [pc, #24]	; (1000e90c <ble_event_manager+0x134>)
1000e8f2:	4798      	blx	r3
		DBG_LOG("\r\n");
1000e8f4:	0030      	movs	r0, r6
1000e8f6:	47a8      	blx	r5
1000e8f8:	0030      	movs	r0, r6
1000e8fa:	47a8      	blx	r5
	}
	break;		
	}
}
1000e8fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000e8fe:	46c0      	nop			; (mov r8, r8)
1000e900:	10016278 	.word	0x10016278
1000e904:	100150d1 	.word	0x100150d1
1000e908:	10017da8 	.word	0x10017da8
1000e90c:	10014fb1 	.word	0x10014fb1
1000e910:	10017308 	.word	0x10017308
1000e914:	1001a268 	.word	0x1001a268
1000e918:	1001a27c 	.word	0x1001a27c
1000e91c:	10017db8 	.word	0x10017db8
1000e920:	10019fd0 	.word	0x10019fd0
1000e924:	1001a2c4 	.word	0x1001a2c4
1000e928:	10019fcc 	.word	0x10019fcc
1000e92c:	1001a254 	.word	0x1001a254
1000e930:	1001a808 	.word	0x1001a808
1000e934:	10018b4c 	.word	0x10018b4c
1000e938:	10017dd0 	.word	0x10017dd0

1000e93c <ble_event_task>:
	return ulp_status;
}

/** @brief function to get event from stack */
at_ble_status_t ble_event_task(uint32_t timeout)
{
1000e93c:	b570      	push	{r4, r5, r6, lr}
1000e93e:	0004      	movs	r4, r0
	return status;
}

ble_ulp_mode_t ble_get_ulp_status(void)
{
	return ulp_status;
1000e940:	4b0d      	ldr	r3, [pc, #52]	; (1000e978 <ble_event_task+0x3c>)
1000e942:	781b      	ldrb	r3, [r3, #0]
/** @brief function to get event from stack */
at_ble_status_t ble_event_task(uint32_t timeout)
{
	at_ble_status_t status;
	
	if (ble_get_ulp_status() == BLE_ULP_MODE_SET)
1000e944:	2b01      	cmp	r3, #1
1000e946:	d101      	bne.n	1000e94c <ble_event_task+0x10>
	{
		release_sleep_lock();
1000e948:	4b0c      	ldr	r3, [pc, #48]	; (1000e97c <ble_event_task+0x40>)
1000e94a:	4798      	blx	r3
	}	
	status = at_ble_event_get(&event, ble_event_params, timeout);
1000e94c:	0022      	movs	r2, r4
1000e94e:	490c      	ldr	r1, [pc, #48]	; (1000e980 <ble_event_task+0x44>)
1000e950:	480c      	ldr	r0, [pc, #48]	; (1000e984 <ble_event_task+0x48>)
1000e952:	4b0d      	ldr	r3, [pc, #52]	; (1000e988 <ble_event_task+0x4c>)
1000e954:	4798      	blx	r3
1000e956:	0004      	movs	r4, r0
1000e958:	0005      	movs	r5, r0
	return status;
}

ble_ulp_mode_t ble_get_ulp_status(void)
{
	return ulp_status;
1000e95a:	4b07      	ldr	r3, [pc, #28]	; (1000e978 <ble_event_task+0x3c>)
1000e95c:	781b      	ldrb	r3, [r3, #0]
	{
		release_sleep_lock();
	}	
	status = at_ble_event_get(&event, ble_event_params, timeout);
	
	if (ble_get_ulp_status() == BLE_ULP_MODE_SET)
1000e95e:	2b01      	cmp	r3, #1
1000e960:	d101      	bne.n	1000e966 <ble_event_task+0x2a>
	{
		acquire_sleep_lock();
1000e962:	4b0a      	ldr	r3, [pc, #40]	; (1000e98c <ble_event_task+0x50>)
1000e964:	4798      	blx	r3
	}
	
    if (status == AT_BLE_SUCCESS) 
1000e966:	2d00      	cmp	r5, #0
1000e968:	d104      	bne.n	1000e974 <ble_event_task+0x38>
    {		
            ble_event_manager(event, ble_event_params);
1000e96a:	4b06      	ldr	r3, [pc, #24]	; (1000e984 <ble_event_task+0x48>)
1000e96c:	7818      	ldrb	r0, [r3, #0]
1000e96e:	4904      	ldr	r1, [pc, #16]	; (1000e980 <ble_event_task+0x44>)
1000e970:	4b07      	ldr	r3, [pc, #28]	; (1000e990 <ble_event_task+0x54>)
1000e972:	4798      	blx	r3
    }
    
    return status;
}
1000e974:	0020      	movs	r0, r4
1000e976:	bd70      	pop	{r4, r5, r6, pc}
1000e978:	10018b5b 	.word	0x10018b5b
1000e97c:	1000f359 	.word	0x1000f359
1000e980:	1001a5fc 	.word	0x1001a5fc
1000e984:	1001a2c0 	.word	0x1001a2c0
1000e988:	1000fa4d 	.word	0x1000fa4d
1000e98c:	1000f331 	.word	0x1000f331
1000e990:	1000e7d9 	.word	0x1000e7d9

1000e994 <ble_advertisement_data_set>:
	}
}

/* Advertisement Data will be set based on the advertisement configuration */
at_ble_status_t ble_advertisement_data_set(void)
{
1000e994:	b530      	push	{r4, r5, lr}
1000e996:	b091      	sub	sp, #68	; 0x44
		uint8_t length_field_ind;
		uint8_t adv_element_len;
		adv_buf[adv_data_element.len] = adv_data_element.len;
		length_field_ind = adv_data_element.len;
		adv_data_element.len++;
		adv_buf[adv_data_element.len++] = COMPLETE_LIST_16BIT_SERV_UUIDS;
1000e998:	ac08      	add	r4, sp, #32
1000e99a:	2203      	movs	r2, #3
1000e99c:	7062      	strb	r2, [r4, #1]
		MREPEAT(SERVICE_UUID16_MAX_NUM, _CONF_SERVICE_16BIT_UUID, &adv_data_element);
1000e99e:	2302      	movs	r3, #2
1000e9a0:	70a3      	strb	r3, [r4, #2]
1000e9a2:	3316      	adds	r3, #22
1000e9a4:	70e3      	strb	r3, [r4, #3]
1000e9a6:	7122      	strb	r2, [r4, #4]
1000e9a8:	7163      	strb	r3, [r4, #5]
1000e9aa:	3201      	adds	r2, #1
1000e9ac:	71a2      	strb	r2, [r4, #6]
1000e9ae:	71e3      	strb	r3, [r4, #7]
1000e9b0:	320b      	adds	r2, #11
1000e9b2:	7222      	strb	r2, [r4, #8]
1000e9b4:	7263      	strb	r3, [r4, #9]
		adv_element_len = adv_data_element.len - (length_field_ind + ADV_ELEMENT_SIZE);
		if(adv_element_len) 
		{			
			adv_buf[length_field_ind] = adv_element_len+ADV_TYPE_SIZE;
1000e9b6:	2509      	movs	r5, #9
1000e9b8:	7025      	strb	r5, [r4, #0]
	#endif
	
	#if (BLE_GAP_ADV_COMPLETE_LOCAL_NAME_ENABLE && !BLE_GAP_ADV_SHORTENED_LOCAL_NAME_ENABLE)
	#if (BLE_GAP_ADV_COMPLETE_LOCAL_NAME_SCN_RSP_ENABLE != SCAN_RESPONSE_ONLY_ENABLE)
	if((adv_data_element.len) <= (AT_BLE_ADV_MAX_SIZE - (ADV_TYPE_FLAG_SIZE + ADV_ELEMENT_SIZE + BLE_GAP_ADV_DATA_COMPLETE_LOCAL_NAME_LENGTH))) {
		adv_buf[adv_data_element.len++] = BLE_GAP_ADV_DATA_COMPLETE_LOCAL_NAME_LENGTH + ADV_TYPE_SIZE;
1000e9ba:	3b0e      	subs	r3, #14
1000e9bc:	72a3      	strb	r3, [r4, #10]
		adv_buf[adv_data_element.len++] = COMPLETE_LOCAL_NAME;
1000e9be:	72e5      	strb	r5, [r4, #11]
		memcpy(&adv_buf[adv_data_element.len], BLE_GAP_ADV_DATA_COMPLETE_LOCAL_NAME, BLE_GAP_ADV_DATA_COMPLETE_LOCAL_NAME_LENGTH);
1000e9c0:	aa0b      	add	r2, sp, #44	; 0x2c
1000e9c2:	4b16      	ldr	r3, [pc, #88]	; (1000ea1c <ble_advertisement_data_set+0x88>)
1000e9c4:	cb03      	ldmia	r3!, {r0, r1}
1000e9c6:	c203      	stmia	r2!, {r0, r1}
1000e9c8:	781b      	ldrb	r3, [r3, #0]
1000e9ca:	7013      	strb	r3, [r2, #0]
	#endif
	#if ((BLE_GAP_ADV_SERVICE_SOLTN_128BIT_UUID_SCN_RSP_ENABLE == SCAN_RESPONSE_ENABLE) || (BLE_GAP_ADV_SERVICE_SOLTN_128BIT_UUID_SCN_RSP_ENABLE == SCAN_RESPONSE_ONLY_ENABLE))
	else if((scan_resp_data_element.len) <= (AT_BLE_ADV_MAX_SIZE - (ADV_ELEMENT_SIZE + BLE_GAP_ADV_SERVICE_128BIT_UUID_LENGTH))) {
		uint8_t length_field_ind;
		uint8_t scan_resp_element_len;
		scn_resp[scan_resp_data_element.len] = scan_resp_data_element.len;
1000e9cc:	2300      	movs	r3, #0
1000e9ce:	466a      	mov	r2, sp
1000e9d0:	7013      	strb	r3, [r2, #0]
		length_field_ind = scan_resp_data_element.len;
		scan_resp_data_element.len++;
		scn_resp[scan_resp_data_element.len++] = LIST_128BIT_SERV_SOLICITATION_UUIDS;
1000e9d2:	3315      	adds	r3, #21
1000e9d4:	7053      	strb	r3, [r2, #1]
		return AT_BLE_GAP_INVALID_PARAM;
	}
	#endif
	
	#if BLE_GAP_ADV_MANUFACTURER_SPECIFIC_DATA_ENABLE
    DBG_LOG_DEV("[ble_manager]\t\t\tManufacturer specific data enabled");
1000e9d6:	4812      	ldr	r0, [pc, #72]	; (1000ea20 <ble_advertisement_data_set+0x8c>)
1000e9d8:	4b12      	ldr	r3, [pc, #72]	; (1000ea24 <ble_advertisement_data_set+0x90>)
1000e9da:	4798      	blx	r3
1000e9dc:	4812      	ldr	r0, [pc, #72]	; (1000ea28 <ble_advertisement_data_set+0x94>)
1000e9de:	4b13      	ldr	r3, [pc, #76]	; (1000ea2c <ble_advertisement_data_set+0x98>)
1000e9e0:	4798      	blx	r3
    DBG_LOG_DEV("[ble_manager]\t\tManufacturer specific data NOT enabled");
	if(false){}
	#endif
	#if ((BLE_GAP_ADV_MANUFACTURER_SPECIFIC_DATA_SCN_RSP_ENABLE == SCAN_RESPONSE_ENABLE) || (BLE_GAP_ADV_MANUFACTURER_SPECIFIC_DATA_SCN_RSP_ENABLE == SCAN_RESPONSE_ONLY_ENABLE))
	else if((scan_resp_data_element.len) <= (AT_BLE_ADV_MAX_SIZE - (ADV_ELEMENT_SIZE + BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA_SIZE))) {
		scn_resp[scan_resp_data_element.len++] = BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA_SIZE + ADV_TYPE_SIZE;
1000e9e2:	466b      	mov	r3, sp
1000e9e4:	701d      	strb	r5, [r3, #0]
		scn_resp[scan_resp_data_element.len++] = MANUFACTURER_SPECIFIC_DATA;
1000e9e6:	23ff      	movs	r3, #255	; 0xff
1000e9e8:	466a      	mov	r2, sp
1000e9ea:	7053      	strb	r3, [r2, #1]
		memcpy(&scn_resp[scan_resp_data_element.len], BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA, BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA_SIZE);
1000e9ec:	2208      	movs	r2, #8
1000e9ee:	4910      	ldr	r1, [pc, #64]	; (1000ea30 <ble_advertisement_data_set+0x9c>)
1000e9f0:	466b      	mov	r3, sp
1000e9f2:	1c98      	adds	r0, r3, #2
1000e9f4:	4b0f      	ldr	r3, [pc, #60]	; (1000ea34 <ble_advertisement_data_set+0xa0>)
1000e9f6:	4798      	blx	r3
		DBG_LOG_ADV("Failed to add Manufacturer specific data");
		return AT_BLE_GAP_INVALID_PARAM;
	}
	#endif
	
	if (at_ble_adv_data_set(adv_buf, adv_data_element.len, scn_resp,
1000e9f8:	230a      	movs	r3, #10
1000e9fa:	466a      	mov	r2, sp
1000e9fc:	2115      	movs	r1, #21
1000e9fe:	0020      	movs	r0, r4
1000ea00:	4c0d      	ldr	r4, [pc, #52]	; (1000ea38 <ble_advertisement_data_set+0xa4>)
1000ea02:	47a0      	blx	r4
1000ea04:	2800      	cmp	r0, #0
1000ea06:	d005      	beq.n	1000ea14 <ble_advertisement_data_set+0x80>
	scan_resp_data_element.len) != AT_BLE_SUCCESS) {
		DBG_LOG("BLE Advertisement data set failed");
1000ea08:	4805      	ldr	r0, [pc, #20]	; (1000ea20 <ble_advertisement_data_set+0x8c>)
1000ea0a:	4b06      	ldr	r3, [pc, #24]	; (1000ea24 <ble_advertisement_data_set+0x90>)
1000ea0c:	4798      	blx	r3
1000ea0e:	480b      	ldr	r0, [pc, #44]	; (1000ea3c <ble_advertisement_data_set+0xa8>)
1000ea10:	4b06      	ldr	r3, [pc, #24]	; (1000ea2c <ble_advertisement_data_set+0x98>)
1000ea12:	4798      	blx	r3
            //DBG_LOG_ADV("- 0x%02x(%c) ", adv_buf[i], adv_buf[i]);
        //}
		//DBG_LOG_ADV("BLE Advertisement data set success");
		return AT_BLE_SUCCESS;
    }
}
1000ea14:	2000      	movs	r0, #0
1000ea16:	b011      	add	sp, #68	; 0x44
1000ea18:	bd30      	pop	{r4, r5, pc}
1000ea1a:	46c0      	nop			; (mov r8, r8)
1000ea1c:	10017aec 	.word	0x10017aec
1000ea20:	10016278 	.word	0x10016278
1000ea24:	100150d1 	.word	0x100150d1
1000ea28:	10017df0 	.word	0x10017df0
1000ea2c:	10014fb1 	.word	0x10014fb1
1000ea30:	10017e24 	.word	0x10017e24
1000ea34:	10014e57 	.word	0x10014e57
1000ea38:	100104ad 	.word	0x100104ad
1000ea3c:	10017e30 	.word	0x10017e30

1000ea40 <register_ble_user_event_cb>:

/** @brief function to register callback to be called when AT_BLE_PLATFORM_EVENT event triggered from stack */
void register_ble_user_event_cb(ble_user_event_callback_t cb_fn)
{
	ble_user_event_cb = cb_fn;
1000ea40:	4b01      	ldr	r3, [pc, #4]	; (1000ea48 <register_ble_user_event_cb+0x8>)
1000ea42:	6018      	str	r0, [r3, #0]
}
1000ea44:	4770      	bx	lr
1000ea46:	46c0      	nop			; (mov r8, r8)
1000ea48:	10018b4c 	.word	0x10018b4c

1000ea4c <uart_read_complete_callback>:

void _time_start(unsigned int sec);
unsigned int _time_done(void);

static void uart_read_complete_callback(struct uart_module *const module)
{
1000ea4c:	b510      	push	{r4, lr}
	if(read_status == UART_READ_WAITING) {
1000ea4e:	4b0e      	ldr	r3, [pc, #56]	; (1000ea88 <uart_read_complete_callback+0x3c>)
1000ea50:	781b      	ldrb	r3, [r3, #0]
1000ea52:	2b01      	cmp	r3, #1
1000ea54:	d10b      	bne.n	1000ea6e <uart_read_complete_callback+0x22>
		read_status = UART_READ_DONE;
1000ea56:	2202      	movs	r2, #2
1000ea58:	4b0b      	ldr	r3, [pc, #44]	; (1000ea88 <uart_read_complete_callback+0x3c>)
1000ea5a:	701a      	strb	r2, [r3, #0]
		
		if(user_callback_func == NULL)
1000ea5c:	4b0b      	ldr	r3, [pc, #44]	; (1000ea8c <uart_read_complete_callback+0x40>)
1000ea5e:	681b      	ldr	r3, [r3, #0]
1000ea60:	2b00      	cmp	r3, #0
1000ea62:	d110      	bne.n	1000ea86 <uart_read_complete_callback+0x3a>
			uart_disable_callback(&uart_instance, UART_RX_COMPLETE);
1000ea64:	2102      	movs	r1, #2
1000ea66:	480a      	ldr	r0, [pc, #40]	; (1000ea90 <uart_read_complete_callback+0x44>)
1000ea68:	4b0a      	ldr	r3, [pc, #40]	; (1000ea94 <uart_read_complete_callback+0x48>)
1000ea6a:	4798      	blx	r3
1000ea6c:	e00b      	b.n	1000ea86 <uart_read_complete_callback+0x3a>
	}
	else if(user_callback_func != NULL) {
1000ea6e:	4b07      	ldr	r3, [pc, #28]	; (1000ea8c <uart_read_complete_callback+0x40>)
1000ea70:	681b      	ldr	r3, [r3, #0]
1000ea72:	2b00      	cmp	r3, #0
1000ea74:	d007      	beq.n	1000ea86 <uart_read_complete_callback+0x3a>
		user_callback_func(string_input[0]);
1000ea76:	4c08      	ldr	r4, [pc, #32]	; (1000ea98 <uart_read_complete_callback+0x4c>)
1000ea78:	7820      	ldrb	r0, [r4, #0]
1000ea7a:	4798      	blx	r3
		uart_read_buffer_job(&uart_instance, string_input, sizeof(string_input));
1000ea7c:	2201      	movs	r2, #1
1000ea7e:	0021      	movs	r1, r4
1000ea80:	4803      	ldr	r0, [pc, #12]	; (1000ea90 <uart_read_complete_callback+0x44>)
1000ea82:	4b06      	ldr	r3, [pc, #24]	; (1000ea9c <uart_read_complete_callback+0x50>)
1000ea84:	4798      	blx	r3
	}
	else {
		//Nothing to do.
	}
}
1000ea86:	bd10      	pop	{r4, pc}
1000ea88:	10019b60 	.word	0x10019b60
1000ea8c:	10019b68 	.word	0x10019b68
1000ea90:	1001a80c 	.word	0x1001a80c
1000ea94:	1000d431 	.word	0x1000d431
1000ea98:	10019b64 	.word	0x10019b64
1000ea9c:	1000d3d5 	.word	0x1000d3d5

1000eaa0 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct uart_module *const module,
		uint8_t *c)
{
1000eaa0:	b570      	push	{r4, r5, r6, lr}
1000eaa2:	0006      	movs	r6, r0
1000eaa4:	000d      	movs	r5, r1
	while(STATUS_OK != uart_read_wait(module, c));
1000eaa6:	4c03      	ldr	r4, [pc, #12]	; (1000eab4 <usart_serial_getchar+0x14>)
1000eaa8:	0029      	movs	r1, r5
1000eaaa:	0030      	movs	r0, r6
1000eaac:	47a0      	blx	r4
1000eaae:	2800      	cmp	r0, #0
1000eab0:	d1fa      	bne.n	1000eaa8 <usart_serial_getchar+0x8>
}
1000eab2:	bd70      	pop	{r4, r5, r6, pc}
1000eab4:	1000d3c1 	.word	0x1000d3c1

1000eab8 <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct uart_module *const module,
		uint8_t c)
{
1000eab8:	b570      	push	{r4, r5, r6, lr}
1000eaba:	0006      	movs	r6, r0
1000eabc:	000d      	movs	r5, r1
	while(STATUS_OK !=uart_write_wait(module, c));
1000eabe:	4c03      	ldr	r4, [pc, #12]	; (1000eacc <usart_serial_putchar+0x14>)
1000eac0:	0029      	movs	r1, r5
1000eac2:	0030      	movs	r0, r6
1000eac4:	47a0      	blx	r4
1000eac6:	2800      	cmp	r0, #0
1000eac8:	d1fa      	bne.n	1000eac0 <usart_serial_putchar+0x8>

	return STATUS_OK;
}
1000eaca:	bd70      	pop	{r4, r5, r6, pc}
1000eacc:	1000d3b1 	.word	0x1000d3b1

1000ead0 <serial_console_init>:

void serial_console_init(void)
{
1000ead0:	b570      	push	{r4, r5, r6, lr}
	system_clock_config(CLOCK_RESOURCE_XO_26_MHZ, CLOCK_FREQ_26_MHZ);
1000ead2:	2100      	movs	r1, #0
1000ead4:	2000      	movs	r0, #0
1000ead6:	4b19      	ldr	r3, [pc, #100]	; (1000eb3c <serial_console_init+0x6c>)
1000ead8:	4798      	blx	r3

	uart_get_config_defaults(&config_uart);
1000eada:	4c19      	ldr	r4, [pc, #100]	; (1000eb40 <serial_console_init+0x70>)
1000eadc:	0020      	movs	r0, r4
1000eade:	4b19      	ldr	r3, [pc, #100]	; (1000eb44 <serial_console_init+0x74>)
1000eae0:	4798      	blx	r3

	config_uart.baud_rate = CONF_STDIO_BAUDRATE;
1000eae2:	23e1      	movs	r3, #225	; 0xe1
1000eae4:	025b      	lsls	r3, r3, #9
1000eae6:	6023      	str	r3, [r4, #0]
	config_uart.pin_number_pad[0] = EDBG_CDC_PIN_PAD0;
1000eae8:	2302      	movs	r3, #2
1000eaea:	60a3      	str	r3, [r4, #8]
	config_uart.pin_number_pad[1] = EDBG_CDC_PIN_PAD1;
1000eaec:	2203      	movs	r2, #3
1000eaee:	60e2      	str	r2, [r4, #12]
	config_uart.pin_number_pad[2] = EDBG_CDC_PIN_PAD2;
1000eaf0:	3201      	adds	r2, #1
1000eaf2:	6122      	str	r2, [r4, #16]
	config_uart.pin_number_pad[3] = EDBG_CDC_PIN_PAD3;
1000eaf4:	3201      	adds	r2, #1
1000eaf6:	6162      	str	r2, [r4, #20]
	
	config_uart.pinmux_sel_pad[0] = EDBG_CDC_MUX_PAD0;
1000eaf8:	61a3      	str	r3, [r4, #24]
	config_uart.pinmux_sel_pad[1] = EDBG_CDC_MUX_PAD1;
1000eafa:	61e3      	str	r3, [r4, #28]
	config_uart.pinmux_sel_pad[2] = EDBG_CDC_MUX_PAD2;
1000eafc:	6223      	str	r3, [r4, #32]
	config_uart.pinmux_sel_pad[3] = EDBG_CDC_MUX_PAD3;
1000eafe:	6263      	str	r3, [r4, #36]	; 0x24
static inline void stdio_serial_init(
		struct uart_module *const module,
		Uart * const hw,
		const struct uart_config *const config)
{
	stdio_base = (void *)module;
1000eb00:	4d11      	ldr	r5, [pc, #68]	; (1000eb48 <serial_console_init+0x78>)
1000eb02:	4b12      	ldr	r3, [pc, #72]	; (1000eb4c <serial_console_init+0x7c>)
1000eb04:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
1000eb06:	4a12      	ldr	r2, [pc, #72]	; (1000eb50 <serial_console_init+0x80>)
1000eb08:	4b12      	ldr	r3, [pc, #72]	; (1000eb54 <serial_console_init+0x84>)
1000eb0a:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
1000eb0c:	4a12      	ldr	r2, [pc, #72]	; (1000eb58 <serial_console_init+0x88>)
1000eb0e:	4b13      	ldr	r3, [pc, #76]	; (1000eb5c <serial_console_init+0x8c>)
1000eb10:	601a      	str	r2, [r3, #0]
static inline bool usart_serial_init(
		struct uart_module *const module,
		Uart * const hw,
		const struct uart_config *const config)
{
	if (uart_init(module, hw, config) == STATUS_OK) {
1000eb12:	0022      	movs	r2, r4
1000eb14:	4912      	ldr	r1, [pc, #72]	; (1000eb60 <serial_console_init+0x90>)
1000eb16:	0028      	movs	r0, r5
1000eb18:	4b12      	ldr	r3, [pc, #72]	; (1000eb64 <serial_console_init+0x94>)
1000eb1a:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
1000eb1c:	4e12      	ldr	r6, [pc, #72]	; (1000eb68 <serial_console_init+0x98>)
1000eb1e:	6833      	ldr	r3, [r6, #0]
1000eb20:	6898      	ldr	r0, [r3, #8]
1000eb22:	2100      	movs	r1, #0
1000eb24:	4c11      	ldr	r4, [pc, #68]	; (1000eb6c <serial_console_init+0x9c>)
1000eb26:	47a0      	blx	r4
	setbuf(stdin, NULL);
1000eb28:	6833      	ldr	r3, [r6, #0]
1000eb2a:	6858      	ldr	r0, [r3, #4]
1000eb2c:	2100      	movs	r1, #0
1000eb2e:	47a0      	blx	r4

	stdio_serial_init(&uart_instance, CONF_STDIO_USART_MODULE, &config_uart);
	
	uart_register_callback(&uart_instance, uart_read_complete_callback, UART_RX_COMPLETE);
1000eb30:	2202      	movs	r2, #2
1000eb32:	490f      	ldr	r1, [pc, #60]	; (1000eb70 <serial_console_init+0xa0>)
1000eb34:	0028      	movs	r0, r5
1000eb36:	4b0f      	ldr	r3, [pc, #60]	; (1000eb74 <serial_console_init+0xa4>)
1000eb38:	4798      	blx	r3
}
1000eb3a:	bd70      	pop	{r4, r5, r6, pc}
1000eb3c:	1000c3d1 	.word	0x1000c3d1
1000eb40:	1001a830 	.word	0x1001a830
1000eb44:	1000d1c9 	.word	0x1000d1c9
1000eb48:	1001a80c 	.word	0x1001a80c
1000eb4c:	10019fc8 	.word	0x10019fc8
1000eb50:	1000eab9 	.word	0x1000eab9
1000eb54:	10019fc4 	.word	0x10019fc4
1000eb58:	1000eaa1 	.word	0x1000eaa1
1000eb5c:	10019fc0 	.word	0x10019fc0
1000eb60:	40004000 	.word	0x40004000
1000eb64:	1000d1f5 	.word	0x1000d1f5
1000eb68:	1001822c 	.word	0x1001822c
1000eb6c:	10015181 	.word	0x10015181
1000eb70:	1000ea4d 	.word	0x1000ea4d
1000eb74:	1000d3fd 	.word	0x1000d3fd

1000eb78 <_time_start>:

void _time_start(unsigned int sec)
{
1000eb78:	b5f0      	push	{r4, r5, r6, r7, lr}
1000eb7a:	b083      	sub	sp, #12
1000eb7c:	0005      	movs	r5, r0
	system_clock_get_value();
1000eb7e:	4c0d      	ldr	r4, [pc, #52]	; (1000ebb4 <_time_start+0x3c>)
1000eb80:	47a0      	blx	r4
	unsigned int main_clk = system_clock_get_value();
1000eb82:	47a0      	blx	r4

	tick = (((double)(main_clk)) * ((double)0.0000493)) * (sec * 1000);
1000eb84:	4f0c      	ldr	r7, [pc, #48]	; (1000ebb8 <_time_start+0x40>)
1000eb86:	47b8      	blx	r7
1000eb88:	4e0c      	ldr	r6, [pc, #48]	; (1000ebbc <_time_start+0x44>)
1000eb8a:	4a0d      	ldr	r2, [pc, #52]	; (1000ebc0 <_time_start+0x48>)
1000eb8c:	4b0d      	ldr	r3, [pc, #52]	; (1000ebc4 <_time_start+0x4c>)
1000eb8e:	47b0      	blx	r6
1000eb90:	9000      	str	r0, [sp, #0]
1000eb92:	9101      	str	r1, [sp, #4]
1000eb94:	20fa      	movs	r0, #250	; 0xfa
1000eb96:	0080      	lsls	r0, r0, #2
1000eb98:	4368      	muls	r0, r5
1000eb9a:	47b8      	blx	r7
1000eb9c:	0002      	movs	r2, r0
1000eb9e:	000b      	movs	r3, r1
1000eba0:	9800      	ldr	r0, [sp, #0]
1000eba2:	9901      	ldr	r1, [sp, #4]
1000eba4:	47b0      	blx	r6
1000eba6:	4b08      	ldr	r3, [pc, #32]	; (1000ebc8 <_time_start+0x50>)
1000eba8:	4798      	blx	r3
1000ebaa:	4b08      	ldr	r3, [pc, #32]	; (1000ebcc <_time_start+0x54>)
1000ebac:	6018      	str	r0, [r3, #0]
}
1000ebae:	b003      	add	sp, #12
1000ebb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000ebb2:	46c0      	nop			; (mov r8, r8)
1000ebb4:	1000c455 	.word	0x1000c455
1000ebb8:	10014d2d 	.word	0x10014d2d
1000ebbc:	10014125 	.word	0x10014125
1000ebc0:	19feaec7 	.word	0x19feaec7
1000ebc4:	3f09d8ef 	.word	0x3f09d8ef
1000ebc8:	100131c9 	.word	0x100131c9
1000ebcc:	10019b5c 	.word	0x10019b5c

1000ebd0 <_time_done>:

unsigned int _time_done()
{
	return --tick;
1000ebd0:	4b02      	ldr	r3, [pc, #8]	; (1000ebdc <_time_done+0xc>)
1000ebd2:	681a      	ldr	r2, [r3, #0]
1000ebd4:	1e50      	subs	r0, r2, #1
1000ebd6:	6018      	str	r0, [r3, #0]
}
1000ebd8:	4770      	bx	lr
1000ebda:	46c0      	nop			; (mov r8, r8)
1000ebdc:	10019b5c 	.word	0x10019b5c

1000ebe0 <getchar_b11_timeout>:

int getchar_b11_timeout(unsigned int sec)
{
1000ebe0:	b570      	push	{r4, r5, r6, lr}
1000ebe2:	0004      	movs	r4, r0
	read_status = UART_READ_WAITING;
1000ebe4:	2201      	movs	r2, #1
1000ebe6:	4b11      	ldr	r3, [pc, #68]	; (1000ec2c <getchar_b11_timeout+0x4c>)
1000ebe8:	701a      	strb	r2, [r3, #0]
	
	if(user_callback_func == NULL)
1000ebea:	4b11      	ldr	r3, [pc, #68]	; (1000ec30 <getchar_b11_timeout+0x50>)
1000ebec:	681b      	ldr	r3, [r3, #0]
1000ebee:	2b00      	cmp	r3, #0
1000ebf0:	d103      	bne.n	1000ebfa <getchar_b11_timeout+0x1a>
		uart_enable_callback(&uart_instance, UART_RX_COMPLETE);
1000ebf2:	2102      	movs	r1, #2
1000ebf4:	480f      	ldr	r0, [pc, #60]	; (1000ec34 <getchar_b11_timeout+0x54>)
1000ebf6:	4b10      	ldr	r3, [pc, #64]	; (1000ec38 <getchar_b11_timeout+0x58>)
1000ebf8:	4798      	blx	r3

	_time_start(sec);
1000ebfa:	0020      	movs	r0, r4
1000ebfc:	4b0f      	ldr	r3, [pc, #60]	; (1000ec3c <getchar_b11_timeout+0x5c>)
1000ebfe:	4798      	blx	r3
	
	string_input[0] = 0;
1000ec00:	490f      	ldr	r1, [pc, #60]	; (1000ec40 <getchar_b11_timeout+0x60>)
1000ec02:	2300      	movs	r3, #0
1000ec04:	700b      	strb	r3, [r1, #0]
	uart_read_buffer_job(&uart_instance, string_input, sizeof(string_input));
1000ec06:	2201      	movs	r2, #1
1000ec08:	480a      	ldr	r0, [pc, #40]	; (1000ec34 <getchar_b11_timeout+0x54>)
1000ec0a:	4b0e      	ldr	r3, [pc, #56]	; (1000ec44 <getchar_b11_timeout+0x64>)
1000ec0c:	4798      	blx	r3
	
	while (read_status != UART_READ_DONE && _time_done() > 0 );
1000ec0e:	4c07      	ldr	r4, [pc, #28]	; (1000ec2c <getchar_b11_timeout+0x4c>)
1000ec10:	4d0d      	ldr	r5, [pc, #52]	; (1000ec48 <getchar_b11_timeout+0x68>)
1000ec12:	7823      	ldrb	r3, [r4, #0]
1000ec14:	2b02      	cmp	r3, #2
1000ec16:	d002      	beq.n	1000ec1e <getchar_b11_timeout+0x3e>
1000ec18:	47a8      	blx	r5
1000ec1a:	2800      	cmp	r0, #0
1000ec1c:	d1f9      	bne.n	1000ec12 <getchar_b11_timeout+0x32>
	
	read_status = UART_READ_NONE;
1000ec1e:	2200      	movs	r2, #0
1000ec20:	4b02      	ldr	r3, [pc, #8]	; (1000ec2c <getchar_b11_timeout+0x4c>)
1000ec22:	701a      	strb	r2, [r3, #0]

	return string_input[0];
1000ec24:	4b06      	ldr	r3, [pc, #24]	; (1000ec40 <getchar_b11_timeout+0x60>)
1000ec26:	7818      	ldrb	r0, [r3, #0]
}
1000ec28:	bd70      	pop	{r4, r5, r6, pc}
1000ec2a:	46c0      	nop			; (mov r8, r8)
1000ec2c:	10019b60 	.word	0x10019b60
1000ec30:	10019b68 	.word	0x10019b68
1000ec34:	1001a80c 	.word	0x1001a80c
1000ec38:	1000d411 	.word	0x1000d411
1000ec3c:	1000eb79 	.word	0x1000eb79
1000ec40:	10019b64 	.word	0x10019b64
1000ec44:	1000d3d5 	.word	0x1000d3d5
1000ec48:	1000ebd1 	.word	0x1000ebd1

1000ec4c <platform_event_free>:
void platform_event_free(struct platform_event* event);
//struct str_watched_event watched_event;

void platform_event_free(struct platform_event* event)
{
	event->next = platform_event_free_list;
1000ec4c:	4b02      	ldr	r3, [pc, #8]	; (1000ec58 <platform_event_free+0xc>)
1000ec4e:	681a      	ldr	r2, [r3, #0]
1000ec50:	6002      	str	r2, [r0, #0]
	platform_event_free_list = event;
1000ec52:	6018      	str	r0, [r3, #0]
}
1000ec54:	4770      	bx	lr
1000ec56:	46c0      	nop			; (mov r8, r8)
1000ec58:	10019b70 	.word	0x10019b70

1000ec5c <platform_event_post>:

void platform_event_post(uint16_t event_type, void * data, uint16_t data_len)
{
1000ec5c:	b530      	push	{r4, r5, lr}
	// get a free event object
	struct platform_event* evt = platform_event_free_list;
1000ec5e:	4b0b      	ldr	r3, [pc, #44]	; (1000ec8c <platform_event_post+0x30>)
1000ec60:	681c      	ldr	r4, [r3, #0]
	if(evt != NULL)
1000ec62:	2c00      	cmp	r4, #0
1000ec64:	d011      	beq.n	1000ec8a <platform_event_post+0x2e>
	{
		platform_event_free_list = evt->next;
1000ec66:	6825      	ldr	r5, [r4, #0]
1000ec68:	601d      	str	r5, [r3, #0]
		
		evt->next = NULL;
1000ec6a:	2300      	movs	r3, #0
1000ec6c:	6023      	str	r3, [r4, #0]
		evt->data = data;
1000ec6e:	60a1      	str	r1, [r4, #8]
		evt->data_len = data_len;
1000ec70:	80e2      	strh	r2, [r4, #6]
		evt->event_type = event_type;
1000ec72:	80a0      	strh	r0, [r4, #4]

		if(platform_event_pending_list == NULL)
1000ec74:	4b06      	ldr	r3, [pc, #24]	; (1000ec90 <platform_event_post+0x34>)
1000ec76:	681a      	ldr	r2, [r3, #0]
1000ec78:	2a00      	cmp	r2, #0
1000ec7a:	d102      	bne.n	1000ec82 <platform_event_post+0x26>
		{
			platform_event_pending_list = evt;
1000ec7c:	601c      	str	r4, [r3, #0]
1000ec7e:	e004      	b.n	1000ec8a <platform_event_post+0x2e>
		else
		{
			struct platform_event* cur = platform_event_pending_list;
			while(cur->next != NULL)
			{
				cur = cur->next;
1000ec80:	001a      	movs	r2, r3
			platform_event_pending_list = evt;
		}
		else
		{
			struct platform_event* cur = platform_event_pending_list;
			while(cur->next != NULL)
1000ec82:	6813      	ldr	r3, [r2, #0]
1000ec84:	2b00      	cmp	r3, #0
1000ec86:	d1fb      	bne.n	1000ec80 <platform_event_post+0x24>
			{
				cur = cur->next;
			}
			cur->next = evt;
1000ec88:	6014      	str	r4, [r2, #0]
		}
		
		//platform_event_signal();
	}
	
}
1000ec8a:	bd30      	pop	{r4, r5, pc}
1000ec8c:	10019b70 	.word	0x10019b70
1000ec90:	10019b6c 	.word	0x10019b6c

1000ec94 <platform_event_init>:
	return status;
	
}

void platform_event_init()
{
1000ec94:	b570      	push	{r4, r5, r6, lr}
	uint32_t i;
	platform_event_free_list = NULL;
1000ec96:	2300      	movs	r3, #0
1000ec98:	4a06      	ldr	r2, [pc, #24]	; (1000ecb4 <platform_event_init+0x20>)
1000ec9a:	6013      	str	r3, [r2, #0]
	platform_event_pending_list = NULL;
1000ec9c:	4a06      	ldr	r2, [pc, #24]	; (1000ecb8 <platform_event_init+0x24>)
1000ec9e:	6013      	str	r3, [r2, #0]
1000eca0:	4c06      	ldr	r4, [pc, #24]	; (1000ecbc <platform_event_init+0x28>)
1000eca2:	0026      	movs	r6, r4
1000eca4:	3678      	adds	r6, #120	; 0x78
	//memset(&watched_event,0,sizeof(struct str_watched_event));
	for(i = 0; i < PLATFORM_EVENT_POOL_DEPTH; i++)
	{
		platform_event_free(&platform_event_pool[i]);
1000eca6:	4d06      	ldr	r5, [pc, #24]	; (1000ecc0 <platform_event_init+0x2c>)
1000eca8:	0020      	movs	r0, r4
1000ecaa:	47a8      	blx	r5
1000ecac:	340c      	adds	r4, #12
{
	uint32_t i;
	platform_event_free_list = NULL;
	platform_event_pending_list = NULL;
	//memset(&watched_event,0,sizeof(struct str_watched_event));
	for(i = 0; i < PLATFORM_EVENT_POOL_DEPTH; i++)
1000ecae:	42b4      	cmp	r4, r6
1000ecb0:	d1fa      	bne.n	1000eca8 <platform_event_init+0x14>
	{
		platform_event_free(&platform_event_pool[i]);
	}
}
1000ecb2:	bd70      	pop	{r4, r5, r6, pc}
1000ecb4:	10019b70 	.word	0x10019b70
1000ecb8:	10019b6c 	.word	0x10019b6c
1000ecbc:	10019b74 	.word	0x10019b74
1000ecc0:	1000ec4d 	.word	0x1000ec4d

1000ecc4 <at_ke_msg_send>:
	}
	return status;
}

static void at_ke_msg_send(void const * param_ptr)
{
1000ecc4:	b570      	push	{r4, r5, r6, lr}
1000ecc6:	0004      	movs	r4, r0
	struct ke_msg *kemsg;
	uint8_t osc_en = REG_PL_RD(0x4000B1EC)&0x01;
1000ecc8:	4b13      	ldr	r3, [pc, #76]	; (1000ed18 <at_ke_msg_send+0x54>)
1000ecca:	681d      	ldr	r5, [r3, #0]
	ke_msg_send(param_ptr);
1000eccc:	4b13      	ldr	r3, [pc, #76]	; (1000ed1c <at_ke_msg_send+0x58>)
1000ecce:	681b      	ldr	r3, [r3, #0]
1000ecd0:	4798      	blx	r3
	kemsg = ke_param2msg(param_ptr);

	if((kemsg != NULL) && (kemsg->dest_id != TASK_INTERNAL_APP)) {
1000ecd2:	2c0c      	cmp	r4, #12
1000ecd4:	d01f      	beq.n	1000ed16 <at_ke_msg_send+0x52>
1000ecd6:	3c0c      	subs	r4, #12
1000ecd8:	88e3      	ldrh	r3, [r4, #6]
1000ecda:	2b05      	cmp	r3, #5
1000ecdc:	d01b      	beq.n	1000ed16 <at_ke_msg_send+0x52>
		if(osc_en == 0)
1000ecde:	07eb      	lsls	r3, r5, #31
1000ece0:	d414      	bmi.n	1000ed0c <at_ke_msg_send+0x48>
		{
			/* BLE Core is off, issue a wakeup request*/
			/* First, make sure PD4 is powered up and out of reset */
			pwr_enable_arm_wakeup(1<<1);
1000ece2:	4b0f      	ldr	r3, [pc, #60]	; (1000ed20 <at_ke_msg_send+0x5c>)
1000ece4:	681b      	ldr	r3, [r3, #0]
1000ece6:	2002      	movs	r0, #2
1000ece8:	4798      	blx	r3
			pwr_arm_wakeup_req();
1000ecea:	4b0e      	ldr	r3, [pc, #56]	; (1000ed24 <at_ke_msg_send+0x60>)
1000ecec:	681b      	ldr	r3, [r3, #0]
1000ecee:	4798      	blx	r3
			while (pwr_wait_BLE_out_of_reset(3));
1000ecf0:	4c0d      	ldr	r4, [pc, #52]	; (1000ed28 <at_ke_msg_send+0x64>)
1000ecf2:	2003      	movs	r0, #3
1000ecf4:	6823      	ldr	r3, [r4, #0]
1000ecf6:	4798      	blx	r3
1000ecf8:	2800      	cmp	r0, #0
1000ecfa:	d1fa      	bne.n	1000ecf2 <at_ke_msg_send+0x2e>
			pwr_disable_arm_wakeup(1<<1);
1000ecfc:	4b0b      	ldr	r3, [pc, #44]	; (1000ed2c <at_ke_msg_send+0x68>)
1000ecfe:	681b      	ldr	r3, [r3, #0]
1000ed00:	3002      	adds	r0, #2
1000ed02:	4798      	blx	r3
			REG_PL_WR(0x4000B020, 1);
1000ed04:	2201      	movs	r2, #1
1000ed06:	4b0a      	ldr	r3, [pc, #40]	; (1000ed30 <at_ke_msg_send+0x6c>)
1000ed08:	601a      	str	r2, [r3, #0]
1000ed0a:	e004      	b.n	1000ed16 <at_ke_msg_send+0x52>
#endif	//CHIPVERSION_B0
		}
		else
		{
			/*  */
			os_sem_up(gstrFwSem);
1000ed0c:	4b09      	ldr	r3, [pc, #36]	; (1000ed34 <at_ke_msg_send+0x70>)
1000ed0e:	6818      	ldr	r0, [r3, #0]
1000ed10:	4b09      	ldr	r3, [pc, #36]	; (1000ed38 <at_ke_msg_send+0x74>)
1000ed12:	681b      	ldr	r3, [r3, #0]
1000ed14:	4798      	blx	r3
		}
	}
}
1000ed16:	bd70      	pop	{r4, r5, r6, pc}
1000ed18:	4000b1ec 	.word	0x4000b1ec
1000ed1c:	10019c1c 	.word	0x10019c1c
1000ed20:	10019c14 	.word	0x10019c14
1000ed24:	10019c28 	.word	0x10019c28
1000ed28:	10019bfc 	.word	0x10019bfc
1000ed2c:	10019c04 	.word	0x10019c04
1000ed30:	4000b020 	.word	0x4000b020
1000ed34:	10019c08 	.word	0x10019c08
1000ed38:	10019bf8 	.word	0x10019bf8

1000ed3c <samb11_plf_resume_callback>:
	rwip_prevent_sleep_clear(APP_PREVENT_SLEEP);
	return status;
}

void samb11_plf_resume_callback(void)
{
1000ed3c:	b510      	push	{r4, lr}
	//spi_flash_turn_off();
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0,default_samb11_clock_init[0]);
1000ed3e:	4b06      	ldr	r3, [pc, #24]	; (1000ed58 <samb11_plf_resume_callback+0x1c>)
1000ed40:	4a06      	ldr	r2, [pc, #24]	; (1000ed5c <samb11_plf_resume_callback+0x20>)
1000ed42:	6819      	ldr	r1, [r3, #0]
1000ed44:	6011      	str	r1, [r2, #0]
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1,default_samb11_clock_init[1]);
1000ed46:	685a      	ldr	r2, [r3, #4]
1000ed48:	4b05      	ldr	r3, [pc, #20]	; (1000ed60 <samb11_plf_resume_callback+0x24>)
1000ed4a:	601a      	str	r2, [r3, #0]
	if(samb11_app_resume_cb != NULL)
1000ed4c:	4b05      	ldr	r3, [pc, #20]	; (1000ed64 <samb11_plf_resume_callback+0x28>)
1000ed4e:	681b      	ldr	r3, [r3, #0]
1000ed50:	2b00      	cmp	r3, #0
1000ed52:	d000      	beq.n	1000ed56 <samb11_plf_resume_callback+0x1a>
	{
		samb11_app_resume_cb();
1000ed54:	4798      	blx	r3
	}
}
1000ed56:	bd10      	pop	{r4, pc}
1000ed58:	1001a858 	.word	0x1001a858
1000ed5c:	4000b00c 	.word	0x4000b00c
1000ed60:	4000b010 	.word	0x4000b010
1000ed64:	1001ab34 	.word	0x1001ab34

1000ed68 <init_port_list>:
port port_list[LPGPIO_MAX];
uint32_t default_samb11_clock_init[2];
void samb11_plf_resume_callback(void);

void init_port_list(void)
{
1000ed68:	b570      	push	{r4, r5, r6, lr}
	uint8_t i;
	memset(port_list,0,sizeof(port_list));
1000ed6a:	2232      	movs	r2, #50	; 0x32
1000ed6c:	2100      	movs	r1, #0
1000ed6e:	480d      	ldr	r0, [pc, #52]	; (1000eda4 <init_port_list+0x3c>)
1000ed70:	4b0d      	ldr	r3, [pc, #52]	; (1000eda8 <init_port_list+0x40>)
1000ed72:	4798      	blx	r3
1000ed74:	2100      	movs	r1, #0
	for(i=0;i<(sizeof(port_list)/sizeof(port_list[0]));i++) {
		port_list[i].bit.gpio_num = i;
1000ed76:	480b      	ldr	r0, [pc, #44]	; (1000eda4 <init_port_list+0x3c>)
		port_list[i].bit.available = 1;
1000ed78:	2501      	movs	r5, #1
		port_list[i].bit.configured = 0;
1000ed7a:	2402      	movs	r4, #2
void init_port_list(void)
{
	uint8_t i;
	memset(port_list,0,sizeof(port_list));
	for(i=0;i<(sizeof(port_list)/sizeof(port_list[0]));i++) {
		port_list[i].bit.gpio_num = i;
1000ed7c:	004a      	lsls	r2, r1, #1
1000ed7e:	5411      	strb	r1, [r2, r0]
		port_list[i].bit.available = 1;
1000ed80:	1882      	adds	r2, r0, r2
1000ed82:	7853      	ldrb	r3, [r2, #1]
1000ed84:	432b      	orrs	r3, r5
		port_list[i].bit.configured = 0;
1000ed86:	b2db      	uxtb	r3, r3
1000ed88:	43a3      	bics	r3, r4
1000ed8a:	7053      	strb	r3, [r2, #1]
1000ed8c:	3101      	adds	r1, #1

void init_port_list(void)
{
	uint8_t i;
	memset(port_list,0,sizeof(port_list));
	for(i=0;i<(sizeof(port_list)/sizeof(port_list[0]));i++) {
1000ed8e:	2919      	cmp	r1, #25
1000ed90:	d1f4      	bne.n	1000ed7c <init_port_list+0x14>
		port_list[i].bit.gpio_num = i;
		port_list[i].bit.available = 1;
		port_list[i].bit.configured = 0;
	}
	//Set the GPIO for SWD is not available
	port_list[0].bit.available = 0;
1000ed92:	4b04      	ldr	r3, [pc, #16]	; (1000eda4 <init_port_list+0x3c>)
1000ed94:	785a      	ldrb	r2, [r3, #1]
1000ed96:	3918      	subs	r1, #24
1000ed98:	438a      	bics	r2, r1
1000ed9a:	705a      	strb	r2, [r3, #1]
	port_list[1].bit.available = 0;
1000ed9c:	78da      	ldrb	r2, [r3, #3]
1000ed9e:	438a      	bics	r2, r1
1000eda0:	70da      	strb	r2, [r3, #3]
	//GPIO 14 is used for Coex and controlled by Firmware
	//port_list[14].bit.available = 0;
}
1000eda2:	bd70      	pop	{r4, r5, r6, pc}
1000eda4:	1001a874 	.word	0x1001a874
1000eda8:	10014e69 	.word	0x10014e69

1000edac <init_clock>:

void init_clock(void)
{
	uint32_t regval;
	regval = REG_PL_RD(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0);
1000edac:	4a06      	ldr	r2, [pc, #24]	; (1000edc8 <init_clock+0x1c>)
1000edae:	6811      	ldr	r1, [r2, #0]
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WATCHDOG_1_CLK_EN);
	//disable UART core & interface clocks
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_CORE_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_IF_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_1_CORE_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_1_IF_CLK_EN);
1000edb0:	4b06      	ldr	r3, [pc, #24]	; (1000edcc <init_clock+0x20>)
1000edb2:	400b      	ands	r3, r1
	//disable I2C core 1 clocks
	//regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CORTUS_I2C1_CORE_CLK_EN);		//do not disable I2C because I2C driver in ASF will not enable.
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0,regval);
1000edb4:	6013      	str	r3, [r2, #0]
	default_samb11_clock_init[0] = regval;
1000edb6:	4a06      	ldr	r2, [pc, #24]	; (1000edd0 <init_clock+0x24>)
1000edb8:	6013      	str	r3, [r2, #0]
	
	regval = REG_PL_RD(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1);
1000edba:	4906      	ldr	r1, [pc, #24]	; (1000edd4 <init_clock+0x28>)
1000edbc:	6808      	ldr	r0, [r1, #0]
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_4_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_5_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_6_CLK_EN);
	//disable SPI SCK Phase int clock 
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI0_SCK_PHASE_INT_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI1_SCK_PHASE_INT_CLK_EN);
1000edbe:	4b06      	ldr	r3, [pc, #24]	; (1000edd8 <init_clock+0x2c>)
1000edc0:	4003      	ands	r3, r0
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1,regval);
1000edc2:	600b      	str	r3, [r1, #0]
	default_samb11_clock_init[1] = regval;
1000edc4:	6053      	str	r3, [r2, #4]
	//ARM debugger
	
	//store default values
}
1000edc6:	4770      	bx	lr
1000edc8:	4000b00c 	.word	0x4000b00c
1000edcc:	fffe0fd3 	.word	0xfffe0fd3
1000edd0:	1001a858 	.word	0x1001a858
1000edd4:	4000b010 	.word	0x4000b010
1000edd8:	ffffe7c0 	.word	0xffffe7c0

1000eddc <platform_driver_init>:

plf_drv_status platform_driver_init()
{
1000eddc:	b5f0      	push	{r4, r5, r6, r7, lr}
1000edde:	4657      	mov	r7, sl
1000ede0:	464e      	mov	r6, r9
1000ede2:	4645      	mov	r5, r8
1000ede4:	b4e0      	push	{r5, r6, r7}
	plf_drv_status status = STATUS_NOT_INITIALIZED;
	if((platform_initialized == 0) || (platform_initialized != 1)) {
1000ede6:	4b4f      	ldr	r3, [pc, #316]	; (1000ef24 <platform_driver_init+0x148>)
1000ede8:	781b      	ldrb	r3, [r3, #0]
1000edea:	2b00      	cmp	r3, #0
1000edec:	d004      	beq.n	1000edf8 <platform_driver_init+0x1c>
1000edee:	4b4d      	ldr	r3, [pc, #308]	; (1000ef24 <platform_driver_init+0x148>)
1000edf0:	781b      	ldrb	r3, [r3, #0]
1000edf2:	2b01      	cmp	r3, #1
1000edf4:	d100      	bne.n	1000edf8 <platform_driver_init+0x1c>
1000edf6:	e08c      	b.n	1000ef12 <platform_driver_init+0x136>
		init_port_list();
1000edf8:	4b4b      	ldr	r3, [pc, #300]	; (1000ef28 <platform_driver_init+0x14c>)
1000edfa:	4798      	blx	r3
		init_clock();
1000edfc:	4b4b      	ldr	r3, [pc, #300]	; (1000ef2c <platform_driver_init+0x150>)
1000edfe:	4798      	blx	r3
		// Initialize the ble stack message handler to NULL
		ble_stack_message_handler = NULL;
1000ee00:	2300      	movs	r3, #0
1000ee02:	4698      	mov	r8, r3
1000ee04:	4b4a      	ldr	r3, [pc, #296]	; (1000ef30 <platform_driver_init+0x154>)
1000ee06:	4642      	mov	r2, r8
1000ee08:	601a      	str	r2, [r3, #0]

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000ee0a:	4c4a      	ldr	r4, [pc, #296]	; (1000ef34 <platform_driver_init+0x158>)
1000ee0c:	2380      	movs	r3, #128	; 0x80
1000ee0e:	2280      	movs	r2, #128	; 0x80
1000ee10:	0412      	lsls	r2, r2, #16
1000ee12:	4692      	mov	sl, r2
1000ee14:	50e2      	str	r2, [r4, r3]
1000ee16:	2280      	movs	r2, #128	; 0x80
1000ee18:	0452      	lsls	r2, r2, #17
1000ee1a:	4691      	mov	r9, r2
1000ee1c:	50e2      	str	r2, [r4, r3]
#ifdef CHIPVERSION_B0
		NVIC_DisableIRQ(GPIO0_IRQn);
		NVIC_DisableIRQ(GPIO1_IRQn);
		/* NVIC_DisableIRQ(PORT0_COMB_IRQn); */
		/* NVIC_DisableIRQ(PORT1_COMB_IRQn); */
		platform_register_isr = (uint8_t (*)(uint8_t ,void *))0x000007d7;
1000ee1e:	4d46      	ldr	r5, [pc, #280]	; (1000ef38 <platform_driver_init+0x15c>)
1000ee20:	4b46      	ldr	r3, [pc, #280]	; (1000ef3c <platform_driver_init+0x160>)
1000ee22:	602b      	str	r3, [r5, #0]
		platform_unregister_isr = (uint8_t (*)(uint8_t ))0x000007bd;
1000ee24:	4b46      	ldr	r3, [pc, #280]	; (1000ef40 <platform_driver_init+0x164>)
1000ee26:	4a47      	ldr	r2, [pc, #284]	; (1000ef44 <platform_driver_init+0x168>)
1000ee28:	6013      	str	r3, [r2, #0]
		handle_ext_wakeup_isr = (void (*)(void))0x1bc51;
1000ee2a:	4947      	ldr	r1, [pc, #284]	; (1000ef48 <platform_driver_init+0x16c>)
1000ee2c:	4a47      	ldr	r2, [pc, #284]	; (1000ef4c <platform_driver_init+0x170>)
1000ee2e:	6011      	str	r1, [r2, #0]
		gapm_get_task_from_id = (ke_task_id_t (*)(ke_msg_id_t))(*((unsigned int *)0x100400bc));
1000ee30:	4a47      	ldr	r2, [pc, #284]	; (1000ef50 <platform_driver_init+0x174>)
1000ee32:	6811      	ldr	r1, [r2, #0]
1000ee34:	4a47      	ldr	r2, [pc, #284]	; (1000ef54 <platform_driver_init+0x178>)
1000ee36:	6011      	str	r1, [r2, #0]
		gapm_get_id_from_task = (ke_task_id_t (*)(ke_msg_id_t))(*((unsigned int *)0x100400b8));
1000ee38:	4a47      	ldr	r2, [pc, #284]	; (1000ef58 <platform_driver_init+0x17c>)
1000ee3a:	6811      	ldr	r1, [r2, #0]
1000ee3c:	4a47      	ldr	r2, [pc, #284]	; (1000ef5c <platform_driver_init+0x180>)
1000ee3e:	6011      	str	r1, [r2, #0]
		rwip_prevent_sleep_set = (void (*)(uint16_t))0x0001b99f;
1000ee40:	4947      	ldr	r1, [pc, #284]	; (1000ef60 <platform_driver_init+0x184>)
1000ee42:	4a48      	ldr	r2, [pc, #288]	; (1000ef64 <platform_driver_init+0x188>)
1000ee44:	6011      	str	r1, [r2, #0]
		rwip_prevent_sleep_clear = (void (*)(uint16_t))0x0001b9db;
1000ee46:	4948      	ldr	r1, [pc, #288]	; (1000ef68 <platform_driver_init+0x18c>)
1000ee48:	4a48      	ldr	r2, [pc, #288]	; (1000ef6c <platform_driver_init+0x190>)
1000ee4a:	6011      	str	r1, [r2, #0]
		apps_resume_cb = (uint32_t *)0x1004003c;
1000ee4c:	4f48      	ldr	r7, [pc, #288]	; (1000ef70 <platform_driver_init+0x194>)
1000ee4e:	4a49      	ldr	r2, [pc, #292]	; (1000ef74 <platform_driver_init+0x198>)
1000ee50:	603a      	str	r2, [r7, #0]
		actualfreq = (uint32_t *)0x10041FC0; /* set to NULL for now as clock calibration is disabled for the time being */  /*(uint32_t *)0x10006bd8;*/
1000ee52:	4949      	ldr	r1, [pc, #292]	; (1000ef78 <platform_driver_init+0x19c>)
1000ee54:	4a49      	ldr	r2, [pc, #292]	; (1000ef7c <platform_driver_init+0x1a0>)
1000ee56:	6011      	str	r1, [r2, #0]
		updateuartbr_fp = (void (*)())0x10041FC4;
1000ee58:	4949      	ldr	r1, [pc, #292]	; (1000ef80 <platform_driver_init+0x1a4>)
1000ee5a:	4a4a      	ldr	r2, [pc, #296]	; (1000ef84 <platform_driver_init+0x1a8>)
1000ee5c:	6011      	str	r1, [r2, #0]
		wakeup_source_active_cb = (uint32_t *)0x10041FD4;
1000ee5e:	4e4a      	ldr	r6, [pc, #296]	; (1000ef88 <platform_driver_init+0x1ac>)
1000ee60:	4a4a      	ldr	r2, [pc, #296]	; (1000ef8c <platform_driver_init+0x1b0>)
1000ee62:	6032      	str	r2, [r6, #0]
		wakeup_event_pending = (uint32_t *)0x10041FD8;
1000ee64:	494a      	ldr	r1, [pc, #296]	; (1000ef90 <platform_driver_init+0x1b4>)
1000ee66:	4a4b      	ldr	r2, [pc, #300]	; (1000ef94 <platform_driver_init+0x1b8>)
1000ee68:	6011      	str	r1, [r2, #0]
		/* power APIs */
		pwr_enable_arm_wakeup = (void (*)(uint32_t wakeup_domain))0x0001cbe9;
1000ee6a:	494b      	ldr	r1, [pc, #300]	; (1000ef98 <platform_driver_init+0x1bc>)
1000ee6c:	4a4b      	ldr	r2, [pc, #300]	; (1000ef9c <platform_driver_init+0x1c0>)
1000ee6e:	6011      	str	r1, [r2, #0]
		pwr_disable_arm_wakeup = (void (*)(uint32_t wakeup_domain))0x0001cd8f;
1000ee70:	494b      	ldr	r1, [pc, #300]	; (1000efa0 <platform_driver_init+0x1c4>)
1000ee72:	4a4c      	ldr	r2, [pc, #304]	; (1000efa4 <platform_driver_init+0x1c8>)
1000ee74:	6011      	str	r1, [r2, #0]
		pwr_arm_wakeup_req = (int (*)(void))0x0001cea3;
1000ee76:	494c      	ldr	r1, [pc, #304]	; (1000efa8 <platform_driver_init+0x1cc>)
1000ee78:	4a4c      	ldr	r2, [pc, #304]	; (1000efac <platform_driver_init+0x1d0>)
1000ee7a:	6011      	str	r1, [r2, #0]
		pwr_wait_BLE_out_of_reset = (int (*)(uint32_t threshold))0x0001cbcf;
1000ee7c:	494c      	ldr	r1, [pc, #304]	; (1000efb0 <platform_driver_init+0x1d4>)
1000ee7e:	4a4d      	ldr	r2, [pc, #308]	; (1000efb4 <platform_driver_init+0x1d8>)
1000ee80:	6011      	str	r1, [r2, #0]
		NVIC_DisableIRQ(PORT1_ALL_IRQn);
		platform_register_isr = register_isr;
		platform_unregister_isr = unregister_isr;
		handle_ext_wakeup_isr = (void (*)(void))0x14085;
#endif
		platform_unregister_isr(GPIO1_COMBINED_VECTOR_TABLE_INDEX);
1000ee82:	2028      	movs	r0, #40	; 0x28
1000ee84:	4798      	blx	r3
		platform_register_isr(GPIO1_COMBINED_VECTOR_TABLE_INDEX,(void*)PORT1_COMB_Handler);
1000ee86:	494c      	ldr	r1, [pc, #304]	; (1000efb8 <platform_driver_init+0x1dc>)
1000ee88:	2028      	movs	r0, #40	; 0x28
1000ee8a:	682b      	ldr	r3, [r5, #0]
1000ee8c:	4798      	blx	r3
		platform_register_isr(GPIO0_COMBINED_VECTOR_TABLE_INDEX,(void*)gpio0_combined_isr_handler);
1000ee8e:	682b      	ldr	r3, [r5, #0]
1000ee90:	494a      	ldr	r1, [pc, #296]	; (1000efbc <platform_driver_init+0x1e0>)
1000ee92:	2027      	movs	r0, #39	; 0x27
1000ee94:	4798      	blx	r3
		//gstrFwSem               = (void *)0x100004e4;
		//NMI_MsgQueueRecv = (int (*)(void *, void ** )) 0x00017f67;
		//InternalAppMsgQHandle = (void *)0x10001158;
		//ke_free = (void (*)(void *)) 0x00015e3d;
#elif CHIPVERSION_B0
		ke_msg_send 	= (void (*)(void const *))(*((unsigned int *)0x100400e4));
1000ee96:	4b4a      	ldr	r3, [pc, #296]	; (1000efc0 <platform_driver_init+0x1e4>)
1000ee98:	681a      	ldr	r2, [r3, #0]
1000ee9a:	4b4a      	ldr	r3, [pc, #296]	; (1000efc4 <platform_driver_init+0x1e8>)
1000ee9c:	601a      	str	r2, [r3, #0]
		ke_msg_alloc 	= (void* (*)(ke_msg_id_t const id, ke_task_id_t const dest_id,
1000ee9e:	4a4a      	ldr	r2, [pc, #296]	; (1000efc8 <platform_driver_init+0x1ec>)
1000eea0:	4b4a      	ldr	r3, [pc, #296]	; (1000efcc <platform_driver_init+0x1f0>)
1000eea2:	601a      	str	r2, [r3, #0]
										ke_task_id_t const src_id, uint16_t const param_len) )0x00019fe9;
		os_sem_up 		= (int (*)(void*))0x0001dbdd;
1000eea4:	4a4a      	ldr	r2, [pc, #296]	; (1000efd0 <platform_driver_init+0x1f4>)
1000eea6:	4b4b      	ldr	r3, [pc, #300]	; (1000efd4 <platform_driver_init+0x1f8>)
1000eea8:	601a      	str	r2, [r3, #0]
		os_sem_down		= (int (*)(void*))0x0001dc5b;
1000eeaa:	4a4b      	ldr	r2, [pc, #300]	; (1000efd8 <platform_driver_init+0x1fc>)
1000eeac:	4b4b      	ldr	r3, [pc, #300]	; (1000efdc <platform_driver_init+0x200>)
1000eeae:	601a      	str	r2, [r3, #0]
		gstrFwSem 		= (void*)0x100405ec;
1000eeb0:	4a4b      	ldr	r2, [pc, #300]	; (1000efe0 <platform_driver_init+0x204>)
1000eeb2:	4b4c      	ldr	r3, [pc, #304]	; (1000efe4 <platform_driver_init+0x208>)
1000eeb4:	601a      	str	r2, [r3, #0]
		NMI_MsgQueueRecv = (int(*)(void*, void ** ))0x0001d5e3;
1000eeb6:	4a4c      	ldr	r2, [pc, #304]	; (1000efe8 <platform_driver_init+0x20c>)
1000eeb8:	4b4c      	ldr	r3, [pc, #304]	; (1000efec <platform_driver_init+0x210>)
1000eeba:	601a      	str	r2, [r3, #0]
		InternalAppMsgQHandle = (void*)0x10040c20;
1000eebc:	4a4c      	ldr	r2, [pc, #304]	; (1000eff0 <platform_driver_init+0x214>)
1000eebe:	4b4d      	ldr	r3, [pc, #308]	; (1000eff4 <platform_driver_init+0x218>)
1000eec0:	601a      	str	r2, [r3, #0]
		ke_free = (void(*)(void*))0x00019f09;
1000eec2:	4a4d      	ldr	r2, [pc, #308]	; (1000eff8 <platform_driver_init+0x21c>)
1000eec4:	4b4d      	ldr	r3, [pc, #308]	; (1000effc <platform_driver_init+0x220>)
1000eec6:	601a      	str	r2, [r3, #0]
#endif
		memset(rx_buffer,0,sizeof(rx_buffer));
1000eec8:	22a0      	movs	r2, #160	; 0xa0
1000eeca:	0092      	lsls	r2, r2, #2
1000eecc:	2100      	movs	r1, #0
1000eece:	484c      	ldr	r0, [pc, #304]	; (1000f000 <platform_driver_init+0x224>)
1000eed0:	4b4c      	ldr	r3, [pc, #304]	; (1000f004 <platform_driver_init+0x228>)
1000eed2:	4798      	blx	r3
		plf_event_buff_index = PLF_EVENT_BUFFER_START_INDEX;
1000eed4:	2280      	movs	r2, #128	; 0x80
1000eed6:	0092      	lsls	r2, r2, #2
1000eed8:	4b4b      	ldr	r3, [pc, #300]	; (1000f008 <platform_driver_init+0x22c>)
1000eeda:	801a      	strh	r2, [r3, #0]
		platform_event_init();
1000eedc:	4b4b      	ldr	r3, [pc, #300]	; (1000f00c <platform_driver_init+0x230>)
1000eede:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000eee0:	4653      	mov	r3, sl
1000eee2:	6023      	str	r3, [r4, #0]
1000eee4:	464b      	mov	r3, r9
1000eee6:	6023      	str	r3, [r4, #0]
		
#ifndef CHIPVERSION_B0		
		// spi_flash clock fix.
		spi_flash_clock_init();
#endif
		samb11_app_resume_cb = NULL;
1000eee8:	4b49      	ldr	r3, [pc, #292]	; (1000f010 <platform_driver_init+0x234>)
1000eeea:	4642      	mov	r2, r8
1000eeec:	601a      	str	r2, [r3, #0]
		*apps_resume_cb = (uint32_t)((resume_callback)samb11_plf_resume_callback);
1000eeee:	683b      	ldr	r3, [r7, #0]
1000eef0:	4a48      	ldr	r2, [pc, #288]	; (1000f014 <platform_driver_init+0x238>)
1000eef2:	601a      	str	r2, [r3, #0]
		*wakeup_source_active_cb = (uint32_t)((wakeup_source_active_callback)wakeup_active_event_callback);
1000eef4:	6833      	ldr	r3, [r6, #0]
1000eef6:	4a48      	ldr	r2, [pc, #288]	; (1000f018 <platform_driver_init+0x23c>)
1000eef8:	601a      	str	r2, [r3, #0]
		wakeup_int_unregister_callback(0);
1000eefa:	2000      	movs	r0, #0
1000eefc:	4c47      	ldr	r4, [pc, #284]	; (1000f01c <platform_driver_init+0x240>)
1000eefe:	47a0      	blx	r4
		wakeup_int_unregister_callback(1);
1000ef00:	2001      	movs	r0, #1
1000ef02:	47a0      	blx	r4
		wakeup_int_unregister_callback(2);
1000ef04:	2002      	movs	r0, #2
1000ef06:	47a0      	blx	r4
		platform_initialized = 1;
1000ef08:	2201      	movs	r2, #1
1000ef0a:	4b06      	ldr	r3, [pc, #24]	; (1000ef24 <platform_driver_init+0x148>)
1000ef0c:	701a      	strb	r2, [r3, #0]
		status = STATUS_SUCCESS;
1000ef0e:	2000      	movs	r0, #0
1000ef10:	e003      	b.n	1000ef1a <platform_driver_init+0x13e>
	}
	else {
		platform_initialized = 1;
1000ef12:	2201      	movs	r2, #1
1000ef14:	4b03      	ldr	r3, [pc, #12]	; (1000ef24 <platform_driver_init+0x148>)
1000ef16:	701a      	strb	r2, [r3, #0]
		status = STATUS_ALREADY_INITIALIZED;
1000ef18:	2001      	movs	r0, #1
	}
	return status;
}
1000ef1a:	bc1c      	pop	{r2, r3, r4}
1000ef1c:	4690      	mov	r8, r2
1000ef1e:	4699      	mov	r9, r3
1000ef20:	46a2      	mov	sl, r4
1000ef22:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000ef24:	10019c00 	.word	0x10019c00
1000ef28:	1000ed69 	.word	0x1000ed69
1000ef2c:	1000edad 	.word	0x1000edad
1000ef30:	10019c20 	.word	0x10019c20
1000ef34:	e000e100 	.word	0xe000e100
1000ef38:	1001ab28 	.word	0x1001ab28
1000ef3c:	000007d7 	.word	0x000007d7
1000ef40:	000007bd 	.word	0x000007bd
1000ef44:	1001a864 	.word	0x1001a864
1000ef48:	0001bc51 	.word	0x0001bc51
1000ef4c:	1001ab2c 	.word	0x1001ab2c
1000ef50:	100400bc 	.word	0x100400bc
1000ef54:	10019bf4 	.word	0x10019bf4
1000ef58:	100400b8 	.word	0x100400b8
1000ef5c:	10019bf0 	.word	0x10019bf0
1000ef60:	0001b99f 	.word	0x0001b99f
1000ef64:	1001a860 	.word	0x1001a860
1000ef68:	0001b9db 	.word	0x0001b9db
1000ef6c:	1001a86c 	.word	0x1001a86c
1000ef70:	1001ab3c 	.word	0x1001ab3c
1000ef74:	1004003c 	.word	0x1004003c
1000ef78:	10041fc0 	.word	0x10041fc0
1000ef7c:	1001a870 	.word	0x1001a870
1000ef80:	10041fc4 	.word	0x10041fc4
1000ef84:	1001ab38 	.word	0x1001ab38
1000ef88:	1001ab30 	.word	0x1001ab30
1000ef8c:	10041fd4 	.word	0x10041fd4
1000ef90:	10041fd8 	.word	0x10041fd8
1000ef94:	1001a868 	.word	0x1001a868
1000ef98:	0001cbe9 	.word	0x0001cbe9
1000ef9c:	10019c14 	.word	0x10019c14
1000efa0:	0001cd8f 	.word	0x0001cd8f
1000efa4:	10019c04 	.word	0x10019c04
1000efa8:	0001cea3 	.word	0x0001cea3
1000efac:	10019c28 	.word	0x10019c28
1000efb0:	0001cbcf 	.word	0x0001cbcf
1000efb4:	10019bfc 	.word	0x10019bfc
1000efb8:	1000f465 	.word	0x1000f465
1000efbc:	1000f3f9 	.word	0x1000f3f9
1000efc0:	100400e4 	.word	0x100400e4
1000efc4:	10019c1c 	.word	0x10019c1c
1000efc8:	00019fe9 	.word	0x00019fe9
1000efcc:	10019c2c 	.word	0x10019c2c
1000efd0:	0001dbdd 	.word	0x0001dbdd
1000efd4:	10019bf8 	.word	0x10019bf8
1000efd8:	0001dc5b 	.word	0x0001dc5b
1000efdc:	10019c0c 	.word	0x10019c0c
1000efe0:	100405ec 	.word	0x100405ec
1000efe4:	10019c08 	.word	0x10019c08
1000efe8:	0001d5e3 	.word	0x0001d5e3
1000efec:	10019c18 	.word	0x10019c18
1000eff0:	10040c20 	.word	0x10040c20
1000eff4:	10019c30 	.word	0x10019c30
1000eff8:	00019f09 	.word	0x00019f09
1000effc:	10019bec 	.word	0x10019bec
1000f000:	1001a8a8 	.word	0x1001a8a8
1000f004:	10014e69 	.word	0x10014e69
1000f008:	1001ab40 	.word	0x1001ab40
1000f00c:	1000ec95 	.word	0x1000ec95
1000f010:	1001ab34 	.word	0x1001ab34
1000f014:	1000ed3d 	.word	0x1000ed3d
1000f018:	1000f4c1 	.word	0x1000f4c1
1000f01c:	1000f4a9 	.word	0x1000f4a9

1000f020 <platform_register_ble_msg_handler>:


plf_drv_status platform_register_ble_msg_handler(platform_interface_callback fp)
{
	plf_drv_status status;
	if(platform_initialized == 1) {
1000f020:	4b04      	ldr	r3, [pc, #16]	; (1000f034 <platform_register_ble_msg_handler+0x14>)
1000f022:	781a      	ldrb	r2, [r3, #0]
		ble_stack_message_handler = fp;
		status = STATUS_SUCCESS;
	}
	else {
		status = STATUS_NOT_INITIALIZED;
1000f024:	2305      	movs	r3, #5


plf_drv_status platform_register_ble_msg_handler(platform_interface_callback fp)
{
	plf_drv_status status;
	if(platform_initialized == 1) {
1000f026:	2a01      	cmp	r2, #1
1000f028:	d102      	bne.n	1000f030 <platform_register_ble_msg_handler+0x10>
		ble_stack_message_handler = fp;
1000f02a:	4b03      	ldr	r3, [pc, #12]	; (1000f038 <platform_register_ble_msg_handler+0x18>)
1000f02c:	6018      	str	r0, [r3, #0]
		status = STATUS_SUCCESS;
1000f02e:	2300      	movs	r3, #0
	}
	else {
		status = STATUS_NOT_INITIALIZED;
	}
	return status;
}
1000f030:	0018      	movs	r0, r3
1000f032:	4770      	bx	lr
1000f034:	10019c00 	.word	0x10019c00
1000f038:	10019c20 	.word	0x10019c20

1000f03c <platform_interface_send>:


//Sends a message through RW kernel messaging API
//struct ke_msg * p_msg;
void platform_interface_send(uint8_t* data, uint32_t len)
{
1000f03c:	b570      	push	{r4, r5, r6, lr}
1000f03e:	0004      	movs	r4, r0
	void* params;
	
	#if (CHIPVERSION_B0)
	ke_task_id_t dest_id;
	dest_id = p_msg_hdr->dest_id;
	if(gapm_get_task_from_id != NULL)
1000f040:	4b0e      	ldr	r3, [pc, #56]	; (1000f07c <platform_interface_send+0x40>)
1000f042:	681b      	ldr	r3, [r3, #0]
1000f044:	2b00      	cmp	r3, #0
1000f046:	d002      	beq.n	1000f04e <platform_interface_send+0x12>
		p_msg_hdr->dest_id = gapm_get_task_from_id(dest_id);
1000f048:	8840      	ldrh	r0, [r0, #2]
1000f04a:	4798      	blx	r3
1000f04c:	8060      	strh	r0, [r4, #2]
	#endif	//CHIPVERSION_B0
	// Allocate the kernel message
	params = ke_msg_alloc(p_msg_hdr->id, p_msg_hdr->dest_id, p_msg_hdr->src_id, p_msg_hdr->param_len);
1000f04e:	88e3      	ldrh	r3, [r4, #6]
1000f050:	88a2      	ldrh	r2, [r4, #4]
1000f052:	8861      	ldrh	r1, [r4, #2]
1000f054:	8820      	ldrh	r0, [r4, #0]
1000f056:	4d0a      	ldr	r5, [pc, #40]	; (1000f080 <platform_interface_send+0x44>)
1000f058:	682d      	ldr	r5, [r5, #0]
1000f05a:	47a8      	blx	r5
1000f05c:	0005      	movs	r5, r0
											
	//no params
	if (p_msg_hdr->param_len == 0)
1000f05e:	88e2      	ldrh	r2, [r4, #6]
1000f060:	2a00      	cmp	r2, #0
1000f062:	d102      	bne.n	1000f06a <platform_interface_send+0x2e>
	{
		// Send message directly
		at_ke_msg_send(params);
1000f064:	4b07      	ldr	r3, [pc, #28]	; (1000f084 <platform_interface_send+0x48>)
1000f066:	4798      	blx	r3
1000f068:	e006      	b.n	1000f078 <platform_interface_send+0x3c>
	}
	else
	{
		//copy params
		memcpy(params,&(data[KE_MSG_HDR_LENGTH]),p_msg_hdr->param_len);
1000f06a:	0021      	movs	r1, r4
1000f06c:	3108      	adds	r1, #8
1000f06e:	4b06      	ldr	r3, [pc, #24]	; (1000f088 <platform_interface_send+0x4c>)
1000f070:	4798      	blx	r3
		// Send the kernel message
		at_ke_msg_send(params);
1000f072:	0028      	movs	r0, r5
1000f074:	4b03      	ldr	r3, [pc, #12]	; (1000f084 <platform_interface_send+0x48>)
1000f076:	4798      	blx	r3
	}
}
1000f078:	bd70      	pop	{r4, r5, r6, pc}
1000f07a:	46c0      	nop			; (mov r8, r8)
1000f07c:	10019bf4 	.word	0x10019bf4
1000f080:	10019c2c 	.word	0x10019c2c
1000f084:	1000ecc5 	.word	0x1000ecc5
1000f088:	10014e57 	.word	0x10014e57

1000f08c <send_plf_int_msg_ind>:

void send_plf_int_msg_ind(uint8_t intr_index, uint8_t callback_id, void *data, uint16_t data_len)
{
1000f08c:	b570      	push	{r4, r5, r6, lr}
1000f08e:	0015      	movs	r5, r2
1000f090:	001c      	movs	r4, r3
	void* params;
//#if (CHIPVERSION_A4)	
	//os_sem_up(gstrFwSem);
//#endif
	// Allocate the kernel message
	params = ke_msg_alloc(PERIPHERAL_INTERRUPT_EVENT, TASK_INTERNAL_APP, BUILD_INTR_SRCID(callback_id,intr_index), data_len);
1000f092:	020a      	lsls	r2, r1, #8
1000f094:	4302      	orrs	r2, r0
1000f096:	4b0a      	ldr	r3, [pc, #40]	; (1000f0c0 <send_plf_int_msg_ind+0x34>)
1000f098:	681e      	ldr	r6, [r3, #0]
1000f09a:	0023      	movs	r3, r4
1000f09c:	2105      	movs	r1, #5
1000f09e:	20a0      	movs	r0, #160	; 0xa0
1000f0a0:	00c0      	lsls	r0, r0, #3
1000f0a2:	47b0      	blx	r6
1000f0a4:	1e06      	subs	r6, r0, #0
											
	//no params
	if(params != NULL) {
1000f0a6:	d00a      	beq.n	1000f0be <send_plf_int_msg_ind+0x32>
		if((data_len != 0) && (NULL != data))
1000f0a8:	2c00      	cmp	r4, #0
1000f0aa:	d005      	beq.n	1000f0b8 <send_plf_int_msg_ind+0x2c>
1000f0ac:	2d00      	cmp	r5, #0
1000f0ae:	d003      	beq.n	1000f0b8 <send_plf_int_msg_ind+0x2c>
		{
			//copy params
			memcpy(params, data, data_len);
1000f0b0:	0022      	movs	r2, r4
1000f0b2:	0029      	movs	r1, r5
1000f0b4:	4b03      	ldr	r3, [pc, #12]	; (1000f0c4 <send_plf_int_msg_ind+0x38>)
1000f0b6:	4798      	blx	r3
		}
		// Send the kernel message
		at_ke_msg_send(params);
1000f0b8:	0030      	movs	r0, r6
1000f0ba:	4b03      	ldr	r3, [pc, #12]	; (1000f0c8 <send_plf_int_msg_ind+0x3c>)
1000f0bc:	4798      	blx	r3
	}
}
1000f0be:	bd70      	pop	{r4, r5, r6, pc}
1000f0c0:	10019c2c 	.word	0x10019c2c
1000f0c4:	10014e57 	.word	0x10014e57
1000f0c8:	1000ecc5 	.word	0x1000ecc5

1000f0cc <platform_event_wait>:
//Waits on InternalAppMsgQHandle Queue
// This function won't busy wait if nothing on queue but will down the semaphore and go to a blocking state
// The OS then will move control to other higher priority tasks and will only return if these tasks finish processing AND the queue has received 
//a msg
plf_drv_status platform_event_wait(uint32_t timeout)
{
1000f0cc:	b5f0      	push	{r4, r5, r6, r7, lr}
1000f0ce:	465f      	mov	r7, fp
1000f0d0:	4656      	mov	r6, sl
1000f0d2:	464d      	mov	r5, r9
1000f0d4:	4644      	mov	r4, r8
1000f0d6:	b4f0      	push	{r4, r5, r6, r7}
1000f0d8:	b087      	sub	sp, #28
	static struct ke_msg* rcv_msg;
	static struct ke_msghdr	*ke_msg_hdr;
	plf_drv_status status = STATUS_SUCCESS;
	uint8_t bEventTimeoutFlag = 0;
	uint8_t bLoopAgain = 0;
	if(((uint32_t)-1 != timeout) && ((uint32_t)0 < timeout))
1000f0da:	1e44      	subs	r4, r0, #1
plf_drv_status platform_event_wait(uint32_t timeout)
{
	static struct ke_msg* rcv_msg;
	static struct ke_msghdr	*ke_msg_hdr;
	plf_drv_status status = STATUS_SUCCESS;
	uint8_t bEventTimeoutFlag = 0;
1000f0dc:	2300      	movs	r3, #0
1000f0de:	4699      	mov	r9, r3
	uint8_t bLoopAgain = 0;
	if(((uint32_t)-1 != timeout) && ((uint32_t)0 < timeout))
1000f0e0:	1ce3      	adds	r3, r4, #3
1000f0e2:	d81c      	bhi.n	1000f11e <platform_event_wait+0x52>
	return num_of_freed;
}

static void platform_start_event_timeout(uint32_t timeout)
{
	uint8_t msg[8+5] = {0};
1000f0e4:	220d      	movs	r2, #13
1000f0e6:	2100      	movs	r1, #0
1000f0e8:	a802      	add	r0, sp, #8
1000f0ea:	4b82      	ldr	r3, [pc, #520]	; (1000f2f4 <platform_event_wait+0x228>)
1000f0ec:	4798      	blx	r3
	uint8_t u16TxLen = 0;

	msg[u16TxLen++] = ((DBG_KE_TIMER_REQ) & 0x00FF );
1000f0ee:	2333      	movs	r3, #51	; 0x33
1000f0f0:	aa02      	add	r2, sp, #8
1000f0f2:	7013      	strb	r3, [r2, #0]
	msg[u16TxLen++] = (((DBG_KE_TIMER_REQ)>>8) & 0x00FF );
1000f0f4:	3b30      	subs	r3, #48	; 0x30
1000f0f6:	7053      	strb	r3, [r2, #1]
	msg[u16TxLen++] = ((TASK_DBG) & 0x00FF );
1000f0f8:	7093      	strb	r3, [r2, #2]
	msg[u16TxLen++] = (((TASK_DBG)>>8) & 0x00FF );	
	msg[u16TxLen++] = ((TASK_INTERNAL_APP) & 0x00FF );
1000f0fa:	3302      	adds	r3, #2
1000f0fc:	7113      	strb	r3, [r2, #4]
	msg[u16TxLen++] = (((TASK_INTERNAL_APP)>>8) & 0x00FF );
	msg[u16TxLen++] = ((5) & 0x00FF );
1000f0fe:	7193      	strb	r3, [r2, #6]
	msg[u16TxLen++] = (((5)>>8) & 0x00FF );
	
	msg[u16TxLen++] = (uint8_t)((timeout) & 0x00FF );
1000f100:	7214      	strb	r4, [r2, #8]
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 8) & 0x00FF) ;
1000f102:	0a23      	lsrs	r3, r4, #8
1000f104:	7253      	strb	r3, [r2, #9]
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 16) & 0x00FF);
1000f106:	0c23      	lsrs	r3, r4, #16
1000f108:	7293      	strb	r3, [r2, #10]
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 24) & 0x00FF);
1000f10a:	0e24      	lsrs	r4, r4, #24
1000f10c:	72d4      	strb	r4, [r2, #11]
	
	msg[u16TxLen++] = ((1) & 0x00FF );
1000f10e:	2301      	movs	r3, #1
1000f110:	7313      	strb	r3, [r2, #12]
	
	platform_interface_send(msg, u16TxLen);
1000f112:	210d      	movs	r1, #13
1000f114:	0010      	movs	r0, r2
1000f116:	4b78      	ldr	r3, [pc, #480]	; (1000f2f8 <platform_event_wait+0x22c>)
1000f118:	4798      	blx	r3
	uint8_t bEventTimeoutFlag = 0;
	uint8_t bLoopAgain = 0;
	if(((uint32_t)-1 != timeout) && ((uint32_t)0 < timeout))
	{			
		platform_start_event_timeout(timeout-1);
		bEventTimeoutFlag = 1;
1000f11a:	2301      	movs	r3, #1
1000f11c:	4699      	mov	r9, r3
1000f11e:	2400      	movs	r4, #0
1000f120:	2500      	movs	r5, #0
	}

	do {
		if(NMI_MsgQueueRecv(InternalAppMsgQHandle, (void**)&rcv_msg) == STATUS_SUCCESS)
1000f122:	4f76      	ldr	r7, [pc, #472]	; (1000f2fc <platform_event_wait+0x230>)
1000f124:	4e76      	ldr	r6, [pc, #472]	; (1000f300 <platform_event_wait+0x234>)
1000f126:	4977      	ldr	r1, [pc, #476]	; (1000f304 <platform_event_wait+0x238>)
1000f128:	6838      	ldr	r0, [r7, #0]
1000f12a:	6833      	ldr	r3, [r6, #0]
1000f12c:	4798      	blx	r3
1000f12e:	2800      	cmp	r0, #0
1000f130:	d000      	beq.n	1000f134 <platform_event_wait+0x68>
1000f132:	e088      	b.n	1000f246 <platform_event_wait+0x17a>
		{
			uint16_t msg_id = rcv_msg->id;
1000f134:	4b73      	ldr	r3, [pc, #460]	; (1000f304 <platform_event_wait+0x238>)
1000f136:	681c      	ldr	r4, [r3, #0]
1000f138:	88a3      	ldrh	r3, [r4, #4]
1000f13a:	469a      	mov	sl, r3
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
			
			if((rcv_msg->id != DBG_KE_TIMER_RESP) && (bEventTimeoutFlag))
1000f13c:	23cd      	movs	r3, #205	; 0xcd
1000f13e:	009b      	lsls	r3, r3, #2
1000f140:	459a      	cmp	sl, r3
1000f142:	d100      	bne.n	1000f146 <platform_event_wait+0x7a>
1000f144:	e0c7      	b.n	1000f2d6 <platform_event_wait+0x20a>

	do {
		if(NMI_MsgQueueRecv(InternalAppMsgQHandle, (void**)&rcv_msg) == STATUS_SUCCESS)
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
1000f146:	8923      	ldrh	r3, [r4, #8]
1000f148:	469b      	mov	fp, r3
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
1000f14a:	8963      	ldrh	r3, [r4, #10]
1000f14c:	4698      	mov	r8, r3
			bLoopAgain = 0;
			
			if((rcv_msg->id != DBG_KE_TIMER_RESP) && (bEventTimeoutFlag))
1000f14e:	464b      	mov	r3, r9
1000f150:	2b00      	cmp	r3, #0
1000f152:	d011      	beq.n	1000f178 <platform_event_wait+0xac>
	platform_interface_send(msg, u16TxLen);
}

static void platform_stop_event_timeout(void)
{
	uint8_t msg[8+5] = {0};
1000f154:	220d      	movs	r2, #13
1000f156:	2100      	movs	r1, #0
1000f158:	a802      	add	r0, sp, #8
1000f15a:	4b66      	ldr	r3, [pc, #408]	; (1000f2f4 <platform_event_wait+0x228>)
1000f15c:	4798      	blx	r3
	uint8_t u16TxLen = 0;

	msg[u16TxLen++] = ((DBG_KE_TIMER_REQ) & 0x00FF );
1000f15e:	2333      	movs	r3, #51	; 0x33
1000f160:	aa02      	add	r2, sp, #8
1000f162:	7013      	strb	r3, [r2, #0]
	msg[u16TxLen++] = (((DBG_KE_TIMER_REQ)>>8) & 0x00FF );
1000f164:	3b30      	subs	r3, #48	; 0x30
1000f166:	7053      	strb	r3, [r2, #1]
	msg[u16TxLen++] = ((TASK_DBG) & 0x00FF );
1000f168:	7093      	strb	r3, [r2, #2]
	msg[u16TxLen++] = (((TASK_DBG)>>8) & 0x00FF );	
	msg[u16TxLen++] = ((TASK_INTERNAL_APP) & 0x00FF );
1000f16a:	3302      	adds	r3, #2
1000f16c:	7113      	strb	r3, [r2, #4]
	msg[u16TxLen++] = (((TASK_INTERNAL_APP)>>8) & 0x00FF );
	msg[u16TxLen++] = ((5) & 0x00FF );
1000f16e:	7193      	strb	r3, [r2, #6]
	msg[u16TxLen++] = (uint8_t)(( (0) >> 16) & 0x00FF);
	msg[u16TxLen++] = (uint8_t)(( (0) >> 24) & 0x00FF);
	
	msg[u16TxLen++] = ((0) & 0x00FF );
	
	platform_interface_send(msg, u16TxLen);
1000f170:	210d      	movs	r1, #13
1000f172:	0010      	movs	r0, r2
1000f174:	4b60      	ldr	r3, [pc, #384]	; (1000f2f8 <platform_event_wait+0x22c>)
1000f176:	4798      	blx	r3
			{
				//Stop timer if it is still running
				platform_stop_event_timeout();
			}
				
			if(msg_id == PERIPHERAL_INTERRUPT_EVENT)
1000f178:	23a0      	movs	r3, #160	; 0xa0
1000f17a:	00db      	lsls	r3, r3, #3
1000f17c:	459a      	cmp	sl, r3
1000f17e:	d121      	bne.n	1000f1c4 <platform_event_wait+0xf8>
			{
				if(plf_event_buff_index+len > MAX_EVT_BUFF_LEN)
1000f180:	4b61      	ldr	r3, [pc, #388]	; (1000f308 <platform_event_wait+0x23c>)
1000f182:	881b      	ldrh	r3, [r3, #0]
1000f184:	4443      	add	r3, r8
1000f186:	22a0      	movs	r2, #160	; 0xa0
1000f188:	0092      	lsls	r2, r2, #2
1000f18a:	4293      	cmp	r3, r2
1000f18c:	dd02      	ble.n	1000f194 <platform_event_wait+0xc8>
					plf_event_buff_index = PLF_EVENT_BUFFER_START_INDEX;
1000f18e:	3a80      	subs	r2, #128	; 0x80
1000f190:	4b5d      	ldr	r3, [pc, #372]	; (1000f308 <platform_event_wait+0x23c>)
1000f192:	801a      	strh	r2, [r3, #0]
				memcpy(&rx_buffer[plf_event_buff_index],data,len);
1000f194:	4b5c      	ldr	r3, [pc, #368]	; (1000f308 <platform_event_wait+0x23c>)
1000f196:	469a      	mov	sl, r3
1000f198:	881d      	ldrh	r5, [r3, #0]
1000f19a:	4b5c      	ldr	r3, [pc, #368]	; (1000f30c <platform_event_wait+0x240>)
1000f19c:	18ed      	adds	r5, r5, r3
1000f19e:	0021      	movs	r1, r4
1000f1a0:	310c      	adds	r1, #12
1000f1a2:	4642      	mov	r2, r8
1000f1a4:	0028      	movs	r0, r5
1000f1a6:	4b5a      	ldr	r3, [pc, #360]	; (1000f310 <platform_event_wait+0x244>)
1000f1a8:	4798      	blx	r3
				platform_event_post(src_id,&rx_buffer[plf_event_buff_index],len);
1000f1aa:	4642      	mov	r2, r8
1000f1ac:	0029      	movs	r1, r5
1000f1ae:	4658      	mov	r0, fp
1000f1b0:	4b58      	ldr	r3, [pc, #352]	; (1000f314 <platform_event_wait+0x248>)
1000f1b2:	4798      	blx	r3
				plf_event_buff_index += len;
1000f1b4:	4653      	mov	r3, sl
1000f1b6:	881b      	ldrh	r3, [r3, #0]
1000f1b8:	4443      	add	r3, r8
1000f1ba:	4652      	mov	r2, sl
1000f1bc:	8013      	strh	r3, [r2, #0]
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000f1be:	2400      	movs	r4, #0
				if(plf_event_buff_index+len > MAX_EVT_BUFF_LEN)
					plf_event_buff_index = PLF_EVENT_BUFFER_START_INDEX;
				memcpy(&rx_buffer[plf_event_buff_index],data,len);
				platform_event_post(src_id,&rx_buffer[plf_event_buff_index],len);
				plf_event_buff_index += len;
				status = STATUS_RECEIVED_PLF_EVENT_MSG;
1000f1c0:	2502      	movs	r5, #2
1000f1c2:	e03a      	b.n	1000f23a <platform_event_wait+0x16e>
			}
			else
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
1000f1c4:	4b54      	ldr	r3, [pc, #336]	; (1000f318 <platform_event_wait+0x24c>)
1000f1c6:	681b      	ldr	r3, [r3, #0]
1000f1c8:	2b00      	cmp	r3, #0
1000f1ca:	d032      	beq.n	1000f232 <platform_event_wait+0x166>
					if(rcv_msg->id == DBG_KE_TIMER_RESP)
1000f1cc:	4b4d      	ldr	r3, [pc, #308]	; (1000f304 <platform_event_wait+0x238>)
1000f1ce:	681a      	ldr	r2, [r3, #0]
1000f1d0:	8893      	ldrh	r3, [r2, #4]
1000f1d2:	21cd      	movs	r1, #205	; 0xcd
1000f1d4:	0089      	lsls	r1, r1, #2
1000f1d6:	428b      	cmp	r3, r1
1000f1d8:	d104      	bne.n	1000f1e4 <platform_event_wait+0x118>
					{
						if(bEventTimeoutFlag)
1000f1da:	464b      	mov	r3, r9
						{
							status = STATUS_TIMEOUT;	
						}
						else
						{
							bLoopAgain = 1;
1000f1dc:	2401      	movs	r4, #1
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
					if(rcv_msg->id == DBG_KE_TIMER_RESP)
					{
						if(bEventTimeoutFlag)
1000f1de:	2b00      	cmp	r3, #0
1000f1e0:	d02b      	beq.n	1000f23a <platform_event_wait+0x16e>
1000f1e2:	e028      	b.n	1000f236 <platform_event_wait+0x16a>
							bLoopAgain = 1;
						}
					}
					else
					{
						ke_msg_hdr = (struct ke_msghdr *)((void *)(rx_buffer+BLE_EVENT_BUFFER_START_INDEX));
1000f1e4:	4c4d      	ldr	r4, [pc, #308]	; (1000f31c <platform_event_wait+0x250>)
1000f1e6:	4d49      	ldr	r5, [pc, #292]	; (1000f30c <platform_event_wait+0x240>)
1000f1e8:	6025      	str	r5, [r4, #0]
						ke_msg_hdr->id = rcv_msg->id;
1000f1ea:	702b      	strb	r3, [r5, #0]
1000f1ec:	0a1b      	lsrs	r3, r3, #8
1000f1ee:	706b      	strb	r3, [r5, #1]
//#if (CHIPVERSION_A3 || CHIPVERSION_A4)
					//ke_msg_hdr->src_id = rcv_msg->src_id;
//#else
					ke_msg_hdr->src_id = gapm_get_id_from_task(rcv_msg->src_id);
1000f1f0:	8910      	ldrh	r0, [r2, #8]
1000f1f2:	4b4b      	ldr	r3, [pc, #300]	; (1000f320 <platform_event_wait+0x254>)
1000f1f4:	681b      	ldr	r3, [r3, #0]
1000f1f6:	4798      	blx	r3
1000f1f8:	7128      	strb	r0, [r5, #4]
1000f1fa:	0a00      	lsrs	r0, r0, #8
1000f1fc:	7168      	strb	r0, [r5, #5]
//#endif  /* (CHIPVERSION_A3 || CHIPVERSION_A4) */
						ke_msg_hdr->dest_id = rcv_msg->dest_id;
1000f1fe:	6820      	ldr	r0, [r4, #0]
1000f200:	4b40      	ldr	r3, [pc, #256]	; (1000f304 <platform_event_wait+0x238>)
1000f202:	681a      	ldr	r2, [r3, #0]
1000f204:	88d2      	ldrh	r2, [r2, #6]
1000f206:	8042      	strh	r2, [r0, #2]
						ke_msg_hdr->param_len = rcv_msg->param_len;
1000f208:	681d      	ldr	r5, [r3, #0]
1000f20a:	896b      	ldrh	r3, [r5, #10]
1000f20c:	80c3      	strh	r3, [r0, #6]
						ke_msg_hdr++;
1000f20e:	3008      	adds	r0, #8
1000f210:	6020      	str	r0, [r4, #0]
						if(rcv_msg->param_len > 0) {
1000f212:	896a      	ldrh	r2, [r5, #10]
1000f214:	2a00      	cmp	r2, #0
1000f216:	d003      	beq.n	1000f220 <platform_event_wait+0x154>
							memcpy((void *)ke_msg_hdr,rcv_msg->param,rcv_msg->param_len);
1000f218:	0029      	movs	r1, r5
1000f21a:	310c      	adds	r1, #12
1000f21c:	4b3c      	ldr	r3, [pc, #240]	; (1000f310 <platform_event_wait+0x244>)
1000f21e:	4798      	blx	r3
						}
						ble_stack_message_handler(rx_buffer,(rcv_msg->param_len + sizeof(struct ke_msghdr)));
1000f220:	8969      	ldrh	r1, [r5, #10]
1000f222:	3108      	adds	r1, #8
1000f224:	4b3c      	ldr	r3, [pc, #240]	; (1000f318 <platform_event_wait+0x24c>)
1000f226:	681b      	ldr	r3, [r3, #0]
1000f228:	4838      	ldr	r0, [pc, #224]	; (1000f30c <platform_event_wait+0x240>)
1000f22a:	4798      	blx	r3
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000f22c:	2400      	movs	r4, #0
						ke_msg_hdr++;
						if(rcv_msg->param_len > 0) {
							memcpy((void *)ke_msg_hdr,rcv_msg->param,rcv_msg->param_len);
						}
						ble_stack_message_handler(rx_buffer,(rcv_msg->param_len + sizeof(struct ke_msghdr)));
						status = STATUS_RECEIVED_BLE_MSG;
1000f22e:	2503      	movs	r5, #3
1000f230:	e003      	b.n	1000f23a <platform_event_wait+0x16e>
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000f232:	2400      	movs	r4, #0
1000f234:	e001      	b.n	1000f23a <platform_event_wait+0x16e>
1000f236:	2400      	movs	r4, #0
				if(ble_stack_message_handler) {
					if(rcv_msg->id == DBG_KE_TIMER_RESP)
					{
						if(bEventTimeoutFlag)
						{
							status = STATUS_TIMEOUT;	
1000f238:	25d0      	movs	r5, #208	; 0xd0
						ble_stack_message_handler(rx_buffer,(rcv_msg->param_len + sizeof(struct ke_msghdr)));
						status = STATUS_RECEIVED_BLE_MSG;
					}
				}
			}
			ke_free(rcv_msg);
1000f23a:	4b32      	ldr	r3, [pc, #200]	; (1000f304 <platform_event_wait+0x238>)
1000f23c:	6818      	ldr	r0, [r3, #0]
1000f23e:	4b39      	ldr	r3, [pc, #228]	; (1000f324 <platform_event_wait+0x258>)
1000f240:	681b      	ldr	r3, [r3, #0]
1000f242:	4798      	blx	r3
1000f244:	e000      	b.n	1000f248 <platform_event_wait+0x17c>
		}
		else
		{
			status = STATUS_FAILURE;
1000f246:	2507      	movs	r5, #7
		}
	}while(bLoopAgain);
1000f248:	2c00      	cmp	r4, #0
1000f24a:	d000      	beq.n	1000f24e <platform_event_wait+0x182>
1000f24c:	e76b      	b.n	1000f126 <platform_event_wait+0x5a>
	
	if(bEventTimeoutFlag)
1000f24e:	464b      	mov	r3, r9
1000f250:	2b00      	cmp	r3, #0
1000f252:	d046      	beq.n	1000f2e2 <platform_event_wait+0x216>
	{
		//CleanUp if there is any remaining DBG_KE_TIMER_RESP message in queue
		NMI_MsgQueueDestroyOnKeID(InternalAppMsgQHandle, DBG_KE_TIMER_RESP);
1000f254:	4b29      	ldr	r3, [pc, #164]	; (1000f2fc <platform_event_wait+0x230>)
1000f256:	681e      	ldr	r6, [r3, #0]
#endif 
static int NMI_MsgQueueDestroyOnKeID(NMI_MsgQueueHandle* pHandle, ke_msg_id_t u16KeMsgId)
{
	int num_of_freed=0;
	Message * current , *prev = NULL;
	if((NULL == pHandle) && (NULL == pHandle->pstrMessageList))
1000f258:	2e00      	cmp	r6, #0
1000f25a:	d104      	bne.n	1000f266 <platform_event_wait+0x19a>
1000f25c:	2300      	movs	r3, #0
1000f25e:	6a1c      	ldr	r4, [r3, #32]
1000f260:	2c00      	cmp	r4, #0
1000f262:	d131      	bne.n	1000f2c8 <platform_event_wait+0x1fc>
1000f264:	e03d      	b.n	1000f2e2 <platform_event_wait+0x216>
	{
		return num_of_freed;
	}

	current = pHandle->pstrMessageList;
1000f266:	6a34      	ldr	r4, [r6, #32]
	os_sem_down(&pHandle->strCriticalSection);
1000f268:	2314      	movs	r3, #20
1000f26a:	469c      	mov	ip, r3
1000f26c:	44b4      	add	ip, r6
1000f26e:	4663      	mov	r3, ip
1000f270:	4660      	mov	r0, ip
1000f272:	9300      	str	r3, [sp, #0]
1000f274:	4b2c      	ldr	r3, [pc, #176]	; (1000f328 <platform_event_wait+0x25c>)
1000f276:	681b      	ldr	r3, [r3, #0]
1000f278:	4798      	blx	r3
	while(NULL != current)
1000f27a:	2c00      	cmp	r4, #0
1000f27c:	d01f      	beq.n	1000f2be <platform_event_wait+0x1f2>
			}
			ke_free(rcv_msg);
		}
		else
		{
			status = STATUS_FAILURE;
1000f27e:	2700      	movs	r7, #0

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
	while(NULL != current)
	{
		if(u16KeMsgId == ((struct ke_msg*)current->pvBuffer)->id)
1000f280:	23cd      	movs	r3, #205	; 0xcd
1000f282:	009b      	lsls	r3, r3, #2
1000f284:	4698      	mov	r8, r3
		{
			num_of_freed++;
			if(NULL != prev)
			{
				prev->pstrNext = current->pstrNext;
				ke_free(current);
1000f286:	4b27      	ldr	r3, [pc, #156]	; (1000f324 <platform_event_wait+0x258>)
1000f288:	469a      	mov	sl, r3
1000f28a:	0020      	movs	r0, r4

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
	while(NULL != current)
	{
		if(u16KeMsgId == ((struct ke_msg*)current->pvBuffer)->id)
1000f28c:	6803      	ldr	r3, [r0, #0]
1000f28e:	889b      	ldrh	r3, [r3, #4]
1000f290:	4543      	cmp	r3, r8
1000f292:	d110      	bne.n	1000f2b6 <platform_event_wait+0x1ea>
		{
			num_of_freed++;
			if(NULL != prev)
1000f294:	2f00      	cmp	r7, #0
1000f296:	d006      	beq.n	1000f2a6 <platform_event_wait+0x1da>
			{
				prev->pstrNext = current->pstrNext;
1000f298:	6883      	ldr	r3, [r0, #8]
1000f29a:	60bb      	str	r3, [r7, #8]
				ke_free(current);
1000f29c:	4653      	mov	r3, sl
1000f29e:	681b      	ldr	r3, [r3, #0]
1000f2a0:	4798      	blx	r3
				current = prev->pstrNext;
1000f2a2:	68b8      	ldr	r0, [r7, #8]
1000f2a4:	e009      	b.n	1000f2ba <platform_event_wait+0x1ee>
			}
			else
			{
				pHandle->pstrMessageList = current->pstrNext;
1000f2a6:	6883      	ldr	r3, [r0, #8]
1000f2a8:	6233      	str	r3, [r6, #32]
				ke_free(current);
1000f2aa:	4b1e      	ldr	r3, [pc, #120]	; (1000f324 <platform_event_wait+0x258>)
1000f2ac:	681b      	ldr	r3, [r3, #0]
1000f2ae:	9301      	str	r3, [sp, #4]
1000f2b0:	4798      	blx	r3
				current = pHandle->pstrMessageList;
1000f2b2:	6a30      	ldr	r0, [r6, #32]
1000f2b4:	e001      	b.n	1000f2ba <platform_event_wait+0x1ee>
			}
		}
		else
		{
			prev = current;
			current = current ->pstrNext;
1000f2b6:	0007      	movs	r7, r0
1000f2b8:	6880      	ldr	r0, [r0, #8]
		return num_of_freed;
	}

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
	while(NULL != current)
1000f2ba:	2800      	cmp	r0, #0
1000f2bc:	d1e6      	bne.n	1000f28c <platform_event_wait+0x1c0>
		{
			prev = current;
			current = current ->pstrNext;
		}
	}
	os_sem_up(&pHandle->strCriticalSection);
1000f2be:	4b1b      	ldr	r3, [pc, #108]	; (1000f32c <platform_event_wait+0x260>)
1000f2c0:	681b      	ldr	r3, [r3, #0]
1000f2c2:	9800      	ldr	r0, [sp, #0]
1000f2c4:	4798      	blx	r3
	if(bEventTimeoutFlag)
	{
		//CleanUp if there is any remaining DBG_KE_TIMER_RESP message in queue
		NMI_MsgQueueDestroyOnKeID(InternalAppMsgQHandle, DBG_KE_TIMER_RESP);
	}
	return status;
1000f2c6:	e00c      	b.n	1000f2e2 <platform_event_wait+0x216>
	{
		return num_of_freed;
	}

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
1000f2c8:	2314      	movs	r3, #20
1000f2ca:	9300      	str	r3, [sp, #0]
1000f2cc:	4b16      	ldr	r3, [pc, #88]	; (1000f328 <platform_event_wait+0x25c>)
1000f2ce:	681b      	ldr	r3, [r3, #0]
1000f2d0:	2014      	movs	r0, #20
1000f2d2:	4798      	blx	r3
1000f2d4:	e7d3      	b.n	1000f27e <platform_event_wait+0x1b2>
				status = STATUS_RECEIVED_PLF_EVENT_MSG;
			}
			else
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
1000f2d6:	4b10      	ldr	r3, [pc, #64]	; (1000f318 <platform_event_wait+0x24c>)
1000f2d8:	681b      	ldr	r3, [r3, #0]
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000f2da:	2400      	movs	r4, #0
				status = STATUS_RECEIVED_PLF_EVENT_MSG;
			}
			else
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
1000f2dc:	2b00      	cmp	r3, #0
1000f2de:	d0ac      	beq.n	1000f23a <platform_event_wait+0x16e>
1000f2e0:	e77b      	b.n	1000f1da <platform_event_wait+0x10e>
	{
		//CleanUp if there is any remaining DBG_KE_TIMER_RESP message in queue
		NMI_MsgQueueDestroyOnKeID(InternalAppMsgQHandle, DBG_KE_TIMER_RESP);
	}
	return status;
}
1000f2e2:	0028      	movs	r0, r5
1000f2e4:	b007      	add	sp, #28
1000f2e6:	bc3c      	pop	{r2, r3, r4, r5}
1000f2e8:	4690      	mov	r8, r2
1000f2ea:	4699      	mov	r9, r3
1000f2ec:	46a2      	mov	sl, r4
1000f2ee:	46ab      	mov	fp, r5
1000f2f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000f2f2:	46c0      	nop			; (mov r8, r8)
1000f2f4:	10014e69 	.word	0x10014e69
1000f2f8:	1000f03d 	.word	0x1000f03d
1000f2fc:	10019c30 	.word	0x10019c30
1000f300:	10019c18 	.word	0x10019c18
1000f304:	10019c24 	.word	0x10019c24
1000f308:	1001ab40 	.word	0x1001ab40
1000f30c:	1001a8a8 	.word	0x1001a8a8
1000f310:	10014e57 	.word	0x10014e57
1000f314:	1000ec5d 	.word	0x1000ec5d
1000f318:	10019c20 	.word	0x10019c20
1000f31c:	10019c10 	.word	0x10019c10
1000f320:	10019bf0 	.word	0x10019bf0
1000f324:	10019bec 	.word	0x10019bec
1000f328:	10019c0c 	.word	0x10019c0c
1000f32c:	10019bf8 	.word	0x10019bf8

1000f330 <acquire_sleep_lock>:

plf_drv_status acquire_sleep_lock()
{
1000f330:	b510      	push	{r4, lr}
    //DBG_LOG_DEV("[acquire_sleep_lock]\tDisabling ULP");
	plf_drv_status status = STATUS_RESOURCE_BUSY;
	//uint8_t osc_en = REG_PL_RD(0x4000B1EC)&0x01;
	
	rwip_prevent_sleep_set(APP_PREVENT_SLEEP);
1000f332:	4b03      	ldr	r3, [pc, #12]	; (1000f340 <acquire_sleep_lock+0x10>)
1000f334:	681b      	ldr	r3, [r3, #0]
1000f336:	2080      	movs	r0, #128	; 0x80
1000f338:	0200      	lsls	r0, r0, #8
1000f33a:	4798      	blx	r3
		/*  */
		os_sem_up(gstrFwSem);
	}
#endif	//0
	return status;
}
1000f33c:	2008      	movs	r0, #8
1000f33e:	bd10      	pop	{r4, pc}
1000f340:	1001a860 	.word	0x1001a860

1000f344 <release_message_lock>:

plf_drv_status release_message_lock()
{
1000f344:	b510      	push	{r4, lr}
	plf_drv_status status = STATUS_SUCCESS;
	rwip_prevent_sleep_clear(MSG_PREVENT_SLEEP);
1000f346:	4b03      	ldr	r3, [pc, #12]	; (1000f354 <release_message_lock+0x10>)
1000f348:	681b      	ldr	r3, [r3, #0]
1000f34a:	2080      	movs	r0, #128	; 0x80
1000f34c:	01c0      	lsls	r0, r0, #7
1000f34e:	4798      	blx	r3
	return status;
}
1000f350:	2000      	movs	r0, #0
1000f352:	bd10      	pop	{r4, pc}
1000f354:	1001a86c 	.word	0x1001a86c

1000f358 <release_sleep_lock>:

plf_drv_status release_sleep_lock()
{
1000f358:	b510      	push	{r4, lr}
    //DBG_LOG_DEV("[release_sleep_lock]\tEnabling ULP");
	plf_drv_status status = STATUS_SUCCESS;
	rwip_prevent_sleep_clear(MSG_PREVENT_SLEEP);
1000f35a:	4c05      	ldr	r4, [pc, #20]	; (1000f370 <release_sleep_lock+0x18>)
1000f35c:	2080      	movs	r0, #128	; 0x80
1000f35e:	01c0      	lsls	r0, r0, #7
1000f360:	6823      	ldr	r3, [r4, #0]
1000f362:	4798      	blx	r3
	rwip_prevent_sleep_clear(APP_PREVENT_SLEEP);
1000f364:	6823      	ldr	r3, [r4, #0]
1000f366:	2080      	movs	r0, #128	; 0x80
1000f368:	0200      	lsls	r0, r0, #8
1000f36a:	4798      	blx	r3
	return status;
}
1000f36c:	2000      	movs	r0, #0
1000f36e:	bd10      	pop	{r4, pc}
1000f370:	1001a86c 	.word	0x1001a86c

1000f374 <register_resume_callback>:
}

plf_drv_status register_resume_callback(resume_callback cb)
{
	plf_drv_status status = STATUS_SUCCESS;
	if(cb == NULL)
1000f374:	2800      	cmp	r0, #0
1000f376:	d003      	beq.n	1000f380 <register_resume_callback+0xc>
	{
		status = STATUS_INVALID_ARGUMENT;
	}
	else 
	{
		samb11_app_resume_cb = cb;
1000f378:	4b02      	ldr	r3, [pc, #8]	; (1000f384 <register_resume_callback+0x10>)
1000f37a:	6018      	str	r0, [r3, #0]
	}
}

plf_drv_status register_resume_callback(resume_callback cb)
{
	plf_drv_status status = STATUS_SUCCESS;
1000f37c:	2000      	movs	r0, #0
1000f37e:	e000      	b.n	1000f382 <register_resume_callback+0xe>
	if(cb == NULL)
	{
		status = STATUS_INVALID_ARGUMENT;
1000f380:	2009      	movs	r0, #9
	{
		samb11_app_resume_cb = cb;
		//*apps_resume_cb = (uint32_t)cb;
	}
	return status;
}
1000f382:	4770      	bx	lr
1000f384:	1001ab34 	.word	0x1001ab34

1000f388 <gpio1_combined_isr_handler>:

enum port_status_code wakeup_int_unregister_callback(enum port_wakeup_source wakeup_source);
void wakeup_active_event_callback(uint32_t wakeup_source);

void gpio1_combined_isr_handler(void)
{
1000f388:	b530      	push	{r4, r5, lr}
	uint8_t index = 0;
	/* portint_callback_t callback; */
	uint8_t port_gpio1 = LPGPIO_16;
	uint32_t intstatus = GPIO1->INTSTATUSCLEAR.reg; /* jeffy */
1000f38a:	4a18      	ldr	r2, [pc, #96]	; (1000f3ec <gpio1_combined_isr_handler+0x64>)
1000f38c:	8f13      	ldrh	r3, [r2, #56]	; 0x38
1000f38e:	b29b      	uxth	r3, r3
	GPIO1->INTTYPESET.reg |= (1 << 15); /* jeffy */
1000f390:	8d10      	ldrh	r0, [r2, #40]	; 0x28
1000f392:	2180      	movs	r1, #128	; 0x80
1000f394:	0209      	lsls	r1, r1, #8
1000f396:	4301      	orrs	r1, r0
1000f398:	8511      	strh	r1, [r2, #40]	; 0x28
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO1->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO1->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000f39a:	0010      	movs	r0, r2
1000f39c:	4d14      	ldr	r5, [pc, #80]	; (1000f3f0 <gpio1_combined_isr_handler+0x68>)
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO1->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000f39e:	2401      	movs	r4, #1
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000f3a0:	2200      	movs	r2, #0
	uint32_t intstatus = GPIO1->INTSTATUSCLEAR.reg; /* jeffy */
	GPIO1->INTTYPESET.reg |= (1 << 15); /* jeffy */

	do {
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000f3a2:	05db      	lsls	r3, r3, #23
1000f3a4:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
1000f3a6:	d011      	beq.n	1000f3cc <gpio1_combined_isr_handler+0x44>
			port_gpio1 = (intstatus & ~(intstatus - 1));
1000f3a8:	b2db      	uxtb	r3, r3
1000f3aa:	4259      	negs	r1, r3
1000f3ac:	400b      	ands	r3, r1
			while (!(port_gpio1 == 1)) {
1000f3ae:	2b01      	cmp	r3, #1
1000f3b0:	d006      	beq.n	1000f3c0 <gpio1_combined_isr_handler+0x38>
1000f3b2:	0011      	movs	r1, r2
				port_gpio1 = port_gpio1 >> 1;
1000f3b4:	085b      	lsrs	r3, r3, #1
				index++;
1000f3b6:	3101      	adds	r1, #1
1000f3b8:	b2c9      	uxtb	r1, r1
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
			port_gpio1 = (intstatus & ~(intstatus - 1));
			while (!(port_gpio1 == 1)) {
1000f3ba:	2b01      	cmp	r3, #1
1000f3bc:	d1fa      	bne.n	1000f3b4 <gpio1_combined_isr_handler+0x2c>
1000f3be:	e000      	b.n	1000f3c2 <gpio1_combined_isr_handler+0x3a>
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000f3c0:	0011      	movs	r1, r2
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO1->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000f3c2:	0023      	movs	r3, r4
1000f3c4:	408b      	lsls	r3, r1
1000f3c6:	b29b      	uxth	r3, r3
1000f3c8:	8703      	strh	r3, [r0, #56]	; 0x38
1000f3ca:	e003      	b.n	1000f3d4 <gpio1_combined_isr_handler+0x4c>
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO1->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000f3cc:	8f03      	ldrh	r3, [r0, #56]	; 0x38
1000f3ce:	432b      	orrs	r3, r5
1000f3d0:	b29b      	uxth	r3, r3
1000f3d2:	8703      	strh	r3, [r0, #56]	; 0x38
			/* REG_GPIO1_INTSTATUSCLEAR = REG_GPIO1_INTENSET; */
		}

		intstatus = GPIO1->INTSTATUSCLEAR.reg;
1000f3d4:	8f03      	ldrh	r3, [r0, #56]	; 0x38
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000f3d6:	05db      	lsls	r3, r3, #23
1000f3d8:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
	} while (intstatus != 0);
1000f3da:	d1e2      	bne.n	1000f3a2 <gpio1_combined_isr_handler+0x1a>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
1000f3dc:	2180      	movs	r1, #128	; 0x80
1000f3de:	0049      	lsls	r1, r1, #1
1000f3e0:	3381      	adds	r3, #129	; 0x81
1000f3e2:	33ff      	adds	r3, #255	; 0xff
1000f3e4:	4a03      	ldr	r2, [pc, #12]	; (1000f3f4 <gpio1_combined_isr_handler+0x6c>)
1000f3e6:	50d1      	str	r1, [r2, r3]

	NVIC_ClearPendingIRQ(8);
}
1000f3e8:	bd30      	pop	{r4, r5, pc}
1000f3ea:	46c0      	nop			; (mov r8, r8)
1000f3ec:	40011000 	.word	0x40011000
1000f3f0:	ffff8000 	.word	0xffff8000
1000f3f4:	e000e100 	.word	0xe000e100

1000f3f8 <gpio0_combined_isr_handler>:

void gpio0_combined_isr_handler(void)
{
1000f3f8:	b530      	push	{r4, r5, lr}
	uint8_t index = 0;
	/* portint_callback_t callback; */
	uint8_t port_gpio0 = LPGPIO_0;
	uint32_t intstatus = GPIO0->INTSTATUSCLEAR.reg; /* jeffy */
1000f3fa:	4a17      	ldr	r2, [pc, #92]	; (1000f458 <gpio0_combined_isr_handler+0x60>)
1000f3fc:	8f13      	ldrh	r3, [r2, #56]	; 0x38
1000f3fe:	b29b      	uxth	r3, r3
	GPIO0->INTTYPESET.reg |= (1 << 15); /* jeffy */
1000f400:	8d10      	ldrh	r0, [r2, #40]	; 0x28
1000f402:	2180      	movs	r1, #128	; 0x80
1000f404:	0209      	lsls	r1, r1, #8
1000f406:	4301      	orrs	r1, r0
1000f408:	8511      	strh	r1, [r2, #40]	; 0x28
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO0->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO0->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000f40a:	0010      	movs	r0, r2
1000f40c:	4d13      	ldr	r5, [pc, #76]	; (1000f45c <gpio0_combined_isr_handler+0x64>)
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO0->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000f40e:	2401      	movs	r4, #1
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000f410:	2200      	movs	r2, #0
	uint32_t intstatus = GPIO0->INTSTATUSCLEAR.reg; /* jeffy */
	GPIO0->INTTYPESET.reg |= (1 << 15); /* jeffy */

	do {
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000f412:	05db      	lsls	r3, r3, #23
1000f414:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
1000f416:	d011      	beq.n	1000f43c <gpio0_combined_isr_handler+0x44>
			port_gpio0 = (intstatus & ~(intstatus - 1));
1000f418:	b2db      	uxtb	r3, r3
1000f41a:	4259      	negs	r1, r3
1000f41c:	400b      	ands	r3, r1
			while (!(port_gpio0 == 1)) {
1000f41e:	2b01      	cmp	r3, #1
1000f420:	d006      	beq.n	1000f430 <gpio0_combined_isr_handler+0x38>
1000f422:	0011      	movs	r1, r2
				port_gpio0 = port_gpio0 >> 1;
1000f424:	085b      	lsrs	r3, r3, #1
				index++;
1000f426:	3101      	adds	r1, #1
1000f428:	b2c9      	uxtb	r1, r1
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
			port_gpio0 = (intstatus & ~(intstatus - 1));
			while (!(port_gpio0 == 1)) {
1000f42a:	2b01      	cmp	r3, #1
1000f42c:	d1fa      	bne.n	1000f424 <gpio0_combined_isr_handler+0x2c>
1000f42e:	e000      	b.n	1000f432 <gpio0_combined_isr_handler+0x3a>
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000f430:	0011      	movs	r1, r2
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO0->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000f432:	0023      	movs	r3, r4
1000f434:	408b      	lsls	r3, r1
1000f436:	b29b      	uxth	r3, r3
1000f438:	8703      	strh	r3, [r0, #56]	; 0x38
1000f43a:	e003      	b.n	1000f444 <gpio0_combined_isr_handler+0x4c>
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO0->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000f43c:	8f03      	ldrh	r3, [r0, #56]	; 0x38
1000f43e:	432b      	orrs	r3, r5
1000f440:	b29b      	uxth	r3, r3
1000f442:	8703      	strh	r3, [r0, #56]	; 0x38
			/* REG_GPIO1_INTSTATUSCLEAR = REG_GPIO1_INTENSET; */
		}

		intstatus = GPIO0->INTSTATUSCLEAR.reg;
1000f444:	8f03      	ldrh	r3, [r0, #56]	; 0x38
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000f446:	05db      	lsls	r3, r3, #23
1000f448:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
	} while (intstatus != 0);
1000f44a:	d1e2      	bne.n	1000f412 <gpio0_combined_isr_handler+0x1a>
1000f44c:	2180      	movs	r1, #128	; 0x80
1000f44e:	3381      	adds	r3, #129	; 0x81
1000f450:	33ff      	adds	r3, #255	; 0xff
1000f452:	4a03      	ldr	r2, [pc, #12]	; (1000f460 <gpio0_combined_isr_handler+0x68>)
1000f454:	50d1      	str	r1, [r2, r3]

	NVIC_ClearPendingIRQ(7);
}
1000f456:	bd30      	pop	{r4, r5, pc}
1000f458:	40010000 	.word	0x40010000
1000f45c:	ffff8000 	.word	0xffff8000
1000f460:	e000e100 	.word	0xe000e100

1000f464 <PORT1_COMB_Handler>:

#ifdef CHIPVERSION_B0
void PORT1_COMB_Handler(void)
{
1000f464:	b510      	push	{r4, lr}
	/* if(CMSDK_GPIO1->INTSTATUS & ((1<<15) | (1<<14) | (1<<13))) { */
	if (GPIO1->INTSTATUSCLEAR.reg & ((1 << 15) | (1 << 14) | (1 << 13))) {
1000f466:	4b0c      	ldr	r3, [pc, #48]	; (1000f498 <PORT1_COMB_Handler+0x34>)
1000f468:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
1000f46a:	0b5b      	lsrs	r3, r3, #13
1000f46c:	d010      	beq.n	1000f490 <PORT1_COMB_Handler+0x2c>
		handle_ext_wakeup_isr();
1000f46e:	4b0b      	ldr	r3, [pc, #44]	; (1000f49c <PORT1_COMB_Handler+0x38>)
1000f470:	681b      	ldr	r3, [r3, #0]
1000f472:	4798      	blx	r3

		/* clear specific int pin status that caused the Interrupt */
		/* CMSDK_GPIO1->INTCLEAR |= CMSDK_GPIO1->INTSTATUS & ((1<<15) | (1<<14) | (1<<13)); */
		GPIO1->INTSTATUSCLEAR.reg |= GPIO1->INTSTATUSCLEAR.reg & ((1 << 15) | (1 << 14) | (1 << 13));
1000f474:	4a08      	ldr	r2, [pc, #32]	; (1000f498 <PORT1_COMB_Handler+0x34>)
1000f476:	8f13      	ldrh	r3, [r2, #56]	; 0x38
1000f478:	8f11      	ldrh	r1, [r2, #56]	; 0x38
1000f47a:	0b5b      	lsrs	r3, r3, #13
1000f47c:	035b      	lsls	r3, r3, #13
1000f47e:	430b      	orrs	r3, r1
1000f480:	8713      	strh	r3, [r2, #56]	; 0x38
1000f482:	2180      	movs	r1, #128	; 0x80
1000f484:	0049      	lsls	r1, r1, #1
1000f486:	23c0      	movs	r3, #192	; 0xc0
1000f488:	005b      	lsls	r3, r3, #1
1000f48a:	4a05      	ldr	r2, [pc, #20]	; (1000f4a0 <PORT1_COMB_Handler+0x3c>)
1000f48c:	50d1      	str	r1, [r2, r3]
1000f48e:	e001      	b.n	1000f494 <PORT1_COMB_Handler+0x30>
		/* NVIC_ClearPendingIRQ(PORT1_COMB_IRQn); */
		NVIC_ClearPendingIRQ(8);
	} else {
		gpio1_combined_isr_handler();
1000f490:	4b04      	ldr	r3, [pc, #16]	; (1000f4a4 <PORT1_COMB_Handler+0x40>)
1000f492:	4798      	blx	r3
	}
}
1000f494:	bd10      	pop	{r4, pc}
1000f496:	46c0      	nop			; (mov r8, r8)
1000f498:	40011000 	.word	0x40011000
1000f49c:	1001ab2c 	.word	0x1001ab2c
1000f4a0:	e000e100 	.word	0xe000e100
1000f4a4:	1000f389 	.word	0x1000f389

1000f4a8 <wakeup_int_unregister_callback>:
	{
		wakeup_source_callback[wakeup_source] = 0;
	}
	else 
	{
		status = PORT_STATUS_ERR_INVALID_ARG;
1000f4a8:	2303      	movs	r3, #3
#endif  /* CHIPVERSION_B0 */

enum port_status_code wakeup_int_unregister_callback(enum port_wakeup_source wakeup_source)
{
	enum port_status_code status = PORT_STATUS_OK;
	if(	(wakeup_source == PORT_WAKEUP_SOURCE_AON_GPIO_0) || 
1000f4aa:	2802      	cmp	r0, #2
1000f4ac:	d804      	bhi.n	1000f4b8 <wakeup_int_unregister_callback+0x10>
		(wakeup_source == PORT_WAKEUP_SOURCE_AON_GPIO_1) || 
		(wakeup_source == PORT_WAKEUP_SOURCE_AON_GPIO_2) ) 
	{
		wakeup_source_callback[wakeup_source] = 0;
1000f4ae:	0080      	lsls	r0, r0, #2
1000f4b0:	2200      	movs	r2, #0
1000f4b2:	4b02      	ldr	r3, [pc, #8]	; (1000f4bc <wakeup_int_unregister_callback+0x14>)
1000f4b4:	50c2      	str	r2, [r0, r3]

#endif  /* CHIPVERSION_B0 */

enum port_status_code wakeup_int_unregister_callback(enum port_wakeup_source wakeup_source)
{
	enum port_status_code status = PORT_STATUS_OK;
1000f4b6:	2300      	movs	r3, #0
	else 
	{
		status = PORT_STATUS_ERR_INVALID_ARG;
	}
	return status;
}
1000f4b8:	0018      	movs	r0, r3
1000f4ba:	4770      	bx	lr
1000f4bc:	1001ab44 	.word	0x1001ab44

1000f4c0 <wakeup_active_event_callback>:

void wakeup_active_event_callback(uint32_t wakeup_source)
{
1000f4c0:	b510      	push	{r4, lr}
1000f4c2:	0004      	movs	r4, r0
	portint_callback_t callback;
	uint32_t *pu32WakeSource = (uint32_t *)wakeup_source;
	if((*pu32WakeSource & 0xFF) == 1)
1000f4c4:	7803      	ldrb	r3, [r0, #0]
1000f4c6:	2b01      	cmp	r3, #1
1000f4c8:	d108      	bne.n	1000f4dc <wakeup_active_event_callback+0x1c>
	{
		if(wakeup_source_callback[0] != NULL) {
1000f4ca:	4b11      	ldr	r3, [pc, #68]	; (1000f510 <wakeup_active_event_callback+0x50>)
1000f4cc:	681b      	ldr	r3, [r3, #0]
1000f4ce:	2b00      	cmp	r3, #0
1000f4d0:	d000      	beq.n	1000f4d4 <wakeup_active_event_callback+0x14>
			callback = wakeup_source_callback[0];
			callback();
1000f4d2:	4798      	blx	r3
		}
		*pu32WakeSource &= ~(0xFF);
1000f4d4:	23ff      	movs	r3, #255	; 0xff
1000f4d6:	6822      	ldr	r2, [r4, #0]
1000f4d8:	439a      	bics	r2, r3
1000f4da:	6022      	str	r2, [r4, #0]
	}
	if(((*pu32WakeSource >> 8) & 0xFF) == 1)
1000f4dc:	7863      	ldrb	r3, [r4, #1]
1000f4de:	2b01      	cmp	r3, #1
1000f4e0:	d108      	bne.n	1000f4f4 <wakeup_active_event_callback+0x34>
	{
		if(wakeup_source_callback[1] != NULL) {
1000f4e2:	4b0b      	ldr	r3, [pc, #44]	; (1000f510 <wakeup_active_event_callback+0x50>)
1000f4e4:	685b      	ldr	r3, [r3, #4]
1000f4e6:	2b00      	cmp	r3, #0
1000f4e8:	d000      	beq.n	1000f4ec <wakeup_active_event_callback+0x2c>
			callback = wakeup_source_callback[1];
			callback();
1000f4ea:	4798      	blx	r3
		}
		*pu32WakeSource &= ~(0xFF << 8);
1000f4ec:	4b09      	ldr	r3, [pc, #36]	; (1000f514 <wakeup_active_event_callback+0x54>)
1000f4ee:	6822      	ldr	r2, [r4, #0]
1000f4f0:	4013      	ands	r3, r2
1000f4f2:	6023      	str	r3, [r4, #0]
	}
	if(((*pu32WakeSource >> 16) & 0xFF) == 1)
1000f4f4:	78a3      	ldrb	r3, [r4, #2]
1000f4f6:	2b01      	cmp	r3, #1
1000f4f8:	d108      	bne.n	1000f50c <wakeup_active_event_callback+0x4c>
	{
		if(wakeup_source_callback[2] != NULL) {
1000f4fa:	4b05      	ldr	r3, [pc, #20]	; (1000f510 <wakeup_active_event_callback+0x50>)
1000f4fc:	689b      	ldr	r3, [r3, #8]
1000f4fe:	2b00      	cmp	r3, #0
1000f500:	d000      	beq.n	1000f504 <wakeup_active_event_callback+0x44>
			callback = wakeup_source_callback[2];
			callback();
1000f502:	4798      	blx	r3
		}
		*pu32WakeSource &= ~(0xFF << 16);
1000f504:	4b04      	ldr	r3, [pc, #16]	; (1000f518 <wakeup_active_event_callback+0x58>)
1000f506:	6822      	ldr	r2, [r4, #0]
1000f508:	4013      	ands	r3, r2
1000f50a:	6023      	str	r3, [r4, #0]
	}
}
1000f50c:	bd10      	pop	{r4, pc}
1000f50e:	46c0      	nop			; (mov r8, r8)
1000f510:	1001ab44 	.word	0x1001ab44
1000f514:	ffff00ff 	.word	0xffff00ff
1000f518:	ff00ffff 	.word	0xff00ffff

1000f51c <sms_plf_event_cb>:
    //sms_monitor_configure_gpio();
}

static void sms_plf_event_cb(void)
{
    sms_current_interrupt.int_on = true;
1000f51c:	2201      	movs	r2, #1
1000f51e:	4b01      	ldr	r3, [pc, #4]	; (1000f524 <sms_plf_event_cb+0x8>)
1000f520:	705a      	strb	r2, [r3, #1]
}
1000f522:	4770      	bx	lr
1000f524:	10019e9c 	.word	0x10019e9c

1000f528 <resume_cb>:
    sms_ble_send_cnt = 0;
}


static void resume_cb(void)
{
1000f528:	b510      	push	{r4, lr}
    init_port_list(); // re-initialize all ports
1000f52a:	4b06      	ldr	r3, [pc, #24]	; (1000f544 <resume_cb+0x1c>)
1000f52c:	4798      	blx	r3
	platform_driver_init();
1000f52e:	4b06      	ldr	r3, [pc, #24]	; (1000f548 <resume_cb+0x20>)
1000f530:	4798      	blx	r3
	gpio_init(); // GPIO
1000f532:	4b06      	ldr	r3, [pc, #24]	; (1000f54c <resume_cb+0x24>)
1000f534:	4798      	blx	r3
    serial_console_init(); // GPIO (UART) for the console
1000f536:	4b06      	ldr	r3, [pc, #24]	; (1000f550 <resume_cb+0x28>)
1000f538:	4798      	blx	r3
    sms_dualtimer_init();
1000f53a:	4b06      	ldr	r3, [pc, #24]	; (1000f554 <resume_cb+0x2c>)
1000f53c:	4798      	blx	r3
    //delay_init();
    sms_button_configure_gpio(); // GPIO (AO_0 & AO_1) for the buttons
1000f53e:	4b06      	ldr	r3, [pc, #24]	; (1000f558 <resume_cb+0x30>)
1000f540:	4798      	blx	r3
    //sms_led_gpio_init();
    //sms_spi_master_configure();
    //sms_i2c_master_configure();
    //sms_mpu_configure_gpio();
    //sms_monitor_configure_gpio();
}
1000f542:	bd10      	pop	{r4, pc}
1000f544:	1000ed69 	.word	0x1000ed69
1000f548:	1000eddd 	.word	0x1000eddd
1000f54c:	1000c365 	.word	0x1000c365
1000f550:	1000ead1 	.word	0x1000ead1
1000f554:	1000b249 	.word	0x1000b249
1000f558:	1000a519 	.word	0x1000a519

1000f55c <sms_init_variables>:
 */
/*- Includes ---------------------------------------------------------------*/
#include "sms_peripheral1.h"

void sms_init_variables(void)
{
1000f55c:	b510      	push	{r4, lr}
    // states
    ble_current_state = BLE_STATE_POWEROFF;
1000f55e:	2300      	movs	r3, #0
1000f560:	4a10      	ldr	r2, [pc, #64]	; (1000f5a4 <sms_init_variables+0x48>)
1000f562:	7013      	strb	r3, [r2, #0]
    button_instance.current_state = BUTTON_STATE_NONE;
1000f564:	4a10      	ldr	r2, [pc, #64]	; (1000f5a8 <sms_init_variables+0x4c>)
1000f566:	7053      	strb	r3, [r2, #1]
    pressure_device.ms58_device.current_state = MS58_STATE_NONE;
1000f568:	4810      	ldr	r0, [pc, #64]	; (1000f5ac <sms_init_variables+0x50>)
1000f56a:	2225      	movs	r2, #37	; 0x25
1000f56c:	5483      	strb	r3, [r0, r2]
    timer1_current_mode = TIMER1_MODE_NONE;
1000f56e:	4a10      	ldr	r2, [pc, #64]	; (1000f5b0 <sms_init_variables+0x54>)
1000f570:	7013      	strb	r3, [r2, #0]
    timer2_current_mode = TIMER2_MODE_NONE;
1000f572:	4a10      	ldr	r2, [pc, #64]	; (1000f5b4 <sms_init_variables+0x58>)
1000f574:	7013      	strb	r3, [r2, #0]
    sms_working_mode = SMS_MODE_BUTTON_SOLO;
1000f576:	2101      	movs	r1, #1
1000f578:	4a0f      	ldr	r2, [pc, #60]	; (1000f5b8 <sms_init_variables+0x5c>)
1000f57a:	7011      	strb	r1, [r2, #0]
    
    // button
    btn0_instance.id = SMS_BTN_0;
1000f57c:	4a0f      	ldr	r2, [pc, #60]	; (1000f5bc <sms_init_variables+0x60>)
1000f57e:	7013      	strb	r3, [r2, #0]
    btn0_instance.gpio_pin = SMS_BTN_0_PIN;
1000f580:	241f      	movs	r4, #31
1000f582:	7054      	strb	r4, [r2, #1]
    btn0_instance.int_enabled = true;
1000f584:	7091      	strb	r1, [r2, #2]
    btn0_instance.char_value = 0;
1000f586:	70d3      	strb	r3, [r2, #3]
    
    pressure_device.state = PRESSURE_STATE_OFF;
1000f588:	2228      	movs	r2, #40	; 0x28
1000f58a:	5483      	strb	r3, [r0, r2]
    ulp_ready = false;
1000f58c:	4a0c      	ldr	r2, [pc, #48]	; (1000f5c0 <sms_init_variables+0x64>)
1000f58e:	7013      	strb	r3, [r2, #0]
    
    
    btn1_instance.id = SMS_BTN_1;
1000f590:	4a0c      	ldr	r2, [pc, #48]	; (1000f5c4 <sms_init_variables+0x68>)
1000f592:	7011      	strb	r1, [r2, #0]
    btn1_instance.gpio_pin = SMS_BTN_1_PIN;
1000f594:	201d      	movs	r0, #29
1000f596:	7050      	strb	r0, [r2, #1]
    btn1_instance.int_enabled = true;
1000f598:	7091      	strb	r1, [r2, #2]
    btn1_instance.char_value = 0;
1000f59a:	70d3      	strb	r3, [r2, #3]
    
    sms_ble_send_cnt = 0;
1000f59c:	4a0a      	ldr	r2, [pc, #40]	; (1000f5c8 <sms_init_variables+0x6c>)
1000f59e:	8013      	strh	r3, [r2, #0]
}
1000f5a0:	bd10      	pop	{r4, pc}
1000f5a2:	46c0      	nop			; (mov r8, r8)
1000f5a4:	10019eb4 	.word	0x10019eb4
1000f5a8:	10019da4 	.word	0x10019da4
1000f5ac:	10019e18 	.word	0x10019e18
1000f5b0:	10019d08 	.word	0x10019d08
1000f5b4:	10019eb5 	.word	0x10019eb5
1000f5b8:	10019d9c 	.word	0x10019d9c
1000f5bc:	10019d04 	.word	0x10019d04
1000f5c0:	10019d9d 	.word	0x10019d9d
1000f5c4:	10019da0 	.word	0x10019da0
1000f5c8:	10019ed0 	.word	0x10019ed0

1000f5cc <main>:
    sms_current_interrupt.int_on = true;
}


int main(void)
{
1000f5cc:	b5f0      	push	{r4, r5, r6, r7, lr}
1000f5ce:	b083      	sub	sp, #12
    int res;
    volatile uint32_t sleep_value;
    
    /* Define current BLE state
     * ------------------------ */
    ble_current_state = BLE_STATE_STARTING;
1000f5d0:	2210      	movs	r2, #16
1000f5d2:	4b98      	ldr	r3, [pc, #608]	; (1000f834 <main+0x268>)
1000f5d4:	701a      	strb	r2, [r3, #0]
    
    /* Initialize platform
     * ------------------- */
	platform_driver_init();
1000f5d6:	4b98      	ldr	r3, [pc, #608]	; (1000f838 <main+0x26c>)
1000f5d8:	4798      	blx	r3
	gpio_init(); // GPIO
1000f5da:	4b98      	ldr	r3, [pc, #608]	; (1000f83c <main+0x270>)
1000f5dc:	4798      	blx	r3
	serial_console_init(); // serial console for debugging
1000f5de:	4b98      	ldr	r3, [pc, #608]	; (1000f840 <main+0x274>)
1000f5e0:	4798      	blx	r3
    
    /* Initialize the BLE module
     * ------------------------- */
	ble_device_init(NULL); // initialize the BLE chip and set the device address 
1000f5e2:	2000      	movs	r0, #0
1000f5e4:	4b97      	ldr	r3, [pc, #604]	; (1000f844 <main+0x278>)
1000f5e6:	4798      	blx	r3

    /* Disable ULP
     * ----------- */
	acquire_sleep_lock();
1000f5e8:	4b97      	ldr	r3, [pc, #604]	; (1000f848 <main+0x27c>)
1000f5ea:	4798      	blx	r3
    

    /* Initialize SMS flags
     * -------------------- */
    sms_init_variables();
1000f5ec:	4b97      	ldr	r3, [pc, #604]	; (1000f84c <main+0x280>)
1000f5ee:	4798      	blx	r3
    
    
    /* Initialize hardware components
     * ------------------------------ */
    // Dualtimer
    sms_dualtimer_init();
1000f5f0:	4b97      	ldr	r3, [pc, #604]	; (1000f850 <main+0x284>)
1000f5f2:	4798      	blx	r3
	
    // Blocking delay (hacked from other SAM platforms)
    delay_init();
1000f5f4:	4b97      	ldr	r3, [pc, #604]	; (1000f854 <main+0x288>)
1000f5f6:	4798      	blx	r3

	// Buttons
    sms_button_configure_gpio();
1000f5f8:	4b97      	ldr	r3, [pc, #604]	; (1000f858 <main+0x28c>)
1000f5fa:	4798      	blx	r3
    
    // LED
    sms_led_gpio_init();
1000f5fc:	4b97      	ldr	r3, [pc, #604]	; (1000f85c <main+0x290>)
1000f5fe:	4798      	blx	r3
    
    // I2C
    sms_i2c_master_configure();
1000f600:	4b97      	ldr	r3, [pc, #604]	; (1000f860 <main+0x294>)
1000f602:	4798      	blx	r3
    
    // SPI
    sms_spi_master_configure();
1000f604:	4b97      	ldr	r3, [pc, #604]	; (1000f864 <main+0x298>)
1000f606:	4798      	blx	r3
    
    // MPU
    //sms_mpu_configure_gpio();
    
    // MS58
    pressure_device.ms58_device.current_state = MS58_STATE_NONE;
1000f608:	2100      	movs	r1, #0
1000f60a:	2325      	movs	r3, #37	; 0x25
1000f60c:	4a96      	ldr	r2, [pc, #600]	; (1000f868 <main+0x29c>)
1000f60e:	54d1      	strb	r1, [r2, r3]
    //ms58_device.reset_done = false;
    //ms58_device.init_ok = false;
    
    sms_monitor_configure_gpio();	
1000f610:	4b96      	ldr	r3, [pc, #600]	; (1000f86c <main+0x2a0>)
1000f612:	4798      	blx	r3
    
    /* Define BLE services
     * ------------------- */
    sms_button_define_services();
1000f614:	4b96      	ldr	r3, [pc, #600]	; (1000f870 <main+0x2a4>)
1000f616:	4798      	blx	r3
    sms_pressure_define_services();
1000f618:	4b96      	ldr	r3, [pc, #600]	; (1000f874 <main+0x2a8>)
1000f61a:	4798      	blx	r3
    sms_mpu_define_services();
1000f61c:	4b96      	ldr	r3, [pc, #600]	; (1000f878 <main+0x2ac>)
1000f61e:	4798      	blx	r3
    
    
    /* Register callbacks
     * ------------------ */
    // Recovering from ULP
    register_resume_callback(resume_cb); // register resume callback
1000f620:	4896      	ldr	r0, [pc, #600]	; (1000f87c <main+0x2b0>)
1000f622:	4b97      	ldr	r3, [pc, #604]	; (1000f880 <main+0x2b4>)
1000f624:	4798      	blx	r3
    // Dualtimer (AON timer enables on registration... so do it later)    
    //sms_dualtimer_register_callback(DUALTIMER_TIMER1, sms_dualtimer1_cb); // button pressing timer
    //sms_dualtimer_register_callback(DUALTIMER_TIMER2, sms_dualtimer2_cb); // LED blinking timer

    // Buttons
    sms_button_register_callbacks();
1000f626:	4b97      	ldr	r3, [pc, #604]	; (1000f884 <main+0x2b8>)
1000f628:	4798      	blx	r3
    
    // MPU
    //sms_mpu_register_callbacks();

    // BLE
    ble_mgr_events_callback_handler(REGISTER_CALL_BACK, BLE_GAP_EVENT_TYPE, sms_ble_gap_cb);
1000f62a:	4a97      	ldr	r2, [pc, #604]	; (1000f888 <main+0x2bc>)
1000f62c:	2100      	movs	r1, #0
1000f62e:	2000      	movs	r0, #0
1000f630:	4c96      	ldr	r4, [pc, #600]	; (1000f88c <main+0x2c0>)
1000f632:	47a0      	blx	r4
    ble_mgr_events_callback_handler(REGISTER_CALL_BACK, BLE_GATT_SERVER_EVENT_TYPE, sms_ble_gatt_server_cb);
1000f634:	4a96      	ldr	r2, [pc, #600]	; (1000f890 <main+0x2c4>)
1000f636:	2102      	movs	r1, #2
1000f638:	2000      	movs	r0, #0
1000f63a:	47a0      	blx	r4
    register_ble_user_event_cb(sms_plf_event_cb);
1000f63c:	4895      	ldr	r0, [pc, #596]	; (1000f894 <main+0x2c8>)
1000f63e:	4b96      	ldr	r3, [pc, #600]	; (1000f898 <main+0x2cc>)
1000f640:	4798      	blx	r3
    //register int n21 asm("sp");
    //register int n22 asm("lr");
    //register int n23 asm("r15");
    //DBG_LOG("at post-init: sp 0x%x, lr 0x%x", n21, n22);
    
    sms_dualtimer_start(TIMER_UNIT_MS, 10000, DUALTIMER_TIMER1);
1000f642:	2200      	movs	r2, #0
1000f644:	4995      	ldr	r1, [pc, #596]	; (1000f89c <main+0x2d0>)
1000f646:	2001      	movs	r0, #1
1000f648:	4b95      	ldr	r3, [pc, #596]	; (1000f8a0 <main+0x2d4>)
1000f64a:	4798      	blx	r3
    DBG_LOG("value: %u", dualtimer_get_value(DUALTIMER_TIMER1));
1000f64c:	4895      	ldr	r0, [pc, #596]	; (1000f8a4 <main+0x2d8>)
1000f64e:	4b96      	ldr	r3, [pc, #600]	; (1000f8a8 <main+0x2dc>)
1000f650:	4798      	blx	r3
1000f652:	2000      	movs	r0, #0
1000f654:	4b95      	ldr	r3, [pc, #596]	; (1000f8ac <main+0x2e0>)
1000f656:	4798      	blx	r3
1000f658:	0001      	movs	r1, r0
1000f65a:	4895      	ldr	r0, [pc, #596]	; (1000f8b0 <main+0x2e4>)
1000f65c:	4b95      	ldr	r3, [pc, #596]	; (1000f8b4 <main+0x2e8>)
1000f65e:	4798      	blx	r3
    sms_timer_aon_init((5*SMS_TIMER_AON_COUNT_100MS), AON_SLEEP_TIMER_RELOAD_MODE);
1000f660:	2100      	movs	r1, #0
1000f662:	4895      	ldr	r0, [pc, #596]	; (1000f8b8 <main+0x2ec>)
1000f664:	4b95      	ldr	r3, [pc, #596]	; (1000f8bc <main+0x2f0>)
1000f666:	4798      	blx	r3
    sms_timer_aon_register_callback();
1000f668:	4b95      	ldr	r3, [pc, #596]	; (1000f8c0 <main+0x2f4>)
1000f66a:	4798      	blx	r3
    ulp_ready = true;
1000f66c:	2201      	movs	r2, #1
1000f66e:	4b95      	ldr	r3, [pc, #596]	; (1000f8c4 <main+0x2f8>)
1000f670:	701a      	strb	r2, [r3, #0]

    
	while(true)
	{
		/* BLE Event task */
		ble_event_task(BLE_EVENT_TIMEOUT);
1000f672:	4e95      	ldr	r6, [pc, #596]	; (1000f8c8 <main+0x2fc>)
		
        DBG_LOG("value: %u", dualtimer_get_value(DUALTIMER_TIMER1));
1000f674:	4d8c      	ldr	r5, [pc, #560]	; (1000f8a8 <main+0x2dc>)

    
	while(true)
	{
		/* BLE Event task */
		ble_event_task(BLE_EVENT_TIMEOUT);
1000f676:	2001      	movs	r0, #1
1000f678:	4240      	negs	r0, r0
1000f67a:	47b0      	blx	r6
		
        DBG_LOG("value: %u", dualtimer_get_value(DUALTIMER_TIMER1));
1000f67c:	4889      	ldr	r0, [pc, #548]	; (1000f8a4 <main+0x2d8>)
1000f67e:	47a8      	blx	r5
1000f680:	2000      	movs	r0, #0
1000f682:	4b8a      	ldr	r3, [pc, #552]	; (1000f8ac <main+0x2e0>)
1000f684:	4798      	blx	r3
1000f686:	0001      	movs	r1, r0
1000f688:	4889      	ldr	r0, [pc, #548]	; (1000f8b0 <main+0x2e4>)
1000f68a:	4b8a      	ldr	r3, [pc, #552]	; (1000f8b4 <main+0x2e8>)
1000f68c:	4798      	blx	r3
        
		/* Write application task */
        if(sms_current_interrupt.int_on)
1000f68e:	4b8f      	ldr	r3, [pc, #572]	; (1000f8cc <main+0x300>)
1000f690:	785b      	ldrb	r3, [r3, #1]
1000f692:	2b00      	cmp	r3, #0
1000f694:	d100      	bne.n	1000f698 <main+0xcc>
1000f696:	e0aa      	b.n	1000f7ee <main+0x222>
        {
            if(ulp_active) {
1000f698:	4b8d      	ldr	r3, [pc, #564]	; (1000f8d0 <main+0x304>)
1000f69a:	781b      	ldrb	r3, [r3, #0]
1000f69c:	2b00      	cmp	r3, #0
1000f69e:	d014      	beq.n	1000f6ca <main+0xfe>
                DBG_LOG_DEV("[main]\t\t\t\tWaking up...");
1000f6a0:	4880      	ldr	r0, [pc, #512]	; (1000f8a4 <main+0x2d8>)
1000f6a2:	4b81      	ldr	r3, [pc, #516]	; (1000f8a8 <main+0x2dc>)
1000f6a4:	4798      	blx	r3
1000f6a6:	488b      	ldr	r0, [pc, #556]	; (1000f8d4 <main+0x308>)
1000f6a8:	4f82      	ldr	r7, [pc, #520]	; (1000f8b4 <main+0x2e8>)
1000f6aa:	47b8      	blx	r7
                acquire_sleep_lock();
1000f6ac:	4b66      	ldr	r3, [pc, #408]	; (1000f848 <main+0x27c>)
1000f6ae:	4798      	blx	r3
                dualtimer_set_counter(DUALTIMER_TIMER1, DUALTIMER_SET_CURRUNT_REG, sleep_value);
1000f6b0:	9a01      	ldr	r2, [sp, #4]
1000f6b2:	2100      	movs	r1, #0
1000f6b4:	2000      	movs	r0, #0
1000f6b6:	4b88      	ldr	r3, [pc, #544]	; (1000f8d8 <main+0x30c>)
1000f6b8:	4798      	blx	r3
                dualtimer_enable(DUALTIMER_TIMER1);
1000f6ba:	2000      	movs	r0, #0
1000f6bc:	4b87      	ldr	r3, [pc, #540]	; (1000f8dc <main+0x310>)
1000f6be:	4798      	blx	r3
                ulp_active = false;
1000f6c0:	2200      	movs	r2, #0
1000f6c2:	4b83      	ldr	r3, [pc, #524]	; (1000f8d0 <main+0x304>)
1000f6c4:	701a      	strb	r2, [r3, #0]
                DBG_LOG_CONT_DEV(" done!");
1000f6c6:	4886      	ldr	r0, [pc, #536]	; (1000f8e0 <main+0x314>)
1000f6c8:	47b8      	blx	r7
            //sms_button_toggle_interrupt(SMS_BTN_INT_DISABLE, SMS_BTN_INT_DISABLE);
            //DBG_LOG_CONT_DEV(" done!");
            //psp = __get_PSP();
            //msp = __get_MSP();
            //printf("\r\n\@ main: psp 0x%lx, msp 0x%lx", psp, msp);
            switch(sms_current_interrupt.source)
1000f6ca:	4b80      	ldr	r3, [pc, #512]	; (1000f8cc <main+0x300>)
1000f6cc:	781b      	ldrb	r3, [r3, #0]
1000f6ce:	b2db      	uxtb	r3, r3
1000f6d0:	2b06      	cmp	r3, #6
1000f6d2:	d900      	bls.n	1000f6d6 <main+0x10a>
1000f6d4:	e081      	b.n	1000f7da <main+0x20e>
1000f6d6:	009b      	lsls	r3, r3, #2
1000f6d8:	4a82      	ldr	r2, [pc, #520]	; (1000f8e4 <main+0x318>)
1000f6da:	58d3      	ldr	r3, [r2, r3]
1000f6dc:	469f      	mov	pc, r3
            {
                case INT_NONE:
                //sms_monitor_states("NONE");
                DBG_LOG_DEV("...NO SOURCE!!");
1000f6de:	4871      	ldr	r0, [pc, #452]	; (1000f8a4 <main+0x2d8>)
1000f6e0:	4b71      	ldr	r3, [pc, #452]	; (1000f8a8 <main+0x2dc>)
1000f6e2:	4798      	blx	r3
1000f6e4:	4880      	ldr	r0, [pc, #512]	; (1000f8e8 <main+0x31c>)
1000f6e6:	4b73      	ldr	r3, [pc, #460]	; (1000f8b4 <main+0x2e8>)
1000f6e8:	4798      	blx	r3
                //if(ulp_ready) {
                    //DBG_LOG_DEV("[main]\t\t\tULP...");
                    //release_sleep_lock();
                //}
                //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
                break;
1000f6ea:	e07c      	b.n	1000f7e6 <main+0x21a>
                
                case INT_BTN0:
                //sms_monitor_states("INT_BTN0");
                DBG_LOG_DEV("...BTN0");
1000f6ec:	486d      	ldr	r0, [pc, #436]	; (1000f8a4 <main+0x2d8>)
1000f6ee:	4b6e      	ldr	r3, [pc, #440]	; (1000f8a8 <main+0x2dc>)
1000f6f0:	4798      	blx	r3
1000f6f2:	487e      	ldr	r0, [pc, #504]	; (1000f8ec <main+0x320>)
1000f6f4:	4b6f      	ldr	r3, [pc, #444]	; (1000f8b4 <main+0x2e8>)
1000f6f6:	4798      	blx	r3
                if((sms_working_mode == SMS_MODE_BUTTON_MPU) || (sms_working_mode == SMS_MODE_COMPLETE) || (sms_working_mode == SMS_MODE_BUTTON_SOLO) || (sms_working_mode == SMS_MODE_BUTTON_PRESSURE)) {
1000f6f8:	4b7d      	ldr	r3, [pc, #500]	; (1000f8f0 <main+0x324>)
1000f6fa:	781b      	ldrb	r3, [r3, #0]
1000f6fc:	2b04      	cmp	r3, #4
1000f6fe:	d00b      	beq.n	1000f718 <main+0x14c>
1000f700:	4b7b      	ldr	r3, [pc, #492]	; (1000f8f0 <main+0x324>)
1000f702:	781b      	ldrb	r3, [r3, #0]
1000f704:	2b07      	cmp	r3, #7
1000f706:	d007      	beq.n	1000f718 <main+0x14c>
1000f708:	4b79      	ldr	r3, [pc, #484]	; (1000f8f0 <main+0x324>)
1000f70a:	781b      	ldrb	r3, [r3, #0]
1000f70c:	2b01      	cmp	r3, #1
1000f70e:	d003      	beq.n	1000f718 <main+0x14c>
1000f710:	4b77      	ldr	r3, [pc, #476]	; (1000f8f0 <main+0x324>)
1000f712:	781b      	ldrb	r3, [r3, #0]
1000f714:	2b05      	cmp	r3, #5
1000f716:	d166      	bne.n	1000f7e6 <main+0x21a>
                        //DBG_LOG_DEV("[main]\t\t\t\tDisabling sensor int...");
                        //sms_sensors_toggle_interrupt(SMS_EXTINT_DISABLE);
                        //DBG_LOG_CONT_DEV(" done!");
                    //}                        
                    //sms_button_toggle_interrupt(SMS_BTN_INT_DISABLE, SMS_BTN_INT_DISABLE);
                    if(sms_button_fn(SMS_BTN_0) < 0) {
1000f718:	2000      	movs	r0, #0
1000f71a:	4b76      	ldr	r3, [pc, #472]	; (1000f8f4 <main+0x328>)
1000f71c:	4798      	blx	r3
1000f71e:	2800      	cmp	r0, #0
1000f720:	da61      	bge.n	1000f7e6 <main+0x21a>
                        DBG_LOG("[main]\t\t\t\tError in sms_button_fn()!");
1000f722:	4860      	ldr	r0, [pc, #384]	; (1000f8a4 <main+0x2d8>)
1000f724:	4b60      	ldr	r3, [pc, #384]	; (1000f8a8 <main+0x2dc>)
1000f726:	4798      	blx	r3
1000f728:	4873      	ldr	r0, [pc, #460]	; (1000f8f8 <main+0x32c>)
1000f72a:	4b62      	ldr	r3, [pc, #392]	; (1000f8b4 <main+0x2e8>)
1000f72c:	4798      	blx	r3
1000f72e:	e05a      	b.n	1000f7e6 <main+0x21a>
                }                    
                break;
                
                case INT_BTN1:
                //sms_monitor_states("INT_BTN1");
                DBG_LOG_DEV("...BTN1");
1000f730:	485c      	ldr	r0, [pc, #368]	; (1000f8a4 <main+0x2d8>)
1000f732:	4b5d      	ldr	r3, [pc, #372]	; (1000f8a8 <main+0x2dc>)
1000f734:	4798      	blx	r3
1000f736:	4871      	ldr	r0, [pc, #452]	; (1000f8fc <main+0x330>)
1000f738:	4b5e      	ldr	r3, [pc, #376]	; (1000f8b4 <main+0x2e8>)
1000f73a:	4798      	blx	r3
                if((sms_working_mode == SMS_MODE_BUTTON_MPU) || (sms_working_mode == SMS_MODE_COMPLETE) || (sms_working_mode == SMS_MODE_BUTTON_SOLO) || (sms_working_mode == SMS_MODE_BUTTON_PRESSURE)) {
1000f73c:	4b6c      	ldr	r3, [pc, #432]	; (1000f8f0 <main+0x324>)
1000f73e:	781b      	ldrb	r3, [r3, #0]
1000f740:	2b04      	cmp	r3, #4
1000f742:	d00b      	beq.n	1000f75c <main+0x190>
1000f744:	4b6a      	ldr	r3, [pc, #424]	; (1000f8f0 <main+0x324>)
1000f746:	781b      	ldrb	r3, [r3, #0]
1000f748:	2b07      	cmp	r3, #7
1000f74a:	d007      	beq.n	1000f75c <main+0x190>
1000f74c:	4b68      	ldr	r3, [pc, #416]	; (1000f8f0 <main+0x324>)
1000f74e:	781b      	ldrb	r3, [r3, #0]
1000f750:	2b01      	cmp	r3, #1
1000f752:	d003      	beq.n	1000f75c <main+0x190>
1000f754:	4b66      	ldr	r3, [pc, #408]	; (1000f8f0 <main+0x324>)
1000f756:	781b      	ldrb	r3, [r3, #0]
1000f758:	2b05      	cmp	r3, #5
1000f75a:	d144      	bne.n	1000f7e6 <main+0x21a>
                        //DBG_LOG_DEV("[main]\t\t\t\tDisabling sensor int...");
                        //sms_sensors_toggle_interrupt(SMS_EXTINT_DISABLE);
                        //DBG_LOG_CONT_DEV(" done!");
                    //}                        
                    //sms_button_toggle_interrupt(SMS_BTN_INT_DISABLE, SMS_BTN_INT_DISABLE);
                    if(sms_button_fn(SMS_BTN_1) < 0) {
1000f75c:	2001      	movs	r0, #1
1000f75e:	4b65      	ldr	r3, [pc, #404]	; (1000f8f4 <main+0x328>)
1000f760:	4798      	blx	r3
1000f762:	2800      	cmp	r0, #0
1000f764:	da3f      	bge.n	1000f7e6 <main+0x21a>
                        DBG_LOG("[main]\t\t\t\tError in sms_button_fn()!");
1000f766:	484f      	ldr	r0, [pc, #316]	; (1000f8a4 <main+0x2d8>)
1000f768:	4b4f      	ldr	r3, [pc, #316]	; (1000f8a8 <main+0x2dc>)
1000f76a:	4798      	blx	r3
1000f76c:	4862      	ldr	r0, [pc, #392]	; (1000f8f8 <main+0x32c>)
1000f76e:	4b51      	ldr	r3, [pc, #324]	; (1000f8b4 <main+0x2e8>)
1000f770:	4798      	blx	r3
1000f772:	e038      	b.n	1000f7e6 <main+0x21a>
                }                    
                break;
                
                case INT_MPU_DRDY:
                //sms_monitor_states("INT_IMU_DRDY");
                DBG_LOG_DEV("...MPU_DRDY");
1000f774:	484b      	ldr	r0, [pc, #300]	; (1000f8a4 <main+0x2d8>)
1000f776:	4b4c      	ldr	r3, [pc, #304]	; (1000f8a8 <main+0x2dc>)
1000f778:	4798      	blx	r3
1000f77a:	4861      	ldr	r0, [pc, #388]	; (1000f900 <main+0x334>)
1000f77c:	4b4d      	ldr	r3, [pc, #308]	; (1000f8b4 <main+0x2e8>)
1000f77e:	4798      	blx	r3
                //if((sms_working_mode == SMS_MODE_BUTTON_MPU) || (sms_working_mode == SMS_MODE_COMPLETE) || (sms_working_mode == SMS_MODE_MPU_SOLO) || (sms_working_mode == SMS_MODE_MPU_PRESSURE)) {
                    sms_mpu_poll_data();
1000f780:	4b60      	ldr	r3, [pc, #384]	; (1000f904 <main+0x338>)
1000f782:	4798      	blx	r3
                //}                    
                break;
1000f784:	e02f      	b.n	1000f7e6 <main+0x21a>
                
                case INT_AON_TIMER:
                //sms_monitor_states("INT_AON_TIMER");
                DBG_LOG_DEV("...AON_TIMER");
1000f786:	4847      	ldr	r0, [pc, #284]	; (1000f8a4 <main+0x2d8>)
1000f788:	4f47      	ldr	r7, [pc, #284]	; (1000f8a8 <main+0x2dc>)
1000f78a:	47b8      	blx	r7
1000f78c:	485e      	ldr	r0, [pc, #376]	; (1000f908 <main+0x33c>)
1000f78e:	4c49      	ldr	r4, [pc, #292]	; (1000f8b4 <main+0x2e8>)
1000f790:	47a0      	blx	r4
                DBG_LOG_DEV("value: %u", dualtimer_get_value(DUALTIMER_TIMER1));
1000f792:	4844      	ldr	r0, [pc, #272]	; (1000f8a4 <main+0x2d8>)
1000f794:	47b8      	blx	r7
1000f796:	2000      	movs	r0, #0
1000f798:	4b44      	ldr	r3, [pc, #272]	; (1000f8ac <main+0x2e0>)
1000f79a:	4798      	blx	r3
1000f79c:	0001      	movs	r1, r0
1000f79e:	4844      	ldr	r0, [pc, #272]	; (1000f8b0 <main+0x2e4>)
1000f7a0:	47a0      	blx	r4
                ulp_ready = true;
1000f7a2:	2201      	movs	r2, #1
1000f7a4:	4b47      	ldr	r3, [pc, #284]	; (1000f8c4 <main+0x2f8>)
1000f7a6:	701a      	strb	r2, [r3, #0]
                    //else {
                        //sms_timer_aon_disable();
                        //sms_ble_power_down();
                    //}                        
                //}                    
                break;
1000f7a8:	e01d      	b.n	1000f7e6 <main+0x21a>
                
                case INT_DUALTIMER1:
                //sms_monitor_states("INT_DUALTIMER1");
                DBG_LOG_DEV("...DUALTIMER1");
1000f7aa:	483e      	ldr	r0, [pc, #248]	; (1000f8a4 <main+0x2d8>)
1000f7ac:	4b3e      	ldr	r3, [pc, #248]	; (1000f8a8 <main+0x2dc>)
1000f7ae:	4798      	blx	r3
1000f7b0:	4856      	ldr	r0, [pc, #344]	; (1000f90c <main+0x340>)
1000f7b2:	4b40      	ldr	r3, [pc, #256]	; (1000f8b4 <main+0x2e8>)
1000f7b4:	4798      	blx	r3
                sms_dualtimer_stop(DUALTIMER_TIMER1);
1000f7b6:	2000      	movs	r0, #0
1000f7b8:	4b55      	ldr	r3, [pc, #340]	; (1000f910 <main+0x344>)
1000f7ba:	4798      	blx	r3
                sms_dualtimer1_fn();
1000f7bc:	4b55      	ldr	r3, [pc, #340]	; (1000f914 <main+0x348>)
1000f7be:	4798      	blx	r3
                break;
1000f7c0:	e011      	b.n	1000f7e6 <main+0x21a>
                
                case INT_DUALTIMER2:
                //sms_monitor_states("INT_DUALTIMER2");
                DBG_LOG_DEV("...DUALTIMER2");
1000f7c2:	4838      	ldr	r0, [pc, #224]	; (1000f8a4 <main+0x2d8>)
1000f7c4:	4b38      	ldr	r3, [pc, #224]	; (1000f8a8 <main+0x2dc>)
1000f7c6:	4798      	blx	r3
1000f7c8:	4853      	ldr	r0, [pc, #332]	; (1000f918 <main+0x34c>)
1000f7ca:	4b3a      	ldr	r3, [pc, #232]	; (1000f8b4 <main+0x2e8>)
1000f7cc:	4798      	blx	r3
                sms_dualtimer_stop(DUALTIMER_TIMER2);
1000f7ce:	2001      	movs	r0, #1
1000f7d0:	4b4f      	ldr	r3, [pc, #316]	; (1000f910 <main+0x344>)
1000f7d2:	4798      	blx	r3
                sms_dualtimer2_fn();
1000f7d4:	4b51      	ldr	r3, [pc, #324]	; (1000f91c <main+0x350>)
1000f7d6:	4798      	blx	r3
                break;
1000f7d8:	e005      	b.n	1000f7e6 <main+0x21a>
                
                default:
                DBG_LOG_DEV("...??");
1000f7da:	4832      	ldr	r0, [pc, #200]	; (1000f8a4 <main+0x2d8>)
1000f7dc:	4b32      	ldr	r3, [pc, #200]	; (1000f8a8 <main+0x2dc>)
1000f7de:	4798      	blx	r3
1000f7e0:	484f      	ldr	r0, [pc, #316]	; (1000f920 <main+0x354>)
1000f7e2:	4b34      	ldr	r3, [pc, #208]	; (1000f8b4 <main+0x2e8>)
1000f7e4:	4798      	blx	r3
            
            //DBG_LOG_DEV("[main]\t\t\t\tEnabling button int...");
            //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
            //DBG_LOG_CONT_DEV(" done!");
            
            sms_current_interrupt.int_on = false;
1000f7e6:	4b39      	ldr	r3, [pc, #228]	; (1000f8cc <main+0x300>)
1000f7e8:	2200      	movs	r2, #0
1000f7ea:	705a      	strb	r2, [r3, #1]
            sms_current_interrupt.source = INT_NONE;
1000f7ec:	701a      	strb	r2, [r3, #0]
        }
        
        
        if(ulp_ready) {
1000f7ee:	4b35      	ldr	r3, [pc, #212]	; (1000f8c4 <main+0x2f8>)
1000f7f0:	781b      	ldrb	r3, [r3, #0]
1000f7f2:	2b00      	cmp	r3, #0
1000f7f4:	d019      	beq.n	1000f82a <main+0x25e>
            DBG_LOG_DEV("[main]\t\t\t\tULP...");
1000f7f6:	482b      	ldr	r0, [pc, #172]	; (1000f8a4 <main+0x2d8>)
1000f7f8:	4f2b      	ldr	r7, [pc, #172]	; (1000f8a8 <main+0x2dc>)
1000f7fa:	47b8      	blx	r7
1000f7fc:	4849      	ldr	r0, [pc, #292]	; (1000f924 <main+0x358>)
1000f7fe:	4c2d      	ldr	r4, [pc, #180]	; (1000f8b4 <main+0x2e8>)
1000f800:	47a0      	blx	r4
            sleep_value = dualtimer_get_value(DUALTIMER_TIMER1);
1000f802:	2000      	movs	r0, #0
1000f804:	4b29      	ldr	r3, [pc, #164]	; (1000f8ac <main+0x2e0>)
1000f806:	4798      	blx	r3
1000f808:	9001      	str	r0, [sp, #4]
            DBG_LOG("sleep_value: %u", sleep_value);
1000f80a:	4826      	ldr	r0, [pc, #152]	; (1000f8a4 <main+0x2d8>)
1000f80c:	47b8      	blx	r7
1000f80e:	9901      	ldr	r1, [sp, #4]
1000f810:	4845      	ldr	r0, [pc, #276]	; (1000f928 <main+0x35c>)
1000f812:	47a0      	blx	r4
            ulp_active = true;
1000f814:	2201      	movs	r2, #1
1000f816:	4b2e      	ldr	r3, [pc, #184]	; (1000f8d0 <main+0x304>)
1000f818:	701a      	strb	r2, [r3, #0]
            ulp_ready = false;
1000f81a:	2200      	movs	r2, #0
1000f81c:	4b29      	ldr	r3, [pc, #164]	; (1000f8c4 <main+0x2f8>)
1000f81e:	701a      	strb	r2, [r3, #0]
            release_sleep_lock();
1000f820:	4b42      	ldr	r3, [pc, #264]	; (1000f92c <main+0x360>)
1000f822:	4798      	blx	r3
            DBG_LOG_CONT_DEV(" zzzz");
1000f824:	4842      	ldr	r0, [pc, #264]	; (1000f930 <main+0x364>)
1000f826:	47a0      	blx	r4
1000f828:	e725      	b.n	1000f676 <main+0xaa>
            //DBG_LOG_CONT_DEV(" !!");
        }            
        else {
            ulp_active = false;
1000f82a:	2200      	movs	r2, #0
1000f82c:	4b28      	ldr	r3, [pc, #160]	; (1000f8d0 <main+0x304>)
1000f82e:	701a      	strb	r2, [r3, #0]
1000f830:	e721      	b.n	1000f676 <main+0xaa>
1000f832:	46c0      	nop			; (mov r8, r8)
1000f834:	10019eb4 	.word	0x10019eb4
1000f838:	1000eddd 	.word	0x1000eddd
1000f83c:	1000c365 	.word	0x1000c365
1000f840:	1000ead1 	.word	0x1000ead1
1000f844:	1000e145 	.word	0x1000e145
1000f848:	1000f331 	.word	0x1000f331
1000f84c:	1000f55d 	.word	0x1000f55d
1000f850:	1000b249 	.word	0x1000b249
1000f854:	100080e9 	.word	0x100080e9
1000f858:	1000a519 	.word	0x1000a519
1000f85c:	1000ae2d 	.word	0x1000ae2d
1000f860:	1000aab9 	.word	0x1000aab9
1000f864:	1000b101 	.word	0x1000b101
1000f868:	10019e18 	.word	0x10019e18
1000f86c:	1000a941 	.word	0x1000a941
1000f870:	1000a8d9 	.word	0x1000a8d9
1000f874:	1000b099 	.word	0x1000b099
1000f878:	1000ada1 	.word	0x1000ada1
1000f87c:	1000f529 	.word	0x1000f529
1000f880:	1000f375 	.word	0x1000f375
1000f884:	1000a5cd 	.word	0x1000a5cd
1000f888:	1001681c 	.word	0x1001681c
1000f88c:	1000e075 	.word	0x1000e075
1000f890:	10016868 	.word	0x10016868
1000f894:	1000f51d 	.word	0x1000f51d
1000f898:	1000ea41 	.word	0x1000ea41
1000f89c:	00002710 	.word	0x00002710
1000f8a0:	1000b291 	.word	0x1000b291
1000f8a4:	10016278 	.word	0x10016278
1000f8a8:	100150d1 	.word	0x100150d1
1000f8ac:	1000bae5 	.word	0x1000bae5
1000f8b0:	10017ebc 	.word	0x10017ebc
1000f8b4:	10014fb1 	.word	0x10014fb1
1000f8b8:	00003ffc 	.word	0x00003ffc
1000f8bc:	1000b1d5 	.word	0x1000b1d5
1000f8c0:	1000b209 	.word	0x1000b209
1000f8c4:	10019d9d 	.word	0x10019d9d
1000f8c8:	1000e93d 	.word	0x1000e93d
1000f8cc:	10019e9c 	.word	0x10019e9c
1000f8d0:	10019ebb 	.word	0x10019ebb
1000f8d4:	10017ec8 	.word	0x10017ec8
1000f8d8:	1000baf9 	.word	0x1000baf9
1000f8dc:	1000bb21 	.word	0x1000bb21
1000f8e0:	10017ee0 	.word	0x10017ee0
1000f8e4:	10017ea0 	.word	0x10017ea0
1000f8e8:	10017ee8 	.word	0x10017ee8
1000f8ec:	10017ef8 	.word	0x10017ef8
1000f8f0:	10019d9c 	.word	0x10019d9c
1000f8f4:	1000a649 	.word	0x1000a649
1000f8f8:	10017f00 	.word	0x10017f00
1000f8fc:	10017f24 	.word	0x10017f24
1000f900:	10017f2c 	.word	0x10017f2c
1000f904:	1000ad05 	.word	0x1000ad05
1000f908:	10017f38 	.word	0x10017f38
1000f90c:	10017f48 	.word	0x10017f48
1000f910:	1000b2f1 	.word	0x1000b2f1
1000f914:	1000b2fd 	.word	0x1000b2fd
1000f918:	10017f58 	.word	0x10017f58
1000f91c:	1000b5fd 	.word	0x1000b5fd
1000f920:	10017f68 	.word	0x10017f68
1000f924:	10017f70 	.word	0x10017f70
1000f928:	10017f84 	.word	0x10017f84
1000f92c:	1000f359 	.word	0x1000f359
1000f930:	10017f94 	.word	0x10017f94

1000f934 <internal_event_post>:
1000f934:	b570      	push	{r4, r5, r6, lr}
1000f936:	4d12      	ldr	r5, [pc, #72]	; (1000f980 <internal_event_post+0x4c>)
1000f938:	682c      	ldr	r4, [r5, #0]
1000f93a:	2c00      	cmp	r4, #0
1000f93c:	d014      	beq.n	1000f968 <internal_event_post+0x34>
1000f93e:	6826      	ldr	r6, [r4, #0]
1000f940:	60e2      	str	r2, [r4, #12]
1000f942:	602e      	str	r6, [r5, #0]
1000f944:	2500      	movs	r5, #0
1000f946:	4a0f      	ldr	r2, [pc, #60]	; (1000f984 <internal_event_post+0x50>)
1000f948:	8123      	strh	r3, [r4, #8]
1000f94a:	6813      	ldr	r3, [r2, #0]
1000f94c:	6025      	str	r5, [r4, #0]
1000f94e:	80a0      	strh	r0, [r4, #4]
1000f950:	80e1      	strh	r1, [r4, #6]
1000f952:	42ab      	cmp	r3, r5
1000f954:	d101      	bne.n	1000f95a <internal_event_post+0x26>
1000f956:	6014      	str	r4, [r2, #0]
1000f958:	e011      	b.n	1000f97e <internal_event_post+0x4a>
1000f95a:	681a      	ldr	r2, [r3, #0]
1000f95c:	2a00      	cmp	r2, #0
1000f95e:	d001      	beq.n	1000f964 <internal_event_post+0x30>
1000f960:	1c13      	adds	r3, r2, #0
1000f962:	e7fa      	b.n	1000f95a <internal_event_post+0x26>
1000f964:	601c      	str	r4, [r3, #0]
1000f966:	e00a      	b.n	1000f97e <internal_event_post+0x4a>
1000f968:	b2c4      	uxtb	r4, r0
1000f96a:	2c00      	cmp	r4, #0
1000f96c:	d107      	bne.n	1000f97e <internal_event_post+0x4a>
1000f96e:	4c06      	ldr	r4, [pc, #24]	; (1000f988 <internal_event_post+0x54>)
1000f970:	60e2      	str	r2, [r4, #12]
1000f972:	2201      	movs	r2, #1
1000f974:	8123      	strh	r3, [r4, #8]
1000f976:	4b05      	ldr	r3, [pc, #20]	; (1000f98c <internal_event_post+0x58>)
1000f978:	80a0      	strh	r0, [r4, #4]
1000f97a:	80e1      	strh	r1, [r4, #6]
1000f97c:	701a      	strb	r2, [r3, #0]
1000f97e:	bd70      	pop	{r4, r5, r6, pc}
1000f980:	10019c4c 	.word	0x10019c4c
1000f984:	10019c48 	.word	0x10019c48
1000f988:	10019c34 	.word	0x10019c34
1000f98c:	10019c44 	.word	0x10019c44

1000f990 <internal_event_init>:
1000f990:	b510      	push	{r4, lr}
1000f992:	4b08      	ldr	r3, [pc, #32]	; (1000f9b4 <internal_event_init+0x24>)
1000f994:	0900      	lsrs	r0, r0, #4
1000f996:	0100      	lsls	r0, r0, #4
1000f998:	681a      	ldr	r2, [r3, #0]
1000f99a:	1808      	adds	r0, r1, r0
1000f99c:	4281      	cmp	r1, r0
1000f99e:	d003      	beq.n	1000f9a8 <internal_event_init+0x18>
1000f9a0:	600a      	str	r2, [r1, #0]
1000f9a2:	1c0a      	adds	r2, r1, #0
1000f9a4:	3110      	adds	r1, #16
1000f9a6:	e7f9      	b.n	1000f99c <internal_event_init+0xc>
1000f9a8:	601a      	str	r2, [r3, #0]
1000f9aa:	2200      	movs	r2, #0
1000f9ac:	4b02      	ldr	r3, [pc, #8]	; (1000f9b8 <internal_event_init+0x28>)
1000f9ae:	601a      	str	r2, [r3, #0]
1000f9b0:	bd10      	pop	{r4, pc}
1000f9b2:	46c0      	nop			; (mov r8, r8)
1000f9b4:	10019c4c 	.word	0x10019c4c
1000f9b8:	10019c48 	.word	0x10019c48

1000f9bc <special_events_handler>:
1000f9bc:	b538      	push	{r3, r4, r5, lr}
1000f9be:	4c1b      	ldr	r4, [pc, #108]	; (1000fa2c <special_events_handler+0x70>)
1000f9c0:	1c03      	adds	r3, r0, #0
1000f9c2:	8825      	ldrh	r5, [r4, #0]
1000f9c4:	1c08      	adds	r0, r1, #0
1000f9c6:	1c21      	adds	r1, r4, #0
1000f9c8:	429d      	cmp	r5, r3
1000f9ca:	d107      	bne.n	1000f9dc <special_events_handler+0x20>
1000f9cc:	88a5      	ldrh	r5, [r4, #4]
1000f9ce:	4285      	cmp	r5, r0
1000f9d0:	d104      	bne.n	1000f9dc <special_events_handler+0x20>
1000f9d2:	2301      	movs	r3, #1
1000f9d4:	425b      	negs	r3, r3
1000f9d6:	8023      	strh	r3, [r4, #0]
1000f9d8:	60a2      	str	r2, [r4, #8]
1000f9da:	e009      	b.n	1000f9f0 <special_events_handler+0x34>
1000f9dc:	884c      	ldrh	r4, [r1, #2]
1000f9de:	429c      	cmp	r4, r3
1000f9e0:	d10a      	bne.n	1000f9f8 <special_events_handler+0x3c>
1000f9e2:	888c      	ldrh	r4, [r1, #4]
1000f9e4:	4284      	cmp	r4, r0
1000f9e6:	d107      	bne.n	1000f9f8 <special_events_handler+0x3c>
1000f9e8:	2301      	movs	r3, #1
1000f9ea:	425b      	negs	r3, r3
1000f9ec:	804b      	strh	r3, [r1, #2]
1000f9ee:	608a      	str	r2, [r1, #8]
1000f9f0:	4b0f      	ldr	r3, [pc, #60]	; (1000fa30 <special_events_handler+0x74>)
1000f9f2:	4798      	blx	r3
1000f9f4:	2001      	movs	r0, #1
1000f9f6:	e017      	b.n	1000fa28 <special_events_handler+0x6c>
1000f9f8:	490e      	ldr	r1, [pc, #56]	; (1000fa34 <special_events_handler+0x78>)
1000f9fa:	428b      	cmp	r3, r1
1000f9fc:	d00e      	beq.n	1000fa1c <special_events_handler+0x60>
1000f9fe:	490e      	ldr	r1, [pc, #56]	; (1000fa38 <special_events_handler+0x7c>)
1000fa00:	428b      	cmp	r3, r1
1000fa02:	d007      	beq.n	1000fa14 <special_events_handler+0x58>
1000fa04:	490d      	ldr	r1, [pc, #52]	; (1000fa3c <special_events_handler+0x80>)
1000fa06:	2000      	movs	r0, #0
1000fa08:	428b      	cmp	r3, r1
1000fa0a:	d10d      	bne.n	1000fa28 <special_events_handler+0x6c>
1000fa0c:	1c10      	adds	r0, r2, #0
1000fa0e:	4b0c      	ldr	r3, [pc, #48]	; (1000fa40 <special_events_handler+0x84>)
1000fa10:	4798      	blx	r3
1000fa12:	e7ef      	b.n	1000f9f4 <special_events_handler+0x38>
1000fa14:	1c11      	adds	r1, r2, #0
1000fa16:	4b0b      	ldr	r3, [pc, #44]	; (1000fa44 <special_events_handler+0x88>)
1000fa18:	2200      	movs	r2, #0
1000fa1a:	e002      	b.n	1000fa22 <special_events_handler+0x66>
1000fa1c:	1c11      	adds	r1, r2, #0
1000fa1e:	2200      	movs	r2, #0
1000fa20:	4b09      	ldr	r3, [pc, #36]	; (1000fa48 <special_events_handler+0x8c>)
1000fa22:	4798      	blx	r3
1000fa24:	4243      	negs	r3, r0
1000fa26:	4158      	adcs	r0, r3
1000fa28:	bd38      	pop	{r3, r4, r5, pc}
1000fa2a:	46c0      	nop			; (mov r8, r8)
1000fa2c:	1001ab50 	.word	0x1001ab50
1000fa30:	10011419 	.word	0x10011419
1000fa34:	00000e13 	.word	0x00000e13
1000fa38:	00000e15 	.word	0x00000e15
1000fa3c:	00000e01 	.word	0x00000e01
1000fa40:	10011789 	.word	0x10011789
1000fa44:	10011949 	.word	0x10011949
1000fa48:	10011a21 	.word	0x10011a21

1000fa4c <at_ble_event_get>:
1000fa4c:	2300      	movs	r3, #0
1000fa4e:	b5f0      	push	{r4, r5, r6, r7, lr}
1000fa50:	b087      	sub	sp, #28
1000fa52:	9204      	str	r2, [sp, #16]
1000fa54:	7003      	strb	r3, [r0, #0]
1000fa56:	9b04      	ldr	r3, [sp, #16]
1000fa58:	9003      	str	r0, [sp, #12]
1000fa5a:	3b01      	subs	r3, #1
1000fa5c:	1c0d      	adds	r5, r1, #0
1000fa5e:	9305      	str	r3, [sp, #20]
1000fa60:	3303      	adds	r3, #3
1000fa62:	d802      	bhi.n	1000fa6a <at_ble_event_get+0x1e>
1000fa64:	9804      	ldr	r0, [sp, #16]
1000fa66:	4bae      	ldr	r3, [pc, #696]	; (1000fd20 <at_ble_event_get+0x2d4>)
1000fa68:	4798      	blx	r3
1000fa6a:	9b05      	ldr	r3, [sp, #20]
1000fa6c:	4cad      	ldr	r4, [pc, #692]	; (1000fd24 <at_ble_event_get+0x2d8>)
1000fa6e:	3303      	adds	r3, #3
1000fa70:	d902      	bls.n	1000fa78 <at_ble_event_get+0x2c>
1000fa72:	2300      	movs	r3, #0
1000fa74:	9302      	str	r3, [sp, #8]
1000fa76:	e015      	b.n	1000faa4 <at_ble_event_get+0x58>
1000fa78:	2300      	movs	r3, #0
1000fa7a:	9302      	str	r3, [sp, #8]
1000fa7c:	6823      	ldr	r3, [r4, #0]
1000fa7e:	2b00      	cmp	r3, #0
1000fa80:	d113      	bne.n	1000faaa <at_ble_event_get+0x5e>
1000fa82:	9b02      	ldr	r3, [sp, #8]
1000fa84:	2bd0      	cmp	r3, #208	; 0xd0
1000fa86:	d100      	bne.n	1000fa8a <at_ble_event_get+0x3e>
1000fa88:	e2da      	b.n	10010040 <at_ble_event_get+0x5f4>
1000fa8a:	9804      	ldr	r0, [sp, #16]
1000fa8c:	4ba6      	ldr	r3, [pc, #664]	; (1000fd28 <at_ble_event_get+0x2dc>)
1000fa8e:	4798      	blx	r3
1000fa90:	9002      	str	r0, [sp, #8]
1000fa92:	2802      	cmp	r0, #2
1000fa94:	d1f2      	bne.n	1000fa7c <at_ble_event_get+0x30>
1000fa96:	e03f      	b.n	1000fb18 <at_ble_event_get+0xcc>
1000fa98:	9804      	ldr	r0, [sp, #16]
1000fa9a:	4ba3      	ldr	r3, [pc, #652]	; (1000fd28 <at_ble_event_get+0x2dc>)
1000fa9c:	4798      	blx	r3
1000fa9e:	9002      	str	r0, [sp, #8]
1000faa0:	2802      	cmp	r0, #2
1000faa2:	d039      	beq.n	1000fb18 <at_ble_event_get+0xcc>
1000faa4:	6823      	ldr	r3, [r4, #0]
1000faa6:	2b00      	cmp	r3, #0
1000faa8:	d0f6      	beq.n	1000fa98 <at_ble_event_get+0x4c>
1000faaa:	9b02      	ldr	r3, [sp, #8]
1000faac:	2bd0      	cmp	r3, #208	; 0xd0
1000faae:	d100      	bne.n	1000fab2 <at_ble_event_get+0x66>
1000fab0:	e2c6      	b.n	10010040 <at_ble_event_get+0x5f4>
1000fab2:	9b02      	ldr	r3, [sp, #8]
1000fab4:	3b03      	subs	r3, #3
1000fab6:	1e5a      	subs	r2, r3, #1
1000fab8:	4193      	sbcs	r3, r2
1000faba:	9a02      	ldr	r2, [sp, #8]
1000fabc:	425b      	negs	r3, r3
1000fabe:	401a      	ands	r2, r3
1000fac0:	6823      	ldr	r3, [r4, #0]
1000fac2:	9202      	str	r2, [sp, #8]
1000fac4:	2b00      	cmp	r3, #0
1000fac6:	d100      	bne.n	1000faca <at_ble_event_get+0x7e>
1000fac8:	e2c2      	b.n	10010050 <at_ble_event_get+0x604>
1000faca:	681a      	ldr	r2, [r3, #0]
1000facc:	68de      	ldr	r6, [r3, #12]
1000face:	6022      	str	r2, [r4, #0]
1000fad0:	88da      	ldrh	r2, [r3, #6]
1000fad2:	9201      	str	r2, [sp, #4]
1000fad4:	4a95      	ldr	r2, [pc, #596]	; (1000fd2c <at_ble_event_get+0x2e0>)
1000fad6:	889c      	ldrh	r4, [r3, #4]
1000fad8:	6811      	ldr	r1, [r2, #0]
1000fada:	6013      	str	r3, [r2, #0]
1000fadc:	6019      	str	r1, [r3, #0]
1000fade:	4b94      	ldr	r3, [pc, #592]	; (1000fd30 <at_ble_event_get+0x2e4>)
1000fae0:	781b      	ldrb	r3, [r3, #0]
1000fae2:	2b01      	cmp	r3, #1
1000fae4:	d10f      	bne.n	1000fb06 <at_ble_event_get+0xba>
1000fae6:	4b93      	ldr	r3, [pc, #588]	; (1000fd34 <at_ble_event_get+0x2e8>)
1000fae8:	4a92      	ldr	r2, [pc, #584]	; (1000fd34 <at_ble_event_get+0x2e8>)
1000faea:	8898      	ldrh	r0, [r3, #4]
1000faec:	88d9      	ldrh	r1, [r3, #6]
1000faee:	68d2      	ldr	r2, [r2, #12]
1000faf0:	891b      	ldrh	r3, [r3, #8]
1000faf2:	4f91      	ldr	r7, [pc, #580]	; (1000fd38 <at_ble_event_get+0x2ec>)
1000faf4:	47b8      	blx	r7
1000faf6:	2210      	movs	r2, #16
1000faf8:	4b90      	ldr	r3, [pc, #576]	; (1000fd3c <at_ble_event_get+0x2f0>)
1000fafa:	488e      	ldr	r0, [pc, #568]	; (1000fd34 <at_ble_event_get+0x2e8>)
1000fafc:	2100      	movs	r1, #0
1000fafe:	4798      	blx	r3
1000fb00:	2300      	movs	r3, #0
1000fb02:	4a8b      	ldr	r2, [pc, #556]	; (1000fd30 <at_ble_event_get+0x2e4>)
1000fb04:	7013      	strb	r3, [r2, #0]
1000fb06:	9b02      	ldr	r3, [sp, #8]
1000fb08:	2b00      	cmp	r3, #0
1000fb0a:	d114      	bne.n	1000fb36 <at_ble_event_get+0xea>
1000fb0c:	4b8c      	ldr	r3, [pc, #560]	; (1000fd40 <at_ble_event_get+0x2f4>)
1000fb0e:	429c      	cmp	r4, r3
1000fb10:	d009      	beq.n	1000fb26 <at_ble_event_get+0xda>
1000fb12:	4b8c      	ldr	r3, [pc, #560]	; (1000fd44 <at_ble_event_get+0x2f8>)
1000fb14:	429c      	cmp	r4, r3
1000fb16:	d127      	bne.n	1000fb68 <at_ble_event_get+0x11c>
1000fb18:	233a      	movs	r3, #58	; 0x3a
1000fb1a:	9a03      	ldr	r2, [sp, #12]
1000fb1c:	7013      	strb	r3, [r2, #0]
1000fb1e:	2300      	movs	r3, #0
1000fb20:	9302      	str	r3, [sp, #8]
1000fb22:	1c1d      	adds	r5, r3, #0
1000fb24:	e007      	b.n	1000fb36 <at_ble_event_get+0xea>
1000fb26:	9b01      	ldr	r3, [sp, #4]
1000fb28:	42a3      	cmp	r3, r4
1000fb2a:	d000      	beq.n	1000fb2e <at_ble_event_get+0xe2>
1000fb2c:	e28a      	b.n	10010044 <at_ble_event_get+0x5f8>
1000fb2e:	2338      	movs	r3, #56	; 0x38
1000fb30:	9a03      	ldr	r2, [sp, #12]
1000fb32:	7013      	strb	r3, [r2, #0]
1000fb34:	602e      	str	r6, [r5, #0]
1000fb36:	9b03      	ldr	r3, [sp, #12]
1000fb38:	781b      	ldrb	r3, [r3, #0]
1000fb3a:	2b3b      	cmp	r3, #59	; 0x3b
1000fb3c:	d101      	bne.n	1000fb42 <at_ble_event_get+0xf6>
1000fb3e:	4b82      	ldr	r3, [pc, #520]	; (1000fd48 <at_ble_event_get+0x2fc>)
1000fb40:	4798      	blx	r3
1000fb42:	9b03      	ldr	r3, [sp, #12]
1000fb44:	781b      	ldrb	r3, [r3, #0]
1000fb46:	2b3b      	cmp	r3, #59	; 0x3b
1000fb48:	d003      	beq.n	1000fb52 <at_ble_event_get+0x106>
1000fb4a:	9b05      	ldr	r3, [sp, #20]
1000fb4c:	3303      	adds	r3, #3
1000fb4e:	d904      	bls.n	1000fb5a <at_ble_event_get+0x10e>
1000fb50:	e283      	b.n	1001005a <at_ble_event_get+0x60e>
1000fb52:	9b02      	ldr	r3, [sp, #8]
1000fb54:	2b00      	cmp	r3, #0
1000fb56:	d088      	beq.n	1000fa6a <at_ble_event_get+0x1e>
1000fb58:	e7f7      	b.n	1000fb4a <at_ble_event_get+0xfe>
1000fb5a:	9b02      	ldr	r3, [sp, #8]
1000fb5c:	2bd0      	cmp	r3, #208	; 0xd0
1000fb5e:	d100      	bne.n	1000fb62 <at_ble_event_get+0x116>
1000fb60:	e27b      	b.n	1001005a <at_ble_event_get+0x60e>
1000fb62:	4b7a      	ldr	r3, [pc, #488]	; (1000fd4c <at_ble_event_get+0x300>)
1000fb64:	4798      	blx	r3
1000fb66:	e278      	b.n	1001005a <at_ble_event_get+0x60e>
1000fb68:	9b01      	ldr	r3, [sp, #4]
1000fb6a:	2bbb      	cmp	r3, #187	; 0xbb
1000fb6c:	d125      	bne.n	1000fbba <at_ble_event_get+0x16e>
1000fb6e:	2cbb      	cmp	r4, #187	; 0xbb
1000fb70:	d123      	bne.n	1000fbba <at_ble_event_get+0x16e>
1000fb72:	466b      	mov	r3, sp
1000fb74:	891b      	ldrh	r3, [r3, #8]
1000fb76:	80ab      	strh	r3, [r5, #4]
1000fb78:	78b3      	ldrb	r3, [r6, #2]
1000fb7a:	7872      	ldrb	r2, [r6, #1]
1000fb7c:	78f0      	ldrb	r0, [r6, #3]
1000fb7e:	021b      	lsls	r3, r3, #8
1000fb80:	4313      	orrs	r3, r2
1000fb82:	7971      	ldrb	r1, [r6, #5]
1000fb84:	7932      	ldrb	r2, [r6, #4]
1000fb86:	70a8      	strb	r0, [r5, #2]
1000fb88:	4871      	ldr	r0, [pc, #452]	; (1000fd50 <at_ble_event_get+0x304>)
1000fb8a:	802b      	strh	r3, [r5, #0]
1000fb8c:	4283      	cmp	r3, r0
1000fb8e:	d806      	bhi.n	1000fb9e <at_ble_event_get+0x152>
1000fb90:	4a70      	ldr	r2, [pc, #448]	; (1000fd54 <at_ble_event_get+0x308>)
1000fb92:	4293      	cmp	r3, r2
1000fb94:	d20b      	bcs.n	1000fbae <at_ble_event_get+0x162>
1000fb96:	4a70      	ldr	r2, [pc, #448]	; (1000fd58 <at_ble_event_get+0x30c>)
1000fb98:	4293      	cmp	r3, r2
1000fb9a:	d008      	beq.n	1000fbae <at_ble_event_get+0x162>
1000fb9c:	e009      	b.n	1000fbb2 <at_ble_event_get+0x166>
1000fb9e:	486f      	ldr	r0, [pc, #444]	; (1000fd5c <at_ble_event_get+0x310>)
1000fba0:	4283      	cmp	r3, r0
1000fba2:	d106      	bne.n	1000fbb2 <at_ble_event_get+0x166>
1000fba4:	020b      	lsls	r3, r1, #8
1000fba6:	4313      	orrs	r3, r2
1000fba8:	80ab      	strh	r3, [r5, #4]
1000fbaa:	2337      	movs	r3, #55	; 0x37
1000fbac:	e002      	b.n	1000fbb4 <at_ble_event_get+0x168>
1000fbae:	2336      	movs	r3, #54	; 0x36
1000fbb0:	e000      	b.n	1000fbb4 <at_ble_event_get+0x168>
1000fbb2:	2300      	movs	r3, #0
1000fbb4:	9a03      	ldr	r2, [sp, #12]
1000fbb6:	7013      	strb	r3, [r2, #0]
1000fbb8:	e7bd      	b.n	1000fb36 <at_ble_event_get+0xea>
1000fbba:	4b69      	ldr	r3, [pc, #420]	; (1000fd60 <at_ble_event_get+0x314>)
1000fbbc:	429c      	cmp	r4, r3
1000fbbe:	d100      	bne.n	1000fbc2 <at_ble_event_get+0x176>
1000fbc0:	e144      	b.n	1000fe4c <at_ble_event_get+0x400>
1000fbc2:	d865      	bhi.n	1000fc90 <at_ble_event_get+0x244>
1000fbc4:	4b67      	ldr	r3, [pc, #412]	; (1000fd64 <at_ble_event_get+0x318>)
1000fbc6:	429c      	cmp	r4, r3
1000fbc8:	d100      	bne.n	1000fbcc <at_ble_event_get+0x180>
1000fbca:	e1d5      	b.n	1000ff78 <at_ble_event_get+0x52c>
1000fbcc:	d82f      	bhi.n	1000fc2e <at_ble_event_get+0x1e2>
1000fbce:	4b66      	ldr	r3, [pc, #408]	; (1000fd68 <at_ble_event_get+0x31c>)
1000fbd0:	429c      	cmp	r4, r3
1000fbd2:	d100      	bne.n	1000fbd6 <at_ble_event_get+0x18a>
1000fbd4:	e1e0      	b.n	1000ff98 <at_ble_event_get+0x54c>
1000fbd6:	d813      	bhi.n	1000fc00 <at_ble_event_get+0x1b4>
1000fbd8:	4b64      	ldr	r3, [pc, #400]	; (1000fd6c <at_ble_event_get+0x320>)
1000fbda:	429c      	cmp	r4, r3
1000fbdc:	d100      	bne.n	1000fbe0 <at_ble_event_get+0x194>
1000fbde:	e1a3      	b.n	1000ff28 <at_ble_event_get+0x4dc>
1000fbe0:	d804      	bhi.n	1000fbec <at_ble_event_get+0x1a0>
1000fbe2:	2638      	movs	r6, #56	; 0x38
1000fbe4:	42b4      	cmp	r4, r6
1000fbe6:	d100      	bne.n	1000fbea <at_ble_event_get+0x19e>
1000fbe8:	e225      	b.n	10010036 <at_ble_event_get+0x5ea>
1000fbea:	e117      	b.n	1000fe1c <at_ble_event_get+0x3d0>
1000fbec:	4b60      	ldr	r3, [pc, #384]	; (1000fd70 <at_ble_event_get+0x324>)
1000fbee:	429c      	cmp	r4, r3
1000fbf0:	d100      	bne.n	1000fbf4 <at_ble_event_get+0x1a8>
1000fbf2:	e19f      	b.n	1000ff34 <at_ble_event_get+0x4e8>
1000fbf4:	33fe      	adds	r3, #254	; 0xfe
1000fbf6:	33ff      	adds	r3, #255	; 0xff
1000fbf8:	429c      	cmp	r4, r3
1000fbfa:	d100      	bne.n	1000fbfe <at_ble_event_get+0x1b2>
1000fbfc:	e1d3      	b.n	1000ffa6 <at_ble_event_get+0x55a>
1000fbfe:	e10d      	b.n	1000fe1c <at_ble_event_get+0x3d0>
1000fc00:	4b5c      	ldr	r3, [pc, #368]	; (1000fd74 <at_ble_event_get+0x328>)
1000fc02:	429c      	cmp	r4, r3
1000fc04:	d100      	bne.n	1000fc08 <at_ble_event_get+0x1bc>
1000fc06:	e1a9      	b.n	1000ff5c <at_ble_event_get+0x510>
1000fc08:	d808      	bhi.n	1000fc1c <at_ble_event_get+0x1d0>
1000fc0a:	4b5b      	ldr	r3, [pc, #364]	; (1000fd78 <at_ble_event_get+0x32c>)
1000fc0c:	429c      	cmp	r4, r3
1000fc0e:	d100      	bne.n	1000fc12 <at_ble_event_get+0x1c6>
1000fc10:	e196      	b.n	1000ff40 <at_ble_event_get+0x4f4>
1000fc12:	4b5a      	ldr	r3, [pc, #360]	; (1000fd7c <at_ble_event_get+0x330>)
1000fc14:	429c      	cmp	r4, r3
1000fc16:	d100      	bne.n	1000fc1a <at_ble_event_get+0x1ce>
1000fc18:	e199      	b.n	1000ff4e <at_ble_event_get+0x502>
1000fc1a:	e0ff      	b.n	1000fe1c <at_ble_event_get+0x3d0>
1000fc1c:	4b58      	ldr	r3, [pc, #352]	; (1000fd80 <at_ble_event_get+0x334>)
1000fc1e:	429c      	cmp	r4, r3
1000fc20:	d100      	bne.n	1000fc24 <at_ble_event_get+0x1d8>
1000fc22:	e1a2      	b.n	1000ff6a <at_ble_event_get+0x51e>
1000fc24:	4b57      	ldr	r3, [pc, #348]	; (1000fd84 <at_ble_event_get+0x338>)
1000fc26:	429c      	cmp	r4, r3
1000fc28:	d100      	bne.n	1000fc2c <at_ble_event_get+0x1e0>
1000fc2a:	e1d4      	b.n	1000ffd6 <at_ble_event_get+0x58a>
1000fc2c:	e0f6      	b.n	1000fe1c <at_ble_event_get+0x3d0>
1000fc2e:	4b56      	ldr	r3, [pc, #344]	; (1000fd88 <at_ble_event_get+0x33c>)
1000fc30:	429c      	cmp	r4, r3
1000fc32:	d100      	bne.n	1000fc36 <at_ble_event_get+0x1ea>
1000fc34:	e1c8      	b.n	1000ffc8 <at_ble_event_get+0x57c>
1000fc36:	d812      	bhi.n	1000fc5e <at_ble_event_get+0x212>
1000fc38:	4b54      	ldr	r3, [pc, #336]	; (1000fd8c <at_ble_event_get+0x340>)
1000fc3a:	429c      	cmp	r4, r3
1000fc3c:	d100      	bne.n	1000fc40 <at_ble_event_get+0x1f4>
1000fc3e:	e1d1      	b.n	1000ffe4 <at_ble_event_get+0x598>
1000fc40:	d804      	bhi.n	1000fc4c <at_ble_event_get+0x200>
1000fc42:	4b53      	ldr	r3, [pc, #332]	; (1000fd90 <at_ble_event_get+0x344>)
1000fc44:	429c      	cmp	r4, r3
1000fc46:	d100      	bne.n	1000fc4a <at_ble_event_get+0x1fe>
1000fc48:	e19b      	b.n	1000ff82 <at_ble_event_get+0x536>
1000fc4a:	e0e7      	b.n	1000fe1c <at_ble_event_get+0x3d0>
1000fc4c:	4b51      	ldr	r3, [pc, #324]	; (1000fd94 <at_ble_event_get+0x348>)
1000fc4e:	429c      	cmp	r4, r3
1000fc50:	d100      	bne.n	1000fc54 <at_ble_event_get+0x208>
1000fc52:	e1ad      	b.n	1000ffb0 <at_ble_event_get+0x564>
1000fc54:	4b50      	ldr	r3, [pc, #320]	; (1000fd98 <at_ble_event_get+0x34c>)
1000fc56:	429c      	cmp	r4, r3
1000fc58:	d100      	bne.n	1000fc5c <at_ble_event_get+0x210>
1000fc5a:	e1b0      	b.n	1000ffbe <at_ble_event_get+0x572>
1000fc5c:	e0de      	b.n	1000fe1c <at_ble_event_get+0x3d0>
1000fc5e:	4b4f      	ldr	r3, [pc, #316]	; (1000fd9c <at_ble_event_get+0x350>)
1000fc60:	429c      	cmp	r4, r3
1000fc62:	d100      	bne.n	1000fc66 <at_ble_event_get+0x21a>
1000fc64:	e0e0      	b.n	1000fe28 <at_ble_event_get+0x3dc>
1000fc66:	d809      	bhi.n	1000fc7c <at_ble_event_get+0x230>
1000fc68:	3b08      	subs	r3, #8
1000fc6a:	429c      	cmp	r4, r3
1000fc6c:	d100      	bne.n	1000fc70 <at_ble_event_get+0x224>
1000fc6e:	e0d7      	b.n	1000fe20 <at_ble_event_get+0x3d4>
1000fc70:	4b4b      	ldr	r3, [pc, #300]	; (1000fda0 <at_ble_event_get+0x354>)
1000fc72:	2639      	movs	r6, #57	; 0x39
1000fc74:	429c      	cmp	r4, r3
1000fc76:	d100      	bne.n	1000fc7a <at_ble_event_get+0x22e>
1000fc78:	e1dd      	b.n	10010036 <at_ble_event_get+0x5ea>
1000fc7a:	e0cf      	b.n	1000fe1c <at_ble_event_get+0x3d0>
1000fc7c:	23d1      	movs	r3, #209	; 0xd1
1000fc7e:	011b      	lsls	r3, r3, #4
1000fc80:	429c      	cmp	r4, r3
1000fc82:	d100      	bne.n	1000fc86 <at_ble_event_get+0x23a>
1000fc84:	e0d6      	b.n	1000fe34 <at_ble_event_get+0x3e8>
1000fc86:	4b47      	ldr	r3, [pc, #284]	; (1000fda4 <at_ble_event_get+0x358>)
1000fc88:	429c      	cmp	r4, r3
1000fc8a:	d100      	bne.n	1000fc8e <at_ble_event_get+0x242>
1000fc8c:	e0d8      	b.n	1000fe40 <at_ble_event_get+0x3f4>
1000fc8e:	e0c5      	b.n	1000fe1c <at_ble_event_get+0x3d0>
1000fc90:	4b45      	ldr	r3, [pc, #276]	; (1000fda8 <at_ble_event_get+0x35c>)
1000fc92:	429c      	cmp	r4, r3
1000fc94:	d100      	bne.n	1000fc98 <at_ble_event_get+0x24c>
1000fc96:	e117      	b.n	1000fec8 <at_ble_event_get+0x47c>
1000fc98:	d82e      	bhi.n	1000fcf8 <at_ble_event_get+0x2ac>
1000fc9a:	4b44      	ldr	r3, [pc, #272]	; (1000fdac <at_ble_event_get+0x360>)
1000fc9c:	429c      	cmp	r4, r3
1000fc9e:	d100      	bne.n	1000fca2 <at_ble_event_get+0x256>
1000fca0:	e13d      	b.n	1000ff1e <at_ble_event_get+0x4d2>
1000fca2:	d812      	bhi.n	1000fcca <at_ble_event_get+0x27e>
1000fca4:	4b42      	ldr	r3, [pc, #264]	; (1000fdb0 <at_ble_event_get+0x364>)
1000fca6:	429c      	cmp	r4, r3
1000fca8:	d100      	bne.n	1000fcac <at_ble_event_get+0x260>
1000fcaa:	e0e8      	b.n	1000fe7e <at_ble_event_get+0x432>
1000fcac:	d804      	bhi.n	1000fcb8 <at_ble_event_get+0x26c>
1000fcae:	3b03      	subs	r3, #3
1000fcb0:	429c      	cmp	r4, r3
1000fcb2:	d100      	bne.n	1000fcb6 <at_ble_event_get+0x26a>
1000fcb4:	e0d0      	b.n	1000fe58 <at_ble_event_get+0x40c>
1000fcb6:	e0b1      	b.n	1000fe1c <at_ble_event_get+0x3d0>
1000fcb8:	4b3e      	ldr	r3, [pc, #248]	; (1000fdb4 <at_ble_event_get+0x368>)
1000fcba:	429c      	cmp	r4, r3
1000fcbc:	d100      	bne.n	1000fcc0 <at_ble_event_get+0x274>
1000fcbe:	e0d0      	b.n	1000fe62 <at_ble_event_get+0x416>
1000fcc0:	4b3d      	ldr	r3, [pc, #244]	; (1000fdb8 <at_ble_event_get+0x36c>)
1000fcc2:	429c      	cmp	r4, r3
1000fcc4:	d100      	bne.n	1000fcc8 <at_ble_event_get+0x27c>
1000fcc6:	e0f9      	b.n	1000febc <at_ble_event_get+0x470>
1000fcc8:	e0a8      	b.n	1000fe1c <at_ble_event_get+0x3d0>
1000fcca:	4b3c      	ldr	r3, [pc, #240]	; (1000fdbc <at_ble_event_get+0x370>)
1000fccc:	429c      	cmp	r4, r3
1000fcce:	d100      	bne.n	1000fcd2 <at_ble_event_get+0x286>
1000fcd0:	e0db      	b.n	1000fe8a <at_ble_event_get+0x43e>
1000fcd2:	d808      	bhi.n	1000fce6 <at_ble_event_get+0x29a>
1000fcd4:	4b3a      	ldr	r3, [pc, #232]	; (1000fdc0 <at_ble_event_get+0x374>)
1000fcd6:	429c      	cmp	r4, r3
1000fcd8:	d100      	bne.n	1000fcdc <at_ble_event_get+0x290>
1000fcda:	e11b      	b.n	1000ff14 <at_ble_event_get+0x4c8>
1000fcdc:	4b39      	ldr	r3, [pc, #228]	; (1000fdc4 <at_ble_event_get+0x378>)
1000fcde:	429c      	cmp	r4, r3
1000fce0:	d100      	bne.n	1000fce4 <at_ble_event_get+0x298>
1000fce2:	e0d8      	b.n	1000fe96 <at_ble_event_get+0x44a>
1000fce4:	e09a      	b.n	1000fe1c <at_ble_event_get+0x3d0>
1000fce6:	4b38      	ldr	r3, [pc, #224]	; (1000fdc8 <at_ble_event_get+0x37c>)
1000fce8:	429c      	cmp	r4, r3
1000fcea:	d100      	bne.n	1000fcee <at_ble_event_get+0x2a2>
1000fcec:	e0d8      	b.n	1000fea0 <at_ble_event_get+0x454>
1000fcee:	4b37      	ldr	r3, [pc, #220]	; (1000fdcc <at_ble_event_get+0x380>)
1000fcf0:	429c      	cmp	r4, r3
1000fcf2:	d100      	bne.n	1000fcf6 <at_ble_event_get+0x2aa>
1000fcf4:	e0db      	b.n	1000feae <at_ble_event_get+0x462>
1000fcf6:	e091      	b.n	1000fe1c <at_ble_event_get+0x3d0>
1000fcf8:	4b35      	ldr	r3, [pc, #212]	; (1000fdd0 <at_ble_event_get+0x384>)
1000fcfa:	429c      	cmp	r4, r3
1000fcfc:	d100      	bne.n	1000fd00 <at_ble_event_get+0x2b4>
1000fcfe:	e0f7      	b.n	1000fef0 <at_ble_event_get+0x4a4>
1000fd00:	d876      	bhi.n	1000fdf0 <at_ble_event_get+0x3a4>
1000fd02:	4b34      	ldr	r3, [pc, #208]	; (1000fdd4 <at_ble_event_get+0x388>)
1000fd04:	429c      	cmp	r4, r3
1000fd06:	d100      	bne.n	1000fd0a <at_ble_event_get+0x2be>
1000fd08:	e0f8      	b.n	1000fefc <at_ble_event_get+0x4b0>
1000fd0a:	d869      	bhi.n	1000fde0 <at_ble_event_get+0x394>
1000fd0c:	4b32      	ldr	r3, [pc, #200]	; (1000fdd8 <at_ble_event_get+0x38c>)
1000fd0e:	429c      	cmp	r4, r3
1000fd10:	d100      	bne.n	1000fd14 <at_ble_event_get+0x2c8>
1000fd12:	e0e0      	b.n	1000fed6 <at_ble_event_get+0x48a>
1000fd14:	4b31      	ldr	r3, [pc, #196]	; (1000fddc <at_ble_event_get+0x390>)
1000fd16:	429c      	cmp	r4, r3
1000fd18:	d100      	bne.n	1000fd1c <at_ble_event_get+0x2d0>
1000fd1a:	e0a9      	b.n	1000fe70 <at_ble_event_get+0x424>
1000fd1c:	e07e      	b.n	1000fe1c <at_ble_event_get+0x3d0>
1000fd1e:	46c0      	nop			; (mov r8, r8)
1000fd20:	10011451 	.word	0x10011451
1000fd24:	10019c48 	.word	0x10019c48
1000fd28:	1000f0cd 	.word	0x1000f0cd
1000fd2c:	10019c4c 	.word	0x10019c4c
1000fd30:	10019c44 	.word	0x10019c44
1000fd34:	10019c34 	.word	0x10019c34
1000fd38:	1000f935 	.word	0x1000f935
1000fd3c:	10014e69 	.word	0x10014e69
1000fd40:	0000ffff 	.word	0x0000ffff
1000fd44:	0000fffe 	.word	0x0000fffe
1000fd48:	1000f345 	.word	0x1000f345
1000fd4c:	10011453 	.word	0x10011453
1000fd50:	0000201e 	.word	0x0000201e
1000fd54:	0000201d 	.word	0x0000201d
1000fd58:	00000c03 	.word	0x00000c03
1000fd5c:	0000201f 	.word	0x0000201f
1000fd60:	00000d1c 	.word	0x00000d1c
1000fd64:	00000c0c 	.word	0x00000c0c
1000fd68:	00000c02 	.word	0x00000c02
1000fd6c:	00000a02 	.word	0x00000a02
1000fd70:	00000a03 	.word	0x00000a03
1000fd74:	00000c06 	.word	0x00000c06
1000fd78:	00000c04 	.word	0x00000c04
1000fd7c:	00000c05 	.word	0x00000c05
1000fd80:	00000c07 	.word	0x00000c07
1000fd84:	00000c09 	.word	0x00000c09
1000fd88:	00000c17 	.word	0x00000c17
1000fd8c:	00000c12 	.word	0x00000c12
1000fd90:	00000c0d 	.word	0x00000c0d
1000fd94:	00000c13 	.word	0x00000c13
1000fd98:	00000c15 	.word	0x00000c15
1000fd9c:	00000d08 	.word	0x00000d08
1000fda0:	00000d01 	.word	0x00000d01
1000fda4:	00000d15 	.word	0x00000d15
1000fda8:	00000e1b 	.word	0x00000e1b
1000fdac:	00000e0f 	.word	0x00000e0f
1000fdb0:	00000e03 	.word	0x00000e03
1000fdb4:	00000e06 	.word	0x00000e06
1000fdb8:	00000e0a 	.word	0x00000e0a
1000fdbc:	00000e15 	.word	0x00000e15
1000fdc0:	00000e11 	.word	0x00000e11
1000fdc4:	00000e13 	.word	0x00000e13
1000fdc8:	00000e17 	.word	0x00000e17
1000fdcc:	00000e19 	.word	0x00000e19
1000fdd0:	00000e27 	.word	0x00000e27
1000fdd4:	00000e21 	.word	0x00000e21
1000fdd8:	00000e1c 	.word	0x00000e1c
1000fddc:	00000e1d 	.word	0x00000e1d
1000fde0:	4b9f      	ldr	r3, [pc, #636]	; (10010060 <at_ble_event_get+0x614>)
1000fde2:	429c      	cmp	r4, r3
1000fde4:	d07e      	beq.n	1000fee4 <at_ble_event_get+0x498>
1000fde6:	4b9f      	ldr	r3, [pc, #636]	; (10010064 <at_ble_event_get+0x618>)
1000fde8:	429c      	cmp	r4, r3
1000fdea:	d100      	bne.n	1000fdee <at_ble_event_get+0x3a2>
1000fdec:	e08c      	b.n	1000ff08 <at_ble_event_get+0x4bc>
1000fdee:	e015      	b.n	1000fe1c <at_ble_event_get+0x3d0>
1000fdf0:	4b9d      	ldr	r3, [pc, #628]	; (10010068 <at_ble_event_get+0x61c>)
1000fdf2:	429c      	cmp	r4, r3
1000fdf4:	d100      	bne.n	1000fdf8 <at_ble_event_get+0x3ac>
1000fdf6:	e10a      	b.n	1001000e <at_ble_event_get+0x5c2>
1000fdf8:	d808      	bhi.n	1000fe0c <at_ble_event_get+0x3c0>
1000fdfa:	4b9c      	ldr	r3, [pc, #624]	; (1001006c <at_ble_event_get+0x620>)
1000fdfc:	429c      	cmp	r4, r3
1000fdfe:	d100      	bne.n	1000fe02 <at_ble_event_get+0x3b6>
1000fe00:	e0f7      	b.n	1000fff2 <at_ble_event_get+0x5a6>
1000fe02:	4b9b      	ldr	r3, [pc, #620]	; (10010070 <at_ble_event_get+0x624>)
1000fe04:	429c      	cmp	r4, r3
1000fe06:	d100      	bne.n	1000fe0a <at_ble_event_get+0x3be>
1000fe08:	e0fa      	b.n	10010000 <at_ble_event_get+0x5b4>
1000fe0a:	e007      	b.n	1000fe1c <at_ble_event_get+0x3d0>
1000fe0c:	4b99      	ldr	r3, [pc, #612]	; (10010074 <at_ble_event_get+0x628>)
1000fe0e:	429c      	cmp	r4, r3
1000fe10:	d100      	bne.n	1000fe14 <at_ble_event_get+0x3c8>
1000fe12:	e103      	b.n	1001001c <at_ble_event_get+0x5d0>
1000fe14:	4b98      	ldr	r3, [pc, #608]	; (10010078 <at_ble_event_get+0x62c>)
1000fe16:	429c      	cmp	r4, r3
1000fe18:	d100      	bne.n	1000fe1c <at_ble_event_get+0x3d0>
1000fe1a:	e106      	b.n	1001002a <at_ble_event_get+0x5de>
1000fe1c:	2600      	movs	r6, #0
1000fe1e:	e10a      	b.n	10010036 <at_ble_event_get+0x5ea>
1000fe20:	1c30      	adds	r0, r6, #0
1000fe22:	1c29      	adds	r1, r5, #0
1000fe24:	4b95      	ldr	r3, [pc, #596]	; (1001007c <at_ble_event_get+0x630>)
1000fe26:	e014      	b.n	1000fe52 <at_ble_event_get+0x406>
1000fe28:	1c30      	adds	r0, r6, #0
1000fe2a:	1c29      	adds	r1, r5, #0
1000fe2c:	4b94      	ldr	r3, [pc, #592]	; (10010080 <at_ble_event_get+0x634>)
1000fe2e:	4798      	blx	r3
1000fe30:	2604      	movs	r6, #4
1000fe32:	e100      	b.n	10010036 <at_ble_event_get+0x5ea>
1000fe34:	1c30      	adds	r0, r6, #0
1000fe36:	1c29      	adds	r1, r5, #0
1000fe38:	4b92      	ldr	r3, [pc, #584]	; (10010084 <at_ble_event_get+0x638>)
1000fe3a:	4798      	blx	r3
1000fe3c:	2601      	movs	r6, #1
1000fe3e:	e0fa      	b.n	10010036 <at_ble_event_get+0x5ea>
1000fe40:	1c30      	adds	r0, r6, #0
1000fe42:	1c29      	adds	r1, r5, #0
1000fe44:	4b90      	ldr	r3, [pc, #576]	; (10010088 <at_ble_event_get+0x63c>)
1000fe46:	4798      	blx	r3
1000fe48:	260f      	movs	r6, #15
1000fe4a:	e0f4      	b.n	10010036 <at_ble_event_get+0x5ea>
1000fe4c:	1c30      	adds	r0, r6, #0
1000fe4e:	1c29      	adds	r1, r5, #0
1000fe50:	4b8e      	ldr	r3, [pc, #568]	; (1001008c <at_ble_event_get+0x640>)
1000fe52:	4798      	blx	r3
1000fe54:	1c06      	adds	r6, r0, #0
1000fe56:	e0ee      	b.n	10010036 <at_ble_event_get+0x5ea>
1000fe58:	9801      	ldr	r0, [sp, #4]
1000fe5a:	1c31      	adds	r1, r6, #0
1000fe5c:	1c2a      	adds	r2, r5, #0
1000fe5e:	4b8c      	ldr	r3, [pc, #560]	; (10010090 <at_ble_event_get+0x644>)
1000fe60:	e017      	b.n	1000fe92 <at_ble_event_get+0x446>
1000fe62:	1c31      	adds	r1, r6, #0
1000fe64:	9801      	ldr	r0, [sp, #4]
1000fe66:	1c2a      	adds	r2, r5, #0
1000fe68:	4b8a      	ldr	r3, [pc, #552]	; (10010094 <at_ble_event_get+0x648>)
1000fe6a:	4798      	blx	r3
1000fe6c:	2611      	movs	r6, #17
1000fe6e:	e0e2      	b.n	10010036 <at_ble_event_get+0x5ea>
1000fe70:	1c31      	adds	r1, r6, #0
1000fe72:	9801      	ldr	r0, [sp, #4]
1000fe74:	1c2a      	adds	r2, r5, #0
1000fe76:	4b88      	ldr	r3, [pc, #544]	; (10010098 <at_ble_event_get+0x64c>)
1000fe78:	4798      	blx	r3
1000fe7a:	2612      	movs	r6, #18
1000fe7c:	e0db      	b.n	10010036 <at_ble_event_get+0x5ea>
1000fe7e:	1c30      	adds	r0, r6, #0
1000fe80:	1c29      	adds	r1, r5, #0
1000fe82:	4b86      	ldr	r3, [pc, #536]	; (1001009c <at_ble_event_get+0x650>)
1000fe84:	4798      	blx	r3
1000fe86:	2606      	movs	r6, #6
1000fe88:	e0d5      	b.n	10010036 <at_ble_event_get+0x5ea>
1000fe8a:	1c31      	adds	r1, r6, #0
1000fe8c:	1c2a      	adds	r2, r5, #0
1000fe8e:	9801      	ldr	r0, [sp, #4]
1000fe90:	4b83      	ldr	r3, [pc, #524]	; (100100a0 <at_ble_event_get+0x654>)
1000fe92:	4798      	blx	r3
1000fe94:	e7de      	b.n	1000fe54 <at_ble_event_get+0x408>
1000fe96:	9801      	ldr	r0, [sp, #4]
1000fe98:	1c31      	adds	r1, r6, #0
1000fe9a:	1c2a      	adds	r2, r5, #0
1000fe9c:	4b81      	ldr	r3, [pc, #516]	; (100100a4 <at_ble_event_get+0x658>)
1000fe9e:	e7f8      	b.n	1000fe92 <at_ble_event_get+0x446>
1000fea0:	1c31      	adds	r1, r6, #0
1000fea2:	9801      	ldr	r0, [sp, #4]
1000fea4:	1c2a      	adds	r2, r5, #0
1000fea6:	4b80      	ldr	r3, [pc, #512]	; (100100a8 <at_ble_event_get+0x65c>)
1000fea8:	4798      	blx	r3
1000feaa:	260d      	movs	r6, #13
1000feac:	e0c3      	b.n	10010036 <at_ble_event_get+0x5ea>
1000feae:	1c31      	adds	r1, r6, #0
1000feb0:	9801      	ldr	r0, [sp, #4]
1000feb2:	1c2a      	adds	r2, r5, #0
1000feb4:	4b7d      	ldr	r3, [pc, #500]	; (100100ac <at_ble_event_get+0x660>)
1000feb6:	4798      	blx	r3
1000feb8:	260e      	movs	r6, #14
1000feba:	e0bc      	b.n	10010036 <at_ble_event_get+0x5ea>
1000febc:	9801      	ldr	r0, [sp, #4]
1000febe:	1c31      	adds	r1, r6, #0
1000fec0:	1c2a      	adds	r2, r5, #0
1000fec2:	4b7b      	ldr	r3, [pc, #492]	; (100100b0 <at_ble_event_get+0x664>)
1000fec4:	4798      	blx	r3
1000fec6:	e084      	b.n	1000ffd2 <at_ble_event_get+0x586>
1000fec8:	1c31      	adds	r1, r6, #0
1000feca:	9801      	ldr	r0, [sp, #4]
1000fecc:	1c2a      	adds	r2, r5, #0
1000fece:	4b79      	ldr	r3, [pc, #484]	; (100100b4 <at_ble_event_get+0x668>)
1000fed0:	4798      	blx	r3
1000fed2:	260b      	movs	r6, #11
1000fed4:	e0af      	b.n	10010036 <at_ble_event_get+0x5ea>
1000fed6:	1c31      	adds	r1, r6, #0
1000fed8:	9801      	ldr	r0, [sp, #4]
1000feda:	1c2a      	adds	r2, r5, #0
1000fedc:	4b76      	ldr	r3, [pc, #472]	; (100100b8 <at_ble_event_get+0x66c>)
1000fede:	4798      	blx	r3
1000fee0:	2610      	movs	r6, #16
1000fee2:	e0a8      	b.n	10010036 <at_ble_event_get+0x5ea>
1000fee4:	1c30      	adds	r0, r6, #0
1000fee6:	1c29      	adds	r1, r5, #0
1000fee8:	4b74      	ldr	r3, [pc, #464]	; (100100bc <at_ble_event_get+0x670>)
1000feea:	4798      	blx	r3
1000feec:	2628      	movs	r6, #40	; 0x28
1000feee:	e0a2      	b.n	10010036 <at_ble_event_get+0x5ea>
1000fef0:	1c30      	adds	r0, r6, #0
1000fef2:	1c29      	adds	r1, r5, #0
1000fef4:	4b72      	ldr	r3, [pc, #456]	; (100100c0 <at_ble_event_get+0x674>)
1000fef6:	4798      	blx	r3
1000fef8:	2629      	movs	r6, #41	; 0x29
1000fefa:	e09c      	b.n	10010036 <at_ble_event_get+0x5ea>
1000fefc:	1c30      	adds	r0, r6, #0
1000fefe:	1c29      	adds	r1, r5, #0
1000ff00:	4b70      	ldr	r3, [pc, #448]	; (100100c4 <at_ble_event_get+0x678>)
1000ff02:	4798      	blx	r3
1000ff04:	2627      	movs	r6, #39	; 0x27
1000ff06:	e096      	b.n	10010036 <at_ble_event_get+0x5ea>
1000ff08:	1c30      	adds	r0, r6, #0
1000ff0a:	1c29      	adds	r1, r5, #0
1000ff0c:	4b6e      	ldr	r3, [pc, #440]	; (100100c8 <at_ble_event_get+0x67c>)
1000ff0e:	4798      	blx	r3
1000ff10:	262a      	movs	r6, #42	; 0x2a
1000ff12:	e090      	b.n	10010036 <at_ble_event_get+0x5ea>
1000ff14:	9801      	ldr	r0, [sp, #4]
1000ff16:	1c31      	adds	r1, r6, #0
1000ff18:	1c2a      	adds	r2, r5, #0
1000ff1a:	4b6c      	ldr	r3, [pc, #432]	; (100100cc <at_ble_event_get+0x680>)
1000ff1c:	e7b9      	b.n	1000fe92 <at_ble_event_get+0x446>
1000ff1e:	9801      	ldr	r0, [sp, #4]
1000ff20:	1c31      	adds	r1, r6, #0
1000ff22:	1c2a      	adds	r2, r5, #0
1000ff24:	4b6a      	ldr	r3, [pc, #424]	; (100100d0 <at_ble_event_get+0x684>)
1000ff26:	e7b4      	b.n	1000fe92 <at_ble_event_get+0x446>
1000ff28:	1c30      	adds	r0, r6, #0
1000ff2a:	1c29      	adds	r1, r5, #0
1000ff2c:	4b69      	ldr	r3, [pc, #420]	; (100100d4 <at_ble_event_get+0x688>)
1000ff2e:	4798      	blx	r3
1000ff30:	262b      	movs	r6, #43	; 0x2b
1000ff32:	e080      	b.n	10010036 <at_ble_event_get+0x5ea>
1000ff34:	1c30      	adds	r0, r6, #0
1000ff36:	1c29      	adds	r1, r5, #0
1000ff38:	4b67      	ldr	r3, [pc, #412]	; (100100d8 <at_ble_event_get+0x68c>)
1000ff3a:	4798      	blx	r3
1000ff3c:	262c      	movs	r6, #44	; 0x2c
1000ff3e:	e07a      	b.n	10010036 <at_ble_event_get+0x5ea>
1000ff40:	1c31      	adds	r1, r6, #0
1000ff42:	9801      	ldr	r0, [sp, #4]
1000ff44:	1c2a      	adds	r2, r5, #0
1000ff46:	4b65      	ldr	r3, [pc, #404]	; (100100dc <at_ble_event_get+0x690>)
1000ff48:	4798      	blx	r3
1000ff4a:	2613      	movs	r6, #19
1000ff4c:	e073      	b.n	10010036 <at_ble_event_get+0x5ea>
1000ff4e:	1c31      	adds	r1, r6, #0
1000ff50:	9801      	ldr	r0, [sp, #4]
1000ff52:	1c2a      	adds	r2, r5, #0
1000ff54:	4b62      	ldr	r3, [pc, #392]	; (100100e0 <at_ble_event_get+0x694>)
1000ff56:	4798      	blx	r3
1000ff58:	2614      	movs	r6, #20
1000ff5a:	e06c      	b.n	10010036 <at_ble_event_get+0x5ea>
1000ff5c:	1c31      	adds	r1, r6, #0
1000ff5e:	9801      	ldr	r0, [sp, #4]
1000ff60:	1c2a      	adds	r2, r5, #0
1000ff62:	4b60      	ldr	r3, [pc, #384]	; (100100e4 <at_ble_event_get+0x698>)
1000ff64:	4798      	blx	r3
1000ff66:	2615      	movs	r6, #21
1000ff68:	e065      	b.n	10010036 <at_ble_event_get+0x5ea>
1000ff6a:	1c31      	adds	r1, r6, #0
1000ff6c:	9801      	ldr	r0, [sp, #4]
1000ff6e:	1c2a      	adds	r2, r5, #0
1000ff70:	4b5d      	ldr	r3, [pc, #372]	; (100100e8 <at_ble_event_get+0x69c>)
1000ff72:	4798      	blx	r3
1000ff74:	2616      	movs	r6, #22
1000ff76:	e05e      	b.n	10010036 <at_ble_event_get+0x5ea>
1000ff78:	9801      	ldr	r0, [sp, #4]
1000ff7a:	1c31      	adds	r1, r6, #0
1000ff7c:	1c2a      	adds	r2, r5, #0
1000ff7e:	4b5b      	ldr	r3, [pc, #364]	; (100100ec <at_ble_event_get+0x6a0>)
1000ff80:	e787      	b.n	1000fe92 <at_ble_event_get+0x446>
1000ff82:	1c31      	adds	r1, r6, #0
1000ff84:	9801      	ldr	r0, [sp, #4]
1000ff86:	1c2a      	adds	r2, r5, #0
1000ff88:	4b58      	ldr	r3, [pc, #352]	; (100100ec <at_ble_event_get+0x6a0>)
1000ff8a:	4798      	blx	r3
1000ff8c:	88a9      	ldrh	r1, [r5, #4]
1000ff8e:	1c06      	adds	r6, r0, #0
1000ff90:	4b57      	ldr	r3, [pc, #348]	; (100100f0 <at_ble_event_get+0x6a4>)
1000ff92:	8828      	ldrh	r0, [r5, #0]
1000ff94:	4798      	blx	r3
1000ff96:	e04e      	b.n	10010036 <at_ble_event_get+0x5ea>
1000ff98:	1c31      	adds	r1, r6, #0
1000ff9a:	9801      	ldr	r0, [sp, #4]
1000ff9c:	1c2a      	adds	r2, r5, #0
1000ff9e:	4b55      	ldr	r3, [pc, #340]	; (100100f4 <at_ble_event_get+0x6a8>)
1000ffa0:	4798      	blx	r3
1000ffa2:	2623      	movs	r6, #35	; 0x23
1000ffa4:	e047      	b.n	10010036 <at_ble_event_get+0x5ea>
1000ffa6:	9801      	ldr	r0, [sp, #4]
1000ffa8:	1c31      	adds	r1, r6, #0
1000ffaa:	1c2a      	adds	r2, r5, #0
1000ffac:	4b52      	ldr	r3, [pc, #328]	; (100100f8 <at_ble_event_get+0x6ac>)
1000ffae:	e770      	b.n	1000fe92 <at_ble_event_get+0x446>
1000ffb0:	9b01      	ldr	r3, [sp, #4]
1000ffb2:	1c30      	adds	r0, r6, #0
1000ffb4:	0a1f      	lsrs	r7, r3, #8
1000ffb6:	802f      	strh	r7, [r5, #0]
1000ffb8:	1c29      	adds	r1, r5, #0
1000ffba:	4b50      	ldr	r3, [pc, #320]	; (100100fc <at_ble_event_get+0x6b0>)
1000ffbc:	e749      	b.n	1000fe52 <at_ble_event_get+0x406>
1000ffbe:	9801      	ldr	r0, [sp, #4]
1000ffc0:	1c31      	adds	r1, r6, #0
1000ffc2:	1c2a      	adds	r2, r5, #0
1000ffc4:	4b4e      	ldr	r3, [pc, #312]	; (10010100 <at_ble_event_get+0x6b4>)
1000ffc6:	e764      	b.n	1000fe92 <at_ble_event_get+0x446>
1000ffc8:	1c30      	adds	r0, r6, #0
1000ffca:	1c29      	adds	r1, r5, #0
1000ffcc:	9a01      	ldr	r2, [sp, #4]
1000ffce:	4b4d      	ldr	r3, [pc, #308]	; (10010104 <at_ble_event_get+0x6b8>)
1000ffd0:	4798      	blx	r3
1000ffd2:	263b      	movs	r6, #59	; 0x3b
1000ffd4:	e02f      	b.n	10010036 <at_ble_event_get+0x5ea>
1000ffd6:	1c31      	adds	r1, r6, #0
1000ffd8:	9801      	ldr	r0, [sp, #4]
1000ffda:	1c2a      	adds	r2, r5, #0
1000ffdc:	4b4a      	ldr	r3, [pc, #296]	; (10010108 <at_ble_event_get+0x6bc>)
1000ffde:	4798      	blx	r3
1000ffe0:	2618      	movs	r6, #24
1000ffe2:	e028      	b.n	10010036 <at_ble_event_get+0x5ea>
1000ffe4:	1c31      	adds	r1, r6, #0
1000ffe6:	9801      	ldr	r0, [sp, #4]
1000ffe8:	1c2a      	adds	r2, r5, #0
1000ffea:	4b48      	ldr	r3, [pc, #288]	; (1001010c <at_ble_event_get+0x6c0>)
1000ffec:	4798      	blx	r3
1000ffee:	2620      	movs	r6, #32
1000fff0:	e021      	b.n	10010036 <at_ble_event_get+0x5ea>
1000fff2:	1c31      	adds	r1, r6, #0
1000fff4:	9801      	ldr	r0, [sp, #4]
1000fff6:	1c2a      	adds	r2, r5, #0
1000fff8:	4b45      	ldr	r3, [pc, #276]	; (10010110 <at_ble_event_get+0x6c4>)
1000fffa:	4798      	blx	r3
1000fffc:	2633      	movs	r6, #51	; 0x33
1000fffe:	e01a      	b.n	10010036 <at_ble_event_get+0x5ea>
10010000:	1c31      	adds	r1, r6, #0
10010002:	9801      	ldr	r0, [sp, #4]
10010004:	1c2a      	adds	r2, r5, #0
10010006:	4b43      	ldr	r3, [pc, #268]	; (10010114 <at_ble_event_get+0x6c8>)
10010008:	4798      	blx	r3
1001000a:	2630      	movs	r6, #48	; 0x30
1001000c:	e013      	b.n	10010036 <at_ble_event_get+0x5ea>
1001000e:	1c31      	adds	r1, r6, #0
10010010:	9801      	ldr	r0, [sp, #4]
10010012:	1c2a      	adds	r2, r5, #0
10010014:	4b40      	ldr	r3, [pc, #256]	; (10010118 <at_ble_event_get+0x6cc>)
10010016:	4798      	blx	r3
10010018:	2634      	movs	r6, #52	; 0x34
1001001a:	e00c      	b.n	10010036 <at_ble_event_get+0x5ea>
1001001c:	1c31      	adds	r1, r6, #0
1001001e:	9801      	ldr	r0, [sp, #4]
10010020:	1c2a      	adds	r2, r5, #0
10010022:	4b3e      	ldr	r3, [pc, #248]	; (1001011c <at_ble_event_get+0x6d0>)
10010024:	4798      	blx	r3
10010026:	2635      	movs	r6, #53	; 0x35
10010028:	e005      	b.n	10010036 <at_ble_event_get+0x5ea>
1001002a:	1c31      	adds	r1, r6, #0
1001002c:	9801      	ldr	r0, [sp, #4]
1001002e:	1c2a      	adds	r2, r5, #0
10010030:	4b3b      	ldr	r3, [pc, #236]	; (10010120 <at_ble_event_get+0x6d4>)
10010032:	4798      	blx	r3
10010034:	2632      	movs	r6, #50	; 0x32
10010036:	9b03      	ldr	r3, [sp, #12]
10010038:	701e      	strb	r6, [r3, #0]
1001003a:	2300      	movs	r3, #0
1001003c:	9302      	str	r3, [sp, #8]
1001003e:	e57a      	b.n	1000fb36 <at_ble_event_get+0xea>
10010040:	23d0      	movs	r3, #208	; 0xd0
10010042:	e7fb      	b.n	1001003c <at_ble_event_get+0x5f0>
10010044:	9b01      	ldr	r3, [sp, #4]
10010046:	9e02      	ldr	r6, [sp, #8]
10010048:	2bbb      	cmp	r3, #187	; 0xbb
1001004a:	d000      	beq.n	1001004e <at_ble_event_get+0x602>
1001004c:	e6e6      	b.n	1000fe1c <at_ble_event_get+0x3d0>
1001004e:	e7f2      	b.n	10010036 <at_ble_event_get+0x5ea>
10010050:	9b02      	ldr	r3, [sp, #8]
10010052:	2b00      	cmp	r3, #0
10010054:	d000      	beq.n	10010058 <at_ble_event_get+0x60c>
10010056:	e56e      	b.n	1000fb36 <at_ble_event_get+0xea>
10010058:	e6e0      	b.n	1000fe1c <at_ble_event_get+0x3d0>
1001005a:	9802      	ldr	r0, [sp, #8]
1001005c:	b007      	add	sp, #28
1001005e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10010060:	00000e22 	.word	0x00000e22
10010064:	00000e25 	.word	0x00000e25
10010068:	00001b05 	.word	0x00001b05
1001006c:	00001b01 	.word	0x00001b01
10010070:	00001b03 	.word	0x00001b03
10010074:	00001b06 	.word	0x00001b06
10010078:	00001b08 	.word	0x00001b08
1001007c:	1001227d 	.word	0x1001227d
10010080:	10012261 	.word	0x10012261
10010084:	100124fd 	.word	0x100124fd
10010088:	100125ed 	.word	0x100125ed
1001008c:	10012611 	.word	0x10012611
10010090:	100115f5 	.word	0x100115f5
10010094:	10011e75 	.word	0x10011e75
10010098:	10011ef1 	.word	0x10011ef1
1001009c:	100118ad 	.word	0x100118ad
100100a0:	10011949 	.word	0x10011949
100100a4:	10011a21 	.word	0x10011a21
100100a8:	10011ca9 	.word	0x10011ca9
100100ac:	10011d49 	.word	0x10011d49
100100b0:	10011e01 	.word	0x10011e01
100100b4:	10011e29 	.word	0x10011e29
100100b8:	10011e3f 	.word	0x10011e3f
100100bc:	10011f09 	.word	0x10011f09
100100c0:	10011f37 	.word	0x10011f37
100100c4:	10011f4d 	.word	0x10011f4d
100100c8:	10011f77 	.word	0x10011f77
100100cc:	10011da5 	.word	0x10011da5
100100d0:	10011dcf 	.word	0x10011dcf
100100d4:	10011035 	.word	0x10011035
100100d8:	10011061 	.word	0x10011061
100100dc:	10012831 	.word	0x10012831
100100e0:	1001286d 	.word	0x1001286d
100100e4:	100128b5 	.word	0x100128b5
100100e8:	100128f9 	.word	0x100128f9
100100ec:	1001292d 	.word	0x1001292d
100100f0:	100127f1 	.word	0x100127f1
100100f4:	100129f9 	.word	0x100129f9
100100f8:	10012981 	.word	0x10012981
100100fc:	10010f19 	.word	0x10010f19
10010100:	10010f85 	.word	0x10010f85
10010104:	10010f49 	.word	0x10010f49
10010108:	10012a09 	.word	0x10012a09
1001010c:	10012a49 	.word	0x10012a49
10010110:	10012d11 	.word	0x10012d11
10010114:	10012d1b 	.word	0x10012d1b
10010118:	10012d21 	.word	0x10012d21
1001011c:	10012d27 	.word	0x10012d27
10010120:	10012d33 	.word	0x10012d33

10010124 <internal_event_flush>:
10010124:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10010126:	490e      	ldr	r1, [pc, #56]	; (10010160 <internal_event_flush+0x3c>)
10010128:	2400      	movs	r4, #0
1001012a:	680b      	ldr	r3, [r1, #0]
1001012c:	1c0f      	adds	r7, r1, #0
1001012e:	1c1e      	adds	r6, r3, #0
10010130:	4a0c      	ldr	r2, [pc, #48]	; (10010164 <internal_event_flush+0x40>)
10010132:	6815      	ldr	r5, [r2, #0]
10010134:	9201      	str	r2, [sp, #4]
10010136:	2b00      	cmp	r3, #0
10010138:	d00e      	beq.n	10010158 <internal_event_flush+0x34>
1001013a:	889a      	ldrh	r2, [r3, #4]
1001013c:	6819      	ldr	r1, [r3, #0]
1001013e:	4282      	cmp	r2, r0
10010140:	d107      	bne.n	10010152 <internal_event_flush+0x2e>
10010142:	2c00      	cmp	r4, #0
10010144:	d001      	beq.n	1001014a <internal_event_flush+0x26>
10010146:	6021      	str	r1, [r4, #0]
10010148:	e000      	b.n	1001014c <internal_event_flush+0x28>
1001014a:	1c0e      	adds	r6, r1, #0
1001014c:	601d      	str	r5, [r3, #0]
1001014e:	1c1d      	adds	r5, r3, #0
10010150:	1c23      	adds	r3, r4, #0
10010152:	1c1c      	adds	r4, r3, #0
10010154:	1c0b      	adds	r3, r1, #0
10010156:	e7ee      	b.n	10010136 <internal_event_flush+0x12>
10010158:	9b01      	ldr	r3, [sp, #4]
1001015a:	603e      	str	r6, [r7, #0]
1001015c:	601d      	str	r5, [r3, #0]
1001015e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
10010160:	10019c48 	.word	0x10019c48
10010164:	10019c4c 	.word	0x10019c4c

10010168 <internal_conn_flush>:
10010168:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1001016a:	4a12      	ldr	r2, [pc, #72]	; (100101b4 <internal_conn_flush+0x4c>)
1001016c:	9000      	str	r0, [sp, #0]
1001016e:	6813      	ldr	r3, [r2, #0]
10010170:	4811      	ldr	r0, [pc, #68]	; (100101b8 <internal_conn_flush+0x50>)
10010172:	1c1f      	adds	r7, r3, #0
10010174:	2100      	movs	r1, #0
10010176:	4684      	mov	ip, r0
10010178:	6804      	ldr	r4, [r0, #0]
1001017a:	9201      	str	r2, [sp, #4]
1001017c:	2b00      	cmp	r3, #0
1001017e:	d014      	beq.n	100101aa <internal_conn_flush+0x42>
10010180:	88d8      	ldrh	r0, [r3, #6]
10010182:	9a00      	ldr	r2, [sp, #0]
10010184:	681d      	ldr	r5, [r3, #0]
10010186:	0a06      	lsrs	r6, r0, #8
10010188:	4296      	cmp	r6, r2
1001018a:	d10b      	bne.n	100101a4 <internal_conn_flush+0x3c>
1001018c:	26fd      	movs	r6, #253	; 0xfd
1001018e:	4006      	ands	r6, r0
10010190:	2e0c      	cmp	r6, #12
10010192:	d107      	bne.n	100101a4 <internal_conn_flush+0x3c>
10010194:	2900      	cmp	r1, #0
10010196:	d001      	beq.n	1001019c <internal_conn_flush+0x34>
10010198:	600d      	str	r5, [r1, #0]
1001019a:	e000      	b.n	1001019e <internal_conn_flush+0x36>
1001019c:	1c2f      	adds	r7, r5, #0
1001019e:	601c      	str	r4, [r3, #0]
100101a0:	1c1c      	adds	r4, r3, #0
100101a2:	1c0b      	adds	r3, r1, #0
100101a4:	1c19      	adds	r1, r3, #0
100101a6:	1c2b      	adds	r3, r5, #0
100101a8:	e7e8      	b.n	1001017c <internal_conn_flush+0x14>
100101aa:	9b01      	ldr	r3, [sp, #4]
100101ac:	601f      	str	r7, [r3, #0]
100101ae:	4663      	mov	r3, ip
100101b0:	601c      	str	r4, [r3, #0]
100101b2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
100101b4:	10019c48 	.word	0x10019c48
100101b8:	10019c4c 	.word	0x10019c4c

100101bc <at_ble_device_name_set>:
100101bc:	b530      	push	{r4, r5, lr}
100101be:	23cf      	movs	r3, #207	; 0xcf
100101c0:	2800      	cmp	r0, #0
100101c2:	d010      	beq.n	100101e6 <at_ble_device_name_set+0x2a>
100101c4:	1e4a      	subs	r2, r1, #1
100101c6:	2a1f      	cmp	r2, #31
100101c8:	d80d      	bhi.n	100101e6 <at_ble_device_name_set+0x2a>
100101ca:	4a08      	ldr	r2, [pc, #32]	; (100101ec <at_ble_device_name_set+0x30>)
100101cc:	1c13      	adds	r3, r2, #0
100101ce:	33aa      	adds	r3, #170	; 0xaa
100101d0:	8019      	strh	r1, [r3, #0]
100101d2:	2300      	movs	r3, #0
100101d4:	1c1c      	adds	r4, r3, #0
100101d6:	5cc5      	ldrb	r5, [r0, r3]
100101d8:	34ac      	adds	r4, #172	; 0xac
100101da:	3301      	adds	r3, #1
100101dc:	5515      	strb	r5, [r2, r4]
100101de:	b2dc      	uxtb	r4, r3
100101e0:	428c      	cmp	r4, r1
100101e2:	d3f7      	bcc.n	100101d4 <at_ble_device_name_set+0x18>
100101e4:	2300      	movs	r3, #0
100101e6:	1c18      	adds	r0, r3, #0
100101e8:	bd30      	pop	{r4, r5, pc}
100101ea:	46c0      	nop			; (mov r8, r8)
100101ec:	1001abee 	.word	0x1001abee

100101f0 <at_ble_addr_get>:
100101f0:	b510      	push	{r4, lr}
100101f2:	1c04      	adds	r4, r0, #0
100101f4:	20cf      	movs	r0, #207	; 0xcf
100101f6:	2c00      	cmp	r4, #0
100101f8:	d006      	beq.n	10010208 <at_ble_addr_get+0x18>
100101fa:	4b04      	ldr	r3, [pc, #16]	; (1001020c <at_ble_addr_get+0x1c>)
100101fc:	38ce      	subs	r0, #206	; 0xce
100101fe:	1c21      	adds	r1, r4, #0
10010200:	4798      	blx	r3
10010202:	4b03      	ldr	r3, [pc, #12]	; (10010210 <at_ble_addr_get+0x20>)
10010204:	791b      	ldrb	r3, [r3, #4]
10010206:	7023      	strb	r3, [r4, #0]
10010208:	bd10      	pop	{r4, pc}
1001020a:	46c0      	nop			; (mov r8, r8)
1001020c:	10012111 	.word	0x10012111
10010210:	1001abee 	.word	0x1001abee

10010214 <at_ble_set_dev_config>:
10010214:	b5f0      	push	{r4, r5, r6, r7, lr}
10010216:	7906      	ldrb	r6, [r0, #4]
10010218:	b089      	sub	sp, #36	; 0x24
1001021a:	25cf      	movs	r5, #207	; 0xcf
1001021c:	2e03      	cmp	r6, #3
1001021e:	d838      	bhi.n	10010292 <at_ble_set_dev_config+0x7e>
10010220:	7803      	ldrb	r3, [r0, #0]
10010222:	3511      	adds	r5, #17
10010224:	2b0f      	cmp	r3, #15
10010226:	d834      	bhi.n	10010292 <at_ble_set_dev_config+0x7e>
10010228:	2380      	movs	r3, #128	; 0x80
1001022a:	8c87      	ldrh	r7, [r0, #36]	; 0x24
1001022c:	3d11      	subs	r5, #17
1001022e:	009b      	lsls	r3, r3, #2
10010230:	429f      	cmp	r7, r3
10010232:	d82e      	bhi.n	10010292 <at_ble_set_dev_config+0x7e>
10010234:	7fc5      	ldrb	r5, [r0, #31]
10010236:	7f83      	ldrb	r3, [r0, #30]
10010238:	01ad      	lsls	r5, r5, #6
1001023a:	015b      	lsls	r3, r3, #5
1001023c:	431d      	orrs	r5, r3
1001023e:	7ec3      	ldrb	r3, [r0, #27]
10010240:	431d      	orrs	r5, r3
10010242:	7f43      	ldrb	r3, [r0, #29]
10010244:	011b      	lsls	r3, r3, #4
10010246:	431d      	orrs	r5, r3
10010248:	7f03      	ldrb	r3, [r0, #28]
1001024a:	009b      	lsls	r3, r3, #2
1001024c:	431d      	orrs	r5, r3
1001024e:	4b12      	ldr	r3, [pc, #72]	; (10010298 <at_ble_set_dev_config+0x84>)
10010250:	b2ed      	uxtb	r5, r5
10010252:	711e      	strb	r6, [r3, #4]
10010254:	7903      	ldrb	r3, [r0, #4]
10010256:	3b02      	subs	r3, #2
10010258:	2b01      	cmp	r3, #1
1001025a:	d801      	bhi.n	10010260 <at_ble_set_dev_config+0x4c>
1001025c:	2302      	movs	r3, #2
1001025e:	7103      	strb	r3, [r0, #4]
10010260:	1c04      	adds	r4, r0, #0
10010262:	1c23      	adds	r3, r4, #0
10010264:	330b      	adds	r3, #11
10010266:	8861      	ldrh	r1, [r4, #2]
10010268:	9307      	str	r3, [sp, #28]
1001026a:	7923      	ldrb	r3, [r4, #4]
1001026c:	7800      	ldrb	r0, [r0, #0]
1001026e:	9300      	str	r3, [sp, #0]
10010270:	9501      	str	r5, [sp, #4]
10010272:	8c25      	ldrh	r5, [r4, #32]
10010274:	1d62      	adds	r2, r4, #5
10010276:	9502      	str	r5, [sp, #8]
10010278:	8c65      	ldrh	r5, [r4, #34]	; 0x22
1001027a:	9b07      	ldr	r3, [sp, #28]
1001027c:	9503      	str	r5, [sp, #12]
1001027e:	9704      	str	r7, [sp, #16]
10010280:	4d06      	ldr	r5, [pc, #24]	; (1001029c <at_ble_set_dev_config+0x88>)
10010282:	47a8      	blx	r5
10010284:	7126      	strb	r6, [r4, #4]
10010286:	1c05      	adds	r5, r0, #0
10010288:	1c21      	adds	r1, r4, #0
1001028a:	4803      	ldr	r0, [pc, #12]	; (10010298 <at_ble_set_dev_config+0x84>)
1001028c:	2226      	movs	r2, #38	; 0x26
1001028e:	4b04      	ldr	r3, [pc, #16]	; (100102a0 <at_ble_set_dev_config+0x8c>)
10010290:	4798      	blx	r3
10010292:	1c28      	adds	r0, r5, #0
10010294:	b009      	add	sp, #36	; 0x24
10010296:	bdf0      	pop	{r4, r5, r6, r7, pc}
10010298:	1001abee 	.word	0x1001abee
1001029c:	10012009 	.word	0x10012009
100102a0:	10014e57 	.word	0x10014e57

100102a4 <at_ble_init>:
100102a4:	b5f0      	push	{r4, r5, r6, r7, lr}
100102a6:	b087      	sub	sp, #28
100102a8:	af03      	add	r7, sp, #12
100102aa:	4954      	ldr	r1, [pc, #336]	; (100103fc <at_ble_init+0x158>)
100102ac:	220b      	movs	r2, #11
100102ae:	4b54      	ldr	r3, [pc, #336]	; (10010400 <at_ble_init+0x15c>)
100102b0:	1c04      	adds	r4, r0, #0
100102b2:	1c38      	adds	r0, r7, #0
100102b4:	4798      	blx	r3
100102b6:	2205      	movs	r2, #5
100102b8:	4b52      	ldr	r3, [pc, #328]	; (10010404 <at_ble_init+0x160>)
100102ba:	2640      	movs	r6, #64	; 0x40
100102bc:	801a      	strh	r2, [r3, #0]
100102be:	2300      	movs	r3, #0
100102c0:	4a51      	ldr	r2, [pc, #324]	; (10010408 <at_ble_init+0x164>)
100102c2:	6013      	str	r3, [r2, #0]
100102c4:	4a51      	ldr	r2, [pc, #324]	; (1001040c <at_ble_init+0x168>)
100102c6:	7013      	strb	r3, [r2, #0]
100102c8:	4a51      	ldr	r2, [pc, #324]	; (10010410 <at_ble_init+0x16c>)
100102ca:	7013      	strb	r3, [r2, #0]
100102cc:	4b51      	ldr	r3, [pc, #324]	; (10010414 <at_ble_init+0x170>)
100102ce:	4798      	blx	r3
100102d0:	4b51      	ldr	r3, [pc, #324]	; (10010418 <at_ble_init+0x174>)
100102d2:	4798      	blx	r3
100102d4:	4b51      	ldr	r3, [pc, #324]	; (1001041c <at_ble_init+0x178>)
100102d6:	4798      	blx	r3
100102d8:	4b51      	ldr	r3, [pc, #324]	; (10010420 <at_ble_init+0x17c>)
100102da:	4798      	blx	r3
100102dc:	2c00      	cmp	r4, #0
100102de:	d100      	bne.n	100102e2 <at_ble_init+0x3e>
100102e0:	e089      	b.n	100103f6 <at_ble_init+0x152>
100102e2:	68a3      	ldr	r3, [r4, #8]
100102e4:	2b00      	cmp	r3, #0
100102e6:	d100      	bne.n	100102ea <at_ble_init+0x46>
100102e8:	e085      	b.n	100103f6 <at_ble_init+0x152>
100102ea:	6923      	ldr	r3, [r4, #16]
100102ec:	2b00      	cmp	r3, #0
100102ee:	d100      	bne.n	100102f2 <at_ble_init+0x4e>
100102f0:	e081      	b.n	100103f6 <at_ble_init+0x152>
100102f2:	6820      	ldr	r0, [r4, #0]
100102f4:	2800      	cmp	r0, #0
100102f6:	d102      	bne.n	100102fe <at_ble_init+0x5a>
100102f8:	6863      	ldr	r3, [r4, #4]
100102fa:	2b00      	cmp	r3, #0
100102fc:	d17b      	bne.n	100103f6 <at_ble_init+0x152>
100102fe:	4b49      	ldr	r3, [pc, #292]	; (10010424 <at_ble_init+0x180>)
10010300:	6861      	ldr	r1, [r4, #4]
10010302:	4798      	blx	r3
10010304:	4b48      	ldr	r3, [pc, #288]	; (10010428 <at_ble_init+0x184>)
10010306:	4798      	blx	r3
10010308:	2801      	cmp	r0, #1
1001030a:	d901      	bls.n	10010310 <at_ble_init+0x6c>
1001030c:	26e2      	movs	r6, #226	; 0xe2
1001030e:	e072      	b.n	100103f6 <at_ble_init+0x152>
10010310:	4846      	ldr	r0, [pc, #280]	; (1001042c <at_ble_init+0x188>)
10010312:	4b47      	ldr	r3, [pc, #284]	; (10010430 <at_ble_init+0x18c>)
10010314:	4798      	blx	r3
10010316:	2800      	cmp	r0, #0
10010318:	d1f8      	bne.n	1001030c <at_ble_init+0x68>
1001031a:	1c20      	adds	r0, r4, #0
1001031c:	4b45      	ldr	r3, [pc, #276]	; (10010434 <at_ble_init+0x190>)
1001031e:	4798      	blx	r3
10010320:	68e0      	ldr	r0, [r4, #12]
10010322:	68a1      	ldr	r1, [r4, #8]
10010324:	4b44      	ldr	r3, [pc, #272]	; (10010438 <at_ble_init+0x194>)
10010326:	4798      	blx	r3
10010328:	466b      	mov	r3, sp
1001032a:	2201      	movs	r2, #1
1001032c:	1cdc      	adds	r4, r3, #3
1001032e:	1c20      	adds	r0, r4, #0
10010330:	a901      	add	r1, sp, #4
10010332:	4252      	negs	r2, r2
10010334:	4b41      	ldr	r3, [pc, #260]	; (1001043c <at_ble_init+0x198>)
10010336:	4798      	blx	r3
10010338:	2800      	cmp	r0, #0
1001033a:	d102      	bne.n	10010342 <at_ble_init+0x9e>
1001033c:	7823      	ldrb	r3, [r4, #0]
1001033e:	2b39      	cmp	r3, #57	; 0x39
10010340:	d1f2      	bne.n	10010328 <at_ble_init+0x84>
10010342:	4b3f      	ldr	r3, [pc, #252]	; (10010440 <at_ble_init+0x19c>)
10010344:	4798      	blx	r3
10010346:	1e06      	subs	r6, r0, #0
10010348:	d155      	bne.n	100103f6 <at_ble_init+0x152>
1001034a:	1c03      	adds	r3, r0, #0
1001034c:	2101      	movs	r1, #1
1001034e:	4a3d      	ldr	r2, [pc, #244]	; (10010444 <at_ble_init+0x1a0>)
10010350:	4249      	negs	r1, r1
10010352:	189a      	adds	r2, r3, r2
10010354:	3312      	adds	r3, #18
10010356:	8151      	strh	r1, [r2, #10]
10010358:	2b90      	cmp	r3, #144	; 0x90
1001035a:	d1f7      	bne.n	1001034c <at_ble_init+0xa8>
1001035c:	4c3a      	ldr	r4, [pc, #232]	; (10010448 <at_ble_init+0x1a4>)
1001035e:	3b81      	subs	r3, #129	; 0x81
10010360:	7023      	strb	r3, [r4, #0]
10010362:	4b3a      	ldr	r3, [pc, #232]	; (1001044c <at_ble_init+0x1a8>)
10010364:	4a3a      	ldr	r2, [pc, #232]	; (10010450 <at_ble_init+0x1ac>)
10010366:	8063      	strh	r3, [r4, #2]
10010368:	2300      	movs	r3, #0
1001036a:	7123      	strb	r3, [r4, #4]
1001036c:	3301      	adds	r3, #1
1001036e:	1e58      	subs	r0, r3, #1
10010370:	0119      	lsls	r1, r3, #4
10010372:	4301      	orrs	r1, r0
10010374:	3302      	adds	r3, #2
10010376:	7011      	strb	r1, [r2, #0]
10010378:	3201      	adds	r2, #1
1001037a:	2b21      	cmp	r3, #33	; 0x21
1001037c:	d1f7      	bne.n	1001036e <at_ble_init+0xca>
1001037e:	33e0      	adds	r3, #224	; 0xe0
10010380:	33ff      	adds	r3, #255	; 0xff
10010382:	84a3      	strh	r3, [r4, #36]	; 0x24
10010384:	1c23      	adds	r3, r4, #0
10010386:	2500      	movs	r5, #0
10010388:	3373      	adds	r3, #115	; 0x73
1001038a:	701d      	strb	r5, [r3, #0]
1001038c:	1c23      	adds	r3, r4, #0
1001038e:	3372      	adds	r3, #114	; 0x72
10010390:	701d      	strb	r5, [r3, #0]
10010392:	1c23      	adds	r3, r4, #0
10010394:	3376      	adds	r3, #118	; 0x76
10010396:	701d      	strb	r5, [r3, #0]
10010398:	1c23      	adds	r3, r4, #0
1001039a:	33cc      	adds	r3, #204	; 0xcc
1001039c:	801d      	strh	r5, [r3, #0]
1001039e:	1c22      	adds	r2, r4, #0
100103a0:	23a0      	movs	r3, #160	; 0xa0
100103a2:	32d0      	adds	r2, #208	; 0xd0
100103a4:	005b      	lsls	r3, r3, #1
100103a6:	8013      	strh	r3, [r2, #0]
100103a8:	1c22      	adds	r2, r4, #0
100103aa:	32ce      	adds	r2, #206	; 0xce
100103ac:	8013      	strh	r3, [r2, #0]
100103ae:	1c23      	adds	r3, r4, #0
100103b0:	33d2      	adds	r3, #210	; 0xd2
100103b2:	801d      	strh	r5, [r3, #0]
100103b4:	22fa      	movs	r2, #250	; 0xfa
100103b6:	1c23      	adds	r3, r4, #0
100103b8:	0052      	lsls	r2, r2, #1
100103ba:	33d4      	adds	r3, #212	; 0xd4
100103bc:	801a      	strh	r2, [r3, #0]
100103be:	1c23      	adds	r3, r4, #0
100103c0:	33d6      	adds	r3, #214	; 0xd6
100103c2:	701d      	strb	r5, [r3, #0]
100103c4:	1c20      	adds	r0, r4, #0
100103c6:	4b23      	ldr	r3, [pc, #140]	; (10010454 <at_ble_init+0x1b0>)
100103c8:	76e5      	strb	r5, [r4, #27]
100103ca:	7725      	strb	r5, [r4, #28]
100103cc:	7765      	strb	r5, [r4, #29]
100103ce:	77a5      	strb	r5, [r4, #30]
100103d0:	77e5      	strb	r5, [r4, #31]
100103d2:	8425      	strh	r5, [r4, #32]
100103d4:	8465      	strh	r5, [r4, #34]	; 0x22
100103d6:	4798      	blx	r3
100103d8:	1c23      	adds	r3, r4, #0
100103da:	2207      	movs	r2, #7
100103dc:	3374      	adds	r3, #116	; 0x74
100103de:	701a      	strb	r2, [r3, #0]
100103e0:	1c23      	adds	r3, r4, #0
100103e2:	3204      	adds	r2, #4
100103e4:	33aa      	adds	r3, #170	; 0xaa
100103e6:	801a      	strh	r2, [r3, #0]
100103e8:	1c2b      	adds	r3, r5, #0
100103ea:	5d7a      	ldrb	r2, [r7, r5]
100103ec:	33ac      	adds	r3, #172	; 0xac
100103ee:	3501      	adds	r5, #1
100103f0:	54e2      	strb	r2, [r4, r3]
100103f2:	2d0b      	cmp	r5, #11
100103f4:	d1f8      	bne.n	100103e8 <at_ble_init+0x144>
100103f6:	1c30      	adds	r0, r6, #0
100103f8:	b007      	add	sp, #28
100103fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
100103fc:	10017f9c 	.word	0x10017f9c
10010400:	10014e57 	.word	0x10014e57
10010404:	1001ab5c 	.word	0x1001ab5c
10010408:	10019cf8 	.word	0x10019cf8
1001040c:	10019c58 	.word	0x10019c58
10010410:	100181c4 	.word	0x100181c4
10010414:	10012a59 	.word	0x10012a59
10010418:	10010715 	.word	0x10010715
1001041c:	10010d75 	.word	0x10010d75
10010420:	10011029 	.word	0x10011029
10010424:	10010db1 	.word	0x10010db1
10010428:	1000eddd 	.word	0x1000eddd
1001042c:	10011329 	.word	0x10011329
10010430:	1000f021 	.word	0x1000f021
10010434:	100113d1 	.word	0x100113d1
10010438:	1000f991 	.word	0x1000f991
1001043c:	1000fa4d 	.word	0x1000fa4d
10010440:	10011f99 	.word	0x10011f99
10010444:	1001ab5e 	.word	0x1001ab5e
10010448:	1001abee 	.word	0x1001abee
1001044c:	00003a98 	.word	0x00003a98
10010450:	1001abf9 	.word	0x1001abf9
10010454:	10010215 	.word	0x10010215

10010458 <at_ble_addr_set>:
10010458:	b538      	push	{r3, r4, r5, lr}
1001045a:	1c45      	adds	r5, r0, #1
1001045c:	1c03      	adds	r3, r0, #0
1001045e:	20cf      	movs	r0, #207	; 0xcf
10010460:	2d00      	cmp	r5, #0
10010462:	d018      	beq.n	10010496 <at_ble_addr_set+0x3e>
10010464:	781a      	ldrb	r2, [r3, #0]
10010466:	2a03      	cmp	r2, #3
10010468:	d815      	bhi.n	10010496 <at_ble_addr_set+0x3e>
1001046a:	2a01      	cmp	r2, #1
1001046c:	d102      	bne.n	10010474 <at_ble_addr_set+0x1c>
1001046e:	785a      	ldrb	r2, [r3, #1]
10010470:	2a00      	cmp	r2, #0
10010472:	d010      	beq.n	10010496 <at_ble_addr_set+0x3e>
10010474:	1c1c      	adds	r4, r3, #0
10010476:	1c29      	adds	r1, r5, #0
10010478:	2206      	movs	r2, #6
1001047a:	4b07      	ldr	r3, [pc, #28]	; (10010498 <at_ble_addr_set+0x40>)
1001047c:	4807      	ldr	r0, [pc, #28]	; (1001049c <at_ble_addr_set+0x44>)
1001047e:	4798      	blx	r3
10010480:	7823      	ldrb	r3, [r4, #0]
10010482:	4807      	ldr	r0, [pc, #28]	; (100104a0 <at_ble_addr_set+0x48>)
10010484:	7103      	strb	r3, [r0, #4]
10010486:	4b07      	ldr	r3, [pc, #28]	; (100104a4 <at_ble_addr_set+0x4c>)
10010488:	4798      	blx	r3
1001048a:	7823      	ldrb	r3, [r4, #0]
1001048c:	2b00      	cmp	r3, #0
1001048e:	d102      	bne.n	10010496 <at_ble_addr_set+0x3e>
10010490:	1c28      	adds	r0, r5, #0
10010492:	4b05      	ldr	r3, [pc, #20]	; (100104a8 <at_ble_addr_set+0x50>)
10010494:	4798      	blx	r3
10010496:	bd38      	pop	{r3, r4, r5, pc}
10010498:	10014e57 	.word	0x10014e57
1001049c:	1001abf3 	.word	0x1001abf3
100104a0:	1001abee 	.word	0x1001abee
100104a4:	10010215 	.word	0x10010215
100104a8:	10011455 	.word	0x10011455

100104ac <at_ble_adv_data_set>:
100104ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100104ae:	4684      	mov	ip, r0
100104b0:	1c0f      	adds	r7, r1, #0
100104b2:	1c16      	adds	r6, r2, #0
100104b4:	1c1c      	adds	r4, r3, #0
100104b6:	2800      	cmp	r0, #0
100104b8:	d102      	bne.n	100104c0 <at_ble_adv_data_set+0x14>
100104ba:	20e2      	movs	r0, #226	; 0xe2
100104bc:	2a00      	cmp	r2, #0
100104be:	d02b      	beq.n	10010518 <at_ble_adv_data_set+0x6c>
100104c0:	20cf      	movs	r0, #207	; 0xcf
100104c2:	2f1f      	cmp	r7, #31
100104c4:	d828      	bhi.n	10010518 <at_ble_adv_data_set+0x6c>
100104c6:	2c1f      	cmp	r4, #31
100104c8:	d826      	bhi.n	10010518 <at_ble_adv_data_set+0x6c>
100104ca:	4663      	mov	r3, ip
100104cc:	2b00      	cmp	r3, #0
100104ce:	d00e      	beq.n	100104ee <at_ble_adv_data_set+0x42>
100104d0:	4812      	ldr	r0, [pc, #72]	; (1001051c <at_ble_adv_data_set+0x70>)
100104d2:	4d13      	ldr	r5, [pc, #76]	; (10010520 <at_ble_adv_data_set+0x74>)
100104d4:	2f00      	cmp	r7, #0
100104d6:	d104      	bne.n	100104e2 <at_ble_adv_data_set+0x36>
100104d8:	1c39      	adds	r1, r7, #0
100104da:	221f      	movs	r2, #31
100104dc:	4b11      	ldr	r3, [pc, #68]	; (10010524 <at_ble_adv_data_set+0x78>)
100104de:	4798      	blx	r3
100104e0:	e003      	b.n	100104ea <at_ble_adv_data_set+0x3e>
100104e2:	4661      	mov	r1, ip
100104e4:	1c3a      	adds	r2, r7, #0
100104e6:	4b10      	ldr	r3, [pc, #64]	; (10010528 <at_ble_adv_data_set+0x7c>)
100104e8:	4798      	blx	r3
100104ea:	3572      	adds	r5, #114	; 0x72
100104ec:	702f      	strb	r7, [r5, #0]
100104ee:	1e30      	subs	r0, r6, #0
100104f0:	d012      	beq.n	10010518 <at_ble_adv_data_set+0x6c>
100104f2:	4d0b      	ldr	r5, [pc, #44]	; (10010520 <at_ble_adv_data_set+0x74>)
100104f4:	480d      	ldr	r0, [pc, #52]	; (1001052c <at_ble_adv_data_set+0x80>)
100104f6:	2c00      	cmp	r4, #0
100104f8:	d107      	bne.n	1001050a <at_ble_adv_data_set+0x5e>
100104fa:	1c21      	adds	r1, r4, #0
100104fc:	221f      	movs	r2, #31
100104fe:	4b09      	ldr	r3, [pc, #36]	; (10010524 <at_ble_adv_data_set+0x78>)
10010500:	3573      	adds	r5, #115	; 0x73
10010502:	4798      	blx	r3
10010504:	702c      	strb	r4, [r5, #0]
10010506:	1c20      	adds	r0, r4, #0
10010508:	e006      	b.n	10010518 <at_ble_adv_data_set+0x6c>
1001050a:	1c31      	adds	r1, r6, #0
1001050c:	1c22      	adds	r2, r4, #0
1001050e:	4b06      	ldr	r3, [pc, #24]	; (10010528 <at_ble_adv_data_set+0x7c>)
10010510:	4798      	blx	r3
10010512:	2000      	movs	r0, #0
10010514:	3573      	adds	r5, #115	; 0x73
10010516:	702c      	strb	r4, [r5, #0]
10010518:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1001051a:	46c0      	nop			; (mov r8, r8)
1001051c:	1001ac22 	.word	0x1001ac22
10010520:	1001abee 	.word	0x1001abee
10010524:	10014e69 	.word	0x10014e69
10010528:	10014e57 	.word	0x10014e57
1001052c:	1001ac41 	.word	0x1001ac41

10010530 <at_ble_adv_start>:
10010530:	b5f0      	push	{r4, r5, r6, r7, lr}
10010532:	b091      	sub	sp, #68	; 0x44
10010534:	1c1f      	adds	r7, r3, #0
10010536:	ab16      	add	r3, sp, #88	; 0x58
10010538:	881d      	ldrh	r5, [r3, #0]
1001053a:	ab17      	add	r3, sp, #92	; 0x5c
1001053c:	881b      	ldrh	r3, [r3, #0]
1001053e:	910d      	str	r1, [sp, #52]	; 0x34
10010540:	930e      	str	r3, [sp, #56]	; 0x38
10010542:	ab18      	add	r3, sp, #96	; 0x60
10010544:	781b      	ldrb	r3, [r3, #0]
10010546:	1c04      	adds	r4, r0, #0
10010548:	930f      	str	r3, [sp, #60]	; 0x3c
1001054a:	4b42      	ldr	r3, [pc, #264]	; (10010654 <at_ble_adv_start+0x124>)
1001054c:	1c16      	adds	r6, r2, #0
1001054e:	3373      	adds	r3, #115	; 0x73
10010550:	781b      	ldrb	r3, [r3, #0]
10010552:	20cf      	movs	r0, #207	; 0xcf
10010554:	930c      	str	r3, [sp, #48]	; 0x30
10010556:	2c01      	cmp	r4, #1
10010558:	d103      	bne.n	10010562 <at_ble_adv_start+0x32>
1001055a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1001055c:	2b00      	cmp	r3, #0
1001055e:	d176      	bne.n	1001064e <at_ble_adv_start+0x11e>
10010560:	e024      	b.n	100105ac <at_ble_adv_start+0x7c>
10010562:	2c04      	cmp	r4, #4
10010564:	d873      	bhi.n	1001064e <at_ble_adv_start+0x11e>
10010566:	2380      	movs	r3, #128	; 0x80
10010568:	01db      	lsls	r3, r3, #7
1001056a:	429d      	cmp	r5, r3
1001056c:	d86f      	bhi.n	1001064e <at_ble_adv_start+0x11e>
1001056e:	2c00      	cmp	r4, #0
10010570:	d102      	bne.n	10010578 <at_ble_adv_start+0x48>
10010572:	2d1f      	cmp	r5, #31
10010574:	d96b      	bls.n	1001064e <at_ble_adv_start+0x11e>
10010576:	e003      	b.n	10010580 <at_ble_adv_start+0x50>
10010578:	2d9f      	cmp	r5, #159	; 0x9f
1001057a:	d801      	bhi.n	10010580 <at_ble_adv_start+0x50>
1001057c:	2c01      	cmp	r4, #1
1001057e:	d166      	bne.n	1001064e <at_ble_adv_start+0x11e>
10010580:	2f00      	cmp	r7, #0
10010582:	d009      	beq.n	10010598 <at_ble_adv_start+0x68>
10010584:	9b0d      	ldr	r3, [sp, #52]	; 0x34
10010586:	20cf      	movs	r0, #207	; 0xcf
10010588:	3b01      	subs	r3, #1
1001058a:	2b01      	cmp	r3, #1
1001058c:	d95f      	bls.n	1001064e <at_ble_adv_start+0x11e>
1001058e:	2c01      	cmp	r4, #1
10010590:	d102      	bne.n	10010598 <at_ble_adv_start+0x68>
10010592:	2d00      	cmp	r5, #0
10010594:	d100      	bne.n	10010598 <at_ble_adv_start+0x68>
10010596:	3520      	adds	r5, #32
10010598:	4b2f      	ldr	r3, [pc, #188]	; (10010658 <at_ble_adv_start+0x128>)
1001059a:	4798      	blx	r3
1001059c:	1c01      	adds	r1, r0, #0
1001059e:	2e00      	cmp	r6, #0
100105a0:	d043      	beq.n	1001062a <at_ble_adv_start+0xfa>
100105a2:	7833      	ldrb	r3, [r6, #0]
100105a4:	1e60      	subs	r0, r4, #1
100105a6:	2b00      	cmp	r3, #0
100105a8:	d109      	bne.n	100105be <at_ble_adv_start+0x8e>
100105aa:	e03b      	b.n	10010624 <at_ble_adv_start+0xf4>
100105ac:	2380      	movs	r3, #128	; 0x80
100105ae:	01db      	lsls	r3, r3, #7
100105b0:	429d      	cmp	r5, r3
100105b2:	d84c      	bhi.n	1001064e <at_ble_adv_start+0x11e>
100105b4:	2e00      	cmp	r6, #0
100105b6:	d04a      	beq.n	1001064e <at_ble_adv_start+0x11e>
100105b8:	2f00      	cmp	r7, #0
100105ba:	d1e3      	bne.n	10010584 <at_ble_adv_start+0x54>
100105bc:	e02b      	b.n	10010616 <at_ble_adv_start+0xe6>
100105be:	2301      	movs	r3, #1
100105c0:	2803      	cmp	r0, #3
100105c2:	d93a      	bls.n	1001063a <at_ble_adv_start+0x10a>
100105c4:	200d      	movs	r0, #13
100105c6:	1c72      	adds	r2, r6, #1
100105c8:	e002      	b.n	100105d0 <at_ble_adv_start+0xa0>
100105ca:	200e      	movs	r0, #14
100105cc:	1e32      	subs	r2, r6, #0
100105ce:	d1fa      	bne.n	100105c6 <at_ble_adv_start+0x96>
100105d0:	4c20      	ldr	r4, [pc, #128]	; (10010654 <at_ble_adv_start+0x124>)
100105d2:	3474      	adds	r4, #116	; 0x74
100105d4:	7826      	ldrb	r6, [r4, #0]
100105d6:	2407      	movs	r4, #7
100105d8:	2e00      	cmp	r6, #0
100105da:	d000      	beq.n	100105de <at_ble_adv_start+0xae>
100105dc:	1c34      	adds	r4, r6, #0
100105de:	9200      	str	r2, [sp, #0]
100105e0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
100105e2:	9403      	str	r4, [sp, #12]
100105e4:	9204      	str	r2, [sp, #16]
100105e6:	4a1b      	ldr	r2, [pc, #108]	; (10010654 <at_ble_adv_start+0x124>)
100105e8:	9501      	str	r5, [sp, #4]
100105ea:	9502      	str	r5, [sp, #8]
100105ec:	9705      	str	r7, [sp, #20]
100105ee:	3272      	adds	r2, #114	; 0x72
100105f0:	7812      	ldrb	r2, [r2, #0]
100105f2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
100105f4:	9206      	str	r2, [sp, #24]
100105f6:	4a19      	ldr	r2, [pc, #100]	; (1001065c <at_ble_adv_start+0x12c>)
100105f8:	9207      	str	r2, [sp, #28]
100105fa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
100105fc:	9208      	str	r2, [sp, #32]
100105fe:	4a18      	ldr	r2, [pc, #96]	; (10010660 <at_ble_adv_start+0x130>)
10010600:	9209      	str	r2, [sp, #36]	; 0x24
10010602:	2264      	movs	r2, #100	; 0x64
10010604:	4362      	muls	r2, r4
10010606:	b292      	uxth	r2, r2
10010608:	920a      	str	r2, [sp, #40]	; 0x28
1001060a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
1001060c:	4c15      	ldr	r4, [pc, #84]	; (10010664 <at_ble_adv_start+0x134>)
1001060e:	920b      	str	r2, [sp, #44]	; 0x2c
10010610:	4a15      	ldr	r2, [pc, #84]	; (10010668 <at_ble_adv_start+0x138>)
10010612:	47a0      	blx	r4
10010614:	e01b      	b.n	1001064e <at_ble_adv_start+0x11e>
10010616:	2d00      	cmp	r5, #0
10010618:	d1be      	bne.n	10010598 <at_ble_adv_start+0x68>
1001061a:	4b0f      	ldr	r3, [pc, #60]	; (10010658 <at_ble_adv_start+0x128>)
1001061c:	4798      	blx	r3
1001061e:	2520      	movs	r5, #32
10010620:	1c01      	adds	r1, r0, #0
10010622:	e7be      	b.n	100105a2 <at_ble_adv_start+0x72>
10010624:	2803      	cmp	r0, #3
10010626:	d8cd      	bhi.n	100105c4 <at_ble_adv_start+0x94>
10010628:	e006      	b.n	10010638 <at_ble_adv_start+0x108>
1001062a:	1e60      	subs	r0, r4, #1
1001062c:	2803      	cmp	r0, #3
1001062e:	d903      	bls.n	10010638 <at_ble_adv_start+0x108>
10010630:	1c33      	adds	r3, r6, #0
10010632:	200d      	movs	r0, #13
10010634:	1c32      	adds	r2, r6, #0
10010636:	e7cb      	b.n	100105d0 <at_ble_adv_start+0xa0>
10010638:	2300      	movs	r3, #0
1001063a:	f002 fb7f 	bl	10012d3c <__gnu_thumb1_case_sqi>
1001063e:	06c6      	.short	0x06c6
10010640:	0204      	.short	0x0204
10010642:	200f      	movs	r0, #15
10010644:	e7c2      	b.n	100105cc <at_ble_adv_start+0x9c>
10010646:	2200      	movs	r2, #0
10010648:	920c      	str	r2, [sp, #48]	; 0x30
1001064a:	200c      	movs	r0, #12
1001064c:	e7be      	b.n	100105cc <at_ble_adv_start+0x9c>
1001064e:	b011      	add	sp, #68	; 0x44
10010650:	bdf0      	pop	{r4, r5, r6, r7, pc}
10010652:	46c0      	nop			; (mov r8, r8)
10010654:	1001abee 	.word	0x1001abee
10010658:	100124e5 	.word	0x100124e5
1001065c:	1001ac22 	.word	0x1001ac22
10010660:	1001ac41 	.word	0x1001ac41
10010664:	100123c5 	.word	0x100123c5
10010668:	00003a98 	.word	0x00003a98

1001066c <at_ble_adv_stop>:
1001066c:	b508      	push	{r3, lr}
1001066e:	4b01      	ldr	r3, [pc, #4]	; (10010674 <at_ble_adv_stop+0x8>)
10010670:	4798      	blx	r3
10010672:	bd08      	pop	{r3, pc}
10010674:	100121f1 	.word	0x100121f1

10010678 <at_ble_scan_stop>:
10010678:	b510      	push	{r4, lr}
1001067a:	4b05      	ldr	r3, [pc, #20]	; (10010690 <at_ble_scan_stop+0x18>)
1001067c:	4798      	blx	r3
1001067e:	1e04      	subs	r4, r0, #0
10010680:	d103      	bne.n	1001068a <at_ble_scan_stop+0x12>
10010682:	20d1      	movs	r0, #209	; 0xd1
10010684:	4b03      	ldr	r3, [pc, #12]	; (10010694 <at_ble_scan_stop+0x1c>)
10010686:	0100      	lsls	r0, r0, #4
10010688:	4798      	blx	r3
1001068a:	1c20      	adds	r0, r4, #0
1001068c:	bd10      	pop	{r4, pc}
1001068e:	46c0      	nop			; (mov r8, r8)
10010690:	100121f1 	.word	0x100121f1
10010694:	10010125 	.word	0x10010125

10010698 <at_ble_disconnect>:
10010698:	b538      	push	{r3, r4, r5, lr}
1001069a:	1c04      	adds	r4, r0, #0
1001069c:	4b04      	ldr	r3, [pc, #16]	; (100106b0 <at_ble_disconnect+0x18>)
1001069e:	1c08      	adds	r0, r1, #0
100106a0:	1c21      	adds	r1, r4, #0
100106a2:	4798      	blx	r3
100106a4:	1c05      	adds	r5, r0, #0
100106a6:	4b03      	ldr	r3, [pc, #12]	; (100106b4 <at_ble_disconnect+0x1c>)
100106a8:	1c20      	adds	r0, r4, #0
100106aa:	4798      	blx	r3
100106ac:	1c28      	adds	r0, r5, #0
100106ae:	bd38      	pop	{r3, r4, r5, pc}
100106b0:	10011869 	.word	0x10011869
100106b4:	10010169 	.word	0x10010169

100106b8 <at_ble_conn_update_reply>:
100106b8:	b510      	push	{r4, lr}
100106ba:	4c01      	ldr	r4, [pc, #4]	; (100106c0 <at_ble_conn_update_reply+0x8>)
100106bc:	47a0      	blx	r4
100106be:	bd10      	pop	{r4, pc}
100106c0:	10011d59 	.word	0x10011d59

100106c4 <at_ble_random_address_resolve>:
100106c4:	b510      	push	{r4, lr}
100106c6:	23cf      	movs	r3, #207	; 0xcf
100106c8:	2800      	cmp	r0, #0
100106ca:	d00a      	beq.n	100106e2 <at_ble_random_address_resolve+0x1e>
100106cc:	2900      	cmp	r1, #0
100106ce:	d008      	beq.n	100106e2 <at_ble_random_address_resolve+0x1e>
100106d0:	2a00      	cmp	r2, #0
100106d2:	d006      	beq.n	100106e2 <at_ble_random_address_resolve+0x1e>
100106d4:	780c      	ldrb	r4, [r1, #0]
100106d6:	2c02      	cmp	r4, #2
100106d8:	d103      	bne.n	100106e2 <at_ble_random_address_resolve+0x1e>
100106da:	4b03      	ldr	r3, [pc, #12]	; (100106e8 <at_ble_random_address_resolve+0x24>)
100106dc:	3101      	adds	r1, #1
100106de:	4798      	blx	r3
100106e0:	2300      	movs	r3, #0
100106e2:	1c18      	adds	r0, r3, #0
100106e4:	bd10      	pop	{r4, pc}
100106e6:	46c0      	nop			; (mov r8, r8)
100106e8:	10012585 	.word	0x10012585

100106ec <at_ble_uuid_type2len>:
100106ec:	23cf      	movs	r3, #207	; 0xcf
100106ee:	2802      	cmp	r0, #2
100106f0:	d801      	bhi.n	100106f6 <at_ble_uuid_type2len+0xa>
100106f2:	4b02      	ldr	r3, [pc, #8]	; (100106fc <at_ble_uuid_type2len+0x10>)
100106f4:	5c1b      	ldrb	r3, [r3, r0]
100106f6:	1c18      	adds	r0, r3, #0
100106f8:	4770      	bx	lr
100106fa:	46c0      	nop			; (mov r8, r8)
100106fc:	10017fa7 	.word	0x10017fa7

10010700 <at_ble_uuid_len2type>:
10010700:	1e83      	subs	r3, r0, #2
10010702:	b2db      	uxtb	r3, r3
10010704:	2003      	movs	r0, #3
10010706:	2b0e      	cmp	r3, #14
10010708:	d801      	bhi.n	1001070e <at_ble_uuid_len2type+0xe>
1001070a:	4a01      	ldr	r2, [pc, #4]	; (10010710 <at_ble_uuid_len2type+0x10>)
1001070c:	5cd0      	ldrb	r0, [r2, r3]
1001070e:	4770      	bx	lr
10010710:	10017faa 	.word	0x10017faa

10010714 <init_gatt_client_module>:
10010714:	2200      	movs	r2, #0
10010716:	4b01      	ldr	r3, [pc, #4]	; (1001071c <init_gatt_client_module+0x8>)
10010718:	801a      	strh	r2, [r3, #0]
1001071a:	4770      	bx	lr
1001071c:	10019c50 	.word	0x10019c50

10010720 <db_searchATT>:
10010720:	b570      	push	{r4, r5, r6, lr}
10010722:	1c05      	adds	r5, r0, #0
10010724:	2400      	movs	r4, #0
10010726:	4b0c      	ldr	r3, [pc, #48]	; (10010758 <db_searchATT+0x38>)
10010728:	6819      	ldr	r1, [r3, #0]
1001072a:	4b0c      	ldr	r3, [pc, #48]	; (1001075c <db_searchATT+0x3c>)
1001072c:	681e      	ldr	r6, [r3, #0]
1001072e:	428c      	cmp	r4, r1
10010730:	dc10      	bgt.n	10010754 <db_searchATT+0x34>
10010732:	200c      	movs	r0, #12
10010734:	1863      	adds	r3, r4, r1
10010736:	0fda      	lsrs	r2, r3, #31
10010738:	18d3      	adds	r3, r2, r3
1001073a:	1c02      	adds	r2, r0, #0
1001073c:	105b      	asrs	r3, r3, #1
1001073e:	435a      	muls	r2, r3
10010740:	18b0      	adds	r0, r6, r2
10010742:	8802      	ldrh	r2, [r0, #0]
10010744:	42aa      	cmp	r2, r5
10010746:	d201      	bcs.n	1001074c <db_searchATT+0x2c>
10010748:	1e59      	subs	r1, r3, #1
1001074a:	e7f0      	b.n	1001072e <db_searchATT+0xe>
1001074c:	42aa      	cmp	r2, r5
1001074e:	d902      	bls.n	10010756 <db_searchATT+0x36>
10010750:	1c5c      	adds	r4, r3, #1
10010752:	e7ec      	b.n	1001072e <db_searchATT+0xe>
10010754:	2000      	movs	r0, #0
10010756:	bd70      	pop	{r4, r5, r6, pc}
10010758:	10019c64 	.word	0x10019c64
1001075c:	10019c5c 	.word	0x10019c5c

10010760 <att_permissions>:
10010760:	b530      	push	{r4, r5, lr}
10010762:	2403      	movs	r4, #3
10010764:	1c05      	adds	r5, r0, #0
10010766:	2301      	movs	r3, #1
10010768:	4025      	ands	r5, r4
1001076a:	42a5      	cmp	r5, r4
1001076c:	d009      	beq.n	10010782 <att_permissions+0x22>
1001076e:	1c23      	adds	r3, r4, #0
10010770:	1924      	adds	r4, r4, r4
10010772:	4220      	tst	r0, r4
10010774:	d105      	bne.n	10010782 <att_permissions+0x22>
10010776:	3b02      	subs	r3, #2
10010778:	4218      	tst	r0, r3
1001077a:	d102      	bne.n	10010782 <att_permissions+0x22>
1001077c:	1e4b      	subs	r3, r1, #1
1001077e:	4199      	sbcs	r1, r3
10010780:	b28b      	uxth	r3, r1
10010782:	2130      	movs	r1, #48	; 0x30
10010784:	4001      	ands	r1, r0
10010786:	2930      	cmp	r1, #48	; 0x30
10010788:	d007      	beq.n	1001079a <att_permissions+0x3a>
1001078a:	0641      	lsls	r1, r0, #25
1001078c:	d401      	bmi.n	10010792 <att_permissions+0x32>
1001078e:	0681      	lsls	r1, r0, #26
10010790:	d501      	bpl.n	10010796 <att_permissions+0x36>
10010792:	4807      	ldr	r0, [pc, #28]	; (100107b0 <att_permissions+0x50>)
10010794:	e009      	b.n	100107aa <att_permissions+0x4a>
10010796:	06c1      	lsls	r1, r0, #27
10010798:	d501      	bpl.n	1001079e <att_permissions+0x3e>
1001079a:	4806      	ldr	r0, [pc, #24]	; (100107b4 <att_permissions+0x54>)
1001079c:	e005      	b.n	100107aa <att_permissions+0x4a>
1001079e:	2a00      	cmp	r2, #0
100107a0:	d001      	beq.n	100107a6 <att_permissions+0x46>
100107a2:	2204      	movs	r2, #4
100107a4:	4313      	orrs	r3, r2
100107a6:	2080      	movs	r0, #128	; 0x80
100107a8:	0180      	lsls	r0, r0, #6
100107aa:	4318      	orrs	r0, r3
100107ac:	bd30      	pop	{r4, r5, pc}
100107ae:	46c0      	nop			; (mov r8, r8)
100107b0:	0000200c 	.word	0x0000200c
100107b4:	00002004 	.word	0x00002004

100107b8 <char_permissions>:
100107b8:	b530      	push	{r4, r5, lr}
100107ba:	2300      	movs	r3, #0
100107bc:	0784      	lsls	r4, r0, #30
100107be:	d503      	bpl.n	100107c8 <char_permissions+0x10>
100107c0:	3301      	adds	r3, #1
100107c2:	4219      	tst	r1, r3
100107c4:	d100      	bne.n	100107c8 <char_permissions+0x10>
100107c6:	3302      	adds	r3, #2
100107c8:	0704      	lsls	r4, r0, #28
100107ca:	d508      	bpl.n	100107de <char_permissions+0x26>
100107cc:	06cc      	lsls	r4, r1, #27
100107ce:	d501      	bpl.n	100107d4 <char_permissions+0x1c>
100107d0:	2404      	movs	r4, #4
100107d2:	e000      	b.n	100107d6 <char_permissions+0x1e>
100107d4:	240c      	movs	r4, #12
100107d6:	4323      	orrs	r3, r4
100107d8:	2480      	movs	r4, #128	; 0x80
100107da:	01a4      	lsls	r4, r4, #6
100107dc:	4323      	orrs	r3, r4
100107de:	0684      	lsls	r4, r0, #26
100107e0:	d506      	bpl.n	100107f0 <char_permissions+0x38>
100107e2:	2406      	movs	r4, #6
100107e4:	4221      	tst	r1, r4
100107e6:	d101      	bne.n	100107ec <char_permissions+0x34>
100107e8:	340a      	adds	r4, #10
100107ea:	e000      	b.n	100107ee <char_permissions+0x36>
100107ec:	2430      	movs	r4, #48	; 0x30
100107ee:	4323      	orrs	r3, r4
100107f0:	06c4      	lsls	r4, r0, #27
100107f2:	d506      	bpl.n	10010802 <char_permissions+0x4a>
100107f4:	2406      	movs	r4, #6
100107f6:	4221      	tst	r1, r4
100107f8:	d101      	bne.n	100107fe <char_permissions+0x46>
100107fa:	343a      	adds	r4, #58	; 0x3a
100107fc:	e000      	b.n	10010800 <char_permissions+0x48>
100107fe:	24c0      	movs	r4, #192	; 0xc0
10010800:	4323      	orrs	r3, r4
10010802:	2480      	movs	r4, #128	; 0x80
10010804:	0064      	lsls	r4, r4, #1
10010806:	4220      	tst	r0, r4
10010808:	d000      	beq.n	1001080c <char_permissions+0x54>
1001080a:	4323      	orrs	r3, r4
1001080c:	07c4      	lsls	r4, r0, #31
1001080e:	d502      	bpl.n	10010816 <char_permissions+0x5e>
10010810:	2480      	movs	r4, #128	; 0x80
10010812:	00a4      	lsls	r4, r4, #2
10010814:	4323      	orrs	r3, r4
10010816:	2404      	movs	r4, #4
10010818:	4220      	tst	r0, r4
1001081a:	d006      	beq.n	1001082a <char_permissions+0x72>
1001081c:	06cd      	lsls	r5, r1, #27
1001081e:	d400      	bmi.n	10010822 <char_permissions+0x6a>
10010820:	240c      	movs	r4, #12
10010822:	4323      	orrs	r3, r4
10010824:	2480      	movs	r4, #128	; 0x80
10010826:	0124      	lsls	r4, r4, #4
10010828:	4323      	orrs	r3, r4
1001082a:	0644      	lsls	r4, r0, #25
1001082c:	d501      	bpl.n	10010832 <char_permissions+0x7a>
1001082e:	4c08      	ldr	r4, [pc, #32]	; (10010850 <char_permissions+0x98>)
10010830:	4323      	orrs	r3, r4
10010832:	0600      	lsls	r0, r0, #24
10010834:	d507      	bpl.n	10010846 <char_permissions+0x8e>
10010836:	2004      	movs	r0, #4
10010838:	06c9      	lsls	r1, r1, #27
1001083a:	d400      	bmi.n	1001083e <char_permissions+0x86>
1001083c:	200c      	movs	r0, #12
1001083e:	4303      	orrs	r3, r0
10010840:	2084      	movs	r0, #132	; 0x84
10010842:	0180      	lsls	r0, r0, #6
10010844:	4303      	orrs	r3, r0
10010846:	0390      	lsls	r0, r2, #14
10010848:	4303      	orrs	r3, r0
1001084a:	b298      	uxth	r0, r3
1001084c:	bd30      	pop	{r4, r5, pc}
1001084e:	46c0      	nop			; (mov r8, r8)
10010850:	00001004 	.word	0x00001004

10010854 <presentation_format_define>:
10010854:	b507      	push	{r0, r1, r2, lr}
10010856:	466a      	mov	r2, sp
10010858:	780b      	ldrb	r3, [r1, #0]
1001085a:	7013      	strb	r3, [r2, #0]
1001085c:	784b      	ldrb	r3, [r1, #1]
1001085e:	7053      	strb	r3, [r2, #1]
10010860:	884b      	ldrh	r3, [r1, #2]
10010862:	7093      	strb	r3, [r2, #2]
10010864:	0a1b      	lsrs	r3, r3, #8
10010866:	70d3      	strb	r3, [r2, #3]
10010868:	790b      	ldrb	r3, [r1, #4]
1001086a:	7113      	strb	r3, [r2, #4]
1001086c:	88cb      	ldrh	r3, [r1, #6]
1001086e:	2107      	movs	r1, #7
10010870:	7153      	strb	r3, [r2, #5]
10010872:	0a1b      	lsrs	r3, r3, #8
10010874:	7193      	strb	r3, [r2, #6]
10010876:	4b01      	ldr	r3, [pc, #4]	; (1001087c <presentation_format_define+0x28>)
10010878:	4798      	blx	r3
1001087a:	bd0e      	pop	{r1, r2, r3, pc}
1001087c:	10012be9 	.word	0x10012be9

10010880 <db_addATT>:
10010880:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10010882:	4c29      	ldr	r4, [pc, #164]	; (10010928 <db_addATT+0xa8>)
10010884:	1c1d      	adds	r5, r3, #0
10010886:	6823      	ldr	r3, [r4, #0]
10010888:	9001      	str	r0, [sp, #4]
1001088a:	26d3      	movs	r6, #211	; 0xd3
1001088c:	2b00      	cmp	r3, #0
1001088e:	d048      	beq.n	10010922 <db_addATT+0xa2>
10010890:	1c1e      	adds	r6, r3, #0
10010892:	3e0c      	subs	r6, #12
10010894:	6026      	str	r6, [r4, #0]
10010896:	2900      	cmp	r1, #0
10010898:	d005      	beq.n	100108a6 <db_addATT+0x26>
1001089a:	4f24      	ldr	r7, [pc, #144]	; (1001092c <db_addATT+0xac>)
1001089c:	46bc      	mov	ip, r7
1001089e:	4660      	mov	r0, ip
100108a0:	683f      	ldr	r7, [r7, #0]
100108a2:	18bf      	adds	r7, r7, r2
100108a4:	6007      	str	r7, [r0, #0]
100108a6:	4821      	ldr	r0, [pc, #132]	; (1001092c <db_addATT+0xac>)
100108a8:	6807      	ldr	r7, [r0, #0]
100108aa:	4684      	mov	ip, r0
100108ac:	42be      	cmp	r6, r7
100108ae:	d932      	bls.n	10010916 <db_addATT+0x96>
100108b0:	4668      	mov	r0, sp
100108b2:	8880      	ldrh	r0, [r0, #4]
100108b4:	3b0c      	subs	r3, #12
100108b6:	8018      	strh	r0, [r3, #0]
100108b8:	6823      	ldr	r3, [r4, #0]
100108ba:	2900      	cmp	r1, #0
100108bc:	d009      	beq.n	100108d2 <db_addATT+0x52>
100108be:	2a00      	cmp	r2, #0
100108c0:	d007      	beq.n	100108d2 <db_addATT+0x52>
100108c2:	4660      	mov	r0, ip
100108c4:	6800      	ldr	r0, [r0, #0]
100108c6:	809a      	strh	r2, [r3, #4]
100108c8:	1a80      	subs	r0, r0, r2
100108ca:	6098      	str	r0, [r3, #8]
100108cc:	4b18      	ldr	r3, [pc, #96]	; (10010930 <db_addATT+0xb0>)
100108ce:	4798      	blx	r3
100108d0:	e002      	b.n	100108d8 <db_addATT+0x58>
100108d2:	2100      	movs	r1, #0
100108d4:	809a      	strh	r2, [r3, #4]
100108d6:	6099      	str	r1, [r3, #8]
100108d8:	2300      	movs	r3, #0
100108da:	6822      	ldr	r2, [r4, #0]
100108dc:	7093      	strb	r3, [r2, #2]
100108de:	3303      	adds	r3, #3
100108e0:	402b      	ands	r3, r5
100108e2:	2b03      	cmp	r3, #3
100108e4:	d001      	beq.n	100108ea <db_addATT+0x6a>
100108e6:	076b      	lsls	r3, r5, #29
100108e8:	d504      	bpl.n	100108f4 <db_addATT+0x74>
100108ea:	2101      	movs	r1, #1
100108ec:	6822      	ldr	r2, [r4, #0]
100108ee:	7893      	ldrb	r3, [r2, #2]
100108f0:	430b      	orrs	r3, r1
100108f2:	7093      	strb	r3, [r2, #2]
100108f4:	2330      	movs	r3, #48	; 0x30
100108f6:	402b      	ands	r3, r5
100108f8:	2b30      	cmp	r3, #48	; 0x30
100108fa:	d001      	beq.n	10010900 <db_addATT+0x80>
100108fc:	066b      	lsls	r3, r5, #25
100108fe:	d504      	bpl.n	1001090a <db_addATT+0x8a>
10010900:	2102      	movs	r1, #2
10010902:	6822      	ldr	r2, [r4, #0]
10010904:	7893      	ldrb	r3, [r2, #2]
10010906:	430b      	orrs	r3, r1
10010908:	7093      	strb	r3, [r2, #2]
1001090a:	4a0a      	ldr	r2, [pc, #40]	; (10010934 <db_addATT+0xb4>)
1001090c:	2600      	movs	r6, #0
1001090e:	6813      	ldr	r3, [r2, #0]
10010910:	3301      	adds	r3, #1
10010912:	6013      	str	r3, [r2, #0]
10010914:	e005      	b.n	10010922 <db_addATT+0xa2>
10010916:	6023      	str	r3, [r4, #0]
10010918:	2611      	movs	r6, #17
1001091a:	2900      	cmp	r1, #0
1001091c:	d001      	beq.n	10010922 <db_addATT+0xa2>
1001091e:	1aba      	subs	r2, r7, r2
10010920:	6002      	str	r2, [r0, #0]
10010922:	1c30      	adds	r0, r6, #0
10010924:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10010926:	46c0      	nop			; (mov r8, r8)
10010928:	10019c5c 	.word	0x10019c5c
1001092c:	10019c60 	.word	0x10019c60
10010930:	10014e57 	.word	0x10014e57
10010934:	10019c64 	.word	0x10019c64

10010938 <user_description_define>:
10010938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1001093a:	1c05      	adds	r5, r0, #0
1001093c:	20cf      	movs	r0, #207	; 0xcf
1001093e:	2a00      	cmp	r2, #0
10010940:	d01c      	beq.n	1001097c <user_description_define+0x44>
10010942:	1c14      	adds	r4, r2, #0
10010944:	2203      	movs	r2, #3
10010946:	1c1e      	adds	r6, r3, #0
10010948:	400a      	ands	r2, r1
1001094a:	1c0b      	adds	r3, r1, #0
1001094c:	3a03      	subs	r2, #3
1001094e:	4251      	negs	r1, r2
10010950:	4151      	adcs	r1, r2
10010952:	075a      	lsls	r2, r3, #29
10010954:	0fd2      	lsrs	r2, r2, #31
10010956:	430a      	orrs	r2, r1
10010958:	03d2      	lsls	r2, r2, #15
1001095a:	4f09      	ldr	r7, [pc, #36]	; (10010980 <user_description_define+0x48>)
1001095c:	1c28      	adds	r0, r5, #0
1001095e:	2a00      	cmp	r2, #0
10010960:	d003      	beq.n	1001096a <user_description_define+0x32>
10010962:	1c21      	adds	r1, r4, #0
10010964:	1c32      	adds	r2, r6, #0
10010966:	47b8      	blx	r7
10010968:	e008      	b.n	1001097c <user_description_define+0x44>
1001096a:	1c11      	adds	r1, r2, #0
1001096c:	47b8      	blx	r7
1001096e:	2800      	cmp	r0, #0
10010970:	d104      	bne.n	1001097c <user_description_define+0x44>
10010972:	1c28      	adds	r0, r5, #0
10010974:	1c31      	adds	r1, r6, #0
10010976:	1c22      	adds	r2, r4, #0
10010978:	4b02      	ldr	r3, [pc, #8]	; (10010984 <user_description_define+0x4c>)
1001097a:	4798      	blx	r3
1001097c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1001097e:	46c0      	nop			; (mov r8, r8)
10010980:	10010881 	.word	0x10010881
10010984:	10012be9 	.word	0x10012be9

10010988 <at_ble_read_authorize_reply.part.1>:
10010988:	b537      	push	{r0, r1, r2, r4, r5, lr}
1001098a:	4b09      	ldr	r3, [pc, #36]	; (100109b0 <at_ble_read_authorize_reply.part.1+0x28>)
1001098c:	1c05      	adds	r5, r0, #0
1001098e:	1c08      	adds	r0, r1, #0
10010990:	1c0c      	adds	r4, r1, #0
10010992:	4798      	blx	r3
10010994:	2800      	cmp	r0, #0
10010996:	d009      	beq.n	100109ac <at_ble_read_authorize_reply.part.1+0x24>
10010998:	6882      	ldr	r2, [r0, #8]
1001099a:	2a00      	cmp	r2, #0
1001099c:	d006      	beq.n	100109ac <at_ble_read_authorize_reply.part.1+0x24>
1001099e:	8883      	ldrh	r3, [r0, #4]
100109a0:	1c29      	adds	r1, r5, #0
100109a2:	9200      	str	r2, [sp, #0]
100109a4:	1c20      	adds	r0, r4, #0
100109a6:	2200      	movs	r2, #0
100109a8:	4c02      	ldr	r4, [pc, #8]	; (100109b4 <at_ble_read_authorize_reply.part.1+0x2c>)
100109aa:	47a0      	blx	r4
100109ac:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
100109ae:	46c0      	nop			; (mov r8, r8)
100109b0:	10010721 	.word	0x10010721
100109b4:	10012681 	.word	0x10012681

100109b8 <internal_at_ble_service_define>:
100109b8:	b5f0      	push	{r4, r5, r6, r7, lr}
100109ba:	b08b      	sub	sp, #44	; 0x2c
100109bc:	9306      	str	r3, [sp, #24]
100109be:	ab10      	add	r3, sp, #64	; 0x40
100109c0:	9202      	str	r2, [sp, #8]
100109c2:	cb04      	ldmia	r3!, {r2}
100109c4:	1c05      	adds	r5, r0, #0
100109c6:	881b      	ldrh	r3, [r3, #0]
100109c8:	9105      	str	r1, [sp, #20]
100109ca:	9303      	str	r3, [sp, #12]
100109cc:	ab12      	add	r3, sp, #72	; 0x48
100109ce:	781b      	ldrb	r3, [r3, #0]
100109d0:	20cf      	movs	r0, #207	; 0xcf
100109d2:	9304      	str	r3, [sp, #16]
100109d4:	2d00      	cmp	r5, #0
100109d6:	d100      	bne.n	100109da <internal_at_ble_service_define+0x22>
100109d8:	e1ca      	b.n	10010d70 <internal_at_ble_service_define+0x3b8>
100109da:	2900      	cmp	r1, #0
100109dc:	d100      	bne.n	100109e0 <internal_at_ble_service_define+0x28>
100109de:	e1c7      	b.n	10010d70 <internal_at_ble_service_define+0x3b8>
100109e0:	2a00      	cmp	r2, #0
100109e2:	d100      	bne.n	100109e6 <internal_at_ble_service_define+0x2e>
100109e4:	e1c4      	b.n	10010d70 <internal_at_ble_service_define+0x3b8>
100109e6:	9b03      	ldr	r3, [sp, #12]
100109e8:	2b00      	cmp	r3, #0
100109ea:	d100      	bne.n	100109ee <internal_at_ble_service_define+0x36>
100109ec:	e1c0      	b.n	10010d70 <internal_at_ble_service_define+0x3b8>
100109ee:	4bc9      	ldr	r3, [pc, #804]	; (10010d14 <internal_at_ble_service_define+0x35c>)
100109f0:	3004      	adds	r0, #4
100109f2:	681e      	ldr	r6, [r3, #0]
100109f4:	2e00      	cmp	r6, #0
100109f6:	d100      	bne.n	100109fa <internal_at_ble_service_define+0x42>
100109f8:	e1ba      	b.n	10010d70 <internal_at_ble_service_define+0x3b8>
100109fa:	2400      	movs	r4, #0
100109fc:	4bc6      	ldr	r3, [pc, #792]	; (10010d18 <internal_at_ble_service_define+0x360>)
100109fe:	8034      	strh	r4, [r6, #0]
10010a00:	881b      	ldrh	r3, [r3, #0]
10010a02:	1db7      	adds	r7, r6, #6
10010a04:	1c21      	adds	r1, r4, #0
10010a06:	2210      	movs	r2, #16
10010a08:	8073      	strh	r3, [r6, #2]
10010a0a:	1c38      	adds	r0, r7, #0
10010a0c:	4bc3      	ldr	r3, [pc, #780]	; (10010d1c <internal_at_ble_service_define+0x364>)
10010a0e:	4798      	blx	r3
10010a10:	7828      	ldrb	r0, [r5, #0]
10010a12:	4bc3      	ldr	r3, [pc, #780]	; (10010d20 <internal_at_ble_service_define+0x368>)
10010a14:	4798      	blx	r3
10010a16:	1c69      	adds	r1, r5, #1
10010a18:	1c02      	adds	r2, r0, #0
10010a1a:	4bc2      	ldr	r3, [pc, #776]	; (10010d24 <internal_at_ble_service_define+0x36c>)
10010a1c:	1c38      	adds	r0, r7, #0
10010a1e:	4798      	blx	r3
10010a20:	2204      	movs	r2, #4
10010a22:	782b      	ldrb	r3, [r5, #0]
10010a24:	9d02      	ldr	r5, [sp, #8]
10010a26:	011b      	lsls	r3, r3, #4
10010a28:	4313      	orrs	r3, r2
10010a2a:	9a04      	ldr	r2, [sp, #16]
10010a2c:	7174      	strb	r4, [r6, #5]
10010a2e:	0192      	lsls	r2, r2, #6
10010a30:	4313      	orrs	r3, r2
10010a32:	7133      	strb	r3, [r6, #4]
10010a34:	2316      	movs	r3, #22
10010a36:	9a06      	ldr	r2, [sp, #24]
10010a38:	3512      	adds	r5, #18
10010a3a:	4353      	muls	r3, r2
10010a3c:	9a02      	ldr	r2, [sp, #8]
10010a3e:	3312      	adds	r3, #18
10010a40:	18d7      	adds	r7, r2, r3
10010a42:	42bd      	cmp	r5, r7
10010a44:	d00f      	beq.n	10010a66 <internal_at_ble_service_define+0xae>
10010a46:	4bb8      	ldr	r3, [pc, #736]	; (10010d28 <internal_at_ble_service_define+0x370>)
10010a48:	8829      	ldrh	r1, [r5, #0]
10010a4a:	9300      	str	r3, [sp, #0]
10010a4c:	230e      	movs	r3, #14
10010a4e:	aa06      	add	r2, sp, #24
10010a50:	189b      	adds	r3, r3, r2
10010a52:	9301      	str	r3, [sp, #4]
10010a54:	4cb5      	ldr	r4, [pc, #724]	; (10010d2c <internal_at_ble_service_define+0x374>)
10010a56:	1c30      	adds	r0, r6, #0
10010a58:	2201      	movs	r2, #1
10010a5a:	2302      	movs	r3, #2
10010a5c:	47a0      	blx	r4
10010a5e:	3516      	adds	r5, #22
10010a60:	1e04      	subs	r4, r0, #0
10010a62:	d0ee      	beq.n	10010a42 <internal_at_ble_service_define+0x8a>
10010a64:	e183      	b.n	10010d6e <internal_at_ble_service_define+0x3b6>
10010a66:	9f10      	ldr	r7, [sp, #64]	; 0x40
10010a68:	2300      	movs	r3, #0
10010a6a:	3714      	adds	r7, #20
10010a6c:	1c3d      	adds	r5, r7, #0
10010a6e:	9302      	str	r3, [sp, #8]
10010a70:	9b02      	ldr	r3, [sp, #8]
10010a72:	9a03      	ldr	r2, [sp, #12]
10010a74:	4293      	cmp	r3, r2
10010a76:	db00      	blt.n	10010a7a <internal_at_ble_service_define+0xc2>
10010a78:	e0bf      	b.n	10010bfa <internal_at_ble_service_define+0x242>
10010a7a:	4bad      	ldr	r3, [pc, #692]	; (10010d30 <internal_at_ble_service_define+0x378>)
10010a7c:	aa06      	add	r2, sp, #24
10010a7e:	9300      	str	r3, [sp, #0]
10010a80:	230e      	movs	r3, #14
10010a82:	189b      	adds	r3, r3, r2
10010a84:	9301      	str	r3, [sp, #4]
10010a86:	4ca9      	ldr	r4, [pc, #676]	; (10010d2c <internal_at_ble_service_define+0x374>)
10010a88:	1c30      	adds	r0, r6, #0
10010a8a:	2104      	movs	r1, #4
10010a8c:	2201      	movs	r2, #1
10010a8e:	2302      	movs	r3, #2
10010a90:	47a0      	blx	r4
10010a92:	1e04      	subs	r4, r0, #0
10010a94:	d000      	beq.n	10010a98 <internal_at_ble_service_define+0xe0>
10010a96:	e16a      	b.n	10010d6e <internal_at_ble_service_define+0x3b6>
10010a98:	1c2b      	adds	r3, r5, #0
10010a9a:	3b12      	subs	r3, #18
10010a9c:	7b2c      	ldrb	r4, [r5, #12]
10010a9e:	781b      	ldrb	r3, [r3, #0]
10010aa0:	1c21      	adds	r1, r4, #0
10010aa2:	1c1a      	adds	r2, r3, #0
10010aa4:	9304      	str	r3, [sp, #16]
10010aa6:	8828      	ldrh	r0, [r5, #0]
10010aa8:	4ba2      	ldr	r3, [pc, #648]	; (10010d34 <internal_at_ble_service_define+0x37c>)
10010aaa:	4798      	blx	r3
10010aac:	2303      	movs	r3, #3
10010aae:	4023      	ands	r3, r4
10010ab0:	3b03      	subs	r3, #3
10010ab2:	4259      	negs	r1, r3
10010ab4:	4159      	adcs	r1, r3
10010ab6:	2301      	movs	r3, #1
10010ab8:	08a4      	lsrs	r4, r4, #2
10010aba:	401c      	ands	r4, r3
10010abc:	430c      	orrs	r4, r1
10010abe:	896b      	ldrh	r3, [r5, #10]
10010ac0:	03e4      	lsls	r4, r4, #15
10010ac2:	431c      	orrs	r4, r3
10010ac4:	9007      	str	r0, [sp, #28]
10010ac6:	4b96      	ldr	r3, [pc, #600]	; (10010d20 <internal_at_ble_service_define+0x368>)
10010ac8:	9804      	ldr	r0, [sp, #16]
10010aca:	4798      	blx	r3
10010acc:	1c2a      	adds	r2, r5, #0
10010ace:	3a11      	subs	r2, #17
10010ad0:	9200      	str	r2, [sp, #0]
10010ad2:	3a03      	subs	r2, #3
10010ad4:	1c03      	adds	r3, r0, #0
10010ad6:	9201      	str	r2, [sp, #4]
10010ad8:	1c21      	adds	r1, r4, #0
10010ada:	1c30      	adds	r0, r6, #0
10010adc:	4c93      	ldr	r4, [pc, #588]	; (10010d2c <internal_at_ble_service_define+0x374>)
10010ade:	9a07      	ldr	r2, [sp, #28]
10010ae0:	47a0      	blx	r4
10010ae2:	1e04      	subs	r4, r0, #0
10010ae4:	d000      	beq.n	10010ae8 <internal_at_ble_service_define+0x130>
10010ae6:	e142      	b.n	10010d6e <internal_at_ble_service_define+0x3b6>
10010ae8:	22c0      	movs	r2, #192	; 0xc0
10010aea:	882b      	ldrh	r3, [r5, #0]
10010aec:	0052      	lsls	r2, r2, #1
10010aee:	4213      	tst	r3, r2
10010af0:	d104      	bne.n	10010afc <internal_at_ble_service_define+0x144>
10010af2:	8aab      	ldrh	r3, [r5, #20]
10010af4:	9304      	str	r3, [sp, #16]
10010af6:	2b00      	cmp	r3, #0
10010af8:	d116      	bne.n	10010b28 <internal_at_ble_service_define+0x170>
10010afa:	e03a      	b.n	10010b72 <internal_at_ble_service_define+0x1ba>
10010afc:	2201      	movs	r2, #1
10010afe:	09d9      	lsrs	r1, r3, #7
10010b00:	4011      	ands	r1, r2
10010b02:	05db      	lsls	r3, r3, #23
10010b04:	d501      	bpl.n	10010b0a <internal_at_ble_service_define+0x152>
10010b06:	2302      	movs	r3, #2
10010b08:	4319      	orrs	r1, r3
10010b0a:	4b8b      	ldr	r3, [pc, #556]	; (10010d38 <internal_at_ble_service_define+0x380>)
10010b0c:	aa06      	add	r2, sp, #24
10010b0e:	9300      	str	r3, [sp, #0]
10010b10:	230e      	movs	r3, #14
10010b12:	189b      	adds	r3, r3, r2
10010b14:	9301      	str	r3, [sp, #4]
10010b16:	4c85      	ldr	r4, [pc, #532]	; (10010d2c <internal_at_ble_service_define+0x374>)
10010b18:	0209      	lsls	r1, r1, #8
10010b1a:	1c30      	adds	r0, r6, #0
10010b1c:	2201      	movs	r2, #1
10010b1e:	2302      	movs	r3, #2
10010b20:	47a0      	blx	r4
10010b22:	1e04      	subs	r4, r0, #0
10010b24:	d0e5      	beq.n	10010af2 <internal_at_ble_service_define+0x13a>
10010b26:	e122      	b.n	10010d6e <internal_at_ble_service_define+0x3b6>
10010b28:	2380      	movs	r3, #128	; 0x80
10010b2a:	882a      	ldrh	r2, [r5, #0]
10010b2c:	7f2c      	ldrb	r4, [r5, #28]
10010b2e:	005b      	lsls	r3, r3, #1
10010b30:	401a      	ands	r2, r3
10010b32:	1c20      	adds	r0, r4, #0
10010b34:	2101      	movs	r1, #1
10010b36:	2a00      	cmp	r2, #0
10010b38:	d000      	beq.n	10010b3c <internal_at_ble_service_define+0x184>
10010b3a:	1c0a      	adds	r2, r1, #0
10010b3c:	4b7f      	ldr	r3, [pc, #508]	; (10010d3c <internal_at_ble_service_define+0x384>)
10010b3e:	4798      	blx	r3
10010b40:	2203      	movs	r2, #3
10010b42:	4022      	ands	r2, r4
10010b44:	3a03      	subs	r2, #3
10010b46:	4251      	negs	r1, r2
10010b48:	4151      	adcs	r1, r2
10010b4a:	4b7d      	ldr	r3, [pc, #500]	; (10010d40 <internal_at_ble_service_define+0x388>)
10010b4c:	1c0a      	adds	r2, r1, #0
10010b4e:	9300      	str	r3, [sp, #0]
10010b50:	1c2b      	adds	r3, r5, #0
10010b52:	0764      	lsls	r4, r4, #29
10010b54:	0fe4      	lsrs	r4, r4, #31
10010b56:	4322      	orrs	r2, r4
10010b58:	03d2      	lsls	r2, r2, #15
10010b5a:	4310      	orrs	r0, r2
10010b5c:	3320      	adds	r3, #32
10010b5e:	b282      	uxth	r2, r0
10010b60:	9301      	str	r3, [sp, #4]
10010b62:	4c72      	ldr	r4, [pc, #456]	; (10010d2c <internal_at_ble_service_define+0x374>)
10010b64:	1c30      	adds	r0, r6, #0
10010b66:	9904      	ldr	r1, [sp, #16]
10010b68:	2302      	movs	r3, #2
10010b6a:	47a0      	blx	r4
10010b6c:	1e04      	subs	r4, r0, #0
10010b6e:	d000      	beq.n	10010b72 <internal_at_ble_service_define+0x1ba>
10010b70:	e0fd      	b.n	10010d6e <internal_at_ble_service_define+0x3b6>
10010b72:	2101      	movs	r1, #1
10010b74:	882b      	ldrh	r3, [r5, #0]
10010b76:	420b      	tst	r3, r1
10010b78:	d011      	beq.n	10010b9e <internal_at_ble_service_define+0x1e6>
10010b7a:	7fa8      	ldrb	r0, [r5, #30]
10010b7c:	4b6f      	ldr	r3, [pc, #444]	; (10010d3c <internal_at_ble_service_define+0x384>)
10010b7e:	2200      	movs	r2, #0
10010b80:	4798      	blx	r3
10010b82:	4b70      	ldr	r3, [pc, #448]	; (10010d44 <internal_at_ble_service_define+0x38c>)
10010b84:	1c02      	adds	r2, r0, #0
10010b86:	9300      	str	r3, [sp, #0]
10010b88:	1c2b      	adds	r3, r5, #0
10010b8a:	3324      	adds	r3, #36	; 0x24
10010b8c:	9301      	str	r3, [sp, #4]
10010b8e:	4c67      	ldr	r4, [pc, #412]	; (10010d2c <internal_at_ble_service_define+0x374>)
10010b90:	1c30      	adds	r0, r6, #0
10010b92:	496d      	ldr	r1, [pc, #436]	; (10010d48 <internal_at_ble_service_define+0x390>)
10010b94:	2302      	movs	r3, #2
10010b96:	47a0      	blx	r4
10010b98:	1e04      	subs	r4, r0, #0
10010b9a:	d000      	beq.n	10010b9e <internal_at_ble_service_define+0x1e6>
10010b9c:	e0e7      	b.n	10010d6e <internal_at_ble_service_define+0x3b6>
10010b9e:	2330      	movs	r3, #48	; 0x30
10010ba0:	882a      	ldrh	r2, [r5, #0]
10010ba2:	421a      	tst	r2, r3
10010ba4:	d012      	beq.n	10010bcc <internal_at_ble_service_define+0x214>
10010ba6:	2101      	movs	r1, #1
10010ba8:	7f68      	ldrb	r0, [r5, #29]
10010baa:	1c0a      	adds	r2, r1, #0
10010bac:	4b63      	ldr	r3, [pc, #396]	; (10010d3c <internal_at_ble_service_define+0x384>)
10010bae:	4798      	blx	r3
10010bb0:	4b66      	ldr	r3, [pc, #408]	; (10010d4c <internal_at_ble_service_define+0x394>)
10010bb2:	1c02      	adds	r2, r0, #0
10010bb4:	9300      	str	r3, [sp, #0]
10010bb6:	1c2b      	adds	r3, r5, #0
10010bb8:	3322      	adds	r3, #34	; 0x22
10010bba:	9301      	str	r3, [sp, #4]
10010bbc:	4c5b      	ldr	r4, [pc, #364]	; (10010d2c <internal_at_ble_service_define+0x374>)
10010bbe:	1c30      	adds	r0, r6, #0
10010bc0:	4961      	ldr	r1, [pc, #388]	; (10010d48 <internal_at_ble_service_define+0x390>)
10010bc2:	2302      	movs	r3, #2
10010bc4:	47a0      	blx	r4
10010bc6:	1e04      	subs	r4, r0, #0
10010bc8:	d000      	beq.n	10010bcc <internal_at_ble_service_define+0x214>
10010bca:	e0d0      	b.n	10010d6e <internal_at_ble_service_define+0x3b6>
10010bcc:	69ab      	ldr	r3, [r5, #24]
10010bce:	2b00      	cmp	r3, #0
10010bd0:	d00e      	beq.n	10010bf0 <internal_at_ble_service_define+0x238>
10010bd2:	4b5f      	ldr	r3, [pc, #380]	; (10010d50 <internal_at_ble_service_define+0x398>)
10010bd4:	aa06      	add	r2, sp, #24
10010bd6:	9300      	str	r3, [sp, #0]
10010bd8:	230e      	movs	r3, #14
10010bda:	189b      	adds	r3, r3, r2
10010bdc:	9301      	str	r3, [sp, #4]
10010bde:	4c53      	ldr	r4, [pc, #332]	; (10010d2c <internal_at_ble_service_define+0x374>)
10010be0:	1c30      	adds	r0, r6, #0
10010be2:	2107      	movs	r1, #7
10010be4:	2201      	movs	r2, #1
10010be6:	2302      	movs	r3, #2
10010be8:	47a0      	blx	r4
10010bea:	1e04      	subs	r4, r0, #0
10010bec:	d000      	beq.n	10010bf0 <internal_at_ble_service_define+0x238>
10010bee:	e0be      	b.n	10010d6e <internal_at_ble_service_define+0x3b6>
10010bf0:	9b02      	ldr	r3, [sp, #8]
10010bf2:	353c      	adds	r5, #60	; 0x3c
10010bf4:	3301      	adds	r3, #1
10010bf6:	9302      	str	r3, [sp, #8]
10010bf8:	e73a      	b.n	10010a70 <internal_at_ble_service_define+0xb8>
10010bfa:	1c30      	adds	r0, r6, #0
10010bfc:	4b55      	ldr	r3, [pc, #340]	; (10010d54 <internal_at_ble_service_define+0x39c>)
10010bfe:	4798      	blx	r3
10010c00:	1e04      	subs	r4, r0, #0
10010c02:	d000      	beq.n	10010c06 <internal_at_ble_service_define+0x24e>
10010c04:	e0b3      	b.n	10010d6e <internal_at_ble_service_define+0x3b6>
10010c06:	8833      	ldrh	r3, [r6, #0]
10010c08:	9a05      	ldr	r2, [sp, #20]
10010c0a:	8013      	strh	r3, [r2, #0]
10010c0c:	8836      	ldrh	r6, [r6, #0]
10010c0e:	9b06      	ldr	r3, [sp, #24]
10010c10:	9a03      	ldr	r2, [sp, #12]
10010c12:	18f6      	adds	r6, r6, r3
10010c14:	b2b3      	uxth	r3, r6
10010c16:	9302      	str	r3, [sp, #8]
10010c18:	233c      	movs	r3, #60	; 0x3c
10010c1a:	4353      	muls	r3, r2
10010c1c:	9a10      	ldr	r2, [sp, #64]	; 0x40
10010c1e:	3314      	adds	r3, #20
10010c20:	18d3      	adds	r3, r2, r3
10010c22:	9304      	str	r3, [sp, #16]
10010c24:	9b04      	ldr	r3, [sp, #16]
10010c26:	429f      	cmp	r7, r3
10010c28:	d100      	bne.n	10010c2c <internal_at_ble_service_define+0x274>
10010c2a:	e0a0      	b.n	10010d6e <internal_at_ble_service_define+0x3b6>
10010c2c:	9b02      	ldr	r3, [sp, #8]
10010c2e:	1c9d      	adds	r5, r3, #2
10010c30:	1c3b      	adds	r3, r7, #0
10010c32:	b2ad      	uxth	r5, r5
10010c34:	3b14      	subs	r3, #20
10010c36:	801d      	strh	r5, [r3, #0]
10010c38:	9303      	str	r3, [sp, #12]
10010c3a:	893b      	ldrh	r3, [r7, #8]
10010c3c:	2b00      	cmp	r3, #0
10010c3e:	d108      	bne.n	10010c52 <internal_at_ble_service_define+0x29a>
10010c40:	23c0      	movs	r3, #192	; 0xc0
10010c42:	883a      	ldrh	r2, [r7, #0]
10010c44:	005b      	lsls	r3, r3, #1
10010c46:	421a      	tst	r2, r3
10010c48:	d026      	beq.n	10010c98 <internal_at_ble_service_define+0x2e0>
10010c4a:	9e02      	ldr	r6, [sp, #8]
10010c4c:	3603      	adds	r6, #3
10010c4e:	b2b5      	uxth	r5, r6
10010c50:	e022      	b.n	10010c98 <internal_at_ble_service_define+0x2e0>
10010c52:	2103      	movs	r1, #3
10010c54:	7b3b      	ldrb	r3, [r7, #12]
10010c56:	4019      	ands	r1, r3
10010c58:	3903      	subs	r1, #3
10010c5a:	424a      	negs	r2, r1
10010c5c:	414a      	adcs	r2, r1
10010c5e:	0759      	lsls	r1, r3, #29
10010c60:	0fc9      	lsrs	r1, r1, #31
10010c62:	4311      	orrs	r1, r2
10010c64:	03c9      	lsls	r1, r1, #15
10010c66:	897a      	ldrh	r2, [r7, #10]
10010c68:	2900      	cmp	r1, #0
10010c6a:	d007      	beq.n	10010c7c <internal_at_ble_service_define+0x2c4>
10010c6c:	6879      	ldr	r1, [r7, #4]
10010c6e:	2900      	cmp	r1, #0
10010c70:	d100      	bne.n	10010c74 <internal_at_ble_service_define+0x2bc>
10010c72:	4939      	ldr	r1, [pc, #228]	; (10010d58 <internal_at_ble_service_define+0x3a0>)
10010c74:	1c28      	adds	r0, r5, #0
10010c76:	4e39      	ldr	r6, [pc, #228]	; (10010d5c <internal_at_ble_service_define+0x3a4>)
10010c78:	47b0      	blx	r6
10010c7a:	e00a      	b.n	10010c92 <internal_at_ble_service_define+0x2da>
10010c7c:	1c28      	adds	r0, r5, #0
10010c7e:	4e37      	ldr	r6, [pc, #220]	; (10010d5c <internal_at_ble_service_define+0x3a4>)
10010c80:	47b0      	blx	r6
10010c82:	2800      	cmp	r0, #0
10010c84:	d172      	bne.n	10010d6c <internal_at_ble_service_define+0x3b4>
10010c86:	9b03      	ldr	r3, [sp, #12]
10010c88:	8939      	ldrh	r1, [r7, #8]
10010c8a:	8818      	ldrh	r0, [r3, #0]
10010c8c:	687a      	ldr	r2, [r7, #4]
10010c8e:	4b34      	ldr	r3, [pc, #208]	; (10010d60 <internal_at_ble_service_define+0x3a8>)
10010c90:	4798      	blx	r3
10010c92:	2800      	cmp	r0, #0
10010c94:	d0d4      	beq.n	10010c40 <internal_at_ble_service_define+0x288>
10010c96:	e069      	b.n	10010d6c <internal_at_ble_service_define+0x3b4>
10010c98:	8abb      	ldrh	r3, [r7, #20]
10010c9a:	2b00      	cmp	r3, #0
10010c9c:	d00a      	beq.n	10010cb4 <internal_at_ble_service_define+0x2fc>
10010c9e:	3501      	adds	r5, #1
10010ca0:	b2ad      	uxth	r5, r5
10010ca2:	843d      	strh	r5, [r7, #32]
10010ca4:	7f39      	ldrb	r1, [r7, #28]
10010ca6:	8afb      	ldrh	r3, [r7, #22]
10010ca8:	1c28      	adds	r0, r5, #0
10010caa:	693a      	ldr	r2, [r7, #16]
10010cac:	4e2d      	ldr	r6, [pc, #180]	; (10010d64 <internal_at_ble_service_define+0x3ac>)
10010cae:	47b0      	blx	r6
10010cb0:	2800      	cmp	r0, #0
10010cb2:	d15b      	bne.n	10010d6c <internal_at_ble_service_define+0x3b4>
10010cb4:	883b      	ldrh	r3, [r7, #0]
10010cb6:	07db      	lsls	r3, r3, #31
10010cb8:	d50d      	bpl.n	10010cd6 <internal_at_ble_service_define+0x31e>
10010cba:	2200      	movs	r2, #0
10010cbc:	3501      	adds	r5, #1
10010cbe:	b2ad      	uxth	r5, r5
10010cc0:	a909      	add	r1, sp, #36	; 0x24
10010cc2:	84bd      	strh	r5, [r7, #36]	; 0x24
10010cc4:	7fbb      	ldrb	r3, [r7, #30]
10010cc6:	1c28      	adds	r0, r5, #0
10010cc8:	700a      	strb	r2, [r1, #0]
10010cca:	704a      	strb	r2, [r1, #1]
10010ccc:	4e23      	ldr	r6, [pc, #140]	; (10010d5c <internal_at_ble_service_define+0x3a4>)
10010cce:	3202      	adds	r2, #2
10010cd0:	47b0      	blx	r6
10010cd2:	2800      	cmp	r0, #0
10010cd4:	d14a      	bne.n	10010d6c <internal_at_ble_service_define+0x3b4>
10010cd6:	2330      	movs	r3, #48	; 0x30
10010cd8:	883a      	ldrh	r2, [r7, #0]
10010cda:	421a      	tst	r2, r3
10010cdc:	d00d      	beq.n	10010cfa <internal_at_ble_service_define+0x342>
10010cde:	2200      	movs	r2, #0
10010ce0:	3501      	adds	r5, #1
10010ce2:	b2ad      	uxth	r5, r5
10010ce4:	a909      	add	r1, sp, #36	; 0x24
10010ce6:	847d      	strh	r5, [r7, #34]	; 0x22
10010ce8:	7f7b      	ldrb	r3, [r7, #29]
10010cea:	1c28      	adds	r0, r5, #0
10010cec:	700a      	strb	r2, [r1, #0]
10010cee:	704a      	strb	r2, [r1, #1]
10010cf0:	4e1a      	ldr	r6, [pc, #104]	; (10010d5c <internal_at_ble_service_define+0x3a4>)
10010cf2:	3202      	adds	r2, #2
10010cf4:	47b0      	blx	r6
10010cf6:	2800      	cmp	r0, #0
10010cf8:	d138      	bne.n	10010d6c <internal_at_ble_service_define+0x3b4>
10010cfa:	69b9      	ldr	r1, [r7, #24]
10010cfc:	2900      	cmp	r1, #0
10010cfe:	d006      	beq.n	10010d0e <internal_at_ble_service_define+0x356>
10010d00:	3501      	adds	r5, #1
10010d02:	b2ad      	uxth	r5, r5
10010d04:	1c28      	adds	r0, r5, #0
10010d06:	4b18      	ldr	r3, [pc, #96]	; (10010d68 <internal_at_ble_service_define+0x3b0>)
10010d08:	4798      	blx	r3
10010d0a:	2800      	cmp	r0, #0
10010d0c:	d12e      	bne.n	10010d6c <internal_at_ble_service_define+0x3b4>
10010d0e:	373c      	adds	r7, #60	; 0x3c
10010d10:	9502      	str	r5, [sp, #8]
10010d12:	e787      	b.n	10010c24 <internal_at_ble_service_define+0x26c>
10010d14:	10019c6c 	.word	0x10019c6c
10010d18:	1001ab5c 	.word	0x1001ab5c
10010d1c:	10014e69 	.word	0x10014e69
10010d20:	100106ed 	.word	0x100106ed
10010d24:	10014e57 	.word	0x10014e57
10010d28:	10017fc3 	.word	0x10017fc3
10010d2c:	10012b79 	.word	0x10012b79
10010d30:	10017fc5 	.word	0x10017fc5
10010d34:	100107b9 	.word	0x100107b9
10010d38:	10017fc1 	.word	0x10017fc1
10010d3c:	10010761 	.word	0x10010761
10010d40:	10017fbd 	.word	0x10017fbd
10010d44:	10017fbf 	.word	0x10017fbf
10010d48:	00008002 	.word	0x00008002
10010d4c:	10017fb9 	.word	0x10017fb9
10010d50:	10017fbb 	.word	0x10017fbb
10010d54:	10012a6d 	.word	0x10012a6d
10010d58:	10019c58 	.word	0x10019c58
10010d5c:	10010881 	.word	0x10010881
10010d60:	10012be9 	.word	0x10012be9
10010d64:	10010939 	.word	0x10010939
10010d68:	10010855 	.word	0x10010855
10010d6c:	1c04      	adds	r4, r0, #0
10010d6e:	1c20      	adds	r0, r4, #0
10010d70:	b00b      	add	sp, #44	; 0x2c
10010d72:	bdf0      	pop	{r4, r5, r6, r7, pc}

10010d74 <initi_gatt_server_module>:
10010d74:	2300      	movs	r3, #0
10010d76:	4a07      	ldr	r2, [pc, #28]	; (10010d94 <initi_gatt_server_module+0x20>)
10010d78:	7013      	strb	r3, [r2, #0]
10010d7a:	4a07      	ldr	r2, [pc, #28]	; (10010d98 <initi_gatt_server_module+0x24>)
10010d7c:	6013      	str	r3, [r2, #0]
10010d7e:	4a07      	ldr	r2, [pc, #28]	; (10010d9c <initi_gatt_server_module+0x28>)
10010d80:	6013      	str	r3, [r2, #0]
10010d82:	4a07      	ldr	r2, [pc, #28]	; (10010da0 <initi_gatt_server_module+0x2c>)
10010d84:	6013      	str	r3, [r2, #0]
10010d86:	4a07      	ldr	r2, [pc, #28]	; (10010da4 <initi_gatt_server_module+0x30>)
10010d88:	6013      	str	r3, [r2, #0]
10010d8a:	4a07      	ldr	r2, [pc, #28]	; (10010da8 <initi_gatt_server_module+0x34>)
10010d8c:	6013      	str	r3, [r2, #0]
10010d8e:	4a07      	ldr	r2, [pc, #28]	; (10010dac <initi_gatt_server_module+0x38>)
10010d90:	6013      	str	r3, [r2, #0]
10010d92:	4770      	bx	lr
10010d94:	10019c58 	.word	0x10019c58
10010d98:	10019c68 	.word	0x10019c68
10010d9c:	10019c64 	.word	0x10019c64
10010da0:	10019c54 	.word	0x10019c54
10010da4:	10019c60 	.word	0x10019c60
10010da8:	10019c5c 	.word	0x10019c5c
10010dac:	10019c6c 	.word	0x10019c6c

10010db0 <db_init>:
10010db0:	4b0a      	ldr	r3, [pc, #40]	; (10010ddc <db_init+0x2c>)
10010db2:	4a0b      	ldr	r2, [pc, #44]	; (10010de0 <db_init+0x30>)
10010db4:	6018      	str	r0, [r3, #0]
10010db6:	084b      	lsrs	r3, r1, #1
10010db8:	6013      	str	r3, [r2, #0]
10010dba:	4a0a      	ldr	r2, [pc, #40]	; (10010de4 <db_init+0x34>)
10010dbc:	18c3      	adds	r3, r0, r3
10010dbe:	6013      	str	r3, [r2, #0]
10010dc0:	4a09      	ldr	r2, [pc, #36]	; (10010de8 <db_init+0x38>)
10010dc2:	1841      	adds	r1, r0, r1
10010dc4:	6013      	str	r3, [r2, #0]
10010dc6:	2303      	movs	r3, #3
10010dc8:	2200      	movs	r2, #0
10010dca:	3103      	adds	r1, #3
10010dcc:	4399      	bics	r1, r3
10010dce:	4b07      	ldr	r3, [pc, #28]	; (10010dec <db_init+0x3c>)
10010dd0:	3904      	subs	r1, #4
10010dd2:	6019      	str	r1, [r3, #0]
10010dd4:	4b06      	ldr	r3, [pc, #24]	; (10010df0 <db_init+0x40>)
10010dd6:	601a      	str	r2, [r3, #0]
10010dd8:	4770      	bx	lr
10010dda:	46c0      	nop			; (mov r8, r8)
10010ddc:	10019c6c 	.word	0x10019c6c
10010de0:	10019c68 	.word	0x10019c68
10010de4:	10019c54 	.word	0x10019c54
10010de8:	10019c60 	.word	0x10019c60
10010dec:	10019c5c 	.word	0x10019c5c
10010df0:	10019c64 	.word	0x10019c64

10010df4 <at_ble_primary_service_define>:
10010df4:	b530      	push	{r4, r5, lr}
10010df6:	b085      	sub	sp, #20
10010df8:	ac08      	add	r4, sp, #32
10010dfa:	cc20      	ldmia	r4!, {r5}
10010dfc:	8824      	ldrh	r4, [r4, #0]
10010dfe:	9500      	str	r5, [sp, #0]
10010e00:	9401      	str	r4, [sp, #4]
10010e02:	2401      	movs	r4, #1
10010e04:	9402      	str	r4, [sp, #8]
10010e06:	4c02      	ldr	r4, [pc, #8]	; (10010e10 <at_ble_primary_service_define+0x1c>)
10010e08:	47a0      	blx	r4
10010e0a:	b005      	add	sp, #20
10010e0c:	bd30      	pop	{r4, r5, pc}
10010e0e:	46c0      	nop			; (mov r8, r8)
10010e10:	100109b9 	.word	0x100109b9

10010e14 <at_ble_characteristic_value_set>:
10010e14:	b570      	push	{r4, r5, r6, lr}
10010e16:	4b0b      	ldr	r3, [pc, #44]	; (10010e44 <at_ble_characteristic_value_set+0x30>)
10010e18:	1c06      	adds	r6, r0, #0
10010e1a:	1c0c      	adds	r4, r1, #0
10010e1c:	1c15      	adds	r5, r2, #0
10010e1e:	4798      	blx	r3
10010e20:	2800      	cmp	r0, #0
10010e22:	d008      	beq.n	10010e36 <at_ble_characteristic_value_set+0x22>
10010e24:	6880      	ldr	r0, [r0, #8]
10010e26:	2800      	cmp	r0, #0
10010e28:	d005      	beq.n	10010e36 <at_ble_characteristic_value_set+0x22>
10010e2a:	1c21      	adds	r1, r4, #0
10010e2c:	1c2a      	adds	r2, r5, #0
10010e2e:	4b06      	ldr	r3, [pc, #24]	; (10010e48 <at_ble_characteristic_value_set+0x34>)
10010e30:	4798      	blx	r3
10010e32:	2000      	movs	r0, #0
10010e34:	e004      	b.n	10010e40 <at_ble_characteristic_value_set+0x2c>
10010e36:	1c30      	adds	r0, r6, #0
10010e38:	1c29      	adds	r1, r5, #0
10010e3a:	1c22      	adds	r2, r4, #0
10010e3c:	4b03      	ldr	r3, [pc, #12]	; (10010e4c <at_ble_characteristic_value_set+0x38>)
10010e3e:	4798      	blx	r3
10010e40:	bd70      	pop	{r4, r5, r6, pc}
10010e42:	46c0      	nop			; (mov r8, r8)
10010e44:	10010721 	.word	0x10010721
10010e48:	10014e57 	.word	0x10014e57
10010e4c:	10012be9 	.word	0x10012be9

10010e50 <at_ble_characteristic_value_get>:
10010e50:	b570      	push	{r4, r5, r6, lr}
10010e52:	4b0c      	ldr	r3, [pc, #48]	; (10010e84 <at_ble_characteristic_value_get+0x34>)
10010e54:	1c06      	adds	r6, r0, #0
10010e56:	1c0c      	adds	r4, r1, #0
10010e58:	1c15      	adds	r5, r2, #0
10010e5a:	4798      	blx	r3
10010e5c:	2800      	cmp	r0, #0
10010e5e:	d00b      	beq.n	10010e78 <at_ble_characteristic_value_get+0x28>
10010e60:	6883      	ldr	r3, [r0, #8]
10010e62:	2b00      	cmp	r3, #0
10010e64:	d008      	beq.n	10010e78 <at_ble_characteristic_value_get+0x28>
10010e66:	8883      	ldrh	r3, [r0, #4]
10010e68:	802b      	strh	r3, [r5, #0]
10010e6a:	8882      	ldrh	r2, [r0, #4]
10010e6c:	6881      	ldr	r1, [r0, #8]
10010e6e:	4b06      	ldr	r3, [pc, #24]	; (10010e88 <at_ble_characteristic_value_get+0x38>)
10010e70:	1c20      	adds	r0, r4, #0
10010e72:	4798      	blx	r3
10010e74:	2000      	movs	r0, #0
10010e76:	e004      	b.n	10010e82 <at_ble_characteristic_value_get+0x32>
10010e78:	1c30      	adds	r0, r6, #0
10010e7a:	1c29      	adds	r1, r5, #0
10010e7c:	1c22      	adds	r2, r4, #0
10010e7e:	4b03      	ldr	r3, [pc, #12]	; (10010e8c <at_ble_characteristic_value_get+0x3c>)
10010e80:	4798      	blx	r3
10010e82:	bd70      	pop	{r4, r5, r6, pc}
10010e84:	10010721 	.word	0x10010721
10010e88:	10014e57 	.word	0x10014e57
10010e8c:	10012c75 	.word	0x10012c75

10010e90 <at_ble_write_authorize_reply>:
10010e90:	b5f0      	push	{r4, r5, r6, r7, lr}
10010e92:	b085      	sub	sp, #20
10010e94:	1c04      	adds	r4, r0, #0
10010e96:	9101      	str	r1, [sp, #4]
10010e98:	2900      	cmp	r1, #0
10010e9a:	d128      	bne.n	10010eee <at_ble_write_authorize_reply+0x5e>
10010e9c:	8843      	ldrh	r3, [r0, #2]
10010e9e:	1c27      	adds	r7, r4, #0
10010ea0:	9300      	str	r3, [sp, #0]
10010ea2:	1c18      	adds	r0, r3, #0
10010ea4:	4b16      	ldr	r3, [pc, #88]	; (10010f00 <at_ble_write_authorize_reply+0x70>)
10010ea6:	4798      	blx	r3
10010ea8:	3708      	adds	r7, #8
10010eaa:	2800      	cmp	r0, #0
10010eac:	d009      	beq.n	10010ec2 <at_ble_write_authorize_reply+0x32>
10010eae:	6880      	ldr	r0, [r0, #8]
10010eb0:	2800      	cmp	r0, #0
10010eb2:	d006      	beq.n	10010ec2 <at_ble_write_authorize_reply+0x32>
10010eb4:	88a3      	ldrh	r3, [r4, #4]
10010eb6:	88e2      	ldrh	r2, [r4, #6]
10010eb8:	18c0      	adds	r0, r0, r3
10010eba:	1c39      	adds	r1, r7, #0
10010ebc:	4b11      	ldr	r3, [pc, #68]	; (10010f04 <at_ble_write_authorize_reply+0x74>)
10010ebe:	4798      	blx	r3
10010ec0:	e015      	b.n	10010eee <at_ble_write_authorize_reply+0x5e>
10010ec2:	ab02      	add	r3, sp, #8
10010ec4:	1d9e      	adds	r6, r3, #6
10010ec6:	2300      	movs	r3, #0
10010ec8:	4d0f      	ldr	r5, [pc, #60]	; (10010f08 <at_ble_write_authorize_reply+0x78>)
10010eca:	8033      	strh	r3, [r6, #0]
10010ecc:	6829      	ldr	r1, [r5, #0]
10010ece:	1c32      	adds	r2, r6, #0
10010ed0:	4b0e      	ldr	r3, [pc, #56]	; (10010f0c <at_ble_write_authorize_reply+0x7c>)
10010ed2:	9800      	ldr	r0, [sp, #0]
10010ed4:	4798      	blx	r3
10010ed6:	682b      	ldr	r3, [r5, #0]
10010ed8:	88a0      	ldrh	r0, [r4, #4]
10010eda:	88e2      	ldrh	r2, [r4, #6]
10010edc:	1818      	adds	r0, r3, r0
10010ede:	1c39      	adds	r1, r7, #0
10010ee0:	4b08      	ldr	r3, [pc, #32]	; (10010f04 <at_ble_write_authorize_reply+0x74>)
10010ee2:	4798      	blx	r3
10010ee4:	8860      	ldrh	r0, [r4, #2]
10010ee6:	8832      	ldrh	r2, [r6, #0]
10010ee8:	6829      	ldr	r1, [r5, #0]
10010eea:	4b09      	ldr	r3, [pc, #36]	; (10010f10 <at_ble_write_authorize_reply+0x80>)
10010eec:	4798      	blx	r3
10010eee:	8860      	ldrh	r0, [r4, #2]
10010ef0:	8821      	ldrh	r1, [r4, #0]
10010ef2:	9a01      	ldr	r2, [sp, #4]
10010ef4:	4b07      	ldr	r3, [pc, #28]	; (10010f14 <at_ble_write_authorize_reply+0x84>)
10010ef6:	4798      	blx	r3
10010ef8:	2000      	movs	r0, #0
10010efa:	b005      	add	sp, #20
10010efc:	bdf0      	pop	{r4, r5, r6, r7, pc}
10010efe:	46c0      	nop			; (mov r8, r8)
10010f00:	10010721 	.word	0x10010721
10010f04:	10014e57 	.word	0x10014e57
10010f08:	100181c8 	.word	0x100181c8
10010f0c:	10010e51 	.word	0x10010e51
10010f10:	10010e15 	.word	0x10010e15
10010f14:	100126ed 	.word	0x100126ed

10010f18 <gatts_handle_read_req>:
10010f18:	b538      	push	{r3, r4, r5, lr}
10010f1a:	1c0c      	adds	r4, r1, #0
10010f1c:	4b07      	ldr	r3, [pc, #28]	; (10010f3c <gatts_handle_read_req+0x24>)
10010f1e:	4798      	blx	r3
10010f20:	8865      	ldrh	r5, [r4, #2]
10010f22:	4b07      	ldr	r3, [pc, #28]	; (10010f40 <gatts_handle_read_req+0x28>)
10010f24:	1c28      	adds	r0, r5, #0
10010f26:	4798      	blx	r3
10010f28:	7883      	ldrb	r3, [r0, #2]
10010f2a:	2026      	movs	r0, #38	; 0x26
10010f2c:	07db      	lsls	r3, r3, #31
10010f2e:	d404      	bmi.n	10010f3a <gatts_handle_read_req+0x22>
10010f30:	8820      	ldrh	r0, [r4, #0]
10010f32:	1c29      	adds	r1, r5, #0
10010f34:	4b03      	ldr	r3, [pc, #12]	; (10010f44 <gatts_handle_read_req+0x2c>)
10010f36:	4798      	blx	r3
10010f38:	203b      	movs	r0, #59	; 0x3b
10010f3a:	bd38      	pop	{r3, r4, r5, pc}
10010f3c:	10012631 	.word	0x10012631
10010f40:	10010721 	.word	0x10010721
10010f44:	10010989 	.word	0x10010989

10010f48 <gatts_handle_att_info_req>:
10010f48:	b538      	push	{r3, r4, r5, lr}
10010f4a:	1c0d      	adds	r5, r1, #0
10010f4c:	4b0a      	ldr	r3, [pc, #40]	; (10010f78 <gatts_handle_att_info_req+0x30>)
10010f4e:	1c14      	adds	r4, r2, #0
10010f50:	4798      	blx	r3
10010f52:	882d      	ldrh	r5, [r5, #0]
10010f54:	4b09      	ldr	r3, [pc, #36]	; (10010f7c <gatts_handle_att_info_req+0x34>)
10010f56:	1c28      	adds	r0, r5, #0
10010f58:	4798      	blx	r3
10010f5a:	0a22      	lsrs	r2, r4, #8
10010f5c:	1c03      	adds	r3, r0, #0
10010f5e:	4c08      	ldr	r4, [pc, #32]	; (10010f80 <gatts_handle_att_info_req+0x38>)
10010f60:	b291      	uxth	r1, r2
10010f62:	2800      	cmp	r0, #0
10010f64:	d003      	beq.n	10010f6e <gatts_handle_att_info_req+0x26>
10010f66:	8882      	ldrh	r2, [r0, #4]
10010f68:	2300      	movs	r3, #0
10010f6a:	1c28      	adds	r0, r5, #0
10010f6c:	e001      	b.n	10010f72 <gatts_handle_att_info_req+0x2a>
10010f6e:	1c28      	adds	r0, r5, #0
10010f70:	2201      	movs	r2, #1
10010f72:	47a0      	blx	r4
10010f74:	203b      	movs	r0, #59	; 0x3b
10010f76:	bd38      	pop	{r3, r4, r5, pc}
10010f78:	10012675 	.word	0x10012675
10010f7c:	10010721 	.word	0x10010721
10010f80:	10012731 	.word	0x10012731

10010f84 <gatts_handle_write_req>:
10010f84:	b510      	push	{r4, lr}
10010f86:	1c14      	adds	r4, r2, #0
10010f88:	4b07      	ldr	r3, [pc, #28]	; (10010fa8 <gatts_handle_write_req+0x24>)
10010f8a:	4798      	blx	r3
10010f8c:	4b07      	ldr	r3, [pc, #28]	; (10010fac <gatts_handle_write_req+0x28>)
10010f8e:	8860      	ldrh	r0, [r4, #2]
10010f90:	4798      	blx	r3
10010f92:	2302      	movs	r3, #2
10010f94:	7881      	ldrb	r1, [r0, #2]
10010f96:	2022      	movs	r0, #34	; 0x22
10010f98:	4019      	ands	r1, r3
10010f9a:	d103      	bne.n	10010fa4 <gatts_handle_write_req+0x20>
10010f9c:	1c20      	adds	r0, r4, #0
10010f9e:	4b04      	ldr	r3, [pc, #16]	; (10010fb0 <gatts_handle_write_req+0x2c>)
10010fa0:	4798      	blx	r3
10010fa2:	201f      	movs	r0, #31
10010fa4:	bd10      	pop	{r4, pc}
10010fa6:	46c0      	nop			; (mov r8, r8)
10010fa8:	1001263d 	.word	0x1001263d
10010fac:	10010721 	.word	0x10010721
10010fb0:	10010e91 	.word	0x10010e91

10010fb4 <at_ble_notification_send>:
10010fb4:	b5f0      	push	{r4, r5, r6, r7, lr}
10010fb6:	4d17      	ldr	r5, [pc, #92]	; (10011014 <at_ble_notification_send+0x60>)
10010fb8:	4c17      	ldr	r4, [pc, #92]	; (10011018 <at_ble_notification_send+0x64>)
10010fba:	682a      	ldr	r2, [r5, #0]
10010fbc:	44a5      	add	sp, r4
10010fbe:	23d2      	movs	r3, #210	; 0xd2
10010fc0:	2a04      	cmp	r2, #4
10010fc2:	d822      	bhi.n	1001100a <at_ble_notification_send+0x56>
10010fc4:	1c06      	adds	r6, r0, #0
10010fc6:	4b15      	ldr	r3, [pc, #84]	; (1001101c <at_ble_notification_send+0x68>)
10010fc8:	1c08      	adds	r0, r1, #0
10010fca:	1c0c      	adds	r4, r1, #0
10010fcc:	4798      	blx	r3
10010fce:	2800      	cmp	r0, #0
10010fd0:	d008      	beq.n	10010fe4 <at_ble_notification_send+0x30>
10010fd2:	6883      	ldr	r3, [r0, #8]
10010fd4:	2b00      	cmp	r3, #0
10010fd6:	d005      	beq.n	10010fe4 <at_ble_notification_send+0x30>
10010fd8:	8882      	ldrh	r2, [r0, #4]
10010fda:	1c21      	adds	r1, r4, #0
10010fdc:	9200      	str	r2, [sp, #0]
10010fde:	2012      	movs	r0, #18
10010fe0:	1c32      	adds	r2, r6, #0
10010fe2:	e00c      	b.n	10010ffe <at_ble_notification_send+0x4a>
10010fe4:	270e      	movs	r7, #14
10010fe6:	446f      	add	r7, sp
10010fe8:	1c39      	adds	r1, r7, #0
10010fea:	aa04      	add	r2, sp, #16
10010fec:	4b0c      	ldr	r3, [pc, #48]	; (10011020 <at_ble_notification_send+0x6c>)
10010fee:	1c20      	adds	r0, r4, #0
10010ff0:	4798      	blx	r3
10010ff2:	2012      	movs	r0, #18
10010ff4:	1c21      	adds	r1, r4, #0
10010ff6:	1c32      	adds	r2, r6, #0
10010ff8:	883b      	ldrh	r3, [r7, #0]
10010ffa:	9300      	str	r3, [sp, #0]
10010ffc:	ab04      	add	r3, sp, #16
10010ffe:	4c09      	ldr	r4, [pc, #36]	; (10011024 <at_ble_notification_send+0x70>)
10011000:	47a0      	blx	r4
10011002:	682b      	ldr	r3, [r5, #0]
10011004:	3301      	adds	r3, #1
10011006:	602b      	str	r3, [r5, #0]
10011008:	2300      	movs	r3, #0
1001100a:	1c18      	adds	r0, r3, #0
1001100c:	2385      	movs	r3, #133	; 0x85
1001100e:	009b      	lsls	r3, r3, #2
10011010:	449d      	add	sp, r3
10011012:	bdf0      	pop	{r4, r5, r6, r7, pc}
10011014:	10019cf8 	.word	0x10019cf8
10011018:	fffffdec 	.word	0xfffffdec
1001101c:	10010721 	.word	0x10010721
10011020:	10012c75 	.word	0x10012c75
10011024:	10012779 	.word	0x10012779

10011028 <init_l2cc_task_module>:
10011028:	220a      	movs	r2, #10
1001102a:	4b01      	ldr	r3, [pc, #4]	; (10011030 <init_l2cc_task_module+0x8>)
1001102c:	701a      	strb	r2, [r3, #0]
1001102e:	4770      	bx	lr
10011030:	100181c4 	.word	0x100181c4

10011034 <l2cc_data_send_rsp_handler>:
10011034:	b510      	push	{r4, lr}
10011036:	7802      	ldrb	r2, [r0, #0]
10011038:	700a      	strb	r2, [r1, #0]
1001103a:	7883      	ldrb	r3, [r0, #2]
1001103c:	7844      	ldrb	r4, [r0, #1]
1001103e:	021b      	lsls	r3, r3, #8
10011040:	4323      	orrs	r3, r4
10011042:	804b      	strh	r3, [r1, #2]
10011044:	7903      	ldrb	r3, [r0, #4]
10011046:	78c0      	ldrb	r0, [r0, #3]
10011048:	021b      	lsls	r3, r3, #8
1001104a:	4303      	orrs	r3, r0
1001104c:	808b      	strh	r3, [r1, #4]
1001104e:	2a00      	cmp	r2, #0
10011050:	d103      	bne.n	1001105a <l2cc_data_send_rsp_handler+0x26>
10011052:	4a02      	ldr	r2, [pc, #8]	; (1001105c <l2cc_data_send_rsp_handler+0x28>)
10011054:	7813      	ldrb	r3, [r2, #0]
10011056:	3301      	adds	r3, #1
10011058:	7013      	strb	r3, [r2, #0]
1001105a:	bd10      	pop	{r4, pc}
1001105c:	100181c4 	.word	0x100181c4

10011060 <l2cc_data_received_handler>:
10011060:	b508      	push	{r3, lr}
10011062:	1c03      	adds	r3, r0, #0
10011064:	7842      	ldrb	r2, [r0, #1]
10011066:	7800      	ldrb	r0, [r0, #0]
10011068:	0212      	lsls	r2, r2, #8
1001106a:	4302      	orrs	r2, r0
1001106c:	800a      	strh	r2, [r1, #0]
1001106e:	78da      	ldrb	r2, [r3, #3]
10011070:	7898      	ldrb	r0, [r3, #2]
10011072:	0212      	lsls	r2, r2, #8
10011074:	4302      	orrs	r2, r0
10011076:	804a      	strh	r2, [r1, #2]
10011078:	795a      	ldrb	r2, [r3, #5]
1001107a:	7918      	ldrb	r0, [r3, #4]
1001107c:	0212      	lsls	r2, r2, #8
1001107e:	4302      	orrs	r2, r0
10011080:	808a      	strh	r2, [r1, #4]
10011082:	1d88      	adds	r0, r1, #6
10011084:	1d99      	adds	r1, r3, #6
10011086:	4b01      	ldr	r3, [pc, #4]	; (1001108c <l2cc_data_received_handler+0x2c>)
10011088:	4798      	blx	r3
1001108a:	bd08      	pop	{r3, pc}
1001108c:	10014e57 	.word	0x10014e57

10011090 <at_ble_authenticate>:
10011090:	b5f0      	push	{r4, r5, r6, r7, lr}
10011092:	1c0c      	adds	r4, r1, #0
10011094:	211f      	movs	r1, #31
10011096:	b08b      	sub	sp, #44	; 0x2c
10011098:	9307      	str	r3, [sp, #28]
1001109a:	ab02      	add	r3, sp, #8
1001109c:	18c9      	adds	r1, r1, r3
1001109e:	230f      	movs	r3, #15
100110a0:	700b      	strb	r3, [r1, #0]
100110a2:	4b40      	ldr	r3, [pc, #256]	; (100111a4 <at_ble_authenticate+0x114>)
100110a4:	1c05      	adds	r5, r0, #0
100110a6:	1c16      	adds	r6, r2, #0
100110a8:	4798      	blx	r3
100110aa:	1c07      	adds	r7, r0, #0
100110ac:	2001      	movs	r0, #1
100110ae:	2f07      	cmp	r7, #7
100110b0:	d875      	bhi.n	1001119e <at_ble_authenticate+0x10e>
100110b2:	2c00      	cmp	r4, #0
100110b4:	d113      	bne.n	100110de <at_ble_authenticate+0x4e>
100110b6:	2312      	movs	r3, #18
100110b8:	435f      	muls	r7, r3
100110ba:	4b3b      	ldr	r3, [pc, #236]	; (100111a8 <at_ble_authenticate+0x118>)
100110bc:	5cfb      	ldrb	r3, [r7, r3]
100110be:	4283      	cmp	r3, r0
100110c0:	d001      	beq.n	100110c6 <at_ble_authenticate+0x36>
100110c2:	20cf      	movs	r0, #207	; 0xcf
100110c4:	e06b      	b.n	1001119e <at_ble_authenticate+0x10e>
100110c6:	9504      	str	r5, [sp, #16]
100110c8:	9400      	str	r4, [sp, #0]
100110ca:	9401      	str	r4, [sp, #4]
100110cc:	9402      	str	r4, [sp, #8]
100110ce:	9403      	str	r4, [sp, #12]
100110d0:	1c20      	adds	r0, r4, #0
100110d2:	1c21      	adds	r1, r4, #0
100110d4:	1c22      	adds	r2, r4, #0
100110d6:	1c23      	adds	r3, r4, #0
100110d8:	4d34      	ldr	r5, [pc, #208]	; (100111ac <at_ble_authenticate+0x11c>)
100110da:	47a8      	blx	r5
100110dc:	e05e      	b.n	1001119c <at_ble_authenticate+0x10c>
100110de:	7922      	ldrb	r2, [r4, #4]
100110e0:	2a06      	cmp	r2, #6
100110e2:	d9ee      	bls.n	100110c2 <at_ble_authenticate+0x32>
100110e4:	7963      	ldrb	r3, [r4, #5]
100110e6:	2b10      	cmp	r3, #16
100110e8:	d8eb      	bhi.n	100110c2 <at_ble_authenticate+0x32>
100110ea:	429a      	cmp	r2, r3
100110ec:	d8e9      	bhi.n	100110c2 <at_ble_authenticate+0x32>
100110ee:	7a23      	ldrb	r3, [r4, #8]
100110f0:	2b04      	cmp	r3, #4
100110f2:	d8e6      	bhi.n	100110c2 <at_ble_authenticate+0x32>
100110f4:	79a3      	ldrb	r3, [r4, #6]
100110f6:	2b07      	cmp	r3, #7
100110f8:	d8e3      	bhi.n	100110c2 <at_ble_authenticate+0x32>
100110fa:	79e3      	ldrb	r3, [r4, #7]
100110fc:	2b07      	cmp	r3, #7
100110fe:	d8e0      	bhi.n	100110c2 <at_ble_authenticate+0x32>
10011100:	78a3      	ldrb	r3, [r4, #2]
10011102:	2b00      	cmp	r3, #0
10011104:	d006      	beq.n	10011114 <at_ble_authenticate+0x84>
10011106:	2e00      	cmp	r6, #0
10011108:	d0db      	beq.n	100110c2 <at_ble_authenticate+0x32>
1001110a:	4829      	ldr	r0, [pc, #164]	; (100111b0 <at_ble_authenticate+0x120>)
1001110c:	1c31      	adds	r1, r6, #0
1001110e:	221c      	movs	r2, #28
10011110:	4b28      	ldr	r3, [pc, #160]	; (100111b4 <at_ble_authenticate+0x124>)
10011112:	4798      	blx	r3
10011114:	9b07      	ldr	r3, [sp, #28]
10011116:	2b00      	cmp	r3, #0
10011118:	d005      	beq.n	10011126 <at_ble_authenticate+0x96>
1001111a:	4827      	ldr	r0, [pc, #156]	; (100111b8 <at_ble_authenticate+0x128>)
1001111c:	1c19      	adds	r1, r3, #0
1001111e:	309a      	adds	r0, #154	; 0x9a
10011120:	2210      	movs	r2, #16
10011122:	4b24      	ldr	r3, [pc, #144]	; (100111b4 <at_ble_authenticate+0x124>)
10011124:	4798      	blx	r3
10011126:	7863      	ldrb	r3, [r4, #1]
10011128:	78a2      	ldrb	r2, [r4, #2]
1001112a:	009b      	lsls	r3, r3, #2
1001112c:	4313      	orrs	r3, r2
1001112e:	2212      	movs	r2, #18
10011130:	4357      	muls	r7, r2
10011132:	4a1d      	ldr	r2, [pc, #116]	; (100111a8 <at_ble_authenticate+0x118>)
10011134:	b2db      	uxtb	r3, r3
10011136:	5cba      	ldrb	r2, [r7, r2]
10011138:	2a00      	cmp	r2, #0
1001113a:	d116      	bne.n	1001116a <at_ble_authenticate+0xda>
1001113c:	79a0      	ldrb	r0, [r4, #6]
1001113e:	0742      	lsls	r2, r0, #29
10011140:	d502      	bpl.n	10011148 <at_ble_authenticate+0xb8>
10011142:	9a07      	ldr	r2, [sp, #28]
10011144:	2a00      	cmp	r2, #0
10011146:	d0bc      	beq.n	100110c2 <at_ble_authenticate+0x32>
10011148:	07c2      	lsls	r2, r0, #31
1001114a:	d501      	bpl.n	10011150 <at_ble_authenticate+0xc0>
1001114c:	2e00      	cmp	r6, #0
1001114e:	d0b8      	beq.n	100110c2 <at_ble_authenticate+0x32>
10011150:	7966      	ldrb	r6, [r4, #5]
10011152:	7821      	ldrb	r1, [r4, #0]
10011154:	78e2      	ldrb	r2, [r4, #3]
10011156:	9600      	str	r6, [sp, #0]
10011158:	9001      	str	r0, [sp, #4]
1001115a:	79e0      	ldrb	r0, [r4, #7]
1001115c:	9002      	str	r0, [sp, #8]
1001115e:	7a20      	ldrb	r0, [r4, #8]
10011160:	4c16      	ldr	r4, [pc, #88]	; (100111bc <at_ble_authenticate+0x12c>)
10011162:	9003      	str	r0, [sp, #12]
10011164:	1c28      	adds	r0, r5, #0
10011166:	47a0      	blx	r4
10011168:	e018      	b.n	1001119c <at_ble_authenticate+0x10c>
1001116a:	2a01      	cmp	r2, #1
1001116c:	d1a9      	bne.n	100110c2 <at_ble_authenticate+0x32>
1001116e:	79e0      	ldrb	r0, [r4, #7]
10011170:	0742      	lsls	r2, r0, #29
10011172:	d502      	bpl.n	1001117a <at_ble_authenticate+0xea>
10011174:	9a07      	ldr	r2, [sp, #28]
10011176:	2a00      	cmp	r2, #0
10011178:	d0a3      	beq.n	100110c2 <at_ble_authenticate+0x32>
1001117a:	07c2      	lsls	r2, r0, #31
1001117c:	d501      	bpl.n	10011182 <at_ble_authenticate+0xf2>
1001117e:	2e00      	cmp	r6, #0
10011180:	d09f      	beq.n	100110c2 <at_ble_authenticate+0x32>
10011182:	7966      	ldrb	r6, [r4, #5]
10011184:	7821      	ldrb	r1, [r4, #0]
10011186:	78e2      	ldrb	r2, [r4, #3]
10011188:	9600      	str	r6, [sp, #0]
1001118a:	79a6      	ldrb	r6, [r4, #6]
1001118c:	9002      	str	r0, [sp, #8]
1001118e:	9601      	str	r6, [sp, #4]
10011190:	7a20      	ldrb	r0, [r4, #8]
10011192:	9504      	str	r5, [sp, #16]
10011194:	9003      	str	r0, [sp, #12]
10011196:	4c05      	ldr	r4, [pc, #20]	; (100111ac <at_ble_authenticate+0x11c>)
10011198:	2001      	movs	r0, #1
1001119a:	47a0      	blx	r4
1001119c:	2000      	movs	r0, #0
1001119e:	b00b      	add	sp, #44	; 0x2c
100111a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
100111a2:	46c0      	nop			; (mov r8, r8)
100111a4:	10011591 	.word	0x10011591
100111a8:	1001ab5e 	.word	0x1001ab5e
100111ac:	10011b01 	.word	0x10011b01
100111b0:	1001ac6c 	.word	0x1001ac6c
100111b4:	10014e57 	.word	0x10014e57
100111b8:	1001abee 	.word	0x1001abee
100111bc:	100118e1 	.word	0x100118e1

100111c0 <at_ble_pair_key_reply>:
100111c0:	b5f0      	push	{r4, r5, r6, r7, lr}
100111c2:	b085      	sub	sp, #20
100111c4:	1c05      	adds	r5, r0, #0
100111c6:	1c0c      	adds	r4, r1, #0
100111c8:	1c16      	adds	r6, r2, #0
100111ca:	2100      	movs	r1, #0
100111cc:	4668      	mov	r0, sp
100111ce:	2210      	movs	r2, #16
100111d0:	4b18      	ldr	r3, [pc, #96]	; (10011234 <at_ble_pair_key_reply+0x74>)
100111d2:	4798      	blx	r3
100111d4:	2101      	movs	r1, #1
100111d6:	2e00      	cmp	r6, #0
100111d8:	d101      	bne.n	100111de <at_ble_pair_key_reply+0x1e>
100111da:	1c31      	adds	r1, r6, #0
100111dc:	466e      	mov	r6, sp
100111de:	2c00      	cmp	r4, #0
100111e0:	d116      	bne.n	10011210 <at_ble_pair_key_reply+0x50>
100111e2:	2701      	movs	r7, #1
100111e4:	1c23      	adds	r3, r4, #0
100111e6:	1d70      	adds	r0, r6, #5
100111e8:	3e01      	subs	r6, #1
100111ea:	7802      	ldrb	r2, [r0, #0]
100111ec:	3801      	subs	r0, #1
100111ee:	3a30      	subs	r2, #48	; 0x30
100111f0:	437a      	muls	r2, r7
100111f2:	189b      	adds	r3, r3, r2
100111f4:	220a      	movs	r2, #10
100111f6:	4357      	muls	r7, r2
100111f8:	42b0      	cmp	r0, r6
100111fa:	d1f6      	bne.n	100111ea <at_ble_pair_key_reply+0x2a>
100111fc:	466a      	mov	r2, sp
100111fe:	4668      	mov	r0, sp
10011200:	7013      	strb	r3, [r2, #0]
10011202:	0a1a      	lsrs	r2, r3, #8
10011204:	7042      	strb	r2, [r0, #1]
10011206:	0c1a      	lsrs	r2, r3, #16
10011208:	0e1b      	lsrs	r3, r3, #24
1001120a:	7082      	strb	r2, [r0, #2]
1001120c:	70c3      	strb	r3, [r0, #3]
1001120e:	e009      	b.n	10011224 <at_ble_pair_key_reply+0x64>
10011210:	20cf      	movs	r0, #207	; 0xcf
10011212:	2c01      	cmp	r4, #1
10011214:	d10c      	bne.n	10011230 <at_ble_pair_key_reply+0x70>
10011216:	2300      	movs	r3, #0
10011218:	4668      	mov	r0, sp
1001121a:	5cf2      	ldrb	r2, [r6, r3]
1001121c:	54c2      	strb	r2, [r0, r3]
1001121e:	3301      	adds	r3, #1
10011220:	2b10      	cmp	r3, #16
10011222:	d1f9      	bne.n	10011218 <at_ble_pair_key_reply+0x58>
10011224:	2004      	movs	r0, #4
10011226:	466a      	mov	r2, sp
10011228:	1c2b      	adds	r3, r5, #0
1001122a:	4c03      	ldr	r4, [pc, #12]	; (10011238 <at_ble_pair_key_reply+0x78>)
1001122c:	47a0      	blx	r4
1001122e:	2000      	movs	r0, #0
10011230:	b005      	add	sp, #20
10011232:	bdf0      	pop	{r4, r5, r6, r7, pc}
10011234:	10014e69 	.word	0x10014e69
10011238:	10011b7d 	.word	0x10011b7d

1001123c <at_ble_send_slave_sec_request>:
1001123c:	b570      	push	{r4, r5, r6, lr}
1001123e:	4b0c      	ldr	r3, [pc, #48]	; (10011270 <at_ble_send_slave_sec_request+0x34>)
10011240:	1c0e      	adds	r6, r1, #0
10011242:	2100      	movs	r1, #0
10011244:	1c05      	adds	r5, r0, #0
10011246:	1c14      	adds	r4, r2, #0
10011248:	4798      	blx	r3
1001124a:	2301      	movs	r3, #1
1001124c:	2807      	cmp	r0, #7
1001124e:	d80d      	bhi.n	1001126c <at_ble_send_slave_sec_request+0x30>
10011250:	3311      	adds	r3, #17
10011252:	4358      	muls	r0, r3
10011254:	4b07      	ldr	r3, [pc, #28]	; (10011274 <at_ble_send_slave_sec_request+0x38>)
10011256:	5cc2      	ldrb	r2, [r0, r3]
10011258:	23e0      	movs	r3, #224	; 0xe0
1001125a:	2a01      	cmp	r2, #1
1001125c:	d106      	bne.n	1001126c <at_ble_send_slave_sec_request+0x30>
1001125e:	00b1      	lsls	r1, r6, #2
10011260:	430c      	orrs	r4, r1
10011262:	4b05      	ldr	r3, [pc, #20]	; (10011278 <at_ble_send_slave_sec_request+0x3c>)
10011264:	b2e1      	uxtb	r1, r4
10011266:	1c28      	adds	r0, r5, #0
10011268:	4798      	blx	r3
1001126a:	2300      	movs	r3, #0
1001126c:	1c18      	adds	r0, r3, #0
1001126e:	bd70      	pop	{r4, r5, r6, pc}
10011270:	10011591 	.word	0x10011591
10011274:	1001ab5e 	.word	0x1001ab5e
10011278:	10011bcd 	.word	0x10011bcd

1001127c <at_ble_encryption_start>:
1001127c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1001127e:	23cf      	movs	r3, #207	; 0xcf
10011280:	2900      	cmp	r1, #0
10011282:	d02b      	beq.n	100112dc <at_ble_encryption_start+0x60>
10011284:	2a05      	cmp	r2, #5
10011286:	d829      	bhi.n	100112dc <at_ble_encryption_start+0x60>
10011288:	2701      	movs	r7, #1
1001128a:	1c3d      	adds	r5, r7, #0
1001128c:	2433      	movs	r4, #51	; 0x33
1001128e:	4095      	lsls	r5, r2
10011290:	4225      	tst	r5, r4
10011292:	d023      	beq.n	100112dc <at_ble_encryption_start+0x60>
10011294:	7e8c      	ldrb	r4, [r1, #26]
10011296:	3c07      	subs	r4, #7
10011298:	2c09      	cmp	r4, #9
1001129a:	d81f      	bhi.n	100112dc <at_ble_encryption_start+0x60>
1001129c:	4b10      	ldr	r3, [pc, #64]	; (100112e0 <at_ble_encryption_start+0x64>)
1001129e:	1c0c      	adds	r4, r1, #0
100112a0:	2100      	movs	r1, #0
100112a2:	1c15      	adds	r5, r2, #0
100112a4:	1c06      	adds	r6, r0, #0
100112a6:	4798      	blx	r3
100112a8:	1c3b      	adds	r3, r7, #0
100112aa:	2807      	cmp	r0, #7
100112ac:	d816      	bhi.n	100112dc <at_ble_encryption_start+0x60>
100112ae:	2312      	movs	r3, #18
100112b0:	4358      	muls	r0, r3
100112b2:	4b0c      	ldr	r3, [pc, #48]	; (100112e4 <at_ble_encryption_start+0x68>)
100112b4:	5cc7      	ldrb	r7, [r0, r3]
100112b6:	23e0      	movs	r3, #224	; 0xe0
100112b8:	2f00      	cmp	r7, #0
100112ba:	d10f      	bne.n	100112dc <at_ble_encryption_start+0x60>
100112bc:	1c21      	adds	r1, r4, #0
100112be:	221c      	movs	r2, #28
100112c0:	4b09      	ldr	r3, [pc, #36]	; (100112e8 <at_ble_encryption_start+0x6c>)
100112c2:	480a      	ldr	r0, [pc, #40]	; (100112ec <at_ble_encryption_start+0x70>)
100112c4:	4798      	blx	r3
100112c6:	1c23      	adds	r3, r4, #0
100112c8:	7ea1      	ldrb	r1, [r4, #26]
100112ca:	8a22      	ldrh	r2, [r4, #16]
100112cc:	3312      	adds	r3, #18
100112ce:	9100      	str	r1, [sp, #0]
100112d0:	9501      	str	r5, [sp, #4]
100112d2:	1c21      	adds	r1, r4, #0
100112d4:	1c30      	adds	r0, r6, #0
100112d6:	4c06      	ldr	r4, [pc, #24]	; (100112f0 <at_ble_encryption_start+0x74>)
100112d8:	47a0      	blx	r4
100112da:	1c3b      	adds	r3, r7, #0
100112dc:	1c18      	adds	r0, r3, #0
100112de:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
100112e0:	10011591 	.word	0x10011591
100112e4:	1001ab5e 	.word	0x1001ab5e
100112e8:	10014e57 	.word	0x10014e57
100112ec:	1001ac6c 	.word	0x1001ac6c
100112f0:	10011c0d 	.word	0x10011c0d

100112f4 <at_ble_encryption_request_reply>:
100112f4:	b573      	push	{r0, r1, r4, r5, r6, lr}
100112f6:	24cf      	movs	r4, #207	; 0xcf
100112f8:	2b00      	cmp	r3, #0
100112fa:	d011      	beq.n	10011320 <at_ble_encryption_request_reply+0x2c>
100112fc:	2a00      	cmp	r2, #0
100112fe:	d00a      	beq.n	10011316 <at_ble_encryption_request_reply+0x22>
10011300:	2905      	cmp	r1, #5
10011302:	d80d      	bhi.n	10011320 <at_ble_encryption_request_reply+0x2c>
10011304:	2501      	movs	r5, #1
10011306:	2633      	movs	r6, #51	; 0x33
10011308:	408d      	lsls	r5, r1
1001130a:	4235      	tst	r5, r6
1001130c:	d008      	beq.n	10011320 <at_ble_encryption_request_reply+0x2c>
1001130e:	7e9d      	ldrb	r5, [r3, #26]
10011310:	3d07      	subs	r5, #7
10011312:	2d09      	cmp	r5, #9
10011314:	d804      	bhi.n	10011320 <at_ble_encryption_request_reply+0x2c>
10011316:	7e9c      	ldrb	r4, [r3, #26]
10011318:	9400      	str	r4, [sp, #0]
1001131a:	4c02      	ldr	r4, [pc, #8]	; (10011324 <at_ble_encryption_request_reply+0x30>)
1001131c:	47a0      	blx	r4
1001131e:	2400      	movs	r4, #0
10011320:	1c20      	adds	r0, r4, #0
10011322:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
10011324:	10011cc9 	.word	0x10011cc9

10011328 <rx_callback>:
10011328:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1001132a:	8883      	ldrh	r3, [r0, #4]
1001132c:	1c01      	adds	r1, r0, #0
1001132e:	9301      	str	r3, [sp, #4]
10011330:	88c5      	ldrh	r5, [r0, #6]
10011332:	8806      	ldrh	r6, [r0, #0]
10011334:	2d00      	cmp	r5, #0
10011336:	d10f      	bne.n	10011358 <rx_callback+0x30>
10011338:	1c19      	adds	r1, r3, #0
1001133a:	1c30      	adds	r0, r6, #0
1001133c:	4b19      	ldr	r3, [pc, #100]	; (100113a4 <rx_callback+0x7c>)
1001133e:	1c2a      	adds	r2, r5, #0
10011340:	4798      	blx	r3
10011342:	1e03      	subs	r3, r0, #0
10011344:	d105      	bne.n	10011352 <rx_callback+0x2a>
10011346:	1c30      	adds	r0, r6, #0
10011348:	9901      	ldr	r1, [sp, #4]
1001134a:	1c1a      	adds	r2, r3, #0
1001134c:	4c16      	ldr	r4, [pc, #88]	; (100113a8 <rx_callback+0x80>)
1001134e:	47a0      	blx	r4
10011350:	e027      	b.n	100113a2 <rx_callback+0x7a>
10011352:	4b16      	ldr	r3, [pc, #88]	; (100113ac <rx_callback+0x84>)
10011354:	4798      	blx	r3
10011356:	e024      	b.n	100113a2 <rx_callback+0x7a>
10011358:	4c15      	ldr	r4, [pc, #84]	; (100113b0 <rx_callback+0x88>)
1001135a:	4a16      	ldr	r2, [pc, #88]	; (100113b4 <rx_callback+0x8c>)
1001135c:	6823      	ldr	r3, [r4, #0]
1001135e:	6812      	ldr	r2, [r2, #0]
10011360:	18eb      	adds	r3, r5, r3
10011362:	4293      	cmp	r3, r2
10011364:	d901      	bls.n	1001136a <rx_callback+0x42>
10011366:	2300      	movs	r3, #0
10011368:	6023      	str	r3, [r4, #0]
1001136a:	4f13      	ldr	r7, [pc, #76]	; (100113b8 <rx_callback+0x90>)
1001136c:	6822      	ldr	r2, [r4, #0]
1001136e:	683b      	ldr	r3, [r7, #0]
10011370:	3108      	adds	r1, #8
10011372:	1898      	adds	r0, r3, r2
10011374:	1c2a      	adds	r2, r5, #0
10011376:	4b11      	ldr	r3, [pc, #68]	; (100113bc <rx_callback+0x94>)
10011378:	4798      	blx	r3
1001137a:	683b      	ldr	r3, [r7, #0]
1001137c:	6822      	ldr	r2, [r4, #0]
1001137e:	1c30      	adds	r0, r6, #0
10011380:	189a      	adds	r2, r3, r2
10011382:	9901      	ldr	r1, [sp, #4]
10011384:	4b07      	ldr	r3, [pc, #28]	; (100113a4 <rx_callback+0x7c>)
10011386:	4798      	blx	r3
10011388:	2800      	cmp	r0, #0
1001138a:	d1e2      	bne.n	10011352 <rx_callback+0x2a>
1001138c:	6823      	ldr	r3, [r4, #0]
1001138e:	683a      	ldr	r2, [r7, #0]
10011390:	1c30      	adds	r0, r6, #0
10011392:	18d2      	adds	r2, r2, r3
10011394:	9901      	ldr	r1, [sp, #4]
10011396:	1c2b      	adds	r3, r5, #0
10011398:	4e03      	ldr	r6, [pc, #12]	; (100113a8 <rx_callback+0x80>)
1001139a:	47b0      	blx	r6
1001139c:	6823      	ldr	r3, [r4, #0]
1001139e:	18ed      	adds	r5, r5, r3
100113a0:	6025      	str	r5, [r4, #0]
100113a2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
100113a4:	1000f9bd 	.word	0x1000f9bd
100113a8:	1000f935 	.word	0x1000f935
100113ac:	1000f345 	.word	0x1000f345
100113b0:	1001acc8 	.word	0x1001acc8
100113b4:	10019c74 	.word	0x10019c74
100113b8:	10019c70 	.word	0x10019c70
100113bc:	10014e57 	.word	0x10014e57

100113c0 <interface_send>:
100113c0:	b508      	push	{r3, lr}
100113c2:	4b02      	ldr	r3, [pc, #8]	; (100113cc <interface_send+0xc>)
100113c4:	4798      	blx	r3
100113c6:	2000      	movs	r0, #0
100113c8:	bd08      	pop	{r3, pc}
100113ca:	46c0      	nop			; (mov r8, r8)
100113cc:	1000f03d 	.word	0x1000f03d

100113d0 <interface_init>:
100113d0:	2280      	movs	r2, #128	; 0x80
100113d2:	b510      	push	{r4, lr}
100113d4:	2100      	movs	r1, #0
100113d6:	1c04      	adds	r4, r0, #0
100113d8:	0092      	lsls	r2, r2, #2
100113da:	4b08      	ldr	r3, [pc, #32]	; (100113fc <interface_init+0x2c>)
100113dc:	4808      	ldr	r0, [pc, #32]	; (10011400 <interface_init+0x30>)
100113de:	4798      	blx	r3
100113e0:	2200      	movs	r2, #0
100113e2:	4b08      	ldr	r3, [pc, #32]	; (10011404 <interface_init+0x34>)
100113e4:	601a      	str	r2, [r3, #0]
100113e6:	4a08      	ldr	r2, [pc, #32]	; (10011408 <interface_init+0x38>)
100113e8:	4b08      	ldr	r3, [pc, #32]	; (1001140c <interface_init+0x3c>)
100113ea:	601a      	str	r2, [r3, #0]
100113ec:	4b08      	ldr	r3, [pc, #32]	; (10011410 <interface_init+0x40>)
100113ee:	6922      	ldr	r2, [r4, #16]
100113f0:	601a      	str	r2, [r3, #0]
100113f2:	6962      	ldr	r2, [r4, #20]
100113f4:	4b07      	ldr	r3, [pc, #28]	; (10011414 <interface_init+0x44>)
100113f6:	601a      	str	r2, [r3, #0]
100113f8:	bd10      	pop	{r4, pc}
100113fa:	46c0      	nop			; (mov r8, r8)
100113fc:	10014e69 	.word	0x10014e69
10011400:	1001aecc 	.word	0x1001aecc
10011404:	1001acc8 	.word	0x1001acc8
10011408:	1001accc 	.word	0x1001accc
1001140c:	100181c8 	.word	0x100181c8
10011410:	10019c70 	.word	0x10019c70
10011414:	10019c74 	.word	0x10019c74

10011418 <platform_cmd_cmpl_signal>:
10011418:	2201      	movs	r2, #1
1001141a:	4b01      	ldr	r3, [pc, #4]	; (10011420 <platform_cmd_cmpl_signal+0x8>)
1001141c:	601a      	str	r2, [r3, #0]
1001141e:	4770      	bx	lr
10011420:	10019c78 	.word	0x10019c78

10011424 <platform_cmd_cmpl_wait>:
10011424:	b510      	push	{r4, lr}
10011426:	1c04      	adds	r4, r0, #0
10011428:	4b07      	ldr	r3, [pc, #28]	; (10011448 <platform_cmd_cmpl_wait+0x24>)
1001142a:	681a      	ldr	r2, [r3, #0]
1001142c:	2a01      	cmp	r2, #1
1001142e:	d003      	beq.n	10011438 <platform_cmd_cmpl_wait+0x14>
10011430:	4b06      	ldr	r3, [pc, #24]	; (1001144c <platform_cmd_cmpl_wait+0x28>)
10011432:	2000      	movs	r0, #0
10011434:	4798      	blx	r3
10011436:	e7f7      	b.n	10011428 <platform_cmd_cmpl_wait+0x4>
10011438:	6819      	ldr	r1, [r3, #0]
1001143a:	2901      	cmp	r1, #1
1001143c:	d102      	bne.n	10011444 <platform_cmd_cmpl_wait+0x20>
1001143e:	2200      	movs	r2, #0
10011440:	601a      	str	r2, [r3, #0]
10011442:	e000      	b.n	10011446 <platform_cmd_cmpl_wait+0x22>
10011444:	7022      	strb	r2, [r4, #0]
10011446:	bd10      	pop	{r4, pc}
10011448:	10019c78 	.word	0x10019c78
1001144c:	1000f0cd 	.word	0x1000f0cd

10011450 <start_timer>:
10011450:	4770      	bx	lr

10011452 <stop_timer>:
10011452:	4770      	bx	lr

10011454 <dbg_le_set_bd_addr_req_handler>:
10011454:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10011456:	466b      	mov	r3, sp
10011458:	1dde      	adds	r6, r3, #7
1001145a:	2300      	movs	r3, #0
1001145c:	7033      	strb	r3, [r6, #0]
1001145e:	230f      	movs	r3, #15
10011460:	4c13      	ldr	r4, [pc, #76]	; (100114b0 <dbg_le_set_bd_addr_req_handler+0x5c>)
10011462:	2703      	movs	r7, #3
10011464:	7023      	strb	r3, [r4, #0]
10011466:	2300      	movs	r3, #0
10011468:	70e3      	strb	r3, [r4, #3]
1001146a:	4b12      	ldr	r3, [pc, #72]	; (100114b4 <dbg_le_set_bd_addr_req_handler+0x60>)
1001146c:	1c01      	adds	r1, r0, #0
1001146e:	881a      	ldrh	r2, [r3, #0]
10011470:	881b      	ldrh	r3, [r3, #0]
10011472:	7122      	strb	r2, [r4, #4]
10011474:	0a1b      	lsrs	r3, r3, #8
10011476:	2206      	movs	r2, #6
10011478:	7163      	strb	r3, [r4, #5]
1001147a:	480f      	ldr	r0, [pc, #60]	; (100114b8 <dbg_le_set_bd_addr_req_handler+0x64>)
1001147c:	4b0f      	ldr	r3, [pc, #60]	; (100114bc <dbg_le_set_bd_addr_req_handler+0x68>)
1001147e:	7067      	strb	r7, [r4, #1]
10011480:	70a7      	strb	r7, [r4, #2]
10011482:	4798      	blx	r3
10011484:	4d0e      	ldr	r5, [pc, #56]	; (100114c0 <dbg_le_set_bd_addr_req_handler+0x6c>)
10011486:	4b0f      	ldr	r3, [pc, #60]	; (100114c4 <dbg_le_set_bd_addr_req_handler+0x70>)
10011488:	210e      	movs	r1, #14
1001148a:	802b      	strh	r3, [r5, #0]
1001148c:	2306      	movs	r3, #6
1001148e:	71a3      	strb	r3, [r4, #6]
10011490:	2300      	movs	r3, #0
10011492:	1c20      	adds	r0, r4, #0
10011494:	71e3      	strb	r3, [r4, #7]
10011496:	4b0c      	ldr	r3, [pc, #48]	; (100114c8 <dbg_le_set_bd_addr_req_handler+0x74>)
10011498:	80af      	strh	r7, [r5, #4]
1001149a:	4798      	blx	r3
1001149c:	1c30      	adds	r0, r6, #0
1001149e:	4b0b      	ldr	r3, [pc, #44]	; (100114cc <dbg_le_set_bd_addr_req_handler+0x78>)
100114a0:	4798      	blx	r3
100114a2:	7833      	ldrb	r3, [r6, #0]
100114a4:	20e2      	movs	r0, #226	; 0xe2
100114a6:	2b00      	cmp	r3, #0
100114a8:	d101      	bne.n	100114ae <dbg_le_set_bd_addr_req_handler+0x5a>
100114aa:	68ab      	ldr	r3, [r5, #8]
100114ac:	7818      	ldrb	r0, [r3, #0]
100114ae:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
100114b0:	1001aecc 	.word	0x1001aecc
100114b4:	1001ab5c 	.word	0x1001ab5c
100114b8:	1001aed4 	.word	0x1001aed4
100114bc:	10014e57 	.word	0x10014e57
100114c0:	1001ab50 	.word	0x1001ab50
100114c4:	00000329 	.word	0x00000329
100114c8:	100113c1 	.word	0x100113c1
100114cc:	10011425 	.word	0x10011425

100114d0 <gapc_get_dev_info_cfm.constprop.1>:
100114d0:	b538      	push	{r3, r4, r5, lr}
100114d2:	230b      	movs	r3, #11
100114d4:	4c27      	ldr	r4, [pc, #156]	; (10011574 <gapc_get_dev_info_cfm.constprop.1+0xa4>)
100114d6:	7023      	strb	r3, [r4, #0]
100114d8:	3303      	adds	r3, #3
100114da:	7063      	strb	r3, [r4, #1]
100114dc:	3329      	adds	r3, #41	; 0x29
100114de:	70a3      	strb	r3, [r4, #2]
100114e0:	4b25      	ldr	r3, [pc, #148]	; (10011578 <gapc_get_dev_info_cfm.constprop.1+0xa8>)
100114e2:	70e1      	strb	r1, [r4, #3]
100114e4:	881a      	ldrh	r2, [r3, #0]
100114e6:	881b      	ldrh	r3, [r3, #0]
100114e8:	7122      	strb	r2, [r4, #4]
100114ea:	0a1b      	lsrs	r3, r3, #8
100114ec:	7163      	strb	r3, [r4, #5]
100114ee:	2300      	movs	r3, #0
100114f0:	7220      	strb	r0, [r4, #8]
100114f2:	7263      	strb	r3, [r4, #9]
100114f4:	2801      	cmp	r0, #1
100114f6:	d02b      	beq.n	10011550 <gapc_get_dev_info_cfm.constprop.1+0x80>
100114f8:	4298      	cmp	r0, r3
100114fa:	d01b      	beq.n	10011534 <gapc_get_dev_info_cfm.constprop.1+0x64>
100114fc:	2802      	cmp	r0, #2
100114fe:	d12f      	bne.n	10011560 <gapc_get_dev_info_cfm.constprop.1+0x90>
10011500:	4b1e      	ldr	r3, [pc, #120]	; (1001157c <gapc_get_dev_info_cfm.constprop.1+0xac>)
10011502:	2112      	movs	r1, #18
10011504:	1c1a      	adds	r2, r3, #0
10011506:	32ce      	adds	r2, #206	; 0xce
10011508:	8812      	ldrh	r2, [r2, #0]
1001150a:	72a2      	strb	r2, [r4, #10]
1001150c:	0a12      	lsrs	r2, r2, #8
1001150e:	72e2      	strb	r2, [r4, #11]
10011510:	1c1a      	adds	r2, r3, #0
10011512:	32d0      	adds	r2, #208	; 0xd0
10011514:	8812      	ldrh	r2, [r2, #0]
10011516:	7322      	strb	r2, [r4, #12]
10011518:	0a12      	lsrs	r2, r2, #8
1001151a:	7362      	strb	r2, [r4, #13]
1001151c:	1c1a      	adds	r2, r3, #0
1001151e:	32d2      	adds	r2, #210	; 0xd2
10011520:	8812      	ldrh	r2, [r2, #0]
10011522:	33d4      	adds	r3, #212	; 0xd4
10011524:	73a2      	strb	r2, [r4, #14]
10011526:	0a12      	lsrs	r2, r2, #8
10011528:	73e2      	strb	r2, [r4, #15]
1001152a:	881b      	ldrh	r3, [r3, #0]
1001152c:	7423      	strb	r3, [r4, #16]
1001152e:	0a1b      	lsrs	r3, r3, #8
10011530:	7463      	strb	r3, [r4, #17]
10011532:	e016      	b.n	10011562 <gapc_get_dev_info_cfm.constprop.1+0x92>
10011534:	4b11      	ldr	r3, [pc, #68]	; (1001157c <gapc_get_dev_info_cfm.constprop.1+0xac>)
10011536:	4912      	ldr	r1, [pc, #72]	; (10011580 <gapc_get_dev_info_cfm.constprop.1+0xb0>)
10011538:	33aa      	adds	r3, #170	; 0xaa
1001153a:	881d      	ldrh	r5, [r3, #0]
1001153c:	4811      	ldr	r0, [pc, #68]	; (10011584 <gapc_get_dev_info_cfm.constprop.1+0xb4>)
1001153e:	0a2b      	lsrs	r3, r5, #8
10011540:	72a5      	strb	r5, [r4, #10]
10011542:	72e3      	strb	r3, [r4, #11]
10011544:	1c2a      	adds	r2, r5, #0
10011546:	4b10      	ldr	r3, [pc, #64]	; (10011588 <gapc_get_dev_info_cfm.constprop.1+0xb8>)
10011548:	350c      	adds	r5, #12
1001154a:	4798      	blx	r3
1001154c:	b2a9      	uxth	r1, r5
1001154e:	e008      	b.n	10011562 <gapc_get_dev_info_cfm.constprop.1+0x92>
10011550:	4b0a      	ldr	r3, [pc, #40]	; (1001157c <gapc_get_dev_info_cfm.constprop.1+0xac>)
10011552:	210c      	movs	r1, #12
10011554:	33cc      	adds	r3, #204	; 0xcc
10011556:	881b      	ldrh	r3, [r3, #0]
10011558:	72a3      	strb	r3, [r4, #10]
1001155a:	0a1b      	lsrs	r3, r3, #8
1001155c:	72e3      	strb	r3, [r4, #11]
1001155e:	e000      	b.n	10011562 <gapc_get_dev_info_cfm.constprop.1+0x92>
10011560:	210a      	movs	r1, #10
10011562:	1c0b      	adds	r3, r1, #0
10011564:	3b08      	subs	r3, #8
10011566:	71a3      	strb	r3, [r4, #6]
10011568:	121b      	asrs	r3, r3, #8
1001156a:	71e3      	strb	r3, [r4, #7]
1001156c:	1c20      	adds	r0, r4, #0
1001156e:	4b07      	ldr	r3, [pc, #28]	; (1001158c <gapc_get_dev_info_cfm.constprop.1+0xbc>)
10011570:	4798      	blx	r3
10011572:	bd38      	pop	{r3, r4, r5, pc}
10011574:	1001aecc 	.word	0x1001aecc
10011578:	1001ab5c 	.word	0x1001ab5c
1001157c:	1001abee 	.word	0x1001abee
10011580:	1001ac9a 	.word	0x1001ac9a
10011584:	1001aed8 	.word	0x1001aed8
10011588:	10014e57 	.word	0x10014e57
1001158c:	100113c1 	.word	0x100113c1

10011590 <check_ConnData_idx_role>:
10011590:	4b0c      	ldr	r3, [pc, #48]	; (100115c4 <check_ConnData_idx_role+0x34>)
10011592:	b570      	push	{r4, r5, r6, lr}
10011594:	1c04      	adds	r4, r0, #0
10011596:	2008      	movs	r0, #8
10011598:	429c      	cmp	r4, r3
1001159a:	d011      	beq.n	100115c0 <check_ConnData_idx_role+0x30>
1001159c:	2300      	movs	r3, #0
1001159e:	2212      	movs	r2, #18
100115a0:	435a      	muls	r2, r3
100115a2:	4d09      	ldr	r5, [pc, #36]	; (100115c8 <check_ConnData_idx_role+0x38>)
100115a4:	b2d8      	uxtb	r0, r3
100115a6:	1956      	adds	r6, r2, r5
100115a8:	8976      	ldrh	r6, [r6, #10]
100115aa:	42a6      	cmp	r6, r4
100115ac:	d104      	bne.n	100115b8 <check_ConnData_idx_role+0x28>
100115ae:	2900      	cmp	r1, #0
100115b0:	d006      	beq.n	100115c0 <check_ConnData_idx_role+0x30>
100115b2:	5d53      	ldrb	r3, [r2, r5]
100115b4:	700b      	strb	r3, [r1, #0]
100115b6:	e003      	b.n	100115c0 <check_ConnData_idx_role+0x30>
100115b8:	3301      	adds	r3, #1
100115ba:	2b08      	cmp	r3, #8
100115bc:	d1ef      	bne.n	1001159e <check_ConnData_idx_role+0xe>
100115be:	1c18      	adds	r0, r3, #0
100115c0:	bd70      	pop	{r4, r5, r6, pc}
100115c2:	46c0      	nop			; (mov r8, r8)
100115c4:	0000ffff 	.word	0x0000ffff
100115c8:	1001ab5e 	.word	0x1001ab5e

100115cc <check_ConnData_emptyEntry>:
100115cc:	2300      	movs	r3, #0
100115ce:	2212      	movs	r2, #18
100115d0:	435a      	muls	r2, r3
100115d2:	4906      	ldr	r1, [pc, #24]	; (100115ec <check_ConnData_emptyEntry+0x20>)
100115d4:	b2d8      	uxtb	r0, r3
100115d6:	1852      	adds	r2, r2, r1
100115d8:	8951      	ldrh	r1, [r2, #10]
100115da:	4a05      	ldr	r2, [pc, #20]	; (100115f0 <check_ConnData_emptyEntry+0x24>)
100115dc:	4291      	cmp	r1, r2
100115de:	d003      	beq.n	100115e8 <check_ConnData_emptyEntry+0x1c>
100115e0:	3301      	adds	r3, #1
100115e2:	2b08      	cmp	r3, #8
100115e4:	d1f3      	bne.n	100115ce <check_ConnData_emptyEntry+0x2>
100115e6:	1c18      	adds	r0, r3, #0
100115e8:	4770      	bx	lr
100115ea:	46c0      	nop			; (mov r8, r8)
100115ec:	1001ab5e 	.word	0x1001ab5e
100115f0:	0000ffff 	.word	0x0000ffff

100115f4 <gapc_cmp_evt>:
100115f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
100115f6:	780b      	ldrb	r3, [r1, #0]
100115f8:	1c05      	adds	r5, r0, #0
100115fa:	1e58      	subs	r0, r3, #1
100115fc:	784e      	ldrb	r6, [r1, #1]
100115fe:	280f      	cmp	r0, #15
10011600:	d85a      	bhi.n	100116b8 <gapc_cmp_evt+0xc4>
10011602:	1c14      	adds	r4, r2, #0
10011604:	f001 fba4 	bl	10012d50 <__gnu_thumb1_case_uqi>
10011608:	5858440a 	.word	0x5858440a
1001160c:	4b584444 	.word	0x4b584444
10011610:	0825122d 	.word	0x0825122d
10011614:	3e395858 	.word	0x3e395858
10011618:	203b      	movs	r0, #59	; 0x3b
1001161a:	e04e      	b.n	100116ba <gapc_cmp_evt+0xc6>
1001161c:	203b      	movs	r0, #59	; 0x3b
1001161e:	2e00      	cmp	r6, #0
10011620:	d04b      	beq.n	100116ba <gapc_cmp_evt+0xc6>
10011622:	0a2d      	lsrs	r5, r5, #8
10011624:	8015      	strh	r5, [r2, #0]
10011626:	7096      	strb	r6, [r2, #2]
10011628:	3835      	subs	r0, #53	; 0x35
1001162a:	e046      	b.n	100116ba <gapc_cmp_evt+0xc6>
1001162c:	466b      	mov	r3, sp
1001162e:	1ddf      	adds	r7, r3, #7
10011630:	2301      	movs	r3, #1
10011632:	0a2d      	lsrs	r5, r5, #8
10011634:	703b      	strb	r3, [r7, #0]
10011636:	1c28      	adds	r0, r5, #0
10011638:	1c39      	adds	r1, r7, #0
1001163a:	4b20      	ldr	r3, [pc, #128]	; (100116bc <gapc_cmp_evt+0xc8>)
1001163c:	4798      	blx	r3
1001163e:	2807      	cmp	r0, #7
10011640:	d803      	bhi.n	1001164a <gapc_cmp_evt+0x56>
10011642:	783b      	ldrb	r3, [r7, #0]
10011644:	203b      	movs	r0, #59	; 0x3b
10011646:	2b00      	cmp	r3, #0
10011648:	d037      	beq.n	100116ba <gapc_cmp_evt+0xc6>
1001164a:	8065      	strh	r5, [r4, #2]
1001164c:	7126      	strb	r6, [r4, #4]
1001164e:	2009      	movs	r0, #9
10011650:	e033      	b.n	100116ba <gapc_cmp_evt+0xc6>
10011652:	203b      	movs	r0, #59	; 0x3b
10011654:	2e00      	cmp	r6, #0
10011656:	d030      	beq.n	100116ba <gapc_cmp_evt+0xc6>
10011658:	0a2d      	lsrs	r5, r5, #8
1001165a:	8015      	strh	r5, [r2, #0]
1001165c:	7096      	strb	r6, [r2, #2]
1001165e:	382d      	subs	r0, #45	; 0x2d
10011660:	e02b      	b.n	100116ba <gapc_cmp_evt+0xc6>
10011662:	203b      	movs	r0, #59	; 0x3b
10011664:	2e00      	cmp	r6, #0
10011666:	d028      	beq.n	100116ba <gapc_cmp_evt+0xc6>
10011668:	2300      	movs	r3, #0
1001166a:	0a2d      	lsrs	r5, r5, #8
1001166c:	8015      	strh	r5, [r2, #0]
1001166e:	7096      	strb	r6, [r2, #2]
10011670:	8093      	strh	r3, [r2, #4]
10011672:	80d3      	strh	r3, [r2, #6]
10011674:	8113      	strh	r3, [r2, #8]
10011676:	3834      	subs	r0, #52	; 0x34
10011678:	e01f      	b.n	100116ba <gapc_cmp_evt+0xc6>
1001167a:	203b      	movs	r0, #59	; 0x3b
1001167c:	2e00      	cmp	r6, #0
1001167e:	d01c      	beq.n	100116ba <gapc_cmp_evt+0xc6>
10011680:	7216      	strb	r6, [r2, #8]
10011682:	e003      	b.n	1001168c <gapc_cmp_evt+0x98>
10011684:	203b      	movs	r0, #59	; 0x3b
10011686:	2e00      	cmp	r6, #0
10011688:	d017      	beq.n	100116ba <gapc_cmp_evt+0xc6>
1001168a:	7116      	strb	r6, [r2, #4]
1001168c:	3812      	subs	r0, #18
1001168e:	e014      	b.n	100116ba <gapc_cmp_evt+0xc6>
10011690:	203b      	movs	r0, #59	; 0x3b
10011692:	2e00      	cmp	r6, #0
10011694:	d011      	beq.n	100116ba <gapc_cmp_evt+0xc6>
10011696:	7093      	strb	r3, [r2, #2]
10011698:	70d6      	strb	r6, [r2, #3]
1001169a:	382a      	subs	r0, #42	; 0x2a
1001169c:	e00d      	b.n	100116ba <gapc_cmp_evt+0xc6>
1001169e:	203b      	movs	r0, #59	; 0x3b
100116a0:	2e00      	cmp	r6, #0
100116a2:	d00a      	beq.n	100116ba <gapc_cmp_evt+0xc6>
100116a4:	0a2d      	lsrs	r5, r5, #8
100116a6:	7016      	strb	r6, [r2, #0]
100116a8:	8055      	strh	r5, [r2, #2]
100116aa:	1d10      	adds	r0, r2, #4
100116ac:	2100      	movs	r1, #0
100116ae:	2205      	movs	r2, #5
100116b0:	4b03      	ldr	r3, [pc, #12]	; (100116c0 <gapc_cmp_evt+0xcc>)
100116b2:	4798      	blx	r3
100116b4:	2012      	movs	r0, #18
100116b6:	e000      	b.n	100116ba <gapc_cmp_evt+0xc6>
100116b8:	2000      	movs	r0, #0
100116ba:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
100116bc:	10011591 	.word	0x10011591
100116c0:	10014e69 	.word	0x10014e69

100116c4 <gapc_connection_cfm_handler>:
100116c4:	b5f0      	push	{r4, r5, r6, r7, lr}
100116c6:	b085      	sub	sp, #20
100116c8:	1c1d      	adds	r5, r3, #0
100116ca:	ab0a      	add	r3, sp, #40	; 0x28
100116cc:	781b      	ldrb	r3, [r3, #0]
100116ce:	9201      	str	r2, [sp, #4]
100116d0:	9302      	str	r3, [sp, #8]
100116d2:	ab0b      	add	r3, sp, #44	; 0x2c
100116d4:	781b      	ldrb	r3, [r3, #0]
100116d6:	1c07      	adds	r7, r0, #0
100116d8:	9303      	str	r3, [sp, #12]
100116da:	ab0c      	add	r3, sp, #48	; 0x30
100116dc:	881a      	ldrh	r2, [r3, #0]
100116de:	2302      	movs	r3, #2
100116e0:	1c0e      	adds	r6, r1, #0
100116e2:	4c23      	ldr	r4, [pc, #140]	; (10011770 <gapc_connection_cfm_handler+0xac>)
100116e4:	1c39      	adds	r1, r7, #0
100116e6:	7023      	strb	r3, [r4, #0]
100116e8:	330c      	adds	r3, #12
100116ea:	7063      	strb	r3, [r4, #1]
100116ec:	70a3      	strb	r3, [r4, #2]
100116ee:	4b21      	ldr	r3, [pc, #132]	; (10011774 <gapc_connection_cfm_handler+0xb0>)
100116f0:	70e2      	strb	r2, [r4, #3]
100116f2:	881a      	ldrh	r2, [r3, #0]
100116f4:	881b      	ldrh	r3, [r3, #0]
100116f6:	7122      	strb	r2, [r4, #4]
100116f8:	0a1b      	lsrs	r3, r3, #8
100116fa:	4f1f      	ldr	r7, [pc, #124]	; (10011778 <gapc_connection_cfm_handler+0xb4>)
100116fc:	2210      	movs	r2, #16
100116fe:	481f      	ldr	r0, [pc, #124]	; (1001177c <gapc_connection_cfm_handler+0xb8>)
10011700:	7163      	strb	r3, [r4, #5]
10011702:	47b8      	blx	r7
10011704:	0a33      	lsrs	r3, r6, #8
10011706:	7626      	strb	r6, [r4, #24]
10011708:	7663      	strb	r3, [r4, #25]
1001170a:	9901      	ldr	r1, [sp, #4]
1001170c:	0c33      	lsrs	r3, r6, #16
1001170e:	2210      	movs	r2, #16
10011710:	0e36      	lsrs	r6, r6, #24
10011712:	481b      	ldr	r0, [pc, #108]	; (10011780 <gapc_connection_cfm_handler+0xbc>)
10011714:	76a3      	strb	r3, [r4, #26]
10011716:	76e6      	strb	r6, [r4, #27]
10011718:	47b8      	blx	r7
1001171a:	1c23      	adds	r3, r4, #0
1001171c:	332c      	adds	r3, #44	; 0x2c
1001171e:	701d      	strb	r5, [r3, #0]
10011720:	1c23      	adds	r3, r4, #0
10011722:	0a2a      	lsrs	r2, r5, #8
10011724:	332d      	adds	r3, #45	; 0x2d
10011726:	701a      	strb	r2, [r3, #0]
10011728:	1c23      	adds	r3, r4, #0
1001172a:	0c2a      	lsrs	r2, r5, #16
1001172c:	332e      	adds	r3, #46	; 0x2e
1001172e:	701a      	strb	r2, [r3, #0]
10011730:	1c23      	adds	r3, r4, #0
10011732:	0e2d      	lsrs	r5, r5, #24
10011734:	332f      	adds	r3, #47	; 0x2f
10011736:	466a      	mov	r2, sp
10011738:	701d      	strb	r5, [r3, #0]
1001173a:	1c23      	adds	r3, r4, #0
1001173c:	7a12      	ldrb	r2, [r2, #8]
1001173e:	3330      	adds	r3, #48	; 0x30
10011740:	701a      	strb	r2, [r3, #0]
10011742:	1c23      	adds	r3, r4, #0
10011744:	2500      	movs	r5, #0
10011746:	3331      	adds	r3, #49	; 0x31
10011748:	466a      	mov	r2, sp
1001174a:	701d      	strb	r5, [r3, #0]
1001174c:	1c23      	adds	r3, r4, #0
1001174e:	7b12      	ldrb	r2, [r2, #12]
10011750:	3332      	adds	r3, #50	; 0x32
10011752:	701a      	strb	r2, [r3, #0]
10011754:	1c23      	adds	r3, r4, #0
10011756:	3333      	adds	r3, #51	; 0x33
10011758:	701d      	strb	r5, [r3, #0]
1001175a:	232c      	movs	r3, #44	; 0x2c
1001175c:	1c20      	adds	r0, r4, #0
1001175e:	71a3      	strb	r3, [r4, #6]
10011760:	2134      	movs	r1, #52	; 0x34
10011762:	4b08      	ldr	r3, [pc, #32]	; (10011784 <gapc_connection_cfm_handler+0xc0>)
10011764:	71e5      	strb	r5, [r4, #7]
10011766:	4798      	blx	r3
10011768:	1c28      	adds	r0, r5, #0
1001176a:	b005      	add	sp, #20
1001176c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001176e:	46c0      	nop			; (mov r8, r8)
10011770:	1001aecc 	.word	0x1001aecc
10011774:	1001ab5c 	.word	0x1001ab5c
10011778:	10014e57 	.word	0x10014e57
1001177c:	1001aed4 	.word	0x1001aed4
10011780:	1001aee8 	.word	0x1001aee8
10011784:	100113c1 	.word	0x100113c1

10011788 <gapc_con_req_ind>:
10011788:	b5f0      	push	{r4, r5, r6, r7, lr}
1001178a:	7845      	ldrb	r5, [r0, #1]
1001178c:	7803      	ldrb	r3, [r0, #0]
1001178e:	4c30      	ldr	r4, [pc, #192]	; (10011850 <gapc_con_req_ind+0xc8>)
10011790:	022d      	lsls	r5, r5, #8
10011792:	431d      	orrs	r5, r3
10011794:	85a5      	strh	r5, [r4, #44]	; 0x2c
10011796:	78c3      	ldrb	r3, [r0, #3]
10011798:	7882      	ldrb	r2, [r0, #2]
1001179a:	b08b      	sub	sp, #44	; 0x2c
1001179c:	021b      	lsls	r3, r3, #8
1001179e:	431a      	orrs	r2, r3
100117a0:	466b      	mov	r3, sp
100117a2:	9205      	str	r2, [sp, #20]
100117a4:	8a9b      	ldrh	r3, [r3, #20]
100117a6:	2120      	movs	r1, #32
100117a8:	85e3      	strh	r3, [r4, #46]	; 0x2e
100117aa:	7943      	ldrb	r3, [r0, #5]
100117ac:	7902      	ldrb	r2, [r0, #4]
100117ae:	021b      	lsls	r3, r3, #8
100117b0:	431a      	orrs	r2, r3
100117b2:	466b      	mov	r3, sp
100117b4:	9206      	str	r2, [sp, #24]
100117b6:	8b1b      	ldrh	r3, [r3, #24]
100117b8:	1c06      	adds	r6, r0, #0
100117ba:	8623      	strh	r3, [r4, #48]	; 0x30
100117bc:	79c3      	ldrb	r3, [r0, #7]
100117be:	7982      	ldrb	r2, [r0, #6]
100117c0:	021b      	lsls	r3, r3, #8
100117c2:	431a      	orrs	r2, r3
100117c4:	466b      	mov	r3, sp
100117c6:	9207      	str	r2, [sp, #28]
100117c8:	466a      	mov	r2, sp
100117ca:	8b9b      	ldrh	r3, [r3, #28]
100117cc:	1852      	adds	r2, r2, r1
100117ce:	8663      	strh	r3, [r4, #50]	; 0x32
100117d0:	7a43      	ldrb	r3, [r0, #9]
100117d2:	1c01      	adds	r1, r0, #0
100117d4:	9308      	str	r3, [sp, #32]
100117d6:	1c23      	adds	r3, r4, #0
100117d8:	7812      	ldrb	r2, [r2, #0]
100117da:	3377      	adds	r3, #119	; 0x77
100117dc:	3478      	adds	r4, #120	; 0x78
100117de:	701a      	strb	r2, [r3, #0]
100117e0:	310a      	adds	r1, #10
100117e2:	2206      	movs	r2, #6
100117e4:	4b1b      	ldr	r3, [pc, #108]	; (10011854 <gapc_con_req_ind+0xcc>)
100117e6:	1c20      	adds	r0, r4, #0
100117e8:	4798      	blx	r3
100117ea:	7c33      	ldrb	r3, [r6, #16]
100117ec:	9309      	str	r3, [sp, #36]	; 0x24
100117ee:	4b1a      	ldr	r3, [pc, #104]	; (10011858 <gapc_con_req_ind+0xd0>)
100117f0:	4798      	blx	r3
100117f2:	4e1a      	ldr	r6, [pc, #104]	; (1001185c <gapc_con_req_ind+0xd4>)
100117f4:	1e07      	subs	r7, r0, #0
100117f6:	2f07      	cmp	r7, #7
100117f8:	d81b      	bhi.n	10011832 <gapc_con_req_ind+0xaa>
100117fa:	2312      	movs	r3, #18
100117fc:	4343      	muls	r3, r0
100117fe:	18f0      	adds	r0, r6, r3
10011800:	8145      	strh	r5, [r0, #10]
10011802:	4669      	mov	r1, sp
10011804:	2524      	movs	r5, #36	; 0x24
10011806:	1949      	adds	r1, r1, r5
10011808:	7809      	ldrb	r1, [r1, #0]
1001180a:	2206      	movs	r2, #6
1001180c:	54f1      	strb	r1, [r6, r3]
1001180e:	2120      	movs	r1, #32
10011810:	466b      	mov	r3, sp
10011812:	185b      	adds	r3, r3, r1
10011814:	781b      	ldrb	r3, [r3, #0]
10011816:	1c21      	adds	r1, r4, #0
10011818:	7043      	strb	r3, [r0, #1]
1001181a:	466b      	mov	r3, sp
1001181c:	8a9b      	ldrh	r3, [r3, #20]
1001181e:	3002      	adds	r0, #2
10011820:	8143      	strh	r3, [r0, #10]
10011822:	466b      	mov	r3, sp
10011824:	8b1b      	ldrh	r3, [r3, #24]
10011826:	8183      	strh	r3, [r0, #12]
10011828:	466b      	mov	r3, sp
1001182a:	8b9b      	ldrh	r3, [r3, #28]
1001182c:	81c3      	strh	r3, [r0, #14]
1001182e:	4b09      	ldr	r3, [pc, #36]	; (10011854 <gapc_con_req_ind+0xcc>)
10011830:	4798      	blx	r3
10011832:	2112      	movs	r1, #18
10011834:	2300      	movs	r3, #0
10011836:	434f      	muls	r7, r1
10011838:	9300      	str	r3, [sp, #0]
1001183a:	9301      	str	r3, [sp, #4]
1001183c:	19f6      	adds	r6, r6, r7
1001183e:	8971      	ldrh	r1, [r6, #10]
10011840:	4a07      	ldr	r2, [pc, #28]	; (10011860 <gapc_con_req_ind+0xd8>)
10011842:	9102      	str	r1, [sp, #8]
10011844:	1c10      	adds	r0, r2, #0
10011846:	1c19      	adds	r1, r3, #0
10011848:	4c06      	ldr	r4, [pc, #24]	; (10011864 <gapc_con_req_ind+0xdc>)
1001184a:	47a0      	blx	r4
1001184c:	b00b      	add	sp, #44	; 0x2c
1001184e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10011850:	1001abee 	.word	0x1001abee
10011854:	10014e57 	.word	0x10014e57
10011858:	100115cd 	.word	0x100115cd
1001185c:	1001ab5e 	.word	0x1001ab5e
10011860:	10019c7c 	.word	0x10019c7c
10011864:	100116c5 	.word	0x100116c5

10011868 <gapc_disconnect_cmd_handler>:
10011868:	2204      	movs	r2, #4
1001186a:	b510      	push	{r4, lr}
1001186c:	4b0c      	ldr	r3, [pc, #48]	; (100118a0 <gapc_disconnect_cmd_handler+0x38>)
1001186e:	2400      	movs	r4, #0
10011870:	701a      	strb	r2, [r3, #0]
10011872:	320a      	adds	r2, #10
10011874:	705a      	strb	r2, [r3, #1]
10011876:	709a      	strb	r2, [r3, #2]
10011878:	4a0a      	ldr	r2, [pc, #40]	; (100118a4 <gapc_disconnect_cmd_handler+0x3c>)
1001187a:	70d9      	strb	r1, [r3, #3]
1001187c:	8811      	ldrh	r1, [r2, #0]
1001187e:	8812      	ldrh	r2, [r2, #0]
10011880:	7119      	strb	r1, [r3, #4]
10011882:	0a12      	lsrs	r2, r2, #8
10011884:	715a      	strb	r2, [r3, #5]
10011886:	2201      	movs	r2, #1
10011888:	721a      	strb	r2, [r3, #8]
1001188a:	1892      	adds	r2, r2, r2
1001188c:	7258      	strb	r0, [r3, #9]
1001188e:	719a      	strb	r2, [r3, #6]
10011890:	71dc      	strb	r4, [r3, #7]
10011892:	1c18      	adds	r0, r3, #0
10011894:	210a      	movs	r1, #10
10011896:	4b04      	ldr	r3, [pc, #16]	; (100118a8 <gapc_disconnect_cmd_handler+0x40>)
10011898:	4798      	blx	r3
1001189a:	1c20      	adds	r0, r4, #0
1001189c:	bd10      	pop	{r4, pc}
1001189e:	46c0      	nop			; (mov r8, r8)
100118a0:	1001aecc 	.word	0x1001aecc
100118a4:	1001ab5c 	.word	0x1001ab5c
100118a8:	100113c1 	.word	0x100113c1

100118ac <gapc_disconnect_ind>:
100118ac:	1c02      	adds	r2, r0, #0
100118ae:	b508      	push	{r3, lr}
100118b0:	7843      	ldrb	r3, [r0, #1]
100118b2:	7800      	ldrb	r0, [r0, #0]
100118b4:	021b      	lsls	r3, r3, #8
100118b6:	4318      	orrs	r0, r3
100118b8:	8008      	strh	r0, [r1, #0]
100118ba:	7893      	ldrb	r3, [r2, #2]
100118bc:	708b      	strb	r3, [r1, #2]
100118be:	2100      	movs	r1, #0
100118c0:	4b05      	ldr	r3, [pc, #20]	; (100118d8 <gapc_disconnect_ind+0x2c>)
100118c2:	4798      	blx	r3
100118c4:	2807      	cmp	r0, #7
100118c6:	d806      	bhi.n	100118d6 <gapc_disconnect_ind+0x2a>
100118c8:	2312      	movs	r3, #18
100118ca:	4358      	muls	r0, r3
100118cc:	4b03      	ldr	r3, [pc, #12]	; (100118dc <gapc_disconnect_ind+0x30>)
100118ce:	1818      	adds	r0, r3, r0
100118d0:	2301      	movs	r3, #1
100118d2:	425b      	negs	r3, r3
100118d4:	8143      	strh	r3, [r0, #10]
100118d6:	bd08      	pop	{r3, pc}
100118d8:	10011591 	.word	0x10011591
100118dc:	1001ab5e 	.word	0x1001ab5e

100118e0 <gapc_bond_cmd_handler>:
100118e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
100118e2:	9300      	str	r3, [sp, #0]
100118e4:	2312      	movs	r3, #18
100118e6:	1c04      	adds	r4, r0, #0
100118e8:	a808      	add	r0, sp, #32
100118ea:	7807      	ldrb	r7, [r0, #0]
100118ec:	a809      	add	r0, sp, #36	; 0x24
100118ee:	7806      	ldrb	r6, [r0, #0]
100118f0:	a80a      	add	r0, sp, #40	; 0x28
100118f2:	7805      	ldrb	r5, [r0, #0]
100118f4:	a80b      	add	r0, sp, #44	; 0x2c
100118f6:	7800      	ldrb	r0, [r0, #0]
100118f8:	9001      	str	r0, [sp, #4]
100118fa:	4810      	ldr	r0, [pc, #64]	; (1001193c <gapc_bond_cmd_handler+0x5c>)
100118fc:	7003      	strb	r3, [r0, #0]
100118fe:	230e      	movs	r3, #14
10011900:	70c4      	strb	r4, [r0, #3]
10011902:	4c0f      	ldr	r4, [pc, #60]	; (10011940 <gapc_bond_cmd_handler+0x60>)
10011904:	7043      	strb	r3, [r0, #1]
10011906:	7083      	strb	r3, [r0, #2]
10011908:	8823      	ldrh	r3, [r4, #0]
1001190a:	8824      	ldrh	r4, [r4, #0]
1001190c:	7103      	strb	r3, [r0, #4]
1001190e:	466b      	mov	r3, sp
10011910:	781b      	ldrb	r3, [r3, #0]
10011912:	0a24      	lsrs	r4, r4, #8
10011914:	72c3      	strb	r3, [r0, #11]
10011916:	466b      	mov	r3, sp
10011918:	791b      	ldrb	r3, [r3, #4]
1001191a:	7144      	strb	r4, [r0, #5]
1001191c:	73c3      	strb	r3, [r0, #15]
1001191e:	2308      	movs	r3, #8
10011920:	7183      	strb	r3, [r0, #6]
10011922:	2300      	movs	r3, #0
10011924:	240a      	movs	r4, #10
10011926:	7241      	strb	r1, [r0, #9]
10011928:	71c3      	strb	r3, [r0, #7]
1001192a:	2110      	movs	r1, #16
1001192c:	4b05      	ldr	r3, [pc, #20]	; (10011944 <gapc_bond_cmd_handler+0x64>)
1001192e:	7307      	strb	r7, [r0, #12]
10011930:	7346      	strb	r6, [r0, #13]
10011932:	7385      	strb	r5, [r0, #14]
10011934:	7204      	strb	r4, [r0, #8]
10011936:	7282      	strb	r2, [r0, #10]
10011938:	4798      	blx	r3
1001193a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1001193c:	1001aecc 	.word	0x1001aecc
10011940:	1001ab5c 	.word	0x1001ab5c
10011944:	100113c1 	.word	0x100113c1

10011948 <gapc_bond_ind>:
10011948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1001194a:	780e      	ldrb	r6, [r1, #0]
1001194c:	1c03      	adds	r3, r0, #0
1001194e:	1eb0      	subs	r0, r6, #2
10011950:	2805      	cmp	r0, #5
10011952:	d85d      	bhi.n	10011a10 <gapc_bond_ind+0xc8>
10011954:	1c15      	adds	r5, r2, #0
10011956:	1c0c      	adds	r4, r1, #0
10011958:	f001 f9fa 	bl	10012d50 <__gnu_thumb1_case_uqi>
1001195c:	2f5a030d 	.word	0x2f5a030d
10011960:	4740      	.short	0x4740
10011962:	2009      	movs	r0, #9
10011964:	2a00      	cmp	r2, #0
10011966:	d054      	beq.n	10011a12 <gapc_bond_ind+0xca>
10011968:	0a1b      	lsrs	r3, r3, #8
1001196a:	8053      	strh	r3, [r2, #2]
1001196c:	788b      	ldrb	r3, [r1, #2]
1001196e:	4829      	ldr	r0, [pc, #164]	; (10011a14 <gapc_bond_ind+0xcc>)
10011970:	7113      	strb	r3, [r2, #4]
10011972:	2100      	movs	r1, #0
10011974:	e01c      	b.n	100119b0 <gapc_bond_ind+0x68>
10011976:	2009      	movs	r0, #9
10011978:	2a00      	cmp	r2, #0
1001197a:	d04a      	beq.n	10011a12 <gapc_bond_ind+0xca>
1001197c:	4c25      	ldr	r4, [pc, #148]	; (10011a14 <gapc_bond_ind+0xcc>)
1001197e:	0a1b      	lsrs	r3, r3, #8
10011980:	8053      	strh	r3, [r2, #2]
10011982:	788b      	ldrb	r3, [r1, #2]
10011984:	2700      	movs	r7, #0
10011986:	1c10      	adds	r0, r2, #0
10011988:	1c21      	adds	r1, r4, #0
1001198a:	7013      	strb	r3, [r2, #0]
1001198c:	4e22      	ldr	r6, [pc, #136]	; (10011a18 <gapc_bond_ind+0xd0>)
1001198e:	7117      	strb	r7, [r2, #4]
10011990:	312e      	adds	r1, #46	; 0x2e
10011992:	2217      	movs	r2, #23
10011994:	3032      	adds	r0, #50	; 0x32
10011996:	47b0      	blx	r6
10011998:	1c28      	adds	r0, r5, #0
1001199a:	1c21      	adds	r1, r4, #0
1001199c:	2210      	movs	r2, #16
1001199e:	311e      	adds	r1, #30
100119a0:	3022      	adds	r0, #34	; 0x22
100119a2:	47b0      	blx	r6
100119a4:	1ca1      	adds	r1, r4, #2
100119a6:	1da8      	adds	r0, r5, #6
100119a8:	221c      	movs	r2, #28
100119aa:	47b0      	blx	r6
100119ac:	1c20      	adds	r0, r4, #0
100119ae:	1c39      	adds	r1, r7, #0
100119b0:	2246      	movs	r2, #70	; 0x46
100119b2:	4b1a      	ldr	r3, [pc, #104]	; (10011a1c <gapc_bond_ind+0xd4>)
100119b4:	4798      	blx	r3
100119b6:	2009      	movs	r0, #9
100119b8:	e02b      	b.n	10011a12 <gapc_bond_ind+0xca>
100119ba:	4d16      	ldr	r5, [pc, #88]	; (10011a14 <gapc_bond_ind+0xcc>)
100119bc:	3102      	adds	r1, #2
100119be:	1c28      	adds	r0, r5, #0
100119c0:	2210      	movs	r2, #16
100119c2:	4e15      	ldr	r6, [pc, #84]	; (10011a18 <gapc_bond_ind+0xd0>)
100119c4:	302e      	adds	r0, #46	; 0x2e
100119c6:	47b0      	blx	r6
100119c8:	1c28      	adds	r0, r5, #0
100119ca:	1c21      	adds	r1, r4, #0
100119cc:	303f      	adds	r0, #63	; 0x3f
100119ce:	3112      	adds	r1, #18
100119d0:	2206      	movs	r2, #6
100119d2:	47b0      	blx	r6
100119d4:	7e23      	ldrb	r3, [r4, #24]
100119d6:	353e      	adds	r5, #62	; 0x3e
100119d8:	702b      	strb	r3, [r5, #0]
100119da:	e019      	b.n	10011a10 <gapc_bond_ind+0xc8>
100119dc:	480d      	ldr	r0, [pc, #52]	; (10011a14 <gapc_bond_ind+0xcc>)
100119de:	3102      	adds	r1, #2
100119e0:	2210      	movs	r2, #16
100119e2:	4b0d      	ldr	r3, [pc, #52]	; (10011a18 <gapc_bond_ind+0xd0>)
100119e4:	301e      	adds	r0, #30
100119e6:	4798      	blx	r3
100119e8:	e012      	b.n	10011a10 <gapc_bond_ind+0xc8>
100119ea:	4d0a      	ldr	r5, [pc, #40]	; (10011a14 <gapc_bond_ind+0xcc>)
100119ec:	3102      	adds	r1, #2
100119ee:	2210      	movs	r2, #16
100119f0:	4e09      	ldr	r6, [pc, #36]	; (10011a18 <gapc_bond_ind+0xd0>)
100119f2:	1ca8      	adds	r0, r5, #2
100119f4:	47b0      	blx	r6
100119f6:	1c28      	adds	r0, r5, #0
100119f8:	1c21      	adds	r1, r4, #0
100119fa:	7ce3      	ldrb	r3, [r4, #19]
100119fc:	7ca2      	ldrb	r2, [r4, #18]
100119fe:	021b      	lsls	r3, r3, #8
10011a00:	4313      	orrs	r3, r2
10011a02:	3014      	adds	r0, #20
10011a04:	3114      	adds	r1, #20
10011a06:	2208      	movs	r2, #8
10011a08:	826b      	strh	r3, [r5, #18]
10011a0a:	47b0      	blx	r6
10011a0c:	7f23      	ldrb	r3, [r4, #28]
10011a0e:	772b      	strb	r3, [r5, #28]
10011a10:	2000      	movs	r0, #0
10011a12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10011a14:	10019cac 	.word	0x10019cac
10011a18:	10014e57 	.word	0x10014e57
10011a1c:	10014e69 	.word	0x10014e69

10011a20 <gapc_bond_req_ind>:
10011a20:	b570      	push	{r4, r5, r6, lr}
10011a22:	780c      	ldrb	r4, [r1, #0]
10011a24:	1c03      	adds	r3, r0, #0
10011a26:	7849      	ldrb	r1, [r1, #1]
10011a28:	2c07      	cmp	r4, #7
10011a2a:	d85c      	bhi.n	10011ae6 <gapc_bond_req_ind+0xc6>
10011a2c:	1c20      	adds	r0, r4, #0
10011a2e:	f001 f98f 	bl	10012d50 <__gnu_thumb1_case_uqi>
10011a32:	5a04      	.short	0x5a04
10011a34:	5a0b5a5a 	.word	0x5a0b5a5a
10011a38:	1f1f      	.short	0x1f1f
10011a3a:	200a      	movs	r0, #10
10011a3c:	2a00      	cmp	r2, #0
10011a3e:	d053      	beq.n	10011ae8 <gapc_bond_req_ind+0xc8>
10011a40:	0a1b      	lsrs	r3, r3, #8
10011a42:	8013      	strh	r3, [r2, #0]
10011a44:	7091      	strb	r1, [r2, #2]
10011a46:	e04f      	b.n	10011ae8 <gapc_bond_req_ind+0xc8>
10011a48:	2a00      	cmp	r2, #0
10011a4a:	d00b      	beq.n	10011a64 <gapc_bond_req_ind+0x44>
10011a4c:	0a1b      	lsrs	r3, r3, #8
10011a4e:	8013      	strh	r3, [r2, #0]
10011a50:	2900      	cmp	r1, #0
10011a52:	d102      	bne.n	10011a5a <gapc_bond_req_ind+0x3a>
10011a54:	2301      	movs	r3, #1
10011a56:	7093      	strb	r3, [r2, #2]
10011a58:	e004      	b.n	10011a64 <gapc_bond_req_ind+0x44>
10011a5a:	2300      	movs	r3, #0
10011a5c:	7093      	strb	r3, [r2, #2]
10011a5e:	2902      	cmp	r1, #2
10011a60:	d102      	bne.n	10011a68 <gapc_bond_req_ind+0x48>
10011a62:	70d3      	strb	r3, [r2, #3]
10011a64:	200c      	movs	r0, #12
10011a66:	e03f      	b.n	10011ae8 <gapc_bond_req_ind+0xc8>
10011a68:	2901      	cmp	r1, #1
10011a6a:	d1fb      	bne.n	10011a64 <gapc_bond_req_ind+0x44>
10011a6c:	70d1      	strb	r1, [r2, #3]
10011a6e:	e7f9      	b.n	10011a64 <gapc_bond_req_ind+0x44>
10011a70:	2214      	movs	r2, #20
10011a72:	481e      	ldr	r0, [pc, #120]	; (10011aec <gapc_bond_req_ind+0xcc>)
10011a74:	0a1b      	lsrs	r3, r3, #8
10011a76:	70c3      	strb	r3, [r0, #3]
10011a78:	4b1d      	ldr	r3, [pc, #116]	; (10011af0 <gapc_bond_req_ind+0xd0>)
10011a7a:	7002      	strb	r2, [r0, #0]
10011a7c:	3a06      	subs	r2, #6
10011a7e:	7042      	strb	r2, [r0, #1]
10011a80:	7082      	strb	r2, [r0, #2]
10011a82:	881a      	ldrh	r2, [r3, #0]
10011a84:	881b      	ldrh	r3, [r3, #0]
10011a86:	4e1b      	ldr	r6, [pc, #108]	; (10011af4 <gapc_bond_req_ind+0xd4>)
10011a88:	0a1b      	lsrs	r3, r3, #8
10011a8a:	7143      	strb	r3, [r0, #5]
10011a8c:	2301      	movs	r3, #1
10011a8e:	7102      	strb	r2, [r0, #4]
10011a90:	7204      	strb	r4, [r0, #8]
10011a92:	7243      	strb	r3, [r0, #9]
10011a94:	1c05      	adds	r5, r0, #0
10011a96:	1c31      	adds	r1, r6, #0
10011a98:	300a      	adds	r0, #10
10011a9a:	2c07      	cmp	r4, #7
10011a9c:	d116      	bne.n	10011acc <gapc_bond_req_ind+0xac>
10011a9e:	317e      	adds	r1, #126	; 0x7e
10011aa0:	2210      	movs	r2, #16
10011aa2:	4c15      	ldr	r4, [pc, #84]	; (10011af8 <gapc_bond_req_ind+0xd8>)
10011aa4:	47a0      	blx	r4
10011aa6:	1c33      	adds	r3, r6, #0
10011aa8:	1c31      	adds	r1, r6, #0
10011aaa:	1c28      	adds	r0, r5, #0
10011aac:	338e      	adds	r3, #142	; 0x8e
10011aae:	881b      	ldrh	r3, [r3, #0]
10011ab0:	3190      	adds	r1, #144	; 0x90
10011ab2:	76ab      	strb	r3, [r5, #26]
10011ab4:	2208      	movs	r2, #8
10011ab6:	0a1b      	lsrs	r3, r3, #8
10011ab8:	301c      	adds	r0, #28
10011aba:	76eb      	strb	r3, [r5, #27]
10011abc:	47a0      	blx	r4
10011abe:	1c31      	adds	r1, r6, #0
10011ac0:	3198      	adds	r1, #152	; 0x98
10011ac2:	780a      	ldrb	r2, [r1, #0]
10011ac4:	1d6b      	adds	r3, r5, #5
10011ac6:	77da      	strb	r2, [r3, #31]
10011ac8:	2125      	movs	r1, #37	; 0x25
10011aca:	e004      	b.n	10011ad6 <gapc_bond_req_ind+0xb6>
10011acc:	319a      	adds	r1, #154	; 0x9a
10011ace:	2210      	movs	r2, #16
10011ad0:	4b09      	ldr	r3, [pc, #36]	; (10011af8 <gapc_bond_req_ind+0xd8>)
10011ad2:	4798      	blx	r3
10011ad4:	211a      	movs	r1, #26
10011ad6:	1c0b      	adds	r3, r1, #0
10011ad8:	2400      	movs	r4, #0
10011ada:	3b08      	subs	r3, #8
10011adc:	71ab      	strb	r3, [r5, #6]
10011ade:	1c28      	adds	r0, r5, #0
10011ae0:	4b06      	ldr	r3, [pc, #24]	; (10011afc <gapc_bond_req_ind+0xdc>)
10011ae2:	71ec      	strb	r4, [r5, #7]
10011ae4:	4798      	blx	r3
10011ae6:	2000      	movs	r0, #0
10011ae8:	bd70      	pop	{r4, r5, r6, pc}
10011aea:	46c0      	nop			; (mov r8, r8)
10011aec:	1001aecc 	.word	0x1001aecc
10011af0:	1001ab5c 	.word	0x1001ab5c
10011af4:	1001abee 	.word	0x1001abee
10011af8:	10014e57 	.word	0x10014e57
10011afc:	100113c1 	.word	0x100113c1

10011b00 <gapc_bond_cfm_handler_pair_resp>:
10011b00:	b5f0      	push	{r4, r5, r6, r7, lr}
10011b02:	b085      	sub	sp, #20
10011b04:	1c07      	adds	r7, r0, #0
10011b06:	a80a      	add	r0, sp, #40	; 0x28
10011b08:	7806      	ldrb	r6, [r0, #0]
10011b0a:	a80b      	add	r0, sp, #44	; 0x2c
10011b0c:	7805      	ldrb	r5, [r0, #0]
10011b0e:	a80c      	add	r0, sp, #48	; 0x30
10011b10:	7800      	ldrb	r0, [r0, #0]
10011b12:	2414      	movs	r4, #20
10011b14:	9002      	str	r0, [sp, #8]
10011b16:	a80d      	add	r0, sp, #52	; 0x34
10011b18:	7800      	ldrb	r0, [r0, #0]
10011b1a:	9301      	str	r3, [sp, #4]
10011b1c:	9003      	str	r0, [sp, #12]
10011b1e:	a80e      	add	r0, sp, #56	; 0x38
10011b20:	8800      	ldrh	r0, [r0, #0]
10011b22:	4684      	mov	ip, r0
10011b24:	4812      	ldr	r0, [pc, #72]	; (10011b70 <gapc_bond_cfm_handler_pair_resp+0x70>)
10011b26:	7004      	strb	r4, [r0, #0]
10011b28:	3c06      	subs	r4, #6
10011b2a:	7044      	strb	r4, [r0, #1]
10011b2c:	7084      	strb	r4, [r0, #2]
10011b2e:	4664      	mov	r4, ip
10011b30:	70c4      	strb	r4, [r0, #3]
10011b32:	4c10      	ldr	r4, [pc, #64]	; (10011b74 <gapc_bond_cfm_handler_pair_resp+0x74>)
10011b34:	7247      	strb	r7, [r0, #9]
10011b36:	8823      	ldrh	r3, [r4, #0]
10011b38:	8824      	ldrh	r4, [r4, #0]
10011b3a:	7103      	strb	r3, [r0, #4]
10011b3c:	466b      	mov	r3, sp
10011b3e:	791b      	ldrb	r3, [r3, #4]
10011b40:	0a24      	lsrs	r4, r4, #8
10011b42:	7303      	strb	r3, [r0, #12]
10011b44:	466b      	mov	r3, sp
10011b46:	7a1b      	ldrb	r3, [r3, #8]
10011b48:	7144      	strb	r4, [r0, #5]
10011b4a:	73c3      	strb	r3, [r0, #15]
10011b4c:	466b      	mov	r3, sp
10011b4e:	7b1b      	ldrb	r3, [r3, #12]
10011b50:	2401      	movs	r4, #1
10011b52:	7403      	strb	r3, [r0, #16]
10011b54:	2309      	movs	r3, #9
10011b56:	7183      	strb	r3, [r0, #6]
10011b58:	2300      	movs	r3, #0
10011b5a:	7204      	strb	r4, [r0, #8]
10011b5c:	7281      	strb	r1, [r0, #10]
10011b5e:	72c2      	strb	r2, [r0, #11]
10011b60:	7346      	strb	r6, [r0, #13]
10011b62:	7385      	strb	r5, [r0, #14]
10011b64:	71c3      	strb	r3, [r0, #7]
10011b66:	2111      	movs	r1, #17
10011b68:	4b03      	ldr	r3, [pc, #12]	; (10011b78 <gapc_bond_cfm_handler_pair_resp+0x78>)
10011b6a:	4798      	blx	r3
10011b6c:	b005      	add	sp, #20
10011b6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10011b70:	1001aecc 	.word	0x1001aecc
10011b74:	1001ab5c 	.word	0x1001ab5c
10011b78:	100113c1 	.word	0x100113c1

10011b7c <gapc_bond_cfm_handler_key_exch>:
10011b7c:	b538      	push	{r3, r4, r5, lr}
10011b7e:	2514      	movs	r5, #20
10011b80:	4c0d      	ldr	r4, [pc, #52]	; (10011bb8 <gapc_bond_cfm_handler_key_exch+0x3c>)
10011b82:	70e3      	strb	r3, [r4, #3]
10011b84:	4b0d      	ldr	r3, [pc, #52]	; (10011bbc <gapc_bond_cfm_handler_key_exch+0x40>)
10011b86:	7025      	strb	r5, [r4, #0]
10011b88:	3d06      	subs	r5, #6
10011b8a:	7065      	strb	r5, [r4, #1]
10011b8c:	70a5      	strb	r5, [r4, #2]
10011b8e:	881d      	ldrh	r5, [r3, #0]
10011b90:	881b      	ldrh	r3, [r3, #0]
10011b92:	7220      	strb	r0, [r4, #8]
10011b94:	0a1b      	lsrs	r3, r3, #8
10011b96:	7163      	strb	r3, [r4, #5]
10011b98:	7261      	strb	r1, [r4, #9]
10011b9a:	4b09      	ldr	r3, [pc, #36]	; (10011bc0 <gapc_bond_cfm_handler_key_exch+0x44>)
10011b9c:	1c11      	adds	r1, r2, #0
10011b9e:	4809      	ldr	r0, [pc, #36]	; (10011bc4 <gapc_bond_cfm_handler_key_exch+0x48>)
10011ba0:	2210      	movs	r2, #16
10011ba2:	7125      	strb	r5, [r4, #4]
10011ba4:	4798      	blx	r3
10011ba6:	2312      	movs	r3, #18
10011ba8:	71a3      	strb	r3, [r4, #6]
10011baa:	2300      	movs	r3, #0
10011bac:	1c20      	adds	r0, r4, #0
10011bae:	71e3      	strb	r3, [r4, #7]
10011bb0:	211a      	movs	r1, #26
10011bb2:	4b05      	ldr	r3, [pc, #20]	; (10011bc8 <gapc_bond_cfm_handler_key_exch+0x4c>)
10011bb4:	4798      	blx	r3
10011bb6:	bd38      	pop	{r3, r4, r5, pc}
10011bb8:	1001aecc 	.word	0x1001aecc
10011bbc:	1001ab5c 	.word	0x1001ab5c
10011bc0:	10014e57 	.word	0x10014e57
10011bc4:	1001aed6 	.word	0x1001aed6
10011bc8:	100113c1 	.word	0x100113c1

10011bcc <gapc_security_cmd_handler>:
10011bcc:	221a      	movs	r2, #26
10011bce:	b508      	push	{r3, lr}
10011bd0:	4b0b      	ldr	r3, [pc, #44]	; (10011c00 <gapc_security_cmd_handler+0x34>)
10011bd2:	701a      	strb	r2, [r3, #0]
10011bd4:	3a0c      	subs	r2, #12
10011bd6:	705a      	strb	r2, [r3, #1]
10011bd8:	709a      	strb	r2, [r3, #2]
10011bda:	4a0a      	ldr	r2, [pc, #40]	; (10011c04 <gapc_security_cmd_handler+0x38>)
10011bdc:	70d8      	strb	r0, [r3, #3]
10011bde:	8810      	ldrh	r0, [r2, #0]
10011be0:	8812      	ldrh	r2, [r2, #0]
10011be2:	7118      	strb	r0, [r3, #4]
10011be4:	0a12      	lsrs	r2, r2, #8
10011be6:	715a      	strb	r2, [r3, #5]
10011be8:	220c      	movs	r2, #12
10011bea:	721a      	strb	r2, [r3, #8]
10011bec:	3a0a      	subs	r2, #10
10011bee:	719a      	strb	r2, [r3, #6]
10011bf0:	2200      	movs	r2, #0
10011bf2:	7259      	strb	r1, [r3, #9]
10011bf4:	71da      	strb	r2, [r3, #7]
10011bf6:	1c18      	adds	r0, r3, #0
10011bf8:	210a      	movs	r1, #10
10011bfa:	4b03      	ldr	r3, [pc, #12]	; (10011c08 <gapc_security_cmd_handler+0x3c>)
10011bfc:	4798      	blx	r3
10011bfe:	bd08      	pop	{r3, pc}
10011c00:	1001aecc 	.word	0x1001aecc
10011c04:	1001ab5c 	.word	0x1001ab5c
10011c08:	100113c1 	.word	0x100113c1

10011c0c <gapc_encrypt_cmd_handler>:
10011c0c:	b5f0      	push	{r4, r5, r6, r7, lr}
10011c0e:	2500      	movs	r5, #0
10011c10:	b089      	sub	sp, #36	; 0x24
10011c12:	9306      	str	r3, [sp, #24]
10011c14:	ab0e      	add	r3, sp, #56	; 0x38
10011c16:	781b      	ldrb	r3, [r3, #0]
10011c18:	1c17      	adds	r7, r2, #0
10011c1a:	9307      	str	r3, [sp, #28]
10011c1c:	ab0f      	add	r3, sp, #60	; 0x3c
10011c1e:	781b      	ldrb	r3, [r3, #0]
10011c20:	4a19      	ldr	r2, [pc, #100]	; (10011c88 <gapc_encrypt_cmd_handler+0x7c>)
10011c22:	1c06      	adds	r6, r0, #0
10011c24:	9105      	str	r1, [sp, #20]
10011c26:	9300      	str	r3, [sp, #0]
10011c28:	9002      	str	r0, [sp, #8]
10011c2a:	1c29      	adds	r1, r5, #0
10011c2c:	1c2b      	adds	r3, r5, #0
10011c2e:	9501      	str	r5, [sp, #4]
10011c30:	1c10      	adds	r0, r2, #0
10011c32:	4c16      	ldr	r4, [pc, #88]	; (10011c8c <gapc_encrypt_cmd_handler+0x80>)
10011c34:	47a0      	blx	r4
10011c36:	2316      	movs	r3, #22
10011c38:	4c15      	ldr	r4, [pc, #84]	; (10011c90 <gapc_encrypt_cmd_handler+0x84>)
10011c3a:	9905      	ldr	r1, [sp, #20]
10011c3c:	7023      	strb	r3, [r4, #0]
10011c3e:	3b08      	subs	r3, #8
10011c40:	7063      	strb	r3, [r4, #1]
10011c42:	70a3      	strb	r3, [r4, #2]
10011c44:	4b13      	ldr	r3, [pc, #76]	; (10011c94 <gapc_encrypt_cmd_handler+0x88>)
10011c46:	70e6      	strb	r6, [r4, #3]
10011c48:	881a      	ldrh	r2, [r3, #0]
10011c4a:	881b      	ldrh	r3, [r3, #0]
10011c4c:	7122      	strb	r2, [r4, #4]
10011c4e:	0a1b      	lsrs	r3, r3, #8
10011c50:	7163      	strb	r3, [r4, #5]
10011c52:	230b      	movs	r3, #11
10011c54:	4e10      	ldr	r6, [pc, #64]	; (10011c98 <gapc_encrypt_cmd_handler+0x8c>)
10011c56:	2210      	movs	r2, #16
10011c58:	4810      	ldr	r0, [pc, #64]	; (10011c9c <gapc_encrypt_cmd_handler+0x90>)
10011c5a:	7223      	strb	r3, [r4, #8]
10011c5c:	7265      	strb	r5, [r4, #9]
10011c5e:	47b0      	blx	r6
10011c60:	0a3b      	lsrs	r3, r7, #8
10011c62:	9906      	ldr	r1, [sp, #24]
10011c64:	2208      	movs	r2, #8
10011c66:	480e      	ldr	r0, [pc, #56]	; (10011ca0 <gapc_encrypt_cmd_handler+0x94>)
10011c68:	76e3      	strb	r3, [r4, #27]
10011c6a:	76a7      	strb	r7, [r4, #26]
10011c6c:	47b0      	blx	r6
10011c6e:	466a      	mov	r2, sp
10011c70:	7f12      	ldrb	r2, [r2, #28]
10011c72:	1d63      	adds	r3, r4, #5
10011c74:	77da      	strb	r2, [r3, #31]
10011c76:	231d      	movs	r3, #29
10011c78:	1c20      	adds	r0, r4, #0
10011c7a:	71a3      	strb	r3, [r4, #6]
10011c7c:	2125      	movs	r1, #37	; 0x25
10011c7e:	4b09      	ldr	r3, [pc, #36]	; (10011ca4 <gapc_encrypt_cmd_handler+0x98>)
10011c80:	71e5      	strb	r5, [r4, #7]
10011c82:	4798      	blx	r3
10011c84:	b009      	add	sp, #36	; 0x24
10011c86:	bdf0      	pop	{r4, r5, r6, r7, pc}
10011c88:	10019c8c 	.word	0x10019c8c
10011c8c:	100116c5 	.word	0x100116c5
10011c90:	1001aecc 	.word	0x1001aecc
10011c94:	1001ab5c 	.word	0x1001ab5c
10011c98:	10014e57 	.word	0x10014e57
10011c9c:	1001aed6 	.word	0x1001aed6
10011ca0:	1001aee8 	.word	0x1001aee8
10011ca4:	100113c1 	.word	0x100113c1

10011ca8 <gapc_encrypt_req_ind>:
10011ca8:	b508      	push	{r3, lr}
10011caa:	0a00      	lsrs	r0, r0, #8
10011cac:	8010      	strh	r0, [r2, #0]
10011cae:	784b      	ldrb	r3, [r1, #1]
10011cb0:	7808      	ldrb	r0, [r1, #0]
10011cb2:	021b      	lsls	r3, r3, #8
10011cb4:	4303      	orrs	r3, r0
10011cb6:	8053      	strh	r3, [r2, #2]
10011cb8:	1d10      	adds	r0, r2, #4
10011cba:	3102      	adds	r1, #2
10011cbc:	2208      	movs	r2, #8
10011cbe:	4b01      	ldr	r3, [pc, #4]	; (10011cc4 <gapc_encrypt_req_ind+0x1c>)
10011cc0:	4798      	blx	r3
10011cc2:	bd08      	pop	{r3, pc}
10011cc4:	10014e57 	.word	0x10014e57

10011cc8 <gapc_encrypt_cfm_handler>:
10011cc8:	b5f0      	push	{r4, r5, r6, r7, lr}
10011cca:	2500      	movs	r5, #0
10011ccc:	b087      	sub	sp, #28
10011cce:	9304      	str	r3, [sp, #16]
10011cd0:	ab0c      	add	r3, sp, #48	; 0x30
10011cd2:	781b      	ldrb	r3, [r3, #0]
10011cd4:	1c17      	adds	r7, r2, #0
10011cd6:	4a15      	ldr	r2, [pc, #84]	; (10011d2c <gapc_encrypt_cfm_handler+0x64>)
10011cd8:	1c06      	adds	r6, r0, #0
10011cda:	9305      	str	r3, [sp, #20]
10011cdc:	9100      	str	r1, [sp, #0]
10011cde:	9002      	str	r0, [sp, #8]
10011ce0:	1c29      	adds	r1, r5, #0
10011ce2:	1c2b      	adds	r3, r5, #0
10011ce4:	9501      	str	r5, [sp, #4]
10011ce6:	1c10      	adds	r0, r2, #0
10011ce8:	4c11      	ldr	r4, [pc, #68]	; (10011d30 <gapc_encrypt_cfm_handler+0x68>)
10011cea:	47a0      	blx	r4
10011cec:	2318      	movs	r3, #24
10011cee:	4c11      	ldr	r4, [pc, #68]	; (10011d34 <gapc_encrypt_cfm_handler+0x6c>)
10011cf0:	9904      	ldr	r1, [sp, #16]
10011cf2:	7023      	strb	r3, [r4, #0]
10011cf4:	3b0a      	subs	r3, #10
10011cf6:	7063      	strb	r3, [r4, #1]
10011cf8:	70a3      	strb	r3, [r4, #2]
10011cfa:	4b0f      	ldr	r3, [pc, #60]	; (10011d38 <gapc_encrypt_cfm_handler+0x70>)
10011cfc:	480f      	ldr	r0, [pc, #60]	; (10011d3c <gapc_encrypt_cfm_handler+0x74>)
10011cfe:	881a      	ldrh	r2, [r3, #0]
10011d00:	881b      	ldrh	r3, [r3, #0]
10011d02:	7122      	strb	r2, [r4, #4]
10011d04:	0a1b      	lsrs	r3, r3, #8
10011d06:	7163      	strb	r3, [r4, #5]
10011d08:	2210      	movs	r2, #16
10011d0a:	4b0d      	ldr	r3, [pc, #52]	; (10011d40 <gapc_encrypt_cfm_handler+0x78>)
10011d0c:	70e6      	strb	r6, [r4, #3]
10011d0e:	7227      	strb	r7, [r4, #8]
10011d10:	4798      	blx	r3
10011d12:	466b      	mov	r3, sp
10011d14:	7d1b      	ldrb	r3, [r3, #20]
10011d16:	1c20      	adds	r0, r4, #0
10011d18:	7663      	strb	r3, [r4, #25]
10011d1a:	2312      	movs	r3, #18
10011d1c:	211a      	movs	r1, #26
10011d1e:	71a3      	strb	r3, [r4, #6]
10011d20:	4b08      	ldr	r3, [pc, #32]	; (10011d44 <gapc_encrypt_cfm_handler+0x7c>)
10011d22:	71e5      	strb	r5, [r4, #7]
10011d24:	4798      	blx	r3
10011d26:	b007      	add	sp, #28
10011d28:	bdf0      	pop	{r4, r5, r6, r7, pc}
10011d2a:	46c0      	nop			; (mov r8, r8)
10011d2c:	10019c9c 	.word	0x10019c9c
10011d30:	100116c5 	.word	0x100116c5
10011d34:	1001aecc 	.word	0x1001aecc
10011d38:	1001ab5c 	.word	0x1001ab5c
10011d3c:	1001aed5 	.word	0x1001aed5
10011d40:	10014e57 	.word	0x10014e57
10011d44:	100113c1 	.word	0x100113c1

10011d48 <gapc_encrypt_ind>:
10011d48:	780b      	ldrb	r3, [r1, #0]
10011d4a:	0a00      	lsrs	r0, r0, #8
10011d4c:	70d3      	strb	r3, [r2, #3]
10011d4e:	2300      	movs	r3, #0
10011d50:	8010      	strh	r0, [r2, #0]
10011d52:	7093      	strb	r3, [r2, #2]
10011d54:	4770      	bx	lr
	...

10011d58 <gapc_param_update_cfm_handler>:
10011d58:	b538      	push	{r3, r4, r5, lr}
10011d5a:	2410      	movs	r4, #16
10011d5c:	1c05      	adds	r5, r0, #0
10011d5e:	480e      	ldr	r0, [pc, #56]	; (10011d98 <gapc_param_update_cfm_handler+0x40>)
10011d60:	7004      	strb	r4, [r0, #0]
10011d62:	3c02      	subs	r4, #2
10011d64:	7044      	strb	r4, [r0, #1]
10011d66:	7084      	strb	r4, [r0, #2]
10011d68:	4c0c      	ldr	r4, [pc, #48]	; (10011d9c <gapc_param_update_cfm_handler+0x44>)
10011d6a:	70c5      	strb	r5, [r0, #3]
10011d6c:	8825      	ldrh	r5, [r4, #0]
10011d6e:	8824      	ldrh	r4, [r4, #0]
10011d70:	72c3      	strb	r3, [r0, #11]
10011d72:	0a1b      	lsrs	r3, r3, #8
10011d74:	0a24      	lsrs	r4, r4, #8
10011d76:	7303      	strb	r3, [r0, #12]
10011d78:	2305      	movs	r3, #5
10011d7a:	7144      	strb	r4, [r0, #5]
10011d7c:	2400      	movs	r4, #0
10011d7e:	7201      	strb	r1, [r0, #8]
10011d80:	7242      	strb	r2, [r0, #9]
10011d82:	7183      	strb	r3, [r0, #6]
10011d84:	0a12      	lsrs	r2, r2, #8
10011d86:	210d      	movs	r1, #13
10011d88:	4b05      	ldr	r3, [pc, #20]	; (10011da0 <gapc_param_update_cfm_handler+0x48>)
10011d8a:	7105      	strb	r5, [r0, #4]
10011d8c:	7282      	strb	r2, [r0, #10]
10011d8e:	71c4      	strb	r4, [r0, #7]
10011d90:	4798      	blx	r3
10011d92:	1c20      	adds	r0, r4, #0
10011d94:	bd38      	pop	{r3, r4, r5, pc}
10011d96:	46c0      	nop			; (mov r8, r8)
10011d98:	1001aecc 	.word	0x1001aecc
10011d9c:	1001ab5c 	.word	0x1001ab5c
10011da0:	100113c1 	.word	0x100113c1

10011da4 <gapc_param_updated_ind>:
10011da4:	2300      	movs	r3, #0
10011da6:	0a00      	lsrs	r0, r0, #8
10011da8:	8010      	strh	r0, [r2, #0]
10011daa:	7093      	strb	r3, [r2, #2]
10011dac:	784b      	ldrb	r3, [r1, #1]
10011dae:	7808      	ldrb	r0, [r1, #0]
10011db0:	021b      	lsls	r3, r3, #8
10011db2:	4303      	orrs	r3, r0
10011db4:	8093      	strh	r3, [r2, #4]
10011db6:	78cb      	ldrb	r3, [r1, #3]
10011db8:	7888      	ldrb	r0, [r1, #2]
10011dba:	021b      	lsls	r3, r3, #8
10011dbc:	4303      	orrs	r3, r0
10011dbe:	80d3      	strh	r3, [r2, #6]
10011dc0:	794b      	ldrb	r3, [r1, #5]
10011dc2:	7909      	ldrb	r1, [r1, #4]
10011dc4:	021b      	lsls	r3, r3, #8
10011dc6:	430b      	orrs	r3, r1
10011dc8:	2007      	movs	r0, #7
10011dca:	8113      	strh	r3, [r2, #8]
10011dcc:	4770      	bx	lr

10011dce <gapc_param_updated_req_ind>:
10011dce:	0a00      	lsrs	r0, r0, #8
10011dd0:	8010      	strh	r0, [r2, #0]
10011dd2:	784b      	ldrb	r3, [r1, #1]
10011dd4:	7808      	ldrb	r0, [r1, #0]
10011dd6:	021b      	lsls	r3, r3, #8
10011dd8:	4303      	orrs	r3, r0
10011dda:	8053      	strh	r3, [r2, #2]
10011ddc:	78cb      	ldrb	r3, [r1, #3]
10011dde:	7888      	ldrb	r0, [r1, #2]
10011de0:	021b      	lsls	r3, r3, #8
10011de2:	4303      	orrs	r3, r0
10011de4:	8093      	strh	r3, [r2, #4]
10011de6:	794b      	ldrb	r3, [r1, #5]
10011de8:	7908      	ldrb	r0, [r1, #4]
10011dea:	021b      	lsls	r3, r3, #8
10011dec:	4303      	orrs	r3, r0
10011dee:	80d3      	strh	r3, [r2, #6]
10011df0:	79cb      	ldrb	r3, [r1, #7]
10011df2:	7989      	ldrb	r1, [r1, #6]
10011df4:	021b      	lsls	r3, r3, #8
10011df6:	430b      	orrs	r3, r1
10011df8:	2008      	movs	r0, #8
10011dfa:	8113      	strh	r3, [r2, #8]
10011dfc:	4770      	bx	lr
	...

10011e00 <gapc_dev_info_req_ind_handler>:
10011e00:	b508      	push	{r3, lr}
10011e02:	1c0b      	adds	r3, r1, #0
10011e04:	0a01      	lsrs	r1, r0, #8
10011e06:	8011      	strh	r1, [r2, #0]
10011e08:	7818      	ldrb	r0, [r3, #0]
10011e0a:	7090      	strb	r0, [r2, #2]
10011e0c:	2800      	cmp	r0, #0
10011e0e:	d104      	bne.n	10011e1a <gapc_dev_info_req_ind_handler+0x1a>
10011e10:	4b03      	ldr	r3, [pc, #12]	; (10011e20 <gapc_dev_info_req_ind_handler+0x20>)
10011e12:	33aa      	adds	r3, #170	; 0xaa
10011e14:	881b      	ldrh	r3, [r3, #0]
10011e16:	2b00      	cmp	r3, #0
10011e18:	d001      	beq.n	10011e1e <gapc_dev_info_req_ind_handler+0x1e>
10011e1a:	4b02      	ldr	r3, [pc, #8]	; (10011e24 <gapc_dev_info_req_ind_handler+0x24>)
10011e1c:	4798      	blx	r3
10011e1e:	bd08      	pop	{r3, pc}
10011e20:	1001abee 	.word	0x1001abee
10011e24:	100114d1 	.word	0x100114d1

10011e28 <gapc_sec_req_ind>:
10011e28:	0a00      	lsrs	r0, r0, #8
10011e2a:	8010      	strh	r0, [r2, #0]
10011e2c:	7809      	ldrb	r1, [r1, #0]
10011e2e:	2301      	movs	r3, #1
10011e30:	1c08      	adds	r0, r1, #0
10011e32:	0889      	lsrs	r1, r1, #2
10011e34:	4018      	ands	r0, r3
10011e36:	400b      	ands	r3, r1
10011e38:	70d0      	strb	r0, [r2, #3]
10011e3a:	7113      	strb	r3, [r2, #4]
10011e3c:	4770      	bx	lr

10011e3e <gapc_sign_counter_ind_handler>:
10011e3e:	0a00      	lsrs	r0, r0, #8
10011e40:	8010      	strh	r0, [r2, #0]
10011e42:	784b      	ldrb	r3, [r1, #1]
10011e44:	0218      	lsls	r0, r3, #8
10011e46:	788b      	ldrb	r3, [r1, #2]
10011e48:	041b      	lsls	r3, r3, #16
10011e4a:	4303      	orrs	r3, r0
10011e4c:	7808      	ldrb	r0, [r1, #0]
10011e4e:	4303      	orrs	r3, r0
10011e50:	78c8      	ldrb	r0, [r1, #3]
10011e52:	0600      	lsls	r0, r0, #24
10011e54:	4303      	orrs	r3, r0
10011e56:	6053      	str	r3, [r2, #4]
10011e58:	794b      	ldrb	r3, [r1, #5]
10011e5a:	0218      	lsls	r0, r3, #8
10011e5c:	798b      	ldrb	r3, [r1, #6]
10011e5e:	041b      	lsls	r3, r3, #16
10011e60:	4303      	orrs	r3, r0
10011e62:	7908      	ldrb	r0, [r1, #4]
10011e64:	79c9      	ldrb	r1, [r1, #7]
10011e66:	4303      	orrs	r3, r0
10011e68:	0609      	lsls	r1, r1, #24
10011e6a:	430b      	orrs	r3, r1
10011e6c:	2000      	movs	r0, #0
10011e6e:	6093      	str	r3, [r2, #8]
10011e70:	4770      	bx	lr
	...

10011e74 <gapc_peer_att_info_ind_handler>:
10011e74:	b510      	push	{r4, lr}
10011e76:	0a00      	lsrs	r0, r0, #8
10011e78:	8010      	strh	r0, [r2, #0]
10011e7a:	7808      	ldrb	r0, [r1, #0]
10011e7c:	7090      	strb	r0, [r2, #2]
10011e7e:	788b      	ldrb	r3, [r1, #2]
10011e80:	784c      	ldrb	r4, [r1, #1]
10011e82:	021b      	lsls	r3, r3, #8
10011e84:	4323      	orrs	r3, r4
10011e86:	8093      	strh	r3, [r2, #4]
10011e88:	2801      	cmp	r0, #1
10011e8a:	d027      	beq.n	10011edc <gapc_peer_att_info_ind_handler+0x68>
10011e8c:	2800      	cmp	r0, #0
10011e8e:	d017      	beq.n	10011ec0 <gapc_peer_att_info_ind_handler+0x4c>
10011e90:	2802      	cmp	r0, #2
10011e92:	d12a      	bne.n	10011eea <gapc_peer_att_info_ind_handler+0x76>
10011e94:	790b      	ldrb	r3, [r1, #4]
10011e96:	78c8      	ldrb	r0, [r1, #3]
10011e98:	021b      	lsls	r3, r3, #8
10011e9a:	4303      	orrs	r3, r0
10011e9c:	8113      	strh	r3, [r2, #8]
10011e9e:	798b      	ldrb	r3, [r1, #6]
10011ea0:	7948      	ldrb	r0, [r1, #5]
10011ea2:	021b      	lsls	r3, r3, #8
10011ea4:	4303      	orrs	r3, r0
10011ea6:	80d3      	strh	r3, [r2, #6]
10011ea8:	7a0b      	ldrb	r3, [r1, #8]
10011eaa:	79c8      	ldrb	r0, [r1, #7]
10011eac:	021b      	lsls	r3, r3, #8
10011eae:	4303      	orrs	r3, r0
10011eb0:	8193      	strh	r3, [r2, #12]
10011eb2:	7a8b      	ldrb	r3, [r1, #10]
10011eb4:	7a49      	ldrb	r1, [r1, #9]
10011eb6:	021b      	lsls	r3, r3, #8
10011eb8:	430b      	orrs	r3, r1
10011eba:	8153      	strh	r3, [r2, #10]
10011ebc:	2306      	movs	r3, #6
10011ebe:	e013      	b.n	10011ee8 <gapc_peer_att_info_ind_handler+0x74>
10011ec0:	1c14      	adds	r4, r2, #0
10011ec2:	1c20      	adds	r0, r4, #0
10011ec4:	790a      	ldrb	r2, [r1, #4]
10011ec6:	78cb      	ldrb	r3, [r1, #3]
10011ec8:	0212      	lsls	r2, r2, #8
10011eca:	431a      	orrs	r2, r3
10011ecc:	80e2      	strh	r2, [r4, #6]
10011ece:	4b07      	ldr	r3, [pc, #28]	; (10011eec <gapc_peer_att_info_ind_handler+0x78>)
10011ed0:	3008      	adds	r0, #8
10011ed2:	3105      	adds	r1, #5
10011ed4:	4798      	blx	r3
10011ed6:	2302      	movs	r3, #2
10011ed8:	70a3      	strb	r3, [r4, #2]
10011eda:	e006      	b.n	10011eea <gapc_peer_att_info_ind_handler+0x76>
10011edc:	790b      	ldrb	r3, [r1, #4]
10011ede:	78c9      	ldrb	r1, [r1, #3]
10011ee0:	021b      	lsls	r3, r3, #8
10011ee2:	430b      	orrs	r3, r1
10011ee4:	80d3      	strh	r3, [r2, #6]
10011ee6:	2305      	movs	r3, #5
10011ee8:	7093      	strb	r3, [r2, #2]
10011eea:	bd10      	pop	{r4, pc}
10011eec:	10014e57 	.word	0x10014e57

10011ef0 <gapc_con_channel_map_ind_handler>:
10011ef0:	b508      	push	{r3, lr}
10011ef2:	2300      	movs	r3, #0
10011ef4:	0a00      	lsrs	r0, r0, #8
10011ef6:	7013      	strb	r3, [r2, #0]
10011ef8:	8050      	strh	r0, [r2, #2]
10011efa:	4b02      	ldr	r3, [pc, #8]	; (10011f04 <gapc_con_channel_map_ind_handler+0x14>)
10011efc:	1d10      	adds	r0, r2, #4
10011efe:	2205      	movs	r2, #5
10011f00:	4798      	blx	r3
10011f02:	bd08      	pop	{r3, pc}
10011f04:	10014e57 	.word	0x10014e57

10011f08 <gapc_lecb_connected>:
10011f08:	7843      	ldrb	r3, [r0, #1]
10011f0a:	7802      	ldrb	r2, [r0, #0]
10011f0c:	021b      	lsls	r3, r3, #8
10011f0e:	4313      	orrs	r3, r2
10011f10:	800b      	strh	r3, [r1, #0]
10011f12:	78c3      	ldrb	r3, [r0, #3]
10011f14:	7882      	ldrb	r2, [r0, #2]
10011f16:	021b      	lsls	r3, r3, #8
10011f18:	4313      	orrs	r3, r2
10011f1a:	804b      	strh	r3, [r1, #2]
10011f1c:	7943      	ldrb	r3, [r0, #5]
10011f1e:	7902      	ldrb	r2, [r0, #4]
10011f20:	021b      	lsls	r3, r3, #8
10011f22:	4313      	orrs	r3, r2
10011f24:	808b      	strh	r3, [r1, #4]
10011f26:	79c3      	ldrb	r3, [r0, #7]
10011f28:	7982      	ldrb	r2, [r0, #6]
10011f2a:	021b      	lsls	r3, r3, #8
10011f2c:	4313      	orrs	r3, r2
10011f2e:	80cb      	strh	r3, [r1, #6]
10011f30:	2300      	movs	r3, #0
10011f32:	720b      	strb	r3, [r1, #8]
10011f34:	4770      	bx	lr

10011f36 <gapc_lecb_disconnected>:
10011f36:	7843      	ldrb	r3, [r0, #1]
10011f38:	7802      	ldrb	r2, [r0, #0]
10011f3a:	021b      	lsls	r3, r3, #8
10011f3c:	4313      	orrs	r3, r2
10011f3e:	800b      	strh	r3, [r1, #0]
10011f40:	78c3      	ldrb	r3, [r0, #3]
10011f42:	7882      	ldrb	r2, [r0, #2]
10011f44:	021b      	lsls	r3, r3, #8
10011f46:	4313      	orrs	r3, r2
10011f48:	804b      	strh	r3, [r1, #2]
10011f4a:	4770      	bx	lr

10011f4c <gapc_lecb_connect_req_ind>:
10011f4c:	7843      	ldrb	r3, [r0, #1]
10011f4e:	7802      	ldrb	r2, [r0, #0]
10011f50:	021b      	lsls	r3, r3, #8
10011f52:	4313      	orrs	r3, r2
10011f54:	800b      	strh	r3, [r1, #0]
10011f56:	78c3      	ldrb	r3, [r0, #3]
10011f58:	7882      	ldrb	r2, [r0, #2]
10011f5a:	021b      	lsls	r3, r3, #8
10011f5c:	4313      	orrs	r3, r2
10011f5e:	804b      	strh	r3, [r1, #2]
10011f60:	7943      	ldrb	r3, [r0, #5]
10011f62:	7902      	ldrb	r2, [r0, #4]
10011f64:	021b      	lsls	r3, r3, #8
10011f66:	4313      	orrs	r3, r2
10011f68:	808b      	strh	r3, [r1, #4]
10011f6a:	79c3      	ldrb	r3, [r0, #7]
10011f6c:	7982      	ldrb	r2, [r0, #6]
10011f6e:	021b      	lsls	r3, r3, #8
10011f70:	4313      	orrs	r3, r2
10011f72:	80cb      	strh	r3, [r1, #6]
10011f74:	4770      	bx	lr

10011f76 <gapc_lecb_add_credit_resp_handler>:
10011f76:	7843      	ldrb	r3, [r0, #1]
10011f78:	7802      	ldrb	r2, [r0, #0]
10011f7a:	021b      	lsls	r3, r3, #8
10011f7c:	4313      	orrs	r3, r2
10011f7e:	800b      	strh	r3, [r1, #0]
10011f80:	78c3      	ldrb	r3, [r0, #3]
10011f82:	7882      	ldrb	r2, [r0, #2]
10011f84:	021b      	lsls	r3, r3, #8
10011f86:	4313      	orrs	r3, r2
10011f88:	804b      	strh	r3, [r1, #2]
10011f8a:	7943      	ldrb	r3, [r0, #5]
10011f8c:	7902      	ldrb	r2, [r0, #4]
10011f8e:	021b      	lsls	r3, r3, #8
10011f90:	4313      	orrs	r3, r2
10011f92:	808b      	strh	r3, [r1, #4]
10011f94:	4770      	bx	lr
	...

10011f98 <gapm_reset_req_handler>:
10011f98:	b573      	push	{r0, r1, r4, r5, r6, lr}
10011f9a:	466b      	mov	r3, sp
10011f9c:	4915      	ldr	r1, [pc, #84]	; (10011ff4 <gapm_reset_req_handler+0x5c>)
10011f9e:	4816      	ldr	r0, [pc, #88]	; (10011ff8 <gapm_reset_req_handler+0x60>)
10011fa0:	880c      	ldrh	r4, [r1, #0]
10011fa2:	8809      	ldrh	r1, [r1, #0]
10011fa4:	1ddd      	adds	r5, r3, #7
10011fa6:	0a09      	lsrs	r1, r1, #8
10011fa8:	2300      	movs	r3, #0
10011faa:	2202      	movs	r2, #2
10011fac:	7141      	strb	r1, [r0, #5]
10011fae:	26d0      	movs	r6, #208	; 0xd0
10011fb0:	2101      	movs	r1, #1
10011fb2:	7104      	strb	r4, [r0, #4]
10011fb4:	4c11      	ldr	r4, [pc, #68]	; (10011ffc <gapm_reset_req_handler+0x64>)
10011fb6:	702b      	strb	r3, [r5, #0]
10011fb8:	7002      	strb	r2, [r0, #0]
10011fba:	70c3      	strb	r3, [r0, #3]
10011fbc:	320b      	adds	r2, #11
10011fbe:	7201      	strb	r1, [r0, #8]
10011fc0:	7181      	strb	r1, [r0, #6]
10011fc2:	71c3      	strb	r3, [r0, #7]
10011fc4:	3108      	adds	r1, #8
10011fc6:	4b0e      	ldr	r3, [pc, #56]	; (10012000 <gapm_reset_req_handler+0x68>)
10011fc8:	0136      	lsls	r6, r6, #4
10011fca:	7042      	strb	r2, [r0, #1]
10011fcc:	7082      	strb	r2, [r0, #2]
10011fce:	80a2      	strh	r2, [r4, #4]
10011fd0:	8026      	strh	r6, [r4, #0]
10011fd2:	4798      	blx	r3
10011fd4:	1c28      	adds	r0, r5, #0
10011fd6:	4b0b      	ldr	r3, [pc, #44]	; (10012004 <gapm_reset_req_handler+0x6c>)
10011fd8:	4798      	blx	r3
10011fda:	782b      	ldrb	r3, [r5, #0]
10011fdc:	20e2      	movs	r0, #226	; 0xe2
10011fde:	2b00      	cmp	r3, #0
10011fe0:	d106      	bne.n	10011ff0 <gapm_reset_req_handler+0x58>
10011fe2:	68a3      	ldr	r3, [r4, #8]
10011fe4:	20e2      	movs	r0, #226	; 0xe2
10011fe6:	781a      	ldrb	r2, [r3, #0]
10011fe8:	785b      	ldrb	r3, [r3, #1]
10011fea:	2a01      	cmp	r2, #1
10011fec:	d100      	bne.n	10011ff0 <gapm_reset_req_handler+0x58>
10011fee:	1c18      	adds	r0, r3, #0
10011ff0:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
10011ff2:	46c0      	nop			; (mov r8, r8)
10011ff4:	1001ab5c 	.word	0x1001ab5c
10011ff8:	1001aecc 	.word	0x1001aecc
10011ffc:	1001ab50 	.word	0x1001ab50
10012000:	100113c1 	.word	0x100113c1
10012004:	10011425 	.word	0x10011425

10012008 <gapm_set_dev_config_cmd_handler>:
10012008:	b5f0      	push	{r4, r5, r6, r7, lr}
1001200a:	b089      	sub	sp, #36	; 0x24
1001200c:	9303      	str	r3, [sp, #12]
1001200e:	ab0e      	add	r3, sp, #56	; 0x38
10012010:	781b      	ldrb	r3, [r3, #0]
10012012:	4c37      	ldr	r4, [pc, #220]	; (100120f0 <gapm_set_dev_config_cmd_handler+0xe8>)
10012014:	9304      	str	r3, [sp, #16]
10012016:	ab0f      	add	r3, sp, #60	; 0x3c
10012018:	781b      	ldrb	r3, [r3, #0]
1001201a:	270d      	movs	r7, #13
1001201c:	9305      	str	r3, [sp, #20]
1001201e:	ab10      	add	r3, sp, #64	; 0x40
10012020:	881b      	ldrh	r3, [r3, #0]
10012022:	72a1      	strb	r1, [r4, #10]
10012024:	9300      	str	r3, [sp, #0]
10012026:	ab11      	add	r3, sp, #68	; 0x44
10012028:	881b      	ldrh	r3, [r3, #0]
1001202a:	0a09      	lsrs	r1, r1, #8
1001202c:	9301      	str	r3, [sp, #4]
1001202e:	ab12      	add	r3, sp, #72	; 0x48
10012030:	881b      	ldrh	r3, [r3, #0]
10012032:	7260      	strb	r0, [r4, #9]
10012034:	9302      	str	r3, [sp, #8]
10012036:	ab06      	add	r3, sp, #24
10012038:	1dde      	adds	r6, r3, #7
1001203a:	2300      	movs	r3, #0
1001203c:	7033      	strb	r3, [r6, #0]
1001203e:	2304      	movs	r3, #4
10012040:	7023      	strb	r3, [r4, #0]
10012042:	2300      	movs	r3, #0
10012044:	70e3      	strb	r3, [r4, #3]
10012046:	4b2b      	ldr	r3, [pc, #172]	; (100120f4 <gapm_set_dev_config_cmd_handler+0xec>)
10012048:	72e1      	strb	r1, [r4, #11]
1001204a:	881d      	ldrh	r5, [r3, #0]
1001204c:	881b      	ldrh	r3, [r3, #0]
1001204e:	1c11      	adds	r1, r2, #0
10012050:	0a1b      	lsrs	r3, r3, #8
10012052:	7163      	strb	r3, [r4, #5]
10012054:	2303      	movs	r3, #3
10012056:	7125      	strb	r5, [r4, #4]
10012058:	2206      	movs	r2, #6
1001205a:	4d27      	ldr	r5, [pc, #156]	; (100120f8 <gapm_set_dev_config_cmd_handler+0xf0>)
1001205c:	4827      	ldr	r0, [pc, #156]	; (100120fc <gapm_set_dev_config_cmd_handler+0xf4>)
1001205e:	7223      	strb	r3, [r4, #8]
10012060:	7067      	strb	r7, [r4, #1]
10012062:	70a7      	strb	r7, [r4, #2]
10012064:	47a8      	blx	r5
10012066:	9903      	ldr	r1, [sp, #12]
10012068:	2210      	movs	r2, #16
1001206a:	4825      	ldr	r0, [pc, #148]	; (10012100 <gapm_set_dev_config_cmd_handler+0xf8>)
1001206c:	47a8      	blx	r5
1001206e:	466a      	mov	r2, sp
10012070:	7c12      	ldrb	r2, [r2, #16]
10012072:	1ce3      	adds	r3, r4, #3
10012074:	77da      	strb	r2, [r3, #31]
10012076:	466a      	mov	r2, sp
10012078:	7d12      	ldrb	r2, [r2, #20]
1001207a:	1d23      	adds	r3, r4, #4
1001207c:	77da      	strb	r2, [r3, #31]
1001207e:	466a      	mov	r2, sp
10012080:	7812      	ldrb	r2, [r2, #0]
10012082:	1d63      	adds	r3, r4, #5
10012084:	77da      	strb	r2, [r3, #31]
10012086:	9b00      	ldr	r3, [sp, #0]
10012088:	1da2      	adds	r2, r4, #6
1001208a:	0a1b      	lsrs	r3, r3, #8
1001208c:	77d3      	strb	r3, [r2, #31]
1001208e:	466a      	mov	r2, sp
10012090:	7912      	ldrb	r2, [r2, #4]
10012092:	1de3      	adds	r3, r4, #7
10012094:	77da      	strb	r2, [r3, #31]
10012096:	1c22      	adds	r2, r4, #0
10012098:	9b01      	ldr	r3, [sp, #4]
1001209a:	3208      	adds	r2, #8
1001209c:	0a1b      	lsrs	r3, r3, #8
1001209e:	77d3      	strb	r3, [r2, #31]
100120a0:	466a      	mov	r2, sp
100120a2:	1c23      	adds	r3, r4, #0
100120a4:	7a12      	ldrb	r2, [r2, #8]
100120a6:	3328      	adds	r3, #40	; 0x28
100120a8:	701a      	strb	r2, [r3, #0]
100120aa:	1c22      	adds	r2, r4, #0
100120ac:	9b02      	ldr	r3, [sp, #8]
100120ae:	3229      	adds	r2, #41	; 0x29
100120b0:	0a1b      	lsrs	r3, r3, #8
100120b2:	7013      	strb	r3, [r2, #0]
100120b4:	23d0      	movs	r3, #208	; 0xd0
100120b6:	4d13      	ldr	r5, [pc, #76]	; (10012104 <gapm_set_dev_config_cmd_handler+0xfc>)
100120b8:	011b      	lsls	r3, r3, #4
100120ba:	802b      	strh	r3, [r5, #0]
100120bc:	2322      	movs	r3, #34	; 0x22
100120be:	71a3      	strb	r3, [r4, #6]
100120c0:	2300      	movs	r3, #0
100120c2:	212a      	movs	r1, #42	; 0x2a
100120c4:	71e3      	strb	r3, [r4, #7]
100120c6:	1c20      	adds	r0, r4, #0
100120c8:	4b0f      	ldr	r3, [pc, #60]	; (10012108 <gapm_set_dev_config_cmd_handler+0x100>)
100120ca:	80af      	strh	r7, [r5, #4]
100120cc:	4798      	blx	r3
100120ce:	1c30      	adds	r0, r6, #0
100120d0:	4b0e      	ldr	r3, [pc, #56]	; (1001210c <gapm_set_dev_config_cmd_handler+0x104>)
100120d2:	4798      	blx	r3
100120d4:	7833      	ldrb	r3, [r6, #0]
100120d6:	20e2      	movs	r0, #226	; 0xe2
100120d8:	2b00      	cmp	r3, #0
100120da:	d106      	bne.n	100120ea <gapm_set_dev_config_cmd_handler+0xe2>
100120dc:	68ab      	ldr	r3, [r5, #8]
100120de:	20e2      	movs	r0, #226	; 0xe2
100120e0:	781a      	ldrb	r2, [r3, #0]
100120e2:	785b      	ldrb	r3, [r3, #1]
100120e4:	2a03      	cmp	r2, #3
100120e6:	d100      	bne.n	100120ea <gapm_set_dev_config_cmd_handler+0xe2>
100120e8:	1c18      	adds	r0, r3, #0
100120ea:	b009      	add	sp, #36	; 0x24
100120ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
100120ee:	46c0      	nop			; (mov r8, r8)
100120f0:	1001aecc 	.word	0x1001aecc
100120f4:	1001ab5c 	.word	0x1001ab5c
100120f8:	10014e57 	.word	0x10014e57
100120fc:	1001aed8 	.word	0x1001aed8
10012100:	1001aede 	.word	0x1001aede
10012104:	1001ab50 	.word	0x1001ab50
10012108:	100113c1 	.word	0x100113c1
1001210c:	10011425 	.word	0x10011425

10012110 <gapm_get_dev_config_cmd_handler>:
10012110:	4684      	mov	ip, r0
10012112:	4663      	mov	r3, ip
10012114:	b5f0      	push	{r4, r5, r6, r7, lr}
10012116:	b085      	sub	sp, #20
10012118:	9100      	str	r1, [sp, #0]
1001211a:	20cf      	movs	r0, #207	; 0xcf
1001211c:	2b01      	cmp	r3, #1
1001211e:	d854      	bhi.n	100121ca <gapm_get_dev_config_cmd_handler+0xba>
10012120:	2900      	cmp	r1, #0
10012122:	d052      	beq.n	100121ca <gapm_get_dev_config_cmd_handler+0xba>
10012124:	2200      	movs	r2, #0
10012126:	492a      	ldr	r1, [pc, #168]	; (100121d0 <gapm_get_dev_config_cmd_handler+0xc0>)
10012128:	ab02      	add	r3, sp, #8
1001212a:	880c      	ldrh	r4, [r1, #0]
1001212c:	8809      	ldrh	r1, [r1, #0]
1001212e:	1d9f      	adds	r7, r3, #6
10012130:	719a      	strb	r2, [r3, #6]
10012132:	4b28      	ldr	r3, [pc, #160]	; (100121d4 <gapm_get_dev_config_cmd_handler+0xc4>)
10012134:	0a09      	lsrs	r1, r1, #8
10012136:	250d      	movs	r5, #13
10012138:	2606      	movs	r6, #6
1001213a:	7159      	strb	r1, [r3, #5]
1001213c:	4661      	mov	r1, ip
1001213e:	701e      	strb	r6, [r3, #0]
10012140:	705d      	strb	r5, [r3, #1]
10012142:	709d      	strb	r5, [r3, #2]
10012144:	70da      	strb	r2, [r3, #3]
10012146:	711c      	strb	r4, [r3, #4]
10012148:	2901      	cmp	r1, #1
1001214a:	d13e      	bne.n	100121ca <gapm_get_dev_config_cmd_handler+0xba>
1001214c:	21d0      	movs	r1, #208	; 0xd0
1001214e:	4c22      	ldr	r4, [pc, #136]	; (100121d8 <gapm_get_dev_config_cmd_handler+0xc8>)
10012150:	0109      	lsls	r1, r1, #4
10012152:	8061      	strh	r1, [r4, #2]
10012154:	4921      	ldr	r1, [pc, #132]	; (100121dc <gapm_get_dev_config_cmd_handler+0xcc>)
10012156:	71da      	strb	r2, [r3, #7]
10012158:	8021      	strh	r1, [r4, #0]
1001215a:	4661      	mov	r1, ip
1001215c:	721e      	strb	r6, [r3, #8]
1001215e:	7199      	strb	r1, [r3, #6]
10012160:	1c18      	adds	r0, r3, #0
10012162:	2109      	movs	r1, #9
10012164:	4b1e      	ldr	r3, [pc, #120]	; (100121e0 <gapm_get_dev_config_cmd_handler+0xd0>)
10012166:	80a5      	strh	r5, [r4, #4]
10012168:	4798      	blx	r3
1001216a:	1c38      	adds	r0, r7, #0
1001216c:	4b1d      	ldr	r3, [pc, #116]	; (100121e4 <gapm_get_dev_config_cmd_handler+0xd4>)
1001216e:	4798      	blx	r3
10012170:	783b      	ldrb	r3, [r7, #0]
10012172:	20e2      	movs	r0, #226	; 0xe2
10012174:	9301      	str	r3, [sp, #4]
10012176:	2b00      	cmp	r3, #0
10012178:	d127      	bne.n	100121ca <gapm_get_dev_config_cmd_handler+0xba>
1001217a:	8821      	ldrh	r1, [r4, #0]
1001217c:	4a1a      	ldr	r2, [pc, #104]	; (100121e8 <gapm_get_dev_config_cmd_handler+0xd8>)
1001217e:	68a7      	ldr	r7, [r4, #8]
10012180:	3b01      	subs	r3, #1
10012182:	4291      	cmp	r1, r2
10012184:	d001      	beq.n	1001218a <gapm_get_dev_config_cmd_handler+0x7a>
10012186:	8023      	strh	r3, [r4, #0]
10012188:	e01a      	b.n	100121c0 <gapm_get_dev_config_cmd_handler+0xb0>
1001218a:	8063      	strh	r3, [r4, #2]
1001218c:	9b00      	ldr	r3, [sp, #0]
1001218e:	1c39      	adds	r1, r7, #0
10012190:	1c58      	adds	r0, r3, #1
10012192:	1c32      	adds	r2, r6, #0
10012194:	4b15      	ldr	r3, [pc, #84]	; (100121ec <gapm_get_dev_config_cmd_handler+0xdc>)
10012196:	4798      	blx	r3
10012198:	79bb      	ldrb	r3, [r7, #6]
1001219a:	9a00      	ldr	r2, [sp, #0]
1001219c:	7013      	strb	r3, [r2, #0]
1001219e:	23d0      	movs	r3, #208	; 0xd0
100121a0:	011b      	lsls	r3, r3, #4
100121a2:	8023      	strh	r3, [r4, #0]
100121a4:	ab02      	add	r3, sp, #8
100121a6:	80a5      	strh	r5, [r4, #4]
100121a8:	1ddd      	adds	r5, r3, #7
100121aa:	466b      	mov	r3, sp
100121ac:	791b      	ldrb	r3, [r3, #4]
100121ae:	1c28      	adds	r0, r5, #0
100121b0:	702b      	strb	r3, [r5, #0]
100121b2:	4b0c      	ldr	r3, [pc, #48]	; (100121e4 <gapm_get_dev_config_cmd_handler+0xd4>)
100121b4:	4798      	blx	r3
100121b6:	782b      	ldrb	r3, [r5, #0]
100121b8:	20d0      	movs	r0, #208	; 0xd0
100121ba:	2b00      	cmp	r3, #0
100121bc:	d105      	bne.n	100121ca <gapm_get_dev_config_cmd_handler+0xba>
100121be:	68a7      	ldr	r7, [r4, #8]
100121c0:	783b      	ldrb	r3, [r7, #0]
100121c2:	7878      	ldrb	r0, [r7, #1]
100121c4:	2b06      	cmp	r3, #6
100121c6:	d000      	beq.n	100121ca <gapm_get_dev_config_cmd_handler+0xba>
100121c8:	20e2      	movs	r0, #226	; 0xe2
100121ca:	b005      	add	sp, #20
100121cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
100121ce:	46c0      	nop			; (mov r8, r8)
100121d0:	1001ab5c 	.word	0x1001ab5c
100121d4:	1001aecc 	.word	0x1001aecc
100121d8:	1001ab50 	.word	0x1001ab50
100121dc:	00000d08 	.word	0x00000d08
100121e0:	100113c1 	.word	0x100113c1
100121e4:	10011425 	.word	0x10011425
100121e8:	0000ffff 	.word	0x0000ffff
100121ec:	10014e57 	.word	0x10014e57

100121f0 <gapm_cancel_cmd_handler>:
100121f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
100121f2:	4916      	ldr	r1, [pc, #88]	; (1001224c <gapm_cancel_cmd_handler+0x5c>)
100121f4:	4816      	ldr	r0, [pc, #88]	; (10012250 <gapm_cancel_cmd_handler+0x60>)
100121f6:	880c      	ldrh	r4, [r1, #0]
100121f8:	8809      	ldrh	r1, [r1, #0]
100121fa:	466b      	mov	r3, sp
100121fc:	0a09      	lsrs	r1, r1, #8
100121fe:	7141      	strb	r1, [r0, #5]
10012200:	2102      	movs	r1, #2
10012202:	2203      	movs	r2, #3
10012204:	7201      	strb	r1, [r0, #8]
10012206:	21d0      	movs	r1, #208	; 0xd0
10012208:	1ddd      	adds	r5, r3, #7
1001220a:	2300      	movs	r3, #0
1001220c:	7104      	strb	r4, [r0, #4]
1001220e:	4c11      	ldr	r4, [pc, #68]	; (10012254 <gapm_cancel_cmd_handler+0x64>)
10012210:	7002      	strb	r2, [r0, #0]
10012212:	0109      	lsls	r1, r1, #4
10012214:	320a      	adds	r2, #10
10012216:	702b      	strb	r3, [r5, #0]
10012218:	7042      	strb	r2, [r0, #1]
1001221a:	7082      	strb	r2, [r0, #2]
1001221c:	70c3      	strb	r3, [r0, #3]
1001221e:	8021      	strh	r1, [r4, #0]
10012220:	80a2      	strh	r2, [r4, #4]
10012222:	71c3      	strb	r3, [r0, #7]
10012224:	3a0c      	subs	r2, #12
10012226:	2109      	movs	r1, #9
10012228:	4b0b      	ldr	r3, [pc, #44]	; (10012258 <gapm_cancel_cmd_handler+0x68>)
1001222a:	7182      	strb	r2, [r0, #6]
1001222c:	4798      	blx	r3
1001222e:	1c28      	adds	r0, r5, #0
10012230:	4b0a      	ldr	r3, [pc, #40]	; (1001225c <gapm_cancel_cmd_handler+0x6c>)
10012232:	4798      	blx	r3
10012234:	7828      	ldrb	r0, [r5, #0]
10012236:	2800      	cmp	r0, #0
10012238:	d001      	beq.n	1001223e <gapm_cancel_cmd_handler+0x4e>
1001223a:	20e2      	movs	r0, #226	; 0xe2
1001223c:	e004      	b.n	10012248 <gapm_cancel_cmd_handler+0x58>
1001223e:	68a3      	ldr	r3, [r4, #8]
10012240:	785b      	ldrb	r3, [r3, #1]
10012242:	2b44      	cmp	r3, #68	; 0x44
10012244:	d000      	beq.n	10012248 <gapm_cancel_cmd_handler+0x58>
10012246:	1c18      	adds	r0, r3, #0
10012248:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
1001224a:	46c0      	nop			; (mov r8, r8)
1001224c:	1001ab5c 	.word	0x1001ab5c
10012250:	1001aecc 	.word	0x1001aecc
10012254:	1001ab50 	.word	0x1001ab50
10012258:	100113c1 	.word	0x100113c1
1001225c:	10011425 	.word	0x10011425

10012260 <gapm_dev_bdaddr_ind_handler>:
10012260:	b538      	push	{r3, r4, r5, lr}
10012262:	1c05      	adds	r5, r0, #0
10012264:	1c0c      	adds	r4, r1, #0
10012266:	1c48      	adds	r0, r1, #1
10012268:	2206      	movs	r2, #6
1001226a:	1c29      	adds	r1, r5, #0
1001226c:	4b02      	ldr	r3, [pc, #8]	; (10012278 <gapm_dev_bdaddr_ind_handler+0x18>)
1001226e:	4798      	blx	r3
10012270:	79ab      	ldrb	r3, [r5, #6]
10012272:	2000      	movs	r0, #0
10012274:	7023      	strb	r3, [r4, #0]
10012276:	bd38      	pop	{r3, r4, r5, pc}
10012278:	10014e57 	.word	0x10014e57

1001227c <gapm_cmp_evt>:
1001227c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1001227e:	7803      	ldrb	r3, [r0, #0]
10012280:	7845      	ldrb	r5, [r0, #1]
10012282:	3b0c      	subs	r3, #12
10012284:	1e18      	subs	r0, r3, #0
10012286:	280b      	cmp	r0, #11
10012288:	d900      	bls.n	1001228c <gapm_cmp_evt+0x10>
1001228a:	e08d      	b.n	100123a8 <gapm_cmp_evt+0x12c>
1001228c:	1c0c      	adds	r4, r1, #0
1001228e:	f000 fd5f 	bl	10012d50 <__gnu_thumb1_case_uqi>
10012292:	1952      	.short	0x1952
10012294:	068b1919 	.word	0x068b1919
10012298:	8b595906 	.word	0x8b595906
1001229c:	0d8b      	.short	0x0d8b
1001229e:	2300      	movs	r3, #0
100122a0:	2d45      	cmp	r5, #69	; 0x45
100122a2:	d000      	beq.n	100122a6 <gapm_cmp_evt+0x2a>
100122a4:	1c2b      	adds	r3, r5, #0
100122a6:	7023      	strb	r3, [r4, #0]
100122a8:	2002      	movs	r0, #2
100122aa:	e07e      	b.n	100123aa <gapm_cmp_evt+0x12e>
100122ac:	203b      	movs	r0, #59	; 0x3b
100122ae:	2d00      	cmp	r5, #0
100122b0:	d100      	bne.n	100122b4 <gapm_cmp_evt+0x38>
100122b2:	e07a      	b.n	100123aa <gapm_cmp_evt+0x12e>
100122b4:	700d      	strb	r5, [r1, #0]
100122b6:	1c48      	adds	r0, r1, #1
100122b8:	2210      	movs	r2, #16
100122ba:	2100      	movs	r1, #0
100122bc:	4b3b      	ldr	r3, [pc, #236]	; (100123ac <gapm_cmp_evt+0x130>)
100122be:	4798      	blx	r3
100122c0:	200f      	movs	r0, #15
100122c2:	e072      	b.n	100123aa <gapm_cmp_evt+0x12e>
100122c4:	2d00      	cmp	r5, #0
100122c6:	d134      	bne.n	10012332 <gapm_cmp_evt+0xb6>
100122c8:	4b39      	ldr	r3, [pc, #228]	; (100123b0 <gapm_cmp_evt+0x134>)
100122ca:	4798      	blx	r3
100122cc:	1e43      	subs	r3, r0, #1
100122ce:	b2db      	uxtb	r3, r3
100122d0:	1c28      	adds	r0, r5, #0
100122d2:	2b06      	cmp	r3, #6
100122d4:	d869      	bhi.n	100123aa <gapm_cmp_evt+0x12e>
100122d6:	466b      	mov	r3, sp
100122d8:	4e36      	ldr	r6, [pc, #216]	; (100123b4 <gapm_cmp_evt+0x138>)
100122da:	1dd9      	adds	r1, r3, #7
100122dc:	8db0      	ldrh	r0, [r6, #44]	; 0x2c
100122de:	4b36      	ldr	r3, [pc, #216]	; (100123b8 <gapm_cmp_evt+0x13c>)
100122e0:	4798      	blx	r3
100122e2:	2312      	movs	r3, #18
100122e4:	4358      	muls	r0, r3
100122e6:	4935      	ldr	r1, [pc, #212]	; (100123bc <gapm_cmp_evt+0x140>)
100122e8:	1809      	adds	r1, r1, r0
100122ea:	1c0b      	adds	r3, r1, #0
100122ec:	894a      	ldrh	r2, [r1, #10]
100122ee:	3308      	adds	r3, #8
100122f0:	8122      	strh	r2, [r4, #8]
100122f2:	784f      	ldrb	r7, [r1, #1]
100122f4:	72a5      	strb	r5, [r4, #10]
100122f6:	7027      	strb	r7, [r4, #0]
100122f8:	898a      	ldrh	r2, [r1, #12]
100122fa:	1c60      	adds	r0, r4, #1
100122fc:	81a2      	strh	r2, [r4, #12]
100122fe:	88db      	ldrh	r3, [r3, #6]
10012300:	3102      	adds	r1, #2
10012302:	81e3      	strh	r3, [r4, #14]
10012304:	89cb      	ldrh	r3, [r1, #14]
10012306:	2206      	movs	r2, #6
10012308:	8223      	strh	r3, [r4, #16]
1001230a:	4b2d      	ldr	r3, [pc, #180]	; (100123c0 <gapm_cmp_evt+0x144>)
1001230c:	4798      	blx	r3
1001230e:	2f00      	cmp	r7, #0
10012310:	d00a      	beq.n	10012328 <gapm_cmp_evt+0xac>
10012312:	79a3      	ldrb	r3, [r4, #6]
10012314:	223f      	movs	r2, #63	; 0x3f
10012316:	1c19      	adds	r1, r3, #0
10012318:	3501      	adds	r5, #1
1001231a:	4391      	bics	r1, r2
1001231c:	29c0      	cmp	r1, #192	; 0xc0
1001231e:	d003      	beq.n	10012328 <gapm_cmp_evt+0xac>
10012320:	065b      	lsls	r3, r3, #25
10012322:	0fdb      	lsrs	r3, r3, #31
10012324:	3502      	adds	r5, #2
10012326:	1aed      	subs	r5, r5, r3
10012328:	2301      	movs	r3, #1
1001232a:	425b      	negs	r3, r3
1001232c:	7025      	strb	r5, [r4, #0]
1001232e:	85b3      	strh	r3, [r6, #44]	; 0x2c
10012330:	e038      	b.n	100123a4 <gapm_cmp_evt+0x128>
10012332:	700d      	strb	r5, [r1, #0]
10012334:	e004      	b.n	10012340 <gapm_cmp_evt+0xc4>
10012336:	2300      	movs	r3, #0
10012338:	2d45      	cmp	r5, #69	; 0x45
1001233a:	d000      	beq.n	1001233e <gapm_cmp_evt+0xc2>
1001233c:	1c2b      	adds	r3, r5, #0
1001233e:	7023      	strb	r3, [r4, #0]
10012340:	2003      	movs	r0, #3
10012342:	e032      	b.n	100123aa <gapm_cmp_evt+0x12e>
10012344:	4e1b      	ldr	r6, [pc, #108]	; (100123b4 <gapm_cmp_evt+0x138>)
10012346:	2100      	movs	r1, #0
10012348:	8db0      	ldrh	r0, [r6, #44]	; 0x2c
1001234a:	4b1b      	ldr	r3, [pc, #108]	; (100123b8 <gapm_cmp_evt+0x13c>)
1001234c:	4798      	blx	r3
1001234e:	2807      	cmp	r0, #7
10012350:	d818      	bhi.n	10012384 <gapm_cmp_evt+0x108>
10012352:	2301      	movs	r3, #1
10012354:	425b      	negs	r3, r3
10012356:	85b3      	strh	r3, [r6, #44]	; 0x2c
10012358:	3313      	adds	r3, #19
1001235a:	4358      	muls	r0, r3
1001235c:	4917      	ldr	r1, [pc, #92]	; (100123bc <gapm_cmp_evt+0x140>)
1001235e:	1809      	adds	r1, r1, r0
10012360:	1c0b      	adds	r3, r1, #0
10012362:	894a      	ldrh	r2, [r1, #10]
10012364:	3308      	adds	r3, #8
10012366:	8122      	strh	r2, [r4, #8]
10012368:	784a      	ldrb	r2, [r1, #1]
1001236a:	72a5      	strb	r5, [r4, #10]
1001236c:	7022      	strb	r2, [r4, #0]
1001236e:	898a      	ldrh	r2, [r1, #12]
10012370:	1c60      	adds	r0, r4, #1
10012372:	81a2      	strh	r2, [r4, #12]
10012374:	88db      	ldrh	r3, [r3, #6]
10012376:	3102      	adds	r1, #2
10012378:	81e3      	strh	r3, [r4, #14]
1001237a:	89cb      	ldrh	r3, [r1, #14]
1001237c:	2206      	movs	r2, #6
1001237e:	8223      	strh	r3, [r4, #16]
10012380:	4b0f      	ldr	r3, [pc, #60]	; (100123c0 <gapm_cmp_evt+0x144>)
10012382:	4798      	blx	r3
10012384:	2200      	movs	r2, #0
10012386:	7823      	ldrb	r3, [r4, #0]
10012388:	4293      	cmp	r3, r2
1001238a:	d00a      	beq.n	100123a2 <gapm_cmp_evt+0x126>
1001238c:	79a3      	ldrb	r3, [r4, #6]
1001238e:	323f      	adds	r2, #63	; 0x3f
10012390:	1c19      	adds	r1, r3, #0
10012392:	4391      	bics	r1, r2
10012394:	3a3e      	subs	r2, #62	; 0x3e
10012396:	29c0      	cmp	r1, #192	; 0xc0
10012398:	d003      	beq.n	100123a2 <gapm_cmp_evt+0x126>
1001239a:	065b      	lsls	r3, r3, #25
1001239c:	0fdb      	lsrs	r3, r3, #31
1001239e:	3202      	adds	r2, #2
100123a0:	1ad2      	subs	r2, r2, r3
100123a2:	7022      	strb	r2, [r4, #0]
100123a4:	2005      	movs	r0, #5
100123a6:	e000      	b.n	100123aa <gapm_cmp_evt+0x12e>
100123a8:	2000      	movs	r0, #0
100123aa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
100123ac:	10014e69 	.word	0x10014e69
100123b0:	100115cd 	.word	0x100115cd
100123b4:	1001abee 	.word	0x1001abee
100123b8:	10011591 	.word	0x10011591
100123bc:	1001ab5e 	.word	0x1001ab5e
100123c0:	10014e57 	.word	0x10014e57

100123c4 <gapm_start_adv_cmd_handler>:
100123c4:	b5f0      	push	{r4, r5, r6, r7, lr}
100123c6:	b089      	sub	sp, #36	; 0x24
100123c8:	9303      	str	r3, [sp, #12]
100123ca:	ab0e      	add	r3, sp, #56	; 0x38
100123cc:	9102      	str	r1, [sp, #8]
100123ce:	cb02      	ldmia	r3!, {r1}
100123d0:	aa08      	add	r2, sp, #32
100123d2:	881b      	ldrh	r3, [r3, #0]
100123d4:	4e3c      	ldr	r6, [pc, #240]	; (100124c8 <gapm_start_adv_cmd_handler+0x104>)
100123d6:	9300      	str	r3, [sp, #0]
100123d8:	ab10      	add	r3, sp, #64	; 0x40
100123da:	881b      	ldrh	r3, [r3, #0]
100123dc:	240d      	movs	r4, #13
100123de:	469c      	mov	ip, r3
100123e0:	ab11      	add	r3, sp, #68	; 0x44
100123e2:	781b      	ldrb	r3, [r3, #0]
100123e4:	9304      	str	r3, [sp, #16]
100123e6:	ab12      	add	r3, sp, #72	; 0x48
100123e8:	781b      	ldrb	r3, [r3, #0]
100123ea:	9305      	str	r3, [sp, #20]
100123ec:	ab13      	add	r3, sp, #76	; 0x4c
100123ee:	781b      	ldrb	r3, [r3, #0]
100123f0:	9306      	str	r3, [sp, #24]
100123f2:	ab14      	add	r3, sp, #80	; 0x50
100123f4:	781b      	ldrb	r3, [r3, #0]
100123f6:	9301      	str	r3, [sp, #4]
100123f8:	2319      	movs	r3, #25
100123fa:	189b      	adds	r3, r3, r2
100123fc:	7fdd      	ldrb	r5, [r3, #31]
100123fe:	ab18      	add	r3, sp, #96	; 0x60
10012400:	881f      	ldrh	r7, [r3, #0]
10012402:	ab19      	add	r3, sp, #100	; 0x64
10012404:	781b      	ldrb	r3, [r3, #0]
10012406:	8832      	ldrh	r2, [r6, #0]
10012408:	9307      	str	r3, [sp, #28]
1001240a:	4b30      	ldr	r3, [pc, #192]	; (100124cc <gapm_start_adv_cmd_handler+0x108>)
1001240c:	8836      	ldrh	r6, [r6, #0]
1001240e:	711a      	strb	r2, [r3, #4]
10012410:	466a      	mov	r2, sp
10012412:	7a12      	ldrb	r2, [r2, #8]
10012414:	701c      	strb	r4, [r3, #0]
10012416:	705c      	strb	r4, [r3, #1]
10012418:	709c      	strb	r4, [r3, #2]
1001241a:	725a      	strb	r2, [r3, #9]
1001241c:	2400      	movs	r4, #0
1001241e:	466a      	mov	r2, sp
10012420:	0a36      	lsrs	r6, r6, #8
10012422:	70dc      	strb	r4, [r3, #3]
10012424:	7218      	strb	r0, [r3, #8]
10012426:	729c      	strb	r4, [r3, #10]
10012428:	715e      	strb	r6, [r3, #5]
1001242a:	72dc      	strb	r4, [r3, #11]
1001242c:	7812      	ldrb	r2, [r2, #0]
1001242e:	380e      	subs	r0, #14
10012430:	731a      	strb	r2, [r3, #12]
10012432:	9a00      	ldr	r2, [sp, #0]
10012434:	0a14      	lsrs	r4, r2, #8
10012436:	4662      	mov	r2, ip
10012438:	739a      	strb	r2, [r3, #14]
1001243a:	4662      	mov	r2, ip
1001243c:	735c      	strb	r4, [r3, #13]
1001243e:	0a14      	lsrs	r4, r2, #8
10012440:	466a      	mov	r2, sp
10012442:	7c12      	ldrb	r2, [r2, #16]
10012444:	73dc      	strb	r4, [r3, #15]
10012446:	741a      	strb	r2, [r3, #16]
10012448:	1c1c      	adds	r4, r3, #0
1001244a:	2801      	cmp	r0, #1
1001244c:	d809      	bhi.n	10012462 <gapm_start_adv_cmd_handler+0x9e>
1001244e:	2900      	cmp	r1, #0
10012450:	d003      	beq.n	1001245a <gapm_start_adv_cmd_handler+0x96>
10012452:	481f      	ldr	r0, [pc, #124]	; (100124d0 <gapm_start_adv_cmd_handler+0x10c>)
10012454:	2206      	movs	r2, #6
10012456:	4b1f      	ldr	r3, [pc, #124]	; (100124d4 <gapm_start_adv_cmd_handler+0x110>)
10012458:	4798      	blx	r3
1001245a:	466b      	mov	r3, sp
1001245c:	7b1b      	ldrb	r3, [r3, #12]
1001245e:	75e3      	strb	r3, [r4, #23]
10012460:	e014      	b.n	1001248c <gapm_start_adv_cmd_handler+0xc8>
10012462:	466b      	mov	r3, sp
10012464:	7d1b      	ldrb	r3, [r3, #20]
10012466:	9915      	ldr	r1, [sp, #84]	; 0x54
10012468:	7463      	strb	r3, [r4, #17]
1001246a:	466b      	mov	r3, sp
1001246c:	7e1b      	ldrb	r3, [r3, #24]
1001246e:	9a01      	ldr	r2, [sp, #4]
10012470:	74a3      	strb	r3, [r4, #18]
10012472:	466b      	mov	r3, sp
10012474:	791b      	ldrb	r3, [r3, #4]
10012476:	4818      	ldr	r0, [pc, #96]	; (100124d8 <gapm_start_adv_cmd_handler+0x114>)
10012478:	4e16      	ldr	r6, [pc, #88]	; (100124d4 <gapm_start_adv_cmd_handler+0x110>)
1001247a:	74e3      	strb	r3, [r4, #19]
1001247c:	47b0      	blx	r6
1001247e:	1c23      	adds	r3, r4, #0
10012480:	4816      	ldr	r0, [pc, #88]	; (100124dc <gapm_start_adv_cmd_handler+0x118>)
10012482:	3330      	adds	r3, #48	; 0x30
10012484:	9917      	ldr	r1, [sp, #92]	; 0x5c
10012486:	1c2a      	adds	r2, r5, #0
10012488:	701d      	strb	r5, [r3, #0]
1001248a:	47b0      	blx	r6
1001248c:	1c22      	adds	r2, r4, #0
1001248e:	23a5      	movs	r3, #165	; 0xa5
10012490:	3250      	adds	r2, #80	; 0x50
10012492:	7013      	strb	r3, [r2, #0]
10012494:	1c22      	adds	r2, r4, #0
10012496:	3251      	adds	r2, #81	; 0x51
10012498:	7013      	strb	r3, [r2, #0]
1001249a:	1c23      	adds	r3, r4, #0
1001249c:	1c22      	adds	r2, r4, #0
1001249e:	3352      	adds	r3, #82	; 0x52
100124a0:	701f      	strb	r7, [r3, #0]
100124a2:	3253      	adds	r2, #83	; 0x53
100124a4:	0a3b      	lsrs	r3, r7, #8
100124a6:	7013      	strb	r3, [r2, #0]
100124a8:	466a      	mov	r2, sp
100124aa:	1c23      	adds	r3, r4, #0
100124ac:	7f12      	ldrb	r2, [r2, #28]
100124ae:	3354      	adds	r3, #84	; 0x54
100124b0:	701a      	strb	r2, [r3, #0]
100124b2:	234d      	movs	r3, #77	; 0x4d
100124b4:	2500      	movs	r5, #0
100124b6:	71a3      	strb	r3, [r4, #6]
100124b8:	1c20      	adds	r0, r4, #0
100124ba:	2155      	movs	r1, #85	; 0x55
100124bc:	4b08      	ldr	r3, [pc, #32]	; (100124e0 <gapm_start_adv_cmd_handler+0x11c>)
100124be:	71e5      	strb	r5, [r4, #7]
100124c0:	4798      	blx	r3
100124c2:	1c28      	adds	r0, r5, #0
100124c4:	b009      	add	sp, #36	; 0x24
100124c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
100124c8:	1001ab5c 	.word	0x1001ab5c
100124cc:	1001aecc 	.word	0x1001aecc
100124d0:	1001aedd 	.word	0x1001aedd
100124d4:	10014e57 	.word	0x10014e57
100124d8:	1001aee0 	.word	0x1001aee0
100124dc:	1001aefd 	.word	0x1001aefd
100124e0:	100113c1 	.word	0x100113c1

100124e4 <get_gap_local_addr_type>:
100124e4:	4b04      	ldr	r3, [pc, #16]	; (100124f8 <get_gap_local_addr_type+0x14>)
100124e6:	2001      	movs	r0, #1
100124e8:	791b      	ldrb	r3, [r3, #4]
100124ea:	2b02      	cmp	r3, #2
100124ec:	d003      	beq.n	100124f6 <get_gap_local_addr_type+0x12>
100124ee:	3b03      	subs	r3, #3
100124f0:	4258      	negs	r0, r3
100124f2:	4158      	adcs	r0, r3
100124f4:	0040      	lsls	r0, r0, #1
100124f6:	4770      	bx	lr
100124f8:	1001abee 	.word	0x1001abee

100124fc <gapm_adv_report_evt_handler>:
100124fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
100124fe:	7843      	ldrb	r3, [r0, #1]
10012500:	1c05      	adds	r5, r0, #0
10012502:	9301      	str	r3, [sp, #4]
10012504:	466b      	mov	r3, sp
10012506:	1c0c      	adds	r4, r1, #0
10012508:	791b      	ldrb	r3, [r3, #4]
1001250a:	7806      	ldrb	r6, [r0, #0]
1001250c:	2206      	movs	r2, #6
1001250e:	704b      	strb	r3, [r1, #1]
10012510:	1c88      	adds	r0, r1, #2
10012512:	4f1b      	ldr	r7, [pc, #108]	; (10012580 <gapm_adv_report_evt_handler+0x84>)
10012514:	1ca9      	adds	r1, r5, #2
10012516:	47b8      	blx	r7
10012518:	1c20      	adds	r0, r4, #0
1001251a:	1c29      	adds	r1, r5, #0
1001251c:	7a2a      	ldrb	r2, [r5, #8]
1001251e:	3008      	adds	r0, #8
10012520:	77c2      	strb	r2, [r0, #31]
10012522:	3109      	adds	r1, #9
10012524:	3528      	adds	r5, #40	; 0x28
10012526:	47b8      	blx	r7
10012528:	782b      	ldrb	r3, [r5, #0]
1001252a:	b25a      	sxtb	r2, r3
1001252c:	2a00      	cmp	r2, #0
1001252e:	da01      	bge.n	10012534 <gapm_adv_report_evt_handler+0x38>
10012530:	3301      	adds	r3, #1
10012532:	b2db      	uxtb	r3, r3
10012534:	1c22      	adds	r2, r4, #0
10012536:	3228      	adds	r2, #40	; 0x28
10012538:	7013      	strb	r3, [r2, #0]
1001253a:	2200      	movs	r2, #0
1001253c:	9b01      	ldr	r3, [sp, #4]
1001253e:	4293      	cmp	r3, r2
10012540:	d00a      	beq.n	10012558 <gapm_adv_report_evt_handler+0x5c>
10012542:	79e3      	ldrb	r3, [r4, #7]
10012544:	323f      	adds	r2, #63	; 0x3f
10012546:	1c19      	adds	r1, r3, #0
10012548:	4391      	bics	r1, r2
1001254a:	3a3e      	subs	r2, #62	; 0x3e
1001254c:	29c0      	cmp	r1, #192	; 0xc0
1001254e:	d003      	beq.n	10012558 <gapm_adv_report_evt_handler+0x5c>
10012550:	065b      	lsls	r3, r3, #25
10012552:	0fdb      	lsrs	r3, r3, #31
10012554:	3202      	adds	r2, #2
10012556:	1ad2      	subs	r2, r2, r3
10012558:	7062      	strb	r2, [r4, #1]
1001255a:	2e04      	cmp	r6, #4
1001255c:	d80f      	bhi.n	1001257e <gapm_adv_report_evt_handler+0x82>
1001255e:	1c30      	adds	r0, r6, #0
10012560:	f000 fbf6 	bl	10012d50 <__gnu_thumb1_case_uqi>
10012564:	09070503 	.word	0x09070503
10012568:	0b          	.byte	0x0b
10012569:	00          	.byte	0x00
1001256a:	2300      	movs	r3, #0
1001256c:	e006      	b.n	1001257c <gapm_adv_report_evt_handler+0x80>
1001256e:	2301      	movs	r3, #1
10012570:	e004      	b.n	1001257c <gapm_adv_report_evt_handler+0x80>
10012572:	2302      	movs	r3, #2
10012574:	e002      	b.n	1001257c <gapm_adv_report_evt_handler+0x80>
10012576:	2303      	movs	r3, #3
10012578:	e000      	b.n	1001257c <gapm_adv_report_evt_handler+0x80>
1001257a:	2305      	movs	r3, #5
1001257c:	7023      	strb	r3, [r4, #0]
1001257e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
10012580:	10014e57 	.word	0x10014e57

10012584 <gapm_resolv_addr_cmd_handler>:
10012584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10012586:	2314      	movs	r3, #20
10012588:	4c12      	ldr	r4, [pc, #72]	; (100125d4 <gapm_resolv_addr_cmd_handler+0x50>)
1001258a:	1c17      	adds	r7, r2, #0
1001258c:	7023      	strb	r3, [r4, #0]
1001258e:	3b07      	subs	r3, #7
10012590:	7063      	strb	r3, [r4, #1]
10012592:	70a3      	strb	r3, [r4, #2]
10012594:	2300      	movs	r3, #0
10012596:	70e3      	strb	r3, [r4, #3]
10012598:	4b0f      	ldr	r3, [pc, #60]	; (100125d8 <gapm_resolv_addr_cmd_handler+0x54>)
1001259a:	1c05      	adds	r5, r0, #0
1001259c:	881a      	ldrh	r2, [r3, #0]
1001259e:	881b      	ldrh	r3, [r3, #0]
100125a0:	4e0e      	ldr	r6, [pc, #56]	; (100125dc <gapm_resolv_addr_cmd_handler+0x58>)
100125a2:	0a1b      	lsrs	r3, r3, #8
100125a4:	7163      	strb	r3, [r4, #5]
100125a6:	2317      	movs	r3, #23
100125a8:	012d      	lsls	r5, r5, #4
100125aa:	7122      	strb	r2, [r4, #4]
100125ac:	7260      	strb	r0, [r4, #9]
100125ae:	2206      	movs	r2, #6
100125b0:	480b      	ldr	r0, [pc, #44]	; (100125e0 <gapm_resolv_addr_cmd_handler+0x5c>)
100125b2:	7223      	strb	r3, [r4, #8]
100125b4:	47b0      	blx	r6
100125b6:	1c39      	adds	r1, r7, #0
100125b8:	1c2a      	adds	r2, r5, #0
100125ba:	480a      	ldr	r0, [pc, #40]	; (100125e4 <gapm_resolv_addr_cmd_handler+0x60>)
100125bc:	47b0      	blx	r6
100125be:	1c29      	adds	r1, r5, #0
100125c0:	3110      	adds	r1, #16
100125c2:	1c0b      	adds	r3, r1, #0
100125c4:	3b08      	subs	r3, #8
100125c6:	71a3      	strb	r3, [r4, #6]
100125c8:	121b      	asrs	r3, r3, #8
100125ca:	71e3      	strb	r3, [r4, #7]
100125cc:	1c20      	adds	r0, r4, #0
100125ce:	4b06      	ldr	r3, [pc, #24]	; (100125e8 <gapm_resolv_addr_cmd_handler+0x64>)
100125d0:	4798      	blx	r3
100125d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100125d4:	1001aecc 	.word	0x1001aecc
100125d8:	1001ab5c 	.word	0x1001ab5c
100125dc:	10014e57 	.word	0x10014e57
100125e0:	1001aed6 	.word	0x1001aed6
100125e4:	1001aedc 	.word	0x1001aedc
100125e8:	100113c1 	.word	0x100113c1

100125ec <gapm_addr_solved_ind_handler>:
100125ec:	b570      	push	{r4, r5, r6, lr}
100125ee:	1c04      	adds	r4, r0, #0
100125f0:	1c08      	adds	r0, r1, #0
100125f2:	1c0d      	adds	r5, r1, #0
100125f4:	4e05      	ldr	r6, [pc, #20]	; (1001260c <gapm_addr_solved_ind_handler+0x20>)
100125f6:	1c21      	adds	r1, r4, #0
100125f8:	2206      	movs	r2, #6
100125fa:	3011      	adds	r0, #17
100125fc:	47b0      	blx	r6
100125fe:	1c68      	adds	r0, r5, #1
10012600:	1da1      	adds	r1, r4, #6
10012602:	2210      	movs	r2, #16
10012604:	47b0      	blx	r6
10012606:	2300      	movs	r3, #0
10012608:	702b      	strb	r3, [r5, #0]
1001260a:	bd70      	pop	{r4, r5, r6, pc}
1001260c:	10014e57 	.word	0x10014e57

10012610 <gapm_profile_added_ind_handler>:
10012610:	b510      	push	{r4, lr}
10012612:	7843      	ldrb	r3, [r0, #1]
10012614:	7902      	ldrb	r2, [r0, #4]
10012616:	7944      	ldrb	r4, [r0, #5]
10012618:	7800      	ldrb	r0, [r0, #0]
1001261a:	021b      	lsls	r3, r3, #8
1001261c:	4303      	orrs	r3, r0
1001261e:	2b1b      	cmp	r3, #27
10012620:	d104      	bne.n	1001262c <gapm_profile_added_ind_handler+0x1c>
10012622:	2300      	movs	r3, #0
10012624:	700b      	strb	r3, [r1, #0]
10012626:	0223      	lsls	r3, r4, #8
10012628:	4313      	orrs	r3, r2
1001262a:	804b      	strh	r3, [r1, #2]
1001262c:	203b      	movs	r0, #59	; 0x3b
1001262e:	bd10      	pop	{r4, pc}

10012630 <gattc_read_req_ind_parser>:
10012630:	7843      	ldrb	r3, [r0, #1]
10012632:	7802      	ldrb	r2, [r0, #0]
10012634:	021b      	lsls	r3, r3, #8
10012636:	4313      	orrs	r3, r2
10012638:	804b      	strh	r3, [r1, #2]
1001263a:	4770      	bx	lr

1001263c <gattc_write_req_ind_parser>:
1001263c:	b508      	push	{r3, lr}
1001263e:	1c13      	adds	r3, r2, #0
10012640:	0a00      	lsrs	r0, r0, #8
10012642:	8010      	strh	r0, [r2, #0]
10012644:	784a      	ldrb	r2, [r1, #1]
10012646:	7808      	ldrb	r0, [r1, #0]
10012648:	0212      	lsls	r2, r2, #8
1001264a:	4302      	orrs	r2, r0
1001264c:	805a      	strh	r2, [r3, #2]
1001264e:	78ca      	ldrb	r2, [r1, #3]
10012650:	7888      	ldrb	r0, [r1, #2]
10012652:	0212      	lsls	r2, r2, #8
10012654:	4302      	orrs	r2, r0
10012656:	809a      	strh	r2, [r3, #4]
10012658:	794a      	ldrb	r2, [r1, #5]
1001265a:	7908      	ldrb	r0, [r1, #4]
1001265c:	0212      	lsls	r2, r2, #8
1001265e:	4302      	orrs	r2, r0
10012660:	80da      	strh	r2, [r3, #6]
10012662:	3308      	adds	r3, #8
10012664:	1c18      	adds	r0, r3, #0
10012666:	3106      	adds	r1, #6
10012668:	4b01      	ldr	r3, [pc, #4]	; (10012670 <gattc_write_req_ind_parser+0x34>)
1001266a:	4798      	blx	r3
1001266c:	bd08      	pop	{r3, pc}
1001266e:	46c0      	nop			; (mov r8, r8)
10012670:	10014e57 	.word	0x10014e57

10012674 <gattc_att_info_req_parser>:
10012674:	7843      	ldrb	r3, [r0, #1]
10012676:	7802      	ldrb	r2, [r0, #0]
10012678:	021b      	lsls	r3, r3, #8
1001267a:	4313      	orrs	r3, r2
1001267c:	800b      	strh	r3, [r1, #0]
1001267e:	4770      	bx	lr

10012680 <gattc_read_cfm>:
10012680:	b538      	push	{r3, r4, r5, lr}
10012682:	2514      	movs	r5, #20
10012684:	1c1c      	adds	r4, r3, #0
10012686:	4b14      	ldr	r3, [pc, #80]	; (100126d8 <gattc_read_cfm+0x58>)
10012688:	70d9      	strb	r1, [r3, #3]
1001268a:	4914      	ldr	r1, [pc, #80]	; (100126dc <gattc_read_cfm+0x5c>)
1001268c:	701d      	strb	r5, [r3, #0]
1001268e:	3d08      	subs	r5, #8
10012690:	705d      	strb	r5, [r3, #1]
10012692:	709d      	strb	r5, [r3, #2]
10012694:	880d      	ldrh	r5, [r1, #0]
10012696:	8809      	ldrh	r1, [r1, #0]
10012698:	7218      	strb	r0, [r3, #8]
1001269a:	0a09      	lsrs	r1, r1, #8
1001269c:	7159      	strb	r1, [r3, #5]
1001269e:	0a00      	lsrs	r0, r0, #8
100126a0:	0a21      	lsrs	r1, r4, #8
100126a2:	711d      	strb	r5, [r3, #4]
100126a4:	7258      	strb	r0, [r3, #9]
100126a6:	729c      	strb	r4, [r3, #10]
100126a8:	72d9      	strb	r1, [r3, #11]
100126aa:	731a      	strb	r2, [r3, #12]
100126ac:	1c1d      	adds	r5, r3, #0
100126ae:	2c00      	cmp	r4, #0
100126b0:	d007      	beq.n	100126c2 <gattc_read_cfm+0x42>
100126b2:	9904      	ldr	r1, [sp, #16]
100126b4:	1c22      	adds	r2, r4, #0
100126b6:	480a      	ldr	r0, [pc, #40]	; (100126e0 <gattc_read_cfm+0x60>)
100126b8:	4b0a      	ldr	r3, [pc, #40]	; (100126e4 <gattc_read_cfm+0x64>)
100126ba:	340d      	adds	r4, #13
100126bc:	4798      	blx	r3
100126be:	b2a1      	uxth	r1, r4
100126c0:	e001      	b.n	100126c6 <gattc_read_cfm+0x46>
100126c2:	210e      	movs	r1, #14
100126c4:	735c      	strb	r4, [r3, #13]
100126c6:	1c0b      	adds	r3, r1, #0
100126c8:	3b08      	subs	r3, #8
100126ca:	71ab      	strb	r3, [r5, #6]
100126cc:	121b      	asrs	r3, r3, #8
100126ce:	71eb      	strb	r3, [r5, #7]
100126d0:	1c28      	adds	r0, r5, #0
100126d2:	4b05      	ldr	r3, [pc, #20]	; (100126e8 <gattc_read_cfm+0x68>)
100126d4:	4798      	blx	r3
100126d6:	bd38      	pop	{r3, r4, r5, pc}
100126d8:	1001aecc 	.word	0x1001aecc
100126dc:	1001ab5c 	.word	0x1001ab5c
100126e0:	1001aed9 	.word	0x1001aed9
100126e4:	10014e57 	.word	0x10014e57
100126e8:	100113c1 	.word	0x100113c1

100126ec <gattc_write_cfm>:
100126ec:	4b0d      	ldr	r3, [pc, #52]	; (10012724 <gattc_write_cfm+0x38>)
100126ee:	b510      	push	{r4, lr}
100126f0:	729a      	strb	r2, [r3, #10]
100126f2:	2203      	movs	r2, #3
100126f4:	2416      	movs	r4, #22
100126f6:	719a      	strb	r2, [r3, #6]
100126f8:	2200      	movs	r2, #0
100126fa:	70d9      	strb	r1, [r3, #3]
100126fc:	490a      	ldr	r1, [pc, #40]	; (10012728 <gattc_write_cfm+0x3c>)
100126fe:	701c      	strb	r4, [r3, #0]
10012700:	3c0a      	subs	r4, #10
10012702:	705c      	strb	r4, [r3, #1]
10012704:	709c      	strb	r4, [r3, #2]
10012706:	880c      	ldrh	r4, [r1, #0]
10012708:	8809      	ldrh	r1, [r1, #0]
1001270a:	7218      	strb	r0, [r3, #8]
1001270c:	0a09      	lsrs	r1, r1, #8
1001270e:	0a00      	lsrs	r0, r0, #8
10012710:	711c      	strb	r4, [r3, #4]
10012712:	7159      	strb	r1, [r3, #5]
10012714:	7258      	strb	r0, [r3, #9]
10012716:	71da      	strb	r2, [r3, #7]
10012718:	1c18      	adds	r0, r3, #0
1001271a:	210b      	movs	r1, #11
1001271c:	4b03      	ldr	r3, [pc, #12]	; (1001272c <gattc_write_cfm+0x40>)
1001271e:	4798      	blx	r3
10012720:	bd10      	pop	{r4, pc}
10012722:	46c0      	nop			; (mov r8, r8)
10012724:	1001aecc 	.word	0x1001aecc
10012728:	1001ab5c 	.word	0x1001ab5c
1001272c:	100113c1 	.word	0x100113c1

10012730 <gattc_att_info_cfm>:
10012730:	b538      	push	{r3, r4, r5, lr}
10012732:	4c0e      	ldr	r4, [pc, #56]	; (1001276c <gattc_att_info_cfm+0x3c>)
10012734:	2518      	movs	r5, #24
10012736:	7323      	strb	r3, [r4, #12]
10012738:	2305      	movs	r3, #5
1001273a:	71a3      	strb	r3, [r4, #6]
1001273c:	2300      	movs	r3, #0
1001273e:	70e1      	strb	r1, [r4, #3]
10012740:	490b      	ldr	r1, [pc, #44]	; (10012770 <gattc_att_info_cfm+0x40>)
10012742:	7025      	strb	r5, [r4, #0]
10012744:	3d0c      	subs	r5, #12
10012746:	7065      	strb	r5, [r4, #1]
10012748:	70a5      	strb	r5, [r4, #2]
1001274a:	880d      	ldrh	r5, [r1, #0]
1001274c:	8809      	ldrh	r1, [r1, #0]
1001274e:	7220      	strb	r0, [r4, #8]
10012750:	0a09      	lsrs	r1, r1, #8
10012752:	0a00      	lsrs	r0, r0, #8
10012754:	7161      	strb	r1, [r4, #5]
10012756:	7260      	strb	r0, [r4, #9]
10012758:	72a2      	strb	r2, [r4, #10]
1001275a:	71e3      	strb	r3, [r4, #7]
1001275c:	0a12      	lsrs	r2, r2, #8
1001275e:	1c20      	adds	r0, r4, #0
10012760:	210d      	movs	r1, #13
10012762:	4b04      	ldr	r3, [pc, #16]	; (10012774 <gattc_att_info_cfm+0x44>)
10012764:	7125      	strb	r5, [r4, #4]
10012766:	72e2      	strb	r2, [r4, #11]
10012768:	4798      	blx	r3
1001276a:	bd38      	pop	{r3, r4, r5, pc}
1001276c:	1001aecc 	.word	0x1001aecc
10012770:	1001ab5c 	.word	0x1001ab5c
10012774:	100113c1 	.word	0x100113c1

10012778 <gattc_send_evt_cmd_handler>:
10012778:	b570      	push	{r4, r5, r6, lr}
1001277a:	2610      	movs	r6, #16
1001277c:	ac04      	add	r4, sp, #16
1001277e:	8825      	ldrh	r5, [r4, #0]
10012780:	4c15      	ldr	r4, [pc, #84]	; (100127d8 <gattc_send_evt_cmd_handler+0x60>)
10012782:	70e2      	strb	r2, [r4, #3]
10012784:	4a15      	ldr	r2, [pc, #84]	; (100127dc <gattc_send_evt_cmd_handler+0x64>)
10012786:	7026      	strb	r6, [r4, #0]
10012788:	3e04      	subs	r6, #4
1001278a:	7066      	strb	r6, [r4, #1]
1001278c:	70a6      	strb	r6, [r4, #2]
1001278e:	8816      	ldrh	r6, [r2, #0]
10012790:	8812      	ldrh	r2, [r2, #0]
10012792:	7220      	strb	r0, [r4, #8]
10012794:	0a12      	lsrs	r2, r2, #8
10012796:	7162      	strb	r2, [r4, #5]
10012798:	4a11      	ldr	r2, [pc, #68]	; (100127e0 <gattc_send_evt_cmd_handler+0x68>)
1001279a:	7321      	strb	r1, [r4, #12]
1001279c:	8812      	ldrh	r2, [r2, #0]
1001279e:	73a5      	strb	r5, [r4, #14]
100127a0:	3201      	adds	r2, #1
100127a2:	7262      	strb	r2, [r4, #9]
100127a4:	1212      	asrs	r2, r2, #8
100127a6:	72a2      	strb	r2, [r4, #10]
100127a8:	2200      	movs	r2, #0
100127aa:	72e2      	strb	r2, [r4, #11]
100127ac:	0a0a      	lsrs	r2, r1, #8
100127ae:	7362      	strb	r2, [r4, #13]
100127b0:	0a2a      	lsrs	r2, r5, #8
100127b2:	73e2      	strb	r2, [r4, #15]
100127b4:	1c19      	adds	r1, r3, #0
100127b6:	1c2a      	adds	r2, r5, #0
100127b8:	4b0a      	ldr	r3, [pc, #40]	; (100127e4 <gattc_send_evt_cmd_handler+0x6c>)
100127ba:	3510      	adds	r5, #16
100127bc:	480a      	ldr	r0, [pc, #40]	; (100127e8 <gattc_send_evt_cmd_handler+0x70>)
100127be:	7126      	strb	r6, [r4, #4]
100127c0:	4798      	blx	r3
100127c2:	b2a9      	uxth	r1, r5
100127c4:	1c0b      	adds	r3, r1, #0
100127c6:	3b08      	subs	r3, #8
100127c8:	71a3      	strb	r3, [r4, #6]
100127ca:	121b      	asrs	r3, r3, #8
100127cc:	71e3      	strb	r3, [r4, #7]
100127ce:	1c20      	adds	r0, r4, #0
100127d0:	4b06      	ldr	r3, [pc, #24]	; (100127ec <gattc_send_evt_cmd_handler+0x74>)
100127d2:	4798      	blx	r3
100127d4:	bd70      	pop	{r4, r5, r6, pc}
100127d6:	46c0      	nop			; (mov r8, r8)
100127d8:	1001aecc 	.word	0x1001aecc
100127dc:	1001ab5c 	.word	0x1001ab5c
100127e0:	10019cf4 	.word	0x10019cf4
100127e4:	10014e57 	.word	0x10014e57
100127e8:	1001aedc 	.word	0x1001aedc
100127ec:	100113c1 	.word	0x100113c1

100127f0 <gattc_event_cfm_handler>:
100127f0:	220e      	movs	r2, #14
100127f2:	b508      	push	{r3, lr}
100127f4:	4b0b      	ldr	r3, [pc, #44]	; (10012824 <gattc_event_cfm_handler+0x34>)
100127f6:	701a      	strb	r2, [r3, #0]
100127f8:	3a02      	subs	r2, #2
100127fa:	705a      	strb	r2, [r3, #1]
100127fc:	709a      	strb	r2, [r3, #2]
100127fe:	4a0a      	ldr	r2, [pc, #40]	; (10012828 <gattc_event_cfm_handler+0x38>)
10012800:	70d8      	strb	r0, [r3, #3]
10012802:	8810      	ldrh	r0, [r2, #0]
10012804:	8812      	ldrh	r2, [r2, #0]
10012806:	7219      	strb	r1, [r3, #8]
10012808:	0a12      	lsrs	r2, r2, #8
1001280a:	715a      	strb	r2, [r3, #5]
1001280c:	2202      	movs	r2, #2
1001280e:	719a      	strb	r2, [r3, #6]
10012810:	2200      	movs	r2, #0
10012812:	0a09      	lsrs	r1, r1, #8
10012814:	7118      	strb	r0, [r3, #4]
10012816:	7259      	strb	r1, [r3, #9]
10012818:	71da      	strb	r2, [r3, #7]
1001281a:	1c18      	adds	r0, r3, #0
1001281c:	210a      	movs	r1, #10
1001281e:	4b03      	ldr	r3, [pc, #12]	; (1001282c <gattc_event_cfm_handler+0x3c>)
10012820:	4798      	blx	r3
10012822:	bd08      	pop	{r3, pc}
10012824:	1001aecc 	.word	0x1001aecc
10012828:	1001ab5c 	.word	0x1001ab5c
1001282c:	100113c1 	.word	0x100113c1

10012830 <gattc_disc_svc_ind_parser>:
10012830:	b570      	push	{r4, r5, r6, lr}
10012832:	1c15      	adds	r5, r2, #0
10012834:	0a00      	lsrs	r0, r0, #8
10012836:	8010      	strh	r0, [r2, #0]
10012838:	784b      	ldrb	r3, [r1, #1]
1001283a:	780a      	ldrb	r2, [r1, #0]
1001283c:	021b      	lsls	r3, r3, #8
1001283e:	4313      	orrs	r3, r2
10012840:	806b      	strh	r3, [r5, #2]
10012842:	78cb      	ldrb	r3, [r1, #3]
10012844:	788a      	ldrb	r2, [r1, #2]
10012846:	021b      	lsls	r3, r3, #8
10012848:	4313      	orrs	r3, r2
1001284a:	80ab      	strh	r3, [r5, #4]
1001284c:	790e      	ldrb	r6, [r1, #4]
1001284e:	4b05      	ldr	r3, [pc, #20]	; (10012864 <gattc_disc_svc_ind_parser+0x34>)
10012850:	1c30      	adds	r0, r6, #0
10012852:	1c0c      	adds	r4, r1, #0
10012854:	4798      	blx	r3
10012856:	1c32      	adds	r2, r6, #0
10012858:	71a8      	strb	r0, [r5, #6]
1001285a:	1d61      	adds	r1, r4, #5
1001285c:	1de8      	adds	r0, r5, #7
1001285e:	4b02      	ldr	r3, [pc, #8]	; (10012868 <gattc_disc_svc_ind_parser+0x38>)
10012860:	4798      	blx	r3
10012862:	bd70      	pop	{r4, r5, r6, pc}
10012864:	10010701 	.word	0x10010701
10012868:	10014e57 	.word	0x10014e57

1001286c <gattc_disc_svc_incl_ind_parser>:
1001286c:	b570      	push	{r4, r5, r6, lr}
1001286e:	1c15      	adds	r5, r2, #0
10012870:	0a00      	lsrs	r0, r0, #8
10012872:	8010      	strh	r0, [r2, #0]
10012874:	784b      	ldrb	r3, [r1, #1]
10012876:	780a      	ldrb	r2, [r1, #0]
10012878:	021b      	lsls	r3, r3, #8
1001287a:	4313      	orrs	r3, r2
1001287c:	806b      	strh	r3, [r5, #2]
1001287e:	78cb      	ldrb	r3, [r1, #3]
10012880:	788a      	ldrb	r2, [r1, #2]
10012882:	021b      	lsls	r3, r3, #8
10012884:	4313      	orrs	r3, r2
10012886:	80ab      	strh	r3, [r5, #4]
10012888:	794b      	ldrb	r3, [r1, #5]
1001288a:	790a      	ldrb	r2, [r1, #4]
1001288c:	021b      	lsls	r3, r3, #8
1001288e:	4313      	orrs	r3, r2
10012890:	80eb      	strh	r3, [r5, #6]
10012892:	798e      	ldrb	r6, [r1, #6]
10012894:	4b05      	ldr	r3, [pc, #20]	; (100128ac <gattc_disc_svc_incl_ind_parser+0x40>)
10012896:	1c30      	adds	r0, r6, #0
10012898:	1c0c      	adds	r4, r1, #0
1001289a:	4798      	blx	r3
1001289c:	7228      	strb	r0, [r5, #8]
1001289e:	1c28      	adds	r0, r5, #0
100128a0:	1c32      	adds	r2, r6, #0
100128a2:	1de1      	adds	r1, r4, #7
100128a4:	4b02      	ldr	r3, [pc, #8]	; (100128b0 <gattc_disc_svc_incl_ind_parser+0x44>)
100128a6:	3009      	adds	r0, #9
100128a8:	4798      	blx	r3
100128aa:	bd70      	pop	{r4, r5, r6, pc}
100128ac:	10010701 	.word	0x10010701
100128b0:	10014e57 	.word	0x10014e57

100128b4 <gattc_disc_char_ind_parser>:
100128b4:	b570      	push	{r4, r5, r6, lr}
100128b6:	1c15      	adds	r5, r2, #0
100128b8:	0a00      	lsrs	r0, r0, #8
100128ba:	8010      	strh	r0, [r2, #0]
100128bc:	784b      	ldrb	r3, [r1, #1]
100128be:	780a      	ldrb	r2, [r1, #0]
100128c0:	021b      	lsls	r3, r3, #8
100128c2:	4313      	orrs	r3, r2
100128c4:	806b      	strh	r3, [r5, #2]
100128c6:	78cb      	ldrb	r3, [r1, #3]
100128c8:	788a      	ldrb	r2, [r1, #2]
100128ca:	021b      	lsls	r3, r3, #8
100128cc:	4313      	orrs	r3, r2
100128ce:	80ab      	strh	r3, [r5, #4]
100128d0:	790b      	ldrb	r3, [r1, #4]
100128d2:	1c0c      	adds	r4, r1, #0
100128d4:	71ab      	strb	r3, [r5, #6]
100128d6:	794e      	ldrb	r6, [r1, #5]
100128d8:	4b05      	ldr	r3, [pc, #20]	; (100128f0 <gattc_disc_char_ind_parser+0x3c>)
100128da:	1c30      	adds	r0, r6, #0
100128dc:	4798      	blx	r3
100128de:	71e8      	strb	r0, [r5, #7]
100128e0:	1c28      	adds	r0, r5, #0
100128e2:	1c32      	adds	r2, r6, #0
100128e4:	1da1      	adds	r1, r4, #6
100128e6:	4b03      	ldr	r3, [pc, #12]	; (100128f4 <gattc_disc_char_ind_parser+0x40>)
100128e8:	3008      	adds	r0, #8
100128ea:	4798      	blx	r3
100128ec:	bd70      	pop	{r4, r5, r6, pc}
100128ee:	46c0      	nop			; (mov r8, r8)
100128f0:	10010701 	.word	0x10010701
100128f4:	10014e57 	.word	0x10014e57

100128f8 <gattc_disc_char_desc_ind_parser>:
100128f8:	b570      	push	{r4, r5, r6, lr}
100128fa:	1c15      	adds	r5, r2, #0
100128fc:	0a00      	lsrs	r0, r0, #8
100128fe:	8010      	strh	r0, [r2, #0]
10012900:	784b      	ldrb	r3, [r1, #1]
10012902:	780a      	ldrb	r2, [r1, #0]
10012904:	021b      	lsls	r3, r3, #8
10012906:	4313      	orrs	r3, r2
10012908:	806b      	strh	r3, [r5, #2]
1001290a:	788e      	ldrb	r6, [r1, #2]
1001290c:	4b05      	ldr	r3, [pc, #20]	; (10012924 <gattc_disc_char_desc_ind_parser+0x2c>)
1001290e:	1c30      	adds	r0, r6, #0
10012910:	1c0c      	adds	r4, r1, #0
10012912:	4798      	blx	r3
10012914:	1c32      	adds	r2, r6, #0
10012916:	7128      	strb	r0, [r5, #4]
10012918:	1ce1      	adds	r1, r4, #3
1001291a:	1d68      	adds	r0, r5, #5
1001291c:	4b02      	ldr	r3, [pc, #8]	; (10012928 <gattc_disc_char_desc_ind_parser+0x30>)
1001291e:	4798      	blx	r3
10012920:	bd70      	pop	{r4, r5, r6, pc}
10012922:	46c0      	nop			; (mov r8, r8)
10012924:	10010701 	.word	0x10010701
10012928:	10014e57 	.word	0x10014e57

1001292c <gattc_event_ind_and_notification_parser>:
1001292c:	b510      	push	{r4, lr}
1001292e:	780c      	ldrb	r4, [r1, #0]
10012930:	1c13      	adds	r3, r2, #0
10012932:	2c12      	cmp	r4, #18
10012934:	d10e      	bne.n	10012954 <gattc_event_ind_and_notification_parser+0x28>
10012936:	0a00      	lsrs	r0, r0, #8
10012938:	8010      	strh	r0, [r2, #0]
1001293a:	788a      	ldrb	r2, [r1, #2]
1001293c:	709a      	strb	r2, [r3, #2]
1001293e:	7948      	ldrb	r0, [r1, #5]
10012940:	790c      	ldrb	r4, [r1, #4]
10012942:	0200      	lsls	r0, r0, #8
10012944:	4320      	orrs	r0, r4
10012946:	8098      	strh	r0, [r3, #4]
10012948:	3106      	adds	r1, #6
1001294a:	1d98      	adds	r0, r3, #6
1001294c:	4b0b      	ldr	r3, [pc, #44]	; (1001297c <gattc_event_ind_and_notification_parser+0x50>)
1001294e:	4798      	blx	r3
10012950:	221b      	movs	r2, #27
10012952:	e010      	b.n	10012976 <gattc_event_ind_and_notification_parser+0x4a>
10012954:	2200      	movs	r2, #0
10012956:	2c13      	cmp	r4, #19
10012958:	d10d      	bne.n	10012976 <gattc_event_ind_and_notification_parser+0x4a>
1001295a:	0a00      	lsrs	r0, r0, #8
1001295c:	8018      	strh	r0, [r3, #0]
1001295e:	788a      	ldrb	r2, [r1, #2]
10012960:	709a      	strb	r2, [r3, #2]
10012962:	7908      	ldrb	r0, [r1, #4]
10012964:	78cc      	ldrb	r4, [r1, #3]
10012966:	0200      	lsls	r0, r0, #8
10012968:	4320      	orrs	r0, r4
1001296a:	8098      	strh	r0, [r3, #4]
1001296c:	3106      	adds	r1, #6
1001296e:	1d98      	adds	r0, r3, #6
10012970:	4b02      	ldr	r3, [pc, #8]	; (1001297c <gattc_event_ind_and_notification_parser+0x50>)
10012972:	4798      	blx	r3
10012974:	221c      	movs	r2, #28
10012976:	1c10      	adds	r0, r2, #0
10012978:	bd10      	pop	{r4, pc}
1001297a:	46c0      	nop			; (mov r8, r8)
1001297c:	10014e57 	.word	0x10014e57

10012980 <gattc_complete_evt_handler>:
10012980:	b500      	push	{lr}
10012982:	0a00      	lsrs	r0, r0, #8
10012984:	8010      	strh	r0, [r2, #0]
10012986:	7808      	ldrb	r0, [r1, #0]
10012988:	7090      	strb	r0, [r2, #2]
1001298a:	784b      	ldrb	r3, [r1, #1]
1001298c:	3801      	subs	r0, #1
1001298e:	70d3      	strb	r3, [r2, #3]
10012990:	2813      	cmp	r0, #19
10012992:	d82c      	bhi.n	100129ee <gattc_complete_evt_handler+0x6e>
10012994:	f000 f9dc 	bl	10012d50 <__gnu_thumb1_case_uqi>
10012998:	0a0a0a0c 	.word	0x0a0a0a0c
1001299c:	210a0a0a 	.word	0x210a0a0a
100129a0:	111f2121 	.word	0x111f2121
100129a4:	2b111111 	.word	0x2b111111
100129a8:	2919132b 	.word	0x2919132b
100129ac:	2017      	movs	r0, #23
100129ae:	e01f      	b.n	100129f0 <gattc_complete_evt_handler+0x70>
100129b0:	2024      	movs	r0, #36	; 0x24
100129b2:	2b00      	cmp	r3, #0
100129b4:	d11c      	bne.n	100129f0 <gattc_complete_evt_handler+0x70>
100129b6:	3017      	adds	r0, #23
100129b8:	e01a      	b.n	100129f0 <gattc_complete_evt_handler+0x70>
100129ba:	2025      	movs	r0, #37	; 0x25
100129bc:	e018      	b.n	100129f0 <gattc_complete_evt_handler+0x70>
100129be:	4a0d      	ldr	r2, [pc, #52]	; (100129f4 <gattc_complete_evt_handler+0x74>)
100129c0:	201d      	movs	r0, #29
100129c2:	6813      	ldr	r3, [r2, #0]
100129c4:	3b01      	subs	r3, #1
100129c6:	6013      	str	r3, [r2, #0]
100129c8:	e012      	b.n	100129f0 <gattc_complete_evt_handler+0x70>
100129ca:	4a0a      	ldr	r2, [pc, #40]	; (100129f4 <gattc_complete_evt_handler+0x74>)
100129cc:	201e      	movs	r0, #30
100129ce:	6813      	ldr	r3, [r2, #0]
100129d0:	3b01      	subs	r3, #1
100129d2:	6013      	str	r3, [r2, #0]
100129d4:	e00c      	b.n	100129f0 <gattc_complete_evt_handler+0x70>
100129d6:	2019      	movs	r0, #25
100129d8:	e00a      	b.n	100129f0 <gattc_complete_evt_handler+0x70>
100129da:	203b      	movs	r0, #59	; 0x3b
100129dc:	2b00      	cmp	r3, #0
100129de:	d007      	beq.n	100129f0 <gattc_complete_evt_handler+0x70>
100129e0:	2182      	movs	r1, #130	; 0x82
100129e2:	0089      	lsls	r1, r1, #2
100129e4:	5453      	strb	r3, [r2, r1]
100129e6:	3823      	subs	r0, #35	; 0x23
100129e8:	e002      	b.n	100129f0 <gattc_complete_evt_handler+0x70>
100129ea:	2021      	movs	r0, #33	; 0x21
100129ec:	e000      	b.n	100129f0 <gattc_complete_evt_handler+0x70>
100129ee:	2000      	movs	r0, #0
100129f0:	bd00      	pop	{pc}
100129f2:	46c0      	nop			; (mov r8, r8)
100129f4:	10019cf8 	.word	0x10019cf8

100129f8 <gattc_event_mtu_changed_ind_parser>:
100129f8:	0a00      	lsrs	r0, r0, #8
100129fa:	8010      	strh	r0, [r2, #0]
100129fc:	784b      	ldrb	r3, [r1, #1]
100129fe:	7809      	ldrb	r1, [r1, #0]
10012a00:	021b      	lsls	r3, r3, #8
10012a02:	430b      	orrs	r3, r1
10012a04:	8053      	strh	r3, [r2, #2]
10012a06:	4770      	bx	lr

10012a08 <gattc_read_ind_parser>:
10012a08:	0a00      	lsrs	r0, r0, #8
10012a0a:	b508      	push	{r3, lr}
10012a0c:	8010      	strh	r0, [r2, #0]
10012a0e:	1c13      	adds	r3, r2, #0
10012a10:	2282      	movs	r2, #130	; 0x82
10012a12:	2000      	movs	r0, #0
10012a14:	0092      	lsls	r2, r2, #2
10012a16:	5498      	strb	r0, [r3, r2]
10012a18:	784a      	ldrb	r2, [r1, #1]
10012a1a:	7808      	ldrb	r0, [r1, #0]
10012a1c:	0212      	lsls	r2, r2, #8
10012a1e:	4302      	orrs	r2, r0
10012a20:	805a      	strh	r2, [r3, #2]
10012a22:	78ca      	ldrb	r2, [r1, #3]
10012a24:	7888      	ldrb	r0, [r1, #2]
10012a26:	0212      	lsls	r2, r2, #8
10012a28:	4302      	orrs	r2, r0
10012a2a:	80da      	strh	r2, [r3, #6]
10012a2c:	794a      	ldrb	r2, [r1, #5]
10012a2e:	7908      	ldrb	r0, [r1, #4]
10012a30:	0212      	lsls	r2, r2, #8
10012a32:	4302      	orrs	r2, r0
10012a34:	809a      	strh	r2, [r3, #4]
10012a36:	3308      	adds	r3, #8
10012a38:	1c18      	adds	r0, r3, #0
10012a3a:	3106      	adds	r1, #6
10012a3c:	4b01      	ldr	r3, [pc, #4]	; (10012a44 <gattc_read_ind_parser+0x3c>)
10012a3e:	4798      	blx	r3
10012a40:	bd08      	pop	{r3, pc}
10012a42:	46c0      	nop			; (mov r8, r8)
10012a44:	10014e57 	.word	0x10014e57

10012a48 <gattc_svc_changed_cfg_ind_parser>:
10012a48:	0a00      	lsrs	r0, r0, #8
10012a4a:	8010      	strh	r0, [r2, #0]
10012a4c:	784b      	ldrb	r3, [r1, #1]
10012a4e:	7809      	ldrb	r1, [r1, #0]
10012a50:	021b      	lsls	r3, r3, #8
10012a52:	430b      	orrs	r3, r1
10012a54:	8053      	strh	r3, [r2, #2]
10012a56:	4770      	bx	lr

10012a58 <init_gattc_task_module>:
10012a58:	2300      	movs	r3, #0
10012a5a:	4a02      	ldr	r2, [pc, #8]	; (10012a64 <init_gattc_task_module+0xc>)
10012a5c:	8013      	strh	r3, [r2, #0]
10012a5e:	4a02      	ldr	r2, [pc, #8]	; (10012a68 <init_gattc_task_module+0x10>)
10012a60:	8013      	strh	r3, [r2, #0]
10012a62:	4770      	bx	lr
10012a64:	10019cf2 	.word	0x10019cf2
10012a68:	10019cf4 	.word	0x10019cf4

10012a6c <gattm_add_svc_req_handler>:
10012a6c:	2200      	movs	r2, #0
10012a6e:	210b      	movs	r1, #11
10012a70:	b5f0      	push	{r4, r5, r6, r7, lr}
10012a72:	1c04      	adds	r4, r0, #0
10012a74:	7943      	ldrb	r3, [r0, #5]
10012a76:	b085      	sub	sp, #20
10012a78:	9301      	str	r3, [sp, #4]
10012a7a:	ab02      	add	r3, sp, #8
10012a7c:	71da      	strb	r2, [r3, #7]
10012a7e:	4b37      	ldr	r3, [pc, #220]	; (10012b5c <gattm_add_svc_req_handler+0xf0>)
10012a80:	7059      	strb	r1, [r3, #1]
10012a82:	7099      	strb	r1, [r3, #2]
10012a84:	4936      	ldr	r1, [pc, #216]	; (10012b60 <gattm_add_svc_req_handler+0xf4>)
10012a86:	701a      	strb	r2, [r3, #0]
10012a88:	8808      	ldrh	r0, [r1, #0]
10012a8a:	8809      	ldrh	r1, [r1, #0]
10012a8c:	70da      	strb	r2, [r3, #3]
10012a8e:	0a09      	lsrs	r1, r1, #8
10012a90:	7118      	strb	r0, [r3, #4]
10012a92:	7159      	strb	r1, [r3, #5]
10012a94:	8821      	ldrh	r1, [r4, #0]
10012a96:	7219      	strb	r1, [r3, #8]
10012a98:	8821      	ldrh	r1, [r4, #0]
10012a9a:	0a09      	lsrs	r1, r1, #8
10012a9c:	7259      	strb	r1, [r3, #9]
10012a9e:	8861      	ldrh	r1, [r4, #2]
10012aa0:	7299      	strb	r1, [r3, #10]
10012aa2:	8861      	ldrh	r1, [r4, #2]
10012aa4:	0a09      	lsrs	r1, r1, #8
10012aa6:	72d9      	strb	r1, [r3, #11]
10012aa8:	7921      	ldrb	r1, [r4, #4]
10012aaa:	7319      	strb	r1, [r3, #12]
10012aac:	4669      	mov	r1, sp
10012aae:	7909      	ldrb	r1, [r1, #4]
10012ab0:	7359      	strb	r1, [r3, #13]
10012ab2:	18a1      	adds	r1, r4, r2
10012ab4:	7988      	ldrb	r0, [r1, #6]
10012ab6:	1899      	adds	r1, r3, r2
10012ab8:	3201      	adds	r2, #1
10012aba:	7388      	strb	r0, [r1, #14]
10012abc:	2a10      	cmp	r2, #16
10012abe:	d1f8      	bne.n	10012ab2 <gattm_add_svc_req_handler+0x46>
10012ac0:	1c27      	adds	r7, r4, #0
10012ac2:	2300      	movs	r3, #0
10012ac4:	251e      	movs	r5, #30
10012ac6:	3716      	adds	r7, #22
10012ac8:	9300      	str	r3, [sp, #0]
10012aca:	9b00      	ldr	r3, [sp, #0]
10012acc:	9a01      	ldr	r2, [sp, #4]
10012ace:	4e23      	ldr	r6, [pc, #140]	; (10012b5c <gattm_add_svc_req_handler+0xf0>)
10012ad0:	4293      	cmp	r3, r2
10012ad2:	da21      	bge.n	10012b18 <gattm_add_svc_req_handler+0xac>
10012ad4:	1c39      	adds	r1, r7, #0
10012ad6:	1970      	adds	r0, r6, r5
10012ad8:	2210      	movs	r2, #16
10012ada:	4b22      	ldr	r3, [pc, #136]	; (10012b64 <gattm_add_svc_req_handler+0xf8>)
10012adc:	4798      	blx	r3
10012ade:	1c2b      	adds	r3, r5, #0
10012ae0:	8a3a      	ldrh	r2, [r7, #16]
10012ae2:	3310      	adds	r3, #16
10012ae4:	b29b      	uxth	r3, r3
10012ae6:	54f2      	strb	r2, [r6, r3]
10012ae8:	1c2b      	adds	r3, r5, #0
10012aea:	8a3a      	ldrh	r2, [r7, #16]
10012aec:	3311      	adds	r3, #17
10012aee:	b29b      	uxth	r3, r3
10012af0:	0a12      	lsrs	r2, r2, #8
10012af2:	54f2      	strb	r2, [r6, r3]
10012af4:	1c2a      	adds	r2, r5, #0
10012af6:	1c2b      	adds	r3, r5, #0
10012af8:	8a79      	ldrh	r1, [r7, #18]
10012afa:	3212      	adds	r2, #18
10012afc:	b292      	uxth	r2, r2
10012afe:	54b1      	strb	r1, [r6, r2]
10012b00:	8a7a      	ldrh	r2, [r7, #18]
10012b02:	3313      	adds	r3, #19
10012b04:	b29b      	uxth	r3, r3
10012b06:	0a12      	lsrs	r2, r2, #8
10012b08:	54f2      	strb	r2, [r6, r3]
10012b0a:	9b00      	ldr	r3, [sp, #0]
10012b0c:	3514      	adds	r5, #20
10012b0e:	3301      	adds	r3, #1
10012b10:	b2ad      	uxth	r5, r5
10012b12:	9300      	str	r3, [sp, #0]
10012b14:	3714      	adds	r7, #20
10012b16:	e7d8      	b.n	10012aca <gattm_add_svc_req_handler+0x5e>
10012b18:	2114      	movs	r1, #20
10012b1a:	4d13      	ldr	r5, [pc, #76]	; (10012b68 <gattm_add_svc_req_handler+0xfc>)
10012b1c:	4b13      	ldr	r3, [pc, #76]	; (10012b6c <gattm_add_svc_req_handler+0x100>)
10012b1e:	4351      	muls	r1, r2
10012b20:	802b      	strh	r3, [r5, #0]
10012b22:	230b      	movs	r3, #11
10012b24:	311e      	adds	r1, #30
10012b26:	80ab      	strh	r3, [r5, #4]
10012b28:	1c0b      	adds	r3, r1, #0
10012b2a:	3b08      	subs	r3, #8
10012b2c:	71b3      	strb	r3, [r6, #6]
10012b2e:	121b      	asrs	r3, r3, #8
10012b30:	71f3      	strb	r3, [r6, #7]
10012b32:	1c30      	adds	r0, r6, #0
10012b34:	4b0e      	ldr	r3, [pc, #56]	; (10012b70 <gattm_add_svc_req_handler+0x104>)
10012b36:	4798      	blx	r3
10012b38:	ab02      	add	r3, sp, #8
10012b3a:	1dde      	adds	r6, r3, #7
10012b3c:	1c30      	adds	r0, r6, #0
10012b3e:	4b0d      	ldr	r3, [pc, #52]	; (10012b74 <gattm_add_svc_req_handler+0x108>)
10012b40:	4798      	blx	r3
10012b42:	7833      	ldrb	r3, [r6, #0]
10012b44:	20e2      	movs	r0, #226	; 0xe2
10012b46:	2b00      	cmp	r3, #0
10012b48:	d106      	bne.n	10012b58 <gattm_add_svc_req_handler+0xec>
10012b4a:	68aa      	ldr	r2, [r5, #8]
10012b4c:	7853      	ldrb	r3, [r2, #1]
10012b4e:	7811      	ldrb	r1, [r2, #0]
10012b50:	021b      	lsls	r3, r3, #8
10012b52:	430b      	orrs	r3, r1
10012b54:	8023      	strh	r3, [r4, #0]
10012b56:	7890      	ldrb	r0, [r2, #2]
10012b58:	b005      	add	sp, #20
10012b5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
10012b5c:	1001aecc 	.word	0x1001aecc
10012b60:	1001ab5c 	.word	0x1001ab5c
10012b64:	10014e57 	.word	0x10014e57
10012b68:	1001ab50 	.word	0x1001ab50
10012b6c:	00000b01 	.word	0x00000b01
10012b70:	100113c1 	.word	0x100113c1
10012b74:	10011425 	.word	0x10011425

10012b78 <gattm_add_attribute_req_handler>:
10012b78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10012b7a:	1c1f      	adds	r7, r3, #0
10012b7c:	4b16      	ldr	r3, [pc, #88]	; (10012bd8 <gattm_add_attribute_req_handler+0x60>)
10012b7e:	9100      	str	r1, [sp, #0]
10012b80:	9201      	str	r2, [sp, #4]
10012b82:	1c05      	adds	r5, r0, #0
10012b84:	7946      	ldrb	r6, [r0, #5]
10012b86:	6818      	ldr	r0, [r3, #0]
10012b88:	2114      	movs	r1, #20
10012b8a:	4b14      	ldr	r3, [pc, #80]	; (10012bdc <gattm_add_attribute_req_handler+0x64>)
10012b8c:	382a      	subs	r0, #42	; 0x2a
10012b8e:	4798      	blx	r3
10012b90:	2311      	movs	r3, #17
10012b92:	4286      	cmp	r6, r0
10012b94:	d21e      	bcs.n	10012bd4 <gattm_add_attribute_req_handler+0x5c>
10012b96:	2414      	movs	r4, #20
10012b98:	4366      	muls	r6, r4
10012b9a:	19a8      	adds	r0, r5, r6
10012b9c:	2100      	movs	r1, #0
10012b9e:	2210      	movs	r2, #16
10012ba0:	4b0f      	ldr	r3, [pc, #60]	; (10012be0 <gattm_add_attribute_req_handler+0x68>)
10012ba2:	3016      	adds	r0, #22
10012ba4:	4798      	blx	r3
10012ba6:	7968      	ldrb	r0, [r5, #5]
10012ba8:	1c3a      	adds	r2, r7, #0
10012baa:	4360      	muls	r0, r4
10012bac:	1828      	adds	r0, r5, r0
10012bae:	4b0d      	ldr	r3, [pc, #52]	; (10012be4 <gattm_add_attribute_req_handler+0x6c>)
10012bb0:	3016      	adds	r0, #22
10012bb2:	9908      	ldr	r1, [sp, #32]
10012bb4:	4798      	blx	r3
10012bb6:	466a      	mov	r2, sp
10012bb8:	796b      	ldrb	r3, [r5, #5]
10012bba:	8812      	ldrh	r2, [r2, #0]
10012bbc:	435c      	muls	r4, r3
10012bbe:	192c      	adds	r4, r5, r4
10012bc0:	8522      	strh	r2, [r4, #40]	; 0x28
10012bc2:	466a      	mov	r2, sp
10012bc4:	8892      	ldrh	r2, [r2, #4]
10012bc6:	84e2      	strh	r2, [r4, #38]	; 0x26
10012bc8:	9a09      	ldr	r2, [sp, #36]	; 0x24
10012bca:	8013      	strh	r3, [r2, #0]
10012bcc:	796b      	ldrb	r3, [r5, #5]
10012bce:	3301      	adds	r3, #1
10012bd0:	716b      	strb	r3, [r5, #5]
10012bd2:	2300      	movs	r3, #0
10012bd4:	1c18      	adds	r0, r3, #0
10012bd6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10012bd8:	10019c68 	.word	0x10019c68
10012bdc:	10012d65 	.word	0x10012d65
10012be0:	10014e69 	.word	0x10014e69
10012be4:	10014e57 	.word	0x10014e57

10012be8 <gattm_att_set_value_req_handler>:
10012be8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10012bea:	466b      	mov	r3, sp
10012bec:	1dde      	adds	r6, r3, #7
10012bee:	2300      	movs	r3, #0
10012bf0:	1c0d      	adds	r5, r1, #0
10012bf2:	210c      	movs	r1, #12
10012bf4:	270b      	movs	r7, #11
10012bf6:	4c17      	ldr	r4, [pc, #92]	; (10012c54 <gattm_att_set_value_req_handler+0x6c>)
10012bf8:	7033      	strb	r3, [r6, #0]
10012bfa:	70e3      	strb	r3, [r4, #3]
10012bfc:	4b16      	ldr	r3, [pc, #88]	; (10012c58 <gattm_att_set_value_req_handler+0x70>)
10012bfe:	7021      	strb	r1, [r4, #0]
10012c00:	8819      	ldrh	r1, [r3, #0]
10012c02:	881b      	ldrh	r3, [r3, #0]
10012c04:	7220      	strb	r0, [r4, #8]
10012c06:	0a1b      	lsrs	r3, r3, #8
10012c08:	7163      	strb	r3, [r4, #5]
10012c0a:	0a00      	lsrs	r0, r0, #8
10012c0c:	0a2b      	lsrs	r3, r5, #8
10012c0e:	7121      	strb	r1, [r4, #4]
10012c10:	7260      	strb	r0, [r4, #9]
10012c12:	1c11      	adds	r1, r2, #0
10012c14:	72a5      	strb	r5, [r4, #10]
10012c16:	1c2a      	adds	r2, r5, #0
10012c18:	72e3      	strb	r3, [r4, #11]
10012c1a:	350c      	adds	r5, #12
10012c1c:	4b0f      	ldr	r3, [pc, #60]	; (10012c5c <gattm_att_set_value_req_handler+0x74>)
10012c1e:	4810      	ldr	r0, [pc, #64]	; (10012c60 <gattm_att_set_value_req_handler+0x78>)
10012c20:	7067      	strb	r7, [r4, #1]
10012c22:	70a7      	strb	r7, [r4, #2]
10012c24:	4798      	blx	r3
10012c26:	b2a9      	uxth	r1, r5
10012c28:	4b0e      	ldr	r3, [pc, #56]	; (10012c64 <gattm_att_set_value_req_handler+0x7c>)
10012c2a:	4d0f      	ldr	r5, [pc, #60]	; (10012c68 <gattm_att_set_value_req_handler+0x80>)
10012c2c:	1c20      	adds	r0, r4, #0
10012c2e:	802b      	strh	r3, [r5, #0]
10012c30:	1c0b      	adds	r3, r1, #0
10012c32:	3b08      	subs	r3, #8
10012c34:	71a3      	strb	r3, [r4, #6]
10012c36:	121b      	asrs	r3, r3, #8
10012c38:	71e3      	strb	r3, [r4, #7]
10012c3a:	4b0c      	ldr	r3, [pc, #48]	; (10012c6c <gattm_att_set_value_req_handler+0x84>)
10012c3c:	80af      	strh	r7, [r5, #4]
10012c3e:	4798      	blx	r3
10012c40:	1c30      	adds	r0, r6, #0
10012c42:	4b0b      	ldr	r3, [pc, #44]	; (10012c70 <gattm_att_set_value_req_handler+0x88>)
10012c44:	4798      	blx	r3
10012c46:	7833      	ldrb	r3, [r6, #0]
10012c48:	20e2      	movs	r0, #226	; 0xe2
10012c4a:	2b00      	cmp	r3, #0
10012c4c:	d101      	bne.n	10012c52 <gattm_att_set_value_req_handler+0x6a>
10012c4e:	68ab      	ldr	r3, [r5, #8]
10012c50:	7898      	ldrb	r0, [r3, #2]
10012c52:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10012c54:	1001aecc 	.word	0x1001aecc
10012c58:	1001ab5c 	.word	0x1001ab5c
10012c5c:	10014e57 	.word	0x10014e57
10012c60:	1001aed8 	.word	0x1001aed8
10012c64:	00000b0d 	.word	0x00000b0d
10012c68:	1001ab50 	.word	0x1001ab50
10012c6c:	100113c1 	.word	0x100113c1
10012c70:	10011425 	.word	0x10011425

10012c74 <gattm_att_get_value_req_handler>:
10012c74:	b5f0      	push	{r4, r5, r6, r7, lr}
10012c76:	b085      	sub	sp, #20
10012c78:	9201      	str	r2, [sp, #4]
10012c7a:	220a      	movs	r2, #10
10012c7c:	1c04      	adds	r4, r0, #0
10012c7e:	481d      	ldr	r0, [pc, #116]	; (10012cf4 <gattm_att_get_value_req_handler+0x80>)
10012c80:	ab02      	add	r3, sp, #8
10012c82:	1dde      	adds	r6, r3, #7
10012c84:	7002      	strb	r2, [r0, #0]
10012c86:	2300      	movs	r3, #0
10012c88:	220b      	movs	r2, #11
10012c8a:	4d1b      	ldr	r5, [pc, #108]	; (10012cf8 <gattm_att_get_value_req_handler+0x84>)
10012c8c:	1c0f      	adds	r7, r1, #0
10012c8e:	8829      	ldrh	r1, [r5, #0]
10012c90:	882d      	ldrh	r5, [r5, #0]
10012c92:	7101      	strb	r1, [r0, #4]
10012c94:	0a2d      	lsrs	r5, r5, #8
10012c96:	7145      	strb	r5, [r0, #5]
10012c98:	0a25      	lsrs	r5, r4, #8
10012c9a:	7245      	strb	r5, [r0, #9]
10012c9c:	4917      	ldr	r1, [pc, #92]	; (10012cfc <gattm_att_get_value_req_handler+0x88>)
10012c9e:	4d18      	ldr	r5, [pc, #96]	; (10012d00 <gattm_att_get_value_req_handler+0x8c>)
10012ca0:	7033      	strb	r3, [r6, #0]
10012ca2:	7042      	strb	r2, [r0, #1]
10012ca4:	7082      	strb	r2, [r0, #2]
10012ca6:	70c3      	strb	r3, [r0, #3]
10012ca8:	8029      	strh	r1, [r5, #0]
10012caa:	80aa      	strh	r2, [r5, #4]
10012cac:	71c3      	strb	r3, [r0, #7]
10012cae:	3a09      	subs	r2, #9
10012cb0:	210a      	movs	r1, #10
10012cb2:	4b14      	ldr	r3, [pc, #80]	; (10012d04 <gattm_att_get_value_req_handler+0x90>)
10012cb4:	7182      	strb	r2, [r0, #6]
10012cb6:	7204      	strb	r4, [r0, #8]
10012cb8:	4798      	blx	r3
10012cba:	1c30      	adds	r0, r6, #0
10012cbc:	4b12      	ldr	r3, [pc, #72]	; (10012d08 <gattm_att_get_value_req_handler+0x94>)
10012cbe:	4798      	blx	r3
10012cc0:	7833      	ldrb	r3, [r6, #0]
10012cc2:	20e2      	movs	r0, #226	; 0xe2
10012cc4:	2b00      	cmp	r3, #0
10012cc6:	d112      	bne.n	10012cee <gattm_att_get_value_req_handler+0x7a>
10012cc8:	68a9      	ldr	r1, [r5, #8]
10012cca:	9801      	ldr	r0, [sp, #4]
10012ccc:	784d      	ldrb	r5, [r1, #1]
10012cce:	780b      	ldrb	r3, [r1, #0]
10012cd0:	78ca      	ldrb	r2, [r1, #3]
10012cd2:	022d      	lsls	r5, r5, #8
10012cd4:	431d      	orrs	r5, r3
10012cd6:	788b      	ldrb	r3, [r1, #2]
10012cd8:	0212      	lsls	r2, r2, #8
10012cda:	431a      	orrs	r2, r3
10012cdc:	803a      	strh	r2, [r7, #0]
10012cde:	790e      	ldrb	r6, [r1, #4]
10012ce0:	4b0a      	ldr	r3, [pc, #40]	; (10012d0c <gattm_att_get_value_req_handler+0x98>)
10012ce2:	3105      	adds	r1, #5
10012ce4:	4798      	blx	r3
10012ce6:	20e2      	movs	r0, #226	; 0xe2
10012ce8:	42ac      	cmp	r4, r5
10012cea:	d100      	bne.n	10012cee <gattm_att_get_value_req_handler+0x7a>
10012cec:	1c30      	adds	r0, r6, #0
10012cee:	b005      	add	sp, #20
10012cf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
10012cf2:	46c0      	nop			; (mov r8, r8)
10012cf4:	1001aecc 	.word	0x1001aecc
10012cf8:	1001ab5c 	.word	0x1001ab5c
10012cfc:	00000b0b 	.word	0x00000b0b
10012d00:	1001ab50 	.word	0x1001ab50
10012d04:	100113c1 	.word	0x100113c1
10012d08:	10011425 	.word	0x10011425
10012d0c:	10014e57 	.word	0x10014e57

10012d10 <htpt_enable_rsp_handler>:
10012d10:	780b      	ldrb	r3, [r1, #0]
10012d12:	7013      	strb	r3, [r2, #0]
10012d14:	784b      	ldrb	r3, [r1, #1]
10012d16:	7053      	strb	r3, [r2, #1]
10012d18:	4770      	bx	lr

10012d1a <htpt_temp_send_rsp_handler>:
10012d1a:	780b      	ldrb	r3, [r1, #0]
10012d1c:	7013      	strb	r3, [r2, #0]
10012d1e:	4770      	bx	lr

10012d20 <htpt_meas_intv_upd_rsp_handler>:
10012d20:	780b      	ldrb	r3, [r1, #0]
10012d22:	7013      	strb	r3, [r2, #0]
10012d24:	4770      	bx	lr

10012d26 <htpt_meas_intv_chg_req_ind_handler>:
10012d26:	78cb      	ldrb	r3, [r1, #3]
10012d28:	7889      	ldrb	r1, [r1, #2]
10012d2a:	021b      	lsls	r3, r3, #8
10012d2c:	430b      	orrs	r3, r1
10012d2e:	8013      	strh	r3, [r2, #0]
10012d30:	4770      	bx	lr

10012d32 <htpt_cfg_indntf_ind_handler>:
10012d32:	780b      	ldrb	r3, [r1, #0]
10012d34:	7013      	strb	r3, [r2, #0]
10012d36:	784b      	ldrb	r3, [r1, #1]
10012d38:	7053      	strb	r3, [r2, #1]
10012d3a:	4770      	bx	lr

10012d3c <__gnu_thumb1_case_sqi>:
10012d3c:	b402      	push	{r1}
10012d3e:	4671      	mov	r1, lr
10012d40:	0849      	lsrs	r1, r1, #1
10012d42:	0049      	lsls	r1, r1, #1
10012d44:	5609      	ldrsb	r1, [r1, r0]
10012d46:	0049      	lsls	r1, r1, #1
10012d48:	448e      	add	lr, r1
10012d4a:	bc02      	pop	{r1}
10012d4c:	4770      	bx	lr
10012d4e:	46c0      	nop			; (mov r8, r8)

10012d50 <__gnu_thumb1_case_uqi>:
10012d50:	b402      	push	{r1}
10012d52:	4671      	mov	r1, lr
10012d54:	0849      	lsrs	r1, r1, #1
10012d56:	0049      	lsls	r1, r1, #1
10012d58:	5c09      	ldrb	r1, [r1, r0]
10012d5a:	0049      	lsls	r1, r1, #1
10012d5c:	448e      	add	lr, r1
10012d5e:	bc02      	pop	{r1}
10012d60:	4770      	bx	lr
10012d62:	46c0      	nop			; (mov r8, r8)

10012d64 <__aeabi_uidiv>:
10012d64:	2200      	movs	r2, #0
10012d66:	0843      	lsrs	r3, r0, #1
10012d68:	428b      	cmp	r3, r1
10012d6a:	d374      	bcc.n	10012e56 <__aeabi_uidiv+0xf2>
10012d6c:	0903      	lsrs	r3, r0, #4
10012d6e:	428b      	cmp	r3, r1
10012d70:	d35f      	bcc.n	10012e32 <__aeabi_uidiv+0xce>
10012d72:	0a03      	lsrs	r3, r0, #8
10012d74:	428b      	cmp	r3, r1
10012d76:	d344      	bcc.n	10012e02 <__aeabi_uidiv+0x9e>
10012d78:	0b03      	lsrs	r3, r0, #12
10012d7a:	428b      	cmp	r3, r1
10012d7c:	d328      	bcc.n	10012dd0 <__aeabi_uidiv+0x6c>
10012d7e:	0c03      	lsrs	r3, r0, #16
10012d80:	428b      	cmp	r3, r1
10012d82:	d30d      	bcc.n	10012da0 <__aeabi_uidiv+0x3c>
10012d84:	22ff      	movs	r2, #255	; 0xff
10012d86:	0209      	lsls	r1, r1, #8
10012d88:	ba12      	rev	r2, r2
10012d8a:	0c03      	lsrs	r3, r0, #16
10012d8c:	428b      	cmp	r3, r1
10012d8e:	d302      	bcc.n	10012d96 <__aeabi_uidiv+0x32>
10012d90:	1212      	asrs	r2, r2, #8
10012d92:	0209      	lsls	r1, r1, #8
10012d94:	d065      	beq.n	10012e62 <__aeabi_uidiv+0xfe>
10012d96:	0b03      	lsrs	r3, r0, #12
10012d98:	428b      	cmp	r3, r1
10012d9a:	d319      	bcc.n	10012dd0 <__aeabi_uidiv+0x6c>
10012d9c:	e000      	b.n	10012da0 <__aeabi_uidiv+0x3c>
10012d9e:	0a09      	lsrs	r1, r1, #8
10012da0:	0bc3      	lsrs	r3, r0, #15
10012da2:	428b      	cmp	r3, r1
10012da4:	d301      	bcc.n	10012daa <__aeabi_uidiv+0x46>
10012da6:	03cb      	lsls	r3, r1, #15
10012da8:	1ac0      	subs	r0, r0, r3
10012daa:	4152      	adcs	r2, r2
10012dac:	0b83      	lsrs	r3, r0, #14
10012dae:	428b      	cmp	r3, r1
10012db0:	d301      	bcc.n	10012db6 <__aeabi_uidiv+0x52>
10012db2:	038b      	lsls	r3, r1, #14
10012db4:	1ac0      	subs	r0, r0, r3
10012db6:	4152      	adcs	r2, r2
10012db8:	0b43      	lsrs	r3, r0, #13
10012dba:	428b      	cmp	r3, r1
10012dbc:	d301      	bcc.n	10012dc2 <__aeabi_uidiv+0x5e>
10012dbe:	034b      	lsls	r3, r1, #13
10012dc0:	1ac0      	subs	r0, r0, r3
10012dc2:	4152      	adcs	r2, r2
10012dc4:	0b03      	lsrs	r3, r0, #12
10012dc6:	428b      	cmp	r3, r1
10012dc8:	d301      	bcc.n	10012dce <__aeabi_uidiv+0x6a>
10012dca:	030b      	lsls	r3, r1, #12
10012dcc:	1ac0      	subs	r0, r0, r3
10012dce:	4152      	adcs	r2, r2
10012dd0:	0ac3      	lsrs	r3, r0, #11
10012dd2:	428b      	cmp	r3, r1
10012dd4:	d301      	bcc.n	10012dda <__aeabi_uidiv+0x76>
10012dd6:	02cb      	lsls	r3, r1, #11
10012dd8:	1ac0      	subs	r0, r0, r3
10012dda:	4152      	adcs	r2, r2
10012ddc:	0a83      	lsrs	r3, r0, #10
10012dde:	428b      	cmp	r3, r1
10012de0:	d301      	bcc.n	10012de6 <__aeabi_uidiv+0x82>
10012de2:	028b      	lsls	r3, r1, #10
10012de4:	1ac0      	subs	r0, r0, r3
10012de6:	4152      	adcs	r2, r2
10012de8:	0a43      	lsrs	r3, r0, #9
10012dea:	428b      	cmp	r3, r1
10012dec:	d301      	bcc.n	10012df2 <__aeabi_uidiv+0x8e>
10012dee:	024b      	lsls	r3, r1, #9
10012df0:	1ac0      	subs	r0, r0, r3
10012df2:	4152      	adcs	r2, r2
10012df4:	0a03      	lsrs	r3, r0, #8
10012df6:	428b      	cmp	r3, r1
10012df8:	d301      	bcc.n	10012dfe <__aeabi_uidiv+0x9a>
10012dfa:	020b      	lsls	r3, r1, #8
10012dfc:	1ac0      	subs	r0, r0, r3
10012dfe:	4152      	adcs	r2, r2
10012e00:	d2cd      	bcs.n	10012d9e <__aeabi_uidiv+0x3a>
10012e02:	09c3      	lsrs	r3, r0, #7
10012e04:	428b      	cmp	r3, r1
10012e06:	d301      	bcc.n	10012e0c <__aeabi_uidiv+0xa8>
10012e08:	01cb      	lsls	r3, r1, #7
10012e0a:	1ac0      	subs	r0, r0, r3
10012e0c:	4152      	adcs	r2, r2
10012e0e:	0983      	lsrs	r3, r0, #6
10012e10:	428b      	cmp	r3, r1
10012e12:	d301      	bcc.n	10012e18 <__aeabi_uidiv+0xb4>
10012e14:	018b      	lsls	r3, r1, #6
10012e16:	1ac0      	subs	r0, r0, r3
10012e18:	4152      	adcs	r2, r2
10012e1a:	0943      	lsrs	r3, r0, #5
10012e1c:	428b      	cmp	r3, r1
10012e1e:	d301      	bcc.n	10012e24 <__aeabi_uidiv+0xc0>
10012e20:	014b      	lsls	r3, r1, #5
10012e22:	1ac0      	subs	r0, r0, r3
10012e24:	4152      	adcs	r2, r2
10012e26:	0903      	lsrs	r3, r0, #4
10012e28:	428b      	cmp	r3, r1
10012e2a:	d301      	bcc.n	10012e30 <__aeabi_uidiv+0xcc>
10012e2c:	010b      	lsls	r3, r1, #4
10012e2e:	1ac0      	subs	r0, r0, r3
10012e30:	4152      	adcs	r2, r2
10012e32:	08c3      	lsrs	r3, r0, #3
10012e34:	428b      	cmp	r3, r1
10012e36:	d301      	bcc.n	10012e3c <__aeabi_uidiv+0xd8>
10012e38:	00cb      	lsls	r3, r1, #3
10012e3a:	1ac0      	subs	r0, r0, r3
10012e3c:	4152      	adcs	r2, r2
10012e3e:	0883      	lsrs	r3, r0, #2
10012e40:	428b      	cmp	r3, r1
10012e42:	d301      	bcc.n	10012e48 <__aeabi_uidiv+0xe4>
10012e44:	008b      	lsls	r3, r1, #2
10012e46:	1ac0      	subs	r0, r0, r3
10012e48:	4152      	adcs	r2, r2
10012e4a:	0843      	lsrs	r3, r0, #1
10012e4c:	428b      	cmp	r3, r1
10012e4e:	d301      	bcc.n	10012e54 <__aeabi_uidiv+0xf0>
10012e50:	004b      	lsls	r3, r1, #1
10012e52:	1ac0      	subs	r0, r0, r3
10012e54:	4152      	adcs	r2, r2
10012e56:	1a41      	subs	r1, r0, r1
10012e58:	d200      	bcs.n	10012e5c <__aeabi_uidiv+0xf8>
10012e5a:	4601      	mov	r1, r0
10012e5c:	4152      	adcs	r2, r2
10012e5e:	4610      	mov	r0, r2
10012e60:	4770      	bx	lr
10012e62:	e7ff      	b.n	10012e64 <__aeabi_uidiv+0x100>
10012e64:	b501      	push	{r0, lr}
10012e66:	2000      	movs	r0, #0
10012e68:	f000 f8f0 	bl	1001304c <__aeabi_idiv0>
10012e6c:	bd02      	pop	{r1, pc}
10012e6e:	46c0      	nop			; (mov r8, r8)

10012e70 <__aeabi_uidivmod>:
10012e70:	2900      	cmp	r1, #0
10012e72:	d0f7      	beq.n	10012e64 <__aeabi_uidiv+0x100>
10012e74:	e776      	b.n	10012d64 <__aeabi_uidiv>
10012e76:	4770      	bx	lr

10012e78 <__aeabi_idiv>:
10012e78:	4603      	mov	r3, r0
10012e7a:	430b      	orrs	r3, r1
10012e7c:	d47f      	bmi.n	10012f7e <__aeabi_idiv+0x106>
10012e7e:	2200      	movs	r2, #0
10012e80:	0843      	lsrs	r3, r0, #1
10012e82:	428b      	cmp	r3, r1
10012e84:	d374      	bcc.n	10012f70 <__aeabi_idiv+0xf8>
10012e86:	0903      	lsrs	r3, r0, #4
10012e88:	428b      	cmp	r3, r1
10012e8a:	d35f      	bcc.n	10012f4c <__aeabi_idiv+0xd4>
10012e8c:	0a03      	lsrs	r3, r0, #8
10012e8e:	428b      	cmp	r3, r1
10012e90:	d344      	bcc.n	10012f1c <__aeabi_idiv+0xa4>
10012e92:	0b03      	lsrs	r3, r0, #12
10012e94:	428b      	cmp	r3, r1
10012e96:	d328      	bcc.n	10012eea <__aeabi_idiv+0x72>
10012e98:	0c03      	lsrs	r3, r0, #16
10012e9a:	428b      	cmp	r3, r1
10012e9c:	d30d      	bcc.n	10012eba <__aeabi_idiv+0x42>
10012e9e:	22ff      	movs	r2, #255	; 0xff
10012ea0:	0209      	lsls	r1, r1, #8
10012ea2:	ba12      	rev	r2, r2
10012ea4:	0c03      	lsrs	r3, r0, #16
10012ea6:	428b      	cmp	r3, r1
10012ea8:	d302      	bcc.n	10012eb0 <__aeabi_idiv+0x38>
10012eaa:	1212      	asrs	r2, r2, #8
10012eac:	0209      	lsls	r1, r1, #8
10012eae:	d065      	beq.n	10012f7c <__aeabi_idiv+0x104>
10012eb0:	0b03      	lsrs	r3, r0, #12
10012eb2:	428b      	cmp	r3, r1
10012eb4:	d319      	bcc.n	10012eea <__aeabi_idiv+0x72>
10012eb6:	e000      	b.n	10012eba <__aeabi_idiv+0x42>
10012eb8:	0a09      	lsrs	r1, r1, #8
10012eba:	0bc3      	lsrs	r3, r0, #15
10012ebc:	428b      	cmp	r3, r1
10012ebe:	d301      	bcc.n	10012ec4 <__aeabi_idiv+0x4c>
10012ec0:	03cb      	lsls	r3, r1, #15
10012ec2:	1ac0      	subs	r0, r0, r3
10012ec4:	4152      	adcs	r2, r2
10012ec6:	0b83      	lsrs	r3, r0, #14
10012ec8:	428b      	cmp	r3, r1
10012eca:	d301      	bcc.n	10012ed0 <__aeabi_idiv+0x58>
10012ecc:	038b      	lsls	r3, r1, #14
10012ece:	1ac0      	subs	r0, r0, r3
10012ed0:	4152      	adcs	r2, r2
10012ed2:	0b43      	lsrs	r3, r0, #13
10012ed4:	428b      	cmp	r3, r1
10012ed6:	d301      	bcc.n	10012edc <__aeabi_idiv+0x64>
10012ed8:	034b      	lsls	r3, r1, #13
10012eda:	1ac0      	subs	r0, r0, r3
10012edc:	4152      	adcs	r2, r2
10012ede:	0b03      	lsrs	r3, r0, #12
10012ee0:	428b      	cmp	r3, r1
10012ee2:	d301      	bcc.n	10012ee8 <__aeabi_idiv+0x70>
10012ee4:	030b      	lsls	r3, r1, #12
10012ee6:	1ac0      	subs	r0, r0, r3
10012ee8:	4152      	adcs	r2, r2
10012eea:	0ac3      	lsrs	r3, r0, #11
10012eec:	428b      	cmp	r3, r1
10012eee:	d301      	bcc.n	10012ef4 <__aeabi_idiv+0x7c>
10012ef0:	02cb      	lsls	r3, r1, #11
10012ef2:	1ac0      	subs	r0, r0, r3
10012ef4:	4152      	adcs	r2, r2
10012ef6:	0a83      	lsrs	r3, r0, #10
10012ef8:	428b      	cmp	r3, r1
10012efa:	d301      	bcc.n	10012f00 <__aeabi_idiv+0x88>
10012efc:	028b      	lsls	r3, r1, #10
10012efe:	1ac0      	subs	r0, r0, r3
10012f00:	4152      	adcs	r2, r2
10012f02:	0a43      	lsrs	r3, r0, #9
10012f04:	428b      	cmp	r3, r1
10012f06:	d301      	bcc.n	10012f0c <__aeabi_idiv+0x94>
10012f08:	024b      	lsls	r3, r1, #9
10012f0a:	1ac0      	subs	r0, r0, r3
10012f0c:	4152      	adcs	r2, r2
10012f0e:	0a03      	lsrs	r3, r0, #8
10012f10:	428b      	cmp	r3, r1
10012f12:	d301      	bcc.n	10012f18 <__aeabi_idiv+0xa0>
10012f14:	020b      	lsls	r3, r1, #8
10012f16:	1ac0      	subs	r0, r0, r3
10012f18:	4152      	adcs	r2, r2
10012f1a:	d2cd      	bcs.n	10012eb8 <__aeabi_idiv+0x40>
10012f1c:	09c3      	lsrs	r3, r0, #7
10012f1e:	428b      	cmp	r3, r1
10012f20:	d301      	bcc.n	10012f26 <__aeabi_idiv+0xae>
10012f22:	01cb      	lsls	r3, r1, #7
10012f24:	1ac0      	subs	r0, r0, r3
10012f26:	4152      	adcs	r2, r2
10012f28:	0983      	lsrs	r3, r0, #6
10012f2a:	428b      	cmp	r3, r1
10012f2c:	d301      	bcc.n	10012f32 <__aeabi_idiv+0xba>
10012f2e:	018b      	lsls	r3, r1, #6
10012f30:	1ac0      	subs	r0, r0, r3
10012f32:	4152      	adcs	r2, r2
10012f34:	0943      	lsrs	r3, r0, #5
10012f36:	428b      	cmp	r3, r1
10012f38:	d301      	bcc.n	10012f3e <__aeabi_idiv+0xc6>
10012f3a:	014b      	lsls	r3, r1, #5
10012f3c:	1ac0      	subs	r0, r0, r3
10012f3e:	4152      	adcs	r2, r2
10012f40:	0903      	lsrs	r3, r0, #4
10012f42:	428b      	cmp	r3, r1
10012f44:	d301      	bcc.n	10012f4a <__aeabi_idiv+0xd2>
10012f46:	010b      	lsls	r3, r1, #4
10012f48:	1ac0      	subs	r0, r0, r3
10012f4a:	4152      	adcs	r2, r2
10012f4c:	08c3      	lsrs	r3, r0, #3
10012f4e:	428b      	cmp	r3, r1
10012f50:	d301      	bcc.n	10012f56 <__aeabi_idiv+0xde>
10012f52:	00cb      	lsls	r3, r1, #3
10012f54:	1ac0      	subs	r0, r0, r3
10012f56:	4152      	adcs	r2, r2
10012f58:	0883      	lsrs	r3, r0, #2
10012f5a:	428b      	cmp	r3, r1
10012f5c:	d301      	bcc.n	10012f62 <__aeabi_idiv+0xea>
10012f5e:	008b      	lsls	r3, r1, #2
10012f60:	1ac0      	subs	r0, r0, r3
10012f62:	4152      	adcs	r2, r2
10012f64:	0843      	lsrs	r3, r0, #1
10012f66:	428b      	cmp	r3, r1
10012f68:	d301      	bcc.n	10012f6e <__aeabi_idiv+0xf6>
10012f6a:	004b      	lsls	r3, r1, #1
10012f6c:	1ac0      	subs	r0, r0, r3
10012f6e:	4152      	adcs	r2, r2
10012f70:	1a41      	subs	r1, r0, r1
10012f72:	d200      	bcs.n	10012f76 <__aeabi_idiv+0xfe>
10012f74:	4601      	mov	r1, r0
10012f76:	4152      	adcs	r2, r2
10012f78:	4610      	mov	r0, r2
10012f7a:	4770      	bx	lr
10012f7c:	e05d      	b.n	1001303a <__aeabi_idiv+0x1c2>
10012f7e:	0fca      	lsrs	r2, r1, #31
10012f80:	d000      	beq.n	10012f84 <__aeabi_idiv+0x10c>
10012f82:	4249      	negs	r1, r1
10012f84:	1003      	asrs	r3, r0, #32
10012f86:	d300      	bcc.n	10012f8a <__aeabi_idiv+0x112>
10012f88:	4240      	negs	r0, r0
10012f8a:	4053      	eors	r3, r2
10012f8c:	2200      	movs	r2, #0
10012f8e:	469c      	mov	ip, r3
10012f90:	0903      	lsrs	r3, r0, #4
10012f92:	428b      	cmp	r3, r1
10012f94:	d32d      	bcc.n	10012ff2 <__aeabi_idiv+0x17a>
10012f96:	0a03      	lsrs	r3, r0, #8
10012f98:	428b      	cmp	r3, r1
10012f9a:	d312      	bcc.n	10012fc2 <__aeabi_idiv+0x14a>
10012f9c:	22fc      	movs	r2, #252	; 0xfc
10012f9e:	0189      	lsls	r1, r1, #6
10012fa0:	ba12      	rev	r2, r2
10012fa2:	0a03      	lsrs	r3, r0, #8
10012fa4:	428b      	cmp	r3, r1
10012fa6:	d30c      	bcc.n	10012fc2 <__aeabi_idiv+0x14a>
10012fa8:	0189      	lsls	r1, r1, #6
10012faa:	1192      	asrs	r2, r2, #6
10012fac:	428b      	cmp	r3, r1
10012fae:	d308      	bcc.n	10012fc2 <__aeabi_idiv+0x14a>
10012fb0:	0189      	lsls	r1, r1, #6
10012fb2:	1192      	asrs	r2, r2, #6
10012fb4:	428b      	cmp	r3, r1
10012fb6:	d304      	bcc.n	10012fc2 <__aeabi_idiv+0x14a>
10012fb8:	0189      	lsls	r1, r1, #6
10012fba:	d03a      	beq.n	10013032 <__aeabi_idiv+0x1ba>
10012fbc:	1192      	asrs	r2, r2, #6
10012fbe:	e000      	b.n	10012fc2 <__aeabi_idiv+0x14a>
10012fc0:	0989      	lsrs	r1, r1, #6
10012fc2:	09c3      	lsrs	r3, r0, #7
10012fc4:	428b      	cmp	r3, r1
10012fc6:	d301      	bcc.n	10012fcc <__aeabi_idiv+0x154>
10012fc8:	01cb      	lsls	r3, r1, #7
10012fca:	1ac0      	subs	r0, r0, r3
10012fcc:	4152      	adcs	r2, r2
10012fce:	0983      	lsrs	r3, r0, #6
10012fd0:	428b      	cmp	r3, r1
10012fd2:	d301      	bcc.n	10012fd8 <__aeabi_idiv+0x160>
10012fd4:	018b      	lsls	r3, r1, #6
10012fd6:	1ac0      	subs	r0, r0, r3
10012fd8:	4152      	adcs	r2, r2
10012fda:	0943      	lsrs	r3, r0, #5
10012fdc:	428b      	cmp	r3, r1
10012fde:	d301      	bcc.n	10012fe4 <__aeabi_idiv+0x16c>
10012fe0:	014b      	lsls	r3, r1, #5
10012fe2:	1ac0      	subs	r0, r0, r3
10012fe4:	4152      	adcs	r2, r2
10012fe6:	0903      	lsrs	r3, r0, #4
10012fe8:	428b      	cmp	r3, r1
10012fea:	d301      	bcc.n	10012ff0 <__aeabi_idiv+0x178>
10012fec:	010b      	lsls	r3, r1, #4
10012fee:	1ac0      	subs	r0, r0, r3
10012ff0:	4152      	adcs	r2, r2
10012ff2:	08c3      	lsrs	r3, r0, #3
10012ff4:	428b      	cmp	r3, r1
10012ff6:	d301      	bcc.n	10012ffc <__aeabi_idiv+0x184>
10012ff8:	00cb      	lsls	r3, r1, #3
10012ffa:	1ac0      	subs	r0, r0, r3
10012ffc:	4152      	adcs	r2, r2
10012ffe:	0883      	lsrs	r3, r0, #2
10013000:	428b      	cmp	r3, r1
10013002:	d301      	bcc.n	10013008 <__aeabi_idiv+0x190>
10013004:	008b      	lsls	r3, r1, #2
10013006:	1ac0      	subs	r0, r0, r3
10013008:	4152      	adcs	r2, r2
1001300a:	d2d9      	bcs.n	10012fc0 <__aeabi_idiv+0x148>
1001300c:	0843      	lsrs	r3, r0, #1
1001300e:	428b      	cmp	r3, r1
10013010:	d301      	bcc.n	10013016 <__aeabi_idiv+0x19e>
10013012:	004b      	lsls	r3, r1, #1
10013014:	1ac0      	subs	r0, r0, r3
10013016:	4152      	adcs	r2, r2
10013018:	1a41      	subs	r1, r0, r1
1001301a:	d200      	bcs.n	1001301e <__aeabi_idiv+0x1a6>
1001301c:	4601      	mov	r1, r0
1001301e:	4663      	mov	r3, ip
10013020:	4152      	adcs	r2, r2
10013022:	105b      	asrs	r3, r3, #1
10013024:	4610      	mov	r0, r2
10013026:	d301      	bcc.n	1001302c <__aeabi_idiv+0x1b4>
10013028:	4240      	negs	r0, r0
1001302a:	2b00      	cmp	r3, #0
1001302c:	d500      	bpl.n	10013030 <__aeabi_idiv+0x1b8>
1001302e:	4249      	negs	r1, r1
10013030:	4770      	bx	lr
10013032:	4663      	mov	r3, ip
10013034:	105b      	asrs	r3, r3, #1
10013036:	d300      	bcc.n	1001303a <__aeabi_idiv+0x1c2>
10013038:	4240      	negs	r0, r0
1001303a:	b501      	push	{r0, lr}
1001303c:	2000      	movs	r0, #0
1001303e:	f000 f805 	bl	1001304c <__aeabi_idiv0>
10013042:	bd02      	pop	{r1, pc}

10013044 <__aeabi_idivmod>:
10013044:	2900      	cmp	r1, #0
10013046:	d0f8      	beq.n	1001303a <__aeabi_idiv+0x1c2>
10013048:	e716      	b.n	10012e78 <__aeabi_idiv>
1001304a:	4770      	bx	lr

1001304c <__aeabi_idiv0>:
1001304c:	4770      	bx	lr
1001304e:	46c0      	nop			; (mov r8, r8)

10013050 <__aeabi_cdrcmple>:
10013050:	4684      	mov	ip, r0
10013052:	1c10      	adds	r0, r2, #0
10013054:	4662      	mov	r2, ip
10013056:	468c      	mov	ip, r1
10013058:	1c19      	adds	r1, r3, #0
1001305a:	4663      	mov	r3, ip
1001305c:	e000      	b.n	10013060 <__aeabi_cdcmpeq>
1001305e:	46c0      	nop			; (mov r8, r8)

10013060 <__aeabi_cdcmpeq>:
10013060:	b51f      	push	{r0, r1, r2, r3, r4, lr}
10013062:	f000 fff5 	bl	10014050 <__ledf2>
10013066:	2800      	cmp	r0, #0
10013068:	d401      	bmi.n	1001306e <__aeabi_cdcmpeq+0xe>
1001306a:	2100      	movs	r1, #0
1001306c:	42c8      	cmn	r0, r1
1001306e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

10013070 <__aeabi_dcmpeq>:
10013070:	b510      	push	{r4, lr}
10013072:	f000 ff49 	bl	10013f08 <__eqdf2>
10013076:	4240      	negs	r0, r0
10013078:	3001      	adds	r0, #1
1001307a:	bd10      	pop	{r4, pc}

1001307c <__aeabi_dcmplt>:
1001307c:	b510      	push	{r4, lr}
1001307e:	f000 ffe7 	bl	10014050 <__ledf2>
10013082:	2800      	cmp	r0, #0
10013084:	db01      	blt.n	1001308a <__aeabi_dcmplt+0xe>
10013086:	2000      	movs	r0, #0
10013088:	bd10      	pop	{r4, pc}
1001308a:	2001      	movs	r0, #1
1001308c:	bd10      	pop	{r4, pc}
1001308e:	46c0      	nop			; (mov r8, r8)

10013090 <__aeabi_dcmple>:
10013090:	b510      	push	{r4, lr}
10013092:	f000 ffdd 	bl	10014050 <__ledf2>
10013096:	2800      	cmp	r0, #0
10013098:	dd01      	ble.n	1001309e <__aeabi_dcmple+0xe>
1001309a:	2000      	movs	r0, #0
1001309c:	bd10      	pop	{r4, pc}
1001309e:	2001      	movs	r0, #1
100130a0:	bd10      	pop	{r4, pc}
100130a2:	46c0      	nop			; (mov r8, r8)

100130a4 <__aeabi_dcmpgt>:
100130a4:	b510      	push	{r4, lr}
100130a6:	f000 ff6f 	bl	10013f88 <__gedf2>
100130aa:	2800      	cmp	r0, #0
100130ac:	dc01      	bgt.n	100130b2 <__aeabi_dcmpgt+0xe>
100130ae:	2000      	movs	r0, #0
100130b0:	bd10      	pop	{r4, pc}
100130b2:	2001      	movs	r0, #1
100130b4:	bd10      	pop	{r4, pc}
100130b6:	46c0      	nop			; (mov r8, r8)

100130b8 <__aeabi_dcmpge>:
100130b8:	b510      	push	{r4, lr}
100130ba:	f000 ff65 	bl	10013f88 <__gedf2>
100130be:	2800      	cmp	r0, #0
100130c0:	da01      	bge.n	100130c6 <__aeabi_dcmpge+0xe>
100130c2:	2000      	movs	r0, #0
100130c4:	bd10      	pop	{r4, pc}
100130c6:	2001      	movs	r0, #1
100130c8:	bd10      	pop	{r4, pc}
100130ca:	46c0      	nop			; (mov r8, r8)

100130cc <__aeabi_cfrcmple>:
100130cc:	4684      	mov	ip, r0
100130ce:	1c08      	adds	r0, r1, #0
100130d0:	4661      	mov	r1, ip
100130d2:	e7ff      	b.n	100130d4 <__aeabi_cfcmpeq>

100130d4 <__aeabi_cfcmpeq>:
100130d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
100130d6:	f000 fb91 	bl	100137fc <__lesf2>
100130da:	2800      	cmp	r0, #0
100130dc:	d401      	bmi.n	100130e2 <__aeabi_cfcmpeq+0xe>
100130de:	2100      	movs	r1, #0
100130e0:	42c8      	cmn	r0, r1
100130e2:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

100130e4 <__aeabi_fcmpeq>:
100130e4:	b510      	push	{r4, lr}
100130e6:	f000 fb1d 	bl	10013724 <__eqsf2>
100130ea:	4240      	negs	r0, r0
100130ec:	3001      	adds	r0, #1
100130ee:	bd10      	pop	{r4, pc}

100130f0 <__aeabi_fcmplt>:
100130f0:	b510      	push	{r4, lr}
100130f2:	f000 fb83 	bl	100137fc <__lesf2>
100130f6:	2800      	cmp	r0, #0
100130f8:	db01      	blt.n	100130fe <__aeabi_fcmplt+0xe>
100130fa:	2000      	movs	r0, #0
100130fc:	bd10      	pop	{r4, pc}
100130fe:	2001      	movs	r0, #1
10013100:	bd10      	pop	{r4, pc}
10013102:	46c0      	nop			; (mov r8, r8)

10013104 <__aeabi_fcmple>:
10013104:	b510      	push	{r4, lr}
10013106:	f000 fb79 	bl	100137fc <__lesf2>
1001310a:	2800      	cmp	r0, #0
1001310c:	dd01      	ble.n	10013112 <__aeabi_fcmple+0xe>
1001310e:	2000      	movs	r0, #0
10013110:	bd10      	pop	{r4, pc}
10013112:	2001      	movs	r0, #1
10013114:	bd10      	pop	{r4, pc}
10013116:	46c0      	nop			; (mov r8, r8)

10013118 <__aeabi_fcmpgt>:
10013118:	b510      	push	{r4, lr}
1001311a:	f000 fb2b 	bl	10013774 <__gesf2>
1001311e:	2800      	cmp	r0, #0
10013120:	dc01      	bgt.n	10013126 <__aeabi_fcmpgt+0xe>
10013122:	2000      	movs	r0, #0
10013124:	bd10      	pop	{r4, pc}
10013126:	2001      	movs	r0, #1
10013128:	bd10      	pop	{r4, pc}
1001312a:	46c0      	nop			; (mov r8, r8)

1001312c <__aeabi_fcmpge>:
1001312c:	b510      	push	{r4, lr}
1001312e:	f000 fb21 	bl	10013774 <__gesf2>
10013132:	2800      	cmp	r0, #0
10013134:	da01      	bge.n	1001313a <__aeabi_fcmpge+0xe>
10013136:	2000      	movs	r0, #0
10013138:	bd10      	pop	{r4, pc}
1001313a:	2001      	movs	r0, #1
1001313c:	bd10      	pop	{r4, pc}
1001313e:	46c0      	nop			; (mov r8, r8)

10013140 <__aeabi_lmul>:
10013140:	b5f0      	push	{r4, r5, r6, r7, lr}
10013142:	464f      	mov	r7, r9
10013144:	4646      	mov	r6, r8
10013146:	b4c0      	push	{r6, r7}
10013148:	0416      	lsls	r6, r2, #16
1001314a:	0c36      	lsrs	r6, r6, #16
1001314c:	4699      	mov	r9, r3
1001314e:	0033      	movs	r3, r6
10013150:	0405      	lsls	r5, r0, #16
10013152:	0c2c      	lsrs	r4, r5, #16
10013154:	0c07      	lsrs	r7, r0, #16
10013156:	0c15      	lsrs	r5, r2, #16
10013158:	4363      	muls	r3, r4
1001315a:	437e      	muls	r6, r7
1001315c:	436f      	muls	r7, r5
1001315e:	4365      	muls	r5, r4
10013160:	0c1c      	lsrs	r4, r3, #16
10013162:	19ad      	adds	r5, r5, r6
10013164:	1964      	adds	r4, r4, r5
10013166:	469c      	mov	ip, r3
10013168:	42a6      	cmp	r6, r4
1001316a:	d903      	bls.n	10013174 <__aeabi_lmul+0x34>
1001316c:	2380      	movs	r3, #128	; 0x80
1001316e:	025b      	lsls	r3, r3, #9
10013170:	4698      	mov	r8, r3
10013172:	4447      	add	r7, r8
10013174:	4663      	mov	r3, ip
10013176:	0c25      	lsrs	r5, r4, #16
10013178:	19ef      	adds	r7, r5, r7
1001317a:	041d      	lsls	r5, r3, #16
1001317c:	464b      	mov	r3, r9
1001317e:	434a      	muls	r2, r1
10013180:	4343      	muls	r3, r0
10013182:	0c2d      	lsrs	r5, r5, #16
10013184:	0424      	lsls	r4, r4, #16
10013186:	1964      	adds	r4, r4, r5
10013188:	1899      	adds	r1, r3, r2
1001318a:	19c9      	adds	r1, r1, r7
1001318c:	0020      	movs	r0, r4
1001318e:	bc0c      	pop	{r2, r3}
10013190:	4690      	mov	r8, r2
10013192:	4699      	mov	r9, r3
10013194:	bdf0      	pop	{r4, r5, r6, r7, pc}
10013196:	46c0      	nop			; (mov r8, r8)

10013198 <__aeabi_f2uiz>:
10013198:	219e      	movs	r1, #158	; 0x9e
1001319a:	b510      	push	{r4, lr}
1001319c:	05c9      	lsls	r1, r1, #23
1001319e:	1c04      	adds	r4, r0, #0
100131a0:	f7ff ffc4 	bl	1001312c <__aeabi_fcmpge>
100131a4:	2800      	cmp	r0, #0
100131a6:	d103      	bne.n	100131b0 <__aeabi_f2uiz+0x18>
100131a8:	1c20      	adds	r0, r4, #0
100131aa:	f000 fe05 	bl	10013db8 <__aeabi_f2iz>
100131ae:	bd10      	pop	{r4, pc}
100131b0:	219e      	movs	r1, #158	; 0x9e
100131b2:	1c20      	adds	r0, r4, #0
100131b4:	05c9      	lsls	r1, r1, #23
100131b6:	f000 fc79 	bl	10013aac <__aeabi_fsub>
100131ba:	f000 fdfd 	bl	10013db8 <__aeabi_f2iz>
100131be:	2380      	movs	r3, #128	; 0x80
100131c0:	061b      	lsls	r3, r3, #24
100131c2:	469c      	mov	ip, r3
100131c4:	4460      	add	r0, ip
100131c6:	e7f2      	b.n	100131ae <__aeabi_f2uiz+0x16>

100131c8 <__aeabi_d2uiz>:
100131c8:	b570      	push	{r4, r5, r6, lr}
100131ca:	2200      	movs	r2, #0
100131cc:	4b0c      	ldr	r3, [pc, #48]	; (10013200 <__aeabi_d2uiz+0x38>)
100131ce:	0004      	movs	r4, r0
100131d0:	000d      	movs	r5, r1
100131d2:	f7ff ff71 	bl	100130b8 <__aeabi_dcmpge>
100131d6:	2800      	cmp	r0, #0
100131d8:	d104      	bne.n	100131e4 <__aeabi_d2uiz+0x1c>
100131da:	0020      	movs	r0, r4
100131dc:	0029      	movs	r1, r5
100131de:	f001 fd6f 	bl	10014cc0 <__aeabi_d2iz>
100131e2:	bd70      	pop	{r4, r5, r6, pc}
100131e4:	4b06      	ldr	r3, [pc, #24]	; (10013200 <__aeabi_d2uiz+0x38>)
100131e6:	2200      	movs	r2, #0
100131e8:	0020      	movs	r0, r4
100131ea:	0029      	movs	r1, r5
100131ec:	f001 fa14 	bl	10014618 <__aeabi_dsub>
100131f0:	f001 fd66 	bl	10014cc0 <__aeabi_d2iz>
100131f4:	2380      	movs	r3, #128	; 0x80
100131f6:	061b      	lsls	r3, r3, #24
100131f8:	469c      	mov	ip, r3
100131fa:	4460      	add	r0, ip
100131fc:	e7f1      	b.n	100131e2 <__aeabi_d2uiz+0x1a>
100131fe:	46c0      	nop			; (mov r8, r8)
10013200:	41e00000 	.word	0x41e00000

10013204 <__aeabi_fadd>:
10013204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10013206:	024a      	lsls	r2, r1, #9
10013208:	0243      	lsls	r3, r0, #9
1001320a:	0044      	lsls	r4, r0, #1
1001320c:	004e      	lsls	r6, r1, #1
1001320e:	0fc5      	lsrs	r5, r0, #31
10013210:	0e24      	lsrs	r4, r4, #24
10013212:	0028      	movs	r0, r5
10013214:	099b      	lsrs	r3, r3, #6
10013216:	0e36      	lsrs	r6, r6, #24
10013218:	0fc9      	lsrs	r1, r1, #31
1001321a:	0992      	lsrs	r2, r2, #6
1001321c:	428d      	cmp	r5, r1
1001321e:	d059      	beq.n	100132d4 <__aeabi_fadd+0xd0>
10013220:	1ba0      	subs	r0, r4, r6
10013222:	2800      	cmp	r0, #0
10013224:	dc00      	bgt.n	10013228 <__aeabi_fadd+0x24>
10013226:	e08d      	b.n	10013344 <__aeabi_fadd+0x140>
10013228:	2e00      	cmp	r6, #0
1001322a:	d11a      	bne.n	10013262 <__aeabi_fadd+0x5e>
1001322c:	2a00      	cmp	r2, #0
1001322e:	d000      	beq.n	10013232 <__aeabi_fadd+0x2e>
10013230:	e079      	b.n	10013326 <__aeabi_fadd+0x122>
10013232:	075a      	lsls	r2, r3, #29
10013234:	d004      	beq.n	10013240 <__aeabi_fadd+0x3c>
10013236:	220f      	movs	r2, #15
10013238:	401a      	ands	r2, r3
1001323a:	2a04      	cmp	r2, #4
1001323c:	d000      	beq.n	10013240 <__aeabi_fadd+0x3c>
1001323e:	3304      	adds	r3, #4
10013240:	015a      	lsls	r2, r3, #5
10013242:	d538      	bpl.n	100132b6 <__aeabi_fadd+0xb2>
10013244:	3401      	adds	r4, #1
10013246:	2cff      	cmp	r4, #255	; 0xff
10013248:	d100      	bne.n	1001324c <__aeabi_fadd+0x48>
1001324a:	e089      	b.n	10013360 <__aeabi_fadd+0x15c>
1001324c:	0028      	movs	r0, r5
1001324e:	019b      	lsls	r3, r3, #6
10013250:	0a5b      	lsrs	r3, r3, #9
10013252:	b2e4      	uxtb	r4, r4
10013254:	025b      	lsls	r3, r3, #9
10013256:	05e4      	lsls	r4, r4, #23
10013258:	0a5b      	lsrs	r3, r3, #9
1001325a:	4323      	orrs	r3, r4
1001325c:	07c0      	lsls	r0, r0, #31
1001325e:	4318      	orrs	r0, r3
10013260:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10013262:	2cff      	cmp	r4, #255	; 0xff
10013264:	d0e5      	beq.n	10013232 <__aeabi_fadd+0x2e>
10013266:	2180      	movs	r1, #128	; 0x80
10013268:	04c9      	lsls	r1, r1, #19
1001326a:	430a      	orrs	r2, r1
1001326c:	281b      	cmp	r0, #27
1001326e:	dd00      	ble.n	10013272 <__aeabi_fadd+0x6e>
10013270:	e089      	b.n	10013386 <__aeabi_fadd+0x182>
10013272:	0016      	movs	r6, r2
10013274:	2120      	movs	r1, #32
10013276:	40c6      	lsrs	r6, r0
10013278:	1a08      	subs	r0, r1, r0
1001327a:	4082      	lsls	r2, r0
1001327c:	1e51      	subs	r1, r2, #1
1001327e:	418a      	sbcs	r2, r1
10013280:	4332      	orrs	r2, r6
10013282:	1a9b      	subs	r3, r3, r2
10013284:	015a      	lsls	r2, r3, #5
10013286:	d514      	bpl.n	100132b2 <__aeabi_fadd+0xae>
10013288:	019b      	lsls	r3, r3, #6
1001328a:	099e      	lsrs	r6, r3, #6
1001328c:	0030      	movs	r0, r6
1001328e:	f001 fd85 	bl	10014d9c <__clzsi2>
10013292:	3805      	subs	r0, #5
10013294:	4086      	lsls	r6, r0
10013296:	4284      	cmp	r4, r0
10013298:	dc65      	bgt.n	10013366 <__aeabi_fadd+0x162>
1001329a:	1b04      	subs	r4, r0, r4
1001329c:	0033      	movs	r3, r6
1001329e:	2020      	movs	r0, #32
100132a0:	3401      	adds	r4, #1
100132a2:	40e3      	lsrs	r3, r4
100132a4:	1b04      	subs	r4, r0, r4
100132a6:	40a6      	lsls	r6, r4
100132a8:	1e72      	subs	r2, r6, #1
100132aa:	4196      	sbcs	r6, r2
100132ac:	2400      	movs	r4, #0
100132ae:	4333      	orrs	r3, r6
100132b0:	e7bf      	b.n	10013232 <__aeabi_fadd+0x2e>
100132b2:	075a      	lsls	r2, r3, #29
100132b4:	d1bf      	bne.n	10013236 <__aeabi_fadd+0x32>
100132b6:	08df      	lsrs	r7, r3, #3
100132b8:	0028      	movs	r0, r5
100132ba:	2cff      	cmp	r4, #255	; 0xff
100132bc:	d12f      	bne.n	1001331e <__aeabi_fadd+0x11a>
100132be:	2f00      	cmp	r7, #0
100132c0:	d100      	bne.n	100132c4 <__aeabi_fadd+0xc0>
100132c2:	e087      	b.n	100133d4 <__aeabi_fadd+0x1d0>
100132c4:	2280      	movs	r2, #128	; 0x80
100132c6:	03d2      	lsls	r2, r2, #15
100132c8:	0013      	movs	r3, r2
100132ca:	433b      	orrs	r3, r7
100132cc:	025b      	lsls	r3, r3, #9
100132ce:	0a5b      	lsrs	r3, r3, #9
100132d0:	24ff      	movs	r4, #255	; 0xff
100132d2:	e7bf      	b.n	10013254 <__aeabi_fadd+0x50>
100132d4:	1ba1      	subs	r1, r4, r6
100132d6:	2900      	cmp	r1, #0
100132d8:	dd49      	ble.n	1001336e <__aeabi_fadd+0x16a>
100132da:	2e00      	cmp	r6, #0
100132dc:	d029      	beq.n	10013332 <__aeabi_fadd+0x12e>
100132de:	2cff      	cmp	r4, #255	; 0xff
100132e0:	d0a7      	beq.n	10013232 <__aeabi_fadd+0x2e>
100132e2:	2680      	movs	r6, #128	; 0x80
100132e4:	04f6      	lsls	r6, r6, #19
100132e6:	4332      	orrs	r2, r6
100132e8:	291b      	cmp	r1, #27
100132ea:	dd00      	ble.n	100132ee <__aeabi_fadd+0xea>
100132ec:	e08d      	b.n	1001340a <__aeabi_fadd+0x206>
100132ee:	0017      	movs	r7, r2
100132f0:	2620      	movs	r6, #32
100132f2:	40cf      	lsrs	r7, r1
100132f4:	1a71      	subs	r1, r6, r1
100132f6:	408a      	lsls	r2, r1
100132f8:	1e51      	subs	r1, r2, #1
100132fa:	418a      	sbcs	r2, r1
100132fc:	433a      	orrs	r2, r7
100132fe:	189b      	adds	r3, r3, r2
10013300:	015a      	lsls	r2, r3, #5
10013302:	d5d6      	bpl.n	100132b2 <__aeabi_fadd+0xae>
10013304:	3401      	adds	r4, #1
10013306:	2cff      	cmp	r4, #255	; 0xff
10013308:	d064      	beq.n	100133d4 <__aeabi_fadd+0x1d0>
1001330a:	2201      	movs	r2, #1
1001330c:	4976      	ldr	r1, [pc, #472]	; (100134e8 <__aeabi_fadd+0x2e4>)
1001330e:	401a      	ands	r2, r3
10013310:	085b      	lsrs	r3, r3, #1
10013312:	400b      	ands	r3, r1
10013314:	4313      	orrs	r3, r2
10013316:	e78c      	b.n	10013232 <__aeabi_fadd+0x2e>
10013318:	1e03      	subs	r3, r0, #0
1001331a:	d1ca      	bne.n	100132b2 <__aeabi_fadd+0xae>
1001331c:	2000      	movs	r0, #0
1001331e:	027b      	lsls	r3, r7, #9
10013320:	0a5b      	lsrs	r3, r3, #9
10013322:	b2e4      	uxtb	r4, r4
10013324:	e796      	b.n	10013254 <__aeabi_fadd+0x50>
10013326:	3801      	subs	r0, #1
10013328:	2800      	cmp	r0, #0
1001332a:	d0aa      	beq.n	10013282 <__aeabi_fadd+0x7e>
1001332c:	2cff      	cmp	r4, #255	; 0xff
1001332e:	d19d      	bne.n	1001326c <__aeabi_fadd+0x68>
10013330:	e77f      	b.n	10013232 <__aeabi_fadd+0x2e>
10013332:	2a00      	cmp	r2, #0
10013334:	d100      	bne.n	10013338 <__aeabi_fadd+0x134>
10013336:	e77c      	b.n	10013232 <__aeabi_fadd+0x2e>
10013338:	3901      	subs	r1, #1
1001333a:	2900      	cmp	r1, #0
1001333c:	d0df      	beq.n	100132fe <__aeabi_fadd+0xfa>
1001333e:	2cff      	cmp	r4, #255	; 0xff
10013340:	d1d2      	bne.n	100132e8 <__aeabi_fadd+0xe4>
10013342:	e776      	b.n	10013232 <__aeabi_fadd+0x2e>
10013344:	2800      	cmp	r0, #0
10013346:	d120      	bne.n	1001338a <__aeabi_fadd+0x186>
10013348:	1c60      	adds	r0, r4, #1
1001334a:	b2c0      	uxtb	r0, r0
1001334c:	2801      	cmp	r0, #1
1001334e:	dd53      	ble.n	100133f8 <__aeabi_fadd+0x1f4>
10013350:	2780      	movs	r7, #128	; 0x80
10013352:	1a9e      	subs	r6, r3, r2
10013354:	04ff      	lsls	r7, r7, #19
10013356:	4037      	ands	r7, r6
10013358:	d02f      	beq.n	100133ba <__aeabi_fadd+0x1b6>
1001335a:	1ad6      	subs	r6, r2, r3
1001335c:	000d      	movs	r5, r1
1001335e:	e795      	b.n	1001328c <__aeabi_fadd+0x88>
10013360:	0028      	movs	r0, r5
10013362:	2300      	movs	r3, #0
10013364:	e776      	b.n	10013254 <__aeabi_fadd+0x50>
10013366:	4b61      	ldr	r3, [pc, #388]	; (100134ec <__aeabi_fadd+0x2e8>)
10013368:	1a24      	subs	r4, r4, r0
1001336a:	4033      	ands	r3, r6
1001336c:	e761      	b.n	10013232 <__aeabi_fadd+0x2e>
1001336e:	2900      	cmp	r1, #0
10013370:	d14d      	bne.n	1001340e <__aeabi_fadd+0x20a>
10013372:	1c61      	adds	r1, r4, #1
10013374:	b2ce      	uxtb	r6, r1
10013376:	2e01      	cmp	r6, #1
10013378:	dd2f      	ble.n	100133da <__aeabi_fadd+0x1d6>
1001337a:	29ff      	cmp	r1, #255	; 0xff
1001337c:	d02a      	beq.n	100133d4 <__aeabi_fadd+0x1d0>
1001337e:	189b      	adds	r3, r3, r2
10013380:	085b      	lsrs	r3, r3, #1
10013382:	000c      	movs	r4, r1
10013384:	e755      	b.n	10013232 <__aeabi_fadd+0x2e>
10013386:	2201      	movs	r2, #1
10013388:	e77b      	b.n	10013282 <__aeabi_fadd+0x7e>
1001338a:	2c00      	cmp	r4, #0
1001338c:	d11b      	bne.n	100133c6 <__aeabi_fadd+0x1c2>
1001338e:	2b00      	cmp	r3, #0
10013390:	d05b      	beq.n	1001344a <__aeabi_fadd+0x246>
10013392:	43c0      	mvns	r0, r0
10013394:	2800      	cmp	r0, #0
10013396:	d00c      	beq.n	100133b2 <__aeabi_fadd+0x1ae>
10013398:	2eff      	cmp	r6, #255	; 0xff
1001339a:	d07e      	beq.n	1001349a <__aeabi_fadd+0x296>
1001339c:	281b      	cmp	r0, #27
1001339e:	dd00      	ble.n	100133a2 <__aeabi_fadd+0x19e>
100133a0:	e092      	b.n	100134c8 <__aeabi_fadd+0x2c4>
100133a2:	001d      	movs	r5, r3
100133a4:	2420      	movs	r4, #32
100133a6:	40c5      	lsrs	r5, r0
100133a8:	1a20      	subs	r0, r4, r0
100133aa:	4083      	lsls	r3, r0
100133ac:	1e58      	subs	r0, r3, #1
100133ae:	4183      	sbcs	r3, r0
100133b0:	432b      	orrs	r3, r5
100133b2:	1ad3      	subs	r3, r2, r3
100133b4:	0034      	movs	r4, r6
100133b6:	000d      	movs	r5, r1
100133b8:	e764      	b.n	10013284 <__aeabi_fadd+0x80>
100133ba:	2e00      	cmp	r6, #0
100133bc:	d000      	beq.n	100133c0 <__aeabi_fadd+0x1bc>
100133be:	e765      	b.n	1001328c <__aeabi_fadd+0x88>
100133c0:	2000      	movs	r0, #0
100133c2:	2400      	movs	r4, #0
100133c4:	e7ab      	b.n	1001331e <__aeabi_fadd+0x11a>
100133c6:	2eff      	cmp	r6, #255	; 0xff
100133c8:	d067      	beq.n	1001349a <__aeabi_fadd+0x296>
100133ca:	2480      	movs	r4, #128	; 0x80
100133cc:	04e4      	lsls	r4, r4, #19
100133ce:	4240      	negs	r0, r0
100133d0:	4323      	orrs	r3, r4
100133d2:	e7e3      	b.n	1001339c <__aeabi_fadd+0x198>
100133d4:	24ff      	movs	r4, #255	; 0xff
100133d6:	2300      	movs	r3, #0
100133d8:	e73c      	b.n	10013254 <__aeabi_fadd+0x50>
100133da:	2c00      	cmp	r4, #0
100133dc:	d161      	bne.n	100134a2 <__aeabi_fadd+0x29e>
100133de:	2b00      	cmp	r3, #0
100133e0:	d07e      	beq.n	100134e0 <__aeabi_fadd+0x2dc>
100133e2:	2a00      	cmp	r2, #0
100133e4:	d100      	bne.n	100133e8 <__aeabi_fadd+0x1e4>
100133e6:	e724      	b.n	10013232 <__aeabi_fadd+0x2e>
100133e8:	189b      	adds	r3, r3, r2
100133ea:	015a      	lsls	r2, r3, #5
100133ec:	d400      	bmi.n	100133f0 <__aeabi_fadd+0x1ec>
100133ee:	e760      	b.n	100132b2 <__aeabi_fadd+0xae>
100133f0:	4a3e      	ldr	r2, [pc, #248]	; (100134ec <__aeabi_fadd+0x2e8>)
100133f2:	000c      	movs	r4, r1
100133f4:	4013      	ands	r3, r2
100133f6:	e71c      	b.n	10013232 <__aeabi_fadd+0x2e>
100133f8:	2c00      	cmp	r4, #0
100133fa:	d11e      	bne.n	1001343a <__aeabi_fadd+0x236>
100133fc:	2b00      	cmp	r3, #0
100133fe:	d12f      	bne.n	10013460 <__aeabi_fadd+0x25c>
10013400:	2a00      	cmp	r2, #0
10013402:	d066      	beq.n	100134d2 <__aeabi_fadd+0x2ce>
10013404:	0013      	movs	r3, r2
10013406:	000d      	movs	r5, r1
10013408:	e713      	b.n	10013232 <__aeabi_fadd+0x2e>
1001340a:	2201      	movs	r2, #1
1001340c:	e777      	b.n	100132fe <__aeabi_fadd+0xfa>
1001340e:	2c00      	cmp	r4, #0
10013410:	d11f      	bne.n	10013452 <__aeabi_fadd+0x24e>
10013412:	2b00      	cmp	r3, #0
10013414:	d05a      	beq.n	100134cc <__aeabi_fadd+0x2c8>
10013416:	43c9      	mvns	r1, r1
10013418:	2900      	cmp	r1, #0
1001341a:	d00b      	beq.n	10013434 <__aeabi_fadd+0x230>
1001341c:	2eff      	cmp	r6, #255	; 0xff
1001341e:	d050      	beq.n	100134c2 <__aeabi_fadd+0x2be>
10013420:	291b      	cmp	r1, #27
10013422:	dc5f      	bgt.n	100134e4 <__aeabi_fadd+0x2e0>
10013424:	001f      	movs	r7, r3
10013426:	2420      	movs	r4, #32
10013428:	40cf      	lsrs	r7, r1
1001342a:	1a61      	subs	r1, r4, r1
1001342c:	408b      	lsls	r3, r1
1001342e:	1e59      	subs	r1, r3, #1
10013430:	418b      	sbcs	r3, r1
10013432:	433b      	orrs	r3, r7
10013434:	189b      	adds	r3, r3, r2
10013436:	0034      	movs	r4, r6
10013438:	e762      	b.n	10013300 <__aeabi_fadd+0xfc>
1001343a:	2b00      	cmp	r3, #0
1001343c:	d11c      	bne.n	10013478 <__aeabi_fadd+0x274>
1001343e:	2a00      	cmp	r2, #0
10013440:	d04a      	beq.n	100134d8 <__aeabi_fadd+0x2d4>
10013442:	0013      	movs	r3, r2
10013444:	000d      	movs	r5, r1
10013446:	24ff      	movs	r4, #255	; 0xff
10013448:	e6f3      	b.n	10013232 <__aeabi_fadd+0x2e>
1001344a:	0013      	movs	r3, r2
1001344c:	0034      	movs	r4, r6
1001344e:	000d      	movs	r5, r1
10013450:	e6ef      	b.n	10013232 <__aeabi_fadd+0x2e>
10013452:	2eff      	cmp	r6, #255	; 0xff
10013454:	d035      	beq.n	100134c2 <__aeabi_fadd+0x2be>
10013456:	2480      	movs	r4, #128	; 0x80
10013458:	04e4      	lsls	r4, r4, #19
1001345a:	4249      	negs	r1, r1
1001345c:	4323      	orrs	r3, r4
1001345e:	e7df      	b.n	10013420 <__aeabi_fadd+0x21c>
10013460:	2a00      	cmp	r2, #0
10013462:	d100      	bne.n	10013466 <__aeabi_fadd+0x262>
10013464:	e6e5      	b.n	10013232 <__aeabi_fadd+0x2e>
10013466:	2780      	movs	r7, #128	; 0x80
10013468:	1a98      	subs	r0, r3, r2
1001346a:	04ff      	lsls	r7, r7, #19
1001346c:	4007      	ands	r7, r0
1001346e:	d100      	bne.n	10013472 <__aeabi_fadd+0x26e>
10013470:	e752      	b.n	10013318 <__aeabi_fadd+0x114>
10013472:	1ad3      	subs	r3, r2, r3
10013474:	000d      	movs	r5, r1
10013476:	e6dc      	b.n	10013232 <__aeabi_fadd+0x2e>
10013478:	24ff      	movs	r4, #255	; 0xff
1001347a:	2a00      	cmp	r2, #0
1001347c:	d100      	bne.n	10013480 <__aeabi_fadd+0x27c>
1001347e:	e6d8      	b.n	10013232 <__aeabi_fadd+0x2e>
10013480:	2080      	movs	r0, #128	; 0x80
10013482:	08db      	lsrs	r3, r3, #3
10013484:	03c0      	lsls	r0, r0, #15
10013486:	4203      	tst	r3, r0
10013488:	d004      	beq.n	10013494 <__aeabi_fadd+0x290>
1001348a:	08d2      	lsrs	r2, r2, #3
1001348c:	4202      	tst	r2, r0
1001348e:	d101      	bne.n	10013494 <__aeabi_fadd+0x290>
10013490:	0013      	movs	r3, r2
10013492:	000d      	movs	r5, r1
10013494:	00db      	lsls	r3, r3, #3
10013496:	24ff      	movs	r4, #255	; 0xff
10013498:	e6cb      	b.n	10013232 <__aeabi_fadd+0x2e>
1001349a:	0013      	movs	r3, r2
1001349c:	24ff      	movs	r4, #255	; 0xff
1001349e:	000d      	movs	r5, r1
100134a0:	e6c7      	b.n	10013232 <__aeabi_fadd+0x2e>
100134a2:	2b00      	cmp	r3, #0
100134a4:	d00d      	beq.n	100134c2 <__aeabi_fadd+0x2be>
100134a6:	24ff      	movs	r4, #255	; 0xff
100134a8:	2a00      	cmp	r2, #0
100134aa:	d100      	bne.n	100134ae <__aeabi_fadd+0x2aa>
100134ac:	e6c1      	b.n	10013232 <__aeabi_fadd+0x2e>
100134ae:	2180      	movs	r1, #128	; 0x80
100134b0:	08db      	lsrs	r3, r3, #3
100134b2:	03c9      	lsls	r1, r1, #15
100134b4:	420b      	tst	r3, r1
100134b6:	d0ed      	beq.n	10013494 <__aeabi_fadd+0x290>
100134b8:	08d2      	lsrs	r2, r2, #3
100134ba:	420a      	tst	r2, r1
100134bc:	d1ea      	bne.n	10013494 <__aeabi_fadd+0x290>
100134be:	0013      	movs	r3, r2
100134c0:	e7e8      	b.n	10013494 <__aeabi_fadd+0x290>
100134c2:	0013      	movs	r3, r2
100134c4:	24ff      	movs	r4, #255	; 0xff
100134c6:	e6b4      	b.n	10013232 <__aeabi_fadd+0x2e>
100134c8:	2301      	movs	r3, #1
100134ca:	e772      	b.n	100133b2 <__aeabi_fadd+0x1ae>
100134cc:	0013      	movs	r3, r2
100134ce:	0034      	movs	r4, r6
100134d0:	e6af      	b.n	10013232 <__aeabi_fadd+0x2e>
100134d2:	2700      	movs	r7, #0
100134d4:	2000      	movs	r0, #0
100134d6:	e722      	b.n	1001331e <__aeabi_fadd+0x11a>
100134d8:	2780      	movs	r7, #128	; 0x80
100134da:	2000      	movs	r0, #0
100134dc:	03ff      	lsls	r7, r7, #15
100134de:	e6f1      	b.n	100132c4 <__aeabi_fadd+0xc0>
100134e0:	0013      	movs	r3, r2
100134e2:	e6a6      	b.n	10013232 <__aeabi_fadd+0x2e>
100134e4:	2301      	movs	r3, #1
100134e6:	e7a5      	b.n	10013434 <__aeabi_fadd+0x230>
100134e8:	7dffffff 	.word	0x7dffffff
100134ec:	fbffffff 	.word	0xfbffffff

100134f0 <__aeabi_fdiv>:
100134f0:	b5f0      	push	{r4, r5, r6, r7, lr}
100134f2:	4656      	mov	r6, sl
100134f4:	4644      	mov	r4, r8
100134f6:	465f      	mov	r7, fp
100134f8:	464d      	mov	r5, r9
100134fa:	b4f0      	push	{r4, r5, r6, r7}
100134fc:	0244      	lsls	r4, r0, #9
100134fe:	0046      	lsls	r6, r0, #1
10013500:	0fc7      	lsrs	r7, r0, #31
10013502:	b083      	sub	sp, #12
10013504:	4688      	mov	r8, r1
10013506:	0a65      	lsrs	r5, r4, #9
10013508:	0e36      	lsrs	r6, r6, #24
1001350a:	46ba      	mov	sl, r7
1001350c:	d03d      	beq.n	1001358a <__aeabi_fdiv+0x9a>
1001350e:	2eff      	cmp	r6, #255	; 0xff
10013510:	d022      	beq.n	10013558 <__aeabi_fdiv+0x68>
10013512:	2300      	movs	r3, #0
10013514:	00ec      	lsls	r4, r5, #3
10013516:	2580      	movs	r5, #128	; 0x80
10013518:	4699      	mov	r9, r3
1001351a:	469b      	mov	fp, r3
1001351c:	04ed      	lsls	r5, r5, #19
1001351e:	4325      	orrs	r5, r4
10013520:	3e7f      	subs	r6, #127	; 0x7f
10013522:	4643      	mov	r3, r8
10013524:	025c      	lsls	r4, r3, #9
10013526:	0058      	lsls	r0, r3, #1
10013528:	0fdb      	lsrs	r3, r3, #31
1001352a:	0a64      	lsrs	r4, r4, #9
1001352c:	0e00      	lsrs	r0, r0, #24
1001352e:	4698      	mov	r8, r3
10013530:	d036      	beq.n	100135a0 <__aeabi_fdiv+0xb0>
10013532:	28ff      	cmp	r0, #255	; 0xff
10013534:	d030      	beq.n	10013598 <__aeabi_fdiv+0xa8>
10013536:	2380      	movs	r3, #128	; 0x80
10013538:	2100      	movs	r1, #0
1001353a:	00e4      	lsls	r4, r4, #3
1001353c:	04db      	lsls	r3, r3, #19
1001353e:	431c      	orrs	r4, r3
10013540:	387f      	subs	r0, #127	; 0x7f
10013542:	1a30      	subs	r0, r6, r0
10013544:	9001      	str	r0, [sp, #4]
10013546:	4648      	mov	r0, r9
10013548:	4642      	mov	r2, r8
1001354a:	4308      	orrs	r0, r1
1001354c:	4e72      	ldr	r6, [pc, #456]	; (10013718 <__aeabi_fdiv+0x228>)
1001354e:	0080      	lsls	r0, r0, #2
10013550:	5830      	ldr	r0, [r6, r0]
10013552:	407a      	eors	r2, r7
10013554:	0013      	movs	r3, r2
10013556:	4687      	mov	pc, r0
10013558:	2d00      	cmp	r5, #0
1001355a:	d144      	bne.n	100135e6 <__aeabi_fdiv+0xf6>
1001355c:	2308      	movs	r3, #8
1001355e:	4699      	mov	r9, r3
10013560:	3b06      	subs	r3, #6
10013562:	469b      	mov	fp, r3
10013564:	e7dd      	b.n	10013522 <__aeabi_fdiv+0x32>
10013566:	2201      	movs	r2, #1
10013568:	20ff      	movs	r0, #255	; 0xff
1001356a:	2400      	movs	r4, #0
1001356c:	401a      	ands	r2, r3
1001356e:	0264      	lsls	r4, r4, #9
10013570:	05c3      	lsls	r3, r0, #23
10013572:	0a64      	lsrs	r4, r4, #9
10013574:	07d2      	lsls	r2, r2, #31
10013576:	431c      	orrs	r4, r3
10013578:	4314      	orrs	r4, r2
1001357a:	0020      	movs	r0, r4
1001357c:	b003      	add	sp, #12
1001357e:	bc3c      	pop	{r2, r3, r4, r5}
10013580:	4690      	mov	r8, r2
10013582:	4699      	mov	r9, r3
10013584:	46a2      	mov	sl, r4
10013586:	46ab      	mov	fp, r5
10013588:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001358a:	2d00      	cmp	r5, #0
1001358c:	d120      	bne.n	100135d0 <__aeabi_fdiv+0xe0>
1001358e:	2304      	movs	r3, #4
10013590:	4699      	mov	r9, r3
10013592:	3b03      	subs	r3, #3
10013594:	469b      	mov	fp, r3
10013596:	e7c4      	b.n	10013522 <__aeabi_fdiv+0x32>
10013598:	2c00      	cmp	r4, #0
1001359a:	d117      	bne.n	100135cc <__aeabi_fdiv+0xdc>
1001359c:	2102      	movs	r1, #2
1001359e:	e002      	b.n	100135a6 <__aeabi_fdiv+0xb6>
100135a0:	2c00      	cmp	r4, #0
100135a2:	d10a      	bne.n	100135ba <__aeabi_fdiv+0xca>
100135a4:	2101      	movs	r1, #1
100135a6:	1a32      	subs	r2, r6, r0
100135a8:	9201      	str	r2, [sp, #4]
100135aa:	464a      	mov	r2, r9
100135ac:	4643      	mov	r3, r8
100135ae:	430a      	orrs	r2, r1
100135b0:	485a      	ldr	r0, [pc, #360]	; (1001371c <__aeabi_fdiv+0x22c>)
100135b2:	0092      	lsls	r2, r2, #2
100135b4:	5882      	ldr	r2, [r0, r2]
100135b6:	407b      	eors	r3, r7
100135b8:	4697      	mov	pc, r2
100135ba:	0020      	movs	r0, r4
100135bc:	f001 fbee 	bl	10014d9c <__clzsi2>
100135c0:	1f43      	subs	r3, r0, #5
100135c2:	3076      	adds	r0, #118	; 0x76
100135c4:	409c      	lsls	r4, r3
100135c6:	4240      	negs	r0, r0
100135c8:	2100      	movs	r1, #0
100135ca:	e7ba      	b.n	10013542 <__aeabi_fdiv+0x52>
100135cc:	2103      	movs	r1, #3
100135ce:	e7b8      	b.n	10013542 <__aeabi_fdiv+0x52>
100135d0:	0028      	movs	r0, r5
100135d2:	f001 fbe3 	bl	10014d9c <__clzsi2>
100135d6:	1f43      	subs	r3, r0, #5
100135d8:	409d      	lsls	r5, r3
100135da:	2300      	movs	r3, #0
100135dc:	3076      	adds	r0, #118	; 0x76
100135de:	4246      	negs	r6, r0
100135e0:	4699      	mov	r9, r3
100135e2:	469b      	mov	fp, r3
100135e4:	e79d      	b.n	10013522 <__aeabi_fdiv+0x32>
100135e6:	230c      	movs	r3, #12
100135e8:	4699      	mov	r9, r3
100135ea:	3b09      	subs	r3, #9
100135ec:	469b      	mov	fp, r3
100135ee:	e798      	b.n	10013522 <__aeabi_fdiv+0x32>
100135f0:	2480      	movs	r4, #128	; 0x80
100135f2:	2200      	movs	r2, #0
100135f4:	03e4      	lsls	r4, r4, #15
100135f6:	20ff      	movs	r0, #255	; 0xff
100135f8:	e7b9      	b.n	1001356e <__aeabi_fdiv+0x7e>
100135fa:	2400      	movs	r4, #0
100135fc:	46c2      	mov	sl, r8
100135fe:	468b      	mov	fp, r1
10013600:	465a      	mov	r2, fp
10013602:	4653      	mov	r3, sl
10013604:	2a02      	cmp	r2, #2
10013606:	d0ae      	beq.n	10013566 <__aeabi_fdiv+0x76>
10013608:	2a03      	cmp	r2, #3
1001360a:	d07d      	beq.n	10013708 <__aeabi_fdiv+0x218>
1001360c:	2a01      	cmp	r2, #1
1001360e:	d131      	bne.n	10013674 <__aeabi_fdiv+0x184>
10013610:	2201      	movs	r2, #1
10013612:	2000      	movs	r0, #0
10013614:	401a      	ands	r2, r3
10013616:	2400      	movs	r4, #0
10013618:	e7a9      	b.n	1001356e <__aeabi_fdiv+0x7e>
1001361a:	2201      	movs	r2, #1
1001361c:	1a10      	subs	r0, r2, r0
1001361e:	281b      	cmp	r0, #27
10013620:	dd56      	ble.n	100136d0 <__aeabi_fdiv+0x1e0>
10013622:	401a      	ands	r2, r3
10013624:	2000      	movs	r0, #0
10013626:	2400      	movs	r4, #0
10013628:	e7a1      	b.n	1001356e <__aeabi_fdiv+0x7e>
1001362a:	2380      	movs	r3, #128	; 0x80
1001362c:	03db      	lsls	r3, r3, #15
1001362e:	421d      	tst	r5, r3
10013630:	d14b      	bne.n	100136ca <__aeabi_fdiv+0x1da>
10013632:	2380      	movs	r3, #128	; 0x80
10013634:	03db      	lsls	r3, r3, #15
10013636:	432b      	orrs	r3, r5
10013638:	025c      	lsls	r4, r3, #9
1001363a:	0a64      	lsrs	r4, r4, #9
1001363c:	003a      	movs	r2, r7
1001363e:	20ff      	movs	r0, #255	; 0xff
10013640:	e795      	b.n	1001356e <__aeabi_fdiv+0x7e>
10013642:	016d      	lsls	r5, r5, #5
10013644:	0160      	lsls	r0, r4, #5
10013646:	4285      	cmp	r5, r0
10013648:	d230      	bcs.n	100136ac <__aeabi_fdiv+0x1bc>
1001364a:	9a01      	ldr	r2, [sp, #4]
1001364c:	2400      	movs	r4, #0
1001364e:	3a01      	subs	r2, #1
10013650:	9201      	str	r2, [sp, #4]
10013652:	221b      	movs	r2, #27
10013654:	2701      	movs	r7, #1
10013656:	0029      	movs	r1, r5
10013658:	0064      	lsls	r4, r4, #1
1001365a:	006d      	lsls	r5, r5, #1
1001365c:	2900      	cmp	r1, #0
1001365e:	db01      	blt.n	10013664 <__aeabi_fdiv+0x174>
10013660:	42a8      	cmp	r0, r5
10013662:	d801      	bhi.n	10013668 <__aeabi_fdiv+0x178>
10013664:	1a2d      	subs	r5, r5, r0
10013666:	433c      	orrs	r4, r7
10013668:	3a01      	subs	r2, #1
1001366a:	2a00      	cmp	r2, #0
1001366c:	d1f3      	bne.n	10013656 <__aeabi_fdiv+0x166>
1001366e:	1e6a      	subs	r2, r5, #1
10013670:	4195      	sbcs	r5, r2
10013672:	432c      	orrs	r4, r5
10013674:	9801      	ldr	r0, [sp, #4]
10013676:	307f      	adds	r0, #127	; 0x7f
10013678:	2800      	cmp	r0, #0
1001367a:	ddce      	ble.n	1001361a <__aeabi_fdiv+0x12a>
1001367c:	0762      	lsls	r2, r4, #29
1001367e:	d004      	beq.n	1001368a <__aeabi_fdiv+0x19a>
10013680:	220f      	movs	r2, #15
10013682:	4022      	ands	r2, r4
10013684:	2a04      	cmp	r2, #4
10013686:	d000      	beq.n	1001368a <__aeabi_fdiv+0x19a>
10013688:	3404      	adds	r4, #4
1001368a:	0122      	lsls	r2, r4, #4
1001368c:	d503      	bpl.n	10013696 <__aeabi_fdiv+0x1a6>
1001368e:	4a24      	ldr	r2, [pc, #144]	; (10013720 <__aeabi_fdiv+0x230>)
10013690:	9801      	ldr	r0, [sp, #4]
10013692:	4014      	ands	r4, r2
10013694:	3080      	adds	r0, #128	; 0x80
10013696:	28fe      	cmp	r0, #254	; 0xfe
10013698:	dd00      	ble.n	1001369c <__aeabi_fdiv+0x1ac>
1001369a:	e764      	b.n	10013566 <__aeabi_fdiv+0x76>
1001369c:	2201      	movs	r2, #1
1001369e:	01a4      	lsls	r4, r4, #6
100136a0:	0a64      	lsrs	r4, r4, #9
100136a2:	b2c0      	uxtb	r0, r0
100136a4:	401a      	ands	r2, r3
100136a6:	e762      	b.n	1001356e <__aeabi_fdiv+0x7e>
100136a8:	002c      	movs	r4, r5
100136aa:	e7a9      	b.n	10013600 <__aeabi_fdiv+0x110>
100136ac:	1a2d      	subs	r5, r5, r0
100136ae:	221a      	movs	r2, #26
100136b0:	2401      	movs	r4, #1
100136b2:	e7cf      	b.n	10013654 <__aeabi_fdiv+0x164>
100136b4:	026b      	lsls	r3, r5, #9
100136b6:	d5bc      	bpl.n	10013632 <__aeabi_fdiv+0x142>
100136b8:	2400      	movs	r4, #0
100136ba:	2380      	movs	r3, #128	; 0x80
100136bc:	03db      	lsls	r3, r3, #15
100136be:	431c      	orrs	r4, r3
100136c0:	0264      	lsls	r4, r4, #9
100136c2:	0a64      	lsrs	r4, r4, #9
100136c4:	4642      	mov	r2, r8
100136c6:	20ff      	movs	r0, #255	; 0xff
100136c8:	e751      	b.n	1001356e <__aeabi_fdiv+0x7e>
100136ca:	421c      	tst	r4, r3
100136cc:	d1b3      	bne.n	10013636 <__aeabi_fdiv+0x146>
100136ce:	e7f4      	b.n	100136ba <__aeabi_fdiv+0x1ca>
100136d0:	0021      	movs	r1, r4
100136d2:	2220      	movs	r2, #32
100136d4:	40c1      	lsrs	r1, r0
100136d6:	1a10      	subs	r0, r2, r0
100136d8:	4084      	lsls	r4, r0
100136da:	1e62      	subs	r2, r4, #1
100136dc:	4194      	sbcs	r4, r2
100136de:	430c      	orrs	r4, r1
100136e0:	0762      	lsls	r2, r4, #29
100136e2:	d004      	beq.n	100136ee <__aeabi_fdiv+0x1fe>
100136e4:	220f      	movs	r2, #15
100136e6:	4022      	ands	r2, r4
100136e8:	2a04      	cmp	r2, #4
100136ea:	d000      	beq.n	100136ee <__aeabi_fdiv+0x1fe>
100136ec:	3404      	adds	r4, #4
100136ee:	0162      	lsls	r2, r4, #5
100136f0:	d504      	bpl.n	100136fc <__aeabi_fdiv+0x20c>
100136f2:	2201      	movs	r2, #1
100136f4:	2001      	movs	r0, #1
100136f6:	401a      	ands	r2, r3
100136f8:	2400      	movs	r4, #0
100136fa:	e738      	b.n	1001356e <__aeabi_fdiv+0x7e>
100136fc:	2201      	movs	r2, #1
100136fe:	01a4      	lsls	r4, r4, #6
10013700:	0a64      	lsrs	r4, r4, #9
10013702:	401a      	ands	r2, r3
10013704:	2000      	movs	r0, #0
10013706:	e732      	b.n	1001356e <__aeabi_fdiv+0x7e>
10013708:	2380      	movs	r3, #128	; 0x80
1001370a:	03db      	lsls	r3, r3, #15
1001370c:	431c      	orrs	r4, r3
1001370e:	0264      	lsls	r4, r4, #9
10013710:	0a64      	lsrs	r4, r4, #9
10013712:	4652      	mov	r2, sl
10013714:	20ff      	movs	r0, #255	; 0xff
10013716:	e72a      	b.n	1001356e <__aeabi_fdiv+0x7e>
10013718:	10017fc8 	.word	0x10017fc8
1001371c:	10018008 	.word	0x10018008
10013720:	f7ffffff 	.word	0xf7ffffff

10013724 <__eqsf2>:
10013724:	0243      	lsls	r3, r0, #9
10013726:	b570      	push	{r4, r5, r6, lr}
10013728:	0042      	lsls	r2, r0, #1
1001372a:	004c      	lsls	r4, r1, #1
1001372c:	0a5d      	lsrs	r5, r3, #9
1001372e:	0fc3      	lsrs	r3, r0, #31
10013730:	0248      	lsls	r0, r1, #9
10013732:	0e12      	lsrs	r2, r2, #24
10013734:	0a46      	lsrs	r6, r0, #9
10013736:	0e24      	lsrs	r4, r4, #24
10013738:	0fc9      	lsrs	r1, r1, #31
1001373a:	2aff      	cmp	r2, #255	; 0xff
1001373c:	d00f      	beq.n	1001375e <__eqsf2+0x3a>
1001373e:	2cff      	cmp	r4, #255	; 0xff
10013740:	d011      	beq.n	10013766 <__eqsf2+0x42>
10013742:	2001      	movs	r0, #1
10013744:	42a2      	cmp	r2, r4
10013746:	d000      	beq.n	1001374a <__eqsf2+0x26>
10013748:	bd70      	pop	{r4, r5, r6, pc}
1001374a:	42b5      	cmp	r5, r6
1001374c:	d1fc      	bne.n	10013748 <__eqsf2+0x24>
1001374e:	428b      	cmp	r3, r1
10013750:	d00d      	beq.n	1001376e <__eqsf2+0x4a>
10013752:	2a00      	cmp	r2, #0
10013754:	d1f8      	bne.n	10013748 <__eqsf2+0x24>
10013756:	0028      	movs	r0, r5
10013758:	1e43      	subs	r3, r0, #1
1001375a:	4198      	sbcs	r0, r3
1001375c:	e7f4      	b.n	10013748 <__eqsf2+0x24>
1001375e:	2001      	movs	r0, #1
10013760:	2d00      	cmp	r5, #0
10013762:	d1f1      	bne.n	10013748 <__eqsf2+0x24>
10013764:	e7eb      	b.n	1001373e <__eqsf2+0x1a>
10013766:	2001      	movs	r0, #1
10013768:	2e00      	cmp	r6, #0
1001376a:	d1ed      	bne.n	10013748 <__eqsf2+0x24>
1001376c:	e7e9      	b.n	10013742 <__eqsf2+0x1e>
1001376e:	2000      	movs	r0, #0
10013770:	e7ea      	b.n	10013748 <__eqsf2+0x24>
10013772:	46c0      	nop			; (mov r8, r8)

10013774 <__gesf2>:
10013774:	0243      	lsls	r3, r0, #9
10013776:	b5f0      	push	{r4, r5, r6, r7, lr}
10013778:	0042      	lsls	r2, r0, #1
1001377a:	0a5d      	lsrs	r5, r3, #9
1001377c:	0fc3      	lsrs	r3, r0, #31
1001377e:	0248      	lsls	r0, r1, #9
10013780:	0a44      	lsrs	r4, r0, #9
10013782:	0048      	lsls	r0, r1, #1
10013784:	0e12      	lsrs	r2, r2, #24
10013786:	0e00      	lsrs	r0, r0, #24
10013788:	0fc9      	lsrs	r1, r1, #31
1001378a:	2aff      	cmp	r2, #255	; 0xff
1001378c:	d01f      	beq.n	100137ce <__gesf2+0x5a>
1001378e:	28ff      	cmp	r0, #255	; 0xff
10013790:	d022      	beq.n	100137d8 <__gesf2+0x64>
10013792:	2a00      	cmp	r2, #0
10013794:	d109      	bne.n	100137aa <__gesf2+0x36>
10013796:	426e      	negs	r6, r5
10013798:	416e      	adcs	r6, r5
1001379a:	2800      	cmp	r0, #0
1001379c:	d10f      	bne.n	100137be <__gesf2+0x4a>
1001379e:	2c00      	cmp	r4, #0
100137a0:	d10d      	bne.n	100137be <__gesf2+0x4a>
100137a2:	2000      	movs	r0, #0
100137a4:	2d00      	cmp	r5, #0
100137a6:	d009      	beq.n	100137bc <__gesf2+0x48>
100137a8:	e005      	b.n	100137b6 <__gesf2+0x42>
100137aa:	2800      	cmp	r0, #0
100137ac:	d101      	bne.n	100137b2 <__gesf2+0x3e>
100137ae:	2c00      	cmp	r4, #0
100137b0:	d001      	beq.n	100137b6 <__gesf2+0x42>
100137b2:	428b      	cmp	r3, r1
100137b4:	d013      	beq.n	100137de <__gesf2+0x6a>
100137b6:	4258      	negs	r0, r3
100137b8:	2301      	movs	r3, #1
100137ba:	4318      	orrs	r0, r3
100137bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
100137be:	2e00      	cmp	r6, #0
100137c0:	d0f7      	beq.n	100137b2 <__gesf2+0x3e>
100137c2:	4248      	negs	r0, r1
100137c4:	4141      	adcs	r1, r0
100137c6:	2001      	movs	r0, #1
100137c8:	4249      	negs	r1, r1
100137ca:	4308      	orrs	r0, r1
100137cc:	e7f6      	b.n	100137bc <__gesf2+0x48>
100137ce:	2d00      	cmp	r5, #0
100137d0:	d0dd      	beq.n	1001378e <__gesf2+0x1a>
100137d2:	2002      	movs	r0, #2
100137d4:	4240      	negs	r0, r0
100137d6:	e7f1      	b.n	100137bc <__gesf2+0x48>
100137d8:	2c00      	cmp	r4, #0
100137da:	d0da      	beq.n	10013792 <__gesf2+0x1e>
100137dc:	e7f9      	b.n	100137d2 <__gesf2+0x5e>
100137de:	4282      	cmp	r2, r0
100137e0:	dce9      	bgt.n	100137b6 <__gesf2+0x42>
100137e2:	db04      	blt.n	100137ee <__gesf2+0x7a>
100137e4:	42a5      	cmp	r5, r4
100137e6:	d8e6      	bhi.n	100137b6 <__gesf2+0x42>
100137e8:	2000      	movs	r0, #0
100137ea:	42a5      	cmp	r5, r4
100137ec:	d2e6      	bcs.n	100137bc <__gesf2+0x48>
100137ee:	4258      	negs	r0, r3
100137f0:	4143      	adcs	r3, r0
100137f2:	2001      	movs	r0, #1
100137f4:	425b      	negs	r3, r3
100137f6:	4318      	orrs	r0, r3
100137f8:	e7e0      	b.n	100137bc <__gesf2+0x48>
100137fa:	46c0      	nop			; (mov r8, r8)

100137fc <__lesf2>:
100137fc:	0243      	lsls	r3, r0, #9
100137fe:	b5f0      	push	{r4, r5, r6, r7, lr}
10013800:	0042      	lsls	r2, r0, #1
10013802:	004c      	lsls	r4, r1, #1
10013804:	0a5e      	lsrs	r6, r3, #9
10013806:	0fc3      	lsrs	r3, r0, #31
10013808:	0248      	lsls	r0, r1, #9
1001380a:	0e12      	lsrs	r2, r2, #24
1001380c:	0a45      	lsrs	r5, r0, #9
1001380e:	0e24      	lsrs	r4, r4, #24
10013810:	0fc9      	lsrs	r1, r1, #31
10013812:	2aff      	cmp	r2, #255	; 0xff
10013814:	d017      	beq.n	10013846 <__lesf2+0x4a>
10013816:	2cff      	cmp	r4, #255	; 0xff
10013818:	d019      	beq.n	1001384e <__lesf2+0x52>
1001381a:	2a00      	cmp	r2, #0
1001381c:	d10b      	bne.n	10013836 <__lesf2+0x3a>
1001381e:	4270      	negs	r0, r6
10013820:	4170      	adcs	r0, r6
10013822:	2c00      	cmp	r4, #0
10013824:	d017      	beq.n	10013856 <__lesf2+0x5a>
10013826:	2800      	cmp	r0, #0
10013828:	d007      	beq.n	1001383a <__lesf2+0x3e>
1001382a:	4248      	negs	r0, r1
1001382c:	4141      	adcs	r1, r0
1001382e:	2001      	movs	r0, #1
10013830:	4249      	negs	r1, r1
10013832:	4308      	orrs	r0, r1
10013834:	bdf0      	pop	{r4, r5, r6, r7, pc}
10013836:	2c00      	cmp	r4, #0
10013838:	d013      	beq.n	10013862 <__lesf2+0x66>
1001383a:	428b      	cmp	r3, r1
1001383c:	d014      	beq.n	10013868 <__lesf2+0x6c>
1001383e:	4258      	negs	r0, r3
10013840:	2301      	movs	r3, #1
10013842:	4318      	orrs	r0, r3
10013844:	e7f6      	b.n	10013834 <__lesf2+0x38>
10013846:	2002      	movs	r0, #2
10013848:	2e00      	cmp	r6, #0
1001384a:	d1f3      	bne.n	10013834 <__lesf2+0x38>
1001384c:	e7e3      	b.n	10013816 <__lesf2+0x1a>
1001384e:	2002      	movs	r0, #2
10013850:	2d00      	cmp	r5, #0
10013852:	d1ef      	bne.n	10013834 <__lesf2+0x38>
10013854:	e7e1      	b.n	1001381a <__lesf2+0x1e>
10013856:	2d00      	cmp	r5, #0
10013858:	d1e5      	bne.n	10013826 <__lesf2+0x2a>
1001385a:	2000      	movs	r0, #0
1001385c:	2e00      	cmp	r6, #0
1001385e:	d0e9      	beq.n	10013834 <__lesf2+0x38>
10013860:	e7ed      	b.n	1001383e <__lesf2+0x42>
10013862:	2d00      	cmp	r5, #0
10013864:	d1e9      	bne.n	1001383a <__lesf2+0x3e>
10013866:	e7ea      	b.n	1001383e <__lesf2+0x42>
10013868:	42a2      	cmp	r2, r4
1001386a:	dce8      	bgt.n	1001383e <__lesf2+0x42>
1001386c:	db04      	blt.n	10013878 <__lesf2+0x7c>
1001386e:	42ae      	cmp	r6, r5
10013870:	d8e5      	bhi.n	1001383e <__lesf2+0x42>
10013872:	2000      	movs	r0, #0
10013874:	42ae      	cmp	r6, r5
10013876:	d2dd      	bcs.n	10013834 <__lesf2+0x38>
10013878:	4258      	negs	r0, r3
1001387a:	4143      	adcs	r3, r0
1001387c:	2001      	movs	r0, #1
1001387e:	425b      	negs	r3, r3
10013880:	4318      	orrs	r0, r3
10013882:	e7d7      	b.n	10013834 <__lesf2+0x38>

10013884 <__aeabi_fmul>:
10013884:	b5f0      	push	{r4, r5, r6, r7, lr}
10013886:	4657      	mov	r7, sl
10013888:	464e      	mov	r6, r9
1001388a:	4645      	mov	r5, r8
1001388c:	0043      	lsls	r3, r0, #1
1001388e:	b4e0      	push	{r5, r6, r7}
10013890:	0246      	lsls	r6, r0, #9
10013892:	4688      	mov	r8, r1
10013894:	0a76      	lsrs	r6, r6, #9
10013896:	0e1f      	lsrs	r7, r3, #24
10013898:	0fc4      	lsrs	r4, r0, #31
1001389a:	2f00      	cmp	r7, #0
1001389c:	d047      	beq.n	1001392e <__aeabi_fmul+0xaa>
1001389e:	2fff      	cmp	r7, #255	; 0xff
100138a0:	d025      	beq.n	100138ee <__aeabi_fmul+0x6a>
100138a2:	2300      	movs	r3, #0
100138a4:	2580      	movs	r5, #128	; 0x80
100138a6:	469a      	mov	sl, r3
100138a8:	4699      	mov	r9, r3
100138aa:	00f6      	lsls	r6, r6, #3
100138ac:	04ed      	lsls	r5, r5, #19
100138ae:	432e      	orrs	r6, r5
100138b0:	3f7f      	subs	r7, #127	; 0x7f
100138b2:	4643      	mov	r3, r8
100138b4:	4642      	mov	r2, r8
100138b6:	025d      	lsls	r5, r3, #9
100138b8:	0fd2      	lsrs	r2, r2, #31
100138ba:	005b      	lsls	r3, r3, #1
100138bc:	0a6d      	lsrs	r5, r5, #9
100138be:	0e1b      	lsrs	r3, r3, #24
100138c0:	4690      	mov	r8, r2
100138c2:	d040      	beq.n	10013946 <__aeabi_fmul+0xc2>
100138c4:	2bff      	cmp	r3, #255	; 0xff
100138c6:	d039      	beq.n	1001393c <__aeabi_fmul+0xb8>
100138c8:	2280      	movs	r2, #128	; 0x80
100138ca:	2000      	movs	r0, #0
100138cc:	00ed      	lsls	r5, r5, #3
100138ce:	04d2      	lsls	r2, r2, #19
100138d0:	4315      	orrs	r5, r2
100138d2:	3b7f      	subs	r3, #127	; 0x7f
100138d4:	18fb      	adds	r3, r7, r3
100138d6:	4642      	mov	r2, r8
100138d8:	4657      	mov	r7, sl
100138da:	1c59      	adds	r1, r3, #1
100138dc:	4062      	eors	r2, r4
100138de:	468c      	mov	ip, r1
100138e0:	4307      	orrs	r7, r0
100138e2:	2f0f      	cmp	r7, #15
100138e4:	d85c      	bhi.n	100139a0 <__aeabi_fmul+0x11c>
100138e6:	496f      	ldr	r1, [pc, #444]	; (10013aa4 <__aeabi_fmul+0x220>)
100138e8:	00bf      	lsls	r7, r7, #2
100138ea:	59c9      	ldr	r1, [r1, r7]
100138ec:	468f      	mov	pc, r1
100138ee:	2e00      	cmp	r6, #0
100138f0:	d145      	bne.n	1001397e <__aeabi_fmul+0xfa>
100138f2:	2308      	movs	r3, #8
100138f4:	469a      	mov	sl, r3
100138f6:	3b06      	subs	r3, #6
100138f8:	4699      	mov	r9, r3
100138fa:	e7da      	b.n	100138b2 <__aeabi_fmul+0x2e>
100138fc:	4642      	mov	r2, r8
100138fe:	2802      	cmp	r0, #2
10013900:	d02d      	beq.n	1001395e <__aeabi_fmul+0xda>
10013902:	2803      	cmp	r0, #3
10013904:	d100      	bne.n	10013908 <__aeabi_fmul+0x84>
10013906:	e0c3      	b.n	10013a90 <__aeabi_fmul+0x20c>
10013908:	2801      	cmp	r0, #1
1001390a:	d000      	beq.n	1001390e <__aeabi_fmul+0x8a>
1001390c:	e0a2      	b.n	10013a54 <__aeabi_fmul+0x1d0>
1001390e:	2500      	movs	r5, #0
10013910:	2600      	movs	r6, #0
10013912:	4002      	ands	r2, r0
10013914:	b2d4      	uxtb	r4, r2
10013916:	0276      	lsls	r6, r6, #9
10013918:	05ed      	lsls	r5, r5, #23
1001391a:	0a76      	lsrs	r6, r6, #9
1001391c:	432e      	orrs	r6, r5
1001391e:	07e4      	lsls	r4, r4, #31
10013920:	4326      	orrs	r6, r4
10013922:	0030      	movs	r0, r6
10013924:	bc1c      	pop	{r2, r3, r4}
10013926:	4690      	mov	r8, r2
10013928:	4699      	mov	r9, r3
1001392a:	46a2      	mov	sl, r4
1001392c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001392e:	2e00      	cmp	r6, #0
10013930:	d11a      	bne.n	10013968 <__aeabi_fmul+0xe4>
10013932:	2304      	movs	r3, #4
10013934:	469a      	mov	sl, r3
10013936:	3b03      	subs	r3, #3
10013938:	4699      	mov	r9, r3
1001393a:	e7ba      	b.n	100138b2 <__aeabi_fmul+0x2e>
1001393c:	002a      	movs	r2, r5
1001393e:	1e51      	subs	r1, r2, #1
10013940:	418a      	sbcs	r2, r1
10013942:	1c90      	adds	r0, r2, #2
10013944:	e7c6      	b.n	100138d4 <__aeabi_fmul+0x50>
10013946:	2001      	movs	r0, #1
10013948:	2d00      	cmp	r5, #0
1001394a:	d0c3      	beq.n	100138d4 <__aeabi_fmul+0x50>
1001394c:	0028      	movs	r0, r5
1001394e:	f001 fa25 	bl	10014d9c <__clzsi2>
10013952:	1f43      	subs	r3, r0, #5
10013954:	3076      	adds	r0, #118	; 0x76
10013956:	409d      	lsls	r5, r3
10013958:	4243      	negs	r3, r0
1001395a:	2000      	movs	r0, #0
1001395c:	e7ba      	b.n	100138d4 <__aeabi_fmul+0x50>
1001395e:	2401      	movs	r4, #1
10013960:	25ff      	movs	r5, #255	; 0xff
10013962:	4014      	ands	r4, r2
10013964:	2600      	movs	r6, #0
10013966:	e7d6      	b.n	10013916 <__aeabi_fmul+0x92>
10013968:	0030      	movs	r0, r6
1001396a:	f001 fa17 	bl	10014d9c <__clzsi2>
1001396e:	1f43      	subs	r3, r0, #5
10013970:	409e      	lsls	r6, r3
10013972:	2300      	movs	r3, #0
10013974:	3076      	adds	r0, #118	; 0x76
10013976:	4247      	negs	r7, r0
10013978:	469a      	mov	sl, r3
1001397a:	4699      	mov	r9, r3
1001397c:	e799      	b.n	100138b2 <__aeabi_fmul+0x2e>
1001397e:	230c      	movs	r3, #12
10013980:	469a      	mov	sl, r3
10013982:	3b09      	subs	r3, #9
10013984:	4699      	mov	r9, r3
10013986:	e794      	b.n	100138b2 <__aeabi_fmul+0x2e>
10013988:	2680      	movs	r6, #128	; 0x80
1001398a:	2400      	movs	r4, #0
1001398c:	03f6      	lsls	r6, r6, #15
1001398e:	25ff      	movs	r5, #255	; 0xff
10013990:	e7c1      	b.n	10013916 <__aeabi_fmul+0x92>
10013992:	0035      	movs	r5, r6
10013994:	4648      	mov	r0, r9
10013996:	e7b2      	b.n	100138fe <__aeabi_fmul+0x7a>
10013998:	0035      	movs	r5, r6
1001399a:	0022      	movs	r2, r4
1001399c:	4648      	mov	r0, r9
1001399e:	e7ae      	b.n	100138fe <__aeabi_fmul+0x7a>
100139a0:	0429      	lsls	r1, r5, #16
100139a2:	0c09      	lsrs	r1, r1, #16
100139a4:	0008      	movs	r0, r1
100139a6:	0c37      	lsrs	r7, r6, #16
100139a8:	0436      	lsls	r6, r6, #16
100139aa:	0c36      	lsrs	r6, r6, #16
100139ac:	0c2c      	lsrs	r4, r5, #16
100139ae:	4379      	muls	r1, r7
100139b0:	4370      	muls	r0, r6
100139b2:	4367      	muls	r7, r4
100139b4:	4374      	muls	r4, r6
100139b6:	0c06      	lsrs	r6, r0, #16
100139b8:	1864      	adds	r4, r4, r1
100139ba:	1936      	adds	r6, r6, r4
100139bc:	42b1      	cmp	r1, r6
100139be:	d903      	bls.n	100139c8 <__aeabi_fmul+0x144>
100139c0:	2180      	movs	r1, #128	; 0x80
100139c2:	0249      	lsls	r1, r1, #9
100139c4:	4688      	mov	r8, r1
100139c6:	4447      	add	r7, r8
100139c8:	0400      	lsls	r0, r0, #16
100139ca:	0c00      	lsrs	r0, r0, #16
100139cc:	0431      	lsls	r1, r6, #16
100139ce:	1809      	adds	r1, r1, r0
100139d0:	018d      	lsls	r5, r1, #6
100139d2:	1e68      	subs	r0, r5, #1
100139d4:	4185      	sbcs	r5, r0
100139d6:	0e89      	lsrs	r1, r1, #26
100139d8:	4329      	orrs	r1, r5
100139da:	0c35      	lsrs	r5, r6, #16
100139dc:	19ed      	adds	r5, r5, r7
100139de:	01ad      	lsls	r5, r5, #6
100139e0:	430d      	orrs	r5, r1
100139e2:	0129      	lsls	r1, r5, #4
100139e4:	d504      	bpl.n	100139f0 <__aeabi_fmul+0x16c>
100139e6:	2301      	movs	r3, #1
100139e8:	0869      	lsrs	r1, r5, #1
100139ea:	401d      	ands	r5, r3
100139ec:	4663      	mov	r3, ip
100139ee:	430d      	orrs	r5, r1
100139f0:	0019      	movs	r1, r3
100139f2:	317f      	adds	r1, #127	; 0x7f
100139f4:	2900      	cmp	r1, #0
100139f6:	dd25      	ble.n	10013a44 <__aeabi_fmul+0x1c0>
100139f8:	0768      	lsls	r0, r5, #29
100139fa:	d004      	beq.n	10013a06 <__aeabi_fmul+0x182>
100139fc:	200f      	movs	r0, #15
100139fe:	4028      	ands	r0, r5
10013a00:	2804      	cmp	r0, #4
10013a02:	d000      	beq.n	10013a06 <__aeabi_fmul+0x182>
10013a04:	3504      	adds	r5, #4
10013a06:	0128      	lsls	r0, r5, #4
10013a08:	d503      	bpl.n	10013a12 <__aeabi_fmul+0x18e>
10013a0a:	4927      	ldr	r1, [pc, #156]	; (10013aa8 <__aeabi_fmul+0x224>)
10013a0c:	3380      	adds	r3, #128	; 0x80
10013a0e:	400d      	ands	r5, r1
10013a10:	0019      	movs	r1, r3
10013a12:	29fe      	cmp	r1, #254	; 0xfe
10013a14:	dca3      	bgt.n	1001395e <__aeabi_fmul+0xda>
10013a16:	2401      	movs	r4, #1
10013a18:	01ad      	lsls	r5, r5, #6
10013a1a:	0a6e      	lsrs	r6, r5, #9
10013a1c:	4014      	ands	r4, r2
10013a1e:	b2cd      	uxtb	r5, r1
10013a20:	e779      	b.n	10013916 <__aeabi_fmul+0x92>
10013a22:	2080      	movs	r0, #128	; 0x80
10013a24:	03c0      	lsls	r0, r0, #15
10013a26:	4206      	tst	r6, r0
10013a28:	d007      	beq.n	10013a3a <__aeabi_fmul+0x1b6>
10013a2a:	4205      	tst	r5, r0
10013a2c:	d105      	bne.n	10013a3a <__aeabi_fmul+0x1b6>
10013a2e:	4328      	orrs	r0, r5
10013a30:	0246      	lsls	r6, r0, #9
10013a32:	0a76      	lsrs	r6, r6, #9
10013a34:	4644      	mov	r4, r8
10013a36:	25ff      	movs	r5, #255	; 0xff
10013a38:	e76d      	b.n	10013916 <__aeabi_fmul+0x92>
10013a3a:	4306      	orrs	r6, r0
10013a3c:	0276      	lsls	r6, r6, #9
10013a3e:	0a76      	lsrs	r6, r6, #9
10013a40:	25ff      	movs	r5, #255	; 0xff
10013a42:	e768      	b.n	10013916 <__aeabi_fmul+0x92>
10013a44:	2401      	movs	r4, #1
10013a46:	1a61      	subs	r1, r4, r1
10013a48:	291b      	cmp	r1, #27
10013a4a:	dd05      	ble.n	10013a58 <__aeabi_fmul+0x1d4>
10013a4c:	4014      	ands	r4, r2
10013a4e:	2500      	movs	r5, #0
10013a50:	2600      	movs	r6, #0
10013a52:	e760      	b.n	10013916 <__aeabi_fmul+0x92>
10013a54:	4663      	mov	r3, ip
10013a56:	e7cb      	b.n	100139f0 <__aeabi_fmul+0x16c>
10013a58:	002e      	movs	r6, r5
10013a5a:	2320      	movs	r3, #32
10013a5c:	40ce      	lsrs	r6, r1
10013a5e:	1a59      	subs	r1, r3, r1
10013a60:	408d      	lsls	r5, r1
10013a62:	1e6b      	subs	r3, r5, #1
10013a64:	419d      	sbcs	r5, r3
10013a66:	432e      	orrs	r6, r5
10013a68:	0773      	lsls	r3, r6, #29
10013a6a:	d004      	beq.n	10013a76 <__aeabi_fmul+0x1f2>
10013a6c:	230f      	movs	r3, #15
10013a6e:	4033      	ands	r3, r6
10013a70:	2b04      	cmp	r3, #4
10013a72:	d000      	beq.n	10013a76 <__aeabi_fmul+0x1f2>
10013a74:	3604      	adds	r6, #4
10013a76:	0173      	lsls	r3, r6, #5
10013a78:	d504      	bpl.n	10013a84 <__aeabi_fmul+0x200>
10013a7a:	2401      	movs	r4, #1
10013a7c:	2501      	movs	r5, #1
10013a7e:	4014      	ands	r4, r2
10013a80:	2600      	movs	r6, #0
10013a82:	e748      	b.n	10013916 <__aeabi_fmul+0x92>
10013a84:	2401      	movs	r4, #1
10013a86:	01b6      	lsls	r6, r6, #6
10013a88:	0a76      	lsrs	r6, r6, #9
10013a8a:	4014      	ands	r4, r2
10013a8c:	2500      	movs	r5, #0
10013a8e:	e742      	b.n	10013916 <__aeabi_fmul+0x92>
10013a90:	2680      	movs	r6, #128	; 0x80
10013a92:	2401      	movs	r4, #1
10013a94:	03f6      	lsls	r6, r6, #15
10013a96:	432e      	orrs	r6, r5
10013a98:	0276      	lsls	r6, r6, #9
10013a9a:	0a76      	lsrs	r6, r6, #9
10013a9c:	4014      	ands	r4, r2
10013a9e:	25ff      	movs	r5, #255	; 0xff
10013aa0:	e739      	b.n	10013916 <__aeabi_fmul+0x92>
10013aa2:	46c0      	nop			; (mov r8, r8)
10013aa4:	10018048 	.word	0x10018048
10013aa8:	f7ffffff 	.word	0xf7ffffff

10013aac <__aeabi_fsub>:
10013aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10013aae:	024a      	lsls	r2, r1, #9
10013ab0:	004e      	lsls	r6, r1, #1
10013ab2:	0243      	lsls	r3, r0, #9
10013ab4:	0044      	lsls	r4, r0, #1
10013ab6:	0e24      	lsrs	r4, r4, #24
10013ab8:	0fc5      	lsrs	r5, r0, #31
10013aba:	099b      	lsrs	r3, r3, #6
10013abc:	0e36      	lsrs	r6, r6, #24
10013abe:	0fc9      	lsrs	r1, r1, #31
10013ac0:	0992      	lsrs	r2, r2, #6
10013ac2:	2eff      	cmp	r6, #255	; 0xff
10013ac4:	d100      	bne.n	10013ac8 <__aeabi_fsub+0x1c>
10013ac6:	e083      	b.n	10013bd0 <__aeabi_fsub+0x124>
10013ac8:	2001      	movs	r0, #1
10013aca:	4041      	eors	r1, r0
10013acc:	1ba0      	subs	r0, r4, r6
10013ace:	42a9      	cmp	r1, r5
10013ad0:	d05c      	beq.n	10013b8c <__aeabi_fsub+0xe0>
10013ad2:	2800      	cmp	r0, #0
10013ad4:	dc00      	bgt.n	10013ad8 <__aeabi_fsub+0x2c>
10013ad6:	e095      	b.n	10013c04 <__aeabi_fsub+0x158>
10013ad8:	2e00      	cmp	r6, #0
10013ada:	d11c      	bne.n	10013b16 <__aeabi_fsub+0x6a>
10013adc:	2a00      	cmp	r2, #0
10013ade:	d000      	beq.n	10013ae2 <__aeabi_fsub+0x36>
10013ae0:	e081      	b.n	10013be6 <__aeabi_fsub+0x13a>
10013ae2:	075a      	lsls	r2, r3, #29
10013ae4:	d004      	beq.n	10013af0 <__aeabi_fsub+0x44>
10013ae6:	220f      	movs	r2, #15
10013ae8:	401a      	ands	r2, r3
10013aea:	2a04      	cmp	r2, #4
10013aec:	d000      	beq.n	10013af0 <__aeabi_fsub+0x44>
10013aee:	3304      	adds	r3, #4
10013af0:	015a      	lsls	r2, r3, #5
10013af2:	d53b      	bpl.n	10013b6c <__aeabi_fsub+0xc0>
10013af4:	3401      	adds	r4, #1
10013af6:	2cff      	cmp	r4, #255	; 0xff
10013af8:	d100      	bne.n	10013afc <__aeabi_fsub+0x50>
10013afa:	e091      	b.n	10013c20 <__aeabi_fsub+0x174>
10013afc:	2001      	movs	r0, #1
10013afe:	019b      	lsls	r3, r3, #6
10013b00:	0a5b      	lsrs	r3, r3, #9
10013b02:	b2e4      	uxtb	r4, r4
10013b04:	4005      	ands	r5, r0
10013b06:	025b      	lsls	r3, r3, #9
10013b08:	05e4      	lsls	r4, r4, #23
10013b0a:	0a5b      	lsrs	r3, r3, #9
10013b0c:	07ed      	lsls	r5, r5, #31
10013b0e:	4323      	orrs	r3, r4
10013b10:	432b      	orrs	r3, r5
10013b12:	0018      	movs	r0, r3
10013b14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10013b16:	2cff      	cmp	r4, #255	; 0xff
10013b18:	d0e3      	beq.n	10013ae2 <__aeabi_fsub+0x36>
10013b1a:	2180      	movs	r1, #128	; 0x80
10013b1c:	04c9      	lsls	r1, r1, #19
10013b1e:	430a      	orrs	r2, r1
10013b20:	281b      	cmp	r0, #27
10013b22:	dd00      	ble.n	10013b26 <__aeabi_fsub+0x7a>
10013b24:	e090      	b.n	10013c48 <__aeabi_fsub+0x19c>
10013b26:	0016      	movs	r6, r2
10013b28:	2120      	movs	r1, #32
10013b2a:	40c6      	lsrs	r6, r0
10013b2c:	1a08      	subs	r0, r1, r0
10013b2e:	4082      	lsls	r2, r0
10013b30:	1e51      	subs	r1, r2, #1
10013b32:	418a      	sbcs	r2, r1
10013b34:	4332      	orrs	r2, r6
10013b36:	1a9b      	subs	r3, r3, r2
10013b38:	015a      	lsls	r2, r3, #5
10013b3a:	d515      	bpl.n	10013b68 <__aeabi_fsub+0xbc>
10013b3c:	019b      	lsls	r3, r3, #6
10013b3e:	099e      	lsrs	r6, r3, #6
10013b40:	0030      	movs	r0, r6
10013b42:	f001 f92b 	bl	10014d9c <__clzsi2>
10013b46:	3805      	subs	r0, #5
10013b48:	4086      	lsls	r6, r0
10013b4a:	4284      	cmp	r4, r0
10013b4c:	dc6c      	bgt.n	10013c28 <__aeabi_fsub+0x17c>
10013b4e:	1b04      	subs	r4, r0, r4
10013b50:	0033      	movs	r3, r6
10013b52:	2020      	movs	r0, #32
10013b54:	3401      	adds	r4, #1
10013b56:	40e3      	lsrs	r3, r4
10013b58:	1b04      	subs	r4, r0, r4
10013b5a:	40a6      	lsls	r6, r4
10013b5c:	1e72      	subs	r2, r6, #1
10013b5e:	4196      	sbcs	r6, r2
10013b60:	2400      	movs	r4, #0
10013b62:	4333      	orrs	r3, r6
10013b64:	e7bd      	b.n	10013ae2 <__aeabi_fsub+0x36>
10013b66:	000d      	movs	r5, r1
10013b68:	075a      	lsls	r2, r3, #29
10013b6a:	d1bc      	bne.n	10013ae6 <__aeabi_fsub+0x3a>
10013b6c:	08df      	lsrs	r7, r3, #3
10013b6e:	2301      	movs	r3, #1
10013b70:	401d      	ands	r5, r3
10013b72:	2cff      	cmp	r4, #255	; 0xff
10013b74:	d133      	bne.n	10013bde <__aeabi_fsub+0x132>
10013b76:	2f00      	cmp	r7, #0
10013b78:	d100      	bne.n	10013b7c <__aeabi_fsub+0xd0>
10013b7a:	e090      	b.n	10013c9e <__aeabi_fsub+0x1f2>
10013b7c:	2280      	movs	r2, #128	; 0x80
10013b7e:	03d2      	lsls	r2, r2, #15
10013b80:	0013      	movs	r3, r2
10013b82:	433b      	orrs	r3, r7
10013b84:	025b      	lsls	r3, r3, #9
10013b86:	0a5b      	lsrs	r3, r3, #9
10013b88:	24ff      	movs	r4, #255	; 0xff
10013b8a:	e7bc      	b.n	10013b06 <__aeabi_fsub+0x5a>
10013b8c:	2800      	cmp	r0, #0
10013b8e:	dd4f      	ble.n	10013c30 <__aeabi_fsub+0x184>
10013b90:	2e00      	cmp	r6, #0
10013b92:	d02e      	beq.n	10013bf2 <__aeabi_fsub+0x146>
10013b94:	2cff      	cmp	r4, #255	; 0xff
10013b96:	d0a4      	beq.n	10013ae2 <__aeabi_fsub+0x36>
10013b98:	2580      	movs	r5, #128	; 0x80
10013b9a:	04ed      	lsls	r5, r5, #19
10013b9c:	432a      	orrs	r2, r5
10013b9e:	281b      	cmp	r0, #27
10013ba0:	dd00      	ble.n	10013ba4 <__aeabi_fsub+0xf8>
10013ba2:	e097      	b.n	10013cd4 <__aeabi_fsub+0x228>
10013ba4:	0016      	movs	r6, r2
10013ba6:	2520      	movs	r5, #32
10013ba8:	40c6      	lsrs	r6, r0
10013baa:	1a28      	subs	r0, r5, r0
10013bac:	4082      	lsls	r2, r0
10013bae:	1e50      	subs	r0, r2, #1
10013bb0:	4182      	sbcs	r2, r0
10013bb2:	4332      	orrs	r2, r6
10013bb4:	189b      	adds	r3, r3, r2
10013bb6:	015a      	lsls	r2, r3, #5
10013bb8:	d5d5      	bpl.n	10013b66 <__aeabi_fsub+0xba>
10013bba:	3401      	adds	r4, #1
10013bbc:	2cff      	cmp	r4, #255	; 0xff
10013bbe:	d06d      	beq.n	10013c9c <__aeabi_fsub+0x1f0>
10013bc0:	2201      	movs	r2, #1
10013bc2:	487b      	ldr	r0, [pc, #492]	; (10013db0 <__aeabi_fsub+0x304>)
10013bc4:	401a      	ands	r2, r3
10013bc6:	085b      	lsrs	r3, r3, #1
10013bc8:	4003      	ands	r3, r0
10013bca:	4313      	orrs	r3, r2
10013bcc:	000d      	movs	r5, r1
10013bce:	e788      	b.n	10013ae2 <__aeabi_fsub+0x36>
10013bd0:	2a00      	cmp	r2, #0
10013bd2:	d000      	beq.n	10013bd6 <__aeabi_fsub+0x12a>
10013bd4:	e77a      	b.n	10013acc <__aeabi_fsub+0x20>
10013bd6:	e777      	b.n	10013ac8 <__aeabi_fsub+0x1c>
10013bd8:	1e03      	subs	r3, r0, #0
10013bda:	d1c5      	bne.n	10013b68 <__aeabi_fsub+0xbc>
10013bdc:	2500      	movs	r5, #0
10013bde:	027b      	lsls	r3, r7, #9
10013be0:	0a5b      	lsrs	r3, r3, #9
10013be2:	b2e4      	uxtb	r4, r4
10013be4:	e78f      	b.n	10013b06 <__aeabi_fsub+0x5a>
10013be6:	3801      	subs	r0, #1
10013be8:	2800      	cmp	r0, #0
10013bea:	d0a4      	beq.n	10013b36 <__aeabi_fsub+0x8a>
10013bec:	2cff      	cmp	r4, #255	; 0xff
10013bee:	d197      	bne.n	10013b20 <__aeabi_fsub+0x74>
10013bf0:	e777      	b.n	10013ae2 <__aeabi_fsub+0x36>
10013bf2:	2a00      	cmp	r2, #0
10013bf4:	d100      	bne.n	10013bf8 <__aeabi_fsub+0x14c>
10013bf6:	e774      	b.n	10013ae2 <__aeabi_fsub+0x36>
10013bf8:	3801      	subs	r0, #1
10013bfa:	2800      	cmp	r0, #0
10013bfc:	d0da      	beq.n	10013bb4 <__aeabi_fsub+0x108>
10013bfe:	2cff      	cmp	r4, #255	; 0xff
10013c00:	d1cd      	bne.n	10013b9e <__aeabi_fsub+0xf2>
10013c02:	e76e      	b.n	10013ae2 <__aeabi_fsub+0x36>
10013c04:	2800      	cmp	r0, #0
10013c06:	d121      	bne.n	10013c4c <__aeabi_fsub+0x1a0>
10013c08:	1c60      	adds	r0, r4, #1
10013c0a:	b2c0      	uxtb	r0, r0
10013c0c:	2801      	cmp	r0, #1
10013c0e:	dd58      	ble.n	10013cc2 <__aeabi_fsub+0x216>
10013c10:	2780      	movs	r7, #128	; 0x80
10013c12:	1a9e      	subs	r6, r3, r2
10013c14:	04ff      	lsls	r7, r7, #19
10013c16:	4037      	ands	r7, r6
10013c18:	d02f      	beq.n	10013c7a <__aeabi_fsub+0x1ce>
10013c1a:	1ad6      	subs	r6, r2, r3
10013c1c:	000d      	movs	r5, r1
10013c1e:	e78f      	b.n	10013b40 <__aeabi_fsub+0x94>
10013c20:	2301      	movs	r3, #1
10013c22:	401d      	ands	r5, r3
10013c24:	2300      	movs	r3, #0
10013c26:	e76e      	b.n	10013b06 <__aeabi_fsub+0x5a>
10013c28:	4b62      	ldr	r3, [pc, #392]	; (10013db4 <__aeabi_fsub+0x308>)
10013c2a:	1a24      	subs	r4, r4, r0
10013c2c:	4033      	ands	r3, r6
10013c2e:	e758      	b.n	10013ae2 <__aeabi_fsub+0x36>
10013c30:	2800      	cmp	r0, #0
10013c32:	d151      	bne.n	10013cd8 <__aeabi_fsub+0x22c>
10013c34:	1c60      	adds	r0, r4, #1
10013c36:	b2c6      	uxtb	r6, r0
10013c38:	2e01      	cmp	r6, #1
10013c3a:	dd33      	ble.n	10013ca4 <__aeabi_fsub+0x1f8>
10013c3c:	28ff      	cmp	r0, #255	; 0xff
10013c3e:	d02d      	beq.n	10013c9c <__aeabi_fsub+0x1f0>
10013c40:	189b      	adds	r3, r3, r2
10013c42:	085b      	lsrs	r3, r3, #1
10013c44:	0004      	movs	r4, r0
10013c46:	e74c      	b.n	10013ae2 <__aeabi_fsub+0x36>
10013c48:	2201      	movs	r2, #1
10013c4a:	e774      	b.n	10013b36 <__aeabi_fsub+0x8a>
10013c4c:	2c00      	cmp	r4, #0
10013c4e:	d01a      	beq.n	10013c86 <__aeabi_fsub+0x1da>
10013c50:	2eff      	cmp	r6, #255	; 0xff
10013c52:	d01f      	beq.n	10013c94 <__aeabi_fsub+0x1e8>
10013c54:	2480      	movs	r4, #128	; 0x80
10013c56:	04e4      	lsls	r4, r4, #19
10013c58:	4240      	negs	r0, r0
10013c5a:	4323      	orrs	r3, r4
10013c5c:	281b      	cmp	r0, #27
10013c5e:	dd00      	ble.n	10013c62 <__aeabi_fsub+0x1b6>
10013c60:	e096      	b.n	10013d90 <__aeabi_fsub+0x2e4>
10013c62:	001d      	movs	r5, r3
10013c64:	2420      	movs	r4, #32
10013c66:	40c5      	lsrs	r5, r0
10013c68:	1a20      	subs	r0, r4, r0
10013c6a:	4083      	lsls	r3, r0
10013c6c:	1e58      	subs	r0, r3, #1
10013c6e:	4183      	sbcs	r3, r0
10013c70:	432b      	orrs	r3, r5
10013c72:	1ad3      	subs	r3, r2, r3
10013c74:	0034      	movs	r4, r6
10013c76:	000d      	movs	r5, r1
10013c78:	e75e      	b.n	10013b38 <__aeabi_fsub+0x8c>
10013c7a:	2e00      	cmp	r6, #0
10013c7c:	d000      	beq.n	10013c80 <__aeabi_fsub+0x1d4>
10013c7e:	e75f      	b.n	10013b40 <__aeabi_fsub+0x94>
10013c80:	2500      	movs	r5, #0
10013c82:	2400      	movs	r4, #0
10013c84:	e7ab      	b.n	10013bde <__aeabi_fsub+0x132>
10013c86:	2b00      	cmp	r3, #0
10013c88:	d044      	beq.n	10013d14 <__aeabi_fsub+0x268>
10013c8a:	43c0      	mvns	r0, r0
10013c8c:	2800      	cmp	r0, #0
10013c8e:	d0f0      	beq.n	10013c72 <__aeabi_fsub+0x1c6>
10013c90:	2eff      	cmp	r6, #255	; 0xff
10013c92:	d1e3      	bne.n	10013c5c <__aeabi_fsub+0x1b0>
10013c94:	0013      	movs	r3, r2
10013c96:	24ff      	movs	r4, #255	; 0xff
10013c98:	000d      	movs	r5, r1
10013c9a:	e722      	b.n	10013ae2 <__aeabi_fsub+0x36>
10013c9c:	000d      	movs	r5, r1
10013c9e:	24ff      	movs	r4, #255	; 0xff
10013ca0:	2300      	movs	r3, #0
10013ca2:	e730      	b.n	10013b06 <__aeabi_fsub+0x5a>
10013ca4:	2c00      	cmp	r4, #0
10013ca6:	d15d      	bne.n	10013d64 <__aeabi_fsub+0x2b8>
10013ca8:	2b00      	cmp	r3, #0
10013caa:	d07d      	beq.n	10013da8 <__aeabi_fsub+0x2fc>
10013cac:	2a00      	cmp	r2, #0
10013cae:	d100      	bne.n	10013cb2 <__aeabi_fsub+0x206>
10013cb0:	e717      	b.n	10013ae2 <__aeabi_fsub+0x36>
10013cb2:	189b      	adds	r3, r3, r2
10013cb4:	015a      	lsls	r2, r3, #5
10013cb6:	d400      	bmi.n	10013cba <__aeabi_fsub+0x20e>
10013cb8:	e756      	b.n	10013b68 <__aeabi_fsub+0xbc>
10013cba:	4a3e      	ldr	r2, [pc, #248]	; (10013db4 <__aeabi_fsub+0x308>)
10013cbc:	0004      	movs	r4, r0
10013cbe:	4013      	ands	r3, r2
10013cc0:	e70f      	b.n	10013ae2 <__aeabi_fsub+0x36>
10013cc2:	2c00      	cmp	r4, #0
10013cc4:	d11e      	bne.n	10013d04 <__aeabi_fsub+0x258>
10013cc6:	2b00      	cmp	r3, #0
10013cc8:	d12f      	bne.n	10013d2a <__aeabi_fsub+0x27e>
10013cca:	2a00      	cmp	r2, #0
10013ccc:	d065      	beq.n	10013d9a <__aeabi_fsub+0x2ee>
10013cce:	0013      	movs	r3, r2
10013cd0:	000d      	movs	r5, r1
10013cd2:	e706      	b.n	10013ae2 <__aeabi_fsub+0x36>
10013cd4:	2201      	movs	r2, #1
10013cd6:	e76d      	b.n	10013bb4 <__aeabi_fsub+0x108>
10013cd8:	2c00      	cmp	r4, #0
10013cda:	d11f      	bne.n	10013d1c <__aeabi_fsub+0x270>
10013cdc:	2b00      	cmp	r3, #0
10013cde:	d059      	beq.n	10013d94 <__aeabi_fsub+0x2e8>
10013ce0:	43c0      	mvns	r0, r0
10013ce2:	2800      	cmp	r0, #0
10013ce4:	d00b      	beq.n	10013cfe <__aeabi_fsub+0x252>
10013ce6:	2eff      	cmp	r6, #255	; 0xff
10013ce8:	d04f      	beq.n	10013d8a <__aeabi_fsub+0x2de>
10013cea:	281b      	cmp	r0, #27
10013cec:	dc5e      	bgt.n	10013dac <__aeabi_fsub+0x300>
10013cee:	001d      	movs	r5, r3
10013cf0:	2420      	movs	r4, #32
10013cf2:	40c5      	lsrs	r5, r0
10013cf4:	1a20      	subs	r0, r4, r0
10013cf6:	4083      	lsls	r3, r0
10013cf8:	1e58      	subs	r0, r3, #1
10013cfa:	4183      	sbcs	r3, r0
10013cfc:	432b      	orrs	r3, r5
10013cfe:	189b      	adds	r3, r3, r2
10013d00:	0034      	movs	r4, r6
10013d02:	e758      	b.n	10013bb6 <__aeabi_fsub+0x10a>
10013d04:	2b00      	cmp	r3, #0
10013d06:	d11c      	bne.n	10013d42 <__aeabi_fsub+0x296>
10013d08:	2a00      	cmp	r2, #0
10013d0a:	d049      	beq.n	10013da0 <__aeabi_fsub+0x2f4>
10013d0c:	0013      	movs	r3, r2
10013d0e:	000d      	movs	r5, r1
10013d10:	24ff      	movs	r4, #255	; 0xff
10013d12:	e6e6      	b.n	10013ae2 <__aeabi_fsub+0x36>
10013d14:	0013      	movs	r3, r2
10013d16:	0034      	movs	r4, r6
10013d18:	000d      	movs	r5, r1
10013d1a:	e6e2      	b.n	10013ae2 <__aeabi_fsub+0x36>
10013d1c:	2eff      	cmp	r6, #255	; 0xff
10013d1e:	d034      	beq.n	10013d8a <__aeabi_fsub+0x2de>
10013d20:	2480      	movs	r4, #128	; 0x80
10013d22:	04e4      	lsls	r4, r4, #19
10013d24:	4240      	negs	r0, r0
10013d26:	4323      	orrs	r3, r4
10013d28:	e7df      	b.n	10013cea <__aeabi_fsub+0x23e>
10013d2a:	2a00      	cmp	r2, #0
10013d2c:	d100      	bne.n	10013d30 <__aeabi_fsub+0x284>
10013d2e:	e6d8      	b.n	10013ae2 <__aeabi_fsub+0x36>
10013d30:	2780      	movs	r7, #128	; 0x80
10013d32:	1a98      	subs	r0, r3, r2
10013d34:	04ff      	lsls	r7, r7, #19
10013d36:	4007      	ands	r7, r0
10013d38:	d100      	bne.n	10013d3c <__aeabi_fsub+0x290>
10013d3a:	e74d      	b.n	10013bd8 <__aeabi_fsub+0x12c>
10013d3c:	1ad3      	subs	r3, r2, r3
10013d3e:	000d      	movs	r5, r1
10013d40:	e6cf      	b.n	10013ae2 <__aeabi_fsub+0x36>
10013d42:	24ff      	movs	r4, #255	; 0xff
10013d44:	2a00      	cmp	r2, #0
10013d46:	d100      	bne.n	10013d4a <__aeabi_fsub+0x29e>
10013d48:	e6cb      	b.n	10013ae2 <__aeabi_fsub+0x36>
10013d4a:	2080      	movs	r0, #128	; 0x80
10013d4c:	08db      	lsrs	r3, r3, #3
10013d4e:	03c0      	lsls	r0, r0, #15
10013d50:	4203      	tst	r3, r0
10013d52:	d004      	beq.n	10013d5e <__aeabi_fsub+0x2b2>
10013d54:	08d2      	lsrs	r2, r2, #3
10013d56:	4202      	tst	r2, r0
10013d58:	d101      	bne.n	10013d5e <__aeabi_fsub+0x2b2>
10013d5a:	0013      	movs	r3, r2
10013d5c:	000d      	movs	r5, r1
10013d5e:	00db      	lsls	r3, r3, #3
10013d60:	24ff      	movs	r4, #255	; 0xff
10013d62:	e6be      	b.n	10013ae2 <__aeabi_fsub+0x36>
10013d64:	2b00      	cmp	r3, #0
10013d66:	d010      	beq.n	10013d8a <__aeabi_fsub+0x2de>
10013d68:	24ff      	movs	r4, #255	; 0xff
10013d6a:	2a00      	cmp	r2, #0
10013d6c:	d100      	bne.n	10013d70 <__aeabi_fsub+0x2c4>
10013d6e:	e6b8      	b.n	10013ae2 <__aeabi_fsub+0x36>
10013d70:	2080      	movs	r0, #128	; 0x80
10013d72:	08db      	lsrs	r3, r3, #3
10013d74:	03c0      	lsls	r0, r0, #15
10013d76:	4203      	tst	r3, r0
10013d78:	d003      	beq.n	10013d82 <__aeabi_fsub+0x2d6>
10013d7a:	08d2      	lsrs	r2, r2, #3
10013d7c:	4202      	tst	r2, r0
10013d7e:	d100      	bne.n	10013d82 <__aeabi_fsub+0x2d6>
10013d80:	0013      	movs	r3, r2
10013d82:	00db      	lsls	r3, r3, #3
10013d84:	000d      	movs	r5, r1
10013d86:	24ff      	movs	r4, #255	; 0xff
10013d88:	e6ab      	b.n	10013ae2 <__aeabi_fsub+0x36>
10013d8a:	0013      	movs	r3, r2
10013d8c:	24ff      	movs	r4, #255	; 0xff
10013d8e:	e6a8      	b.n	10013ae2 <__aeabi_fsub+0x36>
10013d90:	2301      	movs	r3, #1
10013d92:	e76e      	b.n	10013c72 <__aeabi_fsub+0x1c6>
10013d94:	0013      	movs	r3, r2
10013d96:	0034      	movs	r4, r6
10013d98:	e6a3      	b.n	10013ae2 <__aeabi_fsub+0x36>
10013d9a:	2700      	movs	r7, #0
10013d9c:	2500      	movs	r5, #0
10013d9e:	e71e      	b.n	10013bde <__aeabi_fsub+0x132>
10013da0:	2780      	movs	r7, #128	; 0x80
10013da2:	2500      	movs	r5, #0
10013da4:	03ff      	lsls	r7, r7, #15
10013da6:	e6e9      	b.n	10013b7c <__aeabi_fsub+0xd0>
10013da8:	0013      	movs	r3, r2
10013daa:	e69a      	b.n	10013ae2 <__aeabi_fsub+0x36>
10013dac:	2301      	movs	r3, #1
10013dae:	e7a6      	b.n	10013cfe <__aeabi_fsub+0x252>
10013db0:	7dffffff 	.word	0x7dffffff
10013db4:	fbffffff 	.word	0xfbffffff

10013db8 <__aeabi_f2iz>:
10013db8:	0243      	lsls	r3, r0, #9
10013dba:	0a59      	lsrs	r1, r3, #9
10013dbc:	0043      	lsls	r3, r0, #1
10013dbe:	0fc2      	lsrs	r2, r0, #31
10013dc0:	0e1b      	lsrs	r3, r3, #24
10013dc2:	2000      	movs	r0, #0
10013dc4:	2b7e      	cmp	r3, #126	; 0x7e
10013dc6:	dd0e      	ble.n	10013de6 <__aeabi_f2iz+0x2e>
10013dc8:	2b9d      	cmp	r3, #157	; 0x9d
10013dca:	dc0d      	bgt.n	10013de8 <__aeabi_f2iz+0x30>
10013dcc:	2080      	movs	r0, #128	; 0x80
10013dce:	0400      	lsls	r0, r0, #16
10013dd0:	4301      	orrs	r1, r0
10013dd2:	2b95      	cmp	r3, #149	; 0x95
10013dd4:	dc0b      	bgt.n	10013dee <__aeabi_f2iz+0x36>
10013dd6:	2096      	movs	r0, #150	; 0x96
10013dd8:	1ac3      	subs	r3, r0, r3
10013dda:	40d9      	lsrs	r1, r3
10013ddc:	000b      	movs	r3, r1
10013dde:	4258      	negs	r0, r3
10013de0:	2a00      	cmp	r2, #0
10013de2:	d100      	bne.n	10013de6 <__aeabi_f2iz+0x2e>
10013de4:	0018      	movs	r0, r3
10013de6:	4770      	bx	lr
10013de8:	4b03      	ldr	r3, [pc, #12]	; (10013df8 <__aeabi_f2iz+0x40>)
10013dea:	18d0      	adds	r0, r2, r3
10013dec:	e7fb      	b.n	10013de6 <__aeabi_f2iz+0x2e>
10013dee:	3b96      	subs	r3, #150	; 0x96
10013df0:	4099      	lsls	r1, r3
10013df2:	000b      	movs	r3, r1
10013df4:	e7f3      	b.n	10013dde <__aeabi_f2iz+0x26>
10013df6:	46c0      	nop			; (mov r8, r8)
10013df8:	7fffffff 	.word	0x7fffffff

10013dfc <__aeabi_i2f>:
10013dfc:	b570      	push	{r4, r5, r6, lr}
10013dfe:	2800      	cmp	r0, #0
10013e00:	d030      	beq.n	10013e64 <__aeabi_i2f+0x68>
10013e02:	17c3      	asrs	r3, r0, #31
10013e04:	18c5      	adds	r5, r0, r3
10013e06:	405d      	eors	r5, r3
10013e08:	0fc4      	lsrs	r4, r0, #31
10013e0a:	0028      	movs	r0, r5
10013e0c:	f000 ffc6 	bl	10014d9c <__clzsi2>
10013e10:	239e      	movs	r3, #158	; 0x9e
10013e12:	1a1b      	subs	r3, r3, r0
10013e14:	2b96      	cmp	r3, #150	; 0x96
10013e16:	dc0d      	bgt.n	10013e34 <__aeabi_i2f+0x38>
10013e18:	2296      	movs	r2, #150	; 0x96
10013e1a:	1ad2      	subs	r2, r2, r3
10013e1c:	4095      	lsls	r5, r2
10013e1e:	026a      	lsls	r2, r5, #9
10013e20:	0a52      	lsrs	r2, r2, #9
10013e22:	b2d8      	uxtb	r0, r3
10013e24:	0252      	lsls	r2, r2, #9
10013e26:	05c0      	lsls	r0, r0, #23
10013e28:	0a52      	lsrs	r2, r2, #9
10013e2a:	07e4      	lsls	r4, r4, #31
10013e2c:	4302      	orrs	r2, r0
10013e2e:	4322      	orrs	r2, r4
10013e30:	0010      	movs	r0, r2
10013e32:	bd70      	pop	{r4, r5, r6, pc}
10013e34:	2b99      	cmp	r3, #153	; 0x99
10013e36:	dc19      	bgt.n	10013e6c <__aeabi_i2f+0x70>
10013e38:	2299      	movs	r2, #153	; 0x99
10013e3a:	1ad2      	subs	r2, r2, r3
10013e3c:	4095      	lsls	r5, r2
10013e3e:	4a12      	ldr	r2, [pc, #72]	; (10013e88 <__aeabi_i2f+0x8c>)
10013e40:	402a      	ands	r2, r5
10013e42:	0769      	lsls	r1, r5, #29
10013e44:	d004      	beq.n	10013e50 <__aeabi_i2f+0x54>
10013e46:	210f      	movs	r1, #15
10013e48:	400d      	ands	r5, r1
10013e4a:	2d04      	cmp	r5, #4
10013e4c:	d000      	beq.n	10013e50 <__aeabi_i2f+0x54>
10013e4e:	3204      	adds	r2, #4
10013e50:	0151      	lsls	r1, r2, #5
10013e52:	d503      	bpl.n	10013e5c <__aeabi_i2f+0x60>
10013e54:	4b0c      	ldr	r3, [pc, #48]	; (10013e88 <__aeabi_i2f+0x8c>)
10013e56:	401a      	ands	r2, r3
10013e58:	239f      	movs	r3, #159	; 0x9f
10013e5a:	1a1b      	subs	r3, r3, r0
10013e5c:	0192      	lsls	r2, r2, #6
10013e5e:	0a52      	lsrs	r2, r2, #9
10013e60:	b2d8      	uxtb	r0, r3
10013e62:	e7df      	b.n	10013e24 <__aeabi_i2f+0x28>
10013e64:	2400      	movs	r4, #0
10013e66:	2000      	movs	r0, #0
10013e68:	2200      	movs	r2, #0
10013e6a:	e7db      	b.n	10013e24 <__aeabi_i2f+0x28>
10013e6c:	2205      	movs	r2, #5
10013e6e:	002e      	movs	r6, r5
10013e70:	1a12      	subs	r2, r2, r0
10013e72:	21b9      	movs	r1, #185	; 0xb9
10013e74:	40d6      	lsrs	r6, r2
10013e76:	002a      	movs	r2, r5
10013e78:	1ac9      	subs	r1, r1, r3
10013e7a:	408a      	lsls	r2, r1
10013e7c:	1e55      	subs	r5, r2, #1
10013e7e:	41aa      	sbcs	r2, r5
10013e80:	0035      	movs	r5, r6
10013e82:	4315      	orrs	r5, r2
10013e84:	e7db      	b.n	10013e3e <__aeabi_i2f+0x42>
10013e86:	46c0      	nop			; (mov r8, r8)
10013e88:	fbffffff 	.word	0xfbffffff

10013e8c <__aeabi_ui2f>:
10013e8c:	b570      	push	{r4, r5, r6, lr}
10013e8e:	1e04      	subs	r4, r0, #0
10013e90:	d028      	beq.n	10013ee4 <__aeabi_ui2f+0x58>
10013e92:	f000 ff83 	bl	10014d9c <__clzsi2>
10013e96:	239e      	movs	r3, #158	; 0x9e
10013e98:	1a1b      	subs	r3, r3, r0
10013e9a:	2b96      	cmp	r3, #150	; 0x96
10013e9c:	dc0a      	bgt.n	10013eb4 <__aeabi_ui2f+0x28>
10013e9e:	2296      	movs	r2, #150	; 0x96
10013ea0:	1ad2      	subs	r2, r2, r3
10013ea2:	4094      	lsls	r4, r2
10013ea4:	0262      	lsls	r2, r4, #9
10013ea6:	0a52      	lsrs	r2, r2, #9
10013ea8:	b2d8      	uxtb	r0, r3
10013eaa:	0252      	lsls	r2, r2, #9
10013eac:	0a52      	lsrs	r2, r2, #9
10013eae:	05c0      	lsls	r0, r0, #23
10013eb0:	4310      	orrs	r0, r2
10013eb2:	bd70      	pop	{r4, r5, r6, pc}
10013eb4:	2b99      	cmp	r3, #153	; 0x99
10013eb6:	dc18      	bgt.n	10013eea <__aeabi_ui2f+0x5e>
10013eb8:	2299      	movs	r2, #153	; 0x99
10013eba:	1ad2      	subs	r2, r2, r3
10013ebc:	4094      	lsls	r4, r2
10013ebe:	4a11      	ldr	r2, [pc, #68]	; (10013f04 <__aeabi_ui2f+0x78>)
10013ec0:	4022      	ands	r2, r4
10013ec2:	0761      	lsls	r1, r4, #29
10013ec4:	d004      	beq.n	10013ed0 <__aeabi_ui2f+0x44>
10013ec6:	210f      	movs	r1, #15
10013ec8:	400c      	ands	r4, r1
10013eca:	2c04      	cmp	r4, #4
10013ecc:	d000      	beq.n	10013ed0 <__aeabi_ui2f+0x44>
10013ece:	3204      	adds	r2, #4
10013ed0:	0151      	lsls	r1, r2, #5
10013ed2:	d503      	bpl.n	10013edc <__aeabi_ui2f+0x50>
10013ed4:	4b0b      	ldr	r3, [pc, #44]	; (10013f04 <__aeabi_ui2f+0x78>)
10013ed6:	401a      	ands	r2, r3
10013ed8:	239f      	movs	r3, #159	; 0x9f
10013eda:	1a1b      	subs	r3, r3, r0
10013edc:	0192      	lsls	r2, r2, #6
10013ede:	0a52      	lsrs	r2, r2, #9
10013ee0:	b2d8      	uxtb	r0, r3
10013ee2:	e7e2      	b.n	10013eaa <__aeabi_ui2f+0x1e>
10013ee4:	2000      	movs	r0, #0
10013ee6:	2200      	movs	r2, #0
10013ee8:	e7df      	b.n	10013eaa <__aeabi_ui2f+0x1e>
10013eea:	2205      	movs	r2, #5
10013eec:	0025      	movs	r5, r4
10013eee:	1a12      	subs	r2, r2, r0
10013ef0:	21b9      	movs	r1, #185	; 0xb9
10013ef2:	40d5      	lsrs	r5, r2
10013ef4:	0022      	movs	r2, r4
10013ef6:	1ac9      	subs	r1, r1, r3
10013ef8:	408a      	lsls	r2, r1
10013efa:	1e54      	subs	r4, r2, #1
10013efc:	41a2      	sbcs	r2, r4
10013efe:	002c      	movs	r4, r5
10013f00:	4314      	orrs	r4, r2
10013f02:	e7dc      	b.n	10013ebe <__aeabi_ui2f+0x32>
10013f04:	fbffffff 	.word	0xfbffffff

10013f08 <__eqdf2>:
10013f08:	b5f0      	push	{r4, r5, r6, r7, lr}
10013f0a:	465f      	mov	r7, fp
10013f0c:	4656      	mov	r6, sl
10013f0e:	464d      	mov	r5, r9
10013f10:	4644      	mov	r4, r8
10013f12:	b4f0      	push	{r4, r5, r6, r7}
10013f14:	031f      	lsls	r7, r3, #12
10013f16:	005c      	lsls	r4, r3, #1
10013f18:	0fdb      	lsrs	r3, r3, #31
10013f1a:	469a      	mov	sl, r3
10013f1c:	4b19      	ldr	r3, [pc, #100]	; (10013f84 <__eqdf2+0x7c>)
10013f1e:	030e      	lsls	r6, r1, #12
10013f20:	004d      	lsls	r5, r1, #1
10013f22:	0fc9      	lsrs	r1, r1, #31
10013f24:	4680      	mov	r8, r0
10013f26:	0b36      	lsrs	r6, r6, #12
10013f28:	0d6d      	lsrs	r5, r5, #21
10013f2a:	468b      	mov	fp, r1
10013f2c:	4691      	mov	r9, r2
10013f2e:	0b3f      	lsrs	r7, r7, #12
10013f30:	0d64      	lsrs	r4, r4, #21
10013f32:	429d      	cmp	r5, r3
10013f34:	d019      	beq.n	10013f6a <__eqdf2+0x62>
10013f36:	4b13      	ldr	r3, [pc, #76]	; (10013f84 <__eqdf2+0x7c>)
10013f38:	429c      	cmp	r4, r3
10013f3a:	d01b      	beq.n	10013f74 <__eqdf2+0x6c>
10013f3c:	2301      	movs	r3, #1
10013f3e:	42a5      	cmp	r5, r4
10013f40:	d006      	beq.n	10013f50 <__eqdf2+0x48>
10013f42:	0018      	movs	r0, r3
10013f44:	bc3c      	pop	{r2, r3, r4, r5}
10013f46:	4690      	mov	r8, r2
10013f48:	4699      	mov	r9, r3
10013f4a:	46a2      	mov	sl, r4
10013f4c:	46ab      	mov	fp, r5
10013f4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10013f50:	42be      	cmp	r6, r7
10013f52:	d1f6      	bne.n	10013f42 <__eqdf2+0x3a>
10013f54:	45c8      	cmp	r8, r9
10013f56:	d1f4      	bne.n	10013f42 <__eqdf2+0x3a>
10013f58:	45d3      	cmp	fp, sl
10013f5a:	d010      	beq.n	10013f7e <__eqdf2+0x76>
10013f5c:	2d00      	cmp	r5, #0
10013f5e:	d1f0      	bne.n	10013f42 <__eqdf2+0x3a>
10013f60:	4330      	orrs	r0, r6
10013f62:	0003      	movs	r3, r0
10013f64:	1e5a      	subs	r2, r3, #1
10013f66:	4193      	sbcs	r3, r2
10013f68:	e7eb      	b.n	10013f42 <__eqdf2+0x3a>
10013f6a:	0031      	movs	r1, r6
10013f6c:	2301      	movs	r3, #1
10013f6e:	4301      	orrs	r1, r0
10013f70:	d1e7      	bne.n	10013f42 <__eqdf2+0x3a>
10013f72:	e7e0      	b.n	10013f36 <__eqdf2+0x2e>
10013f74:	433a      	orrs	r2, r7
10013f76:	2301      	movs	r3, #1
10013f78:	2a00      	cmp	r2, #0
10013f7a:	d1e2      	bne.n	10013f42 <__eqdf2+0x3a>
10013f7c:	e7de      	b.n	10013f3c <__eqdf2+0x34>
10013f7e:	2300      	movs	r3, #0
10013f80:	e7df      	b.n	10013f42 <__eqdf2+0x3a>
10013f82:	46c0      	nop			; (mov r8, r8)
10013f84:	000007ff 	.word	0x000007ff

10013f88 <__gedf2>:
10013f88:	b5f0      	push	{r4, r5, r6, r7, lr}
10013f8a:	465f      	mov	r7, fp
10013f8c:	4644      	mov	r4, r8
10013f8e:	4656      	mov	r6, sl
10013f90:	464d      	mov	r5, r9
10013f92:	b4f0      	push	{r4, r5, r6, r7}
10013f94:	031f      	lsls	r7, r3, #12
10013f96:	0b3c      	lsrs	r4, r7, #12
10013f98:	4f2c      	ldr	r7, [pc, #176]	; (1001404c <__gedf2+0xc4>)
10013f9a:	030e      	lsls	r6, r1, #12
10013f9c:	004d      	lsls	r5, r1, #1
10013f9e:	46a3      	mov	fp, r4
10013fa0:	005c      	lsls	r4, r3, #1
10013fa2:	4684      	mov	ip, r0
10013fa4:	0b36      	lsrs	r6, r6, #12
10013fa6:	0d6d      	lsrs	r5, r5, #21
10013fa8:	0fc9      	lsrs	r1, r1, #31
10013faa:	4690      	mov	r8, r2
10013fac:	0d64      	lsrs	r4, r4, #21
10013fae:	0fdb      	lsrs	r3, r3, #31
10013fb0:	42bd      	cmp	r5, r7
10013fb2:	d02b      	beq.n	1001400c <__gedf2+0x84>
10013fb4:	4f25      	ldr	r7, [pc, #148]	; (1001404c <__gedf2+0xc4>)
10013fb6:	42bc      	cmp	r4, r7
10013fb8:	d02e      	beq.n	10014018 <__gedf2+0x90>
10013fba:	2d00      	cmp	r5, #0
10013fbc:	d10e      	bne.n	10013fdc <__gedf2+0x54>
10013fbe:	4330      	orrs	r0, r6
10013fc0:	0007      	movs	r7, r0
10013fc2:	4681      	mov	r9, r0
10013fc4:	4278      	negs	r0, r7
10013fc6:	4178      	adcs	r0, r7
10013fc8:	2c00      	cmp	r4, #0
10013fca:	d117      	bne.n	10013ffc <__gedf2+0x74>
10013fcc:	465f      	mov	r7, fp
10013fce:	433a      	orrs	r2, r7
10013fd0:	d114      	bne.n	10013ffc <__gedf2+0x74>
10013fd2:	464b      	mov	r3, r9
10013fd4:	2000      	movs	r0, #0
10013fd6:	2b00      	cmp	r3, #0
10013fd8:	d00a      	beq.n	10013ff0 <__gedf2+0x68>
10013fda:	e006      	b.n	10013fea <__gedf2+0x62>
10013fdc:	2c00      	cmp	r4, #0
10013fde:	d102      	bne.n	10013fe6 <__gedf2+0x5e>
10013fe0:	4658      	mov	r0, fp
10013fe2:	4302      	orrs	r2, r0
10013fe4:	d001      	beq.n	10013fea <__gedf2+0x62>
10013fe6:	4299      	cmp	r1, r3
10013fe8:	d01a      	beq.n	10014020 <__gedf2+0x98>
10013fea:	2301      	movs	r3, #1
10013fec:	4248      	negs	r0, r1
10013fee:	4318      	orrs	r0, r3
10013ff0:	bc3c      	pop	{r2, r3, r4, r5}
10013ff2:	4690      	mov	r8, r2
10013ff4:	4699      	mov	r9, r3
10013ff6:	46a2      	mov	sl, r4
10013ff8:	46ab      	mov	fp, r5
10013ffa:	bdf0      	pop	{r4, r5, r6, r7, pc}
10013ffc:	2800      	cmp	r0, #0
10013ffe:	d0f2      	beq.n	10013fe6 <__gedf2+0x5e>
10014000:	4258      	negs	r0, r3
10014002:	4158      	adcs	r0, r3
10014004:	2201      	movs	r2, #1
10014006:	4240      	negs	r0, r0
10014008:	4310      	orrs	r0, r2
1001400a:	e7f1      	b.n	10013ff0 <__gedf2+0x68>
1001400c:	0037      	movs	r7, r6
1001400e:	4307      	orrs	r7, r0
10014010:	d0d0      	beq.n	10013fb4 <__gedf2+0x2c>
10014012:	2002      	movs	r0, #2
10014014:	4240      	negs	r0, r0
10014016:	e7eb      	b.n	10013ff0 <__gedf2+0x68>
10014018:	465f      	mov	r7, fp
1001401a:	4317      	orrs	r7, r2
1001401c:	d0cd      	beq.n	10013fba <__gedf2+0x32>
1001401e:	e7f8      	b.n	10014012 <__gedf2+0x8a>
10014020:	42a5      	cmp	r5, r4
10014022:	dce2      	bgt.n	10013fea <__gedf2+0x62>
10014024:	db05      	blt.n	10014032 <__gedf2+0xaa>
10014026:	455e      	cmp	r6, fp
10014028:	d8df      	bhi.n	10013fea <__gedf2+0x62>
1001402a:	d008      	beq.n	1001403e <__gedf2+0xb6>
1001402c:	2000      	movs	r0, #0
1001402e:	455e      	cmp	r6, fp
10014030:	d2de      	bcs.n	10013ff0 <__gedf2+0x68>
10014032:	4248      	negs	r0, r1
10014034:	4148      	adcs	r0, r1
10014036:	2301      	movs	r3, #1
10014038:	4240      	negs	r0, r0
1001403a:	4318      	orrs	r0, r3
1001403c:	e7d8      	b.n	10013ff0 <__gedf2+0x68>
1001403e:	45c4      	cmp	ip, r8
10014040:	d8d3      	bhi.n	10013fea <__gedf2+0x62>
10014042:	2000      	movs	r0, #0
10014044:	45c4      	cmp	ip, r8
10014046:	d3f4      	bcc.n	10014032 <__gedf2+0xaa>
10014048:	e7d2      	b.n	10013ff0 <__gedf2+0x68>
1001404a:	46c0      	nop			; (mov r8, r8)
1001404c:	000007ff 	.word	0x000007ff

10014050 <__ledf2>:
10014050:	b5f0      	push	{r4, r5, r6, r7, lr}
10014052:	465f      	mov	r7, fp
10014054:	464d      	mov	r5, r9
10014056:	4644      	mov	r4, r8
10014058:	4656      	mov	r6, sl
1001405a:	b4f0      	push	{r4, r5, r6, r7}
1001405c:	031c      	lsls	r4, r3, #12
1001405e:	0b24      	lsrs	r4, r4, #12
10014060:	46a4      	mov	ip, r4
10014062:	4c2f      	ldr	r4, [pc, #188]	; (10014120 <__ledf2+0xd0>)
10014064:	030f      	lsls	r7, r1, #12
10014066:	004d      	lsls	r5, r1, #1
10014068:	005e      	lsls	r6, r3, #1
1001406a:	0fc9      	lsrs	r1, r1, #31
1001406c:	4680      	mov	r8, r0
1001406e:	0b3f      	lsrs	r7, r7, #12
10014070:	0d6d      	lsrs	r5, r5, #21
10014072:	468b      	mov	fp, r1
10014074:	4691      	mov	r9, r2
10014076:	0d76      	lsrs	r6, r6, #21
10014078:	0fdb      	lsrs	r3, r3, #31
1001407a:	42a5      	cmp	r5, r4
1001407c:	d020      	beq.n	100140c0 <__ledf2+0x70>
1001407e:	4c28      	ldr	r4, [pc, #160]	; (10014120 <__ledf2+0xd0>)
10014080:	42a6      	cmp	r6, r4
10014082:	d022      	beq.n	100140ca <__ledf2+0x7a>
10014084:	2d00      	cmp	r5, #0
10014086:	d112      	bne.n	100140ae <__ledf2+0x5e>
10014088:	4338      	orrs	r0, r7
1001408a:	4244      	negs	r4, r0
1001408c:	4144      	adcs	r4, r0
1001408e:	2e00      	cmp	r6, #0
10014090:	d020      	beq.n	100140d4 <__ledf2+0x84>
10014092:	2c00      	cmp	r4, #0
10014094:	d00d      	beq.n	100140b2 <__ledf2+0x62>
10014096:	425c      	negs	r4, r3
10014098:	4163      	adcs	r3, r4
1001409a:	2401      	movs	r4, #1
1001409c:	425b      	negs	r3, r3
1001409e:	431c      	orrs	r4, r3
100140a0:	0020      	movs	r0, r4
100140a2:	bc3c      	pop	{r2, r3, r4, r5}
100140a4:	4690      	mov	r8, r2
100140a6:	4699      	mov	r9, r3
100140a8:	46a2      	mov	sl, r4
100140aa:	46ab      	mov	fp, r5
100140ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
100140ae:	2e00      	cmp	r6, #0
100140b0:	d017      	beq.n	100140e2 <__ledf2+0x92>
100140b2:	455b      	cmp	r3, fp
100140b4:	d019      	beq.n	100140ea <__ledf2+0x9a>
100140b6:	465b      	mov	r3, fp
100140b8:	425c      	negs	r4, r3
100140ba:	2301      	movs	r3, #1
100140bc:	431c      	orrs	r4, r3
100140be:	e7ef      	b.n	100140a0 <__ledf2+0x50>
100140c0:	0039      	movs	r1, r7
100140c2:	2402      	movs	r4, #2
100140c4:	4301      	orrs	r1, r0
100140c6:	d1eb      	bne.n	100140a0 <__ledf2+0x50>
100140c8:	e7d9      	b.n	1001407e <__ledf2+0x2e>
100140ca:	4661      	mov	r1, ip
100140cc:	2402      	movs	r4, #2
100140ce:	4311      	orrs	r1, r2
100140d0:	d1e6      	bne.n	100140a0 <__ledf2+0x50>
100140d2:	e7d7      	b.n	10014084 <__ledf2+0x34>
100140d4:	4661      	mov	r1, ip
100140d6:	430a      	orrs	r2, r1
100140d8:	d1db      	bne.n	10014092 <__ledf2+0x42>
100140da:	2400      	movs	r4, #0
100140dc:	2800      	cmp	r0, #0
100140de:	d0df      	beq.n	100140a0 <__ledf2+0x50>
100140e0:	e7e9      	b.n	100140b6 <__ledf2+0x66>
100140e2:	4661      	mov	r1, ip
100140e4:	430a      	orrs	r2, r1
100140e6:	d1e4      	bne.n	100140b2 <__ledf2+0x62>
100140e8:	e7e5      	b.n	100140b6 <__ledf2+0x66>
100140ea:	42b5      	cmp	r5, r6
100140ec:	dd03      	ble.n	100140f6 <__ledf2+0xa6>
100140ee:	2201      	movs	r2, #1
100140f0:	425c      	negs	r4, r3
100140f2:	4314      	orrs	r4, r2
100140f4:	e7d4      	b.n	100140a0 <__ledf2+0x50>
100140f6:	42b5      	cmp	r5, r6
100140f8:	dbcd      	blt.n	10014096 <__ledf2+0x46>
100140fa:	4567      	cmp	r7, ip
100140fc:	d8db      	bhi.n	100140b6 <__ledf2+0x66>
100140fe:	d009      	beq.n	10014114 <__ledf2+0xc4>
10014100:	2400      	movs	r4, #0
10014102:	4567      	cmp	r7, ip
10014104:	d2cc      	bcs.n	100140a0 <__ledf2+0x50>
10014106:	4659      	mov	r1, fp
10014108:	424c      	negs	r4, r1
1001410a:	4161      	adcs	r1, r4
1001410c:	2401      	movs	r4, #1
1001410e:	4249      	negs	r1, r1
10014110:	430c      	orrs	r4, r1
10014112:	e7c5      	b.n	100140a0 <__ledf2+0x50>
10014114:	45c8      	cmp	r8, r9
10014116:	d8ce      	bhi.n	100140b6 <__ledf2+0x66>
10014118:	2400      	movs	r4, #0
1001411a:	45c8      	cmp	r8, r9
1001411c:	d3f3      	bcc.n	10014106 <__ledf2+0xb6>
1001411e:	e7bf      	b.n	100140a0 <__ledf2+0x50>
10014120:	000007ff 	.word	0x000007ff

10014124 <__aeabi_dmul>:
10014124:	b5f0      	push	{r4, r5, r6, r7, lr}
10014126:	465f      	mov	r7, fp
10014128:	4656      	mov	r6, sl
1001412a:	464d      	mov	r5, r9
1001412c:	4644      	mov	r4, r8
1001412e:	b4f0      	push	{r4, r5, r6, r7}
10014130:	030d      	lsls	r5, r1, #12
10014132:	4699      	mov	r9, r3
10014134:	004e      	lsls	r6, r1, #1
10014136:	0b2b      	lsrs	r3, r5, #12
10014138:	b087      	sub	sp, #28
1001413a:	0007      	movs	r7, r0
1001413c:	4692      	mov	sl, r2
1001413e:	4680      	mov	r8, r0
10014140:	469b      	mov	fp, r3
10014142:	0d76      	lsrs	r6, r6, #21
10014144:	0fcc      	lsrs	r4, r1, #31
10014146:	2e00      	cmp	r6, #0
10014148:	d069      	beq.n	1001421e <__aeabi_dmul+0xfa>
1001414a:	4b6d      	ldr	r3, [pc, #436]	; (10014300 <__aeabi_dmul+0x1dc>)
1001414c:	429e      	cmp	r6, r3
1001414e:	d035      	beq.n	100141bc <__aeabi_dmul+0x98>
10014150:	465b      	mov	r3, fp
10014152:	2280      	movs	r2, #128	; 0x80
10014154:	00dd      	lsls	r5, r3, #3
10014156:	0412      	lsls	r2, r2, #16
10014158:	0f43      	lsrs	r3, r0, #29
1001415a:	4313      	orrs	r3, r2
1001415c:	432b      	orrs	r3, r5
1001415e:	469b      	mov	fp, r3
10014160:	00c3      	lsls	r3, r0, #3
10014162:	4698      	mov	r8, r3
10014164:	4b67      	ldr	r3, [pc, #412]	; (10014304 <__aeabi_dmul+0x1e0>)
10014166:	2700      	movs	r7, #0
10014168:	469c      	mov	ip, r3
1001416a:	2300      	movs	r3, #0
1001416c:	4466      	add	r6, ip
1001416e:	9301      	str	r3, [sp, #4]
10014170:	464a      	mov	r2, r9
10014172:	0315      	lsls	r5, r2, #12
10014174:	0050      	lsls	r0, r2, #1
10014176:	0fd2      	lsrs	r2, r2, #31
10014178:	4653      	mov	r3, sl
1001417a:	0b2d      	lsrs	r5, r5, #12
1001417c:	0d40      	lsrs	r0, r0, #21
1001417e:	4691      	mov	r9, r2
10014180:	d100      	bne.n	10014184 <__aeabi_dmul+0x60>
10014182:	e076      	b.n	10014272 <__aeabi_dmul+0x14e>
10014184:	4a5e      	ldr	r2, [pc, #376]	; (10014300 <__aeabi_dmul+0x1dc>)
10014186:	4290      	cmp	r0, r2
10014188:	d06c      	beq.n	10014264 <__aeabi_dmul+0x140>
1001418a:	2280      	movs	r2, #128	; 0x80
1001418c:	0f5b      	lsrs	r3, r3, #29
1001418e:	0412      	lsls	r2, r2, #16
10014190:	4313      	orrs	r3, r2
10014192:	4a5c      	ldr	r2, [pc, #368]	; (10014304 <__aeabi_dmul+0x1e0>)
10014194:	00ed      	lsls	r5, r5, #3
10014196:	4694      	mov	ip, r2
10014198:	431d      	orrs	r5, r3
1001419a:	4653      	mov	r3, sl
1001419c:	2200      	movs	r2, #0
1001419e:	00db      	lsls	r3, r3, #3
100141a0:	4460      	add	r0, ip
100141a2:	4649      	mov	r1, r9
100141a4:	1836      	adds	r6, r6, r0
100141a6:	1c70      	adds	r0, r6, #1
100141a8:	4061      	eors	r1, r4
100141aa:	9002      	str	r0, [sp, #8]
100141ac:	4317      	orrs	r7, r2
100141ae:	2f0f      	cmp	r7, #15
100141b0:	d900      	bls.n	100141b4 <__aeabi_dmul+0x90>
100141b2:	e0af      	b.n	10014314 <__aeabi_dmul+0x1f0>
100141b4:	4854      	ldr	r0, [pc, #336]	; (10014308 <__aeabi_dmul+0x1e4>)
100141b6:	00bf      	lsls	r7, r7, #2
100141b8:	59c7      	ldr	r7, [r0, r7]
100141ba:	46bf      	mov	pc, r7
100141bc:	465b      	mov	r3, fp
100141be:	431f      	orrs	r7, r3
100141c0:	d000      	beq.n	100141c4 <__aeabi_dmul+0xa0>
100141c2:	e088      	b.n	100142d6 <__aeabi_dmul+0x1b2>
100141c4:	2300      	movs	r3, #0
100141c6:	469b      	mov	fp, r3
100141c8:	4698      	mov	r8, r3
100141ca:	3302      	adds	r3, #2
100141cc:	2708      	movs	r7, #8
100141ce:	9301      	str	r3, [sp, #4]
100141d0:	e7ce      	b.n	10014170 <__aeabi_dmul+0x4c>
100141d2:	4649      	mov	r1, r9
100141d4:	2a02      	cmp	r2, #2
100141d6:	d06a      	beq.n	100142ae <__aeabi_dmul+0x18a>
100141d8:	2a03      	cmp	r2, #3
100141da:	d100      	bne.n	100141de <__aeabi_dmul+0xba>
100141dc:	e209      	b.n	100145f2 <__aeabi_dmul+0x4ce>
100141de:	2a01      	cmp	r2, #1
100141e0:	d000      	beq.n	100141e4 <__aeabi_dmul+0xc0>
100141e2:	e1bb      	b.n	1001455c <__aeabi_dmul+0x438>
100141e4:	4011      	ands	r1, r2
100141e6:	2200      	movs	r2, #0
100141e8:	2300      	movs	r3, #0
100141ea:	2500      	movs	r5, #0
100141ec:	4690      	mov	r8, r2
100141ee:	b2cc      	uxtb	r4, r1
100141f0:	2100      	movs	r1, #0
100141f2:	032d      	lsls	r5, r5, #12
100141f4:	0d0a      	lsrs	r2, r1, #20
100141f6:	0512      	lsls	r2, r2, #20
100141f8:	0b2d      	lsrs	r5, r5, #12
100141fa:	4315      	orrs	r5, r2
100141fc:	4a43      	ldr	r2, [pc, #268]	; (1001430c <__aeabi_dmul+0x1e8>)
100141fe:	051b      	lsls	r3, r3, #20
10014200:	4015      	ands	r5, r2
10014202:	431d      	orrs	r5, r3
10014204:	006d      	lsls	r5, r5, #1
10014206:	07e4      	lsls	r4, r4, #31
10014208:	086d      	lsrs	r5, r5, #1
1001420a:	4325      	orrs	r5, r4
1001420c:	4640      	mov	r0, r8
1001420e:	0029      	movs	r1, r5
10014210:	b007      	add	sp, #28
10014212:	bc3c      	pop	{r2, r3, r4, r5}
10014214:	4690      	mov	r8, r2
10014216:	4699      	mov	r9, r3
10014218:	46a2      	mov	sl, r4
1001421a:	46ab      	mov	fp, r5
1001421c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001421e:	4303      	orrs	r3, r0
10014220:	d052      	beq.n	100142c8 <__aeabi_dmul+0x1a4>
10014222:	465b      	mov	r3, fp
10014224:	2b00      	cmp	r3, #0
10014226:	d100      	bne.n	1001422a <__aeabi_dmul+0x106>
10014228:	e18a      	b.n	10014540 <__aeabi_dmul+0x41c>
1001422a:	4658      	mov	r0, fp
1001422c:	f000 fdb6 	bl	10014d9c <__clzsi2>
10014230:	0003      	movs	r3, r0
10014232:	3b0b      	subs	r3, #11
10014234:	2b1c      	cmp	r3, #28
10014236:	dd00      	ble.n	1001423a <__aeabi_dmul+0x116>
10014238:	e17b      	b.n	10014532 <__aeabi_dmul+0x40e>
1001423a:	221d      	movs	r2, #29
1001423c:	1ad3      	subs	r3, r2, r3
1001423e:	003a      	movs	r2, r7
10014240:	0001      	movs	r1, r0
10014242:	465d      	mov	r5, fp
10014244:	40da      	lsrs	r2, r3
10014246:	3908      	subs	r1, #8
10014248:	408d      	lsls	r5, r1
1001424a:	0013      	movs	r3, r2
1001424c:	408f      	lsls	r7, r1
1001424e:	432b      	orrs	r3, r5
10014250:	469b      	mov	fp, r3
10014252:	46b8      	mov	r8, r7
10014254:	4b2e      	ldr	r3, [pc, #184]	; (10014310 <__aeabi_dmul+0x1ec>)
10014256:	2700      	movs	r7, #0
10014258:	469c      	mov	ip, r3
1001425a:	2300      	movs	r3, #0
1001425c:	4460      	add	r0, ip
1001425e:	4246      	negs	r6, r0
10014260:	9301      	str	r3, [sp, #4]
10014262:	e785      	b.n	10014170 <__aeabi_dmul+0x4c>
10014264:	4652      	mov	r2, sl
10014266:	432a      	orrs	r2, r5
10014268:	d12c      	bne.n	100142c4 <__aeabi_dmul+0x1a0>
1001426a:	2500      	movs	r5, #0
1001426c:	2300      	movs	r3, #0
1001426e:	2202      	movs	r2, #2
10014270:	e797      	b.n	100141a2 <__aeabi_dmul+0x7e>
10014272:	4652      	mov	r2, sl
10014274:	432a      	orrs	r2, r5
10014276:	d021      	beq.n	100142bc <__aeabi_dmul+0x198>
10014278:	2d00      	cmp	r5, #0
1001427a:	d100      	bne.n	1001427e <__aeabi_dmul+0x15a>
1001427c:	e154      	b.n	10014528 <__aeabi_dmul+0x404>
1001427e:	0028      	movs	r0, r5
10014280:	f000 fd8c 	bl	10014d9c <__clzsi2>
10014284:	0003      	movs	r3, r0
10014286:	3b0b      	subs	r3, #11
10014288:	2b1c      	cmp	r3, #28
1001428a:	dd00      	ble.n	1001428e <__aeabi_dmul+0x16a>
1001428c:	e146      	b.n	1001451c <__aeabi_dmul+0x3f8>
1001428e:	211d      	movs	r1, #29
10014290:	1acb      	subs	r3, r1, r3
10014292:	4651      	mov	r1, sl
10014294:	0002      	movs	r2, r0
10014296:	40d9      	lsrs	r1, r3
10014298:	4653      	mov	r3, sl
1001429a:	3a08      	subs	r2, #8
1001429c:	4095      	lsls	r5, r2
1001429e:	4093      	lsls	r3, r2
100142a0:	430d      	orrs	r5, r1
100142a2:	4a1b      	ldr	r2, [pc, #108]	; (10014310 <__aeabi_dmul+0x1ec>)
100142a4:	4694      	mov	ip, r2
100142a6:	4460      	add	r0, ip
100142a8:	4240      	negs	r0, r0
100142aa:	2200      	movs	r2, #0
100142ac:	e779      	b.n	100141a2 <__aeabi_dmul+0x7e>
100142ae:	2401      	movs	r4, #1
100142b0:	2200      	movs	r2, #0
100142b2:	400c      	ands	r4, r1
100142b4:	4b12      	ldr	r3, [pc, #72]	; (10014300 <__aeabi_dmul+0x1dc>)
100142b6:	2500      	movs	r5, #0
100142b8:	4690      	mov	r8, r2
100142ba:	e799      	b.n	100141f0 <__aeabi_dmul+0xcc>
100142bc:	2500      	movs	r5, #0
100142be:	2300      	movs	r3, #0
100142c0:	2201      	movs	r2, #1
100142c2:	e76e      	b.n	100141a2 <__aeabi_dmul+0x7e>
100142c4:	2203      	movs	r2, #3
100142c6:	e76c      	b.n	100141a2 <__aeabi_dmul+0x7e>
100142c8:	2300      	movs	r3, #0
100142ca:	469b      	mov	fp, r3
100142cc:	4698      	mov	r8, r3
100142ce:	3301      	adds	r3, #1
100142d0:	2704      	movs	r7, #4
100142d2:	9301      	str	r3, [sp, #4]
100142d4:	e74c      	b.n	10014170 <__aeabi_dmul+0x4c>
100142d6:	2303      	movs	r3, #3
100142d8:	270c      	movs	r7, #12
100142da:	9301      	str	r3, [sp, #4]
100142dc:	e748      	b.n	10014170 <__aeabi_dmul+0x4c>
100142de:	2300      	movs	r3, #0
100142e0:	2580      	movs	r5, #128	; 0x80
100142e2:	4698      	mov	r8, r3
100142e4:	2400      	movs	r4, #0
100142e6:	032d      	lsls	r5, r5, #12
100142e8:	4b05      	ldr	r3, [pc, #20]	; (10014300 <__aeabi_dmul+0x1dc>)
100142ea:	e781      	b.n	100141f0 <__aeabi_dmul+0xcc>
100142ec:	465d      	mov	r5, fp
100142ee:	4643      	mov	r3, r8
100142f0:	9a01      	ldr	r2, [sp, #4]
100142f2:	e76f      	b.n	100141d4 <__aeabi_dmul+0xb0>
100142f4:	465d      	mov	r5, fp
100142f6:	4643      	mov	r3, r8
100142f8:	0021      	movs	r1, r4
100142fa:	9a01      	ldr	r2, [sp, #4]
100142fc:	e76a      	b.n	100141d4 <__aeabi_dmul+0xb0>
100142fe:	46c0      	nop			; (mov r8, r8)
10014300:	000007ff 	.word	0x000007ff
10014304:	fffffc01 	.word	0xfffffc01
10014308:	10018088 	.word	0x10018088
1001430c:	800fffff 	.word	0x800fffff
10014310:	000003f3 	.word	0x000003f3
10014314:	4642      	mov	r2, r8
10014316:	0c12      	lsrs	r2, r2, #16
10014318:	4691      	mov	r9, r2
1001431a:	0c1a      	lsrs	r2, r3, #16
1001431c:	4694      	mov	ip, r2
1001431e:	4642      	mov	r2, r8
10014320:	0417      	lsls	r7, r2, #16
10014322:	464a      	mov	r2, r9
10014324:	041b      	lsls	r3, r3, #16
10014326:	0c1b      	lsrs	r3, r3, #16
10014328:	435a      	muls	r2, r3
1001432a:	4660      	mov	r0, ip
1001432c:	4690      	mov	r8, r2
1001432e:	464a      	mov	r2, r9
10014330:	4342      	muls	r2, r0
10014332:	0010      	movs	r0, r2
10014334:	9203      	str	r2, [sp, #12]
10014336:	4662      	mov	r2, ip
10014338:	001c      	movs	r4, r3
1001433a:	0c3f      	lsrs	r7, r7, #16
1001433c:	437a      	muls	r2, r7
1001433e:	437c      	muls	r4, r7
10014340:	4442      	add	r2, r8
10014342:	9201      	str	r2, [sp, #4]
10014344:	0c22      	lsrs	r2, r4, #16
10014346:	4692      	mov	sl, r2
10014348:	9a01      	ldr	r2, [sp, #4]
1001434a:	4452      	add	r2, sl
1001434c:	4590      	cmp	r8, r2
1001434e:	d906      	bls.n	1001435e <__aeabi_dmul+0x23a>
10014350:	4682      	mov	sl, r0
10014352:	2080      	movs	r0, #128	; 0x80
10014354:	0240      	lsls	r0, r0, #9
10014356:	4680      	mov	r8, r0
10014358:	44c2      	add	sl, r8
1001435a:	4650      	mov	r0, sl
1001435c:	9003      	str	r0, [sp, #12]
1001435e:	0c10      	lsrs	r0, r2, #16
10014360:	9004      	str	r0, [sp, #16]
10014362:	4648      	mov	r0, r9
10014364:	0424      	lsls	r4, r4, #16
10014366:	0c24      	lsrs	r4, r4, #16
10014368:	0412      	lsls	r2, r2, #16
1001436a:	1912      	adds	r2, r2, r4
1001436c:	9205      	str	r2, [sp, #20]
1001436e:	0c2a      	lsrs	r2, r5, #16
10014370:	042d      	lsls	r5, r5, #16
10014372:	0c2d      	lsrs	r5, r5, #16
10014374:	4368      	muls	r0, r5
10014376:	002c      	movs	r4, r5
10014378:	4682      	mov	sl, r0
1001437a:	4648      	mov	r0, r9
1001437c:	437c      	muls	r4, r7
1001437e:	4350      	muls	r0, r2
10014380:	4681      	mov	r9, r0
10014382:	0c20      	lsrs	r0, r4, #16
10014384:	4680      	mov	r8, r0
10014386:	4357      	muls	r7, r2
10014388:	4457      	add	r7, sl
1001438a:	4447      	add	r7, r8
1001438c:	45ba      	cmp	sl, r7
1001438e:	d903      	bls.n	10014398 <__aeabi_dmul+0x274>
10014390:	2080      	movs	r0, #128	; 0x80
10014392:	0240      	lsls	r0, r0, #9
10014394:	4680      	mov	r8, r0
10014396:	44c1      	add	r9, r8
10014398:	0c38      	lsrs	r0, r7, #16
1001439a:	043f      	lsls	r7, r7, #16
1001439c:	46b8      	mov	r8, r7
1001439e:	4448      	add	r0, r9
100143a0:	0424      	lsls	r4, r4, #16
100143a2:	0c24      	lsrs	r4, r4, #16
100143a4:	9001      	str	r0, [sp, #4]
100143a6:	9804      	ldr	r0, [sp, #16]
100143a8:	44a0      	add	r8, r4
100143aa:	4440      	add	r0, r8
100143ac:	9004      	str	r0, [sp, #16]
100143ae:	4658      	mov	r0, fp
100143b0:	0c00      	lsrs	r0, r0, #16
100143b2:	4681      	mov	r9, r0
100143b4:	4658      	mov	r0, fp
100143b6:	0404      	lsls	r4, r0, #16
100143b8:	0c20      	lsrs	r0, r4, #16
100143ba:	4682      	mov	sl, r0
100143bc:	0007      	movs	r7, r0
100143be:	4648      	mov	r0, r9
100143c0:	435f      	muls	r7, r3
100143c2:	464c      	mov	r4, r9
100143c4:	4343      	muls	r3, r0
100143c6:	4660      	mov	r0, ip
100143c8:	4360      	muls	r0, r4
100143ca:	4664      	mov	r4, ip
100143cc:	4683      	mov	fp, r0
100143ce:	4650      	mov	r0, sl
100143d0:	4344      	muls	r4, r0
100143d2:	0c38      	lsrs	r0, r7, #16
100143d4:	4684      	mov	ip, r0
100143d6:	18e4      	adds	r4, r4, r3
100143d8:	4464      	add	r4, ip
100143da:	42a3      	cmp	r3, r4
100143dc:	d903      	bls.n	100143e6 <__aeabi_dmul+0x2c2>
100143de:	2380      	movs	r3, #128	; 0x80
100143e0:	025b      	lsls	r3, r3, #9
100143e2:	469c      	mov	ip, r3
100143e4:	44e3      	add	fp, ip
100143e6:	4648      	mov	r0, r9
100143e8:	043f      	lsls	r7, r7, #16
100143ea:	0c23      	lsrs	r3, r4, #16
100143ec:	0c3f      	lsrs	r7, r7, #16
100143ee:	0424      	lsls	r4, r4, #16
100143f0:	19e4      	adds	r4, r4, r7
100143f2:	4657      	mov	r7, sl
100143f4:	4368      	muls	r0, r5
100143f6:	436f      	muls	r7, r5
100143f8:	4684      	mov	ip, r0
100143fa:	464d      	mov	r5, r9
100143fc:	4650      	mov	r0, sl
100143fe:	4355      	muls	r5, r2
10014400:	4342      	muls	r2, r0
10014402:	0c38      	lsrs	r0, r7, #16
10014404:	4681      	mov	r9, r0
10014406:	4462      	add	r2, ip
10014408:	444a      	add	r2, r9
1001440a:	445b      	add	r3, fp
1001440c:	4594      	cmp	ip, r2
1001440e:	d903      	bls.n	10014418 <__aeabi_dmul+0x2f4>
10014410:	2080      	movs	r0, #128	; 0x80
10014412:	0240      	lsls	r0, r0, #9
10014414:	4684      	mov	ip, r0
10014416:	4465      	add	r5, ip
10014418:	9803      	ldr	r0, [sp, #12]
1001441a:	043f      	lsls	r7, r7, #16
1001441c:	4683      	mov	fp, r0
1001441e:	9804      	ldr	r0, [sp, #16]
10014420:	0c3f      	lsrs	r7, r7, #16
10014422:	4684      	mov	ip, r0
10014424:	44e3      	add	fp, ip
10014426:	45c3      	cmp	fp, r8
10014428:	4180      	sbcs	r0, r0
1001442a:	4240      	negs	r0, r0
1001442c:	4682      	mov	sl, r0
1001442e:	0410      	lsls	r0, r2, #16
10014430:	4684      	mov	ip, r0
10014432:	9801      	ldr	r0, [sp, #4]
10014434:	4467      	add	r7, ip
10014436:	4684      	mov	ip, r0
10014438:	4467      	add	r7, ip
1001443a:	44a3      	add	fp, r4
1001443c:	46bc      	mov	ip, r7
1001443e:	45a3      	cmp	fp, r4
10014440:	41a4      	sbcs	r4, r4
10014442:	4699      	mov	r9, r3
10014444:	44d4      	add	ip, sl
10014446:	4264      	negs	r4, r4
10014448:	4287      	cmp	r7, r0
1001444a:	41bf      	sbcs	r7, r7
1001444c:	45d4      	cmp	ip, sl
1001444e:	4180      	sbcs	r0, r0
10014450:	44e1      	add	r9, ip
10014452:	46a0      	mov	r8, r4
10014454:	4599      	cmp	r9, r3
10014456:	419b      	sbcs	r3, r3
10014458:	427f      	negs	r7, r7
1001445a:	4240      	negs	r0, r0
1001445c:	44c8      	add	r8, r9
1001445e:	4307      	orrs	r7, r0
10014460:	0c12      	lsrs	r2, r2, #16
10014462:	18ba      	adds	r2, r7, r2
10014464:	45a0      	cmp	r8, r4
10014466:	41a4      	sbcs	r4, r4
10014468:	425f      	negs	r7, r3
1001446a:	003b      	movs	r3, r7
1001446c:	4264      	negs	r4, r4
1001446e:	4323      	orrs	r3, r4
10014470:	18d7      	adds	r7, r2, r3
10014472:	4643      	mov	r3, r8
10014474:	197d      	adds	r5, r7, r5
10014476:	0ddb      	lsrs	r3, r3, #23
10014478:	026d      	lsls	r5, r5, #9
1001447a:	431d      	orrs	r5, r3
1001447c:	465b      	mov	r3, fp
1001447e:	025a      	lsls	r2, r3, #9
10014480:	9b05      	ldr	r3, [sp, #20]
10014482:	431a      	orrs	r2, r3
10014484:	1e53      	subs	r3, r2, #1
10014486:	419a      	sbcs	r2, r3
10014488:	465b      	mov	r3, fp
1001448a:	0ddb      	lsrs	r3, r3, #23
1001448c:	431a      	orrs	r2, r3
1001448e:	4643      	mov	r3, r8
10014490:	025b      	lsls	r3, r3, #9
10014492:	4313      	orrs	r3, r2
10014494:	01ea      	lsls	r2, r5, #7
10014496:	d507      	bpl.n	100144a8 <__aeabi_dmul+0x384>
10014498:	2201      	movs	r2, #1
1001449a:	085c      	lsrs	r4, r3, #1
1001449c:	4013      	ands	r3, r2
1001449e:	4323      	orrs	r3, r4
100144a0:	07ea      	lsls	r2, r5, #31
100144a2:	9e02      	ldr	r6, [sp, #8]
100144a4:	4313      	orrs	r3, r2
100144a6:	086d      	lsrs	r5, r5, #1
100144a8:	4a57      	ldr	r2, [pc, #348]	; (10014608 <__aeabi_dmul+0x4e4>)
100144aa:	18b2      	adds	r2, r6, r2
100144ac:	2a00      	cmp	r2, #0
100144ae:	dd4b      	ble.n	10014548 <__aeabi_dmul+0x424>
100144b0:	0758      	lsls	r0, r3, #29
100144b2:	d009      	beq.n	100144c8 <__aeabi_dmul+0x3a4>
100144b4:	200f      	movs	r0, #15
100144b6:	4018      	ands	r0, r3
100144b8:	2804      	cmp	r0, #4
100144ba:	d005      	beq.n	100144c8 <__aeabi_dmul+0x3a4>
100144bc:	1d18      	adds	r0, r3, #4
100144be:	4298      	cmp	r0, r3
100144c0:	419b      	sbcs	r3, r3
100144c2:	425b      	negs	r3, r3
100144c4:	18ed      	adds	r5, r5, r3
100144c6:	0003      	movs	r3, r0
100144c8:	01e8      	lsls	r0, r5, #7
100144ca:	d504      	bpl.n	100144d6 <__aeabi_dmul+0x3b2>
100144cc:	4a4f      	ldr	r2, [pc, #316]	; (1001460c <__aeabi_dmul+0x4e8>)
100144ce:	4015      	ands	r5, r2
100144d0:	2280      	movs	r2, #128	; 0x80
100144d2:	00d2      	lsls	r2, r2, #3
100144d4:	18b2      	adds	r2, r6, r2
100144d6:	484e      	ldr	r0, [pc, #312]	; (10014610 <__aeabi_dmul+0x4ec>)
100144d8:	4282      	cmp	r2, r0
100144da:	dd00      	ble.n	100144de <__aeabi_dmul+0x3ba>
100144dc:	e6e7      	b.n	100142ae <__aeabi_dmul+0x18a>
100144de:	2401      	movs	r4, #1
100144e0:	08db      	lsrs	r3, r3, #3
100144e2:	0768      	lsls	r0, r5, #29
100144e4:	4318      	orrs	r0, r3
100144e6:	026d      	lsls	r5, r5, #9
100144e8:	0553      	lsls	r3, r2, #21
100144ea:	4680      	mov	r8, r0
100144ec:	0b2d      	lsrs	r5, r5, #12
100144ee:	0d5b      	lsrs	r3, r3, #21
100144f0:	400c      	ands	r4, r1
100144f2:	e67d      	b.n	100141f0 <__aeabi_dmul+0xcc>
100144f4:	2280      	movs	r2, #128	; 0x80
100144f6:	4659      	mov	r1, fp
100144f8:	0312      	lsls	r2, r2, #12
100144fa:	4211      	tst	r1, r2
100144fc:	d008      	beq.n	10014510 <__aeabi_dmul+0x3ec>
100144fe:	4215      	tst	r5, r2
10014500:	d106      	bne.n	10014510 <__aeabi_dmul+0x3ec>
10014502:	4315      	orrs	r5, r2
10014504:	032d      	lsls	r5, r5, #12
10014506:	4698      	mov	r8, r3
10014508:	0b2d      	lsrs	r5, r5, #12
1001450a:	464c      	mov	r4, r9
1001450c:	4b41      	ldr	r3, [pc, #260]	; (10014614 <__aeabi_dmul+0x4f0>)
1001450e:	e66f      	b.n	100141f0 <__aeabi_dmul+0xcc>
10014510:	465d      	mov	r5, fp
10014512:	4315      	orrs	r5, r2
10014514:	032d      	lsls	r5, r5, #12
10014516:	0b2d      	lsrs	r5, r5, #12
10014518:	4b3e      	ldr	r3, [pc, #248]	; (10014614 <__aeabi_dmul+0x4f0>)
1001451a:	e669      	b.n	100141f0 <__aeabi_dmul+0xcc>
1001451c:	0003      	movs	r3, r0
1001451e:	4655      	mov	r5, sl
10014520:	3b28      	subs	r3, #40	; 0x28
10014522:	409d      	lsls	r5, r3
10014524:	2300      	movs	r3, #0
10014526:	e6bc      	b.n	100142a2 <__aeabi_dmul+0x17e>
10014528:	4650      	mov	r0, sl
1001452a:	f000 fc37 	bl	10014d9c <__clzsi2>
1001452e:	3020      	adds	r0, #32
10014530:	e6a8      	b.n	10014284 <__aeabi_dmul+0x160>
10014532:	0003      	movs	r3, r0
10014534:	3b28      	subs	r3, #40	; 0x28
10014536:	409f      	lsls	r7, r3
10014538:	2300      	movs	r3, #0
1001453a:	46bb      	mov	fp, r7
1001453c:	4698      	mov	r8, r3
1001453e:	e689      	b.n	10014254 <__aeabi_dmul+0x130>
10014540:	f000 fc2c 	bl	10014d9c <__clzsi2>
10014544:	3020      	adds	r0, #32
10014546:	e673      	b.n	10014230 <__aeabi_dmul+0x10c>
10014548:	2401      	movs	r4, #1
1001454a:	1aa6      	subs	r6, r4, r2
1001454c:	2e38      	cmp	r6, #56	; 0x38
1001454e:	dd07      	ble.n	10014560 <__aeabi_dmul+0x43c>
10014550:	2200      	movs	r2, #0
10014552:	400c      	ands	r4, r1
10014554:	2300      	movs	r3, #0
10014556:	2500      	movs	r5, #0
10014558:	4690      	mov	r8, r2
1001455a:	e649      	b.n	100141f0 <__aeabi_dmul+0xcc>
1001455c:	9e02      	ldr	r6, [sp, #8]
1001455e:	e7a3      	b.n	100144a8 <__aeabi_dmul+0x384>
10014560:	2e1f      	cmp	r6, #31
10014562:	dc20      	bgt.n	100145a6 <__aeabi_dmul+0x482>
10014564:	2220      	movs	r2, #32
10014566:	002c      	movs	r4, r5
10014568:	0018      	movs	r0, r3
1001456a:	1b92      	subs	r2, r2, r6
1001456c:	40f0      	lsrs	r0, r6
1001456e:	4094      	lsls	r4, r2
10014570:	4093      	lsls	r3, r2
10014572:	4304      	orrs	r4, r0
10014574:	1e58      	subs	r0, r3, #1
10014576:	4183      	sbcs	r3, r0
10014578:	431c      	orrs	r4, r3
1001457a:	40f5      	lsrs	r5, r6
1001457c:	0763      	lsls	r3, r4, #29
1001457e:	d009      	beq.n	10014594 <__aeabi_dmul+0x470>
10014580:	230f      	movs	r3, #15
10014582:	4023      	ands	r3, r4
10014584:	2b04      	cmp	r3, #4
10014586:	d005      	beq.n	10014594 <__aeabi_dmul+0x470>
10014588:	0023      	movs	r3, r4
1001458a:	1d1c      	adds	r4, r3, #4
1001458c:	429c      	cmp	r4, r3
1001458e:	4192      	sbcs	r2, r2
10014590:	4252      	negs	r2, r2
10014592:	18ad      	adds	r5, r5, r2
10014594:	022b      	lsls	r3, r5, #8
10014596:	d51f      	bpl.n	100145d8 <__aeabi_dmul+0x4b4>
10014598:	2401      	movs	r4, #1
1001459a:	2200      	movs	r2, #0
1001459c:	400c      	ands	r4, r1
1001459e:	2301      	movs	r3, #1
100145a0:	2500      	movs	r5, #0
100145a2:	4690      	mov	r8, r2
100145a4:	e624      	b.n	100141f0 <__aeabi_dmul+0xcc>
100145a6:	201f      	movs	r0, #31
100145a8:	002c      	movs	r4, r5
100145aa:	4240      	negs	r0, r0
100145ac:	1a82      	subs	r2, r0, r2
100145ae:	40d4      	lsrs	r4, r2
100145b0:	2e20      	cmp	r6, #32
100145b2:	d01c      	beq.n	100145ee <__aeabi_dmul+0x4ca>
100145b4:	2240      	movs	r2, #64	; 0x40
100145b6:	1b96      	subs	r6, r2, r6
100145b8:	40b5      	lsls	r5, r6
100145ba:	432b      	orrs	r3, r5
100145bc:	1e58      	subs	r0, r3, #1
100145be:	4183      	sbcs	r3, r0
100145c0:	2007      	movs	r0, #7
100145c2:	4323      	orrs	r3, r4
100145c4:	4018      	ands	r0, r3
100145c6:	2500      	movs	r5, #0
100145c8:	2800      	cmp	r0, #0
100145ca:	d009      	beq.n	100145e0 <__aeabi_dmul+0x4bc>
100145cc:	220f      	movs	r2, #15
100145ce:	2500      	movs	r5, #0
100145d0:	401a      	ands	r2, r3
100145d2:	001c      	movs	r4, r3
100145d4:	2a04      	cmp	r2, #4
100145d6:	d1d8      	bne.n	1001458a <__aeabi_dmul+0x466>
100145d8:	0023      	movs	r3, r4
100145da:	0768      	lsls	r0, r5, #29
100145dc:	026d      	lsls	r5, r5, #9
100145de:	0b2d      	lsrs	r5, r5, #12
100145e0:	2401      	movs	r4, #1
100145e2:	08db      	lsrs	r3, r3, #3
100145e4:	4303      	orrs	r3, r0
100145e6:	4698      	mov	r8, r3
100145e8:	400c      	ands	r4, r1
100145ea:	2300      	movs	r3, #0
100145ec:	e600      	b.n	100141f0 <__aeabi_dmul+0xcc>
100145ee:	2500      	movs	r5, #0
100145f0:	e7e3      	b.n	100145ba <__aeabi_dmul+0x496>
100145f2:	2280      	movs	r2, #128	; 0x80
100145f4:	2401      	movs	r4, #1
100145f6:	0312      	lsls	r2, r2, #12
100145f8:	4315      	orrs	r5, r2
100145fa:	032d      	lsls	r5, r5, #12
100145fc:	4698      	mov	r8, r3
100145fe:	0b2d      	lsrs	r5, r5, #12
10014600:	400c      	ands	r4, r1
10014602:	4b04      	ldr	r3, [pc, #16]	; (10014614 <__aeabi_dmul+0x4f0>)
10014604:	e5f4      	b.n	100141f0 <__aeabi_dmul+0xcc>
10014606:	46c0      	nop			; (mov r8, r8)
10014608:	000003ff 	.word	0x000003ff
1001460c:	feffffff 	.word	0xfeffffff
10014610:	000007fe 	.word	0x000007fe
10014614:	000007ff 	.word	0x000007ff

10014618 <__aeabi_dsub>:
10014618:	b5f0      	push	{r4, r5, r6, r7, lr}
1001461a:	4657      	mov	r7, sl
1001461c:	464e      	mov	r6, r9
1001461e:	4645      	mov	r5, r8
10014620:	b4e0      	push	{r5, r6, r7}
10014622:	000e      	movs	r6, r1
10014624:	0011      	movs	r1, r2
10014626:	0ff2      	lsrs	r2, r6, #31
10014628:	4692      	mov	sl, r2
1001462a:	00c5      	lsls	r5, r0, #3
1001462c:	0f42      	lsrs	r2, r0, #29
1001462e:	0318      	lsls	r0, r3, #12
10014630:	0337      	lsls	r7, r6, #12
10014632:	0074      	lsls	r4, r6, #1
10014634:	0a40      	lsrs	r0, r0, #9
10014636:	0f4e      	lsrs	r6, r1, #29
10014638:	0a7f      	lsrs	r7, r7, #9
1001463a:	4330      	orrs	r0, r6
1001463c:	4ecf      	ldr	r6, [pc, #828]	; (1001497c <__aeabi_dsub+0x364>)
1001463e:	4317      	orrs	r7, r2
10014640:	005a      	lsls	r2, r3, #1
10014642:	0d64      	lsrs	r4, r4, #21
10014644:	0d52      	lsrs	r2, r2, #21
10014646:	0fdb      	lsrs	r3, r3, #31
10014648:	00c9      	lsls	r1, r1, #3
1001464a:	42b2      	cmp	r2, r6
1001464c:	d100      	bne.n	10014650 <__aeabi_dsub+0x38>
1001464e:	e0e5      	b.n	1001481c <__aeabi_dsub+0x204>
10014650:	2601      	movs	r6, #1
10014652:	4073      	eors	r3, r6
10014654:	1aa6      	subs	r6, r4, r2
10014656:	46b4      	mov	ip, r6
10014658:	4553      	cmp	r3, sl
1001465a:	d100      	bne.n	1001465e <__aeabi_dsub+0x46>
1001465c:	e0af      	b.n	100147be <__aeabi_dsub+0x1a6>
1001465e:	2e00      	cmp	r6, #0
10014660:	dc00      	bgt.n	10014664 <__aeabi_dsub+0x4c>
10014662:	e10d      	b.n	10014880 <__aeabi_dsub+0x268>
10014664:	2a00      	cmp	r2, #0
10014666:	d13a      	bne.n	100146de <__aeabi_dsub+0xc6>
10014668:	0003      	movs	r3, r0
1001466a:	430b      	orrs	r3, r1
1001466c:	d000      	beq.n	10014670 <__aeabi_dsub+0x58>
1001466e:	e0e4      	b.n	1001483a <__aeabi_dsub+0x222>
10014670:	076b      	lsls	r3, r5, #29
10014672:	d009      	beq.n	10014688 <__aeabi_dsub+0x70>
10014674:	230f      	movs	r3, #15
10014676:	402b      	ands	r3, r5
10014678:	2b04      	cmp	r3, #4
1001467a:	d005      	beq.n	10014688 <__aeabi_dsub+0x70>
1001467c:	1d2b      	adds	r3, r5, #4
1001467e:	42ab      	cmp	r3, r5
10014680:	41ad      	sbcs	r5, r5
10014682:	426d      	negs	r5, r5
10014684:	197f      	adds	r7, r7, r5
10014686:	001d      	movs	r5, r3
10014688:	023b      	lsls	r3, r7, #8
1001468a:	d400      	bmi.n	1001468e <__aeabi_dsub+0x76>
1001468c:	e088      	b.n	100147a0 <__aeabi_dsub+0x188>
1001468e:	4bbb      	ldr	r3, [pc, #748]	; (1001497c <__aeabi_dsub+0x364>)
10014690:	3401      	adds	r4, #1
10014692:	429c      	cmp	r4, r3
10014694:	d100      	bne.n	10014698 <__aeabi_dsub+0x80>
10014696:	e110      	b.n	100148ba <__aeabi_dsub+0x2a2>
10014698:	003a      	movs	r2, r7
1001469a:	4bb9      	ldr	r3, [pc, #740]	; (10014980 <__aeabi_dsub+0x368>)
1001469c:	4651      	mov	r1, sl
1001469e:	401a      	ands	r2, r3
100146a0:	2301      	movs	r3, #1
100146a2:	0750      	lsls	r0, r2, #29
100146a4:	08ed      	lsrs	r5, r5, #3
100146a6:	0252      	lsls	r2, r2, #9
100146a8:	0564      	lsls	r4, r4, #21
100146aa:	4305      	orrs	r5, r0
100146ac:	0b12      	lsrs	r2, r2, #12
100146ae:	0d64      	lsrs	r4, r4, #21
100146b0:	400b      	ands	r3, r1
100146b2:	2100      	movs	r1, #0
100146b4:	0028      	movs	r0, r5
100146b6:	0312      	lsls	r2, r2, #12
100146b8:	0d0d      	lsrs	r5, r1, #20
100146ba:	0b12      	lsrs	r2, r2, #12
100146bc:	0564      	lsls	r4, r4, #21
100146be:	052d      	lsls	r5, r5, #20
100146c0:	4315      	orrs	r5, r2
100146c2:	0862      	lsrs	r2, r4, #1
100146c4:	4caf      	ldr	r4, [pc, #700]	; (10014984 <__aeabi_dsub+0x36c>)
100146c6:	07db      	lsls	r3, r3, #31
100146c8:	402c      	ands	r4, r5
100146ca:	4314      	orrs	r4, r2
100146cc:	0064      	lsls	r4, r4, #1
100146ce:	0864      	lsrs	r4, r4, #1
100146d0:	431c      	orrs	r4, r3
100146d2:	0021      	movs	r1, r4
100146d4:	bc1c      	pop	{r2, r3, r4}
100146d6:	4690      	mov	r8, r2
100146d8:	4699      	mov	r9, r3
100146da:	46a2      	mov	sl, r4
100146dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
100146de:	4ba7      	ldr	r3, [pc, #668]	; (1001497c <__aeabi_dsub+0x364>)
100146e0:	429c      	cmp	r4, r3
100146e2:	d0c5      	beq.n	10014670 <__aeabi_dsub+0x58>
100146e4:	2380      	movs	r3, #128	; 0x80
100146e6:	041b      	lsls	r3, r3, #16
100146e8:	4318      	orrs	r0, r3
100146ea:	4663      	mov	r3, ip
100146ec:	2b38      	cmp	r3, #56	; 0x38
100146ee:	dd00      	ble.n	100146f2 <__aeabi_dsub+0xda>
100146f0:	e0fd      	b.n	100148ee <__aeabi_dsub+0x2d6>
100146f2:	2b1f      	cmp	r3, #31
100146f4:	dd00      	ble.n	100146f8 <__aeabi_dsub+0xe0>
100146f6:	e130      	b.n	1001495a <__aeabi_dsub+0x342>
100146f8:	4662      	mov	r2, ip
100146fa:	2320      	movs	r3, #32
100146fc:	1a9b      	subs	r3, r3, r2
100146fe:	0002      	movs	r2, r0
10014700:	409a      	lsls	r2, r3
10014702:	4666      	mov	r6, ip
10014704:	4690      	mov	r8, r2
10014706:	000a      	movs	r2, r1
10014708:	4099      	lsls	r1, r3
1001470a:	40f2      	lsrs	r2, r6
1001470c:	4646      	mov	r6, r8
1001470e:	1e4b      	subs	r3, r1, #1
10014710:	4199      	sbcs	r1, r3
10014712:	4332      	orrs	r2, r6
10014714:	4311      	orrs	r1, r2
10014716:	4663      	mov	r3, ip
10014718:	0002      	movs	r2, r0
1001471a:	40da      	lsrs	r2, r3
1001471c:	1a69      	subs	r1, r5, r1
1001471e:	428d      	cmp	r5, r1
10014720:	419b      	sbcs	r3, r3
10014722:	000d      	movs	r5, r1
10014724:	1aba      	subs	r2, r7, r2
10014726:	425b      	negs	r3, r3
10014728:	1ad7      	subs	r7, r2, r3
1001472a:	023b      	lsls	r3, r7, #8
1001472c:	d535      	bpl.n	1001479a <__aeabi_dsub+0x182>
1001472e:	027a      	lsls	r2, r7, #9
10014730:	0a53      	lsrs	r3, r2, #9
10014732:	4698      	mov	r8, r3
10014734:	4643      	mov	r3, r8
10014736:	2b00      	cmp	r3, #0
10014738:	d100      	bne.n	1001473c <__aeabi_dsub+0x124>
1001473a:	e0c4      	b.n	100148c6 <__aeabi_dsub+0x2ae>
1001473c:	4640      	mov	r0, r8
1001473e:	f000 fb2d 	bl	10014d9c <__clzsi2>
10014742:	0003      	movs	r3, r0
10014744:	3b08      	subs	r3, #8
10014746:	2b1f      	cmp	r3, #31
10014748:	dd00      	ble.n	1001474c <__aeabi_dsub+0x134>
1001474a:	e0c5      	b.n	100148d8 <__aeabi_dsub+0x2c0>
1001474c:	2220      	movs	r2, #32
1001474e:	0029      	movs	r1, r5
10014750:	1ad2      	subs	r2, r2, r3
10014752:	4647      	mov	r7, r8
10014754:	40d1      	lsrs	r1, r2
10014756:	409f      	lsls	r7, r3
10014758:	000a      	movs	r2, r1
1001475a:	409d      	lsls	r5, r3
1001475c:	433a      	orrs	r2, r7
1001475e:	429c      	cmp	r4, r3
10014760:	dd00      	ble.n	10014764 <__aeabi_dsub+0x14c>
10014762:	e0c0      	b.n	100148e6 <__aeabi_dsub+0x2ce>
10014764:	1b1c      	subs	r4, r3, r4
10014766:	1c63      	adds	r3, r4, #1
10014768:	2b1f      	cmp	r3, #31
1001476a:	dd00      	ble.n	1001476e <__aeabi_dsub+0x156>
1001476c:	e0e4      	b.n	10014938 <__aeabi_dsub+0x320>
1001476e:	2120      	movs	r1, #32
10014770:	0014      	movs	r4, r2
10014772:	0028      	movs	r0, r5
10014774:	1ac9      	subs	r1, r1, r3
10014776:	40d8      	lsrs	r0, r3
10014778:	408c      	lsls	r4, r1
1001477a:	408d      	lsls	r5, r1
1001477c:	4304      	orrs	r4, r0
1001477e:	40da      	lsrs	r2, r3
10014780:	1e68      	subs	r0, r5, #1
10014782:	4185      	sbcs	r5, r0
10014784:	0017      	movs	r7, r2
10014786:	4325      	orrs	r5, r4
10014788:	2400      	movs	r4, #0
1001478a:	e771      	b.n	10014670 <__aeabi_dsub+0x58>
1001478c:	4642      	mov	r2, r8
1001478e:	4663      	mov	r3, ip
10014790:	431a      	orrs	r2, r3
10014792:	d100      	bne.n	10014796 <__aeabi_dsub+0x17e>
10014794:	e24c      	b.n	10014c30 <__aeabi_dsub+0x618>
10014796:	4667      	mov	r7, ip
10014798:	4645      	mov	r5, r8
1001479a:	076b      	lsls	r3, r5, #29
1001479c:	d000      	beq.n	100147a0 <__aeabi_dsub+0x188>
1001479e:	e769      	b.n	10014674 <__aeabi_dsub+0x5c>
100147a0:	2301      	movs	r3, #1
100147a2:	4651      	mov	r1, sl
100147a4:	0778      	lsls	r0, r7, #29
100147a6:	08ed      	lsrs	r5, r5, #3
100147a8:	08fa      	lsrs	r2, r7, #3
100147aa:	400b      	ands	r3, r1
100147ac:	4305      	orrs	r5, r0
100147ae:	4973      	ldr	r1, [pc, #460]	; (1001497c <__aeabi_dsub+0x364>)
100147b0:	428c      	cmp	r4, r1
100147b2:	d038      	beq.n	10014826 <__aeabi_dsub+0x20e>
100147b4:	0312      	lsls	r2, r2, #12
100147b6:	0564      	lsls	r4, r4, #21
100147b8:	0b12      	lsrs	r2, r2, #12
100147ba:	0d64      	lsrs	r4, r4, #21
100147bc:	e779      	b.n	100146b2 <__aeabi_dsub+0x9a>
100147be:	2e00      	cmp	r6, #0
100147c0:	dc00      	bgt.n	100147c4 <__aeabi_dsub+0x1ac>
100147c2:	e09a      	b.n	100148fa <__aeabi_dsub+0x2e2>
100147c4:	2a00      	cmp	r2, #0
100147c6:	d047      	beq.n	10014858 <__aeabi_dsub+0x240>
100147c8:	4a6c      	ldr	r2, [pc, #432]	; (1001497c <__aeabi_dsub+0x364>)
100147ca:	4294      	cmp	r4, r2
100147cc:	d100      	bne.n	100147d0 <__aeabi_dsub+0x1b8>
100147ce:	e74f      	b.n	10014670 <__aeabi_dsub+0x58>
100147d0:	2280      	movs	r2, #128	; 0x80
100147d2:	0412      	lsls	r2, r2, #16
100147d4:	4310      	orrs	r0, r2
100147d6:	4662      	mov	r2, ip
100147d8:	2a38      	cmp	r2, #56	; 0x38
100147da:	dc00      	bgt.n	100147de <__aeabi_dsub+0x1c6>
100147dc:	e108      	b.n	100149f0 <__aeabi_dsub+0x3d8>
100147de:	4301      	orrs	r1, r0
100147e0:	1e48      	subs	r0, r1, #1
100147e2:	4181      	sbcs	r1, r0
100147e4:	2200      	movs	r2, #0
100147e6:	b2c9      	uxtb	r1, r1
100147e8:	1949      	adds	r1, r1, r5
100147ea:	19d2      	adds	r2, r2, r7
100147ec:	42a9      	cmp	r1, r5
100147ee:	41bf      	sbcs	r7, r7
100147f0:	000d      	movs	r5, r1
100147f2:	427f      	negs	r7, r7
100147f4:	18bf      	adds	r7, r7, r2
100147f6:	023a      	lsls	r2, r7, #8
100147f8:	d400      	bmi.n	100147fc <__aeabi_dsub+0x1e4>
100147fa:	e142      	b.n	10014a82 <__aeabi_dsub+0x46a>
100147fc:	4a5f      	ldr	r2, [pc, #380]	; (1001497c <__aeabi_dsub+0x364>)
100147fe:	3401      	adds	r4, #1
10014800:	4294      	cmp	r4, r2
10014802:	d100      	bne.n	10014806 <__aeabi_dsub+0x1ee>
10014804:	e14e      	b.n	10014aa4 <__aeabi_dsub+0x48c>
10014806:	2001      	movs	r0, #1
10014808:	4a5d      	ldr	r2, [pc, #372]	; (10014980 <__aeabi_dsub+0x368>)
1001480a:	0869      	lsrs	r1, r5, #1
1001480c:	403a      	ands	r2, r7
1001480e:	4028      	ands	r0, r5
10014810:	4308      	orrs	r0, r1
10014812:	07d5      	lsls	r5, r2, #31
10014814:	4305      	orrs	r5, r0
10014816:	0857      	lsrs	r7, r2, #1
10014818:	469a      	mov	sl, r3
1001481a:	e729      	b.n	10014670 <__aeabi_dsub+0x58>
1001481c:	0006      	movs	r6, r0
1001481e:	430e      	orrs	r6, r1
10014820:	d000      	beq.n	10014824 <__aeabi_dsub+0x20c>
10014822:	e717      	b.n	10014654 <__aeabi_dsub+0x3c>
10014824:	e714      	b.n	10014650 <__aeabi_dsub+0x38>
10014826:	0029      	movs	r1, r5
10014828:	4311      	orrs	r1, r2
1001482a:	d100      	bne.n	1001482e <__aeabi_dsub+0x216>
1001482c:	e1f9      	b.n	10014c22 <__aeabi_dsub+0x60a>
1001482e:	2180      	movs	r1, #128	; 0x80
10014830:	0309      	lsls	r1, r1, #12
10014832:	430a      	orrs	r2, r1
10014834:	0312      	lsls	r2, r2, #12
10014836:	0b12      	lsrs	r2, r2, #12
10014838:	e73b      	b.n	100146b2 <__aeabi_dsub+0x9a>
1001483a:	2301      	movs	r3, #1
1001483c:	425b      	negs	r3, r3
1001483e:	4698      	mov	r8, r3
10014840:	44c4      	add	ip, r8
10014842:	4663      	mov	r3, ip
10014844:	2b00      	cmp	r3, #0
10014846:	d172      	bne.n	1001492e <__aeabi_dsub+0x316>
10014848:	1a69      	subs	r1, r5, r1
1001484a:	428d      	cmp	r5, r1
1001484c:	419b      	sbcs	r3, r3
1001484e:	1a3f      	subs	r7, r7, r0
10014850:	425b      	negs	r3, r3
10014852:	1aff      	subs	r7, r7, r3
10014854:	000d      	movs	r5, r1
10014856:	e768      	b.n	1001472a <__aeabi_dsub+0x112>
10014858:	0002      	movs	r2, r0
1001485a:	430a      	orrs	r2, r1
1001485c:	d100      	bne.n	10014860 <__aeabi_dsub+0x248>
1001485e:	e707      	b.n	10014670 <__aeabi_dsub+0x58>
10014860:	2201      	movs	r2, #1
10014862:	4252      	negs	r2, r2
10014864:	4690      	mov	r8, r2
10014866:	44c4      	add	ip, r8
10014868:	4662      	mov	r2, ip
1001486a:	2a00      	cmp	r2, #0
1001486c:	d000      	beq.n	10014870 <__aeabi_dsub+0x258>
1001486e:	e0e6      	b.n	10014a3e <__aeabi_dsub+0x426>
10014870:	1869      	adds	r1, r5, r1
10014872:	42a9      	cmp	r1, r5
10014874:	41b6      	sbcs	r6, r6
10014876:	183f      	adds	r7, r7, r0
10014878:	4276      	negs	r6, r6
1001487a:	19f7      	adds	r7, r6, r7
1001487c:	000d      	movs	r5, r1
1001487e:	e7ba      	b.n	100147f6 <__aeabi_dsub+0x1de>
10014880:	2e00      	cmp	r6, #0
10014882:	d000      	beq.n	10014886 <__aeabi_dsub+0x26e>
10014884:	e080      	b.n	10014988 <__aeabi_dsub+0x370>
10014886:	1c62      	adds	r2, r4, #1
10014888:	0552      	lsls	r2, r2, #21
1001488a:	0d52      	lsrs	r2, r2, #21
1001488c:	2a01      	cmp	r2, #1
1001488e:	dc00      	bgt.n	10014892 <__aeabi_dsub+0x27a>
10014890:	e0f9      	b.n	10014a86 <__aeabi_dsub+0x46e>
10014892:	1a6a      	subs	r2, r5, r1
10014894:	4691      	mov	r9, r2
10014896:	454d      	cmp	r5, r9
10014898:	41b6      	sbcs	r6, r6
1001489a:	1a3a      	subs	r2, r7, r0
1001489c:	4276      	negs	r6, r6
1001489e:	1b92      	subs	r2, r2, r6
100148a0:	4690      	mov	r8, r2
100148a2:	0212      	lsls	r2, r2, #8
100148a4:	d400      	bmi.n	100148a8 <__aeabi_dsub+0x290>
100148a6:	e099      	b.n	100149dc <__aeabi_dsub+0x3c4>
100148a8:	1b4d      	subs	r5, r1, r5
100148aa:	42a9      	cmp	r1, r5
100148ac:	4189      	sbcs	r1, r1
100148ae:	1bc7      	subs	r7, r0, r7
100148b0:	4249      	negs	r1, r1
100148b2:	1a7a      	subs	r2, r7, r1
100148b4:	4690      	mov	r8, r2
100148b6:	469a      	mov	sl, r3
100148b8:	e73c      	b.n	10014734 <__aeabi_dsub+0x11c>
100148ba:	4652      	mov	r2, sl
100148bc:	2301      	movs	r3, #1
100148be:	2500      	movs	r5, #0
100148c0:	4013      	ands	r3, r2
100148c2:	2200      	movs	r2, #0
100148c4:	e6f5      	b.n	100146b2 <__aeabi_dsub+0x9a>
100148c6:	0028      	movs	r0, r5
100148c8:	f000 fa68 	bl	10014d9c <__clzsi2>
100148cc:	3020      	adds	r0, #32
100148ce:	0003      	movs	r3, r0
100148d0:	3b08      	subs	r3, #8
100148d2:	2b1f      	cmp	r3, #31
100148d4:	dc00      	bgt.n	100148d8 <__aeabi_dsub+0x2c0>
100148d6:	e739      	b.n	1001474c <__aeabi_dsub+0x134>
100148d8:	002a      	movs	r2, r5
100148da:	3828      	subs	r0, #40	; 0x28
100148dc:	4082      	lsls	r2, r0
100148de:	2500      	movs	r5, #0
100148e0:	429c      	cmp	r4, r3
100148e2:	dc00      	bgt.n	100148e6 <__aeabi_dsub+0x2ce>
100148e4:	e73e      	b.n	10014764 <__aeabi_dsub+0x14c>
100148e6:	4f26      	ldr	r7, [pc, #152]	; (10014980 <__aeabi_dsub+0x368>)
100148e8:	1ae4      	subs	r4, r4, r3
100148ea:	4017      	ands	r7, r2
100148ec:	e6c0      	b.n	10014670 <__aeabi_dsub+0x58>
100148ee:	4301      	orrs	r1, r0
100148f0:	1e48      	subs	r0, r1, #1
100148f2:	4181      	sbcs	r1, r0
100148f4:	2200      	movs	r2, #0
100148f6:	b2c9      	uxtb	r1, r1
100148f8:	e710      	b.n	1001471c <__aeabi_dsub+0x104>
100148fa:	2e00      	cmp	r6, #0
100148fc:	d000      	beq.n	10014900 <__aeabi_dsub+0x2e8>
100148fe:	e0f1      	b.n	10014ae4 <__aeabi_dsub+0x4cc>
10014900:	1c62      	adds	r2, r4, #1
10014902:	4694      	mov	ip, r2
10014904:	0552      	lsls	r2, r2, #21
10014906:	0d52      	lsrs	r2, r2, #21
10014908:	2a01      	cmp	r2, #1
1001490a:	dc00      	bgt.n	1001490e <__aeabi_dsub+0x2f6>
1001490c:	e0a0      	b.n	10014a50 <__aeabi_dsub+0x438>
1001490e:	4a1b      	ldr	r2, [pc, #108]	; (1001497c <__aeabi_dsub+0x364>)
10014910:	4594      	cmp	ip, r2
10014912:	d100      	bne.n	10014916 <__aeabi_dsub+0x2fe>
10014914:	e0c5      	b.n	10014aa2 <__aeabi_dsub+0x48a>
10014916:	1869      	adds	r1, r5, r1
10014918:	42a9      	cmp	r1, r5
1001491a:	4192      	sbcs	r2, r2
1001491c:	183f      	adds	r7, r7, r0
1001491e:	4252      	negs	r2, r2
10014920:	19d2      	adds	r2, r2, r7
10014922:	0849      	lsrs	r1, r1, #1
10014924:	07d5      	lsls	r5, r2, #31
10014926:	430d      	orrs	r5, r1
10014928:	0857      	lsrs	r7, r2, #1
1001492a:	4664      	mov	r4, ip
1001492c:	e6a0      	b.n	10014670 <__aeabi_dsub+0x58>
1001492e:	4b13      	ldr	r3, [pc, #76]	; (1001497c <__aeabi_dsub+0x364>)
10014930:	429c      	cmp	r4, r3
10014932:	d000      	beq.n	10014936 <__aeabi_dsub+0x31e>
10014934:	e6d9      	b.n	100146ea <__aeabi_dsub+0xd2>
10014936:	e69b      	b.n	10014670 <__aeabi_dsub+0x58>
10014938:	0011      	movs	r1, r2
1001493a:	3c1f      	subs	r4, #31
1001493c:	40e1      	lsrs	r1, r4
1001493e:	000c      	movs	r4, r1
10014940:	2b20      	cmp	r3, #32
10014942:	d100      	bne.n	10014946 <__aeabi_dsub+0x32e>
10014944:	e080      	b.n	10014a48 <__aeabi_dsub+0x430>
10014946:	2140      	movs	r1, #64	; 0x40
10014948:	1acb      	subs	r3, r1, r3
1001494a:	409a      	lsls	r2, r3
1001494c:	4315      	orrs	r5, r2
1001494e:	1e6a      	subs	r2, r5, #1
10014950:	4195      	sbcs	r5, r2
10014952:	2700      	movs	r7, #0
10014954:	4325      	orrs	r5, r4
10014956:	2400      	movs	r4, #0
10014958:	e71f      	b.n	1001479a <__aeabi_dsub+0x182>
1001495a:	4663      	mov	r3, ip
1001495c:	0002      	movs	r2, r0
1001495e:	3b20      	subs	r3, #32
10014960:	40da      	lsrs	r2, r3
10014962:	4663      	mov	r3, ip
10014964:	2b20      	cmp	r3, #32
10014966:	d071      	beq.n	10014a4c <__aeabi_dsub+0x434>
10014968:	2340      	movs	r3, #64	; 0x40
1001496a:	4666      	mov	r6, ip
1001496c:	1b9b      	subs	r3, r3, r6
1001496e:	4098      	lsls	r0, r3
10014970:	4301      	orrs	r1, r0
10014972:	1e48      	subs	r0, r1, #1
10014974:	4181      	sbcs	r1, r0
10014976:	4311      	orrs	r1, r2
10014978:	2200      	movs	r2, #0
1001497a:	e6cf      	b.n	1001471c <__aeabi_dsub+0x104>
1001497c:	000007ff 	.word	0x000007ff
10014980:	ff7fffff 	.word	0xff7fffff
10014984:	800fffff 	.word	0x800fffff
10014988:	2c00      	cmp	r4, #0
1001498a:	d048      	beq.n	10014a1e <__aeabi_dsub+0x406>
1001498c:	4cca      	ldr	r4, [pc, #808]	; (10014cb8 <__aeabi_dsub+0x6a0>)
1001498e:	42a2      	cmp	r2, r4
10014990:	d100      	bne.n	10014994 <__aeabi_dsub+0x37c>
10014992:	e0a2      	b.n	10014ada <__aeabi_dsub+0x4c2>
10014994:	4274      	negs	r4, r6
10014996:	46a1      	mov	r9, r4
10014998:	2480      	movs	r4, #128	; 0x80
1001499a:	0424      	lsls	r4, r4, #16
1001499c:	4327      	orrs	r7, r4
1001499e:	464c      	mov	r4, r9
100149a0:	2c38      	cmp	r4, #56	; 0x38
100149a2:	dd00      	ble.n	100149a6 <__aeabi_dsub+0x38e>
100149a4:	e0db      	b.n	10014b5e <__aeabi_dsub+0x546>
100149a6:	2c1f      	cmp	r4, #31
100149a8:	dd00      	ble.n	100149ac <__aeabi_dsub+0x394>
100149aa:	e144      	b.n	10014c36 <__aeabi_dsub+0x61e>
100149ac:	464e      	mov	r6, r9
100149ae:	2420      	movs	r4, #32
100149b0:	1ba4      	subs	r4, r4, r6
100149b2:	003e      	movs	r6, r7
100149b4:	40a6      	lsls	r6, r4
100149b6:	46a2      	mov	sl, r4
100149b8:	46b0      	mov	r8, r6
100149ba:	464c      	mov	r4, r9
100149bc:	002e      	movs	r6, r5
100149be:	40e6      	lsrs	r6, r4
100149c0:	46b4      	mov	ip, r6
100149c2:	4646      	mov	r6, r8
100149c4:	4664      	mov	r4, ip
100149c6:	4326      	orrs	r6, r4
100149c8:	4654      	mov	r4, sl
100149ca:	40a5      	lsls	r5, r4
100149cc:	1e6c      	subs	r4, r5, #1
100149ce:	41a5      	sbcs	r5, r4
100149d0:	0034      	movs	r4, r6
100149d2:	432c      	orrs	r4, r5
100149d4:	464d      	mov	r5, r9
100149d6:	40ef      	lsrs	r7, r5
100149d8:	1b0d      	subs	r5, r1, r4
100149da:	e028      	b.n	10014a2e <__aeabi_dsub+0x416>
100149dc:	464a      	mov	r2, r9
100149de:	4643      	mov	r3, r8
100149e0:	464d      	mov	r5, r9
100149e2:	431a      	orrs	r2, r3
100149e4:	d000      	beq.n	100149e8 <__aeabi_dsub+0x3d0>
100149e6:	e6a5      	b.n	10014734 <__aeabi_dsub+0x11c>
100149e8:	2300      	movs	r3, #0
100149ea:	2400      	movs	r4, #0
100149ec:	2500      	movs	r5, #0
100149ee:	e6de      	b.n	100147ae <__aeabi_dsub+0x196>
100149f0:	2a1f      	cmp	r2, #31
100149f2:	dc5a      	bgt.n	10014aaa <__aeabi_dsub+0x492>
100149f4:	4666      	mov	r6, ip
100149f6:	2220      	movs	r2, #32
100149f8:	1b92      	subs	r2, r2, r6
100149fa:	0006      	movs	r6, r0
100149fc:	4096      	lsls	r6, r2
100149fe:	4691      	mov	r9, r2
10014a00:	46b0      	mov	r8, r6
10014a02:	4662      	mov	r2, ip
10014a04:	000e      	movs	r6, r1
10014a06:	40d6      	lsrs	r6, r2
10014a08:	4642      	mov	r2, r8
10014a0a:	4316      	orrs	r6, r2
10014a0c:	464a      	mov	r2, r9
10014a0e:	4091      	lsls	r1, r2
10014a10:	1e4a      	subs	r2, r1, #1
10014a12:	4191      	sbcs	r1, r2
10014a14:	0002      	movs	r2, r0
10014a16:	4660      	mov	r0, ip
10014a18:	4331      	orrs	r1, r6
10014a1a:	40c2      	lsrs	r2, r0
10014a1c:	e6e4      	b.n	100147e8 <__aeabi_dsub+0x1d0>
10014a1e:	003c      	movs	r4, r7
10014a20:	432c      	orrs	r4, r5
10014a22:	d05a      	beq.n	10014ada <__aeabi_dsub+0x4c2>
10014a24:	43f4      	mvns	r4, r6
10014a26:	46a1      	mov	r9, r4
10014a28:	2c00      	cmp	r4, #0
10014a2a:	d152      	bne.n	10014ad2 <__aeabi_dsub+0x4ba>
10014a2c:	1b4d      	subs	r5, r1, r5
10014a2e:	42a9      	cmp	r1, r5
10014a30:	4189      	sbcs	r1, r1
10014a32:	1bc7      	subs	r7, r0, r7
10014a34:	4249      	negs	r1, r1
10014a36:	1a7f      	subs	r7, r7, r1
10014a38:	0014      	movs	r4, r2
10014a3a:	469a      	mov	sl, r3
10014a3c:	e675      	b.n	1001472a <__aeabi_dsub+0x112>
10014a3e:	4a9e      	ldr	r2, [pc, #632]	; (10014cb8 <__aeabi_dsub+0x6a0>)
10014a40:	4294      	cmp	r4, r2
10014a42:	d000      	beq.n	10014a46 <__aeabi_dsub+0x42e>
10014a44:	e6c7      	b.n	100147d6 <__aeabi_dsub+0x1be>
10014a46:	e613      	b.n	10014670 <__aeabi_dsub+0x58>
10014a48:	2200      	movs	r2, #0
10014a4a:	e77f      	b.n	1001494c <__aeabi_dsub+0x334>
10014a4c:	2000      	movs	r0, #0
10014a4e:	e78f      	b.n	10014970 <__aeabi_dsub+0x358>
10014a50:	2c00      	cmp	r4, #0
10014a52:	d000      	beq.n	10014a56 <__aeabi_dsub+0x43e>
10014a54:	e0c8      	b.n	10014be8 <__aeabi_dsub+0x5d0>
10014a56:	003b      	movs	r3, r7
10014a58:	432b      	orrs	r3, r5
10014a5a:	d100      	bne.n	10014a5e <__aeabi_dsub+0x446>
10014a5c:	e10f      	b.n	10014c7e <__aeabi_dsub+0x666>
10014a5e:	0003      	movs	r3, r0
10014a60:	430b      	orrs	r3, r1
10014a62:	d100      	bne.n	10014a66 <__aeabi_dsub+0x44e>
10014a64:	e604      	b.n	10014670 <__aeabi_dsub+0x58>
10014a66:	1869      	adds	r1, r5, r1
10014a68:	42a9      	cmp	r1, r5
10014a6a:	419b      	sbcs	r3, r3
10014a6c:	183f      	adds	r7, r7, r0
10014a6e:	425b      	negs	r3, r3
10014a70:	19df      	adds	r7, r3, r7
10014a72:	023b      	lsls	r3, r7, #8
10014a74:	d400      	bmi.n	10014a78 <__aeabi_dsub+0x460>
10014a76:	e11a      	b.n	10014cae <__aeabi_dsub+0x696>
10014a78:	4b90      	ldr	r3, [pc, #576]	; (10014cbc <__aeabi_dsub+0x6a4>)
10014a7a:	000d      	movs	r5, r1
10014a7c:	401f      	ands	r7, r3
10014a7e:	4664      	mov	r4, ip
10014a80:	e5f6      	b.n	10014670 <__aeabi_dsub+0x58>
10014a82:	469a      	mov	sl, r3
10014a84:	e689      	b.n	1001479a <__aeabi_dsub+0x182>
10014a86:	003a      	movs	r2, r7
10014a88:	432a      	orrs	r2, r5
10014a8a:	2c00      	cmp	r4, #0
10014a8c:	d15c      	bne.n	10014b48 <__aeabi_dsub+0x530>
10014a8e:	2a00      	cmp	r2, #0
10014a90:	d175      	bne.n	10014b7e <__aeabi_dsub+0x566>
10014a92:	0002      	movs	r2, r0
10014a94:	430a      	orrs	r2, r1
10014a96:	d100      	bne.n	10014a9a <__aeabi_dsub+0x482>
10014a98:	e0ca      	b.n	10014c30 <__aeabi_dsub+0x618>
10014a9a:	0007      	movs	r7, r0
10014a9c:	000d      	movs	r5, r1
10014a9e:	469a      	mov	sl, r3
10014aa0:	e5e6      	b.n	10014670 <__aeabi_dsub+0x58>
10014aa2:	4664      	mov	r4, ip
10014aa4:	2200      	movs	r2, #0
10014aa6:	2500      	movs	r5, #0
10014aa8:	e681      	b.n	100147ae <__aeabi_dsub+0x196>
10014aaa:	4662      	mov	r2, ip
10014aac:	0006      	movs	r6, r0
10014aae:	3a20      	subs	r2, #32
10014ab0:	40d6      	lsrs	r6, r2
10014ab2:	4662      	mov	r2, ip
10014ab4:	46b0      	mov	r8, r6
10014ab6:	2a20      	cmp	r2, #32
10014ab8:	d100      	bne.n	10014abc <__aeabi_dsub+0x4a4>
10014aba:	e0b7      	b.n	10014c2c <__aeabi_dsub+0x614>
10014abc:	2240      	movs	r2, #64	; 0x40
10014abe:	4666      	mov	r6, ip
10014ac0:	1b92      	subs	r2, r2, r6
10014ac2:	4090      	lsls	r0, r2
10014ac4:	4301      	orrs	r1, r0
10014ac6:	4642      	mov	r2, r8
10014ac8:	1e48      	subs	r0, r1, #1
10014aca:	4181      	sbcs	r1, r0
10014acc:	4311      	orrs	r1, r2
10014ace:	2200      	movs	r2, #0
10014ad0:	e68a      	b.n	100147e8 <__aeabi_dsub+0x1d0>
10014ad2:	4c79      	ldr	r4, [pc, #484]	; (10014cb8 <__aeabi_dsub+0x6a0>)
10014ad4:	42a2      	cmp	r2, r4
10014ad6:	d000      	beq.n	10014ada <__aeabi_dsub+0x4c2>
10014ad8:	e761      	b.n	1001499e <__aeabi_dsub+0x386>
10014ada:	0007      	movs	r7, r0
10014adc:	000d      	movs	r5, r1
10014ade:	0014      	movs	r4, r2
10014ae0:	469a      	mov	sl, r3
10014ae2:	e5c5      	b.n	10014670 <__aeabi_dsub+0x58>
10014ae4:	2c00      	cmp	r4, #0
10014ae6:	d141      	bne.n	10014b6c <__aeabi_dsub+0x554>
10014ae8:	003c      	movs	r4, r7
10014aea:	432c      	orrs	r4, r5
10014aec:	d078      	beq.n	10014be0 <__aeabi_dsub+0x5c8>
10014aee:	43f4      	mvns	r4, r6
10014af0:	46a1      	mov	r9, r4
10014af2:	2c00      	cmp	r4, #0
10014af4:	d020      	beq.n	10014b38 <__aeabi_dsub+0x520>
10014af6:	4c70      	ldr	r4, [pc, #448]	; (10014cb8 <__aeabi_dsub+0x6a0>)
10014af8:	42a2      	cmp	r2, r4
10014afa:	d071      	beq.n	10014be0 <__aeabi_dsub+0x5c8>
10014afc:	464c      	mov	r4, r9
10014afe:	2c38      	cmp	r4, #56	; 0x38
10014b00:	dd00      	ble.n	10014b04 <__aeabi_dsub+0x4ec>
10014b02:	e0b2      	b.n	10014c6a <__aeabi_dsub+0x652>
10014b04:	2c1f      	cmp	r4, #31
10014b06:	dd00      	ble.n	10014b0a <__aeabi_dsub+0x4f2>
10014b08:	e0bc      	b.n	10014c84 <__aeabi_dsub+0x66c>
10014b0a:	2620      	movs	r6, #32
10014b0c:	1b34      	subs	r4, r6, r4
10014b0e:	46a2      	mov	sl, r4
10014b10:	003c      	movs	r4, r7
10014b12:	4656      	mov	r6, sl
10014b14:	40b4      	lsls	r4, r6
10014b16:	464e      	mov	r6, r9
10014b18:	46a0      	mov	r8, r4
10014b1a:	002c      	movs	r4, r5
10014b1c:	40f4      	lsrs	r4, r6
10014b1e:	46a4      	mov	ip, r4
10014b20:	4644      	mov	r4, r8
10014b22:	4666      	mov	r6, ip
10014b24:	4334      	orrs	r4, r6
10014b26:	46a4      	mov	ip, r4
10014b28:	4654      	mov	r4, sl
10014b2a:	40a5      	lsls	r5, r4
10014b2c:	4664      	mov	r4, ip
10014b2e:	1e6e      	subs	r6, r5, #1
10014b30:	41b5      	sbcs	r5, r6
10014b32:	4325      	orrs	r5, r4
10014b34:	464c      	mov	r4, r9
10014b36:	40e7      	lsrs	r7, r4
10014b38:	186d      	adds	r5, r5, r1
10014b3a:	428d      	cmp	r5, r1
10014b3c:	4189      	sbcs	r1, r1
10014b3e:	183f      	adds	r7, r7, r0
10014b40:	4249      	negs	r1, r1
10014b42:	19cf      	adds	r7, r1, r7
10014b44:	0014      	movs	r4, r2
10014b46:	e656      	b.n	100147f6 <__aeabi_dsub+0x1de>
10014b48:	2a00      	cmp	r2, #0
10014b4a:	d12f      	bne.n	10014bac <__aeabi_dsub+0x594>
10014b4c:	0002      	movs	r2, r0
10014b4e:	430a      	orrs	r2, r1
10014b50:	d100      	bne.n	10014b54 <__aeabi_dsub+0x53c>
10014b52:	e084      	b.n	10014c5e <__aeabi_dsub+0x646>
10014b54:	0007      	movs	r7, r0
10014b56:	000d      	movs	r5, r1
10014b58:	469a      	mov	sl, r3
10014b5a:	4c57      	ldr	r4, [pc, #348]	; (10014cb8 <__aeabi_dsub+0x6a0>)
10014b5c:	e588      	b.n	10014670 <__aeabi_dsub+0x58>
10014b5e:	433d      	orrs	r5, r7
10014b60:	1e6f      	subs	r7, r5, #1
10014b62:	41bd      	sbcs	r5, r7
10014b64:	b2ec      	uxtb	r4, r5
10014b66:	2700      	movs	r7, #0
10014b68:	1b0d      	subs	r5, r1, r4
10014b6a:	e760      	b.n	10014a2e <__aeabi_dsub+0x416>
10014b6c:	4c52      	ldr	r4, [pc, #328]	; (10014cb8 <__aeabi_dsub+0x6a0>)
10014b6e:	42a2      	cmp	r2, r4
10014b70:	d036      	beq.n	10014be0 <__aeabi_dsub+0x5c8>
10014b72:	4274      	negs	r4, r6
10014b74:	2680      	movs	r6, #128	; 0x80
10014b76:	0436      	lsls	r6, r6, #16
10014b78:	46a1      	mov	r9, r4
10014b7a:	4337      	orrs	r7, r6
10014b7c:	e7be      	b.n	10014afc <__aeabi_dsub+0x4e4>
10014b7e:	0002      	movs	r2, r0
10014b80:	430a      	orrs	r2, r1
10014b82:	d100      	bne.n	10014b86 <__aeabi_dsub+0x56e>
10014b84:	e574      	b.n	10014670 <__aeabi_dsub+0x58>
10014b86:	1a6a      	subs	r2, r5, r1
10014b88:	4690      	mov	r8, r2
10014b8a:	4545      	cmp	r5, r8
10014b8c:	41b6      	sbcs	r6, r6
10014b8e:	1a3a      	subs	r2, r7, r0
10014b90:	4276      	negs	r6, r6
10014b92:	1b92      	subs	r2, r2, r6
10014b94:	4694      	mov	ip, r2
10014b96:	0212      	lsls	r2, r2, #8
10014b98:	d400      	bmi.n	10014b9c <__aeabi_dsub+0x584>
10014b9a:	e5f7      	b.n	1001478c <__aeabi_dsub+0x174>
10014b9c:	1b4d      	subs	r5, r1, r5
10014b9e:	42a9      	cmp	r1, r5
10014ba0:	4189      	sbcs	r1, r1
10014ba2:	1bc7      	subs	r7, r0, r7
10014ba4:	4249      	negs	r1, r1
10014ba6:	1a7f      	subs	r7, r7, r1
10014ba8:	469a      	mov	sl, r3
10014baa:	e561      	b.n	10014670 <__aeabi_dsub+0x58>
10014bac:	0002      	movs	r2, r0
10014bae:	430a      	orrs	r2, r1
10014bb0:	d03a      	beq.n	10014c28 <__aeabi_dsub+0x610>
10014bb2:	08ed      	lsrs	r5, r5, #3
10014bb4:	077c      	lsls	r4, r7, #29
10014bb6:	432c      	orrs	r4, r5
10014bb8:	2580      	movs	r5, #128	; 0x80
10014bba:	08fa      	lsrs	r2, r7, #3
10014bbc:	032d      	lsls	r5, r5, #12
10014bbe:	422a      	tst	r2, r5
10014bc0:	d008      	beq.n	10014bd4 <__aeabi_dsub+0x5bc>
10014bc2:	08c7      	lsrs	r7, r0, #3
10014bc4:	422f      	tst	r7, r5
10014bc6:	d105      	bne.n	10014bd4 <__aeabi_dsub+0x5bc>
10014bc8:	0745      	lsls	r5, r0, #29
10014bca:	002c      	movs	r4, r5
10014bcc:	003a      	movs	r2, r7
10014bce:	469a      	mov	sl, r3
10014bd0:	08c9      	lsrs	r1, r1, #3
10014bd2:	430c      	orrs	r4, r1
10014bd4:	0f67      	lsrs	r7, r4, #29
10014bd6:	00d2      	lsls	r2, r2, #3
10014bd8:	00e5      	lsls	r5, r4, #3
10014bda:	4317      	orrs	r7, r2
10014bdc:	4c36      	ldr	r4, [pc, #216]	; (10014cb8 <__aeabi_dsub+0x6a0>)
10014bde:	e547      	b.n	10014670 <__aeabi_dsub+0x58>
10014be0:	0007      	movs	r7, r0
10014be2:	000d      	movs	r5, r1
10014be4:	0014      	movs	r4, r2
10014be6:	e543      	b.n	10014670 <__aeabi_dsub+0x58>
10014be8:	003a      	movs	r2, r7
10014bea:	432a      	orrs	r2, r5
10014bec:	d043      	beq.n	10014c76 <__aeabi_dsub+0x65e>
10014bee:	0002      	movs	r2, r0
10014bf0:	430a      	orrs	r2, r1
10014bf2:	d019      	beq.n	10014c28 <__aeabi_dsub+0x610>
10014bf4:	08ed      	lsrs	r5, r5, #3
10014bf6:	077c      	lsls	r4, r7, #29
10014bf8:	432c      	orrs	r4, r5
10014bfa:	2580      	movs	r5, #128	; 0x80
10014bfc:	08fa      	lsrs	r2, r7, #3
10014bfe:	032d      	lsls	r5, r5, #12
10014c00:	422a      	tst	r2, r5
10014c02:	d007      	beq.n	10014c14 <__aeabi_dsub+0x5fc>
10014c04:	08c6      	lsrs	r6, r0, #3
10014c06:	422e      	tst	r6, r5
10014c08:	d104      	bne.n	10014c14 <__aeabi_dsub+0x5fc>
10014c0a:	0747      	lsls	r7, r0, #29
10014c0c:	003c      	movs	r4, r7
10014c0e:	0032      	movs	r2, r6
10014c10:	08c9      	lsrs	r1, r1, #3
10014c12:	430c      	orrs	r4, r1
10014c14:	00d7      	lsls	r7, r2, #3
10014c16:	0f62      	lsrs	r2, r4, #29
10014c18:	00e5      	lsls	r5, r4, #3
10014c1a:	4317      	orrs	r7, r2
10014c1c:	469a      	mov	sl, r3
10014c1e:	4c26      	ldr	r4, [pc, #152]	; (10014cb8 <__aeabi_dsub+0x6a0>)
10014c20:	e526      	b.n	10014670 <__aeabi_dsub+0x58>
10014c22:	2200      	movs	r2, #0
10014c24:	2500      	movs	r5, #0
10014c26:	e544      	b.n	100146b2 <__aeabi_dsub+0x9a>
10014c28:	4c23      	ldr	r4, [pc, #140]	; (10014cb8 <__aeabi_dsub+0x6a0>)
10014c2a:	e521      	b.n	10014670 <__aeabi_dsub+0x58>
10014c2c:	2000      	movs	r0, #0
10014c2e:	e749      	b.n	10014ac4 <__aeabi_dsub+0x4ac>
10014c30:	2300      	movs	r3, #0
10014c32:	2500      	movs	r5, #0
10014c34:	e5bb      	b.n	100147ae <__aeabi_dsub+0x196>
10014c36:	464c      	mov	r4, r9
10014c38:	003e      	movs	r6, r7
10014c3a:	3c20      	subs	r4, #32
10014c3c:	40e6      	lsrs	r6, r4
10014c3e:	464c      	mov	r4, r9
10014c40:	46b4      	mov	ip, r6
10014c42:	2c20      	cmp	r4, #32
10014c44:	d031      	beq.n	10014caa <__aeabi_dsub+0x692>
10014c46:	2440      	movs	r4, #64	; 0x40
10014c48:	464e      	mov	r6, r9
10014c4a:	1ba6      	subs	r6, r4, r6
10014c4c:	40b7      	lsls	r7, r6
10014c4e:	433d      	orrs	r5, r7
10014c50:	1e6c      	subs	r4, r5, #1
10014c52:	41a5      	sbcs	r5, r4
10014c54:	4664      	mov	r4, ip
10014c56:	432c      	orrs	r4, r5
10014c58:	2700      	movs	r7, #0
10014c5a:	1b0d      	subs	r5, r1, r4
10014c5c:	e6e7      	b.n	10014a2e <__aeabi_dsub+0x416>
10014c5e:	2280      	movs	r2, #128	; 0x80
10014c60:	2300      	movs	r3, #0
10014c62:	0312      	lsls	r2, r2, #12
10014c64:	4c14      	ldr	r4, [pc, #80]	; (10014cb8 <__aeabi_dsub+0x6a0>)
10014c66:	2500      	movs	r5, #0
10014c68:	e5a1      	b.n	100147ae <__aeabi_dsub+0x196>
10014c6a:	433d      	orrs	r5, r7
10014c6c:	1e6f      	subs	r7, r5, #1
10014c6e:	41bd      	sbcs	r5, r7
10014c70:	2700      	movs	r7, #0
10014c72:	b2ed      	uxtb	r5, r5
10014c74:	e760      	b.n	10014b38 <__aeabi_dsub+0x520>
10014c76:	0007      	movs	r7, r0
10014c78:	000d      	movs	r5, r1
10014c7a:	4c0f      	ldr	r4, [pc, #60]	; (10014cb8 <__aeabi_dsub+0x6a0>)
10014c7c:	e4f8      	b.n	10014670 <__aeabi_dsub+0x58>
10014c7e:	0007      	movs	r7, r0
10014c80:	000d      	movs	r5, r1
10014c82:	e4f5      	b.n	10014670 <__aeabi_dsub+0x58>
10014c84:	464e      	mov	r6, r9
10014c86:	003c      	movs	r4, r7
10014c88:	3e20      	subs	r6, #32
10014c8a:	40f4      	lsrs	r4, r6
10014c8c:	46a0      	mov	r8, r4
10014c8e:	464c      	mov	r4, r9
10014c90:	2c20      	cmp	r4, #32
10014c92:	d00e      	beq.n	10014cb2 <__aeabi_dsub+0x69a>
10014c94:	2440      	movs	r4, #64	; 0x40
10014c96:	464e      	mov	r6, r9
10014c98:	1ba4      	subs	r4, r4, r6
10014c9a:	40a7      	lsls	r7, r4
10014c9c:	433d      	orrs	r5, r7
10014c9e:	1e6f      	subs	r7, r5, #1
10014ca0:	41bd      	sbcs	r5, r7
10014ca2:	4644      	mov	r4, r8
10014ca4:	2700      	movs	r7, #0
10014ca6:	4325      	orrs	r5, r4
10014ca8:	e746      	b.n	10014b38 <__aeabi_dsub+0x520>
10014caa:	2700      	movs	r7, #0
10014cac:	e7cf      	b.n	10014c4e <__aeabi_dsub+0x636>
10014cae:	000d      	movs	r5, r1
10014cb0:	e573      	b.n	1001479a <__aeabi_dsub+0x182>
10014cb2:	2700      	movs	r7, #0
10014cb4:	e7f2      	b.n	10014c9c <__aeabi_dsub+0x684>
10014cb6:	46c0      	nop			; (mov r8, r8)
10014cb8:	000007ff 	.word	0x000007ff
10014cbc:	ff7fffff 	.word	0xff7fffff

10014cc0 <__aeabi_d2iz>:
10014cc0:	030b      	lsls	r3, r1, #12
10014cc2:	b530      	push	{r4, r5, lr}
10014cc4:	4d13      	ldr	r5, [pc, #76]	; (10014d14 <__aeabi_d2iz+0x54>)
10014cc6:	0b1a      	lsrs	r2, r3, #12
10014cc8:	004b      	lsls	r3, r1, #1
10014cca:	0d5b      	lsrs	r3, r3, #21
10014ccc:	0fc9      	lsrs	r1, r1, #31
10014cce:	2400      	movs	r4, #0
10014cd0:	42ab      	cmp	r3, r5
10014cd2:	dd11      	ble.n	10014cf8 <__aeabi_d2iz+0x38>
10014cd4:	4c10      	ldr	r4, [pc, #64]	; (10014d18 <__aeabi_d2iz+0x58>)
10014cd6:	42a3      	cmp	r3, r4
10014cd8:	dc10      	bgt.n	10014cfc <__aeabi_d2iz+0x3c>
10014cda:	2480      	movs	r4, #128	; 0x80
10014cdc:	0364      	lsls	r4, r4, #13
10014cde:	4322      	orrs	r2, r4
10014ce0:	4c0e      	ldr	r4, [pc, #56]	; (10014d1c <__aeabi_d2iz+0x5c>)
10014ce2:	1ae4      	subs	r4, r4, r3
10014ce4:	2c1f      	cmp	r4, #31
10014ce6:	dd0c      	ble.n	10014d02 <__aeabi_d2iz+0x42>
10014ce8:	480d      	ldr	r0, [pc, #52]	; (10014d20 <__aeabi_d2iz+0x60>)
10014cea:	1ac3      	subs	r3, r0, r3
10014cec:	40da      	lsrs	r2, r3
10014cee:	0013      	movs	r3, r2
10014cf0:	425c      	negs	r4, r3
10014cf2:	2900      	cmp	r1, #0
10014cf4:	d100      	bne.n	10014cf8 <__aeabi_d2iz+0x38>
10014cf6:	001c      	movs	r4, r3
10014cf8:	0020      	movs	r0, r4
10014cfa:	bd30      	pop	{r4, r5, pc}
10014cfc:	4b09      	ldr	r3, [pc, #36]	; (10014d24 <__aeabi_d2iz+0x64>)
10014cfe:	18cc      	adds	r4, r1, r3
10014d00:	e7fa      	b.n	10014cf8 <__aeabi_d2iz+0x38>
10014d02:	40e0      	lsrs	r0, r4
10014d04:	4c08      	ldr	r4, [pc, #32]	; (10014d28 <__aeabi_d2iz+0x68>)
10014d06:	46a4      	mov	ip, r4
10014d08:	4463      	add	r3, ip
10014d0a:	409a      	lsls	r2, r3
10014d0c:	0013      	movs	r3, r2
10014d0e:	4303      	orrs	r3, r0
10014d10:	e7ee      	b.n	10014cf0 <__aeabi_d2iz+0x30>
10014d12:	46c0      	nop			; (mov r8, r8)
10014d14:	000003fe 	.word	0x000003fe
10014d18:	0000041d 	.word	0x0000041d
10014d1c:	00000433 	.word	0x00000433
10014d20:	00000413 	.word	0x00000413
10014d24:	7fffffff 	.word	0x7fffffff
10014d28:	fffffbed 	.word	0xfffffbed

10014d2c <__aeabi_ui2d>:
10014d2c:	b570      	push	{r4, r5, r6, lr}
10014d2e:	1e05      	subs	r5, r0, #0
10014d30:	d028      	beq.n	10014d84 <__aeabi_ui2d+0x58>
10014d32:	f000 f833 	bl	10014d9c <__clzsi2>
10014d36:	4b15      	ldr	r3, [pc, #84]	; (10014d8c <__aeabi_ui2d+0x60>)
10014d38:	4a15      	ldr	r2, [pc, #84]	; (10014d90 <__aeabi_ui2d+0x64>)
10014d3a:	1a1b      	subs	r3, r3, r0
10014d3c:	1ad2      	subs	r2, r2, r3
10014d3e:	2a1f      	cmp	r2, #31
10014d40:	dd16      	ble.n	10014d70 <__aeabi_ui2d+0x44>
10014d42:	002c      	movs	r4, r5
10014d44:	4a13      	ldr	r2, [pc, #76]	; (10014d94 <__aeabi_ui2d+0x68>)
10014d46:	2500      	movs	r5, #0
10014d48:	1ad2      	subs	r2, r2, r3
10014d4a:	4094      	lsls	r4, r2
10014d4c:	055a      	lsls	r2, r3, #21
10014d4e:	0324      	lsls	r4, r4, #12
10014d50:	0b24      	lsrs	r4, r4, #12
10014d52:	0d52      	lsrs	r2, r2, #21
10014d54:	2100      	movs	r1, #0
10014d56:	0324      	lsls	r4, r4, #12
10014d58:	0d0b      	lsrs	r3, r1, #20
10014d5a:	0b24      	lsrs	r4, r4, #12
10014d5c:	051b      	lsls	r3, r3, #20
10014d5e:	4323      	orrs	r3, r4
10014d60:	4c0d      	ldr	r4, [pc, #52]	; (10014d98 <__aeabi_ui2d+0x6c>)
10014d62:	0512      	lsls	r2, r2, #20
10014d64:	4023      	ands	r3, r4
10014d66:	4313      	orrs	r3, r2
10014d68:	005b      	lsls	r3, r3, #1
10014d6a:	0028      	movs	r0, r5
10014d6c:	0859      	lsrs	r1, r3, #1
10014d6e:	bd70      	pop	{r4, r5, r6, pc}
10014d70:	210b      	movs	r1, #11
10014d72:	002c      	movs	r4, r5
10014d74:	1a08      	subs	r0, r1, r0
10014d76:	40c4      	lsrs	r4, r0
10014d78:	4095      	lsls	r5, r2
10014d7a:	0324      	lsls	r4, r4, #12
10014d7c:	055a      	lsls	r2, r3, #21
10014d7e:	0b24      	lsrs	r4, r4, #12
10014d80:	0d52      	lsrs	r2, r2, #21
10014d82:	e7e7      	b.n	10014d54 <__aeabi_ui2d+0x28>
10014d84:	2200      	movs	r2, #0
10014d86:	2400      	movs	r4, #0
10014d88:	e7e4      	b.n	10014d54 <__aeabi_ui2d+0x28>
10014d8a:	46c0      	nop			; (mov r8, r8)
10014d8c:	0000041e 	.word	0x0000041e
10014d90:	00000433 	.word	0x00000433
10014d94:	00000413 	.word	0x00000413
10014d98:	800fffff 	.word	0x800fffff

10014d9c <__clzsi2>:
10014d9c:	211c      	movs	r1, #28
10014d9e:	2301      	movs	r3, #1
10014da0:	041b      	lsls	r3, r3, #16
10014da2:	4298      	cmp	r0, r3
10014da4:	d301      	bcc.n	10014daa <__clzsi2+0xe>
10014da6:	0c00      	lsrs	r0, r0, #16
10014da8:	3910      	subs	r1, #16
10014daa:	0a1b      	lsrs	r3, r3, #8
10014dac:	4298      	cmp	r0, r3
10014dae:	d301      	bcc.n	10014db4 <__clzsi2+0x18>
10014db0:	0a00      	lsrs	r0, r0, #8
10014db2:	3908      	subs	r1, #8
10014db4:	091b      	lsrs	r3, r3, #4
10014db6:	4298      	cmp	r0, r3
10014db8:	d301      	bcc.n	10014dbe <__clzsi2+0x22>
10014dba:	0900      	lsrs	r0, r0, #4
10014dbc:	3904      	subs	r1, #4
10014dbe:	a202      	add	r2, pc, #8	; (adr r2, 10014dc8 <__clzsi2+0x2c>)
10014dc0:	5c10      	ldrb	r0, [r2, r0]
10014dc2:	1840      	adds	r0, r0, r1
10014dc4:	4770      	bx	lr
10014dc6:	46c0      	nop			; (mov r8, r8)
10014dc8:	02020304 	.word	0x02020304
10014dcc:	01010101 	.word	0x01010101
	...

10014dd8 <__libc_init_array>:
10014dd8:	4b0e      	ldr	r3, [pc, #56]	; (10014e14 <__libc_init_array+0x3c>)
10014dda:	b570      	push	{r4, r5, r6, lr}
10014ddc:	2500      	movs	r5, #0
10014dde:	001e      	movs	r6, r3
10014de0:	4c0d      	ldr	r4, [pc, #52]	; (10014e18 <__libc_init_array+0x40>)
10014de2:	1ae4      	subs	r4, r4, r3
10014de4:	10a4      	asrs	r4, r4, #2
10014de6:	42a5      	cmp	r5, r4
10014de8:	d004      	beq.n	10014df4 <__libc_init_array+0x1c>
10014dea:	00ab      	lsls	r3, r5, #2
10014dec:	58f3      	ldr	r3, [r6, r3]
10014dee:	4798      	blx	r3
10014df0:	3501      	adds	r5, #1
10014df2:	e7f8      	b.n	10014de6 <__libc_init_array+0xe>
10014df4:	f003 f9b6 	bl	10018164 <_init>
10014df8:	4b08      	ldr	r3, [pc, #32]	; (10014e1c <__libc_init_array+0x44>)
10014dfa:	2500      	movs	r5, #0
10014dfc:	001e      	movs	r6, r3
10014dfe:	4c08      	ldr	r4, [pc, #32]	; (10014e20 <__libc_init_array+0x48>)
10014e00:	1ae4      	subs	r4, r4, r3
10014e02:	10a4      	asrs	r4, r4, #2
10014e04:	42a5      	cmp	r5, r4
10014e06:	d004      	beq.n	10014e12 <__libc_init_array+0x3a>
10014e08:	00ab      	lsls	r3, r5, #2
10014e0a:	58f3      	ldr	r3, [r6, r3]
10014e0c:	4798      	blx	r3
10014e0e:	3501      	adds	r5, #1
10014e10:	e7f8      	b.n	10014e04 <__libc_init_array+0x2c>
10014e12:	bd70      	pop	{r4, r5, r6, pc}
10014e14:	10018170 	.word	0x10018170
10014e18:	10018170 	.word	0x10018170
10014e1c:	10018170 	.word	0x10018170
10014e20:	10018174 	.word	0x10018174

10014e24 <malloc>:
10014e24:	b510      	push	{r4, lr}
10014e26:	4b03      	ldr	r3, [pc, #12]	; (10014e34 <malloc+0x10>)
10014e28:	0001      	movs	r1, r0
10014e2a:	6818      	ldr	r0, [r3, #0]
10014e2c:	f000 f86a 	bl	10014f04 <_malloc_r>
10014e30:	bd10      	pop	{r4, pc}
10014e32:	46c0      	nop			; (mov r8, r8)
10014e34:	1001822c 	.word	0x1001822c

10014e38 <memcmp>:
10014e38:	b530      	push	{r4, r5, lr}
10014e3a:	2400      	movs	r4, #0
10014e3c:	42a2      	cmp	r2, r4
10014e3e:	d008      	beq.n	10014e52 <memcmp+0x1a>
10014e40:	5d03      	ldrb	r3, [r0, r4]
10014e42:	1c65      	adds	r5, r4, #1
10014e44:	5d0c      	ldrb	r4, [r1, r4]
10014e46:	42a3      	cmp	r3, r4
10014e48:	d001      	beq.n	10014e4e <memcmp+0x16>
10014e4a:	1b18      	subs	r0, r3, r4
10014e4c:	e002      	b.n	10014e54 <memcmp+0x1c>
10014e4e:	002c      	movs	r4, r5
10014e50:	e7f4      	b.n	10014e3c <memcmp+0x4>
10014e52:	2000      	movs	r0, #0
10014e54:	bd30      	pop	{r4, r5, pc}

10014e56 <memcpy>:
10014e56:	2300      	movs	r3, #0
10014e58:	b510      	push	{r4, lr}
10014e5a:	429a      	cmp	r2, r3
10014e5c:	d003      	beq.n	10014e66 <memcpy+0x10>
10014e5e:	5ccc      	ldrb	r4, [r1, r3]
10014e60:	54c4      	strb	r4, [r0, r3]
10014e62:	3301      	adds	r3, #1
10014e64:	e7f9      	b.n	10014e5a <memcpy+0x4>
10014e66:	bd10      	pop	{r4, pc}

10014e68 <memset>:
10014e68:	0003      	movs	r3, r0
10014e6a:	1882      	adds	r2, r0, r2
10014e6c:	4293      	cmp	r3, r2
10014e6e:	d002      	beq.n	10014e76 <memset+0xe>
10014e70:	7019      	strb	r1, [r3, #0]
10014e72:	3301      	adds	r3, #1
10014e74:	e7fa      	b.n	10014e6c <memset+0x4>
10014e76:	4770      	bx	lr

10014e78 <_free_r>:
10014e78:	b530      	push	{r4, r5, lr}
10014e7a:	2900      	cmp	r1, #0
10014e7c:	d03e      	beq.n	10014efc <_free_r+0x84>
10014e7e:	3904      	subs	r1, #4
10014e80:	680b      	ldr	r3, [r1, #0]
10014e82:	2b00      	cmp	r3, #0
10014e84:	da00      	bge.n	10014e88 <_free_r+0x10>
10014e86:	18c9      	adds	r1, r1, r3
10014e88:	4a1d      	ldr	r2, [pc, #116]	; (10014f00 <_free_r+0x88>)
10014e8a:	6813      	ldr	r3, [r2, #0]
10014e8c:	0014      	movs	r4, r2
10014e8e:	2b00      	cmp	r3, #0
10014e90:	d102      	bne.n	10014e98 <_free_r+0x20>
10014e92:	604b      	str	r3, [r1, #4]
10014e94:	6011      	str	r1, [r2, #0]
10014e96:	e031      	b.n	10014efc <_free_r+0x84>
10014e98:	428b      	cmp	r3, r1
10014e9a:	d90d      	bls.n	10014eb8 <_free_r+0x40>
10014e9c:	680a      	ldr	r2, [r1, #0]
10014e9e:	1888      	adds	r0, r1, r2
10014ea0:	4283      	cmp	r3, r0
10014ea2:	d103      	bne.n	10014eac <_free_r+0x34>
10014ea4:	6818      	ldr	r0, [r3, #0]
10014ea6:	685b      	ldr	r3, [r3, #4]
10014ea8:	1882      	adds	r2, r0, r2
10014eaa:	600a      	str	r2, [r1, #0]
10014eac:	604b      	str	r3, [r1, #4]
10014eae:	6021      	str	r1, [r4, #0]
10014eb0:	e024      	b.n	10014efc <_free_r+0x84>
10014eb2:	428a      	cmp	r2, r1
10014eb4:	d803      	bhi.n	10014ebe <_free_r+0x46>
10014eb6:	0013      	movs	r3, r2
10014eb8:	685a      	ldr	r2, [r3, #4]
10014eba:	2a00      	cmp	r2, #0
10014ebc:	d1f9      	bne.n	10014eb2 <_free_r+0x3a>
10014ebe:	681d      	ldr	r5, [r3, #0]
10014ec0:	195c      	adds	r4, r3, r5
10014ec2:	428c      	cmp	r4, r1
10014ec4:	d10b      	bne.n	10014ede <_free_r+0x66>
10014ec6:	6809      	ldr	r1, [r1, #0]
10014ec8:	1869      	adds	r1, r5, r1
10014eca:	1858      	adds	r0, r3, r1
10014ecc:	6019      	str	r1, [r3, #0]
10014ece:	4282      	cmp	r2, r0
10014ed0:	d114      	bne.n	10014efc <_free_r+0x84>
10014ed2:	6810      	ldr	r0, [r2, #0]
10014ed4:	6852      	ldr	r2, [r2, #4]
10014ed6:	1841      	adds	r1, r0, r1
10014ed8:	6019      	str	r1, [r3, #0]
10014eda:	605a      	str	r2, [r3, #4]
10014edc:	e00e      	b.n	10014efc <_free_r+0x84>
10014ede:	428c      	cmp	r4, r1
10014ee0:	d902      	bls.n	10014ee8 <_free_r+0x70>
10014ee2:	230c      	movs	r3, #12
10014ee4:	6003      	str	r3, [r0, #0]
10014ee6:	e009      	b.n	10014efc <_free_r+0x84>
10014ee8:	6808      	ldr	r0, [r1, #0]
10014eea:	180c      	adds	r4, r1, r0
10014eec:	42a2      	cmp	r2, r4
10014eee:	d103      	bne.n	10014ef8 <_free_r+0x80>
10014ef0:	6814      	ldr	r4, [r2, #0]
10014ef2:	6852      	ldr	r2, [r2, #4]
10014ef4:	1820      	adds	r0, r4, r0
10014ef6:	6008      	str	r0, [r1, #0]
10014ef8:	604a      	str	r2, [r1, #4]
10014efa:	6059      	str	r1, [r3, #4]
10014efc:	bd30      	pop	{r4, r5, pc}
10014efe:	46c0      	nop			; (mov r8, r8)
10014f00:	10019d00 	.word	0x10019d00

10014f04 <_malloc_r>:
10014f04:	2303      	movs	r3, #3
10014f06:	b570      	push	{r4, r5, r6, lr}
10014f08:	1ccd      	adds	r5, r1, #3
10014f0a:	439d      	bics	r5, r3
10014f0c:	3508      	adds	r5, #8
10014f0e:	0006      	movs	r6, r0
10014f10:	2d0c      	cmp	r5, #12
10014f12:	d201      	bcs.n	10014f18 <_malloc_r+0x14>
10014f14:	250c      	movs	r5, #12
10014f16:	e005      	b.n	10014f24 <_malloc_r+0x20>
10014f18:	2d00      	cmp	r5, #0
10014f1a:	da03      	bge.n	10014f24 <_malloc_r+0x20>
10014f1c:	230c      	movs	r3, #12
10014f1e:	2000      	movs	r0, #0
10014f20:	6033      	str	r3, [r6, #0]
10014f22:	e040      	b.n	10014fa6 <_malloc_r+0xa2>
10014f24:	42a9      	cmp	r1, r5
10014f26:	d8f9      	bhi.n	10014f1c <_malloc_r+0x18>
10014f28:	4b1f      	ldr	r3, [pc, #124]	; (10014fa8 <_malloc_r+0xa4>)
10014f2a:	681c      	ldr	r4, [r3, #0]
10014f2c:	001a      	movs	r2, r3
10014f2e:	0021      	movs	r1, r4
10014f30:	2900      	cmp	r1, #0
10014f32:	d013      	beq.n	10014f5c <_malloc_r+0x58>
10014f34:	680b      	ldr	r3, [r1, #0]
10014f36:	1b5b      	subs	r3, r3, r5
10014f38:	d40d      	bmi.n	10014f56 <_malloc_r+0x52>
10014f3a:	2b0b      	cmp	r3, #11
10014f3c:	d902      	bls.n	10014f44 <_malloc_r+0x40>
10014f3e:	600b      	str	r3, [r1, #0]
10014f40:	18cc      	adds	r4, r1, r3
10014f42:	e01e      	b.n	10014f82 <_malloc_r+0x7e>
10014f44:	428c      	cmp	r4, r1
10014f46:	d102      	bne.n	10014f4e <_malloc_r+0x4a>
10014f48:	6863      	ldr	r3, [r4, #4]
10014f4a:	6013      	str	r3, [r2, #0]
10014f4c:	e01a      	b.n	10014f84 <_malloc_r+0x80>
10014f4e:	684b      	ldr	r3, [r1, #4]
10014f50:	6063      	str	r3, [r4, #4]
10014f52:	000c      	movs	r4, r1
10014f54:	e016      	b.n	10014f84 <_malloc_r+0x80>
10014f56:	000c      	movs	r4, r1
10014f58:	6849      	ldr	r1, [r1, #4]
10014f5a:	e7e9      	b.n	10014f30 <_malloc_r+0x2c>
10014f5c:	4c13      	ldr	r4, [pc, #76]	; (10014fac <_malloc_r+0xa8>)
10014f5e:	6823      	ldr	r3, [r4, #0]
10014f60:	2b00      	cmp	r3, #0
10014f62:	d103      	bne.n	10014f6c <_malloc_r+0x68>
10014f64:	0030      	movs	r0, r6
10014f66:	f000 f8f9 	bl	1001515c <_sbrk_r>
10014f6a:	6020      	str	r0, [r4, #0]
10014f6c:	0029      	movs	r1, r5
10014f6e:	0030      	movs	r0, r6
10014f70:	f000 f8f4 	bl	1001515c <_sbrk_r>
10014f74:	1c43      	adds	r3, r0, #1
10014f76:	d0d1      	beq.n	10014f1c <_malloc_r+0x18>
10014f78:	2303      	movs	r3, #3
10014f7a:	1cc4      	adds	r4, r0, #3
10014f7c:	439c      	bics	r4, r3
10014f7e:	42a0      	cmp	r0, r4
10014f80:	d10a      	bne.n	10014f98 <_malloc_r+0x94>
10014f82:	6025      	str	r5, [r4, #0]
10014f84:	0020      	movs	r0, r4
10014f86:	2207      	movs	r2, #7
10014f88:	300b      	adds	r0, #11
10014f8a:	1d23      	adds	r3, r4, #4
10014f8c:	4390      	bics	r0, r2
10014f8e:	1ac3      	subs	r3, r0, r3
10014f90:	d009      	beq.n	10014fa6 <_malloc_r+0xa2>
10014f92:	425a      	negs	r2, r3
10014f94:	50e2      	str	r2, [r4, r3]
10014f96:	e006      	b.n	10014fa6 <_malloc_r+0xa2>
10014f98:	1a21      	subs	r1, r4, r0
10014f9a:	0030      	movs	r0, r6
10014f9c:	f000 f8de 	bl	1001515c <_sbrk_r>
10014fa0:	1c43      	adds	r3, r0, #1
10014fa2:	d1ee      	bne.n	10014f82 <_malloc_r+0x7e>
10014fa4:	e7ba      	b.n	10014f1c <_malloc_r+0x18>
10014fa6:	bd70      	pop	{r4, r5, r6, pc}
10014fa8:	10019d00 	.word	0x10019d00
10014fac:	10019cfc 	.word	0x10019cfc

10014fb0 <iprintf>:
10014fb0:	b40f      	push	{r0, r1, r2, r3}
10014fb2:	4b0b      	ldr	r3, [pc, #44]	; (10014fe0 <iprintf+0x30>)
10014fb4:	b513      	push	{r0, r1, r4, lr}
10014fb6:	681c      	ldr	r4, [r3, #0]
10014fb8:	2c00      	cmp	r4, #0
10014fba:	d005      	beq.n	10014fc8 <iprintf+0x18>
10014fbc:	69a3      	ldr	r3, [r4, #24]
10014fbe:	2b00      	cmp	r3, #0
10014fc0:	d102      	bne.n	10014fc8 <iprintf+0x18>
10014fc2:	0020      	movs	r0, r4
10014fc4:	f000 fb58 	bl	10015678 <__sinit>
10014fc8:	ab05      	add	r3, sp, #20
10014fca:	9a04      	ldr	r2, [sp, #16]
10014fcc:	68a1      	ldr	r1, [r4, #8]
10014fce:	0020      	movs	r0, r4
10014fd0:	9301      	str	r3, [sp, #4]
10014fd2:	f000 fc71 	bl	100158b8 <_vfiprintf_r>
10014fd6:	bc16      	pop	{r1, r2, r4}
10014fd8:	bc08      	pop	{r3}
10014fda:	b004      	add	sp, #16
10014fdc:	4718      	bx	r3
10014fde:	46c0      	nop			; (mov r8, r8)
10014fe0:	1001822c 	.word	0x1001822c

10014fe4 <putchar>:
10014fe4:	4b08      	ldr	r3, [pc, #32]	; (10015008 <putchar+0x24>)
10014fe6:	b570      	push	{r4, r5, r6, lr}
10014fe8:	681c      	ldr	r4, [r3, #0]
10014fea:	0005      	movs	r5, r0
10014fec:	2c00      	cmp	r4, #0
10014fee:	d005      	beq.n	10014ffc <putchar+0x18>
10014ff0:	69a3      	ldr	r3, [r4, #24]
10014ff2:	2b00      	cmp	r3, #0
10014ff4:	d102      	bne.n	10014ffc <putchar+0x18>
10014ff6:	0020      	movs	r0, r4
10014ff8:	f000 fb3e 	bl	10015678 <__sinit>
10014ffc:	0029      	movs	r1, r5
10014ffe:	68a2      	ldr	r2, [r4, #8]
10015000:	0020      	movs	r0, r4
10015002:	f000 ff05 	bl	10015e10 <_putc_r>
10015006:	bd70      	pop	{r4, r5, r6, pc}
10015008:	1001822c 	.word	0x1001822c

1001500c <_puts_r>:
1001500c:	b570      	push	{r4, r5, r6, lr}
1001500e:	0005      	movs	r5, r0
10015010:	000e      	movs	r6, r1
10015012:	2800      	cmp	r0, #0
10015014:	d004      	beq.n	10015020 <_puts_r+0x14>
10015016:	6983      	ldr	r3, [r0, #24]
10015018:	2b00      	cmp	r3, #0
1001501a:	d101      	bne.n	10015020 <_puts_r+0x14>
1001501c:	f000 fb2c 	bl	10015678 <__sinit>
10015020:	69ab      	ldr	r3, [r5, #24]
10015022:	68ac      	ldr	r4, [r5, #8]
10015024:	2b00      	cmp	r3, #0
10015026:	d102      	bne.n	1001502e <_puts_r+0x22>
10015028:	0028      	movs	r0, r5
1001502a:	f000 fb25 	bl	10015678 <__sinit>
1001502e:	4b25      	ldr	r3, [pc, #148]	; (100150c4 <_puts_r+0xb8>)
10015030:	429c      	cmp	r4, r3
10015032:	d101      	bne.n	10015038 <_puts_r+0x2c>
10015034:	686c      	ldr	r4, [r5, #4]
10015036:	e008      	b.n	1001504a <_puts_r+0x3e>
10015038:	4b23      	ldr	r3, [pc, #140]	; (100150c8 <_puts_r+0xbc>)
1001503a:	429c      	cmp	r4, r3
1001503c:	d101      	bne.n	10015042 <_puts_r+0x36>
1001503e:	68ac      	ldr	r4, [r5, #8]
10015040:	e003      	b.n	1001504a <_puts_r+0x3e>
10015042:	4b22      	ldr	r3, [pc, #136]	; (100150cc <_puts_r+0xc0>)
10015044:	429c      	cmp	r4, r3
10015046:	d100      	bne.n	1001504a <_puts_r+0x3e>
10015048:	68ec      	ldr	r4, [r5, #12]
1001504a:	89a3      	ldrh	r3, [r4, #12]
1001504c:	071b      	lsls	r3, r3, #28
1001504e:	d502      	bpl.n	10015056 <_puts_r+0x4a>
10015050:	6923      	ldr	r3, [r4, #16]
10015052:	2b00      	cmp	r3, #0
10015054:	d111      	bne.n	1001507a <_puts_r+0x6e>
10015056:	0021      	movs	r1, r4
10015058:	0028      	movs	r0, r5
1001505a:	f000 f9a3 	bl	100153a4 <__swsetup_r>
1001505e:	2800      	cmp	r0, #0
10015060:	d00b      	beq.n	1001507a <_puts_r+0x6e>
10015062:	2001      	movs	r0, #1
10015064:	4240      	negs	r0, r0
10015066:	e02b      	b.n	100150c0 <_puts_r+0xb4>
10015068:	3b01      	subs	r3, #1
1001506a:	3601      	adds	r6, #1
1001506c:	60a3      	str	r3, [r4, #8]
1001506e:	2b00      	cmp	r3, #0
10015070:	db08      	blt.n	10015084 <_puts_r+0x78>
10015072:	6823      	ldr	r3, [r4, #0]
10015074:	1c5a      	adds	r2, r3, #1
10015076:	6022      	str	r2, [r4, #0]
10015078:	7019      	strb	r1, [r3, #0]
1001507a:	7831      	ldrb	r1, [r6, #0]
1001507c:	68a3      	ldr	r3, [r4, #8]
1001507e:	2900      	cmp	r1, #0
10015080:	d1f2      	bne.n	10015068 <_puts_r+0x5c>
10015082:	e00b      	b.n	1001509c <_puts_r+0x90>
10015084:	69a2      	ldr	r2, [r4, #24]
10015086:	4293      	cmp	r3, r2
10015088:	db01      	blt.n	1001508e <_puts_r+0x82>
1001508a:	290a      	cmp	r1, #10
1001508c:	d1f1      	bne.n	10015072 <_puts_r+0x66>
1001508e:	0022      	movs	r2, r4
10015090:	0028      	movs	r0, r5
10015092:	f000 f92f 	bl	100152f4 <__swbuf_r>
10015096:	1c43      	adds	r3, r0, #1
10015098:	d1ef      	bne.n	1001507a <_puts_r+0x6e>
1001509a:	e7e2      	b.n	10015062 <_puts_r+0x56>
1001509c:	3b01      	subs	r3, #1
1001509e:	60a3      	str	r3, [r4, #8]
100150a0:	2b00      	cmp	r3, #0
100150a2:	da08      	bge.n	100150b6 <_puts_r+0xaa>
100150a4:	0022      	movs	r2, r4
100150a6:	310a      	adds	r1, #10
100150a8:	0028      	movs	r0, r5
100150aa:	f000 f923 	bl	100152f4 <__swbuf_r>
100150ae:	1c43      	adds	r3, r0, #1
100150b0:	d0d7      	beq.n	10015062 <_puts_r+0x56>
100150b2:	200a      	movs	r0, #10
100150b4:	e004      	b.n	100150c0 <_puts_r+0xb4>
100150b6:	200a      	movs	r0, #10
100150b8:	6823      	ldr	r3, [r4, #0]
100150ba:	1c5a      	adds	r2, r3, #1
100150bc:	6022      	str	r2, [r4, #0]
100150be:	7018      	strb	r0, [r3, #0]
100150c0:	bd70      	pop	{r4, r5, r6, pc}
100150c2:	46c0      	nop			; (mov r8, r8)
100150c4:	100180d0 	.word	0x100180d0
100150c8:	100180f0 	.word	0x100180f0
100150cc:	10018110 	.word	0x10018110

100150d0 <puts>:
100150d0:	b510      	push	{r4, lr}
100150d2:	4b03      	ldr	r3, [pc, #12]	; (100150e0 <puts+0x10>)
100150d4:	0001      	movs	r1, r0
100150d6:	6818      	ldr	r0, [r3, #0]
100150d8:	f7ff ff98 	bl	1001500c <_puts_r>
100150dc:	bd10      	pop	{r4, pc}
100150de:	46c0      	nop			; (mov r8, r8)
100150e0:	1001822c 	.word	0x1001822c

100150e4 <rand>:
100150e4:	4b15      	ldr	r3, [pc, #84]	; (1001513c <rand+0x58>)
100150e6:	b510      	push	{r4, lr}
100150e8:	681c      	ldr	r4, [r3, #0]
100150ea:	6ba3      	ldr	r3, [r4, #56]	; 0x38
100150ec:	2b00      	cmp	r3, #0
100150ee:	d115      	bne.n	1001511c <rand+0x38>
100150f0:	2018      	movs	r0, #24
100150f2:	f7ff fe97 	bl	10014e24 <malloc>
100150f6:	4b12      	ldr	r3, [pc, #72]	; (10015140 <rand+0x5c>)
100150f8:	63a0      	str	r0, [r4, #56]	; 0x38
100150fa:	8003      	strh	r3, [r0, #0]
100150fc:	4b11      	ldr	r3, [pc, #68]	; (10015144 <rand+0x60>)
100150fe:	2201      	movs	r2, #1
10015100:	8043      	strh	r3, [r0, #2]
10015102:	4b11      	ldr	r3, [pc, #68]	; (10015148 <rand+0x64>)
10015104:	8083      	strh	r3, [r0, #4]
10015106:	4b11      	ldr	r3, [pc, #68]	; (1001514c <rand+0x68>)
10015108:	80c3      	strh	r3, [r0, #6]
1001510a:	4b11      	ldr	r3, [pc, #68]	; (10015150 <rand+0x6c>)
1001510c:	8103      	strh	r3, [r0, #8]
1001510e:	2305      	movs	r3, #5
10015110:	8143      	strh	r3, [r0, #10]
10015112:	3306      	adds	r3, #6
10015114:	8183      	strh	r3, [r0, #12]
10015116:	2300      	movs	r3, #0
10015118:	6102      	str	r2, [r0, #16]
1001511a:	6143      	str	r3, [r0, #20]
1001511c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
1001511e:	4a0d      	ldr	r2, [pc, #52]	; (10015154 <rand+0x70>)
10015120:	6920      	ldr	r0, [r4, #16]
10015122:	6961      	ldr	r1, [r4, #20]
10015124:	4b0c      	ldr	r3, [pc, #48]	; (10015158 <rand+0x74>)
10015126:	f7fe f80b 	bl	10013140 <__aeabi_lmul>
1001512a:	2201      	movs	r2, #1
1001512c:	2300      	movs	r3, #0
1001512e:	1880      	adds	r0, r0, r2
10015130:	4159      	adcs	r1, r3
10015132:	6120      	str	r0, [r4, #16]
10015134:	6161      	str	r1, [r4, #20]
10015136:	0048      	lsls	r0, r1, #1
10015138:	0840      	lsrs	r0, r0, #1
1001513a:	bd10      	pop	{r4, pc}
1001513c:	1001822c 	.word	0x1001822c
10015140:	0000330e 	.word	0x0000330e
10015144:	ffffabcd 	.word	0xffffabcd
10015148:	00001234 	.word	0x00001234
1001514c:	ffffe66d 	.word	0xffffe66d
10015150:	ffffdeec 	.word	0xffffdeec
10015154:	4c957f2d 	.word	0x4c957f2d
10015158:	5851f42d 	.word	0x5851f42d

1001515c <_sbrk_r>:
1001515c:	2300      	movs	r3, #0
1001515e:	b570      	push	{r4, r5, r6, lr}
10015160:	4c06      	ldr	r4, [pc, #24]	; (1001517c <_sbrk_r+0x20>)
10015162:	0005      	movs	r5, r0
10015164:	0008      	movs	r0, r1
10015166:	6023      	str	r3, [r4, #0]
10015168:	f7f8 f9ba 	bl	1000d4e0 <_sbrk>
1001516c:	1c43      	adds	r3, r0, #1
1001516e:	d103      	bne.n	10015178 <_sbrk_r+0x1c>
10015170:	6823      	ldr	r3, [r4, #0]
10015172:	2b00      	cmp	r3, #0
10015174:	d000      	beq.n	10015178 <_sbrk_r+0x1c>
10015176:	602b      	str	r3, [r5, #0]
10015178:	bd70      	pop	{r4, r5, r6, pc}
1001517a:	46c0      	nop			; (mov r8, r8)
1001517c:	1001b0cc 	.word	0x1001b0cc

10015180 <setbuf>:
10015180:	424a      	negs	r2, r1
10015182:	414a      	adcs	r2, r1
10015184:	2380      	movs	r3, #128	; 0x80
10015186:	b510      	push	{r4, lr}
10015188:	0052      	lsls	r2, r2, #1
1001518a:	00db      	lsls	r3, r3, #3
1001518c:	f000 f802 	bl	10015194 <setvbuf>
10015190:	bd10      	pop	{r4, pc}
	...

10015194 <setvbuf>:
10015194:	b5f0      	push	{r4, r5, r6, r7, lr}
10015196:	001d      	movs	r5, r3
10015198:	4b51      	ldr	r3, [pc, #324]	; (100152e0 <setvbuf+0x14c>)
1001519a:	b085      	sub	sp, #20
1001519c:	681e      	ldr	r6, [r3, #0]
1001519e:	0004      	movs	r4, r0
100151a0:	000f      	movs	r7, r1
100151a2:	9200      	str	r2, [sp, #0]
100151a4:	2e00      	cmp	r6, #0
100151a6:	d005      	beq.n	100151b4 <setvbuf+0x20>
100151a8:	69b3      	ldr	r3, [r6, #24]
100151aa:	2b00      	cmp	r3, #0
100151ac:	d102      	bne.n	100151b4 <setvbuf+0x20>
100151ae:	0030      	movs	r0, r6
100151b0:	f000 fa62 	bl	10015678 <__sinit>
100151b4:	4b4b      	ldr	r3, [pc, #300]	; (100152e4 <setvbuf+0x150>)
100151b6:	429c      	cmp	r4, r3
100151b8:	d101      	bne.n	100151be <setvbuf+0x2a>
100151ba:	6874      	ldr	r4, [r6, #4]
100151bc:	e008      	b.n	100151d0 <setvbuf+0x3c>
100151be:	4b4a      	ldr	r3, [pc, #296]	; (100152e8 <setvbuf+0x154>)
100151c0:	429c      	cmp	r4, r3
100151c2:	d101      	bne.n	100151c8 <setvbuf+0x34>
100151c4:	68b4      	ldr	r4, [r6, #8]
100151c6:	e003      	b.n	100151d0 <setvbuf+0x3c>
100151c8:	4b48      	ldr	r3, [pc, #288]	; (100152ec <setvbuf+0x158>)
100151ca:	429c      	cmp	r4, r3
100151cc:	d100      	bne.n	100151d0 <setvbuf+0x3c>
100151ce:	68f4      	ldr	r4, [r6, #12]
100151d0:	9b00      	ldr	r3, [sp, #0]
100151d2:	2b02      	cmp	r3, #2
100151d4:	d005      	beq.n	100151e2 <setvbuf+0x4e>
100151d6:	2b01      	cmp	r3, #1
100151d8:	d900      	bls.n	100151dc <setvbuf+0x48>
100151da:	e07c      	b.n	100152d6 <setvbuf+0x142>
100151dc:	2d00      	cmp	r5, #0
100151de:	da00      	bge.n	100151e2 <setvbuf+0x4e>
100151e0:	e079      	b.n	100152d6 <setvbuf+0x142>
100151e2:	0021      	movs	r1, r4
100151e4:	0030      	movs	r0, r6
100151e6:	f000 f9d9 	bl	1001559c <_fflush_r>
100151ea:	6b61      	ldr	r1, [r4, #52]	; 0x34
100151ec:	2900      	cmp	r1, #0
100151ee:	d008      	beq.n	10015202 <setvbuf+0x6e>
100151f0:	0023      	movs	r3, r4
100151f2:	3344      	adds	r3, #68	; 0x44
100151f4:	4299      	cmp	r1, r3
100151f6:	d002      	beq.n	100151fe <setvbuf+0x6a>
100151f8:	0030      	movs	r0, r6
100151fa:	f7ff fe3d 	bl	10014e78 <_free_r>
100151fe:	2300      	movs	r3, #0
10015200:	6363      	str	r3, [r4, #52]	; 0x34
10015202:	2300      	movs	r3, #0
10015204:	61a3      	str	r3, [r4, #24]
10015206:	6063      	str	r3, [r4, #4]
10015208:	89a3      	ldrh	r3, [r4, #12]
1001520a:	061b      	lsls	r3, r3, #24
1001520c:	d503      	bpl.n	10015216 <setvbuf+0x82>
1001520e:	6921      	ldr	r1, [r4, #16]
10015210:	0030      	movs	r0, r6
10015212:	f7ff fe31 	bl	10014e78 <_free_r>
10015216:	89a2      	ldrh	r2, [r4, #12]
10015218:	4b35      	ldr	r3, [pc, #212]	; (100152f0 <setvbuf+0x15c>)
1001521a:	4013      	ands	r3, r2
1001521c:	81a3      	strh	r3, [r4, #12]
1001521e:	9b00      	ldr	r3, [sp, #0]
10015220:	2b02      	cmp	r3, #2
10015222:	d021      	beq.n	10015268 <setvbuf+0xd4>
10015224:	ab03      	add	r3, sp, #12
10015226:	aa02      	add	r2, sp, #8
10015228:	0021      	movs	r1, r4
1001522a:	0030      	movs	r0, r6
1001522c:	f000 fab8 	bl	100157a0 <__swhatbuf_r>
10015230:	89a3      	ldrh	r3, [r4, #12]
10015232:	4318      	orrs	r0, r3
10015234:	81a0      	strh	r0, [r4, #12]
10015236:	2d00      	cmp	r5, #0
10015238:	d101      	bne.n	1001523e <setvbuf+0xaa>
1001523a:	9d02      	ldr	r5, [sp, #8]
1001523c:	e001      	b.n	10015242 <setvbuf+0xae>
1001523e:	2f00      	cmp	r7, #0
10015240:	d125      	bne.n	1001528e <setvbuf+0xfa>
10015242:	0028      	movs	r0, r5
10015244:	f7ff fdee 	bl	10014e24 <malloc>
10015248:	9501      	str	r5, [sp, #4]
1001524a:	1e07      	subs	r7, r0, #0
1001524c:	d11a      	bne.n	10015284 <setvbuf+0xf0>
1001524e:	9b02      	ldr	r3, [sp, #8]
10015250:	9301      	str	r3, [sp, #4]
10015252:	42ab      	cmp	r3, r5
10015254:	d102      	bne.n	1001525c <setvbuf+0xc8>
10015256:	2001      	movs	r0, #1
10015258:	4240      	negs	r0, r0
1001525a:	e006      	b.n	1001526a <setvbuf+0xd6>
1001525c:	9801      	ldr	r0, [sp, #4]
1001525e:	f7ff fde1 	bl	10014e24 <malloc>
10015262:	1e07      	subs	r7, r0, #0
10015264:	d10e      	bne.n	10015284 <setvbuf+0xf0>
10015266:	e7f6      	b.n	10015256 <setvbuf+0xc2>
10015268:	2000      	movs	r0, #0
1001526a:	2202      	movs	r2, #2
1001526c:	89a3      	ldrh	r3, [r4, #12]
1001526e:	4313      	orrs	r3, r2
10015270:	81a3      	strh	r3, [r4, #12]
10015272:	2300      	movs	r3, #0
10015274:	60a3      	str	r3, [r4, #8]
10015276:	0023      	movs	r3, r4
10015278:	3347      	adds	r3, #71	; 0x47
1001527a:	6023      	str	r3, [r4, #0]
1001527c:	6123      	str	r3, [r4, #16]
1001527e:	2301      	movs	r3, #1
10015280:	6163      	str	r3, [r4, #20]
10015282:	e02a      	b.n	100152da <setvbuf+0x146>
10015284:	2280      	movs	r2, #128	; 0x80
10015286:	89a3      	ldrh	r3, [r4, #12]
10015288:	9d01      	ldr	r5, [sp, #4]
1001528a:	4313      	orrs	r3, r2
1001528c:	81a3      	strh	r3, [r4, #12]
1001528e:	69b3      	ldr	r3, [r6, #24]
10015290:	2b00      	cmp	r3, #0
10015292:	d102      	bne.n	1001529a <setvbuf+0x106>
10015294:	0030      	movs	r0, r6
10015296:	f000 f9ef 	bl	10015678 <__sinit>
1001529a:	9b00      	ldr	r3, [sp, #0]
1001529c:	2b01      	cmp	r3, #1
1001529e:	d103      	bne.n	100152a8 <setvbuf+0x114>
100152a0:	89a3      	ldrh	r3, [r4, #12]
100152a2:	9a00      	ldr	r2, [sp, #0]
100152a4:	431a      	orrs	r2, r3
100152a6:	81a2      	strh	r2, [r4, #12]
100152a8:	2308      	movs	r3, #8
100152aa:	89a2      	ldrh	r2, [r4, #12]
100152ac:	6027      	str	r7, [r4, #0]
100152ae:	4013      	ands	r3, r2
100152b0:	6127      	str	r7, [r4, #16]
100152b2:	6165      	str	r5, [r4, #20]
100152b4:	1e18      	subs	r0, r3, #0
100152b6:	d00c      	beq.n	100152d2 <setvbuf+0x13e>
100152b8:	2301      	movs	r3, #1
100152ba:	401a      	ands	r2, r3
100152bc:	2300      	movs	r3, #0
100152be:	1e10      	subs	r0, r2, #0
100152c0:	4298      	cmp	r0, r3
100152c2:	d004      	beq.n	100152ce <setvbuf+0x13a>
100152c4:	426d      	negs	r5, r5
100152c6:	60a3      	str	r3, [r4, #8]
100152c8:	61a5      	str	r5, [r4, #24]
100152ca:	0018      	movs	r0, r3
100152cc:	e005      	b.n	100152da <setvbuf+0x146>
100152ce:	60a5      	str	r5, [r4, #8]
100152d0:	e003      	b.n	100152da <setvbuf+0x146>
100152d2:	60a3      	str	r3, [r4, #8]
100152d4:	e001      	b.n	100152da <setvbuf+0x146>
100152d6:	2001      	movs	r0, #1
100152d8:	4240      	negs	r0, r0
100152da:	b005      	add	sp, #20
100152dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
100152de:	46c0      	nop			; (mov r8, r8)
100152e0:	1001822c 	.word	0x1001822c
100152e4:	100180d0 	.word	0x100180d0
100152e8:	100180f0 	.word	0x100180f0
100152ec:	10018110 	.word	0x10018110
100152f0:	fffff35c 	.word	0xfffff35c

100152f4 <__swbuf_r>:
100152f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100152f6:	0005      	movs	r5, r0
100152f8:	000f      	movs	r7, r1
100152fa:	0014      	movs	r4, r2
100152fc:	2800      	cmp	r0, #0
100152fe:	d004      	beq.n	1001530a <__swbuf_r+0x16>
10015300:	6983      	ldr	r3, [r0, #24]
10015302:	2b00      	cmp	r3, #0
10015304:	d101      	bne.n	1001530a <__swbuf_r+0x16>
10015306:	f000 f9b7 	bl	10015678 <__sinit>
1001530a:	4b23      	ldr	r3, [pc, #140]	; (10015398 <__swbuf_r+0xa4>)
1001530c:	429c      	cmp	r4, r3
1001530e:	d101      	bne.n	10015314 <__swbuf_r+0x20>
10015310:	686c      	ldr	r4, [r5, #4]
10015312:	e008      	b.n	10015326 <__swbuf_r+0x32>
10015314:	4b21      	ldr	r3, [pc, #132]	; (1001539c <__swbuf_r+0xa8>)
10015316:	429c      	cmp	r4, r3
10015318:	d101      	bne.n	1001531e <__swbuf_r+0x2a>
1001531a:	68ac      	ldr	r4, [r5, #8]
1001531c:	e003      	b.n	10015326 <__swbuf_r+0x32>
1001531e:	4b20      	ldr	r3, [pc, #128]	; (100153a0 <__swbuf_r+0xac>)
10015320:	429c      	cmp	r4, r3
10015322:	d100      	bne.n	10015326 <__swbuf_r+0x32>
10015324:	68ec      	ldr	r4, [r5, #12]
10015326:	69a3      	ldr	r3, [r4, #24]
10015328:	60a3      	str	r3, [r4, #8]
1001532a:	89a3      	ldrh	r3, [r4, #12]
1001532c:	071b      	lsls	r3, r3, #28
1001532e:	d50a      	bpl.n	10015346 <__swbuf_r+0x52>
10015330:	6923      	ldr	r3, [r4, #16]
10015332:	2b00      	cmp	r3, #0
10015334:	d007      	beq.n	10015346 <__swbuf_r+0x52>
10015336:	6823      	ldr	r3, [r4, #0]
10015338:	6922      	ldr	r2, [r4, #16]
1001533a:	b2fe      	uxtb	r6, r7
1001533c:	1a98      	subs	r0, r3, r2
1001533e:	6963      	ldr	r3, [r4, #20]
10015340:	4298      	cmp	r0, r3
10015342:	db0f      	blt.n	10015364 <__swbuf_r+0x70>
10015344:	e008      	b.n	10015358 <__swbuf_r+0x64>
10015346:	0021      	movs	r1, r4
10015348:	0028      	movs	r0, r5
1001534a:	f000 f82b 	bl	100153a4 <__swsetup_r>
1001534e:	2800      	cmp	r0, #0
10015350:	d0f1      	beq.n	10015336 <__swbuf_r+0x42>
10015352:	2001      	movs	r0, #1
10015354:	4240      	negs	r0, r0
10015356:	e01d      	b.n	10015394 <__swbuf_r+0xa0>
10015358:	0021      	movs	r1, r4
1001535a:	0028      	movs	r0, r5
1001535c:	f000 f91e 	bl	1001559c <_fflush_r>
10015360:	2800      	cmp	r0, #0
10015362:	d1f6      	bne.n	10015352 <__swbuf_r+0x5e>
10015364:	68a3      	ldr	r3, [r4, #8]
10015366:	3001      	adds	r0, #1
10015368:	3b01      	subs	r3, #1
1001536a:	60a3      	str	r3, [r4, #8]
1001536c:	6823      	ldr	r3, [r4, #0]
1001536e:	1c5a      	adds	r2, r3, #1
10015370:	6022      	str	r2, [r4, #0]
10015372:	701f      	strb	r7, [r3, #0]
10015374:	6963      	ldr	r3, [r4, #20]
10015376:	4298      	cmp	r0, r3
10015378:	d005      	beq.n	10015386 <__swbuf_r+0x92>
1001537a:	89a3      	ldrh	r3, [r4, #12]
1001537c:	0030      	movs	r0, r6
1001537e:	07db      	lsls	r3, r3, #31
10015380:	d508      	bpl.n	10015394 <__swbuf_r+0xa0>
10015382:	2e0a      	cmp	r6, #10
10015384:	d106      	bne.n	10015394 <__swbuf_r+0xa0>
10015386:	0021      	movs	r1, r4
10015388:	0028      	movs	r0, r5
1001538a:	f000 f907 	bl	1001559c <_fflush_r>
1001538e:	2800      	cmp	r0, #0
10015390:	d1df      	bne.n	10015352 <__swbuf_r+0x5e>
10015392:	0030      	movs	r0, r6
10015394:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10015396:	46c0      	nop			; (mov r8, r8)
10015398:	100180d0 	.word	0x100180d0
1001539c:	100180f0 	.word	0x100180f0
100153a0:	10018110 	.word	0x10018110

100153a4 <__swsetup_r>:
100153a4:	4b36      	ldr	r3, [pc, #216]	; (10015480 <__swsetup_r+0xdc>)
100153a6:	b570      	push	{r4, r5, r6, lr}
100153a8:	681d      	ldr	r5, [r3, #0]
100153aa:	0006      	movs	r6, r0
100153ac:	000c      	movs	r4, r1
100153ae:	2d00      	cmp	r5, #0
100153b0:	d005      	beq.n	100153be <__swsetup_r+0x1a>
100153b2:	69ab      	ldr	r3, [r5, #24]
100153b4:	2b00      	cmp	r3, #0
100153b6:	d102      	bne.n	100153be <__swsetup_r+0x1a>
100153b8:	0028      	movs	r0, r5
100153ba:	f000 f95d 	bl	10015678 <__sinit>
100153be:	4b31      	ldr	r3, [pc, #196]	; (10015484 <__swsetup_r+0xe0>)
100153c0:	429c      	cmp	r4, r3
100153c2:	d101      	bne.n	100153c8 <__swsetup_r+0x24>
100153c4:	686c      	ldr	r4, [r5, #4]
100153c6:	e008      	b.n	100153da <__swsetup_r+0x36>
100153c8:	4b2f      	ldr	r3, [pc, #188]	; (10015488 <__swsetup_r+0xe4>)
100153ca:	429c      	cmp	r4, r3
100153cc:	d101      	bne.n	100153d2 <__swsetup_r+0x2e>
100153ce:	68ac      	ldr	r4, [r5, #8]
100153d0:	e003      	b.n	100153da <__swsetup_r+0x36>
100153d2:	4b2e      	ldr	r3, [pc, #184]	; (1001548c <__swsetup_r+0xe8>)
100153d4:	429c      	cmp	r4, r3
100153d6:	d100      	bne.n	100153da <__swsetup_r+0x36>
100153d8:	68ec      	ldr	r4, [r5, #12]
100153da:	220c      	movs	r2, #12
100153dc:	5ea3      	ldrsh	r3, [r4, r2]
100153de:	b29a      	uxth	r2, r3
100153e0:	0711      	lsls	r1, r2, #28
100153e2:	d423      	bmi.n	1001542c <__swsetup_r+0x88>
100153e4:	06d1      	lsls	r1, r2, #27
100153e6:	d407      	bmi.n	100153f8 <__swsetup_r+0x54>
100153e8:	2209      	movs	r2, #9
100153ea:	2001      	movs	r0, #1
100153ec:	6032      	str	r2, [r6, #0]
100153ee:	3237      	adds	r2, #55	; 0x37
100153f0:	4313      	orrs	r3, r2
100153f2:	81a3      	strh	r3, [r4, #12]
100153f4:	4240      	negs	r0, r0
100153f6:	e042      	b.n	1001547e <__swsetup_r+0xda>
100153f8:	0753      	lsls	r3, r2, #29
100153fa:	d513      	bpl.n	10015424 <__swsetup_r+0x80>
100153fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
100153fe:	2900      	cmp	r1, #0
10015400:	d008      	beq.n	10015414 <__swsetup_r+0x70>
10015402:	0023      	movs	r3, r4
10015404:	3344      	adds	r3, #68	; 0x44
10015406:	4299      	cmp	r1, r3
10015408:	d002      	beq.n	10015410 <__swsetup_r+0x6c>
1001540a:	0030      	movs	r0, r6
1001540c:	f7ff fd34 	bl	10014e78 <_free_r>
10015410:	2300      	movs	r3, #0
10015412:	6363      	str	r3, [r4, #52]	; 0x34
10015414:	2224      	movs	r2, #36	; 0x24
10015416:	89a3      	ldrh	r3, [r4, #12]
10015418:	4393      	bics	r3, r2
1001541a:	81a3      	strh	r3, [r4, #12]
1001541c:	2300      	movs	r3, #0
1001541e:	6063      	str	r3, [r4, #4]
10015420:	6923      	ldr	r3, [r4, #16]
10015422:	6023      	str	r3, [r4, #0]
10015424:	2208      	movs	r2, #8
10015426:	89a3      	ldrh	r3, [r4, #12]
10015428:	4313      	orrs	r3, r2
1001542a:	81a3      	strh	r3, [r4, #12]
1001542c:	6923      	ldr	r3, [r4, #16]
1001542e:	2b00      	cmp	r3, #0
10015430:	d10b      	bne.n	1001544a <__swsetup_r+0xa6>
10015432:	23a0      	movs	r3, #160	; 0xa0
10015434:	89a2      	ldrh	r2, [r4, #12]
10015436:	009b      	lsls	r3, r3, #2
10015438:	4013      	ands	r3, r2
1001543a:	2280      	movs	r2, #128	; 0x80
1001543c:	0092      	lsls	r2, r2, #2
1001543e:	4293      	cmp	r3, r2
10015440:	d003      	beq.n	1001544a <__swsetup_r+0xa6>
10015442:	0021      	movs	r1, r4
10015444:	0030      	movs	r0, r6
10015446:	f000 f9d1 	bl	100157ec <__smakebuf_r>
1001544a:	2301      	movs	r3, #1
1001544c:	89a2      	ldrh	r2, [r4, #12]
1001544e:	4013      	ands	r3, r2
10015450:	d005      	beq.n	1001545e <__swsetup_r+0xba>
10015452:	2300      	movs	r3, #0
10015454:	60a3      	str	r3, [r4, #8]
10015456:	6963      	ldr	r3, [r4, #20]
10015458:	425b      	negs	r3, r3
1001545a:	61a3      	str	r3, [r4, #24]
1001545c:	e003      	b.n	10015466 <__swsetup_r+0xc2>
1001545e:	0792      	lsls	r2, r2, #30
10015460:	d400      	bmi.n	10015464 <__swsetup_r+0xc0>
10015462:	6963      	ldr	r3, [r4, #20]
10015464:	60a3      	str	r3, [r4, #8]
10015466:	2000      	movs	r0, #0
10015468:	6923      	ldr	r3, [r4, #16]
1001546a:	4283      	cmp	r3, r0
1001546c:	d107      	bne.n	1001547e <__swsetup_r+0xda>
1001546e:	220c      	movs	r2, #12
10015470:	5ea3      	ldrsh	r3, [r4, r2]
10015472:	061a      	lsls	r2, r3, #24
10015474:	d503      	bpl.n	1001547e <__swsetup_r+0xda>
10015476:	2240      	movs	r2, #64	; 0x40
10015478:	4313      	orrs	r3, r2
1001547a:	81a3      	strh	r3, [r4, #12]
1001547c:	3801      	subs	r0, #1
1001547e:	bd70      	pop	{r4, r5, r6, pc}
10015480:	1001822c 	.word	0x1001822c
10015484:	100180d0 	.word	0x100180d0
10015488:	100180f0 	.word	0x100180f0
1001548c:	10018110 	.word	0x10018110

10015490 <__sflush_r>:
10015490:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10015492:	898a      	ldrh	r2, [r1, #12]
10015494:	0005      	movs	r5, r0
10015496:	000c      	movs	r4, r1
10015498:	0713      	lsls	r3, r2, #28
1001549a:	d45a      	bmi.n	10015552 <__sflush_r+0xc2>
1001549c:	684b      	ldr	r3, [r1, #4]
1001549e:	2b00      	cmp	r3, #0
100154a0:	dc02      	bgt.n	100154a8 <__sflush_r+0x18>
100154a2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
100154a4:	2b00      	cmp	r3, #0
100154a6:	dd19      	ble.n	100154dc <__sflush_r+0x4c>
100154a8:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
100154aa:	2f00      	cmp	r7, #0
100154ac:	d016      	beq.n	100154dc <__sflush_r+0x4c>
100154ae:	2300      	movs	r3, #0
100154b0:	682e      	ldr	r6, [r5, #0]
100154b2:	602b      	str	r3, [r5, #0]
100154b4:	2380      	movs	r3, #128	; 0x80
100154b6:	015b      	lsls	r3, r3, #5
100154b8:	401a      	ands	r2, r3
100154ba:	d001      	beq.n	100154c0 <__sflush_r+0x30>
100154bc:	6d60      	ldr	r0, [r4, #84]	; 0x54
100154be:	e014      	b.n	100154ea <__sflush_r+0x5a>
100154c0:	2301      	movs	r3, #1
100154c2:	6a21      	ldr	r1, [r4, #32]
100154c4:	0028      	movs	r0, r5
100154c6:	47b8      	blx	r7
100154c8:	1c43      	adds	r3, r0, #1
100154ca:	d10e      	bne.n	100154ea <__sflush_r+0x5a>
100154cc:	682b      	ldr	r3, [r5, #0]
100154ce:	2b00      	cmp	r3, #0
100154d0:	d00b      	beq.n	100154ea <__sflush_r+0x5a>
100154d2:	2b1d      	cmp	r3, #29
100154d4:	d001      	beq.n	100154da <__sflush_r+0x4a>
100154d6:	2b16      	cmp	r3, #22
100154d8:	d102      	bne.n	100154e0 <__sflush_r+0x50>
100154da:	602e      	str	r6, [r5, #0]
100154dc:	2000      	movs	r0, #0
100154de:	e05a      	b.n	10015596 <__sflush_r+0x106>
100154e0:	2240      	movs	r2, #64	; 0x40
100154e2:	89a3      	ldrh	r3, [r4, #12]
100154e4:	4313      	orrs	r3, r2
100154e6:	81a3      	strh	r3, [r4, #12]
100154e8:	e055      	b.n	10015596 <__sflush_r+0x106>
100154ea:	89a3      	ldrh	r3, [r4, #12]
100154ec:	075b      	lsls	r3, r3, #29
100154ee:	d506      	bpl.n	100154fe <__sflush_r+0x6e>
100154f0:	6863      	ldr	r3, [r4, #4]
100154f2:	1ac0      	subs	r0, r0, r3
100154f4:	6b63      	ldr	r3, [r4, #52]	; 0x34
100154f6:	2b00      	cmp	r3, #0
100154f8:	d001      	beq.n	100154fe <__sflush_r+0x6e>
100154fa:	6c23      	ldr	r3, [r4, #64]	; 0x40
100154fc:	1ac0      	subs	r0, r0, r3
100154fe:	2300      	movs	r3, #0
10015500:	0002      	movs	r2, r0
10015502:	6a21      	ldr	r1, [r4, #32]
10015504:	0028      	movs	r0, r5
10015506:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
10015508:	47b8      	blx	r7
1001550a:	89a3      	ldrh	r3, [r4, #12]
1001550c:	1c42      	adds	r2, r0, #1
1001550e:	d106      	bne.n	1001551e <__sflush_r+0x8e>
10015510:	6829      	ldr	r1, [r5, #0]
10015512:	291d      	cmp	r1, #29
10015514:	d83a      	bhi.n	1001558c <__sflush_r+0xfc>
10015516:	4a20      	ldr	r2, [pc, #128]	; (10015598 <__sflush_r+0x108>)
10015518:	40ca      	lsrs	r2, r1
1001551a:	07d2      	lsls	r2, r2, #31
1001551c:	d536      	bpl.n	1001558c <__sflush_r+0xfc>
1001551e:	2200      	movs	r2, #0
10015520:	6062      	str	r2, [r4, #4]
10015522:	6922      	ldr	r2, [r4, #16]
10015524:	6022      	str	r2, [r4, #0]
10015526:	04db      	lsls	r3, r3, #19
10015528:	d505      	bpl.n	10015536 <__sflush_r+0xa6>
1001552a:	1c43      	adds	r3, r0, #1
1001552c:	d102      	bne.n	10015534 <__sflush_r+0xa4>
1001552e:	682b      	ldr	r3, [r5, #0]
10015530:	2b00      	cmp	r3, #0
10015532:	d100      	bne.n	10015536 <__sflush_r+0xa6>
10015534:	6560      	str	r0, [r4, #84]	; 0x54
10015536:	6b61      	ldr	r1, [r4, #52]	; 0x34
10015538:	602e      	str	r6, [r5, #0]
1001553a:	2900      	cmp	r1, #0
1001553c:	d0ce      	beq.n	100154dc <__sflush_r+0x4c>
1001553e:	0023      	movs	r3, r4
10015540:	3344      	adds	r3, #68	; 0x44
10015542:	4299      	cmp	r1, r3
10015544:	d002      	beq.n	1001554c <__sflush_r+0xbc>
10015546:	0028      	movs	r0, r5
10015548:	f7ff fc96 	bl	10014e78 <_free_r>
1001554c:	2000      	movs	r0, #0
1001554e:	6360      	str	r0, [r4, #52]	; 0x34
10015550:	e021      	b.n	10015596 <__sflush_r+0x106>
10015552:	690f      	ldr	r7, [r1, #16]
10015554:	2f00      	cmp	r7, #0
10015556:	d0c1      	beq.n	100154dc <__sflush_r+0x4c>
10015558:	680b      	ldr	r3, [r1, #0]
1001555a:	600f      	str	r7, [r1, #0]
1001555c:	1bdb      	subs	r3, r3, r7
1001555e:	9301      	str	r3, [sp, #4]
10015560:	2300      	movs	r3, #0
10015562:	0792      	lsls	r2, r2, #30
10015564:	d100      	bne.n	10015568 <__sflush_r+0xd8>
10015566:	694b      	ldr	r3, [r1, #20]
10015568:	60a3      	str	r3, [r4, #8]
1001556a:	e003      	b.n	10015574 <__sflush_r+0xe4>
1001556c:	9b01      	ldr	r3, [sp, #4]
1001556e:	183f      	adds	r7, r7, r0
10015570:	1a1b      	subs	r3, r3, r0
10015572:	9301      	str	r3, [sp, #4]
10015574:	9b01      	ldr	r3, [sp, #4]
10015576:	2b00      	cmp	r3, #0
10015578:	ddb0      	ble.n	100154dc <__sflush_r+0x4c>
1001557a:	9b01      	ldr	r3, [sp, #4]
1001557c:	003a      	movs	r2, r7
1001557e:	6a21      	ldr	r1, [r4, #32]
10015580:	0028      	movs	r0, r5
10015582:	6aa6      	ldr	r6, [r4, #40]	; 0x28
10015584:	47b0      	blx	r6
10015586:	2800      	cmp	r0, #0
10015588:	dcf0      	bgt.n	1001556c <__sflush_r+0xdc>
1001558a:	89a3      	ldrh	r3, [r4, #12]
1001558c:	2240      	movs	r2, #64	; 0x40
1001558e:	2001      	movs	r0, #1
10015590:	4313      	orrs	r3, r2
10015592:	81a3      	strh	r3, [r4, #12]
10015594:	4240      	negs	r0, r0
10015596:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10015598:	20400001 	.word	0x20400001

1001559c <_fflush_r>:
1001559c:	690b      	ldr	r3, [r1, #16]
1001559e:	b570      	push	{r4, r5, r6, lr}
100155a0:	0005      	movs	r5, r0
100155a2:	000c      	movs	r4, r1
100155a4:	2b00      	cmp	r3, #0
100155a6:	d101      	bne.n	100155ac <_fflush_r+0x10>
100155a8:	2000      	movs	r0, #0
100155aa:	e01c      	b.n	100155e6 <_fflush_r+0x4a>
100155ac:	2800      	cmp	r0, #0
100155ae:	d004      	beq.n	100155ba <_fflush_r+0x1e>
100155b0:	6983      	ldr	r3, [r0, #24]
100155b2:	2b00      	cmp	r3, #0
100155b4:	d101      	bne.n	100155ba <_fflush_r+0x1e>
100155b6:	f000 f85f 	bl	10015678 <__sinit>
100155ba:	4b0b      	ldr	r3, [pc, #44]	; (100155e8 <_fflush_r+0x4c>)
100155bc:	429c      	cmp	r4, r3
100155be:	d101      	bne.n	100155c4 <_fflush_r+0x28>
100155c0:	686c      	ldr	r4, [r5, #4]
100155c2:	e008      	b.n	100155d6 <_fflush_r+0x3a>
100155c4:	4b09      	ldr	r3, [pc, #36]	; (100155ec <_fflush_r+0x50>)
100155c6:	429c      	cmp	r4, r3
100155c8:	d101      	bne.n	100155ce <_fflush_r+0x32>
100155ca:	68ac      	ldr	r4, [r5, #8]
100155cc:	e003      	b.n	100155d6 <_fflush_r+0x3a>
100155ce:	4b08      	ldr	r3, [pc, #32]	; (100155f0 <_fflush_r+0x54>)
100155d0:	429c      	cmp	r4, r3
100155d2:	d100      	bne.n	100155d6 <_fflush_r+0x3a>
100155d4:	68ec      	ldr	r4, [r5, #12]
100155d6:	220c      	movs	r2, #12
100155d8:	5ea3      	ldrsh	r3, [r4, r2]
100155da:	2b00      	cmp	r3, #0
100155dc:	d0e4      	beq.n	100155a8 <_fflush_r+0xc>
100155de:	0021      	movs	r1, r4
100155e0:	0028      	movs	r0, r5
100155e2:	f7ff ff55 	bl	10015490 <__sflush_r>
100155e6:	bd70      	pop	{r4, r5, r6, pc}
100155e8:	100180d0 	.word	0x100180d0
100155ec:	100180f0 	.word	0x100180f0
100155f0:	10018110 	.word	0x10018110

100155f4 <_cleanup_r>:
100155f4:	b510      	push	{r4, lr}
100155f6:	4902      	ldr	r1, [pc, #8]	; (10015600 <_cleanup_r+0xc>)
100155f8:	f000 f8b0 	bl	1001575c <_fwalk_reent>
100155fc:	bd10      	pop	{r4, pc}
100155fe:	46c0      	nop			; (mov r8, r8)
10015600:	1001559d 	.word	0x1001559d

10015604 <std.isra.0>:
10015604:	2300      	movs	r3, #0
10015606:	b510      	push	{r4, lr}
10015608:	0004      	movs	r4, r0
1001560a:	6003      	str	r3, [r0, #0]
1001560c:	6043      	str	r3, [r0, #4]
1001560e:	6083      	str	r3, [r0, #8]
10015610:	8181      	strh	r1, [r0, #12]
10015612:	6643      	str	r3, [r0, #100]	; 0x64
10015614:	81c2      	strh	r2, [r0, #14]
10015616:	6103      	str	r3, [r0, #16]
10015618:	6143      	str	r3, [r0, #20]
1001561a:	6183      	str	r3, [r0, #24]
1001561c:	0019      	movs	r1, r3
1001561e:	2208      	movs	r2, #8
10015620:	305c      	adds	r0, #92	; 0x5c
10015622:	f7ff fc21 	bl	10014e68 <memset>
10015626:	4b05      	ldr	r3, [pc, #20]	; (1001563c <std.isra.0+0x38>)
10015628:	6224      	str	r4, [r4, #32]
1001562a:	6263      	str	r3, [r4, #36]	; 0x24
1001562c:	4b04      	ldr	r3, [pc, #16]	; (10015640 <std.isra.0+0x3c>)
1001562e:	62a3      	str	r3, [r4, #40]	; 0x28
10015630:	4b04      	ldr	r3, [pc, #16]	; (10015644 <std.isra.0+0x40>)
10015632:	62e3      	str	r3, [r4, #44]	; 0x2c
10015634:	4b04      	ldr	r3, [pc, #16]	; (10015648 <std.isra.0+0x44>)
10015636:	6323      	str	r3, [r4, #48]	; 0x30
10015638:	bd10      	pop	{r4, pc}
1001563a:	46c0      	nop			; (mov r8, r8)
1001563c:	10015e7d 	.word	0x10015e7d
10015640:	10015ea5 	.word	0x10015ea5
10015644:	10015edd 	.word	0x10015edd
10015648:	10015f09 	.word	0x10015f09

1001564c <__sfmoreglue>:
1001564c:	b570      	push	{r4, r5, r6, lr}
1001564e:	2568      	movs	r5, #104	; 0x68
10015650:	1e4b      	subs	r3, r1, #1
10015652:	435d      	muls	r5, r3
10015654:	000e      	movs	r6, r1
10015656:	0029      	movs	r1, r5
10015658:	3174      	adds	r1, #116	; 0x74
1001565a:	f7ff fc53 	bl	10014f04 <_malloc_r>
1001565e:	1e04      	subs	r4, r0, #0
10015660:	d008      	beq.n	10015674 <__sfmoreglue+0x28>
10015662:	2100      	movs	r1, #0
10015664:	002a      	movs	r2, r5
10015666:	6001      	str	r1, [r0, #0]
10015668:	6046      	str	r6, [r0, #4]
1001566a:	300c      	adds	r0, #12
1001566c:	60a0      	str	r0, [r4, #8]
1001566e:	3268      	adds	r2, #104	; 0x68
10015670:	f7ff fbfa 	bl	10014e68 <memset>
10015674:	0020      	movs	r0, r4
10015676:	bd70      	pop	{r4, r5, r6, pc}

10015678 <__sinit>:
10015678:	6983      	ldr	r3, [r0, #24]
1001567a:	b513      	push	{r0, r1, r4, lr}
1001567c:	0004      	movs	r4, r0
1001567e:	2b00      	cmp	r3, #0
10015680:	d128      	bne.n	100156d4 <__sinit+0x5c>
10015682:	6483      	str	r3, [r0, #72]	; 0x48
10015684:	64c3      	str	r3, [r0, #76]	; 0x4c
10015686:	6503      	str	r3, [r0, #80]	; 0x50
10015688:	4b13      	ldr	r3, [pc, #76]	; (100156d8 <__sinit+0x60>)
1001568a:	4a14      	ldr	r2, [pc, #80]	; (100156dc <__sinit+0x64>)
1001568c:	681b      	ldr	r3, [r3, #0]
1001568e:	6282      	str	r2, [r0, #40]	; 0x28
10015690:	9301      	str	r3, [sp, #4]
10015692:	4298      	cmp	r0, r3
10015694:	d101      	bne.n	1001569a <__sinit+0x22>
10015696:	2301      	movs	r3, #1
10015698:	6183      	str	r3, [r0, #24]
1001569a:	0020      	movs	r0, r4
1001569c:	f000 f820 	bl	100156e0 <__sfp>
100156a0:	6060      	str	r0, [r4, #4]
100156a2:	0020      	movs	r0, r4
100156a4:	f000 f81c 	bl	100156e0 <__sfp>
100156a8:	60a0      	str	r0, [r4, #8]
100156aa:	0020      	movs	r0, r4
100156ac:	f000 f818 	bl	100156e0 <__sfp>
100156b0:	2200      	movs	r2, #0
100156b2:	60e0      	str	r0, [r4, #12]
100156b4:	2104      	movs	r1, #4
100156b6:	6860      	ldr	r0, [r4, #4]
100156b8:	f7ff ffa4 	bl	10015604 <std.isra.0>
100156bc:	2201      	movs	r2, #1
100156be:	2109      	movs	r1, #9
100156c0:	68a0      	ldr	r0, [r4, #8]
100156c2:	f7ff ff9f 	bl	10015604 <std.isra.0>
100156c6:	2202      	movs	r2, #2
100156c8:	2112      	movs	r1, #18
100156ca:	68e0      	ldr	r0, [r4, #12]
100156cc:	f7ff ff9a 	bl	10015604 <std.isra.0>
100156d0:	2301      	movs	r3, #1
100156d2:	61a3      	str	r3, [r4, #24]
100156d4:	bd13      	pop	{r0, r1, r4, pc}
100156d6:	46c0      	nop			; (mov r8, r8)
100156d8:	100180cc 	.word	0x100180cc
100156dc:	100155f5 	.word	0x100155f5

100156e0 <__sfp>:
100156e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100156e2:	4b1d      	ldr	r3, [pc, #116]	; (10015758 <__sfp+0x78>)
100156e4:	0006      	movs	r6, r0
100156e6:	681d      	ldr	r5, [r3, #0]
100156e8:	69ab      	ldr	r3, [r5, #24]
100156ea:	2b00      	cmp	r3, #0
100156ec:	d102      	bne.n	100156f4 <__sfp+0x14>
100156ee:	0028      	movs	r0, r5
100156f0:	f7ff ffc2 	bl	10015678 <__sinit>
100156f4:	3548      	adds	r5, #72	; 0x48
100156f6:	68ac      	ldr	r4, [r5, #8]
100156f8:	686b      	ldr	r3, [r5, #4]
100156fa:	3b01      	subs	r3, #1
100156fc:	d405      	bmi.n	1001570a <__sfp+0x2a>
100156fe:	220c      	movs	r2, #12
10015700:	5ea7      	ldrsh	r7, [r4, r2]
10015702:	2f00      	cmp	r7, #0
10015704:	d010      	beq.n	10015728 <__sfp+0x48>
10015706:	3468      	adds	r4, #104	; 0x68
10015708:	e7f7      	b.n	100156fa <__sfp+0x1a>
1001570a:	682b      	ldr	r3, [r5, #0]
1001570c:	2b00      	cmp	r3, #0
1001570e:	d001      	beq.n	10015714 <__sfp+0x34>
10015710:	682d      	ldr	r5, [r5, #0]
10015712:	e7f0      	b.n	100156f6 <__sfp+0x16>
10015714:	2104      	movs	r1, #4
10015716:	0030      	movs	r0, r6
10015718:	f7ff ff98 	bl	1001564c <__sfmoreglue>
1001571c:	6028      	str	r0, [r5, #0]
1001571e:	2800      	cmp	r0, #0
10015720:	d1f6      	bne.n	10015710 <__sfp+0x30>
10015722:	230c      	movs	r3, #12
10015724:	6033      	str	r3, [r6, #0]
10015726:	e016      	b.n	10015756 <__sfp+0x76>
10015728:	2301      	movs	r3, #1
1001572a:	0020      	movs	r0, r4
1001572c:	425b      	negs	r3, r3
1001572e:	81e3      	strh	r3, [r4, #14]
10015730:	3302      	adds	r3, #2
10015732:	81a3      	strh	r3, [r4, #12]
10015734:	6667      	str	r7, [r4, #100]	; 0x64
10015736:	6027      	str	r7, [r4, #0]
10015738:	60a7      	str	r7, [r4, #8]
1001573a:	6067      	str	r7, [r4, #4]
1001573c:	6127      	str	r7, [r4, #16]
1001573e:	6167      	str	r7, [r4, #20]
10015740:	61a7      	str	r7, [r4, #24]
10015742:	305c      	adds	r0, #92	; 0x5c
10015744:	2208      	movs	r2, #8
10015746:	0039      	movs	r1, r7
10015748:	f7ff fb8e 	bl	10014e68 <memset>
1001574c:	0020      	movs	r0, r4
1001574e:	6367      	str	r7, [r4, #52]	; 0x34
10015750:	63a7      	str	r7, [r4, #56]	; 0x38
10015752:	64a7      	str	r7, [r4, #72]	; 0x48
10015754:	64e7      	str	r7, [r4, #76]	; 0x4c
10015756:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10015758:	100180cc 	.word	0x100180cc

1001575c <_fwalk_reent>:
1001575c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1001575e:	0004      	movs	r4, r0
10015760:	0007      	movs	r7, r0
10015762:	2600      	movs	r6, #0
10015764:	9101      	str	r1, [sp, #4]
10015766:	3448      	adds	r4, #72	; 0x48
10015768:	2c00      	cmp	r4, #0
1001576a:	d016      	beq.n	1001579a <_fwalk_reent+0x3e>
1001576c:	6863      	ldr	r3, [r4, #4]
1001576e:	68a5      	ldr	r5, [r4, #8]
10015770:	9300      	str	r3, [sp, #0]
10015772:	9b00      	ldr	r3, [sp, #0]
10015774:	3b01      	subs	r3, #1
10015776:	9300      	str	r3, [sp, #0]
10015778:	d40d      	bmi.n	10015796 <_fwalk_reent+0x3a>
1001577a:	89ab      	ldrh	r3, [r5, #12]
1001577c:	2b01      	cmp	r3, #1
1001577e:	d908      	bls.n	10015792 <_fwalk_reent+0x36>
10015780:	220e      	movs	r2, #14
10015782:	5eab      	ldrsh	r3, [r5, r2]
10015784:	3301      	adds	r3, #1
10015786:	d004      	beq.n	10015792 <_fwalk_reent+0x36>
10015788:	0029      	movs	r1, r5
1001578a:	0038      	movs	r0, r7
1001578c:	9b01      	ldr	r3, [sp, #4]
1001578e:	4798      	blx	r3
10015790:	4306      	orrs	r6, r0
10015792:	3568      	adds	r5, #104	; 0x68
10015794:	e7ed      	b.n	10015772 <_fwalk_reent+0x16>
10015796:	6824      	ldr	r4, [r4, #0]
10015798:	e7e6      	b.n	10015768 <_fwalk_reent+0xc>
1001579a:	0030      	movs	r0, r6
1001579c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

100157a0 <__swhatbuf_r>:
100157a0:	b570      	push	{r4, r5, r6, lr}
100157a2:	000e      	movs	r6, r1
100157a4:	001d      	movs	r5, r3
100157a6:	230e      	movs	r3, #14
100157a8:	5ec9      	ldrsh	r1, [r1, r3]
100157aa:	b090      	sub	sp, #64	; 0x40
100157ac:	0014      	movs	r4, r2
100157ae:	2900      	cmp	r1, #0
100157b0:	da06      	bge.n	100157c0 <__swhatbuf_r+0x20>
100157b2:	2300      	movs	r3, #0
100157b4:	602b      	str	r3, [r5, #0]
100157b6:	89b3      	ldrh	r3, [r6, #12]
100157b8:	061b      	lsls	r3, r3, #24
100157ba:	d50f      	bpl.n	100157dc <__swhatbuf_r+0x3c>
100157bc:	2340      	movs	r3, #64	; 0x40
100157be:	e00f      	b.n	100157e0 <__swhatbuf_r+0x40>
100157c0:	aa01      	add	r2, sp, #4
100157c2:	f000 fbcd 	bl	10015f60 <_fstat_r>
100157c6:	2800      	cmp	r0, #0
100157c8:	dbf3      	blt.n	100157b2 <__swhatbuf_r+0x12>
100157ca:	23f0      	movs	r3, #240	; 0xf0
100157cc:	9a02      	ldr	r2, [sp, #8]
100157ce:	021b      	lsls	r3, r3, #8
100157d0:	4013      	ands	r3, r2
100157d2:	4a05      	ldr	r2, [pc, #20]	; (100157e8 <__swhatbuf_r+0x48>)
100157d4:	189b      	adds	r3, r3, r2
100157d6:	425a      	negs	r2, r3
100157d8:	4153      	adcs	r3, r2
100157da:	602b      	str	r3, [r5, #0]
100157dc:	2380      	movs	r3, #128	; 0x80
100157de:	00db      	lsls	r3, r3, #3
100157e0:	2000      	movs	r0, #0
100157e2:	6023      	str	r3, [r4, #0]
100157e4:	b010      	add	sp, #64	; 0x40
100157e6:	bd70      	pop	{r4, r5, r6, pc}
100157e8:	ffffe000 	.word	0xffffe000

100157ec <__smakebuf_r>:
100157ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
100157ee:	2602      	movs	r6, #2
100157f0:	898b      	ldrh	r3, [r1, #12]
100157f2:	0005      	movs	r5, r0
100157f4:	000c      	movs	r4, r1
100157f6:	4233      	tst	r3, r6
100157f8:	d110      	bne.n	1001581c <__smakebuf_r+0x30>
100157fa:	ab01      	add	r3, sp, #4
100157fc:	466a      	mov	r2, sp
100157fe:	f7ff ffcf 	bl	100157a0 <__swhatbuf_r>
10015802:	9900      	ldr	r1, [sp, #0]
10015804:	0007      	movs	r7, r0
10015806:	0028      	movs	r0, r5
10015808:	f7ff fb7c 	bl	10014f04 <_malloc_r>
1001580c:	2800      	cmp	r0, #0
1001580e:	d10c      	bne.n	1001582a <__smakebuf_r+0x3e>
10015810:	220c      	movs	r2, #12
10015812:	5ea3      	ldrsh	r3, [r4, r2]
10015814:	059a      	lsls	r2, r3, #22
10015816:	d423      	bmi.n	10015860 <__smakebuf_r+0x74>
10015818:	4333      	orrs	r3, r6
1001581a:	81a3      	strh	r3, [r4, #12]
1001581c:	0023      	movs	r3, r4
1001581e:	3347      	adds	r3, #71	; 0x47
10015820:	6023      	str	r3, [r4, #0]
10015822:	6123      	str	r3, [r4, #16]
10015824:	2301      	movs	r3, #1
10015826:	6163      	str	r3, [r4, #20]
10015828:	e01a      	b.n	10015860 <__smakebuf_r+0x74>
1001582a:	2280      	movs	r2, #128	; 0x80
1001582c:	4b0d      	ldr	r3, [pc, #52]	; (10015864 <__smakebuf_r+0x78>)
1001582e:	62ab      	str	r3, [r5, #40]	; 0x28
10015830:	89a3      	ldrh	r3, [r4, #12]
10015832:	6020      	str	r0, [r4, #0]
10015834:	4313      	orrs	r3, r2
10015836:	81a3      	strh	r3, [r4, #12]
10015838:	9b00      	ldr	r3, [sp, #0]
1001583a:	6120      	str	r0, [r4, #16]
1001583c:	6163      	str	r3, [r4, #20]
1001583e:	9b01      	ldr	r3, [sp, #4]
10015840:	2b00      	cmp	r3, #0
10015842:	d00a      	beq.n	1001585a <__smakebuf_r+0x6e>
10015844:	230e      	movs	r3, #14
10015846:	5ee1      	ldrsh	r1, [r4, r3]
10015848:	0028      	movs	r0, r5
1001584a:	f000 fb9b 	bl	10015f84 <_isatty_r>
1001584e:	2800      	cmp	r0, #0
10015850:	d003      	beq.n	1001585a <__smakebuf_r+0x6e>
10015852:	2201      	movs	r2, #1
10015854:	89a3      	ldrh	r3, [r4, #12]
10015856:	4313      	orrs	r3, r2
10015858:	81a3      	strh	r3, [r4, #12]
1001585a:	89a3      	ldrh	r3, [r4, #12]
1001585c:	431f      	orrs	r7, r3
1001585e:	81a7      	strh	r7, [r4, #12]
10015860:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
10015862:	46c0      	nop			; (mov r8, r8)
10015864:	100155f5 	.word	0x100155f5

10015868 <__sfputc_r>:
10015868:	6893      	ldr	r3, [r2, #8]
1001586a:	b510      	push	{r4, lr}
1001586c:	3b01      	subs	r3, #1
1001586e:	6093      	str	r3, [r2, #8]
10015870:	2b00      	cmp	r3, #0
10015872:	da05      	bge.n	10015880 <__sfputc_r+0x18>
10015874:	6994      	ldr	r4, [r2, #24]
10015876:	42a3      	cmp	r3, r4
10015878:	db08      	blt.n	1001588c <__sfputc_r+0x24>
1001587a:	b2cb      	uxtb	r3, r1
1001587c:	2b0a      	cmp	r3, #10
1001587e:	d005      	beq.n	1001588c <__sfputc_r+0x24>
10015880:	6813      	ldr	r3, [r2, #0]
10015882:	1c58      	adds	r0, r3, #1
10015884:	6010      	str	r0, [r2, #0]
10015886:	7019      	strb	r1, [r3, #0]
10015888:	b2c8      	uxtb	r0, r1
1001588a:	e001      	b.n	10015890 <__sfputc_r+0x28>
1001588c:	f7ff fd32 	bl	100152f4 <__swbuf_r>
10015890:	bd10      	pop	{r4, pc}

10015892 <__sfputs_r>:
10015892:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10015894:	0006      	movs	r6, r0
10015896:	000f      	movs	r7, r1
10015898:	0014      	movs	r4, r2
1001589a:	18d5      	adds	r5, r2, r3
1001589c:	42ac      	cmp	r4, r5
1001589e:	d008      	beq.n	100158b2 <__sfputs_r+0x20>
100158a0:	7821      	ldrb	r1, [r4, #0]
100158a2:	003a      	movs	r2, r7
100158a4:	0030      	movs	r0, r6
100158a6:	f7ff ffdf 	bl	10015868 <__sfputc_r>
100158aa:	3401      	adds	r4, #1
100158ac:	1c43      	adds	r3, r0, #1
100158ae:	d1f5      	bne.n	1001589c <__sfputs_r+0xa>
100158b0:	e000      	b.n	100158b4 <__sfputs_r+0x22>
100158b2:	2000      	movs	r0, #0
100158b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

100158b8 <_vfiprintf_r>:
100158b8:	b5f0      	push	{r4, r5, r6, r7, lr}
100158ba:	b09f      	sub	sp, #124	; 0x7c
100158bc:	0006      	movs	r6, r0
100158be:	000f      	movs	r7, r1
100158c0:	9202      	str	r2, [sp, #8]
100158c2:	9305      	str	r3, [sp, #20]
100158c4:	2800      	cmp	r0, #0
100158c6:	d004      	beq.n	100158d2 <_vfiprintf_r+0x1a>
100158c8:	6983      	ldr	r3, [r0, #24]
100158ca:	2b00      	cmp	r3, #0
100158cc:	d101      	bne.n	100158d2 <_vfiprintf_r+0x1a>
100158ce:	f7ff fed3 	bl	10015678 <__sinit>
100158d2:	4b7f      	ldr	r3, [pc, #508]	; (10015ad0 <_vfiprintf_r+0x218>)
100158d4:	429f      	cmp	r7, r3
100158d6:	d101      	bne.n	100158dc <_vfiprintf_r+0x24>
100158d8:	6877      	ldr	r7, [r6, #4]
100158da:	e008      	b.n	100158ee <_vfiprintf_r+0x36>
100158dc:	4b7d      	ldr	r3, [pc, #500]	; (10015ad4 <_vfiprintf_r+0x21c>)
100158de:	429f      	cmp	r7, r3
100158e0:	d101      	bne.n	100158e6 <_vfiprintf_r+0x2e>
100158e2:	68b7      	ldr	r7, [r6, #8]
100158e4:	e003      	b.n	100158ee <_vfiprintf_r+0x36>
100158e6:	4b7c      	ldr	r3, [pc, #496]	; (10015ad8 <_vfiprintf_r+0x220>)
100158e8:	429f      	cmp	r7, r3
100158ea:	d100      	bne.n	100158ee <_vfiprintf_r+0x36>
100158ec:	68f7      	ldr	r7, [r6, #12]
100158ee:	89bb      	ldrh	r3, [r7, #12]
100158f0:	071b      	lsls	r3, r3, #28
100158f2:	d50a      	bpl.n	1001590a <_vfiprintf_r+0x52>
100158f4:	693b      	ldr	r3, [r7, #16]
100158f6:	2b00      	cmp	r3, #0
100158f8:	d007      	beq.n	1001590a <_vfiprintf_r+0x52>
100158fa:	2300      	movs	r3, #0
100158fc:	ad06      	add	r5, sp, #24
100158fe:	616b      	str	r3, [r5, #20]
10015900:	3320      	adds	r3, #32
10015902:	766b      	strb	r3, [r5, #25]
10015904:	3310      	adds	r3, #16
10015906:	76ab      	strb	r3, [r5, #26]
10015908:	e03d      	b.n	10015986 <_vfiprintf_r+0xce>
1001590a:	0039      	movs	r1, r7
1001590c:	0030      	movs	r0, r6
1001590e:	f7ff fd49 	bl	100153a4 <__swsetup_r>
10015912:	2800      	cmp	r0, #0
10015914:	d0f1      	beq.n	100158fa <_vfiprintf_r+0x42>
10015916:	2001      	movs	r0, #1
10015918:	4240      	negs	r0, r0
1001591a:	e0d6      	b.n	10015aca <_vfiprintf_r+0x212>
1001591c:	9a05      	ldr	r2, [sp, #20]
1001591e:	1d11      	adds	r1, r2, #4
10015920:	6812      	ldr	r2, [r2, #0]
10015922:	9105      	str	r1, [sp, #20]
10015924:	2a00      	cmp	r2, #0
10015926:	da00      	bge.n	1001592a <_vfiprintf_r+0x72>
10015928:	e07f      	b.n	10015a2a <_vfiprintf_r+0x172>
1001592a:	9209      	str	r2, [sp, #36]	; 0x24
1001592c:	3401      	adds	r4, #1
1001592e:	7823      	ldrb	r3, [r4, #0]
10015930:	2b2e      	cmp	r3, #46	; 0x2e
10015932:	d100      	bne.n	10015936 <_vfiprintf_r+0x7e>
10015934:	e08d      	b.n	10015a52 <_vfiprintf_r+0x19a>
10015936:	7821      	ldrb	r1, [r4, #0]
10015938:	2203      	movs	r2, #3
1001593a:	4868      	ldr	r0, [pc, #416]	; (10015adc <_vfiprintf_r+0x224>)
1001593c:	f000 fb48 	bl	10015fd0 <memchr>
10015940:	2800      	cmp	r0, #0
10015942:	d007      	beq.n	10015954 <_vfiprintf_r+0x9c>
10015944:	4b65      	ldr	r3, [pc, #404]	; (10015adc <_vfiprintf_r+0x224>)
10015946:	682a      	ldr	r2, [r5, #0]
10015948:	1ac0      	subs	r0, r0, r3
1001594a:	2340      	movs	r3, #64	; 0x40
1001594c:	4083      	lsls	r3, r0
1001594e:	4313      	orrs	r3, r2
10015950:	602b      	str	r3, [r5, #0]
10015952:	3401      	adds	r4, #1
10015954:	7821      	ldrb	r1, [r4, #0]
10015956:	1c63      	adds	r3, r4, #1
10015958:	2206      	movs	r2, #6
1001595a:	4861      	ldr	r0, [pc, #388]	; (10015ae0 <_vfiprintf_r+0x228>)
1001595c:	9302      	str	r3, [sp, #8]
1001595e:	7629      	strb	r1, [r5, #24]
10015960:	f000 fb36 	bl	10015fd0 <memchr>
10015964:	2800      	cmp	r0, #0
10015966:	d100      	bne.n	1001596a <_vfiprintf_r+0xb2>
10015968:	e09d      	b.n	10015aa6 <_vfiprintf_r+0x1ee>
1001596a:	4b5e      	ldr	r3, [pc, #376]	; (10015ae4 <_vfiprintf_r+0x22c>)
1001596c:	2b00      	cmp	r3, #0
1001596e:	d000      	beq.n	10015972 <_vfiprintf_r+0xba>
10015970:	e090      	b.n	10015a94 <_vfiprintf_r+0x1dc>
10015972:	2207      	movs	r2, #7
10015974:	9b05      	ldr	r3, [sp, #20]
10015976:	3307      	adds	r3, #7
10015978:	4393      	bics	r3, r2
1001597a:	3308      	adds	r3, #8
1001597c:	9305      	str	r3, [sp, #20]
1001597e:	696b      	ldr	r3, [r5, #20]
10015980:	9a03      	ldr	r2, [sp, #12]
10015982:	189b      	adds	r3, r3, r2
10015984:	616b      	str	r3, [r5, #20]
10015986:	9c02      	ldr	r4, [sp, #8]
10015988:	7823      	ldrb	r3, [r4, #0]
1001598a:	2b00      	cmp	r3, #0
1001598c:	d104      	bne.n	10015998 <_vfiprintf_r+0xe0>
1001598e:	9b02      	ldr	r3, [sp, #8]
10015990:	1ae3      	subs	r3, r4, r3
10015992:	9304      	str	r3, [sp, #16]
10015994:	d012      	beq.n	100159bc <_vfiprintf_r+0x104>
10015996:	e003      	b.n	100159a0 <_vfiprintf_r+0xe8>
10015998:	2b25      	cmp	r3, #37	; 0x25
1001599a:	d0f8      	beq.n	1001598e <_vfiprintf_r+0xd6>
1001599c:	3401      	adds	r4, #1
1001599e:	e7f3      	b.n	10015988 <_vfiprintf_r+0xd0>
100159a0:	9b04      	ldr	r3, [sp, #16]
100159a2:	9a02      	ldr	r2, [sp, #8]
100159a4:	0039      	movs	r1, r7
100159a6:	0030      	movs	r0, r6
100159a8:	f7ff ff73 	bl	10015892 <__sfputs_r>
100159ac:	1c43      	adds	r3, r0, #1
100159ae:	d100      	bne.n	100159b2 <_vfiprintf_r+0xfa>
100159b0:	e086      	b.n	10015ac0 <_vfiprintf_r+0x208>
100159b2:	696a      	ldr	r2, [r5, #20]
100159b4:	9b04      	ldr	r3, [sp, #16]
100159b6:	4694      	mov	ip, r2
100159b8:	4463      	add	r3, ip
100159ba:	616b      	str	r3, [r5, #20]
100159bc:	7823      	ldrb	r3, [r4, #0]
100159be:	2b00      	cmp	r3, #0
100159c0:	d07e      	beq.n	10015ac0 <_vfiprintf_r+0x208>
100159c2:	2201      	movs	r2, #1
100159c4:	2300      	movs	r3, #0
100159c6:	4252      	negs	r2, r2
100159c8:	606a      	str	r2, [r5, #4]
100159ca:	a902      	add	r1, sp, #8
100159cc:	3254      	adds	r2, #84	; 0x54
100159ce:	1852      	adds	r2, r2, r1
100159d0:	3401      	adds	r4, #1
100159d2:	602b      	str	r3, [r5, #0]
100159d4:	60eb      	str	r3, [r5, #12]
100159d6:	60ab      	str	r3, [r5, #8]
100159d8:	7013      	strb	r3, [r2, #0]
100159da:	65ab      	str	r3, [r5, #88]	; 0x58
100159dc:	7821      	ldrb	r1, [r4, #0]
100159de:	2205      	movs	r2, #5
100159e0:	4841      	ldr	r0, [pc, #260]	; (10015ae8 <_vfiprintf_r+0x230>)
100159e2:	f000 faf5 	bl	10015fd0 <memchr>
100159e6:	2800      	cmp	r0, #0
100159e8:	d008      	beq.n	100159fc <_vfiprintf_r+0x144>
100159ea:	4b3f      	ldr	r3, [pc, #252]	; (10015ae8 <_vfiprintf_r+0x230>)
100159ec:	682a      	ldr	r2, [r5, #0]
100159ee:	1ac0      	subs	r0, r0, r3
100159f0:	2301      	movs	r3, #1
100159f2:	4083      	lsls	r3, r0
100159f4:	4313      	orrs	r3, r2
100159f6:	602b      	str	r3, [r5, #0]
100159f8:	3401      	adds	r4, #1
100159fa:	e7ef      	b.n	100159dc <_vfiprintf_r+0x124>
100159fc:	682b      	ldr	r3, [r5, #0]
100159fe:	06da      	lsls	r2, r3, #27
10015a00:	d504      	bpl.n	10015a0c <_vfiprintf_r+0x154>
10015a02:	2253      	movs	r2, #83	; 0x53
10015a04:	2120      	movs	r1, #32
10015a06:	a802      	add	r0, sp, #8
10015a08:	1812      	adds	r2, r2, r0
10015a0a:	7011      	strb	r1, [r2, #0]
10015a0c:	071a      	lsls	r2, r3, #28
10015a0e:	d504      	bpl.n	10015a1a <_vfiprintf_r+0x162>
10015a10:	2253      	movs	r2, #83	; 0x53
10015a12:	212b      	movs	r1, #43	; 0x2b
10015a14:	a802      	add	r0, sp, #8
10015a16:	1812      	adds	r2, r2, r0
10015a18:	7011      	strb	r1, [r2, #0]
10015a1a:	7822      	ldrb	r2, [r4, #0]
10015a1c:	2a2a      	cmp	r2, #42	; 0x2a
10015a1e:	d100      	bne.n	10015a22 <_vfiprintf_r+0x16a>
10015a20:	e77c      	b.n	1001591c <_vfiprintf_r+0x64>
10015a22:	9b09      	ldr	r3, [sp, #36]	; 0x24
10015a24:	2000      	movs	r0, #0
10015a26:	210a      	movs	r1, #10
10015a28:	e005      	b.n	10015a36 <_vfiprintf_r+0x17e>
10015a2a:	4252      	negs	r2, r2
10015a2c:	60ea      	str	r2, [r5, #12]
10015a2e:	2202      	movs	r2, #2
10015a30:	4313      	orrs	r3, r2
10015a32:	602b      	str	r3, [r5, #0]
10015a34:	e77a      	b.n	1001592c <_vfiprintf_r+0x74>
10015a36:	7822      	ldrb	r2, [r4, #0]
10015a38:	3a30      	subs	r2, #48	; 0x30
10015a3a:	2a09      	cmp	r2, #9
10015a3c:	d804      	bhi.n	10015a48 <_vfiprintf_r+0x190>
10015a3e:	434b      	muls	r3, r1
10015a40:	3401      	adds	r4, #1
10015a42:	189b      	adds	r3, r3, r2
10015a44:	2001      	movs	r0, #1
10015a46:	e7f6      	b.n	10015a36 <_vfiprintf_r+0x17e>
10015a48:	2800      	cmp	r0, #0
10015a4a:	d100      	bne.n	10015a4e <_vfiprintf_r+0x196>
10015a4c:	e76f      	b.n	1001592e <_vfiprintf_r+0x76>
10015a4e:	9309      	str	r3, [sp, #36]	; 0x24
10015a50:	e76d      	b.n	1001592e <_vfiprintf_r+0x76>
10015a52:	7863      	ldrb	r3, [r4, #1]
10015a54:	2b2a      	cmp	r3, #42	; 0x2a
10015a56:	d10a      	bne.n	10015a6e <_vfiprintf_r+0x1b6>
10015a58:	9b05      	ldr	r3, [sp, #20]
10015a5a:	3402      	adds	r4, #2
10015a5c:	1d1a      	adds	r2, r3, #4
10015a5e:	681b      	ldr	r3, [r3, #0]
10015a60:	9205      	str	r2, [sp, #20]
10015a62:	2b00      	cmp	r3, #0
10015a64:	da01      	bge.n	10015a6a <_vfiprintf_r+0x1b2>
10015a66:	2301      	movs	r3, #1
10015a68:	425b      	negs	r3, r3
10015a6a:	9307      	str	r3, [sp, #28]
10015a6c:	e763      	b.n	10015936 <_vfiprintf_r+0x7e>
10015a6e:	2300      	movs	r3, #0
10015a70:	200a      	movs	r0, #10
10015a72:	001a      	movs	r2, r3
10015a74:	3401      	adds	r4, #1
10015a76:	606b      	str	r3, [r5, #4]
10015a78:	7821      	ldrb	r1, [r4, #0]
10015a7a:	3930      	subs	r1, #48	; 0x30
10015a7c:	2909      	cmp	r1, #9
10015a7e:	d804      	bhi.n	10015a8a <_vfiprintf_r+0x1d2>
10015a80:	4342      	muls	r2, r0
10015a82:	3401      	adds	r4, #1
10015a84:	1852      	adds	r2, r2, r1
10015a86:	2301      	movs	r3, #1
10015a88:	e7f6      	b.n	10015a78 <_vfiprintf_r+0x1c0>
10015a8a:	2b00      	cmp	r3, #0
10015a8c:	d100      	bne.n	10015a90 <_vfiprintf_r+0x1d8>
10015a8e:	e752      	b.n	10015936 <_vfiprintf_r+0x7e>
10015a90:	9207      	str	r2, [sp, #28]
10015a92:	e750      	b.n	10015936 <_vfiprintf_r+0x7e>
10015a94:	ab05      	add	r3, sp, #20
10015a96:	9300      	str	r3, [sp, #0]
10015a98:	003a      	movs	r2, r7
10015a9a:	4b14      	ldr	r3, [pc, #80]	; (10015aec <_vfiprintf_r+0x234>)
10015a9c:	0029      	movs	r1, r5
10015a9e:	0030      	movs	r0, r6
10015aa0:	e000      	b.n	10015aa4 <_vfiprintf_r+0x1ec>
10015aa2:	bf00      	nop
10015aa4:	e007      	b.n	10015ab6 <_vfiprintf_r+0x1fe>
10015aa6:	ab05      	add	r3, sp, #20
10015aa8:	9300      	str	r3, [sp, #0]
10015aaa:	003a      	movs	r2, r7
10015aac:	4b0f      	ldr	r3, [pc, #60]	; (10015aec <_vfiprintf_r+0x234>)
10015aae:	0029      	movs	r1, r5
10015ab0:	0030      	movs	r0, r6
10015ab2:	f000 f88b 	bl	10015bcc <_printf_i>
10015ab6:	9003      	str	r0, [sp, #12]
10015ab8:	9b03      	ldr	r3, [sp, #12]
10015aba:	3301      	adds	r3, #1
10015abc:	d000      	beq.n	10015ac0 <_vfiprintf_r+0x208>
10015abe:	e75e      	b.n	1001597e <_vfiprintf_r+0xc6>
10015ac0:	89bb      	ldrh	r3, [r7, #12]
10015ac2:	065b      	lsls	r3, r3, #25
10015ac4:	d500      	bpl.n	10015ac8 <_vfiprintf_r+0x210>
10015ac6:	e726      	b.n	10015916 <_vfiprintf_r+0x5e>
10015ac8:	980b      	ldr	r0, [sp, #44]	; 0x2c
10015aca:	b01f      	add	sp, #124	; 0x7c
10015acc:	bdf0      	pop	{r4, r5, r6, r7, pc}
10015ace:	46c0      	nop			; (mov r8, r8)
10015ad0:	100180d0 	.word	0x100180d0
10015ad4:	100180f0 	.word	0x100180f0
10015ad8:	10018110 	.word	0x10018110
10015adc:	10018136 	.word	0x10018136
10015ae0:	1001813a 	.word	0x1001813a
10015ae4:	00000000 	.word	0x00000000
10015ae8:	10018130 	.word	0x10018130
10015aec:	10015893 	.word	0x10015893

10015af0 <_printf_common>:
10015af0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10015af2:	0017      	movs	r7, r2
10015af4:	9301      	str	r3, [sp, #4]
10015af6:	688a      	ldr	r2, [r1, #8]
10015af8:	690b      	ldr	r3, [r1, #16]
10015afa:	9000      	str	r0, [sp, #0]
10015afc:	000c      	movs	r4, r1
10015afe:	4293      	cmp	r3, r2
10015b00:	da00      	bge.n	10015b04 <_printf_common+0x14>
10015b02:	0013      	movs	r3, r2
10015b04:	0022      	movs	r2, r4
10015b06:	603b      	str	r3, [r7, #0]
10015b08:	3243      	adds	r2, #67	; 0x43
10015b0a:	7812      	ldrb	r2, [r2, #0]
10015b0c:	2a00      	cmp	r2, #0
10015b0e:	d001      	beq.n	10015b14 <_printf_common+0x24>
10015b10:	3301      	adds	r3, #1
10015b12:	603b      	str	r3, [r7, #0]
10015b14:	6823      	ldr	r3, [r4, #0]
10015b16:	069b      	lsls	r3, r3, #26
10015b18:	d502      	bpl.n	10015b20 <_printf_common+0x30>
10015b1a:	683b      	ldr	r3, [r7, #0]
10015b1c:	3302      	adds	r3, #2
10015b1e:	603b      	str	r3, [r7, #0]
10015b20:	2506      	movs	r5, #6
10015b22:	6823      	ldr	r3, [r4, #0]
10015b24:	401d      	ands	r5, r3
10015b26:	d01e      	beq.n	10015b66 <_printf_common+0x76>
10015b28:	0023      	movs	r3, r4
10015b2a:	3343      	adds	r3, #67	; 0x43
10015b2c:	781b      	ldrb	r3, [r3, #0]
10015b2e:	1e5a      	subs	r2, r3, #1
10015b30:	4193      	sbcs	r3, r2
10015b32:	6822      	ldr	r2, [r4, #0]
10015b34:	0692      	lsls	r2, r2, #26
10015b36:	d51c      	bpl.n	10015b72 <_printf_common+0x82>
10015b38:	2030      	movs	r0, #48	; 0x30
10015b3a:	18e1      	adds	r1, r4, r3
10015b3c:	3143      	adds	r1, #67	; 0x43
10015b3e:	7008      	strb	r0, [r1, #0]
10015b40:	0021      	movs	r1, r4
10015b42:	1c5a      	adds	r2, r3, #1
10015b44:	3145      	adds	r1, #69	; 0x45
10015b46:	7809      	ldrb	r1, [r1, #0]
10015b48:	18a2      	adds	r2, r4, r2
10015b4a:	3243      	adds	r2, #67	; 0x43
10015b4c:	3302      	adds	r3, #2
10015b4e:	7011      	strb	r1, [r2, #0]
10015b50:	e00f      	b.n	10015b72 <_printf_common+0x82>
10015b52:	0022      	movs	r2, r4
10015b54:	2301      	movs	r3, #1
10015b56:	3219      	adds	r2, #25
10015b58:	9901      	ldr	r1, [sp, #4]
10015b5a:	9800      	ldr	r0, [sp, #0]
10015b5c:	9e08      	ldr	r6, [sp, #32]
10015b5e:	47b0      	blx	r6
10015b60:	1c43      	adds	r3, r0, #1
10015b62:	d00e      	beq.n	10015b82 <_printf_common+0x92>
10015b64:	3501      	adds	r5, #1
10015b66:	68e3      	ldr	r3, [r4, #12]
10015b68:	683a      	ldr	r2, [r7, #0]
10015b6a:	1a9b      	subs	r3, r3, r2
10015b6c:	429d      	cmp	r5, r3
10015b6e:	dbf0      	blt.n	10015b52 <_printf_common+0x62>
10015b70:	e7da      	b.n	10015b28 <_printf_common+0x38>
10015b72:	0022      	movs	r2, r4
10015b74:	9901      	ldr	r1, [sp, #4]
10015b76:	3243      	adds	r2, #67	; 0x43
10015b78:	9800      	ldr	r0, [sp, #0]
10015b7a:	9d08      	ldr	r5, [sp, #32]
10015b7c:	47a8      	blx	r5
10015b7e:	1c43      	adds	r3, r0, #1
10015b80:	d102      	bne.n	10015b88 <_printf_common+0x98>
10015b82:	2001      	movs	r0, #1
10015b84:	4240      	negs	r0, r0
10015b86:	e020      	b.n	10015bca <_printf_common+0xda>
10015b88:	2306      	movs	r3, #6
10015b8a:	6820      	ldr	r0, [r4, #0]
10015b8c:	68e1      	ldr	r1, [r4, #12]
10015b8e:	683a      	ldr	r2, [r7, #0]
10015b90:	4003      	ands	r3, r0
10015b92:	2500      	movs	r5, #0
10015b94:	2b04      	cmp	r3, #4
10015b96:	d103      	bne.n	10015ba0 <_printf_common+0xb0>
10015b98:	1a8d      	subs	r5, r1, r2
10015b9a:	43eb      	mvns	r3, r5
10015b9c:	17db      	asrs	r3, r3, #31
10015b9e:	401d      	ands	r5, r3
10015ba0:	68a3      	ldr	r3, [r4, #8]
10015ba2:	6922      	ldr	r2, [r4, #16]
10015ba4:	4293      	cmp	r3, r2
10015ba6:	dd01      	ble.n	10015bac <_printf_common+0xbc>
10015ba8:	1a9b      	subs	r3, r3, r2
10015baa:	18ed      	adds	r5, r5, r3
10015bac:	2700      	movs	r7, #0
10015bae:	42bd      	cmp	r5, r7
10015bb0:	d00a      	beq.n	10015bc8 <_printf_common+0xd8>
10015bb2:	0022      	movs	r2, r4
10015bb4:	2301      	movs	r3, #1
10015bb6:	321a      	adds	r2, #26
10015bb8:	9901      	ldr	r1, [sp, #4]
10015bba:	9800      	ldr	r0, [sp, #0]
10015bbc:	9e08      	ldr	r6, [sp, #32]
10015bbe:	47b0      	blx	r6
10015bc0:	1c43      	adds	r3, r0, #1
10015bc2:	d0de      	beq.n	10015b82 <_printf_common+0x92>
10015bc4:	3701      	adds	r7, #1
10015bc6:	e7f2      	b.n	10015bae <_printf_common+0xbe>
10015bc8:	2000      	movs	r0, #0
10015bca:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

10015bcc <_printf_i>:
10015bcc:	b5f0      	push	{r4, r5, r6, r7, lr}
10015bce:	b08b      	sub	sp, #44	; 0x2c
10015bd0:	9206      	str	r2, [sp, #24]
10015bd2:	000a      	movs	r2, r1
10015bd4:	3243      	adds	r2, #67	; 0x43
10015bd6:	9307      	str	r3, [sp, #28]
10015bd8:	9005      	str	r0, [sp, #20]
10015bda:	9204      	str	r2, [sp, #16]
10015bdc:	7e0a      	ldrb	r2, [r1, #24]
10015bde:	000c      	movs	r4, r1
10015be0:	9b10      	ldr	r3, [sp, #64]	; 0x40
10015be2:	2a6e      	cmp	r2, #110	; 0x6e
10015be4:	d100      	bne.n	10015be8 <_printf_i+0x1c>
10015be6:	e0ab      	b.n	10015d40 <_printf_i+0x174>
10015be8:	d811      	bhi.n	10015c0e <_printf_i+0x42>
10015bea:	2a63      	cmp	r2, #99	; 0x63
10015bec:	d022      	beq.n	10015c34 <_printf_i+0x68>
10015bee:	d809      	bhi.n	10015c04 <_printf_i+0x38>
10015bf0:	2a00      	cmp	r2, #0
10015bf2:	d100      	bne.n	10015bf6 <_printf_i+0x2a>
10015bf4:	e0b5      	b.n	10015d62 <_printf_i+0x196>
10015bf6:	2a58      	cmp	r2, #88	; 0x58
10015bf8:	d000      	beq.n	10015bfc <_printf_i+0x30>
10015bfa:	e0c5      	b.n	10015d88 <_printf_i+0x1bc>
10015bfc:	3145      	adds	r1, #69	; 0x45
10015bfe:	700a      	strb	r2, [r1, #0]
10015c00:	4a81      	ldr	r2, [pc, #516]	; (10015e08 <_printf_i+0x23c>)
10015c02:	e04f      	b.n	10015ca4 <_printf_i+0xd8>
10015c04:	2a64      	cmp	r2, #100	; 0x64
10015c06:	d01d      	beq.n	10015c44 <_printf_i+0x78>
10015c08:	2a69      	cmp	r2, #105	; 0x69
10015c0a:	d01b      	beq.n	10015c44 <_printf_i+0x78>
10015c0c:	e0bc      	b.n	10015d88 <_printf_i+0x1bc>
10015c0e:	2a73      	cmp	r2, #115	; 0x73
10015c10:	d100      	bne.n	10015c14 <_printf_i+0x48>
10015c12:	e0aa      	b.n	10015d6a <_printf_i+0x19e>
10015c14:	d809      	bhi.n	10015c2a <_printf_i+0x5e>
10015c16:	2a6f      	cmp	r2, #111	; 0x6f
10015c18:	d029      	beq.n	10015c6e <_printf_i+0xa2>
10015c1a:	2a70      	cmp	r2, #112	; 0x70
10015c1c:	d000      	beq.n	10015c20 <_printf_i+0x54>
10015c1e:	e0b3      	b.n	10015d88 <_printf_i+0x1bc>
10015c20:	2220      	movs	r2, #32
10015c22:	6809      	ldr	r1, [r1, #0]
10015c24:	430a      	orrs	r2, r1
10015c26:	6022      	str	r2, [r4, #0]
10015c28:	e037      	b.n	10015c9a <_printf_i+0xce>
10015c2a:	2a75      	cmp	r2, #117	; 0x75
10015c2c:	d01f      	beq.n	10015c6e <_printf_i+0xa2>
10015c2e:	2a78      	cmp	r2, #120	; 0x78
10015c30:	d033      	beq.n	10015c9a <_printf_i+0xce>
10015c32:	e0a9      	b.n	10015d88 <_printf_i+0x1bc>
10015c34:	000e      	movs	r6, r1
10015c36:	681a      	ldr	r2, [r3, #0]
10015c38:	3642      	adds	r6, #66	; 0x42
10015c3a:	1d11      	adds	r1, r2, #4
10015c3c:	6019      	str	r1, [r3, #0]
10015c3e:	6813      	ldr	r3, [r2, #0]
10015c40:	7033      	strb	r3, [r6, #0]
10015c42:	e0a4      	b.n	10015d8e <_printf_i+0x1c2>
10015c44:	6821      	ldr	r1, [r4, #0]
10015c46:	681a      	ldr	r2, [r3, #0]
10015c48:	0608      	lsls	r0, r1, #24
10015c4a:	d406      	bmi.n	10015c5a <_printf_i+0x8e>
10015c4c:	0649      	lsls	r1, r1, #25
10015c4e:	d504      	bpl.n	10015c5a <_printf_i+0x8e>
10015c50:	1d11      	adds	r1, r2, #4
10015c52:	6019      	str	r1, [r3, #0]
10015c54:	2300      	movs	r3, #0
10015c56:	5ed5      	ldrsh	r5, [r2, r3]
10015c58:	e002      	b.n	10015c60 <_printf_i+0x94>
10015c5a:	1d11      	adds	r1, r2, #4
10015c5c:	6019      	str	r1, [r3, #0]
10015c5e:	6815      	ldr	r5, [r2, #0]
10015c60:	2d00      	cmp	r5, #0
10015c62:	da3b      	bge.n	10015cdc <_printf_i+0x110>
10015c64:	232d      	movs	r3, #45	; 0x2d
10015c66:	9a04      	ldr	r2, [sp, #16]
10015c68:	426d      	negs	r5, r5
10015c6a:	7013      	strb	r3, [r2, #0]
10015c6c:	e036      	b.n	10015cdc <_printf_i+0x110>
10015c6e:	6821      	ldr	r1, [r4, #0]
10015c70:	681a      	ldr	r2, [r3, #0]
10015c72:	0608      	lsls	r0, r1, #24
10015c74:	d406      	bmi.n	10015c84 <_printf_i+0xb8>
10015c76:	0649      	lsls	r1, r1, #25
10015c78:	d504      	bpl.n	10015c84 <_printf_i+0xb8>
10015c7a:	6815      	ldr	r5, [r2, #0]
10015c7c:	1d11      	adds	r1, r2, #4
10015c7e:	6019      	str	r1, [r3, #0]
10015c80:	b2ad      	uxth	r5, r5
10015c82:	e002      	b.n	10015c8a <_printf_i+0xbe>
10015c84:	1d11      	adds	r1, r2, #4
10015c86:	6019      	str	r1, [r3, #0]
10015c88:	6815      	ldr	r5, [r2, #0]
10015c8a:	4b5f      	ldr	r3, [pc, #380]	; (10015e08 <_printf_i+0x23c>)
10015c8c:	7e22      	ldrb	r2, [r4, #24]
10015c8e:	9303      	str	r3, [sp, #12]
10015c90:	2708      	movs	r7, #8
10015c92:	2a6f      	cmp	r2, #111	; 0x6f
10015c94:	d01d      	beq.n	10015cd2 <_printf_i+0x106>
10015c96:	270a      	movs	r7, #10
10015c98:	e01b      	b.n	10015cd2 <_printf_i+0x106>
10015c9a:	0022      	movs	r2, r4
10015c9c:	2178      	movs	r1, #120	; 0x78
10015c9e:	3245      	adds	r2, #69	; 0x45
10015ca0:	7011      	strb	r1, [r2, #0]
10015ca2:	4a5a      	ldr	r2, [pc, #360]	; (10015e0c <_printf_i+0x240>)
10015ca4:	6819      	ldr	r1, [r3, #0]
10015ca6:	9203      	str	r2, [sp, #12]
10015ca8:	1d08      	adds	r0, r1, #4
10015caa:	6822      	ldr	r2, [r4, #0]
10015cac:	6018      	str	r0, [r3, #0]
10015cae:	680d      	ldr	r5, [r1, #0]
10015cb0:	0610      	lsls	r0, r2, #24
10015cb2:	d402      	bmi.n	10015cba <_printf_i+0xee>
10015cb4:	0650      	lsls	r0, r2, #25
10015cb6:	d500      	bpl.n	10015cba <_printf_i+0xee>
10015cb8:	b2ad      	uxth	r5, r5
10015cba:	07d3      	lsls	r3, r2, #31
10015cbc:	d502      	bpl.n	10015cc4 <_printf_i+0xf8>
10015cbe:	2320      	movs	r3, #32
10015cc0:	431a      	orrs	r2, r3
10015cc2:	6022      	str	r2, [r4, #0]
10015cc4:	2710      	movs	r7, #16
10015cc6:	2d00      	cmp	r5, #0
10015cc8:	d103      	bne.n	10015cd2 <_printf_i+0x106>
10015cca:	2320      	movs	r3, #32
10015ccc:	6822      	ldr	r2, [r4, #0]
10015cce:	439a      	bics	r2, r3
10015cd0:	6022      	str	r2, [r4, #0]
10015cd2:	0023      	movs	r3, r4
10015cd4:	2200      	movs	r2, #0
10015cd6:	3343      	adds	r3, #67	; 0x43
10015cd8:	701a      	strb	r2, [r3, #0]
10015cda:	e002      	b.n	10015ce2 <_printf_i+0x116>
10015cdc:	270a      	movs	r7, #10
10015cde:	4b4a      	ldr	r3, [pc, #296]	; (10015e08 <_printf_i+0x23c>)
10015ce0:	9303      	str	r3, [sp, #12]
10015ce2:	6863      	ldr	r3, [r4, #4]
10015ce4:	60a3      	str	r3, [r4, #8]
10015ce6:	2b00      	cmp	r3, #0
10015ce8:	db09      	blt.n	10015cfe <_printf_i+0x132>
10015cea:	2204      	movs	r2, #4
10015cec:	6821      	ldr	r1, [r4, #0]
10015cee:	4391      	bics	r1, r2
10015cf0:	6021      	str	r1, [r4, #0]
10015cf2:	2d00      	cmp	r5, #0
10015cf4:	d105      	bne.n	10015d02 <_printf_i+0x136>
10015cf6:	9e04      	ldr	r6, [sp, #16]
10015cf8:	2b00      	cmp	r3, #0
10015cfa:	d011      	beq.n	10015d20 <_printf_i+0x154>
10015cfc:	e07b      	b.n	10015df6 <_printf_i+0x22a>
10015cfe:	2d00      	cmp	r5, #0
10015d00:	d079      	beq.n	10015df6 <_printf_i+0x22a>
10015d02:	9e04      	ldr	r6, [sp, #16]
10015d04:	0028      	movs	r0, r5
10015d06:	0039      	movs	r1, r7
10015d08:	f7fd f8b2 	bl	10012e70 <__aeabi_uidivmod>
10015d0c:	9b03      	ldr	r3, [sp, #12]
10015d0e:	3e01      	subs	r6, #1
10015d10:	5c5b      	ldrb	r3, [r3, r1]
10015d12:	0028      	movs	r0, r5
10015d14:	7033      	strb	r3, [r6, #0]
10015d16:	0039      	movs	r1, r7
10015d18:	f7fd f824 	bl	10012d64 <__aeabi_uidiv>
10015d1c:	1e05      	subs	r5, r0, #0
10015d1e:	d1f1      	bne.n	10015d04 <_printf_i+0x138>
10015d20:	2f08      	cmp	r7, #8
10015d22:	d109      	bne.n	10015d38 <_printf_i+0x16c>
10015d24:	6823      	ldr	r3, [r4, #0]
10015d26:	07db      	lsls	r3, r3, #31
10015d28:	d506      	bpl.n	10015d38 <_printf_i+0x16c>
10015d2a:	6863      	ldr	r3, [r4, #4]
10015d2c:	6922      	ldr	r2, [r4, #16]
10015d2e:	4293      	cmp	r3, r2
10015d30:	dc02      	bgt.n	10015d38 <_printf_i+0x16c>
10015d32:	2330      	movs	r3, #48	; 0x30
10015d34:	3e01      	subs	r6, #1
10015d36:	7033      	strb	r3, [r6, #0]
10015d38:	9b04      	ldr	r3, [sp, #16]
10015d3a:	1b9b      	subs	r3, r3, r6
10015d3c:	6123      	str	r3, [r4, #16]
10015d3e:	e02b      	b.n	10015d98 <_printf_i+0x1cc>
10015d40:	6809      	ldr	r1, [r1, #0]
10015d42:	681a      	ldr	r2, [r3, #0]
10015d44:	0608      	lsls	r0, r1, #24
10015d46:	d407      	bmi.n	10015d58 <_printf_i+0x18c>
10015d48:	0649      	lsls	r1, r1, #25
10015d4a:	d505      	bpl.n	10015d58 <_printf_i+0x18c>
10015d4c:	1d11      	adds	r1, r2, #4
10015d4e:	6019      	str	r1, [r3, #0]
10015d50:	6813      	ldr	r3, [r2, #0]
10015d52:	8aa2      	ldrh	r2, [r4, #20]
10015d54:	801a      	strh	r2, [r3, #0]
10015d56:	e004      	b.n	10015d62 <_printf_i+0x196>
10015d58:	1d11      	adds	r1, r2, #4
10015d5a:	6019      	str	r1, [r3, #0]
10015d5c:	6813      	ldr	r3, [r2, #0]
10015d5e:	6962      	ldr	r2, [r4, #20]
10015d60:	601a      	str	r2, [r3, #0]
10015d62:	2300      	movs	r3, #0
10015d64:	9e04      	ldr	r6, [sp, #16]
10015d66:	6123      	str	r3, [r4, #16]
10015d68:	e016      	b.n	10015d98 <_printf_i+0x1cc>
10015d6a:	681a      	ldr	r2, [r3, #0]
10015d6c:	1d11      	adds	r1, r2, #4
10015d6e:	6019      	str	r1, [r3, #0]
10015d70:	6816      	ldr	r6, [r2, #0]
10015d72:	2100      	movs	r1, #0
10015d74:	6862      	ldr	r2, [r4, #4]
10015d76:	0030      	movs	r0, r6
10015d78:	f000 f92a 	bl	10015fd0 <memchr>
10015d7c:	2800      	cmp	r0, #0
10015d7e:	d001      	beq.n	10015d84 <_printf_i+0x1b8>
10015d80:	1b80      	subs	r0, r0, r6
10015d82:	6060      	str	r0, [r4, #4]
10015d84:	6863      	ldr	r3, [r4, #4]
10015d86:	e003      	b.n	10015d90 <_printf_i+0x1c4>
10015d88:	0026      	movs	r6, r4
10015d8a:	3642      	adds	r6, #66	; 0x42
10015d8c:	7032      	strb	r2, [r6, #0]
10015d8e:	2301      	movs	r3, #1
10015d90:	6123      	str	r3, [r4, #16]
10015d92:	2300      	movs	r3, #0
10015d94:	9a04      	ldr	r2, [sp, #16]
10015d96:	7013      	strb	r3, [r2, #0]
10015d98:	9b07      	ldr	r3, [sp, #28]
10015d9a:	aa09      	add	r2, sp, #36	; 0x24
10015d9c:	9300      	str	r3, [sp, #0]
10015d9e:	0021      	movs	r1, r4
10015da0:	9b06      	ldr	r3, [sp, #24]
10015da2:	9805      	ldr	r0, [sp, #20]
10015da4:	f7ff fea4 	bl	10015af0 <_printf_common>
10015da8:	1c43      	adds	r3, r0, #1
10015daa:	d102      	bne.n	10015db2 <_printf_i+0x1e6>
10015dac:	2001      	movs	r0, #1
10015dae:	4240      	negs	r0, r0
10015db0:	e027      	b.n	10015e02 <_printf_i+0x236>
10015db2:	6923      	ldr	r3, [r4, #16]
10015db4:	0032      	movs	r2, r6
10015db6:	9906      	ldr	r1, [sp, #24]
10015db8:	9805      	ldr	r0, [sp, #20]
10015dba:	9d07      	ldr	r5, [sp, #28]
10015dbc:	47a8      	blx	r5
10015dbe:	1c43      	adds	r3, r0, #1
10015dc0:	d0f4      	beq.n	10015dac <_printf_i+0x1e0>
10015dc2:	6823      	ldr	r3, [r4, #0]
10015dc4:	2500      	movs	r5, #0
10015dc6:	079b      	lsls	r3, r3, #30
10015dc8:	d40f      	bmi.n	10015dea <_printf_i+0x21e>
10015dca:	9b09      	ldr	r3, [sp, #36]	; 0x24
10015dcc:	68e0      	ldr	r0, [r4, #12]
10015dce:	4298      	cmp	r0, r3
10015dd0:	da17      	bge.n	10015e02 <_printf_i+0x236>
10015dd2:	0018      	movs	r0, r3
10015dd4:	e015      	b.n	10015e02 <_printf_i+0x236>
10015dd6:	0022      	movs	r2, r4
10015dd8:	2301      	movs	r3, #1
10015dda:	3219      	adds	r2, #25
10015ddc:	9906      	ldr	r1, [sp, #24]
10015dde:	9805      	ldr	r0, [sp, #20]
10015de0:	9e07      	ldr	r6, [sp, #28]
10015de2:	47b0      	blx	r6
10015de4:	1c43      	adds	r3, r0, #1
10015de6:	d0e1      	beq.n	10015dac <_printf_i+0x1e0>
10015de8:	3501      	adds	r5, #1
10015dea:	68e3      	ldr	r3, [r4, #12]
10015dec:	9a09      	ldr	r2, [sp, #36]	; 0x24
10015dee:	1a9b      	subs	r3, r3, r2
10015df0:	429d      	cmp	r5, r3
10015df2:	dbf0      	blt.n	10015dd6 <_printf_i+0x20a>
10015df4:	e7e9      	b.n	10015dca <_printf_i+0x1fe>
10015df6:	0026      	movs	r6, r4
10015df8:	9b03      	ldr	r3, [sp, #12]
10015dfa:	3642      	adds	r6, #66	; 0x42
10015dfc:	781b      	ldrb	r3, [r3, #0]
10015dfe:	7033      	strb	r3, [r6, #0]
10015e00:	e78e      	b.n	10015d20 <_printf_i+0x154>
10015e02:	b00b      	add	sp, #44	; 0x2c
10015e04:	bdf0      	pop	{r4, r5, r6, r7, pc}
10015e06:	46c0      	nop			; (mov r8, r8)
10015e08:	10018141 	.word	0x10018141
10015e0c:	10018152 	.word	0x10018152

10015e10 <_putc_r>:
10015e10:	b570      	push	{r4, r5, r6, lr}
10015e12:	0006      	movs	r6, r0
10015e14:	000d      	movs	r5, r1
10015e16:	0014      	movs	r4, r2
10015e18:	2800      	cmp	r0, #0
10015e1a:	d004      	beq.n	10015e26 <_putc_r+0x16>
10015e1c:	6983      	ldr	r3, [r0, #24]
10015e1e:	2b00      	cmp	r3, #0
10015e20:	d101      	bne.n	10015e26 <_putc_r+0x16>
10015e22:	f7ff fc29 	bl	10015678 <__sinit>
10015e26:	4b12      	ldr	r3, [pc, #72]	; (10015e70 <_putc_r+0x60>)
10015e28:	429c      	cmp	r4, r3
10015e2a:	d101      	bne.n	10015e30 <_putc_r+0x20>
10015e2c:	6874      	ldr	r4, [r6, #4]
10015e2e:	e008      	b.n	10015e42 <_putc_r+0x32>
10015e30:	4b10      	ldr	r3, [pc, #64]	; (10015e74 <_putc_r+0x64>)
10015e32:	429c      	cmp	r4, r3
10015e34:	d101      	bne.n	10015e3a <_putc_r+0x2a>
10015e36:	68b4      	ldr	r4, [r6, #8]
10015e38:	e003      	b.n	10015e42 <_putc_r+0x32>
10015e3a:	4b0f      	ldr	r3, [pc, #60]	; (10015e78 <_putc_r+0x68>)
10015e3c:	429c      	cmp	r4, r3
10015e3e:	d100      	bne.n	10015e42 <_putc_r+0x32>
10015e40:	68f4      	ldr	r4, [r6, #12]
10015e42:	68a3      	ldr	r3, [r4, #8]
10015e44:	3b01      	subs	r3, #1
10015e46:	60a3      	str	r3, [r4, #8]
10015e48:	2b00      	cmp	r3, #0
10015e4a:	da05      	bge.n	10015e58 <_putc_r+0x48>
10015e4c:	69a2      	ldr	r2, [r4, #24]
10015e4e:	4293      	cmp	r3, r2
10015e50:	db08      	blt.n	10015e64 <_putc_r+0x54>
10015e52:	b2eb      	uxtb	r3, r5
10015e54:	2b0a      	cmp	r3, #10
10015e56:	d005      	beq.n	10015e64 <_putc_r+0x54>
10015e58:	6823      	ldr	r3, [r4, #0]
10015e5a:	b2e8      	uxtb	r0, r5
10015e5c:	1c5a      	adds	r2, r3, #1
10015e5e:	6022      	str	r2, [r4, #0]
10015e60:	701d      	strb	r5, [r3, #0]
10015e62:	e004      	b.n	10015e6e <_putc_r+0x5e>
10015e64:	0022      	movs	r2, r4
10015e66:	0029      	movs	r1, r5
10015e68:	0030      	movs	r0, r6
10015e6a:	f7ff fa43 	bl	100152f4 <__swbuf_r>
10015e6e:	bd70      	pop	{r4, r5, r6, pc}
10015e70:	100180d0 	.word	0x100180d0
10015e74:	100180f0 	.word	0x100180f0
10015e78:	10018110 	.word	0x10018110

10015e7c <__sread>:
10015e7c:	b570      	push	{r4, r5, r6, lr}
10015e7e:	000c      	movs	r4, r1
10015e80:	250e      	movs	r5, #14
10015e82:	5f49      	ldrsh	r1, [r1, r5]
10015e84:	f000 f8b0 	bl	10015fe8 <_read_r>
10015e88:	2800      	cmp	r0, #0
10015e8a:	db03      	blt.n	10015e94 <__sread+0x18>
10015e8c:	6d63      	ldr	r3, [r4, #84]	; 0x54
10015e8e:	181b      	adds	r3, r3, r0
10015e90:	6563      	str	r3, [r4, #84]	; 0x54
10015e92:	e003      	b.n	10015e9c <__sread+0x20>
10015e94:	89a2      	ldrh	r2, [r4, #12]
10015e96:	4b02      	ldr	r3, [pc, #8]	; (10015ea0 <__sread+0x24>)
10015e98:	4013      	ands	r3, r2
10015e9a:	81a3      	strh	r3, [r4, #12]
10015e9c:	bd70      	pop	{r4, r5, r6, pc}
10015e9e:	46c0      	nop			; (mov r8, r8)
10015ea0:	ffffefff 	.word	0xffffefff

10015ea4 <__swrite>:
10015ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10015ea6:	001f      	movs	r7, r3
10015ea8:	898b      	ldrh	r3, [r1, #12]
10015eaa:	0005      	movs	r5, r0
10015eac:	000c      	movs	r4, r1
10015eae:	0016      	movs	r6, r2
10015eb0:	05db      	lsls	r3, r3, #23
10015eb2:	d505      	bpl.n	10015ec0 <__swrite+0x1c>
10015eb4:	230e      	movs	r3, #14
10015eb6:	5ec9      	ldrsh	r1, [r1, r3]
10015eb8:	2200      	movs	r2, #0
10015eba:	2302      	movs	r3, #2
10015ebc:	f000 f874 	bl	10015fa8 <_lseek_r>
10015ec0:	89a2      	ldrh	r2, [r4, #12]
10015ec2:	4b05      	ldr	r3, [pc, #20]	; (10015ed8 <__swrite+0x34>)
10015ec4:	0028      	movs	r0, r5
10015ec6:	4013      	ands	r3, r2
10015ec8:	81a3      	strh	r3, [r4, #12]
10015eca:	0032      	movs	r2, r6
10015ecc:	230e      	movs	r3, #14
10015ece:	5ee1      	ldrsh	r1, [r4, r3]
10015ed0:	003b      	movs	r3, r7
10015ed2:	f000 f81f 	bl	10015f14 <_write_r>
10015ed6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10015ed8:	ffffefff 	.word	0xffffefff

10015edc <__sseek>:
10015edc:	b570      	push	{r4, r5, r6, lr}
10015ede:	000c      	movs	r4, r1
10015ee0:	250e      	movs	r5, #14
10015ee2:	5f49      	ldrsh	r1, [r1, r5]
10015ee4:	f000 f860 	bl	10015fa8 <_lseek_r>
10015ee8:	89a3      	ldrh	r3, [r4, #12]
10015eea:	1c42      	adds	r2, r0, #1
10015eec:	d103      	bne.n	10015ef6 <__sseek+0x1a>
10015eee:	4a05      	ldr	r2, [pc, #20]	; (10015f04 <__sseek+0x28>)
10015ef0:	4013      	ands	r3, r2
10015ef2:	81a3      	strh	r3, [r4, #12]
10015ef4:	e004      	b.n	10015f00 <__sseek+0x24>
10015ef6:	2280      	movs	r2, #128	; 0x80
10015ef8:	0152      	lsls	r2, r2, #5
10015efa:	4313      	orrs	r3, r2
10015efc:	81a3      	strh	r3, [r4, #12]
10015efe:	6560      	str	r0, [r4, #84]	; 0x54
10015f00:	bd70      	pop	{r4, r5, r6, pc}
10015f02:	46c0      	nop			; (mov r8, r8)
10015f04:	ffffefff 	.word	0xffffefff

10015f08 <__sclose>:
10015f08:	b510      	push	{r4, lr}
10015f0a:	230e      	movs	r3, #14
10015f0c:	5ec9      	ldrsh	r1, [r1, r3]
10015f0e:	f000 f815 	bl	10015f3c <_close_r>
10015f12:	bd10      	pop	{r4, pc}

10015f14 <_write_r>:
10015f14:	b570      	push	{r4, r5, r6, lr}
10015f16:	0005      	movs	r5, r0
10015f18:	0008      	movs	r0, r1
10015f1a:	0011      	movs	r1, r2
10015f1c:	2200      	movs	r2, #0
10015f1e:	4c06      	ldr	r4, [pc, #24]	; (10015f38 <_write_r+0x24>)
10015f20:	6022      	str	r2, [r4, #0]
10015f22:	001a      	movs	r2, r3
10015f24:	f7f7 fab4 	bl	1000d490 <_write>
10015f28:	1c43      	adds	r3, r0, #1
10015f2a:	d103      	bne.n	10015f34 <_write_r+0x20>
10015f2c:	6823      	ldr	r3, [r4, #0]
10015f2e:	2b00      	cmp	r3, #0
10015f30:	d000      	beq.n	10015f34 <_write_r+0x20>
10015f32:	602b      	str	r3, [r5, #0]
10015f34:	bd70      	pop	{r4, r5, r6, pc}
10015f36:	46c0      	nop			; (mov r8, r8)
10015f38:	1001b0cc 	.word	0x1001b0cc

10015f3c <_close_r>:
10015f3c:	2300      	movs	r3, #0
10015f3e:	b570      	push	{r4, r5, r6, lr}
10015f40:	4c06      	ldr	r4, [pc, #24]	; (10015f5c <_close_r+0x20>)
10015f42:	0005      	movs	r5, r0
10015f44:	0008      	movs	r0, r1
10015f46:	6023      	str	r3, [r4, #0]
10015f48:	f7f7 fadc 	bl	1000d504 <_close>
10015f4c:	1c43      	adds	r3, r0, #1
10015f4e:	d103      	bne.n	10015f58 <_close_r+0x1c>
10015f50:	6823      	ldr	r3, [r4, #0]
10015f52:	2b00      	cmp	r3, #0
10015f54:	d000      	beq.n	10015f58 <_close_r+0x1c>
10015f56:	602b      	str	r3, [r5, #0]
10015f58:	bd70      	pop	{r4, r5, r6, pc}
10015f5a:	46c0      	nop			; (mov r8, r8)
10015f5c:	1001b0cc 	.word	0x1001b0cc

10015f60 <_fstat_r>:
10015f60:	2300      	movs	r3, #0
10015f62:	b570      	push	{r4, r5, r6, lr}
10015f64:	4c06      	ldr	r4, [pc, #24]	; (10015f80 <_fstat_r+0x20>)
10015f66:	0005      	movs	r5, r0
10015f68:	0008      	movs	r0, r1
10015f6a:	0011      	movs	r1, r2
10015f6c:	6023      	str	r3, [r4, #0]
10015f6e:	f7f7 facd 	bl	1000d50c <_fstat>
10015f72:	1c43      	adds	r3, r0, #1
10015f74:	d103      	bne.n	10015f7e <_fstat_r+0x1e>
10015f76:	6823      	ldr	r3, [r4, #0]
10015f78:	2b00      	cmp	r3, #0
10015f7a:	d000      	beq.n	10015f7e <_fstat_r+0x1e>
10015f7c:	602b      	str	r3, [r5, #0]
10015f7e:	bd70      	pop	{r4, r5, r6, pc}
10015f80:	1001b0cc 	.word	0x1001b0cc

10015f84 <_isatty_r>:
10015f84:	2300      	movs	r3, #0
10015f86:	b570      	push	{r4, r5, r6, lr}
10015f88:	4c06      	ldr	r4, [pc, #24]	; (10015fa4 <_isatty_r+0x20>)
10015f8a:	0005      	movs	r5, r0
10015f8c:	0008      	movs	r0, r1
10015f8e:	6023      	str	r3, [r4, #0]
10015f90:	f7f7 fac2 	bl	1000d518 <_isatty>
10015f94:	1c43      	adds	r3, r0, #1
10015f96:	d103      	bne.n	10015fa0 <_isatty_r+0x1c>
10015f98:	6823      	ldr	r3, [r4, #0]
10015f9a:	2b00      	cmp	r3, #0
10015f9c:	d000      	beq.n	10015fa0 <_isatty_r+0x1c>
10015f9e:	602b      	str	r3, [r5, #0]
10015fa0:	bd70      	pop	{r4, r5, r6, pc}
10015fa2:	46c0      	nop			; (mov r8, r8)
10015fa4:	1001b0cc 	.word	0x1001b0cc

10015fa8 <_lseek_r>:
10015fa8:	b570      	push	{r4, r5, r6, lr}
10015faa:	0005      	movs	r5, r0
10015fac:	0008      	movs	r0, r1
10015fae:	0011      	movs	r1, r2
10015fb0:	2200      	movs	r2, #0
10015fb2:	4c06      	ldr	r4, [pc, #24]	; (10015fcc <_lseek_r+0x24>)
10015fb4:	6022      	str	r2, [r4, #0]
10015fb6:	001a      	movs	r2, r3
10015fb8:	f7f7 fab0 	bl	1000d51c <_lseek>
10015fbc:	1c43      	adds	r3, r0, #1
10015fbe:	d103      	bne.n	10015fc8 <_lseek_r+0x20>
10015fc0:	6823      	ldr	r3, [r4, #0]
10015fc2:	2b00      	cmp	r3, #0
10015fc4:	d000      	beq.n	10015fc8 <_lseek_r+0x20>
10015fc6:	602b      	str	r3, [r5, #0]
10015fc8:	bd70      	pop	{r4, r5, r6, pc}
10015fca:	46c0      	nop			; (mov r8, r8)
10015fcc:	1001b0cc 	.word	0x1001b0cc

10015fd0 <memchr>:
10015fd0:	b2c9      	uxtb	r1, r1
10015fd2:	1882      	adds	r2, r0, r2
10015fd4:	4290      	cmp	r0, r2
10015fd6:	d004      	beq.n	10015fe2 <memchr+0x12>
10015fd8:	7803      	ldrb	r3, [r0, #0]
10015fda:	428b      	cmp	r3, r1
10015fdc:	d002      	beq.n	10015fe4 <memchr+0x14>
10015fde:	3001      	adds	r0, #1
10015fe0:	e7f8      	b.n	10015fd4 <memchr+0x4>
10015fe2:	2000      	movs	r0, #0
10015fe4:	4770      	bx	lr
	...

10015fe8 <_read_r>:
10015fe8:	b570      	push	{r4, r5, r6, lr}
10015fea:	0005      	movs	r5, r0
10015fec:	0008      	movs	r0, r1
10015fee:	0011      	movs	r1, r2
10015ff0:	2200      	movs	r2, #0
10015ff2:	4c06      	ldr	r4, [pc, #24]	; (1001600c <_read_r+0x24>)
10015ff4:	6022      	str	r2, [r4, #0]
10015ff6:	001a      	movs	r2, r3
10015ff8:	f7f7 fa2a 	bl	1000d450 <_read>
10015ffc:	1c43      	adds	r3, r0, #1
10015ffe:	d103      	bne.n	10016008 <_read_r+0x20>
10016000:	6823      	ldr	r3, [r4, #0]
10016002:	2b00      	cmp	r3, #0
10016004:	d000      	beq.n	10016008 <_read_r+0x20>
10016006:	602b      	str	r3, [r5, #0]
10016008:	bd70      	pop	{r4, r5, r6, pc}
1001600a:	46c0      	nop			; (mov r8, r8)
1001600c:	1001b0cc 	.word	0x1001b0cc
10016010:	000003e8 	.word	0x000003e8

10016014 <test>:
10016014:	00000083 00004000 00000200 00c800c8     .....@..........
10016024:	41a00000 42700000 3f000000 3e666666     ...A..pB...?fff>
10016034:	3f2ccccd 3f000000 3f000000 0000000a     ..,?...?...?....
10016044:	72617453 676e6974 61694220 6f4c2073     Starting Bias Lo
10016054:	5220706f 73646165 00000000 706d6153     op Reads....Samp
10016064:	3a73656c 0a642520 00000000 65636341     les: %d.....Acce
10016074:	666f206c 74657366 74616420 57482061     l offset data HW
10016084:	62205453 253d7469 25203a64 66342e37     ST bit=%d: %7.4f
10016094:	2e372520 25206634 66342e37 00000a0d      %7.4f %7.4f....
100160a4:	6f727947 66666f20 20746573 61746164     Gyro offset data
100160b4:	53574820 69622054 64253d74 3725203a      HWST bit=%d: %7
100160c4:	2066342e 342e3725 37252066 0d66342e     .4f %7.4f %7.4f.
100160d4:	0000000a 78352325 2325203a 0a0d7835     ....%#5x: %#5x..
100160e4:	00000000 706d6f43 20737361 20746f6e     ....Compass not 
100160f4:	6e756f66 00002e64 72617453 676e6974     found...Starting
10016104:	55504d20 30303536 53574820 000d2154      MPU6500 HWST!..
10016114:	72746552 69766569 4220676e 65736169     Retrieving Biase
10016124:	00000d73 72746552 69766569 4220676e     s...Retrieving B
10016134:	65736169 72452073 20726f72 6f70202d     iases Error - po
10016144:	62697373 4920656c 65204332 726f7272     ssible I2C error
10016154:	00000000 72746552 69766569 5320676e     ....Retrieving S
10016164:	69422054 73657361 00000000 72746552     T Biases....Retr
10016174:	69766569 5320676e 69422054 73657361     ieving ST Biases
10016184:	72724520 2d20726f 736f7020 6c626973      Error - possibl
10016194:	32492065 72652043 00726f72 64616552     e I2C error.Read
100161a4:	20676e69 2050544f 69676552 72657473     ing OTP Register
100161b4:	72724520 002e726f 65636341 544f206c      Error..Accel OT
100161c4:	64253a50 6425202c 6425202c 0000000a     P:%d, %d, %d....
100161d4:	45434341 52433a4c 52455449 41204149     ACCEL:CRITERIA A
100161e4:	00000000 73616942 6968535f 253d7466     ....Bias_Shift=%
100161f4:	66342e37 6942202c 525f7361 253d6765     7.4f, Bias_Reg=%
10016204:	66342e37 6942202c 485f7361 3d545357     7.4f, Bias_HWST=
10016214:	342e3725 000a0d66 2050544f 756c6176     %7.4f...OTP valu
10016224:	25203a65 66342e37 00000a0d 69746172     e: %7.4f....rati
10016234:	37253d6f 2c66342e 72687420 6f687365     o=%7.4f, thresho
10016244:	253d646c 66342e37 00000a0d 45434341     ld=%7.4f....ACCE
10016254:	6146204c 41206c69 20736978 6425203d     L Fail Axis = %d
10016264:	0000000a 45434341 52433a4c 52455449     ....ACCEL:CRITER
10016274:	42204149 0000000d 206e694d 203a474d     IA B....Min MG: 
10016284:	342e3725 000a0d66 2078614d 203a474d     %7.4f...Max MG: 
10016294:	342e3725 000a0d66 73616942 6968735f     %7.4f...Bias_shi
100162a4:	253d7466 66342e37 7473202c 2e37253d     ft=%7.4f, st=%7.
100162b4:	202c6634 3d676572 342e3725 00000a66     4f, reg=%7.4f...
100162c4:	65636341 4146206c 61204c49 3a736978     Accel FAIL axis:
100162d4:	3c206425 3232203d 20676d35 3e20726f     %d <= 225mg or >
100162e4:	3736203d 0a676d35 00000000 65636341     = 675mg.....Acce
100162f4:	52433a6c 52455449 43204149 6962203a     l:CRITERIA C: bi
10016304:	6c207361 20737365 6e616874 2e372520     as less than %7.
10016314:	000a6634 4c494146 203a4445 65636341     4f..FAILED: Acce
10016324:	7861206c 253a7369 203d2064 20646c25     l axis:%d = %ld 
10016334:	3035203e 0a676d30 00000000 65636341     > 500mg.....Acce
10016344:	6553206c 5420666c 20747365 75736552     l Self Test Resu
10016354:	3a73746c 0a642520 00000000 6f727947     lts: %d.....Gyro
10016364:	50544f20 2c64253a 2c642520 0d642520      OTP:%d, %d, %d.
10016374:	0000000a 4f525947 4952433a 49524554     ....GYRO:CRITERI
10016384:	00412041 6f727947 69614620 7841206c     A A.Gyro Fail Ax
10016394:	3d207369 0a642520 00000000 4f525947     is = %d.....GYRO
100163a4:	4952433a 49524554 0d422041 00000000     :CRITERIA B.....
100163b4:	2078614d 3a535044 2e372520 0a0d6634     Max DPS: %7.4f..
100163c4:	00000000 4f525947 49414620 7861204c     ....GYRO FAIL ax
100163d4:	253a7369 72672064 65746165 68742072     is:%d greater th
100163e4:	36206e61 73706430 0000000a 6f727947     an 60dps....Gyro
100163f4:	4952433a 49524554 3a432041 61696220     :CRITERIA C: bia
10016404:	656c2073 74207373 206e6168 342e3725     s less than %7.4
10016414:	00000a66 4c494146 203a4445 6f727947     f...FAILED: Gyro
10016424:	69786120 64253a73 25203d20 3e20646c      axis:%d = %ld >
10016434:	64303220 000a7370 6f727947 6c655320      20dps..Gyro Sel
10016444:	65542066 52207473 6c757365 203a7374     f Test Results: 
10016454:	000a6425 706d6f43 20737361 666c6553     %d..Compass Self
10016464:	73655420 65522074 746c7573 25203a73      Test Results: %
10016474:	00000a64 74697845 20676e69 54535748     d...Exiting HWST
10016484:	00000000                                ....

10016488 <hw>:
10016488:	04000069 01410080 01000000 00001333     i.....A.....3...

10016498 <reg>:
10016498:	0c1a1975 1c1b236a 201f1e1d 3b437472     u...j#..... rtC;
100164a8:	3a393841 376c6b69 6d24776f 2625706e     A89:ikl7ow$mnp%&
100164b8:	2a292827 67646334 00000049 006ccd4c     '()*4cdgI...L.l.
100164c8:	002cc90c 00765636 00664626 c4abf2fe     ..,.6Vv.&Ff.....
100164d8:	dfdff1aa dfdfafbb 8db3aab8 350d98b4     ...............5
100164e8:	0000005d aaaaaab8 c5c388b0 000000c7     ]...............
100164f8:	f3b9b1d8 b691a38b 00d9b409 f3b9b1da     ................
10016508:	b691a38b 00dab4da 736d735b 656c625f     ........[sms_ble
10016518:	6961705f 65725f72 73657571 6e665f74     _pair_request_fn
10016528:	6150095d 6e697269 65722067 73657571     ].Pairing reques
10016538:	2e2e2e74 656e4220 64252077 4c42202c     t... Bnew %d, BL
10016548:	78302045 78323025 3154202c 2c642520     E 0x%02x, T1 %d,
10016558:	20325420 00006425 736d735b 656c625f      T2 %d..[sms_ble
10016568:	776f705f 645f7265 5d6e776f 00000000     _power_down]....
10016578:	736d735b 656c625f 776f705f 645f7265     [sms_ble_power_d
10016588:	5d6e776f 6f745309 6e697070 6f632067     own].Stopping co
10016598:	6e616d6d 65722064 76696563 64206465     mmand received d
100165a8:	6e697275 64612067 74726576 6d657369     uring advertisem
100165b8:	2e746e65 6f745320 6e697070 2e2e2e67     ent. Stopping...
100165c8:	00000020 6c696166 21216465 00000021      ...failed!!!...
100165d8:	656e6f64 00000021 736d735b 656c625f     done!...[sms_ble
100165e8:	776f705f 645f7265 5d6e776f 65440909     _power_down]..De
100165f8:	65636976 69617020 2e646572 64202e2e     vice paired... d
10016608:	62617369 676e696c 746e6920 75727265     isabling interru
10016618:	20737470 77732026 68637469 20676e69     pts & switching 
10016628:	6e776f64 6e657320 73726f73 00000000     down sensors....
10016638:	736d735b 656c625f 776f705f 645f7265     [sms_ble_power_d
10016648:	5d6e776f 75430909 6e657272 20796c74     own]..Currently 
10016658:	69646e69 69746163 0000676e 736d735b     indicating..[sms
10016668:	656c625f 776f705f 645f7265 5d6e776f     _ble_power_down]
10016678:	65440909 65636976 6e6f6320 7463656e     ..Device connect
10016688:	2e2e6465 6964202e 6e6f6373 7463656e     ed... disconnect
10016698:	00676e69 736d735b 656c625f 7664615f     ing.[sms_ble_adv
100166a8:	7065725f 5f74726f 095d6e66 65766441     _report_fn].Adve
100166b8:	73697472 6e656d65 69742074 756f656d     rtisement timeou
100166c8:	2e2e2e74 00000000 736d735b 656c625f     t.......[sms_ble
100166d8:	6e6f635f 7463656e 665f6465 09095d6e     _connected_fn]..
100166e8:	69766544 20736563 6e6e6f63 65746365     Devices connecte
100166f8:	2e2e2e64 00000000 736d735b 656c625f     d.......[sms_ble
10016708:	6961705f 5f646572 005d6e66 736d735b     _paired_fn].[sms
10016718:	656c625f 7664615f 69747265 095d6573     _ble_advertise].
10016728:	65766441 73697472 6e656d65 61642074     Advertisement da
10016738:	73206174 66207465 656c6961 00002164     ta set failed!..
10016748:	736d735b 656c625f 7664615f 69747265     [sms_ble_adverti
10016758:	095d6573 454c4209 61745320 64657472     se]..BLE Started
10016768:	76644120 69747265 656d6573 0000746e      Advertisement..
10016778:	736d735b 7265735f 65636976 7664615f     [sms_service_adv
10016788:	69747265 095d6573 20454c42 65766441     ertise].BLE Adve
10016798:	73697472 6e656d65 74732074 20747261     rtisement start 
100167a8:	6c696166 203a6465 73616572 30206e6f     failed: reason 0
100167b8:	00782578 736d735b 656c625f 7369645f     x%x.[sms_ble_dis
100167c8:	6e6e6f63 65746365 6e665f64 6550095d     connected_fn].Pe
100167d8:	64207265 6f637369 63656e6e 2e646574     er disconnected.
100167e8:	42202e2e 2077656e 202c6425 20454c42     .. Bnew %d, BLE 
100167f8:	30257830 202c7832 25203154 54202c64     0x%02x, T1 %d, T
10016808:	64252032 00000000 6e630a0d 25203a74     2 %d......cnt: %
10016818:	00000064                                d...

1001681c <sms_ble_gap_cb>:
	...
10016828:	1000a021 00000000 1000a055 1000a165     !.......U...e...
	...
10016840:	1000a09d 10009e3d 00000000 00000000     ....=...........
	...

10016868 <sms_ble_gatt_server_cb>:
10016868:	10009e89 10009ec5 00000000 00000000     ................
	...
10016890:	736d735b 7475625f 5f6e6f74 666e6f63     [sms_button_conf
100168a0:	72756769 70095d65 6c626f72 77206d65     igure].problem w
100168b0:	656c6968 74657320 676e6974 20707520     hile setting up 
100168c0:	74747562 00306e6f 736d735b 7475625f     button0.[sms_but
100168d0:	5f6e6f74 666e6f63 72756769 50095d65     ton_configure].P
100168e0:	6c626f72 77206d65 656c6968 74657320     roblem while set
100168f0:	676e6974 20707520 74747562 00316e6f     ting up button1.
10016900:	736d735b 7475625f 5f6e6f74 666e6f63     [sms_button_conf
10016910:	72756769 50095d65 6c626f72 77206d65     igure].Problem w
10016920:	656c6968 74657320 676e6974 20707520     hile setting up 
10016930:	414c5058 44454e49 65737520 75622072     XPLAINED user bu
10016940:	6e6f7474 00000000 736d735b 7475625f     tton....[sms_but
10016950:	5f6e6f74 5f746567 74617473 09095d65     ton_get_state]..
10016960:	74747542 73206e6f 65746174 6425203a     Button state: %d
10016970:	00642520 736d735b 7475625f 5f6e6f74      %d.[sms_button_
10016980:	2d5d6e66 00000030 736d735b 7475625f     fn]-0...[sms_but
10016990:	5f6e6f74 2d5d6e66 00000031 736d735b     ton_fn]-1...[sms
100169a0:	7475625f 5f6e6f74 095d6e66 61745309     _button_fn]..Sta
100169b0:	6e697472 65732067 726f736e 42282073     rting sensors (B
100169c0:	00002930 736d735b 7475625f 5f6e6f74     0)..[sms_button_
100169d0:	095d6e66 6f4e0909 73752074 73206465     fn]...Not used s
100169e0:	65746174 2e2e2e73 00000000 736d735b     tates.......[sms
100169f0:	7475625f 5f6e6f74 095d6e66 61745309     _button_fn]..Sta
10016a00:	6e697472 65732067 726f736e 42282073     rting sensors (B
10016a10:	00002931 736d735b 7475625f 5f6e6f74     1)..[sms_button_
10016a20:	095d6e66 6c697453 6e69206c 61636964     fn].Still indica
10016a30:	676e6974 002e2e2e 736d735b 7475625f     ting....[sms_but
10016a40:	5f6e6f74 69666564 735f656e 69767265     ton_define_servi
10016a50:	5d736563 72655309 65636976 65642073     ces].Services de
10016a60:	696e6966 6620676e 656c6961 72202c64     fining failed, r
10016a70:	6f736165 7830206e 00007825 736d735b     eason 0x%x..[sms
10016a80:	7475625f 5f6e6f74 69666564 735f656e     _button_define_s
10016a90:	69767265 5d736563 72655309 65636976     ervices].Service
10016aa0:	65642073 656e6966 53202c64 6220534d     s defined, SMS b
10016ab0:	6f747475 6168206e 656c646e 6425203a     utton handle: %d
10016ac0:	00000000 626f7250 206d656c 6c696877     ....Problem whil
10016ad0:	65732065 6e697474 70672067 70206f69     e setting gpio p
10016ae0:	00006e69 2e2e7325 4209092e 6572702d     in..%s.....B-pre
10016af0:	64252076 2d42202c 20727563 202c6425     v %d, B-cur %d, 
10016b00:	20454c42 30257830 202c7832 25203154     BLE 0x%02x, T1 %
10016b10:	54202c64 64252032 4d53202c 64252053     d, T2 %d, SMS %d
10016b20:	00000000 736d735b 75706d5f 6e6f635f     ....[sms_mpu_con
10016b30:	75676966 675f6572 5d6f6970 6f725009     figure_gpio].Pro
10016b40:	6d656c62 69687720 7320656c 69747465     blem while setti
10016b50:	7520676e 4d492070 52442055 70205944     ng up IMU DRDY p
10016b60:	00006e69 736d735b 75706d5f 6e6f635f     in..[sms_mpu_con
10016b70:	75676966 675f6572 5d6f6970 6f725009     figure_gpio].Pro
10016b80:	6d656c62 69687720 7320656c 69747465     blem while setti
10016b90:	7520676e 4d492070 43562055 69702043     ng up IMU VCC pi
10016ba0:	0000006e 74696e49 696c6169 676e697a     n...Initializing
10016bb0:	55504d20 002e2e2e 69616620 2164656c      MPU.... failed!
10016bc0:	00000000 74746553 20676e69 4d207075     ....Setting up M
10016bd0:	2e2e5550 0000002e 736d735b 75706d5f     PU......[sms_mpu
10016be0:	6665645f 5f656e69 76726573 73656369     _define_services
10016bf0:	6553095d 63697672 64207365 6e696665     ].Services defin
10016c00:	20676e69 6c696166 202c6465 73616572     ing failed, reas
10016c10:	30206e6f 00782578 736d735b 75706d5f     on 0x%x.[sms_mpu
10016c20:	6665645f 5f656e69 76726573 73656369     _define_services
10016c30:	6553095d 63697672 64207365 6e696665     ].Services defin
10016c40:	202c6465 20534d53 2055504d 646e6168     ed, SMS MPU hand
10016c50:	203a656c 00006425 736d735b 64656c5f     le: %d..[sms_led
10016c60:	6970675f 6e695f6f 095d7469 626f7270     _gpio_init].prob
10016c70:	206d656c 6c696877 65732065 6e697474     lem while settin
10016c80:	70752067 64656c20 00000030 736d735b     g up led0...[sms
10016c90:	6572705f 72757373 6f635f65 6769666e     _pressure_config
10016ca0:	5f657275 6f697067 7270095d 656c626f     ure_gpio].proble
10016cb0:	6877206d 20656c69 74746573 20676e69     m while setting 
10016cc0:	56207075 70206363 00006e69 736d735b     up Vcc pin..[sms
10016cd0:	6572705f 72757373 74735f65 75747261     _pressure_startu
10016ce0:	09095d70 72617453 676e6974 65727020     p]..Starting pre
10016cf0:	72757373 65732065 726f736e 00000000     ssure sensor....
10016d00:	736d735b 6572705f 72757373 736d5f65     [sms_pressure_ms
10016d10:	635f3835 75636c61 6574616c 6574205d     58_calculate] te
10016d20:	7265706d 72757461 203d2065 20646c25     mperature = %ld 
10016d30:	65727020 72757373 203d2065 00646c25      pressure = %ld.
10016d40:	736d735b 6572705f 72757373 6f705f65     [sms_pressure_po
10016d50:	645f6c6c 5d617461 61745309 6e697472     ll_data].Startin
10016d60:	61642067 70206174 696c6c6f 0000676e     g data polling..
10016d70:	736d735b 6572705f 72757373 736d5f65     [sms_pressure_ms
10016d80:	705f3835 5f6c6c6f 61746164 7270205d     58_poll_data] pr
10016d90:	656c626f 6572206d 6e696461 736d2067     oblem reading ms
10016da0:	64203835 00617461 736d735b 6572705f     58 data.[sms_pre
10016db0:	72757373 65645f65 656e6966 7265735f     ssure_define_ser
10016dc0:	65636976 53095d73 69767265 20736563     vices].Services 
10016dd0:	69666564 676e696e 69616620 2c64656c     defining failed,
10016de0:	61657220 206e6f73 78257830 00000000      reason 0x%x....
10016df0:	736d735b 6572705f 72757373 65645f65     [sms_pressure_de
10016e00:	656e6966 7265735f 65636976 53095d73     fine_services].S
10016e10:	69767265 20736563 69666564 2c64656e     ervices defined,
10016e20:	534d5320 65727020 72757373 61682065      SMS pressure ha
10016e30:	656c646e 6425203a 00000000 736d735b     ndle: %d....[sms
10016e40:	6175645f 6d69746c 5f317265 095d6e66     _dualtimer1_fn].
10016e50:	6c696146 74206465 6e69206f 6d207469     Failed to init m
10016e60:	20383573 69766564 00006563 736d735b     s58 device..[sms
10016e70:	6175645f 6d69746c 5f317265 095d6e66     _dualtimer1_fn].
10016e80:	6c696146 74206465 6e69206f 61697469     Failed to initia
10016e90:	657a696c 65727020 72757373 65732065     lize pressure se
10016ea0:	726f736e 6f57202e 6e696b72 6f6d2067     nsor. Working mo
10016eb0:	3d206564 54554220 5f4e4f54 4f4c4f53     de = BUTTON_SOLO
10016ec0:	00000000 736d735b 6175645f 6d69746c     ....[sms_dualtim
10016ed0:	5f317265 095d6e66 61745309 6e697472     er1_fn]..Startin
10016ee0:	65732067 726f736e 4d282073 20383553     g sensors (MS58 
10016ef0:	65736572 2e2e2974 0000002e 736d735b     reset)......[sms
10016f00:	6175645f 6d69746c 5f317265 005d6e66     _dualtimer1_fn].
10016f10:	736d735b 6175645f 6d69746c 5f317265     [sms_dualtimer1_
10016f20:	095d6e66 61745309 6e697472 65732067     fn]..Starting se
10016f30:	726f736e 73282073 74747568 20676e69     nsors (shutting 
10016f40:	6e776f64 2e2e2e29 00000000 736d735b     down).......[sms
10016f50:	6175645f 6d69746c 5f327265 005d6e66     _dualtimer2_fn].
10016f60:	2e2e2e20 69766967 7520676e 00002170      ...giving up!..
10016f70:	2e2e2e20 74696177 2e676e69 63202e2e      ...waiting... c
10016f80:	746e756f 203a7265 00006425 736d735b     ounter: %d..[sms
10016f90:	6175645f 6d69746c 5f327265 095d6e66     _dualtimer2_fn].
10016fa0:	696c4209 6e696b6e 74732067 75747261     .Blinking startu
10016fb0:	2e2e2e70 00000000 736d735b 6175645f     p.......[sms_dua
10016fc0:	6d69746c 5f327265 095d6e66 696c4209     ltimer2_fn]..Bli
10016fd0:	6e696b6e 68732067 6f647475 2e2e6e77     nking shutdown..
10016fe0:	0000002e 736d735b 6175645f 6d69746c     ....[sms_dualtim
10016ff0:	5f327265 095d6e66 776f5009 6e697265     er2_fn]..Powerin
10017000:	666f2067 2e2e2e66 00000000 1000c470     g off.......p...
10017010:	1000c47e 1000c48c 1000c49a 1000c4a8     ~...............
10017020:	1000c4b6 1000c4c4 1000c4d4 1000c4e4     ................
10017030:	1000c4f4 1000c504 1000c514 1000c524     ............$...
10017040:	1000c534 1000c544 1000c554 1000c564     4...D...T...d...
10017050:	1000c574 1000c584 1000c594 1000c5a4     t...............
10017060:	1000c5b4 1000c5c4 1000c5d4 1000c5e4     ................
10017070:	1000c5f4 1000c604 1000c614 1000c622     ............"...
10017080:	1000c630 1000c63e 1000c64c 1000c65a     0...>...L...Z...
10017090:	1000c668 1000c676 1000c684 1000c694     h...v...........
100170a0:	1000c6a4 1000c6b4 1000c6c4 1000c6d4     ................
100170b0:	1000c6e4 1000c6f4 1000c704 1000c714     ................
100170c0:	1000c724 1000c734 1000c744 1000c754     $...4...D...T...
100170d0:	1000c764 1000c774 1000c784 1000c792     d...t...........
100170e0:	1000c7a0 1000c7cc 1000c7da 1000c7e8     ................
100170f0:	1000c7f6 1000c804 1000c812 1000c820     ............ ...
10017100:	1000c82e 1000c83c 1000c84a 1000c858     ....<...J...X...
10017110:	1000c866 1000c874 1000c882 1000c890     f...t...........
10017120:	1000c89e 1000c8ac 1000c8ba 1000c8c8     ................
10017130:	1000c8d6 1000c8e4 1000c8f2 1000c900     ................
10017140:	1000c90e 1000c91c 1000c92a 1000c938     ........*...8...
10017150:	1000c946 1000c954 1000c962 1000c970     F...T...b...p...
10017160:	1000c97e 1000c98c 1000c99a 1000c9a8     ~...............
10017170:	1000c9b6 1000c9c4 1000c9d2 1000c9e0     ................
10017180:	1000c9ee 1000c9fc 1000ca0a 1000ca18     ................
10017190:	1000ca26 1000ca34 1000ca42 1000ca50     &...4...B...P...
100171a0:	1000ca5e 1000ca6c 1000ca7a 1000ca88     ^...l...z.......
100171b0:	1000ca96 1000caa4 1000cab2 1000cb4c     ............L...
100171c0:	1000cb74 1000cb9c 1000cbc4 1000ce04     t...............
100171d0:	1000cbf4 1000cc0c 1000cc84 1000cc9c     ................
100171e0:	1000cc24 1000cc3c 1000cc54 1000cc6c     $...<...T...l...
100171f0:	1000ccb4 1000cf78 1000cf78 1000cf78     ....x...x...x...
10017200:	1000cf78 1000cf78 1000cf78 1000cf78     x...x...x...x...
10017210:	1000cf78 1000cd5c 1000cd74 1000cd8c     x...\...t.......
10017220:	1000ce1a 1000cce4 1000cf78 1000cf78     ........x...x...
10017230:	1000cf78 1000cf78 1000cf78 1000cf78     x...x...x...x...
10017240:	1000cda4 1000cdbc 1000cdd4 1000cdec     ................
10017250:	1000cf78 1000cf30 1000cf48 1000cf78     x...0...H...x...
10017260:	1000cf78 1000ce46 1000ce5c 1000ce72     x...F...\...r...
10017270:	1000ce88 1000cf78 1000cf78 1000cf78     ....x...x...x...
10017280:	1000cf78 1000cf78 1000cf78 1000cf78     x...x...x...x...
10017290:	1000cf78 1000cb38 1000cb60 1000cb88     x...8...`.......
100172a0:	1000cbb0 1000cbdc 1000cccc 1000ccfc     ................
100172b0:	1000cd14 1000cd2c 1000cd44 1000ce30     ....,...D...0...
100172c0:	1000ce9e 1000cf18 1000cf60 1000d69a     ........`.......
100172d0:	1000d6ac 1000d682 1000d682 1000d682     ................
100172e0:	1000d69a 1000d682 1000d682 1000e09e     ................
100172f0:	1000e112 1000e086 1000e118 1000e08c     ................
10017300:	1000e092 1000e098 1000e7f8 1000e7f8     ................
10017310:	1000e7f8 1000e7f8 1000e7f8 1000e7f8     ................
10017320:	1000e7f8 1000e7f8 1000e7f8 1000e7f8     ................
10017330:	1000e7f8 1000e7f8 1000e7f8 1000e7f8     ................
10017340:	1000e7f8 1000e7f8 1000e7f8 1000e7f8     ................
10017350:	1000e7f8 1000e816 1000e816 1000e816     ................
10017360:	1000e816 1000e816 1000e816 1000e816     ................
10017370:	1000e816 1000e816 1000e816 1000e838     ............8...
10017380:	1000e838 1000e838 1000e838 1000e838     8...8...8...8...
10017390:	1000e838 1000e838 1000e838 1000e838     8...8...8...8...
100173a0:	1000e838 1000e868 1000e868 1000e868     8...h...h...h...
100173b0:	1000e868 1000e868 1000e868 1000e882     h...h...h.......
100173c0:	1000e882 1000e882 1000e882 1000e882     ................
100173d0:	1000e882 1000e882 1000e882 1000e882     ................
100173e0:	1000e89c 1000e89c 1000e8be 1000e8be     ................
100173f0:	1000e8d8 1000e8be 34333231 00003635     ........123456..
10017400:	efcdab00 00efcdab                       ........

10017408 <ble_mgr_gatt_server_handle>:
	...
10017420:	1000d595 1000d5bd 1000d605 00000000     ................
10017430:	65646e55 656e6966 76452064 20746e65     Undefined Event 
10017440:	65636552 64657669 00000000 6e616353     Received....Scan
10017450:	676e696e 61662020 64656c69 00000000     ning  failed....
10017460:	65766441 73697472 20676e69 6c696166     Advertising fail
10017470:	00006465 2d454c42 2055544d 6e616843     ed..BLE-MTU Chan
10017480:	2c646567 6e6f4320 7463656e 206e6f69     ged, Connection 
10017490:	646e6148 203a656c 202c6425 2077654e     Handle: %d, New 
100174a0:	756c6156 25203a65 00000064 2055544d     Value: %d...MTU 
100174b0:	6e616843 2c646567 6e6f4320 7463656e     Changed, Connect
100174c0:	206e6f69 646e6148 253a656c 4f202c64     ion Handle:%d, O
100174d0:	61726570 6e6f6974 0064253a 2055544d     peration:%d.MTU 
100174e0:	6e616843 46206567 656c6961 43202c64     Change Failed, C
100174f0:	656e6e6f 6f697463 6148206e 656c646e     onnection Handle
10017500:	2c64253a 65704f20 69746172 253a6e6f     :%d, Operation:%
10017510:	00000064 72616843 69725720 43206574     d...Char Write C
10017520:	4320646d 6c706d6f 2c657465 6e6f4320     md Complete, Con
10017530:	7463656e 206e6f69 646e6148 253a656c     nection Handle:%
10017540:	4f202c64 61726570 6e6f6974 0064253a     d, Operation:%d.
10017550:	72616843 69725720 43206574 4620646d     Char Write Cmd F
10017560:	656c6961 43202c64 656e6e6f 6f697463     ailed, Connectio
10017570:	6148206e 656c646e 2c64253a 65704f20     n Handle:%d, Ope
10017580:	69746172 253a6e6f 00000064 74617453     ration:%d...Stat
10017590:	6f4e2065 61482074 656c646e 64252064     e Not Handled %d
100175a0:	00000000 69766544 64206563 6f637369     ....Device disco
100175b0:	63656e6e 20646574 73616552 303a6e6f     nnected Reason:0
100175c0:	32302578 61482078 656c646e 2578303d     x%02x Handle=0x%
100175d0:	00000078 425f5441 435f454c 5f4e4e4f     x...AT_BLE_CONN_
100175e0:	41524150 50555f4d 45544144 00000020     PARAM_UPDATE ...
100175f0:	72636e45 69747079 66206e6f 656c6961     Encryption faile
10017600:	00000064 72636e45 69747079 63206e6f     d...Encryption c
10017610:	6c706d6f 64657465 63757320 73736563     ompleted success
10017620:	6c6c7566 00000079 20454c42 69766544     fully...BLE Devi
10017630:	6e206563 6620746f 646e756f 636e6520     ce not found enc
10017640:	74707972 206e6f69 6f666e69 00000000     ryption info....
10017650:	6f666e49 7665443a 20656369 6e756f66     Info:Device foun
10017660:	64612064 73657264 255b2073 20205d64     d address [%d]  
10017670:	30257830 30255832 30255832 30255832     0x%02X%02X%02X%0
10017680:	30255832 30255832 00205832 6f666e49     2X%02X%02X .Info
10017690:	78616d3a 6d756d69 2e6f6e20 7320666f     :maximum no.of s
100176a0:	206e6163 69766564 72206563 68636165     can device reach
100176b0:	2e2e6465 6f74532e 6e697070 63532067     ed...Stopping Sc
100176c0:	00006e61 6c696146 74206465 7473206f     an..Failed to st
100176d0:	7320706f 6e6e6163 00676e69 30257830     op scanning.0x%0
100176e0:	202c5832 00000000 4b525343 0000203a     2X, ....CSRK: ..
100176f0:	3a4b5249 00000000 72696150 20676e69     IRK:....Pairing 
10017700:	6c696166 2e2e6465 7369442e 6e6e6f63     failed...Disconn
10017710:	69746365 0000676e 63736944 656e6e6f     ecting..Disconne
10017720:	52207463 65757165 46207473 656c6961     ct Request Faile
10017730:	00000064 72696150 20676e69 636f7270     d...Pairing proc
10017740:	72756465 6f632065 656c706d 20646574     edure completed 
10017750:	63637573 66737365 796c6c75 00000000     successfully....
10017760:	20454c42 69766544 6e206563 6620746f     BLE Device not f
10017770:	646e756f 206f7420 726f7473 68742065     ound to store th
10017780:	61702065 6e697269 6e692067 00006f66     e pairing info..
10017790:	3a4b544c 00000020 72636e45 69747079     LTK: ...Encrypti
100177a0:	4e206e6f 7320746f 74726174 00006465     on Not started..
100177b0:	76616c53 65532065 69727563 52207974     Slave Security R
100177c0:	2d207165 74754120 746e6568 74616369     eq - Authenticat
100177d0:	206e6f69 6c696146 00006465 656e6547     ion Failed..Gene
100177e0:	65746172 544c2064 00203a4b 30257830     rated LTK: .0x%0
100177f0:	00205832 646e6553 20676e69 72696170     2X .Sending pair
10017800:	20676e69 70736572 65736e6f 00000000     ing response....
10017810:	72696150 71655220 74736575 41202d20     Pair Request - A
10017820:	65687475 6369746e 6f697461 6146206e     uthentication Fa
10017830:	64656c69 00000000 65746e45 68742072     iled....Enter th
10017840:	61502065 656b7373 2d362879 69676944     e Passkey(6-Digi
10017850:	69202974 6554206e 6e696d72 003a6c61     t) in Terminal:.
10017860:	206e6950 656d6954 0074756f 63736944     Pin Timeout.Disc
10017870:	656e6e6f 6e697463 2e2e2067 0000002e     onnecting ......
10017880:	61656c50 45206573 7265746e 65687420     Please Enter the
10017890:	6c6f6620 69776f6c 5020676e 2d737361      following Pass-
100178a0:	65646f63 206e6f28 6568746f 65442072     code(on other De
100178b0:	65636976 00003a29 72696150 79656b2d     vice):..Pair-key
100178c0:	70657220 6620796c 656c6961 00000064      reply failed...
100178d0:	20424f4f 74616546 20657275 20746f4e     OOB Feature Not 
100178e0:	70707573 6574726f 00000064 65746e45     supported...Ente
100178f0:	20646572 73736150 646f632d 00003a65     red Pass-code:..
10017900:	2d434e45 3a716552 6e6f4320 6148206e     ENC-Req: Conn Ha
10017910:	656c646e 76654420 20656369 6e756f46     ndle Device Foun
10017920:	64683a64 64253a6c 00000000 74736f68     d:hdl:%d....host
10017930:	76656420 20656369 76696465 00782520      device ediv %x.
10017940:	72656570 76656420 20656369 76696465     peer device ediv
10017950:	00782520 5f636e65 20716572 76696465      %x.enc_req ediv
10017960:	00782520 20656854 65646e69 73692078      %x.The index is
10017970:	00642520 2d434e45 3a716552 79654b20      %d.ENC-Req: Key
10017980:	756f4620 0000646e 72696150 20676e69      Found..Pairing 
10017990:	6f666e69 74616d72 206e6f69 7020666f     information of p
100179a0:	20726565 69766564 69206563 6f6e2073     eer device is no
100179b0:	76612074 616c6961 2e656c62 00000000     t available.....
100179c0:	61656c50 75206573 6961706e 68742072     Please unpair th
100179d0:	65642065 65636976 6f726620 6570206d     e device from pe
100179e0:	64207265 63697665 6f6d2865 656c6962     er device(mobile
100179f0:	65732029 6e697474 6d207367 20756e65     ) settings menu 
10017a00:	20646e61 72617473 61702074 6e697269     and start pairin
10017a10:	67612067 006e6961 72636e45 69747079     g again.Encrypti
10017a20:	52206e6f 65757165 52207473 796c7065     on Request Reply
10017a30:	69614620 0064656c 72636e45 69747079      Failed.Encrypti
10017a40:	52206e6f 65757165 52207473 796c7065     on Request Reply
10017a50:	00000000 656c625b 696e695f 09095d74     ....[ble_init]..
10017a60:	696e4909 6c616974 6e697a69 41532067     .Initializing SA
10017a70:	3131424d 00000000 656c625b 696e695f     MB11....[ble_ini
10017a80:	09095d74 4d415309 20313142 74696e49     t]...SAMB11 Init
10017a90:	696c6169 6974617a 66206e6f 656c6961     ialization faile
10017aa0:	00000064 656c625b 696e695f 09095d74     d...[ble_init]..
10017ab0:	656c5009 20657361 63656863 6874206b     .Please check th
10017ac0:	6f702065 20726577 20646e61 6e6e6f63     e power and conn
10017ad0:	69746365 2f206e6f 72616820 72617764     ection / hardwar
10017ae0:	6f632065 63656e6e 00726f74 52424153     e connector.SABR
10017af0:	4d532d65 00000053 69766544 6e206563     e-SMS...Device n
10017b00:	20656d61 20746573 6c696166 00006465     ame set failed..
10017b10:	656c625b 7465735f 7665645f 6e6f635f     [ble_set_dev_con
10017b20:	5d676966 44420909 64646120 73736572     fig]..BD address
10017b30:	74656720 69616620 0064656c 656c625b      get failed.[ble
10017b40:	7465735f 7665645f 6e6f635f 5d676966     _set_dev_config]
10017b50:	44420909 64644120 73736572 2578303a     ..BD Address:0x%
10017b60:	25583230 25583230 25583230 25583230     02X%02X%02X%02X%
10017b70:	25583230 2c583230 64644120 73736572     02X%02X, Address
10017b80:	70795420 64253a65 00000000 656c625b      Type:%d....[ble
10017b90:	7465735f 7665645f 6e6f635f 5d676966     _set_dev_config]
10017ba0:	74655309 454c4220 76654420 20656369     .Set BLE Device 
10017bb0:	666e6f63 72756769 6f697461 6166206e     configuration fa
10017bc0:	64656c69 00000000 656c625b 7465735f     iled....[ble_set
10017bd0:	7665645f 6e6f635f 5d676966 74655309     _dev_config].Set
10017be0:	454c4220 76654420 20656369 72646441      BLE Device Addr
10017bf0:	20737365 6c696166 00006465 6e616353     ess failed..Scan
10017c00:	676e696e 502e2e2e 7361656c 61772065     ning...Please wa
10017c10:	2e2e7469 0000002e 76616c53 65732065     it......Slave se
10017c20:	69727563 72207974 65757165 73207473     curity request s
10017c30:	65636375 75667373 0000006c 76616c53     uccessful...Slav
10017c40:	65732065 69727563 72207974 65757165     e security reque
10017c50:	66207473 656c6961 00000064 6e6e6f43     st failed...Conn
10017c60:	65746365 6f742064 65657020 65642072     ected to peer de
10017c70:	65636976 74697720 64612068 73657264     vice with addres
10017c80:	78302073 78323025 78323025 78323025     s 0x%02x%02x%02x
10017c90:	78323025 78323025 78323025 00000000     %02x%02x%02x....
10017ca0:	6e6e6f43 69746365 48206e6f 6c646e61     Connection Handl
10017cb0:	64252065 00000000 6f736552 6e69766c     e %d....Resolvin
10017cc0:	61522067 6d6f646e 64646120 73736572     g Random address
10017cd0:	63757320 73736563 00002a2a 6f736552      success**..Reso
10017ce0:	6e69766c 61522067 6d6f646e 64646120     lving Random add
10017cf0:	73736572 69616620 2a64656c 0000002a     ress failed**...
10017d00:	2078614d 626d756e 6f207265 6f632066     Max number of co
10017d10:	63656e6e 6e6f6974 61657220 64656863     nnection reached
10017d20:	6425203a 3d3d3d20 7369443e 6e6e6f63     : %d ===>Disconn
10017d30:	69746365 2e2e676e 0000002e 69766544     ecting......Devi
10017d40:	43206563 656e6e6f 6f697463 6146206e     ce Connection Fa
10017d50:	64656c69 53202d20 75746174 25203a73     iled - Status: %
10017d60:	00000064 23232323 23232323 65442323     d...##########De
10017d70:	65636976 756f4620 0000646e 23232323     vice Found..####
10017d80:	23232323 65442323 65636976 746f4e20     ######Device Not
10017d90:	756f4620 0000646e 69766544 69206563      Found..Device i
10017da0:	253a7864 00000064 4c420a0d 76452d45     dx:%d.....BLE-Ev
10017db0:	3a746e65 00006425 54544147 7265535f     ent:%d..GATT_Ser
10017dc0:	20726576 6e657645 64253a74 00000000     ver Event:%d....
10017dd0:	2d454c42 616e614d 3a726567 6e6b6e55     BLE-Manager:Unkn
10017de0:	206e776f 6e657645 78303d74 00005825     own Event=0x%X..
10017df0:	656c625b 6e616d5f 72656761 0909095d     [ble_manager]...
10017e00:	756e614d 74636166 72657275 65707320     Manufacturer spe
10017e10:	69666963 61642063 65206174 6c62616e     cific data enabl
10017e20:	00006465 5a2d571c 50532dbe 00000000     ed...W-Z.-SP....
10017e30:	20454c42 65766441 73697472 6e656d65     BLE Advertisemen
10017e40:	61642074 73206174 66207465 656c6961     t data set faile
10017e50:	00000064                                d...

10017e54 <ble_mgr_gap_handle>:
10017e54:	1000d521 1000d7d1 1000d545 1000d56d     !.......E...m...
10017e64:	00000000 1000e44d 1000d64d 1000d6e9     ....M...M.......
10017e74:	1000da2d 1000d87d 1000dc2d 1000da45     -...}...-...E...
10017e84:	1000ddb9 1000defd 1000d70d 1000e699     ................
	...
10017ea0:	1000f6de 1000f6ec 1000f730 1000f774     ........0...t...
10017eb0:	1000f786 1000f7aa 1000f7c2 756c6176     ............valu
10017ec0:	25203a65 00000075 69616d5b 09095d6e     e: %u...[main]..
10017ed0:	61570909 676e696b 2e707520 00002e2e     ..Waking up.....
10017ee0:	6e6f6420 00002165 4e2e2e2e 4f53204f      done!.....NO SO
10017ef0:	45435255 00002121 422e2e2e 00304e54     URCE!!.....BTN0.
10017f00:	69616d5b 09095d6e 72450909 20726f72     [main]....Error 
10017f10:	73206e69 625f736d 6f747475 6e665f6e     in sms_button_fn
10017f20:	00212928 422e2e2e 00314e54 4d2e2e2e     ()!....BTN1....M
10017f30:	445f5550 00594452 412e2e2e 545f4e4f     PU_DRDY....AON_T
10017f40:	52454d49 00000000 442e2e2e 544c4155     IMER.......DUALT
10017f50:	52454d49 00000031 442e2e2e 544c4155     IMER1......DUALT
10017f60:	52454d49 00000032 3f2e2e2e 0000003f     IMER2......??...
10017f70:	69616d5b 09095d6e 4c550909 2e2e2e50     [main]....ULP...
10017f80:	00000000 65656c73 61765f70 3a65756c     ....sleep_value:
10017f90:	00752520 7a7a7a20 0000007a 656d7441      %u. zzzz...Atme
10017fa0:	6f43206c 022e7072                                l Corp.

10017fa7 <CSWTCH.45>:
10017fa7:	00100402                                         ...

10017faa <CSWTCH.47>:
10017faa:	03010300 03030303 03030303 02020303              ...............

10017fb9 <client_conf_uuid>:
10017fb9:	29042902                                         .)

10017fbb <presentation_format_uuid>:
10017fbb:	29012904                                         .)

10017fbd <user_desc_uuid>:
10017fbd:	29032901                                         .)

10017fbf <server_conf_uuid>:
10017fbf:	29002903                                         .)

10017fc1 <extended_props_uuid>:
10017fc1:	28022900                                         .)

10017fc3 <include_uuid>:
10017fc3:	28032802                                         .(

10017fc5 <char_uuid>:
10017fc5:	42002803 66100136 24100135 fc100136     .(.B6..f5..$6...
10017fd5:	24100135 f0100136 24100135 fc100136     5..$6...5..$6...
10017fe5:	66100135 66100135 f0100135 fc100135     5..f5..f5...5...
10017ff5:	a8100135 a8100136 a8100136 2a100136     5...6...6...6..*
10018005:	66100136 66100135 10100135 fa100136     6..f5..f5...6...
10018015:	10100135 f0100136 10100135 fa100136     5...6...5...6...
10018025:	66100135 66100135 f0100135 fa100135     5..f5..f5...5...
10018035:	a8100135 a8100136 a8100136 b4100136     5...6...6...6...
10018045:	a0100136 fe100139 fe100138 fc100138     6...9...8...8...
10018055:	92100138 92100139 88100139 fc100139     8...9...9...9...
10018065:	92100138 88100139 92100139 fc100139     8...9...9...9...
10018075:	98100138 98100139 98100139 22100139     8...9...9...9.."
10018085:	1410013a d4100143 d4100141 d2100141     :...C...A...A...
10018095:	ec100141 ec100142 de100142 d2100142     A...B...B...B...
100180a5:	ec100141 de100142 ec100142 d2100142     A...B...B...B...
100180b5:	f4100141 f4100142 f4100142 f4100142     A...B...B...B...
100180c5:	43100144 cc000000                                D..C...

100180cc <_global_impure_ptr>:
100180cc:	100181cc                                ....

100180d0 <__sf_fake_stdin>:
	...

100180f0 <__sf_fake_stdout>:
	...

10018110 <__sf_fake_stderr>:
	...
10018130:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
10018140:	32313000 36353433 41393837 45444342     .0123456789ABCDE
10018150:	31300046 35343332 39383736 64636261     F.0123456789abcd
10018160:	00006665                                ef..

10018164 <_init>:
10018164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10018166:	46c0      	nop			; (mov r8, r8)
10018168:	bcf8      	pop	{r3, r4, r5, r6, r7}
1001816a:	bc08      	pop	{r3}
1001816c:	469e      	mov	lr, r3
1001816e:	4770      	bx	lr

10018170 <__init_array_start>:
10018170:	100080b1 	.word	0x100080b1

10018174 <_fini>:
10018174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10018176:	46c0      	nop			; (mov r8, r8)
10018178:	bcf8      	pop	{r3, r4, r5, r6, r7}
1001817a:	bc08      	pop	{r3}
1001817c:	469e      	mov	lr, r3
1001817e:	4770      	bx	lr

10018180 <__fini_array_start>:
10018180:	10008089 	.word	0x10008089
