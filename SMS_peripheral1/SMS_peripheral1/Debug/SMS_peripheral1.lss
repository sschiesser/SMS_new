
SMS_peripheral1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000103e0  10008000  10008000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000000ac  100183e0  100183e0  000183e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00002ea4  1001848c  1001848c  0001848c  2**2
                  ALLOC
  3 .stack        00001800  1001b330  1001b330  0001848c  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  0001848c  2**0
                  CONTENTS, READONLY
  5 .comment      000000b4  00000000  00000000  000184b4  2**0
                  CONTENTS, READONLY
  6 .debug_info   00050e1f  00000000  00000000  00018568  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000590b  00000000  00000000  00069387  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000ba1f  00000000  00000000  0006ec92  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000d68  00000000  00000000  0007a6b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000de0  00000000  00000000  0007b419  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00028d29  00000000  00000000  0007c1f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00018dc8  00000000  00000000  000a4f22  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00147268  00000000  00000000  000bdcea  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00002fa4  00000000  00000000  00204f54  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

10008000 <app_entry>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void app_entry(void)
{
10008000:	b510      	push	{r4, lr}

    /* Initialize the relocate segment */
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
10008002:	4b18      	ldr	r3, [pc, #96]	; (10008064 <app_entry+0x64>)
10008004:	4a18      	ldr	r2, [pc, #96]	; (10008068 <app_entry+0x68>)
10008006:	429a      	cmp	r2, r3
10008008:	d003      	beq.n	10008012 <app_entry+0x12>
        for (; pDest < &_erelocate;) {
1000800a:	4b18      	ldr	r3, [pc, #96]	; (1000806c <app_entry+0x6c>)
1000800c:	4a15      	ldr	r2, [pc, #84]	; (10008064 <app_entry+0x64>)
1000800e:	429a      	cmp	r2, r3
10008010:	d304      	bcc.n	1000801c <app_entry+0x1c>
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
10008012:	4b17      	ldr	r3, [pc, #92]	; (10008070 <app_entry+0x70>)
10008014:	4a17      	ldr	r2, [pc, #92]	; (10008074 <app_entry+0x74>)
10008016:	429a      	cmp	r2, r3
10008018:	d310      	bcc.n	1000803c <app_entry+0x3c>
1000801a:	e01e      	b.n	1000805a <app_entry+0x5a>
1000801c:	4b16      	ldr	r3, [pc, #88]	; (10008078 <app_entry+0x78>)
1000801e:	4a13      	ldr	r2, [pc, #76]	; (1000806c <app_entry+0x6c>)
10008020:	3203      	adds	r2, #3
10008022:	1ad2      	subs	r2, r2, r3
10008024:	0892      	lsrs	r2, r2, #2
10008026:	3201      	adds	r2, #1
10008028:	0092      	lsls	r2, r2, #2
    /* Initialize the relocate segment */
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
        for (; pDest < &_erelocate;) {
1000802a:	2300      	movs	r3, #0
            *pDest++ = *pSrc++;
1000802c:	480d      	ldr	r0, [pc, #52]	; (10008064 <app_entry+0x64>)
1000802e:	490e      	ldr	r1, [pc, #56]	; (10008068 <app_entry+0x68>)
10008030:	58cc      	ldr	r4, [r1, r3]
10008032:	50c4      	str	r4, [r0, r3]
10008034:	3304      	adds	r3, #4
    /* Initialize the relocate segment */
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
        for (; pDest < &_erelocate;) {
10008036:	4293      	cmp	r3, r2
10008038:	d1fa      	bne.n	10008030 <app_entry+0x30>
1000803a:	e7ea      	b.n	10008012 <app_entry+0x12>
1000803c:	4b0f      	ldr	r3, [pc, #60]	; (1000807c <app_entry+0x7c>)
1000803e:	490c      	ldr	r1, [pc, #48]	; (10008070 <app_entry+0x70>)
10008040:	3103      	adds	r1, #3
10008042:	1ac9      	subs	r1, r1, r3
10008044:	0889      	lsrs	r1, r1, #2
10008046:	3101      	adds	r1, #1
10008048:	0089      	lsls	r1, r1, #2
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
1000804a:	2300      	movs	r3, #0
        *pDest++ = 0;
1000804c:	4c09      	ldr	r4, [pc, #36]	; (10008074 <app_entry+0x74>)
1000804e:	2000      	movs	r0, #0
10008050:	191a      	adds	r2, r3, r4
10008052:	6010      	str	r0, [r2, #0]
10008054:	3304      	adds	r3, #4
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
10008056:	428b      	cmp	r3, r1
10008058:	d1fa      	bne.n	10008050 <app_entry+0x50>
        *pDest++ = 0;
    }

    /* Initialize the C library */
    __libc_init_array();
1000805a:	4b09      	ldr	r3, [pc, #36]	; (10008080 <app_entry+0x80>)
1000805c:	4798      	blx	r3

    /* Branch to main function */
    main();
1000805e:	4b09      	ldr	r3, [pc, #36]	; (10008084 <app_entry+0x84>)
10008060:	4798      	blx	r3

    /* return to BLE OS*/
    return;
}
10008062:	bd10      	pop	{r4, pc}
10008064:	100183e0 	.word	0x100183e0
10008068:	100183e0 	.word	0x100183e0
1000806c:	1001848c 	.word	0x1001848c
10008070:	1001b330 	.word	0x1001b330
10008074:	1001848c 	.word	0x1001848c
10008078:	100183e4 	.word	0x100183e4
1000807c:	10018490 	.word	0x10018490
10008080:	10015101 	.word	0x10015101
10008084:	1000f919 	.word	0x1000f919

10008088 <__do_global_dtors_aux>:
10008088:	b510      	push	{r4, lr}
1000808a:	4c06      	ldr	r4, [pc, #24]	; (100080a4 <__do_global_dtors_aux+0x1c>)
1000808c:	7823      	ldrb	r3, [r4, #0]
1000808e:	2b00      	cmp	r3, #0
10008090:	d107      	bne.n	100080a2 <__do_global_dtors_aux+0x1a>
10008092:	4b05      	ldr	r3, [pc, #20]	; (100080a8 <__do_global_dtors_aux+0x20>)
10008094:	2b00      	cmp	r3, #0
10008096:	d002      	beq.n	1000809e <__do_global_dtors_aux+0x16>
10008098:	4804      	ldr	r0, [pc, #16]	; (100080ac <__do_global_dtors_aux+0x24>)
1000809a:	e000      	b.n	1000809e <__do_global_dtors_aux+0x16>
1000809c:	bf00      	nop
1000809e:	2301      	movs	r3, #1
100080a0:	7023      	strb	r3, [r4, #0]
100080a2:	bd10      	pop	{r4, pc}
100080a4:	1001848c 	.word	0x1001848c
100080a8:	00000000 	.word	0x00000000
100080ac:	100183e0 	.word	0x100183e0

100080b0 <frame_dummy>:
100080b0:	4b08      	ldr	r3, [pc, #32]	; (100080d4 <frame_dummy+0x24>)
100080b2:	b510      	push	{r4, lr}
100080b4:	2b00      	cmp	r3, #0
100080b6:	d003      	beq.n	100080c0 <frame_dummy+0x10>
100080b8:	4907      	ldr	r1, [pc, #28]	; (100080d8 <frame_dummy+0x28>)
100080ba:	4808      	ldr	r0, [pc, #32]	; (100080dc <frame_dummy+0x2c>)
100080bc:	e000      	b.n	100080c0 <frame_dummy+0x10>
100080be:	bf00      	nop
100080c0:	4807      	ldr	r0, [pc, #28]	; (100080e0 <frame_dummy+0x30>)
100080c2:	6803      	ldr	r3, [r0, #0]
100080c4:	2b00      	cmp	r3, #0
100080c6:	d100      	bne.n	100080ca <frame_dummy+0x1a>
100080c8:	bd10      	pop	{r4, pc}
100080ca:	4b06      	ldr	r3, [pc, #24]	; (100080e4 <frame_dummy+0x34>)
100080cc:	2b00      	cmp	r3, #0
100080ce:	d0fb      	beq.n	100080c8 <frame_dummy+0x18>
100080d0:	4798      	blx	r3
100080d2:	e7f9      	b.n	100080c8 <frame_dummy+0x18>
100080d4:	00000000 	.word	0x00000000
100080d8:	10018490 	.word	0x10018490
100080dc:	100183e0 	.word	0x100183e0
100080e0:	100183e0 	.word	0x100183e0
100080e4:	00000000 	.word	0x00000000

100080e8 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
100080e8:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_clock_get_value();
100080ea:	4b09      	ldr	r3, [pc, #36]	; (10008110 <delay_init+0x28>)
100080ec:	4798      	blx	r3
100080ee:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
100080f0:	4c08      	ldr	r4, [pc, #32]	; (10008114 <delay_init+0x2c>)
100080f2:	21fa      	movs	r1, #250	; 0xfa
100080f4:	0089      	lsls	r1, r1, #2
100080f6:	47a0      	blx	r4
100080f8:	4b07      	ldr	r3, [pc, #28]	; (10008118 <delay_init+0x30>)
100080fa:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
100080fc:	4907      	ldr	r1, [pc, #28]	; (1000811c <delay_init+0x34>)
100080fe:	0028      	movs	r0, r5
10008100:	47a0      	blx	r4
10008102:	4b07      	ldr	r3, [pc, #28]	; (10008120 <delay_init+0x38>)
10008104:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
10008106:	2205      	movs	r2, #5
10008108:	4b06      	ldr	r3, [pc, #24]	; (10008124 <delay_init+0x3c>)
1000810a:	601a      	str	r2, [r3, #0]
}
1000810c:	bd70      	pop	{r4, r5, r6, pc}
1000810e:	46c0      	nop			; (mov r8, r8)
10008110:	1000c795 	.word	0x1000c795
10008114:	1001308d 	.word	0x1001308d
10008118:	100183e4 	.word	0x100183e4
1000811c:	000f4240 	.word	0x000f4240
10008120:	100183e0 	.word	0x100183e0
10008124:	e000e010 	.word	0xe000e010

10008128 <delay_cycles_ms>:
 * \brief Delay loop to delay at least n number of milliseconds
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(uint32_t n)
{
10008128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000812a:	0005      	movs	r5, r0
	while (n--) {
		printf(".");
1000812c:	4f0b      	ldr	r7, [pc, #44]	; (1000815c <delay_cycles_ms+0x34>)
		/* Divide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
1000812e:	4e0c      	ldr	r6, [pc, #48]	; (10008160 <delay_cycles_ms+0x38>)
 * \param n Number of cycles
 */
static inline void delay_cycles(const uint32_t n)
{
    if(n > 0) {
        SysTick->LOAD = n;
10008130:	4c0c      	ldr	r4, [pc, #48]	; (10008164 <delay_cycles_ms+0x3c>)
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(uint32_t n)
{
	while (n--) {
10008132:	e00d      	b.n	10008150 <delay_cycles_ms+0x28>
		printf(".");
10008134:	202e      	movs	r0, #46	; 0x2e
10008136:	47b8      	blx	r7
		/* Divide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
10008138:	6833      	ldr	r3, [r6, #0]
 *
 * \param n Number of cycles
 */
static inline void delay_cycles(const uint32_t n)
{
    if(n > 0) {
1000813a:	2b00      	cmp	r3, #0
1000813c:	d007      	beq.n	1000814e <delay_cycles_ms+0x26>
        SysTick->LOAD = n;
1000813e:	6063      	str	r3, [r4, #4]
        SysTick->VAL = 0;
10008140:	2300      	movs	r3, #0
10008142:	60a3      	str	r3, [r4, #8]
        while(!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
10008144:	2280      	movs	r2, #128	; 0x80
10008146:	0252      	lsls	r2, r2, #9
10008148:	6823      	ldr	r3, [r4, #0]
1000814a:	4213      	tst	r3, r2
1000814c:	d0fc      	beq.n	10008148 <delay_cycles_ms+0x20>
1000814e:	3d01      	subs	r5, #1
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(uint32_t n)
{
	while (n--) {
10008150:	2d00      	cmp	r5, #0
10008152:	d1ef      	bne.n	10008134 <delay_cycles_ms+0xc>
		printf(".");
		/* Divide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
	}
	printf("\n\r");
10008154:	4804      	ldr	r0, [pc, #16]	; (10008168 <delay_cycles_ms+0x40>)
10008156:	4b05      	ldr	r3, [pc, #20]	; (1000816c <delay_cycles_ms+0x44>)
10008158:	4798      	blx	r3
}
1000815a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000815c:	1001530d 	.word	0x1001530d
10008160:	100183e4 	.word	0x100183e4
10008164:	e000e010 	.word	0xe000e010
10008168:	10016338 	.word	0x10016338
1000816c:	100152d9 	.word	0x100152d9

10008170 <aon_sleep_timer_get_config_defaults>:
 * \param[out]  config  Pointer to a AON Sleep Timer module configuration structure to set
 */
void aon_sleep_timer_get_config_defaults(struct aon_sleep_timer_config *config)
{
	/* Default configuration values */
	config->wakeup = AON_SLEEP_TIMER_WAKEUP_ARM;
10008170:	2301      	movs	r3, #1
10008172:	7003      	strb	r3, [r0, #0]
	config->mode = AON_SLEEP_TIMER_SINGLE_MODE;
10008174:	7043      	strb	r3, [r0, #1]
	config->counter = 32000;
10008176:	23fa      	movs	r3, #250	; 0xfa
10008178:	01db      	lsls	r3, r3, #7
1000817a:	6043      	str	r3, [r0, #4]
}
1000817c:	4770      	bx	lr
1000817e:	46c0      	nop			; (mov r8, r8)

10008180 <aon_sleep_timer_disable>:
 */
void aon_sleep_timer_disable(void)
{
	uint32_t regval;

	AON_SLEEP_TIMER0->SINGLE_COUNT_DURATION.reg = 0;
10008180:	4b06      	ldr	r3, [pc, #24]	; (1000819c <aon_sleep_timer_disable+0x1c>)
10008182:	2200      	movs	r2, #0
10008184:	605a      	str	r2, [r3, #4]
	regval = AON_SLEEP_TIMER0->CONTROL.reg;
10008186:	681a      	ldr	r2, [r3, #0]
	regval &= ~AON_SLEEP_TIMER_CONTROL_RELOAD_ENABLE;
	regval &= ~AON_SLEEP_TIMER_CONTROL_SINGLE_COUNT_ENABLE;
10008188:	2103      	movs	r1, #3
1000818a:	438a      	bics	r2, r1
	AON_SLEEP_TIMER0->CONTROL.reg = regval;
1000818c:	601a      	str	r2, [r3, #0]

	while (AON_SLEEP_TIMER0->CONTROL.reg & (1 << 14)) {
1000818e:	0019      	movs	r1, r3
10008190:	2280      	movs	r2, #128	; 0x80
10008192:	01d2      	lsls	r2, r2, #7
10008194:	680b      	ldr	r3, [r1, #0]
10008196:	4213      	tst	r3, r2
10008198:	d1fc      	bne.n	10008194 <aon_sleep_timer_disable+0x14>
	}
}
1000819a:	4770      	bx	lr
1000819c:	4000d000 	.word	0x4000d000

100081a0 <aon_sleep_timer_clear_interrup>:
 * This flag will be cleared automatically once the IRQ
 * has been seen on the sleep clock.
 */
void aon_sleep_timer_clear_interrup(void)
{
	AON_SLEEP_TIMER0->CONTROL.reg |= AON_SLEEP_TIMER_CONTROL_IRQ_CLEAR;
100081a0:	4a02      	ldr	r2, [pc, #8]	; (100081ac <aon_sleep_timer_clear_interrup+0xc>)
100081a2:	6811      	ldr	r1, [r2, #0]
100081a4:	2310      	movs	r3, #16
100081a6:	430b      	orrs	r3, r1
100081a8:	6013      	str	r3, [r2, #0]
}
100081aa:	4770      	bx	lr
100081ac:	4000d000 	.word	0x4000d000

100081b0 <aon_sleep_timer_isr_handler>:
 *
 * Timer ISR handler.
 *
 */
static void aon_sleep_timer_isr_handler(void)
{
100081b0:	b510      	push	{r4, lr}
	aon_sleep_timer_clear_interrup();
100081b2:	4b04      	ldr	r3, [pc, #16]	; (100081c4 <aon_sleep_timer_isr_handler+0x14>)
100081b4:	4798      	blx	r3

	if (aon_sleep_timer_callback) {
100081b6:	4b04      	ldr	r3, [pc, #16]	; (100081c8 <aon_sleep_timer_isr_handler+0x18>)
100081b8:	681b      	ldr	r3, [r3, #0]
100081ba:	2b00      	cmp	r3, #0
100081bc:	d000      	beq.n	100081c0 <aon_sleep_timer_isr_handler+0x10>
		aon_sleep_timer_callback();
100081be:	4798      	blx	r3
	}
}
100081c0:	bd10      	pop	{r4, pc}
100081c2:	46c0      	nop			; (mov r8, r8)
100081c4:	100081a1 	.word	0x100081a1
100081c8:	100184a8 	.word	0x100184a8

100081cc <aon_sleep_timer_register_callback>:
 *
 * \param[in]     callback_func Pointer to callback function
 */
void aon_sleep_timer_register_callback(aon_sleep_timer_callback_t fun)
{
	aon_sleep_timer_callback = fun;
100081cc:	4b01      	ldr	r3, [pc, #4]	; (100081d4 <aon_sleep_timer_register_callback+0x8>)
100081ce:	6018      	str	r0, [r3, #0]
}
100081d0:	4770      	bx	lr
100081d2:	46c0      	nop			; (mov r8, r8)
100081d4:	100184a8 	.word	0x100184a8

100081d8 <aon_sleep_timer_unregister_callback>:
 * Unregisters and disable a callback function implemented by the user.
 *
 */
void aon_sleep_timer_unregister_callback(void)
{
	aon_sleep_timer_callback = NULL;
100081d8:	2200      	movs	r2, #0
100081da:	4b01      	ldr	r3, [pc, #4]	; (100081e0 <aon_sleep_timer_unregister_callback+0x8>)
100081dc:	601a      	str	r2, [r3, #0]
}
100081de:	4770      	bx	lr
100081e0:	100184a8 	.word	0x100184a8

100081e4 <aon_sleep_timer_init>:
 *
 * \param[in]     config       Pointer to the AON Sleep Timer configuration options struct
 *
 */
void aon_sleep_timer_init(const struct aon_sleep_timer_config *config)
{
100081e4:	b5f0      	push	{r4, r5, r6, r7, lr}
100081e6:	b083      	sub	sp, #12
	uint32_t aon_st_ctrl = 0;

	AON_PWR_SEQ0->AON_ST_WAKEUP_CTRL.reg = AON_PWR_SEQ_AON_ST_WAKEUP_CTRL_RESETVALUE;
100081e8:	2200      	movs	r2, #0
100081ea:	4b2b      	ldr	r3, [pc, #172]	; (10008298 <aon_sleep_timer_init+0xb4>)
100081ec:	731a      	strb	r2, [r3, #12]
	if (config->wakeup == AON_SLEEP_TIMER_WAKEUP_ARM_BLE) {
100081ee:	7803      	ldrb	r3, [r0, #0]
100081f0:	2b02      	cmp	r3, #2
100081f2:	d105      	bne.n	10008200 <aon_sleep_timer_init+0x1c>
		AON_PWR_SEQ0->AON_ST_WAKEUP_CTRL.reg |=
100081f4:	4a28      	ldr	r2, [pc, #160]	; (10008298 <aon_sleep_timer_init+0xb4>)
100081f6:	7b11      	ldrb	r1, [r2, #12]
100081f8:	3301      	adds	r3, #1
100081fa:	430b      	orrs	r3, r1
100081fc:	7313      	strb	r3, [r2, #12]
100081fe:	e005      	b.n	1000820c <aon_sleep_timer_init+0x28>
				AON_PWR_SEQ_AON_ST_WAKEUP_CTRL_ARM_ENABLE |
				AON_PWR_SEQ_AON_ST_WAKEUP_CTRL_BLE_ENABLE;
	} else if (config->wakeup == AON_SLEEP_TIMER_WAKEUP_ARM) {
10008200:	2b01      	cmp	r3, #1
10008202:	d103      	bne.n	1000820c <aon_sleep_timer_init+0x28>
		AON_PWR_SEQ0->AON_ST_WAKEUP_CTRL.reg |=
10008204:	4a24      	ldr	r2, [pc, #144]	; (10008298 <aon_sleep_timer_init+0xb4>)
10008206:	7b11      	ldrb	r1, [r2, #12]
10008208:	430b      	orrs	r3, r1
1000820a:	7313      	strb	r3, [r2, #12]
				AON_PWR_SEQ_AON_ST_WAKEUP_CTRL_ARM_ENABLE;
	}

	aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
1000820c:	4b23      	ldr	r3, [pc, #140]	; (1000829c <aon_sleep_timer_init+0xb8>)
1000820e:	681a      	ldr	r2, [r3, #0]
	while (aon_st_ctrl & ((1UL << 31) - 1)) {
10008210:	0053      	lsls	r3, r2, #1
10008212:	d01f      	beq.n	10008254 <aon_sleep_timer_init+0x70>
		AON_SLEEP_TIMER0->CONTROL.reg = 0;
10008214:	4d21      	ldr	r5, [pc, #132]	; (1000829c <aon_sleep_timer_init+0xb8>)
10008216:	2700      	movs	r7, #0

static void delay_cycle(uint32_t cycles)
{
	volatile uint32_t i = 0;

	for (i = 0; i < cycles*100; i++) {
10008218:	262c      	movs	r6, #44	; 0x2c
1000821a:	36ff      	adds	r6, #255	; 0xff
1000821c:	2180      	movs	r1, #128	; 0x80
1000821e:	01c9      	lsls	r1, r1, #7
				AON_PWR_SEQ_AON_ST_WAKEUP_CTRL_ARM_ENABLE;
	}

	aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
	while (aon_st_ctrl & ((1UL << 31) - 1)) {
		AON_SLEEP_TIMER0->CONTROL.reg = 0;
10008220:	602f      	str	r7, [r5, #0]

static aon_sleep_timer_callback_t aon_sleep_timer_callback = NULL;

static void delay_cycle(uint32_t cycles)
{
	volatile uint32_t i = 0;
10008222:	9701      	str	r7, [sp, #4]

	for (i = 0; i < cycles*100; i++) {
10008224:	9701      	str	r7, [sp, #4]
10008226:	9b01      	ldr	r3, [sp, #4]
10008228:	42b3      	cmp	r3, r6
1000822a:	d806      	bhi.n	1000823a <aon_sleep_timer_init+0x56>
		asm volatile ("nop");
1000822c:	46c0      	nop			; (mov r8, r8)

static void delay_cycle(uint32_t cycles)
{
	volatile uint32_t i = 0;

	for (i = 0; i < cycles*100; i++) {
1000822e:	9b01      	ldr	r3, [sp, #4]
10008230:	3301      	adds	r3, #1
10008232:	9301      	str	r3, [sp, #4]
10008234:	9b01      	ldr	r3, [sp, #4]
10008236:	42b3      	cmp	r3, r6
10008238:	d9f8      	bls.n	1000822c <aon_sleep_timer_init+0x48>
1000823a:	7844      	ldrb	r4, [r0, #1]
1000823c:	000b      	movs	r3, r1
1000823e:	2c00      	cmp	r4, #0
10008240:	d103      	bne.n	1000824a <aon_sleep_timer_init+0x66>
10008242:	2380      	movs	r3, #128	; 0x80
10008244:	009b      	lsls	r3, r3, #2
10008246:	e000      	b.n	1000824a <aon_sleep_timer_init+0x66>
	while (aon_st_ctrl & ((1UL << 31) - 1)) {
		AON_SLEEP_TIMER0->CONTROL.reg = 0;
		delay_cycle(3);
		while (aon_st_ctrl & ((config->mode == AON_SLEEP_TIMER_RELOAD_MODE) ?
				(1 << 9) : (1 << 14))) {
			aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
10008248:	682a      	ldr	r2, [r5, #0]

	aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
	while (aon_st_ctrl & ((1UL << 31) - 1)) {
		AON_SLEEP_TIMER0->CONTROL.reg = 0;
		delay_cycle(3);
		while (aon_st_ctrl & ((config->mode == AON_SLEEP_TIMER_RELOAD_MODE) ?
1000824a:	4213      	tst	r3, r2
1000824c:	d1fc      	bne.n	10008248 <aon_sleep_timer_init+0x64>
				(1 << 9) : (1 << 14))) {
			aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
		}
		aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
1000824e:	682a      	ldr	r2, [r5, #0]
		AON_PWR_SEQ0->AON_ST_WAKEUP_CTRL.reg |=
				AON_PWR_SEQ_AON_ST_WAKEUP_CTRL_ARM_ENABLE;
	}

	aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
	while (aon_st_ctrl & ((1UL << 31) - 1)) {
10008250:	0053      	lsls	r3, r2, #1
10008252:	d1e5      	bne.n	10008220 <aon_sleep_timer_init+0x3c>
			aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
		}
		aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
	}

	if (config->mode == AON_SLEEP_TIMER_RELOAD_MODE) {
10008254:	7843      	ldrb	r3, [r0, #1]
10008256:	2b00      	cmp	r3, #0
10008258:	d105      	bne.n	10008266 <aon_sleep_timer_init+0x82>
		/* Reload counter will start here */
		AON_SLEEP_TIMER0->SINGLE_COUNT_DURATION.reg = config->counter;
1000825a:	4b10      	ldr	r3, [pc, #64]	; (1000829c <aon_sleep_timer_init+0xb8>)
1000825c:	6842      	ldr	r2, [r0, #4]
1000825e:	605a      	str	r2, [r3, #4]
		AON_SLEEP_TIMER0->CONTROL.reg = AON_SLEEP_TIMER_CONTROL_RELOAD_ENABLE;
10008260:	2201      	movs	r2, #1
10008262:	601a      	str	r2, [r3, #0]
10008264:	e004      	b.n	10008270 <aon_sleep_timer_init+0x8c>
	} else {
		/* Single counter will start here */
		AON_SLEEP_TIMER0->SINGLE_COUNT_DURATION.reg = config->counter;
10008266:	4b0d      	ldr	r3, [pc, #52]	; (1000829c <aon_sleep_timer_init+0xb8>)
10008268:	6842      	ldr	r2, [r0, #4]
1000826a:	605a      	str	r2, [r3, #4]
		AON_SLEEP_TIMER0->CONTROL.reg = AON_SLEEP_TIMER_CONTROL_SINGLE_COUNT_ENABLE;
1000826c:	2202      	movs	r2, #2
1000826e:	601a      	str	r2, [r3, #0]
	}

	if (config->mode == AON_SLEEP_TIMER_SINGLE_MODE) {
10008270:	7843      	ldrb	r3, [r0, #1]
10008272:	2b01      	cmp	r3, #1
10008274:	d109      	bne.n	1000828a <aon_sleep_timer_init+0xa6>
		while ((AON_SLEEP_TIMER0->CONTROL.reg &
10008276:	4909      	ldr	r1, [pc, #36]	; (1000829c <aon_sleep_timer_init+0xb8>)
10008278:	22e0      	movs	r2, #224	; 0xe0
1000827a:	01d2      	lsls	r2, r2, #7
1000827c:	680b      	ldr	r3, [r1, #0]
1000827e:	4013      	ands	r3, r2
10008280:	4293      	cmp	r3, r2
10008282:	d1fb      	bne.n	1000827c <aon_sleep_timer_init+0x98>
				AON_SLEEP_TIMER_CONTROL_SLP_TIMER_SINGLE_COUNT_ENABLE_DLY_Msk)
				!= AON_SLEEP_TIMER_CONTROL_SLP_TIMER_SINGLE_COUNT_ENABLE_DLY_Msk) {
		}
		AON_SLEEP_TIMER0->CONTROL.reg = 0;
10008284:	2200      	movs	r2, #0
10008286:	4b05      	ldr	r3, [pc, #20]	; (1000829c <aon_sleep_timer_init+0xb8>)
10008288:	601a      	str	r2, [r3, #0]
	}

	system_register_isr(RAM_ISR_TABLE_AON_SLEEP_TIMER_INDEX, (uint32_t)aon_sleep_timer_isr_handler);
1000828a:	4905      	ldr	r1, [pc, #20]	; (100082a0 <aon_sleep_timer_init+0xbc>)
1000828c:	202b      	movs	r0, #43	; 0x2b
1000828e:	4b05      	ldr	r3, [pc, #20]	; (100082a4 <aon_sleep_timer_init+0xc0>)
10008290:	4798      	blx	r3
}
10008292:	b003      	add	sp, #12
10008294:	bdf0      	pop	{r4, r5, r6, r7, pc}
10008296:	46c0      	nop			; (mov r8, r8)
10008298:	4000e000 	.word	0x4000e000
1000829c:	4000d000 	.word	0x4000d000
100082a0:	100081b1 	.word	0x100081b1
100082a4:	1000d2d1 	.word	0x1000d2d1

100082a8 <_i2c_master_read_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
100082a8:	b5f0      	push	{r4, r5, r6, r7, lr}
100082aa:	464f      	mov	r7, r9
100082ac:	4646      	mov	r6, r8
100082ae:	b4c0      	push	{r6, r7}
100082b0:	4681      	mov	r9, r0
	Assert(config);
	
	uint16_t counter = 0;
	uint32_t status  = 0;
	I2c *const i2c_module    = (module->hw);
	uint16_t length = packet->data_length;
100082b2:	884d      	ldrh	r5, [r1, #2]

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
100082b4:	2317      	movs	r3, #23
	uint16_t counter = 0;
	uint32_t status  = 0;
	I2c *const i2c_module    = (module->hw);
	uint16_t length = packet->data_length;

	if (length == 0) {
100082b6:	2d00      	cmp	r5, #0
100082b8:	d02f      	beq.n	1000831a <_i2c_master_read_packet+0x72>
	Assert(module->hw);
	Assert(config);
	
	uint16_t counter = 0;
	uint32_t status  = 0;
	I2c *const i2c_module    = (module->hw);
100082ba:	6802      	ldr	r2, [r0, #0]
 *
 * \param[in]  i2c_module  Pointer to software module structure
 */
static inline void i2c_wait_for_idle(I2c *const i2c_module)
{
	while (i2c_module->I2C_STATUS.bit.I2C_ACTIVE) {
100082bc:	2428      	movs	r4, #40	; 0x28
100082be:	5d13      	ldrb	r3, [r2, r4]
100082c0:	07db      	lsls	r3, r3, #31
100082c2:	d4fc      	bmi.n	100082be <_i2c_master_read_packet+0x16>
	}

	i2c_wait_for_idle(i2c_module);

	/* Flush the FIFO */
	i2c_module->I2C_FLUSH.reg = 1;
100082c4:	2301      	movs	r3, #1
100082c6:	2434      	movs	r4, #52	; 0x34
100082c8:	5513      	strb	r3, [r2, r4]

	/* Enable I2C on bus (start condition). */
	i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_1;
100082ca:	3c14      	subs	r4, #20
100082cc:	5513      	strb	r3, [r2, r4]
	/* Address I2C slave in case of Master mode enabled. */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 |
100082ce:	880b      	ldrh	r3, [r1, #0]
100082d0:	005b      	lsls	r3, r3, #1
100082d2:	2402      	movs	r4, #2
100082d4:	34ff      	adds	r4, #255	; 0xff
100082d6:	4323      	orrs	r3, r4
100082d8:	b29b      	uxth	r3, r3
100082da:	8013      	strh	r3, [r2, #0]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(config);
	
	uint16_t counter = 0;
100082dc:	2400      	movs	r4, #0
	/* Address I2C slave in case of Master mode enabled. */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 |
			(packet->address << 1) | I2C_TRANSFER_READ;
	do {
		status = i2c_module->RECEIVE_STATUS.reg;
		if (status & I2C_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY)
100082de:	2301      	movs	r3, #1
100082e0:	4698      	mov	r8, r3
	i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_1;
	/* Address I2C slave in case of Master mode enabled. */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 |
			(packet->address << 1) | I2C_TRANSFER_READ;
	do {
		status = i2c_module->RECEIVE_STATUS.reg;
100082e2:	7b13      	ldrb	r3, [r2, #12]
100082e4:	b2db      	uxtb	r3, r3
		if (status & I2C_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY)
100082e6:	4640      	mov	r0, r8
100082e8:	4218      	tst	r0, r3
100082ea:	d006      	beq.n	100082fa <_i2c_master_read_packet+0x52>
			packet->data[counter++] = i2c_module->RECEIVE_DATA.reg;
100082ec:	1c67      	adds	r7, r4, #1
100082ee:	7910      	ldrb	r0, [r2, #4]
100082f0:	4684      	mov	ip, r0
100082f2:	6848      	ldr	r0, [r1, #4]
100082f4:	4666      	mov	r6, ip
100082f6:	5506      	strb	r6, [r0, r4]
100082f8:	b2bc      	uxth	r4, r7
	} while (counter < length); 
100082fa:	42ac      	cmp	r4, r5
100082fc:	d3f1      	bcc.n	100082e2 <_i2c_master_read_packet+0x3a>

	/* Now check whether the core has sent the data out and free the bus. */
	while (!(status & I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY)) {
100082fe:	06db      	lsls	r3, r3, #27
10008300:	d403      	bmi.n	1000830a <_i2c_master_read_packet+0x62>
10008302:	2110      	movs	r1, #16
		status = i2c_module->TRANSMIT_STATUS.reg;
10008304:	7a13      	ldrb	r3, [r2, #8]
		if (status & I2C_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY)
			packet->data[counter++] = i2c_module->RECEIVE_DATA.reg;
	} while (counter < length); 

	/* Now check whether the core has sent the data out and free the bus. */
	while (!(status & I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY)) {
10008306:	420b      	tst	r3, r1
10008308:	d0fc      	beq.n	10008304 <_i2c_master_read_packet+0x5c>
		status = i2c_module->TRANSMIT_STATUS.reg;
	}

	/* Send stop condition. */
	if (!module->no_stop) {
1000830a:	464b      	mov	r3, r9
1000830c:	7959      	ldrb	r1, [r3, #5]
		i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_0;
	}

	return STATUS_OK;
1000830e:	2300      	movs	r3, #0
	while (!(status & I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY)) {
		status = i2c_module->TRANSMIT_STATUS.reg;
	}

	/* Send stop condition. */
	if (!module->no_stop) {
10008310:	2900      	cmp	r1, #0
10008312:	d102      	bne.n	1000831a <_i2c_master_read_packet+0x72>
		i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_0;
10008314:	3320      	adds	r3, #32
10008316:	54d1      	strb	r1, [r2, r3]
	}

	return STATUS_OK;
10008318:	2300      	movs	r3, #0
}
1000831a:	0018      	movs	r0, r3
1000831c:	bc0c      	pop	{r2, r3}
1000831e:	4690      	mov	r8, r2
10008320:	4699      	mov	r9, r3
10008322:	bdf0      	pop	{r4, r5, r6, r7, pc}

10008324 <_i2c_master_write_packet>:
 * \retval STATUS_OK                    The packet was write successfully
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
10008324:	b5f0      	push	{r4, r5, r6, r7, lr}
10008326:	b083      	sub	sp, #12
10008328:	4684      	mov	ip, r0
1000832a:	0008      	movs	r0, r1
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(packet);
	
	I2c *const i2c_module = (module->hw);
1000832c:	4663      	mov	r3, ip
1000832e:	681c      	ldr	r4, [r3, #0]
	volatile uint16_t counter = 0;
10008330:	2200      	movs	r2, #0
10008332:	466b      	mov	r3, sp
10008334:	80da      	strh	r2, [r3, #6]
	uint32_t status  = 0;

	uint16_t length = packet->data_length;
10008336:	8849      	ldrh	r1, [r1, #2]
10008338:	3228      	adds	r2, #40	; 0x28
1000833a:	5ca3      	ldrb	r3, [r4, r2]
1000833c:	07db      	lsls	r3, r3, #31
1000833e:	d4fc      	bmi.n	1000833a <_i2c_master_write_packet+0x16>

	i2c_wait_for_idle(i2c_module);

	/* Flush the FIFO */
	i2c_module->I2C_FLUSH.reg = 1;
10008340:	2301      	movs	r3, #1
10008342:	2234      	movs	r2, #52	; 0x34
10008344:	54a3      	strb	r3, [r4, r2]

	/* Enable I2C on bus (start condition) */
	i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_1;
10008346:	3a14      	subs	r2, #20
10008348:	54a3      	strb	r3, [r4, r2]

	/* Address I2C slave in case of Master mode enabled */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 | 
1000834a:	8803      	ldrh	r3, [r0, #0]
1000834c:	005b      	lsls	r3, r3, #1
1000834e:	32e0      	adds	r2, #224	; 0xe0
10008350:	4313      	orrs	r3, r2
10008352:	b29b      	uxth	r3, r3
10008354:	8023      	strh	r3, [r4, #0]
			((packet->address) << 1) | I2C_TRANSFER_WRITE;
	do {
		status = i2c_module->TRANSMIT_STATUS.reg;
		if (status & I2C_TRANSMIT_STATUS_TX_FIFO_NOT_FULL_Msk) {
10008356:	2701      	movs	r7, #1
			i2c_module->TRANSMIT_DATA.reg = packet->data[counter++];
10008358:	466b      	mov	r3, sp
1000835a:	1d9d      	adds	r5, r3, #6

	/* Address I2C slave in case of Master mode enabled */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 | 
			((packet->address) << 1) | I2C_TRANSFER_WRITE;
	do {
		status = i2c_module->TRANSMIT_STATUS.reg;
1000835c:	7a23      	ldrb	r3, [r4, #8]
1000835e:	b2db      	uxtb	r3, r3
		if (status & I2C_TRANSMIT_STATUS_TX_FIFO_NOT_FULL_Msk) {
10008360:	421f      	tst	r7, r3
10008362:	d007      	beq.n	10008374 <_i2c_master_write_packet+0x50>
			i2c_module->TRANSMIT_DATA.reg = packet->data[counter++];
10008364:	882a      	ldrh	r2, [r5, #0]
10008366:	b292      	uxth	r2, r2
10008368:	1c56      	adds	r6, r2, #1
1000836a:	b2b6      	uxth	r6, r6
1000836c:	802e      	strh	r6, [r5, #0]
1000836e:	6846      	ldr	r6, [r0, #4]
10008370:	5cb2      	ldrb	r2, [r6, r2]
10008372:	8022      	strh	r2, [r4, #0]
		}
	} while (counter < length); 
10008374:	882a      	ldrh	r2, [r5, #0]
10008376:	b292      	uxth	r2, r2
10008378:	4291      	cmp	r1, r2
1000837a:	d8ef      	bhi.n	1000835c <_i2c_master_write_packet+0x38>

	/* Now check whether the core has sent the data out and free the bus */
	while (!(status & I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY)) {
1000837c:	06db      	lsls	r3, r3, #27
1000837e:	d403      	bmi.n	10008388 <_i2c_master_write_packet+0x64>
10008380:	2210      	movs	r2, #16
			status = i2c_module->TRANSMIT_STATUS.reg;
10008382:	7a23      	ldrb	r3, [r4, #8]
			i2c_module->TRANSMIT_DATA.reg = packet->data[counter++];
		}
	} while (counter < length); 

	/* Now check whether the core has sent the data out and free the bus */
	while (!(status & I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY)) {
10008384:	4213      	tst	r3, r2
10008386:	d0fc      	beq.n	10008382 <_i2c_master_write_packet+0x5e>
			status = i2c_module->TRANSMIT_STATUS.reg;
	}

	/* Send stop condition */
	if (!module->no_stop) {
10008388:	4663      	mov	r3, ip
1000838a:	795b      	ldrb	r3, [r3, #5]
1000838c:	2b00      	cmp	r3, #0
1000838e:	d102      	bne.n	10008396 <_i2c_master_write_packet+0x72>
		i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_0;
10008390:	2200      	movs	r2, #0
10008392:	3320      	adds	r3, #32
10008394:	54e2      	strb	r2, [r4, r3]
	}

	return STATUS_OK;
}
10008396:	2000      	movs	r0, #0
10008398:	b003      	add	sp, #12
1000839a:	bdf0      	pop	{r4, r5, r6, r7, pc}

1000839c <i2c_master_get_config_defaults>:
		struct i2c_master_config *const config)
{
	/* Sanity check */
	Assert(config);
	
	config->clock_source    = I2C_CLK_INPUT_3;
1000839c:	2303      	movs	r3, #3
1000839e:	7003      	strb	r3, [r0, #0]
	config->clock_divider   = 0x10;
100083a0:	330d      	adds	r3, #13
100083a2:	8043      	strh	r3, [r0, #2]
	config->pin_number_pad0 = PIN_LP_GPIO_8;
100083a4:	3b08      	subs	r3, #8
100083a6:	6043      	str	r3, [r0, #4]
	config->pin_number_pad1 = PIN_LP_GPIO_9;
100083a8:	3301      	adds	r3, #1
100083aa:	60c3      	str	r3, [r0, #12]
	config->pinmux_sel_pad0 = MUX_LP_GPIO_8_I2C0_SDA;
100083ac:	3b07      	subs	r3, #7
100083ae:	6083      	str	r3, [r0, #8]
	config->pinmux_sel_pad1 = MUX_LP_GPIO_9_I2C0_SCL;
100083b0:	6103      	str	r3, [r0, #16]
}
100083b2:	4770      	bx	lr

100083b4 <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		I2c *const hw,
		const struct i2c_master_config *const config)
{
100083b4:	b570      	push	{r4, r5, r6, lr}
100083b6:	0004      	movs	r4, r0
100083b8:	0015      	movs	r5, r2
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(config);
	
	module->hw = hw;
100083ba:	6001      	str	r1, [r0, #0]

	/* Sanity check arguments. */
	if ((module == NULL) || (config == NULL))
100083bc:	2800      	cmp	r0, #0
100083be:	d026      	beq.n	1000840e <i2c_master_init+0x5a>
100083c0:	2a00      	cmp	r2, #0
100083c2:	d026      	beq.n	10008412 <i2c_master_init+0x5e>
100083c4:	2228      	movs	r2, #40	; 0x28
100083c6:	5c8b      	ldrb	r3, [r1, r2]
100083c8:	07db      	lsls	r3, r3, #31
100083ca:	d4fc      	bmi.n	100083c6 <i2c_master_init+0x12>
 *
 */
static inline void i2c_disable(I2c *const i2c_module)
{
	i2c_wait_for_idle(i2c_module);
	i2c_module->I2C_MODULE_ENABLE.reg = 0;
100083cc:	2300      	movs	r3, #0
100083ce:	750b      	strb	r3, [r1, #20]
		return STATUS_ERR_INVALID_ARG;

	i2c_disable(module->hw);
	if (module->hw == I2C0) {
100083d0:	6823      	ldr	r3, [r4, #0]
100083d2:	4a11      	ldr	r2, [pc, #68]	; (10008418 <i2c_master_init+0x64>)
100083d4:	4293      	cmp	r3, r2
100083d6:	d103      	bne.n	100083e0 <i2c_master_init+0x2c>
		system_peripheral_reset(PERIPHERAL_I2C0_CORE);
100083d8:	2003      	movs	r0, #3
100083da:	4b10      	ldr	r3, [pc, #64]	; (1000841c <i2c_master_init+0x68>)
100083dc:	4798      	blx	r3
100083de:	e006      	b.n	100083ee <i2c_master_init+0x3a>
	} else if (module->hw == I2C1) {
		system_peripheral_reset(PERIPHERAL_I2C1_CORE);
	} else {
		return STATUS_ERR_INVALID_ARG;
100083e0:	2017      	movs	r0, #23
		return STATUS_ERR_INVALID_ARG;

	i2c_disable(module->hw);
	if (module->hw == I2C0) {
		system_peripheral_reset(PERIPHERAL_I2C0_CORE);
	} else if (module->hw == I2C1) {
100083e2:	4a0f      	ldr	r2, [pc, #60]	; (10008420 <i2c_master_init+0x6c>)
100083e4:	4293      	cmp	r3, r2
100083e6:	d115      	bne.n	10008414 <i2c_master_init+0x60>
		system_peripheral_reset(PERIPHERAL_I2C1_CORE);
100083e8:	3002      	adds	r0, #2
100083ea:	4b0c      	ldr	r3, [pc, #48]	; (1000841c <i2c_master_init+0x68>)
100083ec:	4798      	blx	r3
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(config);

	I2c *const i2c_module = (module->hw);
100083ee:	6824      	ldr	r4, [r4, #0]

	/* Set the pinmux for this i2c module. */
	gpio_pinmux_cofiguration(config->pin_number_pad0, (uint16_t)(config->pinmux_sel_pad0));
100083f0:	8929      	ldrh	r1, [r5, #8]
100083f2:	7928      	ldrb	r0, [r5, #4]
100083f4:	4e0b      	ldr	r6, [pc, #44]	; (10008424 <i2c_master_init+0x70>)
100083f6:	47b0      	blx	r6
	gpio_pinmux_cofiguration(config->pin_number_pad1, (uint16_t)(config->pinmux_sel_pad1));
100083f8:	8a29      	ldrh	r1, [r5, #16]
100083fa:	7b28      	ldrb	r0, [r5, #12]
100083fc:	47b0      	blx	r6
	/* Set clock. */
	i2c_module->CLOCK_SOURCE_SELECT.reg = config->clock_source;
100083fe:	782b      	ldrb	r3, [r5, #0]
10008400:	7423      	strb	r3, [r4, #16]
	i2c_module->I2C_CLK_DIVIDER.reg = I2C_CLK_DIVIDER_I2C_DIVIDE_RATIO(config->clock_divider);
10008402:	886b      	ldrh	r3, [r5, #2]
10008404:	8323      	strh	r3, [r4, #24]
	/* Enable master mode. */
	i2c_module->I2C_MASTER_MODE.reg = I2C_MASTER_MODE_MASTER_ENABLE_1;
10008406:	2301      	movs	r3, #1
10008408:	7723      	strb	r3, [r4, #28]
#endif

	/* Set config and return status. */
	_i2c_master_set_config(module, config);

	return STATUS_OK;
1000840a:	2000      	movs	r0, #0
1000840c:	e002      	b.n	10008414 <i2c_master_init+0x60>
	
	module->hw = hw;

	/* Sanity check arguments. */
	if ((module == NULL) || (config == NULL))
		return STATUS_ERR_INVALID_ARG;
1000840e:	2017      	movs	r0, #23
10008410:	e000      	b.n	10008414 <i2c_master_init+0x60>
10008412:	2017      	movs	r0, #23

	/* Set config and return status. */
	_i2c_master_set_config(module, config);

	return STATUS_OK;
}
10008414:	bd70      	pop	{r4, r5, r6, pc}
10008416:	46c0      	nop			; (mov r8, r8)
10008418:	40003000 	.word	0x40003000
1000841c:	1000ce69 	.word	0x1000ce69
10008420:	40003400 	.word	0x40003400
10008424:	1000c3f1 	.word	0x1000c3f1

10008428 <i2c_master_read_packet_wait>:
 * \retval STATUS_BUSY                  If module has a pending request.
 */
enum status_code i2c_master_read_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
10008428:	b510      	push	{r4, lr}
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL))
1000842a:	2800      	cmp	r0, #0
1000842c:	d008      	beq.n	10008440 <i2c_master_read_packet_wait+0x18>
		return STATUS_ERR_INVALID_ARG;
1000842e:	2317      	movs	r3, #23
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL))
10008430:	2900      	cmp	r1, #0
10008432:	d006      	beq.n	10008442 <i2c_master_read_packet_wait+0x1a>
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->no_stop = false;
10008434:	2300      	movs	r3, #0
10008436:	7143      	strb	r3, [r0, #5]

	return _i2c_master_read_packet(module, packet);
10008438:	4b03      	ldr	r3, [pc, #12]	; (10008448 <i2c_master_read_packet_wait+0x20>)
1000843a:	4798      	blx	r3
1000843c:	0003      	movs	r3, r0
1000843e:	e000      	b.n	10008442 <i2c_master_read_packet_wait+0x1a>
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL))
		return STATUS_ERR_INVALID_ARG;
10008440:	2317      	movs	r3, #23
#endif

	module->no_stop = false;

	return _i2c_master_read_packet(module, packet);
}
10008442:	0018      	movs	r0, r3
10008444:	bd10      	pop	{r4, pc}
10008446:	46c0      	nop			; (mov r8, r8)
10008448:	100082a9 	.word	0x100082a9

1000844c <i2c_master_write_packet_wait>:
 * \retval STATUS_BUSY                  If module has a pending request.
 */
enum status_code i2c_master_write_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
1000844c:	b510      	push	{r4, lr}
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if ((module == NULL) || (packet == NULL)) {
1000844e:	2800      	cmp	r0, #0
10008450:	d008      	beq.n	10008464 <i2c_master_write_packet_wait+0x18>
		return STATUS_ERR_INVALID_ARG;
10008452:	2317      	movs	r3, #23
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if ((module == NULL) || (packet == NULL)) {
10008454:	2900      	cmp	r1, #0
10008456:	d006      	beq.n	10008466 <i2c_master_write_packet_wait+0x1a>
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->no_stop = false;
10008458:	2300      	movs	r3, #0
1000845a:	7143      	strb	r3, [r0, #5]

	return _i2c_master_write_packet(module, packet);
1000845c:	4b03      	ldr	r3, [pc, #12]	; (1000846c <i2c_master_write_packet_wait+0x20>)
1000845e:	4798      	blx	r3
10008460:	0003      	movs	r3, r0
10008462:	e000      	b.n	10008466 <i2c_master_write_packet_wait+0x1a>
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if ((module == NULL) || (packet == NULL)) {
		return STATUS_ERR_INVALID_ARG;
10008464:	2317      	movs	r3, #23
#endif

	module->no_stop = false;

	return _i2c_master_write_packet(module, packet);
}
10008466:	0018      	movs	r0, r3
10008468:	bd10      	pop	{r4, pc}
1000846a:	46c0      	nop			; (mov r8, r8)
1000846c:	10008325 	.word	0x10008325

10008470 <i2c_master_write_packet_wait_no_stop>:
 * \retval STATUS_BUSY                  If module has a pending request.
 */
enum status_code i2c_master_write_packet_wait_no_stop(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
10008470:	b510      	push	{r4, lr}
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL)) {
10008472:	2800      	cmp	r0, #0
10008474:	d008      	beq.n	10008488 <i2c_master_write_packet_wait_no_stop+0x18>
		return STATUS_ERR_INVALID_ARG;
10008476:	2317      	movs	r3, #23
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL)) {
10008478:	2900      	cmp	r1, #0
1000847a:	d006      	beq.n	1000848a <i2c_master_write_packet_wait_no_stop+0x1a>
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->no_stop = true;
1000847c:	3b16      	subs	r3, #22
1000847e:	7143      	strb	r3, [r0, #5]

	return _i2c_master_write_packet(module, packet);
10008480:	4b03      	ldr	r3, [pc, #12]	; (10008490 <i2c_master_write_packet_wait_no_stop+0x20>)
10008482:	4798      	blx	r3
10008484:	0003      	movs	r3, r0
10008486:	e000      	b.n	1000848a <i2c_master_write_packet_wait_no_stop+0x1a>
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL)) {
		return STATUS_ERR_INVALID_ARG;
10008488:	2317      	movs	r3, #23
#endif

	module->no_stop = true;

	return _i2c_master_write_packet(module, packet);
}
1000848a:	0018      	movs	r0, r3
1000848c:	bd10      	pop	{r4, pc}
1000848e:	46c0      	nop			; (mov r8, r8)
10008490:	10008325 	.word	0x10008325

10008494 <set_int_enable>:
 *  interrupt is used.
 *  @param[in]  enable      1 to enable interrupt.
 *  @return     0 if successful.
 */
static int set_int_enable(unsigned char enable)
{
10008494:	b510      	push	{r4, lr}
10008496:	b082      	sub	sp, #8
    unsigned char tmp;

    if (st.chip_cfg.dmp_on) {
10008498:	2324      	movs	r3, #36	; 0x24
1000849a:	4a25      	ldr	r2, [pc, #148]	; (10008530 <set_int_enable+0x9c>)
1000849c:	5cd3      	ldrb	r3, [r2, r3]
1000849e:	2b00      	cmp	r3, #0
100084a0:	d019      	beq.n	100084d6 <set_int_enable+0x42>
        if (enable)
100084a2:	2800      	cmp	r0, #0
100084a4:	d003      	beq.n	100084ae <set_int_enable+0x1a>
            tmp = BIT_DMP_INT_EN;
100084a6:	2202      	movs	r2, #2
100084a8:	466b      	mov	r3, sp
100084aa:	71da      	strb	r2, [r3, #7]
100084ac:	e002      	b.n	100084b4 <set_int_enable+0x20>
        else
            tmp = 0x00;
100084ae:	2200      	movs	r2, #0
100084b0:	466b      	mov	r3, sp
100084b2:	71da      	strb	r2, [r3, #7]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
100084b4:	4b1e      	ldr	r3, [pc, #120]	; (10008530 <set_int_enable+0x9c>)
100084b6:	681a      	ldr	r2, [r3, #0]
100084b8:	7c51      	ldrb	r1, [r2, #17]
100084ba:	685b      	ldr	r3, [r3, #4]
100084bc:	7818      	ldrb	r0, [r3, #0]
100084be:	466b      	mov	r3, sp
100084c0:	3307      	adds	r3, #7
100084c2:	2201      	movs	r2, #1
100084c4:	4c1b      	ldr	r4, [pc, #108]	; (10008534 <set_int_enable+0xa0>)
100084c6:	47a0      	blx	r4
100084c8:	2800      	cmp	r0, #0
100084ca:	d127      	bne.n	1000851c <set_int_enable+0x88>
            return -1;
        st.chip_cfg.int_enable = tmp;
100084cc:	466b      	mov	r3, sp
100084ce:	79da      	ldrb	r2, [r3, #7]
100084d0:	4b17      	ldr	r3, [pc, #92]	; (10008530 <set_int_enable+0x9c>)
100084d2:	745a      	strb	r2, [r3, #17]
100084d4:	e02a      	b.n	1000852c <set_int_enable+0x98>
    } else {
        if (!st.chip_cfg.sensors)
100084d6:	4b16      	ldr	r3, [pc, #88]	; (10008530 <set_int_enable+0x9c>)
100084d8:	7a9b      	ldrb	r3, [r3, #10]
100084da:	2b00      	cmp	r3, #0
100084dc:	d021      	beq.n	10008522 <set_int_enable+0x8e>
            return -1;
        if (enable && st.chip_cfg.int_enable)
100084de:	2800      	cmp	r0, #0
100084e0:	d008      	beq.n	100084f4 <set_int_enable+0x60>
100084e2:	4b13      	ldr	r3, [pc, #76]	; (10008530 <set_int_enable+0x9c>)
100084e4:	7c5b      	ldrb	r3, [r3, #17]
            return 0;
100084e6:	2000      	movs	r0, #0
            return -1;
        st.chip_cfg.int_enable = tmp;
    } else {
        if (!st.chip_cfg.sensors)
            return -1;
        if (enable && st.chip_cfg.int_enable)
100084e8:	2b00      	cmp	r3, #0
100084ea:	d11f      	bne.n	1000852c <set_int_enable+0x98>
            return 0;
        if (enable)
            tmp = BIT_DATA_RDY_EN;
100084ec:	2201      	movs	r2, #1
100084ee:	466b      	mov	r3, sp
100084f0:	71da      	strb	r2, [r3, #7]
100084f2:	e002      	b.n	100084fa <set_int_enable+0x66>
        else
            tmp = 0x00;
100084f4:	2200      	movs	r2, #0
100084f6:	466b      	mov	r3, sp
100084f8:	71da      	strb	r2, [r3, #7]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
100084fa:	4b0d      	ldr	r3, [pc, #52]	; (10008530 <set_int_enable+0x9c>)
100084fc:	681a      	ldr	r2, [r3, #0]
100084fe:	7c51      	ldrb	r1, [r2, #17]
10008500:	685b      	ldr	r3, [r3, #4]
10008502:	7818      	ldrb	r0, [r3, #0]
10008504:	466b      	mov	r3, sp
10008506:	3307      	adds	r3, #7
10008508:	2201      	movs	r2, #1
1000850a:	4c0a      	ldr	r4, [pc, #40]	; (10008534 <set_int_enable+0xa0>)
1000850c:	47a0      	blx	r4
1000850e:	2800      	cmp	r0, #0
10008510:	d10a      	bne.n	10008528 <set_int_enable+0x94>
            return -1;
        st.chip_cfg.int_enable = tmp;
10008512:	466b      	mov	r3, sp
10008514:	79da      	ldrb	r2, [r3, #7]
10008516:	4b06      	ldr	r3, [pc, #24]	; (10008530 <set_int_enable+0x9c>)
10008518:	745a      	strb	r2, [r3, #17]
1000851a:	e007      	b.n	1000852c <set_int_enable+0x98>
        if (enable)
            tmp = BIT_DMP_INT_EN;
        else
            tmp = 0x00;
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
            return -1;
1000851c:	2001      	movs	r0, #1
1000851e:	4240      	negs	r0, r0
10008520:	e004      	b.n	1000852c <set_int_enable+0x98>
        st.chip_cfg.int_enable = tmp;
    } else {
        if (!st.chip_cfg.sensors)
            return -1;
10008522:	2001      	movs	r0, #1
10008524:	4240      	negs	r0, r0
10008526:	e001      	b.n	1000852c <set_int_enable+0x98>
        if (enable)
            tmp = BIT_DATA_RDY_EN;
        else
            tmp = 0x00;
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
            return -1;
10008528:	2001      	movs	r0, #1
1000852a:	4240      	negs	r0, r0
        st.chip_cfg.int_enable = tmp;
    }
    return 0;
}
1000852c:	b002      	add	sp, #8
1000852e:	bd10      	pop	{r4, pc}
10008530:	100183e8 	.word	0x100183e8
10008534:	1000aaad 	.word	0x1000aaad

10008538 <mpu_get_temperature>:
 *  @param[out] data        Data in q16 format.
 *  @param[out] timestamp   Timestamp in milliseconds. Null if not needed.
 *  @return     0 if successful.
 */
int mpu_get_temperature(long *data, unsigned long *timestamp)
{
10008538:	b5f0      	push	{r4, r5, r6, r7, lr}
1000853a:	b085      	sub	sp, #20
1000853c:	0007      	movs	r7, r0
1000853e:	000e      	movs	r6, r1
    unsigned char tmp[2];
    short raw;

    if (!(st.chip_cfg.sensors))
10008540:	4b21      	ldr	r3, [pc, #132]	; (100085c8 <mpu_get_temperature+0x90>)
10008542:	7a9b      	ldrb	r3, [r3, #10]
10008544:	2b00      	cmp	r3, #0
10008546:	d035      	beq.n	100085b4 <mpu_get_temperature+0x7c>
        return -1;

    if (i2c_read(st.hw->addr, st.reg->temp, 2, tmp))
10008548:	4b1f      	ldr	r3, [pc, #124]	; (100085c8 <mpu_get_temperature+0x90>)
1000854a:	681a      	ldr	r2, [r3, #0]
1000854c:	7c11      	ldrb	r1, [r2, #16]
1000854e:	685b      	ldr	r3, [r3, #4]
10008550:	7818      	ldrb	r0, [r3, #0]
10008552:	ab03      	add	r3, sp, #12
10008554:	2202      	movs	r2, #2
10008556:	4c1d      	ldr	r4, [pc, #116]	; (100085cc <mpu_get_temperature+0x94>)
10008558:	47a0      	blx	r4
1000855a:	9001      	str	r0, [sp, #4]
1000855c:	2800      	cmp	r0, #0
1000855e:	d12d      	bne.n	100085bc <mpu_get_temperature+0x84>
        return -1;
    raw = (tmp[0] << 8) | tmp[1];
10008560:	ab03      	add	r3, sp, #12
10008562:	781c      	ldrb	r4, [r3, #0]
10008564:	0224      	lsls	r4, r4, #8
10008566:	785b      	ldrb	r3, [r3, #1]
10008568:	431c      	orrs	r4, r3
1000856a:	b224      	sxth	r4, r4
    if (timestamp)
1000856c:	2e00      	cmp	r6, #0
1000856e:	d002      	beq.n	10008576 <mpu_get_temperature+0x3e>
        get_ms(timestamp);
10008570:	0030      	movs	r0, r6
10008572:	4b17      	ldr	r3, [pc, #92]	; (100085d0 <mpu_get_temperature+0x98>)
10008574:	4798      	blx	r3

    data[0] = (long)((35 + ((raw - (float)st.hw->temp_offset) / st.hw->temp_sens)) * 65536L);
10008576:	4b14      	ldr	r3, [pc, #80]	; (100085c8 <mpu_get_temperature+0x90>)
10008578:	685d      	ldr	r5, [r3, #4]
1000857a:	4e16      	ldr	r6, [pc, #88]	; (100085d4 <mpu_get_temperature+0x9c>)
1000857c:	0020      	movs	r0, r4
1000857e:	47b0      	blx	r6
10008580:	1c04      	adds	r4, r0, #0
10008582:	2308      	movs	r3, #8
10008584:	5ee8      	ldrsh	r0, [r5, r3]
10008586:	47b0      	blx	r6
10008588:	1c01      	adds	r1, r0, #0
1000858a:	1c20      	adds	r0, r4, #0
1000858c:	4b12      	ldr	r3, [pc, #72]	; (100085d8 <mpu_get_temperature+0xa0>)
1000858e:	4798      	blx	r3
10008590:	1c04      	adds	r4, r0, #0
10008592:	88e8      	ldrh	r0, [r5, #6]
10008594:	47b0      	blx	r6
10008596:	1c01      	adds	r1, r0, #0
10008598:	1c20      	adds	r0, r4, #0
1000859a:	4b10      	ldr	r3, [pc, #64]	; (100085dc <mpu_get_temperature+0xa4>)
1000859c:	4798      	blx	r3
1000859e:	4910      	ldr	r1, [pc, #64]	; (100085e0 <mpu_get_temperature+0xa8>)
100085a0:	4b10      	ldr	r3, [pc, #64]	; (100085e4 <mpu_get_temperature+0xac>)
100085a2:	4798      	blx	r3
100085a4:	218f      	movs	r1, #143	; 0x8f
100085a6:	05c9      	lsls	r1, r1, #23
100085a8:	4b0f      	ldr	r3, [pc, #60]	; (100085e8 <mpu_get_temperature+0xb0>)
100085aa:	4798      	blx	r3
100085ac:	4b0f      	ldr	r3, [pc, #60]	; (100085ec <mpu_get_temperature+0xb4>)
100085ae:	4798      	blx	r3
100085b0:	6038      	str	r0, [r7, #0]
    return 0;
100085b2:	e006      	b.n	100085c2 <mpu_get_temperature+0x8a>
{
    unsigned char tmp[2];
    short raw;

    if (!(st.chip_cfg.sensors))
        return -1;
100085b4:	2301      	movs	r3, #1
100085b6:	425b      	negs	r3, r3
100085b8:	9301      	str	r3, [sp, #4]
100085ba:	e002      	b.n	100085c2 <mpu_get_temperature+0x8a>

    if (i2c_read(st.hw->addr, st.reg->temp, 2, tmp))
        return -1;
100085bc:	2301      	movs	r3, #1
100085be:	425b      	negs	r3, r3
100085c0:	9301      	str	r3, [sp, #4]
    if (timestamp)
        get_ms(timestamp);

    data[0] = (long)((35 + ((raw - (float)st.hw->temp_offset) / st.hw->temp_sens)) * 65536L);
    return 0;
}
100085c2:	9801      	ldr	r0, [sp, #4]
100085c4:	b005      	add	sp, #20
100085c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
100085c8:	100183e8 	.word	0x100183e8
100085cc:	1000ab09 	.word	0x1000ab09
100085d0:	1000b5ed 	.word	0x1000b5ed
100085d4:	10014125 	.word	0x10014125
100085d8:	10013dd5 	.word	0x10013dd5
100085dc:	10013819 	.word	0x10013819
100085e0:	420c0000 	.word	0x420c0000
100085e4:	1001352d 	.word	0x1001352d
100085e8:	10013bad 	.word	0x10013bad
100085ec:	100140e1 	.word	0x100140e1

100085f0 <mpu_reset_fifo>:
/**
 *  @brief  Reset FIFO read/write pointers.
 *  @return 0 if successful.
 */
int mpu_reset_fifo(void)
{
100085f0:	b510      	push	{r4, lr}
100085f2:	b082      	sub	sp, #8
    unsigned char data;

    if (!(st.chip_cfg.sensors))
100085f4:	4b79      	ldr	r3, [pc, #484]	; (100087dc <mpu_reset_fifo+0x1ec>)
100085f6:	7a9b      	ldrb	r3, [r3, #10]
100085f8:	2b00      	cmp	r3, #0
100085fa:	d100      	bne.n	100085fe <mpu_reset_fifo+0xe>
100085fc:	e0ce      	b.n	1000879c <mpu_reset_fifo+0x1ac>
        return -1;

    data = 0;
100085fe:	466b      	mov	r3, sp
10008600:	3307      	adds	r3, #7
10008602:	2200      	movs	r2, #0
10008604:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
10008606:	4a75      	ldr	r2, [pc, #468]	; (100087dc <mpu_reset_fifo+0x1ec>)
10008608:	6811      	ldr	r1, [r2, #0]
1000860a:	7c49      	ldrb	r1, [r1, #17]
1000860c:	6852      	ldr	r2, [r2, #4]
1000860e:	7810      	ldrb	r0, [r2, #0]
10008610:	2201      	movs	r2, #1
10008612:	4c73      	ldr	r4, [pc, #460]	; (100087e0 <mpu_reset_fifo+0x1f0>)
10008614:	47a0      	blx	r4
10008616:	2800      	cmp	r0, #0
10008618:	d000      	beq.n	1000861c <mpu_reset_fifo+0x2c>
1000861a:	e0c2      	b.n	100087a2 <mpu_reset_fifo+0x1b2>
        return -1;
    if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
1000861c:	4b6f      	ldr	r3, [pc, #444]	; (100087dc <mpu_reset_fifo+0x1ec>)
1000861e:	681a      	ldr	r2, [r3, #0]
10008620:	7951      	ldrb	r1, [r2, #5]
10008622:	685b      	ldr	r3, [r3, #4]
10008624:	7818      	ldrb	r0, [r3, #0]
10008626:	466b      	mov	r3, sp
10008628:	3307      	adds	r3, #7
1000862a:	2201      	movs	r2, #1
1000862c:	4c6c      	ldr	r4, [pc, #432]	; (100087e0 <mpu_reset_fifo+0x1f0>)
1000862e:	47a0      	blx	r4
10008630:	2800      	cmp	r0, #0
10008632:	d000      	beq.n	10008636 <mpu_reset_fifo+0x46>
10008634:	e0b8      	b.n	100087a8 <mpu_reset_fifo+0x1b8>
        return -1;
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
10008636:	4b69      	ldr	r3, [pc, #420]	; (100087dc <mpu_reset_fifo+0x1ec>)
10008638:	681a      	ldr	r2, [r3, #0]
1000863a:	7911      	ldrb	r1, [r2, #4]
1000863c:	685b      	ldr	r3, [r3, #4]
1000863e:	7818      	ldrb	r0, [r3, #0]
10008640:	466b      	mov	r3, sp
10008642:	3307      	adds	r3, #7
10008644:	2201      	movs	r2, #1
10008646:	4c66      	ldr	r4, [pc, #408]	; (100087e0 <mpu_reset_fifo+0x1f0>)
10008648:	47a0      	blx	r4
1000864a:	2800      	cmp	r0, #0
1000864c:	d000      	beq.n	10008650 <mpu_reset_fifo+0x60>
1000864e:	e0ae      	b.n	100087ae <mpu_reset_fifo+0x1be>
        return -1;

    if (st.chip_cfg.dmp_on) {
10008650:	2324      	movs	r3, #36	; 0x24
10008652:	4a62      	ldr	r2, [pc, #392]	; (100087dc <mpu_reset_fifo+0x1ec>)
10008654:	5cd3      	ldrb	r3, [r2, r3]
10008656:	2b00      	cmp	r3, #0
10008658:	d04f      	beq.n	100086fa <mpu_reset_fifo+0x10a>
        data = BIT_FIFO_RST | BIT_DMP_RST;
1000865a:	466b      	mov	r3, sp
1000865c:	3307      	adds	r3, #7
1000865e:	220c      	movs	r2, #12
10008660:	701a      	strb	r2, [r3, #0]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
10008662:	4a5e      	ldr	r2, [pc, #376]	; (100087dc <mpu_reset_fifo+0x1ec>)
10008664:	6811      	ldr	r1, [r2, #0]
10008666:	7909      	ldrb	r1, [r1, #4]
10008668:	6852      	ldr	r2, [r2, #4]
1000866a:	7810      	ldrb	r0, [r2, #0]
1000866c:	2201      	movs	r2, #1
1000866e:	4c5c      	ldr	r4, [pc, #368]	; (100087e0 <mpu_reset_fifo+0x1f0>)
10008670:	47a0      	blx	r4
10008672:	2800      	cmp	r0, #0
10008674:	d000      	beq.n	10008678 <mpu_reset_fifo+0x88>
10008676:	e09d      	b.n	100087b4 <mpu_reset_fifo+0x1c4>
            return -1;
        delay_ms(50);
10008678:	3032      	adds	r0, #50	; 0x32
1000867a:	4b5a      	ldr	r3, [pc, #360]	; (100087e4 <mpu_reset_fifo+0x1f4>)
1000867c:	4798      	blx	r3
        data = BIT_DMP_EN | BIT_FIFO_EN;
1000867e:	22c0      	movs	r2, #192	; 0xc0
10008680:	466b      	mov	r3, sp
10008682:	71da      	strb	r2, [r3, #7]
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
10008684:	4b55      	ldr	r3, [pc, #340]	; (100087dc <mpu_reset_fifo+0x1ec>)
10008686:	7a9b      	ldrb	r3, [r3, #10]
10008688:	07db      	lsls	r3, r3, #31
1000868a:	d502      	bpl.n	10008692 <mpu_reset_fifo+0xa2>
            data |= BIT_AUX_IF_EN;
1000868c:	3220      	adds	r2, #32
1000868e:	466b      	mov	r3, sp
10008690:	71da      	strb	r2, [r3, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
10008692:	4b52      	ldr	r3, [pc, #328]	; (100087dc <mpu_reset_fifo+0x1ec>)
10008694:	681a      	ldr	r2, [r3, #0]
10008696:	7911      	ldrb	r1, [r2, #4]
10008698:	685b      	ldr	r3, [r3, #4]
1000869a:	7818      	ldrb	r0, [r3, #0]
1000869c:	466b      	mov	r3, sp
1000869e:	3307      	adds	r3, #7
100086a0:	2201      	movs	r2, #1
100086a2:	4c4f      	ldr	r4, [pc, #316]	; (100087e0 <mpu_reset_fifo+0x1f0>)
100086a4:	47a0      	blx	r4
100086a6:	2800      	cmp	r0, #0
100086a8:	d000      	beq.n	100086ac <mpu_reset_fifo+0xbc>
100086aa:	e086      	b.n	100087ba <mpu_reset_fifo+0x1ca>
            return -1;
        if (st.chip_cfg.int_enable)
100086ac:	4b4b      	ldr	r3, [pc, #300]	; (100087dc <mpu_reset_fifo+0x1ec>)
100086ae:	7c5b      	ldrb	r3, [r3, #17]
100086b0:	2b00      	cmp	r3, #0
100086b2:	d003      	beq.n	100086bc <mpu_reset_fifo+0xcc>
            data = BIT_DMP_INT_EN;
100086b4:	2202      	movs	r2, #2
100086b6:	466b      	mov	r3, sp
100086b8:	71da      	strb	r2, [r3, #7]
100086ba:	e002      	b.n	100086c2 <mpu_reset_fifo+0xd2>
        else
            data = 0;
100086bc:	2200      	movs	r2, #0
100086be:	466b      	mov	r3, sp
100086c0:	71da      	strb	r2, [r3, #7]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
100086c2:	4b46      	ldr	r3, [pc, #280]	; (100087dc <mpu_reset_fifo+0x1ec>)
100086c4:	681a      	ldr	r2, [r3, #0]
100086c6:	7c51      	ldrb	r1, [r2, #17]
100086c8:	685b      	ldr	r3, [r3, #4]
100086ca:	7818      	ldrb	r0, [r3, #0]
100086cc:	466b      	mov	r3, sp
100086ce:	3307      	adds	r3, #7
100086d0:	2201      	movs	r2, #1
100086d2:	4c43      	ldr	r4, [pc, #268]	; (100087e0 <mpu_reset_fifo+0x1f0>)
100086d4:	47a0      	blx	r4
100086d6:	2800      	cmp	r0, #0
100086d8:	d172      	bne.n	100087c0 <mpu_reset_fifo+0x1d0>
            return -1;
        data = 0;
100086da:	466b      	mov	r3, sp
100086dc:	3307      	adds	r3, #7
100086de:	2200      	movs	r2, #0
100086e0:	701a      	strb	r2, [r3, #0]
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
100086e2:	4a3e      	ldr	r2, [pc, #248]	; (100087dc <mpu_reset_fifo+0x1ec>)
100086e4:	6811      	ldr	r1, [r2, #0]
100086e6:	7949      	ldrb	r1, [r1, #5]
100086e8:	6852      	ldr	r2, [r2, #4]
100086ea:	7810      	ldrb	r0, [r2, #0]
100086ec:	2201      	movs	r2, #1
100086ee:	4c3c      	ldr	r4, [pc, #240]	; (100087e0 <mpu_reset_fifo+0x1f0>)
100086f0:	47a0      	blx	r4
100086f2:	1e43      	subs	r3, r0, #1
100086f4:	4198      	sbcs	r0, r3
100086f6:	4240      	negs	r0, r0
100086f8:	e06d      	b.n	100087d6 <mpu_reset_fifo+0x1e6>
            return -1;
    } else {
        data = BIT_FIFO_RST;
100086fa:	466b      	mov	r3, sp
100086fc:	3307      	adds	r3, #7
100086fe:	2204      	movs	r2, #4
10008700:	701a      	strb	r2, [r3, #0]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
10008702:	4a36      	ldr	r2, [pc, #216]	; (100087dc <mpu_reset_fifo+0x1ec>)
10008704:	6811      	ldr	r1, [r2, #0]
10008706:	7909      	ldrb	r1, [r1, #4]
10008708:	6852      	ldr	r2, [r2, #4]
1000870a:	7810      	ldrb	r0, [r2, #0]
1000870c:	2201      	movs	r2, #1
1000870e:	4c34      	ldr	r4, [pc, #208]	; (100087e0 <mpu_reset_fifo+0x1f0>)
10008710:	47a0      	blx	r4
10008712:	2800      	cmp	r0, #0
10008714:	d157      	bne.n	100087c6 <mpu_reset_fifo+0x1d6>
            return -1;
        if (st.chip_cfg.bypass_mode || !(st.chip_cfg.sensors & INV_XYZ_COMPASS))
10008716:	4b31      	ldr	r3, [pc, #196]	; (100087dc <mpu_reset_fifo+0x1ec>)
10008718:	7c9b      	ldrb	r3, [r3, #18]
1000871a:	2b00      	cmp	r3, #0
1000871c:	d103      	bne.n	10008726 <mpu_reset_fifo+0x136>
1000871e:	4b2f      	ldr	r3, [pc, #188]	; (100087dc <mpu_reset_fifo+0x1ec>)
10008720:	7a9b      	ldrb	r3, [r3, #10]
10008722:	07db      	lsls	r3, r3, #31
10008724:	d403      	bmi.n	1000872e <mpu_reset_fifo+0x13e>
            data = BIT_FIFO_EN;
10008726:	2240      	movs	r2, #64	; 0x40
10008728:	466b      	mov	r3, sp
1000872a:	71da      	strb	r2, [r3, #7]
1000872c:	e002      	b.n	10008734 <mpu_reset_fifo+0x144>
        else
            data = BIT_FIFO_EN | BIT_AUX_IF_EN;
1000872e:	2260      	movs	r2, #96	; 0x60
10008730:	466b      	mov	r3, sp
10008732:	71da      	strb	r2, [r3, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
10008734:	4b29      	ldr	r3, [pc, #164]	; (100087dc <mpu_reset_fifo+0x1ec>)
10008736:	681a      	ldr	r2, [r3, #0]
10008738:	7911      	ldrb	r1, [r2, #4]
1000873a:	685b      	ldr	r3, [r3, #4]
1000873c:	7818      	ldrb	r0, [r3, #0]
1000873e:	466b      	mov	r3, sp
10008740:	3307      	adds	r3, #7
10008742:	2201      	movs	r2, #1
10008744:	4c26      	ldr	r4, [pc, #152]	; (100087e0 <mpu_reset_fifo+0x1f0>)
10008746:	47a0      	blx	r4
10008748:	2800      	cmp	r0, #0
1000874a:	d13f      	bne.n	100087cc <mpu_reset_fifo+0x1dc>
            return -1;
        delay_ms(50);
1000874c:	3032      	adds	r0, #50	; 0x32
1000874e:	4b25      	ldr	r3, [pc, #148]	; (100087e4 <mpu_reset_fifo+0x1f4>)
10008750:	4798      	blx	r3
        if (st.chip_cfg.int_enable)
10008752:	4b22      	ldr	r3, [pc, #136]	; (100087dc <mpu_reset_fifo+0x1ec>)
10008754:	7c5b      	ldrb	r3, [r3, #17]
10008756:	2b00      	cmp	r3, #0
10008758:	d003      	beq.n	10008762 <mpu_reset_fifo+0x172>
            data = BIT_DATA_RDY_EN;
1000875a:	2201      	movs	r2, #1
1000875c:	466b      	mov	r3, sp
1000875e:	71da      	strb	r2, [r3, #7]
10008760:	e002      	b.n	10008768 <mpu_reset_fifo+0x178>
        else
            data = 0;
10008762:	2200      	movs	r2, #0
10008764:	466b      	mov	r3, sp
10008766:	71da      	strb	r2, [r3, #7]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
10008768:	4b1c      	ldr	r3, [pc, #112]	; (100087dc <mpu_reset_fifo+0x1ec>)
1000876a:	681a      	ldr	r2, [r3, #0]
1000876c:	7c51      	ldrb	r1, [r2, #17]
1000876e:	685b      	ldr	r3, [r3, #4]
10008770:	7818      	ldrb	r0, [r3, #0]
10008772:	466b      	mov	r3, sp
10008774:	3307      	adds	r3, #7
10008776:	2201      	movs	r2, #1
10008778:	4c19      	ldr	r4, [pc, #100]	; (100087e0 <mpu_reset_fifo+0x1f0>)
1000877a:	47a0      	blx	r4
1000877c:	2800      	cmp	r0, #0
1000877e:	d128      	bne.n	100087d2 <mpu_reset_fifo+0x1e2>
            return -1;
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &st.chip_cfg.fifo_enable))
10008780:	4a16      	ldr	r2, [pc, #88]	; (100087dc <mpu_reset_fifo+0x1ec>)
10008782:	0013      	movs	r3, r2
10008784:	3310      	adds	r3, #16
10008786:	6811      	ldr	r1, [r2, #0]
10008788:	7949      	ldrb	r1, [r1, #5]
1000878a:	6852      	ldr	r2, [r2, #4]
1000878c:	7810      	ldrb	r0, [r2, #0]
1000878e:	2201      	movs	r2, #1
10008790:	4c13      	ldr	r4, [pc, #76]	; (100087e0 <mpu_reset_fifo+0x1f0>)
10008792:	47a0      	blx	r4
10008794:	1e43      	subs	r3, r0, #1
10008796:	4198      	sbcs	r0, r3
10008798:	4240      	negs	r0, r0
1000879a:	e01c      	b.n	100087d6 <mpu_reset_fifo+0x1e6>
int mpu_reset_fifo(void)
{
    unsigned char data;

    if (!(st.chip_cfg.sensors))
        return -1;
1000879c:	2001      	movs	r0, #1
1000879e:	4240      	negs	r0, r0
100087a0:	e019      	b.n	100087d6 <mpu_reset_fifo+0x1e6>

    data = 0;
    if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
        return -1;
100087a2:	2001      	movs	r0, #1
100087a4:	4240      	negs	r0, r0
100087a6:	e016      	b.n	100087d6 <mpu_reset_fifo+0x1e6>
    if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
        return -1;
100087a8:	2001      	movs	r0, #1
100087aa:	4240      	negs	r0, r0
100087ac:	e013      	b.n	100087d6 <mpu_reset_fifo+0x1e6>
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
        return -1;
100087ae:	2001      	movs	r0, #1
100087b0:	4240      	negs	r0, r0
100087b2:	e010      	b.n	100087d6 <mpu_reset_fifo+0x1e6>

    if (st.chip_cfg.dmp_on) {
        data = BIT_FIFO_RST | BIT_DMP_RST;
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
            return -1;
100087b4:	2001      	movs	r0, #1
100087b6:	4240      	negs	r0, r0
100087b8:	e00d      	b.n	100087d6 <mpu_reset_fifo+0x1e6>
        delay_ms(50);
        data = BIT_DMP_EN | BIT_FIFO_EN;
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
            data |= BIT_AUX_IF_EN;
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
            return -1;
100087ba:	2001      	movs	r0, #1
100087bc:	4240      	negs	r0, r0
100087be:	e00a      	b.n	100087d6 <mpu_reset_fifo+0x1e6>
        if (st.chip_cfg.int_enable)
            data = BIT_DMP_INT_EN;
        else
            data = 0;
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
            return -1;
100087c0:	2001      	movs	r0, #1
100087c2:	4240      	negs	r0, r0
100087c4:	e007      	b.n	100087d6 <mpu_reset_fifo+0x1e6>
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
            return -1;
    } else {
        data = BIT_FIFO_RST;
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
            return -1;
100087c6:	2001      	movs	r0, #1
100087c8:	4240      	negs	r0, r0
100087ca:	e004      	b.n	100087d6 <mpu_reset_fifo+0x1e6>
        if (st.chip_cfg.bypass_mode || !(st.chip_cfg.sensors & INV_XYZ_COMPASS))
            data = BIT_FIFO_EN;
        else
            data = BIT_FIFO_EN | BIT_AUX_IF_EN;
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
            return -1;
100087cc:	2001      	movs	r0, #1
100087ce:	4240      	negs	r0, r0
100087d0:	e001      	b.n	100087d6 <mpu_reset_fifo+0x1e6>
        if (st.chip_cfg.int_enable)
            data = BIT_DATA_RDY_EN;
        else
            data = 0;
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
            return -1;
100087d2:	2001      	movs	r0, #1
100087d4:	4240      	negs	r0, r0
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &st.chip_cfg.fifo_enable))
            return -1;
    }
    return 0;
}
100087d6:	b002      	add	sp, #8
100087d8:	bd10      	pop	{r4, pc}
100087da:	46c0      	nop			; (mov r8, r8)
100087dc:	100183e8 	.word	0x100183e8
100087e0:	1000aaad 	.word	0x1000aaad
100087e4:	10008129 	.word	0x10008129

100087e8 <mpu_set_gyro_fsr>:
 *  @brief      Set the gyro full-scale range.
 *  @param[in]  fsr Desired full-scale range.
 *  @return     0 if successful.
 */
int mpu_set_gyro_fsr(unsigned short fsr)
{
100087e8:	b510      	push	{r4, lr}
100087ea:	b082      	sub	sp, #8
    unsigned char data;

    if (!(st.chip_cfg.sensors))
100087ec:	4b24      	ldr	r3, [pc, #144]	; (10008880 <mpu_set_gyro_fsr+0x98>)
100087ee:	7a9b      	ldrb	r3, [r3, #10]
100087f0:	2b00      	cmp	r3, #0
100087f2:	d03b      	beq.n	1000886c <mpu_set_gyro_fsr+0x84>
        return -1;

    switch (fsr) {
100087f4:	23fa      	movs	r3, #250	; 0xfa
100087f6:	005b      	lsls	r3, r3, #1
100087f8:	4298      	cmp	r0, r3
100087fa:	d010      	beq.n	1000881e <mpu_set_gyro_fsr+0x36>
100087fc:	d802      	bhi.n	10008804 <mpu_set_gyro_fsr+0x1c>
100087fe:	28fa      	cmp	r0, #250	; 0xfa
10008800:	d009      	beq.n	10008816 <mpu_set_gyro_fsr+0x2e>
10008802:	e036      	b.n	10008872 <mpu_set_gyro_fsr+0x8a>
10008804:	23fa      	movs	r3, #250	; 0xfa
10008806:	009b      	lsls	r3, r3, #2
10008808:	4298      	cmp	r0, r3
1000880a:	d00c      	beq.n	10008826 <mpu_set_gyro_fsr+0x3e>
1000880c:	23fa      	movs	r3, #250	; 0xfa
1000880e:	00db      	lsls	r3, r3, #3
10008810:	4298      	cmp	r0, r3
10008812:	d00c      	beq.n	1000882e <mpu_set_gyro_fsr+0x46>
10008814:	e02d      	b.n	10008872 <mpu_set_gyro_fsr+0x8a>
    case 250:
        data = INV_FSR_250DPS << 3;
10008816:	2200      	movs	r2, #0
10008818:	466b      	mov	r3, sp
1000881a:	71da      	strb	r2, [r3, #7]
        break;
1000881c:	e00a      	b.n	10008834 <mpu_set_gyro_fsr+0x4c>
    case 500:
        data = INV_FSR_500DPS << 3;
1000881e:	2208      	movs	r2, #8
10008820:	466b      	mov	r3, sp
10008822:	71da      	strb	r2, [r3, #7]
        break;
10008824:	e006      	b.n	10008834 <mpu_set_gyro_fsr+0x4c>
    case 1000:
        data = INV_FSR_1000DPS << 3;
10008826:	2210      	movs	r2, #16
10008828:	466b      	mov	r3, sp
1000882a:	71da      	strb	r2, [r3, #7]
        break;
1000882c:	e002      	b.n	10008834 <mpu_set_gyro_fsr+0x4c>
    case 2000:
        data = INV_FSR_2000DPS << 3;
1000882e:	2218      	movs	r2, #24
10008830:	466b      	mov	r3, sp
10008832:	71da      	strb	r2, [r3, #7]
        break;
    default:
        return -1;
    }

    if (st.chip_cfg.gyro_fsr == (data >> 3))
10008834:	466b      	mov	r3, sp
10008836:	3307      	adds	r3, #7
10008838:	781b      	ldrb	r3, [r3, #0]
1000883a:	4a11      	ldr	r2, [pc, #68]	; (10008880 <mpu_set_gyro_fsr+0x98>)
1000883c:	7a12      	ldrb	r2, [r2, #8]
1000883e:	08db      	lsrs	r3, r3, #3
        return 0;
10008840:	2000      	movs	r0, #0
        break;
    default:
        return -1;
    }

    if (st.chip_cfg.gyro_fsr == (data >> 3))
10008842:	429a      	cmp	r2, r3
10008844:	d01a      	beq.n	1000887c <mpu_set_gyro_fsr+0x94>
        return 0;
    if (i2c_write(st.hw->addr, st.reg->gyro_cfg, 1, &data))
10008846:	4b0e      	ldr	r3, [pc, #56]	; (10008880 <mpu_set_gyro_fsr+0x98>)
10008848:	681a      	ldr	r2, [r3, #0]
1000884a:	7991      	ldrb	r1, [r2, #6]
1000884c:	685b      	ldr	r3, [r3, #4]
1000884e:	7818      	ldrb	r0, [r3, #0]
10008850:	466b      	mov	r3, sp
10008852:	3307      	adds	r3, #7
10008854:	2201      	movs	r2, #1
10008856:	4c0b      	ldr	r4, [pc, #44]	; (10008884 <mpu_set_gyro_fsr+0x9c>)
10008858:	47a0      	blx	r4
1000885a:	2800      	cmp	r0, #0
1000885c:	d10c      	bne.n	10008878 <mpu_set_gyro_fsr+0x90>
        return -1;
    st.chip_cfg.gyro_fsr = data >> 3;
1000885e:	466b      	mov	r3, sp
10008860:	3307      	adds	r3, #7
10008862:	781b      	ldrb	r3, [r3, #0]
10008864:	08db      	lsrs	r3, r3, #3
10008866:	4a06      	ldr	r2, [pc, #24]	; (10008880 <mpu_set_gyro_fsr+0x98>)
10008868:	7213      	strb	r3, [r2, #8]
    return 0;
1000886a:	e007      	b.n	1000887c <mpu_set_gyro_fsr+0x94>
int mpu_set_gyro_fsr(unsigned short fsr)
{
    unsigned char data;

    if (!(st.chip_cfg.sensors))
        return -1;
1000886c:	2001      	movs	r0, #1
1000886e:	4240      	negs	r0, r0
10008870:	e004      	b.n	1000887c <mpu_set_gyro_fsr+0x94>
        break;
    case 2000:
        data = INV_FSR_2000DPS << 3;
        break;
    default:
        return -1;
10008872:	2001      	movs	r0, #1
10008874:	4240      	negs	r0, r0
10008876:	e001      	b.n	1000887c <mpu_set_gyro_fsr+0x94>
    }

    if (st.chip_cfg.gyro_fsr == (data >> 3))
        return 0;
    if (i2c_write(st.hw->addr, st.reg->gyro_cfg, 1, &data))
        return -1;
10008878:	2001      	movs	r0, #1
1000887a:	4240      	negs	r0, r0
    st.chip_cfg.gyro_fsr = data >> 3;
    return 0;
}
1000887c:	b002      	add	sp, #8
1000887e:	bd10      	pop	{r4, pc}
10008880:	100183e8 	.word	0x100183e8
10008884:	1000aaad 	.word	0x1000aaad

10008888 <mpu_get_accel_fsr>:
 *  @param[out] fsr Current full-scale range.
 *  @return     0 if successful.
 */
int mpu_get_accel_fsr(unsigned char *fsr)
{
    switch (st.chip_cfg.accel_fsr) {
10008888:	4b11      	ldr	r3, [pc, #68]	; (100088d0 <mpu_get_accel_fsr+0x48>)
1000888a:	7a5b      	ldrb	r3, [r3, #9]
1000888c:	2b01      	cmp	r3, #1
1000888e:	d009      	beq.n	100088a4 <mpu_get_accel_fsr+0x1c>
10008890:	2b00      	cmp	r3, #0
10008892:	d004      	beq.n	1000889e <mpu_get_accel_fsr+0x16>
10008894:	2b02      	cmp	r3, #2
10008896:	d008      	beq.n	100088aa <mpu_get_accel_fsr+0x22>
10008898:	2b03      	cmp	r3, #3
1000889a:	d009      	beq.n	100088b0 <mpu_get_accel_fsr+0x28>
1000889c:	e014      	b.n	100088c8 <mpu_get_accel_fsr+0x40>
    case INV_FSR_2G:
        fsr[0] = 2;
1000889e:	2302      	movs	r3, #2
100088a0:	7003      	strb	r3, [r0, #0]
        break;
100088a2:	e007      	b.n	100088b4 <mpu_get_accel_fsr+0x2c>
    case INV_FSR_4G:
        fsr[0] = 4;
100088a4:	2304      	movs	r3, #4
100088a6:	7003      	strb	r3, [r0, #0]
        break;
100088a8:	e004      	b.n	100088b4 <mpu_get_accel_fsr+0x2c>
    case INV_FSR_8G:
        fsr[0] = 8;
100088aa:	2308      	movs	r3, #8
100088ac:	7003      	strb	r3, [r0, #0]
        break;
100088ae:	e001      	b.n	100088b4 <mpu_get_accel_fsr+0x2c>
    case INV_FSR_16G:
        fsr[0] = 16;
100088b0:	2310      	movs	r3, #16
100088b2:	7003      	strb	r3, [r0, #0]
        break;
    default:
        return -1;
    }
    if (st.chip_cfg.accel_half)
100088b4:	4b06      	ldr	r3, [pc, #24]	; (100088d0 <mpu_get_accel_fsr+0x48>)
100088b6:	7cda      	ldrb	r2, [r3, #19]
        fsr[0] <<= 1;
    return 0;
100088b8:	2300      	movs	r3, #0
        fsr[0] = 16;
        break;
    default:
        return -1;
    }
    if (st.chip_cfg.accel_half)
100088ba:	2a00      	cmp	r2, #0
100088bc:	d006      	beq.n	100088cc <mpu_get_accel_fsr+0x44>
        fsr[0] <<= 1;
100088be:	7803      	ldrb	r3, [r0, #0]
100088c0:	005b      	lsls	r3, r3, #1
100088c2:	7003      	strb	r3, [r0, #0]
    return 0;
100088c4:	2300      	movs	r3, #0
100088c6:	e001      	b.n	100088cc <mpu_get_accel_fsr+0x44>
        break;
    case INV_FSR_16G:
        fsr[0] = 16;
        break;
    default:
        return -1;
100088c8:	2301      	movs	r3, #1
100088ca:	425b      	negs	r3, r3
    }
    if (st.chip_cfg.accel_half)
        fsr[0] <<= 1;
    return 0;
}
100088cc:	0018      	movs	r0, r3
100088ce:	4770      	bx	lr
100088d0:	100183e8 	.word	0x100183e8

100088d4 <mpu_set_accel_fsr>:
 *  @brief      Set the accel full-scale range.
 *  @param[in]  fsr Desired full-scale range.
 *  @return     0 if successful.
 */
int mpu_set_accel_fsr(unsigned char fsr)
{
100088d4:	b510      	push	{r4, lr}
100088d6:	b082      	sub	sp, #8
    unsigned char data;

    if (!(st.chip_cfg.sensors))
100088d8:	4b21      	ldr	r3, [pc, #132]	; (10008960 <mpu_set_accel_fsr+0x8c>)
100088da:	7a9b      	ldrb	r3, [r3, #10]
100088dc:	2b00      	cmp	r3, #0
100088de:	d035      	beq.n	1000894c <mpu_set_accel_fsr+0x78>
        return -1;

    switch (fsr) {
100088e0:	2804      	cmp	r0, #4
100088e2:	d00c      	beq.n	100088fe <mpu_set_accel_fsr+0x2a>
100088e4:	d802      	bhi.n	100088ec <mpu_set_accel_fsr+0x18>
100088e6:	2802      	cmp	r0, #2
100088e8:	d005      	beq.n	100088f6 <mpu_set_accel_fsr+0x22>
100088ea:	e032      	b.n	10008952 <mpu_set_accel_fsr+0x7e>
100088ec:	2808      	cmp	r0, #8
100088ee:	d00a      	beq.n	10008906 <mpu_set_accel_fsr+0x32>
100088f0:	2810      	cmp	r0, #16
100088f2:	d00c      	beq.n	1000890e <mpu_set_accel_fsr+0x3a>
100088f4:	e02d      	b.n	10008952 <mpu_set_accel_fsr+0x7e>
    case 2:
        data = INV_FSR_2G << 3;
100088f6:	2200      	movs	r2, #0
100088f8:	466b      	mov	r3, sp
100088fa:	71da      	strb	r2, [r3, #7]
        break;
100088fc:	e00a      	b.n	10008914 <mpu_set_accel_fsr+0x40>
    case 4:
        data = INV_FSR_4G << 3;
100088fe:	2208      	movs	r2, #8
10008900:	466b      	mov	r3, sp
10008902:	71da      	strb	r2, [r3, #7]
        break;
10008904:	e006      	b.n	10008914 <mpu_set_accel_fsr+0x40>
    case 8:
        data = INV_FSR_8G << 3;
10008906:	2210      	movs	r2, #16
10008908:	466b      	mov	r3, sp
1000890a:	71da      	strb	r2, [r3, #7]
        break;
1000890c:	e002      	b.n	10008914 <mpu_set_accel_fsr+0x40>
    case 16:
        data = INV_FSR_16G << 3;
1000890e:	2218      	movs	r2, #24
10008910:	466b      	mov	r3, sp
10008912:	71da      	strb	r2, [r3, #7]
        break;
    default:
        return -1;
    }

    if (st.chip_cfg.accel_fsr == (data >> 3))
10008914:	466b      	mov	r3, sp
10008916:	3307      	adds	r3, #7
10008918:	781b      	ldrb	r3, [r3, #0]
1000891a:	4a11      	ldr	r2, [pc, #68]	; (10008960 <mpu_set_accel_fsr+0x8c>)
1000891c:	7a52      	ldrb	r2, [r2, #9]
1000891e:	08db      	lsrs	r3, r3, #3
        return 0;
10008920:	2000      	movs	r0, #0
        break;
    default:
        return -1;
    }

    if (st.chip_cfg.accel_fsr == (data >> 3))
10008922:	429a      	cmp	r2, r3
10008924:	d01a      	beq.n	1000895c <mpu_set_accel_fsr+0x88>
        return 0;
    if (i2c_write(st.hw->addr, st.reg->accel_cfg, 1, &data))
10008926:	4b0e      	ldr	r3, [pc, #56]	; (10008960 <mpu_set_accel_fsr+0x8c>)
10008928:	681a      	ldr	r2, [r3, #0]
1000892a:	79d1      	ldrb	r1, [r2, #7]
1000892c:	685b      	ldr	r3, [r3, #4]
1000892e:	7818      	ldrb	r0, [r3, #0]
10008930:	466b      	mov	r3, sp
10008932:	3307      	adds	r3, #7
10008934:	2201      	movs	r2, #1
10008936:	4c0b      	ldr	r4, [pc, #44]	; (10008964 <mpu_set_accel_fsr+0x90>)
10008938:	47a0      	blx	r4
1000893a:	2800      	cmp	r0, #0
1000893c:	d10c      	bne.n	10008958 <mpu_set_accel_fsr+0x84>
        return -1;
    st.chip_cfg.accel_fsr = data >> 3;
1000893e:	466b      	mov	r3, sp
10008940:	3307      	adds	r3, #7
10008942:	781b      	ldrb	r3, [r3, #0]
10008944:	08db      	lsrs	r3, r3, #3
10008946:	4a06      	ldr	r2, [pc, #24]	; (10008960 <mpu_set_accel_fsr+0x8c>)
10008948:	7253      	strb	r3, [r2, #9]
    return 0;
1000894a:	e007      	b.n	1000895c <mpu_set_accel_fsr+0x88>
int mpu_set_accel_fsr(unsigned char fsr)
{
    unsigned char data;

    if (!(st.chip_cfg.sensors))
        return -1;
1000894c:	2001      	movs	r0, #1
1000894e:	4240      	negs	r0, r0
10008950:	e004      	b.n	1000895c <mpu_set_accel_fsr+0x88>
        break;
    case 16:
        data = INV_FSR_16G << 3;
        break;
    default:
        return -1;
10008952:	2001      	movs	r0, #1
10008954:	4240      	negs	r0, r0
10008956:	e001      	b.n	1000895c <mpu_set_accel_fsr+0x88>
    }

    if (st.chip_cfg.accel_fsr == (data >> 3))
        return 0;
    if (i2c_write(st.hw->addr, st.reg->accel_cfg, 1, &data))
        return -1;
10008958:	2001      	movs	r0, #1
1000895a:	4240      	negs	r0, r0
    st.chip_cfg.accel_fsr = data >> 3;
    return 0;
}
1000895c:	b002      	add	sp, #8
1000895e:	bd10      	pop	{r4, pc}
10008960:	100183e8 	.word	0x100183e8
10008964:	1000aaad 	.word	0x1000aaad

10008968 <mpu_set_lpf>:
 *  The following LPF settings are supported: 188, 98, 42, 20, 10, 5.
 *  @param[in]  lpf Desired LPF setting.
 *  @return     0 if successful.
 */
int mpu_set_lpf(unsigned short lpf)
{
10008968:	b510      	push	{r4, lr}
1000896a:	b082      	sub	sp, #8
    unsigned char data;

    if (!(st.chip_cfg.sensors))
1000896c:	4b2b      	ldr	r3, [pc, #172]	; (10008a1c <mpu_set_lpf+0xb4>)
1000896e:	7a9b      	ldrb	r3, [r3, #10]
10008970:	2b00      	cmp	r3, #0
10008972:	d049      	beq.n	10008a08 <mpu_set_lpf+0xa0>
        return -1;

    if (lpf >= 188)
10008974:	28bb      	cmp	r0, #187	; 0xbb
10008976:	d903      	bls.n	10008980 <mpu_set_lpf+0x18>
        data = INV_FILTER_188HZ;
10008978:	2201      	movs	r2, #1
1000897a:	466b      	mov	r3, sp
1000897c:	71da      	strb	r2, [r3, #7]
1000897e:	e01a      	b.n	100089b6 <mpu_set_lpf+0x4e>
    else if (lpf >= 98)
10008980:	2861      	cmp	r0, #97	; 0x61
10008982:	d903      	bls.n	1000898c <mpu_set_lpf+0x24>
        data = INV_FILTER_98HZ;
10008984:	2202      	movs	r2, #2
10008986:	466b      	mov	r3, sp
10008988:	71da      	strb	r2, [r3, #7]
1000898a:	e014      	b.n	100089b6 <mpu_set_lpf+0x4e>
    else if (lpf >= 42)
1000898c:	2829      	cmp	r0, #41	; 0x29
1000898e:	d903      	bls.n	10008998 <mpu_set_lpf+0x30>
        data = INV_FILTER_42HZ;
10008990:	2203      	movs	r2, #3
10008992:	466b      	mov	r3, sp
10008994:	71da      	strb	r2, [r3, #7]
10008996:	e00e      	b.n	100089b6 <mpu_set_lpf+0x4e>
    else if (lpf >= 20)
10008998:	2813      	cmp	r0, #19
1000899a:	d903      	bls.n	100089a4 <mpu_set_lpf+0x3c>
        data = INV_FILTER_20HZ;
1000899c:	2204      	movs	r2, #4
1000899e:	466b      	mov	r3, sp
100089a0:	71da      	strb	r2, [r3, #7]
100089a2:	e008      	b.n	100089b6 <mpu_set_lpf+0x4e>
    else if (lpf >= 10)
100089a4:	2809      	cmp	r0, #9
100089a6:	d903      	bls.n	100089b0 <mpu_set_lpf+0x48>
        data = INV_FILTER_10HZ;
100089a8:	2205      	movs	r2, #5
100089aa:	466b      	mov	r3, sp
100089ac:	71da      	strb	r2, [r3, #7]
100089ae:	e002      	b.n	100089b6 <mpu_set_lpf+0x4e>
    else
        data = INV_FILTER_5HZ;
100089b0:	2206      	movs	r2, #6
100089b2:	466b      	mov	r3, sp
100089b4:	71da      	strb	r2, [r3, #7]

    if (st.chip_cfg.lpf == data)
100089b6:	4b19      	ldr	r3, [pc, #100]	; (10008a1c <mpu_set_lpf+0xb4>)
100089b8:	7ada      	ldrb	r2, [r3, #11]
100089ba:	466b      	mov	r3, sp
100089bc:	3307      	adds	r3, #7
100089be:	781b      	ldrb	r3, [r3, #0]
        return 0;
100089c0:	2000      	movs	r0, #0
    else if (lpf >= 10)
        data = INV_FILTER_10HZ;
    else
        data = INV_FILTER_5HZ;

    if (st.chip_cfg.lpf == data)
100089c2:	429a      	cmp	r2, r3
100089c4:	d028      	beq.n	10008a18 <mpu_set_lpf+0xb0>
        return 0;
    if (i2c_write(st.hw->addr, st.reg->lpf, 1, &data))
100089c6:	4b15      	ldr	r3, [pc, #84]	; (10008a1c <mpu_set_lpf+0xb4>)
100089c8:	681a      	ldr	r2, [r3, #0]
100089ca:	7891      	ldrb	r1, [r2, #2]
100089cc:	685b      	ldr	r3, [r3, #4]
100089ce:	7818      	ldrb	r0, [r3, #0]
100089d0:	466b      	mov	r3, sp
100089d2:	3307      	adds	r3, #7
100089d4:	2201      	movs	r2, #1
100089d6:	4c12      	ldr	r4, [pc, #72]	; (10008a20 <mpu_set_lpf+0xb8>)
100089d8:	47a0      	blx	r4
100089da:	2800      	cmp	r0, #0
100089dc:	d117      	bne.n	10008a0e <mpu_set_lpf+0xa6>
        return -1;
#ifdef MPU6500
    data = BIT_FIFO_SIZE_1024 | data;
100089de:	466b      	mov	r3, sp
100089e0:	3307      	adds	r3, #7
100089e2:	7819      	ldrb	r1, [r3, #0]
100089e4:	2240      	movs	r2, #64	; 0x40
100089e6:	430a      	orrs	r2, r1
100089e8:	701a      	strb	r2, [r3, #0]

    if (i2c_write(st.hw->addr, st.reg->accel_cfg2, 1, &data))
100089ea:	4a0c      	ldr	r2, [pc, #48]	; (10008a1c <mpu_set_lpf+0xb4>)
100089ec:	6811      	ldr	r1, [r2, #0]
100089ee:	7a09      	ldrb	r1, [r1, #8]
100089f0:	6852      	ldr	r2, [r2, #4]
100089f2:	7810      	ldrb	r0, [r2, #0]
100089f4:	2201      	movs	r2, #1
100089f6:	4c0a      	ldr	r4, [pc, #40]	; (10008a20 <mpu_set_lpf+0xb8>)
100089f8:	47a0      	blx	r4
100089fa:	2800      	cmp	r0, #0
100089fc:	d10a      	bne.n	10008a14 <mpu_set_lpf+0xac>
            return -1;
#endif
    st.chip_cfg.lpf = data;
100089fe:	466b      	mov	r3, sp
10008a00:	79da      	ldrb	r2, [r3, #7]
10008a02:	4b06      	ldr	r3, [pc, #24]	; (10008a1c <mpu_set_lpf+0xb4>)
10008a04:	72da      	strb	r2, [r3, #11]
    return 0;
10008a06:	e007      	b.n	10008a18 <mpu_set_lpf+0xb0>
int mpu_set_lpf(unsigned short lpf)
{
    unsigned char data;

    if (!(st.chip_cfg.sensors))
        return -1;
10008a08:	2001      	movs	r0, #1
10008a0a:	4240      	negs	r0, r0
10008a0c:	e004      	b.n	10008a18 <mpu_set_lpf+0xb0>
        data = INV_FILTER_5HZ;

    if (st.chip_cfg.lpf == data)
        return 0;
    if (i2c_write(st.hw->addr, st.reg->lpf, 1, &data))
        return -1;
10008a0e:	2001      	movs	r0, #1
10008a10:	4240      	negs	r0, r0
10008a12:	e001      	b.n	10008a18 <mpu_set_lpf+0xb0>
#ifdef MPU6500
    data = BIT_FIFO_SIZE_1024 | data;

    if (i2c_write(st.hw->addr, st.reg->accel_cfg2, 1, &data))
            return -1;
10008a14:	2001      	movs	r0, #1
10008a16:	4240      	negs	r0, r0
#endif
    st.chip_cfg.lpf = data;
    return 0;
}
10008a18:	b002      	add	sp, #8
10008a1a:	bd10      	pop	{r4, pc}
10008a1c:	100183e8 	.word	0x100183e8
10008a20:	1000aaad 	.word	0x1000aaad

10008a24 <mpu_get_sample_rate>:
 *  @param[out] rate    Current sampling rate (Hz).
 *  @return     0 if successful.
 */
int mpu_get_sample_rate(unsigned short *rate)
{
    if (st.chip_cfg.dmp_on)
10008a24:	2324      	movs	r3, #36	; 0x24
10008a26:	4a05      	ldr	r2, [pc, #20]	; (10008a3c <mpu_get_sample_rate+0x18>)
10008a28:	5cd3      	ldrb	r3, [r2, r3]
10008a2a:	2b00      	cmp	r3, #0
10008a2c:	d103      	bne.n	10008a36 <mpu_get_sample_rate+0x12>
        return -1;
    else
        rate[0] = st.chip_cfg.sample_rate;
10008a2e:	89d3      	ldrh	r3, [r2, #14]
10008a30:	8003      	strh	r3, [r0, #0]
    return 0;
10008a32:	2000      	movs	r0, #0
10008a34:	e001      	b.n	10008a3a <mpu_get_sample_rate+0x16>
 *  @return     0 if successful.
 */
int mpu_get_sample_rate(unsigned short *rate)
{
    if (st.chip_cfg.dmp_on)
        return -1;
10008a36:	2001      	movs	r0, #1
10008a38:	4240      	negs	r0, r0
    else
        rate[0] = st.chip_cfg.sample_rate;
    return 0;
}
10008a3a:	4770      	bx	lr
10008a3c:	100183e8 	.word	0x100183e8

10008a40 <mpu_set_compass_sample_rate>:
 *  mpu_get_compass_sample_rate to check the actual setting.
 *  @param[in]  rate    Desired compass sampling rate (Hz).
 *  @return     0 if successful.
 */
int mpu_set_compass_sample_rate(unsigned short rate)
{
10008a40:	b530      	push	{r4, r5, lr}
10008a42:	b083      	sub	sp, #12
10008a44:	1e01      	subs	r1, r0, #0
#ifdef AK89xx_SECONDARY
    unsigned char div;
    if (!rate || rate > st.chip_cfg.sample_rate || rate > MAX_COMPASS_SAMPLE_RATE)
10008a46:	d020      	beq.n	10008a8a <mpu_set_compass_sample_rate+0x4a>
10008a48:	4b17      	ldr	r3, [pc, #92]	; (10008aa8 <mpu_set_compass_sample_rate+0x68>)
10008a4a:	89d8      	ldrh	r0, [r3, #14]
10008a4c:	4281      	cmp	r1, r0
10008a4e:	d81f      	bhi.n	10008a90 <mpu_set_compass_sample_rate+0x50>
10008a50:	2964      	cmp	r1, #100	; 0x64
10008a52:	d820      	bhi.n	10008a96 <mpu_set_compass_sample_rate+0x56>
        return -1;

    div = st.chip_cfg.sample_rate / rate - 1;
10008a54:	466b      	mov	r3, sp
10008a56:	1ddc      	adds	r4, r3, #7
10008a58:	4b14      	ldr	r3, [pc, #80]	; (10008aac <mpu_set_compass_sample_rate+0x6c>)
10008a5a:	4798      	blx	r3
10008a5c:	3801      	subs	r0, #1
10008a5e:	7020      	strb	r0, [r4, #0]
    if (i2c_write(st.hw->addr, st.reg->s4_ctrl, 1, &div))
10008a60:	4b11      	ldr	r3, [pc, #68]	; (10008aa8 <mpu_set_compass_sample_rate+0x68>)
10008a62:	2224      	movs	r2, #36	; 0x24
10008a64:	6819      	ldr	r1, [r3, #0]
10008a66:	5c89      	ldrb	r1, [r1, r2]
10008a68:	685b      	ldr	r3, [r3, #4]
10008a6a:	7818      	ldrb	r0, [r3, #0]
10008a6c:	0023      	movs	r3, r4
10008a6e:	3a23      	subs	r2, #35	; 0x23
10008a70:	4c0f      	ldr	r4, [pc, #60]	; (10008ab0 <mpu_set_compass_sample_rate+0x70>)
10008a72:	47a0      	blx	r4
10008a74:	1e04      	subs	r4, r0, #0
10008a76:	d111      	bne.n	10008a9c <mpu_set_compass_sample_rate+0x5c>
        return -1;
    st.chip_cfg.compass_sample_rate = st.chip_cfg.sample_rate / (div + 1);
10008a78:	4d0b      	ldr	r5, [pc, #44]	; (10008aa8 <mpu_set_compass_sample_rate+0x68>)
10008a7a:	89e8      	ldrh	r0, [r5, #14]
10008a7c:	466b      	mov	r3, sp
10008a7e:	79d9      	ldrb	r1, [r3, #7]
10008a80:	3101      	adds	r1, #1
10008a82:	4b0c      	ldr	r3, [pc, #48]	; (10008ab4 <mpu_set_compass_sample_rate+0x74>)
10008a84:	4798      	blx	r3
10008a86:	8528      	strh	r0, [r5, #40]	; 0x28
    return 0;
10008a88:	e00a      	b.n	10008aa0 <mpu_set_compass_sample_rate+0x60>
int mpu_set_compass_sample_rate(unsigned short rate)
{
#ifdef AK89xx_SECONDARY
    unsigned char div;
    if (!rate || rate > st.chip_cfg.sample_rate || rate > MAX_COMPASS_SAMPLE_RATE)
        return -1;
10008a8a:	2401      	movs	r4, #1
10008a8c:	4264      	negs	r4, r4
10008a8e:	e007      	b.n	10008aa0 <mpu_set_compass_sample_rate+0x60>
10008a90:	2401      	movs	r4, #1
10008a92:	4264      	negs	r4, r4
10008a94:	e004      	b.n	10008aa0 <mpu_set_compass_sample_rate+0x60>
10008a96:	2401      	movs	r4, #1
10008a98:	4264      	negs	r4, r4
10008a9a:	e001      	b.n	10008aa0 <mpu_set_compass_sample_rate+0x60>

    div = st.chip_cfg.sample_rate / rate - 1;
    if (i2c_write(st.hw->addr, st.reg->s4_ctrl, 1, &div))
        return -1;
10008a9c:	2401      	movs	r4, #1
10008a9e:	4264      	negs	r4, r4
    st.chip_cfg.compass_sample_rate = st.chip_cfg.sample_rate / (div + 1);
    return 0;
#else
    return -1;
#endif
}
10008aa0:	0020      	movs	r0, r4
10008aa2:	b003      	add	sp, #12
10008aa4:	bd30      	pop	{r4, r5, pc}
10008aa6:	46c0      	nop			; (mov r8, r8)
10008aa8:	100183e8 	.word	0x100183e8
10008aac:	1001308d 	.word	0x1001308d
10008ab0:	1000aaad 	.word	0x1000aaad
10008ab4:	100131a1 	.word	0x100131a1

10008ab8 <mpu_configure_fifo>:
 *  \n INV_XYZ_ACCEL
 *  @param[in]  sensors Mask of sensors to push to FIFO.
 *  @return     0 if successful.
 */
int mpu_configure_fifo(unsigned char sensors)
{
10008ab8:	b570      	push	{r4, r5, r6, lr}
    int result = 0;

    /* Compass data isn't going into the FIFO. Stop trying. */
    sensors &= ~INV_XYZ_COMPASS;

    if (st.chip_cfg.dmp_on)
10008aba:	2324      	movs	r3, #36	; 0x24
10008abc:	4a16      	ldr	r2, [pc, #88]	; (10008b18 <mpu_configure_fifo+0x60>)
10008abe:	5cd3      	ldrb	r3, [r2, r3]
        return 0;
10008ac0:	2400      	movs	r4, #0
    int result = 0;

    /* Compass data isn't going into the FIFO. Stop trying. */
    sensors &= ~INV_XYZ_COMPASS;

    if (st.chip_cfg.dmp_on)
10008ac2:	2b00      	cmp	r3, #0
10008ac4:	d126      	bne.n	10008b14 <mpu_configure_fifo+0x5c>
        return 0;
    else {
        if (!(st.chip_cfg.sensors))
10008ac6:	7a94      	ldrb	r4, [r2, #10]
10008ac8:	2c00      	cmp	r4, #0
10008aca:	d015      	beq.n	10008af8 <mpu_configure_fifo+0x40>
{
    unsigned char prev;
    int result = 0;

    /* Compass data isn't going into the FIFO. Stop trying. */
    sensors &= ~INV_XYZ_COMPASS;
10008acc:	2301      	movs	r3, #1
10008ace:	4398      	bics	r0, r3
    if (st.chip_cfg.dmp_on)
        return 0;
    else {
        if (!(st.chip_cfg.sensors))
            return -1;
        prev = st.chip_cfg.fifo_enable;
10008ad0:	7c15      	ldrb	r5, [r2, #16]
        st.chip_cfg.fifo_enable = sensors & st.chip_cfg.sensors;
10008ad2:	4004      	ands	r4, r0
10008ad4:	7414      	strb	r4, [r2, #16]
        if (st.chip_cfg.fifo_enable != sensors)
10008ad6:	1b04      	subs	r4, r0, r4
10008ad8:	1e63      	subs	r3, r4, #1
10008ada:	419c      	sbcs	r4, r3
10008adc:	4264      	negs	r4, r4
             * asleep.
             */
            result = -1;
        else
            result = 0;
        if (sensors || st.chip_cfg.lp_accel_mode)
10008ade:	2800      	cmp	r0, #0
10008ae0:	d10d      	bne.n	10008afe <mpu_configure_fifo+0x46>
10008ae2:	7d13      	ldrb	r3, [r2, #20]
10008ae4:	2b00      	cmp	r3, #0
10008ae6:	d112      	bne.n	10008b0e <mpu_configure_fifo+0x56>
            set_int_enable(1);
        else
            set_int_enable(0);
10008ae8:	4b0c      	ldr	r3, [pc, #48]	; (10008b1c <mpu_configure_fifo+0x64>)
10008aea:	4798      	blx	r3
10008aec:	e012      	b.n	10008b14 <mpu_configure_fifo+0x5c>
        if (sensors) {
            if (mpu_reset_fifo()) {
                st.chip_cfg.fifo_enable = prev;
10008aee:	4b0a      	ldr	r3, [pc, #40]	; (10008b18 <mpu_configure_fifo+0x60>)
10008af0:	741d      	strb	r5, [r3, #16]
                return -1;
10008af2:	2401      	movs	r4, #1
10008af4:	4264      	negs	r4, r4
10008af6:	e00d      	b.n	10008b14 <mpu_configure_fifo+0x5c>

    if (st.chip_cfg.dmp_on)
        return 0;
    else {
        if (!(st.chip_cfg.sensors))
            return -1;
10008af8:	2401      	movs	r4, #1
10008afa:	4264      	negs	r4, r4
10008afc:	e00a      	b.n	10008b14 <mpu_configure_fifo+0x5c>
             */
            result = -1;
        else
            result = 0;
        if (sensors || st.chip_cfg.lp_accel_mode)
            set_int_enable(1);
10008afe:	2001      	movs	r0, #1
10008b00:	4b06      	ldr	r3, [pc, #24]	; (10008b1c <mpu_configure_fifo+0x64>)
10008b02:	4798      	blx	r3
        else
            set_int_enable(0);
        if (sensors) {
            if (mpu_reset_fifo()) {
10008b04:	4b06      	ldr	r3, [pc, #24]	; (10008b20 <mpu_configure_fifo+0x68>)
10008b06:	4798      	blx	r3
10008b08:	2800      	cmp	r0, #0
10008b0a:	d003      	beq.n	10008b14 <mpu_configure_fifo+0x5c>
10008b0c:	e7ef      	b.n	10008aee <mpu_configure_fifo+0x36>
             */
            result = -1;
        else
            result = 0;
        if (sensors || st.chip_cfg.lp_accel_mode)
            set_int_enable(1);
10008b0e:	2001      	movs	r0, #1
10008b10:	4b02      	ldr	r3, [pc, #8]	; (10008b1c <mpu_configure_fifo+0x64>)
10008b12:	4798      	blx	r3
            }
        }
    }

    return result;
}
10008b14:	0020      	movs	r0, r4
10008b16:	bd70      	pop	{r4, r5, r6, pc}
10008b18:	100183e8 	.word	0x100183e8
10008b1c:	10008495 	.word	0x10008495
10008b20:	100085f1 	.word	0x100085f1

10008b24 <mpu_read_fifo>:
 *  @param[out] more        Number of remaining packets.
 *  @return     0 if successful.
 */
int mpu_read_fifo(short *gyro, short *accel, unsigned long *timestamp,
        unsigned char *sensors, unsigned char *more)
{
10008b24:	b5f0      	push	{r4, r5, r6, r7, lr}
10008b26:	464f      	mov	r7, r9
10008b28:	b480      	push	{r7}
10008b2a:	b088      	sub	sp, #32
10008b2c:	9001      	str	r0, [sp, #4]
10008b2e:	9103      	str	r1, [sp, #12]
10008b30:	9202      	str	r2, [sp, #8]
10008b32:	001e      	movs	r6, r3
    /* Assumes maximum packet size is gyro (6) + accel (6). */
    unsigned char data[MAX_PACKET_LENGTH];
    unsigned char packet_size = 0;
    unsigned short fifo_count, index = 0;

    if (st.chip_cfg.dmp_on)
10008b34:	2324      	movs	r3, #36	; 0x24
10008b36:	4a69      	ldr	r2, [pc, #420]	; (10008cdc <mpu_read_fifo+0x1b8>)
10008b38:	5cd3      	ldrb	r3, [r2, r3]
10008b3a:	2b00      	cmp	r3, #0
10008b3c:	d000      	beq.n	10008b40 <mpu_read_fifo+0x1c>
10008b3e:	e0b6      	b.n	10008cae <mpu_read_fifo+0x18a>
        return -1;

    sensors[0] = 0;
10008b40:	7033      	strb	r3, [r6, #0]
    if (!st.chip_cfg.sensors)
10008b42:	7a93      	ldrb	r3, [r2, #10]
10008b44:	2b00      	cmp	r3, #0
10008b46:	d100      	bne.n	10008b4a <mpu_read_fifo+0x26>
10008b48:	e0b4      	b.n	10008cb4 <mpu_read_fifo+0x190>
        return -1;
    if (!st.chip_cfg.fifo_enable)
10008b4a:	7c13      	ldrb	r3, [r2, #16]
10008b4c:	2b00      	cmp	r3, #0
10008b4e:	d100      	bne.n	10008b52 <mpu_read_fifo+0x2e>
10008b50:	e0b3      	b.n	10008cba <mpu_read_fifo+0x196>
        return -1;

    if (st.chip_cfg.fifo_enable & INV_X_GYRO)
10008b52:	065a      	lsls	r2, r3, #25
        packet_size += 2;
10008b54:	0fd2      	lsrs	r2, r2, #31
10008b56:	0055      	lsls	r5, r2, #1
    if (st.chip_cfg.fifo_enable & INV_Y_GYRO)
10008b58:	069a      	lsls	r2, r3, #26
10008b5a:	d501      	bpl.n	10008b60 <mpu_read_fifo+0x3c>
        packet_size += 2;
10008b5c:	1caa      	adds	r2, r5, #2
10008b5e:	b2d5      	uxtb	r5, r2
    if (st.chip_cfg.fifo_enable & INV_Z_GYRO)
10008b60:	06da      	lsls	r2, r3, #27
10008b62:	d501      	bpl.n	10008b68 <mpu_read_fifo+0x44>
        packet_size += 2;
10008b64:	1caa      	adds	r2, r5, #2
10008b66:	b2d5      	uxtb	r5, r2
    if (st.chip_cfg.fifo_enable & INV_XYZ_ACCEL)
10008b68:	071b      	lsls	r3, r3, #28
10008b6a:	d501      	bpl.n	10008b70 <mpu_read_fifo+0x4c>
        packet_size += 6;
10008b6c:	1dab      	adds	r3, r5, #6
10008b6e:	b2dd      	uxtb	r5, r3

    if (i2c_read(st.hw->addr, st.reg->fifo_count_h, 2, data))
10008b70:	4b5a      	ldr	r3, [pc, #360]	; (10008cdc <mpu_read_fifo+0x1b8>)
10008b72:	681a      	ldr	r2, [r3, #0]
10008b74:	7b11      	ldrb	r1, [r2, #12]
10008b76:	685b      	ldr	r3, [r3, #4]
10008b78:	7818      	ldrb	r0, [r3, #0]
10008b7a:	ab05      	add	r3, sp, #20
10008b7c:	2202      	movs	r2, #2
10008b7e:	4c58      	ldr	r4, [pc, #352]	; (10008ce0 <mpu_read_fifo+0x1bc>)
10008b80:	47a0      	blx	r4
10008b82:	1e04      	subs	r4, r0, #0
10008b84:	d000      	beq.n	10008b88 <mpu_read_fifo+0x64>
10008b86:	e09b      	b.n	10008cc0 <mpu_read_fifo+0x19c>
        return -1;
    fifo_count = (data[0] << 8) | data[1];
10008b88:	aa05      	add	r2, sp, #20
10008b8a:	7813      	ldrb	r3, [r2, #0]
10008b8c:	021b      	lsls	r3, r3, #8
10008b8e:	7852      	ldrb	r2, [r2, #1]
10008b90:	431a      	orrs	r2, r3
10008b92:	4691      	mov	r9, r2
    if (fifo_count < packet_size)
10008b94:	b2af      	uxth	r7, r5
10008b96:	42ba      	cmp	r2, r7
10008b98:	d200      	bcs.n	10008b9c <mpu_read_fifo+0x78>
10008b9a:	e099      	b.n	10008cd0 <mpu_read_fifo+0x1ac>
        return 0;
//    log_i("FIFO count: %hd\n", fifo_count);
    if (fifo_count > (st.hw->max_fifo >> 1)) {
10008b9c:	4b4f      	ldr	r3, [pc, #316]	; (10008cdc <mpu_read_fifo+0x1b8>)
10008b9e:	685a      	ldr	r2, [r3, #4]
10008ba0:	8853      	ldrh	r3, [r2, #2]
10008ba2:	085b      	lsrs	r3, r3, #1
10008ba4:	4599      	cmp	r9, r3
10008ba6:	d913      	bls.n	10008bd0 <mpu_read_fifo+0xac>
        /* FIFO is 50% full, better check overflow bit. */
        if (i2c_read(st.hw->addr, st.reg->int_status, 1, data))
10008ba8:	4b4c      	ldr	r3, [pc, #304]	; (10008cdc <mpu_read_fifo+0x1b8>)
10008baa:	681b      	ldr	r3, [r3, #0]
10008bac:	7cd9      	ldrb	r1, [r3, #19]
10008bae:	7810      	ldrb	r0, [r2, #0]
10008bb0:	ab05      	add	r3, sp, #20
10008bb2:	2201      	movs	r2, #1
10008bb4:	4c4a      	ldr	r4, [pc, #296]	; (10008ce0 <mpu_read_fifo+0x1bc>)
10008bb6:	47a0      	blx	r4
10008bb8:	2800      	cmp	r0, #0
10008bba:	d000      	beq.n	10008bbe <mpu_read_fifo+0x9a>
10008bbc:	e083      	b.n	10008cc6 <mpu_read_fifo+0x1a2>
            return -1;
        if (data[0] & BIT_FIFO_OVERFLOW) {
10008bbe:	ab05      	add	r3, sp, #20
10008bc0:	781b      	ldrb	r3, [r3, #0]
10008bc2:	06db      	lsls	r3, r3, #27
10008bc4:	d504      	bpl.n	10008bd0 <mpu_read_fifo+0xac>
            mpu_reset_fifo();
10008bc6:	4b47      	ldr	r3, [pc, #284]	; (10008ce4 <mpu_read_fifo+0x1c0>)
10008bc8:	4798      	blx	r3
            return -2;
10008bca:	2402      	movs	r4, #2
10008bcc:	4264      	negs	r4, r4
10008bce:	e07f      	b.n	10008cd0 <mpu_read_fifo+0x1ac>
        }
    }
    get_ms((unsigned long*)timestamp);
10008bd0:	9802      	ldr	r0, [sp, #8]
10008bd2:	4b45      	ldr	r3, [pc, #276]	; (10008ce8 <mpu_read_fifo+0x1c4>)
10008bd4:	4798      	blx	r3

    if (i2c_read(st.hw->addr, st.reg->fifo_r_w, packet_size, data))
10008bd6:	4b41      	ldr	r3, [pc, #260]	; (10008cdc <mpu_read_fifo+0x1b8>)
10008bd8:	681a      	ldr	r2, [r3, #0]
10008bda:	7b51      	ldrb	r1, [r2, #13]
10008bdc:	685b      	ldr	r3, [r3, #4]
10008bde:	7818      	ldrb	r0, [r3, #0]
10008be0:	ab05      	add	r3, sp, #20
10008be2:	002a      	movs	r2, r5
10008be4:	4c3e      	ldr	r4, [pc, #248]	; (10008ce0 <mpu_read_fifo+0x1bc>)
10008be6:	47a0      	blx	r4
10008be8:	1e04      	subs	r4, r0, #0
10008bea:	d16f      	bne.n	10008ccc <mpu_read_fifo+0x1a8>
        return -1;
    more[0] = fifo_count / packet_size - 1;
10008bec:	0029      	movs	r1, r5
10008bee:	4648      	mov	r0, r9
10008bf0:	4b3e      	ldr	r3, [pc, #248]	; (10008cec <mpu_read_fifo+0x1c8>)
10008bf2:	4798      	blx	r3
10008bf4:	3801      	subs	r0, #1
10008bf6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
10008bf8:	7018      	strb	r0, [r3, #0]
    sensors[0] = 0;
10008bfa:	2300      	movs	r3, #0
10008bfc:	7033      	strb	r3, [r6, #0]

    if ((index != packet_size) && st.chip_cfg.fifo_enable & INV_XYZ_ACCEL) {
10008bfe:	2d00      	cmp	r5, #0
10008c00:	d01a      	beq.n	10008c38 <mpu_read_fifo+0x114>
10008c02:	4b36      	ldr	r3, [pc, #216]	; (10008cdc <mpu_read_fifo+0x1b8>)
10008c04:	7c1a      	ldrb	r2, [r3, #16]
        unsigned char *sensors, unsigned char *more)
{
    /* Assumes maximum packet size is gyro (6) + accel (6). */
    unsigned char data[MAX_PACKET_LENGTH];
    unsigned char packet_size = 0;
    unsigned short fifo_count, index = 0;
10008c06:	2300      	movs	r3, #0
    if (i2c_read(st.hw->addr, st.reg->fifo_r_w, packet_size, data))
        return -1;
    more[0] = fifo_count / packet_size - 1;
    sensors[0] = 0;

    if ((index != packet_size) && st.chip_cfg.fifo_enable & INV_XYZ_ACCEL) {
10008c08:	0712      	lsls	r2, r2, #28
10008c0a:	d515      	bpl.n	10008c38 <mpu_read_fifo+0x114>
        accel[0] = (data[index+0] << 8) | data[index+1];
10008c0c:	ab05      	add	r3, sp, #20
10008c0e:	781a      	ldrb	r2, [r3, #0]
10008c10:	0212      	lsls	r2, r2, #8
10008c12:	7859      	ldrb	r1, [r3, #1]
10008c14:	430a      	orrs	r2, r1
10008c16:	9803      	ldr	r0, [sp, #12]
10008c18:	8002      	strh	r2, [r0, #0]
        accel[1] = (data[index+2] << 8) | data[index+3];
10008c1a:	789a      	ldrb	r2, [r3, #2]
10008c1c:	0212      	lsls	r2, r2, #8
10008c1e:	78d9      	ldrb	r1, [r3, #3]
10008c20:	430a      	orrs	r2, r1
10008c22:	8042      	strh	r2, [r0, #2]
        accel[2] = (data[index+4] << 8) | data[index+5];
10008c24:	791a      	ldrb	r2, [r3, #4]
10008c26:	0212      	lsls	r2, r2, #8
10008c28:	795b      	ldrb	r3, [r3, #5]
10008c2a:	4313      	orrs	r3, r2
10008c2c:	8083      	strh	r3, [r0, #4]
        sensors[0] |= INV_XYZ_ACCEL;
10008c2e:	7832      	ldrb	r2, [r6, #0]
10008c30:	2308      	movs	r3, #8
10008c32:	4313      	orrs	r3, r2
10008c34:	7033      	strb	r3, [r6, #0]
        index += 6;
10008c36:	2306      	movs	r3, #6
    }
    if ((index != packet_size) && st.chip_cfg.fifo_enable & INV_X_GYRO) {
10008c38:	42bb      	cmp	r3, r7
10008c3a:	d049      	beq.n	10008cd0 <mpu_read_fifo+0x1ac>
10008c3c:	4a27      	ldr	r2, [pc, #156]	; (10008cdc <mpu_read_fifo+0x1b8>)
10008c3e:	7c12      	ldrb	r2, [r2, #16]
10008c40:	0652      	lsls	r2, r2, #25
10008c42:	d50f      	bpl.n	10008c64 <mpu_read_fifo+0x140>
        gyro[0] = (data[index+0] << 8) | data[index+1];
10008c44:	a905      	add	r1, sp, #20
10008c46:	5cca      	ldrb	r2, [r1, r3]
10008c48:	0212      	lsls	r2, r2, #8
10008c4a:	18c9      	adds	r1, r1, r3
10008c4c:	7849      	ldrb	r1, [r1, #1]
10008c4e:	430a      	orrs	r2, r1
10008c50:	9901      	ldr	r1, [sp, #4]
10008c52:	800a      	strh	r2, [r1, #0]
        sensors[0] |= INV_X_GYRO;
10008c54:	7831      	ldrb	r1, [r6, #0]
10008c56:	2240      	movs	r2, #64	; 0x40
10008c58:	430a      	orrs	r2, r1
10008c5a:	7032      	strb	r2, [r6, #0]
        index += 2;
10008c5c:	3302      	adds	r3, #2
10008c5e:	b29b      	uxth	r3, r3
    }
    if ((index != packet_size) && st.chip_cfg.fifo_enable & INV_Y_GYRO) {
10008c60:	429f      	cmp	r7, r3
10008c62:	d035      	beq.n	10008cd0 <mpu_read_fifo+0x1ac>
10008c64:	4a1d      	ldr	r2, [pc, #116]	; (10008cdc <mpu_read_fifo+0x1b8>)
10008c66:	7c12      	ldrb	r2, [r2, #16]
10008c68:	0692      	lsls	r2, r2, #26
10008c6a:	d50f      	bpl.n	10008c8c <mpu_read_fifo+0x168>
        gyro[1] = (data[index+0] << 8) | data[index+1];
10008c6c:	a905      	add	r1, sp, #20
10008c6e:	5cca      	ldrb	r2, [r1, r3]
10008c70:	0212      	lsls	r2, r2, #8
10008c72:	18c9      	adds	r1, r1, r3
10008c74:	7849      	ldrb	r1, [r1, #1]
10008c76:	430a      	orrs	r2, r1
10008c78:	9901      	ldr	r1, [sp, #4]
10008c7a:	804a      	strh	r2, [r1, #2]
        sensors[0] |= INV_Y_GYRO;
10008c7c:	7831      	ldrb	r1, [r6, #0]
10008c7e:	2220      	movs	r2, #32
10008c80:	430a      	orrs	r2, r1
10008c82:	7032      	strb	r2, [r6, #0]
        index += 2;
10008c84:	3302      	adds	r3, #2
10008c86:	b29b      	uxth	r3, r3
    }
    if ((index != packet_size) && st.chip_cfg.fifo_enable & INV_Z_GYRO) {
10008c88:	429f      	cmp	r7, r3
10008c8a:	d021      	beq.n	10008cd0 <mpu_read_fifo+0x1ac>
10008c8c:	4a13      	ldr	r2, [pc, #76]	; (10008cdc <mpu_read_fifo+0x1b8>)
10008c8e:	7c12      	ldrb	r2, [r2, #16]
10008c90:	06d2      	lsls	r2, r2, #27
10008c92:	d51d      	bpl.n	10008cd0 <mpu_read_fifo+0x1ac>
        gyro[2] = (data[index+0] << 8) | data[index+1];
10008c94:	a905      	add	r1, sp, #20
10008c96:	5cca      	ldrb	r2, [r1, r3]
10008c98:	0212      	lsls	r2, r2, #8
10008c9a:	18cb      	adds	r3, r1, r3
10008c9c:	785b      	ldrb	r3, [r3, #1]
10008c9e:	4313      	orrs	r3, r2
10008ca0:	9a01      	ldr	r2, [sp, #4]
10008ca2:	8093      	strh	r3, [r2, #4]
        sensors[0] |= INV_Z_GYRO;
10008ca4:	7832      	ldrb	r2, [r6, #0]
10008ca6:	2310      	movs	r3, #16
10008ca8:	4313      	orrs	r3, r2
10008caa:	7033      	strb	r3, [r6, #0]
10008cac:	e010      	b.n	10008cd0 <mpu_read_fifo+0x1ac>
    unsigned char data[MAX_PACKET_LENGTH];
    unsigned char packet_size = 0;
    unsigned short fifo_count, index = 0;

    if (st.chip_cfg.dmp_on)
        return -1;
10008cae:	2401      	movs	r4, #1
10008cb0:	4264      	negs	r4, r4
10008cb2:	e00d      	b.n	10008cd0 <mpu_read_fifo+0x1ac>

    sensors[0] = 0;
    if (!st.chip_cfg.sensors)
        return -1;
10008cb4:	2401      	movs	r4, #1
10008cb6:	4264      	negs	r4, r4
10008cb8:	e00a      	b.n	10008cd0 <mpu_read_fifo+0x1ac>
    if (!st.chip_cfg.fifo_enable)
        return -1;
10008cba:	2401      	movs	r4, #1
10008cbc:	4264      	negs	r4, r4
10008cbe:	e007      	b.n	10008cd0 <mpu_read_fifo+0x1ac>
        packet_size += 2;
    if (st.chip_cfg.fifo_enable & INV_XYZ_ACCEL)
        packet_size += 6;

    if (i2c_read(st.hw->addr, st.reg->fifo_count_h, 2, data))
        return -1;
10008cc0:	2401      	movs	r4, #1
10008cc2:	4264      	negs	r4, r4
10008cc4:	e004      	b.n	10008cd0 <mpu_read_fifo+0x1ac>
        return 0;
//    log_i("FIFO count: %hd\n", fifo_count);
    if (fifo_count > (st.hw->max_fifo >> 1)) {
        /* FIFO is 50% full, better check overflow bit. */
        if (i2c_read(st.hw->addr, st.reg->int_status, 1, data))
            return -1;
10008cc6:	2401      	movs	r4, #1
10008cc8:	4264      	negs	r4, r4
10008cca:	e001      	b.n	10008cd0 <mpu_read_fifo+0x1ac>
        }
    }
    get_ms((unsigned long*)timestamp);

    if (i2c_read(st.hw->addr, st.reg->fifo_r_w, packet_size, data))
        return -1;
10008ccc:	2401      	movs	r4, #1
10008cce:	4264      	negs	r4, r4
        sensors[0] |= INV_Z_GYRO;
        index += 2;
    }

    return 0;
}
10008cd0:	0020      	movs	r0, r4
10008cd2:	b008      	add	sp, #32
10008cd4:	bc04      	pop	{r2}
10008cd6:	4691      	mov	r9, r2
10008cd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
10008cda:	46c0      	nop			; (mov r8, r8)
10008cdc:	100183e8 	.word	0x100183e8
10008ce0:	1000ab09 	.word	0x1000ab09
10008ce4:	100085f1 	.word	0x100085f1
10008ce8:	1000b5ed 	.word	0x1000b5ed
10008cec:	100131a1 	.word	0x100131a1

10008cf0 <mpu_set_bypass>:
 *  @brief      Set device to bypass mode.
 *  @param[in]  bypass_on   1 to enable bypass mode.
 *  @return     0 if successful.
 */
int mpu_set_bypass(unsigned char bypass_on)
{
10008cf0:	b530      	push	{r4, r5, lr}
10008cf2:	b083      	sub	sp, #12
10008cf4:	0004      	movs	r4, r0
    unsigned char tmp;

    if (st.chip_cfg.bypass_mode == bypass_on)
10008cf6:	4b59      	ldr	r3, [pc, #356]	; (10008e5c <mpu_set_bypass+0x16c>)
10008cf8:	7c9b      	ldrb	r3, [r3, #18]
10008cfa:	4283      	cmp	r3, r0
10008cfc:	d100      	bne.n	10008d00 <mpu_set_bypass+0x10>
10008cfe:	e097      	b.n	10008e30 <mpu_set_bypass+0x140>
        return 0;

    if (bypass_on) {
10008d00:	2800      	cmp	r0, #0
10008d02:	d042      	beq.n	10008d8a <mpu_set_bypass+0x9a>
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
10008d04:	4b55      	ldr	r3, [pc, #340]	; (10008e5c <mpu_set_bypass+0x16c>)
10008d06:	681a      	ldr	r2, [r3, #0]
10008d08:	7911      	ldrb	r1, [r2, #4]
10008d0a:	685b      	ldr	r3, [r3, #4]
10008d0c:	7818      	ldrb	r0, [r3, #0]
10008d0e:	466b      	mov	r3, sp
10008d10:	3307      	adds	r3, #7
10008d12:	2201      	movs	r2, #1
10008d14:	4d52      	ldr	r5, [pc, #328]	; (10008e60 <mpu_set_bypass+0x170>)
10008d16:	47a8      	blx	r5
10008d18:	2800      	cmp	r0, #0
10008d1a:	d000      	beq.n	10008d1e <mpu_set_bypass+0x2e>
10008d1c:	e08a      	b.n	10008e34 <mpu_set_bypass+0x144>
            return -1;
        tmp &= ~BIT_AUX_IF_EN;
10008d1e:	466b      	mov	r3, sp
10008d20:	3307      	adds	r3, #7
10008d22:	781a      	ldrb	r2, [r3, #0]
10008d24:	2120      	movs	r1, #32
10008d26:	438a      	bics	r2, r1
10008d28:	701a      	strb	r2, [r3, #0]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
10008d2a:	4a4c      	ldr	r2, [pc, #304]	; (10008e5c <mpu_set_bypass+0x16c>)
10008d2c:	6811      	ldr	r1, [r2, #0]
10008d2e:	7909      	ldrb	r1, [r1, #4]
10008d30:	6852      	ldr	r2, [r2, #4]
10008d32:	7810      	ldrb	r0, [r2, #0]
10008d34:	2201      	movs	r2, #1
10008d36:	4d4b      	ldr	r5, [pc, #300]	; (10008e64 <mpu_set_bypass+0x174>)
10008d38:	47a8      	blx	r5
10008d3a:	2800      	cmp	r0, #0
10008d3c:	d17d      	bne.n	10008e3a <mpu_set_bypass+0x14a>
            return -1;
        delay_ms(3);
10008d3e:	3003      	adds	r0, #3
10008d40:	4b49      	ldr	r3, [pc, #292]	; (10008e68 <mpu_set_bypass+0x178>)
10008d42:	4798      	blx	r3
        tmp = BIT_BYPASS_EN;
10008d44:	2202      	movs	r2, #2
10008d46:	466b      	mov	r3, sp
10008d48:	71da      	strb	r2, [r3, #7]
        if (st.chip_cfg.active_low_int)
10008d4a:	2322      	movs	r3, #34	; 0x22
10008d4c:	4a43      	ldr	r2, [pc, #268]	; (10008e5c <mpu_set_bypass+0x16c>)
10008d4e:	5cd3      	ldrb	r3, [r2, r3]
10008d50:	2b00      	cmp	r3, #0
10008d52:	d002      	beq.n	10008d5a <mpu_set_bypass+0x6a>
            tmp |= BIT_ACTL;
10008d54:	2282      	movs	r2, #130	; 0x82
10008d56:	466b      	mov	r3, sp
10008d58:	71da      	strb	r2, [r3, #7]
        if (st.chip_cfg.latched_int)
10008d5a:	2323      	movs	r3, #35	; 0x23
10008d5c:	4a3f      	ldr	r2, [pc, #252]	; (10008e5c <mpu_set_bypass+0x16c>)
10008d5e:	5cd3      	ldrb	r3, [r2, r3]
10008d60:	2b00      	cmp	r3, #0
10008d62:	d005      	beq.n	10008d70 <mpu_set_bypass+0x80>
            tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
10008d64:	466b      	mov	r3, sp
10008d66:	1dda      	adds	r2, r3, #7
10008d68:	79d9      	ldrb	r1, [r3, #7]
10008d6a:	2330      	movs	r3, #48	; 0x30
10008d6c:	430b      	orrs	r3, r1
10008d6e:	7013      	strb	r3, [r2, #0]
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
10008d70:	4b3a      	ldr	r3, [pc, #232]	; (10008e5c <mpu_set_bypass+0x16c>)
10008d72:	681a      	ldr	r2, [r3, #0]
10008d74:	7dd1      	ldrb	r1, [r2, #23]
10008d76:	685b      	ldr	r3, [r3, #4]
10008d78:	7818      	ldrb	r0, [r3, #0]
10008d7a:	466b      	mov	r3, sp
10008d7c:	3307      	adds	r3, #7
10008d7e:	2201      	movs	r2, #1
10008d80:	4d38      	ldr	r5, [pc, #224]	; (10008e64 <mpu_set_bypass+0x174>)
10008d82:	47a8      	blx	r5
10008d84:	2800      	cmp	r0, #0
10008d86:	d04f      	beq.n	10008e28 <mpu_set_bypass+0x138>
10008d88:	e05a      	b.n	10008e40 <mpu_set_bypass+0x150>
            return -1;
    } else {
        /* Enable I2C master mode if compass is being used. */
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
10008d8a:	4b34      	ldr	r3, [pc, #208]	; (10008e5c <mpu_set_bypass+0x16c>)
10008d8c:	681a      	ldr	r2, [r3, #0]
10008d8e:	7911      	ldrb	r1, [r2, #4]
10008d90:	685b      	ldr	r3, [r3, #4]
10008d92:	7818      	ldrb	r0, [r3, #0]
10008d94:	466b      	mov	r3, sp
10008d96:	3307      	adds	r3, #7
10008d98:	2201      	movs	r2, #1
10008d9a:	4d31      	ldr	r5, [pc, #196]	; (10008e60 <mpu_set_bypass+0x170>)
10008d9c:	47a8      	blx	r5
10008d9e:	2800      	cmp	r0, #0
10008da0:	d151      	bne.n	10008e46 <mpu_set_bypass+0x156>
            return -1;
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
10008da2:	4b2e      	ldr	r3, [pc, #184]	; (10008e5c <mpu_set_bypass+0x16c>)
10008da4:	7a9b      	ldrb	r3, [r3, #10]
10008da6:	07db      	lsls	r3, r3, #31
10008da8:	d506      	bpl.n	10008db8 <mpu_set_bypass+0xc8>
            tmp |= BIT_AUX_IF_EN;
10008daa:	466b      	mov	r3, sp
10008dac:	1dda      	adds	r2, r3, #7
10008dae:	79d9      	ldrb	r1, [r3, #7]
10008db0:	2320      	movs	r3, #32
10008db2:	430b      	orrs	r3, r1
10008db4:	7013      	strb	r3, [r2, #0]
10008db6:	e005      	b.n	10008dc4 <mpu_set_bypass+0xd4>
        else
            tmp &= ~BIT_AUX_IF_EN;
10008db8:	466b      	mov	r3, sp
10008dba:	1dda      	adds	r2, r3, #7
10008dbc:	79db      	ldrb	r3, [r3, #7]
10008dbe:	2120      	movs	r1, #32
10008dc0:	438b      	bics	r3, r1
10008dc2:	7013      	strb	r3, [r2, #0]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
10008dc4:	4b25      	ldr	r3, [pc, #148]	; (10008e5c <mpu_set_bypass+0x16c>)
10008dc6:	681a      	ldr	r2, [r3, #0]
10008dc8:	7911      	ldrb	r1, [r2, #4]
10008dca:	685b      	ldr	r3, [r3, #4]
10008dcc:	7818      	ldrb	r0, [r3, #0]
10008dce:	466b      	mov	r3, sp
10008dd0:	3307      	adds	r3, #7
10008dd2:	2201      	movs	r2, #1
10008dd4:	4d23      	ldr	r5, [pc, #140]	; (10008e64 <mpu_set_bypass+0x174>)
10008dd6:	47a8      	blx	r5
10008dd8:	2800      	cmp	r0, #0
10008dda:	d137      	bne.n	10008e4c <mpu_set_bypass+0x15c>
            return -1;
        delay_ms(3);
10008ddc:	3003      	adds	r0, #3
10008dde:	4b22      	ldr	r3, [pc, #136]	; (10008e68 <mpu_set_bypass+0x178>)
10008de0:	4798      	blx	r3
        if (st.chip_cfg.active_low_int)
10008de2:	2322      	movs	r3, #34	; 0x22
10008de4:	4a1d      	ldr	r2, [pc, #116]	; (10008e5c <mpu_set_bypass+0x16c>)
10008de6:	5cd3      	ldrb	r3, [r2, r3]
10008de8:	2b00      	cmp	r3, #0
10008dea:	d003      	beq.n	10008df4 <mpu_set_bypass+0x104>
            tmp = BIT_ACTL;
10008dec:	2280      	movs	r2, #128	; 0x80
10008dee:	466b      	mov	r3, sp
10008df0:	71da      	strb	r2, [r3, #7]
10008df2:	e002      	b.n	10008dfa <mpu_set_bypass+0x10a>
        else
            tmp = 0;
10008df4:	2200      	movs	r2, #0
10008df6:	466b      	mov	r3, sp
10008df8:	71da      	strb	r2, [r3, #7]
        if (st.chip_cfg.latched_int)
10008dfa:	2323      	movs	r3, #35	; 0x23
10008dfc:	4a17      	ldr	r2, [pc, #92]	; (10008e5c <mpu_set_bypass+0x16c>)
10008dfe:	5cd3      	ldrb	r3, [r2, r3]
10008e00:	2b00      	cmp	r3, #0
10008e02:	d005      	beq.n	10008e10 <mpu_set_bypass+0x120>
            tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
10008e04:	466b      	mov	r3, sp
10008e06:	1dda      	adds	r2, r3, #7
10008e08:	79d9      	ldrb	r1, [r3, #7]
10008e0a:	2330      	movs	r3, #48	; 0x30
10008e0c:	430b      	orrs	r3, r1
10008e0e:	7013      	strb	r3, [r2, #0]
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
10008e10:	4b12      	ldr	r3, [pc, #72]	; (10008e5c <mpu_set_bypass+0x16c>)
10008e12:	681a      	ldr	r2, [r3, #0]
10008e14:	7dd1      	ldrb	r1, [r2, #23]
10008e16:	685b      	ldr	r3, [r3, #4]
10008e18:	7818      	ldrb	r0, [r3, #0]
10008e1a:	466b      	mov	r3, sp
10008e1c:	3307      	adds	r3, #7
10008e1e:	2201      	movs	r2, #1
10008e20:	4d10      	ldr	r5, [pc, #64]	; (10008e64 <mpu_set_bypass+0x174>)
10008e22:	47a8      	blx	r5
10008e24:	2800      	cmp	r0, #0
10008e26:	d114      	bne.n	10008e52 <mpu_set_bypass+0x162>
            return -1;
    }
    st.chip_cfg.bypass_mode = bypass_on;
10008e28:	4b0c      	ldr	r3, [pc, #48]	; (10008e5c <mpu_set_bypass+0x16c>)
10008e2a:	749c      	strb	r4, [r3, #18]
    return 0;
10008e2c:	2000      	movs	r0, #0
10008e2e:	e012      	b.n	10008e56 <mpu_set_bypass+0x166>
int mpu_set_bypass(unsigned char bypass_on)
{
    unsigned char tmp;

    if (st.chip_cfg.bypass_mode == bypass_on)
        return 0;
10008e30:	2000      	movs	r0, #0
10008e32:	e010      	b.n	10008e56 <mpu_set_bypass+0x166>

    if (bypass_on) {
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
            return -1;
10008e34:	2001      	movs	r0, #1
10008e36:	4240      	negs	r0, r0
10008e38:	e00d      	b.n	10008e56 <mpu_set_bypass+0x166>
        tmp &= ~BIT_AUX_IF_EN;
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
            return -1;
10008e3a:	2001      	movs	r0, #1
10008e3c:	4240      	negs	r0, r0
10008e3e:	e00a      	b.n	10008e56 <mpu_set_bypass+0x166>
        if (st.chip_cfg.active_low_int)
            tmp |= BIT_ACTL;
        if (st.chip_cfg.latched_int)
            tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
            return -1;
10008e40:	2001      	movs	r0, #1
10008e42:	4240      	negs	r0, r0
10008e44:	e007      	b.n	10008e56 <mpu_set_bypass+0x166>
    } else {
        /* Enable I2C master mode if compass is being used. */
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
            return -1;
10008e46:	2001      	movs	r0, #1
10008e48:	4240      	negs	r0, r0
10008e4a:	e004      	b.n	10008e56 <mpu_set_bypass+0x166>
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
            tmp |= BIT_AUX_IF_EN;
        else
            tmp &= ~BIT_AUX_IF_EN;
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
            return -1;
10008e4c:	2001      	movs	r0, #1
10008e4e:	4240      	negs	r0, r0
10008e50:	e001      	b.n	10008e56 <mpu_set_bypass+0x166>
        else
            tmp = 0;
        if (st.chip_cfg.latched_int)
            tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
            return -1;
10008e52:	2001      	movs	r0, #1
10008e54:	4240      	negs	r0, r0
    }
    st.chip_cfg.bypass_mode = bypass_on;
    return 0;
}
10008e56:	b003      	add	sp, #12
10008e58:	bd30      	pop	{r4, r5, pc}
10008e5a:	46c0      	nop			; (mov r8, r8)
10008e5c:	100183e8 	.word	0x100183e8
10008e60:	1000ab09 	.word	0x1000ab09
10008e64:	1000aaad 	.word	0x1000aaad
10008e68:	10008129 	.word	0x10008129

10008e6c <mpu_set_int_latched>:
 *  Any MPU register will clear the interrupt.
 *  @param[in]  enable  1 to enable, 0 to disable.
 *  @return     0 if successful.
 */
int mpu_set_int_latched(unsigned char enable)
{
10008e6c:	b530      	push	{r4, r5, lr}
10008e6e:	b083      	sub	sp, #12
10008e70:	0004      	movs	r4, r0
    unsigned char tmp;
    if (st.chip_cfg.latched_int == enable)
10008e72:	2323      	movs	r3, #35	; 0x23
10008e74:	4a1c      	ldr	r2, [pc, #112]	; (10008ee8 <mpu_set_int_latched+0x7c>)
10008e76:	5cd3      	ldrb	r3, [r2, r3]
10008e78:	4283      	cmp	r3, r0
10008e7a:	d02e      	beq.n	10008eda <mpu_set_int_latched+0x6e>
        return 0;

    if (enable)
10008e7c:	2800      	cmp	r0, #0
10008e7e:	d003      	beq.n	10008e88 <mpu_set_int_latched+0x1c>
        tmp = BIT_LATCH_EN | BIT_ANY_RD_CLR;
10008e80:	2230      	movs	r2, #48	; 0x30
10008e82:	466b      	mov	r3, sp
10008e84:	71da      	strb	r2, [r3, #7]
10008e86:	e002      	b.n	10008e8e <mpu_set_int_latched+0x22>
    else
        tmp = 0;
10008e88:	2200      	movs	r2, #0
10008e8a:	466b      	mov	r3, sp
10008e8c:	71da      	strb	r2, [r3, #7]
    if (st.chip_cfg.bypass_mode)
10008e8e:	4b16      	ldr	r3, [pc, #88]	; (10008ee8 <mpu_set_int_latched+0x7c>)
10008e90:	7c9b      	ldrb	r3, [r3, #18]
10008e92:	2b00      	cmp	r3, #0
10008e94:	d005      	beq.n	10008ea2 <mpu_set_int_latched+0x36>
        tmp |= BIT_BYPASS_EN;
10008e96:	466b      	mov	r3, sp
10008e98:	1dda      	adds	r2, r3, #7
10008e9a:	79d9      	ldrb	r1, [r3, #7]
10008e9c:	2302      	movs	r3, #2
10008e9e:	430b      	orrs	r3, r1
10008ea0:	7013      	strb	r3, [r2, #0]
    if (st.chip_cfg.active_low_int)
10008ea2:	2322      	movs	r3, #34	; 0x22
10008ea4:	4a10      	ldr	r2, [pc, #64]	; (10008ee8 <mpu_set_int_latched+0x7c>)
10008ea6:	5cd3      	ldrb	r3, [r2, r3]
10008ea8:	2b00      	cmp	r3, #0
10008eaa:	d006      	beq.n	10008eba <mpu_set_int_latched+0x4e>
        tmp |= BIT_ACTL;
10008eac:	466b      	mov	r3, sp
10008eae:	1dda      	adds	r2, r3, #7
10008eb0:	79db      	ldrb	r3, [r3, #7]
10008eb2:	2180      	movs	r1, #128	; 0x80
10008eb4:	4249      	negs	r1, r1
10008eb6:	430b      	orrs	r3, r1
10008eb8:	7013      	strb	r3, [r2, #0]
    if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
10008eba:	4b0b      	ldr	r3, [pc, #44]	; (10008ee8 <mpu_set_int_latched+0x7c>)
10008ebc:	681a      	ldr	r2, [r3, #0]
10008ebe:	7dd1      	ldrb	r1, [r2, #23]
10008ec0:	685b      	ldr	r3, [r3, #4]
10008ec2:	7818      	ldrb	r0, [r3, #0]
10008ec4:	466b      	mov	r3, sp
10008ec6:	3307      	adds	r3, #7
10008ec8:	2201      	movs	r2, #1
10008eca:	4d08      	ldr	r5, [pc, #32]	; (10008eec <mpu_set_int_latched+0x80>)
10008ecc:	47a8      	blx	r5
10008ece:	2800      	cmp	r0, #0
10008ed0:	d105      	bne.n	10008ede <mpu_set_int_latched+0x72>
        return -1;
    st.chip_cfg.latched_int = enable;
10008ed2:	2323      	movs	r3, #35	; 0x23
10008ed4:	4a04      	ldr	r2, [pc, #16]	; (10008ee8 <mpu_set_int_latched+0x7c>)
10008ed6:	54d4      	strb	r4, [r2, r3]
    return 0;
10008ed8:	e003      	b.n	10008ee2 <mpu_set_int_latched+0x76>
 */
int mpu_set_int_latched(unsigned char enable)
{
    unsigned char tmp;
    if (st.chip_cfg.latched_int == enable)
        return 0;
10008eda:	2000      	movs	r0, #0
10008edc:	e001      	b.n	10008ee2 <mpu_set_int_latched+0x76>
    if (st.chip_cfg.bypass_mode)
        tmp |= BIT_BYPASS_EN;
    if (st.chip_cfg.active_low_int)
        tmp |= BIT_ACTL;
    if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
        return -1;
10008ede:	2001      	movs	r0, #1
10008ee0:	4240      	negs	r0, r0
    st.chip_cfg.latched_int = enable;
    return 0;
}
10008ee2:	b003      	add	sp, #12
10008ee4:	bd30      	pop	{r4, r5, pc}
10008ee6:	46c0      	nop			; (mov r8, r8)
10008ee8:	100183e8 	.word	0x100183e8
10008eec:	1000aaad 	.word	0x1000aaad

10008ef0 <mpu_lp_accel_mode>:
 *  @param[in]  rate        Minimum sampling rate, or zero to disable LP
 *                          accel mode.
 *  @return     0 if successful.
 */
int mpu_lp_accel_mode(unsigned short rate)
{
10008ef0:	b510      	push	{r4, lr}
10008ef2:	b082      	sub	sp, #8
10008ef4:	1e04      	subs	r4, r0, #0
    unsigned char tmp[2];

    if (rate > 40)
10008ef6:	2c28      	cmp	r4, #40	; 0x28
10008ef8:	d878      	bhi.n	10008fec <mpu_lp_accel_mode+0xfc>
        return -1;

    if (!rate) {
10008efa:	2800      	cmp	r0, #0
10008efc:	d115      	bne.n	10008f2a <mpu_lp_accel_mode+0x3a>
        mpu_set_int_latched(0);
10008efe:	2000      	movs	r0, #0
10008f00:	4b44      	ldr	r3, [pc, #272]	; (10009014 <mpu_lp_accel_mode+0x124>)
10008f02:	4798      	blx	r3
        tmp[0] = 0;
10008f04:	ab01      	add	r3, sp, #4
10008f06:	2200      	movs	r2, #0
10008f08:	701a      	strb	r2, [r3, #0]
        tmp[1] = BIT_STBY_XYZG;
10008f0a:	3207      	adds	r2, #7
10008f0c:	705a      	strb	r2, [r3, #1]
        if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
10008f0e:	4a42      	ldr	r2, [pc, #264]	; (10009018 <mpu_lp_accel_mode+0x128>)
10008f10:	6811      	ldr	r1, [r2, #0]
10008f12:	7d49      	ldrb	r1, [r1, #21]
10008f14:	6852      	ldr	r2, [r2, #4]
10008f16:	7810      	ldrb	r0, [r2, #0]
10008f18:	2202      	movs	r2, #2
10008f1a:	4c40      	ldr	r4, [pc, #256]	; (1000901c <mpu_lp_accel_mode+0x12c>)
10008f1c:	47a0      	blx	r4
10008f1e:	1e04      	subs	r4, r0, #0
10008f20:	d167      	bne.n	10008ff2 <mpu_lp_accel_mode+0x102>
            return -1;
        st.chip_cfg.lp_accel_mode = 0;
10008f22:	2200      	movs	r2, #0
10008f24:	4b3c      	ldr	r3, [pc, #240]	; (10009018 <mpu_lp_accel_mode+0x128>)
10008f26:	751a      	strb	r2, [r3, #20]
        return 0;
10008f28:	e071      	b.n	1000900e <mpu_lp_accel_mode+0x11e>
     * it gets a chance to deassert the interrupt pin; therefore, we shift this
     * responsibility over to the MCU.
     *
     * Any register read will clear the interrupt.
     */
    mpu_set_int_latched(1);
10008f2a:	2001      	movs	r0, #1
10008f2c:	4b39      	ldr	r3, [pc, #228]	; (10009014 <mpu_lp_accel_mode+0x124>)
10008f2e:	4798      	blx	r3
    tmp[1] = (tmp[1] << 6) | BIT_STBY_XYZG;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
        return -1;
#elif defined MPU6500
    /* Set wake frequency. */
    if (rate == 1)
10008f30:	2c01      	cmp	r4, #1
10008f32:	d103      	bne.n	10008f3c <mpu_lp_accel_mode+0x4c>
        tmp[0] = INV_LPA_1_25HZ;
10008f34:	2202      	movs	r2, #2
10008f36:	ab01      	add	r3, sp, #4
10008f38:	701a      	strb	r2, [r3, #0]
10008f3a:	e01a      	b.n	10008f72 <mpu_lp_accel_mode+0x82>
    else if (rate == 2)
10008f3c:	2c02      	cmp	r4, #2
10008f3e:	d103      	bne.n	10008f48 <mpu_lp_accel_mode+0x58>
        tmp[0] = INV_LPA_2_5HZ;
10008f40:	2203      	movs	r2, #3
10008f42:	ab01      	add	r3, sp, #4
10008f44:	701a      	strb	r2, [r3, #0]
10008f46:	e014      	b.n	10008f72 <mpu_lp_accel_mode+0x82>
    else if (rate <= 5)
10008f48:	2c05      	cmp	r4, #5
10008f4a:	d803      	bhi.n	10008f54 <mpu_lp_accel_mode+0x64>
        tmp[0] = INV_LPA_5HZ;
10008f4c:	2204      	movs	r2, #4
10008f4e:	ab01      	add	r3, sp, #4
10008f50:	701a      	strb	r2, [r3, #0]
10008f52:	e00e      	b.n	10008f72 <mpu_lp_accel_mode+0x82>
    else if (rate <= 10)
10008f54:	2c0a      	cmp	r4, #10
10008f56:	d803      	bhi.n	10008f60 <mpu_lp_accel_mode+0x70>
        tmp[0] = INV_LPA_10HZ;
10008f58:	2205      	movs	r2, #5
10008f5a:	ab01      	add	r3, sp, #4
10008f5c:	701a      	strb	r2, [r3, #0]
10008f5e:	e008      	b.n	10008f72 <mpu_lp_accel_mode+0x82>
    else if (rate <= 20)
10008f60:	2c14      	cmp	r4, #20
10008f62:	d803      	bhi.n	10008f6c <mpu_lp_accel_mode+0x7c>
        tmp[0] = INV_LPA_20HZ;
10008f64:	2206      	movs	r2, #6
10008f66:	ab01      	add	r3, sp, #4
10008f68:	701a      	strb	r2, [r3, #0]
10008f6a:	e002      	b.n	10008f72 <mpu_lp_accel_mode+0x82>
    else if (rate <= 40)
        tmp[0] = INV_LPA_40HZ;
10008f6c:	2207      	movs	r2, #7
10008f6e:	ab01      	add	r3, sp, #4
10008f70:	701a      	strb	r2, [r3, #0]
        tmp[0] = INV_LPA_160HZ;
    else if (rate <= 320)
        tmp[0] = INV_LPA_320HZ;
    else
        tmp[0] = INV_LPA_640HZ;
    if (i2c_write(st.hw->addr, st.reg->lp_accel_odr, 1, tmp))
10008f72:	4b29      	ldr	r3, [pc, #164]	; (10009018 <mpu_lp_accel_mode+0x128>)
10008f74:	681a      	ldr	r2, [r3, #0]
10008f76:	7a51      	ldrb	r1, [r2, #9]
10008f78:	685b      	ldr	r3, [r3, #4]
10008f7a:	7818      	ldrb	r0, [r3, #0]
10008f7c:	ab01      	add	r3, sp, #4
10008f7e:	2201      	movs	r2, #1
10008f80:	4c26      	ldr	r4, [pc, #152]	; (1000901c <mpu_lp_accel_mode+0x12c>)
10008f82:	47a0      	blx	r4
10008f84:	2800      	cmp	r0, #0
10008f86:	d137      	bne.n	10008ff8 <mpu_lp_accel_mode+0x108>
        return -1;
    /* Enable LP ACCEL mode, ACCEL_FCHOICE_B=1*/
    if (i2c_read(st.hw->addr, st.reg->accel_cfg2, 1, tmp))
10008f88:	4b23      	ldr	r3, [pc, #140]	; (10009018 <mpu_lp_accel_mode+0x128>)
10008f8a:	681a      	ldr	r2, [r3, #0]
10008f8c:	7a11      	ldrb	r1, [r2, #8]
10008f8e:	685b      	ldr	r3, [r3, #4]
10008f90:	7818      	ldrb	r0, [r3, #0]
10008f92:	ab01      	add	r3, sp, #4
10008f94:	2201      	movs	r2, #1
10008f96:	4c22      	ldr	r4, [pc, #136]	; (10009020 <mpu_lp_accel_mode+0x130>)
10008f98:	47a0      	blx	r4
10008f9a:	2800      	cmp	r0, #0
10008f9c:	d12f      	bne.n	10008ffe <mpu_lp_accel_mode+0x10e>
       	return -1;

    tmp[0] = BIT_ACCL_FC_B | tmp[0];
10008f9e:	ab01      	add	r3, sp, #4
10008fa0:	7819      	ldrb	r1, [r3, #0]
10008fa2:	2208      	movs	r2, #8
10008fa4:	430a      	orrs	r2, r1
10008fa6:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->accel_cfg2, 1, tmp))
10008fa8:	4a1b      	ldr	r2, [pc, #108]	; (10009018 <mpu_lp_accel_mode+0x128>)
10008faa:	6811      	ldr	r1, [r2, #0]
10008fac:	7a09      	ldrb	r1, [r1, #8]
10008fae:	6852      	ldr	r2, [r2, #4]
10008fb0:	7810      	ldrb	r0, [r2, #0]
10008fb2:	2201      	movs	r2, #1
10008fb4:	4c19      	ldr	r4, [pc, #100]	; (1000901c <mpu_lp_accel_mode+0x12c>)
10008fb6:	47a0      	blx	r4
10008fb8:	2800      	cmp	r0, #0
10008fba:	d123      	bne.n	10009004 <mpu_lp_accel_mode+0x114>
    	return -1;
    tmp[0] = BIT_LPA_CYCLE;
10008fbc:	ab01      	add	r3, sp, #4
10008fbe:	2220      	movs	r2, #32
10008fc0:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, tmp))
10008fc2:	4a15      	ldr	r2, [pc, #84]	; (10009018 <mpu_lp_accel_mode+0x128>)
10008fc4:	6811      	ldr	r1, [r2, #0]
10008fc6:	7d49      	ldrb	r1, [r1, #21]
10008fc8:	6852      	ldr	r2, [r2, #4]
10008fca:	7810      	ldrb	r0, [r2, #0]
10008fcc:	2201      	movs	r2, #1
10008fce:	4c13      	ldr	r4, [pc, #76]	; (1000901c <mpu_lp_accel_mode+0x12c>)
10008fd0:	47a0      	blx	r4
10008fd2:	1e04      	subs	r4, r0, #0
10008fd4:	d119      	bne.n	1000900a <mpu_lp_accel_mode+0x11a>
        return -1;
#endif
    st.chip_cfg.sensors = INV_XYZ_ACCEL;
10008fd6:	4b10      	ldr	r3, [pc, #64]	; (10009018 <mpu_lp_accel_mode+0x128>)
10008fd8:	2208      	movs	r2, #8
10008fda:	729a      	strb	r2, [r3, #10]
    st.chip_cfg.clk_src = 0;
10008fdc:	2200      	movs	r2, #0
10008fde:	731a      	strb	r2, [r3, #12]
    st.chip_cfg.lp_accel_mode = 1;
10008fe0:	3201      	adds	r2, #1
10008fe2:	751a      	strb	r2, [r3, #20]
    mpu_configure_fifo(0);
10008fe4:	2000      	movs	r0, #0
10008fe6:	4b0f      	ldr	r3, [pc, #60]	; (10009024 <mpu_lp_accel_mode+0x134>)
10008fe8:	4798      	blx	r3

    return 0;
10008fea:	e010      	b.n	1000900e <mpu_lp_accel_mode+0x11e>
int mpu_lp_accel_mode(unsigned short rate)
{
    unsigned char tmp[2];

    if (rate > 40)
        return -1;
10008fec:	2401      	movs	r4, #1
10008fee:	4264      	negs	r4, r4
10008ff0:	e00d      	b.n	1000900e <mpu_lp_accel_mode+0x11e>
    if (!rate) {
        mpu_set_int_latched(0);
        tmp[0] = 0;
        tmp[1] = BIT_STBY_XYZG;
        if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
            return -1;
10008ff2:	2401      	movs	r4, #1
10008ff4:	4264      	negs	r4, r4
10008ff6:	e00a      	b.n	1000900e <mpu_lp_accel_mode+0x11e>
    else if (rate <= 320)
        tmp[0] = INV_LPA_320HZ;
    else
        tmp[0] = INV_LPA_640HZ;
    if (i2c_write(st.hw->addr, st.reg->lp_accel_odr, 1, tmp))
        return -1;
10008ff8:	2401      	movs	r4, #1
10008ffa:	4264      	negs	r4, r4
10008ffc:	e007      	b.n	1000900e <mpu_lp_accel_mode+0x11e>
    /* Enable LP ACCEL mode, ACCEL_FCHOICE_B=1*/
    if (i2c_read(st.hw->addr, st.reg->accel_cfg2, 1, tmp))
       	return -1;
10008ffe:	2401      	movs	r4, #1
10009000:	4264      	negs	r4, r4
10009002:	e004      	b.n	1000900e <mpu_lp_accel_mode+0x11e>

    tmp[0] = BIT_ACCL_FC_B | tmp[0];
    if (i2c_write(st.hw->addr, st.reg->accel_cfg2, 1, tmp))
    	return -1;
10009004:	2401      	movs	r4, #1
10009006:	4264      	negs	r4, r4
10009008:	e001      	b.n	1000900e <mpu_lp_accel_mode+0x11e>
    tmp[0] = BIT_LPA_CYCLE;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, tmp))
        return -1;
1000900a:	2401      	movs	r4, #1
1000900c:	4264      	negs	r4, r4
    st.chip_cfg.clk_src = 0;
    st.chip_cfg.lp_accel_mode = 1;
    mpu_configure_fifo(0);

    return 0;
}
1000900e:	0020      	movs	r0, r4
10009010:	b002      	add	sp, #8
10009012:	bd10      	pop	{r4, pc}
10009014:	10008e6d 	.word	0x10008e6d
10009018:	100183e8 	.word	0x100183e8
1000901c:	1000aaad 	.word	0x1000aaad
10009020:	1000ab09 	.word	0x1000ab09
10009024:	10008ab9 	.word	0x10008ab9

10009028 <mpu_set_sample_rate>:
 *  Sampling rate must be between 4Hz and 1kHz.
 *  @param[in]  rate    Desired sampling rate (Hz).
 *  @return     0 if successful.
 */
int mpu_set_sample_rate(unsigned short rate)
{
10009028:	b530      	push	{r4, r5, lr}
1000902a:	b083      	sub	sp, #12
1000902c:	0004      	movs	r4, r0
    unsigned char data;

    if (!(st.chip_cfg.sensors))
1000902e:	4b2c      	ldr	r3, [pc, #176]	; (100090e0 <mpu_set_sample_rate+0xb8>)
10009030:	7a9b      	ldrb	r3, [r3, #10]
10009032:	2b00      	cmp	r3, #0
10009034:	d048      	beq.n	100090c8 <mpu_set_sample_rate+0xa0>
        return -1;

    if (st.chip_cfg.dmp_on)
10009036:	2324      	movs	r3, #36	; 0x24
10009038:	4a29      	ldr	r2, [pc, #164]	; (100090e0 <mpu_set_sample_rate+0xb8>)
1000903a:	5cd3      	ldrb	r3, [r2, r3]
1000903c:	2b00      	cmp	r3, #0
1000903e:	d146      	bne.n	100090ce <mpu_set_sample_rate+0xa6>
        return -1;
    else {
        if (st.chip_cfg.lp_accel_mode) {
10009040:	7d13      	ldrb	r3, [r2, #20]
10009042:	2b00      	cmp	r3, #0
10009044:	d00a      	beq.n	1000905c <mpu_set_sample_rate+0x34>
            if (rate && (rate <= 40)) {
10009046:	1e43      	subs	r3, r0, #1
10009048:	b29b      	uxth	r3, r3
1000904a:	2b27      	cmp	r3, #39	; 0x27
1000904c:	d803      	bhi.n	10009056 <mpu_set_sample_rate+0x2e>
                /* Just stay in low-power accel mode. */
                mpu_lp_accel_mode(rate);
1000904e:	4b25      	ldr	r3, [pc, #148]	; (100090e4 <mpu_set_sample_rate+0xbc>)
10009050:	4798      	blx	r3
                return 0;
10009052:	2400      	movs	r4, #0
10009054:	e040      	b.n	100090d8 <mpu_set_sample_rate+0xb0>
            }
            /* Requested rate exceeds the allowed frequencies in LP accel mode,
             * switch back to full-power mode.
             */
            mpu_lp_accel_mode(0);
10009056:	2000      	movs	r0, #0
10009058:	4b22      	ldr	r3, [pc, #136]	; (100090e4 <mpu_set_sample_rate+0xbc>)
1000905a:	4798      	blx	r3
        }
        if (rate < 4)
            rate = 4;
1000905c:	2104      	movs	r1, #4
            /* Requested rate exceeds the allowed frequencies in LP accel mode,
             * switch back to full-power mode.
             */
            mpu_lp_accel_mode(0);
        }
        if (rate < 4)
1000905e:	2c03      	cmp	r4, #3
10009060:	d907      	bls.n	10009072 <mpu_set_sample_rate+0x4a>
10009062:	1c21      	adds	r1, r4, #0
10009064:	23fa      	movs	r3, #250	; 0xfa
10009066:	009b      	lsls	r3, r3, #2
10009068:	429c      	cmp	r4, r3
1000906a:	d901      	bls.n	10009070 <mpu_set_sample_rate+0x48>
1000906c:	4b1e      	ldr	r3, [pc, #120]	; (100090e8 <mpu_set_sample_rate+0xc0>)
1000906e:	8819      	ldrh	r1, [r3, #0]
10009070:	b289      	uxth	r1, r1
            rate = 4;
        else if (rate > 1000)
            rate = 1000;

        data = 1000 / rate - 1;
10009072:	466b      	mov	r3, sp
10009074:	1ddc      	adds	r4, r3, #7
10009076:	20fa      	movs	r0, #250	; 0xfa
10009078:	0080      	lsls	r0, r0, #2
1000907a:	4b1c      	ldr	r3, [pc, #112]	; (100090ec <mpu_set_sample_rate+0xc4>)
1000907c:	4798      	blx	r3
1000907e:	3801      	subs	r0, #1
10009080:	7020      	strb	r0, [r4, #0]
        if (i2c_write(st.hw->addr, st.reg->rate_div, 1, &data))
10009082:	4b17      	ldr	r3, [pc, #92]	; (100090e0 <mpu_set_sample_rate+0xb8>)
10009084:	681a      	ldr	r2, [r3, #0]
10009086:	7851      	ldrb	r1, [r2, #1]
10009088:	685b      	ldr	r3, [r3, #4]
1000908a:	7818      	ldrb	r0, [r3, #0]
1000908c:	0023      	movs	r3, r4
1000908e:	2201      	movs	r2, #1
10009090:	4c17      	ldr	r4, [pc, #92]	; (100090f0 <mpu_set_sample_rate+0xc8>)
10009092:	47a0      	blx	r4
10009094:	1e04      	subs	r4, r0, #0
10009096:	d11d      	bne.n	100090d4 <mpu_set_sample_rate+0xac>
            return -1;

        st.chip_cfg.sample_rate = 1000 / (1 + data);
10009098:	4d11      	ldr	r5, [pc, #68]	; (100090e0 <mpu_set_sample_rate+0xb8>)
1000909a:	466b      	mov	r3, sp
1000909c:	79d9      	ldrb	r1, [r3, #7]
1000909e:	3101      	adds	r1, #1
100090a0:	20fa      	movs	r0, #250	; 0xfa
100090a2:	0080      	lsls	r0, r0, #2
100090a4:	4b11      	ldr	r3, [pc, #68]	; (100090ec <mpu_set_sample_rate+0xc4>)
100090a6:	4798      	blx	r3
100090a8:	81e8      	strh	r0, [r5, #14]

#ifdef AK89xx_SECONDARY
        mpu_set_compass_sample_rate(min(st.chip_cfg.compass_sample_rate, MAX_COMPASS_SAMPLE_RATE));
100090aa:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
100090ac:	1c18      	adds	r0, r3, #0
100090ae:	b29b      	uxth	r3, r3
100090b0:	2b64      	cmp	r3, #100	; 0x64
100090b2:	d900      	bls.n	100090b6 <mpu_set_sample_rate+0x8e>
100090b4:	2064      	movs	r0, #100	; 0x64
100090b6:	b280      	uxth	r0, r0
100090b8:	4b0e      	ldr	r3, [pc, #56]	; (100090f4 <mpu_set_sample_rate+0xcc>)
100090ba:	4798      	blx	r3
#endif

        /* Automatically set LPF to 1/2 sampling rate. */
        mpu_set_lpf(st.chip_cfg.sample_rate >> 1);
100090bc:	4b08      	ldr	r3, [pc, #32]	; (100090e0 <mpu_set_sample_rate+0xb8>)
100090be:	89d8      	ldrh	r0, [r3, #14]
100090c0:	0840      	lsrs	r0, r0, #1
100090c2:	4b0d      	ldr	r3, [pc, #52]	; (100090f8 <mpu_set_sample_rate+0xd0>)
100090c4:	4798      	blx	r3
        return 0;
100090c6:	e007      	b.n	100090d8 <mpu_set_sample_rate+0xb0>
int mpu_set_sample_rate(unsigned short rate)
{
    unsigned char data;

    if (!(st.chip_cfg.sensors))
        return -1;
100090c8:	2401      	movs	r4, #1
100090ca:	4264      	negs	r4, r4
100090cc:	e004      	b.n	100090d8 <mpu_set_sample_rate+0xb0>

    if (st.chip_cfg.dmp_on)
        return -1;
100090ce:	2401      	movs	r4, #1
100090d0:	4264      	negs	r4, r4
100090d2:	e001      	b.n	100090d8 <mpu_set_sample_rate+0xb0>
        else if (rate > 1000)
            rate = 1000;

        data = 1000 / rate - 1;
        if (i2c_write(st.hw->addr, st.reg->rate_div, 1, &data))
            return -1;
100090d4:	2401      	movs	r4, #1
100090d6:	4264      	negs	r4, r4

        /* Automatically set LPF to 1/2 sampling rate. */
        mpu_set_lpf(st.chip_cfg.sample_rate >> 1);
        return 0;
    }
}
100090d8:	0020      	movs	r0, r4
100090da:	b003      	add	sp, #12
100090dc:	bd30      	pop	{r4, r5, pc}
100090de:	46c0      	nop			; (mov r8, r8)
100090e0:	100183e8 	.word	0x100183e8
100090e4:	10008ef1 	.word	0x10008ef1
100090e8:	1001633c 	.word	0x1001633c
100090ec:	100131a1 	.word	0x100131a1
100090f0:	1000aaad 	.word	0x1000aaad
100090f4:	10008a41 	.word	0x10008a41
100090f8:	10008969 	.word	0x10008969

100090fc <mpu_set_sensors>:
 *  \n INV_XYZ_COMPASS
 *  @param[in]  sensors    Mask of sensors to wake.
 *  @return     0 if successful.
 */
int mpu_set_sensors(unsigned char sensors)
{
100090fc:	b530      	push	{r4, r5, lr}
100090fe:	b083      	sub	sp, #12
10009100:	0004      	movs	r4, r0
    unsigned char data;
#ifdef AK89xx_SECONDARY
    unsigned char user_ctrl;
#endif

    if (sensors & INV_XYZ_GYRO)
10009102:	2370      	movs	r3, #112	; 0x70
10009104:	4203      	tst	r3, r0
10009106:	d003      	beq.n	10009110 <mpu_set_sensors+0x14>
        data = INV_CLK_PLL;
10009108:	2201      	movs	r2, #1
1000910a:	466b      	mov	r3, sp
1000910c:	71da      	strb	r2, [r3, #7]
1000910e:	e015      	b.n	1000913c <mpu_set_sensors+0x40>
    else if (sensors)
10009110:	2800      	cmp	r0, #0
10009112:	d003      	beq.n	1000911c <mpu_set_sensors+0x20>
        data = 0;
10009114:	2200      	movs	r2, #0
10009116:	466b      	mov	r3, sp
10009118:	71da      	strb	r2, [r3, #7]
1000911a:	e00f      	b.n	1000913c <mpu_set_sensors+0x40>
    else
        data = BIT_SLEEP;
1000911c:	466b      	mov	r3, sp
1000911e:	3307      	adds	r3, #7
10009120:	2240      	movs	r2, #64	; 0x40
10009122:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, &data)) {
10009124:	4a6a      	ldr	r2, [pc, #424]	; (100092d0 <mpu_set_sensors+0x1d4>)
10009126:	6811      	ldr	r1, [r2, #0]
10009128:	7d49      	ldrb	r1, [r1, #21]
1000912a:	6852      	ldr	r2, [r2, #4]
1000912c:	7810      	ldrb	r0, [r2, #0]
1000912e:	2201      	movs	r2, #1
10009130:	4d68      	ldr	r5, [pc, #416]	; (100092d4 <mpu_set_sensors+0x1d8>)
10009132:	47a8      	blx	r5
10009134:	2800      	cmp	r0, #0
10009136:	d100      	bne.n	1000913a <mpu_set_sensors+0x3e>
10009138:	e0b2      	b.n	100092a0 <mpu_set_sensors+0x1a4>
1000913a:	e00b      	b.n	10009154 <mpu_set_sensors+0x58>
1000913c:	4b64      	ldr	r3, [pc, #400]	; (100092d0 <mpu_set_sensors+0x1d4>)
1000913e:	681a      	ldr	r2, [r3, #0]
10009140:	7d51      	ldrb	r1, [r2, #21]
10009142:	685b      	ldr	r3, [r3, #4]
10009144:	7818      	ldrb	r0, [r3, #0]
10009146:	466b      	mov	r3, sp
10009148:	3307      	adds	r3, #7
1000914a:	2201      	movs	r2, #1
1000914c:	4d61      	ldr	r5, [pc, #388]	; (100092d4 <mpu_set_sensors+0x1d8>)
1000914e:	47a8      	blx	r5
10009150:	2800      	cmp	r0, #0
10009152:	d005      	beq.n	10009160 <mpu_set_sensors+0x64>
        st.chip_cfg.sensors = 0;
10009154:	2200      	movs	r2, #0
10009156:	4b5e      	ldr	r3, [pc, #376]	; (100092d0 <mpu_set_sensors+0x1d4>)
10009158:	729a      	strb	r2, [r3, #10]
        return -1;
1000915a:	2501      	movs	r5, #1
1000915c:	426d      	negs	r5, r5
1000915e:	e0b4      	b.n	100092ca <mpu_set_sensors+0x1ce>
    }
    st.chip_cfg.clk_src = data & ~BIT_SLEEP;
10009160:	466b      	mov	r3, sp
10009162:	1dda      	adds	r2, r3, #7
10009164:	79db      	ldrb	r3, [r3, #7]
10009166:	2140      	movs	r1, #64	; 0x40
10009168:	438b      	bics	r3, r1
1000916a:	4959      	ldr	r1, [pc, #356]	; (100092d0 <mpu_set_sensors+0x1d4>)
1000916c:	730b      	strb	r3, [r1, #12]

    data = 0;
1000916e:	2300      	movs	r3, #0
10009170:	7013      	strb	r3, [r2, #0]
    if (!(sensors & INV_X_GYRO))
10009172:	0663      	lsls	r3, r4, #25
10009174:	d402      	bmi.n	1000917c <mpu_set_sensors+0x80>
        data |= BIT_STBY_XG;
10009176:	2204      	movs	r2, #4
10009178:	466b      	mov	r3, sp
1000917a:	71da      	strb	r2, [r3, #7]
    if (!(sensors & INV_Y_GYRO))
1000917c:	06a3      	lsls	r3, r4, #26
1000917e:	d405      	bmi.n	1000918c <mpu_set_sensors+0x90>
        data |= BIT_STBY_YG;
10009180:	466b      	mov	r3, sp
10009182:	1dda      	adds	r2, r3, #7
10009184:	79d9      	ldrb	r1, [r3, #7]
10009186:	2302      	movs	r3, #2
10009188:	430b      	orrs	r3, r1
1000918a:	7013      	strb	r3, [r2, #0]
    if (!(sensors & INV_Z_GYRO))
1000918c:	06e3      	lsls	r3, r4, #27
1000918e:	d405      	bmi.n	1000919c <mpu_set_sensors+0xa0>
        data |= BIT_STBY_ZG;
10009190:	466b      	mov	r3, sp
10009192:	1dda      	adds	r2, r3, #7
10009194:	79d9      	ldrb	r1, [r3, #7]
10009196:	2301      	movs	r3, #1
10009198:	430b      	orrs	r3, r1
1000919a:	7013      	strb	r3, [r2, #0]
    if (!(sensors & INV_XYZ_ACCEL))
1000919c:	0723      	lsls	r3, r4, #28
1000919e:	d405      	bmi.n	100091ac <mpu_set_sensors+0xb0>
        data |= BIT_STBY_XYZA;
100091a0:	466b      	mov	r3, sp
100091a2:	1dda      	adds	r2, r3, #7
100091a4:	79d9      	ldrb	r1, [r3, #7]
100091a6:	2338      	movs	r3, #56	; 0x38
100091a8:	430b      	orrs	r3, r1
100091aa:	7013      	strb	r3, [r2, #0]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_2, 1, &data)) {
100091ac:	4b48      	ldr	r3, [pc, #288]	; (100092d0 <mpu_set_sensors+0x1d4>)
100091ae:	681a      	ldr	r2, [r3, #0]
100091b0:	7d91      	ldrb	r1, [r2, #22]
100091b2:	685b      	ldr	r3, [r3, #4]
100091b4:	7818      	ldrb	r0, [r3, #0]
100091b6:	466b      	mov	r3, sp
100091b8:	3307      	adds	r3, #7
100091ba:	2201      	movs	r2, #1
100091bc:	4d45      	ldr	r5, [pc, #276]	; (100092d4 <mpu_set_sensors+0x1d8>)
100091be:	47a8      	blx	r5
100091c0:	2800      	cmp	r0, #0
100091c2:	d005      	beq.n	100091d0 <mpu_set_sensors+0xd4>
        st.chip_cfg.sensors = 0;
100091c4:	2200      	movs	r2, #0
100091c6:	4b42      	ldr	r3, [pc, #264]	; (100092d0 <mpu_set_sensors+0x1d4>)
100091c8:	729a      	strb	r2, [r3, #10]
        return -1;
100091ca:	2501      	movs	r5, #1
100091cc:	426d      	negs	r5, r5
100091ce:	e07c      	b.n	100092ca <mpu_set_sensors+0x1ce>
    }

    if (sensors && (sensors != INV_XYZ_ACCEL))
100091d0:	2308      	movs	r3, #8
100091d2:	0022      	movs	r2, r4
100091d4:	439a      	bics	r2, r3
100091d6:	d06b      	beq.n	100092b0 <mpu_set_sensors+0x1b4>
        /* Latched interrupts only used in LP accel mode. */
        mpu_set_int_latched(0);
100091d8:	2000      	movs	r0, #0
100091da:	4b3f      	ldr	r3, [pc, #252]	; (100092d8 <mpu_set_sensors+0x1dc>)
100091dc:	4798      	blx	r3
    if (sensors & INV_XYZ_COMPASS)
        mpu_set_bypass(1);
    else
        mpu_set_bypass(0);
#else
    if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
100091de:	4b3c      	ldr	r3, [pc, #240]	; (100092d0 <mpu_set_sensors+0x1d4>)
100091e0:	681a      	ldr	r2, [r3, #0]
100091e2:	7911      	ldrb	r1, [r2, #4]
100091e4:	685b      	ldr	r3, [r3, #4]
100091e6:	7818      	ldrb	r0, [r3, #0]
100091e8:	466b      	mov	r3, sp
100091ea:	3306      	adds	r3, #6
100091ec:	2201      	movs	r2, #1
100091ee:	4d3b      	ldr	r5, [pc, #236]	; (100092dc <mpu_set_sensors+0x1e0>)
100091f0:	47a8      	blx	r5
100091f2:	2800      	cmp	r0, #0
100091f4:	d148      	bne.n	10009288 <mpu_set_sensors+0x18c>
        return -1;
    /* Handle AKM power management. */
    if (sensors & INV_XYZ_COMPASS) {
100091f6:	07e3      	lsls	r3, r4, #31
100091f8:	d509      	bpl.n	1000920e <mpu_set_sensors+0x112>
        data = AKM_SINGLE_MEASUREMENT;
100091fa:	2211      	movs	r2, #17
100091fc:	466b      	mov	r3, sp
100091fe:	71da      	strb	r2, [r3, #7]
        user_ctrl |= BIT_AUX_IF_EN;
10009200:	466b      	mov	r3, sp
10009202:	1d9a      	adds	r2, r3, #6
10009204:	7999      	ldrb	r1, [r3, #6]
10009206:	2320      	movs	r3, #32
10009208:	430b      	orrs	r3, r1
1000920a:	7013      	strb	r3, [r2, #0]
1000920c:	e008      	b.n	10009220 <mpu_set_sensors+0x124>
    } else {
        data = AKM_POWER_DOWN;
1000920e:	2210      	movs	r2, #16
10009210:	466b      	mov	r3, sp
10009212:	71da      	strb	r2, [r3, #7]
        user_ctrl &= ~BIT_AUX_IF_EN;
10009214:	466b      	mov	r3, sp
10009216:	1d9a      	adds	r2, r3, #6
10009218:	799b      	ldrb	r3, [r3, #6]
1000921a:	2120      	movs	r1, #32
1000921c:	438b      	bics	r3, r1
1000921e:	7013      	strb	r3, [r2, #0]
    }
    if (st.chip_cfg.dmp_on)
10009220:	2324      	movs	r3, #36	; 0x24
10009222:	4a2b      	ldr	r2, [pc, #172]	; (100092d0 <mpu_set_sensors+0x1d4>)
10009224:	5cd3      	ldrb	r3, [r2, r3]
10009226:	2b00      	cmp	r3, #0
10009228:	d007      	beq.n	1000923a <mpu_set_sensors+0x13e>
        user_ctrl |= BIT_DMP_EN;
1000922a:	466b      	mov	r3, sp
1000922c:	1d9a      	adds	r2, r3, #6
1000922e:	799b      	ldrb	r3, [r3, #6]
10009230:	2180      	movs	r1, #128	; 0x80
10009232:	4249      	negs	r1, r1
10009234:	430b      	orrs	r3, r1
10009236:	7013      	strb	r3, [r2, #0]
10009238:	e005      	b.n	10009246 <mpu_set_sensors+0x14a>
    else
        user_ctrl &= ~BIT_DMP_EN;
1000923a:	466b      	mov	r3, sp
1000923c:	1d9a      	adds	r2, r3, #6
1000923e:	799b      	ldrb	r3, [r3, #6]
10009240:	217f      	movs	r1, #127	; 0x7f
10009242:	400b      	ands	r3, r1
10009244:	7013      	strb	r3, [r2, #0]
    if (i2c_write(st.hw->addr, st.reg->s1_do, 1, &data))
10009246:	4b22      	ldr	r3, [pc, #136]	; (100092d0 <mpu_set_sensors+0x1d4>)
10009248:	2226      	movs	r2, #38	; 0x26
1000924a:	6819      	ldr	r1, [r3, #0]
1000924c:	5c89      	ldrb	r1, [r1, r2]
1000924e:	685b      	ldr	r3, [r3, #4]
10009250:	7818      	ldrb	r0, [r3, #0]
10009252:	466b      	mov	r3, sp
10009254:	3307      	adds	r3, #7
10009256:	3a25      	subs	r2, #37	; 0x25
10009258:	4d1e      	ldr	r5, [pc, #120]	; (100092d4 <mpu_set_sensors+0x1d8>)
1000925a:	47a8      	blx	r5
1000925c:	2800      	cmp	r0, #0
1000925e:	d116      	bne.n	1000928e <mpu_set_sensors+0x192>
        return -1;
    /* Enable/disable I2C master mode. */
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
10009260:	4b1b      	ldr	r3, [pc, #108]	; (100092d0 <mpu_set_sensors+0x1d4>)
10009262:	681a      	ldr	r2, [r3, #0]
10009264:	7911      	ldrb	r1, [r2, #4]
10009266:	685b      	ldr	r3, [r3, #4]
10009268:	7818      	ldrb	r0, [r3, #0]
1000926a:	466b      	mov	r3, sp
1000926c:	3306      	adds	r3, #6
1000926e:	2201      	movs	r2, #1
10009270:	4d18      	ldr	r5, [pc, #96]	; (100092d4 <mpu_set_sensors+0x1d8>)
10009272:	47a8      	blx	r5
10009274:	1e05      	subs	r5, r0, #0
10009276:	d10d      	bne.n	10009294 <mpu_set_sensors+0x198>
        return -1;
#endif
#endif

    st.chip_cfg.sensors = sensors;
10009278:	4b15      	ldr	r3, [pc, #84]	; (100092d0 <mpu_set_sensors+0x1d4>)
1000927a:	729c      	strb	r4, [r3, #10]
    st.chip_cfg.lp_accel_mode = 0;
1000927c:	2200      	movs	r2, #0
1000927e:	751a      	strb	r2, [r3, #20]
    delay_ms(50);
10009280:	2032      	movs	r0, #50	; 0x32
10009282:	4b17      	ldr	r3, [pc, #92]	; (100092e0 <mpu_set_sensors+0x1e4>)
10009284:	4798      	blx	r3
    return 0;
10009286:	e020      	b.n	100092ca <mpu_set_sensors+0x1ce>
        mpu_set_bypass(1);
    else
        mpu_set_bypass(0);
#else
    if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
        return -1;
10009288:	2501      	movs	r5, #1
1000928a:	426d      	negs	r5, r5
1000928c:	e01d      	b.n	100092ca <mpu_set_sensors+0x1ce>
    if (st.chip_cfg.dmp_on)
        user_ctrl |= BIT_DMP_EN;
    else
        user_ctrl &= ~BIT_DMP_EN;
    if (i2c_write(st.hw->addr, st.reg->s1_do, 1, &data))
        return -1;
1000928e:	2501      	movs	r5, #1
10009290:	426d      	negs	r5, r5
10009292:	e01a      	b.n	100092ca <mpu_set_sensors+0x1ce>
    /* Enable/disable I2C master mode. */
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
        return -1;
10009294:	2501      	movs	r5, #1
10009296:	426d      	negs	r5, r5
10009298:	e017      	b.n	100092ca <mpu_set_sensors+0x1ce>
        mpu_set_bypass(1);
    else
        mpu_set_bypass(0);
#else
    if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
        return -1;
1000929a:	2501      	movs	r5, #1
1000929c:	426d      	negs	r5, r5
1000929e:	e014      	b.n	100092ca <mpu_set_sensors+0x1ce>
        data = BIT_SLEEP;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, &data)) {
        st.chip_cfg.sensors = 0;
        return -1;
    }
    st.chip_cfg.clk_src = data & ~BIT_SLEEP;
100092a0:	466b      	mov	r3, sp
100092a2:	3307      	adds	r3, #7
100092a4:	781b      	ldrb	r3, [r3, #0]
100092a6:	2240      	movs	r2, #64	; 0x40
100092a8:	4393      	bics	r3, r2
100092aa:	4a09      	ldr	r2, [pc, #36]	; (100092d0 <mpu_set_sensors+0x1d4>)
100092ac:	7313      	strb	r3, [r2, #12]
100092ae:	e762      	b.n	10009176 <mpu_set_sensors+0x7a>
    if (sensors & INV_XYZ_COMPASS)
        mpu_set_bypass(1);
    else
        mpu_set_bypass(0);
#else
    if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
100092b0:	4b07      	ldr	r3, [pc, #28]	; (100092d0 <mpu_set_sensors+0x1d4>)
100092b2:	681a      	ldr	r2, [r3, #0]
100092b4:	7911      	ldrb	r1, [r2, #4]
100092b6:	685b      	ldr	r3, [r3, #4]
100092b8:	7818      	ldrb	r0, [r3, #0]
100092ba:	466b      	mov	r3, sp
100092bc:	3306      	adds	r3, #6
100092be:	2201      	movs	r2, #1
100092c0:	4d06      	ldr	r5, [pc, #24]	; (100092dc <mpu_set_sensors+0x1e0>)
100092c2:	47a8      	blx	r5
100092c4:	2800      	cmp	r0, #0
100092c6:	d0a2      	beq.n	1000920e <mpu_set_sensors+0x112>
100092c8:	e7e7      	b.n	1000929a <mpu_set_sensors+0x19e>

    st.chip_cfg.sensors = sensors;
    st.chip_cfg.lp_accel_mode = 0;
    delay_ms(50);
    return 0;
}
100092ca:	0028      	movs	r0, r5
100092cc:	b003      	add	sp, #12
100092ce:	bd30      	pop	{r4, r5, pc}
100092d0:	100183e8 	.word	0x100183e8
100092d4:	1000aaad 	.word	0x1000aaad
100092d8:	10008e6d 	.word	0x10008e6d
100092dc:	1000ab09 	.word	0x1000ab09
100092e0:	10008129 	.word	0x10008129

100092e4 <mpu_init>:
 *  Data ready interrupt: Disabled, active low, unlatched.
 *  @param[in]  int_param   Platform-specific parameters to interrupt API.
 *  @return     0 if successful.
 */
int mpu_init(struct int_param_s *int_param)
{
100092e4:	b530      	push	{r4, r5, lr}
100092e6:	b085      	sub	sp, #20
    unsigned char data[6];

    /* Reset device. */
    data[0] = BIT_RESET;
100092e8:	ab02      	add	r3, sp, #8
100092ea:	2280      	movs	r2, #128	; 0x80
100092ec:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
100092ee:	4ab9      	ldr	r2, [pc, #740]	; (100095d4 <mpu_init+0x2f0>)
100092f0:	6811      	ldr	r1, [r2, #0]
100092f2:	7d49      	ldrb	r1, [r1, #21]
100092f4:	6852      	ldr	r2, [r2, #4]
100092f6:	7810      	ldrb	r0, [r2, #0]
100092f8:	2201      	movs	r2, #1
100092fa:	4cb7      	ldr	r4, [pc, #732]	; (100095d8 <mpu_init+0x2f4>)
100092fc:	47a0      	blx	r4
100092fe:	2800      	cmp	r0, #0
10009300:	d000      	beq.n	10009304 <mpu_init+0x20>
10009302:	e149      	b.n	10009598 <mpu_init+0x2b4>
        return -1;
    delay_ms(100);
10009304:	3064      	adds	r0, #100	; 0x64
10009306:	4bb5      	ldr	r3, [pc, #724]	; (100095dc <mpu_init+0x2f8>)
10009308:	4798      	blx	r3

    /* Wake up chip. */
    data[0] = 0x00;
1000930a:	ab02      	add	r3, sp, #8
1000930c:	2200      	movs	r2, #0
1000930e:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
10009310:	4ab0      	ldr	r2, [pc, #704]	; (100095d4 <mpu_init+0x2f0>)
10009312:	6811      	ldr	r1, [r2, #0]
10009314:	7d49      	ldrb	r1, [r1, #21]
10009316:	6852      	ldr	r2, [r2, #4]
10009318:	7810      	ldrb	r0, [r2, #0]
1000931a:	2201      	movs	r2, #1
1000931c:	4cae      	ldr	r4, [pc, #696]	; (100095d8 <mpu_init+0x2f4>)
1000931e:	47a0      	blx	r4
10009320:	2800      	cmp	r0, #0
10009322:	d000      	beq.n	10009326 <mpu_init+0x42>
10009324:	e13b      	b.n	1000959e <mpu_init+0x2ba>
        return -1;

   st.chip_cfg.accel_half = 0;
10009326:	4aab      	ldr	r2, [pc, #684]	; (100095d4 <mpu_init+0x2f0>)
10009328:	2300      	movs	r3, #0
1000932a:	74d3      	strb	r3, [r2, #19]

#ifdef MPU6500
    /* MPU6500 shares 4kB of memory between the DMP and the FIFO. Since the
     * first 3kB are needed by the DMP, we'll use the last 1kB for the FIFO.
     */
    data[0] = BIT_FIFO_SIZE_1024;
1000932c:	ab02      	add	r3, sp, #8
1000932e:	2140      	movs	r1, #64	; 0x40
10009330:	7019      	strb	r1, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->accel_cfg2, 1, data))
10009332:	6811      	ldr	r1, [r2, #0]
10009334:	7a09      	ldrb	r1, [r1, #8]
10009336:	6852      	ldr	r2, [r2, #4]
10009338:	7810      	ldrb	r0, [r2, #0]
1000933a:	2201      	movs	r2, #1
1000933c:	4ca6      	ldr	r4, [pc, #664]	; (100095d8 <mpu_init+0x2f4>)
1000933e:	47a0      	blx	r4
10009340:	2800      	cmp	r0, #0
10009342:	d000      	beq.n	10009346 <mpu_init+0x62>
10009344:	e12e      	b.n	100095a4 <mpu_init+0x2c0>
        return -1;
#endif

    /* Set to invalid values to ensure no I2C writes are skipped. */
    st.chip_cfg.sensors = 0xFF;
10009346:	4ca3      	ldr	r4, [pc, #652]	; (100095d4 <mpu_init+0x2f0>)
10009348:	23ff      	movs	r3, #255	; 0xff
1000934a:	72a3      	strb	r3, [r4, #10]
    st.chip_cfg.gyro_fsr = 0xFF;
1000934c:	7223      	strb	r3, [r4, #8]
    st.chip_cfg.accel_fsr = 0xFF;
1000934e:	7263      	strb	r3, [r4, #9]
    st.chip_cfg.lpf = 0xFF;
10009350:	72e3      	strb	r3, [r4, #11]
    st.chip_cfg.sample_rate = 0xFFFF;
10009352:	2201      	movs	r2, #1
10009354:	4252      	negs	r2, r2
10009356:	81e2      	strh	r2, [r4, #14]
    st.chip_cfg.fifo_enable = 0xFF;
10009358:	7423      	strb	r3, [r4, #16]
    st.chip_cfg.bypass_mode = 0xFF;
1000935a:	74a3      	strb	r3, [r4, #18]
#ifdef AK89xx_SECONDARY
    st.chip_cfg.compass_sample_rate = 0xFFFF;
1000935c:	8522      	strh	r2, [r4, #40]	; 0x28
#endif
    /* mpu_set_sensors always preserves this setting. */
    st.chip_cfg.clk_src = INV_CLK_PLL;
1000935e:	3bfe      	subs	r3, #254	; 0xfe
10009360:	7323      	strb	r3, [r4, #12]
    /* Handled in next call to mpu_set_bypass. */
    st.chip_cfg.active_low_int = 0; // --> interrupt active high!!
10009362:	2500      	movs	r5, #0
10009364:	3321      	adds	r3, #33	; 0x21
10009366:	54e5      	strb	r5, [r4, r3]
    st.chip_cfg.latched_int = 0;
10009368:	3301      	adds	r3, #1
1000936a:	54e5      	strb	r5, [r4, r3]
    st.chip_cfg.int_motion_only = 0;
1000936c:	7565      	strb	r5, [r4, #21]
    st.chip_cfg.lp_accel_mode = 0;
1000936e:	7525      	strb	r5, [r4, #20]
    memset(&st.chip_cfg.cache, 0, sizeof(st.chip_cfg.cache));
10009370:	0020      	movs	r0, r4
10009372:	3016      	adds	r0, #22
10009374:	320d      	adds	r2, #13
10009376:	2100      	movs	r1, #0
10009378:	4b99      	ldr	r3, [pc, #612]	; (100095e0 <mpu_init+0x2fc>)
1000937a:	4798      	blx	r3
    st.chip_cfg.dmp_on = 0;
1000937c:	2324      	movs	r3, #36	; 0x24
1000937e:	54e5      	strb	r5, [r4, r3]
    st.chip_cfg.dmp_loaded = 0;
10009380:	3301      	adds	r3, #1
10009382:	54e5      	strb	r5, [r4, r3]
    st.chip_cfg.dmp_sample_rate = 0;
10009384:	84e5      	strh	r5, [r4, #38]	; 0x26

    if (mpu_set_gyro_fsr(SMS_MPU_GYRO_FS))
10009386:	20fa      	movs	r0, #250	; 0xfa
10009388:	00c0      	lsls	r0, r0, #3
1000938a:	4b96      	ldr	r3, [pc, #600]	; (100095e4 <mpu_init+0x300>)
1000938c:	4798      	blx	r3
1000938e:	2800      	cmp	r0, #0
10009390:	d000      	beq.n	10009394 <mpu_init+0xb0>
10009392:	e10a      	b.n	100095aa <mpu_init+0x2c6>
        return -1;
    if (mpu_set_accel_fsr(SMS_MPU_ACCEL_FS))
10009394:	3002      	adds	r0, #2
10009396:	4b94      	ldr	r3, [pc, #592]	; (100095e8 <mpu_init+0x304>)
10009398:	4798      	blx	r3
1000939a:	2800      	cmp	r0, #0
1000939c:	d000      	beq.n	100093a0 <mpu_init+0xbc>
1000939e:	e107      	b.n	100095b0 <mpu_init+0x2cc>
        return -1;
    if (mpu_set_lpf(42))
100093a0:	302a      	adds	r0, #42	; 0x2a
100093a2:	4b92      	ldr	r3, [pc, #584]	; (100095ec <mpu_init+0x308>)
100093a4:	4798      	blx	r3
100093a6:	2800      	cmp	r0, #0
100093a8:	d000      	beq.n	100093ac <mpu_init+0xc8>
100093aa:	e104      	b.n	100095b6 <mpu_init+0x2d2>
        return -1;
    if (mpu_set_sample_rate(50))
100093ac:	3032      	adds	r0, #50	; 0x32
100093ae:	4b90      	ldr	r3, [pc, #576]	; (100095f0 <mpu_init+0x30c>)
100093b0:	4798      	blx	r3
100093b2:	2800      	cmp	r0, #0
100093b4:	d000      	beq.n	100093b8 <mpu_init+0xd4>
100093b6:	e101      	b.n	100095bc <mpu_init+0x2d8>
        return -1;
    if (mpu_configure_fifo(0))
100093b8:	4b8e      	ldr	r3, [pc, #568]	; (100095f4 <mpu_init+0x310>)
100093ba:	4798      	blx	r3
100093bc:	2800      	cmp	r0, #0
100093be:	d000      	beq.n	100093c2 <mpu_init+0xde>
100093c0:	e0ff      	b.n	100095c2 <mpu_init+0x2de>
/* This initialization is similar to the one in ak8975.c. */
static int setup_compass(void)
{
    unsigned char data[4], akm_addr;

    mpu_set_bypass(1);
100093c2:	3001      	adds	r0, #1
100093c4:	4b8c      	ldr	r3, [pc, #560]	; (100095f8 <mpu_init+0x314>)
100093c6:	4798      	blx	r3

    /* Find compass. Possible addresses range from 0x0C to 0x0F. */
    for (akm_addr = 0x0C; akm_addr <= 0x0F; akm_addr++) {
100093c8:	240c      	movs	r4, #12
        int result;
        result = i2c_read(akm_addr, AKM_REG_WHOAMI, 1, data);
100093ca:	4d8c      	ldr	r5, [pc, #560]	; (100095fc <mpu_init+0x318>)
100093cc:	ab01      	add	r3, sp, #4
100093ce:	2201      	movs	r2, #1
100093d0:	2100      	movs	r1, #0
100093d2:	0020      	movs	r0, r4
100093d4:	47a8      	blx	r5
        if (!result && (data[0] == AKM_WHOAMI))
100093d6:	2800      	cmp	r0, #0
100093d8:	d103      	bne.n	100093e2 <mpu_init+0xfe>
100093da:	466b      	mov	r3, sp
100093dc:	791b      	ldrb	r3, [r3, #4]
100093de:	2b48      	cmp	r3, #72	; 0x48
100093e0:	d004      	beq.n	100093ec <mpu_init+0x108>
    unsigned char data[4], akm_addr;

    mpu_set_bypass(1);

    /* Find compass. Possible addresses range from 0x0C to 0x0F. */
    for (akm_addr = 0x0C; akm_addr <= 0x0F; akm_addr++) {
100093e2:	3401      	adds	r4, #1
100093e4:	b2e4      	uxtb	r4, r4
100093e6:	2c10      	cmp	r4, #16
100093e8:	d1f0      	bne.n	100093cc <mpu_init+0xe8>
100093ea:	e001      	b.n	100093f0 <mpu_init+0x10c>
        result = i2c_read(akm_addr, AKM_REG_WHOAMI, 1, data);
        if (!result && (data[0] == AKM_WHOAMI))
            break;
    }

    if (akm_addr > 0x0F) {
100093ec:	2c0f      	cmp	r4, #15
100093ee:	d905      	bls.n	100093fc <mpu_init+0x118>
        /* TODO: Handle this case in all compass-related functions. */
        log_e("Compass not found.\n");
100093f0:	4883      	ldr	r0, [pc, #524]	; (10009600 <mpu_init+0x31c>)
100093f2:	4c84      	ldr	r4, [pc, #528]	; (10009604 <mpu_init+0x320>)
100093f4:	47a0      	blx	r4
100093f6:	4884      	ldr	r0, [pc, #528]	; (10009608 <mpu_init+0x324>)
100093f8:	47a0      	blx	r4
100093fa:	e0c4      	b.n	10009586 <mpu_init+0x2a2>
        return -1;
    }

    st.chip_cfg.compass_addr = akm_addr;
100093fc:	232a      	movs	r3, #42	; 0x2a
100093fe:	4a75      	ldr	r2, [pc, #468]	; (100095d4 <mpu_init+0x2f0>)
10009400:	54d4      	strb	r4, [r2, r3]

    data[0] = AKM_POWER_DOWN;
10009402:	ab01      	add	r3, sp, #4
10009404:	2210      	movs	r2, #16
10009406:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
10009408:	3a0f      	subs	r2, #15
1000940a:	210a      	movs	r1, #10
1000940c:	0020      	movs	r0, r4
1000940e:	4c72      	ldr	r4, [pc, #456]	; (100095d8 <mpu_init+0x2f4>)
10009410:	47a0      	blx	r4
10009412:	2800      	cmp	r0, #0
10009414:	d000      	beq.n	10009418 <mpu_init+0x134>
10009416:	e0b6      	b.n	10009586 <mpu_init+0x2a2>
        return -1;
    delay_ms(1);
10009418:	3001      	adds	r0, #1
1000941a:	4b70      	ldr	r3, [pc, #448]	; (100095dc <mpu_init+0x2f8>)
1000941c:	4798      	blx	r3

    data[0] = AKM_FUSE_ROM_ACCESS;
1000941e:	ab01      	add	r3, sp, #4
10009420:	221f      	movs	r2, #31
10009422:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
10009424:	320b      	adds	r2, #11
10009426:	496b      	ldr	r1, [pc, #428]	; (100095d4 <mpu_init+0x2f0>)
10009428:	5c88      	ldrb	r0, [r1, r2]
1000942a:	3a29      	subs	r2, #41	; 0x29
1000942c:	210a      	movs	r1, #10
1000942e:	4c6a      	ldr	r4, [pc, #424]	; (100095d8 <mpu_init+0x2f4>)
10009430:	47a0      	blx	r4
10009432:	2800      	cmp	r0, #0
10009434:	d000      	beq.n	10009438 <mpu_init+0x154>
10009436:	e0a6      	b.n	10009586 <mpu_init+0x2a2>
        return -1;
    delay_ms(1);
10009438:	3001      	adds	r0, #1
1000943a:	4b68      	ldr	r3, [pc, #416]	; (100095dc <mpu_init+0x2f8>)
1000943c:	4798      	blx	r3

    /* Get sensitivity adjustment data from fuse ROM. */
    if (i2c_read(st.chip_cfg.compass_addr, AKM_REG_ASAX, 3, data))
1000943e:	232a      	movs	r3, #42	; 0x2a
10009440:	4a64      	ldr	r2, [pc, #400]	; (100095d4 <mpu_init+0x2f0>)
10009442:	5cd0      	ldrb	r0, [r2, r3]
10009444:	ab01      	add	r3, sp, #4
10009446:	2203      	movs	r2, #3
10009448:	2110      	movs	r1, #16
1000944a:	4c6c      	ldr	r4, [pc, #432]	; (100095fc <mpu_init+0x318>)
1000944c:	47a0      	blx	r4
1000944e:	2800      	cmp	r0, #0
10009450:	d000      	beq.n	10009454 <mpu_init+0x170>
10009452:	e098      	b.n	10009586 <mpu_init+0x2a2>
        return -1;
    st.chip_cfg.mag_sens_adj[0] = (long)data[0] + 128;
10009454:	4a5f      	ldr	r2, [pc, #380]	; (100095d4 <mpu_init+0x2f0>)
10009456:	ab01      	add	r3, sp, #4
10009458:	7819      	ldrb	r1, [r3, #0]
1000945a:	3180      	adds	r1, #128	; 0x80
1000945c:	8591      	strh	r1, [r2, #44]	; 0x2c
    st.chip_cfg.mag_sens_adj[1] = (long)data[1] + 128;
1000945e:	7859      	ldrb	r1, [r3, #1]
10009460:	3180      	adds	r1, #128	; 0x80
10009462:	85d1      	strh	r1, [r2, #46]	; 0x2e
    st.chip_cfg.mag_sens_adj[2] = (long)data[2] + 128;
10009464:	7899      	ldrb	r1, [r3, #2]
10009466:	3180      	adds	r1, #128	; 0x80
10009468:	8611      	strh	r1, [r2, #48]	; 0x30

    data[0] = AKM_POWER_DOWN;
1000946a:	2110      	movs	r1, #16
1000946c:	7019      	strb	r1, [r3, #0]
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
1000946e:	311a      	adds	r1, #26
10009470:	5c50      	ldrb	r0, [r2, r1]
10009472:	2201      	movs	r2, #1
10009474:	3920      	subs	r1, #32
10009476:	4c58      	ldr	r4, [pc, #352]	; (100095d8 <mpu_init+0x2f4>)
10009478:	47a0      	blx	r4
1000947a:	2800      	cmp	r0, #0
1000947c:	d000      	beq.n	10009480 <mpu_init+0x19c>
1000947e:	e082      	b.n	10009586 <mpu_init+0x2a2>
        return -1;
    delay_ms(1);
10009480:	3001      	adds	r0, #1
10009482:	4b56      	ldr	r3, [pc, #344]	; (100095dc <mpu_init+0x2f8>)
10009484:	4798      	blx	r3

    mpu_set_bypass(0);
10009486:	2000      	movs	r0, #0
10009488:	4b5b      	ldr	r3, [pc, #364]	; (100095f8 <mpu_init+0x314>)
1000948a:	4798      	blx	r3

    /* Set up master mode, master clock, and ES bit. */
    data[0] = 0x40;
1000948c:	ab01      	add	r3, sp, #4
1000948e:	2240      	movs	r2, #64	; 0x40
10009490:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->i2c_mst, 1, data))
10009492:	4a50      	ldr	r2, [pc, #320]	; (100095d4 <mpu_init+0x2f0>)
10009494:	6811      	ldr	r1, [r2, #0]
10009496:	7e89      	ldrb	r1, [r1, #26]
10009498:	6852      	ldr	r2, [r2, #4]
1000949a:	7810      	ldrb	r0, [r2, #0]
1000949c:	2201      	movs	r2, #1
1000949e:	4c4e      	ldr	r4, [pc, #312]	; (100095d8 <mpu_init+0x2f4>)
100094a0:	47a0      	blx	r4
100094a2:	2800      	cmp	r0, #0
100094a4:	d16f      	bne.n	10009586 <mpu_init+0x2a2>
        return -1;

    /* Slave 0 reads from AKM data registers. */
    data[0] = BIT_I2C_READ | st.chip_cfg.compass_addr;
100094a6:	ab01      	add	r3, sp, #4
100094a8:	4a4a      	ldr	r2, [pc, #296]	; (100095d4 <mpu_init+0x2f0>)
100094aa:	212a      	movs	r1, #42	; 0x2a
100094ac:	5c51      	ldrb	r1, [r2, r1]
100094ae:	3880      	subs	r0, #128	; 0x80
100094b0:	4301      	orrs	r1, r0
100094b2:	7019      	strb	r1, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->s0_addr, 1, data))
100094b4:	6811      	ldr	r1, [r2, #0]
100094b6:	7f89      	ldrb	r1, [r1, #30]
100094b8:	6852      	ldr	r2, [r2, #4]
100094ba:	7810      	ldrb	r0, [r2, #0]
100094bc:	2201      	movs	r2, #1
100094be:	4c46      	ldr	r4, [pc, #280]	; (100095d8 <mpu_init+0x2f4>)
100094c0:	47a0      	blx	r4
100094c2:	2800      	cmp	r0, #0
100094c4:	d15f      	bne.n	10009586 <mpu_init+0x2a2>
        return -1;

    /* Compass reads start at this register. */
    data[0] = AKM_REG_ST1;
100094c6:	ab01      	add	r3, sp, #4
100094c8:	2202      	movs	r2, #2
100094ca:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->s0_reg, 1, data))
100094cc:	4a41      	ldr	r2, [pc, #260]	; (100095d4 <mpu_init+0x2f0>)
100094ce:	6811      	ldr	r1, [r2, #0]
100094d0:	7fc9      	ldrb	r1, [r1, #31]
100094d2:	6852      	ldr	r2, [r2, #4]
100094d4:	7810      	ldrb	r0, [r2, #0]
100094d6:	2201      	movs	r2, #1
100094d8:	4c3f      	ldr	r4, [pc, #252]	; (100095d8 <mpu_init+0x2f4>)
100094da:	47a0      	blx	r4
100094dc:	2800      	cmp	r0, #0
100094de:	d152      	bne.n	10009586 <mpu_init+0x2a2>
        return -1;

    /* Enable slave 0, 8-byte reads. */
    data[0] = BIT_SLAVE_EN | 8;
100094e0:	ab01      	add	r3, sp, #4
100094e2:	2288      	movs	r2, #136	; 0x88
100094e4:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->s0_ctrl, 1, data))
100094e6:	4a3b      	ldr	r2, [pc, #236]	; (100095d4 <mpu_init+0x2f0>)
100094e8:	2120      	movs	r1, #32
100094ea:	6810      	ldr	r0, [r2, #0]
100094ec:	5c41      	ldrb	r1, [r0, r1]
100094ee:	6852      	ldr	r2, [r2, #4]
100094f0:	7810      	ldrb	r0, [r2, #0]
100094f2:	2201      	movs	r2, #1
100094f4:	4c38      	ldr	r4, [pc, #224]	; (100095d8 <mpu_init+0x2f4>)
100094f6:	47a0      	blx	r4
100094f8:	2800      	cmp	r0, #0
100094fa:	d144      	bne.n	10009586 <mpu_init+0x2a2>
        return -1;

    /* Slave 1 changes AKM measurement mode. */
    data[0] = st.chip_cfg.compass_addr;
100094fc:	ab01      	add	r3, sp, #4
100094fe:	4a35      	ldr	r2, [pc, #212]	; (100095d4 <mpu_init+0x2f0>)
10009500:	212a      	movs	r1, #42	; 0x2a
10009502:	5c51      	ldrb	r1, [r2, r1]
10009504:	7019      	strb	r1, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->s1_addr, 1, data))
10009506:	2121      	movs	r1, #33	; 0x21
10009508:	6810      	ldr	r0, [r2, #0]
1000950a:	5c41      	ldrb	r1, [r0, r1]
1000950c:	6852      	ldr	r2, [r2, #4]
1000950e:	7810      	ldrb	r0, [r2, #0]
10009510:	2201      	movs	r2, #1
10009512:	4c31      	ldr	r4, [pc, #196]	; (100095d8 <mpu_init+0x2f4>)
10009514:	47a0      	blx	r4
10009516:	2800      	cmp	r0, #0
10009518:	d135      	bne.n	10009586 <mpu_init+0x2a2>
        return -1;

    /* AKM measurement mode register. */
    data[0] = AKM_REG_CNTL;
1000951a:	ab01      	add	r3, sp, #4
1000951c:	220a      	movs	r2, #10
1000951e:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->s1_reg, 1, data))
10009520:	4a2c      	ldr	r2, [pc, #176]	; (100095d4 <mpu_init+0x2f0>)
10009522:	2122      	movs	r1, #34	; 0x22
10009524:	6810      	ldr	r0, [r2, #0]
10009526:	5c41      	ldrb	r1, [r0, r1]
10009528:	6852      	ldr	r2, [r2, #4]
1000952a:	7810      	ldrb	r0, [r2, #0]
1000952c:	2201      	movs	r2, #1
1000952e:	4c2a      	ldr	r4, [pc, #168]	; (100095d8 <mpu_init+0x2f4>)
10009530:	47a0      	blx	r4
10009532:	2800      	cmp	r0, #0
10009534:	d127      	bne.n	10009586 <mpu_init+0x2a2>
        return -1;

    /* Enable slave 1, 1-byte writes. */
    data[0] = BIT_SLAVE_EN | 1;
10009536:	ab01      	add	r3, sp, #4
10009538:	2281      	movs	r2, #129	; 0x81
1000953a:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->s1_ctrl, 1, data))
1000953c:	4a25      	ldr	r2, [pc, #148]	; (100095d4 <mpu_init+0x2f0>)
1000953e:	2123      	movs	r1, #35	; 0x23
10009540:	6810      	ldr	r0, [r2, #0]
10009542:	5c41      	ldrb	r1, [r0, r1]
10009544:	6852      	ldr	r2, [r2, #4]
10009546:	7810      	ldrb	r0, [r2, #0]
10009548:	2201      	movs	r2, #1
1000954a:	4c23      	ldr	r4, [pc, #140]	; (100095d8 <mpu_init+0x2f4>)
1000954c:	47a0      	blx	r4
1000954e:	2800      	cmp	r0, #0
10009550:	d119      	bne.n	10009586 <mpu_init+0x2a2>
        return -1;

    /* Set slave 1 data. */
    data[0] = AKM_SINGLE_MEASUREMENT;
10009552:	ab01      	add	r3, sp, #4
10009554:	2211      	movs	r2, #17
10009556:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->s1_do, 1, data))
10009558:	4a1e      	ldr	r2, [pc, #120]	; (100095d4 <mpu_init+0x2f0>)
1000955a:	2126      	movs	r1, #38	; 0x26
1000955c:	6810      	ldr	r0, [r2, #0]
1000955e:	5c41      	ldrb	r1, [r0, r1]
10009560:	6852      	ldr	r2, [r2, #4]
10009562:	7810      	ldrb	r0, [r2, #0]
10009564:	2201      	movs	r2, #1
10009566:	4c1c      	ldr	r4, [pc, #112]	; (100095d8 <mpu_init+0x2f4>)
10009568:	47a0      	blx	r4
1000956a:	2800      	cmp	r0, #0
1000956c:	d10b      	bne.n	10009586 <mpu_init+0x2a2>
        return -1;

    /* Trigger slave 0 and slave 1 actions at each sample. */
    data[0] = 0x03;
1000956e:	ab01      	add	r3, sp, #4
10009570:	2203      	movs	r2, #3
10009572:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->i2c_delay_ctrl, 1, data))
10009574:	4a17      	ldr	r2, [pc, #92]	; (100095d4 <mpu_init+0x2f0>)
10009576:	2127      	movs	r1, #39	; 0x27
10009578:	6810      	ldr	r0, [r2, #0]
1000957a:	5c41      	ldrb	r1, [r0, r1]
1000957c:	6852      	ldr	r2, [r2, #4]
1000957e:	7810      	ldrb	r0, [r2, #0]
10009580:	2201      	movs	r2, #1
10009582:	4c15      	ldr	r4, [pc, #84]	; (100095d8 <mpu_init+0x2f4>)
10009584:	47a0      	blx	r4
    //if (int_param)
        //reg_int_cb(int_param);

#ifdef AK89xx_SECONDARY
    setup_compass();
    if (mpu_set_compass_sample_rate(10))
10009586:	200a      	movs	r0, #10
10009588:	4b20      	ldr	r3, [pc, #128]	; (1000960c <mpu_init+0x328>)
1000958a:	4798      	blx	r3
1000958c:	1e04      	subs	r4, r0, #0
1000958e:	d11b      	bne.n	100095c8 <mpu_init+0x2e4>
    /* Already disabled by setup_compass. */
    if (mpu_set_bypass(0))
        return -1;
#endif

    mpu_set_sensors(0);
10009590:	2000      	movs	r0, #0
10009592:	4b1f      	ldr	r3, [pc, #124]	; (10009610 <mpu_init+0x32c>)
10009594:	4798      	blx	r3
    return 0;
10009596:	e019      	b.n	100095cc <mpu_init+0x2e8>
    unsigned char data[6];

    /* Reset device. */
    data[0] = BIT_RESET;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
        return -1;
10009598:	2401      	movs	r4, #1
1000959a:	4264      	negs	r4, r4
1000959c:	e016      	b.n	100095cc <mpu_init+0x2e8>
    delay_ms(100);

    /* Wake up chip. */
    data[0] = 0x00;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
        return -1;
1000959e:	2401      	movs	r4, #1
100095a0:	4264      	negs	r4, r4
100095a2:	e013      	b.n	100095cc <mpu_init+0x2e8>
    /* MPU6500 shares 4kB of memory between the DMP and the FIFO. Since the
     * first 3kB are needed by the DMP, we'll use the last 1kB for the FIFO.
     */
    data[0] = BIT_FIFO_SIZE_1024;
    if (i2c_write(st.hw->addr, st.reg->accel_cfg2, 1, data))
        return -1;
100095a4:	2401      	movs	r4, #1
100095a6:	4264      	negs	r4, r4
100095a8:	e010      	b.n	100095cc <mpu_init+0x2e8>
    st.chip_cfg.dmp_on = 0;
    st.chip_cfg.dmp_loaded = 0;
    st.chip_cfg.dmp_sample_rate = 0;

    if (mpu_set_gyro_fsr(SMS_MPU_GYRO_FS))
        return -1;
100095aa:	2401      	movs	r4, #1
100095ac:	4264      	negs	r4, r4
100095ae:	e00d      	b.n	100095cc <mpu_init+0x2e8>
    if (mpu_set_accel_fsr(SMS_MPU_ACCEL_FS))
        return -1;
100095b0:	2401      	movs	r4, #1
100095b2:	4264      	negs	r4, r4
100095b4:	e00a      	b.n	100095cc <mpu_init+0x2e8>
    if (mpu_set_lpf(42))
        return -1;
100095b6:	2401      	movs	r4, #1
100095b8:	4264      	negs	r4, r4
100095ba:	e007      	b.n	100095cc <mpu_init+0x2e8>
    if (mpu_set_sample_rate(50))
        return -1;
100095bc:	2401      	movs	r4, #1
100095be:	4264      	negs	r4, r4
100095c0:	e004      	b.n	100095cc <mpu_init+0x2e8>
    if (mpu_configure_fifo(0))
        return -1;
100095c2:	2401      	movs	r4, #1
100095c4:	4264      	negs	r4, r4
100095c6:	e001      	b.n	100095cc <mpu_init+0x2e8>
        //reg_int_cb(int_param);

#ifdef AK89xx_SECONDARY
    setup_compass();
    if (mpu_set_compass_sample_rate(10))
        return -1;
100095c8:	2401      	movs	r4, #1
100095ca:	4264      	negs	r4, r4
        return -1;
#endif

    mpu_set_sensors(0);
    return 0;
}
100095cc:	0020      	movs	r0, r4
100095ce:	b005      	add	sp, #20
100095d0:	bd30      	pop	{r4, r5, pc}
100095d2:	46c0      	nop			; (mov r8, r8)
100095d4:	100183e8 	.word	0x100183e8
100095d8:	1000aaad 	.word	0x1000aaad
100095dc:	10008129 	.word	0x10008129
100095e0:	10015191 	.word	0x10015191
100095e4:	100087e9 	.word	0x100087e9
100095e8:	100088d5 	.word	0x100088d5
100095ec:	10008969 	.word	0x10008969
100095f0:	10009029 	.word	0x10009029
100095f4:	10008ab9 	.word	0x10008ab9
100095f8:	10008cf1 	.word	0x10008cf1
100095fc:	1000ab09 	.word	0x1000ab09
10009600:	100165a4 	.word	0x100165a4
10009604:	100153f9 	.word	0x100153f9
10009608:	10016414 	.word	0x10016414
1000960c:	10008a41 	.word	0x10008a41
10009610:	100090fd 	.word	0x100090fd

10009614 <mpu_write_mem>:
 *  @param[in]  data        Bytes to write to memory.
 *  @return     0 if successful.
 */
int mpu_write_mem(unsigned short mem_addr, unsigned short length,
        unsigned char *data)
{
10009614:	b570      	push	{r4, r5, r6, lr}
10009616:	b082      	sub	sp, #8
10009618:	000c      	movs	r4, r1
1000961a:	1e15      	subs	r5, r2, #0
    unsigned char tmp[2];

    if (!data)
1000961c:	d025      	beq.n	1000966a <mpu_write_mem+0x56>
        return -1;
    if (!st.chip_cfg.sensors)
1000961e:	4b19      	ldr	r3, [pc, #100]	; (10009684 <mpu_write_mem+0x70>)
10009620:	7a9b      	ldrb	r3, [r3, #10]
10009622:	2b00      	cmp	r3, #0
10009624:	d024      	beq.n	10009670 <mpu_write_mem+0x5c>
        return -1;

    tmp[0] = (unsigned char)(mem_addr >> 8);
10009626:	ab01      	add	r3, sp, #4
10009628:	0a02      	lsrs	r2, r0, #8
1000962a:	701a      	strb	r2, [r3, #0]
    tmp[1] = (unsigned char)(mem_addr & 0xFF);
1000962c:	b2c0      	uxtb	r0, r0
1000962e:	7058      	strb	r0, [r3, #1]

    /* Check bank boundaries. */
    if (tmp[1] + length > st.hw->bank_size)
10009630:	4b14      	ldr	r3, [pc, #80]	; (10009684 <mpu_write_mem+0x70>)
10009632:	685b      	ldr	r3, [r3, #4]
10009634:	1840      	adds	r0, r0, r1
10009636:	895a      	ldrh	r2, [r3, #10]
10009638:	4290      	cmp	r0, r2
1000963a:	dc1c      	bgt.n	10009676 <mpu_write_mem+0x62>
        return -1;

    if (i2c_write(st.hw->addr, st.reg->bank_sel, 2, tmp))
1000963c:	4a11      	ldr	r2, [pc, #68]	; (10009684 <mpu_write_mem+0x70>)
1000963e:	6812      	ldr	r2, [r2, #0]
10009640:	7ed1      	ldrb	r1, [r2, #27]
10009642:	7818      	ldrb	r0, [r3, #0]
10009644:	ab01      	add	r3, sp, #4
10009646:	2202      	movs	r2, #2
10009648:	4e0f      	ldr	r6, [pc, #60]	; (10009688 <mpu_write_mem+0x74>)
1000964a:	47b0      	blx	r6
1000964c:	2800      	cmp	r0, #0
1000964e:	d115      	bne.n	1000967c <mpu_write_mem+0x68>
        return -1;
    if (i2c_write(st.hw->addr, st.reg->mem_r_w, length, data))
10009650:	b2e2      	uxtb	r2, r4
10009652:	4b0c      	ldr	r3, [pc, #48]	; (10009684 <mpu_write_mem+0x70>)
10009654:	6819      	ldr	r1, [r3, #0]
10009656:	7e09      	ldrb	r1, [r1, #24]
10009658:	685b      	ldr	r3, [r3, #4]
1000965a:	7818      	ldrb	r0, [r3, #0]
1000965c:	002b      	movs	r3, r5
1000965e:	4c0a      	ldr	r4, [pc, #40]	; (10009688 <mpu_write_mem+0x74>)
10009660:	47a0      	blx	r4
10009662:	1e43      	subs	r3, r0, #1
10009664:	4198      	sbcs	r0, r3
10009666:	4240      	negs	r0, r0
10009668:	e00a      	b.n	10009680 <mpu_write_mem+0x6c>
        unsigned char *data)
{
    unsigned char tmp[2];

    if (!data)
        return -1;
1000966a:	2001      	movs	r0, #1
1000966c:	4240      	negs	r0, r0
1000966e:	e007      	b.n	10009680 <mpu_write_mem+0x6c>
    if (!st.chip_cfg.sensors)
        return -1;
10009670:	2001      	movs	r0, #1
10009672:	4240      	negs	r0, r0
10009674:	e004      	b.n	10009680 <mpu_write_mem+0x6c>
    tmp[0] = (unsigned char)(mem_addr >> 8);
    tmp[1] = (unsigned char)(mem_addr & 0xFF);

    /* Check bank boundaries. */
    if (tmp[1] + length > st.hw->bank_size)
        return -1;
10009676:	2001      	movs	r0, #1
10009678:	4240      	negs	r0, r0
1000967a:	e001      	b.n	10009680 <mpu_write_mem+0x6c>

    if (i2c_write(st.hw->addr, st.reg->bank_sel, 2, tmp))
        return -1;
1000967c:	2001      	movs	r0, #1
1000967e:	4240      	negs	r0, r0
    if (i2c_write(st.hw->addr, st.reg->mem_r_w, length, data))
        return -1;
    return 0;
}
10009680:	b002      	add	sp, #8
10009682:	bd70      	pop	{r4, r5, r6, pc}
10009684:	100183e8 	.word	0x100183e8
10009688:	1000aaad 	.word	0x1000aaad

1000968c <mpu_set_dmp_state>:
 *  @brief      Enable/disable DMP support.
 *  @param[in]  enable  1 to turn on the DMP.
 *  @return     0 if successful.
 */
int mpu_set_dmp_state(unsigned char enable)
{
1000968c:	b570      	push	{r4, r5, r6, lr}
1000968e:	b082      	sub	sp, #8
    unsigned char tmp;
    if (st.chip_cfg.dmp_on == enable)
10009690:	2324      	movs	r3, #36	; 0x24
10009692:	4a21      	ldr	r2, [pc, #132]	; (10009718 <mpu_set_dmp_state+0x8c>)
10009694:	5cd3      	ldrb	r3, [r2, r3]
10009696:	4283      	cmp	r3, r0
10009698:	d037      	beq.n	1000970a <mpu_set_dmp_state+0x7e>
        return 0;

    if (enable) {
1000969a:	2800      	cmp	r0, #0
1000969c:	d020      	beq.n	100096e0 <mpu_set_dmp_state+0x54>
        if (!st.chip_cfg.dmp_loaded)
1000969e:	2325      	movs	r3, #37	; 0x25
100096a0:	5cd3      	ldrb	r3, [r2, r3]
100096a2:	2b00      	cmp	r3, #0
100096a4:	d033      	beq.n	1000970e <mpu_set_dmp_state+0x82>
            return -1;
        /* Disable data ready interrupt. */
        set_int_enable(0);
100096a6:	2000      	movs	r0, #0
100096a8:	4d1c      	ldr	r5, [pc, #112]	; (1000971c <mpu_set_dmp_state+0x90>)
100096aa:	47a8      	blx	r5
        /* Disable bypass mode. */
        mpu_set_bypass(0);
100096ac:	2000      	movs	r0, #0
100096ae:	4b1c      	ldr	r3, [pc, #112]	; (10009720 <mpu_set_dmp_state+0x94>)
100096b0:	4798      	blx	r3
        /* Keep constant sample rate, FIFO rate controlled by DMP. */
        mpu_set_sample_rate(st.chip_cfg.dmp_sample_rate);
100096b2:	4c19      	ldr	r4, [pc, #100]	; (10009718 <mpu_set_dmp_state+0x8c>)
100096b4:	8ce0      	ldrh	r0, [r4, #38]	; 0x26
100096b6:	4b1b      	ldr	r3, [pc, #108]	; (10009724 <mpu_set_dmp_state+0x98>)
100096b8:	4798      	blx	r3
        /* Remove FIFO elements. */
        tmp = 0;
100096ba:	466b      	mov	r3, sp
100096bc:	3307      	adds	r3, #7
100096be:	2200      	movs	r2, #0
100096c0:	701a      	strb	r2, [r3, #0]
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
100096c2:	6862      	ldr	r2, [r4, #4]
100096c4:	7810      	ldrb	r0, [r2, #0]
100096c6:	2201      	movs	r2, #1
100096c8:	2123      	movs	r1, #35	; 0x23
100096ca:	4e17      	ldr	r6, [pc, #92]	; (10009728 <mpu_set_dmp_state+0x9c>)
100096cc:	47b0      	blx	r6
        st.chip_cfg.dmp_on = 1;
100096ce:	2201      	movs	r2, #1
100096d0:	2324      	movs	r3, #36	; 0x24
100096d2:	54e2      	strb	r2, [r4, r3]
        /* Enable DMP interrupt. */
        set_int_enable(1);
100096d4:	2001      	movs	r0, #1
100096d6:	47a8      	blx	r5
        mpu_reset_fifo();
100096d8:	4b14      	ldr	r3, [pc, #80]	; (1000972c <mpu_set_dmp_state+0xa0>)
100096da:	4798      	blx	r3
        tmp = st.chip_cfg.fifo_enable;
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
        st.chip_cfg.dmp_on = 0;
        mpu_reset_fifo();
    }
    return 0;
100096dc:	2000      	movs	r0, #0
100096de:	e018      	b.n	10009712 <mpu_set_dmp_state+0x86>
        /* Enable DMP interrupt. */
        set_int_enable(1);
        mpu_reset_fifo();
    } else {
        /* Disable DMP interrupt. */
        set_int_enable(0);
100096e0:	2000      	movs	r0, #0
100096e2:	4b0e      	ldr	r3, [pc, #56]	; (1000971c <mpu_set_dmp_state+0x90>)
100096e4:	4798      	blx	r3
        /* Restore FIFO settings. */
        tmp = st.chip_cfg.fifo_enable;
100096e6:	466b      	mov	r3, sp
100096e8:	3307      	adds	r3, #7
100096ea:	4c0b      	ldr	r4, [pc, #44]	; (10009718 <mpu_set_dmp_state+0x8c>)
100096ec:	7c22      	ldrb	r2, [r4, #16]
100096ee:	701a      	strb	r2, [r3, #0]
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
100096f0:	6862      	ldr	r2, [r4, #4]
100096f2:	7810      	ldrb	r0, [r2, #0]
100096f4:	2201      	movs	r2, #1
100096f6:	2123      	movs	r1, #35	; 0x23
100096f8:	4d0b      	ldr	r5, [pc, #44]	; (10009728 <mpu_set_dmp_state+0x9c>)
100096fa:	47a8      	blx	r5
        st.chip_cfg.dmp_on = 0;
100096fc:	2200      	movs	r2, #0
100096fe:	2324      	movs	r3, #36	; 0x24
10009700:	54e2      	strb	r2, [r4, r3]
        mpu_reset_fifo();
10009702:	4b0a      	ldr	r3, [pc, #40]	; (1000972c <mpu_set_dmp_state+0xa0>)
10009704:	4798      	blx	r3
    }
    return 0;
10009706:	2000      	movs	r0, #0
10009708:	e003      	b.n	10009712 <mpu_set_dmp_state+0x86>
 */
int mpu_set_dmp_state(unsigned char enable)
{
    unsigned char tmp;
    if (st.chip_cfg.dmp_on == enable)
        return 0;
1000970a:	2000      	movs	r0, #0
1000970c:	e001      	b.n	10009712 <mpu_set_dmp_state+0x86>

    if (enable) {
        if (!st.chip_cfg.dmp_loaded)
            return -1;
1000970e:	2001      	movs	r0, #1
10009710:	4240      	negs	r0, r0
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
        st.chip_cfg.dmp_on = 0;
        mpu_reset_fifo();
    }
    return 0;
}
10009712:	b002      	add	sp, #8
10009714:	bd70      	pop	{r4, r5, r6, pc}
10009716:	46c0      	nop			; (mov r8, r8)
10009718:	100183e8 	.word	0x100183e8
1000971c:	10008495 	.word	0x10008495
10009720:	10008cf1 	.word	0x10008cf1
10009724:	10009029 	.word	0x10009029
10009728:	1000aaad 	.word	0x1000aaad
1000972c:	100085f1 	.word	0x100085f1

10009730 <mpu_get_compass_reg>:
 *  @param[out] data        Raw data in hardware units.
 *  @param[out] timestamp   Timestamp in milliseconds. Null if not needed.
 *  @return     0 if successful.
 */
int mpu_get_compass_reg(short *data, unsigned long *timestamp)
{
10009730:	b5f0      	push	{r4, r5, r6, r7, lr}
10009732:	b085      	sub	sp, #20
10009734:	0006      	movs	r6, r0
10009736:	000d      	movs	r5, r1
#ifdef AK89xx_SECONDARY
    unsigned char tmp[9];

    if (!(st.chip_cfg.sensors & INV_XYZ_COMPASS))
10009738:	4b29      	ldr	r3, [pc, #164]	; (100097e0 <mpu_get_compass_reg+0xb0>)
1000973a:	7a9b      	ldrb	r3, [r3, #10]
1000973c:	07db      	lsls	r3, r3, #31
1000973e:	d540      	bpl.n	100097c2 <mpu_get_compass_reg+0x92>
        return -1;
    tmp[8] = AKM_SINGLE_MEASUREMENT;
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, tmp+8))
        return -1;
#else
    if (i2c_read(st.hw->addr, st.reg->raw_compass, 8, tmp))
10009740:	4b27      	ldr	r3, [pc, #156]	; (100097e0 <mpu_get_compass_reg+0xb0>)
10009742:	2228      	movs	r2, #40	; 0x28
10009744:	6819      	ldr	r1, [r3, #0]
10009746:	5c89      	ldrb	r1, [r1, r2]
10009748:	685b      	ldr	r3, [r3, #4]
1000974a:	7818      	ldrb	r0, [r3, #0]
1000974c:	ab01      	add	r3, sp, #4
1000974e:	3a20      	subs	r2, #32
10009750:	4c24      	ldr	r4, [pc, #144]	; (100097e4 <mpu_get_compass_reg+0xb4>)
10009752:	47a0      	blx	r4
10009754:	1e04      	subs	r4, r0, #0
10009756:	d137      	bne.n	100097c8 <mpu_get_compass_reg+0x98>
        return -2;
    if ((tmp[7] & AKM_OVERFLOW) || (tmp[7] & AKM_DATA_ERROR))
        return -3;
#elif defined AK8963_SECONDARY
    /* AK8963 doesn't have the data read error bit. */
    if (!(tmp[0] & AKM_DATA_READY) || (tmp[0] & AKM_DATA_OVERRUN))
10009758:	ab01      	add	r3, sp, #4
1000975a:	781b      	ldrb	r3, [r3, #0]
1000975c:	2203      	movs	r2, #3
1000975e:	4013      	ands	r3, r2
10009760:	2b01      	cmp	r3, #1
10009762:	d134      	bne.n	100097ce <mpu_get_compass_reg+0x9e>
        return -2;
    if (tmp[7] & AKM_OVERFLOW)
10009764:	ab01      	add	r3, sp, #4
10009766:	79db      	ldrb	r3, [r3, #7]
10009768:	2b7f      	cmp	r3, #127	; 0x7f
1000976a:	d833      	bhi.n	100097d4 <mpu_get_compass_reg+0xa4>
        return -3;
#endif
    data[0] = (tmp[2] << 8) | tmp[1];
1000976c:	a801      	add	r0, sp, #4
1000976e:	7881      	ldrb	r1, [r0, #2]
10009770:	0209      	lsls	r1, r1, #8
10009772:	7843      	ldrb	r3, [r0, #1]
10009774:	4319      	orrs	r1, r3
10009776:	b209      	sxth	r1, r1
10009778:	8031      	strh	r1, [r6, #0]
    data[1] = (tmp[4] << 8) | tmp[3];
1000977a:	7902      	ldrb	r2, [r0, #4]
1000977c:	0212      	lsls	r2, r2, #8
1000977e:	78c3      	ldrb	r3, [r0, #3]
10009780:	431a      	orrs	r2, r3
10009782:	b212      	sxth	r2, r2
10009784:	8072      	strh	r2, [r6, #2]
    data[2] = (tmp[6] << 8) | tmp[5];
10009786:	7983      	ldrb	r3, [r0, #6]
10009788:	021b      	lsls	r3, r3, #8
1000978a:	7940      	ldrb	r0, [r0, #5]
1000978c:	4303      	orrs	r3, r0
1000978e:	b21b      	sxth	r3, r3
10009790:	469c      	mov	ip, r3
10009792:	80b3      	strh	r3, [r6, #4]

    data[0] = ((long)data[0] * st.chip_cfg.mag_sens_adj[0]) >> 8;
10009794:	4812      	ldr	r0, [pc, #72]	; (100097e0 <mpu_get_compass_reg+0xb0>)
10009796:	232c      	movs	r3, #44	; 0x2c
10009798:	5ec7      	ldrsh	r7, [r0, r3]
1000979a:	4379      	muls	r1, r7
1000979c:	1209      	asrs	r1, r1, #8
1000979e:	8031      	strh	r1, [r6, #0]
    data[1] = ((long)data[1] * st.chip_cfg.mag_sens_adj[1]) >> 8;
100097a0:	232e      	movs	r3, #46	; 0x2e
100097a2:	5ec1      	ldrsh	r1, [r0, r3]
100097a4:	434a      	muls	r2, r1
100097a6:	1212      	asrs	r2, r2, #8
100097a8:	8072      	strh	r2, [r6, #2]
    data[2] = ((long)data[2] * st.chip_cfg.mag_sens_adj[2]) >> 8;
100097aa:	2330      	movs	r3, #48	; 0x30
100097ac:	5ec2      	ldrsh	r2, [r0, r3]
100097ae:	4663      	mov	r3, ip
100097b0:	4353      	muls	r3, r2
100097b2:	121b      	asrs	r3, r3, #8
100097b4:	80b3      	strh	r3, [r6, #4]

    if (timestamp)
100097b6:	2d00      	cmp	r5, #0
100097b8:	d00e      	beq.n	100097d8 <mpu_get_compass_reg+0xa8>
        get_ms(timestamp);
100097ba:	0028      	movs	r0, r5
100097bc:	4b0a      	ldr	r3, [pc, #40]	; (100097e8 <mpu_get_compass_reg+0xb8>)
100097be:	4798      	blx	r3
100097c0:	e00a      	b.n	100097d8 <mpu_get_compass_reg+0xa8>
{
#ifdef AK89xx_SECONDARY
    unsigned char tmp[9];

    if (!(st.chip_cfg.sensors & INV_XYZ_COMPASS))
        return -1;
100097c2:	2401      	movs	r4, #1
100097c4:	4264      	negs	r4, r4
100097c6:	e007      	b.n	100097d8 <mpu_get_compass_reg+0xa8>
    tmp[8] = AKM_SINGLE_MEASUREMENT;
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, tmp+8))
        return -1;
#else
    if (i2c_read(st.hw->addr, st.reg->raw_compass, 8, tmp))
        return -1;
100097c8:	2401      	movs	r4, #1
100097ca:	4264      	negs	r4, r4
100097cc:	e004      	b.n	100097d8 <mpu_get_compass_reg+0xa8>
    if ((tmp[7] & AKM_OVERFLOW) || (tmp[7] & AKM_DATA_ERROR))
        return -3;
#elif defined AK8963_SECONDARY
    /* AK8963 doesn't have the data read error bit. */
    if (!(tmp[0] & AKM_DATA_READY) || (tmp[0] & AKM_DATA_OVERRUN))
        return -2;
100097ce:	2402      	movs	r4, #2
100097d0:	4264      	negs	r4, r4
100097d2:	e001      	b.n	100097d8 <mpu_get_compass_reg+0xa8>
    if (tmp[7] & AKM_OVERFLOW)
        return -3;
100097d4:	2403      	movs	r4, #3
100097d6:	4264      	negs	r4, r4
        get_ms(timestamp);
    return 0;
#else
    return -1;
#endif
}
100097d8:	0020      	movs	r0, r4
100097da:	b005      	add	sp, #20
100097dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
100097de:	46c0      	nop			; (mov r8, r8)
100097e0:	100183e8 	.word	0x100183e8
100097e4:	1000ab09 	.word	0x1000ab09
100097e8:	1000b5ed 	.word	0x1000b5ed

100097ec <mpu_get_compass_fsr>:
 *  @return     0 if successful.
 */
int mpu_get_compass_fsr(unsigned short *fsr)
{
#ifdef AK89xx_SECONDARY
    fsr[0] = st.hw->compass_fsr;
100097ec:	4b02      	ldr	r3, [pc, #8]	; (100097f8 <mpu_get_compass_fsr+0xc>)
100097ee:	685b      	ldr	r3, [r3, #4]
100097f0:	899b      	ldrh	r3, [r3, #12]
100097f2:	8003      	strh	r3, [r0, #0]
    return 0;
#else
    return -1;
#endif
}
100097f4:	2000      	movs	r0, #0
100097f6:	4770      	bx	lr
100097f8:	100183e8 	.word	0x100183e8

100097fc <dmp_set_fifo_rate>:
 *  Only used when DMP is on.
 *  @param[in]  rate    Desired fifo rate (Hz).
 *  @return     0 if successful.
 */
int dmp_set_fifo_rate(unsigned short rate)
{
100097fc:	b510      	push	{r4, lr}
100097fe:	b086      	sub	sp, #24
10009800:	0004      	movs	r4, r0
    const unsigned char regs_end[12] = {DINAFE, DINAF2, DINAAB,
10009802:	220c      	movs	r2, #12
10009804:	4915      	ldr	r1, [pc, #84]	; (1000985c <dmp_set_fifo_rate+0x60>)
10009806:	3110      	adds	r1, #16
10009808:	a803      	add	r0, sp, #12
1000980a:	4b15      	ldr	r3, [pc, #84]	; (10009860 <dmp_set_fifo_rate+0x64>)
1000980c:	4798      	blx	r3
        0xc4, DINAAA, DINAF1, DINADF, DINADF, 0xBB, 0xAF, DINADF, DINADF};
    unsigned short div;
    unsigned char tmp[8];

    if (rate > DMP_SAMPLE_RATE)
1000980e:	2cc8      	cmp	r4, #200	; 0xc8
10009810:	d819      	bhi.n	10009846 <dmp_set_fifo_rate+0x4a>
        return -1;
    div = DMP_SAMPLE_RATE / rate - 1;
10009812:	0021      	movs	r1, r4
10009814:	20c8      	movs	r0, #200	; 0xc8
10009816:	4b13      	ldr	r3, [pc, #76]	; (10009864 <dmp_set_fifo_rate+0x68>)
10009818:	4798      	blx	r3
1000981a:	3801      	subs	r0, #1
1000981c:	b280      	uxth	r0, r0
    tmp[0] = (unsigned char)((div >> 8) & 0xFF);
1000981e:	aa01      	add	r2, sp, #4
10009820:	0a03      	lsrs	r3, r0, #8
10009822:	7013      	strb	r3, [r2, #0]
    tmp[1] = (unsigned char)(div & 0xFF);
10009824:	7050      	strb	r0, [r2, #1]
    if (mpu_write_mem(D_0_22, 2, tmp))
10009826:	2102      	movs	r1, #2
10009828:	480f      	ldr	r0, [pc, #60]	; (10009868 <dmp_set_fifo_rate+0x6c>)
1000982a:	4b10      	ldr	r3, [pc, #64]	; (1000986c <dmp_set_fifo_rate+0x70>)
1000982c:	4798      	blx	r3
1000982e:	2800      	cmp	r0, #0
10009830:	d10c      	bne.n	1000984c <dmp_set_fifo_rate+0x50>
        return -1;
    if (mpu_write_mem(CFG_6, 12, (unsigned char*)regs_end))
10009832:	aa03      	add	r2, sp, #12
10009834:	210c      	movs	r1, #12
10009836:	480e      	ldr	r0, [pc, #56]	; (10009870 <dmp_set_fifo_rate+0x74>)
10009838:	4b0c      	ldr	r3, [pc, #48]	; (1000986c <dmp_set_fifo_rate+0x70>)
1000983a:	4798      	blx	r3
1000983c:	2800      	cmp	r0, #0
1000983e:	d108      	bne.n	10009852 <dmp_set_fifo_rate+0x56>
        return -1;

    dmp.fifo_rate = rate;
10009840:	4b0c      	ldr	r3, [pc, #48]	; (10009874 <dmp_set_fifo_rate+0x78>)
10009842:	819c      	strh	r4, [r3, #12]
    return 0;
10009844:	e007      	b.n	10009856 <dmp_set_fifo_rate+0x5a>
        0xc4, DINAAA, DINAF1, DINADF, DINADF, 0xBB, 0xAF, DINADF, DINADF};
    unsigned short div;
    unsigned char tmp[8];

    if (rate > DMP_SAMPLE_RATE)
        return -1;
10009846:	2001      	movs	r0, #1
10009848:	4240      	negs	r0, r0
1000984a:	e004      	b.n	10009856 <dmp_set_fifo_rate+0x5a>
    div = DMP_SAMPLE_RATE / rate - 1;
    tmp[0] = (unsigned char)((div >> 8) & 0xFF);
    tmp[1] = (unsigned char)(div & 0xFF);
    if (mpu_write_mem(D_0_22, 2, tmp))
        return -1;
1000984c:	2001      	movs	r0, #1
1000984e:	4240      	negs	r0, r0
10009850:	e001      	b.n	10009856 <dmp_set_fifo_rate+0x5a>
    if (mpu_write_mem(CFG_6, 12, (unsigned char*)regs_end))
        return -1;
10009852:	2001      	movs	r0, #1
10009854:	4240      	negs	r0, r0

    dmp.fifo_rate = rate;
    return 0;
}
10009856:	b006      	add	sp, #24
10009858:	bd10      	pop	{r4, pc}
1000985a:	46c0      	nop			; (mov r8, r8)
1000985c:	100167f0 	.word	0x100167f0
10009860:	1001517f 	.word	0x1001517f
10009864:	100131a1 	.word	0x100131a1
10009868:	00000216 	.word	0x00000216
1000986c:	10009615 	.word	0x10009615
10009870:	00000ac1 	.word	0x00000ac1
10009874:	100184ac 	.word	0x100184ac

10009878 <dmp_set_tap_thresh>:
 *  @param[in]  axis    1, 2, and 4 for XYZ accel, respectively.
 *  @param[in]  thresh  Tap threshold, in mg/ms.
 *  @return     0 if successful.
 */
int dmp_set_tap_thresh(unsigned char axis, unsigned short thresh)
{
10009878:	b5f0      	push	{r4, r5, r6, r7, lr}
1000987a:	4647      	mov	r7, r8
1000987c:	b480      	push	{r7}
1000987e:	b082      	sub	sp, #8
10009880:	0004      	movs	r4, r0
    unsigned char tmp[4], accel_fsr;
    float scaled_thresh;
    unsigned short dmp_thresh, dmp_thresh_2;
    if (!(axis & TAP_XYZ) || thresh > 1600)
10009882:	0743      	lsls	r3, r0, #29
10009884:	d100      	bne.n	10009888 <dmp_set_tap_thresh+0x10>
10009886:	e09c      	b.n	100099c2 <dmp_set_tap_thresh+0x14a>
10009888:	23c8      	movs	r3, #200	; 0xc8
1000988a:	00db      	lsls	r3, r3, #3
1000988c:	4299      	cmp	r1, r3
1000988e:	d900      	bls.n	10009892 <dmp_set_tap_thresh+0x1a>
10009890:	e09a      	b.n	100099c8 <dmp_set_tap_thresh+0x150>
        return -1;

    scaled_thresh = (float)thresh / DMP_SAMPLE_RATE;
10009892:	0008      	movs	r0, r1
10009894:	4b58      	ldr	r3, [pc, #352]	; (100099f8 <dmp_set_tap_thresh+0x180>)
10009896:	4798      	blx	r3
10009898:	4958      	ldr	r1, [pc, #352]	; (100099fc <dmp_set_tap_thresh+0x184>)
1000989a:	4b59      	ldr	r3, [pc, #356]	; (10009a00 <dmp_set_tap_thresh+0x188>)
1000989c:	4798      	blx	r3
1000989e:	1c06      	adds	r6, r0, #0

    mpu_get_accel_fsr(&accel_fsr);
100098a0:	466b      	mov	r3, sp
100098a2:	1cdd      	adds	r5, r3, #3
100098a4:	0028      	movs	r0, r5
100098a6:	4b57      	ldr	r3, [pc, #348]	; (10009a04 <dmp_set_tap_thresh+0x18c>)
100098a8:	4798      	blx	r3
    switch (accel_fsr) {
100098aa:	782b      	ldrb	r3, [r5, #0]
100098ac:	2b04      	cmp	r3, #4
100098ae:	d019      	beq.n	100098e4 <dmp_set_tap_thresh+0x6c>
100098b0:	b2da      	uxtb	r2, r3
100098b2:	2a04      	cmp	r2, #4
100098b4:	d802      	bhi.n	100098bc <dmp_set_tap_thresh+0x44>
100098b6:	2b02      	cmp	r3, #2
100098b8:	d005      	beq.n	100098c6 <dmp_set_tap_thresh+0x4e>
100098ba:	e088      	b.n	100099ce <dmp_set_tap_thresh+0x156>
100098bc:	2b08      	cmp	r3, #8
100098be:	d020      	beq.n	10009902 <dmp_set_tap_thresh+0x8a>
100098c0:	2b10      	cmp	r3, #16
100098c2:	d02d      	beq.n	10009920 <dmp_set_tap_thresh+0xa8>
100098c4:	e083      	b.n	100099ce <dmp_set_tap_thresh+0x156>
    case 2:
        dmp_thresh = (unsigned short)(scaled_thresh * 16384);
100098c6:	4b50      	ldr	r3, [pc, #320]	; (10009a08 <dmp_set_tap_thresh+0x190>)
100098c8:	4698      	mov	r8, r3
100098ca:	218d      	movs	r1, #141	; 0x8d
100098cc:	05c9      	lsls	r1, r1, #23
100098ce:	1c30      	adds	r0, r6, #0
100098d0:	4798      	blx	r3
100098d2:	4f4e      	ldr	r7, [pc, #312]	; (10009a0c <dmp_set_tap_thresh+0x194>)
100098d4:	47b8      	blx	r7
100098d6:	b285      	uxth	r5, r0
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 12288);
100098d8:	494d      	ldr	r1, [pc, #308]	; (10009a10 <dmp_set_tap_thresh+0x198>)
100098da:	1c30      	adds	r0, r6, #0
100098dc:	47c0      	blx	r8
100098de:	47b8      	blx	r7
100098e0:	b280      	uxth	r0, r0
        break;
100098e2:	e02b      	b.n	1000993c <dmp_set_tap_thresh+0xc4>
    case 4:
        dmp_thresh = (unsigned short)(scaled_thresh * 8192);
100098e4:	4b48      	ldr	r3, [pc, #288]	; (10009a08 <dmp_set_tap_thresh+0x190>)
100098e6:	4698      	mov	r8, r3
100098e8:	218c      	movs	r1, #140	; 0x8c
100098ea:	05c9      	lsls	r1, r1, #23
100098ec:	1c30      	adds	r0, r6, #0
100098ee:	4798      	blx	r3
100098f0:	4f46      	ldr	r7, [pc, #280]	; (10009a0c <dmp_set_tap_thresh+0x194>)
100098f2:	47b8      	blx	r7
100098f4:	b285      	uxth	r5, r0
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 6144);
100098f6:	4947      	ldr	r1, [pc, #284]	; (10009a14 <dmp_set_tap_thresh+0x19c>)
100098f8:	1c30      	adds	r0, r6, #0
100098fa:	47c0      	blx	r8
100098fc:	47b8      	blx	r7
100098fe:	b280      	uxth	r0, r0
        break;
10009900:	e01c      	b.n	1000993c <dmp_set_tap_thresh+0xc4>
    case 8:
        dmp_thresh = (unsigned short)(scaled_thresh * 4096);
10009902:	4b41      	ldr	r3, [pc, #260]	; (10009a08 <dmp_set_tap_thresh+0x190>)
10009904:	4698      	mov	r8, r3
10009906:	218b      	movs	r1, #139	; 0x8b
10009908:	05c9      	lsls	r1, r1, #23
1000990a:	1c30      	adds	r0, r6, #0
1000990c:	4798      	blx	r3
1000990e:	4f3f      	ldr	r7, [pc, #252]	; (10009a0c <dmp_set_tap_thresh+0x194>)
10009910:	47b8      	blx	r7
10009912:	b285      	uxth	r5, r0
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 3072);
10009914:	4940      	ldr	r1, [pc, #256]	; (10009a18 <dmp_set_tap_thresh+0x1a0>)
10009916:	1c30      	adds	r0, r6, #0
10009918:	47c0      	blx	r8
1000991a:	47b8      	blx	r7
1000991c:	b280      	uxth	r0, r0
        break;
1000991e:	e00d      	b.n	1000993c <dmp_set_tap_thresh+0xc4>
    case 16:
        dmp_thresh = (unsigned short)(scaled_thresh * 2048);
10009920:	4b39      	ldr	r3, [pc, #228]	; (10009a08 <dmp_set_tap_thresh+0x190>)
10009922:	4698      	mov	r8, r3
10009924:	218a      	movs	r1, #138	; 0x8a
10009926:	05c9      	lsls	r1, r1, #23
10009928:	1c30      	adds	r0, r6, #0
1000992a:	4798      	blx	r3
1000992c:	4f37      	ldr	r7, [pc, #220]	; (10009a0c <dmp_set_tap_thresh+0x194>)
1000992e:	47b8      	blx	r7
10009930:	b285      	uxth	r5, r0
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 1536);
10009932:	493a      	ldr	r1, [pc, #232]	; (10009a1c <dmp_set_tap_thresh+0x1a4>)
10009934:	1c30      	adds	r0, r6, #0
10009936:	47c0      	blx	r8
10009938:	47b8      	blx	r7
1000993a:	b280      	uxth	r0, r0
        break;
    default:
        return -1;
    }
    tmp[0] = (unsigned char)(dmp_thresh >> 8);
1000993c:	ab01      	add	r3, sp, #4
1000993e:	0a2a      	lsrs	r2, r5, #8
10009940:	701a      	strb	r2, [r3, #0]
    tmp[1] = (unsigned char)(dmp_thresh & 0xFF);
10009942:	705d      	strb	r5, [r3, #1]
    tmp[2] = (unsigned char)(dmp_thresh_2 >> 8);
10009944:	0a02      	lsrs	r2, r0, #8
10009946:	709a      	strb	r2, [r3, #2]
    tmp[3] = (unsigned char)(dmp_thresh_2 & 0xFF);
10009948:	70d8      	strb	r0, [r3, #3]

    if (axis & TAP_X) {
1000994a:	07e3      	lsls	r3, r4, #31
1000994c:	d510      	bpl.n	10009970 <dmp_set_tap_thresh+0xf8>
        if (mpu_write_mem(DMP_TAP_THX, 2, tmp))
1000994e:	aa01      	add	r2, sp, #4
10009950:	2102      	movs	r1, #2
10009952:	20ea      	movs	r0, #234	; 0xea
10009954:	0040      	lsls	r0, r0, #1
10009956:	4b32      	ldr	r3, [pc, #200]	; (10009a20 <dmp_set_tap_thresh+0x1a8>)
10009958:	4798      	blx	r3
1000995a:	2800      	cmp	r0, #0
1000995c:	d13a      	bne.n	100099d4 <dmp_set_tap_thresh+0x15c>
            return -1;
        if (mpu_write_mem(D_1_36, 2, tmp+2))
1000995e:	466b      	mov	r3, sp
10009960:	1d9a      	adds	r2, r3, #6
10009962:	2102      	movs	r1, #2
10009964:	3025      	adds	r0, #37	; 0x25
10009966:	30ff      	adds	r0, #255	; 0xff
10009968:	4b2d      	ldr	r3, [pc, #180]	; (10009a20 <dmp_set_tap_thresh+0x1a8>)
1000996a:	4798      	blx	r3
1000996c:	2800      	cmp	r0, #0
1000996e:	d134      	bne.n	100099da <dmp_set_tap_thresh+0x162>
            return -1;
    }
    if (axis & TAP_Y) {
10009970:	07a3      	lsls	r3, r4, #30
10009972:	d510      	bpl.n	10009996 <dmp_set_tap_thresh+0x11e>
        if (mpu_write_mem(DMP_TAP_THY, 2, tmp))
10009974:	aa01      	add	r2, sp, #4
10009976:	2102      	movs	r1, #2
10009978:	20ec      	movs	r0, #236	; 0xec
1000997a:	0040      	lsls	r0, r0, #1
1000997c:	4b28      	ldr	r3, [pc, #160]	; (10009a20 <dmp_set_tap_thresh+0x1a8>)
1000997e:	4798      	blx	r3
10009980:	2800      	cmp	r0, #0
10009982:	d12d      	bne.n	100099e0 <dmp_set_tap_thresh+0x168>
            return -1;
        if (mpu_write_mem(D_1_40, 2, tmp+2))
10009984:	466b      	mov	r3, sp
10009986:	1d9a      	adds	r2, r3, #6
10009988:	2102      	movs	r1, #2
1000998a:	3029      	adds	r0, #41	; 0x29
1000998c:	30ff      	adds	r0, #255	; 0xff
1000998e:	4b24      	ldr	r3, [pc, #144]	; (10009a20 <dmp_set_tap_thresh+0x1a8>)
10009990:	4798      	blx	r3
10009992:	2800      	cmp	r0, #0
10009994:	d127      	bne.n	100099e6 <dmp_set_tap_thresh+0x16e>
        if (mpu_write_mem(DMP_TAP_THZ, 2, tmp))
            return -1;
        if (mpu_write_mem(D_1_44, 2, tmp+2))
            return -1;
    }
    return 0;
10009996:	2000      	movs	r0, #0
        if (mpu_write_mem(DMP_TAP_THY, 2, tmp))
            return -1;
        if (mpu_write_mem(D_1_40, 2, tmp+2))
            return -1;
    }
    if (axis & TAP_Z) {
10009998:	0763      	lsls	r3, r4, #29
1000999a:	d529      	bpl.n	100099f0 <dmp_set_tap_thresh+0x178>
        if (mpu_write_mem(DMP_TAP_THZ, 2, tmp))
1000999c:	aa01      	add	r2, sp, #4
1000999e:	2102      	movs	r1, #2
100099a0:	30dd      	adds	r0, #221	; 0xdd
100099a2:	30ff      	adds	r0, #255	; 0xff
100099a4:	4b1e      	ldr	r3, [pc, #120]	; (10009a20 <dmp_set_tap_thresh+0x1a8>)
100099a6:	4798      	blx	r3
100099a8:	2800      	cmp	r0, #0
100099aa:	d11f      	bne.n	100099ec <dmp_set_tap_thresh+0x174>
            return -1;
        if (mpu_write_mem(D_1_44, 2, tmp+2))
100099ac:	466b      	mov	r3, sp
100099ae:	1d9a      	adds	r2, r3, #6
100099b0:	2102      	movs	r1, #2
100099b2:	302d      	adds	r0, #45	; 0x2d
100099b4:	30ff      	adds	r0, #255	; 0xff
100099b6:	4b1a      	ldr	r3, [pc, #104]	; (10009a20 <dmp_set_tap_thresh+0x1a8>)
100099b8:	4798      	blx	r3
100099ba:	1e43      	subs	r3, r0, #1
100099bc:	4198      	sbcs	r0, r3
100099be:	4240      	negs	r0, r0
100099c0:	e016      	b.n	100099f0 <dmp_set_tap_thresh+0x178>
{
    unsigned char tmp[4], accel_fsr;
    float scaled_thresh;
    unsigned short dmp_thresh, dmp_thresh_2;
    if (!(axis & TAP_XYZ) || thresh > 1600)
        return -1;
100099c2:	2001      	movs	r0, #1
100099c4:	4240      	negs	r0, r0
100099c6:	e013      	b.n	100099f0 <dmp_set_tap_thresh+0x178>
100099c8:	2001      	movs	r0, #1
100099ca:	4240      	negs	r0, r0
100099cc:	e010      	b.n	100099f0 <dmp_set_tap_thresh+0x178>
        dmp_thresh = (unsigned short)(scaled_thresh * 2048);
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 1536);
        break;
    default:
        return -1;
100099ce:	2001      	movs	r0, #1
100099d0:	4240      	negs	r0, r0
100099d2:	e00d      	b.n	100099f0 <dmp_set_tap_thresh+0x178>
    tmp[2] = (unsigned char)(dmp_thresh_2 >> 8);
    tmp[3] = (unsigned char)(dmp_thresh_2 & 0xFF);

    if (axis & TAP_X) {
        if (mpu_write_mem(DMP_TAP_THX, 2, tmp))
            return -1;
100099d4:	2001      	movs	r0, #1
100099d6:	4240      	negs	r0, r0
100099d8:	e00a      	b.n	100099f0 <dmp_set_tap_thresh+0x178>
        if (mpu_write_mem(D_1_36, 2, tmp+2))
            return -1;
100099da:	2001      	movs	r0, #1
100099dc:	4240      	negs	r0, r0
100099de:	e007      	b.n	100099f0 <dmp_set_tap_thresh+0x178>
    }
    if (axis & TAP_Y) {
        if (mpu_write_mem(DMP_TAP_THY, 2, tmp))
            return -1;
100099e0:	2001      	movs	r0, #1
100099e2:	4240      	negs	r0, r0
100099e4:	e004      	b.n	100099f0 <dmp_set_tap_thresh+0x178>
        if (mpu_write_mem(D_1_40, 2, tmp+2))
            return -1;
100099e6:	2001      	movs	r0, #1
100099e8:	4240      	negs	r0, r0
100099ea:	e001      	b.n	100099f0 <dmp_set_tap_thresh+0x178>
    }
    if (axis & TAP_Z) {
        if (mpu_write_mem(DMP_TAP_THZ, 2, tmp))
            return -1;
100099ec:	2001      	movs	r0, #1
100099ee:	4240      	negs	r0, r0
        if (mpu_write_mem(D_1_44, 2, tmp+2))
            return -1;
    }
    return 0;
}
100099f0:	b002      	add	sp, #8
100099f2:	bc04      	pop	{r2}
100099f4:	4690      	mov	r8, r2
100099f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
100099f8:	100141b5 	.word	0x100141b5
100099fc:	43480000 	.word	0x43480000
10009a00:	10013819 	.word	0x10013819
10009a04:	10008889 	.word	0x10008889
10009a08:	10013bad 	.word	0x10013bad
10009a0c:	100134c1 	.word	0x100134c1
10009a10:	46400000 	.word	0x46400000
10009a14:	45c00000 	.word	0x45c00000
10009a18:	45400000 	.word	0x45400000
10009a1c:	44c00000 	.word	0x44c00000
10009a20:	10009615 	.word	0x10009615

10009a24 <dmp_set_tap_axes>:
 *  @brief      Set which axes will register a tap.
 *  @param[in]  axis    1, 2, and 4 for XYZ, respectively.
 *  @return     0 if successful.
 */
int dmp_set_tap_axes(unsigned char axis)
{
10009a24:	b500      	push	{lr}
10009a26:	b083      	sub	sp, #12
    unsigned char tmp = 0;

    if (axis & TAP_X)
10009a28:	07c3      	lsls	r3, r0, #31
10009a2a:	d403      	bmi.n	10009a34 <dmp_set_tap_axes+0x10>
 *  @param[in]  axis    1, 2, and 4 for XYZ, respectively.
 *  @return     0 if successful.
 */
int dmp_set_tap_axes(unsigned char axis)
{
    unsigned char tmp = 0;
10009a2c:	2200      	movs	r2, #0
10009a2e:	466b      	mov	r3, sp
10009a30:	71da      	strb	r2, [r3, #7]
10009a32:	e002      	b.n	10009a3a <dmp_set_tap_axes+0x16>

    if (axis & TAP_X)
        tmp |= 0x30;
10009a34:	2230      	movs	r2, #48	; 0x30
10009a36:	466b      	mov	r3, sp
10009a38:	71da      	strb	r2, [r3, #7]
    if (axis & TAP_Y)
10009a3a:	0783      	lsls	r3, r0, #30
10009a3c:	d505      	bpl.n	10009a4a <dmp_set_tap_axes+0x26>
        tmp |= 0x0C;
10009a3e:	466b      	mov	r3, sp
10009a40:	1dda      	adds	r2, r3, #7
10009a42:	79d9      	ldrb	r1, [r3, #7]
10009a44:	230c      	movs	r3, #12
10009a46:	430b      	orrs	r3, r1
10009a48:	7013      	strb	r3, [r2, #0]
    if (axis & TAP_Z)
10009a4a:	0743      	lsls	r3, r0, #29
10009a4c:	d505      	bpl.n	10009a5a <dmp_set_tap_axes+0x36>
        tmp |= 0x03;
10009a4e:	466b      	mov	r3, sp
10009a50:	1dda      	adds	r2, r3, #7
10009a52:	79d9      	ldrb	r1, [r3, #7]
10009a54:	2303      	movs	r3, #3
10009a56:	430b      	orrs	r3, r1
10009a58:	7013      	strb	r3, [r2, #0]
    return mpu_write_mem(D_1_72, 1, &tmp);
10009a5a:	466b      	mov	r3, sp
10009a5c:	1dda      	adds	r2, r3, #7
10009a5e:	2101      	movs	r1, #1
10009a60:	20a4      	movs	r0, #164	; 0xa4
10009a62:	0040      	lsls	r0, r0, #1
10009a64:	4b01      	ldr	r3, [pc, #4]	; (10009a6c <dmp_set_tap_axes+0x48>)
10009a66:	4798      	blx	r3
}
10009a68:	b003      	add	sp, #12
10009a6a:	bd00      	pop	{pc}
10009a6c:	10009615 	.word	0x10009615

10009a70 <dmp_set_tap_count>:
 *  @brief      Set minimum number of taps needed for an interrupt.
 *  @param[in]  min_taps    Minimum consecutive taps (1-4).
 *  @return     0 if successful.
 */
int dmp_set_tap_count(unsigned char min_taps)
{
10009a70:	b500      	push	{lr}
10009a72:	b083      	sub	sp, #12
    unsigned char tmp;

    if (min_taps < 1)
        min_taps = 1;
10009a74:	2301      	movs	r3, #1
 */
int dmp_set_tap_count(unsigned char min_taps)
{
    unsigned char tmp;

    if (min_taps < 1)
10009a76:	2800      	cmp	r0, #0
10009a78:	d004      	beq.n	10009a84 <dmp_set_tap_count+0x14>
10009a7a:	1c03      	adds	r3, r0, #0
10009a7c:	2804      	cmp	r0, #4
10009a7e:	d900      	bls.n	10009a82 <dmp_set_tap_count+0x12>
10009a80:	2304      	movs	r3, #4
10009a82:	b2db      	uxtb	r3, r3
        min_taps = 1;
    else if (min_taps > 4)
        min_taps = 4;

    tmp = min_taps - 1;
10009a84:	466a      	mov	r2, sp
10009a86:	3207      	adds	r2, #7
10009a88:	3b01      	subs	r3, #1
10009a8a:	7013      	strb	r3, [r2, #0]
    return mpu_write_mem(D_1_79, 1, &tmp);
10009a8c:	2101      	movs	r1, #1
10009a8e:	2050      	movs	r0, #80	; 0x50
10009a90:	30ff      	adds	r0, #255	; 0xff
10009a92:	4b02      	ldr	r3, [pc, #8]	; (10009a9c <dmp_set_tap_count+0x2c>)
10009a94:	4798      	blx	r3
}
10009a96:	b003      	add	sp, #12
10009a98:	bd00      	pop	{pc}
10009a9a:	46c0      	nop			; (mov r8, r8)
10009a9c:	10009615 	.word	0x10009615

10009aa0 <dmp_set_tap_time>:
 *  @brief      Set length between valid taps.
 *  @param[in]  time    Milliseconds between taps.
 *  @return     0 if successful.
 */
int dmp_set_tap_time(unsigned short time)
{
10009aa0:	b500      	push	{lr}
10009aa2:	b083      	sub	sp, #12
    unsigned short dmp_time;
    unsigned char tmp[2];

    dmp_time = time / (1000 / DMP_SAMPLE_RATE);
10009aa4:	2105      	movs	r1, #5
10009aa6:	4b07      	ldr	r3, [pc, #28]	; (10009ac4 <dmp_set_tap_time+0x24>)
10009aa8:	4798      	blx	r3
10009aaa:	b280      	uxth	r0, r0
    tmp[0] = (unsigned char)(dmp_time >> 8);
10009aac:	aa01      	add	r2, sp, #4
10009aae:	0a03      	lsrs	r3, r0, #8
10009ab0:	7013      	strb	r3, [r2, #0]
    tmp[1] = (unsigned char)(dmp_time & 0xFF);
10009ab2:	7050      	strb	r0, [r2, #1]
    return mpu_write_mem(DMP_TAPW_MIN, 2, tmp);
10009ab4:	2102      	movs	r1, #2
10009ab6:	20ef      	movs	r0, #239	; 0xef
10009ab8:	0040      	lsls	r0, r0, #1
10009aba:	4b03      	ldr	r3, [pc, #12]	; (10009ac8 <dmp_set_tap_time+0x28>)
10009abc:	4798      	blx	r3
}
10009abe:	b003      	add	sp, #12
10009ac0:	bd00      	pop	{pc}
10009ac2:	46c0      	nop			; (mov r8, r8)
10009ac4:	1001308d 	.word	0x1001308d
10009ac8:	10009615 	.word	0x10009615

10009acc <dmp_set_tap_time_multi>:
 *  @brief      Set max time between taps to register as a multi-tap.
 *  @param[in]  time    Max milliseconds between taps.
 *  @return     0 if successful.
 */
int dmp_set_tap_time_multi(unsigned short time)
{
10009acc:	b500      	push	{lr}
10009ace:	b083      	sub	sp, #12
    unsigned short dmp_time;
    unsigned char tmp[2];

    dmp_time = time / (1000 / DMP_SAMPLE_RATE);
10009ad0:	2105      	movs	r1, #5
10009ad2:	4b07      	ldr	r3, [pc, #28]	; (10009af0 <dmp_set_tap_time_multi+0x24>)
10009ad4:	4798      	blx	r3
10009ad6:	b280      	uxth	r0, r0
    tmp[0] = (unsigned char)(dmp_time >> 8);
10009ad8:	aa01      	add	r2, sp, #4
10009ada:	0a03      	lsrs	r3, r0, #8
10009adc:	7013      	strb	r3, [r2, #0]
    tmp[1] = (unsigned char)(dmp_time & 0xFF);
10009ade:	7050      	strb	r0, [r2, #1]
    return mpu_write_mem(D_1_218, 2, tmp);
10009ae0:	2102      	movs	r1, #2
10009ae2:	20ed      	movs	r0, #237	; 0xed
10009ae4:	0040      	lsls	r0, r0, #1
10009ae6:	4b03      	ldr	r3, [pc, #12]	; (10009af4 <dmp_set_tap_time_multi+0x28>)
10009ae8:	4798      	blx	r3
}
10009aea:	b003      	add	sp, #12
10009aec:	bd00      	pop	{pc}
10009aee:	46c0      	nop			; (mov r8, r8)
10009af0:	1001308d 	.word	0x1001308d
10009af4:	10009615 	.word	0x10009615

10009af8 <dmp_set_shake_reject_thresh>:
 *  @param[in]  sf      Gyro scale factor.
 *  @param[in]  thresh  Gyro threshold in dps.
 *  @return     0 if successful.
 */
int dmp_set_shake_reject_thresh(long sf, unsigned short thresh)
{
10009af8:	b510      	push	{r4, lr}
10009afa:	b082      	sub	sp, #8
10009afc:	000c      	movs	r4, r1
    unsigned char tmp[4];
    long thresh_scaled = sf / 1000 * thresh;
10009afe:	21fa      	movs	r1, #250	; 0xfa
10009b00:	0089      	lsls	r1, r1, #2
10009b02:	4b09      	ldr	r3, [pc, #36]	; (10009b28 <dmp_set_shake_reject_thresh+0x30>)
10009b04:	4798      	blx	r3
10009b06:	4360      	muls	r0, r4
    tmp[0] = (unsigned char)(((long)thresh_scaled >> 24) & 0xFF);
10009b08:	aa01      	add	r2, sp, #4
10009b0a:	1603      	asrs	r3, r0, #24
10009b0c:	7013      	strb	r3, [r2, #0]
    tmp[1] = (unsigned char)(((long)thresh_scaled >> 16) & 0xFF);
10009b0e:	1403      	asrs	r3, r0, #16
10009b10:	7053      	strb	r3, [r2, #1]
    tmp[2] = (unsigned char)(((long)thresh_scaled >> 8) & 0xFF);
10009b12:	1203      	asrs	r3, r0, #8
10009b14:	7093      	strb	r3, [r2, #2]
    tmp[3] = (unsigned char)((long)thresh_scaled & 0xFF);
10009b16:	70d0      	strb	r0, [r2, #3]
    return mpu_write_mem(D_1_92, 4, tmp);
10009b18:	2104      	movs	r1, #4
10009b1a:	20ae      	movs	r0, #174	; 0xae
10009b1c:	0040      	lsls	r0, r0, #1
10009b1e:	4b03      	ldr	r3, [pc, #12]	; (10009b2c <dmp_set_shake_reject_thresh+0x34>)
10009b20:	4798      	blx	r3
}
10009b22:	b002      	add	sp, #8
10009b24:	bd10      	pop	{r4, pc}
10009b26:	46c0      	nop			; (mov r8, r8)
10009b28:	100131a1 	.word	0x100131a1
10009b2c:	10009615 	.word	0x10009615

10009b30 <dmp_set_shake_reject_time>:
 *  60 ms is added to this parameter.
 *  @param[in]  time    Time in milliseconds.
 *  @return     0 if successful.
 */
int dmp_set_shake_reject_time(unsigned short time)
{
10009b30:	b500      	push	{lr}
10009b32:	b083      	sub	sp, #12
    unsigned char tmp[2];

    time /= (1000 / DMP_SAMPLE_RATE);
10009b34:	2105      	movs	r1, #5
10009b36:	4b07      	ldr	r3, [pc, #28]	; (10009b54 <dmp_set_shake_reject_time+0x24>)
10009b38:	4798      	blx	r3
10009b3a:	b280      	uxth	r0, r0
    tmp[0] = time >> 8;
10009b3c:	aa01      	add	r2, sp, #4
10009b3e:	0a03      	lsrs	r3, r0, #8
10009b40:	7013      	strb	r3, [r2, #0]
    tmp[1] = time & 0xFF;
10009b42:	7050      	strb	r0, [r2, #1]
    return mpu_write_mem(D_1_90,2,tmp);
10009b44:	2102      	movs	r1, #2
10009b46:	20ad      	movs	r0, #173	; 0xad
10009b48:	0040      	lsls	r0, r0, #1
10009b4a:	4b03      	ldr	r3, [pc, #12]	; (10009b58 <dmp_set_shake_reject_time+0x28>)
10009b4c:	4798      	blx	r3
}
10009b4e:	b003      	add	sp, #12
10009b50:	bd00      	pop	{pc}
10009b52:	46c0      	nop			; (mov r8, r8)
10009b54:	1001308d 	.word	0x1001308d
10009b58:	10009615 	.word	0x10009615

10009b5c <dmp_set_shake_reject_timeout>:
 *  60 ms is added to this parameter.
 *  @param[in]  time    Time in milliseconds.
 *  @return     0 if successful.
 */
int dmp_set_shake_reject_timeout(unsigned short time)
{
10009b5c:	b500      	push	{lr}
10009b5e:	b083      	sub	sp, #12
    unsigned char tmp[2];

    time /= (1000 / DMP_SAMPLE_RATE);
10009b60:	2105      	movs	r1, #5
10009b62:	4b07      	ldr	r3, [pc, #28]	; (10009b80 <dmp_set_shake_reject_timeout+0x24>)
10009b64:	4798      	blx	r3
10009b66:	b280      	uxth	r0, r0
    tmp[0] = time >> 8;
10009b68:	aa01      	add	r2, sp, #4
10009b6a:	0a03      	lsrs	r3, r0, #8
10009b6c:	7013      	strb	r3, [r2, #0]
    tmp[1] = time & 0xFF;
10009b6e:	7050      	strb	r0, [r2, #1]
    return mpu_write_mem(D_1_88,2,tmp);
10009b70:	2102      	movs	r1, #2
10009b72:	20ac      	movs	r0, #172	; 0xac
10009b74:	0040      	lsls	r0, r0, #1
10009b76:	4b03      	ldr	r3, [pc, #12]	; (10009b84 <dmp_set_shake_reject_timeout+0x28>)
10009b78:	4798      	blx	r3
}
10009b7a:	b003      	add	sp, #12
10009b7c:	bd00      	pop	{pc}
10009b7e:	46c0      	nop			; (mov r8, r8)
10009b80:	1001308d 	.word	0x1001308d
10009b84:	10009615 	.word	0x10009615

10009b88 <dmp_enable_gyro_cal>:
 *  subtracted from the gyro output.
 *  @param[in]  enable  1 to enable gyro calibration.
 *  @return     0 if successful.
 */
int dmp_enable_gyro_cal(unsigned char enable)
{
10009b88:	b500      	push	{lr}
10009b8a:	b085      	sub	sp, #20
    if (enable) {
10009b8c:	2800      	cmp	r0, #0
10009b8e:	d00c      	beq.n	10009baa <dmp_enable_gyro_cal+0x22>
        unsigned char regs[9] = {0xb8, 0xaa, 0xb3, 0x8d, 0xb4, 0x98, 0x0d, 0x35, 0x5d};
10009b90:	2209      	movs	r2, #9
10009b92:	490d      	ldr	r1, [pc, #52]	; (10009bc8 <dmp_enable_gyro_cal+0x40>)
10009b94:	311c      	adds	r1, #28
10009b96:	a801      	add	r0, sp, #4
10009b98:	4b0c      	ldr	r3, [pc, #48]	; (10009bcc <dmp_enable_gyro_cal+0x44>)
10009b9a:	4798      	blx	r3
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
10009b9c:	aa01      	add	r2, sp, #4
10009b9e:	2109      	movs	r1, #9
10009ba0:	2097      	movs	r0, #151	; 0x97
10009ba2:	00c0      	lsls	r0, r0, #3
10009ba4:	4b0a      	ldr	r3, [pc, #40]	; (10009bd0 <dmp_enable_gyro_cal+0x48>)
10009ba6:	4798      	blx	r3
10009ba8:	e00b      	b.n	10009bc2 <dmp_enable_gyro_cal+0x3a>
    } else {
        unsigned char regs[9] = {0xb8, 0xaa, 0xaa, 0xaa, 0xb0, 0x88, 0xc3, 0xc5, 0xc7};
10009baa:	2209      	movs	r2, #9
10009bac:	4906      	ldr	r1, [pc, #24]	; (10009bc8 <dmp_enable_gyro_cal+0x40>)
10009bae:	3128      	adds	r1, #40	; 0x28
10009bb0:	a801      	add	r0, sp, #4
10009bb2:	4b06      	ldr	r3, [pc, #24]	; (10009bcc <dmp_enable_gyro_cal+0x44>)
10009bb4:	4798      	blx	r3
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
10009bb6:	aa01      	add	r2, sp, #4
10009bb8:	2109      	movs	r1, #9
10009bba:	2097      	movs	r0, #151	; 0x97
10009bbc:	00c0      	lsls	r0, r0, #3
10009bbe:	4b04      	ldr	r3, [pc, #16]	; (10009bd0 <dmp_enable_gyro_cal+0x48>)
10009bc0:	4798      	blx	r3
    }
}
10009bc2:	b005      	add	sp, #20
10009bc4:	bd00      	pop	{pc}
10009bc6:	46c0      	nop			; (mov r8, r8)
10009bc8:	100167f0 	.word	0x100167f0
10009bcc:	1001517f 	.word	0x1001517f
10009bd0:	10009615 	.word	0x10009615

10009bd4 <dmp_enable_lp_quat>:
 *  exclusive.
 *  @param[in]  enable  1 to enable 3-axis quaternion.
 *  @return     0 if successful.
 */
int dmp_enable_lp_quat(unsigned char enable)
{
10009bd4:	b500      	push	{lr}
10009bd6:	b083      	sub	sp, #12
    unsigned char regs[4];
    if (enable) {
10009bd8:	2800      	cmp	r0, #0
10009bda:	d009      	beq.n	10009bf0 <dmp_enable_lp_quat+0x1c>
        regs[0] = DINBC0;
10009bdc:	ab01      	add	r3, sp, #4
10009bde:	22c0      	movs	r2, #192	; 0xc0
10009be0:	701a      	strb	r2, [r3, #0]
        regs[1] = DINBC2;
10009be2:	3202      	adds	r2, #2
10009be4:	705a      	strb	r2, [r3, #1]
        regs[2] = DINBC4;
10009be6:	3202      	adds	r2, #2
10009be8:	709a      	strb	r2, [r3, #2]
        regs[3] = DINBC6;
10009bea:	3202      	adds	r2, #2
10009bec:	70da      	strb	r2, [r3, #3]
10009bee:	e001      	b.n	10009bf4 <dmp_enable_lp_quat+0x20>
    }
    else
        memset(regs, 0x8B, 4);
10009bf0:	4b05      	ldr	r3, [pc, #20]	; (10009c08 <dmp_enable_lp_quat+0x34>)
10009bf2:	9301      	str	r3, [sp, #4]

    mpu_write_mem(CFG_LP_QUAT, 4, regs);
10009bf4:	aa01      	add	r2, sp, #4
10009bf6:	2104      	movs	r1, #4
10009bf8:	4804      	ldr	r0, [pc, #16]	; (10009c0c <dmp_enable_lp_quat+0x38>)
10009bfa:	4b05      	ldr	r3, [pc, #20]	; (10009c10 <dmp_enable_lp_quat+0x3c>)
10009bfc:	4798      	blx	r3

    return mpu_reset_fifo();
10009bfe:	4b05      	ldr	r3, [pc, #20]	; (10009c14 <dmp_enable_lp_quat+0x40>)
10009c00:	4798      	blx	r3
}
10009c02:	b003      	add	sp, #12
10009c04:	bd00      	pop	{pc}
10009c06:	46c0      	nop			; (mov r8, r8)
10009c08:	8b8b8b8b 	.word	0x8b8b8b8b
10009c0c:	00000a98 	.word	0x00000a98
10009c10:	10009615 	.word	0x10009615
10009c14:	100085f1 	.word	0x100085f1

10009c18 <dmp_enable_6x_lp_quat>:
 *  exclusive.
 *  @param[in]   enable  1 to enable 6-axis quaternion.
 *  @return      0 if successful.
 */
int dmp_enable_6x_lp_quat(unsigned char enable)
{
10009c18:	b500      	push	{lr}
10009c1a:	b083      	sub	sp, #12
    unsigned char regs[4];
    if (enable) {
10009c1c:	2800      	cmp	r0, #0
10009c1e:	d009      	beq.n	10009c34 <dmp_enable_6x_lp_quat+0x1c>
        regs[0] = DINA20;
10009c20:	ab01      	add	r3, sp, #4
10009c22:	2220      	movs	r2, #32
10009c24:	701a      	strb	r2, [r3, #0]
        regs[1] = DINA28;
10009c26:	3208      	adds	r2, #8
10009c28:	705a      	strb	r2, [r3, #1]
        regs[2] = DINA30;
10009c2a:	3208      	adds	r2, #8
10009c2c:	709a      	strb	r2, [r3, #2]
        regs[3] = DINA38;
10009c2e:	3208      	adds	r2, #8
10009c30:	70da      	strb	r2, [r3, #3]
10009c32:	e001      	b.n	10009c38 <dmp_enable_6x_lp_quat+0x20>
    } else
        memset(regs, 0xA3, 4);
10009c34:	4b05      	ldr	r3, [pc, #20]	; (10009c4c <dmp_enable_6x_lp_quat+0x34>)
10009c36:	9301      	str	r3, [sp, #4]

    mpu_write_mem(CFG_8, 4, regs);
10009c38:	aa01      	add	r2, sp, #4
10009c3a:	2104      	movs	r1, #4
10009c3c:	4804      	ldr	r0, [pc, #16]	; (10009c50 <dmp_enable_6x_lp_quat+0x38>)
10009c3e:	4b05      	ldr	r3, [pc, #20]	; (10009c54 <dmp_enable_6x_lp_quat+0x3c>)
10009c40:	4798      	blx	r3

    return mpu_reset_fifo();
10009c42:	4b05      	ldr	r3, [pc, #20]	; (10009c58 <dmp_enable_6x_lp_quat+0x40>)
10009c44:	4798      	blx	r3
}
10009c46:	b003      	add	sp, #12
10009c48:	bd00      	pop	{pc}
10009c4a:	46c0      	nop			; (mov r8, r8)
10009c4c:	a3a3a3a3 	.word	0xa3a3a3a3
10009c50:	00000a9e 	.word	0x00000a9e
10009c54:	10009615 	.word	0x10009615
10009c58:	100085f1 	.word	0x100085f1

10009c5c <dmp_enable_feature>:
 *  mutually exclusive.
 *  @param[in]  mask    Mask of features to enable.
 *  @return     0 if successful.
 */
int dmp_enable_feature(unsigned short mask)
{
10009c5c:	b5f0      	push	{r4, r5, r6, r7, lr}
10009c5e:	b085      	sub	sp, #20
10009c60:	0004      	movs	r4, r0

    /* TODO: All of these settings can probably be integrated into the default
     * DMP image.
     */
    /* Set integration scale factor. */
    tmp[0] = (unsigned char)((GYRO_SF >> 24) & 0xFF);
10009c62:	ad01      	add	r5, sp, #4
10009c64:	2302      	movs	r3, #2
10009c66:	702b      	strb	r3, [r5, #0]
    tmp[1] = (unsigned char)((GYRO_SF >> 16) & 0xFF);
10009c68:	33c8      	adds	r3, #200	; 0xc8
10009c6a:	706b      	strb	r3, [r5, #1]
    tmp[2] = (unsigned char)((GYRO_SF >> 8) & 0xFF);
10009c6c:	3319      	adds	r3, #25
10009c6e:	70ab      	strb	r3, [r5, #2]
    tmp[3] = (unsigned char)(GYRO_SF & 0xFF);
10009c70:	3bda      	subs	r3, #218	; 0xda
10009c72:	70eb      	strb	r3, [r5, #3]
    mpu_write_mem(D_0_104, 4, tmp);
10009c74:	002a      	movs	r2, r5
10009c76:	2104      	movs	r1, #4
10009c78:	2068      	movs	r0, #104	; 0x68
10009c7a:	4b6a      	ldr	r3, [pc, #424]	; (10009e24 <dmp_enable_feature+0x1c8>)
10009c7c:	4798      	blx	r3

    /* Send sensor data to the FIFO. */
    tmp[0] = 0xA3;
10009c7e:	23a3      	movs	r3, #163	; 0xa3
10009c80:	702b      	strb	r3, [r5, #0]
10009c82:	2740      	movs	r7, #64	; 0x40
10009c84:	4027      	ands	r7, r4
    if (mask & DMP_FEATURE_SEND_RAW_ACCEL) {
10009c86:	d007      	beq.n	10009c98 <dmp_enable_feature+0x3c>
        tmp[1] = 0xC0;
10009c88:	ab01      	add	r3, sp, #4
10009c8a:	22c0      	movs	r2, #192	; 0xc0
10009c8c:	705a      	strb	r2, [r3, #1]
        tmp[2] = 0xC8;
10009c8e:	3208      	adds	r2, #8
10009c90:	709a      	strb	r2, [r3, #2]
        tmp[3] = 0xC2;
10009c92:	3a06      	subs	r2, #6
10009c94:	70da      	strb	r2, [r3, #3]
10009c96:	e004      	b.n	10009ca2 <dmp_enable_feature+0x46>
    } else {
        tmp[1] = 0xA3;
10009c98:	ab01      	add	r3, sp, #4
10009c9a:	22a3      	movs	r2, #163	; 0xa3
10009c9c:	705a      	strb	r2, [r3, #1]
        tmp[2] = 0xA3;
10009c9e:	709a      	strb	r2, [r3, #2]
        tmp[3] = 0xA3;
10009ca0:	70da      	strb	r2, [r3, #3]
10009ca2:	25c0      	movs	r5, #192	; 0xc0
10009ca4:	006d      	lsls	r5, r5, #1
10009ca6:	4025      	ands	r5, r4
    }
    if (mask & DMP_FEATURE_SEND_ANY_GYRO) {
10009ca8:	d007      	beq.n	10009cba <dmp_enable_feature+0x5e>
        tmp[4] = 0xC4;
10009caa:	ab01      	add	r3, sp, #4
10009cac:	22c4      	movs	r2, #196	; 0xc4
10009cae:	711a      	strb	r2, [r3, #4]
        tmp[5] = 0xCC;
10009cb0:	3208      	adds	r2, #8
10009cb2:	715a      	strb	r2, [r3, #5]
        tmp[6] = 0xC6;
10009cb4:	3a06      	subs	r2, #6
10009cb6:	719a      	strb	r2, [r3, #6]
10009cb8:	e004      	b.n	10009cc4 <dmp_enable_feature+0x68>
    } else {
        tmp[4] = 0xA3;
10009cba:	ab01      	add	r3, sp, #4
10009cbc:	22a3      	movs	r2, #163	; 0xa3
10009cbe:	711a      	strb	r2, [r3, #4]
        tmp[5] = 0xA3;
10009cc0:	715a      	strb	r2, [r3, #5]
        tmp[6] = 0xA3;
10009cc2:	719a      	strb	r2, [r3, #6]
    }
    tmp[7] = 0xA3;
10009cc4:	aa01      	add	r2, sp, #4
10009cc6:	23a3      	movs	r3, #163	; 0xa3
10009cc8:	71d3      	strb	r3, [r2, #7]
    tmp[8] = 0xA3;
10009cca:	7213      	strb	r3, [r2, #8]
    tmp[9] = 0xA3;
10009ccc:	7253      	strb	r3, [r2, #9]
    mpu_write_mem(CFG_15,10,tmp);
10009cce:	210a      	movs	r1, #10
10009cd0:	4855      	ldr	r0, [pc, #340]	; (10009e28 <dmp_enable_feature+0x1cc>)
10009cd2:	4b54      	ldr	r3, [pc, #336]	; (10009e24 <dmp_enable_feature+0x1c8>)
10009cd4:	4798      	blx	r3
10009cd6:	2603      	movs	r6, #3
10009cd8:	4026      	ands	r6, r4

    /* Send gesture data to the FIFO. */
    if (mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
10009cda:	d003      	beq.n	10009ce4 <dmp_enable_feature+0x88>
        tmp[0] = DINA20;
10009cdc:	2220      	movs	r2, #32
10009cde:	ab01      	add	r3, sp, #4
10009ce0:	701a      	strb	r2, [r3, #0]
10009ce2:	e002      	b.n	10009cea <dmp_enable_feature+0x8e>
    else
        tmp[0] = 0xD8;
10009ce4:	22d8      	movs	r2, #216	; 0xd8
10009ce6:	ab01      	add	r3, sp, #4
10009ce8:	701a      	strb	r2, [r3, #0]
    mpu_write_mem(CFG_27,1,tmp);
10009cea:	aa01      	add	r2, sp, #4
10009cec:	2101      	movs	r1, #1
10009cee:	484f      	ldr	r0, [pc, #316]	; (10009e2c <dmp_enable_feature+0x1d0>)
10009cf0:	4b4c      	ldr	r3, [pc, #304]	; (10009e24 <dmp_enable_feature+0x1c8>)
10009cf2:	4798      	blx	r3

    if (mask & DMP_FEATURE_GYRO_CAL)
10009cf4:	06a3      	lsls	r3, r4, #26
10009cf6:	d503      	bpl.n	10009d00 <dmp_enable_feature+0xa4>
        dmp_enable_gyro_cal(1);
10009cf8:	2001      	movs	r0, #1
10009cfa:	4b4d      	ldr	r3, [pc, #308]	; (10009e30 <dmp_enable_feature+0x1d4>)
10009cfc:	4798      	blx	r3
10009cfe:	e002      	b.n	10009d06 <dmp_enable_feature+0xaa>
    else
        dmp_enable_gyro_cal(0);
10009d00:	2000      	movs	r0, #0
10009d02:	4b4b      	ldr	r3, [pc, #300]	; (10009e30 <dmp_enable_feature+0x1d4>)
10009d04:	4798      	blx	r3

    if (mask & DMP_FEATURE_SEND_ANY_GYRO) {
10009d06:	2d00      	cmp	r5, #0
10009d08:	d019      	beq.n	10009d3e <dmp_enable_feature+0xe2>
        if (mask & DMP_FEATURE_SEND_CAL_GYRO) {
10009d0a:	05e3      	lsls	r3, r4, #23
10009d0c:	d509      	bpl.n	10009d22 <dmp_enable_feature+0xc6>
            tmp[0] = 0xB2;
10009d0e:	ab01      	add	r3, sp, #4
10009d10:	22b2      	movs	r2, #178	; 0xb2
10009d12:	701a      	strb	r2, [r3, #0]
            tmp[1] = 0x8B;
10009d14:	3a27      	subs	r2, #39	; 0x27
10009d16:	705a      	strb	r2, [r3, #1]
            tmp[2] = 0xB6;
10009d18:	322b      	adds	r2, #43	; 0x2b
10009d1a:	709a      	strb	r2, [r3, #2]
            tmp[3] = 0x9B;
10009d1c:	3a1b      	subs	r2, #27
10009d1e:	70da      	strb	r2, [r3, #3]
10009d20:	e008      	b.n	10009d34 <dmp_enable_feature+0xd8>
        } else {
            tmp[0] = DINAC0;
10009d22:	ab01      	add	r3, sp, #4
10009d24:	22b0      	movs	r2, #176	; 0xb0
10009d26:	701a      	strb	r2, [r3, #0]
            tmp[1] = DINA80;
10009d28:	3a30      	subs	r2, #48	; 0x30
10009d2a:	705a      	strb	r2, [r3, #1]
            tmp[2] = DINAC2;
10009d2c:	3234      	adds	r2, #52	; 0x34
10009d2e:	709a      	strb	r2, [r3, #2]
            tmp[3] = DINA90;
10009d30:	3a24      	subs	r2, #36	; 0x24
10009d32:	70da      	strb	r2, [r3, #3]
        }
        mpu_write_mem(CFG_GYRO_RAW_DATA, 4, tmp);
10009d34:	aa01      	add	r2, sp, #4
10009d36:	2104      	movs	r1, #4
10009d38:	483e      	ldr	r0, [pc, #248]	; (10009e34 <dmp_enable_feature+0x1d8>)
10009d3a:	4b3a      	ldr	r3, [pc, #232]	; (10009e24 <dmp_enable_feature+0x1c8>)
10009d3c:	4798      	blx	r3
    }

    if (mask & DMP_FEATURE_TAP) {
10009d3e:	07e3      	lsls	r3, r4, #31
10009d40:	d523      	bpl.n	10009d8a <dmp_enable_feature+0x12e>
        /* Enable tap. */
        tmp[0] = 0xF8;
10009d42:	aa01      	add	r2, sp, #4
10009d44:	23f8      	movs	r3, #248	; 0xf8
10009d46:	7013      	strb	r3, [r2, #0]
        mpu_write_mem(CFG_20, 1, tmp);
10009d48:	2101      	movs	r1, #1
10009d4a:	208b      	movs	r0, #139	; 0x8b
10009d4c:	0100      	lsls	r0, r0, #4
10009d4e:	4b35      	ldr	r3, [pc, #212]	; (10009e24 <dmp_enable_feature+0x1c8>)
10009d50:	4798      	blx	r3
        dmp_set_tap_thresh(TAP_XYZ, 250);
10009d52:	21fa      	movs	r1, #250	; 0xfa
10009d54:	2007      	movs	r0, #7
10009d56:	4b38      	ldr	r3, [pc, #224]	; (10009e38 <dmp_enable_feature+0x1dc>)
10009d58:	4798      	blx	r3
        dmp_set_tap_axes(TAP_XYZ);
10009d5a:	2007      	movs	r0, #7
10009d5c:	4b37      	ldr	r3, [pc, #220]	; (10009e3c <dmp_enable_feature+0x1e0>)
10009d5e:	4798      	blx	r3
        dmp_set_tap_count(1);
10009d60:	2001      	movs	r0, #1
10009d62:	4b37      	ldr	r3, [pc, #220]	; (10009e40 <dmp_enable_feature+0x1e4>)
10009d64:	4798      	blx	r3
        dmp_set_tap_time(100);
10009d66:	2064      	movs	r0, #100	; 0x64
10009d68:	4b36      	ldr	r3, [pc, #216]	; (10009e44 <dmp_enable_feature+0x1e8>)
10009d6a:	4798      	blx	r3
        dmp_set_tap_time_multi(500);
10009d6c:	20fa      	movs	r0, #250	; 0xfa
10009d6e:	0040      	lsls	r0, r0, #1
10009d70:	4b35      	ldr	r3, [pc, #212]	; (10009e48 <dmp_enable_feature+0x1ec>)
10009d72:	4798      	blx	r3

        dmp_set_shake_reject_thresh(GYRO_SF, 200);
10009d74:	21c8      	movs	r1, #200	; 0xc8
10009d76:	4835      	ldr	r0, [pc, #212]	; (10009e4c <dmp_enable_feature+0x1f0>)
10009d78:	4b35      	ldr	r3, [pc, #212]	; (10009e50 <dmp_enable_feature+0x1f4>)
10009d7a:	4798      	blx	r3
        dmp_set_shake_reject_time(40);
10009d7c:	2028      	movs	r0, #40	; 0x28
10009d7e:	4b35      	ldr	r3, [pc, #212]	; (10009e54 <dmp_enable_feature+0x1f8>)
10009d80:	4798      	blx	r3
        dmp_set_shake_reject_timeout(10);
10009d82:	200a      	movs	r0, #10
10009d84:	4b34      	ldr	r3, [pc, #208]	; (10009e58 <dmp_enable_feature+0x1fc>)
10009d86:	4798      	blx	r3
10009d88:	e007      	b.n	10009d9a <dmp_enable_feature+0x13e>
    } else {
        tmp[0] = 0xD8;
10009d8a:	aa01      	add	r2, sp, #4
10009d8c:	23d8      	movs	r3, #216	; 0xd8
10009d8e:	7013      	strb	r3, [r2, #0]
        mpu_write_mem(CFG_20, 1, tmp);
10009d90:	2101      	movs	r1, #1
10009d92:	208b      	movs	r0, #139	; 0x8b
10009d94:	0100      	lsls	r0, r0, #4
10009d96:	4b23      	ldr	r3, [pc, #140]	; (10009e24 <dmp_enable_feature+0x1c8>)
10009d98:	4798      	blx	r3
    }

    if (mask & DMP_FEATURE_ANDROID_ORIENT) {
10009d9a:	07a3      	lsls	r3, r4, #30
10009d9c:	d503      	bpl.n	10009da6 <dmp_enable_feature+0x14a>
        tmp[0] = 0xD9;
10009d9e:	22d9      	movs	r2, #217	; 0xd9
10009da0:	ab01      	add	r3, sp, #4
10009da2:	701a      	strb	r2, [r3, #0]
10009da4:	e002      	b.n	10009dac <dmp_enable_feature+0x150>
    } else
        tmp[0] = 0xD8;
10009da6:	22d8      	movs	r2, #216	; 0xd8
10009da8:	ab01      	add	r3, sp, #4
10009daa:	701a      	strb	r2, [r3, #0]
    mpu_write_mem(CFG_ANDROID_ORIENT_INT, 1, tmp);
10009dac:	aa01      	add	r2, sp, #4
10009dae:	2101      	movs	r1, #1
10009db0:	482a      	ldr	r0, [pc, #168]	; (10009e5c <dmp_enable_feature+0x200>)
10009db2:	4b1c      	ldr	r3, [pc, #112]	; (10009e24 <dmp_enable_feature+0x1c8>)
10009db4:	4798      	blx	r3

    if (mask & DMP_FEATURE_LP_QUAT)
10009db6:	0763      	lsls	r3, r4, #29
10009db8:	d503      	bpl.n	10009dc2 <dmp_enable_feature+0x166>
        dmp_enable_lp_quat(1);
10009dba:	2001      	movs	r0, #1
10009dbc:	4b28      	ldr	r3, [pc, #160]	; (10009e60 <dmp_enable_feature+0x204>)
10009dbe:	4798      	blx	r3
10009dc0:	e002      	b.n	10009dc8 <dmp_enable_feature+0x16c>
    else
        dmp_enable_lp_quat(0);
10009dc2:	2000      	movs	r0, #0
10009dc4:	4b26      	ldr	r3, [pc, #152]	; (10009e60 <dmp_enable_feature+0x204>)
10009dc6:	4798      	blx	r3

    if (mask & DMP_FEATURE_6X_LP_QUAT)
10009dc8:	06e3      	lsls	r3, r4, #27
10009dca:	d503      	bpl.n	10009dd4 <dmp_enable_feature+0x178>
        dmp_enable_6x_lp_quat(1);
10009dcc:	2001      	movs	r0, #1
10009dce:	4b25      	ldr	r3, [pc, #148]	; (10009e64 <dmp_enable_feature+0x208>)
10009dd0:	4798      	blx	r3
10009dd2:	e002      	b.n	10009dda <dmp_enable_feature+0x17e>
    else
        dmp_enable_6x_lp_quat(0);
10009dd4:	2000      	movs	r0, #0
10009dd6:	4b23      	ldr	r3, [pc, #140]	; (10009e64 <dmp_enable_feature+0x208>)
10009dd8:	4798      	blx	r3

    /* Pedometer is always enabled. */
    dmp.feature_mask = mask | DMP_FEATURE_PEDOMETER;
10009dda:	2308      	movs	r3, #8
10009ddc:	4323      	orrs	r3, r4
10009dde:	4a22      	ldr	r2, [pc, #136]	; (10009e68 <dmp_enable_feature+0x20c>)
10009de0:	8153      	strh	r3, [r2, #10]
    mpu_reset_fifo();
10009de2:	4b22      	ldr	r3, [pc, #136]	; (10009e6c <dmp_enable_feature+0x210>)
10009de4:	4798      	blx	r3

    dmp.packet_length = 0;
    if (mask & DMP_FEATURE_SEND_RAW_ACCEL)
10009de6:	2f00      	cmp	r7, #0
10009de8:	d103      	bne.n	10009df2 <dmp_enable_feature+0x196>

    /* Pedometer is always enabled. */
    dmp.feature_mask = mask | DMP_FEATURE_PEDOMETER;
    mpu_reset_fifo();

    dmp.packet_length = 0;
10009dea:	2200      	movs	r2, #0
10009dec:	4b1e      	ldr	r3, [pc, #120]	; (10009e68 <dmp_enable_feature+0x20c>)
10009dee:	739a      	strb	r2, [r3, #14]
10009df0:	e002      	b.n	10009df8 <dmp_enable_feature+0x19c>
    if (mask & DMP_FEATURE_SEND_RAW_ACCEL)
        dmp.packet_length += 6;
10009df2:	2206      	movs	r2, #6
10009df4:	4b1c      	ldr	r3, [pc, #112]	; (10009e68 <dmp_enable_feature+0x20c>)
10009df6:	739a      	strb	r2, [r3, #14]
    if (mask & DMP_FEATURE_SEND_ANY_GYRO)
10009df8:	2d00      	cmp	r5, #0
10009dfa:	d003      	beq.n	10009e04 <dmp_enable_feature+0x1a8>
        dmp.packet_length += 6;
10009dfc:	4a1a      	ldr	r2, [pc, #104]	; (10009e68 <dmp_enable_feature+0x20c>)
10009dfe:	7b93      	ldrb	r3, [r2, #14]
10009e00:	3306      	adds	r3, #6
10009e02:	7393      	strb	r3, [r2, #14]
    if (mask & (DMP_FEATURE_LP_QUAT | DMP_FEATURE_6X_LP_QUAT))
10009e04:	2314      	movs	r3, #20
10009e06:	4223      	tst	r3, r4
10009e08:	d003      	beq.n	10009e12 <dmp_enable_feature+0x1b6>
        dmp.packet_length += 16;
10009e0a:	4a17      	ldr	r2, [pc, #92]	; (10009e68 <dmp_enable_feature+0x20c>)
10009e0c:	7b93      	ldrb	r3, [r2, #14]
10009e0e:	3310      	adds	r3, #16
10009e10:	7393      	strb	r3, [r2, #14]
    if (mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
10009e12:	2e00      	cmp	r6, #0
10009e14:	d003      	beq.n	10009e1e <dmp_enable_feature+0x1c2>
        dmp.packet_length += 4;
10009e16:	4a14      	ldr	r2, [pc, #80]	; (10009e68 <dmp_enable_feature+0x20c>)
10009e18:	7b93      	ldrb	r3, [r2, #14]
10009e1a:	3304      	adds	r3, #4
10009e1c:	7393      	strb	r3, [r2, #14]

    return 0;
}
10009e1e:	2000      	movs	r0, #0
10009e20:	b005      	add	sp, #20
10009e22:	bdf0      	pop	{r4, r5, r6, r7, pc}
10009e24:	10009615 	.word	0x10009615
10009e28:	00000aa7 	.word	0x00000aa7
10009e2c:	00000ab6 	.word	0x00000ab6
10009e30:	10009b89 	.word	0x10009b89
10009e34:	00000aa2 	.word	0x00000aa2
10009e38:	10009879 	.word	0x10009879
10009e3c:	10009a25 	.word	0x10009a25
10009e40:	10009a71 	.word	0x10009a71
10009e44:	10009aa1 	.word	0x10009aa1
10009e48:	10009acd 	.word	0x10009acd
10009e4c:	02cae309 	.word	0x02cae309
10009e50:	10009af9 	.word	0x10009af9
10009e54:	10009b31 	.word	0x10009b31
10009e58:	10009b5d 	.word	0x10009b5d
10009e5c:	0000073d 	.word	0x0000073d
10009e60:	10009bd5 	.word	0x10009bd5
10009e64:	10009c19 	.word	0x10009c19
10009e68:	100184ac 	.word	0x100184ac
10009e6c:	100085f1 	.word	0x100085f1

10009e70 <sms_ble_pair_request_fn>:
    return AT_BLE_SUCCESS;
}

/* AT_BLE_PAIR_REQUEST (#10) */
at_ble_status_t sms_ble_pair_request_fn(void *params)
{
10009e70:	b510      	push	{r4, lr}
10009e72:	b082      	sub	sp, #8
    at_ble_pair_request_t *request = (at_ble_pair_request_t *)params;
    DBG_LOG_DEV("[sms_ble_pair_request_fn]\tPairing request... Bnew %d, BLE 0x%02x, T1 %d, T2 %d", button_instance.current_state, ble_current_state, timer1_current_mode, timer2_current_mode);
10009e74:	4809      	ldr	r0, [pc, #36]	; (10009e9c <sms_ble_pair_request_fn+0x2c>)
10009e76:	4b0a      	ldr	r3, [pc, #40]	; (10009ea0 <sms_ble_pair_request_fn+0x30>)
10009e78:	4798      	blx	r3
10009e7a:	4b0a      	ldr	r3, [pc, #40]	; (10009ea4 <sms_ble_pair_request_fn+0x34>)
10009e7c:	781a      	ldrb	r2, [r3, #0]
10009e7e:	b2d2      	uxtb	r2, r2
10009e80:	4b09      	ldr	r3, [pc, #36]	; (10009ea8 <sms_ble_pair_request_fn+0x38>)
10009e82:	781b      	ldrb	r3, [r3, #0]
10009e84:	b2db      	uxtb	r3, r3
10009e86:	4909      	ldr	r1, [pc, #36]	; (10009eac <sms_ble_pair_request_fn+0x3c>)
10009e88:	7808      	ldrb	r0, [r1, #0]
10009e8a:	4909      	ldr	r1, [pc, #36]	; (10009eb0 <sms_ble_pair_request_fn+0x40>)
10009e8c:	7849      	ldrb	r1, [r1, #1]
10009e8e:	9000      	str	r0, [sp, #0]
10009e90:	4808      	ldr	r0, [pc, #32]	; (10009eb4 <sms_ble_pair_request_fn+0x44>)
10009e92:	4c09      	ldr	r4, [pc, #36]	; (10009eb8 <sms_ble_pair_request_fn+0x48>)
10009e94:	47a0      	blx	r4
    //DBG_LOG_DEV("- conn handle: 0x%04x\r\n- peer features: 0x%02x", request->handle, request->peer_features);
    return AT_BLE_SUCCESS;
}
10009e96:	2000      	movs	r0, #0
10009e98:	b002      	add	sp, #8
10009e9a:	bd10      	pop	{r4, pc}
10009e9c:	100165a4 	.word	0x100165a4
10009ea0:	100153f9 	.word	0x100153f9
10009ea4:	1001a110 	.word	0x1001a110
10009ea8:	10019f64 	.word	0x10019f64
10009eac:	1001a111 	.word	0x1001a111
10009eb0:	1001a000 	.word	0x1001a000
10009eb4:	1001683c 	.word	0x1001683c
10009eb8:	100152d9 	.word	0x100152d9

10009ebc <sms_ble_notification_confirmed_fn>:

/* AT_BLE_NOTIFICATION_CONFIRMED (#29) */
at_ble_status_t sms_ble_notification_confirmed_fn(void *params)
{
10009ebc:	b510      	push	{r4, lr}
    
    at_ble_cmd_complete_event_t *notification_status = (at_ble_cmd_complete_event_t *)params;
    //button_instance.current_state = sms_button_get_state();
    //DBG_LOG_DEV("[sms_ble_notification_confirmed_fn]\tNotification sent... Bnew %d, BLE 0x%02x, T1 %d, T2 %d", button_instance.current_state, ble_current_state, timer1_current_mode, timer2_current_mode);
    //DBG_LOG_DEV("- conn handle: 0x%04x\r\n- operation: 0x%02x\r\n- status: 0x%02x", notification_status->conn_handle, notification_status->operation, notification_status->status);
    sms_dualtimer_stop(DUALTIMER_TIMER2);
10009ebe:	2001      	movs	r0, #1
10009ec0:	4b08      	ldr	r3, [pc, #32]	; (10009ee4 <sms_ble_notification_confirmed_fn+0x28>)
10009ec2:	4798      	blx	r3
    timer2_current_mode = TIMER2_MODE_NONE;
10009ec4:	2200      	movs	r2, #0
10009ec6:	4b08      	ldr	r3, [pc, #32]	; (10009ee8 <sms_ble_notification_confirmed_fn+0x2c>)
10009ec8:	701a      	strb	r2, [r3, #0]
    ble_current_state = BLE_STATE_PAIRED;
10009eca:	3222      	adds	r2, #34	; 0x22
10009ecc:	4b07      	ldr	r3, [pc, #28]	; (10009eec <sms_ble_notification_confirmed_fn+0x30>)
10009ece:	701a      	strb	r2, [r3, #0]
    //DBG_LOG_CONT_DEV(" done!");

    //gpio_pin_set_output_level(dbg_pin, DBG_PIN_LOW);
    
    //DBG_LOG_DEV("Timer1 current mode: %d", timer1_current_mode);
    if(timer1_current_mode == TIMER1_MODE_NONE) {
10009ed0:	4b07      	ldr	r3, [pc, #28]	; (10009ef0 <sms_ble_notification_confirmed_fn+0x34>)
10009ed2:	781b      	ldrb	r3, [r3, #0]
10009ed4:	2b00      	cmp	r3, #0
10009ed6:	d102      	bne.n	10009ede <sms_ble_notification_confirmed_fn+0x22>
        ulp_ready = true;
10009ed8:	3a21      	subs	r2, #33	; 0x21
10009eda:	4b06      	ldr	r3, [pc, #24]	; (10009ef4 <sms_ble_notification_confirmed_fn+0x38>)
10009edc:	701a      	strb	r2, [r3, #0]
    }
    return AT_BLE_SUCCESS;
}
10009ede:	2000      	movs	r0, #0
10009ee0:	bd10      	pop	{r4, pc}
10009ee2:	46c0      	nop			; (mov r8, r8)
10009ee4:	1000b6a5 	.word	0x1000b6a5
10009ee8:	1001a111 	.word	0x1001a111
10009eec:	1001a110 	.word	0x1001a110
10009ef0:	10019f64 	.word	0x10019f64
10009ef4:	10019ff9 	.word	0x10019ff9

10009ef8 <sms_ble_indication_confirmed_fn>:

/* AT_BLE_INDICATION_CONFIRMED (#30) */
at_ble_status_t sms_ble_indication_confirmed_fn(void *params)
{
10009ef8:	b510      	push	{r4, lr}
    
    at_ble_indication_confirmed_t *indication_status = (at_ble_indication_confirmed_t *)params;
    //button_instance.current_state = sms_button_get_state();
    //DBG_LOG_DEV("[sms_ble_indication_confirmed]\tIndication confirmed... Bnew %d, BLE 0x%02x, T1 %d, T2 %d", button_instance.current_state, ble_current_state, timer1_current_mode, timer2_current_mode);
    //DBG_LOG_DEV("- conn handle: 0x%04x\r\n- char handle: 0x%04x\r\n- status: 0x%02x", indication_status->conn_handle, indication_status->char_handle, indication_status->status);
    sms_dualtimer_stop(DUALTIMER_TIMER2);
10009efa:	2001      	movs	r0, #1
10009efc:	4b08      	ldr	r3, [pc, #32]	; (10009f20 <sms_ble_indication_confirmed_fn+0x28>)
10009efe:	4798      	blx	r3
    timer2_current_mode = TIMER2_MODE_NONE;
10009f00:	2200      	movs	r2, #0
10009f02:	4b08      	ldr	r3, [pc, #32]	; (10009f24 <sms_ble_indication_confirmed_fn+0x2c>)
10009f04:	701a      	strb	r2, [r3, #0]
    ble_current_state = BLE_STATE_PAIRED;
10009f06:	3222      	adds	r2, #34	; 0x22
10009f08:	4b07      	ldr	r3, [pc, #28]	; (10009f28 <sms_ble_indication_confirmed_fn+0x30>)
10009f0a:	701a      	strb	r2, [r3, #0]
    //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
    //sms_sensors_toggle_interrupt(SMS_EXTINT_ENABLE);
    
    //gpio_pin_set_output_level(dbg_pin, DBG_PIN_LOW);
    
    if(timer1_current_mode == TIMER1_MODE_NONE) {
10009f0c:	4b07      	ldr	r3, [pc, #28]	; (10009f2c <sms_ble_indication_confirmed_fn+0x34>)
10009f0e:	781b      	ldrb	r3, [r3, #0]
10009f10:	2b00      	cmp	r3, #0
10009f12:	d102      	bne.n	10009f1a <sms_ble_indication_confirmed_fn+0x22>
        ulp_ready = true;
10009f14:	3a21      	subs	r2, #33	; 0x21
10009f16:	4b06      	ldr	r3, [pc, #24]	; (10009f30 <sms_ble_indication_confirmed_fn+0x38>)
10009f18:	701a      	strb	r2, [r3, #0]
    }        
    return AT_BLE_SUCCESS;
}
10009f1a:	2000      	movs	r0, #0
10009f1c:	bd10      	pop	{r4, pc}
10009f1e:	46c0      	nop			; (mov r8, r8)
10009f20:	1000b6a5 	.word	0x1000b6a5
10009f24:	1001a111 	.word	0x1001a111
10009f28:	1001a110 	.word	0x1001a110
10009f2c:	10019f64 	.word	0x10019f64
10009f30:	10019ff9 	.word	0x10019ff9

10009f34 <sms_ble_startup>:
#include <stdio.h>
//#include <stdlib.h>
#include "sms_peripheral1.h"

void sms_ble_startup(void)
{
10009f34:	b510      	push	{r4, lr}
    //sms_button_toggle_interrupt(SMS_BTN_INT_DISABLE, SMS_BTN_INT_DISABLE);
    timer2_current_mode = TIMER2_MODE_LED_STARTUP;
10009f36:	2202      	movs	r2, #2
10009f38:	4b02      	ldr	r3, [pc, #8]	; (10009f44 <sms_ble_startup+0x10>)
10009f3a:	701a      	strb	r2, [r3, #0]
    sms_led_blink_start(SMS_LED_0_PIN);
10009f3c:	2016      	movs	r0, #22
10009f3e:	4b02      	ldr	r3, [pc, #8]	; (10009f48 <sms_ble_startup+0x14>)
10009f40:	4798      	blx	r3
}
10009f42:	bd10      	pop	{r4, pc}
10009f44:	1001a111 	.word	0x1001a111
10009f48:	1000af0d 	.word	0x1000af0d

10009f4c <sms_ble_power_down>:

void sms_ble_power_down(void)
{
10009f4c:	b510      	push	{r4, lr}
    sms_monitor_get_states("[sms_ble_power_down]");
10009f4e:	482c      	ldr	r0, [pc, #176]	; (1000a000 <sms_ble_power_down+0xb4>)
10009f50:	4b2c      	ldr	r3, [pc, #176]	; (1000a004 <sms_ble_power_down+0xb8>)
10009f52:	4798      	blx	r3
    if(ble_current_state == BLE_STATE_POWEROFF) {
10009f54:	4b2c      	ldr	r3, [pc, #176]	; (1000a008 <sms_ble_power_down+0xbc>)
10009f56:	781b      	ldrb	r3, [r3, #0]
10009f58:	2b00      	cmp	r3, #0
10009f5a:	d105      	bne.n	10009f68 <sms_ble_power_down+0x1c>
        /* If already power off state, then go back sleeping */
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        ulp_ready = true;
10009f5c:	2201      	movs	r2, #1
10009f5e:	4b2b      	ldr	r3, [pc, #172]	; (1000a00c <sms_ble_power_down+0xc0>)
10009f60:	701a      	strb	r2, [r3, #0]
        release_sleep_lock();
10009f62:	4b2b      	ldr	r3, [pc, #172]	; (1000a010 <sms_ble_power_down+0xc4>)
10009f64:	4798      	blx	r3
10009f66:	e049      	b.n	10009ffc <sms_ble_power_down+0xb0>
    }
    else {
        /* Disable button interrupts */
        //sms_button_toggle_interrupt(SMS_BTN_INT_DISABLE, SMS_BTN_INT_DISABLE);        
        /* Disconnect if necessary from BLE network */
        switch(ble_current_state) {
10009f68:	4b27      	ldr	r3, [pc, #156]	; (1000a008 <sms_ble_power_down+0xbc>)
10009f6a:	781b      	ldrb	r3, [r3, #0]
10009f6c:	b2db      	uxtb	r3, r3
10009f6e:	2b21      	cmp	r3, #33	; 0x21
10009f70:	d030      	beq.n	10009fd4 <sms_ble_power_down+0x88>
10009f72:	d802      	bhi.n	10009f7a <sms_ble_power_down+0x2e>
10009f74:	2b20      	cmp	r3, #32
10009f76:	d005      	beq.n	10009f84 <sms_ble_power_down+0x38>
10009f78:	e037      	b.n	10009fea <sms_ble_power_down+0x9e>
10009f7a:	2b22      	cmp	r3, #34	; 0x22
10009f7c:	d017      	beq.n	10009fae <sms_ble_power_down+0x62>
10009f7e:	2b23      	cmp	r3, #35	; 0x23
10009f80:	d01b      	beq.n	10009fba <sms_ble_power_down+0x6e>
10009f82:	e032      	b.n	10009fea <sms_ble_power_down+0x9e>
            case BLE_STATE_ADVERTISING:
            DBG_LOG_DEV("[sms_ble_power_down]\tStopping command received during advertisement. Stopping... ");
10009f84:	4823      	ldr	r0, [pc, #140]	; (1000a014 <sms_ble_power_down+0xc8>)
10009f86:	4b24      	ldr	r3, [pc, #144]	; (1000a018 <sms_ble_power_down+0xcc>)
10009f88:	4798      	blx	r3
10009f8a:	4824      	ldr	r0, [pc, #144]	; (1000a01c <sms_ble_power_down+0xd0>)
10009f8c:	4b24      	ldr	r3, [pc, #144]	; (1000a020 <sms_ble_power_down+0xd4>)
10009f8e:	4798      	blx	r3
            if(at_ble_adv_stop() != AT_BLE_SUCCESS) {
10009f90:	4b24      	ldr	r3, [pc, #144]	; (1000a024 <sms_ble_power_down+0xd8>)
10009f92:	4798      	blx	r3
10009f94:	2800      	cmp	r0, #0
10009f96:	d003      	beq.n	10009fa0 <sms_ble_power_down+0x54>
                DBG_LOG_CONT_DEV("failed!!!");
10009f98:	4823      	ldr	r0, [pc, #140]	; (1000a028 <sms_ble_power_down+0xdc>)
10009f9a:	4b21      	ldr	r3, [pc, #132]	; (1000a020 <sms_ble_power_down+0xd4>)
10009f9c:	4798      	blx	r3
10009f9e:	e024      	b.n	10009fea <sms_ble_power_down+0x9e>
                //#pragma TBD: manage adv_stop failure
            }
            else {
                DBG_LOG_CONT_DEV("done!");
10009fa0:	4822      	ldr	r0, [pc, #136]	; (1000a02c <sms_ble_power_down+0xe0>)
10009fa2:	4b1f      	ldr	r3, [pc, #124]	; (1000a020 <sms_ble_power_down+0xd4>)
10009fa4:	4798      	blx	r3
                ble_current_state = BLE_STATE_DISCONNECTED;
10009fa6:	2211      	movs	r2, #17
10009fa8:	4b17      	ldr	r3, [pc, #92]	; (1000a008 <sms_ble_power_down+0xbc>)
10009faa:	701a      	strb	r2, [r3, #0]
10009fac:	e01d      	b.n	10009fea <sms_ble_power_down+0x9e>
            }
            break;
            
            case BLE_STATE_PAIRED:
            DBG_LOG_DEV("[sms_ble_power_down]\t\tDevice paired... disabling interrupts & switching down sensors");
10009fae:	4819      	ldr	r0, [pc, #100]	; (1000a014 <sms_ble_power_down+0xc8>)
10009fb0:	4b19      	ldr	r3, [pc, #100]	; (1000a018 <sms_ble_power_down+0xcc>)
10009fb2:	4798      	blx	r3
10009fb4:	481e      	ldr	r0, [pc, #120]	; (1000a030 <sms_ble_power_down+0xe4>)
10009fb6:	4b1a      	ldr	r3, [pc, #104]	; (1000a020 <sms_ble_power_down+0xd4>)
10009fb8:	4798      	blx	r3
            
            case BLE_STATE_INDICATING:
            DBG_LOG_DEV("[sms_ble_power_down]\t\tCurrently indicating");
10009fba:	4816      	ldr	r0, [pc, #88]	; (1000a014 <sms_ble_power_down+0xc8>)
10009fbc:	4b16      	ldr	r3, [pc, #88]	; (1000a018 <sms_ble_power_down+0xcc>)
10009fbe:	4798      	blx	r3
10009fc0:	481c      	ldr	r0, [pc, #112]	; (1000a034 <sms_ble_power_down+0xe8>)
10009fc2:	4b17      	ldr	r3, [pc, #92]	; (1000a020 <sms_ble_power_down+0xd4>)
10009fc4:	4798      	blx	r3
            pressure_device.state = PRESSURE_STATE_OFF;
10009fc6:	2100      	movs	r1, #0
10009fc8:	2328      	movs	r3, #40	; 0x28
10009fca:	4a1b      	ldr	r2, [pc, #108]	; (1000a038 <sms_ble_power_down+0xec>)
10009fcc:	54d1      	strb	r1, [r2, r3]
            sms_sensors_interrupt_toggle(false, false);
10009fce:	2000      	movs	r0, #0
10009fd0:	4b1a      	ldr	r3, [pc, #104]	; (1000a03c <sms_ble_power_down+0xf0>)
10009fd2:	4798      	blx	r3
            //#pragma TBD: switch-off sensors to save current
            //sms_sensors_switch(false);
            
            case BLE_STATE_CONNECTED:
            DBG_LOG_DEV("[sms_ble_power_down]\t\tDevice connected... disconnecting");
10009fd4:	480f      	ldr	r0, [pc, #60]	; (1000a014 <sms_ble_power_down+0xc8>)
10009fd6:	4b10      	ldr	r3, [pc, #64]	; (1000a018 <sms_ble_power_down+0xcc>)
10009fd8:	4798      	blx	r3
10009fda:	4819      	ldr	r0, [pc, #100]	; (1000a040 <sms_ble_power_down+0xf4>)
10009fdc:	4b10      	ldr	r3, [pc, #64]	; (1000a020 <sms_ble_power_down+0xd4>)
10009fde:	4798      	blx	r3
            at_ble_disconnect(sms_connection_handle, AT_BLE_TERMINATED_BY_USER);
10009fe0:	4b18      	ldr	r3, [pc, #96]	; (1000a044 <sms_ble_power_down+0xf8>)
10009fe2:	8818      	ldrh	r0, [r3, #0]
10009fe4:	2113      	movs	r1, #19
10009fe6:	4b18      	ldr	r3, [pc, #96]	; (1000a048 <sms_ble_power_down+0xfc>)
10009fe8:	4798      	blx	r3
            
            default:
            break;
        }
        
        ble_current_state = BLE_STATE_DISCONNECTED;
10009fea:	2211      	movs	r2, #17
10009fec:	4b06      	ldr	r3, [pc, #24]	; (1000a008 <sms_ble_power_down+0xbc>)
10009fee:	701a      	strb	r2, [r3, #0]
        timer2_current_mode = TIMER2_MODE_LED_SHUTDOWN;
10009ff0:	3a0e      	subs	r2, #14
10009ff2:	4b16      	ldr	r3, [pc, #88]	; (1000a04c <sms_ble_power_down+0x100>)
10009ff4:	701a      	strb	r2, [r3, #0]
        sms_led_blink_start(SMS_LED_0_PIN);
10009ff6:	2016      	movs	r0, #22
10009ff8:	4b15      	ldr	r3, [pc, #84]	; (1000a050 <sms_ble_power_down+0x104>)
10009ffa:	4798      	blx	r3
    }
}
10009ffc:	bd10      	pop	{r4, pc}
10009ffe:	46c0      	nop			; (mov r8, r8)
1000a000:	1001688c 	.word	0x1001688c
1000a004:	1000a9dd 	.word	0x1000a9dd
1000a008:	1001a110 	.word	0x1001a110
1000a00c:	10019ff9 	.word	0x10019ff9
1000a010:	1000f68d 	.word	0x1000f68d
1000a014:	100165a4 	.word	0x100165a4
1000a018:	100153f9 	.word	0x100153f9
1000a01c:	100168a4 	.word	0x100168a4
1000a020:	100152d9 	.word	0x100152d9
1000a024:	10010995 	.word	0x10010995
1000a028:	100168f8 	.word	0x100168f8
1000a02c:	10016904 	.word	0x10016904
1000a030:	1001690c 	.word	0x1001690c
1000a034:	10016964 	.word	0x10016964
1000a038:	1001a074 	.word	0x1001a074
1000a03c:	1000b395 	.word	0x1000b395
1000a040:	10016990 	.word	0x10016990
1000a044:	10019ffa 	.word	0x10019ffa
1000a048:	100109c1 	.word	0x100109c1
1000a04c:	1001a111 	.word	0x1001a111
1000a050:	1000af0d 	.word	0x1000af0d

1000a054 <sms_ble_adv_report_fn>:
    return AT_BLE_FAILURE;
}

/* AT_BLE_ADV_REPORT (#3) */
at_ble_status_t sms_ble_adv_report_fn(void *params)
{
1000a054:	b510      	push	{r4, lr}
    at_ble_adv_report_t *adv_report = (at_ble_adv_report_t *)params;
    ble_current_state = BLE_STATE_DISCONNECTED;
1000a056:	2211      	movs	r2, #17
1000a058:	4b05      	ldr	r3, [pc, #20]	; (1000a070 <sms_ble_adv_report_fn+0x1c>)
1000a05a:	701a      	strb	r2, [r3, #0]
    DBG_LOG_DEV("[sms_ble_adv_report_fn]\tAdvertisement timeout...");
1000a05c:	4805      	ldr	r0, [pc, #20]	; (1000a074 <sms_ble_adv_report_fn+0x20>)
1000a05e:	4b06      	ldr	r3, [pc, #24]	; (1000a078 <sms_ble_adv_report_fn+0x24>)
1000a060:	4798      	blx	r3
1000a062:	4806      	ldr	r0, [pc, #24]	; (1000a07c <sms_ble_adv_report_fn+0x28>)
1000a064:	4b06      	ldr	r3, [pc, #24]	; (1000a080 <sms_ble_adv_report_fn+0x2c>)
1000a066:	4798      	blx	r3
    //DBG_LOG_DEV("- status: 0x%02x", adv_report->status);
    sms_ble_power_down();
1000a068:	4b06      	ldr	r3, [pc, #24]	; (1000a084 <sms_ble_adv_report_fn+0x30>)
1000a06a:	4798      	blx	r3
    return AT_BLE_SUCCESS;
}
1000a06c:	2000      	movs	r0, #0
1000a06e:	bd10      	pop	{r4, pc}
1000a070:	1001a110 	.word	0x1001a110
1000a074:	100165a4 	.word	0x100165a4
1000a078:	100153f9 	.word	0x100153f9
1000a07c:	100169c8 	.word	0x100169c8
1000a080:	100152d9 	.word	0x100152d9
1000a084:	10009f4d 	.word	0x10009f4d

1000a088 <sms_ble_connected_fn>:

/* AT_BLE_CONNECTED (#5) */
at_ble_status_t sms_ble_connected_fn(void *params)
{
1000a088:	b510      	push	{r4, lr}
    if(ble_current_state == BLE_STATE_ADVERTISING) {
1000a08a:	4b0a      	ldr	r3, [pc, #40]	; (1000a0b4 <sms_ble_connected_fn+0x2c>)
1000a08c:	781b      	ldrb	r3, [r3, #0]
1000a08e:	2b20      	cmp	r3, #32
1000a090:	d10c      	bne.n	1000a0ac <sms_ble_connected_fn+0x24>
        at_ble_connected_t *connected = (at_ble_connected_t *)params;
        sms_ble_conn_handle = connected->handle;
1000a092:	8902      	ldrh	r2, [r0, #8]
1000a094:	4b08      	ldr	r3, [pc, #32]	; (1000a0b8 <sms_ble_connected_fn+0x30>)
1000a096:	801a      	strh	r2, [r3, #0]
        ble_current_state = BLE_STATE_CONNECTED;
1000a098:	2221      	movs	r2, #33	; 0x21
1000a09a:	4b06      	ldr	r3, [pc, #24]	; (1000a0b4 <sms_ble_connected_fn+0x2c>)
1000a09c:	701a      	strb	r2, [r3, #0]
        DBG_LOG_DEV("[sms_ble_connected_fn]\t\tDevices connected...");
1000a09e:	4807      	ldr	r0, [pc, #28]	; (1000a0bc <sms_ble_connected_fn+0x34>)
1000a0a0:	4b07      	ldr	r3, [pc, #28]	; (1000a0c0 <sms_ble_connected_fn+0x38>)
1000a0a2:	4798      	blx	r3
1000a0a4:	4807      	ldr	r0, [pc, #28]	; (1000a0c4 <sms_ble_connected_fn+0x3c>)
1000a0a6:	4b08      	ldr	r3, [pc, #32]	; (1000a0c8 <sms_ble_connected_fn+0x40>)
1000a0a8:	4798      	blx	r3
1000a0aa:	e001      	b.n	1000a0b0 <sms_ble_connected_fn+0x28>
        //for(uint8_t i = 0; i < AT_BLE_ADDR_LEN; i++) {
            //DBG_LOG_CONT_DEV("%02x",connected->peer_addr.addr[AT_BLE_ADDR_LEN - (i+1)]);
        //}            
    }
    else {
        sms_ble_power_down();
1000a0ac:	4b07      	ldr	r3, [pc, #28]	; (1000a0cc <sms_ble_connected_fn+0x44>)
1000a0ae:	4798      	blx	r3
    }    
    return AT_BLE_SUCCESS;
}
1000a0b0:	2000      	movs	r0, #0
1000a0b2:	bd10      	pop	{r4, pc}
1000a0b4:	1001a110 	.word	0x1001a110
1000a0b8:	1001a106 	.word	0x1001a106
1000a0bc:	100165a4 	.word	0x100165a4
1000a0c0:	100153f9 	.word	0x100153f9
1000a0c4:	100169fc 	.word	0x100169fc
1000a0c8:	100152d9 	.word	0x100152d9
1000a0cc:	10009f4d 	.word	0x10009f4d

1000a0d0 <sms_ble_paired_fn>:
    return AT_BLE_SUCCESS;
}

/* AT_BLE_PAIR_DONE (#9) */
at_ble_status_t sms_ble_paired_fn(void *params)
{
1000a0d0:	b510      	push	{r4, lr}
    if(ble_current_state == BLE_STATE_CONNECTED) {
1000a0d2:	4b09      	ldr	r3, [pc, #36]	; (1000a0f8 <sms_ble_paired_fn+0x28>)
1000a0d4:	781b      	ldrb	r3, [r3, #0]
1000a0d6:	2b21      	cmp	r3, #33	; 0x21
1000a0d8:	d10a      	bne.n	1000a0f0 <sms_ble_paired_fn+0x20>
        ble_current_state = BLE_STATE_PAIRED;
1000a0da:	2222      	movs	r2, #34	; 0x22
1000a0dc:	4b06      	ldr	r3, [pc, #24]	; (1000a0f8 <sms_ble_paired_fn+0x28>)
1000a0de:	701a      	strb	r2, [r3, #0]
        at_ble_pair_done_t *pair_status = (at_ble_pair_done_t *)params;
        sms_monitor_get_states("[sms_ble_paired_fn]");
1000a0e0:	4806      	ldr	r0, [pc, #24]	; (1000a0fc <sms_ble_paired_fn+0x2c>)
1000a0e2:	4b07      	ldr	r3, [pc, #28]	; (1000a100 <sms_ble_paired_fn+0x30>)
1000a0e4:	4798      	blx	r3
        //DBG_LOG_DEV("- conn handle: 0x%04x\r\n- authorization: 0x%02x\r\n- status: 0x%02x", pair_status->handle, pair_status->auth, pair_status->status);
        sms_sensors_switch(true, true); // ! Release sleep lock & enable buttons interrupt after reset done!
1000a0e6:	2101      	movs	r1, #1
1000a0e8:	2001      	movs	r0, #1
1000a0ea:	4b06      	ldr	r3, [pc, #24]	; (1000a104 <sms_ble_paired_fn+0x34>)
1000a0ec:	4798      	blx	r3
1000a0ee:	e001      	b.n	1000a0f4 <sms_ble_paired_fn+0x24>
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
    }
    else {
        sms_ble_power_down();
1000a0f0:	4b05      	ldr	r3, [pc, #20]	; (1000a108 <sms_ble_paired_fn+0x38>)
1000a0f2:	4798      	blx	r3
    }        
    return AT_BLE_SUCCESS;
}
1000a0f4:	2000      	movs	r0, #0
1000a0f6:	bd10      	pop	{r4, pc}
1000a0f8:	1001a110 	.word	0x1001a110
1000a0fc:	10016a2c 	.word	0x10016a2c
1000a100:	1000a9dd 	.word	0x1000a9dd
1000a104:	1000b421 	.word	0x1000b421
1000a108:	10009f4d 	.word	0x10009f4d

1000a10c <sms_ble_advertise>:
        sms_led_blink_start(SMS_LED_0_PIN);
    }
}

at_ble_status_t sms_ble_advertise(void)
{
1000a10c:	b510      	push	{r4, lr}
1000a10e:	b084      	sub	sp, #16
    at_ble_status_t status = AT_BLE_FAILURE;
    ble_current_state = BLE_STATE_ADVERTISING;
1000a110:	2220      	movs	r2, #32
1000a112:	4b17      	ldr	r3, [pc, #92]	; (1000a170 <sms_ble_advertise+0x64>)
1000a114:	701a      	strb	r2, [r3, #0]

    /* Set the advertisement data */
    if((status = ble_advertisement_data_set()) != AT_BLE_SUCCESS) {
1000a116:	4b17      	ldr	r3, [pc, #92]	; (1000a174 <sms_ble_advertise+0x68>)
1000a118:	4798      	blx	r3
1000a11a:	1e04      	subs	r4, r0, #0
1000a11c:	d007      	beq.n	1000a12e <sms_ble_advertise+0x22>
        DBG_LOG("[sms_ble_advertise]\tAdvertisement data set failed!");
1000a11e:	4816      	ldr	r0, [pc, #88]	; (1000a178 <sms_ble_advertise+0x6c>)
1000a120:	4b16      	ldr	r3, [pc, #88]	; (1000a17c <sms_ble_advertise+0x70>)
1000a122:	4798      	blx	r3
1000a124:	4816      	ldr	r0, [pc, #88]	; (1000a180 <sms_ble_advertise+0x74>)
1000a126:	4b17      	ldr	r3, [pc, #92]	; (1000a184 <sms_ble_advertise+0x78>)
1000a128:	4798      	blx	r3
        return status;
1000a12a:	0020      	movs	r0, r4
1000a12c:	e01e      	b.n	1000a16c <sms_ble_advertise+0x60>
    }

    /* Start of advertisement */
    if((status = at_ble_adv_start(AT_BLE_ADV_TYPE_UNDIRECTED, AT_BLE_ADV_GEN_DISCOVERABLE, NULL, AT_BLE_ADV_FP_ANY, APP_FAST_ADV, APP_ADV_TIMEOUT, 0)) == AT_BLE_SUCCESS)
1000a12e:	2300      	movs	r3, #0
1000a130:	9302      	str	r3, [sp, #8]
1000a132:	4b15      	ldr	r3, [pc, #84]	; (1000a188 <sms_ble_advertise+0x7c>)
1000a134:	9301      	str	r3, [sp, #4]
1000a136:	23c8      	movs	r3, #200	; 0xc8
1000a138:	00db      	lsls	r3, r3, #3
1000a13a:	9300      	str	r3, [sp, #0]
1000a13c:	2300      	movs	r3, #0
1000a13e:	2200      	movs	r2, #0
1000a140:	2101      	movs	r1, #1
1000a142:	2000      	movs	r0, #0
1000a144:	4c11      	ldr	r4, [pc, #68]	; (1000a18c <sms_ble_advertise+0x80>)
1000a146:	47a0      	blx	r4
1000a148:	1e04      	subs	r4, r0, #0
1000a14a:	d107      	bne.n	1000a15c <sms_ble_advertise+0x50>
    {
        DBG_LOG_DEV("[sms_ble_advertise]\t\tBLE Started Advertisement");
1000a14c:	480a      	ldr	r0, [pc, #40]	; (1000a178 <sms_ble_advertise+0x6c>)
1000a14e:	4b0b      	ldr	r3, [pc, #44]	; (1000a17c <sms_ble_advertise+0x70>)
1000a150:	4798      	blx	r3
1000a152:	480f      	ldr	r0, [pc, #60]	; (1000a190 <sms_ble_advertise+0x84>)
1000a154:	4b0b      	ldr	r3, [pc, #44]	; (1000a184 <sms_ble_advertise+0x78>)
1000a156:	4798      	blx	r3
        return AT_BLE_SUCCESS;
1000a158:	2000      	movs	r0, #0
1000a15a:	e007      	b.n	1000a16c <sms_ble_advertise+0x60>
    } 
    else {
        DBG_LOG("[sms_service_advertise]\tBLE Advertisement start failed: reason 0x%x", status);
1000a15c:	4806      	ldr	r0, [pc, #24]	; (1000a178 <sms_ble_advertise+0x6c>)
1000a15e:	4b07      	ldr	r3, [pc, #28]	; (1000a17c <sms_ble_advertise+0x70>)
1000a160:	4798      	blx	r3
1000a162:	0021      	movs	r1, r4
1000a164:	480b      	ldr	r0, [pc, #44]	; (1000a194 <sms_ble_advertise+0x88>)
1000a166:	4b07      	ldr	r3, [pc, #28]	; (1000a184 <sms_ble_advertise+0x78>)
1000a168:	4798      	blx	r3
    }
    return AT_BLE_FAILURE;
1000a16a:	20e2      	movs	r0, #226	; 0xe2
}
1000a16c:	b004      	add	sp, #16
1000a16e:	bd10      	pop	{r4, pc}
1000a170:	1001a110 	.word	0x1001a110
1000a174:	1000ecd5 	.word	0x1000ecd5
1000a178:	100165a4 	.word	0x100165a4
1000a17c:	100153f9 	.word	0x100153f9
1000a180:	10016a40 	.word	0x10016a40
1000a184:	100152d9 	.word	0x100152d9
1000a188:	0000028f 	.word	0x0000028f
1000a18c:	10010859 	.word	0x10010859
1000a190:	10016a74 	.word	0x10016a74
1000a194:	10016aa4 	.word	0x10016aa4

1000a198 <sms_ble_disconnected_fn>:
    return AT_BLE_SUCCESS;
}

/* AT_BLE_DISCONNECTED (#6) */
at_ble_status_t sms_ble_disconnected_fn(void *params)
{
1000a198:	b530      	push	{r4, r5, lr}
1000a19a:	b083      	sub	sp, #12
1000a19c:	0005      	movs	r5, r0
    at_ble_disconnected_t *disconnect = (at_ble_disconnected_t *)params;
    if(ble_current_state == BLE_STATE_PAIRED) {
1000a19e:	4b1c      	ldr	r3, [pc, #112]	; (1000a210 <sms_ble_disconnected_fn+0x78>)
1000a1a0:	781b      	ldrb	r3, [r3, #0]
1000a1a2:	2b22      	cmp	r3, #34	; 0x22
1000a1a4:	d10a      	bne.n	1000a1bc <sms_ble_disconnected_fn+0x24>
        pressure_device.state = PRESSURE_STATE_OFF;
1000a1a6:	2100      	movs	r1, #0
1000a1a8:	3306      	adds	r3, #6
1000a1aa:	4a1a      	ldr	r2, [pc, #104]	; (1000a214 <sms_ble_disconnected_fn+0x7c>)
1000a1ac:	54d1      	strb	r1, [r2, r3]
        sms_sensors_interrupt_toggle(false, false);
1000a1ae:	2000      	movs	r0, #0
1000a1b0:	4b19      	ldr	r3, [pc, #100]	; (1000a218 <sms_ble_disconnected_fn+0x80>)
1000a1b2:	4798      	blx	r3
        sms_sensors_switch(false, false);
1000a1b4:	2100      	movs	r1, #0
1000a1b6:	2000      	movs	r0, #0
1000a1b8:	4b18      	ldr	r3, [pc, #96]	; (1000a21c <sms_ble_disconnected_fn+0x84>)
1000a1ba:	4798      	blx	r3
    }
    ble_current_state = BLE_STATE_DISCONNECTED;
1000a1bc:	4c14      	ldr	r4, [pc, #80]	; (1000a210 <sms_ble_disconnected_fn+0x78>)
1000a1be:	2311      	movs	r3, #17
1000a1c0:	7023      	strb	r3, [r4, #0]
    DBG_LOG_DEV("[sms_ble_disconnected_fn]\tPeer disconnected... Bnew %d, BLE 0x%02x, T1 %d, T2 %d", button_instance.current_state, ble_current_state, timer1_current_mode, timer2_current_mode);
1000a1c2:	4817      	ldr	r0, [pc, #92]	; (1000a220 <sms_ble_disconnected_fn+0x88>)
1000a1c4:	4b17      	ldr	r3, [pc, #92]	; (1000a224 <sms_ble_disconnected_fn+0x8c>)
1000a1c6:	4798      	blx	r3
1000a1c8:	7822      	ldrb	r2, [r4, #0]
1000a1ca:	b2d2      	uxtb	r2, r2
1000a1cc:	4b16      	ldr	r3, [pc, #88]	; (1000a228 <sms_ble_disconnected_fn+0x90>)
1000a1ce:	781b      	ldrb	r3, [r3, #0]
1000a1d0:	b2db      	uxtb	r3, r3
1000a1d2:	4916      	ldr	r1, [pc, #88]	; (1000a22c <sms_ble_disconnected_fn+0x94>)
1000a1d4:	7808      	ldrb	r0, [r1, #0]
1000a1d6:	4916      	ldr	r1, [pc, #88]	; (1000a230 <sms_ble_disconnected_fn+0x98>)
1000a1d8:	7849      	ldrb	r1, [r1, #1]
1000a1da:	9000      	str	r0, [sp, #0]
1000a1dc:	4815      	ldr	r0, [pc, #84]	; (1000a234 <sms_ble_disconnected_fn+0x9c>)
1000a1de:	4c16      	ldr	r4, [pc, #88]	; (1000a238 <sms_ble_disconnected_fn+0xa0>)
1000a1e0:	47a0      	blx	r4
    //DBG_LOG_DEV("- conn handle: 0x%04x\r\n- reason: 0x%02x", disconnect->handle, disconnect->reason);
    switch(disconnect->reason) {
1000a1e2:	78ab      	ldrb	r3, [r5, #2]
1000a1e4:	2b1a      	cmp	r3, #26
1000a1e6:	d00b      	beq.n	1000a200 <sms_ble_disconnected_fn+0x68>
1000a1e8:	b2da      	uxtb	r2, r3
1000a1ea:	2a1a      	cmp	r2, #26
1000a1ec:	d804      	bhi.n	1000a1f8 <sms_ble_disconnected_fn+0x60>
1000a1ee:	2b05      	cmp	r3, #5
1000a1f0:	d006      	beq.n	1000a200 <sms_ble_disconnected_fn+0x68>
1000a1f2:	2b08      	cmp	r3, #8
1000a1f4:	d107      	bne.n	1000a206 <sms_ble_disconnected_fn+0x6e>
1000a1f6:	e003      	b.n	1000a200 <sms_ble_disconnected_fn+0x68>
1000a1f8:	2b29      	cmp	r3, #41	; 0x29
1000a1fa:	d001      	beq.n	1000a200 <sms_ble_disconnected_fn+0x68>
1000a1fc:	2b3b      	cmp	r3, #59	; 0x3b
1000a1fe:	d102      	bne.n	1000a206 <sms_ble_disconnected_fn+0x6e>
        case AT_BLE_AUTH_FAILURE: //0x05
        case AT_BLE_SUPERVISION_TIMEOUT: //0x08
        case AT_BLE_UNSUPPORTED_REMOTE_FEATURE: // 0x1A
        case AT_BLE_PAIRING_WITH_UNIT_KEY_NOT_SUP: // 0x29
        case AT_BLE_UNACCEPTABLE_INTERVAL: // 0x3B
        sms_ble_advertise();
1000a200:	4b0e      	ldr	r3, [pc, #56]	; (1000a23c <sms_ble_disconnected_fn+0xa4>)
1000a202:	4798      	blx	r3
        break;
1000a204:	e001      	b.n	1000a20a <sms_ble_disconnected_fn+0x72>
        case AT_BLE_TERMINATED_BY_USER: // 0x13
        case AT_BLE_REMOTE_DEV_TERM_LOW_RESOURCES: //0x14
        case AT_BLE_REMOTE_DEV_POWER_OFF: //0x15
        case AT_BLE_CON_TERM_BY_LOCAL_HOST: //0x16
        default:
        sms_ble_power_down();
1000a206:	4b0e      	ldr	r3, [pc, #56]	; (1000a240 <sms_ble_disconnected_fn+0xa8>)
1000a208:	4798      	blx	r3
        break;
    }
    
    return AT_BLE_SUCCESS;
}
1000a20a:	2000      	movs	r0, #0
1000a20c:	b003      	add	sp, #12
1000a20e:	bd30      	pop	{r4, r5, pc}
1000a210:	1001a110 	.word	0x1001a110
1000a214:	1001a074 	.word	0x1001a074
1000a218:	1000b395 	.word	0x1000b395
1000a21c:	1000b421 	.word	0x1000b421
1000a220:	100165a4 	.word	0x100165a4
1000a224:	100153f9 	.word	0x100153f9
1000a228:	10019f64 	.word	0x10019f64
1000a22c:	1001a111 	.word	0x1001a111
1000a230:	1001a000 	.word	0x1001a000
1000a234:	10016ae8 	.word	0x10016ae8
1000a238:	100152d9 	.word	0x100152d9
1000a23c:	1000a10d 	.word	0x1000a10d
1000a240:	10009f4d 	.word	0x10009f4d

1000a244 <sms_ble_send_characteristic>:
    NULL, //ble_characteristic_write_cmd_cmp
    NULL //ble_read_authorize_request_handler
};

at_ble_status_t sms_ble_send_characteristic(enum sms_ble_char_type ch)
{
1000a244:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a246:	b087      	sub	sp, #28
    at_ble_status_t status = AT_BLE_SUCCESS;
    at_ble_handle_t val_handle = 0;
    uint8_t length = 0;
    uint8_t char_size = 0;
    uint8_t send_val[BLE_CHAR_SIZE_MAX];
    ble_current_state = BLE_STATE_INDICATING;
1000a248:	2223      	movs	r2, #35	; 0x23
1000a24a:	4b5f      	ldr	r3, [pc, #380]	; (1000a3c8 <sms_ble_send_characteristic+0x184>)
1000a24c:	701a      	strb	r2, [r3, #0]

    
    sms_ble_send_cnt++;
1000a24e:	4a5f      	ldr	r2, [pc, #380]	; (1000a3cc <sms_ble_send_characteristic+0x188>)
1000a250:	8813      	ldrh	r3, [r2, #0]
1000a252:	3301      	adds	r3, #1
1000a254:	8013      	strh	r3, [r2, #0]
    
    switch(ch) {
1000a256:	2801      	cmp	r0, #1
1000a258:	d015      	beq.n	1000a286 <sms_ble_send_characteristic+0x42>
1000a25a:	2800      	cmp	r0, #0
1000a25c:	d004      	beq.n	1000a268 <sms_ble_send_characteristic+0x24>
1000a25e:	2802      	cmp	r0, #2
1000a260:	d022      	beq.n	1000a2a8 <sms_ble_send_characteristic+0x64>
1000a262:	2803      	cmp	r0, #3
1000a264:	d036      	beq.n	1000a2d4 <sms_ble_send_characteristic+0x90>
1000a266:	e08e      	b.n	1000a386 <sms_ble_send_characteristic+0x142>
        case BLE_CHAR_BTN0:
        btn0_instance.char_value = ((btn0_instance.char_value >= 0x7f) ? 0 : (btn0_instance.char_value + 1));
1000a268:	4b59      	ldr	r3, [pc, #356]	; (1000a3d0 <sms_ble_send_characteristic+0x18c>)
1000a26a:	78da      	ldrb	r2, [r3, #3]
1000a26c:	2300      	movs	r3, #0
1000a26e:	2a7e      	cmp	r2, #126	; 0x7e
1000a270:	d801      	bhi.n	1000a276 <sms_ble_send_characteristic+0x32>
1000a272:	3201      	adds	r2, #1
1000a274:	b2d3      	uxtb	r3, r2
1000a276:	4a56      	ldr	r2, [pc, #344]	; (1000a3d0 <sms_ble_send_characteristic+0x18c>)
1000a278:	70d3      	strb	r3, [r2, #3]
        send_val[0] = btn0_instance.char_value;
1000a27a:	aa01      	add	r2, sp, #4
1000a27c:	7013      	strb	r3, [r2, #0]
        val_handle = button_instance.service_handler.serv_chars.char_val_handle;
1000a27e:	4b55      	ldr	r3, [pc, #340]	; (1000a3d4 <sms_ble_send_characteristic+0x190>)
1000a280:	8b1d      	ldrh	r5, [r3, #24]
        length = BLE_CHAR_SIZE_BUTTON;
1000a282:	2201      	movs	r2, #1
        break;
1000a284:	e081      	b.n	1000a38a <sms_ble_send_characteristic+0x146>
        
        case BLE_CHAR_BTN1:
        btn1_instance.char_value = ((btn1_instance.char_value >= 0xff) ? 0 : (btn1_instance.char_value + 1));
1000a286:	4b54      	ldr	r3, [pc, #336]	; (1000a3d8 <sms_ble_send_characteristic+0x194>)
1000a288:	78db      	ldrb	r3, [r3, #3]
1000a28a:	2bff      	cmp	r3, #255	; 0xff
1000a28c:	d002      	beq.n	1000a294 <sms_ble_send_characteristic+0x50>
1000a28e:	3301      	adds	r3, #1
1000a290:	b2db      	uxtb	r3, r3
1000a292:	e000      	b.n	1000a296 <sms_ble_send_characteristic+0x52>
1000a294:	2300      	movs	r3, #0
1000a296:	4a50      	ldr	r2, [pc, #320]	; (1000a3d8 <sms_ble_send_characteristic+0x194>)
1000a298:	70d3      	strb	r3, [r2, #3]
        send_val[0] = btn1_instance.char_value + 0x80;
1000a29a:	3b80      	subs	r3, #128	; 0x80
1000a29c:	aa01      	add	r2, sp, #4
1000a29e:	7013      	strb	r3, [r2, #0]
        val_handle = button_instance.service_handler.serv_chars.char_val_handle;
1000a2a0:	4b4c      	ldr	r3, [pc, #304]	; (1000a3d4 <sms_ble_send_characteristic+0x190>)
1000a2a2:	8b1d      	ldrh	r5, [r3, #24]
        length = BLE_CHAR_SIZE_BUTTON;
1000a2a4:	2201      	movs	r2, #1
        break;
1000a2a6:	e070      	b.n	1000a38a <sms_ble_send_characteristic+0x146>
        
        case BLE_CHAR_PRESS:
        send_val[0] = (uint8_t)((pressure_device.hal.temperature >>24) & 0xff);
1000a2a8:	494c      	ldr	r1, [pc, #304]	; (1000a3dc <sms_ble_send_characteristic+0x198>)
1000a2aa:	6a0a      	ldr	r2, [r1, #32]
1000a2ac:	ab01      	add	r3, sp, #4
1000a2ae:	1610      	asrs	r0, r2, #24
1000a2b0:	7018      	strb	r0, [r3, #0]
        send_val[1] = (uint8_t)((pressure_device.hal.temperature >> 16) & 0xff);
1000a2b2:	1410      	asrs	r0, r2, #16
1000a2b4:	7058      	strb	r0, [r3, #1]
        send_val[2] = (uint8_t)((pressure_device.hal.temperature >> 8) & 0xff);
1000a2b6:	1210      	asrs	r0, r2, #8
1000a2b8:	7098      	strb	r0, [r3, #2]
        send_val[3] = (uint8_t)((pressure_device.hal.temperature) & 0xff);
1000a2ba:	70da      	strb	r2, [r3, #3]
        send_val[4] = (uint8_t)((pressure_device.hal.pressure >> 24) & 0xff);
1000a2bc:	69ca      	ldr	r2, [r1, #28]
1000a2be:	1610      	asrs	r0, r2, #24
1000a2c0:	7118      	strb	r0, [r3, #4]
        send_val[5] = (uint8_t)((pressure_device.hal.pressure >> 16) & 0xff);
1000a2c2:	1410      	asrs	r0, r2, #16
1000a2c4:	7158      	strb	r0, [r3, #5]
        send_val[6] = (uint8_t)((pressure_device.hal.pressure >> 8) & 0xff);
1000a2c6:	1210      	asrs	r0, r2, #8
1000a2c8:	7198      	strb	r0, [r3, #6]
        send_val[7] = (uint8_t)((pressure_device.hal.pressure) & 0xff);
1000a2ca:	71da      	strb	r2, [r3, #7]
        val_handle = pressure_device.service_handler.serv_chars.char_val_handle;
1000a2cc:	2340      	movs	r3, #64	; 0x40
1000a2ce:	5acd      	ldrh	r5, [r1, r3]
        length = BLE_CHAR_SIZE_PRESSURE;
1000a2d0:	2208      	movs	r2, #8
        break;
1000a2d2:	e05a      	b.n	1000a38a <sms_ble_send_characteristic+0x146>
        
        case BLE_CHAR_MPU:
        send_val[0] = (uint8_t)(mpu_device.hal.accel[0] & 0xff);
1000a2d4:	4a42      	ldr	r2, [pc, #264]	; (1000a3e0 <sms_ble_send_characteristic+0x19c>)
1000a2d6:	2312      	movs	r3, #18
1000a2d8:	5ed1      	ldrsh	r1, [r2, r3]
1000a2da:	ab01      	add	r3, sp, #4
1000a2dc:	7019      	strb	r1, [r3, #0]
        send_val[1] = (uint8_t)((mpu_device.hal.accel[0] >> 8) & 0xff);
1000a2de:	1209      	asrs	r1, r1, #8
1000a2e0:	7059      	strb	r1, [r3, #1]
        send_val[2] = (uint8_t)(mpu_device.hal.accel[1] & 0xff);
1000a2e2:	2014      	movs	r0, #20
1000a2e4:	5e11      	ldrsh	r1, [r2, r0]
1000a2e6:	7099      	strb	r1, [r3, #2]
        send_val[3] = (uint8_t)((mpu_device.hal.accel[1] >> 8) & 0xff);
1000a2e8:	1209      	asrs	r1, r1, #8
1000a2ea:	70d9      	strb	r1, [r3, #3]
        send_val[4] = (uint8_t)(mpu_device.hal.accel[2] & 0xff);
1000a2ec:	2016      	movs	r0, #22
1000a2ee:	5e11      	ldrsh	r1, [r2, r0]
1000a2f0:	7119      	strb	r1, [r3, #4]
        send_val[5] = (uint8_t)((mpu_device.hal.accel[2] >> 8) & 0xff);
1000a2f2:	1209      	asrs	r1, r1, #8
1000a2f4:	7159      	strb	r1, [r3, #5]
        send_val[6] = (uint8_t)(mpu_device.hal.gyro[0] & 0xff);
1000a2f6:	200c      	movs	r0, #12
1000a2f8:	5e11      	ldrsh	r1, [r2, r0]
1000a2fa:	7199      	strb	r1, [r3, #6]
        send_val[7] = (uint8_t)((mpu_device.hal.gyro[0] >> 8) & 0xff);
1000a2fc:	1209      	asrs	r1, r1, #8
1000a2fe:	71d9      	strb	r1, [r3, #7]
        send_val[8] = (uint8_t)(mpu_device.hal.gyro[1] & 0xff);
1000a300:	200e      	movs	r0, #14
1000a302:	5e11      	ldrsh	r1, [r2, r0]
1000a304:	7219      	strb	r1, [r3, #8]
        send_val[9] = (uint8_t)((mpu_device.hal.gyro[1] >> 8) & 0xff);
1000a306:	1209      	asrs	r1, r1, #8
1000a308:	7259      	strb	r1, [r3, #9]
        send_val[10] = (uint8_t)(mpu_device.hal.gyro[2] & 0xff);
1000a30a:	2010      	movs	r0, #16
1000a30c:	5e11      	ldrsh	r1, [r2, r0]
1000a30e:	7299      	strb	r1, [r3, #10]
        send_val[11] = (uint8_t)((mpu_device.hal.gyro[2] >> 8) & 0xff);
1000a310:	1209      	asrs	r1, r1, #8
1000a312:	72d9      	strb	r1, [r3, #11]
        val_handle = mpu_device.service_handler.serv_chars.char_val_handle;
1000a314:	2348      	movs	r3, #72	; 0x48
1000a316:	5ad5      	ldrh	r5, [r2, r3]
        length = BLE_CHAR_SIZE_MPU_G_A;
        
        if(mpu_device.new_compass) {
1000a318:	3b1a      	subs	r3, #26
1000a31a:	5cd3      	ldrb	r3, [r2, r3]
1000a31c:	2b00      	cmp	r3, #0
1000a31e:	d014      	beq.n	1000a34a <sms_ble_send_characteristic+0x106>
            send_val[12] = (uint8_t)(mpu_device.hal.compass[0] & 0xff);
1000a320:	2318      	movs	r3, #24
1000a322:	5ed1      	ldrsh	r1, [r2, r3]
1000a324:	ab01      	add	r3, sp, #4
1000a326:	7319      	strb	r1, [r3, #12]
            send_val[13] = (uint8_t)((mpu_device.hal.compass[0] >> 8) & 0xff);
1000a328:	1209      	asrs	r1, r1, #8
1000a32a:	7359      	strb	r1, [r3, #13]
            send_val[14] = (uint8_t)(mpu_device.hal.compass[1] & 0xff);
1000a32c:	201a      	movs	r0, #26
1000a32e:	5e11      	ldrsh	r1, [r2, r0]
1000a330:	7399      	strb	r1, [r3, #14]
            send_val[15] = (uint8_t)((mpu_device.hal.compass[1] >> 8) & 0xff);
1000a332:	1209      	asrs	r1, r1, #8
1000a334:	73d9      	strb	r1, [r3, #15]
            send_val[16] = (uint8_t)(mpu_device.hal.compass[2] & 0xff);
1000a336:	201c      	movs	r0, #28
1000a338:	5e11      	ldrsh	r1, [r2, r0]
1000a33a:	7419      	strb	r1, [r3, #16]
            send_val[17] = (uint8_t)((mpu_device.hal.compass[2] >> 8) & 0xff);
1000a33c:	1209      	asrs	r1, r1, #8
1000a33e:	7459      	strb	r1, [r3, #17]
            length = BLE_CHAR_SIZE_MPU_G_A_C;
            mpu_device.new_compass = false;
1000a340:	2100      	movs	r1, #0
1000a342:	232e      	movs	r3, #46	; 0x2e
1000a344:	54d1      	strb	r1, [r2, r3]
            send_val[13] = (uint8_t)((mpu_device.hal.compass[0] >> 8) & 0xff);
            send_val[14] = (uint8_t)(mpu_device.hal.compass[1] & 0xff);
            send_val[15] = (uint8_t)((mpu_device.hal.compass[1] >> 8) & 0xff);
            send_val[16] = (uint8_t)(mpu_device.hal.compass[2] & 0xff);
            send_val[17] = (uint8_t)((mpu_device.hal.compass[2] >> 8) & 0xff);
            length = BLE_CHAR_SIZE_MPU_G_A_C;
1000a346:	2212      	movs	r2, #18
1000a348:	e008      	b.n	1000a35c <sms_ble_send_characteristic+0x118>
            mpu_device.new_compass = false;
        }
        else {
            for(uint8_t i = 0; i < 6; i++) {
                send_val[12+i] = 0;
1000a34a:	ab01      	add	r3, sp, #4
1000a34c:	2200      	movs	r2, #0
1000a34e:	731a      	strb	r2, [r3, #12]
1000a350:	735a      	strb	r2, [r3, #13]
1000a352:	739a      	strb	r2, [r3, #14]
1000a354:	73da      	strb	r2, [r3, #15]
1000a356:	741a      	strb	r2, [r3, #16]
1000a358:	745a      	strb	r2, [r3, #17]
        send_val[8] = (uint8_t)(mpu_device.hal.gyro[1] & 0xff);
        send_val[9] = (uint8_t)((mpu_device.hal.gyro[1] >> 8) & 0xff);
        send_val[10] = (uint8_t)(mpu_device.hal.gyro[2] & 0xff);
        send_val[11] = (uint8_t)((mpu_device.hal.gyro[2] >> 8) & 0xff);
        val_handle = mpu_device.service_handler.serv_chars.char_val_handle;
        length = BLE_CHAR_SIZE_MPU_G_A;
1000a35a:	320c      	adds	r2, #12
            for(uint8_t i = 0; i < 6; i++) {
                send_val[12+i] = 0;
            }
        }
        
        if(mpu_device.new_temp) {
1000a35c:	232f      	movs	r3, #47	; 0x2f
1000a35e:	4920      	ldr	r1, [pc, #128]	; (1000a3e0 <sms_ble_send_characteristic+0x19c>)
1000a360:	5ccb      	ldrb	r3, [r1, r3]
1000a362:	2b00      	cmp	r3, #0
1000a364:	d00a      	beq.n	1000a37c <sms_ble_send_characteristic+0x138>
            send_val[18] = (uint8_t)(mpu_device.hal.temperature & 0xff);
1000a366:	000a      	movs	r2, r1
1000a368:	6a0b      	ldr	r3, [r1, #32]
1000a36a:	a901      	add	r1, sp, #4
1000a36c:	748b      	strb	r3, [r1, #18]
            send_val[19] = (uint8_t)((mpu_device.hal.temperature >> 8) & 0xff);
1000a36e:	121b      	asrs	r3, r3, #8
1000a370:	74cb      	strb	r3, [r1, #19]
            length = BLE_CHAR_SIZE_MPU_G_A_C_T;
            mpu_device.new_temp = false;
1000a372:	2100      	movs	r1, #0
1000a374:	232f      	movs	r3, #47	; 0x2f
1000a376:	54d1      	strb	r1, [r2, r3]
        }
        
        if(mpu_device.new_temp) {
            send_val[18] = (uint8_t)(mpu_device.hal.temperature & 0xff);
            send_val[19] = (uint8_t)((mpu_device.hal.temperature >> 8) & 0xff);
            length = BLE_CHAR_SIZE_MPU_G_A_C_T;
1000a378:	2214      	movs	r2, #20
1000a37a:	e006      	b.n	1000a38a <sms_ble_send_characteristic+0x146>
            mpu_device.new_temp = false;
        }
        else {
            for(uint8_t i = 0; i < 2; i++) {
                send_val[18+i] = 0;
1000a37c:	ab01      	add	r3, sp, #4
1000a37e:	2100      	movs	r1, #0
1000a380:	7499      	strb	r1, [r3, #18]
1000a382:	74d9      	strb	r1, [r3, #19]
1000a384:	e001      	b.n	1000a38a <sms_ble_send_characteristic+0x146>

at_ble_status_t sms_ble_send_characteristic(enum sms_ble_char_type ch)
{
    at_ble_status_t status = AT_BLE_SUCCESS;
    at_ble_handle_t val_handle = 0;
    uint8_t length = 0;
1000a386:	2200      	movs	r2, #0
};

at_ble_status_t sms_ble_send_characteristic(enum sms_ble_char_type ch)
{
    at_ble_status_t status = AT_BLE_SUCCESS;
    at_ble_handle_t val_handle = 0;
1000a388:	2500      	movs	r5, #0
    
    //DBG_LOG_DEV("Sending: ");
    //for(int i = 0; i < 20; i += 2) {
        //DBG_LOG_CONT_DEV("0x%02x%02x ", send_val[i], send_val[i+1]);
    //}
    status = at_ble_characteristic_value_set(val_handle, send_val, (length * sizeof(uint8_t)));
1000a38a:	b292      	uxth	r2, r2
1000a38c:	a901      	add	r1, sp, #4
1000a38e:	0028      	movs	r0, r5
1000a390:	4b14      	ldr	r3, [pc, #80]	; (1000a3e4 <sms_ble_send_characteristic+0x1a0>)
1000a392:	4798      	blx	r3
1000a394:	1e04      	subs	r4, r0, #0
    if(status == AT_BLE_SUCCESS) {
1000a396:	d114      	bne.n	1000a3c2 <sms_ble_send_characteristic+0x17e>
        //DBG_LOG_CONT_DEV("%02x", sms_button_service_handler.serv_uuid.uuid[(i)]);
        //}
        //DBG_LOG_DEV("- char value handle: 0x%04x\r\n- char value: 0x%02x", sms_button_service_handler.serv_chars.char_val_handle, send_val);
        
        //DBG_LOG_DEV("cnt: %d", sms_ble_send_cnt);
        gpio_pin_set_output_level(DBG_PIN_1, DBG_PIN_HIGH);
1000a398:	2101      	movs	r1, #1
1000a39a:	2002      	movs	r0, #2
1000a39c:	4e12      	ldr	r6, [pc, #72]	; (1000a3e8 <sms_ble_send_characteristic+0x1a4>)
1000a39e:	47b0      	blx	r6
#   if SMS_SENDING_WITH_ACK == true
        sms_ble_ind_retry = 0;
        status = at_ble_indication_send(sms_connection_handle, val_handle);
#   else
		DBG_LOG_DEV("sending...");
1000a3a0:	4812      	ldr	r0, [pc, #72]	; (1000a3ec <sms_ble_send_characteristic+0x1a8>)
1000a3a2:	4b13      	ldr	r3, [pc, #76]	; (1000a3f0 <sms_ble_send_characteristic+0x1ac>)
1000a3a4:	4798      	blx	r3
1000a3a6:	4813      	ldr	r0, [pc, #76]	; (1000a3f4 <sms_ble_send_characteristic+0x1b0>)
1000a3a8:	4f13      	ldr	r7, [pc, #76]	; (1000a3f8 <sms_ble_send_characteristic+0x1b4>)
1000a3aa:	47b8      	blx	r7
        status = at_ble_notification_send(sms_connection_handle, val_handle);
1000a3ac:	4b13      	ldr	r3, [pc, #76]	; (1000a3fc <sms_ble_send_characteristic+0x1b8>)
1000a3ae:	8818      	ldrh	r0, [r3, #0]
1000a3b0:	0029      	movs	r1, r5
1000a3b2:	4b13      	ldr	r3, [pc, #76]	; (1000a400 <sms_ble_send_characteristic+0x1bc>)
1000a3b4:	4798      	blx	r3
1000a3b6:	0004      	movs	r4, r0
		DBG_LOG_CONT_DEV("sent!");
1000a3b8:	4812      	ldr	r0, [pc, #72]	; (1000a404 <sms_ble_send_characteristic+0x1c0>)
1000a3ba:	47b8      	blx	r7
#   endif
        gpio_pin_set_output_level(DBG_PIN_1, DBG_PIN_LOW);
1000a3bc:	2100      	movs	r1, #0
1000a3be:	2002      	movs	r0, #2
1000a3c0:	47b0      	blx	r6
        else {
            //#pragma TBD: handle sending error...
        }
    }
    return status;
}
1000a3c2:	0020      	movs	r0, r4
1000a3c4:	b007      	add	sp, #28
1000a3c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a3c8:	1001a110 	.word	0x1001a110
1000a3cc:	1001a130 	.word	0x1001a130
1000a3d0:	10019f60 	.word	0x10019f60
1000a3d4:	1001a000 	.word	0x1001a000
1000a3d8:	10019ffc 	.word	0x10019ffc
1000a3dc:	1001a074 	.word	0x1001a074
1000a3e0:	10019f68 	.word	0x10019f68
1000a3e4:	1001113d 	.word	0x1001113d
1000a3e8:	1000c365 	.word	0x1000c365
1000a3ec:	100165a4 	.word	0x100165a4
1000a3f0:	100153f9 	.word	0x100153f9
1000a3f4:	10016b3c 	.word	0x10016b3c
1000a3f8:	100152d9 	.word	0x100152d9
1000a3fc:	10019ffa 	.word	0x10019ffa
1000a400:	100112dd 	.word	0x100112dd
1000a404:	10016b48 	.word	0x10016b48

1000a408 <sms_ble_primary_service_define>:


at_ble_status_t sms_ble_primary_service_define(gatt_service_handler_t *service)
{
1000a408:	b510      	push	{r4, lr}
1000a40a:	b082      	sub	sp, #8
    //DBG_LOG_DEV("[sms_ble_primary_service_define]\n\r  defining primary service\r\n- uuid: 0x%02x\r\n- handle: 0x%02x\r\n- char uuid: 0x%02x%02x\r\n- char init value: %d", (unsigned int)service->serv_uuid.uuid, service->serv_handle, service->serv_chars.uuid.uuid[1], service->serv_chars.uuid.uuid[0], service->serv_chars.value_init_len);
    return(at_ble_primary_service_define(&service->serv_uuid, &service->serv_handle, NULL, 0, &service->serv_chars, 1));
1000a40c:	0001      	movs	r1, r0
1000a40e:	3112      	adds	r1, #18
1000a410:	2301      	movs	r3, #1
1000a412:	9301      	str	r3, [sp, #4]
1000a414:	0003      	movs	r3, r0
1000a416:	3314      	adds	r3, #20
1000a418:	9300      	str	r3, [sp, #0]
1000a41a:	2300      	movs	r3, #0
1000a41c:	2200      	movs	r2, #0
1000a41e:	4c02      	ldr	r4, [pc, #8]	; (1000a428 <sms_ble_primary_service_define+0x20>)
1000a420:	47a0      	blx	r4
}
1000a422:	b002      	add	sp, #8
1000a424:	bd10      	pop	{r4, pc}
1000a426:	46c0      	nop			; (mov r8, r8)
1000a428:	1001111d 	.word	0x1001111d

1000a42c <sms_ble_service_init>:


void sms_ble_service_init(enum sms_ble_serv_type type, gatt_service_handler_t *service, uint8_t *value)
{
1000a42c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a42e:	464f      	mov	r7, r9
1000a430:	4646      	mov	r6, r8
1000a432:	b4c0      	push	{r6, r7}
1000a434:	b083      	sub	sp, #12
1000a436:	4694      	mov	ip, r2
    at_ble_handle_t handle = 0;
    uint8_t uuid[16] = {0};
    uint8_t char_size = 0;
    switch(type) {
1000a438:	2801      	cmp	r0, #1
1000a43a:	d010      	beq.n	1000a45e <sms_ble_service_init+0x32>
1000a43c:	2800      	cmp	r0, #0
1000a43e:	d002      	beq.n	1000a446 <sms_ble_service_init+0x1a>
1000a440:	2802      	cmp	r0, #2
1000a442:	d019      	beq.n	1000a478 <sms_ble_service_init+0x4c>
1000a444:	e025      	b.n	1000a492 <sms_ble_service_init+0x66>
        uuid[1] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1) & 0xFF);
        uuid[4] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 24) & 0xFF);
        uuid[5] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 16) & 0xFF);
        uuid[6] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 8) & 0xFF);
1000a446:	23bb      	movs	r3, #187	; 0xbb
        uuid[0] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1) & 0xFF);
        uuid[4] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 24) & 0xFF);
        uuid[5] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 16) & 0xFF);
1000a448:	2450      	movs	r4, #80	; 0x50
        handle = 1;
        uuid[0] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1) & 0xFF);
        uuid[4] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 24) & 0xFF);
1000a44a:	2553      	movs	r5, #83	; 0x53
        case BLE_SERV_BUTTON:
        handle = 1;
        uuid[0] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1) & 0xFF);
1000a44c:	26be      	movs	r6, #190	; 0xbe
    switch(type) {
        case BLE_SERV_BUTTON:
        handle = 1;
        uuid[0] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 8) & 0xFF);
1000a44e:	275a      	movs	r7, #90	; 0x5a
    uint8_t char_size = 0;
    switch(type) {
        case BLE_SERV_BUTTON:
        handle = 1;
        uuid[0] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 16) & 0xFF);
1000a450:	2057      	movs	r0, #87	; 0x57
    uint8_t uuid[16] = {0};
    uint8_t char_size = 0;
    switch(type) {
        case BLE_SERV_BUTTON:
        handle = 1;
        uuid[0] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 24) & 0xFF);
1000a452:	221c      	movs	r2, #28
1000a454:	4690      	mov	r8, r2
        uuid[11] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_3) & 0xFF);
        uuid[12] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_4 >> 24) & 0xFF);
        uuid[13] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_4 >> 16) & 0xFF);
        uuid[14] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_4 >> 8) & 0xFF);
        uuid[15] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_4) & 0xFF);
        char_size = 1;
1000a456:	3a1b      	subs	r2, #27
1000a458:	9201      	str	r2, [sp, #4]
    at_ble_handle_t handle = 0;
    uint8_t uuid[16] = {0};
    uint8_t char_size = 0;
    switch(type) {
        case BLE_SERV_BUTTON:
        handle = 1;
1000a45a:	4691      	mov	r9, r2
1000a45c:	e023      	b.n	1000a4a6 <sms_ble_service_init+0x7a>
        uuid[1] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1) & 0xFF);
        uuid[4] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 24) & 0xFF);
        uuid[5] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 16) & 0xFF);
        uuid[6] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 8) & 0xFF);
1000a45e:	23ee      	movs	r3, #238	; 0xee
        uuid[0] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1) & 0xFF);
        uuid[4] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 24) & 0xFF);
        uuid[5] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 16) & 0xFF);
1000a460:	2450      	movs	r4, #80	; 0x50
        handle = 2;
        uuid[0] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1) & 0xFF);
        uuid[4] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 24) & 0xFF);
1000a462:	2553      	movs	r5, #83	; 0x53
        case BLE_SERV_PRESSURE:
        handle = 2;
        uuid[0] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1) & 0xFF);
1000a464:	26be      	movs	r6, #190	; 0xbe
        
        case BLE_SERV_PRESSURE:
        handle = 2;
        uuid[0] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 8) & 0xFF);
1000a466:	275a      	movs	r7, #90	; 0x5a
        break;
        
        case BLE_SERV_PRESSURE:
        handle = 2;
        uuid[0] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 16) & 0xFF);
1000a468:	2057      	movs	r0, #87	; 0x57
        char_size = 1;
        break;
        
        case BLE_SERV_PRESSURE:
        handle = 2;
        uuid[0] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 24) & 0xFF);
1000a46a:	221c      	movs	r2, #28
1000a46c:	4690      	mov	r8, r2
        uuid[11] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_3) & 0xFF);
        uuid[12] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 24) & 0xFF);
        uuid[13] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 16) & 0xFF);
        uuid[14] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 8) & 0xFF);
        uuid[15] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4) & 0xFF);
        char_size = 8;
1000a46e:	3a14      	subs	r2, #20
1000a470:	9201      	str	r2, [sp, #4]
        uuid[15] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_4) & 0xFF);
        char_size = 1;
        break;
        
        case BLE_SERV_PRESSURE:
        handle = 2;
1000a472:	3a06      	subs	r2, #6
1000a474:	4691      	mov	r9, r2
        uuid[12] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 24) & 0xFF);
        uuid[13] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 16) & 0xFF);
        uuid[14] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 8) & 0xFF);
        uuid[15] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4) & 0xFF);
        char_size = 8;
        break;
1000a476:	e016      	b.n	1000a4a6 <sms_ble_service_init+0x7a>
        uuid[1] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1) & 0xFF);
        uuid[4] = (uint8_t) ((SMS_MPU_SERVICE_UUID_2 >> 24) & 0xFF);
        uuid[5] = (uint8_t) ((SMS_MPU_SERVICE_UUID_2 >> 16) & 0xFF);
        uuid[6] = (uint8_t) ((SMS_MPU_SERVICE_UUID_2 >> 8) & 0xFF);
1000a478:	2311      	movs	r3, #17
        uuid[0] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1) & 0xFF);
        uuid[4] = (uint8_t) ((SMS_MPU_SERVICE_UUID_2 >> 24) & 0xFF);
        uuid[5] = (uint8_t) ((SMS_MPU_SERVICE_UUID_2 >> 16) & 0xFF);
1000a47a:	2450      	movs	r4, #80	; 0x50
        handle = 3;
        uuid[0] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1) & 0xFF);
        uuid[4] = (uint8_t) ((SMS_MPU_SERVICE_UUID_2 >> 24) & 0xFF);
1000a47c:	2553      	movs	r5, #83	; 0x53
        case BLE_SERV_MPU:
        handle = 3;
        uuid[0] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1) & 0xFF);
1000a47e:	26be      	movs	r6, #190	; 0xbe
        
        case BLE_SERV_MPU:
        handle = 3;
        uuid[0] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 8) & 0xFF);
1000a480:	275a      	movs	r7, #90	; 0x5a
        break;
        
        case BLE_SERV_MPU:
        handle = 3;
        uuid[0] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 16) & 0xFF);
1000a482:	2057      	movs	r0, #87	; 0x57
        char_size = 8;
        break;
        
        case BLE_SERV_MPU:
        handle = 3;
        uuid[0] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 24) & 0xFF);
1000a484:	221c      	movs	r2, #28
1000a486:	4690      	mov	r8, r2
        uuid[11] = (uint8_t) ((SMS_MPU_SERVICE_UUID_3) & 0xFF);
        uuid[12] = (uint8_t) ((SMS_MPU_SERVICE_UUID_4 >> 24) & 0xFF);
        uuid[13] = (uint8_t) ((SMS_MPU_SERVICE_UUID_4 >> 16) & 0xFF);
        uuid[14] = (uint8_t) ((SMS_MPU_SERVICE_UUID_4 >> 8) & 0xFF);
        uuid[15] = (uint8_t) ((SMS_MPU_SERVICE_UUID_4) & 0xFF);
        char_size = 20;
1000a488:	3a08      	subs	r2, #8
1000a48a:	9201      	str	r2, [sp, #4]
        uuid[15] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4) & 0xFF);
        char_size = 8;
        break;
        
        case BLE_SERV_MPU:
        handle = 3;
1000a48c:	3a11      	subs	r2, #17
1000a48e:	4691      	mov	r9, r2
        uuid[12] = (uint8_t) ((SMS_MPU_SERVICE_UUID_4 >> 24) & 0xFF);
        uuid[13] = (uint8_t) ((SMS_MPU_SERVICE_UUID_4 >> 16) & 0xFF);
        uuid[14] = (uint8_t) ((SMS_MPU_SERVICE_UUID_4 >> 8) & 0xFF);
        uuid[15] = (uint8_t) ((SMS_MPU_SERVICE_UUID_4) & 0xFF);
        char_size = 20;
        break;
1000a490:	e009      	b.n	1000a4a6 <sms_ble_service_init+0x7a>


void sms_ble_service_init(enum sms_ble_serv_type type, gatt_service_handler_t *service, uint8_t *value)
{
    at_ble_handle_t handle = 0;
    uint8_t uuid[16] = {0};
1000a492:	2300      	movs	r3, #0
1000a494:	2400      	movs	r4, #0
1000a496:	2500      	movs	r5, #0
1000a498:	2600      	movs	r6, #0
1000a49a:	2700      	movs	r7, #0
1000a49c:	2000      	movs	r0, #0
1000a49e:	2200      	movs	r2, #0
1000a4a0:	4690      	mov	r8, r2
    uint8_t char_size = 0;
1000a4a2:	9201      	str	r2, [sp, #4]
}


void sms_ble_service_init(enum sms_ble_serv_type type, gatt_service_handler_t *service, uint8_t *value)
{
    at_ble_handle_t handle = 0;
1000a4a4:	4691      	mov	r9, r2
        
        default:
        break;
    }
    //SMS button service characteristic
    service->serv_handle = handle;
1000a4a6:	464a      	mov	r2, r9
1000a4a8:	824a      	strh	r2, [r1, #18]
    service->serv_uuid.type = AT_BLE_UUID_128;
1000a4aa:	2202      	movs	r2, #2
1000a4ac:	700a      	strb	r2, [r1, #0]
    service->serv_uuid.uuid[0] = uuid[0];
1000a4ae:	4642      	mov	r2, r8
1000a4b0:	704a      	strb	r2, [r1, #1]
    service->serv_uuid.uuid[1] = uuid[1];
1000a4b2:	7088      	strb	r0, [r1, #2]
    service->serv_uuid.uuid[2] = uuid[2];
1000a4b4:	70cf      	strb	r7, [r1, #3]
    service->serv_uuid.uuid[3] = uuid[3];
1000a4b6:	710e      	strb	r6, [r1, #4]
    service->serv_uuid.uuid[4] = uuid[4];
1000a4b8:	714d      	strb	r5, [r1, #5]
    service->serv_uuid.uuid[5] = uuid[5];
1000a4ba:	718c      	strb	r4, [r1, #6]
    service->serv_uuid.uuid[6] = uuid[6];
1000a4bc:	71cb      	strb	r3, [r1, #7]
    service->serv_uuid.uuid[7] = uuid[7];
1000a4be:	720b      	strb	r3, [r1, #8]
    service->serv_uuid.uuid[8] = uuid[8];
1000a4c0:	2300      	movs	r3, #0
1000a4c2:	724b      	strb	r3, [r1, #9]
    service->serv_uuid.uuid[9] = uuid[9];
1000a4c4:	728b      	strb	r3, [r1, #10]
    service->serv_uuid.uuid[10] = uuid[10];
1000a4c6:	72cb      	strb	r3, [r1, #11]
    service->serv_uuid.uuid[11] = uuid[11];
1000a4c8:	730b      	strb	r3, [r1, #12]
    service->serv_uuid.uuid[12] = uuid[12];
1000a4ca:	734b      	strb	r3, [r1, #13]
    service->serv_uuid.uuid[13] = uuid[13];
1000a4cc:	738b      	strb	r3, [r1, #14]
    service->serv_uuid.uuid[14] = uuid[14];
1000a4ce:	73cb      	strb	r3, [r1, #15]
    service->serv_uuid.uuid[15] = uuid[15];
1000a4d0:	740b      	strb	r3, [r1, #16]
    
    #   if SMS_SENDING_WITH_ACK == true
    service->serv_chars.properties = (AT_BLE_CHAR_READ | AT_BLE_CHAR_INDICATE); // properties
    #   else
    service->serv_chars.properties = (AT_BLE_CHAR_READ | AT_BLE_CHAR_NOTIFY); // properties
1000a4d2:	2412      	movs	r4, #18
1000a4d4:	850c      	strh	r4, [r1, #40]	; 0x28
    #   endif
    service->serv_chars.init_value = value; // value
1000a4d6:	4662      	mov	r2, ip
1000a4d8:	62ca      	str	r2, [r1, #44]	; 0x2c
    service->serv_chars.value_init_len = char_size * sizeof(uint8_t);
1000a4da:	466a      	mov	r2, sp
1000a4dc:	8892      	ldrh	r2, [r2, #4]
1000a4de:	860a      	strh	r2, [r1, #48]	; 0x30
    service->serv_chars.value_max_len = char_size * sizeof(uint8_t);
1000a4e0:	864a      	strh	r2, [r1, #50]	; 0x32
    service->serv_chars.value_permissions = (AT_BLE_ATTR_READABLE_NO_AUTHN_NO_AUTHR | AT_BLE_ATTR_WRITABLE_NO_AUTHN_NO_AUTHR); // permissions
1000a4e2:	2011      	movs	r0, #17
1000a4e4:	2234      	movs	r2, #52	; 0x34
1000a4e6:	5488      	strb	r0, [r1, r2]
    service->serv_chars.user_desc = NULL; //user defined name
1000a4e8:	638b      	str	r3, [r1, #56]	; 0x38
    service->serv_chars.user_desc_len = 0;
1000a4ea:	2200      	movs	r2, #0
1000a4ec:	878b      	strh	r3, [r1, #60]	; 0x3c
    service->serv_chars.user_desc_max_len = 0;
1000a4ee:	87cb      	strh	r3, [r1, #62]	; 0x3e
    service->serv_chars.user_desc_permissions = AT_BLE_ATTR_NO_PERMISSIONS; // user description permissions
1000a4f0:	3033      	adds	r0, #51	; 0x33
1000a4f2:	540a      	strb	r2, [r1, r0]
    service->serv_chars.client_config_permissions = AT_BLE_ATTR_NO_PERMISSIONS; // client config permissions
1000a4f4:	3001      	adds	r0, #1
1000a4f6:	540a      	strb	r2, [r1, r0]
    service->serv_chars.server_config_permissions = AT_BLE_ATTR_NO_PERMISSIONS; // server config permissions
1000a4f8:	3001      	adds	r0, #1
1000a4fa:	540a      	strb	r2, [r1, r0]
    service->serv_chars.user_desc_handle = 0; // user description handles
1000a4fc:	2248      	movs	r2, #72	; 0x48
1000a4fe:	528b      	strh	r3, [r1, r2]
    service->serv_chars.client_config_handle = 0; // client config handles
1000a500:	3202      	adds	r2, #2
1000a502:	528b      	strh	r3, [r1, r2]
    service->serv_chars.server_config_handle = 0; // server config handles
1000a504:	3202      	adds	r2, #2
1000a506:	528b      	strh	r3, [r1, r2]
    
    service->serv_chars.presentation_format = NULL; //presentation format
1000a508:	640b      	str	r3, [r1, #64]	; 0x40
1000a50a:	b003      	add	sp, #12
1000a50c:	bc0c      	pop	{r2, r3}
1000a50e:	4690      	mov	r8, r2
1000a510:	4699      	mov	r9, r3
1000a512:	bdf0      	pop	{r4, r5, r6, r7, pc}

1000a514 <sms_button_bt0_callback>:
        gpio_disable_callback(btn1_instance.gpio_pin);
    }
}
/* Callbacks --> sending interrupt message to platform */
void sms_button_bt0_callback(void)
{
1000a514:	b510      	push	{r4, lr}
    //gpio_disable_callback(SMS_BTN_0_PIN);
    sms_current_interrupt.int_on = true;
1000a516:	4b06      	ldr	r3, [pc, #24]	; (1000a530 <sms_button_bt0_callback+0x1c>)
1000a518:	2201      	movs	r2, #1
1000a51a:	705a      	strb	r2, [r3, #1]
    sms_current_interrupt.source = INT_BTN0;
1000a51c:	701a      	strb	r2, [r3, #0]
    send_plf_int_msg_ind(btn0_instance.gpio_pin, GPIO_CALLBACK_RISING, NULL, 0);
1000a51e:	4b05      	ldr	r3, [pc, #20]	; (1000a534 <sms_button_bt0_callback+0x20>)
1000a520:	7858      	ldrb	r0, [r3, #1]
1000a522:	2300      	movs	r3, #0
1000a524:	2200      	movs	r2, #0
1000a526:	2102      	movs	r1, #2
1000a528:	4c03      	ldr	r4, [pc, #12]	; (1000a538 <sms_button_bt0_callback+0x24>)
1000a52a:	47a0      	blx	r4
}
1000a52c:	bd10      	pop	{r4, pc}
1000a52e:	46c0      	nop			; (mov r8, r8)
1000a530:	1001a0f8 	.word	0x1001a0f8
1000a534:	10019f60 	.word	0x10019f60
1000a538:	1000f3c1 	.word	0x1000f3c1

1000a53c <sms_button_bt1_callback>:
void sms_button_bt1_callback(void)
{
1000a53c:	b510      	push	{r4, lr}
    //gpio_disable_callback(SMS_BTN_1_PIN);
    sms_current_interrupt.int_on = true;
1000a53e:	4b06      	ldr	r3, [pc, #24]	; (1000a558 <sms_button_bt1_callback+0x1c>)
1000a540:	2201      	movs	r2, #1
1000a542:	705a      	strb	r2, [r3, #1]
    sms_current_interrupt.source = INT_BTN1;
1000a544:	3201      	adds	r2, #1
1000a546:	701a      	strb	r2, [r3, #0]
    send_plf_int_msg_ind(btn1_instance.gpio_pin, GPIO_CALLBACK_RISING, NULL, 0);
1000a548:	4b04      	ldr	r3, [pc, #16]	; (1000a55c <sms_button_bt1_callback+0x20>)
1000a54a:	7858      	ldrb	r0, [r3, #1]
1000a54c:	2300      	movs	r3, #0
1000a54e:	2200      	movs	r2, #0
1000a550:	2102      	movs	r1, #2
1000a552:	4c03      	ldr	r4, [pc, #12]	; (1000a560 <sms_button_bt1_callback+0x24>)
1000a554:	47a0      	blx	r4
}
1000a556:	bd10      	pop	{r4, pc}
1000a558:	1001a0f8 	.word	0x1001a0f8
1000a55c:	10019ffc 	.word	0x10019ffc
1000a560:	1000f3c1 	.word	0x1000f3c1

1000a564 <sms_button_configure_gpio>:
/* Callback functions --> doing things                                  */
/************************************************************************/

/* Initialize gpio for button inputs */
void sms_button_configure_gpio(void)
{
1000a564:	b510      	push	{r4, lr}
1000a566:	b082      	sub	sp, #8
    struct gpio_config config_gpio_pin;

    /* Button0 @ PIN_AO_GPIO_0 */
    gpio_get_config_defaults(&config_gpio_pin);
1000a568:	ac01      	add	r4, sp, #4
1000a56a:	0020      	movs	r0, r4
1000a56c:	4b20      	ldr	r3, [pc, #128]	; (1000a5f0 <sms_button_configure_gpio+0x8c>)
1000a56e:	4798      	blx	r3
    config_gpio_pin.direction = GPIO_PIN_DIR_INPUT;
1000a570:	2300      	movs	r3, #0
1000a572:	7023      	strb	r3, [r4, #0]
    config_gpio_pin.input_pull = GPIO_PIN_PULL_DOWN;
1000a574:	3302      	adds	r3, #2
1000a576:	7063      	strb	r3, [r4, #1]
    config_gpio_pin.aon_wakeup = true;
1000a578:	3b01      	subs	r3, #1
1000a57a:	70e3      	strb	r3, [r4, #3]
    if(gpio_pin_set_config(btn0_instance.gpio_pin, &config_gpio_pin) != STATUS_OK) {
1000a57c:	4b1d      	ldr	r3, [pc, #116]	; (1000a5f4 <sms_button_configure_gpio+0x90>)
1000a57e:	7858      	ldrb	r0, [r3, #1]
1000a580:	0021      	movs	r1, r4
1000a582:	4b1d      	ldr	r3, [pc, #116]	; (1000a5f8 <sms_button_configure_gpio+0x94>)
1000a584:	4798      	blx	r3
1000a586:	2800      	cmp	r0, #0
1000a588:	d005      	beq.n	1000a596 <sms_button_configure_gpio+0x32>
        DBG_LOG_DEV("[sms_button_configure]\tproblem while setting up button0");
1000a58a:	481c      	ldr	r0, [pc, #112]	; (1000a5fc <sms_button_configure_gpio+0x98>)
1000a58c:	4b1c      	ldr	r3, [pc, #112]	; (1000a600 <sms_button_configure_gpio+0x9c>)
1000a58e:	4798      	blx	r3
1000a590:	481c      	ldr	r0, [pc, #112]	; (1000a604 <sms_button_configure_gpio+0xa0>)
1000a592:	4b1d      	ldr	r3, [pc, #116]	; (1000a608 <sms_button_configure_gpio+0xa4>)
1000a594:	4798      	blx	r3
    }
    
    /* Button1 @ PIN_AO_GPIO_2 */
    gpio_get_config_defaults(&config_gpio_pin);
1000a596:	ac01      	add	r4, sp, #4
1000a598:	0020      	movs	r0, r4
1000a59a:	4b15      	ldr	r3, [pc, #84]	; (1000a5f0 <sms_button_configure_gpio+0x8c>)
1000a59c:	4798      	blx	r3
    config_gpio_pin.direction = GPIO_PIN_DIR_INPUT;
1000a59e:	2300      	movs	r3, #0
1000a5a0:	7023      	strb	r3, [r4, #0]
    config_gpio_pin.input_pull = GPIO_PIN_PULL_DOWN;
1000a5a2:	3302      	adds	r3, #2
1000a5a4:	7063      	strb	r3, [r4, #1]
    config_gpio_pin.aon_wakeup = true;
1000a5a6:	3b01      	subs	r3, #1
1000a5a8:	70e3      	strb	r3, [r4, #3]
    if(gpio_pin_set_config(btn1_instance.gpio_pin, &config_gpio_pin) != STATUS_OK) {
1000a5aa:	4b18      	ldr	r3, [pc, #96]	; (1000a60c <sms_button_configure_gpio+0xa8>)
1000a5ac:	7858      	ldrb	r0, [r3, #1]
1000a5ae:	0021      	movs	r1, r4
1000a5b0:	4b11      	ldr	r3, [pc, #68]	; (1000a5f8 <sms_button_configure_gpio+0x94>)
1000a5b2:	4798      	blx	r3
1000a5b4:	2800      	cmp	r0, #0
1000a5b6:	d005      	beq.n	1000a5c4 <sms_button_configure_gpio+0x60>
        DBG_LOG("[sms_button_configure]\tProblem while setting up button1");
1000a5b8:	4810      	ldr	r0, [pc, #64]	; (1000a5fc <sms_button_configure_gpio+0x98>)
1000a5ba:	4b11      	ldr	r3, [pc, #68]	; (1000a600 <sms_button_configure_gpio+0x9c>)
1000a5bc:	4798      	blx	r3
1000a5be:	4814      	ldr	r0, [pc, #80]	; (1000a610 <sms_button_configure_gpio+0xac>)
1000a5c0:	4b11      	ldr	r3, [pc, #68]	; (1000a608 <sms_button_configure_gpio+0xa4>)
1000a5c2:	4798      	blx	r3
    }

    /* Button 0 on SAMB11 XPLAINED */
    gpio_get_config_defaults(&config_gpio_pin);
1000a5c4:	ac01      	add	r4, sp, #4
1000a5c6:	0020      	movs	r0, r4
1000a5c8:	4b09      	ldr	r3, [pc, #36]	; (1000a5f0 <sms_button_configure_gpio+0x8c>)
1000a5ca:	4798      	blx	r3
    config_gpio_pin.direction = GPIO_PIN_DIR_INPUT;
1000a5cc:	2300      	movs	r3, #0
1000a5ce:	7023      	strb	r3, [r4, #0]
    config_gpio_pin.input_pull = GPIO_PIN_PULL_NONE;
1000a5d0:	7063      	strb	r3, [r4, #1]
    if(gpio_pin_set_config(BUTTON_0_PIN, &config_gpio_pin) != STATUS_OK) {
1000a5d2:	0021      	movs	r1, r4
1000a5d4:	2017      	movs	r0, #23
1000a5d6:	4b08      	ldr	r3, [pc, #32]	; (1000a5f8 <sms_button_configure_gpio+0x94>)
1000a5d8:	4798      	blx	r3
1000a5da:	2800      	cmp	r0, #0
1000a5dc:	d005      	beq.n	1000a5ea <sms_button_configure_gpio+0x86>
        DBG_LOG("[sms_button_configure]\tProblem while setting up XPLAINED user button");
1000a5de:	4807      	ldr	r0, [pc, #28]	; (1000a5fc <sms_button_configure_gpio+0x98>)
1000a5e0:	4b07      	ldr	r3, [pc, #28]	; (1000a600 <sms_button_configure_gpio+0x9c>)
1000a5e2:	4798      	blx	r3
1000a5e4:	480b      	ldr	r0, [pc, #44]	; (1000a614 <sms_button_configure_gpio+0xb0>)
1000a5e6:	4b08      	ldr	r3, [pc, #32]	; (1000a608 <sms_button_configure_gpio+0xa4>)
1000a5e8:	4798      	blx	r3
    }
}
1000a5ea:	b002      	add	sp, #8
1000a5ec:	bd10      	pop	{r4, pc}
1000a5ee:	46c0      	nop			; (mov r8, r8)
1000a5f0:	1000c0fd 	.word	0x1000c0fd
1000a5f4:	10019f60 	.word	0x10019f60
1000a5f8:	1000c10d 	.word	0x1000c10d
1000a5fc:	100165a4 	.word	0x100165a4
1000a600:	100153f9 	.word	0x100153f9
1000a604:	10016bc4 	.word	0x10016bc4
1000a608:	100152d9 	.word	0x100152d9
1000a60c:	10019ffc 	.word	0x10019ffc
1000a610:	10016bfc 	.word	0x10016bfc
1000a614:	10016c34 	.word	0x10016c34

1000a618 <sms_button_register_callbacks>:

/* Register button input callbacks */
void sms_button_register_callbacks(void)
{
1000a618:	b510      	push	{r4, lr}
    /* Button0 callback */
    gpio_register_callback(btn0_instance.gpio_pin, sms_button_bt0_callback, GPIO_CALLBACK_RISING);
1000a61a:	4b06      	ldr	r3, [pc, #24]	; (1000a634 <sms_button_register_callbacks+0x1c>)
1000a61c:	7858      	ldrb	r0, [r3, #1]
1000a61e:	2202      	movs	r2, #2
1000a620:	4905      	ldr	r1, [pc, #20]	; (1000a638 <sms_button_register_callbacks+0x20>)
1000a622:	4c06      	ldr	r4, [pc, #24]	; (1000a63c <sms_button_register_callbacks+0x24>)
1000a624:	47a0      	blx	r4
    //gpio_enable_callback(SMS_BTN_0_PIN);
    
    /* Button1 callback */
    gpio_register_callback(btn1_instance.gpio_pin, sms_button_bt1_callback, GPIO_CALLBACK_RISING);
1000a626:	4b06      	ldr	r3, [pc, #24]	; (1000a640 <sms_button_register_callbacks+0x28>)
1000a628:	7858      	ldrb	r0, [r3, #1]
1000a62a:	2202      	movs	r2, #2
1000a62c:	4905      	ldr	r1, [pc, #20]	; (1000a644 <sms_button_register_callbacks+0x2c>)
1000a62e:	47a0      	blx	r4
    //gpio_enable_callback(SMS_BTN_1_PIN);
    
    /* User button callback */
}
1000a630:	bd10      	pop	{r4, pc}
1000a632:	46c0      	nop			; (mov r8, r8)
1000a634:	10019f60 	.word	0x10019f60
1000a638:	1000a515 	.word	0x1000a515
1000a63c:	1000c53d 	.word	0x1000c53d
1000a640:	10019ffc 	.word	0x10019ffc
1000a644:	1000a53d 	.word	0x1000a53d

1000a648 <sms_button_get_state>:
    gpio_disable_callback(SMS_BTN_1_PIN);
}

/* Get current buttons state */
enum sms_button_state sms_button_get_state(void)
{
1000a648:	b570      	push	{r4, r5, r6, lr}
    bool b0 = gpio_pin_get_input_level(SMS_BTN_0_PIN);
1000a64a:	201f      	movs	r0, #31
1000a64c:	4d0c      	ldr	r5, [pc, #48]	; (1000a680 <sms_button_get_state+0x38>)
1000a64e:	47a8      	blx	r5
1000a650:	0004      	movs	r4, r0
    bool b1 = gpio_pin_get_input_level(SMS_BTN_1_PIN);
1000a652:	201d      	movs	r0, #29
1000a654:	47a8      	blx	r5
1000a656:	0005      	movs	r5, r0
1000a658:	0006      	movs	r6, r0
    DBG_LOG("[sms_button_get_state]\t\tButton state: %d %d", b1, b0);
1000a65a:	480a      	ldr	r0, [pc, #40]	; (1000a684 <sms_button_get_state+0x3c>)
1000a65c:	4b0a      	ldr	r3, [pc, #40]	; (1000a688 <sms_button_get_state+0x40>)
1000a65e:	4798      	blx	r3
1000a660:	0022      	movs	r2, r4
1000a662:	0029      	movs	r1, r5
1000a664:	4809      	ldr	r0, [pc, #36]	; (1000a68c <sms_button_get_state+0x44>)
1000a666:	4b0a      	ldr	r3, [pc, #40]	; (1000a690 <sms_button_get_state+0x48>)
1000a668:	4798      	blx	r3
    if(b0 && b1) return BUTTON_STATE_BOTH;
1000a66a:	2c00      	cmp	r4, #0
1000a66c:	d004      	beq.n	1000a678 <sms_button_get_state+0x30>
1000a66e:	2003      	movs	r0, #3
1000a670:	2d00      	cmp	r5, #0
1000a672:	d104      	bne.n	1000a67e <sms_button_get_state+0x36>
    else if(b0 && !b1) return BUTTON_STATE_B0;
1000a674:	3802      	subs	r0, #2
1000a676:	e002      	b.n	1000a67e <sms_button_get_state+0x36>
    else if(!b0 && b1) return BUTTON_STATE_B1;
    else return BUTTON_STATE_NONE;
1000a678:	1e70      	subs	r0, r6, #1
1000a67a:	4186      	sbcs	r6, r0
1000a67c:	0070      	lsls	r0, r6, #1
}
1000a67e:	bd70      	pop	{r4, r5, r6, pc}
1000a680:	1000c2c5 	.word	0x1000c2c5
1000a684:	100165a4 	.word	0x100165a4
1000a688:	100153f9 	.word	0x100153f9
1000a68c:	10016c7c 	.word	0x10016c7c
1000a690:	100152d9 	.word	0x100152d9

1000a694 <sms_button_fn>:
/************************************************************************/
/* Callback functions --> doing things                                  */
/************************************************************************/
/* BUTTON_0 */
int sms_button_fn(enum sms_btn_ids btn)
{
1000a694:	b570      	push	{r4, r5, r6, lr}
1000a696:	0005      	movs	r5, r0
    button_instance.previous_state = button_instance.current_state;
1000a698:	4c78      	ldr	r4, [pc, #480]	; (1000a87c <sms_button_fn+0x1e8>)
1000a69a:	7863      	ldrb	r3, [r4, #1]
1000a69c:	7023      	strb	r3, [r4, #0]
    button_instance.current_state = sms_button_get_state();
1000a69e:	4b78      	ldr	r3, [pc, #480]	; (1000a880 <sms_button_fn+0x1ec>)
1000a6a0:	4798      	blx	r3
1000a6a2:	7060      	strb	r0, [r4, #1]
    
    if(btn == SMS_BTN_0) sms_monitor_get_states("[sms_button_fn]-0");
1000a6a4:	2d00      	cmp	r5, #0
1000a6a6:	d103      	bne.n	1000a6b0 <sms_button_fn+0x1c>
1000a6a8:	4876      	ldr	r0, [pc, #472]	; (1000a884 <sms_button_fn+0x1f0>)
1000a6aa:	4b77      	ldr	r3, [pc, #476]	; (1000a888 <sms_button_fn+0x1f4>)
1000a6ac:	4798      	blx	r3
1000a6ae:	e005      	b.n	1000a6bc <sms_button_fn+0x28>
    else if(btn == SMS_BTN_1) sms_monitor_get_states("[sms_button_fn]-1");
1000a6b0:	2d01      	cmp	r5, #1
1000a6b2:	d000      	beq.n	1000a6b6 <sms_button_fn+0x22>
1000a6b4:	e0d4      	b.n	1000a860 <sms_button_fn+0x1cc>
1000a6b6:	4875      	ldr	r0, [pc, #468]	; (1000a88c <sms_button_fn+0x1f8>)
1000a6b8:	4b73      	ldr	r3, [pc, #460]	; (1000a888 <sms_button_fn+0x1f4>)
1000a6ba:	4798      	blx	r3
    else return -1;
    
    switch(button_instance.current_state) {
1000a6bc:	4b6f      	ldr	r3, [pc, #444]	; (1000a87c <sms_button_fn+0x1e8>)
1000a6be:	785b      	ldrb	r3, [r3, #1]
1000a6c0:	2b01      	cmp	r3, #1
1000a6c2:	d008      	beq.n	1000a6d6 <sms_button_fn+0x42>
1000a6c4:	2b00      	cmp	r3, #0
1000a6c6:	d100      	bne.n	1000a6ca <sms_button_fn+0x36>
1000a6c8:	e0c5      	b.n	1000a856 <sms_button_fn+0x1c2>
1000a6ca:	2b02      	cmp	r3, #2
1000a6cc:	d04b      	beq.n	1000a766 <sms_button_fn+0xd2>
1000a6ce:	2b03      	cmp	r3, #3
1000a6d0:	d100      	bne.n	1000a6d4 <sms_button_fn+0x40>
1000a6d2:	e08f      	b.n	1000a7f4 <sms_button_fn+0x160>
1000a6d4:	e0c7      	b.n	1000a866 <sms_button_fn+0x1d2>
        // --- current state ---
        case BUTTON_STATE_B0:
        switch(ble_current_state) {
1000a6d6:	4b6e      	ldr	r3, [pc, #440]	; (1000a890 <sms_button_fn+0x1fc>)
1000a6d8:	781b      	ldrb	r3, [r3, #0]
1000a6da:	b2db      	uxtb	r3, r3
1000a6dc:	2b00      	cmp	r3, #0
1000a6de:	d003      	beq.n	1000a6e8 <sms_button_fn+0x54>
1000a6e0:	3b22      	subs	r3, #34	; 0x22
1000a6e2:	2b01      	cmp	r3, #1
1000a6e4:	d836      	bhi.n	1000a754 <sms_button_fn+0xc0>
1000a6e6:	e00e      	b.n	1000a706 <sms_button_fn+0x72>
            case BLE_STATE_POWEROFF:
            timer1_current_mode = TIMER1_MODE_STARTUP;
1000a6e8:	2201      	movs	r2, #1
1000a6ea:	4b6a      	ldr	r3, [pc, #424]	; (1000a894 <sms_button_fn+0x200>)
1000a6ec:	701a      	strb	r2, [r3, #0]
            timer2_current_mode = TIMER2_MODE_NONE;
1000a6ee:	2300      	movs	r3, #0
1000a6f0:	4a69      	ldr	r2, [pc, #420]	; (1000a898 <sms_button_fn+0x204>)
1000a6f2:	7013      	strb	r3, [r2, #0]
            sms_btn_cnt = 0;
1000a6f4:	4a69      	ldr	r2, [pc, #420]	; (1000a89c <sms_button_fn+0x208>)
1000a6f6:	7013      	strb	r3, [r2, #0]
            //ulp_ready = false;
            sms_dualtimer_start(TIMER_UNIT_MS, SMS_BTN_STARTUP_MS, DUALTIMER_TIMER1);
1000a6f8:	2200      	movs	r2, #0
1000a6fa:	21fa      	movs	r1, #250	; 0xfa
1000a6fc:	2001      	movs	r0, #1
1000a6fe:	4b68      	ldr	r3, [pc, #416]	; (1000a8a0 <sms_button_fn+0x20c>)
1000a700:	4798      	blx	r3
        ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
1000a702:	2000      	movs	r0, #0
            timer1_current_mode = TIMER1_MODE_STARTUP;
            timer2_current_mode = TIMER2_MODE_NONE;
            sms_btn_cnt = 0;
            //ulp_ready = false;
            sms_dualtimer_start(TIMER_UNIT_MS, SMS_BTN_STARTUP_MS, DUALTIMER_TIMER1);
            break;
1000a704:	e0b9      	b.n	1000a87a <sms_button_fn+0x1e6>
            
            case BLE_STATE_PAIRED:
            case BLE_STATE_INDICATING:
            if(pressure_device.state == PRESSURE_STATE_STDBY) {
1000a706:	2328      	movs	r3, #40	; 0x28
1000a708:	4a66      	ldr	r2, [pc, #408]	; (1000a8a4 <sms_button_fn+0x210>)
1000a70a:	5cd3      	ldrb	r3, [r2, r3]
1000a70c:	2b01      	cmp	r3, #1
1000a70e:	d109      	bne.n	1000a724 <sms_button_fn+0x90>
                DBG_LOG_DEV("[sms_button_fn]\t\tStarting sensors (B0)");
1000a710:	4865      	ldr	r0, [pc, #404]	; (1000a8a8 <sms_button_fn+0x214>)
1000a712:	4b66      	ldr	r3, [pc, #408]	; (1000a8ac <sms_button_fn+0x218>)
1000a714:	4798      	blx	r3
1000a716:	4866      	ldr	r0, [pc, #408]	; (1000a8b0 <sms_button_fn+0x21c>)
1000a718:	4b66      	ldr	r3, [pc, #408]	; (1000a8b4 <sms_button_fn+0x220>)
1000a71a:	4798      	blx	r3
                sms_sensors_interrupt_toggle(false, true);
1000a71c:	2101      	movs	r1, #1
1000a71e:	2000      	movs	r0, #0
1000a720:	4b65      	ldr	r3, [pc, #404]	; (1000a8b8 <sms_button_fn+0x224>)
1000a722:	4798      	blx	r3
            }
            timer1_current_mode = TIMER1_MODE_NONE;
1000a724:	2300      	movs	r3, #0
1000a726:	4a5b      	ldr	r2, [pc, #364]	; (1000a894 <sms_button_fn+0x200>)
1000a728:	7013      	strb	r3, [r2, #0]
            timer2_current_mode = TIMER2_MODE_NONE;
1000a72a:	4a5b      	ldr	r2, [pc, #364]	; (1000a898 <sms_button_fn+0x204>)
1000a72c:	7013      	strb	r3, [r2, #0]
            if(btn == btn0_instance.id) sms_ble_send_characteristic(BLE_CHAR_BTN0);
1000a72e:	4b63      	ldr	r3, [pc, #396]	; (1000a8bc <sms_button_fn+0x228>)
1000a730:	781b      	ldrb	r3, [r3, #0]
1000a732:	42ab      	cmp	r3, r5
1000a734:	d104      	bne.n	1000a740 <sms_button_fn+0xac>
1000a736:	2000      	movs	r0, #0
1000a738:	4b61      	ldr	r3, [pc, #388]	; (1000a8c0 <sms_button_fn+0x22c>)
1000a73a:	4798      	blx	r3
        ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
1000a73c:	2000      	movs	r0, #0
1000a73e:	e09c      	b.n	1000a87a <sms_button_fn+0x1e6>
                sms_sensors_interrupt_toggle(false, true);
            }
            timer1_current_mode = TIMER1_MODE_NONE;
            timer2_current_mode = TIMER2_MODE_NONE;
            if(btn == btn0_instance.id) sms_ble_send_characteristic(BLE_CHAR_BTN0);
            else if(btn == btn1_instance.id) sms_ble_send_characteristic(BLE_CHAR_BTN1);
1000a740:	4b60      	ldr	r3, [pc, #384]	; (1000a8c4 <sms_button_fn+0x230>)
1000a742:	781b      	ldrb	r3, [r3, #0]
1000a744:	42ab      	cmp	r3, r5
1000a746:	d000      	beq.n	1000a74a <sms_button_fn+0xb6>
1000a748:	e08f      	b.n	1000a86a <sms_button_fn+0x1d6>
1000a74a:	2001      	movs	r0, #1
1000a74c:	4b5c      	ldr	r3, [pc, #368]	; (1000a8c0 <sms_button_fn+0x22c>)
1000a74e:	4798      	blx	r3
        ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
1000a750:	2000      	movs	r0, #0
1000a752:	e092      	b.n	1000a87a <sms_button_fn+0x1e6>
            
            case BLE_STATE_DISCONNECTED:
            case BLE_STATE_ADVERTISING:
            case BLE_STATE_CONNECTED:
            default:
            DBG_LOG_DEV("[sms_button_fn]\t\t\tNot used states...");
1000a754:	4854      	ldr	r0, [pc, #336]	; (1000a8a8 <sms_button_fn+0x214>)
1000a756:	4b55      	ldr	r3, [pc, #340]	; (1000a8ac <sms_button_fn+0x218>)
1000a758:	4798      	blx	r3
1000a75a:	485b      	ldr	r0, [pc, #364]	; (1000a8c8 <sms_button_fn+0x234>)
1000a75c:	4b55      	ldr	r3, [pc, #340]	; (1000a8b4 <sms_button_fn+0x220>)
1000a75e:	4798      	blx	r3
            return -1;
1000a760:	2001      	movs	r0, #1
1000a762:	4240      	negs	r0, r0
1000a764:	e089      	b.n	1000a87a <sms_button_fn+0x1e6>
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        break;
        
        // --- current state ---
        case BUTTON_STATE_B1:
        switch(ble_current_state) {
1000a766:	4b4a      	ldr	r3, [pc, #296]	; (1000a890 <sms_button_fn+0x1fc>)
1000a768:	781b      	ldrb	r3, [r3, #0]
1000a76a:	b2db      	uxtb	r3, r3
1000a76c:	2b22      	cmp	r3, #34	; 0x22
1000a76e:	d012      	beq.n	1000a796 <sms_button_fn+0x102>
1000a770:	2b23      	cmp	r3, #35	; 0x23
1000a772:	d036      	beq.n	1000a7e2 <sms_button_fn+0x14e>
1000a774:	2b00      	cmp	r3, #0
1000a776:	d17b      	bne.n	1000a870 <sms_button_fn+0x1dc>
            case BLE_STATE_POWEROFF:
            timer1_current_mode = TIMER1_MODE_STARTUP;
1000a778:	2201      	movs	r2, #1
1000a77a:	4b46      	ldr	r3, [pc, #280]	; (1000a894 <sms_button_fn+0x200>)
1000a77c:	701a      	strb	r2, [r3, #0]
            timer2_current_mode = TIMER2_MODE_NONE;
1000a77e:	2300      	movs	r3, #0
1000a780:	4a45      	ldr	r2, [pc, #276]	; (1000a898 <sms_button_fn+0x204>)
1000a782:	7013      	strb	r3, [r2, #0]
            sms_btn_cnt = 0;
1000a784:	4a45      	ldr	r2, [pc, #276]	; (1000a89c <sms_button_fn+0x208>)
1000a786:	7013      	strb	r3, [r2, #0]
            //ulp_ready = false;
            sms_dualtimer_start(TIMER_UNIT_MS, SMS_BTN_STARTUP_MS, DUALTIMER_TIMER1);
1000a788:	2200      	movs	r2, #0
1000a78a:	21fa      	movs	r1, #250	; 0xfa
1000a78c:	2001      	movs	r0, #1
1000a78e:	4b44      	ldr	r3, [pc, #272]	; (1000a8a0 <sms_button_fn+0x20c>)
1000a790:	4798      	blx	r3
        ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
1000a792:	2000      	movs	r0, #0
            timer1_current_mode = TIMER1_MODE_STARTUP;
            timer2_current_mode = TIMER2_MODE_NONE;
            sms_btn_cnt = 0;
            //ulp_ready = false;
            sms_dualtimer_start(TIMER_UNIT_MS, SMS_BTN_STARTUP_MS, DUALTIMER_TIMER1);
            break;
1000a794:	e071      	b.n	1000a87a <sms_button_fn+0x1e6>
            
            case BLE_STATE_PAIRED:
            if(pressure_device.state == PRESSURE_STATE_STDBY) {
1000a796:	2328      	movs	r3, #40	; 0x28
1000a798:	4a42      	ldr	r2, [pc, #264]	; (1000a8a4 <sms_button_fn+0x210>)
1000a79a:	5cd3      	ldrb	r3, [r2, r3]
1000a79c:	2b01      	cmp	r3, #1
1000a79e:	d109      	bne.n	1000a7b4 <sms_button_fn+0x120>
                DBG_LOG_DEV("[sms_button_fn]\t\tStarting sensors (B1)");
1000a7a0:	4841      	ldr	r0, [pc, #260]	; (1000a8a8 <sms_button_fn+0x214>)
1000a7a2:	4b42      	ldr	r3, [pc, #264]	; (1000a8ac <sms_button_fn+0x218>)
1000a7a4:	4798      	blx	r3
1000a7a6:	4849      	ldr	r0, [pc, #292]	; (1000a8cc <sms_button_fn+0x238>)
1000a7a8:	4b42      	ldr	r3, [pc, #264]	; (1000a8b4 <sms_button_fn+0x220>)
1000a7aa:	4798      	blx	r3
                sms_sensors_interrupt_toggle(false, true);
1000a7ac:	2101      	movs	r1, #1
1000a7ae:	2000      	movs	r0, #0
1000a7b0:	4b41      	ldr	r3, [pc, #260]	; (1000a8b8 <sms_button_fn+0x224>)
1000a7b2:	4798      	blx	r3
            }
            timer1_current_mode = TIMER1_MODE_NONE;
1000a7b4:	2300      	movs	r3, #0
1000a7b6:	4a37      	ldr	r2, [pc, #220]	; (1000a894 <sms_button_fn+0x200>)
1000a7b8:	7013      	strb	r3, [r2, #0]
            timer2_current_mode = TIMER2_MODE_NONE;
1000a7ba:	4a37      	ldr	r2, [pc, #220]	; (1000a898 <sms_button_fn+0x204>)
1000a7bc:	7013      	strb	r3, [r2, #0]
            //sms_ble_ind_retry = 0;
            if(btn == btn0_instance.id) sms_ble_send_characteristic(BLE_CHAR_BTN0);
1000a7be:	4b3f      	ldr	r3, [pc, #252]	; (1000a8bc <sms_button_fn+0x228>)
1000a7c0:	781b      	ldrb	r3, [r3, #0]
1000a7c2:	42ab      	cmp	r3, r5
1000a7c4:	d104      	bne.n	1000a7d0 <sms_button_fn+0x13c>
1000a7c6:	2000      	movs	r0, #0
1000a7c8:	4b3d      	ldr	r3, [pc, #244]	; (1000a8c0 <sms_button_fn+0x22c>)
1000a7ca:	4798      	blx	r3
        ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
1000a7cc:	2000      	movs	r0, #0
1000a7ce:	e054      	b.n	1000a87a <sms_button_fn+0x1e6>
            }
            timer1_current_mode = TIMER1_MODE_NONE;
            timer2_current_mode = TIMER2_MODE_NONE;
            //sms_ble_ind_retry = 0;
            if(btn == btn0_instance.id) sms_ble_send_characteristic(BLE_CHAR_BTN0);
            else if(btn == btn1_instance.id) sms_ble_send_characteristic(BLE_CHAR_BTN1);
1000a7d0:	4b3c      	ldr	r3, [pc, #240]	; (1000a8c4 <sms_button_fn+0x230>)
1000a7d2:	781b      	ldrb	r3, [r3, #0]
1000a7d4:	42ab      	cmp	r3, r5
1000a7d6:	d14e      	bne.n	1000a876 <sms_button_fn+0x1e2>
1000a7d8:	2001      	movs	r0, #1
1000a7da:	4b39      	ldr	r3, [pc, #228]	; (1000a8c0 <sms_button_fn+0x22c>)
1000a7dc:	4798      	blx	r3
        ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
1000a7de:	2000      	movs	r0, #0
1000a7e0:	e04b      	b.n	1000a87a <sms_button_fn+0x1e6>
            else if(btn == btn1_instance.id) sms_ble_send_characteristic(BLE_CHAR_BTN1);
            else return -1;
            break;
            
            case BLE_STATE_INDICATING:
            DBG_LOG_DEV("[sms_button_fn]\tStill indicating...");
1000a7e2:	4831      	ldr	r0, [pc, #196]	; (1000a8a8 <sms_button_fn+0x214>)
1000a7e4:	4b31      	ldr	r3, [pc, #196]	; (1000a8ac <sms_button_fn+0x218>)
1000a7e6:	4798      	blx	r3
1000a7e8:	4839      	ldr	r0, [pc, #228]	; (1000a8d0 <sms_button_fn+0x23c>)
1000a7ea:	4b32      	ldr	r3, [pc, #200]	; (1000a8b4 <sms_button_fn+0x220>)
1000a7ec:	4798      	blx	r3
            return -1;
1000a7ee:	2001      	movs	r0, #1
1000a7f0:	4240      	negs	r0, r0
1000a7f2:	e042      	b.n	1000a87a <sms_button_fn+0x1e6>
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        break;
        
        // --- current state ---
        case BUTTON_STATE_BOTH:
        if(ble_current_state == BLE_STATE_POWEROFF) {
1000a7f4:	4b26      	ldr	r3, [pc, #152]	; (1000a890 <sms_button_fn+0x1fc>)
1000a7f6:	781b      	ldrb	r3, [r3, #0]
1000a7f8:	2b00      	cmp	r3, #0
1000a7fa:	d108      	bne.n	1000a80e <sms_button_fn+0x17a>
            timer1_current_mode = TIMER1_MODE_NONE;
1000a7fc:	4a25      	ldr	r2, [pc, #148]	; (1000a894 <sms_button_fn+0x200>)
1000a7fe:	7013      	strb	r3, [r2, #0]
            timer2_current_mode = TIMER2_MODE_NONE;
1000a800:	4a25      	ldr	r2, [pc, #148]	; (1000a898 <sms_button_fn+0x204>)
1000a802:	7013      	strb	r3, [r2, #0]
            ulp_ready = true;
1000a804:	2201      	movs	r2, #1
1000a806:	4b33      	ldr	r3, [pc, #204]	; (1000a8d4 <sms_button_fn+0x240>)
1000a808:	701a      	strb	r2, [r3, #0]
        ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
1000a80a:	2000      	movs	r0, #0
1000a80c:	e035      	b.n	1000a87a <sms_button_fn+0x1e6>
            ulp_ready = true;
            //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
            //release_sleep_lock();
        }
        else {
            if((ble_current_state == BLE_STATE_PAIRED) || (ble_current_state == BLE_STATE_INDICATING)) {
1000a80e:	4b20      	ldr	r3, [pc, #128]	; (1000a890 <sms_button_fn+0x1fc>)
1000a810:	781b      	ldrb	r3, [r3, #0]
1000a812:	2b22      	cmp	r3, #34	; 0x22
1000a814:	d003      	beq.n	1000a81e <sms_button_fn+0x18a>
1000a816:	4b1e      	ldr	r3, [pc, #120]	; (1000a890 <sms_button_fn+0x1fc>)
1000a818:	781b      	ldrb	r3, [r3, #0]
1000a81a:	2b23      	cmp	r3, #35	; 0x23
1000a81c:	d104      	bne.n	1000a828 <sms_button_fn+0x194>
                pressure_device.state = PRESSURE_STATE_STDBY;
1000a81e:	2101      	movs	r1, #1
1000a820:	2328      	movs	r3, #40	; 0x28
1000a822:	4a20      	ldr	r2, [pc, #128]	; (1000a8a4 <sms_button_fn+0x210>)
1000a824:	54d1      	strb	r1, [r2, r3]
1000a826:	e003      	b.n	1000a830 <sms_button_fn+0x19c>
            }
            else {
                pressure_device.state = PRESSURE_STATE_OFF;
1000a828:	2100      	movs	r1, #0
1000a82a:	2328      	movs	r3, #40	; 0x28
1000a82c:	4a1d      	ldr	r2, [pc, #116]	; (1000a8a4 <sms_button_fn+0x210>)
1000a82e:	54d1      	strb	r1, [r2, r3]
            }
            sms_sensors_interrupt_toggle(false, false);
1000a830:	2100      	movs	r1, #0
1000a832:	2000      	movs	r0, #0
1000a834:	4b20      	ldr	r3, [pc, #128]	; (1000a8b8 <sms_button_fn+0x224>)
1000a836:	4798      	blx	r3
            timer1_current_mode = TIMER1_MODE_SHUTDOWN;
1000a838:	2202      	movs	r2, #2
1000a83a:	4b16      	ldr	r3, [pc, #88]	; (1000a894 <sms_button_fn+0x200>)
1000a83c:	701a      	strb	r2, [r3, #0]
            timer2_current_mode = TIMER2_MODE_NONE;
1000a83e:	2300      	movs	r3, #0
1000a840:	4a15      	ldr	r2, [pc, #84]	; (1000a898 <sms_button_fn+0x204>)
1000a842:	7013      	strb	r3, [r2, #0]
            sms_btn_cnt = 0;
1000a844:	4a15      	ldr	r2, [pc, #84]	; (1000a89c <sms_button_fn+0x208>)
1000a846:	7013      	strb	r3, [r2, #0]
            //ulp_ready = false;
            sms_dualtimer_start(TIMER_UNIT_MS, SMS_BTN_SHTDWN_MS, DUALTIMER_TIMER1);
1000a848:	2200      	movs	r2, #0
1000a84a:	21fa      	movs	r1, #250	; 0xfa
1000a84c:	2001      	movs	r0, #1
1000a84e:	4b14      	ldr	r3, [pc, #80]	; (1000a8a0 <sms_button_fn+0x20c>)
1000a850:	4798      	blx	r3
        ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
1000a852:	2000      	movs	r0, #0
1000a854:	e011      	b.n	1000a87a <sms_button_fn+0x1e6>
        }
        break;
        
        // --- current state ---
        case BUTTON_STATE_NONE:
        ulp_ready = true;
1000a856:	2201      	movs	r2, #1
1000a858:	4b1e      	ldr	r3, [pc, #120]	; (1000a8d4 <sms_button_fn+0x240>)
1000a85a:	701a      	strb	r2, [r3, #0]
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
1000a85c:	2000      	movs	r0, #0
        // --- current state ---
        case BUTTON_STATE_NONE:
        ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
1000a85e:	e00c      	b.n	1000a87a <sms_button_fn+0x1e6>
    button_instance.previous_state = button_instance.current_state;
    button_instance.current_state = sms_button_get_state();
    
    if(btn == SMS_BTN_0) sms_monitor_get_states("[sms_button_fn]-0");
    else if(btn == SMS_BTN_1) sms_monitor_get_states("[sms_button_fn]-1");
    else return -1;
1000a860:	2001      	movs	r0, #1
1000a862:	4240      	negs	r0, r0
1000a864:	e009      	b.n	1000a87a <sms_button_fn+0x1e6>
        ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
1000a866:	2000      	movs	r0, #0
1000a868:	e007      	b.n	1000a87a <sms_button_fn+0x1e6>
            }
            timer1_current_mode = TIMER1_MODE_NONE;
            timer2_current_mode = TIMER2_MODE_NONE;
            if(btn == btn0_instance.id) sms_ble_send_characteristic(BLE_CHAR_BTN0);
            else if(btn == btn1_instance.id) sms_ble_send_characteristic(BLE_CHAR_BTN1);
            else return -1;
1000a86a:	2001      	movs	r0, #1
1000a86c:	4240      	negs	r0, r0
1000a86e:	e004      	b.n	1000a87a <sms_button_fn+0x1e6>
            
            case BLE_STATE_DISCONNECTED:
            case BLE_STATE_ADVERTISING:
            case BLE_STATE_CONNECTED:
            default:
            return -1;
1000a870:	2001      	movs	r0, #1
1000a872:	4240      	negs	r0, r0
1000a874:	e001      	b.n	1000a87a <sms_button_fn+0x1e6>
            timer1_current_mode = TIMER1_MODE_NONE;
            timer2_current_mode = TIMER2_MODE_NONE;
            //sms_ble_ind_retry = 0;
            if(btn == btn0_instance.id) sms_ble_send_characteristic(BLE_CHAR_BTN0);
            else if(btn == btn1_instance.id) sms_ble_send_characteristic(BLE_CHAR_BTN1);
            else return -1;
1000a876:	2001      	movs	r0, #1
1000a878:	4240      	negs	r0, r0
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
}
1000a87a:	bd70      	pop	{r4, r5, r6, pc}
1000a87c:	1001a000 	.word	0x1001a000
1000a880:	1000a649 	.word	0x1000a649
1000a884:	10016ca8 	.word	0x10016ca8
1000a888:	1000a9dd 	.word	0x1000a9dd
1000a88c:	10016cbc 	.word	0x10016cbc
1000a890:	1001a110 	.word	0x1001a110
1000a894:	10019f64 	.word	0x10019f64
1000a898:	1001a111 	.word	0x1001a111
1000a89c:	1001a132 	.word	0x1001a132
1000a8a0:	1000b645 	.word	0x1000b645
1000a8a4:	1001a074 	.word	0x1001a074
1000a8a8:	100165a4 	.word	0x100165a4
1000a8ac:	100153f9 	.word	0x100153f9
1000a8b0:	10016cd0 	.word	0x10016cd0
1000a8b4:	100152d9 	.word	0x100152d9
1000a8b8:	1000b395 	.word	0x1000b395
1000a8bc:	10019f60 	.word	0x10019f60
1000a8c0:	1000a245 	.word	0x1000a245
1000a8c4:	10019ffc 	.word	0x10019ffc
1000a8c8:	10016cf8 	.word	0x10016cf8
1000a8cc:	10016d20 	.word	0x10016d20
1000a8d0:	10016d48 	.word	0x10016d48
1000a8d4:	10019ff9 	.word	0x10019ff9

1000a8d8 <sms_button_toggle_interrupt>:
    else return BUTTON_STATE_NONE;
}

/* En- or disable button interrupts */
void sms_button_toggle_interrupt(enum sms_btn_int_tog tog0, enum sms_btn_int_tog tog1)
{
1000a8d8:	b510      	push	{r4, lr}
1000a8da:	000c      	movs	r4, r1
    if(tog0 == SMS_BTN_INT_ENABLE) {
1000a8dc:	2800      	cmp	r0, #0
1000a8de:	d104      	bne.n	1000a8ea <sms_button_toggle_interrupt+0x12>
        gpio_enable_callback(btn0_instance.gpio_pin);
1000a8e0:	4b0c      	ldr	r3, [pc, #48]	; (1000a914 <sms_button_toggle_interrupt+0x3c>)
1000a8e2:	7858      	ldrb	r0, [r3, #1]
1000a8e4:	4b0c      	ldr	r3, [pc, #48]	; (1000a918 <sms_button_toggle_interrupt+0x40>)
1000a8e6:	4798      	blx	r3
1000a8e8:	e005      	b.n	1000a8f6 <sms_button_toggle_interrupt+0x1e>
    }
    else if(tog0 == SMS_BTN_INT_DISABLE) {
1000a8ea:	2801      	cmp	r0, #1
1000a8ec:	d103      	bne.n	1000a8f6 <sms_button_toggle_interrupt+0x1e>
        gpio_disable_callback(btn0_instance.gpio_pin);
1000a8ee:	4b09      	ldr	r3, [pc, #36]	; (1000a914 <sms_button_toggle_interrupt+0x3c>)
1000a8f0:	7858      	ldrb	r0, [r3, #1]
1000a8f2:	4b0a      	ldr	r3, [pc, #40]	; (1000a91c <sms_button_toggle_interrupt+0x44>)
1000a8f4:	4798      	blx	r3
    }
    
    if(tog1 == SMS_BTN_INT_ENABLE) {
1000a8f6:	2c00      	cmp	r4, #0
1000a8f8:	d104      	bne.n	1000a904 <sms_button_toggle_interrupt+0x2c>
        gpio_enable_callback(btn1_instance.gpio_pin);
1000a8fa:	4b09      	ldr	r3, [pc, #36]	; (1000a920 <sms_button_toggle_interrupt+0x48>)
1000a8fc:	7858      	ldrb	r0, [r3, #1]
1000a8fe:	4b06      	ldr	r3, [pc, #24]	; (1000a918 <sms_button_toggle_interrupt+0x40>)
1000a900:	4798      	blx	r3
1000a902:	e005      	b.n	1000a910 <sms_button_toggle_interrupt+0x38>
    }
    else if(tog1 == SMS_BTN_INT_DISABLE) {
1000a904:	2c01      	cmp	r4, #1
1000a906:	d103      	bne.n	1000a910 <sms_button_toggle_interrupt+0x38>
        gpio_disable_callback(btn1_instance.gpio_pin);
1000a908:	4b05      	ldr	r3, [pc, #20]	; (1000a920 <sms_button_toggle_interrupt+0x48>)
1000a90a:	7858      	ldrb	r0, [r3, #1]
1000a90c:	4b03      	ldr	r3, [pc, #12]	; (1000a91c <sms_button_toggle_interrupt+0x44>)
1000a90e:	4798      	blx	r3
    }
}
1000a910:	bd10      	pop	{r4, pc}
1000a912:	46c0      	nop			; (mov r8, r8)
1000a914:	10019f60 	.word	0x10019f60
1000a918:	1000c60d 	.word	0x1000c60d
1000a91c:	1000c669 	.word	0x1000c669
1000a920:	10019ffc 	.word	0x10019ffc

1000a924 <sms_button_define_services>:
    send_plf_int_msg_ind(btn1_instance.gpio_pin, GPIO_CALLBACK_RISING, NULL, 0);
}

/* Define BLE service for buttons */
void sms_button_define_services(void)
{
1000a924:	b510      	push	{r4, lr}
1000a926:	b082      	sub	sp, #8
    at_ble_status_t status;
    uint8_t init_value = 0;
1000a928:	466b      	mov	r3, sp
1000a92a:	1dda      	adds	r2, r3, #7
1000a92c:	2300      	movs	r3, #0
1000a92e:	7013      	strb	r3, [r2, #0]
    sms_ble_service_init(BLE_SERV_BUTTON, &button_instance.service_handler, &init_value);
1000a930:	4c0d      	ldr	r4, [pc, #52]	; (1000a968 <sms_button_define_services+0x44>)
1000a932:	0021      	movs	r1, r4
1000a934:	2000      	movs	r0, #0
1000a936:	4b0d      	ldr	r3, [pc, #52]	; (1000a96c <sms_button_define_services+0x48>)
1000a938:	4798      	blx	r3
    if((status = sms_ble_primary_service_define(&button_instance.service_handler)) != AT_BLE_SUCCESS) {
1000a93a:	0020      	movs	r0, r4
1000a93c:	4b0c      	ldr	r3, [pc, #48]	; (1000a970 <sms_button_define_services+0x4c>)
1000a93e:	4798      	blx	r3
1000a940:	1e04      	subs	r4, r0, #0
1000a942:	d007      	beq.n	1000a954 <sms_button_define_services+0x30>
        DBG_LOG("[sms_button_define_services]\tServices defining failed, reason 0x%x", status);
1000a944:	480b      	ldr	r0, [pc, #44]	; (1000a974 <sms_button_define_services+0x50>)
1000a946:	4b0c      	ldr	r3, [pc, #48]	; (1000a978 <sms_button_define_services+0x54>)
1000a948:	4798      	blx	r3
1000a94a:	0021      	movs	r1, r4
1000a94c:	480b      	ldr	r0, [pc, #44]	; (1000a97c <sms_button_define_services+0x58>)
1000a94e:	4b0c      	ldr	r3, [pc, #48]	; (1000a980 <sms_button_define_services+0x5c>)
1000a950:	4798      	blx	r3
1000a952:	e007      	b.n	1000a964 <sms_button_define_services+0x40>
    }
    else {
        DBG_LOG_DEV("[sms_button_define_services]\tServices defined, SMS button handle: %d", button_instance.service_handler.serv_handle);
1000a954:	4807      	ldr	r0, [pc, #28]	; (1000a974 <sms_button_define_services+0x50>)
1000a956:	4b08      	ldr	r3, [pc, #32]	; (1000a978 <sms_button_define_services+0x54>)
1000a958:	4798      	blx	r3
1000a95a:	4b0a      	ldr	r3, [pc, #40]	; (1000a984 <sms_button_define_services+0x60>)
1000a95c:	8ad9      	ldrh	r1, [r3, #22]
1000a95e:	480a      	ldr	r0, [pc, #40]	; (1000a988 <sms_button_define_services+0x64>)
1000a960:	4b07      	ldr	r3, [pc, #28]	; (1000a980 <sms_button_define_services+0x5c>)
1000a962:	4798      	blx	r3
    }
1000a964:	b002      	add	sp, #8
1000a966:	bd10      	pop	{r4, pc}
1000a968:	1001a004 	.word	0x1001a004
1000a96c:	1000a42d 	.word	0x1000a42d
1000a970:	1000a409 	.word	0x1000a409
1000a974:	100165a4 	.word	0x100165a4
1000a978:	100153f9 	.word	0x100153f9
1000a97c:	10016d6c 	.word	0x10016d6c
1000a980:	100152d9 	.word	0x100152d9
1000a984:	1001a000 	.word	0x1001a000
1000a988:	10016db0 	.word	0x10016db0

1000a98c <sms_monitor_configure_gpio>:

#include "sms_common.h"

/* General functions */
void sms_monitor_configure_gpio(void)
{
1000a98c:	b510      	push	{r4, lr}
1000a98e:	b082      	sub	sp, #8
    struct gpio_config config_gpio_pin;
    gpio_get_config_defaults(&config_gpio_pin);
1000a990:	ac01      	add	r4, sp, #4
1000a992:	0020      	movs	r0, r4
1000a994:	4b0a      	ldr	r3, [pc, #40]	; (1000a9c0 <sms_monitor_configure_gpio+0x34>)
1000a996:	4798      	blx	r3
    config_gpio_pin.direction  = GPIO_PIN_DIR_OUTPUT;
1000a998:	2301      	movs	r3, #1
1000a99a:	7023      	strb	r3, [r4, #0]
    if(gpio_pin_set_config(DBG_PIN_1, &config_gpio_pin) != STATUS_OK) {
1000a99c:	0021      	movs	r1, r4
1000a99e:	2002      	movs	r0, #2
1000a9a0:	4b08      	ldr	r3, [pc, #32]	; (1000a9c4 <sms_monitor_configure_gpio+0x38>)
1000a9a2:	4798      	blx	r3
1000a9a4:	2800      	cmp	r0, #0
1000a9a6:	d005      	beq.n	1000a9b4 <sms_monitor_configure_gpio+0x28>
        DBG_LOG("Problem while setting gpio pin");
1000a9a8:	4807      	ldr	r0, [pc, #28]	; (1000a9c8 <sms_monitor_configure_gpio+0x3c>)
1000a9aa:	4b08      	ldr	r3, [pc, #32]	; (1000a9cc <sms_monitor_configure_gpio+0x40>)
1000a9ac:	4798      	blx	r3
1000a9ae:	4808      	ldr	r0, [pc, #32]	; (1000a9d0 <sms_monitor_configure_gpio+0x44>)
1000a9b0:	4b08      	ldr	r3, [pc, #32]	; (1000a9d4 <sms_monitor_configure_gpio+0x48>)
1000a9b2:	4798      	blx	r3
    }
    gpio_pin_set_output_level(DBG_PIN_1, DBG_PIN_LOW);
1000a9b4:	2100      	movs	r1, #0
1000a9b6:	2002      	movs	r0, #2
1000a9b8:	4b07      	ldr	r3, [pc, #28]	; (1000a9d8 <sms_monitor_configure_gpio+0x4c>)
1000a9ba:	4798      	blx	r3
}
1000a9bc:	b002      	add	sp, #8
1000a9be:	bd10      	pop	{r4, pc}
1000a9c0:	1000c0fd 	.word	0x1000c0fd
1000a9c4:	1000c10d 	.word	0x1000c10d
1000a9c8:	100165a4 	.word	0x100165a4
1000a9cc:	100153f9 	.word	0x100153f9
1000a9d0:	10016df8 	.word	0x10016df8
1000a9d4:	100152d9 	.word	0x100152d9
1000a9d8:	1000c365 	.word	0x1000c365

1000a9dc <sms_monitor_get_states>:

void sms_monitor_get_states(const char *label)
{
1000a9dc:	b570      	push	{r4, r5, r6, lr}
1000a9de:	b084      	sub	sp, #16
1000a9e0:	0004      	movs	r4, r0
    DBG_LOG_DEV("%s...\t\tB-prev %d, B-cur %d, BLE 0x%02x, T1 %d, T2 %d, SMS %d", label, button_instance.previous_state, button_instance.current_state, ble_current_state, timer1_current_mode, timer2_current_mode, sms_working_mode);
1000a9e2:	480c      	ldr	r0, [pc, #48]	; (1000aa14 <sms_monitor_get_states+0x38>)
1000a9e4:	4b0c      	ldr	r3, [pc, #48]	; (1000aa18 <sms_monitor_get_states+0x3c>)
1000a9e6:	4798      	blx	r3
1000a9e8:	4b0c      	ldr	r3, [pc, #48]	; (1000aa1c <sms_monitor_get_states+0x40>)
1000a9ea:	7819      	ldrb	r1, [r3, #0]
1000a9ec:	4b0c      	ldr	r3, [pc, #48]	; (1000aa20 <sms_monitor_get_states+0x44>)
1000a9ee:	7818      	ldrb	r0, [r3, #0]
1000a9f0:	4b0c      	ldr	r3, [pc, #48]	; (1000aa24 <sms_monitor_get_states+0x48>)
1000a9f2:	781d      	ldrb	r5, [r3, #0]
1000a9f4:	4b0c      	ldr	r3, [pc, #48]	; (1000aa28 <sms_monitor_get_states+0x4c>)
1000a9f6:	781e      	ldrb	r6, [r3, #0]
1000a9f8:	4a0c      	ldr	r2, [pc, #48]	; (1000aa2c <sms_monitor_get_states+0x50>)
1000a9fa:	7853      	ldrb	r3, [r2, #1]
1000a9fc:	7812      	ldrb	r2, [r2, #0]
1000a9fe:	9603      	str	r6, [sp, #12]
1000aa00:	9502      	str	r5, [sp, #8]
1000aa02:	9001      	str	r0, [sp, #4]
1000aa04:	9100      	str	r1, [sp, #0]
1000aa06:	0021      	movs	r1, r4
1000aa08:	4809      	ldr	r0, [pc, #36]	; (1000aa30 <sms_monitor_get_states+0x54>)
1000aa0a:	4c0a      	ldr	r4, [pc, #40]	; (1000aa34 <sms_monitor_get_states+0x58>)
1000aa0c:	47a0      	blx	r4
}
1000aa0e:	b004      	add	sp, #16
1000aa10:	bd70      	pop	{r4, r5, r6, pc}
1000aa12:	46c0      	nop			; (mov r8, r8)
1000aa14:	100165a4 	.word	0x100165a4
1000aa18:	100153f9 	.word	0x100153f9
1000aa1c:	1001a110 	.word	0x1001a110
1000aa20:	10019f64 	.word	0x10019f64
1000aa24:	1001a111 	.word	0x1001a111
1000aa28:	10019ff8 	.word	0x10019ff8
1000aa2c:	1001a000 	.word	0x1001a000
1000aa30:	10016e18 	.word	0x10016e18
1000aa34:	100152d9 	.word	0x100152d9

1000aa38 <sms_i2c_master_configure>:
#include <stdlib.h>
#include "sms_i2c.h"


void sms_i2c_master_configure(void)
{
1000aa38:	b530      	push	{r4, r5, lr}
1000aa3a:	b087      	sub	sp, #28
    i2c_wpacket.data = malloc(I2C_DATA_LENGTH * sizeof(uint8_t));
1000aa3c:	2010      	movs	r0, #16
1000aa3e:	4c14      	ldr	r4, [pc, #80]	; (1000aa90 <sms_i2c_master_configure+0x58>)
1000aa40:	47a0      	blx	r4
1000aa42:	4b14      	ldr	r3, [pc, #80]	; (1000aa94 <sms_i2c_master_configure+0x5c>)
1000aa44:	6058      	str	r0, [r3, #4]
    i2c_rpacket.data = malloc(I2C_DATA_LENGTH * sizeof(uint8_t));
1000aa46:	2010      	movs	r0, #16
1000aa48:	47a0      	blx	r4
1000aa4a:	4b13      	ldr	r3, [pc, #76]	; (1000aa98 <sms_i2c_master_configure+0x60>)
1000aa4c:	6058      	str	r0, [r3, #4]

    struct i2c_master_config config_i2c_master;
    i2c_master_get_config_defaults(&config_i2c_master);
1000aa4e:	ac01      	add	r4, sp, #4
1000aa50:	0020      	movs	r0, r4
1000aa52:	4b12      	ldr	r3, [pc, #72]	; (1000aa9c <sms_i2c_master_configure+0x64>)
1000aa54:	4798      	blx	r3
    config_i2c_master.clock_source = SMS_I2C_MASTER_CLK_SRC;
1000aa56:	2301      	movs	r3, #1
1000aa58:	7023      	strb	r3, [r4, #0]
    config_i2c_master.clock_divider = SMS_I2C_MASTER_CLK_DIV;
1000aa5a:	3381      	adds	r3, #129	; 0x81
1000aa5c:	8063      	strh	r3, [r4, #2]
    config_i2c_master.pin_number_pad0 = SMS_I2C_MASTER_PIN_SDA;
1000aa5e:	3b7a      	subs	r3, #122	; 0x7a
1000aa60:	6063      	str	r3, [r4, #4]
    config_i2c_master.pin_number_pad1 = SMS_I2C_MASTER_PIN_SCL;
1000aa62:	3301      	adds	r3, #1
1000aa64:	60e3      	str	r3, [r4, #12]
    config_i2c_master.pinmux_sel_pad0 = SMS_I2C_MASTER_MUX_SDA;
1000aa66:	3b07      	subs	r3, #7
1000aa68:	60a3      	str	r3, [r4, #8]
    config_i2c_master.pinmux_sel_pad1 = SMS_I2C_MASTER_MUX_SCL;
1000aa6a:	6123      	str	r3, [r4, #16]
    while(i2c_master_init(&i2c_master_instance, SMS_I2C_MASTER_PORT, &config_i2c_master) != STATUS_OK);
1000aa6c:	4d0c      	ldr	r5, [pc, #48]	; (1000aaa0 <sms_i2c_master_configure+0x68>)
1000aa6e:	4c0d      	ldr	r4, [pc, #52]	; (1000aaa4 <sms_i2c_master_configure+0x6c>)
1000aa70:	aa01      	add	r2, sp, #4
1000aa72:	490d      	ldr	r1, [pc, #52]	; (1000aaa8 <sms_i2c_master_configure+0x70>)
1000aa74:	0028      	movs	r0, r5
1000aa76:	47a0      	blx	r4
1000aa78:	2800      	cmp	r0, #0
1000aa7a:	d1f9      	bne.n	1000aa70 <sms_i2c_master_configure+0x38>

    i2c_enable(i2c_master_instance.hw);
1000aa7c:	4b08      	ldr	r3, [pc, #32]	; (1000aaa0 <sms_i2c_master_configure+0x68>)
1000aa7e:	681a      	ldr	r2, [r3, #0]
 *
 * \param[in]  i2c_module  Pointer to software module structure
 */
static inline void i2c_wait_for_idle(I2c *const i2c_module)
{
	while (i2c_module->I2C_STATUS.bit.I2C_ACTIVE) {
1000aa80:	2128      	movs	r1, #40	; 0x28
1000aa82:	5c53      	ldrb	r3, [r2, r1]
1000aa84:	07db      	lsls	r3, r3, #31
1000aa86:	d4fc      	bmi.n	1000aa82 <sms_i2c_master_configure+0x4a>
static inline void i2c_enable(I2c *const i2c_module)
{
	/* Wait for module to sync. */
	i2c_wait_for_idle(i2c_module);
	/* Enable module. */
	i2c_module->I2C_MODULE_ENABLE.reg = (1 << I2C_MODULE_ENABLE_ENABLE_Pos);
1000aa88:	2301      	movs	r3, #1
1000aa8a:	7513      	strb	r3, [r2, #20]
}
1000aa8c:	b007      	add	sp, #28
1000aa8e:	bd30      	pop	{r4, r5, pc}
1000aa90:	1001514d 	.word	0x1001514d
1000aa94:	1001a11c 	.word	0x1001a11c
1000aa98:	1001a0fc 	.word	0x1001a0fc
1000aa9c:	1000839d 	.word	0x1000839d
1000aaa0:	1001a108 	.word	0x1001a108
1000aaa4:	100083b5 	.word	0x100083b5
1000aaa8:	40003000 	.word	0x40003000

1000aaac <sms_i2c_master_write>:

int sms_i2c_master_write(uint8_t slave_addr, uint8_t reg_addr, uint8_t data_len, uint8_t const *data)
{
1000aaac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    //DBG_LOG_DEV("i2c writing to 0x%02x at 0x%02x... data: ", slave_addr, reg_addr);
    uint16_t timeout = 0;
    i2c_wpacket.address = (uint8_t)slave_addr;
1000aaae:	4c12      	ldr	r4, [pc, #72]	; (1000aaf8 <sms_i2c_master_write+0x4c>)
1000aab0:	8020      	strh	r0, [r4, #0]
    i2c_wpacket.data_length = (uint8_t)(data_len + 1);
1000aab2:	1c50      	adds	r0, r2, #1
1000aab4:	b2c0      	uxtb	r0, r0
1000aab6:	8060      	strh	r0, [r4, #2]
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
1000aab8:	6860      	ldr	r0, [r4, #4]
1000aaba:	7001      	strb	r1, [r0, #0]
    for(uint8_t i = 0; i < data_len; i++) {
1000aabc:	2a00      	cmp	r2, #0
1000aabe:	d00e      	beq.n	1000aade <sms_i2c_master_write+0x32>
1000aac0:	2000      	movs	r0, #0
1000aac2:	1c41      	adds	r1, r0, #1
        i2c_wpacket.data[i+1] = (uint8_t)data[i];
1000aac4:	5c18      	ldrb	r0, [r3, r0]
1000aac6:	6865      	ldr	r5, [r4, #4]
1000aac8:	5468      	strb	r0, [r5, r1]
1000aaca:	0008      	movs	r0, r1
    //DBG_LOG_DEV("i2c writing to 0x%02x at 0x%02x... data: ", slave_addr, reg_addr);
    uint16_t timeout = 0;
    i2c_wpacket.address = (uint8_t)slave_addr;
    i2c_wpacket.data_length = (uint8_t)(data_len + 1);
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
    for(uint8_t i = 0; i < data_len; i++) {
1000aacc:	b2c9      	uxtb	r1, r1
1000aace:	428a      	cmp	r2, r1
1000aad0:	d8f7      	bhi.n	1000aac2 <sms_i2c_master_write+0x16>
1000aad2:	e004      	b.n	1000aade <sms_i2c_master_write+0x32>
1000aad4:	3c01      	subs	r4, #1
1000aad6:	b2a4      	uxth	r4, r4
        i2c_wpacket.data[i+1] = (uint8_t)data[i];
        //DBG_LOG_CONT_DEV("0x%02x ", i2c_wpacket.data[i+1]);
    }
    while (i2c_master_write_packet_wait(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) {
        /* Increment timeout counter and check if timed out. */
        if (timeout++ >= I2C_TIMEOUT) {
1000aad8:	2c00      	cmp	r4, #0
1000aada:	d104      	bne.n	1000aae6 <sms_i2c_master_write+0x3a>
1000aadc:	e009      	b.n	1000aaf2 <sms_i2c_master_write+0x46>
    //DBG_LOG_DEV("i2c writing to 0x%02x at 0x%02x... data: ", slave_addr, reg_addr);
    uint16_t timeout = 0;
    i2c_wpacket.address = (uint8_t)slave_addr;
    i2c_wpacket.data_length = (uint8_t)(data_len + 1);
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
    for(uint8_t i = 0; i < data_len; i++) {
1000aade:	4c07      	ldr	r4, [pc, #28]	; (1000aafc <sms_i2c_master_write+0x50>)
        i2c_wpacket.data[i+1] = (uint8_t)data[i];
        //DBG_LOG_CONT_DEV("0x%02x ", i2c_wpacket.data[i+1]);
    }
    while (i2c_master_write_packet_wait(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) {
1000aae0:	4e05      	ldr	r6, [pc, #20]	; (1000aaf8 <sms_i2c_master_write+0x4c>)
1000aae2:	4d07      	ldr	r5, [pc, #28]	; (1000ab00 <sms_i2c_master_write+0x54>)
1000aae4:	4f07      	ldr	r7, [pc, #28]	; (1000ab04 <sms_i2c_master_write+0x58>)
1000aae6:	0031      	movs	r1, r6
1000aae8:	0028      	movs	r0, r5
1000aaea:	47b8      	blx	r7
1000aaec:	2800      	cmp	r0, #0
1000aaee:	d1f1      	bne.n	1000aad4 <sms_i2c_master_write+0x28>
1000aaf0:	e001      	b.n	1000aaf6 <sms_i2c_master_write+0x4a>
        /* Increment timeout counter and check if timed out. */
        if (timeout++ >= I2C_TIMEOUT) {
            return -1;
1000aaf2:	2001      	movs	r0, #1
1000aaf4:	4240      	negs	r0, r0
        }
    }
    return 0;
}
1000aaf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000aaf8:	1001a11c 	.word	0x1001a11c
1000aafc:	000003e9 	.word	0x000003e9
1000ab00:	1001a108 	.word	0x1001a108
1000ab04:	1000844d 	.word	0x1000844d

1000ab08 <sms_i2c_master_read>:

int sms_i2c_master_read(uint8_t slave_addr, uint8_t reg_addr, uint8_t data_len, uint8_t *data)
{
1000ab08:	b5f0      	push	{r4, r5, r6, r7, lr}
1000ab0a:	4647      	mov	r7, r8
1000ab0c:	b480      	push	{r7}
1000ab0e:	0017      	movs	r7, r2
1000ab10:	4698      	mov	r8, r3
    //DBG_LOG("i2c reading from 0x%02x at 0x%02x... data: ", slave_addr, reg_addr);
    uint16_t timeout;
    i2c_wpacket.address = (uint8_t)slave_addr;
1000ab12:	b280      	uxth	r0, r0
1000ab14:	4b24      	ldr	r3, [pc, #144]	; (1000aba8 <sms_i2c_master_read+0xa0>)
1000ab16:	8018      	strh	r0, [r3, #0]
    i2c_wpacket.data_length = 1;
1000ab18:	2201      	movs	r2, #1
1000ab1a:	805a      	strh	r2, [r3, #2]
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
1000ab1c:	685b      	ldr	r3, [r3, #4]
1000ab1e:	7019      	strb	r1, [r3, #0]
    i2c_rpacket.address = (uint8_t)slave_addr;
1000ab20:	4b22      	ldr	r3, [pc, #136]	; (1000abac <sms_i2c_master_read+0xa4>)
1000ab22:	8018      	strh	r0, [r3, #0]
    i2c_rpacket.data_length = (uint8_t)data_len;
1000ab24:	805f      	strh	r7, [r3, #2]
    
    timeout = 0;
    while(i2c_master_write_packet_wait_no_stop(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) {
1000ab26:	2400      	movs	r4, #0
1000ab28:	4e1f      	ldr	r6, [pc, #124]	; (1000aba8 <sms_i2c_master_read+0xa0>)
1000ab2a:	4d21      	ldr	r5, [pc, #132]	; (1000abb0 <sms_i2c_master_read+0xa8>)
1000ab2c:	e00a      	b.n	1000ab44 <sms_i2c_master_read+0x3c>
		DBG_LOG_DEV("t/o %d", timeout);
1000ab2e:	4821      	ldr	r0, [pc, #132]	; (1000abb4 <sms_i2c_master_read+0xac>)
1000ab30:	4b21      	ldr	r3, [pc, #132]	; (1000abb8 <sms_i2c_master_read+0xb0>)
1000ab32:	4798      	blx	r3
1000ab34:	0021      	movs	r1, r4
1000ab36:	4821      	ldr	r0, [pc, #132]	; (1000abbc <sms_i2c_master_read+0xb4>)
1000ab38:	4b21      	ldr	r3, [pc, #132]	; (1000abc0 <sms_i2c_master_read+0xb8>)
1000ab3a:	4798      	blx	r3
1000ab3c:	3401      	adds	r4, #1
        if(timeout++ >= I2C_TIMEOUT) {
1000ab3e:	4b21      	ldr	r3, [pc, #132]	; (1000abc4 <sms_i2c_master_read+0xbc>)
1000ab40:	429c      	cmp	r4, r3
1000ab42:	d026      	beq.n	1000ab92 <sms_i2c_master_read+0x8a>
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
    i2c_rpacket.address = (uint8_t)slave_addr;
    i2c_rpacket.data_length = (uint8_t)data_len;
    
    timeout = 0;
    while(i2c_master_write_packet_wait_no_stop(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) {
1000ab44:	0031      	movs	r1, r6
1000ab46:	4820      	ldr	r0, [pc, #128]	; (1000abc8 <sms_i2c_master_read+0xc0>)
1000ab48:	47a8      	blx	r5
1000ab4a:	2800      	cmp	r0, #0
1000ab4c:	d1ef      	bne.n	1000ab2e <sms_i2c_master_read+0x26>
1000ab4e:	2400      	movs	r4, #0
            return -1;
        }
    }
    
    timeout = 0;
    while(i2c_master_read_packet_wait(&i2c_master_instance, &i2c_rpacket) != STATUS_OK) {
1000ab50:	4e16      	ldr	r6, [pc, #88]	; (1000abac <sms_i2c_master_read+0xa4>)
1000ab52:	4d1e      	ldr	r5, [pc, #120]	; (1000abcc <sms_i2c_master_read+0xc4>)
1000ab54:	e00a      	b.n	1000ab6c <sms_i2c_master_read+0x64>
		DBG_LOG_DEV("t/o %d", timeout);
1000ab56:	4817      	ldr	r0, [pc, #92]	; (1000abb4 <sms_i2c_master_read+0xac>)
1000ab58:	4b17      	ldr	r3, [pc, #92]	; (1000abb8 <sms_i2c_master_read+0xb0>)
1000ab5a:	4798      	blx	r3
1000ab5c:	0021      	movs	r1, r4
1000ab5e:	4817      	ldr	r0, [pc, #92]	; (1000abbc <sms_i2c_master_read+0xb4>)
1000ab60:	4b17      	ldr	r3, [pc, #92]	; (1000abc0 <sms_i2c_master_read+0xb8>)
1000ab62:	4798      	blx	r3
1000ab64:	3401      	adds	r4, #1
        if(timeout++ >= I2C_TIMEOUT) {
1000ab66:	4b17      	ldr	r3, [pc, #92]	; (1000abc4 <sms_i2c_master_read+0xbc>)
1000ab68:	429c      	cmp	r4, r3
1000ab6a:	d015      	beq.n	1000ab98 <sms_i2c_master_read+0x90>
            return -1;
        }
    }
    
    timeout = 0;
    while(i2c_master_read_packet_wait(&i2c_master_instance, &i2c_rpacket) != STATUS_OK) {
1000ab6c:	0031      	movs	r1, r6
1000ab6e:	4816      	ldr	r0, [pc, #88]	; (1000abc8 <sms_i2c_master_read+0xc0>)
1000ab70:	47a8      	blx	r5
1000ab72:	2800      	cmp	r0, #0
1000ab74:	d1ef      	bne.n	1000ab56 <sms_i2c_master_read+0x4e>
		DBG_LOG_DEV("t/o %d", timeout);
        if(timeout++ >= I2C_TIMEOUT) {
            return -1;
        }
    }
    for(uint8_t i = 0; i < data_len; i++) {
1000ab76:	2f00      	cmp	r7, #0
1000ab78:	d011      	beq.n	1000ab9e <sms_i2c_master_read+0x96>
1000ab7a:	2300      	movs	r3, #0
        data[i] = i2c_rpacket.data[i];
1000ab7c:	490b      	ldr	r1, [pc, #44]	; (1000abac <sms_i2c_master_read+0xa4>)
1000ab7e:	684a      	ldr	r2, [r1, #4]
1000ab80:	5cd2      	ldrb	r2, [r2, r3]
1000ab82:	4640      	mov	r0, r8
1000ab84:	54c2      	strb	r2, [r0, r3]
1000ab86:	3301      	adds	r3, #1
		DBG_LOG_DEV("t/o %d", timeout);
        if(timeout++ >= I2C_TIMEOUT) {
            return -1;
        }
    }
    for(uint8_t i = 0; i < data_len; i++) {
1000ab88:	b2da      	uxtb	r2, r3
1000ab8a:	4297      	cmp	r7, r2
1000ab8c:	d8f7      	bhi.n	1000ab7e <sms_i2c_master_read+0x76>
        data[i] = i2c_rpacket.data[i];
        //DBG_LOG("0x%02x ", data[i]);
    }
    return 0;
1000ab8e:	2000      	movs	r0, #0
1000ab90:	e006      	b.n	1000aba0 <sms_i2c_master_read+0x98>
    
    timeout = 0;
    while(i2c_master_write_packet_wait_no_stop(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) {
		DBG_LOG_DEV("t/o %d", timeout);
        if(timeout++ >= I2C_TIMEOUT) {
            return -1;
1000ab92:	2001      	movs	r0, #1
1000ab94:	4240      	negs	r0, r0
1000ab96:	e003      	b.n	1000aba0 <sms_i2c_master_read+0x98>
    
    timeout = 0;
    while(i2c_master_read_packet_wait(&i2c_master_instance, &i2c_rpacket) != STATUS_OK) {
		DBG_LOG_DEV("t/o %d", timeout);
        if(timeout++ >= I2C_TIMEOUT) {
            return -1;
1000ab98:	2001      	movs	r0, #1
1000ab9a:	4240      	negs	r0, r0
1000ab9c:	e000      	b.n	1000aba0 <sms_i2c_master_read+0x98>
    }
    for(uint8_t i = 0; i < data_len; i++) {
        data[i] = i2c_rpacket.data[i];
        //DBG_LOG("0x%02x ", data[i]);
    }
    return 0;
1000ab9e:	2000      	movs	r0, #0
1000aba0:	bc04      	pop	{r2}
1000aba2:	4690      	mov	r8, r2
1000aba4:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000aba6:	46c0      	nop			; (mov r8, r8)
1000aba8:	1001a11c 	.word	0x1001a11c
1000abac:	1001a0fc 	.word	0x1001a0fc
1000abb0:	10008471 	.word	0x10008471
1000abb4:	100165a4 	.word	0x100165a4
1000abb8:	100153f9 	.word	0x100153f9
1000abbc:	10016e58 	.word	0x10016e58
1000abc0:	100152d9 	.word	0x100152d9
1000abc4:	000003e9 	.word	0x000003e9
1000abc8:	1001a108 	.word	0x1001a108
1000abcc:	10008429 	.word	0x10008429

1000abd0 <sms_mpu_interrupt_callback>:
    gpio_unregister_callback(SMS_MPU_DRDY_PIN, GPIO_CALLBACK_RISING);
}

/* Callback --> send interrupt message to platform */
void sms_mpu_interrupt_callback(void)
{
1000abd0:	b510      	push	{r4, lr}
	sms_current_interrupt.int_on = true;
1000abd2:	4b06      	ldr	r3, [pc, #24]	; (1000abec <sms_mpu_interrupt_callback+0x1c>)
1000abd4:	2201      	movs	r2, #1
1000abd6:	705a      	strb	r2, [r3, #1]
	sms_current_interrupt.source = INT_MPU_DRDY;
1000abd8:	3202      	adds	r2, #2
1000abda:	701a      	strb	r2, [r3, #0]
    send_plf_int_msg_ind(SMS_MPU_DRDY_PIN, GPIO_CALLBACK_RISING, NULL, 0);
1000abdc:	2300      	movs	r3, #0
1000abde:	2200      	movs	r2, #0
1000abe0:	2102      	movs	r1, #2
1000abe2:	201e      	movs	r0, #30
1000abe4:	4c02      	ldr	r4, [pc, #8]	; (1000abf0 <sms_mpu_interrupt_callback+0x20>)
1000abe6:	47a0      	blx	r4
}
1000abe8:	bd10      	pop	{r4, pc}
1000abea:	46c0      	nop			; (mov r8, r8)
1000abec:	1001a0f8 	.word	0x1001a0f8
1000abf0:	1000f3c1 	.word	0x1000f3c1

1000abf4 <sms_mpu_configure_gpio>:
#include "sms_peripheral1.h"

//static struct hal_s hal = {0};
    
void sms_mpu_configure_gpio(void)
{
1000abf4:	b510      	push	{r4, lr}
1000abf6:	b082      	sub	sp, #8
    struct gpio_config config_gpio_pin;

    /* Data ready interrupt from IMU */
    gpio_get_config_defaults(&config_gpio_pin);
1000abf8:	ac01      	add	r4, sp, #4
1000abfa:	0020      	movs	r0, r4
1000abfc:	4b15      	ldr	r3, [pc, #84]	; (1000ac54 <sms_mpu_configure_gpio+0x60>)
1000abfe:	4798      	blx	r3
    config_gpio_pin.direction = GPIO_PIN_DIR_INPUT;
1000ac00:	2300      	movs	r3, #0
1000ac02:	7023      	strb	r3, [r4, #0]
    config_gpio_pin.input_pull = GPIO_PIN_PULL_DOWN;
1000ac04:	3302      	adds	r3, #2
1000ac06:	7063      	strb	r3, [r4, #1]
    config_gpio_pin.aon_wakeup = true;
1000ac08:	3b01      	subs	r3, #1
1000ac0a:	70e3      	strb	r3, [r4, #3]
    if(gpio_pin_set_config(SMS_MPU_DRDY_PIN, &config_gpio_pin) != STATUS_OK) {
1000ac0c:	0021      	movs	r1, r4
1000ac0e:	201e      	movs	r0, #30
1000ac10:	4b11      	ldr	r3, [pc, #68]	; (1000ac58 <sms_mpu_configure_gpio+0x64>)
1000ac12:	4798      	blx	r3
1000ac14:	2800      	cmp	r0, #0
1000ac16:	d005      	beq.n	1000ac24 <sms_mpu_configure_gpio+0x30>
        DBG_LOG("[sms_imu_configure_gpio]\tProblem while setting up IMU DRDY pin");
1000ac18:	4810      	ldr	r0, [pc, #64]	; (1000ac5c <sms_mpu_configure_gpio+0x68>)
1000ac1a:	4b11      	ldr	r3, [pc, #68]	; (1000ac60 <sms_mpu_configure_gpio+0x6c>)
1000ac1c:	4798      	blx	r3
1000ac1e:	4811      	ldr	r0, [pc, #68]	; (1000ac64 <sms_mpu_configure_gpio+0x70>)
1000ac20:	4b11      	ldr	r3, [pc, #68]	; (1000ac68 <sms_mpu_configure_gpio+0x74>)
1000ac22:	4798      	blx	r3
    }

    /* Pin output to supply IMU */
    gpio_get_config_defaults(&config_gpio_pin);
1000ac24:	ac01      	add	r4, sp, #4
1000ac26:	0020      	movs	r0, r4
1000ac28:	4b0a      	ldr	r3, [pc, #40]	; (1000ac54 <sms_mpu_configure_gpio+0x60>)
1000ac2a:	4798      	blx	r3
    config_gpio_pin.direction = GPIO_PIN_DIR_OUTPUT;
1000ac2c:	2301      	movs	r3, #1
1000ac2e:	7023      	strb	r3, [r4, #0]
    if(!gpio_pin_set_config(SMS_MPU_VCC_PIN, &config_gpio_pin) != STATUS_OK) {
1000ac30:	0021      	movs	r1, r4
1000ac32:	2006      	movs	r0, #6
1000ac34:	4b08      	ldr	r3, [pc, #32]	; (1000ac58 <sms_mpu_configure_gpio+0x64>)
1000ac36:	4798      	blx	r3
1000ac38:	2800      	cmp	r0, #0
1000ac3a:	d105      	bne.n	1000ac48 <sms_mpu_configure_gpio+0x54>
        DBG_LOG("[sms_imu_configure_gpio]\tProblem while setting up MPU VCC pin");
1000ac3c:	4807      	ldr	r0, [pc, #28]	; (1000ac5c <sms_mpu_configure_gpio+0x68>)
1000ac3e:	4b08      	ldr	r3, [pc, #32]	; (1000ac60 <sms_mpu_configure_gpio+0x6c>)
1000ac40:	4798      	blx	r3
1000ac42:	480a      	ldr	r0, [pc, #40]	; (1000ac6c <sms_mpu_configure_gpio+0x78>)
1000ac44:	4b08      	ldr	r3, [pc, #32]	; (1000ac68 <sms_mpu_configure_gpio+0x74>)
1000ac46:	4798      	blx	r3
    }
    gpio_pin_set_output_level(SMS_MPU_VCC_PIN, true);
1000ac48:	2101      	movs	r1, #1
1000ac4a:	2006      	movs	r0, #6
1000ac4c:	4b08      	ldr	r3, [pc, #32]	; (1000ac70 <sms_mpu_configure_gpio+0x7c>)
1000ac4e:	4798      	blx	r3
}
1000ac50:	b002      	add	sp, #8
1000ac52:	bd10      	pop	{r4, pc}
1000ac54:	1000c0fd 	.word	0x1000c0fd
1000ac58:	1000c10d 	.word	0x1000c10d
1000ac5c:	100165a4 	.word	0x100165a4
1000ac60:	100153f9 	.word	0x100153f9
1000ac64:	10016e60 	.word	0x10016e60
1000ac68:	100152d9 	.word	0x100152d9
1000ac6c:	10016ea0 	.word	0x10016ea0
1000ac70:	1000c365 	.word	0x1000c365

1000ac74 <sms_mpu_register_callbacks>:

/* Register GPIO interrupt callback */
void sms_mpu_register_callbacks(void)
{
1000ac74:	b510      	push	{r4, lr}
    /* MPU-9250 interrupt callback */
    gpio_register_callback(SMS_MPU_DRDY_PIN, sms_mpu_interrupt_callback, GPIO_CALLBACK_RISING);
1000ac76:	2202      	movs	r2, #2
1000ac78:	4902      	ldr	r1, [pc, #8]	; (1000ac84 <sms_mpu_register_callbacks+0x10>)
1000ac7a:	201e      	movs	r0, #30
1000ac7c:	4b02      	ldr	r3, [pc, #8]	; (1000ac88 <sms_mpu_register_callbacks+0x14>)
1000ac7e:	4798      	blx	r3
}
1000ac80:	bd10      	pop	{r4, pc}
1000ac82:	46c0      	nop			; (mov r8, r8)
1000ac84:	1000abd1 	.word	0x1000abd1
1000ac88:	1000c53d 	.word	0x1000c53d

1000ac8c <sms_mpu_initialize>:
	sms_current_interrupt.int_on = true;
	sms_current_interrupt.source = INT_MPU_DRDY;
    send_plf_int_msg_ind(SMS_MPU_DRDY_PIN, GPIO_CALLBACK_RISING, NULL, 0);
}

int sms_mpu_initialize(void) {
1000ac8c:	b570      	push	{r4, r5, r6, lr}
    int res;
    //unsigned char accel_fsr = 0;
    //unsigned short gyro_rate, gyro_fsr, compass_fsr;
    
    /* Initialize MPU-9250 without interrupt parameter since this has to be set independently */
    DBG_LOG_DEV("Initializing MPU...");
1000ac8e:	4825      	ldr	r0, [pc, #148]	; (1000ad24 <sms_mpu_initialize+0x98>)
1000ac90:	4b25      	ldr	r3, [pc, #148]	; (1000ad28 <sms_mpu_initialize+0x9c>)
1000ac92:	4798      	blx	r3
1000ac94:	4825      	ldr	r0, [pc, #148]	; (1000ad2c <sms_mpu_initialize+0xa0>)
1000ac96:	4b26      	ldr	r3, [pc, #152]	; (1000ad30 <sms_mpu_initialize+0xa4>)
1000ac98:	4798      	blx	r3
    res = mpu_init(NULL);
1000ac9a:	2000      	movs	r0, #0
1000ac9c:	4b25      	ldr	r3, [pc, #148]	; (1000ad34 <sms_mpu_initialize+0xa8>)
1000ac9e:	4798      	blx	r3
    if(res) {
1000aca0:	2800      	cmp	r0, #0
1000aca2:	d005      	beq.n	1000acb0 <sms_mpu_initialize+0x24>
        DBG_LOG_CONT_DEV(" failed!");
1000aca4:	4824      	ldr	r0, [pc, #144]	; (1000ad38 <sms_mpu_initialize+0xac>)
1000aca6:	4b22      	ldr	r3, [pc, #136]	; (1000ad30 <sms_mpu_initialize+0xa4>)
1000aca8:	4798      	blx	r3
        return -1;
1000acaa:	2001      	movs	r0, #1
1000acac:	4240      	negs	r0, r0
1000acae:	e037      	b.n	1000ad20 <sms_mpu_initialize+0x94>
    }
    DBG_LOG_DEV("Setting up MPU...");
1000acb0:	481c      	ldr	r0, [pc, #112]	; (1000ad24 <sms_mpu_initialize+0x98>)
1000acb2:	4b1d      	ldr	r3, [pc, #116]	; (1000ad28 <sms_mpu_initialize+0x9c>)
1000acb4:	4798      	blx	r3
1000acb6:	4821      	ldr	r0, [pc, #132]	; (1000ad3c <sms_mpu_initialize+0xb0>)
1000acb8:	4b1d      	ldr	r3, [pc, #116]	; (1000ad30 <sms_mpu_initialize+0xa4>)
1000acba:	4798      	blx	r3
    mpu_set_sensors(INV_XYZ_GYRO | INV_XYZ_ACCEL | INV_XYZ_COMPASS);
1000acbc:	2079      	movs	r0, #121	; 0x79
1000acbe:	4b20      	ldr	r3, [pc, #128]	; (1000ad40 <sms_mpu_initialize+0xb4>)
1000acc0:	4798      	blx	r3
    mpu_configure_fifo(INV_XYZ_GYRO | INV_XYZ_ACCEL);
1000acc2:	2078      	movs	r0, #120	; 0x78
1000acc4:	4b1f      	ldr	r3, [pc, #124]	; (1000ad44 <sms_mpu_initialize+0xb8>)
1000acc6:	4798      	blx	r3
    mpu_set_sample_rate(SMS_MPU_SAMPLE_RATE_HZ);
1000acc8:	200a      	movs	r0, #10
1000acca:	4b1f      	ldr	r3, [pc, #124]	; (1000ad48 <sms_mpu_initialize+0xbc>)
1000accc:	4798      	blx	r3
    mpu_set_compass_sample_rate(SMS_MPU_COMPASS_RATE_HZ);
1000acce:	200a      	movs	r0, #10
1000acd0:	4b1e      	ldr	r3, [pc, #120]	; (1000ad4c <sms_mpu_initialize+0xc0>)
1000acd2:	4798      	blx	r3
    mpu_get_sample_rate(&mpu_device.hal.sample_rate);
1000acd4:	4d1e      	ldr	r5, [pc, #120]	; (1000ad50 <sms_mpu_initialize+0xc4>)
1000acd6:	0028      	movs	r0, r5
1000acd8:	4b1e      	ldr	r3, [pc, #120]	; (1000ad54 <sms_mpu_initialize+0xc8>)
1000acda:	4798      	blx	r3
    mpu_get_accel_fsr(&mpu_device.hal.accel_fsr);
1000acdc:	1f68      	subs	r0, r5, #5
1000acde:	4b1e      	ldr	r3, [pc, #120]	; (1000ad58 <sms_mpu_initialize+0xcc>)
1000ace0:	4798      	blx	r3
    mpu_get_compass_fsr(&mpu_device.hal.compass_fsr);
1000ace2:	1ea8      	subs	r0, r5, #2
1000ace4:	4b1d      	ldr	r3, [pc, #116]	; (1000ad5c <sms_mpu_initialize+0xd0>)
1000ace6:	4798      	blx	r3
    
    mpu_device.hal.sensors = (SMS_MPU_ACCEL_ON | SMS_MPU_GYRO_ON | SMS_MPU_COMPASS_ON);
1000ace8:	002c      	movs	r4, r5
1000acea:	2307      	movs	r3, #7
1000acec:	76eb      	strb	r3, [r5, #27]
    mpu_device.hal.dmp_features = (DMP_FEATURE_GYRO_CAL | DMP_FEATURE_SEND_RAW_ACCEL | DMP_FEATURE_SEND_ANY_GYRO);
1000acee:	20f0      	movs	r0, #240	; 0xf0
1000acf0:	0040      	lsls	r0, r0, #1
1000acf2:	83e8      	strh	r0, [r5, #30]
    mpu_set_compass_sample_rate(SMS_MPU_COMPASS_RATE_HZ);
    mpu_get_sample_rate(&mpu_device.hal.sample_rate);
    mpu_get_accel_fsr(&mpu_device.hal.accel_fsr);
    mpu_get_compass_fsr(&mpu_device.hal.compass_fsr);
    
    mpu_device.hal.sensors = (SMS_MPU_ACCEL_ON | SMS_MPU_GYRO_ON | SMS_MPU_COMPASS_ON);
1000acf4:	3c0a      	subs	r4, #10
    mpu_device.hal.dmp_features = (DMP_FEATURE_GYRO_CAL | DMP_FEATURE_SEND_RAW_ACCEL | DMP_FEATURE_SEND_ANY_GYRO);
    dmp_enable_feature(mpu_device.hal.dmp_features);
1000acf6:	4b1a      	ldr	r3, [pc, #104]	; (1000ad60 <sms_mpu_initialize+0xd4>)
1000acf8:	4798      	blx	r3
    dmp_set_fifo_rate(SMS_MPU_SAMPLE_RATE_HZ);
1000acfa:	200a      	movs	r0, #10
1000acfc:	4b19      	ldr	r3, [pc, #100]	; (1000ad64 <sms_mpu_initialize+0xd8>)
1000acfe:	4798      	blx	r3
    mpu_set_dmp_state(1);
1000ad00:	2001      	movs	r0, #1
1000ad02:	4b19      	ldr	r3, [pc, #100]	; (1000ad68 <sms_mpu_initialize+0xdc>)
1000ad04:	4798      	blx	r3
    mpu_device.hal.dmp_on = 1;
1000ad06:	2201      	movs	r2, #1
1000ad08:	2326      	movs	r3, #38	; 0x26
1000ad0a:	54e2      	strb	r2, [r4, r3]
    mpu_device.temp_cnt = 0;
1000ad0c:	2300      	movs	r3, #0
1000ad0e:	322c      	adds	r2, #44	; 0x2c
1000ad10:	54a3      	strb	r3, [r4, r2]
    mpu_device.compass_cnt = 0;
1000ad12:	3a01      	subs	r2, #1
1000ad14:	54a3      	strb	r3, [r4, r2]
    mpu_device.new_compass = false;
1000ad16:	3202      	adds	r2, #2
1000ad18:	54a3      	strb	r3, [r4, r2]
    mpu_device.new_temp = false;
1000ad1a:	3201      	adds	r2, #1
1000ad1c:	54a3      	strb	r3, [r4, r2]
    
    return 0;
1000ad1e:	2000      	movs	r0, #0
}
1000ad20:	bd70      	pop	{r4, r5, r6, pc}
1000ad22:	46c0      	nop			; (mov r8, r8)
1000ad24:	100165a4 	.word	0x100165a4
1000ad28:	100153f9 	.word	0x100153f9
1000ad2c:	10016ee0 	.word	0x10016ee0
1000ad30:	100152d9 	.word	0x100152d9
1000ad34:	100092e5 	.word	0x100092e5
1000ad38:	10016ef4 	.word	0x10016ef4
1000ad3c:	10016f00 	.word	0x10016f00
1000ad40:	100090fd 	.word	0x100090fd
1000ad44:	10008ab9 	.word	0x10008ab9
1000ad48:	10009029 	.word	0x10009029
1000ad4c:	10008a41 	.word	0x10008a41
1000ad50:	10019f72 	.word	0x10019f72
1000ad54:	10008a25 	.word	0x10008a25
1000ad58:	10008889 	.word	0x10008889
1000ad5c:	100097ed 	.word	0x100097ed
1000ad60:	10009c5d 	.word	0x10009c5d
1000ad64:	100097fd 	.word	0x100097fd
1000ad68:	1000968d 	.word	0x1000968d

1000ad6c <sms_mpu_poll_data>:

/* Extract available IMU data */
int sms_mpu_poll_data(void)
{
1000ad6c:	b530      	push	{r4, r5, lr}
1000ad6e:	b085      	sub	sp, #20
    unsigned char sensors;
    unsigned char more;
    unsigned long sensor_timestamp;
    int res;
    
    mpu_device.hal.new_data = 0;
1000ad70:	4c20      	ldr	r4, [pc, #128]	; (1000adf4 <sms_mpu_poll_data+0x88>)
1000ad72:	2200      	movs	r2, #0
1000ad74:	2324      	movs	r3, #36	; 0x24
1000ad76:	54e2      	strb	r2, [r4, r3]
    
    mpu_read_fifo(mpu_device.hal.gyro, mpu_device.hal.accel, &sensor_timestamp, &sensors, &more);
1000ad78:	0021      	movs	r1, r4
1000ad7a:	3112      	adds	r1, #18
1000ad7c:	0020      	movs	r0, r4
1000ad7e:	300c      	adds	r0, #12
1000ad80:	3b16      	subs	r3, #22
1000ad82:	446b      	add	r3, sp
1000ad84:	9300      	str	r3, [sp, #0]
1000ad86:	230f      	movs	r3, #15
1000ad88:	446b      	add	r3, sp
1000ad8a:	aa02      	add	r2, sp, #8
1000ad8c:	4d1a      	ldr	r5, [pc, #104]	; (1000adf8 <sms_mpu_poll_data+0x8c>)
1000ad8e:	47a8      	blx	r5
    
    //if(more) {
        //mpu_device.hal.new_data = 1;
    //}
    
    if(mpu_device.temp_cnt++ > SMS_MPU_TEMP_MULTIPLIER) {
1000ad90:	232d      	movs	r3, #45	; 0x2d
1000ad92:	5ce3      	ldrb	r3, [r4, r3]
1000ad94:	2b01      	cmp	r3, #1
1000ad96:	d804      	bhi.n	1000ada2 <sms_mpu_poll_data+0x36>
1000ad98:	3301      	adds	r3, #1
1000ad9a:	222d      	movs	r2, #45	; 0x2d
1000ad9c:	4915      	ldr	r1, [pc, #84]	; (1000adf4 <sms_mpu_poll_data+0x88>)
1000ad9e:	548b      	strb	r3, [r1, r2]
1000ada0:	e00b      	b.n	1000adba <sms_mpu_poll_data+0x4e>
        mpu_device.temp_cnt = 0;
1000ada2:	4c14      	ldr	r4, [pc, #80]	; (1000adf4 <sms_mpu_poll_data+0x88>)
1000ada4:	2200      	movs	r2, #0
1000ada6:	232d      	movs	r3, #45	; 0x2d
1000ada8:	54e2      	strb	r2, [r4, r3]
        mpu_get_temperature(&mpu_device.hal.temperature, &sensor_timestamp);
1000adaa:	0020      	movs	r0, r4
1000adac:	3020      	adds	r0, #32
1000adae:	a902      	add	r1, sp, #8
1000adb0:	4b12      	ldr	r3, [pc, #72]	; (1000adfc <sms_mpu_poll_data+0x90>)
1000adb2:	4798      	blx	r3
        mpu_device.new_temp = true;
1000adb4:	2201      	movs	r2, #1
1000adb6:	232f      	movs	r3, #47	; 0x2f
1000adb8:	54e2      	strb	r2, [r4, r3]
    }
    
    if(mpu_device.compass_cnt++ > SMS_MPU_COMPASS_MULTIPLIER) {
1000adba:	232c      	movs	r3, #44	; 0x2c
1000adbc:	4a0d      	ldr	r2, [pc, #52]	; (1000adf4 <sms_mpu_poll_data+0x88>)
1000adbe:	5cd3      	ldrb	r3, [r2, r3]
1000adc0:	2b01      	cmp	r3, #1
1000adc2:	d804      	bhi.n	1000adce <sms_mpu_poll_data+0x62>
1000adc4:	3301      	adds	r3, #1
1000adc6:	222c      	movs	r2, #44	; 0x2c
1000adc8:	490a      	ldr	r1, [pc, #40]	; (1000adf4 <sms_mpu_poll_data+0x88>)
1000adca:	548b      	strb	r3, [r1, r2]
1000adcc:	e00b      	b.n	1000ade6 <sms_mpu_poll_data+0x7a>
        mpu_device.compass_cnt = 0;
1000adce:	4c09      	ldr	r4, [pc, #36]	; (1000adf4 <sms_mpu_poll_data+0x88>)
1000add0:	2200      	movs	r2, #0
1000add2:	232c      	movs	r3, #44	; 0x2c
1000add4:	54e2      	strb	r2, [r4, r3]
        mpu_get_compass_reg(mpu_device.hal.compass, &sensor_timestamp);
1000add6:	0020      	movs	r0, r4
1000add8:	3018      	adds	r0, #24
1000adda:	a902      	add	r1, sp, #8
1000addc:	4b08      	ldr	r3, [pc, #32]	; (1000ae00 <sms_mpu_poll_data+0x94>)
1000adde:	4798      	blx	r3
        mpu_device.new_compass = true;
1000ade0:	2201      	movs	r2, #1
1000ade2:	232e      	movs	r3, #46	; 0x2e
1000ade4:	54e2      	strb	r2, [r4, r3]
    }
	
	ready_to_send[RTS_MPU_POS] = true;
1000ade6:	2201      	movs	r2, #1
1000ade8:	4b06      	ldr	r3, [pc, #24]	; (1000ae04 <sms_mpu_poll_data+0x98>)
1000adea:	709a      	strb	r2, [r3, #2]
    //sms_ble_send_characteristic(BLE_CHAR_MPU);    

    return 0;
}
1000adec:	2000      	movs	r0, #0
1000adee:	b005      	add	sp, #20
1000adf0:	bd30      	pop	{r4, r5, pc}
1000adf2:	46c0      	nop			; (mov r8, r8)
1000adf4:	10019f68 	.word	0x10019f68
1000adf8:	10008b25 	.word	0x10008b25
1000adfc:	10008539 	.word	0x10008539
1000ae00:	10009731 	.word	0x10009731
1000ae04:	1001a114 	.word	0x1001a114

1000ae08 <sms_mpu_define_services>:

void sms_mpu_define_services(void)
{
1000ae08:	b510      	push	{r4, lr}
1000ae0a:	b082      	sub	sp, #8
    at_ble_status_t status;
    uint8_t init_value = 0;
1000ae0c:	466b      	mov	r3, sp
1000ae0e:	1dda      	adds	r2, r3, #7
1000ae10:	2300      	movs	r3, #0
1000ae12:	7013      	strb	r3, [r2, #0]
    sms_ble_service_init(BLE_SERV_MPU, &mpu_device.service_handler, &init_value);
1000ae14:	4c0e      	ldr	r4, [pc, #56]	; (1000ae50 <sms_mpu_define_services+0x48>)
1000ae16:	0021      	movs	r1, r4
1000ae18:	2002      	movs	r0, #2
1000ae1a:	4b0e      	ldr	r3, [pc, #56]	; (1000ae54 <sms_mpu_define_services+0x4c>)
1000ae1c:	4798      	blx	r3
    if((status = sms_ble_primary_service_define(&mpu_device.service_handler)) != AT_BLE_SUCCESS) {
1000ae1e:	0020      	movs	r0, r4
1000ae20:	4b0d      	ldr	r3, [pc, #52]	; (1000ae58 <sms_mpu_define_services+0x50>)
1000ae22:	4798      	blx	r3
1000ae24:	1e04      	subs	r4, r0, #0
1000ae26:	d007      	beq.n	1000ae38 <sms_mpu_define_services+0x30>
        DBG_LOG("[sms_mpu_define_services]\tServices defining failed, reason 0x%x", status);
1000ae28:	480c      	ldr	r0, [pc, #48]	; (1000ae5c <sms_mpu_define_services+0x54>)
1000ae2a:	4b0d      	ldr	r3, [pc, #52]	; (1000ae60 <sms_mpu_define_services+0x58>)
1000ae2c:	4798      	blx	r3
1000ae2e:	0021      	movs	r1, r4
1000ae30:	480c      	ldr	r0, [pc, #48]	; (1000ae64 <sms_mpu_define_services+0x5c>)
1000ae32:	4b0d      	ldr	r3, [pc, #52]	; (1000ae68 <sms_mpu_define_services+0x60>)
1000ae34:	4798      	blx	r3
1000ae36:	e008      	b.n	1000ae4a <sms_mpu_define_services+0x42>
    }
    else {
        DBG_LOG_DEV("[sms_mpu_define_services]\tServices defined, SMS MPU handle: %d", mpu_device.service_handler.serv_handle);
1000ae38:	4808      	ldr	r0, [pc, #32]	; (1000ae5c <sms_mpu_define_services+0x54>)
1000ae3a:	4b09      	ldr	r3, [pc, #36]	; (1000ae60 <sms_mpu_define_services+0x58>)
1000ae3c:	4798      	blx	r3
1000ae3e:	2346      	movs	r3, #70	; 0x46
1000ae40:	4a0a      	ldr	r2, [pc, #40]	; (1000ae6c <sms_mpu_define_services+0x64>)
1000ae42:	5ad1      	ldrh	r1, [r2, r3]
1000ae44:	480a      	ldr	r0, [pc, #40]	; (1000ae70 <sms_mpu_define_services+0x68>)
1000ae46:	4b08      	ldr	r3, [pc, #32]	; (1000ae68 <sms_mpu_define_services+0x60>)
1000ae48:	4798      	blx	r3
    }
1000ae4a:	b002      	add	sp, #8
1000ae4c:	bd10      	pop	{r4, pc}
1000ae4e:	46c0      	nop			; (mov r8, r8)
1000ae50:	10019f9c 	.word	0x10019f9c
1000ae54:	1000a42d 	.word	0x1000a42d
1000ae58:	1000a409 	.word	0x1000a409
1000ae5c:	100165a4 	.word	0x100165a4
1000ae60:	100153f9 	.word	0x100153f9
1000ae64:	10016f14 	.word	0x10016f14
1000ae68:	100152d9 	.word	0x100152d9
1000ae6c:	10019f68 	.word	0x10019f68
1000ae70:	10016f54 	.word	0x10016f54

1000ae74 <sms_led_switch_on>:
    sms_led_switch_off(SMS_LED_0_PIN);
}


void sms_led_switch_on(enum sms_leds led)
{
1000ae74:	b510      	push	{r4, lr}
    gpio_pin_set_output_level(led, SMS_LED_ACTIVE);
1000ae76:	2100      	movs	r1, #0
1000ae78:	4b01      	ldr	r3, [pc, #4]	; (1000ae80 <sms_led_switch_on+0xc>)
1000ae7a:	4798      	blx	r3
}
1000ae7c:	bd10      	pop	{r4, pc}
1000ae7e:	46c0      	nop			; (mov r8, r8)
1000ae80:	1000c365 	.word	0x1000c365

1000ae84 <sms_led_switch_off>:


void sms_led_switch_off(enum sms_leds led)
{
1000ae84:	b510      	push	{r4, lr}
    gpio_pin_set_output_level(led, SMS_LED_INACTIVE);
1000ae86:	2101      	movs	r1, #1
1000ae88:	4b01      	ldr	r3, [pc, #4]	; (1000ae90 <sms_led_switch_off+0xc>)
1000ae8a:	4798      	blx	r3
}
1000ae8c:	bd10      	pop	{r4, pc}
1000ae8e:	46c0      	nop			; (mov r8, r8)
1000ae90:	1000c365 	.word	0x1000c365

1000ae94 <sms_led_gpio_init>:
 */ 

#include "sms_led.h"

void sms_led_gpio_init(void)
{
1000ae94:	b510      	push	{r4, lr}
1000ae96:	b082      	sub	sp, #8
    struct gpio_config config_gpio_pin;

    /* LED0 @ GPIO_LP_GPIO_22 */
    gpio_get_config_defaults(&config_gpio_pin);
1000ae98:	ac01      	add	r4, sp, #4
1000ae9a:	0020      	movs	r0, r4
1000ae9c:	4b0a      	ldr	r3, [pc, #40]	; (1000aec8 <sms_led_gpio_init+0x34>)
1000ae9e:	4798      	blx	r3
    config_gpio_pin.direction = GPIO_PIN_DIR_OUTPUT;
1000aea0:	2301      	movs	r3, #1
1000aea2:	7023      	strb	r3, [r4, #0]
    if(gpio_pin_set_config(SMS_LED_0_PIN, &config_gpio_pin) != STATUS_OK) {
1000aea4:	0021      	movs	r1, r4
1000aea6:	2016      	movs	r0, #22
1000aea8:	4b08      	ldr	r3, [pc, #32]	; (1000aecc <sms_led_gpio_init+0x38>)
1000aeaa:	4798      	blx	r3
1000aeac:	2800      	cmp	r0, #0
1000aeae:	d005      	beq.n	1000aebc <sms_led_gpio_init+0x28>
        DBG_LOG_DEV("[sms_led_gpio_init]\tproblem while setting up led0");
1000aeb0:	4807      	ldr	r0, [pc, #28]	; (1000aed0 <sms_led_gpio_init+0x3c>)
1000aeb2:	4b08      	ldr	r3, [pc, #32]	; (1000aed4 <sms_led_gpio_init+0x40>)
1000aeb4:	4798      	blx	r3
1000aeb6:	4808      	ldr	r0, [pc, #32]	; (1000aed8 <sms_led_gpio_init+0x44>)
1000aeb8:	4b08      	ldr	r3, [pc, #32]	; (1000aedc <sms_led_gpio_init+0x48>)
1000aeba:	4798      	blx	r3
    }
    sms_led_switch_off(SMS_LED_0_PIN);
1000aebc:	2016      	movs	r0, #22
1000aebe:	4b08      	ldr	r3, [pc, #32]	; (1000aee0 <sms_led_gpio_init+0x4c>)
1000aec0:	4798      	blx	r3
}
1000aec2:	b002      	add	sp, #8
1000aec4:	bd10      	pop	{r4, pc}
1000aec6:	46c0      	nop			; (mov r8, r8)
1000aec8:	1000c0fd 	.word	0x1000c0fd
1000aecc:	1000c10d 	.word	0x1000c10d
1000aed0:	100165a4 	.word	0x100165a4
1000aed4:	100153f9 	.word	0x100153f9
1000aed8:	10016f94 	.word	0x10016f94
1000aedc:	100152d9 	.word	0x100152d9
1000aee0:	1000ae85 	.word	0x1000ae85

1000aee4 <sms_led_toggle>:
    gpio_pin_set_output_level(led, SMS_LED_INACTIVE);
}


void sms_led_toggle(enum sms_leds led)
{
1000aee4:	b510      	push	{r4, lr}
1000aee6:	0004      	movs	r4, r0
}


bool sms_led_get_state(enum sms_leds led)
{
    return gpio_pin_get_output_level(led);
1000aee8:	4b05      	ldr	r3, [pc, #20]	; (1000af00 <sms_led_toggle+0x1c>)
1000aeea:	4798      	blx	r3


void sms_led_toggle(enum sms_leds led)
{
    bool state = sms_led_get_state(led);
    if(state == SMS_LED_ACTIVE) sms_led_switch_off(led);
1000aeec:	2800      	cmp	r0, #0
1000aeee:	d103      	bne.n	1000aef8 <sms_led_toggle+0x14>
1000aef0:	0020      	movs	r0, r4
1000aef2:	4b04      	ldr	r3, [pc, #16]	; (1000af04 <sms_led_toggle+0x20>)
1000aef4:	4798      	blx	r3
1000aef6:	e002      	b.n	1000aefe <sms_led_toggle+0x1a>
    else sms_led_switch_on(led);
1000aef8:	0020      	movs	r0, r4
1000aefa:	4b03      	ldr	r3, [pc, #12]	; (1000af08 <sms_led_toggle+0x24>)
1000aefc:	4798      	blx	r3
}
1000aefe:	bd10      	pop	{r4, pc}
1000af00:	1000c315 	.word	0x1000c315
1000af04:	1000ae85 	.word	0x1000ae85
1000af08:	1000ae75 	.word	0x1000ae75

1000af0c <sms_led_blink_start>:
    return gpio_pin_get_output_level(led);
}


void sms_led_blink_start(enum sms_leds led)
{
1000af0c:	b510      	push	{r4, lr}
    sms_led_switch_on(led);
1000af0e:	4b0c      	ldr	r3, [pc, #48]	; (1000af40 <sms_led_blink_start+0x34>)
1000af10:	4798      	blx	r3
    sms_led_blink_cnt = 0;
1000af12:	2200      	movs	r2, #0
1000af14:	4b0b      	ldr	r3, [pc, #44]	; (1000af44 <sms_led_blink_start+0x38>)
1000af16:	701a      	strb	r2, [r3, #0]
    uint32_t delay = 0;
    switch(timer2_current_mode) {
1000af18:	4b0b      	ldr	r3, [pc, #44]	; (1000af48 <sms_led_blink_start+0x3c>)
1000af1a:	781b      	ldrb	r3, [r3, #0]
1000af1c:	b2db      	uxtb	r3, r3
1000af1e:	2b02      	cmp	r3, #2
1000af20:	d002      	beq.n	1000af28 <sms_led_blink_start+0x1c>
1000af22:	2b03      	cmp	r3, #3
1000af24:	d002      	beq.n	1000af2c <sms_led_blink_start+0x20>
1000af26:	e004      	b.n	1000af32 <sms_led_blink_start+0x26>
        case TIMER2_MODE_LED_STARTUP:
        delay = SMS_BLINK_STARTUP_MS;
1000af28:	2164      	movs	r1, #100	; 0x64
1000af2a:	e003      	b.n	1000af34 <sms_led_blink_start+0x28>
        break;
        
        case TIMER2_MODE_LED_SHUTDOWN:
        delay = SMS_BLINK_SHTDWN_MS;
1000af2c:	21c8      	movs	r1, #200	; 0xc8
1000af2e:	0049      	lsls	r1, r1, #1
        break;
1000af30:	e000      	b.n	1000af34 <sms_led_blink_start+0x28>

void sms_led_blink_start(enum sms_leds led)
{
    sms_led_switch_on(led);
    sms_led_blink_cnt = 0;
    uint32_t delay = 0;
1000af32:	2100      	movs	r1, #0
        
        default:
        break;
    }

    sms_dualtimer_start(TIMER_UNIT_MS, delay, DUALTIMER_TIMER2);
1000af34:	2201      	movs	r2, #1
1000af36:	2001      	movs	r0, #1
1000af38:	4b04      	ldr	r3, [pc, #16]	; (1000af4c <sms_led_blink_start+0x40>)
1000af3a:	4798      	blx	r3
}
1000af3c:	bd10      	pop	{r4, pc}
1000af3e:	46c0      	nop			; (mov r8, r8)
1000af40:	1000ae75 	.word	0x1000ae75
1000af44:	1001a138 	.word	0x1001a138
1000af48:	1001a111 	.word	0x1001a111
1000af4c:	1000b645 	.word	0x1000b645

1000af50 <sms_pressure_ms58_reset>:
    }
    return STATUS_ERR_IO;
}

void sms_pressure_ms58_reset(void)
{
1000af50:	b510      	push	{r4, lr}
1000af52:	b082      	sub	sp, #8
    //DBG_LOG_DEV("[sms_pressure_ms58_reset]\twriting reset command");
    spi_wdata[0] = MS58_RESET;
1000af54:	4a05      	ldr	r2, [pc, #20]	; (1000af6c <sms_pressure_ms58_reset+0x1c>)
1000af56:	231e      	movs	r3, #30
1000af58:	7013      	strb	r3, [r2, #0]
    sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 1);
1000af5a:	3b1d      	subs	r3, #29
1000af5c:	9300      	str	r3, [sp, #0]
1000af5e:	4b04      	ldr	r3, [pc, #16]	; (1000af70 <sms_pressure_ms58_reset+0x20>)
1000af60:	4904      	ldr	r1, [pc, #16]	; (1000af74 <sms_pressure_ms58_reset+0x24>)
1000af62:	4805      	ldr	r0, [pc, #20]	; (1000af78 <sms_pressure_ms58_reset+0x28>)
1000af64:	4c05      	ldr	r4, [pc, #20]	; (1000af7c <sms_pressure_ms58_reset+0x2c>)
1000af66:	47a0      	blx	r4
}
1000af68:	b002      	add	sp, #8
1000af6a:	bd10      	pop	{r4, pc}
1000af6c:	1001a064 	.word	0x1001a064
1000af70:	1001a054 	.word	0x1001a054
1000af74:	1001a118 	.word	0x1001a118
1000af78:	1001a124 	.word	0x1001a124
1000af7c:	1000b51d 	.word	0x1000b51d

1000af80 <sms_pressure_ms58_read_prom>:

enum status_code sms_pressure_ms58_read_prom(void)
{
1000af80:	b5f0      	push	{r4, r5, r6, r7, lr}
1000af82:	4657      	mov	r7, sl
1000af84:	b480      	push	{r7}
1000af86:	b082      	sub	sp, #8
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] reading bytes... ");
    spi_wdata[0] = MS58_PROM_READ_1;
1000af88:	4d37      	ldr	r5, [pc, #220]	; (1000b068 <sms_pressure_ms58_read_prom+0xe8>)
1000af8a:	23a2      	movs	r3, #162	; 0xa2
1000af8c:	702b      	strb	r3, [r5, #0]
    spi_wdata[1] = 0x00;
1000af8e:	2300      	movs	r3, #0
1000af90:	706b      	strb	r3, [r5, #1]
    spi_wdata[2] = 0x00;
1000af92:	70ab      	strb	r3, [r5, #2]
    sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3);
1000af94:	4c35      	ldr	r4, [pc, #212]	; (1000b06c <sms_pressure_ms58_read_prom+0xec>)
1000af96:	3303      	adds	r3, #3
1000af98:	469a      	mov	sl, r3
1000af9a:	9300      	str	r3, [sp, #0]
1000af9c:	0023      	movs	r3, r4
1000af9e:	002a      	movs	r2, r5
1000afa0:	4933      	ldr	r1, [pc, #204]	; (1000b070 <sms_pressure_ms58_read_prom+0xf0>)
1000afa2:	4834      	ldr	r0, [pc, #208]	; (1000b074 <sms_pressure_ms58_read_prom+0xf4>)
1000afa4:	4f34      	ldr	r7, [pc, #208]	; (1000b078 <sms_pressure_ms58_read_prom+0xf8>)
1000afa6:	47b8      	blx	r7
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.hal.prom_values[1] = (spi_rdata[1] << 8) | (spi_rdata[2]);
1000afa8:	4e34      	ldr	r6, [pc, #208]	; (1000b07c <sms_pressure_ms58_read_prom+0xfc>)
1000afaa:	7863      	ldrb	r3, [r4, #1]
1000afac:	021b      	lsls	r3, r3, #8
1000afae:	78a2      	ldrb	r2, [r4, #2]
1000afb0:	4313      	orrs	r3, r2
1000afb2:	80f3      	strh	r3, [r6, #6]

    spi_wdata[0] = MS58_PROM_READ_2;
1000afb4:	23a4      	movs	r3, #164	; 0xa4
1000afb6:	702b      	strb	r3, [r5, #0]
    sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3);
1000afb8:	4653      	mov	r3, sl
1000afba:	9300      	str	r3, [sp, #0]
1000afbc:	0023      	movs	r3, r4
1000afbe:	002a      	movs	r2, r5
1000afc0:	492b      	ldr	r1, [pc, #172]	; (1000b070 <sms_pressure_ms58_read_prom+0xf0>)
1000afc2:	482c      	ldr	r0, [pc, #176]	; (1000b074 <sms_pressure_ms58_read_prom+0xf4>)
1000afc4:	47b8      	blx	r7
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r  wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r  wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.hal.prom_values[2] = (spi_rdata[1] << 8) | (spi_rdata[2]);
1000afc6:	7863      	ldrb	r3, [r4, #1]
1000afc8:	021b      	lsls	r3, r3, #8
1000afca:	78a2      	ldrb	r2, [r4, #2]
1000afcc:	4313      	orrs	r3, r2
1000afce:	8133      	strh	r3, [r6, #8]

    spi_wdata[0] = MS58_PROM_READ_3;
1000afd0:	23a6      	movs	r3, #166	; 0xa6
1000afd2:	702b      	strb	r3, [r5, #0]
    sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3);
1000afd4:	4653      	mov	r3, sl
1000afd6:	9300      	str	r3, [sp, #0]
1000afd8:	0023      	movs	r3, r4
1000afda:	002a      	movs	r2, r5
1000afdc:	4924      	ldr	r1, [pc, #144]	; (1000b070 <sms_pressure_ms58_read_prom+0xf0>)
1000afde:	4825      	ldr	r0, [pc, #148]	; (1000b074 <sms_pressure_ms58_read_prom+0xf4>)
1000afe0:	47b8      	blx	r7
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r  wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r  wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.hal.prom_values[3] = (spi_rdata[1] << 8) | (spi_rdata[2]);
1000afe2:	7863      	ldrb	r3, [r4, #1]
1000afe4:	021b      	lsls	r3, r3, #8
1000afe6:	78a2      	ldrb	r2, [r4, #2]
1000afe8:	4313      	orrs	r3, r2
1000afea:	8173      	strh	r3, [r6, #10]

    spi_wdata[0] = MS58_PROM_READ_4;
1000afec:	23a8      	movs	r3, #168	; 0xa8
1000afee:	702b      	strb	r3, [r5, #0]
    sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3);
1000aff0:	4653      	mov	r3, sl
1000aff2:	9300      	str	r3, [sp, #0]
1000aff4:	0023      	movs	r3, r4
1000aff6:	002a      	movs	r2, r5
1000aff8:	491d      	ldr	r1, [pc, #116]	; (1000b070 <sms_pressure_ms58_read_prom+0xf0>)
1000affa:	481e      	ldr	r0, [pc, #120]	; (1000b074 <sms_pressure_ms58_read_prom+0xf4>)
1000affc:	47b8      	blx	r7
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r  wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r  wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.hal.prom_values[4] = (spi_rdata[1] << 8) | (spi_rdata[2]);
1000affe:	7863      	ldrb	r3, [r4, #1]
1000b000:	021b      	lsls	r3, r3, #8
1000b002:	78a2      	ldrb	r2, [r4, #2]
1000b004:	4313      	orrs	r3, r2
1000b006:	81b3      	strh	r3, [r6, #12]

    spi_wdata[0] = MS58_PROM_READ_5;
1000b008:	23aa      	movs	r3, #170	; 0xaa
1000b00a:	702b      	strb	r3, [r5, #0]
    sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3);
1000b00c:	4653      	mov	r3, sl
1000b00e:	9300      	str	r3, [sp, #0]
1000b010:	0023      	movs	r3, r4
1000b012:	002a      	movs	r2, r5
1000b014:	4916      	ldr	r1, [pc, #88]	; (1000b070 <sms_pressure_ms58_read_prom+0xf0>)
1000b016:	4817      	ldr	r0, [pc, #92]	; (1000b074 <sms_pressure_ms58_read_prom+0xf4>)
1000b018:	47b8      	blx	r7
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r  wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r  wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.hal.prom_values[5] = (spi_rdata[1] << 8) | (spi_rdata[2]);
1000b01a:	7863      	ldrb	r3, [r4, #1]
1000b01c:	021b      	lsls	r3, r3, #8
1000b01e:	78a2      	ldrb	r2, [r4, #2]
1000b020:	4313      	orrs	r3, r2
1000b022:	81f3      	strh	r3, [r6, #14]

    spi_wdata[0] = MS58_PROM_READ_6;
1000b024:	23ac      	movs	r3, #172	; 0xac
1000b026:	702b      	strb	r3, [r5, #0]
    sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3);
1000b028:	4653      	mov	r3, sl
1000b02a:	9300      	str	r3, [sp, #0]
1000b02c:	0023      	movs	r3, r4
1000b02e:	002a      	movs	r2, r5
1000b030:	490f      	ldr	r1, [pc, #60]	; (1000b070 <sms_pressure_ms58_read_prom+0xf0>)
1000b032:	4810      	ldr	r0, [pc, #64]	; (1000b074 <sms_pressure_ms58_read_prom+0xf4>)
1000b034:	47b8      	blx	r7
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r  wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r  wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.hal.prom_values[6] = (spi_rdata[1] << 8) | (spi_rdata[2]);
1000b036:	7863      	ldrb	r3, [r4, #1]
1000b038:	021b      	lsls	r3, r3, #8
1000b03a:	78a2      	ldrb	r2, [r4, #2]
1000b03c:	4313      	orrs	r3, r2
1000b03e:	8233      	strh	r3, [r6, #16]

    spi_wdata[0] = MS58_PROM_READ_7;
1000b040:	23ae      	movs	r3, #174	; 0xae
1000b042:	702b      	strb	r3, [r5, #0]
    sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3);
1000b044:	4653      	mov	r3, sl
1000b046:	9300      	str	r3, [sp, #0]
1000b048:	0023      	movs	r3, r4
1000b04a:	002a      	movs	r2, r5
1000b04c:	4908      	ldr	r1, [pc, #32]	; (1000b070 <sms_pressure_ms58_read_prom+0xf0>)
1000b04e:	4809      	ldr	r0, [pc, #36]	; (1000b074 <sms_pressure_ms58_read_prom+0xf4>)
1000b050:	47b8      	blx	r7
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r  wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r  wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.hal.prom_values[7] = (spi_rdata[1] << 8) | (spi_rdata[2]);
1000b052:	7863      	ldrb	r3, [r4, #1]
1000b054:	021b      	lsls	r3, r3, #8
1000b056:	78a2      	ldrb	r2, [r4, #2]
1000b058:	4313      	orrs	r3, r2
1000b05a:	8273      	strh	r3, [r6, #18]
    //for(uint8_t i = 1; i < MS58_PROM_VALUES_MAX; i++) {
        //DBG_LOG_DEV("  C%d -> %d", (i+1), ms58_device.prom_values[i]);
    //}

    return STATUS_OK;
}
1000b05c:	2000      	movs	r0, #0
1000b05e:	b002      	add	sp, #8
1000b060:	bc04      	pop	{r2}
1000b062:	4692      	mov	sl, r2
1000b064:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000b066:	46c0      	nop			; (mov r8, r8)
1000b068:	1001a064 	.word	0x1001a064
1000b06c:	1001a054 	.word	0x1001a054
1000b070:	1001a118 	.word	0x1001a118
1000b074:	1001a124 	.word	0x1001a124
1000b078:	1000b51d 	.word	0x1000b51d
1000b07c:	1001a074 	.word	0x1001a074

1000b080 <sms_pressure_init>:
    
    ulp_ready = true;
}

enum status_code sms_pressure_init(void)
{
1000b080:	b510      	push	{r4, lr}
    /* Read the PROM values */
    if(sms_pressure_ms58_read_prom() == STATUS_OK) {
1000b082:	4b06      	ldr	r3, [pc, #24]	; (1000b09c <sms_pressure_init+0x1c>)
1000b084:	4798      	blx	r3
1000b086:	2800      	cmp	r0, #0
1000b088:	d106      	bne.n	1000b098 <sms_pressure_init+0x18>
        pressure_device.hal.init_ok = true;
1000b08a:	4b05      	ldr	r3, [pc, #20]	; (1000b0a0 <sms_pressure_init+0x20>)
1000b08c:	2201      	movs	r2, #1
1000b08e:	705a      	strb	r2, [r3, #1]
        pressure_device.hal.current_state = MS58_STATE_READY;
1000b090:	2102      	movs	r1, #2
1000b092:	3224      	adds	r2, #36	; 0x24
1000b094:	5499      	strb	r1, [r3, r2]
        /* Enable buttons again */
        //sms_button_toggle_interrupts(SMS_EXTINT_ENABLE);
        return STATUS_OK;
1000b096:	e000      	b.n	1000b09a <sms_pressure_init+0x1a>
    }
    return STATUS_ERR_IO;
1000b098:	2010      	movs	r0, #16
}
1000b09a:	bd10      	pop	{r4, pc}
1000b09c:	1000af81 	.word	0x1000af81
1000b0a0:	1001a074 	.word	0x1001a074

1000b0a4 <sms_pressure_startup>:
    gpio_pin_set_output_level(SMS_PRESSURE_VCC_PIN, false);
}


void sms_pressure_startup(void)
{
1000b0a4:	b510      	push	{r4, lr}
    DBG_LOG_DEV("[sms_pressure_startup]\t\tStarting pressure sensor");
1000b0a6:	4817      	ldr	r0, [pc, #92]	; (1000b104 <sms_pressure_startup+0x60>)
1000b0a8:	4b17      	ldr	r3, [pc, #92]	; (1000b108 <sms_pressure_startup+0x64>)
1000b0aa:	4798      	blx	r3
1000b0ac:	4817      	ldr	r0, [pc, #92]	; (1000b10c <sms_pressure_startup+0x68>)
1000b0ae:	4b18      	ldr	r3, [pc, #96]	; (1000b110 <sms_pressure_startup+0x6c>)
1000b0b0:	4798      	blx	r3
    //gpio_pin_set_output_level(SMS_PRESSURE_VCC_PIN, true); // switch on MS58 pressure sensor
    /* Disable buttons for reset time (~3 ms) to avoid conflict with dualtimer1 */
    sms_button_toggle_interrupt(SMS_BTN_INT_DISABLE, SMS_BTN_INT_DISABLE);
1000b0b2:	2101      	movs	r1, #1
1000b0b4:	2001      	movs	r0, #1
1000b0b6:	4b17      	ldr	r3, [pc, #92]	; (1000b114 <sms_pressure_startup+0x70>)
1000b0b8:	4798      	blx	r3
    pressure_device.hal.current_state = MS58_STATE_RESETTING;
1000b0ba:	2101      	movs	r1, #1
1000b0bc:	2325      	movs	r3, #37	; 0x25
1000b0be:	4a16      	ldr	r2, [pc, #88]	; (1000b118 <sms_pressure_startup+0x74>)
1000b0c0:	54d1      	strb	r1, [r2, r3]
    /* Write the reset command to MS58 */
    sms_pressure_ms58_reset();
1000b0c2:	4b16      	ldr	r3, [pc, #88]	; (1000b11c <sms_pressure_startup+0x78>)
1000b0c4:	4798      	blx	r3
    delay_ms(3);
1000b0c6:	2003      	movs	r0, #3
1000b0c8:	4b15      	ldr	r3, [pc, #84]	; (1000b120 <sms_pressure_startup+0x7c>)
1000b0ca:	4798      	blx	r3
    if(sms_pressure_init() != STATUS_OK) {
1000b0cc:	4b15      	ldr	r3, [pc, #84]	; (1000b124 <sms_pressure_startup+0x80>)
1000b0ce:	4798      	blx	r3
1000b0d0:	2800      	cmp	r0, #0
1000b0d2:	d006      	beq.n	1000b0e2 <sms_pressure_startup+0x3e>
        DBG_LOG_DEV("[sms_pressure_startup]\t\t\tFailed to initialize pressure device");
1000b0d4:	480b      	ldr	r0, [pc, #44]	; (1000b104 <sms_pressure_startup+0x60>)
1000b0d6:	4b0c      	ldr	r3, [pc, #48]	; (1000b108 <sms_pressure_startup+0x64>)
1000b0d8:	4798      	blx	r3
1000b0da:	4813      	ldr	r0, [pc, #76]	; (1000b128 <sms_pressure_startup+0x84>)
1000b0dc:	4b0c      	ldr	r3, [pc, #48]	; (1000b110 <sms_pressure_startup+0x6c>)
1000b0de:	4798      	blx	r3
1000b0e0:	e7fe      	b.n	1000b0e0 <sms_pressure_startup+0x3c>
        pressure_device.hal.init_ok = false;
        while(1){};
    }
    pressure_device.hal.current_state = MS58_STATE_READY;
1000b0e2:	4b0d      	ldr	r3, [pc, #52]	; (1000b118 <sms_pressure_startup+0x74>)
1000b0e4:	2102      	movs	r1, #2
1000b0e6:	2225      	movs	r2, #37	; 0x25
1000b0e8:	5499      	strb	r1, [r3, r2]
    pressure_device.hal.init_ok = true;
1000b0ea:	2401      	movs	r4, #1
1000b0ec:	705c      	strb	r4, [r3, #1]
    sms_working_mode = SMS_MODE_COMPLETE;
1000b0ee:	3a1e      	subs	r2, #30
1000b0f0:	4b0e      	ldr	r3, [pc, #56]	; (1000b12c <sms_pressure_startup+0x88>)
1000b0f2:	701a      	strb	r2, [r3, #0]
    sms_sensors_interrupt_toggle(true, true);
1000b0f4:	3901      	subs	r1, #1
1000b0f6:	2001      	movs	r0, #1
1000b0f8:	4b0d      	ldr	r3, [pc, #52]	; (1000b130 <sms_pressure_startup+0x8c>)
1000b0fa:	4798      	blx	r3
    
    ulp_ready = true;
1000b0fc:	4b0d      	ldr	r3, [pc, #52]	; (1000b134 <sms_pressure_startup+0x90>)
1000b0fe:	701c      	strb	r4, [r3, #0]
}
1000b100:	bd10      	pop	{r4, pc}
1000b102:	46c0      	nop			; (mov r8, r8)
1000b104:	100165a4 	.word	0x100165a4
1000b108:	100153f9 	.word	0x100153f9
1000b10c:	10017008 	.word	0x10017008
1000b110:	100152d9 	.word	0x100152d9
1000b114:	1000a8d9 	.word	0x1000a8d9
1000b118:	1001a074 	.word	0x1001a074
1000b11c:	1000af51 	.word	0x1000af51
1000b120:	10008129 	.word	0x10008129
1000b124:	1000b081 	.word	0x1000b081
1000b128:	1001703c 	.word	0x1001703c
1000b12c:	10019ff8 	.word	0x10019ff8
1000b130:	1000b395 	.word	0x1000b395
1000b134:	10019ff9 	.word	0x10019ff9

1000b138 <sms_pressure_ms58_read_data>:
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
    }        
}

enum status_code sms_pressure_ms58_read_data(void)
{
1000b138:	b5f0      	push	{r4, r5, r6, r7, lr}
1000b13a:	4657      	mov	r7, sl
1000b13c:	464e      	mov	r6, r9
1000b13e:	b4c0      	push	{r6, r7}
1000b140:	b083      	sub	sp, #12
    switch(pressure_device.hal.current_state) {
1000b142:	2325      	movs	r3, #37	; 0x25
1000b144:	4a2c      	ldr	r2, [pc, #176]	; (1000b1f8 <sms_pressure_ms58_read_data+0xc0>)
1000b146:	5cd3      	ldrb	r3, [r2, r3]
1000b148:	2b03      	cmp	r3, #3
1000b14a:	d002      	beq.n	1000b152 <sms_pressure_ms58_read_data+0x1a>
1000b14c:	2b04      	cmp	r3, #4
1000b14e:	d025      	beq.n	1000b19c <sms_pressure_ms58_read_data+0x64>
1000b150:	e04b      	b.n	1000b1ea <sms_pressure_ms58_read_data+0xb2>
        case MS58_STATE_CONV_PRESSURE:
        //DBG_LOG_DEV("[sms_pressure_ms58_read_data] reading ADC pressure values...");
        spi_wdata[0] = MS58_ADC_READ;
1000b152:	4c2a      	ldr	r4, [pc, #168]	; (1000b1fc <sms_pressure_ms58_read_data+0xc4>)
1000b154:	2300      	movs	r3, #0
1000b156:	7023      	strb	r3, [r4, #0]
        spi_wdata[1] = MS58_ADC_READ;
1000b158:	7063      	strb	r3, [r4, #1]
        spi_wdata[2] = MS58_ADC_READ;
1000b15a:	70a3      	strb	r3, [r4, #2]
        spi_wdata[3] = MS58_ADC_READ;
1000b15c:	70e3      	strb	r3, [r4, #3]
        sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 4);
1000b15e:	4d28      	ldr	r5, [pc, #160]	; (1000b200 <sms_pressure_ms58_read_data+0xc8>)
1000b160:	2704      	movs	r7, #4
1000b162:	9700      	str	r7, [sp, #0]
1000b164:	002b      	movs	r3, r5
1000b166:	0022      	movs	r2, r4
1000b168:	4926      	ldr	r1, [pc, #152]	; (1000b204 <sms_pressure_ms58_read_data+0xcc>)
1000b16a:	4827      	ldr	r0, [pc, #156]	; (1000b208 <sms_pressure_ms58_read_data+0xd0>)
1000b16c:	4e27      	ldr	r6, [pc, #156]	; (1000b20c <sms_pressure_ms58_read_data+0xd4>)
1000b16e:	46b2      	mov	sl, r6
1000b170:	47b0      	blx	r6
        pressure_device.hal.adc_values[MS58_TYPE_PRESS] = ((spi_rdata[1] << 16) | (spi_rdata[2] << 8) | (spi_rdata[3]));
1000b172:	4e21      	ldr	r6, [pc, #132]	; (1000b1f8 <sms_pressure_ms58_read_data+0xc0>)
1000b174:	786b      	ldrb	r3, [r5, #1]
1000b176:	041a      	lsls	r2, r3, #16
1000b178:	78ab      	ldrb	r3, [r5, #2]
1000b17a:	021b      	lsls	r3, r3, #8
1000b17c:	4313      	orrs	r3, r2
1000b17e:	78ea      	ldrb	r2, [r5, #3]
1000b180:	4313      	orrs	r3, r2
1000b182:	6173      	str	r3, [r6, #20]
        //DBG_LOG_DEV("[sms_pressure_ms58_read_data] D1 -> %ld", ms58_device.adc_values[MS58_TYPE_PRESS]);
        
        //DBG_LOG_DEV("[sms_pressure_ms58_read_data] starting D2 conversion");
        spi_wdata[0] = MS58_CONV_D2_512;
1000b184:	2352      	movs	r3, #82	; 0x52
1000b186:	7023      	strb	r3, [r4, #0]
        sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 1);
1000b188:	3b51      	subs	r3, #81	; 0x51
1000b18a:	9300      	str	r3, [sp, #0]
1000b18c:	002b      	movs	r3, r5
1000b18e:	0022      	movs	r2, r4
1000b190:	491c      	ldr	r1, [pc, #112]	; (1000b204 <sms_pressure_ms58_read_data+0xcc>)
1000b192:	481d      	ldr	r0, [pc, #116]	; (1000b208 <sms_pressure_ms58_read_data+0xd0>)
1000b194:	47d0      	blx	sl
        pressure_device.hal.current_state = MS58_STATE_CONV_TEMPERATURE;
1000b196:	2325      	movs	r3, #37	; 0x25
1000b198:	54f7      	strb	r7, [r6, r3]
        break;
1000b19a:	e026      	b.n	1000b1ea <sms_pressure_ms58_read_data+0xb2>
        
        case MS58_STATE_CONV_TEMPERATURE:
        //DBG_LOG_DEV("[sms_pressure_ms58_read_data] reading ADC temperature values...");
        spi_wdata[0] = MS58_ADC_READ;
1000b19c:	4c17      	ldr	r4, [pc, #92]	; (1000b1fc <sms_pressure_ms58_read_data+0xc4>)
1000b19e:	2300      	movs	r3, #0
1000b1a0:	7023      	strb	r3, [r4, #0]
        spi_wdata[1] = MS58_ADC_READ;
1000b1a2:	7063      	strb	r3, [r4, #1]
        spi_wdata[2] = MS58_ADC_READ;
1000b1a4:	70a3      	strb	r3, [r4, #2]
        spi_wdata[3] = MS58_ADC_READ;
1000b1a6:	70e3      	strb	r3, [r4, #3]
        sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 4);
1000b1a8:	4d15      	ldr	r5, [pc, #84]	; (1000b200 <sms_pressure_ms58_read_data+0xc8>)
1000b1aa:	3304      	adds	r3, #4
1000b1ac:	9300      	str	r3, [sp, #0]
1000b1ae:	002b      	movs	r3, r5
1000b1b0:	0022      	movs	r2, r4
1000b1b2:	4914      	ldr	r1, [pc, #80]	; (1000b204 <sms_pressure_ms58_read_data+0xcc>)
1000b1b4:	4814      	ldr	r0, [pc, #80]	; (1000b208 <sms_pressure_ms58_read_data+0xd0>)
1000b1b6:	4e15      	ldr	r6, [pc, #84]	; (1000b20c <sms_pressure_ms58_read_data+0xd4>)
1000b1b8:	46b1      	mov	r9, r6
1000b1ba:	47b0      	blx	r6
        pressure_device.hal.adc_values[MS58_TYPE_TEMP] = ((spi_rdata[1] << 16) | (spi_rdata[2] << 8) | (spi_rdata[3]));
1000b1bc:	4e0e      	ldr	r6, [pc, #56]	; (1000b1f8 <sms_pressure_ms58_read_data+0xc0>)
1000b1be:	786b      	ldrb	r3, [r5, #1]
1000b1c0:	041a      	lsls	r2, r3, #16
1000b1c2:	78ab      	ldrb	r3, [r5, #2]
1000b1c4:	021b      	lsls	r3, r3, #8
1000b1c6:	4313      	orrs	r3, r2
1000b1c8:	78ea      	ldrb	r2, [r5, #3]
1000b1ca:	4313      	orrs	r3, r2
1000b1cc:	61b3      	str	r3, [r6, #24]
        //DBG_LOG_DEV("[sms_pressure_ms58_read_data] D2 -> %ld", ms58_device.adc_values[MS58_TYPE_TEMP]);
        
        //DBG_LOG_DEV("[sms_pressure_ms58_read_data] starting D1 conversion");
        spi_wdata[0] = MS58_CONV_D1_512;
1000b1ce:	2342      	movs	r3, #66	; 0x42
1000b1d0:	7023      	strb	r3, [r4, #0]
        sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 1);
1000b1d2:	2701      	movs	r7, #1
1000b1d4:	9700      	str	r7, [sp, #0]
1000b1d6:	002b      	movs	r3, r5
1000b1d8:	0022      	movs	r2, r4
1000b1da:	490a      	ldr	r1, [pc, #40]	; (1000b204 <sms_pressure_ms58_read_data+0xcc>)
1000b1dc:	480a      	ldr	r0, [pc, #40]	; (1000b208 <sms_pressure_ms58_read_data+0xd0>)
1000b1de:	47c8      	blx	r9
        pressure_device.hal.current_state = MS58_STATE_CONV_PRESSURE;
1000b1e0:	2203      	movs	r2, #3
1000b1e2:	2325      	movs	r3, #37	; 0x25
1000b1e4:	54f2      	strb	r2, [r6, r3]
        pressure_device.hal.data_complete = true;
1000b1e6:	3b01      	subs	r3, #1
1000b1e8:	54f7      	strb	r7, [r6, r3]
        case MS58_STATE_NONE:
        default:
        break;
    }
    return STATUS_OK;
}
1000b1ea:	2000      	movs	r0, #0
1000b1ec:	b003      	add	sp, #12
1000b1ee:	bc0c      	pop	{r2, r3}
1000b1f0:	4691      	mov	r9, r2
1000b1f2:	469a      	mov	sl, r3
1000b1f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000b1f6:	46c0      	nop			; (mov r8, r8)
1000b1f8:	1001a074 	.word	0x1001a074
1000b1fc:	1001a064 	.word	0x1001a064
1000b200:	1001a054 	.word	0x1001a054
1000b204:	1001a118 	.word	0x1001a118
1000b208:	1001a124 	.word	0x1001a124
1000b20c:	1000b51d 	.word	0x1000b51d

1000b210 <sms_pressure_ms58_calculate>:

void sms_pressure_ms58_calculate(void)
{
1000b210:	b5f0      	push	{r4, r5, r6, r7, lr}
1000b212:	464f      	mov	r7, r9
1000b214:	b480      	push	{r7}
1000b216:	b082      	sub	sp, #8
    ***************************/
    /* dT = D2 - Tref = D2 - C5*2^8 */
    /* tv1: 33464 * 2^8 = 8566784 */
    tv1 = ((int64_t)(pressure_device.hal.prom_values[5]) << 8);
    /* deltaT: 8569150 - 8566784 = 2366 */
    deltaT = (int32_t)((int64_t)pressure_device.hal.adc_values[MS58_TYPE_TEMP] - tv1);
1000b218:	4d26      	ldr	r5, [pc, #152]	; (1000b2b4 <sms_pressure_ms58_calculate+0xa4>)

    /* TEMP = 20°C + dT*TEMPSENS = 2000 + dT * C6/2^23 */
    /* tv1: 28312 * 2366 = 66986192 */
    tv1 = ((int64_t)pressure_device.hal.prom_values[6] * (int64_t)deltaT);
1000b21a:	89ec      	ldrh	r4, [r5, #14]
1000b21c:	0224      	lsls	r4, r4, #8
1000b21e:	69ab      	ldr	r3, [r5, #24]
1000b220:	1b1c      	subs	r4, r3, r4
1000b222:	17e3      	asrs	r3, r4, #31
1000b224:	001e      	movs	r6, r3
    /* tv2: 66986192 / 2^23 = 7(.985376358) */
    tv2 = (tv1 >> 23);
    /* temp: 7 + 2000 = 2007 */
    pressure_device.hal.temperature = (int32_t)(tv2 + 2000);
1000b226:	8a28      	ldrh	r0, [r5, #16]
1000b228:	4a23      	ldr	r2, [pc, #140]	; (1000b2b8 <sms_pressure_ms58_calculate+0xa8>)
1000b22a:	4691      	mov	r9, r2
1000b22c:	0022      	movs	r2, r4
1000b22e:	2100      	movs	r1, #0
1000b230:	47c8      	blx	r9
1000b232:	0249      	lsls	r1, r1, #9
1000b234:	0dc0      	lsrs	r0, r0, #23
1000b236:	4308      	orrs	r0, r1
1000b238:	23fa      	movs	r3, #250	; 0xfa
1000b23a:	00db      	lsls	r3, r3, #3
1000b23c:	469c      	mov	ip, r3
1000b23e:	4460      	add	r0, ip
1000b240:	6228      	str	r0, [r5, #32]
    /* tv2: 23282 * 2366 = 55085212 */
    tv2 = ((int64_t)pressure_device.hal.prom_values[4] * (int64_t)deltaT);
    /* tv3: 55085212 / 2^7 = 430353(.21875) */
    tv3 = (tv2 >> 7);
    /* offset: 2419851264 + 430353 = 2420281617 */
    offset = (tv1 + tv3);
1000b242:	89a8      	ldrh	r0, [r5, #12]
1000b244:	0022      	movs	r2, r4
1000b246:	9601      	str	r6, [sp, #4]
1000b248:	0033      	movs	r3, r6
1000b24a:	2100      	movs	r1, #0
1000b24c:	47c8      	blx	r9
1000b24e:	064e      	lsls	r6, r1, #25
1000b250:	09c2      	lsrs	r2, r0, #7
1000b252:	4332      	orrs	r2, r6
1000b254:	11cb      	asrs	r3, r1, #7
1000b256:	892e      	ldrh	r6, [r5, #8]
1000b258:	2100      	movs	r1, #0
1000b25a:	0430      	lsls	r0, r6, #16
1000b25c:	1812      	adds	r2, r2, r0
1000b25e:	414b      	adcs	r3, r1
1000b260:	0016      	movs	r6, r2
1000b262:	001f      	movs	r7, r3
    /* sensitivity: 1314881536 + 215500 = 1315097036 */
    sensitivity = (tv1 + tv3);

    /* P = D1*SENS - OFF = (D1*SENS/2^21 - OFF)/2^15 */
    /* tv1: (9085466 * 1315097036) / 2^21 = 5697378829(.612148284) */
    tv1 = (((int64_t)pressure_device.hal.adc_values[MS58_TYPE_PRESS] * sensitivity) >> 21);
1000b264:	8968      	ldrh	r0, [r5, #10]
1000b266:	0022      	movs	r2, r4
1000b268:	9b01      	ldr	r3, [sp, #4]
1000b26a:	2100      	movs	r1, #0
1000b26c:	47c8      	blx	r9
1000b26e:	060c      	lsls	r4, r1, #24
1000b270:	0a02      	lsrs	r2, r0, #8
1000b272:	4322      	orrs	r2, r4
1000b274:	120b      	asrs	r3, r1, #8
1000b276:	88ec      	ldrh	r4, [r5, #6]
1000b278:	2100      	movs	r1, #0
1000b27a:	03e0      	lsls	r0, r4, #15
1000b27c:	1880      	adds	r0, r0, r2
1000b27e:	4159      	adcs	r1, r3
1000b280:	696a      	ldr	r2, [r5, #20]
1000b282:	2300      	movs	r3, #0
1000b284:	47c8      	blx	r9
    /* tv2: 5697378829 - 2420281617 = 3277097212 */
    tv2 = tv1 - offset;
    /* press: 3277097212 / 2^15 = 100009(.070190) */
    pressure_device.hal.pressure = (int32_t)(tv2 >> 15);
1000b286:	02cc      	lsls	r4, r1, #11
1000b288:	0d42      	lsrs	r2, r0, #21
1000b28a:	4322      	orrs	r2, r4
1000b28c:	154b      	asrs	r3, r1, #21
1000b28e:	1b92      	subs	r2, r2, r6
1000b290:	41bb      	sbcs	r3, r7
1000b292:	0011      	movs	r1, r2
1000b294:	045b      	lsls	r3, r3, #17
1000b296:	0bca      	lsrs	r2, r1, #15
1000b298:	431a      	orrs	r2, r3
1000b29a:	61ea      	str	r2, [r5, #28]

    DBG_LOG_DEV("[sms_pressure_ms58_calculate] temperature = %ld  pressure = %ld", pressure_device.hal.temperature, pressure_device.hal.pressure);
1000b29c:	4807      	ldr	r0, [pc, #28]	; (1000b2bc <sms_pressure_ms58_calculate+0xac>)
1000b29e:	4b08      	ldr	r3, [pc, #32]	; (1000b2c0 <sms_pressure_ms58_calculate+0xb0>)
1000b2a0:	4798      	blx	r3
1000b2a2:	69ea      	ldr	r2, [r5, #28]
1000b2a4:	6a29      	ldr	r1, [r5, #32]
1000b2a6:	4807      	ldr	r0, [pc, #28]	; (1000b2c4 <sms_pressure_ms58_calculate+0xb4>)
1000b2a8:	4b07      	ldr	r3, [pc, #28]	; (1000b2c8 <sms_pressure_ms58_calculate+0xb8>)
1000b2aa:	4798      	blx	r3
}
1000b2ac:	b002      	add	sp, #8
1000b2ae:	bc04      	pop	{r2}
1000b2b0:	4691      	mov	r9, r2
1000b2b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000b2b4:	1001a074 	.word	0x1001a074
1000b2b8:	10013469 	.word	0x10013469
1000b2bc:	100165a4 	.word	0x100165a4
1000b2c0:	100153f9 	.word	0x100153f9
1000b2c4:	1001707c 	.word	0x1001707c
1000b2c8:	100152d9 	.word	0x100152d9

1000b2cc <sms_pressure_poll_data>:

    return STATUS_OK;
}

void sms_pressure_poll_data(void)
{
1000b2cc:	b510      	push	{r4, lr}
    if(ble_current_state == BLE_STATE_PAIRED) {
1000b2ce:	4b0e      	ldr	r3, [pc, #56]	; (1000b308 <sms_pressure_poll_data+0x3c>)
1000b2d0:	781b      	ldrb	r3, [r3, #0]
1000b2d2:	2b22      	cmp	r3, #34	; 0x22
1000b2d4:	d117      	bne.n	1000b306 <sms_pressure_poll_data+0x3a>
        //DBG_LOG_DEV("[sms_pressure_poll_data]\tStarting data polling");
        if(sms_pressure_ms58_read_data() != STATUS_OK) {
1000b2d6:	4b0d      	ldr	r3, [pc, #52]	; (1000b30c <sms_pressure_poll_data+0x40>)
1000b2d8:	4798      	blx	r3
1000b2da:	2800      	cmp	r0, #0
1000b2dc:	d006      	beq.n	1000b2ec <sms_pressure_poll_data+0x20>
            DBG_LOG_DEV("[sms_pressure_ms58_poll_data] problem reading ms58 data");
1000b2de:	480c      	ldr	r0, [pc, #48]	; (1000b310 <sms_pressure_poll_data+0x44>)
1000b2e0:	4b0c      	ldr	r3, [pc, #48]	; (1000b314 <sms_pressure_poll_data+0x48>)
1000b2e2:	4798      	blx	r3
1000b2e4:	480c      	ldr	r0, [pc, #48]	; (1000b318 <sms_pressure_poll_data+0x4c>)
1000b2e6:	4b0d      	ldr	r3, [pc, #52]	; (1000b31c <sms_pressure_poll_data+0x50>)
1000b2e8:	4798      	blx	r3
1000b2ea:	e00c      	b.n	1000b306 <sms_pressure_poll_data+0x3a>
        }
        else {
            if(pressure_device.hal.data_complete) {
1000b2ec:	2324      	movs	r3, #36	; 0x24
1000b2ee:	4a0c      	ldr	r2, [pc, #48]	; (1000b320 <sms_pressure_poll_data+0x54>)
1000b2f0:	5cd3      	ldrb	r3, [r2, r3]
1000b2f2:	2b00      	cmp	r3, #0
1000b2f4:	d007      	beq.n	1000b306 <sms_pressure_poll_data+0x3a>
                pressure_device.hal.data_complete = false;
1000b2f6:	2100      	movs	r1, #0
1000b2f8:	2324      	movs	r3, #36	; 0x24
1000b2fa:	54d1      	strb	r1, [r2, r3]
                sms_pressure_ms58_calculate();
1000b2fc:	4b09      	ldr	r3, [pc, #36]	; (1000b324 <sms_pressure_poll_data+0x58>)
1000b2fe:	4798      	blx	r3
				ready_to_send[RTS_PRESSURE_POS] = true;
1000b300:	2201      	movs	r2, #1
1000b302:	4b09      	ldr	r3, [pc, #36]	; (1000b328 <sms_pressure_poll_data+0x5c>)
1000b304:	705a      	strb	r2, [r3, #1]
                //sms_ble_send_characteristic(BLE_CHAR_PRESS);
        }
    }
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
    }        
}
1000b306:	bd10      	pop	{r4, pc}
1000b308:	1001a110 	.word	0x1001a110
1000b30c:	1000b139 	.word	0x1000b139
1000b310:	100165a4 	.word	0x100165a4
1000b314:	100153f9 	.word	0x100153f9
1000b318:	100170bc 	.word	0x100170bc
1000b31c:	100152d9 	.word	0x100152d9
1000b320:	1001a074 	.word	0x1001a074
1000b324:	1000b211 	.word	0x1000b211
1000b328:	1001a114 	.word	0x1001a114

1000b32c <sms_pressure_define_services>:
    DBG_LOG_DEV("[sms_pressure_ms58_calculate] temperature = %ld  pressure = %ld", pressure_device.hal.temperature, pressure_device.hal.pressure);
}


void sms_pressure_define_services(void)
{
1000b32c:	b510      	push	{r4, lr}
1000b32e:	b082      	sub	sp, #8
    at_ble_status_t status;
    uint8_t init_value = 0;
1000b330:	466b      	mov	r3, sp
1000b332:	1dda      	adds	r2, r3, #7
1000b334:	2300      	movs	r3, #0
1000b336:	7013      	strb	r3, [r2, #0]
    sms_ble_service_init(BLE_SERV_PRESSURE, &pressure_device.service_handler, &init_value);
1000b338:	4c0d      	ldr	r4, [pc, #52]	; (1000b370 <sms_pressure_define_services+0x44>)
1000b33a:	0021      	movs	r1, r4
1000b33c:	2001      	movs	r0, #1
1000b33e:	4b0d      	ldr	r3, [pc, #52]	; (1000b374 <sms_pressure_define_services+0x48>)
1000b340:	4798      	blx	r3
    if((status = sms_ble_primary_service_define(&pressure_device.service_handler)) != AT_BLE_SUCCESS) {
1000b342:	0020      	movs	r0, r4
1000b344:	4b0c      	ldr	r3, [pc, #48]	; (1000b378 <sms_pressure_define_services+0x4c>)
1000b346:	4798      	blx	r3
1000b348:	1e04      	subs	r4, r0, #0
1000b34a:	d007      	beq.n	1000b35c <sms_pressure_define_services+0x30>
        DBG_LOG("[sms_pressure_define_services]\tServices defining failed, reason 0x%x", status);
1000b34c:	480b      	ldr	r0, [pc, #44]	; (1000b37c <sms_pressure_define_services+0x50>)
1000b34e:	4b0c      	ldr	r3, [pc, #48]	; (1000b380 <sms_pressure_define_services+0x54>)
1000b350:	4798      	blx	r3
1000b352:	0021      	movs	r1, r4
1000b354:	480b      	ldr	r0, [pc, #44]	; (1000b384 <sms_pressure_define_services+0x58>)
1000b356:	4b0c      	ldr	r3, [pc, #48]	; (1000b388 <sms_pressure_define_services+0x5c>)
1000b358:	4798      	blx	r3
1000b35a:	e007      	b.n	1000b36c <sms_pressure_define_services+0x40>
    }
    else {
        DBG_LOG_DEV("[sms_pressure_define_services]\tServices defined, SMS pressure handle: %d", pressure_device.service_handler.serv_handle);
1000b35c:	4807      	ldr	r0, [pc, #28]	; (1000b37c <sms_pressure_define_services+0x50>)
1000b35e:	4b08      	ldr	r3, [pc, #32]	; (1000b380 <sms_pressure_define_services+0x54>)
1000b360:	4798      	blx	r3
1000b362:	4b0a      	ldr	r3, [pc, #40]	; (1000b38c <sms_pressure_define_services+0x60>)
1000b364:	8fd9      	ldrh	r1, [r3, #62]	; 0x3e
1000b366:	480a      	ldr	r0, [pc, #40]	; (1000b390 <sms_pressure_define_services+0x64>)
1000b368:	4b07      	ldr	r3, [pc, #28]	; (1000b388 <sms_pressure_define_services+0x5c>)
1000b36a:	4798      	blx	r3
    }
1000b36c:	b002      	add	sp, #8
1000b36e:	bd10      	pop	{r4, pc}
1000b370:	1001a0a0 	.word	0x1001a0a0
1000b374:	1000a42d 	.word	0x1000a42d
1000b378:	1000a409 	.word	0x1000a409
1000b37c:	100165a4 	.word	0x100165a4
1000b380:	100153f9 	.word	0x100153f9
1000b384:	100170f4 	.word	0x100170f4
1000b388:	100152d9 	.word	0x100152d9
1000b38c:	1001a074 	.word	0x1001a074
1000b390:	1001713c 	.word	0x1001713c

1000b394 <sms_sensors_interrupt_toggle>:
 */ 

#include "sms_sensors.h"

/* Sensors-related functions */
void sms_sensors_interrupt_toggle(bool mpu_int, bool press_int) {
1000b394:	b510      	push	{r4, lr}
1000b396:	000c      	movs	r4, r1
    /* IMU --> IMU_DRDY */
    if(mpu_int) {
1000b398:	2800      	cmp	r0, #0
1000b39a:	d007      	beq.n	1000b3ac <sms_sensors_interrupt_toggle+0x18>
        mpu_device.state = MPU_STATE_ON;
1000b39c:	2102      	movs	r1, #2
1000b39e:	2330      	movs	r3, #48	; 0x30
1000b3a0:	4a15      	ldr	r2, [pc, #84]	; (1000b3f8 <sms_sensors_interrupt_toggle+0x64>)
1000b3a2:	54d1      	strb	r1, [r2, r3]
        gpio_enable_callback(SMS_MPU_DRDY_PIN);
1000b3a4:	201e      	movs	r0, #30
1000b3a6:	4b15      	ldr	r3, [pc, #84]	; (1000b3fc <sms_sensors_interrupt_toggle+0x68>)
1000b3a8:	4798      	blx	r3
1000b3aa:	e006      	b.n	1000b3ba <sms_sensors_interrupt_toggle+0x26>
    }
    else {
        mpu_device.state = MPU_STATE_OFF;
1000b3ac:	2100      	movs	r1, #0
1000b3ae:	2330      	movs	r3, #48	; 0x30
1000b3b0:	4a11      	ldr	r2, [pc, #68]	; (1000b3f8 <sms_sensors_interrupt_toggle+0x64>)
1000b3b2:	54d1      	strb	r1, [r2, r3]
        gpio_disable_callback(SMS_MPU_DRDY_PIN);
1000b3b4:	201e      	movs	r0, #30
1000b3b6:	4b12      	ldr	r3, [pc, #72]	; (1000b400 <sms_sensors_interrupt_toggle+0x6c>)
1000b3b8:	4798      	blx	r3
     * Note: Since there is no direct mechanism to simply enable and disable
     *       the AON sleep timer interruption, we have to initialize it each
     *       time (and it starts running) and register the corresponding
     *       callback (and it enables the interrupt)
     */
    if(press_int) {
1000b3ba:	2c00      	cmp	r4, #0
1000b3bc:	d010      	beq.n	1000b3e0 <sms_sensors_interrupt_toggle+0x4c>
        pressure_device.hal.current_state = MS58_STATE_CONV_PRESSURE;
1000b3be:	4b11      	ldr	r3, [pc, #68]	; (1000b404 <sms_sensors_interrupt_toggle+0x70>)
1000b3c0:	2103      	movs	r1, #3
1000b3c2:	2225      	movs	r2, #37	; 0x25
1000b3c4:	5499      	strb	r1, [r3, r2]
        pressure_device.state = PRESSURE_STATE_ON;
1000b3c6:	3901      	subs	r1, #1
1000b3c8:	3203      	adds	r2, #3
1000b3ca:	5499      	strb	r1, [r3, r2]
        sms_timer_aon_init(SMS_PRESSURE_CONVERT_MS, AON_SLEEP_TIMER_RELOAD_MODE);
1000b3cc:	2100      	movs	r1, #0
1000b3ce:	480e      	ldr	r0, [pc, #56]	; (1000b408 <sms_sensors_interrupt_toggle+0x74>)
1000b3d0:	4b0e      	ldr	r3, [pc, #56]	; (1000b40c <sms_sensors_interrupt_toggle+0x78>)
1000b3d2:	4798      	blx	r3
        sms_timer_aon_register_callback();
1000b3d4:	4b0e      	ldr	r3, [pc, #56]	; (1000b410 <sms_sensors_interrupt_toggle+0x7c>)
1000b3d6:	4798      	blx	r3
        sensors_active = true;
1000b3d8:	2201      	movs	r2, #1
1000b3da:	4b0e      	ldr	r3, [pc, #56]	; (1000b414 <sms_sensors_interrupt_toggle+0x80>)
1000b3dc:	701a      	strb	r2, [r3, #0]
1000b3de:	e00a      	b.n	1000b3f6 <sms_sensors_interrupt_toggle+0x62>
    }
    else {
        pressure_device.hal.current_state = MS58_STATE_READY;
1000b3e0:	2102      	movs	r1, #2
1000b3e2:	2325      	movs	r3, #37	; 0x25
1000b3e4:	4a07      	ldr	r2, [pc, #28]	; (1000b404 <sms_sensors_interrupt_toggle+0x70>)
1000b3e6:	54d1      	strb	r1, [r2, r3]
        sms_timer_aon_disable();
1000b3e8:	4b0b      	ldr	r3, [pc, #44]	; (1000b418 <sms_sensors_interrupt_toggle+0x84>)
1000b3ea:	4798      	blx	r3
        sms_timer_aon_unregister_callback();
1000b3ec:	4b0b      	ldr	r3, [pc, #44]	; (1000b41c <sms_sensors_interrupt_toggle+0x88>)
1000b3ee:	4798      	blx	r3
        sensors_active = false;
1000b3f0:	2200      	movs	r2, #0
1000b3f2:	4b08      	ldr	r3, [pc, #32]	; (1000b414 <sms_sensors_interrupt_toggle+0x80>)
1000b3f4:	701a      	strb	r2, [r3, #0]
    }
}
1000b3f6:	bd10      	pop	{r4, pc}
1000b3f8:	10019f68 	.word	0x10019f68
1000b3fc:	1000c60d 	.word	0x1000c60d
1000b400:	1000c669 	.word	0x1000c669
1000b404:	1001a074 	.word	0x1001a074
1000b408:	00002664 	.word	0x00002664
1000b40c:	1000b57d 	.word	0x1000b57d
1000b410:	1000b5b1 	.word	0x1000b5b1
1000b414:	1001a104 	.word	0x1001a104
1000b418:	1000b5a5 	.word	0x1000b5a5
1000b41c:	1000b5d1 	.word	0x1000b5d1

1000b420 <sms_sensors_switch>:
    

void sms_sensors_switch(bool mpu_en, bool press_en)
{
1000b420:	b510      	push	{r4, lr}
1000b422:	000c      	movs	r4, r1
    /* IMU */
    if(mpu_en) {
1000b424:	2800      	cmp	r0, #0
1000b426:	d016      	beq.n	1000b456 <sms_sensors_switch+0x36>
        if(sms_mpu_initialize()) {
1000b428:	4b14      	ldr	r3, [pc, #80]	; (1000b47c <sms_sensors_switch+0x5c>)
1000b42a:	4798      	blx	r3
1000b42c:	2800      	cmp	r0, #0
1000b42e:	d00a      	beq.n	1000b446 <sms_sensors_switch+0x26>
            DBG_LOG_DEV("[sms_sensors_switch]\t\t\tCouldn't initialize MPU");
1000b430:	4813      	ldr	r0, [pc, #76]	; (1000b480 <sms_sensors_switch+0x60>)
1000b432:	4b14      	ldr	r3, [pc, #80]	; (1000b484 <sms_sensors_switch+0x64>)
1000b434:	4798      	blx	r3
1000b436:	4814      	ldr	r0, [pc, #80]	; (1000b488 <sms_sensors_switch+0x68>)
1000b438:	4b14      	ldr	r3, [pc, #80]	; (1000b48c <sms_sensors_switch+0x6c>)
1000b43a:	4798      	blx	r3
            gpio_pin_set_output_level(SMS_MPU_VCC_PIN, false);
1000b43c:	2100      	movs	r1, #0
1000b43e:	2006      	movs	r0, #6
1000b440:	4b13      	ldr	r3, [pc, #76]	; (1000b490 <sms_sensors_switch+0x70>)
1000b442:	4798      	blx	r3
1000b444:	e00b      	b.n	1000b45e <sms_sensors_switch+0x3e>
        }
        else {
            mpu_device.hal.init_ok = true;
1000b446:	2201      	movs	r2, #1
1000b448:	4b12      	ldr	r3, [pc, #72]	; (1000b494 <sms_sensors_switch+0x74>)
1000b44a:	711a      	strb	r2, [r3, #4]
            sms_sensors_interrupt_toggle(true, false);
1000b44c:	2100      	movs	r1, #0
1000b44e:	2001      	movs	r0, #1
1000b450:	4b11      	ldr	r3, [pc, #68]	; (1000b498 <sms_sensors_switch+0x78>)
1000b452:	4798      	blx	r3
1000b454:	e003      	b.n	1000b45e <sms_sensors_switch+0x3e>
        }
    }
    else {
        gpio_pin_set_output_level(SMS_MPU_VCC_PIN, false);
1000b456:	2100      	movs	r1, #0
1000b458:	2006      	movs	r0, #6
1000b45a:	4b0d      	ldr	r3, [pc, #52]	; (1000b490 <sms_sensors_switch+0x70>)
1000b45c:	4798      	blx	r3
    }
    
    /* Pressure */
    if(press_en) {                
1000b45e:	2c00      	cmp	r4, #0
1000b460:	d006      	beq.n	1000b470 <sms_sensors_switch+0x50>
        pressure_device.hal.current_state = MS58_STATE_RESETTING;
1000b462:	2101      	movs	r1, #1
1000b464:	2325      	movs	r3, #37	; 0x25
1000b466:	4a0d      	ldr	r2, [pc, #52]	; (1000b49c <sms_sensors_switch+0x7c>)
1000b468:	54d1      	strb	r1, [r2, r3]
        //pressure_device.hal.reset_done = false;
        //pressure_device.hal.init_ok = false;
        sms_pressure_startup();
1000b46a:	4b0d      	ldr	r3, [pc, #52]	; (1000b4a0 <sms_sensors_switch+0x80>)
1000b46c:	4798      	blx	r3
1000b46e:	e003      	b.n	1000b478 <sms_sensors_switch+0x58>
    }
    else {
        gpio_pin_set_output_level(SMS_PRESSURE_VCC_PIN, false);
1000b470:	2100      	movs	r1, #0
1000b472:	2007      	movs	r0, #7
1000b474:	4b06      	ldr	r3, [pc, #24]	; (1000b490 <sms_sensors_switch+0x70>)
1000b476:	4798      	blx	r3
    }
}
1000b478:	bd10      	pop	{r4, pc}
1000b47a:	46c0      	nop			; (mov r8, r8)
1000b47c:	1000ac8d 	.word	0x1000ac8d
1000b480:	100165a4 	.word	0x100165a4
1000b484:	100153f9 	.word	0x100153f9
1000b488:	10017188 	.word	0x10017188
1000b48c:	100152d9 	.word	0x100152d9
1000b490:	1000c365 	.word	0x1000c365
1000b494:	10019f68 	.word	0x10019f68
1000b498:	1000b395 	.word	0x1000b395
1000b49c:	1001a074 	.word	0x1001a074
1000b4a0:	1000b0a5 	.word	0x1000b0a5

1000b4a4 <sms_spi_master_configure>:
 *   + mode 3 on SPI0 @ 1 MHz for MPU-9250 IMU
 * - assign SS pin for each slave device
 * - enable SPI
 */ 
void sms_spi_master_configure(void)
{
1000b4a4:	b530      	push	{r4, r5, lr}
1000b4a6:	b08d      	sub	sp, #52	; 0x34
    //DBG_LOG_DEV("[spi_master_configure]\tconfiguring SPI masters and attaching slaves...");

    /* Initialize ms58 spi slave device */
    struct spi_config spi_master_config;
    struct spi_slave_inst_config spi_slave_ms58_config;
    spi_slave_inst_get_config_defaults(&spi_slave_ms58_config);
1000b4a8:	ac01      	add	r4, sp, #4
1000b4aa:	0020      	movs	r0, r4
1000b4ac:	4b13      	ldr	r3, [pc, #76]	; (1000b4fc <sms_spi_master_configure+0x58>)
1000b4ae:	4798      	blx	r3
    spi_slave_ms58_config.ss_pin = SMS_PRESSURE_SPI_SS_PIN;
1000b4b0:	2310      	movs	r3, #16
1000b4b2:	7023      	strb	r3, [r4, #0]
    spi_attach_slave(&spi_slave_ms58_instance, &spi_slave_ms58_config);
1000b4b4:	0021      	movs	r1, r4
1000b4b6:	4812      	ldr	r0, [pc, #72]	; (1000b500 <sms_spi_master_configure+0x5c>)
1000b4b8:	4b12      	ldr	r3, [pc, #72]	; (1000b504 <sms_spi_master_configure+0x60>)
1000b4ba:	4798      	blx	r3
    

    /* Initialize SPI1 master for ms58 */
    spi_get_config_defaults(&spi_master_config);
1000b4bc:	ac02      	add	r4, sp, #8
1000b4be:	0020      	movs	r0, r4
1000b4c0:	4b11      	ldr	r3, [pc, #68]	; (1000b508 <sms_spi_master_configure+0x64>)
1000b4c2:	4798      	blx	r3
    spi_master_config.clock_divider = SPI_MASTER_MS58_CLOCK_DIV;
1000b4c4:	2368      	movs	r3, #104	; 0x68
1000b4c6:	7123      	strb	r3, [r4, #4]
    spi_master_config.transfer_mode = SPI_MASTER_MS58_MODE;
1000b4c8:	2300      	movs	r3, #0
1000b4ca:	70a3      	strb	r3, [r4, #2]
    spi_master_config.pin_number_pad[0] = SPI_MASTER_MS58_PIN_SCK;
1000b4cc:	3311      	adds	r3, #17
1000b4ce:	60a3      	str	r3, [r4, #8]
    spi_master_config.pinmux_sel_pad[0] = SPI_MASTER_MS58_MUX_SCK;
1000b4d0:	3b0d      	subs	r3, #13
1000b4d2:	61a3      	str	r3, [r4, #24]
    spi_master_config.pin_number_pad[1] = SPI_MASTER_MS58_PIN_MOSI;
1000b4d4:	2213      	movs	r2, #19
1000b4d6:	60e2      	str	r2, [r4, #12]
    spi_master_config.pinmux_sel_pad[1] = SPI_MASTER_MS58_MUX_MOSI;
1000b4d8:	61e3      	str	r3, [r4, #28]
    spi_master_config.pin_number_pad[2] = SPI_MASTER_MS58_PIN_SSN;
1000b4da:	3a14      	subs	r2, #20
1000b4dc:	6122      	str	r2, [r4, #16]
    spi_master_config.pinmux_sel_pad[2] = SPI_MASTER_MS58_MUX_SSN;
1000b4de:	6222      	str	r2, [r4, #32]
    spi_master_config.pin_number_pad[3] = SPI_MASTER_MS58_MISO;
1000b4e0:	3213      	adds	r2, #19
1000b4e2:	6162      	str	r2, [r4, #20]
    spi_master_config.pinmux_sel_pad[3] = SPI_MASTER_MS58_MUX_MISO;
1000b4e4:	6263      	str	r3, [r4, #36]	; 0x24
    spi_init(&spi_master_ms58_instance, SPI_MASTER_MS58_PORT, &spi_master_config);
1000b4e6:	4d09      	ldr	r5, [pc, #36]	; (1000b50c <sms_spi_master_configure+0x68>)
1000b4e8:	0022      	movs	r2, r4
1000b4ea:	4909      	ldr	r1, [pc, #36]	; (1000b510 <sms_spi_master_configure+0x6c>)
1000b4ec:	0028      	movs	r0, r5
1000b4ee:	4b09      	ldr	r3, [pc, #36]	; (1000b514 <sms_spi_master_configure+0x70>)
1000b4f0:	4798      	blx	r3
    spi_enable(&spi_master_ms58_instance);
1000b4f2:	0028      	movs	r0, r5
1000b4f4:	4b08      	ldr	r3, [pc, #32]	; (1000b518 <sms_spi_master_configure+0x74>)
1000b4f6:	4798      	blx	r3
}
1000b4f8:	b00d      	add	sp, #52	; 0x34
1000b4fa:	bd30      	pop	{r4, r5, pc}
1000b4fc:	1000baa9 	.word	0x1000baa9
1000b500:	1001a118 	.word	0x1001a118
1000b504:	1000bae1 	.word	0x1000bae1
1000b508:	1000bab5 	.word	0x1000bab5
1000b50c:	1001a124 	.word	0x1001a124
1000b510:	40007000 	.word	0x40007000
1000b514:	1000bbb1 	.word	0x1000bbb1
1000b518:	1000bb21 	.word	0x1000bb21

1000b51c <sms_spi_master_transceive>:
/* SPI transceive function:
 * - enable selected slave
 * - start transceive blocking job
 * - when job returned, disable selected slave
 */
enum status_code sms_spi_master_transceive(struct spi_module *const module, struct spi_slave_inst *const slave, uint8_t *tx_data, uint8_t *rx_data, uint16_t len) {
1000b51c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000b51e:	b083      	sub	sp, #12
1000b520:	0004      	movs	r4, r0
1000b522:	000d      	movs	r5, r1
1000b524:	9200      	str	r2, [sp, #0]
1000b526:	9301      	str	r3, [sp, #4]
1000b528:	ab08      	add	r3, sp, #32
1000b52a:	881e      	ldrh	r6, [r3, #0]
    enum status_code retVal;
    /* Enable slave */
    //DBG_LOG_CONT_DEV(" selecting slave...");
    spi_select_slave(module, slave, true);
1000b52c:	2201      	movs	r2, #1
1000b52e:	4f08      	ldr	r7, [pc, #32]	; (1000b550 <sms_spi_master_transceive+0x34>)
1000b530:	47b8      	blx	r7
    /* Write SPI data */
    //DBG_LOG_CONT_DEV(" writing data...");
    retVal = spi_transceive_buffer_wait(module, tx_data, rx_data, len);
1000b532:	0033      	movs	r3, r6
1000b534:	9a01      	ldr	r2, [sp, #4]
1000b536:	9900      	ldr	r1, [sp, #0]
1000b538:	0020      	movs	r0, r4
1000b53a:	4e06      	ldr	r6, [pc, #24]	; (1000b554 <sms_spi_master_transceive+0x38>)
1000b53c:	47b0      	blx	r6
1000b53e:	0006      	movs	r6, r0
    /* Disable slave */
    //DBG_LOG_CONT_DEV(" de-selecting slave...");
    spi_select_slave(module, slave, false);
1000b540:	2200      	movs	r2, #0
1000b542:	0029      	movs	r1, r5
1000b544:	0020      	movs	r0, r4
1000b546:	47b8      	blx	r7
    //DBG_LOG_CONT_DEV(" done!");
    return retVal;
}
1000b548:	0030      	movs	r0, r6
1000b54a:	b003      	add	sp, #12
1000b54c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000b54e:	46c0      	nop			; (mov r8, r8)
1000b550:	1000bd99 	.word	0x1000bd99
1000b554:	1000bd15 	.word	0x1000bd15

1000b558 <sms_timer_aon_callback>:

#include "sms_timer.h"

/* AON SLEEP TIMER */
void sms_timer_aon_callback(void)
{
1000b558:	b510      	push	{r4, lr}
    sms_current_interrupt.int_on = true;
1000b55a:	4b06      	ldr	r3, [pc, #24]	; (1000b574 <sms_timer_aon_callback+0x1c>)
1000b55c:	2201      	movs	r2, #1
1000b55e:	705a      	strb	r2, [r3, #1]
    sms_current_interrupt.source = INT_AON_TIMER;
1000b560:	3203      	adds	r2, #3
1000b562:	701a      	strb	r2, [r3, #0]
    send_plf_int_msg_ind(AON_SLEEP_TIMER_EXPIRY_CALLBACK, AON_TIMER_EXPIRED, NULL, 0);
1000b564:	2300      	movs	r3, #0
1000b566:	2200      	movs	r2, #0
1000b568:	2103      	movs	r1, #3
1000b56a:	2042      	movs	r0, #66	; 0x42
1000b56c:	4c02      	ldr	r4, [pc, #8]	; (1000b578 <sms_timer_aon_callback+0x20>)
1000b56e:	47a0      	blx	r4
}
1000b570:	bd10      	pop	{r4, pc}
1000b572:	46c0      	nop			; (mov r8, r8)
1000b574:	1001a0f8 	.word	0x1001a0f8
1000b578:	1000f3c1 	.word	0x1000f3c1

1000b57c <sms_timer_aon_init>:

void sms_timer_aon_init(uint32_t cnt, enum aon_sleep_timer_mode cnt_mode)
{
1000b57c:	b530      	push	{r4, r5, lr}
1000b57e:	b083      	sub	sp, #12
1000b580:	0004      	movs	r4, r0
1000b582:	000d      	movs	r5, r1
    struct aon_sleep_timer_config config_aon_sleep_timer;
    aon_sleep_timer_get_config_defaults(&config_aon_sleep_timer);
1000b584:	4668      	mov	r0, sp
1000b586:	4b05      	ldr	r3, [pc, #20]	; (1000b59c <sms_timer_aon_init+0x20>)
1000b588:	4798      	blx	r3
    config_aon_sleep_timer.mode = cnt_mode;
1000b58a:	466b      	mov	r3, sp
1000b58c:	705d      	strb	r5, [r3, #1]
    config_aon_sleep_timer.counter = cnt;
1000b58e:	9401      	str	r4, [sp, #4]
    aon_sleep_timer_init(&config_aon_sleep_timer);
1000b590:	4668      	mov	r0, sp
1000b592:	4b03      	ldr	r3, [pc, #12]	; (1000b5a0 <sms_timer_aon_init+0x24>)
1000b594:	4798      	blx	r3
}
1000b596:	b003      	add	sp, #12
1000b598:	bd30      	pop	{r4, r5, pc}
1000b59a:	46c0      	nop			; (mov r8, r8)
1000b59c:	10008171 	.word	0x10008171
1000b5a0:	100081e5 	.word	0x100081e5

1000b5a4 <sms_timer_aon_disable>:

void sms_timer_aon_disable(void)
{
1000b5a4:	b510      	push	{r4, lr}
    aon_sleep_timer_disable();
1000b5a6:	4b01      	ldr	r3, [pc, #4]	; (1000b5ac <sms_timer_aon_disable+0x8>)
1000b5a8:	4798      	blx	r3
}
1000b5aa:	bd10      	pop	{r4, pc}
1000b5ac:	10008181 	.word	0x10008181

1000b5b0 <sms_timer_aon_register_callback>:

void sms_timer_aon_register_callback(void)
{
1000b5b0:	b510      	push	{r4, lr}
    aon_sleep_timer_register_callback(sms_timer_aon_callback);
1000b5b2:	4804      	ldr	r0, [pc, #16]	; (1000b5c4 <sms_timer_aon_register_callback+0x14>)
1000b5b4:	4b04      	ldr	r3, [pc, #16]	; (1000b5c8 <sms_timer_aon_register_callback+0x18>)
1000b5b6:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000b5b8:	2280      	movs	r2, #128	; 0x80
1000b5ba:	0512      	lsls	r2, r2, #20
1000b5bc:	4b03      	ldr	r3, [pc, #12]	; (1000b5cc <sms_timer_aon_register_callback+0x1c>)
1000b5be:	601a      	str	r2, [r3, #0]
    NVIC_EnableIRQ(AON_SLEEP_TIMER0_IRQn);
}
1000b5c0:	bd10      	pop	{r4, pc}
1000b5c2:	46c0      	nop			; (mov r8, r8)
1000b5c4:	1000b559 	.word	0x1000b559
1000b5c8:	100081cd 	.word	0x100081cd
1000b5cc:	e000e100 	.word	0xe000e100

1000b5d0 <sms_timer_aon_unregister_callback>:

void sms_timer_aon_unregister_callback(void)
{
1000b5d0:	b510      	push	{r4, lr}
    aon_sleep_timer_unregister_callback();
1000b5d2:	4b04      	ldr	r3, [pc, #16]	; (1000b5e4 <sms_timer_aon_unregister_callback+0x14>)
1000b5d4:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000b5d6:	2180      	movs	r1, #128	; 0x80
1000b5d8:	0509      	lsls	r1, r1, #20
1000b5da:	2380      	movs	r3, #128	; 0x80
1000b5dc:	4a02      	ldr	r2, [pc, #8]	; (1000b5e8 <sms_timer_aon_unregister_callback+0x18>)
1000b5de:	50d1      	str	r1, [r2, r3]
    NVIC_DisableIRQ(AON_SLEEP_TIMER0_IRQn);
}
1000b5e0:	bd10      	pop	{r4, pc}
1000b5e2:	46c0      	nop			; (mov r8, r8)
1000b5e4:	100081d9 	.word	0x100081d9
1000b5e8:	e000e100 	.word	0xe000e100

1000b5ec <sms_timer_aon_get_ms>:

void sms_timer_aon_get_ms(uint32_t *count)
{
    count = (uint32_t *)0;
}
1000b5ec:	4770      	bx	lr
1000b5ee:	46c0      	nop			; (mov r8, r8)

1000b5f0 <sms_dualtimer_init>:

/* DUALTIMER */
void sms_dualtimer_init(void)
{
1000b5f0:	b510      	push	{r4, lr}
1000b5f2:	b088      	sub	sp, #32
    struct dualtimer_config config_dualtimer;
    dualtimer_get_config_defaults(&config_dualtimer);
1000b5f4:	ac01      	add	r4, sp, #4
1000b5f6:	0020      	movs	r0, r4
1000b5f8:	4b08      	ldr	r3, [pc, #32]	; (1000b61c <sms_dualtimer_init+0x2c>)
1000b5fa:	4798      	blx	r3

    config_dualtimer.timer1.load_value = SMS_DUALTIMER_LOAD_S;
1000b5fc:	4a08      	ldr	r2, [pc, #32]	; (1000b620 <sms_dualtimer_init+0x30>)
1000b5fe:	60a2      	str	r2, [r4, #8]
    config_dualtimer.timer1.counter_mode = DUALTIMER_ONE_SHOT_MODE;
1000b600:	2300      	movs	r3, #0
1000b602:	7063      	strb	r3, [r4, #1]
    config_dualtimer.timer2.load_value = SMS_DUALTIMER_LOAD_S;
1000b604:	6162      	str	r2, [r4, #20]
    config_dualtimer.timer2.counter_mode = DUALTIMER_ONE_SHOT_MODE;
1000b606:	7363      	strb	r3, [r4, #13]

    dualtimer_init(&config_dualtimer);
1000b608:	0020      	movs	r0, r4
1000b60a:	4b06      	ldr	r3, [pc, #24]	; (1000b624 <sms_dualtimer_init+0x34>)
1000b60c:	4798      	blx	r3
    dualtimer_disable(DUALTIMER_TIMER1);
1000b60e:	2000      	movs	r0, #0
1000b610:	4c05      	ldr	r4, [pc, #20]	; (1000b628 <sms_dualtimer_init+0x38>)
1000b612:	47a0      	blx	r4
    dualtimer_disable(DUALTIMER_TIMER2);
1000b614:	2001      	movs	r0, #1
1000b616:	47a0      	blx	r4
}
1000b618:	b008      	add	sp, #32
1000b61a:	bd10      	pop	{r4, pc}
1000b61c:	1000bdfd 	.word	0x1000bdfd
1000b620:	018cba80 	.word	0x018cba80
1000b624:	1000be91 	.word	0x1000be91
1000b628:	1000be6d 	.word	0x1000be6d

1000b62c <sms_dualtimer_register_callback>:

void sms_dualtimer_register_callback(enum dualtimer_timer tmr, sms_dualtimer_callback_t cb_handler)
{
1000b62c:	b510      	push	{r4, lr}
1000b62e:	0004      	movs	r4, r0
    dualtimer_register_callback(tmr, cb_handler);
1000b630:	4b02      	ldr	r3, [pc, #8]	; (1000b63c <sms_dualtimer_register_callback+0x10>)
1000b632:	4798      	blx	r3
    NVIC_EnableIRQ(DUALTIMER0_IRQn);
}

void sms_dualtimer_stop(enum dualtimer_timer tmr)
{
    dualtimer_disable(tmr);
1000b634:	0020      	movs	r0, r4
1000b636:	4b02      	ldr	r3, [pc, #8]	; (1000b640 <sms_dualtimer_register_callback+0x14>)
1000b638:	4798      	blx	r3

void sms_dualtimer_register_callback(enum dualtimer_timer tmr, sms_dualtimer_callback_t cb_handler)
{
    dualtimer_register_callback(tmr, cb_handler);
    sms_dualtimer_stop(tmr);
}
1000b63a:	bd10      	pop	{r4, pc}
1000b63c:	1000bf95 	.word	0x1000bf95
1000b640:	1000be6d 	.word	0x1000be6d

1000b644 <sms_dualtimer_start>:

void sms_dualtimer_start(timer_unit_type_t unit, uint32_t delay, enum dualtimer_timer tmr)
{
1000b644:	b510      	push	{r4, lr}
1000b646:	0014      	movs	r4, r2
    uint32_t timer_load = 1;
    switch(unit) {
1000b648:	2801      	cmp	r0, #1
1000b64a:	d006      	beq.n	1000b65a <sms_dualtimer_start+0x16>
1000b64c:	2800      	cmp	r0, #0
1000b64e:	d002      	beq.n	1000b656 <sms_dualtimer_start+0x12>
1000b650:	2802      	cmp	r0, #2
1000b652:	d004      	beq.n	1000b65e <sms_dualtimer_start+0x1a>
1000b654:	e005      	b.n	1000b662 <sms_dualtimer_start+0x1e>
        case TIMER_UNIT_US:
        timer_load = SMS_DUALTIMER_LOAD_US;
1000b656:	221a      	movs	r2, #26
1000b658:	e004      	b.n	1000b664 <sms_dualtimer_start+0x20>
        break;
        
        case TIMER_UNIT_MS:
        timer_load = SMS_DUALTIMER_LOAD_MS;
1000b65a:	4a0c      	ldr	r2, [pc, #48]	; (1000b68c <sms_dualtimer_start+0x48>)
        break;
1000b65c:	e002      	b.n	1000b664 <sms_dualtimer_start+0x20>
        
        case TIMER_UNIT_S:
        timer_load = SMS_DUALTIMER_LOAD_S;
1000b65e:	4a0c      	ldr	r2, [pc, #48]	; (1000b690 <sms_dualtimer_start+0x4c>)
        break;
1000b660:	e000      	b.n	1000b664 <sms_dualtimer_start+0x20>
    sms_dualtimer_stop(tmr);
}

void sms_dualtimer_start(timer_unit_type_t unit, uint32_t delay, enum dualtimer_timer tmr)
{
    uint32_t timer_load = 1;
1000b662:	2201      	movs	r2, #1
        
        default:
        break;
    }
    
    if(delay <= 0) {
1000b664:	2900      	cmp	r1, #0
1000b666:	d101      	bne.n	1000b66c <sms_dualtimer_start+0x28>
        //DBG_LOG("[sms_dualtimer_start]\tWarning! Delay value < 0... setting to 1000");
        delay = 1000;
1000b668:	21fa      	movs	r1, #250	; 0xfa
1000b66a:	0089      	lsls	r1, r1, #2
    }
    
    ulp_ready = false;
1000b66c:	2000      	movs	r0, #0
1000b66e:	4b09      	ldr	r3, [pc, #36]	; (1000b694 <sms_dualtimer_start+0x50>)
1000b670:	7018      	strb	r0, [r3, #0]
    //DBG_LOG_DEV("[sms_dualtimer_start]\t\tStarting timer%d... load: %ld, delay: %ld", (tmr+1), timer_load, delay);
    dualtimer_set_counter(tmr, DUALTIMER_SET_CURRUNT_REG, timer_load * delay);
1000b672:	434a      	muls	r2, r1
1000b674:	2100      	movs	r1, #0
1000b676:	0020      	movs	r0, r4
1000b678:	4b07      	ldr	r3, [pc, #28]	; (1000b698 <sms_dualtimer_start+0x54>)
1000b67a:	4798      	blx	r3
    dualtimer_enable(tmr);
1000b67c:	0020      	movs	r0, r4
1000b67e:	4b07      	ldr	r3, [pc, #28]	; (1000b69c <sms_dualtimer_start+0x58>)
1000b680:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000b682:	2280      	movs	r2, #128	; 0x80
1000b684:	01d2      	lsls	r2, r2, #7
1000b686:	4b06      	ldr	r3, [pc, #24]	; (1000b6a0 <sms_dualtimer_start+0x5c>)
1000b688:	601a      	str	r2, [r3, #0]
    NVIC_EnableIRQ(DUALTIMER0_IRQn);
}
1000b68a:	bd10      	pop	{r4, pc}
1000b68c:	00006590 	.word	0x00006590
1000b690:	018cba80 	.word	0x018cba80
1000b694:	10019ff9 	.word	0x10019ff9
1000b698:	1000be21 	.word	0x1000be21
1000b69c:	1000be49 	.word	0x1000be49
1000b6a0:	e000e100 	.word	0xe000e100

1000b6a4 <sms_dualtimer_stop>:

void sms_dualtimer_stop(enum dualtimer_timer tmr)
{
1000b6a4:	b510      	push	{r4, lr}
    dualtimer_disable(tmr);
1000b6a6:	4b01      	ldr	r3, [pc, #4]	; (1000b6ac <sms_dualtimer_stop+0x8>)
1000b6a8:	4798      	blx	r3
}
1000b6aa:	bd10      	pop	{r4, pc}
1000b6ac:	1000be6d 	.word	0x1000be6d

1000b6b0 <sms_dualtimer1_cb>:

void sms_dualtimer1_cb(void)
{
1000b6b0:	b510      	push	{r4, lr}
    sms_current_interrupt.int_on = true;
1000b6b2:	4b06      	ldr	r3, [pc, #24]	; (1000b6cc <sms_dualtimer1_cb+0x1c>)
1000b6b4:	2201      	movs	r2, #1
1000b6b6:	705a      	strb	r2, [r3, #1]
    sms_current_interrupt.source = INT_DUALTIMER1;
1000b6b8:	3204      	adds	r2, #4
1000b6ba:	701a      	strb	r2, [r3, #0]
    send_plf_int_msg_ind(DUALTIMER_TIMER1_CALLBACK, TIMER_EXPIRED_CALLBACK_TYPE_DETECT, NULL, 0);
1000b6bc:	2300      	movs	r3, #0
1000b6be:	2200      	movs	r2, #0
1000b6c0:	2101      	movs	r1, #1
1000b6c2:	2040      	movs	r0, #64	; 0x40
1000b6c4:	4c02      	ldr	r4, [pc, #8]	; (1000b6d0 <sms_dualtimer1_cb+0x20>)
1000b6c6:	47a0      	blx	r4
}
1000b6c8:	bd10      	pop	{r4, pc}
1000b6ca:	46c0      	nop			; (mov r8, r8)
1000b6cc:	1001a0f8 	.word	0x1001a0f8
1000b6d0:	1000f3c1 	.word	0x1000f3c1

1000b6d4 <sms_dualtimer2_cb>:

void sms_dualtimer2_cb(void)
{
1000b6d4:	b510      	push	{r4, lr}
    sms_current_interrupt.int_on = true;
1000b6d6:	4b06      	ldr	r3, [pc, #24]	; (1000b6f0 <sms_dualtimer2_cb+0x1c>)
1000b6d8:	2201      	movs	r2, #1
1000b6da:	705a      	strb	r2, [r3, #1]
    sms_current_interrupt.source = INT_DUALTIMER2;
1000b6dc:	3205      	adds	r2, #5
1000b6de:	701a      	strb	r2, [r3, #0]
    send_plf_int_msg_ind(DUALTIMER_TIMER2_CALLBACK, TIMER_EXPIRED_CALLBACK_TYPE_DETECT, NULL, 0);
1000b6e0:	2300      	movs	r3, #0
1000b6e2:	2200      	movs	r2, #0
1000b6e4:	2101      	movs	r1, #1
1000b6e6:	2041      	movs	r0, #65	; 0x41
1000b6e8:	4c02      	ldr	r4, [pc, #8]	; (1000b6f4 <sms_dualtimer2_cb+0x20>)
1000b6ea:	47a0      	blx	r4
}
1000b6ec:	bd10      	pop	{r4, pc}
1000b6ee:	46c0      	nop			; (mov r8, r8)
1000b6f0:	1001a0f8 	.word	0x1001a0f8
1000b6f4:	1000f3c1 	.word	0x1000f3c1

1000b6f8 <sms_dualtimer1_fn>:


void sms_dualtimer1_fn(void)
{
1000b6f8:	b510      	push	{r4, lr}
    //sms_button_toggle_interrupt(SMS_BTN_INT_DISABLE, SMS_BTN_INT_DISABLE);
    switch(timer1_current_mode) {
1000b6fa:	4b7c      	ldr	r3, [pc, #496]	; (1000b8ec <sms_dualtimer1_fn+0x1f4>)
1000b6fc:	781b      	ldrb	r3, [r3, #0]
1000b6fe:	b2db      	uxtb	r3, r3
1000b700:	2b01      	cmp	r3, #1
1000b702:	d003      	beq.n	1000b70c <sms_dualtimer1_fn+0x14>
1000b704:	2b02      	cmp	r3, #2
1000b706:	d100      	bne.n	1000b70a <sms_dualtimer1_fn+0x12>
1000b708:	e0ae      	b.n	1000b868 <sms_dualtimer1_fn+0x170>
1000b70a:	e0e7      	b.n	1000b8dc <sms_dualtimer1_fn+0x1e4>
        /* Timer1 mode = STARTUP */
        case TIMER1_MODE_STARTUP:
        {
            timer1_current_mode = TIMER1_MODE_NONE;
1000b70c:	2200      	movs	r2, #0
1000b70e:	4b77      	ldr	r3, [pc, #476]	; (1000b8ec <sms_dualtimer1_fn+0x1f4>)
1000b710:	701a      	strb	r2, [r3, #0]
            button_instance.previous_state = button_instance.current_state;
1000b712:	4c77      	ldr	r4, [pc, #476]	; (1000b8f0 <sms_dualtimer1_fn+0x1f8>)
1000b714:	7863      	ldrb	r3, [r4, #1]
1000b716:	7023      	strb	r3, [r4, #0]
            button_instance.current_state = sms_button_get_state();
1000b718:	4b76      	ldr	r3, [pc, #472]	; (1000b8f4 <sms_dualtimer1_fn+0x1fc>)
1000b71a:	4798      	blx	r3
1000b71c:	7060      	strb	r0, [r4, #1]
            sms_monitor_get_states("[sms_dualtimer1_fn]");
1000b71e:	4876      	ldr	r0, [pc, #472]	; (1000b8f8 <sms_dualtimer1_fn+0x200>)
1000b720:	4b76      	ldr	r3, [pc, #472]	; (1000b8fc <sms_dualtimer1_fn+0x204>)
1000b722:	4798      	blx	r3
            
            switch(button_instance.previous_state) {
1000b724:	7823      	ldrb	r3, [r4, #0]
1000b726:	2b01      	cmp	r3, #1
1000b728:	d002      	beq.n	1000b730 <sms_dualtimer1_fn+0x38>
1000b72a:	2b02      	cmp	r3, #2
1000b72c:	d04c      	beq.n	1000b7c8 <sms_dualtimer1_fn+0xd0>
1000b72e:	e093      	b.n	1000b858 <sms_dualtimer1_fn+0x160>
                // --- Timer1 mode = STARTUP: switch prev_state ---
                case BUTTON_STATE_B0:
                switch(button_instance.current_state) {
1000b730:	4b6f      	ldr	r3, [pc, #444]	; (1000b8f0 <sms_dualtimer1_fn+0x1f8>)
1000b732:	785b      	ldrb	r3, [r3, #1]
1000b734:	2b01      	cmp	r3, #1
1000b736:	d002      	beq.n	1000b73e <sms_dualtimer1_fn+0x46>
1000b738:	2b02      	cmp	r3, #2
1000b73a:	d023      	beq.n	1000b784 <sms_dualtimer1_fn+0x8c>
1000b73c:	e03b      	b.n	1000b7b6 <sms_dualtimer1_fn+0xbe>
                    // --- prev_state = b0: switch current_state ---
                    case BUTTON_STATE_B0:
                    if(ble_current_state == BLE_STATE_POWEROFF) {
1000b73e:	4b70      	ldr	r3, [pc, #448]	; (1000b900 <sms_dualtimer1_fn+0x208>)
1000b740:	781b      	ldrb	r3, [r3, #0]
1000b742:	2b00      	cmp	r3, #0
1000b744:	d115      	bne.n	1000b772 <sms_dualtimer1_fn+0x7a>
                        sms_btn_cnt++;
1000b746:	4a6f      	ldr	r2, [pc, #444]	; (1000b904 <sms_dualtimer1_fn+0x20c>)
1000b748:	7813      	ldrb	r3, [r2, #0]
1000b74a:	3301      	adds	r3, #1
1000b74c:	b2db      	uxtb	r3, r3
1000b74e:	7013      	strb	r3, [r2, #0]
                        if(sms_btn_cnt >= SMS_BTN_STARTUP_CNT) {
1000b750:	2b0f      	cmp	r3, #15
1000b752:	d905      	bls.n	1000b760 <sms_dualtimer1_fn+0x68>
                            timer1_current_mode = TIMER1_MODE_NONE;
1000b754:	2200      	movs	r2, #0
1000b756:	4b65      	ldr	r3, [pc, #404]	; (1000b8ec <sms_dualtimer1_fn+0x1f4>)
1000b758:	701a      	strb	r2, [r3, #0]
                            sms_ble_startup();
1000b75a:	4b6b      	ldr	r3, [pc, #428]	; (1000b908 <sms_dualtimer1_fn+0x210>)
1000b75c:	4798      	blx	r3
1000b75e:	e0c4      	b.n	1000b8ea <sms_dualtimer1_fn+0x1f2>
                        }
                        else {
                            //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                            timer1_current_mode = TIMER1_MODE_STARTUP;
1000b760:	2201      	movs	r2, #1
1000b762:	4b62      	ldr	r3, [pc, #392]	; (1000b8ec <sms_dualtimer1_fn+0x1f4>)
1000b764:	701a      	strb	r2, [r3, #0]
                            //ulp_ready = false;
                            sms_dualtimer_start(TIMER_UNIT_MS, SMS_BTN_STARTUP_MS, DUALTIMER_TIMER1);
1000b766:	2200      	movs	r2, #0
1000b768:	21fa      	movs	r1, #250	; 0xfa
1000b76a:	2001      	movs	r0, #1
1000b76c:	4b67      	ldr	r3, [pc, #412]	; (1000b90c <sms_dualtimer1_fn+0x214>)
1000b76e:	4798      	blx	r3
1000b770:	e0bb      	b.n	1000b8ea <sms_dualtimer1_fn+0x1f2>
                        }
                    }
                    else {
                        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                        if(timer2_current_mode == TIMER2_MODE_NONE) {
1000b772:	4b67      	ldr	r3, [pc, #412]	; (1000b910 <sms_dualtimer1_fn+0x218>)
1000b774:	781b      	ldrb	r3, [r3, #0]
1000b776:	2b00      	cmp	r3, #0
1000b778:	d000      	beq.n	1000b77c <sms_dualtimer1_fn+0x84>
1000b77a:	e0b6      	b.n	1000b8ea <sms_dualtimer1_fn+0x1f2>
                            //release_sleep_lock();
                            ulp_ready = true;
1000b77c:	2201      	movs	r2, #1
1000b77e:	4b65      	ldr	r3, [pc, #404]	; (1000b914 <sms_dualtimer1_fn+0x21c>)
1000b780:	701a      	strb	r2, [r3, #0]
1000b782:	e0b2      	b.n	1000b8ea <sms_dualtimer1_fn+0x1f2>
                    }
                    break;
                    
                    // --- prev_state = b0: switch current_state ---
                    case BUTTON_STATE_B1:
                    if(ble_current_state == BLE_STATE_POWEROFF) {
1000b784:	4b5e      	ldr	r3, [pc, #376]	; (1000b900 <sms_dualtimer1_fn+0x208>)
1000b786:	781b      	ldrb	r3, [r3, #0]
1000b788:	2b00      	cmp	r3, #0
1000b78a:	d10b      	bne.n	1000b7a4 <sms_dualtimer1_fn+0xac>
                        sms_btn_cnt = 0;
1000b78c:	2200      	movs	r2, #0
1000b78e:	4b5d      	ldr	r3, [pc, #372]	; (1000b904 <sms_dualtimer1_fn+0x20c>)
1000b790:	701a      	strb	r2, [r3, #0]
                        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                        timer1_current_mode = TIMER1_MODE_STARTUP;
1000b792:	3201      	adds	r2, #1
1000b794:	4b55      	ldr	r3, [pc, #340]	; (1000b8ec <sms_dualtimer1_fn+0x1f4>)
1000b796:	701a      	strb	r2, [r3, #0]
                        //ulp_ready = false;
                        sms_dualtimer_start(TIMER_UNIT_MS, SMS_BLINK_STARTUP_MS, DUALTIMER_TIMER1);
1000b798:	2200      	movs	r2, #0
1000b79a:	2164      	movs	r1, #100	; 0x64
1000b79c:	2001      	movs	r0, #1
1000b79e:	4b5b      	ldr	r3, [pc, #364]	; (1000b90c <sms_dualtimer1_fn+0x214>)
1000b7a0:	4798      	blx	r3
1000b7a2:	e0a2      	b.n	1000b8ea <sms_dualtimer1_fn+0x1f2>
                    }
                    else {
                        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                        if(timer2_current_mode == TIMER2_MODE_NONE) {
1000b7a4:	4b5a      	ldr	r3, [pc, #360]	; (1000b910 <sms_dualtimer1_fn+0x218>)
1000b7a6:	781b      	ldrb	r3, [r3, #0]
1000b7a8:	2b00      	cmp	r3, #0
1000b7aa:	d000      	beq.n	1000b7ae <sms_dualtimer1_fn+0xb6>
1000b7ac:	e09d      	b.n	1000b8ea <sms_dualtimer1_fn+0x1f2>
                            //release_sleep_lock();
                            ulp_ready = true;
1000b7ae:	2201      	movs	r2, #1
1000b7b0:	4b58      	ldr	r3, [pc, #352]	; (1000b914 <sms_dualtimer1_fn+0x21c>)
1000b7b2:	701a      	strb	r2, [r3, #0]
1000b7b4:	e099      	b.n	1000b8ea <sms_dualtimer1_fn+0x1f2>
                    // --- prev_state = b0: switch current_state ---
                    case BUTTON_STATE_BOTH:
                    case BUTTON_STATE_NONE:
                    default:
                    //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                    if(timer2_current_mode == TIMER2_MODE_NONE) {
1000b7b6:	4b56      	ldr	r3, [pc, #344]	; (1000b910 <sms_dualtimer1_fn+0x218>)
1000b7b8:	781b      	ldrb	r3, [r3, #0]
1000b7ba:	2b00      	cmp	r3, #0
1000b7bc:	d000      	beq.n	1000b7c0 <sms_dualtimer1_fn+0xc8>
1000b7be:	e094      	b.n	1000b8ea <sms_dualtimer1_fn+0x1f2>
                        //release_sleep_lock();
                        ulp_ready = true;
1000b7c0:	2201      	movs	r2, #1
1000b7c2:	4b54      	ldr	r3, [pc, #336]	; (1000b914 <sms_dualtimer1_fn+0x21c>)
1000b7c4:	701a      	strb	r2, [r3, #0]
1000b7c6:	e090      	b.n	1000b8ea <sms_dualtimer1_fn+0x1f2>
                }
                break;
                
                // --- Timer1 mode = STARTUP: switch prev_state ---
                case BUTTON_STATE_B1:
                switch(button_instance.current_state) {
1000b7c8:	4b49      	ldr	r3, [pc, #292]	; (1000b8f0 <sms_dualtimer1_fn+0x1f8>)
1000b7ca:	785b      	ldrb	r3, [r3, #1]
1000b7cc:	2b01      	cmp	r3, #1
1000b7ce:	d023      	beq.n	1000b818 <sms_dualtimer1_fn+0x120>
1000b7d0:	2b02      	cmp	r3, #2
1000b7d2:	d139      	bne.n	1000b848 <sms_dualtimer1_fn+0x150>
                    // --- prev_state = b1: switch current_state ---
                    case BUTTON_STATE_B1:
                    if(ble_current_state == BLE_STATE_POWEROFF) {
1000b7d4:	4b4a      	ldr	r3, [pc, #296]	; (1000b900 <sms_dualtimer1_fn+0x208>)
1000b7d6:	781b      	ldrb	r3, [r3, #0]
1000b7d8:	2b00      	cmp	r3, #0
1000b7da:	d115      	bne.n	1000b808 <sms_dualtimer1_fn+0x110>
                        sms_btn_cnt++;
1000b7dc:	4a49      	ldr	r2, [pc, #292]	; (1000b904 <sms_dualtimer1_fn+0x20c>)
1000b7de:	7813      	ldrb	r3, [r2, #0]
1000b7e0:	3301      	adds	r3, #1
1000b7e2:	b2db      	uxtb	r3, r3
1000b7e4:	7013      	strb	r3, [r2, #0]
                        if(sms_btn_cnt >= SMS_BTN_STARTUP_CNT) {
1000b7e6:	2b0f      	cmp	r3, #15
1000b7e8:	d905      	bls.n	1000b7f6 <sms_dualtimer1_fn+0xfe>
                            timer1_current_mode = TIMER1_MODE_NONE;
1000b7ea:	2200      	movs	r2, #0
1000b7ec:	4b3f      	ldr	r3, [pc, #252]	; (1000b8ec <sms_dualtimer1_fn+0x1f4>)
1000b7ee:	701a      	strb	r2, [r3, #0]
                            sms_ble_startup();
1000b7f0:	4b45      	ldr	r3, [pc, #276]	; (1000b908 <sms_dualtimer1_fn+0x210>)
1000b7f2:	4798      	blx	r3
1000b7f4:	e079      	b.n	1000b8ea <sms_dualtimer1_fn+0x1f2>
                        }
                        else {
                            //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                            timer1_current_mode = TIMER1_MODE_STARTUP;
1000b7f6:	2201      	movs	r2, #1
1000b7f8:	4b3c      	ldr	r3, [pc, #240]	; (1000b8ec <sms_dualtimer1_fn+0x1f4>)
1000b7fa:	701a      	strb	r2, [r3, #0]
                            //ulp_ready = false;
                            sms_dualtimer_start(TIMER_UNIT_MS, SMS_BTN_STARTUP_MS, DUALTIMER_TIMER1);
1000b7fc:	2200      	movs	r2, #0
1000b7fe:	21fa      	movs	r1, #250	; 0xfa
1000b800:	2001      	movs	r0, #1
1000b802:	4b42      	ldr	r3, [pc, #264]	; (1000b90c <sms_dualtimer1_fn+0x214>)
1000b804:	4798      	blx	r3
1000b806:	e070      	b.n	1000b8ea <sms_dualtimer1_fn+0x1f2>
                        }
                    }
                    else {
                        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                        if(timer2_current_mode == TIMER2_MODE_NONE) {
1000b808:	4b41      	ldr	r3, [pc, #260]	; (1000b910 <sms_dualtimer1_fn+0x218>)
1000b80a:	781b      	ldrb	r3, [r3, #0]
1000b80c:	2b00      	cmp	r3, #0
1000b80e:	d16c      	bne.n	1000b8ea <sms_dualtimer1_fn+0x1f2>
                            //release_sleep_lock();
                            ulp_ready = true;
1000b810:	2201      	movs	r2, #1
1000b812:	4b40      	ldr	r3, [pc, #256]	; (1000b914 <sms_dualtimer1_fn+0x21c>)
1000b814:	701a      	strb	r2, [r3, #0]
1000b816:	e068      	b.n	1000b8ea <sms_dualtimer1_fn+0x1f2>
                    }
                    break;
                    
                    // --- prev_state = b1: switch current_state ---
                    case BUTTON_STATE_B0:
                    if(ble_current_state == BLE_STATE_POWEROFF) {
1000b818:	4b39      	ldr	r3, [pc, #228]	; (1000b900 <sms_dualtimer1_fn+0x208>)
1000b81a:	781b      	ldrb	r3, [r3, #0]
1000b81c:	2b00      	cmp	r3, #0
1000b81e:	d10b      	bne.n	1000b838 <sms_dualtimer1_fn+0x140>
                        sms_btn_cnt = 0;
1000b820:	2200      	movs	r2, #0
1000b822:	4b38      	ldr	r3, [pc, #224]	; (1000b904 <sms_dualtimer1_fn+0x20c>)
1000b824:	701a      	strb	r2, [r3, #0]
                        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                        timer1_current_mode = TIMER1_MODE_STARTUP;
1000b826:	3201      	adds	r2, #1
1000b828:	4b30      	ldr	r3, [pc, #192]	; (1000b8ec <sms_dualtimer1_fn+0x1f4>)
1000b82a:	701a      	strb	r2, [r3, #0]
                        //ulp_ready = false;
                        sms_dualtimer_start(TIMER_UNIT_MS, SMS_BLINK_STARTUP_MS, DUALTIMER_TIMER1);
1000b82c:	2200      	movs	r2, #0
1000b82e:	2164      	movs	r1, #100	; 0x64
1000b830:	2001      	movs	r0, #1
1000b832:	4b36      	ldr	r3, [pc, #216]	; (1000b90c <sms_dualtimer1_fn+0x214>)
1000b834:	4798      	blx	r3
1000b836:	e058      	b.n	1000b8ea <sms_dualtimer1_fn+0x1f2>
                    }
                    else {
                        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                        if(timer2_current_mode == TIMER2_MODE_NONE) {
1000b838:	4b35      	ldr	r3, [pc, #212]	; (1000b910 <sms_dualtimer1_fn+0x218>)
1000b83a:	781b      	ldrb	r3, [r3, #0]
1000b83c:	2b00      	cmp	r3, #0
1000b83e:	d154      	bne.n	1000b8ea <sms_dualtimer1_fn+0x1f2>
                            //release_sleep_lock();
                            ulp_ready = true;
1000b840:	2201      	movs	r2, #1
1000b842:	4b34      	ldr	r3, [pc, #208]	; (1000b914 <sms_dualtimer1_fn+0x21c>)
1000b844:	701a      	strb	r2, [r3, #0]
1000b846:	e050      	b.n	1000b8ea <sms_dualtimer1_fn+0x1f2>
                    // --- prev_state = b1: switch current_state ---
                    case BUTTON_STATE_NONE:
                    case BUTTON_STATE_BOTH:
                    default:
                    //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                    if(timer2_current_mode == TIMER2_MODE_NONE) {
1000b848:	4b31      	ldr	r3, [pc, #196]	; (1000b910 <sms_dualtimer1_fn+0x218>)
1000b84a:	781b      	ldrb	r3, [r3, #0]
1000b84c:	2b00      	cmp	r3, #0
1000b84e:	d14c      	bne.n	1000b8ea <sms_dualtimer1_fn+0x1f2>
                        //release_sleep_lock();
                        ulp_ready = true;
1000b850:	2201      	movs	r2, #1
1000b852:	4b30      	ldr	r3, [pc, #192]	; (1000b914 <sms_dualtimer1_fn+0x21c>)
1000b854:	701a      	strb	r2, [r3, #0]
1000b856:	e048      	b.n	1000b8ea <sms_dualtimer1_fn+0x1f2>
                case BUTTON_STATE_NONE:
                case BUTTON_STATE_BOTH:
                default:
                {
                    //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                    if(timer2_current_mode == TIMER2_MODE_NONE) {
1000b858:	4b2d      	ldr	r3, [pc, #180]	; (1000b910 <sms_dualtimer1_fn+0x218>)
1000b85a:	781b      	ldrb	r3, [r3, #0]
1000b85c:	2b00      	cmp	r3, #0
1000b85e:	d144      	bne.n	1000b8ea <sms_dualtimer1_fn+0x1f2>
                        //release_sleep_lock();
                        ulp_ready = true;
1000b860:	2201      	movs	r2, #1
1000b862:	4b2c      	ldr	r3, [pc, #176]	; (1000b914 <sms_dualtimer1_fn+0x21c>)
1000b864:	701a      	strb	r2, [r3, #0]
1000b866:	e040      	b.n	1000b8ea <sms_dualtimer1_fn+0x1f2>
        
        /* Timer1 mode = SHUTDOWN */
        case TIMER1_MODE_SHUTDOWN:
        {
            //timer1_current_mode = TIMER1_MODE_NONE;
            button_instance.previous_state = button_instance.current_state;
1000b868:	4c21      	ldr	r4, [pc, #132]	; (1000b8f0 <sms_dualtimer1_fn+0x1f8>)
1000b86a:	7863      	ldrb	r3, [r4, #1]
1000b86c:	7023      	strb	r3, [r4, #0]
            button_instance.current_state = sms_button_get_state();
1000b86e:	4b21      	ldr	r3, [pc, #132]	; (1000b8f4 <sms_dualtimer1_fn+0x1fc>)
1000b870:	4798      	blx	r3
1000b872:	7060      	strb	r0, [r4, #1]
            sms_monitor_get_states("[sms_dualtimer1_fn]");
1000b874:	4820      	ldr	r0, [pc, #128]	; (1000b8f8 <sms_dualtimer1_fn+0x200>)
1000b876:	4b21      	ldr	r3, [pc, #132]	; (1000b8fc <sms_dualtimer1_fn+0x204>)
1000b878:	4798      	blx	r3
            
            if((button_instance.previous_state == BUTTON_STATE_BOTH) && (button_instance.current_state == BUTTON_STATE_BOTH)) {
1000b87a:	8822      	ldrh	r2, [r4, #0]
1000b87c:	4b26      	ldr	r3, [pc, #152]	; (1000b918 <sms_dualtimer1_fn+0x220>)
1000b87e:	429a      	cmp	r2, r3
1000b880:	d112      	bne.n	1000b8a8 <sms_dualtimer1_fn+0x1b0>
                sms_btn_cnt++;
1000b882:	4a20      	ldr	r2, [pc, #128]	; (1000b904 <sms_dualtimer1_fn+0x20c>)
1000b884:	7813      	ldrb	r3, [r2, #0]
1000b886:	3301      	adds	r3, #1
1000b888:	b2db      	uxtb	r3, r3
1000b88a:	7013      	strb	r3, [r2, #0]
                if(sms_btn_cnt >= SMS_BTN_SHTDWN_CNT) {
1000b88c:	2b09      	cmp	r3, #9
1000b88e:	d902      	bls.n	1000b896 <sms_dualtimer1_fn+0x19e>
                    sms_ble_power_down();
1000b890:	4b22      	ldr	r3, [pc, #136]	; (1000b91c <sms_dualtimer1_fn+0x224>)
1000b892:	4798      	blx	r3
1000b894:	e029      	b.n	1000b8ea <sms_dualtimer1_fn+0x1f2>
                }
                else {
                    //sms_sensors_toggle_interrupt(SMS_EXTINT_DISABLE);
                    timer1_current_mode = TIMER1_MODE_SHUTDOWN;
1000b896:	2202      	movs	r2, #2
1000b898:	4b14      	ldr	r3, [pc, #80]	; (1000b8ec <sms_dualtimer1_fn+0x1f4>)
1000b89a:	701a      	strb	r2, [r3, #0]
                    sms_dualtimer_start(TIMER_UNIT_MS, SMS_BTN_SHTDWN_MS, DUALTIMER_TIMER1);
1000b89c:	2200      	movs	r2, #0
1000b89e:	21fa      	movs	r1, #250	; 0xfa
1000b8a0:	2001      	movs	r0, #1
1000b8a2:	4b1a      	ldr	r3, [pc, #104]	; (1000b90c <sms_dualtimer1_fn+0x214>)
1000b8a4:	4798      	blx	r3
1000b8a6:	e020      	b.n	1000b8ea <sms_dualtimer1_fn+0x1f2>
                }
            }
            else {
                if(pressure_device.state == PRESSURE_STATE_STDBY) {
1000b8a8:	2328      	movs	r3, #40	; 0x28
1000b8aa:	4a1d      	ldr	r2, [pc, #116]	; (1000b920 <sms_dualtimer1_fn+0x228>)
1000b8ac:	5cd3      	ldrb	r3, [r2, r3]
1000b8ae:	2b01      	cmp	r3, #1
1000b8b0:	d109      	bne.n	1000b8c6 <sms_dualtimer1_fn+0x1ce>
                    DBG_LOG_DEV("[sms_dualtimer1_fn]\t\tStarting sensors (shutting down)...");
1000b8b2:	481c      	ldr	r0, [pc, #112]	; (1000b924 <sms_dualtimer1_fn+0x22c>)
1000b8b4:	4b1c      	ldr	r3, [pc, #112]	; (1000b928 <sms_dualtimer1_fn+0x230>)
1000b8b6:	4798      	blx	r3
1000b8b8:	481c      	ldr	r0, [pc, #112]	; (1000b92c <sms_dualtimer1_fn+0x234>)
1000b8ba:	4b1d      	ldr	r3, [pc, #116]	; (1000b930 <sms_dualtimer1_fn+0x238>)
1000b8bc:	4798      	blx	r3
                    sms_sensors_interrupt_toggle(false, true);
1000b8be:	2101      	movs	r1, #1
1000b8c0:	2000      	movs	r0, #0
1000b8c2:	4b1c      	ldr	r3, [pc, #112]	; (1000b934 <sms_dualtimer1_fn+0x23c>)
1000b8c4:	4798      	blx	r3
                }                    
                timer1_current_mode = TIMER1_MODE_NONE;
1000b8c6:	2200      	movs	r2, #0
1000b8c8:	4b08      	ldr	r3, [pc, #32]	; (1000b8ec <sms_dualtimer1_fn+0x1f4>)
1000b8ca:	701a      	strb	r2, [r3, #0]
                if(timer2_current_mode == TIMER2_MODE_NONE) {
1000b8cc:	4b10      	ldr	r3, [pc, #64]	; (1000b910 <sms_dualtimer1_fn+0x218>)
1000b8ce:	781b      	ldrb	r3, [r3, #0]
1000b8d0:	2b00      	cmp	r3, #0
1000b8d2:	d10a      	bne.n	1000b8ea <sms_dualtimer1_fn+0x1f2>
                    ulp_ready = true;
1000b8d4:	3201      	adds	r2, #1
1000b8d6:	4b0f      	ldr	r3, [pc, #60]	; (1000b914 <sms_dualtimer1_fn+0x21c>)
1000b8d8:	701a      	strb	r2, [r3, #0]
1000b8da:	e006      	b.n	1000b8ea <sms_dualtimer1_fn+0x1f2>
        }
        
        case TIMER1_MODE_NONE:
        default:
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
        if(timer2_current_mode == TIMER2_MODE_NONE) {
1000b8dc:	4b0c      	ldr	r3, [pc, #48]	; (1000b910 <sms_dualtimer1_fn+0x218>)
1000b8de:	781b      	ldrb	r3, [r3, #0]
1000b8e0:	2b00      	cmp	r3, #0
1000b8e2:	d102      	bne.n	1000b8ea <sms_dualtimer1_fn+0x1f2>
            //release_sleep_lock();
            ulp_ready = true;
1000b8e4:	2201      	movs	r2, #1
1000b8e6:	4b0b      	ldr	r3, [pc, #44]	; (1000b914 <sms_dualtimer1_fn+0x21c>)
1000b8e8:	701a      	strb	r2, [r3, #0]
        }            
        break;
    } // switch(timer1_current_mode)
}
1000b8ea:	bd10      	pop	{r4, pc}
1000b8ec:	10019f64 	.word	0x10019f64
1000b8f0:	1001a000 	.word	0x1001a000
1000b8f4:	1000a649 	.word	0x1000a649
1000b8f8:	100171b8 	.word	0x100171b8
1000b8fc:	1000a9dd 	.word	0x1000a9dd
1000b900:	1001a110 	.word	0x1001a110
1000b904:	1001a132 	.word	0x1001a132
1000b908:	10009f35 	.word	0x10009f35
1000b90c:	1000b645 	.word	0x1000b645
1000b910:	1001a111 	.word	0x1001a111
1000b914:	10019ff9 	.word	0x10019ff9
1000b918:	00000303 	.word	0x00000303
1000b91c:	10009f4d 	.word	0x10009f4d
1000b920:	1001a074 	.word	0x1001a074
1000b924:	100165a4 	.word	0x100165a4
1000b928:	100153f9 	.word	0x100153f9
1000b92c:	100171cc 	.word	0x100171cc
1000b930:	100152d9 	.word	0x100152d9
1000b934:	1000b395 	.word	0x1000b395

1000b938 <sms_dualtimer2_fn>:

void sms_dualtimer2_fn(void)
{
1000b938:	b510      	push	{r4, lr}
    //sms_button_toggle_interrupt(SMS_BTN_INT_DISABLE, SMS_BTN_INT_DISABLE);
    sms_monitor_get_states("[sms_dualtimer2_fn]");
1000b93a:	4846      	ldr	r0, [pc, #280]	; (1000ba54 <sms_dualtimer2_fn+0x11c>)
1000b93c:	4b46      	ldr	r3, [pc, #280]	; (1000ba58 <sms_dualtimer2_fn+0x120>)
1000b93e:	4798      	blx	r3
    switch(timer2_current_mode) {
1000b940:	4b46      	ldr	r3, [pc, #280]	; (1000ba5c <sms_dualtimer2_fn+0x124>)
1000b942:	781b      	ldrb	r3, [r3, #0]
1000b944:	b2db      	uxtb	r3, r3
1000b946:	2b02      	cmp	r3, #2
1000b948:	d02f      	beq.n	1000b9aa <sms_dualtimer2_fn+0x72>
1000b94a:	2b03      	cmp	r3, #3
1000b94c:	d054      	beq.n	1000b9f8 <sms_dualtimer2_fn+0xc0>
1000b94e:	2b01      	cmp	r3, #1
1000b950:	d17f      	bne.n	1000ba52 <sms_dualtimer2_fn+0x11a>
        case TIMER2_MODE_INDICATION_TOUT:
        timer2_current_mode = TIMER2_MODE_NONE;
1000b952:	2200      	movs	r2, #0
1000b954:	4b41      	ldr	r3, [pc, #260]	; (1000ba5c <sms_dualtimer2_fn+0x124>)
1000b956:	701a      	strb	r2, [r3, #0]
        if(ble_current_state == BLE_STATE_PAIRED) {
1000b958:	4b41      	ldr	r3, [pc, #260]	; (1000ba60 <sms_dualtimer2_fn+0x128>)
1000b95a:	781b      	ldrb	r3, [r3, #0]
1000b95c:	2b22      	cmp	r3, #34	; 0x22
1000b95e:	d107      	bne.n	1000b970 <sms_dualtimer2_fn+0x38>
            //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
            if(timer1_current_mode == TIMER1_MODE_NONE) {
1000b960:	4b40      	ldr	r3, [pc, #256]	; (1000ba64 <sms_dualtimer2_fn+0x12c>)
1000b962:	781b      	ldrb	r3, [r3, #0]
1000b964:	2b00      	cmp	r3, #0
1000b966:	d174      	bne.n	1000ba52 <sms_dualtimer2_fn+0x11a>
                //release_sleep_lock();
                ulp_ready = true;
1000b968:	3201      	adds	r2, #1
1000b96a:	4b3f      	ldr	r3, [pc, #252]	; (1000ba68 <sms_dualtimer2_fn+0x130>)
1000b96c:	701a      	strb	r2, [r3, #0]
1000b96e:	e070      	b.n	1000ba52 <sms_dualtimer2_fn+0x11a>
            }                
        }
        else {
            sms_ble_ind_retry++;
1000b970:	4a3e      	ldr	r2, [pc, #248]	; (1000ba6c <sms_dualtimer2_fn+0x134>)
1000b972:	7813      	ldrb	r3, [r2, #0]
1000b974:	3301      	adds	r3, #1
1000b976:	b2db      	uxtb	r3, r3
1000b978:	7013      	strb	r3, [r2, #0]
            if(sms_ble_ind_retry >= BLE_INDICATION_RETRY_MAX) {
1000b97a:	2b00      	cmp	r3, #0
1000b97c:	d009      	beq.n	1000b992 <sms_dualtimer2_fn+0x5a>
                DBG_LOG_CONT_DEV(" ...giving up!");
1000b97e:	483c      	ldr	r0, [pc, #240]	; (1000ba70 <sms_dualtimer2_fn+0x138>)
1000b980:	4b3c      	ldr	r3, [pc, #240]	; (1000ba74 <sms_dualtimer2_fn+0x13c>)
1000b982:	4798      	blx	r3
                //DBG_LOG_DEV("[sms_dualtimer2_fn]\tTimer1 mode: %d", timer1_current_mode);
                timer2_current_mode = TIMER2_MODE_NONE;
1000b984:	2200      	movs	r2, #0
1000b986:	4b35      	ldr	r3, [pc, #212]	; (1000ba5c <sms_dualtimer2_fn+0x124>)
1000b988:	701a      	strb	r2, [r3, #0]
                ble_current_state = BLE_STATE_PAIRED;
1000b98a:	3222      	adds	r2, #34	; 0x22
1000b98c:	4b34      	ldr	r3, [pc, #208]	; (1000ba60 <sms_dualtimer2_fn+0x128>)
1000b98e:	701a      	strb	r2, [r3, #0]
1000b990:	e05f      	b.n	1000ba52 <sms_dualtimer2_fn+0x11a>
                //DBG_LOG_DEV("[sms_dualtimer2_fn]\t\tStarting sensors...");
                //sms_sensors_toggle_interrupt(SMS_EXTINT_ENABLE);
                //if(timer1_current_mode == TIMER1_MODE_NONE) release_sleep_lock();
            }
            else {
                DBG_LOG_CONT_DEV(" ...waiting... counter: %d", sms_ble_ind_retry);
1000b992:	2100      	movs	r1, #0
1000b994:	4838      	ldr	r0, [pc, #224]	; (1000ba78 <sms_dualtimer2_fn+0x140>)
1000b996:	4b37      	ldr	r3, [pc, #220]	; (1000ba74 <sms_dualtimer2_fn+0x13c>)
1000b998:	4798      	blx	r3
                //sms_ble_send_characteristic(BLE_CHAR_PRESSURE);
                timer2_current_mode = TIMER2_MODE_INDICATION_TOUT;
1000b99a:	2201      	movs	r2, #1
1000b99c:	4b2f      	ldr	r3, [pc, #188]	; (1000ba5c <sms_dualtimer2_fn+0x124>)
1000b99e:	701a      	strb	r2, [r3, #0]
                //ulp_ready = false;
                sms_dualtimer_start(TIMER_UNIT_MS, BLE_INDICATION_TOUT_MS, DUALTIMER_TIMER2);
1000b9a0:	2164      	movs	r1, #100	; 0x64
1000b9a2:	2001      	movs	r0, #1
1000b9a4:	4b35      	ldr	r3, [pc, #212]	; (1000ba7c <sms_dualtimer2_fn+0x144>)
1000b9a6:	4798      	blx	r3
1000b9a8:	e053      	b.n	1000ba52 <sms_dualtimer2_fn+0x11a>
            }
        }
        break;
        
        case TIMER2_MODE_LED_STARTUP:
        DBG_LOG_DEV("[sms_dualtimer2_fn]\t\tBlinking startup...");
1000b9aa:	4835      	ldr	r0, [pc, #212]	; (1000ba80 <sms_dualtimer2_fn+0x148>)
1000b9ac:	4b35      	ldr	r3, [pc, #212]	; (1000ba84 <sms_dualtimer2_fn+0x14c>)
1000b9ae:	4798      	blx	r3
1000b9b0:	4835      	ldr	r0, [pc, #212]	; (1000ba88 <sms_dualtimer2_fn+0x150>)
1000b9b2:	4b30      	ldr	r3, [pc, #192]	; (1000ba74 <sms_dualtimer2_fn+0x13c>)
1000b9b4:	4798      	blx	r3
        timer2_current_mode = TIMER2_MODE_NONE;
1000b9b6:	2200      	movs	r2, #0
1000b9b8:	4b28      	ldr	r3, [pc, #160]	; (1000ba5c <sms_dualtimer2_fn+0x124>)
1000b9ba:	701a      	strb	r2, [r3, #0]
        sms_led_blink_cnt++;
1000b9bc:	4a33      	ldr	r2, [pc, #204]	; (1000ba8c <sms_dualtimer2_fn+0x154>)
1000b9be:	7813      	ldrb	r3, [r2, #0]
1000b9c0:	3301      	adds	r3, #1
1000b9c2:	b2db      	uxtb	r3, r3
1000b9c4:	7013      	strb	r3, [r2, #0]
        if(sms_led_blink_cnt >= SMS_BLINK_STARTUP_CNT) {
1000b9c6:	7813      	ldrb	r3, [r2, #0]
1000b9c8:	b2db      	uxtb	r3, r3
1000b9ca:	2b07      	cmp	r3, #7
1000b9cc:	d908      	bls.n	1000b9e0 <sms_dualtimer2_fn+0xa8>
            sms_led_switch_off(SMS_LED_0_PIN);
1000b9ce:	2016      	movs	r0, #22
1000b9d0:	4b2f      	ldr	r3, [pc, #188]	; (1000ba90 <sms_dualtimer2_fn+0x158>)
1000b9d2:	4798      	blx	r3
            //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
            /* Blinking done... starting ble advertisement */
            //DBG_LOG_DEV("[sms_dualtimer2_fn]\tSMS awake... starting advertisement");
            sms_ble_advertise();
1000b9d4:	4b2f      	ldr	r3, [pc, #188]	; (1000ba94 <sms_dualtimer2_fn+0x15c>)
1000b9d6:	4798      	blx	r3
            ulp_ready = true;
1000b9d8:	2201      	movs	r2, #1
1000b9da:	4b23      	ldr	r3, [pc, #140]	; (1000ba68 <sms_dualtimer2_fn+0x130>)
1000b9dc:	701a      	strb	r2, [r3, #0]
1000b9de:	e038      	b.n	1000ba52 <sms_dualtimer2_fn+0x11a>
        }
        else {
            //DBG_LOG_DEV("[sms_dualtimer2_fn]\tBlinking up... cnt = %d", sms_led_blink_cnt);
            sms_led_toggle(SMS_LED_0_PIN);
1000b9e0:	2016      	movs	r0, #22
1000b9e2:	4b2d      	ldr	r3, [pc, #180]	; (1000ba98 <sms_dualtimer2_fn+0x160>)
1000b9e4:	4798      	blx	r3
            timer2_current_mode = TIMER2_MODE_LED_STARTUP;
1000b9e6:	2202      	movs	r2, #2
1000b9e8:	4b1c      	ldr	r3, [pc, #112]	; (1000ba5c <sms_dualtimer2_fn+0x124>)
1000b9ea:	701a      	strb	r2, [r3, #0]
            //ulp_ready = false;
            sms_dualtimer_start(TIMER_UNIT_MS, SMS_BLINK_STARTUP_MS, DUALTIMER_TIMER2);
1000b9ec:	3a01      	subs	r2, #1
1000b9ee:	2164      	movs	r1, #100	; 0x64
1000b9f0:	2001      	movs	r0, #1
1000b9f2:	4b22      	ldr	r3, [pc, #136]	; (1000ba7c <sms_dualtimer2_fn+0x144>)
1000b9f4:	4798      	blx	r3
1000b9f6:	e02c      	b.n	1000ba52 <sms_dualtimer2_fn+0x11a>
        }
        break;
        
        case TIMER2_MODE_LED_SHUTDOWN:
        DBG_LOG_DEV("[sms_dualtimer2_fn]\t\tBlinking shutdown...");
1000b9f8:	4821      	ldr	r0, [pc, #132]	; (1000ba80 <sms_dualtimer2_fn+0x148>)
1000b9fa:	4b22      	ldr	r3, [pc, #136]	; (1000ba84 <sms_dualtimer2_fn+0x14c>)
1000b9fc:	4798      	blx	r3
1000b9fe:	4827      	ldr	r0, [pc, #156]	; (1000ba9c <sms_dualtimer2_fn+0x164>)
1000ba00:	4b1c      	ldr	r3, [pc, #112]	; (1000ba74 <sms_dualtimer2_fn+0x13c>)
1000ba02:	4798      	blx	r3
        timer2_current_mode = TIMER2_MODE_NONE;
1000ba04:	2200      	movs	r2, #0
1000ba06:	4b15      	ldr	r3, [pc, #84]	; (1000ba5c <sms_dualtimer2_fn+0x124>)
1000ba08:	701a      	strb	r2, [r3, #0]
        sms_led_blink_cnt++;
1000ba0a:	4a20      	ldr	r2, [pc, #128]	; (1000ba8c <sms_dualtimer2_fn+0x154>)
1000ba0c:	7813      	ldrb	r3, [r2, #0]
1000ba0e:	3301      	adds	r3, #1
1000ba10:	b2db      	uxtb	r3, r3
1000ba12:	7013      	strb	r3, [r2, #0]
        if(sms_led_blink_cnt >= SMS_BLINK_SHTDWN_CNT) {
1000ba14:	7813      	ldrb	r3, [r2, #0]
1000ba16:	b2db      	uxtb	r3, r3
1000ba18:	2b03      	cmp	r3, #3
1000ba1a:	d90e      	bls.n	1000ba3a <sms_dualtimer2_fn+0x102>
            sms_led_switch_off(SMS_LED_0_PIN);
1000ba1c:	2016      	movs	r0, #22
1000ba1e:	4b1c      	ldr	r3, [pc, #112]	; (1000ba90 <sms_dualtimer2_fn+0x158>)
1000ba20:	4798      	blx	r3
            DBG_LOG_DEV("[sms_dualtimer2_fn]\t\tPowering off...");
1000ba22:	4817      	ldr	r0, [pc, #92]	; (1000ba80 <sms_dualtimer2_fn+0x148>)
1000ba24:	4b17      	ldr	r3, [pc, #92]	; (1000ba84 <sms_dualtimer2_fn+0x14c>)
1000ba26:	4798      	blx	r3
1000ba28:	481d      	ldr	r0, [pc, #116]	; (1000baa0 <sms_dualtimer2_fn+0x168>)
1000ba2a:	4b12      	ldr	r3, [pc, #72]	; (1000ba74 <sms_dualtimer2_fn+0x13c>)
1000ba2c:	4798      	blx	r3
            //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
            sms_init_variables();
1000ba2e:	4b1d      	ldr	r3, [pc, #116]	; (1000baa4 <sms_dualtimer2_fn+0x16c>)
1000ba30:	4798      	blx	r3
            ulp_ready = true;
1000ba32:	2201      	movs	r2, #1
1000ba34:	4b0c      	ldr	r3, [pc, #48]	; (1000ba68 <sms_dualtimer2_fn+0x130>)
1000ba36:	701a      	strb	r2, [r3, #0]
1000ba38:	e00b      	b.n	1000ba52 <sms_dualtimer2_fn+0x11a>
            //release_sleep_lock();
        }
        else {
            //DBG_LOG_DEV("[sms_dualtimer2_fn]\tBLinking off... cnt = %d", sms_led_blink_cnt);
            sms_led_toggle(SMS_LED_0_PIN);
1000ba3a:	2016      	movs	r0, #22
1000ba3c:	4b16      	ldr	r3, [pc, #88]	; (1000ba98 <sms_dualtimer2_fn+0x160>)
1000ba3e:	4798      	blx	r3
            timer2_current_mode = TIMER2_MODE_LED_SHUTDOWN;
1000ba40:	2203      	movs	r2, #3
1000ba42:	4b06      	ldr	r3, [pc, #24]	; (1000ba5c <sms_dualtimer2_fn+0x124>)
1000ba44:	701a      	strb	r2, [r3, #0]
            //ulp_ready = false;
            sms_dualtimer_start(TIMER_UNIT_MS, SMS_BLINK_SHTDWN_MS, DUALTIMER_TIMER2);
1000ba46:	3a02      	subs	r2, #2
1000ba48:	21c8      	movs	r1, #200	; 0xc8
1000ba4a:	0049      	lsls	r1, r1, #1
1000ba4c:	2001      	movs	r0, #1
1000ba4e:	4b0b      	ldr	r3, [pc, #44]	; (1000ba7c <sms_dualtimer2_fn+0x144>)
1000ba50:	4798      	blx	r3
        case TIMER2_MODE_LED_CONNECTION_LOST:
        case TIMER2_MODE_NONE:
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
        break;
    }
1000ba52:	bd10      	pop	{r4, pc}
1000ba54:	10017208 	.word	0x10017208
1000ba58:	1000a9dd 	.word	0x1000a9dd
1000ba5c:	1001a111 	.word	0x1001a111
1000ba60:	1001a110 	.word	0x1001a110
1000ba64:	10019f64 	.word	0x10019f64
1000ba68:	10019ff9 	.word	0x10019ff9
1000ba6c:	1001a105 	.word	0x1001a105
1000ba70:	1001721c 	.word	0x1001721c
1000ba74:	100152d9 	.word	0x100152d9
1000ba78:	1001722c 	.word	0x1001722c
1000ba7c:	1000b645 	.word	0x1000b645
1000ba80:	100165a4 	.word	0x100165a4
1000ba84:	100153f9 	.word	0x100153f9
1000ba88:	10017248 	.word	0x10017248
1000ba8c:	1001a138 	.word	0x1001a138
1000ba90:	1000ae85 	.word	0x1000ae85
1000ba94:	1000a10d 	.word	0x1000a10d
1000ba98:	1000aee5 	.word	0x1000aee5
1000ba9c:	10017274 	.word	0x10017274
1000baa0:	100172a0 	.word	0x100172a0
1000baa4:	1000f89d 	.word	0x1000f89d

1000baa8 <spi_slave_inst_get_config_defaults>:
void spi_slave_inst_get_config_defaults(
		struct spi_slave_inst_config *const config)
{
	Assert(config);

	config->ss_pin          = PIN_LP_GPIO_12;
1000baa8:	230c      	movs	r3, #12
1000baaa:	7003      	strb	r3, [r0, #0]
	config->address_enabled = false;
1000baac:	2300      	movs	r3, #0
1000baae:	7043      	strb	r3, [r0, #1]
	config->address         = 0;
1000bab0:	7083      	strb	r3, [r0, #2]
}
1000bab2:	4770      	bx	lr

1000bab4 <spi_get_config_defaults>:
void spi_get_config_defaults(
		struct spi_config *const config)
{
	Assert(config);

	config->mode             = SPI_MODE_MASTER;
1000bab4:	2301      	movs	r3, #1
1000bab6:	7003      	strb	r3, [r0, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
1000bab8:	2300      	movs	r3, #0
1000baba:	7043      	strb	r3, [r0, #1]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
1000babc:	7083      	strb	r3, [r0, #2]
	config->clock_source     = SPI_CLK_INPUT_0;
1000babe:	70c3      	strb	r3, [r0, #3]
	config->clock_divider    = 129;
1000bac0:	3381      	adds	r3, #129	; 0x81
1000bac2:	7103      	strb	r3, [r0, #4]

	config->pin_number_pad[0] = PIN_LP_GPIO_10;
1000bac4:	3b77      	subs	r3, #119	; 0x77
1000bac6:	6083      	str	r3, [r0, #8]
	config->pin_number_pad[1] = PIN_LP_GPIO_11;
1000bac8:	3301      	adds	r3, #1
1000baca:	60c3      	str	r3, [r0, #12]
	config->pin_number_pad[2] = PIN_LP_GPIO_12;
1000bacc:	3301      	adds	r3, #1
1000bace:	6103      	str	r3, [r0, #16]
	config->pin_number_pad[3] = PIN_LP_GPIO_13;
1000bad0:	3301      	adds	r3, #1
1000bad2:	6143      	str	r3, [r0, #20]

	config->pinmux_sel_pad[0] = MUX_LP_GPIO_10_SPI0_SCK;
1000bad4:	3b0b      	subs	r3, #11
1000bad6:	6183      	str	r3, [r0, #24]
	config->pinmux_sel_pad[1] = MUX_LP_GPIO_11_SPI0_MOSI;
1000bad8:	61c3      	str	r3, [r0, #28]
	config->pinmux_sel_pad[2] = MUX_LP_GPIO_12_SPI0_SSN;
1000bada:	6203      	str	r3, [r0, #32]
	config->pinmux_sel_pad[3] = MUX_LP_GPIO_13_SPI0_MISO;
1000badc:	6243      	str	r3, [r0, #36]	; 0x24
};
1000bade:	4770      	bx	lr

1000bae0 <spi_attach_slave>:
 *
 */
void spi_attach_slave(
		struct spi_slave_inst *const slave,
		struct spi_slave_inst_config *const config)
{
1000bae0:	b530      	push	{r4, r5, lr}
1000bae2:	b083      	sub	sp, #12
1000bae4:	0004      	movs	r4, r0
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
1000bae6:	780b      	ldrb	r3, [r1, #0]
1000bae8:	7003      	strb	r3, [r0, #0]
	slave->address_enabled = config->address_enabled;
1000baea:	784b      	ldrb	r3, [r1, #1]
1000baec:	7043      	strb	r3, [r0, #1]
	slave->address         = config->address;
1000baee:	788b      	ldrb	r3, [r1, #2]
1000baf0:	7083      	strb	r3, [r0, #2]

	struct gpio_config config_gpio;
	gpio_get_config_defaults(&config_gpio);
1000baf2:	ad01      	add	r5, sp, #4
1000baf4:	0028      	movs	r0, r5
1000baf6:	4b07      	ldr	r3, [pc, #28]	; (1000bb14 <spi_attach_slave+0x34>)
1000baf8:	4798      	blx	r3
	config_gpio.direction = GPIO_PIN_DIR_OUTPUT;
1000bafa:	2301      	movs	r3, #1
1000bafc:	702b      	strb	r3, [r5, #0]
	gpio_pin_set_config(slave->ss_pin, &config_gpio);
1000bafe:	7820      	ldrb	r0, [r4, #0]
1000bb00:	0029      	movs	r1, r5
1000bb02:	4b05      	ldr	r3, [pc, #20]	; (1000bb18 <spi_attach_slave+0x38>)
1000bb04:	4798      	blx	r3

	gpio_pin_set_output_level(slave->ss_pin, true);
1000bb06:	7820      	ldrb	r0, [r4, #0]
1000bb08:	2101      	movs	r1, #1
1000bb0a:	4b04      	ldr	r3, [pc, #16]	; (1000bb1c <spi_attach_slave+0x3c>)
1000bb0c:	4798      	blx	r3
}
1000bb0e:	b003      	add	sp, #12
1000bb10:	bd30      	pop	{r4, r5, pc}
1000bb12:	46c0      	nop			; (mov r8, r8)
1000bb14:	1000c0fd 	.word	0x1000c0fd
1000bb18:	1000c10d 	.word	0x1000c10d
1000bb1c:	1000c365 	.word	0x1000c365

1000bb20 <spi_enable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void spi_enable(struct spi_module *const module)
{
	Spi *const spi_module = (module->hw);
1000bb20:	6803      	ldr	r3, [r0, #0]
		NVIC_EnableIRQ(SPI1_TX_IRQn);
	}
#endif

	/* Enable SPI */
	spi_module->SPI_MODULE_ENABLE.reg = SPI_MODULE_ENABLE_ENABLE;
1000bb22:	2201      	movs	r2, #1
1000bb24:	761a      	strb	r2, [r3, #24]
}
1000bb26:	4770      	bx	lr

1000bb28 <spi_disable>:
 * This function will disable the SPI module.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void spi_disable(struct spi_module *const module)
{
1000bb28:	b510      	push	{r4, lr}
		NVIC_DisableIRQ(SPI1_TX_IRQn);
	}
#  endif

	/* Disable SPI */
	spi_module->SPI_MODULE_ENABLE.reg = (0x0ul << SPI_MODULE_ENABLE_ENABLE_Pos);
1000bb2a:	2300      	movs	r3, #0
1000bb2c:	6802      	ldr	r2, [r0, #0]
1000bb2e:	7613      	strb	r3, [r2, #24]
 */
static void _spi_clock_disable(struct spi_module *const module)
{
	Assert(module);

	Spi *const spi_module = (module->hw);
1000bb30:	6803      	ldr	r3, [r0, #0]

	if (spi_module == (void *)SPI0) {
1000bb32:	4a0d      	ldr	r2, [pc, #52]	; (1000bb68 <spi_disable+0x40>)
1000bb34:	4293      	cmp	r3, r2
1000bb36:	d109      	bne.n	1000bb4c <spi_disable+0x24>
		system_clock_peripheral_disable(PERIPHERAL_SPI0_SCK_CLK);
1000bb38:	2041      	movs	r0, #65	; 0x41
1000bb3a:	4c0c      	ldr	r4, [pc, #48]	; (1000bb6c <spi_disable+0x44>)
1000bb3c:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI0_SCK_PHASE);
1000bb3e:	2026      	movs	r0, #38	; 0x26
1000bb40:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI0_IF);
1000bb42:	2038      	movs	r0, #56	; 0x38
1000bb44:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI0_CORE);
1000bb46:	2001      	movs	r0, #1
1000bb48:	47a0      	blx	r4
1000bb4a:	e00b      	b.n	1000bb64 <spi_disable+0x3c>
	} else if (spi_module == (void *)SPI1) {
1000bb4c:	4a08      	ldr	r2, [pc, #32]	; (1000bb70 <spi_disable+0x48>)
1000bb4e:	4293      	cmp	r3, r2
1000bb50:	d108      	bne.n	1000bb64 <spi_disable+0x3c>
		system_clock_peripheral_disable(PERIPHERAL_SPI1_SCK_CLK);
1000bb52:	2042      	movs	r0, #66	; 0x42
1000bb54:	4c05      	ldr	r4, [pc, #20]	; (1000bb6c <spi_disable+0x44>)
1000bb56:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI1_SCK_PHASE);
1000bb58:	2027      	movs	r0, #39	; 0x27
1000bb5a:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI1_IF);
1000bb5c:	2039      	movs	r0, #57	; 0x39
1000bb5e:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI1_CORE);
1000bb60:	2002      	movs	r0, #2
1000bb62:	47a0      	blx	r4
#  endif

	/* Disable SPI */
	spi_module->SPI_MODULE_ENABLE.reg = (0x0ul << SPI_MODULE_ENABLE_ENABLE_Pos);
	_spi_clock_disable(module);
}
1000bb64:	bd10      	pop	{r4, pc}
1000bb66:	46c0      	nop			; (mov r8, r8)
1000bb68:	40006000 	.word	0x40006000
1000bb6c:	1000cafd 	.word	0x1000cafd
1000bb70:	40007000 	.word	0x40007000

1000bb74 <spi_reset>:
 * disable it.
 *
 * \param[in,out] module Pointer to the software instance struct
 */
void spi_reset(struct spi_module *const module)
{
1000bb74:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Spi *const spi_module = (module->hw);
1000bb76:	6804      	ldr	r4, [r0, #0]

	/* Disable the module */
	spi_disable(module);
1000bb78:	4b09      	ldr	r3, [pc, #36]	; (1000bba0 <spi_reset+0x2c>)
1000bb7a:	4798      	blx	r3

	/* Software reset the module */
	if(spi_module == (void *)SPI0) {
1000bb7c:	4b09      	ldr	r3, [pc, #36]	; (1000bba4 <spi_reset+0x30>)
1000bb7e:	429c      	cmp	r4, r3
1000bb80:	d105      	bne.n	1000bb8e <spi_reset+0x1a>
		system_peripheral_reset(PERIPHERAL_SPI0_CORE);
1000bb82:	2001      	movs	r0, #1
1000bb84:	4c08      	ldr	r4, [pc, #32]	; (1000bba8 <spi_reset+0x34>)
1000bb86:	47a0      	blx	r4
		system_peripheral_reset(PERIPHERAL_SPI0_IF);
1000bb88:	2038      	movs	r0, #56	; 0x38
1000bb8a:	47a0      	blx	r4
1000bb8c:	e007      	b.n	1000bb9e <spi_reset+0x2a>
	} else if (spi_module == (void *)SPI1) {
1000bb8e:	4b07      	ldr	r3, [pc, #28]	; (1000bbac <spi_reset+0x38>)
1000bb90:	429c      	cmp	r4, r3
1000bb92:	d104      	bne.n	1000bb9e <spi_reset+0x2a>
		system_peripheral_reset(PERIPHERAL_SPI1_CORE);
1000bb94:	2002      	movs	r0, #2
1000bb96:	4c04      	ldr	r4, [pc, #16]	; (1000bba8 <spi_reset+0x34>)
1000bb98:	47a0      	blx	r4
		system_peripheral_reset(PERIPHERAL_SPI1_IF);
1000bb9a:	2039      	movs	r0, #57	; 0x39
1000bb9c:	47a0      	blx	r4
	}
}
1000bb9e:	bd10      	pop	{r4, pc}
1000bba0:	1000bb29 	.word	0x1000bb29
1000bba4:	40006000 	.word	0x40006000
1000bba8:	1000ce69 	.word	0x1000ce69
1000bbac:	40007000 	.word	0x40007000

1000bbb0 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Spi *const hw,
		const struct spi_config *const config)
{
1000bbb0:	b5f0      	push	{r4, r5, r6, r7, lr}
1000bbb2:	465f      	mov	r7, fp
1000bbb4:	4646      	mov	r6, r8
1000bbb6:	b4c0      	push	{r6, r7}
1000bbb8:	b083      	sub	sp, #12
1000bbba:	0006      	movs	r6, r0
1000bbbc:	4688      	mov	r8, r1
1000bbbe:	0015      	movs	r5, r2
	Assert(config);

	uint8_t idx;

	/* Initialize device instance */
	module->hw = hw;
1000bbc0:	6031      	str	r1, [r6, #0]

	Spi *const spi_module = (module->hw);

	/* Check if module is enabled. */
	if (spi_module->SPI_MODULE_ENABLE.reg & SPI_MODULE_ENABLE_MASK) {
1000bbc2:	7e0b      	ldrb	r3, [r1, #24]
1000bbc4:	07db      	lsls	r3, r3, #31
1000bbc6:	d501      	bpl.n	1000bbcc <spi_init+0x1c>
		spi_module->SPI_MODULE_ENABLE.reg = (0x0ul << SPI_MODULE_ENABLE_ENABLE_Pos);
1000bbc8:	2300      	movs	r3, #0
1000bbca:	760b      	strb	r3, [r1, #24]
	}

	spi_reset(module);
1000bbcc:	0030      	movs	r0, r6
1000bbce:	4b4a      	ldr	r3, [pc, #296]	; (1000bcf8 <spi_init+0x148>)
1000bbd0:	4798      	blx	r3
 */
static void _spi_clock_enable(struct spi_module *const module)
{
	Assert(module);

	Spi *const spi_module = (module->hw);
1000bbd2:	6833      	ldr	r3, [r6, #0]

	if (spi_module == (void *)SPI0) {
1000bbd4:	4a49      	ldr	r2, [pc, #292]	; (1000bcfc <spi_init+0x14c>)
1000bbd6:	4293      	cmp	r3, r2
1000bbd8:	d109      	bne.n	1000bbee <spi_init+0x3e>
		system_clock_peripheral_enable(PERIPHERAL_SPI0_SCK_CLK);
1000bbda:	2041      	movs	r0, #65	; 0x41
1000bbdc:	4c48      	ldr	r4, [pc, #288]	; (1000bd00 <spi_init+0x150>)
1000bbde:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI0_SCK_PHASE);
1000bbe0:	2026      	movs	r0, #38	; 0x26
1000bbe2:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI0_IF);
1000bbe4:	2038      	movs	r0, #56	; 0x38
1000bbe6:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI0_CORE);
1000bbe8:	2001      	movs	r0, #1
1000bbea:	47a0      	blx	r4
1000bbec:	e00b      	b.n	1000bc06 <spi_init+0x56>
	} else if (spi_module == (void *)SPI1) {
1000bbee:	4a45      	ldr	r2, [pc, #276]	; (1000bd04 <spi_init+0x154>)
1000bbf0:	4293      	cmp	r3, r2
1000bbf2:	d108      	bne.n	1000bc06 <spi_init+0x56>
		system_clock_peripheral_enable(PERIPHERAL_SPI1_SCK_CLK);
1000bbf4:	2042      	movs	r0, #66	; 0x42
1000bbf6:	4c42      	ldr	r4, [pc, #264]	; (1000bd00 <spi_init+0x150>)
1000bbf8:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI1_SCK_PHASE);
1000bbfa:	2027      	movs	r0, #39	; 0x27
1000bbfc:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI1_IF);
1000bbfe:	2039      	movs	r0, #57	; 0x39
1000bc00:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI1_CORE);
1000bc02:	2002      	movs	r0, #2
1000bc04:	47a0      	blx	r4
	}
#endif

	//Program the pinmux.
	struct gpio_config config_gpio;
	gpio_get_config_defaults(&config_gpio);
1000bc06:	a801      	add	r0, sp, #4
1000bc08:	4b3f      	ldr	r3, [pc, #252]	; (1000bd08 <spi_init+0x158>)
1000bc0a:	4798      	blx	r3
1000bc0c:	002c      	movs	r4, r5
1000bc0e:	3408      	adds	r4, #8
1000bc10:	2318      	movs	r3, #24
1000bc12:	469b      	mov	fp, r3
1000bc14:	44ab      	add	fp, r5
1000bc16:	0027      	movs	r7, r4

	/* Set the pinmux for this spi module. */
	for(idx = 0; idx < 4; idx++) {
		if (config->pin_number_pad[idx] != PINMUX_UNUSED) {
1000bc18:	6820      	ldr	r0, [r4, #0]
1000bc1a:	1c43      	adds	r3, r0, #1
1000bc1c:	d011      	beq.n	1000bc42 <spi_init+0x92>
			if (config->mode == SPI_MODE_MASTER) {
1000bc1e:	782b      	ldrb	r3, [r5, #0]
1000bc20:	2b01      	cmp	r3, #1
1000bc22:	d102      	bne.n	1000bc2a <spi_init+0x7a>
				config_gpio.direction = GPIO_PIN_DIR_OUTPUT;
1000bc24:	466a      	mov	r2, sp
1000bc26:	7113      	strb	r3, [r2, #4]
1000bc28:	e003      	b.n	1000bc32 <spi_init+0x82>
			} else if (config->mode == SPI_MODE_SLAVE) {
1000bc2a:	2b00      	cmp	r3, #0
1000bc2c:	d101      	bne.n	1000bc32 <spi_init+0x82>
				config_gpio.direction = GPIO_PIN_DIR_INPUT;
1000bc2e:	466a      	mov	r2, sp
1000bc30:	7113      	strb	r3, [r2, #4]
			}
			gpio_pin_set_config(config->pin_number_pad[idx], &config_gpio);
1000bc32:	b2c0      	uxtb	r0, r0
1000bc34:	a901      	add	r1, sp, #4
1000bc36:	4b35      	ldr	r3, [pc, #212]	; (1000bd0c <spi_init+0x15c>)
1000bc38:	4798      	blx	r3
			gpio_pinmux_cofiguration(config->pin_number_pad[idx], \
1000bc3a:	8a39      	ldrh	r1, [r7, #16]
1000bc3c:	7838      	ldrb	r0, [r7, #0]
1000bc3e:	4b34      	ldr	r3, [pc, #208]	; (1000bd10 <spi_init+0x160>)
1000bc40:	4798      	blx	r3
1000bc42:	3404      	adds	r4, #4
	//Program the pinmux.
	struct gpio_config config_gpio;
	gpio_get_config_defaults(&config_gpio);

	/* Set the pinmux for this spi module. */
	for(idx = 0; idx < 4; idx++) {
1000bc44:	455c      	cmp	r4, fp
1000bc46:	d1e6      	bne.n	1000bc16 <spi_init+0x66>
						(uint16_t)(config->pinmux_sel_pad[idx]));
		}
	}

	/* Set up the input clock for the module */
	spi_module->CLOCK_SOURCE_SELECT.reg = config->clock_source;
1000bc48:	78eb      	ldrb	r3, [r5, #3]
1000bc4a:	4642      	mov	r2, r8
1000bc4c:	7413      	strb	r3, [r2, #16]

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
1000bc4e:	782b      	ldrb	r3, [r5, #0]
1000bc50:	2b01      	cmp	r3, #1
1000bc52:	d100      	bne.n	1000bc56 <spi_init+0xa6>
		/* Set the mode in SPI master mode */
		spi_module->SPI_MASTER_MODE.reg = SPI_MODE_MASTER;
1000bc54:	7713      	strb	r3, [r2, #28]
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
1000bc56:	782b      	ldrb	r3, [r5, #0]
1000bc58:	2b00      	cmp	r3, #0
1000bc5a:	d101      	bne.n	1000bc60 <spi_init+0xb0>
		/* Set the mode in SPI slave mode */
		spi_module->SPI_MASTER_MODE.reg = SPI_MODE_SLAVE;
1000bc5c:	4642      	mov	r2, r8
1000bc5e:	7713      	strb	r3, [r2, #28]
		const struct spi_config *const config)
{
	Assert(module);
	Assert(config);

	Spi *const spi_module = (module->hw);
1000bc60:	6833      	ldr	r3, [r6, #0]

	module->mode  = config->mode;
1000bc62:	782a      	ldrb	r2, [r5, #0]
1000bc64:	7172      	strb	r2, [r6, #5]

#if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
1000bc66:	782a      	ldrb	r2, [r5, #0]
1000bc68:	2a01      	cmp	r2, #1
1000bc6a:	d101      	bne.n	1000bc70 <spi_init+0xc0>
		spi_module->SPI_CLK_DIVIDER.reg = config->clock_divider;
1000bc6c:	792a      	ldrb	r2, [r5, #4]
1000bc6e:	829a      	strh	r2, [r3, #20]
	}
#endif

	/* Set data order */
	if (config->data_order == SPI_DATA_ORDER_LSB) {
1000bc70:	786a      	ldrb	r2, [r5, #1]
1000bc72:	2a04      	cmp	r2, #4
1000bc74:	d104      	bne.n	1000bc80 <spi_init+0xd0>
		spi_module->SPI_CONFIGURATION.bit.LSB_FIRST_ENABLE = 0x1;
1000bc76:	2124      	movs	r1, #36	; 0x24
1000bc78:	5c58      	ldrb	r0, [r3, r1]
1000bc7a:	4302      	orrs	r2, r0
1000bc7c:	545a      	strb	r2, [r3, r1]
1000bc7e:	e004      	b.n	1000bc8a <spi_init+0xda>
	} else {
		spi_module->SPI_CONFIGURATION.bit.LSB_FIRST_ENABLE = 0x0;
1000bc80:	2124      	movs	r1, #36	; 0x24
1000bc82:	5c5a      	ldrb	r2, [r3, r1]
1000bc84:	2004      	movs	r0, #4
1000bc86:	4382      	bics	r2, r0
1000bc88:	545a      	strb	r2, [r3, r1]
	}

	/* Set clock polarity and clock phase */
	switch(config->transfer_mode)
1000bc8a:	78aa      	ldrb	r2, [r5, #2]
1000bc8c:	2a01      	cmp	r2, #1
1000bc8e:	d01a      	beq.n	1000bcc6 <spi_init+0x116>
1000bc90:	2a00      	cmp	r2, #0
1000bc92:	d004      	beq.n	1000bc9e <spi_init+0xee>
1000bc94:	2a02      	cmp	r2, #2
1000bc96:	d00c      	beq.n	1000bcb2 <spi_init+0x102>
1000bc98:	2a03      	cmp	r2, #3
1000bc9a:	d01e      	beq.n	1000bcda <spi_init+0x12a>
1000bc9c:	e026      	b.n	1000bcec <spi_init+0x13c>
	{
		case SPI_TRANSFER_MODE_0:
			spi_module->SPI_CONFIGURATION.bit.SCK_PHASE = 0x0;
1000bc9e:	2224      	movs	r2, #36	; 0x24
1000bca0:	5c99      	ldrb	r1, [r3, r2]
1000bca2:	2002      	movs	r0, #2
1000bca4:	4381      	bics	r1, r0
1000bca6:	5499      	strb	r1, [r3, r2]
			spi_module->SPI_CONFIGURATION.bit.SCK_POLARITY = 0x0;
1000bca8:	5c99      	ldrb	r1, [r3, r2]
1000bcaa:	3801      	subs	r0, #1
1000bcac:	4381      	bics	r1, r0
1000bcae:	5499      	strb	r1, [r3, r2]
1000bcb0:	e01c      	b.n	1000bcec <spi_init+0x13c>
			break;
		case SPI_TRANSFER_MODE_1:
			spi_module->SPI_CONFIGURATION.bit.SCK_PHASE = 0x1;
1000bcb2:	2224      	movs	r2, #36	; 0x24
1000bcb4:	5c98      	ldrb	r0, [r3, r2]
1000bcb6:	2102      	movs	r1, #2
1000bcb8:	4301      	orrs	r1, r0
1000bcba:	5499      	strb	r1, [r3, r2]
			spi_module->SPI_CONFIGURATION.bit.SCK_POLARITY = 0x0;
1000bcbc:	5c99      	ldrb	r1, [r3, r2]
1000bcbe:	2001      	movs	r0, #1
1000bcc0:	4381      	bics	r1, r0
1000bcc2:	5499      	strb	r1, [r3, r2]
1000bcc4:	e012      	b.n	1000bcec <spi_init+0x13c>
			break;
		case SPI_TRANSFER_MODE_2:
			spi_module->SPI_CONFIGURATION.bit.SCK_PHASE = 0x0;
1000bcc6:	2224      	movs	r2, #36	; 0x24
1000bcc8:	5c99      	ldrb	r1, [r3, r2]
1000bcca:	2002      	movs	r0, #2
1000bccc:	4381      	bics	r1, r0
1000bcce:	5499      	strb	r1, [r3, r2]
			spi_module->SPI_CONFIGURATION.bit.SCK_POLARITY = 0x1;
1000bcd0:	5c98      	ldrb	r0, [r3, r2]
1000bcd2:	2101      	movs	r1, #1
1000bcd4:	4301      	orrs	r1, r0
1000bcd6:	5499      	strb	r1, [r3, r2]
1000bcd8:	e008      	b.n	1000bcec <spi_init+0x13c>
			break;
		case SPI_TRANSFER_MODE_3:
			spi_module->SPI_CONFIGURATION.bit.SCK_PHASE = 0x1;
1000bcda:	2224      	movs	r2, #36	; 0x24
1000bcdc:	5c98      	ldrb	r0, [r3, r2]
1000bcde:	2102      	movs	r1, #2
1000bce0:	4301      	orrs	r1, r0
1000bce2:	5499      	strb	r1, [r3, r2]
			spi_module->SPI_CONFIGURATION.bit.SCK_POLARITY = 0x1;
1000bce4:	5c98      	ldrb	r0, [r3, r2]
1000bce6:	2101      	movs	r1, #1
1000bce8:	4301      	orrs	r1, r0
1000bcea:	5499      	strb	r1, [r3, r2]
	module->locked                     = 0;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
1000bcec:	2000      	movs	r0, #0
1000bcee:	b003      	add	sp, #12
1000bcf0:	bc0c      	pop	{r2, r3}
1000bcf2:	4690      	mov	r8, r2
1000bcf4:	469b      	mov	fp, r3
1000bcf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000bcf8:	1000bb75 	.word	0x1000bb75
1000bcfc:	40006000 	.word	0x40006000
1000bd00:	1000c7a1 	.word	0x1000c7a1
1000bd04:	40007000 	.word	0x40007000
1000bd08:	1000c0fd 	.word	0x1000c0fd
1000bd0c:	1000c10d 	.word	0x1000c10d
1000bd10:	1000c3f1 	.word	0x1000c3f1

1000bd14 <spi_transceive_buffer_wait>:
enum status_code spi_transceive_buffer_wait(
		struct spi_module *const module,
		uint8_t *tx_data,
		uint8_t *rx_data,
		uint16_t length)
{
1000bd14:	b5f0      	push	{r4, r5, r6, r7, lr}
1000bd16:	b083      	sub	sp, #12
	Spi *spi_module = module->hw;
1000bd18:	6804      	ldr	r4, [r0, #0]
	uint8_t dummy = 0;
1000bd1a:	2600      	movs	r6, #0
1000bd1c:	466d      	mov	r5, sp
1000bd1e:	71ee      	strb	r6, [r5, #7]
1000bd20:	3507      	adds	r5, #7
	uint8_t skip_mosi = 0;
	uint8_t skip_miso = 0;
	uint8_t status;
	uint16_t transfer_len = 0;

	if(spi_module == 0) {
1000bd22:	2c00      	cmp	r4, #0
1000bd24:	d034      	beq.n	1000bd90 <spi_transceive_buffer_wait+0x7c>
		return STATUS_ERR_NOT_INITIALIZED;
	}
	if(!tx_data) {
1000bd26:	2900      	cmp	r1, #0
1000bd28:	d104      	bne.n	1000bd34 <spi_transceive_buffer_wait+0x20>
		tx_data = &dummy;
		*tx_data = module->tx_dummy_byte;
1000bd2a:	0029      	movs	r1, r5
1000bd2c:	7980      	ldrb	r0, [r0, #6]
1000bd2e:	7028      	strb	r0, [r5, #0]
		skip_mosi = 1;
1000bd30:	2701      	movs	r7, #1
1000bd32:	e00b      	b.n	1000bd4c <spi_transceive_buffer_wait+0x38>
	} else if(!rx_data) {
1000bd34:	2a00      	cmp	r2, #0
1000bd36:	d005      	beq.n	1000bd44 <spi_transceive_buffer_wait+0x30>
		rx_data = &dummy;
		skip_miso = 1;
	} else if(length == 0) {
		return STATUS_ERR_INVALID_ARG;
1000bd38:	2017      	movs	r0, #23
		*tx_data = module->tx_dummy_byte;
		skip_mosi = 1;
	} else if(!rx_data) {
		rx_data = &dummy;
		skip_miso = 1;
	} else if(length == 0) {
1000bd3a:	2b00      	cmp	r3, #0
1000bd3c:	d029      	beq.n	1000bd92 <spi_transceive_buffer_wait+0x7e>
		uint16_t length)
{
	Spi *spi_module = module->hw;
	uint8_t dummy = 0;
	uint8_t skip_mosi = 0;
	uint8_t skip_miso = 0;
1000bd3e:	2600      	movs	r6, #0
		uint8_t *rx_data,
		uint16_t length)
{
	Spi *spi_module = module->hw;
	uint8_t dummy = 0;
	uint8_t skip_mosi = 0;
1000bd40:	2700      	movs	r7, #0
1000bd42:	e003      	b.n	1000bd4c <spi_transceive_buffer_wait+0x38>
		tx_data = &dummy;
		*tx_data = module->tx_dummy_byte;
		skip_mosi = 1;
	} else if(!rx_data) {
		rx_data = &dummy;
		skip_miso = 1;
1000bd44:	2601      	movs	r6, #1
		uint8_t *rx_data,
		uint16_t length)
{
	Spi *spi_module = module->hw;
	uint8_t dummy = 0;
	uint8_t skip_mosi = 0;
1000bd46:	2700      	movs	r7, #0
	if(!tx_data) {
		tx_data = &dummy;
		*tx_data = module->tx_dummy_byte;
		skip_mosi = 1;
	} else if(!rx_data) {
		rx_data = &dummy;
1000bd48:	466a      	mov	r2, sp
1000bd4a:	3207      	adds	r2, #7
 */
static bool _spi_is_active(Spi *const spi_module)
{
	Assert(spi_module);

	return spi_module->SPI_BUS_STATUS.bit.SPI_ACTIVE;
1000bd4c:	2528      	movs	r5, #40	; 0x28
1000bd4e:	5d60      	ldrb	r0, [r4, r5]
	}

	/* Check for Idle */
	do {
		status = _spi_is_active(spi_module);
	}while(status);
1000bd50:	07c0      	lsls	r0, r0, #31
1000bd52:	d4fc      	bmi.n	1000bd4e <spi_transceive_buffer_wait+0x3a>

	/* Clear all status registers */
	spi_module->RECEIVE_STATUS.reg;
1000bd54:	7b20      	ldrb	r0, [r4, #12]
	spi_module->TRANSMIT_STATUS.reg;
1000bd56:	7a20      	ldrb	r0, [r4, #8]

	/* Start transfer */
	while(transfer_len < length) {
1000bd58:	2b00      	cmp	r3, #0
1000bd5a:	d014      	beq.n	1000bd86 <spi_transceive_buffer_wait+0x72>
1000bd5c:	2500      	movs	r5, #0
		/* Read data shifted from MISO */
		while(!_spi_is_ready_to_read(spi_module));
		*rx_data = spi_module->RECEIVE_DATA.reg;
		transfer_len++;
		if (!skip_mosi) {
			tx_data++;
1000bd5e:	4278      	negs	r0, r7
1000bd60:	4147      	adcs	r7, r0
		}
		if (!skip_miso) {
			rx_data++;
1000bd62:	4270      	negs	r0, r6
1000bd64:	4146      	adcs	r6, r0
		Spi *const spi_module)
{
	Assert(spi_module);

	/* Check interrupt flag */
	return (spi_module->TRANSMIT_STATUS.bit.TX_FIFO_NOT_FULL);
1000bd66:	7a20      	ldrb	r0, [r4, #8]
	spi_module->TRANSMIT_STATUS.reg;

	/* Start transfer */
	while(transfer_len < length) {
		/* Write data to MOSI */
		while(!_spi_is_ready_to_write(spi_module));
1000bd68:	07c0      	lsls	r0, r0, #31
1000bd6a:	d5fc      	bpl.n	1000bd66 <spi_transceive_buffer_wait+0x52>
		spi_module->TRANSMIT_DATA.reg = *tx_data;
1000bd6c:	7808      	ldrb	r0, [r1, #0]
1000bd6e:	7020      	strb	r0, [r4, #0]
		Spi *const spi_module)
{
	Assert(spi_module);

	/* Check interrupt flag */
	return (spi_module->RECEIVE_STATUS.bit.RX_FIFO_NOT_EMPTY);
1000bd70:	7b20      	ldrb	r0, [r4, #12]
	while(transfer_len < length) {
		/* Write data to MOSI */
		while(!_spi_is_ready_to_write(spi_module));
		spi_module->TRANSMIT_DATA.reg = *tx_data;
		/* Read data shifted from MISO */
		while(!_spi_is_ready_to_read(spi_module));
1000bd72:	07c0      	lsls	r0, r0, #31
1000bd74:	d5fc      	bpl.n	1000bd70 <spi_transceive_buffer_wait+0x5c>
		*rx_data = spi_module->RECEIVE_DATA.reg;
1000bd76:	7920      	ldrb	r0, [r4, #4]
1000bd78:	7010      	strb	r0, [r2, #0]
		transfer_len++;
1000bd7a:	3501      	adds	r5, #1
1000bd7c:	b2ad      	uxth	r5, r5
		if (!skip_mosi) {
			tx_data++;
1000bd7e:	19c9      	adds	r1, r1, r7
		}
		if (!skip_miso) {
			rx_data++;
1000bd80:	1992      	adds	r2, r2, r6
	/* Clear all status registers */
	spi_module->RECEIVE_STATUS.reg;
	spi_module->TRANSMIT_STATUS.reg;

	/* Start transfer */
	while(transfer_len < length) {
1000bd82:	42ab      	cmp	r3, r5
1000bd84:	d1ef      	bne.n	1000bd66 <spi_transceive_buffer_wait+0x52>
		Spi *const spi_module)
{
	Assert(spi_module);

	/* Check interrupt flag */
	return (spi_module->TRANSMIT_STATUS.bit.TX_FIFO_EMPTY);
1000bd86:	7a23      	ldrb	r3, [r4, #8]
		}
	}
	/* check TXFIFO is empty */
	do {
		status = _spi_is_write_complete(spi_module);
	}while(!status);
1000bd88:	06db      	lsls	r3, r3, #27
1000bd8a:	d5fc      	bpl.n	1000bd86 <spi_transceive_buffer_wait+0x72>

	return STATUS_OK;
1000bd8c:	2000      	movs	r0, #0
1000bd8e:	e000      	b.n	1000bd92 <spi_transceive_buffer_wait+0x7e>
	uint8_t skip_miso = 0;
	uint8_t status;
	uint16_t transfer_len = 0;

	if(spi_module == 0) {
		return STATUS_ERR_NOT_INITIALIZED;
1000bd90:	201f      	movs	r0, #31
		status = _spi_is_write_complete(spi_module);
	}while(!status);

	return STATUS_OK;

}
1000bd92:	b003      	add	sp, #12
1000bd94:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000bd96:	46c0      	nop			; (mov r8, r8)

1000bd98 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		bool select)
{
1000bd98:	b510      	push	{r4, lr}
	uint8_t gpio_num = slave->ss_pin;
1000bd9a:	7808      	ldrb	r0, [r1, #0]
	if(select) {
1000bd9c:	2a00      	cmp	r2, #0
1000bd9e:	d003      	beq.n	1000bda8 <spi_select_slave+0x10>
		/* ASSERT Slave select pin */
		gpio_pin_set_output_level(gpio_num, false);
1000bda0:	2100      	movs	r1, #0
1000bda2:	4b04      	ldr	r3, [pc, #16]	; (1000bdb4 <spi_select_slave+0x1c>)
1000bda4:	4798      	blx	r3
1000bda6:	e002      	b.n	1000bdae <spi_select_slave+0x16>
	} else {
		/* DEASSERT Slave select pin */
		gpio_pin_set_output_level(gpio_num, true);
1000bda8:	2101      	movs	r1, #1
1000bdaa:	4b02      	ldr	r3, [pc, #8]	; (1000bdb4 <spi_select_slave+0x1c>)
1000bdac:	4798      	blx	r3
	}

	return STATUS_OK;
}
1000bdae:	2000      	movs	r0, #0
1000bdb0:	bd10      	pop	{r4, pc}
1000bdb2:	46c0      	nop			; (mov r8, r8)
1000bdb4:	1000c365 	.word	0x1000c365

1000bdb8 <dualtimer_isr_handler>:
 *
 * Dualtimer ISR handler.
 *
 */
static void dualtimer_isr_handler(void)
{
1000bdb8:	b510      	push	{r4, lr}
 * \retval The interrupt status of timer1/timer2
 */
uint8_t dualtimer_get_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		return DUALTIMER0->TIMER1MIS.reg;
1000bdba:	4b0d      	ldr	r3, [pc, #52]	; (1000bdf0 <dualtimer_isr_handler+0x38>)
1000bdbc:	7d1b      	ldrb	r3, [r3, #20]
 * Dualtimer ISR handler.
 *
 */
static void dualtimer_isr_handler(void)
{
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER1)) {
1000bdbe:	2b00      	cmp	r3, #0
1000bdc0:	d007      	beq.n	1000bdd2 <dualtimer_isr_handler+0x1a>
 * \param[in]     timer        Timer1/Timer2
 */
void dualtimer_clear_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		DUALTIMER0->TIMER1INTCLR.reg = 1;
1000bdc2:	2201      	movs	r2, #1
1000bdc4:	4b0a      	ldr	r3, [pc, #40]	; (1000bdf0 <dualtimer_isr_handler+0x38>)
1000bdc6:	731a      	strb	r2, [r3, #12]
 */
static void dualtimer_isr_handler(void)
{
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER1)) {
		dualtimer_clear_interrupt_status(DUALTIMER_TIMER1);
		if (dualtimer_callback_timer1)
1000bdc8:	4b0a      	ldr	r3, [pc, #40]	; (1000bdf4 <dualtimer_isr_handler+0x3c>)
1000bdca:	681b      	ldr	r3, [r3, #0]
1000bdcc:	2b00      	cmp	r3, #0
1000bdce:	d000      	beq.n	1000bdd2 <dualtimer_isr_handler+0x1a>
			dualtimer_callback_timer1();
1000bdd0:	4798      	blx	r3
uint8_t dualtimer_get_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		return DUALTIMER0->TIMER1MIS.reg;
	} else {
		return DUALTIMER0->TIMER2MIS.reg;
1000bdd2:	2334      	movs	r3, #52	; 0x34
1000bdd4:	4a06      	ldr	r2, [pc, #24]	; (1000bdf0 <dualtimer_isr_handler+0x38>)
1000bdd6:	5cd3      	ldrb	r3, [r2, r3]
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER1)) {
		dualtimer_clear_interrupt_status(DUALTIMER_TIMER1);
		if (dualtimer_callback_timer1)
			dualtimer_callback_timer1();
	}
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER2)) {
1000bdd8:	2b00      	cmp	r3, #0
1000bdda:	d007      	beq.n	1000bdec <dualtimer_isr_handler+0x34>
void dualtimer_clear_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		DUALTIMER0->TIMER1INTCLR.reg = 1;
	} else {
		DUALTIMER0->TIMER2INTCLR.reg = 1;
1000bddc:	2101      	movs	r1, #1
1000bdde:	232c      	movs	r3, #44	; 0x2c
1000bde0:	54d1      	strb	r1, [r2, r3]
		if (dualtimer_callback_timer1)
			dualtimer_callback_timer1();
	}
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER2)) {
		dualtimer_clear_interrupt_status(DUALTIMER_TIMER2);
		if (dualtimer_callback_timer2)
1000bde2:	4b05      	ldr	r3, [pc, #20]	; (1000bdf8 <dualtimer_isr_handler+0x40>)
1000bde4:	681b      	ldr	r3, [r3, #0]
1000bde6:	2b00      	cmp	r3, #0
1000bde8:	d000      	beq.n	1000bdec <dualtimer_isr_handler+0x34>
			dualtimer_callback_timer2();
1000bdea:	4798      	blx	r3
	}
}
1000bdec:	bd10      	pop	{r4, pc}
1000bdee:	46c0      	nop			; (mov r8, r8)
1000bdf0:	40001000 	.word	0x40001000
1000bdf4:	100184bc 	.word	0x100184bc
1000bdf8:	100184c0 	.word	0x100184c0

1000bdfc <dualtimer_get_config_defaults>:
 *
 * \param[out]  config  Pointer to a DUALTIMER module configuration structure to set
 */
void dualtimer_get_config_defaults(struct dualtimer_config *config)
{
	config->timer1.timer_enable = true;
1000bdfc:	2301      	movs	r3, #1
1000bdfe:	7003      	strb	r3, [r0, #0]
	config->timer2.timer_enable = true;
1000be00:	7303      	strb	r3, [r0, #12]

	config->timer1.counter_mode = DUALTIMER_PERIODIC_MODE;
1000be02:	2202      	movs	r2, #2
1000be04:	7042      	strb	r2, [r0, #1]
	config->timer2.counter_mode = DUALTIMER_PERIODIC_MODE;
1000be06:	7342      	strb	r2, [r0, #13]

	config->timer1.counter_size = DUALTIMER_COUNTER_SIZE_32BIT;
1000be08:	7083      	strb	r3, [r0, #2]
	config->timer2.counter_size = DUALTIMER_COUNTER_SIZE_32BIT;
1000be0a:	7383      	strb	r3, [r0, #14]

	config->timer1.clock_prescaler = DUALTIMER_CLOCK_PRESCALER_DIV1;
1000be0c:	2200      	movs	r2, #0
1000be0e:	70c2      	strb	r2, [r0, #3]
	config->timer2.clock_prescaler = DUALTIMER_CLOCK_PRESCALER_DIV1;
1000be10:	73c2      	strb	r2, [r0, #15]

	config->timer1.interrup_enable = true;
1000be12:	7103      	strb	r3, [r0, #4]
	config->timer2.interrup_enable = true;
1000be14:	7403      	strb	r3, [r0, #16]

	config->timer1.load_value = 0;
1000be16:	6082      	str	r2, [r0, #8]
	config->timer2.load_value = 0;
1000be18:	6142      	str	r2, [r0, #20]

	config->clock_source = DUALTIMER_CLK_INPUT_0;
1000be1a:	7602      	strb	r2, [r0, #24]
}
1000be1c:	4770      	bx	lr
1000be1e:	46c0      	nop			; (mov r8, r8)

1000be20 <dualtimer_set_counter>:
 * \param[in]     value        Load value
 */
void dualtimer_set_counter(enum dualtimer_timer timer,
		enum dualtimer_set_register cur_bg, uint32_t value)
{
	if (timer == DUALTIMER_TIMER1) {
1000be20:	2800      	cmp	r0, #0
1000be22:	d107      	bne.n	1000be34 <dualtimer_set_counter+0x14>
		if (cur_bg == DUALTIMER_SET_CURRUNT_REG) {
1000be24:	2900      	cmp	r1, #0
1000be26:	d102      	bne.n	1000be2e <dualtimer_set_counter+0xe>
			DUALTIMER0->TIMER1LOAD.reg = value;
1000be28:	4b06      	ldr	r3, [pc, #24]	; (1000be44 <dualtimer_set_counter+0x24>)
1000be2a:	601a      	str	r2, [r3, #0]
1000be2c:	e009      	b.n	1000be42 <dualtimer_set_counter+0x22>
		} else {
			DUALTIMER0->TIMER1BGLOAD.reg = value;
1000be2e:	4b05      	ldr	r3, [pc, #20]	; (1000be44 <dualtimer_set_counter+0x24>)
1000be30:	619a      	str	r2, [r3, #24]
1000be32:	e006      	b.n	1000be42 <dualtimer_set_counter+0x22>
		}
	} else {
		if (cur_bg == DUALTIMER_SET_CURRUNT_REG) {
1000be34:	2900      	cmp	r1, #0
1000be36:	d102      	bne.n	1000be3e <dualtimer_set_counter+0x1e>
			DUALTIMER0->TIMER2LOAD.reg = value;
1000be38:	4b02      	ldr	r3, [pc, #8]	; (1000be44 <dualtimer_set_counter+0x24>)
1000be3a:	621a      	str	r2, [r3, #32]
1000be3c:	e001      	b.n	1000be42 <dualtimer_set_counter+0x22>
			} else {
			DUALTIMER0->TIMER2BGLOAD.reg = value;
1000be3e:	4b01      	ldr	r3, [pc, #4]	; (1000be44 <dualtimer_set_counter+0x24>)
1000be40:	639a      	str	r2, [r3, #56]	; 0x38
		}
	}
}
1000be42:	4770      	bx	lr
1000be44:	40001000 	.word	0x40001000

1000be48 <dualtimer_enable>:
 *
 * \param[in]     timer        Timer1/Timer2
 */
void dualtimer_enable(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
1000be48:	2800      	cmp	r0, #0
1000be4a:	d105      	bne.n	1000be58 <dualtimer_enable+0x10>
		DUALTIMER0->TIMER1CONTROL.reg |= DUALTIMER_TIMER1CONTROL_TIMER_ENABLE;
1000be4c:	4a06      	ldr	r2, [pc, #24]	; (1000be68 <dualtimer_enable+0x20>)
1000be4e:	7a11      	ldrb	r1, [r2, #8]
1000be50:	2380      	movs	r3, #128	; 0x80
1000be52:	430b      	orrs	r3, r1
1000be54:	7213      	strb	r3, [r2, #8]
1000be56:	e005      	b.n	1000be64 <dualtimer_enable+0x1c>
	} else {
		DUALTIMER0->TIMER2CONTROL.reg |= DUALTIMER_TIMER2CONTROL_TIMER_ENABLE;
1000be58:	4903      	ldr	r1, [pc, #12]	; (1000be68 <dualtimer_enable+0x20>)
1000be5a:	2228      	movs	r2, #40	; 0x28
1000be5c:	5c88      	ldrb	r0, [r1, r2]
1000be5e:	2380      	movs	r3, #128	; 0x80
1000be60:	4303      	orrs	r3, r0
1000be62:	548b      	strb	r3, [r1, r2]
	}
}
1000be64:	4770      	bx	lr
1000be66:	46c0      	nop			; (mov r8, r8)
1000be68:	40001000 	.word	0x40001000

1000be6c <dualtimer_disable>:
 *
 * \param[in]     timer        Timer1/Timer2
 */
void dualtimer_disable(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
1000be6c:	2800      	cmp	r0, #0
1000be6e:	d105      	bne.n	1000be7c <dualtimer_disable+0x10>
		DUALTIMER0->TIMER1CONTROL.reg &= ~DUALTIMER_TIMER1CONTROL_TIMER_ENABLE;
1000be70:	4a06      	ldr	r2, [pc, #24]	; (1000be8c <dualtimer_disable+0x20>)
1000be72:	7a11      	ldrb	r1, [r2, #8]
1000be74:	237f      	movs	r3, #127	; 0x7f
1000be76:	400b      	ands	r3, r1
1000be78:	7213      	strb	r3, [r2, #8]
1000be7a:	e005      	b.n	1000be88 <dualtimer_disable+0x1c>
	} else {
		DUALTIMER0->TIMER2CONTROL.reg &= ~DUALTIMER_TIMER2CONTROL_TIMER_ENABLE;
1000be7c:	4903      	ldr	r1, [pc, #12]	; (1000be8c <dualtimer_disable+0x20>)
1000be7e:	2228      	movs	r2, #40	; 0x28
1000be80:	5c88      	ldrb	r0, [r1, r2]
1000be82:	237f      	movs	r3, #127	; 0x7f
1000be84:	4003      	ands	r3, r0
1000be86:	548b      	strb	r3, [r1, r2]
	}
}
1000be88:	4770      	bx	lr
1000be8a:	46c0      	nop			; (mov r8, r8)
1000be8c:	40001000 	.word	0x40001000

1000be90 <dualtimer_init>:
 * \param[in]     config       Pointer to the Dualtimer configuration options struct
 *
 * \return Status of the initialization procedure.
 */
void dualtimer_init(const struct dualtimer_config *config)
{
1000be90:	b570      	push	{r4, r5, r6, lr}
1000be92:	0004      	movs	r4, r0
	uint8_t regval = 0;

	/* Global reset */
	system_peripheral_reset(PERIPHERAL_DUALT_TIMER);
1000be94:	2004      	movs	r0, #4
1000be96:	4b39      	ldr	r3, [pc, #228]	; (1000bf7c <dualtimer_init+0xec>)
1000be98:	4798      	blx	r3

	/* Common config */
	if (config->timer1.timer_enable || config->timer2.timer_enable) {
1000be9a:	7823      	ldrb	r3, [r4, #0]
1000be9c:	2b00      	cmp	r3, #0
1000be9e:	d102      	bne.n	1000bea6 <dualtimer_init+0x16>
1000bea0:	7b23      	ldrb	r3, [r4, #12]
1000bea2:	2b00      	cmp	r3, #0
1000bea4:	d065      	beq.n	1000bf72 <dualtimer_init+0xe2>
		LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |=
1000bea6:	4936      	ldr	r1, [pc, #216]	; (1000bf80 <dualtimer_init+0xf0>)
1000bea8:	68ca      	ldr	r2, [r1, #12]
1000beaa:	2320      	movs	r3, #32
1000beac:	4313      	orrs	r3, r2
1000beae:	60cb      	str	r3, [r1, #12]
		LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_DUALTIMER0_CLK_EN;
		LPMCU_MISC_REGS0->LPMCU_CTRL.bit.DUALTIMER0_CLK_SEL = config->clock_source;
1000beb0:	7e22      	ldrb	r2, [r4, #24]
1000beb2:	698b      	ldr	r3, [r1, #24]
1000beb4:	2003      	movs	r0, #3
1000beb6:	4002      	ands	r2, r0
1000beb8:	0112      	lsls	r2, r2, #4
1000beba:	302d      	adds	r0, #45	; 0x2d
1000bebc:	4383      	bics	r3, r0
1000bebe:	4313      	orrs	r3, r2
1000bec0:	618b      	str	r3, [r1, #24]
	}
	
	/* Timer1 config */
	if (config->timer1.timer_enable) {
1000bec2:	7823      	ldrb	r3, [r4, #0]
1000bec4:	2b00      	cmp	r3, #0
1000bec6:	d026      	beq.n	1000bf16 <dualtimer_init+0x86>
		if (config->timer1.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
1000bec8:	7863      	ldrb	r3, [r4, #1]
			regval = DUALTIMER_TIMER1CONTROL_ONE_SHOT_COUNT_1;
1000beca:	2101      	movs	r1, #1
		LPMCU_MISC_REGS0->LPMCU_CTRL.bit.DUALTIMER0_CLK_SEL = config->clock_source;
	}
	
	/* Timer1 config */
	if (config->timer1.timer_enable) {
		if (config->timer1.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
1000becc:	2b00      	cmp	r3, #0
1000bece:	d003      	beq.n	1000bed8 <dualtimer_init+0x48>
			regval = DUALTIMER_TIMER1CONTROL_ONE_SHOT_COUNT_1;
		} else if (config->timer1.counter_mode == DUALTIMER_FREE_RUNNING_MODE) {
			regval = DUALTIMER_TIMER1CONTROL_TIMER_MODE_0;
		} else if (config->timer1.counter_mode == DUALTIMER_PERIODIC_MODE) {
			regval = DUALTIMER_TIMER1CONTROL_TIMER_MODE_1;
1000bed0:	3b02      	subs	r3, #2
1000bed2:	425d      	negs	r5, r3
1000bed4:	415d      	adcs	r5, r3
1000bed6:	01a9      	lsls	r1, r5, #6
		}
		regval |= (DUALTIMER_TIMER1CONTROL_TIMER_SIZE &
1000bed8:	78a2      	ldrb	r2, [r4, #2]
1000beda:	0052      	lsls	r2, r2, #1
1000bedc:	2502      	movs	r5, #2
1000bede:	402a      	ands	r2, r5
1000bee0:	78e3      	ldrb	r3, [r4, #3]
1000bee2:	009b      	lsls	r3, r3, #2
1000bee4:	350a      	adds	r5, #10
1000bee6:	402b      	ands	r3, r5
1000bee8:	431a      	orrs	r2, r3
1000beea:	0015      	movs	r5, r2
1000beec:	430d      	orrs	r5, r1
				((config->timer1.counter_size) << DUALTIMER_TIMER1CONTROL_TIMER_SIZE_Pos)) |
				DUALTIMER_TIMER1CONTROL_TIMERPRE(config->timer1.clock_prescaler);
		if (config->timer1.interrup_enable) {
1000beee:	7923      	ldrb	r3, [r4, #4]
1000bef0:	2b00      	cmp	r3, #0
1000bef2:	d001      	beq.n	1000bef8 <dualtimer_init+0x68>
			regval |= DUALTIMER_TIMER1CONTROL_INTERRUPT_ENABLE;
1000bef4:	2320      	movs	r3, #32
1000bef6:	431d      	orrs	r5, r3
		}
		DUALTIMER0->TIMER1LOAD.reg = config->timer1.load_value;
1000bef8:	4b22      	ldr	r3, [pc, #136]	; (1000bf84 <dualtimer_init+0xf4>)
1000befa:	68a2      	ldr	r2, [r4, #8]
1000befc:	601a      	str	r2, [r3, #0]
		DUALTIMER0->TIMER1CONTROL.reg = regval;
1000befe:	721d      	strb	r5, [r3, #8]
		LPMCU_MISC_REGS0->DUALTIMER0_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER0_CTRL_CNTR_1_ENABLE;
1000bf00:	491f      	ldr	r1, [pc, #124]	; (1000bf80 <dualtimer_init+0xf0>)
1000bf02:	22c4      	movs	r2, #196	; 0xc4
1000bf04:	0052      	lsls	r2, r2, #1
1000bf06:	5c88      	ldrb	r0, [r1, r2]
1000bf08:	2301      	movs	r3, #1
1000bf0a:	4303      	orrs	r3, r0
1000bf0c:	548b      	strb	r3, [r1, r2]
		dualtimer_enable(DUALTIMER_TIMER1);
1000bf0e:	2000      	movs	r0, #0
1000bf10:	4b1d      	ldr	r3, [pc, #116]	; (1000bf88 <dualtimer_init+0xf8>)
1000bf12:	4798      	blx	r3
1000bf14:	e000      	b.n	1000bf18 <dualtimer_init+0x88>
 *
 * \return Status of the initialization procedure.
 */
void dualtimer_init(const struct dualtimer_config *config)
{
	uint8_t regval = 0;
1000bf16:	2500      	movs	r5, #0
		LPMCU_MISC_REGS0->DUALTIMER0_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER0_CTRL_CNTR_1_ENABLE;
		dualtimer_enable(DUALTIMER_TIMER1);
	}

	/* Timer2 config */
	if (config->timer2.timer_enable) {
1000bf18:	7b23      	ldrb	r3, [r4, #12]
1000bf1a:	2b00      	cmp	r3, #0
1000bf1c:	d029      	beq.n	1000bf72 <dualtimer_init+0xe2>
		if (config->timer2.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
1000bf1e:	7b63      	ldrb	r3, [r4, #13]
1000bf20:	2b00      	cmp	r3, #0
1000bf22:	d005      	beq.n	1000bf30 <dualtimer_init+0xa0>
			regval = DUALTIMER_TIMER2CONTROL_ONE_SHOT_COUNT_1;
		} else if (config->timer2.counter_mode == DUALTIMER_FREE_RUNNING_MODE) {
1000bf24:	2b01      	cmp	r3, #1
1000bf26:	d005      	beq.n	1000bf34 <dualtimer_init+0xa4>
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_0;
		} else if (config->timer2.counter_mode == DUALTIMER_PERIODIC_MODE) {
1000bf28:	2b02      	cmp	r3, #2
1000bf2a:	d104      	bne.n	1000bf36 <dualtimer_init+0xa6>
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_1;
1000bf2c:	2540      	movs	r5, #64	; 0x40
1000bf2e:	e002      	b.n	1000bf36 <dualtimer_init+0xa6>
	}

	/* Timer2 config */
	if (config->timer2.timer_enable) {
		if (config->timer2.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
			regval = DUALTIMER_TIMER2CONTROL_ONE_SHOT_COUNT_1;
1000bf30:	2501      	movs	r5, #1
1000bf32:	e000      	b.n	1000bf36 <dualtimer_init+0xa6>
		} else if (config->timer2.counter_mode == DUALTIMER_FREE_RUNNING_MODE) {
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_0;
1000bf34:	2500      	movs	r5, #0
		} else if (config->timer2.counter_mode == DUALTIMER_PERIODIC_MODE) {
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_1;
		}
		regval |= (DUALTIMER_TIMER2CONTROL_TIMER_SIZE &
1000bf36:	7ba3      	ldrb	r3, [r4, #14]
1000bf38:	005b      	lsls	r3, r3, #1
1000bf3a:	2102      	movs	r1, #2
1000bf3c:	4019      	ands	r1, r3
1000bf3e:	7be2      	ldrb	r2, [r4, #15]
1000bf40:	0092      	lsls	r2, r2, #2
1000bf42:	230c      	movs	r3, #12
1000bf44:	4013      	ands	r3, r2
1000bf46:	430b      	orrs	r3, r1
1000bf48:	431d      	orrs	r5, r3
				((config->timer2.counter_size) << DUALTIMER_TIMER2CONTROL_TIMER_SIZE_Pos)) |
				DUALTIMER_TIMER2CONTROL_TIMERPRE(config->timer2.clock_prescaler);
		if (config->timer2.interrup_enable) {
1000bf4a:	7c23      	ldrb	r3, [r4, #16]
1000bf4c:	2b00      	cmp	r3, #0
1000bf4e:	d001      	beq.n	1000bf54 <dualtimer_init+0xc4>
			regval |= DUALTIMER_TIMER2CONTROL_INTERRUPT_ENABLE;
1000bf50:	2320      	movs	r3, #32
1000bf52:	431d      	orrs	r5, r3
		}
		DUALTIMER0->TIMER2LOAD.reg = config->timer2.load_value;
1000bf54:	6962      	ldr	r2, [r4, #20]
1000bf56:	4b0b      	ldr	r3, [pc, #44]	; (1000bf84 <dualtimer_init+0xf4>)
1000bf58:	621a      	str	r2, [r3, #32]
		DUALTIMER0->TIMER2CONTROL.reg = regval;
1000bf5a:	2228      	movs	r2, #40	; 0x28
1000bf5c:	549d      	strb	r5, [r3, r2]
		LPMCU_MISC_REGS0->DUALTIMER0_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER0_CTRL_CNTR_2_ENABLE;
1000bf5e:	4908      	ldr	r1, [pc, #32]	; (1000bf80 <dualtimer_init+0xf0>)
1000bf60:	3261      	adds	r2, #97	; 0x61
1000bf62:	32ff      	adds	r2, #255	; 0xff
1000bf64:	5c88      	ldrb	r0, [r1, r2]
1000bf66:	2302      	movs	r3, #2
1000bf68:	4303      	orrs	r3, r0
1000bf6a:	548b      	strb	r3, [r1, r2]
		dualtimer_enable(DUALTIMER_TIMER2);
1000bf6c:	2001      	movs	r0, #1
1000bf6e:	4b06      	ldr	r3, [pc, #24]	; (1000bf88 <dualtimer_init+0xf8>)
1000bf70:	4798      	blx	r3
	}

	system_register_isr(RAM_ISR_TABLE_DUALTIMER_INDEX, (uint32_t)dualtimer_isr_handler);
1000bf72:	4906      	ldr	r1, [pc, #24]	; (1000bf8c <dualtimer_init+0xfc>)
1000bf74:	201e      	movs	r0, #30
1000bf76:	4b06      	ldr	r3, [pc, #24]	; (1000bf90 <dualtimer_init+0x100>)
1000bf78:	4798      	blx	r3
}
1000bf7a:	bd70      	pop	{r4, r5, r6, pc}
1000bf7c:	1000ce69 	.word	0x1000ce69
1000bf80:	4000b000 	.word	0x4000b000
1000bf84:	40001000 	.word	0x40001000
1000bf88:	1000be49 	.word	0x1000be49
1000bf8c:	1000bdb9 	.word	0x1000bdb9
1000bf90:	1000d2d1 	.word	0x1000d2d1

1000bf94 <dualtimer_register_callback>:
 *
 * \param[in]     callback_func Pointer to callback function
 */
void dualtimer_register_callback(enum dualtimer_timer timer, dualtimer_callback_t fun)
{
	if (timer == DUALTIMER_TIMER1) {
1000bf94:	2800      	cmp	r0, #0
1000bf96:	d102      	bne.n	1000bf9e <dualtimer_register_callback+0xa>
		dualtimer_callback_timer1 = fun;
1000bf98:	4b02      	ldr	r3, [pc, #8]	; (1000bfa4 <dualtimer_register_callback+0x10>)
1000bf9a:	6019      	str	r1, [r3, #0]
1000bf9c:	e001      	b.n	1000bfa2 <dualtimer_register_callback+0xe>
	} else {
		dualtimer_callback_timer2 = fun;
1000bf9e:	4b02      	ldr	r3, [pc, #8]	; (1000bfa8 <dualtimer_register_callback+0x14>)
1000bfa0:	6019      	str	r1, [r3, #0]
	}
}
1000bfa2:	4770      	bx	lr
1000bfa4:	100184bc 	.word	0x100184bc
1000bfa8:	100184c0 	.word	0x100184c0

1000bfac <gpio_port0_isr_handler>:
 *
 * This function will enter interrupt.
 *
 */
static void gpio_port0_isr_handler(void)
{
1000bfac:	b570      	push	{r4, r5, r6, lr}
	uint32_t flag = _gpio_instances[0].hw->INTSTATUSCLEAR.reg;
1000bfae:	4b16      	ldr	r3, [pc, #88]	; (1000c008 <gpio_port0_isr_handler+0x5c>)
1000bfb0:	681d      	ldr	r5, [r3, #0]
1000bfb2:	8f29      	ldrh	r1, [r5, #56]	; 0x38
1000bfb4:	b289      	uxth	r1, r1

	for (uint8_t i = 0; i < 16; i++){
		if (flag & (1 << i)) {
1000bfb6:	07cb      	lsls	r3, r1, #31
1000bfb8:	d407      	bmi.n	1000bfca <gpio_port0_isr_handler+0x1e>
1000bfba:	2301      	movs	r3, #1
1000bfbc:	2401      	movs	r4, #1
1000bfbe:	0018      	movs	r0, r3
1000bfc0:	0022      	movs	r2, r4
1000bfc2:	409a      	lsls	r2, r3
1000bfc4:	4211      	tst	r1, r2
1000bfc6:	d014      	beq.n	1000bff2 <gpio_port0_isr_handler+0x46>
1000bfc8:	e001      	b.n	1000bfce <gpio_port0_isr_handler+0x22>
1000bfca:	2201      	movs	r2, #1
1000bfcc:	2000      	movs	r0, #0
			/* Clear interrupt flag */
			_gpio_instances[0].hw->INTSTATUSCLEAR.reg = (1 << i);
1000bfce:	b292      	uxth	r2, r2
1000bfd0:	872a      	strh	r2, [r5, #56]	; 0x38
			if ((_gpio_instances[0].callback_enable_mask & (1 << i)) && \
1000bfd2:	2346      	movs	r3, #70	; 0x46
1000bfd4:	4a0c      	ldr	r2, [pc, #48]	; (1000c008 <gpio_port0_isr_handler+0x5c>)
1000bfd6:	5ad3      	ldrh	r3, [r2, r3]
1000bfd8:	4103      	asrs	r3, r0
1000bfda:	07db      	lsls	r3, r3, #31
1000bfdc:	d50c      	bpl.n	1000bff8 <gpio_port0_isr_handler+0x4c>
                    (_gpio_instances[0].callback_reg_mask & (1 << i)))
1000bfde:	2344      	movs	r3, #68	; 0x44

	for (uint8_t i = 0; i < 16; i++){
		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[0].hw->INTSTATUSCLEAR.reg = (1 << i);
			if ((_gpio_instances[0].callback_enable_mask & (1 << i)) && \
1000bfe0:	5ad3      	ldrh	r3, [r2, r3]
1000bfe2:	4103      	asrs	r3, r0
1000bfe4:	07db      	lsls	r3, r3, #31
1000bfe6:	d507      	bpl.n	1000bff8 <gpio_port0_isr_handler+0x4c>
                    (_gpio_instances[0].callback_reg_mask & (1 << i)))
                _gpio_instances[0].callback[i]();
1000bfe8:	0080      	lsls	r0, r0, #2
1000bfea:	1810      	adds	r0, r2, r0
1000bfec:	6843      	ldr	r3, [r0, #4]
1000bfee:	4798      	blx	r3
1000bff0:	e002      	b.n	1000bff8 <gpio_port0_isr_handler+0x4c>
1000bff2:	3301      	adds	r3, #1
 */
static void gpio_port0_isr_handler(void)
{
	uint32_t flag = _gpio_instances[0].hw->INTSTATUSCLEAR.reg;

	for (uint8_t i = 0; i < 16; i++){
1000bff4:	2b10      	cmp	r3, #16
1000bff6:	d1e2      	bne.n	1000bfbe <gpio_port0_isr_handler+0x12>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
1000bff8:	2180      	movs	r1, #128	; 0x80
1000bffa:	0409      	lsls	r1, r1, #16
1000bffc:	23c0      	movs	r3, #192	; 0xc0
1000bffe:	005b      	lsls	r3, r3, #1
1000c000:	4a02      	ldr	r2, [pc, #8]	; (1000c00c <gpio_port0_isr_handler+0x60>)
1000c002:	50d1      	str	r1, [r2, r3]
                _gpio_instances[0].callback[i]();
			break;
		}
	}
	NVIC_ClearPendingIRQ(GPIO0_IRQn);
}
1000c004:	bd70      	pop	{r4, r5, r6, pc}
1000c006:	46c0      	nop			; (mov r8, r8)
1000c008:	1001a13c 	.word	0x1001a13c
1000c00c:	e000e100 	.word	0xe000e100

1000c010 <gpio_port1_isr_handler>:
 *
 * This function will enter interrupt.
 *
 */
static void gpio_port1_isr_handler(void)
{
1000c010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t flag = _gpio_instances[1].hw->INTSTATUSCLEAR.reg;
1000c012:	4b18      	ldr	r3, [pc, #96]	; (1000c074 <gpio_port1_isr_handler+0x64>)
1000c014:	6c9b      	ldr	r3, [r3, #72]	; 0x48
1000c016:	8f1e      	ldrh	r6, [r3, #56]	; 0x38
1000c018:	b2b6      	uxth	r6, r6
1000c01a:	0037      	movs	r7, r6
1000c01c:	2400      	movs	r4, #0

	for (uint8_t i = 0; i < 16; i++){
		/* For AON wakeup pin clear interrupt */
		if (flag & ((1<<15) | (1<<14) | (1<<13))) {
1000c01e:	0b76      	lsrs	r6, r6, #13
1000c020:	0376      	lsls	r6, r6, #13
			aon_handle_ext_wakeup_isr();
		}

		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[1].hw->INTSTATUSCLEAR.reg = (1 << i);
1000c022:	4d14      	ldr	r5, [pc, #80]	; (1000c074 <gpio_port1_isr_handler+0x64>)
{
	uint32_t flag = _gpio_instances[1].hw->INTSTATUSCLEAR.reg;

	for (uint8_t i = 0; i < 16; i++){
		/* For AON wakeup pin clear interrupt */
		if (flag & ((1<<15) | (1<<14) | (1<<13))) {
1000c024:	2e00      	cmp	r6, #0
1000c026:	d001      	beq.n	1000c02c <gpio_port1_isr_handler+0x1c>
			aon_handle_ext_wakeup_isr();
1000c028:	4b13      	ldr	r3, [pc, #76]	; (1000c078 <gpio_port1_isr_handler+0x68>)
1000c02a:	4798      	blx	r3
		}

		if (flag & (1 << i)) {
1000c02c:	0022      	movs	r2, r4
1000c02e:	2301      	movs	r3, #1
1000c030:	40a3      	lsls	r3, r4
1000c032:	421f      	tst	r7, r3
1000c034:	d013      	beq.n	1000c05e <gpio_port1_isr_handler+0x4e>
			/* Clear interrupt flag */
			_gpio_instances[1].hw->INTSTATUSCLEAR.reg = (1 << i);
1000c036:	b29b      	uxth	r3, r3
1000c038:	6ca9      	ldr	r1, [r5, #72]	; 0x48
1000c03a:	870b      	strh	r3, [r1, #56]	; 0x38
			if ((_gpio_instances[1].callback_enable_mask & (1 << i)) && \
1000c03c:	238e      	movs	r3, #142	; 0x8e
1000c03e:	5aeb      	ldrh	r3, [r5, r3]
1000c040:	4123      	asrs	r3, r4
1000c042:	07db      	lsls	r3, r3, #31
1000c044:	d50b      	bpl.n	1000c05e <gpio_port1_isr_handler+0x4e>
			(_gpio_instances[1].callback_reg_mask & (1 << i))) {
1000c046:	238c      	movs	r3, #140	; 0x8c
		}

		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[1].hw->INTSTATUSCLEAR.reg = (1 << i);
			if ((_gpio_instances[1].callback_enable_mask & (1 << i)) && \
1000c048:	490a      	ldr	r1, [pc, #40]	; (1000c074 <gpio_port1_isr_handler+0x64>)
1000c04a:	5acb      	ldrh	r3, [r1, r3]
1000c04c:	4123      	asrs	r3, r4
1000c04e:	07db      	lsls	r3, r3, #31
1000c050:	d505      	bpl.n	1000c05e <gpio_port1_isr_handler+0x4e>
			(_gpio_instances[1].callback_reg_mask & (1 << i))) {
				_gpio_instances[1].callback[i]();
1000c052:	3212      	adds	r2, #18
1000c054:	0092      	lsls	r2, r2, #2
1000c056:	188a      	adds	r2, r1, r2
1000c058:	6853      	ldr	r3, [r2, #4]
1000c05a:	4798      	blx	r3
				break;
1000c05c:	e002      	b.n	1000c064 <gpio_port1_isr_handler+0x54>
1000c05e:	3401      	adds	r4, #1
 */
static void gpio_port1_isr_handler(void)
{
	uint32_t flag = _gpio_instances[1].hw->INTSTATUSCLEAR.reg;

	for (uint8_t i = 0; i < 16; i++){
1000c060:	2c10      	cmp	r4, #16
1000c062:	d1df      	bne.n	1000c024 <gpio_port1_isr_handler+0x14>
1000c064:	2180      	movs	r1, #128	; 0x80
1000c066:	0449      	lsls	r1, r1, #17
1000c068:	23c0      	movs	r3, #192	; 0xc0
1000c06a:	005b      	lsls	r3, r3, #1
1000c06c:	4a03      	ldr	r2, [pc, #12]	; (1000c07c <gpio_port1_isr_handler+0x6c>)
1000c06e:	50d1      	str	r1, [r2, r3]
				break;
			}
		}
	}
	NVIC_ClearPendingIRQ(GPIO1_IRQn);
}
1000c070:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000c072:	46c0      	nop			; (mov r8, r8)
1000c074:	1001a13c 	.word	0x1001a13c
1000c078:	0001bc51 	.word	0x0001bc51
1000c07c:	e000e100 	.word	0xe000e100

1000c080 <gpio_port2_isr_handler>:
 *
 * This function will enter interrupt.
 *
 */
static void gpio_port2_isr_handler(void)
{
1000c080:	b510      	push	{r4, lr}
	uint32_t flag = _gpio_instances[2].hw->INTSTATUSCLEAR.reg;
1000c082:	2390      	movs	r3, #144	; 0x90
1000c084:	4a1b      	ldr	r2, [pc, #108]	; (1000c0f4 <gpio_port2_isr_handler+0x74>)
1000c086:	58d2      	ldr	r2, [r2, r3]
1000c088:	8f13      	ldrh	r3, [r2, #56]	; 0x38
1000c08a:	b29b      	uxth	r3, r3

	for (uint8_t i = 12; i < 16; i++){
		if (flag & (1 << i)) {
1000c08c:	04d9      	lsls	r1, r3, #19
1000c08e:	d414      	bmi.n	1000c0ba <gpio_port2_isr_handler+0x3a>
1000c090:	0499      	lsls	r1, r3, #18
1000c092:	d40a      	bmi.n	1000c0aa <gpio_port2_isr_handler+0x2a>
1000c094:	0459      	lsls	r1, r3, #17
1000c096:	d40c      	bmi.n	1000c0b2 <gpio_port2_isr_handler+0x32>
1000c098:	0bdb      	lsrs	r3, r3, #15
1000c09a:	03db      	lsls	r3, r3, #15
1000c09c:	b29b      	uxth	r3, r3
1000c09e:	2b00      	cmp	r3, #0
1000c0a0:	d020      	beq.n	1000c0e4 <gpio_port2_isr_handler+0x64>
1000c0a2:	2380      	movs	r3, #128	; 0x80
1000c0a4:	021b      	lsls	r3, r3, #8
1000c0a6:	210f      	movs	r1, #15
1000c0a8:	e00a      	b.n	1000c0c0 <gpio_port2_isr_handler+0x40>
1000c0aa:	2380      	movs	r3, #128	; 0x80
1000c0ac:	019b      	lsls	r3, r3, #6
1000c0ae:	210d      	movs	r1, #13
1000c0b0:	e006      	b.n	1000c0c0 <gpio_port2_isr_handler+0x40>
1000c0b2:	2380      	movs	r3, #128	; 0x80
1000c0b4:	01db      	lsls	r3, r3, #7
1000c0b6:	210e      	movs	r1, #14
1000c0b8:	e002      	b.n	1000c0c0 <gpio_port2_isr_handler+0x40>
1000c0ba:	2380      	movs	r3, #128	; 0x80
1000c0bc:	015b      	lsls	r3, r3, #5
1000c0be:	210c      	movs	r1, #12
			/* Clear interrupt flag */
			_gpio_instances[2].hw->INTSTATUSCLEAR.reg = (1 << i);
1000c0c0:	b29b      	uxth	r3, r3
1000c0c2:	8713      	strh	r3, [r2, #56]	; 0x38
			if ((_gpio_instances[2].callback_enable_mask & (1 << i)) && \
1000c0c4:	23d6      	movs	r3, #214	; 0xd6
1000c0c6:	4a0b      	ldr	r2, [pc, #44]	; (1000c0f4 <gpio_port2_isr_handler+0x74>)
1000c0c8:	5ad3      	ldrh	r3, [r2, r3]
1000c0ca:	410b      	asrs	r3, r1
1000c0cc:	07db      	lsls	r3, r3, #31
1000c0ce:	d509      	bpl.n	1000c0e4 <gpio_port2_isr_handler+0x64>
                    (_gpio_instances[2].callback_reg_mask & (1 << i)))
1000c0d0:	23d4      	movs	r3, #212	; 0xd4

	for (uint8_t i = 12; i < 16; i++){
		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[2].hw->INTSTATUSCLEAR.reg = (1 << i);
			if ((_gpio_instances[2].callback_enable_mask & (1 << i)) && \
1000c0d2:	5ad3      	ldrh	r3, [r2, r3]
1000c0d4:	410b      	asrs	r3, r1
1000c0d6:	07db      	lsls	r3, r3, #31
1000c0d8:	d504      	bpl.n	1000c0e4 <gpio_port2_isr_handler+0x64>
                    (_gpio_instances[2].callback_reg_mask & (1 << i)))
                _gpio_instances[2].callback[i]();
1000c0da:	3124      	adds	r1, #36	; 0x24
1000c0dc:	0089      	lsls	r1, r1, #2
1000c0de:	1851      	adds	r1, r2, r1
1000c0e0:	684b      	ldr	r3, [r1, #4]
1000c0e2:	4798      	blx	r3
1000c0e4:	2180      	movs	r1, #128	; 0x80
1000c0e6:	0489      	lsls	r1, r1, #18
1000c0e8:	23c0      	movs	r3, #192	; 0xc0
1000c0ea:	005b      	lsls	r3, r3, #1
1000c0ec:	4a02      	ldr	r2, [pc, #8]	; (1000c0f8 <gpio_port2_isr_handler+0x78>)
1000c0ee:	50d1      	str	r1, [r2, r3]
			break;
		}
	}
	NVIC_ClearPendingIRQ(GPIO2_IRQn);
}
1000c0f0:	bd10      	pop	{r4, pc}
1000c0f2:	46c0      	nop			; (mov r8, r8)
1000c0f4:	1001a13c 	.word	0x1001a13c
1000c0f8:	e000e100 	.word	0xe000e100

1000c0fc <gpio_get_config_defaults>:
 *  \param[out] config  Configuration structure to initialize to default values.
 */
void gpio_get_config_defaults(struct gpio_config *const config)
{
	/* Default configuration values */
	config->direction  = GPIO_PIN_DIR_INPUT;
1000c0fc:	2300      	movs	r3, #0
1000c0fe:	7003      	strb	r3, [r0, #0]
	config->input_pull = GPIO_PIN_PULL_UP;
1000c100:	2201      	movs	r2, #1
1000c102:	7042      	strb	r2, [r0, #1]
	config->powersave  = false;
1000c104:	7083      	strb	r3, [r0, #2]
	config->aon_wakeup = false;
1000c106:	70c3      	strb	r3, [r0, #3]
}
1000c108:	4770      	bx	lr
1000c10a:	46c0      	nop			; (mov r8, r8)

1000c10c <gpio_pin_set_config>:
 *  \retval STATUS_RESOURCE_NOT_AVAILABLE   Requested gpio is already in use.
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
1000c10c:	b570      	push	{r4, r5, r6, lr}
	* GPIO_0 & GPIO_1 are used for SWD.
	*/
	if ((gpio_pin == PIN_LP_GPIO_0) || \
		(gpio_pin == PIN_LP_GPIO_1))
	{
		status = STATUS_ERR_INVALID_ARG;
1000c10e:	2317      	movs	r3, #23
	enum status_code status = STATUS_OK;

	/* Following GPIO's should never be modified by user.
	* GPIO_0 & GPIO_1 are used for SWD.
	*/
	if ((gpio_pin == PIN_LP_GPIO_0) || \
1000c110:	2801      	cmp	r0, #1
1000c112:	d800      	bhi.n	1000c116 <gpio_pin_set_config+0xa>
1000c114:	e0c8      	b.n	1000c2a8 <gpio_pin_set_config+0x19c>
		(gpio_pin == PIN_LP_GPIO_1))
	{
		status = STATUS_ERR_INVALID_ARG;
	} else {
		if (gpio_pin <= 7) {
1000c116:	2807      	cmp	r0, #7
1000c118:	d809      	bhi.n	1000c12e <gpio_pin_set_config+0x22>
			LPMCU_MISC_REGS0->PINMUX_SEL_0.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000c11a:	4d64      	ldr	r5, [pc, #400]	; (1000c2ac <gpio_pin_set_config+0x1a0>)
1000c11c:	6c6a      	ldr	r2, [r5, #68]	; 0x44
1000c11e:	3b10      	subs	r3, #16
1000c120:	4003      	ands	r3, r0
1000c122:	009b      	lsls	r3, r3, #2
1000c124:	2407      	movs	r4, #7
1000c126:	409c      	lsls	r4, r3
1000c128:	43a2      	bics	r2, r4
1000c12a:	646a      	str	r2, [r5, #68]	; 0x44
1000c12c:	e029      	b.n	1000c182 <gpio_pin_set_config+0x76>
		} else if (gpio_pin <= 15) {
1000c12e:	280f      	cmp	r0, #15
1000c130:	d809      	bhi.n	1000c146 <gpio_pin_set_config+0x3a>
			LPMCU_MISC_REGS0->PINMUX_SEL_1.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000c132:	4d5e      	ldr	r5, [pc, #376]	; (1000c2ac <gpio_pin_set_config+0x1a0>)
1000c134:	6caa      	ldr	r2, [r5, #72]	; 0x48
1000c136:	2307      	movs	r3, #7
1000c138:	4003      	ands	r3, r0
1000c13a:	009b      	lsls	r3, r3, #2
1000c13c:	2407      	movs	r4, #7
1000c13e:	409c      	lsls	r4, r3
1000c140:	43a2      	bics	r2, r4
1000c142:	64aa      	str	r2, [r5, #72]	; 0x48
1000c144:	e01d      	b.n	1000c182 <gpio_pin_set_config+0x76>
		} else if (gpio_pin <= 23) {
1000c146:	2817      	cmp	r0, #23
1000c148:	d809      	bhi.n	1000c15e <gpio_pin_set_config+0x52>
			LPMCU_MISC_REGS0->PINMUX_SEL_2.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000c14a:	4d58      	ldr	r5, [pc, #352]	; (1000c2ac <gpio_pin_set_config+0x1a0>)
1000c14c:	6cea      	ldr	r2, [r5, #76]	; 0x4c
1000c14e:	2307      	movs	r3, #7
1000c150:	4003      	ands	r3, r0
1000c152:	009b      	lsls	r3, r3, #2
1000c154:	2407      	movs	r4, #7
1000c156:	409c      	lsls	r4, r3
1000c158:	43a2      	bics	r2, r4
1000c15a:	64ea      	str	r2, [r5, #76]	; 0x4c
1000c15c:	e011      	b.n	1000c182 <gpio_pin_set_config+0x76>
		} else if (44 <= gpio_pin  && gpio_pin < 48) {
1000c15e:	0003      	movs	r3, r0
1000c160:	3b2c      	subs	r3, #44	; 0x2c
1000c162:	2b03      	cmp	r3, #3
1000c164:	d80d      	bhi.n	1000c182 <gpio_pin_set_config+0x76>
			/* Set GPIO_MSx as digital mode */
			AON_GP_REGS0->MS_GPIO_MODE.vec.ANALOG_ENABLE_ &= ~(1 << (gpio_pin - PIN_GPIO_MS4));
1000c166:	4d52      	ldr	r5, [pc, #328]	; (1000c2b0 <gpio_pin_set_config+0x1a4>)
1000c168:	2482      	movs	r4, #130	; 0x82
1000c16a:	00e4      	lsls	r4, r4, #3
1000c16c:	5d2a      	ldrb	r2, [r5, r4]
1000c16e:	0712      	lsls	r2, r2, #28
1000c170:	2601      	movs	r6, #1
1000c172:	409e      	lsls	r6, r3
1000c174:	0f12      	lsrs	r2, r2, #28
1000c176:	5d2b      	ldrb	r3, [r5, r4]
1000c178:	43b2      	bics	r2, r6
1000c17a:	260f      	movs	r6, #15
1000c17c:	43b3      	bics	r3, r6
1000c17e:	4313      	orrs	r3, r2
1000c180:	552b      	strb	r3, [r5, r4]
		}
	
		if ((gpio_pin == PIN_AO_GPIO_0) || (gpio_pin == PIN_AO_GPIO_1) ||
1000c182:	0003      	movs	r3, r0
1000c184:	3b1d      	subs	r3, #29
1000c186:	2b02      	cmp	r3, #2
1000c188:	d829      	bhi.n	1000c1de <gpio_pin_set_config+0xd2>
				(gpio_pin == PIN_AO_GPIO_2)) {
			/* Active Low, Always On Pull Enable Control */
			if (config->input_pull == GPIO_PIN_PULL_UP) {
1000c18a:	784b      	ldrb	r3, [r1, #1]
1000c18c:	2b01      	cmp	r3, #1
1000c18e:	d108      	bne.n	1000c1a2 <gpio_pin_set_config+0x96>
				AON_GP_REGS0->AON_PULL_ENABLE.reg &= ~(1 << (31 - gpio_pin));
1000c190:	4d47      	ldr	r5, [pc, #284]	; (1000c2b0 <gpio_pin_set_config+0x1a4>)
1000c192:	7d2b      	ldrb	r3, [r5, #20]
1000c194:	241f      	movs	r4, #31
1000c196:	1a24      	subs	r4, r4, r0
1000c198:	2201      	movs	r2, #1
1000c19a:	40a2      	lsls	r2, r4
1000c19c:	4393      	bics	r3, r2
1000c19e:	752b      	strb	r3, [r5, #20]
1000c1a0:	e008      	b.n	1000c1b4 <gpio_pin_set_config+0xa8>
			} else {
				AON_GP_REGS0->AON_PULL_ENABLE.reg |= 1 << (31 - gpio_pin);
1000c1a2:	4c43      	ldr	r4, [pc, #268]	; (1000c2b0 <gpio_pin_set_config+0x1a4>)
1000c1a4:	7d25      	ldrb	r5, [r4, #20]
1000c1a6:	221f      	movs	r2, #31
1000c1a8:	1a12      	subs	r2, r2, r0
1000c1aa:	2301      	movs	r3, #1
1000c1ac:	4093      	lsls	r3, r2
1000c1ae:	432b      	orrs	r3, r5
1000c1b0:	b2db      	uxtb	r3, r3
1000c1b2:	7523      	strb	r3, [r4, #20]
			}
			if (config->aon_wakeup) {
1000c1b4:	78ca      	ldrb	r2, [r1, #3]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000c1b6:	2300      	movs	r3, #0
			if (config->input_pull == GPIO_PIN_PULL_UP) {
				AON_GP_REGS0->AON_PULL_ENABLE.reg &= ~(1 << (31 - gpio_pin));
			} else {
				AON_GP_REGS0->AON_PULL_ENABLE.reg |= 1 << (31 - gpio_pin);
			}
			if (config->aon_wakeup) {
1000c1b8:	2a00      	cmp	r2, #0
1000c1ba:	d075      	beq.n	1000c2a8 <gpio_pin_set_config+0x19c>
				/* Enable AON_GPIO_x to be a wakeup MCU from sleep mode */
				AON_GP_REGS0->AON_PINMUX_SEL.reg |= 1 << (4 * (31 - gpio_pin));
1000c1bc:	493c      	ldr	r1, [pc, #240]	; (1000c2b0 <gpio_pin_set_config+0x1a4>)
1000c1be:	880c      	ldrh	r4, [r1, #0]
1000c1c0:	221f      	movs	r2, #31
1000c1c2:	1a10      	subs	r0, r2, r0
1000c1c4:	0080      	lsls	r0, r0, #2
1000c1c6:	3301      	adds	r3, #1
1000c1c8:	4083      	lsls	r3, r0
1000c1ca:	4323      	orrs	r3, r4
1000c1cc:	b29b      	uxth	r3, r3
1000c1ce:	800b      	strh	r3, [r1, #0]
				/* Enable AON_GPIO_x to wake up the BLE domain from sleep mode */
				AON_PWR_SEQ0->GPIO_WAKEUP_CTRL.bit.BLE_ENABLE = 1;
1000c1d0:	4a38      	ldr	r2, [pc, #224]	; (1000c2b4 <gpio_pin_set_config+0x1a8>)
1000c1d2:	7811      	ldrb	r1, [r2, #0]
1000c1d4:	2302      	movs	r3, #2
1000c1d6:	430b      	orrs	r3, r1
1000c1d8:	7013      	strb	r3, [r2, #0]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000c1da:	2300      	movs	r3, #0
1000c1dc:	e064      	b.n	1000c2a8 <gpio_pin_set_config+0x19c>
				AON_GP_REGS0->AON_PINMUX_SEL.reg |= 1 << (4 * (31 - gpio_pin));
				/* Enable AON_GPIO_x to wake up the BLE domain from sleep mode */
				AON_PWR_SEQ0->GPIO_WAKEUP_CTRL.bit.BLE_ENABLE = 1;
			}
		} else {
			if(config->direction == GPIO_PIN_DIR_INPUT) {
1000c1de:	780a      	ldrb	r2, [r1, #0]
1000c1e0:	2a00      	cmp	r2, #0
1000c1e2:	d140      	bne.n	1000c266 <gpio_pin_set_config+0x15a>
				if(gpio_pin < 16) {
1000c1e4:	280f      	cmp	r0, #15
1000c1e6:	d808      	bhi.n	1000c1fa <gpio_pin_set_config+0xee>
					GPIO0->OUTENCLR.reg = (1 << gpio_pin);
1000c1e8:	2301      	movs	r3, #1
1000c1ea:	4083      	lsls	r3, r0
1000c1ec:	b29b      	uxth	r3, r3
1000c1ee:	4a32      	ldr	r2, [pc, #200]	; (1000c2b8 <gpio_pin_set_config+0x1ac>)
1000c1f0:	8293      	strh	r3, [r2, #20]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000c1f2:	2300      	movs	r3, #0
					GPIO1->OUTENCLR.reg = (1 << (gpio_pin % 16));
				} else {
					GPIO2->OUTENCLR.reg = (1 << (gpio_pin % 16));
				}
				/* pull_enable. */
				if (gpio_pin < 32) {
1000c1f4:	281f      	cmp	r0, #31
1000c1f6:	d857      	bhi.n	1000c2a8 <gpio_pin_set_config+0x19c>
1000c1f8:	e012      	b.n	1000c220 <gpio_pin_set_config+0x114>
			}
		} else {
			if(config->direction == GPIO_PIN_DIR_INPUT) {
				if(gpio_pin < 16) {
					GPIO0->OUTENCLR.reg = (1 << gpio_pin);
				} else if (gpio_pin < 32){
1000c1fa:	281f      	cmp	r0, #31
1000c1fc:	d807      	bhi.n	1000c20e <gpio_pin_set_config+0x102>
					GPIO1->OUTENCLR.reg = (1 << (gpio_pin % 16));
1000c1fe:	220f      	movs	r2, #15
1000c200:	4002      	ands	r2, r0
1000c202:	2301      	movs	r3, #1
1000c204:	4093      	lsls	r3, r2
1000c206:	b29b      	uxth	r3, r3
1000c208:	4a2c      	ldr	r2, [pc, #176]	; (1000c2bc <gpio_pin_set_config+0x1b0>)
1000c20a:	8293      	strh	r3, [r2, #20]
1000c20c:	e008      	b.n	1000c220 <gpio_pin_set_config+0x114>
				} else {
					GPIO2->OUTENCLR.reg = (1 << (gpio_pin % 16));
1000c20e:	230f      	movs	r3, #15
1000c210:	4018      	ands	r0, r3
1000c212:	3b0e      	subs	r3, #14
1000c214:	4083      	lsls	r3, r0
1000c216:	b29b      	uxth	r3, r3
1000c218:	4a29      	ldr	r2, [pc, #164]	; (1000c2c0 <gpio_pin_set_config+0x1b4>)
1000c21a:	8293      	strh	r3, [r2, #20]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000c21c:	2300      	movs	r3, #0
1000c21e:	e043      	b.n	1000c2a8 <gpio_pin_set_config+0x19c>
				} else {
					GPIO2->OUTENCLR.reg = (1 << (gpio_pin % 16));
				}
				/* pull_enable. */
				if (gpio_pin < 32) {
					switch(config->input_pull) {
1000c220:	784b      	ldrb	r3, [r1, #1]
1000c222:	2b01      	cmp	r3, #1
1000c224:	d00c      	beq.n	1000c240 <gpio_pin_set_config+0x134>
1000c226:	2b00      	cmp	r3, #0
1000c228:	d002      	beq.n	1000c230 <gpio_pin_set_config+0x124>
1000c22a:	2b02      	cmp	r3, #2
1000c22c:	d010      	beq.n	1000c250 <gpio_pin_set_config+0x144>
1000c22e:	e03a      	b.n	1000c2a6 <gpio_pin_set_config+0x19a>
						case GPIO_PIN_PULL_NONE:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg |= (1 << gpio_pin);
1000c230:	491e      	ldr	r1, [pc, #120]	; (1000c2ac <gpio_pin_set_config+0x1a0>)
1000c232:	6d0a      	ldr	r2, [r1, #80]	; 0x50
1000c234:	2301      	movs	r3, #1
1000c236:	4083      	lsls	r3, r0
1000c238:	4313      	orrs	r3, r2
1000c23a:	650b      	str	r3, [r1, #80]	; 0x50
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000c23c:	2300      	movs	r3, #0
				/* pull_enable. */
				if (gpio_pin < 32) {
					switch(config->input_pull) {
						case GPIO_PIN_PULL_NONE:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg |= (1 << gpio_pin);
							break;
1000c23e:	e033      	b.n	1000c2a8 <gpio_pin_set_config+0x19c>
						case GPIO_PIN_PULL_UP:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
1000c240:	491a      	ldr	r1, [pc, #104]	; (1000c2ac <gpio_pin_set_config+0x1a0>)
1000c242:	6d0b      	ldr	r3, [r1, #80]	; 0x50
1000c244:	2201      	movs	r2, #1
1000c246:	4082      	lsls	r2, r0
1000c248:	4393      	bics	r3, r2
1000c24a:	650b      	str	r3, [r1, #80]	; 0x50
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000c24c:	2300      	movs	r3, #0
						case GPIO_PIN_PULL_NONE:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg |= (1 << gpio_pin);
							break;
						case GPIO_PIN_PULL_UP:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
							break;
1000c24e:	e02b      	b.n	1000c2a8 <gpio_pin_set_config+0x19c>
						case GPIO_PIN_PULL_DOWN:
							/* Set R-Type */
							LPMCU_MISC_REGS0->RTYPE_PAD_0.reg |= (1 << gpio_pin);
1000c250:	4b16      	ldr	r3, [pc, #88]	; (1000c2ac <gpio_pin_set_config+0x1a0>)
1000c252:	6d59      	ldr	r1, [r3, #84]	; 0x54
1000c254:	2201      	movs	r2, #1
1000c256:	4082      	lsls	r2, r0
1000c258:	4311      	orrs	r1, r2
1000c25a:	6559      	str	r1, [r3, #84]	; 0x54
							/* Set REN */
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
1000c25c:	6d19      	ldr	r1, [r3, #80]	; 0x50
1000c25e:	4391      	bics	r1, r2
1000c260:	6519      	str	r1, [r3, #80]	; 0x50
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000c262:	2300      	movs	r3, #0
						case GPIO_PIN_PULL_DOWN:
							/* Set R-Type */
							LPMCU_MISC_REGS0->RTYPE_PAD_0.reg |= (1 << gpio_pin);
							/* Set REN */
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
							break;
1000c264:	e020      	b.n	1000c2a8 <gpio_pin_set_config+0x19c>
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000c266:	2300      	movs	r3, #0
						default:
							status = STATUS_ERR_INVALID_ARG;
							break;
					}
				}
			} else if(config->direction == GPIO_PIN_DIR_OUTPUT) {
1000c268:	2a01      	cmp	r2, #1
1000c26a:	d11d      	bne.n	1000c2a8 <gpio_pin_set_config+0x19c>
				if (gpio_pin < 16) {
1000c26c:	280f      	cmp	r0, #15
1000c26e:	d806      	bhi.n	1000c27e <gpio_pin_set_config+0x172>
					GPIO0->OUTENSET.reg = (1 << gpio_pin);
1000c270:	3301      	adds	r3, #1
1000c272:	4083      	lsls	r3, r0
1000c274:	b29b      	uxth	r3, r3
1000c276:	4a10      	ldr	r2, [pc, #64]	; (1000c2b8 <gpio_pin_set_config+0x1ac>)
1000c278:	8213      	strh	r3, [r2, #16]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000c27a:	2300      	movs	r3, #0
1000c27c:	e014      	b.n	1000c2a8 <gpio_pin_set_config+0x19c>
					}
				}
			} else if(config->direction == GPIO_PIN_DIR_OUTPUT) {
				if (gpio_pin < 16) {
					GPIO0->OUTENSET.reg = (1 << gpio_pin);
				} else if (gpio_pin < 32) {
1000c27e:	281f      	cmp	r0, #31
1000c280:	d808      	bhi.n	1000c294 <gpio_pin_set_config+0x188>
					GPIO1->OUTENSET.reg = (1 << (gpio_pin % 16));
1000c282:	230f      	movs	r3, #15
1000c284:	4018      	ands	r0, r3
1000c286:	3b0e      	subs	r3, #14
1000c288:	4083      	lsls	r3, r0
1000c28a:	b29b      	uxth	r3, r3
1000c28c:	4a0b      	ldr	r2, [pc, #44]	; (1000c2bc <gpio_pin_set_config+0x1b0>)
1000c28e:	8213      	strh	r3, [r2, #16]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000c290:	2300      	movs	r3, #0
1000c292:	e009      	b.n	1000c2a8 <gpio_pin_set_config+0x19c>
				if (gpio_pin < 16) {
					GPIO0->OUTENSET.reg = (1 << gpio_pin);
				} else if (gpio_pin < 32) {
					GPIO1->OUTENSET.reg = (1 << (gpio_pin % 16));
				} else {
					GPIO2->OUTENSET.reg = (1 << (gpio_pin % 16));
1000c294:	230f      	movs	r3, #15
1000c296:	4018      	ands	r0, r3
1000c298:	3b0e      	subs	r3, #14
1000c29a:	4083      	lsls	r3, r0
1000c29c:	b29b      	uxth	r3, r3
1000c29e:	4a08      	ldr	r2, [pc, #32]	; (1000c2c0 <gpio_pin_set_config+0x1b4>)
1000c2a0:	8213      	strh	r3, [r2, #16]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000c2a2:	2300      	movs	r3, #0
1000c2a4:	e000      	b.n	1000c2a8 <gpio_pin_set_config+0x19c>
							LPMCU_MISC_REGS0->RTYPE_PAD_0.reg |= (1 << gpio_pin);
							/* Set REN */
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
							break;
						default:
							status = STATUS_ERR_INVALID_ARG;
1000c2a6:	2317      	movs	r3, #23
				}
			}
		}
	}
	return status;
}
1000c2a8:	0018      	movs	r0, r3
1000c2aa:	bd70      	pop	{r4, r5, r6, pc}
1000c2ac:	4000b000 	.word	0x4000b000
1000c2b0:	4000f000 	.word	0x4000f000
1000c2b4:	4000e000 	.word	0x4000e000
1000c2b8:	40010000 	.word	0x40010000
1000c2bc:	40011000 	.word	0x40011000
1000c2c0:	40013000 	.word	0x40013000

1000c2c4 <gpio_pin_get_input_level>:
 */
bool gpio_pin_get_input_level(const uint8_t gpio_pin)
{
	uint32_t regval = 0;

	if (gpio_pin < 16) {
1000c2c4:	280f      	cmp	r0, #15
1000c2c6:	d806      	bhi.n	1000c2d6 <gpio_pin_get_input_level+0x12>
		regval = GPIO0->DATA.reg;
1000c2c8:	4b0f      	ldr	r3, [pc, #60]	; (1000c308 <gpio_pin_get_input_level+0x44>)
1000c2ca:	8819      	ldrh	r1, [r3, #0]
		regval &= (1 << gpio_pin);
1000c2cc:	2301      	movs	r3, #1
1000c2ce:	4083      	lsls	r3, r0
1000c2d0:	0018      	movs	r0, r3
1000c2d2:	4008      	ands	r0, r1
1000c2d4:	e014      	b.n	1000c300 <gpio_pin_get_input_level+0x3c>
	} else if (gpio_pin < 32) {
1000c2d6:	281f      	cmp	r0, #31
1000c2d8:	d809      	bhi.n	1000c2ee <gpio_pin_get_input_level+0x2a>
		regval = GPIO1->DATA.reg;
1000c2da:	4b0c      	ldr	r3, [pc, #48]	; (1000c30c <gpio_pin_get_input_level+0x48>)
1000c2dc:	8819      	ldrh	r1, [r3, #0]
		regval &= (1 << (gpio_pin % 16));
1000c2de:	230f      	movs	r3, #15
1000c2e0:	4003      	ands	r3, r0
1000c2e2:	001a      	movs	r2, r3
1000c2e4:	2301      	movs	r3, #1
1000c2e6:	4093      	lsls	r3, r2
1000c2e8:	0018      	movs	r0, r3
1000c2ea:	4008      	ands	r0, r1
1000c2ec:	e008      	b.n	1000c300 <gpio_pin_get_input_level+0x3c>
	} else {
		regval = GPIO2->DATA.reg;
1000c2ee:	4b08      	ldr	r3, [pc, #32]	; (1000c310 <gpio_pin_get_input_level+0x4c>)
1000c2f0:	8819      	ldrh	r1, [r3, #0]
		regval &= (1 << (gpio_pin % 16));
1000c2f2:	230f      	movs	r3, #15
1000c2f4:	4003      	ands	r3, r0
1000c2f6:	001a      	movs	r2, r3
1000c2f8:	2301      	movs	r3, #1
1000c2fa:	4093      	lsls	r3, r2
1000c2fc:	0018      	movs	r0, r3
1000c2fe:	4008      	ands	r0, r1
	}

	return regval;
1000c300:	1e43      	subs	r3, r0, #1
1000c302:	4198      	sbcs	r0, r3
1000c304:	b2c0      	uxtb	r0, r0
}
1000c306:	4770      	bx	lr
1000c308:	40010000 	.word	0x40010000
1000c30c:	40011000 	.word	0x40011000
1000c310:	40013000 	.word	0x40013000

1000c314 <gpio_pin_get_output_level>:
 */
bool gpio_pin_get_output_level(const uint8_t gpio_pin)
{
	uint32_t regval = 0;

	if (gpio_pin < 16) {
1000c314:	280f      	cmp	r0, #15
1000c316:	d806      	bhi.n	1000c326 <gpio_pin_get_output_level+0x12>
		regval = GPIO0->DATAOUT.reg;
1000c318:	4b0f      	ldr	r3, [pc, #60]	; (1000c358 <gpio_pin_get_output_level+0x44>)
1000c31a:	8899      	ldrh	r1, [r3, #4]
		regval &= (1 << gpio_pin);
1000c31c:	2301      	movs	r3, #1
1000c31e:	4083      	lsls	r3, r0
1000c320:	0018      	movs	r0, r3
1000c322:	4008      	ands	r0, r1
1000c324:	e014      	b.n	1000c350 <gpio_pin_get_output_level+0x3c>
	} else if (gpio_pin < 32) {
1000c326:	281f      	cmp	r0, #31
1000c328:	d809      	bhi.n	1000c33e <gpio_pin_get_output_level+0x2a>
		regval = GPIO1->DATAOUT.reg;
1000c32a:	4b0c      	ldr	r3, [pc, #48]	; (1000c35c <gpio_pin_get_output_level+0x48>)
1000c32c:	8899      	ldrh	r1, [r3, #4]
		regval &= (1 << (gpio_pin % 16));
1000c32e:	230f      	movs	r3, #15
1000c330:	4003      	ands	r3, r0
1000c332:	001a      	movs	r2, r3
1000c334:	2301      	movs	r3, #1
1000c336:	4093      	lsls	r3, r2
1000c338:	0018      	movs	r0, r3
1000c33a:	4008      	ands	r0, r1
1000c33c:	e008      	b.n	1000c350 <gpio_pin_get_output_level+0x3c>
	} else {
		regval = GPIO2->DATAOUT.reg;
1000c33e:	4b08      	ldr	r3, [pc, #32]	; (1000c360 <gpio_pin_get_output_level+0x4c>)
1000c340:	8899      	ldrh	r1, [r3, #4]
		regval &= (1 << (gpio_pin % 16));
1000c342:	230f      	movs	r3, #15
1000c344:	4003      	ands	r3, r0
1000c346:	001a      	movs	r2, r3
1000c348:	2301      	movs	r3, #1
1000c34a:	4093      	lsls	r3, r2
1000c34c:	0018      	movs	r0, r3
1000c34e:	4008      	ands	r0, r1
	}

	return regval;
1000c350:	1e43      	subs	r3, r0, #1
1000c352:	4198      	sbcs	r0, r3
1000c354:	b2c0      	uxtb	r0, r0
}
1000c356:	4770      	bx	lr
1000c358:	40010000 	.word	0x40010000
1000c35c:	40011000 	.word	0x40011000
1000c360:	40013000 	.word	0x40013000

1000c364 <gpio_pin_set_output_level>:
 *
 *  \param[in] gpio_pin  Index of the GPIO pin to write to.
 *  \param[in] level     Logical level to set the given pin to.
 */
void gpio_pin_set_output_level(const uint8_t gpio_pin, const bool level)
{
1000c364:	b510      	push	{r4, lr}
	if (gpio_pin < 16) {
1000c366:	280f      	cmp	r0, #15
1000c368:	d810      	bhi.n	1000c38c <gpio_pin_set_output_level+0x28>
		if(level) {
1000c36a:	2900      	cmp	r1, #0
1000c36c:	d007      	beq.n	1000c37e <gpio_pin_set_output_level+0x1a>
			GPIO0->DATAOUT.reg |= (1 << gpio_pin);
1000c36e:	4a1d      	ldr	r2, [pc, #116]	; (1000c3e4 <gpio_pin_set_output_level+0x80>)
1000c370:	8891      	ldrh	r1, [r2, #4]
1000c372:	2301      	movs	r3, #1
1000c374:	4083      	lsls	r3, r0
1000c376:	430b      	orrs	r3, r1
1000c378:	b29b      	uxth	r3, r3
1000c37a:	8093      	strh	r3, [r2, #4]
1000c37c:	e031      	b.n	1000c3e2 <gpio_pin_set_output_level+0x7e>
		} else {
			GPIO0->DATAOUT.reg &= ~(1 << gpio_pin);
1000c37e:	4919      	ldr	r1, [pc, #100]	; (1000c3e4 <gpio_pin_set_output_level+0x80>)
1000c380:	888b      	ldrh	r3, [r1, #4]
1000c382:	2201      	movs	r2, #1
1000c384:	4082      	lsls	r2, r0
1000c386:	4393      	bics	r3, r2
1000c388:	808b      	strh	r3, [r1, #4]
1000c38a:	e02a      	b.n	1000c3e2 <gpio_pin_set_output_level+0x7e>
		}
	} else if (gpio_pin < 32) {
1000c38c:	281f      	cmp	r0, #31
1000c38e:	d814      	bhi.n	1000c3ba <gpio_pin_set_output_level+0x56>
		if(level) {
1000c390:	2900      	cmp	r1, #0
1000c392:	d009      	beq.n	1000c3a8 <gpio_pin_set_output_level+0x44>
			GPIO1->DATAOUT.reg |= (1 << (gpio_pin % 16));
1000c394:	4914      	ldr	r1, [pc, #80]	; (1000c3e8 <gpio_pin_set_output_level+0x84>)
1000c396:	888c      	ldrh	r4, [r1, #4]
1000c398:	220f      	movs	r2, #15
1000c39a:	4010      	ands	r0, r2
1000c39c:	2301      	movs	r3, #1
1000c39e:	4083      	lsls	r3, r0
1000c3a0:	4323      	orrs	r3, r4
1000c3a2:	b29b      	uxth	r3, r3
1000c3a4:	808b      	strh	r3, [r1, #4]
1000c3a6:	e01c      	b.n	1000c3e2 <gpio_pin_set_output_level+0x7e>
		} else {
			GPIO1->DATAOUT.reg &= ~(1 << (gpio_pin % 16));
1000c3a8:	490f      	ldr	r1, [pc, #60]	; (1000c3e8 <gpio_pin_set_output_level+0x84>)
1000c3aa:	888b      	ldrh	r3, [r1, #4]
1000c3ac:	220f      	movs	r2, #15
1000c3ae:	4010      	ands	r0, r2
1000c3b0:	3a0e      	subs	r2, #14
1000c3b2:	4082      	lsls	r2, r0
1000c3b4:	4393      	bics	r3, r2
1000c3b6:	808b      	strh	r3, [r1, #4]
1000c3b8:	e013      	b.n	1000c3e2 <gpio_pin_set_output_level+0x7e>
		}
	} else {
		if(level) {
1000c3ba:	2900      	cmp	r1, #0
1000c3bc:	d009      	beq.n	1000c3d2 <gpio_pin_set_output_level+0x6e>
			GPIO2->DATAOUT.reg |= (1 << (gpio_pin % 16));
1000c3be:	490b      	ldr	r1, [pc, #44]	; (1000c3ec <gpio_pin_set_output_level+0x88>)
1000c3c0:	888c      	ldrh	r4, [r1, #4]
1000c3c2:	220f      	movs	r2, #15
1000c3c4:	4010      	ands	r0, r2
1000c3c6:	2301      	movs	r3, #1
1000c3c8:	4083      	lsls	r3, r0
1000c3ca:	4323      	orrs	r3, r4
1000c3cc:	b29b      	uxth	r3, r3
1000c3ce:	808b      	strh	r3, [r1, #4]
1000c3d0:	e007      	b.n	1000c3e2 <gpio_pin_set_output_level+0x7e>
		} else {
			GPIO2->DATAOUT.reg &= ~(1 << (gpio_pin % 16));
1000c3d2:	4906      	ldr	r1, [pc, #24]	; (1000c3ec <gpio_pin_set_output_level+0x88>)
1000c3d4:	888b      	ldrh	r3, [r1, #4]
1000c3d6:	220f      	movs	r2, #15
1000c3d8:	4010      	ands	r0, r2
1000c3da:	3a0e      	subs	r2, #14
1000c3dc:	4082      	lsls	r2, r0
1000c3de:	4393      	bics	r3, r2
1000c3e0:	808b      	strh	r3, [r1, #4]
		}
	}
}
1000c3e2:	bd10      	pop	{r4, pc}
1000c3e4:	40010000 	.word	0x40010000
1000c3e8:	40011000 	.word	0x40011000
1000c3ec:	40013000 	.word	0x40013000

1000c3f0 <gpio_pinmux_cofiguration>:
 *
 *  \param[in] gpio_pin   Index of the GPIO pin to toggle.
 *  \param[in] pinmux_sel PINMUX selection.
 */
void gpio_pinmux_cofiguration(const uint8_t gpio_pin, uint16_t pinmux_sel)
{
1000c3f0:	b570      	push	{r4, r5, r6, lr}
	uint8_t megamux_sel = (pinmux_sel >> 8) & 0xFF;
1000c3f2:	0a0d      	lsrs	r5, r1, #8

	pinmux_sel &= 0xFF;
1000c3f4:	23ff      	movs	r3, #255	; 0xff
1000c3f6:	4019      	ands	r1, r3

	if (gpio_pin <= 7) {
1000c3f8:	2807      	cmp	r0, #7
1000c3fa:	d833      	bhi.n	1000c464 <gpio_pinmux_cofiguration+0x74>
		LPMCU_MISC_REGS0->PINMUX_SEL_0.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000c3fc:	4a4e      	ldr	r2, [pc, #312]	; (1000c538 <gpio_pinmux_cofiguration+0x148>)
1000c3fe:	6c54      	ldr	r4, [r2, #68]	; 0x44
1000c400:	3bf8      	subs	r3, #248	; 0xf8
1000c402:	4003      	ands	r3, r0
1000c404:	009b      	lsls	r3, r3, #2
1000c406:	2607      	movs	r6, #7
1000c408:	409e      	lsls	r6, r3
1000c40a:	43b4      	bics	r4, r6
1000c40c:	6454      	str	r4, [r2, #68]	; 0x44
		LPMCU_MISC_REGS0->PINMUX_SEL_0.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
1000c40e:	6c54      	ldr	r4, [r2, #68]	; 0x44
1000c410:	000e      	movs	r6, r1
1000c412:	409e      	lsls	r6, r3
1000c414:	0033      	movs	r3, r6
1000c416:	4323      	orrs	r3, r4
1000c418:	6453      	str	r3, [r2, #68]	; 0x44
		if (pinmux_sel == 0x01) {
1000c41a:	2901      	cmp	r1, #1
1000c41c:	d000      	beq.n	1000c420 <gpio_pinmux_cofiguration+0x30>
1000c41e:	e08a      	b.n	1000c536 <gpio_pinmux_cofiguration+0x146>
			if (gpio_pin <= 3) {
1000c420:	2803      	cmp	r0, #3
1000c422:	d80f      	bhi.n	1000c444 <gpio_pinmux_cofiguration+0x54>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_0.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000c424:	0011      	movs	r1, r2
1000c426:	22d0      	movs	r2, #208	; 0xd0
1000c428:	0052      	lsls	r2, r2, #1
1000c42a:	588c      	ldr	r4, [r1, r2]
1000c42c:	2303      	movs	r3, #3
1000c42e:	4018      	ands	r0, r3
1000c430:	00c0      	lsls	r0, r0, #3
1000c432:	333c      	adds	r3, #60	; 0x3c
1000c434:	4083      	lsls	r3, r0
1000c436:	439c      	bics	r4, r3
1000c438:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_0.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000c43a:	588b      	ldr	r3, [r1, r2]
1000c43c:	4085      	lsls	r5, r0
1000c43e:	431d      	orrs	r5, r3
1000c440:	508d      	str	r5, [r1, r2]
1000c442:	e078      	b.n	1000c536 <gpio_pinmux_cofiguration+0x146>
			} else if (gpio_pin <= 7) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_1.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000c444:	493c      	ldr	r1, [pc, #240]	; (1000c538 <gpio_pinmux_cofiguration+0x148>)
1000c446:	22d2      	movs	r2, #210	; 0xd2
1000c448:	0052      	lsls	r2, r2, #1
1000c44a:	588c      	ldr	r4, [r1, r2]
1000c44c:	2303      	movs	r3, #3
1000c44e:	4018      	ands	r0, r3
1000c450:	00c0      	lsls	r0, r0, #3
1000c452:	333c      	adds	r3, #60	; 0x3c
1000c454:	4083      	lsls	r3, r0
1000c456:	439c      	bics	r4, r3
1000c458:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_1.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000c45a:	588b      	ldr	r3, [r1, r2]
1000c45c:	4085      	lsls	r5, r0
1000c45e:	431d      	orrs	r5, r3
1000c460:	508d      	str	r5, [r1, r2]
1000c462:	e068      	b.n	1000c536 <gpio_pinmux_cofiguration+0x146>
			}
		}
	} else if (gpio_pin <= 15) {
1000c464:	280f      	cmp	r0, #15
1000c466:	d832      	bhi.n	1000c4ce <gpio_pinmux_cofiguration+0xde>
		LPMCU_MISC_REGS0->PINMUX_SEL_1.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000c468:	4a33      	ldr	r2, [pc, #204]	; (1000c538 <gpio_pinmux_cofiguration+0x148>)
1000c46a:	6c94      	ldr	r4, [r2, #72]	; 0x48
1000c46c:	2307      	movs	r3, #7
1000c46e:	4003      	ands	r3, r0
1000c470:	009b      	lsls	r3, r3, #2
1000c472:	2607      	movs	r6, #7
1000c474:	409e      	lsls	r6, r3
1000c476:	43b4      	bics	r4, r6
1000c478:	6494      	str	r4, [r2, #72]	; 0x48
		LPMCU_MISC_REGS0->PINMUX_SEL_1.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
1000c47a:	6c94      	ldr	r4, [r2, #72]	; 0x48
1000c47c:	000e      	movs	r6, r1
1000c47e:	409e      	lsls	r6, r3
1000c480:	0033      	movs	r3, r6
1000c482:	4323      	orrs	r3, r4
1000c484:	6493      	str	r3, [r2, #72]	; 0x48
		if (pinmux_sel == 0x01) {
1000c486:	2901      	cmp	r1, #1
1000c488:	d155      	bne.n	1000c536 <gpio_pinmux_cofiguration+0x146>
			if (gpio_pin <= 11) {
1000c48a:	280b      	cmp	r0, #11
1000c48c:	d80f      	bhi.n	1000c4ae <gpio_pinmux_cofiguration+0xbe>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_2.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000c48e:	0011      	movs	r1, r2
1000c490:	22d4      	movs	r2, #212	; 0xd4
1000c492:	0052      	lsls	r2, r2, #1
1000c494:	588c      	ldr	r4, [r1, r2]
1000c496:	2303      	movs	r3, #3
1000c498:	4018      	ands	r0, r3
1000c49a:	00c0      	lsls	r0, r0, #3
1000c49c:	333c      	adds	r3, #60	; 0x3c
1000c49e:	4083      	lsls	r3, r0
1000c4a0:	439c      	bics	r4, r3
1000c4a2:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_2.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000c4a4:	588b      	ldr	r3, [r1, r2]
1000c4a6:	4085      	lsls	r5, r0
1000c4a8:	431d      	orrs	r5, r3
1000c4aa:	508d      	str	r5, [r1, r2]
1000c4ac:	e043      	b.n	1000c536 <gpio_pinmux_cofiguration+0x146>
			} else if (gpio_pin <= 15) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_3.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000c4ae:	4922      	ldr	r1, [pc, #136]	; (1000c538 <gpio_pinmux_cofiguration+0x148>)
1000c4b0:	22d6      	movs	r2, #214	; 0xd6
1000c4b2:	0052      	lsls	r2, r2, #1
1000c4b4:	588c      	ldr	r4, [r1, r2]
1000c4b6:	2303      	movs	r3, #3
1000c4b8:	4018      	ands	r0, r3
1000c4ba:	00c0      	lsls	r0, r0, #3
1000c4bc:	333c      	adds	r3, #60	; 0x3c
1000c4be:	4083      	lsls	r3, r0
1000c4c0:	439c      	bics	r4, r3
1000c4c2:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_3.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000c4c4:	588b      	ldr	r3, [r1, r2]
1000c4c6:	4085      	lsls	r5, r0
1000c4c8:	431d      	orrs	r5, r3
1000c4ca:	508d      	str	r5, [r1, r2]
1000c4cc:	e033      	b.n	1000c536 <gpio_pinmux_cofiguration+0x146>
			}
		}
	} else if (gpio_pin <= 23) {
1000c4ce:	2817      	cmp	r0, #23
1000c4d0:	d831      	bhi.n	1000c536 <gpio_pinmux_cofiguration+0x146>
		LPMCU_MISC_REGS0->PINMUX_SEL_2.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000c4d2:	4a19      	ldr	r2, [pc, #100]	; (1000c538 <gpio_pinmux_cofiguration+0x148>)
1000c4d4:	6cd4      	ldr	r4, [r2, #76]	; 0x4c
1000c4d6:	2307      	movs	r3, #7
1000c4d8:	4003      	ands	r3, r0
1000c4da:	009b      	lsls	r3, r3, #2
1000c4dc:	2607      	movs	r6, #7
1000c4de:	409e      	lsls	r6, r3
1000c4e0:	43b4      	bics	r4, r6
1000c4e2:	64d4      	str	r4, [r2, #76]	; 0x4c
		LPMCU_MISC_REGS0->PINMUX_SEL_2.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
1000c4e4:	6cd4      	ldr	r4, [r2, #76]	; 0x4c
1000c4e6:	000e      	movs	r6, r1
1000c4e8:	409e      	lsls	r6, r3
1000c4ea:	0033      	movs	r3, r6
1000c4ec:	4323      	orrs	r3, r4
1000c4ee:	64d3      	str	r3, [r2, #76]	; 0x4c
		if (pinmux_sel == 0x01) {
1000c4f0:	2901      	cmp	r1, #1
1000c4f2:	d120      	bne.n	1000c536 <gpio_pinmux_cofiguration+0x146>
			if (gpio_pin <= 19) {
1000c4f4:	2813      	cmp	r0, #19
1000c4f6:	d80f      	bhi.n	1000c518 <gpio_pinmux_cofiguration+0x128>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_4.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000c4f8:	0011      	movs	r1, r2
1000c4fa:	22d8      	movs	r2, #216	; 0xd8
1000c4fc:	0052      	lsls	r2, r2, #1
1000c4fe:	588c      	ldr	r4, [r1, r2]
1000c500:	2303      	movs	r3, #3
1000c502:	4018      	ands	r0, r3
1000c504:	00c0      	lsls	r0, r0, #3
1000c506:	333c      	adds	r3, #60	; 0x3c
1000c508:	4083      	lsls	r3, r0
1000c50a:	439c      	bics	r4, r3
1000c50c:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_4.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000c50e:	588b      	ldr	r3, [r1, r2]
1000c510:	4085      	lsls	r5, r0
1000c512:	431d      	orrs	r5, r3
1000c514:	508d      	str	r5, [r1, r2]
1000c516:	e00e      	b.n	1000c536 <gpio_pinmux_cofiguration+0x146>
			} else if (gpio_pin <= 23) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_5.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000c518:	4a07      	ldr	r2, [pc, #28]	; (1000c538 <gpio_pinmux_cofiguration+0x148>)
1000c51a:	23da      	movs	r3, #218	; 0xda
1000c51c:	005b      	lsls	r3, r3, #1
1000c51e:	58d1      	ldr	r1, [r2, r3]
1000c520:	2403      	movs	r4, #3
1000c522:	4020      	ands	r0, r4
1000c524:	00c0      	lsls	r0, r0, #3
1000c526:	343c      	adds	r4, #60	; 0x3c
1000c528:	4084      	lsls	r4, r0
1000c52a:	43a1      	bics	r1, r4
1000c52c:	50d1      	str	r1, [r2, r3]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_5.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000c52e:	58d1      	ldr	r1, [r2, r3]
1000c530:	4085      	lsls	r5, r0
1000c532:	430d      	orrs	r5, r1
1000c534:	50d5      	str	r5, [r2, r3]
			}
		}
	}
}
1000c536:	bd70      	pop	{r4, r5, r6, pc}
1000c538:	4000b000 	.word	0x4000b000

1000c53c <gpio_register_callback>:
 * \param[in]  callback_type  Callback type given by an enum
 *
 */
void gpio_register_callback(uint8_t gpio_pin, gpio_callback_t callback_func,
				enum gpio_callback callback_type)
{
1000c53c:	b5f0      	push	{r4, r5, r6, r7, lr}
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
		gpio_port = 0;
1000c53e:	2300      	movs	r3, #0
	Assert(callback_func);
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
1000c540:	280f      	cmp	r0, #15
1000c542:	d904      	bls.n	1000c54e <gpio_register_callback+0x12>
		gpio_port = 0;
	} else if (gpio_pin < 32) {
		gpio_port = 1;
	} else {
		gpio_port = 2;
1000c544:	241f      	movs	r4, #31
1000c546:	4284      	cmp	r4, r0
1000c548:	415b      	adcs	r3, r3
1000c54a:	3c1d      	subs	r4, #29
1000c54c:	1ae3      	subs	r3, r4, r3
	}
	switch (callback_type) {
1000c54e:	2a01      	cmp	r2, #1
1000c550:	d016      	beq.n	1000c580 <gpio_register_callback+0x44>
1000c552:	2a00      	cmp	r2, #0
1000c554:	d004      	beq.n	1000c560 <gpio_register_callback+0x24>
1000c556:	2a02      	cmp	r2, #2
1000c558:	d022      	beq.n	1000c5a0 <gpio_register_callback+0x64>
1000c55a:	2a03      	cmp	r2, #3
1000c55c:	d030      	beq.n	1000c5c0 <gpio_register_callback+0x84>
1000c55e:	e03e      	b.n	1000c5de <gpio_register_callback+0xa2>
	case GPIO_CALLBACK_LOW:
		_gpio_instances[gpio_port].hw->INTTYPECLR.reg = 1 << (gpio_pin % 16);
1000c560:	4e29      	ldr	r6, [pc, #164]	; (1000c608 <gpio_register_callback+0xcc>)
1000c562:	00dc      	lsls	r4, r3, #3
1000c564:	18e2      	adds	r2, r4, r3
1000c566:	00d2      	lsls	r2, r2, #3
1000c568:	5997      	ldr	r7, [r2, r6]
1000c56a:	250f      	movs	r5, #15
1000c56c:	4005      	ands	r5, r0
1000c56e:	2201      	movs	r2, #1
1000c570:	40aa      	lsls	r2, r5
1000c572:	b292      	uxth	r2, r2
1000c574:	85ba      	strh	r2, [r7, #44]	; 0x2c
		_gpio_instances[gpio_port].hw->INTPOLCLR.reg = 1 << (gpio_pin % 16);
1000c576:	18e4      	adds	r4, r4, r3
1000c578:	00e4      	lsls	r4, r4, #3
1000c57a:	59a4      	ldr	r4, [r4, r6]
1000c57c:	86a2      	strh	r2, [r4, #52]	; 0x34
		break;
1000c57e:	e02e      	b.n	1000c5de <gpio_register_callback+0xa2>

	case GPIO_CALLBACK_HIGH:
		_gpio_instances[gpio_port].hw->INTTYPECLR.reg = 1 << (gpio_pin % 16);
1000c580:	4e21      	ldr	r6, [pc, #132]	; (1000c608 <gpio_register_callback+0xcc>)
1000c582:	00dc      	lsls	r4, r3, #3
1000c584:	18e2      	adds	r2, r4, r3
1000c586:	00d2      	lsls	r2, r2, #3
1000c588:	5997      	ldr	r7, [r2, r6]
1000c58a:	250f      	movs	r5, #15
1000c58c:	4005      	ands	r5, r0
1000c58e:	2201      	movs	r2, #1
1000c590:	40aa      	lsls	r2, r5
1000c592:	b292      	uxth	r2, r2
1000c594:	85ba      	strh	r2, [r7, #44]	; 0x2c
		_gpio_instances[gpio_port].hw->INTPOLSET.reg = 1 << (gpio_pin % 16);
1000c596:	18e4      	adds	r4, r4, r3
1000c598:	00e4      	lsls	r4, r4, #3
1000c59a:	59a4      	ldr	r4, [r4, r6]
1000c59c:	8622      	strh	r2, [r4, #48]	; 0x30
		break;
1000c59e:	e01e      	b.n	1000c5de <gpio_register_callback+0xa2>

	case GPIO_CALLBACK_RISING:
		_gpio_instances[gpio_port].hw->INTTYPESET.reg = 1 << (gpio_pin % 16);
1000c5a0:	4e19      	ldr	r6, [pc, #100]	; (1000c608 <gpio_register_callback+0xcc>)
1000c5a2:	00dc      	lsls	r4, r3, #3
1000c5a4:	18e2      	adds	r2, r4, r3
1000c5a6:	00d2      	lsls	r2, r2, #3
1000c5a8:	5997      	ldr	r7, [r2, r6]
1000c5aa:	250f      	movs	r5, #15
1000c5ac:	4005      	ands	r5, r0
1000c5ae:	2201      	movs	r2, #1
1000c5b0:	40aa      	lsls	r2, r5
1000c5b2:	b292      	uxth	r2, r2
1000c5b4:	853a      	strh	r2, [r7, #40]	; 0x28
		_gpio_instances[gpio_port].hw->INTPOLSET.reg = 1 << (gpio_pin % 16);
1000c5b6:	18e4      	adds	r4, r4, r3
1000c5b8:	00e4      	lsls	r4, r4, #3
1000c5ba:	59a4      	ldr	r4, [r4, r6]
1000c5bc:	8622      	strh	r2, [r4, #48]	; 0x30
		break;
1000c5be:	e00e      	b.n	1000c5de <gpio_register_callback+0xa2>

	case GPIO_CALLBACK_FALLING:
		_gpio_instances[gpio_port].hw->INTTYPESET.reg = 1 << (gpio_pin % 16);
1000c5c0:	4e11      	ldr	r6, [pc, #68]	; (1000c608 <gpio_register_callback+0xcc>)
1000c5c2:	00dc      	lsls	r4, r3, #3
1000c5c4:	18e2      	adds	r2, r4, r3
1000c5c6:	00d2      	lsls	r2, r2, #3
1000c5c8:	5997      	ldr	r7, [r2, r6]
1000c5ca:	250f      	movs	r5, #15
1000c5cc:	4005      	ands	r5, r0
1000c5ce:	2201      	movs	r2, #1
1000c5d0:	40aa      	lsls	r2, r5
1000c5d2:	b292      	uxth	r2, r2
1000c5d4:	853a      	strh	r2, [r7, #40]	; 0x28
		_gpio_instances[gpio_port].hw->INTPOLCLR.reg = (1 << (gpio_pin % 16));
1000c5d6:	18e4      	adds	r4, r4, r3
1000c5d8:	00e4      	lsls	r4, r4, #3
1000c5da:	59a4      	ldr	r4, [r4, r6]
1000c5dc:	86a2      	strh	r2, [r4, #52]	; 0x34

	case GPIO_CALLBACK_N:
		break;
	}
	/* Register callback function */
	_gpio_instances[gpio_port].callback[gpio_pin % 16] = callback_func;
1000c5de:	220f      	movs	r2, #15
1000c5e0:	4010      	ands	r0, r2
1000c5e2:	4c09      	ldr	r4, [pc, #36]	; (1000c608 <gpio_register_callback+0xcc>)
1000c5e4:	00dd      	lsls	r5, r3, #3
1000c5e6:	18ea      	adds	r2, r5, r3
1000c5e8:	0052      	lsls	r2, r2, #1
1000c5ea:	1812      	adds	r2, r2, r0
1000c5ec:	0092      	lsls	r2, r2, #2
1000c5ee:	18a2      	adds	r2, r4, r2
1000c5f0:	6051      	str	r1, [r2, #4]
	/* Set the bit corresponding to the gpio pin */
	_gpio_instances[gpio_port].callback_reg_mask |= (1 << (gpio_pin % 16));
1000c5f2:	18ea      	adds	r2, r5, r3
1000c5f4:	00d2      	lsls	r2, r2, #3
1000c5f6:	18a2      	adds	r2, r4, r2
1000c5f8:	3244      	adds	r2, #68	; 0x44
1000c5fa:	2101      	movs	r1, #1
1000c5fc:	4081      	lsls	r1, r0
1000c5fe:	8813      	ldrh	r3, [r2, #0]
1000c600:	430b      	orrs	r3, r1
1000c602:	8013      	strh	r3, [r2, #0]
}
1000c604:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000c606:	46c0      	nop			; (mov r8, r8)
1000c608:	1001a13c 	.word	0x1001a13c

1000c60c <gpio_enable_callback>:
 * conditions for the callback type are met.
 *
 * \param[in]  gpio_pin   GPIO pin
 */
void gpio_enable_callback(uint8_t gpio_pin)
{
1000c60c:	b530      	push	{r4, r5, lr}
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
1000c60e:	280f      	cmp	r0, #15
1000c610:	d805      	bhi.n	1000c61e <gpio_enable_callback+0x12>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000c612:	2280      	movs	r2, #128	; 0x80
1000c614:	0412      	lsls	r2, r2, #16
1000c616:	4b12      	ldr	r3, [pc, #72]	; (1000c660 <gpio_enable_callback+0x54>)
1000c618:	601a      	str	r2, [r3, #0]
		gpio_port = 0;
1000c61a:	2200      	movs	r2, #0
1000c61c:	e00c      	b.n	1000c638 <gpio_enable_callback+0x2c>
		NVIC_EnableIRQ(GPIO0_IRQn);
	} else if (gpio_pin < 32) {
1000c61e:	281f      	cmp	r0, #31
1000c620:	d805      	bhi.n	1000c62e <gpio_enable_callback+0x22>
1000c622:	2280      	movs	r2, #128	; 0x80
1000c624:	0452      	lsls	r2, r2, #17
1000c626:	4b0e      	ldr	r3, [pc, #56]	; (1000c660 <gpio_enable_callback+0x54>)
1000c628:	601a      	str	r2, [r3, #0]
		gpio_port = 1;
1000c62a:	2201      	movs	r2, #1
1000c62c:	e004      	b.n	1000c638 <gpio_enable_callback+0x2c>
1000c62e:	2280      	movs	r2, #128	; 0x80
1000c630:	0492      	lsls	r2, r2, #18
1000c632:	4b0b      	ldr	r3, [pc, #44]	; (1000c660 <gpio_enable_callback+0x54>)
1000c634:	601a      	str	r2, [r3, #0]
		NVIC_EnableIRQ(GPIO1_IRQn);
	} else {
		gpio_port = 2;
1000c636:	2202      	movs	r2, #2
		NVIC_EnableIRQ(GPIO2_IRQn);
	}

	/* Enable callback */
	_gpio_instances[gpio_port].callback_enable_mask |= (1 << (gpio_pin % 16));
1000c638:	230f      	movs	r3, #15
1000c63a:	4018      	ands	r0, r3
1000c63c:	2101      	movs	r1, #1
1000c63e:	4081      	lsls	r1, r0
1000c640:	4c08      	ldr	r4, [pc, #32]	; (1000c664 <gpio_enable_callback+0x58>)
1000c642:	00d5      	lsls	r5, r2, #3
1000c644:	18ab      	adds	r3, r5, r2
1000c646:	00db      	lsls	r3, r3, #3
1000c648:	18e3      	adds	r3, r4, r3
1000c64a:	3346      	adds	r3, #70	; 0x46
1000c64c:	8818      	ldrh	r0, [r3, #0]
1000c64e:	4308      	orrs	r0, r1
1000c650:	8018      	strh	r0, [r3, #0]
	_gpio_instances[gpio_port].hw->INTENSET.reg = (1 << (gpio_pin % 16));
1000c652:	18aa      	adds	r2, r5, r2
1000c654:	00d2      	lsls	r2, r2, #3
1000c656:	5913      	ldr	r3, [r2, r4]
1000c658:	b289      	uxth	r1, r1
1000c65a:	8419      	strh	r1, [r3, #32]
}
1000c65c:	bd30      	pop	{r4, r5, pc}
1000c65e:	46c0      	nop			; (mov r8, r8)
1000c660:	e000e100 	.word	0xe000e100
1000c664:	1001a13c 	.word	0x1001a13c

1000c668 <gpio_disable_callback>:
 * The callback function will not be called from the interrupt handler.
 *
 * \param[in]  gpio_pin   GPIO pin
 */
void gpio_disable_callback(uint8_t gpio_pin)
{
1000c668:	b530      	push	{r4, r5, lr}
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
		gpio_port = 0;
1000c66a:	2300      	movs	r3, #0
{
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
1000c66c:	280f      	cmp	r0, #15
1000c66e:	d904      	bls.n	1000c67a <gpio_disable_callback+0x12>
		gpio_port = 0;
	} else if (gpio_pin < 32) {
		gpio_port = 1;
	} else {
		gpio_port = 2;
1000c670:	221f      	movs	r2, #31
1000c672:	4282      	cmp	r2, r0
1000c674:	415b      	adcs	r3, r3
1000c676:	3a1d      	subs	r2, #29
1000c678:	1ad3      	subs	r3, r2, r3
	}

	/* Enable callback */
	_gpio_instances[gpio_port].callback_enable_mask &= ~(1 << (gpio_pin % 16));
1000c67a:	220f      	movs	r2, #15
1000c67c:	4010      	ands	r0, r2
1000c67e:	2101      	movs	r1, #1
1000c680:	4081      	lsls	r1, r0
1000c682:	4c07      	ldr	r4, [pc, #28]	; (1000c6a0 <gpio_disable_callback+0x38>)
1000c684:	00dd      	lsls	r5, r3, #3
1000c686:	18ea      	adds	r2, r5, r3
1000c688:	00d2      	lsls	r2, r2, #3
1000c68a:	18a2      	adds	r2, r4, r2
1000c68c:	3246      	adds	r2, #70	; 0x46
1000c68e:	8810      	ldrh	r0, [r2, #0]
1000c690:	4388      	bics	r0, r1
1000c692:	8010      	strh	r0, [r2, #0]
	_gpio_instances[gpio_port].hw->INTENCLR.reg = (1 << (gpio_pin % 16));
1000c694:	18eb      	adds	r3, r5, r3
1000c696:	00db      	lsls	r3, r3, #3
1000c698:	591b      	ldr	r3, [r3, r4]
1000c69a:	b289      	uxth	r1, r1
1000c69c:	8499      	strh	r1, [r3, #36]	; 0x24
}
1000c69e:	bd30      	pop	{r4, r5, pc}
1000c6a0:	1001a13c 	.word	0x1001a13c

1000c6a4 <gpio_init>:
 *
 * This function will init GPIO callback.
 *
 */
void gpio_init(void)
{
1000c6a4:	b510      	push	{r4, lr}
1000c6a6:	4a11      	ldr	r2, [pc, #68]	; (1000c6ec <gpio_init+0x48>)
1000c6a8:	0010      	movs	r0, r2
1000c6aa:	30d8      	adds	r0, #216	; 0xd8
	uint8_t i, j;

	for(i = 0; i < 3; i++) {
		for(j = 0; j < 16; j++) {
			_gpio_instances[i].callback[j] = NULL;
1000c6ac:	2100      	movs	r1, #0
1000c6ae:	e007      	b.n	1000c6c0 <gpio_init+0x1c>
1000c6b0:	c302      	stmia	r3!, {r1}
void gpio_init(void)
{
	uint8_t i, j;

	for(i = 0; i < 3; i++) {
		for(j = 0; j < 16; j++) {
1000c6b2:	4293      	cmp	r3, r2
1000c6b4:	d1fc      	bne.n	1000c6b0 <gpio_init+0xc>
			_gpio_instances[i].callback[j] = NULL;
		}
		_gpio_instances[i].callback_enable_mask = 0;
1000c6b6:	8051      	strh	r1, [r2, #2]
		_gpio_instances[i].callback_reg_mask = 0;
1000c6b8:	8011      	strh	r1, [r2, #0]
1000c6ba:	3248      	adds	r2, #72	; 0x48
 */
void gpio_init(void)
{
	uint8_t i, j;

	for(i = 0; i < 3; i++) {
1000c6bc:	4282      	cmp	r2, r0
1000c6be:	d002      	beq.n	1000c6c6 <gpio_init+0x22>
1000c6c0:	0013      	movs	r3, r2
1000c6c2:	3b40      	subs	r3, #64	; 0x40
1000c6c4:	e7f4      	b.n	1000c6b0 <gpio_init+0xc>
			_gpio_instances[i].callback[j] = NULL;
		}
		_gpio_instances[i].callback_enable_mask = 0;
		_gpio_instances[i].callback_reg_mask = 0;
	}
	_gpio_instances[0].hw = (void *)GPIO0;
1000c6c6:	4b0a      	ldr	r3, [pc, #40]	; (1000c6f0 <gpio_init+0x4c>)
1000c6c8:	4a0a      	ldr	r2, [pc, #40]	; (1000c6f4 <gpio_init+0x50>)
1000c6ca:	601a      	str	r2, [r3, #0]
	_gpio_instances[1].hw = (void *)GPIO1;
1000c6cc:	4a0a      	ldr	r2, [pc, #40]	; (1000c6f8 <gpio_init+0x54>)
1000c6ce:	649a      	str	r2, [r3, #72]	; 0x48
	_gpio_instances[2].hw = (void *)GPIO2;
1000c6d0:	490a      	ldr	r1, [pc, #40]	; (1000c6fc <gpio_init+0x58>)
1000c6d2:	2290      	movs	r2, #144	; 0x90
1000c6d4:	5099      	str	r1, [r3, r2]
	system_register_isr(RAM_ISR_TABLE_PORT0_COMB_INDEX, (uint32_t)gpio_port0_isr_handler);
1000c6d6:	490a      	ldr	r1, [pc, #40]	; (1000c700 <gpio_init+0x5c>)
1000c6d8:	2027      	movs	r0, #39	; 0x27
1000c6da:	4c0a      	ldr	r4, [pc, #40]	; (1000c704 <gpio_init+0x60>)
1000c6dc:	47a0      	blx	r4
	system_register_isr(RAM_ISR_TABLE_PORT1_COMB_INDEX, (uint32_t)gpio_port1_isr_handler);
1000c6de:	490a      	ldr	r1, [pc, #40]	; (1000c708 <gpio_init+0x64>)
1000c6e0:	2028      	movs	r0, #40	; 0x28
1000c6e2:	47a0      	blx	r4
	system_register_isr(RAM_ISR_TABLE_PORT2_COMB_INDEX, (uint32_t)gpio_port2_isr_handler);
1000c6e4:	4909      	ldr	r1, [pc, #36]	; (1000c70c <gpio_init+0x68>)
1000c6e6:	2029      	movs	r0, #41	; 0x29
1000c6e8:	47a0      	blx	r4
}
1000c6ea:	bd10      	pop	{r4, pc}
1000c6ec:	1001a180 	.word	0x1001a180
1000c6f0:	1001a13c 	.word	0x1001a13c
1000c6f4:	40010000 	.word	0x40010000
1000c6f8:	40011000 	.word	0x40011000
1000c6fc:	40013000 	.word	0x40013000
1000c700:	1000bfad 	.word	0x1000bfad
1000c704:	1000d2d1 	.word	0x1000d2d1
1000c708:	1000c011 	.word	0x1000c011
1000c70c:	1000c081 	.word	0x1000c081

1000c710 <system_clock_config>:
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_clock_config(enum system_clock_resource resoure, \
				enum system_clock_freq freq)
{
	switch (resoure) {
1000c710:	2801      	cmp	r0, #1
1000c712:	d00d      	beq.n	1000c730 <system_clock_config+0x20>
1000c714:	2800      	cmp	r0, #0
1000c716:	d002      	beq.n	1000c71e <system_clock_config+0xe>
1000c718:	2802      	cmp	r0, #2
1000c71a:	d01c      	beq.n	1000c756 <system_clock_config+0x46>
1000c71c:	e02e      	b.n	1000c77c <system_clock_config+0x6c>
		case CLOCK_RESOURCE_XO_26_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
1000c71e:	4a18      	ldr	r2, [pc, #96]	; (1000c780 <system_clock_config+0x70>)
1000c720:	6990      	ldr	r0, [r2, #24]
1000c722:	230c      	movs	r3, #12
1000c724:	4303      	orrs	r3, r0
1000c726:	6193      	str	r3, [r2, #24]
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_BT26M_CLK | \
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK;
			system_clock_value = 26000000;
1000c728:	4a16      	ldr	r2, [pc, #88]	; (1000c784 <system_clock_config+0x74>)
1000c72a:	4b17      	ldr	r3, [pc, #92]	; (1000c788 <system_clock_config+0x78>)
1000c72c:	601a      	str	r2, [r3, #0]
			break;
1000c72e:	e01a      	b.n	1000c766 <system_clock_config+0x56>

		case CLOCK_RESOURCE_LP_2_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
1000c730:	4b13      	ldr	r3, [pc, #76]	; (1000c780 <system_clock_config+0x70>)
1000c732:	6998      	ldr	r0, [r3, #24]
1000c734:	2208      	movs	r2, #8
1000c736:	4302      	orrs	r2, r0
1000c738:	619a      	str	r2, [r3, #24]
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK;
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg &= \
1000c73a:	699a      	ldr	r2, [r3, #24]
1000c73c:	2004      	movs	r0, #4
1000c73e:	4382      	bics	r2, r0
1000c740:	619a      	str	r2, [r3, #24]
					~LPMCU_MISC_REGS_LPMCU_CTRL_USE_BT26M_CLK;
			AON_GP_REGS0->AON_PMU_CTRL.reg |= \
1000c742:	4a12      	ldr	r2, [pc, #72]	; (1000c78c <system_clock_config+0x7c>)
1000c744:	6853      	ldr	r3, [r2, #4]
1000c746:	2080      	movs	r0, #128	; 0x80
1000c748:	0300      	lsls	r0, r0, #12
1000c74a:	4303      	orrs	r3, r0
1000c74c:	6053      	str	r3, [r2, #4]
					AON_GP_REGS_AON_PMU_CTRL_PMU_2MHZ_CLK_EN;
			system_clock_value = 2000000;
1000c74e:	4a10      	ldr	r2, [pc, #64]	; (1000c790 <system_clock_config+0x80>)
1000c750:	4b0d      	ldr	r3, [pc, #52]	; (1000c788 <system_clock_config+0x78>)
1000c752:	601a      	str	r2, [r3, #0]
			break;
1000c754:	e007      	b.n	1000c766 <system_clock_config+0x56>

		case CLOCK_RESOURCE_RC_26_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg &= \
1000c756:	4a0a      	ldr	r2, [pc, #40]	; (1000c780 <system_clock_config+0x70>)
1000c758:	6993      	ldr	r3, [r2, #24]
1000c75a:	200c      	movs	r0, #12
1000c75c:	4383      	bics	r3, r0
1000c75e:	6193      	str	r3, [r2, #24]
					~(LPMCU_MISC_REGS_LPMCU_CTRL_USE_BT26M_CLK | \
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK);
			system_clock_value = 26000000;
1000c760:	4a08      	ldr	r2, [pc, #32]	; (1000c784 <system_clock_config+0x74>)
1000c762:	4b09      	ldr	r3, [pc, #36]	; (1000c788 <system_clock_config+0x78>)
1000c764:	601a      	str	r2, [r3, #0]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	LPMCU_MISC_REGS0->LPMCU_CTRL.reg &= \
1000c766:	4b06      	ldr	r3, [pc, #24]	; (1000c780 <system_clock_config+0x70>)
1000c768:	699a      	ldr	r2, [r3, #24]
1000c76a:	2003      	movs	r0, #3
1000c76c:	4382      	bics	r2, r0
1000c76e:	619a      	str	r2, [r3, #24]
		~LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL_Msk;
	LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
1000c770:	699a      	ldr	r2, [r3, #24]
1000c772:	4001      	ands	r1, r0
1000c774:	4311      	orrs	r1, r2
1000c776:	6199      	str	r1, [r3, #24]
		LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL(freq);

	return STATUS_OK;
1000c778:	2000      	movs	r0, #0
1000c77a:	e000      	b.n	1000c77e <system_clock_config+0x6e>
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK);
			system_clock_value = 26000000;
			break;

		default:
			return STATUS_ERR_INVALID_ARG;
1000c77c:	2017      	movs	r0, #23
		~LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL_Msk;
	LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
		LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL(freq);

	return STATUS_OK;
}
1000c77e:	4770      	bx	lr
1000c780:	4000b000 	.word	0x4000b000
1000c784:	018cba80 	.word	0x018cba80
1000c788:	1001a214 	.word	0x1001a214
1000c78c:	4000f000 	.word	0x4000f000
1000c790:	001e8480 	.word	0x001e8480

1000c794 <system_clock_get_value>:
 *
 * \return system clock value.
 */
uint32_t system_clock_get_value(void)
{
	return system_clock_value;
1000c794:	4b01      	ldr	r3, [pc, #4]	; (1000c79c <system_clock_get_value+0x8>)
1000c796:	6818      	ldr	r0, [r3, #0]
}
1000c798:	4770      	bx	lr
1000c79a:	46c0      	nop			; (mov r8, r8)
1000c79c:	1001a214 	.word	0x1001a214

1000c7a0 <system_clock_peripheral_enable>:
 * \return Status of operation.
 * \retval STATUS_OK               Clock config correctly
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_clock_peripheral_enable(enum system_peripheral peripheral)
{
1000c7a0:	b500      	push	{lr}
	switch (peripheral) {
1000c7a2:	2835      	cmp	r0, #53	; 0x35
1000c7a4:	d900      	bls.n	1000c7a8 <system_clock_peripheral_enable+0x8>
1000c7a6:	e1a2      	b.n	1000caee <system_clock_peripheral_enable+0x34e>
1000c7a8:	0080      	lsls	r0, r0, #2
1000c7aa:	4bd2      	ldr	r3, [pc, #840]	; (1000caf4 <system_clock_peripheral_enable+0x354>)
1000c7ac:	581b      	ldr	r3, [r3, r0]
1000c7ae:	469f      	mov	pc, r3
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c7b0:	4ad1      	ldr	r2, [pc, #836]	; (1000caf8 <system_clock_peripheral_enable+0x358>)
1000c7b2:	68d1      	ldr	r1, [r2, #12]
1000c7b4:	2302      	movs	r3, #2
1000c7b6:	430b      	orrs	r3, r1
1000c7b8:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c7ba:	2000      	movs	r0, #0
{
	switch (peripheral) {
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI_FLASH0_CLK_EN;
		break;
1000c7bc:	e198      	b.n	1000caf0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c7be:	4ace      	ldr	r2, [pc, #824]	; (1000caf8 <system_clock_peripheral_enable+0x358>)
1000c7c0:	68d1      	ldr	r1, [r2, #12]
1000c7c2:	2304      	movs	r3, #4
1000c7c4:	430b      	orrs	r3, r1
1000c7c6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c7c8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI0_CORE_CLK_EN;
		break;
1000c7ca:	e191      	b.n	1000caf0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c7cc:	4aca      	ldr	r2, [pc, #808]	; (1000caf8 <system_clock_peripheral_enable+0x358>)
1000c7ce:	68d1      	ldr	r1, [r2, #12]
1000c7d0:	2308      	movs	r3, #8
1000c7d2:	430b      	orrs	r3, r1
1000c7d4:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c7d6:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI1_CORE_CLK_EN;
		break;
1000c7d8:	e18a      	b.n	1000caf0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c7da:	4ac7      	ldr	r2, [pc, #796]	; (1000caf8 <system_clock_peripheral_enable+0x358>)
1000c7dc:	68d1      	ldr	r1, [r2, #12]
1000c7de:	2310      	movs	r3, #16
1000c7e0:	430b      	orrs	r3, r1
1000c7e2:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c7e4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C0_CORE_CLK_EN;
		break;
1000c7e6:	e183      	b.n	1000caf0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c7e8:	4ac3      	ldr	r2, [pc, #780]	; (1000caf8 <system_clock_peripheral_enable+0x358>)
1000c7ea:	68d1      	ldr	r1, [r2, #12]
1000c7ec:	2320      	movs	r3, #32
1000c7ee:	430b      	orrs	r3, r1
1000c7f0:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c7f2:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_DUALTIMER0_CLK_EN;
		break;
1000c7f4:	e17c      	b.n	1000caf0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c7f6:	4ac0      	ldr	r2, [pc, #768]	; (1000caf8 <system_clock_peripheral_enable+0x358>)
1000c7f8:	68d1      	ldr	r1, [r2, #12]
1000c7fa:	2380      	movs	r3, #128	; 0x80
1000c7fc:	430b      	orrs	r3, r1
1000c7fe:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c800:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_GPIO_CLK_EN;
		break;
1000c802:	e175      	b.n	1000caf0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c804:	4abc      	ldr	r2, [pc, #752]	; (1000caf8 <system_clock_peripheral_enable+0x358>)
1000c806:	68d3      	ldr	r3, [r2, #12]
1000c808:	2180      	movs	r1, #128	; 0x80
1000c80a:	0049      	lsls	r1, r1, #1
1000c80c:	430b      	orrs	r3, r1
1000c80e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c810:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_TIMER0_CLK_EN;
		break;
1000c812:	e16d      	b.n	1000caf0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c814:	4ab8      	ldr	r2, [pc, #736]	; (1000caf8 <system_clock_peripheral_enable+0x358>)
1000c816:	68d3      	ldr	r3, [r2, #12]
1000c818:	2180      	movs	r1, #128	; 0x80
1000c81a:	0109      	lsls	r1, r1, #4
1000c81c:	430b      	orrs	r3, r1
1000c81e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c820:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WDT0_CLK_EN;
		break;
1000c822:	e165      	b.n	1000caf0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c824:	4ab4      	ldr	r2, [pc, #720]	; (1000caf8 <system_clock_peripheral_enable+0x358>)
1000c826:	68d3      	ldr	r3, [r2, #12]
1000c828:	2180      	movs	r1, #128	; 0x80
1000c82a:	0149      	lsls	r1, r1, #5
1000c82c:	430b      	orrs	r3, r1
1000c82e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c830:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WDT1_CLK_EN;
		break;
1000c832:	e15d      	b.n	1000caf0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c834:	4ab0      	ldr	r2, [pc, #704]	; (1000caf8 <system_clock_peripheral_enable+0x358>)
1000c836:	68d3      	ldr	r3, [r2, #12]
1000c838:	2180      	movs	r1, #128	; 0x80
1000c83a:	0189      	lsls	r1, r1, #6
1000c83c:	430b      	orrs	r3, r1
1000c83e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c840:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART0_CORE_CLK_EN;
		break;
1000c842:	e155      	b.n	1000caf0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c844:	4aac      	ldr	r2, [pc, #688]	; (1000caf8 <system_clock_peripheral_enable+0x358>)
1000c846:	68d3      	ldr	r3, [r2, #12]
1000c848:	2180      	movs	r1, #128	; 0x80
1000c84a:	01c9      	lsls	r1, r1, #7
1000c84c:	430b      	orrs	r3, r1
1000c84e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c850:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART0_IF_CLK_EN;
		break;
1000c852:	e14d      	b.n	1000caf0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c854:	4aa8      	ldr	r2, [pc, #672]	; (1000caf8 <system_clock_peripheral_enable+0x358>)
1000c856:	68d3      	ldr	r3, [r2, #12]
1000c858:	2180      	movs	r1, #128	; 0x80
1000c85a:	0209      	lsls	r1, r1, #8
1000c85c:	430b      	orrs	r3, r1
1000c85e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c860:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART1_CORE_CLK_EN;
		break;
1000c862:	e145      	b.n	1000caf0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c864:	4aa4      	ldr	r2, [pc, #656]	; (1000caf8 <system_clock_peripheral_enable+0x358>)
1000c866:	68d3      	ldr	r3, [r2, #12]
1000c868:	2180      	movs	r1, #128	; 0x80
1000c86a:	0249      	lsls	r1, r1, #9
1000c86c:	430b      	orrs	r3, r1
1000c86e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c870:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART1_IF_CLK_EN;
		break;
1000c872:	e13d      	b.n	1000caf0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c874:	4aa0      	ldr	r2, [pc, #640]	; (1000caf8 <system_clock_peripheral_enable+0x358>)
1000c876:	68d3      	ldr	r3, [r2, #12]
1000c878:	2180      	movs	r1, #128	; 0x80
1000c87a:	0289      	lsls	r1, r1, #10
1000c87c:	430b      	orrs	r3, r1
1000c87e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c880:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IRQ_CTRLR_CORE_CLK_EN;
		break;
1000c882:	e135      	b.n	1000caf0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c884:	4a9c      	ldr	r2, [pc, #624]	; (1000caf8 <system_clock_peripheral_enable+0x358>)
1000c886:	68d3      	ldr	r3, [r2, #12]
1000c888:	2180      	movs	r1, #128	; 0x80
1000c88a:	02c9      	lsls	r1, r1, #11
1000c88c:	430b      	orrs	r3, r1
1000c88e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c890:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_1_GL_MEM_CLK_EN;
		break;
1000c892:	e12d      	b.n	1000caf0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c894:	4a98      	ldr	r2, [pc, #608]	; (1000caf8 <system_clock_peripheral_enable+0x358>)
1000c896:	68d3      	ldr	r3, [r2, #12]
1000c898:	2180      	movs	r1, #128	; 0x80
1000c89a:	0309      	lsls	r1, r1, #12
1000c89c:	430b      	orrs	r3, r1
1000c89e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c8a0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_2_GL_MEM_CLK_EN;
		break;
1000c8a2:	e125      	b.n	1000caf0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c8a4:	4a94      	ldr	r2, [pc, #592]	; (1000caf8 <system_clock_peripheral_enable+0x358>)
1000c8a6:	68d3      	ldr	r3, [r2, #12]
1000c8a8:	2180      	movs	r1, #128	; 0x80
1000c8aa:	0349      	lsls	r1, r1, #13
1000c8ac:	430b      	orrs	r3, r1
1000c8ae:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c8b0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ROM_MEM_CLK_EN;
		break;
1000c8b2:	e11d      	b.n	1000caf0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c8b4:	4a90      	ldr	r2, [pc, #576]	; (1000caf8 <system_clock_peripheral_enable+0x358>)
1000c8b6:	68d3      	ldr	r3, [r2, #12]
1000c8b8:	2180      	movs	r1, #128	; 0x80
1000c8ba:	0389      	lsls	r1, r1, #14
1000c8bc:	430b      	orrs	r3, r1
1000c8be:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c8c0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_XBAR_IF_CLK_EN;
		break;
1000c8c2:	e115      	b.n	1000caf0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c8c4:	4a8c      	ldr	r2, [pc, #560]	; (1000caf8 <system_clock_peripheral_enable+0x358>)
1000c8c6:	68d3      	ldr	r3, [r2, #12]
1000c8c8:	2180      	movs	r1, #128	; 0x80
1000c8ca:	03c9      	lsls	r1, r1, #15
1000c8cc:	430b      	orrs	r3, r1
1000c8ce:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c8d0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_AON_WRAPPER_CLK_EN;
		break;
1000c8d2:	e10d      	b.n	1000caf0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c8d4:	4a88      	ldr	r2, [pc, #544]	; (1000caf8 <system_clock_peripheral_enable+0x358>)
1000c8d6:	68d3      	ldr	r3, [r2, #12]
1000c8d8:	2180      	movs	r1, #128	; 0x80
1000c8da:	0409      	lsls	r1, r1, #16
1000c8dc:	430b      	orrs	r3, r1
1000c8de:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c8e0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLK_EN;
		break;
1000c8e2:	e105      	b.n	1000caf0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c8e4:	4a84      	ldr	r2, [pc, #528]	; (1000caf8 <system_clock_peripheral_enable+0x358>)
1000c8e6:	68d3      	ldr	r3, [r2, #12]
1000c8e8:	2180      	movs	r1, #128	; 0x80
1000c8ea:	0449      	lsls	r1, r1, #17
1000c8ec:	430b      	orrs	r3, r1
1000c8ee:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c8f0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLKG_EN;
		break;
1000c8f2:	e0fd      	b.n	1000caf0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c8f4:	4a80      	ldr	r2, [pc, #512]	; (1000caf8 <system_clock_peripheral_enable+0x358>)
1000c8f6:	68d3      	ldr	r3, [r2, #12]
1000c8f8:	2180      	movs	r1, #128	; 0x80
1000c8fa:	0489      	lsls	r1, r1, #18
1000c8fc:	430b      	orrs	r3, r1
1000c8fe:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c900:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_BLE_MEM_CLK_EN;
		break;
1000c902:	e0f5      	b.n	1000caf0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c904:	4a7c      	ldr	r2, [pc, #496]	; (1000caf8 <system_clock_peripheral_enable+0x358>)
1000c906:	68d3      	ldr	r3, [r2, #12]
1000c908:	2180      	movs	r1, #128	; 0x80
1000c90a:	04c9      	lsls	r1, r1, #19
1000c90c:	430b      	orrs	r3, r1
1000c90e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c910:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC0_CLK_EN;
		break;
1000c912:	e0ed      	b.n	1000caf0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c914:	4a78      	ldr	r2, [pc, #480]	; (1000caf8 <system_clock_peripheral_enable+0x358>)
1000c916:	68d3      	ldr	r3, [r2, #12]
1000c918:	2180      	movs	r1, #128	; 0x80
1000c91a:	0509      	lsls	r1, r1, #20
1000c91c:	430b      	orrs	r3, r1
1000c91e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c920:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC1_CLK_EN;
		break;
1000c922:	e0e5      	b.n	1000caf0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c924:	4a74      	ldr	r2, [pc, #464]	; (1000caf8 <system_clock_peripheral_enable+0x358>)
1000c926:	68d3      	ldr	r3, [r2, #12]
1000c928:	2180      	movs	r1, #128	; 0x80
1000c92a:	0549      	lsls	r1, r1, #21
1000c92c:	430b      	orrs	r3, r1
1000c92e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c930:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC2_CLK_EN;
		break;
1000c932:	e0dd      	b.n	1000caf0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c934:	4a70      	ldr	r2, [pc, #448]	; (1000caf8 <system_clock_peripheral_enable+0x358>)
1000c936:	68d3      	ldr	r3, [r2, #12]
1000c938:	2180      	movs	r1, #128	; 0x80
1000c93a:	0589      	lsls	r1, r1, #22
1000c93c:	430b      	orrs	r3, r1
1000c93e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c940:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C1_CORE_CLK_EN;
		break;
1000c942:	e0d5      	b.n	1000caf0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c944:	4a6c      	ldr	r2, [pc, #432]	; (1000caf8 <system_clock_peripheral_enable+0x358>)
1000c946:	68d3      	ldr	r3, [r2, #12]
1000c948:	2180      	movs	r1, #128	; 0x80
1000c94a:	05c9      	lsls	r1, r1, #23
1000c94c:	430b      	orrs	r3, r1
1000c94e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c950:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_CLK_EN;
		break;
1000c952:	e0cd      	b.n	1000caf0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c954:	4a68      	ldr	r2, [pc, #416]	; (1000caf8 <system_clock_peripheral_enable+0x358>)
1000c956:	6911      	ldr	r1, [r2, #16]
1000c958:	2301      	movs	r3, #1
1000c95a:	430b      	orrs	r3, r1
1000c95c:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c95e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE0_CLK_EN;
		break;
1000c960:	e0c6      	b.n	1000caf0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c962:	4a65      	ldr	r2, [pc, #404]	; (1000caf8 <system_clock_peripheral_enable+0x358>)
1000c964:	6911      	ldr	r1, [r2, #16]
1000c966:	2302      	movs	r3, #2
1000c968:	430b      	orrs	r3, r1
1000c96a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c96c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE1_CLK_EN;
		break;
1000c96e:	e0bf      	b.n	1000caf0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c970:	4a61      	ldr	r2, [pc, #388]	; (1000caf8 <system_clock_peripheral_enable+0x358>)
1000c972:	6911      	ldr	r1, [r2, #16]
1000c974:	2304      	movs	r3, #4
1000c976:	430b      	orrs	r3, r1
1000c978:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c97a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE2_CLK_EN;
		break;
1000c97c:	e0b8      	b.n	1000caf0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c97e:	4a5e      	ldr	r2, [pc, #376]	; (1000caf8 <system_clock_peripheral_enable+0x358>)
1000c980:	6911      	ldr	r1, [r2, #16]
1000c982:	2308      	movs	r3, #8
1000c984:	430b      	orrs	r3, r1
1000c986:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c988:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE3_CLK_EN;
		break;
1000c98a:	e0b1      	b.n	1000caf0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c98c:	4a5a      	ldr	r2, [pc, #360]	; (1000caf8 <system_clock_peripheral_enable+0x358>)
1000c98e:	6911      	ldr	r1, [r2, #16]
1000c990:	2310      	movs	r3, #16
1000c992:	430b      	orrs	r3, r1
1000c994:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c996:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE4_CLK_EN;
		break;
1000c998:	e0aa      	b.n	1000caf0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c99a:	4a57      	ldr	r2, [pc, #348]	; (1000caf8 <system_clock_peripheral_enable+0x358>)
1000c99c:	6911      	ldr	r1, [r2, #16]
1000c99e:	2320      	movs	r3, #32
1000c9a0:	430b      	orrs	r3, r1
1000c9a2:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c9a4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE5_CLK_EN;
		break;
1000c9a6:	e0a3      	b.n	1000caf0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c9a8:	4a53      	ldr	r2, [pc, #332]	; (1000caf8 <system_clock_peripheral_enable+0x358>)
1000c9aa:	6911      	ldr	r1, [r2, #16]
1000c9ac:	2340      	movs	r3, #64	; 0x40
1000c9ae:	430b      	orrs	r3, r1
1000c9b0:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c9b2:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM0_CLK_EN;
		break;
1000c9b4:	e09c      	b.n	1000caf0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c9b6:	4a50      	ldr	r2, [pc, #320]	; (1000caf8 <system_clock_peripheral_enable+0x358>)
1000c9b8:	6911      	ldr	r1, [r2, #16]
1000c9ba:	2380      	movs	r3, #128	; 0x80
1000c9bc:	430b      	orrs	r3, r1
1000c9be:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c9c0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM1_CLK_EN;
		break;
1000c9c2:	e095      	b.n	1000caf0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c9c4:	4a4c      	ldr	r2, [pc, #304]	; (1000caf8 <system_clock_peripheral_enable+0x358>)
1000c9c6:	6913      	ldr	r3, [r2, #16]
1000c9c8:	2180      	movs	r1, #128	; 0x80
1000c9ca:	0049      	lsls	r1, r1, #1
1000c9cc:	430b      	orrs	r3, r1
1000c9ce:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c9d0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM2_CLK_EN;
		break;
1000c9d2:	e08d      	b.n	1000caf0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c9d4:	4a48      	ldr	r2, [pc, #288]	; (1000caf8 <system_clock_peripheral_enable+0x358>)
1000c9d6:	6913      	ldr	r3, [r2, #16]
1000c9d8:	2180      	movs	r1, #128	; 0x80
1000c9da:	0089      	lsls	r1, r1, #2
1000c9dc:	430b      	orrs	r3, r1
1000c9de:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c9e0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM3_CLK_EN;
		break;
1000c9e2:	e085      	b.n	1000caf0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c9e4:	4a44      	ldr	r2, [pc, #272]	; (1000caf8 <system_clock_peripheral_enable+0x358>)
1000c9e6:	6913      	ldr	r3, [r2, #16]
1000c9e8:	2180      	movs	r1, #128	; 0x80
1000c9ea:	00c9      	lsls	r1, r1, #3
1000c9ec:	430b      	orrs	r3, r1
1000c9ee:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c9f0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SENS_ADC_CLK_EN;
		break;
1000c9f2:	e07d      	b.n	1000caf0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c9f4:	4a40      	ldr	r2, [pc, #256]	; (1000caf8 <system_clock_peripheral_enable+0x358>)
1000c9f6:	6913      	ldr	r3, [r2, #16]
1000c9f8:	2180      	movs	r1, #128	; 0x80
1000c9fa:	0109      	lsls	r1, r1, #4
1000c9fc:	430b      	orrs	r3, r1
1000c9fe:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ca00:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI0_SCK_PHASE_INT_CLK_EN;
		break;
1000ca02:	e075      	b.n	1000caf0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000ca04:	4a3c      	ldr	r2, [pc, #240]	; (1000caf8 <system_clock_peripheral_enable+0x358>)
1000ca06:	6913      	ldr	r3, [r2, #16]
1000ca08:	2180      	movs	r1, #128	; 0x80
1000ca0a:	0149      	lsls	r1, r1, #5
1000ca0c:	430b      	orrs	r3, r1
1000ca0e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ca10:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI1_SCK_PHASE_INT_CLK_EN;
		break;
1000ca12:	e06d      	b.n	1000caf0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000ca14:	4a38      	ldr	r2, [pc, #224]	; (1000caf8 <system_clock_peripheral_enable+0x358>)
1000ca16:	6913      	ldr	r3, [r2, #16]
1000ca18:	2180      	movs	r1, #128	; 0x80
1000ca1a:	0189      	lsls	r1, r1, #6
1000ca1c:	430b      	orrs	r3, r1
1000ca1e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ca20:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_GPIO_GCLK_EN;
		break;
1000ca22:	e065      	b.n	1000caf0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000ca24:	4a34      	ldr	r2, [pc, #208]	; (1000caf8 <system_clock_peripheral_enable+0x358>)
1000ca26:	6913      	ldr	r3, [r2, #16]
1000ca28:	2180      	movs	r1, #128	; 0x80
1000ca2a:	01c9      	lsls	r1, r1, #7
1000ca2c:	430b      	orrs	r3, r1
1000ca2e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ca30:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_TIMER0_PGCLK_EN;
		break;
1000ca32:	e05d      	b.n	1000caf0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000ca34:	4a30      	ldr	r2, [pc, #192]	; (1000caf8 <system_clock_peripheral_enable+0x358>)
1000ca36:	6913      	ldr	r3, [r2, #16]
1000ca38:	2180      	movs	r1, #128	; 0x80
1000ca3a:	0209      	lsls	r1, r1, #8
1000ca3c:	430b      	orrs	r3, r1
1000ca3e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ca40:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_CORE_CLK_EN;
		break;
1000ca42:	e055      	b.n	1000caf0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000ca44:	4a2c      	ldr	r2, [pc, #176]	; (1000caf8 <system_clock_peripheral_enable+0x358>)
1000ca46:	6913      	ldr	r3, [r2, #16]
1000ca48:	2180      	movs	r1, #128	; 0x80
1000ca4a:	0249      	lsls	r1, r1, #9
1000ca4c:	430b      	orrs	r3, r1
1000ca4e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ca50:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_AHB_CLK_EN;
		break;
1000ca52:	e04d      	b.n	1000caf0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000ca54:	4a28      	ldr	r2, [pc, #160]	; (1000caf8 <system_clock_peripheral_enable+0x358>)
1000ca56:	6913      	ldr	r3, [r2, #16]
1000ca58:	2180      	movs	r1, #128	; 0x80
1000ca5a:	0289      	lsls	r1, r1, #10
1000ca5c:	430b      	orrs	r3, r1
1000ca5e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ca60:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_CORE_CLK_EN;
		break;
1000ca62:	e045      	b.n	1000caf0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000ca64:	4a24      	ldr	r2, [pc, #144]	; (1000caf8 <system_clock_peripheral_enable+0x358>)
1000ca66:	6913      	ldr	r3, [r2, #16]
1000ca68:	2180      	movs	r1, #128	; 0x80
1000ca6a:	02c9      	lsls	r1, r1, #11
1000ca6c:	430b      	orrs	r3, r1
1000ca6e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ca70:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_AHB_CLK_EN;
		break;
1000ca72:	e03d      	b.n	1000caf0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000ca74:	4a20      	ldr	r2, [pc, #128]	; (1000caf8 <system_clock_peripheral_enable+0x358>)
1000ca76:	6913      	ldr	r3, [r2, #16]
1000ca78:	2180      	movs	r1, #128	; 0x80
1000ca7a:	0309      	lsls	r1, r1, #12
1000ca7c:	430b      	orrs	r3, r1
1000ca7e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ca80:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_0_MEM_CLK_EN;
		break;
1000ca82:	e035      	b.n	1000caf0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000ca84:	4a1c      	ldr	r2, [pc, #112]	; (1000caf8 <system_clock_peripheral_enable+0x358>)
1000ca86:	6913      	ldr	r3, [r2, #16]
1000ca88:	2180      	movs	r1, #128	; 0x80
1000ca8a:	0349      	lsls	r1, r1, #13
1000ca8c:	430b      	orrs	r3, r1
1000ca8e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ca90:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_1_MEM_CLK_EN;
		break;
1000ca92:	e02d      	b.n	1000caf0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000ca94:	4a18      	ldr	r2, [pc, #96]	; (1000caf8 <system_clock_peripheral_enable+0x358>)
1000ca96:	6913      	ldr	r3, [r2, #16]
1000ca98:	2180      	movs	r1, #128	; 0x80
1000ca9a:	0389      	lsls	r1, r1, #14
1000ca9c:	430b      	orrs	r3, r1
1000ca9e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000caa0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_2_MEM_CLK_EN;
		break;
1000caa2:	e025      	b.n	1000caf0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000caa4:	4a14      	ldr	r2, [pc, #80]	; (1000caf8 <system_clock_peripheral_enable+0x358>)
1000caa6:	6913      	ldr	r3, [r2, #16]
1000caa8:	2180      	movs	r1, #128	; 0x80
1000caaa:	03c9      	lsls	r1, r1, #15
1000caac:	430b      	orrs	r3, r1
1000caae:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cab0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_0_MEM_CLK_EN;
		break;
1000cab2:	e01d      	b.n	1000caf0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000cab4:	4a10      	ldr	r2, [pc, #64]	; (1000caf8 <system_clock_peripheral_enable+0x358>)
1000cab6:	6913      	ldr	r3, [r2, #16]
1000cab8:	2180      	movs	r1, #128	; 0x80
1000caba:	0409      	lsls	r1, r1, #16
1000cabc:	430b      	orrs	r3, r1
1000cabe:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cac0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_1_MEM_CLK_EN;
		break;
1000cac2:	e015      	b.n	1000caf0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
1000cac4:	4a0c      	ldr	r2, [pc, #48]	; (1000caf8 <system_clock_peripheral_enable+0x358>)
1000cac6:	7d11      	ldrb	r1, [r2, #20]
1000cac8:	2301      	movs	r3, #1
1000caca:	430b      	orrs	r3, r1
1000cacc:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cace:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CTRL_RXTX_SEQ_CLK_EN;
		break;
1000cad0:	e00e      	b.n	1000caf0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
1000cad2:	4a09      	ldr	r2, [pc, #36]	; (1000caf8 <system_clock_peripheral_enable+0x358>)
1000cad4:	7d11      	ldrb	r1, [r2, #20]
1000cad6:	2302      	movs	r3, #2
1000cad8:	430b      	orrs	r3, r1
1000cada:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cadc:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CTRL_AHB_CLK_EN;
		break;
1000cade:	e007      	b.n	1000caf0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
1000cae0:	4a05      	ldr	r2, [pc, #20]	; (1000caf8 <system_clock_peripheral_enable+0x358>)
1000cae2:	7d11      	ldrb	r1, [r2, #20]
1000cae4:	2304      	movs	r3, #4
1000cae6:	430b      	orrs	r3, r1
1000cae8:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000caea:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CTRL_PERIPH_REGS_CLK_EN;
		break;
1000caec:	e000      	b.n	1000caf0 <system_clock_peripheral_enable+0x350>

		default:
			return STATUS_ERR_INVALID_ARG;
1000caee:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
1000caf0:	bd00      	pop	{pc}
1000caf2:	46c0      	nop			; (mov r8, r8)
1000caf4:	100172c8 	.word	0x100172c8
1000caf8:	4000b000 	.word	0x4000b000

1000cafc <system_clock_peripheral_disable>:
 * \return Status of operation.
 * \retval STATUS_OK               Clock config correctly
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_clock_peripheral_disable(enum system_peripheral peripheral)
{
1000cafc:	b500      	push	{lr}
	switch (peripheral) {
1000cafe:	2835      	cmp	r0, #53	; 0x35
1000cb00:	d900      	bls.n	1000cb04 <system_clock_peripheral_disable+0x8>
1000cb02:	e17d      	b.n	1000ce00 <system_clock_peripheral_disable+0x304>
1000cb04:	0080      	lsls	r0, r0, #2
1000cb06:	4bbf      	ldr	r3, [pc, #764]	; (1000ce04 <system_clock_peripheral_disable+0x308>)
1000cb08:	581b      	ldr	r3, [r3, r0]
1000cb0a:	469f      	mov	pc, r3
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000cb0c:	4abe      	ldr	r2, [pc, #760]	; (1000ce08 <system_clock_peripheral_disable+0x30c>)
1000cb0e:	68d3      	ldr	r3, [r2, #12]
1000cb10:	2102      	movs	r1, #2
1000cb12:	438b      	bics	r3, r1
1000cb14:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cb16:	2000      	movs	r0, #0
{
	switch (peripheral) {
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI_FLASH0_CLK_EN;
		break;
1000cb18:	e173      	b.n	1000ce02 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000cb1a:	4abb      	ldr	r2, [pc, #748]	; (1000ce08 <system_clock_peripheral_disable+0x30c>)
1000cb1c:	68d3      	ldr	r3, [r2, #12]
1000cb1e:	2104      	movs	r1, #4
1000cb20:	438b      	bics	r3, r1
1000cb22:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cb24:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI0_CORE_CLK_EN;
		break;
1000cb26:	e16c      	b.n	1000ce02 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000cb28:	4ab7      	ldr	r2, [pc, #732]	; (1000ce08 <system_clock_peripheral_disable+0x30c>)
1000cb2a:	68d3      	ldr	r3, [r2, #12]
1000cb2c:	2108      	movs	r1, #8
1000cb2e:	438b      	bics	r3, r1
1000cb30:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cb32:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI1_CORE_CLK_EN;
		break;
1000cb34:	e165      	b.n	1000ce02 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000cb36:	4ab4      	ldr	r2, [pc, #720]	; (1000ce08 <system_clock_peripheral_disable+0x30c>)
1000cb38:	68d3      	ldr	r3, [r2, #12]
1000cb3a:	2110      	movs	r1, #16
1000cb3c:	438b      	bics	r3, r1
1000cb3e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cb40:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C0_CORE_CLK_EN;
		break;
1000cb42:	e15e      	b.n	1000ce02 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000cb44:	4ab0      	ldr	r2, [pc, #704]	; (1000ce08 <system_clock_peripheral_disable+0x30c>)
1000cb46:	68d3      	ldr	r3, [r2, #12]
1000cb48:	2120      	movs	r1, #32
1000cb4a:	438b      	bics	r3, r1
1000cb4c:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cb4e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_DUALTIMER0_CLK_EN;
		break;
1000cb50:	e157      	b.n	1000ce02 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000cb52:	4aad      	ldr	r2, [pc, #692]	; (1000ce08 <system_clock_peripheral_disable+0x30c>)
1000cb54:	68d3      	ldr	r3, [r2, #12]
1000cb56:	2180      	movs	r1, #128	; 0x80
1000cb58:	438b      	bics	r3, r1
1000cb5a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cb5c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_GPIO_CLK_EN;
		break;
1000cb5e:	e150      	b.n	1000ce02 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000cb60:	4aa9      	ldr	r2, [pc, #676]	; (1000ce08 <system_clock_peripheral_disable+0x30c>)
1000cb62:	68d1      	ldr	r1, [r2, #12]
1000cb64:	4ba9      	ldr	r3, [pc, #676]	; (1000ce0c <system_clock_peripheral_disable+0x310>)
1000cb66:	400b      	ands	r3, r1
1000cb68:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cb6a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_TIMER0_CLK_EN;
		break;
1000cb6c:	e149      	b.n	1000ce02 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000cb6e:	4aa6      	ldr	r2, [pc, #664]	; (1000ce08 <system_clock_peripheral_disable+0x30c>)
1000cb70:	68d1      	ldr	r1, [r2, #12]
1000cb72:	4ba7      	ldr	r3, [pc, #668]	; (1000ce10 <system_clock_peripheral_disable+0x314>)
1000cb74:	400b      	ands	r3, r1
1000cb76:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cb78:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WDT0_CLK_EN;
		break;
1000cb7a:	e142      	b.n	1000ce02 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000cb7c:	4aa2      	ldr	r2, [pc, #648]	; (1000ce08 <system_clock_peripheral_disable+0x30c>)
1000cb7e:	68d1      	ldr	r1, [r2, #12]
1000cb80:	4ba4      	ldr	r3, [pc, #656]	; (1000ce14 <system_clock_peripheral_disable+0x318>)
1000cb82:	400b      	ands	r3, r1
1000cb84:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cb86:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WDT1_CLK_EN;
		break;
1000cb88:	e13b      	b.n	1000ce02 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000cb8a:	4a9f      	ldr	r2, [pc, #636]	; (1000ce08 <system_clock_peripheral_disable+0x30c>)
1000cb8c:	68d1      	ldr	r1, [r2, #12]
1000cb8e:	4ba2      	ldr	r3, [pc, #648]	; (1000ce18 <system_clock_peripheral_disable+0x31c>)
1000cb90:	400b      	ands	r3, r1
1000cb92:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cb94:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART0_CORE_CLK_EN;
		break;
1000cb96:	e134      	b.n	1000ce02 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000cb98:	4a9b      	ldr	r2, [pc, #620]	; (1000ce08 <system_clock_peripheral_disable+0x30c>)
1000cb9a:	68d1      	ldr	r1, [r2, #12]
1000cb9c:	4b9f      	ldr	r3, [pc, #636]	; (1000ce1c <system_clock_peripheral_disable+0x320>)
1000cb9e:	400b      	ands	r3, r1
1000cba0:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cba2:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART0_IF_CLK_EN;
		break;
1000cba4:	e12d      	b.n	1000ce02 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000cba6:	4a98      	ldr	r2, [pc, #608]	; (1000ce08 <system_clock_peripheral_disable+0x30c>)
1000cba8:	68d1      	ldr	r1, [r2, #12]
1000cbaa:	4b9d      	ldr	r3, [pc, #628]	; (1000ce20 <system_clock_peripheral_disable+0x324>)
1000cbac:	400b      	ands	r3, r1
1000cbae:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cbb0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART1_CORE_CLK_EN;
		break;
1000cbb2:	e126      	b.n	1000ce02 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000cbb4:	4a94      	ldr	r2, [pc, #592]	; (1000ce08 <system_clock_peripheral_disable+0x30c>)
1000cbb6:	68d1      	ldr	r1, [r2, #12]
1000cbb8:	4b9a      	ldr	r3, [pc, #616]	; (1000ce24 <system_clock_peripheral_disable+0x328>)
1000cbba:	400b      	ands	r3, r1
1000cbbc:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cbbe:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART1_IF_CLK_EN;
		break;
1000cbc0:	e11f      	b.n	1000ce02 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000cbc2:	4a91      	ldr	r2, [pc, #580]	; (1000ce08 <system_clock_peripheral_disable+0x30c>)
1000cbc4:	68d1      	ldr	r1, [r2, #12]
1000cbc6:	4b98      	ldr	r3, [pc, #608]	; (1000ce28 <system_clock_peripheral_disable+0x32c>)
1000cbc8:	400b      	ands	r3, r1
1000cbca:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cbcc:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IRQ_CTRLR_CORE_CLK_EN;
		break;
1000cbce:	e118      	b.n	1000ce02 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000cbd0:	4a8d      	ldr	r2, [pc, #564]	; (1000ce08 <system_clock_peripheral_disable+0x30c>)
1000cbd2:	68d1      	ldr	r1, [r2, #12]
1000cbd4:	4b95      	ldr	r3, [pc, #596]	; (1000ce2c <system_clock_peripheral_disable+0x330>)
1000cbd6:	400b      	ands	r3, r1
1000cbd8:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cbda:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_1_GL_MEM_CLK_EN;
		break;
1000cbdc:	e111      	b.n	1000ce02 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000cbde:	4a8a      	ldr	r2, [pc, #552]	; (1000ce08 <system_clock_peripheral_disable+0x30c>)
1000cbe0:	68d1      	ldr	r1, [r2, #12]
1000cbe2:	4b93      	ldr	r3, [pc, #588]	; (1000ce30 <system_clock_peripheral_disable+0x334>)
1000cbe4:	400b      	ands	r3, r1
1000cbe6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cbe8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_2_GL_MEM_CLK_EN;
		break;
1000cbea:	e10a      	b.n	1000ce02 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000cbec:	4a86      	ldr	r2, [pc, #536]	; (1000ce08 <system_clock_peripheral_disable+0x30c>)
1000cbee:	68d1      	ldr	r1, [r2, #12]
1000cbf0:	4b90      	ldr	r3, [pc, #576]	; (1000ce34 <system_clock_peripheral_disable+0x338>)
1000cbf2:	400b      	ands	r3, r1
1000cbf4:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cbf6:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ROM_MEM_CLK_EN;
		break;
1000cbf8:	e103      	b.n	1000ce02 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000cbfa:	4a83      	ldr	r2, [pc, #524]	; (1000ce08 <system_clock_peripheral_disable+0x30c>)
1000cbfc:	68d1      	ldr	r1, [r2, #12]
1000cbfe:	4b8e      	ldr	r3, [pc, #568]	; (1000ce38 <system_clock_peripheral_disable+0x33c>)
1000cc00:	400b      	ands	r3, r1
1000cc02:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cc04:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_XBAR_IF_CLK_EN;
		break;
1000cc06:	e0fc      	b.n	1000ce02 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000cc08:	4a7f      	ldr	r2, [pc, #508]	; (1000ce08 <system_clock_peripheral_disable+0x30c>)
1000cc0a:	68d1      	ldr	r1, [r2, #12]
1000cc0c:	4b8b      	ldr	r3, [pc, #556]	; (1000ce3c <system_clock_peripheral_disable+0x340>)
1000cc0e:	400b      	ands	r3, r1
1000cc10:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cc12:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_AON_WRAPPER_CLK_EN;
		break;
1000cc14:	e0f5      	b.n	1000ce02 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000cc16:	4a7c      	ldr	r2, [pc, #496]	; (1000ce08 <system_clock_peripheral_disable+0x30c>)
1000cc18:	68d1      	ldr	r1, [r2, #12]
1000cc1a:	4b89      	ldr	r3, [pc, #548]	; (1000ce40 <system_clock_peripheral_disable+0x344>)
1000cc1c:	400b      	ands	r3, r1
1000cc1e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cc20:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLK_EN;
		break;
1000cc22:	e0ee      	b.n	1000ce02 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000cc24:	4a78      	ldr	r2, [pc, #480]	; (1000ce08 <system_clock_peripheral_disable+0x30c>)
1000cc26:	68d1      	ldr	r1, [r2, #12]
1000cc28:	4b86      	ldr	r3, [pc, #536]	; (1000ce44 <system_clock_peripheral_disable+0x348>)
1000cc2a:	400b      	ands	r3, r1
1000cc2c:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cc2e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLKG_EN;
		break;
1000cc30:	e0e7      	b.n	1000ce02 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000cc32:	4a75      	ldr	r2, [pc, #468]	; (1000ce08 <system_clock_peripheral_disable+0x30c>)
1000cc34:	68d1      	ldr	r1, [r2, #12]
1000cc36:	4b84      	ldr	r3, [pc, #528]	; (1000ce48 <system_clock_peripheral_disable+0x34c>)
1000cc38:	400b      	ands	r3, r1
1000cc3a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cc3c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_BLE_MEM_CLK_EN;
		break;
1000cc3e:	e0e0      	b.n	1000ce02 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000cc40:	4a71      	ldr	r2, [pc, #452]	; (1000ce08 <system_clock_peripheral_disable+0x30c>)
1000cc42:	68d1      	ldr	r1, [r2, #12]
1000cc44:	4b81      	ldr	r3, [pc, #516]	; (1000ce4c <system_clock_peripheral_disable+0x350>)
1000cc46:	400b      	ands	r3, r1
1000cc48:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cc4a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC0_CLK_EN;
		break;
1000cc4c:	e0d9      	b.n	1000ce02 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000cc4e:	4a6e      	ldr	r2, [pc, #440]	; (1000ce08 <system_clock_peripheral_disable+0x30c>)
1000cc50:	68d1      	ldr	r1, [r2, #12]
1000cc52:	4b7f      	ldr	r3, [pc, #508]	; (1000ce50 <system_clock_peripheral_disable+0x354>)
1000cc54:	400b      	ands	r3, r1
1000cc56:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cc58:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC1_CLK_EN;
		break;
1000cc5a:	e0d2      	b.n	1000ce02 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000cc5c:	4a6a      	ldr	r2, [pc, #424]	; (1000ce08 <system_clock_peripheral_disable+0x30c>)
1000cc5e:	68d1      	ldr	r1, [r2, #12]
1000cc60:	4b7c      	ldr	r3, [pc, #496]	; (1000ce54 <system_clock_peripheral_disable+0x358>)
1000cc62:	400b      	ands	r3, r1
1000cc64:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cc66:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC2_CLK_EN;
		break;
1000cc68:	e0cb      	b.n	1000ce02 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000cc6a:	4a67      	ldr	r2, [pc, #412]	; (1000ce08 <system_clock_peripheral_disable+0x30c>)
1000cc6c:	68d1      	ldr	r1, [r2, #12]
1000cc6e:	4b7a      	ldr	r3, [pc, #488]	; (1000ce58 <system_clock_peripheral_disable+0x35c>)
1000cc70:	400b      	ands	r3, r1
1000cc72:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cc74:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C1_CORE_CLK_EN;
		break;
1000cc76:	e0c4      	b.n	1000ce02 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000cc78:	4a63      	ldr	r2, [pc, #396]	; (1000ce08 <system_clock_peripheral_disable+0x30c>)
1000cc7a:	68d1      	ldr	r1, [r2, #12]
1000cc7c:	4b77      	ldr	r3, [pc, #476]	; (1000ce5c <system_clock_peripheral_disable+0x360>)
1000cc7e:	400b      	ands	r3, r1
1000cc80:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cc82:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_CLK_EN;
		break;
1000cc84:	e0bd      	b.n	1000ce02 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000cc86:	4a60      	ldr	r2, [pc, #384]	; (1000ce08 <system_clock_peripheral_disable+0x30c>)
1000cc88:	6913      	ldr	r3, [r2, #16]
1000cc8a:	2101      	movs	r1, #1
1000cc8c:	438b      	bics	r3, r1
1000cc8e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cc90:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE0_CLK_EN;
		break;
1000cc92:	e0b6      	b.n	1000ce02 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000cc94:	4a5c      	ldr	r2, [pc, #368]	; (1000ce08 <system_clock_peripheral_disable+0x30c>)
1000cc96:	6913      	ldr	r3, [r2, #16]
1000cc98:	2102      	movs	r1, #2
1000cc9a:	438b      	bics	r3, r1
1000cc9c:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cc9e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE1_CLK_EN;
		break;
1000cca0:	e0af      	b.n	1000ce02 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000cca2:	4a59      	ldr	r2, [pc, #356]	; (1000ce08 <system_clock_peripheral_disable+0x30c>)
1000cca4:	6913      	ldr	r3, [r2, #16]
1000cca6:	2104      	movs	r1, #4
1000cca8:	438b      	bics	r3, r1
1000ccaa:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ccac:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE2_CLK_EN;
		break;
1000ccae:	e0a8      	b.n	1000ce02 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000ccb0:	4a55      	ldr	r2, [pc, #340]	; (1000ce08 <system_clock_peripheral_disable+0x30c>)
1000ccb2:	6913      	ldr	r3, [r2, #16]
1000ccb4:	2108      	movs	r1, #8
1000ccb6:	438b      	bics	r3, r1
1000ccb8:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ccba:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE3_CLK_EN;
		break;
1000ccbc:	e0a1      	b.n	1000ce02 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000ccbe:	4a52      	ldr	r2, [pc, #328]	; (1000ce08 <system_clock_peripheral_disable+0x30c>)
1000ccc0:	6913      	ldr	r3, [r2, #16]
1000ccc2:	2110      	movs	r1, #16
1000ccc4:	438b      	bics	r3, r1
1000ccc6:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ccc8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE4_CLK_EN;
		break;
1000ccca:	e09a      	b.n	1000ce02 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000cccc:	4a4e      	ldr	r2, [pc, #312]	; (1000ce08 <system_clock_peripheral_disable+0x30c>)
1000ccce:	6913      	ldr	r3, [r2, #16]
1000ccd0:	2120      	movs	r1, #32
1000ccd2:	438b      	bics	r3, r1
1000ccd4:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ccd6:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE5_CLK_EN;
		break;
1000ccd8:	e093      	b.n	1000ce02 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000ccda:	4a4b      	ldr	r2, [pc, #300]	; (1000ce08 <system_clock_peripheral_disable+0x30c>)
1000ccdc:	6913      	ldr	r3, [r2, #16]
1000ccde:	2140      	movs	r1, #64	; 0x40
1000cce0:	438b      	bics	r3, r1
1000cce2:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cce4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM0_CLK_EN;
		break;
1000cce6:	e08c      	b.n	1000ce02 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000cce8:	4a47      	ldr	r2, [pc, #284]	; (1000ce08 <system_clock_peripheral_disable+0x30c>)
1000ccea:	6913      	ldr	r3, [r2, #16]
1000ccec:	2180      	movs	r1, #128	; 0x80
1000ccee:	438b      	bics	r3, r1
1000ccf0:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ccf2:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM1_CLK_EN;
		break;
1000ccf4:	e085      	b.n	1000ce02 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000ccf6:	4a44      	ldr	r2, [pc, #272]	; (1000ce08 <system_clock_peripheral_disable+0x30c>)
1000ccf8:	6911      	ldr	r1, [r2, #16]
1000ccfa:	4b44      	ldr	r3, [pc, #272]	; (1000ce0c <system_clock_peripheral_disable+0x310>)
1000ccfc:	400b      	ands	r3, r1
1000ccfe:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cd00:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM2_CLK_EN;
		break;
1000cd02:	e07e      	b.n	1000ce02 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000cd04:	4a40      	ldr	r2, [pc, #256]	; (1000ce08 <system_clock_peripheral_disable+0x30c>)
1000cd06:	6911      	ldr	r1, [r2, #16]
1000cd08:	4b55      	ldr	r3, [pc, #340]	; (1000ce60 <system_clock_peripheral_disable+0x364>)
1000cd0a:	400b      	ands	r3, r1
1000cd0c:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cd0e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM3_CLK_EN;
		break;
1000cd10:	e077      	b.n	1000ce02 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000cd12:	4a3d      	ldr	r2, [pc, #244]	; (1000ce08 <system_clock_peripheral_disable+0x30c>)
1000cd14:	6911      	ldr	r1, [r2, #16]
1000cd16:	4b53      	ldr	r3, [pc, #332]	; (1000ce64 <system_clock_peripheral_disable+0x368>)
1000cd18:	400b      	ands	r3, r1
1000cd1a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cd1c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SENS_ADC_CLK_EN;
		break;
1000cd1e:	e070      	b.n	1000ce02 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000cd20:	4a39      	ldr	r2, [pc, #228]	; (1000ce08 <system_clock_peripheral_disable+0x30c>)
1000cd22:	6911      	ldr	r1, [r2, #16]
1000cd24:	4b3a      	ldr	r3, [pc, #232]	; (1000ce10 <system_clock_peripheral_disable+0x314>)
1000cd26:	400b      	ands	r3, r1
1000cd28:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cd2a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI0_SCK_PHASE_INT_CLK_EN;
		break;
1000cd2c:	e069      	b.n	1000ce02 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000cd2e:	4a36      	ldr	r2, [pc, #216]	; (1000ce08 <system_clock_peripheral_disable+0x30c>)
1000cd30:	6911      	ldr	r1, [r2, #16]
1000cd32:	4b38      	ldr	r3, [pc, #224]	; (1000ce14 <system_clock_peripheral_disable+0x318>)
1000cd34:	400b      	ands	r3, r1
1000cd36:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cd38:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI1_SCK_PHASE_INT_CLK_EN;
		break;
1000cd3a:	e062      	b.n	1000ce02 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000cd3c:	4a32      	ldr	r2, [pc, #200]	; (1000ce08 <system_clock_peripheral_disable+0x30c>)
1000cd3e:	6911      	ldr	r1, [r2, #16]
1000cd40:	4b35      	ldr	r3, [pc, #212]	; (1000ce18 <system_clock_peripheral_disable+0x31c>)
1000cd42:	400b      	ands	r3, r1
1000cd44:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cd46:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_GPIO_GCLK_EN;
		break;
1000cd48:	e05b      	b.n	1000ce02 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000cd4a:	4a2f      	ldr	r2, [pc, #188]	; (1000ce08 <system_clock_peripheral_disable+0x30c>)
1000cd4c:	6911      	ldr	r1, [r2, #16]
1000cd4e:	4b33      	ldr	r3, [pc, #204]	; (1000ce1c <system_clock_peripheral_disable+0x320>)
1000cd50:	400b      	ands	r3, r1
1000cd52:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cd54:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_TIMER0_PGCLK_EN;
		break;
1000cd56:	e054      	b.n	1000ce02 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000cd58:	4a2b      	ldr	r2, [pc, #172]	; (1000ce08 <system_clock_peripheral_disable+0x30c>)
1000cd5a:	6911      	ldr	r1, [r2, #16]
1000cd5c:	4b30      	ldr	r3, [pc, #192]	; (1000ce20 <system_clock_peripheral_disable+0x324>)
1000cd5e:	400b      	ands	r3, r1
1000cd60:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cd62:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_CORE_CLK_EN;
		break;
1000cd64:	e04d      	b.n	1000ce02 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000cd66:	4a28      	ldr	r2, [pc, #160]	; (1000ce08 <system_clock_peripheral_disable+0x30c>)
1000cd68:	6911      	ldr	r1, [r2, #16]
1000cd6a:	4b2e      	ldr	r3, [pc, #184]	; (1000ce24 <system_clock_peripheral_disable+0x328>)
1000cd6c:	400b      	ands	r3, r1
1000cd6e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cd70:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_AHB_CLK_EN;
		break;
1000cd72:	e046      	b.n	1000ce02 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000cd74:	4a24      	ldr	r2, [pc, #144]	; (1000ce08 <system_clock_peripheral_disable+0x30c>)
1000cd76:	6911      	ldr	r1, [r2, #16]
1000cd78:	4b2b      	ldr	r3, [pc, #172]	; (1000ce28 <system_clock_peripheral_disable+0x32c>)
1000cd7a:	400b      	ands	r3, r1
1000cd7c:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cd7e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_CORE_CLK_EN;
		break;
1000cd80:	e03f      	b.n	1000ce02 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000cd82:	4a21      	ldr	r2, [pc, #132]	; (1000ce08 <system_clock_peripheral_disable+0x30c>)
1000cd84:	6911      	ldr	r1, [r2, #16]
1000cd86:	4b29      	ldr	r3, [pc, #164]	; (1000ce2c <system_clock_peripheral_disable+0x330>)
1000cd88:	400b      	ands	r3, r1
1000cd8a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cd8c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_AHB_CLK_EN;
		break;
1000cd8e:	e038      	b.n	1000ce02 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000cd90:	4a1d      	ldr	r2, [pc, #116]	; (1000ce08 <system_clock_peripheral_disable+0x30c>)
1000cd92:	6911      	ldr	r1, [r2, #16]
1000cd94:	4b26      	ldr	r3, [pc, #152]	; (1000ce30 <system_clock_peripheral_disable+0x334>)
1000cd96:	400b      	ands	r3, r1
1000cd98:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cd9a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_0_MEM_CLK_EN;
		break;
1000cd9c:	e031      	b.n	1000ce02 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000cd9e:	4a1a      	ldr	r2, [pc, #104]	; (1000ce08 <system_clock_peripheral_disable+0x30c>)
1000cda0:	6911      	ldr	r1, [r2, #16]
1000cda2:	4b24      	ldr	r3, [pc, #144]	; (1000ce34 <system_clock_peripheral_disable+0x338>)
1000cda4:	400b      	ands	r3, r1
1000cda6:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cda8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_1_MEM_CLK_EN;
		break;
1000cdaa:	e02a      	b.n	1000ce02 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000cdac:	4a16      	ldr	r2, [pc, #88]	; (1000ce08 <system_clock_peripheral_disable+0x30c>)
1000cdae:	6911      	ldr	r1, [r2, #16]
1000cdb0:	4b21      	ldr	r3, [pc, #132]	; (1000ce38 <system_clock_peripheral_disable+0x33c>)
1000cdb2:	400b      	ands	r3, r1
1000cdb4:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cdb6:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_2_MEM_CLK_EN;
		break;
1000cdb8:	e023      	b.n	1000ce02 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000cdba:	4a13      	ldr	r2, [pc, #76]	; (1000ce08 <system_clock_peripheral_disable+0x30c>)
1000cdbc:	6911      	ldr	r1, [r2, #16]
1000cdbe:	4b1f      	ldr	r3, [pc, #124]	; (1000ce3c <system_clock_peripheral_disable+0x340>)
1000cdc0:	400b      	ands	r3, r1
1000cdc2:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cdc4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_0_MEM_CLK_EN;
		break;
1000cdc6:	e01c      	b.n	1000ce02 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000cdc8:	4a0f      	ldr	r2, [pc, #60]	; (1000ce08 <system_clock_peripheral_disable+0x30c>)
1000cdca:	6911      	ldr	r1, [r2, #16]
1000cdcc:	4b1c      	ldr	r3, [pc, #112]	; (1000ce40 <system_clock_peripheral_disable+0x344>)
1000cdce:	400b      	ands	r3, r1
1000cdd0:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cdd2:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_1_MEM_CLK_EN;
		break;
1000cdd4:	e015      	b.n	1000ce02 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
1000cdd6:	4a0c      	ldr	r2, [pc, #48]	; (1000ce08 <system_clock_peripheral_disable+0x30c>)
1000cdd8:	7d13      	ldrb	r3, [r2, #20]
1000cdda:	2101      	movs	r1, #1
1000cddc:	438b      	bics	r3, r1
1000cdde:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cde0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
				~LPMCU_MISC_REGS_BTMCU_CTRL_RXTX_SEQ_CLK_EN;
		break;
1000cde2:	e00e      	b.n	1000ce02 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
1000cde4:	4a08      	ldr	r2, [pc, #32]	; (1000ce08 <system_clock_peripheral_disable+0x30c>)
1000cde6:	7d13      	ldrb	r3, [r2, #20]
1000cde8:	2102      	movs	r1, #2
1000cdea:	438b      	bics	r3, r1
1000cdec:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cdee:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
				~LPMCU_MISC_REGS_BTMCU_CTRL_AHB_CLK_EN;
		break;
1000cdf0:	e007      	b.n	1000ce02 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
1000cdf2:	4a05      	ldr	r2, [pc, #20]	; (1000ce08 <system_clock_peripheral_disable+0x30c>)
1000cdf4:	7d13      	ldrb	r3, [r2, #20]
1000cdf6:	2104      	movs	r1, #4
1000cdf8:	438b      	bics	r3, r1
1000cdfa:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cdfc:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
				~LPMCU_MISC_REGS_BTMCU_CTRL_PERIPH_REGS_CLK_EN;
		break;
1000cdfe:	e000      	b.n	1000ce02 <system_clock_peripheral_disable+0x306>

		default:
			return STATUS_ERR_INVALID_ARG;
1000ce00:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
1000ce02:	bd00      	pop	{pc}
1000ce04:	100173a0 	.word	0x100173a0
1000ce08:	4000b000 	.word	0x4000b000
1000ce0c:	fffffeff 	.word	0xfffffeff
1000ce10:	fffff7ff 	.word	0xfffff7ff
1000ce14:	ffffefff 	.word	0xffffefff
1000ce18:	ffffdfff 	.word	0xffffdfff
1000ce1c:	ffffbfff 	.word	0xffffbfff
1000ce20:	ffff7fff 	.word	0xffff7fff
1000ce24:	fffeffff 	.word	0xfffeffff
1000ce28:	fffdffff 	.word	0xfffdffff
1000ce2c:	fffbffff 	.word	0xfffbffff
1000ce30:	fff7ffff 	.word	0xfff7ffff
1000ce34:	ffefffff 	.word	0xffefffff
1000ce38:	ffdfffff 	.word	0xffdfffff
1000ce3c:	ffbfffff 	.word	0xffbfffff
1000ce40:	ff7fffff 	.word	0xff7fffff
1000ce44:	feffffff 	.word	0xfeffffff
1000ce48:	fdffffff 	.word	0xfdffffff
1000ce4c:	fbffffff 	.word	0xfbffffff
1000ce50:	f7ffffff 	.word	0xf7ffffff
1000ce54:	efffffff 	.word	0xefffffff
1000ce58:	dfffffff 	.word	0xdfffffff
1000ce5c:	bfffffff 	.word	0xbfffffff
1000ce60:	fffffdff 	.word	0xfffffdff
1000ce64:	fffffbff 	.word	0xfffffbff

1000ce68 <system_peripheral_reset>:
 * \return Status of operation.
 * \retval STATUS_OK               Clock config correctly
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_peripheral_reset(enum system_peripheral peripheral)
{
1000ce68:	b500      	push	{lr}
	switch (peripheral) {
1000ce6a:	2843      	cmp	r0, #67	; 0x43
1000ce6c:	d900      	bls.n	1000ce70 <system_peripheral_reset+0x8>
1000ce6e:	e223      	b.n	1000d2b8 <system_peripheral_reset+0x450>
1000ce70:	0080      	lsls	r0, r0, #2
1000ce72:	4be0      	ldr	r3, [pc, #896]	; (1000d1f4 <system_peripheral_reset+0x38c>)
1000ce74:	581b      	ldr	r3, [r3, r0]
1000ce76:	469f      	mov	pc, r3
		case PERIPHERAL_LPMCU_CPU:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000ce78:	4bdf      	ldr	r3, [pc, #892]	; (1000d1f8 <system_peripheral_reset+0x390>)
1000ce7a:	6859      	ldr	r1, [r3, #4]
1000ce7c:	2202      	movs	r2, #2
1000ce7e:	4391      	bics	r1, r2
1000ce80:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000ce82:	6859      	ldr	r1, [r3, #4]
1000ce84:	430a      	orrs	r2, r1
1000ce86:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ce88:	2000      	movs	r0, #0
		case PERIPHERAL_LPMCU_CPU:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN;
		break;
1000ce8a:	e216      	b.n	1000d2ba <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000ce8c:	4bda      	ldr	r3, [pc, #872]	; (1000d1f8 <system_peripheral_reset+0x390>)
1000ce8e:	6859      	ldr	r1, [r3, #4]
1000ce90:	2204      	movs	r2, #4
1000ce92:	4391      	bics	r1, r2
1000ce94:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_SYS_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000ce96:	6859      	ldr	r1, [r3, #4]
1000ce98:	430a      	orrs	r2, r1
1000ce9a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ce9c:	2000      	movs	r0, #0
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_SYS_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_SYS_RSTN;
		break;
1000ce9e:	e20c      	b.n	1000d2ba <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI_FLASH_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cea0:	4bd5      	ldr	r3, [pc, #852]	; (1000d1f8 <system_peripheral_reset+0x390>)
1000cea2:	6859      	ldr	r1, [r3, #4]
1000cea4:	2208      	movs	r2, #8
1000cea6:	4391      	bics	r1, r2
1000cea8:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000ceaa:	6859      	ldr	r1, [r3, #4]
1000ceac:	430a      	orrs	r2, r1
1000ceae:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ceb0:	2000      	movs	r0, #0
		case PERIPHERAL_SPI_FLASH_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_RSTN;
		break;
1000ceb2:	e202      	b.n	1000d2ba <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000ceb4:	4bd0      	ldr	r3, [pc, #832]	; (1000d1f8 <system_peripheral_reset+0x390>)
1000ceb6:	6859      	ldr	r1, [r3, #4]
1000ceb8:	2210      	movs	r2, #16
1000ceba:	4391      	bics	r1, r2
1000cebc:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cebe:	6859      	ldr	r1, [r3, #4]
1000cec0:	430a      	orrs	r2, r1
1000cec2:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cec4:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_CORE_RSTN;
		break;
1000cec6:	e1f8      	b.n	1000d2ba <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cec8:	4bcb      	ldr	r3, [pc, #812]	; (1000d1f8 <system_peripheral_reset+0x390>)
1000ceca:	6859      	ldr	r1, [r3, #4]
1000cecc:	2220      	movs	r2, #32
1000cece:	4391      	bics	r1, r2
1000ced0:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000ced2:	6859      	ldr	r1, [r3, #4]
1000ced4:	430a      	orrs	r2, r1
1000ced6:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ced8:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_IF_RSTN;
		break;
1000ceda:	e1ee      	b.n	1000d2ba <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cedc:	4bc6      	ldr	r3, [pc, #792]	; (1000d1f8 <system_peripheral_reset+0x390>)
1000cede:	6859      	ldr	r1, [r3, #4]
1000cee0:	2240      	movs	r2, #64	; 0x40
1000cee2:	4391      	bics	r1, r2
1000cee4:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_CORE_RESETN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cee6:	6859      	ldr	r1, [r3, #4]
1000cee8:	430a      	orrs	r2, r1
1000ceea:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ceec:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_CORE_RESETN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_CORE_RESETN;
		break;
1000ceee:	e1e4      	b.n	1000d2ba <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cef0:	4bc1      	ldr	r3, [pc, #772]	; (1000d1f8 <system_peripheral_reset+0x390>)
1000cef2:	6859      	ldr	r1, [r3, #4]
1000cef4:	2280      	movs	r2, #128	; 0x80
1000cef6:	4391      	bics	r1, r2
1000cef8:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cefa:	6859      	ldr	r1, [r3, #4]
1000cefc:	430a      	orrs	r2, r1
1000cefe:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cf00:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_IF_RSTN;
		break;
1000cf02:	e1da      	b.n	1000d2ba <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cf04:	4bbc      	ldr	r3, [pc, #752]	; (1000d1f8 <system_peripheral_reset+0x390>)
1000cf06:	6859      	ldr	r1, [r3, #4]
1000cf08:	4abc      	ldr	r2, [pc, #752]	; (1000d1fc <system_peripheral_reset+0x394>)
1000cf0a:	400a      	ands	r2, r1
1000cf0c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cf0e:	685a      	ldr	r2, [r3, #4]
1000cf10:	2180      	movs	r1, #128	; 0x80
1000cf12:	0049      	lsls	r1, r1, #1
1000cf14:	430a      	orrs	r2, r1
1000cf16:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cf18:	2000      	movs	r0, #0
		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_CORE_RSTN;
		break;
1000cf1a:	e1ce      	b.n	1000d2ba <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cf1c:	4bb6      	ldr	r3, [pc, #728]	; (1000d1f8 <system_peripheral_reset+0x390>)
1000cf1e:	6859      	ldr	r1, [r3, #4]
1000cf20:	4ab7      	ldr	r2, [pc, #732]	; (1000d200 <system_peripheral_reset+0x398>)
1000cf22:	400a      	ands	r2, r1
1000cf24:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cf26:	685a      	ldr	r2, [r3, #4]
1000cf28:	2180      	movs	r1, #128	; 0x80
1000cf2a:	0089      	lsls	r1, r1, #2
1000cf2c:	430a      	orrs	r2, r1
1000cf2e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cf30:	2000      	movs	r0, #0
		case PERIPHERAL_I2C0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_IF_RSTN;
		break;
1000cf32:	e1c2      	b.n	1000d2ba <system_peripheral_reset+0x452>

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cf34:	4bb0      	ldr	r3, [pc, #704]	; (1000d1f8 <system_peripheral_reset+0x390>)
1000cf36:	6859      	ldr	r1, [r3, #4]
1000cf38:	4ab2      	ldr	r2, [pc, #712]	; (1000d204 <system_peripheral_reset+0x39c>)
1000cf3a:	400a      	ands	r2, r1
1000cf3c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cf3e:	685a      	ldr	r2, [r3, #4]
1000cf40:	2180      	movs	r1, #128	; 0x80
1000cf42:	00c9      	lsls	r1, r1, #3
1000cf44:	430a      	orrs	r2, r1
1000cf46:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cf48:	2000      	movs	r0, #0
		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
		break;
1000cf4a:	e1b6      	b.n	1000d2ba <system_peripheral_reset+0x452>

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cf4c:	4baa      	ldr	r3, [pc, #680]	; (1000d1f8 <system_peripheral_reset+0x390>)
1000cf4e:	6859      	ldr	r1, [r3, #4]
1000cf50:	4aad      	ldr	r2, [pc, #692]	; (1000d208 <system_peripheral_reset+0x3a0>)
1000cf52:	400a      	ands	r2, r1
1000cf54:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_TIMER0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cf56:	685a      	ldr	r2, [r3, #4]
1000cf58:	2180      	movs	r1, #128	; 0x80
1000cf5a:	0109      	lsls	r1, r1, #4
1000cf5c:	430a      	orrs	r2, r1
1000cf5e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cf60:	2000      	movs	r0, #0
		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_TIMER0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_TIMER0_RSTN;
		break;
1000cf62:	e1aa      	b.n	1000d2ba <system_peripheral_reset+0x452>

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cf64:	4ba4      	ldr	r3, [pc, #656]	; (1000d1f8 <system_peripheral_reset+0x390>)
1000cf66:	6859      	ldr	r1, [r3, #4]
1000cf68:	4aa8      	ldr	r2, [pc, #672]	; (1000d20c <system_peripheral_reset+0x3a4>)
1000cf6a:	400a      	ands	r2, r1
1000cf6c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cf6e:	685a      	ldr	r2, [r3, #4]
1000cf70:	2180      	movs	r1, #128	; 0x80
1000cf72:	0149      	lsls	r1, r1, #5
1000cf74:	430a      	orrs	r2, r1
1000cf76:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cf78:	2000      	movs	r0, #0
		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_CORE_RSTN;
		break;
1000cf7a:	e19e      	b.n	1000d2ba <system_peripheral_reset+0x452>

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cf7c:	4b9e      	ldr	r3, [pc, #632]	; (1000d1f8 <system_peripheral_reset+0x390>)
1000cf7e:	6859      	ldr	r1, [r3, #4]
1000cf80:	4aa3      	ldr	r2, [pc, #652]	; (1000d210 <system_peripheral_reset+0x3a8>)
1000cf82:	400a      	ands	r2, r1
1000cf84:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cf86:	685a      	ldr	r2, [r3, #4]
1000cf88:	2180      	movs	r1, #128	; 0x80
1000cf8a:	0189      	lsls	r1, r1, #6
1000cf8c:	430a      	orrs	r2, r1
1000cf8e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cf90:	2000      	movs	r0, #0
		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_IF_RSTN;
		break;
1000cf92:	e192      	b.n	1000d2ba <system_peripheral_reset+0x452>

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cf94:	4b98      	ldr	r3, [pc, #608]	; (1000d1f8 <system_peripheral_reset+0x390>)
1000cf96:	6859      	ldr	r1, [r3, #4]
1000cf98:	4a9e      	ldr	r2, [pc, #632]	; (1000d214 <system_peripheral_reset+0x3ac>)
1000cf9a:	400a      	ands	r2, r1
1000cf9c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cf9e:	685a      	ldr	r2, [r3, #4]
1000cfa0:	2180      	movs	r1, #128	; 0x80
1000cfa2:	01c9      	lsls	r1, r1, #7
1000cfa4:	430a      	orrs	r2, r1
1000cfa6:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cfa8:	2000      	movs	r0, #0
		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_CORE_RSTN;
		break;
1000cfaa:	e186      	b.n	1000d2ba <system_peripheral_reset+0x452>

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cfac:	4b92      	ldr	r3, [pc, #584]	; (1000d1f8 <system_peripheral_reset+0x390>)
1000cfae:	6859      	ldr	r1, [r3, #4]
1000cfb0:	4a99      	ldr	r2, [pc, #612]	; (1000d218 <system_peripheral_reset+0x3b0>)
1000cfb2:	400a      	ands	r2, r1
1000cfb4:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cfb6:	685a      	ldr	r2, [r3, #4]
1000cfb8:	2180      	movs	r1, #128	; 0x80
1000cfba:	0209      	lsls	r1, r1, #8
1000cfbc:	430a      	orrs	r2, r1
1000cfbe:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cfc0:	2000      	movs	r0, #0
		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_IF_RSTN;
		break;
1000cfc2:	e17a      	b.n	1000d2ba <system_peripheral_reset+0x452>

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cfc4:	4b8c      	ldr	r3, [pc, #560]	; (1000d1f8 <system_peripheral_reset+0x390>)
1000cfc6:	6859      	ldr	r1, [r3, #4]
1000cfc8:	4a94      	ldr	r2, [pc, #592]	; (1000d21c <system_peripheral_reset+0x3b4>)
1000cfca:	400a      	ands	r2, r1
1000cfcc:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cfce:	685a      	ldr	r2, [r3, #4]
1000cfd0:	2180      	movs	r1, #128	; 0x80
1000cfd2:	0249      	lsls	r1, r1, #9
1000cfd4:	430a      	orrs	r2, r1
1000cfd6:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cfd8:	2000      	movs	r0, #0
		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT0_RSTN;
		break;
1000cfda:	e16e      	b.n	1000d2ba <system_peripheral_reset+0x452>

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cfdc:	4b86      	ldr	r3, [pc, #536]	; (1000d1f8 <system_peripheral_reset+0x390>)
1000cfde:	6859      	ldr	r1, [r3, #4]
1000cfe0:	4a8f      	ldr	r2, [pc, #572]	; (1000d220 <system_peripheral_reset+0x3b8>)
1000cfe2:	400a      	ands	r2, r1
1000cfe4:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cfe6:	685a      	ldr	r2, [r3, #4]
1000cfe8:	2180      	movs	r1, #128	; 0x80
1000cfea:	0289      	lsls	r1, r1, #10
1000cfec:	430a      	orrs	r2, r1
1000cfee:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cff0:	2000      	movs	r0, #0
		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT1_RSTN;
		break;
1000cff2:	e162      	b.n	1000d2ba <system_peripheral_reset+0x452>

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cff4:	4b80      	ldr	r3, [pc, #512]	; (1000d1f8 <system_peripheral_reset+0x390>)
1000cff6:	6859      	ldr	r1, [r3, #4]
1000cff8:	4a8a      	ldr	r2, [pc, #552]	; (1000d224 <system_peripheral_reset+0x3bc>)
1000cffa:	400a      	ands	r2, r1
1000cffc:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cffe:	685a      	ldr	r2, [r3, #4]
1000d000:	2180      	movs	r1, #128	; 0x80
1000d002:	02c9      	lsls	r1, r1, #11
1000d004:	430a      	orrs	r2, r1
1000d006:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d008:	2000      	movs	r0, #0
		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
		break;
1000d00a:	e156      	b.n	1000d2ba <system_peripheral_reset+0x452>

		case PERIPHERAL_MBIST:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000d00c:	4b7a      	ldr	r3, [pc, #488]	; (1000d1f8 <system_peripheral_reset+0x390>)
1000d00e:	6859      	ldr	r1, [r3, #4]
1000d010:	4a85      	ldr	r2, [pc, #532]	; (1000d228 <system_peripheral_reset+0x3c0>)
1000d012:	400a      	ands	r2, r1
1000d014:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000d016:	685a      	ldr	r2, [r3, #4]
1000d018:	2180      	movs	r1, #128	; 0x80
1000d01a:	0309      	lsls	r1, r1, #12
1000d01c:	430a      	orrs	r2, r1
1000d01e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d020:	2000      	movs	r0, #0
		case PERIPHERAL_MBIST:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
		break;
1000d022:	e14a      	b.n	1000d2ba <system_peripheral_reset+0x452>

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000d024:	4b74      	ldr	r3, [pc, #464]	; (1000d1f8 <system_peripheral_reset+0x390>)
1000d026:	6859      	ldr	r1, [r3, #4]
1000d028:	4a80      	ldr	r2, [pc, #512]	; (1000d22c <system_peripheral_reset+0x3c4>)
1000d02a:	400a      	ands	r2, r1
1000d02c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000d02e:	685a      	ldr	r2, [r3, #4]
1000d030:	2180      	movs	r1, #128	; 0x80
1000d032:	0349      	lsls	r1, r1, #13
1000d034:	430a      	orrs	r2, r1
1000d036:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d038:	2000      	movs	r0, #0
		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
		break;
1000d03a:	e13e      	b.n	1000d2ba <system_peripheral_reset+0x452>

		case PERIPHERAL_LOW_POWER_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000d03c:	4b6e      	ldr	r3, [pc, #440]	; (1000d1f8 <system_peripheral_reset+0x390>)
1000d03e:	6859      	ldr	r1, [r3, #4]
1000d040:	4a7b      	ldr	r2, [pc, #492]	; (1000d230 <system_peripheral_reset+0x3c8>)
1000d042:	400a      	ands	r2, r1
1000d044:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000d046:	685a      	ldr	r2, [r3, #4]
1000d048:	2180      	movs	r1, #128	; 0x80
1000d04a:	0389      	lsls	r1, r1, #14
1000d04c:	430a      	orrs	r2, r1
1000d04e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d050:	2000      	movs	r0, #0
		case PERIPHERAL_LOW_POWER_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
		break;
1000d052:	e132      	b.n	1000d2ba <system_peripheral_reset+0x452>

		case PERIPHERAL_LPMCU_DEBUG:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000d054:	4b68      	ldr	r3, [pc, #416]	; (1000d1f8 <system_peripheral_reset+0x390>)
1000d056:	6859      	ldr	r1, [r3, #4]
1000d058:	4a76      	ldr	r2, [pc, #472]	; (1000d234 <system_peripheral_reset+0x3cc>)
1000d05a:	400a      	ands	r2, r1
1000d05c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000d05e:	685a      	ldr	r2, [r3, #4]
1000d060:	2180      	movs	r1, #128	; 0x80
1000d062:	03c9      	lsls	r1, r1, #15
1000d064:	430a      	orrs	r2, r1
1000d066:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d068:	2000      	movs	r0, #0
		case PERIPHERAL_LPMCU_DEBUG:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
		break;
1000d06a:	e126      	b.n	1000d2ba <system_peripheral_reset+0x452>

		case PERIPHERAL_ARM_FREE_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000d06c:	4b62      	ldr	r3, [pc, #392]	; (1000d1f8 <system_peripheral_reset+0x390>)
1000d06e:	6859      	ldr	r1, [r3, #4]
1000d070:	4a71      	ldr	r2, [pc, #452]	; (1000d238 <system_peripheral_reset+0x3d0>)
1000d072:	400a      	ands	r2, r1
1000d074:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000d076:	685a      	ldr	r2, [r3, #4]
1000d078:	2180      	movs	r1, #128	; 0x80
1000d07a:	0409      	lsls	r1, r1, #16
1000d07c:	430a      	orrs	r2, r1
1000d07e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d080:	2000      	movs	r0, #0
		case PERIPHERAL_ARM_FREE_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
		break;
1000d082:	e11a      	b.n	1000d2ba <system_peripheral_reset+0x452>

		case PERIPHERAL_ARM_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000d084:	4b5c      	ldr	r3, [pc, #368]	; (1000d1f8 <system_peripheral_reset+0x390>)
1000d086:	6859      	ldr	r1, [r3, #4]
1000d088:	4a6c      	ldr	r2, [pc, #432]	; (1000d23c <system_peripheral_reset+0x3d4>)
1000d08a:	400a      	ands	r2, r1
1000d08c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000d08e:	685a      	ldr	r2, [r3, #4]
1000d090:	2180      	movs	r1, #128	; 0x80
1000d092:	0449      	lsls	r1, r1, #17
1000d094:	430a      	orrs	r2, r1
1000d096:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d098:	2000      	movs	r0, #0
		case PERIPHERAL_ARM_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
		break;
1000d09a:	e10e      	b.n	1000d2ba <system_peripheral_reset+0x452>

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000d09c:	4b56      	ldr	r3, [pc, #344]	; (1000d1f8 <system_peripheral_reset+0x390>)
1000d09e:	6859      	ldr	r1, [r3, #4]
1000d0a0:	4a67      	ldr	r2, [pc, #412]	; (1000d240 <system_peripheral_reset+0x3d8>)
1000d0a2:	400a      	ands	r2, r1
1000d0a4:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000d0a6:	685a      	ldr	r2, [r3, #4]
1000d0a8:	2180      	movs	r1, #128	; 0x80
1000d0aa:	0489      	lsls	r1, r1, #18
1000d0ac:	430a      	orrs	r2, r1
1000d0ae:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d0b0:	2000      	movs	r0, #0
		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC0_RSTN;
		break;
1000d0b2:	e102      	b.n	1000d2ba <system_peripheral_reset+0x452>

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000d0b4:	4b50      	ldr	r3, [pc, #320]	; (1000d1f8 <system_peripheral_reset+0x390>)
1000d0b6:	6859      	ldr	r1, [r3, #4]
1000d0b8:	4a62      	ldr	r2, [pc, #392]	; (1000d244 <system_peripheral_reset+0x3dc>)
1000d0ba:	400a      	ands	r2, r1
1000d0bc:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000d0be:	685a      	ldr	r2, [r3, #4]
1000d0c0:	2180      	movs	r1, #128	; 0x80
1000d0c2:	04c9      	lsls	r1, r1, #19
1000d0c4:	430a      	orrs	r2, r1
1000d0c6:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d0c8:	2000      	movs	r0, #0
		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC1_RSTN;
		break;
1000d0ca:	e0f6      	b.n	1000d2ba <system_peripheral_reset+0x452>

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000d0cc:	4b4a      	ldr	r3, [pc, #296]	; (1000d1f8 <system_peripheral_reset+0x390>)
1000d0ce:	6859      	ldr	r1, [r3, #4]
1000d0d0:	4a5d      	ldr	r2, [pc, #372]	; (1000d248 <system_peripheral_reset+0x3e0>)
1000d0d2:	400a      	ands	r2, r1
1000d0d4:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000d0d6:	685a      	ldr	r2, [r3, #4]
1000d0d8:	2180      	movs	r1, #128	; 0x80
1000d0da:	0509      	lsls	r1, r1, #20
1000d0dc:	430a      	orrs	r2, r1
1000d0de:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d0e0:	2000      	movs	r0, #0
		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC2_RSTN;
		break;
1000d0e2:	e0ea      	b.n	1000d2ba <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000d0e4:	4b44      	ldr	r3, [pc, #272]	; (1000d1f8 <system_peripheral_reset+0x390>)
1000d0e6:	6859      	ldr	r1, [r3, #4]
1000d0e8:	4a58      	ldr	r2, [pc, #352]	; (1000d24c <system_peripheral_reset+0x3e4>)
1000d0ea:	400a      	ands	r2, r1
1000d0ec:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000d0ee:	685a      	ldr	r2, [r3, #4]
1000d0f0:	2180      	movs	r1, #128	; 0x80
1000d0f2:	0549      	lsls	r1, r1, #21
1000d0f4:	430a      	orrs	r2, r1
1000d0f6:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d0f8:	2000      	movs	r0, #0
		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM0_RSTN;
		break;
1000d0fa:	e0de      	b.n	1000d2ba <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000d0fc:	4b3e      	ldr	r3, [pc, #248]	; (1000d1f8 <system_peripheral_reset+0x390>)
1000d0fe:	6859      	ldr	r1, [r3, #4]
1000d100:	4a53      	ldr	r2, [pc, #332]	; (1000d250 <system_peripheral_reset+0x3e8>)
1000d102:	400a      	ands	r2, r1
1000d104:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000d106:	685a      	ldr	r2, [r3, #4]
1000d108:	2180      	movs	r1, #128	; 0x80
1000d10a:	0589      	lsls	r1, r1, #22
1000d10c:	430a      	orrs	r2, r1
1000d10e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d110:	2000      	movs	r0, #0
		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM1_RSTN;
		break;
1000d112:	e0d2      	b.n	1000d2ba <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000d114:	4b38      	ldr	r3, [pc, #224]	; (1000d1f8 <system_peripheral_reset+0x390>)
1000d116:	6859      	ldr	r1, [r3, #4]
1000d118:	4a4e      	ldr	r2, [pc, #312]	; (1000d254 <system_peripheral_reset+0x3ec>)
1000d11a:	400a      	ands	r2, r1
1000d11c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000d11e:	685a      	ldr	r2, [r3, #4]
1000d120:	2180      	movs	r1, #128	; 0x80
1000d122:	05c9      	lsls	r1, r1, #23
1000d124:	430a      	orrs	r2, r1
1000d126:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d128:	2000      	movs	r0, #0
		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM2_RSTN;
		break;
1000d12a:	e0c6      	b.n	1000d2ba <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000d12c:	4a32      	ldr	r2, [pc, #200]	; (1000d1f8 <system_peripheral_reset+0x390>)
1000d12e:	6853      	ldr	r3, [r2, #4]
1000d130:	005b      	lsls	r3, r3, #1
1000d132:	085b      	lsrs	r3, r3, #1
1000d134:	6053      	str	r3, [r2, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM3_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000d136:	6853      	ldr	r3, [r2, #4]
1000d138:	2180      	movs	r1, #128	; 0x80
1000d13a:	0609      	lsls	r1, r1, #24
1000d13c:	430b      	orrs	r3, r1
1000d13e:	6053      	str	r3, [r2, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d140:	2000      	movs	r0, #0
		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM3_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM3_RSTN;
		break;
1000d142:	e0ba      	b.n	1000d2ba <system_peripheral_reset+0x452>

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000d144:	4b2c      	ldr	r3, [pc, #176]	; (1000d1f8 <system_peripheral_reset+0x390>)
1000d146:	891a      	ldrh	r2, [r3, #8]
1000d148:	2101      	movs	r1, #1
1000d14a:	438a      	bics	r2, r1
1000d14c:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000d14e:	8919      	ldrh	r1, [r3, #8]
1000d150:	2201      	movs	r2, #1
1000d152:	430a      	orrs	r2, r1
1000d154:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d156:	2000      	movs	r0, #0
		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER0_RSTN;
		break;
1000d158:	e0af      	b.n	1000d2ba <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000d15a:	4b27      	ldr	r3, [pc, #156]	; (1000d1f8 <system_peripheral_reset+0x390>)
1000d15c:	891a      	ldrh	r2, [r3, #8]
1000d15e:	2102      	movs	r1, #2
1000d160:	438a      	bics	r2, r1
1000d162:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000d164:	8919      	ldrh	r1, [r3, #8]
1000d166:	2202      	movs	r2, #2
1000d168:	430a      	orrs	r2, r1
1000d16a:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d16c:	2000      	movs	r0, #0
		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_CORE_RSTN;
		break;
1000d16e:	e0a4      	b.n	1000d2ba <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000d170:	4b21      	ldr	r3, [pc, #132]	; (1000d1f8 <system_peripheral_reset+0x390>)
1000d172:	891a      	ldrh	r2, [r3, #8]
1000d174:	2104      	movs	r1, #4
1000d176:	438a      	bics	r2, r1
1000d178:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000d17a:	8919      	ldrh	r1, [r3, #8]
1000d17c:	2204      	movs	r2, #4
1000d17e:	430a      	orrs	r2, r1
1000d180:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d182:	2000      	movs	r0, #0
		case PERIPHERAL_I2C1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_IF_RSTN;
		break;
1000d184:	e099      	b.n	1000d2ba <system_peripheral_reset+0x452>

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000d186:	4b1c      	ldr	r3, [pc, #112]	; (1000d1f8 <system_peripheral_reset+0x390>)
1000d188:	891a      	ldrh	r2, [r3, #8]
1000d18a:	2108      	movs	r1, #8
1000d18c:	438a      	bics	r2, r1
1000d18e:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000d190:	8919      	ldrh	r1, [r3, #8]
1000d192:	2208      	movs	r2, #8
1000d194:	430a      	orrs	r2, r1
1000d196:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d198:	2000      	movs	r0, #0
		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
		break;
1000d19a:	e08e      	b.n	1000d2ba <system_peripheral_reset+0x452>

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000d19c:	4b16      	ldr	r3, [pc, #88]	; (1000d1f8 <system_peripheral_reset+0x390>)
1000d19e:	891a      	ldrh	r2, [r3, #8]
1000d1a0:	2110      	movs	r1, #16
1000d1a2:	438a      	bics	r2, r1
1000d1a4:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000d1a6:	8919      	ldrh	r1, [r3, #8]
1000d1a8:	2210      	movs	r2, #16
1000d1aa:	430a      	orrs	r2, r1
1000d1ac:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d1ae:	2000      	movs	r0, #0
		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
		break;
1000d1b0:	e083      	b.n	1000d2ba <system_peripheral_reset+0x452>

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000d1b2:	4b11      	ldr	r3, [pc, #68]	; (1000d1f8 <system_peripheral_reset+0x390>)
1000d1b4:	891a      	ldrh	r2, [r3, #8]
1000d1b6:	2120      	movs	r1, #32
1000d1b8:	438a      	bics	r2, r1
1000d1ba:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000d1bc:	8919      	ldrh	r1, [r3, #8]
1000d1be:	2220      	movs	r2, #32
1000d1c0:	430a      	orrs	r2, r1
1000d1c2:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d1c4:	2000      	movs	r0, #0
		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
		break;
1000d1c6:	e078      	b.n	1000d2ba <system_peripheral_reset+0x452>

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000d1c8:	4b0b      	ldr	r3, [pc, #44]	; (1000d1f8 <system_peripheral_reset+0x390>)
1000d1ca:	891a      	ldrh	r2, [r3, #8]
1000d1cc:	2140      	movs	r1, #64	; 0x40
1000d1ce:	438a      	bics	r2, r1
1000d1d0:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000d1d2:	8919      	ldrh	r1, [r3, #8]
1000d1d4:	2240      	movs	r2, #64	; 0x40
1000d1d6:	430a      	orrs	r2, r1
1000d1d8:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d1da:	2000      	movs	r0, #0
		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
		break;
1000d1dc:	e06d      	b.n	1000d2ba <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000d1de:	4b06      	ldr	r3, [pc, #24]	; (1000d1f8 <system_peripheral_reset+0x390>)
1000d1e0:	891a      	ldrh	r2, [r3, #8]
1000d1e2:	2180      	movs	r1, #128	; 0x80
1000d1e4:	438a      	bics	r2, r1
1000d1e6:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000d1e8:	8919      	ldrh	r1, [r3, #8]
1000d1ea:	2280      	movs	r2, #128	; 0x80
1000d1ec:	430a      	orrs	r2, r1
1000d1ee:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d1f0:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_CLK_RSTN;
		break;
1000d1f2:	e062      	b.n	1000d2ba <system_peripheral_reset+0x452>
1000d1f4:	10017478 	.word	0x10017478
1000d1f8:	4000b000 	.word	0x4000b000
1000d1fc:	fffffeff 	.word	0xfffffeff
1000d200:	fffffdff 	.word	0xfffffdff
1000d204:	fffffbff 	.word	0xfffffbff
1000d208:	fffff7ff 	.word	0xfffff7ff
1000d20c:	ffffefff 	.word	0xffffefff
1000d210:	ffffdfff 	.word	0xffffdfff
1000d214:	ffffbfff 	.word	0xffffbfff
1000d218:	ffff7fff 	.word	0xffff7fff
1000d21c:	fffeffff 	.word	0xfffeffff
1000d220:	fffdffff 	.word	0xfffdffff
1000d224:	fffbffff 	.word	0xfffbffff
1000d228:	fff7ffff 	.word	0xfff7ffff
1000d22c:	ffefffff 	.word	0xffefffff
1000d230:	ffdfffff 	.word	0xffdfffff
1000d234:	ffbfffff 	.word	0xffbfffff
1000d238:	ff7fffff 	.word	0xff7fffff
1000d23c:	feffffff 	.word	0xfeffffff
1000d240:	fdffffff 	.word	0xfdffffff
1000d244:	fbffffff 	.word	0xfbffffff
1000d248:	f7ffffff 	.word	0xf7ffffff
1000d24c:	efffffff 	.word	0xefffffff
1000d250:	dfffffff 	.word	0xdfffffff
1000d254:	bfffffff 	.word	0xbfffffff

		case PERIPHERAL_SPI1_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000d258:	4b18      	ldr	r3, [pc, #96]	; (1000d2bc <system_peripheral_reset+0x454>)
1000d25a:	8919      	ldrh	r1, [r3, #8]
1000d25c:	4a18      	ldr	r2, [pc, #96]	; (1000d2c0 <system_peripheral_reset+0x458>)
1000d25e:	400a      	ands	r2, r1
1000d260:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000d262:	8919      	ldrh	r1, [r3, #8]
1000d264:	2280      	movs	r2, #128	; 0x80
1000d266:	0052      	lsls	r2, r2, #1
1000d268:	430a      	orrs	r2, r1
1000d26a:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d26c:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_CLK_RSTN;
		break;
1000d26e:	e024      	b.n	1000d2ba <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000d270:	4b12      	ldr	r3, [pc, #72]	; (1000d2bc <system_peripheral_reset+0x454>)
1000d272:	8919      	ldrh	r1, [r3, #8]
1000d274:	4a13      	ldr	r2, [pc, #76]	; (1000d2c4 <system_peripheral_reset+0x45c>)
1000d276:	400a      	ands	r2, r1
1000d278:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000d27a:	8919      	ldrh	r1, [r3, #8]
1000d27c:	2280      	movs	r2, #128	; 0x80
1000d27e:	0092      	lsls	r2, r2, #2
1000d280:	430a      	orrs	r2, r1
1000d282:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d284:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_PHASE_INT_CLK_RSTN;
		break;
1000d286:	e018      	b.n	1000d2ba <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000d288:	4b0c      	ldr	r3, [pc, #48]	; (1000d2bc <system_peripheral_reset+0x454>)
1000d28a:	8919      	ldrh	r1, [r3, #8]
1000d28c:	4a0e      	ldr	r2, [pc, #56]	; (1000d2c8 <system_peripheral_reset+0x460>)
1000d28e:	400a      	ands	r2, r1
1000d290:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000d292:	8919      	ldrh	r1, [r3, #8]
1000d294:	2280      	movs	r2, #128	; 0x80
1000d296:	00d2      	lsls	r2, r2, #3
1000d298:	430a      	orrs	r2, r1
1000d29a:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d29c:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_PHASE_INT_CLK_RSTN;
		break;
1000d29e:	e00c      	b.n	1000d2ba <system_peripheral_reset+0x452>

		case PERIPHERAL_DMA:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000d2a0:	4b06      	ldr	r3, [pc, #24]	; (1000d2bc <system_peripheral_reset+0x454>)
1000d2a2:	8919      	ldrh	r1, [r3, #8]
1000d2a4:	4a09      	ldr	r2, [pc, #36]	; (1000d2cc <system_peripheral_reset+0x464>)
1000d2a6:	400a      	ands	r2, r1
1000d2a8:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_PROV_DMA_CTRL0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000d2aa:	8919      	ldrh	r1, [r3, #8]
1000d2ac:	2280      	movs	r2, #128	; 0x80
1000d2ae:	0112      	lsls	r2, r2, #4
1000d2b0:	430a      	orrs	r2, r1
1000d2b2:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d2b4:	2000      	movs	r0, #0
		case PERIPHERAL_DMA:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_PROV_DMA_CTRL0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_PROV_DMA_CTRL0_RSTN;
		break;
1000d2b6:	e000      	b.n	1000d2ba <system_peripheral_reset+0x452>

		default:
			return STATUS_ERR_INVALID_ARG;
1000d2b8:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
1000d2ba:	bd00      	pop	{pc}
1000d2bc:	4000b000 	.word	0x4000b000
1000d2c0:	fffffeff 	.word	0xfffffeff
1000d2c4:	fffffdff 	.word	0xfffffdff
1000d2c8:	fffffbff 	.word	0xfffffbff
1000d2cc:	fffff7ff 	.word	0xfffff7ff

1000d2d0 <system_register_isr>:
void system_register_isr(enum ram_isr_table_index isr_index,
		uint32_t isr_address)
{
	uint32_t *temp;
	temp = (uint32_t *)(isr_index * 4 + ISR_RAM_MAP_START_ADDRESS);
	*temp = isr_address;
1000d2d0:	2380      	movs	r3, #128	; 0x80
1000d2d2:	04db      	lsls	r3, r3, #19
1000d2d4:	469c      	mov	ip, r3
1000d2d6:	4460      	add	r0, ip
1000d2d8:	0080      	lsls	r0, r0, #2
1000d2da:	6001      	str	r1, [r0, #0]
}
1000d2dc:	4770      	bx	lr
1000d2de:	46c0      	nop			; (mov r8, r8)

1000d2e0 <uart_rx0_isr_handler>:
	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
}

static void uart_rx0_isr_handler(void)
{
1000d2e0:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[0];
1000d2e2:	4b20      	ldr	r3, [pc, #128]	; (1000d364 <uart_rx0_isr_handler+0x84>)
1000d2e4:	681c      	ldr	r4, [r3, #0]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->RECEIVE_STATUS.reg;
1000d2e6:	6823      	ldr	r3, [r4, #0]
1000d2e8:	7d1d      	ldrb	r5, [r3, #20]
1000d2ea:	b2ed      	uxtb	r5, r5
	if (flags & UART_RECEIVE_STATUS_FIFO_OVERRUN) {
1000d2ec:	066a      	lsls	r2, r5, #25
1000d2ee:	d513      	bpl.n	1000d318 <uart_rx0_isr_handler+0x38>
		/* Store the error code */
		module->status = STATUS_ERR_OVERFLOW;
1000d2f0:	211e      	movs	r1, #30
1000d2f2:	2222      	movs	r2, #34	; 0x22
1000d2f4:	54a1      	strb	r1, [r4, r2]
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
1000d2f6:	7e1a      	ldrb	r2, [r3, #24]
1000d2f8:	3123      	adds	r1, #35	; 0x23
1000d2fa:	438a      	bics	r2, r1
1000d2fc:	761a      	strb	r2, [r3, #24]
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
1000d2fe:	2321      	movs	r3, #33	; 0x21
1000d300:	5ce3      	ldrb	r3, [r4, r3]
1000d302:	071b      	lsls	r3, r3, #28
1000d304:	d506      	bpl.n	1000d314 <uart_rx0_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
1000d306:	2320      	movs	r3, #32
		module->status = STATUS_ERR_OVERFLOW;
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
1000d308:	5ce3      	ldrb	r3, [r4, r3]
1000d30a:	071b      	lsls	r3, r3, #28
1000d30c:	d502      	bpl.n	1000d314 <uart_rx0_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
			(module->callback[UART_RX_FIFO_OVERRUN])(module);
1000d30e:	0020      	movs	r0, r4
1000d310:	6923      	ldr	r3, [r4, #16]
1000d312:	4798      	blx	r3
		}
		/* Flush */
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
1000d314:	6823      	ldr	r3, [r4, #0]
1000d316:	7c1b      	ldrb	r3, [r3, #16]
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1000d318:	07eb      	lsls	r3, r5, #31
1000d31a:	d522      	bpl.n	1000d362 <uart_rx0_isr_handler+0x82>
		struct uart_module *const module)
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	uint16_t received_data = (uart_hw->RECEIVE_DATA.reg & UART_RECEIVE_DATA_MASK);
1000d31c:	6823      	ldr	r3, [r4, #0]
1000d31e:	7c1b      	ldrb	r3, [r3, #16]
1000d320:	b2db      	uxtb	r3, r3

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
1000d322:	6962      	ldr	r2, [r4, #20]
1000d324:	7013      	strb	r3, [r2, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
1000d326:	6963      	ldr	r3, [r4, #20]
1000d328:	3301      	adds	r3, #1
1000d32a:	6163      	str	r3, [r4, #20]

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
1000d32c:	8ba3      	ldrh	r3, [r4, #28]
1000d32e:	3b01      	subs	r3, #1
1000d330:	b29b      	uxth	r3, r3
1000d332:	83a3      	strh	r3, [r4, #28]
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
1000d334:	8ba3      	ldrh	r3, [r4, #28]
1000d336:	b29b      	uxth	r3, r3
1000d338:	2b00      	cmp	r3, #0
1000d33a:	d112      	bne.n	1000d362 <uart_rx0_isr_handler+0x82>
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
1000d33c:	3321      	adds	r3, #33	; 0x21
1000d33e:	5ce3      	ldrb	r3, [r4, r3]
1000d340:	075b      	lsls	r3, r3, #29
1000d342:	d50e      	bpl.n	1000d362 <uart_rx0_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
1000d344:	2320      	movs	r3, #32
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
1000d346:	5ce3      	ldrb	r3, [r4, r3]
1000d348:	075b      	lsls	r3, r3, #29
1000d34a:	d50a      	bpl.n	1000d362 <uart_rx0_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
				module->status = STATUS_OK;
1000d34c:	2200      	movs	r2, #0
1000d34e:	2322      	movs	r3, #34	; 0x22
1000d350:	54e2      	strb	r2, [r4, r3]
				module->hw->RX_INTERRUPT_MASK.reg &=
1000d352:	6822      	ldr	r2, [r4, #0]
1000d354:	7e13      	ldrb	r3, [r2, #24]
1000d356:	2101      	movs	r1, #1
1000d358:	438b      	bics	r3, r1
1000d35a:	7613      	strb	r3, [r2, #24]
					~(UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
				(module->callback[UART_RX_COMPLETE])(module);
1000d35c:	68e3      	ldr	r3, [r4, #12]
1000d35e:	0020      	movs	r0, r4
1000d360:	4798      	blx	r3
			}
		}
	}
}
1000d362:	bd70      	pop	{r4, r5, r6, pc}
1000d364:	1001a218 	.word	0x1001a218

1000d368 <uart_tx0_isr_handler>:

static void uart_tx0_isr_handler(void)
{
1000d368:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[0];
1000d36a:	4b21      	ldr	r3, [pc, #132]	; (1000d3f0 <uart_tx0_isr_handler+0x88>)
1000d36c:	681c      	ldr	r4, [r3, #0]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
1000d36e:	6823      	ldr	r3, [r4, #0]
1000d370:	791d      	ldrb	r5, [r3, #4]
1000d372:	b2ed      	uxtb	r5, r5
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
1000d374:	07ea      	lsls	r2, r5, #31
1000d376:	d517      	bpl.n	1000d3a8 <uart_tx0_isr_handler+0x40>
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	/* Write value will be at least 8-bits long */
	uint8_t data_to_send = *(module->tx_buffer_ptr);
1000d378:	69a2      	ldr	r2, [r4, #24]
1000d37a:	7811      	ldrb	r1, [r2, #0]
1000d37c:	b2c9      	uxtb	r1, r1
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
1000d37e:	3201      	adds	r2, #1
1000d380:	61a2      	str	r2, [r4, #24]

	/* Write the data to send*/
	uart_hw->TRANSMIT_DATA.reg = data_to_send & UART_TRANSMIT_DATA_MASK;
1000d382:	7019      	strb	r1, [r3, #0]

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
1000d384:	8be3      	ldrh	r3, [r4, #30]
1000d386:	3b01      	subs	r3, #1
1000d388:	b29b      	uxth	r3, r3
1000d38a:	83e3      	strh	r3, [r4, #30]
	struct uart_module *module = _uart_instances[0];
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
		_uart_write(module);
		if (module->remaining_tx_buffer_length == 0) {
1000d38c:	8be3      	ldrh	r3, [r4, #30]
1000d38e:	b29b      	uxth	r3, r3
1000d390:	2b00      	cmp	r3, #0
1000d392:	d109      	bne.n	1000d3a8 <uart_tx0_isr_handler+0x40>
			module->hw->TX_INTERRUPT_MASK.reg &=
1000d394:	6822      	ldr	r2, [r4, #0]
1000d396:	7a13      	ldrb	r3, [r2, #8]
1000d398:	2101      	movs	r1, #1
1000d39a:	438b      	bics	r3, r1
1000d39c:	7213      	strb	r3, [r2, #8]
					~UART_TX_INTERRUPT_MASK_TX_FIFO_NOT_FULL_MASK;
			module->hw->TX_INTERRUPT_MASK.reg |=
1000d39e:	6822      	ldr	r2, [r4, #0]
1000d3a0:	7a11      	ldrb	r1, [r2, #8]
1000d3a2:	2310      	movs	r3, #16
1000d3a4:	430b      	orrs	r3, r1
1000d3a6:	7213      	strb	r3, [r2, #8]
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
1000d3a8:	06eb      	lsls	r3, r5, #27
1000d3aa:	d512      	bpl.n	1000d3d2 <uart_tx0_isr_handler+0x6a>
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
1000d3ac:	2321      	movs	r3, #33	; 0x21
1000d3ae:	5ce3      	ldrb	r3, [r4, r3]
1000d3b0:	07db      	lsls	r3, r3, #31
1000d3b2:	d50e      	bpl.n	1000d3d2 <uart_tx0_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
1000d3b4:	2320      	movs	r3, #32
			module->hw->TX_INTERRUPT_MASK.reg |=
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
1000d3b6:	5ce3      	ldrb	r3, [r4, r3]
1000d3b8:	07db      	lsls	r3, r3, #31
1000d3ba:	d50a      	bpl.n	1000d3d2 <uart_tx0_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
			module->status = STATUS_OK;
1000d3bc:	2200      	movs	r2, #0
1000d3be:	2322      	movs	r3, #34	; 0x22
1000d3c0:	54e2      	strb	r2, [r4, r3]
			/* Disable interrupt */
			module->hw->TX_INTERRUPT_MASK.reg &=
1000d3c2:	6822      	ldr	r2, [r4, #0]
1000d3c4:	7a13      	ldrb	r3, [r2, #8]
1000d3c6:	2110      	movs	r1, #16
1000d3c8:	438b      	bics	r3, r1
1000d3ca:	7213      	strb	r3, [r2, #8]
				~UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
			(module->callback[UART_TX_COMPLETE])(module);
1000d3cc:	0020      	movs	r0, r4
1000d3ce:	6863      	ldr	r3, [r4, #4]
1000d3d0:	4798      	blx	r3
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
1000d3d2:	06ab      	lsls	r3, r5, #26
1000d3d4:	d50a      	bpl.n	1000d3ec <uart_tx0_isr_handler+0x84>
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
1000d3d6:	2321      	movs	r3, #33	; 0x21
1000d3d8:	5ce3      	ldrb	r3, [r4, r3]
1000d3da:	079b      	lsls	r3, r3, #30
1000d3dc:	d506      	bpl.n	1000d3ec <uart_tx0_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
1000d3de:	2320      	movs	r3, #32
			(module->callback[UART_TX_COMPLETE])(module);
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
1000d3e0:	5ce3      	ldrb	r3, [r4, r3]
1000d3e2:	079b      	lsls	r3, r3, #30
1000d3e4:	d502      	bpl.n	1000d3ec <uart_tx0_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
			(module->callback[UART_CTS_ACTIVE])(module);
1000d3e6:	68a3      	ldr	r3, [r4, #8]
1000d3e8:	0020      	movs	r0, r4
1000d3ea:	4798      	blx	r3
		}

	}
}
1000d3ec:	bd70      	pop	{r4, r5, r6, pc}
1000d3ee:	46c0      	nop			; (mov r8, r8)
1000d3f0:	1001a218 	.word	0x1001a218

1000d3f4 <uart_rx1_isr_handler>:

static void uart_rx1_isr_handler(void)
{
1000d3f4:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[1];
1000d3f6:	4b20      	ldr	r3, [pc, #128]	; (1000d478 <uart_rx1_isr_handler+0x84>)
1000d3f8:	685c      	ldr	r4, [r3, #4]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->RECEIVE_STATUS.reg;
1000d3fa:	6823      	ldr	r3, [r4, #0]
1000d3fc:	7d1d      	ldrb	r5, [r3, #20]
1000d3fe:	b2ed      	uxtb	r5, r5
	if (flags & UART_RECEIVE_STATUS_FIFO_OVERRUN) {
1000d400:	066a      	lsls	r2, r5, #25
1000d402:	d513      	bpl.n	1000d42c <uart_rx1_isr_handler+0x38>
		/* Store the error code */
		module->status = STATUS_ERR_OVERFLOW;
1000d404:	211e      	movs	r1, #30
1000d406:	2222      	movs	r2, #34	; 0x22
1000d408:	54a1      	strb	r1, [r4, r2]
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
1000d40a:	7e1a      	ldrb	r2, [r3, #24]
1000d40c:	3123      	adds	r1, #35	; 0x23
1000d40e:	438a      	bics	r2, r1
1000d410:	761a      	strb	r2, [r3, #24]
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
1000d412:	2321      	movs	r3, #33	; 0x21
1000d414:	5ce3      	ldrb	r3, [r4, r3]
1000d416:	071b      	lsls	r3, r3, #28
1000d418:	d506      	bpl.n	1000d428 <uart_rx1_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
1000d41a:	2320      	movs	r3, #32
		module->status = STATUS_ERR_OVERFLOW;
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
1000d41c:	5ce3      	ldrb	r3, [r4, r3]
1000d41e:	071b      	lsls	r3, r3, #28
1000d420:	d502      	bpl.n	1000d428 <uart_rx1_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
			(module->callback[UART_RX_FIFO_OVERRUN])(module);
1000d422:	0020      	movs	r0, r4
1000d424:	6923      	ldr	r3, [r4, #16]
1000d426:	4798      	blx	r3
		}
		/* Flush */
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
1000d428:	6823      	ldr	r3, [r4, #0]
1000d42a:	7c1b      	ldrb	r3, [r3, #16]
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1000d42c:	07eb      	lsls	r3, r5, #31
1000d42e:	d522      	bpl.n	1000d476 <uart_rx1_isr_handler+0x82>
		struct uart_module *const module)
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	uint16_t received_data = (uart_hw->RECEIVE_DATA.reg & UART_RECEIVE_DATA_MASK);
1000d430:	6823      	ldr	r3, [r4, #0]
1000d432:	7c1b      	ldrb	r3, [r3, #16]
1000d434:	b2db      	uxtb	r3, r3

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
1000d436:	6962      	ldr	r2, [r4, #20]
1000d438:	7013      	strb	r3, [r2, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
1000d43a:	6963      	ldr	r3, [r4, #20]
1000d43c:	3301      	adds	r3, #1
1000d43e:	6163      	str	r3, [r4, #20]

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
1000d440:	8ba3      	ldrh	r3, [r4, #28]
1000d442:	3b01      	subs	r3, #1
1000d444:	b29b      	uxth	r3, r3
1000d446:	83a3      	strh	r3, [r4, #28]
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
1000d448:	8ba3      	ldrh	r3, [r4, #28]
1000d44a:	b29b      	uxth	r3, r3
1000d44c:	2b00      	cmp	r3, #0
1000d44e:	d112      	bne.n	1000d476 <uart_rx1_isr_handler+0x82>
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
1000d450:	3321      	adds	r3, #33	; 0x21
1000d452:	5ce3      	ldrb	r3, [r4, r3]
1000d454:	075b      	lsls	r3, r3, #29
1000d456:	d50e      	bpl.n	1000d476 <uart_rx1_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
1000d458:	2320      	movs	r3, #32
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
1000d45a:	5ce3      	ldrb	r3, [r4, r3]
1000d45c:	075b      	lsls	r3, r3, #29
1000d45e:	d50a      	bpl.n	1000d476 <uart_rx1_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
				module->status = STATUS_OK;
1000d460:	2200      	movs	r2, #0
1000d462:	2322      	movs	r3, #34	; 0x22
1000d464:	54e2      	strb	r2, [r4, r3]
				module->hw->RX_INTERRUPT_MASK.reg &=
1000d466:	6822      	ldr	r2, [r4, #0]
1000d468:	7e13      	ldrb	r3, [r2, #24]
1000d46a:	2101      	movs	r1, #1
1000d46c:	438b      	bics	r3, r1
1000d46e:	7613      	strb	r3, [r2, #24]
					~(UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
				(module->callback[UART_RX_COMPLETE])(module);
1000d470:	68e3      	ldr	r3, [r4, #12]
1000d472:	0020      	movs	r0, r4
1000d474:	4798      	blx	r3
			}
		}
	}
}
1000d476:	bd70      	pop	{r4, r5, r6, pc}
1000d478:	1001a218 	.word	0x1001a218

1000d47c <uart_tx1_isr_handler>:

static void uart_tx1_isr_handler(void)
{
1000d47c:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[1];
1000d47e:	4b21      	ldr	r3, [pc, #132]	; (1000d504 <uart_tx1_isr_handler+0x88>)
1000d480:	685c      	ldr	r4, [r3, #4]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
1000d482:	6823      	ldr	r3, [r4, #0]
1000d484:	791d      	ldrb	r5, [r3, #4]
1000d486:	b2ed      	uxtb	r5, r5
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
1000d488:	07ea      	lsls	r2, r5, #31
1000d48a:	d517      	bpl.n	1000d4bc <uart_tx1_isr_handler+0x40>
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	/* Write value will be at least 8-bits long */
	uint8_t data_to_send = *(module->tx_buffer_ptr);
1000d48c:	69a2      	ldr	r2, [r4, #24]
1000d48e:	7811      	ldrb	r1, [r2, #0]
1000d490:	b2c9      	uxtb	r1, r1
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
1000d492:	3201      	adds	r2, #1
1000d494:	61a2      	str	r2, [r4, #24]

	/* Write the data to send*/
	uart_hw->TRANSMIT_DATA.reg = data_to_send & UART_TRANSMIT_DATA_MASK;
1000d496:	7019      	strb	r1, [r3, #0]

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
1000d498:	8be3      	ldrh	r3, [r4, #30]
1000d49a:	3b01      	subs	r3, #1
1000d49c:	b29b      	uxth	r3, r3
1000d49e:	83e3      	strh	r3, [r4, #30]
	struct uart_module *module = _uart_instances[1];
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
		_uart_write(module);
		if (module->remaining_tx_buffer_length == 0) {
1000d4a0:	8be3      	ldrh	r3, [r4, #30]
1000d4a2:	b29b      	uxth	r3, r3
1000d4a4:	2b00      	cmp	r3, #0
1000d4a6:	d109      	bne.n	1000d4bc <uart_tx1_isr_handler+0x40>
			module->hw->TX_INTERRUPT_MASK.reg &=
1000d4a8:	6822      	ldr	r2, [r4, #0]
1000d4aa:	7a13      	ldrb	r3, [r2, #8]
1000d4ac:	2101      	movs	r1, #1
1000d4ae:	438b      	bics	r3, r1
1000d4b0:	7213      	strb	r3, [r2, #8]
					~UART_TX_INTERRUPT_MASK_TX_FIFO_NOT_FULL_MASK;
			module->hw->TX_INTERRUPT_MASK.reg |=
1000d4b2:	6822      	ldr	r2, [r4, #0]
1000d4b4:	7a11      	ldrb	r1, [r2, #8]
1000d4b6:	2310      	movs	r3, #16
1000d4b8:	430b      	orrs	r3, r1
1000d4ba:	7213      	strb	r3, [r2, #8]
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
1000d4bc:	06eb      	lsls	r3, r5, #27
1000d4be:	d512      	bpl.n	1000d4e6 <uart_tx1_isr_handler+0x6a>
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
1000d4c0:	2321      	movs	r3, #33	; 0x21
1000d4c2:	5ce3      	ldrb	r3, [r4, r3]
1000d4c4:	07db      	lsls	r3, r3, #31
1000d4c6:	d50e      	bpl.n	1000d4e6 <uart_tx1_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
1000d4c8:	2320      	movs	r3, #32
			module->hw->TX_INTERRUPT_MASK.reg |=
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
1000d4ca:	5ce3      	ldrb	r3, [r4, r3]
1000d4cc:	07db      	lsls	r3, r3, #31
1000d4ce:	d50a      	bpl.n	1000d4e6 <uart_tx1_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
			module->status = STATUS_OK;
1000d4d0:	2200      	movs	r2, #0
1000d4d2:	2322      	movs	r3, #34	; 0x22
1000d4d4:	54e2      	strb	r2, [r4, r3]
			/* Disable interrupt */
			module->hw->TX_INTERRUPT_MASK.reg &=
1000d4d6:	6822      	ldr	r2, [r4, #0]
1000d4d8:	7a13      	ldrb	r3, [r2, #8]
1000d4da:	2110      	movs	r1, #16
1000d4dc:	438b      	bics	r3, r1
1000d4de:	7213      	strb	r3, [r2, #8]
				~UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
			(module->callback[UART_TX_COMPLETE])(module);
1000d4e0:	0020      	movs	r0, r4
1000d4e2:	6863      	ldr	r3, [r4, #4]
1000d4e4:	4798      	blx	r3
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
1000d4e6:	06ab      	lsls	r3, r5, #26
1000d4e8:	d50a      	bpl.n	1000d500 <uart_tx1_isr_handler+0x84>
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
1000d4ea:	2321      	movs	r3, #33	; 0x21
1000d4ec:	5ce3      	ldrb	r3, [r4, r3]
1000d4ee:	079b      	lsls	r3, r3, #30
1000d4f0:	d506      	bpl.n	1000d500 <uart_tx1_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
1000d4f2:	2320      	movs	r3, #32
			(module->callback[UART_TX_COMPLETE])(module);
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
1000d4f4:	5ce3      	ldrb	r3, [r4, r3]
1000d4f6:	079b      	lsls	r3, r3, #30
1000d4f8:	d502      	bpl.n	1000d500 <uart_tx1_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
			(module->callback[UART_CTS_ACTIVE])(module);
1000d4fa:	68a3      	ldr	r3, [r4, #8]
1000d4fc:	0020      	movs	r0, r4
1000d4fe:	4798      	blx	r3
		}

	}
}
1000d500:	bd70      	pop	{r4, r5, r6, pc}
1000d502:	46c0      	nop			; (mov r8, r8)
1000d504:	1001a218 	.word	0x1001a218

1000d508 <uart_get_config_defaults>:
 * \param[out] config  Pointer to configuration structure to be initiated
 */
void uart_get_config_defaults(
		struct uart_config *const config)
{
	config->baud_rate = 115200;
1000d508:	23e1      	movs	r3, #225	; 0xe1
1000d50a:	025b      	lsls	r3, r3, #9
1000d50c:	6003      	str	r3, [r0, #0]
	config->data_bits = UART_8_BITS;
1000d50e:	2300      	movs	r3, #0
1000d510:	7103      	strb	r3, [r0, #4]
	config->stop_bits = UART_1_STOP_BIT;
1000d512:	7143      	strb	r3, [r0, #5]
	config->parity = UART_NO_PARITY;
1000d514:	7183      	strb	r3, [r0, #6]
	config->flow_control = false;
1000d516:	71c3      	strb	r3, [r0, #7]

	config->pin_number_pad[0] = PIN_LP_GPIO_2;
1000d518:	3302      	adds	r3, #2
1000d51a:	6083      	str	r3, [r0, #8]
	config->pin_number_pad[1] = PIN_LP_GPIO_3;
1000d51c:	2203      	movs	r2, #3
1000d51e:	60c2      	str	r2, [r0, #12]
	config->pin_number_pad[2] = PIN_LP_GPIO_4;
1000d520:	3201      	adds	r2, #1
1000d522:	6102      	str	r2, [r0, #16]
	config->pin_number_pad[3] = PIN_LP_GPIO_5;
1000d524:	3201      	adds	r2, #1
1000d526:	6142      	str	r2, [r0, #20]

	config->pinmux_sel_pad[0] = MUX_LP_GPIO_2_UART0_RXD;
1000d528:	6183      	str	r3, [r0, #24]
	config->pinmux_sel_pad[1] = MUX_LP_GPIO_3_UART0_TXD;
1000d52a:	61c3      	str	r3, [r0, #28]
	config->pinmux_sel_pad[2] = MUX_LP_GPIO_4_UART0_CTS;
1000d52c:	6203      	str	r3, [r0, #32]
	config->pinmux_sel_pad[3] = MUX_LP_GPIO_5_UART0_RTS;
1000d52e:	6243      	str	r3, [r0, #36]	; 0x24
}
1000d530:	4770      	bx	lr
1000d532:	46c0      	nop			; (mov r8, r8)

1000d534 <uart_init>:
 *
 * \retval STATUS_OK                       The initialization was successful
 */
enum status_code uart_init(struct uart_module *const module, Uart * const hw,
		const struct uart_config *const config)
{
1000d534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000d536:	464f      	mov	r7, r9
1000d538:	4646      	mov	r6, r8
1000d53a:	b4c0      	push	{r6, r7}
1000d53c:	0005      	movs	r5, r0
1000d53e:	0017      	movs	r7, r2

	uint8_t config_temp = 0;
	uint8_t i,index;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
1000d540:	6001      	str	r1, [r0, #0]

	for (i = 0; i < UART_CALLBACK_N; i++) {
		module->callback[i] = NULL;
1000d542:	2300      	movs	r3, #0
1000d544:	6043      	str	r3, [r0, #4]
1000d546:	6083      	str	r3, [r0, #8]
1000d548:	60c3      	str	r3, [r0, #12]
1000d54a:	6103      	str	r3, [r0, #16]
	}
	module->rx_buffer_ptr = NULL;
1000d54c:	6143      	str	r3, [r0, #20]
	module->tx_buffer_ptr = NULL;
1000d54e:	6183      	str	r3, [r0, #24]
	module->remaining_rx_buffer_length = 0;
1000d550:	2200      	movs	r2, #0
1000d552:	8383      	strh	r3, [r0, #28]
	module->remaining_tx_buffer_length = 0;
1000d554:	83c3      	strh	r3, [r0, #30]
	module->callback_reg_mask = 0;
1000d556:	3320      	adds	r3, #32
1000d558:	54c2      	strb	r2, [r0, r3]
	module->callback_enable_mask = 0;
1000d55a:	3301      	adds	r3, #1
1000d55c:	54c2      	strb	r2, [r0, r3]
	module->status = STATUS_OK;
1000d55e:	3301      	adds	r3, #1
1000d560:	54c2      	strb	r2, [r0, r3]

	if (hw == UART0) {
1000d562:	4b55      	ldr	r3, [pc, #340]	; (1000d6b8 <uart_init+0x184>)
1000d564:	4299      	cmp	r1, r3
1000d566:	d118      	bne.n	1000d59a <uart_init+0x66>
		system_peripheral_reset(PERIPHERAL_UART0_CORE);
1000d568:	2009      	movs	r0, #9
1000d56a:	4c54      	ldr	r4, [pc, #336]	; (1000d6bc <uart_init+0x188>)
1000d56c:	47a0      	blx	r4
		system_peripheral_reset(PERIPHERAL_UART0_IF);
1000d56e:	200a      	movs	r0, #10
1000d570:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART0_CORE);
1000d572:	2009      	movs	r0, #9
1000d574:	4c52      	ldr	r4, [pc, #328]	; (1000d6c0 <uart_init+0x18c>)
1000d576:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART0_IF);
1000d578:	200a      	movs	r0, #10
1000d57a:	47a0      	blx	r4
		_uart_instances[0] = module;
1000d57c:	4b51      	ldr	r3, [pc, #324]	; (1000d6c4 <uart_init+0x190>)
1000d57e:	601d      	str	r5, [r3, #0]
		system_register_isr(RAM_ISR_TABLE_UARTRX0_INDEX, (uint32_t)uart_rx0_isr_handler);
1000d580:	4951      	ldr	r1, [pc, #324]	; (1000d6c8 <uart_init+0x194>)
1000d582:	2010      	movs	r0, #16
1000d584:	4c51      	ldr	r4, [pc, #324]	; (1000d6cc <uart_init+0x198>)
1000d586:	47a0      	blx	r4
		system_register_isr(RAM_ISR_TABLE_UARTTX0_INDEX, (uint32_t)uart_tx0_isr_handler);
1000d588:	4951      	ldr	r1, [pc, #324]	; (1000d6d0 <uart_init+0x19c>)
1000d58a:	2011      	movs	r0, #17
1000d58c:	47a0      	blx	r4
1000d58e:	4b51      	ldr	r3, [pc, #324]	; (1000d6d4 <uart_init+0x1a0>)
1000d590:	2201      	movs	r2, #1
1000d592:	601a      	str	r2, [r3, #0]
1000d594:	3201      	adds	r2, #1
1000d596:	601a      	str	r2, [r3, #0]
1000d598:	e01a      	b.n	1000d5d0 <uart_init+0x9c>
		NVIC_EnableIRQ(UART0_RX_IRQn);
		NVIC_EnableIRQ(UART0_TX_IRQn);
	} else if (hw == UART1) {
1000d59a:	4b4f      	ldr	r3, [pc, #316]	; (1000d6d8 <uart_init+0x1a4>)
1000d59c:	4299      	cmp	r1, r3
1000d59e:	d117      	bne.n	1000d5d0 <uart_init+0x9c>
		system_peripheral_reset(PERIPHERAL_UART1_CORE);
1000d5a0:	200b      	movs	r0, #11
1000d5a2:	4c46      	ldr	r4, [pc, #280]	; (1000d6bc <uart_init+0x188>)
1000d5a4:	47a0      	blx	r4
		system_peripheral_reset(PERIPHERAL_UART1_IF);
1000d5a6:	200c      	movs	r0, #12
1000d5a8:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART1_CORE);
1000d5aa:	200b      	movs	r0, #11
1000d5ac:	4c44      	ldr	r4, [pc, #272]	; (1000d6c0 <uart_init+0x18c>)
1000d5ae:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART1_IF);
1000d5b0:	200c      	movs	r0, #12
1000d5b2:	47a0      	blx	r4
		_uart_instances[1] = module;
1000d5b4:	4b43      	ldr	r3, [pc, #268]	; (1000d6c4 <uart_init+0x190>)
1000d5b6:	605d      	str	r5, [r3, #4]
		system_register_isr(RAM_ISR_TABLE_UARTRX1_INDEX, (uint32_t)uart_rx1_isr_handler);
1000d5b8:	4948      	ldr	r1, [pc, #288]	; (1000d6dc <uart_init+0x1a8>)
1000d5ba:	2012      	movs	r0, #18
1000d5bc:	4c43      	ldr	r4, [pc, #268]	; (1000d6cc <uart_init+0x198>)
1000d5be:	47a0      	blx	r4
		system_register_isr(RAM_ISR_TABLE_UARTTX1_INDEX, (uint32_t)uart_tx1_isr_handler);
1000d5c0:	4947      	ldr	r1, [pc, #284]	; (1000d6e0 <uart_init+0x1ac>)
1000d5c2:	2013      	movs	r0, #19
1000d5c4:	47a0      	blx	r4
1000d5c6:	4b43      	ldr	r3, [pc, #268]	; (1000d6d4 <uart_init+0x1a0>)
1000d5c8:	2204      	movs	r2, #4
1000d5ca:	601a      	str	r2, [r3, #0]
1000d5cc:	3204      	adds	r2, #4
1000d5ce:	601a      	str	r2, [r3, #0]
		NVIC_EnableIRQ(UART1_RX_IRQn);
		NVIC_EnableIRQ(UART1_TX_IRQn);
	}

	/* Set the pinmux for this UART module. */
	if(config->flow_control) {
1000d5d0:	79fb      	ldrb	r3, [r7, #7]
		index = 4;
1000d5d2:	2204      	movs	r2, #4
1000d5d4:	4690      	mov	r8, r2
		NVIC_EnableIRQ(UART1_RX_IRQn);
		NVIC_EnableIRQ(UART1_TX_IRQn);
	}

	/* Set the pinmux for this UART module. */
	if(config->flow_control) {
1000d5d6:	2b00      	cmp	r3, #0
1000d5d8:	d152      	bne.n	1000d680 <uart_init+0x14c>
		index = 4;
	} else {
		index = 2;
1000d5da:	3302      	adds	r3, #2
1000d5dc:	4698      	mov	r8, r3
1000d5de:	e04f      	b.n	1000d680 <uart_init+0x14c>
#if (BTLC1000)
    index = 2;  /* BTLC1000 has no flow control function. */
#endif

	for(i = 0; i < index; i++) {
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
1000d5e0:	8a31      	ldrh	r1, [r6, #16]
1000d5e2:	ce01      	ldmia	r6!, {r0}
1000d5e4:	b2c0      	uxtb	r0, r0
1000d5e6:	47c8      	blx	r9

#if (BTLC1000)
    index = 2;  /* BTLC1000 has no flow control function. */
#endif

	for(i = 0; i < index; i++) {
1000d5e8:	3401      	adds	r4, #1
1000d5ea:	b2e4      	uxtb	r4, r4
1000d5ec:	4544      	cmp	r4, r8
1000d5ee:	d3f7      	bcc.n	1000d5e0 <uart_init+0xac>
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
								(uint16_t)(config->pinmux_sel_pad[i]));
	}

	/* empty UART FIFO */
	while (module->hw->RECEIVE_STATUS.reg & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1000d5f0:	682b      	ldr	r3, [r5, #0]
1000d5f2:	7d1a      	ldrb	r2, [r3, #20]
1000d5f4:	07d2      	lsls	r2, r2, #31
1000d5f6:	d504      	bpl.n	1000d602 <uart_init+0xce>
1000d5f8:	2101      	movs	r1, #1
		i = module->hw->RECEIVE_DATA.reg;
1000d5fa:	7c1a      	ldrb	r2, [r3, #16]
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
								(uint16_t)(config->pinmux_sel_pad[i]));
	}

	/* empty UART FIFO */
	while (module->hw->RECEIVE_STATUS.reg & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1000d5fc:	7d1a      	ldrb	r2, [r3, #20]
1000d5fe:	420a      	tst	r2, r1
1000d600:	d1fb      	bne.n	1000d5fa <uart_init+0xc6>
		i = module->hw->RECEIVE_DATA.reg;
	}
	
	/* reset configuration register */
	module->hw->UART_CONFIGURATION.reg = 0;
1000d602:	2100      	movs	r1, #0
1000d604:	2220      	movs	r2, #32
1000d606:	5499      	strb	r1, [r3, r2]

	/* program the uart configuration. */
	if(config->flow_control) {
1000d608:	79fb      	ldrb	r3, [r7, #7]
		config_temp |= UART_CONFIGURATION_CTS_ENABLE_1;
1000d60a:	1e59      	subs	r1, r3, #1
1000d60c:	418b      	sbcs	r3, r1
1000d60e:	0159      	lsls	r1, r3, #5
	}
	config_temp |= config->data_bits;
	config_temp |= config->stop_bits;
1000d610:	793b      	ldrb	r3, [r7, #4]
1000d612:	797a      	ldrb	r2, [r7, #5]
1000d614:	4313      	orrs	r3, r2
1000d616:	430b      	orrs	r3, r1
	switch(config->parity) {
1000d618:	79ba      	ldrb	r2, [r7, #6]
1000d61a:	2a02      	cmp	r2, #2
1000d61c:	d00d      	beq.n	1000d63a <uart_init+0x106>
1000d61e:	b2d1      	uxtb	r1, r2
1000d620:	2902      	cmp	r1, #2
1000d622:	d802      	bhi.n	1000d62a <uart_init+0xf6>
1000d624:	2a01      	cmp	r2, #1
1000d626:	d005      	beq.n	1000d634 <uart_init+0x100>
1000d628:	e00f      	b.n	1000d64a <uart_init+0x116>
1000d62a:	2a03      	cmp	r2, #3
1000d62c:	d008      	beq.n	1000d640 <uart_init+0x10c>
1000d62e:	2a04      	cmp	r2, #4
1000d630:	d009      	beq.n	1000d646 <uart_init+0x112>
1000d632:	e00a      	b.n	1000d64a <uart_init+0x116>
		case UART_NO_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_0;
			break;

		case UART_EVEN_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_1;
1000d634:	2202      	movs	r2, #2
1000d636:	4313      	orrs	r3, r2
			config_temp |= UART_CONFIGURATION_PARITY_MODE_0;
			break;
1000d638:	e007      	b.n	1000d64a <uart_init+0x116>

		case UART_ODD_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_1;
			config_temp |= UART_CONFIGURATION_PARITY_MODE_1;
1000d63a:	2206      	movs	r2, #6
1000d63c:	4313      	orrs	r3, r2
			break;
1000d63e:	e004      	b.n	1000d64a <uart_init+0x116>

		case UART_SPACE_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_1;
			config_temp |= UART_CONFIGURATION_PARITY_MODE_2;
1000d640:	220a      	movs	r2, #10
1000d642:	4313      	orrs	r3, r2
			break;
1000d644:	e001      	b.n	1000d64a <uart_init+0x116>

		case UART_MARK_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_1;
			config_temp |= UART_CONFIGURATION_PARITY_MODE_3;
1000d646:	220e      	movs	r2, #14
1000d648:	4313      	orrs	r3, r2
			break;

		default:
			break;
	}	
	module->hw->UART_CONFIGURATION.reg = config_temp;
1000d64a:	2220      	movs	r2, #32
1000d64c:	6829      	ldr	r1, [r5, #0]
1000d64e:	548b      	strb	r3, [r1, r2]

	/* Calculate the baud rate. */
	uart_set_baudrate(module, config->baud_rate);
1000d650:	683e      	ldr	r6, [r7, #0]
	uint16_t integerpart = 0;
	uint8_t fractionalpart = 0;
	uint32_t diff;
	uint8_t i = 0;

	clock = system_clock_get_value();
1000d652:	4b24      	ldr	r3, [pc, #144]	; (1000d6e4 <uart_init+0x1b0>)
1000d654:	4798      	blx	r3
1000d656:	0004      	movs	r4, r0
	integerpart = clock / baud_rate;
1000d658:	0031      	movs	r1, r6
1000d65a:	4b23      	ldr	r3, [pc, #140]	; (1000d6e8 <uart_init+0x1b4>)
1000d65c:	4798      	blx	r3
1000d65e:	b282      	uxth	r2, r0
	diff = clock - (baud_rate * integerpart);
1000d660:	0400      	lsls	r0, r0, #16
1000d662:	0c00      	lsrs	r0, r0, #16
1000d664:	4370      	muls	r0, r6
1000d666:	1a20      	subs	r0, r4, r0
	i = 0;
	while(diff > (baud_rate / 16)) {
1000d668:	0931      	lsrs	r1, r6, #4
1000d66a:	4288      	cmp	r0, r1
1000d66c:	d906      	bls.n	1000d67c <uart_init+0x148>
1000d66e:	2300      	movs	r3, #0
		i++;
1000d670:	3301      	adds	r3, #1
1000d672:	b2db      	uxtb	r3, r3
		diff -= (baud_rate / 16);
1000d674:	1a40      	subs	r0, r0, r1

	clock = system_clock_get_value();
	integerpart = clock / baud_rate;
	diff = clock - (baud_rate * integerpart);
	i = 0;
	while(diff > (baud_rate / 16)) {
1000d676:	4288      	cmp	r0, r1
1000d678:	d8fa      	bhi.n	1000d670 <uart_init+0x13c>
1000d67a:	e007      	b.n	1000d68c <uart_init+0x158>
	uint8_t i = 0;

	clock = system_clock_get_value();
	integerpart = clock / baud_rate;
	diff = clock - (baud_rate * integerpart);
	i = 0;
1000d67c:	2300      	movs	r3, #0
1000d67e:	e005      	b.n	1000d68c <uart_init+0x158>
1000d680:	003e      	movs	r6, r7
1000d682:	3608      	adds	r6, #8
 *
 * \retval STATUS_OK                       The initialization was successful
 */
enum status_code uart_init(struct uart_module *const module, Uart * const hw,
		const struct uart_config *const config)
{
1000d684:	2400      	movs	r4, #0
#if (BTLC1000)
    index = 2;  /* BTLC1000 has no flow control function. */
#endif

	for(i = 0; i < index; i++) {
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
1000d686:	4b19      	ldr	r3, [pc, #100]	; (1000d6ec <uart_init+0x1b8>)
1000d688:	4699      	mov	r9, r3
1000d68a:	e7a9      	b.n	1000d5e0 <uart_init+0xac>
		i++;
		diff -= (baud_rate / 16);
	}
	fractionalpart = (i + 1) / 2;

	module->hw->UART_CLOCK_SOURCE.reg = UART_CLOCK_SOURCE_CLOCK_SELECT_0;
1000d68c:	2100      	movs	r1, #0
1000d68e:	2028      	movs	r0, #40	; 0x28
1000d690:	682c      	ldr	r4, [r5, #0]
1000d692:	5421      	strb	r1, [r4, r0]
	module->hw->UART_BAUD_RATE.reg =
1000d694:	3301      	adds	r3, #1
1000d696:	071b      	lsls	r3, r3, #28
1000d698:	0f5b      	lsrs	r3, r3, #29
1000d69a:	00d2      	lsls	r2, r2, #3
1000d69c:	4313      	orrs	r3, r2
1000d69e:	b29b      	uxth	r3, r3
1000d6a0:	682a      	ldr	r2, [r5, #0]
1000d6a2:	8493      	strh	r3, [r2, #36]	; 0x24
	module->hw->UART_CONFIGURATION.reg = config_temp;

	/* Calculate the baud rate. */
	uart_set_baudrate(module, config->baud_rate);

	module->hw->RX_INTERRUPT_MASK.reg = 0;	// disable int at initialization, enable it at read time
1000d6a4:	682b      	ldr	r3, [r5, #0]
1000d6a6:	7619      	strb	r1, [r3, #24]
	module->hw->TX_INTERRUPT_MASK.reg = 0;	// disable int at initialization, enable it at write time
1000d6a8:	682b      	ldr	r3, [r5, #0]
1000d6aa:	7219      	strb	r1, [r3, #8]
	
	return STATUS_OK;
}
1000d6ac:	2000      	movs	r0, #0
1000d6ae:	bc0c      	pop	{r2, r3}
1000d6b0:	4690      	mov	r8, r2
1000d6b2:	4699      	mov	r9, r3
1000d6b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000d6b6:	46c0      	nop			; (mov r8, r8)
1000d6b8:	40004000 	.word	0x40004000
1000d6bc:	1000ce69 	.word	0x1000ce69
1000d6c0:	1000c7a1 	.word	0x1000c7a1
1000d6c4:	1001a218 	.word	0x1001a218
1000d6c8:	1000d2e1 	.word	0x1000d2e1
1000d6cc:	1000d2d1 	.word	0x1000d2d1
1000d6d0:	1000d369 	.word	0x1000d369
1000d6d4:	e000e100 	.word	0xe000e100
1000d6d8:	40005000 	.word	0x40005000
1000d6dc:	1000d3f5 	.word	0x1000d3f5
1000d6e0:	1000d47d 	.word	0x1000d47d
1000d6e4:	1000c795 	.word	0x1000c795
1000d6e8:	1001308d 	.word	0x1001308d
1000d6ec:	1000c3f1 	.word	0x1000c3f1

1000d6f0 <uart_write_wait>:
* \retval STATUS_OK         If the operation was completed
*/
enum status_code uart_write_wait(struct uart_module *const module,
		const uint8_t tx_data)
{
	while (!(module->hw->TRANSMIT_STATUS.reg & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL));
1000d6f0:	6802      	ldr	r2, [r0, #0]
1000d6f2:	2001      	movs	r0, #1
1000d6f4:	7913      	ldrb	r3, [r2, #4]
1000d6f6:	4203      	tst	r3, r0
1000d6f8:	d0fc      	beq.n	1000d6f4 <uart_write_wait+0x4>

	module->hw->TRANSMIT_DATA.reg = tx_data;
1000d6fa:	7011      	strb	r1, [r2, #0]
	
	return STATUS_OK;
}
1000d6fc:	2000      	movs	r0, #0
1000d6fe:	4770      	bx	lr

1000d700 <uart_read_wait>:
* \retval STATUS_OK                If the operation was completed
*/
enum status_code uart_read_wait(struct uart_module *const module,
		uint8_t *const rx_data)
{
	while (!(module->hw->RECEIVE_STATUS.reg & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY));
1000d700:	6802      	ldr	r2, [r0, #0]
1000d702:	2001      	movs	r0, #1
1000d704:	7d13      	ldrb	r3, [r2, #20]
1000d706:	4203      	tst	r3, r0
1000d708:	d0fc      	beq.n	1000d704 <uart_read_wait+0x4>

	*rx_data = module->hw->RECEIVE_DATA.reg;
1000d70a:	7c13      	ldrb	r3, [r2, #16]
1000d70c:	700b      	strb	r3, [r1, #0]
	
	return STATUS_OK;
}
1000d70e:	2000      	movs	r0, #0
1000d710:	4770      	bx	lr
1000d712:	46c0      	nop			; (mov r8, r8)

1000d714 <uart_read_buffer_job>:
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
1000d714:	2317      	movs	r3, #23
{
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
1000d716:	2a00      	cmp	r2, #0
1000d718:	d00d      	beq.n	1000d736 <uart_read_buffer_job+0x22>
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check if the UART is busy transmitting or slave waiting for TXC*/
	if (module->status == STATUS_BUSY) {
1000d71a:	330b      	adds	r3, #11
1000d71c:	5cc3      	ldrb	r3, [r0, r3]
1000d71e:	b2db      	uxtb	r3, r3
1000d720:	2b05      	cmp	r3, #5
1000d722:	d008      	beq.n	1000d736 <uart_read_buffer_job+0x22>
	Assert(module);
	Assert(rx_data);

	/* Set length for the buffer and the pointer, and let
	 * the interrupt handler do the rest */
	module->remaining_rx_buffer_length = length;
1000d724:	8382      	strh	r2, [r0, #28]
	module->rx_buffer_ptr = rx_data;
1000d726:	6141      	str	r1, [r0, #20]
	module->status = STATUS_BUSY;
1000d728:	2205      	movs	r2, #5
1000d72a:	2322      	movs	r3, #34	; 0x22
1000d72c:	54c2      	strb	r2, [r0, r3]

	module->hw->RX_INTERRUPT_MASK.reg = UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK;
1000d72e:	6803      	ldr	r3, [r0, #0]
1000d730:	3a04      	subs	r2, #4
1000d732:	761a      	strb	r2, [r3, #24]
		return STATUS_BUSY;
	}

	/* Issue internal read */
	_uart_read_buffer(module, rx_data, length);
	return STATUS_OK;
1000d734:	2300      	movs	r3, #0
}
1000d736:	0018      	movs	r0, r3
1000d738:	4770      	bx	lr
1000d73a:	46c0      	nop			; (mov r8, r8)

1000d73c <uart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
1000d73c:	0093      	lsls	r3, r2, #2
1000d73e:	18c3      	adds	r3, r0, r3
1000d740:	6059      	str	r1, [r3, #4]
	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
1000d742:	2120      	movs	r1, #32
1000d744:	2301      	movs	r3, #1
1000d746:	4093      	lsls	r3, r2
1000d748:	5c42      	ldrb	r2, [r0, r1]
1000d74a:	4313      	orrs	r3, r2
1000d74c:	5443      	strb	r3, [r0, r1]
}
1000d74e:	4770      	bx	lr

1000d750 <uart_enable_callback>:
 * \param[in]  module         Pointer to UART software instance struct
 * \param[in]  callback_type  Callback type given by an enum
 */
void uart_enable_callback(struct uart_module *const module,
		enum uart_callback callback_type)
{
1000d750:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
1000d752:	2221      	movs	r2, #33	; 0x21
1000d754:	2301      	movs	r3, #1
1000d756:	408b      	lsls	r3, r1
1000d758:	5c84      	ldrb	r4, [r0, r2]
1000d75a:	4323      	orrs	r3, r4
1000d75c:	5483      	strb	r3, [r0, r2]

	if (callback_type == UART_CTS_ACTIVE) {
1000d75e:	2901      	cmp	r1, #1
1000d760:	d104      	bne.n	1000d76c <uart_enable_callback+0x1c>
		module->hw->TX_INTERRUPT_MASK.reg |= UART_TX_INTERRUPT_MASK_CTS_ACTIVE_MASK;
1000d762:	6802      	ldr	r2, [r0, #0]
1000d764:	7a11      	ldrb	r1, [r2, #8]
1000d766:	2320      	movs	r3, #32
1000d768:	430b      	orrs	r3, r1
1000d76a:	7213      	strb	r3, [r2, #8]
	}
}
1000d76c:	bd10      	pop	{r4, pc}
1000d76e:	46c0      	nop			; (mov r8, r8)

1000d770 <uart_disable_callback>:
 * \param[in]  module         Pointer to UART software instance struct
 * \param[in]  callback_type  Callback type given by an enum
 */
void uart_disable_callback(struct uart_module *const module,
		enum uart_callback callback_type)
{
1000d770:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);

	/* Disable callback */
	module->callback_enable_mask &= ~(1 << callback_type);
1000d772:	2201      	movs	r2, #1
1000d774:	408a      	lsls	r2, r1
1000d776:	2421      	movs	r4, #33	; 0x21
1000d778:	5d03      	ldrb	r3, [r0, r4]
1000d77a:	4393      	bics	r3, r2
1000d77c:	5503      	strb	r3, [r0, r4]

	if (callback_type == UART_CTS_ACTIVE) {
1000d77e:	2901      	cmp	r1, #1
1000d780:	d104      	bne.n	1000d78c <uart_disable_callback+0x1c>
		module->hw->TX_INTERRUPT_MASK.reg &= ~UART_TX_INTERRUPT_MASK_CTS_ACTIVE_MASK;
1000d782:	6802      	ldr	r2, [r0, #0]
1000d784:	7a13      	ldrb	r3, [r2, #8]
1000d786:	311f      	adds	r1, #31
1000d788:	438b      	bics	r3, r1
1000d78a:	7213      	strb	r3, [r2, #8]
	}

}
1000d78c:	bd10      	pop	{r4, pc}
1000d78e:	46c0      	nop			; (mov r8, r8)

1000d790 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
1000d790:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d792:	4647      	mov	r7, r8
1000d794:	b480      	push	{r7}
1000d796:	000c      	movs	r4, r1
1000d798:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
1000d79a:	2800      	cmp	r0, #0
1000d79c:	d10d      	bne.n	1000d7ba <_read+0x2a>
		return -1;
	}

	for (; len > 0; --len) {
1000d79e:	2a00      	cmp	r2, #0
1000d7a0:	dd0e      	ble.n	1000d7c0 <_read+0x30>
1000d7a2:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
1000d7a4:	4e08      	ldr	r6, [pc, #32]	; (1000d7c8 <_read+0x38>)
1000d7a6:	4d09      	ldr	r5, [pc, #36]	; (1000d7cc <_read+0x3c>)
1000d7a8:	6830      	ldr	r0, [r6, #0]
1000d7aa:	0021      	movs	r1, r4
1000d7ac:	682b      	ldr	r3, [r5, #0]
1000d7ae:	4798      	blx	r3
		ptr++;
1000d7b0:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
1000d7b2:	42a7      	cmp	r7, r4
1000d7b4:	d1f8      	bne.n	1000d7a8 <_read+0x18>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
1000d7b6:	4640      	mov	r0, r8
1000d7b8:	e003      	b.n	1000d7c2 <_read+0x32>
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
1000d7ba:	2001      	movs	r0, #1
1000d7bc:	4240      	negs	r0, r0
1000d7be:	e000      	b.n	1000d7c2 <_read+0x32>
	}

	for (; len > 0; --len) {
1000d7c0:	2000      	movs	r0, #0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
1000d7c2:	bc04      	pop	{r2}
1000d7c4:	4690      	mov	r8, r2
1000d7c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d7c8:	1001a228 	.word	0x1001a228
1000d7cc:	1001a220 	.word	0x1001a220

1000d7d0 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
1000d7d0:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d7d2:	4647      	mov	r7, r8
1000d7d4:	b480      	push	{r7}
1000d7d6:	000e      	movs	r6, r1
1000d7d8:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
1000d7da:	3801      	subs	r0, #1
1000d7dc:	2802      	cmp	r0, #2
1000d7de:	d811      	bhi.n	1000d804 <_write+0x34>
		return -1;
	}

	for (; len != 0; --len) {
1000d7e0:	2a00      	cmp	r2, #0
1000d7e2:	d012      	beq.n	1000d80a <_write+0x3a>
1000d7e4:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
1000d7e6:	4b0c      	ldr	r3, [pc, #48]	; (1000d818 <_write+0x48>)
1000d7e8:	4698      	mov	r8, r3
1000d7ea:	4f0c      	ldr	r7, [pc, #48]	; (1000d81c <_write+0x4c>)
1000d7ec:	4643      	mov	r3, r8
1000d7ee:	6818      	ldr	r0, [r3, #0]
1000d7f0:	5d31      	ldrb	r1, [r6, r4]
1000d7f2:	683b      	ldr	r3, [r7, #0]
1000d7f4:	4798      	blx	r3
1000d7f6:	2800      	cmp	r0, #0
1000d7f8:	db09      	blt.n	1000d80e <_write+0x3e>
			return -1;
		}
		++nChars;
1000d7fa:	3401      	adds	r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
1000d7fc:	42a5      	cmp	r5, r4
1000d7fe:	d1f5      	bne.n	1000d7ec <_write+0x1c>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
1000d800:	0020      	movs	r0, r4
1000d802:	e006      	b.n	1000d812 <_write+0x42>
_write (int file, char * ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
1000d804:	2001      	movs	r0, #1
1000d806:	4240      	negs	r0, r0
1000d808:	e003      	b.n	1000d812 <_write+0x42>
	}

	for (; len != 0; --len) {
1000d80a:	2000      	movs	r0, #0
1000d80c:	e001      	b.n	1000d812 <_write+0x42>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
1000d80e:	2001      	movs	r0, #1
1000d810:	4240      	negs	r0, r0
		}
		++nChars;
	}
	return nChars;
}
1000d812:	bc04      	pop	{r2}
1000d814:	4690      	mov	r8, r2
1000d816:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d818:	1001a228 	.word	0x1001a228
1000d81c:	1001a224 	.word	0x1001a224

1000d820 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
1000d820:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
1000d822:	4a06      	ldr	r2, [pc, #24]	; (1000d83c <_sbrk+0x1c>)
1000d824:	6812      	ldr	r2, [r2, #0]
1000d826:	2a00      	cmp	r2, #0
1000d828:	d102      	bne.n	1000d830 <_sbrk+0x10>
		heap = (unsigned char *)&_end;
1000d82a:	4905      	ldr	r1, [pc, #20]	; (1000d840 <_sbrk+0x20>)
1000d82c:	4a03      	ldr	r2, [pc, #12]	; (1000d83c <_sbrk+0x1c>)
1000d82e:	6011      	str	r1, [r2, #0]
	}
	prev_heap = heap;
1000d830:	4a02      	ldr	r2, [pc, #8]	; (1000d83c <_sbrk+0x1c>)
1000d832:	6810      	ldr	r0, [r2, #0]

	heap += incr;
1000d834:	18c3      	adds	r3, r0, r3
1000d836:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
1000d838:	4770      	bx	lr
1000d83a:	46c0      	nop			; (mov r8, r8)
1000d83c:	100184c4 	.word	0x100184c4
1000d840:	1001cb30 	.word	0x1001cb30

1000d844 <_close>:
}

extern int _close(int file)
{
	return -1;
}
1000d844:	2001      	movs	r0, #1
1000d846:	4240      	negs	r0, r0
1000d848:	4770      	bx	lr
1000d84a:	46c0      	nop			; (mov r8, r8)

1000d84c <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
1000d84c:	2380      	movs	r3, #128	; 0x80
1000d84e:	019b      	lsls	r3, r3, #6
1000d850:	604b      	str	r3, [r1, #4]

	return 0;
}
1000d852:	2000      	movs	r0, #0
1000d854:	4770      	bx	lr
1000d856:	46c0      	nop			; (mov r8, r8)

1000d858 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
1000d858:	2001      	movs	r0, #1
1000d85a:	4770      	bx	lr

1000d85c <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
1000d85c:	2000      	movs	r0, #0
1000d85e:	4770      	bx	lr

1000d860 <ble_undefined_event_handler>:
	}
	return status;
}

at_ble_status_t ble_undefined_event_handler(void *params)
{
1000d860:	b510      	push	{r4, lr}
	DBG_LOG_DEV("Undefined Event Received");
1000d862:	4804      	ldr	r0, [pc, #16]	; (1000d874 <ble_undefined_event_handler+0x14>)
1000d864:	4b04      	ldr	r3, [pc, #16]	; (1000d878 <ble_undefined_event_handler+0x18>)
1000d866:	4798      	blx	r3
1000d868:	4804      	ldr	r0, [pc, #16]	; (1000d87c <ble_undefined_event_handler+0x1c>)
1000d86a:	4b05      	ldr	r3, [pc, #20]	; (1000d880 <ble_undefined_event_handler+0x20>)
1000d86c:	4798      	blx	r3
    ALL_UNUSED(params);
	return AT_BLE_SUCCESS;
}
1000d86e:	2000      	movs	r0, #0
1000d870:	bd10      	pop	{r4, pc}
1000d872:	46c0      	nop			; (mov r8, r8)
1000d874:	100165a4 	.word	0x100165a4
1000d878:	100153f9 	.word	0x100153f9
1000d87c:	100176ec 	.word	0x100176ec
1000d880:	100152d9 	.word	0x100152d9

1000d884 <ble_scan_report_handler>:
	}
}

/** @brief function handles scan report */
at_ble_status_t ble_scan_report_handler(void *params)
{
1000d884:	b510      	push	{r4, lr}
	at_ble_scan_report_t *scan_report;
	scan_report = (at_ble_scan_report_t *)params;
	if (scan_report->status == AT_BLE_SUCCESS)
1000d886:	7800      	ldrb	r0, [r0, #0]
1000d888:	2800      	cmp	r0, #0
1000d88a:	d006      	beq.n	1000d89a <ble_scan_report_handler+0x16>
		/* All scan data should be handled */
		return AT_BLE_SUCCESS;
	}
	else
	{
		DBG_LOG("Scanning  failed");
1000d88c:	4803      	ldr	r0, [pc, #12]	; (1000d89c <ble_scan_report_handler+0x18>)
1000d88e:	4b04      	ldr	r3, [pc, #16]	; (1000d8a0 <ble_scan_report_handler+0x1c>)
1000d890:	4798      	blx	r3
1000d892:	4804      	ldr	r0, [pc, #16]	; (1000d8a4 <ble_scan_report_handler+0x20>)
1000d894:	4b04      	ldr	r3, [pc, #16]	; (1000d8a8 <ble_scan_report_handler+0x24>)
1000d896:	4798      	blx	r3
	}
	return AT_BLE_FAILURE;
1000d898:	20e2      	movs	r0, #226	; 0xe2
}
1000d89a:	bd10      	pop	{r4, pc}
1000d89c:	100165a4 	.word	0x100165a4
1000d8a0:	100153f9 	.word	0x100153f9
1000d8a4:	10017708 	.word	0x10017708
1000d8a8:	100152d9 	.word	0x100152d9

1000d8ac <ble_adv_report_handler>:

/** @brief function handles advertising report */
at_ble_status_t ble_adv_report_handler(void *params)
{
1000d8ac:	b510      	push	{r4, lr}
    at_ble_adv_report_t *adv_report;
    adv_report = (at_ble_adv_report_t *)params;
    if(adv_report->status == AT_BLE_SUCCESS)
1000d8ae:	7800      	ldrb	r0, [r0, #0]
1000d8b0:	2800      	cmp	r0, #0
1000d8b2:	d006      	beq.n	1000d8c2 <ble_adv_report_handler+0x16>
    {
        return AT_BLE_SUCCESS;
    }
    else 
    {
        DBG_LOG("Advertising failed");
1000d8b4:	4803      	ldr	r0, [pc, #12]	; (1000d8c4 <ble_adv_report_handler+0x18>)
1000d8b6:	4b04      	ldr	r3, [pc, #16]	; (1000d8c8 <ble_adv_report_handler+0x1c>)
1000d8b8:	4798      	blx	r3
1000d8ba:	4804      	ldr	r0, [pc, #16]	; (1000d8cc <ble_adv_report_handler+0x20>)
1000d8bc:	4b04      	ldr	r3, [pc, #16]	; (1000d8d0 <ble_adv_report_handler+0x24>)
1000d8be:	4798      	blx	r3
    }
    return AT_BLE_FAILURE;
1000d8c0:	20e2      	movs	r0, #226	; 0xe2
}
1000d8c2:	bd10      	pop	{r4, pc}
1000d8c4:	100165a4 	.word	0x100165a4
1000d8c8:	100153f9 	.word	0x100153f9
1000d8cc:	1001771c 	.word	0x1001771c
1000d8d0:	100152d9 	.word	0x100152d9

1000d8d4 <ble_mtu_changed_indication_handler>:
	return AT_BLE_SUCCESS;
	
}

at_ble_status_t ble_mtu_changed_indication_handler(void *params)
{
1000d8d4:	b510      	push	{r4, lr}
1000d8d6:	0004      	movs	r4, r0
	at_ble_mtu_changed_ind_t *mtu_changed_ind;
	mtu_changed_ind = (at_ble_mtu_changed_ind_t *)params;
	DBG_LOG_DEV("BLE-MTU Changed, Connection Handle: %d, New Value: %d", 
1000d8d8:	4804      	ldr	r0, [pc, #16]	; (1000d8ec <ble_mtu_changed_indication_handler+0x18>)
1000d8da:	4b05      	ldr	r3, [pc, #20]	; (1000d8f0 <ble_mtu_changed_indication_handler+0x1c>)
1000d8dc:	4798      	blx	r3
1000d8de:	8862      	ldrh	r2, [r4, #2]
1000d8e0:	8821      	ldrh	r1, [r4, #0]
1000d8e2:	4804      	ldr	r0, [pc, #16]	; (1000d8f4 <ble_mtu_changed_indication_handler+0x20>)
1000d8e4:	4b04      	ldr	r3, [pc, #16]	; (1000d8f8 <ble_mtu_changed_indication_handler+0x24>)
1000d8e6:	4798      	blx	r3
										mtu_changed_ind->conhdl, 
										mtu_changed_ind->mtu_value);
	return AT_BLE_SUCCESS;
}
1000d8e8:	2000      	movs	r0, #0
1000d8ea:	bd10      	pop	{r4, pc}
1000d8ec:	100165a4 	.word	0x100165a4
1000d8f0:	100153f9 	.word	0x100153f9
1000d8f4:	10017730 	.word	0x10017730
1000d8f8:	100152d9 	.word	0x100152d9

1000d8fc <ble_mtu_changed_cmd_complete_handler>:

at_ble_status_t ble_mtu_changed_cmd_complete_handler(void *params)
{
1000d8fc:	b570      	push	{r4, r5, r6, lr}
1000d8fe:	0004      	movs	r4, r0
	at_ble_cmd_complete_event_t *cmd_complete_event;
	cmd_complete_event = (at_ble_cmd_complete_event_t *)params;
	
	if (cmd_complete_event->status == AT_BLE_SUCCESS)
1000d900:	78c5      	ldrb	r5, [r0, #3]
1000d902:	2d00      	cmp	r5, #0
1000d904:	d108      	bne.n	1000d918 <ble_mtu_changed_cmd_complete_handler+0x1c>
	{
		DBG_LOG_DEV("MTU Changed, Connection Handle:%d, Operation:%d", 
1000d906:	480a      	ldr	r0, [pc, #40]	; (1000d930 <ble_mtu_changed_cmd_complete_handler+0x34>)
1000d908:	4b0a      	ldr	r3, [pc, #40]	; (1000d934 <ble_mtu_changed_cmd_complete_handler+0x38>)
1000d90a:	4798      	blx	r3
1000d90c:	78a2      	ldrb	r2, [r4, #2]
1000d90e:	8821      	ldrh	r1, [r4, #0]
1000d910:	4809      	ldr	r0, [pc, #36]	; (1000d938 <ble_mtu_changed_cmd_complete_handler+0x3c>)
1000d912:	4b0a      	ldr	r3, [pc, #40]	; (1000d93c <ble_mtu_changed_cmd_complete_handler+0x40>)
1000d914:	4798      	blx	r3
		cmd_complete_event->conn_handle, 
		cmd_complete_event->operation);
		return AT_BLE_SUCCESS;
1000d916:	e008      	b.n	1000d92a <ble_mtu_changed_cmd_complete_handler+0x2e>
	}
	else
	{
		DBG_LOG("MTU Change Failed, Connection Handle:%d, Operation:%d",
1000d918:	4805      	ldr	r0, [pc, #20]	; (1000d930 <ble_mtu_changed_cmd_complete_handler+0x34>)
1000d91a:	4b06      	ldr	r3, [pc, #24]	; (1000d934 <ble_mtu_changed_cmd_complete_handler+0x38>)
1000d91c:	4798      	blx	r3
1000d91e:	78a2      	ldrb	r2, [r4, #2]
1000d920:	8821      	ldrh	r1, [r4, #0]
1000d922:	4807      	ldr	r0, [pc, #28]	; (1000d940 <ble_mtu_changed_cmd_complete_handler+0x44>)
1000d924:	4b05      	ldr	r3, [pc, #20]	; (1000d93c <ble_mtu_changed_cmd_complete_handler+0x40>)
1000d926:	4798      	blx	r3
		cmd_complete_event->conn_handle,
		cmd_complete_event->operation);
	}
	return AT_BLE_FAILURE;
1000d928:	25e2      	movs	r5, #226	; 0xe2
}
1000d92a:	0028      	movs	r0, r5
1000d92c:	bd70      	pop	{r4, r5, r6, pc}
1000d92e:	46c0      	nop			; (mov r8, r8)
1000d930:	100165a4 	.word	0x100165a4
1000d934:	100153f9 	.word	0x100153f9
1000d938:	10017768 	.word	0x10017768
1000d93c:	100152d9 	.word	0x100152d9
1000d940:	10017798 	.word	0x10017798

1000d944 <ble_characteristic_write_cmd_complete_handler>:

at_ble_status_t ble_characteristic_write_cmd_complete_handler(void *params)
{
1000d944:	b570      	push	{r4, r5, r6, lr}
1000d946:	0004      	movs	r4, r0
	at_ble_cmd_complete_event_t *cmd_complete_event;
	cmd_complete_event = (at_ble_cmd_complete_event_t *)params;
	if (cmd_complete_event->status == AT_BLE_SUCCESS)
1000d948:	78c5      	ldrb	r5, [r0, #3]
1000d94a:	2d00      	cmp	r5, #0
1000d94c:	d108      	bne.n	1000d960 <ble_characteristic_write_cmd_complete_handler+0x1c>
	{
		DBG_LOG_DEV("Char Write Cmd Complete, Connection Handle:%d, Operation:%d",
1000d94e:	480a      	ldr	r0, [pc, #40]	; (1000d978 <ble_characteristic_write_cmd_complete_handler+0x34>)
1000d950:	4b0a      	ldr	r3, [pc, #40]	; (1000d97c <ble_characteristic_write_cmd_complete_handler+0x38>)
1000d952:	4798      	blx	r3
1000d954:	78a2      	ldrb	r2, [r4, #2]
1000d956:	8821      	ldrh	r1, [r4, #0]
1000d958:	4809      	ldr	r0, [pc, #36]	; (1000d980 <ble_characteristic_write_cmd_complete_handler+0x3c>)
1000d95a:	4b0a      	ldr	r3, [pc, #40]	; (1000d984 <ble_characteristic_write_cmd_complete_handler+0x40>)
1000d95c:	4798      	blx	r3
		cmd_complete_event->conn_handle,
		cmd_complete_event->operation);
		return AT_BLE_SUCCESS;
1000d95e:	e008      	b.n	1000d972 <ble_characteristic_write_cmd_complete_handler+0x2e>
	}
	else
	{
		DBG_LOG_DEV("Char Write Cmd Failed, Connection Handle:%d, Operation:%d",
1000d960:	4805      	ldr	r0, [pc, #20]	; (1000d978 <ble_characteristic_write_cmd_complete_handler+0x34>)
1000d962:	4b06      	ldr	r3, [pc, #24]	; (1000d97c <ble_characteristic_write_cmd_complete_handler+0x38>)
1000d964:	4798      	blx	r3
1000d966:	78a2      	ldrb	r2, [r4, #2]
1000d968:	8821      	ldrh	r1, [r4, #0]
1000d96a:	4807      	ldr	r0, [pc, #28]	; (1000d988 <ble_characteristic_write_cmd_complete_handler+0x44>)
1000d96c:	4b05      	ldr	r3, [pc, #20]	; (1000d984 <ble_characteristic_write_cmd_complete_handler+0x40>)
1000d96e:	4798      	blx	r3
		cmd_complete_event->conn_handle,
		cmd_complete_event->operation);
	}
	return AT_BLE_FAILURE;
1000d970:	25e2      	movs	r5, #226	; 0xe2
}
1000d972:	0028      	movs	r0, r5
1000d974:	bd70      	pop	{r4, r5, r6, pc}
1000d976:	46c0      	nop			; (mov r8, r8)
1000d978:	100165a4 	.word	0x100165a4
1000d97c:	100153f9 	.word	0x100153f9
1000d980:	100177d0 	.word	0x100177d0
1000d984:	100152d9 	.word	0x100152d9
1000d988:	1001780c 	.word	0x1001780c

1000d98c <ble_disconnected_state_handler>:

/** @brief function handles disconnection event received from stack */
at_ble_status_t ble_disconnected_state_handler(void *params)
{
1000d98c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000d98e:	0006      	movs	r6, r0
1000d990:	4c1d      	ldr	r4, [pc, #116]	; (1000da08 <ble_disconnected_state_handler+0x7c>)
1000d992:	239b      	movs	r3, #155	; 0x9b
1000d994:	009b      	lsls	r3, r3, #2
1000d996:	18e7      	adds	r7, r4, r3
1000d998:	0025      	movs	r5, r4
	uint8_t idx;
	disconnect = (at_ble_disconnected_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == disconnect->handle) && 
1000d99a:	0023      	movs	r3, r4
1000d99c:	3b56      	subs	r3, #86	; 0x56
1000d99e:	881a      	ldrh	r2, [r3, #0]
1000d9a0:	8833      	ldrh	r3, [r6, #0]
1000d9a2:	429a      	cmp	r2, r3
1000d9a4:	d122      	bne.n	1000d9ec <ble_disconnected_state_handler+0x60>
		((ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRED) || (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_COMPLETED)))
1000d9a6:	7823      	ldrb	r3, [r4, #0]
	uint8_t idx;
	disconnect = (at_ble_disconnected_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == disconnect->handle) && 
1000d9a8:	2b05      	cmp	r3, #5
1000d9aa:	d001      	beq.n	1000d9b0 <ble_disconnected_state_handler+0x24>
		((ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRED) || (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_COMPLETED)))
1000d9ac:	2b08      	cmp	r3, #8
1000d9ae:	d102      	bne.n	1000d9b6 <ble_disconnected_state_handler+0x2a>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_DISCONNECTED;
1000d9b0:	2301      	movs	r3, #1
1000d9b2:	702b      	strb	r3, [r5, #0]
1000d9b4:	e01a      	b.n	1000d9ec <ble_disconnected_state_handler+0x60>
		}		
		else if(ble_dev_info[idx].conn_info.handle == disconnect->handle)
		{
			switch (ble_dev_info[idx].conn_state)
1000d9b6:	2b07      	cmp	r3, #7
1000d9b8:	d80f      	bhi.n	1000d9da <ble_disconnected_state_handler+0x4e>
1000d9ba:	009b      	lsls	r3, r3, #2
1000d9bc:	4a13      	ldr	r2, [pc, #76]	; (1000da0c <ble_disconnected_state_handler+0x80>)
1000d9be:	58d3      	ldr	r3, [r2, r3]
1000d9c0:	469f      	mov	pc, r3
				case BLE_DEVICE_PAIRING_FAILED:
				case BLE_DEVICE_ENCRYPTION_STATE:
				case BLE_DEVICE_ENCRYPTION_FAILED:
				{
					/* Device is not paired so remove the device information */
					ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
1000d9c2:	2300      	movs	r3, #0
1000d9c4:	7023      	strb	r3, [r4, #0]
					if (ble_device_count > 0)
1000d9c6:	4b12      	ldr	r3, [pc, #72]	; (1000da10 <ble_disconnected_state_handler+0x84>)
1000d9c8:	781b      	ldrb	r3, [r3, #0]
1000d9ca:	2b00      	cmp	r3, #0
1000d9cc:	d00e      	beq.n	1000d9ec <ble_disconnected_state_handler+0x60>
					{
						ble_device_count--;
1000d9ce:	4a10      	ldr	r2, [pc, #64]	; (1000da10 <ble_disconnected_state_handler+0x84>)
1000d9d0:	7813      	ldrb	r3, [r2, #0]
1000d9d2:	3b01      	subs	r3, #1
1000d9d4:	b2db      	uxtb	r3, r3
1000d9d6:	7013      	strb	r3, [r2, #0]
1000d9d8:	e008      	b.n	1000d9ec <ble_disconnected_state_handler+0x60>
				
				case BLE_DEVICE_DISCONNECTED:
				break;
				
				default:
				DBG_LOG_DEV("State Not Handled %d", ble_dev_info[idx].conn_state);
1000d9da:	480e      	ldr	r0, [pc, #56]	; (1000da14 <ble_disconnected_state_handler+0x88>)
1000d9dc:	4b0e      	ldr	r3, [pc, #56]	; (1000da18 <ble_disconnected_state_handler+0x8c>)
1000d9de:	4798      	blx	r3
1000d9e0:	7829      	ldrb	r1, [r5, #0]
1000d9e2:	480e      	ldr	r0, [pc, #56]	; (1000da1c <ble_disconnected_state_handler+0x90>)
1000d9e4:	4b0e      	ldr	r3, [pc, #56]	; (1000da20 <ble_disconnected_state_handler+0x94>)
1000d9e6:	4798      	blx	r3
				ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
1000d9e8:	2300      	movs	r3, #0
1000d9ea:	702b      	strb	r3, [r5, #0]
1000d9ec:	347c      	adds	r4, #124	; 0x7c
{
	at_ble_disconnected_t *disconnect;
	uint8_t idx;
	disconnect = (at_ble_disconnected_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000d9ee:	42bc      	cmp	r4, r7
1000d9f0:	d1d2      	bne.n	1000d998 <ble_disconnected_state_handler+0xc>
				break;				
			}
		} 
	}
	
	DBG_LOG("Device disconnected Reason:0x%02x Handle=0x%x", disconnect->reason, disconnect->handle);
1000d9f2:	4808      	ldr	r0, [pc, #32]	; (1000da14 <ble_disconnected_state_handler+0x88>)
1000d9f4:	4b08      	ldr	r3, [pc, #32]	; (1000da18 <ble_disconnected_state_handler+0x8c>)
1000d9f6:	4798      	blx	r3
1000d9f8:	8832      	ldrh	r2, [r6, #0]
1000d9fa:	78b1      	ldrb	r1, [r6, #2]
1000d9fc:	4809      	ldr	r0, [pc, #36]	; (1000da24 <ble_disconnected_state_handler+0x98>)
1000d9fe:	4b08      	ldr	r3, [pc, #32]	; (1000da20 <ble_disconnected_state_handler+0x94>)
1000da00:	4798      	blx	r3
	return AT_BLE_SUCCESS;
}
1000da02:	2000      	movs	r0, #0
1000da04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000da06:	46c0      	nop			; (mov r8, r8)
1000da08:	1001a2a2 	.word	0x1001a2a2
1000da0c:	10017588 	.word	0x10017588
1000da10:	1001a4b0 	.word	0x1001a4b0
1000da14:	100165a4 	.word	0x100165a4
1000da18:	100153f9 	.word	0x100153f9
1000da1c:	10017848 	.word	0x10017848
1000da20:	100152d9 	.word	0x100152d9
1000da24:	10017860 	.word	0x10017860

1000da28 <ble_conn_param_update>:

/** @brief connection update parameter function */
at_ble_status_t ble_conn_param_update(void *params)
{
1000da28:	b510      	push	{r4, lr}
	at_ble_conn_param_update_done_t * conn_param_update;
	conn_param_update = (at_ble_conn_param_update_done_t *)params;
	DBG_LOG_DEV("AT_BLE_CONN_PARAM_UPDATE ");
1000da2a:	4804      	ldr	r0, [pc, #16]	; (1000da3c <ble_conn_param_update+0x14>)
1000da2c:	4b04      	ldr	r3, [pc, #16]	; (1000da40 <ble_conn_param_update+0x18>)
1000da2e:	4798      	blx	r3
1000da30:	4804      	ldr	r0, [pc, #16]	; (1000da44 <ble_conn_param_update+0x1c>)
1000da32:	4b05      	ldr	r3, [pc, #20]	; (1000da48 <ble_conn_param_update+0x20>)
1000da34:	4798      	blx	r3
	ALL_UNUSED(conn_param_update);  //To avoid compiler warning
	return AT_BLE_SUCCESS;
}
1000da36:	2000      	movs	r0, #0
1000da38:	bd10      	pop	{r4, pc}
1000da3a:	46c0      	nop			; (mov r8, r8)
1000da3c:	100165a4 	.word	0x100165a4
1000da40:	100153f9 	.word	0x100153f9
1000da44:	10017890 	.word	0x10017890
1000da48:	100152d9 	.word	0x100152d9

1000da4c <ble_encryption_status_change_handler>:
	return AT_BLE_SUCCESS;
}

/** @brief function handles encryption status change */
at_ble_status_t ble_encryption_status_change_handler(void *params)
{
1000da4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000da4e:	0006      	movs	r6, r0
	
	enc_status = (at_ble_encryption_status_changed_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == enc_status->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_STATE))
1000da50:	8801      	ldrh	r1, [r0, #0]
1000da52:	4b28      	ldr	r3, [pc, #160]	; (1000daf4 <ble_encryption_status_change_handler+0xa8>)
	uint8_t idx;
	bool device_found = false;
	
	enc_status = (at_ble_encryption_status_changed_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000da54:	2400      	movs	r4, #0
	{
		if((ble_dev_info[idx].conn_info.handle == enc_status->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_STATE))
1000da56:	891a      	ldrh	r2, [r3, #8]
1000da58:	428a      	cmp	r2, r1
1000da5a:	d104      	bne.n	1000da66 <ble_encryption_status_change_handler+0x1a>
1000da5c:	001a      	movs	r2, r3
1000da5e:	325e      	adds	r2, #94	; 0x5e
1000da60:	7812      	ldrb	r2, [r2, #0]
1000da62:	2a06      	cmp	r2, #6
1000da64:	d02e      	beq.n	1000dac4 <ble_encryption_status_change_handler+0x78>
	uint8_t idx;
	bool device_found = false;
	
	enc_status = (at_ble_encryption_status_changed_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000da66:	3401      	adds	r4, #1
1000da68:	b2e4      	uxtb	r4, r4
1000da6a:	337c      	adds	r3, #124	; 0x7c
1000da6c:	2c05      	cmp	r4, #5
1000da6e:	d1f2      	bne.n	1000da56 <ble_encryption_status_change_handler+0xa>
1000da70:	e039      	b.n	1000dae6 <ble_encryption_status_change_handler+0x9a>
			return AT_BLE_FAILURE;
		}
	}
	else
	{
		ble_dev_info[idx].bond_info.status = enc_status->status;
1000da72:	4920      	ldr	r1, [pc, #128]	; (1000daf4 <ble_encryption_status_change_handler+0xa8>)
1000da74:	0163      	lsls	r3, r4, #5
1000da76:	1b1a      	subs	r2, r3, r4
1000da78:	0092      	lsls	r2, r2, #2
1000da7a:	188a      	adds	r2, r1, r2
1000da7c:	7615      	strb	r5, [r2, #24]
		ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_FAILED;
1000da7e:	0014      	movs	r4, r2
1000da80:	345e      	adds	r4, #94	; 0x5e
1000da82:	2307      	movs	r3, #7
1000da84:	7023      	strb	r3, [r4, #0]
		DBG_LOG("Encryption failed");
1000da86:	481c      	ldr	r0, [pc, #112]	; (1000daf8 <ble_encryption_status_change_handler+0xac>)
1000da88:	4b1c      	ldr	r3, [pc, #112]	; (1000dafc <ble_encryption_status_change_handler+0xb0>)
1000da8a:	4798      	blx	r3
1000da8c:	481c      	ldr	r0, [pc, #112]	; (1000db00 <ble_encryption_status_change_handler+0xb4>)
1000da8e:	4b1d      	ldr	r3, [pc, #116]	; (1000db04 <ble_encryption_status_change_handler+0xb8>)
1000da90:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000da92:	25e2      	movs	r5, #226	; 0xe2
1000da94:	e02b      	b.n	1000daee <ble_encryption_status_change_handler+0xa2>
		}
	}
	
	if(enc_status->status == AT_BLE_SUCCESS)
	{
		DBG_LOG("Encryption completed successfully");
1000da96:	4818      	ldr	r0, [pc, #96]	; (1000daf8 <ble_encryption_status_change_handler+0xac>)
1000da98:	4b18      	ldr	r3, [pc, #96]	; (1000dafc <ble_encryption_status_change_handler+0xb0>)
1000da9a:	4798      	blx	r3
1000da9c:	481a      	ldr	r0, [pc, #104]	; (1000db08 <ble_encryption_status_change_handler+0xbc>)
1000da9e:	4b19      	ldr	r3, [pc, #100]	; (1000db04 <ble_encryption_status_change_handler+0xb8>)
1000daa0:	4798      	blx	r3
		if (device_found)
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_COMPLETED;
1000daa2:	4914      	ldr	r1, [pc, #80]	; (1000daf4 <ble_encryption_status_change_handler+0xa8>)
1000daa4:	0163      	lsls	r3, r4, #5
1000daa6:	1b1a      	subs	r2, r3, r4
1000daa8:	0092      	lsls	r2, r2, #2
1000daaa:	188a      	adds	r2, r1, r2
1000daac:	0010      	movs	r0, r2
1000daae:	305e      	adds	r0, #94	; 0x5e
1000dab0:	2708      	movs	r7, #8
1000dab2:	7007      	strb	r7, [r0, #0]
			ble_dev_info[idx].bond_info.auth = enc_status->authen;
1000dab4:	78f0      	ldrb	r0, [r6, #3]
1000dab6:	7510      	strb	r0, [r2, #20]
			ble_dev_info[idx].bond_info.status = enc_status->status;
1000dab8:	78b2      	ldrb	r2, [r6, #2]
1000daba:	1b1c      	subs	r4, r3, r4
1000dabc:	00a4      	lsls	r4, r4, #2
1000dabe:	190c      	adds	r4, r1, r4
1000dac0:	7622      	strb	r2, [r4, #24]
		ble_dev_info[idx].bond_info.status = enc_status->status;
		ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_FAILED;
		DBG_LOG("Encryption failed");
		return AT_BLE_FAILURE;
	}
	return AT_BLE_SUCCESS;
1000dac2:	e014      	b.n	1000daee <ble_encryption_status_change_handler+0xa2>
			device_found = true;
			break;
		}
	}
	
	if(enc_status->status == AT_BLE_SUCCESS)
1000dac4:	78b5      	ldrb	r5, [r6, #2]
1000dac6:	2d00      	cmp	r5, #0
1000dac8:	d0e5      	beq.n	1000da96 <ble_encryption_status_change_handler+0x4a>
1000daca:	e7d2      	b.n	1000da72 <ble_encryption_status_change_handler+0x26>
	{
		DBG_LOG("Encryption completed successfully");
1000dacc:	4e0a      	ldr	r6, [pc, #40]	; (1000daf8 <ble_encryption_status_change_handler+0xac>)
1000dace:	0030      	movs	r0, r6
1000dad0:	4d0a      	ldr	r5, [pc, #40]	; (1000dafc <ble_encryption_status_change_handler+0xb0>)
1000dad2:	47a8      	blx	r5
1000dad4:	480c      	ldr	r0, [pc, #48]	; (1000db08 <ble_encryption_status_change_handler+0xbc>)
1000dad6:	4c0b      	ldr	r4, [pc, #44]	; (1000db04 <ble_encryption_status_change_handler+0xb8>)
1000dad8:	47a0      	blx	r4
			ble_dev_info[idx].bond_info.auth = enc_status->authen;
			ble_dev_info[idx].bond_info.status = enc_status->status;
		}
		else
		{
			DBG_LOG("BLE Device not found encryption info");
1000dada:	0030      	movs	r0, r6
1000dadc:	47a8      	blx	r5
1000dade:	480b      	ldr	r0, [pc, #44]	; (1000db0c <ble_encryption_status_change_handler+0xc0>)
1000dae0:	47a0      	blx	r4
			return AT_BLE_FAILURE;
1000dae2:	25e2      	movs	r5, #226	; 0xe2
1000dae4:	e003      	b.n	1000daee <ble_encryption_status_change_handler+0xa2>
			device_found = true;
			break;
		}
	}
	
	if(enc_status->status == AT_BLE_SUCCESS)
1000dae6:	78b5      	ldrb	r5, [r6, #2]
1000dae8:	2d00      	cmp	r5, #0
1000daea:	d1c2      	bne.n	1000da72 <ble_encryption_status_change_handler+0x26>
1000daec:	e7ee      	b.n	1000dacc <ble_encryption_status_change_handler+0x80>
		ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_FAILED;
		DBG_LOG("Encryption failed");
		return AT_BLE_FAILURE;
	}
	return AT_BLE_SUCCESS;
}
1000daee:	0028      	movs	r0, r5
1000daf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000daf2:	46c0      	nop			; (mov r8, r8)
1000daf4:	1001a244 	.word	0x1001a244
1000daf8:	100165a4 	.word	0x100165a4
1000dafc:	100153f9 	.word	0x100153f9
1000db00:	100178ac 	.word	0x100178ac
1000db04:	100152d9 	.word	0x100152d9
1000db08:	100178c0 	.word	0x100178c0
1000db0c:	100178e4 	.word	0x100178e4

1000db10 <ble_scan_info_handler>:
	return found;
}
#endif
/** @brief function handling scaned information */
at_ble_status_t ble_scan_info_handler(void *params)
{
1000db10:	b530      	push	{r4, r5, lr}
1000db12:	b085      	sub	sp, #20
1000db14:	0004      	movs	r4, r0
	at_ble_scan_info_t *scan_param;
	scan_param = (at_ble_scan_info_t *)params;
	if(scan_response_count < MAX_SCAN_DEVICE)
1000db16:	4b1f      	ldr	r3, [pc, #124]	; (1000db94 <ble_scan_info_handler+0x84>)
1000db18:	781b      	ldrb	r3, [r3, #0]
1000db1a:	b2db      	uxtb	r3, r3
1000db1c:	2b13      	cmp	r3, #19
1000db1e:	d824      	bhi.n	1000db6a <ble_scan_info_handler+0x5a>
	{
		memcpy((uint8_t *)&scan_info[scan_response_count], scan_param, sizeof(at_ble_scan_info_t));
1000db20:	4d1c      	ldr	r5, [pc, #112]	; (1000db94 <ble_scan_info_handler+0x84>)
1000db22:	782b      	ldrb	r3, [r5, #0]
1000db24:	b2db      	uxtb	r3, r3
1000db26:	0098      	lsls	r0, r3, #2
1000db28:	18c0      	adds	r0, r0, r3
1000db2a:	00c0      	lsls	r0, r0, #3
1000db2c:	18c3      	adds	r3, r0, r3
1000db2e:	481a      	ldr	r0, [pc, #104]	; (1000db98 <ble_scan_info_handler+0x88>)
1000db30:	1818      	adds	r0, r3, r0
1000db32:	2229      	movs	r2, #41	; 0x29
1000db34:	0021      	movs	r1, r4
1000db36:	4b19      	ldr	r3, [pc, #100]	; (1000db9c <ble_scan_info_handler+0x8c>)
1000db38:	4798      	blx	r3
		DBG_LOG_DEV("Info:Device found address [%d]  0x%02X%02X%02X%02X%02X%02X ",
1000db3a:	4819      	ldr	r0, [pc, #100]	; (1000dba0 <ble_scan_info_handler+0x90>)
1000db3c:	4b19      	ldr	r3, [pc, #100]	; (1000dba4 <ble_scan_info_handler+0x94>)
1000db3e:	4798      	blx	r3
1000db40:	7829      	ldrb	r1, [r5, #0]
1000db42:	b2c9      	uxtb	r1, r1
1000db44:	79a3      	ldrb	r3, [r4, #6]
1000db46:	79e2      	ldrb	r2, [r4, #7]
1000db48:	78a0      	ldrb	r0, [r4, #2]
1000db4a:	9003      	str	r0, [sp, #12]
1000db4c:	78e0      	ldrb	r0, [r4, #3]
1000db4e:	9002      	str	r0, [sp, #8]
1000db50:	7920      	ldrb	r0, [r4, #4]
1000db52:	9001      	str	r0, [sp, #4]
1000db54:	7960      	ldrb	r0, [r4, #5]
1000db56:	9000      	str	r0, [sp, #0]
1000db58:	4813      	ldr	r0, [pc, #76]	; (1000dba8 <ble_scan_info_handler+0x98>)
1000db5a:	4c14      	ldr	r4, [pc, #80]	; (1000dbac <ble_scan_info_handler+0x9c>)
1000db5c:	47a0      	blx	r4
		scan_param->dev_addr.addr[4],
		scan_param->dev_addr.addr[3],
		scan_param->dev_addr.addr[2],
		scan_param->dev_addr.addr[1],
		scan_param->dev_addr.addr[0]);
		scan_response_count++;
1000db5e:	782b      	ldrb	r3, [r5, #0]
1000db60:	3301      	adds	r3, #1
1000db62:	b2db      	uxtb	r3, r3
1000db64:	702b      	strb	r3, [r5, #0]
		return AT_BLE_SUCCESS;
1000db66:	2300      	movs	r3, #0
1000db68:	e011      	b.n	1000db8e <ble_scan_info_handler+0x7e>
	}
	else
	{
		DBG_LOG("Info:maximum no.of scan device reached...Stopping Scan");
1000db6a:	480d      	ldr	r0, [pc, #52]	; (1000dba0 <ble_scan_info_handler+0x90>)
1000db6c:	4b0d      	ldr	r3, [pc, #52]	; (1000dba4 <ble_scan_info_handler+0x94>)
1000db6e:	4798      	blx	r3
1000db70:	480f      	ldr	r0, [pc, #60]	; (1000dbb0 <ble_scan_info_handler+0xa0>)
1000db72:	4b0e      	ldr	r3, [pc, #56]	; (1000dbac <ble_scan_info_handler+0x9c>)
1000db74:	4798      	blx	r3
		if(at_ble_scan_stop() != AT_BLE_SUCCESS)
1000db76:	4b0f      	ldr	r3, [pc, #60]	; (1000dbb4 <ble_scan_info_handler+0xa4>)
1000db78:	4798      	blx	r3
				}
			}
		}
	
		#endif
		return AT_BLE_FAILURE;
1000db7a:	23e2      	movs	r3, #226	; 0xe2
		return AT_BLE_SUCCESS;
	}
	else
	{
		DBG_LOG("Info:maximum no.of scan device reached...Stopping Scan");
		if(at_ble_scan_stop() != AT_BLE_SUCCESS)
1000db7c:	2800      	cmp	r0, #0
1000db7e:	d006      	beq.n	1000db8e <ble_scan_info_handler+0x7e>
		{
			DBG_LOG("Failed to stop scanning");
1000db80:	4807      	ldr	r0, [pc, #28]	; (1000dba0 <ble_scan_info_handler+0x90>)
1000db82:	4b08      	ldr	r3, [pc, #32]	; (1000dba4 <ble_scan_info_handler+0x94>)
1000db84:	4798      	blx	r3
1000db86:	480c      	ldr	r0, [pc, #48]	; (1000dbb8 <ble_scan_info_handler+0xa8>)
1000db88:	4b08      	ldr	r3, [pc, #32]	; (1000dbac <ble_scan_info_handler+0x9c>)
1000db8a:	4798      	blx	r3
				}
			}
		}
	
		#endif
		return AT_BLE_FAILURE;
1000db8c:	23e2      	movs	r3, #226	; 0xe2
	}
}
1000db8e:	0018      	movs	r0, r3
1000db90:	b005      	add	sp, #20
1000db92:	bd30      	pop	{r4, r5, pc}
1000db94:	10018dac 	.word	0x10018dac
1000db98:	1001a528 	.word	0x1001a528
1000db9c:	1001517f 	.word	0x1001517f
1000dba0:	100165a4 	.word	0x100165a4
1000dba4:	100153f9 	.word	0x100153f9
1000dba8:	1001790c 	.word	0x1001790c
1000dbac:	100152d9 	.word	0x100152d9
1000dbb0:	10017948 	.word	0x10017948
1000dbb4:	100109a1 	.word	0x100109a1
1000dbb8:	10017980 	.word	0x10017980

1000dbbc <ble_pair_done_handler>:
	return AT_BLE_SUCCESS;	
}

/** @brief function handles pair done event */
at_ble_status_t ble_pair_done_handler(void *params)
{
1000dbbc:	b5f0      	push	{r4, r5, r6, r7, lr}
1000dbbe:	465f      	mov	r7, fp
1000dbc0:	4656      	mov	r6, sl
1000dbc2:	464d      	mov	r5, r9
1000dbc4:	4644      	mov	r4, r8
1000dbc6:	b4f0      	push	{r4, r5, r6, r7}
1000dbc8:	b083      	sub	sp, #12
1000dbca:	0005      	movs	r5, r0
	bool device_found = false;
	pairing_params = (at_ble_pair_done_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == pairing_params->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRING))
1000dbcc:	8841      	ldrh	r1, [r0, #2]
1000dbce:	4b59      	ldr	r3, [pc, #356]	; (1000dd34 <ble_pair_done_handler+0x178>)
	at_ble_pair_done_t *pairing_params;
	uint8_t idx;
	bool device_found = false;
	pairing_params = (at_ble_pair_done_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000dbd0:	2400      	movs	r4, #0
	{
		if((ble_dev_info[idx].conn_info.handle == pairing_params->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRING))
1000dbd2:	891a      	ldrh	r2, [r3, #8]
1000dbd4:	428a      	cmp	r2, r1
1000dbd6:	d105      	bne.n	1000dbe4 <ble_pair_done_handler+0x28>
1000dbd8:	001a      	movs	r2, r3
1000dbda:	325e      	adds	r2, #94	; 0x5e
1000dbdc:	7812      	ldrb	r2, [r2, #0]
1000dbde:	2a03      	cmp	r2, #3
1000dbe0:	d100      	bne.n	1000dbe4 <ble_pair_done_handler+0x28>
1000dbe2:	e09a      	b.n	1000dd1a <ble_pair_done_handler+0x15e>
	at_ble_pair_done_t *pairing_params;
	uint8_t idx;
	bool device_found = false;
	pairing_params = (at_ble_pair_done_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000dbe4:	3401      	adds	r4, #1
1000dbe6:	b2e4      	uxtb	r4, r4
1000dbe8:	337c      	adds	r3, #124	; 0x7c
1000dbea:	2c05      	cmp	r4, #5
1000dbec:	d1f1      	bne.n	1000dbd2 <ble_pair_done_handler+0x16>
1000dbee:	e057      	b.n	1000dca0 <ble_pair_done_handler+0xe4>
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_ltk, (uint8_t *)&pairing_params->peer_ltk, sizeof(at_ble_LTK_t));
			
			DBG_LOG_DEV("LTK: ");
			for (idx = 0; idx < 16; idx++)
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_ltk.key[idx]);
1000dbf0:	7821      	ldrb	r1, [r4, #0]
1000dbf2:	0030      	movs	r0, r6
1000dbf4:	47b8      	blx	r7
1000dbf6:	3401      	adds	r4, #1
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_csrk, (uint8_t *)&pairing_params->peer_csrk, sizeof(at_ble_CSRK_t));
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_irk, (uint8_t *)&pairing_params->peer_irk, sizeof(at_ble_IRK_t));
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_ltk, (uint8_t *)&pairing_params->peer_ltk, sizeof(at_ble_LTK_t));
			
			DBG_LOG_DEV("LTK: ");
			for (idx = 0; idx < 16; idx++)
1000dbf8:	454c      	cmp	r4, r9
1000dbfa:	d1f9      	bne.n	1000dbf0 <ble_pair_done_handler+0x34>
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_ltk.key[idx]);
				
			}
			DBG_LOG_DEV("CSRK: ");
1000dbfc:	484e      	ldr	r0, [pc, #312]	; (1000dd38 <ble_pair_done_handler+0x17c>)
1000dbfe:	4b4f      	ldr	r3, [pc, #316]	; (1000dd3c <ble_pair_done_handler+0x180>)
1000dc00:	4798      	blx	r3
1000dc02:	484f      	ldr	r0, [pc, #316]	; (1000dd40 <ble_pair_done_handler+0x184>)
1000dc04:	4b4f      	ldr	r3, [pc, #316]	; (1000dd44 <ble_pair_done_handler+0x188>)
1000dc06:	4798      	blx	r3
1000dc08:	002e      	movs	r6, r5
1000dc0a:	3622      	adds	r6, #34	; 0x22
1000dc0c:	002c      	movs	r4, r5
1000dc0e:	3432      	adds	r4, #50	; 0x32
			for (idx = 0; idx < 16; idx++)
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_csrk.key[idx]);
1000dc10:	4f4c      	ldr	r7, [pc, #304]	; (1000dd44 <ble_pair_done_handler+0x188>)
1000dc12:	7831      	ldrb	r1, [r6, #0]
1000dc14:	484c      	ldr	r0, [pc, #304]	; (1000dd48 <ble_pair_done_handler+0x18c>)
1000dc16:	47b8      	blx	r7
1000dc18:	3601      	adds	r6, #1
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_ltk.key[idx]);
				
			}
			DBG_LOG_DEV("CSRK: ");
			for (idx = 0; idx < 16; idx++)
1000dc1a:	42a6      	cmp	r6, r4
1000dc1c:	d1f9      	bne.n	1000dc12 <ble_pair_done_handler+0x56>
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_csrk.key[idx]);
				
			}
			DBG_LOG_DEV("IRK:");
1000dc1e:	4846      	ldr	r0, [pc, #280]	; (1000dd38 <ble_pair_done_handler+0x17c>)
1000dc20:	4b46      	ldr	r3, [pc, #280]	; (1000dd3c <ble_pair_done_handler+0x180>)
1000dc22:	4798      	blx	r3
1000dc24:	4849      	ldr	r0, [pc, #292]	; (1000dd4c <ble_pair_done_handler+0x190>)
1000dc26:	4b47      	ldr	r3, [pc, #284]	; (1000dd44 <ble_pair_done_handler+0x188>)
1000dc28:	4798      	blx	r3
1000dc2a:	3542      	adds	r5, #66	; 0x42
1000dc2c:	002f      	movs	r7, r5
			for (idx = 0; idx < 16; idx++)
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_irk.key[idx]);
1000dc2e:	4e46      	ldr	r6, [pc, #280]	; (1000dd48 <ble_pair_done_handler+0x18c>)
1000dc30:	4d44      	ldr	r5, [pc, #272]	; (1000dd44 <ble_pair_done_handler+0x188>)
1000dc32:	7821      	ldrb	r1, [r4, #0]
1000dc34:	0030      	movs	r0, r6
1000dc36:	47a8      	blx	r5
1000dc38:	3401      	adds	r4, #1
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_csrk.key[idx]);
				
			}
			DBG_LOG_DEV("IRK:");
			for (idx = 0; idx < 16; idx++)
1000dc3a:	42bc      	cmp	r4, r7
1000dc3c:	d1f9      	bne.n	1000dc32 <ble_pair_done_handler+0x76>
1000dc3e:	e071      	b.n	1000dd24 <ble_pair_done_handler+0x168>
			return AT_BLE_FAILURE;
		}		
	}
	else
	{
		if(ble_dev_info[idx].conn_state != BLE_DEVICE_DEFAULT_IDLE && ble_dev_info[idx].conn_state != BLE_DEVICE_DISCONNECTED) {
1000dc40:	0163      	lsls	r3, r4, #5
1000dc42:	1b1c      	subs	r4, r3, r4
1000dc44:	00a4      	lsls	r4, r4, #2
1000dc46:	4b3b      	ldr	r3, [pc, #236]	; (1000dd34 <ble_pair_done_handler+0x178>)
1000dc48:	191c      	adds	r4, r3, r4
1000dc4a:	345e      	adds	r4, #94	; 0x5e
1000dc4c:	7823      	ldrb	r3, [r4, #0]
1000dc4e:	2b01      	cmp	r3, #1
1000dc50:	d915      	bls.n	1000dc7e <ble_pair_done_handler+0xc2>
			DBG_LOG("Pairing failed...Disconnecting");
1000dc52:	4839      	ldr	r0, [pc, #228]	; (1000dd38 <ble_pair_done_handler+0x17c>)
1000dc54:	4b39      	ldr	r3, [pc, #228]	; (1000dd3c <ble_pair_done_handler+0x180>)
1000dc56:	4798      	blx	r3
1000dc58:	483d      	ldr	r0, [pc, #244]	; (1000dd50 <ble_pair_done_handler+0x194>)
1000dc5a:	4b3a      	ldr	r3, [pc, #232]	; (1000dd44 <ble_pair_done_handler+0x188>)
1000dc5c:	4798      	blx	r3
			if(!(at_ble_disconnect(pairing_params->handle, AT_BLE_TERMINATED_BY_USER) == AT_BLE_SUCCESS))
1000dc5e:	8868      	ldrh	r0, [r5, #2]
1000dc60:	2113      	movs	r1, #19
1000dc62:	4b3c      	ldr	r3, [pc, #240]	; (1000dd54 <ble_pair_done_handler+0x198>)
1000dc64:	4798      	blx	r3
1000dc66:	9001      	str	r0, [sp, #4]
1000dc68:	2800      	cmp	r0, #0
1000dc6a:	d05b      	beq.n	1000dd24 <ble_pair_done_handler+0x168>
			{
				DBG_LOG("Disconnect Request Failed");
1000dc6c:	4832      	ldr	r0, [pc, #200]	; (1000dd38 <ble_pair_done_handler+0x17c>)
1000dc6e:	4b33      	ldr	r3, [pc, #204]	; (1000dd3c <ble_pair_done_handler+0x180>)
1000dc70:	4798      	blx	r3
1000dc72:	4839      	ldr	r0, [pc, #228]	; (1000dd58 <ble_pair_done_handler+0x19c>)
1000dc74:	4b33      	ldr	r3, [pc, #204]	; (1000dd44 <ble_pair_done_handler+0x188>)
1000dc76:	4798      	blx	r3
				return AT_BLE_FAILURE;
1000dc78:	23e2      	movs	r3, #226	; 0xe2
1000dc7a:	9301      	str	r3, [sp, #4]
1000dc7c:	e052      	b.n	1000dd24 <ble_pair_done_handler+0x168>
			}
		}
	}
	return AT_BLE_SUCCESS;
1000dc7e:	2300      	movs	r3, #0
1000dc80:	9301      	str	r3, [sp, #4]
1000dc82:	e04f      	b.n	1000dd24 <ble_pair_done_handler+0x168>
		}
	}
	
	if(pairing_params->status == AT_BLE_SUCCESS)
	{
		DBG_LOG("Pairing procedure completed successfully");
1000dc84:	4e2c      	ldr	r6, [pc, #176]	; (1000dd38 <ble_pair_done_handler+0x17c>)
1000dc86:	0030      	movs	r0, r6
1000dc88:	4d2c      	ldr	r5, [pc, #176]	; (1000dd3c <ble_pair_done_handler+0x180>)
1000dc8a:	47a8      	blx	r5
1000dc8c:	4833      	ldr	r0, [pc, #204]	; (1000dd5c <ble_pair_done_handler+0x1a0>)
1000dc8e:	4c2d      	ldr	r4, [pc, #180]	; (1000dd44 <ble_pair_done_handler+0x188>)
1000dc90:	47a0      	blx	r4
				
			}
		}
		else
		{
			DBG_LOG("BLE Device not found to store the pairing info");
1000dc92:	0030      	movs	r0, r6
1000dc94:	47a8      	blx	r5
1000dc96:	4832      	ldr	r0, [pc, #200]	; (1000dd60 <ble_pair_done_handler+0x1a4>)
1000dc98:	47a0      	blx	r4
			return AT_BLE_FAILURE;
1000dc9a:	23e2      	movs	r3, #226	; 0xe2
1000dc9c:	9301      	str	r3, [sp, #4]
1000dc9e:	e041      	b.n	1000dd24 <ble_pair_done_handler+0x168>
			device_found = true;
			break;
		}
	}
	
	if(pairing_params->status == AT_BLE_SUCCESS)
1000dca0:	792b      	ldrb	r3, [r5, #4]
1000dca2:	2b00      	cmp	r3, #0
1000dca4:	d1cc      	bne.n	1000dc40 <ble_pair_done_handler+0x84>
1000dca6:	e7ed      	b.n	1000dc84 <ble_pair_done_handler+0xc8>
	{
		DBG_LOG("Pairing procedure completed successfully");
1000dca8:	4823      	ldr	r0, [pc, #140]	; (1000dd38 <ble_pair_done_handler+0x17c>)
1000dcaa:	4b24      	ldr	r3, [pc, #144]	; (1000dd3c <ble_pair_done_handler+0x180>)
1000dcac:	469b      	mov	fp, r3
1000dcae:	4798      	blx	r3
1000dcb0:	482a      	ldr	r0, [pc, #168]	; (1000dd5c <ble_pair_done_handler+0x1a0>)
1000dcb2:	4b24      	ldr	r3, [pc, #144]	; (1000dd44 <ble_pair_done_handler+0x188>)
1000dcb4:	469a      	mov	sl, r3
1000dcb6:	4798      	blx	r3
		if (device_found)
		{
			ble_dev_info[idx].bond_info.auth = pairing_params->auth;
1000dcb8:	782a      	ldrb	r2, [r5, #0]
1000dcba:	4b1e      	ldr	r3, [pc, #120]	; (1000dd34 <ble_pair_done_handler+0x178>)
1000dcbc:	4698      	mov	r8, r3
1000dcbe:	0167      	lsls	r7, r4, #5
1000dcc0:	1b3b      	subs	r3, r7, r4
1000dcc2:	009b      	lsls	r3, r3, #2
1000dcc4:	4443      	add	r3, r8
1000dcc6:	751a      	strb	r2, [r3, #20]
			ble_dev_info[idx].bond_info.status = pairing_params->status;
1000dcc8:	792a      	ldrb	r2, [r5, #4]
1000dcca:	761a      	strb	r2, [r3, #24]
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRED;
1000dccc:	335e      	adds	r3, #94	; 0x5e
1000dcce:	2205      	movs	r2, #5
1000dcd0:	701a      	strb	r2, [r3, #0]
			
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_csrk, (uint8_t *)&pairing_params->peer_csrk, sizeof(at_ble_CSRK_t));
1000dcd2:	1b38      	subs	r0, r7, r4
1000dcd4:	0080      	lsls	r0, r0, #2
1000dcd6:	4440      	add	r0, r8
1000dcd8:	3036      	adds	r0, #54	; 0x36
1000dcda:	320b      	adds	r2, #11
1000dcdc:	0029      	movs	r1, r5
1000dcde:	3122      	adds	r1, #34	; 0x22
1000dce0:	4b20      	ldr	r3, [pc, #128]	; (1000dd64 <ble_pair_done_handler+0x1a8>)
1000dce2:	4699      	mov	r9, r3
1000dce4:	4798      	blx	r3
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_irk, (uint8_t *)&pairing_params->peer_irk, sizeof(at_ble_IRK_t));
1000dce6:	1b38      	subs	r0, r7, r4
1000dce8:	0080      	lsls	r0, r0, #2
1000dcea:	4440      	add	r0, r8
1000dcec:	3046      	adds	r0, #70	; 0x46
1000dcee:	2217      	movs	r2, #23
1000dcf0:	0029      	movs	r1, r5
1000dcf2:	3132      	adds	r1, #50	; 0x32
1000dcf4:	47c8      	blx	r9
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_ltk, (uint8_t *)&pairing_params->peer_ltk, sizeof(at_ble_LTK_t));
1000dcf6:	1b38      	subs	r0, r7, r4
1000dcf8:	0080      	lsls	r0, r0, #2
1000dcfa:	4440      	add	r0, r8
1000dcfc:	301a      	adds	r0, #26
1000dcfe:	1dac      	adds	r4, r5, #6
1000dd00:	221c      	movs	r2, #28
1000dd02:	0021      	movs	r1, r4
1000dd04:	47c8      	blx	r9
			
			DBG_LOG_DEV("LTK: ");
1000dd06:	480c      	ldr	r0, [pc, #48]	; (1000dd38 <ble_pair_done_handler+0x17c>)
1000dd08:	47d8      	blx	fp
1000dd0a:	4817      	ldr	r0, [pc, #92]	; (1000dd68 <ble_pair_done_handler+0x1ac>)
1000dd0c:	47d0      	blx	sl
1000dd0e:	2316      	movs	r3, #22
1000dd10:	4699      	mov	r9, r3
1000dd12:	44a9      	add	r9, r5
			for (idx = 0; idx < 16; idx++)
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_ltk.key[idx]);
1000dd14:	4e0c      	ldr	r6, [pc, #48]	; (1000dd48 <ble_pair_done_handler+0x18c>)
1000dd16:	4f0b      	ldr	r7, [pc, #44]	; (1000dd44 <ble_pair_done_handler+0x188>)
1000dd18:	e76a      	b.n	1000dbf0 <ble_pair_done_handler+0x34>
			device_found = true;
			break;
		}
	}
	
	if(pairing_params->status == AT_BLE_SUCCESS)
1000dd1a:	792b      	ldrb	r3, [r5, #4]
1000dd1c:	9301      	str	r3, [sp, #4]
1000dd1e:	2b00      	cmp	r3, #0
1000dd20:	d0c2      	beq.n	1000dca8 <ble_pair_done_handler+0xec>
1000dd22:	e78d      	b.n	1000dc40 <ble_pair_done_handler+0x84>
				return AT_BLE_FAILURE;
			}
		}
	}
	return AT_BLE_SUCCESS;
}
1000dd24:	9801      	ldr	r0, [sp, #4]
1000dd26:	b003      	add	sp, #12
1000dd28:	bc3c      	pop	{r2, r3, r4, r5}
1000dd2a:	4690      	mov	r8, r2
1000dd2c:	4699      	mov	r9, r3
1000dd2e:	46a2      	mov	sl, r4
1000dd30:	46ab      	mov	fp, r5
1000dd32:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000dd34:	1001a244 	.word	0x1001a244
1000dd38:	100165a4 	.word	0x100165a4
1000dd3c:	100153f9 	.word	0x100153f9
1000dd40:	100179a4 	.word	0x100179a4
1000dd44:	100152d9 	.word	0x100152d9
1000dd48:	10017998 	.word	0x10017998
1000dd4c:	100179ac 	.word	0x100179ac
1000dd50:	100179b4 	.word	0x100179b4
1000dd54:	100109c1 	.word	0x100109c1
1000dd58:	100179d4 	.word	0x100179d4
1000dd5c:	100179f0 	.word	0x100179f0
1000dd60:	10017a1c 	.word	0x10017a1c
1000dd64:	1001517f 	.word	0x1001517f
1000dd68:	10017a4c 	.word	0x10017a4c

1000dd6c <ble_conn_param_update_req>:
	ALL_UNUSED(conn_param_update);  //To avoid compiler warning
	return AT_BLE_SUCCESS;
}

at_ble_status_t ble_conn_param_update_req(void *params)
{
1000dd6c:	b510      	push	{r4, lr}
	at_ble_conn_param_update_request_t * conn_param_req;
	conn_param_req = (at_ble_conn_param_update_request_t *)params;
	at_ble_conn_update_reply(conn_param_req->handle, true, 1, 120);
1000dd6e:	8800      	ldrh	r0, [r0, #0]
1000dd70:	2378      	movs	r3, #120	; 0x78
1000dd72:	2201      	movs	r2, #1
1000dd74:	2101      	movs	r1, #1
1000dd76:	4c02      	ldr	r4, [pc, #8]	; (1000dd80 <ble_conn_param_update_req+0x14>)
1000dd78:	47a0      	blx	r4
	return AT_BLE_SUCCESS;
}
1000dd7a:	2000      	movs	r0, #0
1000dd7c:	bd10      	pop	{r4, pc}
1000dd7e:	46c0      	nop			; (mov r8, r8)
1000dd80:	100109e1 	.word	0x100109e1

1000dd84 <ble_slave_security_request_handler>:

at_ble_status_t ble_slave_security_request_handler(void* params)
{
1000dd84:	b5f0      	push	{r4, r5, r6, r7, lr}
1000dd86:	4657      	mov	r7, sl
1000dd88:	464e      	mov	r6, r9
1000dd8a:	4645      	mov	r5, r8
1000dd8c:	b4e0      	push	{r5, r6, r7}
1000dd8e:	b084      	sub	sp, #16
1000dd90:	0004      	movs	r4, r0
	uint8_t i = 0, idx;
	at_ble_slave_sec_request_t* slave_sec_req;
	bool device_found = false;
	
	slave_sec_req = (at_ble_slave_sec_request_t*)params;	
	memset(&features, 0x00, sizeof(at_ble_pair_features_t));
1000dd92:	2209      	movs	r2, #9
1000dd94:	2100      	movs	r1, #0
1000dd96:	a801      	add	r0, sp, #4
1000dd98:	4b6a      	ldr	r3, [pc, #424]	; (1000df44 <ble_slave_security_request_handler+0x1c0>)
1000dd9a:	4798      	blx	r3
		//@Todo Status is not handled in the Library
	//}

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == slave_sec_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000dd9c:	8825      	ldrh	r5, [r4, #0]
1000dd9e:	496a      	ldr	r1, [pc, #424]	; (1000df48 <ble_slave_security_request_handler+0x1c4>)
1000dda0:	000a      	movs	r2, r1
1000dda2:	2300      	movs	r3, #0
1000dda4:	8910      	ldrh	r0, [r2, #8]
1000dda6:	42a8      	cmp	r0, r5
1000dda8:	d116      	bne.n	1000ddd8 <ble_slave_security_request_handler+0x54>
1000ddaa:	0010      	movs	r0, r2
1000ddac:	305e      	adds	r0, #94	; 0x5e
1000ddae:	7800      	ldrb	r0, [r0, #0]
1000ddb0:	2802      	cmp	r0, #2
1000ddb2:	d111      	bne.n	1000ddd8 <ble_slave_security_request_handler+0x54>
		{
			device_found = true;
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_STATE;
1000ddb4:	4864      	ldr	r0, [pc, #400]	; (1000df48 <ble_slave_security_request_handler+0x1c4>)
1000ddb6:	015a      	lsls	r2, r3, #5
1000ddb8:	1ad6      	subs	r6, r2, r3
1000ddba:	00b6      	lsls	r6, r6, #2
1000ddbc:	1986      	adds	r6, r0, r6
1000ddbe:	365e      	adds	r6, #94	; 0x5e
1000ddc0:	2206      	movs	r2, #6
1000ddc2:	7032      	strb	r2, [r6, #0]
		}
	}
	
	if (device_found)
	{
		if((ble_dev_info[idx].bond_info.auth & AT_BLE_AUTH_NO_MITM_BOND) && (slave_sec_req->bond == true))
1000ddc4:	32f9      	adds	r2, #249	; 0xf9
1000ddc6:	4013      	ands	r3, r2
1000ddc8:	015a      	lsls	r2, r3, #5
1000ddca:	1ad2      	subs	r2, r2, r3
1000ddcc:	0092      	lsls	r2, r2, #2
1000ddce:	1882      	adds	r2, r0, r2
1000ddd0:	7d12      	ldrb	r2, [r2, #20]
1000ddd2:	07d0      	lsls	r0, r2, #31
1000ddd4:	d405      	bmi.n	1000dde2 <ble_slave_security_request_handler+0x5e>
1000ddd6:	e01b      	b.n	1000de10 <ble_slave_security_request_handler+0x8c>
1000ddd8:	3301      	adds	r3, #1
1000ddda:	327c      	adds	r2, #124	; 0x7c
		//at_ble_disconnect(slave_sec_req->handle, AT_BLE_AUTH_FAILURE);		
		//return AT_BLE_FAILURE;
		//@Todo Status is not handled in the Library
	//}

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000dddc:	2b05      	cmp	r3, #5
1000ddde:	d1e1      	bne.n	1000dda4 <ble_slave_security_request_handler+0x20>
1000dde0:	e01e      	b.n	1000de20 <ble_slave_security_request_handler+0x9c>
		}
	}
	
	if (device_found)
	{
		if((ble_dev_info[idx].bond_info.auth & AT_BLE_AUTH_NO_MITM_BOND) && (slave_sec_req->bond == true))
1000dde2:	78e0      	ldrb	r0, [r4, #3]
1000dde4:	2800      	cmp	r0, #0
1000dde6:	d013      	beq.n	1000de10 <ble_slave_security_request_handler+0x8c>
		{
			if(at_ble_encryption_start(slave_sec_req->handle, &ble_dev_info[idx].bond_info.peer_ltk, ble_dev_info[idx].bond_info.auth) == AT_BLE_SUCCESS)
1000dde8:	0159      	lsls	r1, r3, #5
1000ddea:	1ac9      	subs	r1, r1, r3
1000ddec:	008b      	lsls	r3, r1, #2
1000ddee:	4956      	ldr	r1, [pc, #344]	; (1000df48 <ble_slave_security_request_handler+0x1c4>)
1000ddf0:	18c9      	adds	r1, r1, r3
1000ddf2:	311a      	adds	r1, #26
1000ddf4:	8820      	ldrh	r0, [r4, #0]
1000ddf6:	4b55      	ldr	r3, [pc, #340]	; (1000df4c <ble_slave_security_request_handler+0x1c8>)
1000ddf8:	4798      	blx	r3
1000ddfa:	2800      	cmp	r0, #0
1000ddfc:	d100      	bne.n	1000de00 <ble_slave_security_request_handler+0x7c>
1000ddfe:	e09b      	b.n	1000df38 <ble_slave_security_request_handler+0x1b4>
			{
				return  AT_BLE_SUCCESS;
			}
			else
			{
				DBG_LOG("Encryption Not started");
1000de00:	4853      	ldr	r0, [pc, #332]	; (1000df50 <ble_slave_security_request_handler+0x1cc>)
1000de02:	4b54      	ldr	r3, [pc, #336]	; (1000df54 <ble_slave_security_request_handler+0x1d0>)
1000de04:	4798      	blx	r3
1000de06:	4854      	ldr	r0, [pc, #336]	; (1000df58 <ble_slave_security_request_handler+0x1d4>)
1000de08:	4b54      	ldr	r3, [pc, #336]	; (1000df5c <ble_slave_security_request_handler+0x1d8>)
1000de0a:	4798      	blx	r3
				return AT_BLE_FAILURE;
1000de0c:	20e2      	movs	r0, #226	; 0xe2
1000de0e:	e093      	b.n	1000df38 <ble_slave_security_request_handler+0x1b4>
			}			
		}
		else
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000de10:	015a      	lsls	r2, r3, #5
1000de12:	1ad3      	subs	r3, r2, r3
1000de14:	009b      	lsls	r3, r3, #2
1000de16:	4a4c      	ldr	r2, [pc, #304]	; (1000df48 <ble_slave_security_request_handler+0x1c4>)
1000de18:	18d3      	adds	r3, r2, r3
1000de1a:	335e      	adds	r3, #94	; 0x5e
1000de1c:	2202      	movs	r2, #2
1000de1e:	701a      	strb	r2, [r3, #0]
		}
	}
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == slave_sec_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000de20:	8825      	ldrh	r5, [r4, #0]
1000de22:	2200      	movs	r2, #0
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
		}
	}
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000de24:	2300      	movs	r3, #0
	{
		if((ble_dev_info[idx].conn_info.handle == slave_sec_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000de26:	0016      	movs	r6, r2
1000de28:	8908      	ldrh	r0, [r1, #8]
1000de2a:	42a8      	cmp	r0, r5
1000de2c:	d10d      	bne.n	1000de4a <ble_slave_security_request_handler+0xc6>
1000de2e:	0008      	movs	r0, r1
1000de30:	305e      	adds	r0, #94	; 0x5e
1000de32:	7800      	ldrb	r0, [r0, #0]
1000de34:	2802      	cmp	r0, #2
1000de36:	d108      	bne.n	1000de4a <ble_slave_security_request_handler+0xc6>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
1000de38:	0152      	lsls	r2, r2, #5
1000de3a:	1b92      	subs	r2, r2, r6
1000de3c:	0096      	lsls	r6, r2, #2
1000de3e:	4a42      	ldr	r2, [pc, #264]	; (1000df48 <ble_slave_security_request_handler+0x1c4>)
1000de40:	1992      	adds	r2, r2, r6
1000de42:	325e      	adds	r2, #94	; 0x5e
1000de44:	2103      	movs	r1, #3
1000de46:	7011      	strb	r1, [r2, #0]
			break;
1000de48:	e005      	b.n	1000de56 <ble_slave_security_request_handler+0xd2>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
		}
	}
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000de4a:	3301      	adds	r3, #1
1000de4c:	b2db      	uxtb	r3, r3
1000de4e:	3201      	adds	r2, #1
1000de50:	317c      	adds	r1, #124	; 0x7c
1000de52:	2b05      	cmp	r3, #5
1000de54:	d1e7      	bne.n	1000de26 <ble_slave_security_request_handler+0xa2>
			break;
		}
	}
	
	features.desired_auth =  BLE_AUTHENTICATION_LEVEL; 
	features.bond = slave_sec_req->bond;
1000de56:	aa01      	add	r2, sp, #4
1000de58:	78e1      	ldrb	r1, [r4, #3]
1000de5a:	7091      	strb	r1, [r2, #2]
	features.mitm_protection = true;
1000de5c:	2101      	movs	r1, #1
1000de5e:	7051      	strb	r1, [r2, #1]
	/* Device capabilities is display only , key will be generated
	and displayed */
	features.io_cababilities = AT_BLE_IO_CAP_KB_DISPLAY;
1000de60:	3103      	adds	r1, #3
1000de62:	7011      	strb	r1, [r2, #0]

	features.oob_avaiable = false;
			
	/* Distribution of LTK is required */
	if (ble_dev_info[idx].conn_info.peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE)
1000de64:	001f      	movs	r7, r3
1000de66:	015a      	lsls	r2, r3, #5
1000de68:	1ad2      	subs	r2, r2, r3
1000de6a:	0092      	lsls	r2, r2, #2
1000de6c:	4936      	ldr	r1, [pc, #216]	; (1000df48 <ble_slave_security_request_handler+0x1c4>)
1000de6e:	5c52      	ldrb	r2, [r2, r1]
1000de70:	2a02      	cmp	r2, #2
1000de72:	d104      	bne.n	1000de7e <ble_slave_security_request_handler+0xfa>
	{
		features.initiator_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000de74:	aa01      	add	r2, sp, #4
1000de76:	2103      	movs	r1, #3
1000de78:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000de7a:	71d1      	strb	r1, [r2, #7]
1000de7c:	e003      	b.n	1000de86 <ble_slave_security_request_handler+0x102>
	}
	else
	{
		features.initiator_keys =   AT_BLE_KEY_DIST_ENC;
1000de7e:	aa01      	add	r2, sp, #4
1000de80:	2101      	movs	r1, #1
1000de82:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   AT_BLE_KEY_DIST_ENC;
1000de84:	71d1      	strb	r1, [r2, #7]
	}
	features.max_key_size = 16;
1000de86:	aa01      	add	r2, sp, #4
1000de88:	2110      	movs	r1, #16
1000de8a:	7151      	strb	r1, [r2, #5]
	features.min_key_size = 16;
1000de8c:	7111      	strb	r1, [r2, #4]
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
1000de8e:	017a      	lsls	r2, r7, #5
1000de90:	1bd2      	subs	r2, r2, r7
1000de92:	0092      	lsls	r2, r2, #2
1000de94:	492c      	ldr	r1, [pc, #176]	; (1000df48 <ble_slave_security_request_handler+0x1c4>)
1000de96:	188a      	adds	r2, r1, r2
1000de98:	7e12      	ldrb	r2, [r2, #24]
1000de9a:	2a40      	cmp	r2, #64	; 0x40
1000de9c:	d134      	bne.n	1000df08 <ble_slave_security_request_handler+0x184>
1000de9e:	015a      	lsls	r2, r3, #5
1000dea0:	1ad3      	subs	r3, r2, r3
1000dea2:	009b      	lsls	r3, r3, #2
1000dea4:	469a      	mov	sl, r3
1000dea6:	001e      	movs	r6, r3
1000dea8:	3660      	adds	r6, #96	; 0x60
1000deaa:	1876      	adds	r6, r6, r1
1000deac:	4655      	mov	r5, sl
1000deae:	3568      	adds	r5, #104	; 0x68
1000deb0:	186d      	adds	r5, r5, r1
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
		{			
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000deb2:	4b2b      	ldr	r3, [pc, #172]	; (1000df60 <ble_slave_security_request_handler+0x1dc>)
1000deb4:	4699      	mov	r9, r3
1000deb6:	230f      	movs	r3, #15
1000deb8:	4698      	mov	r8, r3
1000deba:	47c8      	blx	r9
1000debc:	4643      	mov	r3, r8
1000debe:	4018      	ands	r0, r3
1000dec0:	7030      	strb	r0, [r6, #0]
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
1000dec2:	47c8      	blx	r9
1000dec4:	4643      	mov	r3, r8
1000dec6:	4018      	ands	r0, r3
1000dec8:	74b0      	strb	r0, [r6, #18]
1000deca:	3601      	adds	r6, #1
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
1000decc:	42ae      	cmp	r6, r5
1000dece:	d1f4      	bne.n	1000deba <ble_slave_security_request_handler+0x136>
1000ded0:	4656      	mov	r6, sl
1000ded2:	3670      	adds	r6, #112	; 0x70
1000ded4:	4a1c      	ldr	r2, [pc, #112]	; (1000df48 <ble_slave_security_request_handler+0x1c4>)
1000ded6:	18b6      	adds	r6, r6, r2
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000ded8:	4b21      	ldr	r3, [pc, #132]	; (1000df60 <ble_slave_security_request_handler+0x1dc>)
1000deda:	4699      	mov	r9, r3
1000dedc:	230f      	movs	r3, #15
1000dede:	4698      	mov	r8, r3
1000dee0:	47c8      	blx	r9
1000dee2:	4643      	mov	r3, r8
1000dee4:	4018      	ands	r0, r3
1000dee6:	7028      	strb	r0, [r5, #0]
1000dee8:	3501      	adds	r5, #1
		{			
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
1000deea:	42b5      	cmp	r5, r6
1000deec:	d1f8      	bne.n	1000dee0 <ble_slave_security_request_handler+0x15c>
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
		}
		
		ble_dev_info[idx].host_ltk.ediv = rand()&0xffff;
1000deee:	4b1c      	ldr	r3, [pc, #112]	; (1000df60 <ble_slave_security_request_handler+0x1dc>)
1000def0:	4798      	blx	r3
1000def2:	017b      	lsls	r3, r7, #5
1000def4:	1bdb      	subs	r3, r3, r7
1000def6:	009b      	lsls	r3, r3, #2
1000def8:	4a13      	ldr	r2, [pc, #76]	; (1000df48 <ble_slave_security_request_handler+0x1c4>)
1000defa:	18d3      	adds	r3, r2, r3
1000defc:	001a      	movs	r2, r3
1000defe:	3270      	adds	r2, #112	; 0x70
1000df00:	8010      	strh	r0, [r2, #0]
		ble_dev_info[idx].host_ltk.key_size = 16;
1000df02:	337a      	adds	r3, #122	; 0x7a
1000df04:	2210      	movs	r2, #16
1000df06:	701a      	strb	r2, [r3, #0]
	{
		/* Bonding information already exists */
		
	}

	if(at_ble_authenticate(slave_sec_req->handle, &features, &ble_dev_info[idx].host_ltk, NULL) != AT_BLE_SUCCESS)
1000df08:	017a      	lsls	r2, r7, #5
1000df0a:	1bd7      	subs	r7, r2, r7
1000df0c:	00bf      	lsls	r7, r7, #2
1000df0e:	3760      	adds	r7, #96	; 0x60
1000df10:	4a0d      	ldr	r2, [pc, #52]	; (1000df48 <ble_slave_security_request_handler+0x1c4>)
1000df12:	18ba      	adds	r2, r7, r2
1000df14:	8820      	ldrh	r0, [r4, #0]
1000df16:	2300      	movs	r3, #0
1000df18:	a901      	add	r1, sp, #4
1000df1a:	4c12      	ldr	r4, [pc, #72]	; (1000df64 <ble_slave_security_request_handler+0x1e0>)
1000df1c:	47a0      	blx	r4
1000df1e:	2800      	cmp	r0, #0
1000df20:	d00a      	beq.n	1000df38 <ble_slave_security_request_handler+0x1b4>
	{
		features.bond = false;
1000df22:	ab01      	add	r3, sp, #4
1000df24:	2200      	movs	r2, #0
1000df26:	709a      	strb	r2, [r3, #2]
		features.mitm_protection = false;
1000df28:	705a      	strb	r2, [r3, #1]
		DBG_LOG("Slave Security Req - Authentication Failed");
1000df2a:	4809      	ldr	r0, [pc, #36]	; (1000df50 <ble_slave_security_request_handler+0x1cc>)
1000df2c:	4b09      	ldr	r3, [pc, #36]	; (1000df54 <ble_slave_security_request_handler+0x1d0>)
1000df2e:	4798      	blx	r3
1000df30:	480d      	ldr	r0, [pc, #52]	; (1000df68 <ble_slave_security_request_handler+0x1e4>)
1000df32:	4b0a      	ldr	r3, [pc, #40]	; (1000df5c <ble_slave_security_request_handler+0x1d8>)
1000df34:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000df36:	20e2      	movs	r0, #226	; 0xe2
	}
	return AT_BLE_SUCCESS;
}
1000df38:	b004      	add	sp, #16
1000df3a:	bc1c      	pop	{r2, r3, r4}
1000df3c:	4690      	mov	r8, r2
1000df3e:	4699      	mov	r9, r3
1000df40:	46a2      	mov	sl, r4
1000df42:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000df44:	10015191 	.word	0x10015191
1000df48:	1001a244 	.word	0x1001a244
1000df4c:	100115a5 	.word	0x100115a5
1000df50:	100165a4 	.word	0x100165a4
1000df54:	100153f9 	.word	0x100153f9
1000df58:	10017a54 	.word	0x10017a54
1000df5c:	100152d9 	.word	0x100152d9
1000df60:	1001540d 	.word	0x1001540d
1000df64:	100113b9 	.word	0x100113b9
1000df68:	10017a6c 	.word	0x10017a6c

1000df6c <ble_pair_request_handler>:

/** @brief function handles pair request */
at_ble_status_t ble_pair_request_handler(void *params)
{
1000df6c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000df6e:	465f      	mov	r7, fp
1000df70:	4656      	mov	r6, sl
1000df72:	464d      	mov	r5, r9
1000df74:	4644      	mov	r4, r8
1000df76:	b4f0      	push	{r4, r5, r6, r7}
1000df78:	b085      	sub	sp, #20
1000df7a:	4680      	mov	r8, r0
	at_ble_pair_request_t* pair_req;
	pair_req = (at_ble_pair_request_t*)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == pair_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000df7c:	8804      	ldrh	r4, [r0, #0]
1000df7e:	4a54      	ldr	r2, [pc, #336]	; (1000e0d0 <ble_pair_request_handler+0x164>)
1000df80:	2100      	movs	r1, #0
	at_ble_pair_features_t features;
	uint8_t i = 0, idx;
	at_ble_pair_request_t* pair_req;
	pair_req = (at_ble_pair_request_t*)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000df82:	2300      	movs	r3, #0
	{
		if((ble_dev_info[idx].conn_info.handle == pair_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000df84:	8910      	ldrh	r0, [r2, #8]
1000df86:	42a0      	cmp	r0, r4
1000df88:	d10d      	bne.n	1000dfa6 <ble_pair_request_handler+0x3a>
1000df8a:	0010      	movs	r0, r2
1000df8c:	305e      	adds	r0, #94	; 0x5e
1000df8e:	7800      	ldrb	r0, [r0, #0]
1000df90:	2802      	cmp	r0, #2
1000df92:	d108      	bne.n	1000dfa6 <ble_pair_request_handler+0x3a>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
1000df94:	014a      	lsls	r2, r1, #5
1000df96:	1a52      	subs	r2, r2, r1
1000df98:	0095      	lsls	r5, r2, #2
1000df9a:	4a4d      	ldr	r2, [pc, #308]	; (1000e0d0 <ble_pair_request_handler+0x164>)
1000df9c:	1952      	adds	r2, r2, r5
1000df9e:	325e      	adds	r2, #94	; 0x5e
1000dfa0:	2103      	movs	r1, #3
1000dfa2:	7011      	strb	r1, [r2, #0]
			break;
1000dfa4:	e005      	b.n	1000dfb2 <ble_pair_request_handler+0x46>
	at_ble_pair_features_t features;
	uint8_t i = 0, idx;
	at_ble_pair_request_t* pair_req;
	pair_req = (at_ble_pair_request_t*)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000dfa6:	3301      	adds	r3, #1
1000dfa8:	b2db      	uxtb	r3, r3
1000dfaa:	3101      	adds	r1, #1
1000dfac:	327c      	adds	r2, #124	; 0x7c
1000dfae:	2b05      	cmp	r3, #5
1000dfb0:	d1e8      	bne.n	1000df84 <ble_pair_request_handler+0x18>
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
			break;
		}
	}
	
	features.desired_auth =  BLE_AUTHENTICATION_LEVEL; 
1000dfb2:	aa01      	add	r2, sp, #4
1000dfb4:	2100      	movs	r1, #0
1000dfb6:	7211      	strb	r1, [r2, #8]
	features.bond = BLE_BOND_REQ;
1000dfb8:	7091      	strb	r1, [r2, #2]
	features.mitm_protection = BLE_MITM_REQ;
1000dfba:	7051      	strb	r1, [r2, #1]
	/* Device capabilities is display only , key will be generated
	and displayed */
	features.io_cababilities = BLE_IO_CAPABALITIES;
1000dfbc:	2003      	movs	r0, #3
1000dfbe:	7010      	strb	r0, [r2, #0]
	features.oob_avaiable = BLE_OOB_REQ;
1000dfc0:	70d1      	strb	r1, [r2, #3]
	
	/* Distribution of LTK is required */
	if (ble_dev_info[idx].conn_info.peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE)
1000dfc2:	001e      	movs	r6, r3
1000dfc4:	015a      	lsls	r2, r3, #5
1000dfc6:	1ad2      	subs	r2, r2, r3
1000dfc8:	0092      	lsls	r2, r2, #2
1000dfca:	4941      	ldr	r1, [pc, #260]	; (1000e0d0 <ble_pair_request_handler+0x164>)
1000dfcc:	5c52      	ldrb	r2, [r2, r1]
1000dfce:	2a02      	cmp	r2, #2
1000dfd0:	d104      	bne.n	1000dfdc <ble_pair_request_handler+0x70>
	{
		/* Distribution of IRK is required */
		features.initiator_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000dfd2:	aa01      	add	r2, sp, #4
1000dfd4:	2103      	movs	r1, #3
1000dfd6:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000dfd8:	71d1      	strb	r1, [r2, #7]
1000dfda:	e003      	b.n	1000dfe4 <ble_pair_request_handler+0x78>
	}
	else
	{
		features.initiator_keys =   AT_BLE_KEY_DIST_ENC;
1000dfdc:	aa01      	add	r2, sp, #4
1000dfde:	2101      	movs	r1, #1
1000dfe0:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   AT_BLE_KEY_DIST_ENC;
1000dfe2:	71d1      	strb	r1, [r2, #7]
	}
			
	features.max_key_size = 16;
1000dfe4:	aa01      	add	r2, sp, #4
1000dfe6:	2110      	movs	r1, #16
1000dfe8:	7151      	strb	r1, [r2, #5]
	features.min_key_size = 16;
1000dfea:	7111      	strb	r1, [r2, #4]
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
1000dfec:	0172      	lsls	r2, r6, #5
1000dfee:	1b92      	subs	r2, r2, r6
1000dff0:	0092      	lsls	r2, r2, #2
1000dff2:	4937      	ldr	r1, [pc, #220]	; (1000e0d0 <ble_pair_request_handler+0x164>)
1000dff4:	188a      	adds	r2, r1, r2
1000dff6:	7e12      	ldrb	r2, [r2, #24]
1000dff8:	2a40      	cmp	r2, #64	; 0x40
1000dffa:	d142      	bne.n	1000e082 <ble_pair_request_handler+0x116>
1000dffc:	015f      	lsls	r7, r3, #5
1000dffe:	1afb      	subs	r3, r7, r3
1000e000:	009b      	lsls	r3, r3, #2
1000e002:	469b      	mov	fp, r3
1000e004:	001c      	movs	r4, r3
1000e006:	3460      	adds	r4, #96	; 0x60
1000e008:	1864      	adds	r4, r4, r1
1000e00a:	465d      	mov	r5, fp
1000e00c:	3568      	adds	r5, #104	; 0x68
1000e00e:	186d      	adds	r5, r5, r1
1000e010:	0027      	movs	r7, r4
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
		{						
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000e012:	4b30      	ldr	r3, [pc, #192]	; (1000e0d4 <ble_pair_request_handler+0x168>)
1000e014:	469a      	mov	sl, r3
1000e016:	230f      	movs	r3, #15
1000e018:	4699      	mov	r9, r3
1000e01a:	47d0      	blx	sl
1000e01c:	464b      	mov	r3, r9
1000e01e:	4018      	ands	r0, r3
1000e020:	7038      	strb	r0, [r7, #0]
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
1000e022:	47d0      	blx	sl
1000e024:	464b      	mov	r3, r9
1000e026:	4018      	ands	r0, r3
1000e028:	74b8      	strb	r0, [r7, #18]
1000e02a:	3701      	adds	r7, #1
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
1000e02c:	42af      	cmp	r7, r5
1000e02e:	d1f4      	bne.n	1000e01a <ble_pair_request_handler+0xae>
1000e030:	465b      	mov	r3, fp
1000e032:	3370      	adds	r3, #112	; 0x70
1000e034:	4f26      	ldr	r7, [pc, #152]	; (1000e0d0 <ble_pair_request_handler+0x164>)
1000e036:	19df      	adds	r7, r3, r7
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000e038:	4b26      	ldr	r3, [pc, #152]	; (1000e0d4 <ble_pair_request_handler+0x168>)
1000e03a:	469a      	mov	sl, r3
1000e03c:	230f      	movs	r3, #15
1000e03e:	4699      	mov	r9, r3
1000e040:	47d0      	blx	sl
1000e042:	464b      	mov	r3, r9
1000e044:	4018      	ands	r0, r3
1000e046:	7028      	strb	r0, [r5, #0]
1000e048:	3501      	adds	r5, #1
		{						
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
1000e04a:	42bd      	cmp	r5, r7
1000e04c:	d1f8      	bne.n	1000e040 <ble_pair_request_handler+0xd4>
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
		}
		DBG_LOG_DEV("Generated LTK: ");
1000e04e:	4822      	ldr	r0, [pc, #136]	; (1000e0d8 <ble_pair_request_handler+0x16c>)
1000e050:	4b22      	ldr	r3, [pc, #136]	; (1000e0dc <ble_pair_request_handler+0x170>)
1000e052:	4798      	blx	r3
1000e054:	4822      	ldr	r0, [pc, #136]	; (1000e0e0 <ble_pair_request_handler+0x174>)
1000e056:	4b23      	ldr	r3, [pc, #140]	; (1000e0e4 <ble_pair_request_handler+0x178>)
1000e058:	4798      	blx	r3
		for (i = 0; i < 16; i++)
		{
			DBG_LOG_CONT_DEV("0x%02X ", ble_dev_info[idx].host_ltk.key[i]);
1000e05a:	4d22      	ldr	r5, [pc, #136]	; (1000e0e4 <ble_pair_request_handler+0x178>)
1000e05c:	7821      	ldrb	r1, [r4, #0]
1000e05e:	4822      	ldr	r0, [pc, #136]	; (1000e0e8 <ble_pair_request_handler+0x17c>)
1000e060:	47a8      	blx	r5
1000e062:	3401      	adds	r4, #1
		for(i=8 ; i<16 ;i++)
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
		}
		DBG_LOG_DEV("Generated LTK: ");
		for (i = 0; i < 16; i++)
1000e064:	42bc      	cmp	r4, r7
1000e066:	d1f9      	bne.n	1000e05c <ble_pair_request_handler+0xf0>
		{
			DBG_LOG_CONT_DEV("0x%02X ", ble_dev_info[idx].host_ltk.key[i]);
		}
		
		ble_dev_info[idx].host_ltk.ediv = rand()&0xffff;
1000e068:	4b1a      	ldr	r3, [pc, #104]	; (1000e0d4 <ble_pair_request_handler+0x168>)
1000e06a:	4798      	blx	r3
1000e06c:	0173      	lsls	r3, r6, #5
1000e06e:	1b9b      	subs	r3, r3, r6
1000e070:	009b      	lsls	r3, r3, #2
1000e072:	4a17      	ldr	r2, [pc, #92]	; (1000e0d0 <ble_pair_request_handler+0x164>)
1000e074:	18d3      	adds	r3, r2, r3
1000e076:	001a      	movs	r2, r3
1000e078:	3270      	adds	r2, #112	; 0x70
1000e07a:	8010      	strh	r0, [r2, #0]
		ble_dev_info[idx].host_ltk.key_size = 16;
1000e07c:	337a      	adds	r3, #122	; 0x7a
1000e07e:	2210      	movs	r2, #16
1000e080:	701a      	strb	r2, [r3, #0]
		/* Bonding information already exists */
		
	}

	/* Send pairing response */
	DBG_LOG_DEV("Sending pairing response");
1000e082:	4815      	ldr	r0, [pc, #84]	; (1000e0d8 <ble_pair_request_handler+0x16c>)
1000e084:	4b15      	ldr	r3, [pc, #84]	; (1000e0dc <ble_pair_request_handler+0x170>)
1000e086:	4798      	blx	r3
1000e088:	4818      	ldr	r0, [pc, #96]	; (1000e0ec <ble_pair_request_handler+0x180>)
1000e08a:	4b16      	ldr	r3, [pc, #88]	; (1000e0e4 <ble_pair_request_handler+0x178>)
1000e08c:	4798      	blx	r3

	if(at_ble_authenticate(pair_req->handle, &features, &ble_dev_info[idx].host_ltk, NULL) != AT_BLE_SUCCESS)
1000e08e:	0173      	lsls	r3, r6, #5
1000e090:	1b9b      	subs	r3, r3, r6
1000e092:	009b      	lsls	r3, r3, #2
1000e094:	3360      	adds	r3, #96	; 0x60
1000e096:	4a0e      	ldr	r2, [pc, #56]	; (1000e0d0 <ble_pair_request_handler+0x164>)
1000e098:	189a      	adds	r2, r3, r2
1000e09a:	4643      	mov	r3, r8
1000e09c:	8818      	ldrh	r0, [r3, #0]
1000e09e:	2300      	movs	r3, #0
1000e0a0:	a901      	add	r1, sp, #4
1000e0a2:	4c13      	ldr	r4, [pc, #76]	; (1000e0f0 <ble_pair_request_handler+0x184>)
1000e0a4:	47a0      	blx	r4
1000e0a6:	2800      	cmp	r0, #0
1000e0a8:	d00a      	beq.n	1000e0c0 <ble_pair_request_handler+0x154>
	{
		features.bond = false;
1000e0aa:	ab01      	add	r3, sp, #4
1000e0ac:	2200      	movs	r2, #0
1000e0ae:	709a      	strb	r2, [r3, #2]
		features.mitm_protection = false;
1000e0b0:	705a      	strb	r2, [r3, #1]
		DBG_LOG("Pair Request - Authentication Failed");
1000e0b2:	4809      	ldr	r0, [pc, #36]	; (1000e0d8 <ble_pair_request_handler+0x16c>)
1000e0b4:	4b09      	ldr	r3, [pc, #36]	; (1000e0dc <ble_pair_request_handler+0x170>)
1000e0b6:	4798      	blx	r3
1000e0b8:	480e      	ldr	r0, [pc, #56]	; (1000e0f4 <ble_pair_request_handler+0x188>)
1000e0ba:	4b0a      	ldr	r3, [pc, #40]	; (1000e0e4 <ble_pair_request_handler+0x178>)
1000e0bc:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000e0be:	20e2      	movs	r0, #226	; 0xe2
	}
	return AT_BLE_SUCCESS;
}
1000e0c0:	b005      	add	sp, #20
1000e0c2:	bc3c      	pop	{r2, r3, r4, r5}
1000e0c4:	4690      	mov	r8, r2
1000e0c6:	4699      	mov	r9, r3
1000e0c8:	46a2      	mov	sl, r4
1000e0ca:	46ab      	mov	fp, r5
1000e0cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000e0ce:	46c0      	nop			; (mov r8, r8)
1000e0d0:	1001a244 	.word	0x1001a244
1000e0d4:	1001540d 	.word	0x1001540d
1000e0d8:	100165a4 	.word	0x100165a4
1000e0dc:	100153f9 	.word	0x100153f9
1000e0e0:	10017a98 	.word	0x10017a98
1000e0e4:	100152d9 	.word	0x100152d9
1000e0e8:	10017aa8 	.word	0x10017aa8
1000e0ec:	10017ab0 	.word	0x10017ab0
1000e0f0:	100113b9 	.word	0x100113b9
1000e0f4:	10017acc 	.word	0x10017acc

1000e0f8 <ble_pair_key_request_handler>:

/** @brief function handles pair key request */
at_ble_status_t ble_pair_key_request_handler (void *params)
{
1000e0f8:	b5f0      	push	{r4, r5, r6, r7, lr}
1000e0fa:	b085      	sub	sp, #20
1000e0fc:	0005      	movs	r5, r0
	at_ble_pair_key_request_t *pair_key;
	pair_key = (at_ble_pair_key_request_t *)params;
	/* Passkey has fixed value in this example MSB */
	uint8_t passkey[6]={'1','2','3','4','5','6'};
1000e0fe:	2206      	movs	r2, #6
1000e100:	493d      	ldr	r1, [pc, #244]	; (1000e1f8 <ble_pair_key_request_handler+0x100>)
1000e102:	a802      	add	r0, sp, #8
1000e104:	4e3d      	ldr	r6, [pc, #244]	; (1000e1fc <ble_pair_key_request_handler+0x104>)
1000e106:	47b0      	blx	r6
	uint8_t idx = 0;
        uint8_t pin;
        
	at_ble_pair_key_request_t pair_key_request;
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
1000e108:	ac01      	add	r4, sp, #4
1000e10a:	2204      	movs	r2, #4
1000e10c:	0029      	movs	r1, r5
1000e10e:	0020      	movs	r0, r4
1000e110:	47b0      	blx	r6
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
1000e112:	78e3      	ldrb	r3, [r4, #3]
1000e114:	2b00      	cmp	r3, #0
1000e116:	d162      	bne.n	1000e1de <ble_pair_key_request_handler+0xe6>
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
1000e118:	4839      	ldr	r0, [pc, #228]	; (1000e200 <ble_pair_key_request_handler+0x108>)
1000e11a:	4b3a      	ldr	r3, [pc, #232]	; (1000e204 <ble_pair_key_request_handler+0x10c>)
1000e11c:	4798      	blx	r3
1000e11e:	483a      	ldr	r0, [pc, #232]	; (1000e208 <ble_pair_key_request_handler+0x110>)
1000e120:	4b3a      	ldr	r3, [pc, #232]	; (1000e20c <ble_pair_key_request_handler+0x114>)
1000e122:	4798      	blx	r3
1000e124:	2600      	movs	r6, #0
		for (idx = 0; idx < 6;) {          
			pin = getchar_b11_timeout(CHECK_PAIRING_KEY_TIME_OUT);
1000e126:	4c3a      	ldr	r4, [pc, #232]	; (1000e210 <ble_pair_key_request_handler+0x118>)
				return AT_BLE_FAILURE;
			}
			
			if ((pin >= '0') && ( pin <= '9')) {
			  passkey[idx++] = pin;
			  DBG_LOG_CONT("%c", pin);
1000e128:	27ff      	movs	r7, #255	; 0xff
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
		for (idx = 0; idx < 6;) {          
			pin = getchar_b11_timeout(CHECK_PAIRING_KEY_TIME_OUT);
1000e12a:	201e      	movs	r0, #30
1000e12c:	47a0      	blx	r4
1000e12e:	b2c3      	uxtb	r3, r0

			if (!pin) {
1000e130:	2b00      	cmp	r3, #0
1000e132:	d11a      	bne.n	1000e16a <ble_pair_key_request_handler+0x72>
			DBG_LOG("Pin Timeout");
1000e134:	4f32      	ldr	r7, [pc, #200]	; (1000e200 <ble_pair_key_request_handler+0x108>)
1000e136:	0038      	movs	r0, r7
1000e138:	4e32      	ldr	r6, [pc, #200]	; (1000e204 <ble_pair_key_request_handler+0x10c>)
1000e13a:	47b0      	blx	r6
1000e13c:	4835      	ldr	r0, [pc, #212]	; (1000e214 <ble_pair_key_request_handler+0x11c>)
1000e13e:	4c33      	ldr	r4, [pc, #204]	; (1000e20c <ble_pair_key_request_handler+0x114>)
1000e140:	47a0      	blx	r4
				DBG_LOG("Disconnecting ...");
1000e142:	0038      	movs	r0, r7
1000e144:	47b0      	blx	r6
1000e146:	4834      	ldr	r0, [pc, #208]	; (1000e218 <ble_pair_key_request_handler+0x120>)
1000e148:	47a0      	blx	r4
				if (!(at_ble_disconnect(pair_key->handle,
1000e14a:	8828      	ldrh	r0, [r5, #0]
1000e14c:	2113      	movs	r1, #19
1000e14e:	4b33      	ldr	r3, [pc, #204]	; (1000e21c <ble_pair_key_request_handler+0x124>)
1000e150:	4798      	blx	r3
1000e152:	0003      	movs	r3, r0
							AT_BLE_TERMINATED_BY_USER) == AT_BLE_SUCCESS)) {
					DBG_LOG("Disconnect Request Failed");
				}
				return AT_BLE_FAILURE;
1000e154:	20e2      	movs	r0, #226	; 0xe2
			pin = getchar_b11_timeout(CHECK_PAIRING_KEY_TIME_OUT);

			if (!pin) {
			DBG_LOG("Pin Timeout");
				DBG_LOG("Disconnecting ...");
				if (!(at_ble_disconnect(pair_key->handle,
1000e156:	2b00      	cmp	r3, #0
1000e158:	d04c      	beq.n	1000e1f4 <ble_pair_key_request_handler+0xfc>
							AT_BLE_TERMINATED_BY_USER) == AT_BLE_SUCCESS)) {
					DBG_LOG("Disconnect Request Failed");
1000e15a:	4829      	ldr	r0, [pc, #164]	; (1000e200 <ble_pair_key_request_handler+0x108>)
1000e15c:	4b29      	ldr	r3, [pc, #164]	; (1000e204 <ble_pair_key_request_handler+0x10c>)
1000e15e:	4798      	blx	r3
1000e160:	482f      	ldr	r0, [pc, #188]	; (1000e220 <ble_pair_key_request_handler+0x128>)
1000e162:	4b2a      	ldr	r3, [pc, #168]	; (1000e20c <ble_pair_key_request_handler+0x114>)
1000e164:	4798      	blx	r3
				}
				return AT_BLE_FAILURE;
1000e166:	20e2      	movs	r0, #226	; 0xe2
1000e168:	e044      	b.n	1000e1f4 <ble_pair_key_request_handler+0xfc>
			}
			
			if ((pin >= '0') && ( pin <= '9')) {
1000e16a:	001a      	movs	r2, r3
1000e16c:	3a30      	subs	r2, #48	; 0x30
1000e16e:	2a09      	cmp	r2, #9
1000e170:	d8db      	bhi.n	1000e12a <ble_pair_key_request_handler+0x32>
			  passkey[idx++] = pin;
1000e172:	aa02      	add	r2, sp, #8
1000e174:	54b3      	strb	r3, [r6, r2]
			  DBG_LOG_CONT("%c", pin);
1000e176:	4038      	ands	r0, r7
1000e178:	4b2a      	ldr	r3, [pc, #168]	; (1000e224 <ble_pair_key_request_handler+0x12c>)
1000e17a:	4798      	blx	r3
1000e17c:	3601      	adds	r6, #1
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
		for (idx = 0; idx < 6;) {          
1000e17e:	2e06      	cmp	r6, #6
1000e180:	d026      	beq.n	1000e1d0 <ble_pair_key_request_handler+0xd8>
1000e182:	e7d2      	b.n	1000e12a <ble_pair_key_request_handler+0x32>
          {
            DBG_LOG("Entered Pass-code:");
          }
          else
          {
            DBG_LOG("Please Enter the following Pass-code(on other Device):");
1000e184:	481e      	ldr	r0, [pc, #120]	; (1000e200 <ble_pair_key_request_handler+0x108>)
1000e186:	4b1f      	ldr	r3, [pc, #124]	; (1000e204 <ble_pair_key_request_handler+0x10c>)
1000e188:	4798      	blx	r3
1000e18a:	4827      	ldr	r0, [pc, #156]	; (1000e228 <ble_pair_key_request_handler+0x130>)
1000e18c:	4b1f      	ldr	r3, [pc, #124]	; (1000e20c <ble_pair_key_request_handler+0x114>)
1000e18e:	4798      	blx	r3
	at_ble_pair_key_request_t pair_key_request;
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
1000e190:	2400      	movs	r4, #0
          
          /* Convert passkey to ASCII format */
          for(idx=0; idx<AT_BLE_PASSKEY_LEN; idx++)
          {
                  passkey[idx] = (passkey[idx]);
                  DBG_LOG_CONT("%c",passkey[idx]);
1000e192:	4e24      	ldr	r6, [pc, #144]	; (1000e224 <ble_pair_key_request_handler+0x12c>)
          }
          
          /* Convert passkey to ASCII format */
          for(idx=0; idx<AT_BLE_PASSKEY_LEN; idx++)
          {
                  passkey[idx] = (passkey[idx]);
1000e194:	ab02      	add	r3, sp, #8
                  DBG_LOG_CONT("%c",passkey[idx]);
1000e196:	5ce0      	ldrb	r0, [r4, r3]
1000e198:	47b0      	blx	r6
1000e19a:	3401      	adds	r4, #1
          {
            DBG_LOG("Please Enter the following Pass-code(on other Device):");
          }
          
          /* Convert passkey to ASCII format */
          for(idx=0; idx<AT_BLE_PASSKEY_LEN; idx++)
1000e19c:	2c06      	cmp	r4, #6
1000e19e:	d1f9      	bne.n	1000e194 <ble_pair_key_request_handler+0x9c>
          {
                  passkey[idx] = (passkey[idx]);
                  DBG_LOG_CONT("%c",passkey[idx]);
          }		
          
          if(!((at_ble_pair_key_reply(pair_key->handle, pair_key_request.type, passkey)) == AT_BLE_SUCCESS))
1000e1a0:	ab01      	add	r3, sp, #4
1000e1a2:	7899      	ldrb	r1, [r3, #2]
1000e1a4:	8828      	ldrh	r0, [r5, #0]
1000e1a6:	aa02      	add	r2, sp, #8
1000e1a8:	4b20      	ldr	r3, [pc, #128]	; (1000e22c <ble_pair_key_request_handler+0x134>)
1000e1aa:	4798      	blx	r3
1000e1ac:	2800      	cmp	r0, #0
1000e1ae:	d021      	beq.n	1000e1f4 <ble_pair_key_request_handler+0xfc>
          {
                  DBG_LOG("Pair-key reply failed");
1000e1b0:	4813      	ldr	r0, [pc, #76]	; (1000e200 <ble_pair_key_request_handler+0x108>)
1000e1b2:	4b14      	ldr	r3, [pc, #80]	; (1000e204 <ble_pair_key_request_handler+0x10c>)
1000e1b4:	4798      	blx	r3
1000e1b6:	481e      	ldr	r0, [pc, #120]	; (1000e230 <ble_pair_key_request_handler+0x138>)
1000e1b8:	4b14      	ldr	r3, [pc, #80]	; (1000e20c <ble_pair_key_request_handler+0x114>)
1000e1ba:	4798      	blx	r3
		if(pair_key_request.type == AT_BLE_PAIR_OOB)
		{
			DBG_LOG("OOB Feature Not supported");
		}
	}
	return AT_BLE_SUCCESS;	
1000e1bc:	2000      	movs	r0, #0
1000e1be:	e019      	b.n	1000e1f4 <ble_pair_key_request_handler+0xfc>
	}
	else 
	{
		if(pair_key_request.type == AT_BLE_PAIR_OOB)
		{
			DBG_LOG("OOB Feature Not supported");
1000e1c0:	480f      	ldr	r0, [pc, #60]	; (1000e200 <ble_pair_key_request_handler+0x108>)
1000e1c2:	4b10      	ldr	r3, [pc, #64]	; (1000e204 <ble_pair_key_request_handler+0x10c>)
1000e1c4:	4798      	blx	r3
1000e1c6:	481b      	ldr	r0, [pc, #108]	; (1000e234 <ble_pair_key_request_handler+0x13c>)
1000e1c8:	4b10      	ldr	r3, [pc, #64]	; (1000e20c <ble_pair_key_request_handler+0x114>)
1000e1ca:	4798      	blx	r3
		}
	}
	return AT_BLE_SUCCESS;	
1000e1cc:	2000      	movs	r0, #0
1000e1ce:	e011      	b.n	1000e1f4 <ble_pair_key_request_handler+0xfc>
	if(((pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_DISPLAY) &&
	   (pair_key_request.type == AT_BLE_PAIR_PASSKEY)) || (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY))
	{
          if(pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY)
          {
            DBG_LOG("Entered Pass-code:");
1000e1d0:	480b      	ldr	r0, [pc, #44]	; (1000e200 <ble_pair_key_request_handler+0x108>)
1000e1d2:	4b0c      	ldr	r3, [pc, #48]	; (1000e204 <ble_pair_key_request_handler+0x10c>)
1000e1d4:	4798      	blx	r3
1000e1d6:	4818      	ldr	r0, [pc, #96]	; (1000e238 <ble_pair_key_request_handler+0x140>)
1000e1d8:	4b0c      	ldr	r3, [pc, #48]	; (1000e20c <ble_pair_key_request_handler+0x114>)
1000e1da:	4798      	blx	r3
1000e1dc:	e7d8      	b.n	1000e190 <ble_pair_key_request_handler+0x98>
			} 
	  }
	}	
	
	/* Display passkey */
	if(((pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_DISPLAY) &&
1000e1de:	ab01      	add	r3, sp, #4
1000e1e0:	885a      	ldrh	r2, [r3, #2]
1000e1e2:	2380      	movs	r3, #128	; 0x80
1000e1e4:	005b      	lsls	r3, r3, #1
1000e1e6:	429a      	cmp	r2, r3
1000e1e8:	d0cc      	beq.n	1000e184 <ble_pair_key_request_handler+0x8c>
                  DBG_LOG("Pair-key reply failed");
          }
	}
	else 
	{
		if(pair_key_request.type == AT_BLE_PAIR_OOB)
1000e1ea:	ab01      	add	r3, sp, #4
1000e1ec:	789b      	ldrb	r3, [r3, #2]
1000e1ee:	2b01      	cmp	r3, #1
1000e1f0:	d0e6      	beq.n	1000e1c0 <ble_pair_key_request_handler+0xc8>
		{
			DBG_LOG("OOB Feature Not supported");
		}
	}
	return AT_BLE_SUCCESS;	
1000e1f2:	2000      	movs	r0, #0
}
1000e1f4:	b005      	add	sp, #20
1000e1f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000e1f8:	100176b4 	.word	0x100176b4
1000e1fc:	1001517f 	.word	0x1001517f
1000e200:	100165a4 	.word	0x100165a4
1000e204:	100153f9 	.word	0x100153f9
1000e208:	10017af4 	.word	0x10017af4
1000e20c:	100152d9 	.word	0x100152d9
1000e210:	1000ef15 	.word	0x1000ef15
1000e214:	10017b1c 	.word	0x10017b1c
1000e218:	10017b28 	.word	0x10017b28
1000e21c:	100109c1 	.word	0x100109c1
1000e220:	100179d4 	.word	0x100179d4
1000e224:	1001530d 	.word	0x1001530d
1000e228:	10017b3c 	.word	0x10017b3c
1000e22c:	100114e9 	.word	0x100114e9
1000e230:	10017b74 	.word	0x10017b74
1000e234:	10017b8c 	.word	0x10017b8c
1000e238:	10017ba8 	.word	0x10017ba8

1000e23c <ble_encryption_request_handler>:
	return AT_BLE_SUCCESS;
}

/** @brief function handles encryption requests */
at_ble_status_t ble_encryption_request_handler(void *params)
{
1000e23c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000e23e:	465f      	mov	r7, fp
1000e240:	4656      	mov	r6, sl
1000e242:	464d      	mov	r5, r9
1000e244:	b4e0      	push	{r5, r6, r7}
1000e246:	0006      	movs	r6, r0
	uint8_t idx;
	enc_req = (at_ble_encryption_request_t *)params;

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == enc_req->handle) && (ble_dev_info[idx].conn_state != BLE_DEVICE_DISCONNECTED) &&
1000e248:	8800      	ldrh	r0, [r0, #0]
1000e24a:	4b49      	ldr	r3, [pc, #292]	; (1000e370 <ble_encryption_request_handler+0x134>)
1000e24c:	2200      	movs	r2, #0
	bool key_found = false;
	bool device_found = false;
	uint8_t idx;
	enc_req = (at_ble_encryption_request_t *)params;

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000e24e:	2400      	movs	r4, #0
	{
		if((ble_dev_info[idx].conn_info.handle == enc_req->handle) && (ble_dev_info[idx].conn_state != BLE_DEVICE_DISCONNECTED) &&
1000e250:	8919      	ldrh	r1, [r3, #8]
1000e252:	4281      	cmp	r1, r0
1000e254:	d137      	bne.n	1000e2c6 <ble_encryption_request_handler+0x8a>
1000e256:	0019      	movs	r1, r3
1000e258:	315e      	adds	r1, #94	; 0x5e
1000e25a:	7809      	ldrb	r1, [r1, #0]
1000e25c:	2901      	cmp	r1, #1
1000e25e:	d932      	bls.n	1000e2c6 <ble_encryption_request_handler+0x8a>
		(ble_dev_info[idx].conn_state != BLE_DEVICE_DEFAULT_IDLE))
		{
			device_found = true;
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_STATE;
1000e260:	4f43      	ldr	r7, [pc, #268]	; (1000e370 <ble_encryption_request_handler+0x134>)
1000e262:	0153      	lsls	r3, r2, #5
1000e264:	1a9d      	subs	r5, r3, r2
1000e266:	00ad      	lsls	r5, r5, #2
1000e268:	197d      	adds	r5, r7, r5
1000e26a:	355e      	adds	r5, #94	; 0x5e
1000e26c:	2306      	movs	r3, #6
1000e26e:	702b      	strb	r3, [r5, #0]
			DBG_LOG_DEV("ENC-Req: Conn Handle Device Found:hdl:%d", enc_req->handle);
1000e270:	4840      	ldr	r0, [pc, #256]	; (1000e374 <ble_encryption_request_handler+0x138>)
1000e272:	4b41      	ldr	r3, [pc, #260]	; (1000e378 <ble_encryption_request_handler+0x13c>)
1000e274:	469a      	mov	sl, r3
1000e276:	4798      	blx	r3
1000e278:	8831      	ldrh	r1, [r6, #0]
1000e27a:	4840      	ldr	r0, [pc, #256]	; (1000e37c <ble_encryption_request_handler+0x140>)
1000e27c:	4b40      	ldr	r3, [pc, #256]	; (1000e380 <ble_encryption_request_handler+0x144>)
1000e27e:	4699      	mov	r9, r3
1000e280:	4798      	blx	r3
		}
	}
	
	if (device_found)
	{
		DBG_LOG_DEV("host device ediv %x",ble_dev_info[idx].host_ltk.ediv);
1000e282:	483c      	ldr	r0, [pc, #240]	; (1000e374 <ble_encryption_request_handler+0x138>)
1000e284:	47d0      	blx	sl
1000e286:	0163      	lsls	r3, r4, #5
1000e288:	1b1b      	subs	r3, r3, r4
1000e28a:	009b      	lsls	r3, r3, #2
1000e28c:	18ff      	adds	r7, r7, r3
1000e28e:	2370      	movs	r3, #112	; 0x70
1000e290:	469b      	mov	fp, r3
1000e292:	44bb      	add	fp, r7
1000e294:	465b      	mov	r3, fp
1000e296:	8819      	ldrh	r1, [r3, #0]
1000e298:	483a      	ldr	r0, [pc, #232]	; (1000e384 <ble_encryption_request_handler+0x148>)
1000e29a:	47c8      	blx	r9
		DBG_LOG_DEV("peer device ediv %x",ble_dev_info[idx].bond_info.peer_ltk.ediv);
1000e29c:	4835      	ldr	r0, [pc, #212]	; (1000e374 <ble_encryption_request_handler+0x138>)
1000e29e:	47d0      	blx	sl
1000e2a0:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
1000e2a2:	4839      	ldr	r0, [pc, #228]	; (1000e388 <ble_encryption_request_handler+0x14c>)
1000e2a4:	47c8      	blx	r9
		DBG_LOG_DEV("enc_req ediv %x", enc_req->ediv);
1000e2a6:	4833      	ldr	r0, [pc, #204]	; (1000e374 <ble_encryption_request_handler+0x138>)
1000e2a8:	47d0      	blx	sl
1000e2aa:	8871      	ldrh	r1, [r6, #2]
1000e2ac:	4837      	ldr	r0, [pc, #220]	; (1000e38c <ble_encryption_request_handler+0x150>)
1000e2ae:	47c8      	blx	r9
		DBG_LOG_DEV("The index is %d",idx);
1000e2b0:	4830      	ldr	r0, [pc, #192]	; (1000e374 <ble_encryption_request_handler+0x138>)
1000e2b2:	47d0      	blx	sl
1000e2b4:	0021      	movs	r1, r4
1000e2b6:	4836      	ldr	r0, [pc, #216]	; (1000e390 <ble_encryption_request_handler+0x154>)
1000e2b8:	47c8      	blx	r9
		if((ble_dev_info[idx].host_ltk.ediv == enc_req->ediv)
1000e2ba:	465b      	mov	r3, fp
1000e2bc:	881a      	ldrh	r2, [r3, #0]
1000e2be:	8873      	ldrh	r3, [r6, #2]
1000e2c0:	429a      	cmp	r2, r3
1000e2c2:	d12a      	bne.n	1000e31a <ble_encryption_request_handler+0xde>
1000e2c4:	e006      	b.n	1000e2d4 <ble_encryption_request_handler+0x98>
	bool key_found = false;
	bool device_found = false;
	uint8_t idx;
	enc_req = (at_ble_encryption_request_t *)params;

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000e2c6:	3401      	adds	r4, #1
1000e2c8:	b2e4      	uxtb	r4, r4
1000e2ca:	3201      	adds	r2, #1
1000e2cc:	337c      	adds	r3, #124	; 0x7c
1000e2ce:	2c05      	cmp	r4, #5
1000e2d0:	d1be      	bne.n	1000e250 <ble_encryption_request_handler+0x14>
1000e2d2:	e022      	b.n	1000e31a <ble_encryption_request_handler+0xde>
		DBG_LOG_DEV("host device ediv %x",ble_dev_info[idx].host_ltk.ediv);
		DBG_LOG_DEV("peer device ediv %x",ble_dev_info[idx].bond_info.peer_ltk.ediv);
		DBG_LOG_DEV("enc_req ediv %x", enc_req->ediv);
		DBG_LOG_DEV("The index is %d",idx);
		if((ble_dev_info[idx].host_ltk.ediv == enc_req->ediv)
		&& !memcmp(&enc_req->nb[0],&ble_dev_info[idx].host_ltk.nb[0],8))
1000e2d4:	0161      	lsls	r1, r4, #5
1000e2d6:	1b09      	subs	r1, r1, r4
1000e2d8:	0089      	lsls	r1, r1, #2
1000e2da:	4b25      	ldr	r3, [pc, #148]	; (1000e370 <ble_encryption_request_handler+0x134>)
1000e2dc:	1859      	adds	r1, r3, r1
1000e2de:	3172      	adds	r1, #114	; 0x72
1000e2e0:	1d30      	adds	r0, r6, #4
1000e2e2:	2208      	movs	r2, #8
1000e2e4:	4b2b      	ldr	r3, [pc, #172]	; (1000e394 <ble_encryption_request_handler+0x158>)
1000e2e6:	4798      	blx	r3
1000e2e8:	2800      	cmp	r0, #0
1000e2ea:	d116      	bne.n	1000e31a <ble_encryption_request_handler+0xde>
		{
			key_found = true;
			DBG_LOG_DEV("ENC-Req: Key Found");
1000e2ec:	4821      	ldr	r0, [pc, #132]	; (1000e374 <ble_encryption_request_handler+0x138>)
1000e2ee:	4b22      	ldr	r3, [pc, #136]	; (1000e378 <ble_encryption_request_handler+0x13c>)
1000e2f0:	4798      	blx	r3
1000e2f2:	4829      	ldr	r0, [pc, #164]	; (1000e398 <ble_encryption_request_handler+0x15c>)
1000e2f4:	4b22      	ldr	r3, [pc, #136]	; (1000e380 <ble_encryption_request_handler+0x144>)
1000e2f6:	4798      	blx	r3
	    DBG_LOG("Please unpair the device from peer device(mobile) settings menu and start pairing again");
		at_ble_disconnect(ble_dev_info[idx].conn_info.handle, AT_BLE_AUTH_FAILURE);
		return AT_BLE_FAILURE;
    }

	if(!(at_ble_encryption_request_reply(enc_req->handle, ble_dev_info[idx].bond_info.auth, key_found, &ble_dev_info[idx].host_ltk) == AT_BLE_SUCCESS))
1000e2f8:	0162      	lsls	r2, r4, #5
1000e2fa:	1b13      	subs	r3, r2, r4
1000e2fc:	009b      	lsls	r3, r3, #2
1000e2fe:	3360      	adds	r3, #96	; 0x60
1000e300:	491b      	ldr	r1, [pc, #108]	; (1000e370 <ble_encryption_request_handler+0x134>)
1000e302:	185b      	adds	r3, r3, r1
1000e304:	1b12      	subs	r2, r2, r4
1000e306:	0092      	lsls	r2, r2, #2
1000e308:	188a      	adds	r2, r1, r2
1000e30a:	7d11      	ldrb	r1, [r2, #20]
1000e30c:	8830      	ldrh	r0, [r6, #0]
1000e30e:	2201      	movs	r2, #1
1000e310:	4c22      	ldr	r4, [pc, #136]	; (1000e39c <ble_encryption_request_handler+0x160>)
1000e312:	47a0      	blx	r4
1000e314:	1e04      	subs	r4, r0, #0
1000e316:	d01e      	beq.n	1000e356 <ble_encryption_request_handler+0x11a>
1000e318:	e015      	b.n	1000e346 <ble_encryption_request_handler+0x10a>
	}
	
	
    if(key_found == false)
    {
	    DBG_LOG("Pairing information of peer device is not available.");
1000e31a:	4f16      	ldr	r7, [pc, #88]	; (1000e374 <ble_encryption_request_handler+0x138>)
1000e31c:	0038      	movs	r0, r7
1000e31e:	4e16      	ldr	r6, [pc, #88]	; (1000e378 <ble_encryption_request_handler+0x13c>)
1000e320:	47b0      	blx	r6
1000e322:	481f      	ldr	r0, [pc, #124]	; (1000e3a0 <ble_encryption_request_handler+0x164>)
1000e324:	4d16      	ldr	r5, [pc, #88]	; (1000e380 <ble_encryption_request_handler+0x144>)
1000e326:	47a8      	blx	r5
	    DBG_LOG("Please unpair the device from peer device(mobile) settings menu and start pairing again");
1000e328:	0038      	movs	r0, r7
1000e32a:	47b0      	blx	r6
1000e32c:	481d      	ldr	r0, [pc, #116]	; (1000e3a4 <ble_encryption_request_handler+0x168>)
1000e32e:	47a8      	blx	r5
		at_ble_disconnect(ble_dev_info[idx].conn_info.handle, AT_BLE_AUTH_FAILURE);
1000e330:	0163      	lsls	r3, r4, #5
1000e332:	1b1c      	subs	r4, r3, r4
1000e334:	00a4      	lsls	r4, r4, #2
1000e336:	4b0e      	ldr	r3, [pc, #56]	; (1000e370 <ble_encryption_request_handler+0x134>)
1000e338:	191c      	adds	r4, r3, r4
1000e33a:	8920      	ldrh	r0, [r4, #8]
1000e33c:	2105      	movs	r1, #5
1000e33e:	4b1a      	ldr	r3, [pc, #104]	; (1000e3a8 <ble_encryption_request_handler+0x16c>)
1000e340:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000e342:	24e2      	movs	r4, #226	; 0xe2
1000e344:	e00d      	b.n	1000e362 <ble_encryption_request_handler+0x126>
    }

	if(!(at_ble_encryption_request_reply(enc_req->handle, ble_dev_info[idx].bond_info.auth, key_found, &ble_dev_info[idx].host_ltk) == AT_BLE_SUCCESS))
	{
		DBG_LOG("Encryption Request Reply Failed");
1000e346:	480b      	ldr	r0, [pc, #44]	; (1000e374 <ble_encryption_request_handler+0x138>)
1000e348:	4b0b      	ldr	r3, [pc, #44]	; (1000e378 <ble_encryption_request_handler+0x13c>)
1000e34a:	4798      	blx	r3
1000e34c:	4817      	ldr	r0, [pc, #92]	; (1000e3ac <ble_encryption_request_handler+0x170>)
1000e34e:	4b0c      	ldr	r3, [pc, #48]	; (1000e380 <ble_encryption_request_handler+0x144>)
1000e350:	4798      	blx	r3
	}
	else
	{      
		DBG_LOG_DEV("Encryption Request Reply");
	}
	return AT_BLE_SUCCESS;
1000e352:	2400      	movs	r4, #0
1000e354:	e005      	b.n	1000e362 <ble_encryption_request_handler+0x126>
	{
		DBG_LOG("Encryption Request Reply Failed");
	}
	else
	{      
		DBG_LOG_DEV("Encryption Request Reply");
1000e356:	4807      	ldr	r0, [pc, #28]	; (1000e374 <ble_encryption_request_handler+0x138>)
1000e358:	4b07      	ldr	r3, [pc, #28]	; (1000e378 <ble_encryption_request_handler+0x13c>)
1000e35a:	4798      	blx	r3
1000e35c:	4814      	ldr	r0, [pc, #80]	; (1000e3b0 <ble_encryption_request_handler+0x174>)
1000e35e:	4b08      	ldr	r3, [pc, #32]	; (1000e380 <ble_encryption_request_handler+0x144>)
1000e360:	4798      	blx	r3
	}
	return AT_BLE_SUCCESS;
}
1000e362:	0020      	movs	r0, r4
1000e364:	bc1c      	pop	{r2, r3, r4}
1000e366:	4691      	mov	r9, r2
1000e368:	469a      	mov	sl, r3
1000e36a:	46a3      	mov	fp, r4
1000e36c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000e36e:	46c0      	nop			; (mov r8, r8)
1000e370:	1001a244 	.word	0x1001a244
1000e374:	100165a4 	.word	0x100165a4
1000e378:	100153f9 	.word	0x100153f9
1000e37c:	10017bbc 	.word	0x10017bbc
1000e380:	100152d9 	.word	0x100152d9
1000e384:	10017be8 	.word	0x10017be8
1000e388:	10017bfc 	.word	0x10017bfc
1000e38c:	10017c10 	.word	0x10017c10
1000e390:	10017c20 	.word	0x10017c20
1000e394:	10015161 	.word	0x10015161
1000e398:	10017c30 	.word	0x10017c30
1000e39c:	1001161d 	.word	0x1001161d
1000e3a0:	10017c44 	.word	0x10017c44
1000e3a4:	10017c7c 	.word	0x10017c7c
1000e3a8:	100109c1 	.word	0x100109c1
1000e3ac:	10017cd4 	.word	0x10017cd4
1000e3b0:	10017cf4 	.word	0x10017cf4

1000e3b4 <ble_mgr_events_callback_handler>:
}

bool ble_mgr_events_callback_handler(ble_mgr_event_cb_t event_cb_type, 
									ble_mgr_event_t event_type,
									const ble_event_callback_t *ble_event_handler)
{
1000e3b4:	b530      	push	{r4, r5, lr}
	uint8_t idx;
	uint8_t max_event_handler = 0;
	bool status = true;
	const ble_event_callback_t **ble_event_cb_ptr = NULL;
	if (ble_event_handler != NULL)
1000e3b6:	2a00      	cmp	r2, #0
1000e3b8:	d047      	beq.n	1000e44a <ble_mgr_events_callback_handler+0x96>
	{
		switch(event_type)
1000e3ba:	2906      	cmp	r1, #6
1000e3bc:	d847      	bhi.n	1000e44e <ble_mgr_events_callback_handler+0x9a>
1000e3be:	0089      	lsls	r1, r1, #2
1000e3c0:	4b28      	ldr	r3, [pc, #160]	; (1000e464 <ble_mgr_events_callback_handler+0xb0>)
1000e3c2:	585b      	ldr	r3, [r3, r1]
1000e3c4:	469f      	mov	pc, r3
			}
			break;
			
			case BLE_GATT_SERVER_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_gatt_server_event_cb;
1000e3c6:	4b28      	ldr	r3, [pc, #160]	; (1000e468 <ble_mgr_events_callback_handler+0xb4>)
				max_event_handler = MAX_GATT_SERVER_SUBSCRIBERS;
1000e3c8:	2405      	movs	r4, #5
1000e3ca:	e00a      	b.n	1000e3e2 <ble_mgr_events_callback_handler+0x2e>
			}
			break;
			
			case BLE_GATT_HTPT_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_htpt_event_cb;
1000e3cc:	4b27      	ldr	r3, [pc, #156]	; (1000e46c <ble_mgr_events_callback_handler+0xb8>)
				max_event_handler = MAX_HTPT_EVENT_SUBSCRIBERS;
1000e3ce:	2401      	movs	r4, #1
			}
			break;
1000e3d0:	e007      	b.n	1000e3e2 <ble_mgr_events_callback_handler+0x2e>
			
			case BLE_DTM_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_dtm_event_cb;
1000e3d2:	4b27      	ldr	r3, [pc, #156]	; (1000e470 <ble_mgr_events_callback_handler+0xbc>)
				max_event_handler = MAX_DTM_EVENT_SUBSCRIBERS;
1000e3d4:	2405      	movs	r4, #5
			}
			break;
1000e3d6:	e004      	b.n	1000e3e2 <ble_mgr_events_callback_handler+0x2e>
			
			case BLE_CUSTOM_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_custom_event_cb;
1000e3d8:	4b26      	ldr	r3, [pc, #152]	; (1000e474 <ble_mgr_events_callback_handler+0xc0>)
				max_event_handler = MAX_CUSTOM_EVENT_SUBSCRIBERS;
1000e3da:	2401      	movs	r4, #1
			}
			break;
1000e3dc:	e001      	b.n	1000e3e2 <ble_mgr_events_callback_handler+0x2e>
	{
		switch(event_type)
		{
			case BLE_GAP_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_gap_event_cb;
1000e3de:	4b26      	ldr	r3, [pc, #152]	; (1000e478 <ble_mgr_events_callback_handler+0xc4>)
				max_event_handler = MAX_GAP_EVENT_SUBSCRIBERS;
1000e3e0:	2405      	movs	r4, #5
		}
		
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
			if (event_cb_type == REGISTER_CALL_BACK)
1000e3e2:	2800      	cmp	r0, #0
1000e3e4:	d116      	bne.n	1000e414 <ble_mgr_events_callback_handler+0x60>
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == NULL)
1000e3e6:	6819      	ldr	r1, [r3, #0]
1000e3e8:	2900      	cmp	r1, #0
1000e3ea:	d10b      	bne.n	1000e404 <ble_mgr_events_callback_handler+0x50>
1000e3ec:	e006      	b.n	1000e3fc <ble_mgr_events_callback_handler+0x48>
1000e3ee:	001d      	movs	r5, r3
1000e3f0:	3304      	adds	r3, #4
1000e3f2:	1f18      	subs	r0, r3, #4
1000e3f4:	6800      	ldr	r0, [r0, #0]
1000e3f6:	2800      	cmp	r0, #0
1000e3f8:	d106      	bne.n	1000e408 <ble_mgr_events_callback_handler+0x54>
1000e3fa:	e000      	b.n	1000e3fe <ble_mgr_events_callback_handler+0x4a>
1000e3fc:	001d      	movs	r5, r3
					{
						ble_event_cb_ptr[idx] = ble_event_handler;
1000e3fe:	602a      	str	r2, [r5, #0]
						status = true; //Successfully registered to table
1000e400:	2101      	movs	r1, #1
						break;
1000e402:	e02c      	b.n	1000e45e <ble_mgr_events_callback_handler+0xaa>
1000e404:	3304      	adds	r3, #4
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
			if (event_cb_type == REGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == NULL)
1000e406:	2100      	movs	r1, #0
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
			if (event_cb_type == REGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
1000e408:	3101      	adds	r1, #1
1000e40a:	b2c9      	uxtb	r1, r1
1000e40c:	42a1      	cmp	r1, r4
1000e40e:	d3ee      	bcc.n	1000e3ee <ble_mgr_events_callback_handler+0x3a>
			break;
		}
		
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
1000e410:	2100      	movs	r1, #0
1000e412:	e024      	b.n	1000e45e <ble_mgr_events_callback_handler+0xaa>
1000e414:	2100      	movs	r1, #0
						status = true; //Successfully registered to table
						break;
					}
				}
			}
			else if(event_cb_type == UNREGISTER_CALL_BACK)
1000e416:	2801      	cmp	r0, #1
1000e418:	d121      	bne.n	1000e45e <ble_mgr_events_callback_handler+0xaa>
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == ble_event_handler)
1000e41a:	6819      	ldr	r1, [r3, #0]
1000e41c:	428a      	cmp	r2, r1
1000e41e:	d10c      	bne.n	1000e43a <ble_mgr_events_callback_handler+0x86>
1000e420:	e006      	b.n	1000e430 <ble_mgr_events_callback_handler+0x7c>
1000e422:	001d      	movs	r5, r3
1000e424:	3304      	adds	r3, #4
1000e426:	1f18      	subs	r0, r3, #4
1000e428:	6800      	ldr	r0, [r0, #0]
1000e42a:	4282      	cmp	r2, r0
1000e42c:	d107      	bne.n	1000e43e <ble_mgr_events_callback_handler+0x8a>
1000e42e:	e000      	b.n	1000e432 <ble_mgr_events_callback_handler+0x7e>
1000e430:	001d      	movs	r5, r3
					{
						ble_event_cb_ptr[idx] = NULL;
1000e432:	2300      	movs	r3, #0
1000e434:	602b      	str	r3, [r5, #0]
						status = true;//Successfully unregistered from table
1000e436:	2101      	movs	r1, #1
						break;
1000e438:	e011      	b.n	1000e45e <ble_mgr_events_callback_handler+0xaa>
1000e43a:	3304      	adds	r3, #4
			}
			else if(event_cb_type == UNREGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == ble_event_handler)
1000e43c:	2100      	movs	r1, #0
					}
				}
			}
			else if(event_cb_type == UNREGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
1000e43e:	3101      	adds	r1, #1
1000e440:	b2c9      	uxtb	r1, r1
1000e442:	42a1      	cmp	r1, r4
1000e444:	d3ed      	bcc.n	1000e422 <ble_mgr_events_callback_handler+0x6e>
			break;
		}
		
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
1000e446:	2100      	movs	r1, #0
1000e448:	e009      	b.n	1000e45e <ble_mgr_events_callback_handler+0xaa>
			}			
		}
	}
	else
	{
		status = false; //Invalid parameter
1000e44a:	2100      	movs	r1, #0
1000e44c:	e007      	b.n	1000e45e <ble_mgr_events_callback_handler+0xaa>
	uint8_t max_event_handler = 0;
	bool status = true;
	const ble_event_callback_t **ble_event_cb_ptr = NULL;
	if (ble_event_handler != NULL)
	{
		switch(event_type)
1000e44e:	2100      	movs	r1, #0
1000e450:	e005      	b.n	1000e45e <ble_mgr_events_callback_handler+0xaa>
			}
			break;
			
			case BLE_GATT_CLIENT_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_gatt_client_event_cb;
1000e452:	4b0a      	ldr	r3, [pc, #40]	; (1000e47c <ble_mgr_events_callback_handler+0xc8>)
				max_event_handler = MAX_GATT_CLIENT_SUBSCRIBERS;
1000e454:	2405      	movs	r4, #5
1000e456:	e7c4      	b.n	1000e3e2 <ble_mgr_events_callback_handler+0x2e>
			}
			break;
			
			case BLE_L2CAP_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_l2cap_event_cb;
1000e458:	4b09      	ldr	r3, [pc, #36]	; (1000e480 <ble_mgr_events_callback_handler+0xcc>)
				max_event_handler = MAX_L2CAP_EVENT_SUBSCRIBERS;
1000e45a:	2401      	movs	r4, #1
1000e45c:	e7c1      	b.n	1000e3e2 <ble_mgr_events_callback_handler+0x2e>
	else
	{
		status = false; //Invalid parameter
	}
	return status;
}
1000e45e:	0008      	movs	r0, r1
1000e460:	bd30      	pop	{r4, r5, pc}
1000e462:	46c0      	nop			; (mov r8, r8)
1000e464:	100175a8 	.word	0x100175a8
1000e468:	1001a230 	.word	0x1001a230
1000e46c:	1001a22c 	.word	0x1001a22c
1000e470:	1001a4b4 	.word	0x1001a4b4
1000e474:	1001aa68 	.word	0x1001aa68
1000e478:	1001a4c8 	.word	0x1001a4c8
1000e47c:	1001a4dc 	.word	0x1001a4dc
1000e480:	1001a524 	.word	0x1001a524

1000e484 <ble_device_init>:
volatile uint32_t 	event_params_memory[1024] 	= {0};


/** @brief BLE device initialization */
void ble_device_init(at_ble_addr_t *addr)
{
1000e484:	b5f0      	push	{r4, r5, r6, r7, lr}
1000e486:	465f      	mov	r7, fp
1000e488:	4656      	mov	r6, sl
1000e48a:	464d      	mov	r5, r9
1000e48c:	4644      	mov	r4, r8
1000e48e:	b4f0      	push	{r4, r5, r6, r7}
1000e490:	b091      	sub	sp, #68	; 0x44
1000e492:	0005      	movs	r5, r0
static bool ble_scan_duplication_check(at_ble_scan_info_t * info);
#endif

static void init_global_var(void)
{
	ble_user_event_cb = 0;
1000e494:	2400      	movs	r4, #0
1000e496:	4b7e      	ldr	r3, [pc, #504]	; (1000e690 <ble_device_init+0x20c>)
1000e498:	601c      	str	r4, [r3, #0]
	
	memset(&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
1000e49a:	2207      	movs	r2, #7
1000e49c:	2100      	movs	r1, #0
1000e49e:	487d      	ldr	r0, [pc, #500]	; (1000e694 <ble_device_init+0x210>)
1000e4a0:	4e7d      	ldr	r6, [pc, #500]	; (1000e698 <ble_device_init+0x214>)
1000e4a2:	47b0      	blx	r6
	memset(&connected_state_info, 0, sizeof(at_ble_connected_t));
1000e4a4:	2212      	movs	r2, #18
1000e4a6:	2100      	movs	r1, #0
1000e4a8:	487c      	ldr	r0, [pc, #496]	; (1000e69c <ble_device_init+0x218>)
1000e4aa:	47b0      	blx	r6
		
#if defined ATT_DB_MEMORY
	memset(att_db_data, 0, sizeof(uint32_t) * BLE_ATT_DB_MEMORY_SIZE/4);
1000e4ac:	4a7c      	ldr	r2, [pc, #496]	; (1000e6a0 <ble_device_init+0x21c>)
1000e4ae:	2100      	movs	r1, #0
1000e4b0:	487c      	ldr	r0, [pc, #496]	; (1000e6a4 <ble_device_init+0x220>)
1000e4b2:	47b0      	blx	r6
#endif

	scan_response_count = 0;
1000e4b4:	4b7c      	ldr	r3, [pc, #496]	; (1000e6a8 <ble_device_init+0x224>)
1000e4b6:	701c      	strb	r4, [r3, #0]
	memset(scan_info, 0, sizeof(scan_info));
1000e4b8:	22cd      	movs	r2, #205	; 0xcd
1000e4ba:	0092      	lsls	r2, r2, #2
1000e4bc:	2100      	movs	r1, #0
1000e4be:	487b      	ldr	r0, [pc, #492]	; (1000e6ac <ble_device_init+0x228>)
1000e4c0:	47b0      	blx	r6

	event = AT_BLE_UNDEFINED_EVENT;
1000e4c2:	4b7b      	ldr	r3, [pc, #492]	; (1000e6b0 <ble_device_init+0x22c>)
1000e4c4:	701c      	strb	r4, [r3, #0]
	memset(ble_event_params, 0, BLE_EVENT_PARAM_MAX_SIZE);
1000e4c6:	2283      	movs	r2, #131	; 0x83
1000e4c8:	0092      	lsls	r2, r2, #2
1000e4ca:	2100      	movs	r1, #0
1000e4cc:	4879      	ldr	r0, [pc, #484]	; (1000e6b4 <ble_device_init+0x230>)
1000e4ce:	47b0      	blx	r6
{
	uint8_t idx;	
	char *dev_name = NULL;
	init_global_var();

	memset((uint8_t *)event_pool_memory, 0, sizeof(event_pool_memory));
1000e4d0:	4b79      	ldr	r3, [pc, #484]	; (1000e6b8 <ble_device_init+0x234>)
1000e4d2:	469b      	mov	fp, r3
1000e4d4:	2380      	movs	r3, #128	; 0x80
1000e4d6:	00db      	lsls	r3, r3, #3
1000e4d8:	469a      	mov	sl, r3
1000e4da:	001a      	movs	r2, r3
1000e4dc:	2100      	movs	r1, #0
1000e4de:	4658      	mov	r0, fp
1000e4e0:	47b0      	blx	r6
	memset((uint8_t *)event_params_memory, 0, sizeof(event_params_memory));
1000e4e2:	4b76      	ldr	r3, [pc, #472]	; (1000e6bc <ble_device_init+0x238>)
1000e4e4:	4699      	mov	r9, r3
1000e4e6:	2380      	movs	r3, #128	; 0x80
1000e4e8:	015b      	lsls	r3, r3, #5
1000e4ea:	4698      	mov	r8, r3
1000e4ec:	001a      	movs	r2, r3
1000e4ee:	2100      	movs	r1, #0
1000e4f0:	4648      	mov	r0, r9
1000e4f2:	47b0      	blx	r6

	memset(&pf_cfg, 0, sizeof(pf_cfg));
1000e4f4:	4f72      	ldr	r7, [pc, #456]	; (1000e6c0 <ble_device_init+0x23c>)
1000e4f6:	221c      	movs	r2, #28
1000e4f8:	2100      	movs	r1, #0
1000e4fa:	0038      	movs	r0, r7
1000e4fc:	47b0      	blx	r6

	pf_cfg.event_mem_pool.memStartAdd        = (uint8_t *)event_pool_memory;
1000e4fe:	465b      	mov	r3, fp
1000e500:	60bb      	str	r3, [r7, #8]
	pf_cfg.event_mem_pool.memSize            = sizeof(event_pool_memory);
1000e502:	4653      	mov	r3, sl
1000e504:	60fb      	str	r3, [r7, #12]
	pf_cfg.event_params_mem_pool.memStartAdd = (uint8_t *)event_params_memory;
1000e506:	464b      	mov	r3, r9
1000e508:	613b      	str	r3, [r7, #16]
	pf_cfg.event_params_mem_pool.memSize     = sizeof(event_params_memory);
1000e50a:	4643      	mov	r3, r8
1000e50c:	617b      	str	r3, [r7, #20]

	/* Initialize the BLE Event callbacks */
	for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_gap_event_cb[idx] = NULL;
1000e50e:	4b6d      	ldr	r3, [pc, #436]	; (1000e6c4 <ble_device_init+0x240>)
1000e510:	601c      	str	r4, [r3, #0]
1000e512:	605c      	str	r4, [r3, #4]
1000e514:	609c      	str	r4, [r3, #8]
1000e516:	60dc      	str	r4, [r3, #12]
1000e518:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_gatt_client_event_cb[idx] = NULL;
1000e51a:	4b6b      	ldr	r3, [pc, #428]	; (1000e6c8 <ble_device_init+0x244>)
1000e51c:	601c      	str	r4, [r3, #0]
1000e51e:	605c      	str	r4, [r3, #4]
1000e520:	609c      	str	r4, [r3, #8]
1000e522:	60dc      	str	r4, [r3, #12]
1000e524:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
	{
		ble_mgr_gatt_server_event_cb[idx] = NULL;
1000e526:	4b69      	ldr	r3, [pc, #420]	; (1000e6cc <ble_device_init+0x248>)
1000e528:	601c      	str	r4, [r3, #0]
1000e52a:	605c      	str	r4, [r3, #4]
1000e52c:	609c      	str	r4, [r3, #8]
1000e52e:	60dc      	str	r4, [r3, #12]
1000e530:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_L2CAP_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_l2cap_event_cb[idx] = NULL;
1000e532:	4b67      	ldr	r3, [pc, #412]	; (1000e6d0 <ble_device_init+0x24c>)
1000e534:	601c      	str	r4, [r3, #0]
	}
	
	for (idx = 0; idx < MAX_HTPT_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_htpt_event_cb[idx] = NULL;
1000e536:	4b67      	ldr	r3, [pc, #412]	; (1000e6d4 <ble_device_init+0x250>)
1000e538:	601c      	str	r4, [r3, #0]
	}
	
	for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_dtm_event_cb[idx] = NULL;
1000e53a:	4b67      	ldr	r3, [pc, #412]	; (1000e6d8 <ble_device_init+0x254>)
1000e53c:	601c      	str	r4, [r3, #0]
1000e53e:	605c      	str	r4, [r3, #4]
1000e540:	609c      	str	r4, [r3, #8]
1000e542:	60dc      	str	r4, [r3, #12]
1000e544:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_CUSTOM_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_custom_event_cb[idx] = NULL;
1000e546:	4b65      	ldr	r3, [pc, #404]	; (1000e6dc <ble_device_init+0x258>)
1000e548:	601c      	str	r4, [r3, #0]
1000e54a:	4c65      	ldr	r4, [pc, #404]	; (1000e6e0 <ble_device_init+0x25c>)
1000e54c:	239b      	movs	r3, #155	; 0x9b
1000e54e:	009b      	lsls	r3, r3, #2
1000e550:	4698      	mov	r8, r3
1000e552:	44a0      	add	r8, r4
	}
        
    /* Set the BLE Device connection state */
    for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
    {
        memset(&ble_dev_info[idx], 0, sizeof(ble_connected_dev_info_t));
1000e554:	4f50      	ldr	r7, [pc, #320]	; (1000e698 <ble_device_init+0x214>)
		ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
		/* Set Invalid to Bonding information */
		ble_dev_info[idx].bond_info.status = AT_BLE_GAP_INVALID_PARAM;
1000e556:	2640      	movs	r6, #64	; 0x40
	}
        
    /* Set the BLE Device connection state */
    for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
    {
        memset(&ble_dev_info[idx], 0, sizeof(ble_connected_dev_info_t));
1000e558:	227c      	movs	r2, #124	; 0x7c
1000e55a:	2100      	movs	r1, #0
1000e55c:	0020      	movs	r0, r4
1000e55e:	47b8      	blx	r7
		ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
1000e560:	0023      	movs	r3, r4
1000e562:	335e      	adds	r3, #94	; 0x5e
1000e564:	2200      	movs	r2, #0
1000e566:	701a      	strb	r2, [r3, #0]
		/* Set Invalid to Bonding information */
		ble_dev_info[idx].bond_info.status = AT_BLE_GAP_INVALID_PARAM;
1000e568:	7626      	strb	r6, [r4, #24]
1000e56a:	347c      	adds	r4, #124	; 0x7c
	{
		ble_mgr_custom_event_cb[idx] = NULL;
	}
        
    /* Set the BLE Device connection state */
    for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000e56c:	45a0      	cmp	r8, r4
1000e56e:	d1f3      	bne.n	1000e558 <ble_device_init+0xd4>
		ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
		/* Set Invalid to Bonding information */
		ble_dev_info[idx].bond_info.status = AT_BLE_GAP_INVALID_PARAM;
    }
	/* Need to reset the count to 0 for storing it only in SRAM */
	ble_device_count = 0; 
1000e570:	4b5c      	ldr	r3, [pc, #368]	; (1000e6e4 <ble_device_init+0x260>)
1000e572:	701a      	strb	r2, [r3, #0]
	
	
#if defined ATT_DB_MEMORY
	pf_cfg.memPool.memSize = BLE_ATT_DB_MEMORY_SIZE;
1000e574:	4c52      	ldr	r4, [pc, #328]	; (1000e6c0 <ble_device_init+0x23c>)
1000e576:	4b4a      	ldr	r3, [pc, #296]	; (1000e6a0 <ble_device_init+0x21c>)
1000e578:	6063      	str	r3, [r4, #4]
	pf_cfg.memPool.memStartAdd = (uint8_t *)att_db_data;
1000e57a:	4b4a      	ldr	r3, [pc, #296]	; (1000e6a4 <ble_device_init+0x220>)
1000e57c:	6023      	str	r3, [r4, #0]

/* Initialize the BLE */
static void ble_init(at_ble_init_config_t * args)
{
	/* Initialize the platform */
	DBG_LOG("[ble_init]\t\t\tInitializing SAMB11");
1000e57e:	485a      	ldr	r0, [pc, #360]	; (1000e6e8 <ble_device_init+0x264>)
1000e580:	4b5a      	ldr	r3, [pc, #360]	; (1000e6ec <ble_device_init+0x268>)
1000e582:	4798      	blx	r3
1000e584:	485a      	ldr	r0, [pc, #360]	; (1000e6f0 <ble_device_init+0x26c>)
1000e586:	4b5b      	ldr	r3, [pc, #364]	; (1000e6f4 <ble_device_init+0x270>)
1000e588:	4798      	blx	r3
	
	/* Init BLE device */
	if(at_ble_init(args) != AT_BLE_SUCCESS)
1000e58a:	0020      	movs	r0, r4
1000e58c:	4b5a      	ldr	r3, [pc, #360]	; (1000e6f8 <ble_device_init+0x274>)
1000e58e:	4798      	blx	r3
1000e590:	2800      	cmp	r0, #0
1000e592:	d00b      	beq.n	1000e5ac <ble_device_init+0x128>
	{
		DBG_LOG("[ble_init]\t\tSAMB11 Initialization failed");
1000e594:	4e54      	ldr	r6, [pc, #336]	; (1000e6e8 <ble_device_init+0x264>)
1000e596:	0030      	movs	r0, r6
1000e598:	4d54      	ldr	r5, [pc, #336]	; (1000e6ec <ble_device_init+0x268>)
1000e59a:	47a8      	blx	r5
1000e59c:	4857      	ldr	r0, [pc, #348]	; (1000e6fc <ble_device_init+0x278>)
1000e59e:	4c55      	ldr	r4, [pc, #340]	; (1000e6f4 <ble_device_init+0x270>)
1000e5a0:	47a0      	blx	r4
		DBG_LOG("[ble_init]\t\tPlease check the power and connection / hardware connector");	
1000e5a2:	0030      	movs	r0, r6
1000e5a4:	47a8      	blx	r5
1000e5a6:	4856      	ldr	r0, [pc, #344]	; (1000e700 <ble_device_init+0x27c>)
1000e5a8:	47a0      	blx	r4
1000e5aa:	e7fe      	b.n	1000e5aa <ble_device_init+0x126>
#endif
	
	ble_init(&pf_cfg);

	/* Register it in first index of callback handler */
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK, 
1000e5ac:	4a55      	ldr	r2, [pc, #340]	; (1000e704 <ble_device_init+0x280>)
1000e5ae:	2100      	movs	r1, #0
1000e5b0:	2000      	movs	r0, #0
1000e5b2:	4c55      	ldr	r4, [pc, #340]	; (1000e708 <ble_device_init+0x284>)
1000e5b4:	47a0      	blx	r4
									BLE_GAP_EVENT_TYPE, 
									ble_mgr_gap_handle);
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK,
1000e5b6:	4a55      	ldr	r2, [pc, #340]	; (1000e70c <ble_device_init+0x288>)
1000e5b8:	2102      	movs	r1, #2
1000e5ba:	2000      	movs	r0, #0
1000e5bc:	47a0      	blx	r4
{
	if ((name == NULL) || (name_len < 1))
	{
		return AT_BLE_INVALID_PARAM;
	}
	return at_ble_device_name_set(name, name_len);
1000e5be:	2109      	movs	r1, #9
1000e5c0:	4853      	ldr	r0, [pc, #332]	; (1000e710 <ble_device_init+0x28c>)
1000e5c2:	4b54      	ldr	r3, [pc, #336]	; (1000e714 <ble_device_init+0x290>)
1000e5c4:	4798      	blx	r3
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK,
									BLE_GATT_SERVER_EVENT_TYPE,
									ble_mgr_gatt_server_handle);
									
	dev_name = (char *)BLE_DEVICE_NAME;
	if (ble_set_device_name((uint8_t *)dev_name, strlen(dev_name)) != AT_BLE_SUCCESS)
1000e5c6:	2800      	cmp	r0, #0
1000e5c8:	d005      	beq.n	1000e5d6 <ble_device_init+0x152>
	{
		DBG_LOG("Device name set failed");
1000e5ca:	4847      	ldr	r0, [pc, #284]	; (1000e6e8 <ble_device_init+0x264>)
1000e5cc:	4b47      	ldr	r3, [pc, #284]	; (1000e6ec <ble_device_init+0x268>)
1000e5ce:	4798      	blx	r3
1000e5d0:	4851      	ldr	r0, [pc, #324]	; (1000e718 <ble_device_init+0x294>)
1000e5d2:	4b48      	ldr	r3, [pc, #288]	; (1000e6f4 <ble_device_init+0x270>)
1000e5d4:	4798      	blx	r3

/* Set BLE Address and device configuration, If address is NULL then it will use BD public address */
static void ble_set_dev_config(at_ble_addr_t *addr)
{
	at_ble_dev_config_t stDevConfig;
	at_ble_addr_t address = {AT_BLE_ADDRESS_PUBLIC, {0xAB, 0xCD, 0xEF, 0xAB, 0xCD, 0xEF}};
1000e5d6:	2207      	movs	r2, #7
1000e5d8:	4950      	ldr	r1, [pc, #320]	; (1000e71c <ble_device_init+0x298>)
1000e5da:	3108      	adds	r1, #8
1000e5dc:	a804      	add	r0, sp, #16
1000e5de:	4b50      	ldr	r3, [pc, #320]	; (1000e720 <ble_device_init+0x29c>)
1000e5e0:	4798      	blx	r3
	memset(&stDevConfig, 0, sizeof(at_ble_dev_config_t));
1000e5e2:	2226      	movs	r2, #38	; 0x26
1000e5e4:	2100      	movs	r1, #0
1000e5e6:	a806      	add	r0, sp, #24
1000e5e8:	4b2b      	ldr	r3, [pc, #172]	; (1000e698 <ble_device_init+0x214>)
1000e5ea:	4798      	blx	r3
	
	if (addr == NULL)
1000e5ec:	2d00      	cmp	r5, #0
1000e5ee:	d10c      	bne.n	1000e60a <ble_device_init+0x186>
	{		
		/* get BD address from BLE device */
		if(at_ble_addr_get(&address) != AT_BLE_SUCCESS)
1000e5f0:	a804      	add	r0, sp, #16
1000e5f2:	4b4c      	ldr	r3, [pc, #304]	; (1000e724 <ble_device_init+0x2a0>)
1000e5f4:	4798      	blx	r3
		{
			DBG_LOG("[ble_set_dev_config]\t\tBD address get failed");
		}
		
		/* Copy the BD address into address pointer */
		addr = &address;
1000e5f6:	ad04      	add	r5, sp, #16
	memset(&stDevConfig, 0, sizeof(at_ble_dev_config_t));
	
	if (addr == NULL)
	{		
		/* get BD address from BLE device */
		if(at_ble_addr_get(&address) != AT_BLE_SUCCESS)
1000e5f8:	2800      	cmp	r0, #0
1000e5fa:	d006      	beq.n	1000e60a <ble_device_init+0x186>
		{
			DBG_LOG("[ble_set_dev_config]\t\tBD address get failed");
1000e5fc:	483a      	ldr	r0, [pc, #232]	; (1000e6e8 <ble_device_init+0x264>)
1000e5fe:	4b3b      	ldr	r3, [pc, #236]	; (1000e6ec <ble_device_init+0x268>)
1000e600:	4798      	blx	r3
1000e602:	4849      	ldr	r0, [pc, #292]	; (1000e728 <ble_device_init+0x2a4>)
1000e604:	4b3b      	ldr	r3, [pc, #236]	; (1000e6f4 <ble_device_init+0x270>)
1000e606:	4798      	blx	r3
		}
		
		/* Copy the BD address into address pointer */
		addr = &address;
1000e608:	ad04      	add	r5, sp, #16
	}
	
	DBG_LOG("[ble_set_dev_config]\t\tBD Address:0x%02X%02X%02X%02X%02X%02X, Address Type:%d",
1000e60a:	4837      	ldr	r0, [pc, #220]	; (1000e6e8 <ble_device_init+0x264>)
1000e60c:	4b37      	ldr	r3, [pc, #220]	; (1000e6ec <ble_device_init+0x268>)
1000e60e:	4798      	blx	r3
1000e610:	792b      	ldrb	r3, [r5, #4]
1000e612:	796a      	ldrb	r2, [r5, #5]
1000e614:	79a9      	ldrb	r1, [r5, #6]
1000e616:	7828      	ldrb	r0, [r5, #0]
1000e618:	9003      	str	r0, [sp, #12]
1000e61a:	7868      	ldrb	r0, [r5, #1]
1000e61c:	9002      	str	r0, [sp, #8]
1000e61e:	78a8      	ldrb	r0, [r5, #2]
1000e620:	9001      	str	r0, [sp, #4]
1000e622:	78e8      	ldrb	r0, [r5, #3]
1000e624:	9000      	str	r0, [sp, #0]
1000e626:	4841      	ldr	r0, [pc, #260]	; (1000e72c <ble_device_init+0x2a8>)
1000e628:	4c32      	ldr	r4, [pc, #200]	; (1000e6f4 <ble_device_init+0x270>)
1000e62a:	47a0      	blx	r4
	addr->addr[1],
	addr->addr[0], addr->type);
	
	/* Set device configuration */
	/* Device role */
	stDevConfig.role = (at_ble_dev_role_t)BLE_DEVICE_ROLE;
1000e62c:	ac06      	add	r4, sp, #24
1000e62e:	230a      	movs	r3, #10
1000e630:	7023      	strb	r3, [r4, #0]
	/* device renew duration */
	stDevConfig.renew_dur = AT_RENEW_DUR_VAL_MIN;
1000e632:	4b3f      	ldr	r3, [pc, #252]	; (1000e730 <ble_device_init+0x2ac>)
1000e634:	8063      	strh	r3, [r4, #2]
	/* device address type */
	memcpy((uint8_t *)&stDevConfig.address, (uint8_t *)addr, sizeof(at_ble_addr_t));
1000e636:	2207      	movs	r2, #7
1000e638:	0029      	movs	r1, r5
1000e63a:	a807      	add	r0, sp, #28
1000e63c:	4b38      	ldr	r3, [pc, #224]	; (1000e720 <ble_device_init+0x29c>)
1000e63e:	4798      	blx	r3
	/* Attributes */
	stDevConfig.att_cfg.b2NamePerm = AT_BLE_WRITE_DISABLE;
1000e640:	2300      	movs	r3, #0
1000e642:	76e3      	strb	r3, [r4, #27]
	stDevConfig.att_cfg.b2AppearancePerm = AT_BLE_WRITE_DISABLE;
1000e644:	7723      	strb	r3, [r4, #28]
	stDevConfig.att_cfg.b1EnableSpcs = 0;
1000e646:	7763      	strb	r3, [r4, #29]
	stDevConfig.att_cfg.b1EnableServiceChanged = 0;
1000e648:	77a3      	strb	r3, [r4, #30]
	stDevConfig.att_cfg.b2Rfu = AT_BLE_WRITE_DISABLE;
1000e64a:	77e3      	strb	r3, [r4, #31]
	/* Handles */
	stDevConfig.gap_start_hdl = AT_BLE_AUTO_ALLOC_HANDLE;
1000e64c:	8423      	strh	r3, [r4, #32]
	stDevConfig.gatt_start_hdl = AT_BLE_AUTO_ALLOC_HANDLE;
1000e64e:	8463      	strh	r3, [r4, #34]	; 0x22
	/* MTU */
	stDevConfig.max_mtu = AT_MTU_VAL_RECOMMENDED;
1000e650:	2380      	movs	r3, #128	; 0x80
1000e652:	009b      	lsls	r3, r3, #2
1000e654:	84a3      	strh	r3, [r4, #36]	; 0x24
	
	if(at_ble_set_dev_config(&stDevConfig) != AT_BLE_SUCCESS)
1000e656:	0020      	movs	r0, r4
1000e658:	4b36      	ldr	r3, [pc, #216]	; (1000e734 <ble_device_init+0x2b0>)
1000e65a:	4798      	blx	r3
1000e65c:	2800      	cmp	r0, #0
1000e65e:	d005      	beq.n	1000e66c <ble_device_init+0x1e8>
	{
		DBG_LOG("[ble_set_dev_config]\tSet BLE Device configuration failed");
1000e660:	4821      	ldr	r0, [pc, #132]	; (1000e6e8 <ble_device_init+0x264>)
1000e662:	4b22      	ldr	r3, [pc, #136]	; (1000e6ec <ble_device_init+0x268>)
1000e664:	4798      	blx	r3
1000e666:	4834      	ldr	r0, [pc, #208]	; (1000e738 <ble_device_init+0x2b4>)
1000e668:	4b22      	ldr	r3, [pc, #136]	; (1000e6f4 <ble_device_init+0x270>)
1000e66a:	4798      	blx	r3
	}
	
	if (at_ble_addr_set(addr) != AT_BLE_SUCCESS)
1000e66c:	0028      	movs	r0, r5
1000e66e:	4b33      	ldr	r3, [pc, #204]	; (1000e73c <ble_device_init+0x2b8>)
1000e670:	4798      	blx	r3
1000e672:	2800      	cmp	r0, #0
1000e674:	d005      	beq.n	1000e682 <ble_device_init+0x1fe>
	{
		DBG_LOG("[ble_set_dev_config]\tSet BLE Device Address failed");
1000e676:	481c      	ldr	r0, [pc, #112]	; (1000e6e8 <ble_device_init+0x264>)
1000e678:	4b1c      	ldr	r3, [pc, #112]	; (1000e6ec <ble_device_init+0x268>)
1000e67a:	4798      	blx	r3
1000e67c:	4830      	ldr	r0, [pc, #192]	; (1000e740 <ble_device_init+0x2bc>)
1000e67e:	4b1d      	ldr	r3, [pc, #116]	; (1000e6f4 <ble_device_init+0x270>)
1000e680:	4798      	blx	r3
	{
		DBG_LOG("Device name set failed");
	}
	
	ble_set_dev_config(addr);	
}
1000e682:	b011      	add	sp, #68	; 0x44
1000e684:	bc3c      	pop	{r2, r3, r4, r5}
1000e686:	4690      	mov	r8, r2
1000e688:	4699      	mov	r9, r3
1000e68a:	46a2      	mov	sl, r4
1000e68c:	46ab      	mov	fp, r5
1000e68e:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000e690:	10018da8 	.word	0x10018da8
1000e694:	10018db0 	.word	0x10018db0
1000e698:	10015191 	.word	0x10015191
1000e69c:	1001a4f0 	.word	0x1001a4f0
1000e6a0:	000004e2 	.word	0x000004e2
1000e6a4:	100188c8 	.word	0x100188c8
1000e6a8:	10018dac 	.word	0x10018dac
1000e6ac:	1001a528 	.word	0x1001a528
1000e6b0:	1001a520 	.word	0x1001a520
1000e6b4:	1001a85c 	.word	0x1001a85c
1000e6b8:	100184c8 	.word	0x100184c8
1000e6bc:	10018db8 	.word	0x10018db8
1000e6c0:	1001a504 	.word	0x1001a504
1000e6c4:	1001a4c8 	.word	0x1001a4c8
1000e6c8:	1001a4dc 	.word	0x1001a4dc
1000e6cc:	1001a230 	.word	0x1001a230
1000e6d0:	1001a524 	.word	0x1001a524
1000e6d4:	1001a22c 	.word	0x1001a22c
1000e6d8:	1001a4b4 	.word	0x1001a4b4
1000e6dc:	1001aa68 	.word	0x1001aa68
1000e6e0:	1001a244 	.word	0x1001a244
1000e6e4:	1001a4b0 	.word	0x1001a4b0
1000e6e8:	100165a4 	.word	0x100165a4
1000e6ec:	100153f9 	.word	0x100153f9
1000e6f0:	10017d10 	.word	0x10017d10
1000e6f4:	100152d9 	.word	0x100152d9
1000e6f8:	100105cd 	.word	0x100105cd
1000e6fc:	10017d34 	.word	0x10017d34
1000e700:	10017d60 	.word	0x10017d60
1000e704:	1001810c 	.word	0x1001810c
1000e708:	1000e3b5 	.word	0x1000e3b5
1000e70c:	100176c4 	.word	0x100176c4
1000e710:	10017da8 	.word	0x10017da8
1000e714:	100104e5 	.word	0x100104e5
1000e718:	10017db4 	.word	0x10017db4
1000e71c:	100176b4 	.word	0x100176b4
1000e720:	1001517f 	.word	0x1001517f
1000e724:	10010519 	.word	0x10010519
1000e728:	10017dcc 	.word	0x10017dcc
1000e72c:	10017df8 	.word	0x10017df8
1000e730:	00003a98 	.word	0x00003a98
1000e734:	1001053d 	.word	0x1001053d
1000e738:	10017e48 	.word	0x10017e48
1000e73c:	10010781 	.word	0x10010781
1000e740:	10017e84 	.word	0x10017e84

1000e744 <ble_send_slave_sec_request>:
	return AT_BLE_FAILURE;
}

/** @brief function to send slave security request */
at_ble_status_t ble_send_slave_sec_request(at_ble_handle_t conn_handle)
{
1000e744:	b510      	push	{r4, lr}
	#if BLE_PAIR_ENABLE
		if (at_ble_send_slave_sec_request(conn_handle, BLE_MITM_REQ, BLE_BOND_REQ) == AT_BLE_SUCCESS)
1000e746:	2200      	movs	r2, #0
1000e748:	2100      	movs	r1, #0
1000e74a:	4b0a      	ldr	r3, [pc, #40]	; (1000e774 <ble_send_slave_sec_request+0x30>)
1000e74c:	4798      	blx	r3
1000e74e:	1e04      	subs	r4, r0, #0
1000e750:	d106      	bne.n	1000e760 <ble_send_slave_sec_request+0x1c>
		{
			DBG_LOG_DEV("Slave security request successful");
1000e752:	4809      	ldr	r0, [pc, #36]	; (1000e778 <ble_send_slave_sec_request+0x34>)
1000e754:	4b09      	ldr	r3, [pc, #36]	; (1000e77c <ble_send_slave_sec_request+0x38>)
1000e756:	4798      	blx	r3
1000e758:	4809      	ldr	r0, [pc, #36]	; (1000e780 <ble_send_slave_sec_request+0x3c>)
1000e75a:	4b0a      	ldr	r3, [pc, #40]	; (1000e784 <ble_send_slave_sec_request+0x40>)
1000e75c:	4798      	blx	r3
			return AT_BLE_SUCCESS;
1000e75e:	e006      	b.n	1000e76e <ble_send_slave_sec_request+0x2a>
		}
		else
		{
			DBG_LOG("Slave security request failed");
1000e760:	4805      	ldr	r0, [pc, #20]	; (1000e778 <ble_send_slave_sec_request+0x34>)
1000e762:	4b06      	ldr	r3, [pc, #24]	; (1000e77c <ble_send_slave_sec_request+0x38>)
1000e764:	4798      	blx	r3
1000e766:	4808      	ldr	r0, [pc, #32]	; (1000e788 <ble_send_slave_sec_request+0x44>)
1000e768:	4b06      	ldr	r3, [pc, #24]	; (1000e784 <ble_send_slave_sec_request+0x40>)
1000e76a:	4798      	blx	r3
		}
	#endif
	return AT_BLE_FAILURE;
1000e76c:	24e2      	movs	r4, #226	; 0xe2
}
1000e76e:	0020      	movs	r0, r4
1000e770:	bd10      	pop	{r4, pc}
1000e772:	46c0      	nop			; (mov r8, r8)
1000e774:	10011565 	.word	0x10011565
1000e778:	100165a4 	.word	0x100165a4
1000e77c:	100153f9 	.word	0x100153f9
1000e780:	10017ed4 	.word	0x10017ed4
1000e784:	100152d9 	.word	0x100152d9
1000e788:	10017ef8 	.word	0x10017ef8

1000e78c <ble_connected_state_handler>:
	return status;
}

/** @brief function to handle connected event received from stack */
at_ble_status_t ble_connected_state_handler(void *params)
{
1000e78c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000e78e:	465f      	mov	r7, fp
1000e790:	464e      	mov	r6, r9
1000e792:	4645      	mov	r5, r8
1000e794:	b4e0      	push	{r5, r6, r7}
1000e796:	b09a      	sub	sp, #104	; 0x68
1000e798:	0005      	movs	r5, r0
	at_ble_connected_t *conn_params;
	uint8_t idx = 0;
	conn_params = (at_ble_connected_t *)params;
	bool peripheral_device_added = false;
	
	if (conn_params->conn_status == AT_BLE_SUCCESS)
1000e79a:	7a86      	ldrb	r6, [r0, #10]
1000e79c:	2e00      	cmp	r6, #0
1000e79e:	d000      	beq.n	1000e7a2 <ble_connected_state_handler+0x16>
1000e7a0:	e0cc      	b.n	1000e93c <ble_connected_state_handler+0x1b0>
	{
		DBG_LOG("Connected to peer device with address 0x%02x%02x%02x%02x%02x%02x",
1000e7a2:	4878      	ldr	r0, [pc, #480]	; (1000e984 <ble_connected_state_handler+0x1f8>)
1000e7a4:	4f78      	ldr	r7, [pc, #480]	; (1000e988 <ble_connected_state_handler+0x1fc>)
1000e7a6:	47b8      	blx	r7
1000e7a8:	792b      	ldrb	r3, [r5, #4]
1000e7aa:	796a      	ldrb	r2, [r5, #5]
1000e7ac:	79a9      	ldrb	r1, [r5, #6]
1000e7ae:	7868      	ldrb	r0, [r5, #1]
1000e7b0:	9002      	str	r0, [sp, #8]
1000e7b2:	78a8      	ldrb	r0, [r5, #2]
1000e7b4:	9001      	str	r0, [sp, #4]
1000e7b6:	78e8      	ldrb	r0, [r5, #3]
1000e7b8:	9000      	str	r0, [sp, #0]
1000e7ba:	4874      	ldr	r0, [pc, #464]	; (1000e98c <ble_connected_state_handler+0x200>)
1000e7bc:	4c74      	ldr	r4, [pc, #464]	; (1000e990 <ble_connected_state_handler+0x204>)
1000e7be:	47a0      	blx	r4
		conn_params->peer_addr.addr[3],
		conn_params->peer_addr.addr[2],
		conn_params->peer_addr.addr[1],
		conn_params->peer_addr.addr[0]);
		
		DBG_LOG("Connection Handle %d", conn_params->handle);
1000e7c0:	4870      	ldr	r0, [pc, #448]	; (1000e984 <ble_connected_state_handler+0x1f8>)
1000e7c2:	47b8      	blx	r7
1000e7c4:	8929      	ldrh	r1, [r5, #8]
1000e7c6:	4873      	ldr	r0, [pc, #460]	; (1000e994 <ble_connected_state_handler+0x208>)
1000e7c8:	47a0      	blx	r4
		
		memcpy((uint8_t *)&connected_state_info, (uint8_t *)conn_params, sizeof(at_ble_connected_t));	
1000e7ca:	2212      	movs	r2, #18
1000e7cc:	0029      	movs	r1, r5
1000e7ce:	4872      	ldr	r0, [pc, #456]	; (1000e998 <ble_connected_state_handler+0x20c>)
1000e7d0:	4b72      	ldr	r3, [pc, #456]	; (1000e99c <ble_connected_state_handler+0x210>)
1000e7d2:	4798      	blx	r3
		if(memcmp((uint8_t *)&ble_peripheral_dev_address, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000e7d4:	9504      	str	r5, [sp, #16]
1000e7d6:	2207      	movs	r2, #7
1000e7d8:	0029      	movs	r1, r5
1000e7da:	4871      	ldr	r0, [pc, #452]	; (1000e9a0 <ble_connected_state_handler+0x214>)
1000e7dc:	4b71      	ldr	r3, [pc, #452]	; (1000e9a4 <ble_connected_state_handler+0x218>)
1000e7de:	4798      	blx	r3
1000e7e0:	2800      	cmp	r0, #0
1000e7e2:	d100      	bne.n	1000e7e6 <ble_connected_state_handler+0x5a>
1000e7e4:	e0b3      	b.n	1000e94e <ble_connected_state_handler+0x1c2>
		{
			/* Peripheral Device */
			if (conn_params->peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE) 
1000e7e6:	782b      	ldrb	r3, [r5, #0]
1000e7e8:	2b02      	cmp	r3, #2
1000e7ea:	d000      	beq.n	1000e7ee <ble_connected_state_handler+0x62>
1000e7ec:	e0af      	b.n	1000e94e <ble_connected_state_handler+0x1c2>
			{
				uint8_t idx1, idx2;
				uint16_t key_len = 0;
				uint8_t nb_keys = BLE_MAX_DEVICE_CONNECTED;
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
1000e7ee:	2250      	movs	r2, #80	; 0x50
1000e7f0:	2100      	movs	r1, #0
1000e7f2:	a806      	add	r0, sp, #24
1000e7f4:	4b6c      	ldr	r3, [pc, #432]	; (1000e9a8 <ble_connected_state_handler+0x21c>)
1000e7f6:	4798      	blx	r3
1000e7f8:	4f6c      	ldr	r7, [pc, #432]	; (1000e9ac <ble_connected_state_handler+0x220>)
		{
			/* Peripheral Device */
			if (conn_params->peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE) 
			{
				uint8_t idx1, idx2;
				uint16_t key_len = 0;
1000e7fa:	2300      	movs	r3, #0
1000e7fc:	e00b      	b.n	1000e816 <ble_connected_state_handler+0x8a>
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
				for (idx1 = 0; idx1 < BLE_MAX_DEVICE_CONNECTED; idx1++)
				{
					for (idx2 = 0; idx2 < AT_BLE_MAX_KEY_LEN; idx2++)
					{
						irk_key[key_len++] = ble_dev_info[idx1].bond_info.peer_irk.key[idx2];
1000e7fe:	1c59      	adds	r1, r3, #1
1000e800:	7814      	ldrb	r4, [r2, #0]
1000e802:	a806      	add	r0, sp, #24
1000e804:	54c4      	strb	r4, [r0, r3]
1000e806:	3201      	adds	r2, #1
1000e808:	b28b      	uxth	r3, r1
				uint16_t key_len = 0;
				uint8_t nb_keys = BLE_MAX_DEVICE_CONNECTED;
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
				for (idx1 = 0; idx1 < BLE_MAX_DEVICE_CONNECTED; idx1++)
				{
					for (idx2 = 0; idx2 < AT_BLE_MAX_KEY_LEN; idx2++)
1000e80a:	42b3      	cmp	r3, r6
1000e80c:	d1f7      	bne.n	1000e7fe <ble_connected_state_handler+0x72>
1000e80e:	377c      	adds	r7, #124	; 0x7c
					{
						irk_key[key_len++] = ble_dev_info[idx1].bond_info.peer_irk.key[idx2];
1000e810:	1e33      	subs	r3, r6, #0
			{
				uint8_t idx1, idx2;
				uint16_t key_len = 0;
				uint8_t nb_keys = BLE_MAX_DEVICE_CONNECTED;
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
				for (idx1 = 0; idx1 < BLE_MAX_DEVICE_CONNECTED; idx1++)
1000e812:	2b50      	cmp	r3, #80	; 0x50
1000e814:	d004      	beq.n	1000e820 <ble_connected_state_handler+0x94>
1000e816:	001e      	movs	r6, r3
1000e818:	3610      	adds	r6, #16
1000e81a:	b2b6      	uxth	r6, r6
	return status;
}

/** @brief function to handle connected event received from stack */
at_ble_status_t ble_connected_state_handler(void *params)
{
1000e81c:	003a      	movs	r2, r7
1000e81e:	e7ee      	b.n	1000e7fe <ble_connected_state_handler+0x72>
					}
					
				}
				if (nb_keys)
				{
					if(at_ble_random_address_resolve(BLE_MAX_DEVICE_CONNECTED, &conn_params->peer_addr, irk_key) == AT_BLE_SUCCESS)
1000e820:	aa06      	add	r2, sp, #24
1000e822:	0029      	movs	r1, r5
1000e824:	2005      	movs	r0, #5
1000e826:	4b62      	ldr	r3, [pc, #392]	; (1000e9b0 <ble_connected_state_handler+0x224>)
1000e828:	4798      	blx	r3
1000e82a:	1e06      	subs	r6, r0, #0
1000e82c:	d106      	bne.n	1000e83c <ble_connected_state_handler+0xb0>
					{
						DBG_LOG_DEV("Resolving Random address success**");
1000e82e:	4855      	ldr	r0, [pc, #340]	; (1000e984 <ble_connected_state_handler+0x1f8>)
1000e830:	4b55      	ldr	r3, [pc, #340]	; (1000e988 <ble_connected_state_handler+0x1fc>)
1000e832:	4798      	blx	r3
1000e834:	485f      	ldr	r0, [pc, #380]	; (1000e9b4 <ble_connected_state_handler+0x228>)
1000e836:	4b56      	ldr	r3, [pc, #344]	; (1000e990 <ble_connected_state_handler+0x204>)
1000e838:	4798      	blx	r3
						return AT_BLE_SUCCESS;
1000e83a:	e09c      	b.n	1000e976 <ble_connected_state_handler+0x1ea>
					}
					else
					{
						DBG_LOG("Resolving Random address failed**");
1000e83c:	4851      	ldr	r0, [pc, #324]	; (1000e984 <ble_connected_state_handler+0x1f8>)
1000e83e:	4b52      	ldr	r3, [pc, #328]	; (1000e988 <ble_connected_state_handler+0x1fc>)
1000e840:	4798      	blx	r3
1000e842:	485d      	ldr	r0, [pc, #372]	; (1000e9b8 <ble_connected_state_handler+0x22c>)
1000e844:	4b52      	ldr	r3, [pc, #328]	; (1000e990 <ble_connected_state_handler+0x204>)
1000e846:	4798      	blx	r3
						return AT_BLE_FAILURE;
1000e848:	26e2      	movs	r6, #226	; 0xe2
1000e84a:	e094      	b.n	1000e976 <ble_connected_state_handler+0x1ea>
1000e84c:	b2e7      	uxtb	r7, r4
		if (ble_device_count < BLE_MAX_DEVICE_CONNECTED)
		{
			bool conn_exists = false;
			for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
			{
				if(!memcmp((uint8_t *)&ble_dev_info[idx].conn_info.peer_addr, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000e84e:	9405      	str	r4, [sp, #20]
1000e850:	2207      	movs	r2, #7
1000e852:	9904      	ldr	r1, [sp, #16]
1000e854:	4648      	mov	r0, r9
1000e856:	47d8      	blx	fp
1000e858:	2800      	cmp	r0, #0
1000e85a:	d109      	bne.n	1000e870 <ble_connected_state_handler+0xe4>
				{
					ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000e85c:	9a05      	ldr	r2, [sp, #20]
1000e85e:	0153      	lsls	r3, r2, #5
1000e860:	1a9b      	subs	r3, r3, r2
1000e862:	009a      	lsls	r2, r3, #2
1000e864:	4b55      	ldr	r3, [pc, #340]	; (1000e9bc <ble_connected_state_handler+0x230>)
1000e866:	189b      	adds	r3, r3, r2
1000e868:	335e      	adds	r3, #94	; 0x5e
1000e86a:	2202      	movs	r2, #2
1000e86c:	701a      	strb	r2, [r3, #0]
1000e86e:	e02b      	b.n	1000e8c8 <ble_connected_state_handler+0x13c>
1000e870:	3401      	adds	r4, #1
1000e872:	237c      	movs	r3, #124	; 0x7c
1000e874:	469c      	mov	ip, r3
1000e876:	44e1      	add	r9, ip
		}
			
		if (ble_device_count < BLE_MAX_DEVICE_CONNECTED)
		{
			bool conn_exists = false;
			for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000e878:	2c05      	cmp	r4, #5
1000e87a:	d1e7      	bne.n	1000e84c <ble_connected_state_handler+0xc0>
1000e87c:	e072      	b.n	1000e964 <ble_connected_state_handler+0x1d8>
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
				{
					if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000e87e:	001c      	movs	r4, r3
1000e880:	7811      	ldrb	r1, [r2, #0]
1000e882:	2900      	cmp	r1, #0
1000e884:	d11a      	bne.n	1000e8bc <ble_connected_state_handler+0x130>
1000e886:	e001      	b.n	1000e88c <ble_connected_state_handler+0x100>
1000e888:	2400      	movs	r4, #0
1000e88a:	2700      	movs	r7, #0
					{
						/* @Todo Need to Handle Random Address */
						memcpy(&ble_dev_info[idx].conn_info, (uint8_t *)conn_params, sizeof(at_ble_connected_t));
1000e88c:	0163      	lsls	r3, r4, #5
1000e88e:	4699      	mov	r9, r3
1000e890:	1b18      	subs	r0, r3, r4
1000e892:	0080      	lsls	r0, r0, #2
1000e894:	4b49      	ldr	r3, [pc, #292]	; (1000e9bc <ble_connected_state_handler+0x230>)
1000e896:	4698      	mov	r8, r3
1000e898:	4440      	add	r0, r8
1000e89a:	2212      	movs	r2, #18
1000e89c:	0029      	movs	r1, r5
1000e89e:	4b3f      	ldr	r3, [pc, #252]	; (1000e99c <ble_connected_state_handler+0x210>)
1000e8a0:	4798      	blx	r3
						ble_device_count++;
1000e8a2:	4a47      	ldr	r2, [pc, #284]	; (1000e9c0 <ble_connected_state_handler+0x234>)
1000e8a4:	7813      	ldrb	r3, [r2, #0]
1000e8a6:	3301      	adds	r3, #1
1000e8a8:	b2db      	uxtb	r3, r3
1000e8aa:	7013      	strb	r3, [r2, #0]
						ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000e8ac:	464b      	mov	r3, r9
1000e8ae:	1b1b      	subs	r3, r3, r4
1000e8b0:	009b      	lsls	r3, r3, #2
1000e8b2:	4443      	add	r3, r8
1000e8b4:	335e      	adds	r3, #94	; 0x5e
1000e8b6:	2202      	movs	r2, #2
1000e8b8:	701a      	strb	r2, [r3, #0]
						break;
1000e8ba:	e005      	b.n	1000e8c8 <ble_connected_state_handler+0x13c>
				}
			}
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000e8bc:	1c79      	adds	r1, r7, #1
1000e8be:	b2cf      	uxtb	r7, r1
1000e8c0:	3301      	adds	r3, #1
1000e8c2:	327c      	adds	r2, #124	; 0x7c
1000e8c4:	2f05      	cmp	r7, #5
1000e8c6:	d1da      	bne.n	1000e87e <ble_connected_state_handler+0xf2>
						break;
					}
				}
			}
			
			if(!memcmp((uint8_t *)&ble_peripheral_dev_address, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000e8c8:	2207      	movs	r2, #7
1000e8ca:	0029      	movs	r1, r5
1000e8cc:	4834      	ldr	r0, [pc, #208]	; (1000e9a0 <ble_connected_state_handler+0x214>)
1000e8ce:	4b35      	ldr	r3, [pc, #212]	; (1000e9a4 <ble_connected_state_handler+0x218>)
1000e8d0:	4798      	blx	r3
1000e8d2:	2800      	cmp	r0, #0
1000e8d4:	d10c      	bne.n	1000e8f0 <ble_connected_state_handler+0x164>
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_CENTRAL;
1000e8d6:	017b      	lsls	r3, r7, #5
1000e8d8:	1bdb      	subs	r3, r3, r7
1000e8da:	009b      	lsls	r3, r3, #2
1000e8dc:	4a37      	ldr	r2, [pc, #220]	; (1000e9bc <ble_connected_state_handler+0x230>)
1000e8de:	18d3      	adds	r3, r2, r3
1000e8e0:	2205      	movs	r2, #5
1000e8e2:	749a      	strb	r2, [r3, #18]
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
				peripheral_device_added = true;
			}
			/* Reset the ble_peripheral_dev_address to identify the initiator */
			memset((uint8_t *)&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
1000e8e4:	3202      	adds	r2, #2
1000e8e6:	2100      	movs	r1, #0
1000e8e8:	482d      	ldr	r0, [pc, #180]	; (1000e9a0 <ble_connected_state_handler+0x214>)
1000e8ea:	4b2f      	ldr	r3, [pc, #188]	; (1000e9a8 <ble_connected_state_handler+0x21c>)
1000e8ec:	4798      	blx	r3
1000e8ee:	e042      	b.n	1000e976 <ble_connected_state_handler+0x1ea>
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_CENTRAL;
			}
			else
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
1000e8f0:	4b32      	ldr	r3, [pc, #200]	; (1000e9bc <ble_connected_state_handler+0x230>)
1000e8f2:	4698      	mov	r8, r3
1000e8f4:	017c      	lsls	r4, r7, #5
1000e8f6:	1be3      	subs	r3, r4, r7
1000e8f8:	009b      	lsls	r3, r3, #2
1000e8fa:	4443      	add	r3, r8
1000e8fc:	220a      	movs	r2, #10
1000e8fe:	749a      	strb	r2, [r3, #18]
				peripheral_device_added = true;
			}
			/* Reset the ble_peripheral_dev_address to identify the initiator */
			memset((uint8_t *)&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
1000e900:	3a03      	subs	r2, #3
1000e902:	2100      	movs	r1, #0
1000e904:	4826      	ldr	r0, [pc, #152]	; (1000e9a0 <ble_connected_state_handler+0x214>)
1000e906:	4b28      	ldr	r3, [pc, #160]	; (1000e9a8 <ble_connected_state_handler+0x21c>)
1000e908:	4798      	blx	r3
			at_ble_disconnect(conn_params->handle, AT_BLE_TERMINATED_BY_USER);
		}		
		
#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
		
        if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
1000e90a:	1be4      	subs	r4, r4, r7
1000e90c:	00a4      	lsls	r4, r4, #2
1000e90e:	4444      	add	r4, r8
1000e910:	7ca3      	ldrb	r3, [r4, #18]
1000e912:	2b0a      	cmp	r3, #10
1000e914:	d12f      	bne.n	1000e976 <ble_connected_state_handler+0x1ea>
1000e916:	e00d      	b.n	1000e934 <ble_connected_state_handler+0x1a8>
			memset((uint8_t *)&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
					
		}
		else
		{
			DBG_LOG("Max number of connection reached: %d ===>Disconnecting...", ble_device_count);
1000e918:	481a      	ldr	r0, [pc, #104]	; (1000e984 <ble_connected_state_handler+0x1f8>)
1000e91a:	4b1b      	ldr	r3, [pc, #108]	; (1000e988 <ble_connected_state_handler+0x1fc>)
1000e91c:	4798      	blx	r3
1000e91e:	4b28      	ldr	r3, [pc, #160]	; (1000e9c0 <ble_connected_state_handler+0x234>)
1000e920:	7819      	ldrb	r1, [r3, #0]
1000e922:	b2c9      	uxtb	r1, r1
1000e924:	4827      	ldr	r0, [pc, #156]	; (1000e9c4 <ble_connected_state_handler+0x238>)
1000e926:	4b1a      	ldr	r3, [pc, #104]	; (1000e990 <ble_connected_state_handler+0x204>)
1000e928:	4798      	blx	r3
			at_ble_disconnect(conn_params->handle, AT_BLE_TERMINATED_BY_USER);
1000e92a:	8928      	ldrh	r0, [r5, #8]
1000e92c:	2113      	movs	r1, #19
1000e92e:	4b26      	ldr	r3, [pc, #152]	; (1000e9c8 <ble_connected_state_handler+0x23c>)
1000e930:	4798      	blx	r3
1000e932:	e020      	b.n	1000e976 <ble_connected_state_handler+0x1ea>
		
#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
		
        if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
        {
	 		ble_send_slave_sec_request(conn_params->handle);
1000e934:	8928      	ldrh	r0, [r5, #8]
1000e936:	4b25      	ldr	r3, [pc, #148]	; (1000e9cc <ble_connected_state_handler+0x240>)
1000e938:	4798      	blx	r3
1000e93a:	e01c      	b.n	1000e976 <ble_connected_state_handler+0x1ea>
        }
#endif
	} 
	else
	{
		DBG_LOG("Device Connection Failed - Status: %d", conn_params->conn_status);
1000e93c:	4811      	ldr	r0, [pc, #68]	; (1000e984 <ble_connected_state_handler+0x1f8>)
1000e93e:	4b12      	ldr	r3, [pc, #72]	; (1000e988 <ble_connected_state_handler+0x1fc>)
1000e940:	4798      	blx	r3
1000e942:	7aa9      	ldrb	r1, [r5, #10]
1000e944:	4822      	ldr	r0, [pc, #136]	; (1000e9d0 <ble_connected_state_handler+0x244>)
1000e946:	4b12      	ldr	r3, [pc, #72]	; (1000e990 <ble_connected_state_handler+0x204>)
1000e948:	4798      	blx	r3
	}
	ALL_UNUSED(peripheral_device_added);
	return AT_BLE_SUCCESS;
1000e94a:	2600      	movs	r6, #0
1000e94c:	e013      	b.n	1000e976 <ble_connected_state_handler+0x1ea>
					DBG_LOG_DEV("New Connection");
				}				
			}
		}
			
		if (ble_device_count < BLE_MAX_DEVICE_CONNECTED)
1000e94e:	4b1c      	ldr	r3, [pc, #112]	; (1000e9c0 <ble_connected_state_handler+0x234>)
1000e950:	781b      	ldrb	r3, [r3, #0]
1000e952:	b2db      	uxtb	r3, r3
1000e954:	2b04      	cmp	r3, #4
1000e956:	d8df      	bhi.n	1000e918 <ble_connected_state_handler+0x18c>
1000e958:	4b18      	ldr	r3, [pc, #96]	; (1000e9bc <ble_connected_state_handler+0x230>)
1000e95a:	4699      	mov	r9, r3
1000e95c:	2400      	movs	r4, #0
		{
			bool conn_exists = false;
			for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
			{
				if(!memcmp((uint8_t *)&ble_dev_info[idx].conn_info.peer_addr, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000e95e:	4b11      	ldr	r3, [pc, #68]	; (1000e9a4 <ble_connected_state_handler+0x218>)
1000e960:	469b      	mov	fp, r3
1000e962:	e773      	b.n	1000e84c <ble_connected_state_handler+0xc0>
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
				{
					if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000e964:	235e      	movs	r3, #94	; 0x5e
1000e966:	4a15      	ldr	r2, [pc, #84]	; (1000e9bc <ble_connected_state_handler+0x230>)
1000e968:	5cd3      	ldrb	r3, [r2, r3]
1000e96a:	2b00      	cmp	r3, #0
1000e96c:	d08c      	beq.n	1000e888 <ble_connected_state_handler+0xfc>
1000e96e:	4a19      	ldr	r2, [pc, #100]	; (1000e9d4 <ble_connected_state_handler+0x248>)
1000e970:	2301      	movs	r3, #1
				}
			}
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000e972:	2701      	movs	r7, #1
1000e974:	e783      	b.n	1000e87e <ble_connected_state_handler+0xf2>
	{
		DBG_LOG("Device Connection Failed - Status: %d", conn_params->conn_status);
	}
	ALL_UNUSED(peripheral_device_added);
	return AT_BLE_SUCCESS;
}
1000e976:	0030      	movs	r0, r6
1000e978:	b01a      	add	sp, #104	; 0x68
1000e97a:	bc1c      	pop	{r2, r3, r4}
1000e97c:	4690      	mov	r8, r2
1000e97e:	4699      	mov	r9, r3
1000e980:	46a3      	mov	fp, r4
1000e982:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000e984:	100165a4 	.word	0x100165a4
1000e988:	100153f9 	.word	0x100153f9
1000e98c:	10017f18 	.word	0x10017f18
1000e990:	100152d9 	.word	0x100152d9
1000e994:	10017f5c 	.word	0x10017f5c
1000e998:	1001a4f0 	.word	0x1001a4f0
1000e99c:	1001517f 	.word	0x1001517f
1000e9a0:	10018db0 	.word	0x10018db0
1000e9a4:	10015161 	.word	0x10015161
1000e9a8:	10015191 	.word	0x10015191
1000e9ac:	1001a28a 	.word	0x1001a28a
1000e9b0:	100109ed 	.word	0x100109ed
1000e9b4:	10017f74 	.word	0x10017f74
1000e9b8:	10017f98 	.word	0x10017f98
1000e9bc:	1001a244 	.word	0x1001a244
1000e9c0:	1001a4b0 	.word	0x1001a4b0
1000e9c4:	10017fbc 	.word	0x10017fbc
1000e9c8:	100109c1 	.word	0x100109c1
1000e9cc:	1000e745 	.word	0x1000e745
1000e9d0:	10017ff8 	.word	0x10017ff8
1000e9d4:	1001a31e 	.word	0x1001a31e

1000e9d8 <ble_resolv_rand_addr_handler>:

at_ble_status_t ble_resolv_rand_addr_handler(void *params)
{
1000e9d8:	b5f0      	push	{r4, r5, r6, r7, lr}
1000e9da:	4647      	mov	r7, r8
1000e9dc:	b480      	push	{r7}
	uint8_t idx;	
	bool device_found = false;
	bool peripheral_device_added = false;
	ble_resolv_rand_addr_status = (at_ble_resolv_rand_addr_status_t *)params;	
	
	if(ble_resolv_rand_addr_status->status == AT_BLE_SUCCESS)
1000e9de:	7803      	ldrb	r3, [r0, #0]
1000e9e0:	2b00      	cmp	r3, #0
1000e9e2:	d152      	bne.n	1000ea8a <ble_resolv_rand_addr_handler+0xb2>
1000e9e4:	4d3e      	ldr	r5, [pc, #248]	; (1000eae0 <ble_resolv_rand_addr_handler+0x108>)
1000e9e6:	2400      	movs	r4, #0
	{		
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
		{
			/* Check the Resolved Address */
			if (!memcmp((uint8_t *)ble_resolv_rand_addr_status->irk, (uint8_t *)ble_dev_info[idx].bond_info.peer_irk.key, AT_BLE_MAX_KEY_LEN))
1000e9e8:	1c46      	adds	r6, r0, #1
1000e9ea:	4f3e      	ldr	r7, [pc, #248]	; (1000eae4 <ble_resolv_rand_addr_handler+0x10c>)
1000e9ec:	2210      	movs	r2, #16
1000e9ee:	0029      	movs	r1, r5
1000e9f0:	0030      	movs	r0, r6
1000e9f2:	47b8      	blx	r7
1000e9f4:	2800      	cmp	r0, #0
1000e9f6:	d031      	beq.n	1000ea5c <ble_resolv_rand_addr_handler+0x84>
	bool peripheral_device_added = false;
	ble_resolv_rand_addr_status = (at_ble_resolv_rand_addr_status_t *)params;	
	
	if(ble_resolv_rand_addr_status->status == AT_BLE_SUCCESS)
	{		
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000e9f8:	3401      	adds	r4, #1
1000e9fa:	b2e4      	uxtb	r4, r4
1000e9fc:	357c      	adds	r5, #124	; 0x7c
1000e9fe:	2c05      	cmp	r4, #5
1000ea00:	d1f4      	bne.n	1000e9ec <ble_resolv_rand_addr_handler+0x14>
1000ea02:	e042      	b.n	1000ea8a <ble_resolv_rand_addr_handler+0xb2>
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
		{
			if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000ea04:	001d      	movs	r5, r3
1000ea06:	7811      	ldrb	r1, [r2, #0]
1000ea08:	2900      	cmp	r1, #0
1000ea0a:	d11b      	bne.n	1000ea44 <ble_resolv_rand_addr_handler+0x6c>
1000ea0c:	e001      	b.n	1000ea12 <ble_resolv_rand_addr_handler+0x3a>
1000ea0e:	2500      	movs	r5, #0
		peripheral_device_added = true;
	}
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000ea10:	2400      	movs	r4, #0
		{
			if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
			{
				memcpy(&ble_dev_info[idx].conn_info, (uint8_t *)&connected_state_info, sizeof(at_ble_connected_t));
1000ea12:	4b35      	ldr	r3, [pc, #212]	; (1000eae8 <ble_resolv_rand_addr_handler+0x110>)
1000ea14:	4698      	mov	r8, r3
1000ea16:	016e      	lsls	r6, r5, #5
1000ea18:	1b77      	subs	r7, r6, r5
1000ea1a:	00bf      	lsls	r7, r7, #2
1000ea1c:	4447      	add	r7, r8
1000ea1e:	2212      	movs	r2, #18
1000ea20:	4932      	ldr	r1, [pc, #200]	; (1000eaec <ble_resolv_rand_addr_handler+0x114>)
1000ea22:	0038      	movs	r0, r7
1000ea24:	4b32      	ldr	r3, [pc, #200]	; (1000eaf0 <ble_resolv_rand_addr_handler+0x118>)
1000ea26:	4798      	blx	r3
				ble_device_count++;
1000ea28:	4a32      	ldr	r2, [pc, #200]	; (1000eaf4 <ble_resolv_rand_addr_handler+0x11c>)
1000ea2a:	7813      	ldrb	r3, [r2, #0]
1000ea2c:	3301      	adds	r3, #1
1000ea2e:	b2db      	uxtb	r3, r3
1000ea30:	7013      	strb	r3, [r2, #0]
				ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000ea32:	375e      	adds	r7, #94	; 0x5e
1000ea34:	2302      	movs	r3, #2
1000ea36:	703b      	strb	r3, [r7, #0]
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
1000ea38:	1b75      	subs	r5, r6, r5
1000ea3a:	00ad      	lsls	r5, r5, #2
1000ea3c:	4445      	add	r5, r8
1000ea3e:	3308      	adds	r3, #8
1000ea40:	74ab      	strb	r3, [r5, #18]
				peripheral_device_added = true;
				break;
1000ea42:	e031      	b.n	1000eaa8 <ble_resolv_rand_addr_handler+0xd0>
		peripheral_device_added = true;
	}
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000ea44:	3401      	adds	r4, #1
1000ea46:	b2e4      	uxtb	r4, r4
1000ea48:	3301      	adds	r3, #1
1000ea4a:	327c      	adds	r2, #124	; 0x7c
1000ea4c:	2c05      	cmp	r4, #5
1000ea4e:	d1d9      	bne.n	1000ea04 <ble_resolv_rand_addr_handler+0x2c>
1000ea50:	e03a      	b.n	1000eac8 <ble_resolv_rand_addr_handler+0xf0>
	}
	DBG_LOG_DEV("Device idx:%d",idx);
	#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
	if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
	{
		ble_send_slave_sec_request(connected_state_info.handle);
1000ea52:	4b26      	ldr	r3, [pc, #152]	; (1000eaec <ble_resolv_rand_addr_handler+0x114>)
1000ea54:	8918      	ldrh	r0, [r3, #8]
1000ea56:	4b28      	ldr	r3, [pc, #160]	; (1000eaf8 <ble_resolv_rand_addr_handler+0x120>)
1000ea58:	4798      	blx	r3
1000ea5a:	e03c      	b.n	1000ead6 <ble_resolv_rand_addr_handler+0xfe>
		
	}
	
	if (device_found)
	{
		DBG_LOG_DEV("##########Device Found");
1000ea5c:	4827      	ldr	r0, [pc, #156]	; (1000eafc <ble_resolv_rand_addr_handler+0x124>)
1000ea5e:	4b28      	ldr	r3, [pc, #160]	; (1000eb00 <ble_resolv_rand_addr_handler+0x128>)
1000ea60:	4798      	blx	r3
1000ea62:	4828      	ldr	r0, [pc, #160]	; (1000eb04 <ble_resolv_rand_addr_handler+0x12c>)
1000ea64:	4b28      	ldr	r3, [pc, #160]	; (1000eb08 <ble_resolv_rand_addr_handler+0x130>)
1000ea66:	4798      	blx	r3
		ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000ea68:	481f      	ldr	r0, [pc, #124]	; (1000eae8 <ble_resolv_rand_addr_handler+0x110>)
1000ea6a:	0163      	lsls	r3, r4, #5
1000ea6c:	1b1a      	subs	r2, r3, r4
1000ea6e:	0092      	lsls	r2, r2, #2
1000ea70:	1882      	adds	r2, r0, r2
1000ea72:	0011      	movs	r1, r2
1000ea74:	315e      	adds	r1, #94	; 0x5e
1000ea76:	2502      	movs	r5, #2
1000ea78:	700d      	strb	r5, [r1, #0]
		ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
1000ea7a:	210a      	movs	r1, #10
1000ea7c:	7491      	strb	r1, [r2, #18]
		memcpy((uint8_t *)&ble_dev_info[idx].conn_info, (uint8_t *)&connected_state_info, sizeof(at_ble_connected_t));
1000ea7e:	0010      	movs	r0, r2
1000ea80:	2212      	movs	r2, #18
1000ea82:	491a      	ldr	r1, [pc, #104]	; (1000eaec <ble_resolv_rand_addr_handler+0x114>)
1000ea84:	4b1a      	ldr	r3, [pc, #104]	; (1000eaf0 <ble_resolv_rand_addr_handler+0x118>)
1000ea86:	4798      	blx	r3
1000ea88:	e00e      	b.n	1000eaa8 <ble_resolv_rand_addr_handler+0xd0>
		peripheral_device_added = true;
	}
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
1000ea8a:	481c      	ldr	r0, [pc, #112]	; (1000eafc <ble_resolv_rand_addr_handler+0x124>)
1000ea8c:	4b1c      	ldr	r3, [pc, #112]	; (1000eb00 <ble_resolv_rand_addr_handler+0x128>)
1000ea8e:	4798      	blx	r3
1000ea90:	481e      	ldr	r0, [pc, #120]	; (1000eb0c <ble_resolv_rand_addr_handler+0x134>)
1000ea92:	4b1d      	ldr	r3, [pc, #116]	; (1000eb08 <ble_resolv_rand_addr_handler+0x130>)
1000ea94:	4798      	blx	r3
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
		{
			if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000ea96:	235e      	movs	r3, #94	; 0x5e
1000ea98:	4a13      	ldr	r2, [pc, #76]	; (1000eae8 <ble_resolv_rand_addr_handler+0x110>)
1000ea9a:	5cd3      	ldrb	r3, [r2, r3]
1000ea9c:	2b00      	cmp	r3, #0
1000ea9e:	d0b6      	beq.n	1000ea0e <ble_resolv_rand_addr_handler+0x36>
1000eaa0:	4a1b      	ldr	r2, [pc, #108]	; (1000eb10 <ble_resolv_rand_addr_handler+0x138>)
1000eaa2:	2301      	movs	r3, #1
		peripheral_device_added = true;
	}
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000eaa4:	2401      	movs	r4, #1
1000eaa6:	e7ad      	b.n	1000ea04 <ble_resolv_rand_addr_handler+0x2c>
				peripheral_device_added = true;
				break;
			}
		}
	}
	DBG_LOG_DEV("Device idx:%d",idx);
1000eaa8:	4814      	ldr	r0, [pc, #80]	; (1000eafc <ble_resolv_rand_addr_handler+0x124>)
1000eaaa:	4b15      	ldr	r3, [pc, #84]	; (1000eb00 <ble_resolv_rand_addr_handler+0x128>)
1000eaac:	4798      	blx	r3
1000eaae:	0021      	movs	r1, r4
1000eab0:	4818      	ldr	r0, [pc, #96]	; (1000eb14 <ble_resolv_rand_addr_handler+0x13c>)
1000eab2:	4b15      	ldr	r3, [pc, #84]	; (1000eb08 <ble_resolv_rand_addr_handler+0x130>)
1000eab4:	4798      	blx	r3
	#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
	if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
1000eab6:	0163      	lsls	r3, r4, #5
1000eab8:	1b1c      	subs	r4, r3, r4
1000eaba:	00a4      	lsls	r4, r4, #2
1000eabc:	4b0a      	ldr	r3, [pc, #40]	; (1000eae8 <ble_resolv_rand_addr_handler+0x110>)
1000eabe:	191c      	adds	r4, r3, r4
1000eac0:	7ca3      	ldrb	r3, [r4, #18]
1000eac2:	2b0a      	cmp	r3, #10
1000eac4:	d107      	bne.n	1000ead6 <ble_resolv_rand_addr_handler+0xfe>
1000eac6:	e7c4      	b.n	1000ea52 <ble_resolv_rand_addr_handler+0x7a>
				peripheral_device_added = true;
				break;
			}
		}
	}
	DBG_LOG_DEV("Device idx:%d",idx);
1000eac8:	480c      	ldr	r0, [pc, #48]	; (1000eafc <ble_resolv_rand_addr_handler+0x124>)
1000eaca:	4b0d      	ldr	r3, [pc, #52]	; (1000eb00 <ble_resolv_rand_addr_handler+0x128>)
1000eacc:	4798      	blx	r3
1000eace:	2105      	movs	r1, #5
1000ead0:	4810      	ldr	r0, [pc, #64]	; (1000eb14 <ble_resolv_rand_addr_handler+0x13c>)
1000ead2:	4b0d      	ldr	r3, [pc, #52]	; (1000eb08 <ble_resolv_rand_addr_handler+0x130>)
1000ead4:	4798      	blx	r3
	#endif
	ALL_UNUSED(peripheral_device_added);

	return AT_BLE_SUCCESS;
	
}
1000ead6:	2000      	movs	r0, #0
1000ead8:	bc04      	pop	{r2}
1000eada:	4690      	mov	r8, r2
1000eadc:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000eade:	46c0      	nop			; (mov r8, r8)
1000eae0:	1001a28a 	.word	0x1001a28a
1000eae4:	10015161 	.word	0x10015161
1000eae8:	1001a244 	.word	0x1001a244
1000eaec:	1001a4f0 	.word	0x1001a4f0
1000eaf0:	1001517f 	.word	0x1001517f
1000eaf4:	1001a4b0 	.word	0x1001a4b0
1000eaf8:	1000e745 	.word	0x1000e745
1000eafc:	100165a4 	.word	0x100165a4
1000eb00:	100153f9 	.word	0x100153f9
1000eb04:	10018020 	.word	0x10018020
1000eb08:	100152d9 	.word	0x100152d9
1000eb0c:	10018038 	.word	0x10018038
1000eb10:	1001a31e 	.word	0x1001a31e
1000eb14:	10018054 	.word	0x10018054

1000eb18 <ble_event_manager>:
	}
	return AT_BLE_SUCCESS;
}

void ble_event_manager(at_ble_events_t events, void *event_params)
{
1000eb18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000eb1a:	0004      	movs	r4, r0
1000eb1c:	000d      	movs	r5, r1
	DBG_LOG_DEV("\r\nBLE-Event:%d", events);
1000eb1e:	4848      	ldr	r0, [pc, #288]	; (1000ec40 <ble_event_manager+0x128>)
1000eb20:	4b48      	ldr	r3, [pc, #288]	; (1000ec44 <ble_event_manager+0x12c>)
1000eb22:	4798      	blx	r3
1000eb24:	0021      	movs	r1, r4
1000eb26:	4848      	ldr	r0, [pc, #288]	; (1000ec48 <ble_event_manager+0x130>)
1000eb28:	4b48      	ldr	r3, [pc, #288]	; (1000ec4c <ble_event_manager+0x134>)
1000eb2a:	4798      	blx	r3
	switch(events)
1000eb2c:	2c3b      	cmp	r4, #59	; 0x3b
1000eb2e:	d879      	bhi.n	1000ec24 <ble_event_manager+0x10c>
1000eb30:	00a3      	lsls	r3, r4, #2
1000eb32:	4a47      	ldr	r2, [pc, #284]	; (1000ec50 <ble_event_manager+0x138>)
1000eb34:	58d3      	ldr	r3, [r2, r3]
1000eb36:	469f      	mov	pc, r3
		for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gap_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gap_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000eb38:	00a4      	lsls	r4, r4, #2
1000eb3a:	2600      	movs	r6, #0
		}
		#endif			
		
		for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gap_event_cb[idx] != NULL)
1000eb3c:	4f45      	ldr	r7, [pc, #276]	; (1000ec54 <ble_event_manager+0x13c>)
1000eb3e:	59bb      	ldr	r3, [r7, r6]
1000eb40:	2b00      	cmp	r3, #0
1000eb42:	d004      	beq.n	1000eb4e <ble_event_manager+0x36>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gap_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000eb44:	591b      	ldr	r3, [r3, r4]
1000eb46:	2b00      	cmp	r3, #0
1000eb48:	d001      	beq.n	1000eb4e <ble_event_manager+0x36>
				{
					event_cb_fn[events](event_params);		
1000eb4a:	0028      	movs	r0, r5
1000eb4c:	4798      	blx	r3
1000eb4e:	3604      	adds	r6, #4
			if( ble_scan_duplication_check((at_ble_scan_info_t*)event_params) )
				return;
		}
		#endif			
		
		for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
1000eb50:	2e14      	cmp	r6, #20
1000eb52:	d1f4      	bne.n	1000eb3e <ble_event_manager+0x26>
1000eb54:	e072      	b.n	1000ec3c <ble_event_manager+0x124>
		for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_client_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_client_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000eb56:	3c13      	subs	r4, #19
1000eb58:	b2e4      	uxtb	r4, r4
1000eb5a:	00a4      	lsls	r4, r4, #2
1000eb5c:	2600      	movs	r6, #0
	{
		uint8_t idx;
		events -= (AT_BLE_CON_CHANNEL_MAP_IND + 1);
		for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_client_event_cb[idx] != NULL)
1000eb5e:	4f3e      	ldr	r7, [pc, #248]	; (1000ec58 <ble_event_manager+0x140>)
1000eb60:	59bb      	ldr	r3, [r7, r6]
1000eb62:	2b00      	cmp	r3, #0
1000eb64:	d004      	beq.n	1000eb70 <ble_event_manager+0x58>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_client_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000eb66:	591b      	ldr	r3, [r3, r4]
1000eb68:	2b00      	cmp	r3, #0
1000eb6a:	d001      	beq.n	1000eb70 <ble_event_manager+0x58>
				{
					event_cb_fn[events](event_params);
1000eb6c:	0028      	movs	r0, r5
1000eb6e:	4798      	blx	r3
1000eb70:	3604      	adds	r6, #4
	case AT_BLE_NOTIFICATION_RECIEVED:
	case AT_BLE_INDICATION_RECIEVED:
	{
		uint8_t idx;
		events -= (AT_BLE_CON_CHANNEL_MAP_IND + 1);
		for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
1000eb72:	2e14      	cmp	r6, #20
1000eb74:	d1f4      	bne.n	1000eb60 <ble_event_manager+0x48>
1000eb76:	e061      	b.n	1000ec3c <ble_event_manager+0x124>
	case AT_BLE_MTU_CHANGED_CMD_COMPLETE:
	case AT_BLE_CHARACTERISTIC_WRITE_CMD_CMP:
	case AT_BLE_READ_AUTHORIZE_REQUEST:
	{
		uint8_t idx;
		events -= (AT_BLE_INDICATION_RECIEVED + 1);
1000eb78:	3c1d      	subs	r4, #29
1000eb7a:	b2e4      	uxtb	r4, r4
		DBG_LOG_DEV("GATT_Server Event:%d", events);
1000eb7c:	4830      	ldr	r0, [pc, #192]	; (1000ec40 <ble_event_manager+0x128>)
1000eb7e:	4b31      	ldr	r3, [pc, #196]	; (1000ec44 <ble_event_manager+0x12c>)
1000eb80:	4798      	blx	r3
1000eb82:	0021      	movs	r1, r4
1000eb84:	4835      	ldr	r0, [pc, #212]	; (1000ec5c <ble_event_manager+0x144>)
1000eb86:	4b31      	ldr	r3, [pc, #196]	; (1000ec4c <ble_event_manager+0x134>)
1000eb88:	4798      	blx	r3
		for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_server_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_server_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000eb8a:	00a4      	lsls	r4, r4, #2
1000eb8c:	2600      	movs	r6, #0
		uint8_t idx;
		events -= (AT_BLE_INDICATION_RECIEVED + 1);
		DBG_LOG_DEV("GATT_Server Event:%d", events);
		for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_server_event_cb[idx] != NULL)
1000eb8e:	4f34      	ldr	r7, [pc, #208]	; (1000ec60 <ble_event_manager+0x148>)
1000eb90:	59bb      	ldr	r3, [r7, r6]
1000eb92:	2b00      	cmp	r3, #0
1000eb94:	d004      	beq.n	1000eba0 <ble_event_manager+0x88>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_server_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000eb96:	591b      	ldr	r3, [r3, r4]
1000eb98:	2b00      	cmp	r3, #0
1000eb9a:	d001      	beq.n	1000eba0 <ble_event_manager+0x88>
				{
					event_cb_fn[events](event_params);
1000eb9c:	0028      	movs	r0, r5
1000eb9e:	4798      	blx	r3
1000eba0:	3604      	adds	r6, #4
	case AT_BLE_READ_AUTHORIZE_REQUEST:
	{
		uint8_t idx;
		events -= (AT_BLE_INDICATION_RECIEVED + 1);
		DBG_LOG_DEV("GATT_Server Event:%d", events);
		for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
1000eba2:	2e14      	cmp	r6, #20
1000eba4:	d1f4      	bne.n	1000eb90 <ble_event_manager+0x78>
1000eba6:	e049      	b.n	1000ec3c <ble_event_manager+0x124>
	case AT_BLE_LECB_ADD_CREDIT_IND:
	case AT_BLE_LECB_SEND_RESP:
	case AT_BLE_LECB_DATA_RECIEVED:
	{
		uint8_t idx;
		events -= (AT_BLE_READ_AUTHORIZE_REQUEST + 1);
1000eba8:	3c27      	subs	r4, #39	; 0x27
1000ebaa:	b2e4      	uxtb	r4, r4
		for (idx = 0; idx < MAX_L2CAP_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_l2cap_event_cb[idx] != NULL)
1000ebac:	4b2d      	ldr	r3, [pc, #180]	; (1000ec64 <ble_event_manager+0x14c>)
1000ebae:	681b      	ldr	r3, [r3, #0]
1000ebb0:	2b00      	cmp	r3, #0
1000ebb2:	d043      	beq.n	1000ec3c <ble_event_manager+0x124>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_l2cap_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000ebb4:	00a4      	lsls	r4, r4, #2
1000ebb6:	58e3      	ldr	r3, [r4, r3]
1000ebb8:	2b00      	cmp	r3, #0
1000ebba:	d03f      	beq.n	1000ec3c <ble_event_manager+0x124>
				{
					event_cb_fn[events](event_params);
1000ebbc:	0028      	movs	r0, r5
1000ebbe:	4798      	blx	r3
1000ebc0:	e03c      	b.n	1000ec3c <ble_event_manager+0x124>
	case AT_BLE_HTPT_ENABLE_RSP:
	case AT_BLE_HTPT_MEAS_INTV_UPD_RSP:
	case AT_BLE_HTPT_MEAS_INTV_CHG_REQ:
	{
		uint8_t idx;
		events -= (AT_BLE_LECB_DATA_RECIEVED + 1);
1000ebc2:	3c2d      	subs	r4, #45	; 0x2d
1000ebc4:	b2e4      	uxtb	r4, r4
		for (idx = 0; idx < MAX_HTPT_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_htpt_event_cb[idx] != NULL)
1000ebc6:	4b28      	ldr	r3, [pc, #160]	; (1000ec68 <ble_event_manager+0x150>)
1000ebc8:	681b      	ldr	r3, [r3, #0]
1000ebca:	2b00      	cmp	r3, #0
1000ebcc:	d036      	beq.n	1000ec3c <ble_event_manager+0x124>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_htpt_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000ebce:	00a4      	lsls	r4, r4, #2
1000ebd0:	58e3      	ldr	r3, [r4, r3]
1000ebd2:	2b00      	cmp	r3, #0
1000ebd4:	d032      	beq.n	1000ec3c <ble_event_manager+0x124>
				{
					event_cb_fn[events](event_params);
1000ebd6:	0028      	movs	r0, r5
1000ebd8:	4798      	blx	r3
1000ebda:	e02f      	b.n	1000ec3c <ble_event_manager+0x124>
		for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_dtm_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_dtm_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000ebdc:	3c36      	subs	r4, #54	; 0x36
1000ebde:	b2e4      	uxtb	r4, r4
1000ebe0:	00a4      	lsls	r4, r4, #2
1000ebe2:	2600      	movs	r6, #0
	{
		uint8_t idx;
		events -= (AT_BLE_HTPT_MEAS_INTV_CHG_REQ + 1);
		for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_dtm_event_cb[idx] != NULL)
1000ebe4:	4f21      	ldr	r7, [pc, #132]	; (1000ec6c <ble_event_manager+0x154>)
1000ebe6:	59bb      	ldr	r3, [r7, r6]
1000ebe8:	2b00      	cmp	r3, #0
1000ebea:	d004      	beq.n	1000ebf6 <ble_event_manager+0xde>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_dtm_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000ebec:	591b      	ldr	r3, [r3, r4]
1000ebee:	2b00      	cmp	r3, #0
1000ebf0:	d001      	beq.n	1000ebf6 <ble_event_manager+0xde>
				{
					event_cb_fn[events](event_params);
1000ebf2:	0028      	movs	r0, r5
1000ebf4:	4798      	blx	r3
1000ebf6:	3604      	adds	r6, #4
	case AT_BLE_LE_TEST_STATUS:
	case AT_BLE_LE_PACKET_REPORT:
	{
		uint8_t idx;
		events -= (AT_BLE_HTPT_MEAS_INTV_CHG_REQ + 1);
		for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
1000ebf8:	2e14      	cmp	r6, #20
1000ebfa:	d1f4      	bne.n	1000ebe6 <ble_event_manager+0xce>
1000ebfc:	e01e      	b.n	1000ec3c <ble_event_manager+0x124>
	case AT_BLE_CUSTOM_EVENT:
	case AT_BLE_DEVICE_READY:
	case AT_BLE_EVENT_MAX:
	{
		uint8_t idx;
		events -= (AT_BLE_LE_PACKET_REPORT + 1);
1000ebfe:	3c38      	subs	r4, #56	; 0x38
1000ec00:	b2e4      	uxtb	r4, r4
		for (idx = 0; idx < MAX_CUSTOM_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_custom_event_cb[idx] != NULL)
1000ec02:	4b1b      	ldr	r3, [pc, #108]	; (1000ec70 <ble_event_manager+0x158>)
1000ec04:	681b      	ldr	r3, [r3, #0]
1000ec06:	2b00      	cmp	r3, #0
1000ec08:	d018      	beq.n	1000ec3c <ble_event_manager+0x124>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_custom_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000ec0a:	00a4      	lsls	r4, r4, #2
1000ec0c:	58e3      	ldr	r3, [r4, r3]
1000ec0e:	2b00      	cmp	r3, #0
1000ec10:	d014      	beq.n	1000ec3c <ble_event_manager+0x124>
				{
					event_cb_fn[events](event_params);
1000ec12:	0028      	movs	r0, r5
1000ec14:	4798      	blx	r3
1000ec16:	e011      	b.n	1000ec3c <ble_event_manager+0x124>
	}
	break;

	case AT_PLATFORM_EVENT:
	{
		if (ble_user_event_cb) {
1000ec18:	4b16      	ldr	r3, [pc, #88]	; (1000ec74 <ble_event_manager+0x15c>)
1000ec1a:	681b      	ldr	r3, [r3, #0]
1000ec1c:	2b00      	cmp	r3, #0
1000ec1e:	d00d      	beq.n	1000ec3c <ble_event_manager+0x124>
			ble_user_event_cb();
1000ec20:	4798      	blx	r3
1000ec22:	e00b      	b.n	1000ec3c <ble_event_manager+0x124>
	}
	break;

	default:
	{
		DBG_LOG_DEV("BLE-Manager:Unknown Event=0x%X", events);
1000ec24:	4e06      	ldr	r6, [pc, #24]	; (1000ec40 <ble_event_manager+0x128>)
1000ec26:	0030      	movs	r0, r6
1000ec28:	4d06      	ldr	r5, [pc, #24]	; (1000ec44 <ble_event_manager+0x12c>)
1000ec2a:	47a8      	blx	r5
1000ec2c:	0021      	movs	r1, r4
1000ec2e:	4812      	ldr	r0, [pc, #72]	; (1000ec78 <ble_event_manager+0x160>)
1000ec30:	4b06      	ldr	r3, [pc, #24]	; (1000ec4c <ble_event_manager+0x134>)
1000ec32:	4798      	blx	r3
		DBG_LOG("\r\n");
1000ec34:	0030      	movs	r0, r6
1000ec36:	47a8      	blx	r5
1000ec38:	0030      	movs	r0, r6
1000ec3a:	47a8      	blx	r5
	}
	break;		
	}
}
1000ec3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000ec3e:	46c0      	nop			; (mov r8, r8)
1000ec40:	100165a4 	.word	0x100165a4
1000ec44:	100153f9 	.word	0x100153f9
1000ec48:	10018064 	.word	0x10018064
1000ec4c:	100152d9 	.word	0x100152d9
1000ec50:	100175c4 	.word	0x100175c4
1000ec54:	1001a4c8 	.word	0x1001a4c8
1000ec58:	1001a4dc 	.word	0x1001a4dc
1000ec5c:	10018074 	.word	0x10018074
1000ec60:	1001a230 	.word	0x1001a230
1000ec64:	1001a524 	.word	0x1001a524
1000ec68:	1001a22c 	.word	0x1001a22c
1000ec6c:	1001a4b4 	.word	0x1001a4b4
1000ec70:	1001aa68 	.word	0x1001aa68
1000ec74:	10018da8 	.word	0x10018da8
1000ec78:	1001808c 	.word	0x1001808c

1000ec7c <ble_event_task>:
	return ulp_status;
}

/** @brief function to get event from stack */
at_ble_status_t ble_event_task(uint32_t timeout)
{
1000ec7c:	b570      	push	{r4, r5, r6, lr}
1000ec7e:	0004      	movs	r4, r0
	return status;
}

ble_ulp_mode_t ble_get_ulp_status(void)
{
	return ulp_status;
1000ec80:	4b0d      	ldr	r3, [pc, #52]	; (1000ecb8 <ble_event_task+0x3c>)
1000ec82:	781b      	ldrb	r3, [r3, #0]
/** @brief function to get event from stack */
at_ble_status_t ble_event_task(uint32_t timeout)
{
	at_ble_status_t status;
	
	if (ble_get_ulp_status() == BLE_ULP_MODE_SET)
1000ec84:	2b01      	cmp	r3, #1
1000ec86:	d101      	bne.n	1000ec8c <ble_event_task+0x10>
	{
		release_sleep_lock();
1000ec88:	4b0c      	ldr	r3, [pc, #48]	; (1000ecbc <ble_event_task+0x40>)
1000ec8a:	4798      	blx	r3
	}	
	status = at_ble_event_get(&event, ble_event_params, timeout);
1000ec8c:	0022      	movs	r2, r4
1000ec8e:	490c      	ldr	r1, [pc, #48]	; (1000ecc0 <ble_event_task+0x44>)
1000ec90:	480c      	ldr	r0, [pc, #48]	; (1000ecc4 <ble_event_task+0x48>)
1000ec92:	4b0d      	ldr	r3, [pc, #52]	; (1000ecc8 <ble_event_task+0x4c>)
1000ec94:	4798      	blx	r3
1000ec96:	0004      	movs	r4, r0
1000ec98:	0005      	movs	r5, r0
	return status;
}

ble_ulp_mode_t ble_get_ulp_status(void)
{
	return ulp_status;
1000ec9a:	4b07      	ldr	r3, [pc, #28]	; (1000ecb8 <ble_event_task+0x3c>)
1000ec9c:	781b      	ldrb	r3, [r3, #0]
	{
		release_sleep_lock();
	}	
	status = at_ble_event_get(&event, ble_event_params, timeout);
	
	if (ble_get_ulp_status() == BLE_ULP_MODE_SET)
1000ec9e:	2b01      	cmp	r3, #1
1000eca0:	d101      	bne.n	1000eca6 <ble_event_task+0x2a>
	{
		acquire_sleep_lock();
1000eca2:	4b0a      	ldr	r3, [pc, #40]	; (1000eccc <ble_event_task+0x50>)
1000eca4:	4798      	blx	r3
	}
	
    if (status == AT_BLE_SUCCESS) 
1000eca6:	2d00      	cmp	r5, #0
1000eca8:	d104      	bne.n	1000ecb4 <ble_event_task+0x38>
    {		
            ble_event_manager(event, ble_event_params);
1000ecaa:	4b06      	ldr	r3, [pc, #24]	; (1000ecc4 <ble_event_task+0x48>)
1000ecac:	7818      	ldrb	r0, [r3, #0]
1000ecae:	4904      	ldr	r1, [pc, #16]	; (1000ecc0 <ble_event_task+0x44>)
1000ecb0:	4b07      	ldr	r3, [pc, #28]	; (1000ecd0 <ble_event_task+0x54>)
1000ecb2:	4798      	blx	r3
    }
    
    return status;
}
1000ecb4:	0020      	movs	r0, r4
1000ecb6:	bd70      	pop	{r4, r5, r6, pc}
1000ecb8:	10018db7 	.word	0x10018db7
1000ecbc:	1000f68d 	.word	0x1000f68d
1000ecc0:	1001a85c 	.word	0x1001a85c
1000ecc4:	1001a520 	.word	0x1001a520
1000ecc8:	1000fd75 	.word	0x1000fd75
1000eccc:	1000f665 	.word	0x1000f665
1000ecd0:	1000eb19 	.word	0x1000eb19

1000ecd4 <ble_advertisement_data_set>:
	}
}

/* Advertisement Data will be set based on the advertisement configuration */
at_ble_status_t ble_advertisement_data_set(void)
{
1000ecd4:	b510      	push	{r4, lr}
1000ecd6:	b090      	sub	sp, #64	; 0x40
		uint8_t length_field_ind;
		uint8_t adv_element_len;
		adv_buf[adv_data_element.len] = adv_data_element.len;
		length_field_ind = adv_data_element.len;
		adv_data_element.len++;
		adv_buf[adv_data_element.len++] = COMPLETE_LIST_16BIT_SERV_UUIDS;
1000ecd8:	ac08      	add	r4, sp, #32
1000ecda:	2203      	movs	r2, #3
1000ecdc:	7062      	strb	r2, [r4, #1]
		MREPEAT(SERVICE_UUID16_MAX_NUM, _CONF_SERVICE_16BIT_UUID, &adv_data_element);
1000ecde:	2302      	movs	r3, #2
1000ece0:	70a3      	strb	r3, [r4, #2]
1000ece2:	3316      	adds	r3, #22
1000ece4:	70e3      	strb	r3, [r4, #3]
1000ece6:	7122      	strb	r2, [r4, #4]
1000ece8:	7163      	strb	r3, [r4, #5]
1000ecea:	3201      	adds	r2, #1
1000ecec:	71a2      	strb	r2, [r4, #6]
1000ecee:	71e3      	strb	r3, [r4, #7]
1000ecf0:	320b      	adds	r2, #11
1000ecf2:	7222      	strb	r2, [r4, #8]
1000ecf4:	7263      	strb	r3, [r4, #9]
		adv_element_len = adv_data_element.len - (length_field_ind + ADV_ELEMENT_SIZE);
		if(adv_element_len) 
		{			
			adv_buf[length_field_ind] = adv_element_len+ADV_TYPE_SIZE;
1000ecf6:	3b0f      	subs	r3, #15
1000ecf8:	7023      	strb	r3, [r4, #0]
	#endif
	
	#if (BLE_GAP_ADV_COMPLETE_LOCAL_NAME_ENABLE && !BLE_GAP_ADV_SHORTENED_LOCAL_NAME_ENABLE)
	#if (BLE_GAP_ADV_COMPLETE_LOCAL_NAME_SCN_RSP_ENABLE != SCAN_RESPONSE_ONLY_ENABLE)
	if((adv_data_element.len) <= (AT_BLE_ADV_MAX_SIZE - (ADV_TYPE_FLAG_SIZE + ADV_ELEMENT_SIZE + BLE_GAP_ADV_DATA_COMPLETE_LOCAL_NAME_LENGTH))) {
		adv_buf[adv_data_element.len++] = BLE_GAP_ADV_DATA_COMPLETE_LOCAL_NAME_LENGTH + ADV_TYPE_SIZE;
1000ecfa:	3a05      	subs	r2, #5
1000ecfc:	72a2      	strb	r2, [r4, #10]
		adv_buf[adv_data_element.len++] = COMPLETE_LOCAL_NAME;
1000ecfe:	72e3      	strb	r3, [r4, #11]
		memcpy(&adv_buf[adv_data_element.len], BLE_GAP_ADV_DATA_COMPLETE_LOCAL_NAME, BLE_GAP_ADV_DATA_COMPLETE_LOCAL_NAME_LENGTH);
1000ed00:	aa0b      	add	r2, sp, #44	; 0x2c
1000ed02:	4b16      	ldr	r3, [pc, #88]	; (1000ed5c <ble_advertisement_data_set+0x88>)
1000ed04:	cb03      	ldmia	r3!, {r0, r1}
1000ed06:	c203      	stmia	r2!, {r0, r1}
1000ed08:	781b      	ldrb	r3, [r3, #0]
1000ed0a:	7013      	strb	r3, [r2, #0]
	#endif
	#if ((BLE_GAP_ADV_SERVICE_SOLTN_128BIT_UUID_SCN_RSP_ENABLE == SCAN_RESPONSE_ENABLE) || (BLE_GAP_ADV_SERVICE_SOLTN_128BIT_UUID_SCN_RSP_ENABLE == SCAN_RESPONSE_ONLY_ENABLE))
	else if((scan_resp_data_element.len) <= (AT_BLE_ADV_MAX_SIZE - (ADV_ELEMENT_SIZE + BLE_GAP_ADV_SERVICE_128BIT_UUID_LENGTH))) {
		uint8_t length_field_ind;
		uint8_t scan_resp_element_len;
		scn_resp[scan_resp_data_element.len] = scan_resp_data_element.len;
1000ed0c:	2300      	movs	r3, #0
1000ed0e:	466a      	mov	r2, sp
1000ed10:	7013      	strb	r3, [r2, #0]
		length_field_ind = scan_resp_data_element.len;
		scan_resp_data_element.len++;
		scn_resp[scan_resp_data_element.len++] = LIST_128BIT_SERV_SOLICITATION_UUIDS;
1000ed12:	3315      	adds	r3, #21
1000ed14:	7053      	strb	r3, [r2, #1]
		return AT_BLE_GAP_INVALID_PARAM;
	}
	#endif
	
	#if BLE_GAP_ADV_MANUFACTURER_SPECIFIC_DATA_ENABLE
    DBG_LOG_DEV("[ble_manager]\t\t\tManufacturer specific data enabled");
1000ed16:	4812      	ldr	r0, [pc, #72]	; (1000ed60 <ble_advertisement_data_set+0x8c>)
1000ed18:	4b12      	ldr	r3, [pc, #72]	; (1000ed64 <ble_advertisement_data_set+0x90>)
1000ed1a:	4798      	blx	r3
1000ed1c:	4812      	ldr	r0, [pc, #72]	; (1000ed68 <ble_advertisement_data_set+0x94>)
1000ed1e:	4b13      	ldr	r3, [pc, #76]	; (1000ed6c <ble_advertisement_data_set+0x98>)
1000ed20:	4798      	blx	r3
    DBG_LOG_DEV("[ble_manager]\t\tManufacturer specific data NOT enabled");
	if(false){}
	#endif
	#if ((BLE_GAP_ADV_MANUFACTURER_SPECIFIC_DATA_SCN_RSP_ENABLE == SCAN_RESPONSE_ENABLE) || (BLE_GAP_ADV_MANUFACTURER_SPECIFIC_DATA_SCN_RSP_ENABLE == SCAN_RESPONSE_ONLY_ENABLE))
	else if((scan_resp_data_element.len) <= (AT_BLE_ADV_MAX_SIZE - (ADV_ELEMENT_SIZE + BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA_SIZE))) {
		scn_resp[scan_resp_data_element.len++] = BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA_SIZE + ADV_TYPE_SIZE;
1000ed22:	2307      	movs	r3, #7
1000ed24:	466a      	mov	r2, sp
1000ed26:	7013      	strb	r3, [r2, #0]
		scn_resp[scan_resp_data_element.len++] = MANUFACTURER_SPECIFIC_DATA;
1000ed28:	33f8      	adds	r3, #248	; 0xf8
1000ed2a:	7053      	strb	r3, [r2, #1]
		memcpy(&scn_resp[scan_resp_data_element.len], BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA, BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA_SIZE);
1000ed2c:	2206      	movs	r2, #6
1000ed2e:	4910      	ldr	r1, [pc, #64]	; (1000ed70 <ble_advertisement_data_set+0x9c>)
1000ed30:	466b      	mov	r3, sp
1000ed32:	1c98      	adds	r0, r3, #2
1000ed34:	4b0f      	ldr	r3, [pc, #60]	; (1000ed74 <ble_advertisement_data_set+0xa0>)
1000ed36:	4798      	blx	r3
		DBG_LOG_ADV("Failed to add Manufacturer specific data");
		return AT_BLE_GAP_INVALID_PARAM;
	}
	#endif
	
	if (at_ble_adv_data_set(adv_buf, adv_data_element.len, scn_resp,
1000ed38:	2308      	movs	r3, #8
1000ed3a:	466a      	mov	r2, sp
1000ed3c:	2115      	movs	r1, #21
1000ed3e:	0020      	movs	r0, r4
1000ed40:	4c0d      	ldr	r4, [pc, #52]	; (1000ed78 <ble_advertisement_data_set+0xa4>)
1000ed42:	47a0      	blx	r4
1000ed44:	2800      	cmp	r0, #0
1000ed46:	d005      	beq.n	1000ed54 <ble_advertisement_data_set+0x80>
	scan_resp_data_element.len) != AT_BLE_SUCCESS) {
		DBG_LOG("BLE Advertisement data set failed");
1000ed48:	4805      	ldr	r0, [pc, #20]	; (1000ed60 <ble_advertisement_data_set+0x8c>)
1000ed4a:	4b06      	ldr	r3, [pc, #24]	; (1000ed64 <ble_advertisement_data_set+0x90>)
1000ed4c:	4798      	blx	r3
1000ed4e:	480b      	ldr	r0, [pc, #44]	; (1000ed7c <ble_advertisement_data_set+0xa8>)
1000ed50:	4b06      	ldr	r3, [pc, #24]	; (1000ed6c <ble_advertisement_data_set+0x98>)
1000ed52:	4798      	blx	r3
            //DBG_LOG_ADV("- 0x%02x(%c) ", adv_buf[i], adv_buf[i]);
        //}
		//DBG_LOG_ADV("BLE Advertisement data set success");
		return AT_BLE_SUCCESS;
    }
}
1000ed54:	2000      	movs	r0, #0
1000ed56:	b010      	add	sp, #64	; 0x40
1000ed58:	bd10      	pop	{r4, pc}
1000ed5a:	46c0      	nop			; (mov r8, r8)
1000ed5c:	10017da8 	.word	0x10017da8
1000ed60:	100165a4 	.word	0x100165a4
1000ed64:	100153f9 	.word	0x100153f9
1000ed68:	100180ac 	.word	0x100180ac
1000ed6c:	100152d9 	.word	0x100152d9
1000ed70:	100180e0 	.word	0x100180e0
1000ed74:	1001517f 	.word	0x1001517f
1000ed78:	100107d5 	.word	0x100107d5
1000ed7c:	100180e8 	.word	0x100180e8

1000ed80 <uart_read_complete_callback>:

void _time_start(unsigned int sec);
unsigned int _time_done(void);

static void uart_read_complete_callback(struct uart_module *const module)
{
1000ed80:	b510      	push	{r4, lr}
	if(read_status == UART_READ_WAITING) {
1000ed82:	4b0e      	ldr	r3, [pc, #56]	; (1000edbc <uart_read_complete_callback+0x3c>)
1000ed84:	781b      	ldrb	r3, [r3, #0]
1000ed86:	2b01      	cmp	r3, #1
1000ed88:	d10b      	bne.n	1000eda2 <uart_read_complete_callback+0x22>
		read_status = UART_READ_DONE;
1000ed8a:	2202      	movs	r2, #2
1000ed8c:	4b0b      	ldr	r3, [pc, #44]	; (1000edbc <uart_read_complete_callback+0x3c>)
1000ed8e:	701a      	strb	r2, [r3, #0]
		
		if(user_callback_func == NULL)
1000ed90:	4b0b      	ldr	r3, [pc, #44]	; (1000edc0 <uart_read_complete_callback+0x40>)
1000ed92:	681b      	ldr	r3, [r3, #0]
1000ed94:	2b00      	cmp	r3, #0
1000ed96:	d110      	bne.n	1000edba <uart_read_complete_callback+0x3a>
			uart_disable_callback(&uart_instance, UART_RX_COMPLETE);
1000ed98:	2102      	movs	r1, #2
1000ed9a:	480a      	ldr	r0, [pc, #40]	; (1000edc4 <uart_read_complete_callback+0x44>)
1000ed9c:	4b0a      	ldr	r3, [pc, #40]	; (1000edc8 <uart_read_complete_callback+0x48>)
1000ed9e:	4798      	blx	r3
1000eda0:	e00b      	b.n	1000edba <uart_read_complete_callback+0x3a>
	}
	else if(user_callback_func != NULL) {
1000eda2:	4b07      	ldr	r3, [pc, #28]	; (1000edc0 <uart_read_complete_callback+0x40>)
1000eda4:	681b      	ldr	r3, [r3, #0]
1000eda6:	2b00      	cmp	r3, #0
1000eda8:	d007      	beq.n	1000edba <uart_read_complete_callback+0x3a>
		user_callback_func(string_input[0]);
1000edaa:	4c08      	ldr	r4, [pc, #32]	; (1000edcc <uart_read_complete_callback+0x4c>)
1000edac:	7820      	ldrb	r0, [r4, #0]
1000edae:	4798      	blx	r3
		uart_read_buffer_job(&uart_instance, string_input, sizeof(string_input));
1000edb0:	2201      	movs	r2, #1
1000edb2:	0021      	movs	r1, r4
1000edb4:	4803      	ldr	r0, [pc, #12]	; (1000edc4 <uart_read_complete_callback+0x44>)
1000edb6:	4b06      	ldr	r3, [pc, #24]	; (1000edd0 <uart_read_complete_callback+0x50>)
1000edb8:	4798      	blx	r3
	}
	else {
		//Nothing to do.
	}
}
1000edba:	bd10      	pop	{r4, pc}
1000edbc:	10019dbc 	.word	0x10019dbc
1000edc0:	10019dc4 	.word	0x10019dc4
1000edc4:	1001aa6c 	.word	0x1001aa6c
1000edc8:	1000d771 	.word	0x1000d771
1000edcc:	10019dc0 	.word	0x10019dc0
1000edd0:	1000d715 	.word	0x1000d715

1000edd4 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct uart_module *const module,
		uint8_t *c)
{
1000edd4:	b570      	push	{r4, r5, r6, lr}
1000edd6:	0006      	movs	r6, r0
1000edd8:	000d      	movs	r5, r1
	while(STATUS_OK != uart_read_wait(module, c));
1000edda:	4c03      	ldr	r4, [pc, #12]	; (1000ede8 <usart_serial_getchar+0x14>)
1000eddc:	0029      	movs	r1, r5
1000edde:	0030      	movs	r0, r6
1000ede0:	47a0      	blx	r4
1000ede2:	2800      	cmp	r0, #0
1000ede4:	d1fa      	bne.n	1000eddc <usart_serial_getchar+0x8>
}
1000ede6:	bd70      	pop	{r4, r5, r6, pc}
1000ede8:	1000d701 	.word	0x1000d701

1000edec <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct uart_module *const module,
		uint8_t c)
{
1000edec:	b570      	push	{r4, r5, r6, lr}
1000edee:	0006      	movs	r6, r0
1000edf0:	000d      	movs	r5, r1
	while(STATUS_OK !=uart_write_wait(module, c));
1000edf2:	4c03      	ldr	r4, [pc, #12]	; (1000ee00 <usart_serial_putchar+0x14>)
1000edf4:	0029      	movs	r1, r5
1000edf6:	0030      	movs	r0, r6
1000edf8:	47a0      	blx	r4
1000edfa:	2800      	cmp	r0, #0
1000edfc:	d1fa      	bne.n	1000edf4 <usart_serial_putchar+0x8>

	return STATUS_OK;
}
1000edfe:	bd70      	pop	{r4, r5, r6, pc}
1000ee00:	1000d6f1 	.word	0x1000d6f1

1000ee04 <serial_console_init>:

void serial_console_init(void)
{
1000ee04:	b570      	push	{r4, r5, r6, lr}
	system_clock_config(CLOCK_RESOURCE_XO_26_MHZ, CLOCK_FREQ_26_MHZ);
1000ee06:	2100      	movs	r1, #0
1000ee08:	2000      	movs	r0, #0
1000ee0a:	4b19      	ldr	r3, [pc, #100]	; (1000ee70 <serial_console_init+0x6c>)
1000ee0c:	4798      	blx	r3

	uart_get_config_defaults(&config_uart);
1000ee0e:	4c19      	ldr	r4, [pc, #100]	; (1000ee74 <serial_console_init+0x70>)
1000ee10:	0020      	movs	r0, r4
1000ee12:	4b19      	ldr	r3, [pc, #100]	; (1000ee78 <serial_console_init+0x74>)
1000ee14:	4798      	blx	r3

	config_uart.baud_rate = CONF_STDIO_BAUDRATE;
1000ee16:	23e1      	movs	r3, #225	; 0xe1
1000ee18:	025b      	lsls	r3, r3, #9
1000ee1a:	6023      	str	r3, [r4, #0]
	config_uart.pin_number_pad[0] = EDBG_CDC_PIN_PAD0;
1000ee1c:	2302      	movs	r3, #2
1000ee1e:	60a3      	str	r3, [r4, #8]
	config_uart.pin_number_pad[1] = EDBG_CDC_PIN_PAD1;
1000ee20:	2203      	movs	r2, #3
1000ee22:	60e2      	str	r2, [r4, #12]
	config_uart.pin_number_pad[2] = EDBG_CDC_PIN_PAD2;
1000ee24:	3201      	adds	r2, #1
1000ee26:	6122      	str	r2, [r4, #16]
	config_uart.pin_number_pad[3] = EDBG_CDC_PIN_PAD3;
1000ee28:	3201      	adds	r2, #1
1000ee2a:	6162      	str	r2, [r4, #20]
	
	config_uart.pinmux_sel_pad[0] = EDBG_CDC_MUX_PAD0;
1000ee2c:	61a3      	str	r3, [r4, #24]
	config_uart.pinmux_sel_pad[1] = EDBG_CDC_MUX_PAD1;
1000ee2e:	61e3      	str	r3, [r4, #28]
	config_uart.pinmux_sel_pad[2] = EDBG_CDC_MUX_PAD2;
1000ee30:	6223      	str	r3, [r4, #32]
	config_uart.pinmux_sel_pad[3] = EDBG_CDC_MUX_PAD3;
1000ee32:	6263      	str	r3, [r4, #36]	; 0x24
static inline void stdio_serial_init(
		struct uart_module *const module,
		Uart * const hw,
		const struct uart_config *const config)
{
	stdio_base = (void *)module;
1000ee34:	4d11      	ldr	r5, [pc, #68]	; (1000ee7c <serial_console_init+0x78>)
1000ee36:	4b12      	ldr	r3, [pc, #72]	; (1000ee80 <serial_console_init+0x7c>)
1000ee38:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
1000ee3a:	4a12      	ldr	r2, [pc, #72]	; (1000ee84 <serial_console_init+0x80>)
1000ee3c:	4b12      	ldr	r3, [pc, #72]	; (1000ee88 <serial_console_init+0x84>)
1000ee3e:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
1000ee40:	4a12      	ldr	r2, [pc, #72]	; (1000ee8c <serial_console_init+0x88>)
1000ee42:	4b13      	ldr	r3, [pc, #76]	; (1000ee90 <serial_console_init+0x8c>)
1000ee44:	601a      	str	r2, [r3, #0]
static inline bool usart_serial_init(
		struct uart_module *const module,
		Uart * const hw,
		const struct uart_config *const config)
{
	if (uart_init(module, hw, config) == STATUS_OK) {
1000ee46:	0022      	movs	r2, r4
1000ee48:	4912      	ldr	r1, [pc, #72]	; (1000ee94 <serial_console_init+0x90>)
1000ee4a:	0028      	movs	r0, r5
1000ee4c:	4b12      	ldr	r3, [pc, #72]	; (1000ee98 <serial_console_init+0x94>)
1000ee4e:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
1000ee50:	4e12      	ldr	r6, [pc, #72]	; (1000ee9c <serial_console_init+0x98>)
1000ee52:	6833      	ldr	r3, [r6, #0]
1000ee54:	6898      	ldr	r0, [r3, #8]
1000ee56:	2100      	movs	r1, #0
1000ee58:	4c11      	ldr	r4, [pc, #68]	; (1000eea0 <serial_console_init+0x9c>)
1000ee5a:	47a0      	blx	r4
	setbuf(stdin, NULL);
1000ee5c:	6833      	ldr	r3, [r6, #0]
1000ee5e:	6858      	ldr	r0, [r3, #4]
1000ee60:	2100      	movs	r1, #0
1000ee62:	47a0      	blx	r4

	stdio_serial_init(&uart_instance, CONF_STDIO_USART_MODULE, &config_uart);
	
	uart_register_callback(&uart_instance, uart_read_complete_callback, UART_RX_COMPLETE);
1000ee64:	2202      	movs	r2, #2
1000ee66:	490f      	ldr	r1, [pc, #60]	; (1000eea4 <serial_console_init+0xa0>)
1000ee68:	0028      	movs	r0, r5
1000ee6a:	4b0f      	ldr	r3, [pc, #60]	; (1000eea8 <serial_console_init+0xa4>)
1000ee6c:	4798      	blx	r3
}
1000ee6e:	bd70      	pop	{r4, r5, r6, pc}
1000ee70:	1000c711 	.word	0x1000c711
1000ee74:	1001aa90 	.word	0x1001aa90
1000ee78:	1000d509 	.word	0x1000d509
1000ee7c:	1001aa6c 	.word	0x1001aa6c
1000ee80:	1001a228 	.word	0x1001a228
1000ee84:	1000eded 	.word	0x1000eded
1000ee88:	1001a224 	.word	0x1001a224
1000ee8c:	1000edd5 	.word	0x1000edd5
1000ee90:	1001a220 	.word	0x1001a220
1000ee94:	40004000 	.word	0x40004000
1000ee98:	1000d535 	.word	0x1000d535
1000ee9c:	10018488 	.word	0x10018488
1000eea0:	100154a9 	.word	0x100154a9
1000eea4:	1000ed81 	.word	0x1000ed81
1000eea8:	1000d73d 	.word	0x1000d73d

1000eeac <_time_start>:

void _time_start(unsigned int sec)
{
1000eeac:	b5f0      	push	{r4, r5, r6, r7, lr}
1000eeae:	b083      	sub	sp, #12
1000eeb0:	0005      	movs	r5, r0
	system_clock_get_value();
1000eeb2:	4c0d      	ldr	r4, [pc, #52]	; (1000eee8 <_time_start+0x3c>)
1000eeb4:	47a0      	blx	r4
	unsigned int main_clk = system_clock_get_value();
1000eeb6:	47a0      	blx	r4

	tick = (((double)(main_clk)) * ((double)0.0000493)) * (sec * 1000);
1000eeb8:	4f0c      	ldr	r7, [pc, #48]	; (1000eeec <_time_start+0x40>)
1000eeba:	47b8      	blx	r7
1000eebc:	4e0c      	ldr	r6, [pc, #48]	; (1000eef0 <_time_start+0x44>)
1000eebe:	4a0d      	ldr	r2, [pc, #52]	; (1000eef4 <_time_start+0x48>)
1000eec0:	4b0d      	ldr	r3, [pc, #52]	; (1000eef8 <_time_start+0x4c>)
1000eec2:	47b0      	blx	r6
1000eec4:	9000      	str	r0, [sp, #0]
1000eec6:	9101      	str	r1, [sp, #4]
1000eec8:	20fa      	movs	r0, #250	; 0xfa
1000eeca:	0080      	lsls	r0, r0, #2
1000eecc:	4368      	muls	r0, r5
1000eece:	47b8      	blx	r7
1000eed0:	0002      	movs	r2, r0
1000eed2:	000b      	movs	r3, r1
1000eed4:	9800      	ldr	r0, [sp, #0]
1000eed6:	9901      	ldr	r1, [sp, #4]
1000eed8:	47b0      	blx	r6
1000eeda:	4b08      	ldr	r3, [pc, #32]	; (1000eefc <_time_start+0x50>)
1000eedc:	4798      	blx	r3
1000eede:	4b08      	ldr	r3, [pc, #32]	; (1000ef00 <_time_start+0x54>)
1000eee0:	6018      	str	r0, [r3, #0]
}
1000eee2:	b003      	add	sp, #12
1000eee4:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000eee6:	46c0      	nop			; (mov r8, r8)
1000eee8:	1000c795 	.word	0x1000c795
1000eeec:	10015055 	.word	0x10015055
1000eef0:	1001444d 	.word	0x1001444d
1000eef4:	19feaec7 	.word	0x19feaec7
1000eef8:	3f09d8ef 	.word	0x3f09d8ef
1000eefc:	100134f1 	.word	0x100134f1
1000ef00:	10019db8 	.word	0x10019db8

1000ef04 <_time_done>:

unsigned int _time_done()
{
	return --tick;
1000ef04:	4b02      	ldr	r3, [pc, #8]	; (1000ef10 <_time_done+0xc>)
1000ef06:	681a      	ldr	r2, [r3, #0]
1000ef08:	1e50      	subs	r0, r2, #1
1000ef0a:	6018      	str	r0, [r3, #0]
}
1000ef0c:	4770      	bx	lr
1000ef0e:	46c0      	nop			; (mov r8, r8)
1000ef10:	10019db8 	.word	0x10019db8

1000ef14 <getchar_b11_timeout>:

int getchar_b11_timeout(unsigned int sec)
{
1000ef14:	b570      	push	{r4, r5, r6, lr}
1000ef16:	0004      	movs	r4, r0
	read_status = UART_READ_WAITING;
1000ef18:	2201      	movs	r2, #1
1000ef1a:	4b11      	ldr	r3, [pc, #68]	; (1000ef60 <getchar_b11_timeout+0x4c>)
1000ef1c:	701a      	strb	r2, [r3, #0]
	
	if(user_callback_func == NULL)
1000ef1e:	4b11      	ldr	r3, [pc, #68]	; (1000ef64 <getchar_b11_timeout+0x50>)
1000ef20:	681b      	ldr	r3, [r3, #0]
1000ef22:	2b00      	cmp	r3, #0
1000ef24:	d103      	bne.n	1000ef2e <getchar_b11_timeout+0x1a>
		uart_enable_callback(&uart_instance, UART_RX_COMPLETE);
1000ef26:	2102      	movs	r1, #2
1000ef28:	480f      	ldr	r0, [pc, #60]	; (1000ef68 <getchar_b11_timeout+0x54>)
1000ef2a:	4b10      	ldr	r3, [pc, #64]	; (1000ef6c <getchar_b11_timeout+0x58>)
1000ef2c:	4798      	blx	r3

	_time_start(sec);
1000ef2e:	0020      	movs	r0, r4
1000ef30:	4b0f      	ldr	r3, [pc, #60]	; (1000ef70 <getchar_b11_timeout+0x5c>)
1000ef32:	4798      	blx	r3
	
	string_input[0] = 0;
1000ef34:	490f      	ldr	r1, [pc, #60]	; (1000ef74 <getchar_b11_timeout+0x60>)
1000ef36:	2300      	movs	r3, #0
1000ef38:	700b      	strb	r3, [r1, #0]
	uart_read_buffer_job(&uart_instance, string_input, sizeof(string_input));
1000ef3a:	2201      	movs	r2, #1
1000ef3c:	480a      	ldr	r0, [pc, #40]	; (1000ef68 <getchar_b11_timeout+0x54>)
1000ef3e:	4b0e      	ldr	r3, [pc, #56]	; (1000ef78 <getchar_b11_timeout+0x64>)
1000ef40:	4798      	blx	r3
	
	while (read_status != UART_READ_DONE && _time_done() > 0 );
1000ef42:	4c07      	ldr	r4, [pc, #28]	; (1000ef60 <getchar_b11_timeout+0x4c>)
1000ef44:	4d0d      	ldr	r5, [pc, #52]	; (1000ef7c <getchar_b11_timeout+0x68>)
1000ef46:	7823      	ldrb	r3, [r4, #0]
1000ef48:	2b02      	cmp	r3, #2
1000ef4a:	d002      	beq.n	1000ef52 <getchar_b11_timeout+0x3e>
1000ef4c:	47a8      	blx	r5
1000ef4e:	2800      	cmp	r0, #0
1000ef50:	d1f9      	bne.n	1000ef46 <getchar_b11_timeout+0x32>
	
	read_status = UART_READ_NONE;
1000ef52:	2200      	movs	r2, #0
1000ef54:	4b02      	ldr	r3, [pc, #8]	; (1000ef60 <getchar_b11_timeout+0x4c>)
1000ef56:	701a      	strb	r2, [r3, #0]

	return string_input[0];
1000ef58:	4b06      	ldr	r3, [pc, #24]	; (1000ef74 <getchar_b11_timeout+0x60>)
1000ef5a:	7818      	ldrb	r0, [r3, #0]
}
1000ef5c:	bd70      	pop	{r4, r5, r6, pc}
1000ef5e:	46c0      	nop			; (mov r8, r8)
1000ef60:	10019dbc 	.word	0x10019dbc
1000ef64:	10019dc4 	.word	0x10019dc4
1000ef68:	1001aa6c 	.word	0x1001aa6c
1000ef6c:	1000d751 	.word	0x1000d751
1000ef70:	1000eead 	.word	0x1000eead
1000ef74:	10019dc0 	.word	0x10019dc0
1000ef78:	1000d715 	.word	0x1000d715
1000ef7c:	1000ef05 	.word	0x1000ef05

1000ef80 <platform_event_free>:
void platform_event_free(struct platform_event* event);
//struct str_watched_event watched_event;

void platform_event_free(struct platform_event* event)
{
	event->next = platform_event_free_list;
1000ef80:	4b02      	ldr	r3, [pc, #8]	; (1000ef8c <platform_event_free+0xc>)
1000ef82:	681a      	ldr	r2, [r3, #0]
1000ef84:	6002      	str	r2, [r0, #0]
	platform_event_free_list = event;
1000ef86:	6018      	str	r0, [r3, #0]
}
1000ef88:	4770      	bx	lr
1000ef8a:	46c0      	nop			; (mov r8, r8)
1000ef8c:	10019dcc 	.word	0x10019dcc

1000ef90 <platform_event_post>:

void platform_event_post(uint16_t event_type, void * data, uint16_t data_len)
{
1000ef90:	b530      	push	{r4, r5, lr}
	// get a free event object
	struct platform_event* evt = platform_event_free_list;
1000ef92:	4b0b      	ldr	r3, [pc, #44]	; (1000efc0 <platform_event_post+0x30>)
1000ef94:	681c      	ldr	r4, [r3, #0]
	if(evt != NULL)
1000ef96:	2c00      	cmp	r4, #0
1000ef98:	d011      	beq.n	1000efbe <platform_event_post+0x2e>
	{
		platform_event_free_list = evt->next;
1000ef9a:	6825      	ldr	r5, [r4, #0]
1000ef9c:	601d      	str	r5, [r3, #0]
		
		evt->next = NULL;
1000ef9e:	2300      	movs	r3, #0
1000efa0:	6023      	str	r3, [r4, #0]
		evt->data = data;
1000efa2:	60a1      	str	r1, [r4, #8]
		evt->data_len = data_len;
1000efa4:	80e2      	strh	r2, [r4, #6]
		evt->event_type = event_type;
1000efa6:	80a0      	strh	r0, [r4, #4]

		if(platform_event_pending_list == NULL)
1000efa8:	4b06      	ldr	r3, [pc, #24]	; (1000efc4 <platform_event_post+0x34>)
1000efaa:	681a      	ldr	r2, [r3, #0]
1000efac:	2a00      	cmp	r2, #0
1000efae:	d102      	bne.n	1000efb6 <platform_event_post+0x26>
		{
			platform_event_pending_list = evt;
1000efb0:	601c      	str	r4, [r3, #0]
1000efb2:	e004      	b.n	1000efbe <platform_event_post+0x2e>
		else
		{
			struct platform_event* cur = platform_event_pending_list;
			while(cur->next != NULL)
			{
				cur = cur->next;
1000efb4:	001a      	movs	r2, r3
			platform_event_pending_list = evt;
		}
		else
		{
			struct platform_event* cur = platform_event_pending_list;
			while(cur->next != NULL)
1000efb6:	6813      	ldr	r3, [r2, #0]
1000efb8:	2b00      	cmp	r3, #0
1000efba:	d1fb      	bne.n	1000efb4 <platform_event_post+0x24>
			{
				cur = cur->next;
			}
			cur->next = evt;
1000efbc:	6014      	str	r4, [r2, #0]
		}
		
		//platform_event_signal();
	}
	
}
1000efbe:	bd30      	pop	{r4, r5, pc}
1000efc0:	10019dcc 	.word	0x10019dcc
1000efc4:	10019dc8 	.word	0x10019dc8

1000efc8 <platform_event_init>:
	return status;
	
}

void platform_event_init()
{
1000efc8:	b570      	push	{r4, r5, r6, lr}
	uint32_t i;
	platform_event_free_list = NULL;
1000efca:	2300      	movs	r3, #0
1000efcc:	4a06      	ldr	r2, [pc, #24]	; (1000efe8 <platform_event_init+0x20>)
1000efce:	6013      	str	r3, [r2, #0]
	platform_event_pending_list = NULL;
1000efd0:	4a06      	ldr	r2, [pc, #24]	; (1000efec <platform_event_init+0x24>)
1000efd2:	6013      	str	r3, [r2, #0]
1000efd4:	4c06      	ldr	r4, [pc, #24]	; (1000eff0 <platform_event_init+0x28>)
1000efd6:	0026      	movs	r6, r4
1000efd8:	3678      	adds	r6, #120	; 0x78
	//memset(&watched_event,0,sizeof(struct str_watched_event));
	for(i = 0; i < PLATFORM_EVENT_POOL_DEPTH; i++)
	{
		platform_event_free(&platform_event_pool[i]);
1000efda:	4d06      	ldr	r5, [pc, #24]	; (1000eff4 <platform_event_init+0x2c>)
1000efdc:	0020      	movs	r0, r4
1000efde:	47a8      	blx	r5
1000efe0:	340c      	adds	r4, #12
{
	uint32_t i;
	platform_event_free_list = NULL;
	platform_event_pending_list = NULL;
	//memset(&watched_event,0,sizeof(struct str_watched_event));
	for(i = 0; i < PLATFORM_EVENT_POOL_DEPTH; i++)
1000efe2:	42b4      	cmp	r4, r6
1000efe4:	d1fa      	bne.n	1000efdc <platform_event_init+0x14>
	{
		platform_event_free(&platform_event_pool[i]);
	}
}
1000efe6:	bd70      	pop	{r4, r5, r6, pc}
1000efe8:	10019dcc 	.word	0x10019dcc
1000efec:	10019dc8 	.word	0x10019dc8
1000eff0:	10019dd0 	.word	0x10019dd0
1000eff4:	1000ef81 	.word	0x1000ef81

1000eff8 <at_ke_msg_send>:
	}
	return status;
}

static void at_ke_msg_send(void const * param_ptr)
{
1000eff8:	b570      	push	{r4, r5, r6, lr}
1000effa:	0004      	movs	r4, r0
	struct ke_msg *kemsg;
	uint8_t osc_en = REG_PL_RD(0x4000B1EC)&0x01;
1000effc:	4b13      	ldr	r3, [pc, #76]	; (1000f04c <at_ke_msg_send+0x54>)
1000effe:	681d      	ldr	r5, [r3, #0]
	ke_msg_send(param_ptr);
1000f000:	4b13      	ldr	r3, [pc, #76]	; (1000f050 <at_ke_msg_send+0x58>)
1000f002:	681b      	ldr	r3, [r3, #0]
1000f004:	4798      	blx	r3
	kemsg = ke_param2msg(param_ptr);

	if((kemsg != NULL) && (kemsg->dest_id != TASK_INTERNAL_APP)) {
1000f006:	2c0c      	cmp	r4, #12
1000f008:	d01f      	beq.n	1000f04a <at_ke_msg_send+0x52>
1000f00a:	3c0c      	subs	r4, #12
1000f00c:	88e3      	ldrh	r3, [r4, #6]
1000f00e:	2b05      	cmp	r3, #5
1000f010:	d01b      	beq.n	1000f04a <at_ke_msg_send+0x52>
		if(osc_en == 0)
1000f012:	07eb      	lsls	r3, r5, #31
1000f014:	d414      	bmi.n	1000f040 <at_ke_msg_send+0x48>
		{
			/* BLE Core is off, issue a wakeup request*/
			/* First, make sure PD4 is powered up and out of reset */
			pwr_enable_arm_wakeup(1<<1);
1000f016:	4b0f      	ldr	r3, [pc, #60]	; (1000f054 <at_ke_msg_send+0x5c>)
1000f018:	681b      	ldr	r3, [r3, #0]
1000f01a:	2002      	movs	r0, #2
1000f01c:	4798      	blx	r3
			pwr_arm_wakeup_req();
1000f01e:	4b0e      	ldr	r3, [pc, #56]	; (1000f058 <at_ke_msg_send+0x60>)
1000f020:	681b      	ldr	r3, [r3, #0]
1000f022:	4798      	blx	r3
			while (pwr_wait_BLE_out_of_reset(3));
1000f024:	4c0d      	ldr	r4, [pc, #52]	; (1000f05c <at_ke_msg_send+0x64>)
1000f026:	2003      	movs	r0, #3
1000f028:	6823      	ldr	r3, [r4, #0]
1000f02a:	4798      	blx	r3
1000f02c:	2800      	cmp	r0, #0
1000f02e:	d1fa      	bne.n	1000f026 <at_ke_msg_send+0x2e>
			pwr_disable_arm_wakeup(1<<1);
1000f030:	4b0b      	ldr	r3, [pc, #44]	; (1000f060 <at_ke_msg_send+0x68>)
1000f032:	681b      	ldr	r3, [r3, #0]
1000f034:	3002      	adds	r0, #2
1000f036:	4798      	blx	r3
			REG_PL_WR(0x4000B020, 1);
1000f038:	2201      	movs	r2, #1
1000f03a:	4b0a      	ldr	r3, [pc, #40]	; (1000f064 <at_ke_msg_send+0x6c>)
1000f03c:	601a      	str	r2, [r3, #0]
1000f03e:	e004      	b.n	1000f04a <at_ke_msg_send+0x52>
#endif	//CHIPVERSION_B0
		}
		else
		{
			/*  */
			os_sem_up(gstrFwSem);
1000f040:	4b09      	ldr	r3, [pc, #36]	; (1000f068 <at_ke_msg_send+0x70>)
1000f042:	6818      	ldr	r0, [r3, #0]
1000f044:	4b09      	ldr	r3, [pc, #36]	; (1000f06c <at_ke_msg_send+0x74>)
1000f046:	681b      	ldr	r3, [r3, #0]
1000f048:	4798      	blx	r3
		}
	}
}
1000f04a:	bd70      	pop	{r4, r5, r6, pc}
1000f04c:	4000b1ec 	.word	0x4000b1ec
1000f050:	10019e78 	.word	0x10019e78
1000f054:	10019e70 	.word	0x10019e70
1000f058:	10019e84 	.word	0x10019e84
1000f05c:	10019e58 	.word	0x10019e58
1000f060:	10019e60 	.word	0x10019e60
1000f064:	4000b020 	.word	0x4000b020
1000f068:	10019e64 	.word	0x10019e64
1000f06c:	10019e54 	.word	0x10019e54

1000f070 <samb11_plf_resume_callback>:
	rwip_prevent_sleep_clear(APP_PREVENT_SLEEP);
	return status;
}

void samb11_plf_resume_callback(void)
{
1000f070:	b510      	push	{r4, lr}
	//spi_flash_turn_off();
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0,default_samb11_clock_init[0]);
1000f072:	4b06      	ldr	r3, [pc, #24]	; (1000f08c <samb11_plf_resume_callback+0x1c>)
1000f074:	4a06      	ldr	r2, [pc, #24]	; (1000f090 <samb11_plf_resume_callback+0x20>)
1000f076:	6819      	ldr	r1, [r3, #0]
1000f078:	6011      	str	r1, [r2, #0]
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1,default_samb11_clock_init[1]);
1000f07a:	685a      	ldr	r2, [r3, #4]
1000f07c:	4b05      	ldr	r3, [pc, #20]	; (1000f094 <samb11_plf_resume_callback+0x24>)
1000f07e:	601a      	str	r2, [r3, #0]
	if(samb11_app_resume_cb != NULL)
1000f080:	4b05      	ldr	r3, [pc, #20]	; (1000f098 <samb11_plf_resume_callback+0x28>)
1000f082:	681b      	ldr	r3, [r3, #0]
1000f084:	2b00      	cmp	r3, #0
1000f086:	d000      	beq.n	1000f08a <samb11_plf_resume_callback+0x1a>
	{
		samb11_app_resume_cb();
1000f088:	4798      	blx	r3
	}
}
1000f08a:	bd10      	pop	{r4, pc}
1000f08c:	1001aab8 	.word	0x1001aab8
1000f090:	4000b00c 	.word	0x4000b00c
1000f094:	4000b010 	.word	0x4000b010
1000f098:	1001ad94 	.word	0x1001ad94

1000f09c <init_port_list>:
port port_list[LPGPIO_MAX];
uint32_t default_samb11_clock_init[2];
void samb11_plf_resume_callback(void);

void init_port_list(void)
{
1000f09c:	b570      	push	{r4, r5, r6, lr}
	uint8_t i;
	memset(port_list,0,sizeof(port_list));
1000f09e:	2232      	movs	r2, #50	; 0x32
1000f0a0:	2100      	movs	r1, #0
1000f0a2:	480d      	ldr	r0, [pc, #52]	; (1000f0d8 <init_port_list+0x3c>)
1000f0a4:	4b0d      	ldr	r3, [pc, #52]	; (1000f0dc <init_port_list+0x40>)
1000f0a6:	4798      	blx	r3
1000f0a8:	2100      	movs	r1, #0
	for(i=0;i<(sizeof(port_list)/sizeof(port_list[0]));i++) {
		port_list[i].bit.gpio_num = i;
1000f0aa:	480b      	ldr	r0, [pc, #44]	; (1000f0d8 <init_port_list+0x3c>)
		port_list[i].bit.available = 1;
1000f0ac:	2501      	movs	r5, #1
		port_list[i].bit.configured = 0;
1000f0ae:	2402      	movs	r4, #2
void init_port_list(void)
{
	uint8_t i;
	memset(port_list,0,sizeof(port_list));
	for(i=0;i<(sizeof(port_list)/sizeof(port_list[0]));i++) {
		port_list[i].bit.gpio_num = i;
1000f0b0:	004a      	lsls	r2, r1, #1
1000f0b2:	5411      	strb	r1, [r2, r0]
		port_list[i].bit.available = 1;
1000f0b4:	1882      	adds	r2, r0, r2
1000f0b6:	7853      	ldrb	r3, [r2, #1]
1000f0b8:	432b      	orrs	r3, r5
		port_list[i].bit.configured = 0;
1000f0ba:	b2db      	uxtb	r3, r3
1000f0bc:	43a3      	bics	r3, r4
1000f0be:	7053      	strb	r3, [r2, #1]
1000f0c0:	3101      	adds	r1, #1

void init_port_list(void)
{
	uint8_t i;
	memset(port_list,0,sizeof(port_list));
	for(i=0;i<(sizeof(port_list)/sizeof(port_list[0]));i++) {
1000f0c2:	2919      	cmp	r1, #25
1000f0c4:	d1f4      	bne.n	1000f0b0 <init_port_list+0x14>
		port_list[i].bit.gpio_num = i;
		port_list[i].bit.available = 1;
		port_list[i].bit.configured = 0;
	}
	//Set the GPIO for SWD is not available
	port_list[0].bit.available = 0;
1000f0c6:	4b04      	ldr	r3, [pc, #16]	; (1000f0d8 <init_port_list+0x3c>)
1000f0c8:	785a      	ldrb	r2, [r3, #1]
1000f0ca:	3918      	subs	r1, #24
1000f0cc:	438a      	bics	r2, r1
1000f0ce:	705a      	strb	r2, [r3, #1]
	port_list[1].bit.available = 0;
1000f0d0:	78da      	ldrb	r2, [r3, #3]
1000f0d2:	438a      	bics	r2, r1
1000f0d4:	70da      	strb	r2, [r3, #3]
	//GPIO 14 is used for Coex and controlled by Firmware
	//port_list[14].bit.available = 0;
}
1000f0d6:	bd70      	pop	{r4, r5, r6, pc}
1000f0d8:	1001aad4 	.word	0x1001aad4
1000f0dc:	10015191 	.word	0x10015191

1000f0e0 <init_clock>:

void init_clock(void)
{
	uint32_t regval;
	regval = REG_PL_RD(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0);
1000f0e0:	4a06      	ldr	r2, [pc, #24]	; (1000f0fc <init_clock+0x1c>)
1000f0e2:	6811      	ldr	r1, [r2, #0]
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WATCHDOG_1_CLK_EN);
	//disable UART core & interface clocks
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_CORE_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_IF_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_1_CORE_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_1_IF_CLK_EN);
1000f0e4:	4b06      	ldr	r3, [pc, #24]	; (1000f100 <init_clock+0x20>)
1000f0e6:	400b      	ands	r3, r1
	//disable I2C core 1 clocks
	//regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CORTUS_I2C1_CORE_CLK_EN);		//do not disable I2C because I2C driver in ASF will not enable.
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0,regval);
1000f0e8:	6013      	str	r3, [r2, #0]
	default_samb11_clock_init[0] = regval;
1000f0ea:	4a06      	ldr	r2, [pc, #24]	; (1000f104 <init_clock+0x24>)
1000f0ec:	6013      	str	r3, [r2, #0]
	
	regval = REG_PL_RD(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1);
1000f0ee:	4906      	ldr	r1, [pc, #24]	; (1000f108 <init_clock+0x28>)
1000f0f0:	6808      	ldr	r0, [r1, #0]
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_4_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_5_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_6_CLK_EN);
	//disable SPI SCK Phase int clock 
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI0_SCK_PHASE_INT_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI1_SCK_PHASE_INT_CLK_EN);
1000f0f2:	4b06      	ldr	r3, [pc, #24]	; (1000f10c <init_clock+0x2c>)
1000f0f4:	4003      	ands	r3, r0
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1,regval);
1000f0f6:	600b      	str	r3, [r1, #0]
	default_samb11_clock_init[1] = regval;
1000f0f8:	6053      	str	r3, [r2, #4]
	//ARM debugger
	
	//store default values
}
1000f0fa:	4770      	bx	lr
1000f0fc:	4000b00c 	.word	0x4000b00c
1000f100:	fffe0fd3 	.word	0xfffe0fd3
1000f104:	1001aab8 	.word	0x1001aab8
1000f108:	4000b010 	.word	0x4000b010
1000f10c:	ffffe7c0 	.word	0xffffe7c0

1000f110 <platform_driver_init>:

plf_drv_status platform_driver_init()
{
1000f110:	b5f0      	push	{r4, r5, r6, r7, lr}
1000f112:	4657      	mov	r7, sl
1000f114:	464e      	mov	r6, r9
1000f116:	4645      	mov	r5, r8
1000f118:	b4e0      	push	{r5, r6, r7}
	plf_drv_status status = STATUS_NOT_INITIALIZED;
	if((platform_initialized == 0) || (platform_initialized != 1)) {
1000f11a:	4b4f      	ldr	r3, [pc, #316]	; (1000f258 <platform_driver_init+0x148>)
1000f11c:	781b      	ldrb	r3, [r3, #0]
1000f11e:	2b00      	cmp	r3, #0
1000f120:	d004      	beq.n	1000f12c <platform_driver_init+0x1c>
1000f122:	4b4d      	ldr	r3, [pc, #308]	; (1000f258 <platform_driver_init+0x148>)
1000f124:	781b      	ldrb	r3, [r3, #0]
1000f126:	2b01      	cmp	r3, #1
1000f128:	d100      	bne.n	1000f12c <platform_driver_init+0x1c>
1000f12a:	e08c      	b.n	1000f246 <platform_driver_init+0x136>
		init_port_list();
1000f12c:	4b4b      	ldr	r3, [pc, #300]	; (1000f25c <platform_driver_init+0x14c>)
1000f12e:	4798      	blx	r3
		init_clock();
1000f130:	4b4b      	ldr	r3, [pc, #300]	; (1000f260 <platform_driver_init+0x150>)
1000f132:	4798      	blx	r3
		// Initialize the ble stack message handler to NULL
		ble_stack_message_handler = NULL;
1000f134:	2300      	movs	r3, #0
1000f136:	4698      	mov	r8, r3
1000f138:	4b4a      	ldr	r3, [pc, #296]	; (1000f264 <platform_driver_init+0x154>)
1000f13a:	4642      	mov	r2, r8
1000f13c:	601a      	str	r2, [r3, #0]

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000f13e:	4c4a      	ldr	r4, [pc, #296]	; (1000f268 <platform_driver_init+0x158>)
1000f140:	2380      	movs	r3, #128	; 0x80
1000f142:	2280      	movs	r2, #128	; 0x80
1000f144:	0412      	lsls	r2, r2, #16
1000f146:	4692      	mov	sl, r2
1000f148:	50e2      	str	r2, [r4, r3]
1000f14a:	2280      	movs	r2, #128	; 0x80
1000f14c:	0452      	lsls	r2, r2, #17
1000f14e:	4691      	mov	r9, r2
1000f150:	50e2      	str	r2, [r4, r3]
#ifdef CHIPVERSION_B0
		NVIC_DisableIRQ(GPIO0_IRQn);
		NVIC_DisableIRQ(GPIO1_IRQn);
		/* NVIC_DisableIRQ(PORT0_COMB_IRQn); */
		/* NVIC_DisableIRQ(PORT1_COMB_IRQn); */
		platform_register_isr = (uint8_t (*)(uint8_t ,void *))0x000007d7;
1000f152:	4d46      	ldr	r5, [pc, #280]	; (1000f26c <platform_driver_init+0x15c>)
1000f154:	4b46      	ldr	r3, [pc, #280]	; (1000f270 <platform_driver_init+0x160>)
1000f156:	602b      	str	r3, [r5, #0]
		platform_unregister_isr = (uint8_t (*)(uint8_t ))0x000007bd;
1000f158:	4b46      	ldr	r3, [pc, #280]	; (1000f274 <platform_driver_init+0x164>)
1000f15a:	4a47      	ldr	r2, [pc, #284]	; (1000f278 <platform_driver_init+0x168>)
1000f15c:	6013      	str	r3, [r2, #0]
		handle_ext_wakeup_isr = (void (*)(void))0x1bc51;
1000f15e:	4947      	ldr	r1, [pc, #284]	; (1000f27c <platform_driver_init+0x16c>)
1000f160:	4a47      	ldr	r2, [pc, #284]	; (1000f280 <platform_driver_init+0x170>)
1000f162:	6011      	str	r1, [r2, #0]
		gapm_get_task_from_id = (ke_task_id_t (*)(ke_msg_id_t))(*((unsigned int *)0x100400bc));
1000f164:	4a47      	ldr	r2, [pc, #284]	; (1000f284 <platform_driver_init+0x174>)
1000f166:	6811      	ldr	r1, [r2, #0]
1000f168:	4a47      	ldr	r2, [pc, #284]	; (1000f288 <platform_driver_init+0x178>)
1000f16a:	6011      	str	r1, [r2, #0]
		gapm_get_id_from_task = (ke_task_id_t (*)(ke_msg_id_t))(*((unsigned int *)0x100400b8));
1000f16c:	4a47      	ldr	r2, [pc, #284]	; (1000f28c <platform_driver_init+0x17c>)
1000f16e:	6811      	ldr	r1, [r2, #0]
1000f170:	4a47      	ldr	r2, [pc, #284]	; (1000f290 <platform_driver_init+0x180>)
1000f172:	6011      	str	r1, [r2, #0]
		rwip_prevent_sleep_set = (void (*)(uint16_t))0x0001b99f;
1000f174:	4947      	ldr	r1, [pc, #284]	; (1000f294 <platform_driver_init+0x184>)
1000f176:	4a48      	ldr	r2, [pc, #288]	; (1000f298 <platform_driver_init+0x188>)
1000f178:	6011      	str	r1, [r2, #0]
		rwip_prevent_sleep_clear = (void (*)(uint16_t))0x0001b9db;
1000f17a:	4948      	ldr	r1, [pc, #288]	; (1000f29c <platform_driver_init+0x18c>)
1000f17c:	4a48      	ldr	r2, [pc, #288]	; (1000f2a0 <platform_driver_init+0x190>)
1000f17e:	6011      	str	r1, [r2, #0]
		apps_resume_cb = (uint32_t *)0x1004003c;
1000f180:	4f48      	ldr	r7, [pc, #288]	; (1000f2a4 <platform_driver_init+0x194>)
1000f182:	4a49      	ldr	r2, [pc, #292]	; (1000f2a8 <platform_driver_init+0x198>)
1000f184:	603a      	str	r2, [r7, #0]
		actualfreq = (uint32_t *)0x10041FC0; /* set to NULL for now as clock calibration is disabled for the time being */  /*(uint32_t *)0x10006bd8;*/
1000f186:	4949      	ldr	r1, [pc, #292]	; (1000f2ac <platform_driver_init+0x19c>)
1000f188:	4a49      	ldr	r2, [pc, #292]	; (1000f2b0 <platform_driver_init+0x1a0>)
1000f18a:	6011      	str	r1, [r2, #0]
		updateuartbr_fp = (void (*)())0x10041FC4;
1000f18c:	4949      	ldr	r1, [pc, #292]	; (1000f2b4 <platform_driver_init+0x1a4>)
1000f18e:	4a4a      	ldr	r2, [pc, #296]	; (1000f2b8 <platform_driver_init+0x1a8>)
1000f190:	6011      	str	r1, [r2, #0]
		wakeup_source_active_cb = (uint32_t *)0x10041FD4;
1000f192:	4e4a      	ldr	r6, [pc, #296]	; (1000f2bc <platform_driver_init+0x1ac>)
1000f194:	4a4a      	ldr	r2, [pc, #296]	; (1000f2c0 <platform_driver_init+0x1b0>)
1000f196:	6032      	str	r2, [r6, #0]
		wakeup_event_pending = (uint32_t *)0x10041FD8;
1000f198:	494a      	ldr	r1, [pc, #296]	; (1000f2c4 <platform_driver_init+0x1b4>)
1000f19a:	4a4b      	ldr	r2, [pc, #300]	; (1000f2c8 <platform_driver_init+0x1b8>)
1000f19c:	6011      	str	r1, [r2, #0]
		/* power APIs */
		pwr_enable_arm_wakeup = (void (*)(uint32_t wakeup_domain))0x0001cbe9;
1000f19e:	494b      	ldr	r1, [pc, #300]	; (1000f2cc <platform_driver_init+0x1bc>)
1000f1a0:	4a4b      	ldr	r2, [pc, #300]	; (1000f2d0 <platform_driver_init+0x1c0>)
1000f1a2:	6011      	str	r1, [r2, #0]
		pwr_disable_arm_wakeup = (void (*)(uint32_t wakeup_domain))0x0001cd8f;
1000f1a4:	494b      	ldr	r1, [pc, #300]	; (1000f2d4 <platform_driver_init+0x1c4>)
1000f1a6:	4a4c      	ldr	r2, [pc, #304]	; (1000f2d8 <platform_driver_init+0x1c8>)
1000f1a8:	6011      	str	r1, [r2, #0]
		pwr_arm_wakeup_req = (int (*)(void))0x0001cea3;
1000f1aa:	494c      	ldr	r1, [pc, #304]	; (1000f2dc <platform_driver_init+0x1cc>)
1000f1ac:	4a4c      	ldr	r2, [pc, #304]	; (1000f2e0 <platform_driver_init+0x1d0>)
1000f1ae:	6011      	str	r1, [r2, #0]
		pwr_wait_BLE_out_of_reset = (int (*)(uint32_t threshold))0x0001cbcf;
1000f1b0:	494c      	ldr	r1, [pc, #304]	; (1000f2e4 <platform_driver_init+0x1d4>)
1000f1b2:	4a4d      	ldr	r2, [pc, #308]	; (1000f2e8 <platform_driver_init+0x1d8>)
1000f1b4:	6011      	str	r1, [r2, #0]
		NVIC_DisableIRQ(PORT1_ALL_IRQn);
		platform_register_isr = register_isr;
		platform_unregister_isr = unregister_isr;
		handle_ext_wakeup_isr = (void (*)(void))0x14085;
#endif
		platform_unregister_isr(GPIO1_COMBINED_VECTOR_TABLE_INDEX);
1000f1b6:	2028      	movs	r0, #40	; 0x28
1000f1b8:	4798      	blx	r3
		platform_register_isr(GPIO1_COMBINED_VECTOR_TABLE_INDEX,(void*)PORT1_COMB_Handler);
1000f1ba:	494c      	ldr	r1, [pc, #304]	; (1000f2ec <platform_driver_init+0x1dc>)
1000f1bc:	2028      	movs	r0, #40	; 0x28
1000f1be:	682b      	ldr	r3, [r5, #0]
1000f1c0:	4798      	blx	r3
		platform_register_isr(GPIO0_COMBINED_VECTOR_TABLE_INDEX,(void*)gpio0_combined_isr_handler);
1000f1c2:	682b      	ldr	r3, [r5, #0]
1000f1c4:	494a      	ldr	r1, [pc, #296]	; (1000f2f0 <platform_driver_init+0x1e0>)
1000f1c6:	2027      	movs	r0, #39	; 0x27
1000f1c8:	4798      	blx	r3
		//gstrFwSem               = (void *)0x100004e4;
		//NMI_MsgQueueRecv = (int (*)(void *, void ** )) 0x00017f67;
		//InternalAppMsgQHandle = (void *)0x10001158;
		//ke_free = (void (*)(void *)) 0x00015e3d;
#elif CHIPVERSION_B0
		ke_msg_send 	= (void (*)(void const *))(*((unsigned int *)0x100400e4));
1000f1ca:	4b4a      	ldr	r3, [pc, #296]	; (1000f2f4 <platform_driver_init+0x1e4>)
1000f1cc:	681a      	ldr	r2, [r3, #0]
1000f1ce:	4b4a      	ldr	r3, [pc, #296]	; (1000f2f8 <platform_driver_init+0x1e8>)
1000f1d0:	601a      	str	r2, [r3, #0]
		ke_msg_alloc 	= (void* (*)(ke_msg_id_t const id, ke_task_id_t const dest_id,
1000f1d2:	4a4a      	ldr	r2, [pc, #296]	; (1000f2fc <platform_driver_init+0x1ec>)
1000f1d4:	4b4a      	ldr	r3, [pc, #296]	; (1000f300 <platform_driver_init+0x1f0>)
1000f1d6:	601a      	str	r2, [r3, #0]
										ke_task_id_t const src_id, uint16_t const param_len) )0x00019fe9;
		os_sem_up 		= (int (*)(void*))0x0001dbdd;
1000f1d8:	4a4a      	ldr	r2, [pc, #296]	; (1000f304 <platform_driver_init+0x1f4>)
1000f1da:	4b4b      	ldr	r3, [pc, #300]	; (1000f308 <platform_driver_init+0x1f8>)
1000f1dc:	601a      	str	r2, [r3, #0]
		os_sem_down		= (int (*)(void*))0x0001dc5b;
1000f1de:	4a4b      	ldr	r2, [pc, #300]	; (1000f30c <platform_driver_init+0x1fc>)
1000f1e0:	4b4b      	ldr	r3, [pc, #300]	; (1000f310 <platform_driver_init+0x200>)
1000f1e2:	601a      	str	r2, [r3, #0]
		gstrFwSem 		= (void*)0x100405ec;
1000f1e4:	4a4b      	ldr	r2, [pc, #300]	; (1000f314 <platform_driver_init+0x204>)
1000f1e6:	4b4c      	ldr	r3, [pc, #304]	; (1000f318 <platform_driver_init+0x208>)
1000f1e8:	601a      	str	r2, [r3, #0]
		NMI_MsgQueueRecv = (int(*)(void*, void ** ))0x0001d5e3;
1000f1ea:	4a4c      	ldr	r2, [pc, #304]	; (1000f31c <platform_driver_init+0x20c>)
1000f1ec:	4b4c      	ldr	r3, [pc, #304]	; (1000f320 <platform_driver_init+0x210>)
1000f1ee:	601a      	str	r2, [r3, #0]
		InternalAppMsgQHandle = (void*)0x10040c20;
1000f1f0:	4a4c      	ldr	r2, [pc, #304]	; (1000f324 <platform_driver_init+0x214>)
1000f1f2:	4b4d      	ldr	r3, [pc, #308]	; (1000f328 <platform_driver_init+0x218>)
1000f1f4:	601a      	str	r2, [r3, #0]
		ke_free = (void(*)(void*))0x00019f09;
1000f1f6:	4a4d      	ldr	r2, [pc, #308]	; (1000f32c <platform_driver_init+0x21c>)
1000f1f8:	4b4d      	ldr	r3, [pc, #308]	; (1000f330 <platform_driver_init+0x220>)
1000f1fa:	601a      	str	r2, [r3, #0]
#endif
		memset(rx_buffer,0,sizeof(rx_buffer));
1000f1fc:	22a0      	movs	r2, #160	; 0xa0
1000f1fe:	0092      	lsls	r2, r2, #2
1000f200:	2100      	movs	r1, #0
1000f202:	484c      	ldr	r0, [pc, #304]	; (1000f334 <platform_driver_init+0x224>)
1000f204:	4b4c      	ldr	r3, [pc, #304]	; (1000f338 <platform_driver_init+0x228>)
1000f206:	4798      	blx	r3
		plf_event_buff_index = PLF_EVENT_BUFFER_START_INDEX;
1000f208:	2280      	movs	r2, #128	; 0x80
1000f20a:	0092      	lsls	r2, r2, #2
1000f20c:	4b4b      	ldr	r3, [pc, #300]	; (1000f33c <platform_driver_init+0x22c>)
1000f20e:	801a      	strh	r2, [r3, #0]
		platform_event_init();
1000f210:	4b4b      	ldr	r3, [pc, #300]	; (1000f340 <platform_driver_init+0x230>)
1000f212:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000f214:	4653      	mov	r3, sl
1000f216:	6023      	str	r3, [r4, #0]
1000f218:	464b      	mov	r3, r9
1000f21a:	6023      	str	r3, [r4, #0]
		
#ifndef CHIPVERSION_B0		
		// spi_flash clock fix.
		spi_flash_clock_init();
#endif
		samb11_app_resume_cb = NULL;
1000f21c:	4b49      	ldr	r3, [pc, #292]	; (1000f344 <platform_driver_init+0x234>)
1000f21e:	4642      	mov	r2, r8
1000f220:	601a      	str	r2, [r3, #0]
		*apps_resume_cb = (uint32_t)((resume_callback)samb11_plf_resume_callback);
1000f222:	683b      	ldr	r3, [r7, #0]
1000f224:	4a48      	ldr	r2, [pc, #288]	; (1000f348 <platform_driver_init+0x238>)
1000f226:	601a      	str	r2, [r3, #0]
		*wakeup_source_active_cb = (uint32_t)((wakeup_source_active_callback)wakeup_active_event_callback);
1000f228:	6833      	ldr	r3, [r6, #0]
1000f22a:	4a48      	ldr	r2, [pc, #288]	; (1000f34c <platform_driver_init+0x23c>)
1000f22c:	601a      	str	r2, [r3, #0]
		wakeup_int_unregister_callback(0);
1000f22e:	2000      	movs	r0, #0
1000f230:	4c47      	ldr	r4, [pc, #284]	; (1000f350 <platform_driver_init+0x240>)
1000f232:	47a0      	blx	r4
		wakeup_int_unregister_callback(1);
1000f234:	2001      	movs	r0, #1
1000f236:	47a0      	blx	r4
		wakeup_int_unregister_callback(2);
1000f238:	2002      	movs	r0, #2
1000f23a:	47a0      	blx	r4
		platform_initialized = 1;
1000f23c:	2201      	movs	r2, #1
1000f23e:	4b06      	ldr	r3, [pc, #24]	; (1000f258 <platform_driver_init+0x148>)
1000f240:	701a      	strb	r2, [r3, #0]
		status = STATUS_SUCCESS;
1000f242:	2000      	movs	r0, #0
1000f244:	e003      	b.n	1000f24e <platform_driver_init+0x13e>
	}
	else {
		platform_initialized = 1;
1000f246:	2201      	movs	r2, #1
1000f248:	4b03      	ldr	r3, [pc, #12]	; (1000f258 <platform_driver_init+0x148>)
1000f24a:	701a      	strb	r2, [r3, #0]
		status = STATUS_ALREADY_INITIALIZED;
1000f24c:	2001      	movs	r0, #1
	}
	return status;
}
1000f24e:	bc1c      	pop	{r2, r3, r4}
1000f250:	4690      	mov	r8, r2
1000f252:	4699      	mov	r9, r3
1000f254:	46a2      	mov	sl, r4
1000f256:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000f258:	10019e5c 	.word	0x10019e5c
1000f25c:	1000f09d 	.word	0x1000f09d
1000f260:	1000f0e1 	.word	0x1000f0e1
1000f264:	10019e7c 	.word	0x10019e7c
1000f268:	e000e100 	.word	0xe000e100
1000f26c:	1001ad88 	.word	0x1001ad88
1000f270:	000007d7 	.word	0x000007d7
1000f274:	000007bd 	.word	0x000007bd
1000f278:	1001aac4 	.word	0x1001aac4
1000f27c:	0001bc51 	.word	0x0001bc51
1000f280:	1001ad8c 	.word	0x1001ad8c
1000f284:	100400bc 	.word	0x100400bc
1000f288:	10019e50 	.word	0x10019e50
1000f28c:	100400b8 	.word	0x100400b8
1000f290:	10019e4c 	.word	0x10019e4c
1000f294:	0001b99f 	.word	0x0001b99f
1000f298:	1001aac0 	.word	0x1001aac0
1000f29c:	0001b9db 	.word	0x0001b9db
1000f2a0:	1001aacc 	.word	0x1001aacc
1000f2a4:	1001ad9c 	.word	0x1001ad9c
1000f2a8:	1004003c 	.word	0x1004003c
1000f2ac:	10041fc0 	.word	0x10041fc0
1000f2b0:	1001aad0 	.word	0x1001aad0
1000f2b4:	10041fc4 	.word	0x10041fc4
1000f2b8:	1001ad98 	.word	0x1001ad98
1000f2bc:	1001ad90 	.word	0x1001ad90
1000f2c0:	10041fd4 	.word	0x10041fd4
1000f2c4:	10041fd8 	.word	0x10041fd8
1000f2c8:	1001aac8 	.word	0x1001aac8
1000f2cc:	0001cbe9 	.word	0x0001cbe9
1000f2d0:	10019e70 	.word	0x10019e70
1000f2d4:	0001cd8f 	.word	0x0001cd8f
1000f2d8:	10019e60 	.word	0x10019e60
1000f2dc:	0001cea3 	.word	0x0001cea3
1000f2e0:	10019e84 	.word	0x10019e84
1000f2e4:	0001cbcf 	.word	0x0001cbcf
1000f2e8:	10019e58 	.word	0x10019e58
1000f2ec:	1000f799 	.word	0x1000f799
1000f2f0:	1000f72d 	.word	0x1000f72d
1000f2f4:	100400e4 	.word	0x100400e4
1000f2f8:	10019e78 	.word	0x10019e78
1000f2fc:	00019fe9 	.word	0x00019fe9
1000f300:	10019e88 	.word	0x10019e88
1000f304:	0001dbdd 	.word	0x0001dbdd
1000f308:	10019e54 	.word	0x10019e54
1000f30c:	0001dc5b 	.word	0x0001dc5b
1000f310:	10019e68 	.word	0x10019e68
1000f314:	100405ec 	.word	0x100405ec
1000f318:	10019e64 	.word	0x10019e64
1000f31c:	0001d5e3 	.word	0x0001d5e3
1000f320:	10019e74 	.word	0x10019e74
1000f324:	10040c20 	.word	0x10040c20
1000f328:	10019e8c 	.word	0x10019e8c
1000f32c:	00019f09 	.word	0x00019f09
1000f330:	10019e48 	.word	0x10019e48
1000f334:	1001ab08 	.word	0x1001ab08
1000f338:	10015191 	.word	0x10015191
1000f33c:	1001ada0 	.word	0x1001ada0
1000f340:	1000efc9 	.word	0x1000efc9
1000f344:	1001ad94 	.word	0x1001ad94
1000f348:	1000f071 	.word	0x1000f071
1000f34c:	1000f7f5 	.word	0x1000f7f5
1000f350:	1000f7dd 	.word	0x1000f7dd

1000f354 <platform_register_ble_msg_handler>:


plf_drv_status platform_register_ble_msg_handler(platform_interface_callback fp)
{
	plf_drv_status status;
	if(platform_initialized == 1) {
1000f354:	4b04      	ldr	r3, [pc, #16]	; (1000f368 <platform_register_ble_msg_handler+0x14>)
1000f356:	781a      	ldrb	r2, [r3, #0]
		ble_stack_message_handler = fp;
		status = STATUS_SUCCESS;
	}
	else {
		status = STATUS_NOT_INITIALIZED;
1000f358:	2305      	movs	r3, #5


plf_drv_status platform_register_ble_msg_handler(platform_interface_callback fp)
{
	plf_drv_status status;
	if(platform_initialized == 1) {
1000f35a:	2a01      	cmp	r2, #1
1000f35c:	d102      	bne.n	1000f364 <platform_register_ble_msg_handler+0x10>
		ble_stack_message_handler = fp;
1000f35e:	4b03      	ldr	r3, [pc, #12]	; (1000f36c <platform_register_ble_msg_handler+0x18>)
1000f360:	6018      	str	r0, [r3, #0]
		status = STATUS_SUCCESS;
1000f362:	2300      	movs	r3, #0
	}
	else {
		status = STATUS_NOT_INITIALIZED;
	}
	return status;
}
1000f364:	0018      	movs	r0, r3
1000f366:	4770      	bx	lr
1000f368:	10019e5c 	.word	0x10019e5c
1000f36c:	10019e7c 	.word	0x10019e7c

1000f370 <platform_interface_send>:


//Sends a message through RW kernel messaging API
//struct ke_msg * p_msg;
void platform_interface_send(uint8_t* data, uint32_t len)
{
1000f370:	b570      	push	{r4, r5, r6, lr}
1000f372:	0004      	movs	r4, r0
	void* params;
	
	#if (CHIPVERSION_B0)
	ke_task_id_t dest_id;
	dest_id = p_msg_hdr->dest_id;
	if(gapm_get_task_from_id != NULL)
1000f374:	4b0e      	ldr	r3, [pc, #56]	; (1000f3b0 <platform_interface_send+0x40>)
1000f376:	681b      	ldr	r3, [r3, #0]
1000f378:	2b00      	cmp	r3, #0
1000f37a:	d002      	beq.n	1000f382 <platform_interface_send+0x12>
		p_msg_hdr->dest_id = gapm_get_task_from_id(dest_id);
1000f37c:	8840      	ldrh	r0, [r0, #2]
1000f37e:	4798      	blx	r3
1000f380:	8060      	strh	r0, [r4, #2]
	#endif	//CHIPVERSION_B0
	// Allocate the kernel message
	params = ke_msg_alloc(p_msg_hdr->id, p_msg_hdr->dest_id, p_msg_hdr->src_id, p_msg_hdr->param_len);
1000f382:	88e3      	ldrh	r3, [r4, #6]
1000f384:	88a2      	ldrh	r2, [r4, #4]
1000f386:	8861      	ldrh	r1, [r4, #2]
1000f388:	8820      	ldrh	r0, [r4, #0]
1000f38a:	4d0a      	ldr	r5, [pc, #40]	; (1000f3b4 <platform_interface_send+0x44>)
1000f38c:	682d      	ldr	r5, [r5, #0]
1000f38e:	47a8      	blx	r5
1000f390:	0005      	movs	r5, r0
											
	//no params
	if (p_msg_hdr->param_len == 0)
1000f392:	88e2      	ldrh	r2, [r4, #6]
1000f394:	2a00      	cmp	r2, #0
1000f396:	d102      	bne.n	1000f39e <platform_interface_send+0x2e>
	{
		// Send message directly
		at_ke_msg_send(params);
1000f398:	4b07      	ldr	r3, [pc, #28]	; (1000f3b8 <platform_interface_send+0x48>)
1000f39a:	4798      	blx	r3
1000f39c:	e006      	b.n	1000f3ac <platform_interface_send+0x3c>
	}
	else
	{
		//copy params
		memcpy(params,&(data[KE_MSG_HDR_LENGTH]),p_msg_hdr->param_len);
1000f39e:	0021      	movs	r1, r4
1000f3a0:	3108      	adds	r1, #8
1000f3a2:	4b06      	ldr	r3, [pc, #24]	; (1000f3bc <platform_interface_send+0x4c>)
1000f3a4:	4798      	blx	r3
		// Send the kernel message
		at_ke_msg_send(params);
1000f3a6:	0028      	movs	r0, r5
1000f3a8:	4b03      	ldr	r3, [pc, #12]	; (1000f3b8 <platform_interface_send+0x48>)
1000f3aa:	4798      	blx	r3
	}
}
1000f3ac:	bd70      	pop	{r4, r5, r6, pc}
1000f3ae:	46c0      	nop			; (mov r8, r8)
1000f3b0:	10019e50 	.word	0x10019e50
1000f3b4:	10019e88 	.word	0x10019e88
1000f3b8:	1000eff9 	.word	0x1000eff9
1000f3bc:	1001517f 	.word	0x1001517f

1000f3c0 <send_plf_int_msg_ind>:

void send_plf_int_msg_ind(uint8_t intr_index, uint8_t callback_id, void *data, uint16_t data_len)
{
1000f3c0:	b570      	push	{r4, r5, r6, lr}
1000f3c2:	0015      	movs	r5, r2
1000f3c4:	001c      	movs	r4, r3
	void* params;
//#if (CHIPVERSION_A4)	
	//os_sem_up(gstrFwSem);
//#endif
	// Allocate the kernel message
	params = ke_msg_alloc(PERIPHERAL_INTERRUPT_EVENT, TASK_INTERNAL_APP, BUILD_INTR_SRCID(callback_id,intr_index), data_len);
1000f3c6:	020a      	lsls	r2, r1, #8
1000f3c8:	4302      	orrs	r2, r0
1000f3ca:	4b0a      	ldr	r3, [pc, #40]	; (1000f3f4 <send_plf_int_msg_ind+0x34>)
1000f3cc:	681e      	ldr	r6, [r3, #0]
1000f3ce:	0023      	movs	r3, r4
1000f3d0:	2105      	movs	r1, #5
1000f3d2:	20a0      	movs	r0, #160	; 0xa0
1000f3d4:	00c0      	lsls	r0, r0, #3
1000f3d6:	47b0      	blx	r6
1000f3d8:	1e06      	subs	r6, r0, #0
											
	//no params
	if(params != NULL) {
1000f3da:	d00a      	beq.n	1000f3f2 <send_plf_int_msg_ind+0x32>
		if((data_len != 0) && (NULL != data))
1000f3dc:	2c00      	cmp	r4, #0
1000f3de:	d005      	beq.n	1000f3ec <send_plf_int_msg_ind+0x2c>
1000f3e0:	2d00      	cmp	r5, #0
1000f3e2:	d003      	beq.n	1000f3ec <send_plf_int_msg_ind+0x2c>
		{
			//copy params
			memcpy(params, data, data_len);
1000f3e4:	0022      	movs	r2, r4
1000f3e6:	0029      	movs	r1, r5
1000f3e8:	4b03      	ldr	r3, [pc, #12]	; (1000f3f8 <send_plf_int_msg_ind+0x38>)
1000f3ea:	4798      	blx	r3
		}
		// Send the kernel message
		at_ke_msg_send(params);
1000f3ec:	0030      	movs	r0, r6
1000f3ee:	4b03      	ldr	r3, [pc, #12]	; (1000f3fc <send_plf_int_msg_ind+0x3c>)
1000f3f0:	4798      	blx	r3
	}
}
1000f3f2:	bd70      	pop	{r4, r5, r6, pc}
1000f3f4:	10019e88 	.word	0x10019e88
1000f3f8:	1001517f 	.word	0x1001517f
1000f3fc:	1000eff9 	.word	0x1000eff9

1000f400 <platform_event_wait>:
//Waits on InternalAppMsgQHandle Queue
// This function won't busy wait if nothing on queue but will down the semaphore and go to a blocking state
// The OS then will move control to other higher priority tasks and will only return if these tasks finish processing AND the queue has received 
//a msg
plf_drv_status platform_event_wait(uint32_t timeout)
{
1000f400:	b5f0      	push	{r4, r5, r6, r7, lr}
1000f402:	465f      	mov	r7, fp
1000f404:	4656      	mov	r6, sl
1000f406:	464d      	mov	r5, r9
1000f408:	4644      	mov	r4, r8
1000f40a:	b4f0      	push	{r4, r5, r6, r7}
1000f40c:	b087      	sub	sp, #28
	static struct ke_msg* rcv_msg;
	static struct ke_msghdr	*ke_msg_hdr;
	plf_drv_status status = STATUS_SUCCESS;
	uint8_t bEventTimeoutFlag = 0;
	uint8_t bLoopAgain = 0;
	if(((uint32_t)-1 != timeout) && ((uint32_t)0 < timeout))
1000f40e:	1e44      	subs	r4, r0, #1
plf_drv_status platform_event_wait(uint32_t timeout)
{
	static struct ke_msg* rcv_msg;
	static struct ke_msghdr	*ke_msg_hdr;
	plf_drv_status status = STATUS_SUCCESS;
	uint8_t bEventTimeoutFlag = 0;
1000f410:	2300      	movs	r3, #0
1000f412:	4699      	mov	r9, r3
	uint8_t bLoopAgain = 0;
	if(((uint32_t)-1 != timeout) && ((uint32_t)0 < timeout))
1000f414:	1ce3      	adds	r3, r4, #3
1000f416:	d81c      	bhi.n	1000f452 <platform_event_wait+0x52>
	return num_of_freed;
}

static void platform_start_event_timeout(uint32_t timeout)
{
	uint8_t msg[8+5] = {0};
1000f418:	220d      	movs	r2, #13
1000f41a:	2100      	movs	r1, #0
1000f41c:	a802      	add	r0, sp, #8
1000f41e:	4b82      	ldr	r3, [pc, #520]	; (1000f628 <platform_event_wait+0x228>)
1000f420:	4798      	blx	r3
	uint8_t u16TxLen = 0;

	msg[u16TxLen++] = ((DBG_KE_TIMER_REQ) & 0x00FF );
1000f422:	2333      	movs	r3, #51	; 0x33
1000f424:	aa02      	add	r2, sp, #8
1000f426:	7013      	strb	r3, [r2, #0]
	msg[u16TxLen++] = (((DBG_KE_TIMER_REQ)>>8) & 0x00FF );
1000f428:	3b30      	subs	r3, #48	; 0x30
1000f42a:	7053      	strb	r3, [r2, #1]
	msg[u16TxLen++] = ((TASK_DBG) & 0x00FF );
1000f42c:	7093      	strb	r3, [r2, #2]
	msg[u16TxLen++] = (((TASK_DBG)>>8) & 0x00FF );	
	msg[u16TxLen++] = ((TASK_INTERNAL_APP) & 0x00FF );
1000f42e:	3302      	adds	r3, #2
1000f430:	7113      	strb	r3, [r2, #4]
	msg[u16TxLen++] = (((TASK_INTERNAL_APP)>>8) & 0x00FF );
	msg[u16TxLen++] = ((5) & 0x00FF );
1000f432:	7193      	strb	r3, [r2, #6]
	msg[u16TxLen++] = (((5)>>8) & 0x00FF );
	
	msg[u16TxLen++] = (uint8_t)((timeout) & 0x00FF );
1000f434:	7214      	strb	r4, [r2, #8]
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 8) & 0x00FF) ;
1000f436:	0a23      	lsrs	r3, r4, #8
1000f438:	7253      	strb	r3, [r2, #9]
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 16) & 0x00FF);
1000f43a:	0c23      	lsrs	r3, r4, #16
1000f43c:	7293      	strb	r3, [r2, #10]
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 24) & 0x00FF);
1000f43e:	0e24      	lsrs	r4, r4, #24
1000f440:	72d4      	strb	r4, [r2, #11]
	
	msg[u16TxLen++] = ((1) & 0x00FF );
1000f442:	2301      	movs	r3, #1
1000f444:	7313      	strb	r3, [r2, #12]
	
	platform_interface_send(msg, u16TxLen);
1000f446:	210d      	movs	r1, #13
1000f448:	0010      	movs	r0, r2
1000f44a:	4b78      	ldr	r3, [pc, #480]	; (1000f62c <platform_event_wait+0x22c>)
1000f44c:	4798      	blx	r3
	uint8_t bEventTimeoutFlag = 0;
	uint8_t bLoopAgain = 0;
	if(((uint32_t)-1 != timeout) && ((uint32_t)0 < timeout))
	{			
		platform_start_event_timeout(timeout-1);
		bEventTimeoutFlag = 1;
1000f44e:	2301      	movs	r3, #1
1000f450:	4699      	mov	r9, r3
1000f452:	2400      	movs	r4, #0
1000f454:	2500      	movs	r5, #0
	}

	do {
		if(NMI_MsgQueueRecv(InternalAppMsgQHandle, (void**)&rcv_msg) == STATUS_SUCCESS)
1000f456:	4f76      	ldr	r7, [pc, #472]	; (1000f630 <platform_event_wait+0x230>)
1000f458:	4e76      	ldr	r6, [pc, #472]	; (1000f634 <platform_event_wait+0x234>)
1000f45a:	4977      	ldr	r1, [pc, #476]	; (1000f638 <platform_event_wait+0x238>)
1000f45c:	6838      	ldr	r0, [r7, #0]
1000f45e:	6833      	ldr	r3, [r6, #0]
1000f460:	4798      	blx	r3
1000f462:	2800      	cmp	r0, #0
1000f464:	d000      	beq.n	1000f468 <platform_event_wait+0x68>
1000f466:	e088      	b.n	1000f57a <platform_event_wait+0x17a>
		{
			uint16_t msg_id = rcv_msg->id;
1000f468:	4b73      	ldr	r3, [pc, #460]	; (1000f638 <platform_event_wait+0x238>)
1000f46a:	681c      	ldr	r4, [r3, #0]
1000f46c:	88a3      	ldrh	r3, [r4, #4]
1000f46e:	469a      	mov	sl, r3
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
			
			if((rcv_msg->id != DBG_KE_TIMER_RESP) && (bEventTimeoutFlag))
1000f470:	23cd      	movs	r3, #205	; 0xcd
1000f472:	009b      	lsls	r3, r3, #2
1000f474:	459a      	cmp	sl, r3
1000f476:	d100      	bne.n	1000f47a <platform_event_wait+0x7a>
1000f478:	e0c7      	b.n	1000f60a <platform_event_wait+0x20a>

	do {
		if(NMI_MsgQueueRecv(InternalAppMsgQHandle, (void**)&rcv_msg) == STATUS_SUCCESS)
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
1000f47a:	8923      	ldrh	r3, [r4, #8]
1000f47c:	469b      	mov	fp, r3
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
1000f47e:	8963      	ldrh	r3, [r4, #10]
1000f480:	4698      	mov	r8, r3
			bLoopAgain = 0;
			
			if((rcv_msg->id != DBG_KE_TIMER_RESP) && (bEventTimeoutFlag))
1000f482:	464b      	mov	r3, r9
1000f484:	2b00      	cmp	r3, #0
1000f486:	d011      	beq.n	1000f4ac <platform_event_wait+0xac>
	platform_interface_send(msg, u16TxLen);
}

static void platform_stop_event_timeout(void)
{
	uint8_t msg[8+5] = {0};
1000f488:	220d      	movs	r2, #13
1000f48a:	2100      	movs	r1, #0
1000f48c:	a802      	add	r0, sp, #8
1000f48e:	4b66      	ldr	r3, [pc, #408]	; (1000f628 <platform_event_wait+0x228>)
1000f490:	4798      	blx	r3
	uint8_t u16TxLen = 0;

	msg[u16TxLen++] = ((DBG_KE_TIMER_REQ) & 0x00FF );
1000f492:	2333      	movs	r3, #51	; 0x33
1000f494:	aa02      	add	r2, sp, #8
1000f496:	7013      	strb	r3, [r2, #0]
	msg[u16TxLen++] = (((DBG_KE_TIMER_REQ)>>8) & 0x00FF );
1000f498:	3b30      	subs	r3, #48	; 0x30
1000f49a:	7053      	strb	r3, [r2, #1]
	msg[u16TxLen++] = ((TASK_DBG) & 0x00FF );
1000f49c:	7093      	strb	r3, [r2, #2]
	msg[u16TxLen++] = (((TASK_DBG)>>8) & 0x00FF );	
	msg[u16TxLen++] = ((TASK_INTERNAL_APP) & 0x00FF );
1000f49e:	3302      	adds	r3, #2
1000f4a0:	7113      	strb	r3, [r2, #4]
	msg[u16TxLen++] = (((TASK_INTERNAL_APP)>>8) & 0x00FF );
	msg[u16TxLen++] = ((5) & 0x00FF );
1000f4a2:	7193      	strb	r3, [r2, #6]
	msg[u16TxLen++] = (uint8_t)(( (0) >> 16) & 0x00FF);
	msg[u16TxLen++] = (uint8_t)(( (0) >> 24) & 0x00FF);
	
	msg[u16TxLen++] = ((0) & 0x00FF );
	
	platform_interface_send(msg, u16TxLen);
1000f4a4:	210d      	movs	r1, #13
1000f4a6:	0010      	movs	r0, r2
1000f4a8:	4b60      	ldr	r3, [pc, #384]	; (1000f62c <platform_event_wait+0x22c>)
1000f4aa:	4798      	blx	r3
			{
				//Stop timer if it is still running
				platform_stop_event_timeout();
			}
				
			if(msg_id == PERIPHERAL_INTERRUPT_EVENT)
1000f4ac:	23a0      	movs	r3, #160	; 0xa0
1000f4ae:	00db      	lsls	r3, r3, #3
1000f4b0:	459a      	cmp	sl, r3
1000f4b2:	d121      	bne.n	1000f4f8 <platform_event_wait+0xf8>
			{
				if(plf_event_buff_index+len > MAX_EVT_BUFF_LEN)
1000f4b4:	4b61      	ldr	r3, [pc, #388]	; (1000f63c <platform_event_wait+0x23c>)
1000f4b6:	881b      	ldrh	r3, [r3, #0]
1000f4b8:	4443      	add	r3, r8
1000f4ba:	22a0      	movs	r2, #160	; 0xa0
1000f4bc:	0092      	lsls	r2, r2, #2
1000f4be:	4293      	cmp	r3, r2
1000f4c0:	dd02      	ble.n	1000f4c8 <platform_event_wait+0xc8>
					plf_event_buff_index = PLF_EVENT_BUFFER_START_INDEX;
1000f4c2:	3a80      	subs	r2, #128	; 0x80
1000f4c4:	4b5d      	ldr	r3, [pc, #372]	; (1000f63c <platform_event_wait+0x23c>)
1000f4c6:	801a      	strh	r2, [r3, #0]
				memcpy(&rx_buffer[plf_event_buff_index],data,len);
1000f4c8:	4b5c      	ldr	r3, [pc, #368]	; (1000f63c <platform_event_wait+0x23c>)
1000f4ca:	469a      	mov	sl, r3
1000f4cc:	881d      	ldrh	r5, [r3, #0]
1000f4ce:	4b5c      	ldr	r3, [pc, #368]	; (1000f640 <platform_event_wait+0x240>)
1000f4d0:	18ed      	adds	r5, r5, r3
1000f4d2:	0021      	movs	r1, r4
1000f4d4:	310c      	adds	r1, #12
1000f4d6:	4642      	mov	r2, r8
1000f4d8:	0028      	movs	r0, r5
1000f4da:	4b5a      	ldr	r3, [pc, #360]	; (1000f644 <platform_event_wait+0x244>)
1000f4dc:	4798      	blx	r3
				platform_event_post(src_id,&rx_buffer[plf_event_buff_index],len);
1000f4de:	4642      	mov	r2, r8
1000f4e0:	0029      	movs	r1, r5
1000f4e2:	4658      	mov	r0, fp
1000f4e4:	4b58      	ldr	r3, [pc, #352]	; (1000f648 <platform_event_wait+0x248>)
1000f4e6:	4798      	blx	r3
				plf_event_buff_index += len;
1000f4e8:	4653      	mov	r3, sl
1000f4ea:	881b      	ldrh	r3, [r3, #0]
1000f4ec:	4443      	add	r3, r8
1000f4ee:	4652      	mov	r2, sl
1000f4f0:	8013      	strh	r3, [r2, #0]
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000f4f2:	2400      	movs	r4, #0
				if(plf_event_buff_index+len > MAX_EVT_BUFF_LEN)
					plf_event_buff_index = PLF_EVENT_BUFFER_START_INDEX;
				memcpy(&rx_buffer[plf_event_buff_index],data,len);
				platform_event_post(src_id,&rx_buffer[plf_event_buff_index],len);
				plf_event_buff_index += len;
				status = STATUS_RECEIVED_PLF_EVENT_MSG;
1000f4f4:	2502      	movs	r5, #2
1000f4f6:	e03a      	b.n	1000f56e <platform_event_wait+0x16e>
			}
			else
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
1000f4f8:	4b54      	ldr	r3, [pc, #336]	; (1000f64c <platform_event_wait+0x24c>)
1000f4fa:	681b      	ldr	r3, [r3, #0]
1000f4fc:	2b00      	cmp	r3, #0
1000f4fe:	d032      	beq.n	1000f566 <platform_event_wait+0x166>
					if(rcv_msg->id == DBG_KE_TIMER_RESP)
1000f500:	4b4d      	ldr	r3, [pc, #308]	; (1000f638 <platform_event_wait+0x238>)
1000f502:	681a      	ldr	r2, [r3, #0]
1000f504:	8893      	ldrh	r3, [r2, #4]
1000f506:	21cd      	movs	r1, #205	; 0xcd
1000f508:	0089      	lsls	r1, r1, #2
1000f50a:	428b      	cmp	r3, r1
1000f50c:	d104      	bne.n	1000f518 <platform_event_wait+0x118>
					{
						if(bEventTimeoutFlag)
1000f50e:	464b      	mov	r3, r9
						{
							status = STATUS_TIMEOUT;	
						}
						else
						{
							bLoopAgain = 1;
1000f510:	2401      	movs	r4, #1
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
					if(rcv_msg->id == DBG_KE_TIMER_RESP)
					{
						if(bEventTimeoutFlag)
1000f512:	2b00      	cmp	r3, #0
1000f514:	d02b      	beq.n	1000f56e <platform_event_wait+0x16e>
1000f516:	e028      	b.n	1000f56a <platform_event_wait+0x16a>
							bLoopAgain = 1;
						}
					}
					else
					{
						ke_msg_hdr = (struct ke_msghdr *)((void *)(rx_buffer+BLE_EVENT_BUFFER_START_INDEX));
1000f518:	4c4d      	ldr	r4, [pc, #308]	; (1000f650 <platform_event_wait+0x250>)
1000f51a:	4d49      	ldr	r5, [pc, #292]	; (1000f640 <platform_event_wait+0x240>)
1000f51c:	6025      	str	r5, [r4, #0]
						ke_msg_hdr->id = rcv_msg->id;
1000f51e:	702b      	strb	r3, [r5, #0]
1000f520:	0a1b      	lsrs	r3, r3, #8
1000f522:	706b      	strb	r3, [r5, #1]
//#if (CHIPVERSION_A3 || CHIPVERSION_A4)
					//ke_msg_hdr->src_id = rcv_msg->src_id;
//#else
					ke_msg_hdr->src_id = gapm_get_id_from_task(rcv_msg->src_id);
1000f524:	8910      	ldrh	r0, [r2, #8]
1000f526:	4b4b      	ldr	r3, [pc, #300]	; (1000f654 <platform_event_wait+0x254>)
1000f528:	681b      	ldr	r3, [r3, #0]
1000f52a:	4798      	blx	r3
1000f52c:	7128      	strb	r0, [r5, #4]
1000f52e:	0a00      	lsrs	r0, r0, #8
1000f530:	7168      	strb	r0, [r5, #5]
//#endif  /* (CHIPVERSION_A3 || CHIPVERSION_A4) */
						ke_msg_hdr->dest_id = rcv_msg->dest_id;
1000f532:	6820      	ldr	r0, [r4, #0]
1000f534:	4b40      	ldr	r3, [pc, #256]	; (1000f638 <platform_event_wait+0x238>)
1000f536:	681a      	ldr	r2, [r3, #0]
1000f538:	88d2      	ldrh	r2, [r2, #6]
1000f53a:	8042      	strh	r2, [r0, #2]
						ke_msg_hdr->param_len = rcv_msg->param_len;
1000f53c:	681d      	ldr	r5, [r3, #0]
1000f53e:	896b      	ldrh	r3, [r5, #10]
1000f540:	80c3      	strh	r3, [r0, #6]
						ke_msg_hdr++;
1000f542:	3008      	adds	r0, #8
1000f544:	6020      	str	r0, [r4, #0]
						if(rcv_msg->param_len > 0) {
1000f546:	896a      	ldrh	r2, [r5, #10]
1000f548:	2a00      	cmp	r2, #0
1000f54a:	d003      	beq.n	1000f554 <platform_event_wait+0x154>
							memcpy((void *)ke_msg_hdr,rcv_msg->param,rcv_msg->param_len);
1000f54c:	0029      	movs	r1, r5
1000f54e:	310c      	adds	r1, #12
1000f550:	4b3c      	ldr	r3, [pc, #240]	; (1000f644 <platform_event_wait+0x244>)
1000f552:	4798      	blx	r3
						}
						ble_stack_message_handler(rx_buffer,(rcv_msg->param_len + sizeof(struct ke_msghdr)));
1000f554:	8969      	ldrh	r1, [r5, #10]
1000f556:	3108      	adds	r1, #8
1000f558:	4b3c      	ldr	r3, [pc, #240]	; (1000f64c <platform_event_wait+0x24c>)
1000f55a:	681b      	ldr	r3, [r3, #0]
1000f55c:	4838      	ldr	r0, [pc, #224]	; (1000f640 <platform_event_wait+0x240>)
1000f55e:	4798      	blx	r3
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000f560:	2400      	movs	r4, #0
						ke_msg_hdr++;
						if(rcv_msg->param_len > 0) {
							memcpy((void *)ke_msg_hdr,rcv_msg->param,rcv_msg->param_len);
						}
						ble_stack_message_handler(rx_buffer,(rcv_msg->param_len + sizeof(struct ke_msghdr)));
						status = STATUS_RECEIVED_BLE_MSG;
1000f562:	2503      	movs	r5, #3
1000f564:	e003      	b.n	1000f56e <platform_event_wait+0x16e>
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000f566:	2400      	movs	r4, #0
1000f568:	e001      	b.n	1000f56e <platform_event_wait+0x16e>
1000f56a:	2400      	movs	r4, #0
				if(ble_stack_message_handler) {
					if(rcv_msg->id == DBG_KE_TIMER_RESP)
					{
						if(bEventTimeoutFlag)
						{
							status = STATUS_TIMEOUT;	
1000f56c:	25d0      	movs	r5, #208	; 0xd0
						ble_stack_message_handler(rx_buffer,(rcv_msg->param_len + sizeof(struct ke_msghdr)));
						status = STATUS_RECEIVED_BLE_MSG;
					}
				}
			}
			ke_free(rcv_msg);
1000f56e:	4b32      	ldr	r3, [pc, #200]	; (1000f638 <platform_event_wait+0x238>)
1000f570:	6818      	ldr	r0, [r3, #0]
1000f572:	4b39      	ldr	r3, [pc, #228]	; (1000f658 <platform_event_wait+0x258>)
1000f574:	681b      	ldr	r3, [r3, #0]
1000f576:	4798      	blx	r3
1000f578:	e000      	b.n	1000f57c <platform_event_wait+0x17c>
		}
		else
		{
			status = STATUS_FAILURE;
1000f57a:	2507      	movs	r5, #7
		}
	}while(bLoopAgain);
1000f57c:	2c00      	cmp	r4, #0
1000f57e:	d000      	beq.n	1000f582 <platform_event_wait+0x182>
1000f580:	e76b      	b.n	1000f45a <platform_event_wait+0x5a>
	
	if(bEventTimeoutFlag)
1000f582:	464b      	mov	r3, r9
1000f584:	2b00      	cmp	r3, #0
1000f586:	d046      	beq.n	1000f616 <platform_event_wait+0x216>
	{
		//CleanUp if there is any remaining DBG_KE_TIMER_RESP message in queue
		NMI_MsgQueueDestroyOnKeID(InternalAppMsgQHandle, DBG_KE_TIMER_RESP);
1000f588:	4b29      	ldr	r3, [pc, #164]	; (1000f630 <platform_event_wait+0x230>)
1000f58a:	681e      	ldr	r6, [r3, #0]
#endif 
static int NMI_MsgQueueDestroyOnKeID(NMI_MsgQueueHandle* pHandle, ke_msg_id_t u16KeMsgId)
{
	int num_of_freed=0;
	Message * current , *prev = NULL;
	if((NULL == pHandle) && (NULL == pHandle->pstrMessageList))
1000f58c:	2e00      	cmp	r6, #0
1000f58e:	d104      	bne.n	1000f59a <platform_event_wait+0x19a>
1000f590:	2300      	movs	r3, #0
1000f592:	6a1c      	ldr	r4, [r3, #32]
1000f594:	2c00      	cmp	r4, #0
1000f596:	d131      	bne.n	1000f5fc <platform_event_wait+0x1fc>
1000f598:	e03d      	b.n	1000f616 <platform_event_wait+0x216>
	{
		return num_of_freed;
	}

	current = pHandle->pstrMessageList;
1000f59a:	6a34      	ldr	r4, [r6, #32]
	os_sem_down(&pHandle->strCriticalSection);
1000f59c:	2314      	movs	r3, #20
1000f59e:	469c      	mov	ip, r3
1000f5a0:	44b4      	add	ip, r6
1000f5a2:	4663      	mov	r3, ip
1000f5a4:	4660      	mov	r0, ip
1000f5a6:	9300      	str	r3, [sp, #0]
1000f5a8:	4b2c      	ldr	r3, [pc, #176]	; (1000f65c <platform_event_wait+0x25c>)
1000f5aa:	681b      	ldr	r3, [r3, #0]
1000f5ac:	4798      	blx	r3
	while(NULL != current)
1000f5ae:	2c00      	cmp	r4, #0
1000f5b0:	d01f      	beq.n	1000f5f2 <platform_event_wait+0x1f2>
			}
			ke_free(rcv_msg);
		}
		else
		{
			status = STATUS_FAILURE;
1000f5b2:	2700      	movs	r7, #0

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
	while(NULL != current)
	{
		if(u16KeMsgId == ((struct ke_msg*)current->pvBuffer)->id)
1000f5b4:	23cd      	movs	r3, #205	; 0xcd
1000f5b6:	009b      	lsls	r3, r3, #2
1000f5b8:	4698      	mov	r8, r3
		{
			num_of_freed++;
			if(NULL != prev)
			{
				prev->pstrNext = current->pstrNext;
				ke_free(current);
1000f5ba:	4b27      	ldr	r3, [pc, #156]	; (1000f658 <platform_event_wait+0x258>)
1000f5bc:	469a      	mov	sl, r3
1000f5be:	0020      	movs	r0, r4

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
	while(NULL != current)
	{
		if(u16KeMsgId == ((struct ke_msg*)current->pvBuffer)->id)
1000f5c0:	6803      	ldr	r3, [r0, #0]
1000f5c2:	889b      	ldrh	r3, [r3, #4]
1000f5c4:	4543      	cmp	r3, r8
1000f5c6:	d110      	bne.n	1000f5ea <platform_event_wait+0x1ea>
		{
			num_of_freed++;
			if(NULL != prev)
1000f5c8:	2f00      	cmp	r7, #0
1000f5ca:	d006      	beq.n	1000f5da <platform_event_wait+0x1da>
			{
				prev->pstrNext = current->pstrNext;
1000f5cc:	6883      	ldr	r3, [r0, #8]
1000f5ce:	60bb      	str	r3, [r7, #8]
				ke_free(current);
1000f5d0:	4653      	mov	r3, sl
1000f5d2:	681b      	ldr	r3, [r3, #0]
1000f5d4:	4798      	blx	r3
				current = prev->pstrNext;
1000f5d6:	68b8      	ldr	r0, [r7, #8]
1000f5d8:	e009      	b.n	1000f5ee <platform_event_wait+0x1ee>
			}
			else
			{
				pHandle->pstrMessageList = current->pstrNext;
1000f5da:	6883      	ldr	r3, [r0, #8]
1000f5dc:	6233      	str	r3, [r6, #32]
				ke_free(current);
1000f5de:	4b1e      	ldr	r3, [pc, #120]	; (1000f658 <platform_event_wait+0x258>)
1000f5e0:	681b      	ldr	r3, [r3, #0]
1000f5e2:	9301      	str	r3, [sp, #4]
1000f5e4:	4798      	blx	r3
				current = pHandle->pstrMessageList;
1000f5e6:	6a30      	ldr	r0, [r6, #32]
1000f5e8:	e001      	b.n	1000f5ee <platform_event_wait+0x1ee>
			}
		}
		else
		{
			prev = current;
			current = current ->pstrNext;
1000f5ea:	0007      	movs	r7, r0
1000f5ec:	6880      	ldr	r0, [r0, #8]
		return num_of_freed;
	}

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
	while(NULL != current)
1000f5ee:	2800      	cmp	r0, #0
1000f5f0:	d1e6      	bne.n	1000f5c0 <platform_event_wait+0x1c0>
		{
			prev = current;
			current = current ->pstrNext;
		}
	}
	os_sem_up(&pHandle->strCriticalSection);
1000f5f2:	4b1b      	ldr	r3, [pc, #108]	; (1000f660 <platform_event_wait+0x260>)
1000f5f4:	681b      	ldr	r3, [r3, #0]
1000f5f6:	9800      	ldr	r0, [sp, #0]
1000f5f8:	4798      	blx	r3
	if(bEventTimeoutFlag)
	{
		//CleanUp if there is any remaining DBG_KE_TIMER_RESP message in queue
		NMI_MsgQueueDestroyOnKeID(InternalAppMsgQHandle, DBG_KE_TIMER_RESP);
	}
	return status;
1000f5fa:	e00c      	b.n	1000f616 <platform_event_wait+0x216>
	{
		return num_of_freed;
	}

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
1000f5fc:	2314      	movs	r3, #20
1000f5fe:	9300      	str	r3, [sp, #0]
1000f600:	4b16      	ldr	r3, [pc, #88]	; (1000f65c <platform_event_wait+0x25c>)
1000f602:	681b      	ldr	r3, [r3, #0]
1000f604:	2014      	movs	r0, #20
1000f606:	4798      	blx	r3
1000f608:	e7d3      	b.n	1000f5b2 <platform_event_wait+0x1b2>
				status = STATUS_RECEIVED_PLF_EVENT_MSG;
			}
			else
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
1000f60a:	4b10      	ldr	r3, [pc, #64]	; (1000f64c <platform_event_wait+0x24c>)
1000f60c:	681b      	ldr	r3, [r3, #0]
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000f60e:	2400      	movs	r4, #0
				status = STATUS_RECEIVED_PLF_EVENT_MSG;
			}
			else
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
1000f610:	2b00      	cmp	r3, #0
1000f612:	d0ac      	beq.n	1000f56e <platform_event_wait+0x16e>
1000f614:	e77b      	b.n	1000f50e <platform_event_wait+0x10e>
	{
		//CleanUp if there is any remaining DBG_KE_TIMER_RESP message in queue
		NMI_MsgQueueDestroyOnKeID(InternalAppMsgQHandle, DBG_KE_TIMER_RESP);
	}
	return status;
}
1000f616:	0028      	movs	r0, r5
1000f618:	b007      	add	sp, #28
1000f61a:	bc3c      	pop	{r2, r3, r4, r5}
1000f61c:	4690      	mov	r8, r2
1000f61e:	4699      	mov	r9, r3
1000f620:	46a2      	mov	sl, r4
1000f622:	46ab      	mov	fp, r5
1000f624:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000f626:	46c0      	nop			; (mov r8, r8)
1000f628:	10015191 	.word	0x10015191
1000f62c:	1000f371 	.word	0x1000f371
1000f630:	10019e8c 	.word	0x10019e8c
1000f634:	10019e74 	.word	0x10019e74
1000f638:	10019e80 	.word	0x10019e80
1000f63c:	1001ada0 	.word	0x1001ada0
1000f640:	1001ab08 	.word	0x1001ab08
1000f644:	1001517f 	.word	0x1001517f
1000f648:	1000ef91 	.word	0x1000ef91
1000f64c:	10019e7c 	.word	0x10019e7c
1000f650:	10019e6c 	.word	0x10019e6c
1000f654:	10019e4c 	.word	0x10019e4c
1000f658:	10019e48 	.word	0x10019e48
1000f65c:	10019e68 	.word	0x10019e68
1000f660:	10019e54 	.word	0x10019e54

1000f664 <acquire_sleep_lock>:

plf_drv_status acquire_sleep_lock()
{
1000f664:	b510      	push	{r4, lr}
    //DBG_LOG_DEV("[acquire_sleep_lock]\tDisabling ULP");
	plf_drv_status status = STATUS_RESOURCE_BUSY;
	//uint8_t osc_en = REG_PL_RD(0x4000B1EC)&0x01;
	
	rwip_prevent_sleep_set(APP_PREVENT_SLEEP);
1000f666:	4b03      	ldr	r3, [pc, #12]	; (1000f674 <acquire_sleep_lock+0x10>)
1000f668:	681b      	ldr	r3, [r3, #0]
1000f66a:	2080      	movs	r0, #128	; 0x80
1000f66c:	0200      	lsls	r0, r0, #8
1000f66e:	4798      	blx	r3
		/*  */
		os_sem_up(gstrFwSem);
	}
#endif	//0
	return status;
}
1000f670:	2008      	movs	r0, #8
1000f672:	bd10      	pop	{r4, pc}
1000f674:	1001aac0 	.word	0x1001aac0

1000f678 <release_message_lock>:

plf_drv_status release_message_lock()
{
1000f678:	b510      	push	{r4, lr}
	plf_drv_status status = STATUS_SUCCESS;
	rwip_prevent_sleep_clear(MSG_PREVENT_SLEEP);
1000f67a:	4b03      	ldr	r3, [pc, #12]	; (1000f688 <release_message_lock+0x10>)
1000f67c:	681b      	ldr	r3, [r3, #0]
1000f67e:	2080      	movs	r0, #128	; 0x80
1000f680:	01c0      	lsls	r0, r0, #7
1000f682:	4798      	blx	r3
	return status;
}
1000f684:	2000      	movs	r0, #0
1000f686:	bd10      	pop	{r4, pc}
1000f688:	1001aacc 	.word	0x1001aacc

1000f68c <release_sleep_lock>:

plf_drv_status release_sleep_lock()
{
1000f68c:	b510      	push	{r4, lr}
    //DBG_LOG_DEV("[release_sleep_lock]\tEnabling ULP");
	plf_drv_status status = STATUS_SUCCESS;
	rwip_prevent_sleep_clear(MSG_PREVENT_SLEEP);
1000f68e:	4c05      	ldr	r4, [pc, #20]	; (1000f6a4 <release_sleep_lock+0x18>)
1000f690:	2080      	movs	r0, #128	; 0x80
1000f692:	01c0      	lsls	r0, r0, #7
1000f694:	6823      	ldr	r3, [r4, #0]
1000f696:	4798      	blx	r3
	rwip_prevent_sleep_clear(APP_PREVENT_SLEEP);
1000f698:	6823      	ldr	r3, [r4, #0]
1000f69a:	2080      	movs	r0, #128	; 0x80
1000f69c:	0200      	lsls	r0, r0, #8
1000f69e:	4798      	blx	r3
	return status;
}
1000f6a0:	2000      	movs	r0, #0
1000f6a2:	bd10      	pop	{r4, pc}
1000f6a4:	1001aacc 	.word	0x1001aacc

1000f6a8 <register_resume_callback>:
}

plf_drv_status register_resume_callback(resume_callback cb)
{
	plf_drv_status status = STATUS_SUCCESS;
	if(cb == NULL)
1000f6a8:	2800      	cmp	r0, #0
1000f6aa:	d003      	beq.n	1000f6b4 <register_resume_callback+0xc>
	{
		status = STATUS_INVALID_ARGUMENT;
	}
	else 
	{
		samb11_app_resume_cb = cb;
1000f6ac:	4b02      	ldr	r3, [pc, #8]	; (1000f6b8 <register_resume_callback+0x10>)
1000f6ae:	6018      	str	r0, [r3, #0]
	}
}

plf_drv_status register_resume_callback(resume_callback cb)
{
	plf_drv_status status = STATUS_SUCCESS;
1000f6b0:	2000      	movs	r0, #0
1000f6b2:	e000      	b.n	1000f6b6 <register_resume_callback+0xe>
	if(cb == NULL)
	{
		status = STATUS_INVALID_ARGUMENT;
1000f6b4:	2009      	movs	r0, #9
	{
		samb11_app_resume_cb = cb;
		//*apps_resume_cb = (uint32_t)cb;
	}
	return status;
}
1000f6b6:	4770      	bx	lr
1000f6b8:	1001ad94 	.word	0x1001ad94

1000f6bc <gpio1_combined_isr_handler>:

enum port_status_code wakeup_int_unregister_callback(enum port_wakeup_source wakeup_source);
void wakeup_active_event_callback(uint32_t wakeup_source);

void gpio1_combined_isr_handler(void)
{
1000f6bc:	b530      	push	{r4, r5, lr}
	uint8_t index = 0;
	/* portint_callback_t callback; */
	uint8_t port_gpio1 = LPGPIO_16;
	uint32_t intstatus = GPIO1->INTSTATUSCLEAR.reg; /* jeffy */
1000f6be:	4a18      	ldr	r2, [pc, #96]	; (1000f720 <gpio1_combined_isr_handler+0x64>)
1000f6c0:	8f13      	ldrh	r3, [r2, #56]	; 0x38
1000f6c2:	b29b      	uxth	r3, r3
	GPIO1->INTTYPESET.reg |= (1 << 15); /* jeffy */
1000f6c4:	8d10      	ldrh	r0, [r2, #40]	; 0x28
1000f6c6:	2180      	movs	r1, #128	; 0x80
1000f6c8:	0209      	lsls	r1, r1, #8
1000f6ca:	4301      	orrs	r1, r0
1000f6cc:	8511      	strh	r1, [r2, #40]	; 0x28
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO1->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO1->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000f6ce:	0010      	movs	r0, r2
1000f6d0:	4d14      	ldr	r5, [pc, #80]	; (1000f724 <gpio1_combined_isr_handler+0x68>)
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO1->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000f6d2:	2401      	movs	r4, #1
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000f6d4:	2200      	movs	r2, #0
	uint32_t intstatus = GPIO1->INTSTATUSCLEAR.reg; /* jeffy */
	GPIO1->INTTYPESET.reg |= (1 << 15); /* jeffy */

	do {
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000f6d6:	05db      	lsls	r3, r3, #23
1000f6d8:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
1000f6da:	d011      	beq.n	1000f700 <gpio1_combined_isr_handler+0x44>
			port_gpio1 = (intstatus & ~(intstatus - 1));
1000f6dc:	b2db      	uxtb	r3, r3
1000f6de:	4259      	negs	r1, r3
1000f6e0:	400b      	ands	r3, r1
			while (!(port_gpio1 == 1)) {
1000f6e2:	2b01      	cmp	r3, #1
1000f6e4:	d006      	beq.n	1000f6f4 <gpio1_combined_isr_handler+0x38>
1000f6e6:	0011      	movs	r1, r2
				port_gpio1 = port_gpio1 >> 1;
1000f6e8:	085b      	lsrs	r3, r3, #1
				index++;
1000f6ea:	3101      	adds	r1, #1
1000f6ec:	b2c9      	uxtb	r1, r1
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
			port_gpio1 = (intstatus & ~(intstatus - 1));
			while (!(port_gpio1 == 1)) {
1000f6ee:	2b01      	cmp	r3, #1
1000f6f0:	d1fa      	bne.n	1000f6e8 <gpio1_combined_isr_handler+0x2c>
1000f6f2:	e000      	b.n	1000f6f6 <gpio1_combined_isr_handler+0x3a>
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000f6f4:	0011      	movs	r1, r2
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO1->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000f6f6:	0023      	movs	r3, r4
1000f6f8:	408b      	lsls	r3, r1
1000f6fa:	b29b      	uxth	r3, r3
1000f6fc:	8703      	strh	r3, [r0, #56]	; 0x38
1000f6fe:	e003      	b.n	1000f708 <gpio1_combined_isr_handler+0x4c>
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO1->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000f700:	8f03      	ldrh	r3, [r0, #56]	; 0x38
1000f702:	432b      	orrs	r3, r5
1000f704:	b29b      	uxth	r3, r3
1000f706:	8703      	strh	r3, [r0, #56]	; 0x38
			/* REG_GPIO1_INTSTATUSCLEAR = REG_GPIO1_INTENSET; */
		}

		intstatus = GPIO1->INTSTATUSCLEAR.reg;
1000f708:	8f03      	ldrh	r3, [r0, #56]	; 0x38
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000f70a:	05db      	lsls	r3, r3, #23
1000f70c:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
	} while (intstatus != 0);
1000f70e:	d1e2      	bne.n	1000f6d6 <gpio1_combined_isr_handler+0x1a>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
1000f710:	2180      	movs	r1, #128	; 0x80
1000f712:	0049      	lsls	r1, r1, #1
1000f714:	3381      	adds	r3, #129	; 0x81
1000f716:	33ff      	adds	r3, #255	; 0xff
1000f718:	4a03      	ldr	r2, [pc, #12]	; (1000f728 <gpio1_combined_isr_handler+0x6c>)
1000f71a:	50d1      	str	r1, [r2, r3]

	NVIC_ClearPendingIRQ(8);
}
1000f71c:	bd30      	pop	{r4, r5, pc}
1000f71e:	46c0      	nop			; (mov r8, r8)
1000f720:	40011000 	.word	0x40011000
1000f724:	ffff8000 	.word	0xffff8000
1000f728:	e000e100 	.word	0xe000e100

1000f72c <gpio0_combined_isr_handler>:

void gpio0_combined_isr_handler(void)
{
1000f72c:	b530      	push	{r4, r5, lr}
	uint8_t index = 0;
	/* portint_callback_t callback; */
	uint8_t port_gpio0 = LPGPIO_0;
	uint32_t intstatus = GPIO0->INTSTATUSCLEAR.reg; /* jeffy */
1000f72e:	4a17      	ldr	r2, [pc, #92]	; (1000f78c <gpio0_combined_isr_handler+0x60>)
1000f730:	8f13      	ldrh	r3, [r2, #56]	; 0x38
1000f732:	b29b      	uxth	r3, r3
	GPIO0->INTTYPESET.reg |= (1 << 15); /* jeffy */
1000f734:	8d10      	ldrh	r0, [r2, #40]	; 0x28
1000f736:	2180      	movs	r1, #128	; 0x80
1000f738:	0209      	lsls	r1, r1, #8
1000f73a:	4301      	orrs	r1, r0
1000f73c:	8511      	strh	r1, [r2, #40]	; 0x28
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO0->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO0->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000f73e:	0010      	movs	r0, r2
1000f740:	4d13      	ldr	r5, [pc, #76]	; (1000f790 <gpio0_combined_isr_handler+0x64>)
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO0->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000f742:	2401      	movs	r4, #1
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000f744:	2200      	movs	r2, #0
	uint32_t intstatus = GPIO0->INTSTATUSCLEAR.reg; /* jeffy */
	GPIO0->INTTYPESET.reg |= (1 << 15); /* jeffy */

	do {
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000f746:	05db      	lsls	r3, r3, #23
1000f748:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
1000f74a:	d011      	beq.n	1000f770 <gpio0_combined_isr_handler+0x44>
			port_gpio0 = (intstatus & ~(intstatus - 1));
1000f74c:	b2db      	uxtb	r3, r3
1000f74e:	4259      	negs	r1, r3
1000f750:	400b      	ands	r3, r1
			while (!(port_gpio0 == 1)) {
1000f752:	2b01      	cmp	r3, #1
1000f754:	d006      	beq.n	1000f764 <gpio0_combined_isr_handler+0x38>
1000f756:	0011      	movs	r1, r2
				port_gpio0 = port_gpio0 >> 1;
1000f758:	085b      	lsrs	r3, r3, #1
				index++;
1000f75a:	3101      	adds	r1, #1
1000f75c:	b2c9      	uxtb	r1, r1
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
			port_gpio0 = (intstatus & ~(intstatus - 1));
			while (!(port_gpio0 == 1)) {
1000f75e:	2b01      	cmp	r3, #1
1000f760:	d1fa      	bne.n	1000f758 <gpio0_combined_isr_handler+0x2c>
1000f762:	e000      	b.n	1000f766 <gpio0_combined_isr_handler+0x3a>
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000f764:	0011      	movs	r1, r2
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO0->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000f766:	0023      	movs	r3, r4
1000f768:	408b      	lsls	r3, r1
1000f76a:	b29b      	uxth	r3, r3
1000f76c:	8703      	strh	r3, [r0, #56]	; 0x38
1000f76e:	e003      	b.n	1000f778 <gpio0_combined_isr_handler+0x4c>
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO0->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000f770:	8f03      	ldrh	r3, [r0, #56]	; 0x38
1000f772:	432b      	orrs	r3, r5
1000f774:	b29b      	uxth	r3, r3
1000f776:	8703      	strh	r3, [r0, #56]	; 0x38
			/* REG_GPIO1_INTSTATUSCLEAR = REG_GPIO1_INTENSET; */
		}

		intstatus = GPIO0->INTSTATUSCLEAR.reg;
1000f778:	8f03      	ldrh	r3, [r0, #56]	; 0x38
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000f77a:	05db      	lsls	r3, r3, #23
1000f77c:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
	} while (intstatus != 0);
1000f77e:	d1e2      	bne.n	1000f746 <gpio0_combined_isr_handler+0x1a>
1000f780:	2180      	movs	r1, #128	; 0x80
1000f782:	3381      	adds	r3, #129	; 0x81
1000f784:	33ff      	adds	r3, #255	; 0xff
1000f786:	4a03      	ldr	r2, [pc, #12]	; (1000f794 <gpio0_combined_isr_handler+0x68>)
1000f788:	50d1      	str	r1, [r2, r3]

	NVIC_ClearPendingIRQ(7);
}
1000f78a:	bd30      	pop	{r4, r5, pc}
1000f78c:	40010000 	.word	0x40010000
1000f790:	ffff8000 	.word	0xffff8000
1000f794:	e000e100 	.word	0xe000e100

1000f798 <PORT1_COMB_Handler>:

#ifdef CHIPVERSION_B0
void PORT1_COMB_Handler(void)
{
1000f798:	b510      	push	{r4, lr}
	/* if(CMSDK_GPIO1->INTSTATUS & ((1<<15) | (1<<14) | (1<<13))) { */
	if (GPIO1->INTSTATUSCLEAR.reg & ((1 << 15) | (1 << 14) | (1 << 13))) {
1000f79a:	4b0c      	ldr	r3, [pc, #48]	; (1000f7cc <PORT1_COMB_Handler+0x34>)
1000f79c:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
1000f79e:	0b5b      	lsrs	r3, r3, #13
1000f7a0:	d010      	beq.n	1000f7c4 <PORT1_COMB_Handler+0x2c>
		handle_ext_wakeup_isr();
1000f7a2:	4b0b      	ldr	r3, [pc, #44]	; (1000f7d0 <PORT1_COMB_Handler+0x38>)
1000f7a4:	681b      	ldr	r3, [r3, #0]
1000f7a6:	4798      	blx	r3

		/* clear specific int pin status that caused the Interrupt */
		/* CMSDK_GPIO1->INTCLEAR |= CMSDK_GPIO1->INTSTATUS & ((1<<15) | (1<<14) | (1<<13)); */
		GPIO1->INTSTATUSCLEAR.reg |= GPIO1->INTSTATUSCLEAR.reg & ((1 << 15) | (1 << 14) | (1 << 13));
1000f7a8:	4a08      	ldr	r2, [pc, #32]	; (1000f7cc <PORT1_COMB_Handler+0x34>)
1000f7aa:	8f13      	ldrh	r3, [r2, #56]	; 0x38
1000f7ac:	8f11      	ldrh	r1, [r2, #56]	; 0x38
1000f7ae:	0b5b      	lsrs	r3, r3, #13
1000f7b0:	035b      	lsls	r3, r3, #13
1000f7b2:	430b      	orrs	r3, r1
1000f7b4:	8713      	strh	r3, [r2, #56]	; 0x38
1000f7b6:	2180      	movs	r1, #128	; 0x80
1000f7b8:	0049      	lsls	r1, r1, #1
1000f7ba:	23c0      	movs	r3, #192	; 0xc0
1000f7bc:	005b      	lsls	r3, r3, #1
1000f7be:	4a05      	ldr	r2, [pc, #20]	; (1000f7d4 <PORT1_COMB_Handler+0x3c>)
1000f7c0:	50d1      	str	r1, [r2, r3]
1000f7c2:	e001      	b.n	1000f7c8 <PORT1_COMB_Handler+0x30>
		/* NVIC_ClearPendingIRQ(PORT1_COMB_IRQn); */
		NVIC_ClearPendingIRQ(8);
	} else {
		gpio1_combined_isr_handler();
1000f7c4:	4b04      	ldr	r3, [pc, #16]	; (1000f7d8 <PORT1_COMB_Handler+0x40>)
1000f7c6:	4798      	blx	r3
	}
}
1000f7c8:	bd10      	pop	{r4, pc}
1000f7ca:	46c0      	nop			; (mov r8, r8)
1000f7cc:	40011000 	.word	0x40011000
1000f7d0:	1001ad8c 	.word	0x1001ad8c
1000f7d4:	e000e100 	.word	0xe000e100
1000f7d8:	1000f6bd 	.word	0x1000f6bd

1000f7dc <wakeup_int_unregister_callback>:
	{
		wakeup_source_callback[wakeup_source] = 0;
	}
	else 
	{
		status = PORT_STATUS_ERR_INVALID_ARG;
1000f7dc:	2303      	movs	r3, #3
#endif  /* CHIPVERSION_B0 */

enum port_status_code wakeup_int_unregister_callback(enum port_wakeup_source wakeup_source)
{
	enum port_status_code status = PORT_STATUS_OK;
	if(	(wakeup_source == PORT_WAKEUP_SOURCE_AON_GPIO_0) || 
1000f7de:	2802      	cmp	r0, #2
1000f7e0:	d804      	bhi.n	1000f7ec <wakeup_int_unregister_callback+0x10>
		(wakeup_source == PORT_WAKEUP_SOURCE_AON_GPIO_1) || 
		(wakeup_source == PORT_WAKEUP_SOURCE_AON_GPIO_2) ) 
	{
		wakeup_source_callback[wakeup_source] = 0;
1000f7e2:	0080      	lsls	r0, r0, #2
1000f7e4:	2200      	movs	r2, #0
1000f7e6:	4b02      	ldr	r3, [pc, #8]	; (1000f7f0 <wakeup_int_unregister_callback+0x14>)
1000f7e8:	50c2      	str	r2, [r0, r3]

#endif  /* CHIPVERSION_B0 */

enum port_status_code wakeup_int_unregister_callback(enum port_wakeup_source wakeup_source)
{
	enum port_status_code status = PORT_STATUS_OK;
1000f7ea:	2300      	movs	r3, #0
	else 
	{
		status = PORT_STATUS_ERR_INVALID_ARG;
	}
	return status;
}
1000f7ec:	0018      	movs	r0, r3
1000f7ee:	4770      	bx	lr
1000f7f0:	1001ada4 	.word	0x1001ada4

1000f7f4 <wakeup_active_event_callback>:

void wakeup_active_event_callback(uint32_t wakeup_source)
{
1000f7f4:	b510      	push	{r4, lr}
1000f7f6:	0004      	movs	r4, r0
	portint_callback_t callback;
	uint32_t *pu32WakeSource = (uint32_t *)wakeup_source;
	if((*pu32WakeSource & 0xFF) == 1)
1000f7f8:	7803      	ldrb	r3, [r0, #0]
1000f7fa:	2b01      	cmp	r3, #1
1000f7fc:	d108      	bne.n	1000f810 <wakeup_active_event_callback+0x1c>
	{
		if(wakeup_source_callback[0] != NULL) {
1000f7fe:	4b11      	ldr	r3, [pc, #68]	; (1000f844 <wakeup_active_event_callback+0x50>)
1000f800:	681b      	ldr	r3, [r3, #0]
1000f802:	2b00      	cmp	r3, #0
1000f804:	d000      	beq.n	1000f808 <wakeup_active_event_callback+0x14>
			callback = wakeup_source_callback[0];
			callback();
1000f806:	4798      	blx	r3
		}
		*pu32WakeSource &= ~(0xFF);
1000f808:	23ff      	movs	r3, #255	; 0xff
1000f80a:	6822      	ldr	r2, [r4, #0]
1000f80c:	439a      	bics	r2, r3
1000f80e:	6022      	str	r2, [r4, #0]
	}
	if(((*pu32WakeSource >> 8) & 0xFF) == 1)
1000f810:	7863      	ldrb	r3, [r4, #1]
1000f812:	2b01      	cmp	r3, #1
1000f814:	d108      	bne.n	1000f828 <wakeup_active_event_callback+0x34>
	{
		if(wakeup_source_callback[1] != NULL) {
1000f816:	4b0b      	ldr	r3, [pc, #44]	; (1000f844 <wakeup_active_event_callback+0x50>)
1000f818:	685b      	ldr	r3, [r3, #4]
1000f81a:	2b00      	cmp	r3, #0
1000f81c:	d000      	beq.n	1000f820 <wakeup_active_event_callback+0x2c>
			callback = wakeup_source_callback[1];
			callback();
1000f81e:	4798      	blx	r3
		}
		*pu32WakeSource &= ~(0xFF << 8);
1000f820:	4b09      	ldr	r3, [pc, #36]	; (1000f848 <wakeup_active_event_callback+0x54>)
1000f822:	6822      	ldr	r2, [r4, #0]
1000f824:	4013      	ands	r3, r2
1000f826:	6023      	str	r3, [r4, #0]
	}
	if(((*pu32WakeSource >> 16) & 0xFF) == 1)
1000f828:	78a3      	ldrb	r3, [r4, #2]
1000f82a:	2b01      	cmp	r3, #1
1000f82c:	d108      	bne.n	1000f840 <wakeup_active_event_callback+0x4c>
	{
		if(wakeup_source_callback[2] != NULL) {
1000f82e:	4b05      	ldr	r3, [pc, #20]	; (1000f844 <wakeup_active_event_callback+0x50>)
1000f830:	689b      	ldr	r3, [r3, #8]
1000f832:	2b00      	cmp	r3, #0
1000f834:	d000      	beq.n	1000f838 <wakeup_active_event_callback+0x44>
			callback = wakeup_source_callback[2];
			callback();
1000f836:	4798      	blx	r3
		}
		*pu32WakeSource &= ~(0xFF << 16);
1000f838:	4b04      	ldr	r3, [pc, #16]	; (1000f84c <wakeup_active_event_callback+0x58>)
1000f83a:	6822      	ldr	r2, [r4, #0]
1000f83c:	4013      	ands	r3, r2
1000f83e:	6023      	str	r3, [r4, #0]
	}
}
1000f840:	bd10      	pop	{r4, pc}
1000f842:	46c0      	nop			; (mov r8, r8)
1000f844:	1001ada4 	.word	0x1001ada4
1000f848:	ffff00ff 	.word	0xffff00ff
1000f84c:	ff00ffff 	.word	0xff00ffff

1000f850 <resume_cb>:
    sms_ble_send_cnt = 0;
}


static void resume_cb(void)
{
1000f850:	b510      	push	{r4, lr}
    init_port_list(); // re-initialize all ports
1000f852:	4b09      	ldr	r3, [pc, #36]	; (1000f878 <resume_cb+0x28>)
1000f854:	4798      	blx	r3
    serial_console_init(); // GPIO (UART) for the console
1000f856:	4b09      	ldr	r3, [pc, #36]	; (1000f87c <resume_cb+0x2c>)
1000f858:	4798      	blx	r3
    sms_dualtimer_init();
1000f85a:	4b09      	ldr	r3, [pc, #36]	; (1000f880 <resume_cb+0x30>)
1000f85c:	4798      	blx	r3
    delay_init();
1000f85e:	4b09      	ldr	r3, [pc, #36]	; (1000f884 <resume_cb+0x34>)
1000f860:	4798      	blx	r3
    sms_button_configure_gpio(); // GPIO (AO_0 & AO_1) for the buttons
1000f862:	4b09      	ldr	r3, [pc, #36]	; (1000f888 <resume_cb+0x38>)
1000f864:	4798      	blx	r3
    sms_led_gpio_init();
1000f866:	4b09      	ldr	r3, [pc, #36]	; (1000f88c <resume_cb+0x3c>)
1000f868:	4798      	blx	r3
    sms_spi_master_configure();
1000f86a:	4b09      	ldr	r3, [pc, #36]	; (1000f890 <resume_cb+0x40>)
1000f86c:	4798      	blx	r3
    sms_i2c_master_configure();
1000f86e:	4b09      	ldr	r3, [pc, #36]	; (1000f894 <resume_cb+0x44>)
1000f870:	4798      	blx	r3
    //sms_mpu_configure_gpio();
    sms_monitor_configure_gpio();
1000f872:	4b09      	ldr	r3, [pc, #36]	; (1000f898 <resume_cb+0x48>)
1000f874:	4798      	blx	r3
    //gpio_pin_set_output_level(SMS_PRESSURE_VCC_PIN, true);
}
1000f876:	bd10      	pop	{r4, pc}
1000f878:	1000f09d 	.word	0x1000f09d
1000f87c:	1000ee05 	.word	0x1000ee05
1000f880:	1000b5f1 	.word	0x1000b5f1
1000f884:	100080e9 	.word	0x100080e9
1000f888:	1000a565 	.word	0x1000a565
1000f88c:	1000ae95 	.word	0x1000ae95
1000f890:	1000b4a5 	.word	0x1000b4a5
1000f894:	1000aa39 	.word	0x1000aa39
1000f898:	1000a98d 	.word	0x1000a98d

1000f89c <sms_init_variables>:
 */
/*- Includes ---------------------------------------------------------------*/
#include "sms_peripheral1.h"

void sms_init_variables(void)
{
1000f89c:	b510      	push	{r4, lr}
    // states
    ble_current_state = BLE_STATE_POWEROFF;
1000f89e:	2300      	movs	r3, #0
1000f8a0:	4a12      	ldr	r2, [pc, #72]	; (1000f8ec <sms_init_variables+0x50>)
1000f8a2:	7013      	strb	r3, [r2, #0]
    button_instance.current_state = BUTTON_STATE_NONE;
1000f8a4:	4a12      	ldr	r2, [pc, #72]	; (1000f8f0 <sms_init_variables+0x54>)
1000f8a6:	7053      	strb	r3, [r2, #1]
    pressure_device.hal.current_state = MS58_STATE_NONE;
1000f8a8:	4812      	ldr	r0, [pc, #72]	; (1000f8f4 <sms_init_variables+0x58>)
1000f8aa:	2225      	movs	r2, #37	; 0x25
1000f8ac:	5483      	strb	r3, [r0, r2]
    timer1_current_mode = TIMER1_MODE_NONE;
1000f8ae:	4a12      	ldr	r2, [pc, #72]	; (1000f8f8 <sms_init_variables+0x5c>)
1000f8b0:	7013      	strb	r3, [r2, #0]
    timer2_current_mode = TIMER2_MODE_NONE;
1000f8b2:	4a12      	ldr	r2, [pc, #72]	; (1000f8fc <sms_init_variables+0x60>)
1000f8b4:	7013      	strb	r3, [r2, #0]
    sms_working_mode = SMS_MODE_BUTTON_SOLO;
1000f8b6:	2101      	movs	r1, #1
1000f8b8:	4a11      	ldr	r2, [pc, #68]	; (1000f900 <sms_init_variables+0x64>)
1000f8ba:	7011      	strb	r1, [r2, #0]

    // button
    btn0_instance.id = SMS_BTN_0;
1000f8bc:	4a11      	ldr	r2, [pc, #68]	; (1000f904 <sms_init_variables+0x68>)
1000f8be:	7013      	strb	r3, [r2, #0]
    btn0_instance.gpio_pin = SMS_BTN_0_PIN;
1000f8c0:	241f      	movs	r4, #31
1000f8c2:	7054      	strb	r4, [r2, #1]
    btn0_instance.int_enabled = true;
1000f8c4:	7091      	strb	r1, [r2, #2]
    btn0_instance.char_value = 0;
1000f8c6:	70d3      	strb	r3, [r2, #3]
    
    pressure_device.state = PRESSURE_STATE_OFF;
1000f8c8:	2228      	movs	r2, #40	; 0x28
1000f8ca:	5483      	strb	r3, [r0, r2]
    ulp_ready = false;
1000f8cc:	4a0e      	ldr	r2, [pc, #56]	; (1000f908 <sms_init_variables+0x6c>)
1000f8ce:	7013      	strb	r3, [r2, #0]
    
    
    btn1_instance.id = SMS_BTN_1;
1000f8d0:	4a0e      	ldr	r2, [pc, #56]	; (1000f90c <sms_init_variables+0x70>)
1000f8d2:	7011      	strb	r1, [r2, #0]
    btn1_instance.gpio_pin = SMS_BTN_1_PIN;
1000f8d4:	201d      	movs	r0, #29
1000f8d6:	7050      	strb	r0, [r2, #1]
    btn1_instance.int_enabled = true;
1000f8d8:	7091      	strb	r1, [r2, #2]
    btn1_instance.char_value = 0;
1000f8da:	70d3      	strb	r3, [r2, #3]
    
	for(uint8_t i = 0; i < 3; i++) {
		ready_to_send[i] = false;
1000f8dc:	4a0c      	ldr	r2, [pc, #48]	; (1000f910 <sms_init_variables+0x74>)
1000f8de:	7013      	strb	r3, [r2, #0]
1000f8e0:	7053      	strb	r3, [r2, #1]
1000f8e2:	7093      	strb	r3, [r2, #2]
	}
    sms_ble_send_cnt = 0;
1000f8e4:	4a0b      	ldr	r2, [pc, #44]	; (1000f914 <sms_init_variables+0x78>)
1000f8e6:	8013      	strh	r3, [r2, #0]
}
1000f8e8:	bd10      	pop	{r4, pc}
1000f8ea:	46c0      	nop			; (mov r8, r8)
1000f8ec:	1001a110 	.word	0x1001a110
1000f8f0:	1001a000 	.word	0x1001a000
1000f8f4:	1001a074 	.word	0x1001a074
1000f8f8:	10019f64 	.word	0x10019f64
1000f8fc:	1001a111 	.word	0x1001a111
1000f900:	10019ff8 	.word	0x10019ff8
1000f904:	10019f60 	.word	0x10019f60
1000f908:	10019ff9 	.word	0x10019ff9
1000f90c:	10019ffc 	.word	0x10019ffc
1000f910:	1001a114 	.word	0x1001a114
1000f914:	1001a130 	.word	0x1001a130

1000f918 <main>:
	//sms_current_interrupt.int_on = true;
//}


int main(void)
{
1000f918:	b570      	push	{r4, r5, r6, lr}
    /* Define current BLE state
     * ------------------------ */
    ble_current_state = BLE_STATE_STARTING;
1000f91a:	2210      	movs	r2, #16
1000f91c:	4b96      	ldr	r3, [pc, #600]	; (1000fb78 <main+0x260>)
1000f91e:	701a      	strb	r2, [r3, #0]
    
    /* Initialize platform
     * ------------------- */
	platform_driver_init();
1000f920:	4b96      	ldr	r3, [pc, #600]	; (1000fb7c <main+0x264>)
1000f922:	4798      	blx	r3
	gpio_init(); // GPIO
1000f924:	4b96      	ldr	r3, [pc, #600]	; (1000fb80 <main+0x268>)
1000f926:	4798      	blx	r3
	serial_console_init(); // serial console for debugging
1000f928:	4b96      	ldr	r3, [pc, #600]	; (1000fb84 <main+0x26c>)
1000f92a:	4798      	blx	r3
    
    /* Disable ULP
     * ----------- */
	acquire_sleep_lock();
1000f92c:	4b96      	ldr	r3, [pc, #600]	; (1000fb88 <main+0x270>)
1000f92e:	4798      	blx	r3
    

    /* Initialize SMS flags
     * -------------------- */
    sms_init_variables();
1000f930:	4b96      	ldr	r3, [pc, #600]	; (1000fb8c <main+0x274>)
1000f932:	4798      	blx	r3
    
    
    /* Initialize hardware components
     * ------------------------------ */
    // Dualtimer
    sms_dualtimer_init();
1000f934:	4b96      	ldr	r3, [pc, #600]	; (1000fb90 <main+0x278>)
1000f936:	4798      	blx	r3
	
    // Blocking delay (hacked from other SAM platforms)
    delay_init();
1000f938:	4b96      	ldr	r3, [pc, #600]	; (1000fb94 <main+0x27c>)
1000f93a:	4798      	blx	r3

	// Buttons
    sms_button_configure_gpio();
1000f93c:	4b96      	ldr	r3, [pc, #600]	; (1000fb98 <main+0x280>)
1000f93e:	4798      	blx	r3
    
    // LED
    sms_led_gpio_init();
1000f940:	4b96      	ldr	r3, [pc, #600]	; (1000fb9c <main+0x284>)
1000f942:	4798      	blx	r3
    
    // I2C
    sms_i2c_master_configure();
1000f944:	4b96      	ldr	r3, [pc, #600]	; (1000fba0 <main+0x288>)
1000f946:	4798      	blx	r3
    
    // SPI
    sms_spi_master_configure();
1000f948:	4b96      	ldr	r3, [pc, #600]	; (1000fba4 <main+0x28c>)
1000f94a:	4798      	blx	r3
    
    // MPU
    sms_mpu_configure_gpio();
1000f94c:	4b96      	ldr	r3, [pc, #600]	; (1000fba8 <main+0x290>)
1000f94e:	4798      	blx	r3
    
	// monitoring...
    sms_monitor_configure_gpio();
1000f950:	4b96      	ldr	r3, [pc, #600]	; (1000fbac <main+0x294>)
1000f952:	4798      	blx	r3
    
    /* Initialize the BLE module
     * ------------------------- */
	ble_device_init(NULL); // initialize the BLE chip and set the device address 
1000f954:	2000      	movs	r0, #0
1000f956:	4b96      	ldr	r3, [pc, #600]	; (1000fbb0 <main+0x298>)
1000f958:	4798      	blx	r3
	
    
    /* Define BLE services
     * ------------------- */
    sms_button_define_services();
1000f95a:	4b96      	ldr	r3, [pc, #600]	; (1000fbb4 <main+0x29c>)
1000f95c:	4798      	blx	r3
    sms_pressure_define_services();
1000f95e:	4b96      	ldr	r3, [pc, #600]	; (1000fbb8 <main+0x2a0>)
1000f960:	4798      	blx	r3
    sms_mpu_define_services();
1000f962:	4b96      	ldr	r3, [pc, #600]	; (1000fbbc <main+0x2a4>)
1000f964:	4798      	blx	r3
    
    
    /* Register callbacks
     * ------------------ */
    // Recovering from ULP
    register_resume_callback(resume_cb); // register resume callback
1000f966:	4896      	ldr	r0, [pc, #600]	; (1000fbc0 <main+0x2a8>)
1000f968:	4b96      	ldr	r3, [pc, #600]	; (1000fbc4 <main+0x2ac>)
1000f96a:	4798      	blx	r3

    // Dualtimer (AON timer enables on registration... so do it later)    
    sms_dualtimer_register_callback(DUALTIMER_TIMER1, sms_dualtimer1_cb); // button pressing timer
1000f96c:	4996      	ldr	r1, [pc, #600]	; (1000fbc8 <main+0x2b0>)
1000f96e:	2000      	movs	r0, #0
1000f970:	4c96      	ldr	r4, [pc, #600]	; (1000fbcc <main+0x2b4>)
1000f972:	47a0      	blx	r4
    sms_dualtimer_register_callback(DUALTIMER_TIMER2, sms_dualtimer2_cb); // LED blinking timer
1000f974:	4996      	ldr	r1, [pc, #600]	; (1000fbd0 <main+0x2b8>)
1000f976:	2001      	movs	r0, #1
1000f978:	47a0      	blx	r4

    // Buttons
    sms_button_register_callbacks();
1000f97a:	4b96      	ldr	r3, [pc, #600]	; (1000fbd4 <main+0x2bc>)
1000f97c:	4798      	blx	r3
    
    // MPU
    sms_mpu_register_callbacks();
1000f97e:	4b96      	ldr	r3, [pc, #600]	; (1000fbd8 <main+0x2c0>)
1000f980:	4798      	blx	r3

    // BLE
    ble_mgr_events_callback_handler(REGISTER_CALL_BACK, BLE_GAP_EVENT_TYPE, sms_ble_gap_cb);
1000f982:	4a96      	ldr	r2, [pc, #600]	; (1000fbdc <main+0x2c4>)
1000f984:	2100      	movs	r1, #0
1000f986:	2000      	movs	r0, #0
1000f988:	4c95      	ldr	r4, [pc, #596]	; (1000fbe0 <main+0x2c8>)
1000f98a:	47a0      	blx	r4
    ble_mgr_events_callback_handler(REGISTER_CALL_BACK, BLE_GATT_SERVER_EVENT_TYPE, sms_ble_gatt_server_cb);
1000f98c:	4a95      	ldr	r2, [pc, #596]	; (1000fbe4 <main+0x2cc>)
1000f98e:	2102      	movs	r1, #2
1000f990:	2000      	movs	r0, #0
1000f992:	47a0      	blx	r4

    //ble_set_ulp_mode(BLE_ULP_MODE_SET);
    
    /* Enable buttons interrupts
     * ------------------------- */
    sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
1000f994:	2100      	movs	r1, #0
1000f996:	2000      	movs	r0, #0
1000f998:	4b93      	ldr	r3, [pc, #588]	; (1000fbe8 <main+0x2d0>)
1000f99a:	4798      	blx	r3
    //sms_sensors_interrupt_toggle(true, false);
    //while(1) {}
    
    /* Goto sleep
     * ---------- */
    sms_ble_power_down();
1000f99c:	4b93      	ldr	r3, [pc, #588]	; (1000fbec <main+0x2d4>)
1000f99e:	4798      	blx	r3

    
	while(true)
	{
		/* BLE Event task */
		ble_event_task(BLE_EVENT_TIMEOUT);
1000f9a0:	4d93      	ldr	r5, [pc, #588]	; (1000fbf0 <main+0x2d8>)
		
		/* Write application task */
        if(sms_current_interrupt.int_on)
1000f9a2:	4c94      	ldr	r4, [pc, #592]	; (1000fbf4 <main+0x2dc>)
        {
            if(ulp_active) {
1000f9a4:	4e94      	ldr	r6, [pc, #592]	; (1000fbf8 <main+0x2e0>)

    
	while(true)
	{
		/* BLE Event task */
		ble_event_task(BLE_EVENT_TIMEOUT);
1000f9a6:	2001      	movs	r0, #1
1000f9a8:	4240      	negs	r0, r0
1000f9aa:	47a8      	blx	r5
		
		/* Write application task */
        if(sms_current_interrupt.int_on)
1000f9ac:	7863      	ldrb	r3, [r4, #1]
1000f9ae:	2b00      	cmp	r3, #0
1000f9b0:	d100      	bne.n	1000f9b4 <main+0x9c>
1000f9b2:	e0b6      	b.n	1000fb22 <main+0x20a>
        {
            if(ulp_active) {
1000f9b4:	7833      	ldrb	r3, [r6, #0]
1000f9b6:	2b00      	cmp	r3, #0
1000f9b8:	d001      	beq.n	1000f9be <main+0xa6>
                //DBG_LOG_DEV("[main]\t\t\t\tWaking up...");
                acquire_sleep_lock();
1000f9ba:	4b73      	ldr	r3, [pc, #460]	; (1000fb88 <main+0x270>)
1000f9bc:	4798      	blx	r3
                //DBG_LOG_CONT_DEV(" done!");
            }                
            //ulp_ready = false;
            //DBG_LOG_DEV("[main]\t\t\t\tDisabling button int...");
            sms_button_toggle_interrupt(SMS_BTN_INT_DISABLE, SMS_BTN_INT_DISABLE);
1000f9be:	2101      	movs	r1, #1
1000f9c0:	2001      	movs	r0, #1
1000f9c2:	4b89      	ldr	r3, [pc, #548]	; (1000fbe8 <main+0x2d0>)
1000f9c4:	4798      	blx	r3
            //DBG_LOG_CONT_DEV(" done!");
            switch(sms_current_interrupt.source)
1000f9c6:	4b8b      	ldr	r3, [pc, #556]	; (1000fbf4 <main+0x2dc>)
1000f9c8:	781b      	ldrb	r3, [r3, #0]
1000f9ca:	b2db      	uxtb	r3, r3
1000f9cc:	2b06      	cmp	r3, #6
1000f9ce:	d900      	bls.n	1000f9d2 <main+0xba>
1000f9d0:	e099      	b.n	1000fb06 <main+0x1ee>
1000f9d2:	009b      	lsls	r3, r3, #2
1000f9d4:	4a89      	ldr	r2, [pc, #548]	; (1000fbfc <main+0x2e4>)
1000f9d6:	58d3      	ldr	r3, [r2, r3]
1000f9d8:	469f      	mov	pc, r3
            {
                case INT_NONE:
                //sms_monitor_states("NONE");
                DBG_LOG_DEV("...NO SOURCE!!");
1000f9da:	4889      	ldr	r0, [pc, #548]	; (1000fc00 <main+0x2e8>)
1000f9dc:	4b89      	ldr	r3, [pc, #548]	; (1000fc04 <main+0x2ec>)
1000f9de:	4798      	blx	r3
1000f9e0:	4889      	ldr	r0, [pc, #548]	; (1000fc08 <main+0x2f0>)
1000f9e2:	4b8a      	ldr	r3, [pc, #552]	; (1000fc0c <main+0x2f4>)
1000f9e4:	4798      	blx	r3
                //if(ulp_ready) {
                    //DBG_LOG_DEV("[main]\t\t\tULP...");
                    //release_sleep_lock();
                //}
                //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
                break;
1000f9e6:	e094      	b.n	1000fb12 <main+0x1fa>
                
                case INT_BTN0:
                //sms_monitor_states("INT_BTN0");
                DBG_LOG_DEV("...BTN0");
1000f9e8:	4885      	ldr	r0, [pc, #532]	; (1000fc00 <main+0x2e8>)
1000f9ea:	4b86      	ldr	r3, [pc, #536]	; (1000fc04 <main+0x2ec>)
1000f9ec:	4798      	blx	r3
1000f9ee:	4888      	ldr	r0, [pc, #544]	; (1000fc10 <main+0x2f8>)
1000f9f0:	4b86      	ldr	r3, [pc, #536]	; (1000fc0c <main+0x2f4>)
1000f9f2:	4798      	blx	r3
                if((sms_working_mode == SMS_MODE_BUTTON_MPU) || (sms_working_mode == SMS_MODE_COMPLETE) || (sms_working_mode == SMS_MODE_BUTTON_SOLO) || (sms_working_mode == SMS_MODE_BUTTON_PRESSURE)) {
1000f9f4:	4b87      	ldr	r3, [pc, #540]	; (1000fc14 <main+0x2fc>)
1000f9f6:	781b      	ldrb	r3, [r3, #0]
1000f9f8:	2b04      	cmp	r3, #4
1000f9fa:	d00b      	beq.n	1000fa14 <main+0xfc>
1000f9fc:	4b85      	ldr	r3, [pc, #532]	; (1000fc14 <main+0x2fc>)
1000f9fe:	781b      	ldrb	r3, [r3, #0]
1000fa00:	2b07      	cmp	r3, #7
1000fa02:	d007      	beq.n	1000fa14 <main+0xfc>
1000fa04:	4b83      	ldr	r3, [pc, #524]	; (1000fc14 <main+0x2fc>)
1000fa06:	781b      	ldrb	r3, [r3, #0]
1000fa08:	2b01      	cmp	r3, #1
1000fa0a:	d003      	beq.n	1000fa14 <main+0xfc>
1000fa0c:	4b81      	ldr	r3, [pc, #516]	; (1000fc14 <main+0x2fc>)
1000fa0e:	781b      	ldrb	r3, [r3, #0]
1000fa10:	2b05      	cmp	r3, #5
1000fa12:	d17e      	bne.n	1000fb12 <main+0x1fa>
                        //DBG_LOG_DEV("[main]\t\t\t\tDisabling sensor int...");
                        //sms_sensors_toggle_interrupt(SMS_EXTINT_DISABLE);
                        //DBG_LOG_CONT_DEV(" done!");
                    //}                        
                    //sms_button_toggle_interrupt(SMS_BTN_INT_DISABLE, SMS_BTN_INT_DISABLE);
                    if(sms_button_fn(SMS_BTN_0) < 0) {
1000fa14:	2000      	movs	r0, #0
1000fa16:	4b80      	ldr	r3, [pc, #512]	; (1000fc18 <main+0x300>)
1000fa18:	4798      	blx	r3
1000fa1a:	2800      	cmp	r0, #0
1000fa1c:	da79      	bge.n	1000fb12 <main+0x1fa>
                        DBG_LOG("[main]\t\t\t\tError in sms_button_fn()!");
1000fa1e:	4878      	ldr	r0, [pc, #480]	; (1000fc00 <main+0x2e8>)
1000fa20:	4b78      	ldr	r3, [pc, #480]	; (1000fc04 <main+0x2ec>)
1000fa22:	4798      	blx	r3
1000fa24:	487d      	ldr	r0, [pc, #500]	; (1000fc1c <main+0x304>)
1000fa26:	4b79      	ldr	r3, [pc, #484]	; (1000fc0c <main+0x2f4>)
1000fa28:	4798      	blx	r3
1000fa2a:	e072      	b.n	1000fb12 <main+0x1fa>
                }                    
                break;
                
                case INT_BTN1:
                //sms_monitor_states("INT_BTN1");
                DBG_LOG_DEV("...BTN1");
1000fa2c:	4874      	ldr	r0, [pc, #464]	; (1000fc00 <main+0x2e8>)
1000fa2e:	4b75      	ldr	r3, [pc, #468]	; (1000fc04 <main+0x2ec>)
1000fa30:	4798      	blx	r3
1000fa32:	487b      	ldr	r0, [pc, #492]	; (1000fc20 <main+0x308>)
1000fa34:	4b75      	ldr	r3, [pc, #468]	; (1000fc0c <main+0x2f4>)
1000fa36:	4798      	blx	r3
                if((sms_working_mode == SMS_MODE_BUTTON_MPU) || (sms_working_mode == SMS_MODE_COMPLETE) || (sms_working_mode == SMS_MODE_BUTTON_SOLO) || (sms_working_mode == SMS_MODE_BUTTON_PRESSURE)) {
1000fa38:	4b76      	ldr	r3, [pc, #472]	; (1000fc14 <main+0x2fc>)
1000fa3a:	781b      	ldrb	r3, [r3, #0]
1000fa3c:	2b04      	cmp	r3, #4
1000fa3e:	d00b      	beq.n	1000fa58 <main+0x140>
1000fa40:	4b74      	ldr	r3, [pc, #464]	; (1000fc14 <main+0x2fc>)
1000fa42:	781b      	ldrb	r3, [r3, #0]
1000fa44:	2b07      	cmp	r3, #7
1000fa46:	d007      	beq.n	1000fa58 <main+0x140>
1000fa48:	4b72      	ldr	r3, [pc, #456]	; (1000fc14 <main+0x2fc>)
1000fa4a:	781b      	ldrb	r3, [r3, #0]
1000fa4c:	2b01      	cmp	r3, #1
1000fa4e:	d003      	beq.n	1000fa58 <main+0x140>
1000fa50:	4b70      	ldr	r3, [pc, #448]	; (1000fc14 <main+0x2fc>)
1000fa52:	781b      	ldrb	r3, [r3, #0]
1000fa54:	2b05      	cmp	r3, #5
1000fa56:	d15c      	bne.n	1000fb12 <main+0x1fa>
                        //DBG_LOG_DEV("[main]\t\t\t\tDisabling sensor int...");
                        //sms_sensors_toggle_interrupt(SMS_EXTINT_DISABLE);
                        //DBG_LOG_CONT_DEV(" done!");
                    //}                        
                    //sms_button_toggle_interrupt(SMS_BTN_INT_DISABLE, SMS_BTN_INT_DISABLE);
                    if(sms_button_fn(SMS_BTN_1) < 0) {
1000fa58:	2001      	movs	r0, #1
1000fa5a:	4b6f      	ldr	r3, [pc, #444]	; (1000fc18 <main+0x300>)
1000fa5c:	4798      	blx	r3
1000fa5e:	2800      	cmp	r0, #0
1000fa60:	da57      	bge.n	1000fb12 <main+0x1fa>
                        DBG_LOG("[main]\t\t\t\tError in sms_button_fn()!");
1000fa62:	4867      	ldr	r0, [pc, #412]	; (1000fc00 <main+0x2e8>)
1000fa64:	4b67      	ldr	r3, [pc, #412]	; (1000fc04 <main+0x2ec>)
1000fa66:	4798      	blx	r3
1000fa68:	486c      	ldr	r0, [pc, #432]	; (1000fc1c <main+0x304>)
1000fa6a:	4b68      	ldr	r3, [pc, #416]	; (1000fc0c <main+0x2f4>)
1000fa6c:	4798      	blx	r3
1000fa6e:	e050      	b.n	1000fb12 <main+0x1fa>
                break;
                
                case INT_MPU_DRDY:
                //sms_monitor_states("INT_IMU_DRDY");
                //DBG_LOG_DEV("...MPU_DRDY");
                if((sms_working_mode == SMS_MODE_BUTTON_MPU) || (sms_working_mode == SMS_MODE_COMPLETE) || (sms_working_mode == SMS_MODE_MPU_SOLO) || (sms_working_mode == SMS_MODE_MPU_PRESSURE)) {
1000fa70:	4b68      	ldr	r3, [pc, #416]	; (1000fc14 <main+0x2fc>)
1000fa72:	781b      	ldrb	r3, [r3, #0]
1000fa74:	2b04      	cmp	r3, #4
1000fa76:	d00b      	beq.n	1000fa90 <main+0x178>
1000fa78:	4b66      	ldr	r3, [pc, #408]	; (1000fc14 <main+0x2fc>)
1000fa7a:	781b      	ldrb	r3, [r3, #0]
1000fa7c:	2b07      	cmp	r3, #7
1000fa7e:	d007      	beq.n	1000fa90 <main+0x178>
1000fa80:	4b64      	ldr	r3, [pc, #400]	; (1000fc14 <main+0x2fc>)
1000fa82:	781b      	ldrb	r3, [r3, #0]
1000fa84:	2b02      	cmp	r3, #2
1000fa86:	d003      	beq.n	1000fa90 <main+0x178>
1000fa88:	4b62      	ldr	r3, [pc, #392]	; (1000fc14 <main+0x2fc>)
1000fa8a:	781b      	ldrb	r3, [r3, #0]
1000fa8c:	2b06      	cmp	r3, #6
1000fa8e:	d140      	bne.n	1000fb12 <main+0x1fa>
					gpio_disable_callback(SMS_MPU_DRDY_PIN);
1000fa90:	201e      	movs	r0, #30
1000fa92:	4b64      	ldr	r3, [pc, #400]	; (1000fc24 <main+0x30c>)
1000fa94:	4798      	blx	r3
	                sms_mpu_poll_data();
1000fa96:	4b64      	ldr	r3, [pc, #400]	; (1000fc28 <main+0x310>)
1000fa98:	4798      	blx	r3
					gpio_enable_callback(SMS_MPU_DRDY_PIN);
1000fa9a:	201e      	movs	r0, #30
1000fa9c:	4b63      	ldr	r3, [pc, #396]	; (1000fc2c <main+0x314>)
1000fa9e:	4798      	blx	r3
1000faa0:	e037      	b.n	1000fb12 <main+0x1fa>
                }              
                break;
                
                case INT_AON_TIMER:
                //DBG_LOG_DEV("...AON_TIMER");
                if((sms_working_mode == SMS_MODE_BUTTON_PRESSURE) || (sms_working_mode == SMS_MODE_COMPLETE) || (sms_working_mode == SMS_MODE_PRESSURE_SOLO) || (sms_working_mode == SMS_MODE_MPU_PRESSURE)) {
1000faa2:	4b5c      	ldr	r3, [pc, #368]	; (1000fc14 <main+0x2fc>)
1000faa4:	781b      	ldrb	r3, [r3, #0]
1000faa6:	2b05      	cmp	r3, #5
1000faa8:	d00b      	beq.n	1000fac2 <main+0x1aa>
1000faaa:	4b5a      	ldr	r3, [pc, #360]	; (1000fc14 <main+0x2fc>)
1000faac:	781b      	ldrb	r3, [r3, #0]
1000faae:	2b07      	cmp	r3, #7
1000fab0:	d007      	beq.n	1000fac2 <main+0x1aa>
1000fab2:	4b58      	ldr	r3, [pc, #352]	; (1000fc14 <main+0x2fc>)
1000fab4:	781b      	ldrb	r3, [r3, #0]
1000fab6:	2b03      	cmp	r3, #3
1000fab8:	d003      	beq.n	1000fac2 <main+0x1aa>
1000faba:	4b56      	ldr	r3, [pc, #344]	; (1000fc14 <main+0x2fc>)
1000fabc:	781b      	ldrb	r3, [r3, #0]
1000fabe:	2b06      	cmp	r3, #6
1000fac0:	d127      	bne.n	1000fb12 <main+0x1fa>
                    if(ble_current_state == BLE_STATE_PAIRED) {
1000fac2:	4b2d      	ldr	r3, [pc, #180]	; (1000fb78 <main+0x260>)
1000fac4:	781b      	ldrb	r3, [r3, #0]
1000fac6:	2b22      	cmp	r3, #34	; 0x22
1000fac8:	d102      	bne.n	1000fad0 <main+0x1b8>
                        sms_pressure_poll_data();
1000faca:	4b59      	ldr	r3, [pc, #356]	; (1000fc30 <main+0x318>)
1000facc:	4798      	blx	r3
1000face:	e020      	b.n	1000fb12 <main+0x1fa>
                    }
                    else if(ble_current_state == BLE_STATE_INDICATING) {
1000fad0:	4b29      	ldr	r3, [pc, #164]	; (1000fb78 <main+0x260>)
1000fad2:	781b      	ldrb	r3, [r3, #0]
1000fad4:	e01d      	b.n	1000fb12 <main+0x1fa>
                }                    
                break;
                
                case INT_DUALTIMER1:
                //sms_monitor_states("INT_DUALTIMER1");
                DBG_LOG_DEV("...DUALTIMER1");
1000fad6:	484a      	ldr	r0, [pc, #296]	; (1000fc00 <main+0x2e8>)
1000fad8:	4b4a      	ldr	r3, [pc, #296]	; (1000fc04 <main+0x2ec>)
1000fada:	4798      	blx	r3
1000fadc:	4855      	ldr	r0, [pc, #340]	; (1000fc34 <main+0x31c>)
1000fade:	4b4b      	ldr	r3, [pc, #300]	; (1000fc0c <main+0x2f4>)
1000fae0:	4798      	blx	r3
                sms_dualtimer_stop(DUALTIMER_TIMER1);
1000fae2:	2000      	movs	r0, #0
1000fae4:	4b54      	ldr	r3, [pc, #336]	; (1000fc38 <main+0x320>)
1000fae6:	4798      	blx	r3
                sms_dualtimer1_fn();
1000fae8:	4b54      	ldr	r3, [pc, #336]	; (1000fc3c <main+0x324>)
1000faea:	4798      	blx	r3
                break;
1000faec:	e011      	b.n	1000fb12 <main+0x1fa>
                
                case INT_DUALTIMER2:
                //sms_monitor_states("INT_DUALTIMER2");
                DBG_LOG_DEV("...DUALTIMER2");
1000faee:	4844      	ldr	r0, [pc, #272]	; (1000fc00 <main+0x2e8>)
1000faf0:	4b44      	ldr	r3, [pc, #272]	; (1000fc04 <main+0x2ec>)
1000faf2:	4798      	blx	r3
1000faf4:	4852      	ldr	r0, [pc, #328]	; (1000fc40 <main+0x328>)
1000faf6:	4b45      	ldr	r3, [pc, #276]	; (1000fc0c <main+0x2f4>)
1000faf8:	4798      	blx	r3
                sms_dualtimer_stop(DUALTIMER_TIMER2);
1000fafa:	2001      	movs	r0, #1
1000fafc:	4b4e      	ldr	r3, [pc, #312]	; (1000fc38 <main+0x320>)
1000fafe:	4798      	blx	r3
                sms_dualtimer2_fn();
1000fb00:	4b50      	ldr	r3, [pc, #320]	; (1000fc44 <main+0x32c>)
1000fb02:	4798      	blx	r3
                break;
1000fb04:	e005      	b.n	1000fb12 <main+0x1fa>
                
                default:
                DBG_LOG_DEV("...??");
1000fb06:	483e      	ldr	r0, [pc, #248]	; (1000fc00 <main+0x2e8>)
1000fb08:	4b3e      	ldr	r3, [pc, #248]	; (1000fc04 <main+0x2ec>)
1000fb0a:	4798      	blx	r3
1000fb0c:	484e      	ldr	r0, [pc, #312]	; (1000fc48 <main+0x330>)
1000fb0e:	4b3f      	ldr	r3, [pc, #252]	; (1000fc0c <main+0x2f4>)
1000fb10:	4798      	blx	r3
                //sms_monitor_states("ERROR!!");
                break;
            }
            
            //DBG_LOG_DEV("[main]\t\t\t\tEnabling button int...");
            sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
1000fb12:	2100      	movs	r1, #0
1000fb14:	2000      	movs	r0, #0
1000fb16:	4b34      	ldr	r3, [pc, #208]	; (1000fbe8 <main+0x2d0>)
1000fb18:	4798      	blx	r3
            //DBG_LOG_CONT_DEV(" done!");
            sms_current_interrupt.int_on = false;
1000fb1a:	4b36      	ldr	r3, [pc, #216]	; (1000fbf4 <main+0x2dc>)
1000fb1c:	2200      	movs	r2, #0
1000fb1e:	705a      	strb	r2, [r3, #1]
            sms_current_interrupt.source = INT_NONE;
1000fb20:	701a      	strb	r2, [r3, #0]
        }
		
		if(ready_to_send[RTS_BUTTON_POS]) {
1000fb22:	4b4a      	ldr	r3, [pc, #296]	; (1000fc4c <main+0x334>)
1000fb24:	781b      	ldrb	r3, [r3, #0]
1000fb26:	2b00      	cmp	r3, #0
1000fb28:	d008      	beq.n	1000fb3c <main+0x224>
			DBG_LOG_DEV("[main]\t\t\t\tRTS button...");
1000fb2a:	4835      	ldr	r0, [pc, #212]	; (1000fc00 <main+0x2e8>)
1000fb2c:	4b35      	ldr	r3, [pc, #212]	; (1000fc04 <main+0x2ec>)
1000fb2e:	4798      	blx	r3
1000fb30:	4847      	ldr	r0, [pc, #284]	; (1000fc50 <main+0x338>)
1000fb32:	4b36      	ldr	r3, [pc, #216]	; (1000fc0c <main+0x2f4>)
1000fb34:	4798      	blx	r3
			ready_to_send[RTS_BUTTON_POS] = false;
1000fb36:	2200      	movs	r2, #0
1000fb38:	4b44      	ldr	r3, [pc, #272]	; (1000fc4c <main+0x334>)
1000fb3a:	701a      	strb	r2, [r3, #0]
		}
		if(ready_to_send[RTS_PRESSURE_POS]) {
1000fb3c:	4b43      	ldr	r3, [pc, #268]	; (1000fc4c <main+0x334>)
1000fb3e:	785b      	ldrb	r3, [r3, #1]
1000fb40:	2b00      	cmp	r3, #0
1000fb42:	d002      	beq.n	1000fb4a <main+0x232>
			//DBG_LOG_DEV("[main]\t\t\t\tRTS pressure...");
			//sms_ble_send_characteristic(BLE_CHAR_PRESS);
			ready_to_send[RTS_PRESSURE_POS] = false;
1000fb44:	2200      	movs	r2, #0
1000fb46:	4b41      	ldr	r3, [pc, #260]	; (1000fc4c <main+0x334>)
1000fb48:	705a      	strb	r2, [r3, #1]
		}
		if(ready_to_send[RTS_MPU_POS]) {
1000fb4a:	4b40      	ldr	r3, [pc, #256]	; (1000fc4c <main+0x334>)
1000fb4c:	789b      	ldrb	r3, [r3, #2]
1000fb4e:	2b00      	cmp	r3, #0
1000fb50:	d005      	beq.n	1000fb5e <main+0x246>
			//DBG_LOG_DEV("[main]\t\t\t\tRTS mpu...");
			sms_ble_send_characteristic(BLE_CHAR_MPU);
1000fb52:	2003      	movs	r0, #3
1000fb54:	4b3f      	ldr	r3, [pc, #252]	; (1000fc54 <main+0x33c>)
1000fb56:	4798      	blx	r3
			ready_to_send[RTS_MPU_POS] = false;
1000fb58:	2200      	movs	r2, #0
1000fb5a:	4b3c      	ldr	r3, [pc, #240]	; (1000fc4c <main+0x334>)
1000fb5c:	709a      	strb	r2, [r3, #2]
		}
        
        
        if(ulp_ready) {
1000fb5e:	4b3e      	ldr	r3, [pc, #248]	; (1000fc58 <main+0x340>)
1000fb60:	781b      	ldrb	r3, [r3, #0]
1000fb62:	2b00      	cmp	r3, #0
1000fb64:	d003      	beq.n	1000fb6e <main+0x256>
            //DBG_LOG_DEV("[main]\t\t\t\tULP...");
            ulp_active = true;
1000fb66:	2201      	movs	r2, #1
1000fb68:	4b23      	ldr	r3, [pc, #140]	; (1000fbf8 <main+0x2e0>)
1000fb6a:	701a      	strb	r2, [r3, #0]
1000fb6c:	e71b      	b.n	1000f9a6 <main+0x8e>
            //release_sleep_lock();
            //DBG_LOG_CONT_DEV(" zzzz");
            //DBG_LOG_CONT_DEV(" !!");
        }            
        else {
            ulp_active = false;
1000fb6e:	2200      	movs	r2, #0
1000fb70:	4b21      	ldr	r3, [pc, #132]	; (1000fbf8 <main+0x2e0>)
1000fb72:	701a      	strb	r2, [r3, #0]
1000fb74:	e717      	b.n	1000f9a6 <main+0x8e>
1000fb76:	46c0      	nop			; (mov r8, r8)
1000fb78:	1001a110 	.word	0x1001a110
1000fb7c:	1000f111 	.word	0x1000f111
1000fb80:	1000c6a5 	.word	0x1000c6a5
1000fb84:	1000ee05 	.word	0x1000ee05
1000fb88:	1000f665 	.word	0x1000f665
1000fb8c:	1000f89d 	.word	0x1000f89d
1000fb90:	1000b5f1 	.word	0x1000b5f1
1000fb94:	100080e9 	.word	0x100080e9
1000fb98:	1000a565 	.word	0x1000a565
1000fb9c:	1000ae95 	.word	0x1000ae95
1000fba0:	1000aa39 	.word	0x1000aa39
1000fba4:	1000b4a5 	.word	0x1000b4a5
1000fba8:	1000abf5 	.word	0x1000abf5
1000fbac:	1000a98d 	.word	0x1000a98d
1000fbb0:	1000e485 	.word	0x1000e485
1000fbb4:	1000a925 	.word	0x1000a925
1000fbb8:	1000b32d 	.word	0x1000b32d
1000fbbc:	1000ae09 	.word	0x1000ae09
1000fbc0:	1000f851 	.word	0x1000f851
1000fbc4:	1000f6a9 	.word	0x1000f6a9
1000fbc8:	1000b6b1 	.word	0x1000b6b1
1000fbcc:	1000b62d 	.word	0x1000b62d
1000fbd0:	1000b6d5 	.word	0x1000b6d5
1000fbd4:	1000a619 	.word	0x1000a619
1000fbd8:	1000ac75 	.word	0x1000ac75
1000fbdc:	10016b50 	.word	0x10016b50
1000fbe0:	1000e3b5 	.word	0x1000e3b5
1000fbe4:	10016b9c 	.word	0x10016b9c
1000fbe8:	1000a8d9 	.word	0x1000a8d9
1000fbec:	10009f4d 	.word	0x10009f4d
1000fbf0:	1000ec7d 	.word	0x1000ec7d
1000fbf4:	1001a0f8 	.word	0x1001a0f8
1000fbf8:	1001a11b 	.word	0x1001a11b
1000fbfc:	10018158 	.word	0x10018158
1000fc00:	100165a4 	.word	0x100165a4
1000fc04:	100153f9 	.word	0x100153f9
1000fc08:	10018174 	.word	0x10018174
1000fc0c:	100152d9 	.word	0x100152d9
1000fc10:	10018184 	.word	0x10018184
1000fc14:	10019ff8 	.word	0x10019ff8
1000fc18:	1000a695 	.word	0x1000a695
1000fc1c:	1001818c 	.word	0x1001818c
1000fc20:	100181b0 	.word	0x100181b0
1000fc24:	1000c669 	.word	0x1000c669
1000fc28:	1000ad6d 	.word	0x1000ad6d
1000fc2c:	1000c60d 	.word	0x1000c60d
1000fc30:	1000b2cd 	.word	0x1000b2cd
1000fc34:	100181b8 	.word	0x100181b8
1000fc38:	1000b6a5 	.word	0x1000b6a5
1000fc3c:	1000b6f9 	.word	0x1000b6f9
1000fc40:	100181c8 	.word	0x100181c8
1000fc44:	1000b939 	.word	0x1000b939
1000fc48:	100181d8 	.word	0x100181d8
1000fc4c:	1001a114 	.word	0x1001a114
1000fc50:	100181e0 	.word	0x100181e0
1000fc54:	1000a245 	.word	0x1000a245
1000fc58:	10019ff9 	.word	0x10019ff9

1000fc5c <internal_event_post>:
1000fc5c:	b570      	push	{r4, r5, r6, lr}
1000fc5e:	4d12      	ldr	r5, [pc, #72]	; (1000fca8 <internal_event_post+0x4c>)
1000fc60:	682c      	ldr	r4, [r5, #0]
1000fc62:	2c00      	cmp	r4, #0
1000fc64:	d014      	beq.n	1000fc90 <internal_event_post+0x34>
1000fc66:	6826      	ldr	r6, [r4, #0]
1000fc68:	60e2      	str	r2, [r4, #12]
1000fc6a:	602e      	str	r6, [r5, #0]
1000fc6c:	2500      	movs	r5, #0
1000fc6e:	4a0f      	ldr	r2, [pc, #60]	; (1000fcac <internal_event_post+0x50>)
1000fc70:	8123      	strh	r3, [r4, #8]
1000fc72:	6813      	ldr	r3, [r2, #0]
1000fc74:	6025      	str	r5, [r4, #0]
1000fc76:	80a0      	strh	r0, [r4, #4]
1000fc78:	80e1      	strh	r1, [r4, #6]
1000fc7a:	42ab      	cmp	r3, r5
1000fc7c:	d101      	bne.n	1000fc82 <internal_event_post+0x26>
1000fc7e:	6014      	str	r4, [r2, #0]
1000fc80:	e011      	b.n	1000fca6 <internal_event_post+0x4a>
1000fc82:	681a      	ldr	r2, [r3, #0]
1000fc84:	2a00      	cmp	r2, #0
1000fc86:	d001      	beq.n	1000fc8c <internal_event_post+0x30>
1000fc88:	1c13      	adds	r3, r2, #0
1000fc8a:	e7fa      	b.n	1000fc82 <internal_event_post+0x26>
1000fc8c:	601c      	str	r4, [r3, #0]
1000fc8e:	e00a      	b.n	1000fca6 <internal_event_post+0x4a>
1000fc90:	b2c4      	uxtb	r4, r0
1000fc92:	2c00      	cmp	r4, #0
1000fc94:	d107      	bne.n	1000fca6 <internal_event_post+0x4a>
1000fc96:	4c06      	ldr	r4, [pc, #24]	; (1000fcb0 <internal_event_post+0x54>)
1000fc98:	60e2      	str	r2, [r4, #12]
1000fc9a:	2201      	movs	r2, #1
1000fc9c:	8123      	strh	r3, [r4, #8]
1000fc9e:	4b05      	ldr	r3, [pc, #20]	; (1000fcb4 <internal_event_post+0x58>)
1000fca0:	80a0      	strh	r0, [r4, #4]
1000fca2:	80e1      	strh	r1, [r4, #6]
1000fca4:	701a      	strb	r2, [r3, #0]
1000fca6:	bd70      	pop	{r4, r5, r6, pc}
1000fca8:	10019ea8 	.word	0x10019ea8
1000fcac:	10019ea4 	.word	0x10019ea4
1000fcb0:	10019e90 	.word	0x10019e90
1000fcb4:	10019ea0 	.word	0x10019ea0

1000fcb8 <internal_event_init>:
1000fcb8:	b510      	push	{r4, lr}
1000fcba:	4b08      	ldr	r3, [pc, #32]	; (1000fcdc <internal_event_init+0x24>)
1000fcbc:	0900      	lsrs	r0, r0, #4
1000fcbe:	0100      	lsls	r0, r0, #4
1000fcc0:	681a      	ldr	r2, [r3, #0]
1000fcc2:	1808      	adds	r0, r1, r0
1000fcc4:	4281      	cmp	r1, r0
1000fcc6:	d003      	beq.n	1000fcd0 <internal_event_init+0x18>
1000fcc8:	600a      	str	r2, [r1, #0]
1000fcca:	1c0a      	adds	r2, r1, #0
1000fccc:	3110      	adds	r1, #16
1000fcce:	e7f9      	b.n	1000fcc4 <internal_event_init+0xc>
1000fcd0:	601a      	str	r2, [r3, #0]
1000fcd2:	2200      	movs	r2, #0
1000fcd4:	4b02      	ldr	r3, [pc, #8]	; (1000fce0 <internal_event_init+0x28>)
1000fcd6:	601a      	str	r2, [r3, #0]
1000fcd8:	bd10      	pop	{r4, pc}
1000fcda:	46c0      	nop			; (mov r8, r8)
1000fcdc:	10019ea8 	.word	0x10019ea8
1000fce0:	10019ea4 	.word	0x10019ea4

1000fce4 <special_events_handler>:
1000fce4:	b538      	push	{r3, r4, r5, lr}
1000fce6:	4c1b      	ldr	r4, [pc, #108]	; (1000fd54 <special_events_handler+0x70>)
1000fce8:	1c03      	adds	r3, r0, #0
1000fcea:	8825      	ldrh	r5, [r4, #0]
1000fcec:	1c08      	adds	r0, r1, #0
1000fcee:	1c21      	adds	r1, r4, #0
1000fcf0:	429d      	cmp	r5, r3
1000fcf2:	d107      	bne.n	1000fd04 <special_events_handler+0x20>
1000fcf4:	88a5      	ldrh	r5, [r4, #4]
1000fcf6:	4285      	cmp	r5, r0
1000fcf8:	d104      	bne.n	1000fd04 <special_events_handler+0x20>
1000fcfa:	2301      	movs	r3, #1
1000fcfc:	425b      	negs	r3, r3
1000fcfe:	8023      	strh	r3, [r4, #0]
1000fd00:	60a2      	str	r2, [r4, #8]
1000fd02:	e009      	b.n	1000fd18 <special_events_handler+0x34>
1000fd04:	884c      	ldrh	r4, [r1, #2]
1000fd06:	429c      	cmp	r4, r3
1000fd08:	d10a      	bne.n	1000fd20 <special_events_handler+0x3c>
1000fd0a:	888c      	ldrh	r4, [r1, #4]
1000fd0c:	4284      	cmp	r4, r0
1000fd0e:	d107      	bne.n	1000fd20 <special_events_handler+0x3c>
1000fd10:	2301      	movs	r3, #1
1000fd12:	425b      	negs	r3, r3
1000fd14:	804b      	strh	r3, [r1, #2]
1000fd16:	608a      	str	r2, [r1, #8]
1000fd18:	4b0f      	ldr	r3, [pc, #60]	; (1000fd58 <special_events_handler+0x74>)
1000fd1a:	4798      	blx	r3
1000fd1c:	2001      	movs	r0, #1
1000fd1e:	e017      	b.n	1000fd50 <special_events_handler+0x6c>
1000fd20:	490e      	ldr	r1, [pc, #56]	; (1000fd5c <special_events_handler+0x78>)
1000fd22:	428b      	cmp	r3, r1
1000fd24:	d00e      	beq.n	1000fd44 <special_events_handler+0x60>
1000fd26:	490e      	ldr	r1, [pc, #56]	; (1000fd60 <special_events_handler+0x7c>)
1000fd28:	428b      	cmp	r3, r1
1000fd2a:	d007      	beq.n	1000fd3c <special_events_handler+0x58>
1000fd2c:	490d      	ldr	r1, [pc, #52]	; (1000fd64 <special_events_handler+0x80>)
1000fd2e:	2000      	movs	r0, #0
1000fd30:	428b      	cmp	r3, r1
1000fd32:	d10d      	bne.n	1000fd50 <special_events_handler+0x6c>
1000fd34:	1c10      	adds	r0, r2, #0
1000fd36:	4b0c      	ldr	r3, [pc, #48]	; (1000fd68 <special_events_handler+0x84>)
1000fd38:	4798      	blx	r3
1000fd3a:	e7ef      	b.n	1000fd1c <special_events_handler+0x38>
1000fd3c:	1c11      	adds	r1, r2, #0
1000fd3e:	4b0b      	ldr	r3, [pc, #44]	; (1000fd6c <special_events_handler+0x88>)
1000fd40:	2200      	movs	r2, #0
1000fd42:	e002      	b.n	1000fd4a <special_events_handler+0x66>
1000fd44:	1c11      	adds	r1, r2, #0
1000fd46:	2200      	movs	r2, #0
1000fd48:	4b09      	ldr	r3, [pc, #36]	; (1000fd70 <special_events_handler+0x8c>)
1000fd4a:	4798      	blx	r3
1000fd4c:	4243      	negs	r3, r0
1000fd4e:	4158      	adcs	r0, r3
1000fd50:	bd38      	pop	{r3, r4, r5, pc}
1000fd52:	46c0      	nop			; (mov r8, r8)
1000fd54:	1001adb0 	.word	0x1001adb0
1000fd58:	10011741 	.word	0x10011741
1000fd5c:	00000e13 	.word	0x00000e13
1000fd60:	00000e15 	.word	0x00000e15
1000fd64:	00000e01 	.word	0x00000e01
1000fd68:	10011ab1 	.word	0x10011ab1
1000fd6c:	10011c71 	.word	0x10011c71
1000fd70:	10011d49 	.word	0x10011d49

1000fd74 <at_ble_event_get>:
1000fd74:	2300      	movs	r3, #0
1000fd76:	b5f0      	push	{r4, r5, r6, r7, lr}
1000fd78:	b087      	sub	sp, #28
1000fd7a:	9204      	str	r2, [sp, #16]
1000fd7c:	7003      	strb	r3, [r0, #0]
1000fd7e:	9b04      	ldr	r3, [sp, #16]
1000fd80:	9003      	str	r0, [sp, #12]
1000fd82:	3b01      	subs	r3, #1
1000fd84:	1c0d      	adds	r5, r1, #0
1000fd86:	9305      	str	r3, [sp, #20]
1000fd88:	3303      	adds	r3, #3
1000fd8a:	d802      	bhi.n	1000fd92 <at_ble_event_get+0x1e>
1000fd8c:	9804      	ldr	r0, [sp, #16]
1000fd8e:	4bae      	ldr	r3, [pc, #696]	; (10010048 <at_ble_event_get+0x2d4>)
1000fd90:	4798      	blx	r3
1000fd92:	9b05      	ldr	r3, [sp, #20]
1000fd94:	4cad      	ldr	r4, [pc, #692]	; (1001004c <at_ble_event_get+0x2d8>)
1000fd96:	3303      	adds	r3, #3
1000fd98:	d902      	bls.n	1000fda0 <at_ble_event_get+0x2c>
1000fd9a:	2300      	movs	r3, #0
1000fd9c:	9302      	str	r3, [sp, #8]
1000fd9e:	e015      	b.n	1000fdcc <at_ble_event_get+0x58>
1000fda0:	2300      	movs	r3, #0
1000fda2:	9302      	str	r3, [sp, #8]
1000fda4:	6823      	ldr	r3, [r4, #0]
1000fda6:	2b00      	cmp	r3, #0
1000fda8:	d113      	bne.n	1000fdd2 <at_ble_event_get+0x5e>
1000fdaa:	9b02      	ldr	r3, [sp, #8]
1000fdac:	2bd0      	cmp	r3, #208	; 0xd0
1000fdae:	d100      	bne.n	1000fdb2 <at_ble_event_get+0x3e>
1000fdb0:	e2da      	b.n	10010368 <at_ble_event_get+0x5f4>
1000fdb2:	9804      	ldr	r0, [sp, #16]
1000fdb4:	4ba6      	ldr	r3, [pc, #664]	; (10010050 <at_ble_event_get+0x2dc>)
1000fdb6:	4798      	blx	r3
1000fdb8:	9002      	str	r0, [sp, #8]
1000fdba:	2802      	cmp	r0, #2
1000fdbc:	d1f2      	bne.n	1000fda4 <at_ble_event_get+0x30>
1000fdbe:	e03f      	b.n	1000fe40 <at_ble_event_get+0xcc>
1000fdc0:	9804      	ldr	r0, [sp, #16]
1000fdc2:	4ba3      	ldr	r3, [pc, #652]	; (10010050 <at_ble_event_get+0x2dc>)
1000fdc4:	4798      	blx	r3
1000fdc6:	9002      	str	r0, [sp, #8]
1000fdc8:	2802      	cmp	r0, #2
1000fdca:	d039      	beq.n	1000fe40 <at_ble_event_get+0xcc>
1000fdcc:	6823      	ldr	r3, [r4, #0]
1000fdce:	2b00      	cmp	r3, #0
1000fdd0:	d0f6      	beq.n	1000fdc0 <at_ble_event_get+0x4c>
1000fdd2:	9b02      	ldr	r3, [sp, #8]
1000fdd4:	2bd0      	cmp	r3, #208	; 0xd0
1000fdd6:	d100      	bne.n	1000fdda <at_ble_event_get+0x66>
1000fdd8:	e2c6      	b.n	10010368 <at_ble_event_get+0x5f4>
1000fdda:	9b02      	ldr	r3, [sp, #8]
1000fddc:	3b03      	subs	r3, #3
1000fdde:	1e5a      	subs	r2, r3, #1
1000fde0:	4193      	sbcs	r3, r2
1000fde2:	9a02      	ldr	r2, [sp, #8]
1000fde4:	425b      	negs	r3, r3
1000fde6:	401a      	ands	r2, r3
1000fde8:	6823      	ldr	r3, [r4, #0]
1000fdea:	9202      	str	r2, [sp, #8]
1000fdec:	2b00      	cmp	r3, #0
1000fdee:	d100      	bne.n	1000fdf2 <at_ble_event_get+0x7e>
1000fdf0:	e2c2      	b.n	10010378 <at_ble_event_get+0x604>
1000fdf2:	681a      	ldr	r2, [r3, #0]
1000fdf4:	68de      	ldr	r6, [r3, #12]
1000fdf6:	6022      	str	r2, [r4, #0]
1000fdf8:	88da      	ldrh	r2, [r3, #6]
1000fdfa:	9201      	str	r2, [sp, #4]
1000fdfc:	4a95      	ldr	r2, [pc, #596]	; (10010054 <at_ble_event_get+0x2e0>)
1000fdfe:	889c      	ldrh	r4, [r3, #4]
1000fe00:	6811      	ldr	r1, [r2, #0]
1000fe02:	6013      	str	r3, [r2, #0]
1000fe04:	6019      	str	r1, [r3, #0]
1000fe06:	4b94      	ldr	r3, [pc, #592]	; (10010058 <at_ble_event_get+0x2e4>)
1000fe08:	781b      	ldrb	r3, [r3, #0]
1000fe0a:	2b01      	cmp	r3, #1
1000fe0c:	d10f      	bne.n	1000fe2e <at_ble_event_get+0xba>
1000fe0e:	4b93      	ldr	r3, [pc, #588]	; (1001005c <at_ble_event_get+0x2e8>)
1000fe10:	4a92      	ldr	r2, [pc, #584]	; (1001005c <at_ble_event_get+0x2e8>)
1000fe12:	8898      	ldrh	r0, [r3, #4]
1000fe14:	88d9      	ldrh	r1, [r3, #6]
1000fe16:	68d2      	ldr	r2, [r2, #12]
1000fe18:	891b      	ldrh	r3, [r3, #8]
1000fe1a:	4f91      	ldr	r7, [pc, #580]	; (10010060 <at_ble_event_get+0x2ec>)
1000fe1c:	47b8      	blx	r7
1000fe1e:	2210      	movs	r2, #16
1000fe20:	4b90      	ldr	r3, [pc, #576]	; (10010064 <at_ble_event_get+0x2f0>)
1000fe22:	488e      	ldr	r0, [pc, #568]	; (1001005c <at_ble_event_get+0x2e8>)
1000fe24:	2100      	movs	r1, #0
1000fe26:	4798      	blx	r3
1000fe28:	2300      	movs	r3, #0
1000fe2a:	4a8b      	ldr	r2, [pc, #556]	; (10010058 <at_ble_event_get+0x2e4>)
1000fe2c:	7013      	strb	r3, [r2, #0]
1000fe2e:	9b02      	ldr	r3, [sp, #8]
1000fe30:	2b00      	cmp	r3, #0
1000fe32:	d114      	bne.n	1000fe5e <at_ble_event_get+0xea>
1000fe34:	4b8c      	ldr	r3, [pc, #560]	; (10010068 <at_ble_event_get+0x2f4>)
1000fe36:	429c      	cmp	r4, r3
1000fe38:	d009      	beq.n	1000fe4e <at_ble_event_get+0xda>
1000fe3a:	4b8c      	ldr	r3, [pc, #560]	; (1001006c <at_ble_event_get+0x2f8>)
1000fe3c:	429c      	cmp	r4, r3
1000fe3e:	d127      	bne.n	1000fe90 <at_ble_event_get+0x11c>
1000fe40:	233a      	movs	r3, #58	; 0x3a
1000fe42:	9a03      	ldr	r2, [sp, #12]
1000fe44:	7013      	strb	r3, [r2, #0]
1000fe46:	2300      	movs	r3, #0
1000fe48:	9302      	str	r3, [sp, #8]
1000fe4a:	1c1d      	adds	r5, r3, #0
1000fe4c:	e007      	b.n	1000fe5e <at_ble_event_get+0xea>
1000fe4e:	9b01      	ldr	r3, [sp, #4]
1000fe50:	42a3      	cmp	r3, r4
1000fe52:	d000      	beq.n	1000fe56 <at_ble_event_get+0xe2>
1000fe54:	e28a      	b.n	1001036c <at_ble_event_get+0x5f8>
1000fe56:	2338      	movs	r3, #56	; 0x38
1000fe58:	9a03      	ldr	r2, [sp, #12]
1000fe5a:	7013      	strb	r3, [r2, #0]
1000fe5c:	602e      	str	r6, [r5, #0]
1000fe5e:	9b03      	ldr	r3, [sp, #12]
1000fe60:	781b      	ldrb	r3, [r3, #0]
1000fe62:	2b3b      	cmp	r3, #59	; 0x3b
1000fe64:	d101      	bne.n	1000fe6a <at_ble_event_get+0xf6>
1000fe66:	4b82      	ldr	r3, [pc, #520]	; (10010070 <at_ble_event_get+0x2fc>)
1000fe68:	4798      	blx	r3
1000fe6a:	9b03      	ldr	r3, [sp, #12]
1000fe6c:	781b      	ldrb	r3, [r3, #0]
1000fe6e:	2b3b      	cmp	r3, #59	; 0x3b
1000fe70:	d003      	beq.n	1000fe7a <at_ble_event_get+0x106>
1000fe72:	9b05      	ldr	r3, [sp, #20]
1000fe74:	3303      	adds	r3, #3
1000fe76:	d904      	bls.n	1000fe82 <at_ble_event_get+0x10e>
1000fe78:	e283      	b.n	10010382 <at_ble_event_get+0x60e>
1000fe7a:	9b02      	ldr	r3, [sp, #8]
1000fe7c:	2b00      	cmp	r3, #0
1000fe7e:	d088      	beq.n	1000fd92 <at_ble_event_get+0x1e>
1000fe80:	e7f7      	b.n	1000fe72 <at_ble_event_get+0xfe>
1000fe82:	9b02      	ldr	r3, [sp, #8]
1000fe84:	2bd0      	cmp	r3, #208	; 0xd0
1000fe86:	d100      	bne.n	1000fe8a <at_ble_event_get+0x116>
1000fe88:	e27b      	b.n	10010382 <at_ble_event_get+0x60e>
1000fe8a:	4b7a      	ldr	r3, [pc, #488]	; (10010074 <at_ble_event_get+0x300>)
1000fe8c:	4798      	blx	r3
1000fe8e:	e278      	b.n	10010382 <at_ble_event_get+0x60e>
1000fe90:	9b01      	ldr	r3, [sp, #4]
1000fe92:	2bbb      	cmp	r3, #187	; 0xbb
1000fe94:	d125      	bne.n	1000fee2 <at_ble_event_get+0x16e>
1000fe96:	2cbb      	cmp	r4, #187	; 0xbb
1000fe98:	d123      	bne.n	1000fee2 <at_ble_event_get+0x16e>
1000fe9a:	466b      	mov	r3, sp
1000fe9c:	891b      	ldrh	r3, [r3, #8]
1000fe9e:	80ab      	strh	r3, [r5, #4]
1000fea0:	78b3      	ldrb	r3, [r6, #2]
1000fea2:	7872      	ldrb	r2, [r6, #1]
1000fea4:	78f0      	ldrb	r0, [r6, #3]
1000fea6:	021b      	lsls	r3, r3, #8
1000fea8:	4313      	orrs	r3, r2
1000feaa:	7971      	ldrb	r1, [r6, #5]
1000feac:	7932      	ldrb	r2, [r6, #4]
1000feae:	70a8      	strb	r0, [r5, #2]
1000feb0:	4871      	ldr	r0, [pc, #452]	; (10010078 <at_ble_event_get+0x304>)
1000feb2:	802b      	strh	r3, [r5, #0]
1000feb4:	4283      	cmp	r3, r0
1000feb6:	d806      	bhi.n	1000fec6 <at_ble_event_get+0x152>
1000feb8:	4a70      	ldr	r2, [pc, #448]	; (1001007c <at_ble_event_get+0x308>)
1000feba:	4293      	cmp	r3, r2
1000febc:	d20b      	bcs.n	1000fed6 <at_ble_event_get+0x162>
1000febe:	4a70      	ldr	r2, [pc, #448]	; (10010080 <at_ble_event_get+0x30c>)
1000fec0:	4293      	cmp	r3, r2
1000fec2:	d008      	beq.n	1000fed6 <at_ble_event_get+0x162>
1000fec4:	e009      	b.n	1000feda <at_ble_event_get+0x166>
1000fec6:	486f      	ldr	r0, [pc, #444]	; (10010084 <at_ble_event_get+0x310>)
1000fec8:	4283      	cmp	r3, r0
1000feca:	d106      	bne.n	1000feda <at_ble_event_get+0x166>
1000fecc:	020b      	lsls	r3, r1, #8
1000fece:	4313      	orrs	r3, r2
1000fed0:	80ab      	strh	r3, [r5, #4]
1000fed2:	2337      	movs	r3, #55	; 0x37
1000fed4:	e002      	b.n	1000fedc <at_ble_event_get+0x168>
1000fed6:	2336      	movs	r3, #54	; 0x36
1000fed8:	e000      	b.n	1000fedc <at_ble_event_get+0x168>
1000feda:	2300      	movs	r3, #0
1000fedc:	9a03      	ldr	r2, [sp, #12]
1000fede:	7013      	strb	r3, [r2, #0]
1000fee0:	e7bd      	b.n	1000fe5e <at_ble_event_get+0xea>
1000fee2:	4b69      	ldr	r3, [pc, #420]	; (10010088 <at_ble_event_get+0x314>)
1000fee4:	429c      	cmp	r4, r3
1000fee6:	d100      	bne.n	1000feea <at_ble_event_get+0x176>
1000fee8:	e144      	b.n	10010174 <at_ble_event_get+0x400>
1000feea:	d865      	bhi.n	1000ffb8 <at_ble_event_get+0x244>
1000feec:	4b67      	ldr	r3, [pc, #412]	; (1001008c <at_ble_event_get+0x318>)
1000feee:	429c      	cmp	r4, r3
1000fef0:	d100      	bne.n	1000fef4 <at_ble_event_get+0x180>
1000fef2:	e1d5      	b.n	100102a0 <at_ble_event_get+0x52c>
1000fef4:	d82f      	bhi.n	1000ff56 <at_ble_event_get+0x1e2>
1000fef6:	4b66      	ldr	r3, [pc, #408]	; (10010090 <at_ble_event_get+0x31c>)
1000fef8:	429c      	cmp	r4, r3
1000fefa:	d100      	bne.n	1000fefe <at_ble_event_get+0x18a>
1000fefc:	e1e0      	b.n	100102c0 <at_ble_event_get+0x54c>
1000fefe:	d813      	bhi.n	1000ff28 <at_ble_event_get+0x1b4>
1000ff00:	4b64      	ldr	r3, [pc, #400]	; (10010094 <at_ble_event_get+0x320>)
1000ff02:	429c      	cmp	r4, r3
1000ff04:	d100      	bne.n	1000ff08 <at_ble_event_get+0x194>
1000ff06:	e1a3      	b.n	10010250 <at_ble_event_get+0x4dc>
1000ff08:	d804      	bhi.n	1000ff14 <at_ble_event_get+0x1a0>
1000ff0a:	2638      	movs	r6, #56	; 0x38
1000ff0c:	42b4      	cmp	r4, r6
1000ff0e:	d100      	bne.n	1000ff12 <at_ble_event_get+0x19e>
1000ff10:	e225      	b.n	1001035e <at_ble_event_get+0x5ea>
1000ff12:	e117      	b.n	10010144 <at_ble_event_get+0x3d0>
1000ff14:	4b60      	ldr	r3, [pc, #384]	; (10010098 <at_ble_event_get+0x324>)
1000ff16:	429c      	cmp	r4, r3
1000ff18:	d100      	bne.n	1000ff1c <at_ble_event_get+0x1a8>
1000ff1a:	e19f      	b.n	1001025c <at_ble_event_get+0x4e8>
1000ff1c:	33fe      	adds	r3, #254	; 0xfe
1000ff1e:	33ff      	adds	r3, #255	; 0xff
1000ff20:	429c      	cmp	r4, r3
1000ff22:	d100      	bne.n	1000ff26 <at_ble_event_get+0x1b2>
1000ff24:	e1d3      	b.n	100102ce <at_ble_event_get+0x55a>
1000ff26:	e10d      	b.n	10010144 <at_ble_event_get+0x3d0>
1000ff28:	4b5c      	ldr	r3, [pc, #368]	; (1001009c <at_ble_event_get+0x328>)
1000ff2a:	429c      	cmp	r4, r3
1000ff2c:	d100      	bne.n	1000ff30 <at_ble_event_get+0x1bc>
1000ff2e:	e1a9      	b.n	10010284 <at_ble_event_get+0x510>
1000ff30:	d808      	bhi.n	1000ff44 <at_ble_event_get+0x1d0>
1000ff32:	4b5b      	ldr	r3, [pc, #364]	; (100100a0 <at_ble_event_get+0x32c>)
1000ff34:	429c      	cmp	r4, r3
1000ff36:	d100      	bne.n	1000ff3a <at_ble_event_get+0x1c6>
1000ff38:	e196      	b.n	10010268 <at_ble_event_get+0x4f4>
1000ff3a:	4b5a      	ldr	r3, [pc, #360]	; (100100a4 <at_ble_event_get+0x330>)
1000ff3c:	429c      	cmp	r4, r3
1000ff3e:	d100      	bne.n	1000ff42 <at_ble_event_get+0x1ce>
1000ff40:	e199      	b.n	10010276 <at_ble_event_get+0x502>
1000ff42:	e0ff      	b.n	10010144 <at_ble_event_get+0x3d0>
1000ff44:	4b58      	ldr	r3, [pc, #352]	; (100100a8 <at_ble_event_get+0x334>)
1000ff46:	429c      	cmp	r4, r3
1000ff48:	d100      	bne.n	1000ff4c <at_ble_event_get+0x1d8>
1000ff4a:	e1a2      	b.n	10010292 <at_ble_event_get+0x51e>
1000ff4c:	4b57      	ldr	r3, [pc, #348]	; (100100ac <at_ble_event_get+0x338>)
1000ff4e:	429c      	cmp	r4, r3
1000ff50:	d100      	bne.n	1000ff54 <at_ble_event_get+0x1e0>
1000ff52:	e1d4      	b.n	100102fe <at_ble_event_get+0x58a>
1000ff54:	e0f6      	b.n	10010144 <at_ble_event_get+0x3d0>
1000ff56:	4b56      	ldr	r3, [pc, #344]	; (100100b0 <at_ble_event_get+0x33c>)
1000ff58:	429c      	cmp	r4, r3
1000ff5a:	d100      	bne.n	1000ff5e <at_ble_event_get+0x1ea>
1000ff5c:	e1c8      	b.n	100102f0 <at_ble_event_get+0x57c>
1000ff5e:	d812      	bhi.n	1000ff86 <at_ble_event_get+0x212>
1000ff60:	4b54      	ldr	r3, [pc, #336]	; (100100b4 <at_ble_event_get+0x340>)
1000ff62:	429c      	cmp	r4, r3
1000ff64:	d100      	bne.n	1000ff68 <at_ble_event_get+0x1f4>
1000ff66:	e1d1      	b.n	1001030c <at_ble_event_get+0x598>
1000ff68:	d804      	bhi.n	1000ff74 <at_ble_event_get+0x200>
1000ff6a:	4b53      	ldr	r3, [pc, #332]	; (100100b8 <at_ble_event_get+0x344>)
1000ff6c:	429c      	cmp	r4, r3
1000ff6e:	d100      	bne.n	1000ff72 <at_ble_event_get+0x1fe>
1000ff70:	e19b      	b.n	100102aa <at_ble_event_get+0x536>
1000ff72:	e0e7      	b.n	10010144 <at_ble_event_get+0x3d0>
1000ff74:	4b51      	ldr	r3, [pc, #324]	; (100100bc <at_ble_event_get+0x348>)
1000ff76:	429c      	cmp	r4, r3
1000ff78:	d100      	bne.n	1000ff7c <at_ble_event_get+0x208>
1000ff7a:	e1ad      	b.n	100102d8 <at_ble_event_get+0x564>
1000ff7c:	4b50      	ldr	r3, [pc, #320]	; (100100c0 <at_ble_event_get+0x34c>)
1000ff7e:	429c      	cmp	r4, r3
1000ff80:	d100      	bne.n	1000ff84 <at_ble_event_get+0x210>
1000ff82:	e1b0      	b.n	100102e6 <at_ble_event_get+0x572>
1000ff84:	e0de      	b.n	10010144 <at_ble_event_get+0x3d0>
1000ff86:	4b4f      	ldr	r3, [pc, #316]	; (100100c4 <at_ble_event_get+0x350>)
1000ff88:	429c      	cmp	r4, r3
1000ff8a:	d100      	bne.n	1000ff8e <at_ble_event_get+0x21a>
1000ff8c:	e0e0      	b.n	10010150 <at_ble_event_get+0x3dc>
1000ff8e:	d809      	bhi.n	1000ffa4 <at_ble_event_get+0x230>
1000ff90:	3b08      	subs	r3, #8
1000ff92:	429c      	cmp	r4, r3
1000ff94:	d100      	bne.n	1000ff98 <at_ble_event_get+0x224>
1000ff96:	e0d7      	b.n	10010148 <at_ble_event_get+0x3d4>
1000ff98:	4b4b      	ldr	r3, [pc, #300]	; (100100c8 <at_ble_event_get+0x354>)
1000ff9a:	2639      	movs	r6, #57	; 0x39
1000ff9c:	429c      	cmp	r4, r3
1000ff9e:	d100      	bne.n	1000ffa2 <at_ble_event_get+0x22e>
1000ffa0:	e1dd      	b.n	1001035e <at_ble_event_get+0x5ea>
1000ffa2:	e0cf      	b.n	10010144 <at_ble_event_get+0x3d0>
1000ffa4:	23d1      	movs	r3, #209	; 0xd1
1000ffa6:	011b      	lsls	r3, r3, #4
1000ffa8:	429c      	cmp	r4, r3
1000ffaa:	d100      	bne.n	1000ffae <at_ble_event_get+0x23a>
1000ffac:	e0d6      	b.n	1001015c <at_ble_event_get+0x3e8>
1000ffae:	4b47      	ldr	r3, [pc, #284]	; (100100cc <at_ble_event_get+0x358>)
1000ffb0:	429c      	cmp	r4, r3
1000ffb2:	d100      	bne.n	1000ffb6 <at_ble_event_get+0x242>
1000ffb4:	e0d8      	b.n	10010168 <at_ble_event_get+0x3f4>
1000ffb6:	e0c5      	b.n	10010144 <at_ble_event_get+0x3d0>
1000ffb8:	4b45      	ldr	r3, [pc, #276]	; (100100d0 <at_ble_event_get+0x35c>)
1000ffba:	429c      	cmp	r4, r3
1000ffbc:	d100      	bne.n	1000ffc0 <at_ble_event_get+0x24c>
1000ffbe:	e117      	b.n	100101f0 <at_ble_event_get+0x47c>
1000ffc0:	d82e      	bhi.n	10010020 <at_ble_event_get+0x2ac>
1000ffc2:	4b44      	ldr	r3, [pc, #272]	; (100100d4 <at_ble_event_get+0x360>)
1000ffc4:	429c      	cmp	r4, r3
1000ffc6:	d100      	bne.n	1000ffca <at_ble_event_get+0x256>
1000ffc8:	e13d      	b.n	10010246 <at_ble_event_get+0x4d2>
1000ffca:	d812      	bhi.n	1000fff2 <at_ble_event_get+0x27e>
1000ffcc:	4b42      	ldr	r3, [pc, #264]	; (100100d8 <at_ble_event_get+0x364>)
1000ffce:	429c      	cmp	r4, r3
1000ffd0:	d100      	bne.n	1000ffd4 <at_ble_event_get+0x260>
1000ffd2:	e0e8      	b.n	100101a6 <at_ble_event_get+0x432>
1000ffd4:	d804      	bhi.n	1000ffe0 <at_ble_event_get+0x26c>
1000ffd6:	3b03      	subs	r3, #3
1000ffd8:	429c      	cmp	r4, r3
1000ffda:	d100      	bne.n	1000ffde <at_ble_event_get+0x26a>
1000ffdc:	e0d0      	b.n	10010180 <at_ble_event_get+0x40c>
1000ffde:	e0b1      	b.n	10010144 <at_ble_event_get+0x3d0>
1000ffe0:	4b3e      	ldr	r3, [pc, #248]	; (100100dc <at_ble_event_get+0x368>)
1000ffe2:	429c      	cmp	r4, r3
1000ffe4:	d100      	bne.n	1000ffe8 <at_ble_event_get+0x274>
1000ffe6:	e0d0      	b.n	1001018a <at_ble_event_get+0x416>
1000ffe8:	4b3d      	ldr	r3, [pc, #244]	; (100100e0 <at_ble_event_get+0x36c>)
1000ffea:	429c      	cmp	r4, r3
1000ffec:	d100      	bne.n	1000fff0 <at_ble_event_get+0x27c>
1000ffee:	e0f9      	b.n	100101e4 <at_ble_event_get+0x470>
1000fff0:	e0a8      	b.n	10010144 <at_ble_event_get+0x3d0>
1000fff2:	4b3c      	ldr	r3, [pc, #240]	; (100100e4 <at_ble_event_get+0x370>)
1000fff4:	429c      	cmp	r4, r3
1000fff6:	d100      	bne.n	1000fffa <at_ble_event_get+0x286>
1000fff8:	e0db      	b.n	100101b2 <at_ble_event_get+0x43e>
1000fffa:	d808      	bhi.n	1001000e <at_ble_event_get+0x29a>
1000fffc:	4b3a      	ldr	r3, [pc, #232]	; (100100e8 <at_ble_event_get+0x374>)
1000fffe:	429c      	cmp	r4, r3
10010000:	d100      	bne.n	10010004 <at_ble_event_get+0x290>
10010002:	e11b      	b.n	1001023c <at_ble_event_get+0x4c8>
10010004:	4b39      	ldr	r3, [pc, #228]	; (100100ec <at_ble_event_get+0x378>)
10010006:	429c      	cmp	r4, r3
10010008:	d100      	bne.n	1001000c <at_ble_event_get+0x298>
1001000a:	e0d8      	b.n	100101be <at_ble_event_get+0x44a>
1001000c:	e09a      	b.n	10010144 <at_ble_event_get+0x3d0>
1001000e:	4b38      	ldr	r3, [pc, #224]	; (100100f0 <at_ble_event_get+0x37c>)
10010010:	429c      	cmp	r4, r3
10010012:	d100      	bne.n	10010016 <at_ble_event_get+0x2a2>
10010014:	e0d8      	b.n	100101c8 <at_ble_event_get+0x454>
10010016:	4b37      	ldr	r3, [pc, #220]	; (100100f4 <at_ble_event_get+0x380>)
10010018:	429c      	cmp	r4, r3
1001001a:	d100      	bne.n	1001001e <at_ble_event_get+0x2aa>
1001001c:	e0db      	b.n	100101d6 <at_ble_event_get+0x462>
1001001e:	e091      	b.n	10010144 <at_ble_event_get+0x3d0>
10010020:	4b35      	ldr	r3, [pc, #212]	; (100100f8 <at_ble_event_get+0x384>)
10010022:	429c      	cmp	r4, r3
10010024:	d100      	bne.n	10010028 <at_ble_event_get+0x2b4>
10010026:	e0f7      	b.n	10010218 <at_ble_event_get+0x4a4>
10010028:	d876      	bhi.n	10010118 <at_ble_event_get+0x3a4>
1001002a:	4b34      	ldr	r3, [pc, #208]	; (100100fc <at_ble_event_get+0x388>)
1001002c:	429c      	cmp	r4, r3
1001002e:	d100      	bne.n	10010032 <at_ble_event_get+0x2be>
10010030:	e0f8      	b.n	10010224 <at_ble_event_get+0x4b0>
10010032:	d869      	bhi.n	10010108 <at_ble_event_get+0x394>
10010034:	4b32      	ldr	r3, [pc, #200]	; (10010100 <at_ble_event_get+0x38c>)
10010036:	429c      	cmp	r4, r3
10010038:	d100      	bne.n	1001003c <at_ble_event_get+0x2c8>
1001003a:	e0e0      	b.n	100101fe <at_ble_event_get+0x48a>
1001003c:	4b31      	ldr	r3, [pc, #196]	; (10010104 <at_ble_event_get+0x390>)
1001003e:	429c      	cmp	r4, r3
10010040:	d100      	bne.n	10010044 <at_ble_event_get+0x2d0>
10010042:	e0a9      	b.n	10010198 <at_ble_event_get+0x424>
10010044:	e07e      	b.n	10010144 <at_ble_event_get+0x3d0>
10010046:	46c0      	nop			; (mov r8, r8)
10010048:	10011779 	.word	0x10011779
1001004c:	10019ea4 	.word	0x10019ea4
10010050:	1000f401 	.word	0x1000f401
10010054:	10019ea8 	.word	0x10019ea8
10010058:	10019ea0 	.word	0x10019ea0
1001005c:	10019e90 	.word	0x10019e90
10010060:	1000fc5d 	.word	0x1000fc5d
10010064:	10015191 	.word	0x10015191
10010068:	0000ffff 	.word	0x0000ffff
1001006c:	0000fffe 	.word	0x0000fffe
10010070:	1000f679 	.word	0x1000f679
10010074:	1001177b 	.word	0x1001177b
10010078:	0000201e 	.word	0x0000201e
1001007c:	0000201d 	.word	0x0000201d
10010080:	00000c03 	.word	0x00000c03
10010084:	0000201f 	.word	0x0000201f
10010088:	00000d1c 	.word	0x00000d1c
1001008c:	00000c0c 	.word	0x00000c0c
10010090:	00000c02 	.word	0x00000c02
10010094:	00000a02 	.word	0x00000a02
10010098:	00000a03 	.word	0x00000a03
1001009c:	00000c06 	.word	0x00000c06
100100a0:	00000c04 	.word	0x00000c04
100100a4:	00000c05 	.word	0x00000c05
100100a8:	00000c07 	.word	0x00000c07
100100ac:	00000c09 	.word	0x00000c09
100100b0:	00000c17 	.word	0x00000c17
100100b4:	00000c12 	.word	0x00000c12
100100b8:	00000c0d 	.word	0x00000c0d
100100bc:	00000c13 	.word	0x00000c13
100100c0:	00000c15 	.word	0x00000c15
100100c4:	00000d08 	.word	0x00000d08
100100c8:	00000d01 	.word	0x00000d01
100100cc:	00000d15 	.word	0x00000d15
100100d0:	00000e1b 	.word	0x00000e1b
100100d4:	00000e0f 	.word	0x00000e0f
100100d8:	00000e03 	.word	0x00000e03
100100dc:	00000e06 	.word	0x00000e06
100100e0:	00000e0a 	.word	0x00000e0a
100100e4:	00000e15 	.word	0x00000e15
100100e8:	00000e11 	.word	0x00000e11
100100ec:	00000e13 	.word	0x00000e13
100100f0:	00000e17 	.word	0x00000e17
100100f4:	00000e19 	.word	0x00000e19
100100f8:	00000e27 	.word	0x00000e27
100100fc:	00000e21 	.word	0x00000e21
10010100:	00000e1c 	.word	0x00000e1c
10010104:	00000e1d 	.word	0x00000e1d
10010108:	4b9f      	ldr	r3, [pc, #636]	; (10010388 <at_ble_event_get+0x614>)
1001010a:	429c      	cmp	r4, r3
1001010c:	d07e      	beq.n	1001020c <at_ble_event_get+0x498>
1001010e:	4b9f      	ldr	r3, [pc, #636]	; (1001038c <at_ble_event_get+0x618>)
10010110:	429c      	cmp	r4, r3
10010112:	d100      	bne.n	10010116 <at_ble_event_get+0x3a2>
10010114:	e08c      	b.n	10010230 <at_ble_event_get+0x4bc>
10010116:	e015      	b.n	10010144 <at_ble_event_get+0x3d0>
10010118:	4b9d      	ldr	r3, [pc, #628]	; (10010390 <at_ble_event_get+0x61c>)
1001011a:	429c      	cmp	r4, r3
1001011c:	d100      	bne.n	10010120 <at_ble_event_get+0x3ac>
1001011e:	e10a      	b.n	10010336 <at_ble_event_get+0x5c2>
10010120:	d808      	bhi.n	10010134 <at_ble_event_get+0x3c0>
10010122:	4b9c      	ldr	r3, [pc, #624]	; (10010394 <at_ble_event_get+0x620>)
10010124:	429c      	cmp	r4, r3
10010126:	d100      	bne.n	1001012a <at_ble_event_get+0x3b6>
10010128:	e0f7      	b.n	1001031a <at_ble_event_get+0x5a6>
1001012a:	4b9b      	ldr	r3, [pc, #620]	; (10010398 <at_ble_event_get+0x624>)
1001012c:	429c      	cmp	r4, r3
1001012e:	d100      	bne.n	10010132 <at_ble_event_get+0x3be>
10010130:	e0fa      	b.n	10010328 <at_ble_event_get+0x5b4>
10010132:	e007      	b.n	10010144 <at_ble_event_get+0x3d0>
10010134:	4b99      	ldr	r3, [pc, #612]	; (1001039c <at_ble_event_get+0x628>)
10010136:	429c      	cmp	r4, r3
10010138:	d100      	bne.n	1001013c <at_ble_event_get+0x3c8>
1001013a:	e103      	b.n	10010344 <at_ble_event_get+0x5d0>
1001013c:	4b98      	ldr	r3, [pc, #608]	; (100103a0 <at_ble_event_get+0x62c>)
1001013e:	429c      	cmp	r4, r3
10010140:	d100      	bne.n	10010144 <at_ble_event_get+0x3d0>
10010142:	e106      	b.n	10010352 <at_ble_event_get+0x5de>
10010144:	2600      	movs	r6, #0
10010146:	e10a      	b.n	1001035e <at_ble_event_get+0x5ea>
10010148:	1c30      	adds	r0, r6, #0
1001014a:	1c29      	adds	r1, r5, #0
1001014c:	4b95      	ldr	r3, [pc, #596]	; (100103a4 <at_ble_event_get+0x630>)
1001014e:	e014      	b.n	1001017a <at_ble_event_get+0x406>
10010150:	1c30      	adds	r0, r6, #0
10010152:	1c29      	adds	r1, r5, #0
10010154:	4b94      	ldr	r3, [pc, #592]	; (100103a8 <at_ble_event_get+0x634>)
10010156:	4798      	blx	r3
10010158:	2604      	movs	r6, #4
1001015a:	e100      	b.n	1001035e <at_ble_event_get+0x5ea>
1001015c:	1c30      	adds	r0, r6, #0
1001015e:	1c29      	adds	r1, r5, #0
10010160:	4b92      	ldr	r3, [pc, #584]	; (100103ac <at_ble_event_get+0x638>)
10010162:	4798      	blx	r3
10010164:	2601      	movs	r6, #1
10010166:	e0fa      	b.n	1001035e <at_ble_event_get+0x5ea>
10010168:	1c30      	adds	r0, r6, #0
1001016a:	1c29      	adds	r1, r5, #0
1001016c:	4b90      	ldr	r3, [pc, #576]	; (100103b0 <at_ble_event_get+0x63c>)
1001016e:	4798      	blx	r3
10010170:	260f      	movs	r6, #15
10010172:	e0f4      	b.n	1001035e <at_ble_event_get+0x5ea>
10010174:	1c30      	adds	r0, r6, #0
10010176:	1c29      	adds	r1, r5, #0
10010178:	4b8e      	ldr	r3, [pc, #568]	; (100103b4 <at_ble_event_get+0x640>)
1001017a:	4798      	blx	r3
1001017c:	1c06      	adds	r6, r0, #0
1001017e:	e0ee      	b.n	1001035e <at_ble_event_get+0x5ea>
10010180:	9801      	ldr	r0, [sp, #4]
10010182:	1c31      	adds	r1, r6, #0
10010184:	1c2a      	adds	r2, r5, #0
10010186:	4b8c      	ldr	r3, [pc, #560]	; (100103b8 <at_ble_event_get+0x644>)
10010188:	e017      	b.n	100101ba <at_ble_event_get+0x446>
1001018a:	1c31      	adds	r1, r6, #0
1001018c:	9801      	ldr	r0, [sp, #4]
1001018e:	1c2a      	adds	r2, r5, #0
10010190:	4b8a      	ldr	r3, [pc, #552]	; (100103bc <at_ble_event_get+0x648>)
10010192:	4798      	blx	r3
10010194:	2611      	movs	r6, #17
10010196:	e0e2      	b.n	1001035e <at_ble_event_get+0x5ea>
10010198:	1c31      	adds	r1, r6, #0
1001019a:	9801      	ldr	r0, [sp, #4]
1001019c:	1c2a      	adds	r2, r5, #0
1001019e:	4b88      	ldr	r3, [pc, #544]	; (100103c0 <at_ble_event_get+0x64c>)
100101a0:	4798      	blx	r3
100101a2:	2612      	movs	r6, #18
100101a4:	e0db      	b.n	1001035e <at_ble_event_get+0x5ea>
100101a6:	1c30      	adds	r0, r6, #0
100101a8:	1c29      	adds	r1, r5, #0
100101aa:	4b86      	ldr	r3, [pc, #536]	; (100103c4 <at_ble_event_get+0x650>)
100101ac:	4798      	blx	r3
100101ae:	2606      	movs	r6, #6
100101b0:	e0d5      	b.n	1001035e <at_ble_event_get+0x5ea>
100101b2:	1c31      	adds	r1, r6, #0
100101b4:	1c2a      	adds	r2, r5, #0
100101b6:	9801      	ldr	r0, [sp, #4]
100101b8:	4b83      	ldr	r3, [pc, #524]	; (100103c8 <at_ble_event_get+0x654>)
100101ba:	4798      	blx	r3
100101bc:	e7de      	b.n	1001017c <at_ble_event_get+0x408>
100101be:	9801      	ldr	r0, [sp, #4]
100101c0:	1c31      	adds	r1, r6, #0
100101c2:	1c2a      	adds	r2, r5, #0
100101c4:	4b81      	ldr	r3, [pc, #516]	; (100103cc <at_ble_event_get+0x658>)
100101c6:	e7f8      	b.n	100101ba <at_ble_event_get+0x446>
100101c8:	1c31      	adds	r1, r6, #0
100101ca:	9801      	ldr	r0, [sp, #4]
100101cc:	1c2a      	adds	r2, r5, #0
100101ce:	4b80      	ldr	r3, [pc, #512]	; (100103d0 <at_ble_event_get+0x65c>)
100101d0:	4798      	blx	r3
100101d2:	260d      	movs	r6, #13
100101d4:	e0c3      	b.n	1001035e <at_ble_event_get+0x5ea>
100101d6:	1c31      	adds	r1, r6, #0
100101d8:	9801      	ldr	r0, [sp, #4]
100101da:	1c2a      	adds	r2, r5, #0
100101dc:	4b7d      	ldr	r3, [pc, #500]	; (100103d4 <at_ble_event_get+0x660>)
100101de:	4798      	blx	r3
100101e0:	260e      	movs	r6, #14
100101e2:	e0bc      	b.n	1001035e <at_ble_event_get+0x5ea>
100101e4:	9801      	ldr	r0, [sp, #4]
100101e6:	1c31      	adds	r1, r6, #0
100101e8:	1c2a      	adds	r2, r5, #0
100101ea:	4b7b      	ldr	r3, [pc, #492]	; (100103d8 <at_ble_event_get+0x664>)
100101ec:	4798      	blx	r3
100101ee:	e084      	b.n	100102fa <at_ble_event_get+0x586>
100101f0:	1c31      	adds	r1, r6, #0
100101f2:	9801      	ldr	r0, [sp, #4]
100101f4:	1c2a      	adds	r2, r5, #0
100101f6:	4b79      	ldr	r3, [pc, #484]	; (100103dc <at_ble_event_get+0x668>)
100101f8:	4798      	blx	r3
100101fa:	260b      	movs	r6, #11
100101fc:	e0af      	b.n	1001035e <at_ble_event_get+0x5ea>
100101fe:	1c31      	adds	r1, r6, #0
10010200:	9801      	ldr	r0, [sp, #4]
10010202:	1c2a      	adds	r2, r5, #0
10010204:	4b76      	ldr	r3, [pc, #472]	; (100103e0 <at_ble_event_get+0x66c>)
10010206:	4798      	blx	r3
10010208:	2610      	movs	r6, #16
1001020a:	e0a8      	b.n	1001035e <at_ble_event_get+0x5ea>
1001020c:	1c30      	adds	r0, r6, #0
1001020e:	1c29      	adds	r1, r5, #0
10010210:	4b74      	ldr	r3, [pc, #464]	; (100103e4 <at_ble_event_get+0x670>)
10010212:	4798      	blx	r3
10010214:	2628      	movs	r6, #40	; 0x28
10010216:	e0a2      	b.n	1001035e <at_ble_event_get+0x5ea>
10010218:	1c30      	adds	r0, r6, #0
1001021a:	1c29      	adds	r1, r5, #0
1001021c:	4b72      	ldr	r3, [pc, #456]	; (100103e8 <at_ble_event_get+0x674>)
1001021e:	4798      	blx	r3
10010220:	2629      	movs	r6, #41	; 0x29
10010222:	e09c      	b.n	1001035e <at_ble_event_get+0x5ea>
10010224:	1c30      	adds	r0, r6, #0
10010226:	1c29      	adds	r1, r5, #0
10010228:	4b70      	ldr	r3, [pc, #448]	; (100103ec <at_ble_event_get+0x678>)
1001022a:	4798      	blx	r3
1001022c:	2627      	movs	r6, #39	; 0x27
1001022e:	e096      	b.n	1001035e <at_ble_event_get+0x5ea>
10010230:	1c30      	adds	r0, r6, #0
10010232:	1c29      	adds	r1, r5, #0
10010234:	4b6e      	ldr	r3, [pc, #440]	; (100103f0 <at_ble_event_get+0x67c>)
10010236:	4798      	blx	r3
10010238:	262a      	movs	r6, #42	; 0x2a
1001023a:	e090      	b.n	1001035e <at_ble_event_get+0x5ea>
1001023c:	9801      	ldr	r0, [sp, #4]
1001023e:	1c31      	adds	r1, r6, #0
10010240:	1c2a      	adds	r2, r5, #0
10010242:	4b6c      	ldr	r3, [pc, #432]	; (100103f4 <at_ble_event_get+0x680>)
10010244:	e7b9      	b.n	100101ba <at_ble_event_get+0x446>
10010246:	9801      	ldr	r0, [sp, #4]
10010248:	1c31      	adds	r1, r6, #0
1001024a:	1c2a      	adds	r2, r5, #0
1001024c:	4b6a      	ldr	r3, [pc, #424]	; (100103f8 <at_ble_event_get+0x684>)
1001024e:	e7b4      	b.n	100101ba <at_ble_event_get+0x446>
10010250:	1c30      	adds	r0, r6, #0
10010252:	1c29      	adds	r1, r5, #0
10010254:	4b69      	ldr	r3, [pc, #420]	; (100103fc <at_ble_event_get+0x688>)
10010256:	4798      	blx	r3
10010258:	262b      	movs	r6, #43	; 0x2b
1001025a:	e080      	b.n	1001035e <at_ble_event_get+0x5ea>
1001025c:	1c30      	adds	r0, r6, #0
1001025e:	1c29      	adds	r1, r5, #0
10010260:	4b67      	ldr	r3, [pc, #412]	; (10010400 <at_ble_event_get+0x68c>)
10010262:	4798      	blx	r3
10010264:	262c      	movs	r6, #44	; 0x2c
10010266:	e07a      	b.n	1001035e <at_ble_event_get+0x5ea>
10010268:	1c31      	adds	r1, r6, #0
1001026a:	9801      	ldr	r0, [sp, #4]
1001026c:	1c2a      	adds	r2, r5, #0
1001026e:	4b65      	ldr	r3, [pc, #404]	; (10010404 <at_ble_event_get+0x690>)
10010270:	4798      	blx	r3
10010272:	2613      	movs	r6, #19
10010274:	e073      	b.n	1001035e <at_ble_event_get+0x5ea>
10010276:	1c31      	adds	r1, r6, #0
10010278:	9801      	ldr	r0, [sp, #4]
1001027a:	1c2a      	adds	r2, r5, #0
1001027c:	4b62      	ldr	r3, [pc, #392]	; (10010408 <at_ble_event_get+0x694>)
1001027e:	4798      	blx	r3
10010280:	2614      	movs	r6, #20
10010282:	e06c      	b.n	1001035e <at_ble_event_get+0x5ea>
10010284:	1c31      	adds	r1, r6, #0
10010286:	9801      	ldr	r0, [sp, #4]
10010288:	1c2a      	adds	r2, r5, #0
1001028a:	4b60      	ldr	r3, [pc, #384]	; (1001040c <at_ble_event_get+0x698>)
1001028c:	4798      	blx	r3
1001028e:	2615      	movs	r6, #21
10010290:	e065      	b.n	1001035e <at_ble_event_get+0x5ea>
10010292:	1c31      	adds	r1, r6, #0
10010294:	9801      	ldr	r0, [sp, #4]
10010296:	1c2a      	adds	r2, r5, #0
10010298:	4b5d      	ldr	r3, [pc, #372]	; (10010410 <at_ble_event_get+0x69c>)
1001029a:	4798      	blx	r3
1001029c:	2616      	movs	r6, #22
1001029e:	e05e      	b.n	1001035e <at_ble_event_get+0x5ea>
100102a0:	9801      	ldr	r0, [sp, #4]
100102a2:	1c31      	adds	r1, r6, #0
100102a4:	1c2a      	adds	r2, r5, #0
100102a6:	4b5b      	ldr	r3, [pc, #364]	; (10010414 <at_ble_event_get+0x6a0>)
100102a8:	e787      	b.n	100101ba <at_ble_event_get+0x446>
100102aa:	1c31      	adds	r1, r6, #0
100102ac:	9801      	ldr	r0, [sp, #4]
100102ae:	1c2a      	adds	r2, r5, #0
100102b0:	4b58      	ldr	r3, [pc, #352]	; (10010414 <at_ble_event_get+0x6a0>)
100102b2:	4798      	blx	r3
100102b4:	88a9      	ldrh	r1, [r5, #4]
100102b6:	1c06      	adds	r6, r0, #0
100102b8:	4b57      	ldr	r3, [pc, #348]	; (10010418 <at_ble_event_get+0x6a4>)
100102ba:	8828      	ldrh	r0, [r5, #0]
100102bc:	4798      	blx	r3
100102be:	e04e      	b.n	1001035e <at_ble_event_get+0x5ea>
100102c0:	1c31      	adds	r1, r6, #0
100102c2:	9801      	ldr	r0, [sp, #4]
100102c4:	1c2a      	adds	r2, r5, #0
100102c6:	4b55      	ldr	r3, [pc, #340]	; (1001041c <at_ble_event_get+0x6a8>)
100102c8:	4798      	blx	r3
100102ca:	2623      	movs	r6, #35	; 0x23
100102cc:	e047      	b.n	1001035e <at_ble_event_get+0x5ea>
100102ce:	9801      	ldr	r0, [sp, #4]
100102d0:	1c31      	adds	r1, r6, #0
100102d2:	1c2a      	adds	r2, r5, #0
100102d4:	4b52      	ldr	r3, [pc, #328]	; (10010420 <at_ble_event_get+0x6ac>)
100102d6:	e770      	b.n	100101ba <at_ble_event_get+0x446>
100102d8:	9b01      	ldr	r3, [sp, #4]
100102da:	1c30      	adds	r0, r6, #0
100102dc:	0a1f      	lsrs	r7, r3, #8
100102de:	802f      	strh	r7, [r5, #0]
100102e0:	1c29      	adds	r1, r5, #0
100102e2:	4b50      	ldr	r3, [pc, #320]	; (10010424 <at_ble_event_get+0x6b0>)
100102e4:	e749      	b.n	1001017a <at_ble_event_get+0x406>
100102e6:	9801      	ldr	r0, [sp, #4]
100102e8:	1c31      	adds	r1, r6, #0
100102ea:	1c2a      	adds	r2, r5, #0
100102ec:	4b4e      	ldr	r3, [pc, #312]	; (10010428 <at_ble_event_get+0x6b4>)
100102ee:	e764      	b.n	100101ba <at_ble_event_get+0x446>
100102f0:	1c30      	adds	r0, r6, #0
100102f2:	1c29      	adds	r1, r5, #0
100102f4:	9a01      	ldr	r2, [sp, #4]
100102f6:	4b4d      	ldr	r3, [pc, #308]	; (1001042c <at_ble_event_get+0x6b8>)
100102f8:	4798      	blx	r3
100102fa:	263b      	movs	r6, #59	; 0x3b
100102fc:	e02f      	b.n	1001035e <at_ble_event_get+0x5ea>
100102fe:	1c31      	adds	r1, r6, #0
10010300:	9801      	ldr	r0, [sp, #4]
10010302:	1c2a      	adds	r2, r5, #0
10010304:	4b4a      	ldr	r3, [pc, #296]	; (10010430 <at_ble_event_get+0x6bc>)
10010306:	4798      	blx	r3
10010308:	2618      	movs	r6, #24
1001030a:	e028      	b.n	1001035e <at_ble_event_get+0x5ea>
1001030c:	1c31      	adds	r1, r6, #0
1001030e:	9801      	ldr	r0, [sp, #4]
10010310:	1c2a      	adds	r2, r5, #0
10010312:	4b48      	ldr	r3, [pc, #288]	; (10010434 <at_ble_event_get+0x6c0>)
10010314:	4798      	blx	r3
10010316:	2620      	movs	r6, #32
10010318:	e021      	b.n	1001035e <at_ble_event_get+0x5ea>
1001031a:	1c31      	adds	r1, r6, #0
1001031c:	9801      	ldr	r0, [sp, #4]
1001031e:	1c2a      	adds	r2, r5, #0
10010320:	4b45      	ldr	r3, [pc, #276]	; (10010438 <at_ble_event_get+0x6c4>)
10010322:	4798      	blx	r3
10010324:	2633      	movs	r6, #51	; 0x33
10010326:	e01a      	b.n	1001035e <at_ble_event_get+0x5ea>
10010328:	1c31      	adds	r1, r6, #0
1001032a:	9801      	ldr	r0, [sp, #4]
1001032c:	1c2a      	adds	r2, r5, #0
1001032e:	4b43      	ldr	r3, [pc, #268]	; (1001043c <at_ble_event_get+0x6c8>)
10010330:	4798      	blx	r3
10010332:	2630      	movs	r6, #48	; 0x30
10010334:	e013      	b.n	1001035e <at_ble_event_get+0x5ea>
10010336:	1c31      	adds	r1, r6, #0
10010338:	9801      	ldr	r0, [sp, #4]
1001033a:	1c2a      	adds	r2, r5, #0
1001033c:	4b40      	ldr	r3, [pc, #256]	; (10010440 <at_ble_event_get+0x6cc>)
1001033e:	4798      	blx	r3
10010340:	2634      	movs	r6, #52	; 0x34
10010342:	e00c      	b.n	1001035e <at_ble_event_get+0x5ea>
10010344:	1c31      	adds	r1, r6, #0
10010346:	9801      	ldr	r0, [sp, #4]
10010348:	1c2a      	adds	r2, r5, #0
1001034a:	4b3e      	ldr	r3, [pc, #248]	; (10010444 <at_ble_event_get+0x6d0>)
1001034c:	4798      	blx	r3
1001034e:	2635      	movs	r6, #53	; 0x35
10010350:	e005      	b.n	1001035e <at_ble_event_get+0x5ea>
10010352:	1c31      	adds	r1, r6, #0
10010354:	9801      	ldr	r0, [sp, #4]
10010356:	1c2a      	adds	r2, r5, #0
10010358:	4b3b      	ldr	r3, [pc, #236]	; (10010448 <at_ble_event_get+0x6d4>)
1001035a:	4798      	blx	r3
1001035c:	2632      	movs	r6, #50	; 0x32
1001035e:	9b03      	ldr	r3, [sp, #12]
10010360:	701e      	strb	r6, [r3, #0]
10010362:	2300      	movs	r3, #0
10010364:	9302      	str	r3, [sp, #8]
10010366:	e57a      	b.n	1000fe5e <at_ble_event_get+0xea>
10010368:	23d0      	movs	r3, #208	; 0xd0
1001036a:	e7fb      	b.n	10010364 <at_ble_event_get+0x5f0>
1001036c:	9b01      	ldr	r3, [sp, #4]
1001036e:	9e02      	ldr	r6, [sp, #8]
10010370:	2bbb      	cmp	r3, #187	; 0xbb
10010372:	d000      	beq.n	10010376 <at_ble_event_get+0x602>
10010374:	e6e6      	b.n	10010144 <at_ble_event_get+0x3d0>
10010376:	e7f2      	b.n	1001035e <at_ble_event_get+0x5ea>
10010378:	9b02      	ldr	r3, [sp, #8]
1001037a:	2b00      	cmp	r3, #0
1001037c:	d000      	beq.n	10010380 <at_ble_event_get+0x60c>
1001037e:	e56e      	b.n	1000fe5e <at_ble_event_get+0xea>
10010380:	e6e0      	b.n	10010144 <at_ble_event_get+0x3d0>
10010382:	9802      	ldr	r0, [sp, #8]
10010384:	b007      	add	sp, #28
10010386:	bdf0      	pop	{r4, r5, r6, r7, pc}
10010388:	00000e22 	.word	0x00000e22
1001038c:	00000e25 	.word	0x00000e25
10010390:	00001b05 	.word	0x00001b05
10010394:	00001b01 	.word	0x00001b01
10010398:	00001b03 	.word	0x00001b03
1001039c:	00001b06 	.word	0x00001b06
100103a0:	00001b08 	.word	0x00001b08
100103a4:	100125a5 	.word	0x100125a5
100103a8:	10012589 	.word	0x10012589
100103ac:	10012825 	.word	0x10012825
100103b0:	10012915 	.word	0x10012915
100103b4:	10012939 	.word	0x10012939
100103b8:	1001191d 	.word	0x1001191d
100103bc:	1001219d 	.word	0x1001219d
100103c0:	10012219 	.word	0x10012219
100103c4:	10011bd5 	.word	0x10011bd5
100103c8:	10011c71 	.word	0x10011c71
100103cc:	10011d49 	.word	0x10011d49
100103d0:	10011fd1 	.word	0x10011fd1
100103d4:	10012071 	.word	0x10012071
100103d8:	10012129 	.word	0x10012129
100103dc:	10012151 	.word	0x10012151
100103e0:	10012167 	.word	0x10012167
100103e4:	10012231 	.word	0x10012231
100103e8:	1001225f 	.word	0x1001225f
100103ec:	10012275 	.word	0x10012275
100103f0:	1001229f 	.word	0x1001229f
100103f4:	100120cd 	.word	0x100120cd
100103f8:	100120f7 	.word	0x100120f7
100103fc:	1001135d 	.word	0x1001135d
10010400:	10011389 	.word	0x10011389
10010404:	10012b59 	.word	0x10012b59
10010408:	10012b95 	.word	0x10012b95
1001040c:	10012bdd 	.word	0x10012bdd
10010410:	10012c21 	.word	0x10012c21
10010414:	10012c55 	.word	0x10012c55
10010418:	10012b19 	.word	0x10012b19
1001041c:	10012d21 	.word	0x10012d21
10010420:	10012ca9 	.word	0x10012ca9
10010424:	10011241 	.word	0x10011241
10010428:	100112ad 	.word	0x100112ad
1001042c:	10011271 	.word	0x10011271
10010430:	10012d31 	.word	0x10012d31
10010434:	10012d71 	.word	0x10012d71
10010438:	10013039 	.word	0x10013039
1001043c:	10013043 	.word	0x10013043
10010440:	10013049 	.word	0x10013049
10010444:	1001304f 	.word	0x1001304f
10010448:	1001305b 	.word	0x1001305b

1001044c <internal_event_flush>:
1001044c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1001044e:	490e      	ldr	r1, [pc, #56]	; (10010488 <internal_event_flush+0x3c>)
10010450:	2400      	movs	r4, #0
10010452:	680b      	ldr	r3, [r1, #0]
10010454:	1c0f      	adds	r7, r1, #0
10010456:	1c1e      	adds	r6, r3, #0
10010458:	4a0c      	ldr	r2, [pc, #48]	; (1001048c <internal_event_flush+0x40>)
1001045a:	6815      	ldr	r5, [r2, #0]
1001045c:	9201      	str	r2, [sp, #4]
1001045e:	2b00      	cmp	r3, #0
10010460:	d00e      	beq.n	10010480 <internal_event_flush+0x34>
10010462:	889a      	ldrh	r2, [r3, #4]
10010464:	6819      	ldr	r1, [r3, #0]
10010466:	4282      	cmp	r2, r0
10010468:	d107      	bne.n	1001047a <internal_event_flush+0x2e>
1001046a:	2c00      	cmp	r4, #0
1001046c:	d001      	beq.n	10010472 <internal_event_flush+0x26>
1001046e:	6021      	str	r1, [r4, #0]
10010470:	e000      	b.n	10010474 <internal_event_flush+0x28>
10010472:	1c0e      	adds	r6, r1, #0
10010474:	601d      	str	r5, [r3, #0]
10010476:	1c1d      	adds	r5, r3, #0
10010478:	1c23      	adds	r3, r4, #0
1001047a:	1c1c      	adds	r4, r3, #0
1001047c:	1c0b      	adds	r3, r1, #0
1001047e:	e7ee      	b.n	1001045e <internal_event_flush+0x12>
10010480:	9b01      	ldr	r3, [sp, #4]
10010482:	603e      	str	r6, [r7, #0]
10010484:	601d      	str	r5, [r3, #0]
10010486:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
10010488:	10019ea4 	.word	0x10019ea4
1001048c:	10019ea8 	.word	0x10019ea8

10010490 <internal_conn_flush>:
10010490:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10010492:	4a12      	ldr	r2, [pc, #72]	; (100104dc <internal_conn_flush+0x4c>)
10010494:	9000      	str	r0, [sp, #0]
10010496:	6813      	ldr	r3, [r2, #0]
10010498:	4811      	ldr	r0, [pc, #68]	; (100104e0 <internal_conn_flush+0x50>)
1001049a:	1c1f      	adds	r7, r3, #0
1001049c:	2100      	movs	r1, #0
1001049e:	4684      	mov	ip, r0
100104a0:	6804      	ldr	r4, [r0, #0]
100104a2:	9201      	str	r2, [sp, #4]
100104a4:	2b00      	cmp	r3, #0
100104a6:	d014      	beq.n	100104d2 <internal_conn_flush+0x42>
100104a8:	88d8      	ldrh	r0, [r3, #6]
100104aa:	9a00      	ldr	r2, [sp, #0]
100104ac:	681d      	ldr	r5, [r3, #0]
100104ae:	0a06      	lsrs	r6, r0, #8
100104b0:	4296      	cmp	r6, r2
100104b2:	d10b      	bne.n	100104cc <internal_conn_flush+0x3c>
100104b4:	26fd      	movs	r6, #253	; 0xfd
100104b6:	4006      	ands	r6, r0
100104b8:	2e0c      	cmp	r6, #12
100104ba:	d107      	bne.n	100104cc <internal_conn_flush+0x3c>
100104bc:	2900      	cmp	r1, #0
100104be:	d001      	beq.n	100104c4 <internal_conn_flush+0x34>
100104c0:	600d      	str	r5, [r1, #0]
100104c2:	e000      	b.n	100104c6 <internal_conn_flush+0x36>
100104c4:	1c2f      	adds	r7, r5, #0
100104c6:	601c      	str	r4, [r3, #0]
100104c8:	1c1c      	adds	r4, r3, #0
100104ca:	1c0b      	adds	r3, r1, #0
100104cc:	1c19      	adds	r1, r3, #0
100104ce:	1c2b      	adds	r3, r5, #0
100104d0:	e7e8      	b.n	100104a4 <internal_conn_flush+0x14>
100104d2:	9b01      	ldr	r3, [sp, #4]
100104d4:	601f      	str	r7, [r3, #0]
100104d6:	4663      	mov	r3, ip
100104d8:	601c      	str	r4, [r3, #0]
100104da:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
100104dc:	10019ea4 	.word	0x10019ea4
100104e0:	10019ea8 	.word	0x10019ea8

100104e4 <at_ble_device_name_set>:
100104e4:	b530      	push	{r4, r5, lr}
100104e6:	23cf      	movs	r3, #207	; 0xcf
100104e8:	2800      	cmp	r0, #0
100104ea:	d010      	beq.n	1001050e <at_ble_device_name_set+0x2a>
100104ec:	1e4a      	subs	r2, r1, #1
100104ee:	2a1f      	cmp	r2, #31
100104f0:	d80d      	bhi.n	1001050e <at_ble_device_name_set+0x2a>
100104f2:	4a08      	ldr	r2, [pc, #32]	; (10010514 <at_ble_device_name_set+0x30>)
100104f4:	1c13      	adds	r3, r2, #0
100104f6:	33aa      	adds	r3, #170	; 0xaa
100104f8:	8019      	strh	r1, [r3, #0]
100104fa:	2300      	movs	r3, #0
100104fc:	1c1c      	adds	r4, r3, #0
100104fe:	5cc5      	ldrb	r5, [r0, r3]
10010500:	34ac      	adds	r4, #172	; 0xac
10010502:	3301      	adds	r3, #1
10010504:	5515      	strb	r5, [r2, r4]
10010506:	b2dc      	uxtb	r4, r3
10010508:	428c      	cmp	r4, r1
1001050a:	d3f7      	bcc.n	100104fc <at_ble_device_name_set+0x18>
1001050c:	2300      	movs	r3, #0
1001050e:	1c18      	adds	r0, r3, #0
10010510:	bd30      	pop	{r4, r5, pc}
10010512:	46c0      	nop			; (mov r8, r8)
10010514:	1001ae4e 	.word	0x1001ae4e

10010518 <at_ble_addr_get>:
10010518:	b510      	push	{r4, lr}
1001051a:	1c04      	adds	r4, r0, #0
1001051c:	20cf      	movs	r0, #207	; 0xcf
1001051e:	2c00      	cmp	r4, #0
10010520:	d006      	beq.n	10010530 <at_ble_addr_get+0x18>
10010522:	4b04      	ldr	r3, [pc, #16]	; (10010534 <at_ble_addr_get+0x1c>)
10010524:	38ce      	subs	r0, #206	; 0xce
10010526:	1c21      	adds	r1, r4, #0
10010528:	4798      	blx	r3
1001052a:	4b03      	ldr	r3, [pc, #12]	; (10010538 <at_ble_addr_get+0x20>)
1001052c:	791b      	ldrb	r3, [r3, #4]
1001052e:	7023      	strb	r3, [r4, #0]
10010530:	bd10      	pop	{r4, pc}
10010532:	46c0      	nop			; (mov r8, r8)
10010534:	10012439 	.word	0x10012439
10010538:	1001ae4e 	.word	0x1001ae4e

1001053c <at_ble_set_dev_config>:
1001053c:	b5f0      	push	{r4, r5, r6, r7, lr}
1001053e:	7906      	ldrb	r6, [r0, #4]
10010540:	b089      	sub	sp, #36	; 0x24
10010542:	25cf      	movs	r5, #207	; 0xcf
10010544:	2e03      	cmp	r6, #3
10010546:	d838      	bhi.n	100105ba <at_ble_set_dev_config+0x7e>
10010548:	7803      	ldrb	r3, [r0, #0]
1001054a:	3511      	adds	r5, #17
1001054c:	2b0f      	cmp	r3, #15
1001054e:	d834      	bhi.n	100105ba <at_ble_set_dev_config+0x7e>
10010550:	2380      	movs	r3, #128	; 0x80
10010552:	8c87      	ldrh	r7, [r0, #36]	; 0x24
10010554:	3d11      	subs	r5, #17
10010556:	009b      	lsls	r3, r3, #2
10010558:	429f      	cmp	r7, r3
1001055a:	d82e      	bhi.n	100105ba <at_ble_set_dev_config+0x7e>
1001055c:	7fc5      	ldrb	r5, [r0, #31]
1001055e:	7f83      	ldrb	r3, [r0, #30]
10010560:	01ad      	lsls	r5, r5, #6
10010562:	015b      	lsls	r3, r3, #5
10010564:	431d      	orrs	r5, r3
10010566:	7ec3      	ldrb	r3, [r0, #27]
10010568:	431d      	orrs	r5, r3
1001056a:	7f43      	ldrb	r3, [r0, #29]
1001056c:	011b      	lsls	r3, r3, #4
1001056e:	431d      	orrs	r5, r3
10010570:	7f03      	ldrb	r3, [r0, #28]
10010572:	009b      	lsls	r3, r3, #2
10010574:	431d      	orrs	r5, r3
10010576:	4b12      	ldr	r3, [pc, #72]	; (100105c0 <at_ble_set_dev_config+0x84>)
10010578:	b2ed      	uxtb	r5, r5
1001057a:	711e      	strb	r6, [r3, #4]
1001057c:	7903      	ldrb	r3, [r0, #4]
1001057e:	3b02      	subs	r3, #2
10010580:	2b01      	cmp	r3, #1
10010582:	d801      	bhi.n	10010588 <at_ble_set_dev_config+0x4c>
10010584:	2302      	movs	r3, #2
10010586:	7103      	strb	r3, [r0, #4]
10010588:	1c04      	adds	r4, r0, #0
1001058a:	1c23      	adds	r3, r4, #0
1001058c:	330b      	adds	r3, #11
1001058e:	8861      	ldrh	r1, [r4, #2]
10010590:	9307      	str	r3, [sp, #28]
10010592:	7923      	ldrb	r3, [r4, #4]
10010594:	7800      	ldrb	r0, [r0, #0]
10010596:	9300      	str	r3, [sp, #0]
10010598:	9501      	str	r5, [sp, #4]
1001059a:	8c25      	ldrh	r5, [r4, #32]
1001059c:	1d62      	adds	r2, r4, #5
1001059e:	9502      	str	r5, [sp, #8]
100105a0:	8c65      	ldrh	r5, [r4, #34]	; 0x22
100105a2:	9b07      	ldr	r3, [sp, #28]
100105a4:	9503      	str	r5, [sp, #12]
100105a6:	9704      	str	r7, [sp, #16]
100105a8:	4d06      	ldr	r5, [pc, #24]	; (100105c4 <at_ble_set_dev_config+0x88>)
100105aa:	47a8      	blx	r5
100105ac:	7126      	strb	r6, [r4, #4]
100105ae:	1c05      	adds	r5, r0, #0
100105b0:	1c21      	adds	r1, r4, #0
100105b2:	4803      	ldr	r0, [pc, #12]	; (100105c0 <at_ble_set_dev_config+0x84>)
100105b4:	2226      	movs	r2, #38	; 0x26
100105b6:	4b04      	ldr	r3, [pc, #16]	; (100105c8 <at_ble_set_dev_config+0x8c>)
100105b8:	4798      	blx	r3
100105ba:	1c28      	adds	r0, r5, #0
100105bc:	b009      	add	sp, #36	; 0x24
100105be:	bdf0      	pop	{r4, r5, r6, r7, pc}
100105c0:	1001ae4e 	.word	0x1001ae4e
100105c4:	10012331 	.word	0x10012331
100105c8:	1001517f 	.word	0x1001517f

100105cc <at_ble_init>:
100105cc:	b5f0      	push	{r4, r5, r6, r7, lr}
100105ce:	b087      	sub	sp, #28
100105d0:	af03      	add	r7, sp, #12
100105d2:	4954      	ldr	r1, [pc, #336]	; (10010724 <at_ble_init+0x158>)
100105d4:	220b      	movs	r2, #11
100105d6:	4b54      	ldr	r3, [pc, #336]	; (10010728 <at_ble_init+0x15c>)
100105d8:	1c04      	adds	r4, r0, #0
100105da:	1c38      	adds	r0, r7, #0
100105dc:	4798      	blx	r3
100105de:	2205      	movs	r2, #5
100105e0:	4b52      	ldr	r3, [pc, #328]	; (1001072c <at_ble_init+0x160>)
100105e2:	2640      	movs	r6, #64	; 0x40
100105e4:	801a      	strh	r2, [r3, #0]
100105e6:	2300      	movs	r3, #0
100105e8:	4a51      	ldr	r2, [pc, #324]	; (10010730 <at_ble_init+0x164>)
100105ea:	6013      	str	r3, [r2, #0]
100105ec:	4a51      	ldr	r2, [pc, #324]	; (10010734 <at_ble_init+0x168>)
100105ee:	7013      	strb	r3, [r2, #0]
100105f0:	4a51      	ldr	r2, [pc, #324]	; (10010738 <at_ble_init+0x16c>)
100105f2:	7013      	strb	r3, [r2, #0]
100105f4:	4b51      	ldr	r3, [pc, #324]	; (1001073c <at_ble_init+0x170>)
100105f6:	4798      	blx	r3
100105f8:	4b51      	ldr	r3, [pc, #324]	; (10010740 <at_ble_init+0x174>)
100105fa:	4798      	blx	r3
100105fc:	4b51      	ldr	r3, [pc, #324]	; (10010744 <at_ble_init+0x178>)
100105fe:	4798      	blx	r3
10010600:	4b51      	ldr	r3, [pc, #324]	; (10010748 <at_ble_init+0x17c>)
10010602:	4798      	blx	r3
10010604:	2c00      	cmp	r4, #0
10010606:	d100      	bne.n	1001060a <at_ble_init+0x3e>
10010608:	e089      	b.n	1001071e <at_ble_init+0x152>
1001060a:	68a3      	ldr	r3, [r4, #8]
1001060c:	2b00      	cmp	r3, #0
1001060e:	d100      	bne.n	10010612 <at_ble_init+0x46>
10010610:	e085      	b.n	1001071e <at_ble_init+0x152>
10010612:	6923      	ldr	r3, [r4, #16]
10010614:	2b00      	cmp	r3, #0
10010616:	d100      	bne.n	1001061a <at_ble_init+0x4e>
10010618:	e081      	b.n	1001071e <at_ble_init+0x152>
1001061a:	6820      	ldr	r0, [r4, #0]
1001061c:	2800      	cmp	r0, #0
1001061e:	d102      	bne.n	10010626 <at_ble_init+0x5a>
10010620:	6863      	ldr	r3, [r4, #4]
10010622:	2b00      	cmp	r3, #0
10010624:	d17b      	bne.n	1001071e <at_ble_init+0x152>
10010626:	4b49      	ldr	r3, [pc, #292]	; (1001074c <at_ble_init+0x180>)
10010628:	6861      	ldr	r1, [r4, #4]
1001062a:	4798      	blx	r3
1001062c:	4b48      	ldr	r3, [pc, #288]	; (10010750 <at_ble_init+0x184>)
1001062e:	4798      	blx	r3
10010630:	2801      	cmp	r0, #1
10010632:	d901      	bls.n	10010638 <at_ble_init+0x6c>
10010634:	26e2      	movs	r6, #226	; 0xe2
10010636:	e072      	b.n	1001071e <at_ble_init+0x152>
10010638:	4846      	ldr	r0, [pc, #280]	; (10010754 <at_ble_init+0x188>)
1001063a:	4b47      	ldr	r3, [pc, #284]	; (10010758 <at_ble_init+0x18c>)
1001063c:	4798      	blx	r3
1001063e:	2800      	cmp	r0, #0
10010640:	d1f8      	bne.n	10010634 <at_ble_init+0x68>
10010642:	1c20      	adds	r0, r4, #0
10010644:	4b45      	ldr	r3, [pc, #276]	; (1001075c <at_ble_init+0x190>)
10010646:	4798      	blx	r3
10010648:	68e0      	ldr	r0, [r4, #12]
1001064a:	68a1      	ldr	r1, [r4, #8]
1001064c:	4b44      	ldr	r3, [pc, #272]	; (10010760 <at_ble_init+0x194>)
1001064e:	4798      	blx	r3
10010650:	466b      	mov	r3, sp
10010652:	2201      	movs	r2, #1
10010654:	1cdc      	adds	r4, r3, #3
10010656:	1c20      	adds	r0, r4, #0
10010658:	a901      	add	r1, sp, #4
1001065a:	4252      	negs	r2, r2
1001065c:	4b41      	ldr	r3, [pc, #260]	; (10010764 <at_ble_init+0x198>)
1001065e:	4798      	blx	r3
10010660:	2800      	cmp	r0, #0
10010662:	d102      	bne.n	1001066a <at_ble_init+0x9e>
10010664:	7823      	ldrb	r3, [r4, #0]
10010666:	2b39      	cmp	r3, #57	; 0x39
10010668:	d1f2      	bne.n	10010650 <at_ble_init+0x84>
1001066a:	4b3f      	ldr	r3, [pc, #252]	; (10010768 <at_ble_init+0x19c>)
1001066c:	4798      	blx	r3
1001066e:	1e06      	subs	r6, r0, #0
10010670:	d155      	bne.n	1001071e <at_ble_init+0x152>
10010672:	1c03      	adds	r3, r0, #0
10010674:	2101      	movs	r1, #1
10010676:	4a3d      	ldr	r2, [pc, #244]	; (1001076c <at_ble_init+0x1a0>)
10010678:	4249      	negs	r1, r1
1001067a:	189a      	adds	r2, r3, r2
1001067c:	3312      	adds	r3, #18
1001067e:	8151      	strh	r1, [r2, #10]
10010680:	2b90      	cmp	r3, #144	; 0x90
10010682:	d1f7      	bne.n	10010674 <at_ble_init+0xa8>
10010684:	4c3a      	ldr	r4, [pc, #232]	; (10010770 <at_ble_init+0x1a4>)
10010686:	3b81      	subs	r3, #129	; 0x81
10010688:	7023      	strb	r3, [r4, #0]
1001068a:	4b3a      	ldr	r3, [pc, #232]	; (10010774 <at_ble_init+0x1a8>)
1001068c:	4a3a      	ldr	r2, [pc, #232]	; (10010778 <at_ble_init+0x1ac>)
1001068e:	8063      	strh	r3, [r4, #2]
10010690:	2300      	movs	r3, #0
10010692:	7123      	strb	r3, [r4, #4]
10010694:	3301      	adds	r3, #1
10010696:	1e58      	subs	r0, r3, #1
10010698:	0119      	lsls	r1, r3, #4
1001069a:	4301      	orrs	r1, r0
1001069c:	3302      	adds	r3, #2
1001069e:	7011      	strb	r1, [r2, #0]
100106a0:	3201      	adds	r2, #1
100106a2:	2b21      	cmp	r3, #33	; 0x21
100106a4:	d1f7      	bne.n	10010696 <at_ble_init+0xca>
100106a6:	33e0      	adds	r3, #224	; 0xe0
100106a8:	33ff      	adds	r3, #255	; 0xff
100106aa:	84a3      	strh	r3, [r4, #36]	; 0x24
100106ac:	1c23      	adds	r3, r4, #0
100106ae:	2500      	movs	r5, #0
100106b0:	3373      	adds	r3, #115	; 0x73
100106b2:	701d      	strb	r5, [r3, #0]
100106b4:	1c23      	adds	r3, r4, #0
100106b6:	3372      	adds	r3, #114	; 0x72
100106b8:	701d      	strb	r5, [r3, #0]
100106ba:	1c23      	adds	r3, r4, #0
100106bc:	3376      	adds	r3, #118	; 0x76
100106be:	701d      	strb	r5, [r3, #0]
100106c0:	1c23      	adds	r3, r4, #0
100106c2:	33cc      	adds	r3, #204	; 0xcc
100106c4:	801d      	strh	r5, [r3, #0]
100106c6:	1c22      	adds	r2, r4, #0
100106c8:	23a0      	movs	r3, #160	; 0xa0
100106ca:	32d0      	adds	r2, #208	; 0xd0
100106cc:	005b      	lsls	r3, r3, #1
100106ce:	8013      	strh	r3, [r2, #0]
100106d0:	1c22      	adds	r2, r4, #0
100106d2:	32ce      	adds	r2, #206	; 0xce
100106d4:	8013      	strh	r3, [r2, #0]
100106d6:	1c23      	adds	r3, r4, #0
100106d8:	33d2      	adds	r3, #210	; 0xd2
100106da:	801d      	strh	r5, [r3, #0]
100106dc:	22fa      	movs	r2, #250	; 0xfa
100106de:	1c23      	adds	r3, r4, #0
100106e0:	0052      	lsls	r2, r2, #1
100106e2:	33d4      	adds	r3, #212	; 0xd4
100106e4:	801a      	strh	r2, [r3, #0]
100106e6:	1c23      	adds	r3, r4, #0
100106e8:	33d6      	adds	r3, #214	; 0xd6
100106ea:	701d      	strb	r5, [r3, #0]
100106ec:	1c20      	adds	r0, r4, #0
100106ee:	4b23      	ldr	r3, [pc, #140]	; (1001077c <at_ble_init+0x1b0>)
100106f0:	76e5      	strb	r5, [r4, #27]
100106f2:	7725      	strb	r5, [r4, #28]
100106f4:	7765      	strb	r5, [r4, #29]
100106f6:	77a5      	strb	r5, [r4, #30]
100106f8:	77e5      	strb	r5, [r4, #31]
100106fa:	8425      	strh	r5, [r4, #32]
100106fc:	8465      	strh	r5, [r4, #34]	; 0x22
100106fe:	4798      	blx	r3
10010700:	1c23      	adds	r3, r4, #0
10010702:	2207      	movs	r2, #7
10010704:	3374      	adds	r3, #116	; 0x74
10010706:	701a      	strb	r2, [r3, #0]
10010708:	1c23      	adds	r3, r4, #0
1001070a:	3204      	adds	r2, #4
1001070c:	33aa      	adds	r3, #170	; 0xaa
1001070e:	801a      	strh	r2, [r3, #0]
10010710:	1c2b      	adds	r3, r5, #0
10010712:	5d7a      	ldrb	r2, [r7, r5]
10010714:	33ac      	adds	r3, #172	; 0xac
10010716:	3501      	adds	r5, #1
10010718:	54e2      	strb	r2, [r4, r3]
1001071a:	2d0b      	cmp	r5, #11
1001071c:	d1f8      	bne.n	10010710 <at_ble_init+0x144>
1001071e:	1c30      	adds	r0, r6, #0
10010720:	b007      	add	sp, #28
10010722:	bdf0      	pop	{r4, r5, r6, r7, pc}
10010724:	100181f8 	.word	0x100181f8
10010728:	1001517f 	.word	0x1001517f
1001072c:	1001adbc 	.word	0x1001adbc
10010730:	10019f54 	.word	0x10019f54
10010734:	10019eb4 	.word	0x10019eb4
10010738:	10018420 	.word	0x10018420
1001073c:	10012d81 	.word	0x10012d81
10010740:	10010a3d 	.word	0x10010a3d
10010744:	1001109d 	.word	0x1001109d
10010748:	10011351 	.word	0x10011351
1001074c:	100110d9 	.word	0x100110d9
10010750:	1000f111 	.word	0x1000f111
10010754:	10011651 	.word	0x10011651
10010758:	1000f355 	.word	0x1000f355
1001075c:	100116f9 	.word	0x100116f9
10010760:	1000fcb9 	.word	0x1000fcb9
10010764:	1000fd75 	.word	0x1000fd75
10010768:	100122c1 	.word	0x100122c1
1001076c:	1001adbe 	.word	0x1001adbe
10010770:	1001ae4e 	.word	0x1001ae4e
10010774:	00003a98 	.word	0x00003a98
10010778:	1001ae59 	.word	0x1001ae59
1001077c:	1001053d 	.word	0x1001053d

10010780 <at_ble_addr_set>:
10010780:	b538      	push	{r3, r4, r5, lr}
10010782:	1c45      	adds	r5, r0, #1
10010784:	1c03      	adds	r3, r0, #0
10010786:	20cf      	movs	r0, #207	; 0xcf
10010788:	2d00      	cmp	r5, #0
1001078a:	d018      	beq.n	100107be <at_ble_addr_set+0x3e>
1001078c:	781a      	ldrb	r2, [r3, #0]
1001078e:	2a03      	cmp	r2, #3
10010790:	d815      	bhi.n	100107be <at_ble_addr_set+0x3e>
10010792:	2a01      	cmp	r2, #1
10010794:	d102      	bne.n	1001079c <at_ble_addr_set+0x1c>
10010796:	785a      	ldrb	r2, [r3, #1]
10010798:	2a00      	cmp	r2, #0
1001079a:	d010      	beq.n	100107be <at_ble_addr_set+0x3e>
1001079c:	1c1c      	adds	r4, r3, #0
1001079e:	1c29      	adds	r1, r5, #0
100107a0:	2206      	movs	r2, #6
100107a2:	4b07      	ldr	r3, [pc, #28]	; (100107c0 <at_ble_addr_set+0x40>)
100107a4:	4807      	ldr	r0, [pc, #28]	; (100107c4 <at_ble_addr_set+0x44>)
100107a6:	4798      	blx	r3
100107a8:	7823      	ldrb	r3, [r4, #0]
100107aa:	4807      	ldr	r0, [pc, #28]	; (100107c8 <at_ble_addr_set+0x48>)
100107ac:	7103      	strb	r3, [r0, #4]
100107ae:	4b07      	ldr	r3, [pc, #28]	; (100107cc <at_ble_addr_set+0x4c>)
100107b0:	4798      	blx	r3
100107b2:	7823      	ldrb	r3, [r4, #0]
100107b4:	2b00      	cmp	r3, #0
100107b6:	d102      	bne.n	100107be <at_ble_addr_set+0x3e>
100107b8:	1c28      	adds	r0, r5, #0
100107ba:	4b05      	ldr	r3, [pc, #20]	; (100107d0 <at_ble_addr_set+0x50>)
100107bc:	4798      	blx	r3
100107be:	bd38      	pop	{r3, r4, r5, pc}
100107c0:	1001517f 	.word	0x1001517f
100107c4:	1001ae53 	.word	0x1001ae53
100107c8:	1001ae4e 	.word	0x1001ae4e
100107cc:	1001053d 	.word	0x1001053d
100107d0:	1001177d 	.word	0x1001177d

100107d4 <at_ble_adv_data_set>:
100107d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100107d6:	4684      	mov	ip, r0
100107d8:	1c0f      	adds	r7, r1, #0
100107da:	1c16      	adds	r6, r2, #0
100107dc:	1c1c      	adds	r4, r3, #0
100107de:	2800      	cmp	r0, #0
100107e0:	d102      	bne.n	100107e8 <at_ble_adv_data_set+0x14>
100107e2:	20e2      	movs	r0, #226	; 0xe2
100107e4:	2a00      	cmp	r2, #0
100107e6:	d02b      	beq.n	10010840 <at_ble_adv_data_set+0x6c>
100107e8:	20cf      	movs	r0, #207	; 0xcf
100107ea:	2f1f      	cmp	r7, #31
100107ec:	d828      	bhi.n	10010840 <at_ble_adv_data_set+0x6c>
100107ee:	2c1f      	cmp	r4, #31
100107f0:	d826      	bhi.n	10010840 <at_ble_adv_data_set+0x6c>
100107f2:	4663      	mov	r3, ip
100107f4:	2b00      	cmp	r3, #0
100107f6:	d00e      	beq.n	10010816 <at_ble_adv_data_set+0x42>
100107f8:	4812      	ldr	r0, [pc, #72]	; (10010844 <at_ble_adv_data_set+0x70>)
100107fa:	4d13      	ldr	r5, [pc, #76]	; (10010848 <at_ble_adv_data_set+0x74>)
100107fc:	2f00      	cmp	r7, #0
100107fe:	d104      	bne.n	1001080a <at_ble_adv_data_set+0x36>
10010800:	1c39      	adds	r1, r7, #0
10010802:	221f      	movs	r2, #31
10010804:	4b11      	ldr	r3, [pc, #68]	; (1001084c <at_ble_adv_data_set+0x78>)
10010806:	4798      	blx	r3
10010808:	e003      	b.n	10010812 <at_ble_adv_data_set+0x3e>
1001080a:	4661      	mov	r1, ip
1001080c:	1c3a      	adds	r2, r7, #0
1001080e:	4b10      	ldr	r3, [pc, #64]	; (10010850 <at_ble_adv_data_set+0x7c>)
10010810:	4798      	blx	r3
10010812:	3572      	adds	r5, #114	; 0x72
10010814:	702f      	strb	r7, [r5, #0]
10010816:	1e30      	subs	r0, r6, #0
10010818:	d012      	beq.n	10010840 <at_ble_adv_data_set+0x6c>
1001081a:	4d0b      	ldr	r5, [pc, #44]	; (10010848 <at_ble_adv_data_set+0x74>)
1001081c:	480d      	ldr	r0, [pc, #52]	; (10010854 <at_ble_adv_data_set+0x80>)
1001081e:	2c00      	cmp	r4, #0
10010820:	d107      	bne.n	10010832 <at_ble_adv_data_set+0x5e>
10010822:	1c21      	adds	r1, r4, #0
10010824:	221f      	movs	r2, #31
10010826:	4b09      	ldr	r3, [pc, #36]	; (1001084c <at_ble_adv_data_set+0x78>)
10010828:	3573      	adds	r5, #115	; 0x73
1001082a:	4798      	blx	r3
1001082c:	702c      	strb	r4, [r5, #0]
1001082e:	1c20      	adds	r0, r4, #0
10010830:	e006      	b.n	10010840 <at_ble_adv_data_set+0x6c>
10010832:	1c31      	adds	r1, r6, #0
10010834:	1c22      	adds	r2, r4, #0
10010836:	4b06      	ldr	r3, [pc, #24]	; (10010850 <at_ble_adv_data_set+0x7c>)
10010838:	4798      	blx	r3
1001083a:	2000      	movs	r0, #0
1001083c:	3573      	adds	r5, #115	; 0x73
1001083e:	702c      	strb	r4, [r5, #0]
10010840:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10010842:	46c0      	nop			; (mov r8, r8)
10010844:	1001ae82 	.word	0x1001ae82
10010848:	1001ae4e 	.word	0x1001ae4e
1001084c:	10015191 	.word	0x10015191
10010850:	1001517f 	.word	0x1001517f
10010854:	1001aea1 	.word	0x1001aea1

10010858 <at_ble_adv_start>:
10010858:	b5f0      	push	{r4, r5, r6, r7, lr}
1001085a:	b091      	sub	sp, #68	; 0x44
1001085c:	1c1f      	adds	r7, r3, #0
1001085e:	ab16      	add	r3, sp, #88	; 0x58
10010860:	881d      	ldrh	r5, [r3, #0]
10010862:	ab17      	add	r3, sp, #92	; 0x5c
10010864:	881b      	ldrh	r3, [r3, #0]
10010866:	910d      	str	r1, [sp, #52]	; 0x34
10010868:	930e      	str	r3, [sp, #56]	; 0x38
1001086a:	ab18      	add	r3, sp, #96	; 0x60
1001086c:	781b      	ldrb	r3, [r3, #0]
1001086e:	1c04      	adds	r4, r0, #0
10010870:	930f      	str	r3, [sp, #60]	; 0x3c
10010872:	4b42      	ldr	r3, [pc, #264]	; (1001097c <at_ble_adv_start+0x124>)
10010874:	1c16      	adds	r6, r2, #0
10010876:	3373      	adds	r3, #115	; 0x73
10010878:	781b      	ldrb	r3, [r3, #0]
1001087a:	20cf      	movs	r0, #207	; 0xcf
1001087c:	930c      	str	r3, [sp, #48]	; 0x30
1001087e:	2c01      	cmp	r4, #1
10010880:	d103      	bne.n	1001088a <at_ble_adv_start+0x32>
10010882:	9b0e      	ldr	r3, [sp, #56]	; 0x38
10010884:	2b00      	cmp	r3, #0
10010886:	d176      	bne.n	10010976 <at_ble_adv_start+0x11e>
10010888:	e024      	b.n	100108d4 <at_ble_adv_start+0x7c>
1001088a:	2c04      	cmp	r4, #4
1001088c:	d873      	bhi.n	10010976 <at_ble_adv_start+0x11e>
1001088e:	2380      	movs	r3, #128	; 0x80
10010890:	01db      	lsls	r3, r3, #7
10010892:	429d      	cmp	r5, r3
10010894:	d86f      	bhi.n	10010976 <at_ble_adv_start+0x11e>
10010896:	2c00      	cmp	r4, #0
10010898:	d102      	bne.n	100108a0 <at_ble_adv_start+0x48>
1001089a:	2d1f      	cmp	r5, #31
1001089c:	d96b      	bls.n	10010976 <at_ble_adv_start+0x11e>
1001089e:	e003      	b.n	100108a8 <at_ble_adv_start+0x50>
100108a0:	2d9f      	cmp	r5, #159	; 0x9f
100108a2:	d801      	bhi.n	100108a8 <at_ble_adv_start+0x50>
100108a4:	2c01      	cmp	r4, #1
100108a6:	d166      	bne.n	10010976 <at_ble_adv_start+0x11e>
100108a8:	2f00      	cmp	r7, #0
100108aa:	d009      	beq.n	100108c0 <at_ble_adv_start+0x68>
100108ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
100108ae:	20cf      	movs	r0, #207	; 0xcf
100108b0:	3b01      	subs	r3, #1
100108b2:	2b01      	cmp	r3, #1
100108b4:	d95f      	bls.n	10010976 <at_ble_adv_start+0x11e>
100108b6:	2c01      	cmp	r4, #1
100108b8:	d102      	bne.n	100108c0 <at_ble_adv_start+0x68>
100108ba:	2d00      	cmp	r5, #0
100108bc:	d100      	bne.n	100108c0 <at_ble_adv_start+0x68>
100108be:	3520      	adds	r5, #32
100108c0:	4b2f      	ldr	r3, [pc, #188]	; (10010980 <at_ble_adv_start+0x128>)
100108c2:	4798      	blx	r3
100108c4:	1c01      	adds	r1, r0, #0
100108c6:	2e00      	cmp	r6, #0
100108c8:	d043      	beq.n	10010952 <at_ble_adv_start+0xfa>
100108ca:	7833      	ldrb	r3, [r6, #0]
100108cc:	1e60      	subs	r0, r4, #1
100108ce:	2b00      	cmp	r3, #0
100108d0:	d109      	bne.n	100108e6 <at_ble_adv_start+0x8e>
100108d2:	e03b      	b.n	1001094c <at_ble_adv_start+0xf4>
100108d4:	2380      	movs	r3, #128	; 0x80
100108d6:	01db      	lsls	r3, r3, #7
100108d8:	429d      	cmp	r5, r3
100108da:	d84c      	bhi.n	10010976 <at_ble_adv_start+0x11e>
100108dc:	2e00      	cmp	r6, #0
100108de:	d04a      	beq.n	10010976 <at_ble_adv_start+0x11e>
100108e0:	2f00      	cmp	r7, #0
100108e2:	d1e3      	bne.n	100108ac <at_ble_adv_start+0x54>
100108e4:	e02b      	b.n	1001093e <at_ble_adv_start+0xe6>
100108e6:	2301      	movs	r3, #1
100108e8:	2803      	cmp	r0, #3
100108ea:	d93a      	bls.n	10010962 <at_ble_adv_start+0x10a>
100108ec:	200d      	movs	r0, #13
100108ee:	1c72      	adds	r2, r6, #1
100108f0:	e002      	b.n	100108f8 <at_ble_adv_start+0xa0>
100108f2:	200e      	movs	r0, #14
100108f4:	1e32      	subs	r2, r6, #0
100108f6:	d1fa      	bne.n	100108ee <at_ble_adv_start+0x96>
100108f8:	4c20      	ldr	r4, [pc, #128]	; (1001097c <at_ble_adv_start+0x124>)
100108fa:	3474      	adds	r4, #116	; 0x74
100108fc:	7826      	ldrb	r6, [r4, #0]
100108fe:	2407      	movs	r4, #7
10010900:	2e00      	cmp	r6, #0
10010902:	d000      	beq.n	10010906 <at_ble_adv_start+0xae>
10010904:	1c34      	adds	r4, r6, #0
10010906:	9200      	str	r2, [sp, #0]
10010908:	9a0d      	ldr	r2, [sp, #52]	; 0x34
1001090a:	9403      	str	r4, [sp, #12]
1001090c:	9204      	str	r2, [sp, #16]
1001090e:	4a1b      	ldr	r2, [pc, #108]	; (1001097c <at_ble_adv_start+0x124>)
10010910:	9501      	str	r5, [sp, #4]
10010912:	9502      	str	r5, [sp, #8]
10010914:	9705      	str	r7, [sp, #20]
10010916:	3272      	adds	r2, #114	; 0x72
10010918:	7812      	ldrb	r2, [r2, #0]
1001091a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
1001091c:	9206      	str	r2, [sp, #24]
1001091e:	4a19      	ldr	r2, [pc, #100]	; (10010984 <at_ble_adv_start+0x12c>)
10010920:	9207      	str	r2, [sp, #28]
10010922:	9a0c      	ldr	r2, [sp, #48]	; 0x30
10010924:	9208      	str	r2, [sp, #32]
10010926:	4a18      	ldr	r2, [pc, #96]	; (10010988 <at_ble_adv_start+0x130>)
10010928:	9209      	str	r2, [sp, #36]	; 0x24
1001092a:	2264      	movs	r2, #100	; 0x64
1001092c:	4362      	muls	r2, r4
1001092e:	b292      	uxth	r2, r2
10010930:	920a      	str	r2, [sp, #40]	; 0x28
10010932:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
10010934:	4c15      	ldr	r4, [pc, #84]	; (1001098c <at_ble_adv_start+0x134>)
10010936:	920b      	str	r2, [sp, #44]	; 0x2c
10010938:	4a15      	ldr	r2, [pc, #84]	; (10010990 <at_ble_adv_start+0x138>)
1001093a:	47a0      	blx	r4
1001093c:	e01b      	b.n	10010976 <at_ble_adv_start+0x11e>
1001093e:	2d00      	cmp	r5, #0
10010940:	d1be      	bne.n	100108c0 <at_ble_adv_start+0x68>
10010942:	4b0f      	ldr	r3, [pc, #60]	; (10010980 <at_ble_adv_start+0x128>)
10010944:	4798      	blx	r3
10010946:	2520      	movs	r5, #32
10010948:	1c01      	adds	r1, r0, #0
1001094a:	e7be      	b.n	100108ca <at_ble_adv_start+0x72>
1001094c:	2803      	cmp	r0, #3
1001094e:	d8cd      	bhi.n	100108ec <at_ble_adv_start+0x94>
10010950:	e006      	b.n	10010960 <at_ble_adv_start+0x108>
10010952:	1e60      	subs	r0, r4, #1
10010954:	2803      	cmp	r0, #3
10010956:	d903      	bls.n	10010960 <at_ble_adv_start+0x108>
10010958:	1c33      	adds	r3, r6, #0
1001095a:	200d      	movs	r0, #13
1001095c:	1c32      	adds	r2, r6, #0
1001095e:	e7cb      	b.n	100108f8 <at_ble_adv_start+0xa0>
10010960:	2300      	movs	r3, #0
10010962:	f002 fb7f 	bl	10013064 <__gnu_thumb1_case_sqi>
10010966:	06c6      	.short	0x06c6
10010968:	0204      	.short	0x0204
1001096a:	200f      	movs	r0, #15
1001096c:	e7c2      	b.n	100108f4 <at_ble_adv_start+0x9c>
1001096e:	2200      	movs	r2, #0
10010970:	920c      	str	r2, [sp, #48]	; 0x30
10010972:	200c      	movs	r0, #12
10010974:	e7be      	b.n	100108f4 <at_ble_adv_start+0x9c>
10010976:	b011      	add	sp, #68	; 0x44
10010978:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001097a:	46c0      	nop			; (mov r8, r8)
1001097c:	1001ae4e 	.word	0x1001ae4e
10010980:	1001280d 	.word	0x1001280d
10010984:	1001ae82 	.word	0x1001ae82
10010988:	1001aea1 	.word	0x1001aea1
1001098c:	100126ed 	.word	0x100126ed
10010990:	00003a98 	.word	0x00003a98

10010994 <at_ble_adv_stop>:
10010994:	b508      	push	{r3, lr}
10010996:	4b01      	ldr	r3, [pc, #4]	; (1001099c <at_ble_adv_stop+0x8>)
10010998:	4798      	blx	r3
1001099a:	bd08      	pop	{r3, pc}
1001099c:	10012519 	.word	0x10012519

100109a0 <at_ble_scan_stop>:
100109a0:	b510      	push	{r4, lr}
100109a2:	4b05      	ldr	r3, [pc, #20]	; (100109b8 <at_ble_scan_stop+0x18>)
100109a4:	4798      	blx	r3
100109a6:	1e04      	subs	r4, r0, #0
100109a8:	d103      	bne.n	100109b2 <at_ble_scan_stop+0x12>
100109aa:	20d1      	movs	r0, #209	; 0xd1
100109ac:	4b03      	ldr	r3, [pc, #12]	; (100109bc <at_ble_scan_stop+0x1c>)
100109ae:	0100      	lsls	r0, r0, #4
100109b0:	4798      	blx	r3
100109b2:	1c20      	adds	r0, r4, #0
100109b4:	bd10      	pop	{r4, pc}
100109b6:	46c0      	nop			; (mov r8, r8)
100109b8:	10012519 	.word	0x10012519
100109bc:	1001044d 	.word	0x1001044d

100109c0 <at_ble_disconnect>:
100109c0:	b538      	push	{r3, r4, r5, lr}
100109c2:	1c04      	adds	r4, r0, #0
100109c4:	4b04      	ldr	r3, [pc, #16]	; (100109d8 <at_ble_disconnect+0x18>)
100109c6:	1c08      	adds	r0, r1, #0
100109c8:	1c21      	adds	r1, r4, #0
100109ca:	4798      	blx	r3
100109cc:	1c05      	adds	r5, r0, #0
100109ce:	4b03      	ldr	r3, [pc, #12]	; (100109dc <at_ble_disconnect+0x1c>)
100109d0:	1c20      	adds	r0, r4, #0
100109d2:	4798      	blx	r3
100109d4:	1c28      	adds	r0, r5, #0
100109d6:	bd38      	pop	{r3, r4, r5, pc}
100109d8:	10011b91 	.word	0x10011b91
100109dc:	10010491 	.word	0x10010491

100109e0 <at_ble_conn_update_reply>:
100109e0:	b510      	push	{r4, lr}
100109e2:	4c01      	ldr	r4, [pc, #4]	; (100109e8 <at_ble_conn_update_reply+0x8>)
100109e4:	47a0      	blx	r4
100109e6:	bd10      	pop	{r4, pc}
100109e8:	10012081 	.word	0x10012081

100109ec <at_ble_random_address_resolve>:
100109ec:	b510      	push	{r4, lr}
100109ee:	23cf      	movs	r3, #207	; 0xcf
100109f0:	2800      	cmp	r0, #0
100109f2:	d00a      	beq.n	10010a0a <at_ble_random_address_resolve+0x1e>
100109f4:	2900      	cmp	r1, #0
100109f6:	d008      	beq.n	10010a0a <at_ble_random_address_resolve+0x1e>
100109f8:	2a00      	cmp	r2, #0
100109fa:	d006      	beq.n	10010a0a <at_ble_random_address_resolve+0x1e>
100109fc:	780c      	ldrb	r4, [r1, #0]
100109fe:	2c02      	cmp	r4, #2
10010a00:	d103      	bne.n	10010a0a <at_ble_random_address_resolve+0x1e>
10010a02:	4b03      	ldr	r3, [pc, #12]	; (10010a10 <at_ble_random_address_resolve+0x24>)
10010a04:	3101      	adds	r1, #1
10010a06:	4798      	blx	r3
10010a08:	2300      	movs	r3, #0
10010a0a:	1c18      	adds	r0, r3, #0
10010a0c:	bd10      	pop	{r4, pc}
10010a0e:	46c0      	nop			; (mov r8, r8)
10010a10:	100128ad 	.word	0x100128ad

10010a14 <at_ble_uuid_type2len>:
10010a14:	23cf      	movs	r3, #207	; 0xcf
10010a16:	2802      	cmp	r0, #2
10010a18:	d801      	bhi.n	10010a1e <at_ble_uuid_type2len+0xa>
10010a1a:	4b02      	ldr	r3, [pc, #8]	; (10010a24 <at_ble_uuid_type2len+0x10>)
10010a1c:	5c1b      	ldrb	r3, [r3, r0]
10010a1e:	1c18      	adds	r0, r3, #0
10010a20:	4770      	bx	lr
10010a22:	46c0      	nop			; (mov r8, r8)
10010a24:	10018203 	.word	0x10018203

10010a28 <at_ble_uuid_len2type>:
10010a28:	1e83      	subs	r3, r0, #2
10010a2a:	b2db      	uxtb	r3, r3
10010a2c:	2003      	movs	r0, #3
10010a2e:	2b0e      	cmp	r3, #14
10010a30:	d801      	bhi.n	10010a36 <at_ble_uuid_len2type+0xe>
10010a32:	4a01      	ldr	r2, [pc, #4]	; (10010a38 <at_ble_uuid_len2type+0x10>)
10010a34:	5cd0      	ldrb	r0, [r2, r3]
10010a36:	4770      	bx	lr
10010a38:	10018206 	.word	0x10018206

10010a3c <init_gatt_client_module>:
10010a3c:	2200      	movs	r2, #0
10010a3e:	4b01      	ldr	r3, [pc, #4]	; (10010a44 <init_gatt_client_module+0x8>)
10010a40:	801a      	strh	r2, [r3, #0]
10010a42:	4770      	bx	lr
10010a44:	10019eac 	.word	0x10019eac

10010a48 <db_searchATT>:
10010a48:	b570      	push	{r4, r5, r6, lr}
10010a4a:	1c05      	adds	r5, r0, #0
10010a4c:	2400      	movs	r4, #0
10010a4e:	4b0c      	ldr	r3, [pc, #48]	; (10010a80 <db_searchATT+0x38>)
10010a50:	6819      	ldr	r1, [r3, #0]
10010a52:	4b0c      	ldr	r3, [pc, #48]	; (10010a84 <db_searchATT+0x3c>)
10010a54:	681e      	ldr	r6, [r3, #0]
10010a56:	428c      	cmp	r4, r1
10010a58:	dc10      	bgt.n	10010a7c <db_searchATT+0x34>
10010a5a:	200c      	movs	r0, #12
10010a5c:	1863      	adds	r3, r4, r1
10010a5e:	0fda      	lsrs	r2, r3, #31
10010a60:	18d3      	adds	r3, r2, r3
10010a62:	1c02      	adds	r2, r0, #0
10010a64:	105b      	asrs	r3, r3, #1
10010a66:	435a      	muls	r2, r3
10010a68:	18b0      	adds	r0, r6, r2
10010a6a:	8802      	ldrh	r2, [r0, #0]
10010a6c:	42aa      	cmp	r2, r5
10010a6e:	d201      	bcs.n	10010a74 <db_searchATT+0x2c>
10010a70:	1e59      	subs	r1, r3, #1
10010a72:	e7f0      	b.n	10010a56 <db_searchATT+0xe>
10010a74:	42aa      	cmp	r2, r5
10010a76:	d902      	bls.n	10010a7e <db_searchATT+0x36>
10010a78:	1c5c      	adds	r4, r3, #1
10010a7a:	e7ec      	b.n	10010a56 <db_searchATT+0xe>
10010a7c:	2000      	movs	r0, #0
10010a7e:	bd70      	pop	{r4, r5, r6, pc}
10010a80:	10019ec0 	.word	0x10019ec0
10010a84:	10019eb8 	.word	0x10019eb8

10010a88 <att_permissions>:
10010a88:	b530      	push	{r4, r5, lr}
10010a8a:	2403      	movs	r4, #3
10010a8c:	1c05      	adds	r5, r0, #0
10010a8e:	2301      	movs	r3, #1
10010a90:	4025      	ands	r5, r4
10010a92:	42a5      	cmp	r5, r4
10010a94:	d009      	beq.n	10010aaa <att_permissions+0x22>
10010a96:	1c23      	adds	r3, r4, #0
10010a98:	1924      	adds	r4, r4, r4
10010a9a:	4220      	tst	r0, r4
10010a9c:	d105      	bne.n	10010aaa <att_permissions+0x22>
10010a9e:	3b02      	subs	r3, #2
10010aa0:	4218      	tst	r0, r3
10010aa2:	d102      	bne.n	10010aaa <att_permissions+0x22>
10010aa4:	1e4b      	subs	r3, r1, #1
10010aa6:	4199      	sbcs	r1, r3
10010aa8:	b28b      	uxth	r3, r1
10010aaa:	2130      	movs	r1, #48	; 0x30
10010aac:	4001      	ands	r1, r0
10010aae:	2930      	cmp	r1, #48	; 0x30
10010ab0:	d007      	beq.n	10010ac2 <att_permissions+0x3a>
10010ab2:	0641      	lsls	r1, r0, #25
10010ab4:	d401      	bmi.n	10010aba <att_permissions+0x32>
10010ab6:	0681      	lsls	r1, r0, #26
10010ab8:	d501      	bpl.n	10010abe <att_permissions+0x36>
10010aba:	4807      	ldr	r0, [pc, #28]	; (10010ad8 <att_permissions+0x50>)
10010abc:	e009      	b.n	10010ad2 <att_permissions+0x4a>
10010abe:	06c1      	lsls	r1, r0, #27
10010ac0:	d501      	bpl.n	10010ac6 <att_permissions+0x3e>
10010ac2:	4806      	ldr	r0, [pc, #24]	; (10010adc <att_permissions+0x54>)
10010ac4:	e005      	b.n	10010ad2 <att_permissions+0x4a>
10010ac6:	2a00      	cmp	r2, #0
10010ac8:	d001      	beq.n	10010ace <att_permissions+0x46>
10010aca:	2204      	movs	r2, #4
10010acc:	4313      	orrs	r3, r2
10010ace:	2080      	movs	r0, #128	; 0x80
10010ad0:	0180      	lsls	r0, r0, #6
10010ad2:	4318      	orrs	r0, r3
10010ad4:	bd30      	pop	{r4, r5, pc}
10010ad6:	46c0      	nop			; (mov r8, r8)
10010ad8:	0000200c 	.word	0x0000200c
10010adc:	00002004 	.word	0x00002004

10010ae0 <char_permissions>:
10010ae0:	b530      	push	{r4, r5, lr}
10010ae2:	2300      	movs	r3, #0
10010ae4:	0784      	lsls	r4, r0, #30
10010ae6:	d503      	bpl.n	10010af0 <char_permissions+0x10>
10010ae8:	3301      	adds	r3, #1
10010aea:	4219      	tst	r1, r3
10010aec:	d100      	bne.n	10010af0 <char_permissions+0x10>
10010aee:	3302      	adds	r3, #2
10010af0:	0704      	lsls	r4, r0, #28
10010af2:	d508      	bpl.n	10010b06 <char_permissions+0x26>
10010af4:	06cc      	lsls	r4, r1, #27
10010af6:	d501      	bpl.n	10010afc <char_permissions+0x1c>
10010af8:	2404      	movs	r4, #4
10010afa:	e000      	b.n	10010afe <char_permissions+0x1e>
10010afc:	240c      	movs	r4, #12
10010afe:	4323      	orrs	r3, r4
10010b00:	2480      	movs	r4, #128	; 0x80
10010b02:	01a4      	lsls	r4, r4, #6
10010b04:	4323      	orrs	r3, r4
10010b06:	0684      	lsls	r4, r0, #26
10010b08:	d506      	bpl.n	10010b18 <char_permissions+0x38>
10010b0a:	2406      	movs	r4, #6
10010b0c:	4221      	tst	r1, r4
10010b0e:	d101      	bne.n	10010b14 <char_permissions+0x34>
10010b10:	340a      	adds	r4, #10
10010b12:	e000      	b.n	10010b16 <char_permissions+0x36>
10010b14:	2430      	movs	r4, #48	; 0x30
10010b16:	4323      	orrs	r3, r4
10010b18:	06c4      	lsls	r4, r0, #27
10010b1a:	d506      	bpl.n	10010b2a <char_permissions+0x4a>
10010b1c:	2406      	movs	r4, #6
10010b1e:	4221      	tst	r1, r4
10010b20:	d101      	bne.n	10010b26 <char_permissions+0x46>
10010b22:	343a      	adds	r4, #58	; 0x3a
10010b24:	e000      	b.n	10010b28 <char_permissions+0x48>
10010b26:	24c0      	movs	r4, #192	; 0xc0
10010b28:	4323      	orrs	r3, r4
10010b2a:	2480      	movs	r4, #128	; 0x80
10010b2c:	0064      	lsls	r4, r4, #1
10010b2e:	4220      	tst	r0, r4
10010b30:	d000      	beq.n	10010b34 <char_permissions+0x54>
10010b32:	4323      	orrs	r3, r4
10010b34:	07c4      	lsls	r4, r0, #31
10010b36:	d502      	bpl.n	10010b3e <char_permissions+0x5e>
10010b38:	2480      	movs	r4, #128	; 0x80
10010b3a:	00a4      	lsls	r4, r4, #2
10010b3c:	4323      	orrs	r3, r4
10010b3e:	2404      	movs	r4, #4
10010b40:	4220      	tst	r0, r4
10010b42:	d006      	beq.n	10010b52 <char_permissions+0x72>
10010b44:	06cd      	lsls	r5, r1, #27
10010b46:	d400      	bmi.n	10010b4a <char_permissions+0x6a>
10010b48:	240c      	movs	r4, #12
10010b4a:	4323      	orrs	r3, r4
10010b4c:	2480      	movs	r4, #128	; 0x80
10010b4e:	0124      	lsls	r4, r4, #4
10010b50:	4323      	orrs	r3, r4
10010b52:	0644      	lsls	r4, r0, #25
10010b54:	d501      	bpl.n	10010b5a <char_permissions+0x7a>
10010b56:	4c08      	ldr	r4, [pc, #32]	; (10010b78 <char_permissions+0x98>)
10010b58:	4323      	orrs	r3, r4
10010b5a:	0600      	lsls	r0, r0, #24
10010b5c:	d507      	bpl.n	10010b6e <char_permissions+0x8e>
10010b5e:	2004      	movs	r0, #4
10010b60:	06c9      	lsls	r1, r1, #27
10010b62:	d400      	bmi.n	10010b66 <char_permissions+0x86>
10010b64:	200c      	movs	r0, #12
10010b66:	4303      	orrs	r3, r0
10010b68:	2084      	movs	r0, #132	; 0x84
10010b6a:	0180      	lsls	r0, r0, #6
10010b6c:	4303      	orrs	r3, r0
10010b6e:	0390      	lsls	r0, r2, #14
10010b70:	4303      	orrs	r3, r0
10010b72:	b298      	uxth	r0, r3
10010b74:	bd30      	pop	{r4, r5, pc}
10010b76:	46c0      	nop			; (mov r8, r8)
10010b78:	00001004 	.word	0x00001004

10010b7c <presentation_format_define>:
10010b7c:	b507      	push	{r0, r1, r2, lr}
10010b7e:	466a      	mov	r2, sp
10010b80:	780b      	ldrb	r3, [r1, #0]
10010b82:	7013      	strb	r3, [r2, #0]
10010b84:	784b      	ldrb	r3, [r1, #1]
10010b86:	7053      	strb	r3, [r2, #1]
10010b88:	884b      	ldrh	r3, [r1, #2]
10010b8a:	7093      	strb	r3, [r2, #2]
10010b8c:	0a1b      	lsrs	r3, r3, #8
10010b8e:	70d3      	strb	r3, [r2, #3]
10010b90:	790b      	ldrb	r3, [r1, #4]
10010b92:	7113      	strb	r3, [r2, #4]
10010b94:	88cb      	ldrh	r3, [r1, #6]
10010b96:	2107      	movs	r1, #7
10010b98:	7153      	strb	r3, [r2, #5]
10010b9a:	0a1b      	lsrs	r3, r3, #8
10010b9c:	7193      	strb	r3, [r2, #6]
10010b9e:	4b01      	ldr	r3, [pc, #4]	; (10010ba4 <presentation_format_define+0x28>)
10010ba0:	4798      	blx	r3
10010ba2:	bd0e      	pop	{r1, r2, r3, pc}
10010ba4:	10012f11 	.word	0x10012f11

10010ba8 <db_addATT>:
10010ba8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10010baa:	4c29      	ldr	r4, [pc, #164]	; (10010c50 <db_addATT+0xa8>)
10010bac:	1c1d      	adds	r5, r3, #0
10010bae:	6823      	ldr	r3, [r4, #0]
10010bb0:	9001      	str	r0, [sp, #4]
10010bb2:	26d3      	movs	r6, #211	; 0xd3
10010bb4:	2b00      	cmp	r3, #0
10010bb6:	d048      	beq.n	10010c4a <db_addATT+0xa2>
10010bb8:	1c1e      	adds	r6, r3, #0
10010bba:	3e0c      	subs	r6, #12
10010bbc:	6026      	str	r6, [r4, #0]
10010bbe:	2900      	cmp	r1, #0
10010bc0:	d005      	beq.n	10010bce <db_addATT+0x26>
10010bc2:	4f24      	ldr	r7, [pc, #144]	; (10010c54 <db_addATT+0xac>)
10010bc4:	46bc      	mov	ip, r7
10010bc6:	4660      	mov	r0, ip
10010bc8:	683f      	ldr	r7, [r7, #0]
10010bca:	18bf      	adds	r7, r7, r2
10010bcc:	6007      	str	r7, [r0, #0]
10010bce:	4821      	ldr	r0, [pc, #132]	; (10010c54 <db_addATT+0xac>)
10010bd0:	6807      	ldr	r7, [r0, #0]
10010bd2:	4684      	mov	ip, r0
10010bd4:	42be      	cmp	r6, r7
10010bd6:	d932      	bls.n	10010c3e <db_addATT+0x96>
10010bd8:	4668      	mov	r0, sp
10010bda:	8880      	ldrh	r0, [r0, #4]
10010bdc:	3b0c      	subs	r3, #12
10010bde:	8018      	strh	r0, [r3, #0]
10010be0:	6823      	ldr	r3, [r4, #0]
10010be2:	2900      	cmp	r1, #0
10010be4:	d009      	beq.n	10010bfa <db_addATT+0x52>
10010be6:	2a00      	cmp	r2, #0
10010be8:	d007      	beq.n	10010bfa <db_addATT+0x52>
10010bea:	4660      	mov	r0, ip
10010bec:	6800      	ldr	r0, [r0, #0]
10010bee:	809a      	strh	r2, [r3, #4]
10010bf0:	1a80      	subs	r0, r0, r2
10010bf2:	6098      	str	r0, [r3, #8]
10010bf4:	4b18      	ldr	r3, [pc, #96]	; (10010c58 <db_addATT+0xb0>)
10010bf6:	4798      	blx	r3
10010bf8:	e002      	b.n	10010c00 <db_addATT+0x58>
10010bfa:	2100      	movs	r1, #0
10010bfc:	809a      	strh	r2, [r3, #4]
10010bfe:	6099      	str	r1, [r3, #8]
10010c00:	2300      	movs	r3, #0
10010c02:	6822      	ldr	r2, [r4, #0]
10010c04:	7093      	strb	r3, [r2, #2]
10010c06:	3303      	adds	r3, #3
10010c08:	402b      	ands	r3, r5
10010c0a:	2b03      	cmp	r3, #3
10010c0c:	d001      	beq.n	10010c12 <db_addATT+0x6a>
10010c0e:	076b      	lsls	r3, r5, #29
10010c10:	d504      	bpl.n	10010c1c <db_addATT+0x74>
10010c12:	2101      	movs	r1, #1
10010c14:	6822      	ldr	r2, [r4, #0]
10010c16:	7893      	ldrb	r3, [r2, #2]
10010c18:	430b      	orrs	r3, r1
10010c1a:	7093      	strb	r3, [r2, #2]
10010c1c:	2330      	movs	r3, #48	; 0x30
10010c1e:	402b      	ands	r3, r5
10010c20:	2b30      	cmp	r3, #48	; 0x30
10010c22:	d001      	beq.n	10010c28 <db_addATT+0x80>
10010c24:	066b      	lsls	r3, r5, #25
10010c26:	d504      	bpl.n	10010c32 <db_addATT+0x8a>
10010c28:	2102      	movs	r1, #2
10010c2a:	6822      	ldr	r2, [r4, #0]
10010c2c:	7893      	ldrb	r3, [r2, #2]
10010c2e:	430b      	orrs	r3, r1
10010c30:	7093      	strb	r3, [r2, #2]
10010c32:	4a0a      	ldr	r2, [pc, #40]	; (10010c5c <db_addATT+0xb4>)
10010c34:	2600      	movs	r6, #0
10010c36:	6813      	ldr	r3, [r2, #0]
10010c38:	3301      	adds	r3, #1
10010c3a:	6013      	str	r3, [r2, #0]
10010c3c:	e005      	b.n	10010c4a <db_addATT+0xa2>
10010c3e:	6023      	str	r3, [r4, #0]
10010c40:	2611      	movs	r6, #17
10010c42:	2900      	cmp	r1, #0
10010c44:	d001      	beq.n	10010c4a <db_addATT+0xa2>
10010c46:	1aba      	subs	r2, r7, r2
10010c48:	6002      	str	r2, [r0, #0]
10010c4a:	1c30      	adds	r0, r6, #0
10010c4c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10010c4e:	46c0      	nop			; (mov r8, r8)
10010c50:	10019eb8 	.word	0x10019eb8
10010c54:	10019ebc 	.word	0x10019ebc
10010c58:	1001517f 	.word	0x1001517f
10010c5c:	10019ec0 	.word	0x10019ec0

10010c60 <user_description_define>:
10010c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10010c62:	1c05      	adds	r5, r0, #0
10010c64:	20cf      	movs	r0, #207	; 0xcf
10010c66:	2a00      	cmp	r2, #0
10010c68:	d01c      	beq.n	10010ca4 <user_description_define+0x44>
10010c6a:	1c14      	adds	r4, r2, #0
10010c6c:	2203      	movs	r2, #3
10010c6e:	1c1e      	adds	r6, r3, #0
10010c70:	400a      	ands	r2, r1
10010c72:	1c0b      	adds	r3, r1, #0
10010c74:	3a03      	subs	r2, #3
10010c76:	4251      	negs	r1, r2
10010c78:	4151      	adcs	r1, r2
10010c7a:	075a      	lsls	r2, r3, #29
10010c7c:	0fd2      	lsrs	r2, r2, #31
10010c7e:	430a      	orrs	r2, r1
10010c80:	03d2      	lsls	r2, r2, #15
10010c82:	4f09      	ldr	r7, [pc, #36]	; (10010ca8 <user_description_define+0x48>)
10010c84:	1c28      	adds	r0, r5, #0
10010c86:	2a00      	cmp	r2, #0
10010c88:	d003      	beq.n	10010c92 <user_description_define+0x32>
10010c8a:	1c21      	adds	r1, r4, #0
10010c8c:	1c32      	adds	r2, r6, #0
10010c8e:	47b8      	blx	r7
10010c90:	e008      	b.n	10010ca4 <user_description_define+0x44>
10010c92:	1c11      	adds	r1, r2, #0
10010c94:	47b8      	blx	r7
10010c96:	2800      	cmp	r0, #0
10010c98:	d104      	bne.n	10010ca4 <user_description_define+0x44>
10010c9a:	1c28      	adds	r0, r5, #0
10010c9c:	1c31      	adds	r1, r6, #0
10010c9e:	1c22      	adds	r2, r4, #0
10010ca0:	4b02      	ldr	r3, [pc, #8]	; (10010cac <user_description_define+0x4c>)
10010ca2:	4798      	blx	r3
10010ca4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10010ca6:	46c0      	nop			; (mov r8, r8)
10010ca8:	10010ba9 	.word	0x10010ba9
10010cac:	10012f11 	.word	0x10012f11

10010cb0 <at_ble_read_authorize_reply.part.1>:
10010cb0:	b537      	push	{r0, r1, r2, r4, r5, lr}
10010cb2:	4b09      	ldr	r3, [pc, #36]	; (10010cd8 <at_ble_read_authorize_reply.part.1+0x28>)
10010cb4:	1c05      	adds	r5, r0, #0
10010cb6:	1c08      	adds	r0, r1, #0
10010cb8:	1c0c      	adds	r4, r1, #0
10010cba:	4798      	blx	r3
10010cbc:	2800      	cmp	r0, #0
10010cbe:	d009      	beq.n	10010cd4 <at_ble_read_authorize_reply.part.1+0x24>
10010cc0:	6882      	ldr	r2, [r0, #8]
10010cc2:	2a00      	cmp	r2, #0
10010cc4:	d006      	beq.n	10010cd4 <at_ble_read_authorize_reply.part.1+0x24>
10010cc6:	8883      	ldrh	r3, [r0, #4]
10010cc8:	1c29      	adds	r1, r5, #0
10010cca:	9200      	str	r2, [sp, #0]
10010ccc:	1c20      	adds	r0, r4, #0
10010cce:	2200      	movs	r2, #0
10010cd0:	4c02      	ldr	r4, [pc, #8]	; (10010cdc <at_ble_read_authorize_reply.part.1+0x2c>)
10010cd2:	47a0      	blx	r4
10010cd4:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
10010cd6:	46c0      	nop			; (mov r8, r8)
10010cd8:	10010a49 	.word	0x10010a49
10010cdc:	100129a9 	.word	0x100129a9

10010ce0 <internal_at_ble_service_define>:
10010ce0:	b5f0      	push	{r4, r5, r6, r7, lr}
10010ce2:	b08b      	sub	sp, #44	; 0x2c
10010ce4:	9306      	str	r3, [sp, #24]
10010ce6:	ab10      	add	r3, sp, #64	; 0x40
10010ce8:	9202      	str	r2, [sp, #8]
10010cea:	cb04      	ldmia	r3!, {r2}
10010cec:	1c05      	adds	r5, r0, #0
10010cee:	881b      	ldrh	r3, [r3, #0]
10010cf0:	9105      	str	r1, [sp, #20]
10010cf2:	9303      	str	r3, [sp, #12]
10010cf4:	ab12      	add	r3, sp, #72	; 0x48
10010cf6:	781b      	ldrb	r3, [r3, #0]
10010cf8:	20cf      	movs	r0, #207	; 0xcf
10010cfa:	9304      	str	r3, [sp, #16]
10010cfc:	2d00      	cmp	r5, #0
10010cfe:	d100      	bne.n	10010d02 <internal_at_ble_service_define+0x22>
10010d00:	e1ca      	b.n	10011098 <internal_at_ble_service_define+0x3b8>
10010d02:	2900      	cmp	r1, #0
10010d04:	d100      	bne.n	10010d08 <internal_at_ble_service_define+0x28>
10010d06:	e1c7      	b.n	10011098 <internal_at_ble_service_define+0x3b8>
10010d08:	2a00      	cmp	r2, #0
10010d0a:	d100      	bne.n	10010d0e <internal_at_ble_service_define+0x2e>
10010d0c:	e1c4      	b.n	10011098 <internal_at_ble_service_define+0x3b8>
10010d0e:	9b03      	ldr	r3, [sp, #12]
10010d10:	2b00      	cmp	r3, #0
10010d12:	d100      	bne.n	10010d16 <internal_at_ble_service_define+0x36>
10010d14:	e1c0      	b.n	10011098 <internal_at_ble_service_define+0x3b8>
10010d16:	4bc9      	ldr	r3, [pc, #804]	; (1001103c <internal_at_ble_service_define+0x35c>)
10010d18:	3004      	adds	r0, #4
10010d1a:	681e      	ldr	r6, [r3, #0]
10010d1c:	2e00      	cmp	r6, #0
10010d1e:	d100      	bne.n	10010d22 <internal_at_ble_service_define+0x42>
10010d20:	e1ba      	b.n	10011098 <internal_at_ble_service_define+0x3b8>
10010d22:	2400      	movs	r4, #0
10010d24:	4bc6      	ldr	r3, [pc, #792]	; (10011040 <internal_at_ble_service_define+0x360>)
10010d26:	8034      	strh	r4, [r6, #0]
10010d28:	881b      	ldrh	r3, [r3, #0]
10010d2a:	1db7      	adds	r7, r6, #6
10010d2c:	1c21      	adds	r1, r4, #0
10010d2e:	2210      	movs	r2, #16
10010d30:	8073      	strh	r3, [r6, #2]
10010d32:	1c38      	adds	r0, r7, #0
10010d34:	4bc3      	ldr	r3, [pc, #780]	; (10011044 <internal_at_ble_service_define+0x364>)
10010d36:	4798      	blx	r3
10010d38:	7828      	ldrb	r0, [r5, #0]
10010d3a:	4bc3      	ldr	r3, [pc, #780]	; (10011048 <internal_at_ble_service_define+0x368>)
10010d3c:	4798      	blx	r3
10010d3e:	1c69      	adds	r1, r5, #1
10010d40:	1c02      	adds	r2, r0, #0
10010d42:	4bc2      	ldr	r3, [pc, #776]	; (1001104c <internal_at_ble_service_define+0x36c>)
10010d44:	1c38      	adds	r0, r7, #0
10010d46:	4798      	blx	r3
10010d48:	2204      	movs	r2, #4
10010d4a:	782b      	ldrb	r3, [r5, #0]
10010d4c:	9d02      	ldr	r5, [sp, #8]
10010d4e:	011b      	lsls	r3, r3, #4
10010d50:	4313      	orrs	r3, r2
10010d52:	9a04      	ldr	r2, [sp, #16]
10010d54:	7174      	strb	r4, [r6, #5]
10010d56:	0192      	lsls	r2, r2, #6
10010d58:	4313      	orrs	r3, r2
10010d5a:	7133      	strb	r3, [r6, #4]
10010d5c:	2316      	movs	r3, #22
10010d5e:	9a06      	ldr	r2, [sp, #24]
10010d60:	3512      	adds	r5, #18
10010d62:	4353      	muls	r3, r2
10010d64:	9a02      	ldr	r2, [sp, #8]
10010d66:	3312      	adds	r3, #18
10010d68:	18d7      	adds	r7, r2, r3
10010d6a:	42bd      	cmp	r5, r7
10010d6c:	d00f      	beq.n	10010d8e <internal_at_ble_service_define+0xae>
10010d6e:	4bb8      	ldr	r3, [pc, #736]	; (10011050 <internal_at_ble_service_define+0x370>)
10010d70:	8829      	ldrh	r1, [r5, #0]
10010d72:	9300      	str	r3, [sp, #0]
10010d74:	230e      	movs	r3, #14
10010d76:	aa06      	add	r2, sp, #24
10010d78:	189b      	adds	r3, r3, r2
10010d7a:	9301      	str	r3, [sp, #4]
10010d7c:	4cb5      	ldr	r4, [pc, #724]	; (10011054 <internal_at_ble_service_define+0x374>)
10010d7e:	1c30      	adds	r0, r6, #0
10010d80:	2201      	movs	r2, #1
10010d82:	2302      	movs	r3, #2
10010d84:	47a0      	blx	r4
10010d86:	3516      	adds	r5, #22
10010d88:	1e04      	subs	r4, r0, #0
10010d8a:	d0ee      	beq.n	10010d6a <internal_at_ble_service_define+0x8a>
10010d8c:	e183      	b.n	10011096 <internal_at_ble_service_define+0x3b6>
10010d8e:	9f10      	ldr	r7, [sp, #64]	; 0x40
10010d90:	2300      	movs	r3, #0
10010d92:	3714      	adds	r7, #20
10010d94:	1c3d      	adds	r5, r7, #0
10010d96:	9302      	str	r3, [sp, #8]
10010d98:	9b02      	ldr	r3, [sp, #8]
10010d9a:	9a03      	ldr	r2, [sp, #12]
10010d9c:	4293      	cmp	r3, r2
10010d9e:	db00      	blt.n	10010da2 <internal_at_ble_service_define+0xc2>
10010da0:	e0bf      	b.n	10010f22 <internal_at_ble_service_define+0x242>
10010da2:	4bad      	ldr	r3, [pc, #692]	; (10011058 <internal_at_ble_service_define+0x378>)
10010da4:	aa06      	add	r2, sp, #24
10010da6:	9300      	str	r3, [sp, #0]
10010da8:	230e      	movs	r3, #14
10010daa:	189b      	adds	r3, r3, r2
10010dac:	9301      	str	r3, [sp, #4]
10010dae:	4ca9      	ldr	r4, [pc, #676]	; (10011054 <internal_at_ble_service_define+0x374>)
10010db0:	1c30      	adds	r0, r6, #0
10010db2:	2104      	movs	r1, #4
10010db4:	2201      	movs	r2, #1
10010db6:	2302      	movs	r3, #2
10010db8:	47a0      	blx	r4
10010dba:	1e04      	subs	r4, r0, #0
10010dbc:	d000      	beq.n	10010dc0 <internal_at_ble_service_define+0xe0>
10010dbe:	e16a      	b.n	10011096 <internal_at_ble_service_define+0x3b6>
10010dc0:	1c2b      	adds	r3, r5, #0
10010dc2:	3b12      	subs	r3, #18
10010dc4:	7b2c      	ldrb	r4, [r5, #12]
10010dc6:	781b      	ldrb	r3, [r3, #0]
10010dc8:	1c21      	adds	r1, r4, #0
10010dca:	1c1a      	adds	r2, r3, #0
10010dcc:	9304      	str	r3, [sp, #16]
10010dce:	8828      	ldrh	r0, [r5, #0]
10010dd0:	4ba2      	ldr	r3, [pc, #648]	; (1001105c <internal_at_ble_service_define+0x37c>)
10010dd2:	4798      	blx	r3
10010dd4:	2303      	movs	r3, #3
10010dd6:	4023      	ands	r3, r4
10010dd8:	3b03      	subs	r3, #3
10010dda:	4259      	negs	r1, r3
10010ddc:	4159      	adcs	r1, r3
10010dde:	2301      	movs	r3, #1
10010de0:	08a4      	lsrs	r4, r4, #2
10010de2:	401c      	ands	r4, r3
10010de4:	430c      	orrs	r4, r1
10010de6:	896b      	ldrh	r3, [r5, #10]
10010de8:	03e4      	lsls	r4, r4, #15
10010dea:	431c      	orrs	r4, r3
10010dec:	9007      	str	r0, [sp, #28]
10010dee:	4b96      	ldr	r3, [pc, #600]	; (10011048 <internal_at_ble_service_define+0x368>)
10010df0:	9804      	ldr	r0, [sp, #16]
10010df2:	4798      	blx	r3
10010df4:	1c2a      	adds	r2, r5, #0
10010df6:	3a11      	subs	r2, #17
10010df8:	9200      	str	r2, [sp, #0]
10010dfa:	3a03      	subs	r2, #3
10010dfc:	1c03      	adds	r3, r0, #0
10010dfe:	9201      	str	r2, [sp, #4]
10010e00:	1c21      	adds	r1, r4, #0
10010e02:	1c30      	adds	r0, r6, #0
10010e04:	4c93      	ldr	r4, [pc, #588]	; (10011054 <internal_at_ble_service_define+0x374>)
10010e06:	9a07      	ldr	r2, [sp, #28]
10010e08:	47a0      	blx	r4
10010e0a:	1e04      	subs	r4, r0, #0
10010e0c:	d000      	beq.n	10010e10 <internal_at_ble_service_define+0x130>
10010e0e:	e142      	b.n	10011096 <internal_at_ble_service_define+0x3b6>
10010e10:	22c0      	movs	r2, #192	; 0xc0
10010e12:	882b      	ldrh	r3, [r5, #0]
10010e14:	0052      	lsls	r2, r2, #1
10010e16:	4213      	tst	r3, r2
10010e18:	d104      	bne.n	10010e24 <internal_at_ble_service_define+0x144>
10010e1a:	8aab      	ldrh	r3, [r5, #20]
10010e1c:	9304      	str	r3, [sp, #16]
10010e1e:	2b00      	cmp	r3, #0
10010e20:	d116      	bne.n	10010e50 <internal_at_ble_service_define+0x170>
10010e22:	e03a      	b.n	10010e9a <internal_at_ble_service_define+0x1ba>
10010e24:	2201      	movs	r2, #1
10010e26:	09d9      	lsrs	r1, r3, #7
10010e28:	4011      	ands	r1, r2
10010e2a:	05db      	lsls	r3, r3, #23
10010e2c:	d501      	bpl.n	10010e32 <internal_at_ble_service_define+0x152>
10010e2e:	2302      	movs	r3, #2
10010e30:	4319      	orrs	r1, r3
10010e32:	4b8b      	ldr	r3, [pc, #556]	; (10011060 <internal_at_ble_service_define+0x380>)
10010e34:	aa06      	add	r2, sp, #24
10010e36:	9300      	str	r3, [sp, #0]
10010e38:	230e      	movs	r3, #14
10010e3a:	189b      	adds	r3, r3, r2
10010e3c:	9301      	str	r3, [sp, #4]
10010e3e:	4c85      	ldr	r4, [pc, #532]	; (10011054 <internal_at_ble_service_define+0x374>)
10010e40:	0209      	lsls	r1, r1, #8
10010e42:	1c30      	adds	r0, r6, #0
10010e44:	2201      	movs	r2, #1
10010e46:	2302      	movs	r3, #2
10010e48:	47a0      	blx	r4
10010e4a:	1e04      	subs	r4, r0, #0
10010e4c:	d0e5      	beq.n	10010e1a <internal_at_ble_service_define+0x13a>
10010e4e:	e122      	b.n	10011096 <internal_at_ble_service_define+0x3b6>
10010e50:	2380      	movs	r3, #128	; 0x80
10010e52:	882a      	ldrh	r2, [r5, #0]
10010e54:	7f2c      	ldrb	r4, [r5, #28]
10010e56:	005b      	lsls	r3, r3, #1
10010e58:	401a      	ands	r2, r3
10010e5a:	1c20      	adds	r0, r4, #0
10010e5c:	2101      	movs	r1, #1
10010e5e:	2a00      	cmp	r2, #0
10010e60:	d000      	beq.n	10010e64 <internal_at_ble_service_define+0x184>
10010e62:	1c0a      	adds	r2, r1, #0
10010e64:	4b7f      	ldr	r3, [pc, #508]	; (10011064 <internal_at_ble_service_define+0x384>)
10010e66:	4798      	blx	r3
10010e68:	2203      	movs	r2, #3
10010e6a:	4022      	ands	r2, r4
10010e6c:	3a03      	subs	r2, #3
10010e6e:	4251      	negs	r1, r2
10010e70:	4151      	adcs	r1, r2
10010e72:	4b7d      	ldr	r3, [pc, #500]	; (10011068 <internal_at_ble_service_define+0x388>)
10010e74:	1c0a      	adds	r2, r1, #0
10010e76:	9300      	str	r3, [sp, #0]
10010e78:	1c2b      	adds	r3, r5, #0
10010e7a:	0764      	lsls	r4, r4, #29
10010e7c:	0fe4      	lsrs	r4, r4, #31
10010e7e:	4322      	orrs	r2, r4
10010e80:	03d2      	lsls	r2, r2, #15
10010e82:	4310      	orrs	r0, r2
10010e84:	3320      	adds	r3, #32
10010e86:	b282      	uxth	r2, r0
10010e88:	9301      	str	r3, [sp, #4]
10010e8a:	4c72      	ldr	r4, [pc, #456]	; (10011054 <internal_at_ble_service_define+0x374>)
10010e8c:	1c30      	adds	r0, r6, #0
10010e8e:	9904      	ldr	r1, [sp, #16]
10010e90:	2302      	movs	r3, #2
10010e92:	47a0      	blx	r4
10010e94:	1e04      	subs	r4, r0, #0
10010e96:	d000      	beq.n	10010e9a <internal_at_ble_service_define+0x1ba>
10010e98:	e0fd      	b.n	10011096 <internal_at_ble_service_define+0x3b6>
10010e9a:	2101      	movs	r1, #1
10010e9c:	882b      	ldrh	r3, [r5, #0]
10010e9e:	420b      	tst	r3, r1
10010ea0:	d011      	beq.n	10010ec6 <internal_at_ble_service_define+0x1e6>
10010ea2:	7fa8      	ldrb	r0, [r5, #30]
10010ea4:	4b6f      	ldr	r3, [pc, #444]	; (10011064 <internal_at_ble_service_define+0x384>)
10010ea6:	2200      	movs	r2, #0
10010ea8:	4798      	blx	r3
10010eaa:	4b70      	ldr	r3, [pc, #448]	; (1001106c <internal_at_ble_service_define+0x38c>)
10010eac:	1c02      	adds	r2, r0, #0
10010eae:	9300      	str	r3, [sp, #0]
10010eb0:	1c2b      	adds	r3, r5, #0
10010eb2:	3324      	adds	r3, #36	; 0x24
10010eb4:	9301      	str	r3, [sp, #4]
10010eb6:	4c67      	ldr	r4, [pc, #412]	; (10011054 <internal_at_ble_service_define+0x374>)
10010eb8:	1c30      	adds	r0, r6, #0
10010eba:	496d      	ldr	r1, [pc, #436]	; (10011070 <internal_at_ble_service_define+0x390>)
10010ebc:	2302      	movs	r3, #2
10010ebe:	47a0      	blx	r4
10010ec0:	1e04      	subs	r4, r0, #0
10010ec2:	d000      	beq.n	10010ec6 <internal_at_ble_service_define+0x1e6>
10010ec4:	e0e7      	b.n	10011096 <internal_at_ble_service_define+0x3b6>
10010ec6:	2330      	movs	r3, #48	; 0x30
10010ec8:	882a      	ldrh	r2, [r5, #0]
10010eca:	421a      	tst	r2, r3
10010ecc:	d012      	beq.n	10010ef4 <internal_at_ble_service_define+0x214>
10010ece:	2101      	movs	r1, #1
10010ed0:	7f68      	ldrb	r0, [r5, #29]
10010ed2:	1c0a      	adds	r2, r1, #0
10010ed4:	4b63      	ldr	r3, [pc, #396]	; (10011064 <internal_at_ble_service_define+0x384>)
10010ed6:	4798      	blx	r3
10010ed8:	4b66      	ldr	r3, [pc, #408]	; (10011074 <internal_at_ble_service_define+0x394>)
10010eda:	1c02      	adds	r2, r0, #0
10010edc:	9300      	str	r3, [sp, #0]
10010ede:	1c2b      	adds	r3, r5, #0
10010ee0:	3322      	adds	r3, #34	; 0x22
10010ee2:	9301      	str	r3, [sp, #4]
10010ee4:	4c5b      	ldr	r4, [pc, #364]	; (10011054 <internal_at_ble_service_define+0x374>)
10010ee6:	1c30      	adds	r0, r6, #0
10010ee8:	4961      	ldr	r1, [pc, #388]	; (10011070 <internal_at_ble_service_define+0x390>)
10010eea:	2302      	movs	r3, #2
10010eec:	47a0      	blx	r4
10010eee:	1e04      	subs	r4, r0, #0
10010ef0:	d000      	beq.n	10010ef4 <internal_at_ble_service_define+0x214>
10010ef2:	e0d0      	b.n	10011096 <internal_at_ble_service_define+0x3b6>
10010ef4:	69ab      	ldr	r3, [r5, #24]
10010ef6:	2b00      	cmp	r3, #0
10010ef8:	d00e      	beq.n	10010f18 <internal_at_ble_service_define+0x238>
10010efa:	4b5f      	ldr	r3, [pc, #380]	; (10011078 <internal_at_ble_service_define+0x398>)
10010efc:	aa06      	add	r2, sp, #24
10010efe:	9300      	str	r3, [sp, #0]
10010f00:	230e      	movs	r3, #14
10010f02:	189b      	adds	r3, r3, r2
10010f04:	9301      	str	r3, [sp, #4]
10010f06:	4c53      	ldr	r4, [pc, #332]	; (10011054 <internal_at_ble_service_define+0x374>)
10010f08:	1c30      	adds	r0, r6, #0
10010f0a:	2107      	movs	r1, #7
10010f0c:	2201      	movs	r2, #1
10010f0e:	2302      	movs	r3, #2
10010f10:	47a0      	blx	r4
10010f12:	1e04      	subs	r4, r0, #0
10010f14:	d000      	beq.n	10010f18 <internal_at_ble_service_define+0x238>
10010f16:	e0be      	b.n	10011096 <internal_at_ble_service_define+0x3b6>
10010f18:	9b02      	ldr	r3, [sp, #8]
10010f1a:	353c      	adds	r5, #60	; 0x3c
10010f1c:	3301      	adds	r3, #1
10010f1e:	9302      	str	r3, [sp, #8]
10010f20:	e73a      	b.n	10010d98 <internal_at_ble_service_define+0xb8>
10010f22:	1c30      	adds	r0, r6, #0
10010f24:	4b55      	ldr	r3, [pc, #340]	; (1001107c <internal_at_ble_service_define+0x39c>)
10010f26:	4798      	blx	r3
10010f28:	1e04      	subs	r4, r0, #0
10010f2a:	d000      	beq.n	10010f2e <internal_at_ble_service_define+0x24e>
10010f2c:	e0b3      	b.n	10011096 <internal_at_ble_service_define+0x3b6>
10010f2e:	8833      	ldrh	r3, [r6, #0]
10010f30:	9a05      	ldr	r2, [sp, #20]
10010f32:	8013      	strh	r3, [r2, #0]
10010f34:	8836      	ldrh	r6, [r6, #0]
10010f36:	9b06      	ldr	r3, [sp, #24]
10010f38:	9a03      	ldr	r2, [sp, #12]
10010f3a:	18f6      	adds	r6, r6, r3
10010f3c:	b2b3      	uxth	r3, r6
10010f3e:	9302      	str	r3, [sp, #8]
10010f40:	233c      	movs	r3, #60	; 0x3c
10010f42:	4353      	muls	r3, r2
10010f44:	9a10      	ldr	r2, [sp, #64]	; 0x40
10010f46:	3314      	adds	r3, #20
10010f48:	18d3      	adds	r3, r2, r3
10010f4a:	9304      	str	r3, [sp, #16]
10010f4c:	9b04      	ldr	r3, [sp, #16]
10010f4e:	429f      	cmp	r7, r3
10010f50:	d100      	bne.n	10010f54 <internal_at_ble_service_define+0x274>
10010f52:	e0a0      	b.n	10011096 <internal_at_ble_service_define+0x3b6>
10010f54:	9b02      	ldr	r3, [sp, #8]
10010f56:	1c9d      	adds	r5, r3, #2
10010f58:	1c3b      	adds	r3, r7, #0
10010f5a:	b2ad      	uxth	r5, r5
10010f5c:	3b14      	subs	r3, #20
10010f5e:	801d      	strh	r5, [r3, #0]
10010f60:	9303      	str	r3, [sp, #12]
10010f62:	893b      	ldrh	r3, [r7, #8]
10010f64:	2b00      	cmp	r3, #0
10010f66:	d108      	bne.n	10010f7a <internal_at_ble_service_define+0x29a>
10010f68:	23c0      	movs	r3, #192	; 0xc0
10010f6a:	883a      	ldrh	r2, [r7, #0]
10010f6c:	005b      	lsls	r3, r3, #1
10010f6e:	421a      	tst	r2, r3
10010f70:	d026      	beq.n	10010fc0 <internal_at_ble_service_define+0x2e0>
10010f72:	9e02      	ldr	r6, [sp, #8]
10010f74:	3603      	adds	r6, #3
10010f76:	b2b5      	uxth	r5, r6
10010f78:	e022      	b.n	10010fc0 <internal_at_ble_service_define+0x2e0>
10010f7a:	2103      	movs	r1, #3
10010f7c:	7b3b      	ldrb	r3, [r7, #12]
10010f7e:	4019      	ands	r1, r3
10010f80:	3903      	subs	r1, #3
10010f82:	424a      	negs	r2, r1
10010f84:	414a      	adcs	r2, r1
10010f86:	0759      	lsls	r1, r3, #29
10010f88:	0fc9      	lsrs	r1, r1, #31
10010f8a:	4311      	orrs	r1, r2
10010f8c:	03c9      	lsls	r1, r1, #15
10010f8e:	897a      	ldrh	r2, [r7, #10]
10010f90:	2900      	cmp	r1, #0
10010f92:	d007      	beq.n	10010fa4 <internal_at_ble_service_define+0x2c4>
10010f94:	6879      	ldr	r1, [r7, #4]
10010f96:	2900      	cmp	r1, #0
10010f98:	d100      	bne.n	10010f9c <internal_at_ble_service_define+0x2bc>
10010f9a:	4939      	ldr	r1, [pc, #228]	; (10011080 <internal_at_ble_service_define+0x3a0>)
10010f9c:	1c28      	adds	r0, r5, #0
10010f9e:	4e39      	ldr	r6, [pc, #228]	; (10011084 <internal_at_ble_service_define+0x3a4>)
10010fa0:	47b0      	blx	r6
10010fa2:	e00a      	b.n	10010fba <internal_at_ble_service_define+0x2da>
10010fa4:	1c28      	adds	r0, r5, #0
10010fa6:	4e37      	ldr	r6, [pc, #220]	; (10011084 <internal_at_ble_service_define+0x3a4>)
10010fa8:	47b0      	blx	r6
10010faa:	2800      	cmp	r0, #0
10010fac:	d172      	bne.n	10011094 <internal_at_ble_service_define+0x3b4>
10010fae:	9b03      	ldr	r3, [sp, #12]
10010fb0:	8939      	ldrh	r1, [r7, #8]
10010fb2:	8818      	ldrh	r0, [r3, #0]
10010fb4:	687a      	ldr	r2, [r7, #4]
10010fb6:	4b34      	ldr	r3, [pc, #208]	; (10011088 <internal_at_ble_service_define+0x3a8>)
10010fb8:	4798      	blx	r3
10010fba:	2800      	cmp	r0, #0
10010fbc:	d0d4      	beq.n	10010f68 <internal_at_ble_service_define+0x288>
10010fbe:	e069      	b.n	10011094 <internal_at_ble_service_define+0x3b4>
10010fc0:	8abb      	ldrh	r3, [r7, #20]
10010fc2:	2b00      	cmp	r3, #0
10010fc4:	d00a      	beq.n	10010fdc <internal_at_ble_service_define+0x2fc>
10010fc6:	3501      	adds	r5, #1
10010fc8:	b2ad      	uxth	r5, r5
10010fca:	843d      	strh	r5, [r7, #32]
10010fcc:	7f39      	ldrb	r1, [r7, #28]
10010fce:	8afb      	ldrh	r3, [r7, #22]
10010fd0:	1c28      	adds	r0, r5, #0
10010fd2:	693a      	ldr	r2, [r7, #16]
10010fd4:	4e2d      	ldr	r6, [pc, #180]	; (1001108c <internal_at_ble_service_define+0x3ac>)
10010fd6:	47b0      	blx	r6
10010fd8:	2800      	cmp	r0, #0
10010fda:	d15b      	bne.n	10011094 <internal_at_ble_service_define+0x3b4>
10010fdc:	883b      	ldrh	r3, [r7, #0]
10010fde:	07db      	lsls	r3, r3, #31
10010fe0:	d50d      	bpl.n	10010ffe <internal_at_ble_service_define+0x31e>
10010fe2:	2200      	movs	r2, #0
10010fe4:	3501      	adds	r5, #1
10010fe6:	b2ad      	uxth	r5, r5
10010fe8:	a909      	add	r1, sp, #36	; 0x24
10010fea:	84bd      	strh	r5, [r7, #36]	; 0x24
10010fec:	7fbb      	ldrb	r3, [r7, #30]
10010fee:	1c28      	adds	r0, r5, #0
10010ff0:	700a      	strb	r2, [r1, #0]
10010ff2:	704a      	strb	r2, [r1, #1]
10010ff4:	4e23      	ldr	r6, [pc, #140]	; (10011084 <internal_at_ble_service_define+0x3a4>)
10010ff6:	3202      	adds	r2, #2
10010ff8:	47b0      	blx	r6
10010ffa:	2800      	cmp	r0, #0
10010ffc:	d14a      	bne.n	10011094 <internal_at_ble_service_define+0x3b4>
10010ffe:	2330      	movs	r3, #48	; 0x30
10011000:	883a      	ldrh	r2, [r7, #0]
10011002:	421a      	tst	r2, r3
10011004:	d00d      	beq.n	10011022 <internal_at_ble_service_define+0x342>
10011006:	2200      	movs	r2, #0
10011008:	3501      	adds	r5, #1
1001100a:	b2ad      	uxth	r5, r5
1001100c:	a909      	add	r1, sp, #36	; 0x24
1001100e:	847d      	strh	r5, [r7, #34]	; 0x22
10011010:	7f7b      	ldrb	r3, [r7, #29]
10011012:	1c28      	adds	r0, r5, #0
10011014:	700a      	strb	r2, [r1, #0]
10011016:	704a      	strb	r2, [r1, #1]
10011018:	4e1a      	ldr	r6, [pc, #104]	; (10011084 <internal_at_ble_service_define+0x3a4>)
1001101a:	3202      	adds	r2, #2
1001101c:	47b0      	blx	r6
1001101e:	2800      	cmp	r0, #0
10011020:	d138      	bne.n	10011094 <internal_at_ble_service_define+0x3b4>
10011022:	69b9      	ldr	r1, [r7, #24]
10011024:	2900      	cmp	r1, #0
10011026:	d006      	beq.n	10011036 <internal_at_ble_service_define+0x356>
10011028:	3501      	adds	r5, #1
1001102a:	b2ad      	uxth	r5, r5
1001102c:	1c28      	adds	r0, r5, #0
1001102e:	4b18      	ldr	r3, [pc, #96]	; (10011090 <internal_at_ble_service_define+0x3b0>)
10011030:	4798      	blx	r3
10011032:	2800      	cmp	r0, #0
10011034:	d12e      	bne.n	10011094 <internal_at_ble_service_define+0x3b4>
10011036:	373c      	adds	r7, #60	; 0x3c
10011038:	9502      	str	r5, [sp, #8]
1001103a:	e787      	b.n	10010f4c <internal_at_ble_service_define+0x26c>
1001103c:	10019ec8 	.word	0x10019ec8
10011040:	1001adbc 	.word	0x1001adbc
10011044:	10015191 	.word	0x10015191
10011048:	10010a15 	.word	0x10010a15
1001104c:	1001517f 	.word	0x1001517f
10011050:	1001821f 	.word	0x1001821f
10011054:	10012ea1 	.word	0x10012ea1
10011058:	10018221 	.word	0x10018221
1001105c:	10010ae1 	.word	0x10010ae1
10011060:	1001821d 	.word	0x1001821d
10011064:	10010a89 	.word	0x10010a89
10011068:	10018219 	.word	0x10018219
1001106c:	1001821b 	.word	0x1001821b
10011070:	00008002 	.word	0x00008002
10011074:	10018215 	.word	0x10018215
10011078:	10018217 	.word	0x10018217
1001107c:	10012d95 	.word	0x10012d95
10011080:	10019eb4 	.word	0x10019eb4
10011084:	10010ba9 	.word	0x10010ba9
10011088:	10012f11 	.word	0x10012f11
1001108c:	10010c61 	.word	0x10010c61
10011090:	10010b7d 	.word	0x10010b7d
10011094:	1c04      	adds	r4, r0, #0
10011096:	1c20      	adds	r0, r4, #0
10011098:	b00b      	add	sp, #44	; 0x2c
1001109a:	bdf0      	pop	{r4, r5, r6, r7, pc}

1001109c <initi_gatt_server_module>:
1001109c:	2300      	movs	r3, #0
1001109e:	4a07      	ldr	r2, [pc, #28]	; (100110bc <initi_gatt_server_module+0x20>)
100110a0:	7013      	strb	r3, [r2, #0]
100110a2:	4a07      	ldr	r2, [pc, #28]	; (100110c0 <initi_gatt_server_module+0x24>)
100110a4:	6013      	str	r3, [r2, #0]
100110a6:	4a07      	ldr	r2, [pc, #28]	; (100110c4 <initi_gatt_server_module+0x28>)
100110a8:	6013      	str	r3, [r2, #0]
100110aa:	4a07      	ldr	r2, [pc, #28]	; (100110c8 <initi_gatt_server_module+0x2c>)
100110ac:	6013      	str	r3, [r2, #0]
100110ae:	4a07      	ldr	r2, [pc, #28]	; (100110cc <initi_gatt_server_module+0x30>)
100110b0:	6013      	str	r3, [r2, #0]
100110b2:	4a07      	ldr	r2, [pc, #28]	; (100110d0 <initi_gatt_server_module+0x34>)
100110b4:	6013      	str	r3, [r2, #0]
100110b6:	4a07      	ldr	r2, [pc, #28]	; (100110d4 <initi_gatt_server_module+0x38>)
100110b8:	6013      	str	r3, [r2, #0]
100110ba:	4770      	bx	lr
100110bc:	10019eb4 	.word	0x10019eb4
100110c0:	10019ec4 	.word	0x10019ec4
100110c4:	10019ec0 	.word	0x10019ec0
100110c8:	10019eb0 	.word	0x10019eb0
100110cc:	10019ebc 	.word	0x10019ebc
100110d0:	10019eb8 	.word	0x10019eb8
100110d4:	10019ec8 	.word	0x10019ec8

100110d8 <db_init>:
100110d8:	4b0a      	ldr	r3, [pc, #40]	; (10011104 <db_init+0x2c>)
100110da:	4a0b      	ldr	r2, [pc, #44]	; (10011108 <db_init+0x30>)
100110dc:	6018      	str	r0, [r3, #0]
100110de:	084b      	lsrs	r3, r1, #1
100110e0:	6013      	str	r3, [r2, #0]
100110e2:	4a0a      	ldr	r2, [pc, #40]	; (1001110c <db_init+0x34>)
100110e4:	18c3      	adds	r3, r0, r3
100110e6:	6013      	str	r3, [r2, #0]
100110e8:	4a09      	ldr	r2, [pc, #36]	; (10011110 <db_init+0x38>)
100110ea:	1841      	adds	r1, r0, r1
100110ec:	6013      	str	r3, [r2, #0]
100110ee:	2303      	movs	r3, #3
100110f0:	2200      	movs	r2, #0
100110f2:	3103      	adds	r1, #3
100110f4:	4399      	bics	r1, r3
100110f6:	4b07      	ldr	r3, [pc, #28]	; (10011114 <db_init+0x3c>)
100110f8:	3904      	subs	r1, #4
100110fa:	6019      	str	r1, [r3, #0]
100110fc:	4b06      	ldr	r3, [pc, #24]	; (10011118 <db_init+0x40>)
100110fe:	601a      	str	r2, [r3, #0]
10011100:	4770      	bx	lr
10011102:	46c0      	nop			; (mov r8, r8)
10011104:	10019ec8 	.word	0x10019ec8
10011108:	10019ec4 	.word	0x10019ec4
1001110c:	10019eb0 	.word	0x10019eb0
10011110:	10019ebc 	.word	0x10019ebc
10011114:	10019eb8 	.word	0x10019eb8
10011118:	10019ec0 	.word	0x10019ec0

1001111c <at_ble_primary_service_define>:
1001111c:	b530      	push	{r4, r5, lr}
1001111e:	b085      	sub	sp, #20
10011120:	ac08      	add	r4, sp, #32
10011122:	cc20      	ldmia	r4!, {r5}
10011124:	8824      	ldrh	r4, [r4, #0]
10011126:	9500      	str	r5, [sp, #0]
10011128:	9401      	str	r4, [sp, #4]
1001112a:	2401      	movs	r4, #1
1001112c:	9402      	str	r4, [sp, #8]
1001112e:	4c02      	ldr	r4, [pc, #8]	; (10011138 <at_ble_primary_service_define+0x1c>)
10011130:	47a0      	blx	r4
10011132:	b005      	add	sp, #20
10011134:	bd30      	pop	{r4, r5, pc}
10011136:	46c0      	nop			; (mov r8, r8)
10011138:	10010ce1 	.word	0x10010ce1

1001113c <at_ble_characteristic_value_set>:
1001113c:	b570      	push	{r4, r5, r6, lr}
1001113e:	4b0b      	ldr	r3, [pc, #44]	; (1001116c <at_ble_characteristic_value_set+0x30>)
10011140:	1c06      	adds	r6, r0, #0
10011142:	1c0c      	adds	r4, r1, #0
10011144:	1c15      	adds	r5, r2, #0
10011146:	4798      	blx	r3
10011148:	2800      	cmp	r0, #0
1001114a:	d008      	beq.n	1001115e <at_ble_characteristic_value_set+0x22>
1001114c:	6880      	ldr	r0, [r0, #8]
1001114e:	2800      	cmp	r0, #0
10011150:	d005      	beq.n	1001115e <at_ble_characteristic_value_set+0x22>
10011152:	1c21      	adds	r1, r4, #0
10011154:	1c2a      	adds	r2, r5, #0
10011156:	4b06      	ldr	r3, [pc, #24]	; (10011170 <at_ble_characteristic_value_set+0x34>)
10011158:	4798      	blx	r3
1001115a:	2000      	movs	r0, #0
1001115c:	e004      	b.n	10011168 <at_ble_characteristic_value_set+0x2c>
1001115e:	1c30      	adds	r0, r6, #0
10011160:	1c29      	adds	r1, r5, #0
10011162:	1c22      	adds	r2, r4, #0
10011164:	4b03      	ldr	r3, [pc, #12]	; (10011174 <at_ble_characteristic_value_set+0x38>)
10011166:	4798      	blx	r3
10011168:	bd70      	pop	{r4, r5, r6, pc}
1001116a:	46c0      	nop			; (mov r8, r8)
1001116c:	10010a49 	.word	0x10010a49
10011170:	1001517f 	.word	0x1001517f
10011174:	10012f11 	.word	0x10012f11

10011178 <at_ble_characteristic_value_get>:
10011178:	b570      	push	{r4, r5, r6, lr}
1001117a:	4b0c      	ldr	r3, [pc, #48]	; (100111ac <at_ble_characteristic_value_get+0x34>)
1001117c:	1c06      	adds	r6, r0, #0
1001117e:	1c0c      	adds	r4, r1, #0
10011180:	1c15      	adds	r5, r2, #0
10011182:	4798      	blx	r3
10011184:	2800      	cmp	r0, #0
10011186:	d00b      	beq.n	100111a0 <at_ble_characteristic_value_get+0x28>
10011188:	6883      	ldr	r3, [r0, #8]
1001118a:	2b00      	cmp	r3, #0
1001118c:	d008      	beq.n	100111a0 <at_ble_characteristic_value_get+0x28>
1001118e:	8883      	ldrh	r3, [r0, #4]
10011190:	802b      	strh	r3, [r5, #0]
10011192:	8882      	ldrh	r2, [r0, #4]
10011194:	6881      	ldr	r1, [r0, #8]
10011196:	4b06      	ldr	r3, [pc, #24]	; (100111b0 <at_ble_characteristic_value_get+0x38>)
10011198:	1c20      	adds	r0, r4, #0
1001119a:	4798      	blx	r3
1001119c:	2000      	movs	r0, #0
1001119e:	e004      	b.n	100111aa <at_ble_characteristic_value_get+0x32>
100111a0:	1c30      	adds	r0, r6, #0
100111a2:	1c29      	adds	r1, r5, #0
100111a4:	1c22      	adds	r2, r4, #0
100111a6:	4b03      	ldr	r3, [pc, #12]	; (100111b4 <at_ble_characteristic_value_get+0x3c>)
100111a8:	4798      	blx	r3
100111aa:	bd70      	pop	{r4, r5, r6, pc}
100111ac:	10010a49 	.word	0x10010a49
100111b0:	1001517f 	.word	0x1001517f
100111b4:	10012f9d 	.word	0x10012f9d

100111b8 <at_ble_write_authorize_reply>:
100111b8:	b5f0      	push	{r4, r5, r6, r7, lr}
100111ba:	b085      	sub	sp, #20
100111bc:	1c04      	adds	r4, r0, #0
100111be:	9101      	str	r1, [sp, #4]
100111c0:	2900      	cmp	r1, #0
100111c2:	d128      	bne.n	10011216 <at_ble_write_authorize_reply+0x5e>
100111c4:	8843      	ldrh	r3, [r0, #2]
100111c6:	1c27      	adds	r7, r4, #0
100111c8:	9300      	str	r3, [sp, #0]
100111ca:	1c18      	adds	r0, r3, #0
100111cc:	4b16      	ldr	r3, [pc, #88]	; (10011228 <at_ble_write_authorize_reply+0x70>)
100111ce:	4798      	blx	r3
100111d0:	3708      	adds	r7, #8
100111d2:	2800      	cmp	r0, #0
100111d4:	d009      	beq.n	100111ea <at_ble_write_authorize_reply+0x32>
100111d6:	6880      	ldr	r0, [r0, #8]
100111d8:	2800      	cmp	r0, #0
100111da:	d006      	beq.n	100111ea <at_ble_write_authorize_reply+0x32>
100111dc:	88a3      	ldrh	r3, [r4, #4]
100111de:	88e2      	ldrh	r2, [r4, #6]
100111e0:	18c0      	adds	r0, r0, r3
100111e2:	1c39      	adds	r1, r7, #0
100111e4:	4b11      	ldr	r3, [pc, #68]	; (1001122c <at_ble_write_authorize_reply+0x74>)
100111e6:	4798      	blx	r3
100111e8:	e015      	b.n	10011216 <at_ble_write_authorize_reply+0x5e>
100111ea:	ab02      	add	r3, sp, #8
100111ec:	1d9e      	adds	r6, r3, #6
100111ee:	2300      	movs	r3, #0
100111f0:	4d0f      	ldr	r5, [pc, #60]	; (10011230 <at_ble_write_authorize_reply+0x78>)
100111f2:	8033      	strh	r3, [r6, #0]
100111f4:	6829      	ldr	r1, [r5, #0]
100111f6:	1c32      	adds	r2, r6, #0
100111f8:	4b0e      	ldr	r3, [pc, #56]	; (10011234 <at_ble_write_authorize_reply+0x7c>)
100111fa:	9800      	ldr	r0, [sp, #0]
100111fc:	4798      	blx	r3
100111fe:	682b      	ldr	r3, [r5, #0]
10011200:	88a0      	ldrh	r0, [r4, #4]
10011202:	88e2      	ldrh	r2, [r4, #6]
10011204:	1818      	adds	r0, r3, r0
10011206:	1c39      	adds	r1, r7, #0
10011208:	4b08      	ldr	r3, [pc, #32]	; (1001122c <at_ble_write_authorize_reply+0x74>)
1001120a:	4798      	blx	r3
1001120c:	8860      	ldrh	r0, [r4, #2]
1001120e:	8832      	ldrh	r2, [r6, #0]
10011210:	6829      	ldr	r1, [r5, #0]
10011212:	4b09      	ldr	r3, [pc, #36]	; (10011238 <at_ble_write_authorize_reply+0x80>)
10011214:	4798      	blx	r3
10011216:	8860      	ldrh	r0, [r4, #2]
10011218:	8821      	ldrh	r1, [r4, #0]
1001121a:	9a01      	ldr	r2, [sp, #4]
1001121c:	4b07      	ldr	r3, [pc, #28]	; (1001123c <at_ble_write_authorize_reply+0x84>)
1001121e:	4798      	blx	r3
10011220:	2000      	movs	r0, #0
10011222:	b005      	add	sp, #20
10011224:	bdf0      	pop	{r4, r5, r6, r7, pc}
10011226:	46c0      	nop			; (mov r8, r8)
10011228:	10010a49 	.word	0x10010a49
1001122c:	1001517f 	.word	0x1001517f
10011230:	10018424 	.word	0x10018424
10011234:	10011179 	.word	0x10011179
10011238:	1001113d 	.word	0x1001113d
1001123c:	10012a15 	.word	0x10012a15

10011240 <gatts_handle_read_req>:
10011240:	b538      	push	{r3, r4, r5, lr}
10011242:	1c0c      	adds	r4, r1, #0
10011244:	4b07      	ldr	r3, [pc, #28]	; (10011264 <gatts_handle_read_req+0x24>)
10011246:	4798      	blx	r3
10011248:	8865      	ldrh	r5, [r4, #2]
1001124a:	4b07      	ldr	r3, [pc, #28]	; (10011268 <gatts_handle_read_req+0x28>)
1001124c:	1c28      	adds	r0, r5, #0
1001124e:	4798      	blx	r3
10011250:	7883      	ldrb	r3, [r0, #2]
10011252:	2026      	movs	r0, #38	; 0x26
10011254:	07db      	lsls	r3, r3, #31
10011256:	d404      	bmi.n	10011262 <gatts_handle_read_req+0x22>
10011258:	8820      	ldrh	r0, [r4, #0]
1001125a:	1c29      	adds	r1, r5, #0
1001125c:	4b03      	ldr	r3, [pc, #12]	; (1001126c <gatts_handle_read_req+0x2c>)
1001125e:	4798      	blx	r3
10011260:	203b      	movs	r0, #59	; 0x3b
10011262:	bd38      	pop	{r3, r4, r5, pc}
10011264:	10012959 	.word	0x10012959
10011268:	10010a49 	.word	0x10010a49
1001126c:	10010cb1 	.word	0x10010cb1

10011270 <gatts_handle_att_info_req>:
10011270:	b538      	push	{r3, r4, r5, lr}
10011272:	1c0d      	adds	r5, r1, #0
10011274:	4b0a      	ldr	r3, [pc, #40]	; (100112a0 <gatts_handle_att_info_req+0x30>)
10011276:	1c14      	adds	r4, r2, #0
10011278:	4798      	blx	r3
1001127a:	882d      	ldrh	r5, [r5, #0]
1001127c:	4b09      	ldr	r3, [pc, #36]	; (100112a4 <gatts_handle_att_info_req+0x34>)
1001127e:	1c28      	adds	r0, r5, #0
10011280:	4798      	blx	r3
10011282:	0a22      	lsrs	r2, r4, #8
10011284:	1c03      	adds	r3, r0, #0
10011286:	4c08      	ldr	r4, [pc, #32]	; (100112a8 <gatts_handle_att_info_req+0x38>)
10011288:	b291      	uxth	r1, r2
1001128a:	2800      	cmp	r0, #0
1001128c:	d003      	beq.n	10011296 <gatts_handle_att_info_req+0x26>
1001128e:	8882      	ldrh	r2, [r0, #4]
10011290:	2300      	movs	r3, #0
10011292:	1c28      	adds	r0, r5, #0
10011294:	e001      	b.n	1001129a <gatts_handle_att_info_req+0x2a>
10011296:	1c28      	adds	r0, r5, #0
10011298:	2201      	movs	r2, #1
1001129a:	47a0      	blx	r4
1001129c:	203b      	movs	r0, #59	; 0x3b
1001129e:	bd38      	pop	{r3, r4, r5, pc}
100112a0:	1001299d 	.word	0x1001299d
100112a4:	10010a49 	.word	0x10010a49
100112a8:	10012a59 	.word	0x10012a59

100112ac <gatts_handle_write_req>:
100112ac:	b510      	push	{r4, lr}
100112ae:	1c14      	adds	r4, r2, #0
100112b0:	4b07      	ldr	r3, [pc, #28]	; (100112d0 <gatts_handle_write_req+0x24>)
100112b2:	4798      	blx	r3
100112b4:	4b07      	ldr	r3, [pc, #28]	; (100112d4 <gatts_handle_write_req+0x28>)
100112b6:	8860      	ldrh	r0, [r4, #2]
100112b8:	4798      	blx	r3
100112ba:	2302      	movs	r3, #2
100112bc:	7881      	ldrb	r1, [r0, #2]
100112be:	2022      	movs	r0, #34	; 0x22
100112c0:	4019      	ands	r1, r3
100112c2:	d103      	bne.n	100112cc <gatts_handle_write_req+0x20>
100112c4:	1c20      	adds	r0, r4, #0
100112c6:	4b04      	ldr	r3, [pc, #16]	; (100112d8 <gatts_handle_write_req+0x2c>)
100112c8:	4798      	blx	r3
100112ca:	201f      	movs	r0, #31
100112cc:	bd10      	pop	{r4, pc}
100112ce:	46c0      	nop			; (mov r8, r8)
100112d0:	10012965 	.word	0x10012965
100112d4:	10010a49 	.word	0x10010a49
100112d8:	100111b9 	.word	0x100111b9

100112dc <at_ble_notification_send>:
100112dc:	b5f0      	push	{r4, r5, r6, r7, lr}
100112de:	4d17      	ldr	r5, [pc, #92]	; (1001133c <at_ble_notification_send+0x60>)
100112e0:	4c17      	ldr	r4, [pc, #92]	; (10011340 <at_ble_notification_send+0x64>)
100112e2:	682a      	ldr	r2, [r5, #0]
100112e4:	44a5      	add	sp, r4
100112e6:	23d2      	movs	r3, #210	; 0xd2
100112e8:	2a04      	cmp	r2, #4
100112ea:	d822      	bhi.n	10011332 <at_ble_notification_send+0x56>
100112ec:	1c06      	adds	r6, r0, #0
100112ee:	4b15      	ldr	r3, [pc, #84]	; (10011344 <at_ble_notification_send+0x68>)
100112f0:	1c08      	adds	r0, r1, #0
100112f2:	1c0c      	adds	r4, r1, #0
100112f4:	4798      	blx	r3
100112f6:	2800      	cmp	r0, #0
100112f8:	d008      	beq.n	1001130c <at_ble_notification_send+0x30>
100112fa:	6883      	ldr	r3, [r0, #8]
100112fc:	2b00      	cmp	r3, #0
100112fe:	d005      	beq.n	1001130c <at_ble_notification_send+0x30>
10011300:	8882      	ldrh	r2, [r0, #4]
10011302:	1c21      	adds	r1, r4, #0
10011304:	9200      	str	r2, [sp, #0]
10011306:	2012      	movs	r0, #18
10011308:	1c32      	adds	r2, r6, #0
1001130a:	e00c      	b.n	10011326 <at_ble_notification_send+0x4a>
1001130c:	270e      	movs	r7, #14
1001130e:	446f      	add	r7, sp
10011310:	1c39      	adds	r1, r7, #0
10011312:	aa04      	add	r2, sp, #16
10011314:	4b0c      	ldr	r3, [pc, #48]	; (10011348 <at_ble_notification_send+0x6c>)
10011316:	1c20      	adds	r0, r4, #0
10011318:	4798      	blx	r3
1001131a:	2012      	movs	r0, #18
1001131c:	1c21      	adds	r1, r4, #0
1001131e:	1c32      	adds	r2, r6, #0
10011320:	883b      	ldrh	r3, [r7, #0]
10011322:	9300      	str	r3, [sp, #0]
10011324:	ab04      	add	r3, sp, #16
10011326:	4c09      	ldr	r4, [pc, #36]	; (1001134c <at_ble_notification_send+0x70>)
10011328:	47a0      	blx	r4
1001132a:	682b      	ldr	r3, [r5, #0]
1001132c:	3301      	adds	r3, #1
1001132e:	602b      	str	r3, [r5, #0]
10011330:	2300      	movs	r3, #0
10011332:	1c18      	adds	r0, r3, #0
10011334:	2385      	movs	r3, #133	; 0x85
10011336:	009b      	lsls	r3, r3, #2
10011338:	449d      	add	sp, r3
1001133a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001133c:	10019f54 	.word	0x10019f54
10011340:	fffffdec 	.word	0xfffffdec
10011344:	10010a49 	.word	0x10010a49
10011348:	10012f9d 	.word	0x10012f9d
1001134c:	10012aa1 	.word	0x10012aa1

10011350 <init_l2cc_task_module>:
10011350:	220a      	movs	r2, #10
10011352:	4b01      	ldr	r3, [pc, #4]	; (10011358 <init_l2cc_task_module+0x8>)
10011354:	701a      	strb	r2, [r3, #0]
10011356:	4770      	bx	lr
10011358:	10018420 	.word	0x10018420

1001135c <l2cc_data_send_rsp_handler>:
1001135c:	b510      	push	{r4, lr}
1001135e:	7802      	ldrb	r2, [r0, #0]
10011360:	700a      	strb	r2, [r1, #0]
10011362:	7883      	ldrb	r3, [r0, #2]
10011364:	7844      	ldrb	r4, [r0, #1]
10011366:	021b      	lsls	r3, r3, #8
10011368:	4323      	orrs	r3, r4
1001136a:	804b      	strh	r3, [r1, #2]
1001136c:	7903      	ldrb	r3, [r0, #4]
1001136e:	78c0      	ldrb	r0, [r0, #3]
10011370:	021b      	lsls	r3, r3, #8
10011372:	4303      	orrs	r3, r0
10011374:	808b      	strh	r3, [r1, #4]
10011376:	2a00      	cmp	r2, #0
10011378:	d103      	bne.n	10011382 <l2cc_data_send_rsp_handler+0x26>
1001137a:	4a02      	ldr	r2, [pc, #8]	; (10011384 <l2cc_data_send_rsp_handler+0x28>)
1001137c:	7813      	ldrb	r3, [r2, #0]
1001137e:	3301      	adds	r3, #1
10011380:	7013      	strb	r3, [r2, #0]
10011382:	bd10      	pop	{r4, pc}
10011384:	10018420 	.word	0x10018420

10011388 <l2cc_data_received_handler>:
10011388:	b508      	push	{r3, lr}
1001138a:	1c03      	adds	r3, r0, #0
1001138c:	7842      	ldrb	r2, [r0, #1]
1001138e:	7800      	ldrb	r0, [r0, #0]
10011390:	0212      	lsls	r2, r2, #8
10011392:	4302      	orrs	r2, r0
10011394:	800a      	strh	r2, [r1, #0]
10011396:	78da      	ldrb	r2, [r3, #3]
10011398:	7898      	ldrb	r0, [r3, #2]
1001139a:	0212      	lsls	r2, r2, #8
1001139c:	4302      	orrs	r2, r0
1001139e:	804a      	strh	r2, [r1, #2]
100113a0:	795a      	ldrb	r2, [r3, #5]
100113a2:	7918      	ldrb	r0, [r3, #4]
100113a4:	0212      	lsls	r2, r2, #8
100113a6:	4302      	orrs	r2, r0
100113a8:	808a      	strh	r2, [r1, #4]
100113aa:	1d88      	adds	r0, r1, #6
100113ac:	1d99      	adds	r1, r3, #6
100113ae:	4b01      	ldr	r3, [pc, #4]	; (100113b4 <l2cc_data_received_handler+0x2c>)
100113b0:	4798      	blx	r3
100113b2:	bd08      	pop	{r3, pc}
100113b4:	1001517f 	.word	0x1001517f

100113b8 <at_ble_authenticate>:
100113b8:	b5f0      	push	{r4, r5, r6, r7, lr}
100113ba:	1c0c      	adds	r4, r1, #0
100113bc:	211f      	movs	r1, #31
100113be:	b08b      	sub	sp, #44	; 0x2c
100113c0:	9307      	str	r3, [sp, #28]
100113c2:	ab02      	add	r3, sp, #8
100113c4:	18c9      	adds	r1, r1, r3
100113c6:	230f      	movs	r3, #15
100113c8:	700b      	strb	r3, [r1, #0]
100113ca:	4b40      	ldr	r3, [pc, #256]	; (100114cc <at_ble_authenticate+0x114>)
100113cc:	1c05      	adds	r5, r0, #0
100113ce:	1c16      	adds	r6, r2, #0
100113d0:	4798      	blx	r3
100113d2:	1c07      	adds	r7, r0, #0
100113d4:	2001      	movs	r0, #1
100113d6:	2f07      	cmp	r7, #7
100113d8:	d875      	bhi.n	100114c6 <at_ble_authenticate+0x10e>
100113da:	2c00      	cmp	r4, #0
100113dc:	d113      	bne.n	10011406 <at_ble_authenticate+0x4e>
100113de:	2312      	movs	r3, #18
100113e0:	435f      	muls	r7, r3
100113e2:	4b3b      	ldr	r3, [pc, #236]	; (100114d0 <at_ble_authenticate+0x118>)
100113e4:	5cfb      	ldrb	r3, [r7, r3]
100113e6:	4283      	cmp	r3, r0
100113e8:	d001      	beq.n	100113ee <at_ble_authenticate+0x36>
100113ea:	20cf      	movs	r0, #207	; 0xcf
100113ec:	e06b      	b.n	100114c6 <at_ble_authenticate+0x10e>
100113ee:	9504      	str	r5, [sp, #16]
100113f0:	9400      	str	r4, [sp, #0]
100113f2:	9401      	str	r4, [sp, #4]
100113f4:	9402      	str	r4, [sp, #8]
100113f6:	9403      	str	r4, [sp, #12]
100113f8:	1c20      	adds	r0, r4, #0
100113fa:	1c21      	adds	r1, r4, #0
100113fc:	1c22      	adds	r2, r4, #0
100113fe:	1c23      	adds	r3, r4, #0
10011400:	4d34      	ldr	r5, [pc, #208]	; (100114d4 <at_ble_authenticate+0x11c>)
10011402:	47a8      	blx	r5
10011404:	e05e      	b.n	100114c4 <at_ble_authenticate+0x10c>
10011406:	7922      	ldrb	r2, [r4, #4]
10011408:	2a06      	cmp	r2, #6
1001140a:	d9ee      	bls.n	100113ea <at_ble_authenticate+0x32>
1001140c:	7963      	ldrb	r3, [r4, #5]
1001140e:	2b10      	cmp	r3, #16
10011410:	d8eb      	bhi.n	100113ea <at_ble_authenticate+0x32>
10011412:	429a      	cmp	r2, r3
10011414:	d8e9      	bhi.n	100113ea <at_ble_authenticate+0x32>
10011416:	7a23      	ldrb	r3, [r4, #8]
10011418:	2b04      	cmp	r3, #4
1001141a:	d8e6      	bhi.n	100113ea <at_ble_authenticate+0x32>
1001141c:	79a3      	ldrb	r3, [r4, #6]
1001141e:	2b07      	cmp	r3, #7
10011420:	d8e3      	bhi.n	100113ea <at_ble_authenticate+0x32>
10011422:	79e3      	ldrb	r3, [r4, #7]
10011424:	2b07      	cmp	r3, #7
10011426:	d8e0      	bhi.n	100113ea <at_ble_authenticate+0x32>
10011428:	78a3      	ldrb	r3, [r4, #2]
1001142a:	2b00      	cmp	r3, #0
1001142c:	d006      	beq.n	1001143c <at_ble_authenticate+0x84>
1001142e:	2e00      	cmp	r6, #0
10011430:	d0db      	beq.n	100113ea <at_ble_authenticate+0x32>
10011432:	4829      	ldr	r0, [pc, #164]	; (100114d8 <at_ble_authenticate+0x120>)
10011434:	1c31      	adds	r1, r6, #0
10011436:	221c      	movs	r2, #28
10011438:	4b28      	ldr	r3, [pc, #160]	; (100114dc <at_ble_authenticate+0x124>)
1001143a:	4798      	blx	r3
1001143c:	9b07      	ldr	r3, [sp, #28]
1001143e:	2b00      	cmp	r3, #0
10011440:	d005      	beq.n	1001144e <at_ble_authenticate+0x96>
10011442:	4827      	ldr	r0, [pc, #156]	; (100114e0 <at_ble_authenticate+0x128>)
10011444:	1c19      	adds	r1, r3, #0
10011446:	309a      	adds	r0, #154	; 0x9a
10011448:	2210      	movs	r2, #16
1001144a:	4b24      	ldr	r3, [pc, #144]	; (100114dc <at_ble_authenticate+0x124>)
1001144c:	4798      	blx	r3
1001144e:	7863      	ldrb	r3, [r4, #1]
10011450:	78a2      	ldrb	r2, [r4, #2]
10011452:	009b      	lsls	r3, r3, #2
10011454:	4313      	orrs	r3, r2
10011456:	2212      	movs	r2, #18
10011458:	4357      	muls	r7, r2
1001145a:	4a1d      	ldr	r2, [pc, #116]	; (100114d0 <at_ble_authenticate+0x118>)
1001145c:	b2db      	uxtb	r3, r3
1001145e:	5cba      	ldrb	r2, [r7, r2]
10011460:	2a00      	cmp	r2, #0
10011462:	d116      	bne.n	10011492 <at_ble_authenticate+0xda>
10011464:	79a0      	ldrb	r0, [r4, #6]
10011466:	0742      	lsls	r2, r0, #29
10011468:	d502      	bpl.n	10011470 <at_ble_authenticate+0xb8>
1001146a:	9a07      	ldr	r2, [sp, #28]
1001146c:	2a00      	cmp	r2, #0
1001146e:	d0bc      	beq.n	100113ea <at_ble_authenticate+0x32>
10011470:	07c2      	lsls	r2, r0, #31
10011472:	d501      	bpl.n	10011478 <at_ble_authenticate+0xc0>
10011474:	2e00      	cmp	r6, #0
10011476:	d0b8      	beq.n	100113ea <at_ble_authenticate+0x32>
10011478:	7966      	ldrb	r6, [r4, #5]
1001147a:	7821      	ldrb	r1, [r4, #0]
1001147c:	78e2      	ldrb	r2, [r4, #3]
1001147e:	9600      	str	r6, [sp, #0]
10011480:	9001      	str	r0, [sp, #4]
10011482:	79e0      	ldrb	r0, [r4, #7]
10011484:	9002      	str	r0, [sp, #8]
10011486:	7a20      	ldrb	r0, [r4, #8]
10011488:	4c16      	ldr	r4, [pc, #88]	; (100114e4 <at_ble_authenticate+0x12c>)
1001148a:	9003      	str	r0, [sp, #12]
1001148c:	1c28      	adds	r0, r5, #0
1001148e:	47a0      	blx	r4
10011490:	e018      	b.n	100114c4 <at_ble_authenticate+0x10c>
10011492:	2a01      	cmp	r2, #1
10011494:	d1a9      	bne.n	100113ea <at_ble_authenticate+0x32>
10011496:	79e0      	ldrb	r0, [r4, #7]
10011498:	0742      	lsls	r2, r0, #29
1001149a:	d502      	bpl.n	100114a2 <at_ble_authenticate+0xea>
1001149c:	9a07      	ldr	r2, [sp, #28]
1001149e:	2a00      	cmp	r2, #0
100114a0:	d0a3      	beq.n	100113ea <at_ble_authenticate+0x32>
100114a2:	07c2      	lsls	r2, r0, #31
100114a4:	d501      	bpl.n	100114aa <at_ble_authenticate+0xf2>
100114a6:	2e00      	cmp	r6, #0
100114a8:	d09f      	beq.n	100113ea <at_ble_authenticate+0x32>
100114aa:	7966      	ldrb	r6, [r4, #5]
100114ac:	7821      	ldrb	r1, [r4, #0]
100114ae:	78e2      	ldrb	r2, [r4, #3]
100114b0:	9600      	str	r6, [sp, #0]
100114b2:	79a6      	ldrb	r6, [r4, #6]
100114b4:	9002      	str	r0, [sp, #8]
100114b6:	9601      	str	r6, [sp, #4]
100114b8:	7a20      	ldrb	r0, [r4, #8]
100114ba:	9504      	str	r5, [sp, #16]
100114bc:	9003      	str	r0, [sp, #12]
100114be:	4c05      	ldr	r4, [pc, #20]	; (100114d4 <at_ble_authenticate+0x11c>)
100114c0:	2001      	movs	r0, #1
100114c2:	47a0      	blx	r4
100114c4:	2000      	movs	r0, #0
100114c6:	b00b      	add	sp, #44	; 0x2c
100114c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
100114ca:	46c0      	nop			; (mov r8, r8)
100114cc:	100118b9 	.word	0x100118b9
100114d0:	1001adbe 	.word	0x1001adbe
100114d4:	10011e29 	.word	0x10011e29
100114d8:	1001aecc 	.word	0x1001aecc
100114dc:	1001517f 	.word	0x1001517f
100114e0:	1001ae4e 	.word	0x1001ae4e
100114e4:	10011c09 	.word	0x10011c09

100114e8 <at_ble_pair_key_reply>:
100114e8:	b5f0      	push	{r4, r5, r6, r7, lr}
100114ea:	b085      	sub	sp, #20
100114ec:	1c05      	adds	r5, r0, #0
100114ee:	1c0c      	adds	r4, r1, #0
100114f0:	1c16      	adds	r6, r2, #0
100114f2:	2100      	movs	r1, #0
100114f4:	4668      	mov	r0, sp
100114f6:	2210      	movs	r2, #16
100114f8:	4b18      	ldr	r3, [pc, #96]	; (1001155c <at_ble_pair_key_reply+0x74>)
100114fa:	4798      	blx	r3
100114fc:	2101      	movs	r1, #1
100114fe:	2e00      	cmp	r6, #0
10011500:	d101      	bne.n	10011506 <at_ble_pair_key_reply+0x1e>
10011502:	1c31      	adds	r1, r6, #0
10011504:	466e      	mov	r6, sp
10011506:	2c00      	cmp	r4, #0
10011508:	d116      	bne.n	10011538 <at_ble_pair_key_reply+0x50>
1001150a:	2701      	movs	r7, #1
1001150c:	1c23      	adds	r3, r4, #0
1001150e:	1d70      	adds	r0, r6, #5
10011510:	3e01      	subs	r6, #1
10011512:	7802      	ldrb	r2, [r0, #0]
10011514:	3801      	subs	r0, #1
10011516:	3a30      	subs	r2, #48	; 0x30
10011518:	437a      	muls	r2, r7
1001151a:	189b      	adds	r3, r3, r2
1001151c:	220a      	movs	r2, #10
1001151e:	4357      	muls	r7, r2
10011520:	42b0      	cmp	r0, r6
10011522:	d1f6      	bne.n	10011512 <at_ble_pair_key_reply+0x2a>
10011524:	466a      	mov	r2, sp
10011526:	4668      	mov	r0, sp
10011528:	7013      	strb	r3, [r2, #0]
1001152a:	0a1a      	lsrs	r2, r3, #8
1001152c:	7042      	strb	r2, [r0, #1]
1001152e:	0c1a      	lsrs	r2, r3, #16
10011530:	0e1b      	lsrs	r3, r3, #24
10011532:	7082      	strb	r2, [r0, #2]
10011534:	70c3      	strb	r3, [r0, #3]
10011536:	e009      	b.n	1001154c <at_ble_pair_key_reply+0x64>
10011538:	20cf      	movs	r0, #207	; 0xcf
1001153a:	2c01      	cmp	r4, #1
1001153c:	d10c      	bne.n	10011558 <at_ble_pair_key_reply+0x70>
1001153e:	2300      	movs	r3, #0
10011540:	4668      	mov	r0, sp
10011542:	5cf2      	ldrb	r2, [r6, r3]
10011544:	54c2      	strb	r2, [r0, r3]
10011546:	3301      	adds	r3, #1
10011548:	2b10      	cmp	r3, #16
1001154a:	d1f9      	bne.n	10011540 <at_ble_pair_key_reply+0x58>
1001154c:	2004      	movs	r0, #4
1001154e:	466a      	mov	r2, sp
10011550:	1c2b      	adds	r3, r5, #0
10011552:	4c03      	ldr	r4, [pc, #12]	; (10011560 <at_ble_pair_key_reply+0x78>)
10011554:	47a0      	blx	r4
10011556:	2000      	movs	r0, #0
10011558:	b005      	add	sp, #20
1001155a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001155c:	10015191 	.word	0x10015191
10011560:	10011ea5 	.word	0x10011ea5

10011564 <at_ble_send_slave_sec_request>:
10011564:	b570      	push	{r4, r5, r6, lr}
10011566:	4b0c      	ldr	r3, [pc, #48]	; (10011598 <at_ble_send_slave_sec_request+0x34>)
10011568:	1c0e      	adds	r6, r1, #0
1001156a:	2100      	movs	r1, #0
1001156c:	1c05      	adds	r5, r0, #0
1001156e:	1c14      	adds	r4, r2, #0
10011570:	4798      	blx	r3
10011572:	2301      	movs	r3, #1
10011574:	2807      	cmp	r0, #7
10011576:	d80d      	bhi.n	10011594 <at_ble_send_slave_sec_request+0x30>
10011578:	3311      	adds	r3, #17
1001157a:	4358      	muls	r0, r3
1001157c:	4b07      	ldr	r3, [pc, #28]	; (1001159c <at_ble_send_slave_sec_request+0x38>)
1001157e:	5cc2      	ldrb	r2, [r0, r3]
10011580:	23e0      	movs	r3, #224	; 0xe0
10011582:	2a01      	cmp	r2, #1
10011584:	d106      	bne.n	10011594 <at_ble_send_slave_sec_request+0x30>
10011586:	00b1      	lsls	r1, r6, #2
10011588:	430c      	orrs	r4, r1
1001158a:	4b05      	ldr	r3, [pc, #20]	; (100115a0 <at_ble_send_slave_sec_request+0x3c>)
1001158c:	b2e1      	uxtb	r1, r4
1001158e:	1c28      	adds	r0, r5, #0
10011590:	4798      	blx	r3
10011592:	2300      	movs	r3, #0
10011594:	1c18      	adds	r0, r3, #0
10011596:	bd70      	pop	{r4, r5, r6, pc}
10011598:	100118b9 	.word	0x100118b9
1001159c:	1001adbe 	.word	0x1001adbe
100115a0:	10011ef5 	.word	0x10011ef5

100115a4 <at_ble_encryption_start>:
100115a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
100115a6:	23cf      	movs	r3, #207	; 0xcf
100115a8:	2900      	cmp	r1, #0
100115aa:	d02b      	beq.n	10011604 <at_ble_encryption_start+0x60>
100115ac:	2a05      	cmp	r2, #5
100115ae:	d829      	bhi.n	10011604 <at_ble_encryption_start+0x60>
100115b0:	2701      	movs	r7, #1
100115b2:	1c3d      	adds	r5, r7, #0
100115b4:	2433      	movs	r4, #51	; 0x33
100115b6:	4095      	lsls	r5, r2
100115b8:	4225      	tst	r5, r4
100115ba:	d023      	beq.n	10011604 <at_ble_encryption_start+0x60>
100115bc:	7e8c      	ldrb	r4, [r1, #26]
100115be:	3c07      	subs	r4, #7
100115c0:	2c09      	cmp	r4, #9
100115c2:	d81f      	bhi.n	10011604 <at_ble_encryption_start+0x60>
100115c4:	4b10      	ldr	r3, [pc, #64]	; (10011608 <at_ble_encryption_start+0x64>)
100115c6:	1c0c      	adds	r4, r1, #0
100115c8:	2100      	movs	r1, #0
100115ca:	1c15      	adds	r5, r2, #0
100115cc:	1c06      	adds	r6, r0, #0
100115ce:	4798      	blx	r3
100115d0:	1c3b      	adds	r3, r7, #0
100115d2:	2807      	cmp	r0, #7
100115d4:	d816      	bhi.n	10011604 <at_ble_encryption_start+0x60>
100115d6:	2312      	movs	r3, #18
100115d8:	4358      	muls	r0, r3
100115da:	4b0c      	ldr	r3, [pc, #48]	; (1001160c <at_ble_encryption_start+0x68>)
100115dc:	5cc7      	ldrb	r7, [r0, r3]
100115de:	23e0      	movs	r3, #224	; 0xe0
100115e0:	2f00      	cmp	r7, #0
100115e2:	d10f      	bne.n	10011604 <at_ble_encryption_start+0x60>
100115e4:	1c21      	adds	r1, r4, #0
100115e6:	221c      	movs	r2, #28
100115e8:	4b09      	ldr	r3, [pc, #36]	; (10011610 <at_ble_encryption_start+0x6c>)
100115ea:	480a      	ldr	r0, [pc, #40]	; (10011614 <at_ble_encryption_start+0x70>)
100115ec:	4798      	blx	r3
100115ee:	1c23      	adds	r3, r4, #0
100115f0:	7ea1      	ldrb	r1, [r4, #26]
100115f2:	8a22      	ldrh	r2, [r4, #16]
100115f4:	3312      	adds	r3, #18
100115f6:	9100      	str	r1, [sp, #0]
100115f8:	9501      	str	r5, [sp, #4]
100115fa:	1c21      	adds	r1, r4, #0
100115fc:	1c30      	adds	r0, r6, #0
100115fe:	4c06      	ldr	r4, [pc, #24]	; (10011618 <at_ble_encryption_start+0x74>)
10011600:	47a0      	blx	r4
10011602:	1c3b      	adds	r3, r7, #0
10011604:	1c18      	adds	r0, r3, #0
10011606:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10011608:	100118b9 	.word	0x100118b9
1001160c:	1001adbe 	.word	0x1001adbe
10011610:	1001517f 	.word	0x1001517f
10011614:	1001aecc 	.word	0x1001aecc
10011618:	10011f35 	.word	0x10011f35

1001161c <at_ble_encryption_request_reply>:
1001161c:	b573      	push	{r0, r1, r4, r5, r6, lr}
1001161e:	24cf      	movs	r4, #207	; 0xcf
10011620:	2b00      	cmp	r3, #0
10011622:	d011      	beq.n	10011648 <at_ble_encryption_request_reply+0x2c>
10011624:	2a00      	cmp	r2, #0
10011626:	d00a      	beq.n	1001163e <at_ble_encryption_request_reply+0x22>
10011628:	2905      	cmp	r1, #5
1001162a:	d80d      	bhi.n	10011648 <at_ble_encryption_request_reply+0x2c>
1001162c:	2501      	movs	r5, #1
1001162e:	2633      	movs	r6, #51	; 0x33
10011630:	408d      	lsls	r5, r1
10011632:	4235      	tst	r5, r6
10011634:	d008      	beq.n	10011648 <at_ble_encryption_request_reply+0x2c>
10011636:	7e9d      	ldrb	r5, [r3, #26]
10011638:	3d07      	subs	r5, #7
1001163a:	2d09      	cmp	r5, #9
1001163c:	d804      	bhi.n	10011648 <at_ble_encryption_request_reply+0x2c>
1001163e:	7e9c      	ldrb	r4, [r3, #26]
10011640:	9400      	str	r4, [sp, #0]
10011642:	4c02      	ldr	r4, [pc, #8]	; (1001164c <at_ble_encryption_request_reply+0x30>)
10011644:	47a0      	blx	r4
10011646:	2400      	movs	r4, #0
10011648:	1c20      	adds	r0, r4, #0
1001164a:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
1001164c:	10011ff1 	.word	0x10011ff1

10011650 <rx_callback>:
10011650:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10011652:	8883      	ldrh	r3, [r0, #4]
10011654:	1c01      	adds	r1, r0, #0
10011656:	9301      	str	r3, [sp, #4]
10011658:	88c5      	ldrh	r5, [r0, #6]
1001165a:	8806      	ldrh	r6, [r0, #0]
1001165c:	2d00      	cmp	r5, #0
1001165e:	d10f      	bne.n	10011680 <rx_callback+0x30>
10011660:	1c19      	adds	r1, r3, #0
10011662:	1c30      	adds	r0, r6, #0
10011664:	4b19      	ldr	r3, [pc, #100]	; (100116cc <rx_callback+0x7c>)
10011666:	1c2a      	adds	r2, r5, #0
10011668:	4798      	blx	r3
1001166a:	1e03      	subs	r3, r0, #0
1001166c:	d105      	bne.n	1001167a <rx_callback+0x2a>
1001166e:	1c30      	adds	r0, r6, #0
10011670:	9901      	ldr	r1, [sp, #4]
10011672:	1c1a      	adds	r2, r3, #0
10011674:	4c16      	ldr	r4, [pc, #88]	; (100116d0 <rx_callback+0x80>)
10011676:	47a0      	blx	r4
10011678:	e027      	b.n	100116ca <rx_callback+0x7a>
1001167a:	4b16      	ldr	r3, [pc, #88]	; (100116d4 <rx_callback+0x84>)
1001167c:	4798      	blx	r3
1001167e:	e024      	b.n	100116ca <rx_callback+0x7a>
10011680:	4c15      	ldr	r4, [pc, #84]	; (100116d8 <rx_callback+0x88>)
10011682:	4a16      	ldr	r2, [pc, #88]	; (100116dc <rx_callback+0x8c>)
10011684:	6823      	ldr	r3, [r4, #0]
10011686:	6812      	ldr	r2, [r2, #0]
10011688:	18eb      	adds	r3, r5, r3
1001168a:	4293      	cmp	r3, r2
1001168c:	d901      	bls.n	10011692 <rx_callback+0x42>
1001168e:	2300      	movs	r3, #0
10011690:	6023      	str	r3, [r4, #0]
10011692:	4f13      	ldr	r7, [pc, #76]	; (100116e0 <rx_callback+0x90>)
10011694:	6822      	ldr	r2, [r4, #0]
10011696:	683b      	ldr	r3, [r7, #0]
10011698:	3108      	adds	r1, #8
1001169a:	1898      	adds	r0, r3, r2
1001169c:	1c2a      	adds	r2, r5, #0
1001169e:	4b11      	ldr	r3, [pc, #68]	; (100116e4 <rx_callback+0x94>)
100116a0:	4798      	blx	r3
100116a2:	683b      	ldr	r3, [r7, #0]
100116a4:	6822      	ldr	r2, [r4, #0]
100116a6:	1c30      	adds	r0, r6, #0
100116a8:	189a      	adds	r2, r3, r2
100116aa:	9901      	ldr	r1, [sp, #4]
100116ac:	4b07      	ldr	r3, [pc, #28]	; (100116cc <rx_callback+0x7c>)
100116ae:	4798      	blx	r3
100116b0:	2800      	cmp	r0, #0
100116b2:	d1e2      	bne.n	1001167a <rx_callback+0x2a>
100116b4:	6823      	ldr	r3, [r4, #0]
100116b6:	683a      	ldr	r2, [r7, #0]
100116b8:	1c30      	adds	r0, r6, #0
100116ba:	18d2      	adds	r2, r2, r3
100116bc:	9901      	ldr	r1, [sp, #4]
100116be:	1c2b      	adds	r3, r5, #0
100116c0:	4e03      	ldr	r6, [pc, #12]	; (100116d0 <rx_callback+0x80>)
100116c2:	47b0      	blx	r6
100116c4:	6823      	ldr	r3, [r4, #0]
100116c6:	18ed      	adds	r5, r5, r3
100116c8:	6025      	str	r5, [r4, #0]
100116ca:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
100116cc:	1000fce5 	.word	0x1000fce5
100116d0:	1000fc5d 	.word	0x1000fc5d
100116d4:	1000f679 	.word	0x1000f679
100116d8:	1001af28 	.word	0x1001af28
100116dc:	10019ed0 	.word	0x10019ed0
100116e0:	10019ecc 	.word	0x10019ecc
100116e4:	1001517f 	.word	0x1001517f

100116e8 <interface_send>:
100116e8:	b508      	push	{r3, lr}
100116ea:	4b02      	ldr	r3, [pc, #8]	; (100116f4 <interface_send+0xc>)
100116ec:	4798      	blx	r3
100116ee:	2000      	movs	r0, #0
100116f0:	bd08      	pop	{r3, pc}
100116f2:	46c0      	nop			; (mov r8, r8)
100116f4:	1000f371 	.word	0x1000f371

100116f8 <interface_init>:
100116f8:	2280      	movs	r2, #128	; 0x80
100116fa:	b510      	push	{r4, lr}
100116fc:	2100      	movs	r1, #0
100116fe:	1c04      	adds	r4, r0, #0
10011700:	0092      	lsls	r2, r2, #2
10011702:	4b08      	ldr	r3, [pc, #32]	; (10011724 <interface_init+0x2c>)
10011704:	4808      	ldr	r0, [pc, #32]	; (10011728 <interface_init+0x30>)
10011706:	4798      	blx	r3
10011708:	2200      	movs	r2, #0
1001170a:	4b08      	ldr	r3, [pc, #32]	; (1001172c <interface_init+0x34>)
1001170c:	601a      	str	r2, [r3, #0]
1001170e:	4a08      	ldr	r2, [pc, #32]	; (10011730 <interface_init+0x38>)
10011710:	4b08      	ldr	r3, [pc, #32]	; (10011734 <interface_init+0x3c>)
10011712:	601a      	str	r2, [r3, #0]
10011714:	4b08      	ldr	r3, [pc, #32]	; (10011738 <interface_init+0x40>)
10011716:	6922      	ldr	r2, [r4, #16]
10011718:	601a      	str	r2, [r3, #0]
1001171a:	6962      	ldr	r2, [r4, #20]
1001171c:	4b07      	ldr	r3, [pc, #28]	; (1001173c <interface_init+0x44>)
1001171e:	601a      	str	r2, [r3, #0]
10011720:	bd10      	pop	{r4, pc}
10011722:	46c0      	nop			; (mov r8, r8)
10011724:	10015191 	.word	0x10015191
10011728:	1001b12c 	.word	0x1001b12c
1001172c:	1001af28 	.word	0x1001af28
10011730:	1001af2c 	.word	0x1001af2c
10011734:	10018424 	.word	0x10018424
10011738:	10019ecc 	.word	0x10019ecc
1001173c:	10019ed0 	.word	0x10019ed0

10011740 <platform_cmd_cmpl_signal>:
10011740:	2201      	movs	r2, #1
10011742:	4b01      	ldr	r3, [pc, #4]	; (10011748 <platform_cmd_cmpl_signal+0x8>)
10011744:	601a      	str	r2, [r3, #0]
10011746:	4770      	bx	lr
10011748:	10019ed4 	.word	0x10019ed4

1001174c <platform_cmd_cmpl_wait>:
1001174c:	b510      	push	{r4, lr}
1001174e:	1c04      	adds	r4, r0, #0
10011750:	4b07      	ldr	r3, [pc, #28]	; (10011770 <platform_cmd_cmpl_wait+0x24>)
10011752:	681a      	ldr	r2, [r3, #0]
10011754:	2a01      	cmp	r2, #1
10011756:	d003      	beq.n	10011760 <platform_cmd_cmpl_wait+0x14>
10011758:	4b06      	ldr	r3, [pc, #24]	; (10011774 <platform_cmd_cmpl_wait+0x28>)
1001175a:	2000      	movs	r0, #0
1001175c:	4798      	blx	r3
1001175e:	e7f7      	b.n	10011750 <platform_cmd_cmpl_wait+0x4>
10011760:	6819      	ldr	r1, [r3, #0]
10011762:	2901      	cmp	r1, #1
10011764:	d102      	bne.n	1001176c <platform_cmd_cmpl_wait+0x20>
10011766:	2200      	movs	r2, #0
10011768:	601a      	str	r2, [r3, #0]
1001176a:	e000      	b.n	1001176e <platform_cmd_cmpl_wait+0x22>
1001176c:	7022      	strb	r2, [r4, #0]
1001176e:	bd10      	pop	{r4, pc}
10011770:	10019ed4 	.word	0x10019ed4
10011774:	1000f401 	.word	0x1000f401

10011778 <start_timer>:
10011778:	4770      	bx	lr

1001177a <stop_timer>:
1001177a:	4770      	bx	lr

1001177c <dbg_le_set_bd_addr_req_handler>:
1001177c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1001177e:	466b      	mov	r3, sp
10011780:	1dde      	adds	r6, r3, #7
10011782:	2300      	movs	r3, #0
10011784:	7033      	strb	r3, [r6, #0]
10011786:	230f      	movs	r3, #15
10011788:	4c13      	ldr	r4, [pc, #76]	; (100117d8 <dbg_le_set_bd_addr_req_handler+0x5c>)
1001178a:	2703      	movs	r7, #3
1001178c:	7023      	strb	r3, [r4, #0]
1001178e:	2300      	movs	r3, #0
10011790:	70e3      	strb	r3, [r4, #3]
10011792:	4b12      	ldr	r3, [pc, #72]	; (100117dc <dbg_le_set_bd_addr_req_handler+0x60>)
10011794:	1c01      	adds	r1, r0, #0
10011796:	881a      	ldrh	r2, [r3, #0]
10011798:	881b      	ldrh	r3, [r3, #0]
1001179a:	7122      	strb	r2, [r4, #4]
1001179c:	0a1b      	lsrs	r3, r3, #8
1001179e:	2206      	movs	r2, #6
100117a0:	7163      	strb	r3, [r4, #5]
100117a2:	480f      	ldr	r0, [pc, #60]	; (100117e0 <dbg_le_set_bd_addr_req_handler+0x64>)
100117a4:	4b0f      	ldr	r3, [pc, #60]	; (100117e4 <dbg_le_set_bd_addr_req_handler+0x68>)
100117a6:	7067      	strb	r7, [r4, #1]
100117a8:	70a7      	strb	r7, [r4, #2]
100117aa:	4798      	blx	r3
100117ac:	4d0e      	ldr	r5, [pc, #56]	; (100117e8 <dbg_le_set_bd_addr_req_handler+0x6c>)
100117ae:	4b0f      	ldr	r3, [pc, #60]	; (100117ec <dbg_le_set_bd_addr_req_handler+0x70>)
100117b0:	210e      	movs	r1, #14
100117b2:	802b      	strh	r3, [r5, #0]
100117b4:	2306      	movs	r3, #6
100117b6:	71a3      	strb	r3, [r4, #6]
100117b8:	2300      	movs	r3, #0
100117ba:	1c20      	adds	r0, r4, #0
100117bc:	71e3      	strb	r3, [r4, #7]
100117be:	4b0c      	ldr	r3, [pc, #48]	; (100117f0 <dbg_le_set_bd_addr_req_handler+0x74>)
100117c0:	80af      	strh	r7, [r5, #4]
100117c2:	4798      	blx	r3
100117c4:	1c30      	adds	r0, r6, #0
100117c6:	4b0b      	ldr	r3, [pc, #44]	; (100117f4 <dbg_le_set_bd_addr_req_handler+0x78>)
100117c8:	4798      	blx	r3
100117ca:	7833      	ldrb	r3, [r6, #0]
100117cc:	20e2      	movs	r0, #226	; 0xe2
100117ce:	2b00      	cmp	r3, #0
100117d0:	d101      	bne.n	100117d6 <dbg_le_set_bd_addr_req_handler+0x5a>
100117d2:	68ab      	ldr	r3, [r5, #8]
100117d4:	7818      	ldrb	r0, [r3, #0]
100117d6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
100117d8:	1001b12c 	.word	0x1001b12c
100117dc:	1001adbc 	.word	0x1001adbc
100117e0:	1001b134 	.word	0x1001b134
100117e4:	1001517f 	.word	0x1001517f
100117e8:	1001adb0 	.word	0x1001adb0
100117ec:	00000329 	.word	0x00000329
100117f0:	100116e9 	.word	0x100116e9
100117f4:	1001174d 	.word	0x1001174d

100117f8 <gapc_get_dev_info_cfm.constprop.1>:
100117f8:	b538      	push	{r3, r4, r5, lr}
100117fa:	230b      	movs	r3, #11
100117fc:	4c27      	ldr	r4, [pc, #156]	; (1001189c <gapc_get_dev_info_cfm.constprop.1+0xa4>)
100117fe:	7023      	strb	r3, [r4, #0]
10011800:	3303      	adds	r3, #3
10011802:	7063      	strb	r3, [r4, #1]
10011804:	3329      	adds	r3, #41	; 0x29
10011806:	70a3      	strb	r3, [r4, #2]
10011808:	4b25      	ldr	r3, [pc, #148]	; (100118a0 <gapc_get_dev_info_cfm.constprop.1+0xa8>)
1001180a:	70e1      	strb	r1, [r4, #3]
1001180c:	881a      	ldrh	r2, [r3, #0]
1001180e:	881b      	ldrh	r3, [r3, #0]
10011810:	7122      	strb	r2, [r4, #4]
10011812:	0a1b      	lsrs	r3, r3, #8
10011814:	7163      	strb	r3, [r4, #5]
10011816:	2300      	movs	r3, #0
10011818:	7220      	strb	r0, [r4, #8]
1001181a:	7263      	strb	r3, [r4, #9]
1001181c:	2801      	cmp	r0, #1
1001181e:	d02b      	beq.n	10011878 <gapc_get_dev_info_cfm.constprop.1+0x80>
10011820:	4298      	cmp	r0, r3
10011822:	d01b      	beq.n	1001185c <gapc_get_dev_info_cfm.constprop.1+0x64>
10011824:	2802      	cmp	r0, #2
10011826:	d12f      	bne.n	10011888 <gapc_get_dev_info_cfm.constprop.1+0x90>
10011828:	4b1e      	ldr	r3, [pc, #120]	; (100118a4 <gapc_get_dev_info_cfm.constprop.1+0xac>)
1001182a:	2112      	movs	r1, #18
1001182c:	1c1a      	adds	r2, r3, #0
1001182e:	32ce      	adds	r2, #206	; 0xce
10011830:	8812      	ldrh	r2, [r2, #0]
10011832:	72a2      	strb	r2, [r4, #10]
10011834:	0a12      	lsrs	r2, r2, #8
10011836:	72e2      	strb	r2, [r4, #11]
10011838:	1c1a      	adds	r2, r3, #0
1001183a:	32d0      	adds	r2, #208	; 0xd0
1001183c:	8812      	ldrh	r2, [r2, #0]
1001183e:	7322      	strb	r2, [r4, #12]
10011840:	0a12      	lsrs	r2, r2, #8
10011842:	7362      	strb	r2, [r4, #13]
10011844:	1c1a      	adds	r2, r3, #0
10011846:	32d2      	adds	r2, #210	; 0xd2
10011848:	8812      	ldrh	r2, [r2, #0]
1001184a:	33d4      	adds	r3, #212	; 0xd4
1001184c:	73a2      	strb	r2, [r4, #14]
1001184e:	0a12      	lsrs	r2, r2, #8
10011850:	73e2      	strb	r2, [r4, #15]
10011852:	881b      	ldrh	r3, [r3, #0]
10011854:	7423      	strb	r3, [r4, #16]
10011856:	0a1b      	lsrs	r3, r3, #8
10011858:	7463      	strb	r3, [r4, #17]
1001185a:	e016      	b.n	1001188a <gapc_get_dev_info_cfm.constprop.1+0x92>
1001185c:	4b11      	ldr	r3, [pc, #68]	; (100118a4 <gapc_get_dev_info_cfm.constprop.1+0xac>)
1001185e:	4912      	ldr	r1, [pc, #72]	; (100118a8 <gapc_get_dev_info_cfm.constprop.1+0xb0>)
10011860:	33aa      	adds	r3, #170	; 0xaa
10011862:	881d      	ldrh	r5, [r3, #0]
10011864:	4811      	ldr	r0, [pc, #68]	; (100118ac <gapc_get_dev_info_cfm.constprop.1+0xb4>)
10011866:	0a2b      	lsrs	r3, r5, #8
10011868:	72a5      	strb	r5, [r4, #10]
1001186a:	72e3      	strb	r3, [r4, #11]
1001186c:	1c2a      	adds	r2, r5, #0
1001186e:	4b10      	ldr	r3, [pc, #64]	; (100118b0 <gapc_get_dev_info_cfm.constprop.1+0xb8>)
10011870:	350c      	adds	r5, #12
10011872:	4798      	blx	r3
10011874:	b2a9      	uxth	r1, r5
10011876:	e008      	b.n	1001188a <gapc_get_dev_info_cfm.constprop.1+0x92>
10011878:	4b0a      	ldr	r3, [pc, #40]	; (100118a4 <gapc_get_dev_info_cfm.constprop.1+0xac>)
1001187a:	210c      	movs	r1, #12
1001187c:	33cc      	adds	r3, #204	; 0xcc
1001187e:	881b      	ldrh	r3, [r3, #0]
10011880:	72a3      	strb	r3, [r4, #10]
10011882:	0a1b      	lsrs	r3, r3, #8
10011884:	72e3      	strb	r3, [r4, #11]
10011886:	e000      	b.n	1001188a <gapc_get_dev_info_cfm.constprop.1+0x92>
10011888:	210a      	movs	r1, #10
1001188a:	1c0b      	adds	r3, r1, #0
1001188c:	3b08      	subs	r3, #8
1001188e:	71a3      	strb	r3, [r4, #6]
10011890:	121b      	asrs	r3, r3, #8
10011892:	71e3      	strb	r3, [r4, #7]
10011894:	1c20      	adds	r0, r4, #0
10011896:	4b07      	ldr	r3, [pc, #28]	; (100118b4 <gapc_get_dev_info_cfm.constprop.1+0xbc>)
10011898:	4798      	blx	r3
1001189a:	bd38      	pop	{r3, r4, r5, pc}
1001189c:	1001b12c 	.word	0x1001b12c
100118a0:	1001adbc 	.word	0x1001adbc
100118a4:	1001ae4e 	.word	0x1001ae4e
100118a8:	1001aefa 	.word	0x1001aefa
100118ac:	1001b138 	.word	0x1001b138
100118b0:	1001517f 	.word	0x1001517f
100118b4:	100116e9 	.word	0x100116e9

100118b8 <check_ConnData_idx_role>:
100118b8:	4b0c      	ldr	r3, [pc, #48]	; (100118ec <check_ConnData_idx_role+0x34>)
100118ba:	b570      	push	{r4, r5, r6, lr}
100118bc:	1c04      	adds	r4, r0, #0
100118be:	2008      	movs	r0, #8
100118c0:	429c      	cmp	r4, r3
100118c2:	d011      	beq.n	100118e8 <check_ConnData_idx_role+0x30>
100118c4:	2300      	movs	r3, #0
100118c6:	2212      	movs	r2, #18
100118c8:	435a      	muls	r2, r3
100118ca:	4d09      	ldr	r5, [pc, #36]	; (100118f0 <check_ConnData_idx_role+0x38>)
100118cc:	b2d8      	uxtb	r0, r3
100118ce:	1956      	adds	r6, r2, r5
100118d0:	8976      	ldrh	r6, [r6, #10]
100118d2:	42a6      	cmp	r6, r4
100118d4:	d104      	bne.n	100118e0 <check_ConnData_idx_role+0x28>
100118d6:	2900      	cmp	r1, #0
100118d8:	d006      	beq.n	100118e8 <check_ConnData_idx_role+0x30>
100118da:	5d53      	ldrb	r3, [r2, r5]
100118dc:	700b      	strb	r3, [r1, #0]
100118de:	e003      	b.n	100118e8 <check_ConnData_idx_role+0x30>
100118e0:	3301      	adds	r3, #1
100118e2:	2b08      	cmp	r3, #8
100118e4:	d1ef      	bne.n	100118c6 <check_ConnData_idx_role+0xe>
100118e6:	1c18      	adds	r0, r3, #0
100118e8:	bd70      	pop	{r4, r5, r6, pc}
100118ea:	46c0      	nop			; (mov r8, r8)
100118ec:	0000ffff 	.word	0x0000ffff
100118f0:	1001adbe 	.word	0x1001adbe

100118f4 <check_ConnData_emptyEntry>:
100118f4:	2300      	movs	r3, #0
100118f6:	2212      	movs	r2, #18
100118f8:	435a      	muls	r2, r3
100118fa:	4906      	ldr	r1, [pc, #24]	; (10011914 <check_ConnData_emptyEntry+0x20>)
100118fc:	b2d8      	uxtb	r0, r3
100118fe:	1852      	adds	r2, r2, r1
10011900:	8951      	ldrh	r1, [r2, #10]
10011902:	4a05      	ldr	r2, [pc, #20]	; (10011918 <check_ConnData_emptyEntry+0x24>)
10011904:	4291      	cmp	r1, r2
10011906:	d003      	beq.n	10011910 <check_ConnData_emptyEntry+0x1c>
10011908:	3301      	adds	r3, #1
1001190a:	2b08      	cmp	r3, #8
1001190c:	d1f3      	bne.n	100118f6 <check_ConnData_emptyEntry+0x2>
1001190e:	1c18      	adds	r0, r3, #0
10011910:	4770      	bx	lr
10011912:	46c0      	nop			; (mov r8, r8)
10011914:	1001adbe 	.word	0x1001adbe
10011918:	0000ffff 	.word	0x0000ffff

1001191c <gapc_cmp_evt>:
1001191c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1001191e:	780b      	ldrb	r3, [r1, #0]
10011920:	1c05      	adds	r5, r0, #0
10011922:	1e58      	subs	r0, r3, #1
10011924:	784e      	ldrb	r6, [r1, #1]
10011926:	280f      	cmp	r0, #15
10011928:	d85a      	bhi.n	100119e0 <gapc_cmp_evt+0xc4>
1001192a:	1c14      	adds	r4, r2, #0
1001192c:	f001 fba4 	bl	10013078 <__gnu_thumb1_case_uqi>
10011930:	5858440a 	.word	0x5858440a
10011934:	4b584444 	.word	0x4b584444
10011938:	0825122d 	.word	0x0825122d
1001193c:	3e395858 	.word	0x3e395858
10011940:	203b      	movs	r0, #59	; 0x3b
10011942:	e04e      	b.n	100119e2 <gapc_cmp_evt+0xc6>
10011944:	203b      	movs	r0, #59	; 0x3b
10011946:	2e00      	cmp	r6, #0
10011948:	d04b      	beq.n	100119e2 <gapc_cmp_evt+0xc6>
1001194a:	0a2d      	lsrs	r5, r5, #8
1001194c:	8015      	strh	r5, [r2, #0]
1001194e:	7096      	strb	r6, [r2, #2]
10011950:	3835      	subs	r0, #53	; 0x35
10011952:	e046      	b.n	100119e2 <gapc_cmp_evt+0xc6>
10011954:	466b      	mov	r3, sp
10011956:	1ddf      	adds	r7, r3, #7
10011958:	2301      	movs	r3, #1
1001195a:	0a2d      	lsrs	r5, r5, #8
1001195c:	703b      	strb	r3, [r7, #0]
1001195e:	1c28      	adds	r0, r5, #0
10011960:	1c39      	adds	r1, r7, #0
10011962:	4b20      	ldr	r3, [pc, #128]	; (100119e4 <gapc_cmp_evt+0xc8>)
10011964:	4798      	blx	r3
10011966:	2807      	cmp	r0, #7
10011968:	d803      	bhi.n	10011972 <gapc_cmp_evt+0x56>
1001196a:	783b      	ldrb	r3, [r7, #0]
1001196c:	203b      	movs	r0, #59	; 0x3b
1001196e:	2b00      	cmp	r3, #0
10011970:	d037      	beq.n	100119e2 <gapc_cmp_evt+0xc6>
10011972:	8065      	strh	r5, [r4, #2]
10011974:	7126      	strb	r6, [r4, #4]
10011976:	2009      	movs	r0, #9
10011978:	e033      	b.n	100119e2 <gapc_cmp_evt+0xc6>
1001197a:	203b      	movs	r0, #59	; 0x3b
1001197c:	2e00      	cmp	r6, #0
1001197e:	d030      	beq.n	100119e2 <gapc_cmp_evt+0xc6>
10011980:	0a2d      	lsrs	r5, r5, #8
10011982:	8015      	strh	r5, [r2, #0]
10011984:	7096      	strb	r6, [r2, #2]
10011986:	382d      	subs	r0, #45	; 0x2d
10011988:	e02b      	b.n	100119e2 <gapc_cmp_evt+0xc6>
1001198a:	203b      	movs	r0, #59	; 0x3b
1001198c:	2e00      	cmp	r6, #0
1001198e:	d028      	beq.n	100119e2 <gapc_cmp_evt+0xc6>
10011990:	2300      	movs	r3, #0
10011992:	0a2d      	lsrs	r5, r5, #8
10011994:	8015      	strh	r5, [r2, #0]
10011996:	7096      	strb	r6, [r2, #2]
10011998:	8093      	strh	r3, [r2, #4]
1001199a:	80d3      	strh	r3, [r2, #6]
1001199c:	8113      	strh	r3, [r2, #8]
1001199e:	3834      	subs	r0, #52	; 0x34
100119a0:	e01f      	b.n	100119e2 <gapc_cmp_evt+0xc6>
100119a2:	203b      	movs	r0, #59	; 0x3b
100119a4:	2e00      	cmp	r6, #0
100119a6:	d01c      	beq.n	100119e2 <gapc_cmp_evt+0xc6>
100119a8:	7216      	strb	r6, [r2, #8]
100119aa:	e003      	b.n	100119b4 <gapc_cmp_evt+0x98>
100119ac:	203b      	movs	r0, #59	; 0x3b
100119ae:	2e00      	cmp	r6, #0
100119b0:	d017      	beq.n	100119e2 <gapc_cmp_evt+0xc6>
100119b2:	7116      	strb	r6, [r2, #4]
100119b4:	3812      	subs	r0, #18
100119b6:	e014      	b.n	100119e2 <gapc_cmp_evt+0xc6>
100119b8:	203b      	movs	r0, #59	; 0x3b
100119ba:	2e00      	cmp	r6, #0
100119bc:	d011      	beq.n	100119e2 <gapc_cmp_evt+0xc6>
100119be:	7093      	strb	r3, [r2, #2]
100119c0:	70d6      	strb	r6, [r2, #3]
100119c2:	382a      	subs	r0, #42	; 0x2a
100119c4:	e00d      	b.n	100119e2 <gapc_cmp_evt+0xc6>
100119c6:	203b      	movs	r0, #59	; 0x3b
100119c8:	2e00      	cmp	r6, #0
100119ca:	d00a      	beq.n	100119e2 <gapc_cmp_evt+0xc6>
100119cc:	0a2d      	lsrs	r5, r5, #8
100119ce:	7016      	strb	r6, [r2, #0]
100119d0:	8055      	strh	r5, [r2, #2]
100119d2:	1d10      	adds	r0, r2, #4
100119d4:	2100      	movs	r1, #0
100119d6:	2205      	movs	r2, #5
100119d8:	4b03      	ldr	r3, [pc, #12]	; (100119e8 <gapc_cmp_evt+0xcc>)
100119da:	4798      	blx	r3
100119dc:	2012      	movs	r0, #18
100119de:	e000      	b.n	100119e2 <gapc_cmp_evt+0xc6>
100119e0:	2000      	movs	r0, #0
100119e2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
100119e4:	100118b9 	.word	0x100118b9
100119e8:	10015191 	.word	0x10015191

100119ec <gapc_connection_cfm_handler>:
100119ec:	b5f0      	push	{r4, r5, r6, r7, lr}
100119ee:	b085      	sub	sp, #20
100119f0:	1c1d      	adds	r5, r3, #0
100119f2:	ab0a      	add	r3, sp, #40	; 0x28
100119f4:	781b      	ldrb	r3, [r3, #0]
100119f6:	9201      	str	r2, [sp, #4]
100119f8:	9302      	str	r3, [sp, #8]
100119fa:	ab0b      	add	r3, sp, #44	; 0x2c
100119fc:	781b      	ldrb	r3, [r3, #0]
100119fe:	1c07      	adds	r7, r0, #0
10011a00:	9303      	str	r3, [sp, #12]
10011a02:	ab0c      	add	r3, sp, #48	; 0x30
10011a04:	881a      	ldrh	r2, [r3, #0]
10011a06:	2302      	movs	r3, #2
10011a08:	1c0e      	adds	r6, r1, #0
10011a0a:	4c23      	ldr	r4, [pc, #140]	; (10011a98 <gapc_connection_cfm_handler+0xac>)
10011a0c:	1c39      	adds	r1, r7, #0
10011a0e:	7023      	strb	r3, [r4, #0]
10011a10:	330c      	adds	r3, #12
10011a12:	7063      	strb	r3, [r4, #1]
10011a14:	70a3      	strb	r3, [r4, #2]
10011a16:	4b21      	ldr	r3, [pc, #132]	; (10011a9c <gapc_connection_cfm_handler+0xb0>)
10011a18:	70e2      	strb	r2, [r4, #3]
10011a1a:	881a      	ldrh	r2, [r3, #0]
10011a1c:	881b      	ldrh	r3, [r3, #0]
10011a1e:	7122      	strb	r2, [r4, #4]
10011a20:	0a1b      	lsrs	r3, r3, #8
10011a22:	4f1f      	ldr	r7, [pc, #124]	; (10011aa0 <gapc_connection_cfm_handler+0xb4>)
10011a24:	2210      	movs	r2, #16
10011a26:	481f      	ldr	r0, [pc, #124]	; (10011aa4 <gapc_connection_cfm_handler+0xb8>)
10011a28:	7163      	strb	r3, [r4, #5]
10011a2a:	47b8      	blx	r7
10011a2c:	0a33      	lsrs	r3, r6, #8
10011a2e:	7626      	strb	r6, [r4, #24]
10011a30:	7663      	strb	r3, [r4, #25]
10011a32:	9901      	ldr	r1, [sp, #4]
10011a34:	0c33      	lsrs	r3, r6, #16
10011a36:	2210      	movs	r2, #16
10011a38:	0e36      	lsrs	r6, r6, #24
10011a3a:	481b      	ldr	r0, [pc, #108]	; (10011aa8 <gapc_connection_cfm_handler+0xbc>)
10011a3c:	76a3      	strb	r3, [r4, #26]
10011a3e:	76e6      	strb	r6, [r4, #27]
10011a40:	47b8      	blx	r7
10011a42:	1c23      	adds	r3, r4, #0
10011a44:	332c      	adds	r3, #44	; 0x2c
10011a46:	701d      	strb	r5, [r3, #0]
10011a48:	1c23      	adds	r3, r4, #0
10011a4a:	0a2a      	lsrs	r2, r5, #8
10011a4c:	332d      	adds	r3, #45	; 0x2d
10011a4e:	701a      	strb	r2, [r3, #0]
10011a50:	1c23      	adds	r3, r4, #0
10011a52:	0c2a      	lsrs	r2, r5, #16
10011a54:	332e      	adds	r3, #46	; 0x2e
10011a56:	701a      	strb	r2, [r3, #0]
10011a58:	1c23      	adds	r3, r4, #0
10011a5a:	0e2d      	lsrs	r5, r5, #24
10011a5c:	332f      	adds	r3, #47	; 0x2f
10011a5e:	466a      	mov	r2, sp
10011a60:	701d      	strb	r5, [r3, #0]
10011a62:	1c23      	adds	r3, r4, #0
10011a64:	7a12      	ldrb	r2, [r2, #8]
10011a66:	3330      	adds	r3, #48	; 0x30
10011a68:	701a      	strb	r2, [r3, #0]
10011a6a:	1c23      	adds	r3, r4, #0
10011a6c:	2500      	movs	r5, #0
10011a6e:	3331      	adds	r3, #49	; 0x31
10011a70:	466a      	mov	r2, sp
10011a72:	701d      	strb	r5, [r3, #0]
10011a74:	1c23      	adds	r3, r4, #0
10011a76:	7b12      	ldrb	r2, [r2, #12]
10011a78:	3332      	adds	r3, #50	; 0x32
10011a7a:	701a      	strb	r2, [r3, #0]
10011a7c:	1c23      	adds	r3, r4, #0
10011a7e:	3333      	adds	r3, #51	; 0x33
10011a80:	701d      	strb	r5, [r3, #0]
10011a82:	232c      	movs	r3, #44	; 0x2c
10011a84:	1c20      	adds	r0, r4, #0
10011a86:	71a3      	strb	r3, [r4, #6]
10011a88:	2134      	movs	r1, #52	; 0x34
10011a8a:	4b08      	ldr	r3, [pc, #32]	; (10011aac <gapc_connection_cfm_handler+0xc0>)
10011a8c:	71e5      	strb	r5, [r4, #7]
10011a8e:	4798      	blx	r3
10011a90:	1c28      	adds	r0, r5, #0
10011a92:	b005      	add	sp, #20
10011a94:	bdf0      	pop	{r4, r5, r6, r7, pc}
10011a96:	46c0      	nop			; (mov r8, r8)
10011a98:	1001b12c 	.word	0x1001b12c
10011a9c:	1001adbc 	.word	0x1001adbc
10011aa0:	1001517f 	.word	0x1001517f
10011aa4:	1001b134 	.word	0x1001b134
10011aa8:	1001b148 	.word	0x1001b148
10011aac:	100116e9 	.word	0x100116e9

10011ab0 <gapc_con_req_ind>:
10011ab0:	b5f0      	push	{r4, r5, r6, r7, lr}
10011ab2:	7845      	ldrb	r5, [r0, #1]
10011ab4:	7803      	ldrb	r3, [r0, #0]
10011ab6:	4c30      	ldr	r4, [pc, #192]	; (10011b78 <gapc_con_req_ind+0xc8>)
10011ab8:	022d      	lsls	r5, r5, #8
10011aba:	431d      	orrs	r5, r3
10011abc:	85a5      	strh	r5, [r4, #44]	; 0x2c
10011abe:	78c3      	ldrb	r3, [r0, #3]
10011ac0:	7882      	ldrb	r2, [r0, #2]
10011ac2:	b08b      	sub	sp, #44	; 0x2c
10011ac4:	021b      	lsls	r3, r3, #8
10011ac6:	431a      	orrs	r2, r3
10011ac8:	466b      	mov	r3, sp
10011aca:	9205      	str	r2, [sp, #20]
10011acc:	8a9b      	ldrh	r3, [r3, #20]
10011ace:	2120      	movs	r1, #32
10011ad0:	85e3      	strh	r3, [r4, #46]	; 0x2e
10011ad2:	7943      	ldrb	r3, [r0, #5]
10011ad4:	7902      	ldrb	r2, [r0, #4]
10011ad6:	021b      	lsls	r3, r3, #8
10011ad8:	431a      	orrs	r2, r3
10011ada:	466b      	mov	r3, sp
10011adc:	9206      	str	r2, [sp, #24]
10011ade:	8b1b      	ldrh	r3, [r3, #24]
10011ae0:	1c06      	adds	r6, r0, #0
10011ae2:	8623      	strh	r3, [r4, #48]	; 0x30
10011ae4:	79c3      	ldrb	r3, [r0, #7]
10011ae6:	7982      	ldrb	r2, [r0, #6]
10011ae8:	021b      	lsls	r3, r3, #8
10011aea:	431a      	orrs	r2, r3
10011aec:	466b      	mov	r3, sp
10011aee:	9207      	str	r2, [sp, #28]
10011af0:	466a      	mov	r2, sp
10011af2:	8b9b      	ldrh	r3, [r3, #28]
10011af4:	1852      	adds	r2, r2, r1
10011af6:	8663      	strh	r3, [r4, #50]	; 0x32
10011af8:	7a43      	ldrb	r3, [r0, #9]
10011afa:	1c01      	adds	r1, r0, #0
10011afc:	9308      	str	r3, [sp, #32]
10011afe:	1c23      	adds	r3, r4, #0
10011b00:	7812      	ldrb	r2, [r2, #0]
10011b02:	3377      	adds	r3, #119	; 0x77
10011b04:	3478      	adds	r4, #120	; 0x78
10011b06:	701a      	strb	r2, [r3, #0]
10011b08:	310a      	adds	r1, #10
10011b0a:	2206      	movs	r2, #6
10011b0c:	4b1b      	ldr	r3, [pc, #108]	; (10011b7c <gapc_con_req_ind+0xcc>)
10011b0e:	1c20      	adds	r0, r4, #0
10011b10:	4798      	blx	r3
10011b12:	7c33      	ldrb	r3, [r6, #16]
10011b14:	9309      	str	r3, [sp, #36]	; 0x24
10011b16:	4b1a      	ldr	r3, [pc, #104]	; (10011b80 <gapc_con_req_ind+0xd0>)
10011b18:	4798      	blx	r3
10011b1a:	4e1a      	ldr	r6, [pc, #104]	; (10011b84 <gapc_con_req_ind+0xd4>)
10011b1c:	1e07      	subs	r7, r0, #0
10011b1e:	2f07      	cmp	r7, #7
10011b20:	d81b      	bhi.n	10011b5a <gapc_con_req_ind+0xaa>
10011b22:	2312      	movs	r3, #18
10011b24:	4343      	muls	r3, r0
10011b26:	18f0      	adds	r0, r6, r3
10011b28:	8145      	strh	r5, [r0, #10]
10011b2a:	4669      	mov	r1, sp
10011b2c:	2524      	movs	r5, #36	; 0x24
10011b2e:	1949      	adds	r1, r1, r5
10011b30:	7809      	ldrb	r1, [r1, #0]
10011b32:	2206      	movs	r2, #6
10011b34:	54f1      	strb	r1, [r6, r3]
10011b36:	2120      	movs	r1, #32
10011b38:	466b      	mov	r3, sp
10011b3a:	185b      	adds	r3, r3, r1
10011b3c:	781b      	ldrb	r3, [r3, #0]
10011b3e:	1c21      	adds	r1, r4, #0
10011b40:	7043      	strb	r3, [r0, #1]
10011b42:	466b      	mov	r3, sp
10011b44:	8a9b      	ldrh	r3, [r3, #20]
10011b46:	3002      	adds	r0, #2
10011b48:	8143      	strh	r3, [r0, #10]
10011b4a:	466b      	mov	r3, sp
10011b4c:	8b1b      	ldrh	r3, [r3, #24]
10011b4e:	8183      	strh	r3, [r0, #12]
10011b50:	466b      	mov	r3, sp
10011b52:	8b9b      	ldrh	r3, [r3, #28]
10011b54:	81c3      	strh	r3, [r0, #14]
10011b56:	4b09      	ldr	r3, [pc, #36]	; (10011b7c <gapc_con_req_ind+0xcc>)
10011b58:	4798      	blx	r3
10011b5a:	2112      	movs	r1, #18
10011b5c:	2300      	movs	r3, #0
10011b5e:	434f      	muls	r7, r1
10011b60:	9300      	str	r3, [sp, #0]
10011b62:	9301      	str	r3, [sp, #4]
10011b64:	19f6      	adds	r6, r6, r7
10011b66:	8971      	ldrh	r1, [r6, #10]
10011b68:	4a07      	ldr	r2, [pc, #28]	; (10011b88 <gapc_con_req_ind+0xd8>)
10011b6a:	9102      	str	r1, [sp, #8]
10011b6c:	1c10      	adds	r0, r2, #0
10011b6e:	1c19      	adds	r1, r3, #0
10011b70:	4c06      	ldr	r4, [pc, #24]	; (10011b8c <gapc_con_req_ind+0xdc>)
10011b72:	47a0      	blx	r4
10011b74:	b00b      	add	sp, #44	; 0x2c
10011b76:	bdf0      	pop	{r4, r5, r6, r7, pc}
10011b78:	1001ae4e 	.word	0x1001ae4e
10011b7c:	1001517f 	.word	0x1001517f
10011b80:	100118f5 	.word	0x100118f5
10011b84:	1001adbe 	.word	0x1001adbe
10011b88:	10019ed8 	.word	0x10019ed8
10011b8c:	100119ed 	.word	0x100119ed

10011b90 <gapc_disconnect_cmd_handler>:
10011b90:	2204      	movs	r2, #4
10011b92:	b510      	push	{r4, lr}
10011b94:	4b0c      	ldr	r3, [pc, #48]	; (10011bc8 <gapc_disconnect_cmd_handler+0x38>)
10011b96:	2400      	movs	r4, #0
10011b98:	701a      	strb	r2, [r3, #0]
10011b9a:	320a      	adds	r2, #10
10011b9c:	705a      	strb	r2, [r3, #1]
10011b9e:	709a      	strb	r2, [r3, #2]
10011ba0:	4a0a      	ldr	r2, [pc, #40]	; (10011bcc <gapc_disconnect_cmd_handler+0x3c>)
10011ba2:	70d9      	strb	r1, [r3, #3]
10011ba4:	8811      	ldrh	r1, [r2, #0]
10011ba6:	8812      	ldrh	r2, [r2, #0]
10011ba8:	7119      	strb	r1, [r3, #4]
10011baa:	0a12      	lsrs	r2, r2, #8
10011bac:	715a      	strb	r2, [r3, #5]
10011bae:	2201      	movs	r2, #1
10011bb0:	721a      	strb	r2, [r3, #8]
10011bb2:	1892      	adds	r2, r2, r2
10011bb4:	7258      	strb	r0, [r3, #9]
10011bb6:	719a      	strb	r2, [r3, #6]
10011bb8:	71dc      	strb	r4, [r3, #7]
10011bba:	1c18      	adds	r0, r3, #0
10011bbc:	210a      	movs	r1, #10
10011bbe:	4b04      	ldr	r3, [pc, #16]	; (10011bd0 <gapc_disconnect_cmd_handler+0x40>)
10011bc0:	4798      	blx	r3
10011bc2:	1c20      	adds	r0, r4, #0
10011bc4:	bd10      	pop	{r4, pc}
10011bc6:	46c0      	nop			; (mov r8, r8)
10011bc8:	1001b12c 	.word	0x1001b12c
10011bcc:	1001adbc 	.word	0x1001adbc
10011bd0:	100116e9 	.word	0x100116e9

10011bd4 <gapc_disconnect_ind>:
10011bd4:	1c02      	adds	r2, r0, #0
10011bd6:	b508      	push	{r3, lr}
10011bd8:	7843      	ldrb	r3, [r0, #1]
10011bda:	7800      	ldrb	r0, [r0, #0]
10011bdc:	021b      	lsls	r3, r3, #8
10011bde:	4318      	orrs	r0, r3
10011be0:	8008      	strh	r0, [r1, #0]
10011be2:	7893      	ldrb	r3, [r2, #2]
10011be4:	708b      	strb	r3, [r1, #2]
10011be6:	2100      	movs	r1, #0
10011be8:	4b05      	ldr	r3, [pc, #20]	; (10011c00 <gapc_disconnect_ind+0x2c>)
10011bea:	4798      	blx	r3
10011bec:	2807      	cmp	r0, #7
10011bee:	d806      	bhi.n	10011bfe <gapc_disconnect_ind+0x2a>
10011bf0:	2312      	movs	r3, #18
10011bf2:	4358      	muls	r0, r3
10011bf4:	4b03      	ldr	r3, [pc, #12]	; (10011c04 <gapc_disconnect_ind+0x30>)
10011bf6:	1818      	adds	r0, r3, r0
10011bf8:	2301      	movs	r3, #1
10011bfa:	425b      	negs	r3, r3
10011bfc:	8143      	strh	r3, [r0, #10]
10011bfe:	bd08      	pop	{r3, pc}
10011c00:	100118b9 	.word	0x100118b9
10011c04:	1001adbe 	.word	0x1001adbe

10011c08 <gapc_bond_cmd_handler>:
10011c08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10011c0a:	9300      	str	r3, [sp, #0]
10011c0c:	2312      	movs	r3, #18
10011c0e:	1c04      	adds	r4, r0, #0
10011c10:	a808      	add	r0, sp, #32
10011c12:	7807      	ldrb	r7, [r0, #0]
10011c14:	a809      	add	r0, sp, #36	; 0x24
10011c16:	7806      	ldrb	r6, [r0, #0]
10011c18:	a80a      	add	r0, sp, #40	; 0x28
10011c1a:	7805      	ldrb	r5, [r0, #0]
10011c1c:	a80b      	add	r0, sp, #44	; 0x2c
10011c1e:	7800      	ldrb	r0, [r0, #0]
10011c20:	9001      	str	r0, [sp, #4]
10011c22:	4810      	ldr	r0, [pc, #64]	; (10011c64 <gapc_bond_cmd_handler+0x5c>)
10011c24:	7003      	strb	r3, [r0, #0]
10011c26:	230e      	movs	r3, #14
10011c28:	70c4      	strb	r4, [r0, #3]
10011c2a:	4c0f      	ldr	r4, [pc, #60]	; (10011c68 <gapc_bond_cmd_handler+0x60>)
10011c2c:	7043      	strb	r3, [r0, #1]
10011c2e:	7083      	strb	r3, [r0, #2]
10011c30:	8823      	ldrh	r3, [r4, #0]
10011c32:	8824      	ldrh	r4, [r4, #0]
10011c34:	7103      	strb	r3, [r0, #4]
10011c36:	466b      	mov	r3, sp
10011c38:	781b      	ldrb	r3, [r3, #0]
10011c3a:	0a24      	lsrs	r4, r4, #8
10011c3c:	72c3      	strb	r3, [r0, #11]
10011c3e:	466b      	mov	r3, sp
10011c40:	791b      	ldrb	r3, [r3, #4]
10011c42:	7144      	strb	r4, [r0, #5]
10011c44:	73c3      	strb	r3, [r0, #15]
10011c46:	2308      	movs	r3, #8
10011c48:	7183      	strb	r3, [r0, #6]
10011c4a:	2300      	movs	r3, #0
10011c4c:	240a      	movs	r4, #10
10011c4e:	7241      	strb	r1, [r0, #9]
10011c50:	71c3      	strb	r3, [r0, #7]
10011c52:	2110      	movs	r1, #16
10011c54:	4b05      	ldr	r3, [pc, #20]	; (10011c6c <gapc_bond_cmd_handler+0x64>)
10011c56:	7307      	strb	r7, [r0, #12]
10011c58:	7346      	strb	r6, [r0, #13]
10011c5a:	7385      	strb	r5, [r0, #14]
10011c5c:	7204      	strb	r4, [r0, #8]
10011c5e:	7282      	strb	r2, [r0, #10]
10011c60:	4798      	blx	r3
10011c62:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
10011c64:	1001b12c 	.word	0x1001b12c
10011c68:	1001adbc 	.word	0x1001adbc
10011c6c:	100116e9 	.word	0x100116e9

10011c70 <gapc_bond_ind>:
10011c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10011c72:	780e      	ldrb	r6, [r1, #0]
10011c74:	1c03      	adds	r3, r0, #0
10011c76:	1eb0      	subs	r0, r6, #2
10011c78:	2805      	cmp	r0, #5
10011c7a:	d85d      	bhi.n	10011d38 <gapc_bond_ind+0xc8>
10011c7c:	1c15      	adds	r5, r2, #0
10011c7e:	1c0c      	adds	r4, r1, #0
10011c80:	f001 f9fa 	bl	10013078 <__gnu_thumb1_case_uqi>
10011c84:	2f5a030d 	.word	0x2f5a030d
10011c88:	4740      	.short	0x4740
10011c8a:	2009      	movs	r0, #9
10011c8c:	2a00      	cmp	r2, #0
10011c8e:	d054      	beq.n	10011d3a <gapc_bond_ind+0xca>
10011c90:	0a1b      	lsrs	r3, r3, #8
10011c92:	8053      	strh	r3, [r2, #2]
10011c94:	788b      	ldrb	r3, [r1, #2]
10011c96:	4829      	ldr	r0, [pc, #164]	; (10011d3c <gapc_bond_ind+0xcc>)
10011c98:	7113      	strb	r3, [r2, #4]
10011c9a:	2100      	movs	r1, #0
10011c9c:	e01c      	b.n	10011cd8 <gapc_bond_ind+0x68>
10011c9e:	2009      	movs	r0, #9
10011ca0:	2a00      	cmp	r2, #0
10011ca2:	d04a      	beq.n	10011d3a <gapc_bond_ind+0xca>
10011ca4:	4c25      	ldr	r4, [pc, #148]	; (10011d3c <gapc_bond_ind+0xcc>)
10011ca6:	0a1b      	lsrs	r3, r3, #8
10011ca8:	8053      	strh	r3, [r2, #2]
10011caa:	788b      	ldrb	r3, [r1, #2]
10011cac:	2700      	movs	r7, #0
10011cae:	1c10      	adds	r0, r2, #0
10011cb0:	1c21      	adds	r1, r4, #0
10011cb2:	7013      	strb	r3, [r2, #0]
10011cb4:	4e22      	ldr	r6, [pc, #136]	; (10011d40 <gapc_bond_ind+0xd0>)
10011cb6:	7117      	strb	r7, [r2, #4]
10011cb8:	312e      	adds	r1, #46	; 0x2e
10011cba:	2217      	movs	r2, #23
10011cbc:	3032      	adds	r0, #50	; 0x32
10011cbe:	47b0      	blx	r6
10011cc0:	1c28      	adds	r0, r5, #0
10011cc2:	1c21      	adds	r1, r4, #0
10011cc4:	2210      	movs	r2, #16
10011cc6:	311e      	adds	r1, #30
10011cc8:	3022      	adds	r0, #34	; 0x22
10011cca:	47b0      	blx	r6
10011ccc:	1ca1      	adds	r1, r4, #2
10011cce:	1da8      	adds	r0, r5, #6
10011cd0:	221c      	movs	r2, #28
10011cd2:	47b0      	blx	r6
10011cd4:	1c20      	adds	r0, r4, #0
10011cd6:	1c39      	adds	r1, r7, #0
10011cd8:	2246      	movs	r2, #70	; 0x46
10011cda:	4b1a      	ldr	r3, [pc, #104]	; (10011d44 <gapc_bond_ind+0xd4>)
10011cdc:	4798      	blx	r3
10011cde:	2009      	movs	r0, #9
10011ce0:	e02b      	b.n	10011d3a <gapc_bond_ind+0xca>
10011ce2:	4d16      	ldr	r5, [pc, #88]	; (10011d3c <gapc_bond_ind+0xcc>)
10011ce4:	3102      	adds	r1, #2
10011ce6:	1c28      	adds	r0, r5, #0
10011ce8:	2210      	movs	r2, #16
10011cea:	4e15      	ldr	r6, [pc, #84]	; (10011d40 <gapc_bond_ind+0xd0>)
10011cec:	302e      	adds	r0, #46	; 0x2e
10011cee:	47b0      	blx	r6
10011cf0:	1c28      	adds	r0, r5, #0
10011cf2:	1c21      	adds	r1, r4, #0
10011cf4:	303f      	adds	r0, #63	; 0x3f
10011cf6:	3112      	adds	r1, #18
10011cf8:	2206      	movs	r2, #6
10011cfa:	47b0      	blx	r6
10011cfc:	7e23      	ldrb	r3, [r4, #24]
10011cfe:	353e      	adds	r5, #62	; 0x3e
10011d00:	702b      	strb	r3, [r5, #0]
10011d02:	e019      	b.n	10011d38 <gapc_bond_ind+0xc8>
10011d04:	480d      	ldr	r0, [pc, #52]	; (10011d3c <gapc_bond_ind+0xcc>)
10011d06:	3102      	adds	r1, #2
10011d08:	2210      	movs	r2, #16
10011d0a:	4b0d      	ldr	r3, [pc, #52]	; (10011d40 <gapc_bond_ind+0xd0>)
10011d0c:	301e      	adds	r0, #30
10011d0e:	4798      	blx	r3
10011d10:	e012      	b.n	10011d38 <gapc_bond_ind+0xc8>
10011d12:	4d0a      	ldr	r5, [pc, #40]	; (10011d3c <gapc_bond_ind+0xcc>)
10011d14:	3102      	adds	r1, #2
10011d16:	2210      	movs	r2, #16
10011d18:	4e09      	ldr	r6, [pc, #36]	; (10011d40 <gapc_bond_ind+0xd0>)
10011d1a:	1ca8      	adds	r0, r5, #2
10011d1c:	47b0      	blx	r6
10011d1e:	1c28      	adds	r0, r5, #0
10011d20:	1c21      	adds	r1, r4, #0
10011d22:	7ce3      	ldrb	r3, [r4, #19]
10011d24:	7ca2      	ldrb	r2, [r4, #18]
10011d26:	021b      	lsls	r3, r3, #8
10011d28:	4313      	orrs	r3, r2
10011d2a:	3014      	adds	r0, #20
10011d2c:	3114      	adds	r1, #20
10011d2e:	2208      	movs	r2, #8
10011d30:	826b      	strh	r3, [r5, #18]
10011d32:	47b0      	blx	r6
10011d34:	7f23      	ldrb	r3, [r4, #28]
10011d36:	772b      	strb	r3, [r5, #28]
10011d38:	2000      	movs	r0, #0
10011d3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10011d3c:	10019f08 	.word	0x10019f08
10011d40:	1001517f 	.word	0x1001517f
10011d44:	10015191 	.word	0x10015191

10011d48 <gapc_bond_req_ind>:
10011d48:	b570      	push	{r4, r5, r6, lr}
10011d4a:	780c      	ldrb	r4, [r1, #0]
10011d4c:	1c03      	adds	r3, r0, #0
10011d4e:	7849      	ldrb	r1, [r1, #1]
10011d50:	2c07      	cmp	r4, #7
10011d52:	d85c      	bhi.n	10011e0e <gapc_bond_req_ind+0xc6>
10011d54:	1c20      	adds	r0, r4, #0
10011d56:	f001 f98f 	bl	10013078 <__gnu_thumb1_case_uqi>
10011d5a:	5a04      	.short	0x5a04
10011d5c:	5a0b5a5a 	.word	0x5a0b5a5a
10011d60:	1f1f      	.short	0x1f1f
10011d62:	200a      	movs	r0, #10
10011d64:	2a00      	cmp	r2, #0
10011d66:	d053      	beq.n	10011e10 <gapc_bond_req_ind+0xc8>
10011d68:	0a1b      	lsrs	r3, r3, #8
10011d6a:	8013      	strh	r3, [r2, #0]
10011d6c:	7091      	strb	r1, [r2, #2]
10011d6e:	e04f      	b.n	10011e10 <gapc_bond_req_ind+0xc8>
10011d70:	2a00      	cmp	r2, #0
10011d72:	d00b      	beq.n	10011d8c <gapc_bond_req_ind+0x44>
10011d74:	0a1b      	lsrs	r3, r3, #8
10011d76:	8013      	strh	r3, [r2, #0]
10011d78:	2900      	cmp	r1, #0
10011d7a:	d102      	bne.n	10011d82 <gapc_bond_req_ind+0x3a>
10011d7c:	2301      	movs	r3, #1
10011d7e:	7093      	strb	r3, [r2, #2]
10011d80:	e004      	b.n	10011d8c <gapc_bond_req_ind+0x44>
10011d82:	2300      	movs	r3, #0
10011d84:	7093      	strb	r3, [r2, #2]
10011d86:	2902      	cmp	r1, #2
10011d88:	d102      	bne.n	10011d90 <gapc_bond_req_ind+0x48>
10011d8a:	70d3      	strb	r3, [r2, #3]
10011d8c:	200c      	movs	r0, #12
10011d8e:	e03f      	b.n	10011e10 <gapc_bond_req_ind+0xc8>
10011d90:	2901      	cmp	r1, #1
10011d92:	d1fb      	bne.n	10011d8c <gapc_bond_req_ind+0x44>
10011d94:	70d1      	strb	r1, [r2, #3]
10011d96:	e7f9      	b.n	10011d8c <gapc_bond_req_ind+0x44>
10011d98:	2214      	movs	r2, #20
10011d9a:	481e      	ldr	r0, [pc, #120]	; (10011e14 <gapc_bond_req_ind+0xcc>)
10011d9c:	0a1b      	lsrs	r3, r3, #8
10011d9e:	70c3      	strb	r3, [r0, #3]
10011da0:	4b1d      	ldr	r3, [pc, #116]	; (10011e18 <gapc_bond_req_ind+0xd0>)
10011da2:	7002      	strb	r2, [r0, #0]
10011da4:	3a06      	subs	r2, #6
10011da6:	7042      	strb	r2, [r0, #1]
10011da8:	7082      	strb	r2, [r0, #2]
10011daa:	881a      	ldrh	r2, [r3, #0]
10011dac:	881b      	ldrh	r3, [r3, #0]
10011dae:	4e1b      	ldr	r6, [pc, #108]	; (10011e1c <gapc_bond_req_ind+0xd4>)
10011db0:	0a1b      	lsrs	r3, r3, #8
10011db2:	7143      	strb	r3, [r0, #5]
10011db4:	2301      	movs	r3, #1
10011db6:	7102      	strb	r2, [r0, #4]
10011db8:	7204      	strb	r4, [r0, #8]
10011dba:	7243      	strb	r3, [r0, #9]
10011dbc:	1c05      	adds	r5, r0, #0
10011dbe:	1c31      	adds	r1, r6, #0
10011dc0:	300a      	adds	r0, #10
10011dc2:	2c07      	cmp	r4, #7
10011dc4:	d116      	bne.n	10011df4 <gapc_bond_req_ind+0xac>
10011dc6:	317e      	adds	r1, #126	; 0x7e
10011dc8:	2210      	movs	r2, #16
10011dca:	4c15      	ldr	r4, [pc, #84]	; (10011e20 <gapc_bond_req_ind+0xd8>)
10011dcc:	47a0      	blx	r4
10011dce:	1c33      	adds	r3, r6, #0
10011dd0:	1c31      	adds	r1, r6, #0
10011dd2:	1c28      	adds	r0, r5, #0
10011dd4:	338e      	adds	r3, #142	; 0x8e
10011dd6:	881b      	ldrh	r3, [r3, #0]
10011dd8:	3190      	adds	r1, #144	; 0x90
10011dda:	76ab      	strb	r3, [r5, #26]
10011ddc:	2208      	movs	r2, #8
10011dde:	0a1b      	lsrs	r3, r3, #8
10011de0:	301c      	adds	r0, #28
10011de2:	76eb      	strb	r3, [r5, #27]
10011de4:	47a0      	blx	r4
10011de6:	1c31      	adds	r1, r6, #0
10011de8:	3198      	adds	r1, #152	; 0x98
10011dea:	780a      	ldrb	r2, [r1, #0]
10011dec:	1d6b      	adds	r3, r5, #5
10011dee:	77da      	strb	r2, [r3, #31]
10011df0:	2125      	movs	r1, #37	; 0x25
10011df2:	e004      	b.n	10011dfe <gapc_bond_req_ind+0xb6>
10011df4:	319a      	adds	r1, #154	; 0x9a
10011df6:	2210      	movs	r2, #16
10011df8:	4b09      	ldr	r3, [pc, #36]	; (10011e20 <gapc_bond_req_ind+0xd8>)
10011dfa:	4798      	blx	r3
10011dfc:	211a      	movs	r1, #26
10011dfe:	1c0b      	adds	r3, r1, #0
10011e00:	2400      	movs	r4, #0
10011e02:	3b08      	subs	r3, #8
10011e04:	71ab      	strb	r3, [r5, #6]
10011e06:	1c28      	adds	r0, r5, #0
10011e08:	4b06      	ldr	r3, [pc, #24]	; (10011e24 <gapc_bond_req_ind+0xdc>)
10011e0a:	71ec      	strb	r4, [r5, #7]
10011e0c:	4798      	blx	r3
10011e0e:	2000      	movs	r0, #0
10011e10:	bd70      	pop	{r4, r5, r6, pc}
10011e12:	46c0      	nop			; (mov r8, r8)
10011e14:	1001b12c 	.word	0x1001b12c
10011e18:	1001adbc 	.word	0x1001adbc
10011e1c:	1001ae4e 	.word	0x1001ae4e
10011e20:	1001517f 	.word	0x1001517f
10011e24:	100116e9 	.word	0x100116e9

10011e28 <gapc_bond_cfm_handler_pair_resp>:
10011e28:	b5f0      	push	{r4, r5, r6, r7, lr}
10011e2a:	b085      	sub	sp, #20
10011e2c:	1c07      	adds	r7, r0, #0
10011e2e:	a80a      	add	r0, sp, #40	; 0x28
10011e30:	7806      	ldrb	r6, [r0, #0]
10011e32:	a80b      	add	r0, sp, #44	; 0x2c
10011e34:	7805      	ldrb	r5, [r0, #0]
10011e36:	a80c      	add	r0, sp, #48	; 0x30
10011e38:	7800      	ldrb	r0, [r0, #0]
10011e3a:	2414      	movs	r4, #20
10011e3c:	9002      	str	r0, [sp, #8]
10011e3e:	a80d      	add	r0, sp, #52	; 0x34
10011e40:	7800      	ldrb	r0, [r0, #0]
10011e42:	9301      	str	r3, [sp, #4]
10011e44:	9003      	str	r0, [sp, #12]
10011e46:	a80e      	add	r0, sp, #56	; 0x38
10011e48:	8800      	ldrh	r0, [r0, #0]
10011e4a:	4684      	mov	ip, r0
10011e4c:	4812      	ldr	r0, [pc, #72]	; (10011e98 <gapc_bond_cfm_handler_pair_resp+0x70>)
10011e4e:	7004      	strb	r4, [r0, #0]
10011e50:	3c06      	subs	r4, #6
10011e52:	7044      	strb	r4, [r0, #1]
10011e54:	7084      	strb	r4, [r0, #2]
10011e56:	4664      	mov	r4, ip
10011e58:	70c4      	strb	r4, [r0, #3]
10011e5a:	4c10      	ldr	r4, [pc, #64]	; (10011e9c <gapc_bond_cfm_handler_pair_resp+0x74>)
10011e5c:	7247      	strb	r7, [r0, #9]
10011e5e:	8823      	ldrh	r3, [r4, #0]
10011e60:	8824      	ldrh	r4, [r4, #0]
10011e62:	7103      	strb	r3, [r0, #4]
10011e64:	466b      	mov	r3, sp
10011e66:	791b      	ldrb	r3, [r3, #4]
10011e68:	0a24      	lsrs	r4, r4, #8
10011e6a:	7303      	strb	r3, [r0, #12]
10011e6c:	466b      	mov	r3, sp
10011e6e:	7a1b      	ldrb	r3, [r3, #8]
10011e70:	7144      	strb	r4, [r0, #5]
10011e72:	73c3      	strb	r3, [r0, #15]
10011e74:	466b      	mov	r3, sp
10011e76:	7b1b      	ldrb	r3, [r3, #12]
10011e78:	2401      	movs	r4, #1
10011e7a:	7403      	strb	r3, [r0, #16]
10011e7c:	2309      	movs	r3, #9
10011e7e:	7183      	strb	r3, [r0, #6]
10011e80:	2300      	movs	r3, #0
10011e82:	7204      	strb	r4, [r0, #8]
10011e84:	7281      	strb	r1, [r0, #10]
10011e86:	72c2      	strb	r2, [r0, #11]
10011e88:	7346      	strb	r6, [r0, #13]
10011e8a:	7385      	strb	r5, [r0, #14]
10011e8c:	71c3      	strb	r3, [r0, #7]
10011e8e:	2111      	movs	r1, #17
10011e90:	4b03      	ldr	r3, [pc, #12]	; (10011ea0 <gapc_bond_cfm_handler_pair_resp+0x78>)
10011e92:	4798      	blx	r3
10011e94:	b005      	add	sp, #20
10011e96:	bdf0      	pop	{r4, r5, r6, r7, pc}
10011e98:	1001b12c 	.word	0x1001b12c
10011e9c:	1001adbc 	.word	0x1001adbc
10011ea0:	100116e9 	.word	0x100116e9

10011ea4 <gapc_bond_cfm_handler_key_exch>:
10011ea4:	b538      	push	{r3, r4, r5, lr}
10011ea6:	2514      	movs	r5, #20
10011ea8:	4c0d      	ldr	r4, [pc, #52]	; (10011ee0 <gapc_bond_cfm_handler_key_exch+0x3c>)
10011eaa:	70e3      	strb	r3, [r4, #3]
10011eac:	4b0d      	ldr	r3, [pc, #52]	; (10011ee4 <gapc_bond_cfm_handler_key_exch+0x40>)
10011eae:	7025      	strb	r5, [r4, #0]
10011eb0:	3d06      	subs	r5, #6
10011eb2:	7065      	strb	r5, [r4, #1]
10011eb4:	70a5      	strb	r5, [r4, #2]
10011eb6:	881d      	ldrh	r5, [r3, #0]
10011eb8:	881b      	ldrh	r3, [r3, #0]
10011eba:	7220      	strb	r0, [r4, #8]
10011ebc:	0a1b      	lsrs	r3, r3, #8
10011ebe:	7163      	strb	r3, [r4, #5]
10011ec0:	7261      	strb	r1, [r4, #9]
10011ec2:	4b09      	ldr	r3, [pc, #36]	; (10011ee8 <gapc_bond_cfm_handler_key_exch+0x44>)
10011ec4:	1c11      	adds	r1, r2, #0
10011ec6:	4809      	ldr	r0, [pc, #36]	; (10011eec <gapc_bond_cfm_handler_key_exch+0x48>)
10011ec8:	2210      	movs	r2, #16
10011eca:	7125      	strb	r5, [r4, #4]
10011ecc:	4798      	blx	r3
10011ece:	2312      	movs	r3, #18
10011ed0:	71a3      	strb	r3, [r4, #6]
10011ed2:	2300      	movs	r3, #0
10011ed4:	1c20      	adds	r0, r4, #0
10011ed6:	71e3      	strb	r3, [r4, #7]
10011ed8:	211a      	movs	r1, #26
10011eda:	4b05      	ldr	r3, [pc, #20]	; (10011ef0 <gapc_bond_cfm_handler_key_exch+0x4c>)
10011edc:	4798      	blx	r3
10011ede:	bd38      	pop	{r3, r4, r5, pc}
10011ee0:	1001b12c 	.word	0x1001b12c
10011ee4:	1001adbc 	.word	0x1001adbc
10011ee8:	1001517f 	.word	0x1001517f
10011eec:	1001b136 	.word	0x1001b136
10011ef0:	100116e9 	.word	0x100116e9

10011ef4 <gapc_security_cmd_handler>:
10011ef4:	221a      	movs	r2, #26
10011ef6:	b508      	push	{r3, lr}
10011ef8:	4b0b      	ldr	r3, [pc, #44]	; (10011f28 <gapc_security_cmd_handler+0x34>)
10011efa:	701a      	strb	r2, [r3, #0]
10011efc:	3a0c      	subs	r2, #12
10011efe:	705a      	strb	r2, [r3, #1]
10011f00:	709a      	strb	r2, [r3, #2]
10011f02:	4a0a      	ldr	r2, [pc, #40]	; (10011f2c <gapc_security_cmd_handler+0x38>)
10011f04:	70d8      	strb	r0, [r3, #3]
10011f06:	8810      	ldrh	r0, [r2, #0]
10011f08:	8812      	ldrh	r2, [r2, #0]
10011f0a:	7118      	strb	r0, [r3, #4]
10011f0c:	0a12      	lsrs	r2, r2, #8
10011f0e:	715a      	strb	r2, [r3, #5]
10011f10:	220c      	movs	r2, #12
10011f12:	721a      	strb	r2, [r3, #8]
10011f14:	3a0a      	subs	r2, #10
10011f16:	719a      	strb	r2, [r3, #6]
10011f18:	2200      	movs	r2, #0
10011f1a:	7259      	strb	r1, [r3, #9]
10011f1c:	71da      	strb	r2, [r3, #7]
10011f1e:	1c18      	adds	r0, r3, #0
10011f20:	210a      	movs	r1, #10
10011f22:	4b03      	ldr	r3, [pc, #12]	; (10011f30 <gapc_security_cmd_handler+0x3c>)
10011f24:	4798      	blx	r3
10011f26:	bd08      	pop	{r3, pc}
10011f28:	1001b12c 	.word	0x1001b12c
10011f2c:	1001adbc 	.word	0x1001adbc
10011f30:	100116e9 	.word	0x100116e9

10011f34 <gapc_encrypt_cmd_handler>:
10011f34:	b5f0      	push	{r4, r5, r6, r7, lr}
10011f36:	2500      	movs	r5, #0
10011f38:	b089      	sub	sp, #36	; 0x24
10011f3a:	9306      	str	r3, [sp, #24]
10011f3c:	ab0e      	add	r3, sp, #56	; 0x38
10011f3e:	781b      	ldrb	r3, [r3, #0]
10011f40:	1c17      	adds	r7, r2, #0
10011f42:	9307      	str	r3, [sp, #28]
10011f44:	ab0f      	add	r3, sp, #60	; 0x3c
10011f46:	781b      	ldrb	r3, [r3, #0]
10011f48:	4a19      	ldr	r2, [pc, #100]	; (10011fb0 <gapc_encrypt_cmd_handler+0x7c>)
10011f4a:	1c06      	adds	r6, r0, #0
10011f4c:	9105      	str	r1, [sp, #20]
10011f4e:	9300      	str	r3, [sp, #0]
10011f50:	9002      	str	r0, [sp, #8]
10011f52:	1c29      	adds	r1, r5, #0
10011f54:	1c2b      	adds	r3, r5, #0
10011f56:	9501      	str	r5, [sp, #4]
10011f58:	1c10      	adds	r0, r2, #0
10011f5a:	4c16      	ldr	r4, [pc, #88]	; (10011fb4 <gapc_encrypt_cmd_handler+0x80>)
10011f5c:	47a0      	blx	r4
10011f5e:	2316      	movs	r3, #22
10011f60:	4c15      	ldr	r4, [pc, #84]	; (10011fb8 <gapc_encrypt_cmd_handler+0x84>)
10011f62:	9905      	ldr	r1, [sp, #20]
10011f64:	7023      	strb	r3, [r4, #0]
10011f66:	3b08      	subs	r3, #8
10011f68:	7063      	strb	r3, [r4, #1]
10011f6a:	70a3      	strb	r3, [r4, #2]
10011f6c:	4b13      	ldr	r3, [pc, #76]	; (10011fbc <gapc_encrypt_cmd_handler+0x88>)
10011f6e:	70e6      	strb	r6, [r4, #3]
10011f70:	881a      	ldrh	r2, [r3, #0]
10011f72:	881b      	ldrh	r3, [r3, #0]
10011f74:	7122      	strb	r2, [r4, #4]
10011f76:	0a1b      	lsrs	r3, r3, #8
10011f78:	7163      	strb	r3, [r4, #5]
10011f7a:	230b      	movs	r3, #11
10011f7c:	4e10      	ldr	r6, [pc, #64]	; (10011fc0 <gapc_encrypt_cmd_handler+0x8c>)
10011f7e:	2210      	movs	r2, #16
10011f80:	4810      	ldr	r0, [pc, #64]	; (10011fc4 <gapc_encrypt_cmd_handler+0x90>)
10011f82:	7223      	strb	r3, [r4, #8]
10011f84:	7265      	strb	r5, [r4, #9]
10011f86:	47b0      	blx	r6
10011f88:	0a3b      	lsrs	r3, r7, #8
10011f8a:	9906      	ldr	r1, [sp, #24]
10011f8c:	2208      	movs	r2, #8
10011f8e:	480e      	ldr	r0, [pc, #56]	; (10011fc8 <gapc_encrypt_cmd_handler+0x94>)
10011f90:	76e3      	strb	r3, [r4, #27]
10011f92:	76a7      	strb	r7, [r4, #26]
10011f94:	47b0      	blx	r6
10011f96:	466a      	mov	r2, sp
10011f98:	7f12      	ldrb	r2, [r2, #28]
10011f9a:	1d63      	adds	r3, r4, #5
10011f9c:	77da      	strb	r2, [r3, #31]
10011f9e:	231d      	movs	r3, #29
10011fa0:	1c20      	adds	r0, r4, #0
10011fa2:	71a3      	strb	r3, [r4, #6]
10011fa4:	2125      	movs	r1, #37	; 0x25
10011fa6:	4b09      	ldr	r3, [pc, #36]	; (10011fcc <gapc_encrypt_cmd_handler+0x98>)
10011fa8:	71e5      	strb	r5, [r4, #7]
10011faa:	4798      	blx	r3
10011fac:	b009      	add	sp, #36	; 0x24
10011fae:	bdf0      	pop	{r4, r5, r6, r7, pc}
10011fb0:	10019ee8 	.word	0x10019ee8
10011fb4:	100119ed 	.word	0x100119ed
10011fb8:	1001b12c 	.word	0x1001b12c
10011fbc:	1001adbc 	.word	0x1001adbc
10011fc0:	1001517f 	.word	0x1001517f
10011fc4:	1001b136 	.word	0x1001b136
10011fc8:	1001b148 	.word	0x1001b148
10011fcc:	100116e9 	.word	0x100116e9

10011fd0 <gapc_encrypt_req_ind>:
10011fd0:	b508      	push	{r3, lr}
10011fd2:	0a00      	lsrs	r0, r0, #8
10011fd4:	8010      	strh	r0, [r2, #0]
10011fd6:	784b      	ldrb	r3, [r1, #1]
10011fd8:	7808      	ldrb	r0, [r1, #0]
10011fda:	021b      	lsls	r3, r3, #8
10011fdc:	4303      	orrs	r3, r0
10011fde:	8053      	strh	r3, [r2, #2]
10011fe0:	1d10      	adds	r0, r2, #4
10011fe2:	3102      	adds	r1, #2
10011fe4:	2208      	movs	r2, #8
10011fe6:	4b01      	ldr	r3, [pc, #4]	; (10011fec <gapc_encrypt_req_ind+0x1c>)
10011fe8:	4798      	blx	r3
10011fea:	bd08      	pop	{r3, pc}
10011fec:	1001517f 	.word	0x1001517f

10011ff0 <gapc_encrypt_cfm_handler>:
10011ff0:	b5f0      	push	{r4, r5, r6, r7, lr}
10011ff2:	2500      	movs	r5, #0
10011ff4:	b087      	sub	sp, #28
10011ff6:	9304      	str	r3, [sp, #16]
10011ff8:	ab0c      	add	r3, sp, #48	; 0x30
10011ffa:	781b      	ldrb	r3, [r3, #0]
10011ffc:	1c17      	adds	r7, r2, #0
10011ffe:	4a15      	ldr	r2, [pc, #84]	; (10012054 <gapc_encrypt_cfm_handler+0x64>)
10012000:	1c06      	adds	r6, r0, #0
10012002:	9305      	str	r3, [sp, #20]
10012004:	9100      	str	r1, [sp, #0]
10012006:	9002      	str	r0, [sp, #8]
10012008:	1c29      	adds	r1, r5, #0
1001200a:	1c2b      	adds	r3, r5, #0
1001200c:	9501      	str	r5, [sp, #4]
1001200e:	1c10      	adds	r0, r2, #0
10012010:	4c11      	ldr	r4, [pc, #68]	; (10012058 <gapc_encrypt_cfm_handler+0x68>)
10012012:	47a0      	blx	r4
10012014:	2318      	movs	r3, #24
10012016:	4c11      	ldr	r4, [pc, #68]	; (1001205c <gapc_encrypt_cfm_handler+0x6c>)
10012018:	9904      	ldr	r1, [sp, #16]
1001201a:	7023      	strb	r3, [r4, #0]
1001201c:	3b0a      	subs	r3, #10
1001201e:	7063      	strb	r3, [r4, #1]
10012020:	70a3      	strb	r3, [r4, #2]
10012022:	4b0f      	ldr	r3, [pc, #60]	; (10012060 <gapc_encrypt_cfm_handler+0x70>)
10012024:	480f      	ldr	r0, [pc, #60]	; (10012064 <gapc_encrypt_cfm_handler+0x74>)
10012026:	881a      	ldrh	r2, [r3, #0]
10012028:	881b      	ldrh	r3, [r3, #0]
1001202a:	7122      	strb	r2, [r4, #4]
1001202c:	0a1b      	lsrs	r3, r3, #8
1001202e:	7163      	strb	r3, [r4, #5]
10012030:	2210      	movs	r2, #16
10012032:	4b0d      	ldr	r3, [pc, #52]	; (10012068 <gapc_encrypt_cfm_handler+0x78>)
10012034:	70e6      	strb	r6, [r4, #3]
10012036:	7227      	strb	r7, [r4, #8]
10012038:	4798      	blx	r3
1001203a:	466b      	mov	r3, sp
1001203c:	7d1b      	ldrb	r3, [r3, #20]
1001203e:	1c20      	adds	r0, r4, #0
10012040:	7663      	strb	r3, [r4, #25]
10012042:	2312      	movs	r3, #18
10012044:	211a      	movs	r1, #26
10012046:	71a3      	strb	r3, [r4, #6]
10012048:	4b08      	ldr	r3, [pc, #32]	; (1001206c <gapc_encrypt_cfm_handler+0x7c>)
1001204a:	71e5      	strb	r5, [r4, #7]
1001204c:	4798      	blx	r3
1001204e:	b007      	add	sp, #28
10012050:	bdf0      	pop	{r4, r5, r6, r7, pc}
10012052:	46c0      	nop			; (mov r8, r8)
10012054:	10019ef8 	.word	0x10019ef8
10012058:	100119ed 	.word	0x100119ed
1001205c:	1001b12c 	.word	0x1001b12c
10012060:	1001adbc 	.word	0x1001adbc
10012064:	1001b135 	.word	0x1001b135
10012068:	1001517f 	.word	0x1001517f
1001206c:	100116e9 	.word	0x100116e9

10012070 <gapc_encrypt_ind>:
10012070:	780b      	ldrb	r3, [r1, #0]
10012072:	0a00      	lsrs	r0, r0, #8
10012074:	70d3      	strb	r3, [r2, #3]
10012076:	2300      	movs	r3, #0
10012078:	8010      	strh	r0, [r2, #0]
1001207a:	7093      	strb	r3, [r2, #2]
1001207c:	4770      	bx	lr
	...

10012080 <gapc_param_update_cfm_handler>:
10012080:	b538      	push	{r3, r4, r5, lr}
10012082:	2410      	movs	r4, #16
10012084:	1c05      	adds	r5, r0, #0
10012086:	480e      	ldr	r0, [pc, #56]	; (100120c0 <gapc_param_update_cfm_handler+0x40>)
10012088:	7004      	strb	r4, [r0, #0]
1001208a:	3c02      	subs	r4, #2
1001208c:	7044      	strb	r4, [r0, #1]
1001208e:	7084      	strb	r4, [r0, #2]
10012090:	4c0c      	ldr	r4, [pc, #48]	; (100120c4 <gapc_param_update_cfm_handler+0x44>)
10012092:	70c5      	strb	r5, [r0, #3]
10012094:	8825      	ldrh	r5, [r4, #0]
10012096:	8824      	ldrh	r4, [r4, #0]
10012098:	72c3      	strb	r3, [r0, #11]
1001209a:	0a1b      	lsrs	r3, r3, #8
1001209c:	0a24      	lsrs	r4, r4, #8
1001209e:	7303      	strb	r3, [r0, #12]
100120a0:	2305      	movs	r3, #5
100120a2:	7144      	strb	r4, [r0, #5]
100120a4:	2400      	movs	r4, #0
100120a6:	7201      	strb	r1, [r0, #8]
100120a8:	7242      	strb	r2, [r0, #9]
100120aa:	7183      	strb	r3, [r0, #6]
100120ac:	0a12      	lsrs	r2, r2, #8
100120ae:	210d      	movs	r1, #13
100120b0:	4b05      	ldr	r3, [pc, #20]	; (100120c8 <gapc_param_update_cfm_handler+0x48>)
100120b2:	7105      	strb	r5, [r0, #4]
100120b4:	7282      	strb	r2, [r0, #10]
100120b6:	71c4      	strb	r4, [r0, #7]
100120b8:	4798      	blx	r3
100120ba:	1c20      	adds	r0, r4, #0
100120bc:	bd38      	pop	{r3, r4, r5, pc}
100120be:	46c0      	nop			; (mov r8, r8)
100120c0:	1001b12c 	.word	0x1001b12c
100120c4:	1001adbc 	.word	0x1001adbc
100120c8:	100116e9 	.word	0x100116e9

100120cc <gapc_param_updated_ind>:
100120cc:	2300      	movs	r3, #0
100120ce:	0a00      	lsrs	r0, r0, #8
100120d0:	8010      	strh	r0, [r2, #0]
100120d2:	7093      	strb	r3, [r2, #2]
100120d4:	784b      	ldrb	r3, [r1, #1]
100120d6:	7808      	ldrb	r0, [r1, #0]
100120d8:	021b      	lsls	r3, r3, #8
100120da:	4303      	orrs	r3, r0
100120dc:	8093      	strh	r3, [r2, #4]
100120de:	78cb      	ldrb	r3, [r1, #3]
100120e0:	7888      	ldrb	r0, [r1, #2]
100120e2:	021b      	lsls	r3, r3, #8
100120e4:	4303      	orrs	r3, r0
100120e6:	80d3      	strh	r3, [r2, #6]
100120e8:	794b      	ldrb	r3, [r1, #5]
100120ea:	7909      	ldrb	r1, [r1, #4]
100120ec:	021b      	lsls	r3, r3, #8
100120ee:	430b      	orrs	r3, r1
100120f0:	2007      	movs	r0, #7
100120f2:	8113      	strh	r3, [r2, #8]
100120f4:	4770      	bx	lr

100120f6 <gapc_param_updated_req_ind>:
100120f6:	0a00      	lsrs	r0, r0, #8
100120f8:	8010      	strh	r0, [r2, #0]
100120fa:	784b      	ldrb	r3, [r1, #1]
100120fc:	7808      	ldrb	r0, [r1, #0]
100120fe:	021b      	lsls	r3, r3, #8
10012100:	4303      	orrs	r3, r0
10012102:	8053      	strh	r3, [r2, #2]
10012104:	78cb      	ldrb	r3, [r1, #3]
10012106:	7888      	ldrb	r0, [r1, #2]
10012108:	021b      	lsls	r3, r3, #8
1001210a:	4303      	orrs	r3, r0
1001210c:	8093      	strh	r3, [r2, #4]
1001210e:	794b      	ldrb	r3, [r1, #5]
10012110:	7908      	ldrb	r0, [r1, #4]
10012112:	021b      	lsls	r3, r3, #8
10012114:	4303      	orrs	r3, r0
10012116:	80d3      	strh	r3, [r2, #6]
10012118:	79cb      	ldrb	r3, [r1, #7]
1001211a:	7989      	ldrb	r1, [r1, #6]
1001211c:	021b      	lsls	r3, r3, #8
1001211e:	430b      	orrs	r3, r1
10012120:	2008      	movs	r0, #8
10012122:	8113      	strh	r3, [r2, #8]
10012124:	4770      	bx	lr
	...

10012128 <gapc_dev_info_req_ind_handler>:
10012128:	b508      	push	{r3, lr}
1001212a:	1c0b      	adds	r3, r1, #0
1001212c:	0a01      	lsrs	r1, r0, #8
1001212e:	8011      	strh	r1, [r2, #0]
10012130:	7818      	ldrb	r0, [r3, #0]
10012132:	7090      	strb	r0, [r2, #2]
10012134:	2800      	cmp	r0, #0
10012136:	d104      	bne.n	10012142 <gapc_dev_info_req_ind_handler+0x1a>
10012138:	4b03      	ldr	r3, [pc, #12]	; (10012148 <gapc_dev_info_req_ind_handler+0x20>)
1001213a:	33aa      	adds	r3, #170	; 0xaa
1001213c:	881b      	ldrh	r3, [r3, #0]
1001213e:	2b00      	cmp	r3, #0
10012140:	d001      	beq.n	10012146 <gapc_dev_info_req_ind_handler+0x1e>
10012142:	4b02      	ldr	r3, [pc, #8]	; (1001214c <gapc_dev_info_req_ind_handler+0x24>)
10012144:	4798      	blx	r3
10012146:	bd08      	pop	{r3, pc}
10012148:	1001ae4e 	.word	0x1001ae4e
1001214c:	100117f9 	.word	0x100117f9

10012150 <gapc_sec_req_ind>:
10012150:	0a00      	lsrs	r0, r0, #8
10012152:	8010      	strh	r0, [r2, #0]
10012154:	7809      	ldrb	r1, [r1, #0]
10012156:	2301      	movs	r3, #1
10012158:	1c08      	adds	r0, r1, #0
1001215a:	0889      	lsrs	r1, r1, #2
1001215c:	4018      	ands	r0, r3
1001215e:	400b      	ands	r3, r1
10012160:	70d0      	strb	r0, [r2, #3]
10012162:	7113      	strb	r3, [r2, #4]
10012164:	4770      	bx	lr

10012166 <gapc_sign_counter_ind_handler>:
10012166:	0a00      	lsrs	r0, r0, #8
10012168:	8010      	strh	r0, [r2, #0]
1001216a:	784b      	ldrb	r3, [r1, #1]
1001216c:	0218      	lsls	r0, r3, #8
1001216e:	788b      	ldrb	r3, [r1, #2]
10012170:	041b      	lsls	r3, r3, #16
10012172:	4303      	orrs	r3, r0
10012174:	7808      	ldrb	r0, [r1, #0]
10012176:	4303      	orrs	r3, r0
10012178:	78c8      	ldrb	r0, [r1, #3]
1001217a:	0600      	lsls	r0, r0, #24
1001217c:	4303      	orrs	r3, r0
1001217e:	6053      	str	r3, [r2, #4]
10012180:	794b      	ldrb	r3, [r1, #5]
10012182:	0218      	lsls	r0, r3, #8
10012184:	798b      	ldrb	r3, [r1, #6]
10012186:	041b      	lsls	r3, r3, #16
10012188:	4303      	orrs	r3, r0
1001218a:	7908      	ldrb	r0, [r1, #4]
1001218c:	79c9      	ldrb	r1, [r1, #7]
1001218e:	4303      	orrs	r3, r0
10012190:	0609      	lsls	r1, r1, #24
10012192:	430b      	orrs	r3, r1
10012194:	2000      	movs	r0, #0
10012196:	6093      	str	r3, [r2, #8]
10012198:	4770      	bx	lr
	...

1001219c <gapc_peer_att_info_ind_handler>:
1001219c:	b510      	push	{r4, lr}
1001219e:	0a00      	lsrs	r0, r0, #8
100121a0:	8010      	strh	r0, [r2, #0]
100121a2:	7808      	ldrb	r0, [r1, #0]
100121a4:	7090      	strb	r0, [r2, #2]
100121a6:	788b      	ldrb	r3, [r1, #2]
100121a8:	784c      	ldrb	r4, [r1, #1]
100121aa:	021b      	lsls	r3, r3, #8
100121ac:	4323      	orrs	r3, r4
100121ae:	8093      	strh	r3, [r2, #4]
100121b0:	2801      	cmp	r0, #1
100121b2:	d027      	beq.n	10012204 <gapc_peer_att_info_ind_handler+0x68>
100121b4:	2800      	cmp	r0, #0
100121b6:	d017      	beq.n	100121e8 <gapc_peer_att_info_ind_handler+0x4c>
100121b8:	2802      	cmp	r0, #2
100121ba:	d12a      	bne.n	10012212 <gapc_peer_att_info_ind_handler+0x76>
100121bc:	790b      	ldrb	r3, [r1, #4]
100121be:	78c8      	ldrb	r0, [r1, #3]
100121c0:	021b      	lsls	r3, r3, #8
100121c2:	4303      	orrs	r3, r0
100121c4:	8113      	strh	r3, [r2, #8]
100121c6:	798b      	ldrb	r3, [r1, #6]
100121c8:	7948      	ldrb	r0, [r1, #5]
100121ca:	021b      	lsls	r3, r3, #8
100121cc:	4303      	orrs	r3, r0
100121ce:	80d3      	strh	r3, [r2, #6]
100121d0:	7a0b      	ldrb	r3, [r1, #8]
100121d2:	79c8      	ldrb	r0, [r1, #7]
100121d4:	021b      	lsls	r3, r3, #8
100121d6:	4303      	orrs	r3, r0
100121d8:	8193      	strh	r3, [r2, #12]
100121da:	7a8b      	ldrb	r3, [r1, #10]
100121dc:	7a49      	ldrb	r1, [r1, #9]
100121de:	021b      	lsls	r3, r3, #8
100121e0:	430b      	orrs	r3, r1
100121e2:	8153      	strh	r3, [r2, #10]
100121e4:	2306      	movs	r3, #6
100121e6:	e013      	b.n	10012210 <gapc_peer_att_info_ind_handler+0x74>
100121e8:	1c14      	adds	r4, r2, #0
100121ea:	1c20      	adds	r0, r4, #0
100121ec:	790a      	ldrb	r2, [r1, #4]
100121ee:	78cb      	ldrb	r3, [r1, #3]
100121f0:	0212      	lsls	r2, r2, #8
100121f2:	431a      	orrs	r2, r3
100121f4:	80e2      	strh	r2, [r4, #6]
100121f6:	4b07      	ldr	r3, [pc, #28]	; (10012214 <gapc_peer_att_info_ind_handler+0x78>)
100121f8:	3008      	adds	r0, #8
100121fa:	3105      	adds	r1, #5
100121fc:	4798      	blx	r3
100121fe:	2302      	movs	r3, #2
10012200:	70a3      	strb	r3, [r4, #2]
10012202:	e006      	b.n	10012212 <gapc_peer_att_info_ind_handler+0x76>
10012204:	790b      	ldrb	r3, [r1, #4]
10012206:	78c9      	ldrb	r1, [r1, #3]
10012208:	021b      	lsls	r3, r3, #8
1001220a:	430b      	orrs	r3, r1
1001220c:	80d3      	strh	r3, [r2, #6]
1001220e:	2305      	movs	r3, #5
10012210:	7093      	strb	r3, [r2, #2]
10012212:	bd10      	pop	{r4, pc}
10012214:	1001517f 	.word	0x1001517f

10012218 <gapc_con_channel_map_ind_handler>:
10012218:	b508      	push	{r3, lr}
1001221a:	2300      	movs	r3, #0
1001221c:	0a00      	lsrs	r0, r0, #8
1001221e:	7013      	strb	r3, [r2, #0]
10012220:	8050      	strh	r0, [r2, #2]
10012222:	4b02      	ldr	r3, [pc, #8]	; (1001222c <gapc_con_channel_map_ind_handler+0x14>)
10012224:	1d10      	adds	r0, r2, #4
10012226:	2205      	movs	r2, #5
10012228:	4798      	blx	r3
1001222a:	bd08      	pop	{r3, pc}
1001222c:	1001517f 	.word	0x1001517f

10012230 <gapc_lecb_connected>:
10012230:	7843      	ldrb	r3, [r0, #1]
10012232:	7802      	ldrb	r2, [r0, #0]
10012234:	021b      	lsls	r3, r3, #8
10012236:	4313      	orrs	r3, r2
10012238:	800b      	strh	r3, [r1, #0]
1001223a:	78c3      	ldrb	r3, [r0, #3]
1001223c:	7882      	ldrb	r2, [r0, #2]
1001223e:	021b      	lsls	r3, r3, #8
10012240:	4313      	orrs	r3, r2
10012242:	804b      	strh	r3, [r1, #2]
10012244:	7943      	ldrb	r3, [r0, #5]
10012246:	7902      	ldrb	r2, [r0, #4]
10012248:	021b      	lsls	r3, r3, #8
1001224a:	4313      	orrs	r3, r2
1001224c:	808b      	strh	r3, [r1, #4]
1001224e:	79c3      	ldrb	r3, [r0, #7]
10012250:	7982      	ldrb	r2, [r0, #6]
10012252:	021b      	lsls	r3, r3, #8
10012254:	4313      	orrs	r3, r2
10012256:	80cb      	strh	r3, [r1, #6]
10012258:	2300      	movs	r3, #0
1001225a:	720b      	strb	r3, [r1, #8]
1001225c:	4770      	bx	lr

1001225e <gapc_lecb_disconnected>:
1001225e:	7843      	ldrb	r3, [r0, #1]
10012260:	7802      	ldrb	r2, [r0, #0]
10012262:	021b      	lsls	r3, r3, #8
10012264:	4313      	orrs	r3, r2
10012266:	800b      	strh	r3, [r1, #0]
10012268:	78c3      	ldrb	r3, [r0, #3]
1001226a:	7882      	ldrb	r2, [r0, #2]
1001226c:	021b      	lsls	r3, r3, #8
1001226e:	4313      	orrs	r3, r2
10012270:	804b      	strh	r3, [r1, #2]
10012272:	4770      	bx	lr

10012274 <gapc_lecb_connect_req_ind>:
10012274:	7843      	ldrb	r3, [r0, #1]
10012276:	7802      	ldrb	r2, [r0, #0]
10012278:	021b      	lsls	r3, r3, #8
1001227a:	4313      	orrs	r3, r2
1001227c:	800b      	strh	r3, [r1, #0]
1001227e:	78c3      	ldrb	r3, [r0, #3]
10012280:	7882      	ldrb	r2, [r0, #2]
10012282:	021b      	lsls	r3, r3, #8
10012284:	4313      	orrs	r3, r2
10012286:	804b      	strh	r3, [r1, #2]
10012288:	7943      	ldrb	r3, [r0, #5]
1001228a:	7902      	ldrb	r2, [r0, #4]
1001228c:	021b      	lsls	r3, r3, #8
1001228e:	4313      	orrs	r3, r2
10012290:	808b      	strh	r3, [r1, #4]
10012292:	79c3      	ldrb	r3, [r0, #7]
10012294:	7982      	ldrb	r2, [r0, #6]
10012296:	021b      	lsls	r3, r3, #8
10012298:	4313      	orrs	r3, r2
1001229a:	80cb      	strh	r3, [r1, #6]
1001229c:	4770      	bx	lr

1001229e <gapc_lecb_add_credit_resp_handler>:
1001229e:	7843      	ldrb	r3, [r0, #1]
100122a0:	7802      	ldrb	r2, [r0, #0]
100122a2:	021b      	lsls	r3, r3, #8
100122a4:	4313      	orrs	r3, r2
100122a6:	800b      	strh	r3, [r1, #0]
100122a8:	78c3      	ldrb	r3, [r0, #3]
100122aa:	7882      	ldrb	r2, [r0, #2]
100122ac:	021b      	lsls	r3, r3, #8
100122ae:	4313      	orrs	r3, r2
100122b0:	804b      	strh	r3, [r1, #2]
100122b2:	7943      	ldrb	r3, [r0, #5]
100122b4:	7902      	ldrb	r2, [r0, #4]
100122b6:	021b      	lsls	r3, r3, #8
100122b8:	4313      	orrs	r3, r2
100122ba:	808b      	strh	r3, [r1, #4]
100122bc:	4770      	bx	lr
	...

100122c0 <gapm_reset_req_handler>:
100122c0:	b573      	push	{r0, r1, r4, r5, r6, lr}
100122c2:	466b      	mov	r3, sp
100122c4:	4915      	ldr	r1, [pc, #84]	; (1001231c <gapm_reset_req_handler+0x5c>)
100122c6:	4816      	ldr	r0, [pc, #88]	; (10012320 <gapm_reset_req_handler+0x60>)
100122c8:	880c      	ldrh	r4, [r1, #0]
100122ca:	8809      	ldrh	r1, [r1, #0]
100122cc:	1ddd      	adds	r5, r3, #7
100122ce:	0a09      	lsrs	r1, r1, #8
100122d0:	2300      	movs	r3, #0
100122d2:	2202      	movs	r2, #2
100122d4:	7141      	strb	r1, [r0, #5]
100122d6:	26d0      	movs	r6, #208	; 0xd0
100122d8:	2101      	movs	r1, #1
100122da:	7104      	strb	r4, [r0, #4]
100122dc:	4c11      	ldr	r4, [pc, #68]	; (10012324 <gapm_reset_req_handler+0x64>)
100122de:	702b      	strb	r3, [r5, #0]
100122e0:	7002      	strb	r2, [r0, #0]
100122e2:	70c3      	strb	r3, [r0, #3]
100122e4:	320b      	adds	r2, #11
100122e6:	7201      	strb	r1, [r0, #8]
100122e8:	7181      	strb	r1, [r0, #6]
100122ea:	71c3      	strb	r3, [r0, #7]
100122ec:	3108      	adds	r1, #8
100122ee:	4b0e      	ldr	r3, [pc, #56]	; (10012328 <gapm_reset_req_handler+0x68>)
100122f0:	0136      	lsls	r6, r6, #4
100122f2:	7042      	strb	r2, [r0, #1]
100122f4:	7082      	strb	r2, [r0, #2]
100122f6:	80a2      	strh	r2, [r4, #4]
100122f8:	8026      	strh	r6, [r4, #0]
100122fa:	4798      	blx	r3
100122fc:	1c28      	adds	r0, r5, #0
100122fe:	4b0b      	ldr	r3, [pc, #44]	; (1001232c <gapm_reset_req_handler+0x6c>)
10012300:	4798      	blx	r3
10012302:	782b      	ldrb	r3, [r5, #0]
10012304:	20e2      	movs	r0, #226	; 0xe2
10012306:	2b00      	cmp	r3, #0
10012308:	d106      	bne.n	10012318 <gapm_reset_req_handler+0x58>
1001230a:	68a3      	ldr	r3, [r4, #8]
1001230c:	20e2      	movs	r0, #226	; 0xe2
1001230e:	781a      	ldrb	r2, [r3, #0]
10012310:	785b      	ldrb	r3, [r3, #1]
10012312:	2a01      	cmp	r2, #1
10012314:	d100      	bne.n	10012318 <gapm_reset_req_handler+0x58>
10012316:	1c18      	adds	r0, r3, #0
10012318:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
1001231a:	46c0      	nop			; (mov r8, r8)
1001231c:	1001adbc 	.word	0x1001adbc
10012320:	1001b12c 	.word	0x1001b12c
10012324:	1001adb0 	.word	0x1001adb0
10012328:	100116e9 	.word	0x100116e9
1001232c:	1001174d 	.word	0x1001174d

10012330 <gapm_set_dev_config_cmd_handler>:
10012330:	b5f0      	push	{r4, r5, r6, r7, lr}
10012332:	b089      	sub	sp, #36	; 0x24
10012334:	9303      	str	r3, [sp, #12]
10012336:	ab0e      	add	r3, sp, #56	; 0x38
10012338:	781b      	ldrb	r3, [r3, #0]
1001233a:	4c37      	ldr	r4, [pc, #220]	; (10012418 <gapm_set_dev_config_cmd_handler+0xe8>)
1001233c:	9304      	str	r3, [sp, #16]
1001233e:	ab0f      	add	r3, sp, #60	; 0x3c
10012340:	781b      	ldrb	r3, [r3, #0]
10012342:	270d      	movs	r7, #13
10012344:	9305      	str	r3, [sp, #20]
10012346:	ab10      	add	r3, sp, #64	; 0x40
10012348:	881b      	ldrh	r3, [r3, #0]
1001234a:	72a1      	strb	r1, [r4, #10]
1001234c:	9300      	str	r3, [sp, #0]
1001234e:	ab11      	add	r3, sp, #68	; 0x44
10012350:	881b      	ldrh	r3, [r3, #0]
10012352:	0a09      	lsrs	r1, r1, #8
10012354:	9301      	str	r3, [sp, #4]
10012356:	ab12      	add	r3, sp, #72	; 0x48
10012358:	881b      	ldrh	r3, [r3, #0]
1001235a:	7260      	strb	r0, [r4, #9]
1001235c:	9302      	str	r3, [sp, #8]
1001235e:	ab06      	add	r3, sp, #24
10012360:	1dde      	adds	r6, r3, #7
10012362:	2300      	movs	r3, #0
10012364:	7033      	strb	r3, [r6, #0]
10012366:	2304      	movs	r3, #4
10012368:	7023      	strb	r3, [r4, #0]
1001236a:	2300      	movs	r3, #0
1001236c:	70e3      	strb	r3, [r4, #3]
1001236e:	4b2b      	ldr	r3, [pc, #172]	; (1001241c <gapm_set_dev_config_cmd_handler+0xec>)
10012370:	72e1      	strb	r1, [r4, #11]
10012372:	881d      	ldrh	r5, [r3, #0]
10012374:	881b      	ldrh	r3, [r3, #0]
10012376:	1c11      	adds	r1, r2, #0
10012378:	0a1b      	lsrs	r3, r3, #8
1001237a:	7163      	strb	r3, [r4, #5]
1001237c:	2303      	movs	r3, #3
1001237e:	7125      	strb	r5, [r4, #4]
10012380:	2206      	movs	r2, #6
10012382:	4d27      	ldr	r5, [pc, #156]	; (10012420 <gapm_set_dev_config_cmd_handler+0xf0>)
10012384:	4827      	ldr	r0, [pc, #156]	; (10012424 <gapm_set_dev_config_cmd_handler+0xf4>)
10012386:	7223      	strb	r3, [r4, #8]
10012388:	7067      	strb	r7, [r4, #1]
1001238a:	70a7      	strb	r7, [r4, #2]
1001238c:	47a8      	blx	r5
1001238e:	9903      	ldr	r1, [sp, #12]
10012390:	2210      	movs	r2, #16
10012392:	4825      	ldr	r0, [pc, #148]	; (10012428 <gapm_set_dev_config_cmd_handler+0xf8>)
10012394:	47a8      	blx	r5
10012396:	466a      	mov	r2, sp
10012398:	7c12      	ldrb	r2, [r2, #16]
1001239a:	1ce3      	adds	r3, r4, #3
1001239c:	77da      	strb	r2, [r3, #31]
1001239e:	466a      	mov	r2, sp
100123a0:	7d12      	ldrb	r2, [r2, #20]
100123a2:	1d23      	adds	r3, r4, #4
100123a4:	77da      	strb	r2, [r3, #31]
100123a6:	466a      	mov	r2, sp
100123a8:	7812      	ldrb	r2, [r2, #0]
100123aa:	1d63      	adds	r3, r4, #5
100123ac:	77da      	strb	r2, [r3, #31]
100123ae:	9b00      	ldr	r3, [sp, #0]
100123b0:	1da2      	adds	r2, r4, #6
100123b2:	0a1b      	lsrs	r3, r3, #8
100123b4:	77d3      	strb	r3, [r2, #31]
100123b6:	466a      	mov	r2, sp
100123b8:	7912      	ldrb	r2, [r2, #4]
100123ba:	1de3      	adds	r3, r4, #7
100123bc:	77da      	strb	r2, [r3, #31]
100123be:	1c22      	adds	r2, r4, #0
100123c0:	9b01      	ldr	r3, [sp, #4]
100123c2:	3208      	adds	r2, #8
100123c4:	0a1b      	lsrs	r3, r3, #8
100123c6:	77d3      	strb	r3, [r2, #31]
100123c8:	466a      	mov	r2, sp
100123ca:	1c23      	adds	r3, r4, #0
100123cc:	7a12      	ldrb	r2, [r2, #8]
100123ce:	3328      	adds	r3, #40	; 0x28
100123d0:	701a      	strb	r2, [r3, #0]
100123d2:	1c22      	adds	r2, r4, #0
100123d4:	9b02      	ldr	r3, [sp, #8]
100123d6:	3229      	adds	r2, #41	; 0x29
100123d8:	0a1b      	lsrs	r3, r3, #8
100123da:	7013      	strb	r3, [r2, #0]
100123dc:	23d0      	movs	r3, #208	; 0xd0
100123de:	4d13      	ldr	r5, [pc, #76]	; (1001242c <gapm_set_dev_config_cmd_handler+0xfc>)
100123e0:	011b      	lsls	r3, r3, #4
100123e2:	802b      	strh	r3, [r5, #0]
100123e4:	2322      	movs	r3, #34	; 0x22
100123e6:	71a3      	strb	r3, [r4, #6]
100123e8:	2300      	movs	r3, #0
100123ea:	212a      	movs	r1, #42	; 0x2a
100123ec:	71e3      	strb	r3, [r4, #7]
100123ee:	1c20      	adds	r0, r4, #0
100123f0:	4b0f      	ldr	r3, [pc, #60]	; (10012430 <gapm_set_dev_config_cmd_handler+0x100>)
100123f2:	80af      	strh	r7, [r5, #4]
100123f4:	4798      	blx	r3
100123f6:	1c30      	adds	r0, r6, #0
100123f8:	4b0e      	ldr	r3, [pc, #56]	; (10012434 <gapm_set_dev_config_cmd_handler+0x104>)
100123fa:	4798      	blx	r3
100123fc:	7833      	ldrb	r3, [r6, #0]
100123fe:	20e2      	movs	r0, #226	; 0xe2
10012400:	2b00      	cmp	r3, #0
10012402:	d106      	bne.n	10012412 <gapm_set_dev_config_cmd_handler+0xe2>
10012404:	68ab      	ldr	r3, [r5, #8]
10012406:	20e2      	movs	r0, #226	; 0xe2
10012408:	781a      	ldrb	r2, [r3, #0]
1001240a:	785b      	ldrb	r3, [r3, #1]
1001240c:	2a03      	cmp	r2, #3
1001240e:	d100      	bne.n	10012412 <gapm_set_dev_config_cmd_handler+0xe2>
10012410:	1c18      	adds	r0, r3, #0
10012412:	b009      	add	sp, #36	; 0x24
10012414:	bdf0      	pop	{r4, r5, r6, r7, pc}
10012416:	46c0      	nop			; (mov r8, r8)
10012418:	1001b12c 	.word	0x1001b12c
1001241c:	1001adbc 	.word	0x1001adbc
10012420:	1001517f 	.word	0x1001517f
10012424:	1001b138 	.word	0x1001b138
10012428:	1001b13e 	.word	0x1001b13e
1001242c:	1001adb0 	.word	0x1001adb0
10012430:	100116e9 	.word	0x100116e9
10012434:	1001174d 	.word	0x1001174d

10012438 <gapm_get_dev_config_cmd_handler>:
10012438:	4684      	mov	ip, r0
1001243a:	4663      	mov	r3, ip
1001243c:	b5f0      	push	{r4, r5, r6, r7, lr}
1001243e:	b085      	sub	sp, #20
10012440:	9100      	str	r1, [sp, #0]
10012442:	20cf      	movs	r0, #207	; 0xcf
10012444:	2b01      	cmp	r3, #1
10012446:	d854      	bhi.n	100124f2 <gapm_get_dev_config_cmd_handler+0xba>
10012448:	2900      	cmp	r1, #0
1001244a:	d052      	beq.n	100124f2 <gapm_get_dev_config_cmd_handler+0xba>
1001244c:	2200      	movs	r2, #0
1001244e:	492a      	ldr	r1, [pc, #168]	; (100124f8 <gapm_get_dev_config_cmd_handler+0xc0>)
10012450:	ab02      	add	r3, sp, #8
10012452:	880c      	ldrh	r4, [r1, #0]
10012454:	8809      	ldrh	r1, [r1, #0]
10012456:	1d9f      	adds	r7, r3, #6
10012458:	719a      	strb	r2, [r3, #6]
1001245a:	4b28      	ldr	r3, [pc, #160]	; (100124fc <gapm_get_dev_config_cmd_handler+0xc4>)
1001245c:	0a09      	lsrs	r1, r1, #8
1001245e:	250d      	movs	r5, #13
10012460:	2606      	movs	r6, #6
10012462:	7159      	strb	r1, [r3, #5]
10012464:	4661      	mov	r1, ip
10012466:	701e      	strb	r6, [r3, #0]
10012468:	705d      	strb	r5, [r3, #1]
1001246a:	709d      	strb	r5, [r3, #2]
1001246c:	70da      	strb	r2, [r3, #3]
1001246e:	711c      	strb	r4, [r3, #4]
10012470:	2901      	cmp	r1, #1
10012472:	d13e      	bne.n	100124f2 <gapm_get_dev_config_cmd_handler+0xba>
10012474:	21d0      	movs	r1, #208	; 0xd0
10012476:	4c22      	ldr	r4, [pc, #136]	; (10012500 <gapm_get_dev_config_cmd_handler+0xc8>)
10012478:	0109      	lsls	r1, r1, #4
1001247a:	8061      	strh	r1, [r4, #2]
1001247c:	4921      	ldr	r1, [pc, #132]	; (10012504 <gapm_get_dev_config_cmd_handler+0xcc>)
1001247e:	71da      	strb	r2, [r3, #7]
10012480:	8021      	strh	r1, [r4, #0]
10012482:	4661      	mov	r1, ip
10012484:	721e      	strb	r6, [r3, #8]
10012486:	7199      	strb	r1, [r3, #6]
10012488:	1c18      	adds	r0, r3, #0
1001248a:	2109      	movs	r1, #9
1001248c:	4b1e      	ldr	r3, [pc, #120]	; (10012508 <gapm_get_dev_config_cmd_handler+0xd0>)
1001248e:	80a5      	strh	r5, [r4, #4]
10012490:	4798      	blx	r3
10012492:	1c38      	adds	r0, r7, #0
10012494:	4b1d      	ldr	r3, [pc, #116]	; (1001250c <gapm_get_dev_config_cmd_handler+0xd4>)
10012496:	4798      	blx	r3
10012498:	783b      	ldrb	r3, [r7, #0]
1001249a:	20e2      	movs	r0, #226	; 0xe2
1001249c:	9301      	str	r3, [sp, #4]
1001249e:	2b00      	cmp	r3, #0
100124a0:	d127      	bne.n	100124f2 <gapm_get_dev_config_cmd_handler+0xba>
100124a2:	8821      	ldrh	r1, [r4, #0]
100124a4:	4a1a      	ldr	r2, [pc, #104]	; (10012510 <gapm_get_dev_config_cmd_handler+0xd8>)
100124a6:	68a7      	ldr	r7, [r4, #8]
100124a8:	3b01      	subs	r3, #1
100124aa:	4291      	cmp	r1, r2
100124ac:	d001      	beq.n	100124b2 <gapm_get_dev_config_cmd_handler+0x7a>
100124ae:	8023      	strh	r3, [r4, #0]
100124b0:	e01a      	b.n	100124e8 <gapm_get_dev_config_cmd_handler+0xb0>
100124b2:	8063      	strh	r3, [r4, #2]
100124b4:	9b00      	ldr	r3, [sp, #0]
100124b6:	1c39      	adds	r1, r7, #0
100124b8:	1c58      	adds	r0, r3, #1
100124ba:	1c32      	adds	r2, r6, #0
100124bc:	4b15      	ldr	r3, [pc, #84]	; (10012514 <gapm_get_dev_config_cmd_handler+0xdc>)
100124be:	4798      	blx	r3
100124c0:	79bb      	ldrb	r3, [r7, #6]
100124c2:	9a00      	ldr	r2, [sp, #0]
100124c4:	7013      	strb	r3, [r2, #0]
100124c6:	23d0      	movs	r3, #208	; 0xd0
100124c8:	011b      	lsls	r3, r3, #4
100124ca:	8023      	strh	r3, [r4, #0]
100124cc:	ab02      	add	r3, sp, #8
100124ce:	80a5      	strh	r5, [r4, #4]
100124d0:	1ddd      	adds	r5, r3, #7
100124d2:	466b      	mov	r3, sp
100124d4:	791b      	ldrb	r3, [r3, #4]
100124d6:	1c28      	adds	r0, r5, #0
100124d8:	702b      	strb	r3, [r5, #0]
100124da:	4b0c      	ldr	r3, [pc, #48]	; (1001250c <gapm_get_dev_config_cmd_handler+0xd4>)
100124dc:	4798      	blx	r3
100124de:	782b      	ldrb	r3, [r5, #0]
100124e0:	20d0      	movs	r0, #208	; 0xd0
100124e2:	2b00      	cmp	r3, #0
100124e4:	d105      	bne.n	100124f2 <gapm_get_dev_config_cmd_handler+0xba>
100124e6:	68a7      	ldr	r7, [r4, #8]
100124e8:	783b      	ldrb	r3, [r7, #0]
100124ea:	7878      	ldrb	r0, [r7, #1]
100124ec:	2b06      	cmp	r3, #6
100124ee:	d000      	beq.n	100124f2 <gapm_get_dev_config_cmd_handler+0xba>
100124f0:	20e2      	movs	r0, #226	; 0xe2
100124f2:	b005      	add	sp, #20
100124f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
100124f6:	46c0      	nop			; (mov r8, r8)
100124f8:	1001adbc 	.word	0x1001adbc
100124fc:	1001b12c 	.word	0x1001b12c
10012500:	1001adb0 	.word	0x1001adb0
10012504:	00000d08 	.word	0x00000d08
10012508:	100116e9 	.word	0x100116e9
1001250c:	1001174d 	.word	0x1001174d
10012510:	0000ffff 	.word	0x0000ffff
10012514:	1001517f 	.word	0x1001517f

10012518 <gapm_cancel_cmd_handler>:
10012518:	b537      	push	{r0, r1, r2, r4, r5, lr}
1001251a:	4916      	ldr	r1, [pc, #88]	; (10012574 <gapm_cancel_cmd_handler+0x5c>)
1001251c:	4816      	ldr	r0, [pc, #88]	; (10012578 <gapm_cancel_cmd_handler+0x60>)
1001251e:	880c      	ldrh	r4, [r1, #0]
10012520:	8809      	ldrh	r1, [r1, #0]
10012522:	466b      	mov	r3, sp
10012524:	0a09      	lsrs	r1, r1, #8
10012526:	7141      	strb	r1, [r0, #5]
10012528:	2102      	movs	r1, #2
1001252a:	2203      	movs	r2, #3
1001252c:	7201      	strb	r1, [r0, #8]
1001252e:	21d0      	movs	r1, #208	; 0xd0
10012530:	1ddd      	adds	r5, r3, #7
10012532:	2300      	movs	r3, #0
10012534:	7104      	strb	r4, [r0, #4]
10012536:	4c11      	ldr	r4, [pc, #68]	; (1001257c <gapm_cancel_cmd_handler+0x64>)
10012538:	7002      	strb	r2, [r0, #0]
1001253a:	0109      	lsls	r1, r1, #4
1001253c:	320a      	adds	r2, #10
1001253e:	702b      	strb	r3, [r5, #0]
10012540:	7042      	strb	r2, [r0, #1]
10012542:	7082      	strb	r2, [r0, #2]
10012544:	70c3      	strb	r3, [r0, #3]
10012546:	8021      	strh	r1, [r4, #0]
10012548:	80a2      	strh	r2, [r4, #4]
1001254a:	71c3      	strb	r3, [r0, #7]
1001254c:	3a0c      	subs	r2, #12
1001254e:	2109      	movs	r1, #9
10012550:	4b0b      	ldr	r3, [pc, #44]	; (10012580 <gapm_cancel_cmd_handler+0x68>)
10012552:	7182      	strb	r2, [r0, #6]
10012554:	4798      	blx	r3
10012556:	1c28      	adds	r0, r5, #0
10012558:	4b0a      	ldr	r3, [pc, #40]	; (10012584 <gapm_cancel_cmd_handler+0x6c>)
1001255a:	4798      	blx	r3
1001255c:	7828      	ldrb	r0, [r5, #0]
1001255e:	2800      	cmp	r0, #0
10012560:	d001      	beq.n	10012566 <gapm_cancel_cmd_handler+0x4e>
10012562:	20e2      	movs	r0, #226	; 0xe2
10012564:	e004      	b.n	10012570 <gapm_cancel_cmd_handler+0x58>
10012566:	68a3      	ldr	r3, [r4, #8]
10012568:	785b      	ldrb	r3, [r3, #1]
1001256a:	2b44      	cmp	r3, #68	; 0x44
1001256c:	d000      	beq.n	10012570 <gapm_cancel_cmd_handler+0x58>
1001256e:	1c18      	adds	r0, r3, #0
10012570:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
10012572:	46c0      	nop			; (mov r8, r8)
10012574:	1001adbc 	.word	0x1001adbc
10012578:	1001b12c 	.word	0x1001b12c
1001257c:	1001adb0 	.word	0x1001adb0
10012580:	100116e9 	.word	0x100116e9
10012584:	1001174d 	.word	0x1001174d

10012588 <gapm_dev_bdaddr_ind_handler>:
10012588:	b538      	push	{r3, r4, r5, lr}
1001258a:	1c05      	adds	r5, r0, #0
1001258c:	1c0c      	adds	r4, r1, #0
1001258e:	1c48      	adds	r0, r1, #1
10012590:	2206      	movs	r2, #6
10012592:	1c29      	adds	r1, r5, #0
10012594:	4b02      	ldr	r3, [pc, #8]	; (100125a0 <gapm_dev_bdaddr_ind_handler+0x18>)
10012596:	4798      	blx	r3
10012598:	79ab      	ldrb	r3, [r5, #6]
1001259a:	2000      	movs	r0, #0
1001259c:	7023      	strb	r3, [r4, #0]
1001259e:	bd38      	pop	{r3, r4, r5, pc}
100125a0:	1001517f 	.word	0x1001517f

100125a4 <gapm_cmp_evt>:
100125a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
100125a6:	7803      	ldrb	r3, [r0, #0]
100125a8:	7845      	ldrb	r5, [r0, #1]
100125aa:	3b0c      	subs	r3, #12
100125ac:	1e18      	subs	r0, r3, #0
100125ae:	280b      	cmp	r0, #11
100125b0:	d900      	bls.n	100125b4 <gapm_cmp_evt+0x10>
100125b2:	e08d      	b.n	100126d0 <gapm_cmp_evt+0x12c>
100125b4:	1c0c      	adds	r4, r1, #0
100125b6:	f000 fd5f 	bl	10013078 <__gnu_thumb1_case_uqi>
100125ba:	1952      	.short	0x1952
100125bc:	068b1919 	.word	0x068b1919
100125c0:	8b595906 	.word	0x8b595906
100125c4:	0d8b      	.short	0x0d8b
100125c6:	2300      	movs	r3, #0
100125c8:	2d45      	cmp	r5, #69	; 0x45
100125ca:	d000      	beq.n	100125ce <gapm_cmp_evt+0x2a>
100125cc:	1c2b      	adds	r3, r5, #0
100125ce:	7023      	strb	r3, [r4, #0]
100125d0:	2002      	movs	r0, #2
100125d2:	e07e      	b.n	100126d2 <gapm_cmp_evt+0x12e>
100125d4:	203b      	movs	r0, #59	; 0x3b
100125d6:	2d00      	cmp	r5, #0
100125d8:	d100      	bne.n	100125dc <gapm_cmp_evt+0x38>
100125da:	e07a      	b.n	100126d2 <gapm_cmp_evt+0x12e>
100125dc:	700d      	strb	r5, [r1, #0]
100125de:	1c48      	adds	r0, r1, #1
100125e0:	2210      	movs	r2, #16
100125e2:	2100      	movs	r1, #0
100125e4:	4b3b      	ldr	r3, [pc, #236]	; (100126d4 <gapm_cmp_evt+0x130>)
100125e6:	4798      	blx	r3
100125e8:	200f      	movs	r0, #15
100125ea:	e072      	b.n	100126d2 <gapm_cmp_evt+0x12e>
100125ec:	2d00      	cmp	r5, #0
100125ee:	d134      	bne.n	1001265a <gapm_cmp_evt+0xb6>
100125f0:	4b39      	ldr	r3, [pc, #228]	; (100126d8 <gapm_cmp_evt+0x134>)
100125f2:	4798      	blx	r3
100125f4:	1e43      	subs	r3, r0, #1
100125f6:	b2db      	uxtb	r3, r3
100125f8:	1c28      	adds	r0, r5, #0
100125fa:	2b06      	cmp	r3, #6
100125fc:	d869      	bhi.n	100126d2 <gapm_cmp_evt+0x12e>
100125fe:	466b      	mov	r3, sp
10012600:	4e36      	ldr	r6, [pc, #216]	; (100126dc <gapm_cmp_evt+0x138>)
10012602:	1dd9      	adds	r1, r3, #7
10012604:	8db0      	ldrh	r0, [r6, #44]	; 0x2c
10012606:	4b36      	ldr	r3, [pc, #216]	; (100126e0 <gapm_cmp_evt+0x13c>)
10012608:	4798      	blx	r3
1001260a:	2312      	movs	r3, #18
1001260c:	4358      	muls	r0, r3
1001260e:	4935      	ldr	r1, [pc, #212]	; (100126e4 <gapm_cmp_evt+0x140>)
10012610:	1809      	adds	r1, r1, r0
10012612:	1c0b      	adds	r3, r1, #0
10012614:	894a      	ldrh	r2, [r1, #10]
10012616:	3308      	adds	r3, #8
10012618:	8122      	strh	r2, [r4, #8]
1001261a:	784f      	ldrb	r7, [r1, #1]
1001261c:	72a5      	strb	r5, [r4, #10]
1001261e:	7027      	strb	r7, [r4, #0]
10012620:	898a      	ldrh	r2, [r1, #12]
10012622:	1c60      	adds	r0, r4, #1
10012624:	81a2      	strh	r2, [r4, #12]
10012626:	88db      	ldrh	r3, [r3, #6]
10012628:	3102      	adds	r1, #2
1001262a:	81e3      	strh	r3, [r4, #14]
1001262c:	89cb      	ldrh	r3, [r1, #14]
1001262e:	2206      	movs	r2, #6
10012630:	8223      	strh	r3, [r4, #16]
10012632:	4b2d      	ldr	r3, [pc, #180]	; (100126e8 <gapm_cmp_evt+0x144>)
10012634:	4798      	blx	r3
10012636:	2f00      	cmp	r7, #0
10012638:	d00a      	beq.n	10012650 <gapm_cmp_evt+0xac>
1001263a:	79a3      	ldrb	r3, [r4, #6]
1001263c:	223f      	movs	r2, #63	; 0x3f
1001263e:	1c19      	adds	r1, r3, #0
10012640:	3501      	adds	r5, #1
10012642:	4391      	bics	r1, r2
10012644:	29c0      	cmp	r1, #192	; 0xc0
10012646:	d003      	beq.n	10012650 <gapm_cmp_evt+0xac>
10012648:	065b      	lsls	r3, r3, #25
1001264a:	0fdb      	lsrs	r3, r3, #31
1001264c:	3502      	adds	r5, #2
1001264e:	1aed      	subs	r5, r5, r3
10012650:	2301      	movs	r3, #1
10012652:	425b      	negs	r3, r3
10012654:	7025      	strb	r5, [r4, #0]
10012656:	85b3      	strh	r3, [r6, #44]	; 0x2c
10012658:	e038      	b.n	100126cc <gapm_cmp_evt+0x128>
1001265a:	700d      	strb	r5, [r1, #0]
1001265c:	e004      	b.n	10012668 <gapm_cmp_evt+0xc4>
1001265e:	2300      	movs	r3, #0
10012660:	2d45      	cmp	r5, #69	; 0x45
10012662:	d000      	beq.n	10012666 <gapm_cmp_evt+0xc2>
10012664:	1c2b      	adds	r3, r5, #0
10012666:	7023      	strb	r3, [r4, #0]
10012668:	2003      	movs	r0, #3
1001266a:	e032      	b.n	100126d2 <gapm_cmp_evt+0x12e>
1001266c:	4e1b      	ldr	r6, [pc, #108]	; (100126dc <gapm_cmp_evt+0x138>)
1001266e:	2100      	movs	r1, #0
10012670:	8db0      	ldrh	r0, [r6, #44]	; 0x2c
10012672:	4b1b      	ldr	r3, [pc, #108]	; (100126e0 <gapm_cmp_evt+0x13c>)
10012674:	4798      	blx	r3
10012676:	2807      	cmp	r0, #7
10012678:	d818      	bhi.n	100126ac <gapm_cmp_evt+0x108>
1001267a:	2301      	movs	r3, #1
1001267c:	425b      	negs	r3, r3
1001267e:	85b3      	strh	r3, [r6, #44]	; 0x2c
10012680:	3313      	adds	r3, #19
10012682:	4358      	muls	r0, r3
10012684:	4917      	ldr	r1, [pc, #92]	; (100126e4 <gapm_cmp_evt+0x140>)
10012686:	1809      	adds	r1, r1, r0
10012688:	1c0b      	adds	r3, r1, #0
1001268a:	894a      	ldrh	r2, [r1, #10]
1001268c:	3308      	adds	r3, #8
1001268e:	8122      	strh	r2, [r4, #8]
10012690:	784a      	ldrb	r2, [r1, #1]
10012692:	72a5      	strb	r5, [r4, #10]
10012694:	7022      	strb	r2, [r4, #0]
10012696:	898a      	ldrh	r2, [r1, #12]
10012698:	1c60      	adds	r0, r4, #1
1001269a:	81a2      	strh	r2, [r4, #12]
1001269c:	88db      	ldrh	r3, [r3, #6]
1001269e:	3102      	adds	r1, #2
100126a0:	81e3      	strh	r3, [r4, #14]
100126a2:	89cb      	ldrh	r3, [r1, #14]
100126a4:	2206      	movs	r2, #6
100126a6:	8223      	strh	r3, [r4, #16]
100126a8:	4b0f      	ldr	r3, [pc, #60]	; (100126e8 <gapm_cmp_evt+0x144>)
100126aa:	4798      	blx	r3
100126ac:	2200      	movs	r2, #0
100126ae:	7823      	ldrb	r3, [r4, #0]
100126b0:	4293      	cmp	r3, r2
100126b2:	d00a      	beq.n	100126ca <gapm_cmp_evt+0x126>
100126b4:	79a3      	ldrb	r3, [r4, #6]
100126b6:	323f      	adds	r2, #63	; 0x3f
100126b8:	1c19      	adds	r1, r3, #0
100126ba:	4391      	bics	r1, r2
100126bc:	3a3e      	subs	r2, #62	; 0x3e
100126be:	29c0      	cmp	r1, #192	; 0xc0
100126c0:	d003      	beq.n	100126ca <gapm_cmp_evt+0x126>
100126c2:	065b      	lsls	r3, r3, #25
100126c4:	0fdb      	lsrs	r3, r3, #31
100126c6:	3202      	adds	r2, #2
100126c8:	1ad2      	subs	r2, r2, r3
100126ca:	7022      	strb	r2, [r4, #0]
100126cc:	2005      	movs	r0, #5
100126ce:	e000      	b.n	100126d2 <gapm_cmp_evt+0x12e>
100126d0:	2000      	movs	r0, #0
100126d2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
100126d4:	10015191 	.word	0x10015191
100126d8:	100118f5 	.word	0x100118f5
100126dc:	1001ae4e 	.word	0x1001ae4e
100126e0:	100118b9 	.word	0x100118b9
100126e4:	1001adbe 	.word	0x1001adbe
100126e8:	1001517f 	.word	0x1001517f

100126ec <gapm_start_adv_cmd_handler>:
100126ec:	b5f0      	push	{r4, r5, r6, r7, lr}
100126ee:	b089      	sub	sp, #36	; 0x24
100126f0:	9303      	str	r3, [sp, #12]
100126f2:	ab0e      	add	r3, sp, #56	; 0x38
100126f4:	9102      	str	r1, [sp, #8]
100126f6:	cb02      	ldmia	r3!, {r1}
100126f8:	aa08      	add	r2, sp, #32
100126fa:	881b      	ldrh	r3, [r3, #0]
100126fc:	4e3c      	ldr	r6, [pc, #240]	; (100127f0 <gapm_start_adv_cmd_handler+0x104>)
100126fe:	9300      	str	r3, [sp, #0]
10012700:	ab10      	add	r3, sp, #64	; 0x40
10012702:	881b      	ldrh	r3, [r3, #0]
10012704:	240d      	movs	r4, #13
10012706:	469c      	mov	ip, r3
10012708:	ab11      	add	r3, sp, #68	; 0x44
1001270a:	781b      	ldrb	r3, [r3, #0]
1001270c:	9304      	str	r3, [sp, #16]
1001270e:	ab12      	add	r3, sp, #72	; 0x48
10012710:	781b      	ldrb	r3, [r3, #0]
10012712:	9305      	str	r3, [sp, #20]
10012714:	ab13      	add	r3, sp, #76	; 0x4c
10012716:	781b      	ldrb	r3, [r3, #0]
10012718:	9306      	str	r3, [sp, #24]
1001271a:	ab14      	add	r3, sp, #80	; 0x50
1001271c:	781b      	ldrb	r3, [r3, #0]
1001271e:	9301      	str	r3, [sp, #4]
10012720:	2319      	movs	r3, #25
10012722:	189b      	adds	r3, r3, r2
10012724:	7fdd      	ldrb	r5, [r3, #31]
10012726:	ab18      	add	r3, sp, #96	; 0x60
10012728:	881f      	ldrh	r7, [r3, #0]
1001272a:	ab19      	add	r3, sp, #100	; 0x64
1001272c:	781b      	ldrb	r3, [r3, #0]
1001272e:	8832      	ldrh	r2, [r6, #0]
10012730:	9307      	str	r3, [sp, #28]
10012732:	4b30      	ldr	r3, [pc, #192]	; (100127f4 <gapm_start_adv_cmd_handler+0x108>)
10012734:	8836      	ldrh	r6, [r6, #0]
10012736:	711a      	strb	r2, [r3, #4]
10012738:	466a      	mov	r2, sp
1001273a:	7a12      	ldrb	r2, [r2, #8]
1001273c:	701c      	strb	r4, [r3, #0]
1001273e:	705c      	strb	r4, [r3, #1]
10012740:	709c      	strb	r4, [r3, #2]
10012742:	725a      	strb	r2, [r3, #9]
10012744:	2400      	movs	r4, #0
10012746:	466a      	mov	r2, sp
10012748:	0a36      	lsrs	r6, r6, #8
1001274a:	70dc      	strb	r4, [r3, #3]
1001274c:	7218      	strb	r0, [r3, #8]
1001274e:	729c      	strb	r4, [r3, #10]
10012750:	715e      	strb	r6, [r3, #5]
10012752:	72dc      	strb	r4, [r3, #11]
10012754:	7812      	ldrb	r2, [r2, #0]
10012756:	380e      	subs	r0, #14
10012758:	731a      	strb	r2, [r3, #12]
1001275a:	9a00      	ldr	r2, [sp, #0]
1001275c:	0a14      	lsrs	r4, r2, #8
1001275e:	4662      	mov	r2, ip
10012760:	739a      	strb	r2, [r3, #14]
10012762:	4662      	mov	r2, ip
10012764:	735c      	strb	r4, [r3, #13]
10012766:	0a14      	lsrs	r4, r2, #8
10012768:	466a      	mov	r2, sp
1001276a:	7c12      	ldrb	r2, [r2, #16]
1001276c:	73dc      	strb	r4, [r3, #15]
1001276e:	741a      	strb	r2, [r3, #16]
10012770:	1c1c      	adds	r4, r3, #0
10012772:	2801      	cmp	r0, #1
10012774:	d809      	bhi.n	1001278a <gapm_start_adv_cmd_handler+0x9e>
10012776:	2900      	cmp	r1, #0
10012778:	d003      	beq.n	10012782 <gapm_start_adv_cmd_handler+0x96>
1001277a:	481f      	ldr	r0, [pc, #124]	; (100127f8 <gapm_start_adv_cmd_handler+0x10c>)
1001277c:	2206      	movs	r2, #6
1001277e:	4b1f      	ldr	r3, [pc, #124]	; (100127fc <gapm_start_adv_cmd_handler+0x110>)
10012780:	4798      	blx	r3
10012782:	466b      	mov	r3, sp
10012784:	7b1b      	ldrb	r3, [r3, #12]
10012786:	75e3      	strb	r3, [r4, #23]
10012788:	e014      	b.n	100127b4 <gapm_start_adv_cmd_handler+0xc8>
1001278a:	466b      	mov	r3, sp
1001278c:	7d1b      	ldrb	r3, [r3, #20]
1001278e:	9915      	ldr	r1, [sp, #84]	; 0x54
10012790:	7463      	strb	r3, [r4, #17]
10012792:	466b      	mov	r3, sp
10012794:	7e1b      	ldrb	r3, [r3, #24]
10012796:	9a01      	ldr	r2, [sp, #4]
10012798:	74a3      	strb	r3, [r4, #18]
1001279a:	466b      	mov	r3, sp
1001279c:	791b      	ldrb	r3, [r3, #4]
1001279e:	4818      	ldr	r0, [pc, #96]	; (10012800 <gapm_start_adv_cmd_handler+0x114>)
100127a0:	4e16      	ldr	r6, [pc, #88]	; (100127fc <gapm_start_adv_cmd_handler+0x110>)
100127a2:	74e3      	strb	r3, [r4, #19]
100127a4:	47b0      	blx	r6
100127a6:	1c23      	adds	r3, r4, #0
100127a8:	4816      	ldr	r0, [pc, #88]	; (10012804 <gapm_start_adv_cmd_handler+0x118>)
100127aa:	3330      	adds	r3, #48	; 0x30
100127ac:	9917      	ldr	r1, [sp, #92]	; 0x5c
100127ae:	1c2a      	adds	r2, r5, #0
100127b0:	701d      	strb	r5, [r3, #0]
100127b2:	47b0      	blx	r6
100127b4:	1c22      	adds	r2, r4, #0
100127b6:	23a5      	movs	r3, #165	; 0xa5
100127b8:	3250      	adds	r2, #80	; 0x50
100127ba:	7013      	strb	r3, [r2, #0]
100127bc:	1c22      	adds	r2, r4, #0
100127be:	3251      	adds	r2, #81	; 0x51
100127c0:	7013      	strb	r3, [r2, #0]
100127c2:	1c23      	adds	r3, r4, #0
100127c4:	1c22      	adds	r2, r4, #0
100127c6:	3352      	adds	r3, #82	; 0x52
100127c8:	701f      	strb	r7, [r3, #0]
100127ca:	3253      	adds	r2, #83	; 0x53
100127cc:	0a3b      	lsrs	r3, r7, #8
100127ce:	7013      	strb	r3, [r2, #0]
100127d0:	466a      	mov	r2, sp
100127d2:	1c23      	adds	r3, r4, #0
100127d4:	7f12      	ldrb	r2, [r2, #28]
100127d6:	3354      	adds	r3, #84	; 0x54
100127d8:	701a      	strb	r2, [r3, #0]
100127da:	234d      	movs	r3, #77	; 0x4d
100127dc:	2500      	movs	r5, #0
100127de:	71a3      	strb	r3, [r4, #6]
100127e0:	1c20      	adds	r0, r4, #0
100127e2:	2155      	movs	r1, #85	; 0x55
100127e4:	4b08      	ldr	r3, [pc, #32]	; (10012808 <gapm_start_adv_cmd_handler+0x11c>)
100127e6:	71e5      	strb	r5, [r4, #7]
100127e8:	4798      	blx	r3
100127ea:	1c28      	adds	r0, r5, #0
100127ec:	b009      	add	sp, #36	; 0x24
100127ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
100127f0:	1001adbc 	.word	0x1001adbc
100127f4:	1001b12c 	.word	0x1001b12c
100127f8:	1001b13d 	.word	0x1001b13d
100127fc:	1001517f 	.word	0x1001517f
10012800:	1001b140 	.word	0x1001b140
10012804:	1001b15d 	.word	0x1001b15d
10012808:	100116e9 	.word	0x100116e9

1001280c <get_gap_local_addr_type>:
1001280c:	4b04      	ldr	r3, [pc, #16]	; (10012820 <get_gap_local_addr_type+0x14>)
1001280e:	2001      	movs	r0, #1
10012810:	791b      	ldrb	r3, [r3, #4]
10012812:	2b02      	cmp	r3, #2
10012814:	d003      	beq.n	1001281e <get_gap_local_addr_type+0x12>
10012816:	3b03      	subs	r3, #3
10012818:	4258      	negs	r0, r3
1001281a:	4158      	adcs	r0, r3
1001281c:	0040      	lsls	r0, r0, #1
1001281e:	4770      	bx	lr
10012820:	1001ae4e 	.word	0x1001ae4e

10012824 <gapm_adv_report_evt_handler>:
10012824:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10012826:	7843      	ldrb	r3, [r0, #1]
10012828:	1c05      	adds	r5, r0, #0
1001282a:	9301      	str	r3, [sp, #4]
1001282c:	466b      	mov	r3, sp
1001282e:	1c0c      	adds	r4, r1, #0
10012830:	791b      	ldrb	r3, [r3, #4]
10012832:	7806      	ldrb	r6, [r0, #0]
10012834:	2206      	movs	r2, #6
10012836:	704b      	strb	r3, [r1, #1]
10012838:	1c88      	adds	r0, r1, #2
1001283a:	4f1b      	ldr	r7, [pc, #108]	; (100128a8 <gapm_adv_report_evt_handler+0x84>)
1001283c:	1ca9      	adds	r1, r5, #2
1001283e:	47b8      	blx	r7
10012840:	1c20      	adds	r0, r4, #0
10012842:	1c29      	adds	r1, r5, #0
10012844:	7a2a      	ldrb	r2, [r5, #8]
10012846:	3008      	adds	r0, #8
10012848:	77c2      	strb	r2, [r0, #31]
1001284a:	3109      	adds	r1, #9
1001284c:	3528      	adds	r5, #40	; 0x28
1001284e:	47b8      	blx	r7
10012850:	782b      	ldrb	r3, [r5, #0]
10012852:	b25a      	sxtb	r2, r3
10012854:	2a00      	cmp	r2, #0
10012856:	da01      	bge.n	1001285c <gapm_adv_report_evt_handler+0x38>
10012858:	3301      	adds	r3, #1
1001285a:	b2db      	uxtb	r3, r3
1001285c:	1c22      	adds	r2, r4, #0
1001285e:	3228      	adds	r2, #40	; 0x28
10012860:	7013      	strb	r3, [r2, #0]
10012862:	2200      	movs	r2, #0
10012864:	9b01      	ldr	r3, [sp, #4]
10012866:	4293      	cmp	r3, r2
10012868:	d00a      	beq.n	10012880 <gapm_adv_report_evt_handler+0x5c>
1001286a:	79e3      	ldrb	r3, [r4, #7]
1001286c:	323f      	adds	r2, #63	; 0x3f
1001286e:	1c19      	adds	r1, r3, #0
10012870:	4391      	bics	r1, r2
10012872:	3a3e      	subs	r2, #62	; 0x3e
10012874:	29c0      	cmp	r1, #192	; 0xc0
10012876:	d003      	beq.n	10012880 <gapm_adv_report_evt_handler+0x5c>
10012878:	065b      	lsls	r3, r3, #25
1001287a:	0fdb      	lsrs	r3, r3, #31
1001287c:	3202      	adds	r2, #2
1001287e:	1ad2      	subs	r2, r2, r3
10012880:	7062      	strb	r2, [r4, #1]
10012882:	2e04      	cmp	r6, #4
10012884:	d80f      	bhi.n	100128a6 <gapm_adv_report_evt_handler+0x82>
10012886:	1c30      	adds	r0, r6, #0
10012888:	f000 fbf6 	bl	10013078 <__gnu_thumb1_case_uqi>
1001288c:	09070503 	.word	0x09070503
10012890:	0b          	.byte	0x0b
10012891:	00          	.byte	0x00
10012892:	2300      	movs	r3, #0
10012894:	e006      	b.n	100128a4 <gapm_adv_report_evt_handler+0x80>
10012896:	2301      	movs	r3, #1
10012898:	e004      	b.n	100128a4 <gapm_adv_report_evt_handler+0x80>
1001289a:	2302      	movs	r3, #2
1001289c:	e002      	b.n	100128a4 <gapm_adv_report_evt_handler+0x80>
1001289e:	2303      	movs	r3, #3
100128a0:	e000      	b.n	100128a4 <gapm_adv_report_evt_handler+0x80>
100128a2:	2305      	movs	r3, #5
100128a4:	7023      	strb	r3, [r4, #0]
100128a6:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
100128a8:	1001517f 	.word	0x1001517f

100128ac <gapm_resolv_addr_cmd_handler>:
100128ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100128ae:	2314      	movs	r3, #20
100128b0:	4c12      	ldr	r4, [pc, #72]	; (100128fc <gapm_resolv_addr_cmd_handler+0x50>)
100128b2:	1c17      	adds	r7, r2, #0
100128b4:	7023      	strb	r3, [r4, #0]
100128b6:	3b07      	subs	r3, #7
100128b8:	7063      	strb	r3, [r4, #1]
100128ba:	70a3      	strb	r3, [r4, #2]
100128bc:	2300      	movs	r3, #0
100128be:	70e3      	strb	r3, [r4, #3]
100128c0:	4b0f      	ldr	r3, [pc, #60]	; (10012900 <gapm_resolv_addr_cmd_handler+0x54>)
100128c2:	1c05      	adds	r5, r0, #0
100128c4:	881a      	ldrh	r2, [r3, #0]
100128c6:	881b      	ldrh	r3, [r3, #0]
100128c8:	4e0e      	ldr	r6, [pc, #56]	; (10012904 <gapm_resolv_addr_cmd_handler+0x58>)
100128ca:	0a1b      	lsrs	r3, r3, #8
100128cc:	7163      	strb	r3, [r4, #5]
100128ce:	2317      	movs	r3, #23
100128d0:	012d      	lsls	r5, r5, #4
100128d2:	7122      	strb	r2, [r4, #4]
100128d4:	7260      	strb	r0, [r4, #9]
100128d6:	2206      	movs	r2, #6
100128d8:	480b      	ldr	r0, [pc, #44]	; (10012908 <gapm_resolv_addr_cmd_handler+0x5c>)
100128da:	7223      	strb	r3, [r4, #8]
100128dc:	47b0      	blx	r6
100128de:	1c39      	adds	r1, r7, #0
100128e0:	1c2a      	adds	r2, r5, #0
100128e2:	480a      	ldr	r0, [pc, #40]	; (1001290c <gapm_resolv_addr_cmd_handler+0x60>)
100128e4:	47b0      	blx	r6
100128e6:	1c29      	adds	r1, r5, #0
100128e8:	3110      	adds	r1, #16
100128ea:	1c0b      	adds	r3, r1, #0
100128ec:	3b08      	subs	r3, #8
100128ee:	71a3      	strb	r3, [r4, #6]
100128f0:	121b      	asrs	r3, r3, #8
100128f2:	71e3      	strb	r3, [r4, #7]
100128f4:	1c20      	adds	r0, r4, #0
100128f6:	4b06      	ldr	r3, [pc, #24]	; (10012910 <gapm_resolv_addr_cmd_handler+0x64>)
100128f8:	4798      	blx	r3
100128fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100128fc:	1001b12c 	.word	0x1001b12c
10012900:	1001adbc 	.word	0x1001adbc
10012904:	1001517f 	.word	0x1001517f
10012908:	1001b136 	.word	0x1001b136
1001290c:	1001b13c 	.word	0x1001b13c
10012910:	100116e9 	.word	0x100116e9

10012914 <gapm_addr_solved_ind_handler>:
10012914:	b570      	push	{r4, r5, r6, lr}
10012916:	1c04      	adds	r4, r0, #0
10012918:	1c08      	adds	r0, r1, #0
1001291a:	1c0d      	adds	r5, r1, #0
1001291c:	4e05      	ldr	r6, [pc, #20]	; (10012934 <gapm_addr_solved_ind_handler+0x20>)
1001291e:	1c21      	adds	r1, r4, #0
10012920:	2206      	movs	r2, #6
10012922:	3011      	adds	r0, #17
10012924:	47b0      	blx	r6
10012926:	1c68      	adds	r0, r5, #1
10012928:	1da1      	adds	r1, r4, #6
1001292a:	2210      	movs	r2, #16
1001292c:	47b0      	blx	r6
1001292e:	2300      	movs	r3, #0
10012930:	702b      	strb	r3, [r5, #0]
10012932:	bd70      	pop	{r4, r5, r6, pc}
10012934:	1001517f 	.word	0x1001517f

10012938 <gapm_profile_added_ind_handler>:
10012938:	b510      	push	{r4, lr}
1001293a:	7843      	ldrb	r3, [r0, #1]
1001293c:	7902      	ldrb	r2, [r0, #4]
1001293e:	7944      	ldrb	r4, [r0, #5]
10012940:	7800      	ldrb	r0, [r0, #0]
10012942:	021b      	lsls	r3, r3, #8
10012944:	4303      	orrs	r3, r0
10012946:	2b1b      	cmp	r3, #27
10012948:	d104      	bne.n	10012954 <gapm_profile_added_ind_handler+0x1c>
1001294a:	2300      	movs	r3, #0
1001294c:	700b      	strb	r3, [r1, #0]
1001294e:	0223      	lsls	r3, r4, #8
10012950:	4313      	orrs	r3, r2
10012952:	804b      	strh	r3, [r1, #2]
10012954:	203b      	movs	r0, #59	; 0x3b
10012956:	bd10      	pop	{r4, pc}

10012958 <gattc_read_req_ind_parser>:
10012958:	7843      	ldrb	r3, [r0, #1]
1001295a:	7802      	ldrb	r2, [r0, #0]
1001295c:	021b      	lsls	r3, r3, #8
1001295e:	4313      	orrs	r3, r2
10012960:	804b      	strh	r3, [r1, #2]
10012962:	4770      	bx	lr

10012964 <gattc_write_req_ind_parser>:
10012964:	b508      	push	{r3, lr}
10012966:	1c13      	adds	r3, r2, #0
10012968:	0a00      	lsrs	r0, r0, #8
1001296a:	8010      	strh	r0, [r2, #0]
1001296c:	784a      	ldrb	r2, [r1, #1]
1001296e:	7808      	ldrb	r0, [r1, #0]
10012970:	0212      	lsls	r2, r2, #8
10012972:	4302      	orrs	r2, r0
10012974:	805a      	strh	r2, [r3, #2]
10012976:	78ca      	ldrb	r2, [r1, #3]
10012978:	7888      	ldrb	r0, [r1, #2]
1001297a:	0212      	lsls	r2, r2, #8
1001297c:	4302      	orrs	r2, r0
1001297e:	809a      	strh	r2, [r3, #4]
10012980:	794a      	ldrb	r2, [r1, #5]
10012982:	7908      	ldrb	r0, [r1, #4]
10012984:	0212      	lsls	r2, r2, #8
10012986:	4302      	orrs	r2, r0
10012988:	80da      	strh	r2, [r3, #6]
1001298a:	3308      	adds	r3, #8
1001298c:	1c18      	adds	r0, r3, #0
1001298e:	3106      	adds	r1, #6
10012990:	4b01      	ldr	r3, [pc, #4]	; (10012998 <gattc_write_req_ind_parser+0x34>)
10012992:	4798      	blx	r3
10012994:	bd08      	pop	{r3, pc}
10012996:	46c0      	nop			; (mov r8, r8)
10012998:	1001517f 	.word	0x1001517f

1001299c <gattc_att_info_req_parser>:
1001299c:	7843      	ldrb	r3, [r0, #1]
1001299e:	7802      	ldrb	r2, [r0, #0]
100129a0:	021b      	lsls	r3, r3, #8
100129a2:	4313      	orrs	r3, r2
100129a4:	800b      	strh	r3, [r1, #0]
100129a6:	4770      	bx	lr

100129a8 <gattc_read_cfm>:
100129a8:	b538      	push	{r3, r4, r5, lr}
100129aa:	2514      	movs	r5, #20
100129ac:	1c1c      	adds	r4, r3, #0
100129ae:	4b14      	ldr	r3, [pc, #80]	; (10012a00 <gattc_read_cfm+0x58>)
100129b0:	70d9      	strb	r1, [r3, #3]
100129b2:	4914      	ldr	r1, [pc, #80]	; (10012a04 <gattc_read_cfm+0x5c>)
100129b4:	701d      	strb	r5, [r3, #0]
100129b6:	3d08      	subs	r5, #8
100129b8:	705d      	strb	r5, [r3, #1]
100129ba:	709d      	strb	r5, [r3, #2]
100129bc:	880d      	ldrh	r5, [r1, #0]
100129be:	8809      	ldrh	r1, [r1, #0]
100129c0:	7218      	strb	r0, [r3, #8]
100129c2:	0a09      	lsrs	r1, r1, #8
100129c4:	7159      	strb	r1, [r3, #5]
100129c6:	0a00      	lsrs	r0, r0, #8
100129c8:	0a21      	lsrs	r1, r4, #8
100129ca:	711d      	strb	r5, [r3, #4]
100129cc:	7258      	strb	r0, [r3, #9]
100129ce:	729c      	strb	r4, [r3, #10]
100129d0:	72d9      	strb	r1, [r3, #11]
100129d2:	731a      	strb	r2, [r3, #12]
100129d4:	1c1d      	adds	r5, r3, #0
100129d6:	2c00      	cmp	r4, #0
100129d8:	d007      	beq.n	100129ea <gattc_read_cfm+0x42>
100129da:	9904      	ldr	r1, [sp, #16]
100129dc:	1c22      	adds	r2, r4, #0
100129de:	480a      	ldr	r0, [pc, #40]	; (10012a08 <gattc_read_cfm+0x60>)
100129e0:	4b0a      	ldr	r3, [pc, #40]	; (10012a0c <gattc_read_cfm+0x64>)
100129e2:	340d      	adds	r4, #13
100129e4:	4798      	blx	r3
100129e6:	b2a1      	uxth	r1, r4
100129e8:	e001      	b.n	100129ee <gattc_read_cfm+0x46>
100129ea:	210e      	movs	r1, #14
100129ec:	735c      	strb	r4, [r3, #13]
100129ee:	1c0b      	adds	r3, r1, #0
100129f0:	3b08      	subs	r3, #8
100129f2:	71ab      	strb	r3, [r5, #6]
100129f4:	121b      	asrs	r3, r3, #8
100129f6:	71eb      	strb	r3, [r5, #7]
100129f8:	1c28      	adds	r0, r5, #0
100129fa:	4b05      	ldr	r3, [pc, #20]	; (10012a10 <gattc_read_cfm+0x68>)
100129fc:	4798      	blx	r3
100129fe:	bd38      	pop	{r3, r4, r5, pc}
10012a00:	1001b12c 	.word	0x1001b12c
10012a04:	1001adbc 	.word	0x1001adbc
10012a08:	1001b139 	.word	0x1001b139
10012a0c:	1001517f 	.word	0x1001517f
10012a10:	100116e9 	.word	0x100116e9

10012a14 <gattc_write_cfm>:
10012a14:	4b0d      	ldr	r3, [pc, #52]	; (10012a4c <gattc_write_cfm+0x38>)
10012a16:	b510      	push	{r4, lr}
10012a18:	729a      	strb	r2, [r3, #10]
10012a1a:	2203      	movs	r2, #3
10012a1c:	2416      	movs	r4, #22
10012a1e:	719a      	strb	r2, [r3, #6]
10012a20:	2200      	movs	r2, #0
10012a22:	70d9      	strb	r1, [r3, #3]
10012a24:	490a      	ldr	r1, [pc, #40]	; (10012a50 <gattc_write_cfm+0x3c>)
10012a26:	701c      	strb	r4, [r3, #0]
10012a28:	3c0a      	subs	r4, #10
10012a2a:	705c      	strb	r4, [r3, #1]
10012a2c:	709c      	strb	r4, [r3, #2]
10012a2e:	880c      	ldrh	r4, [r1, #0]
10012a30:	8809      	ldrh	r1, [r1, #0]
10012a32:	7218      	strb	r0, [r3, #8]
10012a34:	0a09      	lsrs	r1, r1, #8
10012a36:	0a00      	lsrs	r0, r0, #8
10012a38:	711c      	strb	r4, [r3, #4]
10012a3a:	7159      	strb	r1, [r3, #5]
10012a3c:	7258      	strb	r0, [r3, #9]
10012a3e:	71da      	strb	r2, [r3, #7]
10012a40:	1c18      	adds	r0, r3, #0
10012a42:	210b      	movs	r1, #11
10012a44:	4b03      	ldr	r3, [pc, #12]	; (10012a54 <gattc_write_cfm+0x40>)
10012a46:	4798      	blx	r3
10012a48:	bd10      	pop	{r4, pc}
10012a4a:	46c0      	nop			; (mov r8, r8)
10012a4c:	1001b12c 	.word	0x1001b12c
10012a50:	1001adbc 	.word	0x1001adbc
10012a54:	100116e9 	.word	0x100116e9

10012a58 <gattc_att_info_cfm>:
10012a58:	b538      	push	{r3, r4, r5, lr}
10012a5a:	4c0e      	ldr	r4, [pc, #56]	; (10012a94 <gattc_att_info_cfm+0x3c>)
10012a5c:	2518      	movs	r5, #24
10012a5e:	7323      	strb	r3, [r4, #12]
10012a60:	2305      	movs	r3, #5
10012a62:	71a3      	strb	r3, [r4, #6]
10012a64:	2300      	movs	r3, #0
10012a66:	70e1      	strb	r1, [r4, #3]
10012a68:	490b      	ldr	r1, [pc, #44]	; (10012a98 <gattc_att_info_cfm+0x40>)
10012a6a:	7025      	strb	r5, [r4, #0]
10012a6c:	3d0c      	subs	r5, #12
10012a6e:	7065      	strb	r5, [r4, #1]
10012a70:	70a5      	strb	r5, [r4, #2]
10012a72:	880d      	ldrh	r5, [r1, #0]
10012a74:	8809      	ldrh	r1, [r1, #0]
10012a76:	7220      	strb	r0, [r4, #8]
10012a78:	0a09      	lsrs	r1, r1, #8
10012a7a:	0a00      	lsrs	r0, r0, #8
10012a7c:	7161      	strb	r1, [r4, #5]
10012a7e:	7260      	strb	r0, [r4, #9]
10012a80:	72a2      	strb	r2, [r4, #10]
10012a82:	71e3      	strb	r3, [r4, #7]
10012a84:	0a12      	lsrs	r2, r2, #8
10012a86:	1c20      	adds	r0, r4, #0
10012a88:	210d      	movs	r1, #13
10012a8a:	4b04      	ldr	r3, [pc, #16]	; (10012a9c <gattc_att_info_cfm+0x44>)
10012a8c:	7125      	strb	r5, [r4, #4]
10012a8e:	72e2      	strb	r2, [r4, #11]
10012a90:	4798      	blx	r3
10012a92:	bd38      	pop	{r3, r4, r5, pc}
10012a94:	1001b12c 	.word	0x1001b12c
10012a98:	1001adbc 	.word	0x1001adbc
10012a9c:	100116e9 	.word	0x100116e9

10012aa0 <gattc_send_evt_cmd_handler>:
10012aa0:	b570      	push	{r4, r5, r6, lr}
10012aa2:	2610      	movs	r6, #16
10012aa4:	ac04      	add	r4, sp, #16
10012aa6:	8825      	ldrh	r5, [r4, #0]
10012aa8:	4c15      	ldr	r4, [pc, #84]	; (10012b00 <gattc_send_evt_cmd_handler+0x60>)
10012aaa:	70e2      	strb	r2, [r4, #3]
10012aac:	4a15      	ldr	r2, [pc, #84]	; (10012b04 <gattc_send_evt_cmd_handler+0x64>)
10012aae:	7026      	strb	r6, [r4, #0]
10012ab0:	3e04      	subs	r6, #4
10012ab2:	7066      	strb	r6, [r4, #1]
10012ab4:	70a6      	strb	r6, [r4, #2]
10012ab6:	8816      	ldrh	r6, [r2, #0]
10012ab8:	8812      	ldrh	r2, [r2, #0]
10012aba:	7220      	strb	r0, [r4, #8]
10012abc:	0a12      	lsrs	r2, r2, #8
10012abe:	7162      	strb	r2, [r4, #5]
10012ac0:	4a11      	ldr	r2, [pc, #68]	; (10012b08 <gattc_send_evt_cmd_handler+0x68>)
10012ac2:	7321      	strb	r1, [r4, #12]
10012ac4:	8812      	ldrh	r2, [r2, #0]
10012ac6:	73a5      	strb	r5, [r4, #14]
10012ac8:	3201      	adds	r2, #1
10012aca:	7262      	strb	r2, [r4, #9]
10012acc:	1212      	asrs	r2, r2, #8
10012ace:	72a2      	strb	r2, [r4, #10]
10012ad0:	2200      	movs	r2, #0
10012ad2:	72e2      	strb	r2, [r4, #11]
10012ad4:	0a0a      	lsrs	r2, r1, #8
10012ad6:	7362      	strb	r2, [r4, #13]
10012ad8:	0a2a      	lsrs	r2, r5, #8
10012ada:	73e2      	strb	r2, [r4, #15]
10012adc:	1c19      	adds	r1, r3, #0
10012ade:	1c2a      	adds	r2, r5, #0
10012ae0:	4b0a      	ldr	r3, [pc, #40]	; (10012b0c <gattc_send_evt_cmd_handler+0x6c>)
10012ae2:	3510      	adds	r5, #16
10012ae4:	480a      	ldr	r0, [pc, #40]	; (10012b10 <gattc_send_evt_cmd_handler+0x70>)
10012ae6:	7126      	strb	r6, [r4, #4]
10012ae8:	4798      	blx	r3
10012aea:	b2a9      	uxth	r1, r5
10012aec:	1c0b      	adds	r3, r1, #0
10012aee:	3b08      	subs	r3, #8
10012af0:	71a3      	strb	r3, [r4, #6]
10012af2:	121b      	asrs	r3, r3, #8
10012af4:	71e3      	strb	r3, [r4, #7]
10012af6:	1c20      	adds	r0, r4, #0
10012af8:	4b06      	ldr	r3, [pc, #24]	; (10012b14 <gattc_send_evt_cmd_handler+0x74>)
10012afa:	4798      	blx	r3
10012afc:	bd70      	pop	{r4, r5, r6, pc}
10012afe:	46c0      	nop			; (mov r8, r8)
10012b00:	1001b12c 	.word	0x1001b12c
10012b04:	1001adbc 	.word	0x1001adbc
10012b08:	10019f50 	.word	0x10019f50
10012b0c:	1001517f 	.word	0x1001517f
10012b10:	1001b13c 	.word	0x1001b13c
10012b14:	100116e9 	.word	0x100116e9

10012b18 <gattc_event_cfm_handler>:
10012b18:	220e      	movs	r2, #14
10012b1a:	b508      	push	{r3, lr}
10012b1c:	4b0b      	ldr	r3, [pc, #44]	; (10012b4c <gattc_event_cfm_handler+0x34>)
10012b1e:	701a      	strb	r2, [r3, #0]
10012b20:	3a02      	subs	r2, #2
10012b22:	705a      	strb	r2, [r3, #1]
10012b24:	709a      	strb	r2, [r3, #2]
10012b26:	4a0a      	ldr	r2, [pc, #40]	; (10012b50 <gattc_event_cfm_handler+0x38>)
10012b28:	70d8      	strb	r0, [r3, #3]
10012b2a:	8810      	ldrh	r0, [r2, #0]
10012b2c:	8812      	ldrh	r2, [r2, #0]
10012b2e:	7219      	strb	r1, [r3, #8]
10012b30:	0a12      	lsrs	r2, r2, #8
10012b32:	715a      	strb	r2, [r3, #5]
10012b34:	2202      	movs	r2, #2
10012b36:	719a      	strb	r2, [r3, #6]
10012b38:	2200      	movs	r2, #0
10012b3a:	0a09      	lsrs	r1, r1, #8
10012b3c:	7118      	strb	r0, [r3, #4]
10012b3e:	7259      	strb	r1, [r3, #9]
10012b40:	71da      	strb	r2, [r3, #7]
10012b42:	1c18      	adds	r0, r3, #0
10012b44:	210a      	movs	r1, #10
10012b46:	4b03      	ldr	r3, [pc, #12]	; (10012b54 <gattc_event_cfm_handler+0x3c>)
10012b48:	4798      	blx	r3
10012b4a:	bd08      	pop	{r3, pc}
10012b4c:	1001b12c 	.word	0x1001b12c
10012b50:	1001adbc 	.word	0x1001adbc
10012b54:	100116e9 	.word	0x100116e9

10012b58 <gattc_disc_svc_ind_parser>:
10012b58:	b570      	push	{r4, r5, r6, lr}
10012b5a:	1c15      	adds	r5, r2, #0
10012b5c:	0a00      	lsrs	r0, r0, #8
10012b5e:	8010      	strh	r0, [r2, #0]
10012b60:	784b      	ldrb	r3, [r1, #1]
10012b62:	780a      	ldrb	r2, [r1, #0]
10012b64:	021b      	lsls	r3, r3, #8
10012b66:	4313      	orrs	r3, r2
10012b68:	806b      	strh	r3, [r5, #2]
10012b6a:	78cb      	ldrb	r3, [r1, #3]
10012b6c:	788a      	ldrb	r2, [r1, #2]
10012b6e:	021b      	lsls	r3, r3, #8
10012b70:	4313      	orrs	r3, r2
10012b72:	80ab      	strh	r3, [r5, #4]
10012b74:	790e      	ldrb	r6, [r1, #4]
10012b76:	4b05      	ldr	r3, [pc, #20]	; (10012b8c <gattc_disc_svc_ind_parser+0x34>)
10012b78:	1c30      	adds	r0, r6, #0
10012b7a:	1c0c      	adds	r4, r1, #0
10012b7c:	4798      	blx	r3
10012b7e:	1c32      	adds	r2, r6, #0
10012b80:	71a8      	strb	r0, [r5, #6]
10012b82:	1d61      	adds	r1, r4, #5
10012b84:	1de8      	adds	r0, r5, #7
10012b86:	4b02      	ldr	r3, [pc, #8]	; (10012b90 <gattc_disc_svc_ind_parser+0x38>)
10012b88:	4798      	blx	r3
10012b8a:	bd70      	pop	{r4, r5, r6, pc}
10012b8c:	10010a29 	.word	0x10010a29
10012b90:	1001517f 	.word	0x1001517f

10012b94 <gattc_disc_svc_incl_ind_parser>:
10012b94:	b570      	push	{r4, r5, r6, lr}
10012b96:	1c15      	adds	r5, r2, #0
10012b98:	0a00      	lsrs	r0, r0, #8
10012b9a:	8010      	strh	r0, [r2, #0]
10012b9c:	784b      	ldrb	r3, [r1, #1]
10012b9e:	780a      	ldrb	r2, [r1, #0]
10012ba0:	021b      	lsls	r3, r3, #8
10012ba2:	4313      	orrs	r3, r2
10012ba4:	806b      	strh	r3, [r5, #2]
10012ba6:	78cb      	ldrb	r3, [r1, #3]
10012ba8:	788a      	ldrb	r2, [r1, #2]
10012baa:	021b      	lsls	r3, r3, #8
10012bac:	4313      	orrs	r3, r2
10012bae:	80ab      	strh	r3, [r5, #4]
10012bb0:	794b      	ldrb	r3, [r1, #5]
10012bb2:	790a      	ldrb	r2, [r1, #4]
10012bb4:	021b      	lsls	r3, r3, #8
10012bb6:	4313      	orrs	r3, r2
10012bb8:	80eb      	strh	r3, [r5, #6]
10012bba:	798e      	ldrb	r6, [r1, #6]
10012bbc:	4b05      	ldr	r3, [pc, #20]	; (10012bd4 <gattc_disc_svc_incl_ind_parser+0x40>)
10012bbe:	1c30      	adds	r0, r6, #0
10012bc0:	1c0c      	adds	r4, r1, #0
10012bc2:	4798      	blx	r3
10012bc4:	7228      	strb	r0, [r5, #8]
10012bc6:	1c28      	adds	r0, r5, #0
10012bc8:	1c32      	adds	r2, r6, #0
10012bca:	1de1      	adds	r1, r4, #7
10012bcc:	4b02      	ldr	r3, [pc, #8]	; (10012bd8 <gattc_disc_svc_incl_ind_parser+0x44>)
10012bce:	3009      	adds	r0, #9
10012bd0:	4798      	blx	r3
10012bd2:	bd70      	pop	{r4, r5, r6, pc}
10012bd4:	10010a29 	.word	0x10010a29
10012bd8:	1001517f 	.word	0x1001517f

10012bdc <gattc_disc_char_ind_parser>:
10012bdc:	b570      	push	{r4, r5, r6, lr}
10012bde:	1c15      	adds	r5, r2, #0
10012be0:	0a00      	lsrs	r0, r0, #8
10012be2:	8010      	strh	r0, [r2, #0]
10012be4:	784b      	ldrb	r3, [r1, #1]
10012be6:	780a      	ldrb	r2, [r1, #0]
10012be8:	021b      	lsls	r3, r3, #8
10012bea:	4313      	orrs	r3, r2
10012bec:	806b      	strh	r3, [r5, #2]
10012bee:	78cb      	ldrb	r3, [r1, #3]
10012bf0:	788a      	ldrb	r2, [r1, #2]
10012bf2:	021b      	lsls	r3, r3, #8
10012bf4:	4313      	orrs	r3, r2
10012bf6:	80ab      	strh	r3, [r5, #4]
10012bf8:	790b      	ldrb	r3, [r1, #4]
10012bfa:	1c0c      	adds	r4, r1, #0
10012bfc:	71ab      	strb	r3, [r5, #6]
10012bfe:	794e      	ldrb	r6, [r1, #5]
10012c00:	4b05      	ldr	r3, [pc, #20]	; (10012c18 <gattc_disc_char_ind_parser+0x3c>)
10012c02:	1c30      	adds	r0, r6, #0
10012c04:	4798      	blx	r3
10012c06:	71e8      	strb	r0, [r5, #7]
10012c08:	1c28      	adds	r0, r5, #0
10012c0a:	1c32      	adds	r2, r6, #0
10012c0c:	1da1      	adds	r1, r4, #6
10012c0e:	4b03      	ldr	r3, [pc, #12]	; (10012c1c <gattc_disc_char_ind_parser+0x40>)
10012c10:	3008      	adds	r0, #8
10012c12:	4798      	blx	r3
10012c14:	bd70      	pop	{r4, r5, r6, pc}
10012c16:	46c0      	nop			; (mov r8, r8)
10012c18:	10010a29 	.word	0x10010a29
10012c1c:	1001517f 	.word	0x1001517f

10012c20 <gattc_disc_char_desc_ind_parser>:
10012c20:	b570      	push	{r4, r5, r6, lr}
10012c22:	1c15      	adds	r5, r2, #0
10012c24:	0a00      	lsrs	r0, r0, #8
10012c26:	8010      	strh	r0, [r2, #0]
10012c28:	784b      	ldrb	r3, [r1, #1]
10012c2a:	780a      	ldrb	r2, [r1, #0]
10012c2c:	021b      	lsls	r3, r3, #8
10012c2e:	4313      	orrs	r3, r2
10012c30:	806b      	strh	r3, [r5, #2]
10012c32:	788e      	ldrb	r6, [r1, #2]
10012c34:	4b05      	ldr	r3, [pc, #20]	; (10012c4c <gattc_disc_char_desc_ind_parser+0x2c>)
10012c36:	1c30      	adds	r0, r6, #0
10012c38:	1c0c      	adds	r4, r1, #0
10012c3a:	4798      	blx	r3
10012c3c:	1c32      	adds	r2, r6, #0
10012c3e:	7128      	strb	r0, [r5, #4]
10012c40:	1ce1      	adds	r1, r4, #3
10012c42:	1d68      	adds	r0, r5, #5
10012c44:	4b02      	ldr	r3, [pc, #8]	; (10012c50 <gattc_disc_char_desc_ind_parser+0x30>)
10012c46:	4798      	blx	r3
10012c48:	bd70      	pop	{r4, r5, r6, pc}
10012c4a:	46c0      	nop			; (mov r8, r8)
10012c4c:	10010a29 	.word	0x10010a29
10012c50:	1001517f 	.word	0x1001517f

10012c54 <gattc_event_ind_and_notification_parser>:
10012c54:	b510      	push	{r4, lr}
10012c56:	780c      	ldrb	r4, [r1, #0]
10012c58:	1c13      	adds	r3, r2, #0
10012c5a:	2c12      	cmp	r4, #18
10012c5c:	d10e      	bne.n	10012c7c <gattc_event_ind_and_notification_parser+0x28>
10012c5e:	0a00      	lsrs	r0, r0, #8
10012c60:	8010      	strh	r0, [r2, #0]
10012c62:	788a      	ldrb	r2, [r1, #2]
10012c64:	709a      	strb	r2, [r3, #2]
10012c66:	7948      	ldrb	r0, [r1, #5]
10012c68:	790c      	ldrb	r4, [r1, #4]
10012c6a:	0200      	lsls	r0, r0, #8
10012c6c:	4320      	orrs	r0, r4
10012c6e:	8098      	strh	r0, [r3, #4]
10012c70:	3106      	adds	r1, #6
10012c72:	1d98      	adds	r0, r3, #6
10012c74:	4b0b      	ldr	r3, [pc, #44]	; (10012ca4 <gattc_event_ind_and_notification_parser+0x50>)
10012c76:	4798      	blx	r3
10012c78:	221b      	movs	r2, #27
10012c7a:	e010      	b.n	10012c9e <gattc_event_ind_and_notification_parser+0x4a>
10012c7c:	2200      	movs	r2, #0
10012c7e:	2c13      	cmp	r4, #19
10012c80:	d10d      	bne.n	10012c9e <gattc_event_ind_and_notification_parser+0x4a>
10012c82:	0a00      	lsrs	r0, r0, #8
10012c84:	8018      	strh	r0, [r3, #0]
10012c86:	788a      	ldrb	r2, [r1, #2]
10012c88:	709a      	strb	r2, [r3, #2]
10012c8a:	7908      	ldrb	r0, [r1, #4]
10012c8c:	78cc      	ldrb	r4, [r1, #3]
10012c8e:	0200      	lsls	r0, r0, #8
10012c90:	4320      	orrs	r0, r4
10012c92:	8098      	strh	r0, [r3, #4]
10012c94:	3106      	adds	r1, #6
10012c96:	1d98      	adds	r0, r3, #6
10012c98:	4b02      	ldr	r3, [pc, #8]	; (10012ca4 <gattc_event_ind_and_notification_parser+0x50>)
10012c9a:	4798      	blx	r3
10012c9c:	221c      	movs	r2, #28
10012c9e:	1c10      	adds	r0, r2, #0
10012ca0:	bd10      	pop	{r4, pc}
10012ca2:	46c0      	nop			; (mov r8, r8)
10012ca4:	1001517f 	.word	0x1001517f

10012ca8 <gattc_complete_evt_handler>:
10012ca8:	b500      	push	{lr}
10012caa:	0a00      	lsrs	r0, r0, #8
10012cac:	8010      	strh	r0, [r2, #0]
10012cae:	7808      	ldrb	r0, [r1, #0]
10012cb0:	7090      	strb	r0, [r2, #2]
10012cb2:	784b      	ldrb	r3, [r1, #1]
10012cb4:	3801      	subs	r0, #1
10012cb6:	70d3      	strb	r3, [r2, #3]
10012cb8:	2813      	cmp	r0, #19
10012cba:	d82c      	bhi.n	10012d16 <gattc_complete_evt_handler+0x6e>
10012cbc:	f000 f9dc 	bl	10013078 <__gnu_thumb1_case_uqi>
10012cc0:	0a0a0a0c 	.word	0x0a0a0a0c
10012cc4:	210a0a0a 	.word	0x210a0a0a
10012cc8:	111f2121 	.word	0x111f2121
10012ccc:	2b111111 	.word	0x2b111111
10012cd0:	2919132b 	.word	0x2919132b
10012cd4:	2017      	movs	r0, #23
10012cd6:	e01f      	b.n	10012d18 <gattc_complete_evt_handler+0x70>
10012cd8:	2024      	movs	r0, #36	; 0x24
10012cda:	2b00      	cmp	r3, #0
10012cdc:	d11c      	bne.n	10012d18 <gattc_complete_evt_handler+0x70>
10012cde:	3017      	adds	r0, #23
10012ce0:	e01a      	b.n	10012d18 <gattc_complete_evt_handler+0x70>
10012ce2:	2025      	movs	r0, #37	; 0x25
10012ce4:	e018      	b.n	10012d18 <gattc_complete_evt_handler+0x70>
10012ce6:	4a0d      	ldr	r2, [pc, #52]	; (10012d1c <gattc_complete_evt_handler+0x74>)
10012ce8:	201d      	movs	r0, #29
10012cea:	6813      	ldr	r3, [r2, #0]
10012cec:	3b01      	subs	r3, #1
10012cee:	6013      	str	r3, [r2, #0]
10012cf0:	e012      	b.n	10012d18 <gattc_complete_evt_handler+0x70>
10012cf2:	4a0a      	ldr	r2, [pc, #40]	; (10012d1c <gattc_complete_evt_handler+0x74>)
10012cf4:	201e      	movs	r0, #30
10012cf6:	6813      	ldr	r3, [r2, #0]
10012cf8:	3b01      	subs	r3, #1
10012cfa:	6013      	str	r3, [r2, #0]
10012cfc:	e00c      	b.n	10012d18 <gattc_complete_evt_handler+0x70>
10012cfe:	2019      	movs	r0, #25
10012d00:	e00a      	b.n	10012d18 <gattc_complete_evt_handler+0x70>
10012d02:	203b      	movs	r0, #59	; 0x3b
10012d04:	2b00      	cmp	r3, #0
10012d06:	d007      	beq.n	10012d18 <gattc_complete_evt_handler+0x70>
10012d08:	2182      	movs	r1, #130	; 0x82
10012d0a:	0089      	lsls	r1, r1, #2
10012d0c:	5453      	strb	r3, [r2, r1]
10012d0e:	3823      	subs	r0, #35	; 0x23
10012d10:	e002      	b.n	10012d18 <gattc_complete_evt_handler+0x70>
10012d12:	2021      	movs	r0, #33	; 0x21
10012d14:	e000      	b.n	10012d18 <gattc_complete_evt_handler+0x70>
10012d16:	2000      	movs	r0, #0
10012d18:	bd00      	pop	{pc}
10012d1a:	46c0      	nop			; (mov r8, r8)
10012d1c:	10019f54 	.word	0x10019f54

10012d20 <gattc_event_mtu_changed_ind_parser>:
10012d20:	0a00      	lsrs	r0, r0, #8
10012d22:	8010      	strh	r0, [r2, #0]
10012d24:	784b      	ldrb	r3, [r1, #1]
10012d26:	7809      	ldrb	r1, [r1, #0]
10012d28:	021b      	lsls	r3, r3, #8
10012d2a:	430b      	orrs	r3, r1
10012d2c:	8053      	strh	r3, [r2, #2]
10012d2e:	4770      	bx	lr

10012d30 <gattc_read_ind_parser>:
10012d30:	0a00      	lsrs	r0, r0, #8
10012d32:	b508      	push	{r3, lr}
10012d34:	8010      	strh	r0, [r2, #0]
10012d36:	1c13      	adds	r3, r2, #0
10012d38:	2282      	movs	r2, #130	; 0x82
10012d3a:	2000      	movs	r0, #0
10012d3c:	0092      	lsls	r2, r2, #2
10012d3e:	5498      	strb	r0, [r3, r2]
10012d40:	784a      	ldrb	r2, [r1, #1]
10012d42:	7808      	ldrb	r0, [r1, #0]
10012d44:	0212      	lsls	r2, r2, #8
10012d46:	4302      	orrs	r2, r0
10012d48:	805a      	strh	r2, [r3, #2]
10012d4a:	78ca      	ldrb	r2, [r1, #3]
10012d4c:	7888      	ldrb	r0, [r1, #2]
10012d4e:	0212      	lsls	r2, r2, #8
10012d50:	4302      	orrs	r2, r0
10012d52:	80da      	strh	r2, [r3, #6]
10012d54:	794a      	ldrb	r2, [r1, #5]
10012d56:	7908      	ldrb	r0, [r1, #4]
10012d58:	0212      	lsls	r2, r2, #8
10012d5a:	4302      	orrs	r2, r0
10012d5c:	809a      	strh	r2, [r3, #4]
10012d5e:	3308      	adds	r3, #8
10012d60:	1c18      	adds	r0, r3, #0
10012d62:	3106      	adds	r1, #6
10012d64:	4b01      	ldr	r3, [pc, #4]	; (10012d6c <gattc_read_ind_parser+0x3c>)
10012d66:	4798      	blx	r3
10012d68:	bd08      	pop	{r3, pc}
10012d6a:	46c0      	nop			; (mov r8, r8)
10012d6c:	1001517f 	.word	0x1001517f

10012d70 <gattc_svc_changed_cfg_ind_parser>:
10012d70:	0a00      	lsrs	r0, r0, #8
10012d72:	8010      	strh	r0, [r2, #0]
10012d74:	784b      	ldrb	r3, [r1, #1]
10012d76:	7809      	ldrb	r1, [r1, #0]
10012d78:	021b      	lsls	r3, r3, #8
10012d7a:	430b      	orrs	r3, r1
10012d7c:	8053      	strh	r3, [r2, #2]
10012d7e:	4770      	bx	lr

10012d80 <init_gattc_task_module>:
10012d80:	2300      	movs	r3, #0
10012d82:	4a02      	ldr	r2, [pc, #8]	; (10012d8c <init_gattc_task_module+0xc>)
10012d84:	8013      	strh	r3, [r2, #0]
10012d86:	4a02      	ldr	r2, [pc, #8]	; (10012d90 <init_gattc_task_module+0x10>)
10012d88:	8013      	strh	r3, [r2, #0]
10012d8a:	4770      	bx	lr
10012d8c:	10019f4e 	.word	0x10019f4e
10012d90:	10019f50 	.word	0x10019f50

10012d94 <gattm_add_svc_req_handler>:
10012d94:	2200      	movs	r2, #0
10012d96:	210b      	movs	r1, #11
10012d98:	b5f0      	push	{r4, r5, r6, r7, lr}
10012d9a:	1c04      	adds	r4, r0, #0
10012d9c:	7943      	ldrb	r3, [r0, #5]
10012d9e:	b085      	sub	sp, #20
10012da0:	9301      	str	r3, [sp, #4]
10012da2:	ab02      	add	r3, sp, #8
10012da4:	71da      	strb	r2, [r3, #7]
10012da6:	4b37      	ldr	r3, [pc, #220]	; (10012e84 <gattm_add_svc_req_handler+0xf0>)
10012da8:	7059      	strb	r1, [r3, #1]
10012daa:	7099      	strb	r1, [r3, #2]
10012dac:	4936      	ldr	r1, [pc, #216]	; (10012e88 <gattm_add_svc_req_handler+0xf4>)
10012dae:	701a      	strb	r2, [r3, #0]
10012db0:	8808      	ldrh	r0, [r1, #0]
10012db2:	8809      	ldrh	r1, [r1, #0]
10012db4:	70da      	strb	r2, [r3, #3]
10012db6:	0a09      	lsrs	r1, r1, #8
10012db8:	7118      	strb	r0, [r3, #4]
10012dba:	7159      	strb	r1, [r3, #5]
10012dbc:	8821      	ldrh	r1, [r4, #0]
10012dbe:	7219      	strb	r1, [r3, #8]
10012dc0:	8821      	ldrh	r1, [r4, #0]
10012dc2:	0a09      	lsrs	r1, r1, #8
10012dc4:	7259      	strb	r1, [r3, #9]
10012dc6:	8861      	ldrh	r1, [r4, #2]
10012dc8:	7299      	strb	r1, [r3, #10]
10012dca:	8861      	ldrh	r1, [r4, #2]
10012dcc:	0a09      	lsrs	r1, r1, #8
10012dce:	72d9      	strb	r1, [r3, #11]
10012dd0:	7921      	ldrb	r1, [r4, #4]
10012dd2:	7319      	strb	r1, [r3, #12]
10012dd4:	4669      	mov	r1, sp
10012dd6:	7909      	ldrb	r1, [r1, #4]
10012dd8:	7359      	strb	r1, [r3, #13]
10012dda:	18a1      	adds	r1, r4, r2
10012ddc:	7988      	ldrb	r0, [r1, #6]
10012dde:	1899      	adds	r1, r3, r2
10012de0:	3201      	adds	r2, #1
10012de2:	7388      	strb	r0, [r1, #14]
10012de4:	2a10      	cmp	r2, #16
10012de6:	d1f8      	bne.n	10012dda <gattm_add_svc_req_handler+0x46>
10012de8:	1c27      	adds	r7, r4, #0
10012dea:	2300      	movs	r3, #0
10012dec:	251e      	movs	r5, #30
10012dee:	3716      	adds	r7, #22
10012df0:	9300      	str	r3, [sp, #0]
10012df2:	9b00      	ldr	r3, [sp, #0]
10012df4:	9a01      	ldr	r2, [sp, #4]
10012df6:	4e23      	ldr	r6, [pc, #140]	; (10012e84 <gattm_add_svc_req_handler+0xf0>)
10012df8:	4293      	cmp	r3, r2
10012dfa:	da21      	bge.n	10012e40 <gattm_add_svc_req_handler+0xac>
10012dfc:	1c39      	adds	r1, r7, #0
10012dfe:	1970      	adds	r0, r6, r5
10012e00:	2210      	movs	r2, #16
10012e02:	4b22      	ldr	r3, [pc, #136]	; (10012e8c <gattm_add_svc_req_handler+0xf8>)
10012e04:	4798      	blx	r3
10012e06:	1c2b      	adds	r3, r5, #0
10012e08:	8a3a      	ldrh	r2, [r7, #16]
10012e0a:	3310      	adds	r3, #16
10012e0c:	b29b      	uxth	r3, r3
10012e0e:	54f2      	strb	r2, [r6, r3]
10012e10:	1c2b      	adds	r3, r5, #0
10012e12:	8a3a      	ldrh	r2, [r7, #16]
10012e14:	3311      	adds	r3, #17
10012e16:	b29b      	uxth	r3, r3
10012e18:	0a12      	lsrs	r2, r2, #8
10012e1a:	54f2      	strb	r2, [r6, r3]
10012e1c:	1c2a      	adds	r2, r5, #0
10012e1e:	1c2b      	adds	r3, r5, #0
10012e20:	8a79      	ldrh	r1, [r7, #18]
10012e22:	3212      	adds	r2, #18
10012e24:	b292      	uxth	r2, r2
10012e26:	54b1      	strb	r1, [r6, r2]
10012e28:	8a7a      	ldrh	r2, [r7, #18]
10012e2a:	3313      	adds	r3, #19
10012e2c:	b29b      	uxth	r3, r3
10012e2e:	0a12      	lsrs	r2, r2, #8
10012e30:	54f2      	strb	r2, [r6, r3]
10012e32:	9b00      	ldr	r3, [sp, #0]
10012e34:	3514      	adds	r5, #20
10012e36:	3301      	adds	r3, #1
10012e38:	b2ad      	uxth	r5, r5
10012e3a:	9300      	str	r3, [sp, #0]
10012e3c:	3714      	adds	r7, #20
10012e3e:	e7d8      	b.n	10012df2 <gattm_add_svc_req_handler+0x5e>
10012e40:	2114      	movs	r1, #20
10012e42:	4d13      	ldr	r5, [pc, #76]	; (10012e90 <gattm_add_svc_req_handler+0xfc>)
10012e44:	4b13      	ldr	r3, [pc, #76]	; (10012e94 <gattm_add_svc_req_handler+0x100>)
10012e46:	4351      	muls	r1, r2
10012e48:	802b      	strh	r3, [r5, #0]
10012e4a:	230b      	movs	r3, #11
10012e4c:	311e      	adds	r1, #30
10012e4e:	80ab      	strh	r3, [r5, #4]
10012e50:	1c0b      	adds	r3, r1, #0
10012e52:	3b08      	subs	r3, #8
10012e54:	71b3      	strb	r3, [r6, #6]
10012e56:	121b      	asrs	r3, r3, #8
10012e58:	71f3      	strb	r3, [r6, #7]
10012e5a:	1c30      	adds	r0, r6, #0
10012e5c:	4b0e      	ldr	r3, [pc, #56]	; (10012e98 <gattm_add_svc_req_handler+0x104>)
10012e5e:	4798      	blx	r3
10012e60:	ab02      	add	r3, sp, #8
10012e62:	1dde      	adds	r6, r3, #7
10012e64:	1c30      	adds	r0, r6, #0
10012e66:	4b0d      	ldr	r3, [pc, #52]	; (10012e9c <gattm_add_svc_req_handler+0x108>)
10012e68:	4798      	blx	r3
10012e6a:	7833      	ldrb	r3, [r6, #0]
10012e6c:	20e2      	movs	r0, #226	; 0xe2
10012e6e:	2b00      	cmp	r3, #0
10012e70:	d106      	bne.n	10012e80 <gattm_add_svc_req_handler+0xec>
10012e72:	68aa      	ldr	r2, [r5, #8]
10012e74:	7853      	ldrb	r3, [r2, #1]
10012e76:	7811      	ldrb	r1, [r2, #0]
10012e78:	021b      	lsls	r3, r3, #8
10012e7a:	430b      	orrs	r3, r1
10012e7c:	8023      	strh	r3, [r4, #0]
10012e7e:	7890      	ldrb	r0, [r2, #2]
10012e80:	b005      	add	sp, #20
10012e82:	bdf0      	pop	{r4, r5, r6, r7, pc}
10012e84:	1001b12c 	.word	0x1001b12c
10012e88:	1001adbc 	.word	0x1001adbc
10012e8c:	1001517f 	.word	0x1001517f
10012e90:	1001adb0 	.word	0x1001adb0
10012e94:	00000b01 	.word	0x00000b01
10012e98:	100116e9 	.word	0x100116e9
10012e9c:	1001174d 	.word	0x1001174d

10012ea0 <gattm_add_attribute_req_handler>:
10012ea0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10012ea2:	1c1f      	adds	r7, r3, #0
10012ea4:	4b16      	ldr	r3, [pc, #88]	; (10012f00 <gattm_add_attribute_req_handler+0x60>)
10012ea6:	9100      	str	r1, [sp, #0]
10012ea8:	9201      	str	r2, [sp, #4]
10012eaa:	1c05      	adds	r5, r0, #0
10012eac:	7946      	ldrb	r6, [r0, #5]
10012eae:	6818      	ldr	r0, [r3, #0]
10012eb0:	2114      	movs	r1, #20
10012eb2:	4b14      	ldr	r3, [pc, #80]	; (10012f04 <gattm_add_attribute_req_handler+0x64>)
10012eb4:	382a      	subs	r0, #42	; 0x2a
10012eb6:	4798      	blx	r3
10012eb8:	2311      	movs	r3, #17
10012eba:	4286      	cmp	r6, r0
10012ebc:	d21e      	bcs.n	10012efc <gattm_add_attribute_req_handler+0x5c>
10012ebe:	2414      	movs	r4, #20
10012ec0:	4366      	muls	r6, r4
10012ec2:	19a8      	adds	r0, r5, r6
10012ec4:	2100      	movs	r1, #0
10012ec6:	2210      	movs	r2, #16
10012ec8:	4b0f      	ldr	r3, [pc, #60]	; (10012f08 <gattm_add_attribute_req_handler+0x68>)
10012eca:	3016      	adds	r0, #22
10012ecc:	4798      	blx	r3
10012ece:	7968      	ldrb	r0, [r5, #5]
10012ed0:	1c3a      	adds	r2, r7, #0
10012ed2:	4360      	muls	r0, r4
10012ed4:	1828      	adds	r0, r5, r0
10012ed6:	4b0d      	ldr	r3, [pc, #52]	; (10012f0c <gattm_add_attribute_req_handler+0x6c>)
10012ed8:	3016      	adds	r0, #22
10012eda:	9908      	ldr	r1, [sp, #32]
10012edc:	4798      	blx	r3
10012ede:	466a      	mov	r2, sp
10012ee0:	796b      	ldrb	r3, [r5, #5]
10012ee2:	8812      	ldrh	r2, [r2, #0]
10012ee4:	435c      	muls	r4, r3
10012ee6:	192c      	adds	r4, r5, r4
10012ee8:	8522      	strh	r2, [r4, #40]	; 0x28
10012eea:	466a      	mov	r2, sp
10012eec:	8892      	ldrh	r2, [r2, #4]
10012eee:	84e2      	strh	r2, [r4, #38]	; 0x26
10012ef0:	9a09      	ldr	r2, [sp, #36]	; 0x24
10012ef2:	8013      	strh	r3, [r2, #0]
10012ef4:	796b      	ldrb	r3, [r5, #5]
10012ef6:	3301      	adds	r3, #1
10012ef8:	716b      	strb	r3, [r5, #5]
10012efa:	2300      	movs	r3, #0
10012efc:	1c18      	adds	r0, r3, #0
10012efe:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10012f00:	10019ec4 	.word	0x10019ec4
10012f04:	1001308d 	.word	0x1001308d
10012f08:	10015191 	.word	0x10015191
10012f0c:	1001517f 	.word	0x1001517f

10012f10 <gattm_att_set_value_req_handler>:
10012f10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10012f12:	466b      	mov	r3, sp
10012f14:	1dde      	adds	r6, r3, #7
10012f16:	2300      	movs	r3, #0
10012f18:	1c0d      	adds	r5, r1, #0
10012f1a:	210c      	movs	r1, #12
10012f1c:	270b      	movs	r7, #11
10012f1e:	4c17      	ldr	r4, [pc, #92]	; (10012f7c <gattm_att_set_value_req_handler+0x6c>)
10012f20:	7033      	strb	r3, [r6, #0]
10012f22:	70e3      	strb	r3, [r4, #3]
10012f24:	4b16      	ldr	r3, [pc, #88]	; (10012f80 <gattm_att_set_value_req_handler+0x70>)
10012f26:	7021      	strb	r1, [r4, #0]
10012f28:	8819      	ldrh	r1, [r3, #0]
10012f2a:	881b      	ldrh	r3, [r3, #0]
10012f2c:	7220      	strb	r0, [r4, #8]
10012f2e:	0a1b      	lsrs	r3, r3, #8
10012f30:	7163      	strb	r3, [r4, #5]
10012f32:	0a00      	lsrs	r0, r0, #8
10012f34:	0a2b      	lsrs	r3, r5, #8
10012f36:	7121      	strb	r1, [r4, #4]
10012f38:	7260      	strb	r0, [r4, #9]
10012f3a:	1c11      	adds	r1, r2, #0
10012f3c:	72a5      	strb	r5, [r4, #10]
10012f3e:	1c2a      	adds	r2, r5, #0
10012f40:	72e3      	strb	r3, [r4, #11]
10012f42:	350c      	adds	r5, #12
10012f44:	4b0f      	ldr	r3, [pc, #60]	; (10012f84 <gattm_att_set_value_req_handler+0x74>)
10012f46:	4810      	ldr	r0, [pc, #64]	; (10012f88 <gattm_att_set_value_req_handler+0x78>)
10012f48:	7067      	strb	r7, [r4, #1]
10012f4a:	70a7      	strb	r7, [r4, #2]
10012f4c:	4798      	blx	r3
10012f4e:	b2a9      	uxth	r1, r5
10012f50:	4b0e      	ldr	r3, [pc, #56]	; (10012f8c <gattm_att_set_value_req_handler+0x7c>)
10012f52:	4d0f      	ldr	r5, [pc, #60]	; (10012f90 <gattm_att_set_value_req_handler+0x80>)
10012f54:	1c20      	adds	r0, r4, #0
10012f56:	802b      	strh	r3, [r5, #0]
10012f58:	1c0b      	adds	r3, r1, #0
10012f5a:	3b08      	subs	r3, #8
10012f5c:	71a3      	strb	r3, [r4, #6]
10012f5e:	121b      	asrs	r3, r3, #8
10012f60:	71e3      	strb	r3, [r4, #7]
10012f62:	4b0c      	ldr	r3, [pc, #48]	; (10012f94 <gattm_att_set_value_req_handler+0x84>)
10012f64:	80af      	strh	r7, [r5, #4]
10012f66:	4798      	blx	r3
10012f68:	1c30      	adds	r0, r6, #0
10012f6a:	4b0b      	ldr	r3, [pc, #44]	; (10012f98 <gattm_att_set_value_req_handler+0x88>)
10012f6c:	4798      	blx	r3
10012f6e:	7833      	ldrb	r3, [r6, #0]
10012f70:	20e2      	movs	r0, #226	; 0xe2
10012f72:	2b00      	cmp	r3, #0
10012f74:	d101      	bne.n	10012f7a <gattm_att_set_value_req_handler+0x6a>
10012f76:	68ab      	ldr	r3, [r5, #8]
10012f78:	7898      	ldrb	r0, [r3, #2]
10012f7a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10012f7c:	1001b12c 	.word	0x1001b12c
10012f80:	1001adbc 	.word	0x1001adbc
10012f84:	1001517f 	.word	0x1001517f
10012f88:	1001b138 	.word	0x1001b138
10012f8c:	00000b0d 	.word	0x00000b0d
10012f90:	1001adb0 	.word	0x1001adb0
10012f94:	100116e9 	.word	0x100116e9
10012f98:	1001174d 	.word	0x1001174d

10012f9c <gattm_att_get_value_req_handler>:
10012f9c:	b5f0      	push	{r4, r5, r6, r7, lr}
10012f9e:	b085      	sub	sp, #20
10012fa0:	9201      	str	r2, [sp, #4]
10012fa2:	220a      	movs	r2, #10
10012fa4:	1c04      	adds	r4, r0, #0
10012fa6:	481d      	ldr	r0, [pc, #116]	; (1001301c <gattm_att_get_value_req_handler+0x80>)
10012fa8:	ab02      	add	r3, sp, #8
10012faa:	1dde      	adds	r6, r3, #7
10012fac:	7002      	strb	r2, [r0, #0]
10012fae:	2300      	movs	r3, #0
10012fb0:	220b      	movs	r2, #11
10012fb2:	4d1b      	ldr	r5, [pc, #108]	; (10013020 <gattm_att_get_value_req_handler+0x84>)
10012fb4:	1c0f      	adds	r7, r1, #0
10012fb6:	8829      	ldrh	r1, [r5, #0]
10012fb8:	882d      	ldrh	r5, [r5, #0]
10012fba:	7101      	strb	r1, [r0, #4]
10012fbc:	0a2d      	lsrs	r5, r5, #8
10012fbe:	7145      	strb	r5, [r0, #5]
10012fc0:	0a25      	lsrs	r5, r4, #8
10012fc2:	7245      	strb	r5, [r0, #9]
10012fc4:	4917      	ldr	r1, [pc, #92]	; (10013024 <gattm_att_get_value_req_handler+0x88>)
10012fc6:	4d18      	ldr	r5, [pc, #96]	; (10013028 <gattm_att_get_value_req_handler+0x8c>)
10012fc8:	7033      	strb	r3, [r6, #0]
10012fca:	7042      	strb	r2, [r0, #1]
10012fcc:	7082      	strb	r2, [r0, #2]
10012fce:	70c3      	strb	r3, [r0, #3]
10012fd0:	8029      	strh	r1, [r5, #0]
10012fd2:	80aa      	strh	r2, [r5, #4]
10012fd4:	71c3      	strb	r3, [r0, #7]
10012fd6:	3a09      	subs	r2, #9
10012fd8:	210a      	movs	r1, #10
10012fda:	4b14      	ldr	r3, [pc, #80]	; (1001302c <gattm_att_get_value_req_handler+0x90>)
10012fdc:	7182      	strb	r2, [r0, #6]
10012fde:	7204      	strb	r4, [r0, #8]
10012fe0:	4798      	blx	r3
10012fe2:	1c30      	adds	r0, r6, #0
10012fe4:	4b12      	ldr	r3, [pc, #72]	; (10013030 <gattm_att_get_value_req_handler+0x94>)
10012fe6:	4798      	blx	r3
10012fe8:	7833      	ldrb	r3, [r6, #0]
10012fea:	20e2      	movs	r0, #226	; 0xe2
10012fec:	2b00      	cmp	r3, #0
10012fee:	d112      	bne.n	10013016 <gattm_att_get_value_req_handler+0x7a>
10012ff0:	68a9      	ldr	r1, [r5, #8]
10012ff2:	9801      	ldr	r0, [sp, #4]
10012ff4:	784d      	ldrb	r5, [r1, #1]
10012ff6:	780b      	ldrb	r3, [r1, #0]
10012ff8:	78ca      	ldrb	r2, [r1, #3]
10012ffa:	022d      	lsls	r5, r5, #8
10012ffc:	431d      	orrs	r5, r3
10012ffe:	788b      	ldrb	r3, [r1, #2]
10013000:	0212      	lsls	r2, r2, #8
10013002:	431a      	orrs	r2, r3
10013004:	803a      	strh	r2, [r7, #0]
10013006:	790e      	ldrb	r6, [r1, #4]
10013008:	4b0a      	ldr	r3, [pc, #40]	; (10013034 <gattm_att_get_value_req_handler+0x98>)
1001300a:	3105      	adds	r1, #5
1001300c:	4798      	blx	r3
1001300e:	20e2      	movs	r0, #226	; 0xe2
10013010:	42ac      	cmp	r4, r5
10013012:	d100      	bne.n	10013016 <gattm_att_get_value_req_handler+0x7a>
10013014:	1c30      	adds	r0, r6, #0
10013016:	b005      	add	sp, #20
10013018:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001301a:	46c0      	nop			; (mov r8, r8)
1001301c:	1001b12c 	.word	0x1001b12c
10013020:	1001adbc 	.word	0x1001adbc
10013024:	00000b0b 	.word	0x00000b0b
10013028:	1001adb0 	.word	0x1001adb0
1001302c:	100116e9 	.word	0x100116e9
10013030:	1001174d 	.word	0x1001174d
10013034:	1001517f 	.word	0x1001517f

10013038 <htpt_enable_rsp_handler>:
10013038:	780b      	ldrb	r3, [r1, #0]
1001303a:	7013      	strb	r3, [r2, #0]
1001303c:	784b      	ldrb	r3, [r1, #1]
1001303e:	7053      	strb	r3, [r2, #1]
10013040:	4770      	bx	lr

10013042 <htpt_temp_send_rsp_handler>:
10013042:	780b      	ldrb	r3, [r1, #0]
10013044:	7013      	strb	r3, [r2, #0]
10013046:	4770      	bx	lr

10013048 <htpt_meas_intv_upd_rsp_handler>:
10013048:	780b      	ldrb	r3, [r1, #0]
1001304a:	7013      	strb	r3, [r2, #0]
1001304c:	4770      	bx	lr

1001304e <htpt_meas_intv_chg_req_ind_handler>:
1001304e:	78cb      	ldrb	r3, [r1, #3]
10013050:	7889      	ldrb	r1, [r1, #2]
10013052:	021b      	lsls	r3, r3, #8
10013054:	430b      	orrs	r3, r1
10013056:	8013      	strh	r3, [r2, #0]
10013058:	4770      	bx	lr

1001305a <htpt_cfg_indntf_ind_handler>:
1001305a:	780b      	ldrb	r3, [r1, #0]
1001305c:	7013      	strb	r3, [r2, #0]
1001305e:	784b      	ldrb	r3, [r1, #1]
10013060:	7053      	strb	r3, [r2, #1]
10013062:	4770      	bx	lr

10013064 <__gnu_thumb1_case_sqi>:
10013064:	b402      	push	{r1}
10013066:	4671      	mov	r1, lr
10013068:	0849      	lsrs	r1, r1, #1
1001306a:	0049      	lsls	r1, r1, #1
1001306c:	5609      	ldrsb	r1, [r1, r0]
1001306e:	0049      	lsls	r1, r1, #1
10013070:	448e      	add	lr, r1
10013072:	bc02      	pop	{r1}
10013074:	4770      	bx	lr
10013076:	46c0      	nop			; (mov r8, r8)

10013078 <__gnu_thumb1_case_uqi>:
10013078:	b402      	push	{r1}
1001307a:	4671      	mov	r1, lr
1001307c:	0849      	lsrs	r1, r1, #1
1001307e:	0049      	lsls	r1, r1, #1
10013080:	5c09      	ldrb	r1, [r1, r0]
10013082:	0049      	lsls	r1, r1, #1
10013084:	448e      	add	lr, r1
10013086:	bc02      	pop	{r1}
10013088:	4770      	bx	lr
1001308a:	46c0      	nop			; (mov r8, r8)

1001308c <__aeabi_uidiv>:
1001308c:	2200      	movs	r2, #0
1001308e:	0843      	lsrs	r3, r0, #1
10013090:	428b      	cmp	r3, r1
10013092:	d374      	bcc.n	1001317e <__aeabi_uidiv+0xf2>
10013094:	0903      	lsrs	r3, r0, #4
10013096:	428b      	cmp	r3, r1
10013098:	d35f      	bcc.n	1001315a <__aeabi_uidiv+0xce>
1001309a:	0a03      	lsrs	r3, r0, #8
1001309c:	428b      	cmp	r3, r1
1001309e:	d344      	bcc.n	1001312a <__aeabi_uidiv+0x9e>
100130a0:	0b03      	lsrs	r3, r0, #12
100130a2:	428b      	cmp	r3, r1
100130a4:	d328      	bcc.n	100130f8 <__aeabi_uidiv+0x6c>
100130a6:	0c03      	lsrs	r3, r0, #16
100130a8:	428b      	cmp	r3, r1
100130aa:	d30d      	bcc.n	100130c8 <__aeabi_uidiv+0x3c>
100130ac:	22ff      	movs	r2, #255	; 0xff
100130ae:	0209      	lsls	r1, r1, #8
100130b0:	ba12      	rev	r2, r2
100130b2:	0c03      	lsrs	r3, r0, #16
100130b4:	428b      	cmp	r3, r1
100130b6:	d302      	bcc.n	100130be <__aeabi_uidiv+0x32>
100130b8:	1212      	asrs	r2, r2, #8
100130ba:	0209      	lsls	r1, r1, #8
100130bc:	d065      	beq.n	1001318a <__aeabi_uidiv+0xfe>
100130be:	0b03      	lsrs	r3, r0, #12
100130c0:	428b      	cmp	r3, r1
100130c2:	d319      	bcc.n	100130f8 <__aeabi_uidiv+0x6c>
100130c4:	e000      	b.n	100130c8 <__aeabi_uidiv+0x3c>
100130c6:	0a09      	lsrs	r1, r1, #8
100130c8:	0bc3      	lsrs	r3, r0, #15
100130ca:	428b      	cmp	r3, r1
100130cc:	d301      	bcc.n	100130d2 <__aeabi_uidiv+0x46>
100130ce:	03cb      	lsls	r3, r1, #15
100130d0:	1ac0      	subs	r0, r0, r3
100130d2:	4152      	adcs	r2, r2
100130d4:	0b83      	lsrs	r3, r0, #14
100130d6:	428b      	cmp	r3, r1
100130d8:	d301      	bcc.n	100130de <__aeabi_uidiv+0x52>
100130da:	038b      	lsls	r3, r1, #14
100130dc:	1ac0      	subs	r0, r0, r3
100130de:	4152      	adcs	r2, r2
100130e0:	0b43      	lsrs	r3, r0, #13
100130e2:	428b      	cmp	r3, r1
100130e4:	d301      	bcc.n	100130ea <__aeabi_uidiv+0x5e>
100130e6:	034b      	lsls	r3, r1, #13
100130e8:	1ac0      	subs	r0, r0, r3
100130ea:	4152      	adcs	r2, r2
100130ec:	0b03      	lsrs	r3, r0, #12
100130ee:	428b      	cmp	r3, r1
100130f0:	d301      	bcc.n	100130f6 <__aeabi_uidiv+0x6a>
100130f2:	030b      	lsls	r3, r1, #12
100130f4:	1ac0      	subs	r0, r0, r3
100130f6:	4152      	adcs	r2, r2
100130f8:	0ac3      	lsrs	r3, r0, #11
100130fa:	428b      	cmp	r3, r1
100130fc:	d301      	bcc.n	10013102 <__aeabi_uidiv+0x76>
100130fe:	02cb      	lsls	r3, r1, #11
10013100:	1ac0      	subs	r0, r0, r3
10013102:	4152      	adcs	r2, r2
10013104:	0a83      	lsrs	r3, r0, #10
10013106:	428b      	cmp	r3, r1
10013108:	d301      	bcc.n	1001310e <__aeabi_uidiv+0x82>
1001310a:	028b      	lsls	r3, r1, #10
1001310c:	1ac0      	subs	r0, r0, r3
1001310e:	4152      	adcs	r2, r2
10013110:	0a43      	lsrs	r3, r0, #9
10013112:	428b      	cmp	r3, r1
10013114:	d301      	bcc.n	1001311a <__aeabi_uidiv+0x8e>
10013116:	024b      	lsls	r3, r1, #9
10013118:	1ac0      	subs	r0, r0, r3
1001311a:	4152      	adcs	r2, r2
1001311c:	0a03      	lsrs	r3, r0, #8
1001311e:	428b      	cmp	r3, r1
10013120:	d301      	bcc.n	10013126 <__aeabi_uidiv+0x9a>
10013122:	020b      	lsls	r3, r1, #8
10013124:	1ac0      	subs	r0, r0, r3
10013126:	4152      	adcs	r2, r2
10013128:	d2cd      	bcs.n	100130c6 <__aeabi_uidiv+0x3a>
1001312a:	09c3      	lsrs	r3, r0, #7
1001312c:	428b      	cmp	r3, r1
1001312e:	d301      	bcc.n	10013134 <__aeabi_uidiv+0xa8>
10013130:	01cb      	lsls	r3, r1, #7
10013132:	1ac0      	subs	r0, r0, r3
10013134:	4152      	adcs	r2, r2
10013136:	0983      	lsrs	r3, r0, #6
10013138:	428b      	cmp	r3, r1
1001313a:	d301      	bcc.n	10013140 <__aeabi_uidiv+0xb4>
1001313c:	018b      	lsls	r3, r1, #6
1001313e:	1ac0      	subs	r0, r0, r3
10013140:	4152      	adcs	r2, r2
10013142:	0943      	lsrs	r3, r0, #5
10013144:	428b      	cmp	r3, r1
10013146:	d301      	bcc.n	1001314c <__aeabi_uidiv+0xc0>
10013148:	014b      	lsls	r3, r1, #5
1001314a:	1ac0      	subs	r0, r0, r3
1001314c:	4152      	adcs	r2, r2
1001314e:	0903      	lsrs	r3, r0, #4
10013150:	428b      	cmp	r3, r1
10013152:	d301      	bcc.n	10013158 <__aeabi_uidiv+0xcc>
10013154:	010b      	lsls	r3, r1, #4
10013156:	1ac0      	subs	r0, r0, r3
10013158:	4152      	adcs	r2, r2
1001315a:	08c3      	lsrs	r3, r0, #3
1001315c:	428b      	cmp	r3, r1
1001315e:	d301      	bcc.n	10013164 <__aeabi_uidiv+0xd8>
10013160:	00cb      	lsls	r3, r1, #3
10013162:	1ac0      	subs	r0, r0, r3
10013164:	4152      	adcs	r2, r2
10013166:	0883      	lsrs	r3, r0, #2
10013168:	428b      	cmp	r3, r1
1001316a:	d301      	bcc.n	10013170 <__aeabi_uidiv+0xe4>
1001316c:	008b      	lsls	r3, r1, #2
1001316e:	1ac0      	subs	r0, r0, r3
10013170:	4152      	adcs	r2, r2
10013172:	0843      	lsrs	r3, r0, #1
10013174:	428b      	cmp	r3, r1
10013176:	d301      	bcc.n	1001317c <__aeabi_uidiv+0xf0>
10013178:	004b      	lsls	r3, r1, #1
1001317a:	1ac0      	subs	r0, r0, r3
1001317c:	4152      	adcs	r2, r2
1001317e:	1a41      	subs	r1, r0, r1
10013180:	d200      	bcs.n	10013184 <__aeabi_uidiv+0xf8>
10013182:	4601      	mov	r1, r0
10013184:	4152      	adcs	r2, r2
10013186:	4610      	mov	r0, r2
10013188:	4770      	bx	lr
1001318a:	e7ff      	b.n	1001318c <__aeabi_uidiv+0x100>
1001318c:	b501      	push	{r0, lr}
1001318e:	2000      	movs	r0, #0
10013190:	f000 f8f0 	bl	10013374 <__aeabi_idiv0>
10013194:	bd02      	pop	{r1, pc}
10013196:	46c0      	nop			; (mov r8, r8)

10013198 <__aeabi_uidivmod>:
10013198:	2900      	cmp	r1, #0
1001319a:	d0f7      	beq.n	1001318c <__aeabi_uidiv+0x100>
1001319c:	e776      	b.n	1001308c <__aeabi_uidiv>
1001319e:	4770      	bx	lr

100131a0 <__aeabi_idiv>:
100131a0:	4603      	mov	r3, r0
100131a2:	430b      	orrs	r3, r1
100131a4:	d47f      	bmi.n	100132a6 <__aeabi_idiv+0x106>
100131a6:	2200      	movs	r2, #0
100131a8:	0843      	lsrs	r3, r0, #1
100131aa:	428b      	cmp	r3, r1
100131ac:	d374      	bcc.n	10013298 <__aeabi_idiv+0xf8>
100131ae:	0903      	lsrs	r3, r0, #4
100131b0:	428b      	cmp	r3, r1
100131b2:	d35f      	bcc.n	10013274 <__aeabi_idiv+0xd4>
100131b4:	0a03      	lsrs	r3, r0, #8
100131b6:	428b      	cmp	r3, r1
100131b8:	d344      	bcc.n	10013244 <__aeabi_idiv+0xa4>
100131ba:	0b03      	lsrs	r3, r0, #12
100131bc:	428b      	cmp	r3, r1
100131be:	d328      	bcc.n	10013212 <__aeabi_idiv+0x72>
100131c0:	0c03      	lsrs	r3, r0, #16
100131c2:	428b      	cmp	r3, r1
100131c4:	d30d      	bcc.n	100131e2 <__aeabi_idiv+0x42>
100131c6:	22ff      	movs	r2, #255	; 0xff
100131c8:	0209      	lsls	r1, r1, #8
100131ca:	ba12      	rev	r2, r2
100131cc:	0c03      	lsrs	r3, r0, #16
100131ce:	428b      	cmp	r3, r1
100131d0:	d302      	bcc.n	100131d8 <__aeabi_idiv+0x38>
100131d2:	1212      	asrs	r2, r2, #8
100131d4:	0209      	lsls	r1, r1, #8
100131d6:	d065      	beq.n	100132a4 <__aeabi_idiv+0x104>
100131d8:	0b03      	lsrs	r3, r0, #12
100131da:	428b      	cmp	r3, r1
100131dc:	d319      	bcc.n	10013212 <__aeabi_idiv+0x72>
100131de:	e000      	b.n	100131e2 <__aeabi_idiv+0x42>
100131e0:	0a09      	lsrs	r1, r1, #8
100131e2:	0bc3      	lsrs	r3, r0, #15
100131e4:	428b      	cmp	r3, r1
100131e6:	d301      	bcc.n	100131ec <__aeabi_idiv+0x4c>
100131e8:	03cb      	lsls	r3, r1, #15
100131ea:	1ac0      	subs	r0, r0, r3
100131ec:	4152      	adcs	r2, r2
100131ee:	0b83      	lsrs	r3, r0, #14
100131f0:	428b      	cmp	r3, r1
100131f2:	d301      	bcc.n	100131f8 <__aeabi_idiv+0x58>
100131f4:	038b      	lsls	r3, r1, #14
100131f6:	1ac0      	subs	r0, r0, r3
100131f8:	4152      	adcs	r2, r2
100131fa:	0b43      	lsrs	r3, r0, #13
100131fc:	428b      	cmp	r3, r1
100131fe:	d301      	bcc.n	10013204 <__aeabi_idiv+0x64>
10013200:	034b      	lsls	r3, r1, #13
10013202:	1ac0      	subs	r0, r0, r3
10013204:	4152      	adcs	r2, r2
10013206:	0b03      	lsrs	r3, r0, #12
10013208:	428b      	cmp	r3, r1
1001320a:	d301      	bcc.n	10013210 <__aeabi_idiv+0x70>
1001320c:	030b      	lsls	r3, r1, #12
1001320e:	1ac0      	subs	r0, r0, r3
10013210:	4152      	adcs	r2, r2
10013212:	0ac3      	lsrs	r3, r0, #11
10013214:	428b      	cmp	r3, r1
10013216:	d301      	bcc.n	1001321c <__aeabi_idiv+0x7c>
10013218:	02cb      	lsls	r3, r1, #11
1001321a:	1ac0      	subs	r0, r0, r3
1001321c:	4152      	adcs	r2, r2
1001321e:	0a83      	lsrs	r3, r0, #10
10013220:	428b      	cmp	r3, r1
10013222:	d301      	bcc.n	10013228 <__aeabi_idiv+0x88>
10013224:	028b      	lsls	r3, r1, #10
10013226:	1ac0      	subs	r0, r0, r3
10013228:	4152      	adcs	r2, r2
1001322a:	0a43      	lsrs	r3, r0, #9
1001322c:	428b      	cmp	r3, r1
1001322e:	d301      	bcc.n	10013234 <__aeabi_idiv+0x94>
10013230:	024b      	lsls	r3, r1, #9
10013232:	1ac0      	subs	r0, r0, r3
10013234:	4152      	adcs	r2, r2
10013236:	0a03      	lsrs	r3, r0, #8
10013238:	428b      	cmp	r3, r1
1001323a:	d301      	bcc.n	10013240 <__aeabi_idiv+0xa0>
1001323c:	020b      	lsls	r3, r1, #8
1001323e:	1ac0      	subs	r0, r0, r3
10013240:	4152      	adcs	r2, r2
10013242:	d2cd      	bcs.n	100131e0 <__aeabi_idiv+0x40>
10013244:	09c3      	lsrs	r3, r0, #7
10013246:	428b      	cmp	r3, r1
10013248:	d301      	bcc.n	1001324e <__aeabi_idiv+0xae>
1001324a:	01cb      	lsls	r3, r1, #7
1001324c:	1ac0      	subs	r0, r0, r3
1001324e:	4152      	adcs	r2, r2
10013250:	0983      	lsrs	r3, r0, #6
10013252:	428b      	cmp	r3, r1
10013254:	d301      	bcc.n	1001325a <__aeabi_idiv+0xba>
10013256:	018b      	lsls	r3, r1, #6
10013258:	1ac0      	subs	r0, r0, r3
1001325a:	4152      	adcs	r2, r2
1001325c:	0943      	lsrs	r3, r0, #5
1001325e:	428b      	cmp	r3, r1
10013260:	d301      	bcc.n	10013266 <__aeabi_idiv+0xc6>
10013262:	014b      	lsls	r3, r1, #5
10013264:	1ac0      	subs	r0, r0, r3
10013266:	4152      	adcs	r2, r2
10013268:	0903      	lsrs	r3, r0, #4
1001326a:	428b      	cmp	r3, r1
1001326c:	d301      	bcc.n	10013272 <__aeabi_idiv+0xd2>
1001326e:	010b      	lsls	r3, r1, #4
10013270:	1ac0      	subs	r0, r0, r3
10013272:	4152      	adcs	r2, r2
10013274:	08c3      	lsrs	r3, r0, #3
10013276:	428b      	cmp	r3, r1
10013278:	d301      	bcc.n	1001327e <__aeabi_idiv+0xde>
1001327a:	00cb      	lsls	r3, r1, #3
1001327c:	1ac0      	subs	r0, r0, r3
1001327e:	4152      	adcs	r2, r2
10013280:	0883      	lsrs	r3, r0, #2
10013282:	428b      	cmp	r3, r1
10013284:	d301      	bcc.n	1001328a <__aeabi_idiv+0xea>
10013286:	008b      	lsls	r3, r1, #2
10013288:	1ac0      	subs	r0, r0, r3
1001328a:	4152      	adcs	r2, r2
1001328c:	0843      	lsrs	r3, r0, #1
1001328e:	428b      	cmp	r3, r1
10013290:	d301      	bcc.n	10013296 <__aeabi_idiv+0xf6>
10013292:	004b      	lsls	r3, r1, #1
10013294:	1ac0      	subs	r0, r0, r3
10013296:	4152      	adcs	r2, r2
10013298:	1a41      	subs	r1, r0, r1
1001329a:	d200      	bcs.n	1001329e <__aeabi_idiv+0xfe>
1001329c:	4601      	mov	r1, r0
1001329e:	4152      	adcs	r2, r2
100132a0:	4610      	mov	r0, r2
100132a2:	4770      	bx	lr
100132a4:	e05d      	b.n	10013362 <__aeabi_idiv+0x1c2>
100132a6:	0fca      	lsrs	r2, r1, #31
100132a8:	d000      	beq.n	100132ac <__aeabi_idiv+0x10c>
100132aa:	4249      	negs	r1, r1
100132ac:	1003      	asrs	r3, r0, #32
100132ae:	d300      	bcc.n	100132b2 <__aeabi_idiv+0x112>
100132b0:	4240      	negs	r0, r0
100132b2:	4053      	eors	r3, r2
100132b4:	2200      	movs	r2, #0
100132b6:	469c      	mov	ip, r3
100132b8:	0903      	lsrs	r3, r0, #4
100132ba:	428b      	cmp	r3, r1
100132bc:	d32d      	bcc.n	1001331a <__aeabi_idiv+0x17a>
100132be:	0a03      	lsrs	r3, r0, #8
100132c0:	428b      	cmp	r3, r1
100132c2:	d312      	bcc.n	100132ea <__aeabi_idiv+0x14a>
100132c4:	22fc      	movs	r2, #252	; 0xfc
100132c6:	0189      	lsls	r1, r1, #6
100132c8:	ba12      	rev	r2, r2
100132ca:	0a03      	lsrs	r3, r0, #8
100132cc:	428b      	cmp	r3, r1
100132ce:	d30c      	bcc.n	100132ea <__aeabi_idiv+0x14a>
100132d0:	0189      	lsls	r1, r1, #6
100132d2:	1192      	asrs	r2, r2, #6
100132d4:	428b      	cmp	r3, r1
100132d6:	d308      	bcc.n	100132ea <__aeabi_idiv+0x14a>
100132d8:	0189      	lsls	r1, r1, #6
100132da:	1192      	asrs	r2, r2, #6
100132dc:	428b      	cmp	r3, r1
100132de:	d304      	bcc.n	100132ea <__aeabi_idiv+0x14a>
100132e0:	0189      	lsls	r1, r1, #6
100132e2:	d03a      	beq.n	1001335a <__aeabi_idiv+0x1ba>
100132e4:	1192      	asrs	r2, r2, #6
100132e6:	e000      	b.n	100132ea <__aeabi_idiv+0x14a>
100132e8:	0989      	lsrs	r1, r1, #6
100132ea:	09c3      	lsrs	r3, r0, #7
100132ec:	428b      	cmp	r3, r1
100132ee:	d301      	bcc.n	100132f4 <__aeabi_idiv+0x154>
100132f0:	01cb      	lsls	r3, r1, #7
100132f2:	1ac0      	subs	r0, r0, r3
100132f4:	4152      	adcs	r2, r2
100132f6:	0983      	lsrs	r3, r0, #6
100132f8:	428b      	cmp	r3, r1
100132fa:	d301      	bcc.n	10013300 <__aeabi_idiv+0x160>
100132fc:	018b      	lsls	r3, r1, #6
100132fe:	1ac0      	subs	r0, r0, r3
10013300:	4152      	adcs	r2, r2
10013302:	0943      	lsrs	r3, r0, #5
10013304:	428b      	cmp	r3, r1
10013306:	d301      	bcc.n	1001330c <__aeabi_idiv+0x16c>
10013308:	014b      	lsls	r3, r1, #5
1001330a:	1ac0      	subs	r0, r0, r3
1001330c:	4152      	adcs	r2, r2
1001330e:	0903      	lsrs	r3, r0, #4
10013310:	428b      	cmp	r3, r1
10013312:	d301      	bcc.n	10013318 <__aeabi_idiv+0x178>
10013314:	010b      	lsls	r3, r1, #4
10013316:	1ac0      	subs	r0, r0, r3
10013318:	4152      	adcs	r2, r2
1001331a:	08c3      	lsrs	r3, r0, #3
1001331c:	428b      	cmp	r3, r1
1001331e:	d301      	bcc.n	10013324 <__aeabi_idiv+0x184>
10013320:	00cb      	lsls	r3, r1, #3
10013322:	1ac0      	subs	r0, r0, r3
10013324:	4152      	adcs	r2, r2
10013326:	0883      	lsrs	r3, r0, #2
10013328:	428b      	cmp	r3, r1
1001332a:	d301      	bcc.n	10013330 <__aeabi_idiv+0x190>
1001332c:	008b      	lsls	r3, r1, #2
1001332e:	1ac0      	subs	r0, r0, r3
10013330:	4152      	adcs	r2, r2
10013332:	d2d9      	bcs.n	100132e8 <__aeabi_idiv+0x148>
10013334:	0843      	lsrs	r3, r0, #1
10013336:	428b      	cmp	r3, r1
10013338:	d301      	bcc.n	1001333e <__aeabi_idiv+0x19e>
1001333a:	004b      	lsls	r3, r1, #1
1001333c:	1ac0      	subs	r0, r0, r3
1001333e:	4152      	adcs	r2, r2
10013340:	1a41      	subs	r1, r0, r1
10013342:	d200      	bcs.n	10013346 <__aeabi_idiv+0x1a6>
10013344:	4601      	mov	r1, r0
10013346:	4663      	mov	r3, ip
10013348:	4152      	adcs	r2, r2
1001334a:	105b      	asrs	r3, r3, #1
1001334c:	4610      	mov	r0, r2
1001334e:	d301      	bcc.n	10013354 <__aeabi_idiv+0x1b4>
10013350:	4240      	negs	r0, r0
10013352:	2b00      	cmp	r3, #0
10013354:	d500      	bpl.n	10013358 <__aeabi_idiv+0x1b8>
10013356:	4249      	negs	r1, r1
10013358:	4770      	bx	lr
1001335a:	4663      	mov	r3, ip
1001335c:	105b      	asrs	r3, r3, #1
1001335e:	d300      	bcc.n	10013362 <__aeabi_idiv+0x1c2>
10013360:	4240      	negs	r0, r0
10013362:	b501      	push	{r0, lr}
10013364:	2000      	movs	r0, #0
10013366:	f000 f805 	bl	10013374 <__aeabi_idiv0>
1001336a:	bd02      	pop	{r1, pc}

1001336c <__aeabi_idivmod>:
1001336c:	2900      	cmp	r1, #0
1001336e:	d0f8      	beq.n	10013362 <__aeabi_idiv+0x1c2>
10013370:	e716      	b.n	100131a0 <__aeabi_idiv>
10013372:	4770      	bx	lr

10013374 <__aeabi_idiv0>:
10013374:	4770      	bx	lr
10013376:	46c0      	nop			; (mov r8, r8)

10013378 <__aeabi_cdrcmple>:
10013378:	4684      	mov	ip, r0
1001337a:	1c10      	adds	r0, r2, #0
1001337c:	4662      	mov	r2, ip
1001337e:	468c      	mov	ip, r1
10013380:	1c19      	adds	r1, r3, #0
10013382:	4663      	mov	r3, ip
10013384:	e000      	b.n	10013388 <__aeabi_cdcmpeq>
10013386:	46c0      	nop			; (mov r8, r8)

10013388 <__aeabi_cdcmpeq>:
10013388:	b51f      	push	{r0, r1, r2, r3, r4, lr}
1001338a:	f000 fff5 	bl	10014378 <__ledf2>
1001338e:	2800      	cmp	r0, #0
10013390:	d401      	bmi.n	10013396 <__aeabi_cdcmpeq+0xe>
10013392:	2100      	movs	r1, #0
10013394:	42c8      	cmn	r0, r1
10013396:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

10013398 <__aeabi_dcmpeq>:
10013398:	b510      	push	{r4, lr}
1001339a:	f000 ff49 	bl	10014230 <__eqdf2>
1001339e:	4240      	negs	r0, r0
100133a0:	3001      	adds	r0, #1
100133a2:	bd10      	pop	{r4, pc}

100133a4 <__aeabi_dcmplt>:
100133a4:	b510      	push	{r4, lr}
100133a6:	f000 ffe7 	bl	10014378 <__ledf2>
100133aa:	2800      	cmp	r0, #0
100133ac:	db01      	blt.n	100133b2 <__aeabi_dcmplt+0xe>
100133ae:	2000      	movs	r0, #0
100133b0:	bd10      	pop	{r4, pc}
100133b2:	2001      	movs	r0, #1
100133b4:	bd10      	pop	{r4, pc}
100133b6:	46c0      	nop			; (mov r8, r8)

100133b8 <__aeabi_dcmple>:
100133b8:	b510      	push	{r4, lr}
100133ba:	f000 ffdd 	bl	10014378 <__ledf2>
100133be:	2800      	cmp	r0, #0
100133c0:	dd01      	ble.n	100133c6 <__aeabi_dcmple+0xe>
100133c2:	2000      	movs	r0, #0
100133c4:	bd10      	pop	{r4, pc}
100133c6:	2001      	movs	r0, #1
100133c8:	bd10      	pop	{r4, pc}
100133ca:	46c0      	nop			; (mov r8, r8)

100133cc <__aeabi_dcmpgt>:
100133cc:	b510      	push	{r4, lr}
100133ce:	f000 ff6f 	bl	100142b0 <__gedf2>
100133d2:	2800      	cmp	r0, #0
100133d4:	dc01      	bgt.n	100133da <__aeabi_dcmpgt+0xe>
100133d6:	2000      	movs	r0, #0
100133d8:	bd10      	pop	{r4, pc}
100133da:	2001      	movs	r0, #1
100133dc:	bd10      	pop	{r4, pc}
100133de:	46c0      	nop			; (mov r8, r8)

100133e0 <__aeabi_dcmpge>:
100133e0:	b510      	push	{r4, lr}
100133e2:	f000 ff65 	bl	100142b0 <__gedf2>
100133e6:	2800      	cmp	r0, #0
100133e8:	da01      	bge.n	100133ee <__aeabi_dcmpge+0xe>
100133ea:	2000      	movs	r0, #0
100133ec:	bd10      	pop	{r4, pc}
100133ee:	2001      	movs	r0, #1
100133f0:	bd10      	pop	{r4, pc}
100133f2:	46c0      	nop			; (mov r8, r8)

100133f4 <__aeabi_cfrcmple>:
100133f4:	4684      	mov	ip, r0
100133f6:	1c08      	adds	r0, r1, #0
100133f8:	4661      	mov	r1, ip
100133fa:	e7ff      	b.n	100133fc <__aeabi_cfcmpeq>

100133fc <__aeabi_cfcmpeq>:
100133fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
100133fe:	f000 fb91 	bl	10013b24 <__lesf2>
10013402:	2800      	cmp	r0, #0
10013404:	d401      	bmi.n	1001340a <__aeabi_cfcmpeq+0xe>
10013406:	2100      	movs	r1, #0
10013408:	42c8      	cmn	r0, r1
1001340a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

1001340c <__aeabi_fcmpeq>:
1001340c:	b510      	push	{r4, lr}
1001340e:	f000 fb1d 	bl	10013a4c <__eqsf2>
10013412:	4240      	negs	r0, r0
10013414:	3001      	adds	r0, #1
10013416:	bd10      	pop	{r4, pc}

10013418 <__aeabi_fcmplt>:
10013418:	b510      	push	{r4, lr}
1001341a:	f000 fb83 	bl	10013b24 <__lesf2>
1001341e:	2800      	cmp	r0, #0
10013420:	db01      	blt.n	10013426 <__aeabi_fcmplt+0xe>
10013422:	2000      	movs	r0, #0
10013424:	bd10      	pop	{r4, pc}
10013426:	2001      	movs	r0, #1
10013428:	bd10      	pop	{r4, pc}
1001342a:	46c0      	nop			; (mov r8, r8)

1001342c <__aeabi_fcmple>:
1001342c:	b510      	push	{r4, lr}
1001342e:	f000 fb79 	bl	10013b24 <__lesf2>
10013432:	2800      	cmp	r0, #0
10013434:	dd01      	ble.n	1001343a <__aeabi_fcmple+0xe>
10013436:	2000      	movs	r0, #0
10013438:	bd10      	pop	{r4, pc}
1001343a:	2001      	movs	r0, #1
1001343c:	bd10      	pop	{r4, pc}
1001343e:	46c0      	nop			; (mov r8, r8)

10013440 <__aeabi_fcmpgt>:
10013440:	b510      	push	{r4, lr}
10013442:	f000 fb2b 	bl	10013a9c <__gesf2>
10013446:	2800      	cmp	r0, #0
10013448:	dc01      	bgt.n	1001344e <__aeabi_fcmpgt+0xe>
1001344a:	2000      	movs	r0, #0
1001344c:	bd10      	pop	{r4, pc}
1001344e:	2001      	movs	r0, #1
10013450:	bd10      	pop	{r4, pc}
10013452:	46c0      	nop			; (mov r8, r8)

10013454 <__aeabi_fcmpge>:
10013454:	b510      	push	{r4, lr}
10013456:	f000 fb21 	bl	10013a9c <__gesf2>
1001345a:	2800      	cmp	r0, #0
1001345c:	da01      	bge.n	10013462 <__aeabi_fcmpge+0xe>
1001345e:	2000      	movs	r0, #0
10013460:	bd10      	pop	{r4, pc}
10013462:	2001      	movs	r0, #1
10013464:	bd10      	pop	{r4, pc}
10013466:	46c0      	nop			; (mov r8, r8)

10013468 <__aeabi_lmul>:
10013468:	b5f0      	push	{r4, r5, r6, r7, lr}
1001346a:	464f      	mov	r7, r9
1001346c:	4646      	mov	r6, r8
1001346e:	b4c0      	push	{r6, r7}
10013470:	0416      	lsls	r6, r2, #16
10013472:	0c36      	lsrs	r6, r6, #16
10013474:	4699      	mov	r9, r3
10013476:	0033      	movs	r3, r6
10013478:	0405      	lsls	r5, r0, #16
1001347a:	0c2c      	lsrs	r4, r5, #16
1001347c:	0c07      	lsrs	r7, r0, #16
1001347e:	0c15      	lsrs	r5, r2, #16
10013480:	4363      	muls	r3, r4
10013482:	437e      	muls	r6, r7
10013484:	436f      	muls	r7, r5
10013486:	4365      	muls	r5, r4
10013488:	0c1c      	lsrs	r4, r3, #16
1001348a:	19ad      	adds	r5, r5, r6
1001348c:	1964      	adds	r4, r4, r5
1001348e:	469c      	mov	ip, r3
10013490:	42a6      	cmp	r6, r4
10013492:	d903      	bls.n	1001349c <__aeabi_lmul+0x34>
10013494:	2380      	movs	r3, #128	; 0x80
10013496:	025b      	lsls	r3, r3, #9
10013498:	4698      	mov	r8, r3
1001349a:	4447      	add	r7, r8
1001349c:	4663      	mov	r3, ip
1001349e:	0c25      	lsrs	r5, r4, #16
100134a0:	19ef      	adds	r7, r5, r7
100134a2:	041d      	lsls	r5, r3, #16
100134a4:	464b      	mov	r3, r9
100134a6:	434a      	muls	r2, r1
100134a8:	4343      	muls	r3, r0
100134aa:	0c2d      	lsrs	r5, r5, #16
100134ac:	0424      	lsls	r4, r4, #16
100134ae:	1964      	adds	r4, r4, r5
100134b0:	1899      	adds	r1, r3, r2
100134b2:	19c9      	adds	r1, r1, r7
100134b4:	0020      	movs	r0, r4
100134b6:	bc0c      	pop	{r2, r3}
100134b8:	4690      	mov	r8, r2
100134ba:	4699      	mov	r9, r3
100134bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
100134be:	46c0      	nop			; (mov r8, r8)

100134c0 <__aeabi_f2uiz>:
100134c0:	219e      	movs	r1, #158	; 0x9e
100134c2:	b510      	push	{r4, lr}
100134c4:	05c9      	lsls	r1, r1, #23
100134c6:	1c04      	adds	r4, r0, #0
100134c8:	f7ff ffc4 	bl	10013454 <__aeabi_fcmpge>
100134cc:	2800      	cmp	r0, #0
100134ce:	d103      	bne.n	100134d8 <__aeabi_f2uiz+0x18>
100134d0:	1c20      	adds	r0, r4, #0
100134d2:	f000 fe05 	bl	100140e0 <__aeabi_f2iz>
100134d6:	bd10      	pop	{r4, pc}
100134d8:	219e      	movs	r1, #158	; 0x9e
100134da:	1c20      	adds	r0, r4, #0
100134dc:	05c9      	lsls	r1, r1, #23
100134de:	f000 fc79 	bl	10013dd4 <__aeabi_fsub>
100134e2:	f000 fdfd 	bl	100140e0 <__aeabi_f2iz>
100134e6:	2380      	movs	r3, #128	; 0x80
100134e8:	061b      	lsls	r3, r3, #24
100134ea:	469c      	mov	ip, r3
100134ec:	4460      	add	r0, ip
100134ee:	e7f2      	b.n	100134d6 <__aeabi_f2uiz+0x16>

100134f0 <__aeabi_d2uiz>:
100134f0:	b570      	push	{r4, r5, r6, lr}
100134f2:	2200      	movs	r2, #0
100134f4:	4b0c      	ldr	r3, [pc, #48]	; (10013528 <__aeabi_d2uiz+0x38>)
100134f6:	0004      	movs	r4, r0
100134f8:	000d      	movs	r5, r1
100134fa:	f7ff ff71 	bl	100133e0 <__aeabi_dcmpge>
100134fe:	2800      	cmp	r0, #0
10013500:	d104      	bne.n	1001350c <__aeabi_d2uiz+0x1c>
10013502:	0020      	movs	r0, r4
10013504:	0029      	movs	r1, r5
10013506:	f001 fd6f 	bl	10014fe8 <__aeabi_d2iz>
1001350a:	bd70      	pop	{r4, r5, r6, pc}
1001350c:	4b06      	ldr	r3, [pc, #24]	; (10013528 <__aeabi_d2uiz+0x38>)
1001350e:	2200      	movs	r2, #0
10013510:	0020      	movs	r0, r4
10013512:	0029      	movs	r1, r5
10013514:	f001 fa14 	bl	10014940 <__aeabi_dsub>
10013518:	f001 fd66 	bl	10014fe8 <__aeabi_d2iz>
1001351c:	2380      	movs	r3, #128	; 0x80
1001351e:	061b      	lsls	r3, r3, #24
10013520:	469c      	mov	ip, r3
10013522:	4460      	add	r0, ip
10013524:	e7f1      	b.n	1001350a <__aeabi_d2uiz+0x1a>
10013526:	46c0      	nop			; (mov r8, r8)
10013528:	41e00000 	.word	0x41e00000

1001352c <__aeabi_fadd>:
1001352c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1001352e:	024a      	lsls	r2, r1, #9
10013530:	0243      	lsls	r3, r0, #9
10013532:	0044      	lsls	r4, r0, #1
10013534:	004e      	lsls	r6, r1, #1
10013536:	0fc5      	lsrs	r5, r0, #31
10013538:	0e24      	lsrs	r4, r4, #24
1001353a:	0028      	movs	r0, r5
1001353c:	099b      	lsrs	r3, r3, #6
1001353e:	0e36      	lsrs	r6, r6, #24
10013540:	0fc9      	lsrs	r1, r1, #31
10013542:	0992      	lsrs	r2, r2, #6
10013544:	428d      	cmp	r5, r1
10013546:	d059      	beq.n	100135fc <__aeabi_fadd+0xd0>
10013548:	1ba0      	subs	r0, r4, r6
1001354a:	2800      	cmp	r0, #0
1001354c:	dc00      	bgt.n	10013550 <__aeabi_fadd+0x24>
1001354e:	e08d      	b.n	1001366c <__aeabi_fadd+0x140>
10013550:	2e00      	cmp	r6, #0
10013552:	d11a      	bne.n	1001358a <__aeabi_fadd+0x5e>
10013554:	2a00      	cmp	r2, #0
10013556:	d000      	beq.n	1001355a <__aeabi_fadd+0x2e>
10013558:	e079      	b.n	1001364e <__aeabi_fadd+0x122>
1001355a:	075a      	lsls	r2, r3, #29
1001355c:	d004      	beq.n	10013568 <__aeabi_fadd+0x3c>
1001355e:	220f      	movs	r2, #15
10013560:	401a      	ands	r2, r3
10013562:	2a04      	cmp	r2, #4
10013564:	d000      	beq.n	10013568 <__aeabi_fadd+0x3c>
10013566:	3304      	adds	r3, #4
10013568:	015a      	lsls	r2, r3, #5
1001356a:	d538      	bpl.n	100135de <__aeabi_fadd+0xb2>
1001356c:	3401      	adds	r4, #1
1001356e:	2cff      	cmp	r4, #255	; 0xff
10013570:	d100      	bne.n	10013574 <__aeabi_fadd+0x48>
10013572:	e089      	b.n	10013688 <__aeabi_fadd+0x15c>
10013574:	0028      	movs	r0, r5
10013576:	019b      	lsls	r3, r3, #6
10013578:	0a5b      	lsrs	r3, r3, #9
1001357a:	b2e4      	uxtb	r4, r4
1001357c:	025b      	lsls	r3, r3, #9
1001357e:	05e4      	lsls	r4, r4, #23
10013580:	0a5b      	lsrs	r3, r3, #9
10013582:	4323      	orrs	r3, r4
10013584:	07c0      	lsls	r0, r0, #31
10013586:	4318      	orrs	r0, r3
10013588:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1001358a:	2cff      	cmp	r4, #255	; 0xff
1001358c:	d0e5      	beq.n	1001355a <__aeabi_fadd+0x2e>
1001358e:	2180      	movs	r1, #128	; 0x80
10013590:	04c9      	lsls	r1, r1, #19
10013592:	430a      	orrs	r2, r1
10013594:	281b      	cmp	r0, #27
10013596:	dd00      	ble.n	1001359a <__aeabi_fadd+0x6e>
10013598:	e089      	b.n	100136ae <__aeabi_fadd+0x182>
1001359a:	0016      	movs	r6, r2
1001359c:	2120      	movs	r1, #32
1001359e:	40c6      	lsrs	r6, r0
100135a0:	1a08      	subs	r0, r1, r0
100135a2:	4082      	lsls	r2, r0
100135a4:	1e51      	subs	r1, r2, #1
100135a6:	418a      	sbcs	r2, r1
100135a8:	4332      	orrs	r2, r6
100135aa:	1a9b      	subs	r3, r3, r2
100135ac:	015a      	lsls	r2, r3, #5
100135ae:	d514      	bpl.n	100135da <__aeabi_fadd+0xae>
100135b0:	019b      	lsls	r3, r3, #6
100135b2:	099e      	lsrs	r6, r3, #6
100135b4:	0030      	movs	r0, r6
100135b6:	f001 fd85 	bl	100150c4 <__clzsi2>
100135ba:	3805      	subs	r0, #5
100135bc:	4086      	lsls	r6, r0
100135be:	4284      	cmp	r4, r0
100135c0:	dc65      	bgt.n	1001368e <__aeabi_fadd+0x162>
100135c2:	1b04      	subs	r4, r0, r4
100135c4:	0033      	movs	r3, r6
100135c6:	2020      	movs	r0, #32
100135c8:	3401      	adds	r4, #1
100135ca:	40e3      	lsrs	r3, r4
100135cc:	1b04      	subs	r4, r0, r4
100135ce:	40a6      	lsls	r6, r4
100135d0:	1e72      	subs	r2, r6, #1
100135d2:	4196      	sbcs	r6, r2
100135d4:	2400      	movs	r4, #0
100135d6:	4333      	orrs	r3, r6
100135d8:	e7bf      	b.n	1001355a <__aeabi_fadd+0x2e>
100135da:	075a      	lsls	r2, r3, #29
100135dc:	d1bf      	bne.n	1001355e <__aeabi_fadd+0x32>
100135de:	08df      	lsrs	r7, r3, #3
100135e0:	0028      	movs	r0, r5
100135e2:	2cff      	cmp	r4, #255	; 0xff
100135e4:	d12f      	bne.n	10013646 <__aeabi_fadd+0x11a>
100135e6:	2f00      	cmp	r7, #0
100135e8:	d100      	bne.n	100135ec <__aeabi_fadd+0xc0>
100135ea:	e087      	b.n	100136fc <__aeabi_fadd+0x1d0>
100135ec:	2280      	movs	r2, #128	; 0x80
100135ee:	03d2      	lsls	r2, r2, #15
100135f0:	0013      	movs	r3, r2
100135f2:	433b      	orrs	r3, r7
100135f4:	025b      	lsls	r3, r3, #9
100135f6:	0a5b      	lsrs	r3, r3, #9
100135f8:	24ff      	movs	r4, #255	; 0xff
100135fa:	e7bf      	b.n	1001357c <__aeabi_fadd+0x50>
100135fc:	1ba1      	subs	r1, r4, r6
100135fe:	2900      	cmp	r1, #0
10013600:	dd49      	ble.n	10013696 <__aeabi_fadd+0x16a>
10013602:	2e00      	cmp	r6, #0
10013604:	d029      	beq.n	1001365a <__aeabi_fadd+0x12e>
10013606:	2cff      	cmp	r4, #255	; 0xff
10013608:	d0a7      	beq.n	1001355a <__aeabi_fadd+0x2e>
1001360a:	2680      	movs	r6, #128	; 0x80
1001360c:	04f6      	lsls	r6, r6, #19
1001360e:	4332      	orrs	r2, r6
10013610:	291b      	cmp	r1, #27
10013612:	dd00      	ble.n	10013616 <__aeabi_fadd+0xea>
10013614:	e08d      	b.n	10013732 <__aeabi_fadd+0x206>
10013616:	0017      	movs	r7, r2
10013618:	2620      	movs	r6, #32
1001361a:	40cf      	lsrs	r7, r1
1001361c:	1a71      	subs	r1, r6, r1
1001361e:	408a      	lsls	r2, r1
10013620:	1e51      	subs	r1, r2, #1
10013622:	418a      	sbcs	r2, r1
10013624:	433a      	orrs	r2, r7
10013626:	189b      	adds	r3, r3, r2
10013628:	015a      	lsls	r2, r3, #5
1001362a:	d5d6      	bpl.n	100135da <__aeabi_fadd+0xae>
1001362c:	3401      	adds	r4, #1
1001362e:	2cff      	cmp	r4, #255	; 0xff
10013630:	d064      	beq.n	100136fc <__aeabi_fadd+0x1d0>
10013632:	2201      	movs	r2, #1
10013634:	4976      	ldr	r1, [pc, #472]	; (10013810 <__aeabi_fadd+0x2e4>)
10013636:	401a      	ands	r2, r3
10013638:	085b      	lsrs	r3, r3, #1
1001363a:	400b      	ands	r3, r1
1001363c:	4313      	orrs	r3, r2
1001363e:	e78c      	b.n	1001355a <__aeabi_fadd+0x2e>
10013640:	1e03      	subs	r3, r0, #0
10013642:	d1ca      	bne.n	100135da <__aeabi_fadd+0xae>
10013644:	2000      	movs	r0, #0
10013646:	027b      	lsls	r3, r7, #9
10013648:	0a5b      	lsrs	r3, r3, #9
1001364a:	b2e4      	uxtb	r4, r4
1001364c:	e796      	b.n	1001357c <__aeabi_fadd+0x50>
1001364e:	3801      	subs	r0, #1
10013650:	2800      	cmp	r0, #0
10013652:	d0aa      	beq.n	100135aa <__aeabi_fadd+0x7e>
10013654:	2cff      	cmp	r4, #255	; 0xff
10013656:	d19d      	bne.n	10013594 <__aeabi_fadd+0x68>
10013658:	e77f      	b.n	1001355a <__aeabi_fadd+0x2e>
1001365a:	2a00      	cmp	r2, #0
1001365c:	d100      	bne.n	10013660 <__aeabi_fadd+0x134>
1001365e:	e77c      	b.n	1001355a <__aeabi_fadd+0x2e>
10013660:	3901      	subs	r1, #1
10013662:	2900      	cmp	r1, #0
10013664:	d0df      	beq.n	10013626 <__aeabi_fadd+0xfa>
10013666:	2cff      	cmp	r4, #255	; 0xff
10013668:	d1d2      	bne.n	10013610 <__aeabi_fadd+0xe4>
1001366a:	e776      	b.n	1001355a <__aeabi_fadd+0x2e>
1001366c:	2800      	cmp	r0, #0
1001366e:	d120      	bne.n	100136b2 <__aeabi_fadd+0x186>
10013670:	1c60      	adds	r0, r4, #1
10013672:	b2c0      	uxtb	r0, r0
10013674:	2801      	cmp	r0, #1
10013676:	dd53      	ble.n	10013720 <__aeabi_fadd+0x1f4>
10013678:	2780      	movs	r7, #128	; 0x80
1001367a:	1a9e      	subs	r6, r3, r2
1001367c:	04ff      	lsls	r7, r7, #19
1001367e:	4037      	ands	r7, r6
10013680:	d02f      	beq.n	100136e2 <__aeabi_fadd+0x1b6>
10013682:	1ad6      	subs	r6, r2, r3
10013684:	000d      	movs	r5, r1
10013686:	e795      	b.n	100135b4 <__aeabi_fadd+0x88>
10013688:	0028      	movs	r0, r5
1001368a:	2300      	movs	r3, #0
1001368c:	e776      	b.n	1001357c <__aeabi_fadd+0x50>
1001368e:	4b61      	ldr	r3, [pc, #388]	; (10013814 <__aeabi_fadd+0x2e8>)
10013690:	1a24      	subs	r4, r4, r0
10013692:	4033      	ands	r3, r6
10013694:	e761      	b.n	1001355a <__aeabi_fadd+0x2e>
10013696:	2900      	cmp	r1, #0
10013698:	d14d      	bne.n	10013736 <__aeabi_fadd+0x20a>
1001369a:	1c61      	adds	r1, r4, #1
1001369c:	b2ce      	uxtb	r6, r1
1001369e:	2e01      	cmp	r6, #1
100136a0:	dd2f      	ble.n	10013702 <__aeabi_fadd+0x1d6>
100136a2:	29ff      	cmp	r1, #255	; 0xff
100136a4:	d02a      	beq.n	100136fc <__aeabi_fadd+0x1d0>
100136a6:	189b      	adds	r3, r3, r2
100136a8:	085b      	lsrs	r3, r3, #1
100136aa:	000c      	movs	r4, r1
100136ac:	e755      	b.n	1001355a <__aeabi_fadd+0x2e>
100136ae:	2201      	movs	r2, #1
100136b0:	e77b      	b.n	100135aa <__aeabi_fadd+0x7e>
100136b2:	2c00      	cmp	r4, #0
100136b4:	d11b      	bne.n	100136ee <__aeabi_fadd+0x1c2>
100136b6:	2b00      	cmp	r3, #0
100136b8:	d05b      	beq.n	10013772 <__aeabi_fadd+0x246>
100136ba:	43c0      	mvns	r0, r0
100136bc:	2800      	cmp	r0, #0
100136be:	d00c      	beq.n	100136da <__aeabi_fadd+0x1ae>
100136c0:	2eff      	cmp	r6, #255	; 0xff
100136c2:	d07e      	beq.n	100137c2 <__aeabi_fadd+0x296>
100136c4:	281b      	cmp	r0, #27
100136c6:	dd00      	ble.n	100136ca <__aeabi_fadd+0x19e>
100136c8:	e092      	b.n	100137f0 <__aeabi_fadd+0x2c4>
100136ca:	001d      	movs	r5, r3
100136cc:	2420      	movs	r4, #32
100136ce:	40c5      	lsrs	r5, r0
100136d0:	1a20      	subs	r0, r4, r0
100136d2:	4083      	lsls	r3, r0
100136d4:	1e58      	subs	r0, r3, #1
100136d6:	4183      	sbcs	r3, r0
100136d8:	432b      	orrs	r3, r5
100136da:	1ad3      	subs	r3, r2, r3
100136dc:	0034      	movs	r4, r6
100136de:	000d      	movs	r5, r1
100136e0:	e764      	b.n	100135ac <__aeabi_fadd+0x80>
100136e2:	2e00      	cmp	r6, #0
100136e4:	d000      	beq.n	100136e8 <__aeabi_fadd+0x1bc>
100136e6:	e765      	b.n	100135b4 <__aeabi_fadd+0x88>
100136e8:	2000      	movs	r0, #0
100136ea:	2400      	movs	r4, #0
100136ec:	e7ab      	b.n	10013646 <__aeabi_fadd+0x11a>
100136ee:	2eff      	cmp	r6, #255	; 0xff
100136f0:	d067      	beq.n	100137c2 <__aeabi_fadd+0x296>
100136f2:	2480      	movs	r4, #128	; 0x80
100136f4:	04e4      	lsls	r4, r4, #19
100136f6:	4240      	negs	r0, r0
100136f8:	4323      	orrs	r3, r4
100136fa:	e7e3      	b.n	100136c4 <__aeabi_fadd+0x198>
100136fc:	24ff      	movs	r4, #255	; 0xff
100136fe:	2300      	movs	r3, #0
10013700:	e73c      	b.n	1001357c <__aeabi_fadd+0x50>
10013702:	2c00      	cmp	r4, #0
10013704:	d161      	bne.n	100137ca <__aeabi_fadd+0x29e>
10013706:	2b00      	cmp	r3, #0
10013708:	d07e      	beq.n	10013808 <__aeabi_fadd+0x2dc>
1001370a:	2a00      	cmp	r2, #0
1001370c:	d100      	bne.n	10013710 <__aeabi_fadd+0x1e4>
1001370e:	e724      	b.n	1001355a <__aeabi_fadd+0x2e>
10013710:	189b      	adds	r3, r3, r2
10013712:	015a      	lsls	r2, r3, #5
10013714:	d400      	bmi.n	10013718 <__aeabi_fadd+0x1ec>
10013716:	e760      	b.n	100135da <__aeabi_fadd+0xae>
10013718:	4a3e      	ldr	r2, [pc, #248]	; (10013814 <__aeabi_fadd+0x2e8>)
1001371a:	000c      	movs	r4, r1
1001371c:	4013      	ands	r3, r2
1001371e:	e71c      	b.n	1001355a <__aeabi_fadd+0x2e>
10013720:	2c00      	cmp	r4, #0
10013722:	d11e      	bne.n	10013762 <__aeabi_fadd+0x236>
10013724:	2b00      	cmp	r3, #0
10013726:	d12f      	bne.n	10013788 <__aeabi_fadd+0x25c>
10013728:	2a00      	cmp	r2, #0
1001372a:	d066      	beq.n	100137fa <__aeabi_fadd+0x2ce>
1001372c:	0013      	movs	r3, r2
1001372e:	000d      	movs	r5, r1
10013730:	e713      	b.n	1001355a <__aeabi_fadd+0x2e>
10013732:	2201      	movs	r2, #1
10013734:	e777      	b.n	10013626 <__aeabi_fadd+0xfa>
10013736:	2c00      	cmp	r4, #0
10013738:	d11f      	bne.n	1001377a <__aeabi_fadd+0x24e>
1001373a:	2b00      	cmp	r3, #0
1001373c:	d05a      	beq.n	100137f4 <__aeabi_fadd+0x2c8>
1001373e:	43c9      	mvns	r1, r1
10013740:	2900      	cmp	r1, #0
10013742:	d00b      	beq.n	1001375c <__aeabi_fadd+0x230>
10013744:	2eff      	cmp	r6, #255	; 0xff
10013746:	d050      	beq.n	100137ea <__aeabi_fadd+0x2be>
10013748:	291b      	cmp	r1, #27
1001374a:	dc5f      	bgt.n	1001380c <__aeabi_fadd+0x2e0>
1001374c:	001f      	movs	r7, r3
1001374e:	2420      	movs	r4, #32
10013750:	40cf      	lsrs	r7, r1
10013752:	1a61      	subs	r1, r4, r1
10013754:	408b      	lsls	r3, r1
10013756:	1e59      	subs	r1, r3, #1
10013758:	418b      	sbcs	r3, r1
1001375a:	433b      	orrs	r3, r7
1001375c:	189b      	adds	r3, r3, r2
1001375e:	0034      	movs	r4, r6
10013760:	e762      	b.n	10013628 <__aeabi_fadd+0xfc>
10013762:	2b00      	cmp	r3, #0
10013764:	d11c      	bne.n	100137a0 <__aeabi_fadd+0x274>
10013766:	2a00      	cmp	r2, #0
10013768:	d04a      	beq.n	10013800 <__aeabi_fadd+0x2d4>
1001376a:	0013      	movs	r3, r2
1001376c:	000d      	movs	r5, r1
1001376e:	24ff      	movs	r4, #255	; 0xff
10013770:	e6f3      	b.n	1001355a <__aeabi_fadd+0x2e>
10013772:	0013      	movs	r3, r2
10013774:	0034      	movs	r4, r6
10013776:	000d      	movs	r5, r1
10013778:	e6ef      	b.n	1001355a <__aeabi_fadd+0x2e>
1001377a:	2eff      	cmp	r6, #255	; 0xff
1001377c:	d035      	beq.n	100137ea <__aeabi_fadd+0x2be>
1001377e:	2480      	movs	r4, #128	; 0x80
10013780:	04e4      	lsls	r4, r4, #19
10013782:	4249      	negs	r1, r1
10013784:	4323      	orrs	r3, r4
10013786:	e7df      	b.n	10013748 <__aeabi_fadd+0x21c>
10013788:	2a00      	cmp	r2, #0
1001378a:	d100      	bne.n	1001378e <__aeabi_fadd+0x262>
1001378c:	e6e5      	b.n	1001355a <__aeabi_fadd+0x2e>
1001378e:	2780      	movs	r7, #128	; 0x80
10013790:	1a98      	subs	r0, r3, r2
10013792:	04ff      	lsls	r7, r7, #19
10013794:	4007      	ands	r7, r0
10013796:	d100      	bne.n	1001379a <__aeabi_fadd+0x26e>
10013798:	e752      	b.n	10013640 <__aeabi_fadd+0x114>
1001379a:	1ad3      	subs	r3, r2, r3
1001379c:	000d      	movs	r5, r1
1001379e:	e6dc      	b.n	1001355a <__aeabi_fadd+0x2e>
100137a0:	24ff      	movs	r4, #255	; 0xff
100137a2:	2a00      	cmp	r2, #0
100137a4:	d100      	bne.n	100137a8 <__aeabi_fadd+0x27c>
100137a6:	e6d8      	b.n	1001355a <__aeabi_fadd+0x2e>
100137a8:	2080      	movs	r0, #128	; 0x80
100137aa:	08db      	lsrs	r3, r3, #3
100137ac:	03c0      	lsls	r0, r0, #15
100137ae:	4203      	tst	r3, r0
100137b0:	d004      	beq.n	100137bc <__aeabi_fadd+0x290>
100137b2:	08d2      	lsrs	r2, r2, #3
100137b4:	4202      	tst	r2, r0
100137b6:	d101      	bne.n	100137bc <__aeabi_fadd+0x290>
100137b8:	0013      	movs	r3, r2
100137ba:	000d      	movs	r5, r1
100137bc:	00db      	lsls	r3, r3, #3
100137be:	24ff      	movs	r4, #255	; 0xff
100137c0:	e6cb      	b.n	1001355a <__aeabi_fadd+0x2e>
100137c2:	0013      	movs	r3, r2
100137c4:	24ff      	movs	r4, #255	; 0xff
100137c6:	000d      	movs	r5, r1
100137c8:	e6c7      	b.n	1001355a <__aeabi_fadd+0x2e>
100137ca:	2b00      	cmp	r3, #0
100137cc:	d00d      	beq.n	100137ea <__aeabi_fadd+0x2be>
100137ce:	24ff      	movs	r4, #255	; 0xff
100137d0:	2a00      	cmp	r2, #0
100137d2:	d100      	bne.n	100137d6 <__aeabi_fadd+0x2aa>
100137d4:	e6c1      	b.n	1001355a <__aeabi_fadd+0x2e>
100137d6:	2180      	movs	r1, #128	; 0x80
100137d8:	08db      	lsrs	r3, r3, #3
100137da:	03c9      	lsls	r1, r1, #15
100137dc:	420b      	tst	r3, r1
100137de:	d0ed      	beq.n	100137bc <__aeabi_fadd+0x290>
100137e0:	08d2      	lsrs	r2, r2, #3
100137e2:	420a      	tst	r2, r1
100137e4:	d1ea      	bne.n	100137bc <__aeabi_fadd+0x290>
100137e6:	0013      	movs	r3, r2
100137e8:	e7e8      	b.n	100137bc <__aeabi_fadd+0x290>
100137ea:	0013      	movs	r3, r2
100137ec:	24ff      	movs	r4, #255	; 0xff
100137ee:	e6b4      	b.n	1001355a <__aeabi_fadd+0x2e>
100137f0:	2301      	movs	r3, #1
100137f2:	e772      	b.n	100136da <__aeabi_fadd+0x1ae>
100137f4:	0013      	movs	r3, r2
100137f6:	0034      	movs	r4, r6
100137f8:	e6af      	b.n	1001355a <__aeabi_fadd+0x2e>
100137fa:	2700      	movs	r7, #0
100137fc:	2000      	movs	r0, #0
100137fe:	e722      	b.n	10013646 <__aeabi_fadd+0x11a>
10013800:	2780      	movs	r7, #128	; 0x80
10013802:	2000      	movs	r0, #0
10013804:	03ff      	lsls	r7, r7, #15
10013806:	e6f1      	b.n	100135ec <__aeabi_fadd+0xc0>
10013808:	0013      	movs	r3, r2
1001380a:	e6a6      	b.n	1001355a <__aeabi_fadd+0x2e>
1001380c:	2301      	movs	r3, #1
1001380e:	e7a5      	b.n	1001375c <__aeabi_fadd+0x230>
10013810:	7dffffff 	.word	0x7dffffff
10013814:	fbffffff 	.word	0xfbffffff

10013818 <__aeabi_fdiv>:
10013818:	b5f0      	push	{r4, r5, r6, r7, lr}
1001381a:	4656      	mov	r6, sl
1001381c:	4644      	mov	r4, r8
1001381e:	465f      	mov	r7, fp
10013820:	464d      	mov	r5, r9
10013822:	b4f0      	push	{r4, r5, r6, r7}
10013824:	0244      	lsls	r4, r0, #9
10013826:	0046      	lsls	r6, r0, #1
10013828:	0fc7      	lsrs	r7, r0, #31
1001382a:	b083      	sub	sp, #12
1001382c:	4688      	mov	r8, r1
1001382e:	0a65      	lsrs	r5, r4, #9
10013830:	0e36      	lsrs	r6, r6, #24
10013832:	46ba      	mov	sl, r7
10013834:	d03d      	beq.n	100138b2 <__aeabi_fdiv+0x9a>
10013836:	2eff      	cmp	r6, #255	; 0xff
10013838:	d022      	beq.n	10013880 <__aeabi_fdiv+0x68>
1001383a:	2300      	movs	r3, #0
1001383c:	00ec      	lsls	r4, r5, #3
1001383e:	2580      	movs	r5, #128	; 0x80
10013840:	4699      	mov	r9, r3
10013842:	469b      	mov	fp, r3
10013844:	04ed      	lsls	r5, r5, #19
10013846:	4325      	orrs	r5, r4
10013848:	3e7f      	subs	r6, #127	; 0x7f
1001384a:	4643      	mov	r3, r8
1001384c:	025c      	lsls	r4, r3, #9
1001384e:	0058      	lsls	r0, r3, #1
10013850:	0fdb      	lsrs	r3, r3, #31
10013852:	0a64      	lsrs	r4, r4, #9
10013854:	0e00      	lsrs	r0, r0, #24
10013856:	4698      	mov	r8, r3
10013858:	d036      	beq.n	100138c8 <__aeabi_fdiv+0xb0>
1001385a:	28ff      	cmp	r0, #255	; 0xff
1001385c:	d030      	beq.n	100138c0 <__aeabi_fdiv+0xa8>
1001385e:	2380      	movs	r3, #128	; 0x80
10013860:	2100      	movs	r1, #0
10013862:	00e4      	lsls	r4, r4, #3
10013864:	04db      	lsls	r3, r3, #19
10013866:	431c      	orrs	r4, r3
10013868:	387f      	subs	r0, #127	; 0x7f
1001386a:	1a30      	subs	r0, r6, r0
1001386c:	9001      	str	r0, [sp, #4]
1001386e:	4648      	mov	r0, r9
10013870:	4642      	mov	r2, r8
10013872:	4308      	orrs	r0, r1
10013874:	4e72      	ldr	r6, [pc, #456]	; (10013a40 <__aeabi_fdiv+0x228>)
10013876:	0080      	lsls	r0, r0, #2
10013878:	5830      	ldr	r0, [r6, r0]
1001387a:	407a      	eors	r2, r7
1001387c:	0013      	movs	r3, r2
1001387e:	4687      	mov	pc, r0
10013880:	2d00      	cmp	r5, #0
10013882:	d144      	bne.n	1001390e <__aeabi_fdiv+0xf6>
10013884:	2308      	movs	r3, #8
10013886:	4699      	mov	r9, r3
10013888:	3b06      	subs	r3, #6
1001388a:	469b      	mov	fp, r3
1001388c:	e7dd      	b.n	1001384a <__aeabi_fdiv+0x32>
1001388e:	2201      	movs	r2, #1
10013890:	20ff      	movs	r0, #255	; 0xff
10013892:	2400      	movs	r4, #0
10013894:	401a      	ands	r2, r3
10013896:	0264      	lsls	r4, r4, #9
10013898:	05c3      	lsls	r3, r0, #23
1001389a:	0a64      	lsrs	r4, r4, #9
1001389c:	07d2      	lsls	r2, r2, #31
1001389e:	431c      	orrs	r4, r3
100138a0:	4314      	orrs	r4, r2
100138a2:	0020      	movs	r0, r4
100138a4:	b003      	add	sp, #12
100138a6:	bc3c      	pop	{r2, r3, r4, r5}
100138a8:	4690      	mov	r8, r2
100138aa:	4699      	mov	r9, r3
100138ac:	46a2      	mov	sl, r4
100138ae:	46ab      	mov	fp, r5
100138b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
100138b2:	2d00      	cmp	r5, #0
100138b4:	d120      	bne.n	100138f8 <__aeabi_fdiv+0xe0>
100138b6:	2304      	movs	r3, #4
100138b8:	4699      	mov	r9, r3
100138ba:	3b03      	subs	r3, #3
100138bc:	469b      	mov	fp, r3
100138be:	e7c4      	b.n	1001384a <__aeabi_fdiv+0x32>
100138c0:	2c00      	cmp	r4, #0
100138c2:	d117      	bne.n	100138f4 <__aeabi_fdiv+0xdc>
100138c4:	2102      	movs	r1, #2
100138c6:	e002      	b.n	100138ce <__aeabi_fdiv+0xb6>
100138c8:	2c00      	cmp	r4, #0
100138ca:	d10a      	bne.n	100138e2 <__aeabi_fdiv+0xca>
100138cc:	2101      	movs	r1, #1
100138ce:	1a32      	subs	r2, r6, r0
100138d0:	9201      	str	r2, [sp, #4]
100138d2:	464a      	mov	r2, r9
100138d4:	4643      	mov	r3, r8
100138d6:	430a      	orrs	r2, r1
100138d8:	485a      	ldr	r0, [pc, #360]	; (10013a44 <__aeabi_fdiv+0x22c>)
100138da:	0092      	lsls	r2, r2, #2
100138dc:	5882      	ldr	r2, [r0, r2]
100138de:	407b      	eors	r3, r7
100138e0:	4697      	mov	pc, r2
100138e2:	0020      	movs	r0, r4
100138e4:	f001 fbee 	bl	100150c4 <__clzsi2>
100138e8:	1f43      	subs	r3, r0, #5
100138ea:	3076      	adds	r0, #118	; 0x76
100138ec:	409c      	lsls	r4, r3
100138ee:	4240      	negs	r0, r0
100138f0:	2100      	movs	r1, #0
100138f2:	e7ba      	b.n	1001386a <__aeabi_fdiv+0x52>
100138f4:	2103      	movs	r1, #3
100138f6:	e7b8      	b.n	1001386a <__aeabi_fdiv+0x52>
100138f8:	0028      	movs	r0, r5
100138fa:	f001 fbe3 	bl	100150c4 <__clzsi2>
100138fe:	1f43      	subs	r3, r0, #5
10013900:	409d      	lsls	r5, r3
10013902:	2300      	movs	r3, #0
10013904:	3076      	adds	r0, #118	; 0x76
10013906:	4246      	negs	r6, r0
10013908:	4699      	mov	r9, r3
1001390a:	469b      	mov	fp, r3
1001390c:	e79d      	b.n	1001384a <__aeabi_fdiv+0x32>
1001390e:	230c      	movs	r3, #12
10013910:	4699      	mov	r9, r3
10013912:	3b09      	subs	r3, #9
10013914:	469b      	mov	fp, r3
10013916:	e798      	b.n	1001384a <__aeabi_fdiv+0x32>
10013918:	2480      	movs	r4, #128	; 0x80
1001391a:	2200      	movs	r2, #0
1001391c:	03e4      	lsls	r4, r4, #15
1001391e:	20ff      	movs	r0, #255	; 0xff
10013920:	e7b9      	b.n	10013896 <__aeabi_fdiv+0x7e>
10013922:	2400      	movs	r4, #0
10013924:	46c2      	mov	sl, r8
10013926:	468b      	mov	fp, r1
10013928:	465a      	mov	r2, fp
1001392a:	4653      	mov	r3, sl
1001392c:	2a02      	cmp	r2, #2
1001392e:	d0ae      	beq.n	1001388e <__aeabi_fdiv+0x76>
10013930:	2a03      	cmp	r2, #3
10013932:	d07d      	beq.n	10013a30 <__aeabi_fdiv+0x218>
10013934:	2a01      	cmp	r2, #1
10013936:	d131      	bne.n	1001399c <__aeabi_fdiv+0x184>
10013938:	2201      	movs	r2, #1
1001393a:	2000      	movs	r0, #0
1001393c:	401a      	ands	r2, r3
1001393e:	2400      	movs	r4, #0
10013940:	e7a9      	b.n	10013896 <__aeabi_fdiv+0x7e>
10013942:	2201      	movs	r2, #1
10013944:	1a10      	subs	r0, r2, r0
10013946:	281b      	cmp	r0, #27
10013948:	dd56      	ble.n	100139f8 <__aeabi_fdiv+0x1e0>
1001394a:	401a      	ands	r2, r3
1001394c:	2000      	movs	r0, #0
1001394e:	2400      	movs	r4, #0
10013950:	e7a1      	b.n	10013896 <__aeabi_fdiv+0x7e>
10013952:	2380      	movs	r3, #128	; 0x80
10013954:	03db      	lsls	r3, r3, #15
10013956:	421d      	tst	r5, r3
10013958:	d14b      	bne.n	100139f2 <__aeabi_fdiv+0x1da>
1001395a:	2380      	movs	r3, #128	; 0x80
1001395c:	03db      	lsls	r3, r3, #15
1001395e:	432b      	orrs	r3, r5
10013960:	025c      	lsls	r4, r3, #9
10013962:	0a64      	lsrs	r4, r4, #9
10013964:	003a      	movs	r2, r7
10013966:	20ff      	movs	r0, #255	; 0xff
10013968:	e795      	b.n	10013896 <__aeabi_fdiv+0x7e>
1001396a:	016d      	lsls	r5, r5, #5
1001396c:	0160      	lsls	r0, r4, #5
1001396e:	4285      	cmp	r5, r0
10013970:	d230      	bcs.n	100139d4 <__aeabi_fdiv+0x1bc>
10013972:	9a01      	ldr	r2, [sp, #4]
10013974:	2400      	movs	r4, #0
10013976:	3a01      	subs	r2, #1
10013978:	9201      	str	r2, [sp, #4]
1001397a:	221b      	movs	r2, #27
1001397c:	2701      	movs	r7, #1
1001397e:	0029      	movs	r1, r5
10013980:	0064      	lsls	r4, r4, #1
10013982:	006d      	lsls	r5, r5, #1
10013984:	2900      	cmp	r1, #0
10013986:	db01      	blt.n	1001398c <__aeabi_fdiv+0x174>
10013988:	42a8      	cmp	r0, r5
1001398a:	d801      	bhi.n	10013990 <__aeabi_fdiv+0x178>
1001398c:	1a2d      	subs	r5, r5, r0
1001398e:	433c      	orrs	r4, r7
10013990:	3a01      	subs	r2, #1
10013992:	2a00      	cmp	r2, #0
10013994:	d1f3      	bne.n	1001397e <__aeabi_fdiv+0x166>
10013996:	1e6a      	subs	r2, r5, #1
10013998:	4195      	sbcs	r5, r2
1001399a:	432c      	orrs	r4, r5
1001399c:	9801      	ldr	r0, [sp, #4]
1001399e:	307f      	adds	r0, #127	; 0x7f
100139a0:	2800      	cmp	r0, #0
100139a2:	ddce      	ble.n	10013942 <__aeabi_fdiv+0x12a>
100139a4:	0762      	lsls	r2, r4, #29
100139a6:	d004      	beq.n	100139b2 <__aeabi_fdiv+0x19a>
100139a8:	220f      	movs	r2, #15
100139aa:	4022      	ands	r2, r4
100139ac:	2a04      	cmp	r2, #4
100139ae:	d000      	beq.n	100139b2 <__aeabi_fdiv+0x19a>
100139b0:	3404      	adds	r4, #4
100139b2:	0122      	lsls	r2, r4, #4
100139b4:	d503      	bpl.n	100139be <__aeabi_fdiv+0x1a6>
100139b6:	4a24      	ldr	r2, [pc, #144]	; (10013a48 <__aeabi_fdiv+0x230>)
100139b8:	9801      	ldr	r0, [sp, #4]
100139ba:	4014      	ands	r4, r2
100139bc:	3080      	adds	r0, #128	; 0x80
100139be:	28fe      	cmp	r0, #254	; 0xfe
100139c0:	dd00      	ble.n	100139c4 <__aeabi_fdiv+0x1ac>
100139c2:	e764      	b.n	1001388e <__aeabi_fdiv+0x76>
100139c4:	2201      	movs	r2, #1
100139c6:	01a4      	lsls	r4, r4, #6
100139c8:	0a64      	lsrs	r4, r4, #9
100139ca:	b2c0      	uxtb	r0, r0
100139cc:	401a      	ands	r2, r3
100139ce:	e762      	b.n	10013896 <__aeabi_fdiv+0x7e>
100139d0:	002c      	movs	r4, r5
100139d2:	e7a9      	b.n	10013928 <__aeabi_fdiv+0x110>
100139d4:	1a2d      	subs	r5, r5, r0
100139d6:	221a      	movs	r2, #26
100139d8:	2401      	movs	r4, #1
100139da:	e7cf      	b.n	1001397c <__aeabi_fdiv+0x164>
100139dc:	026b      	lsls	r3, r5, #9
100139de:	d5bc      	bpl.n	1001395a <__aeabi_fdiv+0x142>
100139e0:	2400      	movs	r4, #0
100139e2:	2380      	movs	r3, #128	; 0x80
100139e4:	03db      	lsls	r3, r3, #15
100139e6:	431c      	orrs	r4, r3
100139e8:	0264      	lsls	r4, r4, #9
100139ea:	0a64      	lsrs	r4, r4, #9
100139ec:	4642      	mov	r2, r8
100139ee:	20ff      	movs	r0, #255	; 0xff
100139f0:	e751      	b.n	10013896 <__aeabi_fdiv+0x7e>
100139f2:	421c      	tst	r4, r3
100139f4:	d1b3      	bne.n	1001395e <__aeabi_fdiv+0x146>
100139f6:	e7f4      	b.n	100139e2 <__aeabi_fdiv+0x1ca>
100139f8:	0021      	movs	r1, r4
100139fa:	2220      	movs	r2, #32
100139fc:	40c1      	lsrs	r1, r0
100139fe:	1a10      	subs	r0, r2, r0
10013a00:	4084      	lsls	r4, r0
10013a02:	1e62      	subs	r2, r4, #1
10013a04:	4194      	sbcs	r4, r2
10013a06:	430c      	orrs	r4, r1
10013a08:	0762      	lsls	r2, r4, #29
10013a0a:	d004      	beq.n	10013a16 <__aeabi_fdiv+0x1fe>
10013a0c:	220f      	movs	r2, #15
10013a0e:	4022      	ands	r2, r4
10013a10:	2a04      	cmp	r2, #4
10013a12:	d000      	beq.n	10013a16 <__aeabi_fdiv+0x1fe>
10013a14:	3404      	adds	r4, #4
10013a16:	0162      	lsls	r2, r4, #5
10013a18:	d504      	bpl.n	10013a24 <__aeabi_fdiv+0x20c>
10013a1a:	2201      	movs	r2, #1
10013a1c:	2001      	movs	r0, #1
10013a1e:	401a      	ands	r2, r3
10013a20:	2400      	movs	r4, #0
10013a22:	e738      	b.n	10013896 <__aeabi_fdiv+0x7e>
10013a24:	2201      	movs	r2, #1
10013a26:	01a4      	lsls	r4, r4, #6
10013a28:	0a64      	lsrs	r4, r4, #9
10013a2a:	401a      	ands	r2, r3
10013a2c:	2000      	movs	r0, #0
10013a2e:	e732      	b.n	10013896 <__aeabi_fdiv+0x7e>
10013a30:	2380      	movs	r3, #128	; 0x80
10013a32:	03db      	lsls	r3, r3, #15
10013a34:	431c      	orrs	r4, r3
10013a36:	0264      	lsls	r4, r4, #9
10013a38:	0a64      	lsrs	r4, r4, #9
10013a3a:	4652      	mov	r2, sl
10013a3c:	20ff      	movs	r0, #255	; 0xff
10013a3e:	e72a      	b.n	10013896 <__aeabi_fdiv+0x7e>
10013a40:	10018224 	.word	0x10018224
10013a44:	10018264 	.word	0x10018264
10013a48:	f7ffffff 	.word	0xf7ffffff

10013a4c <__eqsf2>:
10013a4c:	0243      	lsls	r3, r0, #9
10013a4e:	b570      	push	{r4, r5, r6, lr}
10013a50:	0042      	lsls	r2, r0, #1
10013a52:	004c      	lsls	r4, r1, #1
10013a54:	0a5d      	lsrs	r5, r3, #9
10013a56:	0fc3      	lsrs	r3, r0, #31
10013a58:	0248      	lsls	r0, r1, #9
10013a5a:	0e12      	lsrs	r2, r2, #24
10013a5c:	0a46      	lsrs	r6, r0, #9
10013a5e:	0e24      	lsrs	r4, r4, #24
10013a60:	0fc9      	lsrs	r1, r1, #31
10013a62:	2aff      	cmp	r2, #255	; 0xff
10013a64:	d00f      	beq.n	10013a86 <__eqsf2+0x3a>
10013a66:	2cff      	cmp	r4, #255	; 0xff
10013a68:	d011      	beq.n	10013a8e <__eqsf2+0x42>
10013a6a:	2001      	movs	r0, #1
10013a6c:	42a2      	cmp	r2, r4
10013a6e:	d000      	beq.n	10013a72 <__eqsf2+0x26>
10013a70:	bd70      	pop	{r4, r5, r6, pc}
10013a72:	42b5      	cmp	r5, r6
10013a74:	d1fc      	bne.n	10013a70 <__eqsf2+0x24>
10013a76:	428b      	cmp	r3, r1
10013a78:	d00d      	beq.n	10013a96 <__eqsf2+0x4a>
10013a7a:	2a00      	cmp	r2, #0
10013a7c:	d1f8      	bne.n	10013a70 <__eqsf2+0x24>
10013a7e:	0028      	movs	r0, r5
10013a80:	1e43      	subs	r3, r0, #1
10013a82:	4198      	sbcs	r0, r3
10013a84:	e7f4      	b.n	10013a70 <__eqsf2+0x24>
10013a86:	2001      	movs	r0, #1
10013a88:	2d00      	cmp	r5, #0
10013a8a:	d1f1      	bne.n	10013a70 <__eqsf2+0x24>
10013a8c:	e7eb      	b.n	10013a66 <__eqsf2+0x1a>
10013a8e:	2001      	movs	r0, #1
10013a90:	2e00      	cmp	r6, #0
10013a92:	d1ed      	bne.n	10013a70 <__eqsf2+0x24>
10013a94:	e7e9      	b.n	10013a6a <__eqsf2+0x1e>
10013a96:	2000      	movs	r0, #0
10013a98:	e7ea      	b.n	10013a70 <__eqsf2+0x24>
10013a9a:	46c0      	nop			; (mov r8, r8)

10013a9c <__gesf2>:
10013a9c:	0243      	lsls	r3, r0, #9
10013a9e:	b5f0      	push	{r4, r5, r6, r7, lr}
10013aa0:	0042      	lsls	r2, r0, #1
10013aa2:	0a5d      	lsrs	r5, r3, #9
10013aa4:	0fc3      	lsrs	r3, r0, #31
10013aa6:	0248      	lsls	r0, r1, #9
10013aa8:	0a44      	lsrs	r4, r0, #9
10013aaa:	0048      	lsls	r0, r1, #1
10013aac:	0e12      	lsrs	r2, r2, #24
10013aae:	0e00      	lsrs	r0, r0, #24
10013ab0:	0fc9      	lsrs	r1, r1, #31
10013ab2:	2aff      	cmp	r2, #255	; 0xff
10013ab4:	d01f      	beq.n	10013af6 <__gesf2+0x5a>
10013ab6:	28ff      	cmp	r0, #255	; 0xff
10013ab8:	d022      	beq.n	10013b00 <__gesf2+0x64>
10013aba:	2a00      	cmp	r2, #0
10013abc:	d109      	bne.n	10013ad2 <__gesf2+0x36>
10013abe:	426e      	negs	r6, r5
10013ac0:	416e      	adcs	r6, r5
10013ac2:	2800      	cmp	r0, #0
10013ac4:	d10f      	bne.n	10013ae6 <__gesf2+0x4a>
10013ac6:	2c00      	cmp	r4, #0
10013ac8:	d10d      	bne.n	10013ae6 <__gesf2+0x4a>
10013aca:	2000      	movs	r0, #0
10013acc:	2d00      	cmp	r5, #0
10013ace:	d009      	beq.n	10013ae4 <__gesf2+0x48>
10013ad0:	e005      	b.n	10013ade <__gesf2+0x42>
10013ad2:	2800      	cmp	r0, #0
10013ad4:	d101      	bne.n	10013ada <__gesf2+0x3e>
10013ad6:	2c00      	cmp	r4, #0
10013ad8:	d001      	beq.n	10013ade <__gesf2+0x42>
10013ada:	428b      	cmp	r3, r1
10013adc:	d013      	beq.n	10013b06 <__gesf2+0x6a>
10013ade:	4258      	negs	r0, r3
10013ae0:	2301      	movs	r3, #1
10013ae2:	4318      	orrs	r0, r3
10013ae4:	bdf0      	pop	{r4, r5, r6, r7, pc}
10013ae6:	2e00      	cmp	r6, #0
10013ae8:	d0f7      	beq.n	10013ada <__gesf2+0x3e>
10013aea:	4248      	negs	r0, r1
10013aec:	4141      	adcs	r1, r0
10013aee:	2001      	movs	r0, #1
10013af0:	4249      	negs	r1, r1
10013af2:	4308      	orrs	r0, r1
10013af4:	e7f6      	b.n	10013ae4 <__gesf2+0x48>
10013af6:	2d00      	cmp	r5, #0
10013af8:	d0dd      	beq.n	10013ab6 <__gesf2+0x1a>
10013afa:	2002      	movs	r0, #2
10013afc:	4240      	negs	r0, r0
10013afe:	e7f1      	b.n	10013ae4 <__gesf2+0x48>
10013b00:	2c00      	cmp	r4, #0
10013b02:	d0da      	beq.n	10013aba <__gesf2+0x1e>
10013b04:	e7f9      	b.n	10013afa <__gesf2+0x5e>
10013b06:	4282      	cmp	r2, r0
10013b08:	dce9      	bgt.n	10013ade <__gesf2+0x42>
10013b0a:	db04      	blt.n	10013b16 <__gesf2+0x7a>
10013b0c:	42a5      	cmp	r5, r4
10013b0e:	d8e6      	bhi.n	10013ade <__gesf2+0x42>
10013b10:	2000      	movs	r0, #0
10013b12:	42a5      	cmp	r5, r4
10013b14:	d2e6      	bcs.n	10013ae4 <__gesf2+0x48>
10013b16:	4258      	negs	r0, r3
10013b18:	4143      	adcs	r3, r0
10013b1a:	2001      	movs	r0, #1
10013b1c:	425b      	negs	r3, r3
10013b1e:	4318      	orrs	r0, r3
10013b20:	e7e0      	b.n	10013ae4 <__gesf2+0x48>
10013b22:	46c0      	nop			; (mov r8, r8)

10013b24 <__lesf2>:
10013b24:	0243      	lsls	r3, r0, #9
10013b26:	b5f0      	push	{r4, r5, r6, r7, lr}
10013b28:	0042      	lsls	r2, r0, #1
10013b2a:	004c      	lsls	r4, r1, #1
10013b2c:	0a5e      	lsrs	r6, r3, #9
10013b2e:	0fc3      	lsrs	r3, r0, #31
10013b30:	0248      	lsls	r0, r1, #9
10013b32:	0e12      	lsrs	r2, r2, #24
10013b34:	0a45      	lsrs	r5, r0, #9
10013b36:	0e24      	lsrs	r4, r4, #24
10013b38:	0fc9      	lsrs	r1, r1, #31
10013b3a:	2aff      	cmp	r2, #255	; 0xff
10013b3c:	d017      	beq.n	10013b6e <__lesf2+0x4a>
10013b3e:	2cff      	cmp	r4, #255	; 0xff
10013b40:	d019      	beq.n	10013b76 <__lesf2+0x52>
10013b42:	2a00      	cmp	r2, #0
10013b44:	d10b      	bne.n	10013b5e <__lesf2+0x3a>
10013b46:	4270      	negs	r0, r6
10013b48:	4170      	adcs	r0, r6
10013b4a:	2c00      	cmp	r4, #0
10013b4c:	d017      	beq.n	10013b7e <__lesf2+0x5a>
10013b4e:	2800      	cmp	r0, #0
10013b50:	d007      	beq.n	10013b62 <__lesf2+0x3e>
10013b52:	4248      	negs	r0, r1
10013b54:	4141      	adcs	r1, r0
10013b56:	2001      	movs	r0, #1
10013b58:	4249      	negs	r1, r1
10013b5a:	4308      	orrs	r0, r1
10013b5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
10013b5e:	2c00      	cmp	r4, #0
10013b60:	d013      	beq.n	10013b8a <__lesf2+0x66>
10013b62:	428b      	cmp	r3, r1
10013b64:	d014      	beq.n	10013b90 <__lesf2+0x6c>
10013b66:	4258      	negs	r0, r3
10013b68:	2301      	movs	r3, #1
10013b6a:	4318      	orrs	r0, r3
10013b6c:	e7f6      	b.n	10013b5c <__lesf2+0x38>
10013b6e:	2002      	movs	r0, #2
10013b70:	2e00      	cmp	r6, #0
10013b72:	d1f3      	bne.n	10013b5c <__lesf2+0x38>
10013b74:	e7e3      	b.n	10013b3e <__lesf2+0x1a>
10013b76:	2002      	movs	r0, #2
10013b78:	2d00      	cmp	r5, #0
10013b7a:	d1ef      	bne.n	10013b5c <__lesf2+0x38>
10013b7c:	e7e1      	b.n	10013b42 <__lesf2+0x1e>
10013b7e:	2d00      	cmp	r5, #0
10013b80:	d1e5      	bne.n	10013b4e <__lesf2+0x2a>
10013b82:	2000      	movs	r0, #0
10013b84:	2e00      	cmp	r6, #0
10013b86:	d0e9      	beq.n	10013b5c <__lesf2+0x38>
10013b88:	e7ed      	b.n	10013b66 <__lesf2+0x42>
10013b8a:	2d00      	cmp	r5, #0
10013b8c:	d1e9      	bne.n	10013b62 <__lesf2+0x3e>
10013b8e:	e7ea      	b.n	10013b66 <__lesf2+0x42>
10013b90:	42a2      	cmp	r2, r4
10013b92:	dce8      	bgt.n	10013b66 <__lesf2+0x42>
10013b94:	db04      	blt.n	10013ba0 <__lesf2+0x7c>
10013b96:	42ae      	cmp	r6, r5
10013b98:	d8e5      	bhi.n	10013b66 <__lesf2+0x42>
10013b9a:	2000      	movs	r0, #0
10013b9c:	42ae      	cmp	r6, r5
10013b9e:	d2dd      	bcs.n	10013b5c <__lesf2+0x38>
10013ba0:	4258      	negs	r0, r3
10013ba2:	4143      	adcs	r3, r0
10013ba4:	2001      	movs	r0, #1
10013ba6:	425b      	negs	r3, r3
10013ba8:	4318      	orrs	r0, r3
10013baa:	e7d7      	b.n	10013b5c <__lesf2+0x38>

10013bac <__aeabi_fmul>:
10013bac:	b5f0      	push	{r4, r5, r6, r7, lr}
10013bae:	4657      	mov	r7, sl
10013bb0:	464e      	mov	r6, r9
10013bb2:	4645      	mov	r5, r8
10013bb4:	0043      	lsls	r3, r0, #1
10013bb6:	b4e0      	push	{r5, r6, r7}
10013bb8:	0246      	lsls	r6, r0, #9
10013bba:	4688      	mov	r8, r1
10013bbc:	0a76      	lsrs	r6, r6, #9
10013bbe:	0e1f      	lsrs	r7, r3, #24
10013bc0:	0fc4      	lsrs	r4, r0, #31
10013bc2:	2f00      	cmp	r7, #0
10013bc4:	d047      	beq.n	10013c56 <__aeabi_fmul+0xaa>
10013bc6:	2fff      	cmp	r7, #255	; 0xff
10013bc8:	d025      	beq.n	10013c16 <__aeabi_fmul+0x6a>
10013bca:	2300      	movs	r3, #0
10013bcc:	2580      	movs	r5, #128	; 0x80
10013bce:	469a      	mov	sl, r3
10013bd0:	4699      	mov	r9, r3
10013bd2:	00f6      	lsls	r6, r6, #3
10013bd4:	04ed      	lsls	r5, r5, #19
10013bd6:	432e      	orrs	r6, r5
10013bd8:	3f7f      	subs	r7, #127	; 0x7f
10013bda:	4643      	mov	r3, r8
10013bdc:	4642      	mov	r2, r8
10013bde:	025d      	lsls	r5, r3, #9
10013be0:	0fd2      	lsrs	r2, r2, #31
10013be2:	005b      	lsls	r3, r3, #1
10013be4:	0a6d      	lsrs	r5, r5, #9
10013be6:	0e1b      	lsrs	r3, r3, #24
10013be8:	4690      	mov	r8, r2
10013bea:	d040      	beq.n	10013c6e <__aeabi_fmul+0xc2>
10013bec:	2bff      	cmp	r3, #255	; 0xff
10013bee:	d039      	beq.n	10013c64 <__aeabi_fmul+0xb8>
10013bf0:	2280      	movs	r2, #128	; 0x80
10013bf2:	2000      	movs	r0, #0
10013bf4:	00ed      	lsls	r5, r5, #3
10013bf6:	04d2      	lsls	r2, r2, #19
10013bf8:	4315      	orrs	r5, r2
10013bfa:	3b7f      	subs	r3, #127	; 0x7f
10013bfc:	18fb      	adds	r3, r7, r3
10013bfe:	4642      	mov	r2, r8
10013c00:	4657      	mov	r7, sl
10013c02:	1c59      	adds	r1, r3, #1
10013c04:	4062      	eors	r2, r4
10013c06:	468c      	mov	ip, r1
10013c08:	4307      	orrs	r7, r0
10013c0a:	2f0f      	cmp	r7, #15
10013c0c:	d85c      	bhi.n	10013cc8 <__aeabi_fmul+0x11c>
10013c0e:	496f      	ldr	r1, [pc, #444]	; (10013dcc <__aeabi_fmul+0x220>)
10013c10:	00bf      	lsls	r7, r7, #2
10013c12:	59c9      	ldr	r1, [r1, r7]
10013c14:	468f      	mov	pc, r1
10013c16:	2e00      	cmp	r6, #0
10013c18:	d145      	bne.n	10013ca6 <__aeabi_fmul+0xfa>
10013c1a:	2308      	movs	r3, #8
10013c1c:	469a      	mov	sl, r3
10013c1e:	3b06      	subs	r3, #6
10013c20:	4699      	mov	r9, r3
10013c22:	e7da      	b.n	10013bda <__aeabi_fmul+0x2e>
10013c24:	4642      	mov	r2, r8
10013c26:	2802      	cmp	r0, #2
10013c28:	d02d      	beq.n	10013c86 <__aeabi_fmul+0xda>
10013c2a:	2803      	cmp	r0, #3
10013c2c:	d100      	bne.n	10013c30 <__aeabi_fmul+0x84>
10013c2e:	e0c3      	b.n	10013db8 <__aeabi_fmul+0x20c>
10013c30:	2801      	cmp	r0, #1
10013c32:	d000      	beq.n	10013c36 <__aeabi_fmul+0x8a>
10013c34:	e0a2      	b.n	10013d7c <__aeabi_fmul+0x1d0>
10013c36:	2500      	movs	r5, #0
10013c38:	2600      	movs	r6, #0
10013c3a:	4002      	ands	r2, r0
10013c3c:	b2d4      	uxtb	r4, r2
10013c3e:	0276      	lsls	r6, r6, #9
10013c40:	05ed      	lsls	r5, r5, #23
10013c42:	0a76      	lsrs	r6, r6, #9
10013c44:	432e      	orrs	r6, r5
10013c46:	07e4      	lsls	r4, r4, #31
10013c48:	4326      	orrs	r6, r4
10013c4a:	0030      	movs	r0, r6
10013c4c:	bc1c      	pop	{r2, r3, r4}
10013c4e:	4690      	mov	r8, r2
10013c50:	4699      	mov	r9, r3
10013c52:	46a2      	mov	sl, r4
10013c54:	bdf0      	pop	{r4, r5, r6, r7, pc}
10013c56:	2e00      	cmp	r6, #0
10013c58:	d11a      	bne.n	10013c90 <__aeabi_fmul+0xe4>
10013c5a:	2304      	movs	r3, #4
10013c5c:	469a      	mov	sl, r3
10013c5e:	3b03      	subs	r3, #3
10013c60:	4699      	mov	r9, r3
10013c62:	e7ba      	b.n	10013bda <__aeabi_fmul+0x2e>
10013c64:	002a      	movs	r2, r5
10013c66:	1e51      	subs	r1, r2, #1
10013c68:	418a      	sbcs	r2, r1
10013c6a:	1c90      	adds	r0, r2, #2
10013c6c:	e7c6      	b.n	10013bfc <__aeabi_fmul+0x50>
10013c6e:	2001      	movs	r0, #1
10013c70:	2d00      	cmp	r5, #0
10013c72:	d0c3      	beq.n	10013bfc <__aeabi_fmul+0x50>
10013c74:	0028      	movs	r0, r5
10013c76:	f001 fa25 	bl	100150c4 <__clzsi2>
10013c7a:	1f43      	subs	r3, r0, #5
10013c7c:	3076      	adds	r0, #118	; 0x76
10013c7e:	409d      	lsls	r5, r3
10013c80:	4243      	negs	r3, r0
10013c82:	2000      	movs	r0, #0
10013c84:	e7ba      	b.n	10013bfc <__aeabi_fmul+0x50>
10013c86:	2401      	movs	r4, #1
10013c88:	25ff      	movs	r5, #255	; 0xff
10013c8a:	4014      	ands	r4, r2
10013c8c:	2600      	movs	r6, #0
10013c8e:	e7d6      	b.n	10013c3e <__aeabi_fmul+0x92>
10013c90:	0030      	movs	r0, r6
10013c92:	f001 fa17 	bl	100150c4 <__clzsi2>
10013c96:	1f43      	subs	r3, r0, #5
10013c98:	409e      	lsls	r6, r3
10013c9a:	2300      	movs	r3, #0
10013c9c:	3076      	adds	r0, #118	; 0x76
10013c9e:	4247      	negs	r7, r0
10013ca0:	469a      	mov	sl, r3
10013ca2:	4699      	mov	r9, r3
10013ca4:	e799      	b.n	10013bda <__aeabi_fmul+0x2e>
10013ca6:	230c      	movs	r3, #12
10013ca8:	469a      	mov	sl, r3
10013caa:	3b09      	subs	r3, #9
10013cac:	4699      	mov	r9, r3
10013cae:	e794      	b.n	10013bda <__aeabi_fmul+0x2e>
10013cb0:	2680      	movs	r6, #128	; 0x80
10013cb2:	2400      	movs	r4, #0
10013cb4:	03f6      	lsls	r6, r6, #15
10013cb6:	25ff      	movs	r5, #255	; 0xff
10013cb8:	e7c1      	b.n	10013c3e <__aeabi_fmul+0x92>
10013cba:	0035      	movs	r5, r6
10013cbc:	4648      	mov	r0, r9
10013cbe:	e7b2      	b.n	10013c26 <__aeabi_fmul+0x7a>
10013cc0:	0035      	movs	r5, r6
10013cc2:	0022      	movs	r2, r4
10013cc4:	4648      	mov	r0, r9
10013cc6:	e7ae      	b.n	10013c26 <__aeabi_fmul+0x7a>
10013cc8:	0429      	lsls	r1, r5, #16
10013cca:	0c09      	lsrs	r1, r1, #16
10013ccc:	0008      	movs	r0, r1
10013cce:	0c37      	lsrs	r7, r6, #16
10013cd0:	0436      	lsls	r6, r6, #16
10013cd2:	0c36      	lsrs	r6, r6, #16
10013cd4:	0c2c      	lsrs	r4, r5, #16
10013cd6:	4379      	muls	r1, r7
10013cd8:	4370      	muls	r0, r6
10013cda:	4367      	muls	r7, r4
10013cdc:	4374      	muls	r4, r6
10013cde:	0c06      	lsrs	r6, r0, #16
10013ce0:	1864      	adds	r4, r4, r1
10013ce2:	1936      	adds	r6, r6, r4
10013ce4:	42b1      	cmp	r1, r6
10013ce6:	d903      	bls.n	10013cf0 <__aeabi_fmul+0x144>
10013ce8:	2180      	movs	r1, #128	; 0x80
10013cea:	0249      	lsls	r1, r1, #9
10013cec:	4688      	mov	r8, r1
10013cee:	4447      	add	r7, r8
10013cf0:	0400      	lsls	r0, r0, #16
10013cf2:	0c00      	lsrs	r0, r0, #16
10013cf4:	0431      	lsls	r1, r6, #16
10013cf6:	1809      	adds	r1, r1, r0
10013cf8:	018d      	lsls	r5, r1, #6
10013cfa:	1e68      	subs	r0, r5, #1
10013cfc:	4185      	sbcs	r5, r0
10013cfe:	0e89      	lsrs	r1, r1, #26
10013d00:	4329      	orrs	r1, r5
10013d02:	0c35      	lsrs	r5, r6, #16
10013d04:	19ed      	adds	r5, r5, r7
10013d06:	01ad      	lsls	r5, r5, #6
10013d08:	430d      	orrs	r5, r1
10013d0a:	0129      	lsls	r1, r5, #4
10013d0c:	d504      	bpl.n	10013d18 <__aeabi_fmul+0x16c>
10013d0e:	2301      	movs	r3, #1
10013d10:	0869      	lsrs	r1, r5, #1
10013d12:	401d      	ands	r5, r3
10013d14:	4663      	mov	r3, ip
10013d16:	430d      	orrs	r5, r1
10013d18:	0019      	movs	r1, r3
10013d1a:	317f      	adds	r1, #127	; 0x7f
10013d1c:	2900      	cmp	r1, #0
10013d1e:	dd25      	ble.n	10013d6c <__aeabi_fmul+0x1c0>
10013d20:	0768      	lsls	r0, r5, #29
10013d22:	d004      	beq.n	10013d2e <__aeabi_fmul+0x182>
10013d24:	200f      	movs	r0, #15
10013d26:	4028      	ands	r0, r5
10013d28:	2804      	cmp	r0, #4
10013d2a:	d000      	beq.n	10013d2e <__aeabi_fmul+0x182>
10013d2c:	3504      	adds	r5, #4
10013d2e:	0128      	lsls	r0, r5, #4
10013d30:	d503      	bpl.n	10013d3a <__aeabi_fmul+0x18e>
10013d32:	4927      	ldr	r1, [pc, #156]	; (10013dd0 <__aeabi_fmul+0x224>)
10013d34:	3380      	adds	r3, #128	; 0x80
10013d36:	400d      	ands	r5, r1
10013d38:	0019      	movs	r1, r3
10013d3a:	29fe      	cmp	r1, #254	; 0xfe
10013d3c:	dca3      	bgt.n	10013c86 <__aeabi_fmul+0xda>
10013d3e:	2401      	movs	r4, #1
10013d40:	01ad      	lsls	r5, r5, #6
10013d42:	0a6e      	lsrs	r6, r5, #9
10013d44:	4014      	ands	r4, r2
10013d46:	b2cd      	uxtb	r5, r1
10013d48:	e779      	b.n	10013c3e <__aeabi_fmul+0x92>
10013d4a:	2080      	movs	r0, #128	; 0x80
10013d4c:	03c0      	lsls	r0, r0, #15
10013d4e:	4206      	tst	r6, r0
10013d50:	d007      	beq.n	10013d62 <__aeabi_fmul+0x1b6>
10013d52:	4205      	tst	r5, r0
10013d54:	d105      	bne.n	10013d62 <__aeabi_fmul+0x1b6>
10013d56:	4328      	orrs	r0, r5
10013d58:	0246      	lsls	r6, r0, #9
10013d5a:	0a76      	lsrs	r6, r6, #9
10013d5c:	4644      	mov	r4, r8
10013d5e:	25ff      	movs	r5, #255	; 0xff
10013d60:	e76d      	b.n	10013c3e <__aeabi_fmul+0x92>
10013d62:	4306      	orrs	r6, r0
10013d64:	0276      	lsls	r6, r6, #9
10013d66:	0a76      	lsrs	r6, r6, #9
10013d68:	25ff      	movs	r5, #255	; 0xff
10013d6a:	e768      	b.n	10013c3e <__aeabi_fmul+0x92>
10013d6c:	2401      	movs	r4, #1
10013d6e:	1a61      	subs	r1, r4, r1
10013d70:	291b      	cmp	r1, #27
10013d72:	dd05      	ble.n	10013d80 <__aeabi_fmul+0x1d4>
10013d74:	4014      	ands	r4, r2
10013d76:	2500      	movs	r5, #0
10013d78:	2600      	movs	r6, #0
10013d7a:	e760      	b.n	10013c3e <__aeabi_fmul+0x92>
10013d7c:	4663      	mov	r3, ip
10013d7e:	e7cb      	b.n	10013d18 <__aeabi_fmul+0x16c>
10013d80:	002e      	movs	r6, r5
10013d82:	2320      	movs	r3, #32
10013d84:	40ce      	lsrs	r6, r1
10013d86:	1a59      	subs	r1, r3, r1
10013d88:	408d      	lsls	r5, r1
10013d8a:	1e6b      	subs	r3, r5, #1
10013d8c:	419d      	sbcs	r5, r3
10013d8e:	432e      	orrs	r6, r5
10013d90:	0773      	lsls	r3, r6, #29
10013d92:	d004      	beq.n	10013d9e <__aeabi_fmul+0x1f2>
10013d94:	230f      	movs	r3, #15
10013d96:	4033      	ands	r3, r6
10013d98:	2b04      	cmp	r3, #4
10013d9a:	d000      	beq.n	10013d9e <__aeabi_fmul+0x1f2>
10013d9c:	3604      	adds	r6, #4
10013d9e:	0173      	lsls	r3, r6, #5
10013da0:	d504      	bpl.n	10013dac <__aeabi_fmul+0x200>
10013da2:	2401      	movs	r4, #1
10013da4:	2501      	movs	r5, #1
10013da6:	4014      	ands	r4, r2
10013da8:	2600      	movs	r6, #0
10013daa:	e748      	b.n	10013c3e <__aeabi_fmul+0x92>
10013dac:	2401      	movs	r4, #1
10013dae:	01b6      	lsls	r6, r6, #6
10013db0:	0a76      	lsrs	r6, r6, #9
10013db2:	4014      	ands	r4, r2
10013db4:	2500      	movs	r5, #0
10013db6:	e742      	b.n	10013c3e <__aeabi_fmul+0x92>
10013db8:	2680      	movs	r6, #128	; 0x80
10013dba:	2401      	movs	r4, #1
10013dbc:	03f6      	lsls	r6, r6, #15
10013dbe:	432e      	orrs	r6, r5
10013dc0:	0276      	lsls	r6, r6, #9
10013dc2:	0a76      	lsrs	r6, r6, #9
10013dc4:	4014      	ands	r4, r2
10013dc6:	25ff      	movs	r5, #255	; 0xff
10013dc8:	e739      	b.n	10013c3e <__aeabi_fmul+0x92>
10013dca:	46c0      	nop			; (mov r8, r8)
10013dcc:	100182a4 	.word	0x100182a4
10013dd0:	f7ffffff 	.word	0xf7ffffff

10013dd4 <__aeabi_fsub>:
10013dd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10013dd6:	024a      	lsls	r2, r1, #9
10013dd8:	004e      	lsls	r6, r1, #1
10013dda:	0243      	lsls	r3, r0, #9
10013ddc:	0044      	lsls	r4, r0, #1
10013dde:	0e24      	lsrs	r4, r4, #24
10013de0:	0fc5      	lsrs	r5, r0, #31
10013de2:	099b      	lsrs	r3, r3, #6
10013de4:	0e36      	lsrs	r6, r6, #24
10013de6:	0fc9      	lsrs	r1, r1, #31
10013de8:	0992      	lsrs	r2, r2, #6
10013dea:	2eff      	cmp	r6, #255	; 0xff
10013dec:	d100      	bne.n	10013df0 <__aeabi_fsub+0x1c>
10013dee:	e083      	b.n	10013ef8 <__aeabi_fsub+0x124>
10013df0:	2001      	movs	r0, #1
10013df2:	4041      	eors	r1, r0
10013df4:	1ba0      	subs	r0, r4, r6
10013df6:	42a9      	cmp	r1, r5
10013df8:	d05c      	beq.n	10013eb4 <__aeabi_fsub+0xe0>
10013dfa:	2800      	cmp	r0, #0
10013dfc:	dc00      	bgt.n	10013e00 <__aeabi_fsub+0x2c>
10013dfe:	e095      	b.n	10013f2c <__aeabi_fsub+0x158>
10013e00:	2e00      	cmp	r6, #0
10013e02:	d11c      	bne.n	10013e3e <__aeabi_fsub+0x6a>
10013e04:	2a00      	cmp	r2, #0
10013e06:	d000      	beq.n	10013e0a <__aeabi_fsub+0x36>
10013e08:	e081      	b.n	10013f0e <__aeabi_fsub+0x13a>
10013e0a:	075a      	lsls	r2, r3, #29
10013e0c:	d004      	beq.n	10013e18 <__aeabi_fsub+0x44>
10013e0e:	220f      	movs	r2, #15
10013e10:	401a      	ands	r2, r3
10013e12:	2a04      	cmp	r2, #4
10013e14:	d000      	beq.n	10013e18 <__aeabi_fsub+0x44>
10013e16:	3304      	adds	r3, #4
10013e18:	015a      	lsls	r2, r3, #5
10013e1a:	d53b      	bpl.n	10013e94 <__aeabi_fsub+0xc0>
10013e1c:	3401      	adds	r4, #1
10013e1e:	2cff      	cmp	r4, #255	; 0xff
10013e20:	d100      	bne.n	10013e24 <__aeabi_fsub+0x50>
10013e22:	e091      	b.n	10013f48 <__aeabi_fsub+0x174>
10013e24:	2001      	movs	r0, #1
10013e26:	019b      	lsls	r3, r3, #6
10013e28:	0a5b      	lsrs	r3, r3, #9
10013e2a:	b2e4      	uxtb	r4, r4
10013e2c:	4005      	ands	r5, r0
10013e2e:	025b      	lsls	r3, r3, #9
10013e30:	05e4      	lsls	r4, r4, #23
10013e32:	0a5b      	lsrs	r3, r3, #9
10013e34:	07ed      	lsls	r5, r5, #31
10013e36:	4323      	orrs	r3, r4
10013e38:	432b      	orrs	r3, r5
10013e3a:	0018      	movs	r0, r3
10013e3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10013e3e:	2cff      	cmp	r4, #255	; 0xff
10013e40:	d0e3      	beq.n	10013e0a <__aeabi_fsub+0x36>
10013e42:	2180      	movs	r1, #128	; 0x80
10013e44:	04c9      	lsls	r1, r1, #19
10013e46:	430a      	orrs	r2, r1
10013e48:	281b      	cmp	r0, #27
10013e4a:	dd00      	ble.n	10013e4e <__aeabi_fsub+0x7a>
10013e4c:	e090      	b.n	10013f70 <__aeabi_fsub+0x19c>
10013e4e:	0016      	movs	r6, r2
10013e50:	2120      	movs	r1, #32
10013e52:	40c6      	lsrs	r6, r0
10013e54:	1a08      	subs	r0, r1, r0
10013e56:	4082      	lsls	r2, r0
10013e58:	1e51      	subs	r1, r2, #1
10013e5a:	418a      	sbcs	r2, r1
10013e5c:	4332      	orrs	r2, r6
10013e5e:	1a9b      	subs	r3, r3, r2
10013e60:	015a      	lsls	r2, r3, #5
10013e62:	d515      	bpl.n	10013e90 <__aeabi_fsub+0xbc>
10013e64:	019b      	lsls	r3, r3, #6
10013e66:	099e      	lsrs	r6, r3, #6
10013e68:	0030      	movs	r0, r6
10013e6a:	f001 f92b 	bl	100150c4 <__clzsi2>
10013e6e:	3805      	subs	r0, #5
10013e70:	4086      	lsls	r6, r0
10013e72:	4284      	cmp	r4, r0
10013e74:	dc6c      	bgt.n	10013f50 <__aeabi_fsub+0x17c>
10013e76:	1b04      	subs	r4, r0, r4
10013e78:	0033      	movs	r3, r6
10013e7a:	2020      	movs	r0, #32
10013e7c:	3401      	adds	r4, #1
10013e7e:	40e3      	lsrs	r3, r4
10013e80:	1b04      	subs	r4, r0, r4
10013e82:	40a6      	lsls	r6, r4
10013e84:	1e72      	subs	r2, r6, #1
10013e86:	4196      	sbcs	r6, r2
10013e88:	2400      	movs	r4, #0
10013e8a:	4333      	orrs	r3, r6
10013e8c:	e7bd      	b.n	10013e0a <__aeabi_fsub+0x36>
10013e8e:	000d      	movs	r5, r1
10013e90:	075a      	lsls	r2, r3, #29
10013e92:	d1bc      	bne.n	10013e0e <__aeabi_fsub+0x3a>
10013e94:	08df      	lsrs	r7, r3, #3
10013e96:	2301      	movs	r3, #1
10013e98:	401d      	ands	r5, r3
10013e9a:	2cff      	cmp	r4, #255	; 0xff
10013e9c:	d133      	bne.n	10013f06 <__aeabi_fsub+0x132>
10013e9e:	2f00      	cmp	r7, #0
10013ea0:	d100      	bne.n	10013ea4 <__aeabi_fsub+0xd0>
10013ea2:	e090      	b.n	10013fc6 <__aeabi_fsub+0x1f2>
10013ea4:	2280      	movs	r2, #128	; 0x80
10013ea6:	03d2      	lsls	r2, r2, #15
10013ea8:	0013      	movs	r3, r2
10013eaa:	433b      	orrs	r3, r7
10013eac:	025b      	lsls	r3, r3, #9
10013eae:	0a5b      	lsrs	r3, r3, #9
10013eb0:	24ff      	movs	r4, #255	; 0xff
10013eb2:	e7bc      	b.n	10013e2e <__aeabi_fsub+0x5a>
10013eb4:	2800      	cmp	r0, #0
10013eb6:	dd4f      	ble.n	10013f58 <__aeabi_fsub+0x184>
10013eb8:	2e00      	cmp	r6, #0
10013eba:	d02e      	beq.n	10013f1a <__aeabi_fsub+0x146>
10013ebc:	2cff      	cmp	r4, #255	; 0xff
10013ebe:	d0a4      	beq.n	10013e0a <__aeabi_fsub+0x36>
10013ec0:	2580      	movs	r5, #128	; 0x80
10013ec2:	04ed      	lsls	r5, r5, #19
10013ec4:	432a      	orrs	r2, r5
10013ec6:	281b      	cmp	r0, #27
10013ec8:	dd00      	ble.n	10013ecc <__aeabi_fsub+0xf8>
10013eca:	e097      	b.n	10013ffc <__aeabi_fsub+0x228>
10013ecc:	0016      	movs	r6, r2
10013ece:	2520      	movs	r5, #32
10013ed0:	40c6      	lsrs	r6, r0
10013ed2:	1a28      	subs	r0, r5, r0
10013ed4:	4082      	lsls	r2, r0
10013ed6:	1e50      	subs	r0, r2, #1
10013ed8:	4182      	sbcs	r2, r0
10013eda:	4332      	orrs	r2, r6
10013edc:	189b      	adds	r3, r3, r2
10013ede:	015a      	lsls	r2, r3, #5
10013ee0:	d5d5      	bpl.n	10013e8e <__aeabi_fsub+0xba>
10013ee2:	3401      	adds	r4, #1
10013ee4:	2cff      	cmp	r4, #255	; 0xff
10013ee6:	d06d      	beq.n	10013fc4 <__aeabi_fsub+0x1f0>
10013ee8:	2201      	movs	r2, #1
10013eea:	487b      	ldr	r0, [pc, #492]	; (100140d8 <__aeabi_fsub+0x304>)
10013eec:	401a      	ands	r2, r3
10013eee:	085b      	lsrs	r3, r3, #1
10013ef0:	4003      	ands	r3, r0
10013ef2:	4313      	orrs	r3, r2
10013ef4:	000d      	movs	r5, r1
10013ef6:	e788      	b.n	10013e0a <__aeabi_fsub+0x36>
10013ef8:	2a00      	cmp	r2, #0
10013efa:	d000      	beq.n	10013efe <__aeabi_fsub+0x12a>
10013efc:	e77a      	b.n	10013df4 <__aeabi_fsub+0x20>
10013efe:	e777      	b.n	10013df0 <__aeabi_fsub+0x1c>
10013f00:	1e03      	subs	r3, r0, #0
10013f02:	d1c5      	bne.n	10013e90 <__aeabi_fsub+0xbc>
10013f04:	2500      	movs	r5, #0
10013f06:	027b      	lsls	r3, r7, #9
10013f08:	0a5b      	lsrs	r3, r3, #9
10013f0a:	b2e4      	uxtb	r4, r4
10013f0c:	e78f      	b.n	10013e2e <__aeabi_fsub+0x5a>
10013f0e:	3801      	subs	r0, #1
10013f10:	2800      	cmp	r0, #0
10013f12:	d0a4      	beq.n	10013e5e <__aeabi_fsub+0x8a>
10013f14:	2cff      	cmp	r4, #255	; 0xff
10013f16:	d197      	bne.n	10013e48 <__aeabi_fsub+0x74>
10013f18:	e777      	b.n	10013e0a <__aeabi_fsub+0x36>
10013f1a:	2a00      	cmp	r2, #0
10013f1c:	d100      	bne.n	10013f20 <__aeabi_fsub+0x14c>
10013f1e:	e774      	b.n	10013e0a <__aeabi_fsub+0x36>
10013f20:	3801      	subs	r0, #1
10013f22:	2800      	cmp	r0, #0
10013f24:	d0da      	beq.n	10013edc <__aeabi_fsub+0x108>
10013f26:	2cff      	cmp	r4, #255	; 0xff
10013f28:	d1cd      	bne.n	10013ec6 <__aeabi_fsub+0xf2>
10013f2a:	e76e      	b.n	10013e0a <__aeabi_fsub+0x36>
10013f2c:	2800      	cmp	r0, #0
10013f2e:	d121      	bne.n	10013f74 <__aeabi_fsub+0x1a0>
10013f30:	1c60      	adds	r0, r4, #1
10013f32:	b2c0      	uxtb	r0, r0
10013f34:	2801      	cmp	r0, #1
10013f36:	dd58      	ble.n	10013fea <__aeabi_fsub+0x216>
10013f38:	2780      	movs	r7, #128	; 0x80
10013f3a:	1a9e      	subs	r6, r3, r2
10013f3c:	04ff      	lsls	r7, r7, #19
10013f3e:	4037      	ands	r7, r6
10013f40:	d02f      	beq.n	10013fa2 <__aeabi_fsub+0x1ce>
10013f42:	1ad6      	subs	r6, r2, r3
10013f44:	000d      	movs	r5, r1
10013f46:	e78f      	b.n	10013e68 <__aeabi_fsub+0x94>
10013f48:	2301      	movs	r3, #1
10013f4a:	401d      	ands	r5, r3
10013f4c:	2300      	movs	r3, #0
10013f4e:	e76e      	b.n	10013e2e <__aeabi_fsub+0x5a>
10013f50:	4b62      	ldr	r3, [pc, #392]	; (100140dc <__aeabi_fsub+0x308>)
10013f52:	1a24      	subs	r4, r4, r0
10013f54:	4033      	ands	r3, r6
10013f56:	e758      	b.n	10013e0a <__aeabi_fsub+0x36>
10013f58:	2800      	cmp	r0, #0
10013f5a:	d151      	bne.n	10014000 <__aeabi_fsub+0x22c>
10013f5c:	1c60      	adds	r0, r4, #1
10013f5e:	b2c6      	uxtb	r6, r0
10013f60:	2e01      	cmp	r6, #1
10013f62:	dd33      	ble.n	10013fcc <__aeabi_fsub+0x1f8>
10013f64:	28ff      	cmp	r0, #255	; 0xff
10013f66:	d02d      	beq.n	10013fc4 <__aeabi_fsub+0x1f0>
10013f68:	189b      	adds	r3, r3, r2
10013f6a:	085b      	lsrs	r3, r3, #1
10013f6c:	0004      	movs	r4, r0
10013f6e:	e74c      	b.n	10013e0a <__aeabi_fsub+0x36>
10013f70:	2201      	movs	r2, #1
10013f72:	e774      	b.n	10013e5e <__aeabi_fsub+0x8a>
10013f74:	2c00      	cmp	r4, #0
10013f76:	d01a      	beq.n	10013fae <__aeabi_fsub+0x1da>
10013f78:	2eff      	cmp	r6, #255	; 0xff
10013f7a:	d01f      	beq.n	10013fbc <__aeabi_fsub+0x1e8>
10013f7c:	2480      	movs	r4, #128	; 0x80
10013f7e:	04e4      	lsls	r4, r4, #19
10013f80:	4240      	negs	r0, r0
10013f82:	4323      	orrs	r3, r4
10013f84:	281b      	cmp	r0, #27
10013f86:	dd00      	ble.n	10013f8a <__aeabi_fsub+0x1b6>
10013f88:	e096      	b.n	100140b8 <__aeabi_fsub+0x2e4>
10013f8a:	001d      	movs	r5, r3
10013f8c:	2420      	movs	r4, #32
10013f8e:	40c5      	lsrs	r5, r0
10013f90:	1a20      	subs	r0, r4, r0
10013f92:	4083      	lsls	r3, r0
10013f94:	1e58      	subs	r0, r3, #1
10013f96:	4183      	sbcs	r3, r0
10013f98:	432b      	orrs	r3, r5
10013f9a:	1ad3      	subs	r3, r2, r3
10013f9c:	0034      	movs	r4, r6
10013f9e:	000d      	movs	r5, r1
10013fa0:	e75e      	b.n	10013e60 <__aeabi_fsub+0x8c>
10013fa2:	2e00      	cmp	r6, #0
10013fa4:	d000      	beq.n	10013fa8 <__aeabi_fsub+0x1d4>
10013fa6:	e75f      	b.n	10013e68 <__aeabi_fsub+0x94>
10013fa8:	2500      	movs	r5, #0
10013faa:	2400      	movs	r4, #0
10013fac:	e7ab      	b.n	10013f06 <__aeabi_fsub+0x132>
10013fae:	2b00      	cmp	r3, #0
10013fb0:	d044      	beq.n	1001403c <__aeabi_fsub+0x268>
10013fb2:	43c0      	mvns	r0, r0
10013fb4:	2800      	cmp	r0, #0
10013fb6:	d0f0      	beq.n	10013f9a <__aeabi_fsub+0x1c6>
10013fb8:	2eff      	cmp	r6, #255	; 0xff
10013fba:	d1e3      	bne.n	10013f84 <__aeabi_fsub+0x1b0>
10013fbc:	0013      	movs	r3, r2
10013fbe:	24ff      	movs	r4, #255	; 0xff
10013fc0:	000d      	movs	r5, r1
10013fc2:	e722      	b.n	10013e0a <__aeabi_fsub+0x36>
10013fc4:	000d      	movs	r5, r1
10013fc6:	24ff      	movs	r4, #255	; 0xff
10013fc8:	2300      	movs	r3, #0
10013fca:	e730      	b.n	10013e2e <__aeabi_fsub+0x5a>
10013fcc:	2c00      	cmp	r4, #0
10013fce:	d15d      	bne.n	1001408c <__aeabi_fsub+0x2b8>
10013fd0:	2b00      	cmp	r3, #0
10013fd2:	d07d      	beq.n	100140d0 <__aeabi_fsub+0x2fc>
10013fd4:	2a00      	cmp	r2, #0
10013fd6:	d100      	bne.n	10013fda <__aeabi_fsub+0x206>
10013fd8:	e717      	b.n	10013e0a <__aeabi_fsub+0x36>
10013fda:	189b      	adds	r3, r3, r2
10013fdc:	015a      	lsls	r2, r3, #5
10013fde:	d400      	bmi.n	10013fe2 <__aeabi_fsub+0x20e>
10013fe0:	e756      	b.n	10013e90 <__aeabi_fsub+0xbc>
10013fe2:	4a3e      	ldr	r2, [pc, #248]	; (100140dc <__aeabi_fsub+0x308>)
10013fe4:	0004      	movs	r4, r0
10013fe6:	4013      	ands	r3, r2
10013fe8:	e70f      	b.n	10013e0a <__aeabi_fsub+0x36>
10013fea:	2c00      	cmp	r4, #0
10013fec:	d11e      	bne.n	1001402c <__aeabi_fsub+0x258>
10013fee:	2b00      	cmp	r3, #0
10013ff0:	d12f      	bne.n	10014052 <__aeabi_fsub+0x27e>
10013ff2:	2a00      	cmp	r2, #0
10013ff4:	d065      	beq.n	100140c2 <__aeabi_fsub+0x2ee>
10013ff6:	0013      	movs	r3, r2
10013ff8:	000d      	movs	r5, r1
10013ffa:	e706      	b.n	10013e0a <__aeabi_fsub+0x36>
10013ffc:	2201      	movs	r2, #1
10013ffe:	e76d      	b.n	10013edc <__aeabi_fsub+0x108>
10014000:	2c00      	cmp	r4, #0
10014002:	d11f      	bne.n	10014044 <__aeabi_fsub+0x270>
10014004:	2b00      	cmp	r3, #0
10014006:	d059      	beq.n	100140bc <__aeabi_fsub+0x2e8>
10014008:	43c0      	mvns	r0, r0
1001400a:	2800      	cmp	r0, #0
1001400c:	d00b      	beq.n	10014026 <__aeabi_fsub+0x252>
1001400e:	2eff      	cmp	r6, #255	; 0xff
10014010:	d04f      	beq.n	100140b2 <__aeabi_fsub+0x2de>
10014012:	281b      	cmp	r0, #27
10014014:	dc5e      	bgt.n	100140d4 <__aeabi_fsub+0x300>
10014016:	001d      	movs	r5, r3
10014018:	2420      	movs	r4, #32
1001401a:	40c5      	lsrs	r5, r0
1001401c:	1a20      	subs	r0, r4, r0
1001401e:	4083      	lsls	r3, r0
10014020:	1e58      	subs	r0, r3, #1
10014022:	4183      	sbcs	r3, r0
10014024:	432b      	orrs	r3, r5
10014026:	189b      	adds	r3, r3, r2
10014028:	0034      	movs	r4, r6
1001402a:	e758      	b.n	10013ede <__aeabi_fsub+0x10a>
1001402c:	2b00      	cmp	r3, #0
1001402e:	d11c      	bne.n	1001406a <__aeabi_fsub+0x296>
10014030:	2a00      	cmp	r2, #0
10014032:	d049      	beq.n	100140c8 <__aeabi_fsub+0x2f4>
10014034:	0013      	movs	r3, r2
10014036:	000d      	movs	r5, r1
10014038:	24ff      	movs	r4, #255	; 0xff
1001403a:	e6e6      	b.n	10013e0a <__aeabi_fsub+0x36>
1001403c:	0013      	movs	r3, r2
1001403e:	0034      	movs	r4, r6
10014040:	000d      	movs	r5, r1
10014042:	e6e2      	b.n	10013e0a <__aeabi_fsub+0x36>
10014044:	2eff      	cmp	r6, #255	; 0xff
10014046:	d034      	beq.n	100140b2 <__aeabi_fsub+0x2de>
10014048:	2480      	movs	r4, #128	; 0x80
1001404a:	04e4      	lsls	r4, r4, #19
1001404c:	4240      	negs	r0, r0
1001404e:	4323      	orrs	r3, r4
10014050:	e7df      	b.n	10014012 <__aeabi_fsub+0x23e>
10014052:	2a00      	cmp	r2, #0
10014054:	d100      	bne.n	10014058 <__aeabi_fsub+0x284>
10014056:	e6d8      	b.n	10013e0a <__aeabi_fsub+0x36>
10014058:	2780      	movs	r7, #128	; 0x80
1001405a:	1a98      	subs	r0, r3, r2
1001405c:	04ff      	lsls	r7, r7, #19
1001405e:	4007      	ands	r7, r0
10014060:	d100      	bne.n	10014064 <__aeabi_fsub+0x290>
10014062:	e74d      	b.n	10013f00 <__aeabi_fsub+0x12c>
10014064:	1ad3      	subs	r3, r2, r3
10014066:	000d      	movs	r5, r1
10014068:	e6cf      	b.n	10013e0a <__aeabi_fsub+0x36>
1001406a:	24ff      	movs	r4, #255	; 0xff
1001406c:	2a00      	cmp	r2, #0
1001406e:	d100      	bne.n	10014072 <__aeabi_fsub+0x29e>
10014070:	e6cb      	b.n	10013e0a <__aeabi_fsub+0x36>
10014072:	2080      	movs	r0, #128	; 0x80
10014074:	08db      	lsrs	r3, r3, #3
10014076:	03c0      	lsls	r0, r0, #15
10014078:	4203      	tst	r3, r0
1001407a:	d004      	beq.n	10014086 <__aeabi_fsub+0x2b2>
1001407c:	08d2      	lsrs	r2, r2, #3
1001407e:	4202      	tst	r2, r0
10014080:	d101      	bne.n	10014086 <__aeabi_fsub+0x2b2>
10014082:	0013      	movs	r3, r2
10014084:	000d      	movs	r5, r1
10014086:	00db      	lsls	r3, r3, #3
10014088:	24ff      	movs	r4, #255	; 0xff
1001408a:	e6be      	b.n	10013e0a <__aeabi_fsub+0x36>
1001408c:	2b00      	cmp	r3, #0
1001408e:	d010      	beq.n	100140b2 <__aeabi_fsub+0x2de>
10014090:	24ff      	movs	r4, #255	; 0xff
10014092:	2a00      	cmp	r2, #0
10014094:	d100      	bne.n	10014098 <__aeabi_fsub+0x2c4>
10014096:	e6b8      	b.n	10013e0a <__aeabi_fsub+0x36>
10014098:	2080      	movs	r0, #128	; 0x80
1001409a:	08db      	lsrs	r3, r3, #3
1001409c:	03c0      	lsls	r0, r0, #15
1001409e:	4203      	tst	r3, r0
100140a0:	d003      	beq.n	100140aa <__aeabi_fsub+0x2d6>
100140a2:	08d2      	lsrs	r2, r2, #3
100140a4:	4202      	tst	r2, r0
100140a6:	d100      	bne.n	100140aa <__aeabi_fsub+0x2d6>
100140a8:	0013      	movs	r3, r2
100140aa:	00db      	lsls	r3, r3, #3
100140ac:	000d      	movs	r5, r1
100140ae:	24ff      	movs	r4, #255	; 0xff
100140b0:	e6ab      	b.n	10013e0a <__aeabi_fsub+0x36>
100140b2:	0013      	movs	r3, r2
100140b4:	24ff      	movs	r4, #255	; 0xff
100140b6:	e6a8      	b.n	10013e0a <__aeabi_fsub+0x36>
100140b8:	2301      	movs	r3, #1
100140ba:	e76e      	b.n	10013f9a <__aeabi_fsub+0x1c6>
100140bc:	0013      	movs	r3, r2
100140be:	0034      	movs	r4, r6
100140c0:	e6a3      	b.n	10013e0a <__aeabi_fsub+0x36>
100140c2:	2700      	movs	r7, #0
100140c4:	2500      	movs	r5, #0
100140c6:	e71e      	b.n	10013f06 <__aeabi_fsub+0x132>
100140c8:	2780      	movs	r7, #128	; 0x80
100140ca:	2500      	movs	r5, #0
100140cc:	03ff      	lsls	r7, r7, #15
100140ce:	e6e9      	b.n	10013ea4 <__aeabi_fsub+0xd0>
100140d0:	0013      	movs	r3, r2
100140d2:	e69a      	b.n	10013e0a <__aeabi_fsub+0x36>
100140d4:	2301      	movs	r3, #1
100140d6:	e7a6      	b.n	10014026 <__aeabi_fsub+0x252>
100140d8:	7dffffff 	.word	0x7dffffff
100140dc:	fbffffff 	.word	0xfbffffff

100140e0 <__aeabi_f2iz>:
100140e0:	0243      	lsls	r3, r0, #9
100140e2:	0a59      	lsrs	r1, r3, #9
100140e4:	0043      	lsls	r3, r0, #1
100140e6:	0fc2      	lsrs	r2, r0, #31
100140e8:	0e1b      	lsrs	r3, r3, #24
100140ea:	2000      	movs	r0, #0
100140ec:	2b7e      	cmp	r3, #126	; 0x7e
100140ee:	dd0e      	ble.n	1001410e <__aeabi_f2iz+0x2e>
100140f0:	2b9d      	cmp	r3, #157	; 0x9d
100140f2:	dc0d      	bgt.n	10014110 <__aeabi_f2iz+0x30>
100140f4:	2080      	movs	r0, #128	; 0x80
100140f6:	0400      	lsls	r0, r0, #16
100140f8:	4301      	orrs	r1, r0
100140fa:	2b95      	cmp	r3, #149	; 0x95
100140fc:	dc0b      	bgt.n	10014116 <__aeabi_f2iz+0x36>
100140fe:	2096      	movs	r0, #150	; 0x96
10014100:	1ac3      	subs	r3, r0, r3
10014102:	40d9      	lsrs	r1, r3
10014104:	000b      	movs	r3, r1
10014106:	4258      	negs	r0, r3
10014108:	2a00      	cmp	r2, #0
1001410a:	d100      	bne.n	1001410e <__aeabi_f2iz+0x2e>
1001410c:	0018      	movs	r0, r3
1001410e:	4770      	bx	lr
10014110:	4b03      	ldr	r3, [pc, #12]	; (10014120 <__aeabi_f2iz+0x40>)
10014112:	18d0      	adds	r0, r2, r3
10014114:	e7fb      	b.n	1001410e <__aeabi_f2iz+0x2e>
10014116:	3b96      	subs	r3, #150	; 0x96
10014118:	4099      	lsls	r1, r3
1001411a:	000b      	movs	r3, r1
1001411c:	e7f3      	b.n	10014106 <__aeabi_f2iz+0x26>
1001411e:	46c0      	nop			; (mov r8, r8)
10014120:	7fffffff 	.word	0x7fffffff

10014124 <__aeabi_i2f>:
10014124:	b570      	push	{r4, r5, r6, lr}
10014126:	2800      	cmp	r0, #0
10014128:	d030      	beq.n	1001418c <__aeabi_i2f+0x68>
1001412a:	17c3      	asrs	r3, r0, #31
1001412c:	18c5      	adds	r5, r0, r3
1001412e:	405d      	eors	r5, r3
10014130:	0fc4      	lsrs	r4, r0, #31
10014132:	0028      	movs	r0, r5
10014134:	f000 ffc6 	bl	100150c4 <__clzsi2>
10014138:	239e      	movs	r3, #158	; 0x9e
1001413a:	1a1b      	subs	r3, r3, r0
1001413c:	2b96      	cmp	r3, #150	; 0x96
1001413e:	dc0d      	bgt.n	1001415c <__aeabi_i2f+0x38>
10014140:	2296      	movs	r2, #150	; 0x96
10014142:	1ad2      	subs	r2, r2, r3
10014144:	4095      	lsls	r5, r2
10014146:	026a      	lsls	r2, r5, #9
10014148:	0a52      	lsrs	r2, r2, #9
1001414a:	b2d8      	uxtb	r0, r3
1001414c:	0252      	lsls	r2, r2, #9
1001414e:	05c0      	lsls	r0, r0, #23
10014150:	0a52      	lsrs	r2, r2, #9
10014152:	07e4      	lsls	r4, r4, #31
10014154:	4302      	orrs	r2, r0
10014156:	4322      	orrs	r2, r4
10014158:	0010      	movs	r0, r2
1001415a:	bd70      	pop	{r4, r5, r6, pc}
1001415c:	2b99      	cmp	r3, #153	; 0x99
1001415e:	dc19      	bgt.n	10014194 <__aeabi_i2f+0x70>
10014160:	2299      	movs	r2, #153	; 0x99
10014162:	1ad2      	subs	r2, r2, r3
10014164:	4095      	lsls	r5, r2
10014166:	4a12      	ldr	r2, [pc, #72]	; (100141b0 <__aeabi_i2f+0x8c>)
10014168:	402a      	ands	r2, r5
1001416a:	0769      	lsls	r1, r5, #29
1001416c:	d004      	beq.n	10014178 <__aeabi_i2f+0x54>
1001416e:	210f      	movs	r1, #15
10014170:	400d      	ands	r5, r1
10014172:	2d04      	cmp	r5, #4
10014174:	d000      	beq.n	10014178 <__aeabi_i2f+0x54>
10014176:	3204      	adds	r2, #4
10014178:	0151      	lsls	r1, r2, #5
1001417a:	d503      	bpl.n	10014184 <__aeabi_i2f+0x60>
1001417c:	4b0c      	ldr	r3, [pc, #48]	; (100141b0 <__aeabi_i2f+0x8c>)
1001417e:	401a      	ands	r2, r3
10014180:	239f      	movs	r3, #159	; 0x9f
10014182:	1a1b      	subs	r3, r3, r0
10014184:	0192      	lsls	r2, r2, #6
10014186:	0a52      	lsrs	r2, r2, #9
10014188:	b2d8      	uxtb	r0, r3
1001418a:	e7df      	b.n	1001414c <__aeabi_i2f+0x28>
1001418c:	2400      	movs	r4, #0
1001418e:	2000      	movs	r0, #0
10014190:	2200      	movs	r2, #0
10014192:	e7db      	b.n	1001414c <__aeabi_i2f+0x28>
10014194:	2205      	movs	r2, #5
10014196:	002e      	movs	r6, r5
10014198:	1a12      	subs	r2, r2, r0
1001419a:	21b9      	movs	r1, #185	; 0xb9
1001419c:	40d6      	lsrs	r6, r2
1001419e:	002a      	movs	r2, r5
100141a0:	1ac9      	subs	r1, r1, r3
100141a2:	408a      	lsls	r2, r1
100141a4:	1e55      	subs	r5, r2, #1
100141a6:	41aa      	sbcs	r2, r5
100141a8:	0035      	movs	r5, r6
100141aa:	4315      	orrs	r5, r2
100141ac:	e7db      	b.n	10014166 <__aeabi_i2f+0x42>
100141ae:	46c0      	nop			; (mov r8, r8)
100141b0:	fbffffff 	.word	0xfbffffff

100141b4 <__aeabi_ui2f>:
100141b4:	b570      	push	{r4, r5, r6, lr}
100141b6:	1e04      	subs	r4, r0, #0
100141b8:	d028      	beq.n	1001420c <__aeabi_ui2f+0x58>
100141ba:	f000 ff83 	bl	100150c4 <__clzsi2>
100141be:	239e      	movs	r3, #158	; 0x9e
100141c0:	1a1b      	subs	r3, r3, r0
100141c2:	2b96      	cmp	r3, #150	; 0x96
100141c4:	dc0a      	bgt.n	100141dc <__aeabi_ui2f+0x28>
100141c6:	2296      	movs	r2, #150	; 0x96
100141c8:	1ad2      	subs	r2, r2, r3
100141ca:	4094      	lsls	r4, r2
100141cc:	0262      	lsls	r2, r4, #9
100141ce:	0a52      	lsrs	r2, r2, #9
100141d0:	b2d8      	uxtb	r0, r3
100141d2:	0252      	lsls	r2, r2, #9
100141d4:	0a52      	lsrs	r2, r2, #9
100141d6:	05c0      	lsls	r0, r0, #23
100141d8:	4310      	orrs	r0, r2
100141da:	bd70      	pop	{r4, r5, r6, pc}
100141dc:	2b99      	cmp	r3, #153	; 0x99
100141de:	dc18      	bgt.n	10014212 <__aeabi_ui2f+0x5e>
100141e0:	2299      	movs	r2, #153	; 0x99
100141e2:	1ad2      	subs	r2, r2, r3
100141e4:	4094      	lsls	r4, r2
100141e6:	4a11      	ldr	r2, [pc, #68]	; (1001422c <__aeabi_ui2f+0x78>)
100141e8:	4022      	ands	r2, r4
100141ea:	0761      	lsls	r1, r4, #29
100141ec:	d004      	beq.n	100141f8 <__aeabi_ui2f+0x44>
100141ee:	210f      	movs	r1, #15
100141f0:	400c      	ands	r4, r1
100141f2:	2c04      	cmp	r4, #4
100141f4:	d000      	beq.n	100141f8 <__aeabi_ui2f+0x44>
100141f6:	3204      	adds	r2, #4
100141f8:	0151      	lsls	r1, r2, #5
100141fa:	d503      	bpl.n	10014204 <__aeabi_ui2f+0x50>
100141fc:	4b0b      	ldr	r3, [pc, #44]	; (1001422c <__aeabi_ui2f+0x78>)
100141fe:	401a      	ands	r2, r3
10014200:	239f      	movs	r3, #159	; 0x9f
10014202:	1a1b      	subs	r3, r3, r0
10014204:	0192      	lsls	r2, r2, #6
10014206:	0a52      	lsrs	r2, r2, #9
10014208:	b2d8      	uxtb	r0, r3
1001420a:	e7e2      	b.n	100141d2 <__aeabi_ui2f+0x1e>
1001420c:	2000      	movs	r0, #0
1001420e:	2200      	movs	r2, #0
10014210:	e7df      	b.n	100141d2 <__aeabi_ui2f+0x1e>
10014212:	2205      	movs	r2, #5
10014214:	0025      	movs	r5, r4
10014216:	1a12      	subs	r2, r2, r0
10014218:	21b9      	movs	r1, #185	; 0xb9
1001421a:	40d5      	lsrs	r5, r2
1001421c:	0022      	movs	r2, r4
1001421e:	1ac9      	subs	r1, r1, r3
10014220:	408a      	lsls	r2, r1
10014222:	1e54      	subs	r4, r2, #1
10014224:	41a2      	sbcs	r2, r4
10014226:	002c      	movs	r4, r5
10014228:	4314      	orrs	r4, r2
1001422a:	e7dc      	b.n	100141e6 <__aeabi_ui2f+0x32>
1001422c:	fbffffff 	.word	0xfbffffff

10014230 <__eqdf2>:
10014230:	b5f0      	push	{r4, r5, r6, r7, lr}
10014232:	465f      	mov	r7, fp
10014234:	4656      	mov	r6, sl
10014236:	464d      	mov	r5, r9
10014238:	4644      	mov	r4, r8
1001423a:	b4f0      	push	{r4, r5, r6, r7}
1001423c:	031f      	lsls	r7, r3, #12
1001423e:	005c      	lsls	r4, r3, #1
10014240:	0fdb      	lsrs	r3, r3, #31
10014242:	469a      	mov	sl, r3
10014244:	4b19      	ldr	r3, [pc, #100]	; (100142ac <__eqdf2+0x7c>)
10014246:	030e      	lsls	r6, r1, #12
10014248:	004d      	lsls	r5, r1, #1
1001424a:	0fc9      	lsrs	r1, r1, #31
1001424c:	4680      	mov	r8, r0
1001424e:	0b36      	lsrs	r6, r6, #12
10014250:	0d6d      	lsrs	r5, r5, #21
10014252:	468b      	mov	fp, r1
10014254:	4691      	mov	r9, r2
10014256:	0b3f      	lsrs	r7, r7, #12
10014258:	0d64      	lsrs	r4, r4, #21
1001425a:	429d      	cmp	r5, r3
1001425c:	d019      	beq.n	10014292 <__eqdf2+0x62>
1001425e:	4b13      	ldr	r3, [pc, #76]	; (100142ac <__eqdf2+0x7c>)
10014260:	429c      	cmp	r4, r3
10014262:	d01b      	beq.n	1001429c <__eqdf2+0x6c>
10014264:	2301      	movs	r3, #1
10014266:	42a5      	cmp	r5, r4
10014268:	d006      	beq.n	10014278 <__eqdf2+0x48>
1001426a:	0018      	movs	r0, r3
1001426c:	bc3c      	pop	{r2, r3, r4, r5}
1001426e:	4690      	mov	r8, r2
10014270:	4699      	mov	r9, r3
10014272:	46a2      	mov	sl, r4
10014274:	46ab      	mov	fp, r5
10014276:	bdf0      	pop	{r4, r5, r6, r7, pc}
10014278:	42be      	cmp	r6, r7
1001427a:	d1f6      	bne.n	1001426a <__eqdf2+0x3a>
1001427c:	45c8      	cmp	r8, r9
1001427e:	d1f4      	bne.n	1001426a <__eqdf2+0x3a>
10014280:	45d3      	cmp	fp, sl
10014282:	d010      	beq.n	100142a6 <__eqdf2+0x76>
10014284:	2d00      	cmp	r5, #0
10014286:	d1f0      	bne.n	1001426a <__eqdf2+0x3a>
10014288:	4330      	orrs	r0, r6
1001428a:	0003      	movs	r3, r0
1001428c:	1e5a      	subs	r2, r3, #1
1001428e:	4193      	sbcs	r3, r2
10014290:	e7eb      	b.n	1001426a <__eqdf2+0x3a>
10014292:	0031      	movs	r1, r6
10014294:	2301      	movs	r3, #1
10014296:	4301      	orrs	r1, r0
10014298:	d1e7      	bne.n	1001426a <__eqdf2+0x3a>
1001429a:	e7e0      	b.n	1001425e <__eqdf2+0x2e>
1001429c:	433a      	orrs	r2, r7
1001429e:	2301      	movs	r3, #1
100142a0:	2a00      	cmp	r2, #0
100142a2:	d1e2      	bne.n	1001426a <__eqdf2+0x3a>
100142a4:	e7de      	b.n	10014264 <__eqdf2+0x34>
100142a6:	2300      	movs	r3, #0
100142a8:	e7df      	b.n	1001426a <__eqdf2+0x3a>
100142aa:	46c0      	nop			; (mov r8, r8)
100142ac:	000007ff 	.word	0x000007ff

100142b0 <__gedf2>:
100142b0:	b5f0      	push	{r4, r5, r6, r7, lr}
100142b2:	465f      	mov	r7, fp
100142b4:	4644      	mov	r4, r8
100142b6:	4656      	mov	r6, sl
100142b8:	464d      	mov	r5, r9
100142ba:	b4f0      	push	{r4, r5, r6, r7}
100142bc:	031f      	lsls	r7, r3, #12
100142be:	0b3c      	lsrs	r4, r7, #12
100142c0:	4f2c      	ldr	r7, [pc, #176]	; (10014374 <__gedf2+0xc4>)
100142c2:	030e      	lsls	r6, r1, #12
100142c4:	004d      	lsls	r5, r1, #1
100142c6:	46a3      	mov	fp, r4
100142c8:	005c      	lsls	r4, r3, #1
100142ca:	4684      	mov	ip, r0
100142cc:	0b36      	lsrs	r6, r6, #12
100142ce:	0d6d      	lsrs	r5, r5, #21
100142d0:	0fc9      	lsrs	r1, r1, #31
100142d2:	4690      	mov	r8, r2
100142d4:	0d64      	lsrs	r4, r4, #21
100142d6:	0fdb      	lsrs	r3, r3, #31
100142d8:	42bd      	cmp	r5, r7
100142da:	d02b      	beq.n	10014334 <__gedf2+0x84>
100142dc:	4f25      	ldr	r7, [pc, #148]	; (10014374 <__gedf2+0xc4>)
100142de:	42bc      	cmp	r4, r7
100142e0:	d02e      	beq.n	10014340 <__gedf2+0x90>
100142e2:	2d00      	cmp	r5, #0
100142e4:	d10e      	bne.n	10014304 <__gedf2+0x54>
100142e6:	4330      	orrs	r0, r6
100142e8:	0007      	movs	r7, r0
100142ea:	4681      	mov	r9, r0
100142ec:	4278      	negs	r0, r7
100142ee:	4178      	adcs	r0, r7
100142f0:	2c00      	cmp	r4, #0
100142f2:	d117      	bne.n	10014324 <__gedf2+0x74>
100142f4:	465f      	mov	r7, fp
100142f6:	433a      	orrs	r2, r7
100142f8:	d114      	bne.n	10014324 <__gedf2+0x74>
100142fa:	464b      	mov	r3, r9
100142fc:	2000      	movs	r0, #0
100142fe:	2b00      	cmp	r3, #0
10014300:	d00a      	beq.n	10014318 <__gedf2+0x68>
10014302:	e006      	b.n	10014312 <__gedf2+0x62>
10014304:	2c00      	cmp	r4, #0
10014306:	d102      	bne.n	1001430e <__gedf2+0x5e>
10014308:	4658      	mov	r0, fp
1001430a:	4302      	orrs	r2, r0
1001430c:	d001      	beq.n	10014312 <__gedf2+0x62>
1001430e:	4299      	cmp	r1, r3
10014310:	d01a      	beq.n	10014348 <__gedf2+0x98>
10014312:	2301      	movs	r3, #1
10014314:	4248      	negs	r0, r1
10014316:	4318      	orrs	r0, r3
10014318:	bc3c      	pop	{r2, r3, r4, r5}
1001431a:	4690      	mov	r8, r2
1001431c:	4699      	mov	r9, r3
1001431e:	46a2      	mov	sl, r4
10014320:	46ab      	mov	fp, r5
10014322:	bdf0      	pop	{r4, r5, r6, r7, pc}
10014324:	2800      	cmp	r0, #0
10014326:	d0f2      	beq.n	1001430e <__gedf2+0x5e>
10014328:	4258      	negs	r0, r3
1001432a:	4158      	adcs	r0, r3
1001432c:	2201      	movs	r2, #1
1001432e:	4240      	negs	r0, r0
10014330:	4310      	orrs	r0, r2
10014332:	e7f1      	b.n	10014318 <__gedf2+0x68>
10014334:	0037      	movs	r7, r6
10014336:	4307      	orrs	r7, r0
10014338:	d0d0      	beq.n	100142dc <__gedf2+0x2c>
1001433a:	2002      	movs	r0, #2
1001433c:	4240      	negs	r0, r0
1001433e:	e7eb      	b.n	10014318 <__gedf2+0x68>
10014340:	465f      	mov	r7, fp
10014342:	4317      	orrs	r7, r2
10014344:	d0cd      	beq.n	100142e2 <__gedf2+0x32>
10014346:	e7f8      	b.n	1001433a <__gedf2+0x8a>
10014348:	42a5      	cmp	r5, r4
1001434a:	dce2      	bgt.n	10014312 <__gedf2+0x62>
1001434c:	db05      	blt.n	1001435a <__gedf2+0xaa>
1001434e:	455e      	cmp	r6, fp
10014350:	d8df      	bhi.n	10014312 <__gedf2+0x62>
10014352:	d008      	beq.n	10014366 <__gedf2+0xb6>
10014354:	2000      	movs	r0, #0
10014356:	455e      	cmp	r6, fp
10014358:	d2de      	bcs.n	10014318 <__gedf2+0x68>
1001435a:	4248      	negs	r0, r1
1001435c:	4148      	adcs	r0, r1
1001435e:	2301      	movs	r3, #1
10014360:	4240      	negs	r0, r0
10014362:	4318      	orrs	r0, r3
10014364:	e7d8      	b.n	10014318 <__gedf2+0x68>
10014366:	45c4      	cmp	ip, r8
10014368:	d8d3      	bhi.n	10014312 <__gedf2+0x62>
1001436a:	2000      	movs	r0, #0
1001436c:	45c4      	cmp	ip, r8
1001436e:	d3f4      	bcc.n	1001435a <__gedf2+0xaa>
10014370:	e7d2      	b.n	10014318 <__gedf2+0x68>
10014372:	46c0      	nop			; (mov r8, r8)
10014374:	000007ff 	.word	0x000007ff

10014378 <__ledf2>:
10014378:	b5f0      	push	{r4, r5, r6, r7, lr}
1001437a:	465f      	mov	r7, fp
1001437c:	464d      	mov	r5, r9
1001437e:	4644      	mov	r4, r8
10014380:	4656      	mov	r6, sl
10014382:	b4f0      	push	{r4, r5, r6, r7}
10014384:	031c      	lsls	r4, r3, #12
10014386:	0b24      	lsrs	r4, r4, #12
10014388:	46a4      	mov	ip, r4
1001438a:	4c2f      	ldr	r4, [pc, #188]	; (10014448 <__ledf2+0xd0>)
1001438c:	030f      	lsls	r7, r1, #12
1001438e:	004d      	lsls	r5, r1, #1
10014390:	005e      	lsls	r6, r3, #1
10014392:	0fc9      	lsrs	r1, r1, #31
10014394:	4680      	mov	r8, r0
10014396:	0b3f      	lsrs	r7, r7, #12
10014398:	0d6d      	lsrs	r5, r5, #21
1001439a:	468b      	mov	fp, r1
1001439c:	4691      	mov	r9, r2
1001439e:	0d76      	lsrs	r6, r6, #21
100143a0:	0fdb      	lsrs	r3, r3, #31
100143a2:	42a5      	cmp	r5, r4
100143a4:	d020      	beq.n	100143e8 <__ledf2+0x70>
100143a6:	4c28      	ldr	r4, [pc, #160]	; (10014448 <__ledf2+0xd0>)
100143a8:	42a6      	cmp	r6, r4
100143aa:	d022      	beq.n	100143f2 <__ledf2+0x7a>
100143ac:	2d00      	cmp	r5, #0
100143ae:	d112      	bne.n	100143d6 <__ledf2+0x5e>
100143b0:	4338      	orrs	r0, r7
100143b2:	4244      	negs	r4, r0
100143b4:	4144      	adcs	r4, r0
100143b6:	2e00      	cmp	r6, #0
100143b8:	d020      	beq.n	100143fc <__ledf2+0x84>
100143ba:	2c00      	cmp	r4, #0
100143bc:	d00d      	beq.n	100143da <__ledf2+0x62>
100143be:	425c      	negs	r4, r3
100143c0:	4163      	adcs	r3, r4
100143c2:	2401      	movs	r4, #1
100143c4:	425b      	negs	r3, r3
100143c6:	431c      	orrs	r4, r3
100143c8:	0020      	movs	r0, r4
100143ca:	bc3c      	pop	{r2, r3, r4, r5}
100143cc:	4690      	mov	r8, r2
100143ce:	4699      	mov	r9, r3
100143d0:	46a2      	mov	sl, r4
100143d2:	46ab      	mov	fp, r5
100143d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
100143d6:	2e00      	cmp	r6, #0
100143d8:	d017      	beq.n	1001440a <__ledf2+0x92>
100143da:	455b      	cmp	r3, fp
100143dc:	d019      	beq.n	10014412 <__ledf2+0x9a>
100143de:	465b      	mov	r3, fp
100143e0:	425c      	negs	r4, r3
100143e2:	2301      	movs	r3, #1
100143e4:	431c      	orrs	r4, r3
100143e6:	e7ef      	b.n	100143c8 <__ledf2+0x50>
100143e8:	0039      	movs	r1, r7
100143ea:	2402      	movs	r4, #2
100143ec:	4301      	orrs	r1, r0
100143ee:	d1eb      	bne.n	100143c8 <__ledf2+0x50>
100143f0:	e7d9      	b.n	100143a6 <__ledf2+0x2e>
100143f2:	4661      	mov	r1, ip
100143f4:	2402      	movs	r4, #2
100143f6:	4311      	orrs	r1, r2
100143f8:	d1e6      	bne.n	100143c8 <__ledf2+0x50>
100143fa:	e7d7      	b.n	100143ac <__ledf2+0x34>
100143fc:	4661      	mov	r1, ip
100143fe:	430a      	orrs	r2, r1
10014400:	d1db      	bne.n	100143ba <__ledf2+0x42>
10014402:	2400      	movs	r4, #0
10014404:	2800      	cmp	r0, #0
10014406:	d0df      	beq.n	100143c8 <__ledf2+0x50>
10014408:	e7e9      	b.n	100143de <__ledf2+0x66>
1001440a:	4661      	mov	r1, ip
1001440c:	430a      	orrs	r2, r1
1001440e:	d1e4      	bne.n	100143da <__ledf2+0x62>
10014410:	e7e5      	b.n	100143de <__ledf2+0x66>
10014412:	42b5      	cmp	r5, r6
10014414:	dd03      	ble.n	1001441e <__ledf2+0xa6>
10014416:	2201      	movs	r2, #1
10014418:	425c      	negs	r4, r3
1001441a:	4314      	orrs	r4, r2
1001441c:	e7d4      	b.n	100143c8 <__ledf2+0x50>
1001441e:	42b5      	cmp	r5, r6
10014420:	dbcd      	blt.n	100143be <__ledf2+0x46>
10014422:	4567      	cmp	r7, ip
10014424:	d8db      	bhi.n	100143de <__ledf2+0x66>
10014426:	d009      	beq.n	1001443c <__ledf2+0xc4>
10014428:	2400      	movs	r4, #0
1001442a:	4567      	cmp	r7, ip
1001442c:	d2cc      	bcs.n	100143c8 <__ledf2+0x50>
1001442e:	4659      	mov	r1, fp
10014430:	424c      	negs	r4, r1
10014432:	4161      	adcs	r1, r4
10014434:	2401      	movs	r4, #1
10014436:	4249      	negs	r1, r1
10014438:	430c      	orrs	r4, r1
1001443a:	e7c5      	b.n	100143c8 <__ledf2+0x50>
1001443c:	45c8      	cmp	r8, r9
1001443e:	d8ce      	bhi.n	100143de <__ledf2+0x66>
10014440:	2400      	movs	r4, #0
10014442:	45c8      	cmp	r8, r9
10014444:	d3f3      	bcc.n	1001442e <__ledf2+0xb6>
10014446:	e7bf      	b.n	100143c8 <__ledf2+0x50>
10014448:	000007ff 	.word	0x000007ff

1001444c <__aeabi_dmul>:
1001444c:	b5f0      	push	{r4, r5, r6, r7, lr}
1001444e:	465f      	mov	r7, fp
10014450:	4656      	mov	r6, sl
10014452:	464d      	mov	r5, r9
10014454:	4644      	mov	r4, r8
10014456:	b4f0      	push	{r4, r5, r6, r7}
10014458:	030d      	lsls	r5, r1, #12
1001445a:	4699      	mov	r9, r3
1001445c:	004e      	lsls	r6, r1, #1
1001445e:	0b2b      	lsrs	r3, r5, #12
10014460:	b087      	sub	sp, #28
10014462:	0007      	movs	r7, r0
10014464:	4692      	mov	sl, r2
10014466:	4680      	mov	r8, r0
10014468:	469b      	mov	fp, r3
1001446a:	0d76      	lsrs	r6, r6, #21
1001446c:	0fcc      	lsrs	r4, r1, #31
1001446e:	2e00      	cmp	r6, #0
10014470:	d069      	beq.n	10014546 <__aeabi_dmul+0xfa>
10014472:	4b6d      	ldr	r3, [pc, #436]	; (10014628 <__aeabi_dmul+0x1dc>)
10014474:	429e      	cmp	r6, r3
10014476:	d035      	beq.n	100144e4 <__aeabi_dmul+0x98>
10014478:	465b      	mov	r3, fp
1001447a:	2280      	movs	r2, #128	; 0x80
1001447c:	00dd      	lsls	r5, r3, #3
1001447e:	0412      	lsls	r2, r2, #16
10014480:	0f43      	lsrs	r3, r0, #29
10014482:	4313      	orrs	r3, r2
10014484:	432b      	orrs	r3, r5
10014486:	469b      	mov	fp, r3
10014488:	00c3      	lsls	r3, r0, #3
1001448a:	4698      	mov	r8, r3
1001448c:	4b67      	ldr	r3, [pc, #412]	; (1001462c <__aeabi_dmul+0x1e0>)
1001448e:	2700      	movs	r7, #0
10014490:	469c      	mov	ip, r3
10014492:	2300      	movs	r3, #0
10014494:	4466      	add	r6, ip
10014496:	9301      	str	r3, [sp, #4]
10014498:	464a      	mov	r2, r9
1001449a:	0315      	lsls	r5, r2, #12
1001449c:	0050      	lsls	r0, r2, #1
1001449e:	0fd2      	lsrs	r2, r2, #31
100144a0:	4653      	mov	r3, sl
100144a2:	0b2d      	lsrs	r5, r5, #12
100144a4:	0d40      	lsrs	r0, r0, #21
100144a6:	4691      	mov	r9, r2
100144a8:	d100      	bne.n	100144ac <__aeabi_dmul+0x60>
100144aa:	e076      	b.n	1001459a <__aeabi_dmul+0x14e>
100144ac:	4a5e      	ldr	r2, [pc, #376]	; (10014628 <__aeabi_dmul+0x1dc>)
100144ae:	4290      	cmp	r0, r2
100144b0:	d06c      	beq.n	1001458c <__aeabi_dmul+0x140>
100144b2:	2280      	movs	r2, #128	; 0x80
100144b4:	0f5b      	lsrs	r3, r3, #29
100144b6:	0412      	lsls	r2, r2, #16
100144b8:	4313      	orrs	r3, r2
100144ba:	4a5c      	ldr	r2, [pc, #368]	; (1001462c <__aeabi_dmul+0x1e0>)
100144bc:	00ed      	lsls	r5, r5, #3
100144be:	4694      	mov	ip, r2
100144c0:	431d      	orrs	r5, r3
100144c2:	4653      	mov	r3, sl
100144c4:	2200      	movs	r2, #0
100144c6:	00db      	lsls	r3, r3, #3
100144c8:	4460      	add	r0, ip
100144ca:	4649      	mov	r1, r9
100144cc:	1836      	adds	r6, r6, r0
100144ce:	1c70      	adds	r0, r6, #1
100144d0:	4061      	eors	r1, r4
100144d2:	9002      	str	r0, [sp, #8]
100144d4:	4317      	orrs	r7, r2
100144d6:	2f0f      	cmp	r7, #15
100144d8:	d900      	bls.n	100144dc <__aeabi_dmul+0x90>
100144da:	e0af      	b.n	1001463c <__aeabi_dmul+0x1f0>
100144dc:	4854      	ldr	r0, [pc, #336]	; (10014630 <__aeabi_dmul+0x1e4>)
100144de:	00bf      	lsls	r7, r7, #2
100144e0:	59c7      	ldr	r7, [r0, r7]
100144e2:	46bf      	mov	pc, r7
100144e4:	465b      	mov	r3, fp
100144e6:	431f      	orrs	r7, r3
100144e8:	d000      	beq.n	100144ec <__aeabi_dmul+0xa0>
100144ea:	e088      	b.n	100145fe <__aeabi_dmul+0x1b2>
100144ec:	2300      	movs	r3, #0
100144ee:	469b      	mov	fp, r3
100144f0:	4698      	mov	r8, r3
100144f2:	3302      	adds	r3, #2
100144f4:	2708      	movs	r7, #8
100144f6:	9301      	str	r3, [sp, #4]
100144f8:	e7ce      	b.n	10014498 <__aeabi_dmul+0x4c>
100144fa:	4649      	mov	r1, r9
100144fc:	2a02      	cmp	r2, #2
100144fe:	d06a      	beq.n	100145d6 <__aeabi_dmul+0x18a>
10014500:	2a03      	cmp	r2, #3
10014502:	d100      	bne.n	10014506 <__aeabi_dmul+0xba>
10014504:	e209      	b.n	1001491a <__aeabi_dmul+0x4ce>
10014506:	2a01      	cmp	r2, #1
10014508:	d000      	beq.n	1001450c <__aeabi_dmul+0xc0>
1001450a:	e1bb      	b.n	10014884 <__aeabi_dmul+0x438>
1001450c:	4011      	ands	r1, r2
1001450e:	2200      	movs	r2, #0
10014510:	2300      	movs	r3, #0
10014512:	2500      	movs	r5, #0
10014514:	4690      	mov	r8, r2
10014516:	b2cc      	uxtb	r4, r1
10014518:	2100      	movs	r1, #0
1001451a:	032d      	lsls	r5, r5, #12
1001451c:	0d0a      	lsrs	r2, r1, #20
1001451e:	0512      	lsls	r2, r2, #20
10014520:	0b2d      	lsrs	r5, r5, #12
10014522:	4315      	orrs	r5, r2
10014524:	4a43      	ldr	r2, [pc, #268]	; (10014634 <__aeabi_dmul+0x1e8>)
10014526:	051b      	lsls	r3, r3, #20
10014528:	4015      	ands	r5, r2
1001452a:	431d      	orrs	r5, r3
1001452c:	006d      	lsls	r5, r5, #1
1001452e:	07e4      	lsls	r4, r4, #31
10014530:	086d      	lsrs	r5, r5, #1
10014532:	4325      	orrs	r5, r4
10014534:	4640      	mov	r0, r8
10014536:	0029      	movs	r1, r5
10014538:	b007      	add	sp, #28
1001453a:	bc3c      	pop	{r2, r3, r4, r5}
1001453c:	4690      	mov	r8, r2
1001453e:	4699      	mov	r9, r3
10014540:	46a2      	mov	sl, r4
10014542:	46ab      	mov	fp, r5
10014544:	bdf0      	pop	{r4, r5, r6, r7, pc}
10014546:	4303      	orrs	r3, r0
10014548:	d052      	beq.n	100145f0 <__aeabi_dmul+0x1a4>
1001454a:	465b      	mov	r3, fp
1001454c:	2b00      	cmp	r3, #0
1001454e:	d100      	bne.n	10014552 <__aeabi_dmul+0x106>
10014550:	e18a      	b.n	10014868 <__aeabi_dmul+0x41c>
10014552:	4658      	mov	r0, fp
10014554:	f000 fdb6 	bl	100150c4 <__clzsi2>
10014558:	0003      	movs	r3, r0
1001455a:	3b0b      	subs	r3, #11
1001455c:	2b1c      	cmp	r3, #28
1001455e:	dd00      	ble.n	10014562 <__aeabi_dmul+0x116>
10014560:	e17b      	b.n	1001485a <__aeabi_dmul+0x40e>
10014562:	221d      	movs	r2, #29
10014564:	1ad3      	subs	r3, r2, r3
10014566:	003a      	movs	r2, r7
10014568:	0001      	movs	r1, r0
1001456a:	465d      	mov	r5, fp
1001456c:	40da      	lsrs	r2, r3
1001456e:	3908      	subs	r1, #8
10014570:	408d      	lsls	r5, r1
10014572:	0013      	movs	r3, r2
10014574:	408f      	lsls	r7, r1
10014576:	432b      	orrs	r3, r5
10014578:	469b      	mov	fp, r3
1001457a:	46b8      	mov	r8, r7
1001457c:	4b2e      	ldr	r3, [pc, #184]	; (10014638 <__aeabi_dmul+0x1ec>)
1001457e:	2700      	movs	r7, #0
10014580:	469c      	mov	ip, r3
10014582:	2300      	movs	r3, #0
10014584:	4460      	add	r0, ip
10014586:	4246      	negs	r6, r0
10014588:	9301      	str	r3, [sp, #4]
1001458a:	e785      	b.n	10014498 <__aeabi_dmul+0x4c>
1001458c:	4652      	mov	r2, sl
1001458e:	432a      	orrs	r2, r5
10014590:	d12c      	bne.n	100145ec <__aeabi_dmul+0x1a0>
10014592:	2500      	movs	r5, #0
10014594:	2300      	movs	r3, #0
10014596:	2202      	movs	r2, #2
10014598:	e797      	b.n	100144ca <__aeabi_dmul+0x7e>
1001459a:	4652      	mov	r2, sl
1001459c:	432a      	orrs	r2, r5
1001459e:	d021      	beq.n	100145e4 <__aeabi_dmul+0x198>
100145a0:	2d00      	cmp	r5, #0
100145a2:	d100      	bne.n	100145a6 <__aeabi_dmul+0x15a>
100145a4:	e154      	b.n	10014850 <__aeabi_dmul+0x404>
100145a6:	0028      	movs	r0, r5
100145a8:	f000 fd8c 	bl	100150c4 <__clzsi2>
100145ac:	0003      	movs	r3, r0
100145ae:	3b0b      	subs	r3, #11
100145b0:	2b1c      	cmp	r3, #28
100145b2:	dd00      	ble.n	100145b6 <__aeabi_dmul+0x16a>
100145b4:	e146      	b.n	10014844 <__aeabi_dmul+0x3f8>
100145b6:	211d      	movs	r1, #29
100145b8:	1acb      	subs	r3, r1, r3
100145ba:	4651      	mov	r1, sl
100145bc:	0002      	movs	r2, r0
100145be:	40d9      	lsrs	r1, r3
100145c0:	4653      	mov	r3, sl
100145c2:	3a08      	subs	r2, #8
100145c4:	4095      	lsls	r5, r2
100145c6:	4093      	lsls	r3, r2
100145c8:	430d      	orrs	r5, r1
100145ca:	4a1b      	ldr	r2, [pc, #108]	; (10014638 <__aeabi_dmul+0x1ec>)
100145cc:	4694      	mov	ip, r2
100145ce:	4460      	add	r0, ip
100145d0:	4240      	negs	r0, r0
100145d2:	2200      	movs	r2, #0
100145d4:	e779      	b.n	100144ca <__aeabi_dmul+0x7e>
100145d6:	2401      	movs	r4, #1
100145d8:	2200      	movs	r2, #0
100145da:	400c      	ands	r4, r1
100145dc:	4b12      	ldr	r3, [pc, #72]	; (10014628 <__aeabi_dmul+0x1dc>)
100145de:	2500      	movs	r5, #0
100145e0:	4690      	mov	r8, r2
100145e2:	e799      	b.n	10014518 <__aeabi_dmul+0xcc>
100145e4:	2500      	movs	r5, #0
100145e6:	2300      	movs	r3, #0
100145e8:	2201      	movs	r2, #1
100145ea:	e76e      	b.n	100144ca <__aeabi_dmul+0x7e>
100145ec:	2203      	movs	r2, #3
100145ee:	e76c      	b.n	100144ca <__aeabi_dmul+0x7e>
100145f0:	2300      	movs	r3, #0
100145f2:	469b      	mov	fp, r3
100145f4:	4698      	mov	r8, r3
100145f6:	3301      	adds	r3, #1
100145f8:	2704      	movs	r7, #4
100145fa:	9301      	str	r3, [sp, #4]
100145fc:	e74c      	b.n	10014498 <__aeabi_dmul+0x4c>
100145fe:	2303      	movs	r3, #3
10014600:	270c      	movs	r7, #12
10014602:	9301      	str	r3, [sp, #4]
10014604:	e748      	b.n	10014498 <__aeabi_dmul+0x4c>
10014606:	2300      	movs	r3, #0
10014608:	2580      	movs	r5, #128	; 0x80
1001460a:	4698      	mov	r8, r3
1001460c:	2400      	movs	r4, #0
1001460e:	032d      	lsls	r5, r5, #12
10014610:	4b05      	ldr	r3, [pc, #20]	; (10014628 <__aeabi_dmul+0x1dc>)
10014612:	e781      	b.n	10014518 <__aeabi_dmul+0xcc>
10014614:	465d      	mov	r5, fp
10014616:	4643      	mov	r3, r8
10014618:	9a01      	ldr	r2, [sp, #4]
1001461a:	e76f      	b.n	100144fc <__aeabi_dmul+0xb0>
1001461c:	465d      	mov	r5, fp
1001461e:	4643      	mov	r3, r8
10014620:	0021      	movs	r1, r4
10014622:	9a01      	ldr	r2, [sp, #4]
10014624:	e76a      	b.n	100144fc <__aeabi_dmul+0xb0>
10014626:	46c0      	nop			; (mov r8, r8)
10014628:	000007ff 	.word	0x000007ff
1001462c:	fffffc01 	.word	0xfffffc01
10014630:	100182e4 	.word	0x100182e4
10014634:	800fffff 	.word	0x800fffff
10014638:	000003f3 	.word	0x000003f3
1001463c:	4642      	mov	r2, r8
1001463e:	0c12      	lsrs	r2, r2, #16
10014640:	4691      	mov	r9, r2
10014642:	0c1a      	lsrs	r2, r3, #16
10014644:	4694      	mov	ip, r2
10014646:	4642      	mov	r2, r8
10014648:	0417      	lsls	r7, r2, #16
1001464a:	464a      	mov	r2, r9
1001464c:	041b      	lsls	r3, r3, #16
1001464e:	0c1b      	lsrs	r3, r3, #16
10014650:	435a      	muls	r2, r3
10014652:	4660      	mov	r0, ip
10014654:	4690      	mov	r8, r2
10014656:	464a      	mov	r2, r9
10014658:	4342      	muls	r2, r0
1001465a:	0010      	movs	r0, r2
1001465c:	9203      	str	r2, [sp, #12]
1001465e:	4662      	mov	r2, ip
10014660:	001c      	movs	r4, r3
10014662:	0c3f      	lsrs	r7, r7, #16
10014664:	437a      	muls	r2, r7
10014666:	437c      	muls	r4, r7
10014668:	4442      	add	r2, r8
1001466a:	9201      	str	r2, [sp, #4]
1001466c:	0c22      	lsrs	r2, r4, #16
1001466e:	4692      	mov	sl, r2
10014670:	9a01      	ldr	r2, [sp, #4]
10014672:	4452      	add	r2, sl
10014674:	4590      	cmp	r8, r2
10014676:	d906      	bls.n	10014686 <__aeabi_dmul+0x23a>
10014678:	4682      	mov	sl, r0
1001467a:	2080      	movs	r0, #128	; 0x80
1001467c:	0240      	lsls	r0, r0, #9
1001467e:	4680      	mov	r8, r0
10014680:	44c2      	add	sl, r8
10014682:	4650      	mov	r0, sl
10014684:	9003      	str	r0, [sp, #12]
10014686:	0c10      	lsrs	r0, r2, #16
10014688:	9004      	str	r0, [sp, #16]
1001468a:	4648      	mov	r0, r9
1001468c:	0424      	lsls	r4, r4, #16
1001468e:	0c24      	lsrs	r4, r4, #16
10014690:	0412      	lsls	r2, r2, #16
10014692:	1912      	adds	r2, r2, r4
10014694:	9205      	str	r2, [sp, #20]
10014696:	0c2a      	lsrs	r2, r5, #16
10014698:	042d      	lsls	r5, r5, #16
1001469a:	0c2d      	lsrs	r5, r5, #16
1001469c:	4368      	muls	r0, r5
1001469e:	002c      	movs	r4, r5
100146a0:	4682      	mov	sl, r0
100146a2:	4648      	mov	r0, r9
100146a4:	437c      	muls	r4, r7
100146a6:	4350      	muls	r0, r2
100146a8:	4681      	mov	r9, r0
100146aa:	0c20      	lsrs	r0, r4, #16
100146ac:	4680      	mov	r8, r0
100146ae:	4357      	muls	r7, r2
100146b0:	4457      	add	r7, sl
100146b2:	4447      	add	r7, r8
100146b4:	45ba      	cmp	sl, r7
100146b6:	d903      	bls.n	100146c0 <__aeabi_dmul+0x274>
100146b8:	2080      	movs	r0, #128	; 0x80
100146ba:	0240      	lsls	r0, r0, #9
100146bc:	4680      	mov	r8, r0
100146be:	44c1      	add	r9, r8
100146c0:	0c38      	lsrs	r0, r7, #16
100146c2:	043f      	lsls	r7, r7, #16
100146c4:	46b8      	mov	r8, r7
100146c6:	4448      	add	r0, r9
100146c8:	0424      	lsls	r4, r4, #16
100146ca:	0c24      	lsrs	r4, r4, #16
100146cc:	9001      	str	r0, [sp, #4]
100146ce:	9804      	ldr	r0, [sp, #16]
100146d0:	44a0      	add	r8, r4
100146d2:	4440      	add	r0, r8
100146d4:	9004      	str	r0, [sp, #16]
100146d6:	4658      	mov	r0, fp
100146d8:	0c00      	lsrs	r0, r0, #16
100146da:	4681      	mov	r9, r0
100146dc:	4658      	mov	r0, fp
100146de:	0404      	lsls	r4, r0, #16
100146e0:	0c20      	lsrs	r0, r4, #16
100146e2:	4682      	mov	sl, r0
100146e4:	0007      	movs	r7, r0
100146e6:	4648      	mov	r0, r9
100146e8:	435f      	muls	r7, r3
100146ea:	464c      	mov	r4, r9
100146ec:	4343      	muls	r3, r0
100146ee:	4660      	mov	r0, ip
100146f0:	4360      	muls	r0, r4
100146f2:	4664      	mov	r4, ip
100146f4:	4683      	mov	fp, r0
100146f6:	4650      	mov	r0, sl
100146f8:	4344      	muls	r4, r0
100146fa:	0c38      	lsrs	r0, r7, #16
100146fc:	4684      	mov	ip, r0
100146fe:	18e4      	adds	r4, r4, r3
10014700:	4464      	add	r4, ip
10014702:	42a3      	cmp	r3, r4
10014704:	d903      	bls.n	1001470e <__aeabi_dmul+0x2c2>
10014706:	2380      	movs	r3, #128	; 0x80
10014708:	025b      	lsls	r3, r3, #9
1001470a:	469c      	mov	ip, r3
1001470c:	44e3      	add	fp, ip
1001470e:	4648      	mov	r0, r9
10014710:	043f      	lsls	r7, r7, #16
10014712:	0c23      	lsrs	r3, r4, #16
10014714:	0c3f      	lsrs	r7, r7, #16
10014716:	0424      	lsls	r4, r4, #16
10014718:	19e4      	adds	r4, r4, r7
1001471a:	4657      	mov	r7, sl
1001471c:	4368      	muls	r0, r5
1001471e:	436f      	muls	r7, r5
10014720:	4684      	mov	ip, r0
10014722:	464d      	mov	r5, r9
10014724:	4650      	mov	r0, sl
10014726:	4355      	muls	r5, r2
10014728:	4342      	muls	r2, r0
1001472a:	0c38      	lsrs	r0, r7, #16
1001472c:	4681      	mov	r9, r0
1001472e:	4462      	add	r2, ip
10014730:	444a      	add	r2, r9
10014732:	445b      	add	r3, fp
10014734:	4594      	cmp	ip, r2
10014736:	d903      	bls.n	10014740 <__aeabi_dmul+0x2f4>
10014738:	2080      	movs	r0, #128	; 0x80
1001473a:	0240      	lsls	r0, r0, #9
1001473c:	4684      	mov	ip, r0
1001473e:	4465      	add	r5, ip
10014740:	9803      	ldr	r0, [sp, #12]
10014742:	043f      	lsls	r7, r7, #16
10014744:	4683      	mov	fp, r0
10014746:	9804      	ldr	r0, [sp, #16]
10014748:	0c3f      	lsrs	r7, r7, #16
1001474a:	4684      	mov	ip, r0
1001474c:	44e3      	add	fp, ip
1001474e:	45c3      	cmp	fp, r8
10014750:	4180      	sbcs	r0, r0
10014752:	4240      	negs	r0, r0
10014754:	4682      	mov	sl, r0
10014756:	0410      	lsls	r0, r2, #16
10014758:	4684      	mov	ip, r0
1001475a:	9801      	ldr	r0, [sp, #4]
1001475c:	4467      	add	r7, ip
1001475e:	4684      	mov	ip, r0
10014760:	4467      	add	r7, ip
10014762:	44a3      	add	fp, r4
10014764:	46bc      	mov	ip, r7
10014766:	45a3      	cmp	fp, r4
10014768:	41a4      	sbcs	r4, r4
1001476a:	4699      	mov	r9, r3
1001476c:	44d4      	add	ip, sl
1001476e:	4264      	negs	r4, r4
10014770:	4287      	cmp	r7, r0
10014772:	41bf      	sbcs	r7, r7
10014774:	45d4      	cmp	ip, sl
10014776:	4180      	sbcs	r0, r0
10014778:	44e1      	add	r9, ip
1001477a:	46a0      	mov	r8, r4
1001477c:	4599      	cmp	r9, r3
1001477e:	419b      	sbcs	r3, r3
10014780:	427f      	negs	r7, r7
10014782:	4240      	negs	r0, r0
10014784:	44c8      	add	r8, r9
10014786:	4307      	orrs	r7, r0
10014788:	0c12      	lsrs	r2, r2, #16
1001478a:	18ba      	adds	r2, r7, r2
1001478c:	45a0      	cmp	r8, r4
1001478e:	41a4      	sbcs	r4, r4
10014790:	425f      	negs	r7, r3
10014792:	003b      	movs	r3, r7
10014794:	4264      	negs	r4, r4
10014796:	4323      	orrs	r3, r4
10014798:	18d7      	adds	r7, r2, r3
1001479a:	4643      	mov	r3, r8
1001479c:	197d      	adds	r5, r7, r5
1001479e:	0ddb      	lsrs	r3, r3, #23
100147a0:	026d      	lsls	r5, r5, #9
100147a2:	431d      	orrs	r5, r3
100147a4:	465b      	mov	r3, fp
100147a6:	025a      	lsls	r2, r3, #9
100147a8:	9b05      	ldr	r3, [sp, #20]
100147aa:	431a      	orrs	r2, r3
100147ac:	1e53      	subs	r3, r2, #1
100147ae:	419a      	sbcs	r2, r3
100147b0:	465b      	mov	r3, fp
100147b2:	0ddb      	lsrs	r3, r3, #23
100147b4:	431a      	orrs	r2, r3
100147b6:	4643      	mov	r3, r8
100147b8:	025b      	lsls	r3, r3, #9
100147ba:	4313      	orrs	r3, r2
100147bc:	01ea      	lsls	r2, r5, #7
100147be:	d507      	bpl.n	100147d0 <__aeabi_dmul+0x384>
100147c0:	2201      	movs	r2, #1
100147c2:	085c      	lsrs	r4, r3, #1
100147c4:	4013      	ands	r3, r2
100147c6:	4323      	orrs	r3, r4
100147c8:	07ea      	lsls	r2, r5, #31
100147ca:	9e02      	ldr	r6, [sp, #8]
100147cc:	4313      	orrs	r3, r2
100147ce:	086d      	lsrs	r5, r5, #1
100147d0:	4a57      	ldr	r2, [pc, #348]	; (10014930 <__aeabi_dmul+0x4e4>)
100147d2:	18b2      	adds	r2, r6, r2
100147d4:	2a00      	cmp	r2, #0
100147d6:	dd4b      	ble.n	10014870 <__aeabi_dmul+0x424>
100147d8:	0758      	lsls	r0, r3, #29
100147da:	d009      	beq.n	100147f0 <__aeabi_dmul+0x3a4>
100147dc:	200f      	movs	r0, #15
100147de:	4018      	ands	r0, r3
100147e0:	2804      	cmp	r0, #4
100147e2:	d005      	beq.n	100147f0 <__aeabi_dmul+0x3a4>
100147e4:	1d18      	adds	r0, r3, #4
100147e6:	4298      	cmp	r0, r3
100147e8:	419b      	sbcs	r3, r3
100147ea:	425b      	negs	r3, r3
100147ec:	18ed      	adds	r5, r5, r3
100147ee:	0003      	movs	r3, r0
100147f0:	01e8      	lsls	r0, r5, #7
100147f2:	d504      	bpl.n	100147fe <__aeabi_dmul+0x3b2>
100147f4:	4a4f      	ldr	r2, [pc, #316]	; (10014934 <__aeabi_dmul+0x4e8>)
100147f6:	4015      	ands	r5, r2
100147f8:	2280      	movs	r2, #128	; 0x80
100147fa:	00d2      	lsls	r2, r2, #3
100147fc:	18b2      	adds	r2, r6, r2
100147fe:	484e      	ldr	r0, [pc, #312]	; (10014938 <__aeabi_dmul+0x4ec>)
10014800:	4282      	cmp	r2, r0
10014802:	dd00      	ble.n	10014806 <__aeabi_dmul+0x3ba>
10014804:	e6e7      	b.n	100145d6 <__aeabi_dmul+0x18a>
10014806:	2401      	movs	r4, #1
10014808:	08db      	lsrs	r3, r3, #3
1001480a:	0768      	lsls	r0, r5, #29
1001480c:	4318      	orrs	r0, r3
1001480e:	026d      	lsls	r5, r5, #9
10014810:	0553      	lsls	r3, r2, #21
10014812:	4680      	mov	r8, r0
10014814:	0b2d      	lsrs	r5, r5, #12
10014816:	0d5b      	lsrs	r3, r3, #21
10014818:	400c      	ands	r4, r1
1001481a:	e67d      	b.n	10014518 <__aeabi_dmul+0xcc>
1001481c:	2280      	movs	r2, #128	; 0x80
1001481e:	4659      	mov	r1, fp
10014820:	0312      	lsls	r2, r2, #12
10014822:	4211      	tst	r1, r2
10014824:	d008      	beq.n	10014838 <__aeabi_dmul+0x3ec>
10014826:	4215      	tst	r5, r2
10014828:	d106      	bne.n	10014838 <__aeabi_dmul+0x3ec>
1001482a:	4315      	orrs	r5, r2
1001482c:	032d      	lsls	r5, r5, #12
1001482e:	4698      	mov	r8, r3
10014830:	0b2d      	lsrs	r5, r5, #12
10014832:	464c      	mov	r4, r9
10014834:	4b41      	ldr	r3, [pc, #260]	; (1001493c <__aeabi_dmul+0x4f0>)
10014836:	e66f      	b.n	10014518 <__aeabi_dmul+0xcc>
10014838:	465d      	mov	r5, fp
1001483a:	4315      	orrs	r5, r2
1001483c:	032d      	lsls	r5, r5, #12
1001483e:	0b2d      	lsrs	r5, r5, #12
10014840:	4b3e      	ldr	r3, [pc, #248]	; (1001493c <__aeabi_dmul+0x4f0>)
10014842:	e669      	b.n	10014518 <__aeabi_dmul+0xcc>
10014844:	0003      	movs	r3, r0
10014846:	4655      	mov	r5, sl
10014848:	3b28      	subs	r3, #40	; 0x28
1001484a:	409d      	lsls	r5, r3
1001484c:	2300      	movs	r3, #0
1001484e:	e6bc      	b.n	100145ca <__aeabi_dmul+0x17e>
10014850:	4650      	mov	r0, sl
10014852:	f000 fc37 	bl	100150c4 <__clzsi2>
10014856:	3020      	adds	r0, #32
10014858:	e6a8      	b.n	100145ac <__aeabi_dmul+0x160>
1001485a:	0003      	movs	r3, r0
1001485c:	3b28      	subs	r3, #40	; 0x28
1001485e:	409f      	lsls	r7, r3
10014860:	2300      	movs	r3, #0
10014862:	46bb      	mov	fp, r7
10014864:	4698      	mov	r8, r3
10014866:	e689      	b.n	1001457c <__aeabi_dmul+0x130>
10014868:	f000 fc2c 	bl	100150c4 <__clzsi2>
1001486c:	3020      	adds	r0, #32
1001486e:	e673      	b.n	10014558 <__aeabi_dmul+0x10c>
10014870:	2401      	movs	r4, #1
10014872:	1aa6      	subs	r6, r4, r2
10014874:	2e38      	cmp	r6, #56	; 0x38
10014876:	dd07      	ble.n	10014888 <__aeabi_dmul+0x43c>
10014878:	2200      	movs	r2, #0
1001487a:	400c      	ands	r4, r1
1001487c:	2300      	movs	r3, #0
1001487e:	2500      	movs	r5, #0
10014880:	4690      	mov	r8, r2
10014882:	e649      	b.n	10014518 <__aeabi_dmul+0xcc>
10014884:	9e02      	ldr	r6, [sp, #8]
10014886:	e7a3      	b.n	100147d0 <__aeabi_dmul+0x384>
10014888:	2e1f      	cmp	r6, #31
1001488a:	dc20      	bgt.n	100148ce <__aeabi_dmul+0x482>
1001488c:	2220      	movs	r2, #32
1001488e:	002c      	movs	r4, r5
10014890:	0018      	movs	r0, r3
10014892:	1b92      	subs	r2, r2, r6
10014894:	40f0      	lsrs	r0, r6
10014896:	4094      	lsls	r4, r2
10014898:	4093      	lsls	r3, r2
1001489a:	4304      	orrs	r4, r0
1001489c:	1e58      	subs	r0, r3, #1
1001489e:	4183      	sbcs	r3, r0
100148a0:	431c      	orrs	r4, r3
100148a2:	40f5      	lsrs	r5, r6
100148a4:	0763      	lsls	r3, r4, #29
100148a6:	d009      	beq.n	100148bc <__aeabi_dmul+0x470>
100148a8:	230f      	movs	r3, #15
100148aa:	4023      	ands	r3, r4
100148ac:	2b04      	cmp	r3, #4
100148ae:	d005      	beq.n	100148bc <__aeabi_dmul+0x470>
100148b0:	0023      	movs	r3, r4
100148b2:	1d1c      	adds	r4, r3, #4
100148b4:	429c      	cmp	r4, r3
100148b6:	4192      	sbcs	r2, r2
100148b8:	4252      	negs	r2, r2
100148ba:	18ad      	adds	r5, r5, r2
100148bc:	022b      	lsls	r3, r5, #8
100148be:	d51f      	bpl.n	10014900 <__aeabi_dmul+0x4b4>
100148c0:	2401      	movs	r4, #1
100148c2:	2200      	movs	r2, #0
100148c4:	400c      	ands	r4, r1
100148c6:	2301      	movs	r3, #1
100148c8:	2500      	movs	r5, #0
100148ca:	4690      	mov	r8, r2
100148cc:	e624      	b.n	10014518 <__aeabi_dmul+0xcc>
100148ce:	201f      	movs	r0, #31
100148d0:	002c      	movs	r4, r5
100148d2:	4240      	negs	r0, r0
100148d4:	1a82      	subs	r2, r0, r2
100148d6:	40d4      	lsrs	r4, r2
100148d8:	2e20      	cmp	r6, #32
100148da:	d01c      	beq.n	10014916 <__aeabi_dmul+0x4ca>
100148dc:	2240      	movs	r2, #64	; 0x40
100148de:	1b96      	subs	r6, r2, r6
100148e0:	40b5      	lsls	r5, r6
100148e2:	432b      	orrs	r3, r5
100148e4:	1e58      	subs	r0, r3, #1
100148e6:	4183      	sbcs	r3, r0
100148e8:	2007      	movs	r0, #7
100148ea:	4323      	orrs	r3, r4
100148ec:	4018      	ands	r0, r3
100148ee:	2500      	movs	r5, #0
100148f0:	2800      	cmp	r0, #0
100148f2:	d009      	beq.n	10014908 <__aeabi_dmul+0x4bc>
100148f4:	220f      	movs	r2, #15
100148f6:	2500      	movs	r5, #0
100148f8:	401a      	ands	r2, r3
100148fa:	001c      	movs	r4, r3
100148fc:	2a04      	cmp	r2, #4
100148fe:	d1d8      	bne.n	100148b2 <__aeabi_dmul+0x466>
10014900:	0023      	movs	r3, r4
10014902:	0768      	lsls	r0, r5, #29
10014904:	026d      	lsls	r5, r5, #9
10014906:	0b2d      	lsrs	r5, r5, #12
10014908:	2401      	movs	r4, #1
1001490a:	08db      	lsrs	r3, r3, #3
1001490c:	4303      	orrs	r3, r0
1001490e:	4698      	mov	r8, r3
10014910:	400c      	ands	r4, r1
10014912:	2300      	movs	r3, #0
10014914:	e600      	b.n	10014518 <__aeabi_dmul+0xcc>
10014916:	2500      	movs	r5, #0
10014918:	e7e3      	b.n	100148e2 <__aeabi_dmul+0x496>
1001491a:	2280      	movs	r2, #128	; 0x80
1001491c:	2401      	movs	r4, #1
1001491e:	0312      	lsls	r2, r2, #12
10014920:	4315      	orrs	r5, r2
10014922:	032d      	lsls	r5, r5, #12
10014924:	4698      	mov	r8, r3
10014926:	0b2d      	lsrs	r5, r5, #12
10014928:	400c      	ands	r4, r1
1001492a:	4b04      	ldr	r3, [pc, #16]	; (1001493c <__aeabi_dmul+0x4f0>)
1001492c:	e5f4      	b.n	10014518 <__aeabi_dmul+0xcc>
1001492e:	46c0      	nop			; (mov r8, r8)
10014930:	000003ff 	.word	0x000003ff
10014934:	feffffff 	.word	0xfeffffff
10014938:	000007fe 	.word	0x000007fe
1001493c:	000007ff 	.word	0x000007ff

10014940 <__aeabi_dsub>:
10014940:	b5f0      	push	{r4, r5, r6, r7, lr}
10014942:	4657      	mov	r7, sl
10014944:	464e      	mov	r6, r9
10014946:	4645      	mov	r5, r8
10014948:	b4e0      	push	{r5, r6, r7}
1001494a:	000e      	movs	r6, r1
1001494c:	0011      	movs	r1, r2
1001494e:	0ff2      	lsrs	r2, r6, #31
10014950:	4692      	mov	sl, r2
10014952:	00c5      	lsls	r5, r0, #3
10014954:	0f42      	lsrs	r2, r0, #29
10014956:	0318      	lsls	r0, r3, #12
10014958:	0337      	lsls	r7, r6, #12
1001495a:	0074      	lsls	r4, r6, #1
1001495c:	0a40      	lsrs	r0, r0, #9
1001495e:	0f4e      	lsrs	r6, r1, #29
10014960:	0a7f      	lsrs	r7, r7, #9
10014962:	4330      	orrs	r0, r6
10014964:	4ecf      	ldr	r6, [pc, #828]	; (10014ca4 <__aeabi_dsub+0x364>)
10014966:	4317      	orrs	r7, r2
10014968:	005a      	lsls	r2, r3, #1
1001496a:	0d64      	lsrs	r4, r4, #21
1001496c:	0d52      	lsrs	r2, r2, #21
1001496e:	0fdb      	lsrs	r3, r3, #31
10014970:	00c9      	lsls	r1, r1, #3
10014972:	42b2      	cmp	r2, r6
10014974:	d100      	bne.n	10014978 <__aeabi_dsub+0x38>
10014976:	e0e5      	b.n	10014b44 <__aeabi_dsub+0x204>
10014978:	2601      	movs	r6, #1
1001497a:	4073      	eors	r3, r6
1001497c:	1aa6      	subs	r6, r4, r2
1001497e:	46b4      	mov	ip, r6
10014980:	4553      	cmp	r3, sl
10014982:	d100      	bne.n	10014986 <__aeabi_dsub+0x46>
10014984:	e0af      	b.n	10014ae6 <__aeabi_dsub+0x1a6>
10014986:	2e00      	cmp	r6, #0
10014988:	dc00      	bgt.n	1001498c <__aeabi_dsub+0x4c>
1001498a:	e10d      	b.n	10014ba8 <__aeabi_dsub+0x268>
1001498c:	2a00      	cmp	r2, #0
1001498e:	d13a      	bne.n	10014a06 <__aeabi_dsub+0xc6>
10014990:	0003      	movs	r3, r0
10014992:	430b      	orrs	r3, r1
10014994:	d000      	beq.n	10014998 <__aeabi_dsub+0x58>
10014996:	e0e4      	b.n	10014b62 <__aeabi_dsub+0x222>
10014998:	076b      	lsls	r3, r5, #29
1001499a:	d009      	beq.n	100149b0 <__aeabi_dsub+0x70>
1001499c:	230f      	movs	r3, #15
1001499e:	402b      	ands	r3, r5
100149a0:	2b04      	cmp	r3, #4
100149a2:	d005      	beq.n	100149b0 <__aeabi_dsub+0x70>
100149a4:	1d2b      	adds	r3, r5, #4
100149a6:	42ab      	cmp	r3, r5
100149a8:	41ad      	sbcs	r5, r5
100149aa:	426d      	negs	r5, r5
100149ac:	197f      	adds	r7, r7, r5
100149ae:	001d      	movs	r5, r3
100149b0:	023b      	lsls	r3, r7, #8
100149b2:	d400      	bmi.n	100149b6 <__aeabi_dsub+0x76>
100149b4:	e088      	b.n	10014ac8 <__aeabi_dsub+0x188>
100149b6:	4bbb      	ldr	r3, [pc, #748]	; (10014ca4 <__aeabi_dsub+0x364>)
100149b8:	3401      	adds	r4, #1
100149ba:	429c      	cmp	r4, r3
100149bc:	d100      	bne.n	100149c0 <__aeabi_dsub+0x80>
100149be:	e110      	b.n	10014be2 <__aeabi_dsub+0x2a2>
100149c0:	003a      	movs	r2, r7
100149c2:	4bb9      	ldr	r3, [pc, #740]	; (10014ca8 <__aeabi_dsub+0x368>)
100149c4:	4651      	mov	r1, sl
100149c6:	401a      	ands	r2, r3
100149c8:	2301      	movs	r3, #1
100149ca:	0750      	lsls	r0, r2, #29
100149cc:	08ed      	lsrs	r5, r5, #3
100149ce:	0252      	lsls	r2, r2, #9
100149d0:	0564      	lsls	r4, r4, #21
100149d2:	4305      	orrs	r5, r0
100149d4:	0b12      	lsrs	r2, r2, #12
100149d6:	0d64      	lsrs	r4, r4, #21
100149d8:	400b      	ands	r3, r1
100149da:	2100      	movs	r1, #0
100149dc:	0028      	movs	r0, r5
100149de:	0312      	lsls	r2, r2, #12
100149e0:	0d0d      	lsrs	r5, r1, #20
100149e2:	0b12      	lsrs	r2, r2, #12
100149e4:	0564      	lsls	r4, r4, #21
100149e6:	052d      	lsls	r5, r5, #20
100149e8:	4315      	orrs	r5, r2
100149ea:	0862      	lsrs	r2, r4, #1
100149ec:	4caf      	ldr	r4, [pc, #700]	; (10014cac <__aeabi_dsub+0x36c>)
100149ee:	07db      	lsls	r3, r3, #31
100149f0:	402c      	ands	r4, r5
100149f2:	4314      	orrs	r4, r2
100149f4:	0064      	lsls	r4, r4, #1
100149f6:	0864      	lsrs	r4, r4, #1
100149f8:	431c      	orrs	r4, r3
100149fa:	0021      	movs	r1, r4
100149fc:	bc1c      	pop	{r2, r3, r4}
100149fe:	4690      	mov	r8, r2
10014a00:	4699      	mov	r9, r3
10014a02:	46a2      	mov	sl, r4
10014a04:	bdf0      	pop	{r4, r5, r6, r7, pc}
10014a06:	4ba7      	ldr	r3, [pc, #668]	; (10014ca4 <__aeabi_dsub+0x364>)
10014a08:	429c      	cmp	r4, r3
10014a0a:	d0c5      	beq.n	10014998 <__aeabi_dsub+0x58>
10014a0c:	2380      	movs	r3, #128	; 0x80
10014a0e:	041b      	lsls	r3, r3, #16
10014a10:	4318      	orrs	r0, r3
10014a12:	4663      	mov	r3, ip
10014a14:	2b38      	cmp	r3, #56	; 0x38
10014a16:	dd00      	ble.n	10014a1a <__aeabi_dsub+0xda>
10014a18:	e0fd      	b.n	10014c16 <__aeabi_dsub+0x2d6>
10014a1a:	2b1f      	cmp	r3, #31
10014a1c:	dd00      	ble.n	10014a20 <__aeabi_dsub+0xe0>
10014a1e:	e130      	b.n	10014c82 <__aeabi_dsub+0x342>
10014a20:	4662      	mov	r2, ip
10014a22:	2320      	movs	r3, #32
10014a24:	1a9b      	subs	r3, r3, r2
10014a26:	0002      	movs	r2, r0
10014a28:	409a      	lsls	r2, r3
10014a2a:	4666      	mov	r6, ip
10014a2c:	4690      	mov	r8, r2
10014a2e:	000a      	movs	r2, r1
10014a30:	4099      	lsls	r1, r3
10014a32:	40f2      	lsrs	r2, r6
10014a34:	4646      	mov	r6, r8
10014a36:	1e4b      	subs	r3, r1, #1
10014a38:	4199      	sbcs	r1, r3
10014a3a:	4332      	orrs	r2, r6
10014a3c:	4311      	orrs	r1, r2
10014a3e:	4663      	mov	r3, ip
10014a40:	0002      	movs	r2, r0
10014a42:	40da      	lsrs	r2, r3
10014a44:	1a69      	subs	r1, r5, r1
10014a46:	428d      	cmp	r5, r1
10014a48:	419b      	sbcs	r3, r3
10014a4a:	000d      	movs	r5, r1
10014a4c:	1aba      	subs	r2, r7, r2
10014a4e:	425b      	negs	r3, r3
10014a50:	1ad7      	subs	r7, r2, r3
10014a52:	023b      	lsls	r3, r7, #8
10014a54:	d535      	bpl.n	10014ac2 <__aeabi_dsub+0x182>
10014a56:	027a      	lsls	r2, r7, #9
10014a58:	0a53      	lsrs	r3, r2, #9
10014a5a:	4698      	mov	r8, r3
10014a5c:	4643      	mov	r3, r8
10014a5e:	2b00      	cmp	r3, #0
10014a60:	d100      	bne.n	10014a64 <__aeabi_dsub+0x124>
10014a62:	e0c4      	b.n	10014bee <__aeabi_dsub+0x2ae>
10014a64:	4640      	mov	r0, r8
10014a66:	f000 fb2d 	bl	100150c4 <__clzsi2>
10014a6a:	0003      	movs	r3, r0
10014a6c:	3b08      	subs	r3, #8
10014a6e:	2b1f      	cmp	r3, #31
10014a70:	dd00      	ble.n	10014a74 <__aeabi_dsub+0x134>
10014a72:	e0c5      	b.n	10014c00 <__aeabi_dsub+0x2c0>
10014a74:	2220      	movs	r2, #32
10014a76:	0029      	movs	r1, r5
10014a78:	1ad2      	subs	r2, r2, r3
10014a7a:	4647      	mov	r7, r8
10014a7c:	40d1      	lsrs	r1, r2
10014a7e:	409f      	lsls	r7, r3
10014a80:	000a      	movs	r2, r1
10014a82:	409d      	lsls	r5, r3
10014a84:	433a      	orrs	r2, r7
10014a86:	429c      	cmp	r4, r3
10014a88:	dd00      	ble.n	10014a8c <__aeabi_dsub+0x14c>
10014a8a:	e0c0      	b.n	10014c0e <__aeabi_dsub+0x2ce>
10014a8c:	1b1c      	subs	r4, r3, r4
10014a8e:	1c63      	adds	r3, r4, #1
10014a90:	2b1f      	cmp	r3, #31
10014a92:	dd00      	ble.n	10014a96 <__aeabi_dsub+0x156>
10014a94:	e0e4      	b.n	10014c60 <__aeabi_dsub+0x320>
10014a96:	2120      	movs	r1, #32
10014a98:	0014      	movs	r4, r2
10014a9a:	0028      	movs	r0, r5
10014a9c:	1ac9      	subs	r1, r1, r3
10014a9e:	40d8      	lsrs	r0, r3
10014aa0:	408c      	lsls	r4, r1
10014aa2:	408d      	lsls	r5, r1
10014aa4:	4304      	orrs	r4, r0
10014aa6:	40da      	lsrs	r2, r3
10014aa8:	1e68      	subs	r0, r5, #1
10014aaa:	4185      	sbcs	r5, r0
10014aac:	0017      	movs	r7, r2
10014aae:	4325      	orrs	r5, r4
10014ab0:	2400      	movs	r4, #0
10014ab2:	e771      	b.n	10014998 <__aeabi_dsub+0x58>
10014ab4:	4642      	mov	r2, r8
10014ab6:	4663      	mov	r3, ip
10014ab8:	431a      	orrs	r2, r3
10014aba:	d100      	bne.n	10014abe <__aeabi_dsub+0x17e>
10014abc:	e24c      	b.n	10014f58 <__aeabi_dsub+0x618>
10014abe:	4667      	mov	r7, ip
10014ac0:	4645      	mov	r5, r8
10014ac2:	076b      	lsls	r3, r5, #29
10014ac4:	d000      	beq.n	10014ac8 <__aeabi_dsub+0x188>
10014ac6:	e769      	b.n	1001499c <__aeabi_dsub+0x5c>
10014ac8:	2301      	movs	r3, #1
10014aca:	4651      	mov	r1, sl
10014acc:	0778      	lsls	r0, r7, #29
10014ace:	08ed      	lsrs	r5, r5, #3
10014ad0:	08fa      	lsrs	r2, r7, #3
10014ad2:	400b      	ands	r3, r1
10014ad4:	4305      	orrs	r5, r0
10014ad6:	4973      	ldr	r1, [pc, #460]	; (10014ca4 <__aeabi_dsub+0x364>)
10014ad8:	428c      	cmp	r4, r1
10014ada:	d038      	beq.n	10014b4e <__aeabi_dsub+0x20e>
10014adc:	0312      	lsls	r2, r2, #12
10014ade:	0564      	lsls	r4, r4, #21
10014ae0:	0b12      	lsrs	r2, r2, #12
10014ae2:	0d64      	lsrs	r4, r4, #21
10014ae4:	e779      	b.n	100149da <__aeabi_dsub+0x9a>
10014ae6:	2e00      	cmp	r6, #0
10014ae8:	dc00      	bgt.n	10014aec <__aeabi_dsub+0x1ac>
10014aea:	e09a      	b.n	10014c22 <__aeabi_dsub+0x2e2>
10014aec:	2a00      	cmp	r2, #0
10014aee:	d047      	beq.n	10014b80 <__aeabi_dsub+0x240>
10014af0:	4a6c      	ldr	r2, [pc, #432]	; (10014ca4 <__aeabi_dsub+0x364>)
10014af2:	4294      	cmp	r4, r2
10014af4:	d100      	bne.n	10014af8 <__aeabi_dsub+0x1b8>
10014af6:	e74f      	b.n	10014998 <__aeabi_dsub+0x58>
10014af8:	2280      	movs	r2, #128	; 0x80
10014afa:	0412      	lsls	r2, r2, #16
10014afc:	4310      	orrs	r0, r2
10014afe:	4662      	mov	r2, ip
10014b00:	2a38      	cmp	r2, #56	; 0x38
10014b02:	dc00      	bgt.n	10014b06 <__aeabi_dsub+0x1c6>
10014b04:	e108      	b.n	10014d18 <__aeabi_dsub+0x3d8>
10014b06:	4301      	orrs	r1, r0
10014b08:	1e48      	subs	r0, r1, #1
10014b0a:	4181      	sbcs	r1, r0
10014b0c:	2200      	movs	r2, #0
10014b0e:	b2c9      	uxtb	r1, r1
10014b10:	1949      	adds	r1, r1, r5
10014b12:	19d2      	adds	r2, r2, r7
10014b14:	42a9      	cmp	r1, r5
10014b16:	41bf      	sbcs	r7, r7
10014b18:	000d      	movs	r5, r1
10014b1a:	427f      	negs	r7, r7
10014b1c:	18bf      	adds	r7, r7, r2
10014b1e:	023a      	lsls	r2, r7, #8
10014b20:	d400      	bmi.n	10014b24 <__aeabi_dsub+0x1e4>
10014b22:	e142      	b.n	10014daa <__aeabi_dsub+0x46a>
10014b24:	4a5f      	ldr	r2, [pc, #380]	; (10014ca4 <__aeabi_dsub+0x364>)
10014b26:	3401      	adds	r4, #1
10014b28:	4294      	cmp	r4, r2
10014b2a:	d100      	bne.n	10014b2e <__aeabi_dsub+0x1ee>
10014b2c:	e14e      	b.n	10014dcc <__aeabi_dsub+0x48c>
10014b2e:	2001      	movs	r0, #1
10014b30:	4a5d      	ldr	r2, [pc, #372]	; (10014ca8 <__aeabi_dsub+0x368>)
10014b32:	0869      	lsrs	r1, r5, #1
10014b34:	403a      	ands	r2, r7
10014b36:	4028      	ands	r0, r5
10014b38:	4308      	orrs	r0, r1
10014b3a:	07d5      	lsls	r5, r2, #31
10014b3c:	4305      	orrs	r5, r0
10014b3e:	0857      	lsrs	r7, r2, #1
10014b40:	469a      	mov	sl, r3
10014b42:	e729      	b.n	10014998 <__aeabi_dsub+0x58>
10014b44:	0006      	movs	r6, r0
10014b46:	430e      	orrs	r6, r1
10014b48:	d000      	beq.n	10014b4c <__aeabi_dsub+0x20c>
10014b4a:	e717      	b.n	1001497c <__aeabi_dsub+0x3c>
10014b4c:	e714      	b.n	10014978 <__aeabi_dsub+0x38>
10014b4e:	0029      	movs	r1, r5
10014b50:	4311      	orrs	r1, r2
10014b52:	d100      	bne.n	10014b56 <__aeabi_dsub+0x216>
10014b54:	e1f9      	b.n	10014f4a <__aeabi_dsub+0x60a>
10014b56:	2180      	movs	r1, #128	; 0x80
10014b58:	0309      	lsls	r1, r1, #12
10014b5a:	430a      	orrs	r2, r1
10014b5c:	0312      	lsls	r2, r2, #12
10014b5e:	0b12      	lsrs	r2, r2, #12
10014b60:	e73b      	b.n	100149da <__aeabi_dsub+0x9a>
10014b62:	2301      	movs	r3, #1
10014b64:	425b      	negs	r3, r3
10014b66:	4698      	mov	r8, r3
10014b68:	44c4      	add	ip, r8
10014b6a:	4663      	mov	r3, ip
10014b6c:	2b00      	cmp	r3, #0
10014b6e:	d172      	bne.n	10014c56 <__aeabi_dsub+0x316>
10014b70:	1a69      	subs	r1, r5, r1
10014b72:	428d      	cmp	r5, r1
10014b74:	419b      	sbcs	r3, r3
10014b76:	1a3f      	subs	r7, r7, r0
10014b78:	425b      	negs	r3, r3
10014b7a:	1aff      	subs	r7, r7, r3
10014b7c:	000d      	movs	r5, r1
10014b7e:	e768      	b.n	10014a52 <__aeabi_dsub+0x112>
10014b80:	0002      	movs	r2, r0
10014b82:	430a      	orrs	r2, r1
10014b84:	d100      	bne.n	10014b88 <__aeabi_dsub+0x248>
10014b86:	e707      	b.n	10014998 <__aeabi_dsub+0x58>
10014b88:	2201      	movs	r2, #1
10014b8a:	4252      	negs	r2, r2
10014b8c:	4690      	mov	r8, r2
10014b8e:	44c4      	add	ip, r8
10014b90:	4662      	mov	r2, ip
10014b92:	2a00      	cmp	r2, #0
10014b94:	d000      	beq.n	10014b98 <__aeabi_dsub+0x258>
10014b96:	e0e6      	b.n	10014d66 <__aeabi_dsub+0x426>
10014b98:	1869      	adds	r1, r5, r1
10014b9a:	42a9      	cmp	r1, r5
10014b9c:	41b6      	sbcs	r6, r6
10014b9e:	183f      	adds	r7, r7, r0
10014ba0:	4276      	negs	r6, r6
10014ba2:	19f7      	adds	r7, r6, r7
10014ba4:	000d      	movs	r5, r1
10014ba6:	e7ba      	b.n	10014b1e <__aeabi_dsub+0x1de>
10014ba8:	2e00      	cmp	r6, #0
10014baa:	d000      	beq.n	10014bae <__aeabi_dsub+0x26e>
10014bac:	e080      	b.n	10014cb0 <__aeabi_dsub+0x370>
10014bae:	1c62      	adds	r2, r4, #1
10014bb0:	0552      	lsls	r2, r2, #21
10014bb2:	0d52      	lsrs	r2, r2, #21
10014bb4:	2a01      	cmp	r2, #1
10014bb6:	dc00      	bgt.n	10014bba <__aeabi_dsub+0x27a>
10014bb8:	e0f9      	b.n	10014dae <__aeabi_dsub+0x46e>
10014bba:	1a6a      	subs	r2, r5, r1
10014bbc:	4691      	mov	r9, r2
10014bbe:	454d      	cmp	r5, r9
10014bc0:	41b6      	sbcs	r6, r6
10014bc2:	1a3a      	subs	r2, r7, r0
10014bc4:	4276      	negs	r6, r6
10014bc6:	1b92      	subs	r2, r2, r6
10014bc8:	4690      	mov	r8, r2
10014bca:	0212      	lsls	r2, r2, #8
10014bcc:	d400      	bmi.n	10014bd0 <__aeabi_dsub+0x290>
10014bce:	e099      	b.n	10014d04 <__aeabi_dsub+0x3c4>
10014bd0:	1b4d      	subs	r5, r1, r5
10014bd2:	42a9      	cmp	r1, r5
10014bd4:	4189      	sbcs	r1, r1
10014bd6:	1bc7      	subs	r7, r0, r7
10014bd8:	4249      	negs	r1, r1
10014bda:	1a7a      	subs	r2, r7, r1
10014bdc:	4690      	mov	r8, r2
10014bde:	469a      	mov	sl, r3
10014be0:	e73c      	b.n	10014a5c <__aeabi_dsub+0x11c>
10014be2:	4652      	mov	r2, sl
10014be4:	2301      	movs	r3, #1
10014be6:	2500      	movs	r5, #0
10014be8:	4013      	ands	r3, r2
10014bea:	2200      	movs	r2, #0
10014bec:	e6f5      	b.n	100149da <__aeabi_dsub+0x9a>
10014bee:	0028      	movs	r0, r5
10014bf0:	f000 fa68 	bl	100150c4 <__clzsi2>
10014bf4:	3020      	adds	r0, #32
10014bf6:	0003      	movs	r3, r0
10014bf8:	3b08      	subs	r3, #8
10014bfa:	2b1f      	cmp	r3, #31
10014bfc:	dc00      	bgt.n	10014c00 <__aeabi_dsub+0x2c0>
10014bfe:	e739      	b.n	10014a74 <__aeabi_dsub+0x134>
10014c00:	002a      	movs	r2, r5
10014c02:	3828      	subs	r0, #40	; 0x28
10014c04:	4082      	lsls	r2, r0
10014c06:	2500      	movs	r5, #0
10014c08:	429c      	cmp	r4, r3
10014c0a:	dc00      	bgt.n	10014c0e <__aeabi_dsub+0x2ce>
10014c0c:	e73e      	b.n	10014a8c <__aeabi_dsub+0x14c>
10014c0e:	4f26      	ldr	r7, [pc, #152]	; (10014ca8 <__aeabi_dsub+0x368>)
10014c10:	1ae4      	subs	r4, r4, r3
10014c12:	4017      	ands	r7, r2
10014c14:	e6c0      	b.n	10014998 <__aeabi_dsub+0x58>
10014c16:	4301      	orrs	r1, r0
10014c18:	1e48      	subs	r0, r1, #1
10014c1a:	4181      	sbcs	r1, r0
10014c1c:	2200      	movs	r2, #0
10014c1e:	b2c9      	uxtb	r1, r1
10014c20:	e710      	b.n	10014a44 <__aeabi_dsub+0x104>
10014c22:	2e00      	cmp	r6, #0
10014c24:	d000      	beq.n	10014c28 <__aeabi_dsub+0x2e8>
10014c26:	e0f1      	b.n	10014e0c <__aeabi_dsub+0x4cc>
10014c28:	1c62      	adds	r2, r4, #1
10014c2a:	4694      	mov	ip, r2
10014c2c:	0552      	lsls	r2, r2, #21
10014c2e:	0d52      	lsrs	r2, r2, #21
10014c30:	2a01      	cmp	r2, #1
10014c32:	dc00      	bgt.n	10014c36 <__aeabi_dsub+0x2f6>
10014c34:	e0a0      	b.n	10014d78 <__aeabi_dsub+0x438>
10014c36:	4a1b      	ldr	r2, [pc, #108]	; (10014ca4 <__aeabi_dsub+0x364>)
10014c38:	4594      	cmp	ip, r2
10014c3a:	d100      	bne.n	10014c3e <__aeabi_dsub+0x2fe>
10014c3c:	e0c5      	b.n	10014dca <__aeabi_dsub+0x48a>
10014c3e:	1869      	adds	r1, r5, r1
10014c40:	42a9      	cmp	r1, r5
10014c42:	4192      	sbcs	r2, r2
10014c44:	183f      	adds	r7, r7, r0
10014c46:	4252      	negs	r2, r2
10014c48:	19d2      	adds	r2, r2, r7
10014c4a:	0849      	lsrs	r1, r1, #1
10014c4c:	07d5      	lsls	r5, r2, #31
10014c4e:	430d      	orrs	r5, r1
10014c50:	0857      	lsrs	r7, r2, #1
10014c52:	4664      	mov	r4, ip
10014c54:	e6a0      	b.n	10014998 <__aeabi_dsub+0x58>
10014c56:	4b13      	ldr	r3, [pc, #76]	; (10014ca4 <__aeabi_dsub+0x364>)
10014c58:	429c      	cmp	r4, r3
10014c5a:	d000      	beq.n	10014c5e <__aeabi_dsub+0x31e>
10014c5c:	e6d9      	b.n	10014a12 <__aeabi_dsub+0xd2>
10014c5e:	e69b      	b.n	10014998 <__aeabi_dsub+0x58>
10014c60:	0011      	movs	r1, r2
10014c62:	3c1f      	subs	r4, #31
10014c64:	40e1      	lsrs	r1, r4
10014c66:	000c      	movs	r4, r1
10014c68:	2b20      	cmp	r3, #32
10014c6a:	d100      	bne.n	10014c6e <__aeabi_dsub+0x32e>
10014c6c:	e080      	b.n	10014d70 <__aeabi_dsub+0x430>
10014c6e:	2140      	movs	r1, #64	; 0x40
10014c70:	1acb      	subs	r3, r1, r3
10014c72:	409a      	lsls	r2, r3
10014c74:	4315      	orrs	r5, r2
10014c76:	1e6a      	subs	r2, r5, #1
10014c78:	4195      	sbcs	r5, r2
10014c7a:	2700      	movs	r7, #0
10014c7c:	4325      	orrs	r5, r4
10014c7e:	2400      	movs	r4, #0
10014c80:	e71f      	b.n	10014ac2 <__aeabi_dsub+0x182>
10014c82:	4663      	mov	r3, ip
10014c84:	0002      	movs	r2, r0
10014c86:	3b20      	subs	r3, #32
10014c88:	40da      	lsrs	r2, r3
10014c8a:	4663      	mov	r3, ip
10014c8c:	2b20      	cmp	r3, #32
10014c8e:	d071      	beq.n	10014d74 <__aeabi_dsub+0x434>
10014c90:	2340      	movs	r3, #64	; 0x40
10014c92:	4666      	mov	r6, ip
10014c94:	1b9b      	subs	r3, r3, r6
10014c96:	4098      	lsls	r0, r3
10014c98:	4301      	orrs	r1, r0
10014c9a:	1e48      	subs	r0, r1, #1
10014c9c:	4181      	sbcs	r1, r0
10014c9e:	4311      	orrs	r1, r2
10014ca0:	2200      	movs	r2, #0
10014ca2:	e6cf      	b.n	10014a44 <__aeabi_dsub+0x104>
10014ca4:	000007ff 	.word	0x000007ff
10014ca8:	ff7fffff 	.word	0xff7fffff
10014cac:	800fffff 	.word	0x800fffff
10014cb0:	2c00      	cmp	r4, #0
10014cb2:	d048      	beq.n	10014d46 <__aeabi_dsub+0x406>
10014cb4:	4cca      	ldr	r4, [pc, #808]	; (10014fe0 <__aeabi_dsub+0x6a0>)
10014cb6:	42a2      	cmp	r2, r4
10014cb8:	d100      	bne.n	10014cbc <__aeabi_dsub+0x37c>
10014cba:	e0a2      	b.n	10014e02 <__aeabi_dsub+0x4c2>
10014cbc:	4274      	negs	r4, r6
10014cbe:	46a1      	mov	r9, r4
10014cc0:	2480      	movs	r4, #128	; 0x80
10014cc2:	0424      	lsls	r4, r4, #16
10014cc4:	4327      	orrs	r7, r4
10014cc6:	464c      	mov	r4, r9
10014cc8:	2c38      	cmp	r4, #56	; 0x38
10014cca:	dd00      	ble.n	10014cce <__aeabi_dsub+0x38e>
10014ccc:	e0db      	b.n	10014e86 <__aeabi_dsub+0x546>
10014cce:	2c1f      	cmp	r4, #31
10014cd0:	dd00      	ble.n	10014cd4 <__aeabi_dsub+0x394>
10014cd2:	e144      	b.n	10014f5e <__aeabi_dsub+0x61e>
10014cd4:	464e      	mov	r6, r9
10014cd6:	2420      	movs	r4, #32
10014cd8:	1ba4      	subs	r4, r4, r6
10014cda:	003e      	movs	r6, r7
10014cdc:	40a6      	lsls	r6, r4
10014cde:	46a2      	mov	sl, r4
10014ce0:	46b0      	mov	r8, r6
10014ce2:	464c      	mov	r4, r9
10014ce4:	002e      	movs	r6, r5
10014ce6:	40e6      	lsrs	r6, r4
10014ce8:	46b4      	mov	ip, r6
10014cea:	4646      	mov	r6, r8
10014cec:	4664      	mov	r4, ip
10014cee:	4326      	orrs	r6, r4
10014cf0:	4654      	mov	r4, sl
10014cf2:	40a5      	lsls	r5, r4
10014cf4:	1e6c      	subs	r4, r5, #1
10014cf6:	41a5      	sbcs	r5, r4
10014cf8:	0034      	movs	r4, r6
10014cfa:	432c      	orrs	r4, r5
10014cfc:	464d      	mov	r5, r9
10014cfe:	40ef      	lsrs	r7, r5
10014d00:	1b0d      	subs	r5, r1, r4
10014d02:	e028      	b.n	10014d56 <__aeabi_dsub+0x416>
10014d04:	464a      	mov	r2, r9
10014d06:	4643      	mov	r3, r8
10014d08:	464d      	mov	r5, r9
10014d0a:	431a      	orrs	r2, r3
10014d0c:	d000      	beq.n	10014d10 <__aeabi_dsub+0x3d0>
10014d0e:	e6a5      	b.n	10014a5c <__aeabi_dsub+0x11c>
10014d10:	2300      	movs	r3, #0
10014d12:	2400      	movs	r4, #0
10014d14:	2500      	movs	r5, #0
10014d16:	e6de      	b.n	10014ad6 <__aeabi_dsub+0x196>
10014d18:	2a1f      	cmp	r2, #31
10014d1a:	dc5a      	bgt.n	10014dd2 <__aeabi_dsub+0x492>
10014d1c:	4666      	mov	r6, ip
10014d1e:	2220      	movs	r2, #32
10014d20:	1b92      	subs	r2, r2, r6
10014d22:	0006      	movs	r6, r0
10014d24:	4096      	lsls	r6, r2
10014d26:	4691      	mov	r9, r2
10014d28:	46b0      	mov	r8, r6
10014d2a:	4662      	mov	r2, ip
10014d2c:	000e      	movs	r6, r1
10014d2e:	40d6      	lsrs	r6, r2
10014d30:	4642      	mov	r2, r8
10014d32:	4316      	orrs	r6, r2
10014d34:	464a      	mov	r2, r9
10014d36:	4091      	lsls	r1, r2
10014d38:	1e4a      	subs	r2, r1, #1
10014d3a:	4191      	sbcs	r1, r2
10014d3c:	0002      	movs	r2, r0
10014d3e:	4660      	mov	r0, ip
10014d40:	4331      	orrs	r1, r6
10014d42:	40c2      	lsrs	r2, r0
10014d44:	e6e4      	b.n	10014b10 <__aeabi_dsub+0x1d0>
10014d46:	003c      	movs	r4, r7
10014d48:	432c      	orrs	r4, r5
10014d4a:	d05a      	beq.n	10014e02 <__aeabi_dsub+0x4c2>
10014d4c:	43f4      	mvns	r4, r6
10014d4e:	46a1      	mov	r9, r4
10014d50:	2c00      	cmp	r4, #0
10014d52:	d152      	bne.n	10014dfa <__aeabi_dsub+0x4ba>
10014d54:	1b4d      	subs	r5, r1, r5
10014d56:	42a9      	cmp	r1, r5
10014d58:	4189      	sbcs	r1, r1
10014d5a:	1bc7      	subs	r7, r0, r7
10014d5c:	4249      	negs	r1, r1
10014d5e:	1a7f      	subs	r7, r7, r1
10014d60:	0014      	movs	r4, r2
10014d62:	469a      	mov	sl, r3
10014d64:	e675      	b.n	10014a52 <__aeabi_dsub+0x112>
10014d66:	4a9e      	ldr	r2, [pc, #632]	; (10014fe0 <__aeabi_dsub+0x6a0>)
10014d68:	4294      	cmp	r4, r2
10014d6a:	d000      	beq.n	10014d6e <__aeabi_dsub+0x42e>
10014d6c:	e6c7      	b.n	10014afe <__aeabi_dsub+0x1be>
10014d6e:	e613      	b.n	10014998 <__aeabi_dsub+0x58>
10014d70:	2200      	movs	r2, #0
10014d72:	e77f      	b.n	10014c74 <__aeabi_dsub+0x334>
10014d74:	2000      	movs	r0, #0
10014d76:	e78f      	b.n	10014c98 <__aeabi_dsub+0x358>
10014d78:	2c00      	cmp	r4, #0
10014d7a:	d000      	beq.n	10014d7e <__aeabi_dsub+0x43e>
10014d7c:	e0c8      	b.n	10014f10 <__aeabi_dsub+0x5d0>
10014d7e:	003b      	movs	r3, r7
10014d80:	432b      	orrs	r3, r5
10014d82:	d100      	bne.n	10014d86 <__aeabi_dsub+0x446>
10014d84:	e10f      	b.n	10014fa6 <__aeabi_dsub+0x666>
10014d86:	0003      	movs	r3, r0
10014d88:	430b      	orrs	r3, r1
10014d8a:	d100      	bne.n	10014d8e <__aeabi_dsub+0x44e>
10014d8c:	e604      	b.n	10014998 <__aeabi_dsub+0x58>
10014d8e:	1869      	adds	r1, r5, r1
10014d90:	42a9      	cmp	r1, r5
10014d92:	419b      	sbcs	r3, r3
10014d94:	183f      	adds	r7, r7, r0
10014d96:	425b      	negs	r3, r3
10014d98:	19df      	adds	r7, r3, r7
10014d9a:	023b      	lsls	r3, r7, #8
10014d9c:	d400      	bmi.n	10014da0 <__aeabi_dsub+0x460>
10014d9e:	e11a      	b.n	10014fd6 <__aeabi_dsub+0x696>
10014da0:	4b90      	ldr	r3, [pc, #576]	; (10014fe4 <__aeabi_dsub+0x6a4>)
10014da2:	000d      	movs	r5, r1
10014da4:	401f      	ands	r7, r3
10014da6:	4664      	mov	r4, ip
10014da8:	e5f6      	b.n	10014998 <__aeabi_dsub+0x58>
10014daa:	469a      	mov	sl, r3
10014dac:	e689      	b.n	10014ac2 <__aeabi_dsub+0x182>
10014dae:	003a      	movs	r2, r7
10014db0:	432a      	orrs	r2, r5
10014db2:	2c00      	cmp	r4, #0
10014db4:	d15c      	bne.n	10014e70 <__aeabi_dsub+0x530>
10014db6:	2a00      	cmp	r2, #0
10014db8:	d175      	bne.n	10014ea6 <__aeabi_dsub+0x566>
10014dba:	0002      	movs	r2, r0
10014dbc:	430a      	orrs	r2, r1
10014dbe:	d100      	bne.n	10014dc2 <__aeabi_dsub+0x482>
10014dc0:	e0ca      	b.n	10014f58 <__aeabi_dsub+0x618>
10014dc2:	0007      	movs	r7, r0
10014dc4:	000d      	movs	r5, r1
10014dc6:	469a      	mov	sl, r3
10014dc8:	e5e6      	b.n	10014998 <__aeabi_dsub+0x58>
10014dca:	4664      	mov	r4, ip
10014dcc:	2200      	movs	r2, #0
10014dce:	2500      	movs	r5, #0
10014dd0:	e681      	b.n	10014ad6 <__aeabi_dsub+0x196>
10014dd2:	4662      	mov	r2, ip
10014dd4:	0006      	movs	r6, r0
10014dd6:	3a20      	subs	r2, #32
10014dd8:	40d6      	lsrs	r6, r2
10014dda:	4662      	mov	r2, ip
10014ddc:	46b0      	mov	r8, r6
10014dde:	2a20      	cmp	r2, #32
10014de0:	d100      	bne.n	10014de4 <__aeabi_dsub+0x4a4>
10014de2:	e0b7      	b.n	10014f54 <__aeabi_dsub+0x614>
10014de4:	2240      	movs	r2, #64	; 0x40
10014de6:	4666      	mov	r6, ip
10014de8:	1b92      	subs	r2, r2, r6
10014dea:	4090      	lsls	r0, r2
10014dec:	4301      	orrs	r1, r0
10014dee:	4642      	mov	r2, r8
10014df0:	1e48      	subs	r0, r1, #1
10014df2:	4181      	sbcs	r1, r0
10014df4:	4311      	orrs	r1, r2
10014df6:	2200      	movs	r2, #0
10014df8:	e68a      	b.n	10014b10 <__aeabi_dsub+0x1d0>
10014dfa:	4c79      	ldr	r4, [pc, #484]	; (10014fe0 <__aeabi_dsub+0x6a0>)
10014dfc:	42a2      	cmp	r2, r4
10014dfe:	d000      	beq.n	10014e02 <__aeabi_dsub+0x4c2>
10014e00:	e761      	b.n	10014cc6 <__aeabi_dsub+0x386>
10014e02:	0007      	movs	r7, r0
10014e04:	000d      	movs	r5, r1
10014e06:	0014      	movs	r4, r2
10014e08:	469a      	mov	sl, r3
10014e0a:	e5c5      	b.n	10014998 <__aeabi_dsub+0x58>
10014e0c:	2c00      	cmp	r4, #0
10014e0e:	d141      	bne.n	10014e94 <__aeabi_dsub+0x554>
10014e10:	003c      	movs	r4, r7
10014e12:	432c      	orrs	r4, r5
10014e14:	d078      	beq.n	10014f08 <__aeabi_dsub+0x5c8>
10014e16:	43f4      	mvns	r4, r6
10014e18:	46a1      	mov	r9, r4
10014e1a:	2c00      	cmp	r4, #0
10014e1c:	d020      	beq.n	10014e60 <__aeabi_dsub+0x520>
10014e1e:	4c70      	ldr	r4, [pc, #448]	; (10014fe0 <__aeabi_dsub+0x6a0>)
10014e20:	42a2      	cmp	r2, r4
10014e22:	d071      	beq.n	10014f08 <__aeabi_dsub+0x5c8>
10014e24:	464c      	mov	r4, r9
10014e26:	2c38      	cmp	r4, #56	; 0x38
10014e28:	dd00      	ble.n	10014e2c <__aeabi_dsub+0x4ec>
10014e2a:	e0b2      	b.n	10014f92 <__aeabi_dsub+0x652>
10014e2c:	2c1f      	cmp	r4, #31
10014e2e:	dd00      	ble.n	10014e32 <__aeabi_dsub+0x4f2>
10014e30:	e0bc      	b.n	10014fac <__aeabi_dsub+0x66c>
10014e32:	2620      	movs	r6, #32
10014e34:	1b34      	subs	r4, r6, r4
10014e36:	46a2      	mov	sl, r4
10014e38:	003c      	movs	r4, r7
10014e3a:	4656      	mov	r6, sl
10014e3c:	40b4      	lsls	r4, r6
10014e3e:	464e      	mov	r6, r9
10014e40:	46a0      	mov	r8, r4
10014e42:	002c      	movs	r4, r5
10014e44:	40f4      	lsrs	r4, r6
10014e46:	46a4      	mov	ip, r4
10014e48:	4644      	mov	r4, r8
10014e4a:	4666      	mov	r6, ip
10014e4c:	4334      	orrs	r4, r6
10014e4e:	46a4      	mov	ip, r4
10014e50:	4654      	mov	r4, sl
10014e52:	40a5      	lsls	r5, r4
10014e54:	4664      	mov	r4, ip
10014e56:	1e6e      	subs	r6, r5, #1
10014e58:	41b5      	sbcs	r5, r6
10014e5a:	4325      	orrs	r5, r4
10014e5c:	464c      	mov	r4, r9
10014e5e:	40e7      	lsrs	r7, r4
10014e60:	186d      	adds	r5, r5, r1
10014e62:	428d      	cmp	r5, r1
10014e64:	4189      	sbcs	r1, r1
10014e66:	183f      	adds	r7, r7, r0
10014e68:	4249      	negs	r1, r1
10014e6a:	19cf      	adds	r7, r1, r7
10014e6c:	0014      	movs	r4, r2
10014e6e:	e656      	b.n	10014b1e <__aeabi_dsub+0x1de>
10014e70:	2a00      	cmp	r2, #0
10014e72:	d12f      	bne.n	10014ed4 <__aeabi_dsub+0x594>
10014e74:	0002      	movs	r2, r0
10014e76:	430a      	orrs	r2, r1
10014e78:	d100      	bne.n	10014e7c <__aeabi_dsub+0x53c>
10014e7a:	e084      	b.n	10014f86 <__aeabi_dsub+0x646>
10014e7c:	0007      	movs	r7, r0
10014e7e:	000d      	movs	r5, r1
10014e80:	469a      	mov	sl, r3
10014e82:	4c57      	ldr	r4, [pc, #348]	; (10014fe0 <__aeabi_dsub+0x6a0>)
10014e84:	e588      	b.n	10014998 <__aeabi_dsub+0x58>
10014e86:	433d      	orrs	r5, r7
10014e88:	1e6f      	subs	r7, r5, #1
10014e8a:	41bd      	sbcs	r5, r7
10014e8c:	b2ec      	uxtb	r4, r5
10014e8e:	2700      	movs	r7, #0
10014e90:	1b0d      	subs	r5, r1, r4
10014e92:	e760      	b.n	10014d56 <__aeabi_dsub+0x416>
10014e94:	4c52      	ldr	r4, [pc, #328]	; (10014fe0 <__aeabi_dsub+0x6a0>)
10014e96:	42a2      	cmp	r2, r4
10014e98:	d036      	beq.n	10014f08 <__aeabi_dsub+0x5c8>
10014e9a:	4274      	negs	r4, r6
10014e9c:	2680      	movs	r6, #128	; 0x80
10014e9e:	0436      	lsls	r6, r6, #16
10014ea0:	46a1      	mov	r9, r4
10014ea2:	4337      	orrs	r7, r6
10014ea4:	e7be      	b.n	10014e24 <__aeabi_dsub+0x4e4>
10014ea6:	0002      	movs	r2, r0
10014ea8:	430a      	orrs	r2, r1
10014eaa:	d100      	bne.n	10014eae <__aeabi_dsub+0x56e>
10014eac:	e574      	b.n	10014998 <__aeabi_dsub+0x58>
10014eae:	1a6a      	subs	r2, r5, r1
10014eb0:	4690      	mov	r8, r2
10014eb2:	4545      	cmp	r5, r8
10014eb4:	41b6      	sbcs	r6, r6
10014eb6:	1a3a      	subs	r2, r7, r0
10014eb8:	4276      	negs	r6, r6
10014eba:	1b92      	subs	r2, r2, r6
10014ebc:	4694      	mov	ip, r2
10014ebe:	0212      	lsls	r2, r2, #8
10014ec0:	d400      	bmi.n	10014ec4 <__aeabi_dsub+0x584>
10014ec2:	e5f7      	b.n	10014ab4 <__aeabi_dsub+0x174>
10014ec4:	1b4d      	subs	r5, r1, r5
10014ec6:	42a9      	cmp	r1, r5
10014ec8:	4189      	sbcs	r1, r1
10014eca:	1bc7      	subs	r7, r0, r7
10014ecc:	4249      	negs	r1, r1
10014ece:	1a7f      	subs	r7, r7, r1
10014ed0:	469a      	mov	sl, r3
10014ed2:	e561      	b.n	10014998 <__aeabi_dsub+0x58>
10014ed4:	0002      	movs	r2, r0
10014ed6:	430a      	orrs	r2, r1
10014ed8:	d03a      	beq.n	10014f50 <__aeabi_dsub+0x610>
10014eda:	08ed      	lsrs	r5, r5, #3
10014edc:	077c      	lsls	r4, r7, #29
10014ede:	432c      	orrs	r4, r5
10014ee0:	2580      	movs	r5, #128	; 0x80
10014ee2:	08fa      	lsrs	r2, r7, #3
10014ee4:	032d      	lsls	r5, r5, #12
10014ee6:	422a      	tst	r2, r5
10014ee8:	d008      	beq.n	10014efc <__aeabi_dsub+0x5bc>
10014eea:	08c7      	lsrs	r7, r0, #3
10014eec:	422f      	tst	r7, r5
10014eee:	d105      	bne.n	10014efc <__aeabi_dsub+0x5bc>
10014ef0:	0745      	lsls	r5, r0, #29
10014ef2:	002c      	movs	r4, r5
10014ef4:	003a      	movs	r2, r7
10014ef6:	469a      	mov	sl, r3
10014ef8:	08c9      	lsrs	r1, r1, #3
10014efa:	430c      	orrs	r4, r1
10014efc:	0f67      	lsrs	r7, r4, #29
10014efe:	00d2      	lsls	r2, r2, #3
10014f00:	00e5      	lsls	r5, r4, #3
10014f02:	4317      	orrs	r7, r2
10014f04:	4c36      	ldr	r4, [pc, #216]	; (10014fe0 <__aeabi_dsub+0x6a0>)
10014f06:	e547      	b.n	10014998 <__aeabi_dsub+0x58>
10014f08:	0007      	movs	r7, r0
10014f0a:	000d      	movs	r5, r1
10014f0c:	0014      	movs	r4, r2
10014f0e:	e543      	b.n	10014998 <__aeabi_dsub+0x58>
10014f10:	003a      	movs	r2, r7
10014f12:	432a      	orrs	r2, r5
10014f14:	d043      	beq.n	10014f9e <__aeabi_dsub+0x65e>
10014f16:	0002      	movs	r2, r0
10014f18:	430a      	orrs	r2, r1
10014f1a:	d019      	beq.n	10014f50 <__aeabi_dsub+0x610>
10014f1c:	08ed      	lsrs	r5, r5, #3
10014f1e:	077c      	lsls	r4, r7, #29
10014f20:	432c      	orrs	r4, r5
10014f22:	2580      	movs	r5, #128	; 0x80
10014f24:	08fa      	lsrs	r2, r7, #3
10014f26:	032d      	lsls	r5, r5, #12
10014f28:	422a      	tst	r2, r5
10014f2a:	d007      	beq.n	10014f3c <__aeabi_dsub+0x5fc>
10014f2c:	08c6      	lsrs	r6, r0, #3
10014f2e:	422e      	tst	r6, r5
10014f30:	d104      	bne.n	10014f3c <__aeabi_dsub+0x5fc>
10014f32:	0747      	lsls	r7, r0, #29
10014f34:	003c      	movs	r4, r7
10014f36:	0032      	movs	r2, r6
10014f38:	08c9      	lsrs	r1, r1, #3
10014f3a:	430c      	orrs	r4, r1
10014f3c:	00d7      	lsls	r7, r2, #3
10014f3e:	0f62      	lsrs	r2, r4, #29
10014f40:	00e5      	lsls	r5, r4, #3
10014f42:	4317      	orrs	r7, r2
10014f44:	469a      	mov	sl, r3
10014f46:	4c26      	ldr	r4, [pc, #152]	; (10014fe0 <__aeabi_dsub+0x6a0>)
10014f48:	e526      	b.n	10014998 <__aeabi_dsub+0x58>
10014f4a:	2200      	movs	r2, #0
10014f4c:	2500      	movs	r5, #0
10014f4e:	e544      	b.n	100149da <__aeabi_dsub+0x9a>
10014f50:	4c23      	ldr	r4, [pc, #140]	; (10014fe0 <__aeabi_dsub+0x6a0>)
10014f52:	e521      	b.n	10014998 <__aeabi_dsub+0x58>
10014f54:	2000      	movs	r0, #0
10014f56:	e749      	b.n	10014dec <__aeabi_dsub+0x4ac>
10014f58:	2300      	movs	r3, #0
10014f5a:	2500      	movs	r5, #0
10014f5c:	e5bb      	b.n	10014ad6 <__aeabi_dsub+0x196>
10014f5e:	464c      	mov	r4, r9
10014f60:	003e      	movs	r6, r7
10014f62:	3c20      	subs	r4, #32
10014f64:	40e6      	lsrs	r6, r4
10014f66:	464c      	mov	r4, r9
10014f68:	46b4      	mov	ip, r6
10014f6a:	2c20      	cmp	r4, #32
10014f6c:	d031      	beq.n	10014fd2 <__aeabi_dsub+0x692>
10014f6e:	2440      	movs	r4, #64	; 0x40
10014f70:	464e      	mov	r6, r9
10014f72:	1ba6      	subs	r6, r4, r6
10014f74:	40b7      	lsls	r7, r6
10014f76:	433d      	orrs	r5, r7
10014f78:	1e6c      	subs	r4, r5, #1
10014f7a:	41a5      	sbcs	r5, r4
10014f7c:	4664      	mov	r4, ip
10014f7e:	432c      	orrs	r4, r5
10014f80:	2700      	movs	r7, #0
10014f82:	1b0d      	subs	r5, r1, r4
10014f84:	e6e7      	b.n	10014d56 <__aeabi_dsub+0x416>
10014f86:	2280      	movs	r2, #128	; 0x80
10014f88:	2300      	movs	r3, #0
10014f8a:	0312      	lsls	r2, r2, #12
10014f8c:	4c14      	ldr	r4, [pc, #80]	; (10014fe0 <__aeabi_dsub+0x6a0>)
10014f8e:	2500      	movs	r5, #0
10014f90:	e5a1      	b.n	10014ad6 <__aeabi_dsub+0x196>
10014f92:	433d      	orrs	r5, r7
10014f94:	1e6f      	subs	r7, r5, #1
10014f96:	41bd      	sbcs	r5, r7
10014f98:	2700      	movs	r7, #0
10014f9a:	b2ed      	uxtb	r5, r5
10014f9c:	e760      	b.n	10014e60 <__aeabi_dsub+0x520>
10014f9e:	0007      	movs	r7, r0
10014fa0:	000d      	movs	r5, r1
10014fa2:	4c0f      	ldr	r4, [pc, #60]	; (10014fe0 <__aeabi_dsub+0x6a0>)
10014fa4:	e4f8      	b.n	10014998 <__aeabi_dsub+0x58>
10014fa6:	0007      	movs	r7, r0
10014fa8:	000d      	movs	r5, r1
10014faa:	e4f5      	b.n	10014998 <__aeabi_dsub+0x58>
10014fac:	464e      	mov	r6, r9
10014fae:	003c      	movs	r4, r7
10014fb0:	3e20      	subs	r6, #32
10014fb2:	40f4      	lsrs	r4, r6
10014fb4:	46a0      	mov	r8, r4
10014fb6:	464c      	mov	r4, r9
10014fb8:	2c20      	cmp	r4, #32
10014fba:	d00e      	beq.n	10014fda <__aeabi_dsub+0x69a>
10014fbc:	2440      	movs	r4, #64	; 0x40
10014fbe:	464e      	mov	r6, r9
10014fc0:	1ba4      	subs	r4, r4, r6
10014fc2:	40a7      	lsls	r7, r4
10014fc4:	433d      	orrs	r5, r7
10014fc6:	1e6f      	subs	r7, r5, #1
10014fc8:	41bd      	sbcs	r5, r7
10014fca:	4644      	mov	r4, r8
10014fcc:	2700      	movs	r7, #0
10014fce:	4325      	orrs	r5, r4
10014fd0:	e746      	b.n	10014e60 <__aeabi_dsub+0x520>
10014fd2:	2700      	movs	r7, #0
10014fd4:	e7cf      	b.n	10014f76 <__aeabi_dsub+0x636>
10014fd6:	000d      	movs	r5, r1
10014fd8:	e573      	b.n	10014ac2 <__aeabi_dsub+0x182>
10014fda:	2700      	movs	r7, #0
10014fdc:	e7f2      	b.n	10014fc4 <__aeabi_dsub+0x684>
10014fde:	46c0      	nop			; (mov r8, r8)
10014fe0:	000007ff 	.word	0x000007ff
10014fe4:	ff7fffff 	.word	0xff7fffff

10014fe8 <__aeabi_d2iz>:
10014fe8:	030b      	lsls	r3, r1, #12
10014fea:	b530      	push	{r4, r5, lr}
10014fec:	4d13      	ldr	r5, [pc, #76]	; (1001503c <__aeabi_d2iz+0x54>)
10014fee:	0b1a      	lsrs	r2, r3, #12
10014ff0:	004b      	lsls	r3, r1, #1
10014ff2:	0d5b      	lsrs	r3, r3, #21
10014ff4:	0fc9      	lsrs	r1, r1, #31
10014ff6:	2400      	movs	r4, #0
10014ff8:	42ab      	cmp	r3, r5
10014ffa:	dd11      	ble.n	10015020 <__aeabi_d2iz+0x38>
10014ffc:	4c10      	ldr	r4, [pc, #64]	; (10015040 <__aeabi_d2iz+0x58>)
10014ffe:	42a3      	cmp	r3, r4
10015000:	dc10      	bgt.n	10015024 <__aeabi_d2iz+0x3c>
10015002:	2480      	movs	r4, #128	; 0x80
10015004:	0364      	lsls	r4, r4, #13
10015006:	4322      	orrs	r2, r4
10015008:	4c0e      	ldr	r4, [pc, #56]	; (10015044 <__aeabi_d2iz+0x5c>)
1001500a:	1ae4      	subs	r4, r4, r3
1001500c:	2c1f      	cmp	r4, #31
1001500e:	dd0c      	ble.n	1001502a <__aeabi_d2iz+0x42>
10015010:	480d      	ldr	r0, [pc, #52]	; (10015048 <__aeabi_d2iz+0x60>)
10015012:	1ac3      	subs	r3, r0, r3
10015014:	40da      	lsrs	r2, r3
10015016:	0013      	movs	r3, r2
10015018:	425c      	negs	r4, r3
1001501a:	2900      	cmp	r1, #0
1001501c:	d100      	bne.n	10015020 <__aeabi_d2iz+0x38>
1001501e:	001c      	movs	r4, r3
10015020:	0020      	movs	r0, r4
10015022:	bd30      	pop	{r4, r5, pc}
10015024:	4b09      	ldr	r3, [pc, #36]	; (1001504c <__aeabi_d2iz+0x64>)
10015026:	18cc      	adds	r4, r1, r3
10015028:	e7fa      	b.n	10015020 <__aeabi_d2iz+0x38>
1001502a:	40e0      	lsrs	r0, r4
1001502c:	4c08      	ldr	r4, [pc, #32]	; (10015050 <__aeabi_d2iz+0x68>)
1001502e:	46a4      	mov	ip, r4
10015030:	4463      	add	r3, ip
10015032:	409a      	lsls	r2, r3
10015034:	0013      	movs	r3, r2
10015036:	4303      	orrs	r3, r0
10015038:	e7ee      	b.n	10015018 <__aeabi_d2iz+0x30>
1001503a:	46c0      	nop			; (mov r8, r8)
1001503c:	000003fe 	.word	0x000003fe
10015040:	0000041d 	.word	0x0000041d
10015044:	00000433 	.word	0x00000433
10015048:	00000413 	.word	0x00000413
1001504c:	7fffffff 	.word	0x7fffffff
10015050:	fffffbed 	.word	0xfffffbed

10015054 <__aeabi_ui2d>:
10015054:	b570      	push	{r4, r5, r6, lr}
10015056:	1e05      	subs	r5, r0, #0
10015058:	d028      	beq.n	100150ac <__aeabi_ui2d+0x58>
1001505a:	f000 f833 	bl	100150c4 <__clzsi2>
1001505e:	4b15      	ldr	r3, [pc, #84]	; (100150b4 <__aeabi_ui2d+0x60>)
10015060:	4a15      	ldr	r2, [pc, #84]	; (100150b8 <__aeabi_ui2d+0x64>)
10015062:	1a1b      	subs	r3, r3, r0
10015064:	1ad2      	subs	r2, r2, r3
10015066:	2a1f      	cmp	r2, #31
10015068:	dd16      	ble.n	10015098 <__aeabi_ui2d+0x44>
1001506a:	002c      	movs	r4, r5
1001506c:	4a13      	ldr	r2, [pc, #76]	; (100150bc <__aeabi_ui2d+0x68>)
1001506e:	2500      	movs	r5, #0
10015070:	1ad2      	subs	r2, r2, r3
10015072:	4094      	lsls	r4, r2
10015074:	055a      	lsls	r2, r3, #21
10015076:	0324      	lsls	r4, r4, #12
10015078:	0b24      	lsrs	r4, r4, #12
1001507a:	0d52      	lsrs	r2, r2, #21
1001507c:	2100      	movs	r1, #0
1001507e:	0324      	lsls	r4, r4, #12
10015080:	0d0b      	lsrs	r3, r1, #20
10015082:	0b24      	lsrs	r4, r4, #12
10015084:	051b      	lsls	r3, r3, #20
10015086:	4323      	orrs	r3, r4
10015088:	4c0d      	ldr	r4, [pc, #52]	; (100150c0 <__aeabi_ui2d+0x6c>)
1001508a:	0512      	lsls	r2, r2, #20
1001508c:	4023      	ands	r3, r4
1001508e:	4313      	orrs	r3, r2
10015090:	005b      	lsls	r3, r3, #1
10015092:	0028      	movs	r0, r5
10015094:	0859      	lsrs	r1, r3, #1
10015096:	bd70      	pop	{r4, r5, r6, pc}
10015098:	210b      	movs	r1, #11
1001509a:	002c      	movs	r4, r5
1001509c:	1a08      	subs	r0, r1, r0
1001509e:	40c4      	lsrs	r4, r0
100150a0:	4095      	lsls	r5, r2
100150a2:	0324      	lsls	r4, r4, #12
100150a4:	055a      	lsls	r2, r3, #21
100150a6:	0b24      	lsrs	r4, r4, #12
100150a8:	0d52      	lsrs	r2, r2, #21
100150aa:	e7e7      	b.n	1001507c <__aeabi_ui2d+0x28>
100150ac:	2200      	movs	r2, #0
100150ae:	2400      	movs	r4, #0
100150b0:	e7e4      	b.n	1001507c <__aeabi_ui2d+0x28>
100150b2:	46c0      	nop			; (mov r8, r8)
100150b4:	0000041e 	.word	0x0000041e
100150b8:	00000433 	.word	0x00000433
100150bc:	00000413 	.word	0x00000413
100150c0:	800fffff 	.word	0x800fffff

100150c4 <__clzsi2>:
100150c4:	211c      	movs	r1, #28
100150c6:	2301      	movs	r3, #1
100150c8:	041b      	lsls	r3, r3, #16
100150ca:	4298      	cmp	r0, r3
100150cc:	d301      	bcc.n	100150d2 <__clzsi2+0xe>
100150ce:	0c00      	lsrs	r0, r0, #16
100150d0:	3910      	subs	r1, #16
100150d2:	0a1b      	lsrs	r3, r3, #8
100150d4:	4298      	cmp	r0, r3
100150d6:	d301      	bcc.n	100150dc <__clzsi2+0x18>
100150d8:	0a00      	lsrs	r0, r0, #8
100150da:	3908      	subs	r1, #8
100150dc:	091b      	lsrs	r3, r3, #4
100150de:	4298      	cmp	r0, r3
100150e0:	d301      	bcc.n	100150e6 <__clzsi2+0x22>
100150e2:	0900      	lsrs	r0, r0, #4
100150e4:	3904      	subs	r1, #4
100150e6:	a202      	add	r2, pc, #8	; (adr r2, 100150f0 <__clzsi2+0x2c>)
100150e8:	5c10      	ldrb	r0, [r2, r0]
100150ea:	1840      	adds	r0, r0, r1
100150ec:	4770      	bx	lr
100150ee:	46c0      	nop			; (mov r8, r8)
100150f0:	02020304 	.word	0x02020304
100150f4:	01010101 	.word	0x01010101
	...

10015100 <__libc_init_array>:
10015100:	4b0e      	ldr	r3, [pc, #56]	; (1001513c <__libc_init_array+0x3c>)
10015102:	b570      	push	{r4, r5, r6, lr}
10015104:	2500      	movs	r5, #0
10015106:	001e      	movs	r6, r3
10015108:	4c0d      	ldr	r4, [pc, #52]	; (10015140 <__libc_init_array+0x40>)
1001510a:	1ae4      	subs	r4, r4, r3
1001510c:	10a4      	asrs	r4, r4, #2
1001510e:	42a5      	cmp	r5, r4
10015110:	d004      	beq.n	1001511c <__libc_init_array+0x1c>
10015112:	00ab      	lsls	r3, r5, #2
10015114:	58f3      	ldr	r3, [r6, r3]
10015116:	4798      	blx	r3
10015118:	3501      	adds	r5, #1
1001511a:	e7f8      	b.n	1001510e <__libc_init_array+0xe>
1001511c:	f003 f950 	bl	100183c0 <_init>
10015120:	4b08      	ldr	r3, [pc, #32]	; (10015144 <__libc_init_array+0x44>)
10015122:	2500      	movs	r5, #0
10015124:	001e      	movs	r6, r3
10015126:	4c08      	ldr	r4, [pc, #32]	; (10015148 <__libc_init_array+0x48>)
10015128:	1ae4      	subs	r4, r4, r3
1001512a:	10a4      	asrs	r4, r4, #2
1001512c:	42a5      	cmp	r5, r4
1001512e:	d004      	beq.n	1001513a <__libc_init_array+0x3a>
10015130:	00ab      	lsls	r3, r5, #2
10015132:	58f3      	ldr	r3, [r6, r3]
10015134:	4798      	blx	r3
10015136:	3501      	adds	r5, #1
10015138:	e7f8      	b.n	1001512c <__libc_init_array+0x2c>
1001513a:	bd70      	pop	{r4, r5, r6, pc}
1001513c:	100183cc 	.word	0x100183cc
10015140:	100183cc 	.word	0x100183cc
10015144:	100183cc 	.word	0x100183cc
10015148:	100183d0 	.word	0x100183d0

1001514c <malloc>:
1001514c:	b510      	push	{r4, lr}
1001514e:	4b03      	ldr	r3, [pc, #12]	; (1001515c <malloc+0x10>)
10015150:	0001      	movs	r1, r0
10015152:	6818      	ldr	r0, [r3, #0]
10015154:	f000 f86a 	bl	1001522c <_malloc_r>
10015158:	bd10      	pop	{r4, pc}
1001515a:	46c0      	nop			; (mov r8, r8)
1001515c:	10018488 	.word	0x10018488

10015160 <memcmp>:
10015160:	b530      	push	{r4, r5, lr}
10015162:	2400      	movs	r4, #0
10015164:	42a2      	cmp	r2, r4
10015166:	d008      	beq.n	1001517a <memcmp+0x1a>
10015168:	5d03      	ldrb	r3, [r0, r4]
1001516a:	1c65      	adds	r5, r4, #1
1001516c:	5d0c      	ldrb	r4, [r1, r4]
1001516e:	42a3      	cmp	r3, r4
10015170:	d001      	beq.n	10015176 <memcmp+0x16>
10015172:	1b18      	subs	r0, r3, r4
10015174:	e002      	b.n	1001517c <memcmp+0x1c>
10015176:	002c      	movs	r4, r5
10015178:	e7f4      	b.n	10015164 <memcmp+0x4>
1001517a:	2000      	movs	r0, #0
1001517c:	bd30      	pop	{r4, r5, pc}

1001517e <memcpy>:
1001517e:	2300      	movs	r3, #0
10015180:	b510      	push	{r4, lr}
10015182:	429a      	cmp	r2, r3
10015184:	d003      	beq.n	1001518e <memcpy+0x10>
10015186:	5ccc      	ldrb	r4, [r1, r3]
10015188:	54c4      	strb	r4, [r0, r3]
1001518a:	3301      	adds	r3, #1
1001518c:	e7f9      	b.n	10015182 <memcpy+0x4>
1001518e:	bd10      	pop	{r4, pc}

10015190 <memset>:
10015190:	0003      	movs	r3, r0
10015192:	1882      	adds	r2, r0, r2
10015194:	4293      	cmp	r3, r2
10015196:	d002      	beq.n	1001519e <memset+0xe>
10015198:	7019      	strb	r1, [r3, #0]
1001519a:	3301      	adds	r3, #1
1001519c:	e7fa      	b.n	10015194 <memset+0x4>
1001519e:	4770      	bx	lr

100151a0 <_free_r>:
100151a0:	b530      	push	{r4, r5, lr}
100151a2:	2900      	cmp	r1, #0
100151a4:	d03e      	beq.n	10015224 <_free_r+0x84>
100151a6:	3904      	subs	r1, #4
100151a8:	680b      	ldr	r3, [r1, #0]
100151aa:	2b00      	cmp	r3, #0
100151ac:	da00      	bge.n	100151b0 <_free_r+0x10>
100151ae:	18c9      	adds	r1, r1, r3
100151b0:	4a1d      	ldr	r2, [pc, #116]	; (10015228 <_free_r+0x88>)
100151b2:	6813      	ldr	r3, [r2, #0]
100151b4:	0014      	movs	r4, r2
100151b6:	2b00      	cmp	r3, #0
100151b8:	d102      	bne.n	100151c0 <_free_r+0x20>
100151ba:	604b      	str	r3, [r1, #4]
100151bc:	6011      	str	r1, [r2, #0]
100151be:	e031      	b.n	10015224 <_free_r+0x84>
100151c0:	428b      	cmp	r3, r1
100151c2:	d90d      	bls.n	100151e0 <_free_r+0x40>
100151c4:	680a      	ldr	r2, [r1, #0]
100151c6:	1888      	adds	r0, r1, r2
100151c8:	4283      	cmp	r3, r0
100151ca:	d103      	bne.n	100151d4 <_free_r+0x34>
100151cc:	6818      	ldr	r0, [r3, #0]
100151ce:	685b      	ldr	r3, [r3, #4]
100151d0:	1882      	adds	r2, r0, r2
100151d2:	600a      	str	r2, [r1, #0]
100151d4:	604b      	str	r3, [r1, #4]
100151d6:	6021      	str	r1, [r4, #0]
100151d8:	e024      	b.n	10015224 <_free_r+0x84>
100151da:	428a      	cmp	r2, r1
100151dc:	d803      	bhi.n	100151e6 <_free_r+0x46>
100151de:	0013      	movs	r3, r2
100151e0:	685a      	ldr	r2, [r3, #4]
100151e2:	2a00      	cmp	r2, #0
100151e4:	d1f9      	bne.n	100151da <_free_r+0x3a>
100151e6:	681d      	ldr	r5, [r3, #0]
100151e8:	195c      	adds	r4, r3, r5
100151ea:	428c      	cmp	r4, r1
100151ec:	d10b      	bne.n	10015206 <_free_r+0x66>
100151ee:	6809      	ldr	r1, [r1, #0]
100151f0:	1869      	adds	r1, r5, r1
100151f2:	1858      	adds	r0, r3, r1
100151f4:	6019      	str	r1, [r3, #0]
100151f6:	4282      	cmp	r2, r0
100151f8:	d114      	bne.n	10015224 <_free_r+0x84>
100151fa:	6810      	ldr	r0, [r2, #0]
100151fc:	6852      	ldr	r2, [r2, #4]
100151fe:	1841      	adds	r1, r0, r1
10015200:	6019      	str	r1, [r3, #0]
10015202:	605a      	str	r2, [r3, #4]
10015204:	e00e      	b.n	10015224 <_free_r+0x84>
10015206:	428c      	cmp	r4, r1
10015208:	d902      	bls.n	10015210 <_free_r+0x70>
1001520a:	230c      	movs	r3, #12
1001520c:	6003      	str	r3, [r0, #0]
1001520e:	e009      	b.n	10015224 <_free_r+0x84>
10015210:	6808      	ldr	r0, [r1, #0]
10015212:	180c      	adds	r4, r1, r0
10015214:	42a2      	cmp	r2, r4
10015216:	d103      	bne.n	10015220 <_free_r+0x80>
10015218:	6814      	ldr	r4, [r2, #0]
1001521a:	6852      	ldr	r2, [r2, #4]
1001521c:	1820      	adds	r0, r4, r0
1001521e:	6008      	str	r0, [r1, #0]
10015220:	604a      	str	r2, [r1, #4]
10015222:	6059      	str	r1, [r3, #4]
10015224:	bd30      	pop	{r4, r5, pc}
10015226:	46c0      	nop			; (mov r8, r8)
10015228:	10019f5c 	.word	0x10019f5c

1001522c <_malloc_r>:
1001522c:	2303      	movs	r3, #3
1001522e:	b570      	push	{r4, r5, r6, lr}
10015230:	1ccd      	adds	r5, r1, #3
10015232:	439d      	bics	r5, r3
10015234:	3508      	adds	r5, #8
10015236:	0006      	movs	r6, r0
10015238:	2d0c      	cmp	r5, #12
1001523a:	d201      	bcs.n	10015240 <_malloc_r+0x14>
1001523c:	250c      	movs	r5, #12
1001523e:	e005      	b.n	1001524c <_malloc_r+0x20>
10015240:	2d00      	cmp	r5, #0
10015242:	da03      	bge.n	1001524c <_malloc_r+0x20>
10015244:	230c      	movs	r3, #12
10015246:	2000      	movs	r0, #0
10015248:	6033      	str	r3, [r6, #0]
1001524a:	e040      	b.n	100152ce <_malloc_r+0xa2>
1001524c:	42a9      	cmp	r1, r5
1001524e:	d8f9      	bhi.n	10015244 <_malloc_r+0x18>
10015250:	4b1f      	ldr	r3, [pc, #124]	; (100152d0 <_malloc_r+0xa4>)
10015252:	681c      	ldr	r4, [r3, #0]
10015254:	001a      	movs	r2, r3
10015256:	0021      	movs	r1, r4
10015258:	2900      	cmp	r1, #0
1001525a:	d013      	beq.n	10015284 <_malloc_r+0x58>
1001525c:	680b      	ldr	r3, [r1, #0]
1001525e:	1b5b      	subs	r3, r3, r5
10015260:	d40d      	bmi.n	1001527e <_malloc_r+0x52>
10015262:	2b0b      	cmp	r3, #11
10015264:	d902      	bls.n	1001526c <_malloc_r+0x40>
10015266:	600b      	str	r3, [r1, #0]
10015268:	18cc      	adds	r4, r1, r3
1001526a:	e01e      	b.n	100152aa <_malloc_r+0x7e>
1001526c:	428c      	cmp	r4, r1
1001526e:	d102      	bne.n	10015276 <_malloc_r+0x4a>
10015270:	6863      	ldr	r3, [r4, #4]
10015272:	6013      	str	r3, [r2, #0]
10015274:	e01a      	b.n	100152ac <_malloc_r+0x80>
10015276:	684b      	ldr	r3, [r1, #4]
10015278:	6063      	str	r3, [r4, #4]
1001527a:	000c      	movs	r4, r1
1001527c:	e016      	b.n	100152ac <_malloc_r+0x80>
1001527e:	000c      	movs	r4, r1
10015280:	6849      	ldr	r1, [r1, #4]
10015282:	e7e9      	b.n	10015258 <_malloc_r+0x2c>
10015284:	4c13      	ldr	r4, [pc, #76]	; (100152d4 <_malloc_r+0xa8>)
10015286:	6823      	ldr	r3, [r4, #0]
10015288:	2b00      	cmp	r3, #0
1001528a:	d103      	bne.n	10015294 <_malloc_r+0x68>
1001528c:	0030      	movs	r0, r6
1001528e:	f000 f8f9 	bl	10015484 <_sbrk_r>
10015292:	6020      	str	r0, [r4, #0]
10015294:	0029      	movs	r1, r5
10015296:	0030      	movs	r0, r6
10015298:	f000 f8f4 	bl	10015484 <_sbrk_r>
1001529c:	1c43      	adds	r3, r0, #1
1001529e:	d0d1      	beq.n	10015244 <_malloc_r+0x18>
100152a0:	2303      	movs	r3, #3
100152a2:	1cc4      	adds	r4, r0, #3
100152a4:	439c      	bics	r4, r3
100152a6:	42a0      	cmp	r0, r4
100152a8:	d10a      	bne.n	100152c0 <_malloc_r+0x94>
100152aa:	6025      	str	r5, [r4, #0]
100152ac:	0020      	movs	r0, r4
100152ae:	2207      	movs	r2, #7
100152b0:	300b      	adds	r0, #11
100152b2:	1d23      	adds	r3, r4, #4
100152b4:	4390      	bics	r0, r2
100152b6:	1ac3      	subs	r3, r0, r3
100152b8:	d009      	beq.n	100152ce <_malloc_r+0xa2>
100152ba:	425a      	negs	r2, r3
100152bc:	50e2      	str	r2, [r4, r3]
100152be:	e006      	b.n	100152ce <_malloc_r+0xa2>
100152c0:	1a21      	subs	r1, r4, r0
100152c2:	0030      	movs	r0, r6
100152c4:	f000 f8de 	bl	10015484 <_sbrk_r>
100152c8:	1c43      	adds	r3, r0, #1
100152ca:	d1ee      	bne.n	100152aa <_malloc_r+0x7e>
100152cc:	e7ba      	b.n	10015244 <_malloc_r+0x18>
100152ce:	bd70      	pop	{r4, r5, r6, pc}
100152d0:	10019f5c 	.word	0x10019f5c
100152d4:	10019f58 	.word	0x10019f58

100152d8 <iprintf>:
100152d8:	b40f      	push	{r0, r1, r2, r3}
100152da:	4b0b      	ldr	r3, [pc, #44]	; (10015308 <iprintf+0x30>)
100152dc:	b513      	push	{r0, r1, r4, lr}
100152de:	681c      	ldr	r4, [r3, #0]
100152e0:	2c00      	cmp	r4, #0
100152e2:	d005      	beq.n	100152f0 <iprintf+0x18>
100152e4:	69a3      	ldr	r3, [r4, #24]
100152e6:	2b00      	cmp	r3, #0
100152e8:	d102      	bne.n	100152f0 <iprintf+0x18>
100152ea:	0020      	movs	r0, r4
100152ec:	f000 fb58 	bl	100159a0 <__sinit>
100152f0:	ab05      	add	r3, sp, #20
100152f2:	9a04      	ldr	r2, [sp, #16]
100152f4:	68a1      	ldr	r1, [r4, #8]
100152f6:	0020      	movs	r0, r4
100152f8:	9301      	str	r3, [sp, #4]
100152fa:	f000 fc71 	bl	10015be0 <_vfiprintf_r>
100152fe:	bc16      	pop	{r1, r2, r4}
10015300:	bc08      	pop	{r3}
10015302:	b004      	add	sp, #16
10015304:	4718      	bx	r3
10015306:	46c0      	nop			; (mov r8, r8)
10015308:	10018488 	.word	0x10018488

1001530c <putchar>:
1001530c:	4b08      	ldr	r3, [pc, #32]	; (10015330 <putchar+0x24>)
1001530e:	b570      	push	{r4, r5, r6, lr}
10015310:	681c      	ldr	r4, [r3, #0]
10015312:	0005      	movs	r5, r0
10015314:	2c00      	cmp	r4, #0
10015316:	d005      	beq.n	10015324 <putchar+0x18>
10015318:	69a3      	ldr	r3, [r4, #24]
1001531a:	2b00      	cmp	r3, #0
1001531c:	d102      	bne.n	10015324 <putchar+0x18>
1001531e:	0020      	movs	r0, r4
10015320:	f000 fb3e 	bl	100159a0 <__sinit>
10015324:	0029      	movs	r1, r5
10015326:	68a2      	ldr	r2, [r4, #8]
10015328:	0020      	movs	r0, r4
1001532a:	f000 ff05 	bl	10016138 <_putc_r>
1001532e:	bd70      	pop	{r4, r5, r6, pc}
10015330:	10018488 	.word	0x10018488

10015334 <_puts_r>:
10015334:	b570      	push	{r4, r5, r6, lr}
10015336:	0005      	movs	r5, r0
10015338:	000e      	movs	r6, r1
1001533a:	2800      	cmp	r0, #0
1001533c:	d004      	beq.n	10015348 <_puts_r+0x14>
1001533e:	6983      	ldr	r3, [r0, #24]
10015340:	2b00      	cmp	r3, #0
10015342:	d101      	bne.n	10015348 <_puts_r+0x14>
10015344:	f000 fb2c 	bl	100159a0 <__sinit>
10015348:	69ab      	ldr	r3, [r5, #24]
1001534a:	68ac      	ldr	r4, [r5, #8]
1001534c:	2b00      	cmp	r3, #0
1001534e:	d102      	bne.n	10015356 <_puts_r+0x22>
10015350:	0028      	movs	r0, r5
10015352:	f000 fb25 	bl	100159a0 <__sinit>
10015356:	4b25      	ldr	r3, [pc, #148]	; (100153ec <_puts_r+0xb8>)
10015358:	429c      	cmp	r4, r3
1001535a:	d101      	bne.n	10015360 <_puts_r+0x2c>
1001535c:	686c      	ldr	r4, [r5, #4]
1001535e:	e008      	b.n	10015372 <_puts_r+0x3e>
10015360:	4b23      	ldr	r3, [pc, #140]	; (100153f0 <_puts_r+0xbc>)
10015362:	429c      	cmp	r4, r3
10015364:	d101      	bne.n	1001536a <_puts_r+0x36>
10015366:	68ac      	ldr	r4, [r5, #8]
10015368:	e003      	b.n	10015372 <_puts_r+0x3e>
1001536a:	4b22      	ldr	r3, [pc, #136]	; (100153f4 <_puts_r+0xc0>)
1001536c:	429c      	cmp	r4, r3
1001536e:	d100      	bne.n	10015372 <_puts_r+0x3e>
10015370:	68ec      	ldr	r4, [r5, #12]
10015372:	89a3      	ldrh	r3, [r4, #12]
10015374:	071b      	lsls	r3, r3, #28
10015376:	d502      	bpl.n	1001537e <_puts_r+0x4a>
10015378:	6923      	ldr	r3, [r4, #16]
1001537a:	2b00      	cmp	r3, #0
1001537c:	d111      	bne.n	100153a2 <_puts_r+0x6e>
1001537e:	0021      	movs	r1, r4
10015380:	0028      	movs	r0, r5
10015382:	f000 f9a3 	bl	100156cc <__swsetup_r>
10015386:	2800      	cmp	r0, #0
10015388:	d00b      	beq.n	100153a2 <_puts_r+0x6e>
1001538a:	2001      	movs	r0, #1
1001538c:	4240      	negs	r0, r0
1001538e:	e02b      	b.n	100153e8 <_puts_r+0xb4>
10015390:	3b01      	subs	r3, #1
10015392:	3601      	adds	r6, #1
10015394:	60a3      	str	r3, [r4, #8]
10015396:	2b00      	cmp	r3, #0
10015398:	db08      	blt.n	100153ac <_puts_r+0x78>
1001539a:	6823      	ldr	r3, [r4, #0]
1001539c:	1c5a      	adds	r2, r3, #1
1001539e:	6022      	str	r2, [r4, #0]
100153a0:	7019      	strb	r1, [r3, #0]
100153a2:	7831      	ldrb	r1, [r6, #0]
100153a4:	68a3      	ldr	r3, [r4, #8]
100153a6:	2900      	cmp	r1, #0
100153a8:	d1f2      	bne.n	10015390 <_puts_r+0x5c>
100153aa:	e00b      	b.n	100153c4 <_puts_r+0x90>
100153ac:	69a2      	ldr	r2, [r4, #24]
100153ae:	4293      	cmp	r3, r2
100153b0:	db01      	blt.n	100153b6 <_puts_r+0x82>
100153b2:	290a      	cmp	r1, #10
100153b4:	d1f1      	bne.n	1001539a <_puts_r+0x66>
100153b6:	0022      	movs	r2, r4
100153b8:	0028      	movs	r0, r5
100153ba:	f000 f92f 	bl	1001561c <__swbuf_r>
100153be:	1c43      	adds	r3, r0, #1
100153c0:	d1ef      	bne.n	100153a2 <_puts_r+0x6e>
100153c2:	e7e2      	b.n	1001538a <_puts_r+0x56>
100153c4:	3b01      	subs	r3, #1
100153c6:	60a3      	str	r3, [r4, #8]
100153c8:	2b00      	cmp	r3, #0
100153ca:	da08      	bge.n	100153de <_puts_r+0xaa>
100153cc:	0022      	movs	r2, r4
100153ce:	310a      	adds	r1, #10
100153d0:	0028      	movs	r0, r5
100153d2:	f000 f923 	bl	1001561c <__swbuf_r>
100153d6:	1c43      	adds	r3, r0, #1
100153d8:	d0d7      	beq.n	1001538a <_puts_r+0x56>
100153da:	200a      	movs	r0, #10
100153dc:	e004      	b.n	100153e8 <_puts_r+0xb4>
100153de:	200a      	movs	r0, #10
100153e0:	6823      	ldr	r3, [r4, #0]
100153e2:	1c5a      	adds	r2, r3, #1
100153e4:	6022      	str	r2, [r4, #0]
100153e6:	7018      	strb	r0, [r3, #0]
100153e8:	bd70      	pop	{r4, r5, r6, pc}
100153ea:	46c0      	nop			; (mov r8, r8)
100153ec:	1001832c 	.word	0x1001832c
100153f0:	1001834c 	.word	0x1001834c
100153f4:	1001836c 	.word	0x1001836c

100153f8 <puts>:
100153f8:	b510      	push	{r4, lr}
100153fa:	4b03      	ldr	r3, [pc, #12]	; (10015408 <puts+0x10>)
100153fc:	0001      	movs	r1, r0
100153fe:	6818      	ldr	r0, [r3, #0]
10015400:	f7ff ff98 	bl	10015334 <_puts_r>
10015404:	bd10      	pop	{r4, pc}
10015406:	46c0      	nop			; (mov r8, r8)
10015408:	10018488 	.word	0x10018488

1001540c <rand>:
1001540c:	4b15      	ldr	r3, [pc, #84]	; (10015464 <rand+0x58>)
1001540e:	b510      	push	{r4, lr}
10015410:	681c      	ldr	r4, [r3, #0]
10015412:	6ba3      	ldr	r3, [r4, #56]	; 0x38
10015414:	2b00      	cmp	r3, #0
10015416:	d115      	bne.n	10015444 <rand+0x38>
10015418:	2018      	movs	r0, #24
1001541a:	f7ff fe97 	bl	1001514c <malloc>
1001541e:	4b12      	ldr	r3, [pc, #72]	; (10015468 <rand+0x5c>)
10015420:	63a0      	str	r0, [r4, #56]	; 0x38
10015422:	8003      	strh	r3, [r0, #0]
10015424:	4b11      	ldr	r3, [pc, #68]	; (1001546c <rand+0x60>)
10015426:	2201      	movs	r2, #1
10015428:	8043      	strh	r3, [r0, #2]
1001542a:	4b11      	ldr	r3, [pc, #68]	; (10015470 <rand+0x64>)
1001542c:	8083      	strh	r3, [r0, #4]
1001542e:	4b11      	ldr	r3, [pc, #68]	; (10015474 <rand+0x68>)
10015430:	80c3      	strh	r3, [r0, #6]
10015432:	4b11      	ldr	r3, [pc, #68]	; (10015478 <rand+0x6c>)
10015434:	8103      	strh	r3, [r0, #8]
10015436:	2305      	movs	r3, #5
10015438:	8143      	strh	r3, [r0, #10]
1001543a:	3306      	adds	r3, #6
1001543c:	8183      	strh	r3, [r0, #12]
1001543e:	2300      	movs	r3, #0
10015440:	6102      	str	r2, [r0, #16]
10015442:	6143      	str	r3, [r0, #20]
10015444:	6ba4      	ldr	r4, [r4, #56]	; 0x38
10015446:	4a0d      	ldr	r2, [pc, #52]	; (1001547c <rand+0x70>)
10015448:	6920      	ldr	r0, [r4, #16]
1001544a:	6961      	ldr	r1, [r4, #20]
1001544c:	4b0c      	ldr	r3, [pc, #48]	; (10015480 <rand+0x74>)
1001544e:	f7fe f80b 	bl	10013468 <__aeabi_lmul>
10015452:	2201      	movs	r2, #1
10015454:	2300      	movs	r3, #0
10015456:	1880      	adds	r0, r0, r2
10015458:	4159      	adcs	r1, r3
1001545a:	6120      	str	r0, [r4, #16]
1001545c:	6161      	str	r1, [r4, #20]
1001545e:	0048      	lsls	r0, r1, #1
10015460:	0840      	lsrs	r0, r0, #1
10015462:	bd10      	pop	{r4, pc}
10015464:	10018488 	.word	0x10018488
10015468:	0000330e 	.word	0x0000330e
1001546c:	ffffabcd 	.word	0xffffabcd
10015470:	00001234 	.word	0x00001234
10015474:	ffffe66d 	.word	0xffffe66d
10015478:	ffffdeec 	.word	0xffffdeec
1001547c:	4c957f2d 	.word	0x4c957f2d
10015480:	5851f42d 	.word	0x5851f42d

10015484 <_sbrk_r>:
10015484:	2300      	movs	r3, #0
10015486:	b570      	push	{r4, r5, r6, lr}
10015488:	4c06      	ldr	r4, [pc, #24]	; (100154a4 <_sbrk_r+0x20>)
1001548a:	0005      	movs	r5, r0
1001548c:	0008      	movs	r0, r1
1001548e:	6023      	str	r3, [r4, #0]
10015490:	f7f8 f9c6 	bl	1000d820 <_sbrk>
10015494:	1c43      	adds	r3, r0, #1
10015496:	d103      	bne.n	100154a0 <_sbrk_r+0x1c>
10015498:	6823      	ldr	r3, [r4, #0]
1001549a:	2b00      	cmp	r3, #0
1001549c:	d000      	beq.n	100154a0 <_sbrk_r+0x1c>
1001549e:	602b      	str	r3, [r5, #0]
100154a0:	bd70      	pop	{r4, r5, r6, pc}
100154a2:	46c0      	nop			; (mov r8, r8)
100154a4:	1001b32c 	.word	0x1001b32c

100154a8 <setbuf>:
100154a8:	424a      	negs	r2, r1
100154aa:	414a      	adcs	r2, r1
100154ac:	2380      	movs	r3, #128	; 0x80
100154ae:	b510      	push	{r4, lr}
100154b0:	0052      	lsls	r2, r2, #1
100154b2:	00db      	lsls	r3, r3, #3
100154b4:	f000 f802 	bl	100154bc <setvbuf>
100154b8:	bd10      	pop	{r4, pc}
	...

100154bc <setvbuf>:
100154bc:	b5f0      	push	{r4, r5, r6, r7, lr}
100154be:	001d      	movs	r5, r3
100154c0:	4b51      	ldr	r3, [pc, #324]	; (10015608 <setvbuf+0x14c>)
100154c2:	b085      	sub	sp, #20
100154c4:	681e      	ldr	r6, [r3, #0]
100154c6:	0004      	movs	r4, r0
100154c8:	000f      	movs	r7, r1
100154ca:	9200      	str	r2, [sp, #0]
100154cc:	2e00      	cmp	r6, #0
100154ce:	d005      	beq.n	100154dc <setvbuf+0x20>
100154d0:	69b3      	ldr	r3, [r6, #24]
100154d2:	2b00      	cmp	r3, #0
100154d4:	d102      	bne.n	100154dc <setvbuf+0x20>
100154d6:	0030      	movs	r0, r6
100154d8:	f000 fa62 	bl	100159a0 <__sinit>
100154dc:	4b4b      	ldr	r3, [pc, #300]	; (1001560c <setvbuf+0x150>)
100154de:	429c      	cmp	r4, r3
100154e0:	d101      	bne.n	100154e6 <setvbuf+0x2a>
100154e2:	6874      	ldr	r4, [r6, #4]
100154e4:	e008      	b.n	100154f8 <setvbuf+0x3c>
100154e6:	4b4a      	ldr	r3, [pc, #296]	; (10015610 <setvbuf+0x154>)
100154e8:	429c      	cmp	r4, r3
100154ea:	d101      	bne.n	100154f0 <setvbuf+0x34>
100154ec:	68b4      	ldr	r4, [r6, #8]
100154ee:	e003      	b.n	100154f8 <setvbuf+0x3c>
100154f0:	4b48      	ldr	r3, [pc, #288]	; (10015614 <setvbuf+0x158>)
100154f2:	429c      	cmp	r4, r3
100154f4:	d100      	bne.n	100154f8 <setvbuf+0x3c>
100154f6:	68f4      	ldr	r4, [r6, #12]
100154f8:	9b00      	ldr	r3, [sp, #0]
100154fa:	2b02      	cmp	r3, #2
100154fc:	d005      	beq.n	1001550a <setvbuf+0x4e>
100154fe:	2b01      	cmp	r3, #1
10015500:	d900      	bls.n	10015504 <setvbuf+0x48>
10015502:	e07c      	b.n	100155fe <setvbuf+0x142>
10015504:	2d00      	cmp	r5, #0
10015506:	da00      	bge.n	1001550a <setvbuf+0x4e>
10015508:	e079      	b.n	100155fe <setvbuf+0x142>
1001550a:	0021      	movs	r1, r4
1001550c:	0030      	movs	r0, r6
1001550e:	f000 f9d9 	bl	100158c4 <_fflush_r>
10015512:	6b61      	ldr	r1, [r4, #52]	; 0x34
10015514:	2900      	cmp	r1, #0
10015516:	d008      	beq.n	1001552a <setvbuf+0x6e>
10015518:	0023      	movs	r3, r4
1001551a:	3344      	adds	r3, #68	; 0x44
1001551c:	4299      	cmp	r1, r3
1001551e:	d002      	beq.n	10015526 <setvbuf+0x6a>
10015520:	0030      	movs	r0, r6
10015522:	f7ff fe3d 	bl	100151a0 <_free_r>
10015526:	2300      	movs	r3, #0
10015528:	6363      	str	r3, [r4, #52]	; 0x34
1001552a:	2300      	movs	r3, #0
1001552c:	61a3      	str	r3, [r4, #24]
1001552e:	6063      	str	r3, [r4, #4]
10015530:	89a3      	ldrh	r3, [r4, #12]
10015532:	061b      	lsls	r3, r3, #24
10015534:	d503      	bpl.n	1001553e <setvbuf+0x82>
10015536:	6921      	ldr	r1, [r4, #16]
10015538:	0030      	movs	r0, r6
1001553a:	f7ff fe31 	bl	100151a0 <_free_r>
1001553e:	89a2      	ldrh	r2, [r4, #12]
10015540:	4b35      	ldr	r3, [pc, #212]	; (10015618 <setvbuf+0x15c>)
10015542:	4013      	ands	r3, r2
10015544:	81a3      	strh	r3, [r4, #12]
10015546:	9b00      	ldr	r3, [sp, #0]
10015548:	2b02      	cmp	r3, #2
1001554a:	d021      	beq.n	10015590 <setvbuf+0xd4>
1001554c:	ab03      	add	r3, sp, #12
1001554e:	aa02      	add	r2, sp, #8
10015550:	0021      	movs	r1, r4
10015552:	0030      	movs	r0, r6
10015554:	f000 fab8 	bl	10015ac8 <__swhatbuf_r>
10015558:	89a3      	ldrh	r3, [r4, #12]
1001555a:	4318      	orrs	r0, r3
1001555c:	81a0      	strh	r0, [r4, #12]
1001555e:	2d00      	cmp	r5, #0
10015560:	d101      	bne.n	10015566 <setvbuf+0xaa>
10015562:	9d02      	ldr	r5, [sp, #8]
10015564:	e001      	b.n	1001556a <setvbuf+0xae>
10015566:	2f00      	cmp	r7, #0
10015568:	d125      	bne.n	100155b6 <setvbuf+0xfa>
1001556a:	0028      	movs	r0, r5
1001556c:	f7ff fdee 	bl	1001514c <malloc>
10015570:	9501      	str	r5, [sp, #4]
10015572:	1e07      	subs	r7, r0, #0
10015574:	d11a      	bne.n	100155ac <setvbuf+0xf0>
10015576:	9b02      	ldr	r3, [sp, #8]
10015578:	9301      	str	r3, [sp, #4]
1001557a:	42ab      	cmp	r3, r5
1001557c:	d102      	bne.n	10015584 <setvbuf+0xc8>
1001557e:	2001      	movs	r0, #1
10015580:	4240      	negs	r0, r0
10015582:	e006      	b.n	10015592 <setvbuf+0xd6>
10015584:	9801      	ldr	r0, [sp, #4]
10015586:	f7ff fde1 	bl	1001514c <malloc>
1001558a:	1e07      	subs	r7, r0, #0
1001558c:	d10e      	bne.n	100155ac <setvbuf+0xf0>
1001558e:	e7f6      	b.n	1001557e <setvbuf+0xc2>
10015590:	2000      	movs	r0, #0
10015592:	2202      	movs	r2, #2
10015594:	89a3      	ldrh	r3, [r4, #12]
10015596:	4313      	orrs	r3, r2
10015598:	81a3      	strh	r3, [r4, #12]
1001559a:	2300      	movs	r3, #0
1001559c:	60a3      	str	r3, [r4, #8]
1001559e:	0023      	movs	r3, r4
100155a0:	3347      	adds	r3, #71	; 0x47
100155a2:	6023      	str	r3, [r4, #0]
100155a4:	6123      	str	r3, [r4, #16]
100155a6:	2301      	movs	r3, #1
100155a8:	6163      	str	r3, [r4, #20]
100155aa:	e02a      	b.n	10015602 <setvbuf+0x146>
100155ac:	2280      	movs	r2, #128	; 0x80
100155ae:	89a3      	ldrh	r3, [r4, #12]
100155b0:	9d01      	ldr	r5, [sp, #4]
100155b2:	4313      	orrs	r3, r2
100155b4:	81a3      	strh	r3, [r4, #12]
100155b6:	69b3      	ldr	r3, [r6, #24]
100155b8:	2b00      	cmp	r3, #0
100155ba:	d102      	bne.n	100155c2 <setvbuf+0x106>
100155bc:	0030      	movs	r0, r6
100155be:	f000 f9ef 	bl	100159a0 <__sinit>
100155c2:	9b00      	ldr	r3, [sp, #0]
100155c4:	2b01      	cmp	r3, #1
100155c6:	d103      	bne.n	100155d0 <setvbuf+0x114>
100155c8:	89a3      	ldrh	r3, [r4, #12]
100155ca:	9a00      	ldr	r2, [sp, #0]
100155cc:	431a      	orrs	r2, r3
100155ce:	81a2      	strh	r2, [r4, #12]
100155d0:	2308      	movs	r3, #8
100155d2:	89a2      	ldrh	r2, [r4, #12]
100155d4:	6027      	str	r7, [r4, #0]
100155d6:	4013      	ands	r3, r2
100155d8:	6127      	str	r7, [r4, #16]
100155da:	6165      	str	r5, [r4, #20]
100155dc:	1e18      	subs	r0, r3, #0
100155de:	d00c      	beq.n	100155fa <setvbuf+0x13e>
100155e0:	2301      	movs	r3, #1
100155e2:	401a      	ands	r2, r3
100155e4:	2300      	movs	r3, #0
100155e6:	1e10      	subs	r0, r2, #0
100155e8:	4298      	cmp	r0, r3
100155ea:	d004      	beq.n	100155f6 <setvbuf+0x13a>
100155ec:	426d      	negs	r5, r5
100155ee:	60a3      	str	r3, [r4, #8]
100155f0:	61a5      	str	r5, [r4, #24]
100155f2:	0018      	movs	r0, r3
100155f4:	e005      	b.n	10015602 <setvbuf+0x146>
100155f6:	60a5      	str	r5, [r4, #8]
100155f8:	e003      	b.n	10015602 <setvbuf+0x146>
100155fa:	60a3      	str	r3, [r4, #8]
100155fc:	e001      	b.n	10015602 <setvbuf+0x146>
100155fe:	2001      	movs	r0, #1
10015600:	4240      	negs	r0, r0
10015602:	b005      	add	sp, #20
10015604:	bdf0      	pop	{r4, r5, r6, r7, pc}
10015606:	46c0      	nop			; (mov r8, r8)
10015608:	10018488 	.word	0x10018488
1001560c:	1001832c 	.word	0x1001832c
10015610:	1001834c 	.word	0x1001834c
10015614:	1001836c 	.word	0x1001836c
10015618:	fffff35c 	.word	0xfffff35c

1001561c <__swbuf_r>:
1001561c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1001561e:	0005      	movs	r5, r0
10015620:	000f      	movs	r7, r1
10015622:	0014      	movs	r4, r2
10015624:	2800      	cmp	r0, #0
10015626:	d004      	beq.n	10015632 <__swbuf_r+0x16>
10015628:	6983      	ldr	r3, [r0, #24]
1001562a:	2b00      	cmp	r3, #0
1001562c:	d101      	bne.n	10015632 <__swbuf_r+0x16>
1001562e:	f000 f9b7 	bl	100159a0 <__sinit>
10015632:	4b23      	ldr	r3, [pc, #140]	; (100156c0 <__swbuf_r+0xa4>)
10015634:	429c      	cmp	r4, r3
10015636:	d101      	bne.n	1001563c <__swbuf_r+0x20>
10015638:	686c      	ldr	r4, [r5, #4]
1001563a:	e008      	b.n	1001564e <__swbuf_r+0x32>
1001563c:	4b21      	ldr	r3, [pc, #132]	; (100156c4 <__swbuf_r+0xa8>)
1001563e:	429c      	cmp	r4, r3
10015640:	d101      	bne.n	10015646 <__swbuf_r+0x2a>
10015642:	68ac      	ldr	r4, [r5, #8]
10015644:	e003      	b.n	1001564e <__swbuf_r+0x32>
10015646:	4b20      	ldr	r3, [pc, #128]	; (100156c8 <__swbuf_r+0xac>)
10015648:	429c      	cmp	r4, r3
1001564a:	d100      	bne.n	1001564e <__swbuf_r+0x32>
1001564c:	68ec      	ldr	r4, [r5, #12]
1001564e:	69a3      	ldr	r3, [r4, #24]
10015650:	60a3      	str	r3, [r4, #8]
10015652:	89a3      	ldrh	r3, [r4, #12]
10015654:	071b      	lsls	r3, r3, #28
10015656:	d50a      	bpl.n	1001566e <__swbuf_r+0x52>
10015658:	6923      	ldr	r3, [r4, #16]
1001565a:	2b00      	cmp	r3, #0
1001565c:	d007      	beq.n	1001566e <__swbuf_r+0x52>
1001565e:	6823      	ldr	r3, [r4, #0]
10015660:	6922      	ldr	r2, [r4, #16]
10015662:	b2fe      	uxtb	r6, r7
10015664:	1a98      	subs	r0, r3, r2
10015666:	6963      	ldr	r3, [r4, #20]
10015668:	4298      	cmp	r0, r3
1001566a:	db0f      	blt.n	1001568c <__swbuf_r+0x70>
1001566c:	e008      	b.n	10015680 <__swbuf_r+0x64>
1001566e:	0021      	movs	r1, r4
10015670:	0028      	movs	r0, r5
10015672:	f000 f82b 	bl	100156cc <__swsetup_r>
10015676:	2800      	cmp	r0, #0
10015678:	d0f1      	beq.n	1001565e <__swbuf_r+0x42>
1001567a:	2001      	movs	r0, #1
1001567c:	4240      	negs	r0, r0
1001567e:	e01d      	b.n	100156bc <__swbuf_r+0xa0>
10015680:	0021      	movs	r1, r4
10015682:	0028      	movs	r0, r5
10015684:	f000 f91e 	bl	100158c4 <_fflush_r>
10015688:	2800      	cmp	r0, #0
1001568a:	d1f6      	bne.n	1001567a <__swbuf_r+0x5e>
1001568c:	68a3      	ldr	r3, [r4, #8]
1001568e:	3001      	adds	r0, #1
10015690:	3b01      	subs	r3, #1
10015692:	60a3      	str	r3, [r4, #8]
10015694:	6823      	ldr	r3, [r4, #0]
10015696:	1c5a      	adds	r2, r3, #1
10015698:	6022      	str	r2, [r4, #0]
1001569a:	701f      	strb	r7, [r3, #0]
1001569c:	6963      	ldr	r3, [r4, #20]
1001569e:	4298      	cmp	r0, r3
100156a0:	d005      	beq.n	100156ae <__swbuf_r+0x92>
100156a2:	89a3      	ldrh	r3, [r4, #12]
100156a4:	0030      	movs	r0, r6
100156a6:	07db      	lsls	r3, r3, #31
100156a8:	d508      	bpl.n	100156bc <__swbuf_r+0xa0>
100156aa:	2e0a      	cmp	r6, #10
100156ac:	d106      	bne.n	100156bc <__swbuf_r+0xa0>
100156ae:	0021      	movs	r1, r4
100156b0:	0028      	movs	r0, r5
100156b2:	f000 f907 	bl	100158c4 <_fflush_r>
100156b6:	2800      	cmp	r0, #0
100156b8:	d1df      	bne.n	1001567a <__swbuf_r+0x5e>
100156ba:	0030      	movs	r0, r6
100156bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100156be:	46c0      	nop			; (mov r8, r8)
100156c0:	1001832c 	.word	0x1001832c
100156c4:	1001834c 	.word	0x1001834c
100156c8:	1001836c 	.word	0x1001836c

100156cc <__swsetup_r>:
100156cc:	4b36      	ldr	r3, [pc, #216]	; (100157a8 <__swsetup_r+0xdc>)
100156ce:	b570      	push	{r4, r5, r6, lr}
100156d0:	681d      	ldr	r5, [r3, #0]
100156d2:	0006      	movs	r6, r0
100156d4:	000c      	movs	r4, r1
100156d6:	2d00      	cmp	r5, #0
100156d8:	d005      	beq.n	100156e6 <__swsetup_r+0x1a>
100156da:	69ab      	ldr	r3, [r5, #24]
100156dc:	2b00      	cmp	r3, #0
100156de:	d102      	bne.n	100156e6 <__swsetup_r+0x1a>
100156e0:	0028      	movs	r0, r5
100156e2:	f000 f95d 	bl	100159a0 <__sinit>
100156e6:	4b31      	ldr	r3, [pc, #196]	; (100157ac <__swsetup_r+0xe0>)
100156e8:	429c      	cmp	r4, r3
100156ea:	d101      	bne.n	100156f0 <__swsetup_r+0x24>
100156ec:	686c      	ldr	r4, [r5, #4]
100156ee:	e008      	b.n	10015702 <__swsetup_r+0x36>
100156f0:	4b2f      	ldr	r3, [pc, #188]	; (100157b0 <__swsetup_r+0xe4>)
100156f2:	429c      	cmp	r4, r3
100156f4:	d101      	bne.n	100156fa <__swsetup_r+0x2e>
100156f6:	68ac      	ldr	r4, [r5, #8]
100156f8:	e003      	b.n	10015702 <__swsetup_r+0x36>
100156fa:	4b2e      	ldr	r3, [pc, #184]	; (100157b4 <__swsetup_r+0xe8>)
100156fc:	429c      	cmp	r4, r3
100156fe:	d100      	bne.n	10015702 <__swsetup_r+0x36>
10015700:	68ec      	ldr	r4, [r5, #12]
10015702:	220c      	movs	r2, #12
10015704:	5ea3      	ldrsh	r3, [r4, r2]
10015706:	b29a      	uxth	r2, r3
10015708:	0711      	lsls	r1, r2, #28
1001570a:	d423      	bmi.n	10015754 <__swsetup_r+0x88>
1001570c:	06d1      	lsls	r1, r2, #27
1001570e:	d407      	bmi.n	10015720 <__swsetup_r+0x54>
10015710:	2209      	movs	r2, #9
10015712:	2001      	movs	r0, #1
10015714:	6032      	str	r2, [r6, #0]
10015716:	3237      	adds	r2, #55	; 0x37
10015718:	4313      	orrs	r3, r2
1001571a:	81a3      	strh	r3, [r4, #12]
1001571c:	4240      	negs	r0, r0
1001571e:	e042      	b.n	100157a6 <__swsetup_r+0xda>
10015720:	0753      	lsls	r3, r2, #29
10015722:	d513      	bpl.n	1001574c <__swsetup_r+0x80>
10015724:	6b61      	ldr	r1, [r4, #52]	; 0x34
10015726:	2900      	cmp	r1, #0
10015728:	d008      	beq.n	1001573c <__swsetup_r+0x70>
1001572a:	0023      	movs	r3, r4
1001572c:	3344      	adds	r3, #68	; 0x44
1001572e:	4299      	cmp	r1, r3
10015730:	d002      	beq.n	10015738 <__swsetup_r+0x6c>
10015732:	0030      	movs	r0, r6
10015734:	f7ff fd34 	bl	100151a0 <_free_r>
10015738:	2300      	movs	r3, #0
1001573a:	6363      	str	r3, [r4, #52]	; 0x34
1001573c:	2224      	movs	r2, #36	; 0x24
1001573e:	89a3      	ldrh	r3, [r4, #12]
10015740:	4393      	bics	r3, r2
10015742:	81a3      	strh	r3, [r4, #12]
10015744:	2300      	movs	r3, #0
10015746:	6063      	str	r3, [r4, #4]
10015748:	6923      	ldr	r3, [r4, #16]
1001574a:	6023      	str	r3, [r4, #0]
1001574c:	2208      	movs	r2, #8
1001574e:	89a3      	ldrh	r3, [r4, #12]
10015750:	4313      	orrs	r3, r2
10015752:	81a3      	strh	r3, [r4, #12]
10015754:	6923      	ldr	r3, [r4, #16]
10015756:	2b00      	cmp	r3, #0
10015758:	d10b      	bne.n	10015772 <__swsetup_r+0xa6>
1001575a:	23a0      	movs	r3, #160	; 0xa0
1001575c:	89a2      	ldrh	r2, [r4, #12]
1001575e:	009b      	lsls	r3, r3, #2
10015760:	4013      	ands	r3, r2
10015762:	2280      	movs	r2, #128	; 0x80
10015764:	0092      	lsls	r2, r2, #2
10015766:	4293      	cmp	r3, r2
10015768:	d003      	beq.n	10015772 <__swsetup_r+0xa6>
1001576a:	0021      	movs	r1, r4
1001576c:	0030      	movs	r0, r6
1001576e:	f000 f9d1 	bl	10015b14 <__smakebuf_r>
10015772:	2301      	movs	r3, #1
10015774:	89a2      	ldrh	r2, [r4, #12]
10015776:	4013      	ands	r3, r2
10015778:	d005      	beq.n	10015786 <__swsetup_r+0xba>
1001577a:	2300      	movs	r3, #0
1001577c:	60a3      	str	r3, [r4, #8]
1001577e:	6963      	ldr	r3, [r4, #20]
10015780:	425b      	negs	r3, r3
10015782:	61a3      	str	r3, [r4, #24]
10015784:	e003      	b.n	1001578e <__swsetup_r+0xc2>
10015786:	0792      	lsls	r2, r2, #30
10015788:	d400      	bmi.n	1001578c <__swsetup_r+0xc0>
1001578a:	6963      	ldr	r3, [r4, #20]
1001578c:	60a3      	str	r3, [r4, #8]
1001578e:	2000      	movs	r0, #0
10015790:	6923      	ldr	r3, [r4, #16]
10015792:	4283      	cmp	r3, r0
10015794:	d107      	bne.n	100157a6 <__swsetup_r+0xda>
10015796:	220c      	movs	r2, #12
10015798:	5ea3      	ldrsh	r3, [r4, r2]
1001579a:	061a      	lsls	r2, r3, #24
1001579c:	d503      	bpl.n	100157a6 <__swsetup_r+0xda>
1001579e:	2240      	movs	r2, #64	; 0x40
100157a0:	4313      	orrs	r3, r2
100157a2:	81a3      	strh	r3, [r4, #12]
100157a4:	3801      	subs	r0, #1
100157a6:	bd70      	pop	{r4, r5, r6, pc}
100157a8:	10018488 	.word	0x10018488
100157ac:	1001832c 	.word	0x1001832c
100157b0:	1001834c 	.word	0x1001834c
100157b4:	1001836c 	.word	0x1001836c

100157b8 <__sflush_r>:
100157b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
100157ba:	898a      	ldrh	r2, [r1, #12]
100157bc:	0005      	movs	r5, r0
100157be:	000c      	movs	r4, r1
100157c0:	0713      	lsls	r3, r2, #28
100157c2:	d45a      	bmi.n	1001587a <__sflush_r+0xc2>
100157c4:	684b      	ldr	r3, [r1, #4]
100157c6:	2b00      	cmp	r3, #0
100157c8:	dc02      	bgt.n	100157d0 <__sflush_r+0x18>
100157ca:	6c0b      	ldr	r3, [r1, #64]	; 0x40
100157cc:	2b00      	cmp	r3, #0
100157ce:	dd19      	ble.n	10015804 <__sflush_r+0x4c>
100157d0:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
100157d2:	2f00      	cmp	r7, #0
100157d4:	d016      	beq.n	10015804 <__sflush_r+0x4c>
100157d6:	2300      	movs	r3, #0
100157d8:	682e      	ldr	r6, [r5, #0]
100157da:	602b      	str	r3, [r5, #0]
100157dc:	2380      	movs	r3, #128	; 0x80
100157de:	015b      	lsls	r3, r3, #5
100157e0:	401a      	ands	r2, r3
100157e2:	d001      	beq.n	100157e8 <__sflush_r+0x30>
100157e4:	6d60      	ldr	r0, [r4, #84]	; 0x54
100157e6:	e014      	b.n	10015812 <__sflush_r+0x5a>
100157e8:	2301      	movs	r3, #1
100157ea:	6a21      	ldr	r1, [r4, #32]
100157ec:	0028      	movs	r0, r5
100157ee:	47b8      	blx	r7
100157f0:	1c43      	adds	r3, r0, #1
100157f2:	d10e      	bne.n	10015812 <__sflush_r+0x5a>
100157f4:	682b      	ldr	r3, [r5, #0]
100157f6:	2b00      	cmp	r3, #0
100157f8:	d00b      	beq.n	10015812 <__sflush_r+0x5a>
100157fa:	2b1d      	cmp	r3, #29
100157fc:	d001      	beq.n	10015802 <__sflush_r+0x4a>
100157fe:	2b16      	cmp	r3, #22
10015800:	d102      	bne.n	10015808 <__sflush_r+0x50>
10015802:	602e      	str	r6, [r5, #0]
10015804:	2000      	movs	r0, #0
10015806:	e05a      	b.n	100158be <__sflush_r+0x106>
10015808:	2240      	movs	r2, #64	; 0x40
1001580a:	89a3      	ldrh	r3, [r4, #12]
1001580c:	4313      	orrs	r3, r2
1001580e:	81a3      	strh	r3, [r4, #12]
10015810:	e055      	b.n	100158be <__sflush_r+0x106>
10015812:	89a3      	ldrh	r3, [r4, #12]
10015814:	075b      	lsls	r3, r3, #29
10015816:	d506      	bpl.n	10015826 <__sflush_r+0x6e>
10015818:	6863      	ldr	r3, [r4, #4]
1001581a:	1ac0      	subs	r0, r0, r3
1001581c:	6b63      	ldr	r3, [r4, #52]	; 0x34
1001581e:	2b00      	cmp	r3, #0
10015820:	d001      	beq.n	10015826 <__sflush_r+0x6e>
10015822:	6c23      	ldr	r3, [r4, #64]	; 0x40
10015824:	1ac0      	subs	r0, r0, r3
10015826:	2300      	movs	r3, #0
10015828:	0002      	movs	r2, r0
1001582a:	6a21      	ldr	r1, [r4, #32]
1001582c:	0028      	movs	r0, r5
1001582e:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
10015830:	47b8      	blx	r7
10015832:	89a3      	ldrh	r3, [r4, #12]
10015834:	1c42      	adds	r2, r0, #1
10015836:	d106      	bne.n	10015846 <__sflush_r+0x8e>
10015838:	6829      	ldr	r1, [r5, #0]
1001583a:	291d      	cmp	r1, #29
1001583c:	d83a      	bhi.n	100158b4 <__sflush_r+0xfc>
1001583e:	4a20      	ldr	r2, [pc, #128]	; (100158c0 <__sflush_r+0x108>)
10015840:	40ca      	lsrs	r2, r1
10015842:	07d2      	lsls	r2, r2, #31
10015844:	d536      	bpl.n	100158b4 <__sflush_r+0xfc>
10015846:	2200      	movs	r2, #0
10015848:	6062      	str	r2, [r4, #4]
1001584a:	6922      	ldr	r2, [r4, #16]
1001584c:	6022      	str	r2, [r4, #0]
1001584e:	04db      	lsls	r3, r3, #19
10015850:	d505      	bpl.n	1001585e <__sflush_r+0xa6>
10015852:	1c43      	adds	r3, r0, #1
10015854:	d102      	bne.n	1001585c <__sflush_r+0xa4>
10015856:	682b      	ldr	r3, [r5, #0]
10015858:	2b00      	cmp	r3, #0
1001585a:	d100      	bne.n	1001585e <__sflush_r+0xa6>
1001585c:	6560      	str	r0, [r4, #84]	; 0x54
1001585e:	6b61      	ldr	r1, [r4, #52]	; 0x34
10015860:	602e      	str	r6, [r5, #0]
10015862:	2900      	cmp	r1, #0
10015864:	d0ce      	beq.n	10015804 <__sflush_r+0x4c>
10015866:	0023      	movs	r3, r4
10015868:	3344      	adds	r3, #68	; 0x44
1001586a:	4299      	cmp	r1, r3
1001586c:	d002      	beq.n	10015874 <__sflush_r+0xbc>
1001586e:	0028      	movs	r0, r5
10015870:	f7ff fc96 	bl	100151a0 <_free_r>
10015874:	2000      	movs	r0, #0
10015876:	6360      	str	r0, [r4, #52]	; 0x34
10015878:	e021      	b.n	100158be <__sflush_r+0x106>
1001587a:	690f      	ldr	r7, [r1, #16]
1001587c:	2f00      	cmp	r7, #0
1001587e:	d0c1      	beq.n	10015804 <__sflush_r+0x4c>
10015880:	680b      	ldr	r3, [r1, #0]
10015882:	600f      	str	r7, [r1, #0]
10015884:	1bdb      	subs	r3, r3, r7
10015886:	9301      	str	r3, [sp, #4]
10015888:	2300      	movs	r3, #0
1001588a:	0792      	lsls	r2, r2, #30
1001588c:	d100      	bne.n	10015890 <__sflush_r+0xd8>
1001588e:	694b      	ldr	r3, [r1, #20]
10015890:	60a3      	str	r3, [r4, #8]
10015892:	e003      	b.n	1001589c <__sflush_r+0xe4>
10015894:	9b01      	ldr	r3, [sp, #4]
10015896:	183f      	adds	r7, r7, r0
10015898:	1a1b      	subs	r3, r3, r0
1001589a:	9301      	str	r3, [sp, #4]
1001589c:	9b01      	ldr	r3, [sp, #4]
1001589e:	2b00      	cmp	r3, #0
100158a0:	ddb0      	ble.n	10015804 <__sflush_r+0x4c>
100158a2:	9b01      	ldr	r3, [sp, #4]
100158a4:	003a      	movs	r2, r7
100158a6:	6a21      	ldr	r1, [r4, #32]
100158a8:	0028      	movs	r0, r5
100158aa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
100158ac:	47b0      	blx	r6
100158ae:	2800      	cmp	r0, #0
100158b0:	dcf0      	bgt.n	10015894 <__sflush_r+0xdc>
100158b2:	89a3      	ldrh	r3, [r4, #12]
100158b4:	2240      	movs	r2, #64	; 0x40
100158b6:	2001      	movs	r0, #1
100158b8:	4313      	orrs	r3, r2
100158ba:	81a3      	strh	r3, [r4, #12]
100158bc:	4240      	negs	r0, r0
100158be:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
100158c0:	20400001 	.word	0x20400001

100158c4 <_fflush_r>:
100158c4:	690b      	ldr	r3, [r1, #16]
100158c6:	b570      	push	{r4, r5, r6, lr}
100158c8:	0005      	movs	r5, r0
100158ca:	000c      	movs	r4, r1
100158cc:	2b00      	cmp	r3, #0
100158ce:	d101      	bne.n	100158d4 <_fflush_r+0x10>
100158d0:	2000      	movs	r0, #0
100158d2:	e01c      	b.n	1001590e <_fflush_r+0x4a>
100158d4:	2800      	cmp	r0, #0
100158d6:	d004      	beq.n	100158e2 <_fflush_r+0x1e>
100158d8:	6983      	ldr	r3, [r0, #24]
100158da:	2b00      	cmp	r3, #0
100158dc:	d101      	bne.n	100158e2 <_fflush_r+0x1e>
100158de:	f000 f85f 	bl	100159a0 <__sinit>
100158e2:	4b0b      	ldr	r3, [pc, #44]	; (10015910 <_fflush_r+0x4c>)
100158e4:	429c      	cmp	r4, r3
100158e6:	d101      	bne.n	100158ec <_fflush_r+0x28>
100158e8:	686c      	ldr	r4, [r5, #4]
100158ea:	e008      	b.n	100158fe <_fflush_r+0x3a>
100158ec:	4b09      	ldr	r3, [pc, #36]	; (10015914 <_fflush_r+0x50>)
100158ee:	429c      	cmp	r4, r3
100158f0:	d101      	bne.n	100158f6 <_fflush_r+0x32>
100158f2:	68ac      	ldr	r4, [r5, #8]
100158f4:	e003      	b.n	100158fe <_fflush_r+0x3a>
100158f6:	4b08      	ldr	r3, [pc, #32]	; (10015918 <_fflush_r+0x54>)
100158f8:	429c      	cmp	r4, r3
100158fa:	d100      	bne.n	100158fe <_fflush_r+0x3a>
100158fc:	68ec      	ldr	r4, [r5, #12]
100158fe:	220c      	movs	r2, #12
10015900:	5ea3      	ldrsh	r3, [r4, r2]
10015902:	2b00      	cmp	r3, #0
10015904:	d0e4      	beq.n	100158d0 <_fflush_r+0xc>
10015906:	0021      	movs	r1, r4
10015908:	0028      	movs	r0, r5
1001590a:	f7ff ff55 	bl	100157b8 <__sflush_r>
1001590e:	bd70      	pop	{r4, r5, r6, pc}
10015910:	1001832c 	.word	0x1001832c
10015914:	1001834c 	.word	0x1001834c
10015918:	1001836c 	.word	0x1001836c

1001591c <_cleanup_r>:
1001591c:	b510      	push	{r4, lr}
1001591e:	4902      	ldr	r1, [pc, #8]	; (10015928 <_cleanup_r+0xc>)
10015920:	f000 f8b0 	bl	10015a84 <_fwalk_reent>
10015924:	bd10      	pop	{r4, pc}
10015926:	46c0      	nop			; (mov r8, r8)
10015928:	100158c5 	.word	0x100158c5

1001592c <std.isra.0>:
1001592c:	2300      	movs	r3, #0
1001592e:	b510      	push	{r4, lr}
10015930:	0004      	movs	r4, r0
10015932:	6003      	str	r3, [r0, #0]
10015934:	6043      	str	r3, [r0, #4]
10015936:	6083      	str	r3, [r0, #8]
10015938:	8181      	strh	r1, [r0, #12]
1001593a:	6643      	str	r3, [r0, #100]	; 0x64
1001593c:	81c2      	strh	r2, [r0, #14]
1001593e:	6103      	str	r3, [r0, #16]
10015940:	6143      	str	r3, [r0, #20]
10015942:	6183      	str	r3, [r0, #24]
10015944:	0019      	movs	r1, r3
10015946:	2208      	movs	r2, #8
10015948:	305c      	adds	r0, #92	; 0x5c
1001594a:	f7ff fc21 	bl	10015190 <memset>
1001594e:	4b05      	ldr	r3, [pc, #20]	; (10015964 <std.isra.0+0x38>)
10015950:	6224      	str	r4, [r4, #32]
10015952:	6263      	str	r3, [r4, #36]	; 0x24
10015954:	4b04      	ldr	r3, [pc, #16]	; (10015968 <std.isra.0+0x3c>)
10015956:	62a3      	str	r3, [r4, #40]	; 0x28
10015958:	4b04      	ldr	r3, [pc, #16]	; (1001596c <std.isra.0+0x40>)
1001595a:	62e3      	str	r3, [r4, #44]	; 0x2c
1001595c:	4b04      	ldr	r3, [pc, #16]	; (10015970 <std.isra.0+0x44>)
1001595e:	6323      	str	r3, [r4, #48]	; 0x30
10015960:	bd10      	pop	{r4, pc}
10015962:	46c0      	nop			; (mov r8, r8)
10015964:	100161a5 	.word	0x100161a5
10015968:	100161cd 	.word	0x100161cd
1001596c:	10016205 	.word	0x10016205
10015970:	10016231 	.word	0x10016231

10015974 <__sfmoreglue>:
10015974:	b570      	push	{r4, r5, r6, lr}
10015976:	2568      	movs	r5, #104	; 0x68
10015978:	1e4b      	subs	r3, r1, #1
1001597a:	435d      	muls	r5, r3
1001597c:	000e      	movs	r6, r1
1001597e:	0029      	movs	r1, r5
10015980:	3174      	adds	r1, #116	; 0x74
10015982:	f7ff fc53 	bl	1001522c <_malloc_r>
10015986:	1e04      	subs	r4, r0, #0
10015988:	d008      	beq.n	1001599c <__sfmoreglue+0x28>
1001598a:	2100      	movs	r1, #0
1001598c:	002a      	movs	r2, r5
1001598e:	6001      	str	r1, [r0, #0]
10015990:	6046      	str	r6, [r0, #4]
10015992:	300c      	adds	r0, #12
10015994:	60a0      	str	r0, [r4, #8]
10015996:	3268      	adds	r2, #104	; 0x68
10015998:	f7ff fbfa 	bl	10015190 <memset>
1001599c:	0020      	movs	r0, r4
1001599e:	bd70      	pop	{r4, r5, r6, pc}

100159a0 <__sinit>:
100159a0:	6983      	ldr	r3, [r0, #24]
100159a2:	b513      	push	{r0, r1, r4, lr}
100159a4:	0004      	movs	r4, r0
100159a6:	2b00      	cmp	r3, #0
100159a8:	d128      	bne.n	100159fc <__sinit+0x5c>
100159aa:	6483      	str	r3, [r0, #72]	; 0x48
100159ac:	64c3      	str	r3, [r0, #76]	; 0x4c
100159ae:	6503      	str	r3, [r0, #80]	; 0x50
100159b0:	4b13      	ldr	r3, [pc, #76]	; (10015a00 <__sinit+0x60>)
100159b2:	4a14      	ldr	r2, [pc, #80]	; (10015a04 <__sinit+0x64>)
100159b4:	681b      	ldr	r3, [r3, #0]
100159b6:	6282      	str	r2, [r0, #40]	; 0x28
100159b8:	9301      	str	r3, [sp, #4]
100159ba:	4298      	cmp	r0, r3
100159bc:	d101      	bne.n	100159c2 <__sinit+0x22>
100159be:	2301      	movs	r3, #1
100159c0:	6183      	str	r3, [r0, #24]
100159c2:	0020      	movs	r0, r4
100159c4:	f000 f820 	bl	10015a08 <__sfp>
100159c8:	6060      	str	r0, [r4, #4]
100159ca:	0020      	movs	r0, r4
100159cc:	f000 f81c 	bl	10015a08 <__sfp>
100159d0:	60a0      	str	r0, [r4, #8]
100159d2:	0020      	movs	r0, r4
100159d4:	f000 f818 	bl	10015a08 <__sfp>
100159d8:	2200      	movs	r2, #0
100159da:	60e0      	str	r0, [r4, #12]
100159dc:	2104      	movs	r1, #4
100159de:	6860      	ldr	r0, [r4, #4]
100159e0:	f7ff ffa4 	bl	1001592c <std.isra.0>
100159e4:	2201      	movs	r2, #1
100159e6:	2109      	movs	r1, #9
100159e8:	68a0      	ldr	r0, [r4, #8]
100159ea:	f7ff ff9f 	bl	1001592c <std.isra.0>
100159ee:	2202      	movs	r2, #2
100159f0:	2112      	movs	r1, #18
100159f2:	68e0      	ldr	r0, [r4, #12]
100159f4:	f7ff ff9a 	bl	1001592c <std.isra.0>
100159f8:	2301      	movs	r3, #1
100159fa:	61a3      	str	r3, [r4, #24]
100159fc:	bd13      	pop	{r0, r1, r4, pc}
100159fe:	46c0      	nop			; (mov r8, r8)
10015a00:	10018328 	.word	0x10018328
10015a04:	1001591d 	.word	0x1001591d

10015a08 <__sfp>:
10015a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10015a0a:	4b1d      	ldr	r3, [pc, #116]	; (10015a80 <__sfp+0x78>)
10015a0c:	0006      	movs	r6, r0
10015a0e:	681d      	ldr	r5, [r3, #0]
10015a10:	69ab      	ldr	r3, [r5, #24]
10015a12:	2b00      	cmp	r3, #0
10015a14:	d102      	bne.n	10015a1c <__sfp+0x14>
10015a16:	0028      	movs	r0, r5
10015a18:	f7ff ffc2 	bl	100159a0 <__sinit>
10015a1c:	3548      	adds	r5, #72	; 0x48
10015a1e:	68ac      	ldr	r4, [r5, #8]
10015a20:	686b      	ldr	r3, [r5, #4]
10015a22:	3b01      	subs	r3, #1
10015a24:	d405      	bmi.n	10015a32 <__sfp+0x2a>
10015a26:	220c      	movs	r2, #12
10015a28:	5ea7      	ldrsh	r7, [r4, r2]
10015a2a:	2f00      	cmp	r7, #0
10015a2c:	d010      	beq.n	10015a50 <__sfp+0x48>
10015a2e:	3468      	adds	r4, #104	; 0x68
10015a30:	e7f7      	b.n	10015a22 <__sfp+0x1a>
10015a32:	682b      	ldr	r3, [r5, #0]
10015a34:	2b00      	cmp	r3, #0
10015a36:	d001      	beq.n	10015a3c <__sfp+0x34>
10015a38:	682d      	ldr	r5, [r5, #0]
10015a3a:	e7f0      	b.n	10015a1e <__sfp+0x16>
10015a3c:	2104      	movs	r1, #4
10015a3e:	0030      	movs	r0, r6
10015a40:	f7ff ff98 	bl	10015974 <__sfmoreglue>
10015a44:	6028      	str	r0, [r5, #0]
10015a46:	2800      	cmp	r0, #0
10015a48:	d1f6      	bne.n	10015a38 <__sfp+0x30>
10015a4a:	230c      	movs	r3, #12
10015a4c:	6033      	str	r3, [r6, #0]
10015a4e:	e016      	b.n	10015a7e <__sfp+0x76>
10015a50:	2301      	movs	r3, #1
10015a52:	0020      	movs	r0, r4
10015a54:	425b      	negs	r3, r3
10015a56:	81e3      	strh	r3, [r4, #14]
10015a58:	3302      	adds	r3, #2
10015a5a:	81a3      	strh	r3, [r4, #12]
10015a5c:	6667      	str	r7, [r4, #100]	; 0x64
10015a5e:	6027      	str	r7, [r4, #0]
10015a60:	60a7      	str	r7, [r4, #8]
10015a62:	6067      	str	r7, [r4, #4]
10015a64:	6127      	str	r7, [r4, #16]
10015a66:	6167      	str	r7, [r4, #20]
10015a68:	61a7      	str	r7, [r4, #24]
10015a6a:	305c      	adds	r0, #92	; 0x5c
10015a6c:	2208      	movs	r2, #8
10015a6e:	0039      	movs	r1, r7
10015a70:	f7ff fb8e 	bl	10015190 <memset>
10015a74:	0020      	movs	r0, r4
10015a76:	6367      	str	r7, [r4, #52]	; 0x34
10015a78:	63a7      	str	r7, [r4, #56]	; 0x38
10015a7a:	64a7      	str	r7, [r4, #72]	; 0x48
10015a7c:	64e7      	str	r7, [r4, #76]	; 0x4c
10015a7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10015a80:	10018328 	.word	0x10018328

10015a84 <_fwalk_reent>:
10015a84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10015a86:	0004      	movs	r4, r0
10015a88:	0007      	movs	r7, r0
10015a8a:	2600      	movs	r6, #0
10015a8c:	9101      	str	r1, [sp, #4]
10015a8e:	3448      	adds	r4, #72	; 0x48
10015a90:	2c00      	cmp	r4, #0
10015a92:	d016      	beq.n	10015ac2 <_fwalk_reent+0x3e>
10015a94:	6863      	ldr	r3, [r4, #4]
10015a96:	68a5      	ldr	r5, [r4, #8]
10015a98:	9300      	str	r3, [sp, #0]
10015a9a:	9b00      	ldr	r3, [sp, #0]
10015a9c:	3b01      	subs	r3, #1
10015a9e:	9300      	str	r3, [sp, #0]
10015aa0:	d40d      	bmi.n	10015abe <_fwalk_reent+0x3a>
10015aa2:	89ab      	ldrh	r3, [r5, #12]
10015aa4:	2b01      	cmp	r3, #1
10015aa6:	d908      	bls.n	10015aba <_fwalk_reent+0x36>
10015aa8:	220e      	movs	r2, #14
10015aaa:	5eab      	ldrsh	r3, [r5, r2]
10015aac:	3301      	adds	r3, #1
10015aae:	d004      	beq.n	10015aba <_fwalk_reent+0x36>
10015ab0:	0029      	movs	r1, r5
10015ab2:	0038      	movs	r0, r7
10015ab4:	9b01      	ldr	r3, [sp, #4]
10015ab6:	4798      	blx	r3
10015ab8:	4306      	orrs	r6, r0
10015aba:	3568      	adds	r5, #104	; 0x68
10015abc:	e7ed      	b.n	10015a9a <_fwalk_reent+0x16>
10015abe:	6824      	ldr	r4, [r4, #0]
10015ac0:	e7e6      	b.n	10015a90 <_fwalk_reent+0xc>
10015ac2:	0030      	movs	r0, r6
10015ac4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

10015ac8 <__swhatbuf_r>:
10015ac8:	b570      	push	{r4, r5, r6, lr}
10015aca:	000e      	movs	r6, r1
10015acc:	001d      	movs	r5, r3
10015ace:	230e      	movs	r3, #14
10015ad0:	5ec9      	ldrsh	r1, [r1, r3]
10015ad2:	b090      	sub	sp, #64	; 0x40
10015ad4:	0014      	movs	r4, r2
10015ad6:	2900      	cmp	r1, #0
10015ad8:	da06      	bge.n	10015ae8 <__swhatbuf_r+0x20>
10015ada:	2300      	movs	r3, #0
10015adc:	602b      	str	r3, [r5, #0]
10015ade:	89b3      	ldrh	r3, [r6, #12]
10015ae0:	061b      	lsls	r3, r3, #24
10015ae2:	d50f      	bpl.n	10015b04 <__swhatbuf_r+0x3c>
10015ae4:	2340      	movs	r3, #64	; 0x40
10015ae6:	e00f      	b.n	10015b08 <__swhatbuf_r+0x40>
10015ae8:	aa01      	add	r2, sp, #4
10015aea:	f000 fbcd 	bl	10016288 <_fstat_r>
10015aee:	2800      	cmp	r0, #0
10015af0:	dbf3      	blt.n	10015ada <__swhatbuf_r+0x12>
10015af2:	23f0      	movs	r3, #240	; 0xf0
10015af4:	9a02      	ldr	r2, [sp, #8]
10015af6:	021b      	lsls	r3, r3, #8
10015af8:	4013      	ands	r3, r2
10015afa:	4a05      	ldr	r2, [pc, #20]	; (10015b10 <__swhatbuf_r+0x48>)
10015afc:	189b      	adds	r3, r3, r2
10015afe:	425a      	negs	r2, r3
10015b00:	4153      	adcs	r3, r2
10015b02:	602b      	str	r3, [r5, #0]
10015b04:	2380      	movs	r3, #128	; 0x80
10015b06:	00db      	lsls	r3, r3, #3
10015b08:	2000      	movs	r0, #0
10015b0a:	6023      	str	r3, [r4, #0]
10015b0c:	b010      	add	sp, #64	; 0x40
10015b0e:	bd70      	pop	{r4, r5, r6, pc}
10015b10:	ffffe000 	.word	0xffffe000

10015b14 <__smakebuf_r>:
10015b14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10015b16:	2602      	movs	r6, #2
10015b18:	898b      	ldrh	r3, [r1, #12]
10015b1a:	0005      	movs	r5, r0
10015b1c:	000c      	movs	r4, r1
10015b1e:	4233      	tst	r3, r6
10015b20:	d110      	bne.n	10015b44 <__smakebuf_r+0x30>
10015b22:	ab01      	add	r3, sp, #4
10015b24:	466a      	mov	r2, sp
10015b26:	f7ff ffcf 	bl	10015ac8 <__swhatbuf_r>
10015b2a:	9900      	ldr	r1, [sp, #0]
10015b2c:	0007      	movs	r7, r0
10015b2e:	0028      	movs	r0, r5
10015b30:	f7ff fb7c 	bl	1001522c <_malloc_r>
10015b34:	2800      	cmp	r0, #0
10015b36:	d10c      	bne.n	10015b52 <__smakebuf_r+0x3e>
10015b38:	220c      	movs	r2, #12
10015b3a:	5ea3      	ldrsh	r3, [r4, r2]
10015b3c:	059a      	lsls	r2, r3, #22
10015b3e:	d423      	bmi.n	10015b88 <__smakebuf_r+0x74>
10015b40:	4333      	orrs	r3, r6
10015b42:	81a3      	strh	r3, [r4, #12]
10015b44:	0023      	movs	r3, r4
10015b46:	3347      	adds	r3, #71	; 0x47
10015b48:	6023      	str	r3, [r4, #0]
10015b4a:	6123      	str	r3, [r4, #16]
10015b4c:	2301      	movs	r3, #1
10015b4e:	6163      	str	r3, [r4, #20]
10015b50:	e01a      	b.n	10015b88 <__smakebuf_r+0x74>
10015b52:	2280      	movs	r2, #128	; 0x80
10015b54:	4b0d      	ldr	r3, [pc, #52]	; (10015b8c <__smakebuf_r+0x78>)
10015b56:	62ab      	str	r3, [r5, #40]	; 0x28
10015b58:	89a3      	ldrh	r3, [r4, #12]
10015b5a:	6020      	str	r0, [r4, #0]
10015b5c:	4313      	orrs	r3, r2
10015b5e:	81a3      	strh	r3, [r4, #12]
10015b60:	9b00      	ldr	r3, [sp, #0]
10015b62:	6120      	str	r0, [r4, #16]
10015b64:	6163      	str	r3, [r4, #20]
10015b66:	9b01      	ldr	r3, [sp, #4]
10015b68:	2b00      	cmp	r3, #0
10015b6a:	d00a      	beq.n	10015b82 <__smakebuf_r+0x6e>
10015b6c:	230e      	movs	r3, #14
10015b6e:	5ee1      	ldrsh	r1, [r4, r3]
10015b70:	0028      	movs	r0, r5
10015b72:	f000 fb9b 	bl	100162ac <_isatty_r>
10015b76:	2800      	cmp	r0, #0
10015b78:	d003      	beq.n	10015b82 <__smakebuf_r+0x6e>
10015b7a:	2201      	movs	r2, #1
10015b7c:	89a3      	ldrh	r3, [r4, #12]
10015b7e:	4313      	orrs	r3, r2
10015b80:	81a3      	strh	r3, [r4, #12]
10015b82:	89a3      	ldrh	r3, [r4, #12]
10015b84:	431f      	orrs	r7, r3
10015b86:	81a7      	strh	r7, [r4, #12]
10015b88:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
10015b8a:	46c0      	nop			; (mov r8, r8)
10015b8c:	1001591d 	.word	0x1001591d

10015b90 <__sfputc_r>:
10015b90:	6893      	ldr	r3, [r2, #8]
10015b92:	b510      	push	{r4, lr}
10015b94:	3b01      	subs	r3, #1
10015b96:	6093      	str	r3, [r2, #8]
10015b98:	2b00      	cmp	r3, #0
10015b9a:	da05      	bge.n	10015ba8 <__sfputc_r+0x18>
10015b9c:	6994      	ldr	r4, [r2, #24]
10015b9e:	42a3      	cmp	r3, r4
10015ba0:	db08      	blt.n	10015bb4 <__sfputc_r+0x24>
10015ba2:	b2cb      	uxtb	r3, r1
10015ba4:	2b0a      	cmp	r3, #10
10015ba6:	d005      	beq.n	10015bb4 <__sfputc_r+0x24>
10015ba8:	6813      	ldr	r3, [r2, #0]
10015baa:	1c58      	adds	r0, r3, #1
10015bac:	6010      	str	r0, [r2, #0]
10015bae:	7019      	strb	r1, [r3, #0]
10015bb0:	b2c8      	uxtb	r0, r1
10015bb2:	e001      	b.n	10015bb8 <__sfputc_r+0x28>
10015bb4:	f7ff fd32 	bl	1001561c <__swbuf_r>
10015bb8:	bd10      	pop	{r4, pc}

10015bba <__sfputs_r>:
10015bba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10015bbc:	0006      	movs	r6, r0
10015bbe:	000f      	movs	r7, r1
10015bc0:	0014      	movs	r4, r2
10015bc2:	18d5      	adds	r5, r2, r3
10015bc4:	42ac      	cmp	r4, r5
10015bc6:	d008      	beq.n	10015bda <__sfputs_r+0x20>
10015bc8:	7821      	ldrb	r1, [r4, #0]
10015bca:	003a      	movs	r2, r7
10015bcc:	0030      	movs	r0, r6
10015bce:	f7ff ffdf 	bl	10015b90 <__sfputc_r>
10015bd2:	3401      	adds	r4, #1
10015bd4:	1c43      	adds	r3, r0, #1
10015bd6:	d1f5      	bne.n	10015bc4 <__sfputs_r+0xa>
10015bd8:	e000      	b.n	10015bdc <__sfputs_r+0x22>
10015bda:	2000      	movs	r0, #0
10015bdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

10015be0 <_vfiprintf_r>:
10015be0:	b5f0      	push	{r4, r5, r6, r7, lr}
10015be2:	b09f      	sub	sp, #124	; 0x7c
10015be4:	0006      	movs	r6, r0
10015be6:	000f      	movs	r7, r1
10015be8:	9202      	str	r2, [sp, #8]
10015bea:	9305      	str	r3, [sp, #20]
10015bec:	2800      	cmp	r0, #0
10015bee:	d004      	beq.n	10015bfa <_vfiprintf_r+0x1a>
10015bf0:	6983      	ldr	r3, [r0, #24]
10015bf2:	2b00      	cmp	r3, #0
10015bf4:	d101      	bne.n	10015bfa <_vfiprintf_r+0x1a>
10015bf6:	f7ff fed3 	bl	100159a0 <__sinit>
10015bfa:	4b7f      	ldr	r3, [pc, #508]	; (10015df8 <_vfiprintf_r+0x218>)
10015bfc:	429f      	cmp	r7, r3
10015bfe:	d101      	bne.n	10015c04 <_vfiprintf_r+0x24>
10015c00:	6877      	ldr	r7, [r6, #4]
10015c02:	e008      	b.n	10015c16 <_vfiprintf_r+0x36>
10015c04:	4b7d      	ldr	r3, [pc, #500]	; (10015dfc <_vfiprintf_r+0x21c>)
10015c06:	429f      	cmp	r7, r3
10015c08:	d101      	bne.n	10015c0e <_vfiprintf_r+0x2e>
10015c0a:	68b7      	ldr	r7, [r6, #8]
10015c0c:	e003      	b.n	10015c16 <_vfiprintf_r+0x36>
10015c0e:	4b7c      	ldr	r3, [pc, #496]	; (10015e00 <_vfiprintf_r+0x220>)
10015c10:	429f      	cmp	r7, r3
10015c12:	d100      	bne.n	10015c16 <_vfiprintf_r+0x36>
10015c14:	68f7      	ldr	r7, [r6, #12]
10015c16:	89bb      	ldrh	r3, [r7, #12]
10015c18:	071b      	lsls	r3, r3, #28
10015c1a:	d50a      	bpl.n	10015c32 <_vfiprintf_r+0x52>
10015c1c:	693b      	ldr	r3, [r7, #16]
10015c1e:	2b00      	cmp	r3, #0
10015c20:	d007      	beq.n	10015c32 <_vfiprintf_r+0x52>
10015c22:	2300      	movs	r3, #0
10015c24:	ad06      	add	r5, sp, #24
10015c26:	616b      	str	r3, [r5, #20]
10015c28:	3320      	adds	r3, #32
10015c2a:	766b      	strb	r3, [r5, #25]
10015c2c:	3310      	adds	r3, #16
10015c2e:	76ab      	strb	r3, [r5, #26]
10015c30:	e03d      	b.n	10015cae <_vfiprintf_r+0xce>
10015c32:	0039      	movs	r1, r7
10015c34:	0030      	movs	r0, r6
10015c36:	f7ff fd49 	bl	100156cc <__swsetup_r>
10015c3a:	2800      	cmp	r0, #0
10015c3c:	d0f1      	beq.n	10015c22 <_vfiprintf_r+0x42>
10015c3e:	2001      	movs	r0, #1
10015c40:	4240      	negs	r0, r0
10015c42:	e0d6      	b.n	10015df2 <_vfiprintf_r+0x212>
10015c44:	9a05      	ldr	r2, [sp, #20]
10015c46:	1d11      	adds	r1, r2, #4
10015c48:	6812      	ldr	r2, [r2, #0]
10015c4a:	9105      	str	r1, [sp, #20]
10015c4c:	2a00      	cmp	r2, #0
10015c4e:	da00      	bge.n	10015c52 <_vfiprintf_r+0x72>
10015c50:	e07f      	b.n	10015d52 <_vfiprintf_r+0x172>
10015c52:	9209      	str	r2, [sp, #36]	; 0x24
10015c54:	3401      	adds	r4, #1
10015c56:	7823      	ldrb	r3, [r4, #0]
10015c58:	2b2e      	cmp	r3, #46	; 0x2e
10015c5a:	d100      	bne.n	10015c5e <_vfiprintf_r+0x7e>
10015c5c:	e08d      	b.n	10015d7a <_vfiprintf_r+0x19a>
10015c5e:	7821      	ldrb	r1, [r4, #0]
10015c60:	2203      	movs	r2, #3
10015c62:	4868      	ldr	r0, [pc, #416]	; (10015e04 <_vfiprintf_r+0x224>)
10015c64:	f000 fb48 	bl	100162f8 <memchr>
10015c68:	2800      	cmp	r0, #0
10015c6a:	d007      	beq.n	10015c7c <_vfiprintf_r+0x9c>
10015c6c:	4b65      	ldr	r3, [pc, #404]	; (10015e04 <_vfiprintf_r+0x224>)
10015c6e:	682a      	ldr	r2, [r5, #0]
10015c70:	1ac0      	subs	r0, r0, r3
10015c72:	2340      	movs	r3, #64	; 0x40
10015c74:	4083      	lsls	r3, r0
10015c76:	4313      	orrs	r3, r2
10015c78:	602b      	str	r3, [r5, #0]
10015c7a:	3401      	adds	r4, #1
10015c7c:	7821      	ldrb	r1, [r4, #0]
10015c7e:	1c63      	adds	r3, r4, #1
10015c80:	2206      	movs	r2, #6
10015c82:	4861      	ldr	r0, [pc, #388]	; (10015e08 <_vfiprintf_r+0x228>)
10015c84:	9302      	str	r3, [sp, #8]
10015c86:	7629      	strb	r1, [r5, #24]
10015c88:	f000 fb36 	bl	100162f8 <memchr>
10015c8c:	2800      	cmp	r0, #0
10015c8e:	d100      	bne.n	10015c92 <_vfiprintf_r+0xb2>
10015c90:	e09d      	b.n	10015dce <_vfiprintf_r+0x1ee>
10015c92:	4b5e      	ldr	r3, [pc, #376]	; (10015e0c <_vfiprintf_r+0x22c>)
10015c94:	2b00      	cmp	r3, #0
10015c96:	d000      	beq.n	10015c9a <_vfiprintf_r+0xba>
10015c98:	e090      	b.n	10015dbc <_vfiprintf_r+0x1dc>
10015c9a:	2207      	movs	r2, #7
10015c9c:	9b05      	ldr	r3, [sp, #20]
10015c9e:	3307      	adds	r3, #7
10015ca0:	4393      	bics	r3, r2
10015ca2:	3308      	adds	r3, #8
10015ca4:	9305      	str	r3, [sp, #20]
10015ca6:	696b      	ldr	r3, [r5, #20]
10015ca8:	9a03      	ldr	r2, [sp, #12]
10015caa:	189b      	adds	r3, r3, r2
10015cac:	616b      	str	r3, [r5, #20]
10015cae:	9c02      	ldr	r4, [sp, #8]
10015cb0:	7823      	ldrb	r3, [r4, #0]
10015cb2:	2b00      	cmp	r3, #0
10015cb4:	d104      	bne.n	10015cc0 <_vfiprintf_r+0xe0>
10015cb6:	9b02      	ldr	r3, [sp, #8]
10015cb8:	1ae3      	subs	r3, r4, r3
10015cba:	9304      	str	r3, [sp, #16]
10015cbc:	d012      	beq.n	10015ce4 <_vfiprintf_r+0x104>
10015cbe:	e003      	b.n	10015cc8 <_vfiprintf_r+0xe8>
10015cc0:	2b25      	cmp	r3, #37	; 0x25
10015cc2:	d0f8      	beq.n	10015cb6 <_vfiprintf_r+0xd6>
10015cc4:	3401      	adds	r4, #1
10015cc6:	e7f3      	b.n	10015cb0 <_vfiprintf_r+0xd0>
10015cc8:	9b04      	ldr	r3, [sp, #16]
10015cca:	9a02      	ldr	r2, [sp, #8]
10015ccc:	0039      	movs	r1, r7
10015cce:	0030      	movs	r0, r6
10015cd0:	f7ff ff73 	bl	10015bba <__sfputs_r>
10015cd4:	1c43      	adds	r3, r0, #1
10015cd6:	d100      	bne.n	10015cda <_vfiprintf_r+0xfa>
10015cd8:	e086      	b.n	10015de8 <_vfiprintf_r+0x208>
10015cda:	696a      	ldr	r2, [r5, #20]
10015cdc:	9b04      	ldr	r3, [sp, #16]
10015cde:	4694      	mov	ip, r2
10015ce0:	4463      	add	r3, ip
10015ce2:	616b      	str	r3, [r5, #20]
10015ce4:	7823      	ldrb	r3, [r4, #0]
10015ce6:	2b00      	cmp	r3, #0
10015ce8:	d07e      	beq.n	10015de8 <_vfiprintf_r+0x208>
10015cea:	2201      	movs	r2, #1
10015cec:	2300      	movs	r3, #0
10015cee:	4252      	negs	r2, r2
10015cf0:	606a      	str	r2, [r5, #4]
10015cf2:	a902      	add	r1, sp, #8
10015cf4:	3254      	adds	r2, #84	; 0x54
10015cf6:	1852      	adds	r2, r2, r1
10015cf8:	3401      	adds	r4, #1
10015cfa:	602b      	str	r3, [r5, #0]
10015cfc:	60eb      	str	r3, [r5, #12]
10015cfe:	60ab      	str	r3, [r5, #8]
10015d00:	7013      	strb	r3, [r2, #0]
10015d02:	65ab      	str	r3, [r5, #88]	; 0x58
10015d04:	7821      	ldrb	r1, [r4, #0]
10015d06:	2205      	movs	r2, #5
10015d08:	4841      	ldr	r0, [pc, #260]	; (10015e10 <_vfiprintf_r+0x230>)
10015d0a:	f000 faf5 	bl	100162f8 <memchr>
10015d0e:	2800      	cmp	r0, #0
10015d10:	d008      	beq.n	10015d24 <_vfiprintf_r+0x144>
10015d12:	4b3f      	ldr	r3, [pc, #252]	; (10015e10 <_vfiprintf_r+0x230>)
10015d14:	682a      	ldr	r2, [r5, #0]
10015d16:	1ac0      	subs	r0, r0, r3
10015d18:	2301      	movs	r3, #1
10015d1a:	4083      	lsls	r3, r0
10015d1c:	4313      	orrs	r3, r2
10015d1e:	602b      	str	r3, [r5, #0]
10015d20:	3401      	adds	r4, #1
10015d22:	e7ef      	b.n	10015d04 <_vfiprintf_r+0x124>
10015d24:	682b      	ldr	r3, [r5, #0]
10015d26:	06da      	lsls	r2, r3, #27
10015d28:	d504      	bpl.n	10015d34 <_vfiprintf_r+0x154>
10015d2a:	2253      	movs	r2, #83	; 0x53
10015d2c:	2120      	movs	r1, #32
10015d2e:	a802      	add	r0, sp, #8
10015d30:	1812      	adds	r2, r2, r0
10015d32:	7011      	strb	r1, [r2, #0]
10015d34:	071a      	lsls	r2, r3, #28
10015d36:	d504      	bpl.n	10015d42 <_vfiprintf_r+0x162>
10015d38:	2253      	movs	r2, #83	; 0x53
10015d3a:	212b      	movs	r1, #43	; 0x2b
10015d3c:	a802      	add	r0, sp, #8
10015d3e:	1812      	adds	r2, r2, r0
10015d40:	7011      	strb	r1, [r2, #0]
10015d42:	7822      	ldrb	r2, [r4, #0]
10015d44:	2a2a      	cmp	r2, #42	; 0x2a
10015d46:	d100      	bne.n	10015d4a <_vfiprintf_r+0x16a>
10015d48:	e77c      	b.n	10015c44 <_vfiprintf_r+0x64>
10015d4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
10015d4c:	2000      	movs	r0, #0
10015d4e:	210a      	movs	r1, #10
10015d50:	e005      	b.n	10015d5e <_vfiprintf_r+0x17e>
10015d52:	4252      	negs	r2, r2
10015d54:	60ea      	str	r2, [r5, #12]
10015d56:	2202      	movs	r2, #2
10015d58:	4313      	orrs	r3, r2
10015d5a:	602b      	str	r3, [r5, #0]
10015d5c:	e77a      	b.n	10015c54 <_vfiprintf_r+0x74>
10015d5e:	7822      	ldrb	r2, [r4, #0]
10015d60:	3a30      	subs	r2, #48	; 0x30
10015d62:	2a09      	cmp	r2, #9
10015d64:	d804      	bhi.n	10015d70 <_vfiprintf_r+0x190>
10015d66:	434b      	muls	r3, r1
10015d68:	3401      	adds	r4, #1
10015d6a:	189b      	adds	r3, r3, r2
10015d6c:	2001      	movs	r0, #1
10015d6e:	e7f6      	b.n	10015d5e <_vfiprintf_r+0x17e>
10015d70:	2800      	cmp	r0, #0
10015d72:	d100      	bne.n	10015d76 <_vfiprintf_r+0x196>
10015d74:	e76f      	b.n	10015c56 <_vfiprintf_r+0x76>
10015d76:	9309      	str	r3, [sp, #36]	; 0x24
10015d78:	e76d      	b.n	10015c56 <_vfiprintf_r+0x76>
10015d7a:	7863      	ldrb	r3, [r4, #1]
10015d7c:	2b2a      	cmp	r3, #42	; 0x2a
10015d7e:	d10a      	bne.n	10015d96 <_vfiprintf_r+0x1b6>
10015d80:	9b05      	ldr	r3, [sp, #20]
10015d82:	3402      	adds	r4, #2
10015d84:	1d1a      	adds	r2, r3, #4
10015d86:	681b      	ldr	r3, [r3, #0]
10015d88:	9205      	str	r2, [sp, #20]
10015d8a:	2b00      	cmp	r3, #0
10015d8c:	da01      	bge.n	10015d92 <_vfiprintf_r+0x1b2>
10015d8e:	2301      	movs	r3, #1
10015d90:	425b      	negs	r3, r3
10015d92:	9307      	str	r3, [sp, #28]
10015d94:	e763      	b.n	10015c5e <_vfiprintf_r+0x7e>
10015d96:	2300      	movs	r3, #0
10015d98:	200a      	movs	r0, #10
10015d9a:	001a      	movs	r2, r3
10015d9c:	3401      	adds	r4, #1
10015d9e:	606b      	str	r3, [r5, #4]
10015da0:	7821      	ldrb	r1, [r4, #0]
10015da2:	3930      	subs	r1, #48	; 0x30
10015da4:	2909      	cmp	r1, #9
10015da6:	d804      	bhi.n	10015db2 <_vfiprintf_r+0x1d2>
10015da8:	4342      	muls	r2, r0
10015daa:	3401      	adds	r4, #1
10015dac:	1852      	adds	r2, r2, r1
10015dae:	2301      	movs	r3, #1
10015db0:	e7f6      	b.n	10015da0 <_vfiprintf_r+0x1c0>
10015db2:	2b00      	cmp	r3, #0
10015db4:	d100      	bne.n	10015db8 <_vfiprintf_r+0x1d8>
10015db6:	e752      	b.n	10015c5e <_vfiprintf_r+0x7e>
10015db8:	9207      	str	r2, [sp, #28]
10015dba:	e750      	b.n	10015c5e <_vfiprintf_r+0x7e>
10015dbc:	ab05      	add	r3, sp, #20
10015dbe:	9300      	str	r3, [sp, #0]
10015dc0:	003a      	movs	r2, r7
10015dc2:	4b14      	ldr	r3, [pc, #80]	; (10015e14 <_vfiprintf_r+0x234>)
10015dc4:	0029      	movs	r1, r5
10015dc6:	0030      	movs	r0, r6
10015dc8:	e000      	b.n	10015dcc <_vfiprintf_r+0x1ec>
10015dca:	bf00      	nop
10015dcc:	e007      	b.n	10015dde <_vfiprintf_r+0x1fe>
10015dce:	ab05      	add	r3, sp, #20
10015dd0:	9300      	str	r3, [sp, #0]
10015dd2:	003a      	movs	r2, r7
10015dd4:	4b0f      	ldr	r3, [pc, #60]	; (10015e14 <_vfiprintf_r+0x234>)
10015dd6:	0029      	movs	r1, r5
10015dd8:	0030      	movs	r0, r6
10015dda:	f000 f88b 	bl	10015ef4 <_printf_i>
10015dde:	9003      	str	r0, [sp, #12]
10015de0:	9b03      	ldr	r3, [sp, #12]
10015de2:	3301      	adds	r3, #1
10015de4:	d000      	beq.n	10015de8 <_vfiprintf_r+0x208>
10015de6:	e75e      	b.n	10015ca6 <_vfiprintf_r+0xc6>
10015de8:	89bb      	ldrh	r3, [r7, #12]
10015dea:	065b      	lsls	r3, r3, #25
10015dec:	d500      	bpl.n	10015df0 <_vfiprintf_r+0x210>
10015dee:	e726      	b.n	10015c3e <_vfiprintf_r+0x5e>
10015df0:	980b      	ldr	r0, [sp, #44]	; 0x2c
10015df2:	b01f      	add	sp, #124	; 0x7c
10015df4:	bdf0      	pop	{r4, r5, r6, r7, pc}
10015df6:	46c0      	nop			; (mov r8, r8)
10015df8:	1001832c 	.word	0x1001832c
10015dfc:	1001834c 	.word	0x1001834c
10015e00:	1001836c 	.word	0x1001836c
10015e04:	10018392 	.word	0x10018392
10015e08:	10018396 	.word	0x10018396
10015e0c:	00000000 	.word	0x00000000
10015e10:	1001838c 	.word	0x1001838c
10015e14:	10015bbb 	.word	0x10015bbb

10015e18 <_printf_common>:
10015e18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10015e1a:	0017      	movs	r7, r2
10015e1c:	9301      	str	r3, [sp, #4]
10015e1e:	688a      	ldr	r2, [r1, #8]
10015e20:	690b      	ldr	r3, [r1, #16]
10015e22:	9000      	str	r0, [sp, #0]
10015e24:	000c      	movs	r4, r1
10015e26:	4293      	cmp	r3, r2
10015e28:	da00      	bge.n	10015e2c <_printf_common+0x14>
10015e2a:	0013      	movs	r3, r2
10015e2c:	0022      	movs	r2, r4
10015e2e:	603b      	str	r3, [r7, #0]
10015e30:	3243      	adds	r2, #67	; 0x43
10015e32:	7812      	ldrb	r2, [r2, #0]
10015e34:	2a00      	cmp	r2, #0
10015e36:	d001      	beq.n	10015e3c <_printf_common+0x24>
10015e38:	3301      	adds	r3, #1
10015e3a:	603b      	str	r3, [r7, #0]
10015e3c:	6823      	ldr	r3, [r4, #0]
10015e3e:	069b      	lsls	r3, r3, #26
10015e40:	d502      	bpl.n	10015e48 <_printf_common+0x30>
10015e42:	683b      	ldr	r3, [r7, #0]
10015e44:	3302      	adds	r3, #2
10015e46:	603b      	str	r3, [r7, #0]
10015e48:	2506      	movs	r5, #6
10015e4a:	6823      	ldr	r3, [r4, #0]
10015e4c:	401d      	ands	r5, r3
10015e4e:	d01e      	beq.n	10015e8e <_printf_common+0x76>
10015e50:	0023      	movs	r3, r4
10015e52:	3343      	adds	r3, #67	; 0x43
10015e54:	781b      	ldrb	r3, [r3, #0]
10015e56:	1e5a      	subs	r2, r3, #1
10015e58:	4193      	sbcs	r3, r2
10015e5a:	6822      	ldr	r2, [r4, #0]
10015e5c:	0692      	lsls	r2, r2, #26
10015e5e:	d51c      	bpl.n	10015e9a <_printf_common+0x82>
10015e60:	2030      	movs	r0, #48	; 0x30
10015e62:	18e1      	adds	r1, r4, r3
10015e64:	3143      	adds	r1, #67	; 0x43
10015e66:	7008      	strb	r0, [r1, #0]
10015e68:	0021      	movs	r1, r4
10015e6a:	1c5a      	adds	r2, r3, #1
10015e6c:	3145      	adds	r1, #69	; 0x45
10015e6e:	7809      	ldrb	r1, [r1, #0]
10015e70:	18a2      	adds	r2, r4, r2
10015e72:	3243      	adds	r2, #67	; 0x43
10015e74:	3302      	adds	r3, #2
10015e76:	7011      	strb	r1, [r2, #0]
10015e78:	e00f      	b.n	10015e9a <_printf_common+0x82>
10015e7a:	0022      	movs	r2, r4
10015e7c:	2301      	movs	r3, #1
10015e7e:	3219      	adds	r2, #25
10015e80:	9901      	ldr	r1, [sp, #4]
10015e82:	9800      	ldr	r0, [sp, #0]
10015e84:	9e08      	ldr	r6, [sp, #32]
10015e86:	47b0      	blx	r6
10015e88:	1c43      	adds	r3, r0, #1
10015e8a:	d00e      	beq.n	10015eaa <_printf_common+0x92>
10015e8c:	3501      	adds	r5, #1
10015e8e:	68e3      	ldr	r3, [r4, #12]
10015e90:	683a      	ldr	r2, [r7, #0]
10015e92:	1a9b      	subs	r3, r3, r2
10015e94:	429d      	cmp	r5, r3
10015e96:	dbf0      	blt.n	10015e7a <_printf_common+0x62>
10015e98:	e7da      	b.n	10015e50 <_printf_common+0x38>
10015e9a:	0022      	movs	r2, r4
10015e9c:	9901      	ldr	r1, [sp, #4]
10015e9e:	3243      	adds	r2, #67	; 0x43
10015ea0:	9800      	ldr	r0, [sp, #0]
10015ea2:	9d08      	ldr	r5, [sp, #32]
10015ea4:	47a8      	blx	r5
10015ea6:	1c43      	adds	r3, r0, #1
10015ea8:	d102      	bne.n	10015eb0 <_printf_common+0x98>
10015eaa:	2001      	movs	r0, #1
10015eac:	4240      	negs	r0, r0
10015eae:	e020      	b.n	10015ef2 <_printf_common+0xda>
10015eb0:	2306      	movs	r3, #6
10015eb2:	6820      	ldr	r0, [r4, #0]
10015eb4:	68e1      	ldr	r1, [r4, #12]
10015eb6:	683a      	ldr	r2, [r7, #0]
10015eb8:	4003      	ands	r3, r0
10015eba:	2500      	movs	r5, #0
10015ebc:	2b04      	cmp	r3, #4
10015ebe:	d103      	bne.n	10015ec8 <_printf_common+0xb0>
10015ec0:	1a8d      	subs	r5, r1, r2
10015ec2:	43eb      	mvns	r3, r5
10015ec4:	17db      	asrs	r3, r3, #31
10015ec6:	401d      	ands	r5, r3
10015ec8:	68a3      	ldr	r3, [r4, #8]
10015eca:	6922      	ldr	r2, [r4, #16]
10015ecc:	4293      	cmp	r3, r2
10015ece:	dd01      	ble.n	10015ed4 <_printf_common+0xbc>
10015ed0:	1a9b      	subs	r3, r3, r2
10015ed2:	18ed      	adds	r5, r5, r3
10015ed4:	2700      	movs	r7, #0
10015ed6:	42bd      	cmp	r5, r7
10015ed8:	d00a      	beq.n	10015ef0 <_printf_common+0xd8>
10015eda:	0022      	movs	r2, r4
10015edc:	2301      	movs	r3, #1
10015ede:	321a      	adds	r2, #26
10015ee0:	9901      	ldr	r1, [sp, #4]
10015ee2:	9800      	ldr	r0, [sp, #0]
10015ee4:	9e08      	ldr	r6, [sp, #32]
10015ee6:	47b0      	blx	r6
10015ee8:	1c43      	adds	r3, r0, #1
10015eea:	d0de      	beq.n	10015eaa <_printf_common+0x92>
10015eec:	3701      	adds	r7, #1
10015eee:	e7f2      	b.n	10015ed6 <_printf_common+0xbe>
10015ef0:	2000      	movs	r0, #0
10015ef2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

10015ef4 <_printf_i>:
10015ef4:	b5f0      	push	{r4, r5, r6, r7, lr}
10015ef6:	b08b      	sub	sp, #44	; 0x2c
10015ef8:	9206      	str	r2, [sp, #24]
10015efa:	000a      	movs	r2, r1
10015efc:	3243      	adds	r2, #67	; 0x43
10015efe:	9307      	str	r3, [sp, #28]
10015f00:	9005      	str	r0, [sp, #20]
10015f02:	9204      	str	r2, [sp, #16]
10015f04:	7e0a      	ldrb	r2, [r1, #24]
10015f06:	000c      	movs	r4, r1
10015f08:	9b10      	ldr	r3, [sp, #64]	; 0x40
10015f0a:	2a6e      	cmp	r2, #110	; 0x6e
10015f0c:	d100      	bne.n	10015f10 <_printf_i+0x1c>
10015f0e:	e0ab      	b.n	10016068 <_printf_i+0x174>
10015f10:	d811      	bhi.n	10015f36 <_printf_i+0x42>
10015f12:	2a63      	cmp	r2, #99	; 0x63
10015f14:	d022      	beq.n	10015f5c <_printf_i+0x68>
10015f16:	d809      	bhi.n	10015f2c <_printf_i+0x38>
10015f18:	2a00      	cmp	r2, #0
10015f1a:	d100      	bne.n	10015f1e <_printf_i+0x2a>
10015f1c:	e0b5      	b.n	1001608a <_printf_i+0x196>
10015f1e:	2a58      	cmp	r2, #88	; 0x58
10015f20:	d000      	beq.n	10015f24 <_printf_i+0x30>
10015f22:	e0c5      	b.n	100160b0 <_printf_i+0x1bc>
10015f24:	3145      	adds	r1, #69	; 0x45
10015f26:	700a      	strb	r2, [r1, #0]
10015f28:	4a81      	ldr	r2, [pc, #516]	; (10016130 <_printf_i+0x23c>)
10015f2a:	e04f      	b.n	10015fcc <_printf_i+0xd8>
10015f2c:	2a64      	cmp	r2, #100	; 0x64
10015f2e:	d01d      	beq.n	10015f6c <_printf_i+0x78>
10015f30:	2a69      	cmp	r2, #105	; 0x69
10015f32:	d01b      	beq.n	10015f6c <_printf_i+0x78>
10015f34:	e0bc      	b.n	100160b0 <_printf_i+0x1bc>
10015f36:	2a73      	cmp	r2, #115	; 0x73
10015f38:	d100      	bne.n	10015f3c <_printf_i+0x48>
10015f3a:	e0aa      	b.n	10016092 <_printf_i+0x19e>
10015f3c:	d809      	bhi.n	10015f52 <_printf_i+0x5e>
10015f3e:	2a6f      	cmp	r2, #111	; 0x6f
10015f40:	d029      	beq.n	10015f96 <_printf_i+0xa2>
10015f42:	2a70      	cmp	r2, #112	; 0x70
10015f44:	d000      	beq.n	10015f48 <_printf_i+0x54>
10015f46:	e0b3      	b.n	100160b0 <_printf_i+0x1bc>
10015f48:	2220      	movs	r2, #32
10015f4a:	6809      	ldr	r1, [r1, #0]
10015f4c:	430a      	orrs	r2, r1
10015f4e:	6022      	str	r2, [r4, #0]
10015f50:	e037      	b.n	10015fc2 <_printf_i+0xce>
10015f52:	2a75      	cmp	r2, #117	; 0x75
10015f54:	d01f      	beq.n	10015f96 <_printf_i+0xa2>
10015f56:	2a78      	cmp	r2, #120	; 0x78
10015f58:	d033      	beq.n	10015fc2 <_printf_i+0xce>
10015f5a:	e0a9      	b.n	100160b0 <_printf_i+0x1bc>
10015f5c:	000e      	movs	r6, r1
10015f5e:	681a      	ldr	r2, [r3, #0]
10015f60:	3642      	adds	r6, #66	; 0x42
10015f62:	1d11      	adds	r1, r2, #4
10015f64:	6019      	str	r1, [r3, #0]
10015f66:	6813      	ldr	r3, [r2, #0]
10015f68:	7033      	strb	r3, [r6, #0]
10015f6a:	e0a4      	b.n	100160b6 <_printf_i+0x1c2>
10015f6c:	6821      	ldr	r1, [r4, #0]
10015f6e:	681a      	ldr	r2, [r3, #0]
10015f70:	0608      	lsls	r0, r1, #24
10015f72:	d406      	bmi.n	10015f82 <_printf_i+0x8e>
10015f74:	0649      	lsls	r1, r1, #25
10015f76:	d504      	bpl.n	10015f82 <_printf_i+0x8e>
10015f78:	1d11      	adds	r1, r2, #4
10015f7a:	6019      	str	r1, [r3, #0]
10015f7c:	2300      	movs	r3, #0
10015f7e:	5ed5      	ldrsh	r5, [r2, r3]
10015f80:	e002      	b.n	10015f88 <_printf_i+0x94>
10015f82:	1d11      	adds	r1, r2, #4
10015f84:	6019      	str	r1, [r3, #0]
10015f86:	6815      	ldr	r5, [r2, #0]
10015f88:	2d00      	cmp	r5, #0
10015f8a:	da3b      	bge.n	10016004 <_printf_i+0x110>
10015f8c:	232d      	movs	r3, #45	; 0x2d
10015f8e:	9a04      	ldr	r2, [sp, #16]
10015f90:	426d      	negs	r5, r5
10015f92:	7013      	strb	r3, [r2, #0]
10015f94:	e036      	b.n	10016004 <_printf_i+0x110>
10015f96:	6821      	ldr	r1, [r4, #0]
10015f98:	681a      	ldr	r2, [r3, #0]
10015f9a:	0608      	lsls	r0, r1, #24
10015f9c:	d406      	bmi.n	10015fac <_printf_i+0xb8>
10015f9e:	0649      	lsls	r1, r1, #25
10015fa0:	d504      	bpl.n	10015fac <_printf_i+0xb8>
10015fa2:	6815      	ldr	r5, [r2, #0]
10015fa4:	1d11      	adds	r1, r2, #4
10015fa6:	6019      	str	r1, [r3, #0]
10015fa8:	b2ad      	uxth	r5, r5
10015faa:	e002      	b.n	10015fb2 <_printf_i+0xbe>
10015fac:	1d11      	adds	r1, r2, #4
10015fae:	6019      	str	r1, [r3, #0]
10015fb0:	6815      	ldr	r5, [r2, #0]
10015fb2:	4b5f      	ldr	r3, [pc, #380]	; (10016130 <_printf_i+0x23c>)
10015fb4:	7e22      	ldrb	r2, [r4, #24]
10015fb6:	9303      	str	r3, [sp, #12]
10015fb8:	2708      	movs	r7, #8
10015fba:	2a6f      	cmp	r2, #111	; 0x6f
10015fbc:	d01d      	beq.n	10015ffa <_printf_i+0x106>
10015fbe:	270a      	movs	r7, #10
10015fc0:	e01b      	b.n	10015ffa <_printf_i+0x106>
10015fc2:	0022      	movs	r2, r4
10015fc4:	2178      	movs	r1, #120	; 0x78
10015fc6:	3245      	adds	r2, #69	; 0x45
10015fc8:	7011      	strb	r1, [r2, #0]
10015fca:	4a5a      	ldr	r2, [pc, #360]	; (10016134 <_printf_i+0x240>)
10015fcc:	6819      	ldr	r1, [r3, #0]
10015fce:	9203      	str	r2, [sp, #12]
10015fd0:	1d08      	adds	r0, r1, #4
10015fd2:	6822      	ldr	r2, [r4, #0]
10015fd4:	6018      	str	r0, [r3, #0]
10015fd6:	680d      	ldr	r5, [r1, #0]
10015fd8:	0610      	lsls	r0, r2, #24
10015fda:	d402      	bmi.n	10015fe2 <_printf_i+0xee>
10015fdc:	0650      	lsls	r0, r2, #25
10015fde:	d500      	bpl.n	10015fe2 <_printf_i+0xee>
10015fe0:	b2ad      	uxth	r5, r5
10015fe2:	07d3      	lsls	r3, r2, #31
10015fe4:	d502      	bpl.n	10015fec <_printf_i+0xf8>
10015fe6:	2320      	movs	r3, #32
10015fe8:	431a      	orrs	r2, r3
10015fea:	6022      	str	r2, [r4, #0]
10015fec:	2710      	movs	r7, #16
10015fee:	2d00      	cmp	r5, #0
10015ff0:	d103      	bne.n	10015ffa <_printf_i+0x106>
10015ff2:	2320      	movs	r3, #32
10015ff4:	6822      	ldr	r2, [r4, #0]
10015ff6:	439a      	bics	r2, r3
10015ff8:	6022      	str	r2, [r4, #0]
10015ffa:	0023      	movs	r3, r4
10015ffc:	2200      	movs	r2, #0
10015ffe:	3343      	adds	r3, #67	; 0x43
10016000:	701a      	strb	r2, [r3, #0]
10016002:	e002      	b.n	1001600a <_printf_i+0x116>
10016004:	270a      	movs	r7, #10
10016006:	4b4a      	ldr	r3, [pc, #296]	; (10016130 <_printf_i+0x23c>)
10016008:	9303      	str	r3, [sp, #12]
1001600a:	6863      	ldr	r3, [r4, #4]
1001600c:	60a3      	str	r3, [r4, #8]
1001600e:	2b00      	cmp	r3, #0
10016010:	db09      	blt.n	10016026 <_printf_i+0x132>
10016012:	2204      	movs	r2, #4
10016014:	6821      	ldr	r1, [r4, #0]
10016016:	4391      	bics	r1, r2
10016018:	6021      	str	r1, [r4, #0]
1001601a:	2d00      	cmp	r5, #0
1001601c:	d105      	bne.n	1001602a <_printf_i+0x136>
1001601e:	9e04      	ldr	r6, [sp, #16]
10016020:	2b00      	cmp	r3, #0
10016022:	d011      	beq.n	10016048 <_printf_i+0x154>
10016024:	e07b      	b.n	1001611e <_printf_i+0x22a>
10016026:	2d00      	cmp	r5, #0
10016028:	d079      	beq.n	1001611e <_printf_i+0x22a>
1001602a:	9e04      	ldr	r6, [sp, #16]
1001602c:	0028      	movs	r0, r5
1001602e:	0039      	movs	r1, r7
10016030:	f7fd f8b2 	bl	10013198 <__aeabi_uidivmod>
10016034:	9b03      	ldr	r3, [sp, #12]
10016036:	3e01      	subs	r6, #1
10016038:	5c5b      	ldrb	r3, [r3, r1]
1001603a:	0028      	movs	r0, r5
1001603c:	7033      	strb	r3, [r6, #0]
1001603e:	0039      	movs	r1, r7
10016040:	f7fd f824 	bl	1001308c <__aeabi_uidiv>
10016044:	1e05      	subs	r5, r0, #0
10016046:	d1f1      	bne.n	1001602c <_printf_i+0x138>
10016048:	2f08      	cmp	r7, #8
1001604a:	d109      	bne.n	10016060 <_printf_i+0x16c>
1001604c:	6823      	ldr	r3, [r4, #0]
1001604e:	07db      	lsls	r3, r3, #31
10016050:	d506      	bpl.n	10016060 <_printf_i+0x16c>
10016052:	6863      	ldr	r3, [r4, #4]
10016054:	6922      	ldr	r2, [r4, #16]
10016056:	4293      	cmp	r3, r2
10016058:	dc02      	bgt.n	10016060 <_printf_i+0x16c>
1001605a:	2330      	movs	r3, #48	; 0x30
1001605c:	3e01      	subs	r6, #1
1001605e:	7033      	strb	r3, [r6, #0]
10016060:	9b04      	ldr	r3, [sp, #16]
10016062:	1b9b      	subs	r3, r3, r6
10016064:	6123      	str	r3, [r4, #16]
10016066:	e02b      	b.n	100160c0 <_printf_i+0x1cc>
10016068:	6809      	ldr	r1, [r1, #0]
1001606a:	681a      	ldr	r2, [r3, #0]
1001606c:	0608      	lsls	r0, r1, #24
1001606e:	d407      	bmi.n	10016080 <_printf_i+0x18c>
10016070:	0649      	lsls	r1, r1, #25
10016072:	d505      	bpl.n	10016080 <_printf_i+0x18c>
10016074:	1d11      	adds	r1, r2, #4
10016076:	6019      	str	r1, [r3, #0]
10016078:	6813      	ldr	r3, [r2, #0]
1001607a:	8aa2      	ldrh	r2, [r4, #20]
1001607c:	801a      	strh	r2, [r3, #0]
1001607e:	e004      	b.n	1001608a <_printf_i+0x196>
10016080:	1d11      	adds	r1, r2, #4
10016082:	6019      	str	r1, [r3, #0]
10016084:	6813      	ldr	r3, [r2, #0]
10016086:	6962      	ldr	r2, [r4, #20]
10016088:	601a      	str	r2, [r3, #0]
1001608a:	2300      	movs	r3, #0
1001608c:	9e04      	ldr	r6, [sp, #16]
1001608e:	6123      	str	r3, [r4, #16]
10016090:	e016      	b.n	100160c0 <_printf_i+0x1cc>
10016092:	681a      	ldr	r2, [r3, #0]
10016094:	1d11      	adds	r1, r2, #4
10016096:	6019      	str	r1, [r3, #0]
10016098:	6816      	ldr	r6, [r2, #0]
1001609a:	2100      	movs	r1, #0
1001609c:	6862      	ldr	r2, [r4, #4]
1001609e:	0030      	movs	r0, r6
100160a0:	f000 f92a 	bl	100162f8 <memchr>
100160a4:	2800      	cmp	r0, #0
100160a6:	d001      	beq.n	100160ac <_printf_i+0x1b8>
100160a8:	1b80      	subs	r0, r0, r6
100160aa:	6060      	str	r0, [r4, #4]
100160ac:	6863      	ldr	r3, [r4, #4]
100160ae:	e003      	b.n	100160b8 <_printf_i+0x1c4>
100160b0:	0026      	movs	r6, r4
100160b2:	3642      	adds	r6, #66	; 0x42
100160b4:	7032      	strb	r2, [r6, #0]
100160b6:	2301      	movs	r3, #1
100160b8:	6123      	str	r3, [r4, #16]
100160ba:	2300      	movs	r3, #0
100160bc:	9a04      	ldr	r2, [sp, #16]
100160be:	7013      	strb	r3, [r2, #0]
100160c0:	9b07      	ldr	r3, [sp, #28]
100160c2:	aa09      	add	r2, sp, #36	; 0x24
100160c4:	9300      	str	r3, [sp, #0]
100160c6:	0021      	movs	r1, r4
100160c8:	9b06      	ldr	r3, [sp, #24]
100160ca:	9805      	ldr	r0, [sp, #20]
100160cc:	f7ff fea4 	bl	10015e18 <_printf_common>
100160d0:	1c43      	adds	r3, r0, #1
100160d2:	d102      	bne.n	100160da <_printf_i+0x1e6>
100160d4:	2001      	movs	r0, #1
100160d6:	4240      	negs	r0, r0
100160d8:	e027      	b.n	1001612a <_printf_i+0x236>
100160da:	6923      	ldr	r3, [r4, #16]
100160dc:	0032      	movs	r2, r6
100160de:	9906      	ldr	r1, [sp, #24]
100160e0:	9805      	ldr	r0, [sp, #20]
100160e2:	9d07      	ldr	r5, [sp, #28]
100160e4:	47a8      	blx	r5
100160e6:	1c43      	adds	r3, r0, #1
100160e8:	d0f4      	beq.n	100160d4 <_printf_i+0x1e0>
100160ea:	6823      	ldr	r3, [r4, #0]
100160ec:	2500      	movs	r5, #0
100160ee:	079b      	lsls	r3, r3, #30
100160f0:	d40f      	bmi.n	10016112 <_printf_i+0x21e>
100160f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
100160f4:	68e0      	ldr	r0, [r4, #12]
100160f6:	4298      	cmp	r0, r3
100160f8:	da17      	bge.n	1001612a <_printf_i+0x236>
100160fa:	0018      	movs	r0, r3
100160fc:	e015      	b.n	1001612a <_printf_i+0x236>
100160fe:	0022      	movs	r2, r4
10016100:	2301      	movs	r3, #1
10016102:	3219      	adds	r2, #25
10016104:	9906      	ldr	r1, [sp, #24]
10016106:	9805      	ldr	r0, [sp, #20]
10016108:	9e07      	ldr	r6, [sp, #28]
1001610a:	47b0      	blx	r6
1001610c:	1c43      	adds	r3, r0, #1
1001610e:	d0e1      	beq.n	100160d4 <_printf_i+0x1e0>
10016110:	3501      	adds	r5, #1
10016112:	68e3      	ldr	r3, [r4, #12]
10016114:	9a09      	ldr	r2, [sp, #36]	; 0x24
10016116:	1a9b      	subs	r3, r3, r2
10016118:	429d      	cmp	r5, r3
1001611a:	dbf0      	blt.n	100160fe <_printf_i+0x20a>
1001611c:	e7e9      	b.n	100160f2 <_printf_i+0x1fe>
1001611e:	0026      	movs	r6, r4
10016120:	9b03      	ldr	r3, [sp, #12]
10016122:	3642      	adds	r6, #66	; 0x42
10016124:	781b      	ldrb	r3, [r3, #0]
10016126:	7033      	strb	r3, [r6, #0]
10016128:	e78e      	b.n	10016048 <_printf_i+0x154>
1001612a:	b00b      	add	sp, #44	; 0x2c
1001612c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001612e:	46c0      	nop			; (mov r8, r8)
10016130:	1001839d 	.word	0x1001839d
10016134:	100183ae 	.word	0x100183ae

10016138 <_putc_r>:
10016138:	b570      	push	{r4, r5, r6, lr}
1001613a:	0006      	movs	r6, r0
1001613c:	000d      	movs	r5, r1
1001613e:	0014      	movs	r4, r2
10016140:	2800      	cmp	r0, #0
10016142:	d004      	beq.n	1001614e <_putc_r+0x16>
10016144:	6983      	ldr	r3, [r0, #24]
10016146:	2b00      	cmp	r3, #0
10016148:	d101      	bne.n	1001614e <_putc_r+0x16>
1001614a:	f7ff fc29 	bl	100159a0 <__sinit>
1001614e:	4b12      	ldr	r3, [pc, #72]	; (10016198 <_putc_r+0x60>)
10016150:	429c      	cmp	r4, r3
10016152:	d101      	bne.n	10016158 <_putc_r+0x20>
10016154:	6874      	ldr	r4, [r6, #4]
10016156:	e008      	b.n	1001616a <_putc_r+0x32>
10016158:	4b10      	ldr	r3, [pc, #64]	; (1001619c <_putc_r+0x64>)
1001615a:	429c      	cmp	r4, r3
1001615c:	d101      	bne.n	10016162 <_putc_r+0x2a>
1001615e:	68b4      	ldr	r4, [r6, #8]
10016160:	e003      	b.n	1001616a <_putc_r+0x32>
10016162:	4b0f      	ldr	r3, [pc, #60]	; (100161a0 <_putc_r+0x68>)
10016164:	429c      	cmp	r4, r3
10016166:	d100      	bne.n	1001616a <_putc_r+0x32>
10016168:	68f4      	ldr	r4, [r6, #12]
1001616a:	68a3      	ldr	r3, [r4, #8]
1001616c:	3b01      	subs	r3, #1
1001616e:	60a3      	str	r3, [r4, #8]
10016170:	2b00      	cmp	r3, #0
10016172:	da05      	bge.n	10016180 <_putc_r+0x48>
10016174:	69a2      	ldr	r2, [r4, #24]
10016176:	4293      	cmp	r3, r2
10016178:	db08      	blt.n	1001618c <_putc_r+0x54>
1001617a:	b2eb      	uxtb	r3, r5
1001617c:	2b0a      	cmp	r3, #10
1001617e:	d005      	beq.n	1001618c <_putc_r+0x54>
10016180:	6823      	ldr	r3, [r4, #0]
10016182:	b2e8      	uxtb	r0, r5
10016184:	1c5a      	adds	r2, r3, #1
10016186:	6022      	str	r2, [r4, #0]
10016188:	701d      	strb	r5, [r3, #0]
1001618a:	e004      	b.n	10016196 <_putc_r+0x5e>
1001618c:	0022      	movs	r2, r4
1001618e:	0029      	movs	r1, r5
10016190:	0030      	movs	r0, r6
10016192:	f7ff fa43 	bl	1001561c <__swbuf_r>
10016196:	bd70      	pop	{r4, r5, r6, pc}
10016198:	1001832c 	.word	0x1001832c
1001619c:	1001834c 	.word	0x1001834c
100161a0:	1001836c 	.word	0x1001836c

100161a4 <__sread>:
100161a4:	b570      	push	{r4, r5, r6, lr}
100161a6:	000c      	movs	r4, r1
100161a8:	250e      	movs	r5, #14
100161aa:	5f49      	ldrsh	r1, [r1, r5]
100161ac:	f000 f8b0 	bl	10016310 <_read_r>
100161b0:	2800      	cmp	r0, #0
100161b2:	db03      	blt.n	100161bc <__sread+0x18>
100161b4:	6d63      	ldr	r3, [r4, #84]	; 0x54
100161b6:	181b      	adds	r3, r3, r0
100161b8:	6563      	str	r3, [r4, #84]	; 0x54
100161ba:	e003      	b.n	100161c4 <__sread+0x20>
100161bc:	89a2      	ldrh	r2, [r4, #12]
100161be:	4b02      	ldr	r3, [pc, #8]	; (100161c8 <__sread+0x24>)
100161c0:	4013      	ands	r3, r2
100161c2:	81a3      	strh	r3, [r4, #12]
100161c4:	bd70      	pop	{r4, r5, r6, pc}
100161c6:	46c0      	nop			; (mov r8, r8)
100161c8:	ffffefff 	.word	0xffffefff

100161cc <__swrite>:
100161cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100161ce:	001f      	movs	r7, r3
100161d0:	898b      	ldrh	r3, [r1, #12]
100161d2:	0005      	movs	r5, r0
100161d4:	000c      	movs	r4, r1
100161d6:	0016      	movs	r6, r2
100161d8:	05db      	lsls	r3, r3, #23
100161da:	d505      	bpl.n	100161e8 <__swrite+0x1c>
100161dc:	230e      	movs	r3, #14
100161de:	5ec9      	ldrsh	r1, [r1, r3]
100161e0:	2200      	movs	r2, #0
100161e2:	2302      	movs	r3, #2
100161e4:	f000 f874 	bl	100162d0 <_lseek_r>
100161e8:	89a2      	ldrh	r2, [r4, #12]
100161ea:	4b05      	ldr	r3, [pc, #20]	; (10016200 <__swrite+0x34>)
100161ec:	0028      	movs	r0, r5
100161ee:	4013      	ands	r3, r2
100161f0:	81a3      	strh	r3, [r4, #12]
100161f2:	0032      	movs	r2, r6
100161f4:	230e      	movs	r3, #14
100161f6:	5ee1      	ldrsh	r1, [r4, r3]
100161f8:	003b      	movs	r3, r7
100161fa:	f000 f81f 	bl	1001623c <_write_r>
100161fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10016200:	ffffefff 	.word	0xffffefff

10016204 <__sseek>:
10016204:	b570      	push	{r4, r5, r6, lr}
10016206:	000c      	movs	r4, r1
10016208:	250e      	movs	r5, #14
1001620a:	5f49      	ldrsh	r1, [r1, r5]
1001620c:	f000 f860 	bl	100162d0 <_lseek_r>
10016210:	89a3      	ldrh	r3, [r4, #12]
10016212:	1c42      	adds	r2, r0, #1
10016214:	d103      	bne.n	1001621e <__sseek+0x1a>
10016216:	4a05      	ldr	r2, [pc, #20]	; (1001622c <__sseek+0x28>)
10016218:	4013      	ands	r3, r2
1001621a:	81a3      	strh	r3, [r4, #12]
1001621c:	e004      	b.n	10016228 <__sseek+0x24>
1001621e:	2280      	movs	r2, #128	; 0x80
10016220:	0152      	lsls	r2, r2, #5
10016222:	4313      	orrs	r3, r2
10016224:	81a3      	strh	r3, [r4, #12]
10016226:	6560      	str	r0, [r4, #84]	; 0x54
10016228:	bd70      	pop	{r4, r5, r6, pc}
1001622a:	46c0      	nop			; (mov r8, r8)
1001622c:	ffffefff 	.word	0xffffefff

10016230 <__sclose>:
10016230:	b510      	push	{r4, lr}
10016232:	230e      	movs	r3, #14
10016234:	5ec9      	ldrsh	r1, [r1, r3]
10016236:	f000 f815 	bl	10016264 <_close_r>
1001623a:	bd10      	pop	{r4, pc}

1001623c <_write_r>:
1001623c:	b570      	push	{r4, r5, r6, lr}
1001623e:	0005      	movs	r5, r0
10016240:	0008      	movs	r0, r1
10016242:	0011      	movs	r1, r2
10016244:	2200      	movs	r2, #0
10016246:	4c06      	ldr	r4, [pc, #24]	; (10016260 <_write_r+0x24>)
10016248:	6022      	str	r2, [r4, #0]
1001624a:	001a      	movs	r2, r3
1001624c:	f7f7 fac0 	bl	1000d7d0 <_write>
10016250:	1c43      	adds	r3, r0, #1
10016252:	d103      	bne.n	1001625c <_write_r+0x20>
10016254:	6823      	ldr	r3, [r4, #0]
10016256:	2b00      	cmp	r3, #0
10016258:	d000      	beq.n	1001625c <_write_r+0x20>
1001625a:	602b      	str	r3, [r5, #0]
1001625c:	bd70      	pop	{r4, r5, r6, pc}
1001625e:	46c0      	nop			; (mov r8, r8)
10016260:	1001b32c 	.word	0x1001b32c

10016264 <_close_r>:
10016264:	2300      	movs	r3, #0
10016266:	b570      	push	{r4, r5, r6, lr}
10016268:	4c06      	ldr	r4, [pc, #24]	; (10016284 <_close_r+0x20>)
1001626a:	0005      	movs	r5, r0
1001626c:	0008      	movs	r0, r1
1001626e:	6023      	str	r3, [r4, #0]
10016270:	f7f7 fae8 	bl	1000d844 <_close>
10016274:	1c43      	adds	r3, r0, #1
10016276:	d103      	bne.n	10016280 <_close_r+0x1c>
10016278:	6823      	ldr	r3, [r4, #0]
1001627a:	2b00      	cmp	r3, #0
1001627c:	d000      	beq.n	10016280 <_close_r+0x1c>
1001627e:	602b      	str	r3, [r5, #0]
10016280:	bd70      	pop	{r4, r5, r6, pc}
10016282:	46c0      	nop			; (mov r8, r8)
10016284:	1001b32c 	.word	0x1001b32c

10016288 <_fstat_r>:
10016288:	2300      	movs	r3, #0
1001628a:	b570      	push	{r4, r5, r6, lr}
1001628c:	4c06      	ldr	r4, [pc, #24]	; (100162a8 <_fstat_r+0x20>)
1001628e:	0005      	movs	r5, r0
10016290:	0008      	movs	r0, r1
10016292:	0011      	movs	r1, r2
10016294:	6023      	str	r3, [r4, #0]
10016296:	f7f7 fad9 	bl	1000d84c <_fstat>
1001629a:	1c43      	adds	r3, r0, #1
1001629c:	d103      	bne.n	100162a6 <_fstat_r+0x1e>
1001629e:	6823      	ldr	r3, [r4, #0]
100162a0:	2b00      	cmp	r3, #0
100162a2:	d000      	beq.n	100162a6 <_fstat_r+0x1e>
100162a4:	602b      	str	r3, [r5, #0]
100162a6:	bd70      	pop	{r4, r5, r6, pc}
100162a8:	1001b32c 	.word	0x1001b32c

100162ac <_isatty_r>:
100162ac:	2300      	movs	r3, #0
100162ae:	b570      	push	{r4, r5, r6, lr}
100162b0:	4c06      	ldr	r4, [pc, #24]	; (100162cc <_isatty_r+0x20>)
100162b2:	0005      	movs	r5, r0
100162b4:	0008      	movs	r0, r1
100162b6:	6023      	str	r3, [r4, #0]
100162b8:	f7f7 face 	bl	1000d858 <_isatty>
100162bc:	1c43      	adds	r3, r0, #1
100162be:	d103      	bne.n	100162c8 <_isatty_r+0x1c>
100162c0:	6823      	ldr	r3, [r4, #0]
100162c2:	2b00      	cmp	r3, #0
100162c4:	d000      	beq.n	100162c8 <_isatty_r+0x1c>
100162c6:	602b      	str	r3, [r5, #0]
100162c8:	bd70      	pop	{r4, r5, r6, pc}
100162ca:	46c0      	nop			; (mov r8, r8)
100162cc:	1001b32c 	.word	0x1001b32c

100162d0 <_lseek_r>:
100162d0:	b570      	push	{r4, r5, r6, lr}
100162d2:	0005      	movs	r5, r0
100162d4:	0008      	movs	r0, r1
100162d6:	0011      	movs	r1, r2
100162d8:	2200      	movs	r2, #0
100162da:	4c06      	ldr	r4, [pc, #24]	; (100162f4 <_lseek_r+0x24>)
100162dc:	6022      	str	r2, [r4, #0]
100162de:	001a      	movs	r2, r3
100162e0:	f7f7 fabc 	bl	1000d85c <_lseek>
100162e4:	1c43      	adds	r3, r0, #1
100162e6:	d103      	bne.n	100162f0 <_lseek_r+0x20>
100162e8:	6823      	ldr	r3, [r4, #0]
100162ea:	2b00      	cmp	r3, #0
100162ec:	d000      	beq.n	100162f0 <_lseek_r+0x20>
100162ee:	602b      	str	r3, [r5, #0]
100162f0:	bd70      	pop	{r4, r5, r6, pc}
100162f2:	46c0      	nop			; (mov r8, r8)
100162f4:	1001b32c 	.word	0x1001b32c

100162f8 <memchr>:
100162f8:	b2c9      	uxtb	r1, r1
100162fa:	1882      	adds	r2, r0, r2
100162fc:	4290      	cmp	r0, r2
100162fe:	d004      	beq.n	1001630a <memchr+0x12>
10016300:	7803      	ldrb	r3, [r0, #0]
10016302:	428b      	cmp	r3, r1
10016304:	d002      	beq.n	1001630c <memchr+0x14>
10016306:	3001      	adds	r0, #1
10016308:	e7f8      	b.n	100162fc <memchr+0x4>
1001630a:	2000      	movs	r0, #0
1001630c:	4770      	bx	lr
	...

10016310 <_read_r>:
10016310:	b570      	push	{r4, r5, r6, lr}
10016312:	0005      	movs	r5, r0
10016314:	0008      	movs	r0, r1
10016316:	0011      	movs	r1, r2
10016318:	2200      	movs	r2, #0
1001631a:	4c06      	ldr	r4, [pc, #24]	; (10016334 <_read_r+0x24>)
1001631c:	6022      	str	r2, [r4, #0]
1001631e:	001a      	movs	r2, r3
10016320:	f7f7 fa36 	bl	1000d790 <_read>
10016324:	1c43      	adds	r3, r0, #1
10016326:	d103      	bne.n	10016330 <_read_r+0x20>
10016328:	6823      	ldr	r3, [r4, #0]
1001632a:	2b00      	cmp	r3, #0
1001632c:	d000      	beq.n	10016330 <_read_r+0x20>
1001632e:	602b      	str	r3, [r5, #0]
10016330:	bd70      	pop	{r4, r5, r6, pc}
10016332:	46c0      	nop			; (mov r8, r8)
10016334:	1001b32c 	.word	0x1001b32c
10016338:	00000d0a 	.word	0x00000d0a
1001633c:	000003e8 	.word	0x000003e8

10016340 <test>:
10016340:	00000083 00004000 00000200 00c800c8     .....@..........
10016350:	41a00000 42700000 3f000000 3e666666     ...A..pB...?fff>
10016360:	3f2ccccd 3f000000 3f000000 0000000a     ..,?...?...?....
10016370:	72617453 676e6974 61694220 6f4c2073     Starting Bias Lo
10016380:	5220706f 73646165 00000000 706d6153     op Reads....Samp
10016390:	3a73656c 0a642520 00000000 65636341     les: %d.....Acce
100163a0:	666f206c 74657366 74616420 57482061     l offset data HW
100163b0:	62205453 253d7469 25203a64 66342e37     ST bit=%d: %7.4f
100163c0:	2e372520 25206634 66342e37 00000a0d      %7.4f %7.4f....
100163d0:	6f727947 66666f20 20746573 61746164     Gyro offset data
100163e0:	53574820 69622054 64253d74 3725203a      HWST bit=%d: %7
100163f0:	2066342e 342e3725 37252066 0d66342e     .4f %7.4f %7.4f.
10016400:	0000000a 78352325 2325203a 0a0d7835     ....%#5x: %#5x..
10016410:	00000000 706d6f43 20737361 20746f6e     ....Compass not 
10016420:	6e756f66 00002e64 72617453 676e6974     found...Starting
10016430:	55504d20 30303536 53574820 000d2154      MPU6500 HWST!..
10016440:	72746552 69766569 4220676e 65736169     Retrieving Biase
10016450:	00000d73 72746552 69766569 4220676e     s...Retrieving B
10016460:	65736169 72452073 20726f72 6f70202d     iases Error - po
10016470:	62697373 4920656c 65204332 726f7272     ssible I2C error
10016480:	00000000 72746552 69766569 5320676e     ....Retrieving S
10016490:	69422054 73657361 00000000 72746552     T Biases....Retr
100164a0:	69766569 5320676e 69422054 73657361     ieving ST Biases
100164b0:	72724520 2d20726f 736f7020 6c626973      Error - possibl
100164c0:	32492065 72652043 00726f72 64616552     e I2C error.Read
100164d0:	20676e69 2050544f 69676552 72657473     ing OTP Register
100164e0:	72724520 002e726f 65636341 544f206c      Error..Accel OT
100164f0:	64253a50 6425202c 6425202c 0000000a     P:%d, %d, %d....
10016500:	45434341 52433a4c 52455449 41204149     ACCEL:CRITERIA A
10016510:	00000000 73616942 6968535f 253d7466     ....Bias_Shift=%
10016520:	66342e37 6942202c 525f7361 253d6765     7.4f, Bias_Reg=%
10016530:	66342e37 6942202c 485f7361 3d545357     7.4f, Bias_HWST=
10016540:	342e3725 000a0d66 2050544f 756c6176     %7.4f...OTP valu
10016550:	25203a65 66342e37 00000a0d 69746172     e: %7.4f....rati
10016560:	37253d6f 2c66342e 72687420 6f687365     o=%7.4f, thresho
10016570:	253d646c 66342e37 00000a0d 45434341     ld=%7.4f....ACCE
10016580:	6146204c 41206c69 20736978 6425203d     L Fail Axis = %d
10016590:	0000000a 45434341 52433a4c 52455449     ....ACCEL:CRITER
100165a0:	42204149 0000000d 206e694d 203a474d     IA B....Min MG: 
100165b0:	342e3725 000a0d66 2078614d 203a474d     %7.4f...Max MG: 
100165c0:	342e3725 000a0d66 73616942 6968735f     %7.4f...Bias_shi
100165d0:	253d7466 66342e37 7473202c 2e37253d     ft=%7.4f, st=%7.
100165e0:	202c6634 3d676572 342e3725 00000a66     4f, reg=%7.4f...
100165f0:	65636341 4146206c 61204c49 3a736978     Accel FAIL axis:
10016600:	3c206425 3232203d 20676d35 3e20726f     %d <= 225mg or >
10016610:	3736203d 0a676d35 00000000 65636341     = 675mg.....Acce
10016620:	52433a6c 52455449 43204149 6962203a     l:CRITERIA C: bi
10016630:	6c207361 20737365 6e616874 2e372520     as less than %7.
10016640:	000a6634 4c494146 203a4445 65636341     4f..FAILED: Acce
10016650:	7861206c 253a7369 203d2064 20646c25     l axis:%d = %ld 
10016660:	3035203e 0a676d30 00000000 65636341     > 500mg.....Acce
10016670:	6553206c 5420666c 20747365 75736552     l Self Test Resu
10016680:	3a73746c 0a642520 00000000 6f727947     lts: %d.....Gyro
10016690:	50544f20 2c64253a 2c642520 0d642520      OTP:%d, %d, %d.
100166a0:	0000000a 4f525947 4952433a 49524554     ....GYRO:CRITERI
100166b0:	00412041 6f727947 69614620 7841206c     A A.Gyro Fail Ax
100166c0:	3d207369 0a642520 00000000 4f525947     is = %d.....GYRO
100166d0:	4952433a 49524554 0d422041 00000000     :CRITERIA B.....
100166e0:	2078614d 3a535044 2e372520 0a0d6634     Max DPS: %7.4f..
100166f0:	00000000 4f525947 49414620 7861204c     ....GYRO FAIL ax
10016700:	253a7369 72672064 65746165 68742072     is:%d greater th
10016710:	36206e61 73706430 0000000a 6f727947     an 60dps....Gyro
10016720:	4952433a 49524554 3a432041 61696220     :CRITERIA C: bia
10016730:	656c2073 74207373 206e6168 342e3725     s less than %7.4
10016740:	00000a66 4c494146 203a4445 6f727947     f...FAILED: Gyro
10016750:	69786120 64253a73 25203d20 3e20646c      axis:%d = %ld >
10016760:	64303220 000a7370 6f727947 6c655320      20dps..Gyro Sel
10016770:	65542066 52207473 6c757365 203a7374     f Test Results: 
10016780:	000a6425 706d6f43 20737361 666c6553     %d..Compass Self
10016790:	73655420 65522074 746c7573 25203a73      Test Results: %
100167a0:	00000a64 74697845 20676e69 54535748     d...Exiting HWST
100167b0:	00000000                                ....

100167b4 <hw>:
100167b4:	04000069 01410080 01000000 00001333     i.....A.....3...

100167c4 <reg>:
100167c4:	0c1a1975 1c1b236a 201f1e1d 3b437472     u...j#..... rtC;
100167d4:	3a393841 376c6b69 6d24776f 2625706e     A89:ikl7ow$mnp%&
100167e4:	2a292827 67646334 00000049 006ccd4c     '()*4cdgI...L.l.
100167f4:	002cc90c 00765636 00664626 c4abf2fe     ..,.6Vv.&Ff.....
10016804:	dfdff1aa dfdfafbb 8db3aab8 350d98b4     ...............5
10016814:	0000005d aaaaaab8 c5c388b0 000000c7     ]...............
10016824:	f3b9b1d8 b691a38b 00d9b409 f3b9b1da     ................
10016834:	b691a38b 00dab4da 736d735b 656c625f     ........[sms_ble
10016844:	6961705f 65725f72 73657571 6e665f74     _pair_request_fn
10016854:	6150095d 6e697269 65722067 73657571     ].Pairing reques
10016864:	2e2e2e74 656e4220 64252077 4c42202c     t... Bnew %d, BL
10016874:	78302045 78323025 3154202c 2c642520     E 0x%02x, T1 %d,
10016884:	20325420 00006425 736d735b 656c625f      T2 %d..[sms_ble
10016894:	776f705f 645f7265 5d6e776f 00000000     _power_down]....
100168a4:	736d735b 656c625f 776f705f 645f7265     [sms_ble_power_d
100168b4:	5d6e776f 6f745309 6e697070 6f632067     own].Stopping co
100168c4:	6e616d6d 65722064 76696563 64206465     mmand received d
100168d4:	6e697275 64612067 74726576 6d657369     uring advertisem
100168e4:	2e746e65 6f745320 6e697070 2e2e2e67     ent. Stopping...
100168f4:	00000020 6c696166 21216465 00000021      ...failed!!!...
10016904:	656e6f64 00000021 736d735b 656c625f     done!...[sms_ble
10016914:	776f705f 645f7265 5d6e776f 65440909     _power_down]..De
10016924:	65636976 69617020 2e646572 64202e2e     vice paired... d
10016934:	62617369 676e696c 746e6920 75727265     isabling interru
10016944:	20737470 77732026 68637469 20676e69     pts & switching 
10016954:	6e776f64 6e657320 73726f73 00000000     down sensors....
10016964:	736d735b 656c625f 776f705f 645f7265     [sms_ble_power_d
10016974:	5d6e776f 75430909 6e657272 20796c74     own]..Currently 
10016984:	69646e69 69746163 0000676e 736d735b     indicating..[sms
10016994:	656c625f 776f705f 645f7265 5d6e776f     _ble_power_down]
100169a4:	65440909 65636976 6e6f6320 7463656e     ..Device connect
100169b4:	2e2e6465 6964202e 6e6f6373 7463656e     ed... disconnect
100169c4:	00676e69 736d735b 656c625f 7664615f     ing.[sms_ble_adv
100169d4:	7065725f 5f74726f 095d6e66 65766441     _report_fn].Adve
100169e4:	73697472 6e656d65 69742074 756f656d     rtisement timeou
100169f4:	2e2e2e74 00000000 736d735b 656c625f     t.......[sms_ble
10016a04:	6e6f635f 7463656e 665f6465 09095d6e     _connected_fn]..
10016a14:	69766544 20736563 6e6e6f63 65746365     Devices connecte
10016a24:	2e2e2e64 00000000 736d735b 656c625f     d.......[sms_ble
10016a34:	6961705f 5f646572 005d6e66 736d735b     _paired_fn].[sms
10016a44:	656c625f 7664615f 69747265 095d6573     _ble_advertise].
10016a54:	65766441 73697472 6e656d65 61642074     Advertisement da
10016a64:	73206174 66207465 656c6961 00002164     ta set failed!..
10016a74:	736d735b 656c625f 7664615f 69747265     [sms_ble_adverti
10016a84:	095d6573 454c4209 61745320 64657472     se]..BLE Started
10016a94:	76644120 69747265 656d6573 0000746e      Advertisement..
10016aa4:	736d735b 7265735f 65636976 7664615f     [sms_service_adv
10016ab4:	69747265 095d6573 20454c42 65766441     ertise].BLE Adve
10016ac4:	73697472 6e656d65 74732074 20747261     rtisement start 
10016ad4:	6c696166 203a6465 73616572 30206e6f     failed: reason 0
10016ae4:	00782578 736d735b 656c625f 7369645f     x%x.[sms_ble_dis
10016af4:	6e6e6f63 65746365 6e665f64 6550095d     connected_fn].Pe
10016b04:	64207265 6f637369 63656e6e 2e646574     er disconnected.
10016b14:	42202e2e 2077656e 202c6425 20454c42     .. Bnew %d, BLE 
10016b24:	30257830 202c7832 25203154 54202c64     0x%02x, T1 %d, T
10016b34:	64252032 00000000 646e6573 2e676e69     2 %d....sending.
10016b44:	00002e2e 746e6573 00000021              ....sent!...

10016b50 <sms_ble_gap_cb>:
	...
10016b5c:	1000a055 00000000 1000a089 1000a199     U...............
	...
10016b74:	1000a0d1 10009e71 00000000 00000000     ....q...........
	...

10016b9c <sms_ble_gatt_server_cb>:
10016b9c:	10009ebd 10009ef9 00000000 00000000     ................
	...
10016bc4:	736d735b 7475625f 5f6e6f74 666e6f63     [sms_button_conf
10016bd4:	72756769 70095d65 6c626f72 77206d65     igure].problem w
10016be4:	656c6968 74657320 676e6974 20707520     hile setting up 
10016bf4:	74747562 00306e6f 736d735b 7475625f     button0.[sms_but
10016c04:	5f6e6f74 666e6f63 72756769 50095d65     ton_configure].P
10016c14:	6c626f72 77206d65 656c6968 74657320     roblem while set
10016c24:	676e6974 20707520 74747562 00316e6f     ting up button1.
10016c34:	736d735b 7475625f 5f6e6f74 666e6f63     [sms_button_conf
10016c44:	72756769 50095d65 6c626f72 77206d65     igure].Problem w
10016c54:	656c6968 74657320 676e6974 20707520     hile setting up 
10016c64:	414c5058 44454e49 65737520 75622072     XPLAINED user bu
10016c74:	6e6f7474 00000000 736d735b 7475625f     tton....[sms_but
10016c84:	5f6e6f74 5f746567 74617473 09095d65     ton_get_state]..
10016c94:	74747542 73206e6f 65746174 6425203a     Button state: %d
10016ca4:	00642520 736d735b 7475625f 5f6e6f74      %d.[sms_button_
10016cb4:	2d5d6e66 00000030 736d735b 7475625f     fn]-0...[sms_but
10016cc4:	5f6e6f74 2d5d6e66 00000031 736d735b     ton_fn]-1...[sms
10016cd4:	7475625f 5f6e6f74 095d6e66 61745309     _button_fn]..Sta
10016ce4:	6e697472 65732067 726f736e 42282073     rting sensors (B
10016cf4:	00002930 736d735b 7475625f 5f6e6f74     0)..[sms_button_
10016d04:	095d6e66 6f4e0909 73752074 73206465     fn]...Not used s
10016d14:	65746174 2e2e2e73 00000000 736d735b     tates.......[sms
10016d24:	7475625f 5f6e6f74 095d6e66 61745309     _button_fn]..Sta
10016d34:	6e697472 65732067 726f736e 42282073     rting sensors (B
10016d44:	00002931 736d735b 7475625f 5f6e6f74     1)..[sms_button_
10016d54:	095d6e66 6c697453 6e69206c 61636964     fn].Still indica
10016d64:	676e6974 002e2e2e 736d735b 7475625f     ting....[sms_but
10016d74:	5f6e6f74 69666564 735f656e 69767265     ton_define_servi
10016d84:	5d736563 72655309 65636976 65642073     ces].Services de
10016d94:	696e6966 6620676e 656c6961 72202c64     fining failed, r
10016da4:	6f736165 7830206e 00007825 736d735b     eason 0x%x..[sms
10016db4:	7475625f 5f6e6f74 69666564 735f656e     _button_define_s
10016dc4:	69767265 5d736563 72655309 65636976     ervices].Service
10016dd4:	65642073 656e6966 53202c64 6220534d     s defined, SMS b
10016de4:	6f747475 6168206e 656c646e 6425203a     utton handle: %d
10016df4:	00000000 626f7250 206d656c 6c696877     ....Problem whil
10016e04:	65732065 6e697474 70672067 70206f69     e setting gpio p
10016e14:	00006e69 2e2e7325 4209092e 6572702d     in..%s.....B-pre
10016e24:	64252076 2d42202c 20727563 202c6425     v %d, B-cur %d, 
10016e34:	20454c42 30257830 202c7832 25203154     BLE 0x%02x, T1 %
10016e44:	54202c64 64252032 4d53202c 64252053     d, T2 %d, SMS %d
10016e54:	00000000 206f2f74 00006425 736d735b     ....t/o %d..[sms
10016e64:	756d695f 6e6f635f 75676966 675f6572     _imu_configure_g
10016e74:	5d6f6970 6f725009 6d656c62 69687720     pio].Problem whi
10016e84:	7320656c 69747465 7520676e 4d492070     le setting up IM
10016e94:	52442055 70205944 00006e69 736d735b     U DRDY pin..[sms
10016ea4:	756d695f 6e6f635f 75676966 675f6572     _imu_configure_g
10016eb4:	5d6f6970 6f725009 6d656c62 69687720     pio].Problem whi
10016ec4:	7320656c 69747465 7520676e 504d2070     le setting up MP
10016ed4:	43562055 69702043 0000006e 74696e49     U VCC pin...Init
10016ee4:	696c6169 676e697a 55504d20 002e2e2e     ializing MPU....
10016ef4:	69616620 2164656c 00000000 74746553      failed!....Sett
10016f04:	20676e69 4d207075 2e2e5550 0000002e     ing up MPU......
10016f14:	736d735b 75706d5f 6665645f 5f656e69     [sms_mpu_define_
10016f24:	76726573 73656369 6553095d 63697672     services].Servic
10016f34:	64207365 6e696665 20676e69 6c696166     es defining fail
10016f44:	202c6465 73616572 30206e6f 00782578     ed, reason 0x%x.
10016f54:	736d735b 75706d5f 6665645f 5f656e69     [sms_mpu_define_
10016f64:	76726573 73656369 6553095d 63697672     services].Servic
10016f74:	64207365 6e696665 202c6465 20534d53     es defined, SMS 
10016f84:	2055504d 646e6168 203a656c 00006425     MPU handle: %d..
10016f94:	736d735b 64656c5f 6970675f 6e695f6f     [sms_led_gpio_in
10016fa4:	095d7469 626f7270 206d656c 6c696877     it].problem whil
10016fb4:	65732065 6e697474 70752067 64656c20     e setting up led
10016fc4:	00000030 736d735b 6572705f 72757373     0...[sms_pressur
10016fd4:	6f635f65 6769666e 5f657275 6f697067     e_configure_gpio
10016fe4:	7270095d 656c626f 6877206d 20656c69     ].problem while 
10016ff4:	74746573 20676e69 56207075 70206363     setting up Vcc p
10017004:	00006e69 736d735b 6572705f 72757373     in..[sms_pressur
10017014:	74735f65 75747261 09095d70 72617453     e_startup]..Star
10017024:	676e6974 65727020 72757373 65732065     ting pressure se
10017034:	726f736e 00000000 736d735b 6572705f     nsor....[sms_pre
10017044:	72757373 74735f65 75747261 09095d70     ssure_startup]..
10017054:	69614609 2064656c 69206f74 6974696e     .Failed to initi
10017064:	7a696c61 72702065 75737365 64206572     alize pressure d
10017074:	63697665 00000065 736d735b 6572705f     evice...[sms_pre
10017084:	72757373 736d5f65 635f3835 75636c61     ssure_ms58_calcu
10017094:	6574616c 6574205d 7265706d 72757461     late] temperatur
100170a4:	203d2065 20646c25 65727020 72757373     e = %ld  pressur
100170b4:	203d2065 00646c25 736d735b 6572705f     e = %ld.[sms_pre
100170c4:	72757373 736d5f65 705f3835 5f6c6c6f     ssure_ms58_poll_
100170d4:	61746164 7270205d 656c626f 6572206d     data] problem re
100170e4:	6e696461 736d2067 64203835 00617461     ading ms58 data.
100170f4:	736d735b 6572705f 72757373 65645f65     [sms_pressure_de
10017104:	656e6966 7265735f 65636976 53095d73     fine_services].S
10017114:	69767265 20736563 69666564 676e696e     ervices defining
10017124:	69616620 2c64656c 61657220 206e6f73      failed, reason 
10017134:	78257830 00000000 736d735b 6572705f     0x%x....[sms_pre
10017144:	72757373 65645f65 656e6966 7265735f     ssure_define_ser
10017154:	65636976 53095d73 69767265 20736563     vices].Services 
10017164:	69666564 2c64656e 534d5320 65727020     defined, SMS pre
10017174:	72757373 61682065 656c646e 6425203a     ssure handle: %d
10017184:	00000000 736d735b 6e65735f 73726f73     ....[sms_sensors
10017194:	6977735f 5d686374 43090909 646c756f     _switch]...Could
100171a4:	2074276e 74696e69 696c6169 4d20657a     n't initialize M
100171b4:	00005550 736d735b 6175645f 6d69746c     PU..[sms_dualtim
100171c4:	5f317265 005d6e66 736d735b 6175645f     er1_fn].[sms_dua
100171d4:	6d69746c 5f317265 095d6e66 61745309     ltimer1_fn]..Sta
100171e4:	6e697472 65732067 726f736e 73282073     rting sensors (s
100171f4:	74747568 20676e69 6e776f64 2e2e2e29     hutting down)...
10017204:	00000000 736d735b 6175645f 6d69746c     ....[sms_dualtim
10017214:	5f327265 005d6e66 2e2e2e20 69766967     er2_fn]. ...givi
10017224:	7520676e 00002170 2e2e2e20 74696177     ng up!.. ...wait
10017234:	2e676e69 63202e2e 746e756f 203a7265     ing... counter: 
10017244:	00006425 736d735b 6175645f 6d69746c     %d..[sms_dualtim
10017254:	5f327265 095d6e66 696c4209 6e696b6e     er2_fn]..Blinkin
10017264:	74732067 75747261 2e2e2e70 00000000     g startup.......
10017274:	736d735b 6175645f 6d69746c 5f327265     [sms_dualtimer2_
10017284:	095d6e66 696c4209 6e696b6e 68732067     fn]..Blinking sh
10017294:	6f647475 2e2e6e77 0000002e 736d735b     utdown......[sms
100172a4:	6175645f 6d69746c 5f327265 095d6e66     _dualtimer2_fn].
100172b4:	776f5009 6e697265 666f2067 2e2e2e66     .Powering off...
100172c4:	00000000 1000c7b0 1000c7be 1000c7cc     ................
100172d4:	1000c7da 1000c7e8 1000c7f6 1000c804     ................
100172e4:	1000c814 1000c824 1000c834 1000c844     ....$...4...D...
100172f4:	1000c854 1000c864 1000c874 1000c884     T...d...t.......
10017304:	1000c894 1000c8a4 1000c8b4 1000c8c4     ................
10017314:	1000c8d4 1000c8e4 1000c8f4 1000c904     ................
10017324:	1000c914 1000c924 1000c934 1000c944     ....$...4...D...
10017334:	1000c954 1000c962 1000c970 1000c97e     T...b...p...~...
10017344:	1000c98c 1000c99a 1000c9a8 1000c9b6     ................
10017354:	1000c9c4 1000c9d4 1000c9e4 1000c9f4     ................
10017364:	1000ca04 1000ca14 1000ca24 1000ca34     ........$...4...
10017374:	1000ca44 1000ca54 1000ca64 1000ca74     D...T...d...t...
10017384:	1000ca84 1000ca94 1000caa4 1000cab4     ................
10017394:	1000cac4 1000cad2 1000cae0 1000cb0c     ................
100173a4:	1000cb1a 1000cb28 1000cb36 1000cb44     ....(...6...D...
100173b4:	1000cb52 1000cb60 1000cb6e 1000cb7c     R...`...n...|...
100173c4:	1000cb8a 1000cb98 1000cba6 1000cbb4     ................
100173d4:	1000cbc2 1000cbd0 1000cbde 1000cbec     ................
100173e4:	1000cbfa 1000cc08 1000cc16 1000cc24     ............$...
100173f4:	1000cc32 1000cc40 1000cc4e 1000cc5c     2...@...N...\...
10017404:	1000cc6a 1000cc78 1000cc86 1000cc94     j...x...........
10017414:	1000cca2 1000ccb0 1000ccbe 1000cccc     ................
10017424:	1000ccda 1000cce8 1000ccf6 1000cd04     ................
10017434:	1000cd12 1000cd20 1000cd2e 1000cd3c     .... .......<...
10017444:	1000cd4a 1000cd58 1000cd66 1000cd74     J...X...f...t...
10017454:	1000cd82 1000cd90 1000cd9e 1000cdac     ................
10017464:	1000cdba 1000cdc8 1000cdd6 1000cde4     ................
10017474:	1000cdf2 1000ce8c 1000ceb4 1000cedc     ................
10017484:	1000cf04 1000d144 1000cf34 1000cf4c     ....D...4...L...
10017494:	1000cfc4 1000cfdc 1000cf64 1000cf7c     ........d...|...
100174a4:	1000cf94 1000cfac 1000cff4 1000d2b8     ................
100174b4:	1000d2b8 1000d2b8 1000d2b8 1000d2b8     ................
100174c4:	1000d2b8 1000d2b8 1000d2b8 1000d09c     ................
100174d4:	1000d0b4 1000d0cc 1000d15a 1000d024     ........Z...$...
100174e4:	1000d2b8 1000d2b8 1000d2b8 1000d2b8     ................
100174f4:	1000d2b8 1000d2b8 1000d0e4 1000d0fc     ................
10017504:	1000d114 1000d12c 1000d2b8 1000d270     ....,.......p...
10017514:	1000d288 1000d2b8 1000d2b8 1000d186     ................
10017524:	1000d19c 1000d1b2 1000d1c8 1000d2b8     ................
10017534:	1000d2b8 1000d2b8 1000d2b8 1000d2b8     ................
10017544:	1000d2b8 1000d2b8 1000d2b8 1000ce78     ............x...
10017554:	1000cea0 1000cec8 1000cef0 1000cf1c     ................
10017564:	1000d00c 1000d03c 1000d054 1000d06c     ....<...T...l...
10017574:	1000d084 1000d170 1000d1de 1000d258     ....p.......X...
10017584:	1000d2a0 1000d9da 1000d9ec 1000d9c2     ................
10017594:	1000d9c2 1000d9c2 1000d9da 1000d9c2     ................
100175a4:	1000d9c2 1000e3de 1000e452 1000e3c6     ........R.......
100175b4:	1000e458 1000e3cc 1000e3d2 1000e3d8     X...............
100175c4:	1000eb38 1000eb38 1000eb38 1000eb38     8...8...8...8...
100175d4:	1000eb38 1000eb38 1000eb38 1000eb38     8...8...8...8...
100175e4:	1000eb38 1000eb38 1000eb38 1000eb38     8...8...8...8...
100175f4:	1000eb38 1000eb38 1000eb38 1000eb38     8...8...8...8...
10017604:	1000eb38 1000eb38 1000eb38 1000eb56     8...8...8...V...
10017614:	1000eb56 1000eb56 1000eb56 1000eb56     V...V...V...V...
10017624:	1000eb56 1000eb56 1000eb56 1000eb56     V...V...V...V...
10017634:	1000eb56 1000eb78 1000eb78 1000eb78     V...x...x...x...
10017644:	1000eb78 1000eb78 1000eb78 1000eb78     x...x...x...x...
10017654:	1000eb78 1000eb78 1000eb78 1000eba8     x...x...x.......
10017664:	1000eba8 1000eba8 1000eba8 1000eba8     ................
10017674:	1000eba8 1000ebc2 1000ebc2 1000ebc2     ................
10017684:	1000ebc2 1000ebc2 1000ebc2 1000ebc2     ................
10017694:	1000ebc2 1000ebc2 1000ebdc 1000ebdc     ................
100176a4:	1000ebfe 1000ebfe 1000ec18 1000ebfe     ................
100176b4:	34333231 00003635 efcdab00 00efcdab     123456..........

100176c4 <ble_mgr_gatt_server_handle>:
	...
100176dc:	1000d8d5 1000d8fd 1000d945 00000000     ........E.......
100176ec:	65646e55 656e6966 76452064 20746e65     Undefined Event 
100176fc:	65636552 64657669 00000000 6e616353     Received....Scan
1001770c:	676e696e 61662020 64656c69 00000000     ning  failed....
1001771c:	65766441 73697472 20676e69 6c696166     Advertising fail
1001772c:	00006465 2d454c42 2055544d 6e616843     ed..BLE-MTU Chan
1001773c:	2c646567 6e6f4320 7463656e 206e6f69     ged, Connection 
1001774c:	646e6148 203a656c 202c6425 2077654e     Handle: %d, New 
1001775c:	756c6156 25203a65 00000064 2055544d     Value: %d...MTU 
1001776c:	6e616843 2c646567 6e6f4320 7463656e     Changed, Connect
1001777c:	206e6f69 646e6148 253a656c 4f202c64     ion Handle:%d, O
1001778c:	61726570 6e6f6974 0064253a 2055544d     peration:%d.MTU 
1001779c:	6e616843 46206567 656c6961 43202c64     Change Failed, C
100177ac:	656e6e6f 6f697463 6148206e 656c646e     onnection Handle
100177bc:	2c64253a 65704f20 69746172 253a6e6f     :%d, Operation:%
100177cc:	00000064 72616843 69725720 43206574     d...Char Write C
100177dc:	4320646d 6c706d6f 2c657465 6e6f4320     md Complete, Con
100177ec:	7463656e 206e6f69 646e6148 253a656c     nection Handle:%
100177fc:	4f202c64 61726570 6e6f6974 0064253a     d, Operation:%d.
1001780c:	72616843 69725720 43206574 4620646d     Char Write Cmd F
1001781c:	656c6961 43202c64 656e6e6f 6f697463     ailed, Connectio
1001782c:	6148206e 656c646e 2c64253a 65704f20     n Handle:%d, Ope
1001783c:	69746172 253a6e6f 00000064 74617453     ration:%d...Stat
1001784c:	6f4e2065 61482074 656c646e 64252064     e Not Handled %d
1001785c:	00000000 69766544 64206563 6f637369     ....Device disco
1001786c:	63656e6e 20646574 73616552 303a6e6f     nnected Reason:0
1001787c:	32302578 61482078 656c646e 2578303d     x%02x Handle=0x%
1001788c:	00000078 425f5441 435f454c 5f4e4e4f     x...AT_BLE_CONN_
1001789c:	41524150 50555f4d 45544144 00000020     PARAM_UPDATE ...
100178ac:	72636e45 69747079 66206e6f 656c6961     Encryption faile
100178bc:	00000064 72636e45 69747079 63206e6f     d...Encryption c
100178cc:	6c706d6f 64657465 63757320 73736563     ompleted success
100178dc:	6c6c7566 00000079 20454c42 69766544     fully...BLE Devi
100178ec:	6e206563 6620746f 646e756f 636e6520     ce not found enc
100178fc:	74707972 206e6f69 6f666e69 00000000     ryption info....
1001790c:	6f666e49 7665443a 20656369 6e756f66     Info:Device foun
1001791c:	64612064 73657264 255b2073 20205d64     d address [%d]  
1001792c:	30257830 30255832 30255832 30255832     0x%02X%02X%02X%0
1001793c:	30255832 30255832 00205832 6f666e49     2X%02X%02X .Info
1001794c:	78616d3a 6d756d69 2e6f6e20 7320666f     :maximum no.of s
1001795c:	206e6163 69766564 72206563 68636165     can device reach
1001796c:	2e2e6465 6f74532e 6e697070 63532067     ed...Stopping Sc
1001797c:	00006e61 6c696146 74206465 7473206f     an..Failed to st
1001798c:	7320706f 6e6e6163 00676e69 30257830     op scanning.0x%0
1001799c:	202c5832 00000000 4b525343 0000203a     2X, ....CSRK: ..
100179ac:	3a4b5249 00000000 72696150 20676e69     IRK:....Pairing 
100179bc:	6c696166 2e2e6465 7369442e 6e6e6f63     failed...Disconn
100179cc:	69746365 0000676e 63736944 656e6e6f     ecting..Disconne
100179dc:	52207463 65757165 46207473 656c6961     ct Request Faile
100179ec:	00000064 72696150 20676e69 636f7270     d...Pairing proc
100179fc:	72756465 6f632065 656c706d 20646574     edure completed 
10017a0c:	63637573 66737365 796c6c75 00000000     successfully....
10017a1c:	20454c42 69766544 6e206563 6620746f     BLE Device not f
10017a2c:	646e756f 206f7420 726f7473 68742065     ound to store th
10017a3c:	61702065 6e697269 6e692067 00006f66     e pairing info..
10017a4c:	3a4b544c 00000020 72636e45 69747079     LTK: ...Encrypti
10017a5c:	4e206e6f 7320746f 74726174 00006465     on Not started..
10017a6c:	76616c53 65532065 69727563 52207974     Slave Security R
10017a7c:	2d207165 74754120 746e6568 74616369     eq - Authenticat
10017a8c:	206e6f69 6c696146 00006465 656e6547     ion Failed..Gene
10017a9c:	65746172 544c2064 00203a4b 30257830     rated LTK: .0x%0
10017aac:	00205832 646e6553 20676e69 72696170     2X .Sending pair
10017abc:	20676e69 70736572 65736e6f 00000000     ing response....
10017acc:	72696150 71655220 74736575 41202d20     Pair Request - A
10017adc:	65687475 6369746e 6f697461 6146206e     uthentication Fa
10017aec:	64656c69 00000000 65746e45 68742072     iled....Enter th
10017afc:	61502065 656b7373 2d362879 69676944     e Passkey(6-Digi
10017b0c:	69202974 6554206e 6e696d72 003a6c61     t) in Terminal:.
10017b1c:	206e6950 656d6954 0074756f 63736944     Pin Timeout.Disc
10017b2c:	656e6e6f 6e697463 2e2e2067 0000002e     onnecting ......
10017b3c:	61656c50 45206573 7265746e 65687420     Please Enter the
10017b4c:	6c6f6620 69776f6c 5020676e 2d737361      following Pass-
10017b5c:	65646f63 206e6f28 6568746f 65442072     code(on other De
10017b6c:	65636976 00003a29 72696150 79656b2d     vice):..Pair-key
10017b7c:	70657220 6620796c 656c6961 00000064      reply failed...
10017b8c:	20424f4f 74616546 20657275 20746f4e     OOB Feature Not 
10017b9c:	70707573 6574726f 00000064 65746e45     supported...Ente
10017bac:	20646572 73736150 646f632d 00003a65     red Pass-code:..
10017bbc:	2d434e45 3a716552 6e6f4320 6148206e     ENC-Req: Conn Ha
10017bcc:	656c646e 76654420 20656369 6e756f46     ndle Device Foun
10017bdc:	64683a64 64253a6c 00000000 74736f68     d:hdl:%d....host
10017bec:	76656420 20656369 76696465 00782520      device ediv %x.
10017bfc:	72656570 76656420 20656369 76696465     peer device ediv
10017c0c:	00782520 5f636e65 20716572 76696465      %x.enc_req ediv
10017c1c:	00782520 20656854 65646e69 73692078      %x.The index is
10017c2c:	00642520 2d434e45 3a716552 79654b20      %d.ENC-Req: Key
10017c3c:	756f4620 0000646e 72696150 20676e69      Found..Pairing 
10017c4c:	6f666e69 74616d72 206e6f69 7020666f     information of p
10017c5c:	20726565 69766564 69206563 6f6e2073     eer device is no
10017c6c:	76612074 616c6961 2e656c62 00000000     t available.....
10017c7c:	61656c50 75206573 6961706e 68742072     Please unpair th
10017c8c:	65642065 65636976 6f726620 6570206d     e device from pe
10017c9c:	64207265 63697665 6f6d2865 656c6962     er device(mobile
10017cac:	65732029 6e697474 6d207367 20756e65     ) settings menu 
10017cbc:	20646e61 72617473 61702074 6e697269     and start pairin
10017ccc:	67612067 006e6961 72636e45 69747079     g again.Encrypti
10017cdc:	52206e6f 65757165 52207473 796c7065     on Request Reply
10017cec:	69614620 0064656c 72636e45 69747079      Failed.Encrypti
10017cfc:	52206e6f 65757165 52207473 796c7065     on Request Reply
10017d0c:	00000000 656c625b 696e695f 09095d74     ....[ble_init]..
10017d1c:	696e4909 6c616974 6e697a69 41532067     .Initializing SA
10017d2c:	3131424d 00000000 656c625b 696e695f     MB11....[ble_ini
10017d3c:	09095d74 424d4153 49203131 6974696e     t]..SAMB11 Initi
10017d4c:	7a696c61 6f697461 6166206e 64656c69     alization failed
10017d5c:	00000000 656c625b 696e695f 09095d74     ....[ble_init]..
10017d6c:	61656c50 63206573 6b636568 65687420     Please check the
10017d7c:	776f7020 61207265 6320646e 656e6e6f      power and conne
10017d8c:	6f697463 202f206e 64726168 65726177     ction / hardware
10017d9c:	6e6f6320 7463656e 0000726f 52424153      connector..SABR
10017dac:	4d532d65 00000053 69766544 6e206563     e-SMS...Device n
10017dbc:	20656d61 20746573 6c696166 00006465     ame set failed..
10017dcc:	656c625b 7465735f 7665645f 6e6f635f     [ble_set_dev_con
10017ddc:	5d676966 44420909 64646120 73736572     fig]..BD address
10017dec:	74656720 69616620 0064656c 656c625b      get failed.[ble
10017dfc:	7465735f 7665645f 6e6f635f 5d676966     _set_dev_config]
10017e0c:	44420909 64644120 73736572 2578303a     ..BD Address:0x%
10017e1c:	25583230 25583230 25583230 25583230     02X%02X%02X%02X%
10017e2c:	25583230 2c583230 64644120 73736572     02X%02X, Address
10017e3c:	70795420 64253a65 00000000 656c625b      Type:%d....[ble
10017e4c:	7465735f 7665645f 6e6f635f 5d676966     _set_dev_config]
10017e5c:	74655309 454c4220 76654420 20656369     .Set BLE Device 
10017e6c:	666e6f63 72756769 6f697461 6166206e     configuration fa
10017e7c:	64656c69 00000000 656c625b 7465735f     iled....[ble_set
10017e8c:	7665645f 6e6f635f 5d676966 74655309     _dev_config].Set
10017e9c:	454c4220 76654420 20656369 72646441      BLE Device Addr
10017eac:	20737365 6c696166 00006465 6e616353     ess failed..Scan
10017ebc:	676e696e 502e2e2e 7361656c 61772065     ning...Please wa
10017ecc:	2e2e7469 0000002e 76616c53 65732065     it......Slave se
10017edc:	69727563 72207974 65757165 73207473     curity request s
10017eec:	65636375 75667373 0000006c 76616c53     uccessful...Slav
10017efc:	65732065 69727563 72207974 65757165     e security reque
10017f0c:	66207473 656c6961 00000064 6e6e6f43     st failed...Conn
10017f1c:	65746365 6f742064 65657020 65642072     ected to peer de
10017f2c:	65636976 74697720 64612068 73657264     vice with addres
10017f3c:	78302073 78323025 78323025 78323025     s 0x%02x%02x%02x
10017f4c:	78323025 78323025 78323025 00000000     %02x%02x%02x....
10017f5c:	6e6e6f43 69746365 48206e6f 6c646e61     Connection Handl
10017f6c:	64252065 00000000 6f736552 6e69766c     e %d....Resolvin
10017f7c:	61522067 6d6f646e 64646120 73736572     g Random address
10017f8c:	63757320 73736563 00002a2a 6f736552      success**..Reso
10017f9c:	6e69766c 61522067 6d6f646e 64646120     lving Random add
10017fac:	73736572 69616620 2a64656c 0000002a     ress failed**...
10017fbc:	2078614d 626d756e 6f207265 6f632066     Max number of co
10017fcc:	63656e6e 6e6f6974 61657220 64656863     nnection reached
10017fdc:	6425203a 3d3d3d20 7369443e 6e6e6f63     : %d ===>Disconn
10017fec:	69746365 2e2e676e 0000002e 69766544     ecting......Devi
10017ffc:	43206563 656e6e6f 6f697463 6146206e     ce Connection Fa
1001800c:	64656c69 53202d20 75746174 25203a73     iled - Status: %
1001801c:	00000064 23232323 23232323 65442323     d...##########De
1001802c:	65636976 756f4620 0000646e 23232323     vice Found..####
1001803c:	23232323 65442323 65636976 746f4e20     ######Device Not
1001804c:	756f4620 0000646e 69766544 69206563      Found..Device i
1001805c:	253a7864 00000064 4c420a0d 76452d45     dx:%d.....BLE-Ev
1001806c:	3a746e65 00006425 54544147 7265535f     ent:%d..GATT_Ser
1001807c:	20726576 6e657645 64253a74 00000000     ver Event:%d....
1001808c:	2d454c42 616e614d 3a726567 6e6b6e55     BLE-Manager:Unkn
1001809c:	206e776f 6e657645 78303d74 00005825     own Event=0x%X..
100180ac:	656c625b 6e616d5f 72656761 0909095d     [ble_manager]...
100180bc:	756e614d 74636166 72657275 65707320     Manufacturer spe
100180cc:	69666963 61642063 65206174 6c62616e     cific data enabl
100180dc:	00006465 5a2d571c 00002dbe 20454c42     ed...W-Z.-..BLE 
100180ec:	65766441 73697472 6e656d65 61642074     Advertisement da
100180fc:	73206174 66207465 656c6961 00000064     ta set failed...

1001810c <ble_mgr_gap_handle>:
1001810c:	1000d861 1000db11 1000d885 1000d8ad     a...............
1001811c:	00000000 1000e78d 1000d98d 1000da29     ............)...
1001812c:	1000dd6d 1000dbbd 1000df6d 1000dd85     m.......m.......
1001813c:	1000e0f9 1000e23d 1000da4d 1000e9d9     ....=...M.......
	...
10018158:	1000f9da 1000f9e8 1000fa2c 1000fa70     ........,...p...
10018168:	1000faa2 1000fad6 1000faee 4e2e2e2e     ...............N
10018178:	4f53204f 45435255 00002121 422e2e2e     O SOURCE!!.....B
10018188:	00304e54 69616d5b 09095d6e 72450909     TN0.[main]....Er
10018198:	20726f72 73206e69 625f736d 6f747475     ror in sms_butto
100181a8:	6e665f6e 00212928 422e2e2e 00314e54     n_fn()!....BTN1.
100181b8:	442e2e2e 544c4155 52454d49 00000031     ...DUALTIMER1...
100181c8:	442e2e2e 544c4155 52454d49 00000032     ...DUALTIMER2...
100181d8:	3f2e2e2e 0000003f 69616d5b 09095d6e     ...??...[main]..
100181e8:	54520909 75622053 6e6f7474 002e2e2e     ..RTS button....
100181f8:	656d7441 6f43206c 022e7072                       Atmel Corp.

10018203 <CSWTCH.45>:
10018203:	00100402                                         ...

10018206 <CSWTCH.47>:
10018206:	03010300 03030303 03030303 02020303              ...............

10018215 <client_conf_uuid>:
10018215:	29042902                                         .)

10018217 <presentation_format_uuid>:
10018217:	29012904                                         .)

10018219 <user_desc_uuid>:
10018219:	29032901                                         .)

1001821b <server_conf_uuid>:
1001821b:	29002903                                         .)

1001821d <extended_props_uuid>:
1001821d:	28022900                                         .)

1001821f <include_uuid>:
1001821f:	28032802                                         .(

10018221 <char_uuid>:
10018221:	6a002803 8e100139 4c100138 24100139     .(.j9...8..L9..$
10018231:	4c100139 18100139 4c100139 24100139     9..L9...9..L9..$
10018241:	8e100139 8e100138 18100138 24100139     9...8...8...9..$
10018251:	d0100139 d0100139 d0100139 52100139     9...9...9...9..R
10018261:	8e100139 8e100138 38100138 22100139     9...8...8..89.."
10018271:	38100139 18100139 38100139 22100139     9..89...9..89.."
10018281:	8e100139 8e100138 18100138 22100139     9...8...8...9.."
10018291:	d0100139 d0100139 d0100139 dc100139     9...9...9...9...
100182a1:	c8100139 2610013c 2610013c 2410013c     9...<..&<..&<..$
100182b1:	ba10013c ba10013c b010013c 2410013c     <...<...<...<..$
100182c1:	ba10013c b010013c ba10013c 2410013c     <...<...<...<..$
100182d1:	c010013c c010013c c010013c 4a10013c     <...<...<...<..J
100182e1:	3c10013d fc100146 fc100144 fa100144     =..<F...D...D...
100182f1:	14100144 14100146 06100146 fa100146     D...F...F...F...
10018301:	14100144 06100146 14100146 fa100146     D...F...F...F...
10018311:	1c100144 1c100146 1c100146 1c100146     D...F...F...F...
10018321:	43100148 28000000                                H..C...

10018328 <_global_impure_ptr>:
10018328:	10018428                                (...

1001832c <__sf_fake_stdin>:
	...

1001834c <__sf_fake_stdout>:
	...

1001836c <__sf_fake_stderr>:
	...
1001838c:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
1001839c:	32313000 36353433 41393837 45444342     .0123456789ABCDE
100183ac:	31300046 35343332 39383736 64636261     F.0123456789abcd
100183bc:	00006665                                ef..

100183c0 <_init>:
100183c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100183c2:	46c0      	nop			; (mov r8, r8)
100183c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
100183c6:	bc08      	pop	{r3}
100183c8:	469e      	mov	lr, r3
100183ca:	4770      	bx	lr

100183cc <__init_array_start>:
100183cc:	100080b1 	.word	0x100080b1

100183d0 <_fini>:
100183d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100183d2:	46c0      	nop			; (mov r8, r8)
100183d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
100183d6:	bc08      	pop	{r3}
100183d8:	469e      	mov	lr, r3
100183da:	4770      	bx	lr

100183dc <__fini_array_start>:
100183dc:	10008089 	.word	0x10008089
